
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/json_test_uq_off:     file format elf32-littlearm


Disassembly of section .init:

00014520 <.init>:
   14520:	push	{r3, lr}
   14524:	bl	14fe4 <_start@@Base+0x3c>
   14528:	pop	{r3, pc}

Disassembly of section .plt:

0001452c <raise@plt-0x14>:
   1452c:	push	{lr}		; (str lr, [sp, #-4]!)
   14530:	ldr	lr, [pc, #4]	; 1453c <raise@plt-0x4>
   14534:	add	lr, pc, lr
   14538:	ldr	pc, [lr, #8]!
   1453c:	andeq	pc, r2, r4, asr #21

00014540 <raise@plt>:
   14540:	add	ip, pc, #0, 12
   14544:	add	ip, ip, #192512	; 0x2f000
   14548:	ldr	pc, [ip, #2756]!	; 0xac4

0001454c <strcmp@plt>:
   1454c:	add	ip, pc, #0, 12
   14550:	add	ip, ip, #192512	; 0x2f000
   14554:	ldr	pc, [ip, #2748]!	; 0xabc

00014558 <memmove@plt>:
   14558:	add	ip, pc, #0, 12
   1455c:	add	ip, ip, #192512	; 0x2f000
   14560:	ldr	pc, [ip, #2740]!	; 0xab4

00014564 <free@plt>:
   14564:	add	ip, pc, #0, 12
   14568:	add	ip, ip, #192512	; 0x2f000
   1456c:	ldr	pc, [ip, #2732]!	; 0xaac

00014570 <memcpy@plt>:
   14570:	add	ip, pc, #0, 12
   14574:	add	ip, ip, #192512	; 0x2f000
   14578:	ldr	pc, [ip, #2724]!	; 0xaa4

0001457c <memcmp@plt>:
   1457c:	add	ip, pc, #0, 12
   14580:	add	ip, ip, #192512	; 0x2f000
   14584:	ldr	pc, [ip, #2716]!	; 0xa9c

00014588 <realloc@plt>:
   14588:	add	ip, pc, #0, 12
   1458c:	add	ip, ip, #192512	; 0x2f000
   14590:	ldr	pc, [ip, #2708]!	; 0xa94

00014594 <fwrite@plt>:
   14594:	add	ip, pc, #0, 12
   14598:	add	ip, ip, #192512	; 0x2f000
   1459c:	ldr	pc, [ip, #2700]!	; 0xa8c

000145a0 <malloc@plt>:
   145a0:	add	ip, pc, #0, 12
   145a4:	add	ip, ip, #192512	; 0x2f000
   145a8:	ldr	pc, [ip, #2692]!	; 0xa84

000145ac <__libc_start_main@plt>:
   145ac:	add	ip, pc, #0, 12
   145b0:	add	ip, ip, #192512	; 0x2f000
   145b4:	ldr	pc, [ip, #2684]!	; 0xa7c

000145b8 <__gmon_start__@plt>:
   145b8:	add	ip, pc, #0, 12
   145bc:	add	ip, ip, #192512	; 0x2f000
   145c0:	ldr	pc, [ip, #2676]!	; 0xa74

000145c4 <strlen@plt>:
   145c4:	add	ip, pc, #0, 12
   145c8:	add	ip, ip, #192512	; 0x2f000
   145cc:	ldr	pc, [ip, #2668]!	; 0xa6c

000145d0 <fprintf@plt>:
   145d0:	add	ip, pc, #0, 12
   145d4:	add	ip, ip, #192512	; 0x2f000
   145d8:	ldr	pc, [ip, #2660]!	; 0xa64

000145dc <posix_memalign@plt>:
   145dc:	add	ip, pc, #0, 12
   145e0:	add	ip, ip, #192512	; 0x2f000
   145e4:	ldr	pc, [ip, #2652]!	; 0xa5c

000145e8 <memset@plt>:
   145e8:	add	ip, pc, #0, 12
   145ec:	add	ip, ip, #192512	; 0x2f000
   145f0:	ldr	pc, [ip, #2644]!	; 0xa54

000145f4 <strncpy@plt>:
   145f4:	add	ip, pc, #0, 12
   145f8:	add	ip, ip, #192512	; 0x2f000
   145fc:	ldr	pc, [ip, #2636]!	; 0xa4c

00014600 <strtod@plt>:
   14600:	add	ip, pc, #0, 12
   14604:	add	ip, ip, #192512	; 0x2f000
   14608:	ldr	pc, [ip, #2628]!	; 0xa44

0001460c <memchr@plt>:
   1460c:	add	ip, pc, #0, 12
   14610:	add	ip, ip, #192512	; 0x2f000
   14614:	ldr	pc, [ip, #2620]!	; 0xa3c

00014618 <fputc@plt>:
   14618:	add	ip, pc, #0, 12
   1461c:	add	ip, ip, #192512	; 0x2f000
   14620:	ldr	pc, [ip, #2612]!	; 0xa34

00014624 <sprintf@plt>:
   14624:	add	ip, pc, #0, 12
   14628:	add	ip, ip, #192512	; 0x2f000
   1462c:	ldr	pc, [ip, #2604]!	; 0xa2c

00014630 <fputs@plt>:
   14630:	add	ip, pc, #0, 12
   14634:	add	ip, ip, #192512	; 0x2f000
   14638:	ldr	pc, [ip, #2596]!	; 0xa24

0001463c <abort@plt>:
   1463c:	add	ip, pc, #0, 12
   14640:	add	ip, ip, #192512	; 0x2f000
   14644:	ldr	pc, [ip, #2588]!	; 0xa1c

00014648 <__assert_fail@plt>:
   14648:	add	ip, pc, #0, 12
   1464c:	add	ip, ip, #192512	; 0x2f000
   14650:	ldr	pc, [ip, #2580]!	; 0xa14

Disassembly of section .text:

00014658 <main@@Base-0x160>:
   14658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1465c:	sub	sp, sp, #36	; 0x24
   14660:	mov	r9, #0
   14664:	ldr	r7, [sp, #72]	; 0x48
   14668:	mov	r4, r2
   1466c:	mov	r8, r0
   14670:	str	r9, [r7]
   14674:	str	r9, [r7, #4]
   14678:	mov	sl, r3
   1467c:	bl	176ec <_start@@Base+0x2744>
   14680:	cmp	r4, r0
   14684:	beq	1474c <__assert_fail@plt+0x104>
   14688:	mov	r6, r0
   1468c:	add	fp, sp, #24
   14690:	str	r9, [sp, #8]
   14694:	str	r9, [sp, #12]
   14698:	mov	r9, sl
   1469c:	add	r3, sp, #20
   146a0:	str	r3, [sp, #4]
   146a4:	str	fp, [sp]
   146a8:	add	r3, sp, #16
   146ac:	ldr	r5, [r9]
   146b0:	mov	r2, r4
   146b4:	mov	r1, r6
   146b8:	mov	r0, r8
   146bc:	blx	r5
   146c0:	cmp	r4, r0
   146c4:	mov	r5, r0
   146c8:	beq	1474c <__assert_fail@plt+0x104>
   146cc:	cmp	r6, r0
   146d0:	bne	14758 <__assert_fail@plt+0x110>
   146d4:	ldr	r3, [r9, #4]!
   146d8:	cmp	r3, #0
   146dc:	bne	1469c <__assert_fail@plt+0x54>
   146e0:	mov	r2, r4
   146e4:	mov	r3, #23
   146e8:	mov	r1, r6
   146ec:	mov	r0, r8
   146f0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   146f4:	mov	r4, r0
   146f8:	b	1474c <__assert_fail@plt+0x104>
   146fc:	mov	r6, r5
   14700:	b	14698 <__assert_fail@plt+0x50>
   14704:	mov	r3, #8
   14708:	mov	r2, r4
   1470c:	mov	r1, r5
   14710:	mov	r0, r8
   14714:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   14718:	cmp	r4, r0
   1471c:	beq	1474c <__assert_fail@plt+0x104>
   14720:	ldrd	r2, [r7]
   14724:	ldrd	r0, [sp, #8]
   14728:	adds	r0, r0, r2
   1472c:	adc	r1, r1, r3
   14730:	mov	r3, r1
   14734:	mov	r2, r0
   14738:	strd	r2, [r7]
   1473c:	ldr	r3, [sp, #20]
   14740:	cmp	r3, #0
   14744:	bne	146fc <__assert_fail@plt+0xb4>
   14748:	mov	r4, r5
   1474c:	mov	r0, r4
   14750:	add	sp, sp, #36	; 0x24
   14754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14758:	ldr	r3, [sp, #16]
   1475c:	cmp	r3, #0
   14760:	bne	14704 <__assert_fail@plt+0xbc>
   14764:	ldrd	r2, [sp, #24]
   14768:	strd	r2, [sp, #8]
   1476c:	b	14720 <__assert_fail@plt+0xd8>
   14770:	push	{r4, lr}
   14774:	mov	r2, #260	; 0x104
   14778:	ldr	r3, [pc, #8]	; 14788 <__assert_fail@plt+0x140>
   1477c:	ldr	r1, [pc, #8]	; 1478c <__assert_fail@plt+0x144>
   14780:	ldr	r0, [pc, #8]	; 14790 <__assert_fail@plt+0x148>
   14784:	bl	14648 <__assert_fail@plt>
   14788:	andeq	r2, r3, r0, lsl #9
   1478c:	andeq	r2, r3, r3, lsl sp
   14790:	andeq	r2, r3, r9, ror #26
   14794:	push	{r4, lr}
   14798:	mov	r2, #260	; 0x104
   1479c:	ldr	r3, [pc, #8]	; 147ac <__assert_fail@plt+0x164>
   147a0:	ldr	r1, [pc, #8]	; 147b0 <__assert_fail@plt+0x168>
   147a4:	ldr	r0, [pc, #8]	; 147b4 <__assert_fail@plt+0x16c>
   147a8:	bl	14648 <__assert_fail@plt>
   147ac:	ldrdeq	r3, [r3], -r1
   147b0:	andeq	r2, r3, r3, lsl sp
   147b4:	andeq	r2, r3, r9, ror #26

000147b8 <main@@Base>:
   147b8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   147bc:	bl	1f4d4 <edge_case_tests@@Base>
   147c0:	ldr	r6, [pc, #1640]	; 14e30 <main@@Base+0x678>
   147c4:	ldr	r7, [pc, #1640]	; 14e34 <main@@Base+0x67c>
   147c8:	mov	r4, #0
   147cc:	ldr	r8, [pc, #1636]	; 14e38 <main@@Base+0x680>
   147d0:	ldr	sl, [pc, #1636]	; 14e3c <main@@Base+0x684>
   147d4:	ldr	r9, [pc, #1636]	; 14e40 <main@@Base+0x688>
   147d8:	mov	r5, r0
   147dc:	bl	1f6a4 <error_case_tests@@Base>
   147e0:	orr	r5, r5, r0
   147e4:	bl	1fc1c <union_vector_tests@@Base>
   147e8:	orr	r5, r5, r0
   147ec:	bl	1f8f8 <base64_tests@@Base>
   147f0:	orr	r5, r5, r0
   147f4:	bl	1fa9c <mixed_type_union_tests@@Base>
   147f8:	ldr	r3, [pc, #1604]	; 14e44 <main@@Base+0x68c>
   147fc:	mov	r2, r7
   14800:	str	r3, [sp, #8]
   14804:	str	r4, [sp, #4]
   14808:	mov	r3, r4
   1480c:	str	r4, [sp]
   14810:	ldr	r1, [pc, #1584]	; 14e48 <main@@Base+0x690>
   14814:	orr	r5, r5, r0
   14818:	mov	r0, r6
   1481c:	bl	1f108 <test_json@@Base>
   14820:	mov	r3, #528	; 0x210
   14824:	str	r3, [sp, #8]
   14828:	mov	r2, r8
   1482c:	mov	r3, r4
   14830:	str	r4, [sp, #4]
   14834:	str	r4, [sp]
   14838:	ldr	r1, [pc, #1548]	; 14e4c <main@@Base+0x694>
   1483c:	orr	r5, r5, r0
   14840:	mov	r0, r6
   14844:	bl	1f108 <test_json@@Base>
   14848:	ldr	r3, [pc, #1536]	; 14e50 <main@@Base+0x698>
   1484c:	mov	r2, sl
   14850:	str	r3, [sp, #8]
   14854:	str	r4, [sp, #4]
   14858:	mov	r3, r4
   1485c:	str	r4, [sp]
   14860:	ldr	r1, [pc, #1516]	; 14e54 <main@@Base+0x69c>
   14864:	orr	r5, r5, r0
   14868:	mov	r0, r6
   1486c:	bl	1f108 <test_json@@Base>
   14870:	ldr	r3, [pc, #1504]	; 14e58 <main@@Base+0x6a0>
   14874:	mov	r2, r9
   14878:	str	r3, [sp, #8]
   1487c:	str	r4, [sp, #4]
   14880:	mov	r3, r4
   14884:	str	r4, [sp]
   14888:	ldr	r1, [pc, #1484]	; 14e5c <main@@Base+0x6a4>
   1488c:	orr	r5, r5, r0
   14890:	mov	r0, r6
   14894:	bl	1f108 <test_json@@Base>
   14898:	ldr	r3, [pc, #1472]	; 14e60 <main@@Base+0x6a8>
   1489c:	mov	r2, r9
   148a0:	str	r3, [sp, #8]
   148a4:	str	r4, [sp, #4]
   148a8:	mov	r3, r4
   148ac:	str	r4, [sp]
   148b0:	ldr	r1, [pc, #1452]	; 14e64 <main@@Base+0x6ac>
   148b4:	orr	r5, r5, r0
   148b8:	mov	r0, r6
   148bc:	bl	1f108 <test_json@@Base>
   148c0:	mov	r3, #540	; 0x21c
   148c4:	str	r3, [sp, #8]
   148c8:	mov	r2, r8
   148cc:	mov	r3, r4
   148d0:	str	r4, [sp, #4]
   148d4:	str	r4, [sp]
   148d8:	ldr	r1, [pc, #1416]	; 14e68 <main@@Base+0x6b0>
   148dc:	orr	r5, r5, r0
   148e0:	mov	r0, r6
   148e4:	bl	1f108 <test_json@@Base>
   148e8:	ldr	r3, [pc, #1404]	; 14e6c <main@@Base+0x6b4>
   148ec:	mov	r2, sl
   148f0:	str	r3, [sp, #8]
   148f4:	str	r4, [sp, #4]
   148f8:	mov	r3, r4
   148fc:	str	r4, [sp]
   14900:	ldr	r1, [pc, #1384]	; 14e70 <main@@Base+0x6b8>
   14904:	orr	r5, r5, r0
   14908:	mov	r0, r6
   1490c:	bl	1f108 <test_json@@Base>
   14910:	ldr	r3, [pc, #1372]	; 14e74 <main@@Base+0x6bc>
   14914:	mov	r2, r7
   14918:	str	r3, [sp, #8]
   1491c:	str	r4, [sp, #4]
   14920:	mov	r3, r4
   14924:	str	r4, [sp]
   14928:	ldr	r1, [pc, #1352]	; 14e78 <main@@Base+0x6c0>
   1492c:	orr	r5, r5, r0
   14930:	mov	r0, r6
   14934:	bl	1f108 <test_json@@Base>
   14938:	ldr	r3, [pc, #1340]	; 14e7c <main@@Base+0x6c4>
   1493c:	mov	r2, r7
   14940:	str	r3, [sp, #8]
   14944:	str	r4, [sp, #4]
   14948:	mov	r3, r4
   1494c:	str	r4, [sp]
   14950:	ldr	r1, [pc, #1320]	; 14e80 <main@@Base+0x6c8>
   14954:	orr	r5, r5, r0
   14958:	mov	r0, r6
   1495c:	bl	1f108 <test_json@@Base>
   14960:	ldr	r3, [pc, #1308]	; 14e84 <main@@Base+0x6cc>
   14964:	mov	r2, r8
   14968:	str	r3, [sp, #8]
   1496c:	str	r4, [sp, #4]
   14970:	mov	r3, r4
   14974:	str	r4, [sp]
   14978:	ldr	r1, [pc, #1288]	; 14e88 <main@@Base+0x6d0>
   1497c:	orr	r5, r5, r0
   14980:	mov	r0, r6
   14984:	bl	1f108 <test_json@@Base>
   14988:	mov	r3, #604	; 0x25c
   1498c:	str	r3, [sp, #8]
   14990:	mov	r2, sl
   14994:	mov	r3, r4
   14998:	str	r4, [sp, #4]
   1499c:	str	r4, [sp]
   149a0:	ldr	r1, [pc, #1252]	; 14e8c <main@@Base+0x6d4>
   149a4:	orr	r5, r5, r0
   149a8:	mov	r0, r6
   149ac:	bl	1f108 <test_json@@Base>
   149b0:	ldr	r3, [pc, #1240]	; 14e90 <main@@Base+0x6d8>
   149b4:	str	r4, [sp, #4]
   149b8:	str	r3, [sp, #8]
   149bc:	str	r4, [sp]
   149c0:	mov	r3, r4
   149c4:	ldr	r2, [pc, #1224]	; 14e94 <main@@Base+0x6dc>
   149c8:	ldr	r1, [pc, #1224]	; 14e98 <main@@Base+0x6e0>
   149cc:	orr	r5, r5, r0
   149d0:	mov	r0, r6
   149d4:	bl	1f108 <test_json@@Base>
   149d8:	ldr	r3, [pc, #1212]	; 14e9c <main@@Base+0x6e4>
   149dc:	mov	r2, r9
   149e0:	str	r3, [sp, #8]
   149e4:	str	r4, [sp, #4]
   149e8:	mov	r3, r4
   149ec:	str	r4, [sp]
   149f0:	ldr	r1, [pc, #1192]	; 14ea0 <main@@Base+0x6e8>
   149f4:	ldr	r9, [pc, #1192]	; 14ea4 <main@@Base+0x6ec>
   149f8:	orr	r5, r5, r0
   149fc:	mov	r0, r6
   14a00:	bl	1f108 <test_json@@Base>
   14a04:	ldr	r3, [pc, #1180]	; 14ea8 <main@@Base+0x6f0>
   14a08:	str	r4, [sp, #4]
   14a0c:	str	r3, [sp, #8]
   14a10:	str	r4, [sp]
   14a14:	mov	r3, r4
   14a18:	ldr	r2, [pc, #1164]	; 14eac <main@@Base+0x6f4>
   14a1c:	ldr	r1, [pc, #1164]	; 14eb0 <main@@Base+0x6f8>
   14a20:	orr	r5, r5, r0
   14a24:	mov	r0, r6
   14a28:	bl	1f108 <test_json@@Base>
   14a2c:	mov	r3, #616	; 0x268
   14a30:	str	r3, [sp, #8]
   14a34:	str	r4, [sp, #4]
   14a38:	mov	r3, r4
   14a3c:	str	r4, [sp]
   14a40:	ldr	r2, [pc, #1132]	; 14eb4 <main@@Base+0x6fc>
   14a44:	ldr	r1, [pc, #1132]	; 14eb8 <main@@Base+0x700>
   14a48:	orr	r5, r5, r0
   14a4c:	mov	r0, r6
   14a50:	bl	1f108 <test_json@@Base>
   14a54:	ldr	r3, [pc, #1120]	; 14ebc <main@@Base+0x704>
   14a58:	str	r4, [sp, #4]
   14a5c:	str	r3, [sp, #8]
   14a60:	str	r4, [sp]
   14a64:	mov	r3, r4
   14a68:	ldr	r2, [pc, #1104]	; 14ec0 <main@@Base+0x708>
   14a6c:	ldr	r1, [pc, #1104]	; 14ec4 <main@@Base+0x70c>
   14a70:	orr	r5, r5, r0
   14a74:	mov	r0, r6
   14a78:	bl	1f108 <test_json@@Base>
   14a7c:	ldr	r3, [pc, #1092]	; 14ec8 <main@@Base+0x710>
   14a80:	mov	r2, r8
   14a84:	str	r3, [sp, #8]
   14a88:	str	r4, [sp, #4]
   14a8c:	mov	r3, r4
   14a90:	str	r4, [sp]
   14a94:	ldr	r1, [pc, #1072]	; 14ecc <main@@Base+0x714>
   14a98:	orr	r5, r5, r0
   14a9c:	mov	r0, r6
   14aa0:	bl	1f108 <test_json@@Base>
   14aa4:	ldr	r3, [pc, #1060]	; 14ed0 <main@@Base+0x718>
   14aa8:	mov	r2, r8
   14aac:	str	r3, [sp, #8]
   14ab0:	str	r4, [sp, #4]
   14ab4:	mov	r3, r4
   14ab8:	str	r4, [sp]
   14abc:	ldr	r1, [pc, #1040]	; 14ed4 <main@@Base+0x71c>
   14ac0:	ldr	r8, [pc, #1040]	; 14ed8 <main@@Base+0x720>
   14ac4:	orr	r5, r5, r0
   14ac8:	mov	r0, r6
   14acc:	bl	1f108 <test_json@@Base>
   14ad0:	mov	r3, #628	; 0x274
   14ad4:	str	r3, [sp, #8]
   14ad8:	mov	r2, r9
   14adc:	mov	r3, r4
   14ae0:	mov	r1, r8
   14ae4:	str	r4, [sp, #4]
   14ae8:	str	r4, [sp]
   14aec:	orr	r5, r5, r0
   14af0:	mov	r0, r6
   14af4:	bl	1f108 <test_json@@Base>
   14af8:	ldr	r3, [pc, #988]	; 14edc <main@@Base+0x724>
   14afc:	mov	r2, r9
   14b00:	str	r3, [sp, #8]
   14b04:	mov	r1, r8
   14b08:	mov	r3, r4
   14b0c:	str	r4, [sp, #4]
   14b10:	str	r4, [sp]
   14b14:	ldr	r8, [pc, #964]	; 14ee0 <main@@Base+0x728>
   14b18:	orr	r5, r5, r0
   14b1c:	mov	r0, r6
   14b20:	bl	1f108 <test_json@@Base>
   14b24:	ldr	r3, [pc, #952]	; 14ee4 <main@@Base+0x72c>
   14b28:	str	r4, [sp, #4]
   14b2c:	str	r3, [sp, #8]
   14b30:	str	r4, [sp]
   14b34:	mov	r3, r4
   14b38:	ldr	r2, [pc, #936]	; 14ee8 <main@@Base+0x730>
   14b3c:	ldr	r1, [pc, #936]	; 14eec <main@@Base+0x734>
   14b40:	orr	r5, r5, r0
   14b44:	mov	r0, r6
   14b48:	bl	1f108 <test_json@@Base>
   14b4c:	ldr	r3, [pc, #924]	; 14ef0 <main@@Base+0x738>
   14b50:	str	r4, [sp, #4]
   14b54:	str	r3, [sp, #8]
   14b58:	str	r4, [sp]
   14b5c:	mov	r3, r4
   14b60:	ldr	r2, [pc, #908]	; 14ef4 <main@@Base+0x73c>
   14b64:	ldr	r1, [pc, #908]	; 14ef8 <main@@Base+0x740>
   14b68:	orr	r5, r5, r0
   14b6c:	mov	r0, r6
   14b70:	bl	1f108 <test_json@@Base>
   14b74:	ldr	r3, [pc, #896]	; 14efc <main@@Base+0x744>
   14b78:	str	r4, [sp, #4]
   14b7c:	str	r3, [sp, #8]
   14b80:	str	r4, [sp]
   14b84:	mov	r3, r4
   14b88:	ldr	r2, [pc, #880]	; 14f00 <main@@Base+0x748>
   14b8c:	ldr	r1, [pc, #880]	; 14f04 <main@@Base+0x74c>
   14b90:	orr	r5, r5, r0
   14b94:	mov	r0, r6
   14b98:	bl	1f108 <test_json@@Base>
   14b9c:	ldr	r3, [pc, #868]	; 14f08 <main@@Base+0x750>
   14ba0:	mov	r2, r7
   14ba4:	str	r3, [sp, #8]
   14ba8:	str	r4, [sp, #4]
   14bac:	mov	r3, r4
   14bb0:	str	r4, [sp]
   14bb4:	ldr	r1, [pc, #848]	; 14f0c <main@@Base+0x754>
   14bb8:	orr	r5, r5, r0
   14bbc:	mov	r0, r6
   14bc0:	bl	1f108 <test_json@@Base>
   14bc4:	ldr	r3, [pc, #836]	; 14f10 <main@@Base+0x758>
   14bc8:	mov	r2, r7
   14bcc:	str	r3, [sp, #8]
   14bd0:	str	r4, [sp, #4]
   14bd4:	mov	r3, r4
   14bd8:	str	r4, [sp]
   14bdc:	ldr	r1, [pc, #816]	; 14f14 <main@@Base+0x75c>
   14be0:	orr	r5, r5, r0
   14be4:	mov	r0, r6
   14be8:	bl	1f108 <test_json@@Base>
   14bec:	mov	r3, #716	; 0x2cc
   14bf0:	str	r3, [sp, #8]
   14bf4:	str	r4, [sp, #4]
   14bf8:	mov	r3, r4
   14bfc:	str	r4, [sp]
   14c00:	ldr	r2, [pc, #784]	; 14f18 <main@@Base+0x760>
   14c04:	ldr	r1, [pc, #784]	; 14f1c <main@@Base+0x764>
   14c08:	orr	r5, r5, r0
   14c0c:	mov	r0, r6
   14c10:	bl	1f108 <test_json@@Base>
   14c14:	ldr	r3, [pc, #772]	; 14f20 <main@@Base+0x768>
   14c18:	str	r4, [sp, #4]
   14c1c:	str	r3, [sp, #8]
   14c20:	str	r4, [sp]
   14c24:	mov	r3, r4
   14c28:	ldr	r2, [pc, #756]	; 14f24 <main@@Base+0x76c>
   14c2c:	ldr	r1, [pc, #756]	; 14f28 <main@@Base+0x770>
   14c30:	orr	r5, r5, r0
   14c34:	mov	r0, r6
   14c38:	bl	1f108 <test_json@@Base>
   14c3c:	ldr	r3, [pc, #744]	; 14f2c <main@@Base+0x774>
   14c40:	str	r4, [sp, #4]
   14c44:	str	r3, [sp, #8]
   14c48:	str	r4, [sp]
   14c4c:	mov	r3, r4
   14c50:	ldr	r2, [pc, #728]	; 14f30 <main@@Base+0x778>
   14c54:	ldr	r1, [pc, #728]	; 14f34 <main@@Base+0x77c>
   14c58:	orr	r5, r5, r0
   14c5c:	mov	r0, r6
   14c60:	bl	1f108 <test_json@@Base>
   14c64:	ldr	r3, [pc, #716]	; 14f38 <main@@Base+0x780>
   14c68:	mov	r2, r8
   14c6c:	str	r3, [sp, #8]
   14c70:	str	r4, [sp, #4]
   14c74:	mov	r3, r4
   14c78:	str	r4, [sp]
   14c7c:	ldr	r1, [pc, #696]	; 14f3c <main@@Base+0x784>
   14c80:	orr	r5, r5, r0
   14c84:	mov	r0, r6
   14c88:	bl	1f108 <test_json@@Base>
   14c8c:	ldr	r3, [pc, #684]	; 14f40 <main@@Base+0x788>
   14c90:	mov	r2, r8
   14c94:	str	r3, [sp, #8]
   14c98:	str	r4, [sp, #4]
   14c9c:	mov	r3, r4
   14ca0:	str	r4, [sp]
   14ca4:	ldr	r1, [pc, #664]	; 14f44 <main@@Base+0x78c>
   14ca8:	orr	r5, r5, r0
   14cac:	mov	r0, r6
   14cb0:	bl	1f108 <test_json@@Base>
   14cb4:	ldr	r3, [pc, #652]	; 14f48 <main@@Base+0x790>
   14cb8:	str	r4, [sp, #4]
   14cbc:	str	r3, [sp, #8]
   14cc0:	str	r4, [sp]
   14cc4:	mov	r3, r4
   14cc8:	ldr	r2, [pc, #636]	; 14f4c <main@@Base+0x794>
   14ccc:	ldr	r1, [pc, #636]	; 14f50 <main@@Base+0x798>
   14cd0:	orr	r5, r5, r0
   14cd4:	mov	r0, r6
   14cd8:	bl	1f108 <test_json@@Base>
   14cdc:	ldr	r3, [pc, #624]	; 14f54 <main@@Base+0x79c>
   14ce0:	str	r4, [sp, #4]
   14ce4:	str	r3, [sp, #8]
   14ce8:	str	r4, [sp]
   14cec:	mov	r3, r4
   14cf0:	ldr	r2, [pc, #608]	; 14f58 <main@@Base+0x7a0>
   14cf4:	ldr	r1, [pc, #608]	; 14f5c <main@@Base+0x7a4>
   14cf8:	orr	r5, r5, r0
   14cfc:	mov	r0, r6
   14d00:	bl	1f108 <test_json@@Base>
   14d04:	mov	r3, #776	; 0x308
   14d08:	str	r3, [sp, #8]
   14d0c:	str	r4, [sp, #4]
   14d10:	mov	r3, r4
   14d14:	str	r4, [sp]
   14d18:	ldr	r2, [pc, #576]	; 14f60 <main@@Base+0x7a8>
   14d1c:	ldr	r1, [pc, #576]	; 14f64 <main@@Base+0x7ac>
   14d20:	orr	r5, r5, r0
   14d24:	mov	r0, r6
   14d28:	bl	1f108 <test_json@@Base>
   14d2c:	ldr	r3, [pc, #564]	; 14f68 <main@@Base+0x7b0>
   14d30:	mov	r2, r7
   14d34:	str	r3, [sp, #8]
   14d38:	str	r4, [sp, #4]
   14d3c:	mov	r3, r4
   14d40:	str	r4, [sp]
   14d44:	ldr	r1, [pc, #544]	; 14f6c <main@@Base+0x7b4>
   14d48:	orr	r5, r5, r0
   14d4c:	mov	r0, r6
   14d50:	bl	1f108 <test_json@@Base>
   14d54:	ldr	r3, [pc, #532]	; 14f70 <main@@Base+0x7b8>
   14d58:	str	r4, [sp, #4]
   14d5c:	str	r3, [sp, #8]
   14d60:	str	r4, [sp]
   14d64:	mov	r3, r4
   14d68:	ldr	r2, [pc, #516]	; 14f74 <main@@Base+0x7bc>
   14d6c:	ldr	r1, [pc, #516]	; 14f78 <main@@Base+0x7c0>
   14d70:	orr	r5, r5, r0
   14d74:	mov	r0, r6
   14d78:	bl	1f108 <test_json@@Base>
   14d7c:	ldr	r3, [pc, #504]	; 14f7c <main@@Base+0x7c4>
   14d80:	str	r4, [sp, #4]
   14d84:	str	r3, [sp, #8]
   14d88:	str	r4, [sp]
   14d8c:	mov	r3, r4
   14d90:	ldr	r2, [pc, #488]	; 14f80 <main@@Base+0x7c8>
   14d94:	ldr	r1, [pc, #488]	; 14f84 <main@@Base+0x7cc>
   14d98:	orr	r5, r5, r0
   14d9c:	mov	r0, r6
   14da0:	bl	1f108 <test_json@@Base>
   14da4:	mov	r3, #796	; 0x31c
   14da8:	str	r3, [sp, #8]
   14dac:	str	r4, [sp, #4]
   14db0:	mov	r3, r4
   14db4:	str	r4, [sp]
   14db8:	ldr	r2, [pc, #456]	; 14f88 <main@@Base+0x7d0>
   14dbc:	ldr	r1, [pc, #456]	; 14f8c <main@@Base+0x7d4>
   14dc0:	orr	r5, r5, r0
   14dc4:	mov	r0, r6
   14dc8:	bl	1f108 <test_json@@Base>
   14dcc:	ldr	r3, [pc, #444]	; 14f90 <main@@Base+0x7d8>
   14dd0:	str	r4, [sp, #4]
   14dd4:	str	r3, [sp, #8]
   14dd8:	str	r4, [sp]
   14ddc:	mov	r3, r4
   14de0:	ldr	r2, [pc, #428]	; 14f94 <main@@Base+0x7dc>
   14de4:	ldr	r1, [pc, #428]	; 14f98 <main@@Base+0x7e0>
   14de8:	orr	r5, r5, r0
   14dec:	mov	r0, r6
   14df0:	bl	1f108 <test_json@@Base>
   14df4:	ldr	r3, [pc, #416]	; 14f9c <main@@Base+0x7e4>
   14df8:	str	r4, [sp, #4]
   14dfc:	str	r3, [sp, #8]
   14e00:	str	r4, [sp]
   14e04:	mov	r3, r4
   14e08:	ldr	r2, [pc, #400]	; 14fa0 <main@@Base+0x7e8>
   14e0c:	ldr	r1, [pc, #400]	; 14fa4 <main@@Base+0x7ec>
   14e10:	orr	r5, r5, r0
   14e14:	mov	r0, r6
   14e18:	bl	1f108 <test_json@@Base>
   14e1c:	orrs	r3, r5, r0
   14e20:	mvnne	r0, #0
   14e24:	moveq	r0, r4
   14e28:	add	sp, sp, #16
   14e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e30:			; <UNDEFINED> instruction: 0x0002e5b4
   14e34:			; <UNDEFINED> instruction: 0x0002ebb2
   14e38:	andeq	r0, r3, r9, lsr r5
   14e3c:	andeq	r0, r3, r1, lsl #11
   14e40:	andeq	r0, r3, ip, asr #11
   14e44:	andeq	r0, r0, sp, lsl #4
   14e48:	andeq	r0, r3, r2, lsr #10
   14e4c:	andeq	r0, r3, sl, asr r5
   14e50:	andeq	r0, r0, r3, lsl r2
   14e54:	andeq	r0, r3, r4, lsr #11
   14e58:	andeq	r0, r0, r6, lsl r2
   14e5c:	strdeq	r0, [r3], -r8
   14e60:	andeq	r0, r0, r9, lsl r2
   14e64:	andeq	r0, r3, r9, lsr #12
   14e68:	andeq	r0, r3, r3, ror #12
   14e6c:	andeq	r0, r0, pc, lsl r2
   14e70:	andeq	r0, r3, r9, lsl #13
   14e74:	andeq	r0, r0, r3, lsr #4
   14e78:			; <UNDEFINED> instruction: 0x000306b2
   14e7c:	andeq	r0, r0, r7, lsr #4
   14e80:	andeq	lr, r2, sp, asr #22
   14e84:	andeq	r0, r0, r9, asr r2
   14e88:	ldrdeq	r0, [r3], -r9
   14e8c:	strdeq	r0, [r3], -sl
   14e90:	andeq	r0, r0, pc, asr r2
   14e94:	andeq	r0, r3, fp, lsl r7
   14e98:	andeq	r0, r3, r1, asr #14
   14e9c:	andeq	r0, r0, r2, ror #4
   14ea0:	andeq	r0, r3, r2, ror #14
   14ea4:	andeq	r0, r3, r7, lsr #17
   14ea8:	andeq	r0, r0, r5, ror #4
   14eac:	andeq	r0, r3, r4, lsl #15
   14eb0:	andeq	r0, r3, r2, lsr #15
   14eb4:	andeq	r0, r3, r4, asr #15
   14eb8:	andeq	r0, r3, r2, ror #15
   14ebc:	andeq	r0, r0, fp, ror #4
   14ec0:	andeq	r0, r3, r4, lsl #16
   14ec4:	andeq	r0, r3, r1, lsr #16
   14ec8:	andeq	r0, r0, lr, ror #4
   14ecc:	andeq	r0, r3, r2, asr #16
   14ed0:	andeq	r0, r0, r1, ror r2
   14ed4:	andeq	r0, r3, sp, ror #16
   14ed8:	andeq	r0, r3, r1, asr #17
   14edc:	andeq	r0, r0, r7, ror r2
   14ee0:	andeq	r0, r3, r8, lsr #25
   14ee4:	andeq	r0, r0, sl, ror r2
   14ee8:	andeq	r0, r3, fp, ror #17
   14eec:	andeq	r0, r3, r2, lsr r9
   14ef0:	andeq	r0, r0, lr, ror r2
   14ef4:	andeq	r0, r3, r3, lsl #19
   14ef8:	andeq	r0, r3, sp, asr #19
   14efc:	andeq	r0, r0, r2, lsl #5
   14f00:	andeq	r0, r3, r2, lsr #20
   14f04:	andeq	r0, r3, r4, lsl #21
   14f08:	andeq	r0, r0, r6, lsl #5
   14f0c:	strdeq	r0, [r3], -r3
   14f10:	andeq	r0, r0, r9, lsl #5
   14f14:	andeq	r0, r3, lr, lsl fp
   14f18:	andeq	r0, r3, r4, asr #22
   14f1c:	andeq	r0, r3, r2, lsr #23
   14f20:	ldrdeq	r0, [r0], -fp
   14f24:	andeq	r0, r3, pc, lsl #24
   14f28:	andeq	r0, r3, pc, lsr ip
   14f2c:	ldrdeq	r0, [r0], -lr
   14f30:	andeq	r0, r3, ip, ror ip
   14f34:	andeq	r0, r3, lr, lsl #25
   14f38:	andeq	r0, r0, r2, ror #5
   14f3c:	andeq	r0, r3, r9, ror #25
   14f40:	andeq	r0, r0, lr, ror #5
   14f44:	andeq	r0, r3, r1, lsr sp
   14f48:	strdeq	r0, [r0], -lr
   14f4c:	andeq	r0, r3, lr, asr #27
   14f50:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   14f54:	andeq	r0, r0, r2, lsl #6
   14f58:	andeq	r0, r3, r7, lsl lr
   14f5c:	andeq	r0, r3, r1, asr #28
   14f60:	andeq	r0, r3, r0, ror lr
   14f64:	andeq	r0, r3, r0, ror #29
   14f68:	andeq	r0, r0, sp, lsl #6
   14f6c:	andeq	r0, r3, fp, asr pc
   14f70:	andeq	r0, r0, r2, lsl r3
   14f74:	ldrdeq	r0, [r3], -r3
   14f78:	andeq	r1, r3, r2, asr #32
   14f7c:	andeq	r0, r0, r7, lsl r3
   14f80:	strheq	r1, [r3], -ip
   14f84:	andeq	r1, r3, sl, lsr r1
   14f88:	andeq	r1, r3, r5, asr #3
   14f8c:	andeq	r1, r3, r5, lsr r2
   14f90:	andeq	r0, r0, r1, lsr #6
   14f94:			; <UNDEFINED> instruction: 0x000312b0
   14f98:	andeq	r1, r3, pc, lsr #6
   14f9c:	andeq	r0, r0, r6, lsr #6
   14fa0:			; <UNDEFINED> instruction: 0x000313b9
   14fa4:	andeq	r1, r3, sp, lsr r4

00014fa8 <_start@@Base>:
   14fa8:	mov	fp, #0
   14fac:	mov	lr, #0
   14fb0:	pop	{r1}		; (ldr r1, [sp], #4)
   14fb4:	mov	r2, sp
   14fb8:	push	{r2}		; (str r2, [sp, #-4]!)
   14fbc:	push	{r0}		; (str r0, [sp, #-4]!)
   14fc0:	ldr	ip, [pc, #16]	; 14fd8 <_start@@Base+0x30>
   14fc4:	push	{ip}		; (str ip, [sp, #-4]!)
   14fc8:	ldr	r0, [pc, #12]	; 14fdc <_start@@Base+0x34>
   14fcc:	ldr	r3, [pc, #12]	; 14fe0 <_start@@Base+0x38>
   14fd0:	bl	145ac <__libc_start_main@plt>
   14fd4:	bl	1463c <abort@plt>
   14fd8:	andeq	lr, r2, r4, lsr #11
   14fdc:			; <UNDEFINED> instruction: 0x000147b8
   14fe0:	andeq	lr, r2, r4, asr #10
   14fe4:	ldr	r3, [pc, #20]	; 15000 <_start@@Base+0x58>
   14fe8:	ldr	r2, [pc, #20]	; 15004 <_start@@Base+0x5c>
   14fec:	add	r3, pc, r3
   14ff0:	ldr	r2, [r3, r2]
   14ff4:	cmp	r2, #0
   14ff8:	bxeq	lr
   14ffc:	b	145b8 <__gmon_start__@plt>
   15000:	andeq	pc, r2, ip
   15004:	andeq	r0, r0, r8, rrx
   15008:	ldr	r3, [pc, #28]	; 1502c <_start@@Base+0x84>
   1500c:	ldr	r0, [pc, #28]	; 15030 <_start@@Base+0x88>
   15010:	sub	r3, r3, r0
   15014:	cmp	r3, #6
   15018:	bxls	lr
   1501c:	ldr	r3, [pc, #16]	; 15034 <_start@@Base+0x8c>
   15020:	cmp	r3, #0
   15024:	bxeq	lr
   15028:	bx	r3
   1502c:			; <UNDEFINED> instruction: 0x000443bb
   15030:			; <UNDEFINED> instruction: 0x000443b8
   15034:	andeq	r0, r0, r0
   15038:	ldr	r1, [pc, #36]	; 15064 <_start@@Base+0xbc>
   1503c:	ldr	r0, [pc, #36]	; 15068 <_start@@Base+0xc0>
   15040:	sub	r1, r1, r0
   15044:	asr	r1, r1, #2
   15048:	add	r1, r1, r1, lsr #31
   1504c:	asrs	r1, r1, #1
   15050:	bxeq	lr
   15054:	ldr	r3, [pc, #16]	; 1506c <_start@@Base+0xc4>
   15058:	cmp	r3, #0
   1505c:	bxeq	lr
   15060:	bx	r3
   15064:			; <UNDEFINED> instruction: 0x000443b8
   15068:			; <UNDEFINED> instruction: 0x000443b8
   1506c:	andeq	r0, r0, r0
   15070:	push	{r4, lr}
   15074:	ldr	r4, [pc, #24]	; 15094 <_start@@Base+0xec>
   15078:	ldrb	r3, [r4]
   1507c:	cmp	r3, #0
   15080:	popne	{r4, pc}
   15084:	bl	15008 <_start@@Base+0x60>
   15088:	mov	r3, #1
   1508c:	strb	r3, [r4]
   15090:	pop	{r4, pc}
   15094:	andeq	r4, r4, r0, asr #7
   15098:	ldr	r0, [pc, #40]	; 150c8 <_start@@Base+0x120>
   1509c:	ldr	r3, [r0]
   150a0:	cmp	r3, #0
   150a4:	bne	150ac <_start@@Base+0x104>
   150a8:	b	15038 <_start@@Base+0x90>
   150ac:	ldr	r3, [pc, #24]	; 150cc <_start@@Base+0x124>
   150b0:	cmp	r3, #0
   150b4:	beq	150a8 <_start@@Base+0x100>
   150b8:	push	{r4, lr}
   150bc:	blx	r3
   150c0:	pop	{r4, lr}
   150c4:	b	15038 <_start@@Base+0x90>
   150c8:	andeq	r3, r4, r4, lsl pc
   150cc:	andeq	r0, r0, r0
   150d0:	sub	r1, r1, r0
   150d4:	cmp	r1, #8
   150d8:	push	{r4, r5, r6, r7, lr}
   150dc:	bhi	15110 <_start@@Base+0x168>
   150e0:	sub	r1, r1, #1
   150e4:	cmp	r1, #7
   150e8:	ldrls	pc, [pc, r1, lsl #2]
   150ec:	b	151fc <_start@@Base+0x254>
   150f0:	strdeq	r5, [r1], -r0
   150f4:	andeq	r5, r1, r4, ror #3
   150f8:	ldrdeq	r5, [r1], -r8
   150fc:	andeq	r5, r1, ip, asr #3
   15100:	andeq	r5, r1, r0, asr #3
   15104:			; <UNDEFINED> instruction: 0x000151b4
   15108:	andeq	r5, r1, ip, lsr #3
   1510c:	andeq	r5, r1, r0, lsl r1
   15110:	ldrb	r4, [r0, #7]
   15114:	ldrb	r6, [r0, #6]
   15118:	mov	r5, #0
   1511c:	mov	r3, #0
   15120:	orr	r3, r3, r5
   15124:	lsl	r2, r6, #8
   15128:	orr	r2, r2, r4
   1512c:	ldrb	r6, [r0, #5]
   15130:	mov	r5, #0
   15134:	orr	r3, r3, r5
   15138:	lsl	r4, r6, #16
   1513c:	orr	r2, r2, r4
   15140:	ldrb	r6, [r0, #4]
   15144:	mov	r5, #0
   15148:	orr	r5, r5, r3
   1514c:	lsl	r4, r6, #24
   15150:	orr	r4, r4, r2
   15154:	ldrb	r3, [r0, #3]
   15158:	mov	r2, #0
   1515c:	orr	r4, r4, r2
   15160:	orr	r5, r5, r3
   15164:	ldrb	r6, [r0, #2]
   15168:	mov	r2, #0
   1516c:	orr	r4, r4, r2
   15170:	lsl	r3, r6, #8
   15174:	orr	r5, r5, r3
   15178:	ldrb	r6, [r0, #1]
   1517c:	mov	r2, #0
   15180:	mov	r7, #0
   15184:	orr	r2, r2, r4
   15188:	lsl	r3, r6, #16
   1518c:	orr	r3, r3, r5
   15190:	ldrb	r4, [r0]
   15194:	mov	r0, #0
   15198:	mov	r5, #0
   1519c:	orr	r0, r0, r2
   151a0:	lsl	r1, r4, #24
   151a4:	orr	r1, r1, r3
   151a8:	pop	{r4, r5, r6, r7, pc}
   151ac:	mov	r4, #0
   151b0:	b	15114 <_start@@Base+0x16c>
   151b4:	mov	r2, #0
   151b8:	mov	r3, #0
   151bc:	b	1512c <_start@@Base+0x184>
   151c0:	mov	r2, #0
   151c4:	mov	r3, #0
   151c8:	b	15140 <_start@@Base+0x198>
   151cc:	mov	r4, #0
   151d0:	mov	r5, #0
   151d4:	b	15154 <_start@@Base+0x1ac>
   151d8:	mov	r4, #0
   151dc:	mov	r5, #0
   151e0:	b	15164 <_start@@Base+0x1bc>
   151e4:	mov	r4, #0
   151e8:	mov	r5, #0
   151ec:	b	15178 <_start@@Base+0x1d0>
   151f0:	mov	r2, #0
   151f4:	mov	r3, #0
   151f8:	b	15190 <_start@@Base+0x1e8>
   151fc:	mov	r0, #0
   15200:	mov	r1, #0
   15204:	pop	{r4, r5, r6, r7, pc}
   15208:	cmp	r0, #4
   1520c:	movhi	r0, #0
   15210:	movls	r0, #1
   15214:	bx	lr
   15218:	cmp	r0, #11
   1521c:	bhi	15240 <_start@@Base+0x298>
   15220:	cmp	r0, #8
   15224:	bcs	15248 <_start@@Base+0x2a0>
   15228:	cmp	r0, #0
   1522c:	beq	15248 <_start@@Base+0x2a0>
   15230:	cmp	r0, #2
   15234:	beq	15248 <_start@@Base+0x2a0>
   15238:	mov	r0, #0
   1523c:	bx	lr
   15240:	cmp	r0, #255	; 0xff
   15244:	b	15234 <_start@@Base+0x28c>
   15248:	mov	r0, #1
   1524c:	bx	lr
   15250:	bx	lr
   15254:	mov	r0, #0
   15258:	bx	lr
   1525c:	mov	r3, #4
   15260:	mov	r2, r3
   15264:	mov	r1, #0
   15268:	b	233f0 <flatcc_verify_field@@Base>
   1526c:	ldr	r3, [pc, #108]	; 152e0 <_start@@Base+0x338>
   15270:	push	{r0, r1, r4, r5, r6, lr}
   15274:	mov	r2, #0
   15278:	str	r3, [sp, #4]
   1527c:	mov	r3, #21
   15280:	str	r3, [sp]
   15284:	ldr	r3, [pc, #88]	; 152e4 <_start@@Base+0x33c>
   15288:	mov	r4, r0
   1528c:	mov	r5, r1
   15290:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   15294:	ldr	r3, [pc, #76]	; 152e8 <_start@@Base+0x340>
   15298:	mov	r6, #22
   1529c:	str	r3, [sp, #4]
   152a0:	mov	r1, r5
   152a4:	mov	r0, r4
   152a8:	str	r6, [sp]
   152ac:	ldr	r3, [pc, #56]	; 152ec <_start@@Base+0x344>
   152b0:	mov	r2, #1
   152b4:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   152b8:	ldr	r3, [pc, #48]	; 152f0 <_start@@Base+0x348>
   152bc:	str	r6, [sp]
   152c0:	str	r3, [sp, #4]
   152c4:	mov	r2, #2
   152c8:	ldr	r3, [pc, #36]	; 152f4 <_start@@Base+0x34c>
   152cc:	mov	r1, r5
   152d0:	mov	r0, r4
   152d4:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   152d8:	add	sp, sp, #8
   152dc:	pop	{r4, r5, r6, pc}
   152e0:	ldrdeq	r5, [r1], -r8
   152e4:	andeq	lr, r2, r4, ror #11
   152e8:	andeq	r5, r1, ip, ror r3
   152ec:	strdeq	lr, [r2], -sl
   152f0:	andeq	r5, r1, r0, lsr #6
   152f4:	andeq	lr, r2, r1, lsl r6
   152f8:	push	{r0, r1, r2, lr}
   152fc:	mov	r3, #19
   15300:	mov	r2, #0
   15304:	str	r3, [sp]
   15308:	str	r2, [sp, #4]
   1530c:	ldr	r3, [pc, #8]	; 1531c <_start@@Base+0x374>
   15310:	bl	294d8 <flatcc_json_printer_int32_field@@Base>
   15314:	add	sp, sp, #12
   15318:	pop	{pc}		; (ldr pc, [sp], #4)
   1531c:	andeq	lr, r2, r8, lsr #12
   15320:	push	{r4, r5, lr}
   15324:	mov	r2, #0
   15328:	sub	sp, sp, #20
   1532c:	mov	r3, #0
   15330:	mov	r4, r0
   15334:	strd	r2, [sp, #8]
   15338:	mov	r3, #15
   1533c:	str	r3, [sp]
   15340:	ldr	r3, [pc, #44]	; 15374 <_start@@Base+0x3cc>
   15344:	mov	r5, r1
   15348:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   1534c:	mov	r2, #21
   15350:	mov	r3, #0
   15354:	mov	r1, r5
   15358:	stm	sp, {r2, r3}
   1535c:	mov	r0, r4
   15360:	ldr	r3, [pc, #16]	; 15378 <_start@@Base+0x3d0>
   15364:	mov	r2, #1
   15368:	bl	2923c <flatcc_json_printer_uint32_field@@Base>
   1536c:	add	sp, sp, #20
   15370:	pop	{r4, r5, pc}
   15374:	andeq	lr, r2, ip, lsr r6
   15378:	andeq	lr, r2, ip, asr #12
   1537c:	push	{r4, r5, lr}
   15380:	mov	r2, #0
   15384:	sub	sp, sp, #20
   15388:	mov	r3, #0
   1538c:	mov	r4, r0
   15390:	strd	r2, [sp, #8]
   15394:	mov	r3, #15
   15398:	str	r3, [sp]
   1539c:	ldr	r3, [pc, #44]	; 153d0 <_start@@Base+0x428>
   153a0:	mov	r5, r1
   153a4:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   153a8:	mov	r2, #16
   153ac:	mov	r3, #0
   153b0:	mov	r1, r5
   153b4:	stm	sp, {r2, r3}
   153b8:	mov	r0, r4
   153bc:	ldr	r3, [pc, #16]	; 153d4 <_start@@Base+0x42c>
   153c0:	mov	r2, #1
   153c4:	bl	2923c <flatcc_json_printer_uint32_field@@Base>
   153c8:	add	sp, sp, #20
   153cc:	pop	{r4, r5, pc}
   153d0:	andeq	lr, r2, ip, lsr r6
   153d4:	andeq	lr, r2, r2, ror #12
   153d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153dc:	sub	sp, sp, #20
   153e0:	mov	r7, #4
   153e4:	mov	sl, #9
   153e8:	mov	fp, #0
   153ec:	mov	r4, r0
   153f0:	mov	r5, r1
   153f4:	str	r7, [sp]
   153f8:	ldr	r3, [pc, #228]	; 154e4 <_start@@Base+0x53c>
   153fc:	mov	r2, #0
   15400:	bl	28eec <flatcc_json_printer_string_field@@Base>
   15404:	mov	r8, #0
   15408:	mov	r9, #0
   1540c:	mov	r1, r5
   15410:	mov	r0, r4
   15414:	stm	sp, {sl, fp}
   15418:	ldr	r3, [pc, #200]	; 154e8 <_start@@Base+0x540>
   1541c:	mov	r2, #1
   15420:	bl	2923c <flatcc_json_printer_uint32_field@@Base>
   15424:	mov	r6, #8
   15428:	mov	r1, r5
   1542c:	mov	r0, r4
   15430:	str	r7, [sp]
   15434:	ldr	r3, [pc, #176]	; 154ec <_start@@Base+0x544>
   15438:	mov	r2, #2
   1543c:	bl	28eec <flatcc_json_printer_string_field@@Base>
   15440:	mov	r1, r5
   15444:	mov	r0, r4
   15448:	strd	r8, [sp, #8]
   1544c:	str	r6, [sp]
   15450:	ldr	r3, [pc, #152]	; 154f0 <_start@@Base+0x548>
   15454:	mov	r2, #3
   15458:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   1545c:	mov	r2, r7
   15460:	mov	r1, r5
   15464:	mov	r0, r4
   15468:	str	r7, [sp]
   1546c:	ldr	r3, [pc, #128]	; 154f4 <_start@@Base+0x54c>
   15470:	bl	28eec <flatcc_json_printer_string_field@@Base>
   15474:	mov	r1, r5
   15478:	mov	r0, r4
   1547c:	strd	r8, [sp, #8]
   15480:	str	r6, [sp]
   15484:	ldr	r3, [pc, #108]	; 154f8 <_start@@Base+0x550>
   15488:	mov	r2, #5
   1548c:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   15490:	mov	r1, r5
   15494:	mov	r0, r4
   15498:	stm	sp, {sl, fp}
   1549c:	ldr	r3, [pc, #88]	; 154fc <_start@@Base+0x554>
   154a0:	mov	r2, #6
   154a4:	bl	2923c <flatcc_json_printer_uint32_field@@Base>
   154a8:	mov	r1, r5
   154ac:	mov	r0, r4
   154b0:	strd	r8, [sp, #8]
   154b4:	str	r6, [sp]
   154b8:	ldr	r3, [pc, #64]	; 15500 <_start@@Base+0x558>
   154bc:	mov	r2, #7
   154c0:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   154c4:	stm	sp, {sl, fp}
   154c8:	ldr	r3, [pc, #52]	; 15504 <_start@@Base+0x55c>
   154cc:	mov	r2, r6
   154d0:	mov	r1, r5
   154d4:	mov	r0, r4
   154d8:	bl	2923c <flatcc_json_printer_uint32_field@@Base>
   154dc:	add	sp, sp, #20
   154e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e4:	andeq	lr, r2, r3, ror r6
   154e8:	andeq	lr, r2, r8, ror r6
   154ec:	andeq	lr, r2, r2, lsl #13
   154f0:	andeq	lr, r2, r7, lsl #13
   154f4:	muleq	r2, r0, r6
   154f8:	muleq	r2, r5, r6
   154fc:	muleq	r2, lr, r6
   15500:	andeq	lr, r2, r8, lsr #13
   15504:			; <UNDEFINED> instruction: 0x0002e6b1
   15508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1550c:	sub	sp, sp, #20
   15510:	ldr	r3, [pc, #1072]	; 15948 <_start@@Base+0x9a0>
   15514:	mov	r6, #3
   15518:	str	r3, [sp, #4]
   1551c:	str	r6, [sp]
   15520:	ldr	r3, [pc, #1060]	; 1594c <_start@@Base+0x9a4>
   15524:	mov	r2, #0
   15528:	mov	r4, r0
   1552c:	mov	r5, r1
   15530:	mov	r7, #4
   15534:	bl	2d320 <flatcc_json_printer_struct_field@@Base>
   15538:	mov	r3, #150	; 0x96
   1553c:	str	r3, [sp, #4]
   15540:	mov	r1, r5
   15544:	mov	r0, r4
   15548:	str	r7, [sp]
   1554c:	ldr	r3, [pc, #1020]	; 15950 <_start@@Base+0x9a8>
   15550:	mov	r2, #1
   15554:	bl	29434 <flatcc_json_printer_int16_field@@Base>
   15558:	mov	r2, #2
   1555c:	mov	r3, #100	; 0x64
   15560:	mov	r1, r5
   15564:	stm	sp, {r2, r3}
   15568:	mov	r0, r4
   1556c:	ldr	r3, [pc, #992]	; 15954 <_start@@Base+0x9ac>
   15570:	bl	29434 <flatcc_json_printer_int16_field@@Base>
   15574:	mov	r8, #9
   15578:	mov	r2, r6
   1557c:	mov	r1, r5
   15580:	mov	r0, r4
   15584:	str	r7, [sp]
   15588:	ldr	r3, [pc, #968]	; 15958 <_start@@Base+0x9b0>
   1558c:	bl	28eec <flatcc_json_printer_string_field@@Base>
   15590:	str	r8, [sp]
   15594:	mov	r1, r5
   15598:	mov	r0, r4
   1559c:	ldr	r3, [pc, #952]	; 1595c <_start@@Base+0x9b4>
   155a0:	mov	r2, #5
   155a4:	bl	2a75c <flatcc_json_printer_uint8_vector_field@@Base>
   155a8:	mov	r9, #5
   155ac:	mov	fp, #8
   155b0:	ldr	r3, [pc, #936]	; 15960 <_start@@Base+0x9b8>
   155b4:	mov	r1, r5
   155b8:	str	r3, [sp, #8]
   155bc:	mov	r0, r4
   155c0:	stm	sp, {r9, fp}
   155c4:	ldr	r3, [pc, #920]	; 15964 <_start@@Base+0x9bc>
   155c8:	mov	r2, #6
   155cc:	bl	29b74 <flatcc_json_printer_int8_enum_field@@Base>
   155d0:	ldr	r3, [pc, #912]	; 15968 <_start@@Base+0x9c0>
   155d4:	mov	r2, fp
   155d8:	str	r3, [sp, #8]
   155dc:	ldr	r3, [pc, #904]	; 1596c <_start@@Base+0x9c4>
   155e0:	mov	r1, r5
   155e4:	str	r3, [sp, #4]
   155e8:	mov	r0, r4
   155ec:	str	r7, [sp]
   155f0:	ldr	r3, [pc, #888]	; 15970 <_start@@Base+0x9c8>
   155f4:	bl	2cfdc <flatcc_json_printer_union_field@@Base>
   155f8:	ldr	r3, [pc, #884]	; 15974 <_start@@Base+0x9cc>
   155fc:	ldr	sl, [pc, #884]	; 15978 <_start@@Base+0x9d0>
   15600:	mov	r6, #17
   15604:	str	r3, [sp, #8]
   15608:	mov	r2, r8
   1560c:	mov	r1, r5
   15610:	mov	r0, r4
   15614:	str	r7, [sp, #4]
   15618:	str	r9, [sp]
   1561c:	ldr	r3, [pc, #856]	; 1597c <_start@@Base+0x9d4>
   15620:	bl	2c788 <flatcc_json_printer_struct_vector_field@@Base>
   15624:	mov	r1, r5
   15628:	mov	r0, r4
   1562c:	str	r6, [sp]
   15630:	ldr	r3, [pc, #840]	; 15980 <_start@@Base+0x9d8>
   15634:	mov	r2, #10
   15638:	bl	2c9e0 <flatcc_json_printer_string_vector_field@@Base>
   1563c:	stm	sp, {r6, sl}
   15640:	mov	r1, r5
   15644:	mov	r0, r4
   15648:	ldr	r3, [pc, #820]	; 15984 <_start@@Base+0x9dc>
   1564c:	mov	r2, #11
   15650:	bl	2cb74 <flatcc_json_printer_table_vector_field@@Base>
   15654:	stm	sp, {r9, sl}
   15658:	mov	r1, r5
   1565c:	mov	r0, r4
   15660:	ldr	r3, [pc, #800]	; 15988 <_start@@Base+0x9e0>
   15664:	mov	r2, #12
   15668:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   1566c:	str	sl, [sp, #8]
   15670:	mov	r3, #20
   15674:	mov	sl, #0
   15678:	mov	r1, r5
   1567c:	stm	sp, {r3, sl}
   15680:	mov	r0, r4
   15684:	ldr	r3, [pc, #768]	; 1598c <_start@@Base+0x9e4>
   15688:	mov	r2, #13
   1568c:	bl	2d67c <flatcc_json_printer_table_as_nested_root@@Base>
   15690:	ldr	r3, [pc, #760]	; 15990 <_start@@Base+0x9e8>
   15694:	str	r8, [sp]
   15698:	str	r3, [sp, #4]
   1569c:	mov	r1, r5
   156a0:	mov	r0, r4
   156a4:	ldr	r3, [pc, #744]	; 15994 <_start@@Base+0x9ec>
   156a8:	mov	r2, #14
   156ac:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   156b0:	mov	r3, #1
   156b4:	mov	r8, #16
   156b8:	str	r3, [sp, #4]
   156bc:	mov	r1, r5
   156c0:	mov	r0, r4
   156c4:	str	fp, [sp]
   156c8:	ldr	r3, [pc, #712]	; 15998 <_start@@Base+0x9f0>
   156cc:	mov	r2, #15
   156d0:	bl	2962c <flatcc_json_printer_bool_field@@Base>
   156d4:	str	r8, [sp]
   156d8:	mov	r2, r8
   156dc:	mov	r1, r5
   156e0:	mov	r0, r4
   156e4:	str	sl, [sp, #4]
   156e8:	ldr	r3, [pc, #684]	; 1599c <_start@@Base+0x9f4>
   156ec:	bl	294d8 <flatcc_json_printer_int32_field@@Base>
   156f0:	stm	sp, {r8, sl}
   156f4:	mov	r2, r6
   156f8:	mov	r1, r5
   156fc:	mov	r0, r4
   15700:	ldr	r3, [pc, #664]	; 159a0 <_start@@Base+0x9f8>
   15704:	bl	2923c <flatcc_json_printer_uint32_field@@Base>
   15708:	mov	r2, #0
   1570c:	mov	r3, #0
   15710:	str	r8, [sp]
   15714:	strd	r2, [sp, #8]
   15718:	mov	r1, r5
   1571c:	mov	r0, r4
   15720:	ldr	r3, [pc, #636]	; 159a4 <_start@@Base+0x9fc>
   15724:	mov	r2, #18
   15728:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   1572c:	mov	r2, #0
   15730:	mov	r3, #0
   15734:	str	r8, [sp]
   15738:	strd	r2, [sp, #8]
   1573c:	mov	r1, r5
   15740:	mov	r0, r4
   15744:	ldr	r3, [pc, #604]	; 159a8 <_start@@Base+0xa00>
   15748:	mov	r2, #19
   1574c:	bl	292e0 <flatcc_json_printer_uint64_field@@Base>
   15750:	mov	r1, r5
   15754:	mov	r0, r4
   15758:	stm	sp, {r6, sl}
   1575c:	ldr	r3, [pc, #584]	; 159ac <_start@@Base+0xa04>
   15760:	mov	r2, #20
   15764:	bl	294d8 <flatcc_json_printer_int32_field@@Base>
   15768:	mov	r1, r5
   1576c:	mov	r0, r4
   15770:	stm	sp, {r6, sl}
   15774:	ldr	r3, [pc, #564]	; 159b0 <_start@@Base+0xa08>
   15778:	mov	r2, #21
   1577c:	bl	2923c <flatcc_json_printer_uint32_field@@Base>
   15780:	mov	r2, #0
   15784:	mov	r3, #0
   15788:	mov	r1, r5
   1578c:	strd	r2, [sp, #8]
   15790:	mov	r0, r4
   15794:	str	r6, [sp]
   15798:	ldr	r3, [pc, #532]	; 159b4 <_start@@Base+0xa0c>
   1579c:	mov	r2, #22
   157a0:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   157a4:	mov	r2, #0
   157a8:	mov	r3, #0
   157ac:	mov	r1, r5
   157b0:	strd	r2, [sp, #8]
   157b4:	mov	r0, r4
   157b8:	str	r6, [sp]
   157bc:	ldr	r3, [pc, #500]	; 159b8 <_start@@Base+0xa10>
   157c0:	mov	r2, #23
   157c4:	bl	292e0 <flatcc_json_printer_uint64_field@@Base>
   157c8:	str	r8, [sp]
   157cc:	mov	r1, r5
   157d0:	mov	r0, r4
   157d4:	ldr	r3, [pc, #480]	; 159bc <_start@@Base+0xa14>
   157d8:	mov	r2, #24
   157dc:	bl	2b428 <flatcc_json_printer_bool_vector_field@@Base>
   157e0:	mov	r8, #6
   157e4:	mov	r1, r5
   157e8:	mov	r0, r4
   157ec:	str	r9, [sp]
   157f0:	vldr	s0, [pc, #324]	; 1593c <_start@@Base+0x994>
   157f4:	ldr	r3, [pc, #452]	; 159c0 <_start@@Base+0xa18>
   157f8:	mov	r2, #25
   157fc:	bl	296d0 <flatcc_json_printer_float_field@@Base>
   15800:	mov	r1, r5
   15804:	mov	r0, r4
   15808:	str	r8, [sp]
   1580c:	vldr	s0, [pc, #300]	; 15940 <_start@@Base+0x998>
   15810:	ldr	r3, [pc, #428]	; 159c4 <_start@@Base+0xa1c>
   15814:	mov	r2, #26
   15818:	bl	296d0 <flatcc_json_printer_float_field@@Base>
   1581c:	vldr	s0, [pc, #288]	; 15944 <_start@@Base+0x99c>
   15820:	mov	r1, r5
   15824:	mov	r0, r4
   15828:	str	r8, [sp]
   1582c:	ldr	r3, [pc, #404]	; 159c8 <_start@@Base+0xa20>
   15830:	mov	r2, #27
   15834:	bl	296d0 <flatcc_json_printer_float_field@@Base>
   15838:	mov	r3, #18
   1583c:	str	r3, [sp]
   15840:	mov	r1, r5
   15844:	mov	r0, r4
   15848:	ldr	r3, [pc, #380]	; 159cc <_start@@Base+0xa24>
   1584c:	mov	r2, #28
   15850:	bl	2c9e0 <flatcc_json_printer_string_vector_field@@Base>
   15854:	ldr	r3, [pc, #372]	; 159d0 <_start@@Base+0xa28>
   15858:	mov	r1, r5
   1585c:	str	r3, [sp, #8]
   15860:	mov	r3, #23
   15864:	str	r3, [sp]
   15868:	mov	r0, r4
   1586c:	str	fp, [sp, #4]
   15870:	ldr	r3, [pc, #348]	; 159d4 <_start@@Base+0xa2c>
   15874:	mov	r2, #29
   15878:	bl	2c788 <flatcc_json_printer_struct_vector_field@@Base>
   1587c:	mov	r1, r5
   15880:	mov	r0, r4
   15884:	str	r7, [sp]
   15888:	ldr	r3, [pc, #328]	; 159d8 <_start@@Base+0xa30>
   1588c:	mov	r2, #30
   15890:	bl	2a75c <flatcc_json_printer_uint8_vector_field@@Base>
   15894:	ldr	r3, [pc, #216]	; 15974 <_start@@Base+0x9cc>
   15898:	mov	r1, r5
   1589c:	str	r3, [sp, #8]
   158a0:	mov	r0, r4
   158a4:	str	r7, [sp, #4]
   158a8:	str	r9, [sp]
   158ac:	ldr	r3, [pc, #296]	; 159dc <_start@@Base+0xa34>
   158b0:	mov	r2, #31
   158b4:	bl	2c788 <flatcc_json_printer_struct_vector_field@@Base>
   158b8:	mov	r3, #15
   158bc:	str	r3, [sp]
   158c0:	mov	r1, r5
   158c4:	mov	r0, r4
   158c8:	ldr	r3, [pc, #272]	; 159e0 <_start@@Base+0xa38>
   158cc:	mov	r2, #32
   158d0:	bl	2b290 <flatcc_json_printer_int64_vector_field@@Base>
   158d4:	mov	r1, r5
   158d8:	mov	r0, r4
   158dc:	str	r6, [sp]
   158e0:	ldr	r3, [pc, #252]	; 159e4 <_start@@Base+0xa3c>
   158e4:	mov	r2, #33	; 0x21
   158e8:	bl	2b764 <flatcc_json_printer_double_vector_field@@Base>
   158ec:	ldr	r3, [pc, #244]	; 159e8 <_start@@Base+0xa40>
   158f0:	mov	r1, r5
   158f4:	str	r3, [sp, #4]
   158f8:	mov	r3, #21
   158fc:	str	r3, [sp]
   15900:	mov	r0, r4
   15904:	ldr	r3, [pc, #224]	; 159ec <_start@@Base+0xa44>
   15908:	mov	r2, #34	; 0x22
   1590c:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   15910:	ldr	r3, [pc, #216]	; 159f0 <_start@@Base+0xa48>
   15914:	mov	r2, #35	; 0x23
   15918:	str	r3, [sp, #4]
   1591c:	mov	r3, #10
   15920:	str	r3, [sp]
   15924:	mov	r1, r5
   15928:	ldr	r3, [pc, #196]	; 159f4 <_start@@Base+0xa4c>
   1592c:	mov	r0, r4
   15930:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   15934:	add	sp, sp, #20
   15938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1593c:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   15940:	submi	r0, r0, r0
   15944:	andeq	r0, r0, r0
   15948:	andeq	r6, r1, r8, lsr #32
   1594c:			; <UNDEFINED> instruction: 0x0002e6bb
   15950:			; <UNDEFINED> instruction: 0x0002e6bf
   15954:	andeq	lr, r2, r4, asr #13
   15958:	andeq	lr, r2, r7, asr #13
   1595c:	andeq	lr, r2, ip, asr #13
   15960:	andeq	r5, r1, ip, ror #30
   15964:	ldrdeq	lr, [r2], -r6
   15968:	andeq	r5, r1, r8, lsr #23
   1596c:	andeq	r7, r1, r0, asr r6
   15970:	andeq	lr, r2, lr, asr #16
   15974:	andeq	r5, r1, ip, asr #22
   15978:	andeq	r5, r1, r8, lsl #10
   1597c:	ldrdeq	lr, [r2], -ip
   15980:	andeq	lr, r2, r2, ror #13
   15984:	strdeq	lr, [r2], -r4
   15988:	andeq	lr, r2, r6, lsl #14
   1598c:	andeq	lr, r2, ip, lsl #14
   15990:	ldrdeq	r5, [r1], -r0
   15994:	andeq	lr, r2, r1, lsr #14
   15998:	andeq	lr, r2, fp, lsr #14
   1599c:	andeq	lr, r2, r4, lsr r7
   159a0:	andeq	lr, r2, r5, asr #14
   159a4:	andeq	lr, r2, r6, asr r7
   159a8:	andeq	lr, r2, r7, ror #14
   159ac:	andeq	lr, r2, r8, ror r7
   159b0:	andeq	lr, r2, sl, lsl #15
   159b4:	muleq	r2, ip, r7
   159b8:	andeq	lr, r2, lr, lsr #15
   159bc:	andeq	lr, r2, r0, asr #15
   159c0:	ldrdeq	lr, [r2], -r1
   159c4:	ldrdeq	lr, [r2], -r7
   159c8:	ldrdeq	lr, [r2], -lr	; <UNPREDICTABLE>
   159cc:	andeq	lr, r2, r5, ror #15
   159d0:	andeq	r5, r1, r0, ror sl
   159d4:	strdeq	lr, [r2], -r8
   159d8:	andeq	lr, r2, r0, lsl r8
   159dc:	andeq	lr, r2, r5, lsl r8
   159e0:	andeq	lr, r2, fp, lsl r8
   159e4:	andeq	lr, r2, fp, lsr #16
   159e8:	andeq	r8, r1, r0, lsl #27
   159ec:	andeq	lr, r2, sp, lsr r8
   159f0:	strdeq	r5, [r1], -r8
   159f4:	andeq	lr, r2, r3, asr r8
   159f8:	push	{r0, r1, r4, r5, r6, lr}
   159fc:	mov	r3, #4
   15a00:	mov	r4, #0
   15a04:	mov	r2, r4
   15a08:	stm	sp, {r3, r4}
   15a0c:	ldr	r3, [pc, #80]	; 15a64 <_start@@Base+0xabc>
   15a10:	mov	r5, r0
   15a14:	mov	r6, r1
   15a18:	bl	28f5c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a1c:	mov	r2, #1
   15a20:	mov	r3, #7
   15a24:	str	r2, [sp, #4]
   15a28:	str	r3, [sp]
   15a2c:	mov	r1, r6
   15a30:	mov	r0, r5
   15a34:	ldr	r3, [pc, #44]	; 15a68 <_start@@Base+0xac0>
   15a38:	bl	28f5c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a3c:	mov	r3, #6
   15a40:	str	r3, [sp]
   15a44:	str	r4, [sp, #4]
   15a48:	ldr	r3, [pc, #28]	; 15a6c <_start@@Base+0xac4>
   15a4c:	mov	r2, #2
   15a50:	mov	r1, r6
   15a54:	mov	r0, r5
   15a58:	bl	28f5c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   15a5c:	add	sp, sp, #8
   15a60:	pop	{r4, r5, r6, pc}
   15a64:	andeq	lr, r2, r1, ror #16
   15a68:	andeq	lr, r2, lr, asr r8
   15a6c:	andeq	lr, r2, r6, ror #16
   15a70:	mov	r3, #2
   15a74:	push	{r0, r1, r2, r4, r5, lr}
   15a78:	mov	r4, r1
   15a7c:	str	r3, [sp, #4]
   15a80:	ldr	r3, [pc, #64]	; 15ac8 <_start@@Base+0xb20>
   15a84:	mov	r2, r1
   15a88:	str	r3, [sp]
   15a8c:	mov	r3, #0
   15a90:	mov	r1, r3
   15a94:	mov	r5, r0
   15a98:	bl	2a024 <flatcc_json_printer_uint32_struct_field@@Base>
   15a9c:	mov	r3, #8
   15aa0:	str	r3, [sp, #4]
   15aa4:	ldr	r3, [pc, #32]	; 15acc <_start@@Base+0xb24>
   15aa8:	mov	r2, r4
   15aac:	str	r3, [sp]
   15ab0:	mov	r1, #1
   15ab4:	mov	r3, #4
   15ab8:	mov	r0, r5
   15abc:	bl	2a024 <flatcc_json_printer_uint32_struct_field@@Base>
   15ac0:	add	sp, sp, #12
   15ac4:	pop	{r4, r5, pc}
   15ac8:	andeq	lr, r2, sp, ror #16
   15acc:	andeq	lr, r2, r0, ror r8
   15ad0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   15ad4:	mov	r6, #2
   15ad8:	str	r6, [sp]
   15adc:	ldr	r3, [pc, #92]	; 15b40 <_start@@Base+0xb98>
   15ae0:	mov	r2, #0
   15ae4:	mov	r4, r0
   15ae8:	mov	r5, r1
   15aec:	bl	28eec <flatcc_json_printer_string_field@@Base>
   15af0:	mov	r2, #0
   15af4:	mov	r3, #0
   15af8:	mov	r1, r5
   15afc:	strd	r2, [sp, #8]
   15b00:	mov	r3, #3
   15b04:	str	r3, [sp]
   15b08:	mov	r0, r4
   15b0c:	ldr	r3, [pc, #48]	; 15b44 <_start@@Base+0xb9c>
   15b10:	mov	r2, #1
   15b14:	bl	2957c <flatcc_json_printer_int64_field@@Base>
   15b18:	mov	r2, #5
   15b1c:	mov	r3, #0
   15b20:	mov	r1, r5
   15b24:	stm	sp, {r2, r3}
   15b28:	mov	r0, r4
   15b2c:	ldr	r3, [pc, #20]	; 15b48 <_start@@Base+0xba0>
   15b30:	mov	r2, r6
   15b34:	bl	29198 <flatcc_json_printer_uint16_field@@Base>
   15b38:	add	sp, sp, #16
   15b3c:	pop	{r4, r5, r6, pc}
   15b40:	andeq	lr, r2, sp, ror #16
   15b44:	andeq	lr, r2, r9, ror r8
   15b48:	andeq	r1, r3, sl, ror #27
   15b4c:	ldr	r3, [pc, #76]	; 15ba0 <_start@@Base+0xbf8>
   15b50:	push	{r0, r1, r4, r5, r6, lr}
   15b54:	mov	r4, #1
   15b58:	str	r3, [sp]
   15b5c:	mov	r3, #0
   15b60:	mov	r5, r1
   15b64:	mov	r2, r1
   15b68:	str	r4, [sp, #4]
   15b6c:	mov	r1, r3
   15b70:	mov	r6, r0
   15b74:	bl	2a10c <flatcc_json_printer_int16_struct_field@@Base>
   15b78:	ldr	r3, [pc, #36]	; 15ba4 <_start@@Base+0xbfc>
   15b7c:	str	r4, [sp, #4]
   15b80:	str	r3, [sp]
   15b84:	mov	r2, r5
   15b88:	mov	r3, #2
   15b8c:	mov	r1, r4
   15b90:	mov	r0, r6
   15b94:	bl	2a0c0 <flatcc_json_printer_int8_struct_field@@Base>
   15b98:	add	sp, sp, #8
   15b9c:	pop	{r4, r5, r6, pc}
   15ba0:	andeq	lr, r2, r8, lsl #15
   15ba4:	andeq	lr, r2, r5, lsl #13
   15ba8:	ldrb	r3, [r1, #8]
   15bac:	sub	r3, r3, #1
   15bb0:	cmp	r3, #3
   15bb4:	ldrls	pc, [pc, r3, lsl #2]
   15bb8:	b	15bec <_start@@Base+0xc44>
   15bbc:	andeq	r5, r1, ip, asr #23
   15bc0:	ldrdeq	r5, [r1], -r4
   15bc4:	ldrdeq	r5, [r1], -ip
   15bc8:	andeq	r5, r1, r4, ror #23
   15bcc:	ldr	r2, [pc, #28]	; 15bf0 <_start@@Base+0xc48>
   15bd0:	b	2d1bc <flatcc_json_printer_union_table@@Base>
   15bd4:	ldr	r2, [pc, #24]	; 15bf4 <_start@@Base+0xc4c>
   15bd8:	b	15bd0 <_start@@Base+0xc28>
   15bdc:	ldr	r2, [pc, #20]	; 15bf8 <_start@@Base+0xc50>
   15be0:	b	15bd0 <_start@@Base+0xc28>
   15be4:	ldr	r2, [pc, #16]	; 15bfc <_start@@Base+0xc54>
   15be8:	b	15bd0 <_start@@Base+0xc28>
   15bec:	bx	lr
   15bf0:	andeq	r5, r1, r8, lsl #10
   15bf4:	andeq	r5, r1, r8, asr #29
   15bf8:	andeq	r5, r1, r0, asr r2
   15bfc:	andeq	r5, r1, r0, lsl #24
   15c00:	push	{r4, r5, lr}
   15c04:	sub	sp, sp, #20
   15c08:	ldr	r3, [pc, #116]	; 15c84 <_start@@Base+0xcdc>
   15c0c:	mov	r2, #0
   15c10:	str	r3, [sp, #4]
   15c14:	mov	r3, #6
   15c18:	str	r3, [sp]
   15c1c:	ldr	r3, [pc, #100]	; 15c88 <_start@@Base+0xce0>
   15c20:	mov	r4, r0
   15c24:	mov	r5, r1
   15c28:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   15c2c:	ldr	r3, [pc, #88]	; 15c8c <_start@@Base+0xce4>
   15c30:	mov	r1, r5
   15c34:	str	r3, [sp, #4]
   15c38:	mov	r3, #5
   15c3c:	str	r3, [sp]
   15c40:	mov	r0, r4
   15c44:	ldr	r3, [pc, #68]	; 15c90 <_start@@Base+0xce8>
   15c48:	mov	r2, #1
   15c4c:	bl	2cf60 <flatcc_json_printer_table_field@@Base>
   15c50:	ldr	r3, [pc, #60]	; 15c94 <_start@@Base+0xcec>
   15c54:	mov	r2, #3
   15c58:	str	r3, [sp, #8]
   15c5c:	ldr	r3, [pc, #52]	; 15c98 <_start@@Base+0xcf0>
   15c60:	mov	r1, r5
   15c64:	str	r3, [sp, #4]
   15c68:	mov	r3, #7
   15c6c:	str	r3, [sp]
   15c70:	mov	r0, r4
   15c74:	ldr	r3, [pc, #32]	; 15c9c <_start@@Base+0xcf4>
   15c78:	bl	2cca4 <flatcc_json_printer_union_vector_field@@Base>
   15c7c:	add	sp, sp, #20
   15c80:	pop	{r4, r5, pc}
   15c84:	andeq	r5, r1, ip, ror #4
   15c88:	andeq	lr, r2, sp, ror r8
   15c8c:	andeq	r5, r1, r0, lsr #25
   15c90:	andeq	lr, r2, r4, lsl #17
   15c94:	andeq	r5, r1, r8, lsr #23
   15c98:	andeq	r7, r1, r0, asr r6
   15c9c:	andeq	lr, r2, sl, lsl #17
   15ca0:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ca4:	sub	sp, sp, #20
   15ca8:	ldr	r5, [pc, #168]	; 15d58 <_start@@Base+0xdb0>
   15cac:	ldr	r4, [pc, #168]	; 15d5c <_start@@Base+0xdb4>
   15cb0:	mov	r3, #14
   15cb4:	mov	r6, r0
   15cb8:	mov	r7, r1
   15cbc:	str	r3, [sp]
   15cc0:	mov	r9, #10
   15cc4:	str	r5, [sp, #8]
   15cc8:	str	r4, [sp, #4]
   15ccc:	ldr	r3, [pc, #140]	; 15d60 <_start@@Base+0xdb8>
   15cd0:	mov	r2, #1
   15cd4:	bl	2cfdc <flatcc_json_printer_union_field@@Base>
   15cd8:	mov	r8, #9
   15cdc:	mov	r1, r7
   15ce0:	mov	r0, r6
   15ce4:	stmib	sp, {r4, r5}
   15ce8:	str	r9, [sp]
   15cec:	ldr	r3, [pc, #112]	; 15d64 <_start@@Base+0xdbc>
   15cf0:	mov	r2, #3
   15cf4:	bl	2cfdc <flatcc_json_printer_union_field@@Base>
   15cf8:	mov	r1, r7
   15cfc:	mov	r0, r6
   15d00:	stmib	sp, {r4, r5}
   15d04:	str	r8, [sp]
   15d08:	ldr	r3, [pc, #88]	; 15d68 <_start@@Base+0xdc0>
   15d0c:	mov	r2, #5
   15d10:	bl	2cfdc <flatcc_json_printer_union_field@@Base>
   15d14:	mov	r3, #5
   15d18:	str	r3, [sp]
   15d1c:	mov	r1, r7
   15d20:	mov	r0, r6
   15d24:	stmib	sp, {r4, r5}
   15d28:	ldr	r3, [pc, #60]	; 15d6c <_start@@Base+0xdc4>
   15d2c:	mov	r2, #7
   15d30:	bl	2cfdc <flatcc_json_printer_union_field@@Base>
   15d34:	stmib	sp, {r4, r5}
   15d38:	str	r9, [sp]
   15d3c:	ldr	r3, [pc, #44]	; 15d70 <_start@@Base+0xdc8>
   15d40:	mov	r2, r8
   15d44:	mov	r1, r7
   15d48:	mov	r0, r6
   15d4c:	bl	2cca4 <flatcc_json_printer_union_vector_field@@Base>
   15d50:	add	sp, sp, #20
   15d54:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15d58:	andeq	r5, r1, r4, ror sp
   15d5c:	andeq	r5, r1, r4, lsr lr
   15d60:	muleq	r2, r2, r8
   15d64:	andeq	lr, r2, r1, lsr #17
   15d68:	andeq	lr, r2, ip, lsr #17
   15d6c:			; <UNDEFINED> instruction: 0x0002e8b6
   15d70:			; <UNDEFINED> instruction: 0x0002e8bc
   15d74:	ldrb	r3, [r1, #8]
   15d78:	cmp	r3, #9
   15d7c:	beq	15dbc <_start@@Base+0xe14>
   15d80:	bhi	15d9c <_start@@Base+0xdf4>
   15d84:	cmp	r3, #2
   15d88:	beq	15db4 <_start@@Base+0xe0c>
   15d8c:	cmp	r3, #8
   15d90:	ldreq	r2, [pc, #48]	; 15dc8 <_start@@Base+0xe20>
   15d94:	beq	15dc0 <_start@@Base+0xe18>
   15d98:	bx	lr
   15d9c:	cmp	r3, #11
   15da0:	beq	15dc4 <_start@@Base+0xe1c>
   15da4:	bcc	15dbc <_start@@Base+0xe14>
   15da8:	cmp	r3, #255	; 0xff
   15dac:	beq	15dc4 <_start@@Base+0xe1c>
   15db0:	bx	lr
   15db4:	ldr	r2, [pc, #16]	; 15dcc <_start@@Base+0xe24>
   15db8:	b	2d1bc <flatcc_json_printer_union_table@@Base>
   15dbc:	ldr	r2, [pc, #12]	; 15dd0 <_start@@Base+0xe28>
   15dc0:	b	2d1dc <flatcc_json_printer_union_struct@@Base>
   15dc4:	b	2d260 <flatcc_json_printer_union_string@@Base>
   15dc8:	andeq	r5, r1, r4, lsl #28
   15dcc:	strdeq	r5, [r1], -r8
   15dd0:	ldrdeq	r5, [r1], -r4
   15dd4:	mov	r3, #10
   15dd8:	push	{r0, r1, r2, lr}
   15ddc:	mov	r2, r1
   15de0:	str	r3, [sp, #4]
   15de4:	ldr	r3, [pc, #20]	; 15e00 <_start@@Base+0xe58>
   15de8:	str	r3, [sp]
   15dec:	mov	r3, #0
   15df0:	mov	r1, r3
   15df4:	bl	2a158 <flatcc_json_printer_int32_struct_field@@Base>
   15df8:	add	sp, sp, #12
   15dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15e00:	andeq	lr, r2, r7, asr #17
   15e04:	mov	r3, #11
   15e08:	push	{r0, r1, r2, lr}
   15e0c:	mov	r2, r1
   15e10:	str	r3, [sp, #4]
   15e14:	ldr	r3, [pc, #20]	; 15e30 <_start@@Base+0xe88>
   15e18:	str	r3, [sp]
   15e1c:	mov	r3, #0
   15e20:	mov	r1, r3
   15e24:	bl	29fd8 <flatcc_json_printer_uint16_struct_field@@Base>
   15e28:	add	sp, sp, #12
   15e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e30:	ldrdeq	lr, [r2], -r2
   15e34:	cmp	r1, #9
   15e38:	mov	r2, r1
   15e3c:	mov	r3, r0
   15e40:	moveq	r2, #5
   15e44:	ldreq	r1, [pc, #96]	; 15eac <_start@@Base+0xf04>
   15e48:	beq	15ea8 <_start@@Base+0xf00>
   15e4c:	bhi	15e7c <_start@@Base+0xed4>
   15e50:	cmp	r2, #2
   15e54:	moveq	r2, #5
   15e58:	ldreq	r1, [pc, #80]	; 15eb0 <_start@@Base+0xf08>
   15e5c:	beq	15ea8 <_start@@Base+0xf00>
   15e60:	cmp	r2, #8
   15e64:	ldreq	r1, [pc, #72]	; 15eb4 <_start@@Base+0xf0c>
   15e68:	beq	15ea8 <_start@@Base+0xf00>
   15e6c:	mov	r2, #4
   15e70:	ldr	r1, [pc, #64]	; 15eb8 <_start@@Base+0xf10>
   15e74:	mov	r0, r3
   15e78:	b	15ea8 <_start@@Base+0xf00>
   15e7c:	cmp	r2, #11
   15e80:	moveq	r2, #5
   15e84:	ldreq	r1, [pc, #48]	; 15ebc <_start@@Base+0xf14>
   15e88:	beq	15ea8 <_start@@Base+0xf00>
   15e8c:	movcc	r2, #7
   15e90:	ldrcc	r1, [pc, #40]	; 15ec0 <_start@@Base+0xf18>
   15e94:	bcc	15ea8 <_start@@Base+0xf00>
   15e98:	cmp	r2, #255	; 0xff
   15e9c:	moveq	r2, #6
   15ea0:	ldreq	r1, [pc, #28]	; 15ec4 <_start@@Base+0xf1c>
   15ea4:	bne	15e6c <_start@@Base+0xec4>
   15ea8:	b	28e7c <flatcc_json_printer_enum@@Base>
   15eac:	andeq	lr, r2, sp, ror #17
   15eb0:	ldrdeq	lr, [r2], -lr	; <UNPREDICTABLE>
   15eb4:	andeq	lr, r2, r4, ror #17
   15eb8:	strdeq	r2, [r3], -r5
   15ebc:	strdeq	lr, [r2], -fp
   15ec0:	strdeq	lr, [r2], -r3
   15ec4:	andeq	lr, r2, r1, lsl #18
   15ec8:	push	{r4, r5, r6, r7, lr}
   15ecc:	mov	r3, #5
   15ed0:	sub	sp, sp, #20
   15ed4:	mov	r4, #2
   15ed8:	ldr	r7, [pc, #120]	; 15f58 <_start@@Base+0xfb0>
   15edc:	stm	sp, {r3, r4}
   15ee0:	str	r7, [sp, #8]
   15ee4:	ldr	r3, [pc, #112]	; 15f5c <_start@@Base+0xfb4>
   15ee8:	mov	r2, #0
   15eec:	mov	r5, r0
   15ef0:	mov	r6, r1
   15ef4:	bl	29b74 <flatcc_json_printer_int8_enum_field@@Base>
   15ef8:	mov	r3, #6
   15efc:	str	r3, [sp]
   15f00:	mov	r1, r6
   15f04:	mov	r0, r5
   15f08:	stmib	sp, {r4, r7}
   15f0c:	ldr	r3, [pc, #76]	; 15f60 <_start@@Base+0xfb8>
   15f10:	mov	r2, #1
   15f14:	bl	29b74 <flatcc_json_printer_int8_enum_field@@Base>
   15f18:	mov	r2, r4
   15f1c:	mov	r1, r6
   15f20:	mov	r0, r5
   15f24:	str	r4, [sp, #4]
   15f28:	str	r4, [sp]
   15f2c:	ldr	r3, [pc, #48]	; 15f64 <_start@@Base+0xfbc>
   15f30:	bl	290f4 <flatcc_json_printer_uint8_field@@Base>
   15f34:	mov	r2, #3
   15f38:	str	r4, [sp, #4]
   15f3c:	str	r2, [sp]
   15f40:	ldr	r3, [pc, #32]	; 15f68 <_start@@Base+0xfc0>
   15f44:	mov	r1, r6
   15f48:	mov	r0, r5
   15f4c:	bl	290f4 <flatcc_json_printer_uint8_field@@Base>
   15f50:	add	sp, sp, #20
   15f54:	pop	{r4, r5, r6, r7, pc}
   15f58:	andeq	r5, r1, ip, ror #30
   15f5c:	ldrdeq	lr, [r2], -r6
   15f60:	andeq	lr, r2, r8, lsl #18
   15f64:	andeq	lr, r2, pc, lsl #18
   15f68:	andeq	lr, r2, r2, lsl r9
   15f6c:	push	{r4, r5, r6, r7, r8, lr}
   15f70:	uxtb	r4, r1
   15f74:	tst	r4, #244	; 0xf4
   15f78:	movne	r6, #1
   15f7c:	moveq	r6, #0
   15f80:	cmp	r4, #0
   15f84:	orreq	r6, r6, #1
   15f88:	cmp	r6, #0
   15f8c:	beq	15f98 <_start@@Base+0xff0>
   15f90:	pop	{r4, r5, r6, r7, r8, lr}
   15f94:	b	28da4 <flatcc_json_printer_int8@@Base>
   15f98:	sub	r3, r4, #1
   15f9c:	tst	r3, r4
   15fa0:	movne	r7, #1
   15fa4:	moveq	r7, #0
   15fa8:	mov	r1, r7
   15fac:	mov	r5, r0
   15fb0:	bl	28e80 <flatcc_json_printer_delimit_enum_flags@@Base>
   15fb4:	ands	r1, r4, #1
   15fb8:	beq	15fd4 <_start@@Base+0x102c>
   15fbc:	mov	r1, r6
   15fc0:	mov	r3, #3
   15fc4:	ldr	r2, [pc, #80]	; 1601c <_start@@Base+0x1074>
   15fc8:	mov	r0, r5
   15fcc:	bl	28eb4 <flatcc_json_printer_enum_flag@@Base>
   15fd0:	mov	r1, #1
   15fd4:	tst	r4, #2
   15fd8:	beq	15ff4 <_start@@Base+0x104c>
   15fdc:	add	r6, r1, #1
   15fe0:	mov	r3, #5
   15fe4:	ldr	r2, [pc, #52]	; 16020 <_start@@Base+0x1078>
   15fe8:	mov	r0, r5
   15fec:	bl	28eb4 <flatcc_json_printer_enum_flag@@Base>
   15ff0:	mov	r1, r6
   15ff4:	tst	r4, #8
   15ff8:	beq	1600c <_start@@Base+0x1064>
   15ffc:	mov	r3, #4
   16000:	ldr	r2, [pc, #28]	; 16024 <_start@@Base+0x107c>
   16004:	mov	r0, r5
   16008:	bl	28eb4 <flatcc_json_printer_enum_flag@@Base>
   1600c:	mov	r1, r7
   16010:	mov	r0, r5
   16014:	pop	{r4, r5, r6, r7, r8, lr}
   16018:	b	28e80 <flatcc_json_printer_delimit_enum_flags@@Base>
   1601c:	andeq	lr, r2, r6, lsl r9
   16020:	andeq	lr, r2, sl, lsl r9
   16024:	andeq	lr, r2, r0, lsr #18
   16028:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1602c:	mov	r6, #1
   16030:	ldr	r3, [pc, #216]	; 16110 <_start@@Base+0x1168>
   16034:	mov	r4, r1
   16038:	str	r3, [sp]
   1603c:	mov	r3, #0
   16040:	str	r6, [sp, #4]
   16044:	mov	r2, r1
   16048:	mov	r1, r3
   1604c:	mov	r5, r0
   16050:	bl	2a240 <flatcc_json_printer_float_struct_field@@Base>
   16054:	ldr	r3, [pc, #184]	; 16114 <_start@@Base+0x116c>
   16058:	str	r6, [sp, #4]
   1605c:	str	r3, [sp]
   16060:	mov	r2, r4
   16064:	mov	r1, r6
   16068:	mov	r0, r5
   1606c:	mov	r3, #4
   16070:	bl	2a240 <flatcc_json_printer_float_struct_field@@Base>
   16074:	ldr	r3, [pc, #156]	; 16118 <_start@@Base+0x1170>
   16078:	str	r6, [sp, #4]
   1607c:	str	r3, [sp]
   16080:	mov	r2, r4
   16084:	mov	r0, r5
   16088:	mov	r3, #8
   1608c:	mov	r1, #2
   16090:	bl	2a240 <flatcc_json_printer_float_struct_field@@Base>
   16094:	ldr	r3, [pc, #128]	; 1611c <_start@@Base+0x1174>
   16098:	mov	r6, #5
   1609c:	str	r3, [sp]
   160a0:	mov	r2, r4
   160a4:	mov	r0, r5
   160a8:	str	r6, [sp, #4]
   160ac:	mov	r3, #16
   160b0:	mov	r1, #3
   160b4:	bl	2a298 <flatcc_json_printer_double_struct_field@@Base>
   160b8:	ldr	r3, [pc, #96]	; 16120 <_start@@Base+0x1178>
   160bc:	mov	r2, r4
   160c0:	str	r3, [sp, #8]
   160c4:	ldr	r3, [pc, #88]	; 16124 <_start@@Base+0x117c>
   160c8:	mov	r0, r5
   160cc:	str	r3, [sp]
   160d0:	str	r6, [sp, #4]
   160d4:	mov	r3, #24
   160d8:	mov	r1, #4
   160dc:	bl	2a4e8 <flatcc_json_printer_int8_enum_struct_field@@Base>
   160e0:	ldr	r3, [pc, #64]	; 16128 <_start@@Base+0x1180>
   160e4:	str	r6, [sp, #4]
   160e8:	str	r3, [sp, #8]
   160ec:	ldr	r3, [pc, #56]	; 1612c <_start@@Base+0x1184>
   160f0:	mov	r2, r4
   160f4:	str	r3, [sp]
   160f8:	mov	r1, r6
   160fc:	mov	r3, #26
   16100:	mov	r0, r5
   16104:	bl	2d270 <flatcc_json_printer_embedded_struct_field@@Base>
   16108:	add	sp, sp, #16
   1610c:	pop	{r4, r5, r6, pc}
   16110:	ldrdeq	lr, [r2], -r2
   16114:	andeq	r2, r3, pc, lsl pc
   16118:	andeq	lr, r2, r5, lsr #18
   1611c:	andeq	lr, r2, r7, lsr #18
   16120:	andeq	r5, r1, ip, ror #30
   16124:	andeq	lr, r2, sp, lsr #18
   16128:	andeq	r5, r1, ip, asr #22
   1612c:	andeq	lr, r2, r3, lsr r9
   16130:	sub	r3, r2, r1
   16134:	cmp	r3, #3
   16138:	push	{r4, r5, r6, lr}
   1613c:	mov	r6, r0
   16140:	mov	r4, r1
   16144:	mov	r5, r2
   16148:	ble	16164 <_start@@Base+0x11bc>
   1614c:	mov	r2, #4
   16150:	ldr	r1, [pc, #44]	; 16184 <_start@@Base+0x11dc>
   16154:	mov	r0, r4
   16158:	bl	1457c <memcmp@plt>
   1615c:	cmp	r0, #0
   16160:	beq	1617c <_start@@Base+0x11d4>
   16164:	mov	r2, r5
   16168:	mov	r1, r4
   1616c:	mov	r0, r6
   16170:	mov	r3, #26
   16174:	pop	{r4, r5, r6, lr}
   16178:	b	24b40 <flatcc_json_parser_set_error@@Base>
   1617c:	add	r0, r4, #4
   16180:	pop	{r4, r5, r6, pc}
   16184:	andeq	r3, r3, lr, rrx
   16188:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
   1618c:	mov	r4, r1
   16190:	mov	r5, r0
   16194:	mov	r1, r2
   16198:	mov	r0, r4
   1619c:	mov	sl, r3
   161a0:	str	r2, [sp, #12]
   161a4:	bl	150d0 <_start@@Base+0x128>
   161a8:	add	r7, pc, #568	; 0x238
   161ac:	ldrd	r6, [r7]
   161b0:	ldr	r8, [sp, #48]	; 0x30
   161b4:	ldr	fp, [sp, #52]	; 0x34
   161b8:	ldr	ip, [sp, #12]
   161bc:	cmp	r1, r7
   161c0:	cmpeq	r0, r6
   161c4:	bhi	162b8 <_start@@Base+0x1310>
   161c8:	add	r7, pc, #544	; 0x220
   161cc:	ldrd	r6, [r7]
   161d0:	cmp	r1, r7
   161d4:	cmpeq	r0, r6
   161d8:	mov	r7, r1
   161dc:	and	r6, r0, #-16777216	; 0xff000000
   161e0:	bhi	16228 <_start@@Base+0x1280>
   161e4:	add	r1, pc, #524	; 0x20c
   161e8:	ldrd	r0, [r1]
   161ec:	cmp	r7, r1
   161f0:	cmpeq	r6, r0
   161f4:	bne	1621c <_start@@Base+0x1274>
   161f8:	mov	r2, ip
   161fc:	str	fp, [sp]
   16200:	mov	r3, #5
   16204:	mov	r1, r4
   16208:	mov	r0, r5
   1620c:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16210:	cmp	r4, r0
   16214:	movne	r2, #9
   16218:	bne	16260 <_start@@Base+0x12b8>
   1621c:	mov	r0, r4
   16220:	add	sp, sp, #16
   16224:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16228:	add	r3, pc, #464	; 0x1d0
   1622c:	ldrd	r2, [r3]
   16230:	cmp	r1, r3
   16234:	cmpeq	r6, r2
   16238:	bne	16278 <_start@@Base+0x12d0>
   1623c:	mov	r2, ip
   16240:	str	fp, [sp]
   16244:	mov	r3, #5
   16248:	mov	r1, r4
   1624c:	mov	r0, r5
   16250:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16254:	cmp	r4, r0
   16258:	movne	r2, #2
   1625c:	beq	1621c <_start@@Base+0x1274>
   16260:	mov	r3, #0
   16264:	mov	r4, r0
   16268:	strd	r2, [r8]
   1626c:	mov	r3, #0
   16270:	str	r3, [sl]
   16274:	b	1621c <_start@@Base+0x1274>
   16278:	add	r7, pc, #392	; 0x188
   1627c:	ldrd	r6, [r7]
   16280:	bic	r0, r0, #255	; 0xff
   16284:	cmp	r1, r7
   16288:	cmpeq	r0, r6
   1628c:	bne	1621c <_start@@Base+0x1274>
   16290:	mov	r2, ip
   16294:	str	fp, [sp]
   16298:	mov	r3, #7
   1629c:	mov	r1, r4
   162a0:	mov	r0, r5
   162a4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   162a8:	cmp	r4, r0
   162ac:	movne	r2, #10
   162b0:	bne	16260 <_start@@Base+0x12b8>
   162b4:	b	1621c <_start@@Base+0x1274>
   162b8:	add	r7, pc, #336	; 0x150
   162bc:	ldrd	r6, [r7]
   162c0:	cmp	r1, r7
   162c4:	cmpeq	r0, r6
   162c8:	bhi	1630c <_start@@Base+0x1364>
   162cc:	add	r7, pc, #324	; 0x144
   162d0:	ldrd	r6, [r7]
   162d4:	mov	r0, #0
   162d8:	cmp	r1, r7
   162dc:	cmpeq	r0, r6
   162e0:	bne	1621c <_start@@Base+0x1274>
   162e4:	mov	r2, ip
   162e8:	str	fp, [sp]
   162ec:	mov	r3, #4
   162f0:	mov	r1, r4
   162f4:	mov	r0, r5
   162f8:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   162fc:	cmp	r4, r0
   16300:	movne	r2, #0
   16304:	bne	16260 <_start@@Base+0x12b8>
   16308:	b	1621c <_start@@Base+0x1274>
   1630c:	add	r7, pc, #268	; 0x10c
   16310:	ldrd	r6, [r7]
   16314:	cmp	r1, r7
   16318:	cmpeq	r0, r6
   1631c:	bhi	16360 <_start@@Base+0x13b8>
   16320:	add	r7, pc, #256	; 0x100
   16324:	ldrd	r6, [r7]
   16328:	and	r0, r0, #-16777216	; 0xff000000
   1632c:	cmp	r1, r7
   16330:	cmpeq	r0, r6
   16334:	bne	1621c <_start@@Base+0x1274>
   16338:	mov	r2, ip
   1633c:	str	fp, [sp]
   16340:	mov	r3, #5
   16344:	mov	r1, r4
   16348:	mov	r0, r5
   1634c:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16350:	cmp	r4, r0
   16354:	movne	r2, #11
   16358:	bne	16260 <_start@@Base+0x12b8>
   1635c:	b	1621c <_start@@Base+0x1274>
   16360:	add	r3, pc, #200	; 0xc8
   16364:	ldrd	r2, [r3]
   16368:	ldr	r6, [pc, #208]	; 16440 <_start@@Base+0x1498>
   1636c:	mvn	r7, #0
   16370:	and	r7, r7, r1
   16374:	and	r6, r6, r0
   16378:	cmp	r7, r3
   1637c:	cmpeq	r6, r2
   16380:	bne	163ac <_start@@Base+0x1404>
   16384:	mov	r2, ip
   16388:	str	fp, [sp]
   1638c:	mov	r3, #6
   16390:	mov	r1, r4
   16394:	mov	r0, r5
   16398:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   1639c:	cmp	r4, r0
   163a0:	movne	r2, #255	; 0xff
   163a4:	bne	16260 <_start@@Base+0x12b8>
   163a8:	b	1621c <_start@@Base+0x1274>
   163ac:	add	r7, pc, #132	; 0x84
   163b0:	ldrd	r6, [r7]
   163b4:	cmp	r1, r7
   163b8:	cmpeq	r0, r6
   163bc:	bne	1621c <_start@@Base+0x1274>
   163c0:	str	fp, [sp]
   163c4:	mov	r3, #8
   163c8:	mov	r2, ip
   163cc:	mov	r1, r4
   163d0:	mov	r0, r5
   163d4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   163d8:	cmp	r4, r0
   163dc:	beq	1621c <_start@@Base+0x1274>
   163e0:	mov	r2, #8
   163e4:	b	16260 <_start@@Base+0x12b8>
   163e8:			; <UNDEFINED> instruction: 0xffffffff
   163ec:	cdpmi	14, 4, cr4, cr15, cr4, {2}
   163f0:			; <UNDEFINED> instruction: 0x46616dff
   163f4:	rsbmi	r6, pc, #428	; 0x1ac
   163f8:	strvs	r0, [r0, #-0]
   163fc:	rsbmi	r6, r5, #108, 24	; 0x6c00
   16400:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16404:	ldclmi	12, cr4, [r5, #-388]!	; 0xfffffe7c
   16408:	strbtmi	r6, [r1], -r0, lsl #28
   1640c:	rsbmi	r6, pc, #428	; 0x1ac
   16410:	ldrshvc	pc, [pc, #255]	; 16517 <_start@@Base+0x156f>	; <UNPREDICTABLE>
   16414:	svcmi	0x00746865
   16418:	andeq	r0, r0, r0
   1641c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16420:	cdpvs	5, 7, cr6, cr10, cr11, {3}
   16424:	rsbpl	r7, r1, #117	; 0x75
   16428:	andvc	r0, r0, #0
   1642c:	svcmi	0x00746865
   16430:	strbvs	r0, [r4, #-0]!
   16434:	strbpl	r7, [lr, #-1395]!	; 0xfffffa8d
   16438:	cdpvs	5, 7, cr6, cr10, cr12, {3}
   1643c:	rsbpl	r7, r1, #117	; 0x75
   16440:			; <UNDEFINED> instruction: 0xffff0000
   16444:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16448:	mov	r5, r1
   1644c:	mov	sl, r0
   16450:	mov	r1, r2
   16454:	mov	r0, r5
   16458:	mov	r6, r2
   1645c:	mov	r7, r3
   16460:	bl	150d0 <_start@@Base+0x128>
   16464:	add	r3, pc, #492	; 0x1ec
   16468:	ldrd	r2, [r3]
   1646c:	ldr	fp, [sp, #52]	; 0x34
   16470:	cmp	r1, r3
   16474:	cmpeq	r0, r2
   16478:	mov	r9, r1
   1647c:	bhi	164ec <_start@@Base+0x1544>
   16480:	add	r3, pc, #472	; 0x1d8
   16484:	ldrd	r2, [r3]
   16488:	bic	r9, r1, #255	; 0xff
   1648c:	mov	r8, #0
   16490:	cmp	r9, r3
   16494:	cmpeq	r8, r2
   16498:	beq	164ac <_start@@Base+0x1504>
   1649c:	mov	r4, r5
   164a0:	mov	r0, r4
   164a4:	add	sp, sp, #12
   164a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164ac:	mov	r2, r6
   164b0:	str	fp, [sp]
   164b4:	mov	r3, #3
   164b8:	mov	r1, r5
   164bc:	mov	r0, sl
   164c0:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   164c4:	cmp	r5, r0
   164c8:	mov	r4, r0
   164cc:	movne	r2, #4
   164d0:	beq	164a0 <_start@@Base+0x14f8>
   164d4:	ldr	r1, [sp, #48]	; 0x30
   164d8:	mov	r3, #0
   164dc:	strd	r2, [r1]
   164e0:	mov	r3, #0
   164e4:	str	r3, [r7]
   164e8:	b	164a0 <_start@@Base+0x14f8>
   164ec:	add	r3, pc, #372	; 0x174
   164f0:	ldrd	r2, [r3]
   164f4:	mov	r8, r0
   164f8:	cmp	r1, r3
   164fc:	cmpeq	r0, r2
   16500:	bne	16584 <_start@@Base+0x15dc>
   16504:	mov	r2, r6
   16508:	str	fp, [sp]
   1650c:	mov	r3, #8
   16510:	mov	r1, r5
   16514:	mov	r0, sl
   16518:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   1651c:	cmp	r5, r0
   16520:	mov	r4, r0
   16524:	movne	r2, #3
   16528:	bne	164d4 <_start@@Base+0x152c>
   1652c:	add	r3, pc, #316	; 0x13c
   16530:	ldrd	r2, [r3]
   16534:	mov	r0, #0
   16538:	cmp	r9, r3
   1653c:	cmpeq	r0, r2
   16540:	bne	165cc <_start@@Base+0x1624>
   16544:	str	fp, [sp]
   16548:	mov	r3, #4
   1654c:	mov	r2, r6
   16550:	mov	r1, r4
   16554:	mov	r0, sl
   16558:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   1655c:	cmp	r4, r0
   16560:	beq	1649c <_start@@Base+0x14f4>
   16564:	ldr	r1, [sp, #48]	; 0x30
   16568:	mov	r3, #0
   1656c:	mov	r2, #0
   16570:	mov	r4, r0
   16574:	strd	r2, [r1]
   16578:	mov	r3, #0
   1657c:	str	r3, [r7]
   16580:	b	164a0 <_start@@Base+0x14f8>
   16584:	add	r3, pc, #236	; 0xec
   16588:	ldrd	r2, [r3]
   1658c:	bic	r0, r0, #255	; 0xff
   16590:	cmp	r1, r3
   16594:	cmpeq	r0, r2
   16598:	movne	r4, r5
   1659c:	bne	1652c <_start@@Base+0x1584>
   165a0:	mov	r2, r6
   165a4:	str	fp, [sp]
   165a8:	mov	r3, #7
   165ac:	mov	r1, r5
   165b0:	mov	r0, sl
   165b4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   165b8:	cmp	r5, r0
   165bc:	mov	r4, r0
   165c0:	movne	r2, #1
   165c4:	bne	164d4 <_start@@Base+0x152c>
   165c8:	b	1652c <_start@@Base+0x1584>
   165cc:	add	r3, pc, #172	; 0xac
   165d0:	ldrd	r2, [r3]
   165d4:	cmp	r9, r3
   165d8:	cmpeq	r8, r2
   165dc:	bne	1649c <_start@@Base+0x14f4>
   165e0:	mov	r1, r6
   165e4:	add	r0, r4, #8
   165e8:	bl	150d0 <_start@@Base+0x128>
   165ec:	add	r3, pc, #148	; 0x94
   165f0:	ldrd	r2, [r3]
   165f4:	cmp	r1, r3
   165f8:	cmpeq	r0, r2
   165fc:	bne	1649c <_start@@Base+0x14f4>
   16600:	add	r8, r4, #16
   16604:	mov	r1, r6
   16608:	mov	r0, r8
   1660c:	bl	150d0 <_start@@Base+0x128>
   16610:	add	r3, pc, #120	; 0x78
   16614:	ldrd	r2, [r3]
   16618:	bic	r0, r0, #255	; 0xff
   1661c:	cmp	r1, r3
   16620:	cmpeq	r0, r2
   16624:	bne	1649c <_start@@Base+0x14f4>
   16628:	str	fp, [sp]
   1662c:	mov	r3, #7
   16630:	mov	r2, r6
   16634:	mov	r1, r8
   16638:	mov	r0, sl
   1663c:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16640:	cmp	r8, r0
   16644:	mov	r4, r0
   16648:	beq	1649c <_start@@Base+0x14f4>
   1664c:	mov	r2, #2
   16650:	b	164d4 <_start@@Base+0x152c>
   16654:	nop			; (mov r0, r0)
   16658:	strbtvc	r7, [r5], #-511	; 0xfffffe01
   1665c:	stclmi	14, cr6, [pc, #-460]!	; 16498 <_start@@Base+0x14f0>
   16660:	andeq	r0, r0, r0
   16664:	cmnmi	ip, r0, lsl #8
   16668:	strbtvc	r7, [r5], #-562	; 0xfffffdce
   1666c:	stclmi	14, cr6, [pc, #-460]!	; 164a8 <_start@@Base+0x1500>
   16670:	andeq	r0, r0, r0
   16674:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   16678:	strbtvc	r7, [r5], #-512	; 0xfffffe00
   1667c:	stclmi	14, cr6, [pc, #-460]!	; 164b8 <_start@@Base+0x1510>
   16680:	cmnpl	r9, #112, 26	; 0x1c00
   16684:	strbtpl	r7, [r5], #-884	; 0xfffffc8c
   16688:	rsbvs	r6, ip, #364904448	; 0x15c00000
   1668c:	cfstrdvs	mvd5, [r5], #-388	; 0xfffffe7c
   16690:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   16694:	ldmdbvs	r4!, {r0, r2, r6, fp, sp, lr}^
   16698:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1669c:	mov	r4, r1
   166a0:	mov	r5, r0
   166a4:	mov	r1, r2
   166a8:	mov	r0, r4
   166ac:	mov	sl, r2
   166b0:	mov	fp, r3
   166b4:	bl	150d0 <_start@@Base+0x128>
   166b8:	add	r3, pc, #280	; 0x118
   166bc:	ldrd	r2, [r3]
   166c0:	cmp	r1, r3
   166c4:	cmpeq	r0, r2
   166c8:	bhi	1671c <_start@@Base+0x1774>
   166cc:	add	r3, pc, #268	; 0x10c
   166d0:	ldrd	r2, [r3]
   166d4:	mov	r0, #0
   166d8:	cmp	r1, r3
   166dc:	cmpeq	r0, r2
   166e0:	bne	16710 <_start@@Base+0x1768>
   166e4:	ldr	r3, [sp, #52]	; 0x34
   166e8:	mov	r2, sl
   166ec:	str	r3, [sp]
   166f0:	mov	r1, r4
   166f4:	mov	r3, #4
   166f8:	mov	r0, r5
   166fc:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16700:	cmp	r4, r0
   16704:	movne	r2, #3
   16708:	movne	r3, #0
   1670c:	bne	167c8 <_start@@Base+0x1820>
   16710:	mov	r0, r4
   16714:	add	sp, sp, #12
   16718:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1671c:	add	r9, pc, #196	; 0xc4
   16720:	ldrd	r8, [r9]
   16724:	ldr	r6, [pc, #212]	; 16800 <_start@@Base+0x1858>
   16728:	mvn	r7, #0
   1672c:	and	r7, r7, r1
   16730:	and	r6, r6, r0
   16734:	cmp	r7, r9
   16738:	cmpeq	r6, r8
   1673c:	bne	16784 <_start@@Base+0x17dc>
   16740:	ldr	r3, [sp, #52]	; 0x34
   16744:	mov	r2, sl
   16748:	str	r3, [sp]
   1674c:	mov	r1, r4
   16750:	mov	r3, #6
   16754:	mov	r0, r5
   16758:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   1675c:	cmp	r4, r0
   16760:	beq	16710 <_start@@Base+0x1768>
   16764:	ldr	r1, [sp, #48]	; 0x30
   16768:	mvn	r3, #0
   1676c:	mvn	r2, #1
   16770:	strd	r2, [r1]
   16774:	mov	r3, #1
   16778:	str	r3, [fp]
   1677c:	mov	r4, r0
   16780:	b	16710 <_start@@Base+0x1768>
   16784:	add	r3, pc, #100	; 0x64
   16788:	ldrd	r2, [r3]
   1678c:	mov	r0, #0
   16790:	cmp	r1, r3
   16794:	cmpeq	r0, r2
   16798:	bne	16710 <_start@@Base+0x1768>
   1679c:	ldr	r3, [sp, #52]	; 0x34
   167a0:	mov	r2, sl
   167a4:	str	r3, [sp]
   167a8:	mov	r1, r4
   167ac:	mov	r3, #4
   167b0:	mov	r0, r5
   167b4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   167b8:	cmp	r4, r0
   167bc:	beq	16710 <_start@@Base+0x1768>
   167c0:	add	r3, pc, #48	; 0x30
   167c4:	ldrd	r2, [r3]
   167c8:	ldr	r1, [sp, #48]	; 0x30
   167cc:	strd	r2, [r1]
   167d0:	mov	r3, #0
   167d4:	b	16778 <_start@@Base+0x17d0>
   167d8:			; <UNDEFINED> instruction: 0xffffffff
   167dc:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   167e0:	andeq	r0, r0, r0
   167e4:	stmdavs	r5!, {r0, r4, r5, fp, ip, sp, lr}^
   167e8:	strbvs	r0, [r7, #-0]!
   167ec:	stmdavs	r5!, {r1, r2, r3, r5, r6, fp, ip, sp, lr}^
   167f0:	andeq	r0, r0, r0
   167f4:	stmdavs	r5!, {r1, r4, r5, fp, ip, sp, lr}^
   167f8:	cdpvc	14, 10, cr11, cr15, cr15, {5}
   167fc:	andeq	r0, r0, r0
   16800:			; <UNDEFINED> instruction: 0xffff0000
   16804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16808:	mov	r4, r1
   1680c:	sub	sp, sp, #20
   16810:	mov	r1, r2
   16814:	mov	r5, r0
   16818:	mov	r0, r4
   1681c:	str	r2, [sp, #12]
   16820:	mov	sl, r3
   16824:	bl	150d0 <_start@@Base+0x128>
   16828:	add	r7, pc, #344	; 0x158
   1682c:	ldrd	r6, [r7]
   16830:	ldr	fp, [sp, #60]	; 0x3c
   16834:	ldr	r2, [sp, #12]
   16838:	cmp	r1, r7
   1683c:	cmpeq	r0, r6
   16840:	bhi	16888 <_start@@Base+0x18e0>
   16844:	add	r7, pc, #324	; 0x144
   16848:	ldrd	r6, [r7]
   1684c:	mov	r0, #0
   16850:	cmp	r1, r7
   16854:	cmpeq	r0, r6
   16858:	bne	1687c <_start@@Base+0x18d4>
   1685c:	str	fp, [sp]
   16860:	mov	r3, #4
   16864:	mov	r1, r4
   16868:	mov	r0, r5
   1686c:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16870:	cmp	r4, r0
   16874:	movne	r2, #2
   16878:	bne	168d4 <_start@@Base+0x192c>
   1687c:	mov	r0, r4
   16880:	add	sp, sp, #20
   16884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16888:	add	r7, pc, #264	; 0x108
   1688c:	ldrd	r6, [r7]
   16890:	cmp	r1, r7
   16894:	cmpeq	r0, r6
   16898:	bhi	168f0 <_start@@Base+0x1948>
   1689c:	add	r7, pc, #252	; 0xfc
   168a0:	ldrd	r6, [r7]
   168a4:	mov	r0, #0
   168a8:	cmp	r1, r7
   168ac:	cmpeq	r0, r6
   168b0:	bne	1687c <_start@@Base+0x18d4>
   168b4:	str	fp, [sp]
   168b8:	mov	r3, #4
   168bc:	mov	r1, r4
   168c0:	mov	r0, r5
   168c4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   168c8:	cmp	r4, r0
   168cc:	beq	1687c <_start@@Base+0x18d4>
   168d0:	mov	r2, #42	; 0x2a
   168d4:	ldr	r1, [sp, #56]	; 0x38
   168d8:	mov	r3, #0
   168dc:	strd	r2, [r1]
   168e0:	mov	r3, #0
   168e4:	str	r3, [sl]
   168e8:	mov	r4, r0
   168ec:	b	1687c <_start@@Base+0x18d4>
   168f0:	bic	r6, r0, #255	; 0xff
   168f4:	mov	r8, r6
   168f8:	add	r7, pc, #168	; 0xa8
   168fc:	ldrd	r6, [r7]
   16900:	cmp	r1, r7
   16904:	cmpeq	r8, r6
   16908:	bne	16940 <_start@@Base+0x1998>
   1690c:	str	fp, [sp]
   16910:	mov	r3, #7
   16914:	mov	r1, r4
   16918:	mov	r0, r5
   1691c:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16920:	cmp	r4, r0
   16924:	mvnne	r2, #0
   16928:	beq	1687c <_start@@Base+0x18d4>
   1692c:	ldr	r1, [sp, #56]	; 0x38
   16930:	mvn	r3, #0
   16934:	strd	r2, [r1]
   16938:	mov	r3, #1
   1693c:	b	168e4 <_start@@Base+0x193c>
   16940:	ldr	r6, [pc, #112]	; 169b8 <_start@@Base+0x1a10>
   16944:	mvn	r7, #0
   16948:	and	r0, r0, r6
   1694c:	and	r1, r1, r7
   16950:	add	r7, pc, #88	; 0x58
   16954:	ldrd	r6, [r7]
   16958:	cmp	r1, r7
   1695c:	cmpeq	r0, r6
   16960:	bne	1687c <_start@@Base+0x18d4>
   16964:	str	fp, [sp]
   16968:	mov	r3, #6
   1696c:	mov	r1, r4
   16970:	mov	r0, r5
   16974:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16978:	cmp	r4, r0
   1697c:	beq	1687c <_start@@Base+0x18d4>
   16980:	mvn	r2, #1
   16984:	b	1692c <_start@@Base+0x1984>
   16988:			; <UNDEFINED> instruction: 0xffffffff
   1698c:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16990:	andeq	r0, r0, r0
   16994:	stmdbvs	lr!, {r0, r4, r5, sl, ip, sp, lr}^
   16998:	strbvs	pc, [r6, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1699c:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   169a0:	andeq	r0, r0, r0
   169a4:	stmdbvs	lr!, {r1, r4, r5, sl, ip, sp, lr}^
   169a8:	strbvs	r3, [r7, #-512]!	; 0xfffffe00
   169ac:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   169b0:	strbvs	r0, [r7, #-0]!
   169b4:	stmdbvs	lr!, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
   169b8:			; <UNDEFINED> instruction: 0xffff0000
   169bc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   169c0:	mov	r4, r1
   169c4:	mov	r7, r0
   169c8:	mov	r1, r2
   169cc:	mov	r0, r4
   169d0:	mov	r5, r2
   169d4:	mov	r6, r3
   169d8:	bl	150d0 <_start@@Base+0x128>
   169dc:	add	r3, pc, #236	; 0xec
   169e0:	ldrd	r2, [r3]
   169e4:	ldr	r9, [sp, #40]	; 0x28
   169e8:	ldr	r8, [sp, #44]	; 0x2c
   169ec:	cmp	r1, r3
   169f0:	cmpeq	r0, r2
   169f4:	mov	r0, #0
   169f8:	bhi	16a40 <_start@@Base+0x1a98>
   169fc:	add	r3, pc, #212	; 0xd4
   16a00:	ldrd	r2, [r3]
   16a04:	cmp	r1, r3
   16a08:	cmpeq	r0, r2
   16a0c:	bne	16a34 <_start@@Base+0x1a8c>
   16a10:	mov	r2, r5
   16a14:	str	r8, [sp]
   16a18:	mov	r3, #4
   16a1c:	mov	r1, r4
   16a20:	mov	r0, r7
   16a24:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16a28:	cmp	r4, r0
   16a2c:	mvnne	r2, #11
   16a30:	bne	16a78 <_start@@Base+0x1ad0>
   16a34:	mov	r0, r4
   16a38:	add	sp, sp, #12
   16a3c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16a40:	add	r3, pc, #152	; 0x98
   16a44:	ldrd	r2, [r3]
   16a48:	cmp	r1, r3
   16a4c:	cmpeq	r0, r2
   16a50:	bne	16a90 <_start@@Base+0x1ae8>
   16a54:	mov	r2, r5
   16a58:	str	r8, [sp]
   16a5c:	mov	r3, #4
   16a60:	mov	r1, r4
   16a64:	mov	r0, r7
   16a68:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16a6c:	cmp	r4, r0
   16a70:	mvnne	r2, #9
   16a74:	beq	16a34 <_start@@Base+0x1a8c>
   16a78:	mvn	r3, #0
   16a7c:	mov	r4, r0
   16a80:	strd	r2, [r9]
   16a84:	mov	r3, #1
   16a88:	str	r3, [r6]
   16a8c:	b	16a34 <_start@@Base+0x1a8c>
   16a90:	add	r3, pc, #80	; 0x50
   16a94:	ldrd	r2, [r3]
   16a98:	cmp	r1, r3
   16a9c:	cmpeq	r0, r2
   16aa0:	bne	16a34 <_start@@Base+0x1a8c>
   16aa4:	str	r8, [sp]
   16aa8:	mov	r3, #4
   16aac:	mov	r2, r5
   16ab0:	mov	r1, r4
   16ab4:	mov	r0, r7
   16ab8:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16abc:	cmp	r4, r0
   16ac0:	beq	16a34 <_start@@Base+0x1a8c>
   16ac4:	mvn	r2, #10
   16ac8:	b	16a78 <_start@@Base+0x1ad0>
   16acc:	nop			; (mov r0, r0)
   16ad0:			; <UNDEFINED> instruction: 0xffffffff
   16ad4:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16ad8:	andeq	r0, r0, r0
   16adc:	mcrvs	7, 3, r6, cr5, cr1, {1}
   16ae0:	andeq	r0, r0, r0
   16ae4:	mcrvs	7, 3, r6, cr5, cr3, {1}
   16ae8:	andeq	r0, r0, r0
   16aec:	mcrvs	7, 3, r6, cr5, cr2, {1}
   16af0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16af4:	mov	r4, r1
   16af8:	mov	r5, r0
   16afc:	mov	r1, r2
   16b00:	mov	r0, r4
   16b04:	mov	sl, r2
   16b08:	mov	fp, r3
   16b0c:	bl	150d0 <_start@@Base+0x128>
   16b10:	add	r3, pc, #256	; 0x100
   16b14:	ldrd	r2, [r3]
   16b18:	cmp	r1, r3
   16b1c:	cmpeq	r0, r2
   16b20:	bhi	16b70 <_start@@Base+0x1bc8>
   16b24:	add	r3, pc, #244	; 0xf4
   16b28:	ldrd	r2, [r3]
   16b2c:	mov	r0, #0
   16b30:	cmp	r1, r3
   16b34:	cmpeq	r0, r2
   16b38:	bne	16b64 <_start@@Base+0x1bbc>
   16b3c:	ldr	r3, [sp, #52]	; 0x34
   16b40:	mov	r2, sl
   16b44:	str	r3, [sp]
   16b48:	mov	r1, r4
   16b4c:	mov	r3, #4
   16b50:	mov	r0, r5
   16b54:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16b58:	cmp	r4, r0
   16b5c:	movne	r2, #8
   16b60:	bne	16bb4 <_start@@Base+0x1c0c>
   16b64:	mov	r0, r4
   16b68:	add	sp, sp, #12
   16b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16b70:	add	r7, pc, #176	; 0xb0
   16b74:	ldrd	r6, [r7]
   16b78:	bic	r9, r1, #255	; 0xff
   16b7c:	mov	r8, #0
   16b80:	cmp	r9, r7
   16b84:	cmpeq	r8, r6
   16b88:	bne	16bd0 <_start@@Base+0x1c28>
   16b8c:	ldr	r3, [sp, #52]	; 0x34
   16b90:	mov	r2, sl
   16b94:	str	r3, [sp]
   16b98:	mov	r1, r4
   16b9c:	mov	r3, #3
   16ba0:	mov	r0, r5
   16ba4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16ba8:	cmp	r4, r0
   16bac:	movne	r2, #1
   16bb0:	beq	16b64 <_start@@Base+0x1bbc>
   16bb4:	ldr	r1, [sp, #48]	; 0x30
   16bb8:	mov	r3, #0
   16bbc:	mov	r4, r0
   16bc0:	strd	r2, [r1]
   16bc4:	mov	r3, #0
   16bc8:	str	r3, [fp]
   16bcc:	b	16b64 <_start@@Base+0x1bbc>
   16bd0:	add	r3, pc, #88	; 0x58
   16bd4:	ldrd	r2, [r3]
   16bd8:	and	r0, r0, #-16777216	; 0xff000000
   16bdc:	cmp	r1, r3
   16be0:	cmpeq	r0, r2
   16be4:	bne	16b64 <_start@@Base+0x1bbc>
   16be8:	ldr	r3, [sp, #52]	; 0x34
   16bec:	mov	r2, sl
   16bf0:	str	r3, [sp]
   16bf4:	mov	r1, r4
   16bf8:	mov	r3, #5
   16bfc:	mov	r0, r5
   16c00:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   16c04:	cmp	r4, r0
   16c08:	beq	16b64 <_start@@Base+0x1bbc>
   16c0c:	mov	r2, #2
   16c10:	b	16bb4 <_start@@Base+0x1c0c>
   16c14:	nop			; (mov r0, r0)
   16c18:	ldclvs	15, cr15, [pc, #1020]!	; 1701c <_start@@Base+0x2074>
   16c1c:	ldrbmi	r6, [r2, -r5, ror #10]!
   16c20:	andeq	r0, r0, r0
   16c24:	rsbmi	r7, ip, #423624704	; 0x19400000
   16c28:	andeq	r0, r0, r0
   16c2c:	rsbpl	r6, r5, #0, 8
   16c30:	cdpvs	0, 0, cr0, cr0, cr0, {0}
   16c34:	ldrbmi	r6, [r2, -r5, ror #10]!
   16c38:	sub	r3, r2, r1
   16c3c:	cmp	r3, #1
   16c40:	ble	16c64 <_start@@Base+0x1cbc>
   16c44:	ldrb	r3, [r1]
   16c48:	cmp	r3, #32
   16c4c:	bhi	16c68 <_start@@Base+0x1cc0>
   16c50:	bne	16c64 <_start@@Base+0x1cbc>
   16c54:	ldrb	r3, [r1, #1]
   16c58:	cmp	r3, #32
   16c5c:	addhi	r1, r1, #1
   16c60:	bhi	16c68 <_start@@Base+0x1cc0>
   16c64:	b	24c70 <flatcc_json_parser_space_ext@@Base>
   16c68:	mov	r0, r1
   16c6c:	bx	lr
   16c70:	push	{r4, r5, r6, lr}
   16c74:	mov	r4, r2
   16c78:	mov	r5, r3
   16c7c:	mov	r6, r0
   16c80:	bl	16c38 <_start@@Base+0x1c90>
   16c84:	cmp	r4, r0
   16c88:	moveq	r3, #0
   16c8c:	beq	16d20 <_start@@Base+0x1d78>
   16c90:	ldrb	r3, [r0]
   16c94:	cmp	r3, #44	; 0x2c
   16c98:	beq	16cd0 <_start@@Base+0x1d28>
   16c9c:	mov	r3, #0
   16ca0:	str	r3, [r5]
   16ca4:	ldrb	r3, [r0]
   16ca8:	cmp	r3, #93	; 0x5d
   16cac:	movne	r3, #9
   16cb0:	movne	r2, r4
   16cb4:	movne	r1, r0
   16cb8:	bne	16cfc <_start@@Base+0x1d54>
   16cbc:	mov	r2, r4
   16cc0:	add	r1, r0, #1
   16cc4:	mov	r0, r6
   16cc8:	pop	{r4, r5, r6, lr}
   16ccc:	b	16c38 <_start@@Base+0x1c90>
   16cd0:	add	r1, r0, #1
   16cd4:	mov	r2, r4
   16cd8:	mov	r0, r6
   16cdc:	bl	16c38 <_start@@Base+0x1c90>
   16ce0:	cmp	r4, r0
   16ce4:	bne	16d08 <_start@@Base+0x1d60>
   16ce8:	mov	r3, #0
   16cec:	str	r3, [r5]
   16cf0:	mov	r2, r4
   16cf4:	mov	r3, #9
   16cf8:	mov	r1, r4
   16cfc:	mov	r0, r6
   16d00:	pop	{r4, r5, r6, lr}
   16d04:	b	24b40 <flatcc_json_parser_set_error@@Base>
   16d08:	ldrb	r3, [r0]
   16d0c:	cmp	r3, #93	; 0x5d
   16d10:	movne	r3, #1
   16d14:	moveq	r3, #0
   16d18:	streq	r3, [r5]
   16d1c:	beq	16cbc <_start@@Base+0x1d14>
   16d20:	str	r3, [r5]
   16d24:	pop	{r4, r5, r6, pc}
   16d28:	push	{r4, r5, r6, lr}
   16d2c:	mov	r4, r2
   16d30:	mov	r5, r3
   16d34:	mov	r6, r0
   16d38:	bl	16c38 <_start@@Base+0x1c90>
   16d3c:	cmp	r4, r0
   16d40:	moveq	r3, #0
   16d44:	beq	16dd8 <_start@@Base+0x1e30>
   16d48:	ldrb	r3, [r0]
   16d4c:	cmp	r3, #44	; 0x2c
   16d50:	beq	16d88 <_start@@Base+0x1de0>
   16d54:	mov	r3, #0
   16d58:	str	r3, [r5]
   16d5c:	ldrb	r3, [r0]
   16d60:	cmp	r3, #125	; 0x7d
   16d64:	movne	r3, #10
   16d68:	movne	r2, r4
   16d6c:	movne	r1, r0
   16d70:	bne	16db4 <_start@@Base+0x1e0c>
   16d74:	mov	r2, r4
   16d78:	add	r1, r0, #1
   16d7c:	mov	r0, r6
   16d80:	pop	{r4, r5, r6, lr}
   16d84:	b	16c38 <_start@@Base+0x1c90>
   16d88:	add	r1, r0, #1
   16d8c:	mov	r2, r4
   16d90:	mov	r0, r6
   16d94:	bl	16c38 <_start@@Base+0x1c90>
   16d98:	cmp	r4, r0
   16d9c:	bne	16dc0 <_start@@Base+0x1e18>
   16da0:	mov	r3, #0
   16da4:	str	r3, [r5]
   16da8:	mov	r2, r4
   16dac:	mov	r3, #10
   16db0:	mov	r1, r4
   16db4:	mov	r0, r6
   16db8:	pop	{r4, r5, r6, lr}
   16dbc:	b	24b40 <flatcc_json_parser_set_error@@Base>
   16dc0:	ldrb	r3, [r0]
   16dc4:	cmp	r3, #125	; 0x7d
   16dc8:	movne	r3, #1
   16dcc:	moveq	r3, #0
   16dd0:	streq	r3, [r5]
   16dd4:	beq	16d74 <_start@@Base+0x1dcc>
   16dd8:	str	r3, [r5]
   16ddc:	pop	{r4, r5, r6, pc}
   16de0:	sub	r1, r1, r0
   16de4:	cmp	r1, r2
   16de8:	bxle	lr
   16dec:	ldrb	r3, [r0, r2]
   16df0:	cmp	r3, #46	; 0x2e
   16df4:	addeq	r2, r2, #1
   16df8:	addeq	r0, r0, r2
   16dfc:	bx	lr
   16e00:	mov	r3, #8
   16e04:	push	{r4, lr}
   16e08:	mov	r2, r3
   16e0c:	mov	r1, #0
   16e10:	mov	r4, r0
   16e14:	bl	233f0 <flatcc_verify_field@@Base>
   16e18:	cmp	r0, #0
   16e1c:	popne	{r4, pc}
   16e20:	mov	r3, #4
   16e24:	mov	r0, r4
   16e28:	mov	r2, r3
   16e2c:	mov	r1, #1
   16e30:	pop	{r4, lr}
   16e34:	b	233f0 <flatcc_verify_field@@Base>
   16e38:	mov	r3, #1
   16e3c:	push	{r4, lr}
   16e40:	mov	r2, r3
   16e44:	mov	r1, #0
   16e48:	mov	r4, r0
   16e4c:	bl	233f0 <flatcc_verify_field@@Base>
   16e50:	cmp	r0, #0
   16e54:	popne	{r4, pc}
   16e58:	mov	r3, #1
   16e5c:	mov	r2, r3
   16e60:	mov	r1, r3
   16e64:	mov	r0, r4
   16e68:	bl	233f0 <flatcc_verify_field@@Base>
   16e6c:	cmp	r0, #0
   16e70:	popne	{r4, pc}
   16e74:	mov	r3, #1
   16e78:	mov	r2, r3
   16e7c:	mov	r1, #2
   16e80:	mov	r0, r4
   16e84:	bl	233f0 <flatcc_verify_field@@Base>
   16e88:	cmp	r0, #0
   16e8c:	popne	{r4, pc}
   16e90:	mov	r3, #1
   16e94:	mov	r0, r4
   16e98:	mov	r2, r3
   16e9c:	mov	r1, #3
   16ea0:	pop	{r4, lr}
   16ea4:	b	233f0 <flatcc_verify_field@@Base>
   16ea8:	mov	r2, #0
   16eac:	push	{r4, lr}
   16eb0:	mov	r1, r2
   16eb4:	mov	r4, r0
   16eb8:	bl	23450 <flatcc_verify_string_field@@Base>
   16ebc:	cmp	r0, #0
   16ec0:	popne	{r4, pc}
   16ec4:	mov	r3, #8
   16ec8:	mov	r2, r3
   16ecc:	mov	r1, #1
   16ed0:	mov	r0, r4
   16ed4:	bl	233f0 <flatcc_verify_field@@Base>
   16ed8:	cmp	r0, #0
   16edc:	popne	{r4, pc}
   16ee0:	mov	r3, #2
   16ee4:	mov	r0, r4
   16ee8:	mov	r2, r3
   16eec:	mov	r1, r3
   16ef0:	pop	{r4, lr}
   16ef4:	b	233f0 <flatcc_verify_field@@Base>
   16ef8:	mov	r2, #0
   16efc:	push	{r4, lr}
   16f00:	mov	r1, r2
   16f04:	mov	r4, r0
   16f08:	bl	23450 <flatcc_verify_string_field@@Base>
   16f0c:	subs	r2, r0, #0
   16f10:	bne	16fe0 <_start@@Base+0x2038>
   16f14:	mov	r3, #4
   16f18:	mov	r2, r3
   16f1c:	mov	r1, #1
   16f20:	mov	r0, r4
   16f24:	bl	233f0 <flatcc_verify_field@@Base>
   16f28:	subs	r2, r0, #0
   16f2c:	bne	16fe0 <_start@@Base+0x2038>
   16f30:	mov	r1, #2
   16f34:	mov	r0, r4
   16f38:	bl	23450 <flatcc_verify_string_field@@Base>
   16f3c:	subs	r2, r0, #0
   16f40:	bne	16fe0 <_start@@Base+0x2038>
   16f44:	mov	r3, #8
   16f48:	mov	r2, r3
   16f4c:	mov	r1, #3
   16f50:	mov	r0, r4
   16f54:	bl	233f0 <flatcc_verify_field@@Base>
   16f58:	subs	r2, r0, #0
   16f5c:	bne	16fe0 <_start@@Base+0x2038>
   16f60:	mov	r1, #4
   16f64:	mov	r0, r4
   16f68:	bl	23450 <flatcc_verify_string_field@@Base>
   16f6c:	subs	r2, r0, #0
   16f70:	bne	16fe0 <_start@@Base+0x2038>
   16f74:	mov	r3, #8
   16f78:	mov	r2, r3
   16f7c:	mov	r1, #5
   16f80:	mov	r0, r4
   16f84:	bl	233f0 <flatcc_verify_field@@Base>
   16f88:	subs	r2, r0, #0
   16f8c:	bne	16fe0 <_start@@Base+0x2038>
   16f90:	mov	r3, #4
   16f94:	mov	r2, r3
   16f98:	mov	r1, #6
   16f9c:	mov	r0, r4
   16fa0:	bl	233f0 <flatcc_verify_field@@Base>
   16fa4:	subs	r2, r0, #0
   16fa8:	bne	16fe0 <_start@@Base+0x2038>
   16fac:	mov	r3, #8
   16fb0:	mov	r2, r3
   16fb4:	mov	r1, #7
   16fb8:	mov	r0, r4
   16fbc:	bl	233f0 <flatcc_verify_field@@Base>
   16fc0:	subs	r2, r0, #0
   16fc4:	bne	16fe0 <_start@@Base+0x2038>
   16fc8:	mov	r3, #4
   16fcc:	mov	r0, r4
   16fd0:	mov	r2, r3
   16fd4:	mov	r1, #8
   16fd8:	pop	{r4, lr}
   16fdc:	b	233f0 <flatcc_verify_field@@Base>
   16fe0:	mov	r0, r2
   16fe4:	pop	{r4, pc}
   16fe8:	mov	r2, #0
   16fec:	push	{r4, lr}
   16ff0:	mov	r1, r2
   16ff4:	ldr	r3, [pc, #64]	; 1703c <_start@@Base+0x2094>
   16ff8:	mov	r4, r0
   16ffc:	bl	23594 <flatcc_verify_table_field@@Base>
   17000:	subs	r2, r0, #0
   17004:	bne	17034 <_start@@Base+0x208c>
   17008:	ldr	r3, [pc, #48]	; 17040 <_start@@Base+0x2098>
   1700c:	mov	r1, #1
   17010:	mov	r0, r4
   17014:	bl	23594 <flatcc_verify_table_field@@Base>
   17018:	subs	r2, r0, #0
   1701c:	bne	17034 <_start@@Base+0x208c>
   17020:	mov	r0, r4
   17024:	ldr	r3, [pc, #24]	; 17044 <_start@@Base+0x209c>
   17028:	mov	r1, #2
   1702c:	pop	{r4, lr}
   17030:	b	23594 <flatcc_verify_table_field@@Base>
   17034:	mov	r0, r2
   17038:	pop	{r4, pc}
   1703c:	strdeq	r6, [r1], -r8
   17040:	andeq	lr, r1, r0, asr sp
   17044:	andeq	r6, r1, r0, lsl #28
   17048:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1704c:	mov	r2, #32
   17050:	mov	r3, #16
   17054:	mov	r1, #0
   17058:	mov	r4, r0
   1705c:	bl	233f0 <flatcc_verify_field@@Base>
   17060:	subs	r2, r0, #0
   17064:	bne	17418 <_start@@Base+0x2470>
   17068:	mov	r3, #2
   1706c:	mov	r2, r3
   17070:	mov	r1, r3
   17074:	mov	r0, r4
   17078:	bl	233f0 <flatcc_verify_field@@Base>
   1707c:	subs	r2, r0, #0
   17080:	bne	17418 <_start@@Base+0x2470>
   17084:	mov	r3, #2
   17088:	mov	r2, r3
   1708c:	mov	r1, #1
   17090:	mov	r0, r4
   17094:	bl	233f0 <flatcc_verify_field@@Base>
   17098:	subs	r2, r0, #0
   1709c:	bne	17418 <_start@@Base+0x2470>
   170a0:	mov	r2, #1
   170a4:	mov	r1, #3
   170a8:	mov	r0, r4
   170ac:	bl	23450 <flatcc_verify_string_field@@Base>
   170b0:	subs	r2, r0, #0
   170b4:	bne	17418 <_start@@Base+0x2470>
   170b8:	mov	r3, #1
   170bc:	mov	r2, r3
   170c0:	mov	r1, #6
   170c4:	mov	r0, r4
   170c8:	bl	233f0 <flatcc_verify_field@@Base>
   170cc:	subs	r2, r0, #0
   170d0:	bne	17418 <_start@@Base+0x2470>
   170d4:	mov	r5, #1
   170d8:	mvn	r6, #0
   170dc:	mov	r3, r5
   170e0:	stm	sp, {r5, r6}
   170e4:	mov	r1, #5
   170e8:	mov	r0, r4
   170ec:	bl	2348c <flatcc_verify_vector_field@@Base>
   170f0:	subs	r2, r0, #0
   170f4:	bne	17418 <_start@@Base+0x2470>
   170f8:	ldr	r3, [pc, #804]	; 17424 <_start@@Base+0x247c>
   170fc:	mov	r1, #11
   17100:	mov	r0, r4
   17104:	bl	235e4 <flatcc_verify_table_vector_field@@Base>
   17108:	subs	r2, r0, #0
   1710c:	bne	17418 <_start@@Base+0x2470>
   17110:	mov	r1, #10
   17114:	mov	r0, r4
   17118:	bl	234e4 <flatcc_verify_string_vector_field@@Base>
   1711c:	subs	r2, r0, #0
   17120:	bne	17418 <_start@@Base+0x2470>
   17124:	mov	r1, #28
   17128:	mov	r0, r4
   1712c:	bl	234e4 <flatcc_verify_string_vector_field@@Base>
   17130:	subs	r2, r0, #0
   17134:	bne	17418 <_start@@Base+0x2470>
   17138:	stm	sp, {r5, r6}
   1713c:	mov	r3, r5
   17140:	mov	r1, #24
   17144:	mov	r0, r4
   17148:	bl	2348c <flatcc_verify_vector_field@@Base>
   1714c:	subs	r2, r0, #0
   17150:	bne	17418 <_start@@Base+0x2470>
   17154:	mvn	r3, #-536870912	; 0xe0000000
   17158:	mov	r5, #4
   1715c:	str	r3, [sp, #4]
   17160:	mov	r2, #0
   17164:	str	r5, [sp]
   17168:	mov	r3, #8
   1716c:	mov	r1, #29
   17170:	mov	r0, r4
   17174:	bl	2348c <flatcc_verify_vector_field@@Base>
   17178:	subs	r2, r0, #0
   1717c:	bne	17418 <_start@@Base+0x2470>
   17180:	ldr	r6, [pc, #668]	; 17424 <_start@@Base+0x247c>
   17184:	mov	r1, #12
   17188:	mov	r3, r6
   1718c:	mov	r0, r4
   17190:	bl	23594 <flatcc_verify_table_field@@Base>
   17194:	subs	r2, r0, #0
   17198:	bne	17418 <_start@@Base+0x2470>
   1719c:	ldr	r3, [pc, #644]	; 17428 <_start@@Base+0x2480>
   171a0:	mov	r1, #8
   171a4:	mov	r0, r4
   171a8:	bl	23b54 <flatcc_verify_union_field@@Base>
   171ac:	subs	r2, r0, #0
   171b0:	bne	17418 <_start@@Base+0x2470>
   171b4:	mov	r7, #2
   171b8:	mvn	r8, #-1073741824	; 0xc0000000
   171bc:	mov	r3, r5
   171c0:	stm	sp, {r7, r8}
   171c4:	mov	r1, #9
   171c8:	mov	r0, r4
   171cc:	bl	2348c <flatcc_verify_vector_field@@Base>
   171d0:	subs	r2, r0, #0
   171d4:	bne	17418 <_start@@Base+0x2470>
   171d8:	stm	sp, {r7, r8}
   171dc:	mov	r3, r5
   171e0:	mov	r1, #31
   171e4:	mov	r0, r4
   171e8:	bl	2348c <flatcc_verify_vector_field@@Base>
   171ec:	subs	r2, r0, #0
   171f0:	bne	17418 <_start@@Base+0x2470>
   171f4:	str	r6, [sp, #4]
   171f8:	mov	r6, #1
   171fc:	mov	r3, r2
   17200:	str	r6, [sp]
   17204:	mov	r1, #13
   17208:	mov	r0, r4
   1720c:	bl	23a78 <flatcc_verify_table_as_nested_root@@Base>
   17210:	subs	r2, r0, #0
   17214:	bne	17418 <_start@@Base+0x2470>
   17218:	ldr	r3, [pc, #524]	; 1742c <_start@@Base+0x2484>
   1721c:	mov	r1, #14
   17220:	mov	r0, r4
   17224:	bl	23594 <flatcc_verify_table_field@@Base>
   17228:	subs	r2, r0, #0
   1722c:	bne	17418 <_start@@Base+0x2470>
   17230:	mov	r2, r6
   17234:	mov	r3, r6
   17238:	mov	r1, #15
   1723c:	mov	r0, r4
   17240:	bl	233f0 <flatcc_verify_field@@Base>
   17244:	subs	r2, r0, #0
   17248:	bne	17418 <_start@@Base+0x2470>
   1724c:	mov	r2, r5
   17250:	mov	r3, r5
   17254:	mov	r1, #16
   17258:	mov	r0, r4
   1725c:	bl	233f0 <flatcc_verify_field@@Base>
   17260:	subs	r2, r0, #0
   17264:	bne	17418 <_start@@Base+0x2470>
   17268:	mov	r2, r5
   1726c:	mov	r3, r5
   17270:	mov	r1, #17
   17274:	mov	r0, r4
   17278:	bl	233f0 <flatcc_verify_field@@Base>
   1727c:	subs	r2, r0, #0
   17280:	bne	17418 <_start@@Base+0x2470>
   17284:	mov	r3, #8
   17288:	mov	r2, r3
   1728c:	mov	r1, #18
   17290:	mov	r0, r4
   17294:	bl	233f0 <flatcc_verify_field@@Base>
   17298:	subs	r2, r0, #0
   1729c:	bne	17418 <_start@@Base+0x2470>
   172a0:	mov	r3, #8
   172a4:	mov	r2, r3
   172a8:	mov	r1, #19
   172ac:	mov	r0, r4
   172b0:	bl	233f0 <flatcc_verify_field@@Base>
   172b4:	subs	r2, r0, #0
   172b8:	bne	17418 <_start@@Base+0x2470>
   172bc:	mov	r2, r5
   172c0:	mov	r3, r5
   172c4:	mov	r1, #20
   172c8:	mov	r0, r4
   172cc:	bl	233f0 <flatcc_verify_field@@Base>
   172d0:	subs	r2, r0, #0
   172d4:	bne	17418 <_start@@Base+0x2470>
   172d8:	mov	r2, r5
   172dc:	mov	r3, r5
   172e0:	mov	r1, #21
   172e4:	mov	r0, r4
   172e8:	bl	233f0 <flatcc_verify_field@@Base>
   172ec:	subs	r2, r0, #0
   172f0:	bne	17418 <_start@@Base+0x2470>
   172f4:	mov	r3, #8
   172f8:	mov	r2, r3
   172fc:	mov	r1, #22
   17300:	mov	r0, r4
   17304:	bl	233f0 <flatcc_verify_field@@Base>
   17308:	subs	r2, r0, #0
   1730c:	bne	17418 <_start@@Base+0x2470>
   17310:	mov	r3, #8
   17314:	mov	r2, r3
   17318:	mov	r1, #23
   1731c:	mov	r0, r4
   17320:	bl	233f0 <flatcc_verify_field@@Base>
   17324:	subs	r2, r0, #0
   17328:	bne	17418 <_start@@Base+0x2470>
   1732c:	mov	r2, r5
   17330:	mov	r3, r5
   17334:	mov	r1, #25
   17338:	mov	r0, r4
   1733c:	bl	233f0 <flatcc_verify_field@@Base>
   17340:	subs	r2, r0, #0
   17344:	bne	17418 <_start@@Base+0x2470>
   17348:	mov	r2, r5
   1734c:	mov	r3, r5
   17350:	mov	r1, #26
   17354:	mov	r0, r4
   17358:	bl	233f0 <flatcc_verify_field@@Base>
   1735c:	subs	r2, r0, #0
   17360:	bne	17418 <_start@@Base+0x2470>
   17364:	mov	r2, r5
   17368:	mov	r3, r5
   1736c:	mov	r1, #27
   17370:	mov	r0, r4
   17374:	bl	233f0 <flatcc_verify_field@@Base>
   17378:	subs	r2, r0, #0
   1737c:	bne	17418 <_start@@Base+0x2470>
   17380:	mvn	r3, #0
   17384:	str	r3, [sp, #4]
   17388:	str	r6, [sp]
   1738c:	mov	r3, r6
   17390:	mov	r1, #30
   17394:	mov	r0, r4
   17398:	bl	2348c <flatcc_verify_vector_field@@Base>
   1739c:	subs	r2, r0, #0
   173a0:	bne	17418 <_start@@Base+0x2470>
   173a4:	mov	r5, #8
   173a8:	mvn	r6, #-536870912	; 0xe0000000
   173ac:	mov	r2, #0
   173b0:	stm	sp, {r5, r6}
   173b4:	mov	r3, r5
   173b8:	mov	r1, #32
   173bc:	mov	r0, r4
   173c0:	bl	2348c <flatcc_verify_vector_field@@Base>
   173c4:	subs	r2, r0, #0
   173c8:	bne	17418 <_start@@Base+0x2470>
   173cc:	stm	sp, {r5, r6}
   173d0:	mov	r3, r5
   173d4:	mov	r1, #33	; 0x21
   173d8:	mov	r0, r4
   173dc:	bl	2348c <flatcc_verify_vector_field@@Base>
   173e0:	subs	r2, r0, #0
   173e4:	bne	17418 <_start@@Base+0x2470>
   173e8:	ldr	r3, [pc, #64]	; 17430 <_start@@Base+0x2488>
   173ec:	mov	r1, #34	; 0x22
   173f0:	mov	r0, r4
   173f4:	bl	23594 <flatcc_verify_table_field@@Base>
   173f8:	subs	r2, r0, #0
   173fc:	bne	17418 <_start@@Base+0x2470>
   17400:	ldr	r3, [pc, #44]	; 17434 <_start@@Base+0x248c>
   17404:	mov	r1, #35	; 0x23
   17408:	mov	r0, r4
   1740c:	add	sp, sp, #8
   17410:	pop	{r4, r5, r6, r7, r8, lr}
   17414:	b	23594 <flatcc_verify_table_field@@Base>
   17418:	mov	r0, r2
   1741c:	add	sp, sp, #8
   17420:	pop	{r4, r5, r6, r7, r8, pc}
   17424:	andeq	r7, r1, r8, asr #32
   17428:			; <UNDEFINED> instruction: 0x000174b0
   1742c:	andeq	r6, r1, r8, lsr #29
   17430:	andeq	r8, r1, r8, ror sp
   17434:	andeq	r7, r1, r8, lsr r4
   17438:	push	{r0, r1, r4, r5, r6, lr}
   1743c:	mov	r4, #1
   17440:	mvn	r6, #0
   17444:	mov	r2, #0
   17448:	stm	sp, {r4, r6}
   1744c:	mov	r3, r4
   17450:	mov	r1, r2
   17454:	mov	r5, r0
   17458:	bl	2348c <flatcc_verify_vector_field@@Base>
   1745c:	cmp	r0, #0
   17460:	bne	174a4 <_start@@Base+0x24fc>
   17464:	mov	r2, r0
   17468:	stm	sp, {r4, r6}
   1746c:	mov	r3, r4
   17470:	mov	r1, r4
   17474:	mov	r0, r5
   17478:	bl	2348c <flatcc_verify_vector_field@@Base>
   1747c:	cmp	r0, #0
   17480:	bne	174a4 <_start@@Base+0x24fc>
   17484:	ldr	r3, [pc, #32]	; 174ac <_start@@Base+0x2504>
   17488:	mov	r2, r0
   1748c:	str	r3, [sp, #4]
   17490:	str	r4, [sp]
   17494:	mov	r3, r0
   17498:	mov	r1, #2
   1749c:	mov	r0, r5
   174a0:	bl	23a78 <flatcc_verify_table_as_nested_root@@Base>
   174a4:	add	sp, sp, #8
   174a8:	pop	{r4, r5, r6, pc}
   174ac:	andeq	r7, r1, r8, asr #32
   174b0:	ldrb	r3, [r0, #12]
   174b4:	sub	r3, r3, #1
   174b8:	cmp	r3, #3
   174bc:	ldrls	pc, [pc, r3, lsl #2]
   174c0:	b	174f4 <_start@@Base+0x254c>
   174c4:	ldrdeq	r7, [r1], -r4
   174c8:	ldrdeq	r7, [r1], -ip
   174cc:	andeq	r7, r1, r4, ror #9
   174d0:	andeq	r7, r1, ip, ror #9
   174d4:	ldr	r1, [pc, #32]	; 174fc <_start@@Base+0x2554>
   174d8:	b	236e4 <flatcc_verify_union_table@@Base>
   174dc:	ldr	r1, [pc, #28]	; 17500 <_start@@Base+0x2558>
   174e0:	b	174d8 <_start@@Base+0x2530>
   174e4:	ldr	r1, [pc, #24]	; 17504 <_start@@Base+0x255c>
   174e8:	b	174d8 <_start@@Base+0x2530>
   174ec:	ldr	r1, [pc, #20]	; 17508 <_start@@Base+0x2560>
   174f0:	b	174d8 <_start@@Base+0x2530>
   174f4:	mov	r0, #0
   174f8:	bx	lr
   174fc:	andeq	r7, r1, r8, asr #32
   17500:	andeq	r6, r1, r8, lsr lr
   17504:	andeq	r5, r1, r4, asr r2
   17508:	andeq	r7, r1, ip, lsl #10
   1750c:	mov	r2, #0
   17510:	push	{r4, lr}
   17514:	mov	r1, r2
   17518:	ldr	r3, [pc, #64]	; 17560 <_start@@Base+0x25b8>
   1751c:	mov	r4, r0
   17520:	bl	23594 <flatcc_verify_table_field@@Base>
   17524:	subs	r2, r0, #0
   17528:	bne	17558 <_start@@Base+0x25b0>
   1752c:	ldr	r3, [pc, #48]	; 17564 <_start@@Base+0x25bc>
   17530:	mov	r1, #1
   17534:	mov	r0, r4
   17538:	bl	23594 <flatcc_verify_table_field@@Base>
   1753c:	subs	r2, r0, #0
   17540:	bne	17558 <_start@@Base+0x25b0>
   17544:	mov	r0, r4
   17548:	ldr	r3, [pc, #24]	; 17568 <_start@@Base+0x25c0>
   1754c:	mov	r1, #3
   17550:	pop	{r4, lr}
   17554:	b	23c70 <flatcc_verify_union_vector_field@@Base>
   17558:	mov	r0, r2
   1755c:	pop	{r4, pc}
   17560:	andeq	r6, r1, r8, ror #31
   17564:	andeq	r7, r1, ip, ror #10
   17568:			; <UNDEFINED> instruction: 0x000174b0
   1756c:	push	{r4, lr}
   17570:	mov	r2, #0
   17574:	ldr	r3, [pc, #116]	; 175f0 <_start@@Base+0x2648>
   17578:	mov	r1, #1
   1757c:	mov	r4, r0
   17580:	bl	23b54 <flatcc_verify_union_field@@Base>
   17584:	subs	r2, r0, #0
   17588:	bne	175e8 <_start@@Base+0x2640>
   1758c:	ldr	r3, [pc, #92]	; 175f0 <_start@@Base+0x2648>
   17590:	mov	r1, #3
   17594:	mov	r0, r4
   17598:	bl	23b54 <flatcc_verify_union_field@@Base>
   1759c:	subs	r2, r0, #0
   175a0:	bne	175e8 <_start@@Base+0x2640>
   175a4:	ldr	r3, [pc, #68]	; 175f0 <_start@@Base+0x2648>
   175a8:	mov	r1, #5
   175ac:	mov	r0, r4
   175b0:	bl	23b54 <flatcc_verify_union_field@@Base>
   175b4:	subs	r2, r0, #0
   175b8:	bne	175e8 <_start@@Base+0x2640>
   175bc:	ldr	r3, [pc, #44]	; 175f0 <_start@@Base+0x2648>
   175c0:	mov	r1, #7
   175c4:	mov	r0, r4
   175c8:	bl	23b54 <flatcc_verify_union_field@@Base>
   175cc:	subs	r2, r0, #0
   175d0:	bne	175e8 <_start@@Base+0x2640>
   175d4:	mov	r0, r4
   175d8:	ldr	r3, [pc, #16]	; 175f0 <_start@@Base+0x2648>
   175dc:	mov	r1, #9
   175e0:	pop	{r4, lr}
   175e4:	b	23c70 <flatcc_verify_union_vector_field@@Base>
   175e8:	mov	r0, r2
   175ec:	pop	{r4, pc}
   175f0:	strdeq	r7, [r1], -r4
   175f4:	ldrb	r3, [r0, #12]
   175f8:	cmp	r3, #9
   175fc:	beq	17640 <_start@@Base+0x2698>
   17600:	bhi	17620 <_start@@Base+0x2678>
   17604:	cmp	r3, #2
   17608:	beq	17638 <_start@@Base+0x2690>
   1760c:	cmp	r3, #8
   17610:	moveq	r2, #2
   17614:	beq	17644 <_start@@Base+0x269c>
   17618:	mov	r0, #0
   1761c:	bx	lr
   17620:	cmp	r3, #11
   17624:	beq	17634 <_start@@Base+0x268c>
   17628:	bcc	17640 <_start@@Base+0x2698>
   1762c:	cmp	r3, #255	; 0xff
   17630:	bne	17618 <_start@@Base+0x2670>
   17634:	b	23768 <flatcc_verify_union_string@@Base>
   17638:	ldr	r1, [pc, #12]	; 1764c <_start@@Base+0x26a4>
   1763c:	b	236e4 <flatcc_verify_union_table@@Base>
   17640:	mov	r2, #4
   17644:	mov	r1, r2
   17648:	b	2370c <flatcc_verify_union_struct@@Base>
   1764c:	andeq	r5, r1, ip, asr r2
   17650:	sub	r1, r1, #1
   17654:	cmp	r1, #3
   17658:	ldrls	pc, [pc, r1, lsl #2]
   1765c:	b	176a0 <_start@@Base+0x26f8>
   17660:	andeq	r7, r1, r0, ror r6
   17664:	andeq	r7, r1, ip, ror r6
   17668:	andeq	r7, r1, r8, lsl #13
   1766c:	muleq	r1, r4, r6
   17670:	ldr	r1, [pc, #52]	; 176ac <_start@@Base+0x2704>
   17674:	mov	r2, #7
   17678:	b	28e7c <flatcc_json_printer_enum@@Base>
   1767c:	mov	r2, #23
   17680:	ldr	r1, [pc, #40]	; 176b0 <_start@@Base+0x2708>
   17684:	b	17678 <_start@@Base+0x26d0>
   17688:	mov	r2, #8
   1768c:	ldr	r1, [pc, #32]	; 176b4 <_start@@Base+0x270c>
   17690:	b	17678 <_start@@Base+0x26d0>
   17694:	mov	r2, #3
   17698:	ldr	r1, [pc, #24]	; 176b8 <_start@@Base+0x2710>
   1769c:	b	17678 <_start@@Base+0x26d0>
   176a0:	mov	r2, #4
   176a4:	ldr	r1, [pc, #16]	; 176bc <_start@@Base+0x2714>
   176a8:	b	17678 <_start@@Base+0x26d0>
   176ac:	andeq	lr, r2, r9, lsr r9
   176b0:	andeq	lr, r2, r1, asr #18
   176b4:	andeq	lr, r2, r9, asr r9
   176b8:	andeq	lr, r2, r2, ror #18
   176bc:	strdeq	r2, [r3], -r5
   176c0:	cmp	r1, r2
   176c4:	mov	r3, r2
   176c8:	beq	176e4 <_start@@Base+0x273c>
   176cc:	ldrb	r3, [r1]
   176d0:	cmp	r3, #34	; 0x22
   176d4:	addeq	r3, r1, #1
   176d8:	beq	176e4 <_start@@Base+0x273c>
   176dc:	mov	r3, #5
   176e0:	b	24b40 <flatcc_json_parser_set_error@@Base>
   176e4:	mov	r0, r3
   176e8:	bx	lr
   176ec:	push	{r4, r5, r6, lr}
   176f0:	mov	r4, r0
   176f4:	mov	r5, r2
   176f8:	bl	176c0 <_start@@Base+0x2718>
   176fc:	mov	r2, r5
   17700:	mov	r1, r0
   17704:	mov	r0, r4
   17708:	pop	{r4, r5, r6, lr}
   1770c:	b	16c38 <_start@@Base+0x1c90>
   17710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17714:	sub	sp, sp, #28
   17718:	mov	sl, r3
   1771c:	ldr	r3, [sp, #64]	; 0x40
   17720:	mov	r6, #0
   17724:	mov	r4, r2
   17728:	strb	r6, [r3]
   1772c:	mov	r8, r0
   17730:	bl	176ec <_start@@Base+0x2744>
   17734:	cmp	r4, r0
   17738:	movne	r7, r0
   1773c:	addne	fp, sp, #16
   17740:	bne	17754 <_start@@Base+0x27ac>
   17744:	mov	r0, r4
   17748:	add	sp, sp, #28
   1774c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17750:	mov	r7, r5
   17754:	mov	r9, sl
   17758:	add	r3, sp, #12
   1775c:	str	r3, [sp, #4]
   17760:	str	fp, [sp]
   17764:	add	r3, sp, #8
   17768:	ldr	r5, [r9]
   1776c:	mov	r2, r4
   17770:	mov	r1, r7
   17774:	mov	r0, r8
   17778:	blx	r5
   1777c:	cmp	r4, r0
   17780:	mov	r5, r0
   17784:	beq	17744 <_start@@Base+0x279c>
   17788:	cmp	r7, r0
   1778c:	bne	177d0 <_start@@Base+0x2828>
   17790:	ldr	r3, [r9, #4]!
   17794:	cmp	r3, #0
   17798:	bne	17758 <_start@@Base+0x27b0>
   1779c:	mov	r2, r4
   177a0:	mov	r3, #23
   177a4:	mov	r1, r7
   177a8:	mov	r0, r8
   177ac:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   177b0:	mov	r4, r0
   177b4:	b	17744 <_start@@Base+0x279c>
   177b8:	ldr	r3, [sp, #20]
   177bc:	ldr	r2, [sp, #16]
   177c0:	orrs	r3, r2, r3
   177c4:	movne	r6, #1
   177c8:	moveq	r6, #0
   177cc:	b	177f8 <_start@@Base+0x2850>
   177d0:	ldr	r3, [sp, #8]
   177d4:	cmp	r3, #0
   177d8:	beq	177b8 <_start@@Base+0x2810>
   177dc:	mov	r3, #8
   177e0:	mov	r2, r4
   177e4:	mov	r1, r5
   177e8:	mov	r0, r8
   177ec:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   177f0:	cmp	r4, r0
   177f4:	beq	17744 <_start@@Base+0x279c>
   177f8:	ldr	r3, [sp, #64]	; 0x40
   177fc:	ldr	r2, [sp, #64]	; 0x40
   17800:	ldrb	r3, [r3]
   17804:	add	r3, r6, r3
   17808:	strb	r3, [r2]
   1780c:	ldr	r3, [sp, #12]
   17810:	cmp	r3, #0
   17814:	bne	17750 <_start@@Base+0x27a8>
   17818:	mov	r4, r5
   1781c:	b	17744 <_start@@Base+0x279c>
   17820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17824:	sub	sp, sp, #28
   17828:	mov	sl, r3
   1782c:	ldr	r6, [sp, #64]	; 0x40
   17830:	mov	r3, #0
   17834:	mov	r5, r2
   17838:	str	r3, [r6]
   1783c:	mov	r9, r0
   17840:	bl	176ec <_start@@Base+0x2744>
   17844:	cmp	r5, r0
   17848:	mov	r4, r0
   1784c:	movne	r8, r0
   17850:	addne	fp, sp, #16
   17854:	bne	1788c <_start@@Base+0x28e4>
   17858:	mov	r0, r4
   1785c:	add	sp, sp, #28
   17860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17864:	bl	2e344 <flatcc_json_printer_clear@@Base+0xa38>
   17868:	eor	r0, r0, #-2147483648	; 0x80000000
   1786c:	vldr	s14, [r6]
   17870:	vmov	s15, r0
   17874:	ldr	r3, [sp, #12]
   17878:	cmp	r3, #0
   1787c:	vadd.f32	s15, s14, s15
   17880:	vstr	s15, [r6]
   17884:	beq	17858 <_start@@Base+0x28b0>
   17888:	mov	r8, r4
   1788c:	mov	r7, sl
   17890:	add	r3, sp, #12
   17894:	str	r3, [sp, #4]
   17898:	str	fp, [sp]
   1789c:	add	r3, sp, #8
   178a0:	ldr	r4, [r7]
   178a4:	mov	r2, r5
   178a8:	mov	r1, r8
   178ac:	mov	r0, r9
   178b0:	blx	r4
   178b4:	cmp	r5, r0
   178b8:	mov	r4, r0
   178bc:	beq	17858 <_start@@Base+0x28b0>
   178c0:	cmp	r8, r0
   178c4:	bne	178f0 <_start@@Base+0x2948>
   178c8:	ldr	r3, [r7, #4]!
   178cc:	cmp	r3, #0
   178d0:	bne	17890 <_start@@Base+0x28e8>
   178d4:	mov	r1, r0
   178d8:	mov	r3, #23
   178dc:	mov	r2, r5
   178e0:	mov	r0, r9
   178e4:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   178e8:	mov	r4, r0
   178ec:	b	17858 <_start@@Base+0x28b0>
   178f0:	ldr	r3, [sp, #8]
   178f4:	ldrd	r0, [sp, #16]
   178f8:	cmp	r3, #0
   178fc:	bne	17864 <_start@@Base+0x28bc>
   17900:	bl	2e344 <flatcc_json_printer_clear@@Base+0xa38>
   17904:	b	1786c <_start@@Base+0x28c4>
   17908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1790c:	sub	sp, sp, #28
   17910:	vldr	d7, [pc, #216]	; 179f0 <_start@@Base+0x2a48>
   17914:	ldr	r6, [sp, #64]	; 0x40
   17918:	mov	r5, r2
   1791c:	mov	r9, r0
   17920:	vstr	d7, [r6]
   17924:	mov	sl, r3
   17928:	bl	176ec <_start@@Base+0x2744>
   1792c:	cmp	r5, r0
   17930:	mov	r4, r0
   17934:	movne	r8, r0
   17938:	addne	fp, sp, #16
   1793c:	bne	17974 <_start@@Base+0x29cc>
   17940:	mov	r0, r4
   17944:	add	sp, sp, #28
   17948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1794c:	bl	2e10c <flatcc_json_printer_clear@@Base+0x800>
   17950:	eor	r1, r1, #-2147483648	; 0x80000000
   17954:	vldr	d7, [r6]
   17958:	vmov	d6, r0, r1
   1795c:	ldr	r3, [sp, #12]
   17960:	cmp	r3, #0
   17964:	vadd.f64	d7, d7, d6
   17968:	vstr	d7, [r6]
   1796c:	beq	17940 <_start@@Base+0x2998>
   17970:	mov	r8, r4
   17974:	mov	r7, sl
   17978:	add	r3, sp, #12
   1797c:	str	r3, [sp, #4]
   17980:	str	fp, [sp]
   17984:	add	r3, sp, #8
   17988:	ldr	r4, [r7]
   1798c:	mov	r2, r5
   17990:	mov	r1, r8
   17994:	mov	r0, r9
   17998:	blx	r4
   1799c:	cmp	r5, r0
   179a0:	mov	r4, r0
   179a4:	beq	17940 <_start@@Base+0x2998>
   179a8:	cmp	r8, r0
   179ac:	bne	179d8 <_start@@Base+0x2a30>
   179b0:	ldr	r3, [r7, #4]!
   179b4:	cmp	r3, #0
   179b8:	bne	17978 <_start@@Base+0x29d0>
   179bc:	mov	r1, r0
   179c0:	mov	r3, #23
   179c4:	mov	r2, r5
   179c8:	mov	r0, r9
   179cc:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   179d0:	mov	r4, r0
   179d4:	b	17940 <_start@@Base+0x2998>
   179d8:	ldr	r3, [sp, #8]
   179dc:	ldrd	r0, [sp, #16]
   179e0:	cmp	r3, #0
   179e4:	bne	1794c <_start@@Base+0x29a4>
   179e8:	bl	2e10c <flatcc_json_printer_clear@@Base+0x800>
   179ec:	b	17954 <_start@@Base+0x29ac>
	...
   179f8:	push	{r4, r5, r6, r7, r8, lr}
   179fc:	mov	r4, #0
   17a00:	sub	sp, sp, #24
   17a04:	mov	r5, #0
   17a08:	mov	lr, #0
   17a0c:	cmp	r1, r2
   17a10:	strd	r4, [sp, #16]
   17a14:	str	lr, [sp, #12]
   17a18:	strd	r4, [r3]
   17a1c:	moveq	r0, r1
   17a20:	beq	17a9c <_start@@Base+0x2af4>
   17a24:	mov	r6, r3
   17a28:	add	r3, sp, #16
   17a2c:	str	r3, [sp]
   17a30:	add	r3, sp, #12
   17a34:	mov	r4, r1
   17a38:	mov	r8, r0
   17a3c:	mov	r7, r2
   17a40:	bl	25724 <flatcc_json_parser_integer@@Base>
   17a44:	cmp	r4, r0
   17a48:	beq	17a9c <_start@@Base+0x2af4>
   17a4c:	ldr	r3, [sp, #12]
   17a50:	ldrd	r4, [sp, #16]
   17a54:	cmp	r3, #0
   17a58:	beq	17a7c <_start@@Base+0x2ad4>
   17a5c:	cmp	r5, #-2147483648	; 0x80000000
   17a60:	cmpeq	r4, #0
   17a64:	movhi	r3, #8
   17a68:	bhi	17a8c <_start@@Base+0x2ae4>
   17a6c:	rsbs	r4, r4, #0
   17a70:	rsc	r5, r5, #0
   17a74:	strd	r4, [r6]
   17a78:	b	17a9c <_start@@Base+0x2af4>
   17a7c:	cmp	r4, #0
   17a80:	sbcs	r3, r5, #0
   17a84:	bge	17a74 <_start@@Base+0x2acc>
   17a88:	mov	r3, #7
   17a8c:	mov	r1, r0
   17a90:	mov	r2, r7
   17a94:	mov	r0, r8
   17a98:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   17a9c:	add	sp, sp, #24
   17aa0:	pop	{r4, r5, r6, r7, r8, pc}
   17aa4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17aa8:	mov	r5, r1
   17aac:	mov	r7, r0
   17ab0:	mov	r1, r2
   17ab4:	mov	r0, r5
   17ab8:	mov	r4, r2
   17abc:	mov	r8, r3
   17ac0:	bl	150d0 <_start@@Base+0x128>
   17ac4:	add	r3, pc, #124	; 0x7c
   17ac8:	ldrd	r2, [r3]
   17acc:	ldr	r9, [sp, #32]
   17ad0:	ldr	sl, [sp, #36]	; 0x24
   17ad4:	cmp	r1, r3
   17ad8:	cmpeq	r0, r2
   17adc:	bne	17b3c <_start@@Base+0x2b94>
   17ae0:	add	r6, r5, #8
   17ae4:	mov	r1, r4
   17ae8:	mov	r0, r6
   17aec:	bl	150d0 <_start@@Base+0x128>
   17af0:	mov	r0, #0
   17af4:	and	r1, r1, #-16777216	; 0xff000000
   17af8:	cmp	r1, #1912602624	; 0x72000000
   17afc:	cmpeq	r0, #0
   17b00:	bne	17b3c <_start@@Base+0x2b94>
   17b04:	mov	r1, r4
   17b08:	mov	r2, #1
   17b0c:	mov	r0, r6
   17b10:	bl	16de0 <_start@@Base+0x1e38>
   17b14:	cmp	r6, r0
   17b18:	mov	r1, r0
   17b1c:	beq	17b3c <_start@@Base+0x2b94>
   17b20:	str	sl, [sp, #36]	; 0x24
   17b24:	str	r9, [sp, #32]
   17b28:	mov	r3, r8
   17b2c:	mov	r2, r4
   17b30:	mov	r0, r7
   17b34:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b38:	b	16188 <_start@@Base+0x11e0>
   17b3c:	mov	r0, r5
   17b40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17b44:	nop			; (mov r0, r0)
   17b48:	cmnvs	r3, r5, ror #8
   17b4c:	cmnmi	r8, #-2147483620	; 0x8000001c
   17b50:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   17b54:	mov	r4, r1
   17b58:	mov	r7, r0
   17b5c:	mov	r1, r2
   17b60:	mov	r0, r4
   17b64:	mov	r5, r2
   17b68:	mov	r6, r3
   17b6c:	bl	150d0 <_start@@Base+0x128>
   17b70:	add	r3, pc, #224	; 0xe0
   17b74:	ldrd	r2, [r3]
   17b78:	ldr	r9, [sp, #40]	; 0x28
   17b7c:	ldr	r8, [sp, #44]	; 0x2c
   17b80:	cmp	r1, r3
   17b84:	cmpeq	r0, r2
   17b88:	bne	17c14 <_start@@Base+0x2c6c>
   17b8c:	mov	r1, r5
   17b90:	add	r0, r4, #8
   17b94:	bl	150d0 <_start@@Base+0x128>
   17b98:	add	r3, pc, #192	; 0xc0
   17b9c:	ldrd	r2, [r3]
   17ba0:	cmp	r1, r3
   17ba4:	cmpeq	r0, r2
   17ba8:	beq	17bb8 <_start@@Base+0x2c10>
   17bac:	mov	r0, r4
   17bb0:	add	sp, sp, #8
   17bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bb8:	add	sl, r4, #16
   17bbc:	mov	r1, r5
   17bc0:	mov	r0, sl
   17bc4:	bl	150d0 <_start@@Base+0x128>
   17bc8:	mov	r0, #0
   17bcc:	and	r1, r1, #-16777216	; 0xff000000
   17bd0:	cmp	r1, #1694498816	; 0x65000000
   17bd4:	cmpeq	r0, #0
   17bd8:	bne	17bac <_start@@Base+0x2c04>
   17bdc:	mov	r2, r5
   17be0:	str	r8, [sp]
   17be4:	mov	r3, #1
   17be8:	mov	r1, sl
   17bec:	mov	r0, r7
   17bf0:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   17bf4:	cmp	sl, r0
   17bf8:	movne	r2, #1
   17bfc:	beq	17bac <_start@@Base+0x2c04>
   17c00:	mov	r3, #0
   17c04:	strd	r2, [r9]
   17c08:	mov	r3, #0
   17c0c:	str	r3, [r6]
   17c10:	b	17bb0 <_start@@Base+0x2c08>
   17c14:	add	r3, pc, #76	; 0x4c
   17c18:	ldrd	r2, [r3]
   17c1c:	mov	r0, #0
   17c20:	cmp	r1, r3
   17c24:	cmpeq	r0, r2
   17c28:	bne	17bac <_start@@Base+0x2c04>
   17c2c:	str	r8, [sp]
   17c30:	mov	r3, #4
   17c34:	mov	r2, r5
   17c38:	mov	r1, r4
   17c3c:	mov	r0, r7
   17c40:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   17c44:	cmp	r4, r0
   17c48:	beq	17bb0 <_start@@Base+0x2c08>
   17c4c:	mov	r2, #0
   17c50:	b	17c00 <_start@@Base+0x2c58>
   17c54:	nop			; (mov r0, r0)
   17c58:	rsbvc	r6, r5, #116, 28	; 0x740
   17c5c:	stmdbmi	lr!, {r0, r5, r6, ip, lr}^
   17c60:	cmnvc	r0, #-1073741800	; 0xc0000018
   17c64:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   17c68:	andeq	r0, r0, r0
   17c6c:	cdpmi	14, 4, cr4, cr15, cr5, {2}
   17c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c74:	mov	r5, r1
   17c78:	sub	sp, sp, #20
   17c7c:	mov	r1, r2
   17c80:	mov	r8, r0
   17c84:	mov	r0, r5
   17c88:	mov	r4, r2
   17c8c:	mov	r9, r3
   17c90:	bl	150d0 <_start@@Base+0x128>
   17c94:	add	r3, pc, #884	; 0x374
   17c98:	ldrd	r2, [r3]
   17c9c:	ldr	fp, [sp, #56]	; 0x38
   17ca0:	ldr	sl, [sp, #60]	; 0x3c
   17ca4:	cmp	r1, r3
   17ca8:	cmpeq	r0, r2
   17cac:	bhi	17d44 <_start@@Base+0x2d9c>
   17cb0:	add	r3, pc, #864	; 0x360
   17cb4:	ldrd	r2, [r3]
   17cb8:	cmp	r1, r3
   17cbc:	cmpeq	r0, r2
   17cc0:	bne	182d8 <_start@@Base+0x3330>
   17cc4:	mov	r1, r4
   17cc8:	add	r0, r5, #8
   17ccc:	bl	150d0 <_start@@Base+0x128>
   17cd0:	add	r3, pc, #840	; 0x348
   17cd4:	ldrd	r2, [r3]
   17cd8:	cmp	r1, r3
   17cdc:	cmpeq	r0, r2
   17ce0:	bne	182d8 <_start@@Base+0x3330>
   17ce4:	add	r6, r5, #16
   17ce8:	mov	r1, r4
   17cec:	mov	r0, r6
   17cf0:	bl	150d0 <_start@@Base+0x128>
   17cf4:	mov	r0, #0
   17cf8:	and	r1, r1, #-16777216	; 0xff000000
   17cfc:	cmp	r1, #1912602624	; 0x72000000
   17d00:	cmpeq	r0, #0
   17d04:	bne	182d8 <_start@@Base+0x3330>
   17d08:	mov	r1, r4
   17d0c:	mov	r2, #1
   17d10:	mov	r0, r6
   17d14:	bl	16de0 <_start@@Base+0x1e38>
   17d18:	cmp	r6, r0
   17d1c:	mov	r1, r0
   17d20:	beq	182d8 <_start@@Base+0x3330>
   17d24:	str	sl, [sp, #60]	; 0x3c
   17d28:	str	fp, [sp, #56]	; 0x38
   17d2c:	mov	r3, r9
   17d30:	mov	r2, r4
   17d34:	mov	r0, r8
   17d38:	add	sp, sp, #20
   17d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d40:	b	16188 <_start@@Base+0x11e0>
   17d44:	add	r3, pc, #732	; 0x2dc
   17d48:	ldrd	r2, [r3]
   17d4c:	cmp	r1, r3
   17d50:	cmpeq	r0, r2
   17d54:	bne	181cc <_start@@Base+0x3224>
   17d58:	mov	r1, r4
   17d5c:	add	r0, r5, #8
   17d60:	bl	150d0 <_start@@Base+0x128>
   17d64:	add	r3, pc, #708	; 0x2c4
   17d68:	ldrd	r2, [r3]
   17d6c:	cmp	r1, r3
   17d70:	cmpeq	r0, r2
   17d74:	bhi	17f0c <_start@@Base+0x2f64>
   17d78:	add	r3, pc, #696	; 0x2b8
   17d7c:	ldrd	r2, [r3]
   17d80:	cmp	r1, r3
   17d84:	cmpeq	r0, r2
   17d88:	bhi	17e10 <_start@@Base+0x2e68>
   17d8c:	add	r3, pc, #684	; 0x2ac
   17d90:	ldrd	r2, [r3]
   17d94:	cmp	r1, r3
   17d98:	cmpeq	r0, r2
   17d9c:	bne	182d8 <_start@@Base+0x3330>
   17da0:	add	r6, r5, #16
   17da4:	mov	r1, r4
   17da8:	mov	r0, r6
   17dac:	bl	150d0 <_start@@Base+0x128>
   17db0:	ldr	r3, [pc, #720]	; 18088 <_start@@Base+0x30e0>
   17db4:	mov	r2, #0
   17db8:	and	r1, r1, r3
   17dbc:	ldr	r3, [pc, #712]	; 1808c <_start@@Base+0x30e4>
   17dc0:	and	r0, r0, r2
   17dc4:	cmp	r1, r3
   17dc8:	mov	r2, #0
   17dcc:	cmpeq	r0, r2
   17dd0:	bne	182d8 <_start@@Base+0x3330>
   17dd4:	mov	r1, r4
   17dd8:	mov	r2, #2
   17ddc:	mov	r0, r6
   17de0:	bl	16de0 <_start@@Base+0x1e38>
   17de4:	cmp	r6, r0
   17de8:	mov	r1, r0
   17dec:	beq	182d8 <_start@@Base+0x3330>
   17df0:	str	sl, [sp, #60]	; 0x3c
   17df4:	str	fp, [sp, #56]	; 0x38
   17df8:	mov	r3, r9
   17dfc:	mov	r2, r4
   17e00:	mov	r0, r8
   17e04:	add	sp, sp, #20
   17e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e0c:	b	16444 <_start@@Base+0x149c>
   17e10:	add	r3, pc, #560	; 0x230
   17e14:	ldrd	r2, [r3]
   17e18:	cmp	r1, r3
   17e1c:	cmpeq	r0, r2
   17e20:	bne	17e88 <_start@@Base+0x2ee0>
   17e24:	add	r6, r5, #16
   17e28:	mov	r1, r4
   17e2c:	mov	r0, r6
   17e30:	bl	150d0 <_start@@Base+0x128>
   17e34:	add	r3, pc, #532	; 0x214
   17e38:	ldrd	r2, [r3]
   17e3c:	mov	r0, #0
   17e40:	cmp	r1, r3
   17e44:	cmpeq	r0, r2
   17e48:	bne	182d8 <_start@@Base+0x3330>
   17e4c:	mov	r1, r4
   17e50:	mov	r2, #4
   17e54:	mov	r0, r6
   17e58:	bl	16de0 <_start@@Base+0x1e38>
   17e5c:	cmp	r6, r0
   17e60:	mov	r1, r0
   17e64:	beq	182d8 <_start@@Base+0x3330>
   17e68:	str	sl, [sp, #60]	; 0x3c
   17e6c:	str	fp, [sp, #56]	; 0x38
   17e70:	mov	r3, r9
   17e74:	mov	r2, r4
   17e78:	mov	r0, r8
   17e7c:	add	sp, sp, #20
   17e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e84:	b	16af0 <_start@@Base+0x1b48>
   17e88:	add	r3, pc, #456	; 0x1c8
   17e8c:	ldrd	r2, [r3]
   17e90:	cmp	r1, r3
   17e94:	cmpeq	r0, r2
   17e98:	bne	182d8 <_start@@Base+0x3330>
   17e9c:	add	r6, r5, #16
   17ea0:	mov	r1, r4
   17ea4:	mov	r0, r6
   17ea8:	bl	150d0 <_start@@Base+0x128>
   17eac:	ldr	r3, [pc, #468]	; 18088 <_start@@Base+0x30e0>
   17eb0:	mov	r2, #0
   17eb4:	and	r1, r1, r3
   17eb8:	ldr	r3, [pc, #464]	; 18090 <_start@@Base+0x30e8>
   17ebc:	and	r0, r0, r2
   17ec0:	cmp	r1, r3
   17ec4:	mov	r2, #0
   17ec8:	cmpeq	r0, r2
   17ecc:	bne	182d8 <_start@@Base+0x3330>
   17ed0:	mov	r1, r4
   17ed4:	mov	r2, #2
   17ed8:	mov	r0, r6
   17edc:	bl	16de0 <_start@@Base+0x1e38>
   17ee0:	cmp	r6, r0
   17ee4:	mov	r1, r0
   17ee8:	beq	182d8 <_start@@Base+0x3330>
   17eec:	str	sl, [sp, #60]	; 0x3c
   17ef0:	str	fp, [sp, #56]	; 0x38
   17ef4:	mov	r3, r9
   17ef8:	mov	r2, r4
   17efc:	mov	r0, r8
   17f00:	add	sp, sp, #20
   17f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f08:	b	17b50 <_start@@Base+0x2ba8>
   17f0c:	add	r3, pc, #332	; 0x14c
   17f10:	ldrd	r2, [r3]
   17f14:	cmp	r1, r3
   17f18:	cmpeq	r0, r2
   17f1c:	bne	17f84 <_start@@Base+0x2fdc>
   17f20:	add	r6, r5, #16
   17f24:	mov	r1, r4
   17f28:	mov	r0, r6
   17f2c:	bl	150d0 <_start@@Base+0x128>
   17f30:	add	r3, pc, #304	; 0x130
   17f34:	ldrd	r2, [r3]
   17f38:	bic	r0, r0, #255	; 0xff
   17f3c:	cmp	r1, r3
   17f40:	cmpeq	r0, r2
   17f44:	bne	182d8 <_start@@Base+0x3330>
   17f48:	mov	r1, r4
   17f4c:	mov	r2, #7
   17f50:	mov	r0, r6
   17f54:	bl	16de0 <_start@@Base+0x1e38>
   17f58:	cmp	r6, r0
   17f5c:	mov	r1, r0
   17f60:	beq	182d8 <_start@@Base+0x3330>
   17f64:	str	sl, [sp, #60]	; 0x3c
   17f68:	str	fp, [sp, #56]	; 0x38
   17f6c:	mov	r3, r9
   17f70:	mov	r2, r4
   17f74:	mov	r0, r8
   17f78:	add	sp, sp, #20
   17f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f80:	b	16698 <_start@@Base+0x16f0>
   17f84:	add	r3, pc, #228	; 0xe4
   17f88:	ldrd	r2, [r3]
   17f8c:	cmp	r1, r3
   17f90:	cmpeq	r0, r2
   17f94:	bhi	18094 <_start@@Base+0x30ec>
   17f98:	add	r3, pc, #216	; 0xd8
   17f9c:	ldrd	r2, [r3]
   17fa0:	cmp	r1, r3
   17fa4:	cmpeq	r0, r2
   17fa8:	bne	182d8 <_start@@Base+0x3330>
   17fac:	add	r6, r5, #16
   17fb0:	mov	r1, r4
   17fb4:	mov	r0, r6
   17fb8:	bl	150d0 <_start@@Base+0x128>
   17fbc:	add	r3, pc, #188	; 0xbc
   17fc0:	ldrd	r2, [r3]
   17fc4:	bic	r0, r0, #255	; 0xff
   17fc8:	cmp	r1, r3
   17fcc:	cmpeq	r0, r2
   17fd0:	bne	182d8 <_start@@Base+0x3330>
   17fd4:	mov	r1, r4
   17fd8:	mov	r2, #7
   17fdc:	mov	r0, r6
   17fe0:	bl	16de0 <_start@@Base+0x1e38>
   17fe4:	cmp	r6, r0
   17fe8:	mov	r1, r0
   17fec:	beq	182d8 <_start@@Base+0x3330>
   17ff0:	str	sl, [sp, #60]	; 0x3c
   17ff4:	str	fp, [sp, #56]	; 0x38
   17ff8:	mov	r3, r9
   17ffc:	mov	r2, r4
   18000:	mov	r0, r8
   18004:	add	sp, sp, #20
   18008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1800c:	b	16804 <_start@@Base+0x185c>
   18010:	stclvs	14, cr2, [r5, #-272]!	; 0xfffffef0
   18014:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18018:	cmnvs	r3, lr, lsr #18
   1801c:			; <UNDEFINED> instruction: 0x46616e74
   18020:	cmnvs	r3, r5, ror #8
   18024:	cmnmi	r8, #-2147483620	; 0x8000001c
   18028:	stclvs	14, cr2, [r5, #-276]!	; 0xfffffeec
   1802c:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18030:	stclvs	14, cr2, [r5], #-412	; 0xfffffe64
   18034:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18038:	stclvs	14, cr2, [r5], #-264	; 0xfffffef8
   1803c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18040:	stclvs	14, cr2, [r5], #-260	; 0xfffffefc
   18044:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18048:	stclvs	14, cr2, [r5], #-268	; 0xfffffef4
   1804c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18050:	andeq	r0, r0, r0
   18054:	svcvs	0x006c6f72
   18058:	stclvs	14, cr2, [r5], #-280	; 0xfffffee8
   1805c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18060:	stclvs	14, cr2, [r5], #-416	; 0xfffffe60
   18064:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18068:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1806c:	ldrbvs	r5, [r8, #-3941]!	; 0xfffff09b
   18070:	stclvs	14, cr2, [r5], #-436	; 0xfffffe4c
   18074:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18078:	stclvs	14, cr2, [r5], #-420	; 0xfffffe5c
   1807c:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18080:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18084:	cdpvs	15, 7, cr5, cr4, cr5, {3}
   18088:			; <UNDEFINED> instruction: 0xffff0000
   1808c:	cdpvs	0, 7, cr0, cr9, cr0, {0}
   18090:	svcvs	0x006f0000
   18094:	add	r3, pc, #708	; 0x2c4
   18098:	ldrd	r2, [r3]
   1809c:	cmp	r1, r3
   180a0:	cmpeq	r0, r2
   180a4:	bne	182d8 <_start@@Base+0x3330>
   180a8:	add	r6, r5, #16
   180ac:	mov	r1, r4
   180b0:	mov	r0, r6
   180b4:	bl	150d0 <_start@@Base+0x128>
   180b8:	bic	r2, r0, #255	; 0xff
   180bc:	strd	r0, [sp, #8]
   180c0:	mov	r0, r2
   180c4:	add	r3, pc, #668	; 0x29c
   180c8:	ldrd	r2, [r3]
   180cc:	cmp	r1, r3
   180d0:	cmpeq	r0, r2
   180d4:	bne	18114 <_start@@Base+0x316c>
   180d8:	mov	r1, r4
   180dc:	mov	r2, #7
   180e0:	mov	r0, r6
   180e4:	bl	16de0 <_start@@Base+0x1e38>
   180e8:	cmp	r6, r0
   180ec:	mov	r1, r0
   180f0:	beq	182d8 <_start@@Base+0x3330>
   180f4:	str	sl, [sp, #60]	; 0x3c
   180f8:	str	fp, [sp, #56]	; 0x38
   180fc:	mov	r3, r9
   18100:	mov	r2, r4
   18104:	mov	r0, r8
   18108:	add	sp, sp, #20
   1810c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18110:	b	169bc <_start@@Base+0x1a14>
   18114:	add	r3, pc, #596	; 0x254
   18118:	ldrd	r2, [r3]
   1811c:	ldrd	r0, [sp, #8]
   18120:	cmp	r1, r3
   18124:	cmpeq	r0, r2
   18128:	bne	182d8 <_start@@Base+0x3330>
   1812c:	add	r6, r5, #24
   18130:	mov	r1, r4
   18134:	mov	r0, r6
   18138:	bl	150d0 <_start@@Base+0x128>
   1813c:	add	r3, pc, #564	; 0x234
   18140:	ldrd	r2, [r3]
   18144:	mov	r0, #0
   18148:	bic	r1, r1, #255	; 0xff
   1814c:	cmp	r1, r3
   18150:	cmpeq	r0, r2
   18154:	bne	182d8 <_start@@Base+0x3330>
   18158:	mov	r2, #3
   1815c:	mov	r1, r4
   18160:	mov	r0, r6
   18164:	bl	16de0 <_start@@Base+0x1e38>
   18168:	cmp	r6, r0
   1816c:	mov	r7, r0
   18170:	beq	182d8 <_start@@Base+0x3330>
   18174:	mov	r1, r4
   18178:	bl	150d0 <_start@@Base+0x128>
   1817c:	mov	r0, #0
   18180:	and	r1, r1, #-16777216	; 0xff000000
   18184:	cmp	r1, #2013265920	; 0x78000000
   18188:	cmpeq	r0, #0
   1818c:	bne	18354 <_start@@Base+0x33ac>
   18190:	str	sl, [sp]
   18194:	mov	r3, #1
   18198:	mov	r2, r4
   1819c:	mov	r1, r7
   181a0:	mov	r0, r8
   181a4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   181a8:	cmp	r7, r0
   181ac:	mov	r5, r0
   181b0:	beq	182d8 <_start@@Base+0x3330>
   181b4:	mov	r2, #0
   181b8:	mov	r3, #0
   181bc:	strd	r2, [fp]
   181c0:	mov	r3, #0
   181c4:	str	r3, [r9]
   181c8:	b	182d8 <_start@@Base+0x3330>
   181cc:	add	r3, pc, #428	; 0x1ac
   181d0:	ldrd	r2, [r3]
   181d4:	cmp	r1, r3
   181d8:	cmpeq	r0, r2
   181dc:	bne	182d8 <_start@@Base+0x3330>
   181e0:	mov	r1, r4
   181e4:	add	r0, r5, #8
   181e8:	bl	150d0 <_start@@Base+0x128>
   181ec:	add	r3, pc, #404	; 0x194
   181f0:	ldrd	r2, [r3]
   181f4:	cmp	r1, r3
   181f8:	cmpeq	r0, r2
   181fc:	bne	182d8 <_start@@Base+0x3330>
   18200:	mov	r1, r4
   18204:	add	r0, r5, #16
   18208:	bl	150d0 <_start@@Base+0x128>
   1820c:	add	r3, pc, #380	; 0x17c
   18210:	ldrd	r2, [r3]
   18214:	cmp	r1, r3
   18218:	cmpeq	r0, r2
   1821c:	bne	182d8 <_start@@Base+0x3330>
   18220:	mov	r1, r4
   18224:	add	r0, r5, #24
   18228:	bl	150d0 <_start@@Base+0x128>
   1822c:	add	r3, pc, #356	; 0x164
   18230:	ldrd	r2, [r3]
   18234:	cmp	r1, r3
   18238:	cmpeq	r0, r2
   1823c:	bne	182d8 <_start@@Base+0x3330>
   18240:	add	r6, r5, #32
   18244:	mov	r1, r4
   18248:	mov	r0, r6
   1824c:	bl	150d0 <_start@@Base+0x128>
   18250:	mov	r0, #0
   18254:	and	r1, r1, #-16777216	; 0xff000000
   18258:	cmp	r1, #1694498816	; 0x65000000
   1825c:	cmpeq	r0, #0
   18260:	bne	182d8 <_start@@Base+0x3330>
   18264:	mov	r2, #1
   18268:	mov	r1, r4
   1826c:	mov	r0, r6
   18270:	bl	16de0 <_start@@Base+0x1e38>
   18274:	cmp	r6, r0
   18278:	mov	r7, r0
   1827c:	beq	182d8 <_start@@Base+0x3330>
   18280:	mov	r1, r4
   18284:	bl	150d0 <_start@@Base+0x128>
   18288:	mov	r2, #0
   1828c:	bic	r3, r1, #255	; 0xff
   18290:	strd	r0, [sp, #8]
   18294:	mov	r0, r2
   18298:	mov	r1, r3
   1829c:	add	r3, pc, #252	; 0xfc
   182a0:	ldrd	r2, [r3]
   182a4:	cmp	r1, r3
   182a8:	cmpeq	r0, r2
   182ac:	bne	182e4 <_start@@Base+0x333c>
   182b0:	mov	r2, r4
   182b4:	str	sl, [sp]
   182b8:	mov	r3, #3
   182bc:	mov	r1, r7
   182c0:	mov	r0, r8
   182c4:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   182c8:	cmp	r7, r0
   182cc:	mov	r5, r0
   182d0:	movne	r2, #17
   182d4:	bne	181b8 <_start@@Base+0x3210>
   182d8:	mov	r0, r5
   182dc:	add	sp, sp, #20
   182e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182e4:	add	r3, pc, #188	; 0xbc
   182e8:	ldrd	r2, [r3]
   182ec:	ldrd	r0, [sp, #8]
   182f0:	cmp	r1, r3
   182f4:	cmpeq	r0, r2
   182f8:	bne	18354 <_start@@Base+0x33ac>
   182fc:	add	r6, r7, #8
   18300:	mov	r1, r4
   18304:	mov	r0, r6
   18308:	bl	150d0 <_start@@Base+0x128>
   1830c:	ldr	r3, [pc, #156]	; 183b0 <_start@@Base+0x3408>
   18310:	mov	r2, #0
   18314:	and	r1, r1, r3
   18318:	ldr	r3, [pc, #148]	; 183b4 <_start@@Base+0x340c>
   1831c:	and	r0, r0, r2
   18320:	cmp	r1, r3
   18324:	mov	r2, #0
   18328:	cmpeq	r0, r2
   1832c:	bne	18354 <_start@@Base+0x33ac>
   18330:	str	sl, [sp]
   18334:	mov	r3, #2
   18338:	mov	r2, r4
   1833c:	mov	r1, r6
   18340:	mov	r0, r8
   18344:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   18348:	cmp	r6, r0
   1834c:	mov	r5, r0
   18350:	bne	181b4 <_start@@Base+0x320c>
   18354:	mov	r5, r7
   18358:	b	182d8 <_start@@Base+0x3330>
   1835c:	nop			; (mov r0, r0)
   18360:	stclvs	14, cr2, [r5], #-440	; 0xfffffe48
   18364:	stmdavc	r1!, {r4, r5, r6, r8, sl, fp, sp, lr}^
   18368:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   1836c:	strbvs	r5, [r7, #-3941]!	; 0xfffff09b
   18370:	rsbsvc	r7, r4, r5, ror #18
   18374:	svcvs	0x0074656d
   18378:	andeq	r0, r0, r0
   1837c:	cdpvs	13, 7, cr6, cr5, cr0, {0}
   18380:	stclvs	14, cr2, [r5, #-316]!	; 0xfffffec4
   18384:	ldclmi	7, cr4, [r9, #-388]!	; 0xfffffe7c
   18388:	cdpmi	13, 6, cr6, cr1, cr5, {3}
   1838c:	strbtvc	r6, [r8], #-1394	; 0xfffffa8e
   18390:	strvs	r4, [lr, #-1650]!	; 0xfffff98e
   18394:	cmnpl	r0, #-1073741800	; 0xc0000018
   18398:	cmnvs	ip, #100, 10	; 0x19000000
   1839c:	svcvs	0x006d496e
   183a0:	andeq	r0, r0, r0
   183a4:	strbtmi	r6, [pc], -r0, lsl #30
   183a8:	strbvc	r6, [r4, #-1366]!	; 0xfffffaaa
   183ac:	stmdbmi	lr!, {r2, r3, r5, r6, r8, r9, sp, lr}^
   183b0:			; <UNDEFINED> instruction: 0xffff0000
   183b4:	cmnvs	ip, r0
   183b8:	cmp	r1, r2
   183bc:	push	{r4, r5, r6, lr}
   183c0:	mov	ip, r2
   183c4:	mov	r6, r0
   183c8:	beq	183d8 <_start@@Base+0x3430>
   183cc:	ldrb	r4, [r1]
   183d0:	cmp	r4, #123	; 0x7b
   183d4:	beq	183f4 <_start@@Base+0x344c>
   183d8:	mov	r2, #0
   183dc:	str	r2, [r3]
   183e0:	mov	r0, r6
   183e4:	mov	r3, #21
   183e8:	mov	r2, ip
   183ec:	pop	{r4, r5, r6, lr}
   183f0:	b	24b40 <flatcc_json_parser_set_error@@Base>
   183f4:	add	r1, r1, #1
   183f8:	mov	r4, r2
   183fc:	mov	r5, r3
   18400:	bl	16c38 <_start@@Base+0x1c90>
   18404:	cmp	r4, r0
   18408:	beq	18434 <_start@@Base+0x348c>
   1840c:	ldrb	r3, [r0]
   18410:	cmp	r3, #125	; 0x7d
   18414:	bne	18434 <_start@@Base+0x348c>
   18418:	mov	r3, #0
   1841c:	str	r3, [r5]
   18420:	mov	r2, r4
   18424:	add	r1, r0, #1
   18428:	mov	r0, r6
   1842c:	pop	{r4, r5, r6, lr}
   18430:	b	16c38 <_start@@Base+0x1c90>
   18434:	mov	r3, #1
   18438:	str	r3, [r5]
   1843c:	pop	{r4, r5, r6, pc}
   18440:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18444:	mov	r5, r1
   18448:	mov	r1, #0
   1844c:	mov	r4, r0
   18450:	str	r1, [r3]
   18454:	ldr	r0, [r0]
   18458:	mov	r6, r2
   1845c:	mov	r7, r3
   18460:	bl	2151c <flatcc_builder_start_table@@Base>
   18464:	cmp	r0, #0
   18468:	bne	184b0 <_start@@Base+0x3508>
   1846c:	add	r3, sp, #4
   18470:	mov	r2, r6
   18474:	mov	r1, r5
   18478:	mov	r0, r4
   1847c:	bl	183b8 <_start@@Base+0x3410>
   18480:	ldr	r3, [sp, #4]
   18484:	mov	r5, r0
   18488:	cmp	r3, #0
   1848c:	bne	184d4 <_start@@Base+0x352c>
   18490:	ldr	r3, [r4, #20]
   18494:	cmp	r3, #0
   18498:	bne	184b0 <_start@@Base+0x3508>
   1849c:	ldr	r0, [r4]
   184a0:	bl	21b58 <flatcc_builder_end_table@@Base>
   184a4:	cmp	r0, #0
   184a8:	str	r0, [r7]
   184ac:	bne	184c8 <_start@@Base+0x3520>
   184b0:	mov	r1, r5
   184b4:	mov	r3, #33	; 0x21
   184b8:	mov	r2, r6
   184bc:	mov	r0, r4
   184c0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   184c4:	mov	r5, r0
   184c8:	mov	r0, r5
   184cc:	add	sp, sp, #12
   184d0:	pop	{r4, r5, r6, r7, pc}
   184d4:	mov	r2, r6
   184d8:	mov	r1, r5
   184dc:	mov	r0, r4
   184e0:	bl	176c0 <_start@@Base+0x2718>
   184e4:	mov	r2, r6
   184e8:	mov	r1, r0
   184ec:	mov	r0, r4
   184f0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   184f4:	add	r3, sp, #4
   184f8:	mov	r2, r6
   184fc:	mov	r1, r0
   18500:	mov	r0, r4
   18504:	bl	16d28 <_start@@Base+0x1d80>
   18508:	b	18480 <_start@@Base+0x34d8>
   1850c:	sub	ip, r2, r1
   18510:	cmp	ip, r3
   18514:	ble	1857c <_start@@Base+0x35d4>
   18518:	ldrb	ip, [r1, r3]
   1851c:	cmp	ip, #34	; 0x22
   18520:	bne	1857c <_start@@Base+0x35d4>
   18524:	add	r3, r3, #1
   18528:	push	{r4, r5, r6, lr}
   1852c:	add	r1, r1, r3
   18530:	mov	r4, r2
   18534:	mov	r5, r0
   18538:	bl	16c38 <_start@@Base+0x1c90>
   1853c:	cmp	r4, r0
   18540:	mov	r1, r0
   18544:	beq	18568 <_start@@Base+0x35c0>
   18548:	ldrb	r3, [r0]
   1854c:	cmp	r3, #58	; 0x3a
   18550:	bne	18568 <_start@@Base+0x35c0>
   18554:	mov	r2, r4
   18558:	add	r1, r0, #1
   1855c:	mov	r0, r5
   18560:	pop	{r4, r5, r6, lr}
   18564:	b	16c38 <_start@@Base+0x1c90>
   18568:	mov	r2, r4
   1856c:	mov	r0, r5
   18570:	mov	r3, #4
   18574:	pop	{r4, r5, r6, lr}
   18578:	b	24b40 <flatcc_json_parser_set_error@@Base>
   1857c:	mov	r0, r1
   18580:	bx	lr
   18584:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18588:	mov	r9, r3
   1858c:	mov	r3, #0
   18590:	sub	sp, sp, #36	; 0x24
   18594:	mov	r8, r0
   18598:	mov	r5, r1
   1859c:	str	r3, [r9]
   185a0:	mov	r1, #10
   185a4:	ldr	r0, [r0]
   185a8:	mov	r4, r2
   185ac:	bl	2151c <flatcc_builder_start_table@@Base>
   185b0:	cmp	r0, #0
   185b4:	bne	18640 <_start@@Base+0x3698>
   185b8:	add	r3, sp, #28
   185bc:	str	r3, [sp]
   185c0:	mov	r2, r4
   185c4:	mov	r3, #5
   185c8:	mov	r1, r5
   185cc:	mov	r0, r8
   185d0:	bl	2631c <flatcc_json_parser_prepare_unions@@Base>
   185d4:	cmp	r4, r0
   185d8:	beq	18640 <_start@@Base+0x3698>
   185dc:	mov	r1, r5
   185e0:	add	r3, sp, #24
   185e4:	mov	r2, r4
   185e8:	mov	r0, r8
   185ec:	bl	183b8 <_start@@Base+0x3410>
   185f0:	add	fp, pc, #952	; 0x3b8
   185f4:	ldrd	sl, [fp]
   185f8:	mov	r5, r0
   185fc:	ldr	r3, [sp, #24]
   18600:	cmp	r3, #0
   18604:	bne	18664 <_start@@Base+0x36bc>
   18608:	ldr	r3, [r8, #20]
   1860c:	cmp	r3, #0
   18610:	bne	18640 <_start@@Base+0x3698>
   18614:	mov	r1, r5
   18618:	ldr	r3, [sp, #28]
   1861c:	mov	r2, r4
   18620:	mov	r0, r8
   18624:	bl	26384 <flatcc_json_parser_finalize_unions@@Base>
   18628:	mov	r5, r0
   1862c:	ldr	r0, [r8]
   18630:	bl	21b58 <flatcc_builder_end_table@@Base>
   18634:	cmp	r0, #0
   18638:	str	r0, [r9]
   1863c:	bne	18658 <_start@@Base+0x36b0>
   18640:	mov	r1, r5
   18644:	mov	r3, #33	; 0x21
   18648:	mov	r2, r4
   1864c:	mov	r0, r8
   18650:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   18654:	mov	r5, r0
   18658:	mov	r0, r5
   1865c:	add	sp, sp, #36	; 0x24
   18660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18664:	mov	r2, r4
   18668:	mov	r1, r5
   1866c:	mov	r0, r8
   18670:	bl	176c0 <_start@@Base+0x2718>
   18674:	mov	r1, r4
   18678:	mov	r5, r0
   1867c:	bl	150d0 <_start@@Base+0x128>
   18680:	add	r3, pc, #816	; 0x330
   18684:	ldrd	r2, [r3]
   18688:	cmp	r1, r3
   1868c:	cmpeq	r0, r2
   18690:	bhi	1887c <_start@@Base+0x38d4>
   18694:	add	r3, pc, #804	; 0x324
   18698:	ldrd	r2, [r3]
   1869c:	cmp	r1, r3
   186a0:	cmpeq	r0, r2
   186a4:	bne	18794 <_start@@Base+0x37ec>
   186a8:	add	r5, r5, #8
   186ac:	mov	r1, r4
   186b0:	mov	r0, r5
   186b4:	bl	150d0 <_start@@Base+0x128>
   186b8:	add	r3, pc, #776	; 0x308
   186bc:	ldrd	r2, [r3]
   186c0:	bic	r6, r0, #255	; 0xff
   186c4:	cmp	r1, r3
   186c8:	cmpeq	r6, r2
   186cc:	bne	18724 <_start@@Base+0x377c>
   186d0:	mov	r1, r5
   186d4:	mov	r3, #7
   186d8:	mov	r2, r4
   186dc:	mov	r0, r8
   186e0:	bl	1850c <_start@@Base+0x3564>
   186e4:	cmp	r5, r0
   186e8:	mov	r1, r0
   186ec:	beq	18c20 <_start@@Base+0x3c78>
   186f0:	ldr	r3, [pc, #768]	; 189f8 <_start@@Base+0x3a50>
   186f4:	str	r3, [sp, #12]
   186f8:	ldr	r3, [pc, #764]	; 189fc <_start@@Base+0x3a54>
   186fc:	str	r3, [sp, #8]
   18700:	ldr	r3, [sp, #28]
   18704:	str	r3, [sp, #4]
   18708:	mov	r3, #3
   1870c:	str	r3, [sp]
   18710:	mov	r3, #1
   18714:	mov	r2, r4
   18718:	mov	r0, r8
   1871c:	bl	264e8 <flatcc_json_parser_union_type@@Base>
   18720:	b	18924 <_start@@Base+0x397c>
   18724:	ldr	r3, [pc, #724]	; 18a00 <_start@@Base+0x3a58>
   18728:	mov	r2, #0
   1872c:	and	r1, r1, r3
   18730:	ldr	r3, [pc, #716]	; 18a04 <_start@@Base+0x3a5c>
   18734:	and	r0, r0, r2
   18738:	cmp	r1, r3
   1873c:	mov	r2, #0
   18740:	cmpeq	r0, r2
   18744:	bne	18c20 <_start@@Base+0x3c78>
   18748:	mov	r1, r5
   1874c:	mov	r3, #2
   18750:	mov	r2, r4
   18754:	mov	r0, r8
   18758:	bl	1850c <_start@@Base+0x3564>
   1875c:	cmp	r5, r0
   18760:	mov	r1, r0
   18764:	beq	18c20 <_start@@Base+0x3c78>
   18768:	ldr	r3, [pc, #648]	; 189f8 <_start@@Base+0x3a50>
   1876c:	str	r3, [sp, #8]
   18770:	ldr	r3, [sp, #28]
   18774:	str	r3, [sp, #4]
   18778:	mov	r3, #3
   1877c:	str	r3, [sp]
   18780:	mov	r3, #1
   18784:	mov	r2, r4
   18788:	mov	r0, r8
   1878c:	bl	263dc <flatcc_json_parser_union@@Base>
   18790:	b	18924 <_start@@Base+0x397c>
   18794:	add	r3, pc, #564	; 0x234
   18798:	ldrd	r2, [r3]
   1879c:	cmp	r1, r3
   187a0:	cmpeq	r0, r2
   187a4:	bne	18824 <_start@@Base+0x387c>
   187a8:	add	r5, r5, #8
   187ac:	mov	r1, r4
   187b0:	mov	r0, r5
   187b4:	bl	150d0 <_start@@Base+0x128>
   187b8:	ldr	r3, [pc, #576]	; 18a00 <_start@@Base+0x3a58>
   187bc:	mov	r2, #0
   187c0:	and	r1, r1, r3
   187c4:	ldr	r3, [pc, #572]	; 18a08 <_start@@Base+0x3a60>
   187c8:	and	r0, r0, r2
   187cc:	cmp	r1, r3
   187d0:	mov	r2, #0
   187d4:	cmpeq	r0, r2
   187d8:	bne	18c20 <_start@@Base+0x3c78>
   187dc:	mov	r1, r5
   187e0:	mov	r3, #2
   187e4:	mov	r2, r4
   187e8:	mov	r0, r8
   187ec:	bl	1850c <_start@@Base+0x3564>
   187f0:	cmp	r5, r0
   187f4:	mov	r1, r0
   187f8:	beq	18c20 <_start@@Base+0x3c78>
   187fc:	ldr	r3, [pc, #500]	; 189f8 <_start@@Base+0x3a50>
   18800:	str	r3, [sp, #12]
   18804:	ldr	r3, [pc, #512]	; 18a0c <_start@@Base+0x3a64>
   18808:	str	r3, [sp, #8]
   1880c:	ldr	r3, [sp, #28]
   18810:	str	r3, [sp, #4]
   18814:	mov	r3, #7
   18818:	str	r3, [sp]
   1881c:	mov	r3, #3
   18820:	b	18714 <_start@@Base+0x376c>
   18824:	add	r3, pc, #428	; 0x1ac
   18828:	ldrd	r2, [r3]
   1882c:	and	r0, r0, #-16777216	; 0xff000000
   18830:	cmp	r1, r3
   18834:	cmpeq	r0, r2
   18838:	bne	18c20 <_start@@Base+0x3c78>
   1883c:	mov	r1, r5
   18840:	mov	r3, #5
   18844:	mov	r2, r4
   18848:	mov	r0, r8
   1884c:	bl	1850c <_start@@Base+0x3564>
   18850:	cmp	r5, r0
   18854:	mov	r1, r0
   18858:	beq	18c20 <_start@@Base+0x3c78>
   1885c:	ldr	r3, [pc, #404]	; 189f8 <_start@@Base+0x3a50>
   18860:	str	r3, [sp, #8]
   18864:	ldr	r3, [sp, #28]
   18868:	str	r3, [sp, #4]
   1886c:	mov	r3, #7
   18870:	str	r3, [sp]
   18874:	mov	r3, #3
   18878:	b	18784 <_start@@Base+0x37dc>
   1887c:	add	r3, pc, #348	; 0x15c
   18880:	ldrd	r2, [r3]
   18884:	cmp	r1, r3
   18888:	cmpeq	r0, r2
   1888c:	bhi	18a1c <_start@@Base+0x3a74>
   18890:	add	r3, pc, #336	; 0x150
   18894:	ldrd	r2, [r3]
   18898:	cmp	r1, r3
   1889c:	cmpeq	r0, r2
   188a0:	bne	18c20 <_start@@Base+0x3c78>
   188a4:	add	r5, r5, #8
   188a8:	mov	r1, r4
   188ac:	mov	r0, r5
   188b0:	bl	150d0 <_start@@Base+0x128>
   188b4:	add	r3, pc, #308	; 0x134
   188b8:	ldrd	r2, [r3]
   188bc:	bic	r6, r0, #255	; 0xff
   188c0:	cmp	r1, r3
   188c4:	cmpeq	r6, r2
   188c8:	bne	18940 <_start@@Base+0x3998>
   188cc:	mov	r1, r5
   188d0:	mov	r3, #7
   188d4:	mov	r2, r4
   188d8:	mov	r0, r8
   188dc:	bl	1850c <_start@@Base+0x3564>
   188e0:	cmp	r5, r0
   188e4:	mov	r1, r0
   188e8:	beq	18c20 <_start@@Base+0x3c78>
   188ec:	ldr	r3, [pc, #284]	; 18a10 <_start@@Base+0x3a68>
   188f0:	mov	r2, r4
   188f4:	str	r3, [sp, #16]
   188f8:	ldr	r3, [pc, #248]	; 189f8 <_start@@Base+0x3a50>
   188fc:	mov	r0, r8
   18900:	str	r3, [sp, #12]
   18904:	ldr	r3, [pc, #264]	; 18a14 <_start@@Base+0x3a6c>
   18908:	str	r3, [sp, #8]
   1890c:	ldr	r3, [sp, #28]
   18910:	str	r3, [sp, #4]
   18914:	mov	r3, #9
   18918:	str	r3, [sp]
   1891c:	mov	r3, #4
   18920:	bl	26738 <flatcc_json_parser_union_type_vector@@Base>
   18924:	mov	r1, r0
   18928:	add	r3, sp, #24
   1892c:	mov	r2, r4
   18930:	mov	r0, r8
   18934:	bl	16d28 <_start@@Base+0x1d80>
   18938:	mov	r5, r0
   1893c:	b	185fc <_start@@Base+0x3654>
   18940:	ldr	r3, [pc, #184]	; 18a00 <_start@@Base+0x3a58>
   18944:	mov	r2, #0
   18948:	and	r1, r1, r3
   1894c:	ldr	r3, [pc, #196]	; 18a18 <_start@@Base+0x3a70>
   18950:	and	r0, r0, r2
   18954:	cmp	r1, r3
   18958:	mov	r2, #0
   1895c:	cmpeq	r0, r2
   18960:	bne	18c20 <_start@@Base+0x3c78>
   18964:	mov	r1, r5
   18968:	mov	r3, #2
   1896c:	mov	r2, r4
   18970:	mov	r0, r8
   18974:	bl	1850c <_start@@Base+0x3564>
   18978:	cmp	r5, r0
   1897c:	mov	r1, r0
   18980:	beq	18c20 <_start@@Base+0x3c78>
   18984:	ldr	r3, [pc, #108]	; 189f8 <_start@@Base+0x3a50>
   18988:	mov	r2, r4
   1898c:	str	r3, [sp, #8]
   18990:	ldr	r3, [sp, #28]
   18994:	mov	r0, r8
   18998:	str	r3, [sp, #4]
   1899c:	mov	r3, #9
   189a0:	str	r3, [sp]
   189a4:	mov	r3, #4
   189a8:	bl	2666c <flatcc_json_parser_union_vector@@Base>
   189ac:	b	18924 <_start@@Base+0x397c>
   189b0:	svcpl	0x00636861
   189b4:			; <UNDEFINED> instruction: 0x6d61696e
   189b8:	cmnvs	r3, r4, ror #8
   189bc:	cmnvs	r8, #-2147483620	; 0x8000001c
   189c0:	strbvs	r6, [pc, -r9, ror #28]!
   189c4:	cmnvs	lr, r1, ror #8
   189c8:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   189cc:	cmnvc	r4, #116, 30	; 0x1d0
   189d0:	svcvs	0x005f7479
   189d4:	cmnvs	r1, #6464	; 0x1940
   189d8:	svcvs	0x00000000
   189dc:	cmnvs	r1, #6464	; 0x1940
   189e0:	svcpl	0x00636860
   189e4:			; <UNDEFINED> instruction: 0x6d61696e
   189e8:	cmnvs	r3, r5, ror #8
   189ec:	cmnvs	r8, #-2147483620	; 0x8000001c
   189f0:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   189f4:	rsbsvc	r5, r3, #116, 30	; 0x1d0
   189f8:	andeq	r9, r1, r4, ror r9
   189fc:	andeq	r4, r4, r8, ror r0
   18a00:			; <UNDEFINED> instruction: 0xffff0000
   18a04:	cmnvc	r4, #0
   18a08:	rsbvc	r0, r5, r0
   18a0c:	andeq	r4, r4, r8, lsl #1
   18a10:	andeq	r5, r1, r8, lsl r2
   18a14:	muleq	r4, r8, r0
   18a18:	rsbsvc	r0, r3, #0
   18a1c:	cmp	r1, fp
   18a20:	cmpeq	r0, sl
   18a24:	bne	18b38 <_start@@Base+0x3b90>
   18a28:	add	r6, r5, #8
   18a2c:	mov	r1, r4
   18a30:	mov	r0, r6
   18a34:	bl	150d0 <_start@@Base+0x128>
   18a38:	add	r3, pc, #496	; 0x1f0
   18a3c:	ldrd	r2, [r3]
   18a40:	cmp	r1, r3
   18a44:	cmpeq	r0, r2
   18a48:	bne	18ac0 <_start@@Base+0x3b18>
   18a4c:	add	r5, r5, #16
   18a50:	mov	r1, r4
   18a54:	mov	r0, r5
   18a58:	bl	150d0 <_start@@Base+0x128>
   18a5c:	add	r3, pc, #468	; 0x1d4
   18a60:	ldrd	r2, [r3]
   18a64:	mov	r0, #0
   18a68:	bic	r1, r1, #255	; 0xff
   18a6c:	cmp	r1, r3
   18a70:	cmpeq	r0, r2
   18a74:	bne	18c20 <_start@@Base+0x3c78>
   18a78:	mov	r1, r5
   18a7c:	mov	r3, #3
   18a80:	mov	r2, r4
   18a84:	mov	r0, r8
   18a88:	bl	1850c <_start@@Base+0x3564>
   18a8c:	cmp	r5, r0
   18a90:	mov	r1, r0
   18a94:	beq	18c20 <_start@@Base+0x3c78>
   18a98:	ldr	r3, [pc, #440]	; 18c58 <_start@@Base+0x3cb0>
   18a9c:	str	r3, [sp, #12]
   18aa0:	ldr	r3, [pc, #436]	; 18c5c <_start@@Base+0x3cb4>
   18aa4:	str	r3, [sp, #8]
   18aa8:	ldr	r3, [sp, #28]
   18aac:	str	r3, [sp, #4]
   18ab0:	mov	r3, #1
   18ab4:	str	r3, [sp]
   18ab8:	mov	r3, #0
   18abc:	b	18714 <_start@@Base+0x376c>
   18ac0:	ldr	r2, [pc, #408]	; 18c60 <_start@@Base+0x3cb8>
   18ac4:	mvn	r3, #0
   18ac8:	and	r0, r0, r2
   18acc:	and	r1, r1, r3
   18ad0:	add	r3, pc, #360	; 0x168
   18ad4:	ldrd	r2, [r3]
   18ad8:	cmp	r1, r3
   18adc:	cmpeq	r0, r2
   18ae0:	bne	18b24 <_start@@Base+0x3b7c>
   18ae4:	mov	r1, r6
   18ae8:	mov	r3, #6
   18aec:	mov	r2, r4
   18af0:	mov	r0, r8
   18af4:	bl	1850c <_start@@Base+0x3564>
   18af8:	cmp	r6, r0
   18afc:	mov	r1, r0
   18b00:	beq	18b24 <_start@@Base+0x3b7c>
   18b04:	ldr	r3, [pc, #332]	; 18c58 <_start@@Base+0x3cb0>
   18b08:	str	r3, [sp, #8]
   18b0c:	ldr	r3, [sp, #28]
   18b10:	str	r3, [sp, #4]
   18b14:	mov	r3, #1
   18b18:	str	r3, [sp]
   18b1c:	mov	r3, #0
   18b20:	b	18784 <_start@@Base+0x37dc>
   18b24:	mov	r2, r4
   18b28:	mov	r1, r6
   18b2c:	mov	r0, r8
   18b30:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   18b34:	b	18924 <_start@@Base+0x397c>
   18b38:	add	r3, pc, #264	; 0x108
   18b3c:	ldrd	r2, [r3]
   18b40:	cmp	r1, r3
   18b44:	cmpeq	r0, r2
   18b48:	bne	18c20 <_start@@Base+0x3c78>
   18b4c:	add	r5, r5, #8
   18b50:	mov	r1, r4
   18b54:	mov	r0, r5
   18b58:	bl	150d0 <_start@@Base+0x128>
   18b5c:	ldr	r2, [pc, #252]	; 18c60 <_start@@Base+0x3cb8>
   18b60:	mvn	r3, #0
   18b64:	and	r2, r2, r0
   18b68:	and	r3, r3, r1
   18b6c:	mov	r7, r1
   18b70:	add	r1, pc, #216	; 0xd8
   18b74:	ldrd	r0, [r1]
   18b78:	cmp	r3, r1
   18b7c:	cmpeq	r2, r0
   18b80:	bne	18bcc <_start@@Base+0x3c24>
   18b84:	mov	r1, r5
   18b88:	mov	r3, #6
   18b8c:	mov	r2, r4
   18b90:	mov	r0, r8
   18b94:	bl	1850c <_start@@Base+0x3564>
   18b98:	cmp	r5, r0
   18b9c:	mov	r1, r0
   18ba0:	beq	18c20 <_start@@Base+0x3c78>
   18ba4:	ldr	r3, [pc, #172]	; 18c58 <_start@@Base+0x3cb0>
   18ba8:	str	r3, [sp, #12]
   18bac:	ldr	r3, [pc, #176]	; 18c64 <_start@@Base+0x3cbc>
   18bb0:	str	r3, [sp, #8]
   18bb4:	ldr	r3, [sp, #28]
   18bb8:	str	r3, [sp, #4]
   18bbc:	mov	r3, #5
   18bc0:	str	r3, [sp]
   18bc4:	mov	r3, #2
   18bc8:	b	18714 <_start@@Base+0x376c>
   18bcc:	and	r7, r7, #-16777216	; 0xff000000
   18bd0:	mov	r6, #0
   18bd4:	cmp	r7, #1795162112	; 0x6b000000
   18bd8:	cmpeq	r6, #0
   18bdc:	bne	18c20 <_start@@Base+0x3c78>
   18be0:	mov	r1, r5
   18be4:	mov	r3, #1
   18be8:	mov	r2, r4
   18bec:	mov	r0, r8
   18bf0:	bl	1850c <_start@@Base+0x3564>
   18bf4:	cmp	r5, r0
   18bf8:	mov	r1, r0
   18bfc:	beq	18c20 <_start@@Base+0x3c78>
   18c00:	ldr	r3, [pc, #80]	; 18c58 <_start@@Base+0x3cb0>
   18c04:	str	r3, [sp, #8]
   18c08:	ldr	r3, [sp, #28]
   18c0c:	str	r3, [sp, #4]
   18c10:	mov	r3, #5
   18c14:	str	r3, [sp]
   18c18:	mov	r3, #2
   18c1c:	b	18784 <_start@@Base+0x37dc>
   18c20:	mov	r2, r4
   18c24:	mov	r1, r5
   18c28:	b	18b2c <_start@@Base+0x3b84>
   18c2c:	nop			; (mov r0, r0)
   18c30:	ldrbvs	r5, [r2, #-3956]!	; 0xfffff08c
   18c34:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   18c38:	andeq	r0, r0, r0
   18c3c:	ldmdbvc	r0!, {r8, sl, sp, lr}^
   18c40:	ldrbvs	r0, [r2, #-0]!
   18c44:	rsbvc	r6, r1, #116, 6	; 0xd0000001
   18c48:	svcpl	0x006b6963
   18c4c:	cmnvc	r9, #1694498816	; 0x65000000
   18c50:	rsbvc	r0, r5, r0
   18c54:	blvs	17f5e40 <__bss_end__@@Base+0x17b1a7c>
   18c58:	andeq	r9, r1, r4, ror r9
   18c5c:	andeq	r4, r4, r8, lsr #1
   18c60:			; <UNDEFINED> instruction: 0xffff0000
   18c64:	strheq	r4, [r4], -r8
   18c68:	cmp	r1, r2
   18c6c:	push	{r4, r5, r6, lr}
   18c70:	mov	ip, r2
   18c74:	mov	r6, r0
   18c78:	beq	18c88 <_start@@Base+0x3ce0>
   18c7c:	ldrb	r4, [r1]
   18c80:	cmp	r4, #91	; 0x5b
   18c84:	beq	18ca4 <_start@@Base+0x3cfc>
   18c88:	mov	r2, #0
   18c8c:	str	r2, [r3]
   18c90:	mov	r0, r6
   18c94:	mov	r3, #22
   18c98:	mov	r2, ip
   18c9c:	pop	{r4, r5, r6, lr}
   18ca0:	b	24b40 <flatcc_json_parser_set_error@@Base>
   18ca4:	add	r1, r1, #1
   18ca8:	mov	r4, r2
   18cac:	mov	r5, r3
   18cb0:	bl	16c38 <_start@@Base+0x1c90>
   18cb4:	cmp	r4, r0
   18cb8:	beq	18ce4 <_start@@Base+0x3d3c>
   18cbc:	ldrb	r3, [r0]
   18cc0:	cmp	r3, #93	; 0x5d
   18cc4:	bne	18ce4 <_start@@Base+0x3d3c>
   18cc8:	mov	r3, #0
   18ccc:	str	r3, [r5]
   18cd0:	mov	r2, r4
   18cd4:	add	r1, r0, #1
   18cd8:	mov	r0, r6
   18cdc:	pop	{r4, r5, r6, lr}
   18ce0:	b	16c38 <_start@@Base+0x1c90>
   18ce4:	mov	r3, #1
   18ce8:	str	r3, [r5]
   18cec:	pop	{r4, r5, r6, pc}
   18cf0:	push	{r4, r5, r6, r7, lr}
   18cf4:	mov	r6, #0
   18cf8:	sub	sp, sp, #28
   18cfc:	mov	r7, #0
   18d00:	mov	r5, #0
   18d04:	cmp	r1, r2
   18d08:	strd	r6, [sp, #16]
   18d0c:	str	r5, [sp, #12]
   18d10:	strd	r6, [r3]
   18d14:	moveq	r0, r1
   18d18:	beq	18d64 <_start@@Base+0x3dbc>
   18d1c:	mov	r6, r3
   18d20:	add	r3, sp, #16
   18d24:	str	r3, [sp]
   18d28:	add	r3, sp, #12
   18d2c:	mov	r7, r1
   18d30:	mov	r4, r0
   18d34:	mov	r5, r2
   18d38:	bl	25724 <flatcc_json_parser_integer@@Base>
   18d3c:	cmp	r7, r0
   18d40:	beq	18d64 <_start@@Base+0x3dbc>
   18d44:	ldr	r3, [sp, #12]
   18d48:	cmp	r3, #0
   18d4c:	beq	18d6c <_start@@Base+0x3dc4>
   18d50:	mov	r1, r0
   18d54:	mov	r3, #8
   18d58:	mov	r2, r5
   18d5c:	mov	r0, r4
   18d60:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   18d64:	add	sp, sp, #28
   18d68:	pop	{r4, r5, r6, r7, pc}
   18d6c:	ldrd	r2, [sp, #16]
   18d70:	strd	r2, [r6]
   18d74:	b	18d64 <_start@@Base+0x3dbc>
   18d78:	mov	r0, #0
   18d7c:	bx	lr
   18d80:	bx	lr
   18d84:	push	{r4, r5, r6, r7, r8, r9, lr}
   18d88:	mov	r6, #0
   18d8c:	sub	sp, sp, #28
   18d90:	mov	r7, #0
   18d94:	mov	lr, #0
   18d98:	cmp	r1, r2
   18d9c:	strd	r6, [sp, #16]
   18da0:	str	lr, [sp, #12]
   18da4:	str	lr, [r3]
   18da8:	moveq	r0, r1
   18dac:	beq	18e18 <_start@@Base+0x3e70>
   18db0:	mov	r6, r3
   18db4:	add	r3, sp, #16
   18db8:	str	r3, [sp]
   18dbc:	add	r3, sp, #12
   18dc0:	mov	r7, r1
   18dc4:	mov	r5, r0
   18dc8:	mov	r4, r2
   18dcc:	bl	25724 <flatcc_json_parser_integer@@Base>
   18dd0:	cmp	r7, r0
   18dd4:	beq	18e18 <_start@@Base+0x3e70>
   18dd8:	ldr	r3, [sp, #12]
   18ddc:	cmp	r3, #0
   18de0:	movne	r3, #8
   18de4:	bne	18e08 <_start@@Base+0x3e60>
   18de8:	ldrd	r2, [sp, #16]
   18dec:	mov	r9, #0
   18df0:	mvn	r8, #0
   18df4:	cmp	r3, r9
   18df8:	cmpeq	r2, r8
   18dfc:	strls	r2, [r6]
   18e00:	bls	18e18 <_start@@Base+0x3e70>
   18e04:	mov	r3, #7
   18e08:	mov	r1, r0
   18e0c:	mov	r2, r4
   18e10:	mov	r0, r5
   18e14:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   18e18:	add	sp, sp, #28
   18e1c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18e20:	push	{r4, r5, r6, r7, r8, r9, lr}
   18e24:	mov	r6, #0
   18e28:	sub	sp, sp, #28
   18e2c:	mov	r7, #0
   18e30:	mov	lr, #0
   18e34:	cmp	r1, r2
   18e38:	strd	r6, [sp, #16]
   18e3c:	str	lr, [sp, #12]
   18e40:	strh	lr, [r3]
   18e44:	moveq	r0, r1
   18e48:	beq	18eb4 <_start@@Base+0x3f0c>
   18e4c:	mov	r6, r3
   18e50:	add	r3, sp, #16
   18e54:	str	r3, [sp]
   18e58:	add	r3, sp, #12
   18e5c:	mov	r7, r1
   18e60:	mov	r5, r0
   18e64:	mov	r4, r2
   18e68:	bl	25724 <flatcc_json_parser_integer@@Base>
   18e6c:	cmp	r7, r0
   18e70:	beq	18eb4 <_start@@Base+0x3f0c>
   18e74:	ldr	r3, [sp, #12]
   18e78:	cmp	r3, #0
   18e7c:	movne	r3, #8
   18e80:	bne	18ea4 <_start@@Base+0x3efc>
   18e84:	ldrd	r2, [sp, #16]
   18e88:	ldr	r8, [pc, #44]	; 18ebc <_start@@Base+0x3f14>
   18e8c:	mov	r9, #0
   18e90:	cmp	r3, r9
   18e94:	cmpeq	r2, r8
   18e98:	strhls	r2, [r6]
   18e9c:	bls	18eb4 <_start@@Base+0x3f0c>
   18ea0:	mov	r3, #7
   18ea4:	mov	r1, r0
   18ea8:	mov	r2, r4
   18eac:	mov	r0, r5
   18eb0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   18eb4:	add	sp, sp, #28
   18eb8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   18ebc:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   18ec0:	push	{r4, r5, r6, r7, lr}
   18ec4:	mov	r6, #0
   18ec8:	sub	sp, sp, #28
   18ecc:	mov	r7, #0
   18ed0:	mov	lr, #0
   18ed4:	cmp	r1, r2
   18ed8:	strd	r6, [sp, #16]
   18edc:	str	lr, [sp, #12]
   18ee0:	strb	lr, [r3]
   18ee4:	moveq	r0, r1
   18ee8:	beq	18f4c <_start@@Base+0x3fa4>
   18eec:	mov	r6, r3
   18ef0:	add	r3, sp, #16
   18ef4:	str	r3, [sp]
   18ef8:	add	r3, sp, #12
   18efc:	mov	r7, r1
   18f00:	mov	r5, r0
   18f04:	mov	r4, r2
   18f08:	bl	25724 <flatcc_json_parser_integer@@Base>
   18f0c:	cmp	r7, r0
   18f10:	beq	18f4c <_start@@Base+0x3fa4>
   18f14:	ldr	r3, [sp, #12]
   18f18:	cmp	r3, #0
   18f1c:	movne	r3, #8
   18f20:	bne	18f3c <_start@@Base+0x3f94>
   18f24:	ldrd	r2, [sp, #16]
   18f28:	cmp	r3, #0
   18f2c:	cmpeq	r2, #255	; 0xff
   18f30:	strbls	r2, [r6]
   18f34:	bls	18f4c <_start@@Base+0x3fa4>
   18f38:	mov	r3, #7
   18f3c:	mov	r1, r0
   18f40:	mov	r2, r4
   18f44:	mov	r0, r5
   18f48:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   18f4c:	add	sp, sp, #28
   18f50:	pop	{r4, r5, r6, r7, pc}
   18f54:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   18f58:	sub	r7, r2, r1
   18f5c:	cmp	r7, #3
   18f60:	mov	r8, r0
   18f64:	mov	r4, r1
   18f68:	mov	r6, r2
   18f6c:	mov	r5, r3
   18f70:	ble	18fc0 <_start@@Base+0x4018>
   18f74:	mov	r2, #4
   18f78:	ldr	r1, [pc, #108]	; 18fec <_start@@Base+0x4044>
   18f7c:	mov	r0, r4
   18f80:	bl	1457c <memcmp@plt>
   18f84:	cmp	r0, #0
   18f88:	moveq	r3, #1
   18f8c:	strbeq	r3, [r5]
   18f90:	addeq	r0, r4, #4
   18f94:	beq	18fe4 <_start@@Base+0x403c>
   18f98:	cmp	r7, #4
   18f9c:	beq	18fc0 <_start@@Base+0x4018>
   18fa0:	mov	r2, #5
   18fa4:	ldr	r1, [pc, #68]	; 18ff0 <_start@@Base+0x4048>
   18fa8:	mov	r0, r4
   18fac:	bl	1457c <memcmp@plt>
   18fb0:	cmp	r0, #0
   18fb4:	strbeq	r0, [r5]
   18fb8:	addeq	r0, r4, #5
   18fbc:	beq	18fe4 <_start@@Base+0x403c>
   18fc0:	add	r3, sp, #7
   18fc4:	mov	r2, r6
   18fc8:	mov	r1, r4
   18fcc:	mov	r0, r8
   18fd0:	bl	18ec0 <_start@@Base+0x3f18>
   18fd4:	ldrb	r3, [sp, #7]
   18fd8:	adds	r3, r3, #0
   18fdc:	movne	r3, #1
   18fe0:	strb	r3, [r5]
   18fe4:	add	sp, sp, #8
   18fe8:	pop	{r4, r5, r6, r7, r8, pc}
   18fec:	andeq	lr, r2, r6, ror #18
   18ff0:	andeq	lr, r2, fp, ror #18
   18ff4:	push	{r4, r5, r6, r7, r8, lr}
   18ff8:	mov	r4, #0
   18ffc:	sub	sp, sp, #24
   19000:	mov	r5, #0
   19004:	cmp	r1, r2
   19008:	strd	r4, [sp, #16]
   1900c:	str	r4, [sp, #12]
   19010:	str	r4, [r3]
   19014:	moveq	r0, r1
   19018:	beq	19078 <_start@@Base+0x40d0>
   1901c:	mov	r6, r3
   19020:	add	r3, sp, #16
   19024:	str	r3, [sp]
   19028:	add	r3, sp, #12
   1902c:	mov	r4, r1
   19030:	mov	r8, r0
   19034:	mov	r7, r2
   19038:	bl	25724 <flatcc_json_parser_integer@@Base>
   1903c:	cmp	r4, r0
   19040:	beq	19078 <_start@@Base+0x40d0>
   19044:	ldr	r3, [sp, #12]
   19048:	ldrd	r4, [sp, #16]
   1904c:	cmp	r3, #0
   19050:	beq	19080 <_start@@Base+0x40d8>
   19054:	cmp	r5, #0
   19058:	cmpeq	r4, #-2147483648	; 0x80000000
   1905c:	movhi	r3, #8
   19060:	rsbls	r4, r4, #0
   19064:	bls	19098 <_start@@Base+0x40f0>
   19068:	mov	r1, r0
   1906c:	mov	r2, r7
   19070:	mov	r0, r8
   19074:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19078:	add	sp, sp, #24
   1907c:	pop	{r4, r5, r6, r7, r8, pc}
   19080:	mov	r3, #0
   19084:	mvn	r2, #-2147483648	; 0x80000000
   19088:	cmp	r5, r3
   1908c:	cmpeq	r4, r2
   19090:	movhi	r3, #7
   19094:	bhi	19068 <_start@@Base+0x40c0>
   19098:	str	r4, [r6]
   1909c:	b	19078 <_start@@Base+0x40d0>
   190a0:	push	{r4, r5, r6, r7, r8, lr}
   190a4:	mov	r4, #0
   190a8:	sub	sp, sp, #24
   190ac:	mov	r5, #0
   190b0:	cmp	r1, r2
   190b4:	strd	r4, [sp, #16]
   190b8:	str	r4, [sp, #12]
   190bc:	strh	r4, [r3]
   190c0:	moveq	r0, r1
   190c4:	beq	19124 <_start@@Base+0x417c>
   190c8:	mov	r6, r3
   190cc:	add	r3, sp, #16
   190d0:	str	r3, [sp]
   190d4:	add	r3, sp, #12
   190d8:	mov	r4, r1
   190dc:	mov	r8, r0
   190e0:	mov	r7, r2
   190e4:	bl	25724 <flatcc_json_parser_integer@@Base>
   190e8:	cmp	r4, r0
   190ec:	beq	19124 <_start@@Base+0x417c>
   190f0:	ldr	r3, [sp, #12]
   190f4:	ldrd	r4, [sp, #16]
   190f8:	cmp	r3, #0
   190fc:	beq	1912c <_start@@Base+0x4184>
   19100:	cmp	r5, #0
   19104:	cmpeq	r4, #32768	; 0x8000
   19108:	movhi	r3, #8
   1910c:	rsbls	r4, r4, #0
   19110:	bls	19144 <_start@@Base+0x419c>
   19114:	mov	r1, r0
   19118:	mov	r2, r7
   1911c:	mov	r0, r8
   19120:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19124:	add	sp, sp, #24
   19128:	pop	{r4, r5, r6, r7, r8, pc}
   1912c:	ldr	r2, [pc, #24]	; 1914c <_start@@Base+0x41a4>
   19130:	mov	r3, #0
   19134:	cmp	r5, r3
   19138:	cmpeq	r4, r2
   1913c:	movhi	r3, #7
   19140:	bhi	19114 <_start@@Base+0x416c>
   19144:	strh	r4, [r6]
   19148:	b	19124 <_start@@Base+0x417c>
   1914c:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   19150:	push	{r4, r5, r6, r7, r8, lr}
   19154:	mov	r4, #0
   19158:	sub	sp, sp, #24
   1915c:	mov	r5, #0
   19160:	mov	lr, #0
   19164:	cmp	r1, r2
   19168:	strd	r4, [sp, #16]
   1916c:	str	lr, [sp, #12]
   19170:	strb	lr, [r3]
   19174:	moveq	r0, r1
   19178:	beq	191d8 <_start@@Base+0x4230>
   1917c:	mov	r6, r3
   19180:	add	r3, sp, #16
   19184:	str	r3, [sp]
   19188:	add	r3, sp, #12
   1918c:	mov	r4, r1
   19190:	mov	r8, r0
   19194:	mov	r7, r2
   19198:	bl	25724 <flatcc_json_parser_integer@@Base>
   1919c:	cmp	r4, r0
   191a0:	beq	191d8 <_start@@Base+0x4230>
   191a4:	ldr	r3, [sp, #12]
   191a8:	ldrd	r4, [sp, #16]
   191ac:	cmp	r3, #0
   191b0:	beq	191e0 <_start@@Base+0x4238>
   191b4:	cmp	r5, #0
   191b8:	cmpeq	r4, #128	; 0x80
   191bc:	movhi	r3, #8
   191c0:	rsbls	r4, r4, #0
   191c4:	bls	191f0 <_start@@Base+0x4248>
   191c8:	mov	r1, r0
   191cc:	mov	r2, r7
   191d0:	mov	r0, r8
   191d4:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   191d8:	add	sp, sp, #24
   191dc:	pop	{r4, r5, r6, r7, r8, pc}
   191e0:	cmp	r5, #0
   191e4:	cmpeq	r4, #127	; 0x7f
   191e8:	movhi	r3, #7
   191ec:	bhi	191c8 <_start@@Base+0x4220>
   191f0:	strb	r4, [r6]
   191f4:	b	191d8 <_start@@Base+0x4230>
   191f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191fc:	sub	sp, sp, #28
   19200:	mov	sl, r3
   19204:	ldr	r3, [sp, #64]	; 0x40
   19208:	mov	r7, #0
   1920c:	mov	r4, r2
   19210:	strb	r7, [r3]
   19214:	mov	r8, r0
   19218:	bl	176ec <_start@@Base+0x2744>
   1921c:	cmp	r4, r0
   19220:	movne	r6, r0
   19224:	addne	fp, sp, #16
   19228:	bne	1923c <_start@@Base+0x4294>
   1922c:	mov	r0, r4
   19230:	add	sp, sp, #28
   19234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19238:	mov	r6, r5
   1923c:	mov	r9, sl
   19240:	add	r3, sp, #12
   19244:	str	r3, [sp, #4]
   19248:	str	fp, [sp]
   1924c:	add	r3, sp, #8
   19250:	ldr	r5, [r9]
   19254:	mov	r2, r4
   19258:	mov	r1, r6
   1925c:	mov	r0, r8
   19260:	blx	r5
   19264:	cmp	r4, r0
   19268:	mov	r5, r0
   1926c:	beq	1922c <_start@@Base+0x4284>
   19270:	cmp	r6, r0
   19274:	bne	192bc <_start@@Base+0x4314>
   19278:	ldr	r3, [r9, #4]!
   1927c:	cmp	r3, #0
   19280:	bne	19240 <_start@@Base+0x4298>
   19284:	mov	r2, r4
   19288:	mov	r3, #23
   1928c:	mov	r1, r6
   19290:	mov	r0, r8
   19294:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19298:	mov	r4, r0
   1929c:	b	1922c <_start@@Base+0x4284>
   192a0:	ldrd	r2, [sp, #16]
   192a4:	cmp	r3, #0
   192a8:	cmpeq	r2, #255	; 0xff
   192ac:	uxtbls	r7, r2
   192b0:	bls	192e4 <_start@@Base+0x433c>
   192b4:	mov	r3, #7
   192b8:	b	192cc <_start@@Base+0x4324>
   192bc:	ldr	r3, [sp, #8]
   192c0:	cmp	r3, #0
   192c4:	beq	192a0 <_start@@Base+0x42f8>
   192c8:	mov	r3, #8
   192cc:	mov	r2, r4
   192d0:	mov	r1, r5
   192d4:	mov	r0, r8
   192d8:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   192dc:	cmp	r4, r0
   192e0:	beq	1922c <_start@@Base+0x4284>
   192e4:	ldr	r3, [sp, #64]	; 0x40
   192e8:	ldr	r2, [sp, #64]	; 0x40
   192ec:	ldrb	r3, [r3]
   192f0:	add	r3, r7, r3
   192f4:	strb	r3, [r2]
   192f8:	ldr	r3, [sp, #12]
   192fc:	cmp	r3, #0
   19300:	bne	19238 <_start@@Base+0x4290>
   19304:	mov	r4, r5
   19308:	b	1922c <_start@@Base+0x4284>
   1930c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19310:	sub	sp, sp, #28
   19314:	mov	r7, #0
   19318:	ldr	r9, [sp, #64]	; 0x40
   1931c:	mov	r4, r2
   19320:	mov	r8, r0
   19324:	str	r7, [r9]
   19328:	mov	fp, r3
   1932c:	bl	176ec <_start@@Base+0x2744>
   19330:	cmp	r4, r0
   19334:	movne	r6, r0
   19338:	bne	1934c <_start@@Base+0x43a4>
   1933c:	mov	r0, r4
   19340:	add	sp, sp, #28
   19344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19348:	mov	r6, r5
   1934c:	mov	sl, fp
   19350:	add	r3, sp, #12
   19354:	str	r3, [sp, #4]
   19358:	add	r3, sp, #16
   1935c:	str	r3, [sp]
   19360:	mov	r2, r4
   19364:	ldr	r5, [sl]
   19368:	add	r3, sp, #8
   1936c:	mov	r1, r6
   19370:	mov	r0, r8
   19374:	blx	r5
   19378:	cmp	r4, r0
   1937c:	mov	r5, r0
   19380:	beq	1933c <_start@@Base+0x4394>
   19384:	cmp	r6, r0
   19388:	bne	193d8 <_start@@Base+0x4430>
   1938c:	ldr	r3, [sl, #4]!
   19390:	cmp	r3, #0
   19394:	bne	19350 <_start@@Base+0x43a8>
   19398:	mov	r2, r4
   1939c:	mov	r3, #23
   193a0:	mov	r1, r6
   193a4:	mov	r0, r8
   193a8:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   193ac:	mov	r4, r0
   193b0:	b	1933c <_start@@Base+0x4394>
   193b4:	ldrd	r2, [sp, #16]
   193b8:	mov	r1, #0
   193bc:	mvn	r0, #0
   193c0:	cmp	r3, r1
   193c4:	cmpeq	r2, r0
   193c8:	movls	r7, r2
   193cc:	bls	19400 <_start@@Base+0x4458>
   193d0:	mov	r3, #7
   193d4:	b	193e8 <_start@@Base+0x4440>
   193d8:	ldr	r3, [sp, #8]
   193dc:	cmp	r3, #0
   193e0:	beq	193b4 <_start@@Base+0x440c>
   193e4:	mov	r3, #8
   193e8:	mov	r2, r4
   193ec:	mov	r1, r5
   193f0:	mov	r0, r8
   193f4:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   193f8:	cmp	r4, r0
   193fc:	beq	1933c <_start@@Base+0x4394>
   19400:	ldr	r3, [r9]
   19404:	add	r3, r3, r7
   19408:	str	r3, [r9]
   1940c:	ldr	r3, [sp, #12]
   19410:	cmp	r3, #0
   19414:	bne	19348 <_start@@Base+0x43a0>
   19418:	mov	r4, r5
   1941c:	b	1933c <_start@@Base+0x4394>
   19420:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19424:	sub	sp, sp, #28
   19428:	mov	sl, r3
   1942c:	ldr	r3, [sp, #64]	; 0x40
   19430:	mov	r7, #0
   19434:	mov	r4, r2
   19438:	strh	r7, [r3]
   1943c:	mov	r8, r0
   19440:	bl	176ec <_start@@Base+0x2744>
   19444:	cmp	r4, r0
   19448:	movne	r6, r0
   1944c:	bne	19460 <_start@@Base+0x44b8>
   19450:	mov	r0, r4
   19454:	add	sp, sp, #28
   19458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1945c:	mov	r6, r5
   19460:	mov	r9, sl
   19464:	add	fp, sp, #16
   19468:	add	r3, sp, #12
   1946c:	str	r3, [sp, #4]
   19470:	str	fp, [sp]
   19474:	add	r3, sp, #8
   19478:	ldr	r5, [r9]
   1947c:	mov	r2, r4
   19480:	mov	r1, r6
   19484:	mov	r0, r8
   19488:	blx	r5
   1948c:	cmp	r4, r0
   19490:	mov	r5, r0
   19494:	beq	19450 <_start@@Base+0x44a8>
   19498:	cmp	r6, r0
   1949c:	bne	194ec <_start@@Base+0x4544>
   194a0:	ldr	r3, [r9, #4]!
   194a4:	cmp	r3, #0
   194a8:	bne	19468 <_start@@Base+0x44c0>
   194ac:	mov	r2, r4
   194b0:	mov	r3, #23
   194b4:	mov	r1, r6
   194b8:	mov	r0, r8
   194bc:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   194c0:	mov	r4, r0
   194c4:	b	19450 <_start@@Base+0x44a8>
   194c8:	ldrd	r2, [sp, #16]
   194cc:	ldr	r0, [pc, #104]	; 1953c <_start@@Base+0x4594>
   194d0:	mov	r1, #0
   194d4:	cmp	r3, r1
   194d8:	cmpeq	r2, r0
   194dc:	uxthls	r7, r2
   194e0:	bls	19514 <_start@@Base+0x456c>
   194e4:	mov	r3, #7
   194e8:	b	194fc <_start@@Base+0x4554>
   194ec:	ldr	r3, [sp, #8]
   194f0:	cmp	r3, #0
   194f4:	beq	194c8 <_start@@Base+0x4520>
   194f8:	mov	r3, #8
   194fc:	mov	r2, r4
   19500:	mov	r1, r5
   19504:	mov	r0, r8
   19508:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1950c:	cmp	r4, r0
   19510:	beq	19450 <_start@@Base+0x44a8>
   19514:	ldr	r3, [sp, #64]	; 0x40
   19518:	ldr	r2, [sp, #64]	; 0x40
   1951c:	ldrh	r3, [r3]
   19520:	add	r3, r7, r3
   19524:	strh	r3, [r2]
   19528:	ldr	r3, [sp, #12]
   1952c:	cmp	r3, #0
   19530:	bne	1945c <_start@@Base+0x44b4>
   19534:	mov	r4, r5
   19538:	b	19450 <_start@@Base+0x44a8>
   1953c:	strdeq	pc, [r0], -pc	; <UNPREDICTABLE>
   19540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19544:	sub	sp, sp, #28
   19548:	mov	sl, r3
   1954c:	ldr	r3, [sp, #64]	; 0x40
   19550:	mov	r6, #0
   19554:	mov	r4, r2
   19558:	strh	r6, [r3]
   1955c:	mov	r8, r0
   19560:	bl	176ec <_start@@Base+0x2744>
   19564:	cmp	r4, r0
   19568:	movne	r7, r0
   1956c:	bne	19580 <_start@@Base+0x45d8>
   19570:	mov	r0, r4
   19574:	add	sp, sp, #28
   19578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1957c:	mov	r7, r5
   19580:	mov	r9, sl
   19584:	add	fp, sp, #16
   19588:	add	r3, sp, #12
   1958c:	str	r3, [sp, #4]
   19590:	str	fp, [sp]
   19594:	add	r3, sp, #8
   19598:	ldr	r5, [r9]
   1959c:	mov	r2, r4
   195a0:	mov	r1, r7
   195a4:	mov	r0, r8
   195a8:	blx	r5
   195ac:	cmp	r4, r0
   195b0:	mov	r5, r0
   195b4:	beq	19570 <_start@@Base+0x45c8>
   195b8:	cmp	r7, r0
   195bc:	bne	19640 <_start@@Base+0x4698>
   195c0:	ldr	r3, [r9, #4]!
   195c4:	cmp	r3, #0
   195c8:	bne	19588 <_start@@Base+0x45e0>
   195cc:	mov	r2, r4
   195d0:	mov	r3, #23
   195d4:	mov	r1, r7
   195d8:	mov	r0, r8
   195dc:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   195e0:	mov	r4, r0
   195e4:	b	19570 <_start@@Base+0x45c8>
   195e8:	cmp	r3, #0
   195ec:	cmpeq	r2, #32768	; 0x8000
   195f0:	rsbls	r6, r2, #0
   195f4:	movhi	r3, #8
   195f8:	sxthls	r6, r6
   195fc:	bls	19618 <_start@@Base+0x4670>
   19600:	mov	r2, r4
   19604:	mov	r1, r5
   19608:	mov	r0, r8
   1960c:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19610:	cmp	r4, r0
   19614:	beq	19570 <_start@@Base+0x45c8>
   19618:	ldr	r3, [sp, #64]	; 0x40
   1961c:	ldr	r2, [sp, #64]	; 0x40
   19620:	ldrh	r3, [r3]
   19624:	add	r3, r3, r6
   19628:	strh	r3, [r2]
   1962c:	ldr	r3, [sp, #12]
   19630:	cmp	r3, #0
   19634:	bne	1957c <_start@@Base+0x45d4>
   19638:	mov	r4, r5
   1963c:	b	19570 <_start@@Base+0x45c8>
   19640:	ldr	r1, [sp, #8]
   19644:	ldrd	r2, [sp, #16]
   19648:	cmp	r1, #0
   1964c:	bne	195e8 <_start@@Base+0x4640>
   19650:	ldr	r0, [pc, #24]	; 19670 <_start@@Base+0x46c8>
   19654:	mov	r1, #0
   19658:	cmp	r3, r1
   1965c:	cmpeq	r2, r0
   19660:	sxthls	r6, r2
   19664:	bls	19618 <_start@@Base+0x4670>
   19668:	mov	r3, #7
   1966c:	b	19600 <_start@@Base+0x4658>
   19670:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   19674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19678:	sub	sp, sp, #28
   1967c:	mov	r6, #0
   19680:	ldr	r9, [sp, #64]	; 0x40
   19684:	mov	r4, r2
   19688:	mov	r8, r0
   1968c:	str	r6, [r9]
   19690:	mov	fp, r3
   19694:	bl	176ec <_start@@Base+0x2744>
   19698:	cmp	r4, r0
   1969c:	movne	r7, r0
   196a0:	bne	196b4 <_start@@Base+0x470c>
   196a4:	mov	r0, r4
   196a8:	add	sp, sp, #28
   196ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196b0:	mov	r7, r5
   196b4:	mov	sl, fp
   196b8:	add	r3, sp, #12
   196bc:	str	r3, [sp, #4]
   196c0:	add	r3, sp, #16
   196c4:	str	r3, [sp]
   196c8:	mov	r2, r4
   196cc:	ldr	r5, [sl]
   196d0:	add	r3, sp, #8
   196d4:	mov	r1, r7
   196d8:	mov	r0, r8
   196dc:	blx	r5
   196e0:	cmp	r4, r0
   196e4:	mov	r5, r0
   196e8:	beq	196a4 <_start@@Base+0x46fc>
   196ec:	cmp	r7, r0
   196f0:	bne	19768 <_start@@Base+0x47c0>
   196f4:	ldr	r3, [sl, #4]!
   196f8:	cmp	r3, #0
   196fc:	bne	196b8 <_start@@Base+0x4710>
   19700:	mov	r2, r4
   19704:	mov	r3, #23
   19708:	mov	r1, r7
   1970c:	mov	r0, r8
   19710:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19714:	mov	r4, r0
   19718:	b	196a4 <_start@@Base+0x46fc>
   1971c:	cmp	r3, #0
   19720:	cmpeq	r2, #-2147483648	; 0x80000000
   19724:	movhi	r3, #8
   19728:	rsbls	r6, r2, #0
   1972c:	bls	19748 <_start@@Base+0x47a0>
   19730:	mov	r2, r4
   19734:	mov	r1, r5
   19738:	mov	r0, r8
   1973c:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19740:	cmp	r4, r0
   19744:	beq	196a4 <_start@@Base+0x46fc>
   19748:	ldr	r3, [r9]
   1974c:	add	r3, r3, r6
   19750:	str	r3, [r9]
   19754:	ldr	r3, [sp, #12]
   19758:	cmp	r3, #0
   1975c:	bne	196b0 <_start@@Base+0x4708>
   19760:	mov	r4, r5
   19764:	b	196a4 <_start@@Base+0x46fc>
   19768:	ldr	r1, [sp, #8]
   1976c:	ldrd	r2, [sp, #16]
   19770:	cmp	r1, #0
   19774:	bne	1971c <_start@@Base+0x4774>
   19778:	mov	r1, #0
   1977c:	cmp	r3, r1
   19780:	mvn	r0, #-2147483648	; 0x80000000
   19784:	cmpeq	r2, r0
   19788:	movls	r6, r2
   1978c:	bls	19748 <_start@@Base+0x47a0>
   19790:	mov	r3, #7
   19794:	b	19730 <_start@@Base+0x4788>
   19798:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1979c:	mov	r9, r3
   197a0:	mov	r4, r2
   197a4:	mov	r3, #0
   197a8:	mov	r2, #4
   197ac:	mov	r5, r0
   197b0:	mov	r6, r1
   197b4:	str	r3, [r9]
   197b8:	mov	r1, r2
   197bc:	ldr	r0, [r0]
   197c0:	bl	20e74 <flatcc_builder_start_struct@@Base>
   197c4:	subs	sl, r0, #0
   197c8:	beq	19924 <_start@@Base+0x497c>
   197cc:	add	r3, sp, #8
   197d0:	mov	r2, r4
   197d4:	mov	r1, r6
   197d8:	mov	r0, r5
   197dc:	bl	183b8 <_start@@Base+0x3410>
   197e0:	ldr	r3, [sp, #8]
   197e4:	mov	r6, r0
   197e8:	cmp	r3, #0
   197ec:	beq	19908 <_start@@Base+0x4960>
   197f0:	mov	r2, r4
   197f4:	mov	r1, r6
   197f8:	mov	r0, r5
   197fc:	bl	176c0 <_start@@Base+0x2718>
   19800:	mov	r1, r4
   19804:	mov	r6, r0
   19808:	bl	150d0 <_start@@Base+0x128>
   1980c:	add	r3, pc, #332	; 0x14c
   19810:	ldrd	r2, [r3]
   19814:	cmp	r1, r3
   19818:	cmpeq	r0, r2
   1981c:	bne	19948 <_start@@Base+0x49a0>
   19820:	add	r6, r6, #8
   19824:	mov	r1, r4
   19828:	mov	r0, r6
   1982c:	bl	150d0 <_start@@Base+0x128>
   19830:	ldr	r3, [pc, #304]	; 19968 <_start@@Base+0x49c0>
   19834:	mov	r2, #0
   19838:	and	r3, r3, r1
   1983c:	mov	r1, r3
   19840:	ldr	r3, [pc, #292]	; 1996c <_start@@Base+0x49c4>
   19844:	and	r2, r2, r0
   19848:	mov	r0, r2
   1984c:	cmp	r1, r3
   19850:	mov	r2, #0
   19854:	cmpeq	r0, r2
   19858:	bne	19948 <_start@@Base+0x49a0>
   1985c:	mov	r3, #2
   19860:	mov	r2, r4
   19864:	mov	r1, r6
   19868:	mov	r0, r5
   1986c:	bl	1850c <_start@@Base+0x3564>
   19870:	cmp	r6, r0
   19874:	mov	r8, r0
   19878:	beq	19948 <_start@@Base+0x49a0>
   1987c:	add	r7, sp, #16
   19880:	mov	r3, #0
   19884:	str	r3, [r7, #-4]!
   19888:	mov	r1, r0
   1988c:	mov	r3, r7
   19890:	mov	r2, r4
   19894:	mov	r0, r5
   19898:	bl	18ff4 <_start@@Base+0x404c>
   1989c:	cmp	r8, r0
   198a0:	mov	r6, r0
   198a4:	bne	198d4 <_start@@Base+0x492c>
   198a8:	mov	r1, r0
   198ac:	str	r7, [sp]
   198b0:	ldr	r3, [pc, #184]	; 19970 <_start@@Base+0x49c8>
   198b4:	mov	r2, r4
   198b8:	mov	r0, r5
   198bc:	bl	19674 <_start@@Base+0x46cc>
   198c0:	cmp	r4, r0
   198c4:	cmpne	r6, r0
   198c8:	mov	r1, r0
   198cc:	beq	198f4 <_start@@Base+0x494c>
   198d0:	mov	r6, r0
   198d4:	ldr	r3, [sp, #12]
   198d8:	str	r3, [sl]
   198dc:	add	r3, sp, #8
   198e0:	mov	r2, r4
   198e4:	mov	r1, r6
   198e8:	mov	r0, r5
   198ec:	bl	16d28 <_start@@Base+0x1d80>
   198f0:	b	197e0 <_start@@Base+0x4838>
   198f4:	mov	r3, #33	; 0x21
   198f8:	mov	r2, r4
   198fc:	mov	r0, r5
   19900:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19904:	mov	r6, r0
   19908:	cmp	r4, r6
   1990c:	beq	19924 <_start@@Base+0x497c>
   19910:	ldr	r0, [r5]
   19914:	bl	20ec8 <flatcc_builder_end_struct@@Base>
   19918:	cmp	r0, #0
   1991c:	str	r0, [r9]
   19920:	bne	1993c <_start@@Base+0x4994>
   19924:	mov	r1, r6
   19928:	mov	r3, #33	; 0x21
   1992c:	mov	r2, r4
   19930:	mov	r0, r5
   19934:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19938:	mov	r6, r0
   1993c:	mov	r0, r6
   19940:	add	sp, sp, #16
   19944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19948:	mov	r1, r6
   1994c:	mov	r2, r4
   19950:	mov	r0, r5
   19954:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   19958:	mov	r6, r0
   1995c:	b	198dc <_start@@Base+0x4934>
   19960:	cmpvc	pc, #1342177286	; 0x50000006
   19964:	rsbvs	r6, pc, #428	; 0x1ac
   19968:			; <UNDEFINED> instruction: 0xffff0000
   1996c:	cmnvs	r4, r0
   19970:	andeq	r4, r4, r8, asr #1
   19974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19978:	sub	sp, sp, #20
   1997c:	mov	ip, #0
   19980:	ldr	r7, [sp, #56]	; 0x38
   19984:	cmp	r3, #9
   19988:	mov	r5, r0
   1998c:	mov	r6, r2
   19990:	str	ip, [r7]
   19994:	beq	19d88 <_start@@Base+0x4de0>
   19998:	mov	r4, r1
   1999c:	bhi	199cc <_start@@Base+0x4a24>
   199a0:	cmp	r3, #2
   199a4:	beq	19a04 <_start@@Base+0x4a5c>
   199a8:	cmp	r3, #8
   199ac:	beq	19c18 <_start@@Base+0x4c70>
   199b0:	cmp	r3, ip
   199b4:	bne	199e0 <_start@@Base+0x4a38>
   199b8:	bl	16130 <_start@@Base+0x1188>
   199bc:	mov	r4, r0
   199c0:	mov	r0, r4
   199c4:	add	sp, sp, #20
   199c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199cc:	cmp	r3, #11
   199d0:	beq	19d94 <_start@@Base+0x4dec>
   199d4:	bcc	19d88 <_start@@Base+0x4de0>
   199d8:	cmp	r3, #255	; 0xff
   199dc:	beq	19d94 <_start@@Base+0x4dec>
   199e0:	ldr	r3, [r5, #8]
   199e4:	tst	r3, #1
   199e8:	moveq	r3, #15
   199ec:	beq	19a98 <_start@@Base+0x4af0>
   199f0:	mov	r2, r6
   199f4:	mov	r1, r4
   199f8:	mov	r0, r5
   199fc:	bl	25880 <flatcc_json_parser_generic_json@@Base>
   19a00:	b	199bc <_start@@Base+0x4a14>
   19a04:	mov	r1, #1
   19a08:	ldr	r0, [r0]
   19a0c:	bl	2151c <flatcc_builder_start_table@@Base>
   19a10:	cmp	r0, #0
   19a14:	bne	19a64 <_start@@Base+0x4abc>
   19a18:	mov	r1, r4
   19a1c:	add	r3, sp, #8
   19a20:	mov	r2, r6
   19a24:	mov	r0, r5
   19a28:	bl	183b8 <_start@@Base+0x3410>
   19a2c:	mov	r8, #0
   19a30:	mvn	r9, #255	; 0xff
   19a34:	mov	r4, r0
   19a38:	ldr	r3, [sp, #8]
   19a3c:	cmp	r3, #0
   19a40:	bne	19aac <_start@@Base+0x4b04>
   19a44:	ldr	r3, [r5, #20]
   19a48:	cmp	r3, #0
   19a4c:	bne	19a64 <_start@@Base+0x4abc>
   19a50:	ldr	r0, [r5]
   19a54:	bl	21b58 <flatcc_builder_end_table@@Base>
   19a58:	cmp	r0, #0
   19a5c:	str	r0, [r7]
   19a60:	bne	19a7c <_start@@Base+0x4ad4>
   19a64:	mov	r3, #33	; 0x21
   19a68:	mov	r2, r6
   19a6c:	mov	r1, r4
   19a70:	mov	r0, r5
   19a74:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19a78:	mov	r4, r0
   19a7c:	ldr	r3, [r5, #20]
   19a80:	cmp	r3, #0
   19a84:	bne	199c0 <_start@@Base+0x4a18>
   19a88:	ldr	r3, [r7]
   19a8c:	cmp	r3, #0
   19a90:	bne	199c0 <_start@@Base+0x4a18>
   19a94:	mov	r3, #33	; 0x21
   19a98:	mov	r2, r6
   19a9c:	mov	r1, r4
   19aa0:	mov	r0, r5
   19aa4:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19aa8:	b	199bc <_start@@Base+0x4a14>
   19aac:	mov	r2, r6
   19ab0:	mov	r1, r4
   19ab4:	mov	r0, r5
   19ab8:	bl	176c0 <_start@@Base+0x2718>
   19abc:	mov	r1, r6
   19ac0:	mov	r4, r0
   19ac4:	bl	150d0 <_start@@Base+0x128>
   19ac8:	add	r3, pc, #720	; 0x2d0
   19acc:	ldrd	r2, [r3]
   19ad0:	cmp	r1, r3
   19ad4:	cmpeq	r0, r2
   19ad8:	bne	19c00 <_start@@Base+0x4c58>
   19adc:	add	sl, r4, #8
   19ae0:	mov	r1, r6
   19ae4:	mov	r0, sl
   19ae8:	bl	150d0 <_start@@Base+0x128>
   19aec:	add	r3, pc, #692	; 0x2b4
   19af0:	ldrd	r2, [r3]
   19af4:	cmp	r1, r3
   19af8:	cmpeq	r0, r2
   19afc:	movne	r2, r6
   19b00:	movne	r1, sl
   19b04:	bne	19c08 <_start@@Base+0x4c60>
   19b08:	add	r4, r4, #16
   19b0c:	mov	r1, r6
   19b10:	mov	r0, r4
   19b14:	bl	150d0 <_start@@Base+0x128>
   19b18:	add	r3, pc, #656	; 0x290
   19b1c:	ldrd	r2, [r3]
   19b20:	and	r1, r1, r9
   19b24:	and	r0, r0, r8
   19b28:	cmp	r1, r3
   19b2c:	cmpeq	r0, r2
   19b30:	bne	19c00 <_start@@Base+0x4c58>
   19b34:	mov	r3, #3
   19b38:	mov	r2, r6
   19b3c:	mov	r1, r4
   19b40:	mov	r0, r5
   19b44:	bl	1850c <_start@@Base+0x3564>
   19b48:	cmp	r4, r0
   19b4c:	mov	sl, r0
   19b50:	beq	19c00 <_start@@Base+0x4c58>
   19b54:	add	fp, sp, #16
   19b58:	mov	r3, #0
   19b5c:	str	r3, [fp, #-4]!
   19b60:	mov	r1, r0
   19b64:	mov	r3, fp
   19b68:	mov	r2, r6
   19b6c:	mov	r0, r5
   19b70:	bl	18ff4 <_start@@Base+0x404c>
   19b74:	cmp	sl, r0
   19b78:	mov	r4, r0
   19b7c:	bne	19ba8 <_start@@Base+0x4c00>
   19b80:	mov	r1, r0
   19b84:	str	fp, [sp]
   19b88:	ldr	r3, [pc, #568]	; 19dc8 <_start@@Base+0x4e20>
   19b8c:	mov	r2, r6
   19b90:	mov	r0, r5
   19b94:	bl	19674 <_start@@Base+0x46cc>
   19b98:	cmp	r6, r0
   19b9c:	cmpne	r4, r0
   19ba0:	mov	r4, r0
   19ba4:	beq	19a64 <_start@@Base+0x4abc>
   19ba8:	ldr	r3, [sp, #12]
   19bac:	cmp	r3, #0
   19bb0:	bne	19bc0 <_start@@Base+0x4c18>
   19bb4:	ldr	r3, [r5, #8]
   19bb8:	tst	r3, #2
   19bbc:	beq	19be4 <_start@@Base+0x4c3c>
   19bc0:	mov	r3, #4
   19bc4:	mov	r2, r3
   19bc8:	mov	r1, #0
   19bcc:	ldr	r0, [r5]
   19bd0:	bl	224dc <flatcc_builder_table_add@@Base>
   19bd4:	cmp	r0, #0
   19bd8:	beq	19a64 <_start@@Base+0x4abc>
   19bdc:	ldr	r3, [sp, #12]
   19be0:	str	r3, [r0]
   19be4:	mov	r1, r4
   19be8:	add	r3, sp, #8
   19bec:	mov	r2, r6
   19bf0:	mov	r0, r5
   19bf4:	bl	16d28 <_start@@Base+0x1d80>
   19bf8:	mov	r4, r0
   19bfc:	b	19a38 <_start@@Base+0x4a90>
   19c00:	mov	r2, r6
   19c04:	mov	r1, r4
   19c08:	mov	r0, r5
   19c0c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   19c10:	mov	r4, r0
   19c14:	b	19be4 <_start@@Base+0x4c3c>
   19c18:	mov	r2, #2
   19c1c:	mov	r1, r2
   19c20:	ldr	r0, [r0]
   19c24:	bl	20e74 <flatcc_builder_start_struct@@Base>
   19c28:	subs	sl, r0, #0
   19c2c:	beq	19a64 <_start@@Base+0x4abc>
   19c30:	add	r3, sp, #12
   19c34:	mov	r2, r6
   19c38:	mov	r1, r4
   19c3c:	mov	r0, r5
   19c40:	bl	183b8 <_start@@Base+0x3410>
   19c44:	ldr	r3, [sp, #12]
   19c48:	mov	r4, r0
   19c4c:	cmp	r3, #0
   19c50:	beq	19d5c <_start@@Base+0x4db4>
   19c54:	mov	r2, r6
   19c58:	mov	r1, r4
   19c5c:	mov	r0, r5
   19c60:	bl	176c0 <_start@@Base+0x2718>
   19c64:	mov	r1, r6
   19c68:	mov	r4, r0
   19c6c:	bl	150d0 <_start@@Base+0x128>
   19c70:	add	r3, pc, #320	; 0x140
   19c74:	ldrd	r2, [r3]
   19c78:	cmp	r1, r3
   19c7c:	cmpeq	r0, r2
   19c80:	bne	19d70 <_start@@Base+0x4dc8>
   19c84:	add	r4, r4, #8
   19c88:	mov	r1, r6
   19c8c:	mov	r0, r4
   19c90:	bl	150d0 <_start@@Base+0x128>
   19c94:	add	r3, pc, #292	; 0x124
   19c98:	ldrd	r2, [r3]
   19c9c:	mov	r0, #0
   19ca0:	bic	r1, r1, #255	; 0xff
   19ca4:	cmp	r1, r3
   19ca8:	cmpeq	r0, r2
   19cac:	bne	19d70 <_start@@Base+0x4dc8>
   19cb0:	mov	r3, #3
   19cb4:	mov	r2, r6
   19cb8:	mov	r1, r4
   19cbc:	mov	r0, r5
   19cc0:	bl	1850c <_start@@Base+0x3564>
   19cc4:	cmp	r4, r0
   19cc8:	mov	r9, r0
   19ccc:	beq	19d70 <_start@@Base+0x4dc8>
   19cd0:	add	r8, sp, #16
   19cd4:	mov	r3, #0
   19cd8:	strh	r3, [r8, #-8]!
   19cdc:	mov	r1, r0
   19ce0:	mov	r3, r8
   19ce4:	mov	r2, r6
   19ce8:	mov	r0, r5
   19cec:	bl	18e20 <_start@@Base+0x3e78>
   19cf0:	cmp	r9, r0
   19cf4:	mov	r4, r0
   19cf8:	bne	19d28 <_start@@Base+0x4d80>
   19cfc:	mov	r1, r0
   19d00:	str	r8, [sp]
   19d04:	ldr	r3, [pc, #192]	; 19dcc <_start@@Base+0x4e24>
   19d08:	mov	r2, r6
   19d0c:	mov	r0, r5
   19d10:	bl	19420 <_start@@Base+0x4478>
   19d14:	cmp	r6, r0
   19d18:	cmpne	r4, r0
   19d1c:	mov	r1, r0
   19d20:	beq	19d48 <_start@@Base+0x4da0>
   19d24:	mov	r4, r0
   19d28:	ldrh	r3, [sp, #8]
   19d2c:	strh	r3, [sl]
   19d30:	add	r3, sp, #12
   19d34:	mov	r2, r6
   19d38:	mov	r1, r4
   19d3c:	mov	r0, r5
   19d40:	bl	16d28 <_start@@Base+0x1d80>
   19d44:	b	19c44 <_start@@Base+0x4c9c>
   19d48:	mov	r3, #33	; 0x21
   19d4c:	mov	r2, r6
   19d50:	mov	r0, r5
   19d54:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19d58:	mov	r4, r0
   19d5c:	cmp	r6, r4
   19d60:	beq	19a64 <_start@@Base+0x4abc>
   19d64:	ldr	r0, [r5]
   19d68:	bl	20ec8 <flatcc_builder_end_struct@@Base>
   19d6c:	b	19a58 <_start@@Base+0x4ab0>
   19d70:	mov	r1, r4
   19d74:	mov	r2, r6
   19d78:	mov	r0, r5
   19d7c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   19d80:	mov	r4, r0
   19d84:	b	19d30 <_start@@Base+0x4d88>
   19d88:	mov	r3, r7
   19d8c:	bl	19798 <_start@@Base+0x47f0>
   19d90:	b	19a78 <_start@@Base+0x4ad0>
   19d94:	mov	r3, r7
   19d98:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   19d9c:	b	19a78 <_start@@Base+0x4ad0>
   19da0:	ldrbvs	r6, [pc], #-372	; 19da8 <_start@@Base+0x4e00>
   19da4:	cmnvc	r7, #456	; 0x1c8
   19da8:	svcpl	0x0064616d
   19dac:	strbtvc	r6, [r1], #-875	; 0xfffffc95
   19db0:	andeq	r0, r0, r0
   19db4:	cmnvs	r7, r0, lsl #10
   19db8:	svcpl	0x006c656e
   19dbc:	stmdavs	r1!, {r1, r4, r5, r6, r8, fp, sp, lr}^
   19dc0:	andeq	r0, r0, r0
   19dc4:	ldrbvs	r6, [r4, -r0, lsl #16]!
   19dc8:	ldrdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   19dcc:	andeq	r4, r4, r0, ror #1
   19dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dd4:	sub	sp, sp, #28
   19dd8:	mov	sl, r3
   19ddc:	ldr	r3, [sp, #64]	; 0x40
   19de0:	mov	r6, #0
   19de4:	mov	r4, r2
   19de8:	strb	r6, [r3]
   19dec:	mov	r8, r0
   19df0:	bl	176ec <_start@@Base+0x2744>
   19df4:	cmp	r4, r0
   19df8:	movne	r7, r0
   19dfc:	addne	fp, sp, #16
   19e00:	bne	19e14 <_start@@Base+0x4e6c>
   19e04:	mov	r0, r4
   19e08:	add	sp, sp, #28
   19e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e10:	mov	r7, r5
   19e14:	mov	r9, sl
   19e18:	add	r3, sp, #12
   19e1c:	str	r3, [sp, #4]
   19e20:	str	fp, [sp]
   19e24:	add	r3, sp, #8
   19e28:	ldr	r5, [r9]
   19e2c:	mov	r2, r4
   19e30:	mov	r1, r7
   19e34:	mov	r0, r8
   19e38:	blx	r5
   19e3c:	cmp	r4, r0
   19e40:	mov	r5, r0
   19e44:	beq	19e04 <_start@@Base+0x4e5c>
   19e48:	cmp	r7, r0
   19e4c:	bne	19ed0 <_start@@Base+0x4f28>
   19e50:	ldr	r3, [r9, #4]!
   19e54:	cmp	r3, #0
   19e58:	bne	19e18 <_start@@Base+0x4e70>
   19e5c:	mov	r2, r4
   19e60:	mov	r3, #23
   19e64:	mov	r1, r7
   19e68:	mov	r0, r8
   19e6c:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19e70:	mov	r4, r0
   19e74:	b	19e04 <_start@@Base+0x4e5c>
   19e78:	cmp	r3, #0
   19e7c:	cmpeq	r2, #128	; 0x80
   19e80:	rsbls	r6, r2, #0
   19e84:	movhi	r3, #8
   19e88:	sxtbls	r6, r6
   19e8c:	bls	19ea8 <_start@@Base+0x4f00>
   19e90:	mov	r2, r4
   19e94:	mov	r1, r5
   19e98:	mov	r0, r8
   19e9c:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   19ea0:	cmp	r4, r0
   19ea4:	beq	19e04 <_start@@Base+0x4e5c>
   19ea8:	ldr	r3, [sp, #64]	; 0x40
   19eac:	ldr	r2, [sp, #64]	; 0x40
   19eb0:	ldrb	r3, [r3]
   19eb4:	add	r3, r3, r6
   19eb8:	strb	r3, [r2]
   19ebc:	ldr	r3, [sp, #12]
   19ec0:	cmp	r3, #0
   19ec4:	bne	19e10 <_start@@Base+0x4e68>
   19ec8:	mov	r4, r5
   19ecc:	b	19e04 <_start@@Base+0x4e5c>
   19ed0:	ldr	r1, [sp, #8]
   19ed4:	ldrd	r2, [sp, #16]
   19ed8:	cmp	r1, #0
   19edc:	bne	19e78 <_start@@Base+0x4ed0>
   19ee0:	cmp	r3, #0
   19ee4:	cmpeq	r2, #127	; 0x7f
   19ee8:	sxtbls	r6, r2
   19eec:	bls	19ea8 <_start@@Base+0x4f00>
   19ef0:	mov	r3, #7
   19ef4:	b	19e90 <_start@@Base+0x4ee8>
   19ef8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19efc:	sub	sp, sp, #20
   19f00:	mov	sl, r3
   19f04:	add	r3, sp, #12
   19f08:	mov	r6, r0
   19f0c:	mov	r4, r2
   19f10:	bl	183b8 <_start@@Base+0x3410>
   19f14:	mov	r8, #0
   19f18:	mov	r9, #1627389952	; 0x61000000
   19f1c:	ldr	r3, [sp, #12]
   19f20:	cmp	r3, #0
   19f24:	bne	19f30 <_start@@Base+0x4f88>
   19f28:	add	sp, sp, #20
   19f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f30:	mov	r1, r0
   19f34:	mov	r2, r4
   19f38:	mov	r0, r6
   19f3c:	bl	176c0 <_start@@Base+0x2718>
   19f40:	mov	r1, r4
   19f44:	mov	r5, r0
   19f48:	bl	150d0 <_start@@Base+0x128>
   19f4c:	mov	r0, #0
   19f50:	and	r1, r1, #-16777216	; 0xff000000
   19f54:	cmp	r1, #1644167168	; 0x62000000
   19f58:	cmpeq	r0, #0
   19f5c:	bne	19ff4 <_start@@Base+0x504c>
   19f60:	mov	r3, #1
   19f64:	mov	r2, r4
   19f68:	mov	r1, r5
   19f6c:	mov	r0, r6
   19f70:	bl	1850c <_start@@Base+0x3564>
   19f74:	cmp	r5, r0
   19f78:	mov	r7, r0
   19f7c:	beq	1a080 <_start@@Base+0x50d8>
   19f80:	add	fp, sp, #16
   19f84:	mov	r3, #0
   19f88:	strb	r3, [fp, #-6]!
   19f8c:	mov	r1, r0
   19f90:	mov	r3, fp
   19f94:	mov	r2, r4
   19f98:	mov	r0, r6
   19f9c:	bl	19150 <_start@@Base+0x41a8>
   19fa0:	cmp	r7, r0
   19fa4:	mov	r5, r0
   19fa8:	bne	19fd4 <_start@@Base+0x502c>
   19fac:	mov	r1, r0
   19fb0:	str	fp, [sp]
   19fb4:	ldr	r3, [pc, #244]	; 1a0b0 <_start@@Base+0x5108>
   19fb8:	mov	r2, r4
   19fbc:	mov	r0, r6
   19fc0:	bl	19dd0 <_start@@Base+0x4e28>
   19fc4:	cmp	r4, r0
   19fc8:	cmpne	r5, r0
   19fcc:	beq	1a098 <_start@@Base+0x50f0>
   19fd0:	mov	r5, r0
   19fd4:	ldrb	r3, [sp, #10]
   19fd8:	strb	r3, [sl, #2]
   19fdc:	add	r3, sp, #12
   19fe0:	mov	r2, r4
   19fe4:	mov	r1, r5
   19fe8:	mov	r0, r6
   19fec:	bl	16d28 <_start@@Base+0x1d80>
   19ff0:	b	19f1c <_start@@Base+0x4f74>
   19ff4:	cmp	r1, r9
   19ff8:	cmpeq	r0, r8
   19ffc:	bne	1a080 <_start@@Base+0x50d8>
   1a000:	mov	r3, #1
   1a004:	mov	r2, r4
   1a008:	mov	r1, r5
   1a00c:	mov	r0, r6
   1a010:	bl	1850c <_start@@Base+0x3564>
   1a014:	cmp	r5, r0
   1a018:	mov	r7, r0
   1a01c:	beq	1a080 <_start@@Base+0x50d8>
   1a020:	add	fp, sp, #16
   1a024:	mov	r3, #0
   1a028:	strh	r3, [fp, #-6]!
   1a02c:	mov	r1, r0
   1a030:	mov	r3, fp
   1a034:	mov	r2, r4
   1a038:	mov	r0, r6
   1a03c:	bl	190a0 <_start@@Base+0x40f8>
   1a040:	cmp	r7, r0
   1a044:	mov	r5, r0
   1a048:	bne	1a074 <_start@@Base+0x50cc>
   1a04c:	mov	r1, r0
   1a050:	str	fp, [sp]
   1a054:	ldr	r3, [pc, #88]	; 1a0b4 <_start@@Base+0x510c>
   1a058:	mov	r2, r4
   1a05c:	mov	r0, r6
   1a060:	bl	19540 <_start@@Base+0x4598>
   1a064:	cmp	r4, r0
   1a068:	cmpne	r5, r0
   1a06c:	beq	1a098 <_start@@Base+0x50f0>
   1a070:	mov	r5, r0
   1a074:	ldrh	r3, [sp, #10]
   1a078:	strh	r3, [sl]
   1a07c:	b	19fdc <_start@@Base+0x5034>
   1a080:	mov	r1, r5
   1a084:	mov	r2, r4
   1a088:	mov	r0, r6
   1a08c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1a090:	mov	r5, r0
   1a094:	b	19fdc <_start@@Base+0x5034>
   1a098:	mov	r1, r0
   1a09c:	mov	r3, #33	; 0x21
   1a0a0:	mov	r2, r4
   1a0a4:	mov	r0, r6
   1a0a8:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1a0ac:	b	19f28 <_start@@Base+0x4f80>
   1a0b0:	andeq	r4, r4, ip, ror #1
   1a0b4:	strdeq	r4, [r4], -r8
   1a0b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0bc:	sub	sp, sp, #36	; 0x24
   1a0c0:	mov	r9, #0
   1a0c4:	ldr	r8, [sp, #72]	; 0x48
   1a0c8:	mov	r4, r2
   1a0cc:	mov	r7, r0
   1a0d0:	str	r9, [r8]
   1a0d4:	str	r9, [r8, #4]
   1a0d8:	str	r3, [sp, #12]
   1a0dc:	bl	176ec <_start@@Base+0x2744>
   1a0e0:	cmp	r4, r0
   1a0e4:	beq	1a1e0 <_start@@Base+0x5238>
   1a0e8:	mov	r6, r0
   1a0ec:	mov	sl, r9
   1a0f0:	mov	fp, r9
   1a0f4:	ldr	r9, [sp, #12]
   1a0f8:	add	r3, sp, #20
   1a0fc:	str	r3, [sp, #4]
   1a100:	add	r3, sp, #24
   1a104:	str	r3, [sp]
   1a108:	mov	r2, r4
   1a10c:	ldr	r5, [r9]
   1a110:	add	r3, sp, #16
   1a114:	mov	r1, r6
   1a118:	mov	r0, r7
   1a11c:	blx	r5
   1a120:	cmp	r4, r0
   1a124:	mov	r5, r0
   1a128:	beq	1a1e0 <_start@@Base+0x5238>
   1a12c:	cmp	r6, r0
   1a130:	bne	1a1a0 <_start@@Base+0x51f8>
   1a134:	ldr	r3, [r9, #4]!
   1a138:	cmp	r3, #0
   1a13c:	bne	1a0f8 <_start@@Base+0x5150>
   1a140:	mov	r2, r4
   1a144:	mov	r3, #23
   1a148:	mov	r1, r6
   1a14c:	mov	r0, r7
   1a150:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1a154:	mov	r4, r0
   1a158:	b	1a1e0 <_start@@Base+0x5238>
   1a15c:	mov	r6, r5
   1a160:	b	1a0f4 <_start@@Base+0x514c>
   1a164:	cmp	r3, #-2147483648	; 0x80000000
   1a168:	cmpeq	r2, #0
   1a16c:	movhi	r3, #8
   1a170:	bhi	1a1c8 <_start@@Base+0x5220>
   1a174:	rsbs	sl, r2, #0
   1a178:	rsc	fp, r3, #0
   1a17c:	ldrd	r2, [r8]
   1a180:	adds	r2, r2, sl
   1a184:	adc	r3, r3, fp
   1a188:	strd	r2, [r8]
   1a18c:	ldr	r3, [sp, #20]
   1a190:	cmp	r3, #0
   1a194:	bne	1a15c <_start@@Base+0x51b4>
   1a198:	mov	r4, r5
   1a19c:	b	1a1e0 <_start@@Base+0x5238>
   1a1a0:	ldr	r1, [sp, #16]
   1a1a4:	ldrd	r2, [sp, #24]
   1a1a8:	cmp	r1, #0
   1a1ac:	bne	1a164 <_start@@Base+0x51bc>
   1a1b0:	cmp	r2, #0
   1a1b4:	sbcs	r1, r3, #0
   1a1b8:	movge	sl, r2
   1a1bc:	movge	fp, r3
   1a1c0:	bge	1a17c <_start@@Base+0x51d4>
   1a1c4:	mov	r3, #7
   1a1c8:	mov	r2, r4
   1a1cc:	mov	r1, r5
   1a1d0:	mov	r0, r7
   1a1d4:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1a1d8:	cmp	r4, r0
   1a1dc:	bne	1a17c <_start@@Base+0x51d4>
   1a1e0:	mov	r0, r4
   1a1e4:	add	sp, sp, #36	; 0x24
   1a1e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1f0:	mov	r7, r3
   1a1f4:	mov	r3, #0
   1a1f8:	sub	sp, sp, #60	; 0x3c
   1a1fc:	mov	r4, r0
   1a200:	mov	r6, r1
   1a204:	str	r3, [r7]
   1a208:	mov	r1, #4
   1a20c:	ldr	r0, [r0]
   1a210:	mov	r5, r2
   1a214:	bl	2151c <flatcc_builder_start_table@@Base>
   1a218:	cmp	r0, #0
   1a21c:	bne	1a2a0 <_start@@Base+0x52f8>
   1a220:	add	r3, sp, #32
   1a224:	str	r3, [sp]
   1a228:	mov	r2, r5
   1a22c:	mov	r3, #1
   1a230:	mov	r1, r6
   1a234:	mov	r0, r4
   1a238:	bl	2631c <flatcc_json_parser_prepare_unions@@Base>
   1a23c:	cmp	r5, r0
   1a240:	beq	1a2a0 <_start@@Base+0x52f8>
   1a244:	add	r3, sp, #24
   1a248:	mov	r2, r5
   1a24c:	mov	r1, r6
   1a250:	mov	r0, r4
   1a254:	bl	183b8 <_start@@Base+0x3410>
   1a258:	ldr	r3, [sp, #24]
   1a25c:	mov	r6, r0
   1a260:	cmp	r3, #0
   1a264:	bne	1a2c4 <_start@@Base+0x531c>
   1a268:	ldr	r3, [r4, #20]
   1a26c:	cmp	r3, #0
   1a270:	bne	1a2a0 <_start@@Base+0x52f8>
   1a274:	mov	r1, r0
   1a278:	ldr	r3, [sp, #32]
   1a27c:	mov	r2, r5
   1a280:	mov	r0, r4
   1a284:	bl	26384 <flatcc_json_parser_finalize_unions@@Base>
   1a288:	mov	r6, r0
   1a28c:	ldr	r0, [r4]
   1a290:	bl	21b58 <flatcc_builder_end_table@@Base>
   1a294:	cmp	r0, #0
   1a298:	str	r0, [r7]
   1a29c:	bne	1a2b8 <_start@@Base+0x5310>
   1a2a0:	mov	r1, r6
   1a2a4:	mov	r3, #33	; 0x21
   1a2a8:	mov	r2, r5
   1a2ac:	mov	r0, r4
   1a2b0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1a2b4:	mov	r6, r0
   1a2b8:	mov	r0, r6
   1a2bc:	add	sp, sp, #60	; 0x3c
   1a2c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2c4:	mov	r2, r5
   1a2c8:	mov	r1, r6
   1a2cc:	mov	r0, r4
   1a2d0:	bl	176c0 <_start@@Base+0x2718>
   1a2d4:	mov	r1, r5
   1a2d8:	mov	sl, r0
   1a2dc:	bl	150d0 <_start@@Base+0x128>
   1a2e0:	add	r3, pc, #800	; 0x320
   1a2e4:	ldrd	r2, [r3]
   1a2e8:	cmp	r1, r3
   1a2ec:	cmpeq	r0, r2
   1a2f0:	mov	r8, r0
   1a2f4:	mov	r9, r1
   1a2f8:	bne	1a384 <_start@@Base+0x53dc>
   1a2fc:	add	sl, sl, #8
   1a300:	mov	r1, r5
   1a304:	mov	r0, sl
   1a308:	bl	150d0 <_start@@Base+0x128>
   1a30c:	add	r3, pc, #764	; 0x2fc
   1a310:	ldrd	r2, [r3]
   1a314:	mov	r0, #0
   1a318:	cmp	r1, r3
   1a31c:	cmpeq	r0, r2
   1a320:	bne	1b370 <_start@@Base+0x63c8>
   1a324:	mov	r1, sl
   1a328:	mov	r3, #4
   1a32c:	mov	r2, r5
   1a330:	mov	r0, r4
   1a334:	bl	1850c <_start@@Base+0x3564>
   1a338:	cmp	sl, r0
   1a33c:	mov	r1, r0
   1a340:	beq	1b370 <_start@@Base+0x63c8>
   1a344:	ldr	r3, [pc, #764]	; 1a648 <_start@@Base+0x56a0>
   1a348:	mov	r2, r5
   1a34c:	str	r3, [sp, #16]
   1a350:	ldr	r3, [pc, #756]	; 1a64c <_start@@Base+0x56a4>
   1a354:	mov	r0, r4
   1a358:	str	r3, [sp, #12]
   1a35c:	ldr	r3, [pc, #748]	; 1a650 <_start@@Base+0x56a8>
   1a360:	str	r3, [sp, #8]
   1a364:	ldr	r3, [sp, #32]
   1a368:	str	r3, [sp, #4]
   1a36c:	mov	r3, #3
   1a370:	str	r3, [sp]
   1a374:	mov	r3, #0
   1a378:	bl	26738 <flatcc_json_parser_union_type_vector@@Base>
   1a37c:	mov	r6, r0
   1a380:	b	1a4b4 <_start@@Base+0x550c>
   1a384:	add	r3, pc, #652	; 0x28c
   1a388:	ldrd	r2, [r3]
   1a38c:	bic	r0, r0, #255	; 0xff
   1a390:	cmp	r1, r3
   1a394:	cmpeq	r0, r2
   1a398:	bne	1a3e8 <_start@@Base+0x5440>
   1a39c:	mov	r1, sl
   1a3a0:	mov	r3, #7
   1a3a4:	mov	r2, r5
   1a3a8:	mov	r0, r4
   1a3ac:	bl	1850c <_start@@Base+0x3564>
   1a3b0:	cmp	sl, r0
   1a3b4:	mov	r1, r0
   1a3b8:	beq	1a3e8 <_start@@Base+0x5440>
   1a3bc:	ldr	r3, [pc, #648]	; 1a64c <_start@@Base+0x56a4>
   1a3c0:	mov	r2, r5
   1a3c4:	str	r3, [sp, #8]
   1a3c8:	ldr	r3, [sp, #32]
   1a3cc:	mov	r0, r4
   1a3d0:	str	r3, [sp, #4]
   1a3d4:	mov	r3, #3
   1a3d8:	str	r3, [sp]
   1a3dc:	mov	r3, #0
   1a3e0:	bl	2666c <flatcc_json_parser_union_vector@@Base>
   1a3e4:	b	1a37c <_start@@Base+0x53d4>
   1a3e8:	add	r1, pc, #560	; 0x230
   1a3ec:	ldrd	r0, [r1]
   1a3f0:	ldr	r2, [pc, #604]	; 1a654 <_start@@Base+0x56ac>
   1a3f4:	mvn	r3, #0
   1a3f8:	and	r3, r3, r9
   1a3fc:	and	r2, r2, r8
   1a400:	cmp	r3, r1
   1a404:	cmpeq	r2, r0
   1a408:	bne	1b310 <_start@@Base+0x6368>
   1a40c:	mov	r3, #6
   1a410:	mov	r2, r5
   1a414:	mov	r1, sl
   1a418:	mov	r0, r4
   1a41c:	bl	1850c <_start@@Base+0x3564>
   1a420:	cmp	sl, r0
   1a424:	mov	r6, r0
   1a428:	beq	1b2fc <_start@@Base+0x6354>
   1a42c:	mov	r3, #0
   1a430:	mov	r1, #3
   1a434:	ldr	r0, [r4]
   1a438:	str	r3, [sp, #28]
   1a43c:	bl	2151c <flatcc_builder_start_table@@Base>
   1a440:	cmp	r0, #0
   1a444:	bne	1a5e8 <_start@@Base+0x5640>
   1a448:	add	r3, sp, #36	; 0x24
   1a44c:	mov	r2, r5
   1a450:	mov	r1, r6
   1a454:	mov	r0, r4
   1a458:	bl	183b8 <_start@@Base+0x3410>
   1a45c:	ldr	r3, [sp, #36]	; 0x24
   1a460:	mov	r6, r0
   1a464:	cmp	r3, #0
   1a468:	bne	1a4cc <_start@@Base+0x5524>
   1a46c:	ldr	r3, [r4, #20]
   1a470:	cmp	r3, #0
   1a474:	bne	1a5e8 <_start@@Base+0x5640>
   1a478:	ldr	r0, [r4]
   1a47c:	bl	21b58 <flatcc_builder_end_table@@Base>
   1a480:	cmp	r0, #0
   1a484:	str	r0, [sp, #28]
   1a488:	beq	1a5e8 <_start@@Base+0x5640>
   1a48c:	ldr	r3, [sp, #28]
   1a490:	cmp	r3, #0
   1a494:	beq	1a2a0 <_start@@Base+0x52f8>
   1a498:	mov	r1, #0
   1a49c:	ldr	r0, [r4]
   1a4a0:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1a4a4:	cmp	r0, #0
   1a4a8:	beq	1a2a0 <_start@@Base+0x52f8>
   1a4ac:	ldr	r3, [sp, #28]
   1a4b0:	str	r3, [r0]
   1a4b4:	add	r3, sp, #24
   1a4b8:	mov	r2, r5
   1a4bc:	mov	r1, r6
   1a4c0:	mov	r0, r4
   1a4c4:	bl	16d28 <_start@@Base+0x1d80>
   1a4c8:	b	1a258 <_start@@Base+0x52b0>
   1a4cc:	mov	r2, r5
   1a4d0:	mov	r1, r6
   1a4d4:	mov	r0, r4
   1a4d8:	bl	176c0 <_start@@Base+0x2718>
   1a4dc:	mov	r1, r5
   1a4e0:	mov	sl, r0
   1a4e4:	bl	150d0 <_start@@Base+0x128>
   1a4e8:	add	r3, pc, #312	; 0x138
   1a4ec:	ldrd	r2, [r3]
   1a4f0:	cmp	r1, r3
   1a4f4:	cmpeq	r0, r2
   1a4f8:	bne	1b2d8 <_start@@Base+0x6330>
   1a4fc:	add	r6, sl, #8
   1a500:	mov	r1, r5
   1a504:	mov	r0, r6
   1a508:	bl	150d0 <_start@@Base+0x128>
   1a50c:	add	r3, pc, #284	; 0x11c
   1a510:	ldrd	r2, [r3]
   1a514:	cmp	r1, r3
   1a518:	cmpeq	r0, r2
   1a51c:	bne	1b2e4 <_start@@Base+0x633c>
   1a520:	add	sl, sl, #16
   1a524:	mov	r1, r5
   1a528:	mov	r0, sl
   1a52c:	bl	150d0 <_start@@Base+0x128>
   1a530:	add	r3, pc, #256	; 0x100
   1a534:	ldrd	r2, [r3]
   1a538:	ldr	r8, [pc, #276]	; 1a654 <_start@@Base+0x56ac>
   1a53c:	mvn	r9, #0
   1a540:	and	r9, r9, r1
   1a544:	and	r8, r8, r0
   1a548:	cmp	r9, r3
   1a54c:	cmpeq	r8, r2
   1a550:	bne	1a858 <_start@@Base+0x58b0>
   1a554:	mov	r3, #6
   1a558:	mov	r2, r5
   1a55c:	mov	r1, sl
   1a560:	mov	r0, r4
   1a564:	bl	1850c <_start@@Base+0x3564>
   1a568:	cmp	sl, r0
   1a56c:	mov	r6, r0
   1a570:	beq	1b2d4 <_start@@Base+0x632c>
   1a574:	mov	r1, #2
   1a578:	ldr	r0, [r4]
   1a57c:	bl	2151c <flatcc_builder_start_table@@Base>
   1a580:	cmp	r0, #0
   1a584:	bne	1a5d0 <_start@@Base+0x5628>
   1a588:	mov	r1, r6
   1a58c:	add	r3, sp, #44	; 0x2c
   1a590:	mov	r2, r5
   1a594:	mov	r0, r4
   1a598:	bl	183b8 <_start@@Base+0x3410>
   1a59c:	add	r9, pc, #156	; 0x9c
   1a5a0:	ldrd	r8, [r9]
   1a5a4:	mov	r6, r0
   1a5a8:	ldr	r3, [sp, #44]	; 0x2c
   1a5ac:	cmp	r3, #0
   1a5b0:	bne	1a658 <_start@@Base+0x56b0>
   1a5b4:	ldr	r3, [r4, #20]
   1a5b8:	cmp	r3, #0
   1a5bc:	bne	1a5d0 <_start@@Base+0x5628>
   1a5c0:	ldr	r0, [r4]
   1a5c4:	bl	21b58 <flatcc_builder_end_table@@Base>
   1a5c8:	subs	r8, r0, #0
   1a5cc:	bne	1b37c <_start@@Base+0x63d4>
   1a5d0:	mov	r1, r6
   1a5d4:	mov	r3, #33	; 0x21
   1a5d8:	mov	r2, r5
   1a5dc:	mov	r0, r4
   1a5e0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1a5e4:	mov	r6, r0
   1a5e8:	mov	r1, r6
   1a5ec:	mov	r3, #33	; 0x21
   1a5f0:	mov	r2, r5
   1a5f4:	mov	r0, r4
   1a5f8:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1a5fc:	mov	r6, r0
   1a600:	b	1a48c <_start@@Base+0x54e4>
   1a604:	nop			; (mov r0, r0)
   1a608:	cmnvs	lr, pc, asr r9
   1a60c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1a610:	andeq	r0, r0, r0
   1a614:	ldrbtvc	r7, [r9], #-101	; 0xffffff9b
   1a618:	cmnvs	lr, r0, lsl #18
   1a61c:	stclvs	14, cr6, [r1, #-484]!	; 0xfffffe1c
   1a620:	ldmdbvs	r8!, {}^	; <UNPREDICTABLE>
   1a624:	rsbsvc	r6, r2, r6, ror #10
   1a628:	bvs	1cf63e8 <__bss_end__@@Base+0x1cb2024>
   1a62c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1a630:	ldmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
   1a634:	rsbsvc	r6, r2, r6, ror #10
   1a638:	ldrvs	r0, [r2, -r0]!
   1a63c:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1a640:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1a644:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1a648:	andeq	r5, r1, r8, lsl #4
   1a64c:	andeq	lr, r1, r0, ror r8
   1a650:	andeq	r4, r4, r4, lsl #2
   1a654:			; <UNDEFINED> instruction: 0xffff0000
   1a658:	mov	r2, r5
   1a65c:	mov	r1, r6
   1a660:	mov	r0, r4
   1a664:	bl	176c0 <_start@@Base+0x2718>
   1a668:	mov	r1, r5
   1a66c:	mov	r6, r0
   1a670:	bl	150d0 <_start@@Base+0x128>
   1a674:	add	r3, pc, #964	; 0x3c4
   1a678:	ldrd	r2, [r3]
   1a67c:	cmp	r1, r3
   1a680:	cmpeq	r0, r2
   1a684:	bne	1a840 <_start@@Base+0x5898>
   1a688:	add	r6, r6, #8
   1a68c:	mov	r1, r5
   1a690:	mov	r0, r6
   1a694:	bl	150d0 <_start@@Base+0x128>
   1a698:	bic	r2, r0, #255	; 0xff
   1a69c:	cmp	r1, r9
   1a6a0:	cmpeq	r2, r8
   1a6a4:	bne	1a778 <_start@@Base+0x57d0>
   1a6a8:	mov	r3, #7
   1a6ac:	mov	r2, r5
   1a6b0:	mov	r1, r6
   1a6b4:	mov	r0, r4
   1a6b8:	bl	1850c <_start@@Base+0x3564>
   1a6bc:	cmp	r6, r0
   1a6c0:	mov	sl, r0
   1a6c4:	beq	1a840 <_start@@Base+0x5898>
   1a6c8:	add	fp, sp, #56	; 0x38
   1a6cc:	mov	r2, #0
   1a6d0:	mov	r3, #0
   1a6d4:	mov	r1, r0
   1a6d8:	strd	r2, [fp, #-8]!
   1a6dc:	mov	r0, r4
   1a6e0:	mov	r3, fp
   1a6e4:	mov	r2, r5
   1a6e8:	bl	179f8 <_start@@Base+0x2a50>
   1a6ec:	cmp	sl, r0
   1a6f0:	mov	r6, r0
   1a6f4:	bne	1a720 <_start@@Base+0x5778>
   1a6f8:	mov	r1, r0
   1a6fc:	str	fp, [sp]
   1a700:	ldr	r3, [pc, #872]	; 1aa70 <_start@@Base+0x5ac8>
   1a704:	mov	r2, r5
   1a708:	mov	r0, r4
   1a70c:	bl	1a0b8 <_start@@Base+0x5110>
   1a710:	cmp	r5, r0
   1a714:	cmpne	r6, r0
   1a718:	mov	r6, r0
   1a71c:	beq	1a5d0 <_start@@Base+0x5628>
   1a720:	ldrd	r2, [sp, #48]	; 0x30
   1a724:	orrs	r3, r2, r3
   1a728:	bne	1a738 <_start@@Base+0x5790>
   1a72c:	ldr	r3, [r4, #8]
   1a730:	tst	r3, #2
   1a734:	beq	1a75c <_start@@Base+0x57b4>
   1a738:	mov	r3, #8
   1a73c:	mov	r2, r3
   1a740:	mov	r1, #0
   1a744:	ldr	r0, [r4]
   1a748:	bl	224dc <flatcc_builder_table_add@@Base>
   1a74c:	cmp	r0, #0
   1a750:	beq	1a5d0 <_start@@Base+0x5628>
   1a754:	ldrd	r2, [sp, #48]	; 0x30
   1a758:	strd	r2, [r0]
   1a75c:	mov	r1, r6
   1a760:	add	r3, sp, #44	; 0x2c
   1a764:	mov	r2, r5
   1a768:	mov	r0, r4
   1a76c:	bl	16d28 <_start@@Base+0x1d80>
   1a770:	mov	r6, r0
   1a774:	b	1a5a8 <_start@@Base+0x5600>
   1a778:	add	r3, pc, #712	; 0x2c8
   1a77c:	ldrd	r2, [r3]
   1a780:	cmp	r1, r3
   1a784:	cmpeq	r0, r2
   1a788:	bne	1a840 <_start@@Base+0x5898>
   1a78c:	mov	r3, #8
   1a790:	mov	r2, r5
   1a794:	mov	r1, r6
   1a798:	mov	r0, r4
   1a79c:	bl	1850c <_start@@Base+0x3564>
   1a7a0:	cmp	r6, r0
   1a7a4:	mov	sl, r0
   1a7a8:	beq	1a840 <_start@@Base+0x5898>
   1a7ac:	add	fp, sp, #56	; 0x38
   1a7b0:	mov	r3, #0
   1a7b4:	str	r3, [fp, #-8]!
   1a7b8:	mov	r1, r0
   1a7bc:	mov	r3, fp
   1a7c0:	mov	r2, r5
   1a7c4:	mov	r0, r4
   1a7c8:	bl	18d84 <_start@@Base+0x3ddc>
   1a7cc:	cmp	sl, r0
   1a7d0:	mov	r6, r0
   1a7d4:	bne	1a800 <_start@@Base+0x5858>
   1a7d8:	mov	r1, r0
   1a7dc:	str	fp, [sp]
   1a7e0:	ldr	r3, [pc, #652]	; 1aa74 <_start@@Base+0x5acc>
   1a7e4:	mov	r2, r5
   1a7e8:	mov	r0, r4
   1a7ec:	bl	1930c <_start@@Base+0x4364>
   1a7f0:	cmp	r5, r0
   1a7f4:	cmpne	r6, r0
   1a7f8:	mov	r6, r0
   1a7fc:	beq	1a5d0 <_start@@Base+0x5628>
   1a800:	ldr	r3, [sp, #48]	; 0x30
   1a804:	cmp	r3, #0
   1a808:	bne	1a818 <_start@@Base+0x5870>
   1a80c:	ldr	r3, [r4, #8]
   1a810:	tst	r3, #2
   1a814:	beq	1a75c <_start@@Base+0x57b4>
   1a818:	mov	r3, #4
   1a81c:	mov	r2, r3
   1a820:	mov	r1, #1
   1a824:	ldr	r0, [r4]
   1a828:	bl	224dc <flatcc_builder_table_add@@Base>
   1a82c:	cmp	r0, #0
   1a830:	beq	1a5d0 <_start@@Base+0x5628>
   1a834:	ldr	r3, [sp, #48]	; 0x30
   1a838:	str	r3, [r0]
   1a83c:	b	1a75c <_start@@Base+0x57b4>
   1a840:	mov	r1, r6
   1a844:	mov	r2, r5
   1a848:	mov	r0, r4
   1a84c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1a850:	mov	r6, r0
   1a854:	b	1a75c <_start@@Base+0x57b4>
   1a858:	add	r3, pc, #496	; 0x1f0
   1a85c:	ldrd	r2, [r3]
   1a860:	and	r0, r0, #-16777216	; 0xff000000
   1a864:	cmp	r1, r3
   1a868:	cmpeq	r0, r2
   1a86c:	bne	1afc8 <_start@@Base+0x6020>
   1a870:	mov	r3, #5
   1a874:	mov	r2, r5
   1a878:	mov	r1, sl
   1a87c:	mov	r0, r4
   1a880:	bl	1850c <_start@@Base+0x3564>
   1a884:	cmp	sl, r0
   1a888:	mov	r6, r0
   1a88c:	beq	1afc4 <_start@@Base+0x601c>
   1a890:	mov	r1, #9
   1a894:	ldr	r0, [r4]
   1a898:	bl	2151c <flatcc_builder_start_table@@Base>
   1a89c:	cmp	r0, #0
   1a8a0:	bne	1a5d0 <_start@@Base+0x5628>
   1a8a4:	mov	r1, r6
   1a8a8:	add	r3, sp, #40	; 0x28
   1a8ac:	mov	r2, r5
   1a8b0:	mov	r0, r4
   1a8b4:	bl	183b8 <_start@@Base+0x3410>
   1a8b8:	add	fp, pc, #408	; 0x198
   1a8bc:	ldrd	sl, [fp]
   1a8c0:	mov	r6, r0
   1a8c4:	ldr	r3, [sp, #40]	; 0x28
   1a8c8:	cmp	r3, #0
   1a8cc:	bne	1a91c <_start@@Base+0x5974>
   1a8d0:	ldr	r8, [r4, #20]
   1a8d4:	cmp	r8, #0
   1a8d8:	bne	1a5d0 <_start@@Base+0x5628>
   1a8dc:	ldr	r0, [r4]
   1a8e0:	bl	21b58 <flatcc_builder_end_table@@Base>
   1a8e4:	subs	r9, r0, #0
   1a8e8:	beq	1a5d0 <_start@@Base+0x5628>
   1a8ec:	mov	r1, r8
   1a8f0:	ldr	r0, [r4]
   1a8f4:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1a8f8:	cmp	r0, #0
   1a8fc:	beq	1a5e8 <_start@@Base+0x5640>
   1a900:	str	r9, [r0]
   1a904:	add	r3, sp, #36	; 0x24
   1a908:	mov	r2, r5
   1a90c:	mov	r1, r6
   1a910:	mov	r0, r4
   1a914:	bl	16d28 <_start@@Base+0x1d80>
   1a918:	b	1a45c <_start@@Base+0x54b4>
   1a91c:	mov	r2, r5
   1a920:	mov	r1, r6
   1a924:	mov	r0, r4
   1a928:	bl	176c0 <_start@@Base+0x2718>
   1a92c:	mov	r1, r5
   1a930:	mov	r6, r0
   1a934:	bl	150d0 <_start@@Base+0x128>
   1a938:	add	r3, pc, #288	; 0x120
   1a93c:	ldrd	r2, [r3]
   1a940:	cmp	r1, r3
   1a944:	cmpeq	r0, r2
   1a948:	mov	r8, r0
   1a94c:	mov	r9, r1
   1a950:	bhi	1ac34 <_start@@Base+0x5c8c>
   1a954:	add	r3, pc, #268	; 0x10c
   1a958:	ldrd	r2, [r3]
   1a95c:	cmp	r1, r3
   1a960:	cmpeq	r0, r2
   1a964:	bne	1aa7c <_start@@Base+0x5ad4>
   1a968:	add	r6, r6, #8
   1a96c:	mov	r1, r5
   1a970:	mov	r0, r6
   1a974:	bl	150d0 <_start@@Base+0x128>
   1a978:	mov	r0, #0
   1a97c:	and	r1, r1, #-16777216	; 0xff000000
   1a980:	cmp	r1, #889192448	; 0x35000000
   1a984:	cmpeq	r0, #0
   1a988:	bne	1afa0 <_start@@Base+0x5ff8>
   1a98c:	mov	r3, #1
   1a990:	mov	r2, r5
   1a994:	mov	r1, r6
   1a998:	mov	r0, r4
   1a99c:	bl	1850c <_start@@Base+0x3564>
   1a9a0:	cmp	r6, r0
   1a9a4:	mov	r8, r0
   1a9a8:	beq	1afa0 <_start@@Base+0x5ff8>
   1a9ac:	add	r9, sp, #56	; 0x38
   1a9b0:	mov	r3, #0
   1a9b4:	str	r3, [r9, #-8]!
   1a9b8:	mov	r1, r0
   1a9bc:	mov	r3, r9
   1a9c0:	mov	r2, r5
   1a9c4:	mov	r0, r4
   1a9c8:	bl	18d84 <_start@@Base+0x3ddc>
   1a9cc:	cmp	r8, r0
   1a9d0:	mov	r6, r0
   1a9d4:	bne	1aa00 <_start@@Base+0x5a58>
   1a9d8:	mov	r1, r0
   1a9dc:	str	r9, [sp]
   1a9e0:	ldr	r3, [pc, #144]	; 1aa78 <_start@@Base+0x5ad0>
   1a9e4:	mov	r2, r5
   1a9e8:	mov	r0, r4
   1a9ec:	bl	1930c <_start@@Base+0x4364>
   1a9f0:	cmp	r5, r0
   1a9f4:	cmpne	r6, r0
   1a9f8:	mov	r6, r0
   1a9fc:	beq	1a5d0 <_start@@Base+0x5628>
   1aa00:	ldr	r3, [sp, #48]	; 0x30
   1aa04:	cmp	r3, #0
   1aa08:	bne	1aa18 <_start@@Base+0x5a70>
   1aa0c:	ldr	r3, [r4, #8]
   1aa10:	tst	r3, #2
   1aa14:	beq	1abbc <_start@@Base+0x5c14>
   1aa18:	mov	r3, #4
   1aa1c:	mov	r2, r3
   1aa20:	mov	r1, #1
   1aa24:	ldr	r0, [r4]
   1aa28:	bl	224dc <flatcc_builder_table_add@@Base>
   1aa2c:	cmp	r0, #0
   1aa30:	beq	1a5d0 <_start@@Base+0x5628>
   1aa34:	ldr	r3, [sp, #48]	; 0x30
   1aa38:	b	1aaec <_start@@Base+0x5b44>
   1aa3c:	nop			; (mov r0, r0)
   1aa40:	svcpl	0x00626262
   1aa44:	cmnvs	r1, r1, ror #2
   1aa48:	cmnvs	r2, pc, asr r4
   1aa4c:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1aa50:	strvs	r0, [r0, -r0]
   1aa54:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1aa58:	andeq	r0, r0, r0
   1aa5c:	cmnvs	r3, #-1946157055	; 0x8c000001
   1aa60:			; <UNDEFINED> instruction: 0xffffffff
   1aa64:	cmnvs	r3, #-2013265919	; 0x88000001
   1aa68:	teqcc	r2, r4, lsr r3
   1aa6c:	cmnvs	r1, r1, ror #2
   1aa70:	andeq	r4, r4, r4, lsl r1
   1aa74:	andeq	r4, r4, r0, lsr #2
   1aa78:	andeq	r4, r4, ip, lsr #2
   1aa7c:	add	r1, pc, #892	; 0x37c
   1aa80:	ldrd	r0, [r1]
   1aa84:	mov	r2, #0
   1aa88:	cmp	r9, r1
   1aa8c:	cmpeq	r2, r0
   1aa90:	bne	1aaf4 <_start@@Base+0x5b4c>
   1aa94:	mov	r1, r6
   1aa98:	mov	r3, #4
   1aa9c:	mov	r2, r5
   1aaa0:	mov	r0, r4
   1aaa4:	bl	1850c <_start@@Base+0x3564>
   1aaa8:	cmp	r6, r0
   1aaac:	mov	r1, r0
   1aab0:	beq	1afbc <_start@@Base+0x6014>
   1aab4:	add	r3, sp, #44	; 0x2c
   1aab8:	mov	r2, r5
   1aabc:	mov	r0, r4
   1aac0:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   1aac4:	ldr	r3, [sp, #44]	; 0x2c
   1aac8:	cmp	r3, #0
   1aacc:	mov	r6, r0
   1aad0:	beq	1a5d0 <_start@@Base+0x5628>
   1aad4:	mov	r1, #0
   1aad8:	ldr	r0, [r4]
   1aadc:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1aae0:	cmp	r0, #0
   1aae4:	beq	1a5d0 <_start@@Base+0x5628>
   1aae8:	ldr	r3, [sp, #44]	; 0x2c
   1aaec:	str	r3, [r0]
   1aaf0:	b	1abbc <_start@@Base+0x5c14>
   1aaf4:	add	r1, pc, #780	; 0x30c
   1aaf8:	ldrd	r0, [r1]
   1aafc:	cmp	r9, r1
   1ab00:	cmpeq	r8, r0
   1ab04:	bne	1abd8 <_start@@Base+0x5c30>
   1ab08:	mov	r3, #8
   1ab0c:	mov	r2, r5
   1ab10:	mov	r1, r6
   1ab14:	mov	r0, r4
   1ab18:	bl	1850c <_start@@Base+0x3564>
   1ab1c:	cmp	r6, r0
   1ab20:	mov	r8, r0
   1ab24:	beq	1afa0 <_start@@Base+0x5ff8>
   1ab28:	add	r9, sp, #56	; 0x38
   1ab2c:	mov	r2, #0
   1ab30:	mov	r3, #0
   1ab34:	mov	r1, r0
   1ab38:	strd	r2, [r9, #-8]!
   1ab3c:	mov	r0, r4
   1ab40:	mov	r3, r9
   1ab44:	mov	r2, r5
   1ab48:	bl	179f8 <_start@@Base+0x2a50>
   1ab4c:	cmp	r8, r0
   1ab50:	mov	r6, r0
   1ab54:	bne	1ab80 <_start@@Base+0x5bd8>
   1ab58:	mov	r1, r0
   1ab5c:	str	r9, [sp]
   1ab60:	ldr	r3, [pc, #696]	; 1ae20 <_start@@Base+0x5e78>
   1ab64:	mov	r2, r5
   1ab68:	mov	r0, r4
   1ab6c:	bl	1a0b8 <_start@@Base+0x5110>
   1ab70:	cmp	r5, r0
   1ab74:	cmpne	r6, r0
   1ab78:	mov	r6, r0
   1ab7c:	beq	1a5d0 <_start@@Base+0x5628>
   1ab80:	ldrd	r2, [sp, #48]	; 0x30
   1ab84:	orrs	r3, r2, r3
   1ab88:	bne	1ab98 <_start@@Base+0x5bf0>
   1ab8c:	ldr	r3, [r4, #8]
   1ab90:	tst	r3, #2
   1ab94:	beq	1abbc <_start@@Base+0x5c14>
   1ab98:	mov	r3, #8
   1ab9c:	mov	r2, r3
   1aba0:	mov	r1, #3
   1aba4:	ldr	r0, [r4]
   1aba8:	bl	224dc <flatcc_builder_table_add@@Base>
   1abac:	cmp	r0, #0
   1abb0:	beq	1a5d0 <_start@@Base+0x5628>
   1abb4:	ldrd	r2, [sp, #48]	; 0x30
   1abb8:	strd	r2, [r0]
   1abbc:	mov	r1, r6
   1abc0:	add	r3, sp, #40	; 0x28
   1abc4:	mov	r2, r5
   1abc8:	mov	r0, r4
   1abcc:	bl	16d28 <_start@@Base+0x1d80>
   1abd0:	mov	r6, r0
   1abd4:	b	1a8c4 <_start@@Base+0x591c>
   1abd8:	add	r1, pc, #560	; 0x230
   1abdc:	ldrd	r0, [r1]
   1abe0:	cmp	r9, r1
   1abe4:	cmpeq	r2, r0
   1abe8:	bne	1afb8 <_start@@Base+0x6010>
   1abec:	mov	r1, r6
   1abf0:	mov	r3, #4
   1abf4:	mov	r2, r5
   1abf8:	mov	r0, r4
   1abfc:	bl	1850c <_start@@Base+0x3564>
   1ac00:	cmp	r6, r0
   1ac04:	mov	r1, r0
   1ac08:	beq	1afa0 <_start@@Base+0x5ff8>
   1ac0c:	add	r3, sp, #44	; 0x2c
   1ac10:	mov	r2, r5
   1ac14:	mov	r0, r4
   1ac18:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   1ac1c:	ldr	r3, [sp, #44]	; 0x2c
   1ac20:	cmp	r3, #0
   1ac24:	mov	r6, r0
   1ac28:	beq	1a5d0 <_start@@Base+0x5628>
   1ac2c:	mov	r1, #2
   1ac30:	b	1aad8 <_start@@Base+0x5b30>
   1ac34:	add	r3, pc, #476	; 0x1dc
   1ac38:	ldrd	r2, [r3]
   1ac3c:	cmp	r1, r3
   1ac40:	cmpeq	r0, r2
   1ac44:	bne	1ada8 <_start@@Base+0x5e00>
   1ac48:	mov	r3, #8
   1ac4c:	mov	r2, r5
   1ac50:	mov	r1, r6
   1ac54:	mov	r0, r4
   1ac58:	bl	1850c <_start@@Base+0x3564>
   1ac5c:	cmp	r6, r0
   1ac60:	mov	r8, r0
   1ac64:	beq	1ace8 <_start@@Base+0x5d40>
   1ac68:	add	r9, sp, #56	; 0x38
   1ac6c:	mov	r2, #0
   1ac70:	mov	r3, #0
   1ac74:	mov	r1, r0
   1ac78:	strd	r2, [r9, #-8]!
   1ac7c:	mov	r0, r4
   1ac80:	mov	r3, r9
   1ac84:	mov	r2, r5
   1ac88:	bl	179f8 <_start@@Base+0x2a50>
   1ac8c:	cmp	r8, r0
   1ac90:	mov	r6, r0
   1ac94:	bne	1acc0 <_start@@Base+0x5d18>
   1ac98:	mov	r1, r0
   1ac9c:	str	r9, [sp]
   1aca0:	ldr	r3, [pc, #380]	; 1ae24 <_start@@Base+0x5e7c>
   1aca4:	mov	r2, r5
   1aca8:	mov	r0, r4
   1acac:	bl	1a0b8 <_start@@Base+0x5110>
   1acb0:	cmp	r5, r0
   1acb4:	cmpne	r6, r0
   1acb8:	mov	r6, r0
   1acbc:	beq	1a5d0 <_start@@Base+0x5628>
   1acc0:	ldrd	r2, [sp, #48]	; 0x30
   1acc4:	orrs	r3, r2, r3
   1acc8:	bne	1acd8 <_start@@Base+0x5d30>
   1accc:	ldr	r3, [r4, #8]
   1acd0:	tst	r3, #2
   1acd4:	beq	1abbc <_start@@Base+0x5c14>
   1acd8:	mov	r3, #8
   1acdc:	mov	r2, r3
   1ace0:	mov	r1, #5
   1ace4:	b	1aba4 <_start@@Base+0x5bfc>
   1ace8:	add	r6, r6, #8
   1acec:	mov	r1, r5
   1acf0:	mov	r0, r6
   1acf4:	bl	150d0 <_start@@Base+0x128>
   1acf8:	mov	r0, #0
   1acfc:	and	r1, r1, #-16777216	; 0xff000000
   1ad00:	cmp	r1, #889192448	; 0x35000000
   1ad04:	cmpeq	r0, #0
   1ad08:	bne	1afa0 <_start@@Base+0x5ff8>
   1ad0c:	mov	r3, #1
   1ad10:	mov	r2, r5
   1ad14:	mov	r1, r6
   1ad18:	mov	r0, r4
   1ad1c:	bl	1850c <_start@@Base+0x3564>
   1ad20:	cmp	r6, r0
   1ad24:	mov	r8, r0
   1ad28:	beq	1afa0 <_start@@Base+0x5ff8>
   1ad2c:	add	r9, sp, #56	; 0x38
   1ad30:	mov	r3, #0
   1ad34:	str	r3, [r9, #-8]!
   1ad38:	mov	r1, r0
   1ad3c:	mov	r3, r9
   1ad40:	mov	r2, r5
   1ad44:	mov	r0, r4
   1ad48:	bl	18d84 <_start@@Base+0x3ddc>
   1ad4c:	cmp	r8, r0
   1ad50:	mov	r6, r0
   1ad54:	bne	1ad80 <_start@@Base+0x5dd8>
   1ad58:	mov	r1, r0
   1ad5c:	str	r9, [sp]
   1ad60:	ldr	r3, [pc, #192]	; 1ae28 <_start@@Base+0x5e80>
   1ad64:	mov	r2, r5
   1ad68:	mov	r0, r4
   1ad6c:	bl	1930c <_start@@Base+0x4364>
   1ad70:	cmp	r5, r0
   1ad74:	cmpne	r6, r0
   1ad78:	mov	r6, r0
   1ad7c:	beq	1a5d0 <_start@@Base+0x5628>
   1ad80:	ldr	r3, [sp, #48]	; 0x30
   1ad84:	cmp	r3, #0
   1ad88:	bne	1ad98 <_start@@Base+0x5df0>
   1ad8c:	ldr	r3, [r4, #8]
   1ad90:	tst	r3, #2
   1ad94:	beq	1abbc <_start@@Base+0x5c14>
   1ad98:	mov	r3, #4
   1ad9c:	mov	r2, r3
   1ada0:	mov	r1, #6
   1ada4:	b	1aa24 <_start@@Base+0x5a7c>
   1ada8:	mov	r2, #0
   1adac:	cmp	r1, fp
   1adb0:	cmpeq	r2, sl
   1adb4:	bne	1ae2c <_start@@Base+0x5e84>
   1adb8:	mov	r1, r6
   1adbc:	mov	r3, #4
   1adc0:	mov	r2, r5
   1adc4:	mov	r0, r4
   1adc8:	bl	1850c <_start@@Base+0x3564>
   1adcc:	cmp	r6, r0
   1add0:	mov	r1, r0
   1add4:	beq	1afbc <_start@@Base+0x6014>
   1add8:	add	r3, sp, #44	; 0x2c
   1addc:	mov	r2, r5
   1ade0:	mov	r0, r4
   1ade4:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   1ade8:	ldr	r3, [sp, #44]	; 0x2c
   1adec:	cmp	r3, #0
   1adf0:	mov	r6, r0
   1adf4:	beq	1a5d0 <_start@@Base+0x5628>
   1adf8:	mov	r1, #4
   1adfc:	b	1aad8 <_start@@Base+0x5b30>
   1ae00:	andeq	r0, r0, r0
   1ae04:	cmnvs	r1, r1, ror #2
   1ae08:	teqcc	r2, r4, lsr r3
   1ae0c:	rsbvs	r6, r2, #536870918	; 0x20000006
   1ae10:	andeq	r0, r0, r0
   1ae14:	rsbvs	r6, r2, #536870918	; 0x20000006
   1ae18:	teqcc	r2, r4, lsr r3
   1ae1c:	cmnvs	r3, #-1946157055	; 0x8c000001
   1ae20:	andeq	r4, r4, r8, lsr r1
   1ae24:	andeq	r4, r4, r4, asr #2
   1ae28:	andeq	r4, r4, r0, asr r1
   1ae2c:	add	r3, pc, #884	; 0x374
   1ae30:	ldrd	r2, [r3]
   1ae34:	cmp	r1, r3
   1ae38:	cmpeq	r0, r2
   1ae3c:	bne	1afb8 <_start@@Base+0x6010>
   1ae40:	mov	r3, #8
   1ae44:	mov	r2, r5
   1ae48:	mov	r1, r6
   1ae4c:	mov	r0, r4
   1ae50:	bl	1850c <_start@@Base+0x3564>
   1ae54:	cmp	r6, r0
   1ae58:	mov	r8, r0
   1ae5c:	beq	1aee0 <_start@@Base+0x5f38>
   1ae60:	add	r9, sp, #56	; 0x38
   1ae64:	mov	r2, #0
   1ae68:	mov	r3, #0
   1ae6c:	mov	r1, r0
   1ae70:	strd	r2, [r9, #-8]!
   1ae74:	mov	r0, r4
   1ae78:	mov	r3, r9
   1ae7c:	mov	r2, r5
   1ae80:	bl	179f8 <_start@@Base+0x2a50>
   1ae84:	cmp	r8, r0
   1ae88:	mov	r6, r0
   1ae8c:	bne	1aeb8 <_start@@Base+0x5f10>
   1ae90:	mov	r1, r0
   1ae94:	str	r9, [sp]
   1ae98:	ldr	r3, [pc, #824]	; 1b1d8 <_start@@Base+0x6230>
   1ae9c:	mov	r2, r5
   1aea0:	mov	r0, r4
   1aea4:	bl	1a0b8 <_start@@Base+0x5110>
   1aea8:	cmp	r5, r0
   1aeac:	cmpne	r6, r0
   1aeb0:	mov	r6, r0
   1aeb4:	beq	1a5d0 <_start@@Base+0x5628>
   1aeb8:	ldrd	r2, [sp, #48]	; 0x30
   1aebc:	orrs	r3, r2, r3
   1aec0:	bne	1aed0 <_start@@Base+0x5f28>
   1aec4:	ldr	r3, [r4, #8]
   1aec8:	tst	r3, #2
   1aecc:	beq	1abbc <_start@@Base+0x5c14>
   1aed0:	mov	r3, #8
   1aed4:	mov	r2, r3
   1aed8:	mov	r1, #7
   1aedc:	b	1aba4 <_start@@Base+0x5bfc>
   1aee0:	add	r6, r6, #8
   1aee4:	mov	r1, r5
   1aee8:	mov	r0, r6
   1aeec:	bl	150d0 <_start@@Base+0x128>
   1aef0:	mov	r0, #0
   1aef4:	and	r1, r1, #-16777216	; 0xff000000
   1aef8:	cmp	r1, #889192448	; 0x35000000
   1aefc:	cmpeq	r0, #0
   1af00:	bne	1afa0 <_start@@Base+0x5ff8>
   1af04:	mov	r3, #1
   1af08:	mov	r2, r5
   1af0c:	mov	r1, r6
   1af10:	mov	r0, r4
   1af14:	bl	1850c <_start@@Base+0x3564>
   1af18:	cmp	r6, r0
   1af1c:	mov	r8, r0
   1af20:	beq	1afa0 <_start@@Base+0x5ff8>
   1af24:	add	r9, sp, #56	; 0x38
   1af28:	mov	r3, #0
   1af2c:	str	r3, [r9, #-8]!
   1af30:	mov	r1, r0
   1af34:	mov	r3, r9
   1af38:	mov	r2, r5
   1af3c:	mov	r0, r4
   1af40:	bl	18d84 <_start@@Base+0x3ddc>
   1af44:	cmp	r8, r0
   1af48:	mov	r6, r0
   1af4c:	bne	1af78 <_start@@Base+0x5fd0>
   1af50:	mov	r1, r0
   1af54:	str	r9, [sp]
   1af58:	ldr	r3, [pc, #636]	; 1b1dc <_start@@Base+0x6234>
   1af5c:	mov	r2, r5
   1af60:	mov	r0, r4
   1af64:	bl	1930c <_start@@Base+0x4364>
   1af68:	cmp	r5, r0
   1af6c:	cmpne	r6, r0
   1af70:	mov	r6, r0
   1af74:	beq	1a5d0 <_start@@Base+0x5628>
   1af78:	ldr	r3, [sp, #48]	; 0x30
   1af7c:	cmp	r3, #0
   1af80:	bne	1af90 <_start@@Base+0x5fe8>
   1af84:	ldr	r3, [r4, #8]
   1af88:	tst	r3, #2
   1af8c:	beq	1abbc <_start@@Base+0x5c14>
   1af90:	mov	r3, #4
   1af94:	mov	r2, r3
   1af98:	mov	r1, #8
   1af9c:	b	1aa24 <_start@@Base+0x5a7c>
   1afa0:	mov	r2, r5
   1afa4:	mov	r1, r6
   1afa8:	mov	r0, r4
   1afac:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1afb0:	mov	r6, r0
   1afb4:	b	1abbc <_start@@Base+0x5c14>
   1afb8:	mov	r1, r6
   1afbc:	mov	r2, r5
   1afc0:	b	1afa8 <_start@@Base+0x6000>
   1afc4:	mov	sl, r0
   1afc8:	add	r3, pc, #480	; 0x1e0
   1afcc:	ldrd	r2, [r3]
   1afd0:	cmp	r9, r3
   1afd4:	cmpeq	r8, r2
   1afd8:	bne	1b2d8 <_start@@Base+0x6330>
   1afdc:	mov	r3, #6
   1afe0:	mov	r2, r5
   1afe4:	mov	r1, sl
   1afe8:	mov	r0, r4
   1afec:	bl	1850c <_start@@Base+0x3564>
   1aff0:	cmp	sl, r0
   1aff4:	mov	r6, r0
   1aff8:	beq	1b2e4 <_start@@Base+0x633c>
   1affc:	mov	r1, #2
   1b000:	ldr	r0, [r4]
   1b004:	bl	2151c <flatcc_builder_start_table@@Base>
   1b008:	cmp	r0, #0
   1b00c:	bne	1a5d0 <_start@@Base+0x5628>
   1b010:	mov	r1, r6
   1b014:	add	r3, sp, #44	; 0x2c
   1b018:	mov	r2, r5
   1b01c:	mov	r0, r4
   1b020:	bl	183b8 <_start@@Base+0x3410>
   1b024:	add	r9, pc, #396	; 0x18c
   1b028:	ldrd	r8, [r9]
   1b02c:	mov	r6, r0
   1b030:	ldr	r3, [sp, #44]	; 0x2c
   1b034:	cmp	r3, #0
   1b038:	bne	1b060 <_start@@Base+0x60b8>
   1b03c:	ldr	r3, [r4, #20]
   1b040:	cmp	r3, #0
   1b044:	bne	1a5d0 <_start@@Base+0x5628>
   1b048:	ldr	r0, [r4]
   1b04c:	bl	21b58 <flatcc_builder_end_table@@Base>
   1b050:	subs	r8, r0, #0
   1b054:	beq	1a5d0 <_start@@Base+0x5628>
   1b058:	mov	r1, #2
   1b05c:	b	1b380 <_start@@Base+0x63d8>
   1b060:	mov	r2, r5
   1b064:	mov	r1, r6
   1b068:	mov	r0, r4
   1b06c:	bl	176c0 <_start@@Base+0x2718>
   1b070:	mov	r1, r5
   1b074:	mov	r6, r0
   1b078:	bl	150d0 <_start@@Base+0x128>
   1b07c:	add	r3, pc, #316	; 0x13c
   1b080:	ldrd	r2, [r3]
   1b084:	cmp	r1, r3
   1b088:	cmpeq	r0, r2
   1b08c:	bne	1b2c8 <_start@@Base+0x6320>
   1b090:	add	sl, r6, #8
   1b094:	mov	r1, r5
   1b098:	mov	r0, sl
   1b09c:	bl	150d0 <_start@@Base+0x128>
   1b0a0:	add	r3, pc, #288	; 0x120
   1b0a4:	ldrd	r2, [r3]
   1b0a8:	cmp	r1, r3
   1b0ac:	cmpeq	r0, r2
   1b0b0:	bne	1b1e8 <_start@@Base+0x6240>
   1b0b4:	add	r6, r6, #16
   1b0b8:	mov	r1, r5
   1b0bc:	mov	r0, r6
   1b0c0:	bl	150d0 <_start@@Base+0x128>
   1b0c4:	add	r3, pc, #260	; 0x104
   1b0c8:	ldrd	r2, [r3]
   1b0cc:	and	r0, r0, #-16777216	; 0xff000000
   1b0d0:	cmp	r1, r3
   1b0d4:	cmpeq	r0, r2
   1b0d8:	bne	1b2c8 <_start@@Base+0x6320>
   1b0dc:	mov	r3, #5
   1b0e0:	mov	r2, r5
   1b0e4:	mov	r1, r6
   1b0e8:	mov	r0, r4
   1b0ec:	bl	1850c <_start@@Base+0x3564>
   1b0f0:	cmp	r6, r0
   1b0f4:	mov	sl, r0
   1b0f8:	beq	1b2c8 <_start@@Base+0x6320>
   1b0fc:	add	fp, sp, #56	; 0x38
   1b100:	mov	r3, #0
   1b104:	str	r3, [fp, #-8]!
   1b108:	mov	r1, r0
   1b10c:	mov	r3, fp
   1b110:	mov	r2, r5
   1b114:	mov	r0, r4
   1b118:	bl	18d84 <_start@@Base+0x3ddc>
   1b11c:	cmp	sl, r0
   1b120:	mov	r6, r0
   1b124:	bne	1b150 <_start@@Base+0x61a8>
   1b128:	mov	r1, r0
   1b12c:	str	fp, [sp]
   1b130:	ldr	r3, [pc, #168]	; 1b1e0 <_start@@Base+0x6238>
   1b134:	mov	r2, r5
   1b138:	mov	r0, r4
   1b13c:	bl	1930c <_start@@Base+0x4364>
   1b140:	cmp	r5, r0
   1b144:	cmpne	r6, r0
   1b148:	mov	r6, r0
   1b14c:	beq	1a5d0 <_start@@Base+0x5628>
   1b150:	ldr	r3, [sp, #48]	; 0x30
   1b154:	cmp	r3, #0
   1b158:	bne	1b168 <_start@@Base+0x61c0>
   1b15c:	ldr	r3, [r4, #8]
   1b160:	tst	r3, #2
   1b164:	beq	1b18c <_start@@Base+0x61e4>
   1b168:	mov	r3, #4
   1b16c:	mov	r2, r3
   1b170:	mov	r1, #1
   1b174:	ldr	r0, [r4]
   1b178:	bl	224dc <flatcc_builder_table_add@@Base>
   1b17c:	cmp	r0, #0
   1b180:	beq	1a5d0 <_start@@Base+0x5628>
   1b184:	ldr	r3, [sp, #48]	; 0x30
   1b188:	str	r3, [r0]
   1b18c:	mov	r1, r6
   1b190:	add	r3, sp, #44	; 0x2c
   1b194:	mov	r2, r5
   1b198:	mov	r0, r4
   1b19c:	bl	16d28 <_start@@Base+0x1d80>
   1b1a0:	mov	r6, r0
   1b1a4:	b	1b030 <_start@@Base+0x6088>
   1b1a8:	teqcc	r2, r4, lsr r3
   1b1ac:	strbtvs	r6, [r4], #-1124	; 0xfffffb9c
   1b1b0:	ldrvs	r0, [r3, -r0]!
   1b1b4:	rsbsvc	r6, r3, #1802240	; 0x1b8000
   1b1b8:	ldrbvs	r7, [r0, #-768]!	; 0xfffffd00
   1b1bc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b1c0:	svcpl	0x00626262
   1b1c4:	cmnvs	r1, r1, ror #2
   1b1c8:	cmnvs	r2, pc, asr r4
   1b1cc:	subsvs	r7, pc, #116, 6	; 0xd0000001
   1b1d0:	movwvc	r0, #0
   1b1d4:	cmnvc	r4, #112, 10	; 0x1c000000
   1b1d8:	andeq	r4, r4, ip, asr r1
   1b1dc:	andeq	r4, r4, r8, ror #2
   1b1e0:	andeq	r4, r4, r4, ror r1
   1b1e4:	andeq	r4, r4, r0, lsl #3
   1b1e8:	bic	r0, r0, #255	; 0xff
   1b1ec:	cmp	r1, r9
   1b1f0:	cmpeq	r0, r8
   1b1f4:	bne	1b2b0 <_start@@Base+0x6308>
   1b1f8:	mov	r3, #7
   1b1fc:	mov	r2, r5
   1b200:	mov	r1, sl
   1b204:	mov	r0, r4
   1b208:	bl	1850c <_start@@Base+0x3564>
   1b20c:	cmp	sl, r0
   1b210:	mov	fp, r0
   1b214:	beq	1b2b0 <_start@@Base+0x6308>
   1b218:	add	sl, sp, #56	; 0x38
   1b21c:	mov	r2, #0
   1b220:	mov	r3, #0
   1b224:	mov	r1, r0
   1b228:	strd	r2, [sl, #-8]!
   1b22c:	mov	r0, r4
   1b230:	mov	r3, sl
   1b234:	mov	r2, r5
   1b238:	bl	179f8 <_start@@Base+0x2a50>
   1b23c:	cmp	fp, r0
   1b240:	mov	r6, r0
   1b244:	bne	1b270 <_start@@Base+0x62c8>
   1b248:	mov	r1, r0
   1b24c:	str	sl, [sp]
   1b250:	ldr	r3, [pc, #-116]	; 1b1e4 <_start@@Base+0x623c>
   1b254:	mov	r2, r5
   1b258:	mov	r0, r4
   1b25c:	bl	1a0b8 <_start@@Base+0x5110>
   1b260:	cmp	r5, r0
   1b264:	cmpne	r6, r0
   1b268:	mov	r6, r0
   1b26c:	beq	1a5d0 <_start@@Base+0x5628>
   1b270:	ldrd	r2, [sp, #48]	; 0x30
   1b274:	orrs	r3, r2, r3
   1b278:	bne	1b288 <_start@@Base+0x62e0>
   1b27c:	ldr	r3, [r4, #8]
   1b280:	tst	r3, #2
   1b284:	beq	1b18c <_start@@Base+0x61e4>
   1b288:	mov	r3, #8
   1b28c:	mov	r2, r3
   1b290:	mov	r1, #0
   1b294:	ldr	r0, [r4]
   1b298:	bl	224dc <flatcc_builder_table_add@@Base>
   1b29c:	cmp	r0, #0
   1b2a0:	beq	1a5d0 <_start@@Base+0x5628>
   1b2a4:	ldrd	r2, [sp, #48]	; 0x30
   1b2a8:	strd	r2, [r0]
   1b2ac:	b	1b18c <_start@@Base+0x61e4>
   1b2b0:	mov	r2, r5
   1b2b4:	mov	r1, sl
   1b2b8:	mov	r0, r4
   1b2bc:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b2c0:	mov	r6, r0
   1b2c4:	b	1b18c <_start@@Base+0x61e4>
   1b2c8:	mov	r2, r5
   1b2cc:	mov	r1, r6
   1b2d0:	b	1b2b8 <_start@@Base+0x6310>
   1b2d4:	mov	sl, r0
   1b2d8:	mov	r2, r5
   1b2dc:	mov	r1, sl
   1b2e0:	b	1b2ec <_start@@Base+0x6344>
   1b2e4:	mov	r2, r5
   1b2e8:	mov	r1, r6
   1b2ec:	mov	r0, r4
   1b2f0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b2f4:	mov	r6, r0
   1b2f8:	b	1a904 <_start@@Base+0x595c>
   1b2fc:	mov	r2, r5
   1b300:	mov	r1, r0
   1b304:	mov	r0, r4
   1b308:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b30c:	b	1a37c <_start@@Base+0x53d4>
   1b310:	add	r3, pc, #128	; 0x80
   1b314:	ldrd	r2, [r3]
   1b318:	and	r8, r8, #-16777216	; 0xff000000
   1b31c:	cmp	r9, r3
   1b320:	cmpeq	r8, r2
   1b324:	bne	1b370 <_start@@Base+0x63c8>
   1b328:	mov	r1, sl
   1b32c:	mov	r3, #5
   1b330:	mov	r2, r5
   1b334:	mov	r0, r4
   1b338:	bl	1850c <_start@@Base+0x3564>
   1b33c:	cmp	sl, r0
   1b340:	mov	r1, r0
   1b344:	beq	1b370 <_start@@Base+0x63c8>
   1b348:	add	r3, sp, #28
   1b34c:	mov	r2, r5
   1b350:	mov	r0, r4
   1b354:	bl	18584 <_start@@Base+0x35dc>
   1b358:	ldr	r3, [sp, #28]
   1b35c:	cmp	r3, #0
   1b360:	mov	r6, r0
   1b364:	beq	1a2a0 <_start@@Base+0x52f8>
   1b368:	mov	r1, #1
   1b36c:	b	1a49c <_start@@Base+0x54f4>
   1b370:	mov	r2, r5
   1b374:	mov	r1, sl
   1b378:	b	1b304 <_start@@Base+0x635c>
   1b37c:	mov	r1, #1
   1b380:	ldr	r0, [r4]
   1b384:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1b388:	cmp	r0, #0
   1b38c:	beq	1a5e8 <_start@@Base+0x5640>
   1b390:	str	r8, [r0]
   1b394:	b	1a904 <_start@@Base+0x595c>
   1b398:	strvs	r0, [r0, #-0]
   1b39c:	stclvs	6, cr7, [pc, #-420]!	; 1b200 <_start@@Base+0x6258>
   1b3a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3a4:	vpush	{d8-d9}
   1b3a8:	mov	r8, r2
   1b3ac:	mov	r4, r0
   1b3b0:	mov	r9, r1
   1b3b4:	sub	sp, sp, #60	; 0x3c
   1b3b8:	mov	r1, #36	; 0x24
   1b3bc:	str	r3, [sp, #20]
   1b3c0:	ldr	r2, [sp, #20]
   1b3c4:	mov	r3, #0
   1b3c8:	ldr	r0, [r0]
   1b3cc:	str	r3, [r2]
   1b3d0:	bl	2151c <flatcc_builder_start_table@@Base>
   1b3d4:	cmp	r0, #0
   1b3d8:	bne	1e7a4 <_start@@Base+0x97fc>
   1b3dc:	add	r3, sp, #36	; 0x24
   1b3e0:	str	r3, [sp]
   1b3e4:	mov	r2, r8
   1b3e8:	mov	r3, #1
   1b3ec:	mov	r1, r9
   1b3f0:	mov	r0, r4
   1b3f4:	bl	2631c <flatcc_json_parser_prepare_unions@@Base>
   1b3f8:	cmp	r8, r0
   1b3fc:	beq	1e7a4 <_start@@Base+0x97fc>
   1b400:	mov	r1, r9
   1b404:	add	r3, sp, #28
   1b408:	mov	r2, r8
   1b40c:	mov	r0, r4
   1b410:	bl	183b8 <_start@@Base+0x3410>
   1b414:	vldr	d9, [pc, #940]	; 1b7c8 <_start@@Base+0x6820>
   1b418:	vldr	s16, [pc, #992]	; 1b800 <_start@@Base+0x6858>
   1b41c:	mov	r9, r0
   1b420:	ldr	r3, [sp, #28]
   1b424:	cmp	r3, #0
   1b428:	bne	1b468 <_start@@Base+0x64c0>
   1b42c:	ldr	r3, [r4, #20]
   1b430:	cmp	r3, #0
   1b434:	bne	1e7a4 <_start@@Base+0x97fc>
   1b438:	mov	r1, #3
   1b43c:	ldr	r0, [r4]
   1b440:	bl	219dc <flatcc_builder_check_required_field@@Base>
   1b444:	cmp	r0, #0
   1b448:	bne	1e808 <_start@@Base+0x9860>
   1b44c:	mov	r1, r9
   1b450:	mov	r3, #29
   1b454:	mov	r2, r8
   1b458:	mov	r0, r4
   1b45c:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1b460:	mov	r9, r0
   1b464:	b	1e7a4 <_start@@Base+0x97fc>
   1b468:	mov	r2, r8
   1b46c:	mov	r1, r9
   1b470:	mov	r0, r4
   1b474:	bl	176c0 <_start@@Base+0x2718>
   1b478:	mov	r1, r8
   1b47c:	mov	r5, r0
   1b480:	bl	150d0 <_start@@Base+0x128>
   1b484:	add	r3, pc, #836	; 0x344
   1b488:	ldrd	r2, [r3]
   1b48c:	cmp	r1, r3
   1b490:	cmpeq	r0, r2
   1b494:	mov	r6, r0
   1b498:	mov	r7, r1
   1b49c:	bhi	1c5b8 <_start@@Base+0x7610>
   1b4a0:	add	r3, pc, #816	; 0x330
   1b4a4:	ldrd	r2, [r3]
   1b4a8:	cmp	r1, r3
   1b4ac:	cmpeq	r0, r2
   1b4b0:	bhi	1bbfc <_start@@Base+0x6c54>
   1b4b4:	add	r3, pc, #804	; 0x324
   1b4b8:	ldrd	r2, [r3]
   1b4bc:	cmp	r1, r3
   1b4c0:	cmpeq	r0, r2
   1b4c4:	bhi	1b668 <_start@@Base+0x66c0>
   1b4c8:	add	r3, pc, #792	; 0x318
   1b4cc:	ldrd	r2, [r3]
   1b4d0:	and	r6, r0, #-16777216	; 0xff000000
   1b4d4:	cmp	r1, r3
   1b4d8:	cmpeq	r6, r2
   1b4dc:	bne	1b570 <_start@@Base+0x65c8>
   1b4e0:	mov	r1, r5
   1b4e4:	mov	r3, #5
   1b4e8:	mov	r2, r8
   1b4ec:	mov	r0, r4
   1b4f0:	bl	1850c <_start@@Base+0x3564>
   1b4f4:	cmp	r5, r0
   1b4f8:	mov	r1, r0
   1b4fc:	beq	1b558 <_start@@Base+0x65b0>
   1b500:	add	r3, sp, #32
   1b504:	mov	r2, r8
   1b508:	mov	r0, r4
   1b50c:	bl	1b3a0 <_start@@Base+0x63f8>
   1b510:	ldr	r3, [sp, #32]
   1b514:	cmp	r3, #0
   1b518:	mov	r9, r0
   1b51c:	beq	1e7a4 <_start@@Base+0x97fc>
   1b520:	mov	r1, #12
   1b524:	ldr	r0, [r4]
   1b528:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1b52c:	cmp	r0, #0
   1b530:	beq	1e7a4 <_start@@Base+0x97fc>
   1b534:	ldr	r3, [sp, #32]
   1b538:	str	r3, [r0]
   1b53c:	mov	r1, r9
   1b540:	add	r3, sp, #28
   1b544:	mov	r2, r8
   1b548:	mov	r0, r4
   1b54c:	bl	16d28 <_start@@Base+0x1d80>
   1b550:	mov	r9, r0
   1b554:	b	1b420 <_start@@Base+0x6478>
   1b558:	mov	r2, r8
   1b55c:	mov	r1, r5
   1b560:	mov	r0, r4
   1b564:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b568:	mov	r9, r0
   1b56c:	b	1b53c <_start@@Base+0x6594>
   1b570:	add	r3, pc, #632	; 0x278
   1b574:	ldrd	r2, [r3]
   1b578:	cmp	r1, r3
   1b57c:	cmpeq	r6, r2
   1b580:	bne	1b650 <_start@@Base+0x66a8>
   1b584:	mov	r3, #5
   1b588:	mov	r2, r8
   1b58c:	mov	r1, r5
   1b590:	mov	r0, r4
   1b594:	bl	1850c <_start@@Base+0x3564>
   1b598:	cmp	r5, r0
   1b59c:	mov	r6, r0
   1b5a0:	beq	1b638 <_start@@Base+0x6690>
   1b5a4:	add	r5, sp, #56	; 0x38
   1b5a8:	mov	r3, #0
   1b5ac:	strb	r3, [r5, #-8]!
   1b5b0:	mov	r1, r0
   1b5b4:	mov	r3, r5
   1b5b8:	mov	r2, r8
   1b5bc:	mov	r0, r4
   1b5c0:	bl	19150 <_start@@Base+0x41a8>
   1b5c4:	cmp	r6, r0
   1b5c8:	mov	r9, r0
   1b5cc:	bne	1b5f8 <_start@@Base+0x6650>
   1b5d0:	mov	r1, r0
   1b5d4:	str	r5, [sp]
   1b5d8:	ldr	r3, [pc, #548]	; 1b804 <_start@@Base+0x685c>
   1b5dc:	mov	r2, r8
   1b5e0:	mov	r0, r4
   1b5e4:	bl	19dd0 <_start@@Base+0x4e28>
   1b5e8:	cmp	r8, r0
   1b5ec:	cmpne	r9, r0
   1b5f0:	mov	r9, r0
   1b5f4:	beq	1e7a4 <_start@@Base+0x97fc>
   1b5f8:	ldrsb	r3, [sp, #48]	; 0x30
   1b5fc:	cmp	r3, #8
   1b600:	bne	1b610 <_start@@Base+0x6668>
   1b604:	ldr	r3, [r4, #8]
   1b608:	tst	r3, #2
   1b60c:	beq	1b53c <_start@@Base+0x6594>
   1b610:	mov	r3, #1
   1b614:	mov	r2, r3
   1b618:	mov	r1, #6
   1b61c:	ldr	r0, [r4]
   1b620:	bl	224dc <flatcc_builder_table_add@@Base>
   1b624:	cmp	r0, #0
   1b628:	beq	1e7a4 <_start@@Base+0x97fc>
   1b62c:	ldrsb	r3, [sp, #48]	; 0x30
   1b630:	strb	r3, [r0]
   1b634:	b	1b53c <_start@@Base+0x6594>
   1b638:	mov	r2, r8
   1b63c:	mov	r1, r5
   1b640:	mov	r0, r4
   1b644:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b648:	mov	r9, r0
   1b64c:	b	1b53c <_start@@Base+0x6594>
   1b650:	mov	r2, r8
   1b654:	mov	r1, r5
   1b658:	mov	r0, r4
   1b65c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b660:	mov	r9, r0
   1b664:	b	1b53c <_start@@Base+0x6594>
   1b668:	ldr	r3, [pc, #408]	; 1b808 <_start@@Base+0x6860>
   1b66c:	mvn	r2, #0
   1b670:	cmp	r1, r3
   1b674:	cmpeq	r0, r2
   1b678:	bhi	1b828 <_start@@Base+0x6880>
   1b67c:	add	r3, pc, #372	; 0x174
   1b680:	ldrd	r2, [r3]
   1b684:	mov	r6, #0
   1b688:	cmp	r1, r3
   1b68c:	cmpeq	r6, r2
   1b690:	bne	1b810 <_start@@Base+0x6868>
   1b694:	mov	r3, #4
   1b698:	mov	r2, r8
   1b69c:	mov	r1, r5
   1b6a0:	mov	r0, r4
   1b6a4:	bl	1850c <_start@@Base+0x3564>
   1b6a8:	cmp	r5, r0
   1b6ac:	mov	r9, r0
   1b6b0:	beq	1b7ac <_start@@Base+0x6804>
   1b6b4:	mov	r2, #1
   1b6b8:	mvn	r3, #0
   1b6bc:	mov	r1, r2
   1b6c0:	ldr	r0, [r4]
   1b6c4:	bl	21400 <flatcc_builder_start_vector@@Base>
   1b6c8:	subs	r5, r0, #0
   1b6cc:	bne	1e7a4 <_start@@Base+0x97fc>
   1b6d0:	mov	r1, r9
   1b6d4:	add	r3, sp, #28
   1b6d8:	mov	r2, r8
   1b6dc:	mov	r0, r4
   1b6e0:	bl	18c68 <_start@@Base+0x3cc0>
   1b6e4:	ldr	r7, [pc, #288]	; 1b80c <_start@@Base+0x6864>
   1b6e8:	add	r6, sp, #48	; 0x30
   1b6ec:	mov	r9, r0
   1b6f0:	ldr	r3, [sp, #28]
   1b6f4:	cmp	r3, #0
   1b6f8:	bne	1b730 <_start@@Base+0x6788>
   1b6fc:	ldr	r0, [r4]
   1b700:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1b704:	cmp	r0, #0
   1b708:	str	r0, [sp, #32]
   1b70c:	beq	1e7a4 <_start@@Base+0x97fc>
   1b710:	mov	r1, #30
   1b714:	ldr	r0, [r4]
   1b718:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1b71c:	cmp	r0, #0
   1b720:	beq	1e7a4 <_start@@Base+0x97fc>
   1b724:	ldr	r3, [sp, #32]
   1b728:	str	r3, [r0]
   1b72c:	b	1b53c <_start@@Base+0x6594>
   1b730:	mov	r1, #1
   1b734:	ldr	r0, [r4]
   1b738:	strb	r5, [sp, #48]	; 0x30
   1b73c:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1b740:	subs	sl, r0, #0
   1b744:	beq	1e79c <_start@@Base+0x97f4>
   1b748:	mov	r1, r9
   1b74c:	mov	r3, r6
   1b750:	mov	r2, r8
   1b754:	mov	r0, r4
   1b758:	bl	18ec0 <_start@@Base+0x3f18>
   1b75c:	cmp	r9, r0
   1b760:	mov	r1, r0
   1b764:	bne	1b78c <_start@@Base+0x67e4>
   1b768:	str	r6, [sp]
   1b76c:	mov	r3, r7
   1b770:	mov	r2, r8
   1b774:	mov	r0, r4
   1b778:	bl	191f8 <_start@@Base+0x4250>
   1b77c:	cmp	r8, r0
   1b780:	cmpne	r9, r0
   1b784:	mov	r1, r0
   1b788:	beq	1e7a0 <_start@@Base+0x97f8>
   1b78c:	ldrb	r3, [sp, #48]	; 0x30
   1b790:	mov	r2, r8
   1b794:	mov	r0, r4
   1b798:	strb	r3, [sl]
   1b79c:	add	r3, sp, #28
   1b7a0:	bl	16c70 <_start@@Base+0x1cc8>
   1b7a4:	mov	r9, r0
   1b7a8:	b	1b6f0 <_start@@Base+0x6748>
   1b7ac:	mov	r1, r0
   1b7b0:	mov	r2, r8
   1b7b4:	mov	r0, r4
   1b7b8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b7bc:	mov	r9, r0
   1b7c0:	b	1b53c <_start@@Base+0x6594>
   1b7c4:	nop			; (mov r0, r0)
	...
   1b7d0:	cmnvs	r2, r0, ror #4
   1b7d4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1b7d8:			; <UNDEFINED> instruction: 0xffffffff
   1b7dc:	cdpvs	13, 6, cr6, cr1, cr4, {3}
   1b7e0:			; <UNDEFINED> instruction: 0xffffffff
   1b7e4:			; <UNDEFINED> instruction: 0x666c6577
   1b7e8:	stmdbvc	r0, {}	; <UNPREDICTABLE>
   1b7ec:	strbvs	r6, [lr, #-1389]!	; 0xfffffa93
   1b7f0:	andvc	r0, r0, #0
   1b7f4:	cmnvs	pc, #28416	; 0x6f00
   1b7f8:	andeq	r0, r0, r0
   1b7fc:			; <UNDEFINED> instruction: 0x666c6578
   1b800:	andeq	r0, r0, r0
   1b804:	andeq	r4, r4, ip, lsl #3
   1b808:	stmdavs	pc!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^	; <UNPREDICTABLE>
   1b80c:	muleq	r4, ip, r1
   1b810:	mov	r2, r8
   1b814:	mov	r1, r5
   1b818:	mov	r0, r4
   1b81c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b820:	mov	r9, r0
   1b824:	b	1b53c <_start@@Base+0x6594>
   1b828:	add	r3, pc, #928	; 0x3a0
   1b82c:	ldrd	r2, [r3]
   1b830:	cmp	r1, r3
   1b834:	cmpeq	r0, r2
   1b838:	bhi	1b94c <_start@@Base+0x69a4>
   1b83c:	ldr	r3, [pc, #932]	; 1bbe8 <_start@@Base+0x6c40>
   1b840:	mov	r2, #0
   1b844:	and	r3, r3, r1
   1b848:	mov	r7, r3
   1b84c:	ldr	r3, [pc, #920]	; 1bbec <_start@@Base+0x6c44>
   1b850:	and	r2, r2, r0
   1b854:	mov	r6, r2
   1b858:	cmp	r7, r3
   1b85c:	mov	r2, #0
   1b860:	cmpeq	r6, r2
   1b864:	bne	1b934 <_start@@Base+0x698c>
   1b868:	mov	r3, #2
   1b86c:	mov	r2, r8
   1b870:	mov	r1, r5
   1b874:	mov	r0, r4
   1b878:	bl	1850c <_start@@Base+0x3564>
   1b87c:	cmp	r5, r0
   1b880:	mov	r6, r0
   1b884:	beq	1b91c <_start@@Base+0x6974>
   1b888:	add	r5, sp, #56	; 0x38
   1b88c:	mov	r3, #0
   1b890:	strh	r3, [r5, #-8]!
   1b894:	mov	r1, r0
   1b898:	mov	r3, r5
   1b89c:	mov	r2, r8
   1b8a0:	mov	r0, r4
   1b8a4:	bl	190a0 <_start@@Base+0x40f8>
   1b8a8:	cmp	r6, r0
   1b8ac:	mov	r9, r0
   1b8b0:	bne	1b8dc <_start@@Base+0x6934>
   1b8b4:	mov	r1, r0
   1b8b8:	str	r5, [sp]
   1b8bc:	ldr	r3, [pc, #812]	; 1bbf0 <_start@@Base+0x6c48>
   1b8c0:	mov	r2, r8
   1b8c4:	mov	r0, r4
   1b8c8:	bl	19540 <_start@@Base+0x4598>
   1b8cc:	cmp	r8, r0
   1b8d0:	cmpne	r9, r0
   1b8d4:	mov	r9, r0
   1b8d8:	beq	1e7a4 <_start@@Base+0x97fc>
   1b8dc:	ldrsh	r3, [sp, #48]	; 0x30
   1b8e0:	cmp	r3, #100	; 0x64
   1b8e4:	bne	1b8f4 <_start@@Base+0x694c>
   1b8e8:	ldr	r3, [r4, #8]
   1b8ec:	tst	r3, #2
   1b8f0:	beq	1b53c <_start@@Base+0x6594>
   1b8f4:	mov	r3, #2
   1b8f8:	mov	r2, r3
   1b8fc:	mov	r1, r3
   1b900:	ldr	r0, [r4]
   1b904:	bl	224dc <flatcc_builder_table_add@@Base>
   1b908:	cmp	r0, #0
   1b90c:	beq	1e7a4 <_start@@Base+0x97fc>
   1b910:	ldrsh	r3, [sp, #48]	; 0x30
   1b914:	strh	r3, [r0]
   1b918:	b	1b53c <_start@@Base+0x6594>
   1b91c:	mov	r2, r8
   1b920:	mov	r1, r5
   1b924:	mov	r0, r4
   1b928:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b92c:	mov	r9, r0
   1b930:	b	1b53c <_start@@Base+0x6594>
   1b934:	mov	r2, r8
   1b938:	mov	r1, r5
   1b93c:	mov	r0, r4
   1b940:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1b944:	mov	r9, r0
   1b948:	b	1b53c <_start@@Base+0x6594>
   1b94c:	add	r3, pc, #644	; 0x284
   1b950:	ldrd	r2, [r3]
   1b954:	cmp	r1, r3
   1b958:	cmpeq	r0, r2
   1b95c:	bne	1bad0 <_start@@Base+0x6b28>
   1b960:	add	r5, r5, #8
   1b964:	mov	r1, r8
   1b968:	mov	r0, r5
   1b96c:	bl	150d0 <_start@@Base+0x128>
   1b970:	mov	r0, #0
   1b974:	and	r1, r1, #-16777216	; 0xff000000
   1b978:	cmp	r1, #2030043136	; 0x79000000
   1b97c:	cmpeq	r0, #0
   1b980:	bne	1bab8 <_start@@Base+0x6b10>
   1b984:	mov	r3, #1
   1b988:	mov	r2, r8
   1b98c:	mov	r1, r5
   1b990:	mov	r0, r4
   1b994:	bl	1850c <_start@@Base+0x3564>
   1b998:	cmp	r5, r0
   1b99c:	mov	r9, r0
   1b9a0:	beq	1baa0 <_start@@Base+0x6af8>
   1b9a4:	mov	r2, #1
   1b9a8:	mvn	r3, #0
   1b9ac:	mov	r1, r2
   1b9b0:	ldr	r0, [r4]
   1b9b4:	bl	21400 <flatcc_builder_start_vector@@Base>
   1b9b8:	cmp	r0, #0
   1b9bc:	bne	1e7a4 <_start@@Base+0x97fc>
   1b9c0:	mov	r1, r9
   1b9c4:	add	r3, sp, #28
   1b9c8:	mov	r2, r8
   1b9cc:	mov	r0, r4
   1b9d0:	bl	18c68 <_start@@Base+0x3cc0>
   1b9d4:	ldr	r7, [pc, #536]	; 1bbf4 <_start@@Base+0x6c4c>
   1b9d8:	mov	r6, #0
   1b9dc:	add	r5, sp, #48	; 0x30
   1b9e0:	mov	r9, r0
   1b9e4:	ldr	r3, [sp, #28]
   1b9e8:	cmp	r3, #0
   1b9ec:	bne	1ba24 <_start@@Base+0x6a7c>
   1b9f0:	ldr	r0, [r4]
   1b9f4:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1b9f8:	cmp	r0, #0
   1b9fc:	str	r0, [sp, #32]
   1ba00:	beq	1e7a4 <_start@@Base+0x97fc>
   1ba04:	mov	r1, #5
   1ba08:	ldr	r0, [r4]
   1ba0c:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1ba10:	cmp	r0, #0
   1ba14:	beq	1e7a4 <_start@@Base+0x97fc>
   1ba18:	ldr	r3, [sp, #32]
   1ba1c:	str	r3, [r0]
   1ba20:	b	1b53c <_start@@Base+0x6594>
   1ba24:	mov	r1, #1
   1ba28:	ldr	r0, [r4]
   1ba2c:	strb	r6, [sp, #48]	; 0x30
   1ba30:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1ba34:	subs	sl, r0, #0
   1ba38:	beq	1e79c <_start@@Base+0x97f4>
   1ba3c:	mov	r1, r9
   1ba40:	mov	r3, r5
   1ba44:	mov	r2, r8
   1ba48:	mov	r0, r4
   1ba4c:	bl	18ec0 <_start@@Base+0x3f18>
   1ba50:	cmp	r9, r0
   1ba54:	mov	r1, r0
   1ba58:	bne	1ba80 <_start@@Base+0x6ad8>
   1ba5c:	str	r5, [sp]
   1ba60:	mov	r3, r7
   1ba64:	mov	r2, r8
   1ba68:	mov	r0, r4
   1ba6c:	bl	191f8 <_start@@Base+0x4250>
   1ba70:	cmp	r8, r0
   1ba74:	cmpne	r9, r0
   1ba78:	mov	r1, r0
   1ba7c:	beq	1e7a0 <_start@@Base+0x97f8>
   1ba80:	ldrb	r3, [sp, #48]	; 0x30
   1ba84:	mov	r2, r8
   1ba88:	mov	r0, r4
   1ba8c:	strb	r3, [sl]
   1ba90:	add	r3, sp, #28
   1ba94:	bl	16c70 <_start@@Base+0x1cc8>
   1ba98:	mov	r9, r0
   1ba9c:	b	1b9e4 <_start@@Base+0x6a3c>
   1baa0:	mov	r1, r0
   1baa4:	mov	r2, r8
   1baa8:	mov	r0, r4
   1baac:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bab0:	mov	r9, r0
   1bab4:	b	1b53c <_start@@Base+0x6594>
   1bab8:	mov	r2, r8
   1babc:	mov	r1, r5
   1bac0:	mov	r0, r4
   1bac4:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bac8:	mov	r9, r0
   1bacc:	b	1b53c <_start@@Base+0x6594>
   1bad0:	add	r3, pc, #264	; 0x108
   1bad4:	ldrd	r2, [r3]
   1bad8:	mov	r6, #0
   1badc:	cmp	r1, r3
   1bae0:	cmpeq	r6, r2
   1bae4:	bne	1bbb4 <_start@@Base+0x6c0c>
   1bae8:	mov	r3, #4
   1baec:	mov	r2, r8
   1baf0:	mov	r1, r5
   1baf4:	mov	r0, r4
   1baf8:	bl	1850c <_start@@Base+0x3564>
   1bafc:	cmp	r5, r0
   1bb00:	mov	r6, r0
   1bb04:	beq	1bb9c <_start@@Base+0x6bf4>
   1bb08:	add	r5, sp, #56	; 0x38
   1bb0c:	mov	r3, #0
   1bb10:	strh	r3, [r5, #-8]!
   1bb14:	mov	r1, r0
   1bb18:	mov	r3, r5
   1bb1c:	mov	r2, r8
   1bb20:	mov	r0, r4
   1bb24:	bl	190a0 <_start@@Base+0x40f8>
   1bb28:	cmp	r6, r0
   1bb2c:	mov	r9, r0
   1bb30:	bne	1bb5c <_start@@Base+0x6bb4>
   1bb34:	mov	r1, r0
   1bb38:	str	r5, [sp]
   1bb3c:	ldr	r3, [pc, #180]	; 1bbf8 <_start@@Base+0x6c50>
   1bb40:	mov	r2, r8
   1bb44:	mov	r0, r4
   1bb48:	bl	19540 <_start@@Base+0x4598>
   1bb4c:	cmp	r8, r0
   1bb50:	cmpne	r9, r0
   1bb54:	mov	r9, r0
   1bb58:	beq	1e7a4 <_start@@Base+0x97fc>
   1bb5c:	ldrsh	r3, [sp, #48]	; 0x30
   1bb60:	cmp	r3, #150	; 0x96
   1bb64:	bne	1bb74 <_start@@Base+0x6bcc>
   1bb68:	ldr	r3, [r4, #8]
   1bb6c:	tst	r3, #2
   1bb70:	beq	1b53c <_start@@Base+0x6594>
   1bb74:	mov	r3, #2
   1bb78:	mov	r2, r3
   1bb7c:	mov	r1, #1
   1bb80:	ldr	r0, [r4]
   1bb84:	bl	224dc <flatcc_builder_table_add@@Base>
   1bb88:	cmp	r0, #0
   1bb8c:	beq	1e7a4 <_start@@Base+0x97fc>
   1bb90:	ldrsh	r3, [sp, #48]	; 0x30
   1bb94:	strh	r3, [r0]
   1bb98:	b	1b53c <_start@@Base+0x6594>
   1bb9c:	mov	r2, r8
   1bba0:	mov	r1, r5
   1bba4:	mov	r0, r4
   1bba8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bbac:	mov	r9, r0
   1bbb0:	b	1b53c <_start@@Base+0x6594>
   1bbb4:	mov	r2, r8
   1bbb8:	mov	r1, r5
   1bbbc:	mov	r0, r4
   1bbc0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bbc4:	mov	r9, r0
   1bbc8:	b	1b53c <_start@@Base+0x6594>
   1bbcc:	nop			; (mov r0, r0)
   1bbd0:	mrcvs	15, 3, r6, cr4, cr1, {3}
   1bbd4:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1bbd8:	mrcvs	15, 3, r6, cr4, cr2, {3}
   1bbdc:	stmdbvs	lr!, {r0, r2, r5, r6, r9, sl, ip, sp, lr}^
   1bbe0:	andeq	r0, r0, r0
   1bbe4:	stclvs	14, cr6, [r1, #-388]!	; 0xfffffe7c
   1bbe8:			; <UNDEFINED> instruction: 0xffff0000
   1bbec:	ldmdavs	r0!, {}^	; <UNPREDICTABLE>
   1bbf0:	andeq	r4, r4, r8, lsr #3
   1bbf4:			; <UNDEFINED> instruction: 0x000441b4
   1bbf8:	andeq	r4, r4, r0, asr #3
   1bbfc:	add	r3, pc, #956	; 0x3bc
   1bc00:	ldrd	r2, [r3]
   1bc04:	cmp	r1, r3
   1bc08:	cmpeq	r0, r2
   1bc0c:	bhi	1c290 <_start@@Base+0x72e8>
   1bc10:	add	r3, pc, #944	; 0x3b0
   1bc14:	ldrd	r2, [r3]
   1bc18:	cmp	r1, r3
   1bc1c:	cmpeq	r0, r2
   1bc20:	bhi	1bccc <_start@@Base+0x6d24>
   1bc24:	add	r3, pc, #932	; 0x3a4
   1bc28:	ldrd	r2, [r3]
   1bc2c:	mov	r6, #0
   1bc30:	cmp	r1, r3
   1bc34:	cmpeq	r6, r2
   1bc38:	bne	1bcb4 <_start@@Base+0x6d0c>
   1bc3c:	mov	r1, r5
   1bc40:	mov	r3, #4
   1bc44:	mov	r2, r8
   1bc48:	mov	r0, r4
   1bc4c:	bl	1850c <_start@@Base+0x3564>
   1bc50:	cmp	r5, r0
   1bc54:	mov	r1, r0
   1bc58:	beq	1bc9c <_start@@Base+0x6cf4>
   1bc5c:	add	r3, sp, #32
   1bc60:	mov	r2, r8
   1bc64:	mov	r0, r4
   1bc68:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   1bc6c:	ldr	r3, [sp, #32]
   1bc70:	cmp	r3, #0
   1bc74:	mov	r9, r0
   1bc78:	beq	1e7a4 <_start@@Base+0x97fc>
   1bc7c:	mov	r1, #3
   1bc80:	ldr	r0, [r4]
   1bc84:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1bc88:	cmp	r0, #0
   1bc8c:	beq	1e7a4 <_start@@Base+0x97fc>
   1bc90:	ldr	r3, [sp, #32]
   1bc94:	str	r3, [r0]
   1bc98:	b	1b53c <_start@@Base+0x6594>
   1bc9c:	mov	r2, r8
   1bca0:	mov	r1, r5
   1bca4:	mov	r0, r4
   1bca8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bcac:	mov	r9, r0
   1bcb0:	b	1b53c <_start@@Base+0x6594>
   1bcb4:	mov	r2, r8
   1bcb8:	mov	r1, r5
   1bcbc:	mov	r0, r4
   1bcc0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bcc4:	mov	r9, r0
   1bcc8:	b	1b53c <_start@@Base+0x6594>
   1bccc:	add	r3, pc, #772	; 0x304
   1bcd0:	ldrd	r2, [r3]
   1bcd4:	cmp	r1, r3
   1bcd8:	cmpeq	r0, r2
   1bcdc:	bne	1bdd4 <_start@@Base+0x6e2c>
   1bce0:	add	r6, r5, #8
   1bce4:	mov	r1, r8
   1bce8:	mov	r0, r6
   1bcec:	bl	150d0 <_start@@Base+0x128>
   1bcf0:	add	r3, pc, #744	; 0x2e8
   1bcf4:	ldrd	r2, [r3]
   1bcf8:	cmp	r1, r3
   1bcfc:	cmpeq	r0, r2
   1bd00:	bne	1bdbc <_start@@Base+0x6e14>
   1bd04:	add	r5, r5, #16
   1bd08:	mov	r1, r8
   1bd0c:	mov	r0, r5
   1bd10:	bl	150d0 <_start@@Base+0x128>
   1bd14:	add	r3, pc, #716	; 0x2cc
   1bd18:	ldrd	r2, [r3]
   1bd1c:	and	r0, r0, #-16777216	; 0xff000000
   1bd20:	cmp	r1, r3
   1bd24:	cmpeq	r0, r2
   1bd28:	bne	1bda4 <_start@@Base+0x6dfc>
   1bd2c:	mov	r1, r5
   1bd30:	mov	r3, #5
   1bd34:	mov	r2, r8
   1bd38:	mov	r0, r4
   1bd3c:	bl	1850c <_start@@Base+0x3564>
   1bd40:	cmp	r5, r0
   1bd44:	mov	r1, r0
   1bd48:	beq	1bd8c <_start@@Base+0x6de4>
   1bd4c:	add	r3, sp, #32
   1bd50:	mov	r2, r8
   1bd54:	mov	r0, r4
   1bd58:	bl	18440 <_start@@Base+0x3498>
   1bd5c:	ldr	r3, [sp, #32]
   1bd60:	cmp	r3, #0
   1bd64:	mov	r9, r0
   1bd68:	beq	1e7a4 <_start@@Base+0x97fc>
   1bd6c:	mov	r1, #34	; 0x22
   1bd70:	ldr	r0, [r4]
   1bd74:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1bd78:	cmp	r0, #0
   1bd7c:	beq	1e7a4 <_start@@Base+0x97fc>
   1bd80:	ldr	r3, [sp, #32]
   1bd84:	str	r3, [r0]
   1bd88:	b	1b53c <_start@@Base+0x6594>
   1bd8c:	mov	r2, r8
   1bd90:	mov	r1, r5
   1bd94:	mov	r0, r4
   1bd98:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bd9c:	mov	r9, r0
   1bda0:	b	1b53c <_start@@Base+0x6594>
   1bda4:	mov	r2, r8
   1bda8:	mov	r1, r5
   1bdac:	mov	r0, r4
   1bdb0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bdb4:	mov	r9, r0
   1bdb8:	b	1b53c <_start@@Base+0x6594>
   1bdbc:	mov	r2, r8
   1bdc0:	mov	r1, r6
   1bdc4:	mov	r0, r4
   1bdc8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1bdcc:	mov	r9, r0
   1bdd0:	b	1b53c <_start@@Base+0x6594>
   1bdd4:	add	r3, pc, #532	; 0x214
   1bdd8:	ldrd	r2, [r3]
   1bddc:	bic	r7, r1, #255	; 0xff
   1bde0:	mov	r6, #0
   1bde4:	cmp	r7, r3
   1bde8:	cmpeq	r6, r2
   1bdec:	bne	1c278 <_start@@Base+0x72d0>
   1bdf0:	mov	r3, #3
   1bdf4:	mov	r2, r8
   1bdf8:	mov	r1, r5
   1bdfc:	mov	r0, r4
   1be00:	bl	1850c <_start@@Base+0x3564>
   1be04:	cmp	r5, r0
   1be08:	mov	r9, r0
   1be0c:	beq	1c260 <_start@@Base+0x72b8>
   1be10:	mov	r3, #16
   1be14:	mov	r2, #32
   1be18:	mov	r1, #0
   1be1c:	ldr	r0, [r4]
   1be20:	bl	224dc <flatcc_builder_table_add@@Base>
   1be24:	subs	sl, r0, #0
   1be28:	beq	1e7a4 <_start@@Base+0x97fc>
   1be2c:	mov	r1, r9
   1be30:	add	r3, sp, #44	; 0x2c
   1be34:	mov	r2, r8
   1be38:	mov	r0, r4
   1be3c:	bl	183b8 <_start@@Base+0x3410>
   1be40:	add	r7, pc, #432	; 0x1b0
   1be44:	ldrd	r6, [r7]
   1be48:	mov	r9, r0
   1be4c:	ldr	r3, [sp, #44]	; 0x2c
   1be50:	cmp	r3, #0
   1be54:	beq	1b53c <_start@@Base+0x6594>
   1be58:	mov	r2, r8
   1be5c:	mov	r1, r9
   1be60:	mov	r0, r4
   1be64:	bl	176c0 <_start@@Base+0x2718>
   1be68:	mov	r1, r8
   1be6c:	mov	r5, r0
   1be70:	bl	150d0 <_start@@Base+0x128>
   1be74:	cmp	r1, r7
   1be78:	cmpeq	r0, r6
   1be7c:	bhi	1c018 <_start@@Base+0x7070>
   1be80:	add	r3, pc, #376	; 0x178
   1be84:	ldrd	r2, [r3]
   1be88:	and	r0, r0, #-16777216	; 0xff000000
   1be8c:	cmp	r1, r3
   1be90:	cmpeq	r0, r2
   1be94:	bne	1bf30 <_start@@Base+0x6f88>
   1be98:	mov	r3, #5
   1be9c:	mov	r2, r8
   1bea0:	mov	r1, r5
   1bea4:	mov	r0, r4
   1bea8:	bl	1850c <_start@@Base+0x3564>
   1beac:	cmp	r5, r0
   1beb0:	mov	r9, r0
   1beb4:	beq	1c230 <_start@@Base+0x7288>
   1beb8:	add	fp, sp, #56	; 0x38
   1bebc:	mov	r3, #0
   1bec0:	strb	r3, [fp, #-8]!
   1bec4:	mov	r1, r0
   1bec8:	mov	r3, fp
   1becc:	mov	r2, r8
   1bed0:	mov	r0, r4
   1bed4:	bl	19150 <_start@@Base+0x41a8>
   1bed8:	cmp	r9, r0
   1bedc:	mov	r5, r0
   1bee0:	bne	1bf0c <_start@@Base+0x6f64>
   1bee4:	mov	r1, r0
   1bee8:	str	fp, [sp]
   1beec:	ldr	r3, [pc, #284]	; 1c010 <_start@@Base+0x7068>
   1bef0:	mov	r2, r8
   1bef4:	mov	r0, r4
   1bef8:	bl	19dd0 <_start@@Base+0x4e28>
   1befc:	cmp	r8, r0
   1bf00:	cmpne	r5, r0
   1bf04:	beq	1c244 <_start@@Base+0x729c>
   1bf08:	mov	r5, r0
   1bf0c:	ldrsb	r3, [sp, #48]	; 0x30
   1bf10:	strb	r3, [sl, #24]
   1bf14:	add	r3, sp, #44	; 0x2c
   1bf18:	mov	r2, r8
   1bf1c:	mov	r1, r5
   1bf20:	mov	r0, r4
   1bf24:	bl	16d28 <_start@@Base+0x1d80>
   1bf28:	mov	r9, r0
   1bf2c:	b	1be4c <_start@@Base+0x6ea4>
   1bf30:	add	r3, pc, #208	; 0xd0
   1bf34:	ldrd	r2, [r3]
   1bf38:	cmp	r1, r3
   1bf3c:	cmpeq	r0, r2
   1bf40:	bne	1c230 <_start@@Base+0x7288>
   1bf44:	mov	r3, #5
   1bf48:	mov	r2, r8
   1bf4c:	mov	r1, r5
   1bf50:	mov	r0, r4
   1bf54:	bl	1850c <_start@@Base+0x3564>
   1bf58:	cmp	r5, r0
   1bf5c:	mov	r9, r0
   1bf60:	beq	1c230 <_start@@Base+0x7288>
   1bf64:	add	fp, sp, #56	; 0x38
   1bf68:	mov	r1, r0
   1bf6c:	vstmdb	fp!, {d9}
   1bf70:	mov	r2, r8
   1bf74:	mov	r0, r4
   1bf78:	mov	r3, fp
   1bf7c:	bl	25550 <flatcc_json_parser_double@@Base>
   1bf80:	cmp	r9, r0
   1bf84:	mov	r5, r0
   1bf88:	bne	1bfb4 <_start@@Base+0x700c>
   1bf8c:	mov	r1, r0
   1bf90:	str	fp, [sp]
   1bf94:	ldr	r3, [pc, #120]	; 1c014 <_start@@Base+0x706c>
   1bf98:	mov	r2, r8
   1bf9c:	mov	r0, r4
   1bfa0:	bl	17908 <_start@@Base+0x2960>
   1bfa4:	cmp	r8, r0
   1bfa8:	cmpne	r5, r0
   1bfac:	beq	1c244 <_start@@Base+0x729c>
   1bfb0:	mov	r5, r0
   1bfb4:	ldrd	r2, [sp, #48]	; 0x30
   1bfb8:	strd	r2, [sl, #16]
   1bfbc:	b	1bf14 <_start@@Base+0x6f6c>
   1bfc0:			; <UNDEFINED> instruction: 0xffffffff
   1bfc4:	strbtvc	r7, [r5], #-883	; 0xfffffc8d
   1bfc8:	cdpvs	15, 7, cr5, cr4, cr13, {3}
   1bfcc:	rsbvc	r7, r1, r5, ror #4
   1bfd0:	andeq	r0, r0, r0
   1bfd4:	cdpvs	13, 6, cr6, cr1, cr5, {3}
   1bfd8:	cdpvs	15, 7, cr5, cr4, cr14, {3}
   1bfdc:	rsbvc	r7, r1, r5, ror #4
   1bfe0:	rsbvc	r6, r1, r5, ror #6
   1bfe4:	smcvs	54867	; 0xd653
   1bfe8:	strvc	r0, [r0], #-0
   1bfec:	svcpl	0x00746573
   1bff0:	andeq	r0, r0, r0
   1bff4:	rsbvc	r7, pc, r0, lsl #6
   1bff8:	rscscc	pc, pc, #1020	; 0x3fc
   1bffc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c000:	andcc	r0, r0, #0
   1c004:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c008:	mrscc	r0, (UNDEF: 0)
   1c00c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c010:	andeq	r4, r4, ip, asr #3
   1c014:	ldrdeq	r4, [r4], -ip
   1c018:	mvn	r3, #-2013265920	; 0x88000000
   1c01c:	mvn	r2, #0
   1c020:	cmp	r1, r3
   1c024:	cmpeq	r0, r2
   1c028:	bhi	1c07c <_start@@Base+0x70d4>
   1c02c:	add	r3, pc, #932	; 0x3a4
   1c030:	ldrd	r2, [r3]
   1c034:	and	r0, r0, #-16777216	; 0xff000000
   1c038:	cmp	r1, r3
   1c03c:	cmpeq	r0, r2
   1c040:	bne	1c230 <_start@@Base+0x7288>
   1c044:	mov	r1, r5
   1c048:	mov	r3, #5
   1c04c:	mov	r2, r8
   1c050:	mov	r0, r4
   1c054:	bl	1850c <_start@@Base+0x3564>
   1c058:	cmp	r5, r0
   1c05c:	mov	r1, r0
   1c060:	beq	1c230 <_start@@Base+0x7288>
   1c064:	add	r3, sl, #26
   1c068:	mov	r2, r8
   1c06c:	mov	r0, r4
   1c070:	bl	19ef8 <_start@@Base+0x4f50>
   1c074:	mov	r5, r0
   1c078:	b	1bf14 <_start@@Base+0x6f6c>
   1c07c:	mvn	r3, #-2030043136	; 0x87000000
   1c080:	mvn	r2, #0
   1c084:	cmp	r1, r3
   1c088:	cmpeq	r0, r2
   1c08c:	bhi	1c110 <_start@@Base+0x7168>
   1c090:	mov	r3, #1
   1c094:	mov	r2, r8
   1c098:	mov	r1, r5
   1c09c:	mov	r0, r4
   1c0a0:	bl	1850c <_start@@Base+0x3564>
   1c0a4:	cmp	r5, r0
   1c0a8:	mov	r9, r0
   1c0ac:	beq	1c230 <_start@@Base+0x7288>
   1c0b0:	vmov	r3, s16
   1c0b4:	add	fp, sp, #56	; 0x38
   1c0b8:	mov	r1, r0
   1c0bc:	mov	r2, r8
   1c0c0:	str	r3, [fp, #-8]!
   1c0c4:	mov	r0, r4
   1c0c8:	mov	r3, fp
   1c0cc:	bl	25620 <flatcc_json_parser_float@@Base>
   1c0d0:	cmp	r9, r0
   1c0d4:	mov	r5, r0
   1c0d8:	bne	1c104 <_start@@Base+0x715c>
   1c0dc:	mov	r1, r0
   1c0e0:	str	fp, [sp]
   1c0e4:	ldr	r3, [pc, #764]	; 1c3e8 <_start@@Base+0x7440>
   1c0e8:	mov	r2, r8
   1c0ec:	mov	r0, r4
   1c0f0:	bl	17820 <_start@@Base+0x2878>
   1c0f4:	cmp	r8, r0
   1c0f8:	cmpne	r5, r0
   1c0fc:	beq	1c244 <_start@@Base+0x729c>
   1c100:	mov	r5, r0
   1c104:	ldr	r3, [sp, #48]	; 0x30
   1c108:	str	r3, [sl]
   1c10c:	b	1bf14 <_start@@Base+0x6f6c>
   1c110:	and	r1, r1, #-16777216	; 0xff000000
   1c114:	mov	r0, #0
   1c118:	cmp	r1, #2046820352	; 0x7a000000
   1c11c:	cmpeq	r0, #0
   1c120:	bne	1c1a4 <_start@@Base+0x71fc>
   1c124:	mov	r3, #1
   1c128:	mov	r2, r8
   1c12c:	mov	r1, r5
   1c130:	mov	r0, r4
   1c134:	bl	1850c <_start@@Base+0x3564>
   1c138:	cmp	r5, r0
   1c13c:	mov	r9, r0
   1c140:	beq	1c230 <_start@@Base+0x7288>
   1c144:	vmov	r3, s16
   1c148:	add	fp, sp, #56	; 0x38
   1c14c:	mov	r1, r0
   1c150:	mov	r2, r8
   1c154:	str	r3, [fp, #-8]!
   1c158:	mov	r0, r4
   1c15c:	mov	r3, fp
   1c160:	bl	25620 <flatcc_json_parser_float@@Base>
   1c164:	cmp	r9, r0
   1c168:	mov	r5, r0
   1c16c:	bne	1c198 <_start@@Base+0x71f0>
   1c170:	mov	r1, r0
   1c174:	str	fp, [sp]
   1c178:	ldr	r3, [pc, #620]	; 1c3ec <_start@@Base+0x7444>
   1c17c:	mov	r2, r8
   1c180:	mov	r0, r4
   1c184:	bl	17820 <_start@@Base+0x2878>
   1c188:	cmp	r8, r0
   1c18c:	cmpne	r5, r0
   1c190:	beq	1c244 <_start@@Base+0x729c>
   1c194:	mov	r5, r0
   1c198:	ldr	r3, [sp, #48]	; 0x30
   1c19c:	str	r3, [sl, #8]
   1c1a0:	b	1bf14 <_start@@Base+0x6f6c>
   1c1a4:	cmp	r1, #2030043136	; 0x79000000
   1c1a8:	cmpeq	r0, #0
   1c1ac:	bne	1c230 <_start@@Base+0x7288>
   1c1b0:	mov	r3, #1
   1c1b4:	mov	r2, r8
   1c1b8:	mov	r1, r5
   1c1bc:	mov	r0, r4
   1c1c0:	bl	1850c <_start@@Base+0x3564>
   1c1c4:	cmp	r5, r0
   1c1c8:	mov	r9, r0
   1c1cc:	beq	1c230 <_start@@Base+0x7288>
   1c1d0:	vmov	r3, s16
   1c1d4:	add	fp, sp, #56	; 0x38
   1c1d8:	mov	r1, r0
   1c1dc:	mov	r2, r8
   1c1e0:	str	r3, [fp, #-8]!
   1c1e4:	mov	r0, r4
   1c1e8:	mov	r3, fp
   1c1ec:	bl	25620 <flatcc_json_parser_float@@Base>
   1c1f0:	cmp	r9, r0
   1c1f4:	mov	r5, r0
   1c1f8:	bne	1c224 <_start@@Base+0x727c>
   1c1fc:	mov	r1, r0
   1c200:	str	fp, [sp]
   1c204:	ldr	r3, [pc, #484]	; 1c3f0 <_start@@Base+0x7448>
   1c208:	mov	r2, r8
   1c20c:	mov	r0, r4
   1c210:	bl	17820 <_start@@Base+0x2878>
   1c214:	cmp	r8, r0
   1c218:	cmpne	r5, r0
   1c21c:	beq	1c244 <_start@@Base+0x729c>
   1c220:	mov	r5, r0
   1c224:	ldr	r3, [sp, #48]	; 0x30
   1c228:	str	r3, [sl, #4]
   1c22c:	b	1bf14 <_start@@Base+0x6f6c>
   1c230:	mov	r2, r8
   1c234:	mov	r1, r5
   1c238:	mov	r0, r4
   1c23c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1c240:	b	1c074 <_start@@Base+0x70cc>
   1c244:	mov	r1, r0
   1c248:	mov	r3, #33	; 0x21
   1c24c:	mov	r2, r8
   1c250:	mov	r0, r4
   1c254:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1c258:	mov	r9, r0
   1c25c:	b	1b53c <_start@@Base+0x6594>
   1c260:	mov	r1, r0
   1c264:	mov	r2, r8
   1c268:	mov	r0, r4
   1c26c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1c270:	mov	r9, r0
   1c274:	b	1b53c <_start@@Base+0x6594>
   1c278:	mov	r2, r8
   1c27c:	mov	r1, r5
   1c280:	mov	r0, r4
   1c284:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1c288:	mov	r9, r0
   1c28c:	b	1b53c <_start@@Base+0x6594>
   1c290:	add	r3, pc, #328	; 0x148
   1c294:	ldrd	r2, [r3]
   1c298:	and	sl, r0, #-16777216	; 0xff000000
   1c29c:	cmp	r1, r3
   1c2a0:	cmpeq	sl, r2
   1c2a4:	bne	1c380 <_start@@Base+0x73d8>
   1c2a8:	mov	r3, #5
   1c2ac:	mov	r2, r8
   1c2b0:	mov	r1, r5
   1c2b4:	mov	r0, r4
   1c2b8:	bl	1850c <_start@@Base+0x3564>
   1c2bc:	cmp	r5, r0
   1c2c0:	mov	r9, r0
   1c2c4:	beq	1c5a0 <_start@@Base+0x75f8>
   1c2c8:	mvn	r3, #-1073741824	; 0xc0000000
   1c2cc:	mov	r2, #2
   1c2d0:	mov	r1, #4
   1c2d4:	ldr	r0, [r4]
   1c2d8:	bl	21400 <flatcc_builder_start_vector@@Base>
   1c2dc:	cmp	r0, #0
   1c2e0:	bne	1e7a4 <_start@@Base+0x97fc>
   1c2e4:	mov	r1, r9
   1c2e8:	add	r3, sp, #28
   1c2ec:	mov	r2, r8
   1c2f0:	mov	r0, r4
   1c2f4:	bl	18c68 <_start@@Base+0x3cc0>
   1c2f8:	mov	r5, #1
   1c2fc:	mov	r9, r0
   1c300:	ldr	r3, [sp, #28]
   1c304:	cmp	r3, #0
   1c308:	bne	1c340 <_start@@Base+0x7398>
   1c30c:	ldr	r0, [r4]
   1c310:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1c314:	cmp	r0, #0
   1c318:	str	r0, [sp, #32]
   1c31c:	beq	1e7a4 <_start@@Base+0x97fc>
   1c320:	mov	r1, #9
   1c324:	ldr	r0, [r4]
   1c328:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1c32c:	cmp	r0, #0
   1c330:	beq	1e7a4 <_start@@Base+0x97fc>
   1c334:	ldr	r3, [sp, #32]
   1c338:	str	r3, [r0]
   1c33c:	b	1b53c <_start@@Base+0x6594>
   1c340:	mov	r1, r5
   1c344:	ldr	r0, [r4]
   1c348:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1c34c:	subs	r3, r0, #0
   1c350:	beq	1e7a4 <_start@@Base+0x97fc>
   1c354:	mov	r1, r9
   1c358:	mov	r2, r8
   1c35c:	mov	r0, r4
   1c360:	bl	19ef8 <_start@@Base+0x4f50>
   1c364:	add	r3, sp, #28
   1c368:	mov	r2, r8
   1c36c:	mov	r1, r0
   1c370:	mov	r0, r4
   1c374:	bl	16c70 <_start@@Base+0x1cc8>
   1c378:	mov	r9, r0
   1c37c:	b	1c300 <_start@@Base+0x7358>
   1c380:	mov	r3, #4
   1c384:	mov	r2, r8
   1c388:	mov	r1, r5
   1c38c:	mov	r0, r4
   1c390:	bl	1850c <_start@@Base+0x3564>
   1c394:	cmp	r5, r0
   1c398:	mov	r9, r0
   1c39c:	beq	1c3f8 <_start@@Base+0x7450>
   1c3a0:	ldr	r3, [pc, #76]	; 1c3f4 <_start@@Base+0x744c>
   1c3a4:	mov	r1, r0
   1c3a8:	str	r3, [sp, #8]
   1c3ac:	ldr	r3, [sp, #36]	; 0x24
   1c3b0:	mov	r2, r8
   1c3b4:	str	r3, [sp, #4]
   1c3b8:	mov	r3, #8
   1c3bc:	str	r3, [sp]
   1c3c0:	mov	r0, r4
   1c3c4:	mov	r3, #0
   1c3c8:	bl	263dc <flatcc_json_parser_union@@Base>
   1c3cc:	mov	r9, r0
   1c3d0:	b	1b53c <_start@@Base+0x6594>
   1c3d4:	nop			; (mov r0, r0)
   1c3d8:	movwcc	r0, #0
   1c3dc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c3e0:	strcc	r0, [r0], #-0
   1c3e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c3e8:	andeq	r4, r4, r8, ror #3
   1c3ec:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1c3f0:	andeq	r4, r4, r0, lsl #4
   1c3f4:	andeq	lr, r1, r0, ror r8
   1c3f8:	add	r3, pc, #816	; 0x330
   1c3fc:	ldrd	r2, [r3]
   1c400:	cmp	r7, r3
   1c404:	cmpeq	sl, r2
   1c408:	bne	1c4e4 <_start@@Base+0x753c>
   1c40c:	mov	r1, r0
   1c410:	mov	r3, #5
   1c414:	mov	r2, r8
   1c418:	mov	r0, r4
   1c41c:	bl	1850c <_start@@Base+0x3564>
   1c420:	cmp	r9, r0
   1c424:	mov	r5, r0
   1c428:	beq	1c5a0 <_start@@Base+0x75f8>
   1c42c:	mvn	r3, #-1073741824	; 0xc0000000
   1c430:	mov	r2, #2
   1c434:	mov	r1, #4
   1c438:	ldr	r0, [r4]
   1c43c:	bl	21400 <flatcc_builder_start_vector@@Base>
   1c440:	cmp	r0, #0
   1c444:	bne	1e848 <_start@@Base+0x98a0>
   1c448:	mov	r1, r5
   1c44c:	add	r3, sp, #28
   1c450:	mov	r2, r8
   1c454:	mov	r0, r4
   1c458:	bl	18c68 <_start@@Base+0x3cc0>
   1c45c:	mov	r5, #1
   1c460:	mov	r9, r0
   1c464:	ldr	r3, [sp, #28]
   1c468:	cmp	r3, #0
   1c46c:	bne	1c4a4 <_start@@Base+0x74fc>
   1c470:	ldr	r0, [r4]
   1c474:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1c478:	cmp	r0, #0
   1c47c:	str	r0, [sp, #32]
   1c480:	beq	1e7a4 <_start@@Base+0x97fc>
   1c484:	mov	r1, #31
   1c488:	ldr	r0, [r4]
   1c48c:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1c490:	cmp	r0, #0
   1c494:	beq	1e7a4 <_start@@Base+0x97fc>
   1c498:	ldr	r3, [sp, #32]
   1c49c:	str	r3, [r0]
   1c4a0:	b	1b53c <_start@@Base+0x6594>
   1c4a4:	mov	r1, r5
   1c4a8:	ldr	r0, [r4]
   1c4ac:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1c4b0:	subs	r3, r0, #0
   1c4b4:	beq	1e7a4 <_start@@Base+0x97fc>
   1c4b8:	mov	r1, r9
   1c4bc:	mov	r2, r8
   1c4c0:	mov	r0, r4
   1c4c4:	bl	19ef8 <_start@@Base+0x4f50>
   1c4c8:	add	r3, sp, #28
   1c4cc:	mov	r2, r8
   1c4d0:	mov	r1, r0
   1c4d4:	mov	r0, r4
   1c4d8:	bl	16c70 <_start@@Base+0x1cc8>
   1c4dc:	mov	r9, r0
   1c4e0:	b	1c464 <_start@@Base+0x74bc>
   1c4e4:	add	r3, pc, #588	; 0x24c
   1c4e8:	ldrd	r2, [r3]
   1c4ec:	cmp	r7, r3
   1c4f0:	cmpeq	r6, r2
   1c4f4:	bne	1c5a0 <_start@@Base+0x75f8>
   1c4f8:	add	r9, r0, #8
   1c4fc:	mov	r1, r8
   1c500:	mov	r0, r9
   1c504:	bl	150d0 <_start@@Base+0x128>
   1c508:	mov	r0, #0
   1c50c:	and	r1, r1, #-16777216	; 0xff000000
   1c510:	cmp	r1, #1694498816	; 0x65000000
   1c514:	cmpeq	r0, #0
   1c518:	bne	1c588 <_start@@Base+0x75e0>
   1c51c:	mov	r1, r9
   1c520:	mov	r3, #1
   1c524:	mov	r2, r8
   1c528:	mov	r0, r4
   1c52c:	bl	1850c <_start@@Base+0x3564>
   1c530:	cmp	r9, r0
   1c534:	mov	r1, r0
   1c538:	beq	1c574 <_start@@Base+0x75cc>
   1c53c:	ldr	r3, [pc, #540]	; 1c760 <_start@@Base+0x77b8>
   1c540:	mov	r2, r8
   1c544:	str	r3, [sp, #12]
   1c548:	ldr	r3, [pc, #532]	; 1c764 <_start@@Base+0x77bc>
   1c54c:	mov	r0, r4
   1c550:	str	r3, [sp, #8]
   1c554:	ldr	r3, [sp, #36]	; 0x24
   1c558:	str	r3, [sp, #4]
   1c55c:	mov	r3, #8
   1c560:	str	r3, [sp]
   1c564:	mov	r3, #0
   1c568:	bl	264e8 <flatcc_json_parser_union_type@@Base>
   1c56c:	mov	r9, r0
   1c570:	b	1b53c <_start@@Base+0x6594>
   1c574:	mov	r2, r8
   1c578:	mov	r0, r4
   1c57c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1c580:	mov	r9, r0
   1c584:	b	1b53c <_start@@Base+0x6594>
   1c588:	mov	r1, r9
   1c58c:	mov	r2, r8
   1c590:	mov	r0, r4
   1c594:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1c598:	mov	r9, r0
   1c59c:	b	1b53c <_start@@Base+0x6594>
   1c5a0:	mov	r1, r9
   1c5a4:	mov	r2, r8
   1c5a8:	mov	r0, r4
   1c5ac:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1c5b0:	mov	r9, r0
   1c5b4:	b	1b53c <_start@@Base+0x6594>
   1c5b8:	add	r3, pc, #384	; 0x180
   1c5bc:	ldrd	r2, [r3]
   1c5c0:	cmp	r1, r3
   1c5c4:	cmpeq	r0, r2
   1c5c8:	bhi	1d8b4 <_start@@Base+0x890c>
   1c5cc:	add	r3, pc, #372	; 0x174
   1c5d0:	ldrd	r2, [r3]
   1c5d4:	cmp	r1, r3
   1c5d8:	cmpeq	r0, r2
   1c5dc:	bne	1ce7c <_start@@Base+0x7ed4>
   1c5e0:	add	r6, r5, #8
   1c5e4:	mov	r1, r8
   1c5e8:	mov	r0, r6
   1c5ec:	bl	150d0 <_start@@Base+0x128>
   1c5f0:	add	r3, pc, #344	; 0x158
   1c5f4:	ldrd	r2, [r3]
   1c5f8:	cmp	r1, r3
   1c5fc:	cmpeq	r0, r2
   1c600:	bhi	1ca6c <_start@@Base+0x7ac4>
   1c604:	add	r3, pc, #332	; 0x14c
   1c608:	ldrd	r2, [r3]
   1c60c:	cmp	r1, r3
   1c610:	cmpeq	r0, r2
   1c614:	bne	1c76c <_start@@Base+0x77c4>
   1c618:	mov	r3, #8
   1c61c:	mov	r2, r8
   1c620:	mov	r1, r6
   1c624:	mov	r0, r4
   1c628:	bl	1850c <_start@@Base+0x3564>
   1c62c:	cmp	r6, r0
   1c630:	mov	r9, r0
   1c634:	beq	1ca50 <_start@@Base+0x7aa8>
   1c638:	mov	r2, #1
   1c63c:	mvn	r3, #0
   1c640:	mov	r1, r2
   1c644:	ldr	r0, [r4]
   1c648:	bl	21400 <flatcc_builder_start_vector@@Base>
   1c64c:	subs	r5, r0, #0
   1c650:	bne	1e7a4 <_start@@Base+0x97fc>
   1c654:	mov	r1, r9
   1c658:	add	r3, sp, #28
   1c65c:	mov	r2, r8
   1c660:	mov	r0, r4
   1c664:	bl	18c68 <_start@@Base+0x3cc0>
   1c668:	ldr	r7, [pc, #248]	; 1c768 <_start@@Base+0x77c0>
   1c66c:	add	r6, sp, #48	; 0x30
   1c670:	mov	r9, r0
   1c674:	ldr	r3, [sp, #28]
   1c678:	cmp	r3, #0
   1c67c:	bne	1c6b4 <_start@@Base+0x770c>
   1c680:	ldr	r0, [r4]
   1c684:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1c688:	cmp	r0, #0
   1c68c:	str	r0, [sp, #32]
   1c690:	beq	1e7a4 <_start@@Base+0x97fc>
   1c694:	mov	r1, #24
   1c698:	ldr	r0, [r4]
   1c69c:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1c6a0:	cmp	r0, #0
   1c6a4:	beq	1e7a4 <_start@@Base+0x97fc>
   1c6a8:	ldr	r3, [sp, #32]
   1c6ac:	str	r3, [r0]
   1c6b0:	b	1b53c <_start@@Base+0x6594>
   1c6b4:	mov	r1, #1
   1c6b8:	ldr	r0, [r4]
   1c6bc:	strb	r5, [sp, #48]	; 0x30
   1c6c0:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1c6c4:	subs	sl, r0, #0
   1c6c8:	beq	1e79c <_start@@Base+0x97f4>
   1c6cc:	mov	r1, r9
   1c6d0:	mov	r3, r6
   1c6d4:	mov	r2, r8
   1c6d8:	mov	r0, r4
   1c6dc:	bl	18f54 <_start@@Base+0x3fac>
   1c6e0:	cmp	r9, r0
   1c6e4:	mov	r1, r0
   1c6e8:	bne	1c710 <_start@@Base+0x7768>
   1c6ec:	str	r6, [sp]
   1c6f0:	mov	r3, r7
   1c6f4:	mov	r2, r8
   1c6f8:	mov	r0, r4
   1c6fc:	bl	17710 <_start@@Base+0x2768>
   1c700:	cmp	r8, r0
   1c704:	cmpne	r9, r0
   1c708:	mov	r1, r0
   1c70c:	beq	1e7a0 <_start@@Base+0x97f8>
   1c710:	ldrb	r3, [sp, #48]	; 0x30
   1c714:	mov	r2, r8
   1c718:	mov	r0, r4
   1c71c:	strb	r3, [sl]
   1c720:	add	r3, sp, #28
   1c724:	bl	16c70 <_start@@Base+0x1cc8>
   1c728:	mov	r9, r0
   1c72c:	b	1c674 <_start@@Base+0x76cc>
   1c730:	strcc	r0, [r0, #-0]
   1c734:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c738:	svcpl	0x00747970
   1c73c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c740:	shsub8vs	pc, r2, pc	; <UNPREDICTABLE>
   1c744:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c748:	cmnvs	r2, r1, ror #4
   1c74c:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1c750:	ldrbtvc	r6, [r2], #-2413	; 0xfffff693
   1c754:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c758:	svcvs	0x006f6c73
   1c75c:	stmdbvc	pc!, {r1, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1c760:	andeq	lr, r1, r0, ror r8
   1c764:	andeq	r4, r4, ip, lsl #4
   1c768:	andeq	r4, r4, ip, lsl r2
   1c76c:	add	r3, pc, #972	; 0x3cc
   1c770:	ldrd	r2, [r3]
   1c774:	cmp	r1, r3
   1c778:	cmpeq	r0, r2
   1c77c:	bne	1ca54 <_start@@Base+0x7aac>
   1c780:	add	r5, r5, #16
   1c784:	mov	r1, r8
   1c788:	mov	r0, r5
   1c78c:	bl	150d0 <_start@@Base+0x128>
   1c790:	add	r3, pc, #944	; 0x3b0
   1c794:	ldrd	r2, [r3]
   1c798:	bic	r0, r0, #255	; 0xff
   1c79c:	cmp	r1, r3
   1c7a0:	cmpeq	r0, r2
   1c7a4:	bne	1ca38 <_start@@Base+0x7a90>
   1c7a8:	mov	r3, #7
   1c7ac:	mov	r2, r8
   1c7b0:	mov	r1, r5
   1c7b4:	mov	r0, r4
   1c7b8:	bl	1850c <_start@@Base+0x3564>
   1c7bc:	cmp	r5, r0
   1c7c0:	mov	r9, r0
   1c7c4:	beq	1ca20 <_start@@Base+0x7a78>
   1c7c8:	mvn	r3, #-536870912	; 0xe0000000
   1c7cc:	mov	r2, #4
   1c7d0:	mov	r1, #8
   1c7d4:	ldr	r0, [r4]
   1c7d8:	bl	21400 <flatcc_builder_start_vector@@Base>
   1c7dc:	cmp	r0, #0
   1c7e0:	bne	1e7a4 <_start@@Base+0x97fc>
   1c7e4:	add	r3, sp, #28
   1c7e8:	mov	r2, r8
   1c7ec:	mov	r1, r9
   1c7f0:	mov	r0, r4
   1c7f4:	bl	18c68 <_start@@Base+0x3cc0>
   1c7f8:	ldr	r3, [sp, #28]
   1c7fc:	mov	r9, r0
   1c800:	cmp	r3, #0
   1c804:	bne	1c83c <_start@@Base+0x7894>
   1c808:	ldr	r0, [r4]
   1c80c:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1c810:	cmp	r0, #0
   1c814:	str	r0, [sp, #32]
   1c818:	beq	1e7a4 <_start@@Base+0x97fc>
   1c81c:	mov	r1, #29
   1c820:	ldr	r0, [r4]
   1c824:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1c828:	cmp	r0, #0
   1c82c:	beq	1e7a4 <_start@@Base+0x97fc>
   1c830:	ldr	r3, [sp, #32]
   1c834:	str	r3, [r0]
   1c838:	b	1b53c <_start@@Base+0x6594>
   1c83c:	mov	r1, #1
   1c840:	ldr	r0, [r4]
   1c844:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1c848:	subs	sl, r0, #0
   1c84c:	beq	1e7a4 <_start@@Base+0x97fc>
   1c850:	add	r3, sp, #44	; 0x2c
   1c854:	mov	r2, r8
   1c858:	mov	r1, r9
   1c85c:	mov	r0, r4
   1c860:	bl	183b8 <_start@@Base+0x3410>
   1c864:	ldr	r3, [sp, #44]	; 0x2c
   1c868:	cmp	r3, #0
   1c86c:	bne	1c888 <_start@@Base+0x78e0>
   1c870:	mov	r1, r0
   1c874:	add	r3, sp, #28
   1c878:	mov	r2, r8
   1c87c:	mov	r0, r4
   1c880:	bl	16c70 <_start@@Base+0x1cc8>
   1c884:	b	1c7f8 <_start@@Base+0x7850>
   1c888:	mov	r2, r8
   1c88c:	mov	r1, r0
   1c890:	mov	r0, r4
   1c894:	bl	176c0 <_start@@Base+0x2718>
   1c898:	mov	r1, r8
   1c89c:	ldr	r7, [pc, #700]	; 1cb60 <_start@@Base+0x7bb8>
   1c8a0:	mov	r6, #0
   1c8a4:	mov	r5, r0
   1c8a8:	bl	150d0 <_start@@Base+0x128>
   1c8ac:	ldr	r3, [pc, #688]	; 1cb64 <_start@@Base+0x7bbc>
   1c8b0:	mov	r2, #0
   1c8b4:	and	r3, r3, r1
   1c8b8:	and	r2, r2, r0
   1c8bc:	cmp	r3, r7
   1c8c0:	cmpeq	r2, r6
   1c8c4:	bne	1c95c <_start@@Base+0x79b4>
   1c8c8:	mov	r3, #2
   1c8cc:	mov	r2, r8
   1c8d0:	mov	r1, r5
   1c8d4:	mov	r0, r4
   1c8d8:	bl	1850c <_start@@Base+0x3564>
   1c8dc:	cmp	r5, r0
   1c8e0:	mov	r9, r0
   1c8e4:	beq	1c9f0 <_start@@Base+0x7a48>
   1c8e8:	add	fp, sp, #56	; 0x38
   1c8ec:	mov	r3, #0
   1c8f0:	str	r3, [fp, #-8]!
   1c8f4:	mov	r1, r0
   1c8f8:	mov	r3, fp
   1c8fc:	mov	r2, r8
   1c900:	mov	r0, r4
   1c904:	bl	18d84 <_start@@Base+0x3ddc>
   1c908:	cmp	r9, r0
   1c90c:	mov	r5, r0
   1c910:	bne	1c93c <_start@@Base+0x7994>
   1c914:	mov	r1, r0
   1c918:	str	fp, [sp]
   1c91c:	ldr	r3, [pc, #580]	; 1cb68 <_start@@Base+0x7bc0>
   1c920:	mov	r2, r8
   1c924:	mov	r0, r4
   1c928:	bl	1930c <_start@@Base+0x4364>
   1c92c:	cmp	r8, r0
   1c930:	cmpne	r5, r0
   1c934:	beq	1ca08 <_start@@Base+0x7a60>
   1c938:	mov	r5, r0
   1c93c:	ldr	r3, [sp, #48]	; 0x30
   1c940:	str	r3, [sl]
   1c944:	add	r3, sp, #44	; 0x2c
   1c948:	mov	r2, r8
   1c94c:	mov	r1, r5
   1c950:	mov	r0, r4
   1c954:	bl	16d28 <_start@@Base+0x1d80>
   1c958:	b	1c864 <_start@@Base+0x78bc>
   1c95c:	add	r3, pc, #492	; 0x1ec
   1c960:	ldrd	r2, [r3]
   1c964:	cmp	r1, r3
   1c968:	cmpeq	r0, r2
   1c96c:	bne	1c9f0 <_start@@Base+0x7a48>
   1c970:	mov	r3, #8
   1c974:	mov	r2, r8
   1c978:	mov	r1, r5
   1c97c:	mov	r0, r4
   1c980:	bl	1850c <_start@@Base+0x3564>
   1c984:	cmp	r5, r0
   1c988:	mov	r9, r0
   1c98c:	beq	1c9f0 <_start@@Base+0x7a48>
   1c990:	add	fp, sp, #56	; 0x38
   1c994:	mov	r3, #0
   1c998:	str	r3, [fp, #-8]!
   1c99c:	mov	r1, r0
   1c9a0:	mov	r3, fp
   1c9a4:	mov	r2, r8
   1c9a8:	mov	r0, r4
   1c9ac:	bl	18d84 <_start@@Base+0x3ddc>
   1c9b0:	cmp	r9, r0
   1c9b4:	mov	r5, r0
   1c9b8:	bne	1c9e4 <_start@@Base+0x7a3c>
   1c9bc:	mov	r1, r0
   1c9c0:	str	fp, [sp]
   1c9c4:	ldr	r3, [pc, #416]	; 1cb6c <_start@@Base+0x7bc4>
   1c9c8:	mov	r2, r8
   1c9cc:	mov	r0, r4
   1c9d0:	bl	1930c <_start@@Base+0x4364>
   1c9d4:	cmp	r8, r0
   1c9d8:	cmpne	r5, r0
   1c9dc:	beq	1ca08 <_start@@Base+0x7a60>
   1c9e0:	mov	r5, r0
   1c9e4:	ldr	r3, [sp, #48]	; 0x30
   1c9e8:	str	r3, [sl, #4]
   1c9ec:	b	1c944 <_start@@Base+0x799c>
   1c9f0:	mov	r1, r5
   1c9f4:	mov	r2, r8
   1c9f8:	mov	r0, r4
   1c9fc:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca00:	mov	r5, r0
   1ca04:	b	1c944 <_start@@Base+0x799c>
   1ca08:	mov	r1, r0
   1ca0c:	mov	r3, #33	; 0x21
   1ca10:	mov	r2, r8
   1ca14:	mov	r0, r4
   1ca18:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1ca1c:	b	1c870 <_start@@Base+0x78c8>
   1ca20:	mov	r1, r0
   1ca24:	mov	r2, r8
   1ca28:	mov	r0, r4
   1ca2c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca30:	mov	r9, r0
   1ca34:	b	1b53c <_start@@Base+0x6594>
   1ca38:	mov	r2, r8
   1ca3c:	mov	r1, r5
   1ca40:	mov	r0, r4
   1ca44:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca48:	mov	r9, r0
   1ca4c:	b	1b53c <_start@@Base+0x6594>
   1ca50:	mov	r6, r0
   1ca54:	mov	r2, r8
   1ca58:	mov	r1, r6
   1ca5c:	mov	r0, r4
   1ca60:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ca64:	mov	r9, r0
   1ca68:	b	1b53c <_start@@Base+0x6594>
   1ca6c:	add	r3, pc, #228	; 0xe4
   1ca70:	ldrd	r2, [r3]
   1ca74:	cmp	r1, r3
   1ca78:	cmpeq	r0, r2
   1ca7c:	bne	1cd14 <_start@@Base+0x7d6c>
   1ca80:	add	r5, r5, #16
   1ca84:	mov	r1, r8
   1ca88:	mov	r0, r5
   1ca8c:	bl	150d0 <_start@@Base+0x128>
   1ca90:	ldr	r7, [pc, #204]	; 1cb64 <_start@@Base+0x7bbc>
   1ca94:	ldr	r3, [pc, #212]	; 1cb70 <_start@@Base+0x7bc8>
   1ca98:	mov	r6, #0
   1ca9c:	mov	r2, #0
   1caa0:	and	r7, r7, r1
   1caa4:	and	r6, r6, r0
   1caa8:	cmp	r7, r3
   1caac:	cmpeq	r6, r2
   1cab0:	bne	1cbe8 <_start@@Base+0x7c40>
   1cab4:	mov	r3, #2
   1cab8:	mov	r2, r8
   1cabc:	mov	r1, r5
   1cac0:	mov	r0, r4
   1cac4:	bl	1850c <_start@@Base+0x3564>
   1cac8:	cmp	r5, r0
   1cacc:	mov	r9, r0
   1cad0:	beq	1cbd0 <_start@@Base+0x7c28>
   1cad4:	ldr	r0, [r4]
   1cad8:	bl	21458 <flatcc_builder_start_offset_vector@@Base>
   1cadc:	cmp	r0, #0
   1cae0:	bne	1e7a4 <_start@@Base+0x97fc>
   1cae4:	mov	r1, r9
   1cae8:	add	r3, sp, #28
   1caec:	mov	r2, r8
   1caf0:	mov	r0, r4
   1caf4:	bl	18c68 <_start@@Base+0x3cc0>
   1caf8:	mov	r5, #1
   1cafc:	mov	r9, r0
   1cb00:	ldr	r3, [sp, #28]
   1cb04:	cmp	r3, #0
   1cb08:	bne	1cb74 <_start@@Base+0x7bcc>
   1cb0c:	ldr	r0, [r4]
   1cb10:	bl	21e1c <flatcc_builder_end_offset_vector@@Base>
   1cb14:	cmp	r0, #0
   1cb18:	str	r0, [sp, #32]
   1cb1c:	beq	1e7a4 <_start@@Base+0x97fc>
   1cb20:	mov	r1, #28
   1cb24:	ldr	r0, [r4]
   1cb28:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1cb2c:	cmp	r0, #0
   1cb30:	beq	1e7a4 <_start@@Base+0x97fc>
   1cb34:	ldr	r3, [sp, #32]
   1cb38:	str	r3, [r0]
   1cb3c:	b	1b53c <_start@@Base+0x6594>
   1cb40:	svcvs	0x00727465
   1cb44:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cb48:	strbvc	r7, [r3, #-1024]!	; 0xfffffc00
   1cb4c:	ldrbtvs	r7, [r3], #-1138	; 0xfffffb8e
   1cb50:	cmnvs	lr, r5, ror #6
   1cb54:	strbtvs	r7, [r9], #-884	; 0xfffffc8c
   1cb58:	ldrbtvc	r6, [r2], #-2414	; 0xfffff692
   1cb5c:	stmdbvc	pc!, {r0, r1, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1cb60:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1cb64:			; <UNDEFINED> instruction: 0xffff0000
   1cb68:	andeq	r4, r4, r8, lsr #4
   1cb6c:	andeq	r4, r4, r4, lsr r2
   1cb70:	ldrvs	r0, [r2, -r0]!
   1cb74:	add	r3, sp, #32
   1cb78:	mov	r1, r9
   1cb7c:	mov	r2, r8
   1cb80:	mov	r0, r4
   1cb84:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   1cb88:	ldr	r3, [sp, #32]
   1cb8c:	cmp	r3, #0
   1cb90:	mov	r9, r0
   1cb94:	beq	1e7a4 <_start@@Base+0x97fc>
   1cb98:	mov	r1, r5
   1cb9c:	ldr	r0, [r4]
   1cba0:	bl	21054 <flatcc_builder_extend_offset_vector@@Base>
   1cba4:	cmp	r0, #0
   1cba8:	beq	1e7a4 <_start@@Base+0x97fc>
   1cbac:	ldr	r3, [sp, #32]
   1cbb0:	mov	r1, r9
   1cbb4:	str	r3, [r0]
   1cbb8:	mov	r2, r8
   1cbbc:	add	r3, sp, #28
   1cbc0:	mov	r0, r4
   1cbc4:	bl	16c70 <_start@@Base+0x1cc8>
   1cbc8:	mov	r9, r0
   1cbcc:	b	1cb00 <_start@@Base+0x7b58>
   1cbd0:	mov	r1, r0
   1cbd4:	mov	r2, r8
   1cbd8:	mov	r0, r4
   1cbdc:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1cbe0:	mov	r9, r0
   1cbe4:	b	1b53c <_start@@Base+0x6594>
   1cbe8:	and	r1, r1, #-16777216	; 0xff000000
   1cbec:	mov	r0, #0
   1cbf0:	cmp	r1, #1728053248	; 0x67000000
   1cbf4:	cmpeq	r0, #0
   1cbf8:	bne	1ccfc <_start@@Base+0x7d54>
   1cbfc:	mov	r3, #1
   1cc00:	mov	r2, r8
   1cc04:	mov	r1, r5
   1cc08:	mov	r0, r4
   1cc0c:	bl	1850c <_start@@Base+0x3564>
   1cc10:	cmp	r5, r0
   1cc14:	mov	r9, r0
   1cc18:	beq	1cce4 <_start@@Base+0x7d3c>
   1cc1c:	ldr	r0, [r4]
   1cc20:	bl	21458 <flatcc_builder_start_offset_vector@@Base>
   1cc24:	cmp	r0, #0
   1cc28:	bne	1e7a4 <_start@@Base+0x97fc>
   1cc2c:	mov	r1, r9
   1cc30:	add	r3, sp, #28
   1cc34:	mov	r2, r8
   1cc38:	mov	r0, r4
   1cc3c:	bl	18c68 <_start@@Base+0x3cc0>
   1cc40:	mov	r5, #1
   1cc44:	mov	r9, r0
   1cc48:	ldr	r3, [sp, #28]
   1cc4c:	cmp	r3, #0
   1cc50:	bne	1cc88 <_start@@Base+0x7ce0>
   1cc54:	ldr	r0, [r4]
   1cc58:	bl	21e1c <flatcc_builder_end_offset_vector@@Base>
   1cc5c:	cmp	r0, #0
   1cc60:	str	r0, [sp, #32]
   1cc64:	beq	1e7a4 <_start@@Base+0x97fc>
   1cc68:	mov	r1, #10
   1cc6c:	ldr	r0, [r4]
   1cc70:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1cc74:	cmp	r0, #0
   1cc78:	beq	1e7a4 <_start@@Base+0x97fc>
   1cc7c:	ldr	r3, [sp, #32]
   1cc80:	str	r3, [r0]
   1cc84:	b	1b53c <_start@@Base+0x6594>
   1cc88:	add	r3, sp, #32
   1cc8c:	mov	r1, r9
   1cc90:	mov	r2, r8
   1cc94:	mov	r0, r4
   1cc98:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   1cc9c:	ldr	r3, [sp, #32]
   1cca0:	cmp	r3, #0
   1cca4:	mov	r9, r0
   1cca8:	beq	1e7a4 <_start@@Base+0x97fc>
   1ccac:	mov	r1, r5
   1ccb0:	ldr	r0, [r4]
   1ccb4:	bl	21054 <flatcc_builder_extend_offset_vector@@Base>
   1ccb8:	cmp	r0, #0
   1ccbc:	beq	1e7a4 <_start@@Base+0x97fc>
   1ccc0:	ldr	r3, [sp, #32]
   1ccc4:	mov	r1, r9
   1ccc8:	str	r3, [r0]
   1cccc:	mov	r2, r8
   1ccd0:	add	r3, sp, #28
   1ccd4:	mov	r0, r4
   1ccd8:	bl	16c70 <_start@@Base+0x1cc8>
   1ccdc:	mov	r9, r0
   1cce0:	b	1cc48 <_start@@Base+0x7ca0>
   1cce4:	mov	r1, r0
   1cce8:	mov	r2, r8
   1ccec:	mov	r0, r4
   1ccf0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ccf4:	mov	r9, r0
   1ccf8:	b	1b53c <_start@@Base+0x6594>
   1ccfc:	mov	r2, r8
   1cd00:	mov	r1, r5
   1cd04:	mov	r0, r4
   1cd08:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1cd0c:	mov	r9, r0
   1cd10:	b	1b53c <_start@@Base+0x6594>
   1cd14:	add	r3, pc, #956	; 0x3bc
   1cd18:	ldrd	r2, [r3]
   1cd1c:	cmp	r1, r3
   1cd20:	cmpeq	r0, r2
   1cd24:	bne	1ce64 <_start@@Base+0x7ebc>
   1cd28:	add	r5, r5, #16
   1cd2c:	mov	r1, r8
   1cd30:	mov	r0, r5
   1cd34:	bl	150d0 <_start@@Base+0x128>
   1cd38:	mov	r0, #0
   1cd3c:	and	r1, r1, #-16777216	; 0xff000000
   1cd40:	cmp	r1, #1929379840	; 0x73000000
   1cd44:	cmpeq	r0, #0
   1cd48:	bne	1ce4c <_start@@Base+0x7ea4>
   1cd4c:	mov	r3, #1
   1cd50:	mov	r2, r8
   1cd54:	mov	r1, r5
   1cd58:	mov	r0, r4
   1cd5c:	bl	1850c <_start@@Base+0x3564>
   1cd60:	cmp	r5, r0
   1cd64:	mov	r9, r0
   1cd68:	beq	1ce34 <_start@@Base+0x7e8c>
   1cd6c:	ldr	r0, [r4]
   1cd70:	bl	21458 <flatcc_builder_start_offset_vector@@Base>
   1cd74:	cmp	r0, #0
   1cd78:	bne	1e7a4 <_start@@Base+0x97fc>
   1cd7c:	mov	r1, r9
   1cd80:	add	r3, sp, #28
   1cd84:	mov	r2, r8
   1cd88:	mov	r0, r4
   1cd8c:	bl	18c68 <_start@@Base+0x3cc0>
   1cd90:	mov	r5, #1
   1cd94:	mov	r9, r0
   1cd98:	ldr	r3, [sp, #28]
   1cd9c:	cmp	r3, #0
   1cda0:	bne	1cdd8 <_start@@Base+0x7e30>
   1cda4:	ldr	r0, [r4]
   1cda8:	bl	21e1c <flatcc_builder_end_offset_vector@@Base>
   1cdac:	cmp	r0, #0
   1cdb0:	str	r0, [sp, #32]
   1cdb4:	beq	1e7a4 <_start@@Base+0x97fc>
   1cdb8:	mov	r1, #11
   1cdbc:	ldr	r0, [r4]
   1cdc0:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1cdc4:	cmp	r0, #0
   1cdc8:	beq	1e7a4 <_start@@Base+0x97fc>
   1cdcc:	ldr	r3, [sp, #32]
   1cdd0:	str	r3, [r0]
   1cdd4:	b	1b53c <_start@@Base+0x6594>
   1cdd8:	add	r3, sp, #32
   1cddc:	mov	r1, r9
   1cde0:	mov	r2, r8
   1cde4:	mov	r0, r4
   1cde8:	bl	1b3a0 <_start@@Base+0x63f8>
   1cdec:	ldr	r3, [sp, #32]
   1cdf0:	cmp	r3, #0
   1cdf4:	mov	r9, r0
   1cdf8:	beq	1e7a4 <_start@@Base+0x97fc>
   1cdfc:	mov	r1, r5
   1ce00:	ldr	r0, [r4]
   1ce04:	bl	21054 <flatcc_builder_extend_offset_vector@@Base>
   1ce08:	cmp	r0, #0
   1ce0c:	beq	1e7a4 <_start@@Base+0x97fc>
   1ce10:	ldr	r3, [sp, #32]
   1ce14:	mov	r1, r9
   1ce18:	str	r3, [r0]
   1ce1c:	mov	r2, r8
   1ce20:	add	r3, sp, #28
   1ce24:	mov	r0, r4
   1ce28:	bl	16c70 <_start@@Base+0x1cc8>
   1ce2c:	mov	r9, r0
   1ce30:	b	1cd98 <_start@@Base+0x7df0>
   1ce34:	mov	r1, r0
   1ce38:	mov	r2, r8
   1ce3c:	mov	r0, r4
   1ce40:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce44:	mov	r9, r0
   1ce48:	b	1b53c <_start@@Base+0x6594>
   1ce4c:	mov	r2, r8
   1ce50:	mov	r1, r5
   1ce54:	mov	r0, r4
   1ce58:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce5c:	mov	r9, r0
   1ce60:	b	1b53c <_start@@Base+0x6594>
   1ce64:	mov	r2, r8
   1ce68:	mov	r1, r6
   1ce6c:	mov	r0, r4
   1ce70:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ce74:	mov	r9, r0
   1ce78:	b	1b53c <_start@@Base+0x6594>
   1ce7c:	add	r3, pc, #604	; 0x25c
   1ce80:	ldrd	r2, [r3]
   1ce84:	cmp	r1, r3
   1ce88:	cmpeq	r0, r2
   1ce8c:	bhi	1d2c4 <_start@@Base+0x831c>
   1ce90:	add	r3, pc, #592	; 0x250
   1ce94:	ldrd	r2, [r3]
   1ce98:	cmp	r1, r3
   1ce9c:	cmpeq	r0, r2
   1cea0:	bne	1d1cc <_start@@Base+0x8224>
   1cea4:	add	r5, r5, #8
   1cea8:	mov	r1, r8
   1ceac:	mov	r0, r5
   1ceb0:	bl	150d0 <_start@@Base+0x128>
   1ceb4:	ldr	r3, [pc, #600]	; 1d114 <_start@@Base+0x816c>
   1ceb8:	mov	r2, #0
   1cebc:	and	r3, r3, r1
   1cec0:	mov	r1, r3
   1cec4:	ldr	r3, [pc, #580]	; 1d110 <_start@@Base+0x8168>
   1cec8:	and	r2, r2, r0
   1cecc:	mov	r0, r2
   1ced0:	cmp	r1, r3
   1ced4:	mov	r2, #0
   1ced8:	cmpeq	r0, r2
   1cedc:	bne	1d1b4 <_start@@Base+0x820c>
   1cee0:	mov	r3, #2
   1cee4:	mov	r2, r8
   1cee8:	mov	r1, r5
   1ceec:	mov	r0, r4
   1cef0:	bl	1850c <_start@@Base+0x3564>
   1cef4:	cmp	r5, r0
   1cef8:	mov	r9, r0
   1cefc:	beq	1d19c <_start@@Base+0x81f4>
   1cf00:	mov	r3, #0
   1cf04:	mov	r1, #3
   1cf08:	ldr	r0, [r4]
   1cf0c:	str	r3, [sp, #32]
   1cf10:	bl	2151c <flatcc_builder_start_table@@Base>
   1cf14:	cmp	r0, #0
   1cf18:	bne	1cf70 <_start@@Base+0x7fc8>
   1cf1c:	mov	r1, r9
   1cf20:	add	r3, sp, #44	; 0x2c
   1cf24:	mov	r2, r8
   1cf28:	mov	r0, r4
   1cf2c:	bl	183b8 <_start@@Base+0x3410>
   1cf30:	add	fp, pc, #440	; 0x1b8
   1cf34:	ldrd	sl, [fp]
   1cf38:	add	r7, pc, #440	; 0x1b8
   1cf3c:	ldrd	r6, [r7]
   1cf40:	mov	r9, r0
   1cf44:	ldr	r3, [sp, #44]	; 0x2c
   1cf48:	cmp	r3, #0
   1cf4c:	bne	1cfb4 <_start@@Base+0x800c>
   1cf50:	ldr	r3, [r4, #20]
   1cf54:	cmp	r3, #0
   1cf58:	bne	1cf70 <_start@@Base+0x7fc8>
   1cf5c:	ldr	r0, [r4]
   1cf60:	bl	21b58 <flatcc_builder_end_table@@Base>
   1cf64:	cmp	r0, #0
   1cf68:	str	r0, [sp, #32]
   1cf6c:	bne	1cf88 <_start@@Base+0x7fe0>
   1cf70:	mov	r1, r9
   1cf74:	mov	r3, #33	; 0x21
   1cf78:	mov	r2, r8
   1cf7c:	mov	r0, r4
   1cf80:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1cf84:	mov	r9, r0
   1cf88:	ldr	r3, [sp, #32]
   1cf8c:	cmp	r3, #0
   1cf90:	beq	1e7a4 <_start@@Base+0x97fc>
   1cf94:	mov	r1, #35	; 0x23
   1cf98:	ldr	r0, [r4]
   1cf9c:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1cfa0:	cmp	r0, #0
   1cfa4:	beq	1e7a4 <_start@@Base+0x97fc>
   1cfa8:	ldr	r3, [sp, #32]
   1cfac:	str	r3, [r0]
   1cfb0:	b	1b53c <_start@@Base+0x6594>
   1cfb4:	mov	r2, r8
   1cfb8:	mov	r1, r9
   1cfbc:	mov	r0, r4
   1cfc0:	bl	176c0 <_start@@Base+0x2718>
   1cfc4:	mov	r1, r8
   1cfc8:	mov	r5, r0
   1cfcc:	bl	150d0 <_start@@Base+0x128>
   1cfd0:	add	r3, pc, #296	; 0x128
   1cfd4:	ldrd	r2, [r3]
   1cfd8:	cmp	r1, r3
   1cfdc:	cmpeq	r0, r2
   1cfe0:	bhi	1d07c <_start@@Base+0x80d4>
   1cfe4:	add	r3, pc, #284	; 0x11c
   1cfe8:	ldrd	r2, [r3]
   1cfec:	mov	r0, #0
   1cff0:	cmp	r1, r3
   1cff4:	cmpeq	r0, r2
   1cff8:	bne	1d184 <_start@@Base+0x81dc>
   1cffc:	mov	r1, r5
   1d000:	mov	r3, #4
   1d004:	mov	r2, r8
   1d008:	mov	r0, r4
   1d00c:	bl	1850c <_start@@Base+0x3564>
   1d010:	cmp	r5, r0
   1d014:	mov	r1, r0
   1d018:	beq	1d184 <_start@@Base+0x81dc>
   1d01c:	mov	r5, #0
   1d020:	add	r3, sp, #48	; 0x30
   1d024:	str	r5, [sp]
   1d028:	mov	r2, r8
   1d02c:	mov	r0, r4
   1d030:	bl	25ebc <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d034:	ldr	r3, [sp, #48]	; 0x30
   1d038:	cmp	r3, r5
   1d03c:	mov	r9, r0
   1d040:	beq	1cf70 <_start@@Base+0x7fc8>
   1d044:	mov	r1, r5
   1d048:	ldr	r0, [r4]
   1d04c:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1d050:	cmp	r0, #0
   1d054:	beq	1cf70 <_start@@Base+0x7fc8>
   1d058:	ldr	r3, [sp, #48]	; 0x30
   1d05c:	str	r3, [r0]
   1d060:	mov	r1, r9
   1d064:	add	r3, sp, #44	; 0x2c
   1d068:	mov	r2, r8
   1d06c:	mov	r0, r4
   1d070:	bl	16d28 <_start@@Base+0x1d80>
   1d074:	mov	r9, r0
   1d078:	b	1cf44 <_start@@Base+0x7f9c>
   1d07c:	bic	r2, r0, #255	; 0xff
   1d080:	cmp	r1, fp
   1d084:	cmpeq	r2, sl
   1d088:	bne	1d118 <_start@@Base+0x8170>
   1d08c:	mov	r1, r5
   1d090:	mov	r3, #7
   1d094:	mov	r2, r8
   1d098:	mov	r0, r4
   1d09c:	bl	1850c <_start@@Base+0x3564>
   1d0a0:	cmp	r5, r0
   1d0a4:	mov	r1, r0
   1d0a8:	beq	1d184 <_start@@Base+0x81dc>
   1d0ac:	mov	r5, #1
   1d0b0:	add	r3, sp, #48	; 0x30
   1d0b4:	str	r5, [sp]
   1d0b8:	mov	r2, r8
   1d0bc:	mov	r0, r4
   1d0c0:	bl	25ebc <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d0c4:	ldr	r3, [sp, #48]	; 0x30
   1d0c8:	cmp	r3, #0
   1d0cc:	mov	r9, r0
   1d0d0:	b	1d040 <_start@@Base+0x8098>
   1d0d4:	nop			; (mov r0, r0)
   1d0d8:	cmnvs	r2, r5, ror #24
   1d0dc:	stmdbvc	pc!, {r2, r4, r5, r6, r9, sl, sp, lr}^	; <UNPREDICTABLE>
   1d0e0:	strbvs	r7, [sp, #-115]!	; 0xffffff8d
   1d0e4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d0e8:	rsbvs	r7, r1, #-1811939327	; 0x94000001
   1d0ec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d0f0:	cmnvs	r4, r0, lsl #2
   1d0f4:	ldrbvc	r6, [r2, #-3172]!	; 0xfffff39c
   1d0f8:	strbvs	r0, [r4, #-0]!
   1d0fc:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d100:	strbvs	pc, [r3, #-4095]!	; 0xfffff001	; <UNPREDICTABLE>
   1d104:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1d108:	andeq	r0, r0, r0
   1d10c:	strbtvs	r7, [r1], #-1121	; 0xfffffb9f
   1d110:	ldrtcc	r0, [r4], -r0
   1d114:			; <UNDEFINED> instruction: 0xffff0000
   1d118:	ldr	r2, [pc, #-12]	; 1d114 <_start@@Base+0x816c>
   1d11c:	mvn	r3, #0
   1d120:	and	r1, r1, r3
   1d124:	and	r0, r0, r2
   1d128:	cmp	r1, r7
   1d12c:	cmpeq	r0, r6
   1d130:	bne	1d184 <_start@@Base+0x81dc>
   1d134:	mov	r1, r5
   1d138:	mov	r3, #6
   1d13c:	mov	r2, r8
   1d140:	mov	r0, r4
   1d144:	bl	1850c <_start@@Base+0x3564>
   1d148:	cmp	r5, r0
   1d14c:	mov	r1, r0
   1d150:	beq	1d184 <_start@@Base+0x81dc>
   1d154:	mov	r3, #0
   1d158:	str	r3, [sp]
   1d15c:	mov	r2, r8
   1d160:	add	r3, sp, #48	; 0x30
   1d164:	mov	r0, r4
   1d168:	bl	25ebc <flatcc_json_parser_build_uint8_vector_base64@@Base>
   1d16c:	ldr	r3, [sp, #48]	; 0x30
   1d170:	cmp	r3, #0
   1d174:	mov	r9, r0
   1d178:	beq	1cf70 <_start@@Base+0x7fc8>
   1d17c:	mov	r1, #2
   1d180:	b	1d048 <_start@@Base+0x80a0>
   1d184:	mov	r2, r8
   1d188:	mov	r1, r5
   1d18c:	mov	r0, r4
   1d190:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d194:	mov	r9, r0
   1d198:	b	1d060 <_start@@Base+0x80b8>
   1d19c:	mov	r1, r0
   1d1a0:	mov	r2, r8
   1d1a4:	mov	r0, r4
   1d1a8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d1ac:	mov	r9, r0
   1d1b0:	b	1b53c <_start@@Base+0x6594>
   1d1b4:	mov	r2, r8
   1d1b8:	mov	r1, r5
   1d1bc:	mov	r0, r4
   1d1c0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d1c4:	mov	r9, r0
   1d1c8:	b	1b53c <_start@@Base+0x6594>
   1d1cc:	add	r3, pc, #796	; 0x31c
   1d1d0:	ldrd	r2, [r3]
   1d1d4:	cmp	r1, r3
   1d1d8:	cmpeq	r0, r2
   1d1dc:	bne	1d2ac <_start@@Base+0x8304>
   1d1e0:	mov	r3, #8
   1d1e4:	mov	r2, r8
   1d1e8:	mov	r1, r5
   1d1ec:	mov	r0, r4
   1d1f0:	bl	1850c <_start@@Base+0x3564>
   1d1f4:	cmp	r5, r0
   1d1f8:	mov	r6, r0
   1d1fc:	beq	1d294 <_start@@Base+0x82ec>
   1d200:	add	r5, sp, #56	; 0x38
   1d204:	mov	r3, #0
   1d208:	strb	r3, [r5, #-8]!
   1d20c:	mov	r1, r0
   1d210:	mov	r3, r5
   1d214:	mov	r2, r8
   1d218:	mov	r0, r4
   1d21c:	bl	18f54 <_start@@Base+0x3fac>
   1d220:	cmp	r6, r0
   1d224:	mov	r9, r0
   1d228:	bne	1d254 <_start@@Base+0x82ac>
   1d22c:	mov	r1, r0
   1d230:	str	r5, [sp]
   1d234:	ldr	r3, [pc, #732]	; 1d518 <_start@@Base+0x8570>
   1d238:	mov	r2, r8
   1d23c:	mov	r0, r4
   1d240:	bl	17710 <_start@@Base+0x2768>
   1d244:	cmp	r8, r0
   1d248:	cmpne	r9, r0
   1d24c:	mov	r9, r0
   1d250:	beq	1e7a4 <_start@@Base+0x97fc>
   1d254:	ldrb	r3, [sp, #48]	; 0x30
   1d258:	cmp	r3, #1
   1d25c:	bne	1d26c <_start@@Base+0x82c4>
   1d260:	ldr	r3, [r4, #8]
   1d264:	tst	r3, #2
   1d268:	beq	1b53c <_start@@Base+0x6594>
   1d26c:	mov	r3, #1
   1d270:	mov	r2, r3
   1d274:	mov	r1, #15
   1d278:	ldr	r0, [r4]
   1d27c:	bl	224dc <flatcc_builder_table_add@@Base>
   1d280:	cmp	r0, #0
   1d284:	beq	1e7a4 <_start@@Base+0x97fc>
   1d288:	ldrb	r3, [sp, #48]	; 0x30
   1d28c:	strb	r3, [r0]
   1d290:	b	1b53c <_start@@Base+0x6594>
   1d294:	mov	r2, r8
   1d298:	mov	r1, r5
   1d29c:	mov	r0, r4
   1d2a0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d2a4:	mov	r9, r0
   1d2a8:	b	1b53c <_start@@Base+0x6594>
   1d2ac:	mov	r2, r8
   1d2b0:	mov	r1, r5
   1d2b4:	mov	r0, r4
   1d2b8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d2bc:	mov	r9, r0
   1d2c0:	b	1b53c <_start@@Base+0x6594>
   1d2c4:	add	r3, pc, #556	; 0x22c
   1d2c8:	ldrd	r2, [r3]
   1d2cc:	cmp	r1, r3
   1d2d0:	cmpeq	r0, r2
   1d2d4:	bhi	1d6e8 <_start@@Base+0x8740>
   1d2d8:	add	r3, pc, #544	; 0x220
   1d2dc:	ldrd	r2, [r3]
   1d2e0:	cmp	r1, r3
   1d2e4:	cmpeq	r0, r2
   1d2e8:	bne	1d6d0 <_start@@Base+0x8728>
   1d2ec:	add	r5, r5, #8
   1d2f0:	mov	r1, r8
   1d2f4:	mov	r0, r5
   1d2f8:	bl	150d0 <_start@@Base+0x128>
   1d2fc:	mov	r0, #0
   1d300:	and	r1, r1, #-16777216	; 0xff000000
   1d304:	cmp	r1, #2030043136	; 0x79000000
   1d308:	cmpeq	r0, #0
   1d30c:	bne	1d6b8 <_start@@Base+0x8710>
   1d310:	mov	r3, #1
   1d314:	mov	r2, r8
   1d318:	mov	r1, r5
   1d31c:	mov	r0, r4
   1d320:	bl	1850c <_start@@Base+0x3564>
   1d324:	cmp	r5, r0
   1d328:	mov	r9, r0
   1d32c:	beq	1d6a0 <_start@@Base+0x86f8>
   1d330:	mov	r3, #0
   1d334:	mov	r1, #3
   1d338:	ldr	r0, [r4]
   1d33c:	str	r3, [sp, #32]
   1d340:	bl	2151c <flatcc_builder_start_table@@Base>
   1d344:	cmp	r0, #0
   1d348:	bne	1d398 <_start@@Base+0x83f0>
   1d34c:	mov	r1, r9
   1d350:	add	r3, sp, #40	; 0x28
   1d354:	mov	r2, r8
   1d358:	mov	r0, r4
   1d35c:	bl	183b8 <_start@@Base+0x3410>
   1d360:	add	fp, pc, #416	; 0x1a0
   1d364:	ldrd	sl, [fp]
   1d368:	mov	r9, r0
   1d36c:	ldr	r3, [sp, #40]	; 0x28
   1d370:	cmp	r3, #0
   1d374:	bne	1d3dc <_start@@Base+0x8434>
   1d378:	ldr	r3, [r4, #20]
   1d37c:	cmp	r3, #0
   1d380:	bne	1d398 <_start@@Base+0x83f0>
   1d384:	ldr	r0, [r4]
   1d388:	bl	21b58 <flatcc_builder_end_table@@Base>
   1d38c:	cmp	r0, #0
   1d390:	str	r0, [sp, #32]
   1d394:	bne	1d3b0 <_start@@Base+0x8408>
   1d398:	mov	r1, r9
   1d39c:	mov	r3, #33	; 0x21
   1d3a0:	mov	r2, r8
   1d3a4:	mov	r0, r4
   1d3a8:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1d3ac:	mov	r9, r0
   1d3b0:	ldr	r3, [sp, #32]
   1d3b4:	cmp	r3, #0
   1d3b8:	beq	1e7a4 <_start@@Base+0x97fc>
   1d3bc:	mov	r1, #14
   1d3c0:	ldr	r0, [r4]
   1d3c4:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1d3c8:	cmp	r0, #0
   1d3cc:	beq	1e7a4 <_start@@Base+0x97fc>
   1d3d0:	ldr	r3, [sp, #32]
   1d3d4:	str	r3, [r0]
   1d3d8:	b	1b53c <_start@@Base+0x6594>
   1d3dc:	mov	r2, r8
   1d3e0:	mov	r1, r9
   1d3e4:	mov	r0, r4
   1d3e8:	bl	176c0 <_start@@Base+0x2718>
   1d3ec:	mov	r1, r8
   1d3f0:	mov	r5, r0
   1d3f4:	bl	150d0 <_start@@Base+0x128>
   1d3f8:	ldr	r3, [pc, #284]	; 1d51c <_start@@Base+0x8574>
   1d3fc:	mvn	r2, #0
   1d400:	cmp	r1, r3
   1d404:	cmpeq	r0, r2
   1d408:	bhi	1d530 <_start@@Base+0x8588>
   1d40c:	add	r3, pc, #252	; 0xfc
   1d410:	ldrd	r2, [r3]
   1d414:	and	r0, r0, #-16777216	; 0xff000000
   1d418:	cmp	r1, r3
   1d41c:	cmpeq	r0, r2
   1d420:	bne	1d688 <_start@@Base+0x86e0>
   1d424:	mov	r3, #5
   1d428:	mov	r2, r8
   1d42c:	mov	r1, r5
   1d430:	mov	r0, r4
   1d434:	bl	1850c <_start@@Base+0x3564>
   1d438:	cmp	r5, r0
   1d43c:	mov	r6, r0
   1d440:	beq	1d688 <_start@@Base+0x86e0>
   1d444:	add	r5, sp, #56	; 0x38
   1d448:	mov	r3, #0
   1d44c:	strh	r3, [r5, #-8]!
   1d450:	mov	r1, r0
   1d454:	mov	r3, r5
   1d458:	mov	r2, r8
   1d45c:	mov	r0, r4
   1d460:	bl	18e20 <_start@@Base+0x3e78>
   1d464:	cmp	r6, r0
   1d468:	mov	r9, r0
   1d46c:	bne	1d498 <_start@@Base+0x84f0>
   1d470:	mov	r1, r0
   1d474:	str	r5, [sp]
   1d478:	ldr	r3, [pc, #160]	; 1d520 <_start@@Base+0x8578>
   1d47c:	mov	r2, r8
   1d480:	mov	r0, r4
   1d484:	bl	19420 <_start@@Base+0x4478>
   1d488:	cmp	r8, r0
   1d48c:	cmpne	r9, r0
   1d490:	mov	r9, r0
   1d494:	beq	1d398 <_start@@Base+0x83f0>
   1d498:	ldrh	r3, [sp, #48]	; 0x30
   1d49c:	cmp	r3, #0
   1d4a0:	bne	1d4b0 <_start@@Base+0x8508>
   1d4a4:	ldr	r3, [r4, #8]
   1d4a8:	tst	r3, #2
   1d4ac:	beq	1d4d4 <_start@@Base+0x852c>
   1d4b0:	mov	r3, #2
   1d4b4:	mov	r2, r3
   1d4b8:	mov	r1, r3
   1d4bc:	ldr	r0, [r4]
   1d4c0:	bl	224dc <flatcc_builder_table_add@@Base>
   1d4c4:	cmp	r0, #0
   1d4c8:	beq	1d398 <_start@@Base+0x83f0>
   1d4cc:	ldrh	r3, [sp, #48]	; 0x30
   1d4d0:	strh	r3, [r0]
   1d4d4:	mov	r1, r9
   1d4d8:	add	r3, sp, #40	; 0x28
   1d4dc:	mov	r2, r8
   1d4e0:	mov	r0, r4
   1d4e4:	bl	16d28 <_start@@Base+0x1d80>
   1d4e8:	mov	r9, r0
   1d4ec:	b	1d36c <_start@@Base+0x83c4>
   1d4f0:	rsbvs	r6, pc, #108, 30	; 0x1b0
   1d4f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d4f8:	ldrbvs	pc, [pc, #4095]!	; 1e4ff <_start@@Base+0x9557>	; <UNPREDICTABLE>
   1d4fc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d500:	strbvs	r7, [sp, #-116]!	; 0xffffff8c
   1d504:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1d508:	andeq	r0, r0, r0
   1d50c:	strbtvc	r6, [r1], -r0, lsl #24
   1d510:	strvc	r0, [r0], #-0
   1d514:	cmnvs	pc, #461373440	; 0x1b800000
   1d518:	andeq	r4, r4, r0, asr #4
   1d51c:	stmdbvs	r3!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1d520:	andeq	r4, r4, ip, asr #4
   1d524:	andeq	r4, r4, r8, asr r2
   1d528:	stmdbvs	r4!, {}^	; <UNPREDICTABLE>
   1d52c:			; <UNDEFINED> instruction: 0xffff0000
   1d530:	bic	r3, r1, #255	; 0xff
   1d534:	mov	r2, #0
   1d538:	cmp	r3, fp
   1d53c:	cmpeq	r2, sl
   1d540:	bne	1d5fc <_start@@Base+0x8654>
   1d544:	mov	r3, #3
   1d548:	mov	r2, r8
   1d54c:	mov	r1, r5
   1d550:	mov	r0, r4
   1d554:	bl	1850c <_start@@Base+0x3564>
   1d558:	cmp	r5, r0
   1d55c:	mov	r6, r0
   1d560:	beq	1d688 <_start@@Base+0x86e0>
   1d564:	add	r5, sp, #56	; 0x38
   1d568:	mov	r2, #0
   1d56c:	mov	r3, #0
   1d570:	mov	r1, r0
   1d574:	strd	r2, [r5, #-8]!
   1d578:	mov	r0, r4
   1d57c:	mov	r3, r5
   1d580:	mov	r2, r8
   1d584:	bl	179f8 <_start@@Base+0x2a50>
   1d588:	cmp	r6, r0
   1d58c:	mov	r9, r0
   1d590:	bne	1d5bc <_start@@Base+0x8614>
   1d594:	mov	r1, r0
   1d598:	str	r5, [sp]
   1d59c:	ldr	r3, [pc, #-128]	; 1d524 <_start@@Base+0x857c>
   1d5a0:	mov	r2, r8
   1d5a4:	mov	r0, r4
   1d5a8:	bl	1a0b8 <_start@@Base+0x5110>
   1d5ac:	cmp	r8, r0
   1d5b0:	cmpne	r9, r0
   1d5b4:	mov	r9, r0
   1d5b8:	beq	1d398 <_start@@Base+0x83f0>
   1d5bc:	ldrd	r2, [sp, #48]	; 0x30
   1d5c0:	orrs	r3, r2, r3
   1d5c4:	bne	1d5d4 <_start@@Base+0x862c>
   1d5c8:	ldr	r3, [r4, #8]
   1d5cc:	tst	r3, #2
   1d5d0:	beq	1d4d4 <_start@@Base+0x852c>
   1d5d4:	mov	r3, #8
   1d5d8:	mov	r2, r3
   1d5dc:	mov	r1, #1
   1d5e0:	ldr	r0, [r4]
   1d5e4:	bl	224dc <flatcc_builder_table_add@@Base>
   1d5e8:	cmp	r0, #0
   1d5ec:	beq	1d398 <_start@@Base+0x83f0>
   1d5f0:	ldrd	r2, [sp, #48]	; 0x30
   1d5f4:	strd	r2, [r0]
   1d5f8:	b	1d4d4 <_start@@Base+0x852c>
   1d5fc:	ldr	r3, [pc, #-216]	; 1d52c <_start@@Base+0x8584>
   1d600:	mov	r2, #0
   1d604:	and	r3, r3, r1
   1d608:	mov	r1, r3
   1d60c:	ldr	r3, [pc, #-236]	; 1d528 <_start@@Base+0x8580>
   1d610:	and	r2, r2, r0
   1d614:	mov	r0, r2
   1d618:	cmp	r1, r3
   1d61c:	mov	r2, #0
   1d620:	cmpeq	r0, r2
   1d624:	bne	1d688 <_start@@Base+0x86e0>
   1d628:	mov	r1, r5
   1d62c:	mov	r3, #2
   1d630:	mov	r2, r8
   1d634:	mov	r0, r4
   1d638:	bl	1850c <_start@@Base+0x3564>
   1d63c:	cmp	r5, r0
   1d640:	mov	r1, r0
   1d644:	beq	1d688 <_start@@Base+0x86e0>
   1d648:	add	r3, sp, #44	; 0x2c
   1d64c:	mov	r2, r8
   1d650:	mov	r0, r4
   1d654:	bl	261e4 <flatcc_json_parser_build_string@@Base>
   1d658:	ldr	r3, [sp, #44]	; 0x2c
   1d65c:	cmp	r3, #0
   1d660:	mov	r9, r0
   1d664:	beq	1d398 <_start@@Base+0x83f0>
   1d668:	mov	r1, #0
   1d66c:	ldr	r0, [r4]
   1d670:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1d674:	cmp	r0, #0
   1d678:	beq	1d398 <_start@@Base+0x83f0>
   1d67c:	ldr	r3, [sp, #44]	; 0x2c
   1d680:	str	r3, [r0]
   1d684:	b	1d4d4 <_start@@Base+0x852c>
   1d688:	mov	r2, r8
   1d68c:	mov	r1, r5
   1d690:	mov	r0, r4
   1d694:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d698:	mov	r9, r0
   1d69c:	b	1d4d4 <_start@@Base+0x852c>
   1d6a0:	mov	r1, r0
   1d6a4:	mov	r2, r8
   1d6a8:	mov	r0, r4
   1d6ac:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6b0:	mov	r9, r0
   1d6b4:	b	1b53c <_start@@Base+0x6594>
   1d6b8:	mov	r2, r8
   1d6bc:	mov	r1, r5
   1d6c0:	mov	r0, r4
   1d6c4:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6c8:	mov	r9, r0
   1d6cc:	b	1b53c <_start@@Base+0x6594>
   1d6d0:	mov	r2, r8
   1d6d4:	mov	r1, r5
   1d6d8:	mov	r0, r4
   1d6dc:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d6e0:	mov	r9, r0
   1d6e4:	b	1b53c <_start@@Base+0x6594>
   1d6e8:	ldr	r2, [pc, #-452]	; 1d52c <_start@@Base+0x8584>
   1d6ec:	mvn	r3, #0
   1d6f0:	and	r6, r6, r2
   1d6f4:	and	r7, r7, r3
   1d6f8:	add	r3, pc, #984	; 0x3d8
   1d6fc:	ldrd	r2, [r3]
   1d700:	cmp	r7, r3
   1d704:	cmpeq	r6, r2
   1d708:	bne	1d7e0 <_start@@Base+0x8838>
   1d70c:	mov	r3, #6
   1d710:	mov	r2, r8
   1d714:	mov	r1, r5
   1d718:	mov	r0, r4
   1d71c:	bl	1850c <_start@@Base+0x3564>
   1d720:	cmp	r5, r0
   1d724:	mov	r6, r0
   1d728:	beq	1d7c8 <_start@@Base+0x8820>
   1d72c:	vmov	r3, s16
   1d730:	add	r5, sp, #56	; 0x38
   1d734:	mov	r1, r0
   1d738:	mov	r2, r8
   1d73c:	str	r3, [r5, #-8]!
   1d740:	mov	r0, r4
   1d744:	mov	r3, r5
   1d748:	bl	25620 <flatcc_json_parser_float@@Base>
   1d74c:	cmp	r6, r0
   1d750:	mov	r9, r0
   1d754:	bne	1d780 <_start@@Base+0x87d8>
   1d758:	mov	r1, r0
   1d75c:	str	r5, [sp]
   1d760:	ldr	r3, [pc, #936]	; 1db10 <_start@@Base+0x8b68>
   1d764:	mov	r2, r8
   1d768:	mov	r0, r4
   1d76c:	bl	17820 <_start@@Base+0x2878>
   1d770:	cmp	r8, r0
   1d774:	cmpne	r9, r0
   1d778:	mov	r9, r0
   1d77c:	beq	1e7a4 <_start@@Base+0x97fc>
   1d780:	vldr	s14, [sp, #48]	; 0x30
   1d784:	vldr	s15, [pc, #892]	; 1db08 <_start@@Base+0x8b60>
   1d788:	vcmp.f32	s14, s15
   1d78c:	vmrs	APSR_nzcv, fpscr
   1d790:	bne	1d7a0 <_start@@Base+0x87f8>
   1d794:	ldr	r3, [r4, #8]
   1d798:	tst	r3, #2
   1d79c:	beq	1b53c <_start@@Base+0x6594>
   1d7a0:	mov	r3, #4
   1d7a4:	mov	r2, r3
   1d7a8:	mov	r1, #26
   1d7ac:	ldr	r0, [r4]
   1d7b0:	bl	224dc <flatcc_builder_table_add@@Base>
   1d7b4:	cmp	r0, #0
   1d7b8:	beq	1e7a4 <_start@@Base+0x97fc>
   1d7bc:	ldr	r3, [sp, #48]	; 0x30
   1d7c0:	str	r3, [r0]
   1d7c4:	b	1b53c <_start@@Base+0x6594>
   1d7c8:	mov	r2, r8
   1d7cc:	mov	r1, r5
   1d7d0:	mov	r0, r4
   1d7d4:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d7d8:	mov	r9, r0
   1d7dc:	b	1b53c <_start@@Base+0x6594>
   1d7e0:	mov	r3, #5
   1d7e4:	mov	r2, r8
   1d7e8:	mov	r1, r5
   1d7ec:	mov	r0, r4
   1d7f0:	bl	1850c <_start@@Base+0x3564>
   1d7f4:	cmp	r5, r0
   1d7f8:	mov	r6, r0
   1d7fc:	beq	1d89c <_start@@Base+0x88f4>
   1d800:	vmov	r3, s16
   1d804:	add	r5, sp, #56	; 0x38
   1d808:	mov	r1, r0
   1d80c:	mov	r2, r8
   1d810:	str	r3, [r5, #-8]!
   1d814:	mov	r0, r4
   1d818:	mov	r3, r5
   1d81c:	bl	25620 <flatcc_json_parser_float@@Base>
   1d820:	cmp	r6, r0
   1d824:	mov	r9, r0
   1d828:	bne	1d854 <_start@@Base+0x88ac>
   1d82c:	mov	r1, r0
   1d830:	str	r5, [sp]
   1d834:	ldr	r3, [pc, #728]	; 1db14 <_start@@Base+0x8b6c>
   1d838:	mov	r2, r8
   1d83c:	mov	r0, r4
   1d840:	bl	17820 <_start@@Base+0x2878>
   1d844:	cmp	r8, r0
   1d848:	cmpne	r9, r0
   1d84c:	mov	r9, r0
   1d850:	beq	1e7a4 <_start@@Base+0x97fc>
   1d854:	vldr	s14, [sp, #48]	; 0x30
   1d858:	vldr	s15, [pc, #684]	; 1db0c <_start@@Base+0x8b64>
   1d85c:	vcmp.f32	s14, s15
   1d860:	vmrs	APSR_nzcv, fpscr
   1d864:	bne	1d874 <_start@@Base+0x88cc>
   1d868:	ldr	r3, [r4, #8]
   1d86c:	tst	r3, #2
   1d870:	beq	1b53c <_start@@Base+0x6594>
   1d874:	mov	r3, #4
   1d878:	mov	r2, r3
   1d87c:	mov	r1, #25
   1d880:	ldr	r0, [r4]
   1d884:	bl	224dc <flatcc_builder_table_add@@Base>
   1d888:	cmp	r0, #0
   1d88c:	beq	1e7a4 <_start@@Base+0x97fc>
   1d890:	ldr	r3, [sp, #48]	; 0x30
   1d894:	str	r3, [r0]
   1d898:	b	1b53c <_start@@Base+0x6594>
   1d89c:	mov	r2, r8
   1d8a0:	mov	r1, r5
   1d8a4:	mov	r0, r4
   1d8a8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d8ac:	mov	r9, r0
   1d8b0:	b	1b53c <_start@@Base+0x6594>
   1d8b4:	add	r3, pc, #548	; 0x224
   1d8b8:	ldrd	r2, [r3]
   1d8bc:	cmp	r1, r3
   1d8c0:	cmpeq	r0, r2
   1d8c4:	bhi	1d9d4 <_start@@Base+0x8a2c>
   1d8c8:	ldr	r2, [pc, #584]	; 1db18 <_start@@Base+0x8b70>
   1d8cc:	mvn	r3, #0
   1d8d0:	and	r6, r6, r2
   1d8d4:	and	r7, r7, r3
   1d8d8:	add	r3, pc, #520	; 0x208
   1d8dc:	ldrd	r2, [r3]
   1d8e0:	cmp	r7, r3
   1d8e4:	cmpeq	r6, r2
   1d8e8:	bne	1d9bc <_start@@Base+0x8a14>
   1d8ec:	mov	r3, #6
   1d8f0:	mov	r2, r8
   1d8f4:	mov	r1, r5
   1d8f8:	mov	r0, r4
   1d8fc:	bl	1850c <_start@@Base+0x3564>
   1d900:	cmp	r5, r0
   1d904:	mov	r6, r0
   1d908:	beq	1d9a4 <_start@@Base+0x89fc>
   1d90c:	vmov	r3, s16
   1d910:	add	r5, sp, #56	; 0x38
   1d914:	mov	r1, r0
   1d918:	mov	r2, r8
   1d91c:	str	r3, [r5, #-8]!
   1d920:	mov	r0, r4
   1d924:	mov	r3, r5
   1d928:	bl	25620 <flatcc_json_parser_float@@Base>
   1d92c:	cmp	r6, r0
   1d930:	mov	r9, r0
   1d934:	bne	1d960 <_start@@Base+0x89b8>
   1d938:	mov	r1, r0
   1d93c:	str	r5, [sp]
   1d940:	ldr	r3, [pc, #468]	; 1db1c <_start@@Base+0x8b74>
   1d944:	mov	r2, r8
   1d948:	mov	r0, r4
   1d94c:	bl	17820 <_start@@Base+0x2878>
   1d950:	cmp	r8, r0
   1d954:	cmpne	r9, r0
   1d958:	mov	r9, r0
   1d95c:	beq	1e7a4 <_start@@Base+0x97fc>
   1d960:	vldr	s15, [sp, #48]	; 0x30
   1d964:	vcmp.f32	s15, s16
   1d968:	vmrs	APSR_nzcv, fpscr
   1d96c:	bne	1d97c <_start@@Base+0x89d4>
   1d970:	ldr	r3, [r4, #8]
   1d974:	tst	r3, #2
   1d978:	beq	1b53c <_start@@Base+0x6594>
   1d97c:	mov	r3, #4
   1d980:	mov	r2, r3
   1d984:	mov	r1, #27
   1d988:	ldr	r0, [r4]
   1d98c:	bl	224dc <flatcc_builder_table_add@@Base>
   1d990:	cmp	r0, #0
   1d994:	beq	1e7a4 <_start@@Base+0x97fc>
   1d998:	ldr	r3, [sp, #48]	; 0x30
   1d99c:	str	r3, [r0]
   1d9a0:	b	1b53c <_start@@Base+0x6594>
   1d9a4:	mov	r2, r8
   1d9a8:	mov	r1, r5
   1d9ac:	mov	r0, r4
   1d9b0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d9b4:	mov	r9, r0
   1d9b8:	b	1b53c <_start@@Base+0x6594>
   1d9bc:	mov	r2, r8
   1d9c0:	mov	r1, r5
   1d9c4:	mov	r0, r4
   1d9c8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1d9cc:	mov	r9, r0
   1d9d0:	b	1b53c <_start@@Base+0x6594>
   1d9d4:	add	r3, pc, #276	; 0x114
   1d9d8:	ldrd	r2, [r3]
   1d9dc:	cmp	r1, r3
   1d9e0:	cmpeq	r0, r2
   1d9e4:	bne	1e238 <_start@@Base+0x9290>
   1d9e8:	add	r6, r5, #8
   1d9ec:	mov	r1, r8
   1d9f0:	mov	r0, r6
   1d9f4:	bl	150d0 <_start@@Base+0x128>
   1d9f8:	add	r3, pc, #248	; 0xf8
   1d9fc:	ldrd	r2, [r3]
   1da00:	cmp	r1, r3
   1da04:	cmpeq	r0, r2
   1da08:	bhi	1dc48 <_start@@Base+0x8ca0>
   1da0c:	add	r3, pc, #236	; 0xec
   1da10:	ldrd	r2, [r3]
   1da14:	cmp	r1, r3
   1da18:	cmpeq	r0, r2
   1da1c:	bne	1dc30 <_start@@Base+0x8c88>
   1da20:	mov	r3, #8
   1da24:	mov	r2, r8
   1da28:	mov	r1, r6
   1da2c:	mov	r0, r4
   1da30:	bl	1850c <_start@@Base+0x3564>
   1da34:	cmp	r6, r0
   1da38:	mov	r7, r0
   1da3c:	beq	1db28 <_start@@Base+0x8b80>
   1da40:	add	r5, sp, #56	; 0x38
   1da44:	mov	r3, #0
   1da48:	str	r3, [r5, #-8]!
   1da4c:	mov	r1, r0
   1da50:	mov	r3, r5
   1da54:	mov	r2, r8
   1da58:	mov	r0, r4
   1da5c:	bl	18ff4 <_start@@Base+0x404c>
   1da60:	cmp	r7, r0
   1da64:	mov	r9, r0
   1da68:	bne	1da94 <_start@@Base+0x8aec>
   1da6c:	mov	r1, r0
   1da70:	str	r5, [sp]
   1da74:	ldr	r3, [pc, #164]	; 1db20 <_start@@Base+0x8b78>
   1da78:	mov	r2, r8
   1da7c:	mov	r0, r4
   1da80:	bl	19674 <_start@@Base+0x46cc>
   1da84:	cmp	r8, r0
   1da88:	cmpne	r9, r0
   1da8c:	mov	r9, r0
   1da90:	beq	1e7a4 <_start@@Base+0x97fc>
   1da94:	ldr	r3, [sp, #48]	; 0x30
   1da98:	cmp	r3, #0
   1da9c:	bne	1daac <_start@@Base+0x8b04>
   1daa0:	ldr	r3, [r4, #8]
   1daa4:	tst	r3, #2
   1daa8:	beq	1b53c <_start@@Base+0x6594>
   1daac:	mov	r3, #4
   1dab0:	mov	r2, r3
   1dab4:	mov	r1, #16
   1dab8:	ldr	r0, [r4]
   1dabc:	bl	224dc <flatcc_builder_table_add@@Base>
   1dac0:	cmp	r0, #0
   1dac4:	beq	1e7a4 <_start@@Base+0x97fc>
   1dac8:	ldr	r3, [sp, #48]	; 0x30
   1dacc:	str	r3, [r0]
   1dad0:	b	1b53c <_start@@Base+0x6594>
   1dad4:	nop			; (mov r0, r0)
   1dad8:	ldrtvs	r0, [r2], -r0
   1dadc:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dae0:	stmdavs	r1!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}^
   1dae4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1dae8:	ldrtvs	r0, [r3], -r0
   1daec:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1daf0:	stmdavs	r1!, {r3, r5, r6, r8, r9, ip, sp, lr}^
   1daf4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1daf8:			; <UNDEFINED> instruction: 0x666e7630
   1dafc:	teqvc	r6, #1593835520	; 0x5f000000
   1db00:			; <UNDEFINED> instruction: 0x666e7631
   1db04:	teqvc	r3, #-268435451	; 0xf0000005
   1db08:	submi	r0, r0, r0
   1db0c:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   1db10:	andeq	r4, r4, r4, ror #4
   1db14:	andeq	r4, r4, r0, ror r2
   1db18:			; <UNDEFINED> instruction: 0xffff0000
   1db1c:	andeq	r4, r4, ip, ror r2
   1db20:	andeq	r4, r4, r8, lsl #5
   1db24:	muleq	r4, r4, r2
   1db28:	add	r5, r5, #16
   1db2c:	mov	r1, r8
   1db30:	mov	r0, r5
   1db34:	bl	150d0 <_start@@Base+0x128>
   1db38:	mov	r0, #0
   1db3c:	and	r1, r1, #-16777216	; 0xff000000
   1db40:	cmp	r1, #1627389952	; 0x61000000
   1db44:	cmpeq	r0, #0
   1db48:	bne	1dc18 <_start@@Base+0x8c70>
   1db4c:	mov	r3, #1
   1db50:	mov	r2, r8
   1db54:	mov	r1, r5
   1db58:	mov	r0, r4
   1db5c:	bl	1850c <_start@@Base+0x3564>
   1db60:	cmp	r5, r0
   1db64:	mov	r6, r0
   1db68:	beq	1dc00 <_start@@Base+0x8c58>
   1db6c:	add	r5, sp, #56	; 0x38
   1db70:	mov	r3, #0
   1db74:	str	r3, [r5, #-8]!
   1db78:	mov	r1, r0
   1db7c:	mov	r3, r5
   1db80:	mov	r2, r8
   1db84:	mov	r0, r4
   1db88:	bl	18ff4 <_start@@Base+0x404c>
   1db8c:	cmp	r6, r0
   1db90:	mov	r9, r0
   1db94:	bne	1dbc0 <_start@@Base+0x8c18>
   1db98:	mov	r1, r0
   1db9c:	str	r5, [sp]
   1dba0:	ldr	r3, [pc, #-132]	; 1db24 <_start@@Base+0x8b7c>
   1dba4:	mov	r2, r8
   1dba8:	mov	r0, r4
   1dbac:	bl	19674 <_start@@Base+0x46cc>
   1dbb0:	cmp	r8, r0
   1dbb4:	cmpne	r9, r0
   1dbb8:	mov	r9, r0
   1dbbc:	beq	1e7a4 <_start@@Base+0x97fc>
   1dbc0:	ldr	r3, [sp, #48]	; 0x30
   1dbc4:	cmp	r3, #0
   1dbc8:	bne	1dbd8 <_start@@Base+0x8c30>
   1dbcc:	ldr	r3, [r4, #8]
   1dbd0:	tst	r3, #2
   1dbd4:	beq	1b53c <_start@@Base+0x6594>
   1dbd8:	mov	r3, #4
   1dbdc:	mov	r2, r3
   1dbe0:	mov	r1, #20
   1dbe4:	ldr	r0, [r4]
   1dbe8:	bl	224dc <flatcc_builder_table_add@@Base>
   1dbec:	cmp	r0, #0
   1dbf0:	beq	1e7a4 <_start@@Base+0x97fc>
   1dbf4:	ldr	r3, [sp, #48]	; 0x30
   1dbf8:	str	r3, [r0]
   1dbfc:	b	1b53c <_start@@Base+0x6594>
   1dc00:	mov	r1, r0
   1dc04:	mov	r2, r8
   1dc08:	mov	r0, r4
   1dc0c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc10:	mov	r9, r0
   1dc14:	b	1b53c <_start@@Base+0x6594>
   1dc18:	mov	r2, r8
   1dc1c:	mov	r1, r5
   1dc20:	mov	r0, r4
   1dc24:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc28:	mov	r9, r0
   1dc2c:	b	1b53c <_start@@Base+0x6594>
   1dc30:	mov	r2, r8
   1dc34:	mov	r1, r6
   1dc38:	mov	r0, r4
   1dc3c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1dc40:	mov	r9, r0
   1dc44:	b	1b53c <_start@@Base+0x6594>
   1dc48:	add	r3, pc, #976	; 0x3d0
   1dc4c:	ldrd	r2, [r3]
   1dc50:	cmp	r1, r3
   1dc54:	cmpeq	r0, r2
   1dc58:	bhi	1de4c <_start@@Base+0x8ea4>
   1dc5c:	add	r3, pc, #964	; 0x3c4
   1dc60:	ldrd	r2, [r3]
   1dc64:	cmp	r1, r3
   1dc68:	cmpeq	r0, r2
   1dc6c:	bne	1de34 <_start@@Base+0x8e8c>
   1dc70:	mov	r3, #8
   1dc74:	mov	r2, r8
   1dc78:	mov	r1, r6
   1dc7c:	mov	r0, r4
   1dc80:	bl	1850c <_start@@Base+0x3564>
   1dc84:	cmp	r6, r0
   1dc88:	mov	r7, r0
   1dc8c:	beq	1dd28 <_start@@Base+0x8d80>
   1dc90:	add	r5, sp, #56	; 0x38
   1dc94:	mov	r2, #0
   1dc98:	mov	r3, #0
   1dc9c:	mov	r1, r0
   1dca0:	strd	r2, [r5, #-8]!
   1dca4:	mov	r0, r4
   1dca8:	mov	r3, r5
   1dcac:	mov	r2, r8
   1dcb0:	bl	179f8 <_start@@Base+0x2a50>
   1dcb4:	cmp	r7, r0
   1dcb8:	mov	r9, r0
   1dcbc:	bne	1dce8 <_start@@Base+0x8d40>
   1dcc0:	mov	r1, r0
   1dcc4:	str	r5, [sp]
   1dcc8:	ldr	r3, [pc, #872]	; 1e038 <_start@@Base+0x9090>
   1dccc:	mov	r2, r8
   1dcd0:	mov	r0, r4
   1dcd4:	bl	1a0b8 <_start@@Base+0x5110>
   1dcd8:	cmp	r8, r0
   1dcdc:	cmpne	r9, r0
   1dce0:	mov	r9, r0
   1dce4:	beq	1e7a4 <_start@@Base+0x97fc>
   1dce8:	ldrd	r2, [sp, #48]	; 0x30
   1dcec:	orrs	r3, r2, r3
   1dcf0:	bne	1dd00 <_start@@Base+0x8d58>
   1dcf4:	ldr	r3, [r4, #8]
   1dcf8:	tst	r3, #2
   1dcfc:	beq	1b53c <_start@@Base+0x6594>
   1dd00:	mov	r3, #8
   1dd04:	mov	r2, r3
   1dd08:	mov	r1, #18
   1dd0c:	ldr	r0, [r4]
   1dd10:	bl	224dc <flatcc_builder_table_add@@Base>
   1dd14:	cmp	r0, #0
   1dd18:	beq	1e7a4 <_start@@Base+0x97fc>
   1dd1c:	ldrd	r2, [sp, #48]	; 0x30
   1dd20:	strd	r2, [r0]
   1dd24:	b	1b53c <_start@@Base+0x6594>
   1dd28:	add	r5, r5, #16
   1dd2c:	mov	r1, r8
   1dd30:	mov	r0, r5
   1dd34:	bl	150d0 <_start@@Base+0x128>
   1dd38:	mov	r0, #0
   1dd3c:	and	r1, r1, #-16777216	; 0xff000000
   1dd40:	cmp	r1, #1627389952	; 0x61000000
   1dd44:	cmpeq	r0, #0
   1dd48:	bne	1de1c <_start@@Base+0x8e74>
   1dd4c:	mov	r3, #1
   1dd50:	mov	r2, r8
   1dd54:	mov	r1, r5
   1dd58:	mov	r0, r4
   1dd5c:	bl	1850c <_start@@Base+0x3564>
   1dd60:	cmp	r5, r0
   1dd64:	mov	r6, r0
   1dd68:	beq	1de04 <_start@@Base+0x8e5c>
   1dd6c:	add	r5, sp, #56	; 0x38
   1dd70:	mov	r2, #0
   1dd74:	mov	r3, #0
   1dd78:	mov	r1, r0
   1dd7c:	strd	r2, [r5, #-8]!
   1dd80:	mov	r0, r4
   1dd84:	mov	r3, r5
   1dd88:	mov	r2, r8
   1dd8c:	bl	179f8 <_start@@Base+0x2a50>
   1dd90:	cmp	r6, r0
   1dd94:	mov	r9, r0
   1dd98:	bne	1ddc4 <_start@@Base+0x8e1c>
   1dd9c:	mov	r1, r0
   1dda0:	str	r5, [sp]
   1dda4:	ldr	r3, [pc, #656]	; 1e03c <_start@@Base+0x9094>
   1dda8:	mov	r2, r8
   1ddac:	mov	r0, r4
   1ddb0:	bl	1a0b8 <_start@@Base+0x5110>
   1ddb4:	cmp	r8, r0
   1ddb8:	cmpne	r9, r0
   1ddbc:	mov	r9, r0
   1ddc0:	beq	1e7a4 <_start@@Base+0x97fc>
   1ddc4:	ldrd	r2, [sp, #48]	; 0x30
   1ddc8:	orrs	r3, r2, r3
   1ddcc:	bne	1dddc <_start@@Base+0x8e34>
   1ddd0:	ldr	r3, [r4, #8]
   1ddd4:	tst	r3, #2
   1ddd8:	beq	1b53c <_start@@Base+0x6594>
   1dddc:	mov	r3, #8
   1dde0:	mov	r2, r3
   1dde4:	mov	r1, #22
   1dde8:	ldr	r0, [r4]
   1ddec:	bl	224dc <flatcc_builder_table_add@@Base>
   1ddf0:	cmp	r0, #0
   1ddf4:	beq	1e7a4 <_start@@Base+0x97fc>
   1ddf8:	ldrd	r2, [sp, #48]	; 0x30
   1ddfc:	strd	r2, [r0]
   1de00:	b	1b53c <_start@@Base+0x6594>
   1de04:	mov	r2, r8
   1de08:	mov	r1, r5
   1de0c:	mov	r0, r4
   1de10:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1de14:	mov	r9, r0
   1de18:	b	1b53c <_start@@Base+0x6594>
   1de1c:	mov	r2, r8
   1de20:	mov	r1, r5
   1de24:	mov	r0, r4
   1de28:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1de2c:	mov	r9, r0
   1de30:	b	1b53c <_start@@Base+0x6594>
   1de34:	mov	r2, r8
   1de38:	mov	r1, r6
   1de3c:	mov	r0, r4
   1de40:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1de44:	mov	r9, r0
   1de48:	b	1b53c <_start@@Base+0x6594>
   1de4c:	add	r3, pc, #476	; 0x1dc
   1de50:	ldrd	r2, [r3]
   1de54:	cmp	r1, r3
   1de58:	cmpeq	r0, r2
   1de5c:	bne	1e048 <_start@@Base+0x90a0>
   1de60:	mov	r3, #8
   1de64:	mov	r2, r8
   1de68:	mov	r1, r6
   1de6c:	mov	r0, r4
   1de70:	bl	1850c <_start@@Base+0x3564>
   1de74:	cmp	r6, r0
   1de78:	mov	r7, r0
   1de7c:	beq	1df14 <_start@@Base+0x8f6c>
   1de80:	add	r5, sp, #56	; 0x38
   1de84:	mov	r3, #0
   1de88:	str	r3, [r5, #-8]!
   1de8c:	mov	r1, r0
   1de90:	mov	r3, r5
   1de94:	mov	r2, r8
   1de98:	mov	r0, r4
   1de9c:	bl	18d84 <_start@@Base+0x3ddc>
   1dea0:	cmp	r7, r0
   1dea4:	mov	r9, r0
   1dea8:	bne	1ded4 <_start@@Base+0x8f2c>
   1deac:	mov	r1, r0
   1deb0:	str	r5, [sp]
   1deb4:	ldr	r3, [pc, #388]	; 1e040 <_start@@Base+0x9098>
   1deb8:	mov	r2, r8
   1debc:	mov	r0, r4
   1dec0:	bl	1930c <_start@@Base+0x4364>
   1dec4:	cmp	r8, r0
   1dec8:	cmpne	r9, r0
   1decc:	mov	r9, r0
   1ded0:	beq	1e7a4 <_start@@Base+0x97fc>
   1ded4:	ldr	r3, [sp, #48]	; 0x30
   1ded8:	cmp	r3, #0
   1dedc:	bne	1deec <_start@@Base+0x8f44>
   1dee0:	ldr	r3, [r4, #8]
   1dee4:	tst	r3, #2
   1dee8:	beq	1b53c <_start@@Base+0x6594>
   1deec:	mov	r3, #4
   1def0:	mov	r2, r3
   1def4:	mov	r1, #17
   1def8:	ldr	r0, [r4]
   1defc:	bl	224dc <flatcc_builder_table_add@@Base>
   1df00:	cmp	r0, #0
   1df04:	beq	1e7a4 <_start@@Base+0x97fc>
   1df08:	ldr	r3, [sp, #48]	; 0x30
   1df0c:	str	r3, [r0]
   1df10:	b	1b53c <_start@@Base+0x6594>
   1df14:	add	r5, r5, #16
   1df18:	mov	r1, r8
   1df1c:	mov	r0, r5
   1df20:	bl	150d0 <_start@@Base+0x128>
   1df24:	mov	r0, #0
   1df28:	and	r1, r1, #-16777216	; 0xff000000
   1df2c:	cmp	r1, #1627389952	; 0x61000000
   1df30:	cmpeq	r0, #0
   1df34:	bne	1e004 <_start@@Base+0x905c>
   1df38:	mov	r3, #1
   1df3c:	mov	r2, r8
   1df40:	mov	r1, r5
   1df44:	mov	r0, r4
   1df48:	bl	1850c <_start@@Base+0x3564>
   1df4c:	cmp	r5, r0
   1df50:	mov	r6, r0
   1df54:	beq	1dfec <_start@@Base+0x9044>
   1df58:	add	r5, sp, #56	; 0x38
   1df5c:	mov	r3, #0
   1df60:	str	r3, [r5, #-8]!
   1df64:	mov	r1, r0
   1df68:	mov	r3, r5
   1df6c:	mov	r2, r8
   1df70:	mov	r0, r4
   1df74:	bl	18d84 <_start@@Base+0x3ddc>
   1df78:	cmp	r6, r0
   1df7c:	mov	r9, r0
   1df80:	bne	1dfac <_start@@Base+0x9004>
   1df84:	mov	r1, r0
   1df88:	str	r5, [sp]
   1df8c:	ldr	r3, [pc, #176]	; 1e044 <_start@@Base+0x909c>
   1df90:	mov	r2, r8
   1df94:	mov	r0, r4
   1df98:	bl	1930c <_start@@Base+0x4364>
   1df9c:	cmp	r8, r0
   1dfa0:	cmpne	r9, r0
   1dfa4:	mov	r9, r0
   1dfa8:	beq	1e7a4 <_start@@Base+0x97fc>
   1dfac:	ldr	r3, [sp, #48]	; 0x30
   1dfb0:	cmp	r3, #0
   1dfb4:	bne	1dfc4 <_start@@Base+0x901c>
   1dfb8:	ldr	r3, [r4, #8]
   1dfbc:	tst	r3, #2
   1dfc0:	beq	1b53c <_start@@Base+0x6594>
   1dfc4:	mov	r3, #4
   1dfc8:	mov	r2, r3
   1dfcc:	mov	r1, #21
   1dfd0:	ldr	r0, [r4]
   1dfd4:	bl	224dc <flatcc_builder_table_add@@Base>
   1dfd8:	cmp	r0, #0
   1dfdc:	beq	1e7a4 <_start@@Base+0x97fc>
   1dfe0:	ldr	r3, [sp, #48]	; 0x30
   1dfe4:	str	r3, [r0]
   1dfe8:	b	1b53c <_start@@Base+0x6594>
   1dfec:	mov	r2, r8
   1dff0:	mov	r1, r5
   1dff4:	mov	r0, r4
   1dff8:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1dffc:	mov	r9, r0
   1e000:	b	1b53c <_start@@Base+0x6594>
   1e004:	mov	r2, r8
   1e008:	mov	r1, r5
   1e00c:	mov	r0, r4
   1e010:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e014:	mov	r9, r0
   1e018:	b	1b53c <_start@@Base+0x6594>
   1e01c:	nop			; (mov r0, r0)
   1e020:			; <UNDEFINED> instruction: 0x666e7630
   1e024:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e028:			; <UNDEFINED> instruction: 0x666e7631
   1e02c:	teqvc	r6, #1593835520	; 0x5f000000
   1e030:			; <UNDEFINED> instruction: 0x666e7631
   1e034:	ldrvc	r3, [r3, #-607]!	; 0xfffffda1
   1e038:	andeq	r4, r4, r0, lsr #5
   1e03c:	andeq	r4, r4, ip, lsr #5
   1e040:			; <UNDEFINED> instruction: 0x000442b8
   1e044:	andeq	r4, r4, r4, asr #5
   1e048:	add	r3, pc, #912	; 0x390
   1e04c:	ldrd	r2, [r3]
   1e050:	cmp	r1, r3
   1e054:	cmpeq	r0, r2
   1e058:	bne	1e220 <_start@@Base+0x9278>
   1e05c:	mov	r3, #8
   1e060:	mov	r2, r8
   1e064:	mov	r1, r6
   1e068:	mov	r0, r4
   1e06c:	bl	1850c <_start@@Base+0x3564>
   1e070:	cmp	r6, r0
   1e074:	mov	r7, r0
   1e078:	beq	1e114 <_start@@Base+0x916c>
   1e07c:	add	r5, sp, #56	; 0x38
   1e080:	mov	r2, #0
   1e084:	mov	r3, #0
   1e088:	mov	r1, r0
   1e08c:	strd	r2, [r5, #-8]!
   1e090:	mov	r0, r4
   1e094:	mov	r3, r5
   1e098:	mov	r2, r8
   1e09c:	bl	18cf0 <_start@@Base+0x3d48>
   1e0a0:	cmp	r7, r0
   1e0a4:	mov	r9, r0
   1e0a8:	bne	1e0d4 <_start@@Base+0x912c>
   1e0ac:	mov	r1, r0
   1e0b0:	str	r5, [sp]
   1e0b4:	ldr	r3, [pc, #844]	; 1e408 <_start@@Base+0x9460>
   1e0b8:	mov	r2, r8
   1e0bc:	mov	r0, r4
   1e0c0:	bl	14658 <__assert_fail@plt+0x10>
   1e0c4:	cmp	r8, r0
   1e0c8:	cmpne	r9, r0
   1e0cc:	mov	r9, r0
   1e0d0:	beq	1e7a4 <_start@@Base+0x97fc>
   1e0d4:	ldrd	r2, [sp, #48]	; 0x30
   1e0d8:	orrs	r3, r2, r3
   1e0dc:	bne	1e0ec <_start@@Base+0x9144>
   1e0e0:	ldr	r3, [r4, #8]
   1e0e4:	tst	r3, #2
   1e0e8:	beq	1b53c <_start@@Base+0x6594>
   1e0ec:	mov	r3, #8
   1e0f0:	mov	r2, r3
   1e0f4:	mov	r1, #19
   1e0f8:	ldr	r0, [r4]
   1e0fc:	bl	224dc <flatcc_builder_table_add@@Base>
   1e100:	cmp	r0, #0
   1e104:	beq	1e7a4 <_start@@Base+0x97fc>
   1e108:	ldrd	r2, [sp, #48]	; 0x30
   1e10c:	strd	r2, [r0]
   1e110:	b	1b53c <_start@@Base+0x6594>
   1e114:	add	r5, r5, #16
   1e118:	mov	r1, r8
   1e11c:	mov	r0, r5
   1e120:	bl	150d0 <_start@@Base+0x128>
   1e124:	mov	r0, #0
   1e128:	and	r1, r1, #-16777216	; 0xff000000
   1e12c:	cmp	r1, #1627389952	; 0x61000000
   1e130:	cmpeq	r0, #0
   1e134:	bne	1e208 <_start@@Base+0x9260>
   1e138:	mov	r3, #1
   1e13c:	mov	r2, r8
   1e140:	mov	r1, r5
   1e144:	mov	r0, r4
   1e148:	bl	1850c <_start@@Base+0x3564>
   1e14c:	cmp	r5, r0
   1e150:	mov	r6, r0
   1e154:	beq	1e1f0 <_start@@Base+0x9248>
   1e158:	add	r5, sp, #56	; 0x38
   1e15c:	mov	r2, #0
   1e160:	mov	r3, #0
   1e164:	mov	r1, r0
   1e168:	strd	r2, [r5, #-8]!
   1e16c:	mov	r0, r4
   1e170:	mov	r3, r5
   1e174:	mov	r2, r8
   1e178:	bl	18cf0 <_start@@Base+0x3d48>
   1e17c:	cmp	r6, r0
   1e180:	mov	r9, r0
   1e184:	bne	1e1b0 <_start@@Base+0x9208>
   1e188:	mov	r1, r0
   1e18c:	str	r5, [sp]
   1e190:	ldr	r3, [pc, #628]	; 1e40c <_start@@Base+0x9464>
   1e194:	mov	r2, r8
   1e198:	mov	r0, r4
   1e19c:	bl	14658 <__assert_fail@plt+0x10>
   1e1a0:	cmp	r8, r0
   1e1a4:	cmpne	r9, r0
   1e1a8:	mov	r9, r0
   1e1ac:	beq	1e7a4 <_start@@Base+0x97fc>
   1e1b0:	ldrd	r2, [sp, #48]	; 0x30
   1e1b4:	orrs	r3, r2, r3
   1e1b8:	bne	1e1c8 <_start@@Base+0x9220>
   1e1bc:	ldr	r3, [r4, #8]
   1e1c0:	tst	r3, #2
   1e1c4:	beq	1b53c <_start@@Base+0x6594>
   1e1c8:	mov	r3, #8
   1e1cc:	mov	r2, r3
   1e1d0:	mov	r1, #23
   1e1d4:	ldr	r0, [r4]
   1e1d8:	bl	224dc <flatcc_builder_table_add@@Base>
   1e1dc:	cmp	r0, #0
   1e1e0:	beq	1e7a4 <_start@@Base+0x97fc>
   1e1e4:	ldrd	r2, [sp, #48]	; 0x30
   1e1e8:	strd	r2, [r0]
   1e1ec:	b	1b53c <_start@@Base+0x6594>
   1e1f0:	mov	r2, r8
   1e1f4:	mov	r1, r5
   1e1f8:	mov	r0, r4
   1e1fc:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e200:	mov	r9, r0
   1e204:	b	1b53c <_start@@Base+0x6594>
   1e208:	mov	r2, r8
   1e20c:	mov	r1, r5
   1e210:	mov	r0, r4
   1e214:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e218:	mov	r9, r0
   1e21c:	b	1b53c <_start@@Base+0x6594>
   1e220:	mov	r2, r8
   1e224:	mov	r1, r6
   1e228:	mov	r0, r4
   1e22c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e230:	mov	r9, r0
   1e234:	b	1b53c <_start@@Base+0x6594>
   1e238:	add	r3, pc, #424	; 0x1a8
   1e23c:	ldrd	r2, [r3]
   1e240:	cmp	r1, r3
   1e244:	cmpeq	r0, r2
   1e248:	bhi	1e4c0 <_start@@Base+0x9518>
   1e24c:	add	r3, pc, #412	; 0x19c
   1e250:	ldrd	r2, [r3]
   1e254:	cmp	r1, r3
   1e258:	cmpeq	r0, r2
   1e25c:	bne	1e4a8 <_start@@Base+0x9500>
   1e260:	add	r6, r5, #8
   1e264:	mov	r1, r8
   1e268:	mov	r0, r6
   1e26c:	bl	150d0 <_start@@Base+0x128>
   1e270:	add	r3, pc, #384	; 0x180
   1e274:	ldrd	r2, [r3]
   1e278:	cmp	r1, r3
   1e27c:	cmpeq	r0, r2
   1e280:	bne	1e490 <_start@@Base+0x94e8>
   1e284:	add	r5, r5, #16
   1e288:	mov	r1, r8
   1e28c:	mov	r0, r5
   1e290:	bl	150d0 <_start@@Base+0x128>
   1e294:	add	r3, pc, #356	; 0x164
   1e298:	ldrd	r2, [r3]
   1e29c:	mov	r0, #0
   1e2a0:	cmp	r1, r3
   1e2a4:	cmpeq	r0, r2
   1e2a8:	bne	1e478 <_start@@Base+0x94d0>
   1e2ac:	mov	r3, #4
   1e2b0:	mov	r2, r8
   1e2b4:	mov	r1, r5
   1e2b8:	mov	r0, r4
   1e2bc:	bl	1850c <_start@@Base+0x3564>
   1e2c0:	cmp	r5, r0
   1e2c4:	mov	r9, r0
   1e2c8:	beq	1e460 <_start@@Base+0x94b8>
   1e2cc:	cmp	r8, r0
   1e2d0:	beq	1e414 <_start@@Base+0x946c>
   1e2d4:	ldrb	r3, [r0]
   1e2d8:	cmp	r3, #91	; 0x5b
   1e2dc:	bne	1e414 <_start@@Base+0x946c>
   1e2e0:	mov	r2, #1
   1e2e4:	mvn	r3, #0
   1e2e8:	mov	r1, r2
   1e2ec:	ldr	r0, [r4]
   1e2f0:	bl	21400 <flatcc_builder_start_vector@@Base>
   1e2f4:	subs	r5, r0, #0
   1e2f8:	bne	1e7a4 <_start@@Base+0x97fc>
   1e2fc:	mov	r1, r9
   1e300:	add	r3, sp, #28
   1e304:	mov	r2, r8
   1e308:	mov	r0, r4
   1e30c:	bl	18c68 <_start@@Base+0x3cc0>
   1e310:	ldr	r7, [pc, #248]	; 1e410 <_start@@Base+0x9468>
   1e314:	add	r6, sp, #48	; 0x30
   1e318:	mov	r9, r0
   1e31c:	ldr	r3, [sp, #28]
   1e320:	cmp	r3, #0
   1e324:	bne	1e360 <_start@@Base+0x93b8>
   1e328:	ldr	r0, [r4]
   1e32c:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1e330:	str	r0, [sp, #32]
   1e334:	ldr	r3, [sp, #32]
   1e338:	cmp	r3, #0
   1e33c:	beq	1e7a4 <_start@@Base+0x97fc>
   1e340:	mov	r1, #13
   1e344:	ldr	r0, [r4]
   1e348:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1e34c:	cmp	r0, #0
   1e350:	beq	1e7a4 <_start@@Base+0x97fc>
   1e354:	ldr	r3, [sp, #32]
   1e358:	str	r3, [r0]
   1e35c:	b	1b53c <_start@@Base+0x6594>
   1e360:	mov	r1, #1
   1e364:	ldr	r0, [r4]
   1e368:	strb	r5, [sp, #48]	; 0x30
   1e36c:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1e370:	subs	sl, r0, #0
   1e374:	beq	1e79c <_start@@Base+0x97f4>
   1e378:	mov	r1, r9
   1e37c:	mov	r3, r6
   1e380:	mov	r2, r8
   1e384:	mov	r0, r4
   1e388:	bl	18ec0 <_start@@Base+0x3f18>
   1e38c:	cmp	r9, r0
   1e390:	mov	r1, r0
   1e394:	bne	1e3bc <_start@@Base+0x9414>
   1e398:	str	r6, [sp]
   1e39c:	mov	r3, r7
   1e3a0:	mov	r2, r8
   1e3a4:	mov	r0, r4
   1e3a8:	bl	191f8 <_start@@Base+0x4250>
   1e3ac:	cmp	r8, r0
   1e3b0:	cmpne	r9, r0
   1e3b4:	mov	r1, r0
   1e3b8:	beq	1e7a0 <_start@@Base+0x97f8>
   1e3bc:	ldrb	r3, [sp, #48]	; 0x30
   1e3c0:	mov	r2, r8
   1e3c4:	mov	r0, r4
   1e3c8:	strb	r3, [sl]
   1e3cc:	add	r3, sp, #28
   1e3d0:	bl	16c70 <_start@@Base+0x1cc8>
   1e3d4:	mov	r9, r0
   1e3d8:	b	1e31c <_start@@Base+0x9374>
   1e3dc:	nop			; (mov r0, r0)
   1e3e0:			; <UNDEFINED> instruction: 0x666e7631
   1e3e4:	ldrvc	r3, [r6, #-1119]!	; 0xfffffba1
   1e3e8:	svcvs	0x00725f6e
   1e3ec:			; <UNDEFINED> instruction: 0x76656374
   1e3f0:	mcrvs	3, 3, r7, cr5, cr4, {3}
   1e3f4:	strbtvc	r7, [r5], #-884	; 0xfffffc8c
   1e3f8:	cmnvs	r4, r5, ror r2
   1e3fc:	strbvs	r6, [r4, #-1644]!	; 0xfffff994
   1e400:	andeq	r0, r0, r0
   1e404:			; <UNDEFINED> instruction: 0x66666572
   1e408:	ldrdeq	r4, [r4], -r0
   1e40c:	ldrdeq	r4, [r4], -ip
   1e410:	andeq	r4, r4, r8, ror #5
   1e414:	mov	r3, #0
   1e418:	mov	r2, r3
   1e41c:	mov	r1, r3
   1e420:	ldr	r0, [r4]
   1e424:	bl	20d18 <flatcc_builder_start_buffer@@Base>
   1e428:	cmp	r0, #0
   1e42c:	bne	1e7a4 <_start@@Base+0x97fc>
   1e430:	mov	r1, r9
   1e434:	add	r3, sp, #32
   1e438:	mov	r2, r8
   1e43c:	mov	r0, r4
   1e440:	bl	1b3a0 <_start@@Base+0x63f8>
   1e444:	ldr	r1, [sp, #32]
   1e448:	cmp	r1, #0
   1e44c:	mov	r9, r0
   1e450:	beq	1e7a4 <_start@@Base+0x97fc>
   1e454:	ldr	r0, [r4]
   1e458:	bl	20db8 <flatcc_builder_end_buffer@@Base>
   1e45c:	b	1e330 <_start@@Base+0x9388>
   1e460:	mov	r1, r0
   1e464:	mov	r2, r8
   1e468:	mov	r0, r4
   1e46c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e470:	mov	r9, r0
   1e474:	b	1b53c <_start@@Base+0x6594>
   1e478:	mov	r2, r8
   1e47c:	mov	r1, r5
   1e480:	mov	r0, r4
   1e484:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e488:	mov	r9, r0
   1e48c:	b	1b53c <_start@@Base+0x6594>
   1e490:	mov	r2, r8
   1e494:	mov	r1, r6
   1e498:	mov	r0, r4
   1e49c:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e4a0:	mov	r9, r0
   1e4a4:	b	1b53c <_start@@Base+0x6594>
   1e4a8:	mov	r2, r8
   1e4ac:	mov	r1, r5
   1e4b0:	mov	r0, r4
   1e4b4:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e4b8:	mov	r9, r0
   1e4bc:	b	1b53c <_start@@Base+0x6594>
   1e4c0:	add	r3, pc, #904	; 0x388
   1e4c4:	ldrd	r2, [r3]
   1e4c8:	cmp	r1, r3
   1e4cc:	cmpeq	r0, r2
   1e4d0:	bne	1e7f0 <_start@@Base+0x9848>
   1e4d4:	add	r6, r5, #8
   1e4d8:	mov	r1, r8
   1e4dc:	mov	r0, r6
   1e4e0:	bl	150d0 <_start@@Base+0x128>
   1e4e4:	add	r3, pc, #876	; 0x36c
   1e4e8:	ldrd	r2, [r3]
   1e4ec:	cmp	r1, r3
   1e4f0:	cmpeq	r0, r2
   1e4f4:	bne	1e664 <_start@@Base+0x96bc>
   1e4f8:	add	r5, r5, #16
   1e4fc:	mov	r1, r8
   1e500:	mov	r0, r5
   1e504:	bl	150d0 <_start@@Base+0x128>
   1e508:	mov	r0, #0
   1e50c:	and	r1, r1, #-16777216	; 0xff000000
   1e510:	cmp	r1, #1929379840	; 0x73000000
   1e514:	cmpeq	r0, #0
   1e518:	bne	1e64c <_start@@Base+0x96a4>
   1e51c:	mov	r3, #1
   1e520:	mov	r2, r8
   1e524:	mov	r1, r5
   1e528:	mov	r0, r4
   1e52c:	bl	1850c <_start@@Base+0x3564>
   1e530:	cmp	r5, r0
   1e534:	mov	r9, r0
   1e538:	beq	1e634 <_start@@Base+0x968c>
   1e53c:	mov	r2, #8
   1e540:	mvn	r3, #-536870912	; 0xe0000000
   1e544:	mov	r1, r2
   1e548:	ldr	r0, [r4]
   1e54c:	bl	21400 <flatcc_builder_start_vector@@Base>
   1e550:	cmp	r0, #0
   1e554:	bne	1e7a4 <_start@@Base+0x97fc>
   1e558:	mov	r1, r9
   1e55c:	add	r3, sp, #28
   1e560:	mov	r2, r8
   1e564:	mov	r0, r4
   1e568:	bl	18c68 <_start@@Base+0x3cc0>
   1e56c:	ldr	r6, [pc, #756]	; 1e868 <_start@@Base+0x98c0>
   1e570:	add	r5, sp, #48	; 0x30
   1e574:	mov	r9, r0
   1e578:	ldr	r3, [sp, #28]
   1e57c:	cmp	r3, #0
   1e580:	bne	1e5b8 <_start@@Base+0x9610>
   1e584:	ldr	r0, [r4]
   1e588:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1e58c:	cmp	r0, #0
   1e590:	str	r0, [sp, #32]
   1e594:	beq	1e7a4 <_start@@Base+0x97fc>
   1e598:	mov	r1, #33	; 0x21
   1e59c:	ldr	r0, [r4]
   1e5a0:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1e5a4:	cmp	r0, #0
   1e5a8:	beq	1e7a4 <_start@@Base+0x97fc>
   1e5ac:	ldr	r3, [sp, #32]
   1e5b0:	str	r3, [r0]
   1e5b4:	b	1b53c <_start@@Base+0x6594>
   1e5b8:	mov	r1, #1
   1e5bc:	ldr	r0, [r4]
   1e5c0:	vstr	d9, [sp, #48]	; 0x30
   1e5c4:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1e5c8:	subs	r7, r0, #0
   1e5cc:	beq	1e79c <_start@@Base+0x97f4>
   1e5d0:	mov	r1, r9
   1e5d4:	mov	r3, r5
   1e5d8:	mov	r2, r8
   1e5dc:	mov	r0, r4
   1e5e0:	bl	25550 <flatcc_json_parser_double@@Base>
   1e5e4:	cmp	r9, r0
   1e5e8:	mov	r1, r0
   1e5ec:	bne	1e614 <_start@@Base+0x966c>
   1e5f0:	str	r5, [sp]
   1e5f4:	mov	r3, r6
   1e5f8:	mov	r2, r8
   1e5fc:	mov	r0, r4
   1e600:	bl	17908 <_start@@Base+0x2960>
   1e604:	cmp	r8, r0
   1e608:	cmpne	r9, r0
   1e60c:	mov	r1, r0
   1e610:	beq	1e7a0 <_start@@Base+0x97f8>
   1e614:	ldrd	r2, [sp, #48]	; 0x30
   1e618:	mov	r0, r4
   1e61c:	strd	r2, [r7]
   1e620:	add	r3, sp, #28
   1e624:	mov	r2, r8
   1e628:	bl	16c70 <_start@@Base+0x1cc8>
   1e62c:	mov	r9, r0
   1e630:	b	1e578 <_start@@Base+0x95d0>
   1e634:	mov	r1, r0
   1e638:	mov	r2, r8
   1e63c:	mov	r0, r4
   1e640:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e644:	mov	r9, r0
   1e648:	b	1b53c <_start@@Base+0x6594>
   1e64c:	mov	r2, r8
   1e650:	mov	r1, r5
   1e654:	mov	r0, r4
   1e658:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e65c:	mov	r9, r0
   1e660:	b	1b53c <_start@@Base+0x6594>
   1e664:	add	r3, pc, #500	; 0x1f4
   1e668:	ldrd	r2, [r3]
   1e66c:	bic	r0, r0, #255	; 0xff
   1e670:	cmp	r1, r3
   1e674:	cmpeq	r0, r2
   1e678:	bne	1e7d8 <_start@@Base+0x9830>
   1e67c:	mov	r3, #7
   1e680:	mov	r2, r8
   1e684:	mov	r1, r6
   1e688:	mov	r0, r4
   1e68c:	bl	1850c <_start@@Base+0x3564>
   1e690:	cmp	r6, r0
   1e694:	mov	r9, r0
   1e698:	beq	1e7c0 <_start@@Base+0x9818>
   1e69c:	mov	r2, #8
   1e6a0:	mvn	r3, #-536870912	; 0xe0000000
   1e6a4:	mov	r1, r2
   1e6a8:	ldr	r0, [r4]
   1e6ac:	bl	21400 <flatcc_builder_start_vector@@Base>
   1e6b0:	cmp	r0, #0
   1e6b4:	bne	1e7a4 <_start@@Base+0x97fc>
   1e6b8:	mov	r1, r9
   1e6bc:	add	r3, sp, #28
   1e6c0:	mov	r2, r8
   1e6c4:	mov	r0, r4
   1e6c8:	bl	18c68 <_start@@Base+0x3cc0>
   1e6cc:	ldr	sl, [pc, #408]	; 1e86c <_start@@Base+0x98c4>
   1e6d0:	mov	r6, #0
   1e6d4:	mov	r7, #0
   1e6d8:	add	r5, sp, #48	; 0x30
   1e6dc:	mov	r9, r0
   1e6e0:	ldr	r3, [sp, #28]
   1e6e4:	cmp	r3, #0
   1e6e8:	bne	1e720 <_start@@Base+0x9778>
   1e6ec:	ldr	r0, [r4]
   1e6f0:	bl	21d78 <flatcc_builder_end_vector@@Base>
   1e6f4:	cmp	r0, #0
   1e6f8:	str	r0, [sp, #32]
   1e6fc:	beq	1e7a4 <_start@@Base+0x97fc>
   1e700:	mov	r1, #32
   1e704:	ldr	r0, [r4]
   1e708:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   1e70c:	cmp	r0, #0
   1e710:	beq	1e7a4 <_start@@Base+0x97fc>
   1e714:	ldr	r3, [sp, #32]
   1e718:	str	r3, [r0]
   1e71c:	b	1b53c <_start@@Base+0x6594>
   1e720:	mov	r1, #1
   1e724:	ldr	r0, [r4]
   1e728:	strd	r6, [sp, #48]	; 0x30
   1e72c:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   1e730:	subs	fp, r0, #0
   1e734:	beq	1e79c <_start@@Base+0x97f4>
   1e738:	mov	r1, r9
   1e73c:	mov	r3, r5
   1e740:	mov	r2, r8
   1e744:	mov	r0, r4
   1e748:	bl	179f8 <_start@@Base+0x2a50>
   1e74c:	cmp	r9, r0
   1e750:	mov	r1, r0
   1e754:	bne	1e77c <_start@@Base+0x97d4>
   1e758:	str	r5, [sp]
   1e75c:	mov	r3, sl
   1e760:	mov	r2, r8
   1e764:	mov	r0, r4
   1e768:	bl	1a0b8 <_start@@Base+0x5110>
   1e76c:	cmp	r8, r0
   1e770:	cmpne	r9, r0
   1e774:	mov	r1, r0
   1e778:	beq	1e7a0 <_start@@Base+0x97f8>
   1e77c:	ldrd	r2, [sp, #48]	; 0x30
   1e780:	mov	r0, r4
   1e784:	strd	r2, [fp]
   1e788:	add	r3, sp, #28
   1e78c:	mov	r2, r8
   1e790:	bl	16c70 <_start@@Base+0x1cc8>
   1e794:	mov	r9, r0
   1e798:	b	1e6e0 <_start@@Base+0x9738>
   1e79c:	mov	r1, r9
   1e7a0:	mov	r9, r1
   1e7a4:	mov	r1, r9
   1e7a8:	mov	r3, #33	; 0x21
   1e7ac:	mov	r2, r8
   1e7b0:	mov	r0, r4
   1e7b4:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1e7b8:	mov	r9, r0
   1e7bc:	b	1e838 <_start@@Base+0x9890>
   1e7c0:	mov	r1, r0
   1e7c4:	mov	r2, r8
   1e7c8:	mov	r0, r4
   1e7cc:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7d0:	mov	r9, r0
   1e7d4:	b	1b53c <_start@@Base+0x6594>
   1e7d8:	mov	r2, r8
   1e7dc:	mov	r1, r6
   1e7e0:	mov	r0, r4
   1e7e4:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e7e8:	mov	r9, r0
   1e7ec:	b	1b53c <_start@@Base+0x6594>
   1e7f0:	mov	r2, r8
   1e7f4:	mov	r1, r5
   1e7f8:	mov	r0, r4
   1e7fc:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1e800:	mov	r9, r0
   1e804:	b	1b53c <_start@@Base+0x6594>
   1e808:	ldr	r3, [sp, #36]	; 0x24
   1e80c:	mov	r1, r9
   1e810:	mov	r2, r8
   1e814:	mov	r0, r4
   1e818:	bl	26384 <flatcc_json_parser_finalize_unions@@Base>
   1e81c:	mov	r9, r0
   1e820:	ldr	r0, [r4]
   1e824:	bl	21b58 <flatcc_builder_end_table@@Base>
   1e828:	ldr	r3, [sp, #20]
   1e82c:	cmp	r0, #0
   1e830:	str	r0, [r3]
   1e834:	beq	1e7a4 <_start@@Base+0x97fc>
   1e838:	mov	r0, r9
   1e83c:	add	sp, sp, #60	; 0x3c
   1e840:	vpop	{d8-d9}
   1e844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e848:	mov	r9, r5
   1e84c:	b	1e7a4 <_start@@Base+0x97fc>
   1e850:	svcvs	0x00725f6f
   1e854:			; <UNDEFINED> instruction: 0x76656374
   1e858:	strbvc	r6, [r2, #-3173]!	; 0xfffff39b
   1e85c:	ldrbvs	r6, [pc], -pc, ror #8
   1e860:	cdpvs	3, 6, cr7, cr7, cr0, {0}
   1e864:	ldrbvs	r6, [pc], -pc, ror #24
   1e868:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1e86c:	andeq	r4, r4, r0, lsl #6
   1e870:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e874:	mov	r5, r2
   1e878:	ldr	r7, [sp, #48]	; 0x30
   1e87c:	mov	r2, #0
   1e880:	mov	r4, r0
   1e884:	mov	r8, r1
   1e888:	str	r2, [r7]
   1e88c:	cmp	r3, #4
   1e890:	ldrls	pc, [pc, r3, lsl #2]
   1e894:	b	1ecfc <_start@@Base+0x9d54>
   1e898:	andeq	lr, r1, ip, lsr #17
   1e89c:			; <UNDEFINED> instruction: 0x0001e8bc
   1e8a0:	strdeq	lr, [r1], -r8
   1e8a4:	ldrdeq	lr, [r1], -ip
   1e8a8:	andeq	lr, r1, ip, ror #25
   1e8ac:	mov	r2, r5
   1e8b0:	bl	16130 <_start@@Base+0x1188>
   1e8b4:	add	sp, sp, #16
   1e8b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e8bc:	mov	r3, r7
   1e8c0:	mov	r2, r5
   1e8c4:	bl	1b3a0 <_start@@Base+0x63f8>
   1e8c8:	ldr	r3, [r4, #20]
   1e8cc:	cmp	r3, #0
   1e8d0:	bne	1e8b4 <_start@@Base+0x990c>
   1e8d4:	ldr	r3, [r7]
   1e8d8:	cmp	r3, #0
   1e8dc:	bne	1e8b4 <_start@@Base+0x990c>
   1e8e0:	mov	r3, #33	; 0x21
   1e8e4:	mov	r2, r5
   1e8e8:	mov	r1, r0
   1e8ec:	mov	r0, r4
   1e8f0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1e8f4:	b	1e8b4 <_start@@Base+0x990c>
   1e8f8:	mov	r1, #4
   1e8fc:	ldr	r0, [r0]
   1e900:	bl	2151c <flatcc_builder_start_table@@Base>
   1e904:	cmp	r0, #0
   1e908:	bne	1e950 <_start@@Base+0x99a8>
   1e90c:	add	r3, sp, #12
   1e910:	mov	r2, r5
   1e914:	mov	r1, r8
   1e918:	mov	r0, r4
   1e91c:	bl	183b8 <_start@@Base+0x3410>
   1e920:	ldr	r3, [sp, #12]
   1e924:	mov	r8, r0
   1e928:	cmp	r3, #0
   1e92c:	bne	1e970 <_start@@Base+0x99c8>
   1e930:	ldr	r3, [r4, #20]
   1e934:	cmp	r3, #0
   1e938:	bne	1e950 <_start@@Base+0x99a8>
   1e93c:	ldr	r0, [r4]
   1e940:	bl	21b58 <flatcc_builder_end_table@@Base>
   1e944:	cmp	r0, #0
   1e948:	str	r0, [r7]
   1e94c:	bne	1e968 <_start@@Base+0x99c0>
   1e950:	mov	r1, r8
   1e954:	mov	r3, #33	; 0x21
   1e958:	mov	r2, r5
   1e95c:	mov	r0, r4
   1e960:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   1e964:	mov	r8, r0
   1e968:	mov	r0, r8
   1e96c:	b	1e8c8 <_start@@Base+0x9920>
   1e970:	mov	r2, r5
   1e974:	mov	r1, r8
   1e978:	mov	r0, r4
   1e97c:	bl	176c0 <_start@@Base+0x2718>
   1e980:	mov	r1, r5
   1e984:	mov	sl, r0
   1e988:	bl	150d0 <_start@@Base+0x128>
   1e98c:	ldr	r2, [pc, #932]	; 1ed38 <_start@@Base+0x9d90>
   1e990:	mvn	r3, #0
   1e994:	and	r2, r2, r0
   1e998:	and	r3, r3, r1
   1e99c:	mov	r8, r0
   1e9a0:	mov	r9, r1
   1e9a4:	add	r1, pc, #884	; 0x374
   1e9a8:	ldrd	r0, [r1]
   1e9ac:	cmp	r3, r1
   1e9b0:	cmpeq	r2, r0
   1e9b4:	bne	1ea80 <_start@@Base+0x9ad8>
   1e9b8:	mov	r3, #6
   1e9bc:	mov	r2, r5
   1e9c0:	mov	r1, sl
   1e9c4:	mov	r0, r4
   1e9c8:	bl	1850c <_start@@Base+0x3564>
   1e9cc:	cmp	sl, r0
   1e9d0:	mov	r6, r0
   1e9d4:	beq	1eb38 <_start@@Base+0x9b90>
   1e9d8:	add	r9, sp, #16
   1e9dc:	mov	r3, #0
   1e9e0:	strb	r3, [r9, #-5]!
   1e9e4:	mov	r1, r0
   1e9e8:	mov	r3, r9
   1e9ec:	mov	r2, r5
   1e9f0:	mov	r0, r4
   1e9f4:	bl	19150 <_start@@Base+0x41a8>
   1e9f8:	cmp	r6, r0
   1e9fc:	mov	r8, r0
   1ea00:	bne	1ea2c <_start@@Base+0x9a84>
   1ea04:	mov	r1, r0
   1ea08:	str	r9, [sp]
   1ea0c:	ldr	r3, [pc, #808]	; 1ed3c <_start@@Base+0x9d94>
   1ea10:	mov	r2, r5
   1ea14:	mov	r0, r4
   1ea18:	bl	19dd0 <_start@@Base+0x4e28>
   1ea1c:	cmp	r5, r0
   1ea20:	cmpne	r8, r0
   1ea24:	mov	r8, r0
   1ea28:	beq	1e950 <_start@@Base+0x99a8>
   1ea2c:	ldrsb	r3, [sp, #11]
   1ea30:	cmp	r3, #2
   1ea34:	bne	1ea44 <_start@@Base+0x9a9c>
   1ea38:	ldr	r3, [r4, #8]
   1ea3c:	tst	r3, #2
   1ea40:	beq	1ea68 <_start@@Base+0x9ac0>
   1ea44:	mov	r3, #1
   1ea48:	mov	r2, r3
   1ea4c:	mov	r1, r3
   1ea50:	ldr	r0, [r4]
   1ea54:	bl	224dc <flatcc_builder_table_add@@Base>
   1ea58:	cmp	r0, #0
   1ea5c:	beq	1e950 <_start@@Base+0x99a8>
   1ea60:	ldrsb	r3, [sp, #11]
   1ea64:	strb	r3, [r0]
   1ea68:	add	r3, sp, #12
   1ea6c:	mov	r2, r5
   1ea70:	mov	r1, r8
   1ea74:	mov	r0, r4
   1ea78:	bl	16d28 <_start@@Base+0x1d80>
   1ea7c:	b	1e920 <_start@@Base+0x9978>
   1ea80:	add	r3, pc, #672	; 0x2a0
   1ea84:	ldrd	r2, [r3]
   1ea88:	and	r0, r8, #-16777216	; 0xff000000
   1ea8c:	cmp	r9, r3
   1ea90:	cmpeq	r0, r2
   1ea94:	movne	r6, sl
   1ea98:	bne	1eb38 <_start@@Base+0x9b90>
   1ea9c:	mov	r3, #5
   1eaa0:	mov	r2, r5
   1eaa4:	mov	r1, sl
   1eaa8:	mov	r0, r4
   1eaac:	bl	1850c <_start@@Base+0x3564>
   1eab0:	cmp	sl, r0
   1eab4:	mov	r6, r0
   1eab8:	beq	1eb38 <_start@@Base+0x9b90>
   1eabc:	add	r9, sp, #16
   1eac0:	mov	r3, #0
   1eac4:	strb	r3, [r9, #-5]!
   1eac8:	mov	r1, r0
   1eacc:	mov	r3, r9
   1ead0:	mov	r2, r5
   1ead4:	mov	r0, r4
   1ead8:	bl	19150 <_start@@Base+0x41a8>
   1eadc:	cmp	r6, r0
   1eae0:	mov	r8, r0
   1eae4:	bne	1eb10 <_start@@Base+0x9b68>
   1eae8:	mov	r1, r0
   1eaec:	str	r9, [sp]
   1eaf0:	ldr	r3, [pc, #584]	; 1ed40 <_start@@Base+0x9d98>
   1eaf4:	mov	r2, r5
   1eaf8:	mov	r0, r4
   1eafc:	bl	19dd0 <_start@@Base+0x4e28>
   1eb00:	cmp	r5, r0
   1eb04:	cmpne	r8, r0
   1eb08:	mov	r8, r0
   1eb0c:	beq	1e950 <_start@@Base+0x99a8>
   1eb10:	ldrsb	r3, [sp, #11]
   1eb14:	cmp	r3, #2
   1eb18:	bne	1eb28 <_start@@Base+0x9b80>
   1eb1c:	ldr	r3, [r4, #8]
   1eb20:	tst	r3, #2
   1eb24:	beq	1ea68 <_start@@Base+0x9ac0>
   1eb28:	mov	r3, #1
   1eb2c:	mov	r2, r3
   1eb30:	mov	r1, #0
   1eb34:	b	1ea50 <_start@@Base+0x9aa8>
   1eb38:	add	r1, pc, #496	; 0x1f0
   1eb3c:	ldrd	r0, [r1]
   1eb40:	bic	r3, r9, #255	; 0xff
   1eb44:	mov	r2, #0
   1eb48:	cmp	r3, r1
   1eb4c:	cmpeq	r2, r0
   1eb50:	bne	1ec04 <_start@@Base+0x9c5c>
   1eb54:	mov	r3, #3
   1eb58:	mov	r2, r5
   1eb5c:	mov	r1, r6
   1eb60:	mov	r0, r4
   1eb64:	bl	1850c <_start@@Base+0x3564>
   1eb68:	cmp	r6, r0
   1eb6c:	mov	r9, r0
   1eb70:	beq	1ecc4 <_start@@Base+0x9d1c>
   1eb74:	add	r6, sp, #16
   1eb78:	mov	r3, #0
   1eb7c:	strb	r3, [r6, #-5]!
   1eb80:	mov	r1, r0
   1eb84:	mov	r3, r6
   1eb88:	mov	r2, r5
   1eb8c:	mov	r0, r4
   1eb90:	bl	18ec0 <_start@@Base+0x3f18>
   1eb94:	cmp	r9, r0
   1eb98:	mov	r8, r0
   1eb9c:	bne	1ebc8 <_start@@Base+0x9c20>
   1eba0:	mov	r1, r0
   1eba4:	str	r6, [sp]
   1eba8:	ldr	r3, [pc, #404]	; 1ed44 <_start@@Base+0x9d9c>
   1ebac:	mov	r2, r5
   1ebb0:	mov	r0, r4
   1ebb4:	bl	191f8 <_start@@Base+0x4250>
   1ebb8:	cmp	r5, r0
   1ebbc:	cmpne	r8, r0
   1ebc0:	mov	r8, r0
   1ebc4:	beq	1e950 <_start@@Base+0x99a8>
   1ebc8:	ldrb	r3, [sp, #11]
   1ebcc:	cmp	r3, #2
   1ebd0:	bne	1ebe0 <_start@@Base+0x9c38>
   1ebd4:	ldr	r3, [r4, #8]
   1ebd8:	tst	r3, #2
   1ebdc:	beq	1ea68 <_start@@Base+0x9ac0>
   1ebe0:	mov	r3, #1
   1ebe4:	mov	r2, r3
   1ebe8:	mov	r1, #3
   1ebec:	ldr	r0, [r4]
   1ebf0:	bl	224dc <flatcc_builder_table_add@@Base>
   1ebf4:	cmp	r0, #0
   1ebf8:	beq	1e950 <_start@@Base+0x99a8>
   1ebfc:	ldrb	r3, [sp, #11]
   1ec00:	b	1ea64 <_start@@Base+0x9abc>
   1ec04:	ldr	r3, [pc, #300]	; 1ed38 <_start@@Base+0x9d90>
   1ec08:	mov	r2, #0
   1ec0c:	and	r9, r9, r3
   1ec10:	ldr	r3, [pc, #304]	; 1ed48 <_start@@Base+0x9da0>
   1ec14:	and	r8, r8, r2
   1ec18:	cmp	r9, r3
   1ec1c:	mov	r2, #0
   1ec20:	cmpeq	r8, r2
   1ec24:	bne	1ecc4 <_start@@Base+0x9d1c>
   1ec28:	mov	r3, #2
   1ec2c:	mov	r2, r5
   1ec30:	mov	r1, r6
   1ec34:	mov	r0, r4
   1ec38:	bl	1850c <_start@@Base+0x3564>
   1ec3c:	cmp	r6, r0
   1ec40:	mov	r9, r0
   1ec44:	beq	1ecc4 <_start@@Base+0x9d1c>
   1ec48:	add	r6, sp, #16
   1ec4c:	mov	r3, #0
   1ec50:	strb	r3, [r6, #-5]!
   1ec54:	mov	r1, r0
   1ec58:	mov	r3, r6
   1ec5c:	mov	r2, r5
   1ec60:	mov	r0, r4
   1ec64:	bl	18ec0 <_start@@Base+0x3f18>
   1ec68:	cmp	r9, r0
   1ec6c:	mov	r8, r0
   1ec70:	bne	1ec9c <_start@@Base+0x9cf4>
   1ec74:	mov	r1, r0
   1ec78:	str	r6, [sp]
   1ec7c:	ldr	r3, [pc, #200]	; 1ed4c <_start@@Base+0x9da4>
   1ec80:	mov	r2, r5
   1ec84:	mov	r0, r4
   1ec88:	bl	191f8 <_start@@Base+0x4250>
   1ec8c:	cmp	r5, r0
   1ec90:	cmpne	r8, r0
   1ec94:	mov	r8, r0
   1ec98:	beq	1e950 <_start@@Base+0x99a8>
   1ec9c:	ldrb	r3, [sp, #11]
   1eca0:	cmp	r3, #2
   1eca4:	bne	1ecb4 <_start@@Base+0x9d0c>
   1eca8:	ldr	r3, [r4, #8]
   1ecac:	tst	r3, #2
   1ecb0:	beq	1ea68 <_start@@Base+0x9ac0>
   1ecb4:	mov	r3, #1
   1ecb8:	mov	r2, r3
   1ecbc:	mov	r1, #2
   1ecc0:	b	1ebec <_start@@Base+0x9c44>
   1ecc4:	mov	r2, r5
   1ecc8:	mov	r1, r6
   1eccc:	mov	r0, r4
   1ecd0:	bl	25e44 <flatcc_json_parser_unmatched_symbol@@Base>
   1ecd4:	mov	r8, r0
   1ecd8:	b	1ea68 <_start@@Base+0x9ac0>
   1ecdc:	mov	r3, r7
   1ece0:	mov	r2, r5
   1ece4:	bl	18440 <_start@@Base+0x3498>
   1ece8:	b	1e8c8 <_start@@Base+0x9920>
   1ecec:	mov	r3, r7
   1ecf0:	mov	r2, r5
   1ecf4:	bl	1a1ec <_start@@Base+0x5244>
   1ecf8:	b	1e8c8 <_start@@Base+0x9920>
   1ecfc:	ldr	r3, [r0, #8]
   1ed00:	tst	r3, #1
   1ed04:	moveq	r3, #15
   1ed08:	moveq	r2, r5
   1ed0c:	beq	1e8ec <_start@@Base+0x9944>
   1ed10:	mov	r2, r5
   1ed14:	mov	r1, r8
   1ed18:	bl	25880 <flatcc_json_parser_generic_json@@Base>
   1ed1c:	b	1e8b4 <_start@@Base+0x990c>
   1ed20:	eorsvc	r0, r2, #0
   1ed24:	cmnvs	pc, #28416	; 0x6f00
   1ed28:	andvc	r0, r0, #0
   1ed2c:	cmnvs	pc, #28416	; 0x6f00
   1ed30:	andeq	r0, r0, r0
   1ed34:	strbvc	r3, [r3, #-512]!	; 0xfffffe00
   1ed38:			; <UNDEFINED> instruction: 0xffff0000
   1ed3c:	andeq	r4, r4, ip, lsl #6
   1ed40:	andeq	r4, r4, ip, lsl r3
   1ed44:	andeq	r4, r4, ip, lsr #6
   1ed48:	strbvc	r0, [r3, #-0]!
   1ed4c:	andeq	r4, r4, r8, lsr r3
   1ed50:	mov	r3, #8
   1ed54:	push	{r4, lr}
   1ed58:	mov	r2, r3
   1ed5c:	mov	r1, #0
   1ed60:	mov	r4, r0
   1ed64:	bl	233f0 <flatcc_verify_field@@Base>
   1ed68:	cmp	r0, #0
   1ed6c:	popne	{r4, pc}
   1ed70:	mov	r3, #4
   1ed74:	mov	r0, r4
   1ed78:	mov	r2, r3
   1ed7c:	mov	r1, #1
   1ed80:	pop	{r4, lr}
   1ed84:	b	233f0 <flatcc_verify_field@@Base>
   1ed88:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ed8c:	mov	r4, r1
   1ed90:	mov	r8, r0
   1ed94:	mov	r1, r2
   1ed98:	mov	r0, r4
   1ed9c:	mov	r5, r2
   1eda0:	mov	r6, r3
   1eda4:	bl	150d0 <_start@@Base+0x128>
   1eda8:	add	r3, pc, #760	; 0x2f8
   1edac:	ldrd	r2, [r3]
   1edb0:	ldr	r7, [sp, #48]	; 0x30
   1edb4:	ldr	r9, [sp, #52]	; 0x34
   1edb8:	cmp	r1, r3
   1edbc:	cmpeq	r0, r2
   1edc0:	bhi	1eed4 <_start@@Base+0x9f2c>
   1edc4:	add	r3, pc, #740	; 0x2e4
   1edc8:	ldrd	r2, [r3]
   1edcc:	mov	sl, #0
   1edd0:	bic	fp, r1, #255	; 0xff
   1edd4:	cmp	r1, r3
   1edd8:	cmpeq	r0, r2
   1eddc:	bhi	1ee30 <_start@@Base+0x9e88>
   1ede0:	add	r3, pc, #720	; 0x2d0
   1ede4:	ldrd	r2, [r3]
   1ede8:	cmp	fp, r3
   1edec:	cmpeq	sl, r2
   1edf0:	bne	1f098 <_start@@Base+0xa0f0>
   1edf4:	mov	r1, r5
   1edf8:	mov	r2, #3
   1edfc:	mov	r0, r4
   1ee00:	bl	16de0 <_start@@Base+0x1e38>
   1ee04:	cmp	r4, r0
   1ee08:	mov	r1, r0
   1ee0c:	beq	1f098 <_start@@Base+0xa0f0>
   1ee10:	str	r9, [sp, #52]	; 0x34
   1ee14:	str	r7, [sp, #48]	; 0x30
   1ee18:	mov	r3, r6
   1ee1c:	mov	r2, r5
   1ee20:	mov	r0, r8
   1ee24:	add	sp, sp, #12
   1ee28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee2c:	b	16444 <_start@@Base+0x149c>
   1ee30:	add	r3, pc, #648	; 0x288
   1ee34:	ldrd	r2, [r3]
   1ee38:	cmp	fp, r3
   1ee3c:	cmpeq	sl, r2
   1ee40:	bne	1ee80 <_start@@Base+0x9ed8>
   1ee44:	mov	r1, r5
   1ee48:	mov	r2, #3
   1ee4c:	mov	r0, r4
   1ee50:	bl	16de0 <_start@@Base+0x1e38>
   1ee54:	cmp	r4, r0
   1ee58:	mov	r1, r0
   1ee5c:	beq	1f098 <_start@@Base+0xa0f0>
   1ee60:	str	r9, [sp, #52]	; 0x34
   1ee64:	str	r7, [sp, #48]	; 0x30
   1ee68:	mov	r3, r6
   1ee6c:	mov	r2, r5
   1ee70:	mov	r0, r8
   1ee74:	add	sp, sp, #12
   1ee78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee7c:	b	17b50 <_start@@Base+0x2ba8>
   1ee80:	add	r3, pc, #576	; 0x240
   1ee84:	ldrd	r2, [r3]
   1ee88:	and	r0, r0, #-16777216	; 0xff000000
   1ee8c:	cmp	r1, r3
   1ee90:	cmpeq	r0, r2
   1ee94:	bne	1f098 <_start@@Base+0xa0f0>
   1ee98:	mov	r1, r5
   1ee9c:	mov	r2, #5
   1eea0:	mov	r0, r4
   1eea4:	bl	16de0 <_start@@Base+0x1e38>
   1eea8:	cmp	r4, r0
   1eeac:	mov	r1, r0
   1eeb0:	beq	1f098 <_start@@Base+0xa0f0>
   1eeb4:	str	r9, [sp, #52]	; 0x34
   1eeb8:	str	r7, [sp, #48]	; 0x30
   1eebc:	mov	r3, r6
   1eec0:	mov	r2, r5
   1eec4:	mov	r0, r8
   1eec8:	add	sp, sp, #12
   1eecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eed0:	b	16af0 <_start@@Base+0x1b48>
   1eed4:	add	r3, pc, #500	; 0x1f4
   1eed8:	ldrd	r2, [r3]
   1eedc:	cmp	r1, r3
   1eee0:	cmpeq	r0, r2
   1eee4:	bhi	1ef38 <_start@@Base+0x9f90>
   1eee8:	add	r3, pc, #488	; 0x1e8
   1eeec:	ldrd	r2, [r3]
   1eef0:	cmp	r1, r3
   1eef4:	cmpeq	r0, r2
   1eef8:	bne	1f098 <_start@@Base+0xa0f0>
   1eefc:	mov	r1, r5
   1ef00:	mov	r2, #8
   1ef04:	mov	r0, r4
   1ef08:	bl	16de0 <_start@@Base+0x1e38>
   1ef0c:	cmp	r4, r0
   1ef10:	mov	r1, r0
   1ef14:	beq	1f098 <_start@@Base+0xa0f0>
   1ef18:	str	r9, [sp, #52]	; 0x34
   1ef1c:	str	r7, [sp, #48]	; 0x30
   1ef20:	mov	r3, r6
   1ef24:	mov	r2, r5
   1ef28:	mov	r0, r8
   1ef2c:	add	sp, sp, #12
   1ef30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef34:	b	16698 <_start@@Base+0x16f0>
   1ef38:	add	r3, pc, #416	; 0x1a0
   1ef3c:	ldrd	r2, [r3]
   1ef40:	cmp	r1, r3
   1ef44:	cmpeq	r0, r2
   1ef48:	bhi	1ef9c <_start@@Base+0x9ff4>
   1ef4c:	add	r3, pc, #404	; 0x194
   1ef50:	ldrd	r2, [r3]
   1ef54:	cmp	r1, r3
   1ef58:	cmpeq	r0, r2
   1ef5c:	bne	1f098 <_start@@Base+0xa0f0>
   1ef60:	mov	r1, r5
   1ef64:	mov	r2, #8
   1ef68:	mov	r0, r4
   1ef6c:	bl	16de0 <_start@@Base+0x1e38>
   1ef70:	cmp	r4, r0
   1ef74:	mov	r1, r0
   1ef78:	beq	1f098 <_start@@Base+0xa0f0>
   1ef7c:	str	r9, [sp, #52]	; 0x34
   1ef80:	str	r7, [sp, #48]	; 0x30
   1ef84:	mov	r3, r6
   1ef88:	mov	r2, r5
   1ef8c:	mov	r0, r8
   1ef90:	add	sp, sp, #12
   1ef94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ef98:	b	16804 <_start@@Base+0x185c>
   1ef9c:	add	r3, pc, #332	; 0x14c
   1efa0:	ldrd	r2, [r3]
   1efa4:	cmp	r1, r3
   1efa8:	cmpeq	r0, r2
   1efac:	bne	1efec <_start@@Base+0xa044>
   1efb0:	mov	r1, r5
   1efb4:	mov	r2, #8
   1efb8:	mov	r0, r4
   1efbc:	bl	16de0 <_start@@Base+0x1e38>
   1efc0:	cmp	r4, r0
   1efc4:	mov	r1, r0
   1efc8:	beq	1f098 <_start@@Base+0xa0f0>
   1efcc:	str	r9, [sp, #52]	; 0x34
   1efd0:	str	r7, [sp, #48]	; 0x30
   1efd4:	mov	r3, r6
   1efd8:	mov	r2, r5
   1efdc:	mov	r0, r8
   1efe0:	add	sp, sp, #12
   1efe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efe8:	b	169bc <_start@@Base+0x1a14>
   1efec:	add	r3, pc, #260	; 0x104
   1eff0:	ldrd	r2, [r3]
   1eff4:	cmp	r1, r3
   1eff8:	cmpeq	r0, r2
   1effc:	bne	1f098 <_start@@Base+0xa0f0>
   1f000:	add	sl, r4, #8
   1f004:	mov	r1, r5
   1f008:	mov	r0, sl
   1f00c:	bl	150d0 <_start@@Base+0x128>
   1f010:	add	r3, pc, #232	; 0xe8
   1f014:	ldrd	r2, [r3]
   1f018:	mov	r0, #0
   1f01c:	cmp	r1, r3
   1f020:	cmpeq	r0, r2
   1f024:	bne	1f098 <_start@@Base+0xa0f0>
   1f028:	mov	r2, #4
   1f02c:	mov	r1, r5
   1f030:	mov	r0, sl
   1f034:	bl	16de0 <_start@@Base+0x1e38>
   1f038:	cmp	sl, r0
   1f03c:	mov	fp, r0
   1f040:	beq	1f098 <_start@@Base+0xa0f0>
   1f044:	mov	r1, r5
   1f048:	bl	150d0 <_start@@Base+0x128>
   1f04c:	mov	r0, #0
   1f050:	and	r1, r1, #-16777216	; 0xff000000
   1f054:	cmp	r1, #2013265920	; 0x78000000
   1f058:	cmpeq	r0, #0
   1f05c:	movne	r4, fp
   1f060:	bne	1f098 <_start@@Base+0xa0f0>
   1f064:	str	r9, [sp]
   1f068:	mov	r3, #1
   1f06c:	mov	r2, r5
   1f070:	mov	r1, fp
   1f074:	mov	r0, r8
   1f078:	bl	2549c <flatcc_json_parser_match_constant@@Base>
   1f07c:	cmp	fp, r0
   1f080:	mov	r4, r0
   1f084:	movne	r3, #0
   1f088:	movne	r2, #0
   1f08c:	strdne	r2, [r7]
   1f090:	movne	r3, #0
   1f094:	strne	r3, [r6]
   1f098:	mov	r0, r4
   1f09c:	add	sp, sp, #12
   1f0a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0a4:	nop			; (mov r0, r0)
   1f0a8:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f0ac:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1f0b0:	ldrshvc	pc, [pc, #255]	; 1f1b7 <test_json@@Base+0xaf>	; <UNPREDICTABLE>
   1f0b4:	cmnmi	pc, #28416	; 0x6f00
   1f0b8:	andeq	r0, r0, r0
   1f0bc:	cmnmi	lr, r0, lsl #18
   1f0c0:	andeq	r0, r0, r0
   1f0c4:	strbtmi	r6, [pc], -r0, lsl #30
   1f0c8:	andvc	r0, r0, #0
   1f0cc:	cmnmi	pc, #28416	; 0x6f00
   1f0d0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f0d4:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1f0d8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f0dc:	stmdavs	r5!, {r0, r1, r2, r3, r4, r6, fp, ip, sp, lr}^
   1f0e0:	strbvs	r7, [lr, #-1388]!	; 0xfffffa94
   1f0e4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1f0e8:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f0ec:	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, sl, ip, sp, lr}^
   1f0f0:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93
   1f0f4:	mcrvs	7, 3, r6, cr5, cr15, {2}
   1f0f8:	cfldrdvs	mvd7, [r0, #-484]!	; 0xfffffe1c
   1f0fc:	cdpvs	4, 6, cr7, cr15, cr5, {3}
   1f100:	andeq	r0, r0, r0
   1f104:	strbvs	r7, [lr, #-1389]!	; 0xfffffa93

0001f108 <test_json@@Base>:
   1f108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f10c:	sub	sp, sp, #372	; 0x174
   1f110:	mov	r4, r0
   1f114:	ldr	r5, [sp, #412]	; 0x19c
   1f118:	add	r0, sp, #136	; 0x88
   1f11c:	mov	r7, r1
   1f120:	mov	r8, r2
   1f124:	mov	r6, r3
   1f128:	bl	20614 <flatcc_builder_init@@Base>
   1f12c:	mov	r1, #0
   1f130:	add	r0, sp, #88	; 0x58
   1f134:	bl	2d824 <flatcc_json_printer_init_dynamic_buffer@@Base>
   1f138:	and	r3, r5, #1
   1f13c:	strb	r3, [sp, #114]	; 0x72
   1f140:	lsr	r3, r5, #1
   1f144:	and	r3, r3, #1
   1f148:	strb	r3, [sp, #115]	; 0x73
   1f14c:	lsr	r3, r5, #2
   1f150:	and	r3, r3, #1
   1f154:	strb	r3, [sp, #116]	; 0x74
   1f158:	lsr	r3, r5, #3
   1f15c:	and	r3, r3, #1
   1f160:	tst	r5, #16
   1f164:	strb	r3, [sp, #117]	; 0x75
   1f168:	movne	r3, #2
   1f16c:	strbne	r3, [sp, #113]	; 0x71
   1f170:	tst	r5, #32
   1f174:	movne	r3, #2
   1f178:	strbne	r3, [sp, #113]	; 0x71
   1f17c:	movne	r3, #1
   1f180:	strbne	r3, [sp, #114]	; 0x72
   1f184:	mov	r0, r7
   1f188:	movne	r3, #0
   1f18c:	strbne	r3, [sp, #115]	; 0x73
   1f190:	bl	145c4 <strlen@plt>
   1f194:	ldr	r3, [r4, #4]
   1f198:	mov	r2, r7
   1f19c:	str	r3, [sp, #8]
   1f1a0:	ldr	r3, [r4]
   1f1a4:	add	r1, sp, #48	; 0x30
   1f1a8:	str	r3, [sp, #4]
   1f1ac:	ldr	r3, [sp, #408]	; 0x198
   1f1b0:	str	r3, [sp]
   1f1b4:	mov	r3, r0
   1f1b8:	add	r0, sp, #136	; 0x88
   1f1bc:	bl	26a8c <flatcc_json_parser_table_as_root@@Base>
   1f1c0:	cmp	r0, r6
   1f1c4:	beq	1f2b8 <test_json@@Base+0x1b0>
   1f1c8:	ldr	r4, [pc, #704]	; 1f490 <test_json@@Base+0x388>
   1f1cc:	cmp	r6, #0
   1f1d0:	ldr	r5, [r4]
   1f1d4:	beq	1f294 <test_json@@Base+0x18c>
   1f1d8:	cmp	r0, #0
   1f1dc:	beq	1f274 <test_json@@Base+0x16c>
   1f1e0:	bl	24b20 <flatcc_json_parser_error_string@@Base>
   1f1e4:	ldr	r2, [sp, #416]	; 0x1a0
   1f1e8:	ldr	r1, [pc, #676]	; 1f494 <test_json@@Base+0x38c>
   1f1ec:	mov	r3, r0
   1f1f0:	mov	r0, r5
   1f1f4:	bl	145d0 <fprintf@plt>
   1f1f8:	mov	r0, r6
   1f1fc:	ldr	r5, [r4]
   1f200:	bl	24b20 <flatcc_json_parser_error_string@@Base>
   1f204:	ldr	r1, [pc, #652]	; 1f498 <test_json@@Base+0x390>
   1f208:	mov	r2, r0
   1f20c:	mov	r0, r5
   1f210:	bl	145d0 <fprintf@plt>
   1f214:	mov	r2, r7
   1f218:	ldr	r1, [pc, #636]	; 1f49c <test_json@@Base+0x394>
   1f21c:	ldr	r0, [r4]
   1f220:	bl	145d0 <fprintf@plt>
   1f224:	mov	r5, #0
   1f228:	mov	r6, #32
   1f22c:	ldr	r3, [sp, #64]	; 0x40
   1f230:	ldr	r1, [r4]
   1f234:	sub	r3, r3, #1
   1f238:	cmp	r5, r3
   1f23c:	blt	1f2a8 <test_json@@Base+0x1a0>
   1f240:	ldr	r0, [pc, #600]	; 1f4a0 <test_json@@Base+0x398>
   1f244:	bl	14630 <fputs@plt>
   1f248:	mov	r6, #0
   1f24c:	mvn	r4, #0
   1f250:	mov	r0, r6
   1f254:	bl	22c28 <flatcc_builder_aligned_free@@Base>
   1f258:	add	r0, sp, #136	; 0x88
   1f25c:	bl	207a0 <flatcc_builder_clear@@Base>
   1f260:	add	r0, sp, #88	; 0x58
   1f264:	bl	2d90c <flatcc_json_printer_clear@@Base>
   1f268:	mov	r0, r4
   1f26c:	add	sp, sp, #372	; 0x174
   1f270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f274:	mov	r0, r6
   1f278:	bl	24b20 <flatcc_json_parser_error_string@@Base>
   1f27c:	ldr	r2, [sp, #416]	; 0x1a0
   1f280:	ldr	r1, [pc, #540]	; 1f4a4 <test_json@@Base+0x39c>
   1f284:	mov	r3, r0
   1f288:	mov	r0, r5
   1f28c:	bl	145d0 <fprintf@plt>
   1f290:	b	1f214 <test_json@@Base+0x10c>
   1f294:	bl	24b20 <flatcc_json_parser_error_string@@Base>
   1f298:	ldr	r2, [sp, #416]	; 0x1a0
   1f29c:	ldr	r1, [pc, #516]	; 1f4a8 <test_json@@Base+0x3a0>
   1f2a0:	mov	r3, r0
   1f2a4:	b	1f288 <test_json@@Base+0x180>
   1f2a8:	mov	r0, r6
   1f2ac:	bl	14618 <fputc@plt>
   1f2b0:	add	r5, r5, #1
   1f2b4:	b	1f22c <test_json@@Base+0x124>
   1f2b8:	cmp	r6, #0
   1f2bc:	movne	r6, #0
   1f2c0:	movne	r4, r6
   1f2c4:	bne	1f250 <test_json@@Base+0x148>
   1f2c8:	add	r1, sp, #20
   1f2cc:	add	r0, sp, #136	; 0x88
   1f2d0:	bl	22b9c <flatcc_builder_finalize_aligned_buffer@@Base>
   1f2d4:	ldr	r3, [r4, #12]
   1f2d8:	ldr	r2, [r4]
   1f2dc:	ldr	r1, [sp, #20]
   1f2e0:	mov	r6, r0
   1f2e4:	bl	23944 <flatcc_verify_table_as_root@@Base>
   1f2e8:	cmp	r0, #0
   1f2ec:	beq	1f370 <test_json@@Base+0x268>
   1f2f0:	ldr	r3, [pc, #408]	; 1f490 <test_json@@Base+0x388>
   1f2f4:	ldr	r4, [r3]
   1f2f8:	bl	233d4 <flatcc_verify_error_string@@Base>
   1f2fc:	ldr	r3, [sp, #416]	; 0x1a0
   1f300:	ldr	r2, [pc, #420]	; 1f4ac <test_json@@Base+0x3a4>
   1f304:	ldr	r1, [pc, #420]	; 1f4b0 <test_json@@Base+0x3a8>
   1f308:	str	r0, [sp]
   1f30c:	mov	r0, r4
   1f310:	bl	145d0 <fprintf@plt>
   1f314:	cmp	r6, #0
   1f318:	beq	1f24c <test_json@@Base+0x144>
   1f31c:	ldr	r3, [pc, #364]	; 1f490 <test_json@@Base+0x388>
   1f320:	ldr	r2, [pc, #396]	; 1f4b4 <test_json@@Base+0x3ac>
   1f324:	ldr	r1, [pc, #396]	; 1f4b8 <test_json@@Base+0x3b0>
   1f328:	ldr	r5, [r3]
   1f32c:	ldr	r8, [sp, #20]
   1f330:	mov	r0, r5
   1f334:	bl	145d0 <fprintf@plt>
   1f338:	ldr	r9, [pc, #380]	; 1f4bc <test_json@@Base+0x3b4>
   1f33c:	ldr	sl, [pc, #380]	; 1f4c0 <test_json@@Base+0x3b8>
   1f340:	sub	r7, r6, #1
   1f344:	mov	r4, #0
   1f348:	cmp	r8, r4
   1f34c:	bne	1f3f8 <test_json@@Base+0x2f0>
   1f350:	ldr	r7, [pc, #364]	; 1f4c4 <test_json@@Base+0x3bc>
   1f354:	tst	r4, #15
   1f358:	bne	1f47c <test_json@@Base+0x374>
   1f35c:	add	r2, sp, #28
   1f360:	ldr	r1, [pc, #344]	; 1f4c0 <test_json@@Base+0x3b8>
   1f364:	mov	r0, r5
   1f368:	bl	145d0 <fprintf@plt>
   1f36c:	b	1f24c <test_json@@Base+0x144>
   1f370:	ldr	r3, [r4, #8]
   1f374:	ldr	r2, [sp, #20]
   1f378:	str	r3, [sp]
   1f37c:	mov	r1, r6
   1f380:	ldr	r3, [r4]
   1f384:	add	r0, sp, #88	; 0x58
   1f388:	bl	2d4ec <flatcc_json_printer_table_as_root@@Base>
   1f38c:	add	r1, sp, #24
   1f390:	add	r0, sp, #88	; 0x58
   1f394:	bl	2d8b4 <flatcc_json_printer_get_buffer@@Base>
   1f398:	subs	r5, r0, #0
   1f39c:	beq	1f3b4 <test_json@@Base+0x2ac>
   1f3a0:	mov	r1, r5
   1f3a4:	mov	r0, r8
   1f3a8:	bl	1454c <strcmp@plt>
   1f3ac:	subs	r4, r0, #0
   1f3b0:	beq	1f250 <test_json@@Base+0x148>
   1f3b4:	ldr	r4, [pc, #212]	; 1f490 <test_json@@Base+0x388>
   1f3b8:	ldr	r2, [sp, #416]	; 0x1a0
   1f3bc:	ldr	r1, [pc, #260]	; 1f4c8 <test_json@@Base+0x3c0>
   1f3c0:	ldr	r0, [r4]
   1f3c4:	bl	145d0 <fprintf@plt>
   1f3c8:	mov	r2, r5
   1f3cc:	ldr	r1, [pc, #200]	; 1f49c <test_json@@Base+0x394>
   1f3d0:	ldr	r0, [r4]
   1f3d4:	bl	145d0 <fprintf@plt>
   1f3d8:	ldr	r1, [r4]
   1f3dc:	ldr	r0, [pc, #232]	; 1f4cc <test_json@@Base+0x3c4>
   1f3e0:	bl	14630 <fputs@plt>
   1f3e4:	mov	r2, r8
   1f3e8:	ldr	r1, [pc, #172]	; 1f49c <test_json@@Base+0x394>
   1f3ec:	ldr	r0, [r4]
   1f3f0:	bl	145d0 <fprintf@plt>
   1f3f4:	b	1f314 <test_json@@Base+0x20c>
   1f3f8:	ands	fp, r4, #15
   1f3fc:	bne	1f464 <test_json@@Base+0x35c>
   1f400:	cmp	r4, #0
   1f404:	beq	1f418 <test_json@@Base+0x310>
   1f408:	add	r2, sp, #28
   1f40c:	mov	r1, sl
   1f410:	mov	r0, r5
   1f414:	bl	145d0 <fprintf@plt>
   1f418:	mov	r2, r4
   1f41c:	mov	r1, r9
   1f420:	mov	r0, r5
   1f424:	bl	145d0 <fprintf@plt>
   1f428:	ldrb	r2, [r7, #1]
   1f42c:	ldr	r1, [pc, #156]	; 1f4d0 <test_json@@Base+0x3c8>
   1f430:	mov	r0, r5
   1f434:	bl	145d0 <fprintf@plt>
   1f438:	ldrb	r2, [r7, #1]!
   1f43c:	add	r4, r4, #1
   1f440:	sub	r3, r2, #32
   1f444:	cmp	r3, #94	; 0x5e
   1f448:	add	r3, sp, #368	; 0x170
   1f44c:	add	r3, r3, fp
   1f450:	movhi	r2, #46	; 0x2e
   1f454:	strb	r2, [r3, #-340]	; 0xfffffeac
   1f458:	mov	r2, #0
   1f45c:	strb	r2, [r3, #-339]	; 0xfffffead
   1f460:	b	1f348 <test_json@@Base+0x240>
   1f464:	tst	r4, #7
   1f468:	bne	1f428 <test_json@@Base+0x320>
   1f46c:	mov	r1, r5
   1f470:	mov	r0, #32
   1f474:	bl	14618 <fputc@plt>
   1f478:	b	1f428 <test_json@@Base+0x320>
   1f47c:	mov	r1, r5
   1f480:	mov	r0, r7
   1f484:	bl	14630 <fputs@plt>
   1f488:	add	r4, r4, #1
   1f48c:	b	1f354 <test_json@@Base+0x24c>
   1f490:			; <UNDEFINED> instruction: 0x000443b8
   1f494:	andeq	lr, r2, r1, ror r9
   1f498:			; <UNDEFINED> instruction: 0x0002e9b8
   1f49c:	andeq	lr, r2, r2, asr #21
   1f4a0:	strdeq	lr, [r2], -r8
   1f4a4:	muleq	r2, r7, r9
   1f4a8:	ldrdeq	lr, [r2], -r7
   1f4ac:	strdeq	lr, [r2], -fp
   1f4b0:	andeq	lr, r2, r6, asr #20
   1f4b4:	andeq	lr, r2, sp, lsr #21
   1f4b8:			; <UNDEFINED> instruction: 0x0002eabb
   1f4bc:	andeq	lr, r2, r6, asr #21
   1f4c0:	andeq	lr, r2, r0, asr #21
   1f4c4:	ldrdeq	lr, [r2], -r4
   1f4c8:	andeq	lr, r2, sp, ror #20
   1f4cc:	andeq	lr, r2, r2, lsr #21
   1f4d0:	andeq	lr, r2, lr, asr #21

0001f4d4 <edge_case_tests@@Base>:
   1f4d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1f4d8:	sub	sp, sp, #20
   1f4dc:	ldr	r6, [pc, #388]	; 1f668 <edge_case_tests@@Base+0x194>
   1f4e0:	mov	r4, #0
   1f4e4:	mov	r3, #158	; 0x9e
   1f4e8:	str	r3, [sp, #8]
   1f4ec:	str	r4, [sp, #4]
   1f4f0:	mov	r3, r4
   1f4f4:	str	r4, [sp]
   1f4f8:	ldr	r2, [pc, #364]	; 1f66c <edge_case_tests@@Base+0x198>
   1f4fc:	ldr	r1, [pc, #364]	; 1f670 <edge_case_tests@@Base+0x19c>
   1f500:	mov	r0, r6
   1f504:	bl	1f108 <test_json@@Base>
   1f508:	ldr	r8, [pc, #356]	; 1f674 <edge_case_tests@@Base+0x1a0>
   1f50c:	ldr	r9, [pc, #356]	; 1f678 <edge_case_tests@@Base+0x1a4>
   1f510:	mov	r7, #2
   1f514:	mov	r3, #168	; 0xa8
   1f518:	str	r3, [sp, #8]
   1f51c:	str	r7, [sp]
   1f520:	mov	r3, r4
   1f524:	mov	r2, r8
   1f528:	mov	r1, r9
   1f52c:	str	r4, [sp, #4]
   1f530:	mov	r5, r0
   1f534:	mov	r0, r6
   1f538:	bl	1f108 <test_json@@Base>
   1f53c:	mov	r3, #172	; 0xac
   1f540:	str	r3, [sp, #8]
   1f544:	stm	sp, {r4, r7}
   1f548:	mov	r3, r4
   1f54c:	ldr	r2, [pc, #296]	; 1f67c <edge_case_tests@@Base+0x1a8>
   1f550:	ldr	r1, [pc, #296]	; 1f680 <edge_case_tests@@Base+0x1ac>
   1f554:	orr	r5, r5, r0
   1f558:	mov	r0, r6
   1f55c:	bl	1f108 <test_json@@Base>
   1f560:	mov	r2, #4
   1f564:	mov	r3, #176	; 0xb0
   1f568:	str	r7, [sp]
   1f56c:	stmib	sp, {r2, r3}
   1f570:	mov	r1, r9
   1f574:	mov	r3, r4
   1f578:	ldr	r2, [pc, #260]	; 1f684 <edge_case_tests@@Base+0x1b0>
   1f57c:	ldr	r9, [pc, #260]	; 1f688 <edge_case_tests@@Base+0x1b4>
   1f580:	orr	r5, r5, r0
   1f584:	mov	r0, r6
   1f588:	bl	1f108 <test_json@@Base>
   1f58c:	mov	r1, #8
   1f590:	mov	r3, #180	; 0xb4
   1f594:	str	r4, [sp]
   1f598:	stmib	sp, {r1, r3}
   1f59c:	ldr	r2, [pc, #232]	; 1f68c <edge_case_tests@@Base+0x1b8>
   1f5a0:	mov	r3, r4
   1f5a4:	ldr	r1, [pc, #228]	; 1f690 <edge_case_tests@@Base+0x1bc>
   1f5a8:	orr	r5, r5, r0
   1f5ac:	mov	r0, r6
   1f5b0:	bl	1f108 <test_json@@Base>
   1f5b4:	mov	r3, #195	; 0xc3
   1f5b8:	str	r3, [sp, #8]
   1f5bc:	str	r7, [sp]
   1f5c0:	mov	r3, r4
   1f5c4:	mov	r2, r8
   1f5c8:	str	r4, [sp, #4]
   1f5cc:	ldr	r1, [pc, #192]	; 1f694 <edge_case_tests@@Base+0x1c0>
   1f5d0:	ldr	r8, [pc, #192]	; 1f698 <edge_case_tests@@Base+0x1c4>
   1f5d4:	mov	r7, #1
   1f5d8:	orr	r5, r5, r0
   1f5dc:	mov	r0, r6
   1f5e0:	bl	1f108 <test_json@@Base>
   1f5e4:	mov	r3, #199	; 0xc7
   1f5e8:	str	r3, [sp, #8]
   1f5ec:	mov	r2, r8
   1f5f0:	mov	r3, r4
   1f5f4:	mov	r1, r9
   1f5f8:	str	r4, [sp, #4]
   1f5fc:	str	r7, [sp]
   1f600:	orr	r5, r5, r0
   1f604:	mov	r0, r6
   1f608:	bl	1f108 <test_json@@Base>
   1f60c:	mov	r3, #203	; 0xcb
   1f610:	str	r3, [sp, #8]
   1f614:	mov	r1, r9
   1f618:	mov	r3, r4
   1f61c:	str	r7, [sp, #4]
   1f620:	str	r7, [sp]
   1f624:	ldr	r2, [pc, #112]	; 1f69c <edge_case_tests@@Base+0x1c8>
   1f628:	orr	r5, r5, r0
   1f62c:	mov	r0, r6
   1f630:	bl	1f108 <test_json@@Base>
   1f634:	mov	r3, #209	; 0xd1
   1f638:	str	r3, [sp, #8]
   1f63c:	str	r4, [sp, #4]
   1f640:	str	r7, [sp]
   1f644:	mov	r3, r4
   1f648:	mov	r2, r8
   1f64c:	ldr	r1, [pc, #76]	; 1f6a0 <edge_case_tests@@Base+0x1cc>
   1f650:	orr	r5, r5, r0
   1f654:	mov	r0, r6
   1f658:	bl	1f108 <test_json@@Base>
   1f65c:	orr	r0, r5, r0
   1f660:	add	sp, sp, #20
   1f664:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1f668:			; <UNDEFINED> instruction: 0x0002e5b4
   1f66c:	ldrdeq	lr, [r2], -r8
   1f670:	strdeq	lr, [r2], -r6
   1f674:	andeq	lr, r2, fp, lsr #22
   1f678:	andeq	lr, r2, sp, asr #22
   1f67c:	andeq	lr, r2, lr, ror #22
   1f680:	andeq	lr, r2, fp, lsl #23
   1f684:			; <UNDEFINED> instruction: 0x0002ebb2
   1f688:	andeq	lr, r2, sl, lsr sp
   1f68c:	andeq	lr, r2, r5, asr #23
   1f690:	ldrdeq	lr, [r2], -r7
   1f694:	strdeq	lr, [r2], -r9
   1f698:	andeq	lr, r2, pc, lsl sp
   1f69c:	andeq	lr, r2, ip, ror #26
   1f6a0:	andeq	lr, r2, r3, lsl #27

0001f6a4 <error_case_tests@@Base>:
   1f6a4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1f6a8:	mov	r4, #0
   1f6ac:	ldr	r6, [pc, #484]	; 1f898 <error_case_tests@@Base+0x1f4>
   1f6b0:	ldr	r3, [pc, #484]	; 1f89c <error_case_tests@@Base+0x1f8>
   1f6b4:	mov	r2, r4
   1f6b8:	str	r3, [sp, #8]
   1f6bc:	str	r4, [sp, #4]
   1f6c0:	str	r4, [sp]
   1f6c4:	mov	r3, #13
   1f6c8:	ldr	r1, [pc, #464]	; 1f8a0 <error_case_tests@@Base+0x1fc>
   1f6cc:	mov	r0, r6
   1f6d0:	bl	1f108 <test_json@@Base>
   1f6d4:	ldr	r3, [pc, #456]	; 1f8a4 <error_case_tests@@Base+0x200>
   1f6d8:	mov	r2, r4
   1f6dc:	str	r3, [sp, #8]
   1f6e0:	str	r4, [sp, #4]
   1f6e4:	str	r4, [sp]
   1f6e8:	mov	r3, #13
   1f6ec:	ldr	r1, [pc, #436]	; 1f8a8 <error_case_tests@@Base+0x204>
   1f6f0:	mov	r5, r0
   1f6f4:	mov	r0, r6
   1f6f8:	bl	1f108 <test_json@@Base>
   1f6fc:	ldr	r3, [pc, #424]	; 1f8ac <error_case_tests@@Base+0x208>
   1f700:	mov	r2, r4
   1f704:	str	r3, [sp, #8]
   1f708:	str	r4, [sp, #4]
   1f70c:	str	r4, [sp]
   1f710:	mov	r3, #13
   1f714:	ldr	r1, [pc, #404]	; 1f8b0 <error_case_tests@@Base+0x20c>
   1f718:	orr	r5, r5, r0
   1f71c:	mov	r0, r6
   1f720:	bl	1f108 <test_json@@Base>
   1f724:	ldr	r3, [pc, #392]	; 1f8b4 <error_case_tests@@Base+0x210>
   1f728:	mov	r2, r4
   1f72c:	str	r3, [sp, #8]
   1f730:	str	r4, [sp, #4]
   1f734:	str	r4, [sp]
   1f738:	mov	r3, #13
   1f73c:	ldr	r1, [pc, #372]	; 1f8b8 <error_case_tests@@Base+0x214>
   1f740:	orr	r5, r5, r0
   1f744:	mov	r0, r6
   1f748:	bl	1f108 <test_json@@Base>
   1f74c:	ldr	r3, [pc, #360]	; 1f8bc <error_case_tests@@Base+0x218>
   1f750:	mov	r2, r4
   1f754:	str	r3, [sp, #8]
   1f758:	str	r4, [sp, #4]
   1f75c:	str	r4, [sp]
   1f760:	mov	r3, #13
   1f764:	ldr	r1, [pc, #340]	; 1f8c0 <error_case_tests@@Base+0x21c>
   1f768:	orr	r5, r5, r0
   1f76c:	mov	r0, r6
   1f770:	bl	1f108 <test_json@@Base>
   1f774:	mov	r3, #296	; 0x128
   1f778:	str	r3, [sp, #8]
   1f77c:	mov	r2, r4
   1f780:	str	r4, [sp, #4]
   1f784:	str	r4, [sp]
   1f788:	mov	r3, #13
   1f78c:	ldr	r1, [pc, #304]	; 1f8c4 <error_case_tests@@Base+0x220>
   1f790:	orr	r5, r5, r0
   1f794:	mov	r0, r6
   1f798:	bl	1f108 <test_json@@Base>
   1f79c:	ldr	r3, [pc, #292]	; 1f8c8 <error_case_tests@@Base+0x224>
   1f7a0:	mov	r2, r4
   1f7a4:	str	r3, [sp, #8]
   1f7a8:	str	r4, [sp, #4]
   1f7ac:	str	r4, [sp]
   1f7b0:	mov	r3, #13
   1f7b4:	ldr	r1, [pc, #272]	; 1f8cc <error_case_tests@@Base+0x228>
   1f7b8:	orr	r5, r5, r0
   1f7bc:	mov	r0, r6
   1f7c0:	bl	1f108 <test_json@@Base>
   1f7c4:	ldr	r3, [pc, #260]	; 1f8d0 <error_case_tests@@Base+0x22c>
   1f7c8:	mov	r2, r4
   1f7cc:	str	r3, [sp, #8]
   1f7d0:	str	r4, [sp, #4]
   1f7d4:	str	r4, [sp]
   1f7d8:	mov	r3, #13
   1f7dc:	ldr	r1, [pc, #240]	; 1f8d4 <error_case_tests@@Base+0x230>
   1f7e0:	orr	r5, r5, r0
   1f7e4:	mov	r0, r6
   1f7e8:	bl	1f108 <test_json@@Base>
   1f7ec:	ldr	r3, [pc, #228]	; 1f8d8 <error_case_tests@@Base+0x234>
   1f7f0:	mov	r2, r4
   1f7f4:	str	r3, [sp, #8]
   1f7f8:	str	r4, [sp, #4]
   1f7fc:	str	r4, [sp]
   1f800:	mov	r3, #13
   1f804:	ldr	r1, [pc, #208]	; 1f8dc <error_case_tests@@Base+0x238>
   1f808:	orr	r5, r5, r0
   1f80c:	mov	r0, r6
   1f810:	bl	1f108 <test_json@@Base>
   1f814:	ldr	r3, [pc, #196]	; 1f8e0 <error_case_tests@@Base+0x23c>
   1f818:	mov	r2, r4
   1f81c:	str	r3, [sp, #8]
   1f820:	str	r4, [sp, #4]
   1f824:	str	r4, [sp]
   1f828:	mov	r3, #5
   1f82c:	ldr	r1, [pc, #176]	; 1f8e4 <error_case_tests@@Base+0x240>
   1f830:	orr	r5, r5, r0
   1f834:	mov	r0, r6
   1f838:	bl	1f108 <test_json@@Base>
   1f83c:	ldr	r3, [pc, #164]	; 1f8e8 <error_case_tests@@Base+0x244>
   1f840:	mov	r2, r4
   1f844:	str	r3, [sp, #8]
   1f848:	str	r4, [sp, #4]
   1f84c:	str	r4, [sp]
   1f850:	mov	r3, #5
   1f854:	ldr	r1, [pc, #144]	; 1f8ec <error_case_tests@@Base+0x248>
   1f858:	orr	r5, r5, r0
   1f85c:	mov	r0, r6
   1f860:	bl	1f108 <test_json@@Base>
   1f864:	ldr	r3, [pc, #132]	; 1f8f0 <error_case_tests@@Base+0x24c>
   1f868:	str	r4, [sp, #4]
   1f86c:	str	r3, [sp, #8]
   1f870:	str	r4, [sp]
   1f874:	mov	r3, #5
   1f878:	mov	r2, r4
   1f87c:	ldr	r1, [pc, #112]	; 1f8f4 <error_case_tests@@Base+0x250>
   1f880:	orr	r5, r5, r0
   1f884:	mov	r0, r6
   1f888:	bl	1f108 <test_json@@Base>
   1f88c:	orr	r0, r5, r0
   1f890:	add	sp, sp, #16
   1f894:	pop	{r4, r5, r6, pc}
   1f898:			; <UNDEFINED> instruction: 0x0002e5b4
   1f89c:	andeq	r0, r0, sp, lsl r1
   1f8a0:	strdeq	lr, [r2], -r4
   1f8a4:	andeq	r0, r0, pc, lsl r1
   1f8a8:	andeq	lr, r2, lr, lsl #28
   1f8ac:	andeq	r0, r0, r1, lsr #2
   1f8b0:	andeq	lr, r2, pc, ror #28
   1f8b4:	andeq	r0, r0, r3, lsr #2
   1f8b8:	andeq	lr, r2, sp, asr #29
   1f8bc:	andeq	r0, r0, r5, lsr #2
   1f8c0:	andeq	lr, r2, r5, lsr #30
   1f8c4:	andeq	lr, r2, sl, ror pc
   1f8c8:	andeq	r0, r0, fp, lsr #2
   1f8cc:	andeq	pc, r2, r8, lsl r0	; <UNPREDICTABLE>
   1f8d0:	andeq	r0, r0, pc, lsr #2
   1f8d4:	strheq	pc, [r2], -r3	; <UNPREDICTABLE>
   1f8d8:	andeq	r0, r0, r3, lsr r1
   1f8dc:	andeq	pc, r2, sl, ror r1	; <UNPREDICTABLE>
   1f8e0:	andeq	r0, r0, r7, lsr r1
   1f8e4:	andeq	pc, r2, r1, asr #4
   1f8e8:	andeq	r0, r0, sl, lsr r1
   1f8ec:	andeq	pc, r2, r9, asr r2	; <UNPREDICTABLE>
   1f8f0:	andeq	r0, r0, sp, lsr r1
   1f8f4:	andeq	pc, r2, pc, ror r2	; <UNPREDICTABLE>

0001f8f8 <base64_tests@@Base>:
   1f8f8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1f8fc:	mov	r4, #0
   1f900:	ldr	r6, [pc, #332]	; 1fa54 <base64_tests@@Base+0x15c>
   1f904:	ldr	r3, [pc, #332]	; 1fa58 <base64_tests@@Base+0x160>
   1f908:	str	r4, [sp, #4]
   1f90c:	str	r3, [sp, #8]
   1f910:	str	r4, [sp]
   1f914:	mov	r3, r4
   1f918:	ldr	r2, [pc, #316]	; 1fa5c <base64_tests@@Base+0x164>
   1f91c:	ldr	r1, [pc, #316]	; 1fa60 <base64_tests@@Base+0x168>
   1f920:	mov	r0, r6
   1f924:	bl	1f108 <test_json@@Base>
   1f928:	mov	r3, #372	; 0x174
   1f92c:	str	r3, [sp, #8]
   1f930:	str	r4, [sp, #4]
   1f934:	mov	r3, r4
   1f938:	str	r4, [sp]
   1f93c:	ldr	r2, [pc, #288]	; 1fa64 <base64_tests@@Base+0x16c>
   1f940:	ldr	r1, [pc, #288]	; 1fa68 <base64_tests@@Base+0x170>
   1f944:	ldr	r8, [pc, #288]	; 1fa6c <base64_tests@@Base+0x174>
   1f948:	ldr	r7, [pc, #288]	; 1fa70 <base64_tests@@Base+0x178>
   1f94c:	mov	r5, r0
   1f950:	mov	r0, r6
   1f954:	bl	1f108 <test_json@@Base>
   1f958:	mov	r3, #376	; 0x178
   1f95c:	str	r3, [sp, #8]
   1f960:	mov	r2, r8
   1f964:	mov	r3, r4
   1f968:	str	r4, [sp, #4]
   1f96c:	str	r4, [sp]
   1f970:	ldr	r1, [pc, #252]	; 1fa74 <base64_tests@@Base+0x17c>
   1f974:	orr	r5, r5, r0
   1f978:	mov	r0, r6
   1f97c:	bl	1f108 <test_json@@Base>
   1f980:	ldr	r3, [pc, #240]	; 1fa78 <base64_tests@@Base+0x180>
   1f984:	mov	r2, r7
   1f988:	str	r3, [sp, #8]
   1f98c:	str	r4, [sp, #4]
   1f990:	mov	r3, r4
   1f994:	str	r4, [sp]
   1f998:	ldr	r1, [pc, #220]	; 1fa7c <base64_tests@@Base+0x184>
   1f99c:	orr	r5, r5, r0
   1f9a0:	mov	r0, r6
   1f9a4:	bl	1f108 <test_json@@Base>
   1f9a8:	ldr	r3, [pc, #208]	; 1fa80 <base64_tests@@Base+0x188>
   1f9ac:	mov	r2, r8
   1f9b0:	str	r3, [sp, #8]
   1f9b4:	str	r4, [sp, #4]
   1f9b8:	mov	r3, r4
   1f9bc:	str	r4, [sp]
   1f9c0:	ldr	r1, [pc, #188]	; 1fa84 <base64_tests@@Base+0x18c>
   1f9c4:	orr	r5, r5, r0
   1f9c8:	mov	r0, r6
   1f9cc:	bl	1f108 <test_json@@Base>
   1f9d0:	ldr	r3, [pc, #176]	; 1fa88 <base64_tests@@Base+0x190>
   1f9d4:	mov	r2, r7
   1f9d8:	str	r3, [sp, #8]
   1f9dc:	str	r4, [sp, #4]
   1f9e0:	mov	r3, r4
   1f9e4:	str	r4, [sp]
   1f9e8:	ldr	r1, [pc, #156]	; 1fa8c <base64_tests@@Base+0x194>
   1f9ec:	orr	r5, r5, r0
   1f9f0:	mov	r0, r6
   1f9f4:	bl	1f108 <test_json@@Base>
   1f9f8:	mov	r3, #388	; 0x184
   1f9fc:	str	r3, [sp, #8]
   1fa00:	mov	r2, r4
   1fa04:	str	r4, [sp, #4]
   1fa08:	str	r4, [sp]
   1fa0c:	mov	r3, #31
   1fa10:	ldr	r1, [pc, #120]	; 1fa90 <base64_tests@@Base+0x198>
   1fa14:	orr	r5, r5, r0
   1fa18:	mov	r0, r6
   1fa1c:	bl	1f108 <test_json@@Base>
   1fa20:	ldr	r3, [pc, #108]	; 1fa94 <base64_tests@@Base+0x19c>
   1fa24:	str	r4, [sp, #4]
   1fa28:	str	r3, [sp, #8]
   1fa2c:	str	r4, [sp]
   1fa30:	mov	r3, #32
   1fa34:	mov	r2, r4
   1fa38:	ldr	r1, [pc, #88]	; 1fa98 <base64_tests@@Base+0x1a0>
   1fa3c:	orr	r5, r5, r0
   1fa40:	mov	r0, r6
   1fa44:	bl	1f108 <test_json@@Base>
   1fa48:	orr	r0, r5, r0
   1fa4c:	add	sp, sp, #16
   1fa50:	pop	{r4, r5, r6, r7, r8, pc}
   1fa54:			; <UNDEFINED> instruction: 0x0002e5b4
   1fa58:	andeq	r0, r0, r1, ror r1
   1fa5c:			; <UNDEFINED> instruction: 0x0002ebb2
   1fa60:			; <UNDEFINED> instruction: 0x0002f2b7
   1fa64:	andeq	pc, r2, sp, asr #5
   1fa68:	strdeq	pc, [r2], -r0
   1fa6c:	andeq	pc, r2, r7, lsl r3	; <UNPREDICTABLE>
   1fa70:	andeq	pc, r2, r4, lsl #9
   1fa74:	andeq	pc, r2, fp, asr #7
   1fa78:	andeq	r0, r0, fp, ror r1
   1fa7c:	andeq	pc, r2, fp, lsr r5	; <UNPREDICTABLE>
   1fa80:	andeq	r0, r0, lr, ror r1
   1fa84:	strdeq	pc, [r2], -r7
   1fa88:	andeq	r0, r0, r1, lsl #3
   1fa8c:	andeq	pc, r2, lr, lsr #13
   1fa90:	andeq	pc, r2, r8, ror #14
   1fa94:	andeq	r0, r0, r7, lsl #3
   1fa98:	andeq	pc, r2, r1, lsr #16

0001fa9c <mixed_type_union_tests@@Base>:
   1fa9c:	push	{r4, r5, r6, r7, lr}
   1faa0:	sub	sp, sp, #20
   1faa4:	ldr	r6, [pc, #292]	; 1fbd0 <mixed_type_union_tests@@Base+0x134>
   1faa8:	mov	r4, #0
   1faac:	mov	r3, #432	; 0x1b0
   1fab0:	str	r3, [sp, #8]
   1fab4:	str	r4, [sp, #4]
   1fab8:	mov	r3, r4
   1fabc:	str	r4, [sp]
   1fac0:	ldr	r2, [pc, #268]	; 1fbd4 <mixed_type_union_tests@@Base+0x138>
   1fac4:	ldr	r1, [pc, #268]	; 1fbd8 <mixed_type_union_tests@@Base+0x13c>
   1fac8:	mov	r0, r6
   1facc:	bl	1f108 <test_json@@Base>
   1fad0:	ldr	r7, [pc, #260]	; 1fbdc <mixed_type_union_tests@@Base+0x140>
   1fad4:	ldr	r3, [pc, #260]	; 1fbe0 <mixed_type_union_tests@@Base+0x144>
   1fad8:	mov	r2, r7
   1fadc:	str	r3, [sp, #8]
   1fae0:	str	r4, [sp, #4]
   1fae4:	mov	r3, r4
   1fae8:	str	r4, [sp]
   1faec:	ldr	r1, [pc, #240]	; 1fbe4 <mixed_type_union_tests@@Base+0x148>
   1faf0:	mov	r5, r0
   1faf4:	mov	r0, r6
   1faf8:	bl	1f108 <test_json@@Base>
   1fafc:	ldr	r3, [pc, #228]	; 1fbe8 <mixed_type_union_tests@@Base+0x14c>
   1fb00:	mov	r2, r7
   1fb04:	str	r3, [sp, #8]
   1fb08:	str	r4, [sp, #4]
   1fb0c:	mov	r3, r4
   1fb10:	str	r4, [sp]
   1fb14:	ldr	r1, [pc, #208]	; 1fbec <mixed_type_union_tests@@Base+0x150>
   1fb18:	orr	r5, r5, r0
   1fb1c:	mov	r0, r6
   1fb20:	bl	1f108 <test_json@@Base>
   1fb24:	ldr	r3, [pc, #196]	; 1fbf0 <mixed_type_union_tests@@Base+0x154>
   1fb28:	str	r4, [sp, #4]
   1fb2c:	str	r3, [sp, #8]
   1fb30:	str	r4, [sp]
   1fb34:	mov	r3, r4
   1fb38:	ldr	r2, [pc, #180]	; 1fbf4 <mixed_type_union_tests@@Base+0x158>
   1fb3c:	ldr	r1, [pc, #180]	; 1fbf8 <mixed_type_union_tests@@Base+0x15c>
   1fb40:	orr	r5, r5, r0
   1fb44:	mov	r0, r6
   1fb48:	bl	1f108 <test_json@@Base>
   1fb4c:	ldr	r3, [pc, #168]	; 1fbfc <mixed_type_union_tests@@Base+0x160>
   1fb50:	str	r4, [sp, #4]
   1fb54:	str	r3, [sp, #8]
   1fb58:	str	r4, [sp]
   1fb5c:	mov	r3, r4
   1fb60:	ldr	r2, [pc, #152]	; 1fc00 <mixed_type_union_tests@@Base+0x164>
   1fb64:	ldr	r1, [pc, #152]	; 1fc04 <mixed_type_union_tests@@Base+0x168>
   1fb68:	orr	r5, r5, r0
   1fb6c:	mov	r0, r6
   1fb70:	bl	1f108 <test_json@@Base>
   1fb74:	ldr	r3, [pc, #140]	; 1fc08 <mixed_type_union_tests@@Base+0x16c>
   1fb78:	str	r4, [sp, #4]
   1fb7c:	str	r3, [sp, #8]
   1fb80:	str	r4, [sp]
   1fb84:	mov	r3, r4
   1fb88:	ldr	r2, [pc, #124]	; 1fc0c <mixed_type_union_tests@@Base+0x170>
   1fb8c:	ldr	r1, [pc, #124]	; 1fc10 <mixed_type_union_tests@@Base+0x174>
   1fb90:	orr	r5, r5, r0
   1fb94:	mov	r0, r6
   1fb98:	bl	1f108 <test_json@@Base>
   1fb9c:	ldr	r3, [pc, #112]	; 1fc14 <mixed_type_union_tests@@Base+0x178>
   1fba0:	str	r4, [sp, #4]
   1fba4:	str	r3, [sp, #8]
   1fba8:	str	r4, [sp]
   1fbac:	mov	r3, r4
   1fbb0:	mov	r2, r7
   1fbb4:	ldr	r1, [pc, #92]	; 1fc18 <mixed_type_union_tests@@Base+0x17c>
   1fbb8:	orr	r5, r5, r0
   1fbbc:	mov	r0, r6
   1fbc0:	bl	1f108 <test_json@@Base>
   1fbc4:	orr	r0, r5, r0
   1fbc8:	add	sp, sp, #20
   1fbcc:	pop	{r4, r5, r6, r7, pc}
   1fbd0:	andeq	lr, r2, r4, asr #11
   1fbd4:	ldrdeq	pc, [r2], -sp
   1fbd8:	andeq	pc, r2, r4, lsr #18
   1fbdc:	andeq	pc, r2, r3, ror r9	; <UNPREDICTABLE>
   1fbe0:			; <UNDEFINED> instruction: 0x000001b5
   1fbe4:	andeq	pc, r2, sl, ror #19
   1fbe8:			; <UNDEFINED> instruction: 0x000001ba
   1fbec:	andeq	pc, r2, sp, ror #20
   1fbf0:	andeq	r0, r0, r1, asr #3
   1fbf4:	andeq	pc, r2, r3, lsl #22
   1fbf8:			; <UNDEFINED> instruction: 0x0002fbbc
   1fbfc:	andeq	r0, r0, sl, asr #3
   1fc00:	muleq	r2, r9, ip
   1fc04:	andeq	pc, r2, r7, ror sp	; <UNPREDICTABLE>
   1fc08:	ldrdeq	r0, [r0], -r5
   1fc0c:	andeq	pc, r2, sp, ror lr	; <UNPREDICTABLE>
   1fc10:	andeq	pc, r2, r3, asr #31
   1fc14:	ldrdeq	r0, [r0], -sl
   1fc18:	andeq	r0, r3, r4, asr #2

0001fc1c <union_vector_tests@@Base>:
   1fc1c:	push	{r4, r5, r6, r7, lr}
   1fc20:	sub	sp, sp, #20
   1fc24:	ldr	r6, [pc, #252]	; 1fd28 <union_vector_tests@@Base+0x10c>
   1fc28:	ldr	r7, [pc, #252]	; 1fd2c <union_vector_tests@@Base+0x110>
   1fc2c:	ldr	r3, [pc, #252]	; 1fd30 <union_vector_tests@@Base+0x114>
   1fc30:	mov	r4, #0
   1fc34:	str	r3, [sp, #8]
   1fc38:	mov	r2, r7
   1fc3c:	mov	r3, r4
   1fc40:	str	r4, [sp, #4]
   1fc44:	str	r4, [sp]
   1fc48:	ldr	r1, [pc, #228]	; 1fd34 <union_vector_tests@@Base+0x118>
   1fc4c:	mov	r0, r6
   1fc50:	bl	1f108 <test_json@@Base>
   1fc54:	mov	r3, #488	; 0x1e8
   1fc58:	str	r3, [sp, #8]
   1fc5c:	str	r4, [sp, #4]
   1fc60:	mov	r3, r4
   1fc64:	str	r4, [sp]
   1fc68:	ldr	r2, [pc, #200]	; 1fd38 <union_vector_tests@@Base+0x11c>
   1fc6c:	ldr	r1, [pc, #200]	; 1fd3c <union_vector_tests@@Base+0x120>
   1fc70:	mov	r5, r0
   1fc74:	mov	r0, r6
   1fc78:	bl	1f108 <test_json@@Base>
   1fc7c:	ldr	r3, [pc, #188]	; 1fd40 <union_vector_tests@@Base+0x124>
   1fc80:	str	r4, [sp, #4]
   1fc84:	str	r3, [sp, #8]
   1fc88:	str	r4, [sp]
   1fc8c:	mov	r3, r4
   1fc90:	ldr	r2, [pc, #172]	; 1fd44 <union_vector_tests@@Base+0x128>
   1fc94:	ldr	r1, [pc, #172]	; 1fd48 <union_vector_tests@@Base+0x12c>
   1fc98:	orr	r5, r5, r0
   1fc9c:	mov	r0, r6
   1fca0:	bl	1f108 <test_json@@Base>
   1fca4:	ldr	r3, [pc, #160]	; 1fd4c <union_vector_tests@@Base+0x130>
   1fca8:	str	r4, [sp, #4]
   1fcac:	str	r3, [sp, #8]
   1fcb0:	str	r4, [sp]
   1fcb4:	mov	r3, r4
   1fcb8:	ldr	r2, [pc, #144]	; 1fd50 <union_vector_tests@@Base+0x134>
   1fcbc:	ldr	r1, [pc, #144]	; 1fd54 <union_vector_tests@@Base+0x138>
   1fcc0:	orr	r5, r5, r0
   1fcc4:	mov	r0, r6
   1fcc8:	bl	1f108 <test_json@@Base>
   1fccc:	ldr	r3, [pc, #132]	; 1fd58 <union_vector_tests@@Base+0x13c>
   1fcd0:	mov	r2, r7
   1fcd4:	str	r3, [sp, #8]
   1fcd8:	str	r4, [sp, #4]
   1fcdc:	mov	r3, r4
   1fce0:	str	r4, [sp]
   1fce4:	ldr	r1, [pc, #112]	; 1fd5c <union_vector_tests@@Base+0x140>
   1fce8:	orr	r5, r5, r0
   1fcec:	mov	r0, r6
   1fcf0:	bl	1f108 <test_json@@Base>
   1fcf4:	mov	r3, #500	; 0x1f4
   1fcf8:	str	r3, [sp, #8]
   1fcfc:	str	r4, [sp, #4]
   1fd00:	str	r4, [sp]
   1fd04:	mov	r3, r4
   1fd08:	ldr	r2, [pc, #80]	; 1fd60 <union_vector_tests@@Base+0x144>
   1fd0c:	ldr	r1, [pc, #80]	; 1fd64 <union_vector_tests@@Base+0x148>
   1fd10:	orr	r5, r5, r0
   1fd14:	mov	r0, r6
   1fd18:	bl	1f108 <test_json@@Base>
   1fd1c:	orr	r0, r5, r0
   1fd20:	add	sp, sp, #20
   1fd24:	pop	{r4, r5, r6, r7, pc}
   1fd28:	ldrdeq	lr, [r2], -r4
   1fd2c:	ldrdeq	r0, [r3], -r1
   1fd30:	andeq	r0, r0, r5, ror #3
   1fd34:	andeq	r0, r3, r9, lsl #4
   1fd38:	andeq	r0, r3, r9, asr #4
   1fd3c:	andeq	r0, r3, r4, ror r2
   1fd40:	andeq	r0, r0, fp, ror #3
   1fd44:	andeq	r0, r3, r7, lsr #5
   1fd48:	andeq	r0, r3, fp, ror #5
   1fd4c:	andeq	r0, r0, lr, ror #3
   1fd50:	andeq	r0, r3, r8, lsr r3
   1fd54:	andeq	r0, r3, r4, lsr #7
   1fd58:	strdeq	r0, [r0], -r1
   1fd5c:	andeq	r0, r3, r1, lsr #8
   1fd60:	andeq	r0, r3, r0, ror #8
   1fd64:			; <UNDEFINED> instruction: 0x000304bc
   1fd68:	ldr	ip, [r0, #28]
   1fd6c:	ldr	r3, [r0, #64]	; 0x40
   1fd70:	ldr	r2, [r0, #60]	; 0x3c
   1fd74:	sub	r3, r3, ip
   1fd78:	cmp	r3, r1
   1fd7c:	strls	r3, [r0, #24]
   1fd80:	strhi	r1, [r0, #24]
   1fd84:	ldr	r3, [r0, #32]
   1fd88:	add	r2, r2, ip
   1fd8c:	str	r2, [r0, #16]
   1fd90:	str	r1, [r3, #4]
   1fd94:	bx	lr
   1fd98:	push	{r0, r1, r4, r5, r6, lr}
   1fd9c:	mov	r6, r2
   1fda0:	ldr	r2, [r0, #28]
   1fda4:	mov	r3, #1
   1fda8:	str	r3, [sp]
   1fdac:	add	r2, r1, r2
   1fdb0:	ldr	r5, [r0, #48]	; 0x30
   1fdb4:	add	r1, r0, #60	; 0x3c
   1fdb8:	mov	r4, r0
   1fdbc:	ldr	r0, [r0, #40]	; 0x28
   1fdc0:	blx	r5
   1fdc4:	subs	r5, r0, #0
   1fdc8:	mvnne	r5, #0
   1fdcc:	bne	1fddc <union_vector_tests@@Base+0x1c0>
   1fdd0:	mov	r1, r6
   1fdd4:	mov	r0, r4
   1fdd8:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   1fddc:	mov	r0, r5
   1fde0:	add	sp, sp, #8
   1fde4:	pop	{r4, r5, r6, pc}
   1fde8:	push	{r4, r5, r6, lr}
   1fdec:	mov	r4, r0
   1fdf0:	ldr	r5, [r0, #20]
   1fdf4:	ldr	r3, [r0, #24]
   1fdf8:	add	r1, r5, r1
   1fdfc:	cmp	r1, r3
   1fe00:	str	r1, [r0, #20]
   1fe04:	bcs	1fe14 <union_vector_tests@@Base+0x1f8>
   1fe08:	ldr	r0, [r4, #16]
   1fe0c:	add	r0, r0, r5
   1fe10:	pop	{r4, r5, r6, pc}
   1fe14:	mvn	r2, #3
   1fe18:	add	r1, r1, #1
   1fe1c:	bl	1fd98 <union_vector_tests@@Base+0x17c>
   1fe20:	cmp	r0, #0
   1fe24:	beq	1fe08 <union_vector_tests@@Base+0x1ec>
   1fe28:	mov	r0, #0
   1fe2c:	pop	{r4, r5, r6, pc}
   1fe30:	push	{r4, lr}
   1fe34:	mov	r4, r0
   1fe38:	ldr	r2, [r0, #20]
   1fe3c:	mov	r1, #0
   1fe40:	ldr	r0, [r0, #16]
   1fe44:	bl	145e8 <memset@plt>
   1fe48:	ldr	r3, [r4, #32]
   1fe4c:	mov	r0, r4
   1fe50:	ldr	r2, [r3, #8]
   1fe54:	ldr	r1, [r3, #4]
   1fe58:	str	r2, [r4, #20]
   1fe5c:	ldr	r2, [r3]
   1fe60:	str	r2, [r4, #28]
   1fe64:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   1fe68:	ldrh	r3, [r4, #130]	; 0x82
   1fe6c:	ldrh	r2, [r4, #128]	; 0x80
   1fe70:	cmp	r2, r3
   1fe74:	strhcc	r3, [r4, #128]	; 0x80
   1fe78:	ldr	r3, [r4, #32]
   1fe7c:	sub	r3, r3, #36	; 0x24
   1fe80:	ldrh	r2, [r3, #48]	; 0x30
   1fe84:	str	r3, [r4, #32]
   1fe88:	ldr	r3, [r4, #156]	; 0x9c
   1fe8c:	strh	r2, [r4, #130]	; 0x82
   1fe90:	sub	r3, r3, #1
   1fe94:	str	r3, [r4, #156]	; 0x9c
   1fe98:	pop	{r4, pc}
   1fe9c:	ldr	r3, [r0, #20]
   1fea0:	mov	r2, r1
   1fea4:	sub	r3, r3, r1
   1fea8:	str	r3, [r0, #20]
   1feac:	ldr	r0, [r0, #16]
   1feb0:	mov	r1, #0
   1feb4:	add	r0, r0, r3
   1feb8:	b	145e8 <memset@plt>
   1febc:	push	{r4, r5, r6, lr}
   1fec0:	mov	r6, r1
   1fec4:	mov	r1, r2
   1fec8:	mov	r4, r2
   1fecc:	bl	1fde8 <union_vector_tests@@Base+0x1cc>
   1fed0:	subs	r5, r0, #0
   1fed4:	beq	1fee4 <union_vector_tests@@Base+0x2c8>
   1fed8:	mov	r2, r4
   1fedc:	mov	r1, r6
   1fee0:	bl	14570 <memcpy@plt>
   1fee4:	mov	r0, r5
   1fee8:	pop	{r4, r5, r6, pc}
   1feec:	push	{r0, r1, r4, lr}
   1fef0:	add	r3, sp, #8
   1fef4:	cmp	r0, #4
   1fef8:	mov	r4, #0
   1fefc:	mov	r2, r1
   1ff00:	str	r4, [r3, #-4]!
   1ff04:	movcs	r1, r0
   1ff08:	movcc	r1, #4
   1ff0c:	mov	r0, r3
   1ff10:	bl	145dc <posix_memalign@plt>
   1ff14:	cmp	r0, r4
   1ff18:	beq	1ff30 <union_vector_tests@@Base+0x314>
   1ff1c:	ldr	r0, [sp, #4]
   1ff20:	cmp	r0, r4
   1ff24:	beq	1ff30 <union_vector_tests@@Base+0x314>
   1ff28:	bl	14564 <free@plt>
   1ff2c:	str	r4, [sp, #4]
   1ff30:	ldr	r0, [sp, #4]
   1ff34:	add	sp, sp, #8
   1ff38:	pop	{r4, pc}

0001ff3c <flatcc_builder_default_alloc@@Base>:
   1ff3c:	push	{r4, r5, r6, r7, r8, lr}
   1ff40:	subs	r6, r2, #0
   1ff44:	mov	r5, r1
   1ff48:	bne	1ff6c <flatcc_builder_default_alloc@@Base+0x30>
   1ff4c:	ldr	r0, [r1]
   1ff50:	cmp	r0, #0
   1ff54:	popeq	{r4, r5, r6, r7, r8, pc}
   1ff58:	bl	14564 <free@plt>
   1ff5c:	str	r6, [r5]
   1ff60:	str	r6, [r5, #4]
   1ff64:	mov	r0, #0
   1ff68:	pop	{r4, r5, r6, r7, r8, pc}
   1ff6c:	ldr	r2, [sp, #24]
   1ff70:	mov	r7, r3
   1ff74:	sub	r2, r2, #1
   1ff78:	cmp	r2, #6
   1ff7c:	ldrls	pc, [pc, r2, lsl #2]
   1ff80:	b	20014 <flatcc_builder_default_alloc@@Base+0xd8>
   1ff84:	andeq	r0, r2, ip, lsl r0
   1ff88:	andeq	r0, r2, r4, lsl r0
   1ff8c:	andeq	r0, r2, r4, lsl r0
   1ff90:	andeq	r0, r2, r4
   1ff94:	andeq	pc, r1, r0, lsr #31
   1ff98:	andeq	r0, r2, r4, lsl r0
   1ff9c:	andeq	r0, r2, ip
   1ffa0:	mov	r4, r6
   1ffa4:	cmp	r6, r4
   1ffa8:	bhi	20024 <flatcc_builder_default_alloc@@Base+0xe8>
   1ffac:	ldr	r2, [r5, #4]
   1ffb0:	cmp	r6, r2
   1ffb4:	bhi	1ffc0 <flatcc_builder_default_alloc@@Base+0x84>
   1ffb8:	cmp	r4, r2, lsr #1
   1ffbc:	bls	1ff64 <flatcc_builder_default_alloc@@Base+0x28>
   1ffc0:	mov	r1, r4
   1ffc4:	ldr	r0, [r5]
   1ffc8:	bl	14588 <realloc@plt>
   1ffcc:	subs	r6, r0, #0
   1ffd0:	beq	2002c <flatcc_builder_default_alloc@@Base+0xf0>
   1ffd4:	cmp	r7, #0
   1ffd8:	beq	1fff8 <flatcc_builder_default_alloc@@Base+0xbc>
   1ffdc:	ldr	r0, [r5, #4]
   1ffe0:	cmp	r4, r0
   1ffe4:	bls	1fff8 <flatcc_builder_default_alloc@@Base+0xbc>
   1ffe8:	sub	r2, r4, r0
   1ffec:	mov	r1, #0
   1fff0:	add	r0, r6, r0
   1fff4:	bl	145e8 <memset@plt>
   1fff8:	str	r6, [r5]
   1fffc:	str	r4, [r5, #4]
   20000:	b	1ff64 <flatcc_builder_default_alloc@@Base+0x28>
   20004:	mov	r4, #288	; 0x120
   20008:	b	1ffa4 <flatcc_builder_default_alloc@@Base+0x68>
   2000c:	mov	r4, #64	; 0x40
   20010:	b	1ffa4 <flatcc_builder_default_alloc@@Base+0x68>
   20014:	mov	r4, #32
   20018:	b	1ffa4 <flatcc_builder_default_alloc@@Base+0x68>
   2001c:	mov	r4, #256	; 0x100
   20020:	b	1ffa4 <flatcc_builder_default_alloc@@Base+0x68>
   20024:	lsl	r4, r4, #1
   20028:	b	1ffa4 <flatcc_builder_default_alloc@@Base+0x68>
   2002c:	mvn	r0, #0
   20030:	pop	{r4, r5, r6, r7, r8, pc}
   20034:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20038:	add	r6, r0, #52	; 0x34
   2003c:	mov	r4, r1
   20040:	add	r1, r6, r1, lsl #3
   20044:	mov	r5, r2
   20048:	add	r2, r2, r3
   2004c:	ldr	r3, [r1, #4]
   20050:	cmp	r2, r3
   20054:	bls	20088 <flatcc_builder_default_alloc@@Base+0x14c>
   20058:	str	r4, [sp]
   2005c:	ldr	r3, [sp, #32]
   20060:	ldr	r7, [r0, #48]	; 0x30
   20064:	ldr	r0, [r0, #40]	; 0x28
   20068:	blx	r7
   2006c:	cmp	r0, #0
   20070:	beq	20088 <flatcc_builder_default_alloc@@Base+0x14c>
   20074:	ldr	r3, [pc, #28]	; 20098 <flatcc_builder_default_alloc@@Base+0x15c>
   20078:	mov	r2, #308	; 0x134
   2007c:	ldr	r1, [pc, #24]	; 2009c <flatcc_builder_default_alloc@@Base+0x160>
   20080:	ldr	r0, [pc, #24]	; 200a0 <flatcc_builder_default_alloc@@Base+0x164>
   20084:	bl	14648 <__assert_fail@plt>
   20088:	ldr	r0, [r6, r4, lsl #3]
   2008c:	add	r0, r0, r5
   20090:	add	sp, sp, #12
   20094:	pop	{r4, r5, r6, r7, pc}
   20098:	ldrdeq	r1, [r3], -fp
   2009c:	ldrdeq	r1, [r3], -sl
   200a0:	andeq	r1, r3, r7, asr #24
   200a4:	ldr	r2, [r0, #156]	; 0x9c
   200a8:	ldr	r3, [r0, #160]	; 0xa0
   200ac:	push	{r0, r1, r4, r5, r6, lr}
   200b0:	mov	r5, r1
   200b4:	add	r1, r2, #1
   200b8:	cmp	r1, r3
   200bc:	mov	r4, r0
   200c0:	str	r1, [r0, #156]	; 0x9c
   200c4:	ble	20174 <flatcc_builder_default_alloc@@Base+0x238>
   200c8:	ldr	r3, [r0, #176]	; 0xb0
   200cc:	cmp	r3, #0
   200d0:	cmpgt	r1, r3
   200d4:	movgt	r3, #1
   200d8:	movle	r3, #0
   200dc:	ble	200ec <flatcc_builder_default_alloc@@Base+0x1b0>
   200e0:	mvn	r0, #0
   200e4:	add	sp, sp, #8
   200e8:	pop	{r4, r5, r6, pc}
   200ec:	mov	r6, #36	; 0x24
   200f0:	str	r3, [sp]
   200f4:	mul	r2, r6, r2
   200f8:	mov	r3, r6
   200fc:	mov	r1, #4
   20100:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   20104:	cmp	r0, #0
   20108:	str	r0, [r4, #32]
   2010c:	beq	200e0 <flatcc_builder_default_alloc@@Base+0x1a4>
   20110:	mov	r1, r6
   20114:	ldr	r0, [r4, #88]	; 0x58
   20118:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   2011c:	ldr	r3, [r4, #176]	; 0xb0
   20120:	cmp	r3, #0
   20124:	cmpgt	r0, r3
   20128:	str	r0, [r4, #160]	; 0xa0
   2012c:	strgt	r3, [r4, #160]	; 0xa0
   20130:	ldrh	r1, [r4, #130]	; 0x82
   20134:	ldr	r2, [r4, #32]
   20138:	ldr	r3, [r4, #20]
   2013c:	mvn	r0, #3
   20140:	strh	r1, [r2, #12]
   20144:	ldr	r1, [r4, #28]
   20148:	str	r3, [r2, #8]
   2014c:	add	r3, r3, r1
   20150:	add	r3, r3, #7
   20154:	strh	r5, [r4, #130]	; 0x82
   20158:	bic	r3, r3, #7
   2015c:	str	r0, [r2, #4]
   20160:	mov	r0, #0
   20164:	str	r1, [r2]
   20168:	str	r3, [r4, #28]
   2016c:	str	r0, [r4, #20]
   20170:	b	200e4 <flatcc_builder_default_alloc@@Base+0x1a8>
   20174:	ldr	r3, [r0, #32]
   20178:	add	r3, r3, #36	; 0x24
   2017c:	str	r3, [r0, #32]
   20180:	b	20130 <flatcc_builder_default_alloc@@Base+0x1f4>
   20184:	ldr	r3, [r0, #32]
   20188:	push	{r0, r1, r2, r4, r5, lr}
   2018c:	add	r1, r1, #2
   20190:	ldr	r2, [r3, #16]
   20194:	lsl	r5, r1, #1
   20198:	ldrh	r1, [r3, #28]
   2019c:	mov	r3, #1
   201a0:	str	r3, [sp]
   201a4:	mov	r3, r5
   201a8:	add	r2, r2, r1, lsl #1
   201ac:	mov	r1, #0
   201b0:	mov	r4, r0
   201b4:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   201b8:	cmp	r0, #0
   201bc:	streq	r0, [r4, #4]
   201c0:	mvneq	r0, #0
   201c4:	beq	20200 <flatcc_builder_default_alloc@@Base+0x2c4>
   201c8:	ldr	r2, [r4, #32]
   201cc:	add	r0, r0, #4
   201d0:	mov	r3, #0
   201d4:	str	r0, [r4, #4]
   201d8:	str	r3, [sp]
   201dc:	mov	r1, #3
   201e0:	sub	r3, r5, #3
   201e4:	ldr	r2, [r2, #20]
   201e8:	mov	r0, r4
   201ec:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   201f0:	cmp	r0, #0
   201f4:	str	r0, [r4]
   201f8:	movne	r0, #0
   201fc:	mvneq	r0, #0
   20200:	add	sp, sp, #12
   20204:	pop	{r4, r5, pc}
   20208:	push	{r0, r1, r2, r4, r5, lr}
   2020c:	ldr	r3, [r1]
   20210:	ldr	r4, [r0, #140]	; 0x8c
   20214:	add	r2, r3, r4
   20218:	cmp	r4, r2
   2021c:	str	r2, [r0, #140]	; 0x8c
   20220:	ble	20238 <flatcc_builder_default_alloc@@Base+0x2fc>
   20224:	ldr	r3, [pc, #68]	; 20270 <flatcc_builder_default_alloc@@Base+0x334>
   20228:	ldr	r2, [pc, #68]	; 20274 <flatcc_builder_default_alloc@@Base+0x338>
   2022c:	ldr	r1, [pc, #68]	; 20278 <flatcc_builder_default_alloc@@Base+0x33c>
   20230:	ldr	r0, [pc, #68]	; 2027c <flatcc_builder_default_alloc@@Base+0x340>
   20234:	bl	14648 <__assert_fail@plt>
   20238:	str	r3, [sp]
   2023c:	add	r1, r1, #8
   20240:	ldr	r5, [r0, #44]	; 0x2c
   20244:	ldr	r2, [r1, #-4]
   20248:	mov	r3, r4
   2024c:	ldr	r0, [r0, #36]	; 0x24
   20250:	blx	r5
   20254:	cmp	r0, #0
   20258:	ldrne	r3, [pc, #16]	; 20270 <flatcc_builder_default_alloc@@Base+0x334>
   2025c:	ldrne	r2, [pc, #28]	; 20280 <flatcc_builder_default_alloc@@Base+0x344>
   20260:	bne	2022c <flatcc_builder_default_alloc@@Base+0x2f0>
   20264:	add	r0, r4, #1
   20268:	add	sp, sp, #12
   2026c:	pop	{r4, r5, pc}
   20270:	andeq	r1, r3, sl, ror #9
   20274:	andeq	r0, r0, r1, lsr #5
   20278:	ldrdeq	r1, [r3], -sl
   2027c:	andeq	r1, r3, r7, asr #24
   20280:	andeq	r0, r0, r5, lsr #5
   20284:	cmp	r2, #0
   20288:	bne	20298 <flatcc_builder_default_alloc@@Base+0x35c>
   2028c:	ldrh	r2, [r0, #132]	; 0x84
   20290:	cmp	r2, #0
   20294:	moveq	r2, #1
   20298:	ldrh	ip, [r1]
   2029c:	cmp	ip, #3
   202a0:	movls	ip, #4
   202a4:	strhls	ip, [r1]
   202a8:	ldrh	ip, [r1]
   202ac:	cmp	ip, r2
   202b0:	strhcc	r2, [r1]
   202b4:	cmp	r3, #0
   202b8:	bne	2031c <flatcc_builder_default_alloc@@Base+0x3e0>
   202bc:	ldr	r3, [r0, #140]	; 0x8c
   202c0:	sub	r2, r2, #1
   202c4:	ands	r2, r2, r3
   202c8:	beq	2031c <flatcc_builder_default_alloc@@Base+0x3e0>
   202cc:	push	{r4, lr}
   202d0:	sub	sp, sp, #72	; 0x48
   202d4:	ldr	r4, [pc, #72]	; 20324 <flatcc_builder_default_alloc@@Base+0x3e8>
   202d8:	mov	r3, #1
   202dc:	mov	r1, sp
   202e0:	str	r2, [sp]
   202e4:	str	r4, [sp, #8]
   202e8:	str	r2, [sp, #12]
   202ec:	str	r3, [sp, #4]
   202f0:	bl	20208 <flatcc_builder_default_alloc@@Base+0x2cc>
   202f4:	cmp	r0, #0
   202f8:	bne	20310 <flatcc_builder_default_alloc@@Base+0x3d4>
   202fc:	add	r3, r4, #512	; 0x200
   20300:	ldr	r2, [pc, #32]	; 20328 <flatcc_builder_default_alloc@@Base+0x3ec>
   20304:	ldr	r1, [pc, #32]	; 2032c <flatcc_builder_default_alloc@@Base+0x3f0>
   20308:	ldr	r0, [pc, #32]	; 20330 <flatcc_builder_default_alloc@@Base+0x3f4>
   2030c:	bl	14648 <__assert_fail@plt>
   20310:	mov	r0, #0
   20314:	add	sp, sp, #72	; 0x48
   20318:	pop	{r4, pc}
   2031c:	mov	r0, #0
   20320:	bx	lr
   20324:	strdeq	r1, [r3], -r4
   20328:			; <UNDEFINED> instruction: 0x000002be
   2032c:	ldrdeq	r1, [r3], -sl
   20330:	andeq	r1, r3, r7, asr #24
   20334:	ldr	r2, [r0, #136]	; 0x88
   20338:	ldr	r3, [r1]
   2033c:	push	{r0, r1, r4, r5, r6, lr}
   20340:	sub	r4, r2, r3
   20344:	cmp	r2, r4
   20348:	bgt	20360 <flatcc_builder_default_alloc@@Base+0x424>
   2034c:	ldr	r3, [pc, #76]	; 203a0 <flatcc_builder_default_alloc@@Base+0x464>
   20350:	ldr	r2, [pc, #76]	; 203a4 <flatcc_builder_default_alloc@@Base+0x468>
   20354:	ldr	r1, [pc, #76]	; 203a8 <flatcc_builder_default_alloc@@Base+0x46c>
   20358:	ldr	r0, [pc, #76]	; 203ac <flatcc_builder_default_alloc@@Base+0x470>
   2035c:	bl	14648 <__assert_fail@plt>
   20360:	str	r3, [sp]
   20364:	mov	r5, r0
   20368:	ldr	r6, [r0, #44]	; 0x2c
   2036c:	ldr	r2, [r1, #4]
   20370:	mov	r3, r4
   20374:	add	r1, r1, #8
   20378:	ldr	r0, [r0, #36]	; 0x24
   2037c:	blx	r6
   20380:	cmp	r0, #0
   20384:	ldrne	r3, [pc, #20]	; 203a0 <flatcc_builder_default_alloc@@Base+0x464>
   20388:	ldrne	r2, [pc, #32]	; 203b0 <flatcc_builder_default_alloc@@Base+0x474>
   2038c:	bne	20354 <flatcc_builder_default_alloc@@Base+0x418>
   20390:	mov	r0, r4
   20394:	str	r4, [r5, #136]	; 0x88
   20398:	add	sp, sp, #8
   2039c:	pop	{r4, r5, r6, pc}
   203a0:	andeq	r1, r3, r3, lsl #14
   203a4:	andeq	r0, r0, r7, lsl #5
   203a8:	ldrdeq	r1, [r3], -sl
   203ac:	andeq	r1, r3, r7, asr #24
   203b0:	andeq	r0, r0, fp, lsl #5
   203b4:	ldr	r3, [r0, #20]
   203b8:	adds	r1, r3, r1
   203bc:	movcs	r3, #1
   203c0:	movcc	r3, #0
   203c4:	cmp	r1, r2
   203c8:	movls	r2, r3
   203cc:	orrhi	r2, r3, #1
   203d0:	cmp	r2, #0
   203d4:	beq	203f0 <flatcc_builder_default_alloc@@Base+0x4b4>
   203d8:	push	{r4, lr}
   203dc:	mov	r2, #892	; 0x37c
   203e0:	ldr	r3, [pc, #20]	; 203fc <flatcc_builder_default_alloc@@Base+0x4c0>
   203e4:	ldr	r1, [pc, #20]	; 20400 <flatcc_builder_default_alloc@@Base+0x4c4>
   203e8:	ldr	r0, [pc, #20]	; 20404 <flatcc_builder_default_alloc@@Base+0x4c8>
   203ec:	bl	14648 <__assert_fail@plt>
   203f0:	str	r1, [r0, #20]
   203f4:	mov	r0, r2
   203f8:	bx	lr
   203fc:	andeq	r1, r3, lr, lsl #14
   20400:	ldrdeq	r1, [r3], -sl
   20404:	andeq	r1, r3, r0, lsr #24
   20408:	ldrh	ip, [r0, #128]	; 0x80
   2040c:	push	{r4, r5, r6, r7, lr}
   20410:	sub	sp, sp, #84	; 0x54
   20414:	cmp	ip, #3
   20418:	movls	ip, #4
   2041c:	strhls	ip, [r0, #128]	; 0x80
   20420:	mov	ip, #4
   20424:	add	r5, sp, ip
   20428:	str	ip, [sp, #8]
   2042c:	ldr	r4, [r0, #136]	; 0x88
   20430:	str	ip, [sp, #20]
   20434:	mov	ip, #1
   20438:	str	ip, [sp, #12]
   2043c:	lsls	ip, r2, #2
   20440:	strne	ip, [sp, #28]
   20444:	and	lr, r4, #3
   20448:	str	r5, [sp, #16]
   2044c:	addne	r5, ip, #4
   20450:	movne	ip, #2
   20454:	strne	r5, [sp, #8]
   20458:	strne	r1, [sp, #24]
   2045c:	strne	ip, [sp, #12]
   20460:	cmp	lr, #0
   20464:	str	r2, [sp, #4]
   20468:	beq	20498 <flatcc_builder_default_alloc@@Base+0x55c>
   2046c:	ldr	ip, [sp, #8]
   20470:	add	r5, sp, #80	; 0x50
   20474:	add	ip, ip, lr
   20478:	str	ip, [sp, #8]
   2047c:	ldr	ip, [sp, #12]
   20480:	ldr	r6, [pc, #204]	; 20554 <flatcc_builder_default_alloc@@Base+0x618>
   20484:	add	ip, ip, #1
   20488:	str	ip, [sp, #12]
   2048c:	add	r5, r5, ip, lsl #3
   20490:	str	r6, [r5, #-72]	; 0xffffffb8
   20494:	str	lr, [r5, #-68]	; 0xffffffbc
   20498:	ldr	r5, [sp, #8]
   2049c:	sub	r6, r1, #4
   204a0:	sub	r5, r4, r5
   204a4:	mov	lr, r3
   204a8:	add	r2, r3, r2
   204ac:	mvn	r7, #3
   204b0:	cmp	r2, lr
   204b4:	bne	204c8 <flatcc_builder_default_alloc@@Base+0x58c>
   204b8:	add	r1, sp, #8
   204bc:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   204c0:	add	sp, sp, #84	; 0x54
   204c4:	pop	{r4, r5, r6, r7, pc}
   204c8:	ldr	r4, [r6, #4]!
   204cc:	cmp	r4, #0
   204d0:	beq	20510 <flatcc_builder_default_alloc@@Base+0x5d4>
   204d4:	sub	ip, r7, r6
   204d8:	add	ip, r1, ip
   204dc:	add	ip, ip, r4
   204e0:	sub	ip, ip, r5
   204e4:	cmp	r3, #0
   204e8:	str	ip, [r6]
   204ec:	beq	2054c <flatcc_builder_default_alloc@@Base+0x610>
   204f0:	ldrb	ip, [lr]
   204f4:	cmp	ip, #0
   204f8:	bne	2054c <flatcc_builder_default_alloc@@Base+0x610>
   204fc:	ldr	r3, [pc, #84]	; 20558 <flatcc_builder_default_alloc@@Base+0x61c>
   20500:	ldr	r2, [pc, #84]	; 2055c <flatcc_builder_default_alloc@@Base+0x620>
   20504:	ldr	r1, [pc, #84]	; 20560 <flatcc_builder_default_alloc@@Base+0x624>
   20508:	ldr	r0, [pc, #84]	; 20564 <flatcc_builder_default_alloc@@Base+0x628>
   2050c:	bl	14648 <__assert_fail@plt>
   20510:	cmp	r3, #0
   20514:	beq	20538 <flatcc_builder_default_alloc@@Base+0x5fc>
   20518:	ldrb	ip, [lr]
   2051c:	cmp	ip, #0
   20520:	beq	2054c <flatcc_builder_default_alloc@@Base+0x610>
   20524:	ldr	r3, [pc, #44]	; 20558 <flatcc_builder_default_alloc@@Base+0x61c>
   20528:	ldr	r2, [pc, #56]	; 20568 <flatcc_builder_default_alloc@@Base+0x62c>
   2052c:	ldr	r1, [pc, #44]	; 20560 <flatcc_builder_default_alloc@@Base+0x624>
   20530:	ldr	r0, [pc, #52]	; 2056c <flatcc_builder_default_alloc@@Base+0x630>
   20534:	b	2050c <flatcc_builder_default_alloc@@Base+0x5d0>
   20538:	ldr	r3, [pc, #24]	; 20558 <flatcc_builder_default_alloc@@Base+0x61c>
   2053c:	ldr	r2, [pc, #44]	; 20570 <flatcc_builder_default_alloc@@Base+0x634>
   20540:	ldr	r1, [pc, #24]	; 20560 <flatcc_builder_default_alloc@@Base+0x624>
   20544:	ldr	r0, [pc, #40]	; 20574 <flatcc_builder_default_alloc@@Base+0x638>
   20548:	b	2050c <flatcc_builder_default_alloc@@Base+0x5d0>
   2054c:	add	lr, lr, #1
   20550:	b	204b0 <flatcc_builder_default_alloc@@Base+0x574>
   20554:	strdeq	r1, [r3], -r4
   20558:	andeq	r1, r3, pc, lsl r7
   2055c:			; <UNDEFINED> instruction: 0x000005b1
   20560:	ldrdeq	r1, [r3], -sl
   20564:	andeq	r1, r3, fp, lsr ip
   20568:			; <UNDEFINED> instruction: 0x000005b5
   2056c:	andeq	r1, r3, r9, asr #24
   20570:			; <UNDEFINED> instruction: 0x000005b7
   20574:	andeq	r1, r3, r7, asr #24

00020578 <flatcc_builder_flush_vtable_cache@@Base>:
   20578:	ldr	r3, [r0, #116]	; 0x74
   2057c:	cmp	r3, #0
   20580:	bxeq	lr
   20584:	push	{r4, lr}
   20588:	mov	r1, #0
   2058c:	mov	r4, r0
   20590:	ldr	r2, [r0, #96]	; 0x60
   20594:	ldr	r0, [r0, #92]	; 0x5c
   20598:	bl	145e8 <memset@plt>
   2059c:	mov	r3, #16
   205a0:	str	r3, [r4, #124]	; 0x7c
   205a4:	mov	r3, #0
   205a8:	str	r3, [r4, #120]	; 0x78
   205ac:	pop	{r4, pc}

000205b0 <flatcc_builder_custom_init@@Base>:
   205b0:	push	{r4, r5, r6, r7, r8, lr}
   205b4:	mov	r6, r1
   205b8:	mov	r7, r2
   205bc:	mov	r1, #0
   205c0:	mov	r2, #232	; 0xe8
   205c4:	mov	r4, r0
   205c8:	mov	r5, r3
   205cc:	bl	145e8 <memset@plt>
   205d0:	cmp	r6, #0
   205d4:	moveq	r3, #1
   205d8:	addeq	r7, r4, #188	; 0xbc
   205dc:	ldreq	r6, [pc, #40]	; 2060c <flatcc_builder_custom_init@@Base+0x5c>
   205e0:	str	r7, [r4, #36]	; 0x24
   205e4:	str	r6, [r4, #44]	; 0x2c
   205e8:	mov	r0, #0
   205ec:	streq	r3, [r4, #184]	; 0xb8
   205f0:	ldr	r3, [pc, #24]	; 20610 <flatcc_builder_custom_init@@Base+0x60>
   205f4:	cmp	r5, #0
   205f8:	moveq	r5, r3
   205fc:	ldr	r3, [sp, #24]
   20600:	str	r5, [r4, #48]	; 0x30
   20604:	str	r3, [r4, #40]	; 0x28
   20608:	pop	{r4, r5, r6, r7, r8, pc}
   2060c:	muleq	r2, r0, sp
   20610:	andeq	pc, r1, ip, lsr pc	; <UNPREDICTABLE>

00020614 <flatcc_builder_init@@Base>:
   20614:	push	{r4, lr}
   20618:	mov	r2, #232	; 0xe8
   2061c:	mov	r4, r0
   20620:	mov	r1, #0
   20624:	bl	145e8 <memset@plt>
   20628:	mov	r3, #1
   2062c:	str	r3, [r4, #184]	; 0xb8
   20630:	ldr	r3, [pc, #24]	; 20650 <flatcc_builder_init@@Base+0x3c>
   20634:	mov	r0, #0
   20638:	str	r3, [r4, #48]	; 0x30
   2063c:	add	r3, r4, #188	; 0xbc
   20640:	str	r3, [r4, #36]	; 0x24
   20644:	ldr	r3, [pc, #8]	; 20654 <flatcc_builder_init@@Base+0x40>
   20648:	str	r3, [r4, #44]	; 0x2c
   2064c:	pop	{r4, pc}
   20650:	andeq	pc, r1, ip, lsr pc	; <UNPREDICTABLE>
   20654:	muleq	r2, r0, sp

00020658 <flatcc_builder_custom_reset@@Base>:
   20658:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2065c:	mov	r6, #0
   20660:	mov	r4, r0
   20664:	mov	r7, r1
   20668:	mov	r8, r2
   2066c:	mov	r5, r0
   20670:	mov	r9, #1
   20674:	mov	sl, r6
   20678:	ldr	r3, [r5, #52]	; 0x34
   2067c:	add	r1, r5, #52	; 0x34
   20680:	cmp	r3, #0
   20684:	beq	20764 <flatcc_builder_custom_reset@@Base+0x10c>
   20688:	cmp	r6, #5
   2068c:	cmpne	r8, #0
   20690:	bne	2073c <flatcc_builder_custom_reset@@Base+0xe4>
   20694:	ldr	r2, [r5, #56]	; 0x38
   20698:	mov	r1, sl
   2069c:	ldr	r0, [r5, #52]	; 0x34
   206a0:	bl	145e8 <memset@plt>
   206a4:	add	r6, r6, #1
   206a8:	cmp	r6, #8
   206ac:	add	r5, r5, #8
   206b0:	bne	20678 <flatcc_builder_custom_reset@@Base+0x20>
   206b4:	ldr	r2, [r4, #124]	; 0x7c
   206b8:	mov	r3, #0
   206bc:	cmp	r2, r3
   206c0:	movne	r2, #16
   206c4:	strne	r2, [r4, #124]	; 0x7c
   206c8:	ldr	r2, [r4, #60]	; 0x3c
   206cc:	ldr	r0, [r4, #184]	; 0xb8
   206d0:	str	r2, [r4, #16]
   206d4:	ldr	r2, [r4, #76]	; 0x4c
   206d8:	cmp	r7, #0
   206dc:	str	r2, [r4]
   206e0:	ldr	r2, [r4, #52]	; 0x34
   206e4:	strne	r3, [r4, #172]	; 0xac
   206e8:	strne	r3, [r4, #176]	; 0xb0
   206ec:	strne	r3, [r4, #180]	; 0xb4
   206f0:	cmp	r0, #0
   206f4:	str	r3, [r4, #120]	; 0x78
   206f8:	strh	r3, [r4, #128]	; 0x80
   206fc:	str	r3, [r4, #136]	; 0x88
   20700:	str	r3, [r4, #140]	; 0x8c
   20704:	str	r3, [r4, #156]	; 0x9c
   20708:	str	r3, [r4, #160]	; 0xa0
   2070c:	str	r3, [r4, #20]
   20710:	str	r3, [r4, #24]
   20714:	str	r3, [r4, #148]	; 0x94
   20718:	str	r3, [r4, #152]	; 0x98
   2071c:	str	r2, [r4, #4]
   20720:	str	r3, [r4, #32]
   20724:	beq	20734 <flatcc_builder_custom_reset@@Base+0xdc>
   20728:	add	r0, r4, #188	; 0xbc
   2072c:	bl	22c88 <flatcc_emitter_reset@@Base>
   20730:	mov	r0, #0
   20734:	add	sp, sp, #12
   20738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2073c:	str	r6, [sp]
   20740:	ldr	fp, [r4, #48]	; 0x30
   20744:	mov	r3, r9
   20748:	mov	r2, #1
   2074c:	ldr	r0, [r4, #40]	; 0x28
   20750:	blx	fp
   20754:	cmp	r0, #0
   20758:	beq	20694 <flatcc_builder_custom_reset@@Base+0x3c>
   2075c:	mvn	r0, #0
   20760:	b	20734 <flatcc_builder_custom_reset@@Base+0xdc>
   20764:	ldr	r3, [r5, #56]	; 0x38
   20768:	cmp	r3, #0
   2076c:	beq	206a4 <flatcc_builder_custom_reset@@Base+0x4c>
   20770:	ldr	r3, [pc, #12]	; 20784 <flatcc_builder_custom_reset@@Base+0x12c>
   20774:	ldr	r2, [pc, #12]	; 20788 <flatcc_builder_custom_reset@@Base+0x130>
   20778:	ldr	r1, [pc, #12]	; 2078c <flatcc_builder_custom_reset@@Base+0x134>
   2077c:	ldr	r0, [pc, #12]	; 20790 <flatcc_builder_custom_reset@@Base+0x138>
   20780:	bl	14648 <__assert_fail@plt>
   20784:	andeq	r1, r3, ip, lsr r7
   20788:			; <UNDEFINED> instruction: 0x000001b2
   2078c:	ldrdeq	r1, [r3], -sl
   20790:	andeq	r1, r3, r7, asr ip

00020794 <flatcc_builder_reset@@Base>:
   20794:	mov	r2, #0
   20798:	mov	r1, r2
   2079c:	b	20658 <flatcc_builder_custom_reset@@Base>

000207a0 <flatcc_builder_clear@@Base>:
   207a0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   207a4:	mov	r5, #0
   207a8:	mov	r4, r0
   207ac:	add	r6, r0, #52	; 0x34
   207b0:	mov	r8, r5
   207b4:	str	r5, [sp]
   207b8:	mov	r1, r6
   207bc:	ldr	r7, [r4, #48]	; 0x30
   207c0:	mov	r3, r8
   207c4:	mov	r2, #0
   207c8:	ldr	r0, [r4, #40]	; 0x28
   207cc:	add	r5, r5, #1
   207d0:	blx	r7
   207d4:	cmp	r5, #8
   207d8:	add	r6, r6, #8
   207dc:	bne	207b4 <flatcc_builder_clear@@Base+0x14>
   207e0:	ldr	r3, [r4, #184]	; 0xb8
   207e4:	cmp	r3, #0
   207e8:	beq	207f4 <flatcc_builder_clear@@Base+0x54>
   207ec:	add	r0, r4, #188	; 0xbc
   207f0:	bl	22d38 <flatcc_emitter_clear@@Base>
   207f4:	mov	r2, #232	; 0xe8
   207f8:	mov	r1, #0
   207fc:	mov	r0, r4
   20800:	add	sp, sp, #8
   20804:	pop	{r4, r5, r6, r7, r8, lr}
   20808:	b	145e8 <memset@plt>

0002080c <flatcc_builder_enter_user_frame_ptr@@Base>:
   2080c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   20810:	add	r4, r1, #3
   20814:	bic	r4, r4, #3
   20818:	add	r4, r4, #4
   2081c:	mov	r7, #0
   20820:	str	r7, [sp]
   20824:	mov	r3, r4
   20828:	ldr	r2, [r0, #228]	; 0xe4
   2082c:	mov	r1, #7
   20830:	mov	r6, r0
   20834:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   20838:	subs	r5, r0, #0
   2083c:	moveq	r0, r5
   20840:	beq	20870 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   20844:	mov	r2, r4
   20848:	mov	r1, r7
   2084c:	bl	145e8 <memset@plt>
   20850:	ldr	r3, [r6, #224]	; 0xe0
   20854:	add	r0, r5, #4
   20858:	str	r3, [r5]
   2085c:	ldr	r1, [r6, #228]	; 0xe4
   20860:	add	r3, r1, #4
   20864:	add	r4, r4, r1
   20868:	str	r3, [r6, #224]	; 0xe0
   2086c:	str	r4, [r6, #228]	; 0xe4
   20870:	add	sp, sp, #12
   20874:	pop	{r4, r5, r6, r7, pc}

00020878 <flatcc_builder_enter_user_frame@@Base>:
   20878:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2087c:	add	r4, r1, #3
   20880:	bic	r4, r4, #3
   20884:	add	r4, r4, #4
   20888:	mov	r7, #0
   2088c:	str	r7, [sp]
   20890:	mov	r3, r4
   20894:	ldr	r2, [r0, #228]	; 0xe4
   20898:	mov	r1, #7
   2089c:	mov	r6, r0
   208a0:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   208a4:	subs	r5, r0, #0
   208a8:	moveq	r0, r5
   208ac:	beq	208d8 <flatcc_builder_enter_user_frame@@Base+0x60>
   208b0:	mov	r2, r4
   208b4:	mov	r1, r7
   208b8:	bl	145e8 <memset@plt>
   208bc:	ldr	r3, [r6, #224]	; 0xe0
   208c0:	str	r3, [r5]
   208c4:	ldr	r1, [r6, #228]	; 0xe4
   208c8:	add	r0, r1, #4
   208cc:	add	r4, r4, r1
   208d0:	str	r0, [r6, #224]	; 0xe0
   208d4:	str	r4, [r6, #228]	; 0xe4
   208d8:	add	sp, sp, #12
   208dc:	pop	{r4, r5, r6, r7, pc}

000208e0 <flatcc_builder_exit_user_frame@@Base>:
   208e0:	ldr	r3, [r0, #224]	; 0xe0
   208e4:	cmp	r3, #0
   208e8:	bne	20904 <flatcc_builder_exit_user_frame@@Base+0x24>
   208ec:	push	{r4, lr}
   208f0:	ldr	r3, [pc, #44]	; 20924 <flatcc_builder_exit_user_frame@@Base+0x44>
   208f4:	ldr	r2, [pc, #44]	; 20928 <flatcc_builder_exit_user_frame@@Base+0x48>
   208f8:	ldr	r1, [pc, #44]	; 2092c <flatcc_builder_exit_user_frame@@Base+0x4c>
   208fc:	ldr	r0, [pc, #44]	; 20930 <flatcc_builder_exit_user_frame@@Base+0x50>
   20900:	bl	14648 <__assert_fail@plt>
   20904:	ldr	r1, [r0, #108]	; 0x6c
   20908:	mov	r2, r0
   2090c:	add	r1, r1, r3
   20910:	sub	r3, r3, #4
   20914:	str	r3, [r0, #228]	; 0xe4
   20918:	ldr	r0, [r1, #-4]
   2091c:	str	r0, [r2, #224]	; 0xe0
   20920:	bx	lr
   20924:	andeq	r1, r3, r8, asr r7
   20928:	andeq	r0, r0, lr, lsl r2
   2092c:	ldrdeq	r1, [r3], -sl
   20930:	andeq	r1, r3, r9, ror #24

00020934 <flatcc_builder_exit_user_frame_at@@Base>:
   20934:	ldr	r2, [r0, #224]	; 0xe0
   20938:	cmp	r2, r1
   2093c:	bcs	20958 <flatcc_builder_exit_user_frame_at@@Base+0x24>
   20940:	push	{r4, lr}
   20944:	ldr	r3, [pc, #20]	; 20960 <flatcc_builder_exit_user_frame_at@@Base+0x2c>
   20948:	ldr	r2, [pc, #20]	; 20964 <flatcc_builder_exit_user_frame_at@@Base+0x30>
   2094c:	ldr	r1, [pc, #20]	; 20968 <flatcc_builder_exit_user_frame_at@@Base+0x34>
   20950:	ldr	r0, [pc, #20]	; 2096c <flatcc_builder_exit_user_frame_at@@Base+0x38>
   20954:	bl	14648 <__assert_fail@plt>
   20958:	str	r1, [r0, #224]	; 0xe0
   2095c:	b	208e0 <flatcc_builder_exit_user_frame@@Base>
   20960:	andeq	r1, r3, r7, ror r7
   20964:	andeq	r0, r0, r7, lsr #4
   20968:	ldrdeq	r1, [r3], -sl
   2096c:	andeq	r1, r3, r2, lsl #25

00020970 <flatcc_builder_get_current_user_frame@@Base>:
   20970:	ldr	r0, [r0, #224]	; 0xe0
   20974:	bx	lr

00020978 <flatcc_builder_get_user_frame_ptr@@Base>:
   20978:	ldr	r0, [r0, #108]	; 0x6c
   2097c:	add	r0, r0, r1
   20980:	bx	lr

00020984 <flatcc_builder_embed_buffer@@Base>:
   20984:	push	{r4, r5, r6, lr}
   20988:	mov	r4, r3
   2098c:	ldr	r3, [r0, #152]	; 0x98
   20990:	sub	sp, sp, #80	; 0x50
   20994:	adds	r3, r3, #0
   20998:	movne	r3, #1
   2099c:	mov	r6, r2
   209a0:	mov	r2, r1
   209a4:	add	r1, sp, #96	; 0x60
   209a8:	mov	r5, r0
   209ac:	bl	20284 <flatcc_builder_default_alloc@@Base+0x348>
   209b0:	cmp	r0, #0
   209b4:	movne	r0, #0
   209b8:	bne	20a8c <flatcc_builder_embed_buffer@@Base+0x108>
   209bc:	ldr	r3, [sp, #100]	; 0x64
   209c0:	str	r0, [sp, #8]
   209c4:	tst	r3, #2
   209c8:	ldr	r3, [r5, #136]	; 0x88
   209cc:	movne	r2, #4
   209d0:	moveq	r2, #0
   209d4:	sub	r3, r3, r4
   209d8:	sub	r3, r3, r2
   209dc:	ldrh	r2, [sp, #96]	; 0x60
   209e0:	str	r0, [sp, #12]
   209e4:	sub	r2, r2, #1
   209e8:	and	r3, r3, r2
   209ec:	add	r2, r4, r3
   209f0:	str	r2, [sp, #4]
   209f4:	ldr	r2, [r5, #152]	; 0x98
   209f8:	cmp	r2, #0
   209fc:	beq	20a1c <flatcc_builder_embed_buffer@@Base+0x98>
   20a00:	mov	r2, #4
   20a04:	add	r1, sp, r2
   20a08:	str	r2, [sp, #8]
   20a0c:	str	r2, [sp, #20]
   20a10:	mov	r2, #1
   20a14:	str	r1, [sp, #16]
   20a18:	str	r2, [sp, #12]
   20a1c:	cmp	r4, #0
   20a20:	beq	20a4c <flatcc_builder_embed_buffer@@Base+0xc8>
   20a24:	ldr	r2, [sp, #8]
   20a28:	add	r1, sp, #80	; 0x50
   20a2c:	add	r2, r2, r4
   20a30:	str	r2, [sp, #8]
   20a34:	ldr	r2, [sp, #12]
   20a38:	add	r2, r2, #1
   20a3c:	str	r2, [sp, #12]
   20a40:	add	r1, r1, r2, lsl #3
   20a44:	str	r6, [r1, #-72]	; 0xffffffb8
   20a48:	str	r4, [r1, #-68]	; 0xffffffbc
   20a4c:	cmp	r3, #0
   20a50:	beq	20a80 <flatcc_builder_embed_buffer@@Base+0xfc>
   20a54:	ldr	r2, [sp, #8]
   20a58:	add	r1, sp, #80	; 0x50
   20a5c:	add	r2, r2, r3
   20a60:	str	r2, [sp, #8]
   20a64:	ldr	r2, [sp, #12]
   20a68:	ldr	r0, [pc, #36]	; 20a94 <flatcc_builder_embed_buffer@@Base+0x110>
   20a6c:	add	r2, r2, #1
   20a70:	str	r2, [sp, #12]
   20a74:	add	r1, r1, r2, lsl #3
   20a78:	str	r0, [r1, #-72]	; 0xffffffb8
   20a7c:	str	r3, [r1, #-68]	; 0xffffffbc
   20a80:	add	r1, sp, #8
   20a84:	mov	r0, r5
   20a88:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   20a8c:	add	sp, sp, #80	; 0x50
   20a90:	pop	{r4, r5, r6, pc}
   20a94:	strdeq	r1, [r3], -r4

00020a98 <flatcc_builder_create_buffer@@Base>:
   20a98:	push	{r4, r5, r6, r7, r8, r9, lr}
   20a9c:	sub	sp, sp, #92	; 0x5c
   20aa0:	mov	r7, #0
   20aa4:	ldr	r8, [sp, #124]	; 0x7c
   20aa8:	mov	r9, r1
   20aac:	and	r6, r8, #1
   20ab0:	mov	r5, r3
   20ab4:	add	r1, sp, #120	; 0x78
   20ab8:	mov	r3, r6
   20abc:	mov	r4, r0
   20ac0:	str	r7, [sp, #12]
   20ac4:	bl	20284 <flatcc_builder_default_alloc@@Base+0x348>
   20ac8:	cmp	r0, r7
   20acc:	bne	20c40 <flatcc_builder_create_buffer@@Base+0x1a8>
   20ad0:	ldrh	r3, [r4, #128]	; 0x80
   20ad4:	ldrh	r1, [sp, #120]	; 0x78
   20ad8:	ldr	r2, [r4, #136]	; 0x88
   20adc:	and	r8, r8, #2
   20ae0:	cmp	r3, r1
   20ae4:	strhcc	r1, [r4, #128]	; 0x80
   20ae8:	cmp	r9, #0
   20aec:	sub	r1, r1, #1
   20af0:	ldrne	r3, [r9]
   20af4:	strne	r3, [sp, #12]
   20af8:	ldr	r0, [sp, #12]
   20afc:	sub	r3, r2, #4
   20b00:	cmp	r0, #0
   20b04:	movne	r0, #4
   20b08:	moveq	r0, #0
   20b0c:	cmp	r8, #0
   20b10:	moveq	ip, #0
   20b14:	movne	ip, #4
   20b18:	sub	r3, r3, r0
   20b1c:	sub	r3, r3, ip
   20b20:	and	r3, r3, r1
   20b24:	moveq	lr, r6
   20b28:	mov	r1, #0
   20b2c:	orrne	lr, r6, #1
   20b30:	cmp	lr, r1
   20b34:	str	r1, [sp, #16]
   20b38:	str	r1, [sp, #20]
   20b3c:	beq	20b5c <flatcc_builder_create_buffer@@Base+0xc4>
   20b40:	mov	r1, #4
   20b44:	str	r1, [sp, #16]
   20b48:	add	ip, sp, #8
   20b4c:	str	r1, [sp, #28]
   20b50:	mov	r1, #1
   20b54:	str	ip, [sp, #24]
   20b58:	str	r1, [sp, #20]
   20b5c:	ldr	r7, [sp, #20]
   20b60:	add	r8, sp, #88	; 0x58
   20b64:	add	r1, r7, #1
   20b68:	ldr	ip, [sp, #16]
   20b6c:	add	r8, r8, r1, lsl #3
   20b70:	add	r9, sp, #4
   20b74:	add	ip, ip, #4
   20b78:	str	r9, [r8, #-72]	; 0xffffffb8
   20b7c:	cmp	r0, #0
   20b80:	mov	r9, #4
   20b84:	str	ip, [sp, #16]
   20b88:	str	r9, [r8, #-68]	; 0xffffffbc
   20b8c:	str	r1, [sp, #20]
   20b90:	beq	20bbc <flatcc_builder_create_buffer@@Base+0x124>
   20b94:	add	ip, r0, ip
   20b98:	add	r1, r7, #2
   20b9c:	str	ip, [sp, #16]
   20ba0:	add	ip, sp, #88	; 0x58
   20ba4:	add	r1, ip, r1, lsl #3
   20ba8:	add	r7, r7, #2
   20bac:	add	ip, sp, #12
   20bb0:	str	ip, [r1, #-72]	; 0xffffffb8
   20bb4:	str	r0, [r1, #-68]	; 0xffffffbc
   20bb8:	str	r7, [sp, #20]
   20bbc:	cmp	r3, #0
   20bc0:	beq	20bf0 <flatcc_builder_create_buffer@@Base+0x158>
   20bc4:	ldr	r1, [sp, #16]
   20bc8:	add	r0, sp, #88	; 0x58
   20bcc:	add	r1, r1, r3
   20bd0:	str	r1, [sp, #16]
   20bd4:	ldr	r1, [sp, #20]
   20bd8:	ldr	ip, [pc, #108]	; 20c4c <flatcc_builder_create_buffer@@Base+0x1b4>
   20bdc:	add	r1, r1, #1
   20be0:	str	r1, [sp, #20]
   20be4:	add	r0, r0, r1, lsl #3
   20be8:	str	ip, [r0, #-72]	; 0xffffffb8
   20bec:	str	r3, [r0, #-68]	; 0xffffffbc
   20bf0:	cmp	r6, #0
   20bf4:	ldr	r3, [sp, #16]
   20bf8:	add	r1, sp, #16
   20bfc:	sub	r3, r2, r3
   20c00:	ldrne	r2, [r4, #144]	; 0x90
   20c04:	ldreq	r2, [r4, #140]	; 0x8c
   20c08:	add	r3, r3, lr, lsl #2
   20c0c:	sub	r2, r2, r3
   20c10:	mov	r0, r4
   20c14:	sub	r3, r5, r3
   20c18:	str	r2, [sp, #8]
   20c1c:	str	r3, [sp, #4]
   20c20:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   20c24:	cmp	r0, #0
   20c28:	bne	20c44 <flatcc_builder_create_buffer@@Base+0x1ac>
   20c2c:	ldr	r3, [pc, #28]	; 20c50 <flatcc_builder_create_buffer@@Base+0x1b8>
   20c30:	mov	r2, #772	; 0x304
   20c34:	ldr	r1, [pc, #24]	; 20c54 <flatcc_builder_create_buffer@@Base+0x1bc>
   20c38:	ldr	r0, [pc, #24]	; 20c58 <flatcc_builder_create_buffer@@Base+0x1c0>
   20c3c:	bl	14648 <__assert_fail@plt>
   20c40:	mov	r0, r7
   20c44:	add	sp, sp, #92	; 0x5c
   20c48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20c4c:	strdeq	r1, [r3], -r4
   20c50:	muleq	r3, r9, r7
   20c54:	ldrdeq	r1, [r3], -sl
   20c58:	andeq	r1, r3, r7, asr #24

00020c5c <flatcc_builder_create_struct@@Base>:
   20c5c:	cmp	r3, #0
   20c60:	push	{lr}		; (str lr, [sp, #-4]!)
   20c64:	sub	sp, sp, #76	; 0x4c
   20c68:	bne	20c80 <flatcc_builder_create_struct@@Base+0x24>
   20c6c:	ldr	r3, [pc, #144]	; 20d04 <flatcc_builder_create_struct@@Base+0xa8>
   20c70:	ldr	r2, [pc, #144]	; 20d08 <flatcc_builder_create_struct@@Base+0xac>
   20c74:	ldr	r1, [pc, #144]	; 20d0c <flatcc_builder_create_struct@@Base+0xb0>
   20c78:	ldr	r0, [pc, #144]	; 20d10 <flatcc_builder_create_struct@@Base+0xb4>
   20c7c:	bl	14648 <__assert_fail@plt>
   20c80:	ldrh	ip, [r0, #128]	; 0x80
   20c84:	cmp	ip, r3
   20c88:	ldr	ip, [r0, #136]	; 0x88
   20c8c:	strhcc	r3, [r0, #128]	; 0x80
   20c90:	sub	ip, ip, r2
   20c94:	sub	r3, r3, #1
   20c98:	and	r3, r3, ip
   20c9c:	mov	ip, #0
   20ca0:	cmp	r2, ip
   20ca4:	strne	r2, [sp, #12]
   20ca8:	str	ip, [sp]
   20cac:	strne	r2, [sp]
   20cb0:	movne	r2, #1
   20cb4:	str	ip, [sp, #4]
   20cb8:	strne	r1, [sp, #8]
   20cbc:	strne	r2, [sp, #4]
   20cc0:	cmp	r3, #0
   20cc4:	beq	20cf4 <flatcc_builder_create_struct@@Base+0x98>
   20cc8:	ldr	r2, [sp]
   20ccc:	add	r1, sp, #72	; 0x48
   20cd0:	add	r2, r2, r3
   20cd4:	str	r2, [sp]
   20cd8:	ldr	r2, [sp, #4]
   20cdc:	ldr	ip, [pc, #48]	; 20d14 <flatcc_builder_create_struct@@Base+0xb8>
   20ce0:	add	r2, r2, #1
   20ce4:	str	r2, [sp, #4]
   20ce8:	add	r1, r1, r2, lsl #3
   20cec:	str	ip, [r1, #-72]	; 0xffffffb8
   20cf0:	str	r3, [r1, #-68]	; 0xffffffbc
   20cf4:	mov	r1, sp
   20cf8:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   20cfc:	add	sp, sp, #76	; 0x4c
   20d00:	pop	{pc}		; (ldr pc, [sp], #4)
   20d04:			; <UNDEFINED> instruction: 0x000317b6
   20d08:	andeq	r0, r0, pc, lsl #6
   20d0c:	ldrdeq	r1, [r3], -sl
   20d10:	andeq	r1, r3, r1, lsr #25
   20d14:	strdeq	r1, [r3], -r4

00020d18 <flatcc_builder_start_buffer@@Base>:
   20d18:	push	{r4, r5, r6, r7, r8, lr}
   20d1c:	mov	r5, r1
   20d20:	ldrh	r1, [r0, #128]	; 0x80
   20d24:	mov	r4, r0
   20d28:	mov	r7, r2
   20d2c:	mov	r6, r3
   20d30:	bl	200a4 <flatcc_builder_default_alloc@@Base+0x168>
   20d34:	cmp	r0, #0
   20d38:	bne	20dac <flatcc_builder_start_buffer@@Base+0x94>
   20d3c:	ldrh	r3, [r4, #132]	; 0x84
   20d40:	ldr	ip, [r4, #32]
   20d44:	mov	r1, #1
   20d48:	strh	r1, [r4, #128]	; 0x80
   20d4c:	strh	r3, [ip, #34]	; 0x22
   20d50:	ldrh	r3, [r4, #164]	; 0xa4
   20d54:	strh	r7, [r4, #132]	; 0x84
   20d58:	cmp	r5, #0
   20d5c:	strh	r3, [ip, #32]
   20d60:	ldr	r3, [r4, #144]	; 0x90
   20d64:	strh	r6, [r4, #164]	; 0xa4
   20d68:	str	r3, [ip, #20]
   20d6c:	ldr	r3, [r4, #152]	; 0x98
   20d70:	str	r3, [ip, #28]
   20d74:	ldr	r3, [r4, #136]	; 0x88
   20d78:	str	r3, [r4, #144]	; 0x90
   20d7c:	ldr	r3, [r4, #148]	; 0x94
   20d80:	str	r3, [r4, #152]	; 0x98
   20d84:	add	r2, r3, r1
   20d88:	ldr	r3, [r4, #168]	; 0xa8
   20d8c:	str	r2, [r4, #148]	; 0x94
   20d90:	str	r3, [ip, #16]
   20d94:	ldr	r3, [pc, #24]	; 20db4 <flatcc_builder_start_buffer@@Base+0x9c>
   20d98:	moveq	r5, r3
   20d9c:	ldr	r3, [r5]
   20da0:	str	r3, [r4, #168]	; 0xa8
   20da4:	strh	r1, [ip, #14]
   20da8:	pop	{r4, r5, r6, r7, r8, pc}
   20dac:	mvn	r0, #0
   20db0:	pop	{r4, r5, r6, r7, r8, pc}
   20db4:	strdeq	r1, [r3], -r4

00020db8 <flatcc_builder_end_buffer@@Base>:
   20db8:	push	{r0, r1, r2, r4, r5, lr}
   20dbc:	mov	r4, r0
   20dc0:	ldrh	r0, [r0, #164]	; 0xa4
   20dc4:	ldr	r2, [r4, #152]	; 0x98
   20dc8:	and	r0, r0, #2
   20dcc:	cmp	r2, #0
   20dd0:	orrne	r0, r0, #1
   20dd4:	ldr	r2, [r4, #32]
   20dd8:	ldrh	r2, [r2, #14]
   20ddc:	cmp	r2, #1
   20de0:	beq	20df8 <flatcc_builder_end_buffer@@Base+0x40>
   20de4:	ldr	r3, [pc, #120]	; 20e64 <flatcc_builder_end_buffer@@Base+0xac>
   20de8:	ldr	r2, [pc, #120]	; 20e68 <flatcc_builder_end_buffer@@Base+0xb0>
   20dec:	ldr	r1, [pc, #120]	; 20e6c <flatcc_builder_end_buffer@@Base+0xb4>
   20df0:	ldr	r0, [pc, #120]	; 20e70 <flatcc_builder_end_buffer@@Base+0xb8>
   20df4:	bl	14648 <__assert_fail@plt>
   20df8:	ldrh	r2, [r4, #132]	; 0x84
   20dfc:	mov	r3, r1
   20e00:	ldrh	r1, [r4, #128]	; 0x80
   20e04:	str	r0, [sp, #4]
   20e08:	mov	r0, r4
   20e0c:	cmp	r1, r2
   20e10:	strhcc	r2, [r4, #128]	; 0x80
   20e14:	ldrh	r1, [r4, #128]	; 0x80
   20e18:	str	r1, [sp]
   20e1c:	add	r1, r4, #168	; 0xa8
   20e20:	bl	20a98 <flatcc_builder_create_buffer@@Base>
   20e24:	subs	r5, r0, #0
   20e28:	beq	20e58 <flatcc_builder_end_buffer@@Base+0xa0>
   20e2c:	ldr	r3, [r4, #32]
   20e30:	mov	r0, r4
   20e34:	ldr	r2, [r3, #20]
   20e38:	str	r2, [r4, #144]	; 0x90
   20e3c:	ldr	r2, [r3, #28]
   20e40:	str	r2, [r4, #152]	; 0x98
   20e44:	ldr	r2, [r3, #16]
   20e48:	str	r2, [r4, #168]	; 0xa8
   20e4c:	ldrh	r3, [r3, #32]
   20e50:	strh	r3, [r4, #164]	; 0xa4
   20e54:	bl	1fe30 <union_vector_tests@@Base+0x214>
   20e58:	mov	r0, r5
   20e5c:	add	sp, sp, #12
   20e60:	pop	{r4, r5, pc}
   20e64:	ldrdeq	r1, [r3], -r3
   20e68:	andeq	r0, r0, r6, asr #6
   20e6c:	ldrdeq	r1, [r3], -sl
   20e70:	andeq	r1, r3, ip, lsr #25

00020e74 <flatcc_builder_start_struct@@Base>:
   20e74:	push	{r4, r5, r6, lr}
   20e78:	mov	r5, r1
   20e7c:	mov	r1, r2
   20e80:	mov	r4, r0
   20e84:	bl	200a4 <flatcc_builder_default_alloc@@Base+0x168>
   20e88:	cmp	r0, #0
   20e8c:	bne	20eb8 <flatcc_builder_start_struct@@Base+0x44>
   20e90:	ldr	r3, [r4, #32]
   20e94:	mov	r2, #2
   20e98:	mov	r0, r4
   20e9c:	mvn	r1, #3
   20ea0:	strh	r2, [r3, #14]
   20ea4:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   20ea8:	mov	r1, r5
   20eac:	mov	r0, r4
   20eb0:	pop	{r4, r5, r6, lr}
   20eb4:	b	1fde8 <union_vector_tests@@Base+0x1cc>
   20eb8:	mov	r0, #0
   20ebc:	pop	{r4, r5, r6, pc}

00020ec0 <flatcc_builder_struct_edit@@Base>:
   20ec0:	ldr	r0, [r0, #16]
   20ec4:	bx	lr

00020ec8 <flatcc_builder_end_struct@@Base>:
   20ec8:	ldr	r3, [r0, #32]
   20ecc:	push	{r4, r5, r6, lr}
   20ed0:	ldrh	r3, [r3, #14]
   20ed4:	cmp	r3, #2
   20ed8:	beq	20ef0 <flatcc_builder_end_struct@@Base+0x28>
   20edc:	ldr	r3, [pc, #56]	; 20f1c <flatcc_builder_end_struct@@Base+0x54>
   20ee0:	mov	r2, #872	; 0x368
   20ee4:	ldr	r1, [pc, #52]	; 20f20 <flatcc_builder_end_struct@@Base+0x58>
   20ee8:	ldr	r0, [pc, #52]	; 20f24 <flatcc_builder_end_struct@@Base+0x5c>
   20eec:	bl	14648 <__assert_fail@plt>
   20ef0:	ldrh	r3, [r0, #130]	; 0x82
   20ef4:	ldr	r2, [r0, #20]
   20ef8:	ldr	r1, [r0, #16]
   20efc:	mov	r4, r0
   20f00:	bl	20c5c <flatcc_builder_create_struct@@Base>
   20f04:	subs	r5, r0, #0
   20f08:	beq	20f14 <flatcc_builder_end_struct@@Base+0x4c>
   20f0c:	mov	r0, r4
   20f10:	bl	1fe30 <union_vector_tests@@Base+0x214>
   20f14:	mov	r0, r5
   20f18:	pop	{r4, r5, r6, pc}
   20f1c:	andeq	r1, r3, sp, ror #15
   20f20:	ldrdeq	r1, [r3], -sl
   20f24:	ldrdeq	r1, [r3], -r8

00020f28 <flatcc_builder_extend_vector@@Base>:
   20f28:	push	{r4, r5, r6, lr}
   20f2c:	mov	r4, r0
   20f30:	ldr	r0, [r0, #32]
   20f34:	mov	r5, r1
   20f38:	ldr	r2, [r0, #24]
   20f3c:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   20f40:	cmp	r0, #0
   20f44:	bne	20f60 <flatcc_builder_extend_vector@@Base+0x38>
   20f48:	ldr	r3, [r4, #32]
   20f4c:	mov	r0, r4
   20f50:	ldr	r1, [r3, #16]
   20f54:	mul	r1, r1, r5
   20f58:	pop	{r4, r5, r6, lr}
   20f5c:	b	1fde8 <union_vector_tests@@Base+0x1cc>
   20f60:	mov	r0, #0
   20f64:	pop	{r4, r5, r6, pc}

00020f68 <flatcc_builder_vector_push@@Base>:
   20f68:	ldr	r3, [r0, #32]
   20f6c:	push	{r4, lr}
   20f70:	ldrh	r2, [r3, #14]
   20f74:	cmp	r2, #4
   20f78:	beq	20f90 <flatcc_builder_vector_push@@Base+0x28>
   20f7c:	ldr	r3, [pc, #64]	; 20fc4 <flatcc_builder_vector_push@@Base+0x5c>
   20f80:	ldr	r2, [pc, #64]	; 20fc8 <flatcc_builder_vector_push@@Base+0x60>
   20f84:	ldr	r1, [pc, #64]	; 20fcc <flatcc_builder_vector_push@@Base+0x64>
   20f88:	ldr	r0, [pc, #64]	; 20fd0 <flatcc_builder_vector_push@@Base+0x68>
   20f8c:	bl	14648 <__assert_fail@plt>
   20f90:	ldr	r2, [r3, #20]
   20f94:	ldr	ip, [r3, #24]
   20f98:	cmp	r2, ip
   20f9c:	ldrhi	r3, [pc, #32]	; 20fc4 <flatcc_builder_vector_push@@Base+0x5c>
   20fa0:	movhi	r2, #908	; 0x38c
   20fa4:	ldrhi	r1, [pc, #32]	; 20fcc <flatcc_builder_vector_push@@Base+0x64>
   20fa8:	ldrhi	r0, [pc, #36]	; 20fd4 <flatcc_builder_vector_push@@Base+0x6c>
   20fac:	bhi	20f8c <flatcc_builder_vector_push@@Base+0x24>
   20fb0:	add	r2, r2, #1
   20fb4:	str	r2, [r3, #20]
   20fb8:	ldr	r2, [r3, #16]
   20fbc:	pop	{r4, lr}
   20fc0:	b	1febc <union_vector_tests@@Base+0x2a0>
   20fc4:	andeq	r1, r3, r7, lsl #16
   20fc8:	andeq	r0, r0, fp, lsl #7
   20fcc:	ldrdeq	r1, [r3], -sl
   20fd0:	andeq	r1, r3, r4, lsl #26
   20fd4:	andeq	r1, r3, r0, lsr sp

00020fd8 <flatcc_builder_append_vector@@Base>:
   20fd8:	push	{r4, r5, r6, lr}
   20fdc:	mov	r4, r0
   20fe0:	ldr	r0, [r0, #32]
   20fe4:	ldrh	r3, [r0, #14]
   20fe8:	cmp	r3, #4
   20fec:	beq	21004 <flatcc_builder_append_vector@@Base+0x2c>
   20ff0:	ldr	r3, [pc, #76]	; 21044 <flatcc_builder_append_vector@@Base+0x6c>
   20ff4:	ldr	r2, [pc, #76]	; 21048 <flatcc_builder_append_vector@@Base+0x70>
   20ff8:	ldr	r1, [pc, #76]	; 2104c <flatcc_builder_append_vector@@Base+0x74>
   20ffc:	ldr	r0, [pc, #76]	; 21050 <flatcc_builder_append_vector@@Base+0x78>
   21000:	bl	14648 <__assert_fail@plt>
   21004:	mov	r5, r2
   21008:	mov	r6, r1
   2100c:	ldr	r2, [r0, #24]
   21010:	mov	r1, r5
   21014:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   21018:	cmp	r0, #0
   2101c:	bne	2103c <flatcc_builder_append_vector@@Base+0x64>
   21020:	ldr	r3, [r4, #32]
   21024:	mov	r1, r6
   21028:	mov	r0, r4
   2102c:	ldr	r2, [r3, #16]
   21030:	mul	r2, r2, r5
   21034:	pop	{r4, r5, r6, lr}
   21038:	b	1febc <union_vector_tests@@Base+0x2a0>
   2103c:	mov	r0, #0
   21040:	pop	{r4, r5, r6, pc}
   21044:	andeq	r1, r3, r2, lsr #16
   21048:	muleq	r0, r3, r3
   2104c:	ldrdeq	r1, [r3], -sl
   21050:	andeq	r1, r3, r4, lsl #26

00021054 <flatcc_builder_extend_offset_vector@@Base>:
   21054:	push	{r4, r5, r6, lr}
   21058:	mvn	r2, #-1073741824	; 0xc0000000
   2105c:	mov	r4, r0
   21060:	ldr	r0, [r0, #32]
   21064:	mov	r5, r1
   21068:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   2106c:	cmp	r0, #0
   21070:	bne	21084 <flatcc_builder_extend_offset_vector@@Base+0x30>
   21074:	lsl	r1, r5, #2
   21078:	mov	r0, r4
   2107c:	pop	{r4, r5, r6, lr}
   21080:	b	1fde8 <union_vector_tests@@Base+0x1cc>
   21084:	mov	r0, #0
   21088:	pop	{r4, r5, r6, pc}

0002108c <flatcc_builder_offset_vector_push@@Base>:
   2108c:	ldr	r2, [r0, #32]
   21090:	push	{r4, lr}
   21094:	ldrh	r3, [r2, #14]
   21098:	cmp	r3, #5
   2109c:	beq	210b4 <flatcc_builder_offset_vector_push@@Base+0x28>
   210a0:	ldr	r3, [pc, #64]	; 210e8 <flatcc_builder_offset_vector_push@@Base+0x5c>
   210a4:	ldr	r2, [pc, #64]	; 210ec <flatcc_builder_offset_vector_push@@Base+0x60>
   210a8:	ldr	r1, [pc, #64]	; 210f0 <flatcc_builder_offset_vector_push@@Base+0x64>
   210ac:	ldr	r0, [pc, #64]	; 210f4 <flatcc_builder_offset_vector_push@@Base+0x68>
   210b0:	bl	14648 <__assert_fail@plt>
   210b4:	ldr	r3, [r2, #20]
   210b8:	cmn	r3, #-1073741823	; 0xc0000001
   210bc:	beq	210e0 <flatcc_builder_offset_vector_push@@Base+0x54>
   210c0:	add	r3, r3, #1
   210c4:	mov	r4, r1
   210c8:	str	r3, [r2, #20]
   210cc:	mov	r1, #4
   210d0:	bl	1fde8 <union_vector_tests@@Base+0x1cc>
   210d4:	cmp	r0, #0
   210d8:	strne	r4, [r0]
   210dc:	pop	{r4, pc}
   210e0:	mov	r0, #0
   210e4:	pop	{r4, pc}
   210e8:	andeq	r1, r3, pc, lsr r8
   210ec:	andeq	r0, r0, r6, lsr #7
   210f0:	ldrdeq	r1, [r3], -sl
   210f4:	andeq	r1, r3, sp, ror #26

000210f8 <flatcc_builder_append_offset_vector@@Base>:
   210f8:	push	{r4, r5, r6, lr}
   210fc:	mov	r4, r0
   21100:	ldr	r0, [r0, #32]
   21104:	ldrh	r3, [r0, #14]
   21108:	cmp	r3, #5
   2110c:	beq	21124 <flatcc_builder_append_offset_vector@@Base+0x2c>
   21110:	ldr	r3, [pc, #68]	; 2115c <flatcc_builder_append_offset_vector@@Base+0x64>
   21114:	mov	r2, #948	; 0x3b4
   21118:	ldr	r1, [pc, #64]	; 21160 <flatcc_builder_append_offset_vector@@Base+0x68>
   2111c:	ldr	r0, [pc, #64]	; 21164 <flatcc_builder_append_offset_vector@@Base+0x6c>
   21120:	bl	14648 <__assert_fail@plt>
   21124:	mov	r5, r2
   21128:	mov	r6, r1
   2112c:	mvn	r2, #-1073741824	; 0xc0000000
   21130:	mov	r1, r5
   21134:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   21138:	cmp	r0, #0
   2113c:	bne	21154 <flatcc_builder_append_offset_vector@@Base+0x5c>
   21140:	lsl	r2, r5, #2
   21144:	mov	r1, r6
   21148:	mov	r0, r4
   2114c:	pop	{r4, r5, r6, lr}
   21150:	b	1febc <union_vector_tests@@Base+0x2a0>
   21154:	mov	r0, #0
   21158:	pop	{r4, r5, r6, pc}
   2115c:	andeq	r1, r3, r1, ror #16
   21160:	ldrdeq	r1, [r3], -sl
   21164:	andeq	r1, r3, sp, ror #26

00021168 <flatcc_builder_extend_string@@Base>:
   21168:	push	{r4, r5, r6, lr}
   2116c:	mov	r4, r0
   21170:	ldr	r0, [r0, #32]
   21174:	ldrh	r3, [r0, #14]
   21178:	cmp	r3, #6
   2117c:	beq	21194 <flatcc_builder_extend_string@@Base+0x2c>
   21180:	ldr	r3, [pc, #56]	; 211c0 <flatcc_builder_extend_string@@Base+0x58>
   21184:	ldr	r2, [pc, #56]	; 211c4 <flatcc_builder_extend_string@@Base+0x5c>
   21188:	ldr	r1, [pc, #56]	; 211c8 <flatcc_builder_extend_string@@Base+0x60>
   2118c:	ldr	r0, [pc, #56]	; 211cc <flatcc_builder_extend_string@@Base+0x64>
   21190:	bl	14648 <__assert_fail@plt>
   21194:	mvn	r2, #0
   21198:	mov	r5, r1
   2119c:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   211a0:	cmp	r0, #0
   211a4:	bne	211b8 <flatcc_builder_extend_string@@Base+0x50>
   211a8:	mov	r1, r5
   211ac:	mov	r0, r4
   211b0:	pop	{r4, r5, r6, lr}
   211b4:	b	1fde8 <union_vector_tests@@Base+0x1cc>
   211b8:	mov	r0, #0
   211bc:	pop	{r4, r5, r6, pc}
   211c0:	andeq	r1, r3, r5, lsl #17
   211c4:			; <UNDEFINED> instruction: 0x000003bd
   211c8:	ldrdeq	r1, [r3], -sl
   211cc:	andeq	r1, r3, r0, lsr #27

000211d0 <flatcc_builder_append_string@@Base>:
   211d0:	push	{r4, r5, r6, lr}
   211d4:	mov	r4, r0
   211d8:	ldr	r0, [r0, #32]
   211dc:	ldrh	r3, [r0, #14]
   211e0:	cmp	r3, #6
   211e4:	beq	211fc <flatcc_builder_append_string@@Base+0x2c>
   211e8:	ldr	r3, [pc, #68]	; 21234 <flatcc_builder_append_string@@Base+0x64>
   211ec:	ldr	r2, [pc, #68]	; 21238 <flatcc_builder_append_string@@Base+0x68>
   211f0:	ldr	r1, [pc, #68]	; 2123c <flatcc_builder_append_string@@Base+0x6c>
   211f4:	ldr	r0, [pc, #68]	; 21240 <flatcc_builder_append_string@@Base+0x70>
   211f8:	bl	14648 <__assert_fail@plt>
   211fc:	mov	r5, r2
   21200:	mov	r6, r1
   21204:	mvn	r2, #0
   21208:	mov	r1, r5
   2120c:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   21210:	cmp	r0, #0
   21214:	bne	2122c <flatcc_builder_append_string@@Base+0x5c>
   21218:	mov	r2, r5
   2121c:	mov	r1, r6
   21220:	mov	r0, r4
   21224:	pop	{r4, r5, r6, lr}
   21228:	b	1febc <union_vector_tests@@Base+0x2a0>
   2122c:	mov	r0, #0
   21230:	pop	{r4, r5, r6, pc}
   21234:	andeq	r1, r3, r2, lsr #17
   21238:	andeq	r0, r0, r6, asr #7
   2123c:	ldrdeq	r1, [r3], -sl
   21240:	andeq	r1, r3, r0, lsr #27

00021244 <flatcc_builder_append_string_str@@Base>:
   21244:	push	{r4, r5, r6, lr}
   21248:	mov	r5, r0
   2124c:	mov	r0, r1
   21250:	mov	r4, r1
   21254:	bl	145c4 <strlen@plt>
   21258:	mov	r1, r4
   2125c:	mov	r2, r0
   21260:	mov	r0, r5
   21264:	pop	{r4, r5, r6, lr}
   21268:	b	211d0 <flatcc_builder_append_string@@Base>

0002126c <flatcc_builder_append_string_strn@@Base>:
   2126c:	push	{r4, r5, r6, lr}
   21270:	mov	r4, r1
   21274:	mov	r6, r0
   21278:	mov	r1, #0
   2127c:	mov	r0, r4
   21280:	mov	r5, r2
   21284:	bl	1460c <memchr@plt>
   21288:	mov	r1, r4
   2128c:	cmp	r0, #0
   21290:	subne	r5, r0, r4
   21294:	mov	r2, r5
   21298:	mov	r0, r6
   2129c:	pop	{r4, r5, r6, lr}
   212a0:	b	211d0 <flatcc_builder_append_string@@Base>

000212a4 <flatcc_builder_truncate_vector@@Base>:
   212a4:	ldr	r3, [r0, #32]
   212a8:	push	{r4, lr}
   212ac:	ldrh	r2, [r3, #14]
   212b0:	cmp	r2, #4
   212b4:	beq	212cc <flatcc_builder_truncate_vector@@Base+0x28>
   212b8:	ldr	r3, [pc, #68]	; 21304 <flatcc_builder_truncate_vector@@Base+0x60>
   212bc:	ldr	r2, [pc, #68]	; 21308 <flatcc_builder_truncate_vector@@Base+0x64>
   212c0:	ldr	r1, [pc, #68]	; 2130c <flatcc_builder_truncate_vector@@Base+0x68>
   212c4:	ldr	r0, [pc, #68]	; 21310 <flatcc_builder_truncate_vector@@Base+0x6c>
   212c8:	bl	14648 <__assert_fail@plt>
   212cc:	ldr	r2, [r3, #20]
   212d0:	cmp	r2, r1
   212d4:	ldrcc	r3, [pc, #40]	; 21304 <flatcc_builder_truncate_vector@@Base+0x60>
   212d8:	ldrcc	r2, [pc, #52]	; 21314 <flatcc_builder_truncate_vector@@Base+0x70>
   212dc:	ldrcc	r1, [pc, #40]	; 2130c <flatcc_builder_truncate_vector@@Base+0x68>
   212e0:	ldrcc	r0, [pc, #48]	; 21318 <flatcc_builder_truncate_vector@@Base+0x74>
   212e4:	bcc	212c8 <flatcc_builder_truncate_vector@@Base+0x24>
   212e8:	sub	r2, r2, r1
   212ec:	str	r2, [r3, #20]
   212f0:	ldr	r3, [r3, #16]
   212f4:	mul	r1, r3, r1
   212f8:	bl	1fe9c <union_vector_tests@@Base+0x280>
   212fc:	mov	r0, #0
   21300:	pop	{r4, pc}
   21304:			; <UNDEFINED> instruction: 0x000318bf
   21308:	ldrdeq	r0, [r0], -r9
   2130c:	ldrdeq	r1, [r3], -sl
   21310:	andeq	r1, r3, r4, lsl #26
   21314:	ldrdeq	r0, [r0], -sl
   21318:	andeq	r1, r3, ip, asr #27

0002131c <flatcc_builder_truncate_offset_vector@@Base>:
   2131c:	ldr	r3, [r0, #32]
   21320:	push	{r4, lr}
   21324:	ldrh	r2, [r3, #14]
   21328:	cmp	r2, #5
   2132c:	beq	21344 <flatcc_builder_truncate_offset_vector@@Base+0x28>
   21330:	ldr	r3, [pc, #68]	; 2137c <flatcc_builder_truncate_offset_vector@@Base+0x60>
   21334:	ldr	r2, [pc, #68]	; 21380 <flatcc_builder_truncate_offset_vector@@Base+0x64>
   21338:	ldr	r1, [pc, #68]	; 21384 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   2133c:	ldr	r0, [pc, #68]	; 21388 <flatcc_builder_truncate_offset_vector@@Base+0x6c>
   21340:	bl	14648 <__assert_fail@plt>
   21344:	ldr	r2, [r3, #20]
   21348:	cmp	r2, r1
   2134c:	ldrcc	r3, [pc, #40]	; 2137c <flatcc_builder_truncate_offset_vector@@Base+0x60>
   21350:	ldrcc	r2, [pc, #52]	; 2138c <flatcc_builder_truncate_offset_vector@@Base+0x70>
   21354:	ldrcc	r1, [pc, #40]	; 21384 <flatcc_builder_truncate_offset_vector@@Base+0x68>
   21358:	ldrcc	r0, [pc, #48]	; 21390 <flatcc_builder_truncate_offset_vector@@Base+0x74>
   2135c:	bcc	21340 <flatcc_builder_truncate_offset_vector@@Base+0x24>
   21360:	sub	r2, r2, r1
   21364:	str	r2, [r3, #20]
   21368:	ldr	r3, [r3, #16]
   2136c:	mul	r1, r3, r1
   21370:	bl	1fe9c <union_vector_tests@@Base+0x280>
   21374:	mov	r0, #0
   21378:	pop	{r4, pc}
   2137c:	ldrdeq	r1, [r3], -lr
   21380:	andeq	r0, r0, r2, ror #7
   21384:	ldrdeq	r1, [r3], -sl
   21388:	andeq	r1, r3, sp, ror #26
   2138c:	andeq	r0, r0, r3, ror #7
   21390:	strdeq	r1, [r3], -r0

00021394 <flatcc_builder_truncate_string@@Base>:
   21394:	ldr	r2, [r0, #32]
   21398:	push	{r4, lr}
   2139c:	ldrh	r3, [r2, #14]
   213a0:	cmp	r3, #6
   213a4:	beq	213bc <flatcc_builder_truncate_string@@Base+0x28>
   213a8:	ldr	r3, [pc, #60]	; 213ec <flatcc_builder_truncate_string@@Base+0x58>
   213ac:	ldr	r2, [pc, #60]	; 213f0 <flatcc_builder_truncate_string@@Base+0x5c>
   213b0:	ldr	r1, [pc, #60]	; 213f4 <flatcc_builder_truncate_string@@Base+0x60>
   213b4:	ldr	r0, [pc, #60]	; 213f8 <flatcc_builder_truncate_string@@Base+0x64>
   213b8:	bl	14648 <__assert_fail@plt>
   213bc:	ldr	r3, [r2, #20]
   213c0:	cmp	r3, r1
   213c4:	ldrcc	r3, [pc, #32]	; 213ec <flatcc_builder_truncate_string@@Base+0x58>
   213c8:	movcc	r2, #1004	; 0x3ec
   213cc:	ldrcc	r1, [pc, #32]	; 213f4 <flatcc_builder_truncate_string@@Base+0x60>
   213d0:	ldrcc	r0, [pc, #36]	; 213fc <flatcc_builder_truncate_string@@Base+0x68>
   213d4:	bcc	213b8 <flatcc_builder_truncate_string@@Base+0x24>
   213d8:	sub	r3, r3, r1
   213dc:	str	r3, [r2, #20]
   213e0:	bl	1fe9c <union_vector_tests@@Base+0x280>
   213e4:	mov	r0, #0
   213e8:	pop	{r4, pc}
   213ec:	andeq	r1, r3, r4, lsl #18
   213f0:	andeq	r0, r0, fp, ror #7
   213f4:	ldrdeq	r1, [r3], -sl
   213f8:	andeq	r1, r3, r0, lsr #27
   213fc:	andeq	r1, r3, fp, lsr #28

00021400 <flatcc_builder_start_vector@@Base>:
   21400:	cmp	r2, #4
   21404:	push	{r4, r5, r6, r7, r8, lr}
   21408:	mov	r7, r1
   2140c:	movcs	r1, r2
   21410:	movcc	r1, #4
   21414:	mov	r5, r0
   21418:	mov	r6, r3
   2141c:	bl	200a4 <flatcc_builder_default_alloc@@Base+0x168>
   21420:	subs	r4, r0, #0
   21424:	mvnne	r4, #0
   21428:	bne	21450 <flatcc_builder_start_vector@@Base+0x50>
   2142c:	ldr	r2, [r5, #32]
   21430:	mov	r3, #4
   21434:	mvn	r1, #3
   21438:	str	r7, [r2, #16]
   2143c:	str	r4, [r2, #20]
   21440:	str	r6, [r2, #24]
   21444:	strh	r3, [r2, #14]
   21448:	mov	r0, r5
   2144c:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   21450:	mov	r0, r4
   21454:	pop	{r4, r5, r6, r7, r8, pc}

00021458 <flatcc_builder_start_offset_vector@@Base>:
   21458:	push	{r4, r5, r6, lr}
   2145c:	mov	r1, #4
   21460:	mov	r5, r0
   21464:	bl	200a4 <flatcc_builder_default_alloc@@Base+0x168>
   21468:	subs	r4, r0, #0
   2146c:	mvnne	r4, #0
   21470:	bne	21498 <flatcc_builder_start_offset_vector@@Base+0x40>
   21474:	ldr	r3, [r5, #32]
   21478:	mov	r2, #4
   2147c:	mvn	r1, #3
   21480:	str	r2, [r3, #16]
   21484:	mov	r2, #5
   21488:	str	r4, [r3, #20]
   2148c:	strh	r2, [r3, #14]
   21490:	mov	r0, r5
   21494:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   21498:	mov	r0, r4
   2149c:	pop	{r4, r5, r6, pc}

000214a0 <flatcc_builder_start_string@@Base>:
   214a0:	push	{r4, r5, r6, lr}
   214a4:	mov	r1, #1
   214a8:	mov	r5, r0
   214ac:	bl	200a4 <flatcc_builder_default_alloc@@Base+0x168>
   214b0:	subs	r4, r0, #0
   214b4:	mvnne	r4, #0
   214b8:	bne	214e0 <flatcc_builder_start_string@@Base+0x40>
   214bc:	ldr	r3, [r5, #32]
   214c0:	mov	r2, #1
   214c4:	mvn	r1, #3
   214c8:	str	r2, [r3, #16]
   214cc:	mov	r2, #6
   214d0:	str	r4, [r3, #20]
   214d4:	strh	r2, [r3, #14]
   214d8:	mov	r0, r5
   214dc:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   214e0:	mov	r0, r4
   214e4:	pop	{r4, r5, r6, pc}

000214e8 <flatcc_builder_reserve_table@@Base>:
   214e8:	cmp	r1, #0
   214ec:	bge	21508 <flatcc_builder_reserve_table@@Base+0x20>
   214f0:	push	{r4, lr}
   214f4:	ldr	r3, [pc, #16]	; 2150c <flatcc_builder_reserve_table@@Base+0x24>
   214f8:	ldr	r2, [pc, #16]	; 21510 <flatcc_builder_reserve_table@@Base+0x28>
   214fc:	ldr	r1, [pc, #16]	; 21514 <flatcc_builder_reserve_table@@Base+0x2c>
   21500:	ldr	r0, [pc, #16]	; 21518 <flatcc_builder_reserve_table@@Base+0x30>
   21504:	bl	14648 <__assert_fail@plt>
   21508:	b	20184 <flatcc_builder_default_alloc@@Base+0x248>
   2150c:	andeq	r1, r3, r3, lsr #18
   21510:	andeq	r0, r0, r9, lsr #8
   21514:	ldrdeq	r1, [r3], -sl
   21518:	andeq	r1, r3, r3, ror #28

0002151c <flatcc_builder_start_table@@Base>:
   2151c:	push	{r4, r5, r6, lr}
   21520:	mov	r5, r1
   21524:	mov	r1, #4
   21528:	mov	r4, r0
   2152c:	bl	200a4 <flatcc_builder_default_alloc@@Base+0x168>
   21530:	cmp	r0, #0
   21534:	beq	21544 <flatcc_builder_start_table@@Base+0x28>
   21538:	mvn	r5, #0
   2153c:	mov	r0, r5
   21540:	pop	{r4, r5, r6, pc}
   21544:	ldr	r1, [r4, #52]	; 0x34
   21548:	ldr	r2, [r4, #4]
   2154c:	ldr	r3, [r4, #32]
   21550:	sub	r2, r2, r1
   21554:	str	r2, [r3, #16]
   21558:	ldr	r1, [r4, #76]	; 0x4c
   2155c:	ldr	r2, [r4]
   21560:	sub	r2, r2, r1
   21564:	str	r2, [r3, #20]
   21568:	ldr	r2, [r4, #12]
   2156c:	mov	r1, r5
   21570:	str	r2, [r3, #24]
   21574:	ldrh	r2, [r4, #8]
   21578:	strh	r2, [r3, #28]
   2157c:	ldr	r2, [pc, #44]	; 215b0 <flatcc_builder_start_table@@Base+0x94>
   21580:	strh	r0, [r4, #8]
   21584:	str	r2, [r4, #12]
   21588:	mov	r2, #3
   2158c:	strh	r2, [r3, #14]
   21590:	mov	r0, r4
   21594:	bl	20184 <flatcc_builder_default_alloc@@Base+0x248>
   21598:	subs	r5, r0, #0
   2159c:	bne	21538 <flatcc_builder_start_table@@Base+0x1c>
   215a0:	ldr	r1, [pc, #12]	; 215b4 <flatcc_builder_start_table@@Base+0x98>
   215a4:	mov	r0, r4
   215a8:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   215ac:	b	2153c <flatcc_builder_start_table@@Base+0x20>
   215b0:	svccs	0x00693b52
   215b4:	strdeq	pc, [r0], -ip

000215b8 <flatcc_builder_create_vtable@@Base>:
   215b8:	push	{lr}		; (str lr, [sp, #-4]!)
   215bc:	sub	sp, sp, #76	; 0x4c
   215c0:	cmp	r2, #0
   215c4:	mov	r3, #0
   215c8:	str	r3, [sp]
   215cc:	str	r3, [sp, #4]
   215d0:	movne	r3, #1
   215d4:	strne	r3, [sp, #4]
   215d8:	ldr	r3, [r0, #152]	; 0x98
   215dc:	strne	r1, [sp, #8]
   215e0:	strne	r2, [sp]
   215e4:	strne	r2, [sp, #12]
   215e8:	cmp	r3, #0
   215ec:	mov	r1, sp
   215f0:	bne	2160c <flatcc_builder_create_vtable@@Base+0x54>
   215f4:	ldr	r3, [r0, #180]	; 0xb4
   215f8:	cmp	r3, #0
   215fc:	bne	2160c <flatcc_builder_create_vtable@@Base+0x54>
   21600:	bl	20208 <flatcc_builder_default_alloc@@Base+0x2cc>
   21604:	add	sp, sp, #76	; 0x4c
   21608:	pop	{pc}		; (ldr pc, [sp], #4)
   2160c:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   21610:	cmp	r0, #0
   21614:	addne	r0, r0, #1
   21618:	b	21604 <flatcc_builder_create_vtable@@Base+0x4c>

0002161c <flatcc_builder_create_cached_vtable@@Base>:
   2161c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21620:	mov	r4, r0
   21624:	ldr	r5, [r0, #116]	; 0x74
   21628:	sub	sp, sp, #20
   2162c:	cmp	r5, #0
   21630:	mov	fp, r1
   21634:	mov	r7, r2
   21638:	mov	r6, r3
   2163c:	bne	216e4 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   21640:	ldr	r3, [r0, #124]	; 0x7c
   21644:	add	r9, r0, #92	; 0x5c
   21648:	cmp	r3, #0
   2164c:	beq	21664 <flatcc_builder_create_cached_vtable@@Base+0x48>
   21650:	ldr	r3, [pc, #556]	; 21884 <flatcc_builder_create_cached_vtable@@Base+0x268>
   21654:	ldr	r2, [pc, #556]	; 21888 <flatcc_builder_create_cached_vtable@@Base+0x26c>
   21658:	ldr	r1, [pc, #556]	; 2188c <flatcc_builder_create_cached_vtable@@Base+0x270>
   2165c:	ldr	r0, [pc, #556]	; 21890 <flatcc_builder_create_cached_vtable@@Base+0x274>
   21660:	bl	14648 <__assert_fail@plt>
   21664:	str	r5, [sp]
   21668:	mov	r3, #16
   2166c:	mov	r2, r5
   21670:	mov	r1, #6
   21674:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   21678:	cmp	r0, #0
   2167c:	beq	216b8 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   21680:	mov	r3, #16
   21684:	str	r3, [r4, #124]	; 0x7c
   21688:	mov	r3, #5
   2168c:	str	r3, [sp]
   21690:	mov	r1, r9
   21694:	mov	r3, #1
   21698:	ldr	r8, [r4, #48]	; 0x30
   2169c:	mov	r2, #256	; 0x100
   216a0:	ldr	r0, [r4, #40]	; 0x28
   216a4:	blx	r8
   216a8:	cmp	r0, #0
   216ac:	moveq	r3, #256	; 0x100
   216b0:	ldreq	r1, [r4, #96]	; 0x60
   216b4:	beq	216c4 <flatcc_builder_create_cached_vtable@@Base+0xa8>
   216b8:	mov	r0, #0
   216bc:	b	21834 <flatcc_builder_create_cached_vtable@@Base+0x218>
   216c0:	mov	r3, r2
   216c4:	lsl	r2, r3, #1
   216c8:	cmp	r2, r1
   216cc:	bls	216c0 <flatcc_builder_create_cached_vtable@@Base+0xa4>
   216d0:	lsr	r3, r3, #2
   216d4:	mov	r2, #1
   216d8:	cmp	r3, r2, lsl r5
   216dc:	bhi	217a4 <flatcc_builder_create_cached_vtable@@Base+0x188>
   216e0:	str	r5, [r4, #116]	; 0x74
   216e4:	ldr	r3, [r4, #116]	; 0x74
   216e8:	ldr	r8, [r4, #92]	; 0x5c
   216ec:	rsb	r3, r3, #32
   216f0:	lsr	r6, r6, r3
   216f4:	adds	r3, r8, r6, lsl #2
   216f8:	str	r3, [sp, #8]
   216fc:	ldrne	r9, [r8, r6, lsl #2]
   21700:	movne	sl, #0
   21704:	beq	216b8 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   21708:	cmp	r9, #0
   2170c:	bne	217ac <flatcc_builder_create_cached_vtable@@Base+0x190>
   21710:	str	r9, [sp]
   21714:	mov	r3, #16
   21718:	ldr	r2, [r4, #124]	; 0x7c
   2171c:	mov	r1, #6
   21720:	mov	r0, r4
   21724:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   21728:	subs	r5, r0, #0
   2172c:	beq	216b8 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   21730:	ldr	r3, [r4, #124]	; 0x7c
   21734:	mov	r1, fp
   21738:	add	r2, r3, #16
   2173c:	str	r2, [r4, #124]	; 0x7c
   21740:	ldr	r2, [r4, #152]	; 0x98
   21744:	mov	r0, r4
   21748:	str	r2, [r5, #4]
   2174c:	ldr	r2, [r8, r6, lsl #2]
   21750:	str	r2, [r5, #12]
   21754:	str	r3, [r8, r6, lsl #2]
   21758:	mov	r2, r7
   2175c:	bl	215b8 <flatcc_builder_create_vtable@@Base>
   21760:	cmp	r0, #0
   21764:	str	r0, [r5]
   21768:	beq	216b8 <flatcc_builder_create_cached_vtable@@Base+0x9c>
   2176c:	cmp	sl, #0
   21770:	ldrne	r3, [sl, #8]
   21774:	strne	r3, [r5, #8]
   21778:	bne	21830 <flatcc_builder_create_cached_vtable@@Base+0x214>
   2177c:	ldr	r2, [r4, #172]	; 0xac
   21780:	cmp	r2, #0
   21784:	beq	2183c <flatcc_builder_create_cached_vtable@@Base+0x220>
   21788:	ldr	r3, [r4, #120]	; 0x78
   2178c:	add	r3, r7, r3
   21790:	cmp	r2, r3
   21794:	bcs	2183c <flatcc_builder_create_cached_vtable@@Base+0x220>
   21798:	mov	r0, r4
   2179c:	bl	20578 <flatcc_builder_flush_vtable_cache@@Base>
   217a0:	b	21830 <flatcc_builder_create_cached_vtable@@Base+0x214>
   217a4:	add	r5, r5, #1
   217a8:	b	216d8 <flatcc_builder_create_cached_vtable@@Base+0xbc>
   217ac:	ldr	r5, [r4, #100]	; 0x64
   217b0:	ldr	r0, [r4, #68]	; 0x44
   217b4:	add	r5, r5, r9
   217b8:	ldr	r2, [r5, #8]
   217bc:	add	r1, r0, r2
   217c0:	ldrh	r2, [r0, r2]
   217c4:	cmp	r2, r7
   217c8:	bne	217e8 <flatcc_builder_create_cached_vtable@@Base+0x1cc>
   217cc:	mov	r2, r7
   217d0:	mov	r0, fp
   217d4:	str	r3, [sp, #12]
   217d8:	bl	1457c <memcmp@plt>
   217dc:	ldr	r3, [sp, #12]
   217e0:	cmp	r0, #0
   217e4:	beq	217fc <flatcc_builder_create_cached_vtable@@Base+0x1e0>
   217e8:	add	r3, r5, #12
   217ec:	ldr	r9, [r5, #12]
   217f0:	mov	r5, sl
   217f4:	mov	sl, r5
   217f8:	b	21708 <flatcc_builder_create_cached_vtable@@Base+0xec>
   217fc:	ldr	r1, [r5, #4]
   21800:	ldr	r2, [r4, #152]	; 0x98
   21804:	cmp	r1, r2
   21808:	addne	r3, r5, #12
   2180c:	ldrne	r9, [r5, #12]
   21810:	bne	217f4 <flatcc_builder_create_cached_vtable@@Base+0x1d8>
   21814:	ldr	r2, [sp, #8]
   21818:	cmp	r3, r2
   2181c:	ldrne	r2, [r5, #12]
   21820:	strne	r2, [r3]
   21824:	ldrne	r3, [r8, r6, lsl #2]
   21828:	strne	r3, [r5, #12]
   2182c:	strne	r9, [r8, r6, lsl #2]
   21830:	ldr	r0, [r5]
   21834:	add	sp, sp, #20
   21838:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2183c:	mov	r3, #0
   21840:	str	r3, [sp]
   21844:	ldr	r2, [r4, #120]	; 0x78
   21848:	mov	r3, r7
   2184c:	mov	r1, #2
   21850:	mov	r0, r4
   21854:	bl	20034 <flatcc_builder_default_alloc@@Base+0xf8>
   21858:	cmp	r0, #0
   2185c:	mvneq	r0, #0
   21860:	beq	21834 <flatcc_builder_create_cached_vtable@@Base+0x218>
   21864:	ldr	r3, [r4, #120]	; 0x78
   21868:	mov	r2, r7
   2186c:	str	r3, [r5, #8]
   21870:	add	r3, r7, r3
   21874:	str	r3, [r4, #120]	; 0x78
   21878:	mov	r1, fp
   2187c:	bl	14570 <memcpy@plt>
   21880:	b	21830 <flatcc_builder_create_cached_vtable@@Base+0x214>
   21884:	andeq	r1, r3, r0, asr #18
   21888:	andeq	r0, r0, r6, asr r1
   2188c:	ldrdeq	r1, [r3], -sl
   21890:	andeq	r1, r3, sp, asr #28

00021894 <flatcc_builder_create_table@@Base>:
   21894:	push	{r4, r5, r6, r7, lr}
   21898:	sub	sp, sp, #84	; 0x54
   2189c:	ldr	r4, [sp, #108]	; 0x6c
   218a0:	ldr	lr, [sp, #112]	; 0x70
   218a4:	cmp	r4, #0
   218a8:	bge	218c0 <flatcc_builder_create_table@@Base+0x2c>
   218ac:	ldr	r3, [pc, #268]	; 219c0 <flatcc_builder_create_table@@Base+0x12c>
   218b0:	ldr	r2, [pc, #268]	; 219c4 <flatcc_builder_create_table@@Base+0x130>
   218b4:	ldr	r1, [pc, #268]	; 219c8 <flatcc_builder_create_table@@Base+0x134>
   218b8:	ldr	r0, [pc, #268]	; 219cc <flatcc_builder_create_table@@Base+0x138>
   218bc:	bl	14648 <__assert_fail@plt>
   218c0:	tst	lr, #1
   218c4:	ldreq	r3, [pc, #244]	; 219c0 <flatcc_builder_create_table@@Base+0x12c>
   218c8:	ldreq	r2, [pc, #256]	; 219d0 <flatcc_builder_create_table@@Base+0x13c>
   218cc:	ldreq	r1, [pc, #244]	; 219c8 <flatcc_builder_create_table@@Base+0x134>
   218d0:	ldreq	r0, [pc, #252]	; 219d4 <flatcc_builder_create_table@@Base+0x140>
   218d4:	beq	218bc <flatcc_builder_create_table@@Base+0x28>
   218d8:	ldrh	ip, [r0, #128]	; 0x80
   218dc:	cmp	r3, #4
   218e0:	movcc	r3, #4
   218e4:	ldr	r6, [r0, #136]	; 0x88
   218e8:	cmp	ip, r3
   218ec:	mvn	r5, #3
   218f0:	sub	ip, r6, r2
   218f4:	strhcc	r3, [r0, #128]	; 0x80
   218f8:	sub	r3, r3, #1
   218fc:	and	r3, r3, ip
   21900:	sub	ip, r5, r2
   21904:	add	ip, ip, r6
   21908:	sub	ip, ip, r3
   2190c:	sub	lr, lr, #1
   21910:	sub	lr, ip, lr
   21914:	str	lr, [sp, #4]
   21918:	ldr	lr, [sp, #104]	; 0x68
   2191c:	sub	ip, r5, ip
   21920:	add	r4, lr, r4, lsl #1
   21924:	cmp	r4, lr
   21928:	bne	219a8 <flatcc_builder_create_table@@Base+0x114>
   2192c:	mov	ip, #4
   21930:	cmp	r2, #0
   21934:	str	ip, [sp, #8]
   21938:	add	lr, sp, ip
   2193c:	str	ip, [sp, #20]
   21940:	mov	ip, #1
   21944:	str	ip, [sp, #12]
   21948:	strne	r2, [sp, #28]
   2194c:	addne	ip, r2, #4
   21950:	movne	r2, #2
   21954:	strne	ip, [sp, #8]
   21958:	strne	r1, [sp, #24]
   2195c:	strne	r2, [sp, #12]
   21960:	cmp	r3, #0
   21964:	str	lr, [sp, #16]
   21968:	beq	21998 <flatcc_builder_create_table@@Base+0x104>
   2196c:	ldr	r2, [sp, #8]
   21970:	add	r1, sp, #80	; 0x50
   21974:	add	r2, r2, r3
   21978:	str	r2, [sp, #8]
   2197c:	ldr	r2, [sp, #12]
   21980:	ldr	ip, [pc, #80]	; 219d8 <flatcc_builder_create_table@@Base+0x144>
   21984:	add	r2, r2, #1
   21988:	str	r2, [sp, #12]
   2198c:	add	r1, r1, r2, lsl #3
   21990:	str	ip, [r1, #-72]	; 0xffffffb8
   21994:	str	r3, [r1, #-68]	; 0xffffffbc
   21998:	add	r1, sp, #8
   2199c:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   219a0:	add	sp, sp, #84	; 0x54
   219a4:	pop	{r4, r5, r6, r7, pc}
   219a8:	ldrh	r5, [lr], #2
   219ac:	sub	r7, ip, r5
   219b0:	ldr	r6, [r1, r5]
   219b4:	add	r6, r6, r7
   219b8:	str	r6, [r1, r5]
   219bc:	b	21924 <flatcc_builder_create_table@@Base+0x90>
   219c0:	andeq	r1, r3, r9, asr #18
   219c4:	ldrdeq	r0, [r0], -r5
   219c8:	ldrdeq	r1, [r3], -sl
   219cc:	andeq	r1, r3, ip, asr lr
   219d0:	ldrdeq	r0, [r0], -fp
   219d4:	andeq	r1, r3, lr, ror #28
   219d8:	strdeq	r1, [r3], -r4

000219dc <flatcc_builder_check_required_field@@Base>:
   219dc:	ldr	r3, [r0, #32]
   219e0:	ldrh	r3, [r3, #14]
   219e4:	cmp	r3, #3
   219e8:	beq	21a04 <flatcc_builder_check_required_field@@Base+0x28>
   219ec:	push	{r4, lr}
   219f0:	ldr	r3, [pc, #52]	; 21a2c <flatcc_builder_check_required_field@@Base+0x50>
   219f4:	ldr	r2, [pc, #52]	; 21a30 <flatcc_builder_check_required_field@@Base+0x54>
   219f8:	ldr	r1, [pc, #52]	; 21a34 <flatcc_builder_check_required_field@@Base+0x58>
   219fc:	ldr	r0, [pc, #52]	; 21a38 <flatcc_builder_check_required_field@@Base+0x5c>
   21a00:	bl	14648 <__assert_fail@plt>
   21a04:	ldrh	r3, [r0, #8]
   21a08:	cmp	r3, r1
   21a0c:	movls	r0, #0
   21a10:	bls	21a28 <flatcc_builder_check_required_field@@Base+0x4c>
   21a14:	ldr	r3, [r0, #4]
   21a18:	lsl	r1, r1, #1
   21a1c:	ldrh	r0, [r3, r1]
   21a20:	adds	r0, r0, #0
   21a24:	movne	r0, #1
   21a28:	bx	lr
   21a2c:	andeq	r1, r3, r5, ror #18
   21a30:	strdeq	r0, [r0], -r8
   21a34:	ldrdeq	r1, [r3], -sl
   21a38:	andeq	r1, r3, r9, ror lr

00021a3c <flatcc_builder_check_union_field@@Base>:
   21a3c:	ldr	r3, [r0, #32]
   21a40:	ldrh	r3, [r3, #14]
   21a44:	cmp	r3, #3
   21a48:	beq	21a64 <flatcc_builder_check_union_field@@Base+0x28>
   21a4c:	push	{r4, lr}
   21a50:	ldr	r3, [pc, #112]	; 21ac8 <flatcc_builder_check_union_field@@Base+0x8c>
   21a54:	ldr	r2, [pc, #112]	; 21acc <flatcc_builder_check_union_field@@Base+0x90>
   21a58:	ldr	r1, [pc, #112]	; 21ad0 <flatcc_builder_check_union_field@@Base+0x94>
   21a5c:	ldr	r0, [pc, #112]	; 21ad4 <flatcc_builder_check_union_field@@Base+0x98>
   21a60:	bl	14648 <__assert_fail@plt>
   21a64:	cmp	r1, #0
   21a68:	beq	21ac0 <flatcc_builder_check_union_field@@Base+0x84>
   21a6c:	ldrh	r3, [r0, #8]
   21a70:	cmp	r3, r1
   21a74:	bls	21ac0 <flatcc_builder_check_union_field@@Base+0x84>
   21a78:	sub	r1, r1, #-2147483647	; 0x80000001
   21a7c:	ldr	r3, [r0, #4]
   21a80:	lsl	r1, r1, #1
   21a84:	ldrh	r2, [r3, r1]!
   21a88:	cmp	r2, #0
   21a8c:	ldrheq	r0, [r3, #2]
   21a90:	beq	21ab4 <flatcc_builder_check_union_field@@Base+0x78>
   21a94:	ldr	r1, [r0, #16]
   21a98:	ldrh	r0, [r3, #2]
   21a9c:	ldrb	r2, [r1, r2]
   21aa0:	cmp	r2, #0
   21aa4:	beq	21ab4 <flatcc_builder_check_union_field@@Base+0x78>
   21aa8:	adds	r0, r0, #0
   21aac:	movne	r0, #1
   21ab0:	bx	lr
   21ab4:	clz	r0, r0
   21ab8:	lsr	r0, r0, #5
   21abc:	b	21ab0 <flatcc_builder_check_union_field@@Base+0x74>
   21ac0:	mov	r0, #0
   21ac4:	b	21ab0 <flatcc_builder_check_union_field@@Base+0x74>
   21ac8:	andeq	r1, r3, r9, lsl #19
   21acc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   21ad0:	ldrdeq	r1, [r3], -sl
   21ad4:	andeq	r1, r3, r9, ror lr

00021ad8 <flatcc_builder_check_required@@Base>:
   21ad8:	ldr	r3, [r0, #32]
   21adc:	push	{r4, lr}
   21ae0:	ldrh	r3, [r3, #14]
   21ae4:	cmp	r3, #3
   21ae8:	beq	21b00 <flatcc_builder_check_required@@Base+0x28>
   21aec:	ldr	r3, [pc, #84]	; 21b48 <flatcc_builder_check_required@@Base+0x70>
   21af0:	ldr	r2, [pc, #84]	; 21b4c <flatcc_builder_check_required@@Base+0x74>
   21af4:	ldr	r1, [pc, #84]	; 21b50 <flatcc_builder_check_required@@Base+0x78>
   21af8:	ldr	r0, [pc, #84]	; 21b54 <flatcc_builder_check_required@@Base+0x7c>
   21afc:	bl	14648 <__assert_fail@plt>
   21b00:	ldrh	r3, [r0, #8]
   21b04:	cmp	r3, r2
   21b08:	subge	r1, r1, #2
   21b0c:	movge	ip, #0
   21b10:	bge	21b38 <flatcc_builder_check_required@@Base+0x60>
   21b14:	mov	r0, #0
   21b18:	pop	{r4, pc}
   21b1c:	ldrh	r3, [r1, #2]!
   21b20:	ldr	lr, [r0, #4]
   21b24:	lsl	r3, r3, #1
   21b28:	ldrh	r3, [lr, r3]
   21b2c:	cmp	r3, #0
   21b30:	beq	21b14 <flatcc_builder_check_required@@Base+0x3c>
   21b34:	add	ip, ip, #1
   21b38:	cmp	ip, r2
   21b3c:	blt	21b1c <flatcc_builder_check_required@@Base+0x44>
   21b40:	mov	r0, #1
   21b44:	pop	{r4, pc}
   21b48:	andeq	r1, r3, sl, lsr #19
   21b4c:	andeq	r0, r0, r1, lsl r5
   21b50:	ldrdeq	r1, [r3], -sl
   21b54:	andeq	r1, r3, r9, ror lr

00021b58 <flatcc_builder_end_table@@Base>:
   21b58:	ldr	r3, [r0, #32]
   21b5c:	push	{r4, r5, r6, r7, lr}
   21b60:	sub	sp, sp, #20
   21b64:	ldrh	r3, [r3, #14]
   21b68:	cmp	r3, #3
   21b6c:	beq	21b84 <flatcc_builder_end_table@@Base+0x2c>
   21b70:	ldr	r3, [pc, #260]	; 21c7c <flatcc_builder_end_table@@Base+0x124>
   21b74:	ldr	r2, [pc, #260]	; 21c80 <flatcc_builder_end_table@@Base+0x128>
   21b78:	ldr	r1, [pc, #260]	; 21c84 <flatcc_builder_end_table@@Base+0x12c>
   21b7c:	ldr	r0, [pc, #260]	; 21c88 <flatcc_builder_end_table@@Base+0x130>
   21b80:	bl	14648 <__assert_fail@plt>
   21b84:	ldrh	r5, [r0, #8]
   21b88:	ldr	r3, [r0, #20]
   21b8c:	ldr	r1, [r0, #4]
   21b90:	add	r5, r5, #2
   21b94:	add	r3, r3, #4
   21b98:	lsl	r5, r5, #1
   21b9c:	uxth	r2, r3
   21ba0:	uxth	r5, r5
   21ba4:	ldr	r3, [r0, #12]
   21ba8:	strh	r2, [r1, #-2]
   21bac:	strh	r5, [r1, #-4]
   21bb0:	sub	r6, r1, #4
   21bb4:	ldr	r1, [pc, #208]	; 21c8c <flatcc_builder_end_table@@Base+0x134>
   21bb8:	eor	r3, r3, r5
   21bbc:	mov	r4, r0
   21bc0:	mul	r3, r1, r3
   21bc4:	eor	r3, r3, r2
   21bc8:	mov	r2, r5
   21bcc:	mul	r3, r1, r3
   21bd0:	mov	r1, r6
   21bd4:	str	r3, [r0, #12]
   21bd8:	bl	2161c <flatcc_builder_create_cached_vtable@@Base>
   21bdc:	subs	r7, r0, #0
   21be0:	beq	21c70 <flatcc_builder_end_table@@Base+0x118>
   21be4:	mov	r2, r5
   21be8:	mov	r1, #0
   21bec:	mov	r0, r6
   21bf0:	bl	145e8 <memset@plt>
   21bf4:	ldr	r3, [r4, #32]
   21bf8:	ldr	r1, [r4, #76]	; 0x4c
   21bfc:	mov	r0, r4
   21c00:	ldr	r3, [r3, #20]
   21c04:	add	r1, r1, r3
   21c08:	ldrh	r3, [r4, #130]	; 0x82
   21c0c:	str	r7, [sp, #8]
   21c10:	ldr	r2, [r4]
   21c14:	sub	r2, r2, r1
   21c18:	asr	r2, r2, #1
   21c1c:	stm	sp, {r1, r2}
   21c20:	ldr	r2, [r4, #20]
   21c24:	ldr	r1, [r4, #16]
   21c28:	bl	21894 <flatcc_builder_create_table@@Base>
   21c2c:	subs	r7, r0, #0
   21c30:	beq	21c70 <flatcc_builder_end_table@@Base+0x118>
   21c34:	ldr	r3, [r4, #32]
   21c38:	mov	r0, r4
   21c3c:	ldr	r2, [r3, #24]
   21c40:	str	r2, [r4, #12]
   21c44:	ldrh	r2, [r3, #28]
   21c48:	strh	r2, [r4, #8]
   21c4c:	ldr	r2, [r4, #52]	; 0x34
   21c50:	ldr	r1, [r3, #16]
   21c54:	add	r2, r2, r1
   21c58:	str	r2, [r4, #4]
   21c5c:	ldr	r2, [r4, #76]	; 0x4c
   21c60:	ldr	r3, [r3, #20]
   21c64:	add	r3, r2, r3
   21c68:	str	r3, [r4]
   21c6c:	bl	1fe30 <union_vector_tests@@Base+0x214>
   21c70:	mov	r0, r7
   21c74:	add	sp, sp, #20
   21c78:	pop	{r4, r5, r6, r7, pc}
   21c7c:	andeq	r1, r3, r8, asr #19
   21c80:	andeq	r0, r0, r5, lsr #10
   21c84:	ldrdeq	r1, [r3], -sl
   21c88:	andeq	r1, r3, r9, ror lr
   21c8c:			; <UNDEFINED> instruction: 0x9e3779b1

00021c90 <flatcc_builder_create_vector@@Base>:
   21c90:	push	{lr}		; (str lr, [sp, #-4]!)
   21c94:	sub	sp, sp, #84	; 0x54
   21c98:	ldr	lr, [sp, #92]	; 0x5c
   21c9c:	ldrh	ip, [sp, #88]	; 0x58
   21ca0:	cmp	r2, lr
   21ca4:	bls	21cbc <flatcc_builder_create_vector@@Base+0x2c>
   21ca8:	ldr	r3, [pc, #180]	; 21d64 <flatcc_builder_create_vector@@Base+0xd4>
   21cac:	ldr	r2, [pc, #180]	; 21d68 <flatcc_builder_create_vector@@Base+0xd8>
   21cb0:	ldr	r1, [pc, #180]	; 21d6c <flatcc_builder_create_vector@@Base+0xdc>
   21cb4:	ldr	r0, [pc, #180]	; 21d70 <flatcc_builder_create_vector@@Base+0xe0>
   21cb8:	bl	14648 <__assert_fail@plt>
   21cbc:	ldrh	lr, [r0, #128]	; 0x80
   21cc0:	mul	r3, r3, r2
   21cc4:	cmp	ip, #4
   21cc8:	movcc	ip, #4
   21ccc:	str	r2, [sp, #4]
   21cd0:	ldr	r2, [r0, #136]	; 0x88
   21cd4:	cmp	lr, ip
   21cd8:	sub	r2, r2, r3
   21cdc:	strhcc	ip, [r0, #128]	; 0x80
   21ce0:	sub	ip, ip, #1
   21ce4:	and	ip, ip, r2
   21ce8:	mov	r2, #4
   21cec:	cmp	r3, #0
   21cf0:	str	r2, [sp, #8]
   21cf4:	add	lr, sp, r2
   21cf8:	str	r2, [sp, #20]
   21cfc:	mov	r2, #1
   21d00:	str	r2, [sp, #12]
   21d04:	strne	r3, [sp, #28]
   21d08:	addne	r2, r3, #4
   21d0c:	movne	r3, #2
   21d10:	strne	r2, [sp, #8]
   21d14:	strne	r1, [sp, #24]
   21d18:	strne	r3, [sp, #12]
   21d1c:	cmp	ip, #0
   21d20:	str	lr, [sp, #16]
   21d24:	beq	21d54 <flatcc_builder_create_vector@@Base+0xc4>
   21d28:	ldr	r3, [sp, #8]
   21d2c:	add	r2, sp, #80	; 0x50
   21d30:	add	r3, r3, ip
   21d34:	str	r3, [sp, #8]
   21d38:	ldr	r3, [sp, #12]
   21d3c:	ldr	r1, [pc, #48]	; 21d74 <flatcc_builder_create_vector@@Base+0xe4>
   21d40:	add	r3, r3, #1
   21d44:	str	r3, [sp, #12]
   21d48:	add	r2, r2, r3, lsl #3
   21d4c:	str	r1, [r2, #-72]	; 0xffffffb8
   21d50:	str	ip, [r2, #-68]	; 0xffffffbc
   21d54:	add	r1, sp, #8
   21d58:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   21d5c:	add	sp, sp, #84	; 0x54
   21d60:	pop	{pc}		; (ldr pc, [sp], #4)
   21d64:	andeq	r1, r3, r1, ror #19
   21d68:	andeq	r0, r0, r5, asr r5
   21d6c:	ldrdeq	r1, [r3], -sl
   21d70:	andeq	r1, r3, r4, lsr #29
   21d74:	strdeq	r1, [r3], -r4

00021d78 <flatcc_builder_end_vector@@Base>:
   21d78:	push	{r0, r1, r2, r4, r5, lr}
   21d7c:	ldr	r2, [r0, #32]
   21d80:	ldrh	r3, [r2, #14]
   21d84:	cmp	r3, #4
   21d88:	beq	21da0 <flatcc_builder_end_vector@@Base+0x28>
   21d8c:	ldr	r3, [pc, #76]	; 21de0 <flatcc_builder_end_vector@@Base+0x68>
   21d90:	ldr	r2, [pc, #76]	; 21de4 <flatcc_builder_end_vector@@Base+0x6c>
   21d94:	ldr	r1, [pc, #76]	; 21de8 <flatcc_builder_end_vector@@Base+0x70>
   21d98:	ldr	r0, [pc, #76]	; 21dec <flatcc_builder_end_vector@@Base+0x74>
   21d9c:	bl	14648 <__assert_fail@plt>
   21da0:	ldr	r3, [r2, #24]
   21da4:	mov	r4, r0
   21da8:	str	r3, [sp, #4]
   21dac:	ldrh	r3, [r0, #130]	; 0x82
   21db0:	str	r3, [sp]
   21db4:	ldr	r3, [r2, #16]
   21db8:	ldr	r1, [r0, #16]
   21dbc:	ldr	r2, [r2, #20]
   21dc0:	bl	21c90 <flatcc_builder_create_vector@@Base>
   21dc4:	subs	r5, r0, #0
   21dc8:	beq	21dd4 <flatcc_builder_end_vector@@Base+0x5c>
   21dcc:	mov	r0, r4
   21dd0:	bl	1fe30 <union_vector_tests@@Base+0x214>
   21dd4:	mov	r0, r5
   21dd8:	add	sp, sp, #12
   21ddc:	pop	{r4, r5, pc}
   21de0:	strdeq	r1, [r3], -lr
   21de4:	andeq	r0, r0, r8, ror r5
   21de8:	ldrdeq	r1, [r3], -sl
   21dec:	andeq	r1, r3, r4, lsl #26

00021df0 <flatcc_builder_vector_count@@Base>:
   21df0:	ldr	r3, [r0, #32]
   21df4:	ldr	r0, [r3, #20]
   21df8:	bx	lr

00021dfc <flatcc_builder_vector_edit@@Base>:
   21dfc:	ldr	r0, [r0, #16]
   21e00:	bx	lr

00021e04 <flatcc_builder_create_offset_vector_direct@@Base>:
   21e04:	cmn	r2, #-1073741823	; 0xc0000001
   21e08:	bhi	21e14 <flatcc_builder_create_offset_vector_direct@@Base+0x10>
   21e0c:	mov	r3, #0
   21e10:	b	20408 <flatcc_builder_default_alloc@@Base+0x4cc>
   21e14:	mov	r0, #0
   21e18:	bx	lr

00021e1c <flatcc_builder_end_offset_vector@@Base>:
   21e1c:	ldr	r3, [r0, #32]
   21e20:	push	{r4, r5, r6, lr}
   21e24:	ldrh	r2, [r3, #14]
   21e28:	cmp	r2, #5
   21e2c:	beq	21e44 <flatcc_builder_end_offset_vector@@Base+0x28>
   21e30:	ldr	r3, [pc, #52]	; 21e6c <flatcc_builder_end_offset_vector@@Base+0x50>
   21e34:	ldr	r2, [pc, #52]	; 21e70 <flatcc_builder_end_offset_vector@@Base+0x54>
   21e38:	ldr	r1, [pc, #52]	; 21e74 <flatcc_builder_end_offset_vector@@Base+0x58>
   21e3c:	ldr	r0, [pc, #52]	; 21e78 <flatcc_builder_end_offset_vector@@Base+0x5c>
   21e40:	bl	14648 <__assert_fail@plt>
   21e44:	ldr	r2, [r3, #20]
   21e48:	ldr	r1, [r0, #16]
   21e4c:	mov	r4, r0
   21e50:	bl	21e04 <flatcc_builder_create_offset_vector_direct@@Base>
   21e54:	subs	r5, r0, #0
   21e58:	beq	21e64 <flatcc_builder_end_offset_vector@@Base+0x48>
   21e5c:	mov	r0, r4
   21e60:	bl	1fe30 <union_vector_tests@@Base+0x214>
   21e64:	mov	r0, r5
   21e68:	pop	{r4, r5, r6, pc}
   21e6c:	andeq	r1, r3, r8, lsl sl
   21e70:	andeq	r0, r0, r8, asr #11
   21e74:	ldrdeq	r1, [r3], -sl
   21e78:	andeq	r1, r3, sp, ror #26

00021e7c <flatcc_builder_create_offset_vector@@Base>:
   21e7c:	push	{r4, r5, r6, lr}
   21e80:	mov	r4, r0
   21e84:	mov	r6, r1
   21e88:	mov	r5, r2
   21e8c:	bl	21458 <flatcc_builder_start_offset_vector@@Base>
   21e90:	cmp	r0, #0
   21e94:	bne	21ec4 <flatcc_builder_create_offset_vector@@Base+0x48>
   21e98:	mov	r1, r5
   21e9c:	mov	r0, r4
   21ea0:	bl	21054 <flatcc_builder_extend_offset_vector@@Base>
   21ea4:	cmp	r0, #0
   21ea8:	beq	21ec4 <flatcc_builder_create_offset_vector@@Base+0x48>
   21eac:	lsl	r2, r5, #2
   21eb0:	mov	r1, r6
   21eb4:	bl	14570 <memcpy@plt>
   21eb8:	mov	r0, r4
   21ebc:	pop	{r4, r5, r6, lr}
   21ec0:	b	21e1c <flatcc_builder_end_offset_vector@@Base>
   21ec4:	mov	r0, #0
   21ec8:	pop	{r4, r5, r6, pc}

00021ecc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   21ecc:	ldr	r2, [r0, #32]
   21ed0:	mov	r3, r1
   21ed4:	push	{r4, r5, r6, lr}
   21ed8:	ldrh	r1, [r2, #14]
   21edc:	cmp	r1, #5
   21ee0:	beq	21ef8 <flatcc_builder_end_offset_vector_for_unions@@Base+0x2c>
   21ee4:	ldr	r3, [pc, #64]	; 21f2c <flatcc_builder_end_offset_vector_for_unions@@Base+0x60>
   21ee8:	ldr	r2, [pc, #64]	; 21f30 <flatcc_builder_end_offset_vector_for_unions@@Base+0x64>
   21eec:	ldr	r1, [pc, #64]	; 21f34 <flatcc_builder_end_offset_vector_for_unions@@Base+0x68>
   21ef0:	ldr	r0, [pc, #64]	; 21f38 <flatcc_builder_end_offset_vector_for_unions@@Base+0x6c>
   21ef4:	bl	14648 <__assert_fail@plt>
   21ef8:	ldr	r2, [r2, #20]
   21efc:	cmn	r2, #-1073741823	; 0xc0000001
   21f00:	movhi	r5, #0
   21f04:	bhi	21f24 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   21f08:	ldr	r1, [r0, #16]
   21f0c:	mov	r4, r0
   21f10:	bl	20408 <flatcc_builder_default_alloc@@Base+0x4cc>
   21f14:	subs	r5, r0, #0
   21f18:	beq	21f24 <flatcc_builder_end_offset_vector_for_unions@@Base+0x58>
   21f1c:	mov	r0, r4
   21f20:	bl	1fe30 <union_vector_tests@@Base+0x214>
   21f24:	mov	r0, r5
   21f28:	pop	{r4, r5, r6, pc}
   21f2c:	andeq	r1, r3, r9, lsr sl
   21f30:	ldrdeq	r0, [r0], -r5
   21f34:	ldrdeq	r1, [r3], -sl
   21f38:	andeq	r1, r3, sp, ror #26

00021f3c <flatcc_builder_offset_vector_edit@@Base>:
   21f3c:	ldr	r0, [r0, #16]
   21f40:	bx	lr

00021f44 <flatcc_builder_offset_vector_count@@Base>:
   21f44:	ldr	r3, [r0, #32]
   21f48:	ldr	r0, [r3, #20]
   21f4c:	bx	lr

00021f50 <flatcc_builder_create_union_vector_direct@@Base>:
   21f50:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   21f54:	mov	r4, r0
   21f58:	ldr	r5, [sp, #32]
   21f5c:	cmn	r5, #-1073741823	; 0xc0000001
   21f60:	bls	21f7c <flatcc_builder_create_union_vector_direct@@Base+0x2c>
   21f64:	mov	r3, #0
   21f68:	str	r3, [r4]
   21f6c:	str	r3, [r4, #4]
   21f70:	mov	r0, r4
   21f74:	add	sp, sp, #8
   21f78:	pop	{r4, r5, r6, r7, r8, pc}
   21f7c:	mov	r7, r1
   21f80:	mov	r8, r2
   21f84:	mov	r1, r3
   21f88:	mov	r0, r7
   21f8c:	mov	r3, r2
   21f90:	mov	r2, r5
   21f94:	bl	20408 <flatcc_builder_default_alloc@@Base+0x4cc>
   21f98:	subs	r6, r0, #0
   21f9c:	beq	21f64 <flatcc_builder_create_union_vector_direct@@Base+0x14>
   21fa0:	mvn	r3, #0
   21fa4:	str	r3, [sp, #4]
   21fa8:	mov	r3, #1
   21fac:	str	r3, [sp]
   21fb0:	mov	r2, r5
   21fb4:	mov	r1, r8
   21fb8:	mov	r0, r7
   21fbc:	bl	21c90 <flatcc_builder_create_vector@@Base>
   21fc0:	stm	r4, {r0, r6}
   21fc4:	b	21f70 <flatcc_builder_create_union_vector_direct@@Base+0x20>

00021fc8 <flatcc_builder_create_union_vector@@Base>:
   21fc8:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   21fcc:	mov	r7, r0
   21fd0:	mov	r0, r1
   21fd4:	mov	r5, r1
   21fd8:	mov	r6, r2
   21fdc:	mov	r8, r3
   21fe0:	bl	21458 <flatcc_builder_start_offset_vector@@Base>
   21fe4:	subs	r4, r0, #0
   21fe8:	beq	22004 <flatcc_builder_create_union_vector@@Base+0x3c>
   21fec:	mov	r3, #0
   21ff0:	str	r3, [r7]
   21ff4:	str	r3, [r7, #4]
   21ff8:	mov	r0, r7
   21ffc:	add	sp, sp, #16
   22000:	pop	{r4, r5, r6, r7, r8, pc}
   22004:	mov	r1, r8
   22008:	mov	r0, r5
   2200c:	bl	21054 <flatcc_builder_extend_offset_vector@@Base>
   22010:	cmp	r0, #0
   22014:	beq	21fec <flatcc_builder_create_union_vector@@Base+0x24>
   22018:	mov	r1, r8
   2201c:	mov	r0, r5
   22020:	bl	1fde8 <union_vector_tests@@Base+0x1cc>
   22024:	subs	r2, r0, #0
   22028:	movne	ip, r6
   2202c:	ldrne	r3, [r5, #16]
   22030:	movne	r1, r4
   22034:	beq	21fec <flatcc_builder_create_union_vector@@Base+0x24>
   22038:	cmp	r1, r8
   2203c:	add	ip, ip, #8
   22040:	bne	22070 <flatcc_builder_create_union_vector@@Base+0xa8>
   22044:	str	r1, [sp]
   22048:	add	r0, sp, #8
   2204c:	mov	r1, r5
   22050:	bl	21f50 <flatcc_builder_create_union_vector_direct@@Base>
   22054:	ldr	r6, [sp, #8]
   22058:	ldr	r4, [sp, #12]
   2205c:	mov	r0, r5
   22060:	bl	1fe30 <union_vector_tests@@Base+0x214>
   22064:	str	r6, [r7]
   22068:	str	r4, [r7, #4]
   2206c:	b	21ff8 <flatcc_builder_create_union_vector@@Base+0x30>
   22070:	ldrb	r0, [ip, #-8]
   22074:	strb	r0, [r2, r1]
   22078:	ldr	r0, [ip, #-4]
   2207c:	str	r0, [r3, r1, lsl #2]
   22080:	add	r1, r1, #1
   22084:	b	22038 <flatcc_builder_create_union_vector@@Base+0x70>

00022088 <flatcc_builder_start_union_vector@@Base>:
   22088:	push	{r4, r5, r6, lr}
   2208c:	mov	r1, #4
   22090:	mov	r5, r0
   22094:	bl	200a4 <flatcc_builder_default_alloc@@Base+0x168>
   22098:	subs	r4, r0, #0
   2209c:	mvnne	r4, #0
   220a0:	bne	220c8 <flatcc_builder_start_union_vector@@Base+0x40>
   220a4:	ldr	r3, [r5, #32]
   220a8:	mov	r2, #8
   220ac:	mvn	r1, #3
   220b0:	str	r2, [r3, #16]
   220b4:	mov	r2, #7
   220b8:	str	r4, [r3, #20]
   220bc:	strh	r2, [r3, #14]
   220c0:	mov	r0, r5
   220c4:	bl	1fd68 <union_vector_tests@@Base+0x14c>
   220c8:	mov	r0, r4
   220cc:	pop	{r4, r5, r6, pc}

000220d0 <flatcc_builder_end_union_vector@@Base>:
   220d0:	ldr	r3, [r1, #32]
   220d4:	push	{r4, r5, r6, r7, lr}
   220d8:	sub	sp, sp, #20
   220dc:	ldrh	r2, [r3, #14]
   220e0:	cmp	r2, #7
   220e4:	beq	220fc <flatcc_builder_end_union_vector@@Base+0x2c>
   220e8:	ldr	r3, [pc, #156]	; 2218c <flatcc_builder_end_union_vector@@Base+0xbc>
   220ec:	ldr	r2, [pc, #156]	; 22190 <flatcc_builder_end_union_vector@@Base+0xc0>
   220f0:	ldr	r1, [pc, #156]	; 22194 <flatcc_builder_end_union_vector@@Base+0xc4>
   220f4:	ldr	r0, [pc, #156]	; 22198 <flatcc_builder_end_union_vector@@Base+0xc8>
   220f8:	bl	14648 <__assert_fail@plt>
   220fc:	ldr	r7, [r3, #20]
   22100:	mov	r5, r1
   22104:	mov	r4, r0
   22108:	lsl	r6, r7, #2
   2210c:	add	r1, r6, r7
   22110:	mov	r0, r5
   22114:	bl	1fde8 <union_vector_tests@@Base+0x1cc>
   22118:	subs	r3, r0, #0
   2211c:	streq	r3, [r4]
   22120:	streq	r3, [r4, #4]
   22124:	addne	r2, r3, r6
   22128:	ldrne	r0, [r5, #16]
   2212c:	movne	r1, #0
   22130:	bne	22154 <flatcc_builder_end_union_vector@@Base+0x84>
   22134:	mov	r0, r4
   22138:	add	sp, sp, #20
   2213c:	pop	{r4, r5, r6, r7, pc}
   22140:	ldrb	ip, [r0, #-8]
   22144:	strb	ip, [r2, r1]
   22148:	ldr	ip, [r0, #-4]
   2214c:	str	ip, [r3, r1, lsl #2]
   22150:	add	r1, r1, #1
   22154:	cmp	r1, r7
   22158:	add	r0, r0, #8
   2215c:	bne	22140 <flatcc_builder_end_union_vector@@Base+0x70>
   22160:	str	r1, [sp]
   22164:	add	r0, sp, #8
   22168:	mov	r1, r5
   2216c:	bl	21f50 <flatcc_builder_create_union_vector_direct@@Base>
   22170:	ldr	r7, [sp, #8]
   22174:	ldr	r6, [sp, #12]
   22178:	mov	r0, r5
   2217c:	bl	1fe30 <union_vector_tests@@Base+0x214>
   22180:	str	r7, [r4]
   22184:	str	r6, [r4, #4]
   22188:	b	22134 <flatcc_builder_end_union_vector@@Base+0x64>
   2218c:	andeq	r1, r3, r5, ror #20
   22190:	andeq	r0, r0, r1, asr r6
   22194:	ldrdeq	r1, [r3], -sl
   22198:			; <UNDEFINED> instruction: 0x00031eb7

0002219c <flatcc_builder_union_vector_edit@@Base>:
   2219c:	ldr	r0, [r0, #16]
   221a0:	bx	lr

000221a4 <flatcc_builder_union_vector_count@@Base>:
   221a4:	ldr	r3, [r0, #32]
   221a8:	ldr	r0, [r3, #20]
   221ac:	bx	lr

000221b0 <flatcc_builder_extend_union_vector@@Base>:
   221b0:	push	{r4, r5, r6, lr}
   221b4:	mvn	r2, #-536870912	; 0xe0000000
   221b8:	mov	r4, r0
   221bc:	ldr	r0, [r0, #32]
   221c0:	mov	r5, r1
   221c4:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   221c8:	cmp	r0, #0
   221cc:	bne	221e0 <flatcc_builder_extend_union_vector@@Base+0x30>
   221d0:	lsl	r1, r5, #3
   221d4:	mov	r0, r4
   221d8:	pop	{r4, r5, r6, lr}
   221dc:	b	1fde8 <union_vector_tests@@Base+0x1cc>
   221e0:	mov	r0, #0
   221e4:	pop	{r4, r5, r6, pc}

000221e8 <flatcc_builder_truncate_union_vector@@Base>:
   221e8:	ldr	r3, [r0, #32]
   221ec:	push	{r4, lr}
   221f0:	ldrh	r2, [r3, #14]
   221f4:	cmp	r2, #7
   221f8:	beq	22210 <flatcc_builder_truncate_union_vector@@Base+0x28>
   221fc:	ldr	r3, [pc, #68]	; 22248 <flatcc_builder_truncate_union_vector@@Base+0x60>
   22200:	ldr	r2, [pc, #68]	; 2224c <flatcc_builder_truncate_union_vector@@Base+0x64>
   22204:	ldr	r1, [pc, #68]	; 22250 <flatcc_builder_truncate_union_vector@@Base+0x68>
   22208:	ldr	r0, [pc, #68]	; 22254 <flatcc_builder_truncate_union_vector@@Base+0x6c>
   2220c:	bl	14648 <__assert_fail@plt>
   22210:	ldr	r2, [r3, #20]
   22214:	cmp	r2, r1
   22218:	ldrcc	r3, [pc, #40]	; 22248 <flatcc_builder_truncate_union_vector@@Base+0x60>
   2221c:	ldrcc	r2, [pc, #52]	; 22258 <flatcc_builder_truncate_union_vector@@Base+0x70>
   22220:	ldrcc	r1, [pc, #40]	; 22250 <flatcc_builder_truncate_union_vector@@Base+0x68>
   22224:	ldrcc	r0, [pc, #48]	; 2225c <flatcc_builder_truncate_union_vector@@Base+0x74>
   22228:	bcc	2220c <flatcc_builder_truncate_union_vector@@Base+0x24>
   2222c:	sub	r2, r2, r1
   22230:	str	r2, [r3, #20]
   22234:	ldr	r3, [r3, #16]
   22238:	mul	r1, r3, r1
   2223c:	bl	1fe9c <union_vector_tests@@Base+0x280>
   22240:	mov	r0, #0
   22244:	pop	{r4, pc}
   22248:	andeq	r1, r3, r5, lsl #21
   2224c:	andeq	r0, r0, r1, lsl #13
   22250:	ldrdeq	r1, [r3], -sl
   22254:			; <UNDEFINED> instruction: 0x00031eb7
   22258:	andeq	r0, r0, r2, lsl #13
   2225c:	strdeq	r1, [r3], -r0

00022260 <flatcc_builder_union_vector_push@@Base>:
   22260:	push	{r0, r1, r4, lr}
   22264:	stm	sp, {r1, r2}
   22268:	ldr	r2, [r0, #32]
   2226c:	ldrh	r3, [r2, #14]
   22270:	cmp	r3, #7
   22274:	beq	2228c <flatcc_builder_union_vector_push@@Base+0x2c>
   22278:	ldr	r3, [pc, #72]	; 222c8 <flatcc_builder_union_vector_push@@Base+0x68>
   2227c:	ldr	r2, [pc, #72]	; 222cc <flatcc_builder_union_vector_push@@Base+0x6c>
   22280:	ldr	r1, [pc, #72]	; 222d0 <flatcc_builder_union_vector_push@@Base+0x70>
   22284:	ldr	r0, [pc, #72]	; 222d4 <flatcc_builder_union_vector_push@@Base+0x74>
   22288:	bl	14648 <__assert_fail@plt>
   2228c:	ldr	r3, [r2, #20]
   22290:	cmn	r3, #-536870911	; 0xe0000001
   22294:	moveq	r3, #0
   22298:	beq	222bc <flatcc_builder_union_vector_push@@Base+0x5c>
   2229c:	add	r3, r3, #1
   222a0:	mov	r1, #8
   222a4:	str	r3, [r2, #20]
   222a8:	bl	1fde8 <union_vector_tests@@Base+0x1cc>
   222ac:	subs	r3, r0, #0
   222b0:	movne	r4, sp
   222b4:	ldmne	r4, {r0, r1}
   222b8:	stmne	r3, {r0, r1}
   222bc:	mov	r0, r3
   222c0:	add	sp, sp, #8
   222c4:	pop	{r4, pc}
   222c8:	andeq	r1, r3, sl, lsr #21
   222cc:	andeq	r0, r0, sp, lsl #13
   222d0:	ldrdeq	r1, [r3], -sl
   222d4:			; <UNDEFINED> instruction: 0x00031eb7

000222d8 <flatcc_builder_append_union_vector@@Base>:
   222d8:	push	{r4, r5, r6, lr}
   222dc:	mov	r4, r0
   222e0:	ldr	r0, [r0, #32]
   222e4:	ldrh	r3, [r0, #14]
   222e8:	cmp	r3, #7
   222ec:	beq	22304 <flatcc_builder_append_union_vector@@Base+0x2c>
   222f0:	ldr	r3, [pc, #68]	; 2233c <flatcc_builder_append_union_vector@@Base+0x64>
   222f4:	ldr	r2, [pc, #68]	; 22340 <flatcc_builder_append_union_vector@@Base+0x68>
   222f8:	ldr	r1, [pc, #68]	; 22344 <flatcc_builder_append_union_vector@@Base+0x6c>
   222fc:	ldr	r0, [pc, #68]	; 22348 <flatcc_builder_append_union_vector@@Base+0x70>
   22300:	bl	14648 <__assert_fail@plt>
   22304:	mov	r5, r2
   22308:	mov	r6, r1
   2230c:	mvn	r2, #-536870912	; 0xe0000000
   22310:	mov	r1, r5
   22314:	bl	203b4 <flatcc_builder_default_alloc@@Base+0x478>
   22318:	cmp	r0, #0
   2231c:	bne	22334 <flatcc_builder_append_union_vector@@Base+0x5c>
   22320:	lsl	r2, r5, #3
   22324:	mov	r1, r6
   22328:	mov	r0, r4
   2232c:	pop	{r4, r5, r6, lr}
   22330:	b	1febc <union_vector_tests@@Base+0x2a0>
   22334:	mov	r0, #0
   22338:	pop	{r4, r5, r6, pc}
   2233c:	andeq	r1, r3, fp, asr #21
   22340:	muleq	r0, ip, r6
   22344:	ldrdeq	r1, [r3], -sl
   22348:			; <UNDEFINED> instruction: 0x00031eb7

0002234c <flatcc_builder_create_string@@Base>:
   2234c:	push	{lr}		; (str lr, [sp, #-4]!)
   22350:	sub	sp, sp, #84	; 0x54
   22354:	ldr	r3, [r0, #136]	; 0x88
   22358:	mov	ip, #4
   2235c:	cmp	r2, #0
   22360:	str	ip, [sp, #8]
   22364:	add	lr, sp, ip
   22368:	str	ip, [sp, #20]
   2236c:	sub	r3, r3, r2
   22370:	mov	ip, #1
   22374:	str	ip, [sp, #12]
   22378:	strne	r2, [sp, #28]
   2237c:	addne	ip, r2, #4
   22380:	str	r2, [sp, #4]
   22384:	sub	r3, r3, #1
   22388:	movne	r2, #2
   2238c:	strne	ip, [sp, #8]
   22390:	strne	r2, [sp, #12]
   22394:	and	r3, r3, #3
   22398:	ldr	r2, [sp, #8]
   2239c:	add	r3, r3, #1
   223a0:	add	r2, r2, r3
   223a4:	str	r2, [sp, #8]
   223a8:	ldr	r2, [sp, #12]
   223ac:	strne	r1, [sp, #24]
   223b0:	add	r2, r2, #1
   223b4:	add	r1, sp, #80	; 0x50
   223b8:	add	r1, r1, r2, lsl #3
   223bc:	ldr	ip, [pc, #28]	; 223e0 <flatcc_builder_create_string@@Base+0x94>
   223c0:	str	lr, [sp, #16]
   223c4:	str	r3, [r1, #-68]	; 0xffffffbc
   223c8:	str	ip, [r1, #-72]	; 0xffffffb8
   223cc:	add	r1, sp, #8
   223d0:	str	r2, [sp, #12]
   223d4:	bl	20334 <flatcc_builder_default_alloc@@Base+0x3f8>
   223d8:	add	sp, sp, #84	; 0x54
   223dc:	pop	{pc}		; (ldr pc, [sp], #4)
   223e0:	strdeq	r1, [r3], -r4

000223e4 <flatcc_builder_create_string_str@@Base>:
   223e4:	push	{r4, r5, r6, lr}
   223e8:	mov	r5, r0
   223ec:	mov	r0, r1
   223f0:	mov	r4, r1
   223f4:	bl	145c4 <strlen@plt>
   223f8:	mov	r1, r4
   223fc:	mov	r2, r0
   22400:	mov	r0, r5
   22404:	pop	{r4, r5, r6, lr}
   22408:	b	2234c <flatcc_builder_create_string@@Base>

0002240c <flatcc_builder_create_string_strn@@Base>:
   2240c:	push	{r4, r5, r6, lr}
   22410:	mov	r4, r1
   22414:	mov	r6, r0
   22418:	mov	r1, #0
   2241c:	mov	r0, r4
   22420:	mov	r5, r2
   22424:	bl	1460c <memchr@plt>
   22428:	mov	r1, r4
   2242c:	cmp	r0, #0
   22430:	subne	r5, r0, r4
   22434:	mov	r2, r5
   22438:	mov	r0, r6
   2243c:	pop	{r4, r5, r6, lr}
   22440:	b	2234c <flatcc_builder_create_string@@Base>

00022444 <flatcc_builder_end_string@@Base>:
   22444:	ldr	r3, [r0, #32]
   22448:	push	{r4, r5, r6, lr}
   2244c:	ldrh	r2, [r3, #14]
   22450:	cmp	r2, #6
   22454:	beq	2246c <flatcc_builder_end_string@@Base+0x28>
   22458:	ldr	r3, [pc, #80]	; 224b0 <flatcc_builder_end_string@@Base+0x6c>
   2245c:	ldr	r2, [pc, #80]	; 224b4 <flatcc_builder_end_string@@Base+0x70>
   22460:	ldr	r1, [pc, #80]	; 224b8 <flatcc_builder_end_string@@Base+0x74>
   22464:	ldr	r0, [pc, #80]	; 224bc <flatcc_builder_end_string@@Base+0x78>
   22468:	bl	14648 <__assert_fail@plt>
   2246c:	ldr	r2, [r3, #20]
   22470:	ldr	r3, [r0, #20]
   22474:	mov	r4, r0
   22478:	cmp	r2, r3
   2247c:	ldrne	r3, [pc, #44]	; 224b0 <flatcc_builder_end_string@@Base+0x6c>
   22480:	ldrne	r2, [pc, #56]	; 224c0 <flatcc_builder_end_string@@Base+0x7c>
   22484:	ldrne	r1, [pc, #44]	; 224b8 <flatcc_builder_end_string@@Base+0x74>
   22488:	ldrne	r0, [pc, #52]	; 224c4 <flatcc_builder_end_string@@Base+0x80>
   2248c:	bne	22468 <flatcc_builder_end_string@@Base+0x24>
   22490:	ldr	r1, [r0, #16]
   22494:	bl	2234c <flatcc_builder_create_string@@Base>
   22498:	subs	r5, r0, #0
   2249c:	beq	224a8 <flatcc_builder_end_string@@Base+0x64>
   224a0:	mov	r0, r4
   224a4:	bl	1fe30 <union_vector_tests@@Base+0x214>
   224a8:	mov	r0, r5
   224ac:	pop	{r4, r5, r6, pc}
   224b0:	andeq	r1, r3, lr, ror #21
   224b4:	andeq	r0, r0, r4, asr #13
   224b8:	ldrdeq	r1, [r3], -sl
   224bc:	andeq	r1, r3, r0, lsr #27
   224c0:	andeq	r0, r0, r5, asr #13
   224c4:	andeq	r1, r3, r9, ror #29

000224c8 <flatcc_builder_string_edit@@Base>:
   224c8:	ldr	r0, [r0, #16]
   224cc:	bx	lr

000224d0 <flatcc_builder_string_len@@Base>:
   224d0:	ldr	r3, [r0, #32]
   224d4:	ldr	r0, [r3, #20]
   224d8:	bx	lr

000224dc <flatcc_builder_table_add@@Base>:
   224dc:	push	{r4, r5, r6, r7, r8, lr}
   224e0:	mov	r4, r0
   224e4:	ldr	r0, [r0, #32]
   224e8:	ldrh	r0, [r0, #14]
   224ec:	cmp	r0, #3
   224f0:	beq	22508 <flatcc_builder_table_add@@Base+0x2c>
   224f4:	ldr	r3, [pc, #232]	; 225e4 <flatcc_builder_table_add@@Base+0x108>
   224f8:	ldr	r2, [pc, #232]	; 225e8 <flatcc_builder_table_add@@Base+0x10c>
   224fc:	ldr	r1, [pc, #232]	; 225ec <flatcc_builder_table_add@@Base+0x110>
   22500:	ldr	r0, [pc, #232]	; 225f0 <flatcc_builder_table_add@@Base+0x114>
   22504:	bl	14648 <__assert_fail@plt>
   22508:	ldr	r0, [pc, #228]	; 225f4 <flatcc_builder_table_add@@Base+0x118>
   2250c:	cmp	r1, r0
   22510:	ldrhi	r3, [pc, #204]	; 225e4 <flatcc_builder_table_add@@Base+0x108>
   22514:	ldrhi	r2, [pc, #220]	; 225f8 <flatcc_builder_table_add@@Base+0x11c>
   22518:	ldrhi	r1, [pc, #204]	; 225ec <flatcc_builder_table_add@@Base+0x110>
   2251c:	ldrhi	r0, [pc, #216]	; 225fc <flatcc_builder_table_add@@Base+0x120>
   22520:	bhi	22504 <flatcc_builder_table_add@@Base+0x28>
   22524:	ldrh	r0, [r4, #130]	; 0x82
   22528:	lsl	r7, r1, #1
   2252c:	cmp	r0, r3
   22530:	ldr	r0, [r4, #4]
   22534:	strhcc	r3, [r4, #130]	; 0x82
   22538:	ldrh	r5, [r0, r7]
   2253c:	cmp	r5, #0
   22540:	ldrne	r3, [pc, #156]	; 225e4 <flatcc_builder_table_add@@Base+0x108>
   22544:	ldrne	r2, [pc, #180]	; 22600 <flatcc_builder_table_add@@Base+0x124>
   22548:	ldrne	r1, [pc, #156]	; 225ec <flatcc_builder_table_add@@Base+0x110>
   2254c:	ldrne	r0, [pc, #176]	; 22604 <flatcc_builder_table_add@@Base+0x128>
   22550:	bne	22504 <flatcc_builder_table_add@@Base+0x28>
   22554:	ldr	ip, [r4, #12]
   22558:	ldr	lr, [pc, #168]	; 22608 <flatcc_builder_table_add@@Base+0x12c>
   2255c:	eor	ip, ip, r1
   22560:	ldr	r6, [r4, #20]
   22564:	mul	ip, lr, ip
   22568:	sub	r0, r3, #1
   2256c:	eor	ip, ip, r2
   22570:	rsb	r3, r3, #0
   22574:	add	r0, r0, r6
   22578:	and	r6, r0, r3
   2257c:	mul	ip, lr, ip
   22580:	ldr	r3, [r4, #24]
   22584:	uxth	r8, r1
   22588:	add	r1, r2, r6
   2258c:	cmp	r1, r3
   22590:	str	ip, [r4, #12]
   22594:	str	r1, [r4, #20]
   22598:	bcs	225c4 <flatcc_builder_table_add@@Base+0xe8>
   2259c:	ldr	r3, [r4, #4]
   225a0:	add	r2, r6, #4
   225a4:	ldr	r0, [r4, #16]
   225a8:	strh	r2, [r3, r7]
   225ac:	ldrh	r3, [r4, #8]
   225b0:	add	r0, r0, r6
   225b4:	cmp	r3, r8
   225b8:	addls	r1, r8, #1
   225bc:	strhls	r1, [r4, #8]
   225c0:	pop	{r4, r5, r6, r7, r8, pc}
   225c4:	ldr	r2, [pc, #64]	; 2260c <flatcc_builder_table_add@@Base+0x130>
   225c8:	add	r1, r1, #1
   225cc:	mov	r0, r4
   225d0:	bl	1fd98 <union_vector_tests@@Base+0x17c>
   225d4:	cmp	r0, #0
   225d8:	beq	2259c <flatcc_builder_table_add@@Base+0xc0>
   225dc:	mov	r0, r5
   225e0:	pop	{r4, r5, r6, r7, r8, pc}
   225e4:	andeq	r1, r3, r8, lsl #22
   225e8:	andeq	r0, r0, sp, ror #13
   225ec:	ldrdeq	r1, [r3], -sl
   225f0:	andeq	r1, r3, r9, ror lr
   225f4:	strdeq	r7, [r0], -ip
   225f8:	andeq	r0, r0, lr, ror #13
   225fc:	andeq	r1, r3, sp, lsl #30
   22600:	strdeq	r0, [r0], -r8
   22604:	andeq	r1, r3, r7, asr #24
   22608:			; <UNDEFINED> instruction: 0x9e3779b1
   2260c:	strdeq	pc, [r0], -ip

00022610 <flatcc_builder_table_edit@@Base>:
   22610:	ldr	r3, [r0, #32]
   22614:	ldrh	r3, [r3, #14]
   22618:	cmp	r3, #3
   2261c:	beq	22638 <flatcc_builder_table_edit@@Base+0x28>
   22620:	push	{r4, lr}
   22624:	ldr	r3, [pc, #32]	; 2264c <flatcc_builder_table_edit@@Base+0x3c>
   22628:	ldr	r2, [pc, #32]	; 22650 <flatcc_builder_table_edit@@Base+0x40>
   2262c:	ldr	r1, [pc, #32]	; 22654 <flatcc_builder_table_edit@@Base+0x44>
   22630:	ldr	r0, [pc, #32]	; 22658 <flatcc_builder_table_edit@@Base+0x48>
   22634:	bl	14648 <__assert_fail@plt>
   22638:	ldr	r3, [r0, #20]
   2263c:	ldr	r0, [r0, #16]
   22640:	sub	r1, r3, r1
   22644:	add	r0, r0, r1
   22648:	bx	lr
   2264c:	andeq	r1, r3, r1, lsr #22
   22650:	andeq	r0, r0, r2, lsl #14
   22654:	ldrdeq	r1, [r3], -sl
   22658:	andeq	r1, r3, r9, ror lr

0002265c <flatcc_builder_table_add_copy@@Base>:
   2265c:	push	{r4, r5, r6, lr}
   22660:	mov	r4, r3
   22664:	mov	r6, r2
   22668:	ldrh	r3, [sp, #16]
   2266c:	mov	r2, r4
   22670:	bl	224dc <flatcc_builder_table_add@@Base>
   22674:	subs	r5, r0, #0
   22678:	beq	22688 <flatcc_builder_table_add_copy@@Base+0x2c>
   2267c:	mov	r2, r4
   22680:	mov	r1, r6
   22684:	bl	14570 <memcpy@plt>
   22688:	mov	r0, r5
   2268c:	pop	{r4, r5, r6, pc}

00022690 <flatcc_builder_table_add_offset@@Base>:
   22690:	ldr	r3, [r0, #32]
   22694:	push	{r4, r5, r6, r7, r8, lr}
   22698:	ldrh	r3, [r3, #14]
   2269c:	cmp	r3, #3
   226a0:	beq	226b8 <flatcc_builder_table_add_offset@@Base+0x28>
   226a4:	ldr	r3, [pc, #228]	; 22790 <flatcc_builder_table_add_offset@@Base+0x100>
   226a8:	ldr	r2, [pc, #228]	; 22794 <flatcc_builder_table_add_offset@@Base+0x104>
   226ac:	ldr	r1, [pc, #228]	; 22798 <flatcc_builder_table_add_offset@@Base+0x108>
   226b0:	ldr	r0, [pc, #228]	; 2279c <flatcc_builder_table_add_offset@@Base+0x10c>
   226b4:	bl	14648 <__assert_fail@plt>
   226b8:	ldr	r3, [pc, #224]	; 227a0 <flatcc_builder_table_add_offset@@Base+0x110>
   226bc:	cmp	r1, r3
   226c0:	ldrhi	r3, [pc, #200]	; 22790 <flatcc_builder_table_add_offset@@Base+0x100>
   226c4:	ldrhi	r2, [pc, #216]	; 227a4 <flatcc_builder_table_add_offset@@Base+0x114>
   226c8:	ldrhi	r1, [pc, #200]	; 22798 <flatcc_builder_table_add_offset@@Base+0x108>
   226cc:	ldrhi	r0, [pc, #212]	; 227a8 <flatcc_builder_table_add_offset@@Base+0x118>
   226d0:	bhi	226b4 <flatcc_builder_table_add_offset@@Base+0x24>
   226d4:	ldr	r3, [r0, #4]
   226d8:	lsl	r7, r1, #1
   226dc:	mov	r4, r0
   226e0:	ldrh	r6, [r3, r7]
   226e4:	cmp	r6, #0
   226e8:	ldrne	r3, [pc, #160]	; 22790 <flatcc_builder_table_add_offset@@Base+0x100>
   226ec:	ldrne	r2, [pc, #184]	; 227ac <flatcc_builder_table_add_offset@@Base+0x11c>
   226f0:	ldrne	r1, [pc, #160]	; 22798 <flatcc_builder_table_add_offset@@Base+0x108>
   226f4:	ldrne	r0, [pc, #180]	; 227b0 <flatcc_builder_table_add_offset@@Base+0x120>
   226f8:	bne	226b4 <flatcc_builder_table_add_offset@@Base+0x24>
   226fc:	ldr	r3, [r0, #12]
   22700:	ldr	r2, [pc, #172]	; 227b4 <flatcc_builder_table_add_offset@@Base+0x124>
   22704:	eor	r3, r3, r1
   22708:	ldr	r8, [r0, #20]
   2270c:	mul	r3, r2, r3
   22710:	add	r8, r8, #3
   22714:	eor	r3, r3, #4
   22718:	bic	r8, r8, #3
   2271c:	mul	r3, r2, r3
   22720:	uxth	r5, r1
   22724:	str	r3, [r0, #12]
   22728:	ldr	r3, [r0, #24]
   2272c:	add	r1, r8, #4
   22730:	cmp	r1, r3
   22734:	str	r1, [r0, #20]
   22738:	bhi	22778 <flatcc_builder_table_add_offset@@Base+0xe8>
   2273c:	ldr	r3, [r4, #4]
   22740:	uxth	r2, r8
   22744:	add	r1, r2, #4
   22748:	strh	r1, [r3, r7]
   2274c:	ldrh	r3, [r4, #8]
   22750:	ldr	r0, [r4, #16]
   22754:	cmp	r3, r5
   22758:	ldr	r3, [r4]
   2275c:	addls	r1, r5, #1
   22760:	strhls	r1, [r4, #8]
   22764:	add	r1, r3, #2
   22768:	str	r1, [r4]
   2276c:	add	r0, r0, r8
   22770:	strh	r2, [r3]
   22774:	pop	{r4, r5, r6, r7, r8, pc}
   22778:	ldr	r2, [pc, #56]	; 227b8 <flatcc_builder_table_add_offset@@Base+0x128>
   2277c:	bl	1fd98 <union_vector_tests@@Base+0x17c>
   22780:	cmp	r0, #0
   22784:	beq	2273c <flatcc_builder_table_add_offset@@Base+0xac>
   22788:	mov	r0, r6
   2278c:	pop	{r4, r5, r6, r7, r8, pc}
   22790:	andeq	r1, r3, fp, lsr fp
   22794:	andeq	r0, r0, r3, lsl r7
   22798:	ldrdeq	r1, [r3], -sl
   2279c:	andeq	r1, r3, r9, ror lr
   227a0:	strdeq	r7, [r0], -ip
   227a4:	andeq	r0, r0, r4, lsl r7
   227a8:	andeq	r1, r3, sp, lsl #30
   227ac:	andeq	r0, r0, fp, lsl r7
   227b0:	andeq	r1, r3, r7, asr #24
   227b4:			; <UNDEFINED> instruction: 0x9e3779b1
   227b8:	strdeq	pc, [r0], -ip

000227bc <flatcc_builder_table_add_union@@Base>:
   227bc:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   227c0:	add	ip, sp, #8
   227c4:	stmdb	ip, {r2, r3}
   227c8:	ldr	r3, [r0, #32]
   227cc:	ldrb	r5, [sp]
   227d0:	ldr	r4, [sp, #4]
   227d4:	ldrh	r3, [r3, #14]
   227d8:	cmp	r3, #3
   227dc:	beq	227f4 <flatcc_builder_table_add_union@@Base+0x38>
   227e0:	ldr	r3, [pc, #156]	; 22884 <flatcc_builder_table_add_union@@Base+0xc8>
   227e4:	ldr	r2, [pc, #156]	; 22888 <flatcc_builder_table_add_union@@Base+0xcc>
   227e8:	ldr	r1, [pc, #156]	; 2288c <flatcc_builder_table_add_union@@Base+0xd0>
   227ec:	ldr	r0, [pc, #156]	; 22890 <flatcc_builder_table_add_union@@Base+0xd4>
   227f0:	bl	14648 <__assert_fail@plt>
   227f4:	cmp	r5, #0
   227f8:	mov	r6, r0
   227fc:	mov	r7, r1
   22800:	bne	22820 <flatcc_builder_table_add_union@@Base+0x64>
   22804:	cmp	r4, #0
   22808:	beq	22848 <flatcc_builder_table_add_union@@Base+0x8c>
   2280c:	ldr	r3, [pc, #112]	; 22884 <flatcc_builder_table_add_union@@Base+0xc8>
   22810:	ldr	r2, [pc, #124]	; 22894 <flatcc_builder_table_add_union@@Base+0xd8>
   22814:	ldr	r1, [pc, #112]	; 2288c <flatcc_builder_table_add_union@@Base+0xd0>
   22818:	ldr	r0, [pc, #120]	; 22898 <flatcc_builder_table_add_union@@Base+0xdc>
   2281c:	b	227f0 <flatcc_builder_table_add_union@@Base+0x34>
   22820:	cmp	r4, #0
   22824:	beq	22848 <flatcc_builder_table_add_union@@Base+0x8c>
   22828:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   2282c:	cmp	r0, #0
   22830:	strne	r4, [r0]
   22834:	ldreq	r3, [pc, #72]	; 22884 <flatcc_builder_table_add_union@@Base+0xc8>
   22838:	ldreq	r2, [pc, #92]	; 2289c <flatcc_builder_table_add_union@@Base+0xe0>
   2283c:	ldreq	r1, [pc, #72]	; 2288c <flatcc_builder_table_add_union@@Base+0xd0>
   22840:	ldreq	r0, [pc, #88]	; 228a0 <flatcc_builder_table_add_union@@Base+0xe4>
   22844:	beq	227f0 <flatcc_builder_table_add_union@@Base+0x34>
   22848:	mov	r3, #1
   2284c:	mov	r2, r3
   22850:	sub	r1, r7, #1
   22854:	mov	r0, r6
   22858:	bl	224dc <flatcc_builder_table_add@@Base>
   2285c:	cmp	r0, #0
   22860:	ldreq	r3, [pc, #28]	; 22884 <flatcc_builder_table_add_union@@Base+0xc8>
   22864:	ldreq	r2, [pc, #56]	; 228a4 <flatcc_builder_table_add_union@@Base+0xe8>
   22868:	ldreq	r1, [pc, #28]	; 2288c <flatcc_builder_table_add_union@@Base+0xd0>
   2286c:	ldreq	r0, [pc, #52]	; 228a8 <flatcc_builder_table_add_union@@Base+0xec>
   22870:	beq	227f0 <flatcc_builder_table_add_union@@Base+0x34>
   22874:	strb	r5, [r0]
   22878:	mov	r0, #0
   2287c:	add	sp, sp, #12
   22880:	pop	{r4, r5, r6, r7, pc}
   22884:	andeq	r1, r3, fp, asr fp
   22888:	andeq	r0, r0, lr, ror #11
   2288c:	ldrdeq	r1, [r3], -sl
   22890:	andeq	r1, r3, r9, ror lr
   22894:	andeq	r0, r0, pc, ror #11
   22898:	andeq	r1, r3, r1, asr pc
   2289c:	strdeq	r0, [r0], -r2
   228a0:	andeq	r1, r3, r3, ror pc
   228a4:	strdeq	r0, [r0], -r6
   228a8:	andeq	r1, r3, sp, ror pc

000228ac <flatcc_builder_table_add_union_vector@@Base>:
   228ac:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   228b0:	mov	r7, r1
   228b4:	add	r1, sp, #8
   228b8:	stmdb	r1, {r2, r3}
   228bc:	ldr	r3, [r0, #32]
   228c0:	ldm	sp, {r4, r5}
   228c4:	ldrh	r3, [r3, #14]
   228c8:	cmp	r3, #3
   228cc:	beq	228e4 <flatcc_builder_table_add_union_vector@@Base+0x38>
   228d0:	ldr	r3, [pc, #176]	; 22988 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   228d4:	ldr	r1, [pc, #176]	; 2298c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   228d8:	ldr	r0, [pc, #176]	; 22990 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   228dc:	mov	r2, #1536	; 0x600
   228e0:	bl	14648 <__assert_fail@plt>
   228e4:	clz	r3, r5
   228e8:	clz	r2, r4
   228ec:	lsr	r3, r3, #5
   228f0:	lsr	r2, r2, #5
   228f4:	cmp	r2, r3
   228f8:	beq	22924 <flatcc_builder_table_add_union_vector@@Base+0x78>
   228fc:	adds	r4, r4, #0
   22900:	movne	r4, #1
   22904:	cmp	r4, r3
   22908:	mvnne	r0, #0
   2290c:	bne	22980 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   22910:	ldr	r3, [pc, #112]	; 22988 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   22914:	ldr	r2, [pc, #120]	; 22994 <flatcc_builder_table_add_union_vector@@Base+0xe8>
   22918:	ldr	r1, [pc, #108]	; 2298c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   2291c:	ldr	r0, [pc, #116]	; 22998 <flatcc_builder_table_add_union_vector@@Base+0xec>
   22920:	b	228e0 <flatcc_builder_table_add_union_vector@@Base+0x34>
   22924:	cmp	r4, #0
   22928:	moveq	r0, r4
   2292c:	beq	22980 <flatcc_builder_table_add_union_vector@@Base+0xd4>
   22930:	sub	r1, r7, #1
   22934:	mov	r6, r0
   22938:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   2293c:	cmp	r0, #0
   22940:	bne	22958 <flatcc_builder_table_add_union_vector@@Base+0xac>
   22944:	ldr	r3, [pc, #60]	; 22988 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   22948:	ldr	r2, [pc, #76]	; 2299c <flatcc_builder_table_add_union_vector@@Base+0xf0>
   2294c:	ldr	r1, [pc, #56]	; 2298c <flatcc_builder_table_add_union_vector@@Base+0xe0>
   22950:	ldr	r0, [pc, #72]	; 229a0 <flatcc_builder_table_add_union_vector@@Base+0xf4>
   22954:	b	228e0 <flatcc_builder_table_add_union_vector@@Base+0x34>
   22958:	str	r4, [r0]
   2295c:	mov	r1, r7
   22960:	mov	r0, r6
   22964:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   22968:	cmp	r0, #0
   2296c:	strne	r5, [r0]
   22970:	movne	r0, #0
   22974:	ldreq	r3, [pc, #12]	; 22988 <flatcc_builder_table_add_union_vector@@Base+0xdc>
   22978:	ldreq	r2, [pc, #36]	; 229a4 <flatcc_builder_table_add_union_vector@@Base+0xf8>
   2297c:	beq	2294c <flatcc_builder_table_add_union_vector@@Base+0xa0>
   22980:	add	sp, sp, #12
   22984:	pop	{r4, r5, r6, r7, pc}
   22988:	andeq	r1, r3, sl, ror fp
   2298c:	ldrdeq	r1, [r3], -sl
   22990:	andeq	r1, r3, r9, ror lr
   22994:	andeq	r0, r0, r1, lsl #12
   22998:	andeq	r1, r3, r9, lsl #31
   2299c:	andeq	r0, r0, r4, lsl #12
   229a0:	andeq	r1, r3, r3, ror pc
   229a4:	andeq	r0, r0, r8, lsl #12

000229a8 <flatcc_builder_push_buffer_alignment@@Base>:
   229a8:	mov	r3, r0
   229ac:	mov	r2, #4
   229b0:	ldrh	r0, [r0, #128]	; 0x80
   229b4:	strh	r2, [r3, #128]	; 0x80
   229b8:	bx	lr

000229bc <flatcc_builder_pop_buffer_alignment@@Base>:
   229bc:	ldrh	r3, [r0, #128]	; 0x80
   229c0:	cmp	r3, r1
   229c4:	strhcc	r1, [r0, #128]	; 0x80
   229c8:	bx	lr

000229cc <flatcc_builder_get_buffer_alignment@@Base>:
   229cc:	ldrh	r0, [r0, #128]	; 0x80
   229d0:	bx	lr

000229d4 <flatcc_builder_set_vtable_clustering@@Base>:
   229d4:	clz	r1, r1
   229d8:	lsr	r1, r1, #5
   229dc:	str	r1, [r0, #180]	; 0xb4
   229e0:	bx	lr

000229e4 <flatcc_builder_set_block_align@@Base>:
   229e4:	strh	r1, [r0, #132]	; 0x84
   229e8:	bx	lr

000229ec <flatcc_builder_get_level@@Base>:
   229ec:	ldr	r0, [r0, #156]	; 0x9c
   229f0:	bx	lr

000229f4 <flatcc_builder_set_max_level@@Base>:
   229f4:	ldr	r3, [r0, #160]	; 0xa0
   229f8:	str	r1, [r0, #176]	; 0xb0
   229fc:	cmp	r1, r3
   22a00:	strgt	r1, [r0, #160]	; 0xa0
   22a04:	bx	lr

00022a08 <flatcc_builder_get_buffer_size@@Base>:
   22a08:	ldr	r2, [r0, #140]	; 0x8c
   22a0c:	ldr	r0, [r0, #136]	; 0x88
   22a10:	sub	r0, r2, r0
   22a14:	bx	lr

00022a18 <flatcc_builder_get_buffer_start@@Base>:
   22a18:	ldr	r0, [r0, #136]	; 0x88
   22a1c:	bx	lr

00022a20 <flatcc_builder_get_buffer_end@@Base>:
   22a20:	ldr	r0, [r0, #140]	; 0x8c
   22a24:	bx	lr

00022a28 <flatcc_builder_set_vtable_cache_limit@@Base>:
   22a28:	str	r1, [r0, #172]	; 0xac
   22a2c:	bx	lr

00022a30 <flatcc_builder_set_identifier@@Base>:
   22a30:	ldr	r3, [pc, #16]	; 22a48 <flatcc_builder_set_identifier@@Base+0x18>
   22a34:	cmp	r1, #0
   22a38:	moveq	r1, r3
   22a3c:	ldr	r3, [r1]
   22a40:	str	r3, [r0, #168]	; 0xa8
   22a44:	bx	lr
   22a48:	strdeq	r1, [r3], -r4

00022a4c <flatcc_builder_get_type@@Base>:
   22a4c:	ldr	r0, [r0, #32]
   22a50:	cmp	r0, #0
   22a54:	ldrhne	r0, [r0, #14]
   22a58:	bx	lr

00022a5c <flatcc_builder_get_type_at@@Base>:
   22a5c:	cmp	r1, #0
   22a60:	ble	22a88 <flatcc_builder_get_type_at@@Base+0x2c>
   22a64:	ldr	r3, [r0, #156]	; 0x9c
   22a68:	cmp	r1, r3
   22a6c:	bgt	22a88 <flatcc_builder_get_type_at@@Base+0x2c>
   22a70:	sub	r1, r1, r3
   22a74:	mov	r2, #36	; 0x24
   22a78:	ldr	r3, [r0, #32]
   22a7c:	mla	r1, r2, r1, r3
   22a80:	ldrh	r0, [r1, #14]
   22a84:	bx	lr
   22a88:	mov	r0, #0
   22a8c:	bx	lr

00022a90 <flatcc_builder_get_direct_buffer@@Base>:
   22a90:	ldr	r3, [r0, #184]	; 0xb8
   22a94:	cmp	r3, #0
   22a98:	beq	22ac0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   22a9c:	ldr	r2, [r0, #188]	; 0xbc
   22aa0:	ldr	r3, [r0, #192]	; 0xc0
   22aa4:	cmp	r2, r3
   22aa8:	bne	22ac0 <flatcc_builder_get_direct_buffer@@Base+0x30>
   22aac:	cmp	r1, #0
   22ab0:	ldrne	r3, [r0, #212]	; 0xd4
   22ab4:	ldr	r0, [r0, #196]	; 0xc4
   22ab8:	strne	r3, [r1]
   22abc:	bx	lr
   22ac0:	mov	r0, #0
   22ac4:	cmp	r1, #0
   22ac8:	strne	r0, [r1]
   22acc:	moveq	r0, r1
   22ad0:	bx	lr

00022ad4 <flatcc_builder_copy_buffer@@Base>:
   22ad4:	ldr	r3, [r0, #184]	; 0xb8
   22ad8:	cmp	r3, #0
   22adc:	beq	22b08 <flatcc_builder_copy_buffer@@Base+0x34>
   22ae0:	push	{r4, lr}
   22ae4:	add	r0, r0, #188	; 0xbc
   22ae8:	bl	230c8 <flatcc_emitter_copy_buffer@@Base>
   22aec:	cmp	r0, #0
   22af0:	popne	{r4, pc}
   22af4:	ldr	r3, [pc, #20]	; 22b10 <flatcc_builder_copy_buffer@@Base+0x3c>
   22af8:	ldr	r2, [pc, #20]	; 22b14 <flatcc_builder_copy_buffer@@Base+0x40>
   22afc:	ldr	r1, [pc, #20]	; 22b18 <flatcc_builder_copy_buffer@@Base+0x44>
   22b00:	ldr	r0, [pc, #20]	; 22b1c <flatcc_builder_copy_buffer@@Base+0x48>
   22b04:	bl	14648 <__assert_fail@plt>
   22b08:	mov	r0, r3
   22b0c:	bx	lr
   22b10:	andeq	r1, r3, r0, lsr #23
   22b14:	andeq	r0, r0, r6, lsl #15
   22b18:	ldrdeq	r1, [r3], -sl
   22b1c:			; <UNDEFINED> instruction: 0x0002eab4

00022b20 <flatcc_builder_finalize_buffer@@Base>:
   22b20:	push	{r4, r5, r6, lr}
   22b24:	cmp	r1, #0
   22b28:	ldr	r4, [r0, #140]	; 0x8c
   22b2c:	ldr	r2, [r0, #136]	; 0x88
   22b30:	mov	r5, r0
   22b34:	sub	r4, r4, r2
   22b38:	strne	r4, [r1]
   22b3c:	mov	r0, r4
   22b40:	bl	145a0 <malloc@plt>
   22b44:	subs	r6, r0, #0
   22b48:	bne	22b60 <flatcc_builder_finalize_buffer@@Base+0x40>
   22b4c:	ldr	r3, [pc, #52]	; 22b88 <flatcc_builder_finalize_buffer@@Base+0x68>
   22b50:	ldr	r2, [pc, #52]	; 22b8c <flatcc_builder_finalize_buffer@@Base+0x6c>
   22b54:	ldr	r1, [pc, #52]	; 22b90 <flatcc_builder_finalize_buffer@@Base+0x70>
   22b58:	ldr	r0, [pc, #52]	; 22b94 <flatcc_builder_finalize_buffer@@Base+0x74>
   22b5c:	bl	14648 <__assert_fail@plt>
   22b60:	mov	r2, r4
   22b64:	mov	r1, r6
   22b68:	mov	r0, r5
   22b6c:	bl	22ad4 <flatcc_builder_copy_buffer@@Base>
   22b70:	cmp	r0, #0
   22b74:	ldreq	r3, [pc, #12]	; 22b88 <flatcc_builder_finalize_buffer@@Base+0x68>
   22b78:	ldreq	r2, [pc, #24]	; 22b98 <flatcc_builder_finalize_buffer@@Base+0x78>
   22b7c:	beq	22b54 <flatcc_builder_finalize_buffer@@Base+0x34>
   22b80:	mov	r0, r6
   22b84:	pop	{r4, r5, r6, pc}
   22b88:			; <UNDEFINED> instruction: 0x00031bbb
   22b8c:	muleq	r0, r8, r7
   22b90:	ldrdeq	r1, [r3], -sl
   22b94:	andeq	r1, r3, r7, asr #24
   22b98:	muleq	r0, ip, r7

00022b9c <flatcc_builder_finalize_aligned_buffer@@Base>:
   22b9c:	push	{r4, r5, r6, r7, r8, lr}
   22ba0:	mov	r6, r0
   22ba4:	ldr	r4, [r0, #140]	; 0x8c
   22ba8:	ldr	r2, [r0, #136]	; 0x88
   22bac:	ldrh	r0, [r0, #128]	; 0x80
   22bb0:	subs	r7, r1, #0
   22bb4:	sub	r2, r4, r2
   22bb8:	sub	r4, r0, #1
   22bbc:	strne	r2, [r7]
   22bc0:	add	r4, r4, r2
   22bc4:	rsb	r2, r0, #0
   22bc8:	and	r4, r4, r2
   22bcc:	mov	r1, r4
   22bd0:	bl	1feec <union_vector_tests@@Base+0x2d0>
   22bd4:	subs	r5, r0, #0
   22bd8:	beq	22c00 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   22bdc:	mov	r2, r4
   22be0:	mov	r1, r5
   22be4:	mov	r0, r6
   22be8:	bl	22ad4 <flatcc_builder_copy_buffer@@Base>
   22bec:	subs	r4, r0, #0
   22bf0:	bne	22c00 <flatcc_builder_finalize_aligned_buffer@@Base+0x64>
   22bf4:	mov	r0, r5
   22bf8:	bl	14564 <free@plt>
   22bfc:	mov	r5, r4
   22c00:	cmp	r7, #0
   22c04:	clz	r3, r5
   22c08:	lsr	r3, r3, #5
   22c0c:	moveq	r3, #0
   22c10:	cmp	r3, #0
   22c14:	movne	r3, #0
   22c18:	strne	r3, [r7]
   22c1c:	mov	r0, r5
   22c20:	pop	{r4, r5, r6, r7, r8, pc}

00022c24 <flatcc_builder_aligned_alloc@@Base>:
   22c24:	b	1feec <union_vector_tests@@Base+0x2d0>

00022c28 <flatcc_builder_aligned_free@@Base>:
   22c28:	b	14564 <free@plt>

00022c2c <flatcc_builder_get_emit_context@@Base>:
   22c2c:	ldr	r0, [r0, #36]	; 0x24
   22c30:	bx	lr

00022c34 <flatcc_emitter_recycle_page@@Base>:
   22c34:	ldr	r3, [r0]
   22c38:	cmp	r3, r1
   22c3c:	beq	22c80 <flatcc_emitter_recycle_page@@Base+0x4c>
   22c40:	ldr	r2, [r0, #4]
   22c44:	cmp	r1, r2
   22c48:	beq	22c80 <flatcc_emitter_recycle_page@@Base+0x4c>
   22c4c:	ldr	r2, [r1, #2944]	; 0xb80
   22c50:	ldr	r0, [r1, #2948]	; 0xb84
   22c54:	str	r0, [r2, #2948]	; 0xb84
   22c58:	ldr	r0, [r1, #2948]	; 0xb84
   22c5c:	str	r2, [r0, #2944]	; 0xb80
   22c60:	ldr	r2, [r3, #2948]	; 0xb84
   22c64:	str	r3, [r1, #2944]	; 0xb80
   22c68:	str	r2, [r1, #2948]	; 0xb84
   22c6c:	str	r1, [r2, #2944]	; 0xb80
   22c70:	ldr	r3, [r1, #2944]	; 0xb80
   22c74:	mov	r0, #0
   22c78:	str	r1, [r3, #2948]	; 0xb84
   22c7c:	bx	lr
   22c80:	mvn	r0, #0
   22c84:	bx	lr

00022c88 <flatcc_emitter_reset@@Base>:
   22c88:	ldr	r3, [r0]
   22c8c:	cmp	r3, #0
   22c90:	bxeq	lr
   22c94:	add	r2, r3, #1472	; 0x5c0
   22c98:	push	{r4, lr}
   22c9c:	mov	r4, r0
   22ca0:	str	r2, [r0, #8]
   22ca4:	str	r2, [r0, #16]
   22ca8:	mov	r2, #1472	; 0x5c0
   22cac:	str	r2, [r0, #12]
   22cb0:	str	r2, [r0, #20]
   22cb4:	sub	r2, r2, #2944	; 0xb80
   22cb8:	str	r3, [r0, #4]
   22cbc:	str	r2, [r3, #2952]	; 0xb88
   22cc0:	ldr	r3, [r0, #32]
   22cc4:	cmp	r3, #0
   22cc8:	ldr	r3, [r0, #24]
   22ccc:	streq	r3, [r0, #32]
   22cd0:	ldr	r2, [r0, #32]
   22cd4:	lsr	r3, r3, #2
   22cd8:	add	r2, r2, r2, lsl #1
   22cdc:	add	r3, r3, r2, lsr #2
   22ce0:	str	r3, [r0, #32]
   22ce4:	mov	r3, #0
   22ce8:	str	r3, [r0, #24]
   22cec:	ldr	r2, [r4, #32]
   22cf0:	ldr	r3, [r4, #28]
   22cf4:	cmp	r3, r2, lsl #1
   22cf8:	popls	{r4, pc}
   22cfc:	ldr	r3, [r4, #4]
   22d00:	ldr	r2, [r4]
   22d04:	ldr	r0, [r3, #2944]	; 0xb80
   22d08:	cmp	r0, r2
   22d0c:	bne	22d14 <flatcc_emitter_reset@@Base+0x8c>
   22d10:	pop	{r4, pc}
   22d14:	ldr	r2, [r0, #2944]	; 0xb80
   22d18:	str	r2, [r3, #2944]	; 0xb80
   22d1c:	ldr	r2, [r0, #2944]	; 0xb80
   22d20:	str	r3, [r2, #2948]	; 0xb84
   22d24:	bl	14564 <free@plt>
   22d28:	ldr	r3, [r4, #28]
   22d2c:	sub	r3, r3, #2944	; 0xb80
   22d30:	str	r3, [r4, #28]
   22d34:	b	22cec <flatcc_emitter_reset@@Base+0x64>

00022d38 <flatcc_emitter_clear@@Base>:
   22d38:	ldr	r3, [r0]
   22d3c:	cmp	r3, #0
   22d40:	bxeq	lr
   22d44:	ldr	r2, [r3, #2948]	; 0xb84
   22d48:	push	{r4, r5, r6, lr}
   22d4c:	mov	r4, r0
   22d50:	mov	r1, #0
   22d54:	str	r1, [r2, #2944]	; 0xb80
   22d58:	ldr	r5, [r3, #2944]	; 0xb80
   22d5c:	cmp	r5, #0
   22d60:	bne	22d80 <flatcc_emitter_clear@@Base+0x48>
   22d64:	mov	r0, r3
   22d68:	bl	14564 <free@plt>
   22d6c:	mov	r1, r5
   22d70:	mov	r0, r4
   22d74:	mov	r2, #36	; 0x24
   22d78:	pop	{r4, r5, r6, lr}
   22d7c:	b	145e8 <memset@plt>
   22d80:	ldr	r0, [r5, #2948]	; 0xb84
   22d84:	bl	14564 <free@plt>
   22d88:	mov	r3, r5
   22d8c:	b	22d58 <flatcc_emitter_clear@@Base+0x20>

00022d90 <flatcc_emitter@@Base>:
   22d90:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22d94:	mov	r4, r0
   22d98:	ldr	r0, [sp, #48]	; 0x30
   22d9c:	ldr	ip, [r4, #24]
   22da0:	cmp	r3, #0
   22da4:	add	ip, ip, r0
   22da8:	str	ip, [r4, #24]
   22dac:	bge	22f5c <flatcc_emitter@@Base+0x1cc>
   22db0:	ldr	ip, [r4, #12]
   22db4:	cmp	r0, ip
   22db8:	bhi	22e00 <flatcc_emitter@@Base+0x70>
   22dbc:	ldr	r3, [r4, #8]
   22dc0:	sub	r3, r3, r0
   22dc4:	sub	r0, ip, r0
   22dc8:	str	r3, [r4, #8]
   22dcc:	str	r0, [r4, #12]
   22dd0:	mov	r4, r1
   22dd4:	mov	r5, r2
   22dd8:	cmp	r5, #0
   22ddc:	add	r4, r4, #8
   22de0:	beq	22e18 <flatcc_emitter@@Base+0x88>
   22de4:	ldmdb	r4, {r1, r2}
   22de8:	mov	r0, r3
   22dec:	bl	14570 <memcpy@plt>
   22df0:	ldr	r2, [r4, #-4]
   22df4:	sub	r5, r5, #1
   22df8:	add	r3, r0, r2
   22dfc:	b	22dd8 <flatcc_emitter@@Base+0x48>
   22e00:	ldr	sl, [pc, #696]	; 230c0 <flatcc_emitter@@Base+0x330>
   22e04:	add	r5, r1, r2, lsl #3
   22e08:	sub	r6, r2, #1
   22e0c:	mov	r9, #2944	; 0xb80
   22e10:	cmn	r6, #1
   22e14:	bne	22e20 <flatcc_emitter@@Base+0x90>
   22e18:	mov	r0, #0
   22e1c:	b	22ec4 <flatcc_emitter@@Base+0x134>
   22e20:	ldr	r7, [r5, #-4]
   22e24:	ldr	fp, [r5, #-8]
   22e28:	mov	r8, #1472	; 0x5c0
   22e2c:	add	fp, fp, r7
   22e30:	cmp	r7, #0
   22e34:	subeq	r5, r5, #8
   22e38:	subeq	r6, r6, #1
   22e3c:	beq	22e10 <flatcc_emitter@@Base+0x80>
   22e40:	ldr	r3, [r4, #12]
   22e44:	cmp	r3, r7
   22e48:	bcs	22f2c <flatcc_emitter@@Base+0x19c>
   22e4c:	cmp	r3, #0
   22e50:	movne	r2, r3
   22e54:	bne	22f30 <flatcc_emitter@@Base+0x1a0>
   22e58:	ldr	r3, [r4]
   22e5c:	cmp	r3, #0
   22e60:	beq	22ea8 <flatcc_emitter@@Base+0x118>
   22e64:	ldr	r2, [r3, #2948]	; 0xb84
   22e68:	ldr	r1, [r4, #4]
   22e6c:	cmp	r2, r1
   22e70:	beq	22ea8 <flatcc_emitter@@Base+0x118>
   22e74:	ldr	r3, [r3, #2952]	; 0xb88
   22e78:	sub	r3, r3, #2944	; 0xb80
   22e7c:	str	r3, [r2, #2952]	; 0xb88
   22e80:	str	r2, [r4]
   22e84:	ldr	r3, [r4]
   22e88:	str	r9, [r4, #12]
   22e8c:	add	r2, r3, #2944	; 0xb80
   22e90:	str	r2, [r4, #8]
   22e94:	ldr	r2, [r3, #2944]	; 0xb80
   22e98:	ldr	r2, [r2, #2952]	; 0xb88
   22e9c:	sub	r2, r2, #2944	; 0xb80
   22ea0:	str	r2, [r3, #2952]	; 0xb88
   22ea4:	b	22e30 <flatcc_emitter@@Base+0xa0>
   22ea8:	mov	r0, sl
   22eac:	str	r3, [sp, #4]
   22eb0:	bl	145a0 <malloc@plt>
   22eb4:	ldr	r3, [sp, #4]
   22eb8:	cmp	r0, #0
   22ebc:	bne	22ecc <flatcc_emitter@@Base+0x13c>
   22ec0:	mvn	r0, #0
   22ec4:	add	sp, sp, #12
   22ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22ecc:	ldr	r2, [r4, #28]
   22ed0:	cmp	r3, #0
   22ed4:	add	r2, r2, #2944	; 0xb80
   22ed8:	str	r2, [r4, #28]
   22edc:	beq	22efc <flatcc_emitter@@Base+0x16c>
   22ee0:	ldr	r2, [r4, #4]
   22ee4:	str	r3, [r0, #2944]	; 0xb80
   22ee8:	str	r2, [r0, #2948]	; 0xb84
   22eec:	str	r0, [r3, #2948]	; 0xb84
   22ef0:	str	r0, [r2, #2944]	; 0xb80
   22ef4:	str	r0, [r4]
   22ef8:	b	22e84 <flatcc_emitter@@Base+0xf4>
   22efc:	add	r3, r0, #1472	; 0x5c0
   22f00:	str	r3, [r4, #8]
   22f04:	str	r3, [r4, #16]
   22f08:	ldr	r3, [pc, #436]	; 230c4 <flatcc_emitter@@Base+0x334>
   22f0c:	str	r0, [r4]
   22f10:	str	r0, [r4, #4]
   22f14:	str	r0, [r0, #2944]	; 0xb80
   22f18:	str	r0, [r0, #2948]	; 0xb84
   22f1c:	str	r8, [r4, #12]
   22f20:	str	r8, [r4, #20]
   22f24:	str	r3, [r0, #2952]	; 0xb88
   22f28:	b	22e30 <flatcc_emitter@@Base+0xa0>
   22f2c:	mov	r2, r7
   22f30:	ldr	r0, [r4, #8]
   22f34:	rsb	r1, r2, #0
   22f38:	add	r0, r0, r1
   22f3c:	sub	r3, r3, r2
   22f40:	add	fp, fp, r1
   22f44:	str	r0, [r4, #8]
   22f48:	str	r3, [r4, #12]
   22f4c:	mov	r1, fp
   22f50:	sub	r7, r7, r2
   22f54:	bl	14570 <memcpy@plt>
   22f58:	b	22e30 <flatcc_emitter@@Base+0xa0>
   22f5c:	ldr	ip, [r4, #20]
   22f60:	cmp	r0, ip
   22f64:	bls	22fa0 <flatcc_emitter@@Base+0x210>
   22f68:	ldr	sl, [pc, #336]	; 230c0 <flatcc_emitter@@Base+0x330>
   22f6c:	mov	r6, r2
   22f70:	add	r5, r1, #8
   22f74:	mov	r9, #2944	; 0xb80
   22f78:	cmp	r6, #0
   22f7c:	beq	22e18 <flatcc_emitter@@Base+0x88>
   22f80:	ldr	r7, [r5, #-4]
   22f84:	ldr	fp, [r5, #-8]
   22f88:	mov	r8, #1472	; 0x5c0
   22f8c:	cmp	r7, #0
   22f90:	bne	22fb8 <flatcc_emitter@@Base+0x228>
   22f94:	sub	r6, r6, #1
   22f98:	add	r5, r5, #8
   22f9c:	b	22f78 <flatcc_emitter@@Base+0x1e8>
   22fa0:	ldr	r3, [r4, #16]
   22fa4:	add	lr, r3, r0
   22fa8:	sub	r0, ip, r0
   22fac:	str	lr, [r4, #16]
   22fb0:	str	r0, [r4, #20]
   22fb4:	b	22dd0 <flatcc_emitter@@Base+0x40>
   22fb8:	ldr	r3, [r4, #20]
   22fbc:	cmp	r3, r7
   22fc0:	bcs	23080 <flatcc_emitter@@Base+0x2f0>
   22fc4:	cmp	r3, #0
   22fc8:	bne	23084 <flatcc_emitter@@Base+0x2f4>
   22fcc:	ldr	r3, [r4, #4]
   22fd0:	cmp	r3, #0
   22fd4:	beq	22fec <flatcc_emitter@@Base+0x25c>
   22fd8:	ldr	r2, [r3, #2944]	; 0xb80
   22fdc:	ldr	r1, [r4]
   22fe0:	cmp	r2, r1
   22fe4:	strne	r2, [r4, #4]
   22fe8:	bne	23030 <flatcc_emitter@@Base+0x2a0>
   22fec:	mov	r0, sl
   22ff0:	str	r3, [sp, #4]
   22ff4:	bl	145a0 <malloc@plt>
   22ff8:	cmp	r0, #0
   22ffc:	beq	22ec0 <flatcc_emitter@@Base+0x130>
   23000:	ldr	r2, [r4, #28]
   23004:	ldr	r3, [sp, #4]
   23008:	add	r2, r2, #2944	; 0xb80
   2300c:	cmp	r3, #0
   23010:	str	r2, [r4, #28]
   23014:	beq	23050 <flatcc_emitter@@Base+0x2c0>
   23018:	ldr	r2, [r4]
   2301c:	str	r3, [r0, #2948]	; 0xb84
   23020:	str	r2, [r0, #2944]	; 0xb80
   23024:	str	r0, [r2, #2948]	; 0xb84
   23028:	str	r0, [r3, #2944]	; 0xb80
   2302c:	str	r0, [r4, #4]
   23030:	ldr	r3, [r4, #4]
   23034:	str	r9, [r4, #20]
   23038:	str	r3, [r4, #16]
   2303c:	ldr	r2, [r3, #2948]	; 0xb84
   23040:	ldr	r2, [r2, #2952]	; 0xb88
   23044:	add	r2, r2, #2944	; 0xb80
   23048:	str	r2, [r3, #2952]	; 0xb88
   2304c:	b	22f8c <flatcc_emitter@@Base+0x1fc>
   23050:	add	r3, r0, #1472	; 0x5c0
   23054:	str	r3, [r4, #8]
   23058:	str	r3, [r4, #16]
   2305c:	ldr	r3, [pc, #96]	; 230c4 <flatcc_emitter@@Base+0x334>
   23060:	str	r0, [r4]
   23064:	str	r0, [r4, #4]
   23068:	str	r0, [r0, #2944]	; 0xb80
   2306c:	str	r0, [r0, #2948]	; 0xb84
   23070:	str	r8, [r4, #12]
   23074:	str	r8, [r4, #20]
   23078:	str	r3, [r0, #2952]	; 0xb88
   2307c:	b	22f8c <flatcc_emitter@@Base+0x1fc>
   23080:	mov	r3, r7
   23084:	mov	r2, r3
   23088:	mov	r1, fp
   2308c:	ldr	r0, [r4, #16]
   23090:	str	r3, [sp, #4]
   23094:	bl	14570 <memcpy@plt>
   23098:	ldr	r3, [sp, #4]
   2309c:	ldr	r2, [r4, #16]
   230a0:	sub	r7, r7, r3
   230a4:	add	r2, r2, r3
   230a8:	str	r2, [r4, #16]
   230ac:	ldr	r2, [r4, #20]
   230b0:	add	fp, fp, r3
   230b4:	sub	r3, r2, r3
   230b8:	str	r3, [r4, #20]
   230bc:	b	22f8c <flatcc_emitter@@Base+0x1fc>
   230c0:	andeq	r0, r0, ip, lsl #23
   230c4:			; <UNDEFINED> instruction: 0xfffffa40

000230c8 <flatcc_emitter_copy_buffer@@Base>:
   230c8:	push	{r4, r5, r6, lr}
   230cc:	mov	r4, r0
   230d0:	ldr	r0, [r0, #24]
   230d4:	cmp	r0, r2
   230d8:	movhi	r3, #0
   230dc:	bhi	23150 <flatcc_emitter_copy_buffer@@Base+0x88>
   230e0:	ldr	r2, [r4]
   230e4:	cmp	r2, #0
   230e8:	moveq	r3, r2
   230ec:	beq	23150 <flatcc_emitter_copy_buffer@@Base+0x88>
   230f0:	mov	r3, r1
   230f4:	ldr	r1, [r4, #4]
   230f8:	cmp	r2, r1
   230fc:	moveq	r2, r0
   23100:	ldr	r1, [r4, #8]
   23104:	beq	23144 <flatcc_emitter_copy_buffer@@Base+0x7c>
   23108:	ldr	r5, [r4, #12]
   2310c:	mov	r0, r3
   23110:	rsb	r5, r5, #2944	; 0xb80
   23114:	mov	r2, r5
   23118:	bl	14570 <memcpy@plt>
   2311c:	ldr	r2, [r4]
   23120:	mov	r6, #2944	; 0xb80
   23124:	add	r3, r0, r5
   23128:	ldr	r5, [r2, #2944]	; 0xb80
   2312c:	ldr	r2, [r4, #4]
   23130:	cmp	r5, r2
   23134:	bne	23158 <flatcc_emitter_copy_buffer@@Base+0x90>
   23138:	ldr	r2, [r4, #20]
   2313c:	mov	r1, r5
   23140:	rsb	r2, r2, #2944	; 0xb80
   23144:	mov	r0, r3
   23148:	bl	14570 <memcpy@plt>
   2314c:	mov	r3, r0
   23150:	mov	r0, r3
   23154:	pop	{r4, r5, r6, pc}
   23158:	mov	r1, r5
   2315c:	mov	r0, r3
   23160:	mov	r2, r6
   23164:	bl	14570 <memcpy@plt>
   23168:	ldr	r5, [r5, #2944]	; 0xb80
   2316c:	add	r3, r0, #2944	; 0xb80
   23170:	b	2312c <flatcc_emitter_copy_buffer@@Base+0x64>
   23174:	add	r1, r1, #2
   23178:	ldrh	r3, [r0, #22]
   2317c:	lsl	r1, r1, #1
   23180:	uxth	r1, r1
   23184:	cmp	r3, r1
   23188:	ldrhi	r3, [r0, #12]
   2318c:	ldrhhi	r0, [r3, r1]
   23190:	movls	r0, #0
   23194:	bx	lr
   23198:	push	{r4, lr}
   2319c:	mov	r2, r0
   231a0:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   231a4:	uxth	r3, r0
   231a8:	cmp	r3, #0
   231ac:	ldrne	r3, [r2, #16]
   231b0:	uxtahne	r3, r3, r0
   231b4:	ldrne	r0, [r2]
   231b8:	addne	r0, r0, r3
   231bc:	moveq	r0, r3
   231c0:	pop	{r4, pc}
   231c4:	push	{r4, r5, r6, lr}
   231c8:	mov	r4, r3
   231cc:	mov	r5, r0
   231d0:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   231d4:	uxth	r3, r0
   231d8:	cmp	r3, #0
   231dc:	bne	231f8 <flatcc_emitter_copy_buffer@@Base+0x130>
   231e0:	cmp	r2, #0
   231e4:	movne	r2, #4
   231e8:	moveq	r2, #0
   231ec:	str	r3, [r4]
   231f0:	mov	r0, r2
   231f4:	pop	{r4, r5, r6, pc}
   231f8:	ldrh	r3, [r5, #20]
   231fc:	uxth	r1, r0
   23200:	add	r2, r1, #4
   23204:	cmp	r2, r3
   23208:	movhi	r2, #13
   2320c:	bhi	231f0 <flatcc_emitter_copy_buffer@@Base+0x128>
   23210:	ldr	r0, [r5, #16]
   23214:	add	r1, r1, r0
   23218:	ands	r2, r1, #3
   2321c:	streq	r1, [r4]
   23220:	movne	r2, #12
   23224:	b	231f0 <flatcc_emitter_copy_buffer@@Base+0x128>
   23228:	push	{r4, lr}
   2322c:	sub	sp, sp, #24
   23230:	ldr	ip, [sp, #32]
   23234:	sub	ip, ip, #1
   23238:	cmp	ip, #0
   2323c:	str	ip, [sp, #8]
   23240:	moveq	r0, #3
   23244:	beq	23300 <flatcc_emitter_copy_buffer@@Base+0x238>
   23248:	add	r3, r2, r3
   2324c:	cmp	r2, r3
   23250:	bcs	23268 <flatcc_emitter_copy_buffer@@Base+0x1a0>
   23254:	add	r2, r3, #4
   23258:	cmp	r1, r2
   2325c:	bcc	23268 <flatcc_emitter_copy_buffer@@Base+0x1a0>
   23260:	tst	r3, #3
   23264:	beq	23270 <flatcc_emitter_copy_buffer@@Base+0x1a8>
   23268:	mov	r0, #15
   2326c:	b	23300 <flatcc_emitter_copy_buffer@@Base+0x238>
   23270:	ldr	r2, [r0, r3]
   23274:	str	r3, [sp, #16]
   23278:	subs	r2, r3, r2
   2327c:	bmi	23288 <flatcc_emitter_copy_buffer@@Base+0x1c0>
   23280:	tst	r2, #1
   23284:	beq	23290 <flatcc_emitter_copy_buffer@@Base+0x1c8>
   23288:	mov	r0, #29
   2328c:	b	23300 <flatcc_emitter_copy_buffer@@Base+0x238>
   23290:	add	lr, r2, #2
   23294:	cmp	r1, lr
   23298:	movcc	r0, #27
   2329c:	bcc	23300 <flatcc_emitter_copy_buffer@@Base+0x238>
   232a0:	ldrh	ip, [r0, r2]
   232a4:	add	r4, r0, r2
   232a8:	add	r2, ip, r2
   232ac:	cmp	r1, r2
   232b0:	strh	ip, [sp, #22]
   232b4:	bcc	232c0 <flatcc_emitter_copy_buffer@@Base+0x1f8>
   232b8:	tst	ip, #1
   232bc:	beq	232c8 <flatcc_emitter_copy_buffer@@Base+0x200>
   232c0:	mov	r0, #30
   232c4:	b	23300 <flatcc_emitter_copy_buffer@@Base+0x238>
   232c8:	cmp	ip, #3
   232cc:	movls	r0, #28
   232d0:	bls	23300 <flatcc_emitter_copy_buffer@@Base+0x238>
   232d4:	ldrh	r2, [r0, lr]
   232d8:	sub	r3, r1, r3
   232dc:	cmp	r3, r2
   232e0:	strh	r2, [sp, #20]
   232e4:	movcc	r0, #20
   232e8:	bcc	23300 <flatcc_emitter_copy_buffer@@Base+0x238>
   232ec:	stm	sp, {r0, r1}
   232f0:	ldr	r3, [sp, #36]	; 0x24
   232f4:	mov	r0, sp
   232f8:	str	r4, [sp, #12]
   232fc:	blx	r3
   23300:	add	sp, sp, #24
   23304:	pop	{r4, pc}
   23308:	add	r3, r2, r3
   2330c:	cmp	r2, r3
   23310:	ldrh	ip, [sp, #4]
   23314:	bcs	2333c <flatcc_emitter_copy_buffer@@Base+0x274>
   23318:	add	r2, r3, #4
   2331c:	cmp	r1, r2
   23320:	bcc	2333c <flatcc_emitter_copy_buffer@@Base+0x274>
   23324:	cmp	ip, #4
   23328:	movcc	ip, #4
   2332c:	sub	ip, ip, #1
   23330:	orr	ip, ip, #3
   23334:	tst	ip, r2
   23338:	beq	2334c <flatcc_emitter_copy_buffer@@Base+0x284>
   2333c:	mov	r0, #16
   23340:	bx	lr
   23344:	mov	r0, #25
   23348:	bx	lr
   2334c:	ldr	r3, [r0, r3]
   23350:	ldr	r0, [sp, #8]
   23354:	cmp	r0, r3
   23358:	bcc	23344 <flatcc_emitter_copy_buffer@@Base+0x27c>
   2335c:	ldr	r0, [sp]
   23360:	sub	r1, r1, r2
   23364:	mul	r0, r3, r0
   23368:	cmp	r1, r0
   2336c:	movcc	r0, #26
   23370:	movcs	r0, #0
   23374:	bx	lr
   23378:	add	r3, r2, r3
   2337c:	cmp	r2, r3
   23380:	bcs	23398 <flatcc_emitter_copy_buffer@@Base+0x2d0>
   23384:	add	r2, r3, #4
   23388:	cmp	r1, r2
   2338c:	bcc	23398 <flatcc_emitter_copy_buffer@@Base+0x2d0>
   23390:	tst	r3, #3
   23394:	beq	233a8 <flatcc_emitter_copy_buffer@@Base+0x2e0>
   23398:	mov	r0, #17
   2339c:	bx	lr
   233a0:	mov	r0, #8
   233a4:	bx	lr
   233a8:	ldr	r3, [r0, r3]
   233ac:	sub	r1, r1, r2
   233b0:	add	ip, r3, #1
   233b4:	cmp	r1, ip
   233b8:	bcc	233a0 <flatcc_emitter_copy_buffer@@Base+0x2d8>
   233bc:	add	r0, r0, r2
   233c0:	ldrb	r0, [r0, r3]
   233c4:	cmp	r0, #0
   233c8:	movne	r0, #7
   233cc:	moveq	r0, #0
   233d0:	bx	lr

000233d4 <flatcc_verify_error_string@@Base>:
   233d4:	cmp	r0, #36	; 0x24
   233d8:	ldrls	r3, [pc, #8]	; 233e8 <flatcc_verify_error_string@@Base+0x14>
   233dc:	ldrls	r0, [r3, r0, lsl #2]
   233e0:	ldrhi	r0, [pc, #4]	; 233ec <flatcc_verify_error_string@@Base+0x18>
   233e4:	bx	lr
   233e8:			; <UNDEFINED> instruction: 0x00031fb4
   233ec:	andeq	r2, r3, r8, asr #32

000233f0 <flatcc_verify_field@@Base>:
   233f0:	push	{r4, r5, r6, lr}
   233f4:	mov	r5, r0
   233f8:	mov	r4, r3
   233fc:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   23400:	uxth	r1, r0
   23404:	cmp	r1, #0
   23408:	beq	23440 <flatcc_verify_field@@Base+0x50>
   2340c:	ldrh	r3, [r5, #20]
   23410:	add	r2, r2, r1
   23414:	cmp	r2, r3
   23418:	bhi	23448 <flatcc_verify_field@@Base+0x58>
   2341c:	ldr	r0, [r5]
   23420:	ldr	r3, [r5, #16]
   23424:	sub	r4, r4, #1
   23428:	add	r0, r0, r3
   2342c:	add	r0, r0, r1
   23430:	tst	r0, r4
   23434:	moveq	r0, #0
   23438:	movne	r0, #12
   2343c:	pop	{r4, r5, r6, pc}
   23440:	mov	r0, r1
   23444:	pop	{r4, r5, r6, pc}
   23448:	mov	r0, #13
   2344c:	pop	{r4, r5, r6, pc}

00023450 <flatcc_verify_string_field@@Base>:
   23450:	push	{r0, r1, r4, lr}
   23454:	add	r3, sp, #4
   23458:	mov	r4, r0
   2345c:	bl	231c4 <flatcc_emitter_copy_buffer@@Base+0xfc>
   23460:	cmp	r0, #0
   23464:	bne	23484 <flatcc_verify_string_field@@Base+0x34>
   23468:	ldr	r2, [sp, #4]
   2346c:	cmp	r2, #0
   23470:	beq	23484 <flatcc_verify_string_field@@Base+0x34>
   23474:	ldr	r0, [r4]
   23478:	ldr	r1, [r4, #4]
   2347c:	ldr	r3, [r0, r2]
   23480:	bl	23378 <flatcc_emitter_copy_buffer@@Base+0x2b0>
   23484:	add	sp, sp, #8
   23488:	pop	{r4, pc}

0002348c <flatcc_verify_vector_field@@Base>:
   2348c:	push	{r4, r5, lr}
   23490:	sub	sp, sp, #28
   23494:	mov	r5, r3
   23498:	add	r3, sp, #20
   2349c:	mov	r4, r0
   234a0:	bl	231c4 <flatcc_emitter_copy_buffer@@Base+0xfc>
   234a4:	cmp	r0, #0
   234a8:	bne	234dc <flatcc_verify_vector_field@@Base+0x50>
   234ac:	ldr	r2, [sp, #20]
   234b0:	cmp	r2, #0
   234b4:	beq	234dc <flatcc_verify_vector_field@@Base+0x50>
   234b8:	ldr	r3, [sp, #44]	; 0x2c
   234bc:	ldr	r0, [r4]
   234c0:	str	r3, [sp, #8]
   234c4:	ldrh	r3, [sp, #40]	; 0x28
   234c8:	str	r5, [sp]
   234cc:	ldr	r1, [r4, #4]
   234d0:	str	r3, [sp, #4]
   234d4:	ldr	r3, [r0, r2]
   234d8:	bl	23308 <flatcc_emitter_copy_buffer@@Base+0x240>
   234dc:	add	sp, sp, #28
   234e0:	pop	{r4, r5, pc}

000234e4 <flatcc_verify_string_vector_field@@Base>:
   234e4:	push	{r4, r5, r6, r7, r8, r9, lr}
   234e8:	sub	sp, sp, #28
   234ec:	add	r3, sp, #20
   234f0:	mov	r7, r0
   234f4:	bl	231c4 <flatcc_emitter_copy_buffer@@Base+0xfc>
   234f8:	subs	r6, r0, #0
   234fc:	bne	2355c <flatcc_verify_string_vector_field@@Base+0x78>
   23500:	ldr	r4, [sp, #20]
   23504:	cmp	r4, #0
   23508:	beq	2355c <flatcc_verify_string_vector_field@@Base+0x78>
   2350c:	ldm	r7, {r5, r8}
   23510:	mvn	r3, #-1073741824	; 0xc0000000
   23514:	mov	r2, r4
   23518:	ldr	r7, [r5, r4]
   2351c:	str	r3, [sp, #8]
   23520:	mov	r3, #4
   23524:	str	r3, [sp, #4]
   23528:	str	r3, [sp]
   2352c:	mov	r1, r8
   23530:	mov	r3, r7
   23534:	mov	r0, r5
   23538:	bl	23308 <flatcc_emitter_copy_buffer@@Base+0x240>
   2353c:	subs	r6, r0, #0
   23540:	bne	2355c <flatcc_verify_string_vector_field@@Base+0x78>
   23544:	add	r4, r4, r7
   23548:	mov	r7, r6
   2354c:	ldr	r9, [r5, r4]
   23550:	add	r4, r4, #4
   23554:	cmp	r9, r7
   23558:	bne	23568 <flatcc_verify_string_vector_field@@Base+0x84>
   2355c:	mov	r0, r6
   23560:	add	sp, sp, #28
   23564:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23568:	ldr	r3, [r5, r4]
   2356c:	mov	r2, r4
   23570:	mov	r1, r8
   23574:	mov	r0, r5
   23578:	bl	23378 <flatcc_emitter_copy_buffer@@Base+0x2b0>
   2357c:	cmp	r0, #0
   23580:	addeq	r7, r7, #1
   23584:	addeq	r4, r4, #4
   23588:	beq	23554 <flatcc_verify_string_vector_field@@Base+0x70>
   2358c:	mov	r6, r0
   23590:	b	2355c <flatcc_verify_string_vector_field@@Base+0x78>

00023594 <flatcc_verify_table_field@@Base>:
   23594:	push	{r4, r5, lr}
   23598:	sub	sp, sp, #20
   2359c:	mov	r5, r3
   235a0:	add	r3, sp, #12
   235a4:	mov	r4, r0
   235a8:	bl	231c4 <flatcc_emitter_copy_buffer@@Base+0xfc>
   235ac:	cmp	r0, #0
   235b0:	bne	235dc <flatcc_verify_table_field@@Base+0x48>
   235b4:	ldr	r2, [sp, #12]
   235b8:	cmp	r2, #0
   235bc:	beq	235dc <flatcc_verify_table_field@@Base+0x48>
   235c0:	ldr	r0, [r4]
   235c4:	ldr	r3, [r4, #8]
   235c8:	str	r5, [sp, #4]
   235cc:	str	r3, [sp]
   235d0:	ldr	r1, [r4, #4]
   235d4:	ldr	r3, [r0, r2]
   235d8:	bl	23228 <flatcc_emitter_copy_buffer@@Base+0x160>
   235dc:	add	sp, sp, #20
   235e0:	pop	{r4, r5, pc}

000235e4 <flatcc_verify_table_vector_field@@Base>:
   235e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235e8:	sub	sp, sp, #36	; 0x24
   235ec:	mov	sl, r3
   235f0:	add	r3, sp, #28
   235f4:	mov	r7, r0
   235f8:	bl	231c4 <flatcc_emitter_copy_buffer@@Base+0xfc>
   235fc:	subs	r6, r0, #0
   23600:	bne	23688 <flatcc_verify_table_vector_field@@Base+0xa4>
   23604:	ldr	r4, [sp, #28]
   23608:	cmp	r4, #0
   2360c:	beq	23688 <flatcc_verify_table_vector_field@@Base+0xa4>
   23610:	ldr	r9, [r7, #8]
   23614:	cmp	r9, #0
   23618:	movle	r6, #3
   2361c:	ble	23688 <flatcc_verify_table_vector_field@@Base+0xa4>
   23620:	ldm	r7, {r5, r8}
   23624:	mvn	r3, #-1073741824	; 0xc0000000
   23628:	mov	r2, r4
   2362c:	ldr	r7, [r5, r4]
   23630:	str	r3, [sp, #8]
   23634:	mov	r3, #4
   23638:	str	r3, [sp, #4]
   2363c:	str	r3, [sp]
   23640:	mov	r1, r8
   23644:	mov	r3, r7
   23648:	mov	r0, r5
   2364c:	bl	23308 <flatcc_emitter_copy_buffer@@Base+0x240>
   23650:	cmp	r0, #0
   23654:	bne	236d4 <flatcc_verify_table_vector_field@@Base+0xf0>
   23658:	add	r4, r4, r7
   2365c:	sub	r9, r9, #1
   23660:	ldr	r3, [r5, r4]
   23664:	add	r4, r4, #4
   23668:	add	r4, r5, r4
   2366c:	mov	r7, r6
   23670:	str	r3, [sp, #20]
   23674:	sub	r3, r4, r5
   23678:	str	r3, [sp, #16]
   2367c:	ldr	r3, [sp, #20]
   23680:	cmp	r3, r7
   23684:	bne	23694 <flatcc_verify_table_vector_field@@Base+0xb0>
   23688:	mov	r0, r6
   2368c:	add	sp, sp, #36	; 0x24
   23690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23694:	mov	fp, r4
   23698:	stm	sp, {r9, sl}
   2369c:	ldr	r2, [sp, #16]
   236a0:	ldr	r3, [fp]
   236a4:	mov	r1, r8
   236a8:	mov	r0, r5
   236ac:	bl	23228 <flatcc_emitter_copy_buffer@@Base+0x160>
   236b0:	add	r4, r4, #4
   236b4:	cmp	r0, #0
   236b8:	beq	236dc <flatcc_verify_table_vector_field@@Base+0xf8>
   236bc:	stm	sp, {r9, sl}
   236c0:	ldr	r2, [sp, #16]
   236c4:	ldr	r3, [fp]
   236c8:	mov	r1, r8
   236cc:	mov	r0, r5
   236d0:	bl	23228 <flatcc_emitter_copy_buffer@@Base+0x160>
   236d4:	mov	r6, r0
   236d8:	b	23688 <flatcc_verify_table_vector_field@@Base+0xa4>
   236dc:	add	r7, r7, #1
   236e0:	b	23674 <flatcc_verify_table_vector_field@@Base+0x90>

000236e4 <flatcc_verify_union_table@@Base>:
   236e4:	push	{r0, r1, r2, lr}
   236e8:	str	r1, [sp, #4]
   236ec:	ldr	r3, [r0, #8]
   236f0:	str	r3, [sp]
   236f4:	ldr	r3, [r0, #20]
   236f8:	ldr	r2, [r0, #16]
   236fc:	ldm	r0, {r0, r1}
   23700:	bl	23228 <flatcc_emitter_copy_buffer@@Base+0x160>
   23704:	add	sp, sp, #12
   23708:	pop	{pc}		; (ldr pc, [sp], #4)

0002370c <flatcc_verify_union_struct@@Base>:
   2370c:	ldr	ip, [r0, #4]
   23710:	ldr	r3, [r0, #16]
   23714:	ldr	r0, [r0, #20]
   23718:	cmp	r0, #0
   2371c:	beq	23750 <flatcc_verify_union_struct@@Base+0x44>
   23720:	add	r3, r3, r0
   23724:	cmp	ip, r3
   23728:	bcc	23750 <flatcc_verify_union_struct@@Base+0x44>
   2372c:	adds	r1, r1, r3
   23730:	bcs	23758 <flatcc_verify_union_struct@@Base+0x4c>
   23734:	cmp	ip, r1
   23738:	bcc	23760 <flatcc_verify_union_struct@@Base+0x54>
   2373c:	sub	r2, r2, #1
   23740:	tst	r2, r3
   23744:	movne	r0, #11
   23748:	moveq	r0, #0
   2374c:	bx	lr
   23750:	mov	r0, #18
   23754:	bx	lr
   23758:	mov	r0, #10
   2375c:	bx	lr
   23760:	mov	r0, #9
   23764:	bx	lr

00023768 <flatcc_verify_union_string@@Base>:
   23768:	ldr	r3, [r0, #20]
   2376c:	ldr	r2, [r0, #16]
   23770:	ldm	r0, {r0, r1}
   23774:	b	23378 <flatcc_emitter_copy_buffer@@Base+0x2b0>

00023778 <flatcc_verify_buffer_header@@Base>:
   23778:	ands	r3, r0, #3
   2377c:	push	{r0, r1, r4, lr}
   23780:	movne	r0, #5
   23784:	bne	237dc <flatcc_verify_buffer_header@@Base+0x64>
   23788:	cmn	r1, #9
   2378c:	movhi	r0, #6
   23790:	bhi	237dc <flatcc_verify_buffer_header@@Base+0x64>
   23794:	cmp	r1, #7
   23798:	movls	r0, #1
   2379c:	bls	237dc <flatcc_verify_buffer_header@@Base+0x64>
   237a0:	cmp	r2, #0
   237a4:	beq	237d8 <flatcc_verify_buffer_header@@Base+0x60>
   237a8:	mov	r4, r0
   237ac:	add	r0, sp, #8
   237b0:	mov	r1, r2
   237b4:	str	r3, [r0, #-4]!
   237b8:	mov	r2, #4
   237bc:	bl	145f4 <strncpy@plt>
   237c0:	ldr	r3, [sp, #4]
   237c4:	ldr	r2, [r4, #4]
   237c8:	cmp	r3, #0
   237cc:	cmpne	r2, r3
   237d0:	movne	r0, #2
   237d4:	bne	237dc <flatcc_verify_buffer_header@@Base+0x64>
   237d8:	mov	r0, #0
   237dc:	add	sp, sp, #8
   237e0:	pop	{r4, pc}

000237e4 <flatcc_verify_typed_buffer_header@@Base>:
   237e4:	tst	r0, #3
   237e8:	bne	23818 <flatcc_verify_typed_buffer_header@@Base+0x34>
   237ec:	cmn	r1, #9
   237f0:	bhi	23820 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   237f4:	cmp	r1, #7
   237f8:	bls	23828 <flatcc_verify_typed_buffer_header@@Base+0x44>
   237fc:	cmp	r2, #0
   23800:	beq	23830 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   23804:	ldr	r0, [r0, #4]
   23808:	cmp	r2, r0
   2380c:	movne	r0, #2
   23810:	moveq	r0, #0
   23814:	bx	lr
   23818:	mov	r0, #5
   2381c:	bx	lr
   23820:	mov	r0, #6
   23824:	bx	lr
   23828:	mov	r0, #1
   2382c:	bx	lr
   23830:	mov	r0, r2
   23834:	bx	lr

00023838 <flatcc_verify_struct_as_root@@Base>:
   23838:	push	{r4, r5, r6, r7, r8, lr}
   2383c:	mov	r7, r0
   23840:	mov	r6, r1
   23844:	mov	r8, r2
   23848:	mov	r4, r3
   2384c:	ldrh	r5, [sp, #24]
   23850:	bl	23778 <flatcc_verify_buffer_header@@Base>
   23854:	cmp	r0, #0
   23858:	beq	23870 <flatcc_verify_struct_as_root@@Base+0x38>
   2385c:	mov	r2, r8
   23860:	mov	r1, r6
   23864:	mov	r0, r7
   23868:	pop	{r4, r5, r6, r7, r8, lr}
   2386c:	b	23778 <flatcc_verify_buffer_header@@Base>
   23870:	ldr	r2, [r7]
   23874:	cmp	r6, r2
   23878:	movcs	r3, #0
   2387c:	movcc	r3, #1
   23880:	cmp	r2, #0
   23884:	orreq	r3, r3, #1
   23888:	cmp	r3, #0
   2388c:	bne	238b4 <flatcc_verify_struct_as_root@@Base+0x7c>
   23890:	adds	r4, r2, r4
   23894:	bcs	238bc <flatcc_verify_struct_as_root@@Base+0x84>
   23898:	cmp	r6, r4
   2389c:	bcc	238c4 <flatcc_verify_struct_as_root@@Base+0x8c>
   238a0:	sub	r5, r5, #1
   238a4:	tst	r5, r2
   238a8:	moveq	r0, #0
   238ac:	movne	r0, #11
   238b0:	pop	{r4, r5, r6, r7, r8, pc}
   238b4:	mov	r0, #18
   238b8:	pop	{r4, r5, r6, r7, r8, pc}
   238bc:	mov	r0, #10
   238c0:	pop	{r4, r5, r6, r7, r8, pc}
   238c4:	mov	r0, #9
   238c8:	pop	{r4, r5, r6, r7, r8, pc}

000238cc <flatcc_verify_struct_as_typed_root@@Base>:
   238cc:	push	{r4, r5, r6, lr}
   238d0:	mov	r5, r0
   238d4:	bl	237e4 <flatcc_verify_typed_buffer_header@@Base>
   238d8:	cmp	r0, #0
   238dc:	popne	{r4, r5, r6, pc}
   238e0:	ldr	r2, [r5]
   238e4:	mov	r4, r1
   238e8:	cmp	r1, r2
   238ec:	movcs	r1, #0
   238f0:	movcc	r1, #1
   238f4:	cmp	r2, #0
   238f8:	orreq	r1, r1, #1
   238fc:	cmp	r1, #0
   23900:	bne	2392c <flatcc_verify_struct_as_typed_root@@Base+0x60>
   23904:	adds	r3, r2, r3
   23908:	bcs	23934 <flatcc_verify_struct_as_typed_root@@Base+0x68>
   2390c:	cmp	r4, r3
   23910:	bcc	2393c <flatcc_verify_struct_as_typed_root@@Base+0x70>
   23914:	ldrh	r3, [sp, #16]
   23918:	sub	r3, r3, #1
   2391c:	tst	r3, r2
   23920:	moveq	r0, #0
   23924:	movne	r0, #11
   23928:	pop	{r4, r5, r6, pc}
   2392c:	mov	r0, #18
   23930:	pop	{r4, r5, r6, pc}
   23934:	mov	r0, #10
   23938:	pop	{r4, r5, r6, pc}
   2393c:	mov	r0, #9
   23940:	pop	{r4, r5, r6, pc}

00023944 <flatcc_verify_table_as_root@@Base>:
   23944:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   23948:	mov	r7, r2
   2394c:	mov	r4, r0
   23950:	mov	r5, r1
   23954:	mov	r6, r3
   23958:	bl	23778 <flatcc_verify_buffer_header@@Base>
   2395c:	subs	r2, r0, #0
   23960:	beq	2397c <flatcc_verify_table_as_root@@Base+0x38>
   23964:	mov	r2, r7
   23968:	mov	r1, r5
   2396c:	mov	r0, r4
   23970:	add	sp, sp, #12
   23974:	pop	{r4, r5, r6, r7, lr}
   23978:	b	23778 <flatcc_verify_buffer_header@@Base>
   2397c:	mov	r3, #100	; 0x64
   23980:	str	r3, [sp]
   23984:	str	r6, [sp, #4]
   23988:	ldr	r3, [r4]
   2398c:	mov	r1, r5
   23990:	mov	r0, r4
   23994:	bl	23228 <flatcc_emitter_copy_buffer@@Base+0x160>
   23998:	add	sp, sp, #12
   2399c:	pop	{r4, r5, r6, r7, pc}

000239a0 <flatcc_verify_table_as_typed_root@@Base>:
   239a0:	push	{r0, r1, r2, r4, r5, lr}
   239a4:	mov	r4, r0
   239a8:	bl	237e4 <flatcc_verify_typed_buffer_header@@Base>
   239ac:	cmp	r0, #0
   239b0:	bne	239d0 <flatcc_verify_table_as_typed_root@@Base+0x30>
   239b4:	str	r3, [sp, #4]
   239b8:	mov	r3, #100	; 0x64
   239bc:	str	r3, [sp]
   239c0:	mov	r2, r0
   239c4:	ldr	r3, [r4]
   239c8:	mov	r0, r4
   239cc:	bl	23228 <flatcc_emitter_copy_buffer@@Base+0x160>
   239d0:	add	sp, sp, #12
   239d4:	pop	{r4, r5, pc}

000239d8 <flatcc_verify_struct_as_nested_root@@Base>:
   239d8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239dc:	mov	r7, #1
   239e0:	ldrh	r4, [sp, #52]	; 0x34
   239e4:	mvn	sl, #0
   239e8:	mov	r8, r3
   239ec:	stm	sp, {r7, sl}
   239f0:	mov	r3, r4
   239f4:	mov	r5, r0
   239f8:	mov	r6, r1
   239fc:	mov	fp, r2
   23a00:	ldr	r9, [sp, #48]	; 0x30
   23a04:	bl	2348c <flatcc_verify_vector_field@@Base>
   23a08:	cmp	r0, #0
   23a0c:	beq	23a34 <flatcc_verify_struct_as_nested_root@@Base+0x5c>
   23a10:	str	sl, [sp, #52]	; 0x34
   23a14:	str	r7, [sp, #48]	; 0x30
   23a18:	mov	r3, r4
   23a1c:	mov	r2, fp
   23a20:	mov	r1, r6
   23a24:	mov	r0, r5
   23a28:	add	sp, sp, #12
   23a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a30:	b	2348c <flatcc_verify_vector_field@@Base>
   23a34:	mov	r1, r6
   23a38:	mov	r0, r5
   23a3c:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0xd0>
   23a40:	subs	r1, r0, #0
   23a44:	beq	23a70 <flatcc_verify_struct_as_nested_root@@Base+0x98>
   23a48:	ldr	ip, [r1]
   23a4c:	mov	r3, r9
   23a50:	add	r0, r1, ip
   23a54:	str	r4, [sp, #48]	; 0x30
   23a58:	mov	r2, r8
   23a5c:	ldr	r1, [r1, ip]
   23a60:	add	r0, r0, #4
   23a64:	add	sp, sp, #12
   23a68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a6c:	b	23838 <flatcc_verify_struct_as_root@@Base>
   23a70:	add	sp, sp, #12
   23a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023a78 <flatcc_verify_table_as_nested_root@@Base>:
   23a78:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a7c:	mov	r7, #1
   23a80:	ldrh	r5, [sp, #48]	; 0x30
   23a84:	mvn	sl, #0
   23a88:	mov	r8, r3
   23a8c:	stm	sp, {r7, sl}
   23a90:	mov	r3, r5
   23a94:	mov	r6, r0
   23a98:	mov	r4, r1
   23a9c:	mov	fp, r2
   23aa0:	ldr	r9, [sp, #52]	; 0x34
   23aa4:	bl	2348c <flatcc_verify_vector_field@@Base>
   23aa8:	cmp	r0, #0
   23aac:	beq	23ad4 <flatcc_verify_table_as_nested_root@@Base+0x5c>
   23ab0:	str	sl, [sp, #52]	; 0x34
   23ab4:	str	r7, [sp, #48]	; 0x30
   23ab8:	mov	r3, r5
   23abc:	mov	r2, fp
   23ac0:	mov	r1, r4
   23ac4:	mov	r0, r6
   23ac8:	add	sp, sp, #12
   23acc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23ad0:	b	2348c <flatcc_verify_vector_field@@Base>
   23ad4:	mov	r1, r4
   23ad8:	mov	r0, r6
   23adc:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0xd0>
   23ae0:	subs	r3, r0, #0
   23ae4:	beq	23b4c <flatcc_verify_table_as_nested_root@@Base+0xd4>
   23ae8:	ldr	r2, [r3]
   23aec:	add	r7, r3, r2
   23af0:	ldr	r5, [r3, r2]
   23af4:	add	r4, r7, #4
   23af8:	mov	r2, r8
   23afc:	mov	r1, r5
   23b00:	mov	r0, r4
   23b04:	bl	23778 <flatcc_verify_buffer_header@@Base>
   23b08:	subs	r2, r0, #0
   23b0c:	beq	23b28 <flatcc_verify_table_as_nested_root@@Base+0xb0>
   23b10:	mov	r2, r8
   23b14:	mov	r1, r5
   23b18:	mov	r0, r4
   23b1c:	add	sp, sp, #12
   23b20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b24:	b	23778 <flatcc_verify_buffer_header@@Base>
   23b28:	ldr	r3, [r6, #8]
   23b2c:	str	r9, [sp, #52]	; 0x34
   23b30:	str	r3, [sp, #48]	; 0x30
   23b34:	mov	r1, r5
   23b38:	ldr	r3, [r7, #4]
   23b3c:	mov	r0, r4
   23b40:	add	sp, sp, #12
   23b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b48:	b	23228 <flatcc_emitter_copy_buffer@@Base+0x160>
   23b4c:	add	sp, sp, #12
   23b50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00023b54 <flatcc_verify_union_field@@Base>:
   23b54:	push	{r4, r5, r6, r7, r8, lr}
   23b58:	mov	r6, r1
   23b5c:	sub	r1, r1, #1
   23b60:	sub	sp, sp, #32
   23b64:	uxth	r1, r1
   23b68:	mov	r7, r3
   23b6c:	mov	r4, r0
   23b70:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   23b74:	uxth	r3, r0
   23b78:	cmp	r3, #0
   23b7c:	bne	23bb4 <flatcc_verify_union_field@@Base+0x60>
   23b80:	mov	r1, r6
   23b84:	mov	r0, r4
   23b88:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   23b8c:	uxth	r0, r0
   23b90:	cmp	r0, #0
   23b94:	movne	r0, #23
   23b98:	bne	23bac <flatcc_verify_union_field@@Base+0x58>
   23b9c:	cmp	r2, #0
   23ba0:	movne	r0, #21
   23ba4:	bne	23bac <flatcc_verify_union_field@@Base+0x58>
   23ba8:	mov	r0, #0
   23bac:	add	sp, sp, #32
   23bb0:	pop	{r4, r5, r6, r7, r8, pc}
   23bb4:	ldrh	r3, [r4, #20]
   23bb8:	uxth	r5, r0
   23bbc:	add	r1, r5, #1
   23bc0:	cmp	r1, r3
   23bc4:	movhi	r0, #13
   23bc8:	bhi	23bac <flatcc_verify_union_field@@Base+0x58>
   23bcc:	mov	r1, r6
   23bd0:	mov	r0, r4
   23bd4:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   23bd8:	ldr	r3, [r4, #16]
   23bdc:	ldr	r8, [r4]
   23be0:	add	r5, r5, r3
   23be4:	ldrb	r1, [r8, r5]
   23be8:	adds	r3, r1, #0
   23bec:	movne	r3, #1
   23bf0:	uxth	r0, r0
   23bf4:	cmp	r0, #0
   23bf8:	movne	r0, r3
   23bfc:	orreq	r0, r3, #1
   23c00:	cmp	r0, #0
   23c04:	moveq	r0, #24
   23c08:	beq	23bac <flatcc_verify_union_field@@Base+0x58>
   23c0c:	cmp	r1, #0
   23c10:	beq	23ba8 <flatcc_verify_union_field@@Base+0x54>
   23c14:	add	r3, sp, #4
   23c18:	mov	r1, r6
   23c1c:	mov	r0, r4
   23c20:	bl	231c4 <flatcc_emitter_copy_buffer@@Base+0xfc>
   23c24:	cmp	r0, #0
   23c28:	bne	23bac <flatcc_verify_union_field@@Base+0x58>
   23c2c:	ldr	r3, [sp, #4]
   23c30:	cmp	r3, #0
   23c34:	beq	23ba8 <flatcc_verify_union_field@@Base+0x54>
   23c38:	ldr	r1, [r4, #4]
   23c3c:	ldr	r2, [r4]
   23c40:	str	r1, [sp, #12]
   23c44:	ldr	r1, [r4, #8]
   23c48:	str	r3, [sp, #24]
   23c4c:	str	r1, [sp, #16]
   23c50:	ldr	r3, [r2, r3]
   23c54:	str	r2, [sp, #8]
   23c58:	str	r3, [sp, #28]
   23c5c:	ldrb	r3, [r8, r5]
   23c60:	add	r0, sp, #8
   23c64:	strb	r3, [sp, #20]
   23c68:	blx	r7
   23c6c:	b	23bac <flatcc_verify_union_field@@Base+0x58>

00023c70 <flatcc_verify_union_vector_field@@Base>:
   23c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c74:	sub	r5, r1, #1
   23c78:	sub	sp, sp, #60	; 0x3c
   23c7c:	uxth	r5, r5
   23c80:	mov	r9, r1
   23c84:	mov	r1, r5
   23c88:	mov	r4, r0
   23c8c:	mov	r8, r2
   23c90:	mov	sl, r3
   23c94:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   23c98:	uxth	r0, r0
   23c9c:	cmp	r0, #0
   23ca0:	bne	23cd0 <flatcc_verify_union_vector_field@@Base+0x60>
   23ca4:	mov	r1, r9
   23ca8:	mov	r0, r4
   23cac:	bl	23174 <flatcc_emitter_copy_buffer@@Base+0xac>
   23cb0:	cmp	r2, #0
   23cb4:	uxth	r0, r0
   23cb8:	clz	r0, r0
   23cbc:	lsr	r0, r0, #5
   23cc0:	moveq	r0, #0
   23cc4:	cmp	r0, #0
   23cc8:	movne	r3, #22
   23ccc:	bne	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23cd0:	mov	r7, #1
   23cd4:	mvn	fp, #0
   23cd8:	mov	r3, r7
   23cdc:	stm	sp, {r7, fp}
   23ce0:	mov	r2, r8
   23ce4:	mov	r1, r5
   23ce8:	mov	r0, r4
   23cec:	bl	2348c <flatcc_verify_vector_field@@Base>
   23cf0:	subs	r6, r0, #0
   23cf4:	beq	23d18 <flatcc_verify_union_vector_field@@Base+0xa8>
   23cf8:	stm	sp, {r7, fp}
   23cfc:	mov	r3, r7
   23d00:	mov	r2, r8
   23d04:	mov	r1, r5
   23d08:	mov	r0, r4
   23d0c:	bl	2348c <flatcc_verify_vector_field@@Base>
   23d10:	mov	r3, r0
   23d14:	b	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23d18:	mov	r1, r5
   23d1c:	mov	r0, r4
   23d20:	bl	23198 <flatcc_emitter_copy_buffer@@Base+0xd0>
   23d24:	cmp	r0, #0
   23d28:	bne	23d3c <flatcc_verify_union_vector_field@@Base+0xcc>
   23d2c:	mov	r3, r6
   23d30:	mov	r0, r3
   23d34:	add	sp, sp, #60	; 0x3c
   23d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d3c:	ldr	r3, [r0]
   23d40:	mov	r2, r8
   23d44:	add	r5, r0, r3
   23d48:	ldr	r7, [r0, r3]
   23d4c:	mov	r1, r9
   23d50:	add	r3, sp, #28
   23d54:	mov	r0, r4
   23d58:	bl	231c4 <flatcc_emitter_copy_buffer@@Base+0xfc>
   23d5c:	subs	r3, r0, #0
   23d60:	bne	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23d64:	ldr	r9, [sp, #28]
   23d68:	cmp	r9, #0
   23d6c:	beq	23d2c <flatcc_verify_union_vector_field@@Base+0xbc>
   23d70:	ldr	r8, [r4, #8]
   23d74:	cmp	r8, #0
   23d78:	movle	r3, #3
   23d7c:	ble	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23d80:	ldm	r4, {r6, fp}
   23d84:	mvn	r3, #-1073741824	; 0xc0000000
   23d88:	mov	r2, r9
   23d8c:	ldr	r4, [r6, r9]
   23d90:	str	r3, [sp, #8]
   23d94:	mov	r3, #4
   23d98:	str	r3, [sp, #4]
   23d9c:	str	r3, [sp]
   23da0:	mov	r1, fp
   23da4:	mov	r3, r4
   23da8:	mov	r0, r6
   23dac:	bl	23308 <flatcc_emitter_copy_buffer@@Base+0x240>
   23db0:	subs	r3, r0, #0
   23db4:	bne	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23db8:	add	r4, r4, r9
   23dbc:	ldr	r2, [r6, r4]
   23dc0:	cmp	r7, r2
   23dc4:	movne	r3, #34	; 0x22
   23dc8:	bne	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23dcc:	add	r5, r5, #4
   23dd0:	add	r4, r4, #4
   23dd4:	add	r7, r7, r5
   23dd8:	sub	r8, r8, #1
   23ddc:	str	r6, [sp, #32]
   23de0:	str	fp, [sp, #36]	; 0x24
   23de4:	str	r8, [sp, #40]	; 0x28
   23de8:	cmp	r5, r7
   23dec:	beq	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23df0:	ldr	r1, [r6, r4]
   23df4:	ldrb	r2, [r5]
   23df8:	cmp	r1, #0
   23dfc:	bne	23e10 <flatcc_verify_union_vector_field@@Base+0x1a0>
   23e00:	cmp	r2, #0
   23e04:	beq	23e48 <flatcc_verify_union_vector_field@@Base+0x1d8>
   23e08:	mov	r3, #32
   23e0c:	b	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23e10:	cmp	r2, #0
   23e14:	str	r3, [sp, #20]
   23e18:	beq	23e54 <flatcc_verify_union_vector_field@@Base+0x1e4>
   23e1c:	add	r0, sp, #32
   23e20:	strb	r2, [sp, #44]	; 0x2c
   23e24:	str	r4, [sp, #48]	; 0x30
   23e28:	str	r1, [sp, #52]	; 0x34
   23e2c:	blx	sl
   23e30:	ldr	r3, [sp, #20]
   23e34:	cmp	r0, #0
   23e38:	beq	23e48 <flatcc_verify_union_vector_field@@Base+0x1d8>
   23e3c:	add	r0, sp, #32
   23e40:	blx	sl
   23e44:	b	23d10 <flatcc_verify_union_vector_field@@Base+0xa0>
   23e48:	add	r4, r4, #4
   23e4c:	add	r5, r5, #1
   23e50:	b	23de8 <flatcc_verify_union_vector_field@@Base+0x178>
   23e54:	mov	r3, #33	; 0x21
   23e58:	b	23d30 <flatcc_verify_union_vector_field@@Base+0xc0>
   23e5c:	andeq	r0, r0, r0

00023e60 <grisu3_diy_fp_encode_double@@Base>:
   23e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23e64:	sub	sp, sp, #44	; 0x2c
   23e68:	mov	r8, r0
   23e6c:	ldr	fp, [sp, #80]	; 0x50
   23e70:	mov	r9, r1
   23e74:	cmp	fp, #0
   23e78:	mov	ip, r3
   23e7c:	sub	r2, r2, r3
   23e80:	movne	fp, #4
   23e84:	moveq	fp, #0
   23e88:	orrs	r3, r8, r9
   23e8c:	movne	r3, #0
   23e90:	movne	r4, #0
   23e94:	ldrne	r5, [pc, #1132]	; 24308 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   23e98:	bne	23eb8 <grisu3_diy_fp_encode_double@@Base+0x58>
   23e9c:	bl	14770 <__assert_fail@plt+0x128>
   23ea0:	lsl	r3, r9, #10
   23ea4:	orr	r3, r3, r8, lsr #22
   23ea8:	lsl	r1, r8, #10
   23eac:	mov	r9, r3
   23eb0:	mov	r8, r1
   23eb4:	mov	r3, lr
   23eb8:	and	r0, r8, r4
   23ebc:	and	r1, r9, r5
   23ec0:	orrs	r1, r0, r1
   23ec4:	sub	lr, r3, #10
   23ec8:	beq	23ea0 <grisu3_diy_fp_encode_double@@Base+0x40>
   23ecc:	cmp	r8, #0
   23ed0:	sbcs	r1, r9, #0
   23ed4:	mov	sl, r3
   23ed8:	sub	r3, r3, #1
   23edc:	bge	23f04 <grisu3_diy_fp_encode_double@@Base+0xa4>
   23ee0:	rsb	r7, sl, #0
   23ee4:	cmn	r2, #348	; 0x15c
   23ee8:	lsl	fp, fp, r7
   23eec:	bge	23f10 <grisu3_diy_fp_encode_double@@Base+0xb0>
   23ef0:	ldr	r3, [pc, #1044]	; 2430c <grisu3_diy_fp_encode_double@@Base+0x4ac>
   23ef4:	ldr	r1, [pc, #1044]	; 24310 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   23ef8:	ldr	r0, [pc, #1044]	; 24314 <grisu3_diy_fp_encode_double@@Base+0x4b4>
   23efc:	mov	r2, #80	; 0x50
   23f00:	bl	14648 <__assert_fail@plt>
   23f04:	adds	r8, r8, r8
   23f08:	adc	r9, r9, r9
   23f0c:	b	23ecc <grisu3_diy_fp_encode_double@@Base+0x6c>
   23f10:	cmp	r2, #348	; 0x15c
   23f14:	ldrge	r3, [pc, #1008]	; 2430c <grisu3_diy_fp_encode_double@@Base+0x4ac>
   23f18:	movge	r2, #81	; 0x51
   23f1c:	ldrge	r1, [pc, #1004]	; 24310 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   23f20:	ldrge	r0, [pc, #1008]	; 24318 <grisu3_diy_fp_encode_double@@Base+0x4b8>
   23f24:	bge	23f00 <grisu3_diy_fp_encode_double@@Base+0xa0>
   23f28:	add	r1, r2, #348	; 0x15c
   23f2c:	ldr	r3, [pc, #1000]	; 2431c <grisu3_diy_fp_encode_double@@Base+0x4bc>
   23f30:	asr	r1, r1, #3
   23f34:	add	r1, r3, r1, lsl #4
   23f38:	ldrsh	r0, [r1, #66]	; 0x42
   23f3c:	ldrd	r4, [r1, #56]	; 0x38
   23f40:	ldrsh	r1, [r1, #64]	; 0x40
   23f44:	cmp	r2, r0
   23f48:	strd	r4, [sp, #8]
   23f4c:	str	r1, [sp, #32]
   23f50:	addlt	r3, r3, #24
   23f54:	movlt	r2, #88	; 0x58
   23f58:	ldrlt	r1, [pc, #944]	; 24310 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   23f5c:	ldrlt	r0, [pc, #956]	; 24320 <grisu3_diy_fp_encode_double@@Base+0x4c0>
   23f60:	blt	23f00 <grisu3_diy_fp_encode_double@@Base+0xa0>
   23f64:	add	r1, r0, #7
   23f68:	cmp	r2, r1
   23f6c:	addgt	r3, r3, #24
   23f70:	movgt	r2, #89	; 0x59
   23f74:	ldrgt	r1, [pc, #916]	; 24310 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   23f78:	ldrgt	r0, [pc, #932]	; 24324 <grisu3_diy_fp_encode_double@@Base+0x4c4>
   23f7c:	bgt	23f00 <grisu3_diy_fp_encode_double@@Base+0xa0>
   23f80:	cmp	r2, r0
   23f84:	beq	24064 <grisu3_diy_fp_encode_double@@Base+0x204>
   23f88:	sub	r2, r2, r0
   23f8c:	sub	r2, r2, #1
   23f90:	cmp	r2, #6
   23f94:	ldrhi	r3, [pc, #908]	; 24328 <grisu3_diy_fp_encode_double@@Base+0x4c8>
   23f98:	movhi	r2, #185	; 0xb9
   23f9c:	ldrhi	r1, [pc, #876]	; 24310 <grisu3_diy_fp_encode_double@@Base+0x4b0>
   23fa0:	ldrhi	r0, [pc, #900]	; 2432c <grisu3_diy_fp_encode_double@@Base+0x4cc>
   23fa4:	bhi	23f00 <grisu3_diy_fp_encode_double@@Base+0xa0>
   23fa8:	ldr	r1, [pc, #896]	; 24330 <grisu3_diy_fp_encode_double@@Base+0x4d0>
   23fac:	lsl	r3, r2, #4
   23fb0:	add	r0, r1, r3
   23fb4:	str	r0, [sp, #28]
   23fb8:	ldrd	r0, [r1, r3]
   23fbc:	mov	r3, #0
   23fc0:	add	ip, ip, #1
   23fc4:	strd	r0, [sp]
   23fc8:	ldr	lr, [sp, #4]
   23fcc:	ldrd	r4, [sp]
   23fd0:	mov	r1, #0
   23fd4:	umull	r6, r7, r8, lr
   23fd8:	mov	r0, r8
   23fdc:	strd	r6, [sp, #16]
   23fe0:	ldr	r6, [sp, #20]
   23fe4:	mov	r5, #0
   23fe8:	mla	r8, lr, r1, r6
   23fec:	umull	r6, r7, r9, r4
   23ff0:	mla	lr, r9, r5, r7
   23ff4:	add	r2, ip, r2
   23ff8:	str	lr, [sp, #36]	; 0x24
   23ffc:	mul	lr, r0, r5
   24000:	mla	lr, r4, r1, lr
   24004:	umull	r4, r5, r0, r4
   24008:	add	r0, lr, r5
   2400c:	adds	r0, r0, r6
   24010:	ldr	lr, [sp, #16]
   24014:	adc	r1, r3, #0
   24018:	ldr	r6, [sp, #36]	; 0x24
   2401c:	adds	r0, r0, #-2147483648	; 0x80000000
   24020:	adc	r1, r1, #0
   24024:	adds	r0, r0, lr
   24028:	adc	r1, r1, #0
   2402c:	adds	r0, r8, r6
   24030:	mov	r4, r1
   24034:	mov	r5, r3
   24038:	adc	r1, r3, r3
   2403c:	ldr	r3, [sp, #4]
   24040:	umlal	r0, r1, r3, r9
   24044:	ldr	r3, [sp, #28]
   24048:	adds	r8, r4, r0
   2404c:	adc	r9, r5, r1
   24050:	ldr	r3, [r3, #8]
   24054:	cmp	r2, #19
   24058:	add	sl, sl, r3
   2405c:	add	sl, sl, #64	; 0x40
   24060:	addgt	fp, fp, #4
   24064:	ldrd	r0, [sp, #8]
   24068:	ldr	lr, [sp, #12]
   2406c:	mov	r3, #0
   24070:	umull	r6, r7, r9, r0
   24074:	umull	r4, r5, r8, lr
   24078:	mov	r1, #0
   2407c:	mla	lr, lr, r3, r5
   24080:	mla	r5, r9, r1, r7
   24084:	mul	r7, r8, r1
   24088:	mov	ip, #0
   2408c:	mla	r7, r0, r3, r7
   24090:	umull	r0, r1, r8, r0
   24094:	add	r2, r7, r1
   24098:	adds	r2, r2, r6
   2409c:	adc	r3, ip, #0
   240a0:	adds	r2, r2, #-2147483648	; 0x80000000
   240a4:	adc	r3, r3, #0
   240a8:	adds	r2, r2, r4
   240ac:	adc	r3, r3, #0
   240b0:	mov	r6, r3
   240b4:	mov	r2, r5
   240b8:	ldr	r3, [sp, #12]
   240bc:	adds	r4, lr, r2
   240c0:	adc	r5, ip, ip
   240c4:	umlal	r4, r5, r3, r9
   240c8:	ldr	r3, [sp, #32]
   240cc:	adds	r4, r4, r6
   240d0:	adc	r5, r5, ip
   240d4:	cmp	fp, ip
   240d8:	mov	r7, ip
   240dc:	add	sl, sl, r3
   240e0:	moveq	r7, #8
   240e4:	movne	r7, #9
   240e8:	orrs	r3, r4, r5
   240ec:	add	sl, sl, #64	; 0x40
   240f0:	add	fp, fp, r7
   240f4:	movne	ip, sl
   240f8:	movne	r0, #0
   240fc:	ldrne	r1, [pc, #516]	; 24308 <grisu3_diy_fp_encode_double@@Base+0x4a8>
   24100:	beq	23e9c <grisu3_diy_fp_encode_double@@Base+0x3c>
   24104:	and	r2, r4, r0
   24108:	and	r3, r5, r1
   2410c:	orrs	r3, r2, r3
   24110:	sub	lr, ip, #10
   24114:	beq	24244 <grisu3_diy_fp_encode_double@@Base+0x3e4>
   24118:	cmp	r4, #0
   2411c:	sbcs	r3, r5, #0
   24120:	mov	r6, ip
   24124:	sub	ip, ip, #1
   24128:	bge	24260 <grisu3_diy_fp_encode_double@@Base+0x400>
   2412c:	ldr	r2, [pc, #512]	; 24334 <grisu3_diy_fp_encode_double@@Base+0x4d4>
   24130:	sub	sl, sl, r6
   24134:	add	r3, r6, #64	; 0x40
   24138:	cmp	r3, r2
   2413c:	lsl	r7, fp, sl
   24140:	movge	r2, #64	; 0x40
   24144:	bge	2415c <grisu3_diy_fp_encode_double@@Base+0x2fc>
   24148:	mvn	r2, #1072	; 0x430
   2414c:	cmp	r3, r2
   24150:	addge	r2, r6, #1136	; 0x470
   24154:	addge	r2, r2, #2
   24158:	movlt	r2, #0
   2415c:	rsb	sl, r2, #64	; 0x40
   24160:	cmp	sl, #60	; 0x3c
   24164:	ble	24194 <grisu3_diy_fp_encode_double@@Base+0x334>
   24168:	rsb	r8, r2, #2
   2416c:	mov	r0, r4
   24170:	mov	r1, r5
   24174:	mov	r2, r8
   24178:	bl	2dd90 <flatcc_json_printer_clear@@Base+0x484>
   2417c:	asr	r7, r7, r8
   24180:	add	r6, r6, r8
   24184:	add	r7, r7, #9
   24188:	mov	sl, #62	; 0x3e
   2418c:	mov	r4, r0
   24190:	mov	r5, r1
   24194:	mov	r2, sl
   24198:	mov	r0, r4
   2419c:	mov	r1, r5
   241a0:	bl	2dd90 <flatcc_json_printer_clear@@Base+0x484>
   241a4:	sub	fp, sl, #1
   241a8:	mov	r2, fp
   241ac:	add	r6, sl, r6
   241b0:	mov	r8, r0
   241b4:	mov	r9, r1
   241b8:	mov	r0, #1
   241bc:	mov	r1, #0
   241c0:	bl	2ddac <flatcc_json_printer_clear@@Base+0x4a0>
   241c4:	mov	r2, fp
   241c8:	mov	r1, #0
   241cc:	and	r0, r0, r4
   241d0:	lsl	r3, r0, #3
   241d4:	mov	r0, #8
   241d8:	str	r3, [sp]
   241dc:	bl	2ddac <flatcc_json_printer_clear@@Base+0x4a0>
   241e0:	add	r3, r7, r0
   241e4:	cmp	sl, r3
   241e8:	blt	24210 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   241ec:	adds	r8, r8, #1
   241f0:	adc	r9, r9, #0
   241f4:	mov	r4, #0
   241f8:	and	r5, r9, #2097152	; 0x200000
   241fc:	orrs	r2, r4, r5
   24200:	beq	24210 <grisu3_diy_fp_encode_double@@Base+0x3b0>
   24204:	lsrs	r9, r9, #1
   24208:	rrx	r8, r8
   2420c:	add	r6, r6, #1
   24210:	ldr	r5, [pc, #288]	; 24338 <grisu3_diy_fp_encode_double@@Base+0x4d8>
   24214:	mvn	r4, #0
   24218:	cmp	r9, r5
   2421c:	cmpeq	r8, r4
   24220:	add	r2, r6, #1
   24224:	bhi	2426c <grisu3_diy_fp_encode_double@@Base+0x40c>
   24228:	ldr	r2, [pc, #268]	; 2433c <grisu3_diy_fp_encode_double@@Base+0x4dc>
   2422c:	cmp	r6, r2
   24230:	movge	r1, r2
   24234:	bge	24284 <grisu3_diy_fp_encode_double@@Base+0x424>
   24238:	mov	r8, #0
   2423c:	mov	r9, #0
   24240:	b	242cc <grisu3_diy_fp_encode_double@@Base+0x46c>
   24244:	lsl	r3, r5, #10
   24248:	orr	r3, r3, r4, lsr #22
   2424c:	lsl	r2, r4, #10
   24250:	mov	r4, r2
   24254:	mov	r5, r3
   24258:	mov	ip, lr
   2425c:	b	24104 <grisu3_diy_fp_encode_double@@Base+0x2a4>
   24260:	adds	r4, r4, r4
   24264:	adc	r5, r5, r5
   24268:	b	24118 <grisu3_diy_fp_encode_double@@Base+0x2b8>
   2426c:	lsrs	r9, r9, #1
   24270:	rrx	r8, r8
   24274:	mov	r6, r2
   24278:	b	24218 <grisu3_diy_fp_encode_double@@Base+0x3b8>
   2427c:	adds	r8, r8, r8
   24280:	adc	r9, r9, r9
   24284:	cmp	r6, r1
   24288:	mov	r2, r6
   2428c:	mov	r4, #0
   24290:	and	r5, r9, #1048576	; 0x100000
   24294:	beq	242fc <grisu3_diy_fp_encode_double@@Base+0x49c>
   24298:	orrs	ip, r4, r5
   2429c:	sub	r6, r6, #1
   242a0:	beq	2427c <grisu3_diy_fp_encode_double@@Base+0x41c>
   242a4:	add	r4, r2, #1072	; 0x430
   242a8:	add	r4, r4, #3
   242ac:	ldr	fp, [pc, #140]	; 24340 <grisu3_diy_fp_encode_double@@Base+0x4e0>
   242b0:	mvn	sl, #0
   242b4:	and	r8, r8, sl
   242b8:	and	r9, r9, fp
   242bc:	mov	sl, #0
   242c0:	lsl	fp, r4, #20
   242c4:	orr	r8, r8, sl
   242c8:	orr	r9, r9, fp
   242cc:	ldr	r2, [sp, #84]	; 0x54
   242d0:	sub	r0, r0, r7
   242d4:	strd	r8, [r2]
   242d8:	ldr	r2, [sp]
   242dc:	cmp	r2, r3
   242e0:	movlt	r3, #0
   242e4:	movge	r3, #1
   242e8:	cmp	r2, r0
   242ec:	movgt	r0, r3
   242f0:	orrle	r0, r3, #1
   242f4:	add	sp, sp, #44	; 0x2c
   242f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242fc:	orrs	r1, r4, r5
   24300:	beq	242ac <grisu3_diy_fp_encode_double@@Base+0x44c>
   24304:	b	242a4 <grisu3_diy_fp_encode_double@@Base+0x444>
   24308:			; <UNDEFINED> instruction: 0xffc00000
   2430c:	muleq	r3, r8, r4
   24310:	andeq	r2, r3, r2, ror sp
   24314:	andeq	r2, r3, r9, asr #27
   24318:	andeq	r2, r3, r8, ror #27
   2431c:	andeq	r2, r3, r0, lsl #9
   24320:	andeq	r2, r3, r3, lsl lr
   24324:	andeq	r2, r3, r2, lsr #28
   24328:	andeq	r2, r3, r8, lsr #20
   2432c:	andeq	r2, r3, sp, lsr lr
   24330:	andeq	r4, r4, r8, asr #6
   24334:			; <UNDEFINED> instruction: 0xfffffc0e
   24338:			; <UNDEFINED> instruction: 0x001fffff
   2433c:			; <UNDEFINED> instruction: 0xfffffbce
   24340:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   24344:	cmp	r1, #1000	; 0x3e8
   24348:	addle	r1, r1, #1
   2434c:	addgt	r1, r0, #1000	; 0x3e8
   24350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24354:	mov	r3, #0
   24358:	mov	r5, r2
   2435c:	addle	r1, r0, r1
   24360:	mov	r2, #0
   24364:	addgt	r1, r1, #1
   24368:	cmp	r1, r0
   2436c:	sub	sp, sp, #36	; 0x24
   24370:	mov	r4, r0
   24374:	strd	r2, [r5]
   24378:	beq	243d8 <grisu3_diy_fp_encode_double@@Base+0x578>
   2437c:	ldrb	r3, [r0]
   24380:	cmp	r3, #45	; 0x2d
   24384:	movne	r3, r0
   24388:	movne	r2, #0
   2438c:	bne	243a8 <grisu3_diy_fp_encode_double@@Base+0x548>
   24390:	add	r3, r0, #1
   24394:	cmp	r1, r3
   24398:	movne	r2, #1
   2439c:	bne	243a8 <grisu3_diy_fp_encode_double@@Base+0x548>
   243a0:	mov	r4, #0
   243a4:	b	243d8 <grisu3_diy_fp_encode_double@@Base+0x578>
   243a8:	ldrb	r6, [r3]
   243ac:	str	r2, [sp, #12]
   243b0:	cmp	r6, #48	; 0x30
   243b4:	bne	24444 <grisu3_diy_fp_encode_double@@Base+0x5e4>
   243b8:	add	lr, r3, #1
   243bc:	cmp	r1, lr
   243c0:	beq	24610 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   243c4:	ldrb	r3, [r3, #1]
   243c8:	orr	r3, r3, #32
   243cc:	cmp	r3, #120	; 0x78
   243d0:	movne	r2, lr
   243d4:	bne	243f0 <grisu3_diy_fp_encode_double@@Base+0x590>
   243d8:	mov	r0, r4
   243dc:	add	sp, sp, #36	; 0x24
   243e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   243e4:	cmp	r1, r2
   243e8:	mov	lr, r2
   243ec:	beq	24610 <grisu3_diy_fp_encode_double@@Base+0x7b0>
   243f0:	mov	r3, r2
   243f4:	add	r2, r2, #1
   243f8:	ldrb	r0, [r3]
   243fc:	cmp	r0, #48	; 0x30
   24400:	beq	243e4 <grisu3_diy_fp_encode_double@@Base+0x584>
   24404:	mov	sl, #0
   24408:	mov	fp, #0
   2440c:	add	r9, pc, #884	; 0x374
   24410:	ldrd	r8, [r9]
   24414:	mov	r0, r3
   24418:	mov	ip, #10
   2441c:	cmp	r1, r0
   24420:	mov	lr, r0
   24424:	beq	24624 <grisu3_diy_fp_encode_double@@Base+0x7c4>
   24428:	ldrb	r2, [r0]
   2442c:	add	r0, r0, #1
   24430:	sub	r6, r2, #48	; 0x30
   24434:	cmp	r6, #9
   24438:	bls	24474 <grisu3_diy_fp_encode_double@@Base+0x614>
   2443c:	mov	ip, #0
   24440:	b	24498 <grisu3_diy_fp_encode_double@@Base+0x638>
   24444:	sub	r2, r6, #49	; 0x31
   24448:	cmp	r2, #8
   2444c:	bls	24460 <grisu3_diy_fp_encode_double@@Base+0x600>
   24450:	ldr	r3, [sp, #12]
   24454:	cmp	r3, #0
   24458:	movne	r4, #0
   2445c:	b	243d8 <grisu3_diy_fp_encode_double@@Base+0x578>
   24460:	sub	r6, r6, #48	; 0x30
   24464:	add	r3, r3, #1
   24468:	mov	sl, r6
   2446c:	asr	fp, r6, #31
   24470:	b	2440c <grisu3_diy_fp_encode_double@@Base+0x5ac>
   24474:	cmp	fp, r9
   24478:	cmpeq	sl, r8
   2447c:	bls	245f4 <grisu3_diy_fp_encode_double@@Base+0x794>
   24480:	cmp	r2, #52	; 0x34
   24484:	movls	r2, #0
   24488:	movhi	r2, #1
   2448c:	adds	sl, sl, r2
   24490:	adc	fp, fp, #0
   24494:	mov	ip, #1
   24498:	sub	r3, lr, r3
   2449c:	str	r3, [sp, #8]
   244a0:	mov	r3, lr
   244a4:	cmp	r3, r1
   244a8:	mov	r7, r3
   244ac:	sub	r6, r3, lr
   244b0:	beq	2464c <grisu3_diy_fp_encode_double@@Base+0x7ec>
   244b4:	ldrb	r2, [r3], #1
   244b8:	cmp	r2, #48	; 0x30
   244bc:	beq	244a4 <grisu3_diy_fp_encode_double@@Base+0x644>
   244c0:	sub	r2, r2, #49	; 0x31
   244c4:	cmp	r2, #8
   244c8:	bhi	244f8 <grisu3_diy_fp_encode_double@@Base+0x698>
   244cc:	mov	r2, r3
   244d0:	cmp	r2, r1
   244d4:	mov	r7, r2
   244d8:	sub	r6, r2, lr
   244dc:	beq	24740 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   244e0:	ldrb	r3, [r7]
   244e4:	add	r2, r2, #1
   244e8:	sub	r3, r3, #48	; 0x30
   244ec:	cmp	r3, #9
   244f0:	bls	244d0 <grisu3_diy_fp_encode_double@@Base+0x670>
   244f4:	mov	ip, #1
   244f8:	ldrb	r3, [r7]
   244fc:	cmp	r3, #46	; 0x2e
   24500:	bne	24650 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   24504:	add	r3, r7, #1
   24508:	str	r3, [sp, #16]
   2450c:	ldrb	r3, [r7, #1]
   24510:	sub	r3, r3, #48	; 0x30
   24514:	cmp	r3, #9
   24518:	bhi	243a0 <grisu3_diy_fp_encode_double@@Base+0x540>
   2451c:	add	r2, r6, #1
   24520:	add	r3, r7, #1
   24524:	mov	r6, #10
   24528:	str	r2, [sp, #20]
   2452c:	ldr	r2, [sp, #20]
   24530:	cmp	r3, r1
   24534:	sub	r2, r2, r3
   24538:	add	r2, r7, r2
   2453c:	beq	24588 <grisu3_diy_fp_encode_double@@Base+0x728>
   24540:	mov	lr, r3
   24544:	ldrb	r0, [lr], #1
   24548:	sub	r8, r0, #48	; 0x30
   2454c:	cmp	r8, #9
   24550:	bhi	24588 <grisu3_diy_fp_encode_double@@Base+0x728>
   24554:	add	r9, pc, #556	; 0x22c
   24558:	ldrd	r8, [r9]
   2455c:	cmp	fp, r9
   24560:	cmpeq	sl, r8
   24564:	bls	2462c <grisu3_diy_fp_encode_double@@Base+0x7cc>
   24568:	cmp	ip, #0
   2456c:	bne	24588 <grisu3_diy_fp_encode_double@@Base+0x728>
   24570:	cmp	r0, #52	; 0x34
   24574:	movls	r0, #0
   24578:	movhi	r0, #1
   2457c:	adds	sl, sl, r0
   24580:	adc	fp, fp, #0
   24584:	mov	ip, #1
   24588:	ldr	r0, [sp, #16]
   2458c:	ldr	lr, [sp, #8]
   24590:	sub	r0, r3, r0
   24594:	sub	r2, r2, r3
   24598:	add	r0, lr, r0
   2459c:	str	r0, [sp, #8]
   245a0:	cmp	r1, r3
   245a4:	mov	r7, r3
   245a8:	add	r6, r2, r3
   245ac:	beq	2464c <grisu3_diy_fp_encode_double@@Base+0x7ec>
   245b0:	ldrb	r0, [r3], #1
   245b4:	cmp	r0, #48	; 0x30
   245b8:	beq	245a0 <grisu3_diy_fp_encode_double@@Base+0x740>
   245bc:	sub	r0, r0, #49	; 0x31
   245c0:	cmp	r0, #8
   245c4:	bhi	24650 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   245c8:	mov	r2, r3
   245cc:	cmp	r1, r2
   245d0:	mov	r7, r2
   245d4:	beq	24740 <grisu3_diy_fp_encode_double@@Base+0x8e0>
   245d8:	ldrb	r3, [r7]
   245dc:	add	r2, r2, #1
   245e0:	sub	r3, r3, #48	; 0x30
   245e4:	cmp	r3, #9
   245e8:	bls	245cc <grisu3_diy_fp_encode_double@@Base+0x76c>
   245ec:	mov	ip, #1
   245f0:	b	24650 <grisu3_diy_fp_encode_double@@Base+0x7f0>
   245f4:	umull	r6, r7, sl, ip
   245f8:	mla	r7, ip, fp, r7
   245fc:	subs	r6, r6, #48	; 0x30
   24600:	sbc	r7, r7, #0
   24604:	adds	sl, r6, r2
   24608:	adc	fp, r7, #0
   2460c:	b	2441c <grisu3_diy_fp_encode_double@@Base+0x5bc>
   24610:	mov	r3, r1
   24614:	mov	ip, #0
   24618:	mov	sl, #0
   2461c:	mov	fp, #0
   24620:	b	24498 <grisu3_diy_fp_encode_double@@Base+0x638>
   24624:	mov	lr, r1
   24628:	b	2443c <grisu3_diy_fp_encode_double@@Base+0x5dc>
   2462c:	umull	r2, r3, sl, r6
   24630:	mla	r3, r6, fp, r3
   24634:	subs	sl, r2, #48	; 0x30
   24638:	sbc	fp, r3, #0
   2463c:	adds	sl, sl, r0
   24640:	adc	fp, fp, #0
   24644:	mov	r3, lr
   24648:	b	2452c <grisu3_diy_fp_encode_double@@Base+0x6cc>
   2464c:	mov	r7, r1
   24650:	ldr	r3, [sp, #8]
   24654:	cmp	r7, r1
   24658:	add	r3, r6, r3
   2465c:	mov	r8, r3
   24660:	beq	2477c <grisu3_diy_fp_encode_double@@Base+0x91c>
   24664:	ldrb	r3, [r7]
   24668:	orr	r3, r3, #32
   2466c:	cmp	r3, #101	; 0x65
   24670:	bne	2477c <grisu3_diy_fp_encode_double@@Base+0x91c>
   24674:	sub	r3, r1, r7
   24678:	cmp	r3, #1
   2467c:	ble	243a0 <grisu3_diy_fp_encode_double@@Base+0x540>
   24680:	ldrb	r3, [r7, #1]
   24684:	cmp	r3, #43	; 0x2b
   24688:	bne	24748 <grisu3_diy_fp_encode_double@@Base+0x8e8>
   2468c:	add	r7, r7, #2
   24690:	cmp	r1, r7
   24694:	beq	243a0 <grisu3_diy_fp_encode_double@@Base+0x540>
   24698:	mov	lr, #0
   2469c:	ldrb	r6, [r7]
   246a0:	sub	r6, r6, #48	; 0x30
   246a4:	uxtb	r3, r6
   246a8:	cmp	r3, #9
   246ac:	addls	r0, r7, #1
   246b0:	movls	r9, #10
   246b4:	bhi	243a0 <grisu3_diy_fp_encode_double@@Base+0x540>
   246b8:	cmp	r1, r0
   246bc:	mov	r7, r0
   246c0:	beq	24a5c <grisu3_diy_fp_encode_double@@Base+0xbfc>
   246c4:	ldrb	r2, [r0]
   246c8:	add	r0, r0, #1
   246cc:	sub	r3, r2, #48	; 0x30
   246d0:	cmp	r3, #9
   246d4:	bls	24768 <grisu3_diy_fp_encode_double@@Base+0x908>
   246d8:	cmp	lr, #0
   246dc:	beq	246e4 <grisu3_diy_fp_encode_double@@Base+0x884>
   246e0:	rsb	r6, r6, #0
   246e4:	cmp	r1, r7
   246e8:	add	r6, r6, r8
   246ec:	beq	243a0 <grisu3_diy_fp_encode_double@@Base+0x540>
   246f0:	orrs	r3, sl, fp
   246f4:	moveq	r2, #1
   246f8:	movne	r2, #0
   246fc:	cmn	r6, #324	; 0x144
   24700:	movge	r3, #0
   24704:	movlt	r3, #1
   24708:	orrs	r3, r2, r3
   2470c:	bne	24728 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   24710:	ldr	r3, [pc, #120]	; 24790 <grisu3_diy_fp_encode_double@@Base+0x930>
   24714:	cmp	r6, r3
   24718:	ble	247a0 <grisu3_diy_fp_encode_double@@Base+0x940>
   2471c:	ldr	r3, [pc, #112]	; 24794 <grisu3_diy_fp_encode_double@@Base+0x934>
   24720:	mov	r2, #0
   24724:	strd	r2, [r5]
   24728:	ldr	r3, [sp, #12]
   2472c:	cmp	r3, #0
   24730:	vldrne	d7, [r5]
   24734:	vnegne.f64	d7, d7
   24738:	vstrne	d7, [r5]
   2473c:	b	24a54 <grisu3_diy_fp_encode_double@@Base+0xbf4>
   24740:	mov	r7, r1
   24744:	b	245ec <grisu3_diy_fp_encode_double@@Base+0x78c>
   24748:	cmp	r3, #45	; 0x2d
   2474c:	addne	r7, r7, #1
   24750:	bne	24698 <grisu3_diy_fp_encode_double@@Base+0x838>
   24754:	add	r7, r7, #2
   24758:	cmp	r1, r7
   2475c:	beq	243a0 <grisu3_diy_fp_encode_double@@Base+0x540>
   24760:	mov	lr, #1
   24764:	b	2469c <grisu3_diy_fp_encode_double@@Base+0x83c>
   24768:	ldr	r3, [pc, #40]	; 24798 <grisu3_diy_fp_encode_double@@Base+0x938>
   2476c:	cmp	r6, r3
   24770:	mlale	r6, r9, r6, r2
   24774:	suble	r6, r6, #48	; 0x30
   24778:	b	246b8 <grisu3_diy_fp_encode_double@@Base+0x858>
   2477c:	mov	r6, #0
   24780:	b	246e4 <grisu3_diy_fp_encode_double@@Base+0x884>
   24784:	nop			; (mov r0, r0)
   24788:	ldmibls	r9, {r3, r4, r7, r8, fp, ip, pc}
   2478c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   24790:	andeq	r0, r0, r6, lsr r1
   24794:	svcvc	0x00f00000	; IMB
   24798:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2479c:			; <UNDEFINED> instruction: 0x001fffff
   247a0:	ldr	r3, [pc, #-12]	; 2479c <grisu3_diy_fp_encode_double@@Base+0x93c>
   247a4:	mvn	r2, #0
   247a8:	cmp	fp, r3
   247ac:	cmpeq	sl, r2
   247b0:	movls	r3, #1
   247b4:	movhi	r3, #0
   247b8:	cmp	r6, #22
   247bc:	movhi	r3, #0
   247c0:	andls	r3, r3, #1
   247c4:	cmp	r3, #0
   247c8:	beq	24a14 <grisu3_diy_fp_encode_double@@Base+0xbb4>
   247cc:	mov	r0, sl
   247d0:	mov	r1, fp
   247d4:	bl	2e10c <flatcc_json_printer_clear@@Base+0x800>
   247d8:	ldr	r3, [sp, #8]
   247dc:	sub	r6, r6, r3
   247e0:	add	r6, r6, #22
   247e4:	vmov	d7, r0, r1
   247e8:	cmp	r6, #44	; 0x2c
   247ec:	ldrls	pc, [pc, r6, lsl #2]
   247f0:	b	248b0 <grisu3_diy_fp_encode_double@@Base+0xa50>
   247f4:	andeq	r4, r2, r8, lsr #17
   247f8:			; <UNDEFINED> instruction: 0x000248b8
   247fc:	andeq	r4, r2, r0, asr #17
   24800:	andeq	r4, r2, r8, asr #17
   24804:	ldrdeq	r4, [r2], -r0
   24808:	ldrdeq	r4, [r2], -r8
   2480c:	andeq	r4, r2, r0, ror #17
   24810:	andeq	r4, r2, r8, ror #17
   24814:	strdeq	r4, [r2], -r0
   24818:	strdeq	r4, [r2], -r8
   2481c:	andeq	r4, r2, r0, lsl #18
   24820:	andeq	r4, r2, r8, lsl #18
   24824:	andeq	r4, r2, r0, lsl r9
   24828:	andeq	r4, r2, r8, lsl r9
   2482c:	andeq	r4, r2, r0, lsr #18
   24830:	andeq	r4, r2, r8, lsr #18
   24834:	andeq	r4, r2, r0, lsr r9
   24838:	andeq	r4, r2, r8, lsr r9
   2483c:	andeq	r4, r2, r0, asr #18
   24840:	andeq	r4, r2, r8, asr #18
   24844:	andeq	r4, r2, r0, asr r9
   24848:	andeq	r4, r2, r8, asr r9
   2484c:			; <UNDEFINED> instruction: 0x000248b0
   24850:	andeq	r4, r2, r0, ror #18
   24854:	andeq	r4, r2, ip, ror #18
   24858:	andeq	r4, r2, r4, ror r9
   2485c:	andeq	r4, r2, ip, ror r9
   24860:	andeq	r4, r2, r4, lsl #19
   24864:	andeq	r4, r2, ip, lsl #19
   24868:	muleq	r2, r4, r9
   2486c:	muleq	r2, ip, r9
   24870:	andeq	r4, r2, r4, lsr #19
   24874:	andeq	r4, r2, ip, lsr #19
   24878:			; <UNDEFINED> instruction: 0x000249b4
   2487c:			; <UNDEFINED> instruction: 0x000249bc
   24880:	andeq	r4, r2, r4, asr #19
   24884:	andeq	r4, r2, ip, asr #19
   24888:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2488c:	ldrdeq	r4, [r2], -ip
   24890:	andeq	r4, r2, r4, ror #19
   24894:	andeq	r4, r2, ip, ror #19
   24898:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   2489c:	strdeq	r4, [r2], -ip
   248a0:	andeq	r4, r2, r4, lsl #20
   248a4:	andeq	r4, r2, ip, lsl #20
   248a8:	vldr	d6, [pc, #448]	; 24a70 <grisu3_diy_fp_encode_double@@Base+0xc10>
   248ac:	vdiv.f64	d7, d7, d6
   248b0:	vstr	d7, [r5]
   248b4:	b	24728 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   248b8:	vldr	d6, [pc, #440]	; 24a78 <grisu3_diy_fp_encode_double@@Base+0xc18>
   248bc:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248c0:	vldr	d6, [pc, #440]	; 24a80 <grisu3_diy_fp_encode_double@@Base+0xc20>
   248c4:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248c8:	vldr	d6, [pc, #440]	; 24a88 <grisu3_diy_fp_encode_double@@Base+0xc28>
   248cc:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248d0:	vldr	d6, [pc, #440]	; 24a90 <grisu3_diy_fp_encode_double@@Base+0xc30>
   248d4:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248d8:	vldr	d6, [pc, #440]	; 24a98 <grisu3_diy_fp_encode_double@@Base+0xc38>
   248dc:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248e0:	vldr	d6, [pc, #440]	; 24aa0 <grisu3_diy_fp_encode_double@@Base+0xc40>
   248e4:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248e8:	vldr	d6, [pc, #440]	; 24aa8 <grisu3_diy_fp_encode_double@@Base+0xc48>
   248ec:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248f0:	vldr	d6, [pc, #440]	; 24ab0 <grisu3_diy_fp_encode_double@@Base+0xc50>
   248f4:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   248f8:	vldr	d6, [pc, #440]	; 24ab8 <grisu3_diy_fp_encode_double@@Base+0xc58>
   248fc:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24900:	vldr	d6, [pc, #440]	; 24ac0 <grisu3_diy_fp_encode_double@@Base+0xc60>
   24904:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24908:	vldr	d6, [pc, #440]	; 24ac8 <grisu3_diy_fp_encode_double@@Base+0xc68>
   2490c:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24910:	vldr	d6, [pc, #440]	; 24ad0 <grisu3_diy_fp_encode_double@@Base+0xc70>
   24914:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24918:	vldr	d6, [pc, #440]	; 24ad8 <grisu3_diy_fp_encode_double@@Base+0xc78>
   2491c:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24920:	vldr	d6, [pc, #440]	; 24ae0 <grisu3_diy_fp_encode_double@@Base+0xc80>
   24924:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24928:	vldr	d6, [pc, #440]	; 24ae8 <grisu3_diy_fp_encode_double@@Base+0xc88>
   2492c:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24930:	vldr	d6, [pc, #440]	; 24af0 <grisu3_diy_fp_encode_double@@Base+0xc90>
   24934:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24938:	vldr	d6, [pc, #440]	; 24af8 <grisu3_diy_fp_encode_double@@Base+0xc98>
   2493c:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24940:	vldr	d6, [pc, #440]	; 24b00 <grisu3_diy_fp_encode_double@@Base+0xca0>
   24944:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24948:	vldr	d6, [pc, #440]	; 24b08 <grisu3_diy_fp_encode_double@@Base+0xca8>
   2494c:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24950:	vldr	d6, [pc, #440]	; 24b10 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   24954:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24958:	vldr	d6, [pc, #440]	; 24b18 <grisu3_diy_fp_encode_double@@Base+0xcb8>
   2495c:	b	248ac <grisu3_diy_fp_encode_double@@Base+0xa4c>
   24960:	vldr	d6, [pc, #432]	; 24b18 <grisu3_diy_fp_encode_double@@Base+0xcb8>
   24964:	vmul.f64	d7, d7, d6
   24968:	b	248b0 <grisu3_diy_fp_encode_double@@Base+0xa50>
   2496c:	vldr	d6, [pc, #412]	; 24b10 <grisu3_diy_fp_encode_double@@Base+0xcb0>
   24970:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   24974:	vldr	d6, [pc, #396]	; 24b08 <grisu3_diy_fp_encode_double@@Base+0xca8>
   24978:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   2497c:	vldr	d6, [pc, #380]	; 24b00 <grisu3_diy_fp_encode_double@@Base+0xca0>
   24980:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   24984:	vldr	d6, [pc, #364]	; 24af8 <grisu3_diy_fp_encode_double@@Base+0xc98>
   24988:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   2498c:	vldr	d6, [pc, #348]	; 24af0 <grisu3_diy_fp_encode_double@@Base+0xc90>
   24990:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   24994:	vldr	d6, [pc, #332]	; 24ae8 <grisu3_diy_fp_encode_double@@Base+0xc88>
   24998:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   2499c:	vldr	d6, [pc, #316]	; 24ae0 <grisu3_diy_fp_encode_double@@Base+0xc80>
   249a0:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249a4:	vldr	d6, [pc, #300]	; 24ad8 <grisu3_diy_fp_encode_double@@Base+0xc78>
   249a8:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249ac:	vldr	d6, [pc, #284]	; 24ad0 <grisu3_diy_fp_encode_double@@Base+0xc70>
   249b0:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249b4:	vldr	d6, [pc, #268]	; 24ac8 <grisu3_diy_fp_encode_double@@Base+0xc68>
   249b8:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249bc:	vldr	d6, [pc, #252]	; 24ac0 <grisu3_diy_fp_encode_double@@Base+0xc60>
   249c0:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249c4:	vldr	d6, [pc, #236]	; 24ab8 <grisu3_diy_fp_encode_double@@Base+0xc58>
   249c8:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249cc:	vldr	d6, [pc, #220]	; 24ab0 <grisu3_diy_fp_encode_double@@Base+0xc50>
   249d0:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249d4:	vldr	d6, [pc, #204]	; 24aa8 <grisu3_diy_fp_encode_double@@Base+0xc48>
   249d8:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249dc:	vldr	d6, [pc, #188]	; 24aa0 <grisu3_diy_fp_encode_double@@Base+0xc40>
   249e0:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249e4:	vldr	d6, [pc, #172]	; 24a98 <grisu3_diy_fp_encode_double@@Base+0xc38>
   249e8:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249ec:	vldr	d6, [pc, #156]	; 24a90 <grisu3_diy_fp_encode_double@@Base+0xc30>
   249f0:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249f4:	vldr	d6, [pc, #140]	; 24a88 <grisu3_diy_fp_encode_double@@Base+0xc28>
   249f8:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   249fc:	vldr	d6, [pc, #124]	; 24a80 <grisu3_diy_fp_encode_double@@Base+0xc20>
   24a00:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   24a04:	vldr	d6, [pc, #108]	; 24a78 <grisu3_diy_fp_encode_double@@Base+0xc18>
   24a08:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   24a0c:	vldr	d6, [pc, #92]	; 24a70 <grisu3_diy_fp_encode_double@@Base+0xc10>
   24a10:	b	24964 <grisu3_diy_fp_encode_double@@Base+0xb04>
   24a14:	str	r5, [sp, #4]
   24a18:	str	ip, [sp]
   24a1c:	ldr	r3, [sp, #8]
   24a20:	mov	r2, r6
   24a24:	mov	r0, sl
   24a28:	mov	r1, fp
   24a2c:	bl	23e60 <grisu3_diy_fp_encode_double@@Base>
   24a30:	cmp	r0, #0
   24a34:	bne	24728 <grisu3_diy_fp_encode_double@@Base+0x8c8>
   24a38:	add	r1, sp, #28
   24a3c:	mov	r0, r4
   24a40:	bl	14600 <strtod@plt>
   24a44:	ldr	r3, [sp, #28]
   24a48:	cmp	r7, r3
   24a4c:	movcs	r7, r3
   24a50:	vstr	d0, [r5]
   24a54:	mov	r4, r7
   24a58:	b	243d8 <grisu3_diy_fp_encode_double@@Base+0x578>
   24a5c:	cmp	lr, #0
   24a60:	bne	246e0 <grisu3_diy_fp_encode_double@@Base+0x880>
   24a64:	mov	r4, lr
   24a68:	b	243d8 <grisu3_diy_fp_encode_double@@Base+0x578>
   24a6c:	nop			; (mov r0, r0)
   24a70:			; <UNDEFINED> instruction: 0x064dd592
   24a74:	strmi	pc, [r0], #207	; 0xcf
   24a78:	usatle	lr, #2, r0, asr #30
   24a7c:	strbmi	r1, [fp], #-2788	; 0xfffff51c
   24a80:	ldmvc	r5!, {r6, sl, fp, pc}
   24a84:	ldrmi	sl, [r5], #-3869	; 0xfffff0e3
   24a88:	addsvs	r3, r1, r0, lsl #26
   24a8c:	mvnmi	r5, #228, 16	; 0xe40000
   24a90:	strbvs	ip, [lr, -r0, lsl #16]
   24a94:			; <UNDEFINED> instruction: 0x43abc16d
   24a98:	ldrbhi	sl, [r8]
   24a9c:	cmnmi	r6, #1459617792	; 0x57000000
   24aa0:	strbcc	r8, [r0, r0]!
   24aa4:	movtmi	ip, #4985	; 0x1379
   24aa8:	ldrtcs	r0, [r4], -r0
   24aac:	movwmi	r6, #52213	; 0xcbf5
   24ab0:	cdpne	0, 9, cr0, cr0, cr0, {0}
   24ab4:	sbcsmi	fp, r6, #196, 24	; 0xc400
   24ab8:	strb	r0, [r0, #-0]
   24abc:	adcmi	r3, r2, #156	; 0x9c
   24ac0:	andge	r0, r0, #0
   24ac4:	rsbmi	r1, sp, #148, 20	; 0x94000
   24ac8:	stmda	r0, {}	; <UNPREDICTABLE>
   24acc:	eorsmi	r4, r7, #7733248	; 0x760000
   24ad0:	andcs	r0, r0, r0
   24ad4:	andmi	sl, r2, #95	; 0x5f
   24ad8:	andeq	r0, r0, r0
   24adc:	bicmi	ip, sp, r5, ror #26
   24ae0:	andeq	r0, r0, r0
   24ae4:	orrsmi	sp, r7, r4, lsl #15
   24ae8:	andeq	r0, r0, r0
   24aec:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   24af0:	andeq	r0, r0, r0
   24af4:	smlawbmi	lr, r0, r4, r8
   24af8:	andeq	r0, r0, r0
   24afc:	rscsmi	r6, r8, r0, lsl #20
   24b00:	andeq	r0, r0, r0
   24b04:	sbcmi	r8, r3, r0, lsl #16
   24b08:	andeq	r0, r0, r0
   24b0c:	addmi	r4, pc, r0
   24b10:	andeq	r0, r0, r0
   24b14:	subsmi	r0, r9, r0
   24b18:	andeq	r0, r0, r0
   24b1c:	eormi	r0, r4, r0

00024b20 <flatcc_json_parser_error_string@@Base>:
   24b20:	cmp	r0, #34	; 0x22
   24b24:	ldrls	r3, [pc, #12]	; 24b38 <flatcc_json_parser_error_string@@Base+0x18>
   24b28:	addls	r0, r3, r0, lsl #2
   24b2c:	ldrls	r0, [r0, #1476]	; 0x5c4
   24b30:	ldrhi	r0, [pc, #4]	; 24b3c <flatcc_json_parser_error_string@@Base+0x1c>
   24b34:	bx	lr
   24b38:	andeq	r2, r3, r0, lsl #9
   24b3c:	andeq	r2, r3, r8, asr #32

00024b40 <flatcc_json_parser_set_error@@Base>:
   24b40:	ldr	ip, [r0, #20]
   24b44:	cmp	ip, #0
   24b48:	streq	r3, [r0, #20]
   24b4c:	ldreq	r3, [r0, #4]
   24b50:	streq	r1, [r0, #32]
   24b54:	subeq	r3, r1, r3
   24b58:	addeq	r3, r3, #1
   24b5c:	streq	r3, [r0, #16]
   24b60:	mov	r0, r2
   24b64:	bx	lr
   24b68:	cmp	r1, r2
   24b6c:	beq	24ba4 <flatcc_json_parser_set_error@@Base+0x64>
   24b70:	ldrb	r3, [r1]
   24b74:	cmp	r3, #34	; 0x22
   24b78:	bne	24b84 <flatcc_json_parser_set_error@@Base+0x44>
   24b7c:	add	r0, r1, #1
   24b80:	bx	lr
   24b84:	cmp	r3, #92	; 0x5c
   24b88:	bne	24b9c <flatcc_json_parser_set_error@@Base+0x5c>
   24b8c:	sub	r3, r2, r1
   24b90:	cmp	r3, #1
   24b94:	ble	24ba4 <flatcc_json_parser_set_error@@Base+0x64>
   24b98:	add	r1, r1, #1
   24b9c:	add	r1, r1, #1
   24ba0:	b	24b68 <flatcc_json_parser_set_error@@Base+0x28>
   24ba4:	mov	r3, #20
   24ba8:	b	24b40 <flatcc_json_parser_set_error@@Base>
   24bac:	cmp	r1, r2
   24bb0:	beq	24bc0 <flatcc_json_parser_set_error@@Base+0x80>
   24bb4:	ldrb	r3, [r1]
   24bb8:	cmp	r3, #34	; 0x22
   24bbc:	beq	24bc8 <flatcc_json_parser_set_error@@Base+0x88>
   24bc0:	mov	r3, #16
   24bc4:	b	24b40 <flatcc_json_parser_set_error@@Base>
   24bc8:	add	r0, r1, #1
   24bcc:	bx	lr
   24bd0:	cmp	r1, r2
   24bd4:	beq	24be4 <flatcc_json_parser_set_error@@Base+0xa4>
   24bd8:	ldrb	r3, [r1]
   24bdc:	cmp	r3, #34	; 0x22
   24be0:	beq	24bec <flatcc_json_parser_set_error@@Base+0xac>
   24be4:	mov	r3, #20
   24be8:	b	24b40 <flatcc_json_parser_set_error@@Base>
   24bec:	add	r0, r1, #1
   24bf0:	bx	lr

00024bf4 <flatcc_json_parser_string_part@@Base>:
   24bf4:	cmp	r2, r1
   24bf8:	beq	24c64 <flatcc_json_parser_string_part@@Base+0x70>
   24bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   24c00:	b	24c0c <flatcc_json_parser_string_part@@Base+0x18>
   24c04:	cmp	r2, r1
   24c08:	beq	24c58 <flatcc_json_parser_string_part@@Base+0x64>
   24c0c:	mov	lr, r1
   24c10:	ldrb	r3, [r1], #1
   24c14:	cmp	r3, #34	; 0x22
   24c18:	cmpne	r3, #31
   24c1c:	movhi	ip, #1
   24c20:	movls	ip, #0
   24c24:	cmp	r3, #92	; 0x5c
   24c28:	moveq	ip, #0
   24c2c:	andne	ip, ip, #1
   24c30:	cmp	ip, #0
   24c34:	bne	24c04 <flatcc_json_parser_string_part@@Base+0x10>
   24c38:	cmp	r3, #31
   24c3c:	bls	24c48 <flatcc_json_parser_string_part@@Base+0x54>
   24c40:	mov	r0, lr
   24c44:	pop	{pc}		; (ldr pc, [sp], #4)
   24c48:	mov	r3, #17
   24c4c:	mov	r1, lr
   24c50:	pop	{lr}		; (ldr lr, [sp], #4)
   24c54:	b	24b40 <flatcc_json_parser_set_error@@Base>
   24c58:	mov	r3, #20
   24c5c:	mov	r1, r2
   24c60:	b	24c50 <flatcc_json_parser_string_part@@Base+0x5c>
   24c64:	mov	r3, #20
   24c68:	mov	r1, r2
   24c6c:	b	24c54 <flatcc_json_parser_string_part@@Base+0x60>

00024c70 <flatcc_json_parser_space_ext@@Base>:
   24c70:	cmp	r1, r2
   24c74:	mov	ip, #0
   24c78:	mov	r3, r1
   24c7c:	bne	24cfc <flatcc_json_parser_space_ext@@Base+0x8c>
   24c80:	mov	r0, r2
   24c84:	bx	lr
   24c88:	cmp	r3, #13
   24c8c:	beq	24cb4 <flatcc_json_parser_space_ext@@Base+0x44>
   24c90:	cmp	r3, #32
   24c94:	bne	24d30 <flatcc_json_parser_space_ext@@Base+0xc0>
   24c98:	mov	r3, r1
   24c9c:	cmp	r3, r2
   24ca0:	mov	r1, r3
   24ca4:	bne	24d00 <flatcc_json_parser_space_ext@@Base+0x90>
   24ca8:	mov	r1, r2
   24cac:	mov	r0, r1
   24cb0:	pop	{pc}		; (ldr pc, [sp], #4)
   24cb4:	sub	r3, r2, r1
   24cb8:	cmp	r3, #1
   24cbc:	movle	r3, ip
   24cc0:	ldrbgt	r3, [r1, #1]
   24cc4:	subgt	r3, r3, #10
   24cc8:	clzgt	r3, r3
   24ccc:	lsrgt	r3, r3, #5
   24cd0:	add	r1, r1, r3
   24cd4:	ldr	r3, [r0, #12]
   24cd8:	add	r1, r1, #1
   24cdc:	add	r3, r3, #1
   24ce0:	str	r3, [r0, #12]
   24ce4:	str	r1, [r0, #4]
   24ce8:	cmp	r2, r1
   24cec:	bne	24d10 <flatcc_json_parser_space_ext@@Base+0xa0>
   24cf0:	b	24ca8 <flatcc_json_parser_space_ext@@Base+0x38>
   24cf4:	add	r1, r1, #1
   24cf8:	b	24ce8 <flatcc_json_parser_space_ext@@Base+0x78>
   24cfc:	push	{lr}		; (str lr, [sp, #-4]!)
   24d00:	add	r3, r3, #1
   24d04:	ldrb	lr, [r1]
   24d08:	cmp	lr, #32
   24d0c:	beq	24c9c <flatcc_json_parser_space_ext@@Base+0x2c>
   24d10:	ldrb	r3, [r1]
   24d14:	cmp	r3, #32
   24d18:	bhi	24cac <flatcc_json_parser_space_ext@@Base+0x3c>
   24d1c:	cmp	r3, #10
   24d20:	beq	24cd4 <flatcc_json_parser_space_ext@@Base+0x64>
   24d24:	bhi	24c88 <flatcc_json_parser_space_ext@@Base+0x18>
   24d28:	cmp	r3, #9
   24d2c:	beq	24cf4 <flatcc_json_parser_space_ext@@Base+0x84>
   24d30:	mov	r3, #5
   24d34:	pop	{lr}		; (ldr lr, [sp], #4)
   24d38:	b	24b40 <flatcc_json_parser_set_error@@Base>
   24d3c:	sub	r3, r2, r1
   24d40:	cmp	r3, #1
   24d44:	ble	24d68 <flatcc_json_parser_space_ext@@Base+0xf8>
   24d48:	ldrb	r3, [r1]
   24d4c:	cmp	r3, #32
   24d50:	bhi	24d6c <flatcc_json_parser_space_ext@@Base+0xfc>
   24d54:	bne	24d68 <flatcc_json_parser_space_ext@@Base+0xf8>
   24d58:	ldrb	r3, [r1, #1]
   24d5c:	cmp	r3, #32
   24d60:	addhi	r1, r1, #1
   24d64:	bhi	24d6c <flatcc_json_parser_space_ext@@Base+0xfc>
   24d68:	b	24c70 <flatcc_json_parser_space_ext@@Base>
   24d6c:	mov	r0, r1
   24d70:	bx	lr
   24d74:	push	{r4, r5, r6, lr}
   24d78:	mov	r5, r3
   24d7c:	mov	r6, r0
   24d80:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   24d84:	cmp	r2, r0
   24d88:	moveq	r3, #0
   24d8c:	beq	24e18 <flatcc_json_parser_space_ext@@Base+0x1a8>
   24d90:	ldrb	r3, [r0]
   24d94:	mov	r4, r2
   24d98:	cmp	r3, #44	; 0x2c
   24d9c:	beq	24dd0 <flatcc_json_parser_space_ext@@Base+0x160>
   24da0:	mov	r3, #0
   24da4:	str	r3, [r5]
   24da8:	ldrb	r3, [r0]
   24dac:	cmp	r3, #93	; 0x5d
   24db0:	movne	r3, #9
   24db4:	movne	r1, r0
   24db8:	bne	24df4 <flatcc_json_parser_space_ext@@Base+0x184>
   24dbc:	mov	r2, r4
   24dc0:	add	r1, r0, #1
   24dc4:	mov	r0, r6
   24dc8:	pop	{r4, r5, r6, lr}
   24dcc:	b	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   24dd0:	add	r1, r0, #1
   24dd4:	mov	r0, r6
   24dd8:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   24ddc:	cmp	r2, r0
   24de0:	bne	24e00 <flatcc_json_parser_space_ext@@Base+0x190>
   24de4:	mov	r3, #0
   24de8:	str	r3, [r5]
   24dec:	mov	r1, r2
   24df0:	mov	r3, #9
   24df4:	mov	r0, r6
   24df8:	pop	{r4, r5, r6, lr}
   24dfc:	b	24b40 <flatcc_json_parser_set_error@@Base>
   24e00:	ldrb	r3, [r0]
   24e04:	cmp	r3, #93	; 0x5d
   24e08:	movne	r3, #1
   24e0c:	moveq	r3, #0
   24e10:	streq	r3, [r5]
   24e14:	beq	24dbc <flatcc_json_parser_space_ext@@Base+0x14c>
   24e18:	str	r3, [r5]
   24e1c:	pop	{r4, r5, r6, pc}
   24e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e24:	sub	sp, sp, #28
   24e28:	mov	sl, r3
   24e2c:	ldr	lr, [sp, #64]	; 0x40
   24e30:	mov	r3, #0
   24e34:	cmp	r1, r2
   24e38:	mov	r6, r0
   24e3c:	mov	r4, r2
   24e40:	strb	r3, [lr]
   24e44:	moveq	r1, r2
   24e48:	beq	24e68 <flatcc_json_parser_space_ext@@Base+0x1f8>
   24e4c:	ldrb	r3, [r1]
   24e50:	cmp	r3, #34	; 0x22
   24e54:	addeq	r1, r1, #1
   24e58:	beq	24e68 <flatcc_json_parser_space_ext@@Base+0x1f8>
   24e5c:	mov	r3, #5
   24e60:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   24e64:	mov	r1, r0
   24e68:	mov	r2, r4
   24e6c:	mov	r0, r6
   24e70:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   24e74:	cmp	r4, r0
   24e78:	mov	r7, r0
   24e7c:	movne	r9, #0
   24e80:	addne	fp, sp, #16
   24e84:	bne	24e98 <flatcc_json_parser_space_ext@@Base+0x228>
   24e88:	mov	r0, r4
   24e8c:	add	sp, sp, #28
   24e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24e94:	mov	r7, r5
   24e98:	mov	r8, sl
   24e9c:	add	r3, sp, #12
   24ea0:	str	r3, [sp, #4]
   24ea4:	str	fp, [sp]
   24ea8:	add	r3, sp, #8
   24eac:	ldr	r5, [r8]
   24eb0:	mov	r2, r4
   24eb4:	mov	r1, r7
   24eb8:	mov	r0, r6
   24ebc:	blx	r5
   24ec0:	cmp	r4, r0
   24ec4:	mov	r5, r0
   24ec8:	beq	24e88 <flatcc_json_parser_space_ext@@Base+0x218>
   24ecc:	cmp	r7, r0
   24ed0:	bne	24f18 <flatcc_json_parser_space_ext@@Base+0x2a8>
   24ed4:	ldr	r3, [r8, #4]!
   24ed8:	cmp	r3, #0
   24edc:	bne	24e9c <flatcc_json_parser_space_ext@@Base+0x22c>
   24ee0:	mov	r2, r4
   24ee4:	mov	r3, #23
   24ee8:	mov	r1, r7
   24eec:	mov	r0, r6
   24ef0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   24ef4:	mov	r4, r0
   24ef8:	b	24e88 <flatcc_json_parser_space_ext@@Base+0x218>
   24efc:	ldrd	r2, [sp, #16]
   24f00:	cmp	r3, #0
   24f04:	cmpeq	r2, #255	; 0xff
   24f08:	uxtbls	r9, r2
   24f0c:	bls	24f40 <flatcc_json_parser_space_ext@@Base+0x2d0>
   24f10:	mov	r3, #7
   24f14:	b	24f28 <flatcc_json_parser_space_ext@@Base+0x2b8>
   24f18:	ldr	r3, [sp, #8]
   24f1c:	cmp	r3, #0
   24f20:	beq	24efc <flatcc_json_parser_space_ext@@Base+0x28c>
   24f24:	mov	r3, #8
   24f28:	mov	r2, r4
   24f2c:	mov	r1, r5
   24f30:	mov	r0, r6
   24f34:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   24f38:	cmp	r4, r0
   24f3c:	beq	24e88 <flatcc_json_parser_space_ext@@Base+0x218>
   24f40:	ldr	r3, [sp, #64]	; 0x40
   24f44:	ldr	r2, [sp, #64]	; 0x40
   24f48:	ldrb	r3, [r3]
   24f4c:	add	r3, r9, r3
   24f50:	strb	r3, [r2]
   24f54:	ldr	r3, [sp, #12]
   24f58:	cmp	r3, #0
   24f5c:	bne	24e94 <flatcc_json_parser_space_ext@@Base+0x224>
   24f60:	mov	r4, r5
   24f64:	b	24e88 <flatcc_json_parser_space_ext@@Base+0x218>
   24f68:	cmp	r1, r2
   24f6c:	push	{r4, r5, r6, lr}
   24f70:	mov	ip, r2
   24f74:	mov	r6, r0
   24f78:	beq	24f88 <flatcc_json_parser_space_ext@@Base+0x318>
   24f7c:	ldrb	r4, [r1]
   24f80:	cmp	r4, #91	; 0x5b
   24f84:	beq	24fa4 <flatcc_json_parser_space_ext@@Base+0x334>
   24f88:	mov	r2, #0
   24f8c:	str	r2, [r3]
   24f90:	mov	r0, r6
   24f94:	mov	r3, #22
   24f98:	mov	r2, ip
   24f9c:	pop	{r4, r5, r6, lr}
   24fa0:	b	24b40 <flatcc_json_parser_set_error@@Base>
   24fa4:	add	r1, r1, #1
   24fa8:	mov	r5, r3
   24fac:	mov	r4, r2
   24fb0:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   24fb4:	cmp	r2, r0
   24fb8:	beq	24fe0 <flatcc_json_parser_space_ext@@Base+0x370>
   24fbc:	ldrb	r3, [r0]
   24fc0:	cmp	r3, #93	; 0x5d
   24fc4:	bne	24fe0 <flatcc_json_parser_space_ext@@Base+0x370>
   24fc8:	mov	r3, #0
   24fcc:	str	r3, [r5]
   24fd0:	add	r1, r0, #1
   24fd4:	mov	r0, r6
   24fd8:	pop	{r4, r5, r6, lr}
   24fdc:	b	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   24fe0:	mov	r3, #1
   24fe4:	str	r3, [r5]
   24fe8:	pop	{r4, r5, r6, pc}
   24fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ff0:	sub	sp, sp, #20
   24ff4:	mov	r5, r0
   24ff8:	mov	r8, r3
   24ffc:	ldr	r0, [r0]
   25000:	mov	r3, #0
   25004:	mov	r6, r1
   25008:	mov	r4, r2
   2500c:	ldr	r9, [sp, #56]	; 0x38
   25010:	str	r3, [sp, #8]
   25014:	bl	21458 <flatcc_builder_start_offset_vector@@Base>
   25018:	subs	r7, r0, #0
   2501c:	bne	25098 <flatcc_json_parser_space_ext@@Base+0x428>
   25020:	mov	r1, r6
   25024:	add	r3, sp, #12
   25028:	mov	r2, r4
   2502c:	mov	r0, r5
   25030:	bl	24f68 <flatcc_json_parser_space_ext@@Base+0x2f8>
   25034:	add	sl, sp, #8
   25038:	mov	fp, #1
   2503c:	mov	r6, r0
   25040:	ldr	r3, [sp, #12]
   25044:	cmp	r3, #0
   25048:	bne	250a0 <flatcc_json_parser_space_ext@@Base+0x430>
   2504c:	cmp	r7, r9
   25050:	bne	250a8 <flatcc_json_parser_space_ext@@Base+0x438>
   25054:	mov	r1, r8
   25058:	ldr	r0, [r5]
   2505c:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   25060:	mov	r1, r0
   25064:	ldr	r0, [r5]
   25068:	bl	21ecc <flatcc_builder_end_offset_vector_for_unions@@Base>
   2506c:	cmp	r0, #0
   25070:	str	r0, [sp, #8]
   25074:	beq	25098 <flatcc_json_parser_space_ext@@Base+0x428>
   25078:	ldrh	r1, [sp, #60]	; 0x3c
   2507c:	ldr	r0, [r5]
   25080:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   25084:	cmp	r0, #0
   25088:	movne	r4, r6
   2508c:	ldrne	r3, [sp, #8]
   25090:	strne	r3, [r0]
   25094:	bne	250c0 <flatcc_json_parser_space_ext@@Base+0x450>
   25098:	mov	r3, #33	; 0x21
   2509c:	b	250ac <flatcc_json_parser_space_ext@@Base+0x43c>
   250a0:	cmp	r7, r9
   250a4:	bne	250cc <flatcc_json_parser_space_ext@@Base+0x45c>
   250a8:	mov	r3, #30
   250ac:	mov	r2, r4
   250b0:	mov	r1, r6
   250b4:	mov	r0, r5
   250b8:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   250bc:	mov	r4, r0
   250c0:	mov	r0, r4
   250c4:	add	sp, sp, #20
   250c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250cc:	mov	r1, r8
   250d0:	ldr	r0, [r5]
   250d4:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   250d8:	mov	r1, r6
   250dc:	mov	r2, r4
   250e0:	ldr	ip, [sp, #64]	; 0x40
   250e4:	ldrb	r3, [r0, r7]
   250e8:	str	sl, [sp]
   250ec:	mov	r0, r5
   250f0:	blx	ip
   250f4:	cmp	r4, r0
   250f8:	mov	r6, r0
   250fc:	beq	250c0 <flatcc_json_parser_space_ext@@Base+0x450>
   25100:	mov	r1, fp
   25104:	ldr	r0, [r5]
   25108:	bl	21054 <flatcc_builder_extend_offset_vector@@Base>
   2510c:	cmp	r0, #0
   25110:	beq	25098 <flatcc_json_parser_space_ext@@Base+0x428>
   25114:	ldr	r3, [sp, #8]
   25118:	mov	r1, r6
   2511c:	str	r3, [r0]
   25120:	mov	r2, r4
   25124:	add	r3, sp, #12
   25128:	mov	r0, r5
   2512c:	bl	24d74 <flatcc_json_parser_space_ext@@Base+0x104>
   25130:	add	r7, r7, #1
   25134:	mov	r6, r0
   25138:	b	25040 <flatcc_json_parser_space_ext@@Base+0x3d0>

0002513c <flatcc_json_parser_string_escape@@Base>:
   2513c:	push	{r4, r5, lr}
   25140:	sub	lr, r2, r1
   25144:	cmp	lr, #1
   25148:	ble	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   2514c:	ldrb	ip, [r1]
   25150:	cmp	ip, #92	; 0x5c
   25154:	beq	2516c <flatcc_json_parser_string_escape@@Base+0x30>
   25158:	mov	ip, #0
   2515c:	strb	ip, [r3]
   25160:	mov	r3, #18
   25164:	pop	{r4, r5, lr}
   25168:	b	24b40 <flatcc_json_parser_set_error@@Base>
   2516c:	ldrb	ip, [r1, #1]
   25170:	cmp	ip, #102	; 0x66
   25174:	beq	25410 <flatcc_json_parser_string_escape@@Base+0x2d4>
   25178:	bhi	251c8 <flatcc_json_parser_string_escape@@Base+0x8c>
   2517c:	cmp	ip, #47	; 0x2f
   25180:	beq	25190 <flatcc_json_parser_string_escape@@Base+0x54>
   25184:	bhi	251a0 <flatcc_json_parser_string_escape@@Base+0x64>
   25188:	cmp	ip, #34	; 0x22
   2518c:	bne	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   25190:	mov	r2, #1
   25194:	strb	r2, [r3]
   25198:	strb	ip, [r3, #1]
   2519c:	b	251c0 <flatcc_json_parser_string_escape@@Base+0x84>
   251a0:	cmp	ip, #92	; 0x5c
   251a4:	beq	25190 <flatcc_json_parser_string_escape@@Base+0x54>
   251a8:	cmp	ip, #98	; 0x62
   251ac:	moveq	r2, #1
   251b0:	strbeq	r2, [r3]
   251b4:	moveq	r2, #8
   251b8:	bne	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   251bc:	strb	r2, [r3, #1]
   251c0:	add	r0, r1, #2
   251c4:	pop	{r4, r5, pc}
   251c8:	cmp	ip, #116	; 0x74
   251cc:	beq	253f0 <flatcc_json_parser_string_escape@@Base+0x2b4>
   251d0:	bhi	251f4 <flatcc_json_parser_string_escape@@Base+0xb8>
   251d4:	cmp	ip, #110	; 0x6e
   251d8:	beq	25400 <flatcc_json_parser_string_escape@@Base+0x2c4>
   251dc:	cmp	ip, #114	; 0x72
   251e0:	moveq	r2, #1
   251e4:	strbeq	r2, [r3]
   251e8:	moveq	r2, #13
   251ec:	beq	251bc <flatcc_json_parser_string_escape@@Base+0x80>
   251f0:	b	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   251f4:	cmp	ip, #117	; 0x75
   251f8:	beq	25288 <flatcc_json_parser_string_escape@@Base+0x14c>
   251fc:	cmp	ip, #120	; 0x78
   25200:	bne	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   25204:	mov	ip, #1
   25208:	cmp	lr, #3
   2520c:	strb	ip, [r3]
   25210:	ble	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   25214:	ldrb	ip, [r1, #2]
   25218:	sub	lr, ip, #48	; 0x30
   2521c:	uxtb	r4, lr
   25220:	cmp	r4, #9
   25224:	lslls	ip, lr, #4
   25228:	bls	25244 <flatcc_json_parser_string_escape@@Base+0x108>
   2522c:	orr	ip, ip, #32
   25230:	sub	lr, ip, #97	; 0x61
   25234:	cmp	lr, #5
   25238:	bhi	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   2523c:	sub	ip, ip, #87	; 0x57
   25240:	lsl	ip, ip, #4
   25244:	ldrb	lr, [r1, #3]
   25248:	uxtb	ip, ip
   2524c:	sub	r4, lr, #48	; 0x30
   25250:	uxtb	r4, r4
   25254:	cmp	r4, #9
   25258:	orrls	ip, r4, ip
   2525c:	bls	2527c <flatcc_json_parser_string_escape@@Base+0x140>
   25260:	orr	lr, lr, #32
   25264:	sub	r4, lr, #97	; 0x61
   25268:	cmp	r4, #5
   2526c:	bhi	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   25270:	sub	lr, lr, #87	; 0x57
   25274:	orr	ip, lr, ip
   25278:	uxtb	ip, ip
   2527c:	strb	ip, [r3, #1]
   25280:	add	r0, r1, #4
   25284:	pop	{r4, r5, pc}
   25288:	cmp	lr, #5
   2528c:	ble	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   25290:	ldrb	ip, [r1, #2]
   25294:	sub	lr, ip, #48	; 0x30
   25298:	uxtb	r4, lr
   2529c:	cmp	r4, #9
   252a0:	lslls	ip, lr, #12
   252a4:	uxthls	ip, ip
   252a8:	bls	252c8 <flatcc_json_parser_string_escape@@Base+0x18c>
   252ac:	orr	ip, ip, #32
   252b0:	sub	lr, ip, #97	; 0x61
   252b4:	cmp	lr, #5
   252b8:	bhi	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   252bc:	sub	ip, ip, #87	; 0x57
   252c0:	lsl	ip, ip, #12
   252c4:	and	ip, ip, #61440	; 0xf000
   252c8:	ldrb	lr, [r1, #3]
   252cc:	sub	r4, lr, #48	; 0x30
   252d0:	uxtb	r5, r4
   252d4:	cmp	r5, #9
   252d8:	uxthls	r4, r4
   252dc:	orrls	ip, ip, r4, lsl #8
   252e0:	bls	25300 <flatcc_json_parser_string_escape@@Base+0x1c4>
   252e4:	orr	lr, lr, #32
   252e8:	sub	r4, lr, #97	; 0x61
   252ec:	cmp	r4, #5
   252f0:	bhi	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   252f4:	sub	lr, lr, #87	; 0x57
   252f8:	uxth	lr, lr
   252fc:	orr	ip, ip, lr, lsl #8
   25300:	ldrb	lr, [r1, #4]
   25304:	and	ip, ip, #65280	; 0xff00
   25308:	sub	r4, lr, #48	; 0x30
   2530c:	uxtb	r5, r4
   25310:	cmp	r5, #9
   25314:	uxthls	r4, r4
   25318:	orrls	ip, ip, r4, lsl #4
   2531c:	bls	2533c <flatcc_json_parser_string_escape@@Base+0x200>
   25320:	orr	lr, lr, #32
   25324:	sub	r4, lr, #97	; 0x61
   25328:	cmp	r4, #5
   2532c:	bhi	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   25330:	sub	lr, lr, #87	; 0x57
   25334:	uxth	lr, lr
   25338:	orr	ip, ip, lr, lsl #4
   2533c:	ldrb	lr, [r1, #5]
   25340:	uxth	ip, ip
   25344:	sub	r4, lr, #48	; 0x30
   25348:	uxtb	r5, r4
   2534c:	cmp	r5, #9
   25350:	orrls	r2, ip, r4
   25354:	bls	25370 <flatcc_json_parser_string_escape@@Base+0x234>
   25358:	orr	lr, lr, #32
   2535c:	sub	r4, lr, #97	; 0x61
   25360:	cmp	r4, #5
   25364:	bhi	25158 <flatcc_json_parser_string_escape@@Base+0x1c>
   25368:	sub	r2, lr, #87	; 0x57
   2536c:	orr	r2, ip, r2
   25370:	uxth	r2, r2
   25374:	cmp	r2, #127	; 0x7f
   25378:	movls	r0, #1
   2537c:	strbls	r0, [r3]
   25380:	strbls	r2, [r3, #1]
   25384:	bls	253b8 <flatcc_json_parser_string_escape@@Base+0x27c>
   25388:	cmp	r2, #2048	; 0x800
   2538c:	lsr	r0, r2, #6
   25390:	and	ip, r2, #63	; 0x3f
   25394:	bcs	253c0 <flatcc_json_parser_string_escape@@Base+0x284>
   25398:	mov	r2, #2
   2539c:	strb	r2, [r3]
   253a0:	mvn	r2, r0, lsl #26
   253a4:	mvn	r2, r2, lsr #26
   253a8:	strb	r2, [r3, #1]
   253ac:	mvn	r2, ip, lsl #25
   253b0:	mvn	r2, r2, lsr #25
   253b4:	strb	r2, [r3, #2]
   253b8:	add	r0, r1, #6
   253bc:	pop	{r4, r5, pc}
   253c0:	mov	lr, #3
   253c4:	strb	lr, [r3]
   253c8:	mvn	lr, #31
   253cc:	orr	r2, lr, r2, lsr #12
   253d0:	strb	r2, [r3, #1]
   253d4:	and	r2, r0, #63	; 0x3f
   253d8:	mvn	r0, #127	; 0x7f
   253dc:	orr	r2, r2, r0
   253e0:	strb	r2, [r3, #2]
   253e4:	orr	r2, ip, r0
   253e8:	strb	r2, [r3, #3]
   253ec:	b	253b8 <flatcc_json_parser_string_escape@@Base+0x27c>
   253f0:	mov	r2, #1
   253f4:	strb	r2, [r3]
   253f8:	mov	r2, #9
   253fc:	b	251bc <flatcc_json_parser_string_escape@@Base+0x80>
   25400:	mov	r2, #1
   25404:	strb	r2, [r3]
   25408:	mov	r2, #10
   2540c:	b	251bc <flatcc_json_parser_string_escape@@Base+0x80>
   25410:	mov	r2, #1
   25414:	strb	r2, [r3]
   25418:	mov	r2, #12
   2541c:	b	251bc <flatcc_json_parser_string_escape@@Base+0x80>

00025420 <flatcc_json_parser_skip_constant@@Base>:
   25420:	push	{r4, r5, r6, lr}
   25424:	mov	r6, r0
   25428:	mov	r5, r2
   2542c:	mov	r4, r1
   25430:	cmp	r4, r5
   25434:	beq	25494 <flatcc_json_parser_skip_constant@@Base+0x74>
   25438:	ldrb	r3, [r4]
   2543c:	sub	r2, r3, #95	; 0x5f
   25440:	clz	r2, r2
   25444:	lsr	r2, r2, #5
   25448:	orrs	r2, r2, r3, lsr #7
   2544c:	bne	25460 <flatcc_json_parser_skip_constant@@Base+0x40>
   25450:	sub	r2, r3, #48	; 0x30
   25454:	cmp	r3, #46	; 0x2e
   25458:	cmpne	r2, #9
   2545c:	bhi	2546c <flatcc_json_parser_skip_constant@@Base+0x4c>
   25460:	add	r0, r4, #1
   25464:	mov	r4, r0
   25468:	b	25430 <flatcc_json_parser_skip_constant@@Base+0x10>
   2546c:	orr	r3, r3, #32
   25470:	sub	r3, r3, #97	; 0x61
   25474:	cmp	r3, #25
   25478:	bls	25460 <flatcc_json_parser_skip_constant@@Base+0x40>
   2547c:	mov	r2, r5
   25480:	mov	r1, r4
   25484:	mov	r0, r6
   25488:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   2548c:	cmp	r4, r0
   25490:	bne	25464 <flatcc_json_parser_skip_constant@@Base+0x44>
   25494:	mov	r0, r4
   25498:	pop	{r4, r5, r6, pc}

0002549c <flatcc_json_parser_match_constant@@Base>:
   2549c:	mov	ip, r1
   254a0:	sub	r1, r2, r1
   254a4:	push	{r4, lr}
   254a8:	cmp	r3, r1
   254ac:	ldr	r4, [sp, #8]
   254b0:	blt	254c4 <flatcc_json_parser_match_constant@@Base+0x28>
   254b4:	mov	r3, #0
   254b8:	str	r3, [r4]
   254bc:	mov	r0, ip
   254c0:	pop	{r4, pc}
   254c4:	add	r1, ip, r3
   254c8:	ldrb	r3, [ip, r3]
   254cc:	cmp	r3, #32
   254d0:	bne	25504 <flatcc_json_parser_match_constant@@Base+0x68>
   254d4:	add	r3, r1, #1
   254d8:	cmp	r2, r3
   254dc:	mov	r1, r3
   254e0:	beq	25540 <flatcc_json_parser_match_constant@@Base+0xa4>
   254e4:	ldrb	lr, [r3], #1
   254e8:	cmp	lr, #32
   254ec:	beq	254d8 <flatcc_json_parser_match_constant@@Base+0x3c>
   254f0:	cmp	lr, #34	; 0x22
   254f4:	movne	r3, #1
   254f8:	strne	r3, [r4]
   254fc:	movne	ip, r1
   25500:	bne	254bc <flatcc_json_parser_match_constant@@Base+0x20>
   25504:	ldrb	r3, [r1]
   25508:	cmp	r3, #34	; 0x22
   2550c:	beq	2552c <flatcc_json_parser_match_constant@@Base+0x90>
   25510:	cmp	r3, #92	; 0x5c
   25514:	mov	r3, #0
   25518:	str	r3, [r4]
   2551c:	bne	254bc <flatcc_json_parser_match_constant@@Base+0x20>
   25520:	mov	r3, #18
   25524:	pop	{r4, lr}
   25528:	b	24b40 <flatcc_json_parser_set_error@@Base>
   2552c:	mov	r2, #0
   25530:	add	r1, r1, #1
   25534:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25538:	mov	ip, r0
   2553c:	b	254b4 <flatcc_json_parser_match_constant@@Base+0x18>
   25540:	mov	r3, #0
   25544:	str	r3, [r4]
   25548:	mov	ip, r2
   2554c:	b	254bc <flatcc_json_parser_match_constant@@Base+0x20>

00025550 <flatcc_json_parser_double@@Base>:
   25550:	push	{r4, r5, r6, r7, r8, lr}
   25554:	mov	r4, #0
   25558:	mov	r5, #0
   2555c:	cmp	r1, r2
   25560:	strd	r4, [r3]
   25564:	beq	2560c <flatcc_json_parser_double@@Base+0xbc>
   25568:	ldrb	ip, [r1]
   2556c:	cmp	ip, #45	; 0x2d
   25570:	addeq	ip, r1, #1
   25574:	movne	ip, r1
   25578:	sub	lr, r2, ip
   2557c:	cmp	lr, #1
   25580:	ble	255b0 <flatcc_json_parser_double@@Base+0x60>
   25584:	ldrb	lr, [ip]
   25588:	cmp	lr, #46	; 0x2e
   2558c:	beq	255a4 <flatcc_json_parser_double@@Base+0x54>
   25590:	cmp	lr, #48	; 0x30
   25594:	bne	255b0 <flatcc_json_parser_double@@Base+0x60>
   25598:	ldrb	ip, [ip, #1]
   2559c:	cmp	ip, #48	; 0x30
   255a0:	bne	255b0 <flatcc_json_parser_double@@Base+0x60>
   255a4:	mov	r3, #6
   255a8:	pop	{r4, r5, r6, r7, r8, lr}
   255ac:	b	24b40 <flatcc_json_parser_set_error@@Base>
   255b0:	mov	r6, r1
   255b4:	mov	r4, r2
   255b8:	sub	r1, r4, r1
   255bc:	mov	r5, r0
   255c0:	mov	r2, r3
   255c4:	mov	r0, r6
   255c8:	mov	r7, r3
   255cc:	bl	24344 <grisu3_diy_fp_encode_double@@Base+0x4e4>
   255d0:	cmp	r6, r0
   255d4:	cmpne	r0, #0
   255d8:	mov	r1, r0
   255dc:	bne	2560c <flatcc_json_parser_double@@Base+0xbc>
   255e0:	vldr	d7, [r7]
   255e4:	vldr	d6, [pc, #44]	; 25618 <flatcc_json_parser_double@@Base+0xc8>
   255e8:	mov	r2, r4
   255ec:	mov	r1, r6
   255f0:	vabs.f64	d7, d7
   255f4:	mov	r0, r5
   255f8:	vcmp.f64	d7, d6
   255fc:	vmrs	APSR_nzcv, fpscr
   25600:	movgt	r3, #7
   25604:	movle	r3, #6
   25608:	b	255a8 <flatcc_json_parser_double@@Base+0x58>
   2560c:	mov	r0, r1
   25610:	pop	{r4, r5, r6, r7, r8, pc}
   25614:	nop			; (mov r0, r0)
   25618:			; <UNDEFINED> instruction: 0xffffffff
   2561c:	svcvc	0x00efffff

00025620 <flatcc_json_parser_float@@Base>:
   25620:	mov	ip, #0
   25624:	cmp	r1, r2
   25628:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2562c:	moveq	r0, r1
   25630:	str	ip, [r3]
   25634:	beq	25698 <flatcc_json_parser_float@@Base+0x78>
   25638:	ldrb	ip, [r1]
   2563c:	mov	r7, r3
   25640:	mov	r4, r2
   25644:	cmp	ip, #45	; 0x2d
   25648:	addeq	ip, r1, #1
   2564c:	movne	ip, r1
   25650:	sub	r3, r2, ip
   25654:	cmp	r3, #1
   25658:	mov	r5, r1
   2565c:	mov	r6, r0
   25660:	ble	256a0 <flatcc_json_parser_float@@Base+0x80>
   25664:	ldrb	r2, [ip]
   25668:	cmp	r2, #46	; 0x2e
   2566c:	beq	25684 <flatcc_json_parser_float@@Base+0x64>
   25670:	cmp	r2, #48	; 0x30
   25674:	bne	256a0 <flatcc_json_parser_float@@Base+0x80>
   25678:	ldrb	r3, [ip, #1]
   2567c:	cmp	r3, #48	; 0x30
   25680:	bne	256a0 <flatcc_json_parser_float@@Base+0x80>
   25684:	mov	r3, #6
   25688:	mov	r2, r4
   2568c:	mov	r1, r5
   25690:	mov	r0, r6
   25694:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   25698:	add	sp, sp, #12
   2569c:	pop	{r4, r5, r6, r7, pc}
   256a0:	mov	r2, sp
   256a4:	sub	r1, r4, r5
   256a8:	mov	r0, r5
   256ac:	bl	24344 <grisu3_diy_fp_encode_double@@Base+0x4e4>
   256b0:	vldr	d6, [sp]
   256b4:	vldr	s15, [pc, #92]	; 25718 <flatcc_json_parser_float@@Base+0xf8>
   256b8:	vcvt.f32.f64	s14, d6
   256bc:	vabs.f32	s11, s14
   256c0:	vcmp.f32	s11, s15
   256c4:	vmrs	APSR_nzcv, fpscr
   256c8:	bgt	256f8 <flatcc_json_parser_float@@Base+0xd8>
   256cc:	vstr	s14, [r7]
   256d0:	cmp	r5, r0
   256d4:	cmpne	r0, #0
   256d8:	bne	25698 <flatcc_json_parser_float@@Base+0x78>
   256dc:	vldr	s14, [r7]
   256e0:	vabs.f32	s14, s14
   256e4:	vcmp.f32	s14, s15
   256e8:	vmrs	APSR_nzcv, fpscr
   256ec:	ble	25684 <flatcc_json_parser_float@@Base+0x64>
   256f0:	mov	r3, #7
   256f4:	b	25688 <flatcc_json_parser_float@@Base+0x68>
   256f8:	vcmpe.f64	d6, #0.0
   256fc:	vldr	s14, [pc, #24]	; 2571c <flatcc_json_parser_float@@Base+0xfc>
   25700:	vldr	s13, [pc, #24]	; 25720 <flatcc_json_parser_float@@Base+0x100>
   25704:	mov	r0, r5
   25708:	vmrs	APSR_nzcv, fpscr
   2570c:	vmovpl.f32	s14, s13
   25710:	vstr	s14, [r7]
   25714:	b	256d0 <flatcc_json_parser_float@@Base+0xb0>
   25718:	svcvc	0x007fffff
   2571c:			; <UNDEFINED> instruction: 0xff800000
   25720:	svcvc	0x00800000

00025724 <flatcc_json_parser_integer@@Base>:
   25724:	push	{r4, r5, r6, r7, r8, r9, lr}
   25728:	cmp	r1, r2
   2572c:	ldr	r9, [sp, #28]
   25730:	beq	257dc <flatcc_json_parser_integer@@Base+0xb8>
   25734:	mov	ip, r1
   25738:	ldrb	r1, [r1]
   2573c:	mov	r6, #0
   25740:	mov	r7, #0
   25744:	sub	r1, r1, #45	; 0x2d
   25748:	clz	r1, r1
   2574c:	lsr	r1, r1, #5
   25750:	str	r1, [r3]
   25754:	mov	r8, #10
   25758:	add	r3, ip, r1
   2575c:	cmp	r3, r2
   25760:	mov	r1, r3
   25764:	beq	257d4 <flatcc_json_parser_integer@@Base+0xb0>
   25768:	ldrb	lr, [r3], #1
   2576c:	sub	r4, lr, #48	; 0x30
   25770:	cmp	r4, #9
   25774:	bls	25798 <flatcc_json_parser_integer@@Base+0x74>
   25778:	cmp	r1, ip
   2577c:	beq	257e4 <flatcc_json_parser_integer@@Base+0xc0>
   25780:	and	r3, lr, #223	; 0xdf
   25784:	cmp	lr, #46	; 0x2e
   25788:	cmpne	r3, #69	; 0x45
   2578c:	bne	257d4 <flatcc_json_parser_integer@@Base+0xb0>
   25790:	mov	r3, #12
   25794:	b	257c0 <flatcc_json_parser_integer@@Base+0x9c>
   25798:	umull	r4, r5, r6, r8
   2579c:	mla	r5, r8, r7, r5
   257a0:	subs	r4, r4, #48	; 0x30
   257a4:	sbc	r5, r5, #0
   257a8:	adds	r4, r4, lr
   257ac:	adc	r5, r5, #0
   257b0:	cmp	r7, r5
   257b4:	cmpeq	r6, r4
   257b8:	bls	257c8 <flatcc_json_parser_integer@@Base+0xa4>
   257bc:	mov	r3, #8
   257c0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   257c4:	b	24b40 <flatcc_json_parser_set_error@@Base>
   257c8:	mov	r6, r4
   257cc:	mov	r7, r5
   257d0:	b	2575c <flatcc_json_parser_integer@@Base+0x38>
   257d4:	mov	r2, r1
   257d8:	strd	r6, [r9]
   257dc:	mov	r0, r2
   257e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   257e4:	mov	r2, ip
   257e8:	b	257dc <flatcc_json_parser_integer@@Base+0xb8>
   257ec:	push	{r4, r5, r6, r7, lr}
   257f0:	mov	r6, #0
   257f4:	sub	sp, sp, #28
   257f8:	mov	r7, #0
   257fc:	mov	lr, #0
   25800:	cmp	r1, r2
   25804:	strd	r6, [sp, #16]
   25808:	str	lr, [sp, #12]
   2580c:	strb	lr, [r3]
   25810:	moveq	r0, r1
   25814:	beq	25878 <flatcc_json_parser_integer@@Base+0x154>
   25818:	mov	r6, r3
   2581c:	add	r3, sp, #16
   25820:	str	r3, [sp]
   25824:	add	r3, sp, #12
   25828:	mov	r7, r1
   2582c:	mov	r5, r0
   25830:	mov	r4, r2
   25834:	bl	25724 <flatcc_json_parser_integer@@Base>
   25838:	cmp	r7, r0
   2583c:	beq	25878 <flatcc_json_parser_integer@@Base+0x154>
   25840:	ldr	r3, [sp, #12]
   25844:	cmp	r3, #0
   25848:	movne	r3, #8
   2584c:	bne	25868 <flatcc_json_parser_integer@@Base+0x144>
   25850:	ldrd	r2, [sp, #16]
   25854:	cmp	r3, #0
   25858:	cmpeq	r2, #255	; 0xff
   2585c:	strbls	r2, [r6]
   25860:	bls	25878 <flatcc_json_parser_integer@@Base+0x154>
   25864:	mov	r3, #7
   25868:	mov	r1, r0
   2586c:	mov	r2, r4
   25870:	mov	r0, r5
   25874:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   25878:	add	sp, sp, #28
   2587c:	pop	{r4, r5, r6, r7, pc}

00025880 <flatcc_json_parser_generic_json@@Base>:
   25880:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25884:	sub	sp, sp, #528	; 0x210
   25888:	add	r7, sp, #16
   2588c:	mov	r6, r0
   25890:	mov	r5, r1
   25894:	mov	r4, r2
   25898:	mov	r9, r7
   2589c:	mov	sl, #1
   258a0:	mov	r3, #0
   258a4:	str	r3, [sp, #12]
   258a8:	cmp	r5, r4
   258ac:	bne	258c8 <flatcc_json_parser_generic_json@@Base+0x48>
   258b0:	mov	r0, r4
   258b4:	add	sp, sp, #528	; 0x210
   258b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   258bc:	mov	r7, r8
   258c0:	mov	r5, r0
   258c4:	b	258a8 <flatcc_json_parser_generic_json@@Base+0x28>
   258c8:	cmp	r7, r9
   258cc:	beq	25970 <flatcc_json_parser_generic_json@@Base+0xf0>
   258d0:	ldrb	r3, [r7, #-1]
   258d4:	cmp	r3, #125	; 0x7d
   258d8:	bne	25970 <flatcc_json_parser_generic_json@@Base+0xf0>
   258dc:	ldrb	r3, [r5]
   258e0:	cmp	r3, #34	; 0x22
   258e4:	addeq	r1, r5, #1
   258e8:	beq	25904 <flatcc_json_parser_generic_json@@Base+0x84>
   258ec:	mov	r1, r5
   258f0:	mov	r3, #5
   258f4:	mov	r2, r4
   258f8:	mov	r0, r6
   258fc:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   25900:	mov	r1, r0
   25904:	mov	r2, r4
   25908:	mov	r0, r6
   2590c:	bl	24b68 <flatcc_json_parser_set_error@@Base+0x28>
   25910:	mov	r2, r4
   25914:	mov	r1, r0
   25918:	mov	r0, r6
   2591c:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25920:	cmp	r4, r0
   25924:	mov	r1, r0
   25928:	bne	2593c <flatcc_json_parser_generic_json@@Base+0xbc>
   2592c:	mov	r3, #10
   25930:	mov	r2, r4
   25934:	mov	r1, r2
   25938:	b	25950 <flatcc_json_parser_generic_json@@Base+0xd0>
   2593c:	ldrb	r3, [r0]
   25940:	cmp	r3, #58	; 0x3a
   25944:	beq	2595c <flatcc_json_parser_generic_json@@Base+0xdc>
   25948:	mov	r3, #4
   2594c:	mov	r2, r4
   25950:	mov	r0, r6
   25954:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   25958:	b	258b4 <flatcc_json_parser_generic_json@@Base+0x34>
   2595c:	add	r1, r0, #1
   25960:	mov	r2, r4
   25964:	mov	r0, r6
   25968:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   2596c:	mov	r5, r0
   25970:	ldrb	r3, [r5]
   25974:	cmp	r3, #91	; 0x5b
   25978:	beq	25cd8 <flatcc_json_parser_generic_json@@Base+0x458>
   2597c:	bhi	259d8 <flatcc_json_parser_generic_json@@Base+0x158>
   25980:	cmp	r3, #45	; 0x2d
   25984:	beq	259a8 <flatcc_json_parser_generic_json@@Base+0x128>
   25988:	bhi	2599c <flatcc_json_parser_generic_json@@Base+0x11c>
   2598c:	cmp	r3, #34	; 0x22
   25990:	beq	25ab0 <flatcc_json_parser_generic_json@@Base+0x230>
   25994:	mov	r3, #5
   25998:	b	25ce8 <flatcc_json_parser_generic_json@@Base+0x468>
   2599c:	sub	r2, r3, #48	; 0x30
   259a0:	cmp	r2, #9
   259a4:	bhi	25994 <flatcc_json_parser_generic_json@@Base+0x114>
   259a8:	cmp	r5, r4
   259ac:	moveq	r0, r4
   259b0:	beq	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   259b4:	cmp	r3, #45	; 0x2d
   259b8:	bne	25b28 <flatcc_json_parser_generic_json@@Base+0x2a8>
   259bc:	add	r5, r5, #1
   259c0:	cmp	r4, r5
   259c4:	bne	25b28 <flatcc_json_parser_generic_json@@Base+0x2a8>
   259c8:	mov	r3, #6
   259cc:	mov	r2, r4
   259d0:	mov	r1, r4
   259d4:	b	25b6c <flatcc_json_parser_generic_json@@Base+0x2ec>
   259d8:	cmp	r3, #110	; 0x6e
   259dc:	beq	25cac <flatcc_json_parser_generic_json@@Base+0x42c>
   259e0:	bhi	25a64 <flatcc_json_parser_generic_json@@Base+0x1e4>
   259e4:	cmp	r3, #102	; 0x66
   259e8:	bne	25994 <flatcc_json_parser_generic_json@@Base+0x114>
   259ec:	sub	r8, r4, r5
   259f0:	cmp	r8, #3
   259f4:	ble	25a38 <flatcc_json_parser_generic_json@@Base+0x1b8>
   259f8:	mov	r2, #4
   259fc:	ldr	r1, [pc, #1076]	; 25e38 <flatcc_json_parser_generic_json@@Base+0x5b8>
   25a00:	mov	r0, r5
   25a04:	bl	1457c <memcmp@plt>
   25a08:	cmp	r0, #0
   25a0c:	addeq	r0, r5, #4
   25a10:	beq	25a4c <flatcc_json_parser_generic_json@@Base+0x1cc>
   25a14:	cmp	r8, #4
   25a18:	beq	25a38 <flatcc_json_parser_generic_json@@Base+0x1b8>
   25a1c:	mov	r2, #5
   25a20:	ldr	r1, [pc, #1044]	; 25e3c <flatcc_json_parser_generic_json@@Base+0x5bc>
   25a24:	mov	r0, r5
   25a28:	bl	1457c <memcmp@plt>
   25a2c:	cmp	r0, #0
   25a30:	addeq	r0, r5, #5
   25a34:	beq	25a4c <flatcc_json_parser_generic_json@@Base+0x1cc>
   25a38:	add	r3, sp, #7
   25a3c:	mov	r2, r4
   25a40:	mov	r1, r5
   25a44:	mov	r0, r6
   25a48:	bl	257ec <flatcc_json_parser_integer@@Base+0xc8>
   25a4c:	cmp	r5, r0
   25a50:	bne	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25a54:	mov	r3, #5
   25a58:	mov	r2, r4
   25a5c:	mov	r1, r0
   25a60:	b	25950 <flatcc_json_parser_generic_json@@Base+0xd0>
   25a64:	cmp	r3, #116	; 0x74
   25a68:	beq	259ec <flatcc_json_parser_generic_json@@Base+0x16c>
   25a6c:	cmp	r3, #123	; 0x7b
   25a70:	bne	25994 <flatcc_json_parser_generic_json@@Base+0x114>
   25a74:	add	r3, sp, #528	; 0x210
   25a78:	cmp	r7, r3
   25a7c:	beq	25ce4 <flatcc_json_parser_generic_json@@Base+0x464>
   25a80:	mov	r3, #125	; 0x7d
   25a84:	strb	r3, [r7]
   25a88:	mov	r2, r4
   25a8c:	add	r1, r5, #1
   25a90:	mov	r0, r6
   25a94:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25a98:	add	r8, r7, #1
   25a9c:	cmp	r4, r0
   25aa0:	beq	258bc <flatcc_json_parser_generic_json@@Base+0x3c>
   25aa4:	ldrb	r3, [r0]
   25aa8:	cmp	r3, #125	; 0x7d
   25aac:	b	25d20 <flatcc_json_parser_generic_json@@Base+0x4a0>
   25ab0:	mov	r2, r4
   25ab4:	mov	r1, r5
   25ab8:	mov	r0, r6
   25abc:	bl	24bac <flatcc_json_parser_set_error@@Base+0x6c>
   25ac0:	cmp	r0, r4
   25ac4:	mov	r1, r0
   25ac8:	beq	25ad8 <flatcc_json_parser_generic_json@@Base+0x258>
   25acc:	ldrb	r3, [r0]
   25ad0:	cmp	r3, #34	; 0x22
   25ad4:	bne	25af0 <flatcc_json_parser_generic_json@@Base+0x270>
   25ad8:	mov	r2, r4
   25adc:	mov	r0, r6
   25ae0:	bl	24bd0 <flatcc_json_parser_set_error@@Base+0x90>
   25ae4:	mov	r8, r7
   25ae8:	mov	r5, #0
   25aec:	b	25d60 <flatcc_json_parser_generic_json@@Base+0x4e0>
   25af0:	mov	r2, r4
   25af4:	mov	r0, r6
   25af8:	bl	24bf4 <flatcc_json_parser_string_part@@Base>
   25afc:	cmp	r4, r0
   25b00:	mov	r1, r0
   25b04:	beq	25b14 <flatcc_json_parser_generic_json@@Base+0x294>
   25b08:	ldrb	r3, [r0]
   25b0c:	cmp	r3, #34	; 0x22
   25b10:	beq	25ad8 <flatcc_json_parser_generic_json@@Base+0x258>
   25b14:	add	r3, sp, #8
   25b18:	mov	r2, r4
   25b1c:	mov	r0, r6
   25b20:	bl	2513c <flatcc_json_parser_string_escape@@Base>
   25b24:	b	25ac0 <flatcc_json_parser_generic_json@@Base+0x240>
   25b28:	ldrb	r3, [r5]
   25b2c:	cmp	r3, #48	; 0x30
   25b30:	bne	25b50 <flatcc_json_parser_generic_json@@Base+0x2d0>
   25b34:	add	r0, r5, #1
   25b38:	cmp	r4, r0
   25b3c:	bne	25b98 <flatcc_json_parser_generic_json@@Base+0x318>
   25b40:	mov	r3, #6
   25b44:	mov	r2, r4
   25b48:	mov	r1, r0
   25b4c:	b	25b6c <flatcc_json_parser_generic_json@@Base+0x2ec>
   25b50:	sub	r3, r3, #49	; 0x31
   25b54:	cmp	r3, #8
   25b58:	addls	r5, r5, #1
   25b5c:	bls	25b78 <flatcc_json_parser_generic_json@@Base+0x2f8>
   25b60:	mov	r3, #6
   25b64:	mov	r2, r4
   25b68:	mov	r1, r5
   25b6c:	mov	r0, r6
   25b70:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   25b74:	b	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25b78:	cmp	r5, r4
   25b7c:	mov	r0, r5
   25b80:	beq	25b40 <flatcc_json_parser_generic_json@@Base+0x2c0>
   25b84:	ldrb	r3, [r0]
   25b88:	add	r5, r5, #1
   25b8c:	sub	r3, r3, #48	; 0x30
   25b90:	cmp	r3, #9
   25b94:	bls	25b78 <flatcc_json_parser_generic_json@@Base+0x2f8>
   25b98:	ldrb	r3, [r0]
   25b9c:	cmp	r3, #46	; 0x2e
   25ba0:	bne	25be4 <flatcc_json_parser_generic_json@@Base+0x364>
   25ba4:	ldrb	r3, [r0, #1]
   25ba8:	sub	r3, r3, #48	; 0x30
   25bac:	cmp	r3, #9
   25bb0:	movhi	r3, #6
   25bb4:	movhi	r2, r4
   25bb8:	addhi	r1, r0, #1
   25bbc:	bhi	25b6c <flatcc_json_parser_generic_json@@Base+0x2ec>
   25bc0:	add	r3, r0, #2
   25bc4:	cmp	r4, r3
   25bc8:	mov	r0, r3
   25bcc:	beq	25b40 <flatcc_json_parser_generic_json@@Base+0x2c0>
   25bd0:	ldrb	r2, [r0]
   25bd4:	add	r3, r3, #1
   25bd8:	sub	r2, r2, #48	; 0x30
   25bdc:	cmp	r2, #9
   25be0:	bls	25bc4 <flatcc_json_parser_generic_json@@Base+0x344>
   25be4:	ldrb	r3, [r0]
   25be8:	and	r3, r3, #223	; 0xdf
   25bec:	cmp	r3, #69	; 0x45
   25bf0:	bne	25c5c <flatcc_json_parser_generic_json@@Base+0x3dc>
   25bf4:	add	r1, r0, #1
   25bf8:	cmp	r4, r1
   25bfc:	beq	259c8 <flatcc_json_parser_generic_json@@Base+0x148>
   25c00:	ldrb	r3, [r0, #1]
   25c04:	sub	r3, r3, #43	; 0x2b
   25c08:	tst	r3, #253	; 0xfd
   25c0c:	bne	25c1c <flatcc_json_parser_generic_json@@Base+0x39c>
   25c10:	add	r1, r0, #2
   25c14:	cmp	r4, r1
   25c18:	beq	25c30 <flatcc_json_parser_generic_json@@Base+0x3b0>
   25c1c:	ldrb	r3, [r1]
   25c20:	sub	r3, r3, #48	; 0x30
   25c24:	cmp	r3, #9
   25c28:	addls	r1, r1, #1
   25c2c:	bls	25c3c <flatcc_json_parser_generic_json@@Base+0x3bc>
   25c30:	mov	r3, #6
   25c34:	mov	r2, r4
   25c38:	b	25b6c <flatcc_json_parser_generic_json@@Base+0x2ec>
   25c3c:	cmp	r1, r4
   25c40:	mov	r0, r1
   25c44:	beq	25b40 <flatcc_json_parser_generic_json@@Base+0x2c0>
   25c48:	ldrb	r3, [r0]
   25c4c:	add	r1, r1, #1
   25c50:	sub	r3, r3, #48	; 0x30
   25c54:	cmp	r3, #9
   25c58:	bls	25c3c <flatcc_json_parser_generic_json@@Base+0x3bc>
   25c5c:	ldrb	r3, [r0]
   25c60:	cmp	r3, #32
   25c64:	beq	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25c68:	bhi	25c88 <flatcc_json_parser_generic_json@@Base+0x408>
   25c6c:	cmp	r3, #9
   25c70:	bcc	25b40 <flatcc_json_parser_generic_json@@Base+0x2c0>
   25c74:	cmp	r3, #11
   25c78:	bls	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25c7c:	cmp	r3, #13
   25c80:	bne	25b40 <flatcc_json_parser_generic_json@@Base+0x2c0>
   25c84:	b	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25c88:	cmp	r3, #58	; 0x3a
   25c8c:	beq	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25c90:	bhi	25c9c <flatcc_json_parser_generic_json@@Base+0x41c>
   25c94:	cmp	r3, #44	; 0x2c
   25c98:	b	25c80 <flatcc_json_parser_generic_json@@Base+0x400>
   25c9c:	cmp	r3, #93	; 0x5d
   25ca0:	beq	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25ca4:	cmp	r3, #125	; 0x7d
   25ca8:	b	25c80 <flatcc_json_parser_generic_json@@Base+0x400>
   25cac:	sub	r3, r4, r5
   25cb0:	cmp	r3, #3
   25cb4:	ble	25994 <flatcc_json_parser_generic_json@@Base+0x114>
   25cb8:	mov	r2, #4
   25cbc:	ldr	r1, [pc, #380]	; 25e40 <flatcc_json_parser_generic_json@@Base+0x5c0>
   25cc0:	mov	r0, r5
   25cc4:	bl	1457c <memcmp@plt>
   25cc8:	cmp	r0, #0
   25ccc:	bne	25994 <flatcc_json_parser_generic_json@@Base+0x114>
   25cd0:	add	r0, r5, #4
   25cd4:	b	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25cd8:	add	r3, sp, #528	; 0x210
   25cdc:	cmp	r7, r3
   25ce0:	bne	25cf4 <flatcc_json_parser_generic_json@@Base+0x474>
   25ce4:	mov	r3, #2
   25ce8:	mov	r2, r4
   25cec:	mov	r1, r5
   25cf0:	b	25950 <flatcc_json_parser_generic_json@@Base+0xd0>
   25cf4:	mov	r3, #93	; 0x5d
   25cf8:	strb	r3, [r7]
   25cfc:	mov	r2, r4
   25d00:	add	r1, r5, #1
   25d04:	mov	r0, r6
   25d08:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25d0c:	add	r8, r7, #1
   25d10:	cmp	r4, r0
   25d14:	beq	258bc <flatcc_json_parser_generic_json@@Base+0x3c>
   25d18:	ldrb	r3, [r0]
   25d1c:	cmp	r3, #93	; 0x5d
   25d20:	bne	258bc <flatcc_json_parser_generic_json@@Base+0x3c>
   25d24:	mov	r7, r8
   25d28:	b	25ae4 <flatcc_json_parser_generic_json@@Base+0x264>
   25d2c:	ldrb	r3, [r8, #-1]
   25d30:	sub	r7, r8, #1
   25d34:	cmp	r3, #93	; 0x5d
   25d38:	bne	25d74 <flatcc_json_parser_generic_json@@Base+0x4f4>
   25d3c:	mov	r1, r0
   25d40:	add	r3, sp, #12
   25d44:	mov	r2, r4
   25d48:	mov	r0, r6
   25d4c:	bl	24d74 <flatcc_json_parser_space_ext@@Base+0x104>
   25d50:	ldr	r3, [sp, #12]
   25d54:	cmp	r3, #0
   25d58:	bne	258bc <flatcc_json_parser_generic_json@@Base+0x3c>
   25d5c:	mov	r8, r7
   25d60:	cmp	r0, r4
   25d64:	beq	25e18 <flatcc_json_parser_generic_json@@Base+0x598>
   25d68:	cmp	r8, r9
   25d6c:	bne	25d2c <flatcc_json_parser_generic_json@@Base+0x4ac>
   25d70:	b	258b4 <flatcc_json_parser_generic_json@@Base+0x34>
   25d74:	mov	r1, r0
   25d78:	mov	r2, r4
   25d7c:	mov	r0, r6
   25d80:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25d84:	cmp	r4, r0
   25d88:	streq	r5, [sp, #12]
   25d8c:	beq	25d50 <flatcc_json_parser_generic_json@@Base+0x4d0>
   25d90:	ldrb	r3, [r0]
   25d94:	cmp	r3, #44	; 0x2c
   25d98:	beq	25dcc <flatcc_json_parser_generic_json@@Base+0x54c>
   25d9c:	str	r5, [sp, #12]
   25da0:	ldrb	r3, [r0]
   25da4:	cmp	r3, #125	; 0x7d
   25da8:	movne	r3, #10
   25dac:	movne	r2, r4
   25db0:	movne	r1, r0
   25db4:	bne	25df4 <flatcc_json_parser_generic_json@@Base+0x574>
   25db8:	add	r1, r0, #1
   25dbc:	mov	r2, r4
   25dc0:	mov	r0, r6
   25dc4:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25dc8:	b	25d50 <flatcc_json_parser_generic_json@@Base+0x4d0>
   25dcc:	add	r1, r0, #1
   25dd0:	mov	r2, r4
   25dd4:	mov	r0, r6
   25dd8:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25ddc:	cmp	r4, r0
   25de0:	bne	25e00 <flatcc_json_parser_generic_json@@Base+0x580>
   25de4:	mov	r3, #10
   25de8:	mov	r2, r4
   25dec:	mov	r1, r4
   25df0:	str	r5, [sp, #12]
   25df4:	mov	r0, r6
   25df8:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   25dfc:	b	25d50 <flatcc_json_parser_generic_json@@Base+0x4d0>
   25e00:	ldrb	r3, [r0]
   25e04:	cmp	r3, #125	; 0x7d
   25e08:	strne	sl, [sp, #12]
   25e0c:	bne	25d50 <flatcc_json_parser_generic_json@@Base+0x4d0>
   25e10:	str	r5, [sp, #12]
   25e14:	b	25db8 <flatcc_json_parser_generic_json@@Base+0x538>
   25e18:	cmp	r8, r9
   25e1c:	beq	258b0 <flatcc_json_parser_generic_json@@Base+0x30>
   25e20:	ldrb	r3, [r8, #-1]
   25e24:	mov	r2, r0
   25e28:	cmp	r3, #93	; 0x5d
   25e2c:	moveq	r3, #9
   25e30:	movne	r3, #10
   25e34:	b	25934 <flatcc_json_parser_generic_json@@Base+0xb4>
   25e38:	andeq	lr, r2, r6, ror #18
   25e3c:	andeq	lr, r2, fp, ror #18
   25e40:	andeq	r3, r3, lr, rrx

00025e44 <flatcc_json_parser_unmatched_symbol@@Base>:
   25e44:	ldr	r3, [r0, #8]
   25e48:	tst	r3, #1
   25e4c:	beq	25eb4 <flatcc_json_parser_unmatched_symbol@@Base+0x70>
   25e50:	push	{r4, r5, r6, lr}
   25e54:	mov	r4, r0
   25e58:	mov	r5, r2
   25e5c:	bl	24b68 <flatcc_json_parser_set_error@@Base+0x28>
   25e60:	mov	r1, r0
   25e64:	mov	r0, r4
   25e68:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25e6c:	cmp	r2, r0
   25e70:	mov	r1, r0
   25e74:	beq	25ea0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   25e78:	ldrb	r3, [r0]
   25e7c:	cmp	r3, #58	; 0x3a
   25e80:	bne	25ea0 <flatcc_json_parser_unmatched_symbol@@Base+0x5c>
   25e84:	add	r1, r0, #1
   25e88:	mov	r0, r4
   25e8c:	bl	24d3c <flatcc_json_parser_space_ext@@Base+0xcc>
   25e90:	mov	r1, r0
   25e94:	mov	r0, r4
   25e98:	pop	{r4, r5, r6, lr}
   25e9c:	b	25880 <flatcc_json_parser_generic_json@@Base>
   25ea0:	mov	r2, r5
   25ea4:	mov	r0, r4
   25ea8:	pop	{r4, r5, r6, lr}
   25eac:	mov	r3, #4
   25eb0:	b	24b40 <flatcc_json_parser_set_error@@Base>
   25eb4:	mov	r3, #13
   25eb8:	b	25eb0 <flatcc_json_parser_unmatched_symbol@@Base+0x6c>

00025ebc <flatcc_json_parser_build_uint8_vector_base64@@Base>:
   25ebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25ec0:	sub	sp, sp, #36	; 0x24
   25ec4:	mov	r7, r0
   25ec8:	str	r3, [sp, #8]
   25ecc:	ldr	r3, [sp, #72]	; 0x48
   25ed0:	mov	sl, r2
   25ed4:	adds	fp, r3, #0
   25ed8:	movne	fp, #1
   25edc:	str	r3, [sp, #20]
   25ee0:	bl	24bac <flatcc_json_parser_set_error@@Base+0x6c>
   25ee4:	mov	r1, r0
   25ee8:	mov	r9, r0
   25eec:	mov	r0, r7
   25ef0:	bl	24bf4 <flatcc_json_parser_string_part@@Base>
   25ef4:	cmp	r2, r0
   25ef8:	mov	r6, r0
   25efc:	beq	26080 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   25f00:	ldrb	r3, [r0]
   25f04:	cmp	r3, #34	; 0x22
   25f08:	bne	26080 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c4>
   25f0c:	sub	r8, r0, r9
   25f10:	and	r3, r8, #3
   25f14:	lsr	r5, r8, #2
   25f18:	cmp	r3, #2
   25f1c:	add	r5, r5, r5, lsl #1
   25f20:	addeq	r5, r5, #1
   25f24:	beq	25f30 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x74>
   25f28:	cmp	r3, #3
   25f2c:	addeq	r5, r5, #2
   25f30:	mov	r2, #1
   25f34:	mvn	r3, #0
   25f38:	mov	r1, r2
   25f3c:	ldr	r0, [r7]
   25f40:	bl	21400 <flatcc_builder_start_vector@@Base>
   25f44:	subs	r4, r0, #0
   25f48:	bne	261b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   25f4c:	mov	r1, r5
   25f50:	ldr	r0, [r7]
   25f54:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   25f58:	subs	r3, r0, #0
   25f5c:	str	r3, [sp, #12]
   25f60:	beq	261b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   25f64:	ldr	r3, [pc, #628]	; 261e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x324>
   25f68:	cmp	fp, #0
   25f6c:	add	r2, r3, #256	; 0x100
   25f70:	moveq	r3, r2
   25f74:	cmp	r5, #0
   25f78:	movne	fp, r5
   25f7c:	mvneq	fp, #0
   25f80:	mov	ip, r8
   25f84:	mov	r1, r0
   25f88:	str	r3, [sp, #16]
   25f8c:	str	r9, [sp, #4]
   25f90:	mov	r2, ip
   25f94:	mov	r3, #0
   25f98:	cmp	r3, r2
   25f9c:	bne	25fc8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x10c>
   25fa0:	mov	lr, #0
   25fa4:	cmp	r2, #2
   25fa8:	beq	260fc <flatcc_json_parser_build_uint8_vector_base64@@Base+0x240>
   25fac:	cmp	r2, #3
   25fb0:	beq	26124 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x268>
   25fb4:	cmp	r2, #0
   25fb8:	movne	r4, #4
   25fbc:	bne	26068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   25fc0:	sub	lr, r8, lr
   25fc4:	b	26074 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1b8>
   25fc8:	ldr	r0, [sp, #4]
   25fcc:	ldrb	lr, [r0, r3]
   25fd0:	ldr	r0, [sp, #16]
   25fd4:	ldrb	lr, [r0, lr]
   25fd8:	add	r0, sp, #32
   25fdc:	add	r0, r0, r3
   25fe0:	cmp	lr, #63	; 0x3f
   25fe4:	strb	lr, [r0, #-4]
   25fe8:	bls	26008 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x14c>
   25fec:	cmp	lr, #65	; 0x41
   25ff0:	bne	260a0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1e4>
   25ff4:	ldr	r0, [sp, #4]
   25ff8:	sub	r2, r2, #1
   25ffc:	sub	r3, r3, #1
   26000:	add	r0, r0, #1
   26004:	str	r0, [sp, #4]
   26008:	add	r3, r3, #1
   2600c:	cmp	r3, #3
   26010:	bls	25f98 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xdc>
   26014:	cmp	fp, #2
   26018:	bls	260ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   2601c:	ldrb	lr, [sp, #29]
   26020:	ldrb	r3, [sp, #28]
   26024:	subs	fp, fp, #3
   26028:	add	r1, r1, #3
   2602c:	lsr	ip, lr, #4
   26030:	orr	ip, ip, r3, lsl #2
   26034:	strb	ip, [r1, #-3]
   26038:	ldrb	ip, [sp, #30]
   2603c:	lsr	r3, ip, #2
   26040:	orr	r3, r3, lr, lsl #4
   26044:	strb	r3, [r1, #-2]
   26048:	ldrb	r3, [sp, #31]
   2604c:	orr	ip, r3, ip, lsl #6
   26050:	ldr	r3, [sp, #4]
   26054:	strb	ip, [r1, #-1]
   26058:	add	r3, r3, #4
   2605c:	str	r3, [sp, #4]
   26060:	sub	ip, r2, #4
   26064:	bne	25f90 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xd4>
   26068:	cmp	r4, #0
   2606c:	sub	lr, r8, ip
   26070:	bne	2607c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1c0>
   26074:	cmp	r8, lr
   26078:	beq	26164 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2a8>
   2607c:	add	r6, r9, lr
   26080:	ldr	r2, [sp, #8]
   26084:	mov	r3, #0
   26088:	str	r3, [r2]
   2608c:	ldr	r3, [sp, #20]
   26090:	cmp	r3, #0
   26094:	movne	r3, #32
   26098:	moveq	r3, #31
   2609c:	b	261c8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x30c>
   260a0:	cmp	lr, #66	; 0x42
   260a4:	addeq	lr, r3, #1
   260a8:	beq	260d4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x218>
   260ac:	mov	lr, r3
   260b0:	b	260e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   260b4:	ldr	r0, [sp, #4]
   260b8:	ldrb	r4, [r0, lr]
   260bc:	ldr	r0, [sp, #16]
   260c0:	ldrb	r4, [r0, r4]
   260c4:	sub	r4, r4, #65	; 0x41
   260c8:	cmp	r4, #1
   260cc:	bhi	260e0 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x224>
   260d0:	add	lr, lr, #1
   260d4:	cmp	lr, #7
   260d8:	cmpls	lr, r2
   260dc:	bcc	260b4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1f8>
   260e0:	sub	lr, r2, lr
   260e4:	mov	r2, r3
   260e8:	b	25fa4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0xe8>
   260ec:	mov	r4, #1
   260f0:	b	26068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   260f4:	mov	r4, #5
   260f8:	b	26068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   260fc:	ldrb	r3, [sp, #29]
   26100:	lsl	r4, r3, #4
   26104:	ands	r4, r4, #255	; 0xff
   26108:	bne	260f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   2610c:	ldrb	r2, [sp, #28]
   26110:	lsr	r3, r3, #4
   26114:	orr	r3, r3, r2, lsl #2
   26118:	strb	r3, [r1], #1
   2611c:	mov	ip, lr
   26120:	b	26068 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x1ac>
   26124:	ldrb	r3, [sp, #30]
   26128:	lsl	r4, r3, #6
   2612c:	ands	r4, r4, #255	; 0xff
   26130:	bne	260f4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x238>
   26134:	cmp	fp, #1
   26138:	beq	260ec <flatcc_json_parser_build_uint8_vector_base64@@Base+0x230>
   2613c:	ldrb	r0, [sp, #29]
   26140:	ldrb	ip, [sp, #28]
   26144:	lsr	r3, r3, #2
   26148:	add	r1, r1, #2
   2614c:	lsr	r2, r0, #4
   26150:	orr	r2, r2, ip, lsl #2
   26154:	orr	r0, r3, r0, lsl #4
   26158:	strb	r2, [r1, #-2]
   2615c:	strb	r0, [r1, #-1]
   26160:	b	2611c <flatcc_json_parser_build_uint8_vector_base64@@Base+0x260>
   26164:	ldr	r3, [sp, #12]
   26168:	sub	r1, r1, r3
   2616c:	cmp	r5, r1
   26170:	bhi	261a4 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2e8>
   26174:	ldr	r0, [r7]
   26178:	bl	21d78 <flatcc_builder_end_vector@@Base>
   2617c:	ldr	r3, [sp, #8]
   26180:	cmp	r0, #0
   26184:	str	r0, [r3]
   26188:	beq	261b8 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2fc>
   2618c:	mov	r2, sl
   26190:	mov	r1, r6
   26194:	mov	r0, r7
   26198:	add	sp, sp, #36	; 0x24
   2619c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261a0:	b	24bd0 <flatcc_json_parser_set_error@@Base+0x90>
   261a4:	sub	r1, r5, r1
   261a8:	ldr	r0, [r7]
   261ac:	bl	212a4 <flatcc_builder_truncate_vector@@Base>
   261b0:	cmp	r0, #0
   261b4:	beq	26174 <flatcc_json_parser_build_uint8_vector_base64@@Base+0x2b8>
   261b8:	ldr	r2, [sp, #8]
   261bc:	mov	r3, #0
   261c0:	str	r3, [r2]
   261c4:	mov	r3, #33	; 0x21
   261c8:	mov	r2, sl
   261cc:	mov	r1, r6
   261d0:	mov	r0, r7
   261d4:	add	sp, sp, #36	; 0x24
   261d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261dc:	b	24b40 <flatcc_json_parser_set_error@@Base>
   261e0:	ldrdeq	r2, [r3], -r0

000261e4 <flatcc_json_parser_build_string@@Base>:
   261e4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   261e8:	mov	r5, r0
   261ec:	mov	r6, r2
   261f0:	mov	r8, r3
   261f4:	bl	24bac <flatcc_json_parser_set_error@@Base+0x6c>
   261f8:	mov	r1, r0
   261fc:	mov	r7, r0
   26200:	mov	r0, r5
   26204:	bl	24bf4 <flatcc_json_parser_string_part@@Base>
   26208:	cmp	r2, r0
   2620c:	mov	r4, r0
   26210:	beq	26254 <flatcc_json_parser_build_string@@Base+0x70>
   26214:	ldrb	r3, [r0]
   26218:	cmp	r3, #34	; 0x22
   2621c:	bne	26254 <flatcc_json_parser_build_string@@Base+0x70>
   26220:	sub	r2, r0, r7
   26224:	mov	r1, r7
   26228:	ldr	r0, [r5]
   2622c:	bl	2234c <flatcc_builder_create_string@@Base>
   26230:	str	r0, [r8]
   26234:	mov	r1, r4
   26238:	mov	r2, r6
   2623c:	mov	r0, r5
   26240:	bl	24bd0 <flatcc_json_parser_set_error@@Base+0x90>
   26244:	mov	r4, r0
   26248:	mov	r0, r4
   2624c:	add	sp, sp, #12
   26250:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26254:	ldr	r0, [r5]
   26258:	bl	214a0 <flatcc_builder_start_string@@Base>
   2625c:	cmp	r0, #0
   26260:	bne	26280 <flatcc_json_parser_build_string@@Base+0x9c>
   26264:	sub	r2, r4, r7
   26268:	mov	r1, r7
   2626c:	ldr	r0, [r5]
   26270:	bl	211d0 <flatcc_builder_append_string@@Base>
   26274:	cmp	r0, #0
   26278:	addne	r9, sp, #5
   2627c:	bne	26308 <flatcc_json_parser_build_string@@Base+0x124>
   26280:	mov	r3, #0
   26284:	str	r3, [r8]
   26288:	b	26248 <flatcc_json_parser_build_string@@Base+0x64>
   2628c:	sub	r2, r0, r4
   26290:	mov	r1, r4
   26294:	ldr	r0, [r5]
   26298:	bl	211d0 <flatcc_builder_append_string@@Base>
   2629c:	cmp	r0, #0
   262a0:	bne	26304 <flatcc_json_parser_build_string@@Base+0x120>
   262a4:	mov	r4, r7
   262a8:	b	26280 <flatcc_json_parser_build_string@@Base+0x9c>
   262ac:	ldrb	r3, [r4]
   262b0:	cmp	r3, #34	; 0x22
   262b4:	beq	26310 <flatcc_json_parser_build_string@@Base+0x12c>
   262b8:	mov	r1, r4
   262bc:	add	r3, sp, #4
   262c0:	mov	r2, r6
   262c4:	mov	r0, r5
   262c8:	bl	2513c <flatcc_json_parser_string_escape@@Base>
   262cc:	ldrb	r2, [sp, #4]
   262d0:	mov	r1, r9
   262d4:	mov	r4, r0
   262d8:	ldr	r0, [r5]
   262dc:	bl	211d0 <flatcc_builder_append_string@@Base>
   262e0:	cmp	r0, #0
   262e4:	beq	26280 <flatcc_json_parser_build_string@@Base+0x9c>
   262e8:	mov	r2, r6
   262ec:	mov	r1, r4
   262f0:	mov	r0, r5
   262f4:	bl	24bf4 <flatcc_json_parser_string_part@@Base>
   262f8:	cmp	r6, r0
   262fc:	mov	r7, r0
   26300:	bne	2628c <flatcc_json_parser_build_string@@Base+0xa8>
   26304:	mov	r4, r7
   26308:	cmp	r4, r6
   2630c:	bne	262ac <flatcc_json_parser_build_string@@Base+0xc8>
   26310:	ldr	r0, [r5]
   26314:	bl	22444 <flatcc_builder_end_string@@Base>
   26318:	b	26230 <flatcc_json_parser_build_string@@Base+0x4c>

0002631c <flatcc_json_parser_prepare_unions@@Base>:
   2631c:	push	{r4, r5, r6, r7, r8, lr}
   26320:	mov	r5, r1
   26324:	mov	r1, #24
   26328:	mov	r4, r0
   2632c:	mul	r1, r1, r3
   26330:	ldr	r0, [r0]
   26334:	add	r1, r1, #8
   26338:	ldr	r8, [sp, #24]
   2633c:	mov	r7, r2
   26340:	mov	r6, r3
   26344:	bl	20878 <flatcc_builder_enter_user_frame@@Base>
   26348:	cmp	r0, #0
   2634c:	str	r0, [r8]
   26350:	bne	2636c <flatcc_json_parser_prepare_unions@@Base+0x50>
   26354:	mov	r2, r7
   26358:	mov	r1, r5
   2635c:	mov	r0, r4
   26360:	mov	r3, #33	; 0x21
   26364:	pop	{r4, r5, r6, r7, r8, lr}
   26368:	b	24b40 <flatcc_json_parser_set_error@@Base>
   2636c:	mov	r1, r0
   26370:	ldr	r0, [r4]
   26374:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   26378:	str	r6, [r0]
   2637c:	mov	r0, r5
   26380:	pop	{r4, r5, r6, r7, r8, pc}

00026384 <flatcc_json_parser_finalize_unions@@Base>:
   26384:	push	{r4, r5, r6, r7, r8, lr}
   26388:	mov	r5, r0
   2638c:	mov	r4, r1
   26390:	ldr	r0, [r0]
   26394:	mov	r1, r3
   26398:	mov	r6, r3
   2639c:	mov	r7, r2
   263a0:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   263a4:	ldr	r3, [r0, #4]
   263a8:	cmp	r3, #0
   263ac:	beq	263c8 <flatcc_json_parser_finalize_unions@@Base+0x44>
   263b0:	mov	r1, r4
   263b4:	mov	r3, #27
   263b8:	mov	r2, r7
   263bc:	mov	r0, r5
   263c0:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   263c4:	mov	r4, r0
   263c8:	mov	r1, r6
   263cc:	ldr	r0, [r5]
   263d0:	bl	20934 <flatcc_builder_exit_user_frame_at@@Base>
   263d4:	mov	r0, r4
   263d8:	pop	{r4, r5, r6, r7, r8, pc}

000263dc <flatcc_json_parser_union@@Base>:
   263dc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   263e0:	mov	r4, r0
   263e4:	mov	r7, r1
   263e8:	ldr	r0, [r0]
   263ec:	ldr	r1, [sp, #44]	; 0x2c
   263f0:	mov	r5, r3
   263f4:	mov	r6, r2
   263f8:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   263fc:	mov	r3, #24
   26400:	mla	r3, r3, r5, r0
   26404:	ldr	r2, [r3, #8]
   26408:	cmp	r2, #0
   2640c:	movne	r3, #28
   26410:	bne	26474 <flatcc_json_parser_union@@Base+0x98>
   26414:	ldrb	r2, [r3, #20]
   26418:	cmp	r2, #0
   2641c:	bne	26460 <flatcc_json_parser_union@@Base+0x84>
   26420:	ldr	r2, [r0, #4]
   26424:	mov	r1, r7
   26428:	add	r2, r2, #1
   2642c:	str	r2, [r0, #4]
   26430:	ldr	r2, [r4, #12]
   26434:	mov	r0, r4
   26438:	str	r2, [r3, #16]
   2643c:	ldr	r2, [r4, #4]
   26440:	str	r7, [r3, #8]
   26444:	str	r2, [r3, #12]
   26448:	mov	r2, r6
   2644c:	bl	25880 <flatcc_json_parser_generic_json@@Base>
   26450:	mov	r5, r0
   26454:	mov	r0, r5
   26458:	add	sp, sp, #16
   2645c:	pop	{r4, r5, r6, r7, r8, pc}
   26460:	ldrb	r3, [r3, #21]
   26464:	cmp	r3, #0
   26468:	strb	r3, [sp, #8]
   2646c:	bne	26488 <flatcc_json_parser_union@@Base+0xac>
   26470:	mov	r3, #25
   26474:	mov	r2, r6
   26478:	mov	r1, r7
   2647c:	mov	r0, r4
   26480:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   26484:	b	26450 <flatcc_json_parser_union@@Base+0x74>
   26488:	ldr	r2, [r0, #4]
   2648c:	ldr	r5, [sp, #48]	; 0x30
   26490:	sub	r2, r2, #1
   26494:	str	r2, [r0, #4]
   26498:	add	r2, sp, #12
   2649c:	str	r2, [sp]
   264a0:	mov	r1, r7
   264a4:	mov	r2, r6
   264a8:	mov	r0, r4
   264ac:	blx	r5
   264b0:	add	r8, sp, #8
   264b4:	cmp	r6, r0
   264b8:	mov	r5, r0
   264bc:	beq	26454 <flatcc_json_parser_union@@Base+0x78>
   264c0:	ldm	r8, {r2, r3}
   264c4:	ldrh	r1, [sp, #40]	; 0x28
   264c8:	ldr	r0, [r4]
   264cc:	bl	227bc <flatcc_builder_table_add_union@@Base>
   264d0:	cmp	r0, #0
   264d4:	beq	26454 <flatcc_json_parser_union@@Base+0x78>
   264d8:	mov	r3, #28
   264dc:	mov	r2, r6
   264e0:	mov	r1, r5
   264e4:	b	2647c <flatcc_json_parser_union@@Base+0xa0>

000264e8 <flatcc_json_parser_union_type@@Base>:
   264e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   264ec:	sub	sp, sp, #28
   264f0:	mov	r9, r1
   264f4:	mov	r4, r0
   264f8:	ldr	r1, [sp, #68]	; 0x44
   264fc:	ldr	r0, [r0]
   26500:	mov	r5, r3
   26504:	mov	r6, r2
   26508:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   2650c:	mov	r3, #24
   26510:	mul	r3, r3, r5
   26514:	str	r3, [sp, #12]
   26518:	add	sl, r0, #8
   2651c:	add	r7, sl, r3
   26520:	ldrb	r3, [r7, #12]
   26524:	cmp	r3, #0
   26528:	movne	r3, #28
   2652c:	movne	r2, r6
   26530:	movne	r1, r9
   26534:	bne	2664c <flatcc_json_parser_union_type@@Base+0x164>
   26538:	mov	r3, #1
   2653c:	add	fp, r7, #13
   26540:	strb	r3, [r7, #12]
   26544:	mov	r8, r0
   26548:	mov	r3, fp
   2654c:	mov	r2, r6
   26550:	mov	r1, r9
   26554:	mov	r0, r4
   26558:	bl	257ec <flatcc_json_parser_integer@@Base+0xc8>
   2655c:	cmp	r9, r0
   26560:	mov	r5, r0
   26564:	bne	26584 <flatcc_json_parser_union_type@@Base+0x9c>
   26568:	mov	r1, r0
   2656c:	str	fp, [sp]
   26570:	ldr	r3, [sp, #72]	; 0x48
   26574:	mov	r2, r6
   26578:	mov	r0, r4
   2657c:	bl	24e20 <flatcc_json_parser_space_ext@@Base+0x1b0>
   26580:	mov	r5, r0
   26584:	ldr	r3, [sp, #12]
   26588:	ldr	r1, [sl, r3]
   2658c:	ldr	r3, [r8, #4]
   26590:	cmp	r1, #0
   26594:	bne	265b4 <flatcc_json_parser_union_type@@Base+0xcc>
   26598:	ldrb	r2, [r7, #13]
   2659c:	cmp	r2, #0
   265a0:	addne	r3, r3, #1
   265a4:	str	r3, [r8, #4]
   265a8:	mov	r0, r5
   265ac:	add	sp, sp, #28
   265b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265b4:	cmp	r3, #0
   265b8:	bne	265d0 <flatcc_json_parser_union_type@@Base+0xe8>
   265bc:	ldr	r3, [pc, #152]	; 2665c <flatcc_json_parser_union_type@@Base+0x174>
   265c0:	ldr	r2, [pc, #152]	; 26660 <flatcc_json_parser_union_type@@Base+0x178>
   265c4:	ldr	r1, [pc, #152]	; 26664 <flatcc_json_parser_union_type@@Base+0x17c>
   265c8:	ldr	r0, [pc, #152]	; 26668 <flatcc_json_parser_union_type@@Base+0x180>
   265cc:	bl	14648 <__assert_fail@plt>
   265d0:	sub	r3, r3, #1
   265d4:	str	r3, [r8, #4]
   265d8:	ldr	r3, [r7, #8]
   265dc:	ldr	r9, [r4, #12]
   265e0:	str	r3, [r4, #12]
   265e4:	ldr	r3, [r7, #4]
   265e8:	ldr	r8, [r4, #4]
   265ec:	str	r3, [r4, #4]
   265f0:	ldrb	r3, [r7, #13]
   265f4:	add	r7, sp, #24
   265f8:	mov	r0, r4
   265fc:	strb	r3, [r7, #-8]!
   26600:	add	r2, r7, #4
   26604:	str	r2, [sp]
   26608:	ldr	sl, [sp, #76]	; 0x4c
   2660c:	mov	r2, r6
   26610:	blx	sl
   26614:	cmp	r6, r0
   26618:	moveq	r5, r6
   2661c:	beq	265a8 <flatcc_json_parser_union_type@@Base+0xc0>
   26620:	ldm	r7, {r2, r3}
   26624:	ldrh	r1, [sp, #64]	; 0x40
   26628:	ldr	r0, [r4]
   2662c:	bl	227bc <flatcc_builder_table_add_union@@Base>
   26630:	cmp	r0, #0
   26634:	streq	r9, [r4, #12]
   26638:	streq	r8, [r4, #4]
   2663c:	beq	265a8 <flatcc_json_parser_union_type@@Base+0xc0>
   26640:	mov	r3, #28
   26644:	mov	r2, r6
   26648:	mov	r1, r5
   2664c:	mov	r0, r4
   26650:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   26654:	mov	r5, r0
   26658:	b	265a8 <flatcc_json_parser_union_type@@Base+0xc0>
   2665c:	ldrdeq	r2, [r3], -r0
   26660:	andeq	r0, r0, r5, asr #7
   26664:	andeq	r2, r3, r9, asr lr
   26668:	andeq	r2, r3, r3, lsr #29

0002666c <flatcc_json_parser_union_vector@@Base>:
   2666c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26670:	mov	r4, r0
   26674:	mov	r5, r1
   26678:	ldr	r0, [r0]
   2667c:	ldr	r1, [sp, #36]	; 0x24
   26680:	mov	r9, r3
   26684:	mov	r6, r2
   26688:	ldrh	r7, [sp, #32]
   2668c:	ldr	r8, [sp, #40]	; 0x28
   26690:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   26694:	mov	r3, #24
   26698:	mul	r3, r3, r9
   2669c:	add	r2, r0, #8
   266a0:	add	ip, r2, r3
   266a4:	ldr	r1, [r2, r3]
   266a8:	cmp	r1, #0
   266ac:	beq	266c8 <flatcc_json_parser_union_vector@@Base+0x5c>
   266b0:	mov	r2, r6
   266b4:	mov	r1, r5
   266b8:	mov	r0, r4
   266bc:	mov	r3, #28
   266c0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   266c4:	b	24b40 <flatcc_json_parser_set_error@@Base>
   266c8:	ldrb	r1, [ip, #12]
   266cc:	cmp	r1, #0
   266d0:	ldr	r1, [r0, #4]
   266d4:	bne	26708 <flatcc_json_parser_union_vector@@Base+0x9c>
   266d8:	add	r1, r1, #1
   266dc:	str	r1, [r0, #4]
   266e0:	ldr	r1, [r4, #12]
   266e4:	mov	r0, r4
   266e8:	str	r1, [ip, #8]
   266ec:	ldr	r1, [r4, #4]
   266f0:	str	r1, [ip, #4]
   266f4:	str	r5, [r2, r3]
   266f8:	mov	r1, r5
   266fc:	mov	r2, r6
   26700:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   26704:	b	25880 <flatcc_json_parser_generic_json@@Base>
   26708:	sub	r1, r1, #1
   2670c:	str	r1, [r0, #4]
   26710:	str	r8, [sp, #40]	; 0x28
   26714:	str	r7, [sp, #36]	; 0x24
   26718:	ldr	r3, [ip, #16]
   2671c:	mov	r2, r6
   26720:	str	r3, [sp, #32]
   26724:	mov	r1, r5
   26728:	mov	r0, r4
   2672c:	ldr	r3, [ip, #20]
   26730:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   26734:	b	24fec <flatcc_json_parser_space_ext@@Base+0x37c>

00026738 <flatcc_json_parser_union_type_vector@@Base>:
   26738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2673c:	sub	sp, sp, #36	; 0x24
   26740:	mov	r4, r0
   26744:	mov	r5, r1
   26748:	ldr	r0, [r0]
   2674c:	ldr	r1, [sp, #76]	; 0x4c
   26750:	mov	r7, r3
   26754:	mov	r6, r2
   26758:	ldrh	r9, [sp, #72]	; 0x48
   2675c:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   26760:	mov	r3, #24
   26764:	mul	r7, r3, r7
   26768:	add	r0, r0, #8
   2676c:	add	r8, r0, r7
   26770:	ldrb	r3, [r8, #12]
   26774:	cmp	r3, #0
   26778:	movne	r3, #28
   2677c:	bne	269ac <flatcc_json_parser_union_type_vector@@Base+0x274>
   26780:	mov	sl, #1
   26784:	strb	sl, [r8, #12]
   26788:	mvn	r3, #0
   2678c:	mov	r2, sl
   26790:	mov	r1, sl
   26794:	ldr	r0, [r4]
   26798:	bl	21400 <flatcc_builder_start_vector@@Base>
   2679c:	cmp	r0, #0
   267a0:	bne	269a8 <flatcc_json_parser_union_type_vector@@Base+0x270>
   267a4:	mov	r1, r5
   267a8:	add	r3, sp, #28
   267ac:	mov	r2, r6
   267b0:	mov	r0, r4
   267b4:	bl	24f68 <flatcc_json_parser_space_ext@@Base+0x2f8>
   267b8:	str	sl, [sp, #16]
   267bc:	add	sl, sp, #27
   267c0:	mov	r5, r0
   267c4:	ldr	r3, [sp, #28]
   267c8:	cmp	r3, #0
   267cc:	bne	2688c <flatcc_json_parser_union_type_vector@@Base+0x154>
   267d0:	ldr	r0, [r4]
   267d4:	bl	21df0 <flatcc_builder_vector_count@@Base>
   267d8:	str	r0, [r8, #16]
   267dc:	mov	r1, r0
   267e0:	mov	sl, r0
   267e4:	ldr	r0, [r4]
   267e8:	bl	20878 <flatcc_builder_enter_user_frame@@Base>
   267ec:	mov	r1, r0
   267f0:	mov	r8, r0
   267f4:	ldr	r0, [r4]
   267f8:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   267fc:	mov	fp, r0
   26800:	ldr	r0, [r4]
   26804:	bl	21dfc <flatcc_builder_vector_edit@@Base>
   26808:	mov	r2, sl
   2680c:	mov	r1, r0
   26810:	mov	r0, fp
   26814:	bl	14570 <memcpy@plt>
   26818:	ldr	r0, [r4]
   2681c:	bl	21d78 <flatcc_builder_end_vector@@Base>
   26820:	subs	fp, r0, #0
   26824:	beq	269a8 <flatcc_json_parser_union_type_vector@@Base+0x270>
   26828:	sub	r1, r9, #1
   2682c:	ldr	r0, [r4]
   26830:	bl	22690 <flatcc_builder_table_add_offset@@Base>
   26834:	cmp	r0, #0
   26838:	beq	269a8 <flatcc_json_parser_union_type_vector@@Base+0x270>
   2683c:	str	fp, [r0]
   26840:	ldr	r1, [sp, #76]	; 0x4c
   26844:	ldr	r0, [r4]
   26848:	bl	20978 <flatcc_builder_get_user_frame_ptr@@Base>
   2684c:	add	r3, r0, #8
   26850:	add	r2, r3, r7
   26854:	ldr	r1, [r3, r7]
   26858:	ldr	r3, [r0, #4]
   2685c:	cmp	r1, #0
   26860:	addeq	r3, r3, #1
   26864:	str	r8, [r2, #20]
   26868:	streq	r3, [r0, #4]
   2686c:	beq	26998 <flatcc_json_parser_union_type_vector@@Base+0x260>
   26870:	cmp	r3, #0
   26874:	bne	26948 <flatcc_json_parser_union_type_vector@@Base+0x210>
   26878:	ldr	r3, [pc, #312]	; 269b8 <flatcc_json_parser_union_type_vector@@Base+0x280>
   2687c:	ldr	r2, [pc, #312]	; 269bc <flatcc_json_parser_union_type_vector@@Base+0x284>
   26880:	ldr	r1, [pc, #312]	; 269c0 <flatcc_json_parser_union_type_vector@@Base+0x288>
   26884:	ldr	r0, [pc, #312]	; 269c4 <flatcc_json_parser_union_type_vector@@Base+0x28c>
   26888:	bl	14648 <__assert_fail@plt>
   2688c:	ldr	r1, [sp, #16]
   26890:	ldr	r0, [r4]
   26894:	bl	20f28 <flatcc_builder_extend_vector@@Base>
   26898:	subs	fp, r0, #0
   2689c:	beq	269a8 <flatcc_json_parser_union_type_vector@@Base+0x270>
   268a0:	mov	r1, r5
   268a4:	mov	r3, sl
   268a8:	mov	r2, r6
   268ac:	mov	r0, r4
   268b0:	bl	257ec <flatcc_json_parser_integer@@Base+0xc8>
   268b4:	cmp	r5, r0
   268b8:	mov	r1, r0
   268bc:	bne	268e8 <flatcc_json_parser_union_type_vector@@Base+0x1b0>
   268c0:	mov	r1, r5
   268c4:	str	sl, [sp]
   268c8:	ldr	r3, [sp, #80]	; 0x50
   268cc:	mov	r2, r6
   268d0:	mov	r0, r4
   268d4:	bl	24e20 <flatcc_json_parser_space_ext@@Base+0x1b0>
   268d8:	cmp	r6, r0
   268dc:	cmpne	r5, r0
   268e0:	mov	r1, r0
   268e4:	beq	269a4 <flatcc_json_parser_union_type_vector@@Base+0x26c>
   268e8:	ldrb	r0, [sp, #27]
   268ec:	ldr	r3, [sp, #88]	; 0x58
   268f0:	str	r1, [sp, #20]
   268f4:	blx	r3
   268f8:	ldr	r1, [sp, #20]
   268fc:	cmp	r0, #0
   26900:	bne	26928 <flatcc_json_parser_union_type_vector@@Base+0x1f0>
   26904:	ldr	r3, [r4, #8]
   26908:	tst	r3, #1
   2690c:	bne	26924 <flatcc_json_parser_union_type_vector@@Base+0x1ec>
   26910:	mov	r3, #15
   26914:	mov	r2, r6
   26918:	mov	r0, r4
   2691c:	bl	24b40 <flatcc_json_parser_set_error@@Base>
   26920:	b	2699c <flatcc_json_parser_union_type_vector@@Base+0x264>
   26924:	strb	r0, [sp, #27]
   26928:	ldrb	r3, [sp, #27]
   2692c:	mov	r2, r6
   26930:	mov	r0, r4
   26934:	strb	r3, [fp]
   26938:	add	r3, sp, #28
   2693c:	bl	24d74 <flatcc_json_parser_space_ext@@Base+0x104>
   26940:	mov	r5, r0
   26944:	b	267c4 <flatcc_json_parser_union_type_vector@@Base+0x8c>
   26948:	sub	r3, r3, #1
   2694c:	str	r3, [r0, #4]
   26950:	ldr	r3, [r2, #8]
   26954:	ldr	fp, [r4, #12]
   26958:	str	r3, [r4, #12]
   2695c:	ldr	r3, [r2, #4]
   26960:	ldr	r7, [r4, #4]
   26964:	str	r3, [r4, #4]
   26968:	ldr	r3, [sp, #84]	; 0x54
   2696c:	str	r9, [sp, #4]
   26970:	str	r3, [sp, #8]
   26974:	str	sl, [sp]
   26978:	mov	r3, r8
   2697c:	mov	r2, r6
   26980:	mov	r0, r4
   26984:	bl	24fec <flatcc_json_parser_space_ext@@Base+0x37c>
   26988:	cmp	r6, r0
   2698c:	beq	2699c <flatcc_json_parser_union_type_vector@@Base+0x264>
   26990:	str	fp, [r4, #12]
   26994:	str	r7, [r4, #4]
   26998:	mov	r0, r5
   2699c:	add	sp, sp, #36	; 0x24
   269a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269a4:	mov	r5, r0
   269a8:	mov	r3, #33	; 0x21
   269ac:	mov	r2, r6
   269b0:	mov	r1, r5
   269b4:	b	26918 <flatcc_json_parser_union_type_vector@@Base+0x1e0>
   269b8:	andeq	r2, r3, lr, ror #25
   269bc:	andeq	r0, r0, r2, ror #8
   269c0:	andeq	r2, r3, r9, asr lr
   269c4:	andeq	r2, r3, r3, lsr #29

000269c8 <flatcc_json_parser_struct_as_root@@Base>:
   269c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   269cc:	sub	sp, sp, #52	; 0x34
   269d0:	mov	r5, r2
   269d4:	ldr	r9, [sp, #80]	; 0x50
   269d8:	add	r6, r2, r3
   269dc:	ands	r8, r9, #4
   269e0:	movne	r8, #2
   269e4:	subs	r4, r1, #0
   269e8:	addeq	r4, sp, #8
   269ec:	mov	r7, r0
   269f0:	mov	r2, #40	; 0x28
   269f4:	mov	r1, #0
   269f8:	mov	r0, r4
   269fc:	bl	145e8 <memset@plt>
   26a00:	mov	r3, #1
   26a04:	str	r3, [r4, #12]
   26a08:	str	r7, [r4]
   26a0c:	str	r5, [r4, #4]
   26a10:	str	r9, [r4, #8]
   26a14:	str	r5, [r4, #24]
   26a18:	str	r6, [r4, #28]
   26a1c:	str	r5, [r4, #32]
   26a20:	mov	r3, r8
   26a24:	mov	r2, #0
   26a28:	ldr	r1, [sp, #84]	; 0x54
   26a2c:	mov	r0, r7
   26a30:	bl	20d18 <flatcc_builder_start_buffer@@Base>
   26a34:	cmp	r0, #0
   26a38:	beq	26a4c <flatcc_json_parser_struct_as_root@@Base+0x84>
   26a3c:	mvn	r6, #0
   26a40:	mov	r0, r6
   26a44:	add	sp, sp, #52	; 0x34
   26a48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26a4c:	mov	r2, r6
   26a50:	add	r3, sp, #4
   26a54:	ldr	r6, [sp, #88]	; 0x58
   26a58:	mov	r1, r5
   26a5c:	mov	r0, r4
   26a60:	blx	r6
   26a64:	ldr	r6, [r4, #20]
   26a68:	cmp	r6, #0
   26a6c:	bne	26a40 <flatcc_json_parser_struct_as_root@@Base+0x78>
   26a70:	ldr	r1, [sp, #4]
   26a74:	mov	r0, r7
   26a78:	bl	20db8 <flatcc_builder_end_buffer@@Base>
   26a7c:	cmp	r0, #0
   26a80:	beq	26a3c <flatcc_json_parser_struct_as_root@@Base+0x74>
   26a84:	str	r5, [r4, #36]	; 0x24
   26a88:	b	26a40 <flatcc_json_parser_struct_as_root@@Base+0x78>

00026a8c <flatcc_json_parser_table_as_root@@Base>:
   26a8c:	b	269c8 <flatcc_json_parser_struct_as_root@@Base>
   26a90:	cmp	r0, #1000	; 0x3e8
   26a94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26a98:	mov	r4, r0
   26a9c:	bcc	26aec <flatcc_json_parser_table_as_root@@Base+0x60>
   26aa0:	ldr	r5, [pc, #352]	; 26c08 <flatcc_json_parser_table_as_root@@Base+0x17c>
   26aa4:	cmp	r0, r5
   26aa8:	movhi	r5, #5
   26aac:	movls	r5, #4
   26ab0:	mov	r3, #0
   26ab4:	tst	r5, #1
   26ab8:	add	r6, r1, r5
   26abc:	strb	r3, [r1, r5]
   26ac0:	beq	26b8c <flatcc_json_parser_table_as_root@@Base+0x100>
   26ac4:	cmp	r5, #3
   26ac8:	beq	26b48 <flatcc_json_parser_table_as_root@@Base+0xbc>
   26acc:	cmp	r5, #5
   26ad0:	beq	26b08 <flatcc_json_parser_table_as_root@@Base+0x7c>
   26ad4:	cmp	r5, #1
   26ad8:	bne	26ae4 <flatcc_json_parser_table_as_root@@Base+0x58>
   26adc:	add	r4, r4, #48	; 0x30
   26ae0:	strb	r4, [r6, #-1]
   26ae4:	mov	r0, r5
   26ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26aec:	cmp	r0, #99	; 0x63
   26af0:	movhi	r5, #3
   26af4:	bhi	26ab0 <flatcc_json_parser_table_as_root@@Base+0x24>
   26af8:	cmp	r0, #9
   26afc:	movhi	r5, #2
   26b00:	movls	r5, #1
   26b04:	b	26ab0 <flatcc_json_parser_table_as_root@@Base+0x24>
   26b08:	add	r7, r1, #3
   26b0c:	mov	r0, r4
   26b10:	mov	r1, #100	; 0x64
   26b14:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26b18:	mov	r0, r4
   26b1c:	ldr	r8, [pc, #232]	; 26c0c <flatcc_json_parser_table_as_root@@Base+0x180>
   26b20:	uxth	r9, r1
   26b24:	mov	r1, #100	; 0x64
   26b28:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26b2c:	ldrb	r3, [r8, r9, lsl #1]
   26b30:	add	sl, r8, r9, lsl #1
   26b34:	strb	r3, [r6, #-2]
   26b38:	ldrb	r3, [sl, #1]
   26b3c:	strb	r3, [r6, #-1]
   26b40:	mov	r6, r7
   26b44:	uxth	r4, r0
   26b48:	mov	r0, r4
   26b4c:	mov	r1, #100	; 0x64
   26b50:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26b54:	mov	r0, r4
   26b58:	ldr	r7, [pc, #172]	; 26c0c <flatcc_json_parser_table_as_root@@Base+0x180>
   26b5c:	sub	r9, r6, #2
   26b60:	uxth	r8, r1
   26b64:	mov	r1, #100	; 0x64
   26b68:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26b6c:	ldrb	r3, [r7, r8, lsl #1]
   26b70:	add	sl, r7, r8, lsl #1
   26b74:	strb	r3, [r6, #-2]
   26b78:	ldrb	r3, [sl, #1]
   26b7c:	strb	r3, [r6, #-1]
   26b80:	mov	r6, r9
   26b84:	uxth	r4, r0
   26b88:	b	26adc <flatcc_json_parser_table_as_root@@Base+0x50>
   26b8c:	cmp	r5, #2
   26b90:	beq	26bdc <flatcc_json_parser_table_as_root@@Base+0x150>
   26b94:	cmp	r5, #4
   26b98:	bne	26ae4 <flatcc_json_parser_table_as_root@@Base+0x58>
   26b9c:	add	r7, r1, #2
   26ba0:	mov	r0, r4
   26ba4:	mov	r1, #100	; 0x64
   26ba8:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26bac:	mov	r0, r4
   26bb0:	ldr	r8, [pc, #84]	; 26c0c <flatcc_json_parser_table_as_root@@Base+0x180>
   26bb4:	uxth	r9, r1
   26bb8:	mov	r1, #100	; 0x64
   26bbc:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26bc0:	ldrb	r3, [r8, r9, lsl #1]
   26bc4:	add	sl, r8, r9, lsl #1
   26bc8:	strb	r3, [r6, #-2]
   26bcc:	ldrb	r3, [sl, #1]
   26bd0:	strb	r3, [r6, #-1]
   26bd4:	mov	r6, r7
   26bd8:	uxth	r4, r0
   26bdc:	mov	r1, #100	; 0x64
   26be0:	mov	r0, r4
   26be4:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26be8:	ldr	r7, [pc, #28]	; 26c0c <flatcc_json_parser_table_as_root@@Base+0x180>
   26bec:	uxth	r1, r1
   26bf0:	ldrb	r2, [r7, r1, lsl #1]
   26bf4:	add	r3, r7, r1, lsl #1
   26bf8:	strb	r2, [r6, #-2]
   26bfc:	ldrb	r3, [r3, #1]
   26c00:	strb	r3, [r6, #-1]
   26c04:	b	26ae4 <flatcc_json_parser_table_as_root@@Base+0x58>
   26c08:	andeq	r2, r0, pc, lsl #14
   26c0c:	andeq	r3, r3, r8, lsl #2
   26c10:	ldr	r3, [pc, #824]	; 26f50 <flatcc_json_parser_table_as_root@@Base+0x4c4>
   26c14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26c18:	cmp	r0, r3
   26c1c:	mov	r4, r0
   26c20:	bls	26cbc <flatcc_json_parser_table_as_root@@Base+0x230>
   26c24:	ldr	r3, [pc, #808]	; 26f54 <flatcc_json_parser_table_as_root@@Base+0x4c8>
   26c28:	cmp	r0, r3
   26c2c:	bls	26c98 <flatcc_json_parser_table_as_root@@Base+0x20c>
   26c30:	ldr	r3, [pc, #800]	; 26f58 <flatcc_json_parser_table_as_root@@Base+0x4cc>
   26c34:	cmp	r0, r3
   26c38:	movhi	r6, #10
   26c3c:	bhi	26c50 <flatcc_json_parser_table_as_root@@Base+0x1c4>
   26c40:	ldr	r6, [pc, #788]	; 26f5c <flatcc_json_parser_table_as_root@@Base+0x4d0>
   26c44:	cmp	r0, r6
   26c48:	movhi	r6, #9
   26c4c:	movls	r6, #8
   26c50:	mov	r3, #0
   26c54:	tst	r6, #1
   26c58:	add	r5, r1, r6
   26c5c:	strb	r3, [r1, r6]
   26c60:	beq	26df4 <flatcc_json_parser_table_as_root@@Base+0x368>
   26c64:	sub	r3, r6, #1
   26c68:	cmp	r3, #8
   26c6c:	ldrls	pc, [pc, r3, lsl #2]
   26c70:	b	26dec <flatcc_json_parser_table_as_root@@Base+0x360>
   26c74:	andeq	r6, r2, r4, ror #27
   26c78:	andeq	r6, r2, ip, ror #27
   26c7c:	andeq	r6, r2, r4, lsr #27
   26c80:	andeq	r6, r2, ip, ror #27
   26c84:	andeq	r6, r2, r4, ror #26
   26c88:	andeq	r6, r2, ip, ror #27
   26c8c:	andeq	r6, r2, r4, lsr #26
   26c90:	andeq	r6, r2, ip, ror #27
   26c94:	andeq	r6, r2, r4, ror #25
   26c98:	ldr	r3, [pc, #704]	; 26f60 <flatcc_json_parser_table_as_root@@Base+0x4d4>
   26c9c:	cmp	r0, r3
   26ca0:	movhi	r6, #7
   26ca4:	bhi	26c50 <flatcc_json_parser_table_as_root@@Base+0x1c4>
   26ca8:	ldr	r6, [pc, #692]	; 26f64 <flatcc_json_parser_table_as_root@@Base+0x4d8>
   26cac:	cmp	r0, r6
   26cb0:	movhi	r6, #6
   26cb4:	movls	r6, #5
   26cb8:	b	26c50 <flatcc_json_parser_table_as_root@@Base+0x1c4>
   26cbc:	cmp	r0, #99	; 0x63
   26cc0:	bls	26cd4 <flatcc_json_parser_table_as_root@@Base+0x248>
   26cc4:	cmp	r0, #1000	; 0x3e8
   26cc8:	movcs	r6, #4
   26ccc:	movcc	r6, #3
   26cd0:	b	26c50 <flatcc_json_parser_table_as_root@@Base+0x1c4>
   26cd4:	cmp	r0, #9
   26cd8:	movhi	r6, #2
   26cdc:	movls	r6, #1
   26ce0:	b	26c50 <flatcc_json_parser_table_as_root@@Base+0x1c4>
   26ce4:	mov	r0, r4
   26ce8:	mov	r1, #100	; 0x64
   26cec:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26cf0:	ldr	r7, [pc, #624]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26cf4:	mov	r0, r4
   26cf8:	sub	r9, r5, #2
   26cfc:	mov	r8, r1
   26d00:	add	sl, r7, r1, lsl #1
   26d04:	mov	r1, #100	; 0x64
   26d08:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26d0c:	ldrb	r3, [r7, r8, lsl #1]
   26d10:	strb	r3, [r5, #-2]
   26d14:	ldrb	r3, [sl, #1]
   26d18:	strb	r3, [r5, #-1]
   26d1c:	mov	r5, r9
   26d20:	mov	r4, r0
   26d24:	mov	r0, r4
   26d28:	mov	r1, #100	; 0x64
   26d2c:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26d30:	ldr	r7, [pc, #560]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26d34:	mov	r0, r4
   26d38:	sub	r9, r5, #2
   26d3c:	mov	r8, r1
   26d40:	add	sl, r7, r1, lsl #1
   26d44:	mov	r1, #100	; 0x64
   26d48:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26d4c:	ldrb	r3, [r7, r8, lsl #1]
   26d50:	strb	r3, [r5, #-2]
   26d54:	ldrb	r3, [sl, #1]
   26d58:	strb	r3, [r5, #-1]
   26d5c:	mov	r5, r9
   26d60:	mov	r4, r0
   26d64:	mov	r0, r4
   26d68:	mov	r1, #100	; 0x64
   26d6c:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26d70:	ldr	r7, [pc, #496]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26d74:	mov	r0, r4
   26d78:	sub	r9, r5, #2
   26d7c:	mov	r8, r1
   26d80:	add	sl, r7, r1, lsl #1
   26d84:	mov	r1, #100	; 0x64
   26d88:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26d8c:	ldrb	r3, [r7, r8, lsl #1]
   26d90:	strb	r3, [r5, #-2]
   26d94:	ldrb	r3, [sl, #1]
   26d98:	strb	r3, [r5, #-1]
   26d9c:	mov	r5, r9
   26da0:	mov	r4, r0
   26da4:	mov	r0, r4
   26da8:	mov	r1, #100	; 0x64
   26dac:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26db0:	ldr	r7, [pc, #432]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26db4:	mov	r0, r4
   26db8:	sub	r9, r5, #2
   26dbc:	mov	r8, r1
   26dc0:	add	sl, r7, r1, lsl #1
   26dc4:	mov	r1, #100	; 0x64
   26dc8:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26dcc:	ldrb	r3, [r7, r8, lsl #1]
   26dd0:	strb	r3, [r5, #-2]
   26dd4:	ldrb	r3, [sl, #1]
   26dd8:	strb	r3, [r5, #-1]
   26ddc:	mov	r5, r9
   26de0:	mov	r4, r0
   26de4:	add	r4, r4, #48	; 0x30
   26de8:	strb	r4, [r5, #-1]
   26dec:	mov	r0, r6
   26df0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26df4:	sub	r3, r6, #2
   26df8:	cmp	r3, #8
   26dfc:	ldrls	pc, [pc, r3, lsl #2]
   26e00:	b	26dec <flatcc_json_parser_table_as_root@@Base+0x360>
   26e04:	andeq	r6, r2, r8, lsr #30
   26e08:	andeq	r6, r2, ip, ror #27
   26e0c:	andeq	r6, r2, r8, ror #29
   26e10:	andeq	r6, r2, ip, ror #27
   26e14:	andeq	r6, r2, r8, lsr #29
   26e18:	andeq	r6, r2, ip, ror #27
   26e1c:	andeq	r6, r2, r8, ror #28
   26e20:	andeq	r6, r2, ip, ror #27
   26e24:	andeq	r6, r2, r8, lsr #28
   26e28:	mov	r0, r4
   26e2c:	mov	r1, #100	; 0x64
   26e30:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26e34:	ldr	r7, [pc, #300]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26e38:	mov	r0, r4
   26e3c:	sub	r9, r5, #2
   26e40:	mov	r8, r1
   26e44:	add	sl, r7, r1, lsl #1
   26e48:	mov	r1, #100	; 0x64
   26e4c:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26e50:	ldrb	r3, [r7, r8, lsl #1]
   26e54:	strb	r3, [r5, #-2]
   26e58:	ldrb	r3, [sl, #1]
   26e5c:	strb	r3, [r5, #-1]
   26e60:	mov	r5, r9
   26e64:	mov	r4, r0
   26e68:	mov	r0, r4
   26e6c:	mov	r1, #100	; 0x64
   26e70:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26e74:	ldr	r7, [pc, #236]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26e78:	mov	r0, r4
   26e7c:	sub	r9, r5, #2
   26e80:	mov	r8, r1
   26e84:	add	sl, r7, r1, lsl #1
   26e88:	mov	r1, #100	; 0x64
   26e8c:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26e90:	ldrb	r3, [r7, r8, lsl #1]
   26e94:	strb	r3, [r5, #-2]
   26e98:	ldrb	r3, [sl, #1]
   26e9c:	strb	r3, [r5, #-1]
   26ea0:	mov	r5, r9
   26ea4:	mov	r4, r0
   26ea8:	mov	r0, r4
   26eac:	mov	r1, #100	; 0x64
   26eb0:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26eb4:	ldr	r7, [pc, #172]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26eb8:	mov	r0, r4
   26ebc:	sub	r9, r5, #2
   26ec0:	mov	r8, r1
   26ec4:	add	sl, r7, r1, lsl #1
   26ec8:	mov	r1, #100	; 0x64
   26ecc:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26ed0:	ldrb	r3, [r7, r8, lsl #1]
   26ed4:	strb	r3, [r5, #-2]
   26ed8:	ldrb	r3, [sl, #1]
   26edc:	strb	r3, [r5, #-1]
   26ee0:	mov	r5, r9
   26ee4:	mov	r4, r0
   26ee8:	mov	r0, r4
   26eec:	mov	r1, #100	; 0x64
   26ef0:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26ef4:	ldr	r7, [pc, #108]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26ef8:	mov	r0, r4
   26efc:	sub	r9, r5, #2
   26f00:	mov	r8, r1
   26f04:	add	sl, r7, r1, lsl #1
   26f08:	mov	r1, #100	; 0x64
   26f0c:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   26f10:	ldrb	r3, [r7, r8, lsl #1]
   26f14:	strb	r3, [r5, #-2]
   26f18:	ldrb	r3, [sl, #1]
   26f1c:	strb	r3, [r5, #-1]
   26f20:	mov	r5, r9
   26f24:	mov	r4, r0
   26f28:	mov	r1, #100	; 0x64
   26f2c:	mov	r0, r4
   26f30:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   26f34:	ldr	r7, [pc, #44]	; 26f68 <flatcc_json_parser_table_as_root@@Base+0x4dc>
   26f38:	ldrb	r2, [r7, r1, lsl #1]
   26f3c:	add	r3, r7, r1, lsl #1
   26f40:	strb	r2, [r5, #-2]
   26f44:	ldrb	r3, [r3, #1]
   26f48:	strb	r3, [r5, #-1]
   26f4c:	b	26dec <flatcc_json_parser_table_as_root@@Base+0x360>
   26f50:	andeq	r2, r0, pc, lsl #14
   26f54:	addseq	r9, r8, pc, ror r6
   26f58:	blcc	fe6d975c <__bss_end__@@Base+0xfe695398>
   26f5c:	ldrbeq	lr, [r5, #255]!	; 0xff
   26f60:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   26f64:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   26f68:	andeq	r3, r3, r8, lsl #2
   26f6c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f70:	mov	r6, r0
   26f74:	mov	r7, r1
   26f78:	add	r1, pc, #984	; 0x3d8
   26f7c:	ldrd	r0, [r1]
   26f80:	cmp	r7, r1
   26f84:	cmpeq	r6, r0
   26f88:	bhi	26f9c <flatcc_json_parser_table_as_root@@Base+0x510>
   26f8c:	mov	r0, r6
   26f90:	mov	r1, r2
   26f94:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f98:	b	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   26f9c:	add	r1, pc, #956	; 0x3bc
   26fa0:	ldrd	r0, [r1]
   26fa4:	cmp	r7, r1
   26fa8:	cmpeq	r6, r0
   26fac:	bls	2708c <flatcc_json_parser_table_as_root@@Base+0x600>
   26fb0:	add	r1, pc, #944	; 0x3b0
   26fb4:	ldrd	r0, [r1]
   26fb8:	cmp	r7, r1
   26fbc:	cmpeq	r6, r0
   26fc0:	bls	27058 <flatcc_json_parser_table_as_root@@Base+0x5cc>
   26fc4:	add	r1, pc, #932	; 0x3a4
   26fc8:	ldrd	r0, [r1]
   26fcc:	cmp	r7, r1
   26fd0:	cmpeq	r6, r0
   26fd4:	bls	2703c <flatcc_json_parser_table_as_root@@Base+0x5b0>
   26fd8:	add	r1, pc, #920	; 0x398
   26fdc:	ldrd	r0, [r1]
   26fe0:	cmp	r7, r1
   26fe4:	cmpeq	r6, r0
   26fe8:	movhi	r8, #20
   26fec:	movls	r8, #19
   26ff0:	mov	r3, #0
   26ff4:	tst	r8, #1
   26ff8:	add	r4, r2, r8
   26ffc:	strb	r3, [r2, r8]
   27000:	ldr	r5, [pc, #936]	; 273b0 <flatcc_json_parser_table_as_root@@Base+0x924>
   27004:	beq	273bc <flatcc_json_parser_table_as_root@@Base+0x930>
   27008:	sub	r3, r8, #11
   2700c:	cmp	r3, #8
   27010:	ldrls	pc, [pc, r3, lsl #2]
   27014:	b	2728c <flatcc_json_parser_table_as_root@@Base+0x800>
   27018:	andeq	r7, r2, r8, lsl r2
   2701c:	andeq	r7, r2, ip, lsl #5
   27020:	andeq	r7, r2, r8, asr #3
   27024:	andeq	r7, r2, ip, lsl #5
   27028:	andeq	r7, r2, r8, ror r1
   2702c:	andeq	r7, r2, ip, lsl #5
   27030:	andeq	r7, r2, r8, lsr #2
   27034:	andeq	r7, r2, ip, lsl #5
   27038:	ldrdeq	r7, [r2], -r8
   2703c:	add	r1, pc, #828	; 0x33c
   27040:	ldrd	r0, [r1]
   27044:	cmp	r7, r1
   27048:	cmpeq	r6, r0
   2704c:	movhi	r8, #18
   27050:	movls	r8, #17
   27054:	b	26ff0 <flatcc_json_parser_table_as_root@@Base+0x564>
   27058:	add	r1, pc, #808	; 0x328
   2705c:	ldrd	r0, [r1]
   27060:	cmp	r7, r1
   27064:	cmpeq	r6, r0
   27068:	movhi	r8, #16
   2706c:	bhi	26ff0 <flatcc_json_parser_table_as_root@@Base+0x564>
   27070:	add	r1, pc, #792	; 0x318
   27074:	ldrd	r0, [r1]
   27078:	cmp	r7, r1
   2707c:	cmpeq	r6, r0
   27080:	movhi	r8, #15
   27084:	movls	r8, #14
   27088:	b	26ff0 <flatcc_json_parser_table_as_root@@Base+0x564>
   2708c:	add	r1, pc, #772	; 0x304
   27090:	ldrd	r0, [r1]
   27094:	cmp	r7, r1
   27098:	cmpeq	r6, r0
   2709c:	bls	270bc <flatcc_json_parser_table_as_root@@Base+0x630>
   270a0:	add	r1, pc, #760	; 0x2f8
   270a4:	ldrd	r0, [r1]
   270a8:	cmp	r7, r1
   270ac:	cmpeq	r6, r0
   270b0:	movhi	r8, #13
   270b4:	movls	r8, #12
   270b8:	b	26ff0 <flatcc_json_parser_table_as_root@@Base+0x564>
   270bc:	add	r1, pc, #740	; 0x2e4
   270c0:	ldrd	r0, [r1]
   270c4:	cmp	r7, r1
   270c8:	cmpeq	r6, r0
   270cc:	movhi	r8, #11
   270d0:	movls	r8, #10
   270d4:	b	26ff0 <flatcc_json_parser_table_as_root@@Base+0x564>
   270d8:	mov	r0, r6
   270dc:	mov	r1, r7
   270e0:	mov	r2, #100	; 0x64
   270e4:	mov	r3, #0
   270e8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   270ec:	mov	r3, #0
   270f0:	mov	r0, r6
   270f4:	mov	r1, r7
   270f8:	sub	sl, r4, #2
   270fc:	mov	r9, r2
   27100:	add	fp, r5, r2, lsl #1
   27104:	mov	r2, #100	; 0x64
   27108:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2710c:	ldrb	r3, [r5, r9, lsl #1]
   27110:	strb	r3, [r4, #-2]
   27114:	ldrb	r3, [fp, #1]
   27118:	strb	r3, [r4, #-1]
   2711c:	mov	r4, sl
   27120:	mov	r6, r0
   27124:	mov	r7, r1
   27128:	mov	r0, r6
   2712c:	mov	r1, r7
   27130:	mov	r2, #100	; 0x64
   27134:	mov	r3, #0
   27138:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2713c:	mov	r3, #0
   27140:	mov	r0, r6
   27144:	mov	r1, r7
   27148:	sub	sl, r4, #2
   2714c:	mov	r9, r2
   27150:	add	fp, r5, r2, lsl #1
   27154:	mov	r2, #100	; 0x64
   27158:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2715c:	ldrb	r3, [r5, r9, lsl #1]
   27160:	strb	r3, [r4, #-2]
   27164:	ldrb	r3, [fp, #1]
   27168:	strb	r3, [r4, #-1]
   2716c:	mov	r4, sl
   27170:	mov	r6, r0
   27174:	mov	r7, r1
   27178:	mov	r0, r6
   2717c:	mov	r1, r7
   27180:	mov	r2, #100	; 0x64
   27184:	mov	r3, #0
   27188:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2718c:	mov	r3, #0
   27190:	mov	r0, r6
   27194:	mov	r1, r7
   27198:	sub	sl, r4, #2
   2719c:	mov	r9, r2
   271a0:	add	fp, r5, r2, lsl #1
   271a4:	mov	r2, #100	; 0x64
   271a8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   271ac:	ldrb	r3, [r5, r9, lsl #1]
   271b0:	strb	r3, [r4, #-2]
   271b4:	ldrb	r3, [fp, #1]
   271b8:	strb	r3, [r4, #-1]
   271bc:	mov	r4, sl
   271c0:	mov	r6, r0
   271c4:	mov	r7, r1
   271c8:	mov	r0, r6
   271cc:	mov	r1, r7
   271d0:	mov	r2, #100	; 0x64
   271d4:	mov	r3, #0
   271d8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   271dc:	mov	r3, #0
   271e0:	mov	r0, r6
   271e4:	mov	r1, r7
   271e8:	sub	sl, r4, #2
   271ec:	mov	r9, r2
   271f0:	add	fp, r5, r2, lsl #1
   271f4:	mov	r2, #100	; 0x64
   271f8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   271fc:	ldrb	r3, [r5, r9, lsl #1]
   27200:	strb	r3, [r4, #-2]
   27204:	ldrb	r3, [fp, #1]
   27208:	strb	r3, [r4, #-1]
   2720c:	mov	r4, sl
   27210:	mov	r6, r0
   27214:	mov	r7, r1
   27218:	mov	r0, r6
   2721c:	mov	r1, r7
   27220:	mov	r2, #100	; 0x64
   27224:	mov	r3, #0
   27228:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2722c:	mov	r0, r6
   27230:	mov	r1, r7
   27234:	sub	r9, r4, #3
   27238:	add	r3, r5, r2, lsl #1
   2723c:	ldrb	r2, [r5, r2, lsl #1]
   27240:	strb	r2, [r4, #-2]
   27244:	ldrb	r3, [r3, #1]
   27248:	mov	r2, #100	; 0x64
   2724c:	strb	r3, [r4, #-1]
   27250:	mov	r3, #0
   27254:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   27258:	mov	r2, #10
   2725c:	mov	r3, #0
   27260:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   27264:	mov	r0, r6
   27268:	mov	r1, r7
   2726c:	mov	r3, #0
   27270:	add	r2, r2, #48	; 0x30
   27274:	strb	r2, [r4, #-3]
   27278:	mov	r2, #1000	; 0x3e8
   2727c:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   27280:	mov	r4, r9
   27284:	mov	r6, r0
   27288:	mov	r7, r1
   2728c:	mov	r0, r6
   27290:	mov	r1, r7
   27294:	mov	r2, #100	; 0x64
   27298:	mov	r3, #0
   2729c:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   272a0:	mov	r0, r6
   272a4:	mov	r1, r7
   272a8:	add	r3, r5, r2, lsl #1
   272ac:	ldrb	r2, [r5, r2, lsl #1]
   272b0:	strb	r2, [r4, #-2]
   272b4:	ldrb	r3, [r3, #1]
   272b8:	mov	r2, #100	; 0x64
   272bc:	strb	r3, [r4, #-1]
   272c0:	mov	r3, #0
   272c4:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   272c8:	mov	r2, #100	; 0x64
   272cc:	mov	r3, #0
   272d0:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   272d4:	mov	r0, r6
   272d8:	mov	r1, r7
   272dc:	add	r3, r5, r2, lsl #1
   272e0:	ldrb	r2, [r5, r2, lsl #1]
   272e4:	strb	r2, [r4, #-4]
   272e8:	ldrb	r3, [r3, #1]
   272ec:	ldr	r2, [pc, #192]	; 273b4 <flatcc_json_parser_table_as_root@@Base+0x928>
   272f0:	strb	r3, [r4, #-3]
   272f4:	mov	r3, #0
   272f8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   272fc:	mov	r2, #100	; 0x64
   27300:	mov	r3, #0
   27304:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   27308:	mov	r0, r6
   2730c:	mov	r1, r7
   27310:	add	r3, r5, r2, lsl #1
   27314:	ldrb	r2, [r5, r2, lsl #1]
   27318:	strb	r2, [r4, #-6]
   2731c:	ldrb	r3, [r3, #1]
   27320:	ldr	r2, [pc, #144]	; 273b8 <flatcc_json_parser_table_as_root@@Base+0x92c>
   27324:	strb	r3, [r4, #-5]
   27328:	mov	r3, #0
   2732c:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   27330:	mov	r2, #100	; 0x64
   27334:	mov	r3, #0
   27338:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2733c:	mov	r0, r8
   27340:	add	r3, r5, r2, lsl #1
   27344:	ldrb	r2, [r5, r2, lsl #1]
   27348:	strb	r2, [r4, #-8]
   2734c:	ldrb	r3, [r3, #1]
   27350:	strb	r3, [r4, #-7]
   27354:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27358:	blcc	fe6d9b5c <__bss_end__@@Base+0xfe695798>
   2735c:	andeq	r0, r0, r0
   27360:	mrcmi	15, 3, r9, cr2, cr15, {7}
   27364:	andeq	r0, r0, r8, lsl r9
   27368:	svcvs	0x00c0ffff
   2736c:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   27370:			; <UNDEFINED> instruction: 0xa763ffff
   27374:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   27378:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   2737c:	bhi	ff1eff94 <__bss_end__@@Base+0xff1abbd0>
   27380:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   27384:	smceq	13400	; 0x3458
   27388:	strbge	r7, [r6], #4095	; 0xfff
   2738c:	andeq	r8, r3, lr, ror sp
   27390:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   27394:	strdeq	r5, [r0], -r3
   27398:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   2739c:	andeq	r0, r0, r7, lsl r0
   273a0:	strtle	r0, [r5], #4095	; 0xfff
   273a4:	andeq	r0, r0, r8, ror #1
   273a8:	strpl	lr, [fp], #-1023	; 0xfffffc01
   273ac:	andeq	r0, r0, r2
   273b0:	andeq	r3, r3, r8, lsl #2
   273b4:	andeq	r2, r0, r0, lsl r7
   273b8:	andeq	r4, pc, r0, asr #4
   273bc:	sub	r3, r8, #10
   273c0:	cmp	r3, #10
   273c4:	ldrls	pc, [pc, r3, lsl #2]
   273c8:	b	2728c <flatcc_json_parser_table_as_root@@Base+0x800>
   273cc:	andeq	r7, r2, r8, lsl #11
   273d0:	andeq	r7, r2, ip, lsl #5
   273d4:	andeq	r7, r2, r8, lsr r5
   273d8:	andeq	r7, r2, ip, lsl #5
   273dc:	andeq	r7, r2, r8, ror #9
   273e0:	andeq	r7, r2, ip, lsl #5
   273e4:	muleq	r2, r8, r4
   273e8:	andeq	r7, r2, ip, lsl #5
   273ec:	andeq	r7, r2, r8, asr #8
   273f0:	andeq	r7, r2, ip, lsl #5
   273f4:	strdeq	r7, [r2], -r8
   273f8:	mov	r0, r6
   273fc:	mov	r1, r7
   27400:	mov	r2, #100	; 0x64
   27404:	mov	r3, #0
   27408:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2740c:	mov	r3, #0
   27410:	mov	r0, r6
   27414:	mov	r1, r7
   27418:	sub	sl, r4, #2
   2741c:	mov	r9, r2
   27420:	add	fp, r5, r2, lsl #1
   27424:	mov	r2, #100	; 0x64
   27428:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2742c:	ldrb	r3, [r5, r9, lsl #1]
   27430:	strb	r3, [r4, #-2]
   27434:	ldrb	r3, [fp, #1]
   27438:	strb	r3, [r4, #-1]
   2743c:	mov	r4, sl
   27440:	mov	r6, r0
   27444:	mov	r7, r1
   27448:	mov	r0, r6
   2744c:	mov	r1, r7
   27450:	mov	r2, #100	; 0x64
   27454:	mov	r3, #0
   27458:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2745c:	mov	r3, #0
   27460:	mov	r0, r6
   27464:	mov	r1, r7
   27468:	sub	sl, r4, #2
   2746c:	mov	r9, r2
   27470:	add	fp, r5, r2, lsl #1
   27474:	mov	r2, #100	; 0x64
   27478:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2747c:	ldrb	r3, [r5, r9, lsl #1]
   27480:	strb	r3, [r4, #-2]
   27484:	ldrb	r3, [fp, #1]
   27488:	strb	r3, [r4, #-1]
   2748c:	mov	r4, sl
   27490:	mov	r6, r0
   27494:	mov	r7, r1
   27498:	mov	r0, r6
   2749c:	mov	r1, r7
   274a0:	mov	r2, #100	; 0x64
   274a4:	mov	r3, #0
   274a8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   274ac:	mov	r3, #0
   274b0:	mov	r0, r6
   274b4:	mov	r1, r7
   274b8:	sub	sl, r4, #2
   274bc:	mov	r9, r2
   274c0:	add	fp, r5, r2, lsl #1
   274c4:	mov	r2, #100	; 0x64
   274c8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   274cc:	ldrb	r3, [r5, r9, lsl #1]
   274d0:	strb	r3, [r4, #-2]
   274d4:	ldrb	r3, [fp, #1]
   274d8:	strb	r3, [r4, #-1]
   274dc:	mov	r4, sl
   274e0:	mov	r6, r0
   274e4:	mov	r7, r1
   274e8:	mov	r0, r6
   274ec:	mov	r1, r7
   274f0:	mov	r2, #100	; 0x64
   274f4:	mov	r3, #0
   274f8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   274fc:	mov	r3, #0
   27500:	mov	r0, r6
   27504:	mov	r1, r7
   27508:	sub	sl, r4, #2
   2750c:	mov	r9, r2
   27510:	add	fp, r5, r2, lsl #1
   27514:	mov	r2, #100	; 0x64
   27518:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2751c:	ldrb	r3, [r5, r9, lsl #1]
   27520:	strb	r3, [r4, #-2]
   27524:	ldrb	r3, [fp, #1]
   27528:	strb	r3, [r4, #-1]
   2752c:	mov	r4, sl
   27530:	mov	r6, r0
   27534:	mov	r7, r1
   27538:	mov	r0, r6
   2753c:	mov	r1, r7
   27540:	mov	r2, #100	; 0x64
   27544:	mov	r3, #0
   27548:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2754c:	mov	r3, #0
   27550:	mov	r0, r6
   27554:	mov	r1, r7
   27558:	sub	sl, r4, #2
   2755c:	mov	r9, r2
   27560:	add	fp, r5, r2, lsl #1
   27564:	mov	r2, #100	; 0x64
   27568:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2756c:	ldrb	r3, [r5, r9, lsl #1]
   27570:	strb	r3, [r4, #-2]
   27574:	ldrb	r3, [fp, #1]
   27578:	strb	r3, [r4, #-1]
   2757c:	mov	r4, sl
   27580:	mov	r6, r0
   27584:	mov	r7, r1
   27588:	mov	r0, r6
   2758c:	mov	r1, r7
   27590:	mov	r2, #100	; 0x64
   27594:	mov	r3, #0
   27598:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   2759c:	mov	r3, #0
   275a0:	mov	r0, r6
   275a4:	mov	r1, r7
   275a8:	sub	sl, r4, #2
   275ac:	mov	r9, r2
   275b0:	add	fp, r5, r2, lsl #1
   275b4:	mov	r2, #100	; 0x64
   275b8:	bl	2e3d0 <flatcc_json_printer_clear@@Base+0xac4>
   275bc:	ldrb	r3, [r5, r9, lsl #1]
   275c0:	strb	r3, [r4, #-2]
   275c4:	ldrb	r3, [fp, #1]
   275c8:	strb	r3, [r4, #-1]
   275cc:	mov	r4, sl
   275d0:	mov	r6, r0
   275d4:	mov	r7, r1
   275d8:	b	2728c <flatcc_json_parser_table_as_root@@Base+0x800>
   275dc:	cmp	r0, #0
   275e0:	push	{r4, lr}
   275e4:	lsr	r4, r0, #31
   275e8:	rsblt	r0, r0, #0
   275ec:	movlt	r3, #45	; 0x2d
   275f0:	sxthlt	r0, r0
   275f4:	strblt	r3, [r1]
   275f8:	uxth	r0, r0
   275fc:	addlt	r1, r1, #1
   27600:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   27604:	add	r0, r4, r0
   27608:	pop	{r4, pc}
   2760c:	cmp	r0, #0
   27610:	movlt	r3, #45	; 0x2d
   27614:	push	{r4, lr}
   27618:	lsr	r4, r0, #31
   2761c:	strblt	r3, [r1]
   27620:	rsblt	r0, r0, #0
   27624:	addlt	r1, r1, #1
   27628:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   2762c:	add	r0, r4, r0
   27630:	pop	{r4, pc}
   27634:	cmp	r0, #0
   27638:	sbcs	r3, r1, #0
   2763c:	push	{r4, lr}
   27640:	lsr	r4, r1, #31
   27644:	bge	2765c <flatcc_json_parser_table_as_root@@Base+0xbd0>
   27648:	mov	r3, #45	; 0x2d
   2764c:	rsbs	r0, r0, #0
   27650:	strb	r3, [r2]
   27654:	rsc	r1, r1, #0
   27658:	add	r2, r2, #1
   2765c:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   27660:	add	r0, r4, r0
   27664:	pop	{r4, pc}
   27668:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2766c:	sub	sp, sp, #28
   27670:	sub	r1, r1, #1
   27674:	ldrd	r8, [sp, #88]	; 0x58
   27678:	ldrd	r4, [sp, #72]	; 0x48
   2767c:	add	ip, r0, r1
   27680:	subs	sl, r2, r8
   27684:	sbc	fp, r3, r9
   27688:	adds	r2, r2, r8
   2768c:	adc	r3, r3, r9
   27690:	subs	r6, sl, r4
   27694:	sbc	r7, fp, r5
   27698:	strd	r6, [sp]
   2769c:	ldrd	r6, [sp, #64]	; 0x40
   276a0:	subs	r6, r6, sl
   276a4:	sbc	r7, r7, fp
   276a8:	strd	r6, [sp, #16]
   276ac:	cmp	r5, fp
   276b0:	cmpeq	r4, sl
   276b4:	bcs	27770 <flatcc_json_parser_table_as_root@@Base+0xce4>
   276b8:	ldrd	r0, [sp, #16]
   276bc:	ldrd	r6, [sp]
   276c0:	adds	r6, r6, r0
   276c4:	adc	r7, r7, r1
   276c8:	mov	r0, r6
   276cc:	mov	r1, r7
   276d0:	ldrd	r6, [sp, #80]	; 0x50
   276d4:	cmp	r7, r1
   276d8:	cmpeq	r6, r0
   276dc:	bls	2772c <flatcc_json_parser_table_as_root@@Base+0xca0>
   276e0:	adds	r2, r8, r8
   276e4:	adc	r3, r9, r9
   276e8:	cmp	r5, r3
   276ec:	cmpeq	r4, r2
   276f0:	bcs	277d0 <flatcc_json_parser_table_as_root@@Base+0xd44>
   276f4:	mov	r0, #0
   276f8:	b	277f8 <flatcc_json_parser_table_as_root@@Base+0xd6c>
   276fc:	ldrd	r6, [sp, #80]	; 0x50
   27700:	ldrd	r4, [sp]
   27704:	ldrb	lr, [ip]
   27708:	subs	r4, r4, r6
   2770c:	sbc	r5, r5, r7
   27710:	mov	r6, r4
   27714:	mov	r7, r5
   27718:	sub	lr, lr, #1
   2771c:	strb	lr, [ip]
   27720:	strd	r6, [sp]
   27724:	ldrd	r4, [sp, #8]
   27728:	b	276ac <flatcc_json_parser_table_as_root@@Base+0xc20>
   2772c:	ldrd	r0, [sp, #80]	; 0x50
   27730:	adds	r0, r0, r4
   27734:	adc	r1, r1, r5
   27738:	cmp	fp, r1
   2773c:	cmpeq	sl, r0
   27740:	strd	r0, [sp, #8]
   27744:	bhi	276fc <flatcc_json_parser_table_as_root@@Base+0xc70>
   27748:	subs	r6, r0, sl
   2774c:	sbc	r7, r1, fp
   27750:	ldrd	r0, [sp]
   27754:	cmp	r7, r1
   27758:	cmpeq	r6, r0
   2775c:	bls	276fc <flatcc_json_parser_table_as_root@@Base+0xc70>
   27760:	cmp	r5, r3
   27764:	cmpeq	r4, r2
   27768:	bcc	27798 <flatcc_json_parser_table_as_root@@Base+0xd0c>
   2776c:	b	276e0 <flatcc_json_parser_table_as_root@@Base+0xc54>
   27770:	cmp	r5, r3
   27774:	cmpeq	r4, r2
   27778:	bcs	276e0 <flatcc_json_parser_table_as_root@@Base+0xc54>
   2777c:	ldrd	r0, [sp, #64]	; 0x40
   27780:	ldrd	r6, [sp, #80]	; 0x50
   27784:	subs	r0, r0, r4
   27788:	sbc	r1, r1, r5
   2778c:	cmp	r7, r1
   27790:	cmpeq	r6, r0
   27794:	bhi	276e0 <flatcc_json_parser_table_as_root@@Base+0xc54>
   27798:	ldrd	r0, [sp, #80]	; 0x50
   2779c:	adds	r0, r0, r4
   277a0:	adc	r1, r1, r5
   277a4:	cmp	r3, r1
   277a8:	cmpeq	r2, r0
   277ac:	bhi	276f4 <flatcc_json_parser_table_as_root@@Base+0xc68>
   277b0:	subs	r6, r2, r4
   277b4:	sbc	r7, r3, r5
   277b8:	subs	r2, r0, r2
   277bc:	sbc	r3, r1, r3
   277c0:	cmp	r7, r3
   277c4:	cmpeq	r6, r2
   277c8:	bls	276e0 <flatcc_json_parser_table_as_root@@Base+0xc54>
   277cc:	b	276f4 <flatcc_json_parser_table_as_root@@Base+0xc68>
   277d0:	ldrd	r0, [sp, #64]	; 0x40
   277d4:	lsl	r3, r9, #2
   277d8:	lsl	r2, r8, #2
   277dc:	subs	r0, r0, r2
   277e0:	orr	r3, r3, r8, lsr #30
   277e4:	sbc	r1, r1, r3
   277e8:	cmp	r5, r1
   277ec:	cmpeq	r4, r0
   277f0:	movls	r0, #1
   277f4:	movhi	r0, #0
   277f8:	add	sp, sp, #28
   277fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   27804:	subs	r4, r0, #0
   27808:	addlt	r6, r1, #1
   2780c:	movge	r6, r1
   27810:	mov	r7, r1
   27814:	rsblt	r4, r4, #0
   27818:	mov	r5, r6
   2781c:	mov	r9, #10
   27820:	mvn	r8, #9
   27824:	movlt	r3, #45	; 0x2d
   27828:	strblt	r3, [r1]
   2782c:	mov	r0, r4
   27830:	mov	r1, r9
   27834:	bl	2db50 <flatcc_json_printer_clear@@Base+0x244>
   27838:	mla	r4, r8, r0, r4
   2783c:	add	r4, r4, #48	; 0x30
   27840:	strb	r4, [r5], #1
   27844:	subs	r4, r0, #0
   27848:	bne	2782c <flatcc_json_parser_table_as_root@@Base+0xda0>
   2784c:	sub	r3, r5, r6
   27850:	mov	r1, r5
   27854:	add	r3, r3, r3, lsr #31
   27858:	mov	r2, r6
   2785c:	asr	r3, r3, #1
   27860:	strb	r4, [r5]
   27864:	sub	r0, r2, r6
   27868:	cmp	r3, r0
   2786c:	bgt	27878 <flatcc_json_parser_table_as_root@@Base+0xdec>
   27870:	sub	r0, r5, r7
   27874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27878:	ldrb	r0, [r2]
   2787c:	ldrb	ip, [r1, #-1]
   27880:	strb	ip, [r2], #1
   27884:	strb	r0, [r1, #-1]!
   27888:	b	27864 <flatcc_json_parser_table_as_root@@Base+0xdd8>
   2788c:	push	{r4, r5, r6, lr}
   27890:	mov	r6, r1
   27894:	mov	r5, r0
   27898:	mov	r1, #3
   2789c:	lsl	r0, r0, #2
   278a0:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   278a4:	tst	r6, #128	; 0x80
   278a8:	add	r0, r0, #3
   278ac:	bic	r4, r0, #3
   278b0:	bne	278d4 <flatcc_json_parser_table_as_root@@Base+0xe48>
   278b4:	mov	r1, #3
   278b8:	mov	r0, r5
   278bc:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   278c0:	cmp	r1, #1
   278c4:	subeq	r4, r4, #2
   278c8:	beq	278d4 <flatcc_json_parser_table_as_root@@Base+0xe48>
   278cc:	cmp	r1, #2
   278d0:	subeq	r4, r4, #1
   278d4:	mov	r0, r4
   278d8:	pop	{r4, r5, r6, pc}
   278dc:	add	r1, r1, #2
   278e0:	ldr	r3, [r0, #8]
   278e4:	lsl	r1, r1, #1
   278e8:	cmp	r1, r3
   278ec:	bge	2790c <flatcc_json_parser_table_as_root@@Base+0xe80>
   278f0:	ldr	r3, [r0, #4]
   278f4:	ldrh	r3, [r3, r1]
   278f8:	cmp	r3, #0
   278fc:	beq	2790c <flatcc_json_parser_table_as_root@@Base+0xe80>
   27900:	ldr	r0, [r0]
   27904:	add	r0, r0, r3
   27908:	bx	lr
   2790c:	mov	r0, #0
   27910:	bx	lr
   27914:	ldr	r3, [r0, #20]
   27918:	ldr	r2, [r0, #16]
   2791c:	cmp	r3, r2
   27920:	bcc	2794c <flatcc_json_parser_table_as_root@@Base+0xec0>
   27924:	ldr	r2, [r0, #36]	; 0x24
   27928:	ldr	r1, [r0]
   2792c:	cmp	r2, #0
   27930:	moveq	r2, #3
   27934:	streq	r2, [r0, #36]	; 0x24
   27938:	ldr	r2, [r0, #12]
   2793c:	sub	r3, r3, r1
   27940:	add	r3, r2, r3
   27944:	str	r3, [r0, #12]
   27948:	str	r1, [r0, #20]
   2794c:	ldr	r3, [r0, #20]
   27950:	mov	r2, #0
   27954:	strb	r2, [r3]
   27958:	bx	lr
   2795c:	ldr	r3, [r0, #20]
   27960:	ldr	ip, [r0, #16]
   27964:	push	{r4, r5, r6, r7, r8, lr}
   27968:	add	lr, r3, r2
   2796c:	cmp	ip, lr
   27970:	mov	r4, r0
   27974:	mov	r6, r2
   27978:	movhi	r0, r3
   2797c:	bhi	279bc <flatcc_json_parser_table_as_root@@Base+0xf30>
   27980:	cmp	r3, ip
   27984:	mov	r7, r1
   27988:	bcc	27998 <flatcc_json_parser_table_as_root@@Base+0xf0c>
   2798c:	ldr	r3, [r4, #44]	; 0x2c
   27990:	mov	r1, #0
   27994:	blx	r3
   27998:	ldr	r5, [r4, #16]
   2799c:	ldr	r3, [r4, #20]
   279a0:	mov	r8, #0
   279a4:	sub	r5, r5, r3
   279a8:	cmp	r5, r6
   279ac:	ldr	r0, [r4, #20]
   279b0:	bcc	279d0 <flatcc_json_parser_table_as_root@@Base+0xf44>
   279b4:	mov	r2, r6
   279b8:	mov	r1, r7
   279bc:	bl	14570 <memcpy@plt>
   279c0:	ldr	r3, [r4, #20]
   279c4:	add	r6, r3, r6
   279c8:	str	r6, [r4, #20]
   279cc:	pop	{r4, r5, r6, r7, r8, pc}
   279d0:	mov	r2, r5
   279d4:	mov	r1, r7
   279d8:	bl	14570 <memcpy@plt>
   279dc:	ldr	r3, [r4, #20]
   279e0:	mov	r1, r8
   279e4:	add	r3, r3, r5
   279e8:	str	r3, [r4, #20]
   279ec:	mov	r0, r4
   279f0:	ldr	r3, [r4, #44]	; 0x2c
   279f4:	blx	r3
   279f8:	add	r7, r7, r5
   279fc:	sub	r6, r6, r5
   27a00:	ldr	r3, [r4, #20]
   27a04:	ldr	r5, [r4, #16]
   27a08:	sub	r5, r5, r3
   27a0c:	b	279a8 <flatcc_json_parser_table_as_root@@Base+0xf1c>
   27a10:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27a14:	mov	sl, r2
   27a18:	ldr	r3, [r0, #20]
   27a1c:	mov	r4, r0
   27a20:	add	r2, r3, #1
   27a24:	mov	r7, #92	; 0x5c
   27a28:	mov	r8, #102	; 0x66
   27a2c:	mov	r9, #117	; 0x75
   27a30:	str	r2, [r0, #20]
   27a34:	mov	r2, #34	; 0x22
   27a38:	strb	r2, [r3]
   27a3c:	ldrb	r5, [r1]
   27a40:	mov	r6, r1
   27a44:	cmp	r5, #34	; 0x22
   27a48:	cmpne	r5, #31
   27a4c:	bls	27a58 <flatcc_json_parser_table_as_root@@Base+0xfcc>
   27a50:	cmp	r5, #92	; 0x5c
   27a54:	bne	27ac4 <flatcc_json_parser_table_as_root@@Base+0x1038>
   27a58:	sub	fp, r6, r1
   27a5c:	mov	r2, fp
   27a60:	mov	r0, r4
   27a64:	bl	2795c <flatcc_json_parser_table_as_root@@Base+0xed0>
   27a68:	ldr	r3, [r4, #20]
   27a6c:	subs	sl, sl, fp
   27a70:	add	r2, r3, #1
   27a74:	str	r2, [r4, #20]
   27a78:	beq	27bac <flatcc_json_parser_table_as_root@@Base+0x1120>
   27a7c:	strb	r7, [r3]
   27a80:	ldr	r3, [r4, #20]
   27a84:	cmp	r5, #12
   27a88:	addeq	r2, r3, #1
   27a8c:	streq	r2, [r4, #20]
   27a90:	strbeq	r8, [r3]
   27a94:	beq	27b00 <flatcc_json_parser_table_as_root@@Base+0x1074>
   27a98:	bhi	27acc <flatcc_json_parser_table_as_root@@Base+0x1040>
   27a9c:	cmp	r5, #9
   27aa0:	beq	27b0c <flatcc_json_parser_table_as_root@@Base+0x1080>
   27aa4:	cmp	r5, #10
   27aa8:	beq	27b20 <flatcc_json_parser_table_as_root@@Base+0x1094>
   27aac:	cmp	r5, #8
   27ab0:	bne	27b30 <flatcc_json_parser_table_as_root@@Base+0x10a4>
   27ab4:	add	r2, r3, #1
   27ab8:	str	r2, [r4, #20]
   27abc:	mov	r2, #98	; 0x62
   27ac0:	b	27b18 <flatcc_json_parser_table_as_root@@Base+0x108c>
   27ac4:	ldrb	r5, [r6, #1]!
   27ac8:	b	27a44 <flatcc_json_parser_table_as_root@@Base+0xfb8>
   27acc:	cmp	r5, #34	; 0x22
   27ad0:	beq	27af4 <flatcc_json_parser_table_as_root@@Base+0x1068>
   27ad4:	cmp	r5, #92	; 0x5c
   27ad8:	beq	27af4 <flatcc_json_parser_table_as_root@@Base+0x1068>
   27adc:	cmp	r5, #13
   27ae0:	bne	27b30 <flatcc_json_parser_table_as_root@@Base+0x10a4>
   27ae4:	add	r2, r3, #1
   27ae8:	str	r2, [r4, #20]
   27aec:	mov	r2, #114	; 0x72
   27af0:	b	27b18 <flatcc_json_parser_table_as_root@@Base+0x108c>
   27af4:	add	r2, r3, #1
   27af8:	str	r2, [r4, #20]
   27afc:	strb	r5, [r3]
   27b00:	sub	sl, sl, #1
   27b04:	add	r1, r6, #1
   27b08:	b	27a3c <flatcc_json_parser_table_as_root@@Base+0xfb0>
   27b0c:	add	r2, r3, #1
   27b10:	str	r2, [r4, #20]
   27b14:	mov	r2, #116	; 0x74
   27b18:	strb	r2, [r3]
   27b1c:	b	27b00 <flatcc_json_parser_table_as_root@@Base+0x1074>
   27b20:	add	r2, r3, #1
   27b24:	str	r2, [r4, #20]
   27b28:	mov	r2, #110	; 0x6e
   27b2c:	b	27b18 <flatcc_json_parser_table_as_root@@Base+0x108c>
   27b30:	add	r2, r3, #1
   27b34:	str	r2, [r4, #20]
   27b38:	strb	r9, [r3]
   27b3c:	ldr	r3, [r4, #20]
   27b40:	add	r2, r3, #1
   27b44:	str	r2, [r4, #20]
   27b48:	mov	r2, #48	; 0x30
   27b4c:	strb	r2, [r3]
   27b50:	ldr	r3, [r4, #20]
   27b54:	add	r1, r3, #1
   27b58:	str	r1, [r4, #20]
   27b5c:	lsr	r1, r5, #4
   27b60:	cmp	r1, #9
   27b64:	strb	r2, [r3]
   27b68:	movls	r3, r2
   27b6c:	ldr	r2, [r4, #20]
   27b70:	movhi	r3, #87	; 0x57
   27b74:	add	r3, r3, r1
   27b78:	add	r0, r2, #1
   27b7c:	and	r5, r5, #15
   27b80:	str	r0, [r4, #20]
   27b84:	cmp	r5, #9
   27b88:	strb	r3, [r2]
   27b8c:	ldr	r2, [r4, #20]
   27b90:	movls	r3, #48	; 0x30
   27b94:	movhi	r3, #87	; 0x57
   27b98:	add	r1, r2, #1
   27b9c:	add	r5, r3, r5
   27ba0:	str	r1, [r4, #20]
   27ba4:	strb	r5, [r2]
   27ba8:	b	27b00 <flatcc_json_parser_table_as_root@@Base+0x1074>
   27bac:	mov	r2, #34	; 0x22
   27bb0:	strb	r2, [r3]
   27bb4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27bb8:	ldr	r2, [r1]
   27bbc:	add	r1, r1, #4
   27bc0:	b	27a10 <flatcc_json_parser_table_as_root@@Base+0xf84>
   27bc4:	ldr	r3, [r0, #20]
   27bc8:	mov	ip, #34	; 0x22
   27bcc:	push	{r4, r5, r6, lr}
   27bd0:	mov	r4, r0
   27bd4:	strb	ip, [r3]
   27bd8:	ldrb	ip, [r0, #26]
   27bdc:	ldr	r3, [r0, #20]
   27be0:	ldr	lr, [r0, #16]
   27be4:	cmp	ip, #0
   27be8:	addeq	r3, r3, #1
   27bec:	add	ip, r3, r2
   27bf0:	cmp	lr, ip
   27bf4:	str	r3, [r0, #20]
   27bf8:	bls	27c38 <flatcc_json_parser_table_as_root@@Base+0x11ac>
   27bfc:	mov	r0, r3
   27c00:	mov	r5, r2
   27c04:	bl	14570 <memcpy@plt>
   27c08:	ldr	r2, [r4, #20]
   27c0c:	add	r2, r2, r5
   27c10:	str	r2, [r4, #20]
   27c14:	ldr	r3, [r4, #20]
   27c18:	mov	r2, #34	; 0x22
   27c1c:	strb	r2, [r3]
   27c20:	ldrb	r2, [r4, #26]
   27c24:	ldr	r3, [r4, #20]
   27c28:	cmp	r2, #0
   27c2c:	addeq	r3, r3, #1
   27c30:	str	r3, [r4, #20]
   27c34:	pop	{r4, r5, r6, pc}
   27c38:	bl	2795c <flatcc_json_parser_table_as_root@@Base+0xed0>
   27c3c:	b	27c14 <flatcc_json_parser_table_as_root@@Base+0x1188>
   27c40:	push	{r4, r5, r6, r7, r8, lr}
   27c44:	mov	r4, r0
   27c48:	ldrb	r3, [r0, #25]
   27c4c:	ldr	r5, [r0, #32]
   27c50:	ldr	r2, [r0, #16]
   27c54:	mul	r5, r5, r3
   27c58:	ldr	r3, [r0, #20]
   27c5c:	add	r1, r3, r5
   27c60:	cmp	r2, r1
   27c64:	movcs	r2, r5
   27c68:	movcs	r1, #32
   27c6c:	movcs	r0, r3
   27c70:	bcs	27cb0 <flatcc_json_parser_table_as_root@@Base+0x1224>
   27c74:	cmp	r3, r2
   27c78:	bcc	27c88 <flatcc_json_parser_table_as_root@@Base+0x11fc>
   27c7c:	ldr	r3, [r4, #44]	; 0x2c
   27c80:	mov	r1, #0
   27c84:	blx	r3
   27c88:	ldr	r6, [r4, #16]
   27c8c:	ldr	r3, [r4, #20]
   27c90:	mov	r7, #32
   27c94:	sub	r6, r6, r3
   27c98:	mov	r8, #0
   27c9c:	cmp	r6, r5
   27ca0:	bcc	27cc4 <flatcc_json_parser_table_as_root@@Base+0x1238>
   27ca4:	ldr	r0, [r4, #20]
   27ca8:	mov	r2, r5
   27cac:	mov	r1, #32
   27cb0:	bl	145e8 <memset@plt>
   27cb4:	ldr	r3, [r4, #20]
   27cb8:	add	r5, r3, r5
   27cbc:	str	r5, [r4, #20]
   27cc0:	pop	{r4, r5, r6, r7, r8, pc}
   27cc4:	mov	r2, r6
   27cc8:	mov	r1, r7
   27ccc:	ldr	r0, [r4, #20]
   27cd0:	bl	145e8 <memset@plt>
   27cd4:	ldr	r3, [r4, #20]
   27cd8:	mov	r1, r8
   27cdc:	add	r3, r3, r6
   27ce0:	str	r3, [r4, #20]
   27ce4:	mov	r0, r4
   27ce8:	ldr	r3, [r4, #44]	; 0x2c
   27cec:	blx	r3
   27cf0:	sub	r5, r5, r6
   27cf4:	ldr	r3, [r4, #20]
   27cf8:	ldr	r6, [r4, #16]
   27cfc:	sub	r6, r6, r3
   27d00:	b	27c9c <flatcc_json_parser_table_as_root@@Base+0x1210>
   27d04:	cmp	r1, #0
   27d08:	push	{r4, r5, r6, lr}
   27d0c:	mov	r4, r0
   27d10:	ldr	r1, [r0, #20]
   27d14:	bne	27d7c <flatcc_json_parser_table_as_root@@Base+0x12f0>
   27d18:	ldr	r5, [r0, #16]
   27d1c:	cmp	r1, r5
   27d20:	bcc	27d7c <flatcc_json_parser_table_as_root@@Base+0x12f0>
   27d24:	ldr	r3, [r0, #40]	; 0x28
   27d28:	sub	r5, r1, r5
   27d2c:	mov	r2, #1
   27d30:	ldr	r1, [r0, #8]
   27d34:	ldr	r0, [r0]
   27d38:	bl	14594 <fwrite@plt>
   27d3c:	ldr	r0, [r4]
   27d40:	ldr	r1, [r4, #8]
   27d44:	mov	r2, r5
   27d48:	add	r1, r0, r1
   27d4c:	bl	14570 <memcpy@plt>
   27d50:	ldr	r3, [r4, #12]
   27d54:	ldr	r1, [r4]
   27d58:	ldr	r2, [r4, #8]
   27d5c:	add	r1, r1, r5
   27d60:	add	r3, r3, r2
   27d64:	str	r1, [r4, #20]
   27d68:	str	r3, [r4, #12]
   27d6c:	ldr	r3, [r4, #20]
   27d70:	mov	r2, #0
   27d74:	strb	r2, [r3]
   27d78:	pop	{r4, r5, r6, pc}
   27d7c:	ldr	r0, [r4]
   27d80:	ldr	r3, [r4, #40]	; 0x28
   27d84:	sub	r5, r1, r0
   27d88:	mov	r1, r5
   27d8c:	mov	r2, #1
   27d90:	bl	14594 <fwrite@plt>
   27d94:	ldr	r1, [r4, #12]
   27d98:	ldr	r3, [r4]
   27d9c:	add	r1, r1, r5
   27da0:	str	r3, [r4, #20]
   27da4:	str	r1, [r4, #12]
   27da8:	b	27d6c <flatcc_json_parser_table_as_root@@Base+0x12e0>
   27dac:	push	{r4, r5, r6, lr}
   27db0:	mov	r2, #0
   27db4:	ldr	r5, [r0, #20]
   27db8:	ldr	r3, [r0]
   27dbc:	strb	r2, [r5]
   27dc0:	ldr	r1, [r0, #20]
   27dc4:	ldr	r2, [r0, #16]
   27dc8:	cmp	r1, r2
   27dcc:	popcc	{r4, r5, r6, pc}
   27dd0:	ldr	r1, [r0, #4]
   27dd4:	mov	r4, r0
   27dd8:	ldr	r0, [r0]
   27ddc:	lsl	r1, r1, #1
   27de0:	sub	r5, r5, r3
   27de4:	bl	14588 <realloc@plt>
   27de8:	cmp	r0, #0
   27dec:	bne	27e24 <flatcc_json_parser_table_as_root@@Base+0x1398>
   27df0:	ldr	r3, [r4, #36]	; 0x24
   27df4:	cmp	r3, #0
   27df8:	moveq	r3, #3
   27dfc:	streq	r3, [r4, #36]	; 0x24
   27e00:	ldr	r3, [r4, #12]
   27e04:	add	r5, r3, r5
   27e08:	ldr	r3, [r4]
   27e0c:	str	r5, [r4, #12]
   27e10:	str	r3, [r4, #20]
   27e14:	ldr	r3, [r4, #20]
   27e18:	mov	r2, #0
   27e1c:	strb	r2, [r3]
   27e20:	pop	{r4, r5, r6, pc}
   27e24:	ldr	r3, [r4, #4]
   27e28:	add	r5, r0, r5
   27e2c:	str	r0, [r4]
   27e30:	lsl	r3, r3, #1
   27e34:	str	r3, [r4, #4]
   27e38:	sub	r3, r3, #64	; 0x40
   27e3c:	add	r0, r0, r3
   27e40:	str	r3, [r4, #8]
   27e44:	str	r5, [r4, #20]
   27e48:	str	r0, [r4, #16]
   27e4c:	b	27e14 <flatcc_json_parser_table_as_root@@Base+0x1388>
   27e50:	ldr	r1, [r0, #20]
   27e54:	ldr	r2, [r0, #16]
   27e58:	cmp	r1, r2
   27e5c:	bxcc	lr
   27e60:	ldr	r3, [r0, #44]	; 0x2c
   27e64:	mov	r1, #0
   27e68:	bx	r3
   27e6c:	push	{r4, r5, r6, lr}
   27e70:	mov	r4, r0
   27e74:	ldrb	r3, [r0, #25]
   27e78:	mov	r5, r1
   27e7c:	mov	r6, r2
   27e80:	cmp	r3, #0
   27e84:	beq	27ee8 <flatcc_json_parser_table_as_root@@Base+0x145c>
   27e88:	ldr	r3, [r0, #20]
   27e8c:	add	r2, r3, #1
   27e90:	str	r2, [r0, #20]
   27e94:	mov	r2, #10
   27e98:	strb	r2, [r3]
   27e9c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   27ea0:	mov	r2, r6
   27ea4:	mov	r1, r5
   27ea8:	mov	r0, r4
   27eac:	bl	27bc4 <flatcc_json_parser_table_as_root@@Base+0x1138>
   27eb0:	ldr	r3, [r4, #20]
   27eb4:	add	r2, r3, #1
   27eb8:	str	r2, [r4, #20]
   27ebc:	mov	r2, #58	; 0x3a
   27ec0:	strb	r2, [r3]
   27ec4:	ldr	r3, [r4, #20]
   27ec8:	mov	r2, #32
   27ecc:	strb	r2, [r3]
   27ed0:	ldrb	r2, [r4, #25]
   27ed4:	ldr	r3, [r4, #20]
   27ed8:	cmp	r2, #0
   27edc:	addne	r3, r3, #1
   27ee0:	str	r3, [r4, #20]
   27ee4:	pop	{r4, r5, r6, pc}
   27ee8:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   27eec:	b	27ea0 <flatcc_json_parser_table_as_root@@Base+0x1414>
   27ef0:	cmp	r0, #99	; 0x63
   27ef4:	push	{r4, r5, r6, lr}
   27ef8:	mov	r2, #0
   27efc:	mov	r4, r0
   27f00:	bls	27f4c <flatcc_json_parser_table_as_root@@Base+0x14c0>
   27f04:	mov	r5, r1
   27f08:	strb	r2, [r1, #3]
   27f0c:	mov	r1, #100	; 0x64
   27f10:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   27f14:	ldr	r6, [pc, #116]	; 27f90 <flatcc_json_parser_table_as_root@@Base+0x1504>
   27f18:	mov	r0, r4
   27f1c:	uxtb	r1, r1
   27f20:	ldrb	r2, [r6, r1, lsl #1]
   27f24:	add	r3, r6, r1, lsl #1
   27f28:	mov	r1, #100	; 0x64
   27f2c:	strb	r2, [r5, #1]
   27f30:	ldrb	r3, [r3, #1]
   27f34:	strb	r3, [r5, #2]
   27f38:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   27f3c:	add	r0, r0, #48	; 0x30
   27f40:	strb	r0, [r5]
   27f44:	mov	r0, #3
   27f48:	pop	{r4, r5, r6, pc}
   27f4c:	cmp	r0, #9
   27f50:	bls	27f7c <flatcc_json_parser_table_as_root@@Base+0x14f0>
   27f54:	strb	r2, [r1, #2]
   27f58:	ldr	r2, [pc, #48]	; 27f90 <flatcc_json_parser_table_as_root@@Base+0x1504>
   27f5c:	sxth	r3, r0
   27f60:	add	r0, r2, r3, lsl #1
   27f64:	ldrb	r3, [r2, r3, lsl #1]
   27f68:	strb	r3, [r1]
   27f6c:	ldrb	r3, [r0, #1]
   27f70:	mov	r0, #2
   27f74:	strb	r3, [r1, #1]
   27f78:	pop	{r4, r5, r6, pc}
   27f7c:	add	r3, r0, #48	; 0x30
   27f80:	strb	r2, [r1, #1]
   27f84:	strb	r3, [r1]
   27f88:	mov	r0, #1
   27f8c:	pop	{r4, r5, r6, pc}
   27f90:	andeq	r3, r3, r8, lsl #2
   27f94:	cmp	r0, #0
   27f98:	push	{r4, lr}
   27f9c:	lsr	r4, r0, #31
   27fa0:	rsblt	r0, r0, #0
   27fa4:	movlt	r3, #45	; 0x2d
   27fa8:	sxtblt	r0, r0
   27fac:	strblt	r3, [r1]
   27fb0:	uxtb	r0, r0
   27fb4:	addlt	r1, r1, #1
   27fb8:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   27fbc:	add	r0, r4, r0
   27fc0:	pop	{r4, pc}
   27fc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27fc8:	mov	r6, r2
   27fcc:	ldr	lr, [sp, #48]	; 0x30
   27fd0:	ldrd	r4, [sp, #44]	; 0x2c
   27fd4:	mov	r5, #0
   27fd8:	umull	sl, fp, r2, lr
   27fdc:	mul	r2, r2, r5
   27fe0:	mov	r7, #0
   27fe4:	umull	r8, r9, r3, r4
   27fe8:	mla	fp, lr, r7, fp
   27fec:	mla	r2, r4, r7, r2
   27ff0:	umull	r6, r7, r6, r4
   27ff4:	mla	lr, r3, r5, r9
   27ff8:	add	r4, r2, r7
   27ffc:	mov	ip, #0
   28000:	adds	r4, r4, r8
   28004:	adc	r5, ip, #0
   28008:	adds	r4, r4, #-2147483648	; 0x80000000
   2800c:	adc	r5, r5, #0
   28010:	adds	r4, r4, sl
   28014:	adc	r5, r5, #0
   28018:	adds	r4, lr, fp
   2801c:	mov	r6, r5
   28020:	mov	r7, ip
   28024:	adc	r5, ip, ip
   28028:	mov	r9, ip
   2802c:	ldr	ip, [sp, #48]	; 0x30
   28030:	ldr	r2, [sp, #52]	; 0x34
   28034:	mov	r8, fp
   28038:	umlal	r4, r5, ip, r3
   2803c:	ldr	r3, [sp, #36]	; 0x24
   28040:	adds	r4, r4, r6
   28044:	adc	r5, r5, r7
   28048:	add	r3, r3, r2
   2804c:	add	r3, r3, #64	; 0x40
   28050:	strd	r4, [r0]
   28054:	str	r3, [r0, #8]
   28058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2805c:	push	{r4, lr}
   28060:	mov	r2, #239	; 0xef
   28064:	ldr	r3, [pc, #8]	; 28074 <flatcc_json_parser_table_as_root@@Base+0x15e8>
   28068:	ldr	r1, [pc, #8]	; 28078 <flatcc_json_parser_table_as_root@@Base+0x15ec>
   2806c:	ldr	r0, [pc, #8]	; 2807c <flatcc_json_parser_table_as_root@@Base+0x15f0>
   28070:	bl	14648 <__assert_fail@plt>
   28074:	andeq	r3, r3, r9, ror #3
   28078:	andeq	r2, r3, r3, lsl sp
   2807c:	andeq	r3, r3, ip, asr #16
   28080:	cmp	r0, #0
   28084:	movne	r0, #4
   28088:	ldrne	r3, [pc, #40]	; 280b8 <flatcc_json_parser_table_as_root@@Base+0x162c>
   2808c:	ldreq	r3, [pc, #40]	; 280bc <flatcc_json_parser_table_as_root@@Base+0x1630>
   28090:	moveq	r0, #5
   28094:	ldrne	r2, [r3]
   28098:	ldreq	r2, [r3]
   2809c:	ldrbne	r3, [r3, #4]
   280a0:	ldrheq	r3, [r3, #4]
   280a4:	strne	r2, [r1]
   280a8:	strbne	r3, [r1, #4]
   280ac:	streq	r2, [r1]
   280b0:	strheq	r3, [r1, #4]
   280b4:	bx	lr
   280b8:	strdeq	r3, [r3], -sp
   280bc:	andeq	r3, r3, r3, lsl #4
   280c0:	subs	r2, r2, #1
   280c4:	push	{r4, lr}
   280c8:	mov	r4, r0
   280cc:	sub	sp, sp, #24
   280d0:	bne	280ec <flatcc_json_parser_table_as_root@@Base+0x1660>
   280d4:	ldr	r3, [r0, #36]	; 0x24
   280d8:	cmp	r3, #0
   280dc:	moveq	r3, #2
   280e0:	streq	r3, [r0, #36]	; 0x24
   280e4:	add	sp, sp, #24
   280e8:	pop	{r4, pc}
   280ec:	ldr	ip, [r0, #32]
   280f0:	add	ip, ip, #1
   280f4:	str	ip, [r0, #32]
   280f8:	ldr	ip, [r0, #20]
   280fc:	add	lr, ip, #1
   28100:	str	lr, [r0, #20]
   28104:	mov	lr, #123	; 0x7b
   28108:	strb	lr, [ip]
   2810c:	str	r2, [sp, #16]
   28110:	ldr	r2, [r1]
   28114:	str	r1, [sp, #4]
   28118:	sub	r1, r1, r2
   2811c:	mov	ip, #0
   28120:	ldrh	r2, [r1]
   28124:	str	r1, [sp, #8]
   28128:	add	r1, sp, #4
   2812c:	str	ip, [sp, #20]
   28130:	str	r2, [sp, #12]
   28134:	blx	r3
   28138:	ldrb	r3, [r4, #25]
   2813c:	cmp	r3, #0
   28140:	beq	2816c <flatcc_json_parser_table_as_root@@Base+0x16e0>
   28144:	ldr	r3, [r4, #20]
   28148:	mov	r0, r4
   2814c:	add	r2, r3, #1
   28150:	str	r2, [r4, #20]
   28154:	mov	r2, #10
   28158:	strb	r2, [r3]
   2815c:	ldr	r3, [r4, #32]
   28160:	sub	r3, r3, #1
   28164:	str	r3, [r4, #32]
   28168:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2816c:	ldr	r3, [r4, #20]
   28170:	add	r2, r3, #1
   28174:	str	r2, [r4, #20]
   28178:	mov	r2, #125	; 0x7d
   2817c:	strb	r2, [r3]
   28180:	b	280e4 <flatcc_json_parser_table_as_root@@Base+0x1658>
   28184:	push	{r0, r1, r2, r4, r5, lr}
   28188:	mov	r4, r0
   2818c:	mov	r0, #0
   28190:	cmp	r1, r0
   28194:	cmpne	r2, #7
   28198:	str	r0, [sp, #4]
   2819c:	bhi	281c4 <flatcc_json_parser_table_as_root@@Base+0x1738>
   281a0:	ldr	r3, [r4, #36]	; 0x24
   281a4:	ldr	r2, [pc, #120]	; 28224 <flatcc_json_parser_table_as_root@@Base+0x1798>
   281a8:	cmp	r3, r0
   281ac:	moveq	r3, #1
   281b0:	streq	r3, [r4, #36]	; 0x24
   281b4:	ldr	r1, [pc, #108]	; 28228 <flatcc_json_parser_table_as_root@@Base+0x179c>
   281b8:	ldr	r3, [pc, #108]	; 2822c <flatcc_json_parser_table_as_root@@Base+0x17a0>
   281bc:	ldr	r0, [pc, #108]	; 28230 <flatcc_json_parser_table_as_root@@Base+0x17a4>
   281c0:	bl	14648 <__assert_fail@plt>
   281c4:	cmp	r3, #0
   281c8:	beq	28218 <flatcc_json_parser_table_as_root@@Base+0x178c>
   281cc:	mov	r2, #4
   281d0:	mov	r5, r1
   281d4:	add	r0, sp, r2
   281d8:	mov	r1, r3
   281dc:	bl	145f4 <strncpy@plt>
   281e0:	ldr	r3, [sp, #4]
   281e4:	ldr	r2, [r5, #4]
   281e8:	cmp	r2, r3
   281ec:	cmpne	r3, #0
   281f0:	beq	28218 <flatcc_json_parser_table_as_root@@Base+0x178c>
   281f4:	ldr	r3, [r4, #36]	; 0x24
   281f8:	ldr	r2, [pc, #52]	; 28234 <flatcc_json_parser_table_as_root@@Base+0x17a8>
   281fc:	cmp	r3, #0
   28200:	moveq	r3, #1
   28204:	streq	r3, [r4, #36]	; 0x24
   28208:	ldr	r1, [pc, #24]	; 28228 <flatcc_json_parser_table_as_root@@Base+0x179c>
   2820c:	ldr	r3, [pc, #24]	; 2822c <flatcc_json_parser_table_as_root@@Base+0x17a0>
   28210:	ldr	r0, [pc, #32]	; 28238 <flatcc_json_parser_table_as_root@@Base+0x17ac>
   28214:	b	281c0 <flatcc_json_parser_table_as_root@@Base+0x1734>
   28218:	mov	r0, #1
   2821c:	add	sp, sp, #12
   28220:	pop	{r4, r5, pc}
   28224:	strdeq	r0, [r0], -fp
   28228:	andeq	r3, r3, r5, ror #16
   2822c:	andeq	r3, r3, sl, lsl #4
   28230:			; <UNDEFINED> instruction: 0x000338b0
   28234:	andeq	r0, r0, r4, lsl #8
   28238:	andeq	r3, r3, pc, asr #17
   2823c:	cmp	r2, #0
   28240:	beq	2839c <flatcc_json_parser_table_as_root@@Base+0x1910>
   28244:	push	{r4, r5, lr}
   28248:	bics	lr, r3, #224	; 0xe0
   2824c:	ldr	ip, [r2]
   28250:	beq	28264 <flatcc_json_parser_table_as_root@@Base+0x17d8>
   28254:	cmp	lr, #1
   28258:	beq	282f0 <flatcc_json_parser_table_as_root@@Base+0x1864>
   2825c:	mov	r0, #3
   28260:	b	282e0 <flatcc_json_parser_table_as_root@@Base+0x1854>
   28264:	ldr	lr, [pc, #312]	; 283a4 <flatcc_json_parser_table_as_root@@Base+0x1918>
   28268:	cmp	ip, #2
   2826c:	mov	r4, r0
   28270:	mov	r5, r1
   28274:	add	r0, r0, #4
   28278:	add	r1, r1, #3
   2827c:	bhi	282f8 <flatcc_json_parser_table_as_root@@Base+0x186c>
   28280:	cmp	ip, #1
   28284:	and	r3, r3, #128	; 0x80
   28288:	beq	28368 <flatcc_json_parser_table_as_root@@Base+0x18dc>
   2828c:	cmp	ip, #2
   28290:	bne	2835c <flatcc_json_parser_table_as_root@@Base+0x18d0>
   28294:	ldrb	r1, [r5]
   28298:	cmp	r3, #0
   2829c:	ldrb	r1, [lr, r1, lsr #2]
   282a0:	strb	r1, [r4]
   282a4:	ldrb	r1, [r5]
   282a8:	ldrb	r0, [r5, #1]
   282ac:	lsl	r1, r1, #4
   282b0:	and	r1, r1, #48	; 0x30
   282b4:	orr	r1, r1, r0, lsr #4
   282b8:	ldrb	r1, [lr, r1]
   282bc:	strb	r1, [r4, #1]
   282c0:	ldrb	r1, [r5, #1]
   282c4:	lsl	r1, r1, #2
   282c8:	and	r1, r1, #60	; 0x3c
   282cc:	ldrb	r1, [lr, r1]
   282d0:	strb	r1, [r4, #2]
   282d4:	bne	28354 <flatcc_json_parser_table_as_root@@Base+0x18c8>
   282d8:	mov	r0, #0
   282dc:	mov	ip, r0
   282e0:	ldr	r3, [r2]
   282e4:	sub	ip, r3, ip
   282e8:	str	ip, [r2]
   282ec:	pop	{r4, r5, pc}
   282f0:	ldr	lr, [pc, #176]	; 283a8 <flatcc_json_parser_table_as_root@@Base+0x191c>
   282f4:	b	28268 <flatcc_json_parser_table_as_root@@Base+0x17dc>
   282f8:	ldrb	r4, [r1, #-3]
   282fc:	sub	ip, ip, #3
   28300:	ldrb	r4, [lr, r4, lsr #2]
   28304:	strb	r4, [r0, #-4]
   28308:	ldrb	r4, [r1, #-3]
   2830c:	ldrb	r5, [r1, #-2]
   28310:	lsl	r4, r4, #4
   28314:	and	r4, r4, #48	; 0x30
   28318:	orr	r4, r4, r5, lsr #4
   2831c:	ldrb	r4, [lr, r4]
   28320:	strb	r4, [r0, #-3]
   28324:	ldrb	r4, [r1, #-2]
   28328:	ldrb	r5, [r1, #-1]
   2832c:	lsl	r4, r4, #2
   28330:	and	r4, r4, #60	; 0x3c
   28334:	orr	r4, r4, r5, lsr #6
   28338:	ldrb	r4, [lr, r4]
   2833c:	strb	r4, [r0, #-2]
   28340:	ldrb	r4, [r1, #-1]
   28344:	and	r4, r4, #63	; 0x3f
   28348:	ldrb	r4, [lr, r4]
   2834c:	strb	r4, [r0, #-1]
   28350:	b	28268 <flatcc_json_parser_table_as_root@@Base+0x17dc>
   28354:	mov	r3, #61	; 0x3d
   28358:	strb	r3, [r4, #3]
   2835c:	mov	ip, #0
   28360:	mov	r0, ip
   28364:	b	282e0 <flatcc_json_parser_table_as_root@@Base+0x1854>
   28368:	ldrb	r1, [r5]
   2836c:	cmp	r3, #0
   28370:	ldrb	r1, [lr, r1, lsr #2]
   28374:	strb	r1, [r4]
   28378:	ldrb	r1, [r5]
   2837c:	lsl	r1, r1, #4
   28380:	and	r1, r1, #48	; 0x30
   28384:	ldrb	r1, [lr, r1]
   28388:	strb	r1, [r4, #1]
   2838c:	beq	282d8 <flatcc_json_parser_table_as_root@@Base+0x184c>
   28390:	mov	r3, #61	; 0x3d
   28394:	strb	r3, [r4, #2]
   28398:	b	28358 <flatcc_json_parser_table_as_root@@Base+0x18cc>
   2839c:	mov	r0, #2
   283a0:	bx	lr
   283a4:	andeq	r3, r3, sl, ror #17
   283a8:	andeq	r3, r3, fp, lsr #18
   283ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   283b0:	vpush	{d8}
   283b4:	subs	r3, r0, #0
   283b8:	sub	sp, sp, #172	; 0xac
   283bc:	vstr	d0, [sp, #48]	; 0x30
   283c0:	ldrd	r6, [sp, #48]	; 0x30
   283c4:	str	r3, [sp, #104]	; 0x68
   283c8:	bne	283e0 <flatcc_json_parser_table_as_root@@Base+0x1954>
   283cc:	ldr	r3, [pc, #1068]	; 28800 <flatcc_json_parser_table_as_root@@Base+0x1d74>
   283d0:	ldr	r1, [pc, #1068]	; 28804 <flatcc_json_parser_table_as_root@@Base+0x1d78>
   283d4:	ldr	r0, [pc, #1068]	; 28808 <flatcc_json_parser_table_as_root@@Base+0x1d7c>
   283d8:	mov	r2, #189	; 0xbd
   283dc:	bl	14648 <__assert_fail@plt>
   283e0:	adds	r4, r6, r6
   283e4:	ldr	r3, [pc, #1056]	; 2880c <flatcc_json_parser_table_as_root@@Base+0x1d80>
   283e8:	adc	r5, r7, r7
   283ec:	mov	r2, #0
   283f0:	cmp	r5, r3
   283f4:	cmpeq	r4, r2
   283f8:	bls	28418 <flatcc_json_parser_table_as_root@@Base+0x198c>
   283fc:	mov	r3, r6
   28400:	mov	r2, r7
   28404:	ldr	r1, [pc, #1028]	; 28810 <flatcc_json_parser_table_as_root@@Base+0x1d84>
   28408:	add	sp, sp, #172	; 0xac
   2840c:	vpop	{d8}
   28410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28414:	b	14624 <sprintf@plt>
   28418:	cmp	r6, #0
   2841c:	sbcs	r3, r7, #0
   28420:	addlt	r7, r7, #-2147483648	; 0x80000000
   28424:	vldrlt	d7, [sp, #48]	; 0x30
   28428:	ldrlt	r3, [sp, #104]	; 0x68
   2842c:	ldrlt	r2, [sp, #104]	; 0x68
   28430:	addlt	r5, r3, #1
   28434:	vneglt.f64	d7, d7
   28438:	movlt	r3, #45	; 0x2d
   2843c:	strblt	r3, [r2]
   28440:	ldrge	r5, [sp, #104]	; 0x68
   28444:	vstrlt	d7, [sp, #48]	; 0x30
   28448:	orrs	r3, r6, r7
   2844c:	bne	28474 <flatcc_json_parser_table_as_root@@Base+0x19e8>
   28450:	mov	r3, #48	; 0x30
   28454:	strb	r3, [r5]
   28458:	mov	r3, #0
   2845c:	strb	r3, [r5, #1]!
   28460:	ldr	r3, [sp, #104]	; 0x68
   28464:	sub	r0, r5, r3
   28468:	add	sp, sp, #172	; 0xac
   2846c:	vpop	{d8}
   28470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28474:	ldr	r3, [pc, #920]	; 28814 <flatcc_json_parser_table_as_root@@Base+0x1d88>
   28478:	mov	r2, #0
   2847c:	cmp	r7, r3
   28480:	cmpeq	r6, r2
   28484:	bne	284ac <flatcc_json_parser_table_as_root@@Base+0x1a20>
   28488:	mov	r3, #105	; 0x69
   2848c:	strb	r3, [r5]
   28490:	mov	r3, #110	; 0x6e
   28494:	strb	r3, [r5, #1]
   28498:	mov	r3, #102	; 0x66
   2849c:	strb	r3, [r5, #2]
   284a0:	mov	r3, #0
   284a4:	strb	r3, [r5, #3]!
   284a8:	b	28460 <flatcc_json_parser_table_as_root@@Base+0x19d4>
   284ac:	ldrd	r0, [sp, #48]	; 0x30
   284b0:	ldr	r9, [pc, #864]	; 28818 <flatcc_json_parser_table_as_root@@Base+0x1d8c>
   284b4:	mvn	r8, #0
   284b8:	strd	r0, [sp, #32]
   284bc:	and	r0, r0, r2
   284c0:	and	r1, r1, r3
   284c4:	mov	r2, r0
   284c8:	mov	r3, r1
   284cc:	orrs	r3, r2, r3
   284d0:	ldrd	r2, [sp, #32]
   284d4:	strd	r0, [sp, #64]	; 0x40
   284d8:	and	r2, r2, r8
   284dc:	and	r3, r3, r9
   284e0:	mov	r8, r2
   284e4:	mov	r9, r3
   284e8:	bne	284fc <flatcc_json_parser_table_as_root@@Base+0x1a70>
   284ec:	orrs	r3, r8, r9
   284f0:	ldrne	ip, [pc, #804]	; 2881c <flatcc_json_parser_table_as_root@@Base+0x1d90>
   284f4:	bne	28518 <flatcc_json_parser_table_as_root@@Base+0x1a8c>
   284f8:	bl	14794 <__assert_fail@plt+0x14c>
   284fc:	adds	r8, r2, #0
   28500:	adc	r9, r3, #1048576	; 0x100000
   28504:	ldr	r3, [sp, #36]	; 0x24
   28508:	ldr	ip, [pc, #784]	; 28820 <flatcc_json_parser_table_as_root@@Base+0x1d94>
   2850c:	and	ip, ip, r3, lsr #20
   28510:	sub	ip, ip, #1072	; 0x430
   28514:	sub	ip, ip, #3
   28518:	ldr	r1, [pc, #772]	; 28824 <flatcc_json_parser_table_as_root@@Base+0x1d98>
   2851c:	mov	lr, ip
   28520:	mov	r6, r8
   28524:	mov	r7, r9
   28528:	mov	r0, #0
   2852c:	and	r2, r6, r0
   28530:	and	r3, r7, r1
   28534:	orrs	r3, r2, r3
   28538:	sub	r4, lr, #10
   2853c:	beq	285e0 <flatcc_json_parser_table_as_root@@Base+0x1b54>
   28540:	cmp	r6, #0
   28544:	sbcs	r3, r7, #0
   28548:	str	lr, [sp, #40]	; 0x28
   2854c:	sub	lr, lr, #1
   28550:	bge	285fc <flatcc_json_parser_table_as_root@@Base+0x1b70>
   28554:	adds	r2, r8, r8
   28558:	adc	r3, r9, r9
   2855c:	adds	sl, r2, #1
   28560:	strd	r2, [sp, #72]	; 0x48
   28564:	adc	fp, r3, #0
   28568:	sub	r3, ip, #1
   2856c:	mov	lr, r3
   28570:	str	r3, [sp, #56]	; 0x38
   28574:	ldr	r1, [pc, #680]	; 28824 <flatcc_json_parser_table_as_root@@Base+0x1d98>
   28578:	mov	r0, #0
   2857c:	and	r0, r0, sl
   28580:	and	r1, r1, fp
   28584:	orrs	r3, r0, r1
   28588:	sub	r4, lr, #10
   2858c:	beq	28608 <flatcc_json_parser_table_as_root@@Base+0x1b7c>
   28590:	cmp	sl, #0
   28594:	sbcs	r3, fp, #0
   28598:	mov	r4, lr
   2859c:	sub	lr, lr, #1
   285a0:	bge	28624 <flatcc_json_parser_table_as_root@@Base+0x1b98>
   285a4:	vldr	d8, [pc, #572]	; 287e8 <flatcc_json_parser_table_as_root@@Base+0x1d5c>
   285a8:	vldr	d7, [sp, #48]	; 0x30
   285ac:	vcmpe.f64	d7, d8
   285b0:	vmrs	APSR_nzcv, fpscr
   285b4:	ble	285cc <flatcc_json_parser_table_as_root@@Base+0x1b40>
   285b8:	vldr	d7, [pc, #560]	; 287f0 <flatcc_json_parser_table_as_root@@Base+0x1d64>
   285bc:	vldr	d6, [sp, #48]	; 0x30
   285c0:	vcmpe.f64	d6, d7
   285c4:	vmrs	APSR_nzcv, fpscr
   285c8:	bls	28630 <flatcc_json_parser_table_as_root@@Base+0x1ba4>
   285cc:	ldr	r3, [pc, #596]	; 28828 <flatcc_json_parser_table_as_root@@Base+0x1d9c>
   285d0:	mov	r2, #138	; 0x8a
   285d4:	ldr	r1, [pc, #552]	; 28804 <flatcc_json_parser_table_as_root@@Base+0x1d78>
   285d8:	ldr	r0, [pc, #588]	; 2882c <flatcc_json_parser_table_as_root@@Base+0x1da0>
   285dc:	b	283dc <flatcc_json_parser_table_as_root@@Base+0x1950>
   285e0:	lsl	r3, r7, #10
   285e4:	orr	r3, r3, r6, lsr #22
   285e8:	lsl	r2, r6, #10
   285ec:	mov	r6, r2
   285f0:	mov	r7, r3
   285f4:	mov	lr, r4
   285f8:	b	2852c <flatcc_json_parser_table_as_root@@Base+0x1aa0>
   285fc:	adds	r6, r6, r6
   28600:	adc	r7, r7, r7
   28604:	b	28540 <flatcc_json_parser_table_as_root@@Base+0x1ab4>
   28608:	lsl	r1, fp, #10
   2860c:	orr	r1, r1, sl, lsr #22
   28610:	lsl	r0, sl, #10
   28614:	mov	sl, r0
   28618:	mov	fp, r1
   2861c:	mov	lr, r4
   28620:	b	28574 <flatcc_json_parser_table_as_root@@Base+0x1ae8>
   28624:	adds	sl, sl, sl
   28628:	adc	fp, fp, fp
   2862c:	b	28590 <flatcc_json_parser_table_as_root@@Base+0x1b04>
   28630:	ldrd	r2, [sp, #32]
   28634:	ldr	r1, [pc, #476]	; 28818 <flatcc_json_parser_table_as_root@@Base+0x1d8c>
   28638:	mvn	r0, #0
   2863c:	and	r3, r3, r1
   28640:	ldr	r1, [sp, #68]	; 0x44
   28644:	and	r2, r2, r0
   28648:	adds	r1, r1, #0
   2864c:	orr	r0, r2, r3
   28650:	movne	r1, #1
   28654:	cmp	r0, #0
   28658:	movne	r1, #0
   2865c:	cmp	r1, #0
   28660:	beq	287d8 <flatcc_json_parser_table_as_root@@Base+0x1d4c>
   28664:	lsl	r1, r9, #2
   28668:	lsl	r0, r8, #2
   2866c:	orr	r1, r1, r8, lsr #30
   28670:	subs	r0, r0, #1
   28674:	sbc	r1, r1, #0
   28678:	sub	r3, ip, #2
   2867c:	str	r3, [sp, #56]	; 0x38
   28680:	ldr	r3, [sp, #56]	; 0x38
   28684:	sub	r2, r3, r4
   28688:	bl	2ddac <flatcc_json_printer_clear@@Base+0x4a0>
   2868c:	ldr	r3, [sp, #40]	; 0x28
   28690:	mvn	r2, #60	; 0x3c
   28694:	sub	r2, r2, r3
   28698:	vldr	d6, [pc, #344]	; 287f8 <flatcc_json_parser_table_as_root@@Base+0x1d6c>
   2869c:	vmov	s15, r2
   286a0:	vcvt.f64.s32	d7, s15
   286a4:	vmul.f64	d7, d7, d6
   286a8:	vcvt.s32.f64	s13, d7
   286ac:	vcmpe.f64	d7, d8
   286b0:	vmrs	APSR_nzcv, fpscr
   286b4:	strd	r0, [sp, #56]	; 0x38
   286b8:	vmov	r1, s13
   286bc:	bmi	286d4 <flatcc_json_parser_table_as_root@@Base+0x1c48>
   286c0:	vcvt.f64.s32	d6, s13
   286c4:	vsub.f64	d7, d7, d6
   286c8:	vcmp.f64	d7, d8
   286cc:	vmrs	APSR_nzcv, fpscr
   286d0:	addne	r1, r1, #1
   286d4:	add	r1, r1, #344	; 0x158
   286d8:	adds	r2, r1, #3
   286dc:	addmi	r2, r1, #10
   286e0:	ldr	r8, [pc, #328]	; 28830 <flatcc_json_parser_table_as_root@@Base+0x1da4>
   286e4:	asr	r2, r2, #3
   286e8:	add	r2, r2, #1
   286ec:	add	r0, r8, #304	; 0x130
   286f0:	lsl	r2, r2, #4
   286f4:	add	r1, r0, r2
   286f8:	ldrd	r2, [r2, r0]
   286fc:	ldrsh	r9, [r1, #8]
   28700:	add	r0, sp, #120	; 0x78
   28704:	strd	r2, [sp, #32]
   28708:	ldrsh	r3, [r1, #10]
   2870c:	str	r9, [sp, #16]
   28710:	str	r3, [sp, #108]	; 0x6c
   28714:	ldrd	r2, [sp, #32]
   28718:	strd	r2, [sp, #8]
   2871c:	ldr	r3, [sp, #40]	; 0x28
   28720:	mov	r2, r6
   28724:	str	r3, [sp]
   28728:	mov	r3, r7
   2872c:	bl	27fc4 <flatcc_json_parser_table_as_root@@Base+0x1538>
   28730:	ldrd	r2, [sp, #120]	; 0x78
   28734:	str	r4, [sp]
   28738:	add	r0, sp, #152	; 0x98
   2873c:	strd	r2, [sp, #64]	; 0x40
   28740:	ldr	r3, [sp, #128]	; 0x80
   28744:	str	r9, [sp, #16]
   28748:	str	r3, [sp, #72]	; 0x48
   2874c:	ldrd	r2, [sp, #32]
   28750:	strd	r2, [sp, #8]
   28754:	ldrd	r2, [sp, #56]	; 0x38
   28758:	bl	27fc4 <flatcc_json_parser_table_as_root@@Base+0x1538>
   2875c:	ldr	r3, [sp, #160]	; 0xa0
   28760:	str	r4, [sp]
   28764:	str	r3, [sp, #56]	; 0x38
   28768:	ldrd	r2, [sp, #32]
   2876c:	ldrd	r6, [sp, #152]	; 0x98
   28770:	add	r0, sp, #136	; 0x88
   28774:	strd	r2, [sp, #8]
   28778:	str	r9, [sp, #16]
   2877c:	mov	r2, sl
   28780:	mov	r3, fp
   28784:	bl	27fc4 <flatcc_json_parser_table_as_root@@Base+0x1538>
   28788:	ldrd	r2, [sp, #136]	; 0x88
   2878c:	subs	r6, r6, #1
   28790:	sbc	r7, r7, #0
   28794:	adds	r0, r2, #1
   28798:	adc	r1, r3, #0
   2879c:	subs	r2, r0, r6
   287a0:	sbc	r3, r1, r7
   287a4:	cmp	r7, r1
   287a8:	cmpeq	r6, r0
   287ac:	ldr	sl, [sp, #144]	; 0x90
   287b0:	strd	r2, [sp, #32]
   287b4:	ldr	r3, [sp, #56]	; 0x38
   287b8:	movhi	r4, #1
   287bc:	movls	r4, #0
   287c0:	cmp	r3, sl
   287c4:	orrne	r4, r4, #1
   287c8:	cmp	r4, #0
   287cc:	strd	r0, [sp, #40]	; 0x28
   287d0:	beq	2883c <flatcc_json_parser_table_as_root@@Base+0x1db0>
   287d4:	bl	2805c <flatcc_json_parser_table_as_root@@Base+0x15d0>
   287d8:	ldrd	r0, [sp, #72]	; 0x48
   287dc:	subs	r0, r0, #1
   287e0:	sbc	r1, r1, #0
   287e4:	b	28680 <flatcc_json_parser_table_as_root@@Base+0x1bf4>
	...
   287f0:			; <UNDEFINED> instruction: 0xffffffff
   287f4:	svcvc	0x00efffff
   287f8:			; <UNDEFINED> instruction: 0x509f79fe
   287fc:	svccc	0x00d34413
   28800:	andeq	r3, r3, r8, lsl r2
   28804:	andeq	r3, r3, ip, ror #18
   28808:	andeq	r3, r3, r3, asr #19
   2880c:			; <UNDEFINED> instruction: 0xffe00000
   28810:	andeq	r3, r3, r7, asr #19
   28814:	svcvc	0x00f00000	; IMB
   28818:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   2881c:			; <UNDEFINED> instruction: 0xfffffbce
   28820:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   28824:			; <UNDEFINED> instruction: 0xffc00000
   28828:	andeq	r3, r3, ip, lsr #4
   2882c:	ldrdeq	r3, [r3], -r5
   28830:	andeq	r3, r3, r8, lsl #2
   28834:	ldrdeq	r0, [r0], -r1
   28838:	strdeq	r3, [r3], -sl
   2883c:	ldr	r3, [sp, #72]	; 0x48
   28840:	mov	r0, #1
   28844:	rsb	r7, r3, #0
   28848:	mov	r2, r7
   2884c:	mov	r1, #0
   28850:	bl	2ddac <flatcc_json_printer_clear@@Base+0x4a0>
   28854:	mov	r2, r7
   28858:	strd	r0, [sp, #88]	; 0x58
   2885c:	ldrd	r0, [sp, #40]	; 0x28
   28860:	bl	2dd90 <flatcc_json_printer_clear@@Base+0x484>
   28864:	ldrd	r2, [sp, #88]	; 0x58
   28868:	subs	r2, r2, #1
   2886c:	sbc	r3, r3, #0
   28870:	strd	r2, [sp, #96]	; 0x60
   28874:	ldrd	r2, [sp, #40]	; 0x28
   28878:	mov	r9, r0
   2887c:	ldrd	r0, [sp, #96]	; 0x60
   28880:	and	r2, r2, r0
   28884:	and	r3, r3, r1
   28888:	strd	r2, [sp, #56]	; 0x38
   2888c:	ldr	r3, [sp, #72]	; 0x48
   28890:	add	r2, r3, #65	; 0x41
   28894:	ldr	r3, [pc, #-104]	; 28834 <flatcc_json_parser_table_as_root@@Base+0x1da8>
   28898:	mul	r3, r3, r2
   2889c:	asr	r3, r3, #12
   288a0:	add	r6, r3, #1
   288a4:	add	r2, r8, r6, lsl #2
   288a8:	ldr	r2, [r2, #1696]	; 0x6a0
   288ac:	cmp	r9, r2
   288b0:	movcc	r6, r3
   288b4:	add	r8, r8, r6, lsl #2
   288b8:	ldr	fp, [r8, #1696]	; 0x6a0
   288bc:	mov	r8, #10
   288c0:	cmp	r6, #0
   288c4:	bgt	289ec <flatcc_json_parser_table_as_root@@Base+0x1f60>
   288c8:	add	ip, r5, r4
   288cc:	mov	r8, #1
   288d0:	mov	r9, #0
   288d4:	mov	fp, #10
   288d8:	add	r3, r6, r4
   288dc:	str	r3, [sp, #112]	; 0x70
   288e0:	ldr	r3, [sp, #56]	; 0x38
   288e4:	str	ip, [sp, #116]	; 0x74
   288e8:	umull	r2, r3, r3, fp
   288ec:	strd	r2, [sp, #80]	; 0x50
   288f0:	ldr	r3, [sp, #60]	; 0x3c
   288f4:	ldr	r2, [sp, #84]	; 0x54
   288f8:	mla	r3, fp, r3, r2
   288fc:	mul	r2, fp, r9
   28900:	umull	r8, r9, r8, fp
   28904:	str	r3, [sp, #84]	; 0x54
   28908:	ldr	r3, [sp, #36]	; 0x24
   2890c:	add	r9, r2, r9
   28910:	mul	r2, fp, r3
   28914:	ldr	r3, [sp, #32]
   28918:	umull	r0, r1, r3, fp
   2891c:	strd	r0, [sp, #32]
   28920:	ldr	r3, [sp, #36]	; 0x24
   28924:	ldrd	r0, [sp, #80]	; 0x50
   28928:	add	r3, r2, r3
   2892c:	mov	r2, r7
   28930:	str	r3, [sp, #36]	; 0x24
   28934:	bl	2dd90 <flatcc_json_printer_clear@@Base+0x484>
   28938:	ldr	ip, [sp, #116]	; 0x74
   2893c:	ldrd	r2, [sp, #80]	; 0x50
   28940:	add	r0, r0, #48	; 0x30
   28944:	strb	r0, [ip], #1
   28948:	ldrd	r0, [sp, #96]	; 0x60
   2894c:	sub	r4, ip, r5
   28950:	and	r1, r1, r3
   28954:	ldr	r3, [sp, #112]	; 0x70
   28958:	and	r0, r0, r2
   2895c:	sub	r6, r3, ip
   28960:	ldrd	r2, [sp, #32]
   28964:	strd	r0, [sp, #56]	; 0x38
   28968:	add	r6, r5, r6
   2896c:	cmp	r3, r1
   28970:	cmpeq	r2, r0
   28974:	bls	288e0 <flatcc_json_parser_table_as_root@@Base+0x1e54>
   28978:	ldrd	r0, [sp, #64]	; 0x40
   2897c:	ldrd	r2, [sp, #40]	; 0x28
   28980:	subs	r2, r2, r0
   28984:	sbc	r3, r3, r1
   28988:	strd	r2, [sp, #80]	; 0x50
   2898c:	ldrd	r2, [sp, #40]	; 0x28
   28990:	cmp	r1, r3
   28994:	cmpeq	r0, r2
   28998:	ldr	r3, [sp, #72]	; 0x48
   2899c:	movhi	r1, #1
   289a0:	movls	r1, #0
   289a4:	cmp	r3, sl
   289a8:	orrne	r1, r1, #1
   289ac:	cmp	r1, #0
   289b0:	bne	287d4 <flatcc_json_parser_table_as_root@@Base+0x1d48>
   289b4:	ldr	r3, [sp, #84]	; 0x54
   289b8:	strd	r8, [sp, #24]
   289bc:	mul	r1, r8, r3
   289c0:	ldr	r3, [sp, #80]	; 0x50
   289c4:	mla	r1, r3, r9, r1
   289c8:	umull	r2, r3, r8, r3
   289cc:	add	r3, r1, r3
   289d0:	ldrd	r0, [sp, #88]	; 0x58
   289d4:	strd	r0, [sp, #16]
   289d8:	ldrd	r0, [sp, #56]	; 0x38
   289dc:	strd	r0, [sp, #8]
   289e0:	ldrd	r0, [sp, #32]
   289e4:	strd	r0, [sp]
   289e8:	b	28abc <flatcc_json_parser_table_as_root@@Base+0x2030>
   289ec:	mov	r1, fp
   289f0:	mov	r0, r9
   289f4:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   289f8:	mov	r1, fp
   289fc:	sub	r6, r6, #1
   28a00:	add	r0, r0, #48	; 0x30
   28a04:	strb	r0, [r5, r4]
   28a08:	mov	r0, r9
   28a0c:	bl	2db30 <flatcc_json_printer_clear@@Base+0x224>
   28a10:	mov	r2, r7
   28a14:	add	r4, r4, #1
   28a18:	mov	r0, r1
   28a1c:	mov	r9, r1
   28a20:	mov	r1, #0
   28a24:	bl	2ddac <flatcc_json_printer_clear@@Base+0x4a0>
   28a28:	ldrd	r2, [sp, #56]	; 0x38
   28a2c:	adds	r2, r2, r0
   28a30:	adc	r3, r3, r1
   28a34:	strd	r2, [sp, #80]	; 0x50
   28a38:	ldrd	r0, [sp, #80]	; 0x50
   28a3c:	ldrd	r2, [sp, #32]
   28a40:	cmp	r3, r1
   28a44:	cmpeq	r2, r0
   28a48:	bls	28af8 <flatcc_json_parser_table_as_root@@Base+0x206c>
   28a4c:	ldrd	r2, [sp, #64]	; 0x40
   28a50:	ldrd	r8, [sp, #40]	; 0x28
   28a54:	ldrd	r0, [sp, #40]	; 0x28
   28a58:	subs	r8, r8, r2
   28a5c:	sbc	r9, r9, r3
   28a60:	cmp	r3, r1
   28a64:	cmpeq	r2, r0
   28a68:	ldr	r2, [sp, #72]	; 0x48
   28a6c:	movhi	r3, #1
   28a70:	movls	r3, #0
   28a74:	cmp	r2, sl
   28a78:	orrne	r3, r3, #1
   28a7c:	cmp	r3, #0
   28a80:	bne	287d4 <flatcc_json_parser_table_as_root@@Base+0x1d48>
   28a84:	mov	r3, #0
   28a88:	mov	r2, #1
   28a8c:	mov	r0, fp
   28a90:	strd	r2, [sp, #24]
   28a94:	mov	r1, #0
   28a98:	mov	r2, r7
   28a9c:	bl	2ddac <flatcc_json_printer_clear@@Base+0x4a0>
   28aa0:	ldrd	r2, [sp, #80]	; 0x50
   28aa4:	strd	r2, [sp, #8]
   28aa8:	ldrd	r2, [sp, #32]
   28aac:	strd	r2, [sp]
   28ab0:	mov	r2, r8
   28ab4:	mov	r3, r9
   28ab8:	strd	r0, [sp, #16]
   28abc:	mov	r1, r4
   28ac0:	mov	r0, r5
   28ac4:	bl	27668 <flatcc_json_parser_table_as_root@@Base+0xbdc>
   28ac8:	ldr	r3, [sp, #108]	; 0x6c
   28acc:	sub	r6, r6, r3
   28ad0:	cmp	r0, #0
   28ad4:	bne	28b0c <flatcc_json_parser_table_as_root@@Base+0x2080>
   28ad8:	ldrd	r2, [sp, #48]	; 0x30
   28adc:	mov	r0, r5
   28ae0:	ldr	r1, [pc, #-688]	; 28838 <flatcc_json_parser_table_as_root@@Base+0x1dac>
   28ae4:	bl	14624 <sprintf@plt>
   28ae8:	ldr	r3, [sp, #104]	; 0x68
   28aec:	sub	r5, r5, r3
   28af0:	add	r0, r5, r0
   28af4:	b	28468 <flatcc_json_parser_table_as_root@@Base+0x19dc>
   28af8:	mov	r0, fp
   28afc:	mov	r1, r8
   28b00:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   28b04:	mov	fp, r0
   28b08:	b	288c0 <flatcc_json_parser_table_as_root@@Base+0x1e34>
   28b0c:	cmp	r4, #2
   28b10:	subgt	r0, r4, #1
   28b14:	movle	r0, #1
   28b18:	cmp	r6, #0
   28b1c:	bge	28c0c <flatcc_json_parser_table_as_root@@Base+0x2180>
   28b20:	add	r3, r6, r4
   28b24:	rsb	r2, r6, #0
   28b28:	cmp	r2, r4
   28b2c:	cmnge	r3, #2
   28b30:	movge	r3, #1
   28b34:	movlt	r3, #0
   28b38:	blt	28ba8 <flatcc_json_parser_table_as_root@@Base+0x211c>
   28b3c:	rsb	r0, r4, #2
   28b40:	sub	r0, r0, r6
   28b44:	mov	r2, r4
   28b48:	mov	r1, r5
   28b4c:	add	r0, r5, r0
   28b50:	bl	14558 <memmove@plt>
   28b54:	rsb	r6, r6, #2
   28b58:	mov	r2, #46	; 0x2e
   28b5c:	strb	r2, [r5, #1]
   28b60:	sub	r6, r6, r4
   28b64:	add	r2, r5, #2
   28b68:	mov	r3, #48	; 0x30
   28b6c:	strb	r3, [r5]
   28b70:	sub	r1, r2, r5
   28b74:	cmp	r6, r1
   28b78:	bgt	28ba0 <flatcc_json_parser_table_as_root@@Base+0x2114>
   28b7c:	cmp	r6, #2
   28b80:	addge	r4, r4, r6
   28b84:	addlt	r4, r4, #2
   28b88:	mov	r3, #0
   28b8c:	strb	r3, [r5, r4]
   28b90:	ldr	r3, [sp, #104]	; 0x68
   28b94:	add	r0, r5, r4
   28b98:	sub	r0, r0, r3
   28b9c:	b	28468 <flatcc_json_parser_table_as_root@@Base+0x19dc>
   28ba0:	strb	r3, [r2], #1
   28ba4:	b	28b70 <flatcc_json_parser_table_as_root@@Base+0x20e4>
   28ba8:	cmp	r4, #1
   28bac:	beq	28c0c <flatcc_json_parser_table_as_root@@Base+0x2180>
   28bb0:	cmp	r0, r2
   28bb4:	movge	r0, r2
   28bb8:	add	r2, r5, r4
   28bbc:	cmp	r3, r0
   28bc0:	blt	28bfc <flatcc_json_parser_table_as_root@@Base+0x2170>
   28bc4:	sub	r2, r4, r0
   28bc8:	add	r3, r4, #1
   28bcc:	mov	r1, #46	; 0x2e
   28bd0:	adds	r0, r0, r6
   28bd4:	strb	r1, [r5, r2]
   28bd8:	moveq	r4, r3
   28bdc:	beq	28b88 <flatcc_json_parser_table_as_root@@Base+0x20fc>
   28be0:	add	r4, r4, #2
   28be4:	mov	r2, #101	; 0x65
   28be8:	add	r1, r5, r4
   28bec:	strb	r2, [r5, r3]
   28bf0:	bl	27800 <flatcc_json_parser_table_as_root@@Base+0xd74>
   28bf4:	add	r4, r4, r0
   28bf8:	b	28b88 <flatcc_json_parser_table_as_root@@Base+0x20fc>
   28bfc:	ldrb	r1, [r2, #-1]
   28c00:	add	r3, r3, #1
   28c04:	strb	r1, [r2], #-1
   28c08:	b	28bbc <flatcc_json_parser_table_as_root@@Base+0x2130>
   28c0c:	cmp	r6, #2
   28c10:	bls	28c34 <flatcc_json_parser_table_as_root@@Base+0x21a8>
   28c14:	add	r7, r4, #1
   28c18:	mov	r3, #101	; 0x65
   28c1c:	strb	r3, [r5, r4]
   28c20:	add	r1, r5, r7
   28c24:	mov	r0, r6
   28c28:	bl	27800 <flatcc_json_parser_table_as_root@@Base+0xd74>
   28c2c:	add	r4, r7, r0
   28c30:	b	28b88 <flatcc_json_parser_table_as_root@@Base+0x20fc>
   28c34:	cmp	r6, #0
   28c38:	addne	r2, r5, r4
   28c3c:	movne	r3, r6
   28c40:	movne	r1, #48	; 0x30
   28c44:	beq	28b88 <flatcc_json_parser_table_as_root@@Base+0x20fc>
   28c48:	subs	r3, r3, #1
   28c4c:	addcc	r4, r4, r6
   28c50:	bcc	28b88 <flatcc_json_parser_table_as_root@@Base+0x20fc>
   28c54:	strb	r1, [r2], #1
   28c58:	b	28c48 <flatcc_json_parser_table_as_root@@Base+0x21bc>

00028c5c <flatcc_json_printer_error_string@@Base>:
   28c5c:	cmp	r0, #3
   28c60:	ldrls	r3, [pc, #12]	; 28c74 <flatcc_json_printer_error_string@@Base+0x18>
   28c64:	addls	r0, r3, r0, lsl #2
   28c68:	ldrls	r0, [r0, #1740]	; 0x6cc
   28c6c:	ldrhi	r0, [pc, #4]	; 28c78 <flatcc_json_printer_error_string@@Base+0x1c>
   28c70:	bx	lr
   28c74:	andeq	r3, r3, r8, lsl #2
   28c78:	andeq	r2, r3, r8, asr #32

00028c7c <flatcc_json_printer_fmt_float@@Base>:
   28c7c:	vcvt.f64.f32	d0, s0
   28c80:	b	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>

00028c84 <flatcc_json_printer_fmt_double@@Base>:
   28c84:	b	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>

00028c88 <flatcc_json_printer_fmt_bool@@Base>:
   28c88:	cmp	r1, #0
   28c8c:	ldreq	r3, [pc, #36]	; 28cb8 <flatcc_json_printer_fmt_bool@@Base+0x30>
   28c90:	ldrne	r3, [pc, #36]	; 28cbc <flatcc_json_printer_fmt_bool@@Base+0x34>
   28c94:	ldreq	r2, [r3]
   28c98:	ldrbeq	r3, [r3, #4]
   28c9c:	ldrne	r3, [r3]
   28ca0:	streq	r2, [r0]
   28ca4:	strne	r3, [r0]
   28ca8:	strbeq	r3, [r0, #4]
   28cac:	movne	r0, #4
   28cb0:	moveq	r0, #5
   28cb4:	bx	lr
   28cb8:	andeq	lr, r2, fp, ror #18
   28cbc:	andeq	lr, r2, r6, ror #18

00028cc0 <flatcc_json_printer_string@@Base>:
   28cc0:	b	27a10 <flatcc_json_parser_table_as_root@@Base+0xf84>

00028cc4 <flatcc_json_printer_write@@Base>:
   28cc4:	b	2795c <flatcc_json_parser_table_as_root@@Base+0xed0>

00028cc8 <flatcc_json_printer_nl@@Base>:
   28cc8:	ldr	r3, [r0, #20]
   28ccc:	mov	r2, #10
   28cd0:	add	r1, r3, #1
   28cd4:	str	r1, [r0, #20]
   28cd8:	strb	r2, [r3]
   28cdc:	b	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>

00028ce0 <flatcc_json_printer_char@@Base>:
   28ce0:	ldr	r3, [r0, #20]
   28ce4:	add	r2, r3, #1
   28ce8:	str	r2, [r0, #20]
   28cec:	strb	r1, [r3]
   28cf0:	bx	lr

00028cf4 <flatcc_json_printer_indent@@Base>:
   28cf4:	b	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>

00028cf8 <flatcc_json_printer_add_level@@Base>:
   28cf8:	ldr	r3, [r0, #32]
   28cfc:	add	r1, r3, r1
   28d00:	str	r1, [r0, #32]
   28d04:	bx	lr

00028d08 <flatcc_json_printer_get_level@@Base>:
   28d08:	ldr	r0, [r0, #32]
   28d0c:	bx	lr

00028d10 <flatcc_json_printer_uint8@@Base>:
   28d10:	push	{r4, lr}
   28d14:	mov	r4, r0
   28d18:	mov	r0, r1
   28d1c:	ldr	r1, [r4, #20]
   28d20:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   28d24:	ldr	r3, [r4, #20]
   28d28:	add	r0, r3, r0
   28d2c:	str	r0, [r4, #20]
   28d30:	pop	{r4, pc}

00028d34 <flatcc_json_printer_uint16@@Base>:
   28d34:	push	{r4, lr}
   28d38:	mov	r4, r0
   28d3c:	mov	r0, r1
   28d40:	ldr	r1, [r4, #20]
   28d44:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   28d48:	ldr	r3, [r4, #20]
   28d4c:	add	r0, r3, r0
   28d50:	str	r0, [r4, #20]
   28d54:	pop	{r4, pc}

00028d58 <flatcc_json_printer_uint32@@Base>:
   28d58:	push	{r4, lr}
   28d5c:	mov	r4, r0
   28d60:	mov	r0, r1
   28d64:	ldr	r1, [r4, #20]
   28d68:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   28d6c:	ldr	r3, [r4, #20]
   28d70:	add	r0, r3, r0
   28d74:	str	r0, [r4, #20]
   28d78:	pop	{r4, pc}

00028d7c <flatcc_json_printer_uint64@@Base>:
   28d7c:	push	{r4, lr}
   28d80:	mov	r4, r0
   28d84:	mov	r1, r3
   28d88:	mov	r0, r2
   28d8c:	ldr	r2, [r4, #20]
   28d90:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   28d94:	ldr	r3, [r4, #20]
   28d98:	add	r0, r3, r0
   28d9c:	str	r0, [r4, #20]
   28da0:	pop	{r4, pc}

00028da4 <flatcc_json_printer_int8@@Base>:
   28da4:	push	{r4, lr}
   28da8:	mov	r4, r0
   28dac:	mov	r0, r1
   28db0:	ldr	r1, [r4, #20]
   28db4:	bl	27f94 <flatcc_json_parser_table_as_root@@Base+0x1508>
   28db8:	ldr	r3, [r4, #20]
   28dbc:	add	r0, r3, r0
   28dc0:	str	r0, [r4, #20]
   28dc4:	pop	{r4, pc}

00028dc8 <flatcc_json_printer_int16@@Base>:
   28dc8:	push	{r4, lr}
   28dcc:	mov	r4, r0
   28dd0:	mov	r0, r1
   28dd4:	ldr	r1, [r4, #20]
   28dd8:	bl	275dc <flatcc_json_parser_table_as_root@@Base+0xb50>
   28ddc:	ldr	r3, [r4, #20]
   28de0:	add	r0, r3, r0
   28de4:	str	r0, [r4, #20]
   28de8:	pop	{r4, pc}

00028dec <flatcc_json_printer_int32@@Base>:
   28dec:	push	{r4, lr}
   28df0:	mov	r4, r0
   28df4:	mov	r0, r1
   28df8:	ldr	r1, [r4, #20]
   28dfc:	bl	2760c <flatcc_json_parser_table_as_root@@Base+0xb80>
   28e00:	ldr	r3, [r4, #20]
   28e04:	add	r0, r3, r0
   28e08:	str	r0, [r4, #20]
   28e0c:	pop	{r4, pc}

00028e10 <flatcc_json_printer_int64@@Base>:
   28e10:	push	{r4, lr}
   28e14:	mov	r4, r0
   28e18:	mov	r1, r3
   28e1c:	mov	r0, r2
   28e20:	ldr	r2, [r4, #20]
   28e24:	bl	27634 <flatcc_json_parser_table_as_root@@Base+0xba8>
   28e28:	ldr	r3, [r4, #20]
   28e2c:	add	r0, r3, r0
   28e30:	str	r0, [r4, #20]
   28e34:	pop	{r4, pc}

00028e38 <flatcc_json_printer_float@@Base>:
   28e38:	push	{r4, lr}
   28e3c:	vcvt.f64.f32	d0, s0
   28e40:	mov	r4, r0
   28e44:	ldr	r0, [r0, #20]
   28e48:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   28e4c:	ldr	r3, [r4, #20]
   28e50:	add	r0, r3, r0
   28e54:	str	r0, [r4, #20]
   28e58:	pop	{r4, pc}

00028e5c <flatcc_json_printer_double@@Base>:
   28e5c:	push	{r4, lr}
   28e60:	mov	r4, r0
   28e64:	ldr	r0, [r0, #20]
   28e68:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   28e6c:	ldr	r3, [r4, #20]
   28e70:	add	r0, r3, r0
   28e74:	str	r0, [r4, #20]
   28e78:	pop	{r4, pc}

00028e7c <flatcc_json_printer_enum@@Base>:
   28e7c:	b	27bc4 <flatcc_json_parser_table_as_root@@Base+0x1138>

00028e80 <flatcc_json_printer_delimit_enum_flags@@Base>:
   28e80:	ldrb	r3, [r0, #26]
   28e84:	adds	r1, r1, #0
   28e88:	ldr	r2, [r0, #20]
   28e8c:	movne	r1, #1
   28e90:	cmp	r3, #0
   28e94:	movne	r3, r1
   28e98:	orreq	r3, r1, #1
   28e9c:	mov	r1, #34	; 0x22
   28ea0:	strb	r1, [r2]
   28ea4:	ldr	r1, [r0, #20]
   28ea8:	add	r1, r1, r3
   28eac:	str	r1, [r0, #20]
   28eb0:	bx	lr

00028eb4 <flatcc_json_printer_enum_flag@@Base>:
   28eb4:	push	{r4, lr}
   28eb8:	mov	lr, r2
   28ebc:	ldr	r2, [r0, #20]
   28ec0:	mov	r4, #32
   28ec4:	strb	r4, [r2]
   28ec8:	ldr	r2, [r0, #20]
   28ecc:	cmp	r1, #0
   28ed0:	movle	r1, r2
   28ed4:	addgt	r1, r2, #1
   28ed8:	str	r1, [r0, #20]
   28edc:	mov	r2, r3
   28ee0:	mov	r1, lr
   28ee4:	pop	{r4, lr}
   28ee8:	b	2795c <flatcc_json_parser_table_as_root@@Base+0xed0>

00028eec <flatcc_json_printer_string_field@@Base>:
   28eec:	push	{r4, r5, r6, r7, r8, lr}
   28ef0:	mov	r5, r1
   28ef4:	mov	r4, r0
   28ef8:	mov	r1, r2
   28efc:	mov	r0, r5
   28f00:	mov	r7, r3
   28f04:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   28f08:	ldr	r8, [sp, #24]
   28f0c:	subs	r6, r0, #0
   28f10:	popeq	{r4, r5, r6, r7, r8, pc}
   28f14:	ldr	r2, [r5, #16]
   28f18:	mov	r1, r7
   28f1c:	cmp	r2, #0
   28f20:	add	r3, r2, #1
   28f24:	ldrne	r2, [r4, #20]
   28f28:	str	r3, [r5, #16]
   28f2c:	addne	r3, r2, #1
   28f30:	strne	r3, [r4, #20]
   28f34:	movne	r3, #44	; 0x2c
   28f38:	mov	r0, r4
   28f3c:	strbne	r3, [r2]
   28f40:	mov	r2, r8
   28f44:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   28f48:	ldr	r1, [r6]
   28f4c:	mov	r0, r4
   28f50:	add	r1, r6, r1
   28f54:	pop	{r4, r5, r6, r7, r8, lr}
   28f58:	b	27bb8 <flatcc_json_parser_table_as_root@@Base+0x112c>

00028f5c <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   28f5c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   28f60:	mov	r6, r1
   28f64:	mov	r4, r0
   28f68:	mov	r1, r2
   28f6c:	mov	r0, r6
   28f70:	mov	r9, r3
   28f74:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   28f78:	ldr	r7, [sp, #44]	; 0x2c
   28f7c:	adds	r7, r7, #0
   28f80:	movne	r7, #1
   28f84:	subs	r5, r0, #0
   28f88:	beq	29060 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x104>
   28f8c:	ldr	r2, [r6, #16]
   28f90:	mov	r1, r9
   28f94:	cmp	r2, #0
   28f98:	add	r3, r2, #1
   28f9c:	ldrne	r2, [r4, #20]
   28fa0:	str	r3, [r6, #16]
   28fa4:	addne	r3, r2, #1
   28fa8:	strne	r3, [r4, #20]
   28fac:	movne	r3, #44	; 0x2c
   28fb0:	strbne	r3, [r2]
   28fb4:	mov	r0, r4
   28fb8:	ldr	r2, [sp, #40]	; 0x28
   28fbc:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   28fc0:	ldr	r3, [r5]
   28fc4:	orr	r8, r7, #128	; 0x80
   28fc8:	add	r6, r5, r3
   28fcc:	ldr	r3, [r5, r3]
   28fd0:	mov	r1, r8
   28fd4:	str	r3, [sp]
   28fd8:	ldr	r3, [r4, #20]
   28fdc:	add	r6, r6, #4
   28fe0:	add	r2, r3, #1
   28fe4:	str	r2, [r4, #20]
   28fe8:	mov	r2, #34	; 0x22
   28fec:	strb	r2, [r3]
   28ff0:	ldr	r0, [sp]
   28ff4:	bl	2788c <flatcc_json_parser_table_as_root@@Base+0xe00>
   28ff8:	ldr	r3, [r4, #20]
   28ffc:	ldr	r2, [r4, #16]
   29000:	add	r3, r3, r0
   29004:	cmp	r2, r3
   29008:	mov	sl, r0
   2900c:	bhi	29020 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   29010:	ldr	r3, [r4, #44]	; 0x2c
   29014:	mov	r1, #0
   29018:	mov	r0, r4
   2901c:	blx	r3
   29020:	mov	r9, #0
   29024:	ldr	r0, [r4, #20]
   29028:	ldr	r5, [r4, #16]
   2902c:	add	r3, r0, sl
   29030:	cmp	r5, r3
   29034:	bcc	29068 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x10c>
   29038:	mov	r3, r8
   2903c:	mov	r2, sp
   29040:	mov	r1, r6
   29044:	bl	2823c <flatcc_json_parser_table_as_root@@Base+0x17b0>
   29048:	ldr	r2, [r4, #20]
   2904c:	add	r3, r2, sl
   29050:	add	r3, r3, #1
   29054:	str	r3, [r4, #20]
   29058:	mov	r3, #34	; 0x22
   2905c:	strb	r3, [r2, sl]
   29060:	add	sp, sp, #8
   29064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29068:	sub	r5, r5, r0
   2906c:	bic	r5, r5, #3
   29070:	add	sl, r5, r5, lsl #1
   29074:	lsrs	sl, sl, #2
   29078:	bne	29090 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x134>
   2907c:	ldr	r3, [pc, #96]	; 290e4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x188>
   29080:	ldr	r2, [pc, #96]	; 290e8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x18c>
   29084:	ldr	r1, [pc, #96]	; 290ec <flatcc_json_printer_uint8_vector_base64_field@@Base+0x190>
   29088:	ldr	r0, [pc, #96]	; 290f0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x194>
   2908c:	bl	14648 <__assert_fail@plt>
   29090:	add	r2, sp, #4
   29094:	mov	r1, r6
   29098:	mov	r3, r7
   2909c:	str	sl, [sp, #4]
   290a0:	bl	2823c <flatcc_json_parser_table_as_root@@Base+0x17b0>
   290a4:	ldr	r3, [r4, #20]
   290a8:	add	r6, r6, sl
   290ac:	add	r5, r3, r5
   290b0:	ldr	r3, [sp]
   290b4:	mov	r1, r9
   290b8:	sub	sl, r3, sl
   290bc:	str	sl, [sp]
   290c0:	ldr	r3, [r4, #44]	; 0x2c
   290c4:	mov	r0, r4
   290c8:	str	r5, [r4, #20]
   290cc:	blx	r3
   290d0:	mov	r1, r8
   290d4:	ldr	r0, [sp]
   290d8:	bl	2788c <flatcc_json_parser_table_as_root@@Base+0xe00>
   290dc:	mov	sl, r0
   290e0:	b	29024 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc8>
   290e4:	andeq	r3, r3, r4, ror #15
   290e8:	andeq	r0, r0, r5, lsl r1
   290ec:	andeq	r3, r3, r5, ror #16
   290f0:	andeq	r3, r3, r0, lsl #20

000290f4 <flatcc_json_printer_uint8_field@@Base>:
   290f4:	push	{r4, r5, r6, r7, r8, lr}
   290f8:	mov	r6, r1
   290fc:	mov	r4, r0
   29100:	mov	r1, r2
   29104:	mov	r0, r6
   29108:	mov	r8, r3
   2910c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29110:	ldrb	r7, [sp, #28]
   29114:	cmp	r0, #0
   29118:	beq	29138 <flatcc_json_printer_uint8_field@@Base+0x44>
   2911c:	ldrb	r5, [r0]
   29120:	cmp	r5, r7
   29124:	bne	29148 <flatcc_json_printer_uint8_field@@Base+0x54>
   29128:	ldrb	r3, [r4, #28]
   2912c:	cmp	r3, #0
   29130:	beq	29148 <flatcc_json_printer_uint8_field@@Base+0x54>
   29134:	pop	{r4, r5, r6, r7, r8, pc}
   29138:	ldrb	r3, [r4, #29]
   2913c:	cmp	r3, #0
   29140:	popeq	{r4, r5, r6, r7, r8, pc}
   29144:	mov	r5, r7
   29148:	ldr	r2, [r6, #16]
   2914c:	mov	r1, r8
   29150:	cmp	r2, #0
   29154:	add	r3, r2, #1
   29158:	ldrne	r2, [r4, #20]
   2915c:	str	r3, [r6, #16]
   29160:	addne	r3, r2, #1
   29164:	strne	r3, [r4, #20]
   29168:	movne	r3, #44	; 0x2c
   2916c:	strbne	r3, [r2]
   29170:	mov	r0, r4
   29174:	ldr	r2, [sp, #24]
   29178:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2917c:	ldr	r1, [r4, #20]
   29180:	mov	r0, r5
   29184:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   29188:	ldr	r3, [r4, #20]
   2918c:	add	r0, r3, r0
   29190:	str	r0, [r4, #20]
   29194:	pop	{r4, r5, r6, r7, r8, pc}

00029198 <flatcc_json_printer_uint16_field@@Base>:
   29198:	push	{r4, r5, r6, r7, r8, lr}
   2919c:	mov	r6, r1
   291a0:	mov	r4, r0
   291a4:	mov	r1, r2
   291a8:	mov	r0, r6
   291ac:	mov	r8, r3
   291b0:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   291b4:	ldrh	r7, [sp, #28]
   291b8:	cmp	r0, #0
   291bc:	beq	291dc <flatcc_json_printer_uint16_field@@Base+0x44>
   291c0:	ldrh	r5, [r0]
   291c4:	cmp	r5, r7
   291c8:	bne	291ec <flatcc_json_printer_uint16_field@@Base+0x54>
   291cc:	ldrb	r3, [r4, #28]
   291d0:	cmp	r3, #0
   291d4:	beq	291ec <flatcc_json_printer_uint16_field@@Base+0x54>
   291d8:	pop	{r4, r5, r6, r7, r8, pc}
   291dc:	ldrb	r3, [r4, #29]
   291e0:	cmp	r3, #0
   291e4:	popeq	{r4, r5, r6, r7, r8, pc}
   291e8:	mov	r5, r7
   291ec:	ldr	r2, [r6, #16]
   291f0:	mov	r1, r8
   291f4:	cmp	r2, #0
   291f8:	add	r3, r2, #1
   291fc:	ldrne	r2, [r4, #20]
   29200:	str	r3, [r6, #16]
   29204:	addne	r3, r2, #1
   29208:	strne	r3, [r4, #20]
   2920c:	movne	r3, #44	; 0x2c
   29210:	strbne	r3, [r2]
   29214:	mov	r0, r4
   29218:	ldr	r2, [sp, #24]
   2921c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29220:	ldr	r1, [r4, #20]
   29224:	mov	r0, r5
   29228:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   2922c:	ldr	r3, [r4, #20]
   29230:	add	r0, r3, r0
   29234:	str	r0, [r4, #20]
   29238:	pop	{r4, r5, r6, r7, r8, pc}

0002923c <flatcc_json_printer_uint32_field@@Base>:
   2923c:	push	{r4, r5, r6, r7, r8, lr}
   29240:	mov	r6, r1
   29244:	mov	r4, r0
   29248:	mov	r1, r2
   2924c:	mov	r0, r6
   29250:	mov	r8, r3
   29254:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29258:	ldr	r7, [sp, #28]
   2925c:	cmp	r0, #0
   29260:	beq	29280 <flatcc_json_printer_uint32_field@@Base+0x44>
   29264:	ldr	r5, [r0]
   29268:	cmp	r5, r7
   2926c:	bne	29290 <flatcc_json_printer_uint32_field@@Base+0x54>
   29270:	ldrb	r3, [r4, #28]
   29274:	cmp	r3, #0
   29278:	beq	29290 <flatcc_json_printer_uint32_field@@Base+0x54>
   2927c:	pop	{r4, r5, r6, r7, r8, pc}
   29280:	ldrb	r3, [r4, #29]
   29284:	cmp	r3, #0
   29288:	popeq	{r4, r5, r6, r7, r8, pc}
   2928c:	mov	r5, r7
   29290:	ldr	r2, [r6, #16]
   29294:	mov	r1, r8
   29298:	cmp	r2, #0
   2929c:	add	r3, r2, #1
   292a0:	ldrne	r2, [r4, #20]
   292a4:	str	r3, [r6, #16]
   292a8:	addne	r3, r2, #1
   292ac:	strne	r3, [r4, #20]
   292b0:	movne	r3, #44	; 0x2c
   292b4:	strbne	r3, [r2]
   292b8:	mov	r0, r4
   292bc:	ldr	r2, [sp, #24]
   292c0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   292c4:	ldr	r1, [r4, #20]
   292c8:	mov	r0, r5
   292cc:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   292d0:	ldr	r3, [r4, #20]
   292d4:	add	r0, r3, r0
   292d8:	str	r0, [r4, #20]
   292dc:	pop	{r4, r5, r6, r7, r8, pc}

000292e0 <flatcc_json_printer_uint64_field@@Base>:
   292e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   292e4:	mov	r5, r1
   292e8:	mov	r4, r0
   292ec:	mov	r1, r2
   292f0:	mov	r0, r5
   292f4:	mov	sl, r3
   292f8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   292fc:	ldrd	r8, [sp, #40]	; 0x28
   29300:	cmp	r0, #0
   29304:	beq	29328 <flatcc_json_printer_uint64_field@@Base+0x48>
   29308:	ldrd	r6, [r0]
   2930c:	cmp	r7, r9
   29310:	cmpeq	r6, r8
   29314:	bne	2933c <flatcc_json_printer_uint64_field@@Base+0x5c>
   29318:	ldrb	r3, [r4, #28]
   2931c:	cmp	r3, #0
   29320:	beq	2933c <flatcc_json_printer_uint64_field@@Base+0x5c>
   29324:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29328:	ldrb	r3, [r4, #29]
   2932c:	cmp	r3, #0
   29330:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29334:	mov	r6, r8
   29338:	mov	r7, r9
   2933c:	ldr	r2, [r5, #16]
   29340:	mov	r1, sl
   29344:	cmp	r2, #0
   29348:	add	r3, r2, #1
   2934c:	ldrne	r2, [r4, #20]
   29350:	str	r3, [r5, #16]
   29354:	addne	r3, r2, #1
   29358:	strne	r3, [r4, #20]
   2935c:	movne	r3, #44	; 0x2c
   29360:	strbne	r3, [r2]
   29364:	mov	r0, r4
   29368:	ldr	r2, [sp, #32]
   2936c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29370:	ldr	r2, [r4, #20]
   29374:	mov	r0, r6
   29378:	mov	r1, r7
   2937c:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   29380:	ldr	r3, [r4, #20]
   29384:	add	r0, r3, r0
   29388:	str	r0, [r4, #20]
   2938c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00029390 <flatcc_json_printer_int8_field@@Base>:
   29390:	push	{r4, r5, r6, r7, r8, lr}
   29394:	mov	r6, r1
   29398:	mov	r4, r0
   2939c:	mov	r1, r2
   293a0:	mov	r0, r6
   293a4:	mov	r8, r3
   293a8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   293ac:	ldrsb	r7, [sp, #28]
   293b0:	cmp	r0, #0
   293b4:	beq	293d4 <flatcc_json_printer_int8_field@@Base+0x44>
   293b8:	ldrsb	r5, [r0]
   293bc:	cmp	r5, r7
   293c0:	bne	293e4 <flatcc_json_printer_int8_field@@Base+0x54>
   293c4:	ldrb	r3, [r4, #28]
   293c8:	cmp	r3, #0
   293cc:	beq	293e4 <flatcc_json_printer_int8_field@@Base+0x54>
   293d0:	pop	{r4, r5, r6, r7, r8, pc}
   293d4:	ldrb	r3, [r4, #29]
   293d8:	cmp	r3, #0
   293dc:	popeq	{r4, r5, r6, r7, r8, pc}
   293e0:	mov	r5, r7
   293e4:	ldr	r2, [r6, #16]
   293e8:	mov	r1, r8
   293ec:	cmp	r2, #0
   293f0:	add	r3, r2, #1
   293f4:	ldrne	r2, [r4, #20]
   293f8:	str	r3, [r6, #16]
   293fc:	addne	r3, r2, #1
   29400:	strne	r3, [r4, #20]
   29404:	movne	r3, #44	; 0x2c
   29408:	strbne	r3, [r2]
   2940c:	mov	r0, r4
   29410:	ldr	r2, [sp, #24]
   29414:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29418:	ldr	r1, [r4, #20]
   2941c:	mov	r0, r5
   29420:	bl	27f94 <flatcc_json_parser_table_as_root@@Base+0x1508>
   29424:	ldr	r3, [r4, #20]
   29428:	add	r0, r3, r0
   2942c:	str	r0, [r4, #20]
   29430:	pop	{r4, r5, r6, r7, r8, pc}

00029434 <flatcc_json_printer_int16_field@@Base>:
   29434:	push	{r4, r5, r6, r7, r8, lr}
   29438:	mov	r6, r1
   2943c:	mov	r4, r0
   29440:	mov	r1, r2
   29444:	mov	r0, r6
   29448:	mov	r8, r3
   2944c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29450:	ldrsh	r7, [sp, #28]
   29454:	cmp	r0, #0
   29458:	beq	29478 <flatcc_json_printer_int16_field@@Base+0x44>
   2945c:	ldrsh	r5, [r0]
   29460:	cmp	r5, r7
   29464:	bne	29488 <flatcc_json_printer_int16_field@@Base+0x54>
   29468:	ldrb	r3, [r4, #28]
   2946c:	cmp	r3, #0
   29470:	beq	29488 <flatcc_json_printer_int16_field@@Base+0x54>
   29474:	pop	{r4, r5, r6, r7, r8, pc}
   29478:	ldrb	r3, [r4, #29]
   2947c:	cmp	r3, #0
   29480:	popeq	{r4, r5, r6, r7, r8, pc}
   29484:	mov	r5, r7
   29488:	ldr	r2, [r6, #16]
   2948c:	mov	r1, r8
   29490:	cmp	r2, #0
   29494:	add	r3, r2, #1
   29498:	ldrne	r2, [r4, #20]
   2949c:	str	r3, [r6, #16]
   294a0:	addne	r3, r2, #1
   294a4:	strne	r3, [r4, #20]
   294a8:	movne	r3, #44	; 0x2c
   294ac:	strbne	r3, [r2]
   294b0:	mov	r0, r4
   294b4:	ldr	r2, [sp, #24]
   294b8:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   294bc:	ldr	r1, [r4, #20]
   294c0:	mov	r0, r5
   294c4:	bl	275dc <flatcc_json_parser_table_as_root@@Base+0xb50>
   294c8:	ldr	r3, [r4, #20]
   294cc:	add	r0, r3, r0
   294d0:	str	r0, [r4, #20]
   294d4:	pop	{r4, r5, r6, r7, r8, pc}

000294d8 <flatcc_json_printer_int32_field@@Base>:
   294d8:	push	{r4, r5, r6, r7, r8, lr}
   294dc:	mov	r6, r1
   294e0:	mov	r4, r0
   294e4:	mov	r1, r2
   294e8:	mov	r0, r6
   294ec:	mov	r8, r3
   294f0:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   294f4:	ldr	r7, [sp, #28]
   294f8:	cmp	r0, #0
   294fc:	beq	2951c <flatcc_json_printer_int32_field@@Base+0x44>
   29500:	ldr	r5, [r0]
   29504:	cmp	r5, r7
   29508:	bne	2952c <flatcc_json_printer_int32_field@@Base+0x54>
   2950c:	ldrb	r3, [r4, #28]
   29510:	cmp	r3, #0
   29514:	beq	2952c <flatcc_json_printer_int32_field@@Base+0x54>
   29518:	pop	{r4, r5, r6, r7, r8, pc}
   2951c:	ldrb	r3, [r4, #29]
   29520:	cmp	r3, #0
   29524:	popeq	{r4, r5, r6, r7, r8, pc}
   29528:	mov	r5, r7
   2952c:	ldr	r2, [r6, #16]
   29530:	mov	r1, r8
   29534:	cmp	r2, #0
   29538:	add	r3, r2, #1
   2953c:	ldrne	r2, [r4, #20]
   29540:	str	r3, [r6, #16]
   29544:	addne	r3, r2, #1
   29548:	strne	r3, [r4, #20]
   2954c:	movne	r3, #44	; 0x2c
   29550:	strbne	r3, [r2]
   29554:	mov	r0, r4
   29558:	ldr	r2, [sp, #24]
   2955c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29560:	ldr	r1, [r4, #20]
   29564:	mov	r0, r5
   29568:	bl	2760c <flatcc_json_parser_table_as_root@@Base+0xb80>
   2956c:	ldr	r3, [r4, #20]
   29570:	add	r0, r3, r0
   29574:	str	r0, [r4, #20]
   29578:	pop	{r4, r5, r6, r7, r8, pc}

0002957c <flatcc_json_printer_int64_field@@Base>:
   2957c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29580:	mov	r5, r1
   29584:	mov	r4, r0
   29588:	mov	r1, r2
   2958c:	mov	r0, r5
   29590:	mov	sl, r3
   29594:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29598:	ldrd	r8, [sp, #40]	; 0x28
   2959c:	cmp	r0, #0
   295a0:	beq	295c4 <flatcc_json_printer_int64_field@@Base+0x48>
   295a4:	ldrd	r6, [r0]
   295a8:	cmp	r7, r9
   295ac:	cmpeq	r6, r8
   295b0:	bne	295d8 <flatcc_json_printer_int64_field@@Base+0x5c>
   295b4:	ldrb	r3, [r4, #28]
   295b8:	cmp	r3, #0
   295bc:	beq	295d8 <flatcc_json_printer_int64_field@@Base+0x5c>
   295c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   295c4:	ldrb	r3, [r4, #29]
   295c8:	cmp	r3, #0
   295cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   295d0:	mov	r6, r8
   295d4:	mov	r7, r9
   295d8:	ldr	r2, [r5, #16]
   295dc:	mov	r1, sl
   295e0:	cmp	r2, #0
   295e4:	add	r3, r2, #1
   295e8:	ldrne	r2, [r4, #20]
   295ec:	str	r3, [r5, #16]
   295f0:	addne	r3, r2, #1
   295f4:	strne	r3, [r4, #20]
   295f8:	movne	r3, #44	; 0x2c
   295fc:	strbne	r3, [r2]
   29600:	mov	r0, r4
   29604:	ldr	r2, [sp, #32]
   29608:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2960c:	ldr	r2, [r4, #20]
   29610:	mov	r0, r6
   29614:	mov	r1, r7
   29618:	bl	27634 <flatcc_json_parser_table_as_root@@Base+0xba8>
   2961c:	ldr	r3, [r4, #20]
   29620:	add	r0, r3, r0
   29624:	str	r0, [r4, #20]
   29628:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002962c <flatcc_json_printer_bool_field@@Base>:
   2962c:	push	{r4, r5, r6, r7, r8, lr}
   29630:	mov	r6, r1
   29634:	mov	r4, r0
   29638:	mov	r1, r2
   2963c:	mov	r0, r6
   29640:	mov	r8, r3
   29644:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29648:	ldrb	r7, [sp, #28]
   2964c:	cmp	r0, #0
   29650:	beq	29670 <flatcc_json_printer_bool_field@@Base+0x44>
   29654:	ldrb	r5, [r0]
   29658:	cmp	r5, r7
   2965c:	bne	29680 <flatcc_json_printer_bool_field@@Base+0x54>
   29660:	ldrb	r3, [r4, #28]
   29664:	cmp	r3, #0
   29668:	beq	29680 <flatcc_json_printer_bool_field@@Base+0x54>
   2966c:	pop	{r4, r5, r6, r7, r8, pc}
   29670:	ldrb	r3, [r4, #29]
   29674:	cmp	r3, #0
   29678:	popeq	{r4, r5, r6, r7, r8, pc}
   2967c:	mov	r5, r7
   29680:	ldr	r2, [r6, #16]
   29684:	mov	r1, r8
   29688:	cmp	r2, #0
   2968c:	add	r3, r2, #1
   29690:	ldrne	r2, [r4, #20]
   29694:	str	r3, [r6, #16]
   29698:	addne	r3, r2, #1
   2969c:	strne	r3, [r4, #20]
   296a0:	movne	r3, #44	; 0x2c
   296a4:	strbne	r3, [r2]
   296a8:	mov	r0, r4
   296ac:	ldr	r2, [sp, #24]
   296b0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   296b4:	ldr	r1, [r4, #20]
   296b8:	mov	r0, r5
   296bc:	bl	28080 <flatcc_json_parser_table_as_root@@Base+0x15f4>
   296c0:	ldr	r3, [r4, #20]
   296c4:	add	r0, r3, r0
   296c8:	str	r0, [r4, #20]
   296cc:	pop	{r4, r5, r6, r7, r8, pc}

000296d0 <flatcc_json_printer_float_field@@Base>:
   296d0:	push	{r4, r5, r6, lr}
   296d4:	mov	r5, r1
   296d8:	vpush	{d8}
   296dc:	mov	r4, r0
   296e0:	mov	r1, r2
   296e4:	mov	r0, r5
   296e8:	mov	r6, r3
   296ec:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   296f0:	cmp	r0, #0
   296f4:	beq	2971c <flatcc_json_printer_float_field@@Base+0x4c>
   296f8:	vldr	s16, [r0]
   296fc:	vcmp.f32	s16, s0
   29700:	vmrs	APSR_nzcv, fpscr
   29704:	bne	2972c <flatcc_json_printer_float_field@@Base+0x5c>
   29708:	ldrb	r3, [r4, #28]
   2970c:	cmp	r3, #0
   29710:	beq	2972c <flatcc_json_printer_float_field@@Base+0x5c>
   29714:	vpop	{d8}
   29718:	pop	{r4, r5, r6, pc}
   2971c:	ldrb	r3, [r4, #29]
   29720:	cmp	r3, #0
   29724:	beq	29714 <flatcc_json_printer_float_field@@Base+0x44>
   29728:	vmov.f32	s16, s0
   2972c:	ldr	r2, [r5, #16]
   29730:	mov	r1, r6
   29734:	cmp	r2, #0
   29738:	add	r3, r2, #1
   2973c:	ldrne	r2, [r4, #20]
   29740:	str	r3, [r5, #16]
   29744:	addne	r3, r2, #1
   29748:	strne	r3, [r4, #20]
   2974c:	movne	r3, #44	; 0x2c
   29750:	strbne	r3, [r2]
   29754:	mov	r0, r4
   29758:	ldr	r2, [sp, #24]
   2975c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29760:	ldr	r0, [r4, #20]
   29764:	vcvt.f64.f32	d0, s16
   29768:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   2976c:	ldr	r3, [r4, #20]
   29770:	add	r0, r3, r0
   29774:	str	r0, [r4, #20]
   29778:	b	29714 <flatcc_json_printer_float_field@@Base+0x44>

0002977c <flatcc_json_printer_double_field@@Base>:
   2977c:	push	{r4, r5, r6, lr}
   29780:	mov	r5, r1
   29784:	vpush	{d8}
   29788:	mov	r4, r0
   2978c:	mov	r1, r2
   29790:	mov	r0, r5
   29794:	mov	r6, r3
   29798:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2979c:	cmp	r0, #0
   297a0:	beq	297c8 <flatcc_json_printer_double_field@@Base+0x4c>
   297a4:	vldr	d8, [r0]
   297a8:	vcmp.f64	d8, d0
   297ac:	vmrs	APSR_nzcv, fpscr
   297b0:	bne	297d8 <flatcc_json_printer_double_field@@Base+0x5c>
   297b4:	ldrb	r3, [r4, #28]
   297b8:	cmp	r3, #0
   297bc:	beq	297d8 <flatcc_json_printer_double_field@@Base+0x5c>
   297c0:	vpop	{d8}
   297c4:	pop	{r4, r5, r6, pc}
   297c8:	ldrb	r3, [r4, #29]
   297cc:	cmp	r3, #0
   297d0:	beq	297c0 <flatcc_json_printer_double_field@@Base+0x44>
   297d4:	vmov.f64	d8, d0
   297d8:	ldr	r2, [r5, #16]
   297dc:	mov	r1, r6
   297e0:	cmp	r2, #0
   297e4:	add	r3, r2, #1
   297e8:	ldrne	r2, [r4, #20]
   297ec:	str	r3, [r5, #16]
   297f0:	addne	r3, r2, #1
   297f4:	strne	r3, [r4, #20]
   297f8:	movne	r3, #44	; 0x2c
   297fc:	strbne	r3, [r2]
   29800:	mov	r0, r4
   29804:	ldr	r2, [sp, #24]
   29808:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2980c:	ldr	r0, [r4, #20]
   29810:	vmov.f64	d0, d8
   29814:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   29818:	ldr	r3, [r4, #20]
   2981c:	add	r0, r3, r0
   29820:	str	r0, [r4, #20]
   29824:	b	297c0 <flatcc_json_printer_double_field@@Base+0x44>

00029828 <flatcc_json_printer_uint8_enum_field@@Base>:
   29828:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2982c:	mov	r6, r1
   29830:	mov	r4, r0
   29834:	mov	r1, r2
   29838:	mov	r0, r6
   2983c:	mov	r9, r3
   29840:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29844:	ldr	sl, [sp, #32]
   29848:	ldrb	r7, [sp, #36]	; 0x24
   2984c:	ldr	r8, [sp, #40]	; 0x28
   29850:	cmp	r0, #0
   29854:	beq	29874 <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   29858:	ldrb	r5, [r0]
   2985c:	cmp	r5, r7
   29860:	bne	29884 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   29864:	ldrb	r3, [r4, #28]
   29868:	cmp	r3, #0
   2986c:	beq	29884 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   29870:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29874:	ldrb	r3, [r4, #29]
   29878:	cmp	r3, #0
   2987c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29880:	mov	r5, r7
   29884:	ldr	r2, [r6, #16]
   29888:	mov	r1, r9
   2988c:	cmp	r2, #0
   29890:	add	r3, r2, #1
   29894:	ldrne	r2, [r4, #20]
   29898:	str	r3, [r6, #16]
   2989c:	addne	r3, r2, #1
   298a0:	strne	r3, [r4, #20]
   298a4:	movne	r3, #44	; 0x2c
   298a8:	strbne	r3, [r2]
   298ac:	mov	r0, r4
   298b0:	mov	r2, sl
   298b4:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   298b8:	ldrb	r3, [r4, #27]
   298bc:	cmp	r3, #0
   298c0:	beq	298e0 <flatcc_json_printer_uint8_enum_field@@Base+0xb8>
   298c4:	ldr	r1, [r4, #20]
   298c8:	mov	r0, r5
   298cc:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   298d0:	ldr	r3, [r4, #20]
   298d4:	add	r0, r3, r0
   298d8:	str	r0, [r4, #20]
   298dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   298e0:	mov	r1, r5
   298e4:	mov	r0, r4
   298e8:	mov	r3, r8
   298ec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   298f0:	bx	r3

000298f4 <flatcc_json_printer_uint16_enum_field@@Base>:
   298f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   298f8:	mov	r6, r1
   298fc:	mov	r4, r0
   29900:	mov	r1, r2
   29904:	mov	r0, r6
   29908:	mov	r9, r3
   2990c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29910:	ldr	sl, [sp, #32]
   29914:	ldrh	r7, [sp, #36]	; 0x24
   29918:	ldr	r8, [sp, #40]	; 0x28
   2991c:	cmp	r0, #0
   29920:	beq	29940 <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   29924:	ldrh	r5, [r0]
   29928:	cmp	r5, r7
   2992c:	bne	29950 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   29930:	ldrb	r3, [r4, #28]
   29934:	cmp	r3, #0
   29938:	beq	29950 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   2993c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29940:	ldrb	r3, [r4, #29]
   29944:	cmp	r3, #0
   29948:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2994c:	mov	r5, r7
   29950:	ldr	r2, [r6, #16]
   29954:	mov	r1, r9
   29958:	cmp	r2, #0
   2995c:	add	r3, r2, #1
   29960:	ldrne	r2, [r4, #20]
   29964:	str	r3, [r6, #16]
   29968:	addne	r3, r2, #1
   2996c:	strne	r3, [r4, #20]
   29970:	movne	r3, #44	; 0x2c
   29974:	strbne	r3, [r2]
   29978:	mov	r0, r4
   2997c:	mov	r2, sl
   29980:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29984:	ldrb	r3, [r4, #27]
   29988:	cmp	r3, #0
   2998c:	beq	299ac <flatcc_json_printer_uint16_enum_field@@Base+0xb8>
   29990:	ldr	r1, [r4, #20]
   29994:	mov	r0, r5
   29998:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   2999c:	ldr	r3, [r4, #20]
   299a0:	add	r0, r3, r0
   299a4:	str	r0, [r4, #20]
   299a8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   299ac:	mov	r1, r5
   299b0:	mov	r0, r4
   299b4:	mov	r3, r8
   299b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   299bc:	bx	r3

000299c0 <flatcc_json_printer_uint32_enum_field@@Base>:
   299c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   299c4:	mov	r6, r1
   299c8:	mov	r4, r0
   299cc:	mov	r1, r2
   299d0:	mov	r0, r6
   299d4:	mov	r9, r3
   299d8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   299dc:	ldr	sl, [sp, #32]
   299e0:	ldr	r7, [sp, #36]	; 0x24
   299e4:	ldr	r8, [sp, #40]	; 0x28
   299e8:	cmp	r0, #0
   299ec:	beq	29a0c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   299f0:	ldr	r5, [r0]
   299f4:	cmp	r5, r7
   299f8:	bne	29a1c <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   299fc:	ldrb	r3, [r4, #28]
   29a00:	cmp	r3, #0
   29a04:	beq	29a1c <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   29a08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a0c:	ldrb	r3, [r4, #29]
   29a10:	cmp	r3, #0
   29a14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a18:	mov	r5, r7
   29a1c:	ldr	r2, [r6, #16]
   29a20:	mov	r1, r9
   29a24:	cmp	r2, #0
   29a28:	add	r3, r2, #1
   29a2c:	ldrne	r2, [r4, #20]
   29a30:	str	r3, [r6, #16]
   29a34:	addne	r3, r2, #1
   29a38:	strne	r3, [r4, #20]
   29a3c:	movne	r3, #44	; 0x2c
   29a40:	strbne	r3, [r2]
   29a44:	mov	r0, r4
   29a48:	mov	r2, sl
   29a4c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29a50:	ldrb	r3, [r4, #27]
   29a54:	cmp	r3, #0
   29a58:	beq	29a78 <flatcc_json_printer_uint32_enum_field@@Base+0xb8>
   29a5c:	ldr	r1, [r4, #20]
   29a60:	mov	r0, r5
   29a64:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   29a68:	ldr	r3, [r4, #20]
   29a6c:	add	r0, r3, r0
   29a70:	str	r0, [r4, #20]
   29a74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29a78:	mov	r1, r5
   29a7c:	mov	r0, r4
   29a80:	mov	r3, r8
   29a84:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29a88:	bx	r3

00029a8c <flatcc_json_printer_uint64_enum_field@@Base>:
   29a8c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29a90:	mov	r5, r1
   29a94:	mov	fp, r3
   29a98:	ldr	r3, [sp, #64]	; 0x40
   29a9c:	mov	r4, r0
   29aa0:	mov	r1, r2
   29aa4:	mov	r0, r5
   29aa8:	str	r3, [sp, #4]
   29aac:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29ab0:	ldr	sl, [sp, #48]	; 0x30
   29ab4:	ldrd	r8, [sp, #56]	; 0x38
   29ab8:	cmp	r0, #0
   29abc:	beq	29ae4 <flatcc_json_printer_uint64_enum_field@@Base+0x58>
   29ac0:	ldrd	r6, [r0]
   29ac4:	cmp	r7, r9
   29ac8:	cmpeq	r6, r8
   29acc:	bne	29af8 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   29ad0:	ldrb	r2, [r4, #28]
   29ad4:	cmp	r2, #0
   29ad8:	beq	29af8 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   29adc:	add	sp, sp, #12
   29ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29ae4:	ldrb	r2, [r4, #29]
   29ae8:	cmp	r2, #0
   29aec:	beq	29adc <flatcc_json_printer_uint64_enum_field@@Base+0x50>
   29af0:	mov	r6, r8
   29af4:	mov	r7, r9
   29af8:	ldr	r2, [r5, #16]
   29afc:	mov	r0, r4
   29b00:	cmp	r2, #0
   29b04:	add	r1, r2, #1
   29b08:	ldrne	r2, [r4, #20]
   29b0c:	str	r1, [r5, #16]
   29b10:	addne	r1, r2, #1
   29b14:	strne	r1, [r4, #20]
   29b18:	movne	r1, #44	; 0x2c
   29b1c:	strbne	r1, [r2]
   29b20:	mov	r2, sl
   29b24:	mov	r1, fp
   29b28:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29b2c:	ldrb	r3, [r4, #27]
   29b30:	cmp	r3, #0
   29b34:	beq	29b58 <flatcc_json_printer_uint64_enum_field@@Base+0xcc>
   29b38:	ldr	r2, [r4, #20]
   29b3c:	mov	r0, r6
   29b40:	mov	r1, r7
   29b44:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   29b48:	ldr	r3, [r4, #20]
   29b4c:	add	r0, r3, r0
   29b50:	str	r0, [r4, #20]
   29b54:	b	29adc <flatcc_json_printer_uint64_enum_field@@Base+0x50>
   29b58:	mov	r2, r6
   29b5c:	mov	r3, r7
   29b60:	mov	r0, r4
   29b64:	ldr	r1, [sp, #4]
   29b68:	add	sp, sp, #12
   29b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29b70:	bx	r1

00029b74 <flatcc_json_printer_int8_enum_field@@Base>:
   29b74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29b78:	mov	r6, r1
   29b7c:	mov	r4, r0
   29b80:	mov	r1, r2
   29b84:	mov	r0, r6
   29b88:	mov	r9, r3
   29b8c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29b90:	ldr	sl, [sp, #32]
   29b94:	ldrsb	r7, [sp, #36]	; 0x24
   29b98:	ldr	r8, [sp, #40]	; 0x28
   29b9c:	cmp	r0, #0
   29ba0:	beq	29bc0 <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   29ba4:	ldrsb	r5, [r0]
   29ba8:	cmp	r5, r7
   29bac:	bne	29bd0 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   29bb0:	ldrb	r3, [r4, #28]
   29bb4:	cmp	r3, #0
   29bb8:	beq	29bd0 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   29bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29bc0:	ldrb	r3, [r4, #29]
   29bc4:	cmp	r3, #0
   29bc8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29bcc:	mov	r5, r7
   29bd0:	ldr	r2, [r6, #16]
   29bd4:	mov	r1, r9
   29bd8:	cmp	r2, #0
   29bdc:	add	r3, r2, #1
   29be0:	ldrne	r2, [r4, #20]
   29be4:	str	r3, [r6, #16]
   29be8:	addne	r3, r2, #1
   29bec:	strne	r3, [r4, #20]
   29bf0:	movne	r3, #44	; 0x2c
   29bf4:	strbne	r3, [r2]
   29bf8:	mov	r0, r4
   29bfc:	mov	r2, sl
   29c00:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29c04:	ldrb	r3, [r4, #27]
   29c08:	cmp	r3, #0
   29c0c:	beq	29c2c <flatcc_json_printer_int8_enum_field@@Base+0xb8>
   29c10:	ldr	r1, [r4, #20]
   29c14:	mov	r0, r5
   29c18:	bl	27f94 <flatcc_json_parser_table_as_root@@Base+0x1508>
   29c1c:	ldr	r3, [r4, #20]
   29c20:	add	r0, r3, r0
   29c24:	str	r0, [r4, #20]
   29c28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29c2c:	mov	r1, r5
   29c30:	mov	r0, r4
   29c34:	mov	r3, r8
   29c38:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29c3c:	bx	r3

00029c40 <flatcc_json_printer_int16_enum_field@@Base>:
   29c40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29c44:	mov	r6, r1
   29c48:	mov	r4, r0
   29c4c:	mov	r1, r2
   29c50:	mov	r0, r6
   29c54:	mov	r9, r3
   29c58:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29c5c:	ldr	sl, [sp, #32]
   29c60:	ldrsh	r7, [sp, #36]	; 0x24
   29c64:	ldr	r8, [sp, #40]	; 0x28
   29c68:	cmp	r0, #0
   29c6c:	beq	29c8c <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   29c70:	ldrsh	r5, [r0]
   29c74:	cmp	r5, r7
   29c78:	bne	29c9c <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   29c7c:	ldrb	r3, [r4, #28]
   29c80:	cmp	r3, #0
   29c84:	beq	29c9c <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   29c88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29c8c:	ldrb	r3, [r4, #29]
   29c90:	cmp	r3, #0
   29c94:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29c98:	mov	r5, r7
   29c9c:	ldr	r2, [r6, #16]
   29ca0:	mov	r1, r9
   29ca4:	cmp	r2, #0
   29ca8:	add	r3, r2, #1
   29cac:	ldrne	r2, [r4, #20]
   29cb0:	str	r3, [r6, #16]
   29cb4:	addne	r3, r2, #1
   29cb8:	strne	r3, [r4, #20]
   29cbc:	movne	r3, #44	; 0x2c
   29cc0:	strbne	r3, [r2]
   29cc4:	mov	r0, r4
   29cc8:	mov	r2, sl
   29ccc:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29cd0:	ldrb	r3, [r4, #27]
   29cd4:	cmp	r3, #0
   29cd8:	beq	29cf8 <flatcc_json_printer_int16_enum_field@@Base+0xb8>
   29cdc:	ldr	r1, [r4, #20]
   29ce0:	mov	r0, r5
   29ce4:	bl	275dc <flatcc_json_parser_table_as_root@@Base+0xb50>
   29ce8:	ldr	r3, [r4, #20]
   29cec:	add	r0, r3, r0
   29cf0:	str	r0, [r4, #20]
   29cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29cf8:	mov	r1, r5
   29cfc:	mov	r0, r4
   29d00:	mov	r3, r8
   29d04:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29d08:	bx	r3

00029d0c <flatcc_json_printer_int32_enum_field@@Base>:
   29d0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29d10:	mov	r6, r1
   29d14:	mov	r4, r0
   29d18:	mov	r1, r2
   29d1c:	mov	r0, r6
   29d20:	mov	r9, r3
   29d24:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29d28:	ldr	sl, [sp, #32]
   29d2c:	ldr	r7, [sp, #36]	; 0x24
   29d30:	ldr	r8, [sp, #40]	; 0x28
   29d34:	cmp	r0, #0
   29d38:	beq	29d58 <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   29d3c:	ldr	r5, [r0]
   29d40:	cmp	r5, r7
   29d44:	bne	29d68 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   29d48:	ldrb	r3, [r4, #28]
   29d4c:	cmp	r3, #0
   29d50:	beq	29d68 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   29d54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29d58:	ldrb	r3, [r4, #29]
   29d5c:	cmp	r3, #0
   29d60:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29d64:	mov	r5, r7
   29d68:	ldr	r2, [r6, #16]
   29d6c:	mov	r1, r9
   29d70:	cmp	r2, #0
   29d74:	add	r3, r2, #1
   29d78:	ldrne	r2, [r4, #20]
   29d7c:	str	r3, [r6, #16]
   29d80:	addne	r3, r2, #1
   29d84:	strne	r3, [r4, #20]
   29d88:	movne	r3, #44	; 0x2c
   29d8c:	strbne	r3, [r2]
   29d90:	mov	r0, r4
   29d94:	mov	r2, sl
   29d98:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29d9c:	ldrb	r3, [r4, #27]
   29da0:	cmp	r3, #0
   29da4:	beq	29dc4 <flatcc_json_printer_int32_enum_field@@Base+0xb8>
   29da8:	ldr	r1, [r4, #20]
   29dac:	mov	r0, r5
   29db0:	bl	2760c <flatcc_json_parser_table_as_root@@Base+0xb80>
   29db4:	ldr	r3, [r4, #20]
   29db8:	add	r0, r3, r0
   29dbc:	str	r0, [r4, #20]
   29dc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29dc4:	mov	r1, r5
   29dc8:	mov	r0, r4
   29dcc:	mov	r3, r8
   29dd0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29dd4:	bx	r3

00029dd8 <flatcc_json_printer_int64_enum_field@@Base>:
   29dd8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ddc:	mov	r5, r1
   29de0:	mov	fp, r3
   29de4:	ldr	r3, [sp, #64]	; 0x40
   29de8:	mov	r4, r0
   29dec:	mov	r1, r2
   29df0:	mov	r0, r5
   29df4:	str	r3, [sp, #4]
   29df8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29dfc:	ldr	sl, [sp, #48]	; 0x30
   29e00:	ldrd	r8, [sp, #56]	; 0x38
   29e04:	cmp	r0, #0
   29e08:	beq	29e30 <flatcc_json_printer_int64_enum_field@@Base+0x58>
   29e0c:	ldrd	r6, [r0]
   29e10:	cmp	r7, r9
   29e14:	cmpeq	r6, r8
   29e18:	bne	29e44 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   29e1c:	ldrb	r2, [r4, #28]
   29e20:	cmp	r2, #0
   29e24:	beq	29e44 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   29e28:	add	sp, sp, #12
   29e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e30:	ldrb	r2, [r4, #29]
   29e34:	cmp	r2, #0
   29e38:	beq	29e28 <flatcc_json_printer_int64_enum_field@@Base+0x50>
   29e3c:	mov	r6, r8
   29e40:	mov	r7, r9
   29e44:	ldr	r2, [r5, #16]
   29e48:	mov	r0, r4
   29e4c:	cmp	r2, #0
   29e50:	add	r1, r2, #1
   29e54:	ldrne	r2, [r4, #20]
   29e58:	str	r1, [r5, #16]
   29e5c:	addne	r1, r2, #1
   29e60:	strne	r1, [r4, #20]
   29e64:	movne	r1, #44	; 0x2c
   29e68:	strbne	r1, [r2]
   29e6c:	mov	r2, sl
   29e70:	mov	r1, fp
   29e74:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29e78:	ldrb	r3, [r4, #27]
   29e7c:	cmp	r3, #0
   29e80:	beq	29ea4 <flatcc_json_printer_int64_enum_field@@Base+0xcc>
   29e84:	ldr	r2, [r4, #20]
   29e88:	mov	r0, r6
   29e8c:	mov	r1, r7
   29e90:	bl	27634 <flatcc_json_parser_table_as_root@@Base+0xba8>
   29e94:	ldr	r3, [r4, #20]
   29e98:	add	r0, r3, r0
   29e9c:	str	r0, [r4, #20]
   29ea0:	b	29e28 <flatcc_json_printer_int64_enum_field@@Base+0x50>
   29ea4:	mov	r2, r6
   29ea8:	mov	r3, r7
   29eac:	mov	r0, r4
   29eb0:	ldr	r1, [sp, #4]
   29eb4:	add	sp, sp, #12
   29eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29ebc:	bx	r1

00029ec0 <flatcc_json_printer_bool_enum_field@@Base>:
   29ec0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   29ec4:	mov	r6, r1
   29ec8:	mov	r4, r0
   29ecc:	mov	r1, r2
   29ed0:	mov	r0, r6
   29ed4:	mov	r9, r3
   29ed8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   29edc:	ldr	sl, [sp, #32]
   29ee0:	ldrb	r7, [sp, #36]	; 0x24
   29ee4:	ldr	r8, [sp, #40]	; 0x28
   29ee8:	cmp	r0, #0
   29eec:	beq	29f0c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   29ef0:	ldrb	r5, [r0]
   29ef4:	cmp	r5, r7
   29ef8:	bne	29f1c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   29efc:	ldrb	r3, [r4, #28]
   29f00:	cmp	r3, #0
   29f04:	beq	29f1c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   29f08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29f0c:	ldrb	r3, [r4, #29]
   29f10:	cmp	r3, #0
   29f14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   29f18:	mov	r5, r7
   29f1c:	ldr	r2, [r6, #16]
   29f20:	mov	r1, r9
   29f24:	cmp	r2, #0
   29f28:	add	r3, r2, #1
   29f2c:	ldrne	r2, [r4, #20]
   29f30:	str	r3, [r6, #16]
   29f34:	addne	r3, r2, #1
   29f38:	strne	r3, [r4, #20]
   29f3c:	movne	r3, #44	; 0x2c
   29f40:	strbne	r3, [r2]
   29f44:	mov	r0, r4
   29f48:	mov	r2, sl
   29f4c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29f50:	ldrb	r3, [r4, #27]
   29f54:	cmp	r3, #0
   29f58:	beq	29f78 <flatcc_json_printer_bool_enum_field@@Base+0xb8>
   29f5c:	ldr	r1, [r4, #20]
   29f60:	mov	r0, r5
   29f64:	bl	28080 <flatcc_json_parser_table_as_root@@Base+0x15f4>
   29f68:	ldr	r3, [r4, #20]
   29f6c:	add	r0, r3, r0
   29f70:	str	r0, [r4, #20]
   29f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   29f78:	mov	r1, r5
   29f7c:	mov	r0, r4
   29f80:	mov	r3, r8
   29f84:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   29f88:	bx	r3

00029f8c <flatcc_json_printer_uint8_struct_field@@Base>:
   29f8c:	cmp	r1, #0
   29f90:	push	{r4, r5, r6, lr}
   29f94:	mov	r4, r0
   29f98:	ldrb	r5, [r2, r3]
   29f9c:	ldrne	r3, [r0, #20]
   29fa0:	ldr	r1, [sp, #16]
   29fa4:	addne	r2, r3, #1
   29fa8:	strne	r2, [r0, #20]
   29fac:	movne	r2, #44	; 0x2c
   29fb0:	strbne	r2, [r3]
   29fb4:	ldr	r2, [sp, #20]
   29fb8:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   29fbc:	ldr	r1, [r4, #20]
   29fc0:	mov	r0, r5
   29fc4:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   29fc8:	ldr	r3, [r4, #20]
   29fcc:	add	r0, r3, r0
   29fd0:	str	r0, [r4, #20]
   29fd4:	pop	{r4, r5, r6, pc}

00029fd8 <flatcc_json_printer_uint16_struct_field@@Base>:
   29fd8:	cmp	r1, #0
   29fdc:	push	{r4, r5, r6, lr}
   29fe0:	mov	r4, r0
   29fe4:	ldrh	r5, [r2, r3]
   29fe8:	ldrne	r3, [r0, #20]
   29fec:	ldr	r1, [sp, #16]
   29ff0:	addne	r2, r3, #1
   29ff4:	strne	r2, [r0, #20]
   29ff8:	movne	r2, #44	; 0x2c
   29ffc:	strbne	r2, [r3]
   2a000:	ldr	r2, [sp, #20]
   2a004:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a008:	ldr	r1, [r4, #20]
   2a00c:	mov	r0, r5
   2a010:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   2a014:	ldr	r3, [r4, #20]
   2a018:	add	r0, r3, r0
   2a01c:	str	r0, [r4, #20]
   2a020:	pop	{r4, r5, r6, pc}

0002a024 <flatcc_json_printer_uint32_struct_field@@Base>:
   2a024:	cmp	r1, #0
   2a028:	push	{r4, r5, r6, lr}
   2a02c:	mov	r4, r0
   2a030:	ldr	r5, [r2, r3]
   2a034:	ldrne	r3, [r0, #20]
   2a038:	ldr	r1, [sp, #16]
   2a03c:	addne	r2, r3, #1
   2a040:	strne	r2, [r0, #20]
   2a044:	movne	r2, #44	; 0x2c
   2a048:	strbne	r2, [r3]
   2a04c:	ldr	r2, [sp, #20]
   2a050:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a054:	ldr	r1, [r4, #20]
   2a058:	mov	r0, r5
   2a05c:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   2a060:	ldr	r3, [r4, #20]
   2a064:	add	r0, r3, r0
   2a068:	str	r0, [r4, #20]
   2a06c:	pop	{r4, r5, r6, pc}

0002a070 <flatcc_json_printer_uint64_struct_field@@Base>:
   2a070:	cmp	r1, #0
   2a074:	push	{r4, r6, r7, lr}
   2a078:	mov	r4, r0
   2a07c:	ldrd	r6, [r2, r3]
   2a080:	ldrne	r3, [r0, #20]
   2a084:	ldr	r1, [sp, #16]
   2a088:	addne	r2, r3, #1
   2a08c:	strne	r2, [r0, #20]
   2a090:	movne	r2, #44	; 0x2c
   2a094:	strbne	r2, [r3]
   2a098:	ldr	r2, [sp, #20]
   2a09c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a0a0:	ldr	r2, [r4, #20]
   2a0a4:	mov	r0, r6
   2a0a8:	mov	r1, r7
   2a0ac:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   2a0b0:	ldr	r3, [r4, #20]
   2a0b4:	add	r0, r3, r0
   2a0b8:	str	r0, [r4, #20]
   2a0bc:	pop	{r4, r6, r7, pc}

0002a0c0 <flatcc_json_printer_int8_struct_field@@Base>:
   2a0c0:	cmp	r1, #0
   2a0c4:	push	{r4, r5, r6, lr}
   2a0c8:	mov	r4, r0
   2a0cc:	ldrsb	r5, [r2, r3]
   2a0d0:	ldrne	r3, [r0, #20]
   2a0d4:	ldr	r1, [sp, #16]
   2a0d8:	addne	r2, r3, #1
   2a0dc:	strne	r2, [r0, #20]
   2a0e0:	movne	r2, #44	; 0x2c
   2a0e4:	strbne	r2, [r3]
   2a0e8:	ldr	r2, [sp, #20]
   2a0ec:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a0f0:	ldr	r1, [r4, #20]
   2a0f4:	mov	r0, r5
   2a0f8:	bl	27f94 <flatcc_json_parser_table_as_root@@Base+0x1508>
   2a0fc:	ldr	r3, [r4, #20]
   2a100:	add	r0, r3, r0
   2a104:	str	r0, [r4, #20]
   2a108:	pop	{r4, r5, r6, pc}

0002a10c <flatcc_json_printer_int16_struct_field@@Base>:
   2a10c:	cmp	r1, #0
   2a110:	push	{r4, r5, r6, lr}
   2a114:	mov	r4, r0
   2a118:	ldrsh	r5, [r2, r3]
   2a11c:	ldrne	r3, [r0, #20]
   2a120:	ldr	r1, [sp, #16]
   2a124:	addne	r2, r3, #1
   2a128:	strne	r2, [r0, #20]
   2a12c:	movne	r2, #44	; 0x2c
   2a130:	strbne	r2, [r3]
   2a134:	ldr	r2, [sp, #20]
   2a138:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a13c:	ldr	r1, [r4, #20]
   2a140:	mov	r0, r5
   2a144:	bl	275dc <flatcc_json_parser_table_as_root@@Base+0xb50>
   2a148:	ldr	r3, [r4, #20]
   2a14c:	add	r0, r3, r0
   2a150:	str	r0, [r4, #20]
   2a154:	pop	{r4, r5, r6, pc}

0002a158 <flatcc_json_printer_int32_struct_field@@Base>:
   2a158:	cmp	r1, #0
   2a15c:	push	{r4, r5, r6, lr}
   2a160:	mov	r4, r0
   2a164:	ldr	r5, [r2, r3]
   2a168:	ldrne	r3, [r0, #20]
   2a16c:	ldr	r1, [sp, #16]
   2a170:	addne	r2, r3, #1
   2a174:	strne	r2, [r0, #20]
   2a178:	movne	r2, #44	; 0x2c
   2a17c:	strbne	r2, [r3]
   2a180:	ldr	r2, [sp, #20]
   2a184:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a188:	ldr	r1, [r4, #20]
   2a18c:	mov	r0, r5
   2a190:	bl	2760c <flatcc_json_parser_table_as_root@@Base+0xb80>
   2a194:	ldr	r3, [r4, #20]
   2a198:	add	r0, r3, r0
   2a19c:	str	r0, [r4, #20]
   2a1a0:	pop	{r4, r5, r6, pc}

0002a1a4 <flatcc_json_printer_int64_struct_field@@Base>:
   2a1a4:	cmp	r1, #0
   2a1a8:	push	{r4, r6, r7, lr}
   2a1ac:	mov	r4, r0
   2a1b0:	ldrd	r6, [r2, r3]
   2a1b4:	ldrne	r3, [r0, #20]
   2a1b8:	ldr	r1, [sp, #16]
   2a1bc:	addne	r2, r3, #1
   2a1c0:	strne	r2, [r0, #20]
   2a1c4:	movne	r2, #44	; 0x2c
   2a1c8:	strbne	r2, [r3]
   2a1cc:	ldr	r2, [sp, #20]
   2a1d0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a1d4:	ldr	r2, [r4, #20]
   2a1d8:	mov	r0, r6
   2a1dc:	mov	r1, r7
   2a1e0:	bl	27634 <flatcc_json_parser_table_as_root@@Base+0xba8>
   2a1e4:	ldr	r3, [r4, #20]
   2a1e8:	add	r0, r3, r0
   2a1ec:	str	r0, [r4, #20]
   2a1f0:	pop	{r4, r6, r7, pc}

0002a1f4 <flatcc_json_printer_bool_struct_field@@Base>:
   2a1f4:	cmp	r1, #0
   2a1f8:	push	{r4, r5, r6, lr}
   2a1fc:	mov	r4, r0
   2a200:	ldrb	r5, [r2, r3]
   2a204:	ldrne	r3, [r0, #20]
   2a208:	ldr	r1, [sp, #16]
   2a20c:	addne	r2, r3, #1
   2a210:	strne	r2, [r0, #20]
   2a214:	movne	r2, #44	; 0x2c
   2a218:	strbne	r2, [r3]
   2a21c:	ldr	r2, [sp, #20]
   2a220:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a224:	ldr	r1, [r4, #20]
   2a228:	mov	r0, r5
   2a22c:	bl	28080 <flatcc_json_parser_table_as_root@@Base+0x15f4>
   2a230:	ldr	r3, [r4, #20]
   2a234:	add	r0, r3, r0
   2a238:	str	r0, [r4, #20]
   2a23c:	pop	{r4, r5, r6, pc}

0002a240 <flatcc_json_printer_float_struct_field@@Base>:
   2a240:	add	r3, r2, r3
   2a244:	cmp	r1, #0
   2a248:	push	{r4, lr}
   2a24c:	vpush	{d8}
   2a250:	vldr	s16, [r3]
   2a254:	ldrne	r3, [r0, #20]
   2a258:	mov	r4, r0
   2a25c:	addne	r2, r3, #1
   2a260:	strne	r2, [r0, #20]
   2a264:	movne	r2, #44	; 0x2c
   2a268:	strbne	r2, [r3]
   2a26c:	ldr	r1, [sp, #16]
   2a270:	ldr	r2, [sp, #20]
   2a274:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a278:	vcvt.f64.f32	d0, s16
   2a27c:	ldr	r0, [r4, #20]
   2a280:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   2a284:	vpop	{d8}
   2a288:	ldr	r3, [r4, #20]
   2a28c:	add	r0, r3, r0
   2a290:	str	r0, [r4, #20]
   2a294:	pop	{r4, pc}

0002a298 <flatcc_json_printer_double_struct_field@@Base>:
   2a298:	add	r3, r2, r3
   2a29c:	cmp	r1, #0
   2a2a0:	push	{r4, lr}
   2a2a4:	vpush	{d8}
   2a2a8:	vldr	d8, [r3]
   2a2ac:	ldrne	r3, [r0, #20]
   2a2b0:	mov	r4, r0
   2a2b4:	addne	r2, r3, #1
   2a2b8:	strne	r2, [r0, #20]
   2a2bc:	movne	r2, #44	; 0x2c
   2a2c0:	strbne	r2, [r3]
   2a2c4:	ldr	r1, [sp, #16]
   2a2c8:	ldr	r2, [sp, #20]
   2a2cc:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a2d0:	vmov.f64	d0, d8
   2a2d4:	ldr	r0, [r4, #20]
   2a2d8:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   2a2dc:	vpop	{d8}
   2a2e0:	ldr	r3, [r4, #20]
   2a2e4:	add	r0, r3, r0
   2a2e8:	str	r0, [r4, #20]
   2a2ec:	pop	{r4, pc}

0002a2f0 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   2a2f0:	cmp	r1, #0
   2a2f4:	push	{r4, r5, r6, lr}
   2a2f8:	mov	r4, r0
   2a2fc:	ldrb	r5, [r2, r3]
   2a300:	ldrne	r3, [r4, #20]
   2a304:	ldr	r0, [sp, #16]
   2a308:	addne	r2, r3, #1
   2a30c:	ldr	ip, [sp, #20]
   2a310:	strne	r2, [r4, #20]
   2a314:	movne	r2, #44	; 0x2c
   2a318:	strbne	r2, [r3]
   2a31c:	mov	r1, r0
   2a320:	mov	r2, ip
   2a324:	mov	r0, r4
   2a328:	ldr	r6, [sp, #24]
   2a32c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a330:	ldrb	r3, [r4, #27]
   2a334:	cmp	r3, #0
   2a338:	beq	2a358 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x68>
   2a33c:	ldr	r1, [r4, #20]
   2a340:	mov	r0, r5
   2a344:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   2a348:	ldr	r3, [r4, #20]
   2a34c:	add	r0, r3, r0
   2a350:	str	r0, [r4, #20]
   2a354:	pop	{r4, r5, r6, pc}
   2a358:	mov	r1, r5
   2a35c:	mov	r0, r4
   2a360:	mov	r3, r6
   2a364:	pop	{r4, r5, r6, lr}
   2a368:	bx	r3

0002a36c <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   2a36c:	cmp	r1, #0
   2a370:	push	{r4, r5, r6, lr}
   2a374:	mov	r4, r0
   2a378:	ldrh	r5, [r2, r3]
   2a37c:	ldrne	r3, [r4, #20]
   2a380:	ldr	r0, [sp, #16]
   2a384:	addne	r2, r3, #1
   2a388:	ldr	ip, [sp, #20]
   2a38c:	strne	r2, [r4, #20]
   2a390:	movne	r2, #44	; 0x2c
   2a394:	strbne	r2, [r3]
   2a398:	mov	r1, r0
   2a39c:	mov	r2, ip
   2a3a0:	mov	r0, r4
   2a3a4:	ldr	r6, [sp, #24]
   2a3a8:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a3ac:	ldrb	r3, [r4, #27]
   2a3b0:	cmp	r3, #0
   2a3b4:	beq	2a3d4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x68>
   2a3b8:	ldr	r1, [r4, #20]
   2a3bc:	mov	r0, r5
   2a3c0:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   2a3c4:	ldr	r3, [r4, #20]
   2a3c8:	add	r0, r3, r0
   2a3cc:	str	r0, [r4, #20]
   2a3d0:	pop	{r4, r5, r6, pc}
   2a3d4:	mov	r1, r5
   2a3d8:	mov	r0, r4
   2a3dc:	mov	r3, r6
   2a3e0:	pop	{r4, r5, r6, lr}
   2a3e4:	bx	r3

0002a3e8 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   2a3e8:	cmp	r1, #0
   2a3ec:	push	{r4, r5, r6, lr}
   2a3f0:	mov	r4, r0
   2a3f4:	ldr	r5, [r2, r3]
   2a3f8:	ldrne	r3, [r4, #20]
   2a3fc:	ldr	r0, [sp, #16]
   2a400:	addne	r2, r3, #1
   2a404:	ldr	ip, [sp, #20]
   2a408:	strne	r2, [r4, #20]
   2a40c:	movne	r2, #44	; 0x2c
   2a410:	strbne	r2, [r3]
   2a414:	mov	r1, r0
   2a418:	mov	r2, ip
   2a41c:	mov	r0, r4
   2a420:	ldr	r6, [sp, #24]
   2a424:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a428:	ldrb	r3, [r4, #27]
   2a42c:	cmp	r3, #0
   2a430:	beq	2a450 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x68>
   2a434:	ldr	r1, [r4, #20]
   2a438:	mov	r0, r5
   2a43c:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   2a440:	ldr	r3, [r4, #20]
   2a444:	add	r0, r3, r0
   2a448:	str	r0, [r4, #20]
   2a44c:	pop	{r4, r5, r6, pc}
   2a450:	mov	r1, r5
   2a454:	mov	r0, r4
   2a458:	mov	r3, r6
   2a45c:	pop	{r4, r5, r6, lr}
   2a460:	bx	r3

0002a464 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   2a464:	cmp	r1, #0
   2a468:	push	{r4, r5, r6, r7, r8, lr}
   2a46c:	mov	r4, r0
   2a470:	ldrd	r6, [r2, r3]
   2a474:	ldrne	r3, [r4, #20]
   2a478:	ldr	r0, [sp, #24]
   2a47c:	addne	r2, r3, #1
   2a480:	ldr	ip, [sp, #28]
   2a484:	strne	r2, [r4, #20]
   2a488:	movne	r2, #44	; 0x2c
   2a48c:	strbne	r2, [r3]
   2a490:	mov	r1, r0
   2a494:	mov	r2, ip
   2a498:	mov	r0, r4
   2a49c:	ldr	r5, [sp, #32]
   2a4a0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a4a4:	ldrb	r3, [r4, #27]
   2a4a8:	cmp	r3, #0
   2a4ac:	beq	2a4d0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x6c>
   2a4b0:	ldr	r2, [r4, #20]
   2a4b4:	mov	r0, r6
   2a4b8:	mov	r1, r7
   2a4bc:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   2a4c0:	ldr	r3, [r4, #20]
   2a4c4:	add	r0, r3, r0
   2a4c8:	str	r0, [r4, #20]
   2a4cc:	pop	{r4, r5, r6, r7, r8, pc}
   2a4d0:	mov	r2, r6
   2a4d4:	mov	r3, r7
   2a4d8:	mov	r0, r4
   2a4dc:	mov	r1, r5
   2a4e0:	pop	{r4, r5, r6, r7, r8, lr}
   2a4e4:	bx	r1

0002a4e8 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   2a4e8:	cmp	r1, #0
   2a4ec:	push	{r4, r5, r6, lr}
   2a4f0:	mov	r4, r0
   2a4f4:	ldrsb	r5, [r2, r3]
   2a4f8:	ldrne	r3, [r4, #20]
   2a4fc:	ldr	r0, [sp, #16]
   2a500:	addne	r2, r3, #1
   2a504:	ldr	ip, [sp, #20]
   2a508:	strne	r2, [r4, #20]
   2a50c:	movne	r2, #44	; 0x2c
   2a510:	strbne	r2, [r3]
   2a514:	mov	r1, r0
   2a518:	mov	r2, ip
   2a51c:	mov	r0, r4
   2a520:	ldr	r6, [sp, #24]
   2a524:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a528:	ldrb	r3, [r4, #27]
   2a52c:	cmp	r3, #0
   2a530:	beq	2a550 <flatcc_json_printer_int8_enum_struct_field@@Base+0x68>
   2a534:	ldr	r1, [r4, #20]
   2a538:	mov	r0, r5
   2a53c:	bl	27f94 <flatcc_json_parser_table_as_root@@Base+0x1508>
   2a540:	ldr	r3, [r4, #20]
   2a544:	add	r0, r3, r0
   2a548:	str	r0, [r4, #20]
   2a54c:	pop	{r4, r5, r6, pc}
   2a550:	mov	r1, r5
   2a554:	mov	r0, r4
   2a558:	mov	r3, r6
   2a55c:	pop	{r4, r5, r6, lr}
   2a560:	bx	r3

0002a564 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   2a564:	cmp	r1, #0
   2a568:	push	{r4, r5, r6, lr}
   2a56c:	mov	r4, r0
   2a570:	ldrsh	r5, [r2, r3]
   2a574:	ldrne	r3, [r4, #20]
   2a578:	ldr	r0, [sp, #16]
   2a57c:	addne	r2, r3, #1
   2a580:	ldr	ip, [sp, #20]
   2a584:	strne	r2, [r4, #20]
   2a588:	movne	r2, #44	; 0x2c
   2a58c:	strbne	r2, [r3]
   2a590:	mov	r1, r0
   2a594:	mov	r2, ip
   2a598:	mov	r0, r4
   2a59c:	ldr	r6, [sp, #24]
   2a5a0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a5a4:	ldrb	r3, [r4, #27]
   2a5a8:	cmp	r3, #0
   2a5ac:	beq	2a5cc <flatcc_json_printer_int16_enum_struct_field@@Base+0x68>
   2a5b0:	ldr	r1, [r4, #20]
   2a5b4:	mov	r0, r5
   2a5b8:	bl	275dc <flatcc_json_parser_table_as_root@@Base+0xb50>
   2a5bc:	ldr	r3, [r4, #20]
   2a5c0:	add	r0, r3, r0
   2a5c4:	str	r0, [r4, #20]
   2a5c8:	pop	{r4, r5, r6, pc}
   2a5cc:	mov	r1, r5
   2a5d0:	mov	r0, r4
   2a5d4:	mov	r3, r6
   2a5d8:	pop	{r4, r5, r6, lr}
   2a5dc:	bx	r3

0002a5e0 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   2a5e0:	cmp	r1, #0
   2a5e4:	push	{r4, r5, r6, lr}
   2a5e8:	mov	r4, r0
   2a5ec:	ldr	r5, [r2, r3]
   2a5f0:	ldrne	r3, [r4, #20]
   2a5f4:	ldr	r0, [sp, #16]
   2a5f8:	addne	r2, r3, #1
   2a5fc:	ldr	ip, [sp, #20]
   2a600:	strne	r2, [r4, #20]
   2a604:	movne	r2, #44	; 0x2c
   2a608:	strbne	r2, [r3]
   2a60c:	mov	r1, r0
   2a610:	mov	r2, ip
   2a614:	mov	r0, r4
   2a618:	ldr	r6, [sp, #24]
   2a61c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a620:	ldrb	r3, [r4, #27]
   2a624:	cmp	r3, #0
   2a628:	beq	2a648 <flatcc_json_printer_int32_enum_struct_field@@Base+0x68>
   2a62c:	ldr	r1, [r4, #20]
   2a630:	mov	r0, r5
   2a634:	bl	2760c <flatcc_json_parser_table_as_root@@Base+0xb80>
   2a638:	ldr	r3, [r4, #20]
   2a63c:	add	r0, r3, r0
   2a640:	str	r0, [r4, #20]
   2a644:	pop	{r4, r5, r6, pc}
   2a648:	mov	r1, r5
   2a64c:	mov	r0, r4
   2a650:	mov	r3, r6
   2a654:	pop	{r4, r5, r6, lr}
   2a658:	bx	r3

0002a65c <flatcc_json_printer_int64_enum_struct_field@@Base>:
   2a65c:	cmp	r1, #0
   2a660:	push	{r4, r5, r6, r7, r8, lr}
   2a664:	mov	r4, r0
   2a668:	ldrd	r6, [r2, r3]
   2a66c:	ldrne	r3, [r4, #20]
   2a670:	ldr	r0, [sp, #24]
   2a674:	addne	r2, r3, #1
   2a678:	ldr	ip, [sp, #28]
   2a67c:	strne	r2, [r4, #20]
   2a680:	movne	r2, #44	; 0x2c
   2a684:	strbne	r2, [r3]
   2a688:	mov	r1, r0
   2a68c:	mov	r2, ip
   2a690:	mov	r0, r4
   2a694:	ldr	r5, [sp, #32]
   2a698:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a69c:	ldrb	r3, [r4, #27]
   2a6a0:	cmp	r3, #0
   2a6a4:	beq	2a6c8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x6c>
   2a6a8:	ldr	r2, [r4, #20]
   2a6ac:	mov	r0, r6
   2a6b0:	mov	r1, r7
   2a6b4:	bl	27634 <flatcc_json_parser_table_as_root@@Base+0xba8>
   2a6b8:	ldr	r3, [r4, #20]
   2a6bc:	add	r0, r3, r0
   2a6c0:	str	r0, [r4, #20]
   2a6c4:	pop	{r4, r5, r6, r7, r8, pc}
   2a6c8:	mov	r2, r6
   2a6cc:	mov	r3, r7
   2a6d0:	mov	r0, r4
   2a6d4:	mov	r1, r5
   2a6d8:	pop	{r4, r5, r6, r7, r8, lr}
   2a6dc:	bx	r1

0002a6e0 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   2a6e0:	cmp	r1, #0
   2a6e4:	push	{r4, r5, r6, lr}
   2a6e8:	mov	r4, r0
   2a6ec:	ldrb	r5, [r2, r3]
   2a6f0:	ldrne	r3, [r4, #20]
   2a6f4:	ldr	r0, [sp, #16]
   2a6f8:	addne	r2, r3, #1
   2a6fc:	ldr	ip, [sp, #20]
   2a700:	strne	r2, [r4, #20]
   2a704:	movne	r2, #44	; 0x2c
   2a708:	strbne	r2, [r3]
   2a70c:	mov	r1, r0
   2a710:	mov	r2, ip
   2a714:	mov	r0, r4
   2a718:	ldr	r6, [sp, #24]
   2a71c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a720:	ldrb	r3, [r4, #27]
   2a724:	cmp	r3, #0
   2a728:	beq	2a748 <flatcc_json_printer_bool_enum_struct_field@@Base+0x68>
   2a72c:	ldr	r1, [r4, #20]
   2a730:	mov	r0, r5
   2a734:	bl	28080 <flatcc_json_parser_table_as_root@@Base+0x15f4>
   2a738:	ldr	r3, [r4, #20]
   2a73c:	add	r0, r3, r0
   2a740:	str	r0, [r4, #20]
   2a744:	pop	{r4, r5, r6, pc}
   2a748:	mov	r1, r5
   2a74c:	mov	r0, r4
   2a750:	mov	r3, r6
   2a754:	pop	{r4, r5, r6, lr}
   2a758:	bx	r3

0002a75c <flatcc_json_printer_uint8_vector_field@@Base>:
   2a75c:	push	{r4, r5, r6, r7, r8, lr}
   2a760:	mov	r5, r1
   2a764:	mov	r4, r0
   2a768:	mov	r1, r2
   2a76c:	mov	r0, r5
   2a770:	mov	r6, r3
   2a774:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2a778:	cmp	r0, #0
   2a77c:	popeq	{r4, r5, r6, r7, r8, pc}
   2a780:	ldr	r2, [r5, #16]
   2a784:	mov	r1, r6
   2a788:	cmp	r2, #0
   2a78c:	add	r3, r2, #1
   2a790:	ldrne	r2, [r4, #20]
   2a794:	str	r3, [r5, #16]
   2a798:	addne	r3, r2, #1
   2a79c:	strne	r3, [r4, #20]
   2a7a0:	movne	r3, #44	; 0x2c
   2a7a4:	strbne	r3, [r2]
   2a7a8:	ldr	r2, [r0]
   2a7ac:	add	r7, r0, r2
   2a7b0:	ldr	r5, [r0, r2]
   2a7b4:	ldr	r2, [sp, #24]
   2a7b8:	mov	r0, r4
   2a7bc:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a7c0:	ldr	r3, [r4, #32]
   2a7c4:	cmp	r5, #0
   2a7c8:	add	r3, r3, #1
   2a7cc:	str	r3, [r4, #32]
   2a7d0:	ldr	r3, [r4, #20]
   2a7d4:	add	r2, r3, #1
   2a7d8:	str	r2, [r4, #20]
   2a7dc:	mov	r2, #91	; 0x5b
   2a7e0:	strb	r2, [r3]
   2a7e4:	bne	2a834 <flatcc_json_printer_uint8_vector_field@@Base+0xd8>
   2a7e8:	ldrb	r3, [r4, #25]
   2a7ec:	cmp	r3, #0
   2a7f0:	beq	2a81c <flatcc_json_printer_uint8_vector_field@@Base+0xc0>
   2a7f4:	ldr	r3, [r4, #20]
   2a7f8:	mov	r0, r4
   2a7fc:	add	r2, r3, #1
   2a800:	str	r2, [r4, #20]
   2a804:	mov	r2, #10
   2a808:	strb	r2, [r3]
   2a80c:	ldr	r3, [r4, #32]
   2a810:	sub	r3, r3, #1
   2a814:	str	r3, [r4, #32]
   2a818:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2a81c:	ldr	r3, [r4, #20]
   2a820:	add	r2, r3, #1
   2a824:	str	r2, [r4, #20]
   2a828:	mov	r2, #93	; 0x5d
   2a82c:	strb	r2, [r3]
   2a830:	pop	{r4, r5, r6, r7, r8, pc}
   2a834:	ldrb	r3, [r4, #25]
   2a838:	cmp	r3, #0
   2a83c:	beq	2a8e0 <flatcc_json_printer_uint8_vector_field@@Base+0x184>
   2a840:	ldr	r3, [r4, #20]
   2a844:	mov	r0, r4
   2a848:	add	r2, r3, #1
   2a84c:	str	r2, [r4, #20]
   2a850:	mov	r2, #10
   2a854:	strb	r2, [r3]
   2a858:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2a85c:	ldrb	r0, [r7, #4]
   2a860:	ldr	r1, [r4, #20]
   2a864:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   2a868:	add	r5, r5, #4
   2a86c:	ldr	r3, [r4, #20]
   2a870:	add	r6, r7, #5
   2a874:	add	r5, r7, r5
   2a878:	mov	r8, #10
   2a87c:	mov	r7, #44	; 0x2c
   2a880:	add	r0, r3, r0
   2a884:	str	r0, [r4, #20]
   2a888:	cmp	r6, r5
   2a88c:	beq	2a7e8 <flatcc_json_printer_uint8_vector_field@@Base+0x8c>
   2a890:	ldr	r3, [r4, #20]
   2a894:	add	r2, r3, #1
   2a898:	str	r2, [r4, #20]
   2a89c:	strb	r7, [r3]
   2a8a0:	ldrb	r3, [r4, #25]
   2a8a4:	cmp	r3, #0
   2a8a8:	beq	2a8ec <flatcc_json_printer_uint8_vector_field@@Base+0x190>
   2a8ac:	ldr	r3, [r4, #20]
   2a8b0:	mov	r0, r4
   2a8b4:	add	r2, r3, #1
   2a8b8:	str	r2, [r4, #20]
   2a8bc:	strb	r8, [r3]
   2a8c0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2a8c4:	ldr	r1, [r4, #20]
   2a8c8:	ldrb	r0, [r6], #1
   2a8cc:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   2a8d0:	ldr	r3, [r4, #20]
   2a8d4:	add	r0, r3, r0
   2a8d8:	str	r0, [r4, #20]
   2a8dc:	b	2a888 <flatcc_json_printer_uint8_vector_field@@Base+0x12c>
   2a8e0:	mov	r0, r4
   2a8e4:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2a8e8:	b	2a85c <flatcc_json_printer_uint8_vector_field@@Base+0x100>
   2a8ec:	mov	r0, r4
   2a8f0:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2a8f4:	b	2a8c4 <flatcc_json_printer_uint8_vector_field@@Base+0x168>

0002a8f8 <flatcc_json_printer_utype_vector_field@@Base>:
   2a8f8:	b	2a75c <flatcc_json_printer_uint8_vector_field@@Base>

0002a8fc <flatcc_json_printer_uint16_vector_field@@Base>:
   2a8fc:	push	{r4, r5, r6, r7, r8, lr}
   2a900:	mov	r5, r1
   2a904:	mov	r4, r0
   2a908:	mov	r1, r2
   2a90c:	mov	r0, r5
   2a910:	mov	r7, r3
   2a914:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2a918:	cmp	r0, #0
   2a91c:	popeq	{r4, r5, r6, r7, r8, pc}
   2a920:	ldr	r2, [r5, #16]
   2a924:	mov	r1, r7
   2a928:	cmp	r2, #0
   2a92c:	add	r3, r2, #1
   2a930:	ldrne	r2, [r4, #20]
   2a934:	str	r3, [r5, #16]
   2a938:	addne	r3, r2, #1
   2a93c:	strne	r3, [r4, #20]
   2a940:	movne	r3, #44	; 0x2c
   2a944:	strbne	r3, [r2]
   2a948:	ldr	r2, [r0]
   2a94c:	add	r6, r0, r2
   2a950:	ldr	r5, [r0, r2]
   2a954:	ldr	r2, [sp, #24]
   2a958:	mov	r0, r4
   2a95c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2a960:	ldr	r3, [r4, #32]
   2a964:	cmp	r5, #0
   2a968:	add	r3, r3, #1
   2a96c:	str	r3, [r4, #32]
   2a970:	ldr	r3, [r4, #20]
   2a974:	add	r2, r3, #1
   2a978:	str	r2, [r4, #20]
   2a97c:	mov	r2, #91	; 0x5b
   2a980:	strb	r2, [r3]
   2a984:	bne	2a9d4 <flatcc_json_printer_uint16_vector_field@@Base+0xd8>
   2a988:	ldrb	r3, [r4, #25]
   2a98c:	cmp	r3, #0
   2a990:	beq	2a9bc <flatcc_json_printer_uint16_vector_field@@Base+0xc0>
   2a994:	ldr	r3, [r4, #20]
   2a998:	mov	r0, r4
   2a99c:	add	r2, r3, #1
   2a9a0:	str	r2, [r4, #20]
   2a9a4:	mov	r2, #10
   2a9a8:	strb	r2, [r3]
   2a9ac:	ldr	r3, [r4, #32]
   2a9b0:	sub	r3, r3, #1
   2a9b4:	str	r3, [r4, #32]
   2a9b8:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2a9bc:	ldr	r3, [r4, #20]
   2a9c0:	add	r2, r3, #1
   2a9c4:	str	r2, [r4, #20]
   2a9c8:	mov	r2, #93	; 0x5d
   2a9cc:	strb	r2, [r3]
   2a9d0:	pop	{r4, r5, r6, r7, r8, pc}
   2a9d4:	ldrb	r3, [r4, #25]
   2a9d8:	cmp	r3, #0
   2a9dc:	beq	2aa7c <flatcc_json_printer_uint16_vector_field@@Base+0x180>
   2a9e0:	ldr	r3, [r4, #20]
   2a9e4:	mov	r0, r4
   2a9e8:	add	r2, r3, #1
   2a9ec:	str	r2, [r4, #20]
   2a9f0:	mov	r2, #10
   2a9f4:	strb	r2, [r3]
   2a9f8:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2a9fc:	ldrh	r0, [r6, #4]
   2aa00:	ldr	r1, [r4, #20]
   2aa04:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   2aa08:	ldr	r3, [r4, #20]
   2aa0c:	add	r6, r6, #6
   2aa10:	sub	r5, r5, #1
   2aa14:	mov	r7, #44	; 0x2c
   2aa18:	mov	r8, #10
   2aa1c:	add	r0, r3, r0
   2aa20:	str	r0, [r4, #20]
   2aa24:	subs	r5, r5, #1
   2aa28:	bcc	2a988 <flatcc_json_printer_uint16_vector_field@@Base+0x8c>
   2aa2c:	ldr	r3, [r4, #20]
   2aa30:	add	r2, r3, #1
   2aa34:	str	r2, [r4, #20]
   2aa38:	strb	r7, [r3]
   2aa3c:	ldrb	r3, [r4, #25]
   2aa40:	cmp	r3, #0
   2aa44:	beq	2aa88 <flatcc_json_printer_uint16_vector_field@@Base+0x18c>
   2aa48:	ldr	r3, [r4, #20]
   2aa4c:	mov	r0, r4
   2aa50:	add	r2, r3, #1
   2aa54:	str	r2, [r4, #20]
   2aa58:	strb	r8, [r3]
   2aa5c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2aa60:	ldr	r1, [r4, #20]
   2aa64:	ldrh	r0, [r6], #2
   2aa68:	bl	26a90 <flatcc_json_parser_table_as_root@@Base+0x4>
   2aa6c:	ldr	r3, [r4, #20]
   2aa70:	add	r0, r3, r0
   2aa74:	str	r0, [r4, #20]
   2aa78:	b	2aa24 <flatcc_json_printer_uint16_vector_field@@Base+0x128>
   2aa7c:	mov	r0, r4
   2aa80:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2aa84:	b	2a9fc <flatcc_json_printer_uint16_vector_field@@Base+0x100>
   2aa88:	mov	r0, r4
   2aa8c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2aa90:	b	2aa60 <flatcc_json_printer_uint16_vector_field@@Base+0x164>

0002aa94 <flatcc_json_printer_uint32_vector_field@@Base>:
   2aa94:	push	{r4, r5, r6, r7, r8, lr}
   2aa98:	mov	r5, r1
   2aa9c:	mov	r4, r0
   2aaa0:	mov	r1, r2
   2aaa4:	mov	r0, r5
   2aaa8:	mov	r7, r3
   2aaac:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2aab0:	cmp	r0, #0
   2aab4:	popeq	{r4, r5, r6, r7, r8, pc}
   2aab8:	ldr	r2, [r5, #16]
   2aabc:	mov	r1, r7
   2aac0:	cmp	r2, #0
   2aac4:	add	r3, r2, #1
   2aac8:	ldrne	r2, [r4, #20]
   2aacc:	str	r3, [r5, #16]
   2aad0:	addne	r3, r2, #1
   2aad4:	strne	r3, [r4, #20]
   2aad8:	movne	r3, #44	; 0x2c
   2aadc:	strbne	r3, [r2]
   2aae0:	ldr	r2, [r0]
   2aae4:	add	r6, r0, r2
   2aae8:	ldr	r5, [r0, r2]
   2aaec:	ldr	r2, [sp, #24]
   2aaf0:	mov	r0, r4
   2aaf4:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2aaf8:	ldr	r3, [r4, #32]
   2aafc:	cmp	r5, #0
   2ab00:	add	r3, r3, #1
   2ab04:	str	r3, [r4, #32]
   2ab08:	ldr	r3, [r4, #20]
   2ab0c:	add	r2, r3, #1
   2ab10:	str	r2, [r4, #20]
   2ab14:	mov	r2, #91	; 0x5b
   2ab18:	strb	r2, [r3]
   2ab1c:	bne	2ab6c <flatcc_json_printer_uint32_vector_field@@Base+0xd8>
   2ab20:	ldrb	r3, [r4, #25]
   2ab24:	cmp	r3, #0
   2ab28:	beq	2ab54 <flatcc_json_printer_uint32_vector_field@@Base+0xc0>
   2ab2c:	ldr	r3, [r4, #20]
   2ab30:	mov	r0, r4
   2ab34:	add	r2, r3, #1
   2ab38:	str	r2, [r4, #20]
   2ab3c:	mov	r2, #10
   2ab40:	strb	r2, [r3]
   2ab44:	ldr	r3, [r4, #32]
   2ab48:	sub	r3, r3, #1
   2ab4c:	str	r3, [r4, #32]
   2ab50:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ab54:	ldr	r3, [r4, #20]
   2ab58:	add	r2, r3, #1
   2ab5c:	str	r2, [r4, #20]
   2ab60:	mov	r2, #93	; 0x5d
   2ab64:	strb	r2, [r3]
   2ab68:	pop	{r4, r5, r6, r7, r8, pc}
   2ab6c:	ldrb	r3, [r4, #25]
   2ab70:	cmp	r3, #0
   2ab74:	beq	2ac14 <flatcc_json_printer_uint32_vector_field@@Base+0x180>
   2ab78:	ldr	r3, [r4, #20]
   2ab7c:	mov	r0, r4
   2ab80:	add	r2, r3, #1
   2ab84:	str	r2, [r4, #20]
   2ab88:	mov	r2, #10
   2ab8c:	strb	r2, [r3]
   2ab90:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ab94:	ldr	r0, [r6, #4]
   2ab98:	ldr	r1, [r4, #20]
   2ab9c:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   2aba0:	ldr	r3, [r4, #20]
   2aba4:	add	r6, r6, #8
   2aba8:	sub	r5, r5, #1
   2abac:	mov	r7, #44	; 0x2c
   2abb0:	mov	r8, #10
   2abb4:	add	r0, r3, r0
   2abb8:	str	r0, [r4, #20]
   2abbc:	subs	r5, r5, #1
   2abc0:	bcc	2ab20 <flatcc_json_printer_uint32_vector_field@@Base+0x8c>
   2abc4:	ldr	r3, [r4, #20]
   2abc8:	add	r2, r3, #1
   2abcc:	str	r2, [r4, #20]
   2abd0:	strb	r7, [r3]
   2abd4:	ldrb	r3, [r4, #25]
   2abd8:	cmp	r3, #0
   2abdc:	beq	2ac20 <flatcc_json_printer_uint32_vector_field@@Base+0x18c>
   2abe0:	ldr	r3, [r4, #20]
   2abe4:	mov	r0, r4
   2abe8:	add	r2, r3, #1
   2abec:	str	r2, [r4, #20]
   2abf0:	strb	r8, [r3]
   2abf4:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2abf8:	ldr	r1, [r4, #20]
   2abfc:	ldr	r0, [r6], #4
   2ac00:	bl	26c10 <flatcc_json_parser_table_as_root@@Base+0x184>
   2ac04:	ldr	r3, [r4, #20]
   2ac08:	add	r0, r3, r0
   2ac0c:	str	r0, [r4, #20]
   2ac10:	b	2abbc <flatcc_json_printer_uint32_vector_field@@Base+0x128>
   2ac14:	mov	r0, r4
   2ac18:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2ac1c:	b	2ab94 <flatcc_json_printer_uint32_vector_field@@Base+0x100>
   2ac20:	mov	r0, r4
   2ac24:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2ac28:	b	2abf8 <flatcc_json_printer_uint32_vector_field@@Base+0x164>

0002ac2c <flatcc_json_printer_uint64_vector_field@@Base>:
   2ac2c:	push	{r4, r5, r6, r7, r8, lr}
   2ac30:	mov	r5, r1
   2ac34:	mov	r4, r0
   2ac38:	mov	r1, r2
   2ac3c:	mov	r0, r5
   2ac40:	mov	r7, r3
   2ac44:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2ac48:	cmp	r0, #0
   2ac4c:	popeq	{r4, r5, r6, r7, r8, pc}
   2ac50:	ldr	r2, [r5, #16]
   2ac54:	mov	r1, r7
   2ac58:	cmp	r2, #0
   2ac5c:	add	r3, r2, #1
   2ac60:	ldrne	r2, [r4, #20]
   2ac64:	str	r3, [r5, #16]
   2ac68:	addne	r3, r2, #1
   2ac6c:	strne	r3, [r4, #20]
   2ac70:	movne	r3, #44	; 0x2c
   2ac74:	strbne	r3, [r2]
   2ac78:	ldr	r2, [r0]
   2ac7c:	add	r6, r0, r2
   2ac80:	ldr	r5, [r0, r2]
   2ac84:	ldr	r2, [sp, #24]
   2ac88:	mov	r0, r4
   2ac8c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2ac90:	ldr	r3, [r4, #32]
   2ac94:	cmp	r5, #0
   2ac98:	add	r3, r3, #1
   2ac9c:	str	r3, [r4, #32]
   2aca0:	ldr	r3, [r4, #20]
   2aca4:	add	r2, r3, #1
   2aca8:	str	r2, [r4, #20]
   2acac:	mov	r2, #91	; 0x5b
   2acb0:	strb	r2, [r3]
   2acb4:	bne	2ad04 <flatcc_json_printer_uint64_vector_field@@Base+0xd8>
   2acb8:	ldrb	r3, [r4, #25]
   2acbc:	cmp	r3, #0
   2acc0:	beq	2acec <flatcc_json_printer_uint64_vector_field@@Base+0xc0>
   2acc4:	ldr	r3, [r4, #20]
   2acc8:	mov	r0, r4
   2accc:	add	r2, r3, #1
   2acd0:	str	r2, [r4, #20]
   2acd4:	mov	r2, #10
   2acd8:	strb	r2, [r3]
   2acdc:	ldr	r3, [r4, #32]
   2ace0:	sub	r3, r3, #1
   2ace4:	str	r3, [r4, #32]
   2ace8:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2acec:	ldr	r3, [r4, #20]
   2acf0:	add	r2, r3, #1
   2acf4:	str	r2, [r4, #20]
   2acf8:	mov	r2, #93	; 0x5d
   2acfc:	strb	r2, [r3]
   2ad00:	pop	{r4, r5, r6, r7, r8, pc}
   2ad04:	ldrb	r3, [r4, #25]
   2ad08:	cmp	r3, #0
   2ad0c:	beq	2adac <flatcc_json_printer_uint64_vector_field@@Base+0x180>
   2ad10:	ldr	r3, [r4, #20]
   2ad14:	mov	r0, r4
   2ad18:	add	r2, r3, #1
   2ad1c:	str	r2, [r4, #20]
   2ad20:	mov	r2, #10
   2ad24:	strb	r2, [r3]
   2ad28:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ad2c:	ldrd	r0, [r6, #4]
   2ad30:	ldr	r2, [r4, #20]
   2ad34:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   2ad38:	ldr	r3, [r4, #20]
   2ad3c:	add	r6, r6, #12
   2ad40:	sub	r5, r5, #1
   2ad44:	mov	r7, #44	; 0x2c
   2ad48:	mov	r8, #10
   2ad4c:	add	r0, r3, r0
   2ad50:	str	r0, [r4, #20]
   2ad54:	subs	r5, r5, #1
   2ad58:	bcc	2acb8 <flatcc_json_printer_uint64_vector_field@@Base+0x8c>
   2ad5c:	ldr	r3, [r4, #20]
   2ad60:	add	r2, r3, #1
   2ad64:	str	r2, [r4, #20]
   2ad68:	strb	r7, [r3]
   2ad6c:	ldrb	r3, [r4, #25]
   2ad70:	cmp	r3, #0
   2ad74:	beq	2adb8 <flatcc_json_printer_uint64_vector_field@@Base+0x18c>
   2ad78:	ldr	r3, [r4, #20]
   2ad7c:	mov	r0, r4
   2ad80:	add	r2, r3, #1
   2ad84:	str	r2, [r4, #20]
   2ad88:	strb	r8, [r3]
   2ad8c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ad90:	ldr	r2, [r4, #20]
   2ad94:	ldrd	r0, [r6], #8
   2ad98:	bl	26f6c <flatcc_json_parser_table_as_root@@Base+0x4e0>
   2ad9c:	ldr	r3, [r4, #20]
   2ada0:	add	r0, r3, r0
   2ada4:	str	r0, [r4, #20]
   2ada8:	b	2ad54 <flatcc_json_printer_uint64_vector_field@@Base+0x128>
   2adac:	mov	r0, r4
   2adb0:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2adb4:	b	2ad2c <flatcc_json_printer_uint64_vector_field@@Base+0x100>
   2adb8:	mov	r0, r4
   2adbc:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2adc0:	b	2ad90 <flatcc_json_printer_uint64_vector_field@@Base+0x164>

0002adc4 <flatcc_json_printer_int8_vector_field@@Base>:
   2adc4:	push	{r4, r5, r6, r7, r8, lr}
   2adc8:	mov	r5, r1
   2adcc:	mov	r4, r0
   2add0:	mov	r1, r2
   2add4:	mov	r0, r5
   2add8:	mov	r6, r3
   2addc:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2ade0:	cmp	r0, #0
   2ade4:	popeq	{r4, r5, r6, r7, r8, pc}
   2ade8:	ldr	r2, [r5, #16]
   2adec:	mov	r1, r6
   2adf0:	cmp	r2, #0
   2adf4:	add	r3, r2, #1
   2adf8:	ldrne	r2, [r4, #20]
   2adfc:	str	r3, [r5, #16]
   2ae00:	addne	r3, r2, #1
   2ae04:	strne	r3, [r4, #20]
   2ae08:	movne	r3, #44	; 0x2c
   2ae0c:	strbne	r3, [r2]
   2ae10:	ldr	r2, [r0]
   2ae14:	add	r7, r0, r2
   2ae18:	ldr	r5, [r0, r2]
   2ae1c:	ldr	r2, [sp, #24]
   2ae20:	mov	r0, r4
   2ae24:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2ae28:	ldr	r3, [r4, #32]
   2ae2c:	cmp	r5, #0
   2ae30:	add	r3, r3, #1
   2ae34:	str	r3, [r4, #32]
   2ae38:	ldr	r3, [r4, #20]
   2ae3c:	add	r2, r3, #1
   2ae40:	str	r2, [r4, #20]
   2ae44:	mov	r2, #91	; 0x5b
   2ae48:	strb	r2, [r3]
   2ae4c:	bne	2ae9c <flatcc_json_printer_int8_vector_field@@Base+0xd8>
   2ae50:	ldrb	r3, [r4, #25]
   2ae54:	cmp	r3, #0
   2ae58:	beq	2ae84 <flatcc_json_printer_int8_vector_field@@Base+0xc0>
   2ae5c:	ldr	r3, [r4, #20]
   2ae60:	mov	r0, r4
   2ae64:	add	r2, r3, #1
   2ae68:	str	r2, [r4, #20]
   2ae6c:	mov	r2, #10
   2ae70:	strb	r2, [r3]
   2ae74:	ldr	r3, [r4, #32]
   2ae78:	sub	r3, r3, #1
   2ae7c:	str	r3, [r4, #32]
   2ae80:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ae84:	ldr	r3, [r4, #20]
   2ae88:	add	r2, r3, #1
   2ae8c:	str	r2, [r4, #20]
   2ae90:	mov	r2, #93	; 0x5d
   2ae94:	strb	r2, [r3]
   2ae98:	pop	{r4, r5, r6, r7, r8, pc}
   2ae9c:	ldrb	r3, [r4, #25]
   2aea0:	cmp	r3, #0
   2aea4:	beq	2af48 <flatcc_json_printer_int8_vector_field@@Base+0x184>
   2aea8:	ldr	r3, [r4, #20]
   2aeac:	mov	r0, r4
   2aeb0:	add	r2, r3, #1
   2aeb4:	str	r2, [r4, #20]
   2aeb8:	mov	r2, #10
   2aebc:	strb	r2, [r3]
   2aec0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2aec4:	ldrsb	r0, [r7, #4]
   2aec8:	ldr	r1, [r4, #20]
   2aecc:	bl	27f94 <flatcc_json_parser_table_as_root@@Base+0x1508>
   2aed0:	add	r5, r5, #4
   2aed4:	ldr	r3, [r4, #20]
   2aed8:	add	r6, r7, #5
   2aedc:	add	r5, r7, r5
   2aee0:	mov	r8, #10
   2aee4:	mov	r7, #44	; 0x2c
   2aee8:	add	r0, r3, r0
   2aeec:	str	r0, [r4, #20]
   2aef0:	cmp	r6, r5
   2aef4:	beq	2ae50 <flatcc_json_printer_int8_vector_field@@Base+0x8c>
   2aef8:	ldr	r3, [r4, #20]
   2aefc:	add	r2, r3, #1
   2af00:	str	r2, [r4, #20]
   2af04:	strb	r7, [r3]
   2af08:	ldrb	r3, [r4, #25]
   2af0c:	cmp	r3, #0
   2af10:	beq	2af54 <flatcc_json_printer_int8_vector_field@@Base+0x190>
   2af14:	ldr	r3, [r4, #20]
   2af18:	mov	r0, r4
   2af1c:	add	r2, r3, #1
   2af20:	str	r2, [r4, #20]
   2af24:	strb	r8, [r3]
   2af28:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2af2c:	ldr	r1, [r4, #20]
   2af30:	ldrsb	r0, [r6], #1
   2af34:	bl	27f94 <flatcc_json_parser_table_as_root@@Base+0x1508>
   2af38:	ldr	r3, [r4, #20]
   2af3c:	add	r0, r3, r0
   2af40:	str	r0, [r4, #20]
   2af44:	b	2aef0 <flatcc_json_printer_int8_vector_field@@Base+0x12c>
   2af48:	mov	r0, r4
   2af4c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2af50:	b	2aec4 <flatcc_json_printer_int8_vector_field@@Base+0x100>
   2af54:	mov	r0, r4
   2af58:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2af5c:	b	2af2c <flatcc_json_printer_int8_vector_field@@Base+0x168>

0002af60 <flatcc_json_printer_int16_vector_field@@Base>:
   2af60:	push	{r4, r5, r6, r7, r8, lr}
   2af64:	mov	r5, r1
   2af68:	mov	r4, r0
   2af6c:	mov	r1, r2
   2af70:	mov	r0, r5
   2af74:	mov	r7, r3
   2af78:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2af7c:	cmp	r0, #0
   2af80:	popeq	{r4, r5, r6, r7, r8, pc}
   2af84:	ldr	r2, [r5, #16]
   2af88:	mov	r1, r7
   2af8c:	cmp	r2, #0
   2af90:	add	r3, r2, #1
   2af94:	ldrne	r2, [r4, #20]
   2af98:	str	r3, [r5, #16]
   2af9c:	addne	r3, r2, #1
   2afa0:	strne	r3, [r4, #20]
   2afa4:	movne	r3, #44	; 0x2c
   2afa8:	strbne	r3, [r2]
   2afac:	ldr	r2, [r0]
   2afb0:	add	r6, r0, r2
   2afb4:	ldr	r5, [r0, r2]
   2afb8:	ldr	r2, [sp, #24]
   2afbc:	mov	r0, r4
   2afc0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2afc4:	ldr	r3, [r4, #32]
   2afc8:	cmp	r5, #0
   2afcc:	add	r3, r3, #1
   2afd0:	str	r3, [r4, #32]
   2afd4:	ldr	r3, [r4, #20]
   2afd8:	add	r2, r3, #1
   2afdc:	str	r2, [r4, #20]
   2afe0:	mov	r2, #91	; 0x5b
   2afe4:	strb	r2, [r3]
   2afe8:	bne	2b038 <flatcc_json_printer_int16_vector_field@@Base+0xd8>
   2afec:	ldrb	r3, [r4, #25]
   2aff0:	cmp	r3, #0
   2aff4:	beq	2b020 <flatcc_json_printer_int16_vector_field@@Base+0xc0>
   2aff8:	ldr	r3, [r4, #20]
   2affc:	mov	r0, r4
   2b000:	add	r2, r3, #1
   2b004:	str	r2, [r4, #20]
   2b008:	mov	r2, #10
   2b00c:	strb	r2, [r3]
   2b010:	ldr	r3, [r4, #32]
   2b014:	sub	r3, r3, #1
   2b018:	str	r3, [r4, #32]
   2b01c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b020:	ldr	r3, [r4, #20]
   2b024:	add	r2, r3, #1
   2b028:	str	r2, [r4, #20]
   2b02c:	mov	r2, #93	; 0x5d
   2b030:	strb	r2, [r3]
   2b034:	pop	{r4, r5, r6, r7, r8, pc}
   2b038:	ldrb	r3, [r4, #25]
   2b03c:	cmp	r3, #0
   2b040:	beq	2b0e0 <flatcc_json_printer_int16_vector_field@@Base+0x180>
   2b044:	ldr	r3, [r4, #20]
   2b048:	mov	r0, r4
   2b04c:	add	r2, r3, #1
   2b050:	str	r2, [r4, #20]
   2b054:	mov	r2, #10
   2b058:	strb	r2, [r3]
   2b05c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b060:	ldrsh	r0, [r6, #4]
   2b064:	ldr	r1, [r4, #20]
   2b068:	bl	275dc <flatcc_json_parser_table_as_root@@Base+0xb50>
   2b06c:	ldr	r3, [r4, #20]
   2b070:	add	r6, r6, #6
   2b074:	sub	r5, r5, #1
   2b078:	mov	r7, #44	; 0x2c
   2b07c:	mov	r8, #10
   2b080:	add	r0, r3, r0
   2b084:	str	r0, [r4, #20]
   2b088:	subs	r5, r5, #1
   2b08c:	bcc	2afec <flatcc_json_printer_int16_vector_field@@Base+0x8c>
   2b090:	ldr	r3, [r4, #20]
   2b094:	add	r2, r3, #1
   2b098:	str	r2, [r4, #20]
   2b09c:	strb	r7, [r3]
   2b0a0:	ldrb	r3, [r4, #25]
   2b0a4:	cmp	r3, #0
   2b0a8:	beq	2b0ec <flatcc_json_printer_int16_vector_field@@Base+0x18c>
   2b0ac:	ldr	r3, [r4, #20]
   2b0b0:	mov	r0, r4
   2b0b4:	add	r2, r3, #1
   2b0b8:	str	r2, [r4, #20]
   2b0bc:	strb	r8, [r3]
   2b0c0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b0c4:	ldr	r1, [r4, #20]
   2b0c8:	ldrsh	r0, [r6], #2
   2b0cc:	bl	275dc <flatcc_json_parser_table_as_root@@Base+0xb50>
   2b0d0:	ldr	r3, [r4, #20]
   2b0d4:	add	r0, r3, r0
   2b0d8:	str	r0, [r4, #20]
   2b0dc:	b	2b088 <flatcc_json_printer_int16_vector_field@@Base+0x128>
   2b0e0:	mov	r0, r4
   2b0e4:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b0e8:	b	2b060 <flatcc_json_printer_int16_vector_field@@Base+0x100>
   2b0ec:	mov	r0, r4
   2b0f0:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b0f4:	b	2b0c4 <flatcc_json_printer_int16_vector_field@@Base+0x164>

0002b0f8 <flatcc_json_printer_int32_vector_field@@Base>:
   2b0f8:	push	{r4, r5, r6, r7, r8, lr}
   2b0fc:	mov	r5, r1
   2b100:	mov	r4, r0
   2b104:	mov	r1, r2
   2b108:	mov	r0, r5
   2b10c:	mov	r7, r3
   2b110:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2b114:	cmp	r0, #0
   2b118:	popeq	{r4, r5, r6, r7, r8, pc}
   2b11c:	ldr	r2, [r5, #16]
   2b120:	mov	r1, r7
   2b124:	cmp	r2, #0
   2b128:	add	r3, r2, #1
   2b12c:	ldrne	r2, [r4, #20]
   2b130:	str	r3, [r5, #16]
   2b134:	addne	r3, r2, #1
   2b138:	strne	r3, [r4, #20]
   2b13c:	movne	r3, #44	; 0x2c
   2b140:	strbne	r3, [r2]
   2b144:	ldr	r2, [r0]
   2b148:	add	r6, r0, r2
   2b14c:	ldr	r5, [r0, r2]
   2b150:	ldr	r2, [sp, #24]
   2b154:	mov	r0, r4
   2b158:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2b15c:	ldr	r3, [r4, #32]
   2b160:	cmp	r5, #0
   2b164:	add	r3, r3, #1
   2b168:	str	r3, [r4, #32]
   2b16c:	ldr	r3, [r4, #20]
   2b170:	add	r2, r3, #1
   2b174:	str	r2, [r4, #20]
   2b178:	mov	r2, #91	; 0x5b
   2b17c:	strb	r2, [r3]
   2b180:	bne	2b1d0 <flatcc_json_printer_int32_vector_field@@Base+0xd8>
   2b184:	ldrb	r3, [r4, #25]
   2b188:	cmp	r3, #0
   2b18c:	beq	2b1b8 <flatcc_json_printer_int32_vector_field@@Base+0xc0>
   2b190:	ldr	r3, [r4, #20]
   2b194:	mov	r0, r4
   2b198:	add	r2, r3, #1
   2b19c:	str	r2, [r4, #20]
   2b1a0:	mov	r2, #10
   2b1a4:	strb	r2, [r3]
   2b1a8:	ldr	r3, [r4, #32]
   2b1ac:	sub	r3, r3, #1
   2b1b0:	str	r3, [r4, #32]
   2b1b4:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b1b8:	ldr	r3, [r4, #20]
   2b1bc:	add	r2, r3, #1
   2b1c0:	str	r2, [r4, #20]
   2b1c4:	mov	r2, #93	; 0x5d
   2b1c8:	strb	r2, [r3]
   2b1cc:	pop	{r4, r5, r6, r7, r8, pc}
   2b1d0:	ldrb	r3, [r4, #25]
   2b1d4:	cmp	r3, #0
   2b1d8:	beq	2b278 <flatcc_json_printer_int32_vector_field@@Base+0x180>
   2b1dc:	ldr	r3, [r4, #20]
   2b1e0:	mov	r0, r4
   2b1e4:	add	r2, r3, #1
   2b1e8:	str	r2, [r4, #20]
   2b1ec:	mov	r2, #10
   2b1f0:	strb	r2, [r3]
   2b1f4:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b1f8:	ldr	r0, [r6, #4]
   2b1fc:	ldr	r1, [r4, #20]
   2b200:	bl	2760c <flatcc_json_parser_table_as_root@@Base+0xb80>
   2b204:	ldr	r3, [r4, #20]
   2b208:	add	r6, r6, #8
   2b20c:	sub	r5, r5, #1
   2b210:	mov	r7, #44	; 0x2c
   2b214:	mov	r8, #10
   2b218:	add	r0, r3, r0
   2b21c:	str	r0, [r4, #20]
   2b220:	subs	r5, r5, #1
   2b224:	bcc	2b184 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   2b228:	ldr	r3, [r4, #20]
   2b22c:	add	r2, r3, #1
   2b230:	str	r2, [r4, #20]
   2b234:	strb	r7, [r3]
   2b238:	ldrb	r3, [r4, #25]
   2b23c:	cmp	r3, #0
   2b240:	beq	2b284 <flatcc_json_printer_int32_vector_field@@Base+0x18c>
   2b244:	ldr	r3, [r4, #20]
   2b248:	mov	r0, r4
   2b24c:	add	r2, r3, #1
   2b250:	str	r2, [r4, #20]
   2b254:	strb	r8, [r3]
   2b258:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b25c:	ldr	r1, [r4, #20]
   2b260:	ldr	r0, [r6], #4
   2b264:	bl	2760c <flatcc_json_parser_table_as_root@@Base+0xb80>
   2b268:	ldr	r3, [r4, #20]
   2b26c:	add	r0, r3, r0
   2b270:	str	r0, [r4, #20]
   2b274:	b	2b220 <flatcc_json_printer_int32_vector_field@@Base+0x128>
   2b278:	mov	r0, r4
   2b27c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b280:	b	2b1f8 <flatcc_json_printer_int32_vector_field@@Base+0x100>
   2b284:	mov	r0, r4
   2b288:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b28c:	b	2b25c <flatcc_json_printer_int32_vector_field@@Base+0x164>

0002b290 <flatcc_json_printer_int64_vector_field@@Base>:
   2b290:	push	{r4, r5, r6, r7, r8, lr}
   2b294:	mov	r5, r1
   2b298:	mov	r4, r0
   2b29c:	mov	r1, r2
   2b2a0:	mov	r0, r5
   2b2a4:	mov	r7, r3
   2b2a8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2b2ac:	cmp	r0, #0
   2b2b0:	popeq	{r4, r5, r6, r7, r8, pc}
   2b2b4:	ldr	r2, [r5, #16]
   2b2b8:	mov	r1, r7
   2b2bc:	cmp	r2, #0
   2b2c0:	add	r3, r2, #1
   2b2c4:	ldrne	r2, [r4, #20]
   2b2c8:	str	r3, [r5, #16]
   2b2cc:	addne	r3, r2, #1
   2b2d0:	strne	r3, [r4, #20]
   2b2d4:	movne	r3, #44	; 0x2c
   2b2d8:	strbne	r3, [r2]
   2b2dc:	ldr	r2, [r0]
   2b2e0:	add	r6, r0, r2
   2b2e4:	ldr	r5, [r0, r2]
   2b2e8:	ldr	r2, [sp, #24]
   2b2ec:	mov	r0, r4
   2b2f0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2b2f4:	ldr	r3, [r4, #32]
   2b2f8:	cmp	r5, #0
   2b2fc:	add	r3, r3, #1
   2b300:	str	r3, [r4, #32]
   2b304:	ldr	r3, [r4, #20]
   2b308:	add	r2, r3, #1
   2b30c:	str	r2, [r4, #20]
   2b310:	mov	r2, #91	; 0x5b
   2b314:	strb	r2, [r3]
   2b318:	bne	2b368 <flatcc_json_printer_int64_vector_field@@Base+0xd8>
   2b31c:	ldrb	r3, [r4, #25]
   2b320:	cmp	r3, #0
   2b324:	beq	2b350 <flatcc_json_printer_int64_vector_field@@Base+0xc0>
   2b328:	ldr	r3, [r4, #20]
   2b32c:	mov	r0, r4
   2b330:	add	r2, r3, #1
   2b334:	str	r2, [r4, #20]
   2b338:	mov	r2, #10
   2b33c:	strb	r2, [r3]
   2b340:	ldr	r3, [r4, #32]
   2b344:	sub	r3, r3, #1
   2b348:	str	r3, [r4, #32]
   2b34c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b350:	ldr	r3, [r4, #20]
   2b354:	add	r2, r3, #1
   2b358:	str	r2, [r4, #20]
   2b35c:	mov	r2, #93	; 0x5d
   2b360:	strb	r2, [r3]
   2b364:	pop	{r4, r5, r6, r7, r8, pc}
   2b368:	ldrb	r3, [r4, #25]
   2b36c:	cmp	r3, #0
   2b370:	beq	2b410 <flatcc_json_printer_int64_vector_field@@Base+0x180>
   2b374:	ldr	r3, [r4, #20]
   2b378:	mov	r0, r4
   2b37c:	add	r2, r3, #1
   2b380:	str	r2, [r4, #20]
   2b384:	mov	r2, #10
   2b388:	strb	r2, [r3]
   2b38c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b390:	ldrd	r0, [r6, #4]
   2b394:	ldr	r2, [r4, #20]
   2b398:	bl	27634 <flatcc_json_parser_table_as_root@@Base+0xba8>
   2b39c:	ldr	r3, [r4, #20]
   2b3a0:	add	r6, r6, #12
   2b3a4:	sub	r5, r5, #1
   2b3a8:	mov	r7, #44	; 0x2c
   2b3ac:	mov	r8, #10
   2b3b0:	add	r0, r3, r0
   2b3b4:	str	r0, [r4, #20]
   2b3b8:	subs	r5, r5, #1
   2b3bc:	bcc	2b31c <flatcc_json_printer_int64_vector_field@@Base+0x8c>
   2b3c0:	ldr	r3, [r4, #20]
   2b3c4:	add	r2, r3, #1
   2b3c8:	str	r2, [r4, #20]
   2b3cc:	strb	r7, [r3]
   2b3d0:	ldrb	r3, [r4, #25]
   2b3d4:	cmp	r3, #0
   2b3d8:	beq	2b41c <flatcc_json_printer_int64_vector_field@@Base+0x18c>
   2b3dc:	ldr	r3, [r4, #20]
   2b3e0:	mov	r0, r4
   2b3e4:	add	r2, r3, #1
   2b3e8:	str	r2, [r4, #20]
   2b3ec:	strb	r8, [r3]
   2b3f0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b3f4:	ldr	r2, [r4, #20]
   2b3f8:	ldrd	r0, [r6], #8
   2b3fc:	bl	27634 <flatcc_json_parser_table_as_root@@Base+0xba8>
   2b400:	ldr	r3, [r4, #20]
   2b404:	add	r0, r3, r0
   2b408:	str	r0, [r4, #20]
   2b40c:	b	2b3b8 <flatcc_json_printer_int64_vector_field@@Base+0x128>
   2b410:	mov	r0, r4
   2b414:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b418:	b	2b390 <flatcc_json_printer_int64_vector_field@@Base+0x100>
   2b41c:	mov	r0, r4
   2b420:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b424:	b	2b3f4 <flatcc_json_printer_int64_vector_field@@Base+0x164>

0002b428 <flatcc_json_printer_bool_vector_field@@Base>:
   2b428:	push	{r4, r5, r6, r7, r8, lr}
   2b42c:	mov	r5, r1
   2b430:	mov	r4, r0
   2b434:	mov	r1, r2
   2b438:	mov	r0, r5
   2b43c:	mov	r6, r3
   2b440:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2b444:	cmp	r0, #0
   2b448:	popeq	{r4, r5, r6, r7, r8, pc}
   2b44c:	ldr	r2, [r5, #16]
   2b450:	mov	r1, r6
   2b454:	cmp	r2, #0
   2b458:	add	r3, r2, #1
   2b45c:	ldrne	r2, [r4, #20]
   2b460:	str	r3, [r5, #16]
   2b464:	addne	r3, r2, #1
   2b468:	strne	r3, [r4, #20]
   2b46c:	movne	r3, #44	; 0x2c
   2b470:	strbne	r3, [r2]
   2b474:	ldr	r2, [r0]
   2b478:	add	r7, r0, r2
   2b47c:	ldr	r5, [r0, r2]
   2b480:	ldr	r2, [sp, #24]
   2b484:	mov	r0, r4
   2b488:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2b48c:	ldr	r3, [r4, #32]
   2b490:	cmp	r5, #0
   2b494:	add	r3, r3, #1
   2b498:	str	r3, [r4, #32]
   2b49c:	ldr	r3, [r4, #20]
   2b4a0:	add	r2, r3, #1
   2b4a4:	str	r2, [r4, #20]
   2b4a8:	mov	r2, #91	; 0x5b
   2b4ac:	strb	r2, [r3]
   2b4b0:	bne	2b500 <flatcc_json_printer_bool_vector_field@@Base+0xd8>
   2b4b4:	ldrb	r3, [r4, #25]
   2b4b8:	cmp	r3, #0
   2b4bc:	beq	2b4e8 <flatcc_json_printer_bool_vector_field@@Base+0xc0>
   2b4c0:	ldr	r3, [r4, #20]
   2b4c4:	mov	r0, r4
   2b4c8:	add	r2, r3, #1
   2b4cc:	str	r2, [r4, #20]
   2b4d0:	mov	r2, #10
   2b4d4:	strb	r2, [r3]
   2b4d8:	ldr	r3, [r4, #32]
   2b4dc:	sub	r3, r3, #1
   2b4e0:	str	r3, [r4, #32]
   2b4e4:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b4e8:	ldr	r3, [r4, #20]
   2b4ec:	add	r2, r3, #1
   2b4f0:	str	r2, [r4, #20]
   2b4f4:	mov	r2, #93	; 0x5d
   2b4f8:	strb	r2, [r3]
   2b4fc:	pop	{r4, r5, r6, r7, r8, pc}
   2b500:	ldrb	r3, [r4, #25]
   2b504:	cmp	r3, #0
   2b508:	beq	2b5ac <flatcc_json_printer_bool_vector_field@@Base+0x184>
   2b50c:	ldr	r3, [r4, #20]
   2b510:	mov	r0, r4
   2b514:	add	r2, r3, #1
   2b518:	str	r2, [r4, #20]
   2b51c:	mov	r2, #10
   2b520:	strb	r2, [r3]
   2b524:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b528:	ldrb	r0, [r7, #4]
   2b52c:	ldr	r1, [r4, #20]
   2b530:	bl	28080 <flatcc_json_parser_table_as_root@@Base+0x15f4>
   2b534:	add	r5, r5, #4
   2b538:	ldr	r3, [r4, #20]
   2b53c:	add	r6, r7, #5
   2b540:	add	r5, r7, r5
   2b544:	mov	r8, #10
   2b548:	mov	r7, #44	; 0x2c
   2b54c:	add	r0, r3, r0
   2b550:	str	r0, [r4, #20]
   2b554:	cmp	r6, r5
   2b558:	beq	2b4b4 <flatcc_json_printer_bool_vector_field@@Base+0x8c>
   2b55c:	ldr	r3, [r4, #20]
   2b560:	add	r2, r3, #1
   2b564:	str	r2, [r4, #20]
   2b568:	strb	r7, [r3]
   2b56c:	ldrb	r3, [r4, #25]
   2b570:	cmp	r3, #0
   2b574:	beq	2b5b8 <flatcc_json_printer_bool_vector_field@@Base+0x190>
   2b578:	ldr	r3, [r4, #20]
   2b57c:	mov	r0, r4
   2b580:	add	r2, r3, #1
   2b584:	str	r2, [r4, #20]
   2b588:	strb	r8, [r3]
   2b58c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b590:	ldr	r1, [r4, #20]
   2b594:	ldrb	r0, [r6], #1
   2b598:	bl	28080 <flatcc_json_parser_table_as_root@@Base+0x15f4>
   2b59c:	ldr	r3, [r4, #20]
   2b5a0:	add	r0, r3, r0
   2b5a4:	str	r0, [r4, #20]
   2b5a8:	b	2b554 <flatcc_json_printer_bool_vector_field@@Base+0x12c>
   2b5ac:	mov	r0, r4
   2b5b0:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b5b4:	b	2b528 <flatcc_json_printer_bool_vector_field@@Base+0x100>
   2b5b8:	mov	r0, r4
   2b5bc:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b5c0:	b	2b590 <flatcc_json_printer_bool_vector_field@@Base+0x168>

0002b5c4 <flatcc_json_printer_float_vector_field@@Base>:
   2b5c4:	push	{r4, r5, r6, r7, r8, lr}
   2b5c8:	mov	r5, r1
   2b5cc:	mov	r4, r0
   2b5d0:	mov	r1, r2
   2b5d4:	mov	r0, r5
   2b5d8:	mov	r7, r3
   2b5dc:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2b5e0:	cmp	r0, #0
   2b5e4:	popeq	{r4, r5, r6, r7, r8, pc}
   2b5e8:	ldr	r2, [r5, #16]
   2b5ec:	mov	r1, r7
   2b5f0:	cmp	r2, #0
   2b5f4:	add	r3, r2, #1
   2b5f8:	ldrne	r2, [r4, #20]
   2b5fc:	str	r3, [r5, #16]
   2b600:	addne	r3, r2, #1
   2b604:	strne	r3, [r4, #20]
   2b608:	movne	r3, #44	; 0x2c
   2b60c:	strbne	r3, [r2]
   2b610:	ldr	r2, [r0]
   2b614:	add	r6, r0, r2
   2b618:	ldr	r5, [r0, r2]
   2b61c:	ldr	r2, [sp, #24]
   2b620:	mov	r0, r4
   2b624:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2b628:	ldr	r3, [r4, #32]
   2b62c:	cmp	r5, #0
   2b630:	add	r3, r3, #1
   2b634:	str	r3, [r4, #32]
   2b638:	ldr	r3, [r4, #20]
   2b63c:	add	r2, r3, #1
   2b640:	str	r2, [r4, #20]
   2b644:	mov	r2, #91	; 0x5b
   2b648:	strb	r2, [r3]
   2b64c:	bne	2b69c <flatcc_json_printer_float_vector_field@@Base+0xd8>
   2b650:	ldrb	r3, [r4, #25]
   2b654:	cmp	r3, #0
   2b658:	beq	2b684 <flatcc_json_printer_float_vector_field@@Base+0xc0>
   2b65c:	ldr	r3, [r4, #20]
   2b660:	mov	r0, r4
   2b664:	add	r2, r3, #1
   2b668:	str	r2, [r4, #20]
   2b66c:	mov	r2, #10
   2b670:	strb	r2, [r3]
   2b674:	ldr	r3, [r4, #32]
   2b678:	sub	r3, r3, #1
   2b67c:	str	r3, [r4, #32]
   2b680:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b684:	ldr	r3, [r4, #20]
   2b688:	add	r2, r3, #1
   2b68c:	str	r2, [r4, #20]
   2b690:	mov	r2, #93	; 0x5d
   2b694:	strb	r2, [r3]
   2b698:	pop	{r4, r5, r6, r7, r8, pc}
   2b69c:	ldrb	r3, [r4, #25]
   2b6a0:	cmp	r3, #0
   2b6a4:	beq	2b74c <flatcc_json_printer_float_vector_field@@Base+0x188>
   2b6a8:	ldr	r3, [r4, #20]
   2b6ac:	mov	r0, r4
   2b6b0:	add	r2, r3, #1
   2b6b4:	str	r2, [r4, #20]
   2b6b8:	mov	r2, #10
   2b6bc:	strb	r2, [r3]
   2b6c0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b6c4:	vldr	s0, [r6, #4]
   2b6c8:	ldr	r0, [r4, #20]
   2b6cc:	add	r6, r6, #8
   2b6d0:	sub	r5, r5, #1
   2b6d4:	vcvt.f64.f32	d0, s0
   2b6d8:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   2b6dc:	ldr	r3, [r4, #20]
   2b6e0:	mov	r7, #44	; 0x2c
   2b6e4:	mov	r8, #10
   2b6e8:	add	r0, r3, r0
   2b6ec:	str	r0, [r4, #20]
   2b6f0:	subs	r5, r5, #1
   2b6f4:	bcc	2b650 <flatcc_json_printer_float_vector_field@@Base+0x8c>
   2b6f8:	ldr	r3, [r4, #20]
   2b6fc:	add	r2, r3, #1
   2b700:	str	r2, [r4, #20]
   2b704:	strb	r7, [r3]
   2b708:	ldrb	r3, [r4, #25]
   2b70c:	cmp	r3, #0
   2b710:	beq	2b758 <flatcc_json_printer_float_vector_field@@Base+0x194>
   2b714:	ldr	r3, [r4, #20]
   2b718:	mov	r0, r4
   2b71c:	add	r2, r3, #1
   2b720:	str	r2, [r4, #20]
   2b724:	strb	r8, [r3]
   2b728:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b72c:	vldmia	r6!, {s0}
   2b730:	ldr	r0, [r4, #20]
   2b734:	vcvt.f64.f32	d0, s0
   2b738:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   2b73c:	ldr	r3, [r4, #20]
   2b740:	add	r0, r3, r0
   2b744:	str	r0, [r4, #20]
   2b748:	b	2b6f0 <flatcc_json_printer_float_vector_field@@Base+0x12c>
   2b74c:	mov	r0, r4
   2b750:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b754:	b	2b6c4 <flatcc_json_printer_float_vector_field@@Base+0x100>
   2b758:	mov	r0, r4
   2b75c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b760:	b	2b72c <flatcc_json_printer_float_vector_field@@Base+0x168>

0002b764 <flatcc_json_printer_double_vector_field@@Base>:
   2b764:	push	{r4, r5, r6, r7, r8, lr}
   2b768:	mov	r5, r1
   2b76c:	mov	r4, r0
   2b770:	mov	r1, r2
   2b774:	mov	r0, r5
   2b778:	mov	r7, r3
   2b77c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2b780:	cmp	r0, #0
   2b784:	popeq	{r4, r5, r6, r7, r8, pc}
   2b788:	ldr	r2, [r5, #16]
   2b78c:	mov	r1, r7
   2b790:	cmp	r2, #0
   2b794:	add	r3, r2, #1
   2b798:	ldrne	r2, [r4, #20]
   2b79c:	str	r3, [r5, #16]
   2b7a0:	addne	r3, r2, #1
   2b7a4:	strne	r3, [r4, #20]
   2b7a8:	movne	r3, #44	; 0x2c
   2b7ac:	strbne	r3, [r2]
   2b7b0:	ldr	r2, [r0]
   2b7b4:	add	r6, r0, r2
   2b7b8:	ldr	r5, [r0, r2]
   2b7bc:	ldr	r2, [sp, #24]
   2b7c0:	mov	r0, r4
   2b7c4:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2b7c8:	ldr	r3, [r4, #32]
   2b7cc:	cmp	r5, #0
   2b7d0:	add	r3, r3, #1
   2b7d4:	str	r3, [r4, #32]
   2b7d8:	ldr	r3, [r4, #20]
   2b7dc:	add	r2, r3, #1
   2b7e0:	str	r2, [r4, #20]
   2b7e4:	mov	r2, #91	; 0x5b
   2b7e8:	strb	r2, [r3]
   2b7ec:	bne	2b83c <flatcc_json_printer_double_vector_field@@Base+0xd8>
   2b7f0:	ldrb	r3, [r4, #25]
   2b7f4:	cmp	r3, #0
   2b7f8:	beq	2b824 <flatcc_json_printer_double_vector_field@@Base+0xc0>
   2b7fc:	ldr	r3, [r4, #20]
   2b800:	mov	r0, r4
   2b804:	add	r2, r3, #1
   2b808:	str	r2, [r4, #20]
   2b80c:	mov	r2, #10
   2b810:	strb	r2, [r3]
   2b814:	ldr	r3, [r4, #32]
   2b818:	sub	r3, r3, #1
   2b81c:	str	r3, [r4, #32]
   2b820:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b824:	ldr	r3, [r4, #20]
   2b828:	add	r2, r3, #1
   2b82c:	str	r2, [r4, #20]
   2b830:	mov	r2, #93	; 0x5d
   2b834:	strb	r2, [r3]
   2b838:	pop	{r4, r5, r6, r7, r8, pc}
   2b83c:	ldrb	r3, [r4, #25]
   2b840:	cmp	r3, #0
   2b844:	beq	2b8e4 <flatcc_json_printer_double_vector_field@@Base+0x180>
   2b848:	ldr	r3, [r4, #20]
   2b84c:	mov	r0, r4
   2b850:	add	r2, r3, #1
   2b854:	str	r2, [r4, #20]
   2b858:	mov	r2, #10
   2b85c:	strb	r2, [r3]
   2b860:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b864:	vldr	d0, [r6, #4]
   2b868:	ldr	r0, [r4, #20]
   2b86c:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   2b870:	ldr	r3, [r4, #20]
   2b874:	add	r6, r6, #12
   2b878:	sub	r5, r5, #1
   2b87c:	mov	r7, #44	; 0x2c
   2b880:	mov	r8, #10
   2b884:	add	r0, r3, r0
   2b888:	str	r0, [r4, #20]
   2b88c:	subs	r5, r5, #1
   2b890:	bcc	2b7f0 <flatcc_json_printer_double_vector_field@@Base+0x8c>
   2b894:	ldr	r3, [r4, #20]
   2b898:	add	r2, r3, #1
   2b89c:	str	r2, [r4, #20]
   2b8a0:	strb	r7, [r3]
   2b8a4:	ldrb	r3, [r4, #25]
   2b8a8:	cmp	r3, #0
   2b8ac:	beq	2b8f0 <flatcc_json_printer_double_vector_field@@Base+0x18c>
   2b8b0:	ldr	r3, [r4, #20]
   2b8b4:	mov	r0, r4
   2b8b8:	add	r2, r3, #1
   2b8bc:	str	r2, [r4, #20]
   2b8c0:	strb	r8, [r3]
   2b8c4:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b8c8:	ldr	r0, [r4, #20]
   2b8cc:	vldmia	r6!, {d0}
   2b8d0:	bl	283ac <flatcc_json_parser_table_as_root@@Base+0x1920>
   2b8d4:	ldr	r3, [r4, #20]
   2b8d8:	add	r0, r3, r0
   2b8dc:	str	r0, [r4, #20]
   2b8e0:	b	2b88c <flatcc_json_printer_double_vector_field@@Base+0x128>
   2b8e4:	mov	r0, r4
   2b8e8:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b8ec:	b	2b864 <flatcc_json_printer_double_vector_field@@Base+0x100>
   2b8f0:	mov	r0, r4
   2b8f4:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2b8f8:	b	2b8c8 <flatcc_json_printer_double_vector_field@@Base+0x164>

0002b8fc <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   2b8fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b900:	ldrb	lr, [r0, #27]
   2b904:	ldr	r9, [sp, #32]
   2b908:	ldr	r7, [sp, #36]	; 0x24
   2b90c:	cmp	lr, #0
   2b910:	beq	2b91c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20>
   2b914:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2b918:	b	2a75c <flatcc_json_printer_uint8_vector_field@@Base>
   2b91c:	mov	r5, r1
   2b920:	mov	r4, r0
   2b924:	mov	r1, r2
   2b928:	mov	r0, r5
   2b92c:	mov	r6, r3
   2b930:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2b934:	cmp	r0, #0
   2b938:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b93c:	ldr	r3, [r5, #16]
   2b940:	mov	r1, r6
   2b944:	cmp	r3, #0
   2b948:	add	r2, r3, #1
   2b94c:	ldrne	r3, [r4, #20]
   2b950:	str	r2, [r5, #16]
   2b954:	addne	r2, r3, #1
   2b958:	strne	r2, [r4, #20]
   2b95c:	movne	r2, #44	; 0x2c
   2b960:	strbne	r2, [r3]
   2b964:	ldr	r3, [r0]
   2b968:	mov	r2, r9
   2b96c:	add	r8, r0, r3
   2b970:	ldr	r5, [r0, r3]
   2b974:	mov	r0, r4
   2b978:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2b97c:	ldr	r3, [r4, #32]
   2b980:	cmp	r5, #0
   2b984:	add	r3, r3, #1
   2b988:	str	r3, [r4, #32]
   2b98c:	ldr	r3, [r4, #20]
   2b990:	add	r2, r3, #1
   2b994:	str	r2, [r4, #20]
   2b998:	mov	r2, #91	; 0x5b
   2b99c:	strb	r2, [r3]
   2b9a0:	bne	2b9f0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   2b9a4:	ldrb	r3, [r4, #25]
   2b9a8:	cmp	r3, #0
   2b9ac:	beq	2b9d8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xdc>
   2b9b0:	ldr	r3, [r4, #20]
   2b9b4:	mov	r0, r4
   2b9b8:	add	r2, r3, #1
   2b9bc:	str	r2, [r4, #20]
   2b9c0:	mov	r2, #10
   2b9c4:	strb	r2, [r3]
   2b9c8:	ldr	r3, [r4, #32]
   2b9cc:	sub	r3, r3, #1
   2b9d0:	str	r3, [r4, #32]
   2b9d4:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2b9d8:	ldr	r3, [r4, #20]
   2b9dc:	add	r2, r3, #1
   2b9e0:	str	r2, [r4, #20]
   2b9e4:	mov	r2, #93	; 0x5d
   2b9e8:	strb	r2, [r3]
   2b9ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2b9f0:	ldrb	r3, [r4, #25]
   2b9f4:	cmp	r3, #0
   2b9f8:	beq	2ba84 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   2b9fc:	ldr	r3, [r4, #20]
   2ba00:	mov	r0, r4
   2ba04:	add	r2, r3, #1
   2ba08:	str	r2, [r4, #20]
   2ba0c:	mov	r2, #10
   2ba10:	strb	r2, [r3]
   2ba14:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ba18:	ldrb	r1, [r8, #4]
   2ba1c:	mov	r0, r4
   2ba20:	blx	r7
   2ba24:	add	r5, r5, #4
   2ba28:	add	r6, r8, #5
   2ba2c:	add	r5, r8, r5
   2ba30:	mov	r9, #10
   2ba34:	mov	r8, #44	; 0x2c
   2ba38:	cmp	r6, r5
   2ba3c:	beq	2b9a4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xa8>
   2ba40:	ldr	r3, [r4, #20]
   2ba44:	add	r2, r3, #1
   2ba48:	str	r2, [r4, #20]
   2ba4c:	strb	r8, [r3]
   2ba50:	ldrb	r3, [r4, #25]
   2ba54:	cmp	r3, #0
   2ba58:	beq	2ba90 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   2ba5c:	ldr	r3, [r4, #20]
   2ba60:	mov	r0, r4
   2ba64:	add	r2, r3, #1
   2ba68:	str	r2, [r4, #20]
   2ba6c:	strb	r9, [r3]
   2ba70:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ba74:	ldrb	r1, [r6], #1
   2ba78:	mov	r0, r4
   2ba7c:	blx	r7
   2ba80:	b	2ba38 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x13c>
   2ba84:	mov	r0, r4
   2ba88:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2ba8c:	b	2ba18 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   2ba90:	mov	r0, r4
   2ba94:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2ba98:	b	2ba74 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x178>

0002ba9c <flatcc_json_printer_utype_enum_vector_field@@Base>:
   2ba9c:	b	2b8fc <flatcc_json_printer_uint8_enum_vector_field@@Base>

0002baa0 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   2baa0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2baa4:	ldrb	lr, [r0, #27]
   2baa8:	ldr	r9, [sp, #32]
   2baac:	ldr	r7, [sp, #36]	; 0x24
   2bab0:	cmp	lr, #0
   2bab4:	beq	2bac0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x20>
   2bab8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2babc:	b	2a8fc <flatcc_json_printer_uint16_vector_field@@Base>
   2bac0:	mov	r5, r1
   2bac4:	mov	r4, r0
   2bac8:	mov	r1, r2
   2bacc:	mov	r0, r5
   2bad0:	mov	r8, r3
   2bad4:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2bad8:	cmp	r0, #0
   2badc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bae0:	ldr	r3, [r5, #16]
   2bae4:	mov	r1, r8
   2bae8:	cmp	r3, #0
   2baec:	add	r2, r3, #1
   2baf0:	ldrne	r3, [r4, #20]
   2baf4:	str	r2, [r5, #16]
   2baf8:	addne	r2, r3, #1
   2bafc:	strne	r2, [r4, #20]
   2bb00:	movne	r2, #44	; 0x2c
   2bb04:	strbne	r2, [r3]
   2bb08:	ldr	r3, [r0]
   2bb0c:	mov	r2, r9
   2bb10:	add	r6, r0, r3
   2bb14:	ldr	r5, [r0, r3]
   2bb18:	mov	r0, r4
   2bb1c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2bb20:	ldr	r3, [r4, #32]
   2bb24:	cmp	r5, #0
   2bb28:	add	r3, r3, #1
   2bb2c:	str	r3, [r4, #32]
   2bb30:	ldr	r3, [r4, #20]
   2bb34:	add	r2, r3, #1
   2bb38:	str	r2, [r4, #20]
   2bb3c:	mov	r2, #91	; 0x5b
   2bb40:	strb	r2, [r3]
   2bb44:	bne	2bb94 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   2bb48:	ldrb	r3, [r4, #25]
   2bb4c:	cmp	r3, #0
   2bb50:	beq	2bb7c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xdc>
   2bb54:	ldr	r3, [r4, #20]
   2bb58:	mov	r0, r4
   2bb5c:	add	r2, r3, #1
   2bb60:	str	r2, [r4, #20]
   2bb64:	mov	r2, #10
   2bb68:	strb	r2, [r3]
   2bb6c:	ldr	r3, [r4, #32]
   2bb70:	sub	r3, r3, #1
   2bb74:	str	r3, [r4, #32]
   2bb78:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bb7c:	ldr	r3, [r4, #20]
   2bb80:	add	r2, r3, #1
   2bb84:	str	r2, [r4, #20]
   2bb88:	mov	r2, #93	; 0x5d
   2bb8c:	strb	r2, [r3]
   2bb90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bb94:	ldrb	r3, [r4, #25]
   2bb98:	cmp	r3, #0
   2bb9c:	beq	2bc24 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x184>
   2bba0:	ldr	r3, [r4, #20]
   2bba4:	mov	r0, r4
   2bba8:	add	r2, r3, #1
   2bbac:	str	r2, [r4, #20]
   2bbb0:	mov	r2, #10
   2bbb4:	strb	r2, [r3]
   2bbb8:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bbbc:	ldrh	r1, [r6, #4]
   2bbc0:	mov	r0, r4
   2bbc4:	blx	r7
   2bbc8:	add	r6, r6, #6
   2bbcc:	sub	r5, r5, #1
   2bbd0:	mov	r8, #44	; 0x2c
   2bbd4:	mov	r9, #10
   2bbd8:	subs	r5, r5, #1
   2bbdc:	bcc	2bb48 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xa8>
   2bbe0:	ldr	r3, [r4, #20]
   2bbe4:	add	r2, r3, #1
   2bbe8:	str	r2, [r4, #20]
   2bbec:	strb	r8, [r3]
   2bbf0:	ldrb	r3, [r4, #25]
   2bbf4:	cmp	r3, #0
   2bbf8:	beq	2bc30 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   2bbfc:	ldr	r3, [r4, #20]
   2bc00:	mov	r0, r4
   2bc04:	add	r2, r3, #1
   2bc08:	str	r2, [r4, #20]
   2bc0c:	strb	r9, [r3]
   2bc10:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bc14:	ldrh	r1, [r6], #2
   2bc18:	mov	r0, r4
   2bc1c:	blx	r7
   2bc20:	b	2bbd8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   2bc24:	mov	r0, r4
   2bc28:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2bc2c:	b	2bbbc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   2bc30:	mov	r0, r4
   2bc34:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2bc38:	b	2bc14 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x174>

0002bc3c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   2bc3c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bc40:	ldrb	lr, [r0, #27]
   2bc44:	ldr	r9, [sp, #32]
   2bc48:	ldr	r7, [sp, #36]	; 0x24
   2bc4c:	cmp	lr, #0
   2bc50:	beq	2bc5c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x20>
   2bc54:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bc58:	b	2aa94 <flatcc_json_printer_uint32_vector_field@@Base>
   2bc5c:	mov	r5, r1
   2bc60:	mov	r4, r0
   2bc64:	mov	r1, r2
   2bc68:	mov	r0, r5
   2bc6c:	mov	r8, r3
   2bc70:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2bc74:	cmp	r0, #0
   2bc78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bc7c:	ldr	r3, [r5, #16]
   2bc80:	mov	r1, r8
   2bc84:	cmp	r3, #0
   2bc88:	add	r2, r3, #1
   2bc8c:	ldrne	r3, [r4, #20]
   2bc90:	str	r2, [r5, #16]
   2bc94:	addne	r2, r3, #1
   2bc98:	strne	r2, [r4, #20]
   2bc9c:	movne	r2, #44	; 0x2c
   2bca0:	strbne	r2, [r3]
   2bca4:	ldr	r3, [r0]
   2bca8:	mov	r2, r9
   2bcac:	add	r6, r0, r3
   2bcb0:	ldr	r5, [r0, r3]
   2bcb4:	mov	r0, r4
   2bcb8:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2bcbc:	ldr	r3, [r4, #32]
   2bcc0:	cmp	r5, #0
   2bcc4:	add	r3, r3, #1
   2bcc8:	str	r3, [r4, #32]
   2bccc:	ldr	r3, [r4, #20]
   2bcd0:	add	r2, r3, #1
   2bcd4:	str	r2, [r4, #20]
   2bcd8:	mov	r2, #91	; 0x5b
   2bcdc:	strb	r2, [r3]
   2bce0:	bne	2bd30 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   2bce4:	ldrb	r3, [r4, #25]
   2bce8:	cmp	r3, #0
   2bcec:	beq	2bd18 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xdc>
   2bcf0:	ldr	r3, [r4, #20]
   2bcf4:	mov	r0, r4
   2bcf8:	add	r2, r3, #1
   2bcfc:	str	r2, [r4, #20]
   2bd00:	mov	r2, #10
   2bd04:	strb	r2, [r3]
   2bd08:	ldr	r3, [r4, #32]
   2bd0c:	sub	r3, r3, #1
   2bd10:	str	r3, [r4, #32]
   2bd14:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bd18:	ldr	r3, [r4, #20]
   2bd1c:	add	r2, r3, #1
   2bd20:	str	r2, [r4, #20]
   2bd24:	mov	r2, #93	; 0x5d
   2bd28:	strb	r2, [r3]
   2bd2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bd30:	ldrb	r3, [r4, #25]
   2bd34:	cmp	r3, #0
   2bd38:	beq	2bdc0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x184>
   2bd3c:	ldr	r3, [r4, #20]
   2bd40:	mov	r0, r4
   2bd44:	add	r2, r3, #1
   2bd48:	str	r2, [r4, #20]
   2bd4c:	mov	r2, #10
   2bd50:	strb	r2, [r3]
   2bd54:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bd58:	ldr	r1, [r6, #4]
   2bd5c:	mov	r0, r4
   2bd60:	blx	r7
   2bd64:	add	r6, r6, #8
   2bd68:	sub	r5, r5, #1
   2bd6c:	mov	r8, #44	; 0x2c
   2bd70:	mov	r9, #10
   2bd74:	subs	r5, r5, #1
   2bd78:	bcc	2bce4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xa8>
   2bd7c:	ldr	r3, [r4, #20]
   2bd80:	add	r2, r3, #1
   2bd84:	str	r2, [r4, #20]
   2bd88:	strb	r8, [r3]
   2bd8c:	ldrb	r3, [r4, #25]
   2bd90:	cmp	r3, #0
   2bd94:	beq	2bdcc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   2bd98:	ldr	r3, [r4, #20]
   2bd9c:	mov	r0, r4
   2bda0:	add	r2, r3, #1
   2bda4:	str	r2, [r4, #20]
   2bda8:	strb	r9, [r3]
   2bdac:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bdb0:	ldr	r1, [r6], #4
   2bdb4:	mov	r0, r4
   2bdb8:	blx	r7
   2bdbc:	b	2bd74 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   2bdc0:	mov	r0, r4
   2bdc4:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2bdc8:	b	2bd58 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   2bdcc:	mov	r0, r4
   2bdd0:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2bdd4:	b	2bdb0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x174>

0002bdd8 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   2bdd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bddc:	ldrb	lr, [r0, #27]
   2bde0:	ldr	r9, [sp, #32]
   2bde4:	ldr	r7, [sp, #36]	; 0x24
   2bde8:	cmp	lr, #0
   2bdec:	beq	2bdf8 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x20>
   2bdf0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bdf4:	b	2ac2c <flatcc_json_printer_uint64_vector_field@@Base>
   2bdf8:	mov	r5, r1
   2bdfc:	mov	r4, r0
   2be00:	mov	r1, r2
   2be04:	mov	r0, r5
   2be08:	mov	r8, r3
   2be0c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2be10:	cmp	r0, #0
   2be14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2be18:	ldr	r3, [r5, #16]
   2be1c:	mov	r1, r8
   2be20:	cmp	r3, #0
   2be24:	add	r2, r3, #1
   2be28:	ldrne	r3, [r4, #20]
   2be2c:	str	r2, [r5, #16]
   2be30:	addne	r2, r3, #1
   2be34:	strne	r2, [r4, #20]
   2be38:	movne	r2, #44	; 0x2c
   2be3c:	strbne	r2, [r3]
   2be40:	ldr	r3, [r0]
   2be44:	mov	r2, r9
   2be48:	add	r6, r0, r3
   2be4c:	ldr	r5, [r0, r3]
   2be50:	mov	r0, r4
   2be54:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2be58:	ldr	r3, [r4, #32]
   2be5c:	cmp	r5, #0
   2be60:	add	r3, r3, #1
   2be64:	str	r3, [r4, #32]
   2be68:	ldr	r3, [r4, #20]
   2be6c:	add	r2, r3, #1
   2be70:	str	r2, [r4, #20]
   2be74:	mov	r2, #91	; 0x5b
   2be78:	strb	r2, [r3]
   2be7c:	bne	2becc <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   2be80:	ldrb	r3, [r4, #25]
   2be84:	cmp	r3, #0
   2be88:	beq	2beb4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xdc>
   2be8c:	ldr	r3, [r4, #20]
   2be90:	mov	r0, r4
   2be94:	add	r2, r3, #1
   2be98:	str	r2, [r4, #20]
   2be9c:	mov	r2, #10
   2bea0:	strb	r2, [r3]
   2bea4:	ldr	r3, [r4, #32]
   2bea8:	sub	r3, r3, #1
   2beac:	str	r3, [r4, #32]
   2beb0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2beb4:	ldr	r3, [r4, #20]
   2beb8:	add	r2, r3, #1
   2bebc:	str	r2, [r4, #20]
   2bec0:	mov	r2, #93	; 0x5d
   2bec4:	strb	r2, [r3]
   2bec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2becc:	ldrb	r3, [r4, #25]
   2bed0:	cmp	r3, #0
   2bed4:	beq	2bf5c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x184>
   2bed8:	ldr	r3, [r4, #20]
   2bedc:	mov	r0, r4
   2bee0:	add	r2, r3, #1
   2bee4:	str	r2, [r4, #20]
   2bee8:	mov	r2, #10
   2beec:	strb	r2, [r3]
   2bef0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bef4:	ldrd	r2, [r6, #4]
   2bef8:	mov	r0, r4
   2befc:	blx	r7
   2bf00:	add	r6, r6, #12
   2bf04:	sub	r5, r5, #1
   2bf08:	mov	r8, #44	; 0x2c
   2bf0c:	mov	r9, #10
   2bf10:	subs	r5, r5, #1
   2bf14:	bcc	2be80 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xa8>
   2bf18:	ldr	r3, [r4, #20]
   2bf1c:	add	r2, r3, #1
   2bf20:	str	r2, [r4, #20]
   2bf24:	strb	r8, [r3]
   2bf28:	ldrb	r3, [r4, #25]
   2bf2c:	cmp	r3, #0
   2bf30:	beq	2bf68 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   2bf34:	ldr	r3, [r4, #20]
   2bf38:	mov	r0, r4
   2bf3c:	add	r2, r3, #1
   2bf40:	str	r2, [r4, #20]
   2bf44:	strb	r9, [r3]
   2bf48:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2bf4c:	ldrd	r2, [r6], #8
   2bf50:	mov	r0, r4
   2bf54:	blx	r7
   2bf58:	b	2bf10 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   2bf5c:	mov	r0, r4
   2bf60:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2bf64:	b	2bef4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   2bf68:	mov	r0, r4
   2bf6c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2bf70:	b	2bf4c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x174>

0002bf74 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   2bf74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bf78:	ldrb	lr, [r0, #27]
   2bf7c:	ldr	r9, [sp, #32]
   2bf80:	ldr	r7, [sp, #36]	; 0x24
   2bf84:	cmp	lr, #0
   2bf88:	beq	2bf94 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20>
   2bf8c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2bf90:	b	2adc4 <flatcc_json_printer_int8_vector_field@@Base>
   2bf94:	mov	r5, r1
   2bf98:	mov	r4, r0
   2bf9c:	mov	r1, r2
   2bfa0:	mov	r0, r5
   2bfa4:	mov	r6, r3
   2bfa8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2bfac:	cmp	r0, #0
   2bfb0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2bfb4:	ldr	r3, [r5, #16]
   2bfb8:	mov	r1, r6
   2bfbc:	cmp	r3, #0
   2bfc0:	add	r2, r3, #1
   2bfc4:	ldrne	r3, [r4, #20]
   2bfc8:	str	r2, [r5, #16]
   2bfcc:	addne	r2, r3, #1
   2bfd0:	strne	r2, [r4, #20]
   2bfd4:	movne	r2, #44	; 0x2c
   2bfd8:	strbne	r2, [r3]
   2bfdc:	ldr	r3, [r0]
   2bfe0:	mov	r2, r9
   2bfe4:	add	r8, r0, r3
   2bfe8:	ldr	r5, [r0, r3]
   2bfec:	mov	r0, r4
   2bff0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2bff4:	ldr	r3, [r4, #32]
   2bff8:	cmp	r5, #0
   2bffc:	add	r3, r3, #1
   2c000:	str	r3, [r4, #32]
   2c004:	ldr	r3, [r4, #20]
   2c008:	add	r2, r3, #1
   2c00c:	str	r2, [r4, #20]
   2c010:	mov	r2, #91	; 0x5b
   2c014:	strb	r2, [r3]
   2c018:	bne	2c068 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   2c01c:	ldrb	r3, [r4, #25]
   2c020:	cmp	r3, #0
   2c024:	beq	2c050 <flatcc_json_printer_int8_enum_vector_field@@Base+0xdc>
   2c028:	ldr	r3, [r4, #20]
   2c02c:	mov	r0, r4
   2c030:	add	r2, r3, #1
   2c034:	str	r2, [r4, #20]
   2c038:	mov	r2, #10
   2c03c:	strb	r2, [r3]
   2c040:	ldr	r3, [r4, #32]
   2c044:	sub	r3, r3, #1
   2c048:	str	r3, [r4, #32]
   2c04c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c050:	ldr	r3, [r4, #20]
   2c054:	add	r2, r3, #1
   2c058:	str	r2, [r4, #20]
   2c05c:	mov	r2, #93	; 0x5d
   2c060:	strb	r2, [r3]
   2c064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c068:	ldrb	r3, [r4, #25]
   2c06c:	cmp	r3, #0
   2c070:	beq	2c0fc <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   2c074:	ldr	r3, [r4, #20]
   2c078:	mov	r0, r4
   2c07c:	add	r2, r3, #1
   2c080:	str	r2, [r4, #20]
   2c084:	mov	r2, #10
   2c088:	strb	r2, [r3]
   2c08c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c090:	ldrsb	r1, [r8, #4]
   2c094:	mov	r0, r4
   2c098:	blx	r7
   2c09c:	add	r5, r5, #4
   2c0a0:	add	r6, r8, #5
   2c0a4:	add	r5, r8, r5
   2c0a8:	mov	r9, #10
   2c0ac:	mov	r8, #44	; 0x2c
   2c0b0:	cmp	r6, r5
   2c0b4:	beq	2c01c <flatcc_json_printer_int8_enum_vector_field@@Base+0xa8>
   2c0b8:	ldr	r3, [r4, #20]
   2c0bc:	add	r2, r3, #1
   2c0c0:	str	r2, [r4, #20]
   2c0c4:	strb	r8, [r3]
   2c0c8:	ldrb	r3, [r4, #25]
   2c0cc:	cmp	r3, #0
   2c0d0:	beq	2c108 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   2c0d4:	ldr	r3, [r4, #20]
   2c0d8:	mov	r0, r4
   2c0dc:	add	r2, r3, #1
   2c0e0:	str	r2, [r4, #20]
   2c0e4:	strb	r9, [r3]
   2c0e8:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c0ec:	ldrsb	r1, [r6], #1
   2c0f0:	mov	r0, r4
   2c0f4:	blx	r7
   2c0f8:	b	2c0b0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x13c>
   2c0fc:	mov	r0, r4
   2c100:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c104:	b	2c090 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   2c108:	mov	r0, r4
   2c10c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c110:	b	2c0ec <flatcc_json_printer_int8_enum_vector_field@@Base+0x178>

0002c114 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   2c114:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c118:	ldrb	lr, [r0, #27]
   2c11c:	ldr	r9, [sp, #32]
   2c120:	ldr	r7, [sp, #36]	; 0x24
   2c124:	cmp	lr, #0
   2c128:	beq	2c134 <flatcc_json_printer_int16_enum_vector_field@@Base+0x20>
   2c12c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c130:	b	2af60 <flatcc_json_printer_int16_vector_field@@Base>
   2c134:	mov	r5, r1
   2c138:	mov	r4, r0
   2c13c:	mov	r1, r2
   2c140:	mov	r0, r5
   2c144:	mov	r8, r3
   2c148:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2c14c:	cmp	r0, #0
   2c150:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c154:	ldr	r3, [r5, #16]
   2c158:	mov	r1, r8
   2c15c:	cmp	r3, #0
   2c160:	add	r2, r3, #1
   2c164:	ldrne	r3, [r4, #20]
   2c168:	str	r2, [r5, #16]
   2c16c:	addne	r2, r3, #1
   2c170:	strne	r2, [r4, #20]
   2c174:	movne	r2, #44	; 0x2c
   2c178:	strbne	r2, [r3]
   2c17c:	ldr	r3, [r0]
   2c180:	mov	r2, r9
   2c184:	add	r6, r0, r3
   2c188:	ldr	r5, [r0, r3]
   2c18c:	mov	r0, r4
   2c190:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2c194:	ldr	r3, [r4, #32]
   2c198:	cmp	r5, #0
   2c19c:	add	r3, r3, #1
   2c1a0:	str	r3, [r4, #32]
   2c1a4:	ldr	r3, [r4, #20]
   2c1a8:	add	r2, r3, #1
   2c1ac:	str	r2, [r4, #20]
   2c1b0:	mov	r2, #91	; 0x5b
   2c1b4:	strb	r2, [r3]
   2c1b8:	bne	2c208 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   2c1bc:	ldrb	r3, [r4, #25]
   2c1c0:	cmp	r3, #0
   2c1c4:	beq	2c1f0 <flatcc_json_printer_int16_enum_vector_field@@Base+0xdc>
   2c1c8:	ldr	r3, [r4, #20]
   2c1cc:	mov	r0, r4
   2c1d0:	add	r2, r3, #1
   2c1d4:	str	r2, [r4, #20]
   2c1d8:	mov	r2, #10
   2c1dc:	strb	r2, [r3]
   2c1e0:	ldr	r3, [r4, #32]
   2c1e4:	sub	r3, r3, #1
   2c1e8:	str	r3, [r4, #32]
   2c1ec:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c1f0:	ldr	r3, [r4, #20]
   2c1f4:	add	r2, r3, #1
   2c1f8:	str	r2, [r4, #20]
   2c1fc:	mov	r2, #93	; 0x5d
   2c200:	strb	r2, [r3]
   2c204:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c208:	ldrb	r3, [r4, #25]
   2c20c:	cmp	r3, #0
   2c210:	beq	2c298 <flatcc_json_printer_int16_enum_vector_field@@Base+0x184>
   2c214:	ldr	r3, [r4, #20]
   2c218:	mov	r0, r4
   2c21c:	add	r2, r3, #1
   2c220:	str	r2, [r4, #20]
   2c224:	mov	r2, #10
   2c228:	strb	r2, [r3]
   2c22c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c230:	ldrsh	r1, [r6, #4]
   2c234:	mov	r0, r4
   2c238:	blx	r7
   2c23c:	add	r6, r6, #6
   2c240:	sub	r5, r5, #1
   2c244:	mov	r8, #44	; 0x2c
   2c248:	mov	r9, #10
   2c24c:	subs	r5, r5, #1
   2c250:	bcc	2c1bc <flatcc_json_printer_int16_enum_vector_field@@Base+0xa8>
   2c254:	ldr	r3, [r4, #20]
   2c258:	add	r2, r3, #1
   2c25c:	str	r2, [r4, #20]
   2c260:	strb	r8, [r3]
   2c264:	ldrb	r3, [r4, #25]
   2c268:	cmp	r3, #0
   2c26c:	beq	2c2a4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   2c270:	ldr	r3, [r4, #20]
   2c274:	mov	r0, r4
   2c278:	add	r2, r3, #1
   2c27c:	str	r2, [r4, #20]
   2c280:	strb	r9, [r3]
   2c284:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c288:	ldrsh	r1, [r6], #2
   2c28c:	mov	r0, r4
   2c290:	blx	r7
   2c294:	b	2c24c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   2c298:	mov	r0, r4
   2c29c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c2a0:	b	2c230 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   2c2a4:	mov	r0, r4
   2c2a8:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c2ac:	b	2c288 <flatcc_json_printer_int16_enum_vector_field@@Base+0x174>

0002c2b0 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   2c2b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c2b4:	ldrb	lr, [r0, #27]
   2c2b8:	ldr	r9, [sp, #32]
   2c2bc:	ldr	r7, [sp, #36]	; 0x24
   2c2c0:	cmp	lr, #0
   2c2c4:	beq	2c2d0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x20>
   2c2c8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c2cc:	b	2b0f8 <flatcc_json_printer_int32_vector_field@@Base>
   2c2d0:	mov	r5, r1
   2c2d4:	mov	r4, r0
   2c2d8:	mov	r1, r2
   2c2dc:	mov	r0, r5
   2c2e0:	mov	r8, r3
   2c2e4:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2c2e8:	cmp	r0, #0
   2c2ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c2f0:	ldr	r3, [r5, #16]
   2c2f4:	mov	r1, r8
   2c2f8:	cmp	r3, #0
   2c2fc:	add	r2, r3, #1
   2c300:	ldrne	r3, [r4, #20]
   2c304:	str	r2, [r5, #16]
   2c308:	addne	r2, r3, #1
   2c30c:	strne	r2, [r4, #20]
   2c310:	movne	r2, #44	; 0x2c
   2c314:	strbne	r2, [r3]
   2c318:	ldr	r3, [r0]
   2c31c:	mov	r2, r9
   2c320:	add	r6, r0, r3
   2c324:	ldr	r5, [r0, r3]
   2c328:	mov	r0, r4
   2c32c:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2c330:	ldr	r3, [r4, #32]
   2c334:	cmp	r5, #0
   2c338:	add	r3, r3, #1
   2c33c:	str	r3, [r4, #32]
   2c340:	ldr	r3, [r4, #20]
   2c344:	add	r2, r3, #1
   2c348:	str	r2, [r4, #20]
   2c34c:	mov	r2, #91	; 0x5b
   2c350:	strb	r2, [r3]
   2c354:	bne	2c3a4 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   2c358:	ldrb	r3, [r4, #25]
   2c35c:	cmp	r3, #0
   2c360:	beq	2c38c <flatcc_json_printer_int32_enum_vector_field@@Base+0xdc>
   2c364:	ldr	r3, [r4, #20]
   2c368:	mov	r0, r4
   2c36c:	add	r2, r3, #1
   2c370:	str	r2, [r4, #20]
   2c374:	mov	r2, #10
   2c378:	strb	r2, [r3]
   2c37c:	ldr	r3, [r4, #32]
   2c380:	sub	r3, r3, #1
   2c384:	str	r3, [r4, #32]
   2c388:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c38c:	ldr	r3, [r4, #20]
   2c390:	add	r2, r3, #1
   2c394:	str	r2, [r4, #20]
   2c398:	mov	r2, #93	; 0x5d
   2c39c:	strb	r2, [r3]
   2c3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c3a4:	ldrb	r3, [r4, #25]
   2c3a8:	cmp	r3, #0
   2c3ac:	beq	2c434 <flatcc_json_printer_int32_enum_vector_field@@Base+0x184>
   2c3b0:	ldr	r3, [r4, #20]
   2c3b4:	mov	r0, r4
   2c3b8:	add	r2, r3, #1
   2c3bc:	str	r2, [r4, #20]
   2c3c0:	mov	r2, #10
   2c3c4:	strb	r2, [r3]
   2c3c8:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c3cc:	ldr	r1, [r6, #4]
   2c3d0:	mov	r0, r4
   2c3d4:	blx	r7
   2c3d8:	add	r6, r6, #8
   2c3dc:	sub	r5, r5, #1
   2c3e0:	mov	r8, #44	; 0x2c
   2c3e4:	mov	r9, #10
   2c3e8:	subs	r5, r5, #1
   2c3ec:	bcc	2c358 <flatcc_json_printer_int32_enum_vector_field@@Base+0xa8>
   2c3f0:	ldr	r3, [r4, #20]
   2c3f4:	add	r2, r3, #1
   2c3f8:	str	r2, [r4, #20]
   2c3fc:	strb	r8, [r3]
   2c400:	ldrb	r3, [r4, #25]
   2c404:	cmp	r3, #0
   2c408:	beq	2c440 <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   2c40c:	ldr	r3, [r4, #20]
   2c410:	mov	r0, r4
   2c414:	add	r2, r3, #1
   2c418:	str	r2, [r4, #20]
   2c41c:	strb	r9, [r3]
   2c420:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c424:	ldr	r1, [r6], #4
   2c428:	mov	r0, r4
   2c42c:	blx	r7
   2c430:	b	2c3e8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   2c434:	mov	r0, r4
   2c438:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c43c:	b	2c3cc <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   2c440:	mov	r0, r4
   2c444:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c448:	b	2c424 <flatcc_json_printer_int32_enum_vector_field@@Base+0x174>

0002c44c <flatcc_json_printer_int64_enum_vector_field@@Base>:
   2c44c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c450:	ldrb	lr, [r0, #27]
   2c454:	ldr	r9, [sp, #32]
   2c458:	ldr	r7, [sp, #36]	; 0x24
   2c45c:	cmp	lr, #0
   2c460:	beq	2c46c <flatcc_json_printer_int64_enum_vector_field@@Base+0x20>
   2c464:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c468:	b	2b290 <flatcc_json_printer_int64_vector_field@@Base>
   2c46c:	mov	r5, r1
   2c470:	mov	r4, r0
   2c474:	mov	r1, r2
   2c478:	mov	r0, r5
   2c47c:	mov	r8, r3
   2c480:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2c484:	cmp	r0, #0
   2c488:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c48c:	ldr	r3, [r5, #16]
   2c490:	mov	r1, r8
   2c494:	cmp	r3, #0
   2c498:	add	r2, r3, #1
   2c49c:	ldrne	r3, [r4, #20]
   2c4a0:	str	r2, [r5, #16]
   2c4a4:	addne	r2, r3, #1
   2c4a8:	strne	r2, [r4, #20]
   2c4ac:	movne	r2, #44	; 0x2c
   2c4b0:	strbne	r2, [r3]
   2c4b4:	ldr	r3, [r0]
   2c4b8:	mov	r2, r9
   2c4bc:	add	r6, r0, r3
   2c4c0:	ldr	r5, [r0, r3]
   2c4c4:	mov	r0, r4
   2c4c8:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2c4cc:	ldr	r3, [r4, #32]
   2c4d0:	cmp	r5, #0
   2c4d4:	add	r3, r3, #1
   2c4d8:	str	r3, [r4, #32]
   2c4dc:	ldr	r3, [r4, #20]
   2c4e0:	add	r2, r3, #1
   2c4e4:	str	r2, [r4, #20]
   2c4e8:	mov	r2, #91	; 0x5b
   2c4ec:	strb	r2, [r3]
   2c4f0:	bne	2c540 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   2c4f4:	ldrb	r3, [r4, #25]
   2c4f8:	cmp	r3, #0
   2c4fc:	beq	2c528 <flatcc_json_printer_int64_enum_vector_field@@Base+0xdc>
   2c500:	ldr	r3, [r4, #20]
   2c504:	mov	r0, r4
   2c508:	add	r2, r3, #1
   2c50c:	str	r2, [r4, #20]
   2c510:	mov	r2, #10
   2c514:	strb	r2, [r3]
   2c518:	ldr	r3, [r4, #32]
   2c51c:	sub	r3, r3, #1
   2c520:	str	r3, [r4, #32]
   2c524:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c528:	ldr	r3, [r4, #20]
   2c52c:	add	r2, r3, #1
   2c530:	str	r2, [r4, #20]
   2c534:	mov	r2, #93	; 0x5d
   2c538:	strb	r2, [r3]
   2c53c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c540:	ldrb	r3, [r4, #25]
   2c544:	cmp	r3, #0
   2c548:	beq	2c5d0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x184>
   2c54c:	ldr	r3, [r4, #20]
   2c550:	mov	r0, r4
   2c554:	add	r2, r3, #1
   2c558:	str	r2, [r4, #20]
   2c55c:	mov	r2, #10
   2c560:	strb	r2, [r3]
   2c564:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c568:	ldrd	r2, [r6, #4]
   2c56c:	mov	r0, r4
   2c570:	blx	r7
   2c574:	add	r6, r6, #12
   2c578:	sub	r5, r5, #1
   2c57c:	mov	r8, #44	; 0x2c
   2c580:	mov	r9, #10
   2c584:	subs	r5, r5, #1
   2c588:	bcc	2c4f4 <flatcc_json_printer_int64_enum_vector_field@@Base+0xa8>
   2c58c:	ldr	r3, [r4, #20]
   2c590:	add	r2, r3, #1
   2c594:	str	r2, [r4, #20]
   2c598:	strb	r8, [r3]
   2c59c:	ldrb	r3, [r4, #25]
   2c5a0:	cmp	r3, #0
   2c5a4:	beq	2c5dc <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   2c5a8:	ldr	r3, [r4, #20]
   2c5ac:	mov	r0, r4
   2c5b0:	add	r2, r3, #1
   2c5b4:	str	r2, [r4, #20]
   2c5b8:	strb	r9, [r3]
   2c5bc:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c5c0:	ldrd	r2, [r6], #8
   2c5c4:	mov	r0, r4
   2c5c8:	blx	r7
   2c5cc:	b	2c584 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   2c5d0:	mov	r0, r4
   2c5d4:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c5d8:	b	2c568 <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   2c5dc:	mov	r0, r4
   2c5e0:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c5e4:	b	2c5c0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x174>

0002c5e8 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   2c5e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c5ec:	ldrb	lr, [r0, #27]
   2c5f0:	ldr	r9, [sp, #32]
   2c5f4:	ldr	r7, [sp, #36]	; 0x24
   2c5f8:	cmp	lr, #0
   2c5fc:	beq	2c608 <flatcc_json_printer_bool_enum_vector_field@@Base+0x20>
   2c600:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c604:	b	2b428 <flatcc_json_printer_bool_vector_field@@Base>
   2c608:	mov	r5, r1
   2c60c:	mov	r4, r0
   2c610:	mov	r1, r2
   2c614:	mov	r0, r5
   2c618:	mov	r6, r3
   2c61c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2c620:	cmp	r0, #0
   2c624:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c628:	ldr	r3, [r5, #16]
   2c62c:	mov	r1, r6
   2c630:	cmp	r3, #0
   2c634:	add	r2, r3, #1
   2c638:	ldrne	r3, [r4, #20]
   2c63c:	str	r2, [r5, #16]
   2c640:	addne	r2, r3, #1
   2c644:	strne	r2, [r4, #20]
   2c648:	movne	r2, #44	; 0x2c
   2c64c:	strbne	r2, [r3]
   2c650:	ldr	r3, [r0]
   2c654:	mov	r2, r9
   2c658:	add	r8, r0, r3
   2c65c:	ldr	r5, [r0, r3]
   2c660:	mov	r0, r4
   2c664:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2c668:	ldr	r3, [r4, #32]
   2c66c:	cmp	r5, #0
   2c670:	add	r3, r3, #1
   2c674:	str	r3, [r4, #32]
   2c678:	ldr	r3, [r4, #20]
   2c67c:	add	r2, r3, #1
   2c680:	str	r2, [r4, #20]
   2c684:	mov	r2, #91	; 0x5b
   2c688:	strb	r2, [r3]
   2c68c:	bne	2c6dc <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   2c690:	ldrb	r3, [r4, #25]
   2c694:	cmp	r3, #0
   2c698:	beq	2c6c4 <flatcc_json_printer_bool_enum_vector_field@@Base+0xdc>
   2c69c:	ldr	r3, [r4, #20]
   2c6a0:	mov	r0, r4
   2c6a4:	add	r2, r3, #1
   2c6a8:	str	r2, [r4, #20]
   2c6ac:	mov	r2, #10
   2c6b0:	strb	r2, [r3]
   2c6b4:	ldr	r3, [r4, #32]
   2c6b8:	sub	r3, r3, #1
   2c6bc:	str	r3, [r4, #32]
   2c6c0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c6c4:	ldr	r3, [r4, #20]
   2c6c8:	add	r2, r3, #1
   2c6cc:	str	r2, [r4, #20]
   2c6d0:	mov	r2, #93	; 0x5d
   2c6d4:	strb	r2, [r3]
   2c6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c6dc:	ldrb	r3, [r4, #25]
   2c6e0:	cmp	r3, #0
   2c6e4:	beq	2c770 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   2c6e8:	ldr	r3, [r4, #20]
   2c6ec:	mov	r0, r4
   2c6f0:	add	r2, r3, #1
   2c6f4:	str	r2, [r4, #20]
   2c6f8:	mov	r2, #10
   2c6fc:	strb	r2, [r3]
   2c700:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c704:	ldrb	r1, [r8, #4]
   2c708:	mov	r0, r4
   2c70c:	blx	r7
   2c710:	add	r5, r5, #4
   2c714:	add	r6, r8, #5
   2c718:	add	r5, r8, r5
   2c71c:	mov	r9, #10
   2c720:	mov	r8, #44	; 0x2c
   2c724:	cmp	r6, r5
   2c728:	beq	2c690 <flatcc_json_printer_bool_enum_vector_field@@Base+0xa8>
   2c72c:	ldr	r3, [r4, #20]
   2c730:	add	r2, r3, #1
   2c734:	str	r2, [r4, #20]
   2c738:	strb	r8, [r3]
   2c73c:	ldrb	r3, [r4, #25]
   2c740:	cmp	r3, #0
   2c744:	beq	2c77c <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   2c748:	ldr	r3, [r4, #20]
   2c74c:	mov	r0, r4
   2c750:	add	r2, r3, #1
   2c754:	str	r2, [r4, #20]
   2c758:	strb	r9, [r3]
   2c75c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c760:	ldrb	r1, [r6], #1
   2c764:	mov	r0, r4
   2c768:	blx	r7
   2c76c:	b	2c724 <flatcc_json_printer_bool_enum_vector_field@@Base+0x13c>
   2c770:	mov	r0, r4
   2c774:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c778:	b	2c704 <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   2c77c:	mov	r0, r4
   2c780:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c784:	b	2c760 <flatcc_json_printer_bool_enum_vector_field@@Base+0x178>

0002c788 <flatcc_json_printer_struct_vector_field@@Base>:
   2c788:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c78c:	mov	r5, r1
   2c790:	mov	r4, r0
   2c794:	mov	r1, r2
   2c798:	mov	r0, r5
   2c79c:	mov	r8, r3
   2c7a0:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2c7a4:	ldr	r9, [sp, #44]	; 0x2c
   2c7a8:	ldr	r7, [sp, #48]	; 0x30
   2c7ac:	cmp	r0, #0
   2c7b0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c7b4:	ldr	r3, [r5, #16]
   2c7b8:	mov	r1, r8
   2c7bc:	cmp	r3, #0
   2c7c0:	add	r2, r3, #1
   2c7c4:	ldrne	r3, [r4, #20]
   2c7c8:	str	r2, [r5, #16]
   2c7cc:	addne	r2, r3, #1
   2c7d0:	strne	r2, [r4, #20]
   2c7d4:	movne	r2, #44	; 0x2c
   2c7d8:	strbne	r2, [r3]
   2c7dc:	ldr	r2, [r0]
   2c7e0:	add	r6, r0, r2
   2c7e4:	ldr	r5, [r0, r2]
   2c7e8:	ldr	r2, [sp, #40]	; 0x28
   2c7ec:	mov	r0, r4
   2c7f0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2c7f4:	ldr	r3, [r4, #32]
   2c7f8:	cmp	r5, #0
   2c7fc:	add	r3, r3, #1
   2c800:	str	r3, [r4, #32]
   2c804:	ldr	r3, [r4, #20]
   2c808:	add	r2, r3, #1
   2c80c:	str	r2, [r4, #20]
   2c810:	mov	r2, #91	; 0x5b
   2c814:	strb	r2, [r3]
   2c818:	bne	2c868 <flatcc_json_printer_struct_vector_field@@Base+0xe0>
   2c81c:	ldrb	r3, [r4, #25]
   2c820:	cmp	r3, #0
   2c824:	beq	2c850 <flatcc_json_printer_struct_vector_field@@Base+0xc8>
   2c828:	ldr	r3, [r4, #20]
   2c82c:	mov	r0, r4
   2c830:	add	r2, r3, #1
   2c834:	str	r2, [r4, #20]
   2c838:	mov	r2, #10
   2c83c:	strb	r2, [r3]
   2c840:	ldr	r3, [r4, #32]
   2c844:	sub	r3, r3, #1
   2c848:	str	r3, [r4, #32]
   2c84c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c850:	ldr	r3, [r4, #20]
   2c854:	add	r2, r3, #1
   2c858:	str	r2, [r4, #20]
   2c85c:	mov	r2, #93	; 0x5d
   2c860:	strb	r2, [r3]
   2c864:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c868:	ldrb	r3, [r4, #25]
   2c86c:	cmp	r3, #0
   2c870:	beq	2c9c8 <flatcc_json_printer_struct_vector_field@@Base+0x240>
   2c874:	ldr	r3, [r4, #20]
   2c878:	mov	r0, r4
   2c87c:	add	r2, r3, #1
   2c880:	str	r2, [r4, #20]
   2c884:	mov	r2, #10
   2c888:	strb	r2, [r3]
   2c88c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c890:	ldr	r3, [r4, #32]
   2c894:	add	r6, r6, #4
   2c898:	add	r3, r3, #1
   2c89c:	str	r3, [r4, #32]
   2c8a0:	ldr	r3, [r4, #20]
   2c8a4:	mov	r1, r6
   2c8a8:	add	r2, r3, #1
   2c8ac:	str	r2, [r4, #20]
   2c8b0:	mov	r2, #123	; 0x7b
   2c8b4:	strb	r2, [r3]
   2c8b8:	mov	r0, r4
   2c8bc:	blx	r7
   2c8c0:	ldrb	r3, [r4, #25]
   2c8c4:	cmp	r3, #0
   2c8c8:	beq	2c8f4 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   2c8cc:	ldr	r3, [r4, #20]
   2c8d0:	mov	r0, r4
   2c8d4:	add	r2, r3, #1
   2c8d8:	str	r2, [r4, #20]
   2c8dc:	mov	r2, #10
   2c8e0:	strb	r2, [r3]
   2c8e4:	ldr	r3, [r4, #32]
   2c8e8:	sub	r3, r3, #1
   2c8ec:	str	r3, [r4, #32]
   2c8f0:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c8f4:	ldr	r3, [r4, #20]
   2c8f8:	sub	r5, r5, #1
   2c8fc:	add	r2, r3, #1
   2c900:	mov	sl, #44	; 0x2c
   2c904:	mov	r8, #10
   2c908:	mov	fp, #123	; 0x7b
   2c90c:	str	r2, [r4, #20]
   2c910:	mov	r2, #125	; 0x7d
   2c914:	strb	r2, [r3]
   2c918:	subs	r5, r5, #1
   2c91c:	bcc	2c81c <flatcc_json_printer_struct_vector_field@@Base+0x94>
   2c920:	ldr	r3, [r4, #20]
   2c924:	add	r6, r6, r9
   2c928:	add	r2, r3, #1
   2c92c:	str	r2, [r4, #20]
   2c930:	strb	sl, [r3]
   2c934:	ldrb	r3, [r4, #25]
   2c938:	cmp	r3, #0
   2c93c:	beq	2c9d4 <flatcc_json_printer_struct_vector_field@@Base+0x24c>
   2c940:	ldr	r3, [r4, #20]
   2c944:	mov	r0, r4
   2c948:	add	r2, r3, #1
   2c94c:	str	r2, [r4, #20]
   2c950:	strb	r8, [r3]
   2c954:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c958:	ldr	r3, [r4, #32]
   2c95c:	mov	r1, r6
   2c960:	add	r3, r3, #1
   2c964:	str	r3, [r4, #32]
   2c968:	ldr	r3, [r4, #20]
   2c96c:	mov	r0, r4
   2c970:	add	r2, r3, #1
   2c974:	str	r2, [r4, #20]
   2c978:	strb	fp, [r3]
   2c97c:	blx	r7
   2c980:	ldrb	r3, [r4, #25]
   2c984:	cmp	r3, #0
   2c988:	beq	2c9b0 <flatcc_json_printer_struct_vector_field@@Base+0x228>
   2c98c:	ldr	r3, [r4, #20]
   2c990:	mov	r0, r4
   2c994:	add	r2, r3, #1
   2c998:	str	r2, [r4, #20]
   2c99c:	strb	r8, [r3]
   2c9a0:	ldr	r3, [r4, #32]
   2c9a4:	sub	r3, r3, #1
   2c9a8:	str	r3, [r4, #32]
   2c9ac:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2c9b0:	ldr	r3, [r4, #20]
   2c9b4:	add	r2, r3, #1
   2c9b8:	str	r2, [r4, #20]
   2c9bc:	mov	r2, #125	; 0x7d
   2c9c0:	strb	r2, [r3]
   2c9c4:	b	2c918 <flatcc_json_printer_struct_vector_field@@Base+0x190>
   2c9c8:	mov	r0, r4
   2c9cc:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c9d0:	b	2c890 <flatcc_json_printer_struct_vector_field@@Base+0x108>
   2c9d4:	mov	r0, r4
   2c9d8:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2c9dc:	b	2c958 <flatcc_json_printer_struct_vector_field@@Base+0x1d0>

0002c9e0 <flatcc_json_printer_string_vector_field@@Base>:
   2c9e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c9e4:	mov	r5, r1
   2c9e8:	mov	r4, r0
   2c9ec:	mov	r1, r2
   2c9f0:	mov	r0, r5
   2c9f4:	mov	r7, r3
   2c9f8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2c9fc:	cmp	r0, #0
   2ca00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ca04:	ldr	r2, [r5, #16]
   2ca08:	mov	r1, r7
   2ca0c:	cmp	r2, #0
   2ca10:	add	r3, r2, #1
   2ca14:	ldrne	r2, [r4, #20]
   2ca18:	str	r3, [r5, #16]
   2ca1c:	addne	r3, r2, #1
   2ca20:	strne	r3, [r4, #20]
   2ca24:	movne	r3, #44	; 0x2c
   2ca28:	strbne	r3, [r2]
   2ca2c:	ldr	r2, [r0]
   2ca30:	add	r6, r0, r2
   2ca34:	ldr	r5, [r0, r2]
   2ca38:	ldr	r2, [sp, #32]
   2ca3c:	mov	r0, r4
   2ca40:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2ca44:	ldr	r3, [r4, #32]
   2ca48:	cmp	r5, #0
   2ca4c:	add	r3, r3, #1
   2ca50:	str	r3, [r4, #32]
   2ca54:	ldr	r3, [r4, #20]
   2ca58:	add	r2, r3, #1
   2ca5c:	str	r2, [r4, #20]
   2ca60:	mov	r2, #91	; 0x5b
   2ca64:	strb	r2, [r3]
   2ca68:	bne	2cab8 <flatcc_json_printer_string_vector_field@@Base+0xd8>
   2ca6c:	ldrb	r3, [r4, #25]
   2ca70:	cmp	r3, #0
   2ca74:	beq	2caa0 <flatcc_json_printer_string_vector_field@@Base+0xc0>
   2ca78:	ldr	r3, [r4, #20]
   2ca7c:	mov	r0, r4
   2ca80:	add	r2, r3, #1
   2ca84:	str	r2, [r4, #20]
   2ca88:	mov	r2, #10
   2ca8c:	strb	r2, [r3]
   2ca90:	ldr	r3, [r4, #32]
   2ca94:	sub	r3, r3, #1
   2ca98:	str	r3, [r4, #32]
   2ca9c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2caa0:	ldr	r3, [r4, #20]
   2caa4:	add	r2, r3, #1
   2caa8:	str	r2, [r4, #20]
   2caac:	mov	r2, #93	; 0x5d
   2cab0:	strb	r2, [r3]
   2cab4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cab8:	ldrb	r3, [r4, #25]
   2cabc:	cmp	r3, #0
   2cac0:	beq	2cb5c <flatcc_json_printer_string_vector_field@@Base+0x17c>
   2cac4:	ldr	r3, [r4, #20]
   2cac8:	mov	r0, r4
   2cacc:	add	r2, r3, #1
   2cad0:	str	r2, [r4, #20]
   2cad4:	mov	r2, #10
   2cad8:	strb	r2, [r3]
   2cadc:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2cae0:	ldr	r1, [r6, #4]
   2cae4:	mov	r0, r4
   2cae8:	add	r1, r1, #4
   2caec:	add	r1, r6, r1
   2caf0:	bl	27bb8 <flatcc_json_parser_table_as_root@@Base+0x112c>
   2caf4:	sub	r5, r5, #1
   2caf8:	add	r6, r6, #8
   2cafc:	mov	r8, #44	; 0x2c
   2cb00:	mov	r9, #10
   2cb04:	subs	r5, r5, #1
   2cb08:	bcc	2ca6c <flatcc_json_printer_string_vector_field@@Base+0x8c>
   2cb0c:	ldr	r3, [r4, #20]
   2cb10:	mov	r7, r6
   2cb14:	add	r2, r3, #1
   2cb18:	str	r2, [r4, #20]
   2cb1c:	strb	r8, [r3]
   2cb20:	ldrb	r3, [r4, #25]
   2cb24:	cmp	r3, #0
   2cb28:	beq	2cb68 <flatcc_json_printer_string_vector_field@@Base+0x188>
   2cb2c:	ldr	r3, [r4, #20]
   2cb30:	mov	r0, r4
   2cb34:	add	r2, r3, #1
   2cb38:	str	r2, [r4, #20]
   2cb3c:	strb	r9, [r3]
   2cb40:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2cb44:	ldr	r1, [r7]
   2cb48:	mov	r0, r4
   2cb4c:	add	r1, r7, r1
   2cb50:	add	r6, r6, #4
   2cb54:	bl	27bb8 <flatcc_json_parser_table_as_root@@Base+0x112c>
   2cb58:	b	2cb04 <flatcc_json_printer_string_vector_field@@Base+0x124>
   2cb5c:	mov	r0, r4
   2cb60:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2cb64:	b	2cae0 <flatcc_json_printer_string_vector_field@@Base+0x100>
   2cb68:	mov	r0, r4
   2cb6c:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2cb70:	b	2cb44 <flatcc_json_printer_string_vector_field@@Base+0x164>

0002cb74 <flatcc_json_printer_table_vector_field@@Base>:
   2cb74:	push	{r4, r5, r6, r7, r8, lr}
   2cb78:	mov	r6, r1
   2cb7c:	mov	r4, r0
   2cb80:	mov	r1, r2
   2cb84:	mov	r0, r6
   2cb88:	mov	r7, r3
   2cb8c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2cb90:	cmp	r0, #0
   2cb94:	popeq	{r4, r5, r6, r7, r8, pc}
   2cb98:	ldr	r2, [r6, #16]
   2cb9c:	mov	r1, r7
   2cba0:	cmp	r2, #0
   2cba4:	add	r3, r2, #1
   2cba8:	ldrne	r2, [r4, #20]
   2cbac:	str	r3, [r6, #16]
   2cbb0:	addne	r3, r2, #1
   2cbb4:	strne	r3, [r4, #20]
   2cbb8:	movne	r3, #44	; 0x2c
   2cbbc:	strbne	r3, [r2]
   2cbc0:	ldr	r2, [r0]
   2cbc4:	add	r8, r0, r2
   2cbc8:	ldr	r5, [r0, r2]
   2cbcc:	ldr	r2, [sp, #24]
   2cbd0:	mov	r0, r4
   2cbd4:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2cbd8:	ldr	r3, [r4, #32]
   2cbdc:	cmp	r5, #0
   2cbe0:	add	r3, r3, #1
   2cbe4:	str	r3, [r4, #32]
   2cbe8:	ldr	r3, [r4, #20]
   2cbec:	add	r2, r3, #1
   2cbf0:	str	r2, [r4, #20]
   2cbf4:	mov	r2, #91	; 0x5b
   2cbf8:	strb	r2, [r3]
   2cbfc:	bne	2cc4c <flatcc_json_printer_table_vector_field@@Base+0xd8>
   2cc00:	ldrb	r3, [r4, #25]
   2cc04:	cmp	r3, #0
   2cc08:	beq	2cc34 <flatcc_json_printer_table_vector_field@@Base+0xc0>
   2cc0c:	ldr	r3, [r4, #20]
   2cc10:	mov	r0, r4
   2cc14:	add	r2, r3, #1
   2cc18:	str	r2, [r4, #20]
   2cc1c:	mov	r2, #10
   2cc20:	strb	r2, [r3]
   2cc24:	ldr	r3, [r4, #32]
   2cc28:	sub	r3, r3, #1
   2cc2c:	str	r3, [r4, #32]
   2cc30:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2cc34:	ldr	r3, [r4, #20]
   2cc38:	add	r2, r3, #1
   2cc3c:	str	r2, [r4, #20]
   2cc40:	mov	r2, #93	; 0x5d
   2cc44:	strb	r2, [r3]
   2cc48:	pop	{r4, r5, r6, r7, r8, pc}
   2cc4c:	ldr	r1, [r8, #4]
   2cc50:	add	r7, r8, #4
   2cc54:	ldr	r3, [sp, #28]
   2cc58:	ldr	r2, [r6, #12]
   2cc5c:	add	r1, r7, r1
   2cc60:	mov	r0, r4
   2cc64:	bl	280c0 <flatcc_json_parser_table_as_root@@Base+0x1634>
   2cc68:	sub	r5, r5, #1
   2cc6c:	mov	r8, #44	; 0x2c
   2cc70:	subs	r5, r5, #1
   2cc74:	bcc	2cc00 <flatcc_json_printer_table_vector_field@@Base+0x8c>
   2cc78:	ldr	r3, [r4, #20]
   2cc7c:	mov	r0, r4
   2cc80:	add	r2, r3, #1
   2cc84:	str	r2, [r4, #20]
   2cc88:	strb	r8, [r3]
   2cc8c:	ldr	r1, [r7, #4]!
   2cc90:	ldr	r3, [sp, #28]
   2cc94:	ldr	r2, [r6, #12]
   2cc98:	add	r1, r7, r1
   2cc9c:	bl	280c0 <flatcc_json_parser_table_as_root@@Base+0x1634>
   2cca0:	b	2cc70 <flatcc_json_printer_table_vector_field@@Base+0xfc>

0002cca4 <flatcc_json_printer_union_vector_field@@Base>:
   2cca4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cca8:	mov	r7, r1
   2ccac:	sub	fp, r2, #1
   2ccb0:	sub	sp, sp, #132	; 0x84
   2ccb4:	mov	r1, fp
   2ccb8:	mov	r4, r0
   2ccbc:	mov	r0, r7
   2ccc0:	mov	sl, r3
   2ccc4:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2ccc8:	ldr	r6, [sp, #168]	; 0xa8
   2cccc:	mov	r5, r0
   2ccd0:	mov	r1, r2
   2ccd4:	mov	r0, r7
   2ccd8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2ccdc:	ldr	r3, [r7, #12]
   2cce0:	cmp	r6, #100	; 0x64
   2cce4:	str	r3, [sp, #12]
   2cce8:	ble	2cd10 <flatcc_json_printer_union_vector_field@@Base+0x6c>
   2ccec:	ldr	r3, [r4, #36]	; 0x24
   2ccf0:	ldr	r2, [pc, #596]	; 2cf4c <flatcc_json_printer_union_vector_field@@Base+0x2a8>
   2ccf4:	cmp	r3, #0
   2ccf8:	moveq	r3, #1
   2ccfc:	streq	r3, [r4, #36]	; 0x24
   2cd00:	ldr	r1, [pc, #584]	; 2cf50 <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   2cd04:	ldr	r3, [pc, #584]	; 2cf54 <flatcc_json_printer_union_vector_field@@Base+0x2b0>
   2cd08:	ldr	r0, [pc, #584]	; 2cf58 <flatcc_json_printer_union_vector_field@@Base+0x2b4>
   2cd0c:	bl	14648 <__assert_fail@plt>
   2cd10:	add	r3, sp, #20
   2cd14:	mov	r8, r0
   2cd18:	mov	r2, r6
   2cd1c:	mov	r1, sl
   2cd20:	mov	r0, r3
   2cd24:	bl	14570 <memcpy@plt>
   2cd28:	ldr	r2, [pc, #556]	; 2cf5c <flatcc_json_printer_union_vector_field@@Base+0x2b8>
   2cd2c:	cmp	r8, #0
   2cd30:	cmpne	r5, #0
   2cd34:	mov	r3, r0
   2cd38:	add	r1, r0, r6
   2cd3c:	ldr	r0, [r2]
   2cd40:	ldrb	r2, [r2, #4]
   2cd44:	str	r0, [r3, r6]
   2cd48:	strb	r2, [r1, #4]
   2cd4c:	beq	2ce24 <flatcc_json_printer_union_vector_field@@Base+0x180>
   2cd50:	ldr	r2, [sp, #172]	; 0xac
   2cd54:	mov	r1, r7
   2cd58:	str	r2, [sp, #4]
   2cd5c:	add	r2, r6, #5
   2cd60:	str	r2, [sp]
   2cd64:	mov	r0, r4
   2cd68:	mov	r2, fp
   2cd6c:	bl	2b8fc <flatcc_json_printer_uint8_enum_vector_field@@Base>
   2cd70:	ldr	r3, [r7, #16]
   2cd74:	mov	r1, sl
   2cd78:	cmp	r3, #0
   2cd7c:	add	r2, r3, #1
   2cd80:	ldrne	r3, [r4, #20]
   2cd84:	str	r2, [r7, #16]
   2cd88:	addne	r2, r3, #1
   2cd8c:	strne	r2, [r4, #20]
   2cd90:	movne	r2, #44	; 0x2c
   2cd94:	strbne	r2, [r3]
   2cd98:	ldr	r2, [r8]
   2cd9c:	mov	r0, r4
   2cda0:	add	fp, r8, r2
   2cda4:	ldr	r7, [r8, r2]
   2cda8:	mov	r2, r6
   2cdac:	ldr	r9, [r5]
   2cdb0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2cdb4:	ldr	r2, [r4, #32]
   2cdb8:	cmp	r7, #0
   2cdbc:	add	r2, r2, #1
   2cdc0:	str	r2, [r4, #32]
   2cdc4:	ldr	r2, [r4, #20]
   2cdc8:	add	r1, r2, #1
   2cdcc:	str	r1, [r4, #20]
   2cdd0:	mov	r1, #91	; 0x5b
   2cdd4:	strb	r1, [r2]
   2cdd8:	bne	2ce2c <flatcc_json_printer_union_vector_field@@Base+0x188>
   2cddc:	ldrb	r3, [r4, #25]
   2cde0:	cmp	r3, #0
   2cde4:	beq	2ce10 <flatcc_json_printer_union_vector_field@@Base+0x16c>
   2cde8:	ldr	r3, [r4, #20]
   2cdec:	mov	r0, r4
   2cdf0:	add	r2, r3, #1
   2cdf4:	str	r2, [r4, #20]
   2cdf8:	mov	r2, #10
   2cdfc:	strb	r2, [r3]
   2ce00:	ldr	r3, [r4, #32]
   2ce04:	sub	r3, r3, #1
   2ce08:	str	r3, [r4, #32]
   2ce0c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2ce10:	ldr	r3, [r4, #20]
   2ce14:	add	r2, r3, #1
   2ce18:	str	r2, [r4, #20]
   2ce1c:	mov	r2, #93	; 0x5d
   2ce20:	strb	r2, [r3]
   2ce24:	add	sp, sp, #132	; 0x84
   2ce28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ce2c:	add	r5, r5, r9
   2ce30:	add	fp, fp, #4
   2ce34:	ldrb	r3, [r5, #4]
   2ce38:	cmp	r3, #0
   2ce3c:	beq	2ceb0 <flatcc_json_printer_union_vector_field@@Base+0x20c>
   2ce40:	add	r1, sp, #128	; 0x80
   2ce44:	strb	r3, [sp, #16]
   2ce48:	str	fp, [r1, #-120]!	; 0xffffff88
   2ce4c:	mov	r0, r4
   2ce50:	ldr	r3, [sp, #176]	; 0xb0
   2ce54:	blx	r3
   2ce58:	add	r3, r7, #3
   2ce5c:	add	r6, r5, r3
   2ce60:	mov	r7, #44	; 0x2c
   2ce64:	add	r5, r5, #4
   2ce68:	mov	r8, #110	; 0x6e
   2ce6c:	cmp	r5, r6
   2ce70:	beq	2cddc <flatcc_json_printer_union_vector_field@@Base+0x138>
   2ce74:	ldrb	r3, [r5, #1]!
   2ce78:	ldr	r2, [r4, #20]
   2ce7c:	add	fp, fp, #4
   2ce80:	add	r1, r2, #1
   2ce84:	cmp	r3, #0
   2ce88:	str	r1, [r4, #20]
   2ce8c:	strb	r7, [r2]
   2ce90:	beq	2cf00 <flatcc_json_printer_union_vector_field@@Base+0x25c>
   2ce94:	strb	r3, [sp, #16]
   2ce98:	add	r1, sp, #8
   2ce9c:	mov	r0, r4
   2cea0:	ldr	r3, [sp, #176]	; 0xb0
   2cea4:	str	fp, [sp, #8]
   2cea8:	blx	r3
   2ceac:	b	2ce6c <flatcc_json_printer_union_vector_field@@Base+0x1c8>
   2ceb0:	ldr	r3, [r4, #20]
   2ceb4:	add	r2, r3, #1
   2ceb8:	str	r2, [r4, #20]
   2cebc:	mov	r2, #110	; 0x6e
   2cec0:	strb	r2, [r3]
   2cec4:	ldr	r3, [r4, #20]
   2cec8:	add	r2, r3, #1
   2cecc:	str	r2, [r4, #20]
   2ced0:	mov	r2, #117	; 0x75
   2ced4:	strb	r2, [r3]
   2ced8:	ldr	r3, [r4, #20]
   2cedc:	add	r2, r3, #1
   2cee0:	str	r2, [r4, #20]
   2cee4:	mov	r2, #108	; 0x6c
   2cee8:	strb	r2, [r3]
   2ceec:	ldr	r3, [r4, #20]
   2cef0:	add	r1, r3, #1
   2cef4:	str	r1, [r4, #20]
   2cef8:	strb	r2, [r3]
   2cefc:	b	2ce58 <flatcc_json_printer_union_vector_field@@Base+0x1b4>
   2cf00:	ldr	r3, [r4, #20]
   2cf04:	add	r2, r3, #1
   2cf08:	str	r2, [r4, #20]
   2cf0c:	strb	r8, [r3]
   2cf10:	ldr	r3, [r4, #20]
   2cf14:	add	r2, r3, #1
   2cf18:	str	r2, [r4, #20]
   2cf1c:	mov	r2, #117	; 0x75
   2cf20:	strb	r2, [r3]
   2cf24:	ldr	r3, [r4, #20]
   2cf28:	add	r2, r3, #1
   2cf2c:	str	r2, [r4, #20]
   2cf30:	mov	r2, #108	; 0x6c
   2cf34:	strb	r2, [r3]
   2cf38:	ldr	r3, [r4, #20]
   2cf3c:	add	r1, r3, #1
   2cf40:	str	r1, [r4, #20]
   2cf44:	strb	r2, [r3]
   2cf48:	b	2ce6c <flatcc_json_printer_union_vector_field@@Base+0x1c8>
   2cf4c:	andeq	r0, r0, fp, asr #6
   2cf50:	andeq	r3, r3, r5, ror #16
   2cf54:	andeq	r3, r3, r5, lsl #16
   2cf58:	andeq	r3, r3, r6, lsl #20
   2cf5c:	andeq	r3, r3, r1, lsr #20

0002cf60 <flatcc_json_printer_table_field@@Base>:
   2cf60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cf64:	mov	r5, r1
   2cf68:	mov	r4, r0
   2cf6c:	mov	r1, r2
   2cf70:	mov	r0, r5
   2cf74:	mov	r8, r3
   2cf78:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2cf7c:	ldr	r9, [sp, #32]
   2cf80:	ldr	r7, [sp, #36]	; 0x24
   2cf84:	subs	r6, r0, #0
   2cf88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2cf8c:	ldr	r2, [r5, #16]
   2cf90:	mov	r1, r8
   2cf94:	cmp	r2, #0
   2cf98:	add	r3, r2, #1
   2cf9c:	ldrne	r2, [r4, #20]
   2cfa0:	str	r3, [r5, #16]
   2cfa4:	addne	r3, r2, #1
   2cfa8:	strne	r3, [r4, #20]
   2cfac:	movne	r3, #44	; 0x2c
   2cfb0:	strbne	r3, [r2]
   2cfb4:	mov	r0, r4
   2cfb8:	mov	r2, r9
   2cfbc:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2cfc0:	ldr	r1, [r6]
   2cfc4:	mov	r3, r7
   2cfc8:	ldr	r2, [r5, #12]
   2cfcc:	add	r1, r6, r1
   2cfd0:	mov	r0, r4
   2cfd4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   2cfd8:	b	280c0 <flatcc_json_parser_table_as_root@@Base+0x1634>

0002cfdc <flatcc_json_printer_union_field@@Base>:
   2cfdc:	push	{r4, r5, r6, r7, r8, r9, lr}
   2cfe0:	mov	r5, r1
   2cfe4:	sub	sp, sp, #20
   2cfe8:	sub	r1, r2, #1
   2cfec:	mov	r4, r0
   2cff0:	mov	r0, r5
   2cff4:	mov	r8, r3
   2cff8:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2cffc:	ldr	r6, [sp, #48]	; 0x30
   2d000:	mov	r7, r0
   2d004:	mov	r1, r2
   2d008:	mov	r0, r5
   2d00c:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2d010:	cmp	r7, #0
   2d014:	cmpne	r0, #0
   2d018:	beq	2d184 <flatcc_json_printer_union_field@@Base+0x1a8>
   2d01c:	ldr	r3, [r5, #16]
   2d020:	ldrb	r7, [r7]
   2d024:	cmp	r3, #0
   2d028:	add	r2, r3, #1
   2d02c:	ldrne	r3, [r4, #20]
   2d030:	str	r2, [r5, #16]
   2d034:	addne	r2, r3, #1
   2d038:	strne	r2, [r4, #20]
   2d03c:	movne	r2, #44	; 0x2c
   2d040:	strbne	r2, [r3]
   2d044:	ldrb	r3, [r4, #25]
   2d048:	mov	r9, r0
   2d04c:	cmp	r3, #0
   2d050:	beq	2d18c <flatcc_json_printer_union_field@@Base+0x1b0>
   2d054:	ldr	r3, [r4, #20]
   2d058:	mov	r0, r4
   2d05c:	add	r2, r3, #1
   2d060:	str	r2, [r4, #20]
   2d064:	mov	r2, #10
   2d068:	strb	r2, [r3]
   2d06c:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2d070:	ldr	r3, [r4, #20]
   2d074:	mov	r2, #34	; 0x22
   2d078:	mov	r1, r8
   2d07c:	strb	r2, [r3]
   2d080:	ldrb	r3, [r4, #26]
   2d084:	ldr	r0, [r4, #20]
   2d088:	ldr	r2, [r4, #16]
   2d08c:	cmp	r3, #0
   2d090:	addeq	r0, r0, #1
   2d094:	add	r3, r0, r6
   2d098:	cmp	r2, r3
   2d09c:	str	r0, [r4, #20]
   2d0a0:	mov	r2, r6
   2d0a4:	bls	2d198 <flatcc_json_printer_union_field@@Base+0x1bc>
   2d0a8:	bl	14570 <memcpy@plt>
   2d0ac:	ldr	r3, [r4, #20]
   2d0b0:	add	r3, r3, r6
   2d0b4:	str	r3, [r4, #20]
   2d0b8:	mov	r2, #5
   2d0bc:	ldr	r1, [pc, #244]	; 2d1b8 <flatcc_json_printer_union_field@@Base+0x1dc>
   2d0c0:	mov	r0, r4
   2d0c4:	bl	2795c <flatcc_json_parser_table_as_root@@Base+0xed0>
   2d0c8:	ldr	r3, [r4, #20]
   2d0cc:	mov	r2, #34	; 0x22
   2d0d0:	strb	r2, [r3]
   2d0d4:	ldr	r1, [r4, #20]
   2d0d8:	ldrb	r3, [r4, #26]
   2d0dc:	clz	r3, r3
   2d0e0:	lsr	r3, r3, #5
   2d0e4:	add	r2, r1, r3
   2d0e8:	add	r2, r2, #1
   2d0ec:	str	r2, [r4, #20]
   2d0f0:	mov	r2, #58	; 0x3a
   2d0f4:	strb	r2, [r1, r3]
   2d0f8:	ldr	r3, [r4, #20]
   2d0fc:	mov	r2, #32
   2d100:	strb	r2, [r3]
   2d104:	ldrb	r3, [r4, #25]
   2d108:	ldr	r1, [r4, #20]
   2d10c:	cmp	r3, #0
   2d110:	addne	r1, r1, #1
   2d114:	ldrb	r3, [r4, #27]
   2d118:	str	r1, [r4, #20]
   2d11c:	cmp	r3, #0
   2d120:	beq	2d1a4 <flatcc_json_printer_union_field@@Base+0x1c8>
   2d124:	mov	r0, r7
   2d128:	bl	27ef0 <flatcc_json_parser_table_as_root@@Base+0x1464>
   2d12c:	ldr	r3, [r4, #20]
   2d130:	add	r0, r3, r0
   2d134:	str	r0, [r4, #20]
   2d138:	cmp	r7, #0
   2d13c:	beq	2d184 <flatcc_json_printer_union_field@@Base+0x1a8>
   2d140:	ldr	r3, [r4, #20]
   2d144:	mov	r1, r8
   2d148:	add	r2, r3, #1
   2d14c:	str	r2, [r4, #20]
   2d150:	mov	r2, #44	; 0x2c
   2d154:	strb	r2, [r3]
   2d158:	mov	r0, r4
   2d15c:	mov	r2, r6
   2d160:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2d164:	ldr	r3, [r5, #12]
   2d168:	add	r1, sp, #16
   2d16c:	str	r3, [sp, #8]
   2d170:	str	r9, [r1, #-12]!
   2d174:	mov	r0, r4
   2d178:	ldr	r3, [sp, #56]	; 0x38
   2d17c:	strb	r7, [sp, #12]
   2d180:	blx	r3
   2d184:	add	sp, sp, #20
   2d188:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d18c:	mov	r0, r4
   2d190:	bl	27e50 <flatcc_json_parser_table_as_root@@Base+0x13c4>
   2d194:	b	2d070 <flatcc_json_printer_union_field@@Base+0x94>
   2d198:	mov	r0, r4
   2d19c:	bl	2795c <flatcc_json_parser_table_as_root@@Base+0xed0>
   2d1a0:	b	2d0b8 <flatcc_json_printer_union_field@@Base+0xdc>
   2d1a4:	mov	r1, r7
   2d1a8:	mov	r0, r4
   2d1ac:	ldr	r3, [sp, #52]	; 0x34
   2d1b0:	blx	r3
   2d1b4:	b	2d138 <flatcc_json_printer_union_field@@Base+0x15c>
   2d1b8:	andeq	r3, r3, r1, lsr #20

0002d1bc <flatcc_json_printer_union_table@@Base>:
   2d1bc:	ldr	ip, [r1]
   2d1c0:	push	{lr}		; (str lr, [sp, #-4]!)
   2d1c4:	mov	r3, r2
   2d1c8:	ldr	lr, [ip]
   2d1cc:	ldr	r2, [r1, #4]
   2d1d0:	add	r1, ip, lr
   2d1d4:	pop	{lr}		; (ldr lr, [sp], #4)
   2d1d8:	b	280c0 <flatcc_json_parser_table_as_root@@Base+0x1634>

0002d1dc <flatcc_json_printer_union_struct@@Base>:
   2d1dc:	ldr	r3, [r0, #32]
   2d1e0:	push	{r4, lr}
   2d1e4:	add	r3, r3, #1
   2d1e8:	str	r3, [r0, #32]
   2d1ec:	ldr	r3, [r0, #20]
   2d1f0:	mov	r4, r0
   2d1f4:	add	ip, r3, #1
   2d1f8:	str	ip, [r0, #20]
   2d1fc:	mov	ip, #123	; 0x7b
   2d200:	strb	ip, [r3]
   2d204:	ldr	r3, [r1]
   2d208:	ldr	r1, [r3]
   2d20c:	add	r1, r3, r1
   2d210:	blx	r2
   2d214:	ldrb	r3, [r4, #25]
   2d218:	cmp	r3, #0
   2d21c:	beq	2d248 <flatcc_json_printer_union_struct@@Base+0x6c>
   2d220:	ldr	r3, [r4, #20]
   2d224:	mov	r0, r4
   2d228:	add	r2, r3, #1
   2d22c:	str	r2, [r4, #20]
   2d230:	mov	r2, #10
   2d234:	strb	r2, [r3]
   2d238:	ldr	r3, [r4, #32]
   2d23c:	sub	r3, r3, #1
   2d240:	str	r3, [r4, #32]
   2d244:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2d248:	ldr	r3, [r4, #20]
   2d24c:	add	r2, r3, #1
   2d250:	str	r2, [r4, #20]
   2d254:	mov	r2, #125	; 0x7d
   2d258:	strb	r2, [r3]
   2d25c:	pop	{r4, pc}

0002d260 <flatcc_json_printer_union_string@@Base>:
   2d260:	ldr	r3, [r1]
   2d264:	ldr	r1, [r3]
   2d268:	add	r1, r3, r1
   2d26c:	b	27bb8 <flatcc_json_parser_table_as_root@@Base+0x112c>

0002d270 <flatcc_json_printer_embedded_struct_field@@Base>:
   2d270:	cmp	r1, #0
   2d274:	push	{r4, r5, r6, lr}
   2d278:	mov	r6, r2
   2d27c:	ldrne	r2, [r0, #20]
   2d280:	mov	r5, r3
   2d284:	addne	r3, r2, #1
   2d288:	mov	r4, r0
   2d28c:	strne	r3, [r0, #20]
   2d290:	movne	r3, #44	; 0x2c
   2d294:	strbne	r3, [r2]
   2d298:	ldr	r1, [sp, #16]
   2d29c:	ldr	r2, [sp, #20]
   2d2a0:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2d2a4:	ldr	r2, [r4, #32]
   2d2a8:	add	r1, r6, r5
   2d2ac:	add	r2, r2, #1
   2d2b0:	str	r2, [r4, #32]
   2d2b4:	ldr	r2, [r4, #20]
   2d2b8:	mov	r0, r4
   2d2bc:	add	r3, r2, #1
   2d2c0:	str	r3, [r4, #20]
   2d2c4:	mov	r3, #123	; 0x7b
   2d2c8:	strb	r3, [r2]
   2d2cc:	ldr	r3, [sp, #24]
   2d2d0:	blx	r3
   2d2d4:	ldrb	r3, [r4, #25]
   2d2d8:	cmp	r3, #0
   2d2dc:	beq	2d308 <flatcc_json_printer_embedded_struct_field@@Base+0x98>
   2d2e0:	ldr	r3, [r4, #20]
   2d2e4:	mov	r0, r4
   2d2e8:	add	r2, r3, #1
   2d2ec:	str	r2, [r4, #20]
   2d2f0:	mov	r2, #10
   2d2f4:	strb	r2, [r3]
   2d2f8:	ldr	r3, [r4, #32]
   2d2fc:	sub	r3, r3, #1
   2d300:	str	r3, [r4, #32]
   2d304:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2d308:	ldr	r3, [r4, #20]
   2d30c:	add	r2, r3, #1
   2d310:	str	r2, [r4, #20]
   2d314:	mov	r2, #125	; 0x7d
   2d318:	strb	r2, [r3]
   2d31c:	pop	{r4, r5, r6, pc}

0002d320 <flatcc_json_printer_struct_field@@Base>:
   2d320:	push	{r4, r5, r6, r7, r8, lr}
   2d324:	mov	r5, r1
   2d328:	mov	r4, r0
   2d32c:	mov	r1, r2
   2d330:	mov	r0, r5
   2d334:	mov	r7, r3
   2d338:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2d33c:	subs	r6, r0, #0
   2d340:	popeq	{r4, r5, r6, r7, r8, pc}
   2d344:	ldr	r2, [r5, #16]
   2d348:	mov	r1, r7
   2d34c:	cmp	r2, #0
   2d350:	add	r3, r2, #1
   2d354:	ldrne	r2, [r4, #20]
   2d358:	str	r3, [r5, #16]
   2d35c:	addne	r3, r2, #1
   2d360:	strne	r3, [r4, #20]
   2d364:	movne	r3, #44	; 0x2c
   2d368:	strbne	r3, [r2]
   2d36c:	mov	r0, r4
   2d370:	ldr	r2, [sp, #24]
   2d374:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2d378:	ldr	r3, [r4, #32]
   2d37c:	mov	r1, r6
   2d380:	add	r3, r3, #1
   2d384:	str	r3, [r4, #32]
   2d388:	ldr	r3, [r4, #20]
   2d38c:	mov	r0, r4
   2d390:	add	r2, r3, #1
   2d394:	str	r2, [r4, #20]
   2d398:	mov	r2, #123	; 0x7b
   2d39c:	strb	r2, [r3]
   2d3a0:	ldr	r3, [sp, #28]
   2d3a4:	blx	r3
   2d3a8:	ldrb	r3, [r4, #25]
   2d3ac:	cmp	r3, #0
   2d3b0:	beq	2d3dc <flatcc_json_printer_struct_field@@Base+0xbc>
   2d3b4:	ldr	r3, [r4, #20]
   2d3b8:	mov	r0, r4
   2d3bc:	add	r2, r3, #1
   2d3c0:	str	r2, [r4, #20]
   2d3c4:	mov	r2, #10
   2d3c8:	strb	r2, [r3]
   2d3cc:	ldr	r3, [r4, #32]
   2d3d0:	sub	r3, r3, #1
   2d3d4:	str	r3, [r4, #32]
   2d3d8:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2d3dc:	ldr	r3, [r4, #20]
   2d3e0:	add	r2, r3, #1
   2d3e4:	str	r2, [r4, #20]
   2d3e8:	mov	r2, #125	; 0x7d
   2d3ec:	strb	r2, [r3]
   2d3f0:	pop	{r4, r5, r6, r7, r8, pc}

0002d3f4 <flatcc_json_printer_struct_as_root@@Base>:
   2d3f4:	push	{r4, r5, r6, lr}
   2d3f8:	mov	r4, r0
   2d3fc:	mov	r5, r1
   2d400:	bl	28184 <flatcc_json_parser_table_as_root@@Base+0x16f8>
   2d404:	cmp	r0, #0
   2d408:	bne	2d414 <flatcc_json_printer_struct_as_root@@Base+0x20>
   2d40c:	mvn	r0, #0
   2d410:	pop	{r4, r5, r6, pc}
   2d414:	ldr	r3, [r4, #32]
   2d418:	mov	r0, r4
   2d41c:	add	r3, r3, #1
   2d420:	str	r3, [r4, #32]
   2d424:	ldr	r3, [r4, #20]
   2d428:	add	r2, r3, #1
   2d42c:	str	r2, [r4, #20]
   2d430:	mov	r2, #123	; 0x7b
   2d434:	strb	r2, [r3]
   2d438:	ldr	r1, [r5]
   2d43c:	ldr	r3, [sp, #16]
   2d440:	add	r1, r5, r1
   2d444:	blx	r3
   2d448:	ldrb	r3, [r4, #25]
   2d44c:	cmp	r3, #0
   2d450:	beq	2d47c <flatcc_json_printer_struct_as_root@@Base+0x88>
   2d454:	ldr	r3, [r4, #20]
   2d458:	mov	r0, r4
   2d45c:	add	r2, r3, #1
   2d460:	str	r2, [r4, #20]
   2d464:	mov	r2, #10
   2d468:	strb	r2, [r3]
   2d46c:	ldr	r3, [r4, #32]
   2d470:	sub	r3, r3, #1
   2d474:	str	r3, [r4, #32]
   2d478:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2d47c:	ldr	r3, [r4, #20]
   2d480:	add	r2, r3, #1
   2d484:	str	r2, [r4, #20]
   2d488:	mov	r2, #125	; 0x7d
   2d48c:	strb	r2, [r3]
   2d490:	ldrb	r3, [r4, #25]
   2d494:	cmp	r3, #0
   2d498:	beq	2d4b8 <flatcc_json_printer_struct_as_root@@Base+0xc4>
   2d49c:	ldr	r3, [r4, #32]
   2d4a0:	cmp	r3, #0
   2d4a4:	ldreq	r3, [r4, #20]
   2d4a8:	addeq	r2, r3, #1
   2d4ac:	streq	r2, [r4, #20]
   2d4b0:	moveq	r2, #10
   2d4b4:	strbeq	r2, [r3]
   2d4b8:	ldr	r3, [r4, #44]	; 0x2c
   2d4bc:	mov	r1, #1
   2d4c0:	mov	r0, r4
   2d4c4:	blx	r3
   2d4c8:	ldr	r3, [r4, #36]	; 0x24
   2d4cc:	cmp	r3, #0
   2d4d0:	bne	2d40c <flatcc_json_printer_struct_as_root@@Base+0x18>
   2d4d4:	ldr	r3, [r4]
   2d4d8:	ldr	r0, [r4, #20]
   2d4dc:	sub	r0, r0, r3
   2d4e0:	ldr	r3, [r4, #12]
   2d4e4:	add	r0, r0, r3
   2d4e8:	pop	{r4, r5, r6, pc}

0002d4ec <flatcc_json_printer_table_as_root@@Base>:
   2d4ec:	push	{r4, r5, r6, lr}
   2d4f0:	mov	r4, r0
   2d4f4:	mov	r5, r1
   2d4f8:	bl	28184 <flatcc_json_parser_table_as_root@@Base+0x16f8>
   2d4fc:	cmp	r0, #0
   2d500:	bne	2d50c <flatcc_json_printer_table_as_root@@Base+0x20>
   2d504:	mvn	r0, #0
   2d508:	pop	{r4, r5, r6, pc}
   2d50c:	ldr	r1, [r5]
   2d510:	ldr	r3, [sp, #16]
   2d514:	mov	r2, #100	; 0x64
   2d518:	add	r1, r5, r1
   2d51c:	mov	r0, r4
   2d520:	bl	280c0 <flatcc_json_parser_table_as_root@@Base+0x1634>
   2d524:	ldrb	r3, [r4, #25]
   2d528:	cmp	r3, #0
   2d52c:	beq	2d54c <flatcc_json_printer_table_as_root@@Base+0x60>
   2d530:	ldr	r3, [r4, #32]
   2d534:	cmp	r3, #0
   2d538:	ldreq	r3, [r4, #20]
   2d53c:	addeq	r2, r3, #1
   2d540:	streq	r2, [r4, #20]
   2d544:	moveq	r2, #10
   2d548:	strbeq	r2, [r3]
   2d54c:	ldr	r3, [r4, #44]	; 0x2c
   2d550:	mov	r1, #1
   2d554:	mov	r0, r4
   2d558:	blx	r3
   2d55c:	ldr	r3, [r4, #36]	; 0x24
   2d560:	cmp	r3, #0
   2d564:	bne	2d504 <flatcc_json_printer_table_as_root@@Base+0x18>
   2d568:	ldr	r3, [r4]
   2d56c:	ldr	r0, [r4, #20]
   2d570:	sub	r0, r0, r3
   2d574:	ldr	r3, [r4, #12]
   2d578:	add	r0, r0, r3
   2d57c:	pop	{r4, r5, r6, pc}

0002d580 <flatcc_json_printer_struct_as_nested_root@@Base>:
   2d580:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d584:	mov	r7, r1
   2d588:	mov	r4, r0
   2d58c:	mov	r1, r2
   2d590:	mov	r0, r7
   2d594:	mov	r9, r3
   2d598:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2d59c:	subs	r5, r0, #0
   2d5a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d5a4:	ldr	r6, [r5]
   2d5a8:	ldr	r3, [sp, #36]	; 0x24
   2d5ac:	add	r8, r5, r6
   2d5b0:	ldr	r2, [r5, r6]
   2d5b4:	mov	r1, r8
   2d5b8:	mov	r0, r4
   2d5bc:	bl	28184 <flatcc_json_parser_table_as_root@@Base+0x16f8>
   2d5c0:	cmp	r0, #0
   2d5c4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d5c8:	ldr	r3, [r7, #16]
   2d5cc:	mov	r1, r9
   2d5d0:	cmp	r3, #0
   2d5d4:	add	r2, r3, #1
   2d5d8:	ldrne	r3, [r4, #20]
   2d5dc:	str	r2, [r7, #16]
   2d5e0:	addne	r2, r3, #1
   2d5e4:	strne	r2, [r4, #20]
   2d5e8:	movne	r2, #44	; 0x2c
   2d5ec:	strbne	r2, [r3]
   2d5f0:	mov	r0, r4
   2d5f4:	ldr	r2, [sp, #32]
   2d5f8:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2d5fc:	ldr	r3, [r4, #32]
   2d600:	mov	r0, r4
   2d604:	add	r3, r3, #1
   2d608:	str	r3, [r4, #32]
   2d60c:	ldr	r3, [r4, #20]
   2d610:	add	r2, r3, #1
   2d614:	str	r2, [r4, #20]
   2d618:	mov	r2, #123	; 0x7b
   2d61c:	strb	r2, [r3]
   2d620:	ldr	r1, [r5, r6]
   2d624:	ldr	r3, [sp, #40]	; 0x28
   2d628:	add	r1, r8, r1
   2d62c:	blx	r3
   2d630:	ldrb	r3, [r4, #25]
   2d634:	cmp	r3, #0
   2d638:	beq	2d664 <flatcc_json_printer_struct_as_nested_root@@Base+0xe4>
   2d63c:	ldr	r3, [r4, #20]
   2d640:	mov	r0, r4
   2d644:	add	r2, r3, #1
   2d648:	str	r2, [r4, #20]
   2d64c:	mov	r2, #10
   2d650:	strb	r2, [r3]
   2d654:	ldr	r3, [r4, #32]
   2d658:	sub	r3, r3, #1
   2d65c:	str	r3, [r4, #32]
   2d660:	bl	27c40 <flatcc_json_parser_table_as_root@@Base+0x11b4>
   2d664:	ldr	r3, [r4, #20]
   2d668:	add	r2, r3, #1
   2d66c:	str	r2, [r4, #20]
   2d670:	mov	r2, #125	; 0x7d
   2d674:	strb	r2, [r3]
   2d678:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0002d67c <flatcc_json_printer_table_as_nested_root@@Base>:
   2d67c:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d680:	mov	r5, r1
   2d684:	mov	r4, r0
   2d688:	mov	r1, r2
   2d68c:	mov	r0, r5
   2d690:	mov	r9, r3
   2d694:	bl	278dc <flatcc_json_parser_table_as_root@@Base+0xe50>
   2d698:	ldr	sl, [sp, #40]	; 0x28
   2d69c:	ldr	fp, [sp, #44]	; 0x2c
   2d6a0:	ldr	r8, [sp, #48]	; 0x30
   2d6a4:	cmp	r0, #0
   2d6a8:	beq	2d728 <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   2d6ac:	ldr	r2, [r0]
   2d6b0:	mov	r3, fp
   2d6b4:	add	r7, r0, r2
   2d6b8:	add	r6, r7, #4
   2d6bc:	ldr	r2, [r0, r2]
   2d6c0:	mov	r1, r6
   2d6c4:	mov	r0, r4
   2d6c8:	bl	28184 <flatcc_json_parser_table_as_root@@Base+0x16f8>
   2d6cc:	cmp	r0, #0
   2d6d0:	beq	2d728 <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   2d6d4:	ldr	r3, [r5, #16]
   2d6d8:	mov	r1, r9
   2d6dc:	cmp	r3, #0
   2d6e0:	add	r2, r3, #1
   2d6e4:	ldrne	r3, [r4, #20]
   2d6e8:	str	r2, [r5, #16]
   2d6ec:	addne	r2, r3, #1
   2d6f0:	strne	r2, [r4, #20]
   2d6f4:	movne	r2, #44	; 0x2c
   2d6f8:	strbne	r2, [r3]
   2d6fc:	mov	r0, r4
   2d700:	mov	r2, sl
   2d704:	bl	27e6c <flatcc_json_parser_table_as_root@@Base+0x13e0>
   2d708:	ldr	r1, [r7, #4]
   2d70c:	mov	r3, r8
   2d710:	ldr	r2, [r5, #12]
   2d714:	add	r1, r6, r1
   2d718:	mov	r0, r4
   2d71c:	add	sp, sp, #4
   2d720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d724:	b	280c0 <flatcc_json_parser_table_as_root@@Base+0x1634>
   2d728:	add	sp, sp, #4
   2d72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002d730 <flatcc_json_printer_init@@Base>:
   2d730:	push	{r4, r5, r6, lr}
   2d734:	mov	r2, #48	; 0x30
   2d738:	mov	r5, r1
   2d73c:	mov	r1, #0
   2d740:	mov	r4, r0
   2d744:	bl	145e8 <memset@plt>
   2d748:	cmp	r5, #0
   2d74c:	ldreq	r3, [pc, #76]	; 2d7a0 <flatcc_json_printer_init@@Base+0x70>
   2d750:	ldreq	r5, [r3]
   2d754:	ldr	r3, [pc, #72]	; 2d7a4 <flatcc_json_printer_init@@Base+0x74>
   2d758:	str	r5, [r4, #40]	; 0x28
   2d75c:	ldr	r5, [pc, #68]	; 2d7a8 <flatcc_json_printer_init@@Base+0x78>
   2d760:	str	r3, [r4, #44]	; 0x2c
   2d764:	mov	r0, r5
   2d768:	bl	145a0 <malloc@plt>
   2d76c:	cmp	r0, #0
   2d770:	movne	r3, #1
   2d774:	strbne	r3, [r4, #24]
   2d778:	movne	r3, #16384	; 0x4000
   2d77c:	str	r0, [r4]
   2d780:	strne	r0, [r4, #20]
   2d784:	addne	r0, r0, r3
   2d788:	strne	r0, [r4, #16]
   2d78c:	strne	r5, [r4, #4]
   2d790:	movne	r0, #0
   2d794:	strne	r3, [r4, #8]
   2d798:	mvneq	r0, #0
   2d79c:	pop	{r4, r5, r6, pc}
   2d7a0:			; <UNDEFINED> instruction: 0x000443bc
   2d7a4:	andeq	r7, r2, r4, lsl #26
   2d7a8:	andeq	r4, r0, r0, asr #32

0002d7ac <flatcc_json_printer_init_buffer@@Base>:
   2d7ac:	cmp	r2, #63	; 0x3f
   2d7b0:	push	{r4, r5, r6, lr}
   2d7b4:	bhi	2d7cc <flatcc_json_printer_init_buffer@@Base+0x20>
   2d7b8:	ldr	r3, [pc, #80]	; 2d810 <flatcc_json_printer_init_buffer@@Base+0x64>
   2d7bc:	ldr	r2, [pc, #80]	; 2d814 <flatcc_json_printer_init_buffer@@Base+0x68>
   2d7c0:	ldr	r1, [pc, #80]	; 2d818 <flatcc_json_printer_init_buffer@@Base+0x6c>
   2d7c4:	ldr	r0, [pc, #80]	; 2d81c <flatcc_json_printer_init_buffer@@Base+0x70>
   2d7c8:	bl	14648 <__assert_fail@plt>
   2d7cc:	mov	r4, r0
   2d7d0:	mov	r6, r1
   2d7d4:	mov	r5, r2
   2d7d8:	mov	r1, #0
   2d7dc:	mov	r2, #48	; 0x30
   2d7e0:	bl	145e8 <memset@plt>
   2d7e4:	str	r5, [r4, #4]
   2d7e8:	ldr	r3, [pc, #48]	; 2d820 <flatcc_json_printer_init_buffer@@Base+0x74>
   2d7ec:	sub	r5, r5, #64	; 0x40
   2d7f0:	str	r5, [r4, #8]
   2d7f4:	add	r5, r6, r5
   2d7f8:	str	r6, [r4]
   2d7fc:	str	r6, [r4, #20]
   2d800:	str	r5, [r4, #16]
   2d804:	str	r3, [r4, #44]	; 0x2c
   2d808:	mov	r0, #0
   2d80c:	pop	{r4, r5, r6, pc}
   2d810:	andeq	r3, r3, ip, lsr #16
   2d814:	andeq	r0, r0, sp, lsl #9
   2d818:	andeq	r3, r3, r5, ror #16
   2d81c:	andeq	r3, r3, r7, lsr #20
   2d820:	andeq	r7, r2, r4, lsl r9

0002d824 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   2d824:	cmp	r1, #0
   2d828:	push	{r4, r5, r6, lr}
   2d82c:	mov	r5, r0
   2d830:	moveq	r4, #4096	; 0x1000
   2d834:	beq	2d844 <flatcc_json_printer_init_dynamic_buffer@@Base+0x20>
   2d838:	cmp	r1, #64	; 0x40
   2d83c:	movcs	r4, r1
   2d840:	movcc	r4, #64	; 0x40
   2d844:	mov	r2, #48	; 0x30
   2d848:	mov	r1, #0
   2d84c:	mov	r0, r5
   2d850:	bl	145e8 <memset@plt>
   2d854:	mov	r0, r4
   2d858:	bl	145a0 <malloc@plt>
   2d85c:	mov	r3, #1
   2d860:	strb	r3, [r5, #24]
   2d864:	str	r4, [r5, #4]
   2d868:	ldr	r3, [pc, #64]	; 2d8b0 <flatcc_json_printer_init_dynamic_buffer@@Base+0x8c>
   2d86c:	sub	r4, r4, #64	; 0x40
   2d870:	str	r4, [r5, #8]
   2d874:	str	r3, [r5, #44]	; 0x2c
   2d878:	add	r4, r0, r4
   2d87c:	cmp	r0, #0
   2d880:	str	r0, [r5]
   2d884:	str	r0, [r5, #20]
   2d888:	str	r4, [r5, #16]
   2d88c:	bne	2d8a8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x84>
   2d890:	ldr	r3, [r5, #36]	; 0x24
   2d894:	mvn	r0, #0
   2d898:	cmp	r3, #0
   2d89c:	moveq	r3, #3
   2d8a0:	streq	r3, [r5, #36]	; 0x24
   2d8a4:	pop	{r4, r5, r6, pc}
   2d8a8:	mov	r0, #0
   2d8ac:	pop	{r4, r5, r6, pc}
   2d8b0:	andeq	r7, r2, ip, lsr #27

0002d8b4 <flatcc_json_printer_get_buffer@@Base>:
   2d8b4:	ldr	r3, [r0, #44]	; 0x2c
   2d8b8:	push	{r4, r5, r6, lr}
   2d8bc:	mov	r5, r1
   2d8c0:	mov	r1, #0
   2d8c4:	mov	r4, r0
   2d8c8:	blx	r3
   2d8cc:	cmp	r5, #0
   2d8d0:	ldr	r0, [r4]
   2d8d4:	ldrne	r3, [r4, #20]
   2d8d8:	subne	r3, r3, r0
   2d8dc:	strne	r3, [r5]
   2d8e0:	pop	{r4, r5, r6, pc}

0002d8e4 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   2d8e4:	push	{r4, r5, r6, lr}
   2d8e8:	mov	r5, r0
   2d8ec:	bl	2d8b4 <flatcc_json_printer_get_buffer@@Base>
   2d8f0:	mov	r2, #48	; 0x30
   2d8f4:	mov	r1, #0
   2d8f8:	mov	r4, r0
   2d8fc:	mov	r0, r5
   2d900:	bl	145e8 <memset@plt>
   2d904:	mov	r0, r4
   2d908:	pop	{r4, r5, r6, pc}

0002d90c <flatcc_json_printer_clear@@Base>:
   2d90c:	push	{r4, lr}
   2d910:	mov	r4, r0
   2d914:	ldrb	r3, [r0, #24]
   2d918:	cmp	r3, #0
   2d91c:	beq	2d930 <flatcc_json_printer_clear@@Base+0x24>
   2d920:	ldr	r0, [r0]
   2d924:	cmp	r0, #0
   2d928:	beq	2d930 <flatcc_json_printer_clear@@Base+0x24>
   2d92c:	bl	14564 <free@plt>
   2d930:	mov	r0, r4
   2d934:	mov	r2, #48	; 0x30
   2d938:	mov	r1, #0
   2d93c:	pop	{r4, lr}
   2d940:	b	145e8 <memset@plt>
   2d944:	subs	r2, r1, #1
   2d948:	bxeq	lr
   2d94c:	bcc	2db24 <flatcc_json_printer_clear@@Base+0x218>
   2d950:	cmp	r0, r1
   2d954:	bls	2db08 <flatcc_json_printer_clear@@Base+0x1fc>
   2d958:	tst	r1, r2
   2d95c:	beq	2db14 <flatcc_json_printer_clear@@Base+0x208>
   2d960:	clz	r3, r0
   2d964:	clz	r2, r1
   2d968:	sub	r3, r2, r3
   2d96c:	rsbs	r3, r3, #31
   2d970:	addne	r3, r3, r3, lsl #1
   2d974:	mov	r2, #0
   2d978:	addne	pc, pc, r3, lsl #2
   2d97c:	nop			; (mov r0, r0)
   2d980:	cmp	r0, r1, lsl #31
   2d984:	adc	r2, r2, r2
   2d988:	subcs	r0, r0, r1, lsl #31
   2d98c:	cmp	r0, r1, lsl #30
   2d990:	adc	r2, r2, r2
   2d994:	subcs	r0, r0, r1, lsl #30
   2d998:	cmp	r0, r1, lsl #29
   2d99c:	adc	r2, r2, r2
   2d9a0:	subcs	r0, r0, r1, lsl #29
   2d9a4:	cmp	r0, r1, lsl #28
   2d9a8:	adc	r2, r2, r2
   2d9ac:	subcs	r0, r0, r1, lsl #28
   2d9b0:	cmp	r0, r1, lsl #27
   2d9b4:	adc	r2, r2, r2
   2d9b8:	subcs	r0, r0, r1, lsl #27
   2d9bc:	cmp	r0, r1, lsl #26
   2d9c0:	adc	r2, r2, r2
   2d9c4:	subcs	r0, r0, r1, lsl #26
   2d9c8:	cmp	r0, r1, lsl #25
   2d9cc:	adc	r2, r2, r2
   2d9d0:	subcs	r0, r0, r1, lsl #25
   2d9d4:	cmp	r0, r1, lsl #24
   2d9d8:	adc	r2, r2, r2
   2d9dc:	subcs	r0, r0, r1, lsl #24
   2d9e0:	cmp	r0, r1, lsl #23
   2d9e4:	adc	r2, r2, r2
   2d9e8:	subcs	r0, r0, r1, lsl #23
   2d9ec:	cmp	r0, r1, lsl #22
   2d9f0:	adc	r2, r2, r2
   2d9f4:	subcs	r0, r0, r1, lsl #22
   2d9f8:	cmp	r0, r1, lsl #21
   2d9fc:	adc	r2, r2, r2
   2da00:	subcs	r0, r0, r1, lsl #21
   2da04:	cmp	r0, r1, lsl #20
   2da08:	adc	r2, r2, r2
   2da0c:	subcs	r0, r0, r1, lsl #20
   2da10:	cmp	r0, r1, lsl #19
   2da14:	adc	r2, r2, r2
   2da18:	subcs	r0, r0, r1, lsl #19
   2da1c:	cmp	r0, r1, lsl #18
   2da20:	adc	r2, r2, r2
   2da24:	subcs	r0, r0, r1, lsl #18
   2da28:	cmp	r0, r1, lsl #17
   2da2c:	adc	r2, r2, r2
   2da30:	subcs	r0, r0, r1, lsl #17
   2da34:	cmp	r0, r1, lsl #16
   2da38:	adc	r2, r2, r2
   2da3c:	subcs	r0, r0, r1, lsl #16
   2da40:	cmp	r0, r1, lsl #15
   2da44:	adc	r2, r2, r2
   2da48:	subcs	r0, r0, r1, lsl #15
   2da4c:	cmp	r0, r1, lsl #14
   2da50:	adc	r2, r2, r2
   2da54:	subcs	r0, r0, r1, lsl #14
   2da58:	cmp	r0, r1, lsl #13
   2da5c:	adc	r2, r2, r2
   2da60:	subcs	r0, r0, r1, lsl #13
   2da64:	cmp	r0, r1, lsl #12
   2da68:	adc	r2, r2, r2
   2da6c:	subcs	r0, r0, r1, lsl #12
   2da70:	cmp	r0, r1, lsl #11
   2da74:	adc	r2, r2, r2
   2da78:	subcs	r0, r0, r1, lsl #11
   2da7c:	cmp	r0, r1, lsl #10
   2da80:	adc	r2, r2, r2
   2da84:	subcs	r0, r0, r1, lsl #10
   2da88:	cmp	r0, r1, lsl #9
   2da8c:	adc	r2, r2, r2
   2da90:	subcs	r0, r0, r1, lsl #9
   2da94:	cmp	r0, r1, lsl #8
   2da98:	adc	r2, r2, r2
   2da9c:	subcs	r0, r0, r1, lsl #8
   2daa0:	cmp	r0, r1, lsl #7
   2daa4:	adc	r2, r2, r2
   2daa8:	subcs	r0, r0, r1, lsl #7
   2daac:	cmp	r0, r1, lsl #6
   2dab0:	adc	r2, r2, r2
   2dab4:	subcs	r0, r0, r1, lsl #6
   2dab8:	cmp	r0, r1, lsl #5
   2dabc:	adc	r2, r2, r2
   2dac0:	subcs	r0, r0, r1, lsl #5
   2dac4:	cmp	r0, r1, lsl #4
   2dac8:	adc	r2, r2, r2
   2dacc:	subcs	r0, r0, r1, lsl #4
   2dad0:	cmp	r0, r1, lsl #3
   2dad4:	adc	r2, r2, r2
   2dad8:	subcs	r0, r0, r1, lsl #3
   2dadc:	cmp	r0, r1, lsl #2
   2dae0:	adc	r2, r2, r2
   2dae4:	subcs	r0, r0, r1, lsl #2
   2dae8:	cmp	r0, r1, lsl #1
   2daec:	adc	r2, r2, r2
   2daf0:	subcs	r0, r0, r1, lsl #1
   2daf4:	cmp	r0, r1
   2daf8:	adc	r2, r2, r2
   2dafc:	subcs	r0, r0, r1
   2db00:	mov	r0, r2
   2db04:	bx	lr
   2db08:	moveq	r0, #1
   2db0c:	movne	r0, #0
   2db10:	bx	lr
   2db14:	clz	r2, r1
   2db18:	rsb	r2, r2, #31
   2db1c:	lsr	r0, r0, r2
   2db20:	bx	lr
   2db24:	cmp	r0, #0
   2db28:	mvnne	r0, #0
   2db2c:	b	2e40c <flatcc_json_printer_clear@@Base+0xb00>
   2db30:	cmp	r1, #0
   2db34:	beq	2db24 <flatcc_json_printer_clear@@Base+0x218>
   2db38:	push	{r0, r1, lr}
   2db3c:	bl	2d944 <flatcc_json_printer_clear@@Base+0x38>
   2db40:	pop	{r1, r2, lr}
   2db44:	mul	r3, r2, r0
   2db48:	sub	r1, r1, r3
   2db4c:	bx	lr
   2db50:	cmp	r1, #0
   2db54:	beq	2dd60 <flatcc_json_printer_clear@@Base+0x454>
   2db58:	eor	ip, r0, r1
   2db5c:	rsbmi	r1, r1, #0
   2db60:	subs	r2, r1, #1
   2db64:	beq	2dd2c <flatcc_json_printer_clear@@Base+0x420>
   2db68:	movs	r3, r0
   2db6c:	rsbmi	r3, r0, #0
   2db70:	cmp	r3, r1
   2db74:	bls	2dd38 <flatcc_json_printer_clear@@Base+0x42c>
   2db78:	tst	r1, r2
   2db7c:	beq	2dd48 <flatcc_json_printer_clear@@Base+0x43c>
   2db80:	clz	r2, r3
   2db84:	clz	r0, r1
   2db88:	sub	r2, r0, r2
   2db8c:	rsbs	r2, r2, #31
   2db90:	addne	r2, r2, r2, lsl #1
   2db94:	mov	r0, #0
   2db98:	addne	pc, pc, r2, lsl #2
   2db9c:	nop			; (mov r0, r0)
   2dba0:	cmp	r3, r1, lsl #31
   2dba4:	adc	r0, r0, r0
   2dba8:	subcs	r3, r3, r1, lsl #31
   2dbac:	cmp	r3, r1, lsl #30
   2dbb0:	adc	r0, r0, r0
   2dbb4:	subcs	r3, r3, r1, lsl #30
   2dbb8:	cmp	r3, r1, lsl #29
   2dbbc:	adc	r0, r0, r0
   2dbc0:	subcs	r3, r3, r1, lsl #29
   2dbc4:	cmp	r3, r1, lsl #28
   2dbc8:	adc	r0, r0, r0
   2dbcc:	subcs	r3, r3, r1, lsl #28
   2dbd0:	cmp	r3, r1, lsl #27
   2dbd4:	adc	r0, r0, r0
   2dbd8:	subcs	r3, r3, r1, lsl #27
   2dbdc:	cmp	r3, r1, lsl #26
   2dbe0:	adc	r0, r0, r0
   2dbe4:	subcs	r3, r3, r1, lsl #26
   2dbe8:	cmp	r3, r1, lsl #25
   2dbec:	adc	r0, r0, r0
   2dbf0:	subcs	r3, r3, r1, lsl #25
   2dbf4:	cmp	r3, r1, lsl #24
   2dbf8:	adc	r0, r0, r0
   2dbfc:	subcs	r3, r3, r1, lsl #24
   2dc00:	cmp	r3, r1, lsl #23
   2dc04:	adc	r0, r0, r0
   2dc08:	subcs	r3, r3, r1, lsl #23
   2dc0c:	cmp	r3, r1, lsl #22
   2dc10:	adc	r0, r0, r0
   2dc14:	subcs	r3, r3, r1, lsl #22
   2dc18:	cmp	r3, r1, lsl #21
   2dc1c:	adc	r0, r0, r0
   2dc20:	subcs	r3, r3, r1, lsl #21
   2dc24:	cmp	r3, r1, lsl #20
   2dc28:	adc	r0, r0, r0
   2dc2c:	subcs	r3, r3, r1, lsl #20
   2dc30:	cmp	r3, r1, lsl #19
   2dc34:	adc	r0, r0, r0
   2dc38:	subcs	r3, r3, r1, lsl #19
   2dc3c:	cmp	r3, r1, lsl #18
   2dc40:	adc	r0, r0, r0
   2dc44:	subcs	r3, r3, r1, lsl #18
   2dc48:	cmp	r3, r1, lsl #17
   2dc4c:	adc	r0, r0, r0
   2dc50:	subcs	r3, r3, r1, lsl #17
   2dc54:	cmp	r3, r1, lsl #16
   2dc58:	adc	r0, r0, r0
   2dc5c:	subcs	r3, r3, r1, lsl #16
   2dc60:	cmp	r3, r1, lsl #15
   2dc64:	adc	r0, r0, r0
   2dc68:	subcs	r3, r3, r1, lsl #15
   2dc6c:	cmp	r3, r1, lsl #14
   2dc70:	adc	r0, r0, r0
   2dc74:	subcs	r3, r3, r1, lsl #14
   2dc78:	cmp	r3, r1, lsl #13
   2dc7c:	adc	r0, r0, r0
   2dc80:	subcs	r3, r3, r1, lsl #13
   2dc84:	cmp	r3, r1, lsl #12
   2dc88:	adc	r0, r0, r0
   2dc8c:	subcs	r3, r3, r1, lsl #12
   2dc90:	cmp	r3, r1, lsl #11
   2dc94:	adc	r0, r0, r0
   2dc98:	subcs	r3, r3, r1, lsl #11
   2dc9c:	cmp	r3, r1, lsl #10
   2dca0:	adc	r0, r0, r0
   2dca4:	subcs	r3, r3, r1, lsl #10
   2dca8:	cmp	r3, r1, lsl #9
   2dcac:	adc	r0, r0, r0
   2dcb0:	subcs	r3, r3, r1, lsl #9
   2dcb4:	cmp	r3, r1, lsl #8
   2dcb8:	adc	r0, r0, r0
   2dcbc:	subcs	r3, r3, r1, lsl #8
   2dcc0:	cmp	r3, r1, lsl #7
   2dcc4:	adc	r0, r0, r0
   2dcc8:	subcs	r3, r3, r1, lsl #7
   2dccc:	cmp	r3, r1, lsl #6
   2dcd0:	adc	r0, r0, r0
   2dcd4:	subcs	r3, r3, r1, lsl #6
   2dcd8:	cmp	r3, r1, lsl #5
   2dcdc:	adc	r0, r0, r0
   2dce0:	subcs	r3, r3, r1, lsl #5
   2dce4:	cmp	r3, r1, lsl #4
   2dce8:	adc	r0, r0, r0
   2dcec:	subcs	r3, r3, r1, lsl #4
   2dcf0:	cmp	r3, r1, lsl #3
   2dcf4:	adc	r0, r0, r0
   2dcf8:	subcs	r3, r3, r1, lsl #3
   2dcfc:	cmp	r3, r1, lsl #2
   2dd00:	adc	r0, r0, r0
   2dd04:	subcs	r3, r3, r1, lsl #2
   2dd08:	cmp	r3, r1, lsl #1
   2dd0c:	adc	r0, r0, r0
   2dd10:	subcs	r3, r3, r1, lsl #1
   2dd14:	cmp	r3, r1
   2dd18:	adc	r0, r0, r0
   2dd1c:	subcs	r3, r3, r1
   2dd20:	cmp	ip, #0
   2dd24:	rsbmi	r0, r0, #0
   2dd28:	bx	lr
   2dd2c:	teq	ip, r0
   2dd30:	rsbmi	r0, r0, #0
   2dd34:	bx	lr
   2dd38:	movcc	r0, #0
   2dd3c:	asreq	r0, ip, #31
   2dd40:	orreq	r0, r0, #1
   2dd44:	bx	lr
   2dd48:	clz	r2, r1
   2dd4c:	rsb	r2, r2, #31
   2dd50:	cmp	ip, #0
   2dd54:	lsr	r0, r3, r2
   2dd58:	rsbmi	r0, r0, #0
   2dd5c:	bx	lr
   2dd60:	cmp	r0, #0
   2dd64:	mvngt	r0, #-2147483648	; 0x80000000
   2dd68:	movlt	r0, #-2147483648	; 0x80000000
   2dd6c:	b	2e40c <flatcc_json_printer_clear@@Base+0xb00>
   2dd70:	cmp	r1, #0
   2dd74:	beq	2dd60 <flatcc_json_printer_clear@@Base+0x454>
   2dd78:	push	{r0, r1, lr}
   2dd7c:	bl	2db58 <flatcc_json_printer_clear@@Base+0x24c>
   2dd80:	pop	{r1, r2, lr}
   2dd84:	mul	r3, r2, r0
   2dd88:	sub	r1, r1, r3
   2dd8c:	bx	lr
   2dd90:	subs	r3, r2, #32
   2dd94:	rsb	ip, r2, #32
   2dd98:	lsrmi	r0, r0, r2
   2dd9c:	lsrpl	r0, r1, r3
   2dda0:	orrmi	r0, r0, r1, lsl ip
   2dda4:	lsr	r1, r1, r2
   2dda8:	bx	lr
   2ddac:	subs	r3, r2, #32
   2ddb0:	rsb	ip, r2, #32
   2ddb4:	lslmi	r1, r1, r2
   2ddb8:	lslpl	r1, r0, r3
   2ddbc:	orrmi	r1, r1, r0, lsr ip
   2ddc0:	lsl	r0, r0, r2
   2ddc4:	bx	lr
   2ddc8:	eor	r1, r1, #-2147483648	; 0x80000000
   2ddcc:	b	2ddd4 <flatcc_json_printer_clear@@Base+0x4c8>
   2ddd0:	eor	r3, r3, #-2147483648	; 0x80000000
   2ddd4:	push	{r4, r5, lr}
   2ddd8:	lsl	r4, r1, #1
   2dddc:	lsl	r5, r3, #1
   2dde0:	teq	r4, r5
   2dde4:	teqeq	r0, r2
   2dde8:	orrsne	ip, r4, r0
   2ddec:	orrsne	ip, r5, r2
   2ddf0:	mvnsne	ip, r4, asr #21
   2ddf4:	mvnsne	ip, r5, asr #21
   2ddf8:	beq	2dfe4 <flatcc_json_printer_clear@@Base+0x6d8>
   2ddfc:	lsr	r4, r4, #21
   2de00:	rsbs	r5, r4, r5, lsr #21
   2de04:	rsblt	r5, r5, #0
   2de08:	ble	2de28 <flatcc_json_printer_clear@@Base+0x51c>
   2de0c:	add	r4, r4, r5
   2de10:	eor	r2, r0, r2
   2de14:	eor	r3, r1, r3
   2de18:	eor	r0, r2, r0
   2de1c:	eor	r1, r3, r1
   2de20:	eor	r2, r0, r2
   2de24:	eor	r3, r1, r3
   2de28:	cmp	r5, #54	; 0x36
   2de2c:	pophi	{r4, r5, pc}
   2de30:	tst	r1, #-2147483648	; 0x80000000
   2de34:	lsl	r1, r1, #12
   2de38:	mov	ip, #1048576	; 0x100000
   2de3c:	orr	r1, ip, r1, lsr #12
   2de40:	beq	2de4c <flatcc_json_printer_clear@@Base+0x540>
   2de44:	rsbs	r0, r0, #0
   2de48:	rsc	r1, r1, #0
   2de4c:	tst	r3, #-2147483648	; 0x80000000
   2de50:	lsl	r3, r3, #12
   2de54:	orr	r3, ip, r3, lsr #12
   2de58:	beq	2de64 <flatcc_json_printer_clear@@Base+0x558>
   2de5c:	rsbs	r2, r2, #0
   2de60:	rsc	r3, r3, #0
   2de64:	teq	r4, r5
   2de68:	beq	2dfcc <flatcc_json_printer_clear@@Base+0x6c0>
   2de6c:	sub	r4, r4, #1
   2de70:	rsbs	lr, r5, #32
   2de74:	blt	2de90 <flatcc_json_printer_clear@@Base+0x584>
   2de78:	lsl	ip, r2, lr
   2de7c:	adds	r0, r0, r2, lsr r5
   2de80:	adc	r1, r1, #0
   2de84:	adds	r0, r0, r3, lsl lr
   2de88:	adcs	r1, r1, r3, asr r5
   2de8c:	b	2deac <flatcc_json_printer_clear@@Base+0x5a0>
   2de90:	sub	r5, r5, #32
   2de94:	add	lr, lr, #32
   2de98:	cmp	r2, #1
   2de9c:	lsl	ip, r3, lr
   2dea0:	orrcs	ip, ip, #2
   2dea4:	adds	r0, r0, r3, asr r5
   2dea8:	adcs	r1, r1, r3, asr #31
   2deac:	and	r5, r1, #-2147483648	; 0x80000000
   2deb0:	bpl	2dec0 <flatcc_json_printer_clear@@Base+0x5b4>
   2deb4:	rsbs	ip, ip, #0
   2deb8:	rscs	r0, r0, #0
   2debc:	rsc	r1, r1, #0
   2dec0:	cmp	r1, #1048576	; 0x100000
   2dec4:	bcc	2df04 <flatcc_json_printer_clear@@Base+0x5f8>
   2dec8:	cmp	r1, #2097152	; 0x200000
   2decc:	bcc	2deec <flatcc_json_printer_clear@@Base+0x5e0>
   2ded0:	lsrs	r1, r1, #1
   2ded4:	rrxs	r0, r0
   2ded8:	rrx	ip, ip
   2dedc:	add	r4, r4, #1
   2dee0:	lsl	r2, r4, #21
   2dee4:	cmn	r2, #4194304	; 0x400000
   2dee8:	bcs	2e044 <flatcc_json_printer_clear@@Base+0x738>
   2deec:	cmp	ip, #-2147483648	; 0x80000000
   2def0:	lsrseq	ip, r0, #1
   2def4:	adcs	r0, r0, #0
   2def8:	adc	r1, r1, r4, lsl #20
   2defc:	orr	r1, r1, r5
   2df00:	pop	{r4, r5, pc}
   2df04:	lsls	ip, ip, #1
   2df08:	adcs	r0, r0, r0
   2df0c:	adc	r1, r1, r1
   2df10:	tst	r1, #1048576	; 0x100000
   2df14:	sub	r4, r4, #1
   2df18:	bne	2deec <flatcc_json_printer_clear@@Base+0x5e0>
   2df1c:	teq	r1, #0
   2df20:	moveq	r1, r0
   2df24:	moveq	r0, #0
   2df28:	clz	r3, r1
   2df2c:	addeq	r3, r3, #32
   2df30:	sub	r3, r3, #11
   2df34:	subs	r2, r3, #32
   2df38:	bge	2df5c <flatcc_json_printer_clear@@Base+0x650>
   2df3c:	adds	r2, r2, #12
   2df40:	ble	2df58 <flatcc_json_printer_clear@@Base+0x64c>
   2df44:	add	ip, r2, #20
   2df48:	rsb	r2, r2, #12
   2df4c:	lsl	r0, r1, ip
   2df50:	lsr	r1, r1, r2
   2df54:	b	2df6c <flatcc_json_printer_clear@@Base+0x660>
   2df58:	add	r2, r2, #20
   2df5c:	rsble	ip, r2, #32
   2df60:	lsl	r1, r1, r2
   2df64:	orrle	r1, r1, r0, lsr ip
   2df68:	lslle	r0, r0, r2
   2df6c:	subs	r4, r4, r3
   2df70:	addge	r1, r1, r4, lsl #20
   2df74:	orrge	r1, r1, r5
   2df78:	popge	{r4, r5, pc}
   2df7c:	mvn	r4, r4
   2df80:	subs	r4, r4, #31
   2df84:	bge	2dfc0 <flatcc_json_printer_clear@@Base+0x6b4>
   2df88:	adds	r4, r4, #12
   2df8c:	bgt	2dfa8 <flatcc_json_printer_clear@@Base+0x69c>
   2df90:	add	r4, r4, #20
   2df94:	rsb	r2, r4, #32
   2df98:	lsr	r0, r0, r4
   2df9c:	orr	r0, r0, r1, lsl r2
   2dfa0:	orr	r1, r5, r1, lsr r4
   2dfa4:	pop	{r4, r5, pc}
   2dfa8:	rsb	r4, r4, #12
   2dfac:	rsb	r2, r4, #32
   2dfb0:	lsr	r0, r0, r2
   2dfb4:	orr	r0, r0, r1, lsl r4
   2dfb8:	mov	r1, r5
   2dfbc:	pop	{r4, r5, pc}
   2dfc0:	lsr	r0, r1, r4
   2dfc4:	mov	r1, r5
   2dfc8:	pop	{r4, r5, pc}
   2dfcc:	teq	r4, #0
   2dfd0:	eor	r3, r3, #1048576	; 0x100000
   2dfd4:	eoreq	r1, r1, #1048576	; 0x100000
   2dfd8:	addeq	r4, r4, #1
   2dfdc:	subne	r5, r5, #1
   2dfe0:	b	2de6c <flatcc_json_printer_clear@@Base+0x560>
   2dfe4:	mvns	ip, r4, asr #21
   2dfe8:	mvnsne	ip, r5, asr #21
   2dfec:	beq	2e054 <flatcc_json_printer_clear@@Base+0x748>
   2dff0:	teq	r4, r5
   2dff4:	teqeq	r0, r2
   2dff8:	beq	2e00c <flatcc_json_printer_clear@@Base+0x700>
   2dffc:	orrs	ip, r4, r0
   2e000:	moveq	r1, r3
   2e004:	moveq	r0, r2
   2e008:	pop	{r4, r5, pc}
   2e00c:	teq	r1, r3
   2e010:	movne	r1, #0
   2e014:	movne	r0, #0
   2e018:	popne	{r4, r5, pc}
   2e01c:	lsrs	ip, r4, #21
   2e020:	bne	2e034 <flatcc_json_printer_clear@@Base+0x728>
   2e024:	lsls	r0, r0, #1
   2e028:	adcs	r1, r1, r1
   2e02c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2e030:	pop	{r4, r5, pc}
   2e034:	adds	r4, r4, #4194304	; 0x400000
   2e038:	addcc	r1, r1, #1048576	; 0x100000
   2e03c:	popcc	{r4, r5, pc}
   2e040:	and	r5, r1, #-2147483648	; 0x80000000
   2e044:	orr	r1, r5, #2130706432	; 0x7f000000
   2e048:	orr	r1, r1, #15728640	; 0xf00000
   2e04c:	mov	r0, #0
   2e050:	pop	{r4, r5, pc}
   2e054:	mvns	ip, r4, asr #21
   2e058:	movne	r1, r3
   2e05c:	movne	r0, r2
   2e060:	mvnseq	ip, r5, asr #21
   2e064:	movne	r3, r1
   2e068:	movne	r2, r0
   2e06c:	orrs	r4, r0, r1, lsl #12
   2e070:	orrseq	r5, r2, r3, lsl #12
   2e074:	teqeq	r1, r3
   2e078:	orrne	r1, r1, #524288	; 0x80000
   2e07c:	pop	{r4, r5, pc}
   2e080:	teq	r0, #0
   2e084:	moveq	r1, #0
   2e088:	bxeq	lr
   2e08c:	push	{r4, r5, lr}
   2e090:	mov	r4, #1024	; 0x400
   2e094:	add	r4, r4, #50	; 0x32
   2e098:	mov	r5, #0
   2e09c:	mov	r1, #0
   2e0a0:	b	2df1c <flatcc_json_printer_clear@@Base+0x610>
   2e0a4:	teq	r0, #0
   2e0a8:	moveq	r1, #0
   2e0ac:	bxeq	lr
   2e0b0:	push	{r4, r5, lr}
   2e0b4:	mov	r4, #1024	; 0x400
   2e0b8:	add	r4, r4, #50	; 0x32
   2e0bc:	ands	r5, r0, #-2147483648	; 0x80000000
   2e0c0:	rsbmi	r0, r0, #0
   2e0c4:	mov	r1, #0
   2e0c8:	b	2df1c <flatcc_json_printer_clear@@Base+0x610>
   2e0cc:	lsls	r2, r0, #1
   2e0d0:	asr	r1, r2, #3
   2e0d4:	rrx	r1, r1
   2e0d8:	lsl	r0, r2, #28
   2e0dc:	andsne	r3, r2, #-16777216	; 0xff000000
   2e0e0:	teqne	r3, #-16777216	; 0xff000000
   2e0e4:	eorne	r1, r1, #939524096	; 0x38000000
   2e0e8:	bxne	lr
   2e0ec:	teq	r2, #0
   2e0f0:	teqne	r3, #-16777216	; 0xff000000
   2e0f4:	bxeq	lr
   2e0f8:	push	{r4, r5, lr}
   2e0fc:	mov	r4, #896	; 0x380
   2e100:	and	r5, r1, #-2147483648	; 0x80000000
   2e104:	bic	r1, r1, #-2147483648	; 0x80000000
   2e108:	b	2df1c <flatcc_json_printer_clear@@Base+0x610>
   2e10c:	orrs	r2, r0, r1
   2e110:	bxeq	lr
   2e114:	push	{r4, r5, lr}
   2e118:	mov	r5, #0
   2e11c:	b	2e13c <flatcc_json_printer_clear@@Base+0x830>
   2e120:	orrs	r2, r0, r1
   2e124:	bxeq	lr
   2e128:	push	{r4, r5, lr}
   2e12c:	ands	r5, r1, #-2147483648	; 0x80000000
   2e130:	bpl	2e13c <flatcc_json_printer_clear@@Base+0x830>
   2e134:	rsbs	r0, r0, #0
   2e138:	rsc	r1, r1, #0
   2e13c:	mov	r4, #1024	; 0x400
   2e140:	add	r4, r4, #50	; 0x32
   2e144:	lsrs	ip, r1, #22
   2e148:	beq	2dec0 <flatcc_json_printer_clear@@Base+0x5b4>
   2e14c:	mov	r2, #3
   2e150:	lsrs	ip, ip, #3
   2e154:	addne	r2, r2, #3
   2e158:	lsrs	ip, ip, #3
   2e15c:	addne	r2, r2, #3
   2e160:	add	r2, r2, ip, lsr #3
   2e164:	rsb	r3, r2, #32
   2e168:	lsl	ip, r0, r3
   2e16c:	lsr	r0, r0, r2
   2e170:	orr	r0, r0, r1, lsl r3
   2e174:	lsr	r1, r1, r2
   2e178:	add	r4, r4, r2
   2e17c:	b	2dec0 <flatcc_json_printer_clear@@Base+0x5b4>
   2e180:	eor	r0, r0, #-2147483648	; 0x80000000
   2e184:	b	2e18c <flatcc_json_printer_clear@@Base+0x880>
   2e188:	eor	r1, r1, #-2147483648	; 0x80000000
   2e18c:	lsls	r2, r0, #1
   2e190:	lslsne	r3, r1, #1
   2e194:	teqne	r2, r3
   2e198:	mvnsne	ip, r2, asr #24
   2e19c:	mvnsne	ip, r3, asr #24
   2e1a0:	beq	2e298 <flatcc_json_printer_clear@@Base+0x98c>
   2e1a4:	lsr	r2, r2, #24
   2e1a8:	rsbs	r3, r2, r3, lsr #24
   2e1ac:	addgt	r2, r2, r3
   2e1b0:	eorgt	r1, r0, r1
   2e1b4:	eorgt	r0, r1, r0
   2e1b8:	eorgt	r1, r0, r1
   2e1bc:	rsblt	r3, r3, #0
   2e1c0:	cmp	r3, #25
   2e1c4:	bxhi	lr
   2e1c8:	tst	r0, #-2147483648	; 0x80000000
   2e1cc:	orr	r0, r0, #8388608	; 0x800000
   2e1d0:	bic	r0, r0, #-16777216	; 0xff000000
   2e1d4:	rsbne	r0, r0, #0
   2e1d8:	tst	r1, #-2147483648	; 0x80000000
   2e1dc:	orr	r1, r1, #8388608	; 0x800000
   2e1e0:	bic	r1, r1, #-16777216	; 0xff000000
   2e1e4:	rsbne	r1, r1, #0
   2e1e8:	teq	r2, r3
   2e1ec:	beq	2e280 <flatcc_json_printer_clear@@Base+0x974>
   2e1f0:	sub	r2, r2, #1
   2e1f4:	adds	r0, r0, r1, asr r3
   2e1f8:	rsb	r3, r3, #32
   2e1fc:	lsl	r1, r1, r3
   2e200:	and	r3, r0, #-2147483648	; 0x80000000
   2e204:	bpl	2e210 <flatcc_json_printer_clear@@Base+0x904>
   2e208:	rsbs	r1, r1, #0
   2e20c:	rsc	r0, r0, #0
   2e210:	cmp	r0, #8388608	; 0x800000
   2e214:	bcc	2e248 <flatcc_json_printer_clear@@Base+0x93c>
   2e218:	cmp	r0, #16777216	; 0x1000000
   2e21c:	bcc	2e234 <flatcc_json_printer_clear@@Base+0x928>
   2e220:	lsrs	r0, r0, #1
   2e224:	rrx	r1, r1
   2e228:	add	r2, r2, #1
   2e22c:	cmp	r2, #254	; 0xfe
   2e230:	bcs	2e2ec <flatcc_json_printer_clear@@Base+0x9e0>
   2e234:	cmp	r1, #-2147483648	; 0x80000000
   2e238:	adc	r0, r0, r2, lsl #23
   2e23c:	biceq	r0, r0, #1
   2e240:	orr	r0, r0, r3
   2e244:	bx	lr
   2e248:	lsls	r1, r1, #1
   2e24c:	adc	r0, r0, r0
   2e250:	tst	r0, #8388608	; 0x800000
   2e254:	sub	r2, r2, #1
   2e258:	bne	2e234 <flatcc_json_printer_clear@@Base+0x928>
   2e25c:	clz	ip, r0
   2e260:	sub	ip, ip, #8
   2e264:	subs	r2, r2, ip
   2e268:	lsl	r0, r0, ip
   2e26c:	addge	r0, r0, r2, lsl #23
   2e270:	rsblt	r2, r2, #0
   2e274:	orrge	r0, r0, r3
   2e278:	orrlt	r0, r3, r0, lsr r2
   2e27c:	bx	lr
   2e280:	teq	r2, #0
   2e284:	eor	r1, r1, #8388608	; 0x800000
   2e288:	eoreq	r0, r0, #8388608	; 0x800000
   2e28c:	addeq	r2, r2, #1
   2e290:	subne	r3, r3, #1
   2e294:	b	2e1f0 <flatcc_json_printer_clear@@Base+0x8e4>
   2e298:	lsl	r3, r1, #1
   2e29c:	mvns	ip, r2, asr #24
   2e2a0:	mvnsne	ip, r3, asr #24
   2e2a4:	beq	2e2f8 <flatcc_json_printer_clear@@Base+0x9ec>
   2e2a8:	teq	r2, r3
   2e2ac:	beq	2e2bc <flatcc_json_printer_clear@@Base+0x9b0>
   2e2b0:	teq	r2, #0
   2e2b4:	moveq	r0, r1
   2e2b8:	bx	lr
   2e2bc:	teq	r0, r1
   2e2c0:	movne	r0, #0
   2e2c4:	bxne	lr
   2e2c8:	tst	r2, #-16777216	; 0xff000000
   2e2cc:	bne	2e2dc <flatcc_json_printer_clear@@Base+0x9d0>
   2e2d0:	lsls	r0, r0, #1
   2e2d4:	orrcs	r0, r0, #-2147483648	; 0x80000000
   2e2d8:	bx	lr
   2e2dc:	adds	r2, r2, #33554432	; 0x2000000
   2e2e0:	addcc	r0, r0, #8388608	; 0x800000
   2e2e4:	bxcc	lr
   2e2e8:	and	r3, r0, #-2147483648	; 0x80000000
   2e2ec:	orr	r0, r3, #2130706432	; 0x7f000000
   2e2f0:	orr	r0, r0, #8388608	; 0x800000
   2e2f4:	bx	lr
   2e2f8:	mvns	r2, r2, asr #24
   2e2fc:	movne	r0, r1
   2e300:	mvnseq	r3, r3, asr #24
   2e304:	movne	r1, r0
   2e308:	lsls	r2, r0, #9
   2e30c:	lslseq	r3, r1, #9
   2e310:	teqeq	r0, r1
   2e314:	orrne	r0, r0, #4194304	; 0x400000
   2e318:	bx	lr
   2e31c:	mov	r3, #0
   2e320:	b	2e32c <flatcc_json_printer_clear@@Base+0xa20>
   2e324:	ands	r3, r0, #-2147483648	; 0x80000000
   2e328:	rsbmi	r0, r0, #0
   2e32c:	movs	ip, r0
   2e330:	bxeq	lr
   2e334:	orr	r3, r3, #1258291200	; 0x4b000000
   2e338:	mov	r1, r0
   2e33c:	mov	r0, #0
   2e340:	b	2e384 <flatcc_json_printer_clear@@Base+0xa78>
   2e344:	orrs	r2, r0, r1
   2e348:	bxeq	lr
   2e34c:	mov	r3, #0
   2e350:	b	2e36c <flatcc_json_printer_clear@@Base+0xa60>
   2e354:	orrs	r2, r0, r1
   2e358:	bxeq	lr
   2e35c:	ands	r3, r1, #-2147483648	; 0x80000000
   2e360:	bpl	2e36c <flatcc_json_printer_clear@@Base+0xa60>
   2e364:	rsbs	r0, r0, #0
   2e368:	rsc	r1, r1, #0
   2e36c:	movs	ip, r1
   2e370:	moveq	ip, r0
   2e374:	moveq	r1, r0
   2e378:	moveq	r0, #0
   2e37c:	orr	r3, r3, #1526726656	; 0x5b000000
   2e380:	subeq	r3, r3, #268435456	; 0x10000000
   2e384:	sub	r3, r3, #8388608	; 0x800000
   2e388:	clz	r2, ip
   2e38c:	subs	r2, r2, #8
   2e390:	sub	r3, r3, r2, lsl #23
   2e394:	blt	2e3b4 <flatcc_json_printer_clear@@Base+0xaa8>
   2e398:	add	r3, r3, r1, lsl r2
   2e39c:	lsl	ip, r0, r2
   2e3a0:	rsb	r2, r2, #32
   2e3a4:	cmp	ip, #-2147483648	; 0x80000000
   2e3a8:	adc	r0, r3, r0, lsr r2
   2e3ac:	biceq	r0, r0, #1
   2e3b0:	bx	lr
   2e3b4:	add	r2, r2, #32
   2e3b8:	lsl	ip, r1, r2
   2e3bc:	rsb	r2, r2, #32
   2e3c0:	orrs	r0, r0, ip, lsl #1
   2e3c4:	adc	r0, r3, r1, lsr r2
   2e3c8:	biceq	r0, r0, ip, lsr #31
   2e3cc:	bx	lr
   2e3d0:	cmp	r3, #0
   2e3d4:	cmpeq	r2, #0
   2e3d8:	bne	2e3f0 <flatcc_json_printer_clear@@Base+0xae4>
   2e3dc:	cmp	r1, #0
   2e3e0:	cmpeq	r0, #0
   2e3e4:	mvnne	r1, #0
   2e3e8:	mvnne	r0, #0
   2e3ec:	b	2e40c <flatcc_json_printer_clear@@Base+0xb00>
   2e3f0:	sub	sp, sp, #8
   2e3f4:	push	{sp, lr}
   2e3f8:	bl	2e41c <flatcc_json_printer_clear@@Base+0xb10>
   2e3fc:	ldr	lr, [sp, #4]
   2e400:	add	sp, sp, #8
   2e404:	pop	{r2, r3}
   2e408:	bx	lr
   2e40c:	push	{r1, lr}
   2e410:	mov	r0, #8
   2e414:	bl	14540 <raise@plt>
   2e418:	pop	{r1, pc}
   2e41c:	cmp	r1, r3
   2e420:	push	{r4, r5, r6, r7, r8, r9, lr}
   2e424:	cmpeq	r0, r2
   2e428:	mov	r4, r0
   2e42c:	mov	r5, r1
   2e430:	ldr	r9, [sp, #28]
   2e434:	movcc	r0, #0
   2e438:	movcc	r1, #0
   2e43c:	bcc	2e534 <flatcc_json_printer_clear@@Base+0xc28>
   2e440:	cmp	r3, #0
   2e444:	clzeq	ip, r2
   2e448:	clzne	ip, r3
   2e44c:	addeq	ip, ip, #32
   2e450:	cmp	r5, #0
   2e454:	clzeq	r1, r4
   2e458:	addeq	r1, r1, #32
   2e45c:	clzne	r1, r5
   2e460:	sub	ip, ip, r1
   2e464:	sub	lr, ip, #32
   2e468:	lsl	r7, r3, ip
   2e46c:	rsb	r8, ip, #32
   2e470:	orr	r7, r7, r2, lsl lr
   2e474:	orr	r7, r7, r2, lsr r8
   2e478:	lsl	r6, r2, ip
   2e47c:	cmp	r5, r7
   2e480:	cmpeq	r4, r6
   2e484:	movcc	r0, #0
   2e488:	movcc	r1, #0
   2e48c:	bcc	2e4a8 <flatcc_json_printer_clear@@Base+0xb9c>
   2e490:	mov	r3, #1
   2e494:	subs	r4, r4, r6
   2e498:	lsl	r1, r3, lr
   2e49c:	lsl	r0, r3, ip
   2e4a0:	orr	r1, r1, r3, lsr r8
   2e4a4:	sbc	r5, r5, r7
   2e4a8:	cmp	ip, #0
   2e4ac:	beq	2e534 <flatcc_json_printer_clear@@Base+0xc28>
   2e4b0:	lsrs	r3, r7, #1
   2e4b4:	rrx	r2, r6
   2e4b8:	mov	r6, ip
   2e4bc:	b	2e4e0 <flatcc_json_printer_clear@@Base+0xbd4>
   2e4c0:	subs	r4, r4, r2
   2e4c4:	sbc	r5, r5, r3
   2e4c8:	adds	r4, r4, r4
   2e4cc:	adc	r5, r5, r5
   2e4d0:	adds	r4, r4, #1
   2e4d4:	adc	r5, r5, #0
   2e4d8:	subs	r6, r6, #1
   2e4dc:	beq	2e4fc <flatcc_json_printer_clear@@Base+0xbf0>
   2e4e0:	cmp	r5, r3
   2e4e4:	cmpeq	r4, r2
   2e4e8:	bcs	2e4c0 <flatcc_json_printer_clear@@Base+0xbb4>
   2e4ec:	adds	r4, r4, r4
   2e4f0:	adc	r5, r5, r5
   2e4f4:	subs	r6, r6, #1
   2e4f8:	bne	2e4e0 <flatcc_json_printer_clear@@Base+0xbd4>
   2e4fc:	lsr	r6, r4, ip
   2e500:	lsr	r7, r5, ip
   2e504:	orr	r6, r6, r5, lsl r8
   2e508:	adds	r2, r0, r4
   2e50c:	orr	r6, r6, r5, lsr lr
   2e510:	adc	r3, r1, r5
   2e514:	lsl	r1, r7, ip
   2e518:	orr	r1, r1, r6, lsl lr
   2e51c:	lsl	r0, r6, ip
   2e520:	orr	r1, r1, r6, lsr r8
   2e524:	subs	r0, r2, r0
   2e528:	mov	r4, r6
   2e52c:	mov	r5, r7
   2e530:	sbc	r1, r3, r1
   2e534:	cmp	r9, #0
   2e538:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   2e53c:	strd	r4, [r9]
   2e540:	pop	{r4, r5, r6, r7, r8, r9, pc}

0002e544 <__libc_csu_init@@Base>:
   2e544:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e548:	mov	r7, r0
   2e54c:	ldr	r6, [pc, #72]	; 2e59c <__libc_csu_init@@Base+0x58>
   2e550:	ldr	r5, [pc, #72]	; 2e5a0 <__libc_csu_init@@Base+0x5c>
   2e554:	add	r6, pc, r6
   2e558:	add	r5, pc, r5
   2e55c:	sub	r6, r6, r5
   2e560:	mov	r8, r1
   2e564:	mov	r9, r2
   2e568:	bl	14520 <raise@plt-0x20>
   2e56c:	asrs	r6, r6, #2
   2e570:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e574:	mov	r4, #0
   2e578:	add	r4, r4, #1
   2e57c:	ldr	r3, [r5], #4
   2e580:	mov	r2, r9
   2e584:	mov	r1, r8
   2e588:	mov	r0, r7
   2e58c:	blx	r3
   2e590:	cmp	r6, r4
   2e594:	bne	2e578 <__libc_csu_init@@Base+0x34>
   2e598:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e59c:			; <UNDEFINED> instruction: 0x000159b4
   2e5a0:	andeq	r5, r1, ip, lsr #19

0002e5a4 <__libc_csu_fini@@Base>:
   2e5a4:	bx	lr

Disassembly of section .fini:

0002e5a8 <.fini>:
   2e5a8:	push	{r3, lr}
   2e5ac:	pop	{r3, pc}
