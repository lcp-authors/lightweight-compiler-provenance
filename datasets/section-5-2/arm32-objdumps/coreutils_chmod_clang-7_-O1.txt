
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

000110d0 <.init>:
   110d0:	push	{r3, lr}
   110d4:	bl	1142c <__assert_fail@plt+0x48>
   110d8:	pop	{r3, pc}

Disassembly of section .plt:

000110dc <fstatfs64@plt-0x14>:
   110dc:	push	{lr}		; (str lr, [sp, #-4]!)
   110e0:	ldr	lr, [pc, #4]	; 110ec <fstatfs64@plt-0x4>
   110e4:	add	lr, pc, lr
   110e8:	ldr	pc, [lr, #8]!
   110ec:	andeq	r9, r1, r4, lsl pc

000110f0 <fstatfs64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #102400	; 0x19000
   110f8:	ldr	pc, [ip, #3860]!	; 0xf14

000110fc <calloc@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #102400	; 0x19000
   11104:	ldr	pc, [ip, #3852]!	; 0xf0c

00011108 <fputs_unlocked@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #102400	; 0x19000
   11110:	ldr	pc, [ip, #3844]!	; 0xf04

00011114 <raise@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #102400	; 0x19000
   1111c:	ldr	pc, [ip, #3836]!	; 0xefc

00011120 <strcmp@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #102400	; 0x19000
   11128:	ldr	pc, [ip, #3828]!	; 0xef4

0001112c <fflush@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #102400	; 0x19000
   11134:	ldr	pc, [ip, #3820]!	; 0xeec

00011138 <memmove@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #102400	; 0x19000
   11140:	ldr	pc, [ip, #3812]!	; 0xee4

00011144 <free@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #102400	; 0x19000
   1114c:	ldr	pc, [ip, #3804]!	; 0xedc

00011150 <_exit@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #102400	; 0x19000
   11158:	ldr	pc, [ip, #3796]!	; 0xed4

0001115c <memcpy@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #102400	; 0x19000
   11164:	ldr	pc, [ip, #3788]!	; 0xecc

00011168 <mbsinit@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #102400	; 0x19000
   11170:	ldr	pc, [ip, #3780]!	; 0xec4

00011174 <memcmp@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #102400	; 0x19000
   1117c:	ldr	pc, [ip, #3772]!	; 0xebc

00011180 <dcgettext@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #102400	; 0x19000
   11188:	ldr	pc, [ip, #3764]!	; 0xeb4

0001118c <realloc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #102400	; 0x19000
   11194:	ldr	pc, [ip, #3756]!	; 0xeac

00011198 <textdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #102400	; 0x19000
   111a0:	ldr	pc, [ip, #3748]!	; 0xea4

000111a4 <__fxstatat64@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #102400	; 0x19000
   111ac:	ldr	pc, [ip, #3740]!	; 0xe9c

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #102400	; 0x19000
   111b8:	ldr	pc, [ip, #3732]!	; 0xe94

000111bc <__fxstat64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #102400	; 0x19000
   111c4:	ldr	pc, [ip, #3724]!	; 0xe8c

000111c8 <fwrite@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #102400	; 0x19000
   111d0:	ldr	pc, [ip, #3716]!	; 0xe84

000111d4 <lseek64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #102400	; 0x19000
   111dc:	ldr	pc, [ip, #3708]!	; 0xe7c

000111e0 <__ctype_get_mb_cur_max@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #102400	; 0x19000
   111e8:	ldr	pc, [ip, #3700]!	; 0xe74

000111ec <__fpending@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #102400	; 0x19000
   111f4:	ldr	pc, [ip, #3692]!	; 0xe6c

000111f8 <ferror_unlocked@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #102400	; 0x19000
   11200:	ldr	pc, [ip, #3684]!	; 0xe64

00011204 <mbrtowc@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #102400	; 0x19000
   1120c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011210 <error@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #102400	; 0x19000
   11218:	ldr	pc, [ip, #3668]!	; 0xe54

0001121c <open64@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #102400	; 0x19000
   11224:	ldr	pc, [ip, #3660]!	; 0xe4c

00011228 <malloc@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #102400	; 0x19000
   11230:	ldr	pc, [ip, #3652]!	; 0xe44

00011234 <__libc_start_main@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #102400	; 0x19000
   1123c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #102400	; 0x19000
   11248:	ldr	pc, [ip, #3636]!	; 0xe34

0001124c <__gmon_start__@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #102400	; 0x19000
   11254:	ldr	pc, [ip, #3628]!	; 0xe2c

00011258 <getopt_long@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #102400	; 0x19000
   11260:	ldr	pc, [ip, #3620]!	; 0xe24

00011264 <__ctype_b_loc@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #102400	; 0x19000
   1126c:	ldr	pc, [ip, #3612]!	; 0xe1c

00011270 <exit@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #102400	; 0x19000
   11278:	ldr	pc, [ip, #3604]!	; 0xe14

0001127c <strlen@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #102400	; 0x19000
   11284:	ldr	pc, [ip, #3596]!	; 0xe0c

00011288 <openat64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #102400	; 0x19000
   11290:	ldr	pc, [ip, #3588]!	; 0xe04

00011294 <fchmodat@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #102400	; 0x19000
   1129c:	ldr	pc, [ip, #3580]!	; 0xdfc

000112a0 <__errno_location@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #102400	; 0x19000
   112a8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112ac <__sprintf_chk@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #102400	; 0x19000
   112b4:	ldr	pc, [ip, #3564]!	; 0xdec

000112b8 <__cxa_atexit@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #102400	; 0x19000
   112c0:	ldr	pc, [ip, #3556]!	; 0xde4

000112c4 <memset@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #102400	; 0x19000
   112cc:	ldr	pc, [ip, #3548]!	; 0xddc

000112d0 <__printf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #102400	; 0x19000
   112d8:	ldr	pc, [ip, #3540]!	; 0xdd4

000112dc <fileno@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #102400	; 0x19000
   112e4:	ldr	pc, [ip, #3532]!	; 0xdcc

000112e8 <__fprintf_chk@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #102400	; 0x19000
   112f0:	ldr	pc, [ip, #3524]!	; 0xdc4

000112f4 <fclose@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #102400	; 0x19000
   112fc:	ldr	pc, [ip, #3516]!	; 0xdbc

00011300 <fseeko64@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #102400	; 0x19000
   11308:	ldr	pc, [ip, #3508]!	; 0xdb4

0001130c <fcntl64@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #102400	; 0x19000
   11314:	ldr	pc, [ip, #3500]!	; 0xdac

00011318 <setlocale@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #102400	; 0x19000
   11320:	ldr	pc, [ip, #3492]!	; 0xda4

00011324 <strrchr@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #102400	; 0x19000
   1132c:	ldr	pc, [ip, #3484]!	; 0xd9c

00011330 <nl_langinfo@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #102400	; 0x19000
   11338:	ldr	pc, [ip, #3476]!	; 0xd94

0001133c <readdir64@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #102400	; 0x19000
   11344:	ldr	pc, [ip, #3468]!	; 0xd8c

00011348 <fdopendir@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #102400	; 0x19000
   11350:	ldr	pc, [ip, #3460]!	; 0xd84

00011354 <dirfd@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #102400	; 0x19000
   1135c:	ldr	pc, [ip, #3452]!	; 0xd7c

00011360 <fchdir@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #102400	; 0x19000
   11368:	ldr	pc, [ip, #3444]!	; 0xd74

0001136c <qsort@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #102400	; 0x19000
   11374:	ldr	pc, [ip, #3436]!	; 0xd6c

00011378 <bindtextdomain@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3428]!	; 0xd64

00011384 <umask@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3420]!	; 0xd5c

00011390 <chmod@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3412]!	; 0xd54

0001139c <__xstat64@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3404]!	; 0xd4c

000113a8 <strncmp@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3396]!	; 0xd44

000113b4 <abort@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3388]!	; 0xd3c

000113c0 <close@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3380]!	; 0xd34

000113cc <__lxstat64@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3372]!	; 0xd2c

000113d8 <closedir@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3364]!	; 0xd24

000113e4 <__assert_fail@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3356]!	; 0xd1c

Disassembly of section .text:

000113f0 <.text>:
   113f0:	mov	fp, #0
   113f4:	mov	lr, #0
   113f8:	pop	{r1}		; (ldr r1, [sp], #4)
   113fc:	mov	r2, sp
   11400:	push	{r2}		; (str r2, [sp, #-4]!)
   11404:	push	{r0}		; (str r0, [sp, #-4]!)
   11408:	ldr	ip, [pc, #16]	; 11420 <__assert_fail@plt+0x3c>
   1140c:	push	{ip}		; (str ip, [sp, #-4]!)
   11410:	ldr	r0, [pc, #12]	; 11424 <__assert_fail@plt+0x40>
   11414:	ldr	r3, [pc, #12]	; 11428 <__assert_fail@plt+0x44>
   11418:	bl	11234 <__libc_start_main@plt>
   1141c:	bl	113b4 <abort@plt>
   11420:	andeq	r9, r1, r4, lsr #18
   11424:	andeq	r1, r1, r8, ror #15
   11428:	andeq	r9, r1, r4, asr #17
   1142c:	ldr	r3, [pc, #20]	; 11448 <__assert_fail@plt+0x64>
   11430:	ldr	r2, [pc, #20]	; 1144c <__assert_fail@plt+0x68>
   11434:	add	r3, pc, r3
   11438:	ldr	r2, [r3, r2]
   1143c:	cmp	r2, #0
   11440:	bxeq	lr
   11444:	b	1124c <__gmon_start__@plt>
   11448:	andeq	r9, r1, r4, asr #23
   1144c:	andeq	r0, r0, ip, lsl #2
   11450:	ldr	r0, [pc, #24]	; 11470 <__assert_fail@plt+0x8c>
   11454:	ldr	r3, [pc, #24]	; 11474 <__assert_fail@plt+0x90>
   11458:	cmp	r3, r0
   1145c:	bxeq	lr
   11460:	ldr	r3, [pc, #16]	; 11478 <__assert_fail@plt+0x94>
   11464:	cmp	r3, #0
   11468:	bxeq	lr
   1146c:	bx	r3
   11470:	andeq	fp, r2, r8, ror #2
   11474:	andeq	fp, r2, r8, ror #2
   11478:	andeq	r0, r0, r0
   1147c:	ldr	r0, [pc, #36]	; 114a8 <__assert_fail@plt+0xc4>
   11480:	ldr	r1, [pc, #36]	; 114ac <__assert_fail@plt+0xc8>
   11484:	sub	r1, r1, r0
   11488:	asr	r1, r1, #2
   1148c:	add	r1, r1, r1, lsr #31
   11490:	asrs	r1, r1, #1
   11494:	bxeq	lr
   11498:	ldr	r3, [pc, #16]	; 114b0 <__assert_fail@plt+0xcc>
   1149c:	cmp	r3, #0
   114a0:	bxeq	lr
   114a4:	bx	r3
   114a8:	andeq	fp, r2, r8, ror #2
   114ac:	andeq	fp, r2, r8, ror #2
   114b0:	andeq	r0, r0, r0
   114b4:	push	{r4, lr}
   114b8:	ldr	r4, [pc, #24]	; 114d8 <__assert_fail@plt+0xf4>
   114bc:	ldrb	r3, [r4]
   114c0:	cmp	r3, #0
   114c4:	popne	{r4, pc}
   114c8:	bl	11450 <__assert_fail@plt+0x6c>
   114cc:	mov	r3, #1
   114d0:	strb	r3, [r4]
   114d4:	pop	{r4, pc}
   114d8:	andeq	fp, r2, r4, lsl #3
   114dc:	b	1147c <__assert_fail@plt+0x98>
   114e0:	push	{fp, lr}
   114e4:	mov	fp, sp
   114e8:	sub	sp, sp, #8
   114ec:	mov	r4, r0
   114f0:	cmp	r0, #0
   114f4:	bne	11620 <__assert_fail@plt+0x23c>
   114f8:	movw	r1, #39371	; 0x99cb
   114fc:	movt	r1, #1
   11500:	mov	r0, #0
   11504:	mov	r2, #5
   11508:	bl	11180 <dcgettext@plt>
   1150c:	mov	r1, r0
   11510:	movw	r0, #45492	; 0xb1b4
   11514:	movt	r0, #2
   11518:	ldr	r2, [r0]
   1151c:	str	r2, [sp]
   11520:	mov	r0, #1
   11524:	mov	r3, r2
   11528:	bl	112d0 <__printf_chk@plt>
   1152c:	movw	r1, #39506	; 0x9a52
   11530:	movt	r1, #1
   11534:	mov	r0, #0
   11538:	mov	r2, #5
   1153c:	bl	11180 <dcgettext@plt>
   11540:	movw	r5, #45436	; 0xb17c
   11544:	movt	r5, #2
   11548:	ldr	r1, [r5]
   1154c:	bl	11108 <fputs_unlocked@plt>
   11550:	movw	r1, #39611	; 0x9abb
   11554:	movt	r1, #1
   11558:	mov	r0, #0
   1155c:	mov	r2, #5
   11560:	bl	11180 <dcgettext@plt>
   11564:	ldr	r1, [r5]
   11568:	bl	11108 <fputs_unlocked@plt>
   1156c:	movw	r1, #39812	; 0x9b84
   11570:	movt	r1, #1
   11574:	mov	r0, #0
   11578:	mov	r2, #5
   1157c:	bl	11180 <dcgettext@plt>
   11580:	ldr	r1, [r5]
   11584:	bl	11108 <fputs_unlocked@plt>
   11588:	movw	r1, #39940	; 0x9c04
   1158c:	movt	r1, #1
   11590:	mov	r0, #0
   11594:	mov	r2, #5
   11598:	bl	11180 <dcgettext@plt>
   1159c:	ldr	r1, [r5]
   115a0:	bl	11108 <fputs_unlocked@plt>
   115a4:	movw	r1, #40006	; 0x9c46
   115a8:	movt	r1, #1
   115ac:	mov	r0, #0
   115b0:	mov	r2, #5
   115b4:	bl	11180 <dcgettext@plt>
   115b8:	ldr	r1, [r5]
   115bc:	bl	11108 <fputs_unlocked@plt>
   115c0:	movw	r1, #40073	; 0x9c89
   115c4:	movt	r1, #1
   115c8:	mov	r0, #0
   115cc:	mov	r2, #5
   115d0:	bl	11180 <dcgettext@plt>
   115d4:	ldr	r1, [r5]
   115d8:	bl	11108 <fputs_unlocked@plt>
   115dc:	movw	r1, #40118	; 0x9cb6
   115e0:	movt	r1, #1
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	bl	11180 <dcgettext@plt>
   115f0:	ldr	r1, [r5]
   115f4:	bl	11108 <fputs_unlocked@plt>
   115f8:	movw	r1, #40172	; 0x9cec
   115fc:	movt	r1, #1
   11600:	mov	r0, #0
   11604:	mov	r2, #5
   11608:	bl	11180 <dcgettext@plt>
   1160c:	ldr	r1, [r5]
   11610:	bl	11108 <fputs_unlocked@plt>
   11614:	bl	11664 <__assert_fail@plt+0x280>
   11618:	mov	r0, r4
   1161c:	bl	11270 <exit@plt>
   11620:	movw	r0, #45432	; 0xb178
   11624:	movt	r0, #2
   11628:	ldr	r5, [r0]
   1162c:	movw	r1, #39332	; 0x99a4
   11630:	movt	r1, #1
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	bl	11180 <dcgettext@plt>
   11640:	mov	r2, r0
   11644:	movw	r0, #45492	; 0xb1b4
   11648:	movt	r0, #2
   1164c:	ldr	r3, [r0]
   11650:	mov	r0, r5
   11654:	mov	r1, #1
   11658:	bl	112e8 <__fprintf_chk@plt>
   1165c:	mov	r0, r4
   11660:	bl	11270 <exit@plt>
   11664:	push	{r4, r5, fp, lr}
   11668:	add	fp, sp, #8
   1166c:	sub	sp, sp, #56	; 0x38
   11670:	movw	r0, #41856	; 0xa380
   11674:	movt	r0, #1
   11678:	add	r1, r0, #32
   1167c:	mov	r5, sp
   11680:	mov	r2, #48	; 0x30
   11684:	vld1.64	{d16-d17}, [r1]
   11688:	add	r1, r5, #32
   1168c:	add	r3, r0, #16
   11690:	vld1.64	{d18-d19}, [r0], r2
   11694:	vld1.64	{d20-d21}, [r3]
   11698:	vldr	d22, [r0]
   1169c:	vst1.64	{d16-d17}, [r1]
   116a0:	add	r0, r5, #16
   116a4:	vst1.64	{d20-d21}, [r0]
   116a8:	mov	r0, r5
   116ac:	vst1.64	{d18-d19}, [r0], r2
   116b0:	vstr	d22, [r0]
   116b4:	ldr	r1, [sp]
   116b8:	cmp	r1, #0
   116bc:	beq	116e4 <__assert_fail@plt+0x300>
   116c0:	mov	r5, sp
   116c4:	movw	r4, #40247	; 0x9d37
   116c8:	movt	r4, #1
   116cc:	mov	r0, r4
   116d0:	bl	11120 <strcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	ldrne	r1, [r5, #8]!
   116dc:	cmpne	r1, #0
   116e0:	bne	116cc <__assert_fail@plt+0x2e8>
   116e4:	ldr	r4, [r5, #4]
   116e8:	movw	r1, #40616	; 0x9ea8
   116ec:	movt	r1, #1
   116f0:	mov	r0, #0
   116f4:	mov	r2, #5
   116f8:	bl	11180 <dcgettext@plt>
   116fc:	mov	r1, r0
   11700:	movw	r2, #40345	; 0x9d99
   11704:	movt	r2, #1
   11708:	movw	r3, #40639	; 0x9ebf
   1170c:	movt	r3, #1
   11710:	mov	r0, #1
   11714:	bl	112d0 <__printf_chk@plt>
   11718:	movw	r5, #40247	; 0x9d37
   1171c:	movt	r5, #1
   11720:	cmp	r4, #0
   11724:	moveq	r4, r5
   11728:	mov	r0, #5
   1172c:	mov	r1, #0
   11730:	bl	11318 <setlocale@plt>
   11734:	cmp	r0, #0
   11738:	beq	11778 <__assert_fail@plt+0x394>
   1173c:	movw	r1, #40679	; 0x9ee7
   11740:	movt	r1, #1
   11744:	mov	r2, #3
   11748:	bl	113a8 <strncmp@plt>
   1174c:	cmp	r0, #0
   11750:	beq	11778 <__assert_fail@plt+0x394>
   11754:	movw	r1, #40683	; 0x9eeb
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	11180 <dcgettext@plt>
   11768:	movw	r1, #45436	; 0xb17c
   1176c:	movt	r1, #2
   11770:	ldr	r1, [r1]
   11774:	bl	11108 <fputs_unlocked@plt>
   11778:	movw	r1, #40754	; 0x9f32
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11180 <dcgettext@plt>
   1178c:	mov	r1, r0
   11790:	movw	r2, #40639	; 0x9ebf
   11794:	movt	r2, #1
   11798:	mov	r0, #1
   1179c:	mov	r3, r5
   117a0:	bl	112d0 <__printf_chk@plt>
   117a4:	movw	r1, #40781	; 0x9f4d
   117a8:	movt	r1, #1
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	bl	11180 <dcgettext@plt>
   117b8:	mov	r1, r0
   117bc:	movw	r0, #40549	; 0x9e65
   117c0:	movt	r0, #1
   117c4:	movw	r3, #39610	; 0x9aba
   117c8:	movt	r3, #1
   117cc:	cmp	r4, r5
   117d0:	moveq	r3, r0
   117d4:	mov	r0, #1
   117d8:	mov	r2, r4
   117dc:	bl	112d0 <__printf_chk@plt>
   117e0:	sub	sp, fp, #8
   117e4:	pop	{r4, r5, fp, pc}
   117e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117ec:	add	fp, sp, #28
   117f0:	sub	sp, sp, #28
   117f4:	mov	r5, r1
   117f8:	mov	r7, r0
   117fc:	mov	r4, #0
   11800:	str	r4, [sp, #24]
   11804:	ldr	r0, [r1]
   11808:	bl	16408 <__assert_fail@plt+0x5024>
   1180c:	movw	r1, #39610	; 0x9aba
   11810:	movt	r1, #1
   11814:	mov	r0, #6
   11818:	bl	11318 <setlocale@plt>
   1181c:	movw	r6, #40349	; 0x9d9d
   11820:	movt	r6, #1
   11824:	movw	r1, #40253	; 0x9d3d
   11828:	movt	r1, #1
   1182c:	mov	r0, r6
   11830:	bl	11378 <bindtextdomain@plt>
   11834:	mov	r0, r6
   11838:	bl	11198 <textdomain@plt>
   1183c:	movw	r0, #10592	; 0x2960
   11840:	movt	r0, #1
   11844:	bl	19928 <__assert_fail@plt+0x8544>
   11848:	movw	r0, #45448	; 0xb188
   1184c:	movt	r0, #2
   11850:	strb	r4, [r0]
   11854:	movw	r0, #45449	; 0xb189
   11858:	movt	r0, #2
   1185c:	strb	r4, [r0]
   11860:	movw	r0, #45450	; 0xb18a
   11864:	movt	r0, #2
   11868:	strb	r4, [r0]
   1186c:	mov	r0, #0
   11870:	str	r0, [sp, #12]
   11874:	mov	r0, #0
   11878:	mov	r4, #0
   1187c:	mov	r1, #0
   11880:	str	r1, [sp, #20]
   11884:	str	r7, [sp, #16]
   11888:	b	118c8 <__assert_fail@plt+0x4e4>
   1188c:	mov	r0, #44	; 0x2c
   11890:	strb	r0, [r1, r4]
   11894:	str	r1, [sp, #20]
   11898:	add	r0, r1, r5
   1189c:	add	r2, r9, #1
   118a0:	mov	r1, r8
   118a4:	bl	1115c <memcpy@plt>
   118a8:	movw	r0, #45448	; 0xb188
   118ac:	movt	r0, #2
   118b0:	mov	r1, #1
   118b4:	strb	r1, [r0]
   118b8:	mov	r0, sl
   118bc:	mov	r4, r6
   118c0:	mov	r5, r7
   118c4:	ldr	r7, [sp, #16]
   118c8:	mov	sl, r0
   118cc:	mov	r0, #0
   118d0:	str	r0, [sp]
   118d4:	mov	r0, r7
   118d8:	mov	r1, r5
   118dc:	movw	r2, #40277	; 0x9d55
   118e0:	movt	r2, #1
   118e4:	movw	r3, #41680	; 0xa2d0
   118e8:	movt	r3, #1
   118ec:	bl	11258 <getopt_long@plt>
   118f0:	add	r1, r0, #3
   118f4:	lsr	r0, r1, #1
   118f8:	cmp	r0, #130	; 0x82
   118fc:	bhi	1203c <__assert_fail@plt+0xc58>
   11900:	add	r2, pc, #4
   11904:	mov	r0, #0
   11908:	ldr	pc, [r2, r1, lsl #2]
   1190c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11910:	andeq	r1, r1, r4, ror #31
   11914:	andeq	r1, r1, ip, ror #27
   11918:	andeq	r2, r1, ip, lsr r0
   1191c:	andeq	r2, r1, ip, lsr r0
   11920:	andeq	r2, r1, ip, lsr r0
   11924:	andeq	r2, r1, ip, lsr r0
   11928:	andeq	r2, r1, ip, lsr r0
   1192c:	andeq	r2, r1, ip, lsr r0
   11930:	andeq	r2, r1, ip, lsr r0
   11934:	andeq	r2, r1, ip, lsr r0
   11938:	andeq	r2, r1, ip, lsr r0
   1193c:	andeq	r2, r1, ip, lsr r0
   11940:	andeq	r2, r1, ip, lsr r0
   11944:	andeq	r2, r1, ip, lsr r0
   11948:	andeq	r2, r1, ip, lsr r0
   1194c:	andeq	r2, r1, ip, lsr r0
   11950:	andeq	r2, r1, ip, lsr r0
   11954:	andeq	r2, r1, ip, lsr r0
   11958:	andeq	r2, r1, ip, lsr r0
   1195c:	andeq	r2, r1, ip, lsr r0
   11960:	andeq	r2, r1, ip, lsr r0
   11964:	andeq	r2, r1, ip, lsr r0
   11968:	andeq	r2, r1, ip, lsr r0
   1196c:	andeq	r2, r1, ip, lsr r0
   11970:	andeq	r2, r1, ip, lsr r0
   11974:	andeq	r2, r1, ip, lsr r0
   11978:	andeq	r2, r1, ip, lsr r0
   1197c:	andeq	r2, r1, ip, lsr r0
   11980:	andeq	r2, r1, ip, lsr r0
   11984:	andeq	r2, r1, ip, lsr r0
   11988:	andeq	r2, r1, ip, lsr r0
   1198c:	andeq	r2, r1, ip, lsr r0
   11990:	andeq	r2, r1, ip, lsr r0
   11994:	andeq	r2, r1, ip, lsr r0
   11998:	andeq	r2, r1, ip, lsr r0
   1199c:	andeq	r2, r1, ip, lsr r0
   119a0:	andeq	r2, r1, ip, lsr r0
   119a4:	andeq	r2, r1, ip, lsr r0
   119a8:	andeq	r2, r1, ip, lsr r0
   119ac:	andeq	r2, r1, ip, lsr r0
   119b0:	andeq	r2, r1, ip, lsr r0
   119b4:	andeq	r2, r1, ip, lsr r0
   119b8:	andeq	r2, r1, ip, lsr r0
   119bc:	andeq	r2, r1, ip, lsr r0
   119c0:	andeq	r2, r1, ip, lsr r0
   119c4:	andeq	r1, r1, r4, lsr #26
   119c8:	andeq	r1, r1, r4, lsr #26
   119cc:	andeq	r2, r1, ip, lsr r0
   119d0:	andeq	r2, r1, ip, lsr r0
   119d4:	andeq	r2, r1, ip, lsr r0
   119d8:	andeq	r1, r1, r4, lsr #26
   119dc:	andeq	r1, r1, r4, lsr #26
   119e0:	andeq	r1, r1, r4, lsr #26
   119e4:	andeq	r1, r1, r4, lsr #26
   119e8:	andeq	r1, r1, r4, lsr #26
   119ec:	andeq	r1, r1, r4, lsr #26
   119f0:	andeq	r1, r1, r4, lsr #26
   119f4:	andeq	r1, r1, r4, lsr #26
   119f8:	andeq	r2, r1, ip, lsr r0
   119fc:	andeq	r2, r1, ip, lsr r0
   11a00:	andeq	r2, r1, ip, lsr r0
   11a04:	andeq	r2, r1, ip, lsr r0
   11a08:	andeq	r2, r1, ip, lsr r0
   11a0c:	andeq	r1, r1, r4, lsr #26
   11a10:	andeq	r2, r1, ip, lsr r0
   11a14:	andeq	r2, r1, ip, lsr r0
   11a18:	andeq	r2, r1, ip, lsr r0
   11a1c:	andeq	r2, r1, ip, lsr r0
   11a20:	andeq	r2, r1, ip, lsr r0
   11a24:	andeq	r2, r1, ip, lsr r0
   11a28:	andeq	r2, r1, ip, lsr r0
   11a2c:	andeq	r2, r1, ip, lsr r0
   11a30:	andeq	r2, r1, ip, lsr r0
   11a34:	andeq	r2, r1, ip, lsr r0
   11a38:	andeq	r2, r1, ip, lsr r0
   11a3c:	andeq	r2, r1, ip, lsr r0
   11a40:	andeq	r2, r1, ip, lsr r0
   11a44:	andeq	r2, r1, ip, lsr r0
   11a48:	andeq	r2, r1, ip, lsr r0
   11a4c:	andeq	r2, r1, ip, lsr r0
   11a50:	andeq	r2, r1, ip, lsr r0
   11a54:	andeq	r2, r1, ip, lsr r0
   11a58:	andeq	r2, r1, ip, lsr r0
   11a5c:	andeq	r2, r1, ip, lsr r0
   11a60:	muleq	r1, ip, sp
   11a64:	andeq	r2, r1, ip, lsr r0
   11a68:	andeq	r2, r1, ip, lsr r0
   11a6c:	andeq	r2, r1, ip, lsr r0
   11a70:	andeq	r2, r1, ip, lsr r0
   11a74:	andeq	r2, r1, ip, lsr r0
   11a78:	andeq	r1, r1, r4, lsr #26
   11a7c:	andeq	r2, r1, ip, lsr r0
   11a80:	andeq	r2, r1, ip, lsr r0
   11a84:	andeq	r2, r1, ip, lsr r0
   11a88:	andeq	r2, r1, ip, lsr r0
   11a8c:	andeq	r2, r1, ip, lsr r0
   11a90:	andeq	r2, r1, ip, lsr r0
   11a94:	andeq	r2, r1, ip, lsr r0
   11a98:	andeq	r2, r1, ip, lsr r0
   11a9c:	andeq	r1, r1, r4, lsr #26
   11aa0:	andeq	r2, r1, ip, lsr r0
   11aa4:			; <UNDEFINED> instruction: 0x00011db4
   11aa8:	andeq	r2, r1, ip, lsr r0
   11aac:	andeq	r2, r1, ip, lsr r0
   11ab0:	muleq	r1, r0, sp
   11ab4:	andeq	r1, r1, r4, lsr #26
   11ab8:	andeq	r2, r1, ip, lsr r0
   11abc:	andeq	r2, r1, ip, lsr r0
   11ac0:	andeq	r2, r1, ip, lsr r0
   11ac4:	andeq	r2, r1, ip, lsr r0
   11ac8:	andeq	r2, r1, ip, lsr r0
   11acc:	andeq	r2, r1, ip, lsr r0
   11ad0:	andeq	r2, r1, ip, lsr r0
   11ad4:	andeq	r1, r1, r4, lsr #26
   11ad8:	andeq	r2, r1, ip, lsr r0
   11adc:	andeq	r2, r1, ip, lsr r0
   11ae0:	andeq	r1, r1, r4, lsr #26
   11ae4:	andeq	r1, r1, r4, lsr #26
   11ae8:	andeq	r1, r1, r4, lsr #26
   11aec:	andeq	r1, r1, r4, lsr #26
   11af0:	andeq	r1, r1, r8, lsl #27
   11af4:	andeq	r1, r1, r4, lsr #26
   11af8:	andeq	r1, r1, r4, lsr #26
   11afc:	andeq	r2, r1, ip, lsr r0
   11b00:	andeq	r2, r1, ip, lsr r0
   11b04:	andeq	r2, r1, ip, lsr r0
   11b08:	andeq	r2, r1, ip, lsr r0
   11b0c:	andeq	r2, r1, ip, lsr r0
   11b10:	andeq	r2, r1, ip, lsr r0
   11b14:	andeq	r2, r1, ip, lsr r0
   11b18:	andeq	r2, r1, ip, lsr r0
   11b1c:	andeq	r2, r1, ip, lsr r0
   11b20:	andeq	r2, r1, ip, lsr r0
   11b24:	andeq	r2, r1, ip, lsr r0
   11b28:	andeq	r2, r1, ip, lsr r0
   11b2c:	andeq	r2, r1, ip, lsr r0
   11b30:	andeq	r2, r1, ip, lsr r0
   11b34:	andeq	r2, r1, ip, lsr r0
   11b38:	andeq	r2, r1, ip, lsr r0
   11b3c:	andeq	r2, r1, ip, lsr r0
   11b40:	andeq	r2, r1, ip, lsr r0
   11b44:	andeq	r2, r1, ip, lsr r0
   11b48:	andeq	r2, r1, ip, lsr r0
   11b4c:	andeq	r2, r1, ip, lsr r0
   11b50:	andeq	r2, r1, ip, lsr r0
   11b54:	andeq	r2, r1, ip, lsr r0
   11b58:	andeq	r2, r1, ip, lsr r0
   11b5c:	andeq	r2, r1, ip, lsr r0
   11b60:	andeq	r2, r1, ip, lsr r0
   11b64:	andeq	r2, r1, ip, lsr r0
   11b68:	andeq	r2, r1, ip, lsr r0
   11b6c:	andeq	r2, r1, ip, lsr r0
   11b70:	andeq	r2, r1, ip, lsr r0
   11b74:	andeq	r2, r1, ip, lsr r0
   11b78:	andeq	r2, r1, ip, lsr r0
   11b7c:	andeq	r2, r1, ip, lsr r0
   11b80:	andeq	r2, r1, ip, lsr r0
   11b84:	andeq	r2, r1, ip, lsr r0
   11b88:	andeq	r2, r1, ip, lsr r0
   11b8c:	andeq	r2, r1, ip, lsr r0
   11b90:	andeq	r2, r1, ip, lsr r0
   11b94:	andeq	r2, r1, ip, lsr r0
   11b98:	andeq	r2, r1, ip, lsr r0
   11b9c:	andeq	r2, r1, ip, lsr r0
   11ba0:	andeq	r2, r1, ip, lsr r0
   11ba4:	andeq	r2, r1, ip, lsr r0
   11ba8:	andeq	r2, r1, ip, lsr r0
   11bac:	andeq	r2, r1, ip, lsr r0
   11bb0:	andeq	r2, r1, ip, lsr r0
   11bb4:	andeq	r2, r1, ip, lsr r0
   11bb8:	andeq	r2, r1, ip, lsr r0
   11bbc:	andeq	r2, r1, ip, lsr r0
   11bc0:	andeq	r2, r1, ip, lsr r0
   11bc4:	andeq	r2, r1, ip, lsr r0
   11bc8:	andeq	r2, r1, ip, lsr r0
   11bcc:	andeq	r2, r1, ip, lsr r0
   11bd0:	andeq	r2, r1, ip, lsr r0
   11bd4:	andeq	r2, r1, ip, lsr r0
   11bd8:	andeq	r2, r1, ip, lsr r0
   11bdc:	andeq	r2, r1, ip, lsr r0
   11be0:	andeq	r2, r1, ip, lsr r0
   11be4:	andeq	r2, r1, ip, lsr r0
   11be8:	andeq	r2, r1, ip, lsr r0
   11bec:	andeq	r2, r1, ip, lsr r0
   11bf0:	andeq	r2, r1, ip, lsr r0
   11bf4:	andeq	r2, r1, ip, lsr r0
   11bf8:	andeq	r2, r1, ip, lsr r0
   11bfc:	andeq	r2, r1, ip, lsr r0
   11c00:	andeq	r2, r1, ip, lsr r0
   11c04:	andeq	r2, r1, ip, lsr r0
   11c08:	andeq	r2, r1, ip, lsr r0
   11c0c:	andeq	r2, r1, ip, lsr r0
   11c10:	andeq	r2, r1, ip, lsr r0
   11c14:	andeq	r2, r1, ip, lsr r0
   11c18:	andeq	r2, r1, ip, lsr r0
   11c1c:	andeq	r2, r1, ip, lsr r0
   11c20:	andeq	r2, r1, ip, lsr r0
   11c24:	andeq	r2, r1, ip, lsr r0
   11c28:	andeq	r2, r1, ip, lsr r0
   11c2c:	andeq	r2, r1, ip, lsr r0
   11c30:	andeq	r2, r1, ip, lsr r0
   11c34:	andeq	r2, r1, ip, lsr r0
   11c38:	andeq	r2, r1, ip, lsr r0
   11c3c:	andeq	r2, r1, ip, lsr r0
   11c40:	andeq	r2, r1, ip, lsr r0
   11c44:	andeq	r2, r1, ip, lsr r0
   11c48:	andeq	r2, r1, ip, lsr r0
   11c4c:	andeq	r2, r1, ip, lsr r0
   11c50:	andeq	r2, r1, ip, lsr r0
   11c54:	andeq	r2, r1, ip, lsr r0
   11c58:	andeq	r2, r1, ip, lsr r0
   11c5c:	andeq	r2, r1, ip, lsr r0
   11c60:	andeq	r2, r1, ip, lsr r0
   11c64:	andeq	r2, r1, ip, lsr r0
   11c68:	andeq	r2, r1, ip, lsr r0
   11c6c:	andeq	r2, r1, ip, lsr r0
   11c70:	andeq	r2, r1, ip, lsr r0
   11c74:	andeq	r2, r1, ip, lsr r0
   11c78:	andeq	r2, r1, ip, lsr r0
   11c7c:	andeq	r2, r1, ip, lsr r0
   11c80:	andeq	r2, r1, ip, lsr r0
   11c84:	andeq	r2, r1, ip, lsr r0
   11c88:	andeq	r2, r1, ip, lsr r0
   11c8c:	andeq	r2, r1, ip, lsr r0
   11c90:	andeq	r2, r1, ip, lsr r0
   11c94:	andeq	r2, r1, ip, lsr r0
   11c98:	andeq	r2, r1, ip, lsr r0
   11c9c:	andeq	r2, r1, ip, lsr r0
   11ca0:	andeq	r2, r1, ip, lsr r0
   11ca4:	andeq	r2, r1, ip, lsr r0
   11ca8:	andeq	r2, r1, ip, lsr r0
   11cac:	andeq	r2, r1, ip, lsr r0
   11cb0:	andeq	r2, r1, ip, lsr r0
   11cb4:	andeq	r2, r1, ip, lsr r0
   11cb8:	andeq	r2, r1, ip, lsr r0
   11cbc:	andeq	r2, r1, ip, lsr r0
   11cc0:	andeq	r2, r1, ip, lsr r0
   11cc4:	andeq	r2, r1, ip, lsr r0
   11cc8:	andeq	r2, r1, ip, lsr r0
   11ccc:	andeq	r2, r1, ip, lsr r0
   11cd0:	andeq	r2, r1, ip, lsr r0
   11cd4:	andeq	r2, r1, ip, lsr r0
   11cd8:	andeq	r2, r1, ip, lsr r0
   11cdc:	andeq	r2, r1, ip, lsr r0
   11ce0:	andeq	r2, r1, ip, lsr r0
   11ce4:	andeq	r2, r1, ip, lsr r0
   11ce8:	andeq	r2, r1, ip, lsr r0
   11cec:	andeq	r2, r1, ip, lsr r0
   11cf0:	andeq	r2, r1, ip, lsr r0
   11cf4:	andeq	r2, r1, ip, lsr r0
   11cf8:	andeq	r2, r1, ip, lsr r0
   11cfc:	andeq	r2, r1, ip, lsr r0
   11d00:	andeq	r2, r1, ip, lsr r0
   11d04:	andeq	r2, r1, ip, lsr r0
   11d08:	andeq	r2, r1, ip, lsr r0
   11d0c:	andeq	r2, r1, ip, lsr r0
   11d10:	andeq	r2, r1, ip, lsr r0
   11d14:	andeq	r2, r1, ip, lsr r0
   11d18:	andeq	r1, r1, r8, asr #17
   11d1c:	andeq	r1, r1, ip, asr #27
   11d20:	ldrdeq	r1, [r1], -r4
   11d24:	movw	r0, #45424	; 0xb170
   11d28:	movt	r0, #2
   11d2c:	ldr	r0, [r0]
   11d30:	mov	r7, r5
   11d34:	add	r0, r5, r0, lsl #2
   11d38:	ldr	r8, [r0, #-4]
   11d3c:	mov	r0, r8
   11d40:	bl	1127c <strlen@plt>
   11d44:	mov	r9, r0
   11d48:	cmp	r4, #0
   11d4c:	mov	r5, r4
   11d50:	addne	r5, r5, #1
   11d54:	add	r6, r0, r5
   11d58:	ldr	r0, [sp, #24]
   11d5c:	cmp	r0, r6
   11d60:	bls	11d6c <__assert_fail@plt+0x988>
   11d64:	ldr	r1, [sp, #20]
   11d68:	b	1188c <__assert_fail@plt+0x4a8>
   11d6c:	add	r0, r6, #1
   11d70:	str	r0, [sp, #24]
   11d74:	ldr	r0, [sp, #20]
   11d78:	add	r1, sp, #24
   11d7c:	bl	18678 <__assert_fail@plt+0x7294>
   11d80:	mov	r1, r0
   11d84:	b	1188c <__assert_fail@plt+0x4a8>
   11d88:	mov	r0, #0
   11d8c:	b	11db8 <__assert_fail@plt+0x9d4>
   11d90:	movw	r0, #45449	; 0xb189
   11d94:	movt	r0, #2
   11d98:	b	11da4 <__assert_fail@plt+0x9c0>
   11d9c:	movw	r0, #45450	; 0xb18a
   11da0:	movt	r0, #2
   11da4:	mov	r1, #1
   11da8:	strb	r1, [r0]
   11dac:	mov	r0, sl
   11db0:	b	118c8 <__assert_fail@plt+0x4e4>
   11db4:	mov	r0, #1
   11db8:	movw	r1, #45336	; 0xb118
   11dbc:	movt	r1, #2
   11dc0:	str	r0, [r1]
   11dc4:	mov	r0, sl
   11dc8:	b	118c8 <__assert_fail@plt+0x4e4>
   11dcc:	mov	r0, #1
   11dd0:	b	118c8 <__assert_fail@plt+0x4e4>
   11dd4:	movw	r0, #45440	; 0xb180
   11dd8:	movt	r0, #2
   11ddc:	ldr	r0, [r0]
   11de0:	str	r0, [sp, #12]
   11de4:	mov	r0, sl
   11de8:	b	118c8 <__assert_fail@plt+0x4e4>
   11dec:	ldr	r4, [sp, #12]
   11df0:	cmp	r4, #0
   11df4:	beq	11e14 <__assert_fail@plt+0xa30>
   11df8:	mov	r6, #0
   11dfc:	ldr	r0, [sp, #20]
   11e00:	cmp	r0, #0
   11e04:	beq	11e3c <__assert_fail@plt+0xa58>
   11e08:	movw	r1, #40388	; 0x9dc4
   11e0c:	movt	r1, #1
   11e10:	b	1204c <__assert_fail@plt+0xc68>
   11e14:	ldr	r6, [sp, #20]
   11e18:	cmp	r6, #0
   11e1c:	bne	11e3c <__assert_fail@plt+0xa58>
   11e20:	movw	r0, #45424	; 0xb170
   11e24:	movt	r0, #2
   11e28:	mov	r2, r0
   11e2c:	ldr	r0, [r0]
   11e30:	add	r1, r0, #1
   11e34:	str	r1, [r2]
   11e38:	ldr	r6, [r5, r0, lsl #2]
   11e3c:	movw	r0, #45424	; 0xb170
   11e40:	movt	r0, #2
   11e44:	ldr	r0, [r0]
   11e48:	cmp	r0, r7
   11e4c:	bge	11fec <__assert_fail@plt+0xc08>
   11e50:	cmp	r4, #0
   11e54:	beq	11eb4 <__assert_fail@plt+0xad0>
   11e58:	mov	r0, r4
   11e5c:	bl	16220 <__assert_fail@plt+0x4e3c>
   11e60:	movw	r1, #45452	; 0xb18c
   11e64:	movt	r1, #2
   11e68:	str	r0, [r1]
   11e6c:	cmp	r0, #0
   11e70:	bne	11ee4 <__assert_fail@plt+0xb00>
   11e74:	bl	112a0 <__errno_location@plt>
   11e78:	ldr	r6, [r0]
   11e7c:	movw	r1, #40473	; 0x9e19
   11e80:	movt	r1, #1
   11e84:	mov	r0, #0
   11e88:	mov	r2, #5
   11e8c:	bl	11180 <dcgettext@plt>
   11e90:	mov	r5, r0
   11e94:	mov	r0, #4
   11e98:	mov	r1, r4
   11e9c:	bl	17a4c <__assert_fail@plt+0x6668>
   11ea0:	mov	r3, r0
   11ea4:	mov	r0, #1
   11ea8:	mov	r1, r6
   11eac:	mov	r2, r5
   11eb0:	bl	11210 <error@plt>
   11eb4:	mov	r0, r6
   11eb8:	bl	15da4 <__assert_fail@plt+0x49c0>
   11ebc:	movw	r1, #45452	; 0xb18c
   11ec0:	movt	r1, #2
   11ec4:	str	r0, [r1]
   11ec8:	cmp	r0, #0
   11ecc:	beq	12070 <__assert_fail@plt+0xc8c>
   11ed0:	mov	r0, #0
   11ed4:	bl	11384 <umask@plt>
   11ed8:	movw	r1, #45456	; 0xb190
   11edc:	movt	r1, #2
   11ee0:	str	r0, [r1]
   11ee4:	movw	r0, #45450	; 0xb18a
   11ee8:	movt	r0, #2
   11eec:	ldrb	r0, [r0]
   11ef0:	and	r0, sl, r0
   11ef4:	tst	r0, #1
   11ef8:	beq	11f60 <__assert_fail@plt+0xb7c>
   11efc:	movw	r0, #45464	; 0xb198
   11f00:	movt	r0, #2
   11f04:	bl	18054 <__assert_fail@plt+0x6c70>
   11f08:	movw	r1, #45480	; 0xb1a8
   11f0c:	movt	r1, #2
   11f10:	str	r0, [r1]
   11f14:	cmp	r0, #0
   11f18:	bne	11f70 <__assert_fail@plt+0xb8c>
   11f1c:	bl	112a0 <__errno_location@plt>
   11f20:	ldr	r4, [r0]
   11f24:	movw	r1, #40473	; 0x9e19
   11f28:	movt	r1, #1
   11f2c:	mov	r0, #0
   11f30:	mov	r2, #5
   11f34:	bl	11180 <dcgettext@plt>
   11f38:	mov	r5, r0
   11f3c:	movw	r1, #43135	; 0xa87f
   11f40:	movt	r1, #1
   11f44:	mov	r0, #4
   11f48:	bl	17a4c <__assert_fail@plt+0x6668>
   11f4c:	mov	r3, r0
   11f50:	mov	r0, #1
   11f54:	mov	r1, r4
   11f58:	mov	r2, r5
   11f5c:	bl	11210 <error@plt>
   11f60:	movw	r0, #45480	; 0xb1a8
   11f64:	movt	r0, #2
   11f68:	mov	r1, #0
   11f6c:	str	r1, [r0]
   11f70:	movw	r0, #45424	; 0xb170
   11f74:	movt	r0, #2
   11f78:	ldr	r0, [r0]
   11f7c:	add	r0, r5, r0, lsl #2
   11f80:	bl	120ac <__assert_fail@plt+0xcc8>
   11f84:	eor	r0, r0, #1
   11f88:	sub	sp, fp, #28
   11f8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f90:	movw	r0, #45340	; 0xb11c
   11f94:	movt	r0, #2
   11f98:	ldr	r3, [r0]
   11f9c:	movw	r0, #45436	; 0xb17c
   11fa0:	movt	r0, #2
   11fa4:	ldr	r0, [r0]
   11fa8:	mov	r1, #0
   11fac:	movw	r2, #40375	; 0x9db7
   11fb0:	movt	r2, #1
   11fb4:	movw	r7, #40359	; 0x9da7
   11fb8:	movt	r7, #1
   11fbc:	str	r7, [sp]
   11fc0:	str	r2, [sp, #4]
   11fc4:	str	r1, [sp, #8]
   11fc8:	movw	r1, #40247	; 0x9d37
   11fcc:	movt	r1, #1
   11fd0:	movw	r2, #40345	; 0x9d99
   11fd4:	movt	r2, #1
   11fd8:	bl	184a8 <__assert_fail@plt+0x70c4>
   11fdc:	mov	r0, #0
   11fe0:	bl	11270 <exit@plt>
   11fe4:	mov	r0, #0
   11fe8:	bl	114e0 <__assert_fail@plt+0xfc>
   11fec:	cmp	r6, #0
   11ff0:	beq	12044 <__assert_fail@plt+0xc60>
   11ff4:	add	r0, r5, r0, lsl #2
   11ff8:	ldr	r0, [r0, #-4]
   11ffc:	cmp	r6, r0
   12000:	bne	12044 <__assert_fail@plt+0xc60>
   12004:	movw	r1, #40448	; 0x9e00
   12008:	movt	r1, #1
   1200c:	mov	r0, #0
   12010:	mov	r2, #5
   12014:	bl	11180 <dcgettext@plt>
   12018:	mov	r6, r0
   1201c:	add	r0, r5, r7, lsl #2
   12020:	ldr	r0, [r0, #-4]
   12024:	bl	17c40 <__assert_fail@plt+0x685c>
   12028:	mov	r3, r0
   1202c:	mov	r0, #0
   12030:	mov	r1, #0
   12034:	mov	r2, r6
   12038:	bl	11210 <error@plt>
   1203c:	mov	r0, #1
   12040:	bl	114e0 <__assert_fail@plt+0xfc>
   12044:	movw	r1, #40432	; 0x9df0
   12048:	movt	r1, #1
   1204c:	mov	r0, #0
   12050:	mov	r2, #5
   12054:	bl	11180 <dcgettext@plt>
   12058:	mov	r2, r0
   1205c:	mov	r0, #0
   12060:	mov	r1, #0
   12064:	bl	11210 <error@plt>
   12068:	mov	r0, #1
   1206c:	bl	114e0 <__assert_fail@plt+0xfc>
   12070:	movw	r1, #40504	; 0x9e38
   12074:	movt	r1, #1
   12078:	mov	r0, #0
   1207c:	mov	r2, #5
   12080:	bl	11180 <dcgettext@plt>
   12084:	mov	r4, r0
   12088:	mov	r0, r6
   1208c:	bl	17c40 <__assert_fail@plt+0x685c>
   12090:	mov	r3, r0
   12094:	mov	r0, #0
   12098:	mov	r1, #0
   1209c:	mov	r2, r4
   120a0:	bl	11210 <error@plt>
   120a4:	mov	r0, #1
   120a8:	bl	114e0 <__assert_fail@plt+0xfc>
   120ac:	push	{r4, r5, r6, sl, fp, lr}
   120b0:	add	fp, sp, #16
   120b4:	movw	r1, #1041	; 0x411
   120b8:	mov	r2, #0
   120bc:	bl	189a4 <__assert_fail@plt+0x75c0>
   120c0:	mov	r5, r0
   120c4:	bl	13628 <__assert_fail@plt+0x2244>
   120c8:	cmp	r0, #0
   120cc:	beq	120fc <__assert_fail@plt+0xd18>
   120d0:	mov	r1, r0
   120d4:	mov	r4, #1
   120d8:	mov	r0, r5
   120dc:	bl	12198 <__assert_fail@plt+0xdb4>
   120e0:	and	r4, r4, r0
   120e4:	mov	r0, r5
   120e8:	bl	13628 <__assert_fail@plt+0x2244>
   120ec:	mov	r1, r0
   120f0:	cmp	r0, #0
   120f4:	bne	120d8 <__assert_fail@plt+0xcf4>
   120f8:	b	12100 <__assert_fail@plt+0xd1c>
   120fc:	mov	r4, #1
   12100:	bl	112a0 <__errno_location@plt>
   12104:	ldr	r6, [r0]
   12108:	cmp	r6, #0
   1210c:	beq	12150 <__assert_fail@plt+0xd6c>
   12110:	movw	r0, #45449	; 0xb189
   12114:	movt	r0, #2
   12118:	ldrb	r0, [r0]
   1211c:	mov	r4, #0
   12120:	cmp	r0, #0
   12124:	bne	12150 <__assert_fail@plt+0xd6c>
   12128:	mov	r4, #0
   1212c:	movw	r1, #40911	; 0x9fcf
   12130:	movt	r1, #1
   12134:	mov	r0, #0
   12138:	mov	r2, #5
   1213c:	bl	11180 <dcgettext@plt>
   12140:	mov	r2, r0
   12144:	mov	r0, #0
   12148:	mov	r1, r6
   1214c:	bl	11210 <error@plt>
   12150:	mov	r0, r5
   12154:	bl	1349c <__assert_fail@plt+0x20b8>
   12158:	cmp	r0, #0
   1215c:	beq	12190 <__assert_fail@plt+0xdac>
   12160:	bl	112a0 <__errno_location@plt>
   12164:	ldr	r5, [r0]
   12168:	mov	r4, #0
   1216c:	movw	r1, #40927	; 0x9fdf
   12170:	movt	r1, #1
   12174:	mov	r0, #0
   12178:	mov	r2, #5
   1217c:	bl	11180 <dcgettext@plt>
   12180:	mov	r2, r0
   12184:	mov	r0, #0
   12188:	mov	r1, r5
   1218c:	bl	11210 <error@plt>
   12190:	mov	r0, r4
   12194:	pop	{r4, r5, r6, sl, fp, pc}
   12198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1219c:	add	fp, sp, #28
   121a0:	sub	sp, sp, #44	; 0x2c
   121a4:	mov	r5, r1
   121a8:	mov	r4, r0
   121ac:	ldrd	r8, [r1, #24]
   121b0:	mov	r0, #0
   121b4:	str	r0, [sp, #36]	; 0x24
   121b8:	str	r0, [sp, #32]
   121bc:	str	r0, [sp, #40]	; 0x28
   121c0:	ldrh	r0, [r1, #56]	; 0x38
   121c4:	sub	r0, r0, #2
   121c8:	cmp	r0, #11
   121cc:	bhi	12264 <__assert_fail@plt+0xe80>
   121d0:	mov	r6, #1
   121d4:	add	r1, pc, #0
   121d8:	ldr	pc, [r1, r0, lsl #2]
   121dc:	andeq	r2, r1, ip, lsl #4
   121e0:	andeq	r2, r1, r4, ror #4
   121e4:	andeq	r2, r1, r4, ror r2
   121e8:	andeq	r2, r1, r4, ror #4
   121ec:	muleq	r1, r8, r6
   121f0:	muleq	r1, r8, r2
   121f4:	andeq	r2, r1, r4, ror #4
   121f8:	andeq	r2, r1, r4, ror #4
   121fc:	ldrdeq	r2, [r1], -r8
   12200:	andeq	r2, r1, r4, ror #4
   12204:	andeq	r2, r1, r4, ror #4
   12208:	andeq	r2, r1, r0, asr #6
   1220c:	mov	r0, r4
   12210:	mov	r1, r5
   12214:	bl	189f0 <__assert_fail@plt+0x760c>
   12218:	cmp	r0, #0
   1221c:	beq	12264 <__assert_fail@plt+0xe80>
   12220:	mov	r6, #0
   12224:	movw	r1, #41024	; 0xa040
   12228:	movt	r1, #1
   1222c:	mov	r0, #0
   12230:	mov	r2, #5
   12234:	bl	11180 <dcgettext@plt>
   12238:	mov	r4, r0
   1223c:	mov	r0, #0
   12240:	mov	r1, #3
   12244:	mov	r2, r9
   12248:	bl	17b00 <__assert_fail@plt+0x671c>
   1224c:	mov	r3, r0
   12250:	mov	r0, #0
   12254:	mov	r1, #0
   12258:	mov	r2, r4
   1225c:	bl	11210 <error@plt>
   12260:	b	12698 <__assert_fail@plt+0x12b4>
   12264:	mov	r0, #2
   12268:	str	r0, [sp, #32]
   1226c:	mov	r0, #1
   12270:	b	1239c <__assert_fail@plt+0xfb8>
   12274:	movw	r0, #45449	; 0xb189
   12278:	movt	r0, #2
   1227c:	ldrb	r0, [r0]
   12280:	cmp	r0, #0
   12284:	bne	12520 <__assert_fail@plt+0x113c>
   12288:	ldr	r6, [r5, #32]
   1228c:	movw	r1, #40961	; 0xa001
   12290:	movt	r1, #1
   12294:	b	12310 <__assert_fail@plt+0xf2c>
   12298:	movw	r0, #45449	; 0xb189
   1229c:	movt	r0, #2
   122a0:	ldrb	r0, [r0]
   122a4:	cmp	r0, #0
   122a8:	bne	12520 <__assert_fail@plt+0x113c>
   122ac:	ldr	r6, [r5, #32]
   122b0:	mov	r0, #0
   122b4:	mov	r1, #3
   122b8:	mov	r2, r9
   122bc:	bl	17b00 <__assert_fail@plt+0x671c>
   122c0:	mov	r3, r0
   122c4:	movw	r2, #40518	; 0x9e46
   122c8:	movt	r2, #1
   122cc:	mov	r0, #0
   122d0:	mov	r1, r6
   122d4:	b	12388 <__assert_fail@plt+0xfa4>
   122d8:	ldr	r0, [r5, #48]	; 0x30
   122dc:	cmp	r0, #0
   122e0:	bne	122f0 <__assert_fail@plt+0xf0c>
   122e4:	ldr	r0, [r5, #16]
   122e8:	cmp	r0, #0
   122ec:	beq	126a4 <__assert_fail@plt+0x12c0>
   122f0:	movw	r0, #45449	; 0xb189
   122f4:	movt	r0, #2
   122f8:	ldrb	r0, [r0]
   122fc:	cmp	r0, #0
   12300:	bne	1238c <__assert_fail@plt+0xfa8>
   12304:	ldr	r6, [r5, #32]
   12308:	movw	r1, #40944	; 0x9ff0
   1230c:	movt	r1, #1
   12310:	mov	r0, #0
   12314:	mov	r2, #5
   12318:	bl	11180 <dcgettext@plt>
   1231c:	mov	r7, r0
   12320:	mov	r0, #4
   12324:	mov	r1, r9
   12328:	bl	17a4c <__assert_fail@plt+0x6668>
   1232c:	mov	r3, r0
   12330:	mov	r0, #0
   12334:	mov	r1, r6
   12338:	mov	r2, r7
   1233c:	b	12388 <__assert_fail@plt+0xfa4>
   12340:	movw	r0, #45449	; 0xb189
   12344:	movt	r0, #2
   12348:	ldrb	r0, [r0]
   1234c:	cmp	r0, #0
   12350:	bne	12520 <__assert_fail@plt+0x113c>
   12354:	movw	r1, #40986	; 0xa01a
   12358:	movt	r1, #1
   1235c:	mov	r0, #0
   12360:	mov	r2, #5
   12364:	bl	11180 <dcgettext@plt>
   12368:	mov	r6, r0
   1236c:	mov	r0, #4
   12370:	mov	r1, r9
   12374:	bl	17a4c <__assert_fail@plt+0x6668>
   12378:	mov	r3, r0
   1237c:	mov	r0, #0
   12380:	mov	r1, #0
   12384:	mov	r2, r6
   12388:	bl	11210 <error@plt>
   1238c:	ldr	r0, [sp, #32]
   12390:	sub	r0, r0, #2
   12394:	clz	r0, r0
   12398:	lsr	r0, r0, #5
   1239c:	cmp	r0, #0
   123a0:	movwne	r1, #45480	; 0xb1a8
   123a4:	movtne	r1, #2
   123a8:	ldrne	r1, [r1]
   123ac:	cmpne	r1, #0
   123b0:	bne	12478 <__assert_fail@plt+0x1094>
   123b4:	cmp	r0, #0
   123b8:	beq	12520 <__assert_fail@plt+0x113c>
   123bc:	ldr	r0, [r5, #80]	; 0x50
   123c0:	and	r1, r0, #61440	; 0xf000
   123c4:	cmp	r1, #40960	; 0xa000
   123c8:	beq	12520 <__assert_fail@plt+0x113c>
   123cc:	str	r0, [sp, #36]	; 0x24
   123d0:	movw	r2, #45456	; 0xb190
   123d4:	movt	r2, #2
   123d8:	ldr	r2, [r2]
   123dc:	movw	r3, #45452	; 0xb18c
   123e0:	movt	r3, #2
   123e4:	ldr	r3, [r3]
   123e8:	mov	r7, #0
   123ec:	str	r7, [sp]
   123f0:	sub	r1, r1, #16384	; 0x4000
   123f4:	clz	r1, r1
   123f8:	lsr	r1, r1, #5
   123fc:	bl	16260 <__assert_fail@plt+0x4e7c>
   12400:	mov	r2, r0
   12404:	str	r0, [sp, #40]	; 0x28
   12408:	ldr	r0, [r4, #32]
   1240c:	mov	r1, r8
   12410:	bl	12930 <__assert_fail@plt+0x154c>
   12414:	cmp	r0, #0
   12418:	beq	12518 <__assert_fail@plt+0x1134>
   1241c:	movw	r0, #45449	; 0xb189
   12420:	movt	r0, #2
   12424:	ldrb	r0, [r0]
   12428:	cmp	r0, #0
   1242c:	bne	12470 <__assert_fail@plt+0x108c>
   12430:	bl	112a0 <__errno_location@plt>
   12434:	ldr	r6, [r0]
   12438:	movw	r1, #41362	; 0xa192
   1243c:	movt	r1, #1
   12440:	mov	r0, #0
   12444:	mov	r2, #5
   12448:	bl	11180 <dcgettext@plt>
   1244c:	mov	r7, r0
   12450:	mov	r0, #4
   12454:	mov	r1, r9
   12458:	bl	17a4c <__assert_fail@plt+0x6668>
   1245c:	mov	r3, r0
   12460:	mov	r0, #0
   12464:	mov	r1, r6
   12468:	mov	r2, r7
   1246c:	bl	11210 <error@plt>
   12470:	mov	r0, #1
   12474:	b	1251c <__assert_fail@plt+0x1138>
   12478:	ldrd	r2, [r1]
   1247c:	ldrd	r6, [r5, #160]	; 0xa0
   12480:	eor	r3, r7, r3
   12484:	eor	r2, r6, r2
   12488:	orrs	r2, r2, r3
   1248c:	bne	123b4 <__assert_fail@plt+0xfd0>
   12490:	ldrd	r2, [r1, #8]
   12494:	ldrd	r6, [r5, #64]	; 0x40
   12498:	eor	r1, r7, r3
   1249c:	eor	r2, r6, r2
   124a0:	orrs	r1, r2, r1
   124a4:	bne	123b4 <__assert_fail@plt+0xfd0>
   124a8:	movw	r1, #43135	; 0xa87f
   124ac:	movt	r1, #1
   124b0:	mov	r0, r9
   124b4:	bl	11120 <strcmp@plt>
   124b8:	cmp	r0, #0
   124bc:	beq	126c0 <__assert_fail@plt+0x12dc>
   124c0:	movw	r1, #41255	; 0xa127
   124c4:	movt	r1, #1
   124c8:	mov	r0, #0
   124cc:	mov	r2, #5
   124d0:	bl	11180 <dcgettext@plt>
   124d4:	mov	r6, r0
   124d8:	mov	r0, #0
   124dc:	mov	r1, #4
   124e0:	mov	r2, r9
   124e4:	bl	1799c <__assert_fail@plt+0x65b8>
   124e8:	mov	r7, r0
   124ec:	movw	r2, #43135	; 0xa87f
   124f0:	movt	r2, #1
   124f4:	mov	r0, #1
   124f8:	mov	r1, #4
   124fc:	bl	1799c <__assert_fail@plt+0x65b8>
   12500:	str	r0, [sp]
   12504:	mov	r0, #0
   12508:	mov	r1, #0
   1250c:	mov	r2, r6
   12510:	mov	r3, r7
   12514:	b	126f4 <__assert_fail@plt+0x1310>
   12518:	mov	r0, #4
   1251c:	str	r0, [sp, #32]
   12520:	movw	r6, #45336	; 0xb118
   12524:	movt	r6, #2
   12528:	ldr	r0, [r6]
   1252c:	cmp	r0, #2
   12530:	beq	12588 <__assert_fail@plt+0x11a4>
   12534:	ldr	r0, [sp, #32]
   12538:	cmp	r0, #4
   1253c:	bne	12568 <__assert_fail@plt+0x1184>
   12540:	ldr	r0, [r4, #32]
   12544:	ldr	r3, [sp, #36]	; 0x24
   12548:	ldr	r1, [sp, #40]	; 0x28
   1254c:	str	r1, [sp]
   12550:	mov	r1, r8
   12554:	mov	r2, r9
   12558:	bl	1273c <__assert_fail@plt+0x1358>
   1255c:	cmp	r0, #0
   12560:	moveq	r0, #3
   12564:	streq	r0, [sp, #32]
   12568:	ldr	r0, [sp, #32]
   1256c:	cmp	r0, #4
   12570:	ldrne	r1, [r6]
   12574:	cmpne	r1, #0
   12578:	bne	1258c <__assert_fail@plt+0x11a8>
   1257c:	add	r1, sp, #32
   12580:	mov	r0, r9
   12584:	bl	127ec <__assert_fail@plt+0x1408>
   12588:	ldr	r0, [sp, #32]
   1258c:	cmp	r0, #3
   12590:	bcc	12664 <__assert_fail@plt+0x1280>
   12594:	movw	r0, #45448	; 0xb188
   12598:	movt	r0, #2
   1259c:	ldrb	r0, [r0]
   125a0:	cmp	r0, #1
   125a4:	bne	12664 <__assert_fail@plt+0x1280>
   125a8:	movw	r0, #45452	; 0xb18c
   125ac:	movt	r0, #2
   125b0:	ldr	r3, [r0]
   125b4:	ldr	r0, [sp, #36]	; 0x24
   125b8:	mov	r6, #0
   125bc:	str	r6, [sp]
   125c0:	and	r1, r0, #61440	; 0xf000
   125c4:	sub	r1, r1, #16384	; 0x4000
   125c8:	clz	r1, r1
   125cc:	lsr	r1, r1, #5
   125d0:	mov	r2, #0
   125d4:	bl	16260 <__assert_fail@plt+0x4e7c>
   125d8:	mov	r7, r0
   125dc:	mvn	r1, r0
   125e0:	ldr	r0, [sp, #40]	; 0x28
   125e4:	tst	r0, r1
   125e8:	beq	12664 <__assert_fail@plt+0x1280>
   125ec:	add	r8, sp, #20
   125f0:	mov	r1, r8
   125f4:	bl	12b7c <__assert_fail@plt+0x1798>
   125f8:	add	sl, sp, #8
   125fc:	mov	r0, r7
   12600:	mov	r1, sl
   12604:	bl	12b7c <__assert_fail@plt+0x1798>
   12608:	strb	r6, [sp, #30]
   1260c:	strb	r6, [sp, #18]
   12610:	movw	r1, #41389	; 0xa1ad
   12614:	movt	r1, #1
   12618:	mov	r0, #0
   1261c:	mov	r2, #5
   12620:	bl	11180 <dcgettext@plt>
   12624:	mov	r7, r0
   12628:	mov	r0, #0
   1262c:	mov	r1, #3
   12630:	mov	r2, r9
   12634:	bl	17b00 <__assert_fail@plt+0x671c>
   12638:	mov	r3, r0
   1263c:	add	r0, sl, #1
   12640:	add	r1, r8, #1
   12644:	str	r1, [sp]
   12648:	str	r0, [sp, #4]
   1264c:	mov	r0, #0
   12650:	mov	r1, #0
   12654:	mov	r2, r7
   12658:	bl	11210 <error@plt>
   1265c:	mov	r0, #1
   12660:	str	r0, [sp, #32]
   12664:	movw	r0, #45450	; 0xb18a
   12668:	movt	r0, #2
   1266c:	ldrb	r0, [r0]
   12670:	cmp	r0, #0
   12674:	bne	12688 <__assert_fail@plt+0x12a4>
   12678:	mov	r0, r4
   1267c:	mov	r1, r5
   12680:	mov	r2, #4
   12684:	bl	14900 <__assert_fail@plt+0x351c>
   12688:	ldr	r0, [sp, #32]
   1268c:	mov	r6, #0
   12690:	cmp	r0, #1
   12694:	movwhi	r6, #1
   12698:	mov	r0, r6
   1269c:	sub	sp, fp, #28
   126a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126a4:	mov	r6, #1
   126a8:	str	r6, [r5, #16]
   126ac:	mov	r0, r4
   126b0:	mov	r1, r5
   126b4:	mov	r2, #1
   126b8:	bl	14900 <__assert_fail@plt+0x351c>
   126bc:	b	12698 <__assert_fail@plt+0x12b4>
   126c0:	movw	r1, #41210	; 0xa0fa
   126c4:	movt	r1, #1
   126c8:	mov	r0, #0
   126cc:	mov	r2, #5
   126d0:	bl	11180 <dcgettext@plt>
   126d4:	mov	r6, r0
   126d8:	mov	r0, #4
   126dc:	mov	r1, r9
   126e0:	bl	17a4c <__assert_fail@plt+0x6668>
   126e4:	mov	r3, r0
   126e8:	mov	r0, #0
   126ec:	mov	r1, #0
   126f0:	mov	r2, r6
   126f4:	bl	11210 <error@plt>
   126f8:	mov	r6, #0
   126fc:	movw	r1, #41313	; 0xa161
   12700:	movt	r1, #1
   12704:	mov	r0, #0
   12708:	mov	r2, #5
   1270c:	bl	11180 <dcgettext@plt>
   12710:	mov	r2, r0
   12714:	mov	r0, #0
   12718:	mov	r1, #0
   1271c:	bl	11210 <error@plt>
   12720:	mov	r0, r4
   12724:	mov	r1, r5
   12728:	mov	r2, #4
   1272c:	bl	14900 <__assert_fail@plt+0x351c>
   12730:	mov	r0, r4
   12734:	bl	13628 <__assert_fail@plt+0x2244>
   12738:	b	12698 <__assert_fail@plt+0x12b4>
   1273c:	push	{r4, r5, r6, sl, fp, lr}
   12740:	add	fp, sp, #16
   12744:	sub	sp, sp, #104	; 0x68
   12748:	mov	r5, r3
   1274c:	mov	r4, r2
   12750:	ldr	r2, [fp, #8]
   12754:	tst	r2, #3584	; 0xe00
   12758:	beq	127d4 <__assert_fail@plt+0x13f0>
   1275c:	mov	r2, sp
   12760:	mov	r3, #0
   12764:	bl	19970 <__assert_fail@plt+0x858c>
   12768:	cmp	r0, #0
   1276c:	beq	127d0 <__assert_fail@plt+0x13ec>
   12770:	movw	r0, #45449	; 0xb189
   12774:	movt	r0, #2
   12778:	ldrb	r0, [r0]
   1277c:	cmp	r0, #0
   12780:	bne	127c4 <__assert_fail@plt+0x13e0>
   12784:	bl	112a0 <__errno_location@plt>
   12788:	ldr	r5, [r0]
   1278c:	movw	r1, #41424	; 0xa1d0
   12790:	movt	r1, #1
   12794:	mov	r0, #0
   12798:	mov	r2, #5
   1279c:	bl	11180 <dcgettext@plt>
   127a0:	mov	r6, r0
   127a4:	mov	r0, #4
   127a8:	mov	r1, r4
   127ac:	bl	17a4c <__assert_fail@plt+0x6668>
   127b0:	mov	r3, r0
   127b4:	mov	r0, #0
   127b8:	mov	r1, r5
   127bc:	mov	r2, r6
   127c0:	bl	11210 <error@plt>
   127c4:	mov	r0, #0
   127c8:	sub	sp, fp, #16
   127cc:	pop	{r4, r5, r6, sl, fp, pc}
   127d0:	ldr	r2, [sp, #16]
   127d4:	eor	r0, r2, r5
   127d8:	bfc	r0, #12, #20
   127dc:	cmp	r0, #0
   127e0:	movwne	r0, #1
   127e4:	sub	sp, fp, #16
   127e8:	pop	{r4, r5, r6, sl, fp, pc}
   127ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127f0:	add	fp, sp, #28
   127f4:	sub	sp, sp, #36	; 0x24
   127f8:	mov	r7, r1
   127fc:	mov	r1, r0
   12800:	mov	r0, #4
   12804:	bl	17a4c <__assert_fail@plt+0x6668>
   12808:	mov	r4, r0
   1280c:	ldr	r0, [r7]
   12810:	cmp	r0, #0
   12814:	beq	1282c <__assert_fail@plt+0x1448>
   12818:	cmp	r0, #2
   1281c:	bne	12858 <__assert_fail@plt+0x1474>
   12820:	movw	r1, #41453	; 0xa1ed
   12824:	movt	r1, #1
   12828:	b	12834 <__assert_fail@plt+0x1450>
   1282c:	movw	r1, #41509	; 0xa225
   12830:	movt	r1, #1
   12834:	mov	r0, #0
   12838:	mov	r2, #5
   1283c:	bl	11180 <dcgettext@plt>
   12840:	mov	r1, r0
   12844:	mov	r0, #1
   12848:	mov	r2, r4
   1284c:	bl	112d0 <__printf_chk@plt>
   12850:	sub	sp, fp, #28
   12854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12858:	ldr	sl, [r7, #4]
   1285c:	ldr	r5, [r7, #8]
   12860:	add	r8, sp, #24
   12864:	mov	r0, r5
   12868:	mov	r1, r8
   1286c:	bl	12b7c <__assert_fail@plt+0x1798>
   12870:	mov	r6, #0
   12874:	strb	r6, [sp, #34]	; 0x22
   12878:	ldr	r0, [r7, #4]
   1287c:	add	r9, sp, #12
   12880:	mov	r1, r9
   12884:	bl	12b7c <__assert_fail@plt+0x1798>
   12888:	strb	r6, [sp, #22]
   1288c:	bfc	r5, #12, #20
   12890:	ldr	r0, [r7]
   12894:	cmp	r0, #4
   12898:	beq	128e8 <__assert_fail@plt+0x1504>
   1289c:	cmp	r0, #3
   128a0:	beq	128b8 <__assert_fail@plt+0x14d4>
   128a4:	cmp	r0, #1
   128a8:	bne	1292c <__assert_fail@plt+0x1548>
   128ac:	movw	r1, #41585	; 0xa271
   128b0:	movt	r1, #1
   128b4:	b	128f0 <__assert_fail@plt+0x150c>
   128b8:	movw	r1, #41644	; 0xa2ac
   128bc:	movt	r1, #1
   128c0:	mov	r0, #0
   128c4:	mov	r2, #5
   128c8:	bl	11180 <dcgettext@plt>
   128cc:	mov	r1, r0
   128d0:	add	r0, r8, #1
   128d4:	str	r0, [sp]
   128d8:	mov	r0, #1
   128dc:	mov	r2, r4
   128e0:	mov	r3, r5
   128e4:	b	12920 <__assert_fail@plt+0x153c>
   128e8:	movw	r1, #41535	; 0xa23f
   128ec:	movt	r1, #1
   128f0:	bfc	sl, #12, #20
   128f4:	mov	r0, #0
   128f8:	mov	r2, #5
   128fc:	bl	11180 <dcgettext@plt>
   12900:	mov	r1, r0
   12904:	add	r0, r8, #1
   12908:	add	r2, r9, #1
   1290c:	stm	sp, {r2, r5}
   12910:	str	r0, [sp, #8]
   12914:	mov	r0, #1
   12918:	mov	r2, r4
   1291c:	mov	r3, sl
   12920:	bl	112d0 <__printf_chk@plt>
   12924:	sub	sp, fp, #28
   12928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1292c:	bl	113b4 <abort@plt>
   12930:	mov	r3, #0
   12934:	b	12a48 <__assert_fail@plt+0x1664>
   12938:	mov	r3, #256	; 0x100
   1293c:	b	12a48 <__assert_fail@plt+0x1664>
   12940:	movw	r1, #45484	; 0xb1ac
   12944:	movt	r1, #2
   12948:	str	r0, [r1]
   1294c:	bx	lr
   12950:	movw	r1, #45488	; 0xb1b0
   12954:	movt	r1, #2
   12958:	strb	r0, [r1]
   1295c:	bx	lr
   12960:	push	{r4, r5, r6, sl, fp, lr}
   12964:	add	fp, sp, #16
   12968:	sub	sp, sp, #8
   1296c:	movw	r0, #45436	; 0xb17c
   12970:	movt	r0, #2
   12974:	ldr	r0, [r0]
   12978:	bl	18f70 <__assert_fail@plt+0x7b8c>
   1297c:	cmp	r0, #0
   12980:	beq	129a8 <__assert_fail@plt+0x15c4>
   12984:	movw	r0, #45488	; 0xb1b0
   12988:	movt	r0, #2
   1298c:	ldrb	r0, [r0]
   12990:	cmp	r0, #0
   12994:	beq	129c8 <__assert_fail@plt+0x15e4>
   12998:	bl	112a0 <__errno_location@plt>
   1299c:	ldr	r0, [r0]
   129a0:	cmp	r0, #32
   129a4:	bne	129c8 <__assert_fail@plt+0x15e4>
   129a8:	movw	r0, #45432	; 0xb178
   129ac:	movt	r0, #2
   129b0:	ldr	r0, [r0]
   129b4:	bl	18f70 <__assert_fail@plt+0x7b8c>
   129b8:	cmp	r0, #0
   129bc:	subeq	sp, fp, #16
   129c0:	popeq	{r4, r5, r6, sl, fp, pc}
   129c4:	b	12a38 <__assert_fail@plt+0x1654>
   129c8:	movw	r1, #41927	; 0xa3c7
   129cc:	movt	r1, #1
   129d0:	mov	r0, #0
   129d4:	mov	r2, #5
   129d8:	bl	11180 <dcgettext@plt>
   129dc:	mov	r4, r0
   129e0:	movw	r0, #45484	; 0xb1ac
   129e4:	movt	r0, #2
   129e8:	ldr	r6, [r0]
   129ec:	bl	112a0 <__errno_location@plt>
   129f0:	ldr	r5, [r0]
   129f4:	cmp	r6, #0
   129f8:	bne	12a14 <__assert_fail@plt+0x1630>
   129fc:	movw	r2, #40518	; 0x9e46
   12a00:	movt	r2, #1
   12a04:	mov	r0, #0
   12a08:	mov	r1, r5
   12a0c:	mov	r3, r4
   12a10:	b	12a34 <__assert_fail@plt+0x1650>
   12a14:	mov	r0, r6
   12a18:	bl	17af0 <__assert_fail@plt+0x670c>
   12a1c:	mov	r3, r0
   12a20:	str	r4, [sp]
   12a24:	movw	r2, #41939	; 0xa3d3
   12a28:	movt	r2, #1
   12a2c:	mov	r0, #0
   12a30:	mov	r1, r5
   12a34:	bl	11210 <error@plt>
   12a38:	movw	r0, #45344	; 0xb120
   12a3c:	movt	r0, #2
   12a40:	ldr	r0, [r0]
   12a44:	bl	11150 <_exit@plt>
   12a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a4c:	add	fp, sp, #28
   12a50:	sub	sp, sp, #140	; 0x8c
   12a54:	mov	r8, r2
   12a58:	mov	r5, r1
   12a5c:	mov	r6, r0
   12a60:	cmp	r3, #256	; 0x100
   12a64:	bne	12b50 <__assert_fail@plt+0x176c>
   12a68:	mov	r0, r6
   12a6c:	mov	r1, r5
   12a70:	mov	r2, #2654208	; 0x288000
   12a74:	bl	11288 <openat64@plt>
   12a78:	mov	r4, r0
   12a7c:	cmp	r0, #0
   12a80:	blt	12ac4 <__assert_fail@plt+0x16e0>
   12a84:	movw	r1, #39610	; 0x9aba
   12a88:	movt	r1, #1
   12a8c:	add	r2, sp, #32
   12a90:	mov	r0, r4
   12a94:	mov	r3, #4096	; 0x1000
   12a98:	bl	19970 <__assert_fail@plt+0x858c>
   12a9c:	cmp	r0, #0
   12aa0:	beq	12acc <__assert_fail@plt+0x16e8>
   12aa4:	bl	112a0 <__errno_location@plt>
   12aa8:	mov	r5, r0
   12aac:	ldr	r6, [r0]
   12ab0:	mov	r0, r4
   12ab4:	bl	113c0 <close@plt>
   12ab8:	str	r6, [r5]
   12abc:	mvn	r7, #0
   12ac0:	b	12b64 <__assert_fail@plt+0x1780>
   12ac4:	mov	r7, r4
   12ac8:	b	12b64 <__assert_fail@plt+0x1780>
   12acc:	ldr	r0, [sp, #48]	; 0x30
   12ad0:	and	r0, r0, #61440	; 0xf000
   12ad4:	cmp	r0, #40960	; 0xa000
   12ad8:	bne	12af8 <__assert_fail@plt+0x1714>
   12adc:	mov	r0, r4
   12ae0:	bl	113c0 <close@plt>
   12ae4:	bl	112a0 <__errno_location@plt>
   12ae8:	mov	r1, #95	; 0x5f
   12aec:	str	r1, [r0]
   12af0:	mvn	r7, #0
   12af4:	b	12b64 <__assert_fail@plt+0x1780>
   12af8:	str	r4, [sp]
   12afc:	add	r7, sp, #6
   12b00:	movw	r3, #41946	; 0xa3da
   12b04:	movt	r3, #1
   12b08:	mov	r0, r7
   12b0c:	mov	r1, #1
   12b10:	mov	r2, #26
   12b14:	bl	112ac <__sprintf_chk@plt>
   12b18:	mov	r0, r7
   12b1c:	mov	r1, r8
   12b20:	bl	11390 <chmod@plt>
   12b24:	mov	r7, r0
   12b28:	bl	112a0 <__errno_location@plt>
   12b2c:	mov	r9, r0
   12b30:	ldr	sl, [r0]
   12b34:	mov	r0, r4
   12b38:	bl	113c0 <close@plt>
   12b3c:	cmp	r7, #0
   12b40:	beq	12b64 <__assert_fail@plt+0x1780>
   12b44:	cmp	sl, #2
   12b48:	bne	12b70 <__assert_fail@plt+0x178c>
   12b4c:	mov	r3, #0
   12b50:	mov	r0, r6
   12b54:	mov	r1, r5
   12b58:	mov	r2, r8
   12b5c:	bl	12b78 <__assert_fail@plt+0x1794>
   12b60:	mov	r7, r0
   12b64:	mov	r0, r7
   12b68:	sub	sp, fp, #28
   12b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b70:	str	sl, [r9]
   12b74:	b	12b64 <__assert_fail@plt+0x1780>
   12b78:	b	11294 <fchmodat@plt>
   12b7c:	push	{r4, r5, fp, lr}
   12b80:	add	fp, sp, #8
   12b84:	mov	r4, r1
   12b88:	mov	r5, r0
   12b8c:	bl	12c60 <__assert_fail@plt+0x187c>
   12b90:	strb	r0, [r4]
   12b94:	mov	r0, #114	; 0x72
   12b98:	tst	r5, #256	; 0x100
   12b9c:	mov	r1, #114	; 0x72
   12ba0:	movweq	r1, #45	; 0x2d
   12ba4:	strb	r1, [r4, #1]
   12ba8:	mov	r1, #119	; 0x77
   12bac:	tst	r5, #128	; 0x80
   12bb0:	mov	r2, #119	; 0x77
   12bb4:	movweq	r2, #45	; 0x2d
   12bb8:	strb	r2, [r4, #2]
   12bbc:	tst	r5, #32
   12bc0:	mov	r2, #114	; 0x72
   12bc4:	movweq	r2, #45	; 0x2d
   12bc8:	strb	r2, [r4, #4]
   12bcc:	tst	r5, #16
   12bd0:	mov	r2, #119	; 0x77
   12bd4:	movweq	r2, #45	; 0x2d
   12bd8:	strb	r2, [r4, #5]
   12bdc:	tst	r5, #4
   12be0:	movweq	r0, #45	; 0x2d
   12be4:	strb	r0, [r4, #7]
   12be8:	tst	r5, #2
   12bec:	movweq	r1, #45	; 0x2d
   12bf0:	strb	r1, [r4, #8]
   12bf4:	mov	r0, #32
   12bf8:	strh	r0, [r4, #10]
   12bfc:	ands	r0, r5, #64	; 0x40
   12c00:	mov	r0, #45	; 0x2d
   12c04:	mov	r1, #45	; 0x2d
   12c08:	movwne	r1, #120	; 0x78
   12c0c:	mov	r2, #83	; 0x53
   12c10:	mov	r3, #83	; 0x53
   12c14:	movwne	r3, #115	; 0x73
   12c18:	tst	r5, #2048	; 0x800
   12c1c:	moveq	r3, r1
   12c20:	strb	r3, [r4, #3]
   12c24:	ands	r1, r5, #8
   12c28:	mov	r1, #45	; 0x2d
   12c2c:	movwne	r1, #120	; 0x78
   12c30:	movwne	r2, #115	; 0x73
   12c34:	tst	r5, #1024	; 0x400
   12c38:	moveq	r2, r1
   12c3c:	strb	r2, [r4, #6]
   12c40:	ands	r1, r5, #1
   12c44:	movwne	r0, #120	; 0x78
   12c48:	mov	r1, #84	; 0x54
   12c4c:	movwne	r1, #116	; 0x74
   12c50:	tst	r5, #512	; 0x200
   12c54:	moveq	r1, r0
   12c58:	strb	r1, [r4, #9]
   12c5c:	pop	{r4, r5, fp, pc}
   12c60:	and	r0, r0, #61440	; 0xf000
   12c64:	sub	r0, r0, #4096	; 0x1000
   12c68:	lsr	r1, r0, #12
   12c6c:	cmp	r1, #11
   12c70:	bhi	12cc0 <__assert_fail@plt+0x18dc>
   12c74:	mov	r0, #45	; 0x2d
   12c78:	add	r2, pc, #0
   12c7c:	ldr	pc, [r2, r1, lsl #2]
   12c80:			; <UNDEFINED> instruction: 0x00012cb0
   12c84:			; <UNDEFINED> instruction: 0x00012cb8
   12c88:	andeq	r2, r1, r0, asr #25
   12c8c:	andeq	r2, r1, r8, asr #25
   12c90:	andeq	r2, r1, r0, asr #25
   12c94:	andeq	r2, r1, r0, ror #25
   12c98:	andeq	r2, r1, r0, asr #25
   12c9c:	andeq	r2, r1, r4, asr #25
   12ca0:	andeq	r2, r1, r0, asr #25
   12ca4:	ldrdeq	r2, [r1], -r0
   12ca8:	andeq	r2, r1, r0, asr #25
   12cac:	ldrdeq	r2, [r1], -r8
   12cb0:	mov	r0, #112	; 0x70
   12cb4:	bx	lr
   12cb8:	mov	r0, #99	; 0x63
   12cbc:	bx	lr
   12cc0:	mov	r0, #63	; 0x3f
   12cc4:	bx	lr
   12cc8:	mov	r0, #100	; 0x64
   12ccc:	bx	lr
   12cd0:	mov	r0, #108	; 0x6c
   12cd4:	bx	lr
   12cd8:	mov	r0, #115	; 0x73
   12cdc:	bx	lr
   12ce0:	mov	r0, #98	; 0x62
   12ce4:	bx	lr
   12ce8:	ldr	r0, [r0, #16]
   12cec:	b	12b7c <__assert_fail@plt+0x1798>
   12cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12cf4:	add	fp, sp, #28
   12cf8:	sub	sp, sp, #12
   12cfc:	cmp	r1, #4096	; 0x1000
   12d00:	bcs	12d1c <__assert_fail@plt+0x1938>
   12d04:	mov	r6, r1
   12d08:	mov	r7, r0
   12d0c:	and	r0, r1, #516	; 0x204
   12d10:	cmp	r0, #516	; 0x204
   12d14:	tstne	r6, #18
   12d18:	bne	12d38 <__assert_fail@plt+0x1954>
   12d1c:	bl	112a0 <__errno_location@plt>
   12d20:	mov	r1, #22
   12d24:	str	r1, [r0]
   12d28:	mov	r4, #0
   12d2c:	mov	r0, r4
   12d30:	sub	sp, fp, #28
   12d34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d38:	mov	sl, r2
   12d3c:	mov	r0, #1
   12d40:	mov	r1, #96	; 0x60
   12d44:	bl	18a20 <__assert_fail@plt+0x763c>
   12d48:	cmp	r0, #0
   12d4c:	beq	12d28 <__assert_fail@plt+0x1944>
   12d50:	mov	r4, r0
   12d54:	mvn	r0, #99	; 0x63
   12d58:	str	r0, [r4, #32]
   12d5c:	bic	r0, r6, #516	; 0x204
   12d60:	tst	r6, #2
   12d64:	mov	r1, r6
   12d68:	orrne	r1, r0, #4
   12d6c:	str	sl, [r4, #44]	; 0x2c
   12d70:	str	r1, [r4, #48]	; 0x30
   12d74:	mov	r0, r7
   12d78:	bl	12fec <__assert_fail@plt+0x1c08>
   12d7c:	mov	r1, r0
   12d80:	cmp	r0, #4096	; 0x1000
   12d84:	movls	r1, #4096	; 0x1000
   12d88:	mov	r0, r4
   12d8c:	bl	13030 <__assert_fail@plt+0x1c4c>
   12d90:	cmp	r0, #0
   12d94:	beq	12fe0 <__assert_fail@plt+0x1bfc>
   12d98:	ldr	r0, [r7]
   12d9c:	cmp	r0, #0
   12da0:	beq	12dd0 <__assert_fail@plt+0x19ec>
   12da4:	movw	r1, #39610	; 0x9aba
   12da8:	movt	r1, #1
   12dac:	mov	r0, r4
   12db0:	mov	r2, #0
   12db4:	bl	130a8 <__assert_fail@plt+0x1cc4>
   12db8:	cmp	r0, #0
   12dbc:	beq	12fd8 <__assert_fail@plt+0x1bf4>
   12dc0:	mov	r8, r0
   12dc4:	mvn	r0, #0
   12dc8:	str	r0, [r8, #48]	; 0x30
   12dcc:	b	12dd4 <__assert_fail@plt+0x19f0>
   12dd0:	mov	r8, #0
   12dd4:	cmp	sl, #0
   12dd8:	ldrbne	r0, [r4, #49]	; 0x31
   12ddc:	ubfxne	r0, r0, #2, #1
   12de0:	moveq	r0, #1
   12de4:	ldr	r5, [r7]
   12de8:	cmp	r5, #0
   12dec:	beq	12f18 <__assert_fail@plt+0x1b34>
   12df0:	and	r1, r6, #2048	; 0x800
   12df4:	str	r1, [sp, #8]
   12df8:	eor	r0, r0, #1
   12dfc:	str	r0, [sp, #4]
   12e00:	mov	r9, #0
   12e04:	mov	r0, #0
   12e08:	str	r0, [sp]
   12e0c:	mov	r6, #0
   12e10:	mov	r0, r5
   12e14:	bl	1127c <strlen@plt>
   12e18:	mov	r2, r0
   12e1c:	ldr	r0, [sp, #8]
   12e20:	cmp	r0, #0
   12e24:	bne	12e5c <__assert_fail@plt+0x1a78>
   12e28:	cmp	r2, #3
   12e2c:	bcc	12e5c <__assert_fail@plt+0x1a78>
   12e30:	add	r0, r5, r2
   12e34:	ldrb	r0, [r0, #-1]
   12e38:	cmp	r0, #47	; 0x2f
   12e3c:	bne	12e5c <__assert_fail@plt+0x1a78>
   12e40:	sub	r0, r5, #2
   12e44:	ldrb	r1, [r0, r2]
   12e48:	cmp	r1, #47	; 0x2f
   12e4c:	bne	12e5c <__assert_fail@plt+0x1a78>
   12e50:	sub	r2, r2, #1
   12e54:	cmp	r2, #1
   12e58:	bhi	12e44 <__assert_fail@plt+0x1a60>
   12e5c:	mov	r0, r4
   12e60:	mov	r1, r5
   12e64:	bl	130a8 <__assert_fail@plt+0x1cc4>
   12e68:	cmp	r0, #0
   12e6c:	beq	12fc8 <__assert_fail@plt+0x1be4>
   12e70:	mov	r5, r0
   12e74:	str	r8, [r0, #4]
   12e78:	mov	r0, #0
   12e7c:	str	r0, [r5, #48]	; 0x30
   12e80:	add	r0, r5, #168	; 0xa8
   12e84:	str	r0, [r5, #24]
   12e88:	clz	r0, r9
   12e8c:	lsr	r0, r0, #5
   12e90:	ldr	r1, [sp, #4]
   12e94:	orrs	r0, r1, r0
   12e98:	bne	12ec4 <__assert_fail@plt+0x1ae0>
   12e9c:	mov	r0, #11
   12ea0:	strh	r0, [r5, #56]	; 0x38
   12ea4:	mov	r0, r5
   12ea8:	mov	r1, #1
   12eac:	bl	13128 <__assert_fail@plt+0x1d44>
   12eb0:	cmp	sl, #0
   12eb4:	beq	12ee0 <__assert_fail@plt+0x1afc>
   12eb8:	str	r9, [r5, #8]
   12ebc:	mov	r9, r5
   12ec0:	b	12efc <__assert_fail@plt+0x1b18>
   12ec4:	mov	r0, r4
   12ec8:	mov	r1, r5
   12ecc:	mov	r2, #0
   12ed0:	bl	13158 <__assert_fail@plt+0x1d74>
   12ed4:	strh	r0, [r5, #56]	; 0x38
   12ed8:	cmp	sl, #0
   12edc:	bne	12eb8 <__assert_fail@plt+0x1ad4>
   12ee0:	mov	r0, #0
   12ee4:	str	r0, [r5, #8]
   12ee8:	cmp	r9, #0
   12eec:	beq	12f10 <__assert_fail@plt+0x1b2c>
   12ef0:	ldr	r0, [sp]
   12ef4:	str	r5, [r0, #8]
   12ef8:	str	r5, [sp]
   12efc:	add	r6, r6, #1
   12f00:	ldr	r5, [r7, #4]!
   12f04:	cmp	r5, #0
   12f08:	bne	12e10 <__assert_fail@plt+0x1a2c>
   12f0c:	b	12f20 <__assert_fail@plt+0x1b3c>
   12f10:	str	r5, [sp]
   12f14:	b	12ebc <__assert_fail@plt+0x1ad8>
   12f18:	mov	r9, #0
   12f1c:	b	12f44 <__assert_fail@plt+0x1b60>
   12f20:	cmp	sl, #0
   12f24:	beq	12f44 <__assert_fail@plt+0x1b60>
   12f28:	cmp	r6, #2
   12f2c:	bcc	12f44 <__assert_fail@plt+0x1b60>
   12f30:	mov	r0, r4
   12f34:	mov	r1, r9
   12f38:	mov	r2, r6
   12f3c:	bl	132c0 <__assert_fail@plt+0x1edc>
   12f40:	mov	r9, r0
   12f44:	movw	r1, #39610	; 0x9aba
   12f48:	movt	r1, #1
   12f4c:	mov	r0, r4
   12f50:	mov	r2, #0
   12f54:	bl	130a8 <__assert_fail@plt+0x1cc4>
   12f58:	str	r0, [r4]
   12f5c:	cmp	r0, #0
   12f60:	beq	12fc8 <__assert_fail@plt+0x1be4>
   12f64:	mov	r1, #9
   12f68:	strh	r1, [r0, #56]	; 0x38
   12f6c:	str	r9, [r0, #8]
   12f70:	mov	r1, #1
   12f74:	str	r1, [r0, #48]	; 0x30
   12f78:	mov	r0, r4
   12f7c:	bl	133a0 <__assert_fail@plt+0x1fbc>
   12f80:	cmp	r0, #0
   12f84:	beq	12fc8 <__assert_fail@plt+0x1be4>
   12f88:	ldrh	r0, [r4, #48]	; 0x30
   12f8c:	tst	r0, #516	; 0x204
   12f90:	bne	12fb8 <__assert_fail@plt+0x1bd4>
   12f94:	movw	r1, #41964	; 0xa3ec
   12f98:	movt	r1, #1
   12f9c:	mov	r0, r4
   12fa0:	bl	1342c <__assert_fail@plt+0x2048>
   12fa4:	str	r0, [r4, #28]
   12fa8:	cmn	r0, #1
   12fac:	ldrle	r0, [r4, #48]	; 0x30
   12fb0:	orrle	r0, r0, #4
   12fb4:	strle	r0, [r4, #48]	; 0x30
   12fb8:	add	r0, r4, #60	; 0x3c
   12fbc:	mvn	r1, #0
   12fc0:	bl	15cd8 <__assert_fail@plt+0x48f4>
   12fc4:	b	12d2c <__assert_fail@plt+0x1948>
   12fc8:	mov	r0, r9
   12fcc:	bl	1345c <__assert_fail@plt+0x2078>
   12fd0:	mov	r0, r8
   12fd4:	bl	19448 <__assert_fail@plt+0x8064>
   12fd8:	ldr	r0, [r4, #24]
   12fdc:	bl	19448 <__assert_fail@plt+0x8064>
   12fe0:	mov	r0, r4
   12fe4:	bl	19448 <__assert_fail@plt+0x8064>
   12fe8:	b	12d28 <__assert_fail@plt+0x1944>
   12fec:	mov	r1, r0
   12ff0:	ldr	r0, [r0]
   12ff4:	cmp	r0, #0
   12ff8:	moveq	r0, #1
   12ffc:	bxeq	lr
   13000:	push	{r4, r5, fp, lr}
   13004:	add	fp, sp, #8
   13008:	add	r5, r1, #4
   1300c:	mov	r4, #0
   13010:	bl	1127c <strlen@plt>
   13014:	cmp	r0, r4
   13018:	movhi	r4, r0
   1301c:	ldr	r0, [r5], #4
   13020:	cmp	r0, #0
   13024:	bne	13010 <__assert_fail@plt+0x1c2c>
   13028:	add	r0, r4, #1
   1302c:	pop	{r4, r5, fp, pc}
   13030:	push	{r4, r5, fp, lr}
   13034:	add	fp, sp, #8
   13038:	mov	r4, r0
   1303c:	ldr	r0, [r0, #36]	; 0x24
   13040:	add	r1, r1, #256	; 0x100
   13044:	adds	r1, r1, r0
   13048:	bcc	13070 <__assert_fail@plt+0x1c8c>
   1304c:	ldr	r0, [r4, #24]
   13050:	bl	19448 <__assert_fail@plt+0x8064>
   13054:	mov	r5, #0
   13058:	str	r5, [r4, #24]
   1305c:	bl	112a0 <__errno_location@plt>
   13060:	mov	r1, #36	; 0x24
   13064:	str	r1, [r0]
   13068:	mov	r0, r5
   1306c:	pop	{r4, r5, fp, pc}
   13070:	str	r1, [r4, #36]	; 0x24
   13074:	ldr	r0, [r4, #24]
   13078:	bl	18aa4 <__assert_fail@plt+0x76c0>
   1307c:	cmp	r0, #0
   13080:	strne	r0, [r4, #24]
   13084:	movne	r5, #1
   13088:	movne	r0, r5
   1308c:	popne	{r4, r5, fp, pc}
   13090:	ldr	r0, [r4, #24]
   13094:	bl	19448 <__assert_fail@plt+0x8064>
   13098:	mov	r5, #0
   1309c:	str	r5, [r4, #24]
   130a0:	mov	r0, r5
   130a4:	pop	{r4, r5, fp, pc}
   130a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   130ac:	add	fp, sp, #24
   130b0:	mov	r6, r2
   130b4:	mov	r8, r1
   130b8:	mov	r5, r0
   130bc:	add	r0, r2, #176	; 0xb0
   130c0:	bic	r0, r0, #7
   130c4:	bl	18a74 <__assert_fail@plt+0x7690>
   130c8:	cmp	r0, #0
   130cc:	moveq	r4, #0
   130d0:	moveq	r0, r4
   130d4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   130d8:	mov	r4, r0
   130dc:	add	r7, r0, #168	; 0xa8
   130e0:	mov	r0, r7
   130e4:	mov	r1, r8
   130e8:	mov	r2, r6
   130ec:	bl	1115c <memcpy@plt>
   130f0:	mov	r0, #0
   130f4:	strb	r0, [r7, r6]
   130f8:	str	r6, [r4, #52]	; 0x34
   130fc:	str	r5, [r4, #44]	; 0x2c
   13100:	ldr	r1, [r5, #24]
   13104:	mov	r2, #196608	; 0x30000
   13108:	str	r2, [r4, #58]	; 0x3a
   1310c:	str	r0, [r4, #12]
   13110:	str	r0, [r4, #16]
   13114:	str	r0, [r4, #20]
   13118:	str	r1, [r4, #28]
   1311c:	str	r0, [r4, #32]
   13120:	mov	r0, r4
   13124:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13128:	ldrh	r2, [r0, #56]	; 0x38
   1312c:	cmp	r2, #11
   13130:	bne	1314c <__assert_fail@plt+0x1d68>
   13134:	mov	r3, #0
   13138:	mov	r2, #1
   1313c:	cmp	r1, #0
   13140:	movwne	r2, #2
   13144:	strd	r2, [r0, #112]	; 0x70
   13148:	bx	lr
   1314c:	push	{fp, lr}
   13150:	mov	fp, sp
   13154:	bl	113b4 <abort@plt>
   13158:	push	{r4, r5, r6, sl, fp, lr}
   1315c:	add	fp, sp, #16
   13160:	mov	r4, r1
   13164:	ldr	r1, [r1, #48]	; 0x30
   13168:	cmp	r1, #0
   1316c:	ldrbeq	r1, [r0, #48]	; 0x30
   13170:	andeq	r1, r1, #1
   13174:	orreq	r2, r1, r2
   13178:	add	r5, r4, #64	; 0x40
   1317c:	cmp	r2, #0
   13180:	ldreq	r1, [r0, #48]	; 0x30
   13184:	andseq	r1, r1, #2
   13188:	beq	131d8 <__assert_fail@plt+0x1df4>
   1318c:	ldr	r0, [r4, #24]
   13190:	mov	r1, r5
   13194:	bl	19940 <__assert_fail@plt+0x855c>
   13198:	cmp	r0, #0
   1319c:	beq	1324c <__assert_fail@plt+0x1e68>
   131a0:	bl	112a0 <__errno_location@plt>
   131a4:	mov	r6, r0
   131a8:	ldr	r0, [r0]
   131ac:	cmp	r0, #2
   131b0:	bne	131fc <__assert_fail@plt+0x1e18>
   131b4:	ldr	r0, [r4, #24]
   131b8:	mov	r1, r5
   131bc:	bl	19960 <__assert_fail@plt+0x857c>
   131c0:	cmp	r0, #0
   131c4:	bne	131fc <__assert_fail@plt+0x1e18>
   131c8:	mov	r0, #0
   131cc:	str	r0, [r6]
   131d0:	mov	r0, #13
   131d4:	pop	{r4, r5, r6, sl, fp, pc}
   131d8:	ldr	r1, [r4, #24]
   131dc:	ldr	r0, [r0, #32]
   131e0:	mov	r2, r5
   131e4:	mov	r3, #256	; 0x100
   131e8:	bl	19970 <__assert_fail@plt+0x858c>
   131ec:	cmp	r0, #0
   131f0:	beq	1324c <__assert_fail@plt+0x1e68>
   131f4:	bl	112a0 <__errno_location@plt>
   131f8:	mov	r6, r0
   131fc:	ldr	r0, [r6]
   13200:	str	r0, [r4, #32]
   13204:	mov	r0, #0
   13208:	vmov.i32	q8, #0	; 0x00000000
   1320c:	str	r0, [r5, #96]	; 0x60
   13210:	add	r1, r5, #80	; 0x50
   13214:	vst1.64	{d16-d17}, [r1]
   13218:	add	r1, r5, #64	; 0x40
   1321c:	vst1.64	{d16-d17}, [r1]
   13220:	add	r1, r5, #48	; 0x30
   13224:	vst1.64	{d16-d17}, [r1]
   13228:	add	r1, r5, #32
   1322c:	vst1.64	{d16-d17}, [r1]
   13230:	add	r1, r5, #16
   13234:	vst1.64	{d16-d17}, [r1]
   13238:	mov	r1, #100	; 0x64
   1323c:	vst1.64	{d16-d17}, [r5], r1
   13240:	str	r0, [r5]
   13244:	mov	r0, #10
   13248:	pop	{r4, r5, r6, sl, fp, pc}
   1324c:	ldr	r0, [r4, #80]	; 0x50
   13250:	and	r0, r0, #61440	; 0xf000
   13254:	cmp	r0, #40960	; 0xa000
   13258:	moveq	r0, #12
   1325c:	popeq	{r4, r5, r6, sl, fp, pc}
   13260:	cmp	r0, #32768	; 0x8000
   13264:	moveq	r0, #8
   13268:	popeq	{r4, r5, r6, sl, fp, pc}
   1326c:	cmp	r0, #16384	; 0x4000
   13270:	bne	132a4 <__assert_fail@plt+0x1ec0>
   13274:	ldrb	r1, [r4, #168]	; 0xa8
   13278:	mov	r0, #1
   1327c:	cmp	r1, #46	; 0x2e
   13280:	popne	{r4, r5, r6, sl, fp, pc}
   13284:	ldrb	r1, [r4, #169]	; 0xa9
   13288:	cmp	r1, #0
   1328c:	beq	132ac <__assert_fail@plt+0x1ec8>
   13290:	cmp	r1, #46	; 0x2e
   13294:	ldrbeq	r1, [r4, #170]	; 0xaa
   13298:	cmpeq	r1, #0
   1329c:	beq	132ac <__assert_fail@plt+0x1ec8>
   132a0:	pop	{r4, r5, r6, sl, fp, pc}
   132a4:	mov	r0, #3
   132a8:	pop	{r4, r5, r6, sl, fp, pc}
   132ac:	ldr	r1, [r4, #48]	; 0x30
   132b0:	mov	r0, #5
   132b4:	cmp	r1, #0
   132b8:	movweq	r0, #1
   132bc:	pop	{r4, r5, r6, sl, fp, pc}
   132c0:	push	{r4, r5, r6, r7, fp, lr}
   132c4:	add	fp, sp, #16
   132c8:	mov	r6, r2
   132cc:	mov	r4, r1
   132d0:	mov	r5, r0
   132d4:	ldr	r7, [r0, #44]	; 0x2c
   132d8:	ldr	r0, [r0, #40]	; 0x28
   132dc:	cmp	r0, r2
   132e0:	bcs	1330c <__assert_fail@plt+0x1f28>
   132e4:	add	r1, r6, #40	; 0x28
   132e8:	str	r1, [r5, #40]	; 0x28
   132ec:	cmn	r1, #-1073741823	; 0xc0000001
   132f0:	bhi	13384 <__assert_fail@plt+0x1fa0>
   132f4:	ldr	r0, [r5, #8]
   132f8:	lsl	r1, r1, #2
   132fc:	bl	18aa4 <__assert_fail@plt+0x76c0>
   13300:	cmp	r0, #0
   13304:	beq	13384 <__assert_fail@plt+0x1fa0>
   13308:	str	r0, [r5, #8]
   1330c:	cmp	r4, #0
   13310:	beq	13328 <__assert_fail@plt+0x1f44>
   13314:	ldr	r0, [r5, #8]
   13318:	str	r4, [r0], #4
   1331c:	ldr	r4, [r4, #8]
   13320:	cmp	r4, #0
   13324:	bne	13318 <__assert_fail@plt+0x1f34>
   13328:	ldr	r0, [r5, #8]
   1332c:	mov	r1, r6
   13330:	mov	r2, #4
   13334:	mov	r3, r7
   13338:	bl	1136c <qsort@plt>
   1333c:	subs	r1, r6, #1
   13340:	ldr	r0, [r5, #8]
   13344:	ldr	r4, [r0]
   13348:	beq	13370 <__assert_fail@plt+0x1f8c>
   1334c:	add	r2, r0, #4
   13350:	rsb	r3, r6, #1
   13354:	ldr	r7, [r2, #-4]
   13358:	ldr	r6, [r2]
   1335c:	str	r6, [r7, #8]
   13360:	add	r2, r2, #4
   13364:	adds	r3, r3, #1
   13368:	bne	13354 <__assert_fail@plt+0x1f70>
   1336c:	add	r0, r0, r1, lsl #2
   13370:	ldr	r0, [r0]
   13374:	mov	r1, #0
   13378:	str	r1, [r0, #8]
   1337c:	mov	r0, r4
   13380:	pop	{r4, r5, r6, r7, fp, pc}
   13384:	ldr	r0, [r5, #8]
   13388:	bl	19448 <__assert_fail@plt+0x8064>
   1338c:	mov	r0, #0
   13390:	str	r0, [r5, #40]	; 0x28
   13394:	str	r0, [r5, #8]
   13398:	mov	r0, r4
   1339c:	pop	{r4, r5, r6, r7, fp, pc}
   133a0:	push	{r4, r5, fp, lr}
   133a4:	add	fp, sp, #8
   133a8:	sub	sp, sp, #8
   133ac:	mov	r4, r0
   133b0:	ldrh	r0, [r0, #48]	; 0x30
   133b4:	movw	r1, #258	; 0x102
   133b8:	tst	r0, r1
   133bc:	beq	133fc <__assert_fail@plt+0x2018>
   133c0:	movw	r0, #37960	; 0x9448
   133c4:	movt	r0, #1
   133c8:	str	r0, [sp]
   133cc:	mov	r5, #0
   133d0:	movw	r2, #19088	; 0x4a90
   133d4:	movt	r2, #1
   133d8:	movw	r3, #19120	; 0x4ab0
   133dc:	movt	r3, #1
   133e0:	mov	r0, #31
   133e4:	mov	r1, #0
   133e8:	bl	15240 <__assert_fail@plt+0x3e5c>
   133ec:	str	r0, [r4, #56]	; 0x38
   133f0:	cmp	r0, #0
   133f4:	movne	r5, #1
   133f8:	b	13420 <__assert_fail@plt+0x203c>
   133fc:	mov	r0, #32
   13400:	bl	18a74 <__assert_fail@plt+0x7690>
   13404:	str	r0, [r4, #56]	; 0x38
   13408:	cmp	r0, #0
   1340c:	beq	1341c <__assert_fail@plt+0x2038>
   13410:	bl	18ff8 <__assert_fail@plt+0x7c14>
   13414:	mov	r5, #1
   13418:	b	13420 <__assert_fail@plt+0x203c>
   1341c:	mov	r5, #0
   13420:	mov	r0, r5
   13424:	sub	sp, fp, #8
   13428:	pop	{r4, r5, fp, pc}
   1342c:	ldr	r3, [r0, #48]	; 0x30
   13430:	mov	r2, #32768	; 0x8000
   13434:	and	r2, r2, r3, lsl #11
   13438:	orr	r2, r2, #18688	; 0x4900
   1343c:	orr	r2, r2, #524288	; 0x80000
   13440:	tst	r3, #512	; 0x200
   13444:	bne	13454 <__assert_fail@plt+0x2070>
   13448:	mov	r0, r1
   1344c:	mov	r1, r2
   13450:	b	19398 <__assert_fail@plt+0x7fb4>
   13454:	ldr	r0, [r0, #32]
   13458:	b	16368 <__assert_fail@plt+0x4f84>
   1345c:	push	{r4, r6, r7, sl, fp, lr}
   13460:	add	fp, sp, #16
   13464:	cmp	r0, #0
   13468:	popeq	{r4, r6, r7, sl, fp, pc}
   1346c:	mov	r4, r0
   13470:	ldrd	r6, [r4, #8]
   13474:	cmp	r7, #0
   13478:	beq	13484 <__assert_fail@plt+0x20a0>
   1347c:	mov	r0, r7
   13480:	bl	113d8 <closedir@plt>
   13484:	mov	r0, r4
   13488:	bl	19448 <__assert_fail@plt+0x8064>
   1348c:	cmp	r6, #0
   13490:	mov	r4, r6
   13494:	bne	13470 <__assert_fail@plt+0x208c>
   13498:	pop	{r4, r6, r7, sl, fp, pc}
   1349c:	push	{r4, r5, fp, lr}
   134a0:	add	fp, sp, #8
   134a4:	mov	r4, r0
   134a8:	ldr	r0, [r0]
   134ac:	cmp	r0, #0
   134b0:	beq	134f0 <__assert_fail@plt+0x210c>
   134b4:	ldr	r1, [r0, #48]	; 0x30
   134b8:	cmp	r1, #0
   134bc:	blt	134e4 <__assert_fail@plt+0x2100>
   134c0:	ldr	r5, [r0, #8]
   134c4:	cmp	r5, #0
   134c8:	ldreq	r5, [r0, #4]
   134cc:	bl	19448 <__assert_fail@plt+0x8064>
   134d0:	ldr	r0, [r5, #48]	; 0x30
   134d4:	cmn	r0, #1
   134d8:	mov	r0, r5
   134dc:	bgt	134c0 <__assert_fail@plt+0x20dc>
   134e0:	b	134e8 <__assert_fail@plt+0x2104>
   134e4:	mov	r5, r0
   134e8:	mov	r0, r5
   134ec:	bl	19448 <__assert_fail@plt+0x8064>
   134f0:	ldr	r0, [r4, #4]
   134f4:	cmp	r0, #0
   134f8:	blne	1345c <__assert_fail@plt+0x2078>
   134fc:	ldr	r0, [r4, #8]
   13500:	bl	19448 <__assert_fail@plt+0x8064>
   13504:	ldr	r0, [r4, #24]
   13508:	bl	19448 <__assert_fail@plt+0x8064>
   1350c:	ldr	r0, [r4, #48]	; 0x30
   13510:	tst	r0, #512	; 0x200
   13514:	bne	13540 <__assert_fail@plt+0x215c>
   13518:	mov	r5, #0
   1351c:	tst	r0, #4
   13520:	bne	13584 <__assert_fail@plt+0x21a0>
   13524:	ldr	r0, [r4, #28]
   13528:	bl	11360 <fchdir@plt>
   1352c:	cmp	r0, #0
   13530:	beq	13560 <__assert_fail@plt+0x217c>
   13534:	bl	112a0 <__errno_location@plt>
   13538:	ldr	r5, [r0]
   1353c:	b	13564 <__assert_fail@plt+0x2180>
   13540:	ldr	r0, [r4, #32]
   13544:	mov	r5, #0
   13548:	cmp	r0, #0
   1354c:	blt	13584 <__assert_fail@plt+0x21a0>
   13550:	bl	113c0 <close@plt>
   13554:	cmp	r0, #0
   13558:	bne	1357c <__assert_fail@plt+0x2198>
   1355c:	b	13584 <__assert_fail@plt+0x21a0>
   13560:	mov	r5, #0
   13564:	ldr	r0, [r4, #28]
   13568:	bl	113c0 <close@plt>
   1356c:	cmp	r5, #0
   13570:	bne	13584 <__assert_fail@plt+0x21a0>
   13574:	cmp	r0, #0
   13578:	beq	13584 <__assert_fail@plt+0x21a0>
   1357c:	bl	112a0 <__errno_location@plt>
   13580:	ldr	r5, [r0]
   13584:	add	r0, r4, #60	; 0x3c
   13588:	bl	135c8 <__assert_fail@plt+0x21e4>
   1358c:	ldr	r0, [r4, #52]	; 0x34
   13590:	cmp	r0, #0
   13594:	beq	1359c <__assert_fail@plt+0x21b8>
   13598:	bl	15514 <__assert_fail@plt+0x4130>
   1359c:	mov	r0, r4
   135a0:	bl	13600 <__assert_fail@plt+0x221c>
   135a4:	mov	r0, r4
   135a8:	bl	19448 <__assert_fail@plt+0x8064>
   135ac:	cmp	r5, #0
   135b0:	moveq	r0, #0
   135b4:	popeq	{r4, r5, fp, pc}
   135b8:	bl	112a0 <__errno_location@plt>
   135bc:	str	r5, [r0]
   135c0:	mvn	r0, #0
   135c4:	pop	{r4, r5, fp, pc}
   135c8:	push	{r4, sl, fp, lr}
   135cc:	add	fp, sp, #8
   135d0:	mov	r4, r0
   135d4:	b	135dc <__assert_fail@plt+0x21f8>
   135d8:	mov	r0, r4
   135dc:	bl	15d04 <__assert_fail@plt+0x4920>
   135e0:	cmp	r0, #0
   135e4:	popne	{r4, sl, fp, pc}
   135e8:	mov	r0, r4
   135ec:	bl	15d50 <__assert_fail@plt+0x496c>
   135f0:	cmp	r0, #0
   135f4:	blt	135d8 <__assert_fail@plt+0x21f4>
   135f8:	bl	113c0 <close@plt>
   135fc:	b	135d8 <__assert_fail@plt+0x21f4>
   13600:	ldrh	r1, [r0, #48]	; 0x30
   13604:	movw	r2, #258	; 0x102
   13608:	tst	r1, r2
   1360c:	beq	13620 <__assert_fail@plt+0x223c>
   13610:	ldr	r0, [r0, #56]	; 0x38
   13614:	cmp	r0, #0
   13618:	bxeq	lr
   1361c:	b	15514 <__assert_fail@plt+0x4130>
   13620:	ldr	r0, [r0, #56]	; 0x38
   13624:	b	19448 <__assert_fail@plt+0x8064>
   13628:	push	{r4, r5, r6, r7, fp, lr}
   1362c:	add	fp, sp, #16
   13630:	ldr	r6, [r0]
   13634:	mov	r5, #0
   13638:	cmp	r6, #0
   1363c:	beq	13bd4 <__assert_fail@plt+0x27f0>
   13640:	mov	r4, r0
   13644:	ldr	r1, [r0, #48]	; 0x30
   13648:	tst	r1, #8192	; 0x2000
   1364c:	bne	13bd4 <__assert_fail@plt+0x27f0>
   13650:	ldrh	r0, [r6, #60]	; 0x3c
   13654:	mov	r2, #3
   13658:	strh	r2, [r6, #60]	; 0x3c
   1365c:	cmp	r0, #2
   13660:	beq	13688 <__assert_fail@plt+0x22a4>
   13664:	cmp	r0, #1
   13668:	bne	136f4 <__assert_fail@plt+0x2310>
   1366c:	mov	r0, r4
   13670:	mov	r1, r6
   13674:	mov	r2, #0
   13678:	bl	13158 <__assert_fail@plt+0x1d74>
   1367c:	strh	r0, [r6, #56]	; 0x38
   13680:	mov	r0, r6
   13684:	pop	{r4, r5, r6, r7, fp, pc}
   13688:	ldrh	r2, [r6, #56]	; 0x38
   1368c:	movw	r3, #65534	; 0xfffe
   13690:	and	r2, r2, r3
   13694:	cmp	r2, #12
   13698:	bne	136f4 <__assert_fail@plt+0x2310>
   1369c:	mov	r0, r4
   136a0:	mov	r1, r6
   136a4:	mov	r2, #1
   136a8:	bl	13158 <__assert_fail@plt+0x1d74>
   136ac:	strh	r0, [r6, #56]	; 0x38
   136b0:	cmp	r0, #1
   136b4:	bne	137bc <__assert_fail@plt+0x23d8>
   136b8:	ldrb	r0, [r4, #48]	; 0x30
   136bc:	tst	r0, #4
   136c0:	bne	137bc <__assert_fail@plt+0x23d8>
   136c4:	movw	r1, #41964	; 0xa3ec
   136c8:	movt	r1, #1
   136cc:	mov	r0, r4
   136d0:	bl	1342c <__assert_fail@plt+0x2048>
   136d4:	str	r0, [r6, #36]	; 0x24
   136d8:	cmn	r0, #1
   136dc:	ble	13ab4 <__assert_fail@plt+0x26d0>
   136e0:	ldrh	r0, [r6, #58]	; 0x3a
   136e4:	orr	r0, r0, #2
   136e8:	strh	r0, [r6, #58]	; 0x3a
   136ec:	mov	r5, r6
   136f0:	b	1395c <__assert_fail@plt+0x2578>
   136f4:	ldrh	r2, [r6, #56]	; 0x38
   136f8:	cmp	r2, #1
   136fc:	bne	13750 <__assert_fail@plt+0x236c>
   13700:	cmp	r0, #4
   13704:	bne	137c4 <__assert_fail@plt+0x23e0>
   13708:	ldrb	r0, [r6, #58]	; 0x3a
   1370c:	tst	r0, #2
   13710:	beq	1371c <__assert_fail@plt+0x2338>
   13714:	ldr	r0, [r6, #36]	; 0x24
   13718:	bl	113c0 <close@plt>
   1371c:	ldr	r0, [r4, #4]
   13720:	cmp	r0, #0
   13724:	beq	13734 <__assert_fail@plt+0x2350>
   13728:	bl	1345c <__assert_fail@plt+0x2078>
   1372c:	mov	r0, #0
   13730:	str	r0, [r4, #4]
   13734:	mov	r0, #6
   13738:	strh	r0, [r6, #56]	; 0x38
   1373c:	mov	r0, r4
   13740:	mov	r1, r6
   13744:	bl	13be0 <__assert_fail@plt+0x27fc>
   13748:	mov	r0, r6
   1374c:	pop	{r4, r5, r6, r7, fp, pc}
   13750:	ldr	r5, [r6, #8]
   13754:	cmp	r5, #0
   13758:	beq	1385c <__assert_fail@plt+0x2478>
   1375c:	str	r5, [r4]
   13760:	mov	r0, r6
   13764:	bl	19448 <__assert_fail@plt+0x8064>
   13768:	ldr	r0, [r5, #48]	; 0x30
   1376c:	cmp	r0, #0
   13770:	beq	138a8 <__assert_fail@plt+0x24c4>
   13774:	ldrh	r0, [r5, #60]	; 0x3c
   13778:	cmp	r0, #4
   1377c:	mov	r6, r5
   13780:	beq	13750 <__assert_fail@plt+0x236c>
   13784:	cmp	r0, #2
   13788:	bne	13920 <__assert_fail@plt+0x253c>
   1378c:	mov	r0, r4
   13790:	mov	r1, r5
   13794:	mov	r2, #1
   13798:	bl	13158 <__assert_fail@plt+0x1d74>
   1379c:	strh	r0, [r5, #56]	; 0x38
   137a0:	cmp	r0, #1
   137a4:	ldrbeq	r0, [r4, #48]	; 0x30
   137a8:	tsteq	r0, #4
   137ac:	beq	13b40 <__assert_fail@plt+0x275c>
   137b0:	mov	r0, #3
   137b4:	strh	r0, [r5, #60]	; 0x3c
   137b8:	b	13920 <__assert_fail@plt+0x253c>
   137bc:	mov	r5, r6
   137c0:	b	1395c <__assert_fail@plt+0x2578>
   137c4:	tst	r1, #64	; 0x40
   137c8:	beq	137ec <__assert_fail@plt+0x2408>
   137cc:	ldr	r0, [r4, #16]
   137d0:	ldr	r3, [r4, #20]
   137d4:	ldr	r2, [r6, #64]	; 0x40
   137d8:	ldr	r5, [r6, #68]	; 0x44
   137dc:	eor	r3, r5, r3
   137e0:	eor	r0, r2, r0
   137e4:	orrs	r0, r0, r3
   137e8:	bne	13708 <__assert_fail@plt+0x2324>
   137ec:	ldr	r0, [r4, #4]
   137f0:	cmp	r0, #0
   137f4:	beq	138fc <__assert_fail@plt+0x2518>
   137f8:	tst	r1, #4096	; 0x1000
   137fc:	bne	138e8 <__assert_fail@plt+0x2504>
   13800:	ldr	r3, [r6, #24]
   13804:	mov	r0, r4
   13808:	mov	r1, r6
   1380c:	mvn	r2, #0
   13810:	bl	13cb0 <__assert_fail@plt+0x28cc>
   13814:	cmp	r0, #0
   13818:	beq	13914 <__assert_fail@plt+0x2530>
   1381c:	bl	112a0 <__errno_location@plt>
   13820:	ldr	r0, [r0]
   13824:	str	r0, [r6, #32]
   13828:	ldrh	r0, [r6, #58]	; 0x3a
   1382c:	orr	r0, r0, #1
   13830:	strh	r0, [r6, #58]	; 0x3a
   13834:	ldr	r0, [r4, #4]
   13838:	cmp	r0, #0
   1383c:	beq	13914 <__assert_fail@plt+0x2530>
   13840:	ldmib	r0, {r1, r2}
   13844:	ldr	r1, [r1, #24]
   13848:	str	r1, [r0, #24]
   1384c:	cmp	r2, #0
   13850:	mov	r0, r2
   13854:	bne	13840 <__assert_fail@plt+0x245c>
   13858:	b	13914 <__assert_fail@plt+0x2530>
   1385c:	ldr	r0, [r6, #4]
   13860:	ldr	r1, [r0, #12]
   13864:	cmp	r1, #0
   13868:	beq	13a18 <__assert_fail@plt+0x2634>
   1386c:	str	r0, [r4]
   13870:	ldr	r1, [r4, #24]
   13874:	ldr	r0, [r0, #40]	; 0x28
   13878:	mov	r5, #0
   1387c:	strb	r5, [r1, r0]
   13880:	mov	r0, r4
   13884:	mov	r1, #3
   13888:	bl	13e90 <__assert_fail@plt+0x2aac>
   1388c:	cmp	r0, #0
   13890:	beq	13a0c <__assert_fail@plt+0x2628>
   13894:	mov	r7, r0
   13898:	mov	r0, r6
   1389c:	bl	19448 <__assert_fail@plt+0x8064>
   138a0:	mov	r5, r7
   138a4:	b	13920 <__assert_fail@plt+0x253c>
   138a8:	mov	r0, r4
   138ac:	bl	146fc <__assert_fail@plt+0x3318>
   138b0:	cmp	r0, #0
   138b4:	beq	138c8 <__assert_fail@plt+0x24e4>
   138b8:	ldr	r0, [r4, #48]	; 0x30
   138bc:	orr	r0, r0, #8192	; 0x2000
   138c0:	str	r0, [r4, #48]	; 0x30
   138c4:	b	139d4 <__assert_fail@plt+0x25f0>
   138c8:	mov	r0, r4
   138cc:	bl	13600 <__assert_fail@plt+0x221c>
   138d0:	mov	r0, r4
   138d4:	mov	r1, r5
   138d8:	bl	14758 <__assert_fail@plt+0x3374>
   138dc:	mov	r0, r4
   138e0:	bl	133a0 <__assert_fail@plt+0x1fbc>
   138e4:	b	1395c <__assert_fail@plt+0x2578>
   138e8:	bic	r1, r1, #4096	; 0x1000
   138ec:	str	r1, [r4, #48]	; 0x30
   138f0:	bl	1345c <__assert_fail@plt+0x2078>
   138f4:	mov	r0, #0
   138f8:	str	r0, [r4, #4]
   138fc:	mov	r0, r4
   13900:	mov	r1, #3
   13904:	bl	13e90 <__assert_fail@plt+0x2aac>
   13908:	str	r0, [r4, #4]
   1390c:	cmp	r0, #0
   13910:	beq	139e0 <__assert_fail@plt+0x25fc>
   13914:	ldr	r5, [r4, #4]
   13918:	mov	r0, #0
   1391c:	str	r0, [r4, #4]
   13920:	ldr	r0, [r5, #4]
   13924:	ldr	r1, [r0, #28]
   13928:	ldr	r0, [r0, #40]	; 0x28
   1392c:	sub	r2, r0, #1
   13930:	ldrb	r1, [r1, r2]
   13934:	cmp	r1, #47	; 0x2f
   13938:	moveq	r0, r2
   1393c:	ldr	r1, [r4, #24]
   13940:	mov	r2, #47	; 0x2f
   13944:	strb	r2, [r1, r0]!
   13948:	add	r0, r1, #1
   1394c:	add	r1, r5, #168	; 0xa8
   13950:	ldr	r2, [r5, #52]	; 0x34
   13954:	add	r2, r2, #1
   13958:	bl	11138 <memmove@plt>
   1395c:	str	r5, [r4]
   13960:	ldrh	r0, [r5, #56]	; 0x38
   13964:	cmp	r0, #11
   13968:	bne	1399c <__assert_fail@plt+0x25b8>
   1396c:	ldrd	r0, [r5, #112]	; 0x70
   13970:	eor	r2, r0, #1
   13974:	orrs	r2, r2, r1
   13978:	beq	13bd4 <__assert_fail@plt+0x27f0>
   1397c:	eor	r0, r0, #2
   13980:	orrs	r0, r0, r1
   13984:	bne	13bdc <__assert_fail@plt+0x27f8>
   13988:	mov	r0, r4
   1398c:	mov	r1, r5
   13990:	mov	r2, #0
   13994:	bl	13158 <__assert_fail@plt+0x1d74>
   13998:	strh	r0, [r5, #56]	; 0x38
   1399c:	cmp	r0, #1
   139a0:	bne	13bd4 <__assert_fail@plt+0x27f0>
   139a4:	ldr	r0, [r5, #48]	; 0x30
   139a8:	cmp	r0, #0
   139ac:	ldrdeq	r0, [r5, #64]	; 0x40
   139b0:	strdeq	r0, [r4, #16]
   139b4:	mov	r0, r4
   139b8:	mov	r1, r5
   139bc:	bl	147e0 <__assert_fail@plt+0x33fc>
   139c0:	cmp	r0, #0
   139c4:	bne	13bd4 <__assert_fail@plt+0x27f0>
   139c8:	bl	112a0 <__errno_location@plt>
   139cc:	mov	r1, #12
   139d0:	str	r1, [r0]
   139d4:	mov	r5, #0
   139d8:	mov	r0, r5
   139dc:	pop	{r4, r5, r6, r7, fp, pc}
   139e0:	ldrb	r0, [r4, #49]	; 0x31
   139e4:	tst	r0, #32
   139e8:	mov	r5, #0
   139ec:	bne	13bd4 <__assert_fail@plt+0x27f0>
   139f0:	ldr	r0, [r6, #32]
   139f4:	cmp	r0, #0
   139f8:	ldrhne	r0, [r6, #56]	; 0x38
   139fc:	cmpne	r0, #4
   13a00:	beq	1373c <__assert_fail@plt+0x2358>
   13a04:	mov	r0, #7
   13a08:	b	13738 <__assert_fail@plt+0x2354>
   13a0c:	ldrb	r0, [r4, #49]	; 0x31
   13a10:	tst	r0, #32
   13a14:	bne	13bd4 <__assert_fail@plt+0x27f0>
   13a18:	ldr	r5, [r6, #4]
   13a1c:	str	r5, [r4]
   13a20:	mov	r0, r6
   13a24:	bl	19448 <__assert_fail@plt+0x8064>
   13a28:	ldr	r0, [r5, #48]	; 0x30
   13a2c:	cmn	r0, #1
   13a30:	beq	13a94 <__assert_fail@plt+0x26b0>
   13a34:	ldrh	r0, [r5, #56]	; 0x38
   13a38:	cmp	r0, #11
   13a3c:	beq	13bdc <__assert_fail@plt+0x27f8>
   13a40:	ldr	r0, [r5, #40]	; 0x28
   13a44:	ldr	r1, [r4, #24]
   13a48:	mov	r2, #0
   13a4c:	strb	r2, [r1, r0]
   13a50:	ldr	r0, [r5, #48]	; 0x30
   13a54:	cmp	r0, #0
   13a58:	beq	13ad0 <__assert_fail@plt+0x26ec>
   13a5c:	ldrh	r0, [r5, #58]	; 0x3a
   13a60:	tst	r0, #2
   13a64:	bne	13afc <__assert_fail@plt+0x2718>
   13a68:	tst	r0, #1
   13a6c:	bne	13b98 <__assert_fail@plt+0x27b4>
   13a70:	ldr	r1, [r5, #4]
   13a74:	movw	r3, #41963	; 0xa3eb
   13a78:	movt	r3, #1
   13a7c:	mov	r0, r4
   13a80:	mvn	r2, #0
   13a84:	bl	13cb0 <__assert_fail@plt+0x28cc>
   13a88:	cmp	r0, #0
   13a8c:	bne	13ae0 <__assert_fail@plt+0x26fc>
   13a90:	b	13b98 <__assert_fail@plt+0x27b4>
   13a94:	mov	r0, r5
   13a98:	bl	19448 <__assert_fail@plt+0x8064>
   13a9c:	bl	112a0 <__errno_location@plt>
   13aa0:	mov	r5, #0
   13aa4:	str	r5, [r0]
   13aa8:	str	r5, [r4]
   13aac:	mov	r0, r5
   13ab0:	pop	{r4, r5, r6, r7, fp, pc}
   13ab4:	bl	112a0 <__errno_location@plt>
   13ab8:	ldr	r0, [r0]
   13abc:	mov	r1, #7
   13ac0:	strh	r1, [r6, #56]	; 0x38
   13ac4:	str	r0, [r6, #32]
   13ac8:	mov	r5, r6
   13acc:	b	1395c <__assert_fail@plt+0x2578>
   13ad0:	mov	r0, r4
   13ad4:	bl	146fc <__assert_fail@plt+0x3318>
   13ad8:	cmp	r0, #0
   13adc:	beq	13b98 <__assert_fail@plt+0x27b4>
   13ae0:	bl	112a0 <__errno_location@plt>
   13ae4:	ldr	r0, [r0]
   13ae8:	str	r0, [r5, #32]
   13aec:	ldr	r0, [r4, #48]	; 0x30
   13af0:	orr	r0, r0, #8192	; 0x2000
   13af4:	str	r0, [r4, #48]	; 0x30
   13af8:	b	13b98 <__assert_fail@plt+0x27b4>
   13afc:	ldr	r0, [r4, #48]	; 0x30
   13b00:	tst	r0, #4
   13b04:	bne	13b90 <__assert_fail@plt+0x27ac>
   13b08:	ldr	r1, [r5, #36]	; 0x24
   13b0c:	tst	r0, #512	; 0x200
   13b10:	bne	13b84 <__assert_fail@plt+0x27a0>
   13b14:	mov	r0, r1
   13b18:	bl	11360 <fchdir@plt>
   13b1c:	cmp	r0, #0
   13b20:	beq	13b90 <__assert_fail@plt+0x27ac>
   13b24:	bl	112a0 <__errno_location@plt>
   13b28:	ldr	r0, [r0]
   13b2c:	str	r0, [r5, #32]
   13b30:	ldr	r0, [r4, #48]	; 0x30
   13b34:	orr	r0, r0, #8192	; 0x2000
   13b38:	str	r0, [r4, #48]	; 0x30
   13b3c:	b	13b90 <__assert_fail@plt+0x27ac>
   13b40:	movw	r1, #41964	; 0xa3ec
   13b44:	movt	r1, #1
   13b48:	mov	r0, r4
   13b4c:	bl	1342c <__assert_fail@plt+0x2048>
   13b50:	str	r0, [r5, #36]	; 0x24
   13b54:	cmn	r0, #1
   13b58:	ble	13b6c <__assert_fail@plt+0x2788>
   13b5c:	ldrh	r0, [r5, #58]	; 0x3a
   13b60:	orr	r0, r0, #2
   13b64:	strh	r0, [r5, #58]	; 0x3a
   13b68:	b	137b0 <__assert_fail@plt+0x23cc>
   13b6c:	bl	112a0 <__errno_location@plt>
   13b70:	ldr	r0, [r0]
   13b74:	mov	r1, #7
   13b78:	strh	r1, [r5, #56]	; 0x38
   13b7c:	str	r0, [r5, #32]
   13b80:	b	137b0 <__assert_fail@plt+0x23cc>
   13b84:	mov	r0, r4
   13b88:	mov	r2, #1
   13b8c:	bl	14898 <__assert_fail@plt+0x34b4>
   13b90:	ldr	r0, [r5, #36]	; 0x24
   13b94:	bl	113c0 <close@plt>
   13b98:	ldrh	r0, [r5, #56]	; 0x38
   13b9c:	cmp	r0, #2
   13ba0:	beq	13bc8 <__assert_fail@plt+0x27e4>
   13ba4:	ldr	r0, [r5, #32]
   13ba8:	mov	r1, #7
   13bac:	cmp	r0, #0
   13bb0:	movweq	r1, #6
   13bb4:	strh	r1, [r5, #56]	; 0x38
   13bb8:	bne	13bc8 <__assert_fail@plt+0x27e4>
   13bbc:	mov	r0, r4
   13bc0:	mov	r1, r5
   13bc4:	bl	13be0 <__assert_fail@plt+0x27fc>
   13bc8:	ldrb	r0, [r4, #49]	; 0x31
   13bcc:	tst	r0, #32
   13bd0:	movne	r5, #0
   13bd4:	mov	r0, r5
   13bd8:	pop	{r4, r5, r6, r7, fp, pc}
   13bdc:	bl	113b4 <abort@plt>
   13be0:	push	{r4, r5, r6, r7, fp, lr}
   13be4:	add	fp, sp, #16
   13be8:	sub	sp, sp, #24
   13bec:	add	lr, r1, #64	; 0x40
   13bf0:	ldrh	r2, [r0, #48]	; 0x30
   13bf4:	movw	r3, #258	; 0x102
   13bf8:	tst	r2, r3
   13bfc:	beq	13c34 <__assert_fail@plt+0x2850>
   13c00:	ldrd	r2, [lr]
   13c04:	stm	sp, {r2, r3}
   13c08:	ldrd	r2, [r1, #160]	; 0xa0
   13c0c:	str	r3, [sp, #12]
   13c10:	str	r2, [sp, #8]
   13c14:	ldr	r0, [r0, #56]	; 0x38
   13c18:	mov	r1, sp
   13c1c:	bl	15b10 <__assert_fail@plt+0x472c>
   13c20:	cmp	r0, #0
   13c24:	beq	13cac <__assert_fail@plt+0x28c8>
   13c28:	bl	19448 <__assert_fail@plt+0x8064>
   13c2c:	sub	sp, fp, #16
   13c30:	pop	{r4, r5, r6, r7, fp, pc}
   13c34:	ldr	r2, [r1, #4]
   13c38:	cmp	r2, #0
   13c3c:	beq	13ca4 <__assert_fail@plt+0x28c0>
   13c40:	ldr	r3, [r2, #48]	; 0x30
   13c44:	cmp	r3, #0
   13c48:	blt	13ca4 <__assert_fail@plt+0x28c0>
   13c4c:	ldr	ip, [r0, #56]	; 0x38
   13c50:	ldrd	r4, [ip, #16]
   13c54:	orrs	r3, r4, r5
   13c58:	beq	13cac <__assert_fail@plt+0x28c8>
   13c5c:	ldrd	r4, [r1, #160]	; 0xa0
   13c60:	ldrd	r6, [ip]
   13c64:	eor	r1, r7, r5
   13c68:	eor	r3, r6, r4
   13c6c:	orrs	r1, r3, r1
   13c70:	bne	13ca4 <__assert_fail@plt+0x28c0>
   13c74:	ldrd	r4, [lr]
   13c78:	ldr	r1, [ip, #8]!
   13c7c:	eor	r1, r1, r4
   13c80:	ldr	r3, [ip, #4]
   13c84:	eor	r3, r3, r5
   13c88:	orrs	r1, r1, r3
   13c8c:	bne	13ca4 <__assert_fail@plt+0x28c0>
   13c90:	ldrd	r4, [r2, #64]	; 0x40
   13c94:	strd	r4, [ip]
   13c98:	ldr	r0, [r0, #56]	; 0x38
   13c9c:	ldrd	r2, [r2, #160]	; 0xa0
   13ca0:	strd	r2, [r0]
   13ca4:	sub	sp, fp, #16
   13ca8:	pop	{r4, r5, r6, r7, fp, pc}
   13cac:	bl	113b4 <abort@plt>
   13cb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13cb4:	add	fp, sp, #24
   13cb8:	sub	sp, sp, #104	; 0x68
   13cbc:	mov	r7, r3
   13cc0:	mov	r4, r2
   13cc4:	mov	r8, r1
   13cc8:	mov	r5, r0
   13ccc:	cmp	r3, #0
   13cd0:	beq	13cf4 <__assert_fail@plt+0x2910>
   13cd4:	movw	r1, #41963	; 0xa3eb
   13cd8:	movt	r1, #1
   13cdc:	mov	r0, r7
   13ce0:	bl	11120 <strcmp@plt>
   13ce4:	mov	r6, r0
   13ce8:	cmp	r0, #0
   13cec:	movwne	r6, #1
   13cf0:	b	13cf8 <__assert_fail@plt+0x2914>
   13cf4:	mov	r6, #1
   13cf8:	ldr	r0, [r5, #48]	; 0x30
   13cfc:	tst	r0, #4
   13d00:	bne	13d58 <__assert_fail@plt+0x2974>
   13d04:	mov	r9, #0
   13d08:	cmn	r4, #1
   13d0c:	mov	r1, #0
   13d10:	movwgt	r1, #1
   13d14:	orrs	r1, r1, r6
   13d18:	bne	13d78 <__assert_fail@plt+0x2994>
   13d1c:	ands	r0, r0, #512	; 0x200
   13d20:	beq	13d78 <__assert_fail@plt+0x2994>
   13d24:	add	r4, r5, #60	; 0x3c
   13d28:	mov	r0, r4
   13d2c:	bl	15d04 <__assert_fail@plt+0x4920>
   13d30:	cmp	r0, #0
   13d34:	bne	13d80 <__assert_fail@plt+0x299c>
   13d38:	mov	r0, r4
   13d3c:	bl	15d50 <__assert_fail@plt+0x496c>
   13d40:	cmn	r0, #1
   13d44:	ble	13d80 <__assert_fail@plt+0x299c>
   13d48:	mov	r4, r0
   13d4c:	mov	r9, #0
   13d50:	mov	r7, #0
   13d54:	b	13d9c <__assert_fail@plt+0x29b8>
   13d58:	mov	r5, #0
   13d5c:	cmp	r4, #0
   13d60:	blt	13e84 <__assert_fail@plt+0x2aa0>
   13d64:	ands	r0, r0, #512	; 0x200
   13d68:	beq	13e84 <__assert_fail@plt+0x2aa0>
   13d6c:	mov	r0, r4
   13d70:	bl	113c0 <close@plt>
   13d74:	b	13e84 <__assert_fail@plt+0x2aa0>
   13d78:	cmn	r4, #1
   13d7c:	bgt	13d9c <__assert_fail@plt+0x29b8>
   13d80:	mov	r0, r5
   13d84:	mov	r1, r7
   13d88:	bl	1342c <__assert_fail@plt+0x2048>
   13d8c:	cmp	r0, #0
   13d90:	blt	13e34 <__assert_fail@plt+0x2a50>
   13d94:	mov	r4, r0
   13d98:	mov	r9, #1
   13d9c:	ldrb	r0, [r5, #48]	; 0x30
   13da0:	tst	r0, #2
   13da4:	bne	13dc8 <__assert_fail@plt+0x29e4>
   13da8:	cmp	r7, #0
   13dac:	beq	13e10 <__assert_fail@plt+0x2a2c>
   13db0:	movw	r1, #41963	; 0xa3eb
   13db4:	movt	r1, #1
   13db8:	mov	r0, r7
   13dbc:	bl	11120 <strcmp@plt>
   13dc0:	cmp	r0, #0
   13dc4:	bne	13e10 <__assert_fail@plt+0x2a2c>
   13dc8:	mov	r1, sp
   13dcc:	mov	r0, r4
   13dd0:	bl	19950 <__assert_fail@plt+0x856c>
   13dd4:	cmp	r0, #0
   13dd8:	bne	13e60 <__assert_fail@plt+0x2a7c>
   13ddc:	ldrd	r0, [r8, #64]	; 0x40
   13de0:	ldm	sp, {r2, r3}
   13de4:	eor	r1, r1, r3
   13de8:	eor	r0, r0, r2
   13dec:	orrs	r0, r0, r1
   13df0:	bne	13e54 <__assert_fail@plt+0x2a70>
   13df4:	ldrd	r0, [r8, #160]	; 0xa0
   13df8:	ldr	r2, [sp, #96]	; 0x60
   13dfc:	ldr	r3, [sp, #100]	; 0x64
   13e00:	eor	r1, r1, r3
   13e04:	eor	r0, r0, r2
   13e08:	orrs	r0, r0, r1
   13e0c:	bne	13e54 <__assert_fail@plt+0x2a70>
   13e10:	ldrb	r0, [r5, #49]	; 0x31
   13e14:	tst	r0, #2
   13e18:	bne	13e3c <__assert_fail@plt+0x2a58>
   13e1c:	mov	r0, r4
   13e20:	bl	11360 <fchdir@plt>
   13e24:	mov	r5, r0
   13e28:	cmp	r9, #0
   13e2c:	bne	13e6c <__assert_fail@plt+0x2a88>
   13e30:	b	13e84 <__assert_fail@plt+0x2aa0>
   13e34:	mvn	r5, #0
   13e38:	b	13e84 <__assert_fail@plt+0x2aa0>
   13e3c:	mov	r0, r5
   13e40:	mov	r1, r4
   13e44:	mov	r2, r6
   13e48:	bl	14898 <__assert_fail@plt+0x34b4>
   13e4c:	mov	r5, #0
   13e50:	b	13e84 <__assert_fail@plt+0x2aa0>
   13e54:	bl	112a0 <__errno_location@plt>
   13e58:	mov	r1, #2
   13e5c:	str	r1, [r0]
   13e60:	mvn	r5, #0
   13e64:	cmp	r9, #0
   13e68:	beq	13e84 <__assert_fail@plt+0x2aa0>
   13e6c:	bl	112a0 <__errno_location@plt>
   13e70:	mov	r6, r0
   13e74:	ldr	r7, [r0]
   13e78:	mov	r0, r4
   13e7c:	bl	113c0 <close@plt>
   13e80:	str	r7, [r6]
   13e84:	mov	r0, r5
   13e88:	sub	sp, fp, #24
   13e8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e94:	add	fp, sp, #28
   13e98:	sub	sp, sp, #68	; 0x44
   13e9c:	mov	r4, r1
   13ea0:	ldr	sl, [r0]
   13ea4:	ldr	r7, [sl, #12]
   13ea8:	cmp	r7, #0
   13eac:	str	r0, [fp, #-36]	; 0xffffffdc
   13eb0:	beq	14224 <__assert_fail@plt+0x2e40>
   13eb4:	mov	r0, r7
   13eb8:	bl	11354 <dirfd@plt>
   13ebc:	str	r0, [fp, #-32]	; 0xffffffe0
   13ec0:	cmn	r0, #1
   13ec4:	ble	1425c <__assert_fail@plt+0x2e78>
   13ec8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   13ecc:	mov	r1, ip
   13ed0:	ldr	r0, [r1, #44]!	; 0x2c
   13ed4:	str	r1, [fp, #-44]	; 0xffffffd4
   13ed8:	mvn	r1, #0
   13edc:	cmp	r0, #0
   13ee0:	movweq	r1, #34464	; 0x86a0
   13ee4:	movteq	r1, #1
   13ee8:	str	r1, [sp, #28]
   13eec:	mov	r0, #1
   13ef0:	str	r0, [sp, #4]
   13ef4:	str	r4, [sp, #8]
   13ef8:	ldr	r1, [sl, #28]
   13efc:	ldr	r0, [sl, #40]	; 0x28
   13f00:	sub	r2, r0, #1
   13f04:	ldrb	r1, [r1, r2]
   13f08:	cmp	r1, #47	; 0x2f
   13f0c:	moveq	r0, r2
   13f10:	ldrb	r1, [ip, #48]	; 0x30
   13f14:	mov	r9, #0
   13f18:	tst	r1, #4
   13f1c:	mov	r1, #0
   13f20:	str	r1, [sp, #40]	; 0x28
   13f24:	beq	13f3c <__assert_fail@plt+0x2b58>
   13f28:	ldr	r1, [ip, #24]
   13f2c:	mov	r2, #47	; 0x2f
   13f30:	strb	r2, [r1, r0]!
   13f34:	add	r1, r1, #1
   13f38:	str	r1, [sp, #40]	; 0x28
   13f3c:	str	r7, [sp, #12]
   13f40:	add	r1, r0, #1
   13f44:	ldr	r4, [sl, #12]
   13f48:	cmp	r4, #0
   13f4c:	str	r1, [fp, #-40]	; 0xffffffd8
   13f50:	beq	14278 <__assert_fail@plt+0x2e94>
   13f54:	ldr	r0, [sl, #48]	; 0x30
   13f58:	add	r0, r0, #1
   13f5c:	str	r0, [sp, #24]
   13f60:	ldr	r0, [ip, #36]	; 0x24
   13f64:	sub	r0, r0, r1
   13f68:	str	r0, [sp, #44]	; 0x2c
   13f6c:	mov	r6, #0
   13f70:	bl	112a0 <__errno_location@plt>
   13f74:	str	r0, [sp, #36]	; 0x24
   13f78:	mov	r9, #0
   13f7c:	mov	r7, #0
   13f80:	mov	r0, #0
   13f84:	str	r0, [sp, #48]	; 0x30
   13f88:	mov	r0, #0
   13f8c:	str	r0, [sp, #20]
   13f90:	mov	r0, #0
   13f94:	str	r0, [sp, #16]
   13f98:	str	sl, [sp, #32]
   13f9c:	ldr	r0, [sp, #36]	; 0x24
   13fa0:	str	r6, [r0]
   13fa4:	mov	r0, r4
   13fa8:	bl	1133c <readdir64@plt>
   13fac:	cmp	r0, #0
   13fb0:	beq	144b0 <__assert_fail@plt+0x30cc>
   13fb4:	mov	r8, r0
   13fb8:	mov	r6, r9
   13fbc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13fc0:	ldrb	r0, [r5, #48]	; 0x30
   13fc4:	tst	r0, #32
   13fc8:	ldrbeq	r0, [r8, #19]
   13fcc:	cmpeq	r0, #46	; 0x2e
   13fd0:	beq	14078 <__assert_fail@plt+0x2c94>
   13fd4:	add	r4, r8, #19
   13fd8:	mov	r0, r4
   13fdc:	bl	1127c <strlen@plt>
   13fe0:	mov	sl, r0
   13fe4:	mov	r0, r5
   13fe8:	mov	r1, r4
   13fec:	mov	r2, sl
   13ff0:	bl	130a8 <__assert_fail@plt+0x1cc4>
   13ff4:	mov	r9, r0
   13ff8:	cmp	r0, #0
   13ffc:	beq	1428c <__assert_fail@plt+0x2ea8>
   14000:	ldr	r0, [sp, #44]	; 0x2c
   14004:	cmp	sl, r0
   14008:	bcs	14020 <__assert_fail@plt+0x2c3c>
   1400c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14010:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14014:	adds	r0, sl, r3
   14018:	bcc	140bc <__assert_fail@plt+0x2cd8>
   1401c:	b	14620 <__assert_fail@plt+0x323c>
   14020:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14024:	add	r0, sl, r0
   14028:	add	r1, r0, #1
   1402c:	ldr	r5, [fp, #-36]	; 0xffffffdc
   14030:	ldr	r4, [r5, #24]
   14034:	mov	r0, r5
   14038:	bl	13030 <__assert_fail@plt+0x1c4c>
   1403c:	cmp	r0, #0
   14040:	beq	1428c <__assert_fail@plt+0x2ea8>
   14044:	ldr	r0, [r5, #24]
   14048:	cmp	r4, r0
   1404c:	mov	r2, r5
   14050:	beq	140a4 <__assert_fail@plt+0x2cc0>
   14054:	ldrb	r1, [r2, #48]	; 0x30
   14058:	tst	r1, #4
   1405c:	ldr	r1, [sp, #40]	; 0x28
   14060:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14064:	addne	r1, r0, r3
   14068:	str	r1, [sp, #40]	; 0x28
   1406c:	mov	r0, #1
   14070:	str	r0, [sp, #16]
   14074:	b	140a8 <__assert_fail@plt+0x2cc4>
   14078:	ldrb	r0, [r8, #20]
   1407c:	cmp	r0, #0
   14080:	beq	14094 <__assert_fail@plt+0x2cb0>
   14084:	cmp	r0, #46	; 0x2e
   14088:	ldrbeq	r0, [r8, #21]
   1408c:	cmpeq	r0, #0
   14090:	bne	13fd4 <__assert_fail@plt+0x2bf0>
   14094:	ldr	sl, [sp, #32]
   14098:	mov	r9, r6
   1409c:	mov	r6, #0
   140a0:	b	14208 <__assert_fail@plt+0x2e24>
   140a4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   140a8:	ldr	r0, [r2, #36]	; 0x24
   140ac:	sub	r0, r0, r3
   140b0:	str	r0, [sp, #44]	; 0x2c
   140b4:	adds	r0, sl, r3
   140b8:	bcs	14620 <__assert_fail@plt+0x323c>
   140bc:	ldr	r1, [sp, #24]
   140c0:	str	r1, [r9, #48]	; 0x30
   140c4:	ldr	r1, [r2]
   140c8:	str	r0, [r9, #40]	; 0x28
   140cc:	str	r1, [r9, #4]
   140d0:	ldrd	r0, [r8]
   140d4:	strd	r0, [r9, #160]	; 0xa0
   140d8:	ldrb	r0, [r2, #48]	; 0x30
   140dc:	tst	r0, #4
   140e0:	ldr	sl, [sp, #32]
   140e4:	mov	r5, r6
   140e8:	bne	140f8 <__assert_fail@plt+0x2d14>
   140ec:	add	r0, r9, #168	; 0xa8
   140f0:	str	r0, [r9, #24]
   140f4:	b	14118 <__assert_fail@plt+0x2d34>
   140f8:	ldr	r0, [r9, #28]
   140fc:	ldr	r2, [r9, #52]	; 0x34
   14100:	str	r0, [r9, #24]
   14104:	add	r1, r9, #168	; 0xa8
   14108:	add	r2, r2, #1
   1410c:	ldr	r0, [sp, #40]	; 0x28
   14110:	bl	11138 <memmove@plt>
   14114:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14118:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1411c:	ldr	r0, [r0]
   14120:	cmp	r0, #0
   14124:	beq	1414c <__assert_fail@plt+0x2d68>
   14128:	ldrb	r0, [r2, #49]	; 0x31
   1412c:	tst	r0, #4
   14130:	bne	1414c <__assert_fail@plt+0x2d68>
   14134:	mov	r0, r2
   14138:	mov	r1, r9
   1413c:	mov	r2, #0
   14140:	bl	13158 <__assert_fail@plt+0x1d74>
   14144:	strh	r0, [r9, #56]	; 0x38
   14148:	b	1419c <__assert_fail@plt+0x2db8>
   1414c:	add	r0, r9, #64	; 0x40
   14150:	ldr	r1, [r2, #48]	; 0x30
   14154:	mov	r4, #0
   14158:	tst	r1, #8
   1415c:	beq	14180 <__assert_fail@plt+0x2d9c>
   14160:	ldrb	r2, [r8, #18]
   14164:	orr	r3, r2, #4
   14168:	cmp	r3, #4
   1416c:	beq	14180 <__assert_fail@plt+0x2d9c>
   14170:	eor	r2, r2, #10
   14174:	and	r1, r1, #16
   14178:	orrs	r4, r1, r2
   1417c:	movwne	r4, #1
   14180:	mov	r1, #11
   14184:	strh	r1, [r9, #56]	; 0x38
   14188:	ldrb	r1, [r8, #18]
   1418c:	bl	14b60 <__assert_fail@plt+0x377c>
   14190:	eor	r1, r4, #1
   14194:	mov	r0, r9
   14198:	bl	13128 <__assert_fail@plt+0x1d44>
   1419c:	mov	r6, #0
   141a0:	str	r6, [r9, #8]
   141a4:	cmp	r5, #0
   141a8:	mov	r4, r9
   141ac:	ldrne	r0, [sp, #48]	; 0x30
   141b0:	strne	r9, [r0, #8]
   141b4:	movne	r4, r5
   141b8:	movw	r0, #10000	; 0x2710
   141bc:	cmp	r7, r0
   141c0:	bne	141e4 <__assert_fail@plt+0x2e00>
   141c4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   141c8:	ldr	r0, [r0]
   141cc:	cmp	r0, #0
   141d0:	bne	141e4 <__assert_fail@plt+0x2e00>
   141d4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   141d8:	mov	r0, sl
   141dc:	bl	14b80 <__assert_fail@plt+0x379c>
   141e0:	str	r0, [sp, #20]
   141e4:	add	r7, r7, #1
   141e8:	ldr	r0, [sp, #28]
   141ec:	cmp	r0, r7
   141f0:	mov	r0, #0
   141f4:	movwls	r0, #15
   141f8:	cmp	r0, #0
   141fc:	bne	1466c <__assert_fail@plt+0x3288>
   14200:	str	r9, [sp, #48]	; 0x30
   14204:	mov	r9, r4
   14208:	ldr	r4, [sl, #12]
   1420c:	cmp	r4, #0
   14210:	bne	13f9c <__assert_fail@plt+0x2bb8>
   14214:	ldr	r0, [sp, #16]
   14218:	tst	r0, #1
   1421c:	ldr	r4, [sp, #8]
   14220:	b	144fc <__assert_fail@plt+0x3118>
   14224:	mov	r2, r0
   14228:	ldr	r3, [r0, #48]	; 0x30
   1422c:	and	r1, r3, #516	; 0x204
   14230:	mvn	r0, #99	; 0x63
   14234:	cmp	r1, #512	; 0x200
   14238:	ldreq	r0, [r2, #32]
   1423c:	ldr	r1, [sl, #24]
   14240:	mov	r2, #0
   14244:	tst	r3, #16
   14248:	beq	142e0 <__assert_fail@plt+0x2efc>
   1424c:	tst	r3, #1
   14250:	bne	142d4 <__assert_fail@plt+0x2ef0>
   14254:	mov	r2, #32768	; 0x8000
   14258:	b	142e0 <__assert_fail@plt+0x2efc>
   1425c:	ldr	r0, [sl, #12]
   14260:	bl	113d8 <closedir@plt>
   14264:	mov	r9, #0
   14268:	str	r9, [sl, #12]
   1426c:	cmp	r4, #3
   14270:	beq	1432c <__assert_fail@plt+0x2f48>
   14274:	b	146d4 <__assert_fail@plt+0x32f0>
   14278:	mov	r7, #0
   1427c:	mov	r0, #0
   14280:	str	r0, [sp, #20]
   14284:	ldr	r4, [sp, #8]
   14288:	b	14514 <__assert_fail@plt+0x3130>
   1428c:	ldr	r4, [sp, #36]	; 0x24
   14290:	ldr	r8, [r4]
   14294:	mov	r0, r9
   14298:	bl	19448 <__assert_fail@plt+0x8064>
   1429c:	mov	r0, r6
   142a0:	bl	1345c <__assert_fail@plt+0x2078>
   142a4:	ldr	r7, [sp, #32]
   142a8:	ldr	r0, [r7, #12]
   142ac:	bl	113d8 <closedir@plt>
   142b0:	mov	r9, #0
   142b4:	str	r9, [r7, #12]
   142b8:	mov	r0, #7
   142bc:	strh	r0, [r7, #56]	; 0x38
   142c0:	ldr	r0, [r5, #48]	; 0x30
   142c4:	orr	r0, r0, #8192	; 0x2000
   142c8:	str	r0, [r5, #48]	; 0x30
   142cc:	str	r8, [r4]
   142d0:	b	146d4 <__assert_fail@plt+0x32f0>
   142d4:	ldr	r3, [sl, #48]	; 0x30
   142d8:	cmp	r3, #0
   142dc:	movne	r2, #32768	; 0x8000
   142e0:	sub	r3, fp, #32
   142e4:	bl	163ac <__assert_fail@plt+0x4fc8>
   142e8:	str	r0, [sl, #12]
   142ec:	cmp	r0, #0
   142f0:	beq	14320 <__assert_fail@plt+0x2f3c>
   142f4:	ldrh	r0, [sl, #56]	; 0x38
   142f8:	cmp	r0, #11
   142fc:	bne	14344 <__assert_fail@plt+0x2f60>
   14300:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14304:	mov	r0, r6
   14308:	mov	r1, sl
   1430c:	mov	r2, #0
   14310:	bl	13158 <__assert_fail@plt+0x1d74>
   14314:	mov	ip, r6
   14318:	strh	r0, [sl, #56]	; 0x38
   1431c:	b	1438c <__assert_fail@plt+0x2fa8>
   14320:	mov	r9, #0
   14324:	cmp	r4, #3
   14328:	bne	146d4 <__assert_fail@plt+0x32f0>
   1432c:	mov	r0, #4
   14330:	strh	r0, [sl, #56]	; 0x38
   14334:	bl	112a0 <__errno_location@plt>
   14338:	ldr	r0, [r0]
   1433c:	str	r0, [sl, #32]
   14340:	b	146d4 <__assert_fail@plt+0x32f0>
   14344:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14348:	ldrb	r0, [ip, #49]	; 0x31
   1434c:	tst	r0, #1
   14350:	beq	1438c <__assert_fail@plt+0x2fa8>
   14354:	mov	r0, ip
   14358:	mov	r1, sl
   1435c:	bl	13be0 <__assert_fail@plt+0x27fc>
   14360:	mov	r9, #0
   14364:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14368:	mov	r1, sl
   1436c:	mov	r2, #0
   14370:	bl	13158 <__assert_fail@plt+0x1d74>
   14374:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14378:	mov	r1, sl
   1437c:	bl	147e0 <__assert_fail@plt+0x33fc>
   14380:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14384:	cmp	r0, #0
   14388:	beq	14690 <__assert_fail@plt+0x32ac>
   1438c:	mov	r1, ip
   14390:	ldr	r0, [r1, #44]!	; 0x2c
   14394:	str	r1, [fp, #-44]	; 0xffffffd4
   14398:	mvn	r1, #0
   1439c:	cmp	r0, #0
   143a0:	movweq	r1, #34464	; 0x86a0
   143a4:	movteq	r1, #1
   143a8:	str	r1, [sp, #28]
   143ac:	mov	r6, #0
   143b0:	cmp	r4, #2
   143b4:	beq	143d8 <__assert_fail@plt+0x2ff4>
   143b8:	ldr	r0, [ip, #48]	; 0x30
   143bc:	and	r1, r0, #56	; 0x38
   143c0:	mov	r0, #0
   143c4:	cmp	r1, #24
   143c8:	ldreq	r1, [sl, #84]	; 0x54
   143cc:	cmpeq	r1, #2
   143d0:	beq	146e0 <__assert_fail@plt+0x32fc>
   143d4:	eor	r6, r0, #1
   143d8:	cmp	r4, #3
   143dc:	beq	143f0 <__assert_fail@plt+0x300c>
   143e0:	cmp	r6, #0
   143e4:	bne	143f0 <__assert_fail@plt+0x300c>
   143e8:	str	r6, [sp, #4]
   143ec:	b	13ef4 <__assert_fail@plt+0x2b10>
   143f0:	ldrb	r0, [ip, #49]	; 0x31
   143f4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143f8:	tst	r0, #2
   143fc:	beq	1441c <__assert_fail@plt+0x3038>
   14400:	mov	r0, r2
   14404:	movw	r1, #1030	; 0x406
   14408:	mov	r2, #3
   1440c:	bl	191b4 <__assert_fail@plt+0x7dd0>
   14410:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14414:	mov	r2, r0
   14418:	str	r0, [fp, #-32]	; 0xffffffe0
   1441c:	cmp	r2, #0
   14420:	blt	14440 <__assert_fail@plt+0x305c>
   14424:	mov	r0, ip
   14428:	mov	r1, sl
   1442c:	mov	r3, #0
   14430:	bl	13cb0 <__assert_fail@plt+0x28cc>
   14434:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14438:	cmp	r0, #0
   1443c:	beq	13eec <__assert_fail@plt+0x2b08>
   14440:	subs	r0, r4, #3
   14444:	movwne	r0, #1
   14448:	eor	r1, r6, #1
   1444c:	orrs	r0, r0, r1
   14450:	bne	14460 <__assert_fail@plt+0x307c>
   14454:	bl	112a0 <__errno_location@plt>
   14458:	ldr	r0, [r0]
   1445c:	str	r0, [sl, #32]
   14460:	ldrh	r0, [sl, #58]	; 0x3a
   14464:	orr	r0, r0, #1
   14468:	strh	r0, [sl, #58]	; 0x3a
   1446c:	ldr	r0, [sl, #12]
   14470:	bl	113d8 <closedir@plt>
   14474:	mov	r6, #0
   14478:	str	r6, [sl, #12]
   1447c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14480:	ldr	r0, [ip, #48]	; 0x30
   14484:	tst	r0, #512	; 0x200
   14488:	beq	144a0 <__assert_fail@plt+0x30bc>
   1448c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14490:	cmp	r0, #0
   14494:	blt	144a0 <__assert_fail@plt+0x30bc>
   14498:	bl	113c0 <close@plt>
   1449c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   144a0:	mov	r0, #0
   144a4:	str	r0, [sp, #4]
   144a8:	str	r6, [sl, #12]
   144ac:	b	13ef4 <__assert_fail@plt+0x2b10>
   144b0:	ldr	r0, [sp, #36]	; 0x24
   144b4:	ldr	r0, [r0]
   144b8:	cmp	r0, #0
   144bc:	beq	144d8 <__assert_fail@plt+0x30f4>
   144c0:	str	r0, [sl, #32]
   144c4:	ldr	r0, [sp, #12]
   144c8:	orrs	r0, r0, r7
   144cc:	mov	r0, #4
   144d0:	movwne	r0, #7
   144d4:	strh	r0, [sl, #56]	; 0x38
   144d8:	ldr	r0, [sl, #12]
   144dc:	cmp	r0, #0
   144e0:	ldr	r4, [sp, #8]
   144e4:	beq	1467c <__assert_fail@plt+0x3298>
   144e8:	bl	113d8 <closedir@plt>
   144ec:	mov	r0, #0
   144f0:	str	r0, [sl, #12]
   144f4:	ldr	r0, [sp, #16]
   144f8:	tst	r0, #1
   144fc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14500:	beq	14514 <__assert_fail@plt+0x3130>
   14504:	mov	r0, ip
   14508:	mov	r1, r9
   1450c:	bl	14bc4 <__assert_fail@plt+0x37e0>
   14510:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14514:	ldrb	r0, [ip, #48]	; 0x30
   14518:	tst	r0, #4
   1451c:	beq	14548 <__assert_fail@plt+0x3164>
   14520:	ldr	r0, [ip, #36]	; 0x24
   14524:	ldr	r2, [sp, #40]	; 0x28
   14528:	sub	r1, r2, #1
   1452c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14530:	cmp	r3, r0
   14534:	moveq	r2, r1
   14538:	cmp	r7, #0
   1453c:	moveq	r2, r1
   14540:	mov	r0, #0
   14544:	strb	r0, [r2]
   14548:	ldr	r0, [sp, #12]
   1454c:	cmp	r0, #0
   14550:	ldreq	r0, [sp, #4]
   14554:	eorseq	r0, r0, #1
   14558:	beq	14584 <__assert_fail@plt+0x31a0>
   1455c:	cmp	r7, #0
   14560:	bne	145b8 <__assert_fail@plt+0x31d4>
   14564:	cmp	r4, #3
   14568:	bne	146c8 <__assert_fail@plt+0x32e4>
   1456c:	ldrh	r0, [sl, #56]	; 0x38
   14570:	cmp	r0, #4
   14574:	cmpne	r0, #7
   14578:	movne	r0, #6
   1457c:	strhne	r0, [sl, #56]	; 0x38
   14580:	b	146c8 <__assert_fail@plt+0x32e4>
   14584:	cmp	r4, #1
   14588:	cmpne	r7, #0
   1458c:	bne	145b8 <__assert_fail@plt+0x31d4>
   14590:	ldr	r0, [sl, #48]	; 0x30
   14594:	cmp	r0, #0
   14598:	beq	146a0 <__assert_fail@plt+0x32bc>
   1459c:	ldr	r1, [sl, #4]
   145a0:	movw	r3, #41963	; 0xa3eb
   145a4:	movt	r3, #1
   145a8:	mov	r0, ip
   145ac:	mvn	r2, #0
   145b0:	bl	13cb0 <__assert_fail@plt+0x28cc>
   145b4:	b	146a8 <__assert_fail@plt+0x32c4>
   145b8:	ldr	r0, [sp, #20]
   145bc:	tst	r0, #1
   145c0:	beq	145f0 <__assert_fail@plt+0x320c>
   145c4:	movw	r0, #19532	; 0x4c4c
   145c8:	movt	r0, #1
   145cc:	str	r0, [ip, #44]	; 0x2c
   145d0:	mov	r0, ip
   145d4:	mov	r1, r9
   145d8:	mov	r2, r7
   145dc:	bl	132c0 <__assert_fail@plt+0x1edc>
   145e0:	ldr	ip, [fp, #-36]	; 0xffffffdc
   145e4:	mov	r9, r0
   145e8:	mov	r0, #0
   145ec:	str	r0, [ip, #44]	; 0x2c
   145f0:	cmp	r7, #2
   145f4:	bcc	146d4 <__assert_fail@plt+0x32f0>
   145f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   145fc:	ldr	r0, [r0]
   14600:	cmp	r0, #0
   14604:	beq	146d4 <__assert_fail@plt+0x32f0>
   14608:	mov	r0, ip
   1460c:	mov	r1, r9
   14610:	mov	r2, r7
   14614:	bl	132c0 <__assert_fail@plt+0x1edc>
   14618:	mov	r9, r0
   1461c:	b	146d4 <__assert_fail@plt+0x32f0>
   14620:	mov	r0, r9
   14624:	mov	r4, r2
   14628:	bl	19448 <__assert_fail@plt+0x8064>
   1462c:	mov	r0, r6
   14630:	bl	1345c <__assert_fail@plt+0x2078>
   14634:	ldr	r5, [sp, #32]
   14638:	ldr	r0, [r5, #12]
   1463c:	bl	113d8 <closedir@plt>
   14640:	mov	r9, #0
   14644:	str	r9, [r5, #12]
   14648:	mov	r0, #7
   1464c:	strh	r0, [r5, #56]	; 0x38
   14650:	ldr	r0, [r4, #48]	; 0x30
   14654:	orr	r0, r0, #8192	; 0x2000
   14658:	str	r0, [r4, #48]	; 0x30
   1465c:	mov	r0, #36	; 0x24
   14660:	ldr	r1, [sp, #36]	; 0x24
   14664:	str	r0, [r1]
   14668:	b	146d4 <__assert_fail@plt+0x32f0>
   1466c:	cmp	r0, #15
   14670:	bne	146d0 <__assert_fail@plt+0x32ec>
   14674:	mov	r9, r4
   14678:	ldr	r4, [sp, #8]
   1467c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14680:	ldr	r0, [sp, #16]
   14684:	tst	r0, #1
   14688:	bne	14504 <__assert_fail@plt+0x3120>
   1468c:	b	14514 <__assert_fail@plt+0x3130>
   14690:	bl	112a0 <__errno_location@plt>
   14694:	mov	r1, #12
   14698:	str	r1, [r0]
   1469c:	b	146d4 <__assert_fail@plt+0x32f0>
   146a0:	mov	r0, ip
   146a4:	bl	146fc <__assert_fail@plt+0x3318>
   146a8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   146ac:	cmp	r0, #0
   146b0:	beq	1455c <__assert_fail@plt+0x3178>
   146b4:	mov	r0, #7
   146b8:	strh	r0, [sl, #56]	; 0x38
   146bc:	ldr	r0, [ip, #48]	; 0x30
   146c0:	orr	r0, r0, #8192	; 0x2000
   146c4:	str	r0, [ip, #48]	; 0x30
   146c8:	mov	r0, r9
   146cc:	bl	1345c <__assert_fail@plt+0x2078>
   146d0:	mov	r9, #0
   146d4:	mov	r0, r9
   146d8:	sub	sp, fp, #28
   146dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   146e4:	mov	r0, sl
   146e8:	bl	14af8 <__assert_fail@plt+0x3714>
   146ec:	ldr	ip, [fp, #-36]	; 0xffffffdc
   146f0:	cmp	r0, #0
   146f4:	movwne	r0, #1
   146f8:	b	143d4 <__assert_fail@plt+0x2ff0>
   146fc:	push	{r4, r5, fp, lr}
   14700:	add	fp, sp, #8
   14704:	mov	r4, r0
   14708:	ldr	r0, [r0, #48]	; 0x30
   1470c:	mov	r5, #0
   14710:	tst	r0, #4
   14714:	bne	14748 <__assert_fail@plt+0x3364>
   14718:	tst	r0, #512	; 0x200
   1471c:	bne	14738 <__assert_fail@plt+0x3354>
   14720:	ldr	r0, [r4, #28]
   14724:	bl	11360 <fchdir@plt>
   14728:	mov	r5, r0
   1472c:	cmp	r0, #0
   14730:	movwne	r5, #1
   14734:	b	14748 <__assert_fail@plt+0x3364>
   14738:	mov	r0, r4
   1473c:	mvn	r1, #99	; 0x63
   14740:	mov	r2, #1
   14744:	bl	14898 <__assert_fail@plt+0x34b4>
   14748:	add	r0, r4, #60	; 0x3c
   1474c:	bl	135c8 <__assert_fail@plt+0x21e4>
   14750:	mov	r0, r5
   14754:	pop	{r4, r5, fp, pc}
   14758:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1475c:	add	fp, sp, #24
   14760:	mov	r4, r1
   14764:	mov	r8, r0
   14768:	ldr	r1, [r1, #52]	; 0x34
   1476c:	str	r1, [r4, #40]	; 0x28
   14770:	ldr	r0, [r0, #24]
   14774:	add	r6, r4, #168	; 0xa8
   14778:	add	r2, r1, #1
   1477c:	mov	r1, r6
   14780:	bl	11138 <memmove@plt>
   14784:	mov	r0, r6
   14788:	mov	r1, #47	; 0x2f
   1478c:	bl	11324 <strrchr@plt>
   14790:	cmp	r0, #0
   14794:	beq	147d0 <__assert_fail@plt+0x33ec>
   14798:	cmp	r0, r6
   1479c:	bne	147ac <__assert_fail@plt+0x33c8>
   147a0:	ldrb	r1, [r0, #1]
   147a4:	cmp	r1, #0
   147a8:	beq	147d0 <__assert_fail@plt+0x33ec>
   147ac:	add	r7, r0, #1
   147b0:	mov	r0, r7
   147b4:	bl	1127c <strlen@plt>
   147b8:	mov	r5, r0
   147bc:	add	r2, r0, #1
   147c0:	mov	r0, r6
   147c4:	mov	r1, r7
   147c8:	bl	11138 <memmove@plt>
   147cc:	str	r5, [r4, #52]	; 0x34
   147d0:	ldr	r0, [r8, #24]
   147d4:	str	r0, [r4, #24]
   147d8:	str	r0, [r4, #28]
   147dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   147e0:	push	{r4, r5, r6, r7, fp, lr}
   147e4:	add	fp, sp, #16
   147e8:	mov	r4, r1
   147ec:	mov	r6, r0
   147f0:	ldrh	r0, [r0, #48]	; 0x30
   147f4:	movw	r1, #258	; 0x102
   147f8:	tst	r0, r1
   147fc:	beq	14870 <__assert_fail@plt+0x348c>
   14800:	mov	r0, #24
   14804:	bl	18a74 <__assert_fail@plt+0x7690>
   14808:	mov	r5, #0
   1480c:	cmp	r0, #0
   14810:	beq	14890 <__assert_fail@plt+0x34ac>
   14814:	mov	r7, r0
   14818:	ldrd	r0, [r4, #64]	; 0x40
   1481c:	stm	r7, {r0, r1}
   14820:	ldrd	r0, [r4, #160]	; 0xa0
   14824:	add	r2, r7, #8
   14828:	stm	r2, {r0, r1, r4}
   1482c:	ldr	r0, [r6, #56]	; 0x38
   14830:	mov	r1, r7
   14834:	bl	15ad0 <__assert_fail@plt+0x46ec>
   14838:	cmp	r0, r7
   1483c:	beq	14864 <__assert_fail@plt+0x3480>
   14840:	mov	r6, r0
   14844:	mov	r0, r7
   14848:	bl	19448 <__assert_fail@plt+0x8064>
   1484c:	cmp	r6, #0
   14850:	beq	14890 <__assert_fail@plt+0x34ac>
   14854:	ldr	r0, [r6, #16]
   14858:	mov	r1, #2
   1485c:	strh	r1, [r4, #56]	; 0x38
   14860:	str	r0, [r4]
   14864:	mov	r5, #1
   14868:	mov	r0, r5
   1486c:	pop	{r4, r5, r6, r7, fp, pc}
   14870:	ldr	r0, [r6, #56]	; 0x38
   14874:	add	r1, r4, #64	; 0x40
   14878:	bl	19014 <__assert_fail@plt+0x7c30>
   1487c:	mov	r5, #1
   14880:	cmp	r0, #0
   14884:	movne	r0, #2
   14888:	strhne	r0, [r4, #56]	; 0x38
   1488c:	strne	r4, [r4]
   14890:	mov	r0, r5
   14894:	pop	{r4, r5, r6, r7, fp, pc}
   14898:	push	{r4, r5, fp, lr}
   1489c:	add	fp, sp, #8
   148a0:	mov	r4, r1
   148a4:	mov	r5, r0
   148a8:	ldr	r1, [r0, #32]
   148ac:	cmp	r1, r4
   148b0:	bne	148bc <__assert_fail@plt+0x34d8>
   148b4:	cmn	r1, #100	; 0x64
   148b8:	bne	148fc <__assert_fail@plt+0x3518>
   148bc:	cmp	r2, #0
   148c0:	beq	148d8 <__assert_fail@plt+0x34f4>
   148c4:	add	r0, r5, #60	; 0x3c
   148c8:	bl	15d0c <__assert_fail@plt+0x4928>
   148cc:	cmp	r0, #0
   148d0:	bge	148f0 <__assert_fail@plt+0x350c>
   148d4:	b	148f4 <__assert_fail@plt+0x3510>
   148d8:	cmp	r1, #0
   148dc:	blt	148f4 <__assert_fail@plt+0x3510>
   148e0:	ldr	r0, [r5, #48]	; 0x30
   148e4:	ands	r0, r0, #4
   148e8:	bne	148f4 <__assert_fail@plt+0x3510>
   148ec:	mov	r0, r1
   148f0:	bl	113c0 <close@plt>
   148f4:	str	r4, [r5, #32]
   148f8:	pop	{r4, r5, fp, pc}
   148fc:	bl	113b4 <abort@plt>
   14900:	cmp	r2, #5
   14904:	strhcc	r2, [r1, #60]	; 0x3c
   14908:	movcc	r0, #0
   1490c:	bxcc	lr
   14910:	push	{fp, lr}
   14914:	mov	fp, sp
   14918:	bl	112a0 <__errno_location@plt>
   1491c:	mov	r1, #22
   14920:	str	r1, [r0]
   14924:	mov	r0, #1
   14928:	pop	{fp, pc}
   1492c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14930:	add	fp, sp, #28
   14934:	sub	sp, sp, #4
   14938:	mov	r5, r0
   1493c:	orr	r0, r1, #4096	; 0x1000
   14940:	cmp	r0, #4096	; 0x1000
   14944:	bne	14984 <__assert_fail@plt+0x35a0>
   14948:	mov	r7, r1
   1494c:	ldr	r6, [r5]
   14950:	bl	112a0 <__errno_location@plt>
   14954:	mov	sl, r0
   14958:	mov	r4, #0
   1495c:	str	r4, [r0]
   14960:	ldrb	r0, [r5, #49]	; 0x31
   14964:	tst	r0, #32
   14968:	bne	14994 <__assert_fail@plt+0x35b0>
   1496c:	ldrh	r0, [r6, #56]	; 0x38
   14970:	cmp	r0, #1
   14974:	beq	149a0 <__assert_fail@plt+0x35bc>
   14978:	cmp	r0, #9
   1497c:	ldreq	r4, [r6, #8]
   14980:	b	14994 <__assert_fail@plt+0x35b0>
   14984:	bl	112a0 <__errno_location@plt>
   14988:	mov	r1, #22
   1498c:	str	r1, [r0]
   14990:	mov	r4, #0
   14994:	mov	r0, r4
   14998:	sub	sp, fp, #28
   1499c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149a0:	ldr	r0, [r5, #4]
   149a4:	cmp	r0, #0
   149a8:	blne	1345c <__assert_fail@plt+0x2078>
   149ac:	mov	r9, #1
   149b0:	cmp	r7, #4096	; 0x1000
   149b4:	ldreq	r0, [r5, #48]	; 0x30
   149b8:	orreq	r0, r0, #4096	; 0x1000
   149bc:	streq	r0, [r5, #48]	; 0x30
   149c0:	moveq	r9, #2
   149c4:	ldr	r0, [r6, #48]	; 0x30
   149c8:	cmp	r0, #0
   149cc:	bne	14a48 <__assert_fail@plt+0x3664>
   149d0:	ldr	r0, [r6, #24]
   149d4:	ldrb	r0, [r0]
   149d8:	cmp	r0, #47	; 0x2f
   149dc:	beq	14a48 <__assert_fail@plt+0x3664>
   149e0:	ldrb	r0, [r5, #48]	; 0x30
   149e4:	tst	r0, #4
   149e8:	bne	14a48 <__assert_fail@plt+0x3664>
   149ec:	movw	r1, #41964	; 0xa3ec
   149f0:	movt	r1, #1
   149f4:	mov	r0, r5
   149f8:	bl	1342c <__assert_fail@plt+0x2048>
   149fc:	cmn	r0, #1
   14a00:	ble	14a60 <__assert_fail@plt+0x367c>
   14a04:	mov	r8, r0
   14a08:	mov	r0, r5
   14a0c:	mov	r1, r9
   14a10:	bl	13e90 <__assert_fail@plt+0x2aac>
   14a14:	str	r0, [r5, #4]
   14a18:	ldrb	r0, [r5, #49]	; 0x31
   14a1c:	tst	r0, #2
   14a20:	bne	14a6c <__assert_fail@plt+0x3688>
   14a24:	mov	r0, r8
   14a28:	bl	11360 <fchdir@plt>
   14a2c:	cmp	r0, #0
   14a30:	beq	14a80 <__assert_fail@plt+0x369c>
   14a34:	ldr	r5, [sl]
   14a38:	mov	r0, r8
   14a3c:	bl	113c0 <close@plt>
   14a40:	str	r5, [sl]
   14a44:	b	14994 <__assert_fail@plt+0x35b0>
   14a48:	mov	r0, r5
   14a4c:	mov	r1, r9
   14a50:	bl	13e90 <__assert_fail@plt+0x2aac>
   14a54:	mov	r4, r0
   14a58:	str	r0, [r5, #4]
   14a5c:	b	14994 <__assert_fail@plt+0x35b0>
   14a60:	mov	r4, #0
   14a64:	str	r4, [r5, #4]
   14a68:	b	14994 <__assert_fail@plt+0x35b0>
   14a6c:	mov	r0, r5
   14a70:	mov	r1, r8
   14a74:	mov	r2, #1
   14a78:	bl	14898 <__assert_fail@plt+0x34b4>
   14a7c:	b	14a88 <__assert_fail@plt+0x36a4>
   14a80:	mov	r0, r8
   14a84:	bl	113c0 <close@plt>
   14a88:	ldr	r4, [r5, #4]
   14a8c:	b	14994 <__assert_fail@plt+0x35b0>
   14a90:	push	{fp, lr}
   14a94:	mov	fp, sp
   14a98:	mov	r2, r1
   14a9c:	ldrd	r0, [r0, #8]
   14aa0:	mov	r3, #0
   14aa4:	bl	19750 <__assert_fail@plt+0x836c>
   14aa8:	mov	r0, r2
   14aac:	pop	{fp, pc}
   14ab0:	push	{r4, r5, fp, lr}
   14ab4:	add	fp, sp, #8
   14ab8:	ldrd	r2, [r1, #8]
   14abc:	ldrd	r4, [r0, #8]
   14ac0:	eor	r3, r5, r3
   14ac4:	eor	r2, r4, r2
   14ac8:	orrs	r2, r2, r3
   14acc:	mov	r2, #0
   14ad0:	bne	14af0 <__assert_fail@plt+0x370c>
   14ad4:	ldrd	r2, [r1]
   14ad8:	ldrd	r0, [r0]
   14adc:	eor	r1, r1, r3
   14ae0:	eor	r0, r0, r2
   14ae4:	orr	r0, r0, r1
   14ae8:	clz	r0, r0
   14aec:	lsr	r2, r0, #5
   14af0:	mov	r0, r2
   14af4:	pop	{r4, r5, fp, pc}
   14af8:	push	{fp, lr}
   14afc:	mov	fp, sp
   14b00:	bl	14c84 <__assert_fail@plt+0x38a0>
   14b04:	mov	r1, r0
   14b08:	mov	r0, #0
   14b0c:	movw	r2, #26984	; 0x6968
   14b10:	cmp	r1, r2
   14b14:	ble	14b44 <__assert_fail@plt+0x3760>
   14b18:	movw	r2, #26985	; 0x6969
   14b1c:	cmp	r1, r2
   14b20:	movwne	r2, #40864	; 0x9fa0
   14b24:	cmpne	r1, r2
   14b28:	beq	14b5c <__assert_fail@plt+0x3778>
   14b2c:	movw	r2, #16719	; 0x414f
   14b30:	movt	r2, #21318	; 0x5346
   14b34:	cmp	r1, r2
   14b38:	popeq	{fp, pc}
   14b3c:	mov	r0, #1
   14b40:	pop	{fp, pc}
   14b44:	movw	r2, #19778	; 0x4d42
   14b48:	movt	r2, #65363	; 0xff53
   14b4c:	cmp	r1, r2
   14b50:	beq	14b5c <__assert_fail@plt+0x3778>
   14b54:	cmp	r1, #0
   14b58:	movne	r0, #1
   14b5c:	pop	{fp, pc}
   14b60:	sub	r2, r1, #1
   14b64:	mov	r1, #0
   14b68:	cmp	r2, #11
   14b6c:	movwls	r1, #41968	; 0xa3f0
   14b70:	movtls	r1, #1
   14b74:	ldrls	r1, [r1, r2, lsl #2]
   14b78:	str	r1, [r0, #16]
   14b7c:	bx	lr
   14b80:	push	{fp, lr}
   14b84:	mov	fp, sp
   14b88:	bl	14c84 <__assert_fail@plt+0x38a0>
   14b8c:	mov	r1, r0
   14b90:	mov	r0, #0
   14b94:	movw	r2, #19778	; 0x4d42
   14b98:	movt	r2, #65363	; 0xff53
   14b9c:	cmp	r1, r2
   14ba0:	movwne	r2, #26985	; 0x6969
   14ba4:	cmpne	r1, r2
   14ba8:	bne	14bb0 <__assert_fail@plt+0x37cc>
   14bac:	pop	{fp, pc}
   14bb0:	movw	r2, #6548	; 0x1994
   14bb4:	movt	r2, #258	; 0x102
   14bb8:	cmp	r1, r2
   14bbc:	movne	r0, #1
   14bc0:	pop	{fp, pc}
   14bc4:	ldr	r2, [r0, #4]
   14bc8:	ldr	ip, [r0, #24]
   14bcc:	cmp	r2, #0
   14bd0:	beq	14c00 <__assert_fail@plt+0x381c>
   14bd4:	ldr	r3, [r2, #24]
   14bd8:	add	r0, r2, #168	; 0xa8
   14bdc:	cmp	r3, r0
   14be0:	ldrne	r0, [r2, #28]
   14be4:	subne	r0, r3, r0
   14be8:	addne	r0, ip, r0
   14bec:	strne	r0, [r2, #24]
   14bf0:	str	ip, [r2, #28]
   14bf4:	ldr	r2, [r2, #8]
   14bf8:	cmp	r2, #0
   14bfc:	bne	14bd4 <__assert_fail@plt+0x37f0>
   14c00:	ldr	r2, [r1, #48]	; 0x30
   14c04:	cmp	r2, #0
   14c08:	bxlt	lr
   14c0c:	ldr	r2, [r1, #24]
   14c10:	add	r0, r1, #168	; 0xa8
   14c14:	cmp	r2, r0
   14c18:	ldrne	r0, [r1, #28]
   14c1c:	subne	r0, r2, r0
   14c20:	addne	r0, ip, r0
   14c24:	strne	r0, [r1, #24]
   14c28:	str	ip, [r1, #28]
   14c2c:	ldr	r2, [r1, #8]
   14c30:	cmp	r2, #0
   14c34:	ldreq	r2, [r1, #4]
   14c38:	ldr	r0, [r2, #48]	; 0x30
   14c3c:	cmn	r0, #1
   14c40:	mov	r1, r2
   14c44:	bgt	14c0c <__assert_fail@plt+0x3828>
   14c48:	bx	lr
   14c4c:	push	{r4, r5, fp, lr}
   14c50:	add	fp, sp, #8
   14c54:	ldr	r0, [r0]
   14c58:	ldrd	r2, [r0, #160]	; 0xa0
   14c5c:	ldr	r0, [r1]
   14c60:	ldrd	r4, [r0, #160]	; 0xa0
   14c64:	mov	r0, #0
   14c68:	subs	r1, r4, r2
   14c6c:	sbcs	r1, r5, r3
   14c70:	movwcc	r0, #1
   14c74:	subs	r1, r2, r4
   14c78:	sbcs	r1, r3, r5
   14c7c:	subcc	r0, r0, #1
   14c80:	pop	{r4, r5, fp, pc}
   14c84:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c88:	add	fp, sp, #24
   14c8c:	sub	sp, sp, #96	; 0x60
   14c90:	mov	r4, r0
   14c94:	ldr	r7, [r0, #44]	; 0x2c
   14c98:	ldrb	r0, [r7, #49]	; 0x31
   14c9c:	mov	r5, #0
   14ca0:	tst	r0, #2
   14ca4:	beq	14da0 <__assert_fail@plt+0x39bc>
   14ca8:	mov	r9, r1
   14cac:	ldr	r6, [r7, #52]	; 0x34
   14cb0:	cmp	r6, #0
   14cb4:	bne	14cf4 <__assert_fail@plt+0x3910>
   14cb8:	movw	r0, #37960	; 0x9448
   14cbc:	movt	r0, #1
   14cc0:	str	r0, [sp]
   14cc4:	mov	r8, #0
   14cc8:	movw	r2, #19884	; 0x4dac
   14ccc:	movt	r2, #1
   14cd0:	movw	r3, #19916	; 0x4dcc
   14cd4:	movt	r3, #1
   14cd8:	mov	r0, #13
   14cdc:	mov	r1, #0
   14ce0:	bl	15240 <__assert_fail@plt+0x3e5c>
   14ce4:	mov	r6, r0
   14ce8:	str	r0, [r7, #52]	; 0x34
   14cec:	cmp	r0, #0
   14cf0:	beq	14d2c <__assert_fail@plt+0x3948>
   14cf4:	ldrd	r0, [r4, #64]	; 0x40
   14cf8:	str	r1, [sp, #12]
   14cfc:	str	r0, [sp, #8]
   14d00:	add	r1, sp, #8
   14d04:	mov	r0, r6
   14d08:	bl	14fb8 <__assert_fail@plt+0x3bd4>
   14d0c:	cmp	r0, #0
   14d10:	beq	14d1c <__assert_fail@plt+0x3938>
   14d14:	ldr	r5, [r0, #8]
   14d18:	b	14da0 <__assert_fail@plt+0x39bc>
   14d1c:	mov	r8, #1
   14d20:	cmp	r9, #0
   14d24:	bge	14d38 <__assert_fail@plt+0x3954>
   14d28:	b	14da0 <__assert_fail@plt+0x39bc>
   14d2c:	mov	r6, #0
   14d30:	cmp	r9, #0
   14d34:	blt	14da0 <__assert_fail@plt+0x39bc>
   14d38:	add	r1, sp, #8
   14d3c:	mov	r0, r9
   14d40:	bl	110f0 <fstatfs64@plt>
   14d44:	cmp	r0, #0
   14d48:	bne	14da0 <__assert_fail@plt+0x39bc>
   14d4c:	cmp	r8, #0
   14d50:	beq	14d9c <__assert_fail@plt+0x39b8>
   14d54:	mov	r0, #16
   14d58:	bl	18a74 <__assert_fail@plt+0x7690>
   14d5c:	cmp	r0, #0
   14d60:	beq	14d9c <__assert_fail@plt+0x39b8>
   14d64:	mov	r5, r0
   14d68:	ldrd	r0, [r4, #64]	; 0x40
   14d6c:	ldr	r2, [sp, #8]
   14d70:	stm	r5, {r0, r1, r2}
   14d74:	mov	r0, r6
   14d78:	mov	r1, r5
   14d7c:	bl	15ad0 <__assert_fail@plt+0x46ec>
   14d80:	cmp	r0, #0
   14d84:	beq	14d94 <__assert_fail@plt+0x39b0>
   14d88:	cmp	r0, r5
   14d8c:	beq	14d9c <__assert_fail@plt+0x39b8>
   14d90:	bl	113b4 <abort@plt>
   14d94:	mov	r0, r5
   14d98:	bl	19448 <__assert_fail@plt+0x8064>
   14d9c:	ldr	r5, [sp, #8]
   14da0:	mov	r0, r5
   14da4:	sub	sp, fp, #24
   14da8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14dac:	push	{fp, lr}
   14db0:	mov	fp, sp
   14db4:	mov	r2, r1
   14db8:	ldrd	r0, [r0]
   14dbc:	mov	r3, #0
   14dc0:	bl	19750 <__assert_fail@plt+0x836c>
   14dc4:	mov	r0, r2
   14dc8:	pop	{fp, pc}
   14dcc:	ldrd	r2, [r1]
   14dd0:	ldrd	r0, [r0]
   14dd4:	eor	r1, r1, r3
   14dd8:	eor	r0, r0, r2
   14ddc:	orr	r0, r0, r1
   14de0:	clz	r0, r0
   14de4:	lsr	r0, r0, #5
   14de8:	bx	lr
   14dec:	andeq	r0, r0, r0
   14df0:	ldr	r0, [r0, #8]
   14df4:	bx	lr
   14df8:	ldr	r0, [r0, #12]
   14dfc:	bx	lr
   14e00:	ldr	r0, [r0, #16]
   14e04:	bx	lr
   14e08:	mov	r2, r0
   14e0c:	ldm	r0, {r1, r3}
   14e10:	mov	r0, #0
   14e14:	cmp	r1, r3
   14e18:	bxcs	lr
   14e1c:	ldr	ip, [r2, #4]
   14e20:	mov	r0, #0
   14e24:	ldr	r2, [r1]
   14e28:	cmp	r2, #0
   14e2c:	beq	14e50 <__assert_fail@plt+0x3a6c>
   14e30:	mov	r3, #0
   14e34:	mov	r2, r1
   14e38:	add	r3, r3, #1
   14e3c:	ldr	r2, [r2, #4]
   14e40:	cmp	r2, #0
   14e44:	bne	14e38 <__assert_fail@plt+0x3a54>
   14e48:	cmp	r3, r0
   14e4c:	movhi	r0, r3
   14e50:	add	r1, r1, #8
   14e54:	cmp	r1, ip
   14e58:	bcc	14e24 <__assert_fail@plt+0x3a40>
   14e5c:	bx	lr
   14e60:	push	{fp, lr}
   14e64:	mov	fp, sp
   14e68:	ldr	r3, [r0]
   14e6c:	ldr	r1, [r0, #4]
   14e70:	mov	lr, #0
   14e74:	cmp	r3, r1
   14e78:	mov	r1, #0
   14e7c:	bcs	14ebc <__assert_fail@plt+0x3ad8>
   14e80:	ldr	ip, [r0, #4]
   14e84:	mov	r1, #0
   14e88:	mov	lr, #0
   14e8c:	ldr	r2, [r3]
   14e90:	cmp	r2, #0
   14e94:	beq	14eb0 <__assert_fail@plt+0x3acc>
   14e98:	mov	r2, r3
   14e9c:	add	r1, r1, #1
   14ea0:	ldr	r2, [r2, #4]
   14ea4:	cmp	r2, #0
   14ea8:	bne	14e9c <__assert_fail@plt+0x3ab8>
   14eac:	add	lr, lr, #1
   14eb0:	add	r3, r3, #8
   14eb4:	cmp	r3, ip
   14eb8:	bcc	14e8c <__assert_fail@plt+0x3aa8>
   14ebc:	ldr	r2, [r0, #12]
   14ec0:	cmp	lr, r2
   14ec4:	bne	14edc <__assert_fail@plt+0x3af8>
   14ec8:	ldr	r2, [r0, #16]
   14ecc:	mov	r0, #1
   14ed0:	cmp	r1, r2
   14ed4:	movne	r0, #0
   14ed8:	pop	{fp, pc}
   14edc:	mov	r0, #0
   14ee0:	pop	{fp, pc}
   14ee4:	nop	{0}
   14ee8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14eec:	add	fp, sp, #24
   14ef0:	sub	sp, sp, #8
   14ef4:	mov	r4, r1
   14ef8:	mov	r5, r0
   14efc:	bl	14e00 <__assert_fail@plt+0x3a1c>
   14f00:	mov	r8, r0
   14f04:	mov	r0, r5
   14f08:	bl	14df0 <__assert_fail@plt+0x3a0c>
   14f0c:	mov	r7, r0
   14f10:	mov	r0, r5
   14f14:	bl	14df8 <__assert_fail@plt+0x3a14>
   14f18:	mov	r6, r0
   14f1c:	mov	r0, r5
   14f20:	bl	14e08 <__assert_fail@plt+0x3a24>
   14f24:	mov	r5, r0
   14f28:	movw	r2, #42016	; 0xa420
   14f2c:	movt	r2, #1
   14f30:	mov	r0, r4
   14f34:	mov	r1, #1
   14f38:	mov	r3, r8
   14f3c:	bl	112e8 <__fprintf_chk@plt>
   14f40:	movw	r2, #42040	; 0xa438
   14f44:	movt	r2, #1
   14f48:	mov	r0, r4
   14f4c:	mov	r1, #1
   14f50:	mov	r3, r7
   14f54:	bl	112e8 <__fprintf_chk@plt>
   14f58:	vldr	d16, [pc, #80]	; 14fb0 <__assert_fail@plt+0x3bcc>
   14f5c:	vmov	s0, r6
   14f60:	vmov	s2, r7
   14f64:	vcvt.f64.u32	d17, s0
   14f68:	vcvt.f64.u32	d18, s2
   14f6c:	vmul.f64	d16, d17, d16
   14f70:	vdiv.f64	d16, d16, d18
   14f74:	vstr	d16, [sp]
   14f78:	movw	r2, #42064	; 0xa450
   14f7c:	movt	r2, #1
   14f80:	mov	r0, r4
   14f84:	mov	r1, #1
   14f88:	mov	r3, r6
   14f8c:	bl	112e8 <__fprintf_chk@plt>
   14f90:	movw	r2, #42097	; 0xa471
   14f94:	movt	r2, #1
   14f98:	mov	r0, r4
   14f9c:	mov	r1, #1
   14fa0:	mov	r3, r5
   14fa4:	sub	sp, fp, #24
   14fa8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fac:	b	112e8 <__fprintf_chk@plt>
   14fb0:	andeq	r0, r0, r0
   14fb4:	subsmi	r0, r9, r0
   14fb8:	push	{r4, r5, r6, r7, fp, lr}
   14fbc:	add	fp, sp, #16
   14fc0:	mov	r5, r1
   14fc4:	mov	r6, r0
   14fc8:	bl	1501c <__assert_fail@plt+0x3c38>
   14fcc:	mov	r7, r0
   14fd0:	ldr	r0, [r0]
   14fd4:	mov	r4, #0
   14fd8:	cmp	r0, #0
   14fdc:	bne	14fe8 <__assert_fail@plt+0x3c04>
   14fe0:	b	15014 <__assert_fail@plt+0x3c30>
   14fe4:	ldr	r7, [r7, #4]
   14fe8:	cmp	r7, #0
   14fec:	beq	15014 <__assert_fail@plt+0x3c30>
   14ff0:	ldr	r1, [r7]
   14ff4:	cmp	r1, r5
   14ff8:	beq	15010 <__assert_fail@plt+0x3c2c>
   14ffc:	ldr	r2, [r6, #28]
   15000:	mov	r0, r5
   15004:	blx	r2
   15008:	cmp	r0, #0
   1500c:	beq	14fe4 <__assert_fail@plt+0x3c00>
   15010:	ldr	r4, [r7]
   15014:	mov	r0, r4
   15018:	pop	{r4, r5, r6, r7, fp, pc}
   1501c:	push	{r4, sl, fp, lr}
   15020:	add	fp, sp, #8
   15024:	mov	r2, r1
   15028:	mov	r4, r0
   1502c:	ldr	r1, [r0, #8]
   15030:	ldr	r3, [r0, #24]
   15034:	mov	r0, r2
   15038:	blx	r3
   1503c:	ldr	r1, [r4, #8]
   15040:	cmp	r0, r1
   15044:	ldrcc	r1, [r4]
   15048:	addcc	r0, r1, r0, lsl #3
   1504c:	popcc	{r4, sl, fp, pc}
   15050:	bl	113b4 <abort@plt>
   15054:	ldr	r1, [r0, #16]
   15058:	cmp	r1, #0
   1505c:	moveq	r1, #0
   15060:	moveq	r0, r1
   15064:	bxeq	lr
   15068:	ldr	r2, [r0]
   1506c:	b	15080 <__assert_fail@plt+0x3c9c>
   15070:	ldr	r1, [r2], #8
   15074:	cmp	r1, #0
   15078:	movne	r0, r1
   1507c:	bxne	lr
   15080:	ldr	r1, [r0, #4]
   15084:	cmp	r2, r1
   15088:	bcc	15070 <__assert_fail@plt+0x3c8c>
   1508c:	push	{fp, lr}
   15090:	mov	fp, sp
   15094:	bl	113b4 <abort@plt>
   15098:	push	{r4, r5, fp, lr}
   1509c:	add	fp, sp, #8
   150a0:	mov	r5, r1
   150a4:	mov	r4, r0
   150a8:	bl	1501c <__assert_fail@plt+0x3c38>
   150ac:	mov	r1, r0
   150b0:	ldr	r2, [r1]
   150b4:	cmp	r2, r5
   150b8:	bne	150cc <__assert_fail@plt+0x3ce8>
   150bc:	ldr	r2, [r1, #4]
   150c0:	cmp	r2, #0
   150c4:	ldrne	r0, [r2]
   150c8:	popne	{r4, r5, fp, pc}
   150cc:	ldr	r1, [r1, #4]
   150d0:	cmp	r1, #0
   150d4:	bne	150b0 <__assert_fail@plt+0x3ccc>
   150d8:	add	r1, r0, #8
   150dc:	ldr	r2, [r4, #4]
   150e0:	cmp	r1, r2
   150e4:	movcs	r0, #0
   150e8:	popcs	{r4, r5, fp, pc}
   150ec:	ldr	r0, [r1], #8
   150f0:	cmp	r0, #0
   150f4:	popne	{r4, r5, fp, pc}
   150f8:	b	150e0 <__assert_fail@plt+0x3cfc>
   150fc:	push	{r4, sl, fp, lr}
   15100:	add	fp, sp, #8
   15104:	mov	ip, r0
   15108:	ldr	lr, [r0]
   1510c:	ldr	r3, [r0, #4]
   15110:	mov	r0, #0
   15114:	cmp	lr, r3
   15118:	bcs	15164 <__assert_fail@plt+0x3d80>
   1511c:	mov	r0, #0
   15120:	ldr	r3, [lr]
   15124:	cmp	r3, #0
   15128:	cmpne	lr, #0
   1512c:	beq	15154 <__assert_fail@plt+0x3d70>
   15130:	mov	r3, lr
   15134:	cmp	r0, r2
   15138:	popcs	{r4, sl, fp, pc}
   1513c:	ldr	r4, [r3]
   15140:	str	r4, [r1, r0, lsl #2]
   15144:	add	r0, r0, #1
   15148:	ldr	r3, [r3, #4]
   1514c:	cmp	r3, #0
   15150:	bne	15134 <__assert_fail@plt+0x3d50>
   15154:	ldr	r3, [ip, #4]
   15158:	add	lr, lr, #8
   1515c:	cmp	lr, r3
   15160:	bcc	15120 <__assert_fail@plt+0x3d3c>
   15164:	pop	{r4, sl, fp, pc}
   15168:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1516c:	add	fp, sp, #24
   15170:	mov	r8, r0
   15174:	ldr	r9, [r0]
   15178:	ldr	r0, [r0, #4]
   1517c:	mov	r6, #0
   15180:	cmp	r9, r0
   15184:	bcs	151e4 <__assert_fail@plt+0x3e00>
   15188:	mov	r4, r2
   1518c:	mov	r5, r1
   15190:	mov	r6, #0
   15194:	b	151c4 <__assert_fail@plt+0x3de0>
   15198:	mov	r7, r9
   1519c:	ldr	r0, [r7]
   151a0:	mov	r1, r4
   151a4:	blx	r5
   151a8:	cmp	r0, #0
   151ac:	beq	151e4 <__assert_fail@plt+0x3e00>
   151b0:	add	r6, r6, #1
   151b4:	ldr	r7, [r7, #4]
   151b8:	cmp	r7, #0
   151bc:	bne	1519c <__assert_fail@plt+0x3db8>
   151c0:	b	151d4 <__assert_fail@plt+0x3df0>
   151c4:	ldr	r0, [r9]
   151c8:	cmp	r0, #0
   151cc:	cmpne	r9, #0
   151d0:	bne	15198 <__assert_fail@plt+0x3db4>
   151d4:	ldr	r0, [r8, #4]
   151d8:	add	r9, r9, #8
   151dc:	cmp	r9, r0
   151e0:	bcc	151c4 <__assert_fail@plt+0x3de0>
   151e4:	mov	r0, r6
   151e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   151ec:	ldrb	r2, [r0]
   151f0:	cmp	r2, #0
   151f4:	moveq	r0, #0
   151f8:	bxeq	lr
   151fc:	add	r3, r0, #1
   15200:	mov	r0, #0
   15204:	rsb	r0, r0, r0, lsl #5
   15208:	uxtab	r0, r0, r2
   1520c:	udiv	r2, r0, r1
   15210:	mls	r0, r2, r1, r0
   15214:	ldrb	r2, [r3], #1
   15218:	cmp	r2, #0
   1521c:	bne	15204 <__assert_fail@plt+0x3e20>
   15220:	bx	lr
   15224:	movw	r1, #42128	; 0xa490
   15228:	movt	r1, #1
   1522c:	vld1.32	{d16-d17}, [r1]!
   15230:	vst1.32	{d16-d17}, [r0]!
   15234:	ldr	r1, [r1]
   15238:	str	r1, [r0]
   1523c:	bx	lr
   15240:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15244:	add	fp, sp, #28
   15248:	sub	sp, sp, #4
   1524c:	mov	r7, r1
   15250:	mov	r8, r0
   15254:	movw	sl, #21312	; 0x5340
   15258:	movt	sl, #1
   1525c:	cmp	r3, #0
   15260:	movne	sl, r3
   15264:	movw	r5, #21280	; 0x5320
   15268:	movt	r5, #1
   1526c:	cmp	r2, #0
   15270:	movne	r5, r2
   15274:	mov	r0, #40	; 0x28
   15278:	bl	18a74 <__assert_fail@plt+0x7690>
   1527c:	mov	r9, #0
   15280:	cmp	r0, #0
   15284:	beq	15314 <__assert_fail@plt+0x3f30>
   15288:	mov	r4, r0
   1528c:	movw	r6, #42128	; 0xa490
   15290:	movt	r6, #1
   15294:	cmp	r7, #0
   15298:	movne	r6, r7
   1529c:	str	r6, [r0, #20]
   152a0:	bl	15350 <__assert_fail@plt+0x3f6c>
   152a4:	cmp	r0, #0
   152a8:	beq	1530c <__assert_fail@plt+0x3f28>
   152ac:	mov	r0, r8
   152b0:	mov	r1, r6
   152b4:	bl	153fc <__assert_fail@plt+0x4018>
   152b8:	str	r0, [r4, #8]
   152bc:	cmp	r0, #0
   152c0:	beq	1530c <__assert_fail@plt+0x3f28>
   152c4:	mov	r1, #8
   152c8:	bl	18a20 <__assert_fail@plt+0x763c>
   152cc:	str	r0, [r4]
   152d0:	cmp	r0, #0
   152d4:	beq	1530c <__assert_fail@plt+0x3f28>
   152d8:	ldr	r1, [fp, #8]
   152dc:	mov	r2, #0
   152e0:	str	r2, [r4, #12]
   152e4:	str	r2, [r4, #16]
   152e8:	str	r5, [r4, #24]
   152ec:	str	sl, [r4, #28]
   152f0:	str	r1, [r4, #32]
   152f4:	str	r2, [r4, #36]	; 0x24
   152f8:	ldr	r1, [r4, #8]
   152fc:	add	r0, r0, r1, lsl #3
   15300:	str	r0, [r4, #4]
   15304:	mov	r9, r4
   15308:	b	15314 <__assert_fail@plt+0x3f30>
   1530c:	mov	r0, r4
   15310:	bl	19448 <__assert_fail@plt+0x8064>
   15314:	mov	r0, r9
   15318:	sub	sp, fp, #28
   1531c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15320:	push	{r4, sl, fp, lr}
   15324:	add	fp, sp, #8
   15328:	mov	r4, r1
   1532c:	mov	r1, #3
   15330:	bl	18bd4 <__assert_fail@plt+0x77f0>
   15334:	udiv	r1, r0, r4
   15338:	mls	r0, r1, r4, r0
   1533c:	pop	{r4, sl, fp, pc}
   15340:	sub	r0, r0, r1
   15344:	clz	r0, r0
   15348:	lsr	r0, r0, #5
   1534c:	bx	lr
   15350:	mov	r1, r0
   15354:	ldr	r3, [r0, #20]
   15358:	mov	r0, #1
   1535c:	movw	r2, #42128	; 0xa490
   15360:	movt	r2, #1
   15364:	cmp	r3, r2
   15368:	beq	153ec <__assert_fail@plt+0x4008>
   1536c:	vldr	s2, [pc, #124]	; 153f0 <__assert_fail@plt+0x400c>
   15370:	vldr	s0, [r3, #8]
   15374:	vcmpe.f32	s0, s2
   15378:	vmrs	APSR_nzcv, fpscr
   1537c:	ble	153e4 <__assert_fail@plt+0x4000>
   15380:	vldr	s4, [pc, #108]	; 153f4 <__assert_fail@plt+0x4010>
   15384:	vcmpe.f32	s0, s4
   15388:	vmrs	APSR_nzcv, fpscr
   1538c:	bpl	153e4 <__assert_fail@plt+0x4000>
   15390:	vldr	s4, [pc, #96]	; 153f8 <__assert_fail@plt+0x4014>
   15394:	vldr	s6, [r3, #12]
   15398:	vcmpe.f32	s6, s4
   1539c:	vmrs	APSR_nzcv, fpscr
   153a0:	ble	153e4 <__assert_fail@plt+0x4000>
   153a4:	vldr	s4, [r3]
   153a8:	vcmpe.f32	s4, #0.0
   153ac:	vmrs	APSR_nzcv, fpscr
   153b0:	blt	153e4 <__assert_fail@plt+0x4000>
   153b4:	vadd.f32	s2, s4, s2
   153b8:	vcmpe.f32	s2, s0
   153bc:	vmrs	APSR_nzcv, fpscr
   153c0:	bpl	153e4 <__assert_fail@plt+0x4000>
   153c4:	vldr	s0, [r3, #4]
   153c8:	vmov.f32	s4, #112	; 0x3f800000  1.0
   153cc:	vcmpe.f32	s0, s4
   153d0:	vmrs	APSR_nzcv, fpscr
   153d4:	bhi	153e4 <__assert_fail@plt+0x4000>
   153d8:	vcmpe.f32	s2, s0
   153dc:	vmrs	APSR_nzcv, fpscr
   153e0:	bxmi	lr
   153e4:	str	r2, [r1, #20]
   153e8:	mov	r0, #0
   153ec:	bx	lr
   153f0:	stclcc	12, cr12, [ip, #820]	; 0x334
   153f4:	svccc	0x00666666
   153f8:	svccc	0x008ccccd
   153fc:	ldrb	r2, [r1, #16]
   15400:	cmp	r2, #0
   15404:	bne	15434 <__assert_fail@plt+0x4050>
   15408:	vldr	s0, [r1, #8]
   1540c:	vmov	s2, r0
   15410:	vcvt.f32.u32	s2, s2
   15414:	vdiv.f32	s2, s2, s0
   15418:	vcvt.u32.f32	s0, s2
   1541c:	vldr	s4, [pc, #44]	; 15450 <__assert_fail@plt+0x406c>
   15420:	mov	r0, #0
   15424:	vcmpe.f32	s2, s4
   15428:	vmrs	APSR_nzcv, fpscr
   1542c:	bxge	lr
   15430:	vmov	r0, s0
   15434:	push	{fp, lr}
   15438:	mov	fp, sp
   1543c:	bl	15c20 <__assert_fail@plt+0x483c>
   15440:	cmn	r0, #-536870911	; 0xe0000001
   15444:	movwhi	r0, #0
   15448:	pop	{fp, lr}
   1544c:	bx	lr
   15450:	svcmi	0x00800000
   15454:	push	{r4, r5, r6, r7, fp, lr}
   15458:	add	fp, sp, #16
   1545c:	mov	r4, r0
   15460:	ldr	r5, [r0]
   15464:	ldr	r0, [r0, #4]
   15468:	cmp	r5, r0
   1546c:	bcs	15504 <__assert_fail@plt+0x4120>
   15470:	mov	r6, #0
   15474:	ldr	r0, [r5]
   15478:	cmp	r0, #0
   1547c:	beq	154f4 <__assert_fail@plt+0x4110>
   15480:	ldr	r7, [r5, #4]
   15484:	ldr	r1, [r4, #32]
   15488:	cmp	r1, #0
   1548c:	mov	r0, r1
   15490:	movwne	r0, #1
   15494:	cmp	r7, #0
   15498:	beq	154dc <__assert_fail@plt+0x40f8>
   1549c:	tst	r0, #1
   154a0:	beq	154ac <__assert_fail@plt+0x40c8>
   154a4:	ldr	r0, [r7]
   154a8:	blx	r1
   154ac:	str	r6, [r7]
   154b0:	ldr	r2, [r7, #4]
   154b4:	ldr	r0, [r4, #36]	; 0x24
   154b8:	str	r0, [r7, #4]
   154bc:	str	r7, [r4, #36]	; 0x24
   154c0:	ldr	r1, [r4, #32]
   154c4:	cmp	r1, #0
   154c8:	mov	r0, r1
   154cc:	movwne	r0, #1
   154d0:	cmp	r2, #0
   154d4:	mov	r7, r2
   154d8:	bne	1549c <__assert_fail@plt+0x40b8>
   154dc:	cmp	r0, #0
   154e0:	beq	154ec <__assert_fail@plt+0x4108>
   154e4:	ldr	r0, [r5]
   154e8:	blx	r1
   154ec:	str	r6, [r5]
   154f0:	str	r6, [r5, #4]
   154f4:	ldr	r0, [r4, #4]
   154f8:	add	r5, r5, #8
   154fc:	cmp	r5, r0
   15500:	bcc	15474 <__assert_fail@plt+0x4090>
   15504:	mov	r0, #0
   15508:	str	r0, [r4, #12]
   1550c:	str	r0, [r4, #16]
   15510:	pop	{r4, r5, r6, r7, fp, pc}
   15514:	push	{r4, r5, r6, sl, fp, lr}
   15518:	add	fp, sp, #16
   1551c:	mov	r4, r0
   15520:	ldr	r0, [r0, #32]
   15524:	cmp	r0, #0
   15528:	ldrne	r0, [r4, #16]
   1552c:	cmpne	r0, #0
   15530:	beq	15588 <__assert_fail@plt+0x41a4>
   15534:	ldr	r5, [r4]
   15538:	ldr	r0, [r4, #4]
   1553c:	cmp	r5, r0
   15540:	bcc	15558 <__assert_fail@plt+0x4174>
   15544:	b	15588 <__assert_fail@plt+0x41a4>
   15548:	ldr	r0, [r4, #4]
   1554c:	add	r5, r5, #8
   15550:	cmp	r5, r0
   15554:	bcs	15588 <__assert_fail@plt+0x41a4>
   15558:	ldr	r0, [r5]
   1555c:	cmp	r0, #0
   15560:	cmpne	r5, #0
   15564:	beq	15548 <__assert_fail@plt+0x4164>
   15568:	mov	r6, r5
   1556c:	ldr	r0, [r6]
   15570:	ldr	r1, [r4, #32]
   15574:	blx	r1
   15578:	ldr	r6, [r6, #4]
   1557c:	cmp	r6, #0
   15580:	bne	1556c <__assert_fail@plt+0x4188>
   15584:	b	15548 <__assert_fail@plt+0x4164>
   15588:	ldr	r5, [r4]
   1558c:	ldr	r0, [r4, #4]
   15590:	cmp	r5, r0
   15594:	bcc	155ac <__assert_fail@plt+0x41c8>
   15598:	b	155d0 <__assert_fail@plt+0x41ec>
   1559c:	ldr	r0, [r4, #4]
   155a0:	add	r5, r5, #8
   155a4:	cmp	r5, r0
   155a8:	bcs	155d0 <__assert_fail@plt+0x41ec>
   155ac:	ldr	r0, [r5, #4]
   155b0:	cmp	r0, #0
   155b4:	beq	1559c <__assert_fail@plt+0x41b8>
   155b8:	ldr	r6, [r0, #4]
   155bc:	bl	19448 <__assert_fail@plt+0x8064>
   155c0:	cmp	r6, #0
   155c4:	mov	r0, r6
   155c8:	bne	155b8 <__assert_fail@plt+0x41d4>
   155cc:	b	1559c <__assert_fail@plt+0x41b8>
   155d0:	ldr	r0, [r4, #36]	; 0x24
   155d4:	cmp	r0, #0
   155d8:	beq	155f0 <__assert_fail@plt+0x420c>
   155dc:	ldr	r5, [r0, #4]
   155e0:	bl	19448 <__assert_fail@plt+0x8064>
   155e4:	cmp	r5, #0
   155e8:	mov	r0, r5
   155ec:	bne	155dc <__assert_fail@plt+0x41f8>
   155f0:	ldr	r0, [r4]
   155f4:	bl	19448 <__assert_fail@plt+0x8064>
   155f8:	mov	r0, r4
   155fc:	pop	{r4, r5, r6, sl, fp, lr}
   15600:	b	19448 <__assert_fail@plt+0x8064>
   15604:	push	{r4, r5, r6, sl, fp, lr}
   15608:	add	fp, sp, #16
   1560c:	sub	sp, sp, #40	; 0x28
   15610:	mov	r2, r1
   15614:	mov	r4, r0
   15618:	ldr	r1, [r0, #20]
   1561c:	mov	r0, r2
   15620:	bl	153fc <__assert_fail@plt+0x4018>
   15624:	mov	r5, #0
   15628:	cmp	r0, #0
   1562c:	beq	15708 <__assert_fail@plt+0x4324>
   15630:	mov	r6, r0
   15634:	ldr	r0, [r4, #8]
   15638:	cmp	r6, r0
   1563c:	bne	15648 <__assert_fail@plt+0x4264>
   15640:	mov	r5, #1
   15644:	b	15708 <__assert_fail@plt+0x4324>
   15648:	mov	r0, r6
   1564c:	mov	r1, #8
   15650:	bl	18a20 <__assert_fail@plt+0x763c>
   15654:	str	r0, [sp]
   15658:	cmp	r0, #0
   1565c:	beq	15708 <__assert_fail@plt+0x4324>
   15660:	str	r6, [sp, #8]
   15664:	mov	r0, #0
   15668:	str	r0, [sp, #12]
   1566c:	str	r0, [sp, #16]
   15670:	ldr	r0, [sp]
   15674:	add	r0, r0, r6, lsl #3
   15678:	str	r0, [sp, #4]
   1567c:	add	r6, r4, #20
   15680:	ldm	r6, {r0, r1, r2, r3, r6}
   15684:	add	ip, sp, #20
   15688:	stm	ip, {r0, r1, r2, r3, r6}
   1568c:	mov	r0, sp
   15690:	mov	r1, r4
   15694:	mov	r2, #0
   15698:	bl	15718 <__assert_fail@plt+0x4334>
   1569c:	cmp	r0, #0
   156a0:	beq	156c4 <__assert_fail@plt+0x42e0>
   156a4:	ldr	r0, [r4]
   156a8:	bl	19448 <__assert_fail@plt+0x8064>
   156ac:	ldm	sp, {r0, r1, r2, r3}
   156b0:	stm	r4, {r0, r1, r2, r3}
   156b4:	ldr	r0, [sp, #36]	; 0x24
   156b8:	str	r0, [r4, #36]	; 0x24
   156bc:	mov	r5, #1
   156c0:	b	15708 <__assert_fail@plt+0x4324>
   156c4:	ldr	r0, [sp, #36]	; 0x24
   156c8:	str	r0, [r4, #36]	; 0x24
   156cc:	mov	r1, sp
   156d0:	mov	r0, r4
   156d4:	mov	r2, #1
   156d8:	bl	15718 <__assert_fail@plt+0x4334>
   156dc:	cmp	r0, #0
   156e0:	beq	15714 <__assert_fail@plt+0x4330>
   156e4:	mov	r1, sp
   156e8:	mov	r5, #0
   156ec:	mov	r0, r4
   156f0:	mov	r2, #0
   156f4:	bl	15718 <__assert_fail@plt+0x4334>
   156f8:	cmp	r0, #0
   156fc:	beq	15714 <__assert_fail@plt+0x4330>
   15700:	ldr	r0, [sp]
   15704:	bl	19448 <__assert_fail@plt+0x8064>
   15708:	mov	r0, r5
   1570c:	sub	sp, fp, #16
   15710:	pop	{r4, r5, r6, sl, fp, pc}
   15714:	bl	113b4 <abort@plt>
   15718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1571c:	add	fp, sp, #28
   15720:	sub	sp, sp, #4
   15724:	mov	r7, r0
   15728:	ldr	r6, [r1]
   1572c:	ldr	r0, [r1, #4]
   15730:	cmp	r6, r0
   15734:	bcs	15838 <__assert_fail@plt+0x4454>
   15738:	mov	r9, r2
   1573c:	mov	sl, r1
   15740:	ldr	r0, [r6]
   15744:	cmp	r0, #0
   15748:	beq	15828 <__assert_fail@plt+0x4444>
   1574c:	ldr	r4, [r6, #4]
   15750:	cmp	r4, #0
   15754:	beq	157b0 <__assert_fail@plt+0x43cc>
   15758:	ldr	r5, [r4]
   1575c:	mov	r0, r7
   15760:	mov	r1, r5
   15764:	bl	1501c <__assert_fail@plt+0x3c38>
   15768:	ldr	r1, [r0]
   1576c:	ldr	r8, [r4, #4]
   15770:	cmp	r1, #0
   15774:	beq	15788 <__assert_fail@plt+0x43a4>
   15778:	ldr	r1, [r0, #4]
   1577c:	str	r1, [r4, #4]
   15780:	str	r4, [r0, #4]
   15784:	b	157a4 <__assert_fail@plt+0x43c0>
   15788:	str	r5, [r0]
   1578c:	ldr	r0, [r7, #12]
   15790:	add	r0, r0, #1
   15794:	str	r0, [r7, #12]
   15798:	mov	r0, r7
   1579c:	mov	r1, r4
   157a0:	bl	15cc0 <__assert_fail@plt+0x48dc>
   157a4:	cmp	r8, #0
   157a8:	mov	r4, r8
   157ac:	bne	15758 <__assert_fail@plt+0x4374>
   157b0:	mov	r0, #0
   157b4:	str	r0, [r6, #4]
   157b8:	cmp	r9, #0
   157bc:	bne	15828 <__assert_fail@plt+0x4444>
   157c0:	ldr	r4, [r6]
   157c4:	mov	r0, r7
   157c8:	mov	r1, r4
   157cc:	bl	1501c <__assert_fail@plt+0x3c38>
   157d0:	mov	r5, r0
   157d4:	ldr	r0, [r0]
   157d8:	cmp	r0, #0
   157dc:	beq	15804 <__assert_fail@plt+0x4420>
   157e0:	mov	r0, r7
   157e4:	bl	15aa4 <__assert_fail@plt+0x46c0>
   157e8:	cmp	r0, #0
   157ec:	beq	15844 <__assert_fail@plt+0x4460>
   157f0:	str	r4, [r0]
   157f4:	ldr	r1, [r5, #4]
   157f8:	str	r1, [r0, #4]
   157fc:	str	r0, [r5, #4]
   15800:	b	15814 <__assert_fail@plt+0x4430>
   15804:	str	r4, [r5]
   15808:	ldr	r0, [r7, #12]
   1580c:	add	r0, r0, #1
   15810:	str	r0, [r7, #12]
   15814:	mov	r0, #0
   15818:	str	r0, [r6]
   1581c:	ldr	r0, [sl, #12]
   15820:	sub	r0, r0, #1
   15824:	str	r0, [sl, #12]
   15828:	add	r6, r6, #8
   1582c:	ldr	r0, [sl, #4]
   15830:	cmp	r6, r0
   15834:	bcc	15740 <__assert_fail@plt+0x435c>
   15838:	mov	r0, #1
   1583c:	sub	sp, fp, #28
   15840:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15844:	mov	r0, #0
   15848:	sub	sp, fp, #28
   1584c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15850:	push	{r4, r5, r6, r7, fp, lr}
   15854:	add	fp, sp, #16
   15858:	sub	sp, sp, #8
   1585c:	cmp	r1, #0
   15860:	beq	159c0 <__assert_fail@plt+0x45dc>
   15864:	mov	r7, r2
   15868:	mov	r5, r1
   1586c:	mov	r4, r0
   15870:	add	r2, sp, #4
   15874:	mov	r6, #0
   15878:	mov	r3, #0
   1587c:	bl	159c8 <__assert_fail@plt+0x45e4>
   15880:	cmp	r0, #0
   15884:	beq	15894 <__assert_fail@plt+0x44b0>
   15888:	cmp	r7, #0
   1588c:	strne	r0, [r7]
   15890:	b	159b4 <__assert_fail@plt+0x45d0>
   15894:	vldr	s0, [r4, #8]
   15898:	vldr	s2, [r4, #12]
   1589c:	ldr	r0, [r4, #20]
   158a0:	vldr	s4, [r0, #8]
   158a4:	vcvt.f32.u32	s0, s0
   158a8:	vcvt.f32.u32	s2, s2
   158ac:	vmul.f32	s0, s4, s0
   158b0:	vcmpe.f32	s0, s2
   158b4:	vmrs	APSR_nzcv, fpscr
   158b8:	bpl	1594c <__assert_fail@plt+0x4568>
   158bc:	mov	r0, r4
   158c0:	bl	15350 <__assert_fail@plt+0x3f6c>
   158c4:	vldr	s0, [r4, #8]
   158c8:	vldr	s4, [r4, #12]
   158cc:	ldr	r0, [r4, #20]
   158d0:	vcvt.f32.u32	s2, s0
   158d4:	vldr	s0, [r0, #8]
   158d8:	vcvt.f32.u32	s4, s4
   158dc:	vmul.f32	s6, s0, s2
   158e0:	vcmpe.f32	s6, s4
   158e4:	vmrs	APSR_nzcv, fpscr
   158e8:	bpl	1594c <__assert_fail@plt+0x4568>
   158ec:	vldr	s4, [r0, #12]
   158f0:	vmul.f32	s2, s4, s2
   158f4:	ldrb	r0, [r0, #16]
   158f8:	vmul.f32	s0, s0, s2
   158fc:	mvn	r6, #0
   15900:	vldr	s4, [pc, #188]	; 159c4 <__assert_fail@plt+0x45e0>
   15904:	cmp	r0, #0
   15908:	vseleq.f32	s0, s0, s2
   1590c:	vcmpe.f32	s0, s4
   15910:	vmrs	APSR_nzcv, fpscr
   15914:	bge	159b4 <__assert_fail@plt+0x45d0>
   15918:	vcvt.u32.f32	s0, s0
   1591c:	vmov	r1, s0
   15920:	mov	r0, r4
   15924:	bl	15604 <__assert_fail@plt+0x4220>
   15928:	cmp	r0, #0
   1592c:	beq	159b4 <__assert_fail@plt+0x45d0>
   15930:	add	r2, sp, #4
   15934:	mov	r0, r4
   15938:	mov	r1, r5
   1593c:	mov	r3, #0
   15940:	bl	159c8 <__assert_fail@plt+0x45e4>
   15944:	cmp	r0, #0
   15948:	bne	159c0 <__assert_fail@plt+0x45dc>
   1594c:	ldr	r6, [sp, #4]
   15950:	ldr	r0, [r6]
   15954:	cmp	r0, #0
   15958:	beq	1598c <__assert_fail@plt+0x45a8>
   1595c:	mov	r0, r4
   15960:	bl	15aa4 <__assert_fail@plt+0x46c0>
   15964:	cmp	r0, #0
   15968:	beq	159b0 <__assert_fail@plt+0x45cc>
   1596c:	str	r5, [r0]
   15970:	ldr	r1, [r6, #4]
   15974:	str	r1, [r0, #4]
   15978:	str	r0, [r6, #4]
   1597c:	ldr	r0, [r4, #16]
   15980:	add	r0, r0, #1
   15984:	str	r0, [r4, #16]
   15988:	b	159a8 <__assert_fail@plt+0x45c4>
   1598c:	str	r5, [r6]
   15990:	ldr	r0, [r4, #12]
   15994:	ldr	r1, [r4, #16]
   15998:	add	r1, r1, #1
   1599c:	add	r0, r0, #1
   159a0:	str	r0, [r4, #12]
   159a4:	str	r1, [r4, #16]
   159a8:	mov	r6, #1
   159ac:	b	159b4 <__assert_fail@plt+0x45d0>
   159b0:	mvn	r6, #0
   159b4:	mov	r0, r6
   159b8:	sub	sp, fp, #16
   159bc:	pop	{r4, r5, r6, r7, fp, pc}
   159c0:	bl	113b4 <abort@plt>
   159c4:	svcmi	0x00800000
   159c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   159cc:	add	fp, sp, #24
   159d0:	mov	r8, r3
   159d4:	mov	r4, r2
   159d8:	mov	r7, r1
   159dc:	mov	r5, r0
   159e0:	bl	1501c <__assert_fail@plt+0x3c38>
   159e4:	str	r0, [r4]
   159e8:	ldr	r1, [r0]
   159ec:	mov	r4, #0
   159f0:	cmp	r1, #0
   159f4:	beq	15a9c <__assert_fail@plt+0x46b8>
   159f8:	mov	r6, r0
   159fc:	cmp	r1, r7
   15a00:	beq	15a18 <__assert_fail@plt+0x4634>
   15a04:	ldr	r2, [r5, #28]
   15a08:	mov	r0, r7
   15a0c:	blx	r2
   15a10:	cmp	r0, #0
   15a14:	beq	15a40 <__assert_fail@plt+0x465c>
   15a18:	ldr	r4, [r6]
   15a1c:	cmp	r8, #0
   15a20:	beq	15a9c <__assert_fail@plt+0x46b8>
   15a24:	ldr	r1, [r6, #4]
   15a28:	cmp	r1, #0
   15a2c:	beq	15a94 <__assert_fail@plt+0x46b0>
   15a30:	ldm	r1, {r0, r2}
   15a34:	stm	r6, {r0, r2}
   15a38:	b	15a84 <__assert_fail@plt+0x46a0>
   15a3c:	ldr	r6, [r6]
   15a40:	ldr	r0, [r6, #4]!
   15a44:	cmp	r0, #0
   15a48:	beq	15a9c <__assert_fail@plt+0x46b8>
   15a4c:	ldr	r1, [r0]
   15a50:	cmp	r1, r7
   15a54:	beq	15a6c <__assert_fail@plt+0x4688>
   15a58:	ldr	r2, [r5, #28]
   15a5c:	mov	r0, r7
   15a60:	blx	r2
   15a64:	cmp	r0, #0
   15a68:	beq	15a3c <__assert_fail@plt+0x4658>
   15a6c:	ldr	r1, [r6]
   15a70:	ldr	r4, [r1]
   15a74:	cmp	r8, #0
   15a78:	beq	15a9c <__assert_fail@plt+0x46b8>
   15a7c:	ldr	r0, [r1, #4]
   15a80:	str	r0, [r6]
   15a84:	mov	r0, r5
   15a88:	bl	15cc0 <__assert_fail@plt+0x48dc>
   15a8c:	mov	r0, r4
   15a90:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15a94:	mov	r0, #0
   15a98:	str	r0, [r6]
   15a9c:	mov	r0, r4
   15aa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15aa4:	mov	r1, r0
   15aa8:	ldr	r0, [r0, #36]	; 0x24
   15aac:	cmp	r0, #0
   15ab0:	ldrne	r2, [r0, #4]
   15ab4:	strne	r2, [r1, #36]	; 0x24
   15ab8:	bxne	lr
   15abc:	push	{fp, lr}
   15ac0:	mov	fp, sp
   15ac4:	mov	r0, #8
   15ac8:	bl	18a74 <__assert_fail@plt+0x7690>
   15acc:	pop	{fp, pc}
   15ad0:	push	{r4, sl, fp, lr}
   15ad4:	add	fp, sp, #8
   15ad8:	sub	sp, sp, #8
   15adc:	mov	r4, r1
   15ae0:	add	r2, sp, #4
   15ae4:	bl	15850 <__assert_fail@plt+0x446c>
   15ae8:	cmn	r0, #1
   15aec:	beq	15b00 <__assert_fail@plt+0x471c>
   15af0:	ldr	r1, [sp, #4]
   15af4:	cmp	r0, #0
   15af8:	moveq	r4, r1
   15afc:	b	15b04 <__assert_fail@plt+0x4720>
   15b00:	mov	r4, #0
   15b04:	mov	r0, r4
   15b08:	sub	sp, fp, #8
   15b0c:	pop	{r4, sl, fp, pc}
   15b10:	push	{r4, r5, r6, sl, fp, lr}
   15b14:	add	fp, sp, #16
   15b18:	sub	sp, sp, #8
   15b1c:	mov	r4, r0
   15b20:	add	r2, sp, #4
   15b24:	mov	r3, #1
   15b28:	bl	159c8 <__assert_fail@plt+0x45e4>
   15b2c:	mov	r5, r0
   15b30:	cmp	r0, #0
   15b34:	beq	15c10 <__assert_fail@plt+0x482c>
   15b38:	ldr	r0, [r4, #16]
   15b3c:	sub	r0, r0, #1
   15b40:	str	r0, [r4, #16]
   15b44:	ldr	r0, [sp, #4]
   15b48:	ldr	r0, [r0]
   15b4c:	cmp	r0, #0
   15b50:	bne	15c10 <__assert_fail@plt+0x482c>
   15b54:	ldr	r0, [r4, #12]
   15b58:	sub	r0, r0, #1
   15b5c:	vldr	s0, [r4, #8]
   15b60:	str	r0, [r4, #12]
   15b64:	ldr	r1, [r4, #20]
   15b68:	vldr	s2, [r1]
   15b6c:	vcvt.f32.u32	s0, s0
   15b70:	vmov	s4, r0
   15b74:	vcvt.f32.u32	s4, s4
   15b78:	vmul.f32	s0, s2, s0
   15b7c:	vcmpe.f32	s0, s4
   15b80:	vmrs	APSR_nzcv, fpscr
   15b84:	ble	15c10 <__assert_fail@plt+0x482c>
   15b88:	mov	r0, r4
   15b8c:	bl	15350 <__assert_fail@plt+0x3f6c>
   15b90:	vldr	s0, [r4, #8]
   15b94:	vldr	s2, [r4, #12]
   15b98:	ldr	r0, [r4, #20]
   15b9c:	vcvt.f32.u32	s0, s0
   15ba0:	vldr	s4, [r0]
   15ba4:	vcvt.f32.u32	s2, s2
   15ba8:	vmul.f32	s4, s4, s0
   15bac:	vcmpe.f32	s4, s2
   15bb0:	vmrs	APSR_nzcv, fpscr
   15bb4:	ble	15c10 <__assert_fail@plt+0x482c>
   15bb8:	vldr	s2, [r0, #4]
   15bbc:	ldrb	r1, [r0, #16]
   15bc0:	vmul.f32	s0, s2, s0
   15bc4:	cmp	r1, #0
   15bc8:	vldreq	s2, [r0, #8]
   15bcc:	vmuleq.f32	s0, s0, s2
   15bd0:	vcvt.u32.f32	s0, s0
   15bd4:	vmov	r1, s0
   15bd8:	mov	r0, r4
   15bdc:	bl	15604 <__assert_fail@plt+0x4220>
   15be0:	cmp	r0, #0
   15be4:	bne	15c10 <__assert_fail@plt+0x482c>
   15be8:	ldr	r0, [r4, #36]	; 0x24
   15bec:	cmp	r0, #0
   15bf0:	beq	15c08 <__assert_fail@plt+0x4824>
   15bf4:	ldr	r6, [r0, #4]
   15bf8:	bl	19448 <__assert_fail@plt+0x8064>
   15bfc:	cmp	r6, #0
   15c00:	mov	r0, r6
   15c04:	bne	15bf4 <__assert_fail@plt+0x4810>
   15c08:	mov	r0, #0
   15c0c:	str	r0, [r4, #36]	; 0x24
   15c10:	mov	r0, r5
   15c14:	sub	sp, fp, #16
   15c18:	pop	{r4, r5, r6, sl, fp, pc}
   15c1c:	b	15b10 <__assert_fail@plt+0x472c>
   15c20:	push	{r4, r5, fp, lr}
   15c24:	add	fp, sp, #8
   15c28:	cmp	r0, #10
   15c2c:	movls	r0, #10
   15c30:	orr	r5, r0, #1
   15c34:	mvn	r4, #0
   15c38:	cmn	r5, #1
   15c3c:	bne	15c54 <__assert_fail@plt+0x4870>
   15c40:	mov	r0, r4
   15c44:	pop	{r4, r5, fp, pc}
   15c48:	add	r5, r5, #2
   15c4c:	cmn	r5, #1
   15c50:	beq	15c40 <__assert_fail@plt+0x485c>
   15c54:	mov	r0, r5
   15c58:	bl	15c70 <__assert_fail@plt+0x488c>
   15c5c:	cmp	r0, #0
   15c60:	beq	15c48 <__assert_fail@plt+0x4864>
   15c64:	mov	r4, r5
   15c68:	mov	r0, r4
   15c6c:	pop	{r4, r5, fp, pc}
   15c70:	mov	ip, #3
   15c74:	cmp	r0, #10
   15c78:	bcc	15cac <__assert_fail@plt+0x48c8>
   15c7c:	mov	ip, #3
   15c80:	mov	r2, #9
   15c84:	mov	r3, #16
   15c88:	udiv	r1, r0, ip
   15c8c:	mls	r1, r1, ip, r0
   15c90:	cmp	r1, #0
   15c94:	beq	15cac <__assert_fail@plt+0x48c8>
   15c98:	add	r2, r3, r2
   15c9c:	add	r3, r3, #8
   15ca0:	add	ip, ip, #2
   15ca4:	cmp	r2, r0
   15ca8:	bcc	15c88 <__assert_fail@plt+0x48a4>
   15cac:	udiv	r1, r0, ip
   15cb0:	mls	r0, r1, ip, r0
   15cb4:	cmp	r0, #0
   15cb8:	movwne	r0, #1
   15cbc:	bx	lr
   15cc0:	mov	r2, #0
   15cc4:	str	r2, [r1]
   15cc8:	ldr	r2, [r0, #36]	; 0x24
   15ccc:	str	r2, [r1, #4]
   15cd0:	str	r1, [r0, #36]	; 0x24
   15cd4:	bx	lr
   15cd8:	mov	r2, #0
   15cdc:	mov	r3, #1
   15ce0:	strb	r3, [r0, #28]
   15ce4:	str	r2, [r0, #20]
   15ce8:	str	r2, [r0, #24]
   15cec:	str	r1, [r0, r2, lsl #2]
   15cf0:	add	r2, r2, #1
   15cf4:	cmp	r2, #4
   15cf8:	bne	15cec <__assert_fail@plt+0x4908>
   15cfc:	str	r1, [r0, #16]
   15d00:	bx	lr
   15d04:	ldrb	r0, [r0, #28]
   15d08:	bx	lr
   15d0c:	ldr	r2, [r0, #20]
   15d10:	ldrb	r3, [r0, #28]
   15d14:	eor	r3, r3, #1
   15d18:	add	r2, r2, r3
   15d1c:	and	r2, r2, #3
   15d20:	ldr	ip, [r0, r2, lsl #2]
   15d24:	str	r1, [r0, r2, lsl #2]
   15d28:	str	r2, [r0, #20]
   15d2c:	ldr	r1, [r0, #24]
   15d30:	cmp	r2, r1
   15d34:	addeq	r1, r1, r3
   15d38:	andeq	r1, r1, #3
   15d3c:	streq	r1, [r0, #24]
   15d40:	mov	r1, #0
   15d44:	strb	r1, [r0, #28]
   15d48:	mov	r0, ip
   15d4c:	bx	lr
   15d50:	push	{r4, sl, fp, lr}
   15d54:	add	fp, sp, #8
   15d58:	mov	r4, r0
   15d5c:	bl	15d04 <__assert_fail@plt+0x4920>
   15d60:	cmp	r0, #0
   15d64:	bne	15da0 <__assert_fail@plt+0x49bc>
   15d68:	ldr	r1, [r4, #16]
   15d6c:	ldr	r2, [r4, #20]
   15d70:	ldr	r0, [r4, r2, lsl #2]
   15d74:	str	r1, [r4, r2, lsl #2]
   15d78:	ldr	r1, [r4, #20]
   15d7c:	ldr	r2, [r4, #24]
   15d80:	cmp	r1, r2
   15d84:	moveq	r1, #1
   15d88:	strbeq	r1, [r4, #28]
   15d8c:	popeq	{r4, sl, fp, pc}
   15d90:	sub	r1, r1, #1
   15d94:	and	r1, r1, #3
   15d98:	str	r1, [r4, #20]
   15d9c:	pop	{r4, sl, fp, pc}
   15da0:	bl	113b4 <abort@plt>
   15da4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15da8:	add	fp, sp, #28
   15dac:	sub	sp, sp, #4
   15db0:	mov	r5, r0
   15db4:	ldrb	r7, [r0]
   15db8:	and	r0, r7, #248	; 0xf8
   15dbc:	cmp	r0, #48	; 0x30
   15dc0:	bne	15e2c <__assert_fail@plt+0x4a48>
   15dc4:	mov	r4, #0
   15dc8:	mov	r0, #0
   15dcc:	mov	r1, r5
   15dd0:	mov	r6, r5
   15dd4:	ldrb	r2, [r6], #1
   15dd8:	add	r0, r2, r0, lsl #3
   15ddc:	sub	r0, r0, #48	; 0x30
   15de0:	cmp	r4, r0, lsr #12
   15de4:	bne	161c8 <__assert_fail@plt+0x4de4>
   15de8:	ldrb	r2, [r1, #1]
   15dec:	and	r1, r2, #248	; 0xf8
   15df0:	cmp	r1, #48	; 0x30
   15df4:	mov	r1, r6
   15df8:	beq	15dd4 <__assert_fail@plt+0x49f0>
   15dfc:	cmp	r2, #0
   15e00:	bne	161c8 <__assert_fail@plt+0x4de4>
   15e04:	bl	161e4 <__assert_fail@plt+0x4e00>
   15e08:	sub	r2, r6, r5
   15e0c:	and	r3, r0, #3072	; 0xc00
   15e10:	movw	r7, #1023	; 0x3ff
   15e14:	movw	r1, #4095	; 0xfff
   15e18:	cmp	r2, #5
   15e1c:	orrlt	r1, r3, r7
   15e20:	sub	sp, fp, #28
   15e24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e28:	b	161e8 <__assert_fail@plt+0x4e04>
   15e2c:	mov	r1, #1
   15e30:	mvn	r2, #42	; 0x2a
   15e34:	movw	r8, #5
   15e38:	movt	r8, #4
   15e3c:	mov	r3, #1
   15e40:	mov	r0, #1
   15e44:	b	15e54 <__assert_fail@plt+0x4a70>
   15e48:	add	r0, r6, r0
   15e4c:	ldrb	r7, [r5, r3]
   15e50:	add	r3, r3, #1
   15e54:	uxtab	r6, r2, r7
   15e58:	uxtb	r7, r7
   15e5c:	cmp	r6, #18
   15e60:	bhi	15e70 <__assert_fail@plt+0x4a8c>
   15e64:	tst	r8, r1, lsl r6
   15e68:	mov	r6, #1
   15e6c:	bne	15e48 <__assert_fail@plt+0x4a64>
   15e70:	cmp	r7, #0
   15e74:	beq	15e80 <__assert_fail@plt+0x4a9c>
   15e78:	mov	r6, #0
   15e7c:	b	15e48 <__assert_fail@plt+0x4a64>
   15e80:	mov	r1, #16
   15e84:	bl	1864c <__assert_fail@plt+0x7268>
   15e88:	mov	r4, r0
   15e8c:	mov	r9, #0
   15e90:	mov	ip, #1
   15e94:	mvn	lr, #87	; 0x57
   15e98:	mov	sl, #0
   15e9c:	b	15ea8 <__assert_fail@plt+0x4ac4>
   15ea0:	add	r5, r5, #1
   15ea4:	mov	sl, r0
   15ea8:	mov	r1, #0
   15eac:	b	15eb8 <__assert_fail@plt+0x4ad4>
   15eb0:	orr	r1, r1, r0
   15eb4:	add	r5, r5, #1
   15eb8:	ldrb	r0, [r5]
   15ebc:	sub	r2, r0, #97	; 0x61
   15ec0:	cmp	r2, #20
   15ec4:	bhi	15f40 <__assert_fail@plt+0x4b5c>
   15ec8:	mov	r0, #2496	; 0x9c0
   15ecc:	add	r3, pc, #0
   15ed0:	ldr	pc, [r3, r2, lsl #2]
   15ed4:	andeq	r5, r1, r8, lsr #30
   15ed8:			; <UNDEFINED> instruction: 0x000161bc
   15edc:			; <UNDEFINED> instruction: 0x000161bc
   15ee0:			; <UNDEFINED> instruction: 0x000161bc
   15ee4:			; <UNDEFINED> instruction: 0x000161bc
   15ee8:			; <UNDEFINED> instruction: 0x000161bc
   15eec:	andeq	r5, r1, r0, lsr pc
   15ef0:			; <UNDEFINED> instruction: 0x000161bc
   15ef4:			; <UNDEFINED> instruction: 0x000161bc
   15ef8:			; <UNDEFINED> instruction: 0x000161bc
   15efc:			; <UNDEFINED> instruction: 0x000161bc
   15f00:			; <UNDEFINED> instruction: 0x000161bc
   15f04:			; <UNDEFINED> instruction: 0x000161bc
   15f08:			; <UNDEFINED> instruction: 0x000161bc
   15f0c:	andeq	r5, r1, r8, lsr pc
   15f10:			; <UNDEFINED> instruction: 0x000161bc
   15f14:			; <UNDEFINED> instruction: 0x000161bc
   15f18:			; <UNDEFINED> instruction: 0x000161bc
   15f1c:			; <UNDEFINED> instruction: 0x000161bc
   15f20:			; <UNDEFINED> instruction: 0x000161bc
   15f24:			; <UNDEFINED> instruction: 0x00015eb0
   15f28:	movw	r0, #4095	; 0xfff
   15f2c:	b	15eb0 <__assert_fail@plt+0x4acc>
   15f30:	movw	r0, #1080	; 0x438
   15f34:	b	15eb0 <__assert_fail@plt+0x4acc>
   15f38:	movw	r0, #519	; 0x207
   15f3c:	b	15eb0 <__assert_fail@plt+0x4acc>
   15f40:	sub	r0, r0, #43	; 0x2b
   15f44:	cmp	r0, #18
   15f48:	bhi	161bc <__assert_fail@plt+0x4dd8>
   15f4c:	tst	r8, ip, lsl r0
   15f50:	beq	161bc <__assert_fail@plt+0x4dd8>
   15f54:	ldrb	r6, [r5]
   15f58:	mov	r2, r5
   15f5c:	ldrb	r7, [r2, #1]!
   15f60:	sub	r0, r7, #48	; 0x30
   15f64:	cmp	r0, #8
   15f68:	bcs	15fd0 <__assert_fail@plt+0x4bec>
   15f6c:	mov	r0, #0
   15f70:	mov	r5, r2
   15f74:	ldrb	r3, [r5], #1
   15f78:	add	r0, r3, r0, lsl #3
   15f7c:	sub	r0, r0, #48	; 0x30
   15f80:	cmp	r9, r0, lsr #12
   15f84:	bne	161bc <__assert_fail@plt+0x4dd8>
   15f88:	ldrb	r3, [r2, #1]
   15f8c:	and	r2, r3, #248	; 0xf8
   15f90:	cmp	r2, #48	; 0x30
   15f94:	mov	r2, r5
   15f98:	beq	15f74 <__assert_fail@plt+0x4b90>
   15f9c:	cmp	r1, #0
   15fa0:	bne	161bc <__assert_fail@plt+0x4dd8>
   15fa4:	cmp	r3, #44	; 0x2c
   15fa8:	cmpne	r3, #0
   15fac:	bne	161bc <__assert_fail@plt+0x4dd8>
   15fb0:	str	r6, [sp]
   15fb4:	bl	161e4 <__assert_fail@plt+0x4e00>
   15fb8:	mvn	lr, #87	; 0x57
   15fbc:	mov	ip, #1
   15fc0:	mov	r6, #1
   15fc4:	movw	r1, #4095	; 0xfff
   15fc8:	movw	r3, #4095	; 0xfff
   15fcc:	b	16110 <__assert_fail@plt+0x4d2c>
   15fd0:	cmp	r7, #103	; 0x67
   15fd4:	str	r6, [sp]
   15fd8:	beq	16000 <__assert_fail@plt+0x4c1c>
   15fdc:	cmp	r7, #111	; 0x6f
   15fe0:	beq	16014 <__assert_fail@plt+0x4c30>
   15fe4:	cmp	r7, #117	; 0x75
   15fe8:	bne	16028 <__assert_fail@plt+0x4c44>
   15fec:	add	r5, r5, #2
   15ff0:	mov	r6, #3
   15ff4:	mov	r3, #0
   15ff8:	mov	r0, #448	; 0x1c0
   15ffc:	b	16110 <__assert_fail@plt+0x4d2c>
   16000:	add	r5, r5, #2
   16004:	mov	r6, #3
   16008:	mov	r3, #0
   1600c:	mov	r0, #56	; 0x38
   16010:	b	16110 <__assert_fail@plt+0x4d2c>
   16014:	add	r5, r5, #2
   16018:	mov	r6, #3
   1601c:	mov	r3, #0
   16020:	mov	r0, #7
   16024:	b	16110 <__assert_fail@plt+0x4d2c>
   16028:	add	r3, r5, #2
   1602c:	mov	r2, #1
   16030:	mov	r0, #0
   16034:	b	1603c <__assert_fail@plt+0x4c58>
   16038:	ldrb	r7, [r3], #1
   1603c:	mov	r6, r2
   16040:	uxtab	r7, lr, r7
   16044:	cmp	r7, #32
   16048:	bhi	16108 <__assert_fail@plt+0x4d24>
   1604c:	mov	r2, #2
   16050:	add	r5, pc, #0
   16054:	ldr	pc, [r5, r7, lsl #2]
   16058:	andeq	r6, r1, r8, lsr r0
   1605c:	andeq	r6, r1, r8, lsl #2
   16060:	andeq	r6, r1, r8, lsl #2
   16064:	andeq	r6, r1, r8, lsl #2
   16068:	andeq	r6, r1, r8, lsl #2
   1606c:	andeq	r6, r1, r8, lsl #2
   16070:	andeq	r6, r1, r8, lsl #2
   16074:	andeq	r6, r1, r8, lsl #2
   16078:	andeq	r6, r1, r8, lsl #2
   1607c:	andeq	r6, r1, r8, lsl #2
   16080:	andeq	r6, r1, r8, lsl #2
   16084:	andeq	r6, r1, r8, lsl #2
   16088:	andeq	r6, r1, r8, lsl #2
   1608c:	andeq	r6, r1, r8, lsl #2
   16090:	andeq	r6, r1, r8, lsl #2
   16094:	andeq	r6, r1, r8, lsl #2
   16098:	andeq	r6, r1, r8, lsl #2
   1609c:	andeq	r6, r1, r8, lsl #2
   160a0:	andeq	r6, r1, r8, lsl #2
   160a4:	andeq	r6, r1, r8, lsl #2
   160a8:	andeq	r6, r1, r8, lsl #2
   160ac:	andeq	r6, r1, r8, lsl #2
   160b0:	andeq	r6, r1, r8, lsl #2
   160b4:	andeq	r6, r1, r8, lsl #2
   160b8:	andeq	r6, r1, r8, lsl #2
   160bc:	andeq	r6, r1, r8, lsl #2
   160c0:	ldrdeq	r6, [r1], -ip
   160c4:	andeq	r6, r1, r4, ror #1
   160c8:	andeq	r6, r1, ip, ror #1
   160cc:	andeq	r6, r1, r8, lsl #2
   160d0:	andeq	r6, r1, r8, lsl #2
   160d4:	strdeq	r6, [r1], -r4
   160d8:	strdeq	r6, [r1], -ip
   160dc:	orr	r0, r0, #292	; 0x124
   160e0:	b	16100 <__assert_fail@plt+0x4d1c>
   160e4:	orr	r0, r0, #3072	; 0xc00
   160e8:	b	16100 <__assert_fail@plt+0x4d1c>
   160ec:	orr	r0, r0, #512	; 0x200
   160f0:	b	16100 <__assert_fail@plt+0x4d1c>
   160f4:	orr	r0, r0, #146	; 0x92
   160f8:	b	16100 <__assert_fail@plt+0x4d1c>
   160fc:	orr	r0, r0, #73	; 0x49
   16100:	mov	r2, r6
   16104:	b	16038 <__assert_fail@plt+0x4c54>
   16108:	sub	r5, r3, #1
   1610c:	mov	r3, #0
   16110:	mov	r2, r4
   16114:	ldr	r7, [sp]
   16118:	strb	r7, [r2, sl, lsl #4]!
   1611c:	strb	r6, [r2, #1]
   16120:	str	r1, [r2, #4]
   16124:	str	r0, [r2, #8]
   16128:	cmp	r3, #0
   1612c:	bne	1613c <__assert_fail@plt+0x4d58>
   16130:	cmp	r1, #0
   16134:	andne	r0, r0, r1
   16138:	mov	r3, r0
   1613c:	add	r0, sl, #1
   16140:	add	r2, r4, sl, lsl #4
   16144:	str	r3, [r2, #12]
   16148:	ldrb	r2, [r5]
   1614c:	sub	r2, r2, #43	; 0x2b
   16150:	cmp	r2, #18
   16154:	bhi	161b0 <__assert_fail@plt+0x4dcc>
   16158:	add	r3, pc, #4
   1615c:	mov	sl, r0
   16160:	ldr	pc, [r3, r2, lsl #2]
   16164:	andeq	r5, r1, r4, asr pc
   16168:	andeq	r5, r1, r0, lsr #29
   1616c:	andeq	r5, r1, r4, asr pc
   16170:			; <UNDEFINED> instruction: 0x000161b0
   16174:			; <UNDEFINED> instruction: 0x000161b0
   16178:			; <UNDEFINED> instruction: 0x000161b0
   1617c:			; <UNDEFINED> instruction: 0x000161b0
   16180:			; <UNDEFINED> instruction: 0x000161b0
   16184:			; <UNDEFINED> instruction: 0x000161b0
   16188:			; <UNDEFINED> instruction: 0x000161b0
   1618c:			; <UNDEFINED> instruction: 0x000161b0
   16190:			; <UNDEFINED> instruction: 0x000161b0
   16194:			; <UNDEFINED> instruction: 0x000161b0
   16198:			; <UNDEFINED> instruction: 0x000161b0
   1619c:			; <UNDEFINED> instruction: 0x000161b0
   161a0:			; <UNDEFINED> instruction: 0x000161b0
   161a4:			; <UNDEFINED> instruction: 0x000161b0
   161a8:			; <UNDEFINED> instruction: 0x000161b0
   161ac:	andeq	r5, r1, r4, asr pc
   161b0:	ldrb	r1, [r5]
   161b4:	cmp	r1, #0
   161b8:	beq	161d4 <__assert_fail@plt+0x4df0>
   161bc:	mov	r0, r4
   161c0:	bl	19448 <__assert_fail@plt+0x8064>
   161c4:	mov	r4, #0
   161c8:	mov	r0, r4
   161cc:	sub	sp, fp, #28
   161d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161d4:	add	r0, r4, r0, lsl #4
   161d8:	mov	r1, #0
   161dc:	strb	r1, [r0, #1]
   161e0:	b	161c8 <__assert_fail@plt+0x4de4>
   161e4:	bx	lr
   161e8:	push	{r4, r5, fp, lr}
   161ec:	add	fp, sp, #8
   161f0:	mov	r4, r1
   161f4:	mov	r5, r0
   161f8:	mov	r0, #32
   161fc:	bl	185b0 <__assert_fail@plt+0x71cc>
   16200:	movw	r1, #317	; 0x13d
   16204:	strh	r1, [r0]
   16208:	movw	r1, #4095	; 0xfff
   1620c:	stmib	r0, {r1, r5}
   16210:	str	r4, [r0, #12]
   16214:	mov	r1, #0
   16218:	strb	r1, [r0, #17]
   1621c:	pop	{r4, r5, fp, pc}
   16220:	push	{fp, lr}
   16224:	mov	fp, sp
   16228:	sub	sp, sp, #104	; 0x68
   1622c:	mov	r1, sp
   16230:	bl	19940 <__assert_fail@plt+0x855c>
   16234:	mov	r1, r0
   16238:	mov	r0, #0
   1623c:	cmp	r1, #0
   16240:	beq	1624c <__assert_fail@plt+0x4e68>
   16244:	mov	sp, fp
   16248:	pop	{fp, pc}
   1624c:	ldr	r0, [sp, #16]
   16250:	movw	r1, #4095	; 0xfff
   16254:	bl	161e8 <__assert_fail@plt+0x4e04>
   16258:	mov	sp, fp
   1625c:	pop	{fp, pc}
   16260:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16264:	add	fp, sp, #24
   16268:	bfc	r0, #12, #20
   1626c:	ldrb	r4, [r3, #1]
   16270:	ldr	ip, [fp, #8]
   16274:	cmp	r4, #0
   16278:	beq	16358 <__assert_fail@plt+0x4f74>
   1627c:	add	r3, r3, #8
   16280:	cmp	r1, #0
   16284:	mov	lr, r1
   16288:	movwne	lr, #3072	; 0xc00
   1628c:	mov	r9, #0
   16290:	movw	r8, #4095	; 0xfff
   16294:	mov	r5, r3
   16298:	ldr	r7, [r3, #-4]
   1629c:	ldr	r3, [r3]
   162a0:	ldr	r6, [r5, #4]
   162a4:	bic	r6, lr, r6
   162a8:	uxtb	r4, r4
   162ac:	cmp	r4, #2
   162b0:	beq	162dc <__assert_fail@plt+0x4ef8>
   162b4:	cmp	r4, #3
   162b8:	bne	162e8 <__assert_fail@plt+0x4f04>
   162bc:	and	r4, r3, r0
   162c0:	tst	r4, #146	; 0x92
   162c4:	mov	r3, r4
   162c8:	orrne	r3, r3, #146	; 0x92
   162cc:	tst	r4, #292	; 0x124
   162d0:	orrne	r3, r3, #292	; 0x124
   162d4:	tst	r4, #73	; 0x49
   162d8:	b	162e4 <__assert_fail@plt+0x4f00>
   162dc:	and	r4, r0, #73	; 0x49
   162e0:	orrs	r4, r4, r1
   162e4:	orrne	r3, r3, #73	; 0x49
   162e8:	cmp	r7, #0
   162ec:	mov	r4, r7
   162f0:	mvneq	r4, r2
   162f4:	bic	r4, r4, r6
   162f8:	and	r3, r4, r3
   162fc:	ldrb	r4, [r5, #-8]
   16300:	cmp	r4, #43	; 0x2b
   16304:	beq	16334 <__assert_fail@plt+0x4f50>
   16308:	cmp	r4, #45	; 0x2d
   1630c:	beq	1633c <__assert_fail@plt+0x4f58>
   16310:	cmp	r4, #61	; 0x3d
   16314:	bne	16344 <__assert_fail@plt+0x4f60>
   16318:	mvn	r4, r7
   1631c:	cmp	r7, #0
   16320:	orrne	r6, r6, r4
   16324:	and	r0, r6, r0
   16328:	orr	r0, r3, r0
   1632c:	bic	r3, r8, r6
   16330:	b	16340 <__assert_fail@plt+0x4f5c>
   16334:	orr	r0, r3, r0
   16338:	b	16340 <__assert_fail@plt+0x4f5c>
   1633c:	bic	r0, r0, r3
   16340:	orr	r9, r3, r9
   16344:	add	r3, r5, #16
   16348:	ldrb	r4, [r5, #9]
   1634c:	cmp	r4, #0
   16350:	bne	16294 <__assert_fail@plt+0x4eb0>
   16354:	b	1635c <__assert_fail@plt+0x4f78>
   16358:	mov	r9, #0
   1635c:	cmp	ip, #0
   16360:	strne	r9, [ip]
   16364:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16368:	sub	sp, sp, #4
   1636c:	push	{fp, lr}
   16370:	mov	fp, sp
   16374:	sub	sp, sp, #4
   16378:	str	r3, [fp, #8]
   1637c:	mov	r3, #0
   16380:	tst	r2, #64	; 0x40
   16384:	addne	r3, fp, #8
   16388:	addne	r3, r3, #4
   1638c:	strne	r3, [sp]
   16390:	ldrne	r3, [fp, #8]
   16394:	bl	11288 <openat64@plt>
   16398:	bl	180a8 <__assert_fail@plt+0x6cc4>
   1639c:	mov	sp, fp
   163a0:	pop	{fp, lr}
   163a4:	add	sp, sp, #4
   163a8:	bx	lr
   163ac:	push	{r4, r5, r6, sl, fp, lr}
   163b0:	add	fp, sp, #16
   163b4:	mov	r4, r3
   163b8:	orr	r2, r2, #18688	; 0x4900
   163bc:	orr	r2, r2, #524288	; 0x80000
   163c0:	bl	16368 <__assert_fail@plt+0x4f84>
   163c4:	mov	r5, r0
   163c8:	mov	r0, #0
   163cc:	cmp	r5, #0
   163d0:	poplt	{r4, r5, r6, sl, fp, pc}
   163d4:	mov	r0, r5
   163d8:	bl	11348 <fdopendir@plt>
   163dc:	cmp	r0, #0
   163e0:	strne	r5, [r4]
   163e4:	popne	{r4, r5, r6, sl, fp, pc}
   163e8:	bl	112a0 <__errno_location@plt>
   163ec:	mov	r4, r0
   163f0:	ldr	r6, [r0]
   163f4:	mov	r0, r5
   163f8:	bl	113c0 <close@plt>
   163fc:	str	r6, [r4]
   16400:	mov	r0, #0
   16404:	pop	{r4, r5, r6, sl, fp, pc}
   16408:	push	{r4, r5, fp, lr}
   1640c:	add	fp, sp, #8
   16410:	cmp	r0, #0
   16414:	beq	164a8 <__assert_fail@plt+0x50c4>
   16418:	mov	r4, r0
   1641c:	mov	r1, #47	; 0x2f
   16420:	bl	11324 <strrchr@plt>
   16424:	cmp	r0, #0
   16428:	mov	r5, r4
   1642c:	addne	r5, r0, #1
   16430:	sub	r0, r5, r4
   16434:	cmp	r0, #7
   16438:	blt	1648c <__assert_fail@plt+0x50a8>
   1643c:	sub	r0, r5, #7
   16440:	movw	r1, #42204	; 0xa4dc
   16444:	movt	r1, #1
   16448:	mov	r2, #7
   1644c:	bl	113a8 <strncmp@plt>
   16450:	cmp	r0, #0
   16454:	bne	1648c <__assert_fail@plt+0x50a8>
   16458:	movw	r1, #42212	; 0xa4e4
   1645c:	movt	r1, #1
   16460:	mov	r0, r5
   16464:	mov	r2, #3
   16468:	bl	113a8 <strncmp@plt>
   1646c:	cmp	r0, #0
   16470:	beq	1647c <__assert_fail@plt+0x5098>
   16474:	mov	r4, r5
   16478:	b	1648c <__assert_fail@plt+0x50a8>
   1647c:	add	r4, r5, #3
   16480:	movw	r0, #45416	; 0xb168
   16484:	movt	r0, #2
   16488:	str	r4, [r0]
   1648c:	movw	r0, #45420	; 0xb16c
   16490:	movt	r0, #2
   16494:	str	r4, [r0]
   16498:	movw	r0, #45492	; 0xb1b4
   1649c:	movt	r0, #2
   164a0:	str	r4, [r0]
   164a4:	pop	{r4, r5, fp, pc}
   164a8:	movw	r0, #45432	; 0xb178
   164ac:	movt	r0, #2
   164b0:	ldr	r3, [r0]
   164b4:	movw	r0, #42148	; 0xa4a4
   164b8:	movt	r0, #1
   164bc:	mov	r1, #55	; 0x37
   164c0:	mov	r2, #1
   164c4:	bl	111c8 <fwrite@plt>
   164c8:	bl	113b4 <abort@plt>
   164cc:	push	{r4, r5, r6, sl, fp, lr}
   164d0:	add	fp, sp, #16
   164d4:	mov	r4, r0
   164d8:	movw	r0, #45496	; 0xb1b8
   164dc:	movt	r0, #2
   164e0:	cmp	r4, #0
   164e4:	moveq	r4, r0
   164e8:	bl	112a0 <__errno_location@plt>
   164ec:	mov	r5, r0
   164f0:	ldr	r6, [r0]
   164f4:	mov	r0, r4
   164f8:	mov	r1, #48	; 0x30
   164fc:	bl	188a4 <__assert_fail@plt+0x74c0>
   16500:	str	r6, [r5]
   16504:	pop	{r4, r5, r6, sl, fp, pc}
   16508:	movw	r1, #45496	; 0xb1b8
   1650c:	movt	r1, #2
   16510:	cmp	r0, #0
   16514:	movne	r1, r0
   16518:	ldr	r0, [r1]
   1651c:	bx	lr
   16520:	movw	r2, #45496	; 0xb1b8
   16524:	movt	r2, #2
   16528:	cmp	r0, #0
   1652c:	movne	r2, r0
   16530:	str	r1, [r2]
   16534:	bx	lr
   16538:	movw	r3, #45496	; 0xb1b8
   1653c:	movt	r3, #2
   16540:	cmp	r0, #0
   16544:	movne	r3, r0
   16548:	ubfx	r0, r1, #5, #3
   1654c:	add	r0, r3, r0, lsl #2
   16550:	ldr	r3, [r0, #8]
   16554:	and	r1, r1, #31
   16558:	eor	r2, r2, r3, lsr r1
   1655c:	and	r2, r2, #1
   16560:	eor	r2, r3, r2, lsl r1
   16564:	str	r2, [r0, #8]
   16568:	mov	r0, #1
   1656c:	and	r0, r0, r3, lsr r1
   16570:	bx	lr
   16574:	movw	r2, #45496	; 0xb1b8
   16578:	movt	r2, #2
   1657c:	cmp	r0, #0
   16580:	movne	r2, r0
   16584:	ldr	r0, [r2, #4]
   16588:	str	r1, [r2, #4]
   1658c:	bx	lr
   16590:	movw	r3, #45496	; 0xb1b8
   16594:	movt	r3, #2
   16598:	cmp	r0, #0
   1659c:	movne	r3, r0
   165a0:	mov	r0, #10
   165a4:	str	r0, [r3]
   165a8:	cmp	r1, #0
   165ac:	cmpne	r2, #0
   165b0:	bne	165c0 <__assert_fail@plt+0x51dc>
   165b4:	push	{fp, lr}
   165b8:	mov	fp, sp
   165bc:	bl	113b4 <abort@plt>
   165c0:	str	r1, [r3, #40]	; 0x28
   165c4:	str	r2, [r3, #44]	; 0x2c
   165c8:	bx	lr
   165cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165d0:	add	fp, sp, #28
   165d4:	sub	sp, sp, #20
   165d8:	mov	r8, r3
   165dc:	mov	r9, r2
   165e0:	mov	sl, r1
   165e4:	mov	r7, r0
   165e8:	ldr	r0, [fp, #8]
   165ec:	movw	r5, #45496	; 0xb1b8
   165f0:	movt	r5, #2
   165f4:	cmp	r0, #0
   165f8:	movne	r5, r0
   165fc:	bl	112a0 <__errno_location@plt>
   16600:	mov	r4, r0
   16604:	ldm	r5, {r0, r1}
   16608:	ldr	r2, [r5, #40]	; 0x28
   1660c:	ldr	r3, [r5, #44]	; 0x2c
   16610:	ldr	r6, [r4]
   16614:	add	r5, r5, #8
   16618:	stm	sp, {r0, r1, r5}
   1661c:	str	r2, [sp, #12]
   16620:	str	r3, [sp, #16]
   16624:	mov	r0, r7
   16628:	mov	r1, sl
   1662c:	mov	r2, r9
   16630:	mov	r3, r8
   16634:	bl	16644 <__assert_fail@plt+0x5260>
   16638:	str	r6, [r4]
   1663c:	sub	sp, fp, #28
   16640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16648:	add	fp, sp, #28
   1664c:	sub	sp, sp, #156	; 0x9c
   16650:	mov	r9, r3
   16654:	str	r2, [fp, #-84]	; 0xffffffac
   16658:	mov	r6, r1
   1665c:	mov	r7, r0
   16660:	ldr	r0, [fp, #12]
   16664:	and	r1, r0, #4
   16668:	str	r1, [sp, #32]
   1666c:	and	r1, r0, #1
   16670:	str	r1, [sp, #36]	; 0x24
   16674:	ubfx	sl, r0, #1, #1
   16678:	bl	111e0 <__ctype_get_mb_cur_max@plt>
   1667c:	str	r0, [sp, #40]	; 0x28
   16680:	ldr	r0, [fp, #24]
   16684:	str	r0, [sp, #76]	; 0x4c
   16688:	ldr	r0, [fp, #20]
   1668c:	str	r0, [sp, #68]	; 0x44
   16690:	ldr	r0, [fp, #8]
   16694:	str	r0, [fp, #-60]	; 0xffffffc4
   16698:	mov	r0, #0
   1669c:	str	r0, [sp, #72]	; 0x48
   166a0:	mov	r0, #0
   166a4:	str	r0, [sp, #92]	; 0x5c
   166a8:	mov	r0, #0
   166ac:	str	r0, [fp, #-72]	; 0xffffffb8
   166b0:	mov	r0, #0
   166b4:	mov	r1, #0
   166b8:	str	r1, [fp, #-56]	; 0xffffffc8
   166bc:	mov	r1, #0
   166c0:	str	r1, [sp, #56]	; 0x38
   166c4:	mov	r5, #1
   166c8:	str	r7, [sp, #80]	; 0x50
   166cc:	mov	r4, r6
   166d0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   166d4:	cmp	r6, #10
   166d8:	bhi	17640 <__assert_fail@plt+0x625c>
   166dc:	add	r1, pc, #20
   166e0:	mov	r8, #0
   166e4:	mov	r2, #1
   166e8:	mov	r3, #0
   166ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   166f0:	mov	lr, r9
   166f4:	ldr	pc, [r1, r6, lsl #2]
   166f8:	ldrdeq	r6, [r1], -r0
   166fc:	andeq	r6, r1, r0, lsl #16
   16700:	andeq	r6, r1, r0, asr #15
   16704:			; <UNDEFINED> instruction: 0x000167b8
   16708:	strdeq	r6, [r1], -r4
   1670c:	andeq	r6, r1, r4, asr r8
   16710:	andeq	r6, r1, r0, ror #15
   16714:			; <UNDEFINED> instruction: 0x000168b0
   16718:	andeq	r6, r1, r4, lsr #14
   1671c:	andeq	r6, r1, r4, lsr #14
   16720:	andeq	r6, r1, ip, asr #14
   16724:	movw	r0, #42294	; 0xa536
   16728:	movt	r0, #1
   1672c:	mov	r1, r6
   16730:	bl	17c4c <__assert_fail@plt+0x6868>
   16734:	str	r0, [sp, #68]	; 0x44
   16738:	movw	r0, #42296	; 0xa538
   1673c:	movt	r0, #1
   16740:	mov	r1, r6
   16744:	bl	17c4c <__assert_fail@plt+0x6868>
   16748:	str	r0, [sp, #76]	; 0x4c
   1674c:	mov	r8, #0
   16750:	tst	sl, #1
   16754:	bne	1678c <__assert_fail@plt+0x53a8>
   16758:	ldr	r0, [sp, #68]	; 0x44
   1675c:	ldrb	r0, [r0]
   16760:	cmp	r0, #0
   16764:	beq	1678c <__assert_fail@plt+0x53a8>
   16768:	ldr	r1, [sp, #68]	; 0x44
   1676c:	add	r1, r1, #1
   16770:	mov	r8, #0
   16774:	cmp	r8, r4
   16778:	strbcc	r0, [r7, r8]
   1677c:	ldrb	r0, [r1, r8]
   16780:	add	r8, r8, #1
   16784:	cmp	r0, #0
   16788:	bne	16774 <__assert_fail@plt+0x5390>
   1678c:	ldr	r6, [sp, #76]	; 0x4c
   16790:	mov	r0, r6
   16794:	bl	1127c <strlen@plt>
   16798:	str	r0, [fp, #-72]	; 0xffffffb8
   1679c:	str	r6, [sp, #92]	; 0x5c
   167a0:	mov	r2, #1
   167a4:	mov	r3, sl
   167a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   167ac:	mov	lr, r9
   167b0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   167b4:	b	168b0 <__assert_fail@plt+0x54cc>
   167b8:	mov	r0, #1
   167bc:	b	16800 <__assert_fail@plt+0x541c>
   167c0:	tst	sl, #1
   167c4:	bne	16800 <__assert_fail@plt+0x541c>
   167c8:	mov	r2, r0
   167cc:	b	16828 <__assert_fail@plt+0x5444>
   167d0:	mov	r6, #0
   167d4:	mov	r8, #0
   167d8:	mov	r2, r0
   167dc:	b	168ac <__assert_fail@plt+0x54c8>
   167e0:	mov	r0, #1
   167e4:	str	r0, [fp, #-72]	; 0xffffffb8
   167e8:	mov	r8, #0
   167ec:	mov	r6, #5
   167f0:	b	1686c <__assert_fail@plt+0x5488>
   167f4:	mov	r2, #1
   167f8:	tst	sl, #1
   167fc:	beq	16828 <__assert_fail@plt+0x5444>
   16800:	mov	r1, #1
   16804:	str	r1, [fp, #-72]	; 0xffffffb8
   16808:	mov	r8, #0
   1680c:	mov	r6, #2
   16810:	movw	r1, #42296	; 0xa538
   16814:	movt	r1, #1
   16818:	str	r1, [sp, #92]	; 0x5c
   1681c:	mov	r2, r0
   16820:	mov	r3, #1
   16824:	b	168b0 <__assert_fail@plt+0x54cc>
   16828:	mov	r8, #1
   1682c:	mov	r6, #2
   16830:	cmp	r4, #0
   16834:	movne	r0, #39	; 0x27
   16838:	strbne	r0, [r7]
   1683c:	movw	r0, #42296	; 0xa538
   16840:	movt	r0, #1
   16844:	str	r0, [sp, #92]	; 0x5c
   16848:	mov	r0, #1
   1684c:	str	r0, [fp, #-72]	; 0xffffffb8
   16850:	b	168ac <__assert_fail@plt+0x54c8>
   16854:	mov	r6, #5
   16858:	tst	sl, #1
   1685c:	beq	16884 <__assert_fail@plt+0x54a0>
   16860:	mov	r0, #1
   16864:	str	r0, [fp, #-72]	; 0xffffffb8
   16868:	mov	r8, #0
   1686c:	movw	r0, #42292	; 0xa534
   16870:	movt	r0, #1
   16874:	str	r0, [sp, #92]	; 0x5c
   16878:	mov	r2, #1
   1687c:	mov	r3, #1
   16880:	b	168b0 <__assert_fail@plt+0x54cc>
   16884:	cmp	r4, #0
   16888:	movne	r0, #34	; 0x22
   1688c:	strbne	r0, [r7]
   16890:	mov	r8, #1
   16894:	movw	r0, #42292	; 0xa534
   16898:	movt	r0, #1
   1689c:	str	r0, [sp, #92]	; 0x5c
   168a0:	mov	r0, #1
   168a4:	str	r0, [fp, #-72]	; 0xffffffb8
   168a8:	mov	r2, #1
   168ac:	mov	r3, #0
   168b0:	ldr	r0, [fp, #16]
   168b4:	cmp	r0, #0
   168b8:	movwne	r0, #1
   168bc:	and	r0, r0, r3
   168c0:	str	r0, [fp, #-88]	; 0xffffffa8
   168c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   168c8:	cmp	r0, #0
   168cc:	movwne	r0, #1
   168d0:	and	r1, r0, r3
   168d4:	and	r1, r2, r1
   168d8:	str	r1, [sp, #48]	; 0x30
   168dc:	str	r6, [fp, #-60]	; 0xffffffc4
   168e0:	subs	r6, r6, #2
   168e4:	clz	r1, r6
   168e8:	lsr	r1, r1, #5
   168ec:	and	r1, r1, r3
   168f0:	str	r1, [sp, #60]	; 0x3c
   168f4:	str	r6, [fp, #-80]	; 0xffffffb0
   168f8:	mov	r1, r6
   168fc:	movwne	r1, #1
   16900:	str	r3, [fp, #-76]	; 0xffffffb4
   16904:	eor	r3, r3, #1
   16908:	str	r3, [sp, #88]	; 0x58
   1690c:	orr	r3, r1, r3
   16910:	str	r3, [sp, #64]	; 0x40
   16914:	and	r1, r1, r2
   16918:	str	r1, [fp, #-68]	; 0xffffffbc
   1691c:	and	r0, r0, r1
   16920:	str	r0, [fp, #-64]	; 0xffffffc0
   16924:	str	r2, [sp, #84]	; 0x54
   16928:	eor	r0, r2, #1
   1692c:	str	r0, [sp, #52]	; 0x34
   16930:	mov	r6, #0
   16934:	cmn	lr, #1
   16938:	beq	16948 <__assert_fail@plt+0x5564>
   1693c:	cmp	r6, lr
   16940:	bne	16954 <__assert_fail@plt+0x5570>
   16944:	b	174c0 <__assert_fail@plt+0x60dc>
   16948:	ldrb	r0, [ip, r6]
   1694c:	cmp	r0, #0
   16950:	beq	174c0 <__assert_fail@plt+0x60dc>
   16954:	str	r5, [fp, #-48]	; 0xffffffd0
   16958:	mov	sl, #0
   1695c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16960:	cmp	r0, #0
   16964:	beq	16998 <__assert_fail@plt+0x55b4>
   16968:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1696c:	add	r5, r6, r0
   16970:	cmp	r0, #2
   16974:	bcc	16990 <__assert_fail@plt+0x55ac>
   16978:	cmn	lr, #1
   1697c:	bne	16990 <__assert_fail@plt+0x55ac>
   16980:	mov	r0, ip
   16984:	bl	1127c <strlen@plt>
   16988:	ldr	ip, [fp, #-84]	; 0xffffffac
   1698c:	mov	lr, r0
   16990:	cmp	r5, lr
   16994:	bls	169a4 <__assert_fail@plt+0x55c0>
   16998:	mov	r0, #0
   1699c:	str	r0, [fp, #-52]	; 0xffffffcc
   169a0:	b	169f0 <__assert_fail@plt+0x560c>
   169a4:	mov	r5, r4
   169a8:	mov	r4, lr
   169ac:	add	r0, ip, r6
   169b0:	ldr	r1, [sp, #92]	; 0x5c
   169b4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   169b8:	bl	11174 <memcmp@plt>
   169bc:	cmp	r0, #0
   169c0:	mov	r1, r0
   169c4:	movwne	r1, #1
   169c8:	ldr	r2, [sp, #88]	; 0x58
   169cc:	orr	r1, r1, r2
   169d0:	tst	r1, #1
   169d4:	beq	17584 <__assert_fail@plt+0x61a0>
   169d8:	clz	r0, r0
   169dc:	lsr	r0, r0, #5
   169e0:	str	r0, [fp, #-52]	; 0xffffffcc
   169e4:	ldr	ip, [fp, #-84]	; 0xffffffac
   169e8:	mov	lr, r4
   169ec:	mov	r4, r5
   169f0:	ldrb	r5, [ip, r6]
   169f4:	cmp	r5, #126	; 0x7e
   169f8:	bhi	16db4 <__assert_fail@plt+0x59d0>
   169fc:	mov	r9, #1
   16a00:	mov	r2, #110	; 0x6e
   16a04:	mov	r0, #97	; 0x61
   16a08:	add	r3, pc, #4
   16a0c:	mov	r1, #0
   16a10:	ldr	pc, [r3, r5, lsl #2]
   16a14:	andeq	r6, r1, ip, lsr #25
   16a18:			; <UNDEFINED> instruction: 0x00016db4
   16a1c:			; <UNDEFINED> instruction: 0x00016db4
   16a20:			; <UNDEFINED> instruction: 0x00016db4
   16a24:			; <UNDEFINED> instruction: 0x00016db4
   16a28:			; <UNDEFINED> instruction: 0x00016db4
   16a2c:			; <UNDEFINED> instruction: 0x00016db4
   16a30:	andeq	r6, r1, r8, ror lr
   16a34:	andeq	r6, r1, ip, lsl #25
   16a38:	andeq	r6, r1, r4, lsl #25
   16a3c:	muleq	r1, r8, ip
   16a40:	andeq	r6, r1, ip, lsl sp
   16a44:	andeq	r6, r1, ip, ror ip
   16a48:	muleq	r1, r4, ip
   16a4c:			; <UNDEFINED> instruction: 0x00016db4
   16a50:			; <UNDEFINED> instruction: 0x00016db4
   16a54:			; <UNDEFINED> instruction: 0x00016db4
   16a58:			; <UNDEFINED> instruction: 0x00016db4
   16a5c:			; <UNDEFINED> instruction: 0x00016db4
   16a60:			; <UNDEFINED> instruction: 0x00016db4
   16a64:			; <UNDEFINED> instruction: 0x00016db4
   16a68:			; <UNDEFINED> instruction: 0x00016db4
   16a6c:			; <UNDEFINED> instruction: 0x00016db4
   16a70:			; <UNDEFINED> instruction: 0x00016db4
   16a74:			; <UNDEFINED> instruction: 0x00016db4
   16a78:			; <UNDEFINED> instruction: 0x00016db4
   16a7c:			; <UNDEFINED> instruction: 0x00016db4
   16a80:			; <UNDEFINED> instruction: 0x00016db4
   16a84:			; <UNDEFINED> instruction: 0x00016db4
   16a88:			; <UNDEFINED> instruction: 0x00016db4
   16a8c:			; <UNDEFINED> instruction: 0x00016db4
   16a90:			; <UNDEFINED> instruction: 0x00016db4
   16a94:	andeq	r6, r1, r8, lsr #28
   16a98:	andeq	r6, r1, ip, lsr #28
   16a9c:	andeq	r6, r1, ip, lsr #28
   16aa0:	andeq	r6, r1, r4, lsr #24
   16aa4:	andeq	r6, r1, ip, lsr #28
   16aa8:	andeq	r6, r1, r0, lsl ip
   16aac:	andeq	r6, r1, ip, lsr #28
   16ab0:	andeq	r6, r1, r4, lsr #26
   16ab4:	andeq	r6, r1, ip, lsr #28
   16ab8:	andeq	r6, r1, ip, lsr #28
   16abc:	andeq	r6, r1, ip, lsr #28
   16ac0:	andeq	r6, r1, r0, lsl ip
   16ac4:	andeq	r6, r1, r0, lsl ip
   16ac8:	andeq	r6, r1, r0, lsl ip
   16acc:	andeq	r6, r1, r0, lsl ip
   16ad0:	andeq	r6, r1, r0, lsl ip
   16ad4:	andeq	r6, r1, r0, lsl ip
   16ad8:	andeq	r6, r1, r0, lsl ip
   16adc:	andeq	r6, r1, r0, lsl ip
   16ae0:	andeq	r6, r1, r0, lsl ip
   16ae4:	andeq	r6, r1, r0, lsl ip
   16ae8:	andeq	r6, r1, r0, lsl ip
   16aec:	andeq	r6, r1, r0, lsl ip
   16af0:	andeq	r6, r1, r0, lsl ip
   16af4:	andeq	r6, r1, r0, lsl ip
   16af8:	andeq	r6, r1, r0, lsl ip
   16afc:	andeq	r6, r1, r0, lsl ip
   16b00:	andeq	r6, r1, ip, lsr #28
   16b04:	andeq	r6, r1, ip, lsr #28
   16b08:	andeq	r6, r1, ip, lsr #28
   16b0c:	andeq	r6, r1, ip, lsr #28
   16b10:	andeq	r6, r1, ip, ror #25
   16b14:			; <UNDEFINED> instruction: 0x00016db4
   16b18:	andeq	r6, r1, r0, lsl ip
   16b1c:	andeq	r6, r1, r0, lsl ip
   16b20:	andeq	r6, r1, r0, lsl ip
   16b24:	andeq	r6, r1, r0, lsl ip
   16b28:	andeq	r6, r1, r0, lsl ip
   16b2c:	andeq	r6, r1, r0, lsl ip
   16b30:	andeq	r6, r1, r0, lsl ip
   16b34:	andeq	r6, r1, r0, lsl ip
   16b38:	andeq	r6, r1, r0, lsl ip
   16b3c:	andeq	r6, r1, r0, lsl ip
   16b40:	andeq	r6, r1, r0, lsl ip
   16b44:	andeq	r6, r1, r0, lsl ip
   16b48:	andeq	r6, r1, r0, lsl ip
   16b4c:	andeq	r6, r1, r0, lsl ip
   16b50:	andeq	r6, r1, r0, lsl ip
   16b54:	andeq	r6, r1, r0, lsl ip
   16b58:	andeq	r6, r1, r0, lsl ip
   16b5c:	andeq	r6, r1, r0, lsl ip
   16b60:	andeq	r6, r1, r0, lsl ip
   16b64:	andeq	r6, r1, r0, lsl ip
   16b68:	andeq	r6, r1, r0, lsl ip
   16b6c:	andeq	r6, r1, r0, lsl ip
   16b70:	andeq	r6, r1, r0, lsl ip
   16b74:	andeq	r6, r1, r0, lsl ip
   16b78:	andeq	r6, r1, r0, lsl ip
   16b7c:	andeq	r6, r1, r0, lsl ip
   16b80:	andeq	r6, r1, ip, lsr #28
   16b84:	andeq	r6, r1, r8, asr ip
   16b88:	andeq	r6, r1, r0, lsl ip
   16b8c:	andeq	r6, r1, ip, lsr #28
   16b90:	andeq	r6, r1, r0, lsl ip
   16b94:	andeq	r6, r1, ip, lsr #28
   16b98:	andeq	r6, r1, r0, lsl ip
   16b9c:	andeq	r6, r1, r0, lsl ip
   16ba0:	andeq	r6, r1, r0, lsl ip
   16ba4:	andeq	r6, r1, r0, lsl ip
   16ba8:	andeq	r6, r1, r0, lsl ip
   16bac:	andeq	r6, r1, r0, lsl ip
   16bb0:	andeq	r6, r1, r0, lsl ip
   16bb4:	andeq	r6, r1, r0, lsl ip
   16bb8:	andeq	r6, r1, r0, lsl ip
   16bbc:	andeq	r6, r1, r0, lsl ip
   16bc0:	andeq	r6, r1, r0, lsl ip
   16bc4:	andeq	r6, r1, r0, lsl ip
   16bc8:	andeq	r6, r1, r0, lsl ip
   16bcc:	andeq	r6, r1, r0, lsl ip
   16bd0:	andeq	r6, r1, r0, lsl ip
   16bd4:	andeq	r6, r1, r0, lsl ip
   16bd8:	andeq	r6, r1, r0, lsl ip
   16bdc:	andeq	r6, r1, r0, lsl ip
   16be0:	andeq	r6, r1, r0, lsl ip
   16be4:	andeq	r6, r1, r0, lsl ip
   16be8:	andeq	r6, r1, r0, lsl ip
   16bec:	andeq	r6, r1, r0, lsl ip
   16bf0:	andeq	r6, r1, r0, lsl ip
   16bf4:	andeq	r6, r1, r0, lsl ip
   16bf8:	andeq	r6, r1, r0, lsl ip
   16bfc:	andeq	r6, r1, r0, lsl ip
   16c00:	andeq	r6, r1, r8, lsr ip
   16c04:	andeq	r6, r1, ip, lsr #28
   16c08:	andeq	r6, r1, r8, lsr ip
   16c0c:	andeq	r6, r1, r4, lsr #24
   16c10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16c14:	cmp	r0, #0
   16c18:	beq	16e8c <__assert_fail@plt+0x5aa8>
   16c1c:	ldr	r0, [fp, #16]
   16c20:	b	16e90 <__assert_fail@plt+0x5aac>
   16c24:	mov	r9, #0
   16c28:	cmp	r6, #0
   16c2c:	beq	16e28 <__assert_fail@plt+0x5a44>
   16c30:	mov	sl, #0
   16c34:	b	16c10 <__assert_fail@plt+0x582c>
   16c38:	mov	r9, #0
   16c3c:	cmn	lr, #1
   16c40:	beq	16e0c <__assert_fail@plt+0x5a28>
   16c44:	cmp	r6, #0
   16c48:	bne	16c30 <__assert_fail@plt+0x584c>
   16c4c:	cmp	lr, #1
   16c50:	beq	16e28 <__assert_fail@plt+0x5a44>
   16c54:	b	16c30 <__assert_fail@plt+0x584c>
   16c58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16c5c:	cmp	r0, #2
   16c60:	bne	16e54 <__assert_fail@plt+0x5a70>
   16c64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16c68:	tst	r0, #1
   16c6c:	bne	1759c <__assert_fail@plt+0x61b8>
   16c70:	mov	sl, #0
   16c74:	mov	r0, #92	; 0x5c
   16c78:	b	16e68 <__assert_fail@plt+0x5a84>
   16c7c:	mov	r0, #102	; 0x66
   16c80:	b	16e78 <__assert_fail@plt+0x5a94>
   16c84:	mov	r2, #116	; 0x74
   16c88:	b	16c98 <__assert_fail@plt+0x58b4>
   16c8c:	mov	r0, #98	; 0x62
   16c90:	b	16e78 <__assert_fail@plt+0x5a94>
   16c94:	mov	r2, #114	; 0x72
   16c98:	ldr	r0, [sp, #64]	; 0x40
   16c9c:	tst	r0, #1
   16ca0:	mov	r0, r2
   16ca4:	bne	16e78 <__assert_fail@plt+0x5a94>
   16ca8:	b	1759c <__assert_fail@plt+0x61b8>
   16cac:	ldr	r0, [sp, #84]	; 0x54
   16cb0:	tst	r0, #1
   16cb4:	beq	16f68 <__assert_fail@plt+0x5b84>
   16cb8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16cbc:	tst	r0, #1
   16cc0:	bne	1759c <__assert_fail@plt+0x61b8>
   16cc4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16cc8:	cmp	r0, #2
   16ccc:	ldr	r0, [fp, #-80]	; 0xffffffb0
   16cd0:	movwne	r0, #1
   16cd4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16cd8:	orr	r0, r0, r2
   16cdc:	tst	r0, #1
   16ce0:	beq	1735c <__assert_fail@plt+0x5f78>
   16ce4:	mov	r0, r8
   16ce8:	b	17390 <__assert_fail@plt+0x5fac>
   16cec:	mov	sl, #0
   16cf0:	mov	r5, #63	; 0x3f
   16cf4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16cf8:	cmp	r0, #5
   16cfc:	beq	1711c <__assert_fail@plt+0x5d38>
   16d00:	cmp	r0, #2
   16d04:	bne	171bc <__assert_fail@plt+0x5dd8>
   16d08:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16d0c:	tst	r0, #1
   16d10:	mov	r9, #0
   16d14:	beq	16c10 <__assert_fail@plt+0x582c>
   16d18:	b	1759c <__assert_fail@plt+0x61b8>
   16d1c:	mov	r0, #118	; 0x76
   16d20:	b	16e78 <__assert_fail@plt+0x5a94>
   16d24:	mov	r5, #39	; 0x27
   16d28:	mov	r0, #1
   16d2c:	str	r0, [sp, #56]	; 0x38
   16d30:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16d34:	cmp	r0, #2
   16d38:	bne	16f88 <__assert_fail@plt+0x5ba4>
   16d3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16d40:	tst	r0, #1
   16d44:	bne	1759c <__assert_fail@plt+0x61b8>
   16d48:	ldr	r2, [sp, #72]	; 0x48
   16d4c:	cmp	r2, #0
   16d50:	mov	r0, r2
   16d54:	movwne	r0, #1
   16d58:	clz	r1, r4
   16d5c:	lsr	r1, r1, #5
   16d60:	orrs	r0, r0, r1
   16d64:	moveq	r2, r4
   16d68:	str	r2, [sp, #72]	; 0x48
   16d6c:	moveq	r4, r0
   16d70:	cmp	r8, r4
   16d74:	movcc	r0, #39	; 0x27
   16d78:	strbcc	r0, [r7, r8]
   16d7c:	add	r0, r8, #1
   16d80:	cmp	r0, r4
   16d84:	movcc	r1, #92	; 0x5c
   16d88:	strbcc	r1, [r7, r0]
   16d8c:	add	r0, r8, #2
   16d90:	cmp	r0, r4
   16d94:	movcc	r1, #39	; 0x27
   16d98:	strbcc	r1, [r7, r0]
   16d9c:	add	r8, r8, #3
   16da0:	mov	r0, #0
   16da4:	str	r0, [fp, #-56]	; 0xffffffc8
   16da8:	mov	sl, #0
   16dac:	mov	r9, #1
   16db0:	b	16c10 <__assert_fail@plt+0x582c>
   16db4:	str	r4, [sp, #24]
   16db8:	ldr	r0, [sp, #40]	; 0x28
   16dbc:	cmp	r0, #1
   16dc0:	bne	16f90 <__assert_fail@plt+0x5bac>
   16dc4:	str	lr, [sp, #28]
   16dc8:	bl	11264 <__ctype_b_loc@plt>
   16dcc:	ldr	ip, [fp, #-84]	; 0xffffffac
   16dd0:	ldr	r0, [r0]
   16dd4:	add	r0, r0, r5, lsl #1
   16dd8:	ldrb	r0, [r0, #1]
   16ddc:	ubfx	r9, r0, #6, #1
   16de0:	mov	r1, #1
   16de4:	ldr	r4, [sp, #24]
   16de8:	ldr	r0, [sp, #52]	; 0x34
   16dec:	orr	r0, r9, r0
   16df0:	mov	r2, r1
   16df4:	cmp	r1, #1
   16df8:	bhi	171c4 <__assert_fail@plt+0x5de0>
   16dfc:	tst	r0, #1
   16e00:	beq	171c4 <__assert_fail@plt+0x5de0>
   16e04:	ldr	lr, [sp, #28]
   16e08:	b	16c10 <__assert_fail@plt+0x582c>
   16e0c:	cmp	r6, #0
   16e10:	ldrbeq	r0, [ip, #1]
   16e14:	cmpeq	r0, #0
   16e18:	beq	16e28 <__assert_fail@plt+0x5a44>
   16e1c:	mvn	lr, #0
   16e20:	mov	sl, #0
   16e24:	b	16c10 <__assert_fail@plt+0x582c>
   16e28:	mov	r1, #1
   16e2c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16e30:	cmp	r0, #2
   16e34:	bne	16e4c <__assert_fail@plt+0x5a68>
   16e38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16e3c:	tst	r0, #1
   16e40:	mov	r9, r1
   16e44:	beq	16c10 <__assert_fail@plt+0x582c>
   16e48:	b	1759c <__assert_fail@plt+0x61b8>
   16e4c:	mov	r9, r1
   16e50:	b	16c10 <__assert_fail@plt+0x582c>
   16e54:	mov	sl, #0
   16e58:	mov	r0, #92	; 0x5c
   16e5c:	ldr	r1, [sp, #48]	; 0x30
   16e60:	cmp	r1, #0
   16e64:	beq	16e78 <__assert_fail@plt+0x5a94>
   16e68:	mov	r9, #0
   16e6c:	cmp	sl, #0
   16e70:	beq	17428 <__assert_fail@plt+0x6044>
   16e74:	b	17464 <__assert_fail@plt+0x6080>
   16e78:	mov	r9, #0
   16e7c:	ldr	r1, [sp, #84]	; 0x54
   16e80:	tst	r1, #1
   16e84:	mov	sl, #0
   16e88:	bne	16ec8 <__assert_fail@plt+0x5ae4>
   16e8c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16e90:	cmp	r0, #0
   16e94:	mov	r0, r5
   16e98:	beq	16ebc <__assert_fail@plt+0x5ad8>
   16e9c:	ubfx	r0, r5, #5, #3
   16ea0:	ldr	r1, [fp, #16]
   16ea4:	ldr	r0, [r1, r0, lsl #2]
   16ea8:	and	r1, r5, #31
   16eac:	mov	r2, #1
   16eb0:	tst	r0, r2, lsl r1
   16eb4:	mov	r0, r5
   16eb8:	bne	16ec8 <__assert_fail@plt+0x5ae4>
   16ebc:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16ec0:	cmp	r1, #0
   16ec4:	beq	17420 <__assert_fail@plt+0x603c>
   16ec8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16ecc:	tst	r1, #1
   16ed0:	bne	1759c <__assert_fail@plt+0x61b8>
   16ed4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   16ed8:	cmp	r1, #2
   16edc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   16ee0:	movwne	r1, #1
   16ee4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   16ee8:	orr	r1, r1, r2
   16eec:	tst	r1, #1
   16ef0:	beq	16efc <__assert_fail@plt+0x5b18>
   16ef4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16ef8:	b	16f38 <__assert_fail@plt+0x5b54>
   16efc:	cmp	r8, r4
   16f00:	movcc	r1, #39	; 0x27
   16f04:	strbcc	r1, [r7, r8]
   16f08:	add	r1, r8, #1
   16f0c:	cmp	r1, r4
   16f10:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16f14:	movcc	r2, #36	; 0x24
   16f18:	strbcc	r2, [r7, r1]
   16f1c:	add	r1, r8, #2
   16f20:	cmp	r1, r4
   16f24:	movcc	r2, #39	; 0x27
   16f28:	strbcc	r2, [r7, r1]
   16f2c:	add	r8, r8, #3
   16f30:	mov	r1, #1
   16f34:	str	r1, [fp, #-56]	; 0xffffffc8
   16f38:	cmp	r8, r4
   16f3c:	movcc	r1, #92	; 0x5c
   16f40:	strbcc	r1, [r7, r8]
   16f44:	add	r8, r8, #1
   16f48:	cmp	r8, r4
   16f4c:	strbcc	r0, [r7, r8]
   16f50:	and	r5, r5, r9
   16f54:	add	r8, r8, #1
   16f58:	add	r6, r6, #1
   16f5c:	cmn	lr, #1
   16f60:	bne	1693c <__assert_fail@plt+0x5558>
   16f64:	b	16948 <__assert_fail@plt+0x5564>
   16f68:	mov	r9, #0
   16f6c:	ldr	r0, [sp, #36]	; 0x24
   16f70:	cmp	r0, #0
   16f74:	mov	sl, #0
   16f78:	mov	r5, #0
   16f7c:	beq	16e8c <__assert_fail@plt+0x5aa8>
   16f80:	ldr	r5, [fp, #-48]	; 0xffffffd0
   16f84:	b	16f58 <__assert_fail@plt+0x5b74>
   16f88:	mov	r9, #1
   16f8c:	b	16c10 <__assert_fail@plt+0x582c>
   16f90:	mov	r0, #0
   16f94:	str	r0, [fp, #-36]	; 0xffffffdc
   16f98:	str	r0, [fp, #-40]	; 0xffffffd8
   16f9c:	cmn	lr, #1
   16fa0:	bne	16fb4 <__assert_fail@plt+0x5bd0>
   16fa4:	mov	r0, ip
   16fa8:	bl	1127c <strlen@plt>
   16fac:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fb0:	mov	lr, r0
   16fb4:	add	r0, ip, r6
   16fb8:	str	r0, [sp, #20]
   16fbc:	mov	r9, #1
   16fc0:	mov	r7, #0
   16fc4:	sub	r4, fp, #40	; 0x28
   16fc8:	str	lr, [sp, #28]
   16fcc:	str	r7, [sp, #44]	; 0x2c
   16fd0:	add	r7, r7, r6
   16fd4:	add	r1, ip, r7
   16fd8:	sub	r2, lr, r7
   16fdc:	sub	r0, fp, #44	; 0x2c
   16fe0:	mov	r3, r4
   16fe4:	bl	1959c <__assert_fail@plt+0x81b8>
   16fe8:	cmp	r0, #0
   16fec:	beq	174ac <__assert_fail@plt+0x60c8>
   16ff0:	cmn	r0, #1
   16ff4:	beq	1746c <__assert_fail@plt+0x6088>
   16ff8:	cmn	r0, #2
   16ffc:	ldr	lr, [sp, #28]
   17000:	beq	17474 <__assert_fail@plt+0x6090>
   17004:	cmp	r0, #2
   17008:	mov	r1, #0
   1700c:	movwcc	r1, #1
   17010:	ldr	r2, [sp, #60]	; 0x3c
   17014:	eor	r2, r2, #1
   17018:	orrs	r1, r2, r1
   1701c:	ldr	r4, [sp, #24]
   17020:	bne	170e0 <__assert_fail@plt+0x5cfc>
   17024:	ldr	r1, [sp, #44]	; 0x2c
   17028:	ldr	r2, [sp, #20]
   1702c:	add	r1, r2, r1
   17030:	mov	r2, #1
   17034:	ldrb	r3, [r1, r2]
   17038:	sub	r3, r3, #91	; 0x5b
   1703c:	cmp	r3, #33	; 0x21
   17040:	bhi	170d4 <__assert_fail@plt+0x5cf0>
   17044:	add	r7, pc, #0
   17048:	ldr	pc, [r7, r3, lsl #2]
   1704c:	muleq	r1, r4, r5
   17050:	muleq	r1, r4, r5
   17054:	ldrdeq	r7, [r1], -r4
   17058:	muleq	r1, r4, r5
   1705c:	ldrdeq	r7, [r1], -r4
   17060:	muleq	r1, r4, r5
   17064:	ldrdeq	r7, [r1], -r4
   17068:	ldrdeq	r7, [r1], -r4
   1706c:	ldrdeq	r7, [r1], -r4
   17070:	ldrdeq	r7, [r1], -r4
   17074:	ldrdeq	r7, [r1], -r4
   17078:	ldrdeq	r7, [r1], -r4
   1707c:	ldrdeq	r7, [r1], -r4
   17080:	ldrdeq	r7, [r1], -r4
   17084:	ldrdeq	r7, [r1], -r4
   17088:	ldrdeq	r7, [r1], -r4
   1708c:	ldrdeq	r7, [r1], -r4
   17090:	ldrdeq	r7, [r1], -r4
   17094:	ldrdeq	r7, [r1], -r4
   17098:	ldrdeq	r7, [r1], -r4
   1709c:	ldrdeq	r7, [r1], -r4
   170a0:	ldrdeq	r7, [r1], -r4
   170a4:	ldrdeq	r7, [r1], -r4
   170a8:	ldrdeq	r7, [r1], -r4
   170ac:	ldrdeq	r7, [r1], -r4
   170b0:	ldrdeq	r7, [r1], -r4
   170b4:	ldrdeq	r7, [r1], -r4
   170b8:	ldrdeq	r7, [r1], -r4
   170bc:	ldrdeq	r7, [r1], -r4
   170c0:	ldrdeq	r7, [r1], -r4
   170c4:	ldrdeq	r7, [r1], -r4
   170c8:	ldrdeq	r7, [r1], -r4
   170cc:	ldrdeq	r7, [r1], -r4
   170d0:	muleq	r1, r4, r5
   170d4:	add	r2, r2, #1
   170d8:	cmp	r2, r0
   170dc:	bcc	17034 <__assert_fail@plt+0x5c50>
   170e0:	ldr	r7, [sp, #44]	; 0x2c
   170e4:	add	r7, r0, r7
   170e8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   170ec:	bl	111b0 <iswprint@plt>
   170f0:	cmp	r0, #0
   170f4:	movwne	r0, #1
   170f8:	and	r9, r9, r0
   170fc:	sub	r4, fp, #40	; 0x28
   17100:	mov	r0, r4
   17104:	bl	11168 <mbsinit@plt>
   17108:	ldr	lr, [sp, #28]
   1710c:	cmp	r0, #0
   17110:	ldr	ip, [fp, #-84]	; 0xffffffac
   17114:	beq	16fcc <__assert_fail@plt+0x5be8>
   17118:	b	174b4 <__assert_fail@plt+0x60d0>
   1711c:	ldr	r0, [sp, #32]
   17120:	cmp	r0, #0
   17124:	beq	171bc <__assert_fail@plt+0x5dd8>
   17128:	add	r0, r6, #2
   1712c:	cmp	r0, lr
   17130:	bcs	171bc <__assert_fail@plt+0x5dd8>
   17134:	add	r1, ip, r6
   17138:	ldrb	r1, [r1, #1]
   1713c:	cmp	r1, #63	; 0x3f
   17140:	bne	171bc <__assert_fail@plt+0x5dd8>
   17144:	ldrb	r9, [ip, r0]
   17148:	sub	r2, r9, #33	; 0x21
   1714c:	cmp	r2, #29
   17150:	bhi	171bc <__assert_fail@plt+0x5dd8>
   17154:	mov	r3, #1
   17158:	movw	r1, #20929	; 0x51c1
   1715c:	movt	r1, #14336	; 0x3800
   17160:	tst	r1, r3, lsl r2
   17164:	beq	171bc <__assert_fail@plt+0x5dd8>
   17168:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1716c:	tst	r1, #1
   17170:	bne	1759c <__assert_fail@plt+0x61b8>
   17174:	cmp	r8, r4
   17178:	movcc	r1, #63	; 0x3f
   1717c:	strbcc	r1, [r7, r8]
   17180:	add	r2, r8, #1
   17184:	cmp	r2, r4
   17188:	movcc	r1, #34	; 0x22
   1718c:	strbcc	r1, [r7, r2]
   17190:	add	r2, r8, #2
   17194:	cmp	r2, r4
   17198:	movcc	r1, #34	; 0x22
   1719c:	strbcc	r1, [r7, r2]
   171a0:	add	r2, r8, #3
   171a4:	cmp	r2, r4
   171a8:	movcc	r1, #63	; 0x3f
   171ac:	strbcc	r1, [r7, r2]
   171b0:	add	r8, r8, #4
   171b4:	mov	r6, r0
   171b8:	mov	r5, r9
   171bc:	mov	r9, #0
   171c0:	b	16c10 <__assert_fail@plt+0x582c>
   171c4:	add	r1, r2, r6
   171c8:	str	r1, [sp, #44]	; 0x2c
   171cc:	add	r1, r6, #1
   171d0:	mov	r3, #0
   171d4:	ldr	lr, [sp, #28]
   171d8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   171dc:	tst	r0, #1
   171e0:	bne	172d4 <__assert_fail@plt+0x5ef0>
   171e4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   171e8:	tst	r2, #1
   171ec:	bne	1759c <__assert_fail@plt+0x61b8>
   171f0:	cmp	r6, #2
   171f4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   171f8:	movwne	r3, #1
   171fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17200:	orr	r3, r3, r2
   17204:	tst	r3, #1
   17208:	bne	17244 <__assert_fail@plt+0x5e60>
   1720c:	cmp	r8, r4
   17210:	movcc	r2, #39	; 0x27
   17214:	strbcc	r2, [r7, r8]
   17218:	add	r3, r8, #1
   1721c:	cmp	r3, r4
   17220:	movcc	r2, #36	; 0x24
   17224:	strbcc	r2, [r7, r3]
   17228:	add	r3, r8, #2
   1722c:	cmp	r3, r4
   17230:	movcc	r2, #39	; 0x27
   17234:	strbcc	r2, [r7, r3]
   17238:	add	r8, r8, #3
   1723c:	mov	r2, #1
   17240:	str	r2, [fp, #-56]	; 0xffffffc8
   17244:	cmp	r8, r4
   17248:	movcc	r2, #92	; 0x5c
   1724c:	strbcc	r2, [r7, r8]
   17250:	add	r3, r8, #1
   17254:	cmp	r3, r4
   17258:	bcs	17278 <__assert_fail@plt+0x5e94>
   1725c:	and	r7, r5, #192	; 0xc0
   17260:	mov	r2, #48	; 0x30
   17264:	orr	r7, r2, r7, lsr #6
   17268:	ldr	r6, [sp, #80]	; 0x50
   1726c:	strb	r7, [r6, r3]
   17270:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17274:	ldr	r7, [sp, #80]	; 0x50
   17278:	add	r3, r8, #2
   1727c:	cmp	r3, r4
   17280:	bcs	172a0 <__assert_fail@plt+0x5ebc>
   17284:	lsr	r7, r5, #3
   17288:	mov	r2, #6
   1728c:	bfi	r7, r2, #3, #29
   17290:	ldr	r6, [sp, #80]	; 0x50
   17294:	strb	r7, [r6, r3]
   17298:	ldr	r6, [fp, #-60]	; 0xffffffc4
   1729c:	ldr	r7, [sp, #80]	; 0x50
   172a0:	mov	r2, #6
   172a4:	bfi	r5, r2, #3, #29
   172a8:	add	r8, r8, #3
   172ac:	mov	r3, #1
   172b0:	b	172f8 <__assert_fail@plt+0x5f14>
   172b4:	ldr	r7, [sp, #80]	; 0x50
   172b8:	cmp	r8, r4
   172bc:	strbcc	r5, [r7, r8]
   172c0:	ldrb	r5, [ip, r1]
   172c4:	add	r1, r1, #1
   172c8:	add	r8, r8, #1
   172cc:	tst	r0, #1
   172d0:	beq	171e4 <__assert_fail@plt+0x5e00>
   172d4:	ldr	r2, [fp, #-52]	; 0xffffffcc
   172d8:	tst	r2, #1
   172dc:	beq	172f0 <__assert_fail@plt+0x5f0c>
   172e0:	cmp	r8, r4
   172e4:	movcc	r2, #92	; 0x5c
   172e8:	strbcc	r2, [r7, r8]
   172ec:	add	r8, r8, #1
   172f0:	mov	r2, #0
   172f4:	str	r2, [fp, #-52]	; 0xffffffcc
   172f8:	and	sl, r3, #1
   172fc:	ldr	r2, [sp, #44]	; 0x2c
   17300:	cmp	r2, r1
   17304:	bls	17410 <__assert_fail@plt+0x602c>
   17308:	cmp	sl, #0
   1730c:	movwne	sl, #1
   17310:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17314:	mvn	r7, r2
   17318:	orr	r7, r7, sl
   1731c:	tst	r7, #1
   17320:	bne	172b4 <__assert_fail@plt+0x5ed0>
   17324:	cmp	r8, r4
   17328:	ldrcc	r7, [sp, #80]	; 0x50
   1732c:	movcc	r2, #39	; 0x27
   17330:	strbcc	r2, [r7, r8]
   17334:	add	r7, r8, #1
   17338:	cmp	r7, r4
   1733c:	ldrcc	r6, [sp, #80]	; 0x50
   17340:	movcc	r2, #39	; 0x27
   17344:	strbcc	r2, [r6, r7]
   17348:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   1734c:	add	r8, r8, #2
   17350:	mov	r2, #0
   17354:	str	r2, [fp, #-56]	; 0xffffffc8
   17358:	b	172b4 <__assert_fail@plt+0x5ed0>
   1735c:	cmp	r8, r4
   17360:	movcc	r0, #39	; 0x27
   17364:	strbcc	r0, [r7, r8]
   17368:	add	r0, r8, #1
   1736c:	cmp	r0, r4
   17370:	movcc	r1, #36	; 0x24
   17374:	strbcc	r1, [r7, r0]
   17378:	add	r0, r8, #2
   1737c:	cmp	r0, r4
   17380:	movcc	r1, #39	; 0x27
   17384:	strbcc	r1, [r7, r0]
   17388:	add	r0, r8, #3
   1738c:	mov	r2, #1
   17390:	cmp	r0, r4
   17394:	movcc	r1, #92	; 0x5c
   17398:	strbcc	r1, [r7, r0]
   1739c:	str	r2, [fp, #-56]	; 0xffffffc8
   173a0:	add	r8, r0, #1
   173a4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   173a8:	cmp	r1, #2
   173ac:	beq	17400 <__assert_fail@plt+0x601c>
   173b0:	add	r1, r6, #1
   173b4:	mov	r9, #0
   173b8:	mov	sl, #1
   173bc:	mov	r5, #48	; 0x30
   173c0:	cmp	r1, lr
   173c4:	bcs	16c10 <__assert_fail@plt+0x582c>
   173c8:	ldrb	r1, [ip, r1]
   173cc:	sub	r1, r1, #48	; 0x30
   173d0:	uxtb	r1, r1
   173d4:	cmp	r1, #9
   173d8:	bhi	16c10 <__assert_fail@plt+0x582c>
   173dc:	cmp	r8, r4
   173e0:	movcc	r1, #48	; 0x30
   173e4:	strbcc	r1, [r7, r8]
   173e8:	add	r1, r0, #2
   173ec:	cmp	r1, r4
   173f0:	movcc	r2, #48	; 0x30
   173f4:	strbcc	r2, [r7, r1]
   173f8:	add	r8, r0, #3
   173fc:	b	16c10 <__assert_fail@plt+0x582c>
   17400:	mov	r0, #48	; 0x30
   17404:	mov	sl, #1
   17408:	mov	r9, #0
   1740c:	b	16ebc <__assert_fail@plt+0x5ad8>
   17410:	sub	r6, r1, #1
   17414:	cmp	sl, #0
   17418:	movwne	sl, #1
   1741c:	mov	r0, r5
   17420:	cmp	sl, #0
   17424:	bne	17464 <__assert_fail@plt+0x6080>
   17428:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1742c:	tst	r1, #1
   17430:	beq	17464 <__assert_fail@plt+0x6080>
   17434:	cmp	r8, r4
   17438:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1743c:	movcc	r1, #39	; 0x27
   17440:	strbcc	r1, [r7, r8]
   17444:	add	r1, r8, #1
   17448:	cmp	r1, r4
   1744c:	movcc	r2, #39	; 0x27
   17450:	strbcc	r2, [r7, r1]
   17454:	add	r8, r8, #2
   17458:	mov	r1, #0
   1745c:	str	r1, [fp, #-56]	; 0xffffffc8
   17460:	b	16f48 <__assert_fail@plt+0x5b64>
   17464:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17468:	b	16f48 <__assert_fail@plt+0x5b64>
   1746c:	mov	r9, #0
   17470:	b	174ac <__assert_fail@plt+0x60c8>
   17474:	mov	r9, #0
   17478:	cmp	r7, lr
   1747c:	bcs	174ac <__assert_fail@plt+0x60c8>
   17480:	ldr	ip, [fp, #-84]	; 0xffffffac
   17484:	ldr	r7, [sp, #44]	; 0x2c
   17488:	ldr	r0, [sp, #20]
   1748c:	ldrb	r0, [r0, r7]
   17490:	cmp	r0, #0
   17494:	beq	174b4 <__assert_fail@plt+0x60d0>
   17498:	add	r7, r7, #1
   1749c:	add	r0, r6, r7
   174a0:	cmp	r0, lr
   174a4:	bcc	17488 <__assert_fail@plt+0x60a4>
   174a8:	b	174b4 <__assert_fail@plt+0x60d0>
   174ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   174b0:	ldr	r7, [sp, #44]	; 0x2c
   174b4:	mov	r1, r7
   174b8:	ldr	r7, [sp, #80]	; 0x50
   174bc:	b	16de4 <__assert_fail@plt+0x5a00>
   174c0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   174c4:	eor	r0, r1, #2
   174c8:	orr	r0, r0, r8
   174cc:	clz	r0, r0
   174d0:	lsr	r0, r0, #5
   174d4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   174d8:	tst	r2, r0
   174dc:	bne	1759c <__assert_fail@plt+0x61b8>
   174e0:	cmp	r1, #2
   174e4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   174e8:	movwne	r0, #1
   174ec:	orr	r0, r2, r0
   174f0:	tst	r0, #1
   174f4:	ldreq	r0, [sp, #56]	; 0x38
   174f8:	eoreq	r0, r0, #1
   174fc:	tsteq	r0, #1
   17500:	bne	17534 <__assert_fail@plt+0x6150>
   17504:	mov	r9, lr
   17508:	tst	r5, #1
   1750c:	bne	17604 <__assert_fail@plt+0x6220>
   17510:	ldr	r0, [sp, #72]	; 0x48
   17514:	cmp	r0, #0
   17518:	beq	17534 <__assert_fail@plt+0x6150>
   1751c:	mov	r5, #0
   17520:	cmp	r4, #0
   17524:	ldr	r0, [sp, #84]	; 0x54
   17528:	mov	sl, r2
   1752c:	ldr	r6, [sp, #72]	; 0x48
   17530:	beq	166cc <__assert_fail@plt+0x52e8>
   17534:	ldr	r1, [sp, #92]	; 0x5c
   17538:	clz	r0, r1
   1753c:	lsr	r0, r0, #5
   17540:	orr	r0, r0, r2
   17544:	tst	r0, #1
   17548:	bne	17574 <__assert_fail@plt+0x6190>
   1754c:	ldrb	r0, [r1]
   17550:	cmp	r0, #0
   17554:	beq	17574 <__assert_fail@plt+0x6190>
   17558:	add	r1, r1, #1
   1755c:	cmp	r8, r4
   17560:	strbcc	r0, [r7, r8]
   17564:	add	r8, r8, #1
   17568:	ldrb	r0, [r1], #1
   1756c:	cmp	r0, #0
   17570:	bne	1755c <__assert_fail@plt+0x6178>
   17574:	cmp	r8, r4
   17578:	movcc	r0, #0
   1757c:	strbcc	r0, [r7, r8]
   17580:	b	175f8 <__assert_fail@plt+0x6214>
   17584:	ldr	ip, [fp, #-84]	; 0xffffffac
   17588:	mov	lr, r4
   1758c:	mov	r4, r5
   17590:	b	1759c <__assert_fail@plt+0x61b8>
   17594:	ldr	r7, [sp, #80]	; 0x50
   17598:	ldr	ip, [fp, #-84]	; 0xffffffac
   1759c:	mov	r0, #0
   175a0:	ldr	r1, [fp, #12]
   175a4:	bic	r1, r1, #2
   175a8:	ldr	r2, [sp, #84]	; 0x54
   175ac:	tst	r2, #1
   175b0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   175b4:	mov	r2, r3
   175b8:	movwne	r2, #4
   175bc:	cmp	r3, #2
   175c0:	movne	r2, r3
   175c4:	str	r2, [sp]
   175c8:	str	r1, [sp, #4]
   175cc:	str	r0, [sp, #8]
   175d0:	ldr	r0, [sp, #68]	; 0x44
   175d4:	str	r0, [sp, #12]
   175d8:	ldr	r0, [sp, #76]	; 0x4c
   175dc:	str	r0, [sp, #16]
   175e0:	mov	r0, r7
   175e4:	mov	r1, r4
   175e8:	mov	r2, ip
   175ec:	mov	r3, lr
   175f0:	bl	16644 <__assert_fail@plt+0x5260>
   175f4:	mov	r8, r0
   175f8:	mov	r0, r8
   175fc:	sub	sp, fp, #28
   17600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17604:	mov	r0, #5
   17608:	str	r0, [sp]
   1760c:	ldr	r0, [fp, #12]
   17610:	str	r0, [sp, #4]
   17614:	ldr	r0, [fp, #16]
   17618:	str	r0, [sp, #8]
   1761c:	ldr	r0, [sp, #68]	; 0x44
   17620:	str	r0, [sp, #12]
   17624:	ldr	r0, [sp, #76]	; 0x4c
   17628:	str	r0, [sp, #16]
   1762c:	mov	r0, r7
   17630:	ldr	r1, [sp, #72]	; 0x48
   17634:	ldr	r2, [fp, #-84]	; 0xffffffac
   17638:	mov	r3, r9
   1763c:	b	175f0 <__assert_fail@plt+0x620c>
   17640:	bl	113b4 <abort@plt>
   17644:	mov	r3, r2
   17648:	mov	r2, #0
   1764c:	b	17650 <__assert_fail@plt+0x626c>
   17650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17654:	add	fp, sp, #28
   17658:	sub	sp, sp, #36	; 0x24
   1765c:	mov	r4, r2
   17660:	str	r2, [sp, #24]
   17664:	mov	r5, r1
   17668:	mov	r6, r0
   1766c:	str	r0, [sp, #20]
   17670:	movw	r8, #45496	; 0xb1b8
   17674:	movt	r8, #2
   17678:	cmp	r3, #0
   1767c:	movne	r8, r3
   17680:	bl	112a0 <__errno_location@plt>
   17684:	str	r0, [sp, #28]
   17688:	ldm	r8, {r3, r9}
   1768c:	ldr	r1, [r8, #40]	; 0x28
   17690:	ldr	r2, [r8, #44]	; 0x2c
   17694:	ldr	r7, [r0]
   17698:	str	r7, [sp, #32]
   1769c:	add	sl, r8, #8
   176a0:	cmp	r4, #0
   176a4:	orreq	r9, r9, #1
   176a8:	stm	sp, {r3, r9, sl}
   176ac:	str	r1, [sp, #12]
   176b0:	str	r2, [sp, #16]
   176b4:	mov	r0, #0
   176b8:	mov	r1, #0
   176bc:	mov	r2, r6
   176c0:	mov	r3, r5
   176c4:	mov	r7, r5
   176c8:	bl	16644 <__assert_fail@plt+0x5260>
   176cc:	mov	r5, r0
   176d0:	add	r4, r0, #1
   176d4:	mov	r0, r4
   176d8:	bl	185ec <__assert_fail@plt+0x7208>
   176dc:	mov	r6, r0
   176e0:	ldr	r0, [r8]
   176e4:	ldr	r1, [r8, #40]	; 0x28
   176e8:	ldr	r2, [r8, #44]	; 0x2c
   176ec:	stm	sp, {r0, r9, sl}
   176f0:	str	r1, [sp, #12]
   176f4:	str	r2, [sp, #16]
   176f8:	mov	r0, r6
   176fc:	mov	r1, r4
   17700:	ldr	r2, [sp, #20]
   17704:	mov	r3, r7
   17708:	bl	16644 <__assert_fail@plt+0x5260>
   1770c:	ldr	r0, [sp, #24]
   17710:	ldr	r1, [sp, #32]
   17714:	ldr	r2, [sp, #28]
   17718:	str	r1, [r2]
   1771c:	cmp	r0, #0
   17720:	strne	r5, [r0]
   17724:	mov	r0, r6
   17728:	sub	sp, fp, #28
   1772c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17730:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17734:	add	fp, sp, #24
   17738:	movw	r8, #45352	; 0xb128
   1773c:	movt	r8, #2
   17740:	ldr	r4, [r8]
   17744:	movw	r5, #45356	; 0xb12c
   17748:	movt	r5, #2
   1774c:	ldr	r0, [r5]
   17750:	cmp	r0, #2
   17754:	blt	17780 <__assert_fail@plt+0x639c>
   17758:	add	r7, r4, #12
   1775c:	mov	r6, #0
   17760:	ldr	r0, [r7, r6, lsl #3]
   17764:	bl	19448 <__assert_fail@plt+0x8064>
   17768:	add	r0, r6, #1
   1776c:	ldr	r1, [r5]
   17770:	add	r2, r6, #2
   17774:	cmp	r2, r1
   17778:	mov	r6, r0
   1777c:	blt	17760 <__assert_fail@plt+0x637c>
   17780:	ldr	r0, [r4, #4]
   17784:	movw	r7, #45544	; 0xb1e8
   17788:	movt	r7, #2
   1778c:	cmp	r0, r7
   17790:	beq	177a8 <__assert_fail@plt+0x63c4>
   17794:	bl	19448 <__assert_fail@plt+0x8064>
   17798:	movw	r0, #45360	; 0xb130
   1779c:	movt	r0, #2
   177a0:	mov	r6, #256	; 0x100
   177a4:	strd	r6, [r0]
   177a8:	movw	r6, #45360	; 0xb130
   177ac:	movt	r6, #2
   177b0:	cmp	r4, r6
   177b4:	beq	177c4 <__assert_fail@plt+0x63e0>
   177b8:	mov	r0, r4
   177bc:	bl	19448 <__assert_fail@plt+0x8064>
   177c0:	str	r6, [r8]
   177c4:	mov	r0, #1
   177c8:	str	r0, [r5]
   177cc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   177d0:	movw	r3, #45496	; 0xb1b8
   177d4:	movt	r3, #2
   177d8:	mvn	r2, #0
   177dc:	b	177e0 <__assert_fail@plt+0x63fc>
   177e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177e4:	add	fp, sp, #28
   177e8:	sub	sp, sp, #44	; 0x2c
   177ec:	mov	r7, r3
   177f0:	str	r2, [sp, #36]	; 0x24
   177f4:	str	r1, [sp, #32]
   177f8:	mov	r5, r0
   177fc:	bl	112a0 <__errno_location@plt>
   17800:	cmp	r5, #0
   17804:	blt	17970 <__assert_fail@plt+0x658c>
   17808:	cmn	r5, #-2147483647	; 0x80000001
   1780c:	beq	17970 <__assert_fail@plt+0x658c>
   17810:	movw	r4, #45352	; 0xb128
   17814:	movt	r4, #2
   17818:	ldr	r6, [r4]
   1781c:	str	r0, [sp, #28]
   17820:	ldr	r0, [r0]
   17824:	str	r0, [sp, #24]
   17828:	movw	r8, #45356	; 0xb12c
   1782c:	movt	r8, #2
   17830:	ldr	r1, [r8]
   17834:	cmp	r1, r5
   17838:	ble	17844 <__assert_fail@plt+0x6460>
   1783c:	mov	sl, r6
   17840:	b	178ac <__assert_fail@plt+0x64c8>
   17844:	str	r1, [fp, #-32]	; 0xffffffe0
   17848:	mov	r0, #8
   1784c:	str	r0, [sp]
   17850:	movw	r9, #45360	; 0xb130
   17854:	movt	r9, #2
   17858:	subs	r0, r6, r9
   1785c:	movne	r0, r6
   17860:	add	r2, r5, #1
   17864:	sub	r2, r2, r1
   17868:	sub	r1, fp, #32
   1786c:	mvn	r3, #-2147483648	; 0x80000000
   17870:	bl	186d4 <__assert_fail@plt+0x72f0>
   17874:	mov	sl, r0
   17878:	str	r0, [r4]
   1787c:	cmp	r6, r9
   17880:	ldrdeq	r0, [r9]
   17884:	stmeq	sl, {r0, r1}
   17888:	ldr	r1, [r8]
   1788c:	add	r0, sl, r1, lsl #3
   17890:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17894:	sub	r1, r2, r1
   17898:	lsl	r2, r1, #3
   1789c:	mov	r1, #0
   178a0:	bl	112c4 <memset@plt>
   178a4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   178a8:	str	r0, [r8]
   178ac:	mov	r9, sl
   178b0:	ldr	r6, [r9, r5, lsl #3]!
   178b4:	ldr	r4, [r9, #4]!
   178b8:	ldm	r7, {r0, r1}
   178bc:	ldr	r2, [r7, #40]	; 0x28
   178c0:	ldr	r3, [r7, #44]	; 0x2c
   178c4:	orr	r8, r1, #1
   178c8:	add	r1, r7, #8
   178cc:	stm	sp, {r0, r8}
   178d0:	str	r1, [sp, #20]
   178d4:	add	r0, sp, #8
   178d8:	stm	r0, {r1, r2, r3}
   178dc:	mov	r0, r4
   178e0:	mov	r1, r6
   178e4:	ldr	r2, [sp, #32]
   178e8:	ldr	r3, [sp, #36]	; 0x24
   178ec:	bl	16644 <__assert_fail@plt+0x5260>
   178f0:	cmp	r6, r0
   178f4:	bhi	17958 <__assert_fail@plt+0x6574>
   178f8:	add	r6, r0, #1
   178fc:	str	r6, [sl, r5, lsl #3]
   17900:	movw	r0, #45544	; 0xb1e8
   17904:	movt	r0, #2
   17908:	cmp	r4, r0
   1790c:	beq	17918 <__assert_fail@plt+0x6534>
   17910:	mov	r0, r4
   17914:	bl	19448 <__assert_fail@plt+0x8064>
   17918:	mov	r0, r6
   1791c:	bl	185ec <__assert_fail@plt+0x7208>
   17920:	mov	r4, r0
   17924:	str	r0, [r9]
   17928:	ldr	r0, [r7]
   1792c:	ldr	r1, [r7, #40]	; 0x28
   17930:	ldr	r2, [r7, #44]	; 0x2c
   17934:	stm	sp, {r0, r8}
   17938:	ldr	r0, [sp, #20]
   1793c:	add	r3, sp, #8
   17940:	stm	r3, {r0, r1, r2}
   17944:	mov	r0, r4
   17948:	mov	r1, r6
   1794c:	ldr	r2, [sp, #32]
   17950:	ldr	r3, [sp, #36]	; 0x24
   17954:	bl	16644 <__assert_fail@plt+0x5260>
   17958:	ldr	r0, [sp, #28]
   1795c:	ldr	r1, [sp, #24]
   17960:	str	r1, [r0]
   17964:	mov	r0, r4
   17968:	sub	sp, fp, #28
   1796c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17970:	bl	113b4 <abort@plt>
   17974:	movw	r3, #45496	; 0xb1b8
   17978:	movt	r3, #2
   1797c:	b	177e0 <__assert_fail@plt+0x63fc>
   17980:	mov	r1, r0
   17984:	mov	r0, #0
   17988:	b	177d0 <__assert_fail@plt+0x63ec>
   1798c:	mov	r2, r1
   17990:	mov	r1, r0
   17994:	mov	r0, #0
   17998:	b	17974 <__assert_fail@plt+0x6590>
   1799c:	push	{r4, r5, r6, sl, fp, lr}
   179a0:	add	fp, sp, #16
   179a4:	sub	sp, sp, #48	; 0x30
   179a8:	mov	r4, r2
   179ac:	mov	r5, r0
   179b0:	mov	r6, sp
   179b4:	mov	r0, r6
   179b8:	bl	179d8 <__assert_fail@plt+0x65f4>
   179bc:	mov	r0, r5
   179c0:	mov	r1, r4
   179c4:	mvn	r2, #0
   179c8:	mov	r3, r6
   179cc:	bl	177e0 <__assert_fail@plt+0x63fc>
   179d0:	sub	sp, fp, #16
   179d4:	pop	{r4, r5, r6, sl, fp, pc}
   179d8:	vmov.i32	q8, #0	; 0x00000000
   179dc:	mov	r2, #32
   179e0:	mov	r3, r0
   179e4:	vst1.32	{d16-d17}, [r3], r2
   179e8:	vst1.32	{d16-d17}, [r3]
   179ec:	add	r2, r0, #16
   179f0:	vst1.32	{d16-d17}, [r2]
   179f4:	cmp	r1, #10
   179f8:	strne	r1, [r0]
   179fc:	bxne	lr
   17a00:	push	{fp, lr}
   17a04:	mov	fp, sp
   17a08:	bl	113b4 <abort@plt>
   17a0c:	push	{r4, r5, r6, r7, fp, lr}
   17a10:	add	fp, sp, #16
   17a14:	sub	sp, sp, #48	; 0x30
   17a18:	mov	r4, r3
   17a1c:	mov	r5, r2
   17a20:	mov	r6, r0
   17a24:	mov	r7, sp
   17a28:	mov	r0, r7
   17a2c:	bl	179d8 <__assert_fail@plt+0x65f4>
   17a30:	mov	r0, r6
   17a34:	mov	r1, r5
   17a38:	mov	r2, r4
   17a3c:	mov	r3, r7
   17a40:	bl	177e0 <__assert_fail@plt+0x63fc>
   17a44:	sub	sp, fp, #16
   17a48:	pop	{r4, r5, r6, r7, fp, pc}
   17a4c:	mov	r2, r1
   17a50:	mov	r1, r0
   17a54:	mov	r0, #0
   17a58:	b	1799c <__assert_fail@plt+0x65b8>
   17a5c:	mov	r3, r2
   17a60:	mov	r2, r1
   17a64:	mov	r1, r0
   17a68:	mov	r0, #0
   17a6c:	b	17a0c <__assert_fail@plt+0x6628>
   17a70:	push	{r4, r5, r6, sl, fp, lr}
   17a74:	add	fp, sp, #16
   17a78:	sub	sp, sp, #48	; 0x30
   17a7c:	mov	r4, r1
   17a80:	mov	r5, r0
   17a84:	mov	r0, #32
   17a88:	movw	r1, #45496	; 0xb1b8
   17a8c:	movt	r1, #2
   17a90:	add	r3, r1, #16
   17a94:	vld1.64	{d16-d17}, [r1], r0
   17a98:	mov	r6, sp
   17a9c:	vld1.64	{d18-d19}, [r3]
   17aa0:	add	r3, r6, #16
   17aa4:	vld1.64	{d20-d21}, [r1]
   17aa8:	vst1.64	{d18-d19}, [r3]
   17aac:	mov	r1, r6
   17ab0:	vst1.64	{d16-d17}, [r1], r0
   17ab4:	vst1.64	{d20-d21}, [r1]
   17ab8:	mov	r0, r6
   17abc:	mov	r1, r2
   17ac0:	mov	r2, #1
   17ac4:	bl	16538 <__assert_fail@plt+0x5154>
   17ac8:	mov	r0, #0
   17acc:	mov	r1, r5
   17ad0:	mov	r2, r4
   17ad4:	mov	r3, r6
   17ad8:	bl	177e0 <__assert_fail@plt+0x63fc>
   17adc:	sub	sp, fp, #16
   17ae0:	pop	{r4, r5, r6, sl, fp, pc}
   17ae4:	mov	r2, r1
   17ae8:	mvn	r1, #0
   17aec:	b	17a70 <__assert_fail@plt+0x668c>
   17af0:	mov	r1, #58	; 0x3a
   17af4:	b	17ae4 <__assert_fail@plt+0x6700>
   17af8:	mov	r2, #58	; 0x3a
   17afc:	b	17a70 <__assert_fail@plt+0x668c>
   17b00:	push	{r4, r5, r6, sl, fp, lr}
   17b04:	add	fp, sp, #16
   17b08:	sub	sp, sp, #48	; 0x30
   17b0c:	mov	r4, r2
   17b10:	mov	r5, r0
   17b14:	mov	r6, sp
   17b18:	mov	r0, r6
   17b1c:	bl	179d8 <__assert_fail@plt+0x65f4>
   17b20:	mov	r0, r6
   17b24:	mov	r1, #58	; 0x3a
   17b28:	mov	r2, #1
   17b2c:	bl	16538 <__assert_fail@plt+0x5154>
   17b30:	mov	r0, r5
   17b34:	mov	r1, r4
   17b38:	mvn	r2, #0
   17b3c:	mov	r3, r6
   17b40:	bl	177e0 <__assert_fail@plt+0x63fc>
   17b44:	sub	sp, fp, #16
   17b48:	pop	{r4, r5, r6, sl, fp, pc}
   17b4c:	push	{fp, lr}
   17b50:	mov	fp, sp
   17b54:	sub	sp, sp, #8
   17b58:	mvn	ip, #0
   17b5c:	str	ip, [sp]
   17b60:	bl	17b6c <__assert_fail@plt+0x6788>
   17b64:	mov	sp, fp
   17b68:	pop	{fp, pc}
   17b6c:	push	{r4, r5, r6, r7, fp, lr}
   17b70:	add	fp, sp, #16
   17b74:	sub	sp, sp, #48	; 0x30
   17b78:	mov	r7, r3
   17b7c:	mov	r5, r0
   17b80:	mov	r0, #32
   17b84:	movw	r3, #45496	; 0xb1b8
   17b88:	movt	r3, #2
   17b8c:	add	r4, r3, #16
   17b90:	vld1.64	{d16-d17}, [r3], r0
   17b94:	mov	r6, sp
   17b98:	vld1.64	{d18-d19}, [r4]
   17b9c:	add	r4, r6, #16
   17ba0:	vld1.64	{d20-d21}, [r3]
   17ba4:	vst1.64	{d18-d19}, [r4]
   17ba8:	mov	r3, r6
   17bac:	vst1.64	{d16-d17}, [r3], r0
   17bb0:	vst1.64	{d20-d21}, [r3]
   17bb4:	mov	r0, r6
   17bb8:	bl	16590 <__assert_fail@plt+0x51ac>
   17bbc:	ldr	r2, [fp, #8]
   17bc0:	mov	r0, r5
   17bc4:	mov	r1, r7
   17bc8:	mov	r3, r6
   17bcc:	bl	177e0 <__assert_fail@plt+0x63fc>
   17bd0:	sub	sp, fp, #16
   17bd4:	pop	{r4, r5, r6, r7, fp, pc}
   17bd8:	mov	r3, r2
   17bdc:	mov	r2, r1
   17be0:	mov	r1, r0
   17be4:	mov	r0, #0
   17be8:	b	17b4c <__assert_fail@plt+0x6768>
   17bec:	push	{fp, lr}
   17bf0:	mov	fp, sp
   17bf4:	sub	sp, sp, #8
   17bf8:	mov	ip, r2
   17bfc:	mov	r2, r1
   17c00:	mov	r1, r0
   17c04:	str	r3, [sp]
   17c08:	mov	r0, #0
   17c0c:	mov	r3, ip
   17c10:	bl	17b6c <__assert_fail@plt+0x6788>
   17c14:	mov	sp, fp
   17c18:	pop	{fp, pc}
   17c1c:	movw	r3, #45368	; 0xb138
   17c20:	movt	r3, #2
   17c24:	b	177e0 <__assert_fail@plt+0x63fc>
   17c28:	mov	r2, r1
   17c2c:	mov	r1, r0
   17c30:	mov	r0, #0
   17c34:	b	17c1c <__assert_fail@plt+0x6838>
   17c38:	mvn	r2, #0
   17c3c:	b	17c1c <__assert_fail@plt+0x6838>
   17c40:	mov	r1, r0
   17c44:	mov	r0, #0
   17c48:	b	17c38 <__assert_fail@plt+0x6854>
   17c4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17c50:	add	fp, sp, #24
   17c54:	sub	sp, sp, #16
   17c58:	mov	r4, r1
   17c5c:	mov	r5, r0
   17c60:	mov	r7, #0
   17c64:	mov	r0, #0
   17c68:	mov	r1, r5
   17c6c:	mov	r2, #5
   17c70:	bl	11180 <dcgettext@plt>
   17c74:	cmp	r0, r5
   17c78:	beq	17c84 <__assert_fail@plt+0x68a0>
   17c7c:	sub	sp, fp, #24
   17c80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17c84:	bl	19564 <__assert_fail@plt+0x8180>
   17c88:	mov	r6, r0
   17c8c:	mov	r8, #56	; 0x38
   17c90:	mov	r0, #45	; 0x2d
   17c94:	stm	sp, {r0, r8}
   17c98:	str	r7, [sp, #8]
   17c9c:	str	r7, [sp, #12]
   17ca0:	mov	r0, r6
   17ca4:	mov	r1, #85	; 0x55
   17ca8:	mov	r2, #84	; 0x54
   17cac:	mov	r3, #70	; 0x46
   17cb0:	bl	17d48 <__assert_fail@plt+0x6964>
   17cb4:	cmp	r0, #0
   17cb8:	beq	17cd4 <__assert_fail@plt+0x68f0>
   17cbc:	ldrb	r1, [r5]
   17cc0:	movw	r2, #42298	; 0xa53a
   17cc4:	movt	r2, #1
   17cc8:	movw	r0, #42302	; 0xa53e
   17ccc:	movt	r0, #1
   17cd0:	b	17d18 <__assert_fail@plt+0x6934>
   17cd4:	mov	r0, #48	; 0x30
   17cd8:	mov	r1, #51	; 0x33
   17cdc:	str	r8, [sp]
   17ce0:	stmib	sp, {r0, r1}
   17ce4:	str	r0, [sp, #12]
   17ce8:	mov	r0, r6
   17cec:	mov	r1, #71	; 0x47
   17cf0:	mov	r2, #66	; 0x42
   17cf4:	mov	r3, #49	; 0x31
   17cf8:	bl	17d48 <__assert_fail@plt+0x6964>
   17cfc:	cmp	r0, #0
   17d00:	beq	17d28 <__assert_fail@plt+0x6944>
   17d04:	ldrb	r1, [r5]
   17d08:	movw	r2, #42306	; 0xa542
   17d0c:	movt	r2, #1
   17d10:	movw	r0, #42310	; 0xa546
   17d14:	movt	r0, #1
   17d18:	cmp	r1, #96	; 0x60
   17d1c:	moveq	r0, r2
   17d20:	sub	sp, fp, #24
   17d24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d28:	movw	r1, #42292	; 0xa534
   17d2c:	movt	r1, #1
   17d30:	movw	r0, #42296	; 0xa538
   17d34:	movt	r0, #1
   17d38:	cmp	r4, #9
   17d3c:	moveq	r0, r1
   17d40:	sub	sp, fp, #24
   17d44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17d48:	push	{r4, r5, r6, r7, fp, lr}
   17d4c:	add	fp, sp, #16
   17d50:	sub	sp, sp, #16
   17d54:	mov	r4, r3
   17d58:	mov	r5, r2
   17d5c:	mov	r7, r1
   17d60:	mov	r6, r0
   17d64:	mov	r0, r1
   17d68:	bl	18f00 <__assert_fail@plt+0x7b1c>
   17d6c:	ldrb	r1, [r6]
   17d70:	cmp	r0, #0
   17d74:	andne	r1, r1, #223	; 0xdf
   17d78:	mov	r0, #0
   17d7c:	cmp	r1, r7
   17d80:	bne	17dc0 <__assert_fail@plt+0x69dc>
   17d84:	cmp	r7, #0
   17d88:	moveq	r0, #1
   17d8c:	subeq	sp, fp, #16
   17d90:	popeq	{r4, r5, r6, r7, fp, pc}
   17d94:	ldr	r0, [fp, #20]
   17d98:	ldr	r1, [fp, #16]
   17d9c:	ldr	r2, [fp, #12]
   17da0:	ldr	r3, [fp, #8]
   17da4:	str	r2, [sp]
   17da8:	str	r1, [sp, #4]
   17dac:	str	r0, [sp, #8]
   17db0:	mov	r0, r6
   17db4:	mov	r1, r5
   17db8:	mov	r2, r4
   17dbc:	bl	17dc8 <__assert_fail@plt+0x69e4>
   17dc0:	sub	sp, fp, #16
   17dc4:	pop	{r4, r5, r6, r7, fp, pc}
   17dc8:	push	{r4, r5, r6, r7, fp, lr}
   17dcc:	add	fp, sp, #16
   17dd0:	sub	sp, sp, #8
   17dd4:	mov	r4, r3
   17dd8:	mov	r5, r2
   17ddc:	mov	r7, r1
   17de0:	mov	r6, r0
   17de4:	mov	r0, r1
   17de8:	bl	18f00 <__assert_fail@plt+0x7b1c>
   17dec:	ldrb	r1, [r6, #1]
   17df0:	cmp	r0, #0
   17df4:	andne	r1, r1, #223	; 0xdf
   17df8:	mov	r0, #0
   17dfc:	cmp	r1, r7
   17e00:	bne	17e38 <__assert_fail@plt+0x6a54>
   17e04:	cmp	r7, #0
   17e08:	moveq	r0, #1
   17e0c:	subeq	sp, fp, #16
   17e10:	popeq	{r4, r5, r6, r7, fp, pc}
   17e14:	ldr	r0, [fp, #16]
   17e18:	ldr	r1, [fp, #12]
   17e1c:	ldr	r3, [fp, #8]
   17e20:	str	r1, [sp]
   17e24:	str	r0, [sp, #4]
   17e28:	mov	r0, r6
   17e2c:	mov	r1, r5
   17e30:	mov	r2, r4
   17e34:	bl	17e40 <__assert_fail@plt+0x6a5c>
   17e38:	sub	sp, fp, #16
   17e3c:	pop	{r4, r5, r6, r7, fp, pc}
   17e40:	push	{r4, r5, r6, r7, fp, lr}
   17e44:	add	fp, sp, #16
   17e48:	sub	sp, sp, #8
   17e4c:	mov	r4, r3
   17e50:	mov	r5, r2
   17e54:	mov	r7, r1
   17e58:	mov	r6, r0
   17e5c:	mov	r0, r1
   17e60:	bl	18f00 <__assert_fail@plt+0x7b1c>
   17e64:	ldrb	r1, [r6, #2]
   17e68:	cmp	r0, #0
   17e6c:	andne	r1, r1, #223	; 0xdf
   17e70:	mov	r0, #0
   17e74:	cmp	r1, r7
   17e78:	bne	17ea8 <__assert_fail@plt+0x6ac4>
   17e7c:	cmp	r7, #0
   17e80:	moveq	r0, #1
   17e84:	subeq	sp, fp, #16
   17e88:	popeq	{r4, r5, r6, r7, fp, pc}
   17e8c:	ldr	r0, [fp, #12]
   17e90:	ldr	r3, [fp, #8]
   17e94:	str	r0, [sp]
   17e98:	mov	r0, r6
   17e9c:	mov	r1, r5
   17ea0:	mov	r2, r4
   17ea4:	bl	17eb0 <__assert_fail@plt+0x6acc>
   17ea8:	sub	sp, fp, #16
   17eac:	pop	{r4, r5, r6, r7, fp, pc}
   17eb0:	push	{r4, r5, r6, r7, fp, lr}
   17eb4:	add	fp, sp, #16
   17eb8:	mov	r4, r3
   17ebc:	mov	r5, r2
   17ec0:	mov	r7, r1
   17ec4:	mov	r6, r0
   17ec8:	mov	r0, r1
   17ecc:	bl	18f00 <__assert_fail@plt+0x7b1c>
   17ed0:	ldrb	r1, [r6, #3]
   17ed4:	ldr	r3, [fp, #8]
   17ed8:	cmp	r0, #0
   17edc:	andne	r1, r1, #223	; 0xdf
   17ee0:	mov	r0, #0
   17ee4:	cmp	r1, r7
   17ee8:	popne	{r4, r5, r6, r7, fp, pc}
   17eec:	cmp	r7, #0
   17ef0:	beq	17f08 <__assert_fail@plt+0x6b24>
   17ef4:	mov	r0, r6
   17ef8:	mov	r1, r5
   17efc:	mov	r2, r4
   17f00:	pop	{r4, r5, r6, r7, fp, lr}
   17f04:	b	17f10 <__assert_fail@plt+0x6b2c>
   17f08:	mov	r0, #1
   17f0c:	pop	{r4, r5, r6, r7, fp, pc}
   17f10:	push	{r4, r5, r6, r7, fp, lr}
   17f14:	add	fp, sp, #16
   17f18:	mov	r4, r3
   17f1c:	mov	r5, r2
   17f20:	mov	r7, r1
   17f24:	mov	r6, r0
   17f28:	mov	r0, r1
   17f2c:	bl	18f00 <__assert_fail@plt+0x7b1c>
   17f30:	ldrb	r1, [r6, #4]
   17f34:	cmp	r0, #0
   17f38:	andne	r1, r1, #223	; 0xdf
   17f3c:	mov	r0, #0
   17f40:	cmp	r1, r7
   17f44:	popne	{r4, r5, r6, r7, fp, pc}
   17f48:	cmp	r7, #0
   17f4c:	beq	17f64 <__assert_fail@plt+0x6b80>
   17f50:	mov	r0, r6
   17f54:	mov	r1, r5
   17f58:	mov	r2, r4
   17f5c:	pop	{r4, r5, r6, r7, fp, lr}
   17f60:	b	17f6c <__assert_fail@plt+0x6b88>
   17f64:	mov	r0, #1
   17f68:	pop	{r4, r5, r6, r7, fp, pc}
   17f6c:	push	{r4, r5, r6, sl, fp, lr}
   17f70:	add	fp, sp, #16
   17f74:	mov	r4, r2
   17f78:	mov	r6, r1
   17f7c:	mov	r5, r0
   17f80:	mov	r0, r1
   17f84:	bl	18f00 <__assert_fail@plt+0x7b1c>
   17f88:	ldrb	r1, [r5, #5]
   17f8c:	cmp	r0, #0
   17f90:	andne	r1, r1, #223	; 0xdf
   17f94:	mov	r0, #0
   17f98:	cmp	r1, r6
   17f9c:	popne	{r4, r5, r6, sl, fp, pc}
   17fa0:	cmp	r6, #0
   17fa4:	beq	17fb8 <__assert_fail@plt+0x6bd4>
   17fa8:	mov	r0, r5
   17fac:	mov	r1, r4
   17fb0:	pop	{r4, r5, r6, sl, fp, lr}
   17fb4:	b	17fc0 <__assert_fail@plt+0x6bdc>
   17fb8:	mov	r0, #1
   17fbc:	pop	{r4, r5, r6, sl, fp, pc}
   17fc0:	push	{r4, r5, fp, lr}
   17fc4:	add	fp, sp, #8
   17fc8:	mov	r5, r1
   17fcc:	mov	r4, r0
   17fd0:	mov	r0, r1
   17fd4:	bl	18f00 <__assert_fail@plt+0x7b1c>
   17fd8:	ldrb	r1, [r4, #6]
   17fdc:	cmp	r0, #0
   17fe0:	andne	r1, r1, #223	; 0xdf
   17fe4:	mov	r0, #0
   17fe8:	cmp	r1, r5
   17fec:	popne	{r4, r5, fp, pc}
   17ff0:	cmp	r5, #0
   17ff4:	beq	18004 <__assert_fail@plt+0x6c20>
   17ff8:	mov	r0, r4
   17ffc:	pop	{r4, r5, fp, lr}
   18000:	b	1800c <__assert_fail@plt+0x6c28>
   18004:	mov	r0, #1
   18008:	pop	{r4, r5, fp, pc}
   1800c:	push	{r4, sl, fp, lr}
   18010:	add	fp, sp, #8
   18014:	mov	r4, r0
   18018:	mov	r0, #0
   1801c:	bl	18f00 <__assert_fail@plt+0x7b1c>
   18020:	ldrb	r1, [r4, #7]
   18024:	cmp	r0, #0
   18028:	beq	18040 <__assert_fail@plt+0x6c5c>
   1802c:	tst	r1, #223	; 0xdf
   18030:	moveq	r0, #1
   18034:	popeq	{r4, sl, fp, pc}
   18038:	mov	r0, #0
   1803c:	pop	{r4, sl, fp, pc}
   18040:	cmp	r1, #0
   18044:	moveq	r0, #1
   18048:	popeq	{r4, sl, fp, pc}
   1804c:	mov	r0, #0
   18050:	pop	{r4, sl, fp, pc}
   18054:	push	{r4, sl, fp, lr}
   18058:	add	fp, sp, #8
   1805c:	sub	sp, sp, #104	; 0x68
   18060:	mov	r4, r0
   18064:	movw	r0, #43135	; 0xa87f
   18068:	movt	r0, #1
   1806c:	mov	r1, sp
   18070:	bl	19960 <__assert_fail@plt+0x857c>
   18074:	mov	r1, r0
   18078:	mov	r0, #0
   1807c:	cmp	r1, #0
   18080:	beq	1808c <__assert_fail@plt+0x6ca8>
   18084:	sub	sp, fp, #8
   18088:	pop	{r4, sl, fp, pc}
   1808c:	ldr	r0, [sp, #96]	; 0x60
   18090:	ldr	r1, [sp, #100]	; 0x64
   18094:	ldm	sp, {r2, r3}
   18098:	stm	r4, {r0, r1, r2, r3}
   1809c:	mov	r0, r4
   180a0:	sub	sp, fp, #8
   180a4:	pop	{r4, sl, fp, pc}
   180a8:	push	{r4, r5, r6, r7, fp, lr}
   180ac:	add	fp, sp, #16
   180b0:	mov	r4, r0
   180b4:	cmp	r0, #2
   180b8:	movhi	r0, r4
   180bc:	pophi	{r4, r5, r6, r7, fp, pc}
   180c0:	mov	r0, r4
   180c4:	bl	19638 <__assert_fail@plt+0x8254>
   180c8:	mov	r5, r0
   180cc:	bl	112a0 <__errno_location@plt>
   180d0:	mov	r6, r0
   180d4:	ldr	r7, [r0]
   180d8:	mov	r0, r4
   180dc:	bl	113c0 <close@plt>
   180e0:	str	r7, [r6]
   180e4:	mov	r0, r5
   180e8:	pop	{r4, r5, r6, r7, fp, pc}
   180ec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   180f0:	add	fp, sp, #24
   180f4:	sub	sp, sp, #32
   180f8:	mov	r4, r2
   180fc:	mov	r8, r0
   18100:	ldr	r6, [fp, #12]
   18104:	ldr	r7, [fp, #8]
   18108:	cmp	r1, #0
   1810c:	beq	18134 <__assert_fail@plt+0x6d50>
   18110:	mov	r5, r1
   18114:	str	r4, [sp]
   18118:	str	r3, [sp, #4]
   1811c:	movw	r2, #42400	; 0xa5a0
   18120:	movt	r2, #1
   18124:	mov	r0, r8
   18128:	mov	r1, #1
   1812c:	mov	r3, r5
   18130:	b	1814c <__assert_fail@plt+0x6d68>
   18134:	str	r3, [sp]
   18138:	movw	r2, #42412	; 0xa5ac
   1813c:	movt	r2, #1
   18140:	mov	r0, r8
   18144:	mov	r1, #1
   18148:	mov	r3, r4
   1814c:	bl	112e8 <__fprintf_chk@plt>
   18150:	movw	r1, #42419	; 0xa5b3
   18154:	movt	r1, #1
   18158:	mov	r0, #0
   1815c:	mov	r2, #5
   18160:	bl	11180 <dcgettext@plt>
   18164:	mov	r3, r0
   18168:	movw	r0, #2022	; 0x7e6
   1816c:	str	r0, [sp]
   18170:	movw	r2, #43137	; 0xa881
   18174:	movt	r2, #1
   18178:	mov	r0, r8
   1817c:	mov	r1, #1
   18180:	bl	112e8 <__fprintf_chk@plt>
   18184:	movw	r4, #39609	; 0x9ab9
   18188:	movt	r4, #1
   1818c:	mov	r0, r4
   18190:	mov	r1, r8
   18194:	bl	11108 <fputs_unlocked@plt>
   18198:	movw	r1, #42423	; 0xa5b7
   1819c:	movt	r1, #1
   181a0:	mov	r0, #0
   181a4:	mov	r2, #5
   181a8:	bl	11180 <dcgettext@plt>
   181ac:	mov	r2, r0
   181b0:	movw	r3, #42594	; 0xa662
   181b4:	movt	r3, #1
   181b8:	mov	r0, r8
   181bc:	mov	r1, #1
   181c0:	bl	112e8 <__fprintf_chk@plt>
   181c4:	mov	r0, r4
   181c8:	mov	r1, r8
   181cc:	bl	11108 <fputs_unlocked@plt>
   181d0:	cmp	r6, #9
   181d4:	bhi	18210 <__assert_fail@plt+0x6e2c>
   181d8:	add	r0, pc, #0
   181dc:	ldr	pc, [r0, r6, lsl #2]
   181e0:	andeq	r8, r1, r8, lsl #4
   181e4:	andeq	r8, r1, ip, lsl r2
   181e8:	andeq	r8, r1, ip, asr #4
   181ec:	andeq	r8, r1, r4, ror r2
   181f0:	muleq	r1, ip, r2
   181f4:	andeq	r8, r1, r4, asr #5
   181f8:	andeq	r8, r1, ip, ror #5
   181fc:	andeq	r8, r1, r4, lsr #6
   18200:	andeq	r8, r1, r4, asr #7
   18204:	andeq	r8, r1, ip, ror #6
   18208:	sub	sp, fp, #24
   1820c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18210:	movw	r1, #42947	; 0xa7c3
   18214:	movt	r1, #1
   18218:	b	18374 <__assert_fail@plt+0x6f90>
   1821c:	movw	r1, #42628	; 0xa684
   18220:	movt	r1, #1
   18224:	mov	r0, #0
   18228:	mov	r2, #5
   1822c:	bl	11180 <dcgettext@plt>
   18230:	mov	r2, r0
   18234:	ldr	r3, [r7]
   18238:	mov	r0, r8
   1823c:	mov	r1, #1
   18240:	sub	sp, fp, #24
   18244:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18248:	b	112e8 <__fprintf_chk@plt>
   1824c:	movw	r1, #42644	; 0xa694
   18250:	movt	r1, #1
   18254:	mov	r0, #0
   18258:	mov	r2, #5
   1825c:	bl	11180 <dcgettext@plt>
   18260:	mov	r2, r0
   18264:	ldr	r3, [r7]
   18268:	ldr	r0, [r7, #4]
   1826c:	str	r0, [sp]
   18270:	b	18360 <__assert_fail@plt+0x6f7c>
   18274:	movw	r1, #42667	; 0xa6ab
   18278:	movt	r1, #1
   1827c:	mov	r0, #0
   18280:	mov	r2, #5
   18284:	bl	11180 <dcgettext@plt>
   18288:	mov	r2, r0
   1828c:	ldr	r3, [r7]
   18290:	ldmib	r7, {r0, r1}
   18294:	stm	sp, {r0, r1}
   18298:	b	18360 <__assert_fail@plt+0x6f7c>
   1829c:	movw	r1, #42695	; 0xa6c7
   182a0:	movt	r1, #1
   182a4:	mov	r0, #0
   182a8:	mov	r2, #5
   182ac:	bl	11180 <dcgettext@plt>
   182b0:	mov	r2, r0
   182b4:	ldr	r3, [r7]
   182b8:	ldmib	r7, {r0, r1, r7}
   182bc:	stm	sp, {r0, r1, r7}
   182c0:	b	18360 <__assert_fail@plt+0x6f7c>
   182c4:	movw	r1, #42727	; 0xa6e7
   182c8:	movt	r1, #1
   182cc:	mov	r0, #0
   182d0:	mov	r2, #5
   182d4:	bl	11180 <dcgettext@plt>
   182d8:	mov	r2, r0
   182dc:	ldr	r3, [r7]
   182e0:	ldmib	r7, {r0, r1, r6, r7}
   182e4:	stm	sp, {r0, r1, r6, r7}
   182e8:	b	18360 <__assert_fail@plt+0x6f7c>
   182ec:	movw	r1, #42763	; 0xa70b
   182f0:	movt	r1, #1
   182f4:	mov	r0, #0
   182f8:	mov	r2, #5
   182fc:	bl	11180 <dcgettext@plt>
   18300:	mov	r2, r0
   18304:	ldr	r3, [r7]
   18308:	ldmib	r7, {r0, r1, r6}
   1830c:	ldr	r5, [r7, #16]
   18310:	ldr	r7, [r7, #20]
   18314:	stm	sp, {r0, r1, r6}
   18318:	str	r5, [sp, #12]
   1831c:	str	r7, [sp, #16]
   18320:	b	18360 <__assert_fail@plt+0x6f7c>
   18324:	movw	r1, #42803	; 0xa733
   18328:	movt	r1, #1
   1832c:	mov	r0, #0
   18330:	mov	r2, #5
   18334:	bl	11180 <dcgettext@plt>
   18338:	mov	r2, r0
   1833c:	ldr	r3, [r7]
   18340:	ldmib	r7, {r0, r1, r6}
   18344:	ldr	r5, [r7, #16]
   18348:	ldr	r4, [r7, #20]
   1834c:	ldr	r7, [r7, #24]
   18350:	stm	sp, {r0, r1, r6}
   18354:	str	r5, [sp, #12]
   18358:	str	r4, [sp, #16]
   1835c:	str	r7, [sp, #20]
   18360:	mov	r0, r8
   18364:	mov	r1, #1
   18368:	b	18414 <__assert_fail@plt+0x7030>
   1836c:	movw	r1, #42895	; 0xa78f
   18370:	movt	r1, #1
   18374:	mov	r0, #0
   18378:	mov	r2, #5
   1837c:	bl	11180 <dcgettext@plt>
   18380:	mov	ip, r0
   18384:	ldr	r3, [r7]
   18388:	ldr	r0, [r7, #4]
   1838c:	ldr	r1, [r7, #8]
   18390:	ldr	r6, [r7, #12]
   18394:	ldr	r5, [r7, #16]
   18398:	ldr	r4, [r7, #20]
   1839c:	ldr	r2, [r7, #24]
   183a0:	ldr	lr, [r7, #28]
   183a4:	ldr	r7, [r7, #32]
   183a8:	stm	sp, {r0, r1, r6}
   183ac:	str	r5, [sp, #12]
   183b0:	str	r4, [sp, #16]
   183b4:	str	r2, [sp, #20]
   183b8:	str	lr, [sp, #24]
   183bc:	str	r7, [sp, #28]
   183c0:	b	18408 <__assert_fail@plt+0x7024>
   183c4:	movw	r1, #42847	; 0xa75f
   183c8:	movt	r1, #1
   183cc:	mov	r0, #0
   183d0:	mov	r2, #5
   183d4:	bl	11180 <dcgettext@plt>
   183d8:	mov	ip, r0
   183dc:	ldr	r3, [r7]
   183e0:	ldmib	r7, {r0, r1, r6}
   183e4:	ldr	r5, [r7, #16]
   183e8:	ldr	r4, [r7, #20]
   183ec:	ldr	r2, [r7, #24]
   183f0:	ldr	r7, [r7, #28]
   183f4:	stm	sp, {r0, r1, r6}
   183f8:	str	r5, [sp, #12]
   183fc:	str	r4, [sp, #16]
   18400:	str	r2, [sp, #20]
   18404:	str	r7, [sp, #24]
   18408:	mov	r0, r8
   1840c:	mov	r1, #1
   18410:	mov	r2, ip
   18414:	bl	112e8 <__fprintf_chk@plt>
   18418:	sub	sp, fp, #24
   1841c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18420:	push	{r4, sl, fp, lr}
   18424:	add	fp, sp, #8
   18428:	sub	sp, sp, #8
   1842c:	mov	lr, #0
   18430:	ldr	ip, [fp, #8]
   18434:	ldr	r4, [ip, lr, lsl #2]
   18438:	add	lr, lr, #1
   1843c:	cmp	r4, #0
   18440:	bne	18434 <__assert_fail@plt+0x7050>
   18444:	sub	r4, lr, #1
   18448:	str	ip, [sp]
   1844c:	str	r4, [sp, #4]
   18450:	bl	180ec <__assert_fail@plt+0x6d08>
   18454:	sub	sp, fp, #8
   18458:	pop	{r4, sl, fp, pc}
   1845c:	push	{r4, r5, fp, lr}
   18460:	add	fp, sp, #8
   18464:	sub	sp, sp, #48	; 0x30
   18468:	mov	ip, #0
   1846c:	ldr	r4, [fp, #8]
   18470:	add	lr, sp, #8
   18474:	ldr	r5, [r4]
   18478:	str	r5, [lr, ip, lsl #2]
   1847c:	cmp	r5, #0
   18480:	beq	18494 <__assert_fail@plt+0x70b0>
   18484:	add	ip, ip, #1
   18488:	add	r4, r4, #4
   1848c:	cmp	ip, #10
   18490:	bcc	18474 <__assert_fail@plt+0x7090>
   18494:	str	lr, [sp]
   18498:	str	ip, [sp, #4]
   1849c:	bl	180ec <__assert_fail@plt+0x6d08>
   184a0:	sub	sp, fp, #8
   184a4:	pop	{r4, r5, fp, pc}
   184a8:	push	{fp, lr}
   184ac:	mov	fp, sp
   184b0:	sub	sp, sp, #8
   184b4:	add	ip, fp, #8
   184b8:	str	ip, [sp, #4]
   184bc:	str	ip, [sp]
   184c0:	bl	1845c <__assert_fail@plt+0x7078>
   184c4:	mov	sp, fp
   184c8:	pop	{fp, pc}
   184cc:	push	{fp, lr}
   184d0:	mov	fp, sp
   184d4:	movw	r0, #45436	; 0xb17c
   184d8:	movt	r0, #2
   184dc:	ldr	r1, [r0]
   184e0:	movw	r0, #39609	; 0x9ab9
   184e4:	movt	r0, #1
   184e8:	bl	11108 <fputs_unlocked@plt>
   184ec:	movw	r1, #43007	; 0xa7ff
   184f0:	movt	r1, #1
   184f4:	mov	r0, #0
   184f8:	mov	r2, #5
   184fc:	bl	11180 <dcgettext@plt>
   18500:	mov	r1, r0
   18504:	movw	r2, #43027	; 0xa813
   18508:	movt	r2, #1
   1850c:	mov	r0, #1
   18510:	bl	112d0 <__printf_chk@plt>
   18514:	movw	r1, #43049	; 0xa829
   18518:	movt	r1, #1
   1851c:	mov	r0, #0
   18520:	mov	r2, #5
   18524:	bl	11180 <dcgettext@plt>
   18528:	mov	r1, r0
   1852c:	movw	r2, #40345	; 0x9d99
   18530:	movt	r2, #1
   18534:	movw	r3, #40639	; 0x9ebf
   18538:	movt	r3, #1
   1853c:	mov	r0, #1
   18540:	bl	112d0 <__printf_chk@plt>
   18544:	movw	r1, #43069	; 0xa83d
   18548:	movt	r1, #1
   1854c:	mov	r0, #0
   18550:	mov	r2, #5
   18554:	bl	11180 <dcgettext@plt>
   18558:	mov	r1, r0
   1855c:	movw	r2, #43108	; 0xa864
   18560:	movt	r2, #1
   18564:	mov	r0, #1
   18568:	pop	{fp, lr}
   1856c:	b	112d0 <__printf_chk@plt>
   18570:	b	18574 <__assert_fail@plt+0x7190>
   18574:	push	{r4, r5, r6, sl, fp, lr}
   18578:	add	fp, sp, #16
   1857c:	mov	r4, r2
   18580:	mov	r5, r1
   18584:	mov	r6, r0
   18588:	bl	195fc <__assert_fail@plt+0x8218>
   1858c:	cmp	r0, #0
   18590:	popne	{r4, r5, r6, sl, fp, pc}
   18594:	cmp	r6, #0
   18598:	beq	185ac <__assert_fail@plt+0x71c8>
   1859c:	cmp	r5, #0
   185a0:	cmpne	r4, #0
   185a4:	bne	185ac <__assert_fail@plt+0x71c8>
   185a8:	pop	{r4, r5, r6, sl, fp, pc}
   185ac:	bl	18960 <__assert_fail@plt+0x757c>
   185b0:	push	{fp, lr}
   185b4:	mov	fp, sp
   185b8:	bl	18a74 <__assert_fail@plt+0x7690>
   185bc:	bl	185c4 <__assert_fail@plt+0x71e0>
   185c0:	pop	{fp, pc}
   185c4:	cmp	r0, #0
   185c8:	bxne	lr
   185cc:	push	{fp, lr}
   185d0:	mov	fp, sp
   185d4:	bl	18960 <__assert_fail@plt+0x757c>
   185d8:	push	{fp, lr}
   185dc:	mov	fp, sp
   185e0:	bl	19530 <__assert_fail@plt+0x814c>
   185e4:	bl	185c4 <__assert_fail@plt+0x71e0>
   185e8:	pop	{fp, pc}
   185ec:	b	185b0 <__assert_fail@plt+0x71cc>
   185f0:	push	{r4, r5, fp, lr}
   185f4:	add	fp, sp, #8
   185f8:	mov	r4, r1
   185fc:	mov	r5, r0
   18600:	bl	18aa4 <__assert_fail@plt+0x76c0>
   18604:	cmp	r0, #0
   18608:	popne	{r4, r5, fp, pc}
   1860c:	cmp	r5, #0
   18610:	beq	18620 <__assert_fail@plt+0x723c>
   18614:	cmp	r4, #0
   18618:	bne	18620 <__assert_fail@plt+0x723c>
   1861c:	pop	{r4, r5, fp, pc}
   18620:	bl	18960 <__assert_fail@plt+0x757c>
   18624:	push	{fp, lr}
   18628:	mov	fp, sp
   1862c:	bl	19534 <__assert_fail@plt+0x8150>
   18630:	bl	185c4 <__assert_fail@plt+0x71e0>
   18634:	pop	{fp, pc}
   18638:	push	{fp, lr}
   1863c:	mov	fp, sp
   18640:	bl	19544 <__assert_fail@plt+0x8160>
   18644:	bl	185c4 <__assert_fail@plt+0x71e0>
   18648:	pop	{fp, pc}
   1864c:	push	{fp, lr}
   18650:	mov	fp, sp
   18654:	mov	r2, r1
   18658:	mov	r1, r0
   1865c:	mov	r0, #0
   18660:	bl	18574 <__assert_fail@plt+0x7190>
   18664:	pop	{fp, pc}
   18668:	mov	r2, r1
   1866c:	mov	r1, r0
   18670:	mov	r0, #0
   18674:	b	18638 <__assert_fail@plt+0x7254>
   18678:	mov	r2, #1
   1867c:	b	18680 <__assert_fail@plt+0x729c>
   18680:	push	{r4, r5, fp, lr}
   18684:	add	fp, sp, #8
   18688:	mov	r4, r1
   1868c:	ldr	r5, [r1]
   18690:	cmp	r0, #0
   18694:	beq	186ac <__assert_fail@plt+0x72c8>
   18698:	mov	r1, #1
   1869c:	add	r1, r1, r5, lsr #1
   186a0:	adds	r5, r5, r1
   186a4:	bcc	186c4 <__assert_fail@plt+0x72e0>
   186a8:	bl	18960 <__assert_fail@plt+0x757c>
   186ac:	cmp	r5, #0
   186b0:	bne	186c4 <__assert_fail@plt+0x72e0>
   186b4:	mov	r1, #64	; 0x40
   186b8:	udiv	r5, r1, r2
   186bc:	cmp	r2, #64	; 0x40
   186c0:	addhi	r5, r5, #1
   186c4:	mov	r1, r5
   186c8:	bl	18574 <__assert_fail@plt+0x7190>
   186cc:	str	r5, [r4]
   186d0:	pop	{r4, r5, fp, pc}
   186d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   186d8:	add	fp, sp, #24
   186dc:	mov	r8, r1
   186e0:	ldr	r6, [r1]
   186e4:	add	r1, r6, r6, asr #1
   186e8:	cmp	r1, r6
   186ec:	mvnvs	r1, #-2147483648	; 0x80000000
   186f0:	cmp	r1, r3
   186f4:	mov	r5, r1
   186f8:	movgt	r5, r3
   186fc:	cmn	r3, #1
   18700:	movle	r5, r1
   18704:	ldr	r4, [fp, #8]
   18708:	cmn	r4, #1
   1870c:	ble	18734 <__assert_fail@plt+0x7350>
   18710:	cmp	r4, #0
   18714:	beq	18788 <__assert_fail@plt+0x73a4>
   18718:	cmn	r5, #1
   1871c:	ble	1875c <__assert_fail@plt+0x7378>
   18720:	mvn	r7, #-2147483648	; 0x80000000
   18724:	udiv	r1, r7, r4
   18728:	cmp	r1, r5
   1872c:	bge	18788 <__assert_fail@plt+0x73a4>
   18730:	b	18798 <__assert_fail@plt+0x73b4>
   18734:	cmn	r5, #1
   18738:	ble	18778 <__assert_fail@plt+0x7394>
   1873c:	cmn	r4, #1
   18740:	beq	18788 <__assert_fail@plt+0x73a4>
   18744:	mov	r1, #-2147483648	; 0x80000000
   18748:	sdiv	r1, r1, r4
   1874c:	mvn	r7, #-2147483648	; 0x80000000
   18750:	cmp	r1, r5
   18754:	bge	18788 <__assert_fail@plt+0x73a4>
   18758:	b	18798 <__assert_fail@plt+0x73b4>
   1875c:	beq	18788 <__assert_fail@plt+0x73a4>
   18760:	mov	r1, #-2147483648	; 0x80000000
   18764:	sdiv	r1, r1, r5
   18768:	mvn	r7, #-2147483648	; 0x80000000
   1876c:	cmp	r1, r4
   18770:	bge	18788 <__assert_fail@plt+0x73a4>
   18774:	b	18798 <__assert_fail@plt+0x73b4>
   18778:	mvn	r7, #-2147483648	; 0x80000000
   1877c:	sdiv	r1, r7, r4
   18780:	cmp	r5, r1
   18784:	blt	18798 <__assert_fail@plt+0x73b4>
   18788:	mul	r1, r5, r4
   1878c:	mov	r7, #64	; 0x40
   18790:	cmp	r1, #63	; 0x3f
   18794:	bgt	187a0 <__assert_fail@plt+0x73bc>
   18798:	sdiv	r5, r7, r4
   1879c:	mul	r1, r5, r4
   187a0:	cmp	r0, #0
   187a4:	moveq	r7, #0
   187a8:	streq	r7, [r8]
   187ac:	sub	r7, r5, r6
   187b0:	cmp	r7, r2
   187b4:	bge	18860 <__assert_fail@plt+0x747c>
   187b8:	add	r5, r6, r2
   187bc:	mov	r1, #0
   187c0:	cmp	r5, r3
   187c4:	mov	r2, #0
   187c8:	movwgt	r2, #1
   187cc:	cmn	r3, #1
   187d0:	movwgt	r1, #1
   187d4:	cmp	r5, r6
   187d8:	bvs	18848 <__assert_fail@plt+0x7464>
   187dc:	ands	r1, r1, r2
   187e0:	bne	18848 <__assert_fail@plt+0x7464>
   187e4:	cmn	r4, #1
   187e8:	ble	18810 <__assert_fail@plt+0x742c>
   187ec:	cmp	r4, #0
   187f0:	beq	1885c <__assert_fail@plt+0x7478>
   187f4:	cmn	r5, #1
   187f8:	ble	18834 <__assert_fail@plt+0x7450>
   187fc:	mvn	r1, #-2147483648	; 0x80000000
   18800:	udiv	r1, r1, r4
   18804:	cmp	r1, r5
   18808:	bge	1885c <__assert_fail@plt+0x7478>
   1880c:	b	18848 <__assert_fail@plt+0x7464>
   18810:	cmn	r5, #1
   18814:	ble	1884c <__assert_fail@plt+0x7468>
   18818:	cmn	r4, #1
   1881c:	beq	1885c <__assert_fail@plt+0x7478>
   18820:	mov	r1, #-2147483648	; 0x80000000
   18824:	sdiv	r1, r1, r4
   18828:	cmp	r1, r5
   1882c:	bge	1885c <__assert_fail@plt+0x7478>
   18830:	b	18848 <__assert_fail@plt+0x7464>
   18834:	beq	1885c <__assert_fail@plt+0x7478>
   18838:	mov	r1, #-2147483648	; 0x80000000
   1883c:	sdiv	r1, r1, r5
   18840:	cmp	r1, r4
   18844:	bge	1885c <__assert_fail@plt+0x7478>
   18848:	bl	18960 <__assert_fail@plt+0x757c>
   1884c:	mvn	r1, #-2147483648	; 0x80000000
   18850:	sdiv	r1, r1, r4
   18854:	cmp	r5, r1
   18858:	blt	18848 <__assert_fail@plt+0x7464>
   1885c:	mul	r1, r5, r4
   18860:	bl	185f0 <__assert_fail@plt+0x720c>
   18864:	str	r5, [r8]
   18868:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1886c:	mov	r1, #1
   18870:	b	18874 <__assert_fail@plt+0x7490>
   18874:	push	{fp, lr}
   18878:	mov	fp, sp
   1887c:	bl	18a20 <__assert_fail@plt+0x763c>
   18880:	bl	185c4 <__assert_fail@plt+0x71e0>
   18884:	pop	{fp, pc}
   18888:	mov	r1, #1
   1888c:	b	18890 <__assert_fail@plt+0x74ac>
   18890:	push	{fp, lr}
   18894:	mov	fp, sp
   18898:	bl	19540 <__assert_fail@plt+0x815c>
   1889c:	bl	185c4 <__assert_fail@plt+0x71e0>
   188a0:	pop	{fp, pc}
   188a4:	push	{r4, r5, r6, sl, fp, lr}
   188a8:	add	fp, sp, #16
   188ac:	mov	r4, r1
   188b0:	mov	r5, r0
   188b4:	mov	r0, r1
   188b8:	bl	185b0 <__assert_fail@plt+0x71cc>
   188bc:	mov	r6, r0
   188c0:	mov	r1, r5
   188c4:	mov	r2, r4
   188c8:	bl	1115c <memcpy@plt>
   188cc:	mov	r0, r6
   188d0:	pop	{r4, r5, r6, sl, fp, pc}
   188d4:	push	{r4, r5, r6, sl, fp, lr}
   188d8:	add	fp, sp, #16
   188dc:	mov	r4, r1
   188e0:	mov	r5, r0
   188e4:	mov	r0, r1
   188e8:	bl	185d8 <__assert_fail@plt+0x71f4>
   188ec:	mov	r6, r0
   188f0:	mov	r1, r5
   188f4:	mov	r2, r4
   188f8:	bl	1115c <memcpy@plt>
   188fc:	mov	r0, r6
   18900:	pop	{r4, r5, r6, sl, fp, pc}
   18904:	push	{r4, r5, r6, sl, fp, lr}
   18908:	add	fp, sp, #16
   1890c:	mov	r4, r1
   18910:	mov	r5, r0
   18914:	add	r0, r1, #1
   18918:	bl	185d8 <__assert_fail@plt+0x71f4>
   1891c:	mov	r6, r0
   18920:	mov	r0, #0
   18924:	strb	r0, [r6, r4]
   18928:	mov	r0, r6
   1892c:	mov	r1, r5
   18930:	mov	r2, r4
   18934:	bl	1115c <memcpy@plt>
   18938:	mov	r0, r6
   1893c:	pop	{r4, r5, r6, sl, fp, pc}
   18940:	push	{r4, sl, fp, lr}
   18944:	add	fp, sp, #8
   18948:	mov	r4, r0
   1894c:	bl	1127c <strlen@plt>
   18950:	add	r1, r0, #1
   18954:	mov	r0, r4
   18958:	pop	{r4, sl, fp, lr}
   1895c:	b	188a4 <__assert_fail@plt+0x74c0>
   18960:	push	{fp, lr}
   18964:	mov	fp, sp
   18968:	movw	r0, #45344	; 0xb120
   1896c:	movt	r0, #2
   18970:	ldr	r4, [r0]
   18974:	movw	r1, #43184	; 0xa8b0
   18978:	movt	r1, #1
   1897c:	mov	r0, #0
   18980:	mov	r2, #5
   18984:	bl	11180 <dcgettext@plt>
   18988:	mov	r3, r0
   1898c:	movw	r2, #40518	; 0x9e46
   18990:	movt	r2, #1
   18994:	mov	r0, r4
   18998:	mov	r1, #0
   1899c:	bl	11210 <error@plt>
   189a0:	bl	113b4 <abort@plt>
   189a4:	push	{fp, lr}
   189a8:	mov	fp, sp
   189ac:	orr	r1, r1, #512	; 0x200
   189b0:	bl	12cf0 <__assert_fail@plt+0x190c>
   189b4:	cmp	r0, #0
   189b8:	popne	{fp, pc}
   189bc:	bl	112a0 <__errno_location@plt>
   189c0:	ldr	r0, [r0]
   189c4:	cmp	r0, #22
   189c8:	bne	189ec <__assert_fail@plt+0x7608>
   189cc:	movw	r0, #43201	; 0xa8c1
   189d0:	movt	r0, #1
   189d4:	movw	r1, #43217	; 0xa8d1
   189d8:	movt	r1, #1
   189dc:	movw	r3, #43228	; 0xa8dc
   189e0:	movt	r3, #1
   189e4:	mov	r2, #41	; 0x29
   189e8:	bl	113e4 <__assert_fail@plt>
   189ec:	bl	18960 <__assert_fail@plt+0x757c>
   189f0:	ldr	r0, [r0, #48]	; 0x30
   189f4:	and	r2, r0, #17
   189f8:	mov	r0, #1
   189fc:	cmp	r2, #16
   18a00:	beq	18a1c <__assert_fail@plt+0x7638>
   18a04:	mov	r0, #0
   18a08:	cmp	r2, #17
   18a0c:	bxne	lr
   18a10:	ldr	r0, [r1, #48]	; 0x30
   18a14:	cmp	r0, #0
   18a18:	movwne	r0, #1
   18a1c:	bx	lr
   18a20:	clz	r2, r1
   18a24:	lsr	r2, r2, #5
   18a28:	clz	r3, r0
   18a2c:	lsr	r3, r3, #5
   18a30:	orrs	r2, r3, r2
   18a34:	movwne	r1, #1
   18a38:	movwne	r0, #1
   18a3c:	cmp	r1, #0
   18a40:	beq	18a70 <__assert_fail@plt+0x768c>
   18a44:	mvn	r2, #-2147483648	; 0x80000000
   18a48:	udiv	r2, r2, r1
   18a4c:	cmp	r2, r0
   18a50:	bcs	18a70 <__assert_fail@plt+0x768c>
   18a54:	push	{fp, lr}
   18a58:	mov	fp, sp
   18a5c:	bl	112a0 <__errno_location@plt>
   18a60:	mov	r1, #12
   18a64:	str	r1, [r0]
   18a68:	mov	r0, #0
   18a6c:	pop	{fp, pc}
   18a70:	b	110fc <calloc@plt>
   18a74:	cmp	r0, #0
   18a78:	movweq	r0, #1
   18a7c:	cmn	r0, #1
   18a80:	ble	18a88 <__assert_fail@plt+0x76a4>
   18a84:	b	11228 <malloc@plt>
   18a88:	push	{fp, lr}
   18a8c:	mov	fp, sp
   18a90:	bl	112a0 <__errno_location@plt>
   18a94:	mov	r1, #12
   18a98:	str	r1, [r0]
   18a9c:	mov	r0, #0
   18aa0:	pop	{fp, pc}
   18aa4:	push	{fp, lr}
   18aa8:	mov	fp, sp
   18aac:	cmp	r0, #0
   18ab0:	beq	18acc <__assert_fail@plt+0x76e8>
   18ab4:	cmp	r1, #0
   18ab8:	beq	18ad8 <__assert_fail@plt+0x76f4>
   18abc:	cmn	r1, #1
   18ac0:	ble	18ae4 <__assert_fail@plt+0x7700>
   18ac4:	pop	{fp, lr}
   18ac8:	b	1118c <realloc@plt>
   18acc:	mov	r0, r1
   18ad0:	pop	{fp, lr}
   18ad4:	b	18a74 <__assert_fail@plt+0x7690>
   18ad8:	bl	19448 <__assert_fail@plt+0x8064>
   18adc:	mov	r0, #0
   18ae0:	pop	{fp, pc}
   18ae4:	bl	112a0 <__errno_location@plt>
   18ae8:	mov	r1, #12
   18aec:	str	r1, [r0]
   18af0:	mov	r0, #0
   18af4:	pop	{fp, pc}
   18af8:	push	{r4, r5, fp, lr}
   18afc:	add	fp, sp, #8
   18b00:	rsb	lr, r2, #64	; 0x40
   18b04:	lsr	ip, r0, lr
   18b08:	rsb	r3, lr, #32
   18b0c:	orr	ip, ip, r1, lsl r3
   18b10:	rsb	r4, r2, #32
   18b14:	cmp	r4, #0
   18b18:	lsrge	ip, r1, r4
   18b1c:	lsl	r3, r0, r2
   18b20:	sub	r5, r2, #32
   18b24:	cmp	r5, #0
   18b28:	movwge	r3, #0
   18b2c:	orr	ip, ip, r3
   18b30:	lsr	r3, r0, r4
   18b34:	orr	r2, r3, r1, lsl r2
   18b38:	lslge	r2, r0, r5
   18b3c:	lsr	r0, r1, lr
   18b40:	cmp	r4, #0
   18b44:	movwge	r0, #0
   18b48:	orr	r1, r0, r2
   18b4c:	mov	r0, ip
   18b50:	pop	{r4, r5, fp, pc}
   18b54:	push	{r4, r5, fp, lr}
   18b58:	add	fp, sp, #8
   18b5c:	lsr	ip, r0, r2
   18b60:	rsb	r3, r2, #32
   18b64:	orr	ip, ip, r1, lsl r3
   18b68:	sub	lr, r2, #32
   18b6c:	cmp	lr, #0
   18b70:	lsrge	ip, r1, lr
   18b74:	rsb	r4, r2, #64	; 0x40
   18b78:	lsl	r5, r0, r4
   18b7c:	cmp	r3, #0
   18b80:	movwge	r5, #0
   18b84:	orr	ip, r5, ip
   18b88:	rsb	r5, r4, #32
   18b8c:	lsr	r5, r0, r5
   18b90:	orr	r4, r5, r1, lsl r4
   18b94:	cmp	r3, #0
   18b98:	lslge	r4, r0, r3
   18b9c:	lsr	r0, r1, r2
   18ba0:	cmp	lr, #0
   18ba4:	movwge	r0, #0
   18ba8:	orr	r1, r4, r0
   18bac:	mov	r0, ip
   18bb0:	pop	{r4, r5, fp, pc}
   18bb4:	rsb	r1, r1, #32
   18bb8:	ror	r0, r0, r1
   18bbc:	bx	lr
   18bc0:	ror	r0, r0, r1
   18bc4:	bx	lr
   18bc8:	rsb	r1, r1, #32
   18bcc:	ror	r0, r0, r1
   18bd0:	bx	lr
   18bd4:	ror	r0, r0, r1
   18bd8:	bx	lr
   18bdc:	and	r2, r1, #15
   18be0:	lsl	r2, r0, r2
   18be4:	rsb	r1, r1, #0
   18be8:	and	r1, r1, #15
   18bec:	orr	r0, r2, r0, lsr r1
   18bf0:	uxth	r0, r0
   18bf4:	bx	lr
   18bf8:	and	r2, r1, #15
   18bfc:	lsr	r2, r0, r2
   18c00:	rsb	r1, r1, #0
   18c04:	and	r1, r1, #15
   18c08:	orr	r0, r2, r0, lsl r1
   18c0c:	uxth	r0, r0
   18c10:	bx	lr
   18c14:	and	r2, r1, #7
   18c18:	lsl	r2, r0, r2
   18c1c:	rsb	r1, r1, #0
   18c20:	and	r1, r1, #7
   18c24:	orr	r0, r2, r0, lsr r1
   18c28:	uxtb	r0, r0
   18c2c:	bx	lr
   18c30:	and	r2, r1, #7
   18c34:	lsr	r2, r0, r2
   18c38:	rsb	r1, r1, #0
   18c3c:	and	r1, r1, #7
   18c40:	orr	r0, r2, r0, lsl r1
   18c44:	uxtb	r0, r0
   18c48:	bx	lr
   18c4c:	mov	r1, r0
   18c50:	sub	r2, r0, #65	; 0x41
   18c54:	mov	r0, #1
   18c58:	cmp	r2, #26
   18c5c:	subcs	r2, r1, #97	; 0x61
   18c60:	cmpcs	r2, #26
   18c64:	bcs	18c6c <__assert_fail@plt+0x7888>
   18c68:	bx	lr
   18c6c:	sub	r1, r1, #48	; 0x30
   18c70:	cmp	r1, #10
   18c74:	movcs	r0, #0
   18c78:	bx	lr
   18c7c:	mov	r1, r0
   18c80:	sub	r2, r0, #65	; 0x41
   18c84:	mov	r0, #1
   18c88:	cmp	r2, #26
   18c8c:	subcs	r1, r1, #97	; 0x61
   18c90:	cmpcs	r1, #26
   18c94:	movcs	r0, #0
   18c98:	bx	lr
   18c9c:	mov	r1, #0
   18ca0:	cmp	r0, #128	; 0x80
   18ca4:	movwcc	r1, #1
   18ca8:	mov	r0, r1
   18cac:	bx	lr
   18cb0:	sub	r1, r0, #9
   18cb4:	clz	r1, r1
   18cb8:	lsr	r1, r1, #5
   18cbc:	sub	r0, r0, #32
   18cc0:	clz	r0, r0
   18cc4:	lsr	r0, r0, #5
   18cc8:	orr	r0, r0, r1
   18ccc:	bx	lr
   18cd0:	mov	r1, r0
   18cd4:	mov	r0, #1
   18cd8:	cmp	r1, #32
   18cdc:	bxcc	lr
   18ce0:	cmp	r1, #127	; 0x7f
   18ce4:	movne	r0, #0
   18ce8:	bx	lr
   18cec:	sub	r1, r0, #48	; 0x30
   18cf0:	mov	r0, #0
   18cf4:	cmp	r1, #10
   18cf8:	movwcc	r0, #1
   18cfc:	bx	lr
   18d00:	sub	r1, r0, #33	; 0x21
   18d04:	mov	r0, #0
   18d08:	cmp	r1, #94	; 0x5e
   18d0c:	movwcc	r0, #1
   18d10:	bx	lr
   18d14:	sub	r1, r0, #97	; 0x61
   18d18:	mov	r0, #0
   18d1c:	cmp	r1, #26
   18d20:	movwcc	r0, #1
   18d24:	bx	lr
   18d28:	sub	r1, r0, #32
   18d2c:	mov	r0, #0
   18d30:	cmp	r1, #95	; 0x5f
   18d34:	movwcc	r0, #1
   18d38:	bx	lr
   18d3c:	sub	r1, r0, #33	; 0x21
   18d40:	cmp	r1, #93	; 0x5d
   18d44:	bhi	18ed0 <__assert_fail@plt+0x7aec>
   18d48:	mov	r0, #1
   18d4c:	add	r2, pc, #0
   18d50:	ldr	pc, [r2, r1, lsl #2]
   18d54:	andeq	r8, r1, ip, asr #29
   18d58:	andeq	r8, r1, ip, asr #29
   18d5c:	andeq	r8, r1, ip, asr #29
   18d60:	andeq	r8, r1, ip, asr #29
   18d64:	andeq	r8, r1, ip, asr #29
   18d68:	andeq	r8, r1, ip, asr #29
   18d6c:	andeq	r8, r1, ip, asr #29
   18d70:	andeq	r8, r1, ip, asr #29
   18d74:	andeq	r8, r1, ip, asr #29
   18d78:	andeq	r8, r1, ip, asr #29
   18d7c:	andeq	r8, r1, ip, asr #29
   18d80:	andeq	r8, r1, ip, asr #29
   18d84:	andeq	r8, r1, ip, asr #29
   18d88:	andeq	r8, r1, ip, asr #29
   18d8c:	andeq	r8, r1, ip, asr #29
   18d90:	ldrdeq	r8, [r1], -r0
   18d94:	ldrdeq	r8, [r1], -r0
   18d98:	ldrdeq	r8, [r1], -r0
   18d9c:	ldrdeq	r8, [r1], -r0
   18da0:	ldrdeq	r8, [r1], -r0
   18da4:	ldrdeq	r8, [r1], -r0
   18da8:	ldrdeq	r8, [r1], -r0
   18dac:	ldrdeq	r8, [r1], -r0
   18db0:	ldrdeq	r8, [r1], -r0
   18db4:	ldrdeq	r8, [r1], -r0
   18db8:	andeq	r8, r1, ip, asr #29
   18dbc:	andeq	r8, r1, ip, asr #29
   18dc0:	andeq	r8, r1, ip, asr #29
   18dc4:	andeq	r8, r1, ip, asr #29
   18dc8:	andeq	r8, r1, ip, asr #29
   18dcc:	andeq	r8, r1, ip, asr #29
   18dd0:	andeq	r8, r1, ip, asr #29
   18dd4:	ldrdeq	r8, [r1], -r0
   18dd8:	ldrdeq	r8, [r1], -r0
   18ddc:	ldrdeq	r8, [r1], -r0
   18de0:	ldrdeq	r8, [r1], -r0
   18de4:	ldrdeq	r8, [r1], -r0
   18de8:	ldrdeq	r8, [r1], -r0
   18dec:	ldrdeq	r8, [r1], -r0
   18df0:	ldrdeq	r8, [r1], -r0
   18df4:	ldrdeq	r8, [r1], -r0
   18df8:	ldrdeq	r8, [r1], -r0
   18dfc:	ldrdeq	r8, [r1], -r0
   18e00:	ldrdeq	r8, [r1], -r0
   18e04:	ldrdeq	r8, [r1], -r0
   18e08:	ldrdeq	r8, [r1], -r0
   18e0c:	ldrdeq	r8, [r1], -r0
   18e10:	ldrdeq	r8, [r1], -r0
   18e14:	ldrdeq	r8, [r1], -r0
   18e18:	ldrdeq	r8, [r1], -r0
   18e1c:	ldrdeq	r8, [r1], -r0
   18e20:	ldrdeq	r8, [r1], -r0
   18e24:	ldrdeq	r8, [r1], -r0
   18e28:	ldrdeq	r8, [r1], -r0
   18e2c:	ldrdeq	r8, [r1], -r0
   18e30:	ldrdeq	r8, [r1], -r0
   18e34:	ldrdeq	r8, [r1], -r0
   18e38:	ldrdeq	r8, [r1], -r0
   18e3c:	andeq	r8, r1, ip, asr #29
   18e40:	andeq	r8, r1, ip, asr #29
   18e44:	andeq	r8, r1, ip, asr #29
   18e48:	andeq	r8, r1, ip, asr #29
   18e4c:	andeq	r8, r1, ip, asr #29
   18e50:	andeq	r8, r1, ip, asr #29
   18e54:	ldrdeq	r8, [r1], -r0
   18e58:	ldrdeq	r8, [r1], -r0
   18e5c:	ldrdeq	r8, [r1], -r0
   18e60:	ldrdeq	r8, [r1], -r0
   18e64:	ldrdeq	r8, [r1], -r0
   18e68:	ldrdeq	r8, [r1], -r0
   18e6c:	ldrdeq	r8, [r1], -r0
   18e70:	ldrdeq	r8, [r1], -r0
   18e74:	ldrdeq	r8, [r1], -r0
   18e78:	ldrdeq	r8, [r1], -r0
   18e7c:	ldrdeq	r8, [r1], -r0
   18e80:	ldrdeq	r8, [r1], -r0
   18e84:	ldrdeq	r8, [r1], -r0
   18e88:	ldrdeq	r8, [r1], -r0
   18e8c:	ldrdeq	r8, [r1], -r0
   18e90:	ldrdeq	r8, [r1], -r0
   18e94:	ldrdeq	r8, [r1], -r0
   18e98:	ldrdeq	r8, [r1], -r0
   18e9c:	ldrdeq	r8, [r1], -r0
   18ea0:	ldrdeq	r8, [r1], -r0
   18ea4:	ldrdeq	r8, [r1], -r0
   18ea8:	ldrdeq	r8, [r1], -r0
   18eac:	ldrdeq	r8, [r1], -r0
   18eb0:	ldrdeq	r8, [r1], -r0
   18eb4:	ldrdeq	r8, [r1], -r0
   18eb8:	ldrdeq	r8, [r1], -r0
   18ebc:	andeq	r8, r1, ip, asr #29
   18ec0:	andeq	r8, r1, ip, asr #29
   18ec4:	andeq	r8, r1, ip, asr #29
   18ec8:	andeq	r8, r1, ip, asr #29
   18ecc:	bx	lr
   18ed0:	mov	r0, #0
   18ed4:	bx	lr
   18ed8:	sub	r0, r0, #9
   18edc:	cmp	r0, #23
   18ee0:	movhi	r0, #0
   18ee4:	bxhi	lr
   18ee8:	bic	r0, r0, #-16777216	; 0xff000000
   18eec:	movw	r1, #31
   18ef0:	movt	r1, #128	; 0x80
   18ef4:	mov	r2, #1
   18ef8:	and	r0, r2, r1, lsr r0
   18efc:	bx	lr
   18f00:	sub	r1, r0, #65	; 0x41
   18f04:	mov	r0, #0
   18f08:	cmp	r1, #26
   18f0c:	movwcc	r0, #1
   18f10:	bx	lr
   18f14:	mov	r1, r0
   18f18:	sub	r2, r0, #48	; 0x30
   18f1c:	mov	r0, #1
   18f20:	cmp	r2, #22
   18f24:	bhi	18f3c <__assert_fail@plt+0x7b58>
   18f28:	mov	ip, #1
   18f2c:	movw	r3, #1023	; 0x3ff
   18f30:	movt	r3, #126	; 0x7e
   18f34:	tst	r3, ip, lsl r2
   18f38:	bxne	lr
   18f3c:	sub	r1, r1, #97	; 0x61
   18f40:	cmp	r1, #6
   18f44:	movcs	r0, #0
   18f48:	bxcs	lr
   18f4c:	bx	lr
   18f50:	sub	r1, r0, #65	; 0x41
   18f54:	cmp	r1, #26
   18f58:	addcc	r0, r0, #32
   18f5c:	bx	lr
   18f60:	sub	r1, r0, #97	; 0x61
   18f64:	cmp	r1, #26
   18f68:	subcc	r0, r0, #32
   18f6c:	bx	lr
   18f70:	push	{r4, r5, r6, sl, fp, lr}
   18f74:	add	fp, sp, #16
   18f78:	mov	r4, r0
   18f7c:	bl	111ec <__fpending@plt>
   18f80:	mov	r5, r0
   18f84:	mov	r0, r4
   18f88:	bl	111f8 <ferror_unlocked@plt>
   18f8c:	mov	r6, r0
   18f90:	mov	r0, r4
   18f94:	bl	19114 <__assert_fail@plt+0x7d30>
   18f98:	cmp	r6, #0
   18f9c:	beq	18fbc <__assert_fail@plt+0x7bd8>
   18fa0:	mvn	r4, #0
   18fa4:	cmp	r0, #0
   18fa8:	bne	18ff0 <__assert_fail@plt+0x7c0c>
   18fac:	bl	112a0 <__errno_location@plt>
   18fb0:	mov	r1, #0
   18fb4:	str	r1, [r0]
   18fb8:	b	18ff0 <__assert_fail@plt+0x7c0c>
   18fbc:	cmp	r0, #0
   18fc0:	mov	r4, r0
   18fc4:	mvnne	r4, #0
   18fc8:	cmp	r5, #0
   18fcc:	bne	18ff0 <__assert_fail@plt+0x7c0c>
   18fd0:	cmp	r0, #0
   18fd4:	beq	18ff0 <__assert_fail@plt+0x7c0c>
   18fd8:	bl	112a0 <__errno_location@plt>
   18fdc:	ldr	r0, [r0]
   18fe0:	subs	r4, r0, #9
   18fe4:	mvnne	r4, #0
   18fe8:	mov	r0, r4
   18fec:	pop	{r4, r5, r6, sl, fp, pc}
   18ff0:	mov	r0, r4
   18ff4:	pop	{r4, r5, r6, sl, fp, pc}
   18ff8:	mov	r1, #0
   18ffc:	movw	r2, #62998	; 0xf616
   19000:	movt	r2, #149	; 0x95
   19004:	str	r1, [r0, #16]
   19008:	str	r1, [r0, #20]
   1900c:	str	r2, [r0, #24]
   19010:	bx	lr
   19014:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19018:	add	fp, sp, #24
   1901c:	mov	r5, r1
   19020:	mov	r4, r0
   19024:	ldr	r0, [r0, #24]
   19028:	movw	r1, #62998	; 0xf616
   1902c:	movt	r1, #149	; 0x95
   19030:	cmp	r0, r1
   19034:	bne	190d4 <__assert_fail@plt+0x7cf0>
   19038:	mov	r1, r4
   1903c:	ldr	r2, [r1, #16]!
   19040:	ldr	r3, [r1, #4]
   19044:	orrs	r0, r2, r3
   19048:	beq	19088 <__assert_fail@plt+0x7ca4>
   1904c:	ldm	r4, {r0, r7}
   19050:	ldr	r6, [r5, #96]	; 0x60
   19054:	ldr	r9, [r5, #100]	; 0x64
   19058:	eor	r7, r9, r7
   1905c:	eor	r0, r6, r0
   19060:	orrs	r0, r0, r7
   19064:	bne	19088 <__assert_fail@plt+0x7ca4>
   19068:	ldr	r0, [r4, #8]
   1906c:	ldr	r7, [r4, #12]
   19070:	ldm	r5, {r6, r9}
   19074:	eor	r7, r9, r7
   19078:	eor	r0, r6, r0
   1907c:	orrs	r0, r0, r7
   19080:	mov	r0, #1
   19084:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   19088:	adds	r6, r2, #1
   1908c:	adc	r7, r3, #0
   19090:	strd	r6, [r1]
   19094:	mov	r0, r6
   19098:	mov	r1, r7
   1909c:	bl	190f4 <__assert_fail@plt+0x7d10>
   190a0:	mov	r1, r0
   190a4:	mov	r0, #0
   190a8:	cmp	r1, #0
   190ac:	beq	190d0 <__assert_fail@plt+0x7cec>
   190b0:	orrs	r1, r6, r7
   190b4:	moveq	r0, #1
   190b8:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   190bc:	ldrd	r2, [r5]
   190c0:	str	r3, [r4, #12]
   190c4:	str	r2, [r4, #8]
   190c8:	ldrd	r2, [r5, #96]	; 0x60
   190cc:	stm	r4, {r2, r3}
   190d0:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   190d4:	movw	r0, #43306	; 0xa92a
   190d8:	movt	r0, #1
   190dc:	movw	r1, #43330	; 0xa942
   190e0:	movt	r1, #1
   190e4:	movw	r3, #43348	; 0xa954
   190e8:	movt	r3, #1
   190ec:	mov	r2, #60	; 0x3c
   190f0:	bl	113e4 <__assert_fail@plt>
   190f4:	subs	r2, r0, #1
   190f8:	and	r0, r2, r0
   190fc:	sbc	r2, r1, #0
   19100:	and	r1, r2, r1
   19104:	orr	r0, r0, r1
   19108:	clz	r0, r0
   1910c:	lsr	r0, r0, #5
   19110:	bx	lr
   19114:	push	{r4, r5, fp, lr}
   19118:	add	fp, sp, #8
   1911c:	sub	sp, sp, #8
   19120:	mov	r4, r0
   19124:	bl	112dc <fileno@plt>
   19128:	cmn	r0, #1
   1912c:	ble	191a4 <__assert_fail@plt+0x7dc0>
   19130:	mov	r0, r4
   19134:	bl	11240 <__freading@plt>
   19138:	cmp	r0, #0
   1913c:	beq	19168 <__assert_fail@plt+0x7d84>
   19140:	mov	r0, r4
   19144:	bl	112dc <fileno@plt>
   19148:	mov	r1, #1
   1914c:	str	r1, [sp]
   19150:	mov	r2, #0
   19154:	mov	r3, #0
   19158:	bl	111d4 <lseek64@plt>
   1915c:	and	r0, r0, r1
   19160:	cmn	r0, #1
   19164:	beq	191a4 <__assert_fail@plt+0x7dc0>
   19168:	mov	r0, r4
   1916c:	bl	193e0 <__assert_fail@plt+0x7ffc>
   19170:	cmp	r0, #0
   19174:	beq	191a4 <__assert_fail@plt+0x7dc0>
   19178:	bl	112a0 <__errno_location@plt>
   1917c:	ldr	r5, [r0]
   19180:	mov	r0, r4
   19184:	bl	112f4 <fclose@plt>
   19188:	cmp	r5, #0
   1918c:	beq	1919c <__assert_fail@plt+0x7db8>
   19190:	bl	112a0 <__errno_location@plt>
   19194:	str	r5, [r0]
   19198:	mvn	r0, #0
   1919c:	sub	sp, fp, #8
   191a0:	pop	{r4, r5, fp, pc}
   191a4:	mov	r0, r4
   191a8:	sub	sp, fp, #8
   191ac:	pop	{r4, r5, fp, lr}
   191b0:	b	112f4 <fclose@plt>
   191b4:	sub	sp, sp, #8
   191b8:	push	{fp, lr}
   191bc:	mov	fp, sp
   191c0:	sub	sp, sp, #8
   191c4:	str	r3, [fp, #12]
   191c8:	str	r2, [fp, #8]
   191cc:	add	r2, fp, #8
   191d0:	str	r2, [sp, #4]
   191d4:	cmp	r1, #11
   191d8:	bhi	19218 <__assert_fail@plt+0x7e34>
   191dc:	mov	r2, #1
   191e0:	movw	r3, #1300	; 0x514
   191e4:	tst	r3, r2, lsl r1
   191e8:	bne	19268 <__assert_fail@plt+0x7e84>
   191ec:	movw	r3, #2570	; 0xa0a
   191f0:	tst	r3, r2, lsl r1
   191f4:	bne	19240 <__assert_fail@plt+0x7e5c>
   191f8:	cmp	r1, #0
   191fc:	bne	19218 <__assert_fail@plt+0x7e34>
   19200:	ldr	r1, [sp, #4]
   19204:	add	r2, r1, #4
   19208:	str	r2, [sp, #4]
   1920c:	ldr	r1, [r1]
   19210:	bl	1928c <__assert_fail@plt+0x7ea8>
   19214:	b	1927c <__assert_fail@plt+0x7e98>
   19218:	sub	r2, r1, #1024	; 0x400
   1921c:	cmp	r2, #10
   19220:	bhi	19268 <__assert_fail@plt+0x7e84>
   19224:	mov	ip, #1
   19228:	movw	r3, #645	; 0x285
   1922c:	tst	r3, ip, lsl r2
   19230:	bne	19268 <__assert_fail@plt+0x7e84>
   19234:	movw	r3, #1282	; 0x502
   19238:	tst	r3, ip, lsl r2
   1923c:	beq	19248 <__assert_fail@plt+0x7e64>
   19240:	bl	1130c <fcntl64@plt>
   19244:	b	1927c <__assert_fail@plt+0x7e98>
   19248:	cmp	r2, #6
   1924c:	bne	19268 <__assert_fail@plt+0x7e84>
   19250:	ldr	r1, [sp, #4]
   19254:	add	r2, r1, #4
   19258:	str	r2, [sp, #4]
   1925c:	ldr	r1, [r1]
   19260:	bl	19298 <__assert_fail@plt+0x7eb4>
   19264:	b	1927c <__assert_fail@plt+0x7e98>
   19268:	ldr	r2, [sp, #4]
   1926c:	add	r3, r2, #4
   19270:	str	r3, [sp, #4]
   19274:	ldr	r2, [r2]
   19278:	bl	1130c <fcntl64@plt>
   1927c:	mov	sp, fp
   19280:	pop	{fp, lr}
   19284:	add	sp, sp, #8
   19288:	bx	lr
   1928c:	mov	r2, r1
   19290:	mov	r1, #0
   19294:	b	1130c <fcntl64@plt>
   19298:	push	{r4, r5, r6, r7, fp, lr}
   1929c:	add	fp, sp, #16
   192a0:	mov	r5, r1
   192a4:	mov	r6, r0
   192a8:	movw	r7, #45800	; 0xb2e8
   192ac:	movt	r7, #2
   192b0:	ldr	r0, [r7]
   192b4:	cmp	r0, #0
   192b8:	blt	1931c <__assert_fail@plt+0x7f38>
   192bc:	mov	r0, r6
   192c0:	movw	r1, #1030	; 0x406
   192c4:	mov	r2, r5
   192c8:	bl	1130c <fcntl64@plt>
   192cc:	mov	r4, r0
   192d0:	cmn	r0, #1
   192d4:	bgt	19308 <__assert_fail@plt+0x7f24>
   192d8:	bl	112a0 <__errno_location@plt>
   192dc:	ldr	r0, [r0]
   192e0:	cmp	r0, #22
   192e4:	bne	19308 <__assert_fail@plt+0x7f24>
   192e8:	mov	r0, r6
   192ec:	mov	r1, r5
   192f0:	bl	1928c <__assert_fail@plt+0x7ea8>
   192f4:	mov	r4, r0
   192f8:	cmp	r0, #0
   192fc:	blt	1936c <__assert_fail@plt+0x7f88>
   19300:	mvn	r0, #0
   19304:	b	1930c <__assert_fail@plt+0x7f28>
   19308:	mov	r0, #1
   1930c:	str	r0, [r7]
   19310:	cmp	r4, #0
   19314:	bge	19334 <__assert_fail@plt+0x7f50>
   19318:	b	1936c <__assert_fail@plt+0x7f88>
   1931c:	mov	r0, r6
   19320:	mov	r1, r5
   19324:	bl	1928c <__assert_fail@plt+0x7ea8>
   19328:	mov	r4, r0
   1932c:	cmp	r4, #0
   19330:	blt	1936c <__assert_fail@plt+0x7f88>
   19334:	ldr	r0, [r7]
   19338:	cmn	r0, #1
   1933c:	bne	1936c <__assert_fail@plt+0x7f88>
   19340:	mov	r0, r4
   19344:	mov	r1, #1
   19348:	bl	1130c <fcntl64@plt>
   1934c:	cmp	r0, #0
   19350:	blt	19374 <__assert_fail@plt+0x7f90>
   19354:	orr	r2, r0, #1
   19358:	mov	r0, r4
   1935c:	mov	r1, #2
   19360:	bl	1130c <fcntl64@plt>
   19364:	cmn	r0, #1
   19368:	beq	19374 <__assert_fail@plt+0x7f90>
   1936c:	mov	r0, r4
   19370:	pop	{r4, r5, r6, r7, fp, pc}
   19374:	bl	112a0 <__errno_location@plt>
   19378:	mov	r5, r0
   1937c:	ldr	r6, [r0]
   19380:	mov	r0, r4
   19384:	bl	113c0 <close@plt>
   19388:	str	r6, [r5]
   1938c:	mvn	r4, #0
   19390:	mov	r0, r4
   19394:	pop	{r4, r5, r6, r7, fp, pc}
   19398:	sub	sp, sp, #8
   1939c:	push	{fp, lr}
   193a0:	mov	fp, sp
   193a4:	sub	sp, sp, #8
   193a8:	str	r3, [fp, #12]
   193ac:	str	r2, [fp, #8]
   193b0:	mov	r2, #0
   193b4:	tst	r1, #64	; 0x40
   193b8:	addne	r2, fp, #8
   193bc:	orrne	r2, r2, #4
   193c0:	strne	r2, [sp, #4]
   193c4:	ldrne	r2, [fp, #8]
   193c8:	bl	1121c <open64@plt>
   193cc:	bl	180a8 <__assert_fail@plt+0x6cc4>
   193d0:	mov	sp, fp
   193d4:	pop	{fp, lr}
   193d8:	add	sp, sp, #8
   193dc:	bx	lr
   193e0:	push	{r4, sl, fp, lr}
   193e4:	add	fp, sp, #8
   193e8:	mov	r4, r0
   193ec:	cmp	r0, #0
   193f0:	beq	19408 <__assert_fail@plt+0x8024>
   193f4:	mov	r0, r4
   193f8:	bl	11240 <__freading@plt>
   193fc:	cmp	r0, #0
   19400:	movne	r0, r4
   19404:	blne	19414 <__assert_fail@plt+0x8030>
   19408:	mov	r0, r4
   1940c:	pop	{r4, sl, fp, lr}
   19410:	b	1112c <fflush@plt>
   19414:	ldrb	r1, [r0, #1]
   19418:	tst	r1, #1
   1941c:	bxeq	lr
   19420:	push	{fp, lr}
   19424:	mov	fp, sp
   19428:	sub	sp, sp, #8
   1942c:	mov	r1, #1
   19430:	str	r1, [sp]
   19434:	mov	r2, #0
   19438:	mov	r3, #0
   1943c:	bl	19470 <__assert_fail@plt+0x808c>
   19440:	mov	sp, fp
   19444:	pop	{fp, pc}
   19448:	push	{r4, r5, r6, sl, fp, lr}
   1944c:	add	fp, sp, #16
   19450:	mov	r4, r0
   19454:	bl	112a0 <__errno_location@plt>
   19458:	mov	r5, r0
   1945c:	ldr	r6, [r0]
   19460:	mov	r0, r4
   19464:	bl	11144 <free@plt>
   19468:	str	r6, [r5]
   1946c:	pop	{r4, r5, r6, sl, fp, pc}
   19470:	push	{r4, r5, r6, r7, fp, lr}
   19474:	add	fp, sp, #16
   19478:	sub	sp, sp, #8
   1947c:	mov	r5, r3
   19480:	mov	r6, r2
   19484:	mov	r4, r0
   19488:	ldr	r0, [r0, #4]
   1948c:	ldr	r1, [r4, #8]
   19490:	cmp	r1, r0
   19494:	bne	194b0 <__assert_fail@plt+0x80cc>
   19498:	ldrd	r0, [r4, #16]
   1949c:	cmp	r1, r0
   194a0:	bne	194b0 <__assert_fail@plt+0x80cc>
   194a4:	ldr	r0, [r4, #36]	; 0x24
   194a8:	cmp	r0, #0
   194ac:	beq	194c8 <__assert_fail@plt+0x80e4>
   194b0:	mov	r0, r4
   194b4:	mov	r2, r6
   194b8:	mov	r3, r5
   194bc:	sub	sp, fp, #16
   194c0:	pop	{r4, r5, r6, r7, fp, lr}
   194c4:	b	11300 <fseeko64@plt>
   194c8:	ldr	r7, [fp, #8]
   194cc:	mov	r0, r4
   194d0:	bl	112dc <fileno@plt>
   194d4:	str	r7, [sp]
   194d8:	mov	r2, r6
   194dc:	mov	r3, r5
   194e0:	bl	111d4 <lseek64@plt>
   194e4:	and	r2, r0, r1
   194e8:	cmn	r2, #1
   194ec:	mvneq	r0, #0
   194f0:	subeq	sp, fp, #16
   194f4:	popeq	{r4, r5, r6, r7, fp, pc}
   194f8:	strd	r0, [r4, #80]	; 0x50
   194fc:	ldr	r0, [r4]
   19500:	bic	r0, r0, #16
   19504:	str	r0, [r4]
   19508:	mov	r0, #0
   1950c:	sub	sp, fp, #16
   19510:	pop	{r4, r5, r6, r7, fp, pc}
   19514:	push	{fp, lr}
   19518:	mov	fp, sp
   1951c:	bl	112a0 <__errno_location@plt>
   19520:	mov	r1, #12
   19524:	str	r1, [r0]
   19528:	mov	r0, #0
   1952c:	pop	{fp, pc}
   19530:	b	18a74 <__assert_fail@plt+0x7690>
   19534:	cmp	r1, #0
   19538:	orreq	r1, r1, #1
   1953c:	b	18aa4 <__assert_fail@plt+0x76c0>
   19540:	b	18a20 <__assert_fail@plt+0x763c>
   19544:	clz	r3, r2
   19548:	lsr	ip, r3, #5
   1954c:	clz	r3, r1
   19550:	lsr	r3, r3, #5
   19554:	orrs	r3, r3, ip
   19558:	movwne	r1, #1
   1955c:	movwne	r2, #1
   19560:	b	195fc <__assert_fail@plt+0x8218>
   19564:	push	{fp, lr}
   19568:	mov	fp, sp
   1956c:	mov	r0, #14
   19570:	bl	11330 <nl_langinfo@plt>
   19574:	movw	r1, #39610	; 0x9aba
   19578:	movt	r1, #1
   1957c:	cmp	r0, #0
   19580:	movne	r1, r0
   19584:	ldrb	r2, [r1]
   19588:	movw	r0, #43415	; 0xa997
   1958c:	movt	r0, #1
   19590:	cmp	r2, #0
   19594:	movne	r0, r1
   19598:	pop	{fp, pc}
   1959c:	push	{r4, r5, r6, r7, fp, lr}
   195a0:	add	fp, sp, #16
   195a4:	sub	sp, sp, #8
   195a8:	mov	r7, r2
   195ac:	mov	r4, r1
   195b0:	add	r5, sp, #4
   195b4:	cmp	r0, #0
   195b8:	movne	r5, r0
   195bc:	mov	r0, r5
   195c0:	bl	11204 <mbrtowc@plt>
   195c4:	mov	r6, r0
   195c8:	cmp	r7, #0
   195cc:	beq	195f0 <__assert_fail@plt+0x820c>
   195d0:	cmn	r6, #2
   195d4:	bcc	195f0 <__assert_fail@plt+0x820c>
   195d8:	mov	r0, #0
   195dc:	bl	19644 <__assert_fail@plt+0x8260>
   195e0:	cmp	r0, #0
   195e4:	ldrbeq	r0, [r4]
   195e8:	streq	r0, [r5]
   195ec:	moveq	r6, #1
   195f0:	mov	r0, r6
   195f4:	sub	sp, fp, #16
   195f8:	pop	{r4, r5, r6, r7, fp, pc}
   195fc:	cmp	r2, #0
   19600:	beq	19630 <__assert_fail@plt+0x824c>
   19604:	mvn	r3, #0
   19608:	udiv	r3, r3, r2
   1960c:	cmp	r3, r1
   19610:	bcs	19630 <__assert_fail@plt+0x824c>
   19614:	push	{fp, lr}
   19618:	mov	fp, sp
   1961c:	bl	112a0 <__errno_location@plt>
   19620:	mov	r1, #12
   19624:	str	r1, [r0]
   19628:	mov	r0, #0
   1962c:	pop	{fp, pc}
   19630:	mul	r1, r2, r1
   19634:	b	18aa4 <__assert_fail@plt+0x76c0>
   19638:	mov	r1, #0
   1963c:	mov	r2, #3
   19640:	b	191b4 <__assert_fail@plt+0x7dd0>
   19644:	push	{r4, sl, fp, lr}
   19648:	add	fp, sp, #8
   1964c:	sub	sp, sp, #264	; 0x108
   19650:	add	r1, sp, #7
   19654:	movw	r2, #257	; 0x101
   19658:	bl	196a8 <__assert_fail@plt+0x82c4>
   1965c:	mov	r4, #0
   19660:	cmp	r0, #0
   19664:	bne	1969c <__assert_fail@plt+0x82b8>
   19668:	add	r0, sp, #7
   1966c:	movw	r1, #43421	; 0xa99d
   19670:	movt	r1, #1
   19674:	bl	11120 <strcmp@plt>
   19678:	cmp	r0, #0
   1967c:	beq	1969c <__assert_fail@plt+0x82b8>
   19680:	add	r0, sp, #7
   19684:	movw	r1, #43423	; 0xa99f
   19688:	movt	r1, #1
   1968c:	bl	11120 <strcmp@plt>
   19690:	mov	r4, r0
   19694:	cmp	r0, #0
   19698:	movwne	r4, #1
   1969c:	mov	r0, r4
   196a0:	sub	sp, fp, #8
   196a4:	pop	{r4, sl, fp, pc}
   196a8:	b	196ac <__assert_fail@plt+0x82c8>
   196ac:	push	{r4, r5, r6, r7, fp, lr}
   196b0:	add	fp, sp, #16
   196b4:	mov	r6, r2
   196b8:	mov	r4, r1
   196bc:	bl	19748 <__assert_fail@plt+0x8364>
   196c0:	cmp	r0, #0
   196c4:	beq	196f4 <__assert_fail@plt+0x8310>
   196c8:	mov	r7, r0
   196cc:	bl	1127c <strlen@plt>
   196d0:	cmp	r0, r6
   196d4:	bcs	19714 <__assert_fail@plt+0x8330>
   196d8:	add	r2, r0, #1
   196dc:	mov	r0, r4
   196e0:	mov	r1, r7
   196e4:	bl	1115c <memcpy@plt>
   196e8:	mov	r5, #0
   196ec:	mov	r0, r5
   196f0:	pop	{r4, r5, r6, r7, fp, pc}
   196f4:	mov	r5, #22
   196f8:	cmp	r6, #0
   196fc:	movne	r0, #0
   19700:	strbne	r0, [r4]
   19704:	movne	r0, r5
   19708:	popne	{r4, r5, r6, r7, fp, pc}
   1970c:	mov	r0, r5
   19710:	pop	{r4, r5, r6, r7, fp, pc}
   19714:	mov	r5, #34	; 0x22
   19718:	cmp	r6, #0
   1971c:	beq	1973c <__assert_fail@plt+0x8358>
   19720:	sub	r6, r6, #1
   19724:	mov	r0, r4
   19728:	mov	r1, r7
   1972c:	mov	r2, r6
   19730:	bl	1115c <memcpy@plt>
   19734:	mov	r0, #0
   19738:	strb	r0, [r4, r6]
   1973c:	mov	r0, r5
   19740:	pop	{r4, r5, r6, r7, fp, pc}
   19744:	b	19748 <__assert_fail@plt+0x8364>
   19748:	mov	r1, #0
   1974c:	b	11318 <setlocale@plt>
   19750:	cmp	r3, #0
   19754:	cmpeq	r2, #0
   19758:	bne	19770 <__assert_fail@plt+0x838c>
   1975c:	cmp	r1, #0
   19760:	cmpeq	r0, #0
   19764:	mvnne	r1, #0
   19768:	mvnne	r0, #0
   1976c:	b	1978c <__assert_fail@plt+0x83a8>
   19770:	sub	sp, sp, #8
   19774:	push	{sp, lr}
   19778:	bl	1979c <__assert_fail@plt+0x83b8>
   1977c:	ldr	lr, [sp, #4]
   19780:	add	sp, sp, #8
   19784:	pop	{r2, r3}
   19788:	bx	lr
   1978c:	push	{r1, lr}
   19790:	mov	r0, #8
   19794:	bl	11114 <raise@plt>
   19798:	pop	{r1, pc}
   1979c:	cmp	r1, r3
   197a0:	cmpeq	r0, r2
   197a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197a8:	mov	r4, r0
   197ac:	movcc	r0, #0
   197b0:	mov	r5, r1
   197b4:	ldr	lr, [sp, #36]	; 0x24
   197b8:	movcc	r1, r0
   197bc:	bcc	198b8 <__assert_fail@plt+0x84d4>
   197c0:	cmp	r3, #0
   197c4:	clzeq	ip, r2
   197c8:	clzne	ip, r3
   197cc:	addeq	ip, ip, #32
   197d0:	cmp	r5, #0
   197d4:	clzeq	r1, r4
   197d8:	addeq	r1, r1, #32
   197dc:	clzne	r1, r5
   197e0:	sub	ip, ip, r1
   197e4:	sub	sl, ip, #32
   197e8:	lsl	r9, r3, ip
   197ec:	rsb	fp, ip, #32
   197f0:	orr	r9, r9, r2, lsl sl
   197f4:	orr	r9, r9, r2, lsr fp
   197f8:	lsl	r8, r2, ip
   197fc:	cmp	r5, r9
   19800:	cmpeq	r4, r8
   19804:	movcc	r0, #0
   19808:	movcc	r1, r0
   1980c:	bcc	19828 <__assert_fail@plt+0x8444>
   19810:	mov	r0, #1
   19814:	subs	r4, r4, r8
   19818:	lsl	r1, r0, sl
   1981c:	orr	r1, r1, r0, lsr fp
   19820:	lsl	r0, r0, ip
   19824:	sbc	r5, r5, r9
   19828:	cmp	ip, #0
   1982c:	beq	198b8 <__assert_fail@plt+0x84d4>
   19830:	lsr	r6, r8, #1
   19834:	orr	r6, r6, r9, lsl #31
   19838:	lsr	r7, r9, #1
   1983c:	mov	r2, ip
   19840:	b	19864 <__assert_fail@plt+0x8480>
   19844:	subs	r3, r4, r6
   19848:	sbc	r8, r5, r7
   1984c:	adds	r3, r3, r3
   19850:	adc	r8, r8, r8
   19854:	adds	r4, r3, #1
   19858:	adc	r5, r8, #0
   1985c:	subs	r2, r2, #1
   19860:	beq	19880 <__assert_fail@plt+0x849c>
   19864:	cmp	r5, r7
   19868:	cmpeq	r4, r6
   1986c:	bcs	19844 <__assert_fail@plt+0x8460>
   19870:	adds	r4, r4, r4
   19874:	adc	r5, r5, r5
   19878:	subs	r2, r2, #1
   1987c:	bne	19864 <__assert_fail@plt+0x8480>
   19880:	lsr	r3, r4, ip
   19884:	orr	r3, r3, r5, lsl fp
   19888:	lsr	r2, r5, ip
   1988c:	orr	r3, r3, r5, lsr sl
   19890:	adds	r0, r0, r4
   19894:	mov	r4, r3
   19898:	lsl	r3, r2, ip
   1989c:	orr	r3, r3, r4, lsl sl
   198a0:	lsl	ip, r4, ip
   198a4:	orr	r3, r3, r4, lsr fp
   198a8:	adc	r1, r1, r5
   198ac:	subs	r0, r0, ip
   198b0:	mov	r5, r2
   198b4:	sbc	r1, r1, r3
   198b8:	cmp	lr, #0
   198bc:	strdne	r4, [lr]
   198c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198c8:	mov	r7, r0
   198cc:	ldr	r6, [pc, #72]	; 1991c <__assert_fail@plt+0x8538>
   198d0:	ldr	r5, [pc, #72]	; 19920 <__assert_fail@plt+0x853c>
   198d4:	add	r6, pc, r6
   198d8:	add	r5, pc, r5
   198dc:	sub	r6, r6, r5
   198e0:	mov	r8, r1
   198e4:	mov	r9, r2
   198e8:	bl	110d0 <fstatfs64@plt-0x20>
   198ec:	asrs	r6, r6, #2
   198f0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   198f4:	mov	r4, #0
   198f8:	add	r4, r4, #1
   198fc:	ldr	r3, [r5], #4
   19900:	mov	r2, r9
   19904:	mov	r1, r8
   19908:	mov	r0, r7
   1990c:	blx	r3
   19910:	cmp	r6, r4
   19914:	bne	198f8 <__assert_fail@plt+0x8514>
   19918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1991c:	andeq	r1, r1, r0, lsr r6
   19920:	andeq	r1, r1, r8, lsr #12
   19924:	bx	lr
   19928:	ldr	r3, [pc, #12]	; 1993c <__assert_fail@plt+0x8558>
   1992c:	mov	r1, #0
   19930:	add	r3, pc, r3
   19934:	ldr	r2, [r3]
   19938:	b	112b8 <__cxa_atexit@plt>
   1993c:	ldrdeq	r1, [r1], -ip
   19940:	mov	r2, r1
   19944:	mov	r1, r0
   19948:	mov	r0, #3
   1994c:	b	1139c <__xstat64@plt>
   19950:	mov	r2, r1
   19954:	mov	r1, r0
   19958:	mov	r0, #3
   1995c:	b	111bc <__fxstat64@plt>
   19960:	mov	r2, r1
   19964:	mov	r1, r0
   19968:	mov	r0, #3
   1996c:	b	113cc <__lxstat64@plt>
   19970:	push	{lr}		; (str lr, [sp, #-4]!)
   19974:	sub	sp, sp, #12
   19978:	str	r3, [sp]
   1997c:	mov	r3, r2
   19980:	mov	r2, r1
   19984:	mov	r1, r0
   19988:	mov	r0, #3
   1998c:	bl	111a4 <__fxstatat64@plt>
   19990:	add	sp, sp, #12
   19994:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019998 <.fini>:
   19998:	push	{r3, lr}
   1999c:	pop	{r3, pc}
