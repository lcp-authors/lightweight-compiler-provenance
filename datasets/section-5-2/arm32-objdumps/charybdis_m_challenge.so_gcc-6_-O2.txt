
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000086c <_init>:
 86c:	push	{r3, lr}
 870:	bl	a00 <call_weak_fn>
 874:	pop	{r3, pc}

Disassembly of section .plt:

00000878 <.plt>:
 878:	push	{lr}		; (str lr, [sp, #-4]!)
 87c:	ldr	lr, [pc, #4]	; 888 <.plt+0x10>
 880:	add	lr, pc, lr
 884:	ldr	pc, [lr, #8]!
 888:	.word	0x00011778

0000088c <calloc@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1912]!	; 0x778

00000898 <rb_current_time@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1904]!	; 0x770

000008a4 <__cxa_finalize@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1896]!	; 0x768

000008b0 <RSA_public_encrypt@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1888]!	; 0x760

000008bc <sendto_one@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1880]!	; 0x758

000008c8 <free@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1872]!	; 0x750

000008d4 <rb_strcasecmp@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1864]!	; 0x748

000008e0 <memcpy@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1856]!	; 0x740

000008ec <RSA_size@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1848]!	; 0x738

000008f8 <rb_outofmemory@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1840]!	; 0x730

00000904 <memcmp@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1832]!	; 0x728

00000910 <sendto_realops_snomask@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1824]!	; 0x720

0000091c <rb_base64_decode@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1816]!	; 0x718

00000928 <malloc@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1808]!	; 0x710

00000934 <rb_get_random@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1800]!	; 0x708

00000940 <__gmon_start__@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1792]!	; 0x700

0000094c <OPENSSL_init_crypto@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1784]!	; 0x6f8

00000958 <send_oper_motd@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1776]!	; 0x6f0

00000964 <sendto_one_numeric@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1768]!	; 0x6e8

00000970 <strlen@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1760]!	; 0x6e0

0000097c <SHA1_Update@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1752]!	; 0x6d8

00000988 <ERR_error_string@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1744]!	; 0x6d0

00000994 <ilog@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1736]!	; 0x6c8

000009a0 <SHA1_Init@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1728]!	; 0x6c0

000009ac <ERR_get_error@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1720]!	; 0x6b8

000009b8 <sendto_one_notice@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1712]!	; 0x6b0

000009c4 <rb_strlcpy@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1704]!	; 0x6a8

000009d0 <find_oper_conf@plt>:
 9d0:	add	ip, pc, #0, 12
 9d4:	add	ip, ip, #69632	; 0x11000
 9d8:	ldr	pc, [ip, #1696]!	; 0x6a0

000009dc <oper_up@plt>:
 9dc:	add	ip, pc, #0, 12
 9e0:	add	ip, ip, #69632	; 0x11000
 9e4:	ldr	pc, [ip, #1688]!	; 0x698

000009e8 <rb_base64_encode@plt>:
 9e8:	add	ip, pc, #0, 12
 9ec:	add	ip, ip, #69632	; 0x11000
 9f0:	ldr	pc, [ip, #1680]!	; 0x690

000009f4 <SHA1_Final@plt>:
 9f4:	add	ip, pc, #0, 12
 9f8:	add	ip, ip, #69632	; 0x11000
 9fc:	ldr	pc, [ip, #1672]!	; 0x688

Disassembly of section .text:

00000a00 <call_weak_fn>:
     a00:	ldr	r3, [pc, #20]	; a1c <call_weak_fn+0x1c>
     a04:	ldr	r2, [pc, #20]	; a20 <call_weak_fn+0x20>
     a08:	add	r3, pc, r3
     a0c:	ldr	r2, [r3, r2]
     a10:	cmp	r2, #0
     a14:	bxeq	lr
     a18:	b	940 <__gmon_start__@plt>
     a1c:	.word	0x000115f0
     a20:	.word	0x00000090

00000a24 <deregister_tm_clones>:
     a24:	ldr	r3, [pc, #52]	; a60 <deregister_tm_clones+0x3c>
     a28:	ldr	r0, [pc, #52]	; a64 <deregister_tm_clones+0x40>
     a2c:	add	r3, pc, r3
     a30:	add	r0, pc, r0
     a34:	add	r3, r3, #3
     a38:	sub	r3, r3, r0
     a3c:	cmp	r3, #6
     a40:	ldr	r3, [pc, #32]	; a68 <deregister_tm_clones+0x44>
     a44:	add	r3, pc, r3
     a48:	bxls	lr
     a4c:	ldr	r2, [pc, #24]	; a6c <deregister_tm_clones+0x48>
     a50:	ldr	r3, [r3, r2]
     a54:	cmp	r3, #0
     a58:	bxeq	lr
     a5c:	bx	r3
     a60:	.word	0x000116e8
     a64:	.word	0x000116e4
     a68:	.word	0x000115b4
     a6c:	.word	0x0000008c

00000a70 <register_tm_clones>:
     a70:	ldr	r1, [pc, #56]	; ab0 <register_tm_clones+0x40>
     a74:	ldr	r0, [pc, #56]	; ab4 <register_tm_clones+0x44>
     a78:	add	r1, pc, r1
     a7c:	add	r0, pc, r0
     a80:	sub	r1, r1, r0
     a84:	ldr	r3, [pc, #44]	; ab8 <register_tm_clones+0x48>
     a88:	asr	r1, r1, #2
     a8c:	add	r3, pc, r3
     a90:	add	r1, r1, r1, lsr #31
     a94:	asrs	r1, r1, #1
     a98:	bxeq	lr
     a9c:	ldr	r2, [pc, #24]	; abc <register_tm_clones+0x4c>
     aa0:	ldr	r3, [r3, r2]
     aa4:	cmp	r3, #0
     aa8:	bxeq	lr
     aac:	bx	r3
     ab0:	.word	0x0001169c
     ab4:	.word	0x00011698
     ab8:	.word	0x0001156c
     abc:	.word	0x00000098

00000ac0 <__do_global_dtors_aux>:
     ac0:	ldr	r3, [pc, #76]	; b14 <__do_global_dtors_aux+0x54>
     ac4:	ldr	r2, [pc, #76]	; b18 <__do_global_dtors_aux+0x58>
     ac8:	add	r3, pc, r3
     acc:	add	r2, pc, r2
     ad0:	ldrb	r3, [r3]
     ad4:	cmp	r3, #0
     ad8:	bxne	lr
     adc:	ldr	r3, [pc, #56]	; b1c <__do_global_dtors_aux+0x5c>
     ae0:	push	{r4, lr}
     ae4:	ldr	r3, [r2, r3]
     ae8:	cmp	r3, #0
     aec:	beq	afc <__do_global_dtors_aux+0x3c>
     af0:	ldr	r3, [pc, #40]	; b20 <__do_global_dtors_aux+0x60>
     af4:	ldr	r0, [pc, r3]
     af8:	bl	8a4 <__cxa_finalize@plt>
     afc:	bl	a24 <deregister_tm_clones>
     b00:	ldr	r3, [pc, #28]	; b24 <__do_global_dtors_aux+0x64>
     b04:	mov	r2, #1
     b08:	add	r3, pc, r3
     b0c:	strb	r2, [r3]
     b10:	pop	{r4, pc}
     b14:	.word	0x0001164c
     b18:	.word	0x0001152c
     b1c:	.word	0x00000088
     b20:	.word	0x000115a8
     b24:	.word	0x0001160c

00000b28 <frame_dummy>:
     b28:	ldr	r0, [pc, #56]	; b68 <frame_dummy+0x40>
     b2c:	ldr	r3, [pc, #56]	; b6c <frame_dummy+0x44>
     b30:	add	r0, pc, r0
     b34:	ldr	r2, [r0]
     b38:	add	r3, pc, r3
     b3c:	cmp	r2, #0
     b40:	bne	b48 <frame_dummy+0x20>
     b44:	b	a70 <register_tm_clones>
     b48:	ldr	r2, [pc, #32]	; b70 <frame_dummy+0x48>
     b4c:	ldr	r3, [r3, r2]
     b50:	cmp	r3, #0
     b54:	beq	b44 <frame_dummy+0x1c>
     b58:	push	{r4, lr}
     b5c:	blx	r3
     b60:	pop	{r4, lr}
     b64:	b	a70 <register_tm_clones>
     b68:	.word	0x000113c4
     b6c:	.word	0x000114c0
     b70:	.word	0x00000094

00000b74 <cleanup_challenge.isra.0>:
     b74:	ldr	r3, [r1]
     b78:	cmp	r3, #0
     b7c:	bxeq	lr
     b80:	push	{r4, r5, r6, lr}
     b84:	mov	r5, r0
     b88:	ldr	r0, [r3, #284]	; 0x11c
     b8c:	mov	r4, r1
     b90:	cmp	r0, #0
     b94:	beq	b9c <cleanup_challenge.isra.0+0x28>
     b98:	bl	8c8 <free@plt>
     b9c:	ldr	r2, [r5]
     ba0:	ldr	r0, [r2, #32]
     ba4:	cmp	r0, #0
     ba8:	beq	bb4 <cleanup_challenge.isra.0+0x40>
     bac:	bl	8c8 <free@plt>
     bb0:	ldr	r2, [r5]
     bb4:	ldr	r1, [r4]
     bb8:	mov	r3, #0
     bbc:	str	r3, [r1, #284]	; 0x11c
     bc0:	str	r3, [r2, #32]
     bc4:	str	r3, [r1, #304]	; 0x130
     bc8:	pop	{r4, r5, r6, pc}

00000bcc <m_challenge>:
     bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bd0:	mov	r4, r2
     bd4:	sub	sp, sp, #668	; 0x29c
     bd8:	ldr	r3, [r4, #56]	; 0x38
     bdc:	ldr	r8, [pc, #1800]	; 12ec <m_challenge+0x720>
     be0:	mov	r2, #0
     be4:	tst	r3, #4096	; 0x1000
     be8:	str	r2, [sp, #28]
     bec:	add	r8, pc, r8
     bf0:	ldr	r5, [sp, #704]	; 0x2c0
     bf4:	bne	e40 <m_challenge+0x274>
     bf8:	ldr	r3, [r5, #4]
     bfc:	ldrb	r3, [r3]
     c00:	cmp	r3, #43	; 0x2b
     c04:	beq	d98 <m_challenge+0x1cc>
     c08:	add	r7, r4, #288	; 0x120
     c0c:	add	r1, r4, #432	; 0x1b0
     c10:	add	r0, r4, #24
     c14:	add	r7, r7, #3
     c18:	add	r9, r4, #152	; 0x98
     c1c:	bl	b74 <cleanup_challenge.isra.0>
     c20:	mov	r2, r7
     c24:	mov	r0, r9
     c28:	ldr	r3, [r5, #4]
     c2c:	add	r1, r4, #227	; 0xe3
     c30:	bl	9d0 <find_oper_conf@plt>
     c34:	subs	r6, r0, #0
     c38:	beq	11e0 <m_challenge+0x614>
     c3c:	ldr	sl, [r6, #40]	; 0x28
     c40:	cmp	sl, #0
     c44:	beq	1258 <m_challenge+0x68c>
     c48:	ldr	r3, [r6, #20]
     c4c:	tst	r3, #524288	; 0x80000
     c50:	bne	e70 <m_challenge+0x2a4>
     c54:	ldr	r1, [r6, #16]
     c58:	cmp	r1, #0
     c5c:	beq	c84 <m_challenge+0xb8>
     c60:	ldr	r0, [r4, #444]	; 0x1bc
     c64:	cmp	r0, #0
     c68:	beq	fc0 <m_challenge+0x3f4>
     c6c:	bl	8d4 <rb_strcasecmp@plt>
     c70:	cmp	r0, #0
     c74:	bne	fc0 <m_challenge+0x3f4>
     c78:	ldr	sl, [r6, #40]	; 0x28
     c7c:	cmp	sl, #0
     c80:	beq	d80 <m_challenge+0x1b4>
     c84:	add	r5, sp, #128	; 0x80
     c88:	mov	r0, r5
     c8c:	mov	r1, #128	; 0x80
     c90:	ldr	r9, [r4, #432]	; 0x1b0
     c94:	bl	934 <rb_get_random@plt>
     c98:	cmp	r0, #0
     c9c:	beq	d30 <m_challenge+0x164>
     ca0:	add	r7, sp, #32
     ca4:	mov	r0, r7
     ca8:	bl	9a0 <SHA1_Init@plt>
     cac:	mov	r2, #128	; 0x80
     cb0:	mov	r1, r5
     cb4:	mov	r0, r7
     cb8:	bl	97c <SHA1_Update@plt>
     cbc:	mov	r0, #20
     cc0:	bl	928 <malloc@plt>
     cc4:	mov	r1, r7
     cc8:	str	r0, [r9, #284]	; 0x11c
     ccc:	bl	9f4 <SHA1_Final@plt>
     cd0:	mov	r0, sl
     cd4:	bl	8ec <RSA_size@plt>
     cd8:	mov	r1, r0
     cdc:	mov	r0, #1
     ce0:	bl	88c <calloc@plt>
     ce4:	subs	r7, r0, #0
     ce8:	beq	126c <m_challenge+0x6a0>
     cec:	mov	r2, #4
     cf0:	mov	r1, r5
     cf4:	str	r2, [sp]
     cf8:	mov	r3, sl
     cfc:	mov	r2, r7
     d00:	mov	r0, #128	; 0x80
     d04:	bl	8b0 <RSA_public_encrypt@plt>
     d08:	subs	r1, r0, #0
     d0c:	mov	r0, r7
     d10:	bge	10b4 <m_challenge+0x4e8>
     d14:	bl	8c8 <free@plt>
     d18:	ldr	r0, [r9, #284]	; 0x11c
     d1c:	cmp	r0, #0
     d20:	beq	d28 <m_challenge+0x15c>
     d24:	bl	8c8 <free@plt>
     d28:	mov	r3, #0
     d2c:	str	r3, [r9, #284]	; 0x11c
     d30:	ldr	r7, [pc, #1464]	; 12f0 <m_challenge+0x724>
     d34:	mov	r2, #0
     d38:	mov	r0, #2
     d3c:	mov	r1, #0
     d40:	bl	94c <OPENSSL_init_crypto@plt>
     d44:	mov	r5, #100	; 0x64
     d48:	mov	r6, #0
     d4c:	add	r7, pc, r7
     d50:	b	d74 <m_challenge+0x1a8>
     d54:	mov	r1, r6
     d58:	bl	988 <ERR_error_string@plt>
     d5c:	mov	r1, r7
     d60:	mov	r2, r0
     d64:	mov	r0, r6
     d68:	bl	994 <ilog@plt>
     d6c:	subs	r5, r5, #1
     d70:	beq	d80 <m_challenge+0x1b4>
     d74:	bl	9ac <ERR_get_error@plt>
     d78:	cmp	r0, #0
     d7c:	bne	d54 <m_challenge+0x188>
     d80:	ldr	r1, [pc, #1388]	; 12f4 <m_challenge+0x728>
     d84:	mov	r0, r4
     d88:	add	r1, pc, r1
     d8c:	bl	9b8 <sendto_one_notice@plt>
     d90:	add	sp, sp, #668	; 0x29c
     d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     d98:	ldr	r3, [r4, #432]	; 0x1b0
     d9c:	ldr	r3, [r3, #284]	; 0x11c
     da0:	cmp	r3, #0
     da4:	beq	d90 <m_challenge+0x1c4>
     da8:	bl	898 <rb_current_time@plt>
     dac:	ldr	r3, [r4, #432]	; 0x1b0
     db0:	ldr	r3, [r3, #304]	; 0x130
     db4:	sub	r0, r0, r3
     db8:	cmp	r0, #180	; 0xb4
     dbc:	ble	ef4 <m_challenge+0x328>
     dc0:	ldr	r2, [pc, #1328]	; 12f8 <m_challenge+0x72c>
     dc4:	ldr	r1, [pc, #1328]	; 12fc <m_challenge+0x730>
     dc8:	add	r5, r4, #88	; 0x58
     dcc:	ldr	r2, [r8, r2]
     dd0:	mov	r3, r5
     dd4:	add	r1, pc, r1
     dd8:	add	r2, r2, #88	; 0x58
     ddc:	mov	r0, r4
     de0:	bl	8bc <sendto_one@plt>
     de4:	ldr	r2, [r4, #24]
     de8:	add	r3, r4, #288	; 0x120
     dec:	add	r6, r4, #152	; 0x98
     df0:	add	r7, r4, #163	; 0xa3
     df4:	ldr	r1, [pc, #1284]	; 1300 <m_challenge+0x734>
     df8:	add	r3, r3, #3
     dfc:	ldr	r2, [r2, #32]
     e00:	add	r1, pc, r1
     e04:	str	r3, [sp, #8]
     e08:	stm	sp, {r6, r7}
     e0c:	mov	r3, r5
     e10:	mov	r0, #4
     e14:	bl	994 <ilog@plt>
     e18:	ldr	r3, [pc, #1252]	; 1304 <m_challenge+0x738>
     e1c:	ldr	r3, [r8, r3]
     e20:	ldr	r3, [r3, #84]	; 0x54
     e24:	cmp	r3, #0
     e28:	bne	11a0 <m_challenge+0x5d4>
     e2c:	add	r1, r4, #432	; 0x1b0
     e30:	add	r0, r4, #24
     e34:	bl	b74 <cleanup_challenge.isra.0>
     e38:	add	sp, sp, #668	; 0x29c
     e3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e40:	ldr	r2, [pc, #1200]	; 12f8 <m_challenge+0x72c>
     e44:	ldr	r1, [pc, #1212]	; 1308 <m_challenge+0x73c>
     e48:	add	r3, r4, #88	; 0x58
     e4c:	ldr	r2, [r8, r2]
     e50:	add	r1, pc, r1
     e54:	mov	r0, r4
     e58:	add	r2, r2, #88	; 0x58
     e5c:	bl	8bc <sendto_one@plt>
     e60:	mov	r0, r4
     e64:	bl	958 <send_oper_motd@plt>
     e68:	add	sp, sp, #668	; 0x29c
     e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     e70:	ldr	r1, [r4, #56]	; 0x38
     e74:	ands	fp, r1, #16384	; 0x4000
     e78:	bne	c54 <m_challenge+0x88>
     e7c:	ldr	r2, [pc, #1160]	; 130c <m_challenge+0x740>
     e80:	mov	r0, r4
     e84:	add	r2, pc, r2
     e88:	ldr	r1, [pc, #1152]	; 1310 <m_challenge+0x744>
     e8c:	bl	964 <sendto_one_numeric@plt>
     e90:	ldr	r1, [pc, #1148]	; 1314 <m_challenge+0x748>
     e94:	ldr	r2, [r5, #4]
     e98:	add	r5, r4, #88	; 0x58
     e9c:	add	r4, r4, #163	; 0xa3
     ea0:	mov	r3, r5
     ea4:	str	r7, [sp, #8]
     ea8:	str	r9, [sp]
     eac:	str	r4, [sp, #4]
     eb0:	add	r1, pc, r1
     eb4:	mov	r0, #4
     eb8:	bl	994 <ilog@plt>
     ebc:	ldr	r3, [pc, #1088]	; 1304 <m_challenge+0x738>
     ec0:	ldr	r3, [r8, r3]
     ec4:	ldr	r3, [r3, #84]	; 0x54
     ec8:	cmp	r3, #0
     ecc:	beq	d90 <m_challenge+0x1c4>
     ed0:	ldr	r2, [pc, #1088]	; 1318 <m_challenge+0x74c>
     ed4:	str	r4, [sp, #4]
     ed8:	str	r9, [sp]
     edc:	mov	r3, r5
     ee0:	mov	r1, fp
     ee4:	add	r2, pc, r2
     ee8:	mov	r0, #256	; 0x100
     eec:	bl	910 <sendto_realops_snomask@plt>
     ef0:	b	d90 <m_challenge+0x1c4>
     ef4:	ldr	r6, [r5, #4]
     ef8:	add	r6, r6, #1
     efc:	str	r6, [r5, #4]
     f00:	mov	r0, r6
     f04:	bl	970 <strlen@plt>
     f08:	add	r2, sp, #28
     f0c:	mov	r1, r0
     f10:	mov	r0, r6
     f14:	bl	91c <rb_base64_decode@plt>
     f18:	ldr	r2, [sp, #28]
     f1c:	cmp	r2, #20
     f20:	mov	r5, r0
     f24:	bne	f40 <m_challenge+0x374>
     f28:	ldr	r3, [r4, #432]	; 0x1b0
     f2c:	mov	r1, r0
     f30:	ldr	r0, [r3, #284]	; 0x11c
     f34:	bl	904 <memcmp@plt>
     f38:	cmp	r0, #0
     f3c:	beq	1038 <m_challenge+0x46c>
     f40:	ldr	r2, [pc, #944]	; 12f8 <m_challenge+0x72c>
     f44:	ldr	r1, [pc, #976]	; 131c <m_challenge+0x750>
     f48:	add	r6, r4, #88	; 0x58
     f4c:	ldr	r2, [r8, r2]
     f50:	mov	r3, r6
     f54:	add	r1, pc, r1
     f58:	add	r2, r2, #88	; 0x58
     f5c:	mov	r0, r4
     f60:	bl	8bc <sendto_one@plt>
     f64:	ldr	r2, [r4, #24]
     f68:	add	r3, r4, #288	; 0x120
     f6c:	add	r7, r4, #152	; 0x98
     f70:	add	r9, r4, #163	; 0xa3
     f74:	ldr	r1, [pc, #932]	; 1320 <m_challenge+0x754>
     f78:	add	r3, r3, #3
     f7c:	ldr	r2, [r2, #32]
     f80:	add	r1, pc, r1
     f84:	str	r3, [sp, #8]
     f88:	stm	sp, {r7, r9}
     f8c:	mov	r3, r6
     f90:	mov	r0, #4
     f94:	bl	994 <ilog@plt>
     f98:	ldr	r3, [pc, #868]	; 1304 <m_challenge+0x738>
     f9c:	ldr	r3, [r8, r3]
     fa0:	ldr	r3, [r3, #84]	; 0x54
     fa4:	cmp	r3, #0
     fa8:	bne	11c0 <m_challenge+0x5f4>
     fac:	cmp	r5, #0
     fb0:	beq	e2c <m_challenge+0x260>
     fb4:	mov	r0, r5
     fb8:	bl	8c8 <free@plt>
     fbc:	b	e2c <m_challenge+0x260>
     fc0:	ldr	r2, [pc, #860]	; 1324 <m_challenge+0x758>
     fc4:	mov	r0, r4
     fc8:	add	r2, pc, r2
     fcc:	ldr	r1, [pc, #828]	; 1310 <m_challenge+0x744>
     fd0:	bl	964 <sendto_one_numeric@plt>
     fd4:	ldr	r1, [pc, #844]	; 1328 <m_challenge+0x75c>
     fd8:	ldr	r2, [r5, #4]
     fdc:	add	r5, r4, #88	; 0x58
     fe0:	add	r4, r4, #163	; 0xa3
     fe4:	mov	r3, r5
     fe8:	str	r7, [sp, #8]
     fec:	str	r9, [sp]
     ff0:	str	r4, [sp, #4]
     ff4:	add	r1, pc, r1
     ff8:	mov	r0, #4
     ffc:	bl	994 <ilog@plt>
    1000:	ldr	r3, [pc, #764]	; 1304 <m_challenge+0x738>
    1004:	ldr	r3, [r8, r3]
    1008:	ldr	r3, [r3, #84]	; 0x54
    100c:	cmp	r3, #0
    1010:	beq	d90 <m_challenge+0x1c4>
    1014:	ldr	r2, [pc, #784]	; 132c <m_challenge+0x760>
    1018:	str	r4, [sp, #4]
    101c:	str	r9, [sp]
    1020:	mov	r3, r5
    1024:	add	r2, pc, r2
    1028:	mov	r1, #0
    102c:	mov	r0, #256	; 0x100
    1030:	bl	910 <sendto_realops_snomask@plt>
    1034:	b	d90 <m_challenge+0x1c4>
    1038:	mov	r0, r5
    103c:	bl	8c8 <free@plt>
    1040:	ldr	r3, [r4, #24]
    1044:	add	r5, r4, #288	; 0x120
    1048:	add	r5, r5, #3
    104c:	add	r6, r4, #152	; 0x98
    1050:	mov	r2, r5
    1054:	ldr	r3, [r3, #32]
    1058:	mov	r0, r6
    105c:	add	r1, r4, #227	; 0xe3
    1060:	bl	9d0 <find_oper_conf@plt>
    1064:	subs	r7, r0, #0
    1068:	beq	1270 <m_challenge+0x6a4>
    106c:	add	r1, r4, #432	; 0x1b0
    1070:	add	r0, r4, #24
    1074:	bl	b74 <cleanup_challenge.isra.0>
    1078:	mov	r1, r7
    107c:	mov	r0, r4
    1080:	bl	9dc <oper_up@plt>
    1084:	ldr	r2, [r4, #24]
    1088:	ldr	r1, [pc, #672]	; 1330 <m_challenge+0x764>
    108c:	add	r0, r4, #163	; 0xa3
    1090:	ldr	r2, [r2, #32]
    1094:	add	r3, r4, #88	; 0x58
    1098:	str	r0, [sp, #4]
    109c:	add	r1, pc, r1
    10a0:	str	r5, [sp, #8]
    10a4:	str	r6, [sp]
    10a8:	mov	r0, #3
    10ac:	bl	994 <ilog@plt>
    10b0:	b	d90 <m_challenge+0x1c4>
    10b4:	bl	9e8 <rb_base64_encode@plt>
    10b8:	add	sl, r4, #88	; 0x58
    10bc:	ldr	fp, [pc, #624]	; 1334 <m_challenge+0x768>
    10c0:	str	r0, [sp, #16]
    10c4:	mov	r5, r0
    10c8:	mov	r0, r7
    10cc:	bl	8c8 <free@plt>
    10d0:	ldr	r9, [r4, #432]	; 0x1b0
    10d4:	bl	898 <rb_current_time@plt>
    10d8:	ldr	r3, [pc, #536]	; 12f8 <m_challenge+0x72c>
    10dc:	ldr	r2, [pc, #596]	; 1338 <m_challenge+0x76c>
    10e0:	add	r7, sp, #256	; 0x100
    10e4:	add	r2, pc, r2
    10e8:	str	r0, [r9, #304]	; 0x130
    10ec:	ldr	r9, [r8, r3]
    10f0:	str	r6, [sp, #20]
    10f4:	add	r9, r9, #88	; 0x58
    10f8:	mov	r8, r2
    10fc:	b	1104 <m_challenge+0x538>
    1100:	add	r5, r5, #404	; 0x194
    1104:	ldr	r2, [pc, #552]	; 1334 <m_challenge+0x768>
    1108:	mov	r1, r5
    110c:	mov	r0, r7
    1110:	bl	9c4 <rb_strlcpy@plt>
    1114:	str	r7, [sp]
    1118:	mov	r3, sl
    111c:	mov	r2, r9
    1120:	mov	r1, r8
    1124:	mov	r6, r0
    1128:	mov	r0, r4
    112c:	bl	8bc <sendto_one@plt>
    1130:	cmp	r6, fp
    1134:	bhi	1100 <m_challenge+0x534>
    1138:	ldr	r1, [pc, #508]	; 133c <m_challenge+0x770>
    113c:	mov	r3, sl
    1140:	mov	r2, r9
    1144:	add	r1, pc, r1
    1148:	mov	r0, r4
    114c:	ldr	r6, [sp, #20]
    1150:	bl	8bc <sendto_one@plt>
    1154:	ldr	r3, [sp, #16]
    1158:	cmp	r3, #0
    115c:	beq	1168 <m_challenge+0x59c>
    1160:	mov	r0, r3
    1164:	bl	8c8 <free@plt>
    1168:	ldr	r5, [r6]
    116c:	ldr	r6, [r4, #24]
    1170:	mov	r0, r5
    1174:	bl	970 <strlen@plt>
    1178:	add	r4, r0, #1
    117c:	mov	r0, r4
    1180:	bl	928 <malloc@plt>
    1184:	subs	r7, r0, #0
    1188:	beq	126c <m_challenge+0x6a0>
    118c:	mov	r2, r4
    1190:	mov	r1, r5
    1194:	bl	8e0 <memcpy@plt>
    1198:	str	r7, [r6, #32]
    119c:	b	d90 <m_challenge+0x1c4>
    11a0:	ldr	r2, [pc, #408]	; 1340 <m_challenge+0x774>
    11a4:	mov	r1, #256	; 0x100
    11a8:	stm	sp, {r6, r7}
    11ac:	mov	r3, r5
    11b0:	mov	r0, r1
    11b4:	add	r2, pc, r2
    11b8:	bl	910 <sendto_realops_snomask@plt>
    11bc:	b	e2c <m_challenge+0x260>
    11c0:	ldr	r2, [pc, #380]	; 1344 <m_challenge+0x778>
    11c4:	mov	r1, #256	; 0x100
    11c8:	stm	sp, {r7, r9}
    11cc:	mov	r3, r6
    11d0:	mov	r0, r1
    11d4:	add	r2, pc, r2
    11d8:	bl	910 <sendto_realops_snomask@plt>
    11dc:	b	fac <m_challenge+0x3e0>
    11e0:	ldr	r2, [pc, #352]	; 1348 <m_challenge+0x77c>
    11e4:	mov	r0, r4
    11e8:	add	r2, pc, r2
    11ec:	ldr	r1, [pc, #284]	; 1310 <m_challenge+0x744>
    11f0:	bl	964 <sendto_one_numeric@plt>
    11f4:	ldr	r1, [pc, #336]	; 134c <m_challenge+0x780>
    11f8:	ldr	r2, [r5, #4]
    11fc:	add	r5, r4, #88	; 0x58
    1200:	add	r4, r4, #163	; 0xa3
    1204:	mov	r3, r5
    1208:	str	r7, [sp, #8]
    120c:	str	r9, [sp]
    1210:	str	r4, [sp, #4]
    1214:	add	r1, pc, r1
    1218:	mov	r0, #4
    121c:	bl	994 <ilog@plt>
    1220:	ldr	r3, [pc, #220]	; 1304 <m_challenge+0x738>
    1224:	ldr	r3, [r8, r3]
    1228:	ldr	r3, [r3, #84]	; 0x54
    122c:	cmp	r3, #0
    1230:	beq	d90 <m_challenge+0x1c4>
    1234:	ldr	r2, [pc, #276]	; 1350 <m_challenge+0x784>
    1238:	mov	r1, #256	; 0x100
    123c:	str	r4, [sp, #4]
    1240:	str	r9, [sp]
    1244:	mov	r3, r5
    1248:	mov	r0, r1
    124c:	add	r2, pc, r2
    1250:	bl	910 <sendto_realops_snomask@plt>
    1254:	b	d90 <m_challenge+0x1c4>
    1258:	ldr	r1, [pc, #244]	; 1354 <m_challenge+0x788>
    125c:	mov	r0, r4
    1260:	add	r1, pc, r1
    1264:	bl	9b8 <sendto_one_notice@plt>
    1268:	b	d90 <m_challenge+0x1c4>
    126c:	bl	8f8 <rb_outofmemory@plt>
    1270:	ldr	r2, [pc, #224]	; 1358 <m_challenge+0x78c>
    1274:	mov	r0, r4
    1278:	add	r2, pc, r2
    127c:	ldr	r1, [pc, #140]	; 1310 <m_challenge+0x744>
    1280:	bl	964 <sendto_one_numeric@plt>
    1284:	ldr	r3, [r4, #24]
    1288:	ldr	r1, [pc, #204]	; 135c <m_challenge+0x790>
    128c:	add	r7, r4, #88	; 0x58
    1290:	add	r4, r4, #163	; 0xa3
    1294:	ldr	r2, [r3, #32]
    1298:	add	r1, pc, r1
    129c:	mov	r3, r7
    12a0:	str	r5, [sp, #8]
    12a4:	str	r6, [sp]
    12a8:	str	r4, [sp, #4]
    12ac:	mov	r0, #4
    12b0:	bl	994 <ilog@plt>
    12b4:	ldr	r3, [pc, #72]	; 1304 <m_challenge+0x738>
    12b8:	ldr	r3, [r8, r3]
    12bc:	ldr	r3, [r3, #84]	; 0x54
    12c0:	cmp	r3, #0
    12c4:	beq	d90 <m_challenge+0x1c4>
    12c8:	ldr	r2, [pc, #144]	; 1360 <m_challenge+0x794>
    12cc:	mov	r1, #256	; 0x100
    12d0:	str	r4, [sp, #4]
    12d4:	str	r6, [sp]
    12d8:	mov	r3, r7
    12dc:	mov	r0, r1
    12e0:	add	r2, pc, r2
    12e4:	bl	910 <sendto_realops_snomask@plt>
    12e8:	b	d90 <m_challenge+0x1c4>
    12ec:	.word	0x0001140c
    12f0:	.word	0x000009c8
    12f4:	.word	0x000009cc
    12f8:	.word	0x0000009c
    12fc:	.word	0x00000668
    1300:	.word	0x0000065c
    1304:	.word	0x000000a0
    1308:	.word	0x00000560
    130c:	.word	0x00000680
    1310:	.word	0x000001eb
    1314:	.word	0x0000074c
    1318:	.word	0x00000758
    131c:	.word	0x000004e8
    1320:	.word	0x00000530
    1324:	.word	0x0000053c
    1328:	.word	0x00000684
    132c:	.word	0x000006a4
    1330:	.word	0x00000500
    1334:	.word	0x00000195
    1338:	.word	0x00000640
    133c:	.word	0x000005f0
    1340:	.word	0x000002d4
    1344:	.word	0x00000308
    1348:	.word	0x0000031c
    134c:	.word	0x0000032c
    1350:	.word	0x00000318
    1354:	.word	0x00000358
    1358:	.word	0x0000028c
    135c:	.word	0x000002a8
    1360:	.word	0x00000284

Disassembly of section .fini:

00001364 <_fini>:
    1364:	push	{r3, lr}
    1368:	pop	{r3, pc}
