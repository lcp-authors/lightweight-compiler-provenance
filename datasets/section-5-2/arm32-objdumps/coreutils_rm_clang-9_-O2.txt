
../repos/coreutils/src/rm:     file format elf32-littlearm


Disassembly of section .init:

000111a4 <.init>:
   111a4:	push	{r3, lr}
   111a8:	bl	11534 <__assert_fail@plt+0x4c>
   111ac:	pop	{r3, pc}

Disassembly of section .plt:

000111b0 <fstatfs64@plt-0x14>:
   111b0:	push	{lr}		; (str lr, [sp, #-4]!)
   111b4:	ldr	lr, [pc, #4]	; 111c0 <fstatfs64@plt-0x4>
   111b8:	add	lr, pc, lr
   111bc:	ldr	pc, [lr, #8]!
   111c0:	andeq	sl, r1, r0, asr #28

000111c4 <fstatfs64@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #106496	; 0x1a000
   111cc:	ldr	pc, [ip, #3648]!	; 0xe40

000111d0 <calloc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #106496	; 0x1a000
   111d8:	ldr	pc, [ip, #3640]!	; 0xe38

000111dc <fputs_unlocked@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #106496	; 0x1a000
   111e4:	ldr	pc, [ip, #3632]!	; 0xe30

000111e8 <raise@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #106496	; 0x1a000
   111f0:	ldr	pc, [ip, #3624]!	; 0xe28

000111f4 <__getdelim@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #106496	; 0x1a000
   111fc:	ldr	pc, [ip, #3616]!	; 0xe20

00011200 <strcmp@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #106496	; 0x1a000
   11208:	ldr	pc, [ip, #3608]!	; 0xe18

0001120c <fflush@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #106496	; 0x1a000
   11214:	ldr	pc, [ip, #3600]!	; 0xe10

00011218 <unlinkat@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #106496	; 0x1a000
   11220:	ldr	pc, [ip, #3592]!	; 0xe08

00011224 <memmove@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #106496	; 0x1a000
   1122c:	ldr	pc, [ip, #3584]!	; 0xe00

00011230 <free@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #106496	; 0x1a000
   11238:	ldr	pc, [ip, #3576]!	; 0xdf8

0001123c <faccessat@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #106496	; 0x1a000
   11244:	ldr	pc, [ip, #3568]!	; 0xdf0

00011248 <_exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #106496	; 0x1a000
   11250:	ldr	pc, [ip, #3560]!	; 0xde8

00011254 <memcpy@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #106496	; 0x1a000
   1125c:	ldr	pc, [ip, #3552]!	; 0xde0

00011260 <mbsinit@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #106496	; 0x1a000
   11268:	ldr	pc, [ip, #3544]!	; 0xdd8

0001126c <dcgettext@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #106496	; 0x1a000
   11274:	ldr	pc, [ip, #3536]!	; 0xdd0

00011278 <realloc@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #106496	; 0x1a000
   11280:	ldr	pc, [ip, #3528]!	; 0xdc8

00011284 <textdomain@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #106496	; 0x1a000
   1128c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011290 <geteuid@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #106496	; 0x1a000
   11298:	ldr	pc, [ip, #3512]!	; 0xdb8

0001129c <__fxstatat64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #106496	; 0x1a000
   112a4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112a8 <iswprint@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #106496	; 0x1a000
   112b0:	ldr	pc, [ip, #3496]!	; 0xda8

000112b4 <__fxstat64@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #106496	; 0x1a000
   112bc:	ldr	pc, [ip, #3488]!	; 0xda0

000112c0 <fwrite@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #106496	; 0x1a000
   112c8:	ldr	pc, [ip, #3480]!	; 0xd98

000112cc <lseek64@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #106496	; 0x1a000
   112d4:	ldr	pc, [ip, #3472]!	; 0xd90

000112d8 <__ctype_get_mb_cur_max@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #106496	; 0x1a000
   112e0:	ldr	pc, [ip, #3464]!	; 0xd88

000112e4 <__fpending@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #106496	; 0x1a000
   112ec:	ldr	pc, [ip, #3456]!	; 0xd80

000112f0 <mbrtowc@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #106496	; 0x1a000
   112f8:	ldr	pc, [ip, #3448]!	; 0xd78

000112fc <error@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #106496	; 0x1a000
   11304:	ldr	pc, [ip, #3440]!	; 0xd70

00011308 <open64@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #106496	; 0x1a000
   11310:	ldr	pc, [ip, #3432]!	; 0xd68

00011314 <malloc@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #106496	; 0x1a000
   1131c:	ldr	pc, [ip, #3424]!	; 0xd60

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #106496	; 0x1a000
   11328:	ldr	pc, [ip, #3416]!	; 0xd58

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #106496	; 0x1a000
   11334:	ldr	pc, [ip, #3408]!	; 0xd50

00011338 <__gmon_start__@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #106496	; 0x1a000
   11340:	ldr	pc, [ip, #3400]!	; 0xd48

00011344 <getopt_long@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #106496	; 0x1a000
   1134c:	ldr	pc, [ip, #3392]!	; 0xd40

00011350 <__ctype_b_loc@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #106496	; 0x1a000
   11358:	ldr	pc, [ip, #3384]!	; 0xd38

0001135c <exit@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #106496	; 0x1a000
   11364:	ldr	pc, [ip, #3376]!	; 0xd30

00011368 <bcmp@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #106496	; 0x1a000
   11370:	ldr	pc, [ip, #3368]!	; 0xd28

00011374 <strlen@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #106496	; 0x1a000
   1137c:	ldr	pc, [ip, #3360]!	; 0xd20

00011380 <openat64@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #106496	; 0x1a000
   11388:	ldr	pc, [ip, #3352]!	; 0xd18

0001138c <__errno_location@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #106496	; 0x1a000
   11394:	ldr	pc, [ip, #3344]!	; 0xd10

00011398 <__cxa_atexit@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #106496	; 0x1a000
   113a0:	ldr	pc, [ip, #3336]!	; 0xd08

000113a4 <memset@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #106496	; 0x1a000
   113ac:	ldr	pc, [ip, #3328]!	; 0xd00

000113b0 <__printf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #106496	; 0x1a000
   113b8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113bc <fileno@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #106496	; 0x1a000
   113c4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113c8 <__fprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #106496	; 0x1a000
   113d0:	ldr	pc, [ip, #3304]!	; 0xce8

000113d4 <fclose@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #106496	; 0x1a000
   113dc:	ldr	pc, [ip, #3296]!	; 0xce0

000113e0 <fseeko64@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #106496	; 0x1a000
   113e8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113ec <fcntl64@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #106496	; 0x1a000
   113f4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113f8 <rpmatch@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #106496	; 0x1a000
   11400:	ldr	pc, [ip, #3272]!	; 0xcc8

00011404 <__overflow@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #106496	; 0x1a000
   1140c:	ldr	pc, [ip, #3264]!	; 0xcc0

00011410 <setlocale@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #106496	; 0x1a000
   11418:	ldr	pc, [ip, #3256]!	; 0xcb8

0001141c <strrchr@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #106496	; 0x1a000
   11424:	ldr	pc, [ip, #3248]!	; 0xcb0

00011428 <nl_langinfo@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #106496	; 0x1a000
   11430:	ldr	pc, [ip, #3240]!	; 0xca8

00011434 <readdir64@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #106496	; 0x1a000
   1143c:	ldr	pc, [ip, #3232]!	; 0xca0

00011440 <fdopendir@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #106496	; 0x1a000
   11448:	ldr	pc, [ip, #3224]!	; 0xc98

0001144c <dirfd@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #106496	; 0x1a000
   11454:	ldr	pc, [ip, #3216]!	; 0xc90

00011458 <fchdir@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #106496	; 0x1a000
   11460:	ldr	pc, [ip, #3208]!	; 0xc88

00011464 <qsort@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #106496	; 0x1a000
   1146c:	ldr	pc, [ip, #3200]!	; 0xc80

00011470 <bindtextdomain@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #106496	; 0x1a000
   11478:	ldr	pc, [ip, #3192]!	; 0xc78

0001147c <__xstat64@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #106496	; 0x1a000
   11484:	ldr	pc, [ip, #3184]!	; 0xc70

00011488 <isatty@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #106496	; 0x1a000
   11490:	ldr	pc, [ip, #3176]!	; 0xc68

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #106496	; 0x1a000
   1149c:	ldr	pc, [ip, #3168]!	; 0xc60

000114a0 <abort@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #106496	; 0x1a000
   114a8:	ldr	pc, [ip, #3160]!	; 0xc58

000114ac <close@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #106496	; 0x1a000
   114b4:	ldr	pc, [ip, #3152]!	; 0xc50

000114b8 <__lxstat64@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #106496	; 0x1a000
   114c0:	ldr	pc, [ip, #3144]!	; 0xc48

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #106496	; 0x1a000
   114cc:	ldr	pc, [ip, #3136]!	; 0xc40

000114d0 <closedir@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #106496	; 0x1a000
   114d8:	ldr	pc, [ip, #3128]!	; 0xc38

000114dc <__mempcpy_chk@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #106496	; 0x1a000
   114e4:	ldr	pc, [ip, #3120]!	; 0xc30

000114e8 <__assert_fail@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #106496	; 0x1a000
   114f0:	ldr	pc, [ip, #3112]!	; 0xc28

Disassembly of section .text:

000114f8 <.text>:
   114f8:	mov	fp, #0
   114fc:	mov	lr, #0
   11500:	pop	{r1}		; (ldr r1, [sp], #4)
   11504:	mov	r2, sp
   11508:	push	{r2}		; (str r2, [sp, #-4]!)
   1150c:	push	{r0}		; (str r0, [sp, #-4]!)
   11510:	ldr	ip, [pc, #16]	; 11528 <__assert_fail@plt+0x40>
   11514:	push	{ip}		; (str ip, [sp, #-4]!)
   11518:	ldr	r0, [pc, #12]	; 1152c <__assert_fail@plt+0x44>
   1151c:	ldr	r3, [pc, #12]	; 11530 <__assert_fail@plt+0x48>
   11520:	bl	11320 <__libc_start_main@plt>
   11524:	bl	114a0 <abort@plt>
   11528:	andeq	sl, r1, ip, lsr #16
   1152c:	strdeq	r1, [r1], -ip
   11530:	andeq	sl, r1, ip, asr #15
   11534:	ldr	r3, [pc, #20]	; 11550 <__assert_fail@plt+0x68>
   11538:	ldr	r2, [pc, #20]	; 11554 <__assert_fail@plt+0x6c>
   1153c:	add	r3, pc, r3
   11540:	ldr	r2, [r3, r2]
   11544:	cmp	r2, #0
   11548:	bxeq	lr
   1154c:	b	11338 <__gmon_start__@plt>
   11550:			; <UNDEFINED> instruction: 0x0001aabc
   11554:	andeq	r0, r0, ip, lsl r1
   11558:	ldr	r0, [pc, #24]	; 11578 <__assert_fail@plt+0x90>
   1155c:	ldr	r3, [pc, #24]	; 1157c <__assert_fail@plt+0x94>
   11560:	cmp	r3, r0
   11564:	bxeq	lr
   11568:	ldr	r3, [pc, #16]	; 11580 <__assert_fail@plt+0x98>
   1156c:	cmp	r3, #0
   11570:	bxeq	lr
   11574:	bx	r3
   11578:	andeq	ip, r2, r8, ror r1
   1157c:	andeq	ip, r2, r8, ror r1
   11580:	andeq	r0, r0, r0
   11584:	ldr	r0, [pc, #36]	; 115b0 <__assert_fail@plt+0xc8>
   11588:	ldr	r1, [pc, #36]	; 115b4 <__assert_fail@plt+0xcc>
   1158c:	sub	r1, r1, r0
   11590:	asr	r1, r1, #2
   11594:	add	r1, r1, r1, lsr #31
   11598:	asrs	r1, r1, #1
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0xd0>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	ip, r2, r8, ror r1
   115b4:	andeq	ip, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	push	{r4, lr}
   115c0:	ldr	r4, [pc, #24]	; 115e0 <__assert_fail@plt+0xf8>
   115c4:	ldrb	r3, [r4]
   115c8:	cmp	r3, #0
   115cc:	popne	{r4, pc}
   115d0:	bl	11558 <__assert_fail@plt+0x70>
   115d4:	mov	r3, #1
   115d8:	strb	r3, [r4]
   115dc:	pop	{r4, pc}
   115e0:	muleq	r2, ip, r1
   115e4:	b	11584 <__assert_fail@plt+0x9c>
   115e8:	push	{fp, lr}
   115ec:	mov	fp, sp
   115f0:	sub	sp, sp, #56	; 0x38
   115f4:	mov	r4, r0
   115f8:	cmp	r0, #0
   115fc:	bne	118b8 <__assert_fail@plt+0x3d0>
   11600:	movw	r1, #43131	; 0xa87b
   11604:	mov	r0, #0
   11608:	mov	r2, #5
   1160c:	movt	r1, #1
   11610:	bl	1126c <dcgettext@plt>
   11614:	movw	r5, #49596	; 0xc1bc
   11618:	mov	r1, r0
   1161c:	mov	r0, #1
   11620:	movt	r5, #2
   11624:	ldr	r2, [r5]
   11628:	bl	113b0 <__printf_chk@plt>
   1162c:	movw	r1, #43164	; 0xa89c
   11630:	mov	r0, #0
   11634:	mov	r2, #5
   11638:	movt	r1, #1
   1163c:	bl	1126c <dcgettext@plt>
   11640:	movw	r7, #49556	; 0xc194
   11644:	movt	r7, #2
   11648:	ldr	r1, [r7]
   1164c:	bl	111dc <fputs_unlocked@plt>
   11650:	movw	r1, #43324	; 0xa93c
   11654:	mov	r0, #0
   11658:	mov	r2, #5
   1165c:	movt	r1, #1
   11660:	bl	1126c <dcgettext@plt>
   11664:	ldr	r1, [r7]
   11668:	bl	111dc <fputs_unlocked@plt>
   1166c:	movw	r1, #43700	; 0xaab4
   11670:	mov	r0, #0
   11674:	mov	r2, #5
   11678:	movt	r1, #1
   1167c:	bl	1126c <dcgettext@plt>
   11680:	ldr	r1, [r7]
   11684:	bl	111dc <fputs_unlocked@plt>
   11688:	movw	r1, #43924	; 0xab94
   1168c:	mov	r0, #0
   11690:	mov	r2, #5
   11694:	movt	r1, #1
   11698:	bl	1126c <dcgettext@plt>
   1169c:	ldr	r1, [r7]
   116a0:	bl	111dc <fputs_unlocked@plt>
   116a4:	movw	r1, #44178	; 0xac92
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	movt	r1, #1
   116b4:	bl	1126c <dcgettext@plt>
   116b8:	ldr	r1, [r7]
   116bc:	bl	111dc <fputs_unlocked@plt>
   116c0:	movw	r1, #44353	; 0xad41
   116c4:	mov	r0, #0
   116c8:	mov	r2, #5
   116cc:	movt	r1, #1
   116d0:	bl	1126c <dcgettext@plt>
   116d4:	ldr	r1, [r7]
   116d8:	bl	111dc <fputs_unlocked@plt>
   116dc:	movw	r1, #44398	; 0xad6e
   116e0:	mov	r0, #0
   116e4:	mov	r2, #5
   116e8:	movt	r1, #1
   116ec:	bl	1126c <dcgettext@plt>
   116f0:	ldr	r1, [r7]
   116f4:	bl	111dc <fputs_unlocked@plt>
   116f8:	movw	r1, #44452	; 0xada4
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	1126c <dcgettext@plt>
   1170c:	ldr	r1, [r7]
   11710:	bl	111dc <fputs_unlocked@plt>
   11714:	movw	r1, #44607	; 0xae3f
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	1126c <dcgettext@plt>
   11728:	ldr	r2, [r5]
   1172c:	mov	r1, r0
   11730:	mov	r0, #1
   11734:	mov	r3, r2
   11738:	bl	113b0 <__printf_chk@plt>
   1173c:	movw	r1, #44729	; 0xaeb9
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #1
   1174c:	bl	1126c <dcgettext@plt>
   11750:	ldr	r1, [r7]
   11754:	bl	111dc <fputs_unlocked@plt>
   11758:	movw	r0, #46136	; 0xb438
   1175c:	mov	r2, #48	; 0x30
   11760:	mov	r6, sp
   11764:	movw	r5, #44958	; 0xaf9e
   11768:	movt	r0, #1
   1176c:	movt	r5, #1
   11770:	add	r1, r0, #32
   11774:	add	r3, r0, #16
   11778:	vld1.64	{d18-d19}, [r0], r2
   1177c:	vld1.64	{d16-d17}, [r1]
   11780:	vld1.64	{d20-d21}, [r3]
   11784:	vldr	d22, [r0]
   11788:	add	r1, r6, #32
   1178c:	add	r0, r6, #16
   11790:	vst1.64	{d16-d17}, [r1]
   11794:	movw	r1, #45434	; 0xb17a
   11798:	vst1.64	{d20-d21}, [r0]
   1179c:	mov	r0, r6
   117a0:	movt	r1, #1
   117a4:	vst1.64	{d18-d19}, [r0], r2
   117a8:	vstr	d22, [r0]
   117ac:	mov	r0, r5
   117b0:	bl	11200 <strcmp@plt>
   117b4:	cmp	r0, #0
   117b8:	ldrne	r1, [r6, #8]!
   117bc:	cmpne	r1, #0
   117c0:	bne	117ac <__assert_fail@plt+0x2c4>
   117c4:	movw	r1, #45529	; 0xb1d9
   117c8:	ldr	r6, [r6, #4]
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	1126c <dcgettext@plt>
   117dc:	movw	r2, #45125	; 0xb045
   117e0:	movw	r3, #45552	; 0xb1f0
   117e4:	mov	r1, r0
   117e8:	mov	r0, #1
   117ec:	movt	r2, #1
   117f0:	movt	r3, #1
   117f4:	bl	113b0 <__printf_chk@plt>
   117f8:	cmp	r6, #0
   117fc:	mov	r0, #5
   11800:	mov	r1, #0
   11804:	moveq	r6, r5
   11808:	bl	11410 <setlocale@plt>
   1180c:	cmp	r0, #0
   11810:	beq	11848 <__assert_fail@plt+0x360>
   11814:	movw	r1, #45592	; 0xb218
   11818:	mov	r2, #3
   1181c:	movt	r1, #1
   11820:	bl	11494 <strncmp@plt>
   11824:	cmp	r0, #0
   11828:	beq	11848 <__assert_fail@plt+0x360>
   1182c:	movw	r1, #45596	; 0xb21c
   11830:	mov	r0, #0
   11834:	mov	r2, #5
   11838:	movt	r1, #1
   1183c:	bl	1126c <dcgettext@plt>
   11840:	ldr	r1, [r7]
   11844:	bl	111dc <fputs_unlocked@plt>
   11848:	movw	r1, #45667	; 0xb263
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	1126c <dcgettext@plt>
   1185c:	movw	r2, #45552	; 0xb1f0
   11860:	mov	r1, r0
   11864:	mov	r0, #1
   11868:	mov	r3, r5
   1186c:	movt	r2, #1
   11870:	bl	113b0 <__printf_chk@plt>
   11874:	movw	r1, #45694	; 0xb27e
   11878:	mov	r0, #0
   1187c:	mov	r2, #5
   11880:	movt	r1, #1
   11884:	bl	1126c <dcgettext@plt>
   11888:	mov	r1, r0
   1188c:	movw	r0, #45462	; 0xb196
   11890:	movw	r3, #45744	; 0xb2b0
   11894:	cmp	r6, r5
   11898:	mov	r2, r6
   1189c:	movt	r0, #1
   118a0:	movt	r3, #1
   118a4:	moveq	r3, r0
   118a8:	mov	r0, #1
   118ac:	bl	113b0 <__printf_chk@plt>
   118b0:	mov	r0, r4
   118b4:	bl	1135c <exit@plt>
   118b8:	movw	r0, #49544	; 0xc188
   118bc:	movw	r1, #43092	; 0xa854
   118c0:	mov	r2, #5
   118c4:	movt	r0, #2
   118c8:	movt	r1, #1
   118cc:	ldr	r5, [r0]
   118d0:	mov	r0, #0
   118d4:	bl	1126c <dcgettext@plt>
   118d8:	mov	r2, r0
   118dc:	movw	r0, #49596	; 0xc1bc
   118e0:	mov	r1, #1
   118e4:	movt	r0, #2
   118e8:	ldr	r3, [r0]
   118ec:	mov	r0, r5
   118f0:	bl	113c8 <__fprintf_chk@plt>
   118f4:	mov	r0, r4
   118f8:	bl	1135c <exit@plt>
   118fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11900:	add	fp, sp, #28
   11904:	sub	sp, sp, #52	; 0x34
   11908:	mov	r5, r0
   1190c:	ldr	r0, [r1]
   11910:	mov	r4, r1
   11914:	bl	17398 <__assert_fail@plt+0x5eb0>
   11918:	movw	r1, #45744	; 0xb2b0
   1191c:	mov	r0, #6
   11920:	movt	r1, #1
   11924:	bl	11410 <setlocale@plt>
   11928:	movw	r6, #45129	; 0xb049
   1192c:	movw	r1, #44961	; 0xafa1
   11930:	movt	r6, #1
   11934:	movt	r1, #1
   11938:	mov	r0, r6
   1193c:	bl	11470 <bindtextdomain@plt>
   11940:	mov	r0, r6
   11944:	bl	11284 <textdomain@plt>
   11948:	movw	r0, #13832	; 0x3608
   1194c:	movt	r0, #1
   11950:	bl	1a830 <__assert_fail@plt+0x9348>
   11954:	mov	r8, #0
   11958:	mov	r0, #4
   1195c:	strb	r8, [sp, #42]	; 0x2a
   11960:	str	r0, [sp, #36]	; 0x24
   11964:	mov	r0, #0
   11968:	strb	r8, [sp, #32]
   1196c:	strb	r8, [sp, #48]	; 0x30
   11970:	str	r8, [sp, #44]	; 0x2c
   11974:	strh	r8, [sp, #40]	; 0x28
   11978:	bl	11488 <isatty@plt>
   1197c:	cmp	r0, #0
   11980:	movw	r6, #44985	; 0xafb9
   11984:	movw	r3, #45888	; 0xb340
   11988:	strh	r8, [sp, #50]	; 0x32
   1198c:	mov	sl, #0
   11990:	movwne	r0, #1
   11994:	movt	r6, #1
   11998:	movt	r3, #1
   1199c:	strb	r0, [sp, #49]	; 0x31
   119a0:	mov	r0, #0
   119a4:	str	r0, [sp, #24]
   119a8:	mov	r0, #0
   119ac:	str	r0, [sp, #28]
   119b0:	mov	r0, #1
   119b4:	str	r0, [sp, #20]
   119b8:	mov	r0, r5
   119bc:	mov	r1, r4
   119c0:	mov	r2, r6
   119c4:	str	r8, [sp]
   119c8:	mov	r9, r3
   119cc:	bl	11344 <getopt_long@plt>
   119d0:	cmp	r0, #72	; 0x48
   119d4:	ble	11c74 <__assert_fail@plt+0x78c>
   119d8:	sub	r1, r0, #73	; 0x49
   119dc:	mov	r7, r6
   119e0:	cmp	r1, #45	; 0x2d
   119e4:	bhi	11ac4 <__assert_fail@plt+0x5dc>
   119e8:	add	r0, pc, #8
   119ec:	mov	r6, r7
   119f0:	mov	r3, r9
   119f4:	ldr	pc, [r0, r1, lsl #2]
   119f8:	andeq	r1, r1, r4, lsl #23
   119fc:	andeq	r1, r1, r0, ror #29
   11a00:	andeq	r1, r1, r0, ror #29
   11a04:	andeq	r1, r1, r0, ror #29
   11a08:	andeq	r1, r1, r0, ror #29
   11a0c:	andeq	r1, r1, r0, ror #29
   11a10:	andeq	r1, r1, r0, ror #29
   11a14:	andeq	r1, r1, r0, ror #29
   11a18:	andeq	r1, r1, r0, ror #29
   11a1c:			; <UNDEFINED> instruction: 0x00011ab0
   11a20:	andeq	r1, r1, r0, ror #29
   11a24:	andeq	r1, r1, r0, ror #29
   11a28:	andeq	r1, r1, r0, ror #29
   11a2c:	andeq	r1, r1, r0, ror #29
   11a30:	andeq	r1, r1, r0, ror #29
   11a34:	andeq	r1, r1, r0, ror #29
   11a38:	andeq	r1, r1, r0, ror #29
   11a3c:	andeq	r1, r1, r0, ror #29
   11a40:	andeq	r1, r1, r0, ror #29
   11a44:	andeq	r1, r1, r0, ror #29
   11a48:	andeq	r1, r1, r0, ror #29
   11a4c:	andeq	r1, r1, r0, ror #29
   11a50:	andeq	r1, r1, r0, ror #29
   11a54:	andeq	r1, r1, r0, ror #29
   11a58:	andeq	r1, r1, r0, ror #29
   11a5c:	andeq	r1, r1, r0, ror #29
   11a60:	andeq	r1, r1, r0, ror #29
   11a64:	andeq	r1, r1, r8, asr #23
   11a68:	andeq	r1, r1, r0, ror #29
   11a6c:	andeq	r1, r1, ip, lsr #23
   11a70:	andeq	r1, r1, r0, ror #29
   11a74:	andeq	r1, r1, r0, ror #29
   11a78:	andeq	r1, r1, r4, ror fp
   11a7c:	andeq	r1, r1, r0, ror #29
   11a80:	andeq	r1, r1, r0, ror #29
   11a84:	andeq	r1, r1, r0, ror #29
   11a88:	andeq	r1, r1, r0, ror #29
   11a8c:	andeq	r1, r1, r0, ror #29
   11a90:	andeq	r1, r1, r0, ror #29
   11a94:	andeq	r1, r1, r0, ror #29
   11a98:	andeq	r1, r1, r0, ror #29
   11a9c:			; <UNDEFINED> instruction: 0x00011ab0
   11aa0:	andeq	r1, r1, r0, ror #29
   11aa4:	andeq	r1, r1, r0, ror #29
   11aa8:	andeq	r1, r1, r0, ror #29
   11aac:	ldrdeq	r1, [r1], -r4
   11ab0:	mov	r1, #1
   11ab4:	mov	r0, #1
   11ab8:	str	r0, [sp, #24]
   11abc:	strb	r1, [sp, #41]	; 0x29
   11ac0:	b	119b8 <__assert_fail@plt+0x4d0>
   11ac4:	sub	r0, r0, #256	; 0x100
   11ac8:	cmp	r0, #4
   11acc:	bhi	11ee0 <__assert_fail@plt+0x9f8>
   11ad0:	add	r1, pc, #8
   11ad4:	mov	r6, r7
   11ad8:	mov	r3, r9
   11adc:	ldr	pc, [r1, r0, lsl #2]
   11ae0:	strdeq	r1, [r1], -r4
   11ae4:	andeq	r1, r1, r8, ror #24
   11ae8:	andeq	r1, r1, r0, ror #23
   11aec:	andeq	r1, r1, ip, lsl ip
   11af0:	andeq	r1, r1, r0, lsr #23
   11af4:	movw	r0, #49560	; 0xc198
   11af8:	movt	r0, #2
   11afc:	ldr	r1, [r0]
   11b00:	cmp	r1, #0
   11b04:	beq	11b74 <__assert_fail@plt+0x68c>
   11b08:	movw	r0, #49452	; 0xc12c
   11b0c:	mov	r2, #4
   11b10:	movw	r3, #46080	; 0xb400
   11b14:	movt	r0, #2
   11b18:	str	r2, [sp]
   11b1c:	movw	r2, #46104	; 0xb418
   11b20:	movt	r3, #1
   11b24:	movt	r2, #1
   11b28:	ldr	r0, [r0]
   11b2c:	str	r0, [sp, #4]
   11b30:	mov	r0, #1
   11b34:	str	r0, [sp, #8]
   11b38:	movw	r0, #44993	; 0xafc1
   11b3c:	movt	r0, #1
   11b40:	bl	13300 <__assert_fail@plt+0x1e18>
   11b44:	movw	r1, #46080	; 0xb400
   11b48:	mov	r3, r9
   11b4c:	mov	r6, r7
   11b50:	movt	r1, #1
   11b54:	ldr	r0, [r1, r0, lsl #2]
   11b58:	cmp	r0, #2
   11b5c:	beq	11b74 <__assert_fail@plt+0x68c>
   11b60:	cmp	r0, #1
   11b64:	beq	11b84 <__assert_fail@plt+0x69c>
   11b68:	cmp	r0, #0
   11b6c:	bne	119b8 <__assert_fail@plt+0x4d0>
   11b70:	b	11bb4 <__assert_fail@plt+0x6cc>
   11b74:	mov	sl, #0
   11b78:	mov	r0, #3
   11b7c:	strb	sl, [sp, #32]
   11b80:	b	11bb8 <__assert_fail@plt+0x6d0>
   11b84:	mov	sl, #0
   11b88:	mov	r0, #4
   11b8c:	strb	sl, [sp, #32]
   11b90:	str	r0, [sp, #36]	; 0x24
   11b94:	mov	r0, #1
   11b98:	str	r0, [sp, #28]
   11b9c:	b	119b8 <__assert_fail@plt+0x4d0>
   11ba0:	mov	r0, #1
   11ba4:	strb	r0, [sp, #49]	; 0x31
   11ba8:	b	119b8 <__assert_fail@plt+0x4d0>
   11bac:	mov	sl, #1
   11bb0:	strb	sl, [sp, #32]
   11bb4:	mov	r0, #5
   11bb8:	str	r0, [sp, #36]	; 0x24
   11bbc:	mov	r0, #0
   11bc0:	str	r0, [sp, #28]
   11bc4:	b	119b8 <__assert_fail@plt+0x4d0>
   11bc8:	mov	r0, #1
   11bcc:	strb	r0, [sp, #42]	; 0x2a
   11bd0:	b	119b8 <__assert_fail@plt+0x4d0>
   11bd4:	mov	r0, #1
   11bd8:	strb	r0, [sp, #50]	; 0x32
   11bdc:	b	119b8 <__assert_fail@plt+0x4d0>
   11be0:	movw	r0, #49536	; 0xc180
   11be4:	movw	r1, #45007	; 0xafcf
   11be8:	movt	r0, #2
   11bec:	movt	r1, #1
   11bf0:	ldr	r0, [r0]
   11bf4:	add	r0, r4, r0, lsl #2
   11bf8:	ldr	r0, [r0, #-4]
   11bfc:	bl	11200 <strcmp@plt>
   11c00:	mov	r1, #0
   11c04:	mov	r3, r9
   11c08:	mov	r6, r7
   11c0c:	cmp	r0, #0
   11c10:	str	r1, [sp, #20]
   11c14:	beq	119b8 <__assert_fail@plt+0x4d0>
   11c18:	b	11e7c <__assert_fail@plt+0x994>
   11c1c:	movw	r0, #49560	; 0xc198
   11c20:	mov	r1, #1
   11c24:	movt	r0, #2
   11c28:	str	r1, [sp, #20]
   11c2c:	ldr	r0, [r0]
   11c30:	cmp	r0, #0
   11c34:	beq	119b8 <__assert_fail@plt+0x4d0>
   11c38:	movw	r1, #45079	; 0xb017
   11c3c:	movt	r1, #1
   11c40:	bl	11200 <strcmp@plt>
   11c44:	cmp	r0, #0
   11c48:	bne	11ea0 <__assert_fail@plt+0x9b8>
   11c4c:	mov	r1, #1
   11c50:	mov	r0, #1
   11c54:	mov	r6, r7
   11c58:	mov	r3, r9
   11c5c:	str	r0, [sp, #20]
   11c60:	strb	r1, [sp, #48]	; 0x30
   11c64:	b	119b8 <__assert_fail@plt+0x4d0>
   11c68:	mov	r0, #1
   11c6c:	strb	r0, [sp, #40]	; 0x28
   11c70:	b	119b8 <__assert_fail@plt+0x4d0>
   11c74:	cmn	r0, #1
   11c78:	bne	11e00 <__assert_fail@plt+0x918>
   11c7c:	movw	r8, #49536	; 0xc180
   11c80:	movt	r8, #2
   11c84:	ldr	r6, [r8]
   11c88:	cmp	r6, r5
   11c8c:	bge	11d44 <__assert_fail@plt+0x85c>
   11c90:	ldr	r7, [sp, #24]
   11c94:	tst	r7, #255	; 0xff
   11c98:	beq	11cc8 <__assert_fail@plt+0x7e0>
   11c9c:	ldr	r0, [sp, #20]
   11ca0:	eor	r0, r0, #1
   11ca4:	tst	r0, #1
   11ca8:	bne	11cc8 <__assert_fail@plt+0x7e0>
   11cac:	movw	r0, #49568	; 0xc1a0
   11cb0:	movt	r0, #2
   11cb4:	bl	19138 <__assert_fail@plt+0x7c50>
   11cb8:	cmp	r0, #0
   11cbc:	str	r0, [sp, #44]	; 0x2c
   11cc0:	beq	11f14 <__assert_fail@plt+0xa2c>
   11cc4:	ldr	r6, [r8]
   11cc8:	ldr	r0, [sp, #28]
   11ccc:	tst	r0, #1
   11cd0:	beq	11dd0 <__assert_fail@plt+0x8e8>
   11cd4:	sub	r5, r5, r6
   11cd8:	cmp	r5, #3
   11cdc:	bhi	11ce8 <__assert_fail@plt+0x800>
   11ce0:	tst	r7, #255	; 0xff
   11ce4:	beq	11dd0 <__assert_fail@plt+0x8e8>
   11ce8:	movw	r0, #49544	; 0xc188
   11cec:	cmn	r5, #1
   11cf0:	mov	r3, r5
   11cf4:	movt	r0, #2
   11cf8:	ldr	r9, [r0]
   11cfc:	bgt	11d20 <__assert_fail@plt+0x838>
   11d00:	movw	r8, #16960	; 0x4240
   11d04:	asr	r1, r5, #31
   11d08:	mov	r0, r5
   11d0c:	mov	r3, #0
   11d10:	movt	r8, #15
   11d14:	mov	r2, r8
   11d18:	bl	1a658 <__assert_fail@plt+0x9170>
   11d1c:	add	r3, r2, r8
   11d20:	mov	r0, #5
   11d24:	tst	r7, #255	; 0xff
   11d28:	beq	11d7c <__assert_fail@plt+0x894>
   11d2c:	movw	r1, #45246	; 0xb0be
   11d30:	movw	r2, #45285	; 0xb0e5
   11d34:	str	r0, [sp]
   11d38:	movt	r1, #1
   11d3c:	movt	r2, #1
   11d40:	b	11d90 <__assert_fail@plt+0x8a8>
   11d44:	mov	r5, #0
   11d48:	tst	sl, #255	; 0xff
   11d4c:	bne	11df4 <__assert_fail@plt+0x90c>
   11d50:	movw	r1, #45199	; 0xb08f
   11d54:	mov	r0, #0
   11d58:	mov	r2, #5
   11d5c:	movt	r1, #1
   11d60:	bl	1126c <dcgettext@plt>
   11d64:	mov	r2, r0
   11d68:	mov	r0, #0
   11d6c:	mov	r1, #0
   11d70:	bl	112fc <error@plt>
   11d74:	mov	r0, #1
   11d78:	bl	115e8 <__assert_fail@plt+0x100>
   11d7c:	movw	r1, #45325	; 0xb10d
   11d80:	movw	r2, #45352	; 0xb128
   11d84:	str	r0, [sp]
   11d88:	movt	r1, #1
   11d8c:	movt	r2, #1
   11d90:	mov	r0, #0
   11d94:	bl	114c4 <dcngettext@plt>
   11d98:	mov	r2, r0
   11d9c:	movw	r0, #49596	; 0xc1bc
   11da0:	mov	r1, #1
   11da4:	str	r5, [sp]
   11da8:	movt	r0, #2
   11dac:	ldr	r3, [r0]
   11db0:	asr	r0, r5, #31
   11db4:	str	r0, [sp, #4]
   11db8:	mov	r0, r9
   11dbc:	bl	113c8 <__fprintf_chk@plt>
   11dc0:	mov	r5, #0
   11dc4:	bl	19ee4 <__assert_fail@plt+0x89fc>
   11dc8:	cmp	r0, #0
   11dcc:	beq	11df4 <__assert_fail@plt+0x90c>
   11dd0:	add	r0, r4, r6, lsl #2
   11dd4:	add	r1, sp, #32
   11dd8:	bl	1202c <__assert_fail@plt+0xb44>
   11ddc:	sub	r1, r0, #2
   11de0:	cmp	r1, #3
   11de4:	bcs	11ef4 <__assert_fail@plt+0xa0c>
   11de8:	sub	r0, r0, #4
   11dec:	clz	r0, r0
   11df0:	lsr	r5, r0, #5
   11df4:	mov	r0, r5
   11df8:	sub	sp, fp, #28
   11dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e00:	cmn	r0, #3
   11e04:	bne	11e6c <__assert_fail@plt+0x984>
   11e08:	movw	r0, #49448	; 0xc128
   11e0c:	movw	r2, #45186	; 0xb082
   11e10:	movw	r5, #45139	; 0xb053
   11e14:	movw	r7, #45166	; 0xb06e
   11e18:	movw	r6, #45150	; 0xb05e
   11e1c:	mov	r1, #0
   11e20:	movt	r0, #2
   11e24:	movt	r2, #1
   11e28:	movt	r5, #1
   11e2c:	movt	r7, #1
   11e30:	movt	r6, #1
   11e34:	ldr	r3, [r0]
   11e38:	movw	r0, #49556	; 0xc194
   11e3c:	stm	sp, {r5, r6, r7}
   11e40:	str	r2, [sp, #12]
   11e44:	movw	r2, #45125	; 0xb045
   11e48:	str	r1, [sp, #16]
   11e4c:	movw	r1, #44958	; 0xaf9e
   11e50:	movt	r0, #2
   11e54:	movt	r1, #1
   11e58:	movt	r2, #1
   11e5c:	ldr	r0, [r0]
   11e60:	bl	1965c <__assert_fail@plt+0x8174>
   11e64:	mov	r0, #0
   11e68:	bl	1135c <exit@plt>
   11e6c:	cmn	r0, #2
   11e70:	bne	11ee0 <__assert_fail@plt+0x9f8>
   11e74:	mov	r0, #0
   11e78:	bl	115e8 <__assert_fail@plt+0x100>
   11e7c:	movw	r1, #45026	; 0xafe2
   11e80:	mov	r0, #0
   11e84:	mov	r2, #5
   11e88:	movt	r1, #1
   11e8c:	bl	1126c <dcgettext@plt>
   11e90:	mov	r2, r0
   11e94:	mov	r0, #1
   11e98:	mov	r1, #0
   11e9c:	bl	112fc <error@plt>
   11ea0:	movw	r1, #45083	; 0xb01b
   11ea4:	mov	r0, #0
   11ea8:	mov	r2, #5
   11eac:	movt	r1, #1
   11eb0:	bl	1126c <dcgettext@plt>
   11eb4:	mov	r4, r0
   11eb8:	movw	r0, #49560	; 0xc198
   11ebc:	movt	r0, #2
   11ec0:	ldr	r1, [r0]
   11ec4:	mov	r0, #4
   11ec8:	bl	18ac4 <__assert_fail@plt+0x75dc>
   11ecc:	mov	r3, r0
   11ed0:	mov	r0, #1
   11ed4:	mov	r1, #0
   11ed8:	mov	r2, r4
   11edc:	bl	112fc <error@plt>
   11ee0:	mov	r0, r5
   11ee4:	mov	r1, r4
   11ee8:	bl	11f58 <__assert_fail@plt+0xa70>
   11eec:	mov	r0, #1
   11ef0:	bl	115e8 <__assert_fail@plt+0x100>
   11ef4:	movw	r0, #45380	; 0xb144
   11ef8:	movw	r1, #45402	; 0xb15a
   11efc:	movw	r3, #45411	; 0xb163
   11f00:	movw	r2, #371	; 0x173
   11f04:	movt	r0, #1
   11f08:	movt	r1, #1
   11f0c:	movt	r3, #1
   11f10:	bl	114e8 <__assert_fail@plt>
   11f14:	bl	1138c <__errno_location@plt>
   11f18:	movw	r1, #45215	; 0xb09f
   11f1c:	ldr	r4, [r0]
   11f20:	mov	r0, #0
   11f24:	mov	r2, #5
   11f28:	movt	r1, #1
   11f2c:	bl	1126c <dcgettext@plt>
   11f30:	movw	r1, #48513	; 0xbd81
   11f34:	mov	r5, r0
   11f38:	mov	r0, #4
   11f3c:	movt	r1, #1
   11f40:	bl	18ac4 <__assert_fail@plt+0x75dc>
   11f44:	mov	r3, r0
   11f48:	mov	r0, #1
   11f4c:	mov	r1, r4
   11f50:	mov	r2, r5
   11f54:	bl	112fc <error@plt>
   11f58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11f5c:	add	fp, sp, #24
   11f60:	sub	sp, sp, #112	; 0x70
   11f64:	cmp	r0, #2
   11f68:	blt	12024 <__assert_fail@plt+0xb3c>
   11f6c:	mov	r4, r1
   11f70:	mov	r6, r0
   11f74:	mov	r7, #1
   11f78:	add	r8, sp, #8
   11f7c:	b	11f8c <__assert_fail@plt+0xaa4>
   11f80:	add	r7, r7, #1
   11f84:	cmp	r6, r7
   11f88:	beq	12024 <__assert_fail@plt+0xb3c>
   11f8c:	ldr	r5, [r4, r7, lsl #2]
   11f90:	ldrb	r0, [r5]
   11f94:	cmp	r0, #45	; 0x2d
   11f98:	bne	11f80 <__assert_fail@plt+0xa98>
   11f9c:	ldrb	r0, [r5, #1]
   11fa0:	cmp	r0, #0
   11fa4:	beq	11f80 <__assert_fail@plt+0xa98>
   11fa8:	mov	r0, #3
   11fac:	mov	r1, r5
   11fb0:	mov	r2, r8
   11fb4:	bl	114b8 <__lxstat64@plt>
   11fb8:	cmp	r0, #0
   11fbc:	bne	11f80 <__assert_fail@plt+0xa98>
   11fc0:	movw	r0, #49544	; 0xc188
   11fc4:	movw	r1, #45844	; 0xb314
   11fc8:	mov	r2, #5
   11fcc:	movt	r0, #2
   11fd0:	movt	r1, #1
   11fd4:	ldr	r8, [r0]
   11fd8:	mov	r0, #0
   11fdc:	bl	1126c <dcgettext@plt>
   11fe0:	ldr	r4, [r4]
   11fe4:	mov	r7, r0
   11fe8:	mov	r0, #1
   11fec:	mov	r1, #3
   11ff0:	mov	r2, r5
   11ff4:	bl	18a1c <__assert_fail@plt+0x7534>
   11ff8:	mov	r6, r0
   11ffc:	mov	r0, #4
   12000:	mov	r1, r5
   12004:	bl	18ac4 <__assert_fail@plt+0x75dc>
   12008:	str	r0, [sp, #4]
   1200c:	mov	r0, r8
   12010:	mov	r1, #1
   12014:	mov	r2, r7
   12018:	mov	r3, r4
   1201c:	str	r6, [sp]
   12020:	bl	113c8 <__fprintf_chk@plt>
   12024:	sub	sp, fp, #24
   12028:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1202c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12030:	add	fp, sp, #28
   12034:	sub	sp, sp, #124	; 0x7c
   12038:	mov	sl, r1
   1203c:	ldr	r1, [r0]
   12040:	cmp	r1, #0
   12044:	beq	12724 <__assert_fail@plt+0x123c>
   12048:	ldrb	r2, [sl, #8]
   1204c:	mov	r1, #600	; 0x258
   12050:	mov	r9, #0
   12054:	cmp	r2, #0
   12058:	mov	r2, #0
   1205c:	movweq	r1, #536	; 0x218
   12060:	bl	19e68 <__assert_fail@plt+0x8980>
   12064:	mov	r4, r0
   12068:	bl	144b0 <__assert_fail@plt+0x2fc8>
   1206c:	cmp	r0, #0
   12070:	beq	1272c <__assert_fail@plt+0x1244>
   12074:	mov	r8, r0
   12078:	add	r0, r4, #16
   1207c:	mov	r7, #2
   12080:	str	r0, [sp, #12]
   12084:	b	120a8 <__assert_fail@plt+0xbc0>
   12088:	cmp	r6, #4
   1208c:	bne	12804 <__assert_fail@plt+0x131c>
   12090:	mov	r7, r6
   12094:	mov	r0, r4
   12098:	bl	144b0 <__assert_fail@plt+0x2fc8>
   1209c:	mov	r8, r0
   120a0:	cmp	r0, #0
   120a4:	beq	12730 <__assert_fail@plt+0x1248>
   120a8:	ldrh	r0, [r8, #56]	; 0x38
   120ac:	sub	r1, r0, #1
   120b0:	cmp	r1, #12
   120b4:	bhi	127b4 <__assert_fail@plt+0x12cc>
   120b8:	add	r2, pc, #4
   120bc:	add	r5, r8, #64	; 0x40
   120c0:	ldr	pc, [r2, r1, lsl #2]
   120c4:	andeq	r2, r1, ip, ror #2
   120c8:	andeq	r2, r1, ip, lsl #4
   120cc:	strdeq	r2, [r1], -r8
   120d0:	strdeq	r2, [r1], -r8
   120d4:			; <UNDEFINED> instruction: 0x000127b4
   120d8:	andeq	r2, r1, r8, ror #4
   120dc:	andeq	r2, r1, ip, asr #3
   120e0:	strdeq	r2, [r1], -r8
   120e4:			; <UNDEFINED> instruction: 0x000127b4
   120e8:	strdeq	r2, [r1], -r8
   120ec:	strdeq	r2, [r1], -r8
   120f0:	strdeq	r2, [r1], -r8
   120f4:	strdeq	r2, [r1], -r8
   120f8:	orr	r0, r0, #2
   120fc:	mov	r1, #3
   12100:	mov	r3, sl
   12104:	sub	r0, r0, #6
   12108:	stm	sp, {r1, r9}
   1210c:	mov	r1, r8
   12110:	clz	r0, r0
   12114:	lsr	r5, r0, #5
   12118:	mov	r0, r4
   1211c:	mov	r2, r5
   12120:	bl	128ec <__assert_fail@plt+0x1404>
   12124:	mov	r6, r0
   12128:	cmp	r0, #2
   1212c:	bne	12148 <__assert_fail@plt+0xc60>
   12130:	mov	r0, r4
   12134:	mov	r1, r8
   12138:	mov	r2, sl
   1213c:	mov	r3, r5
   12140:	bl	12e14 <__assert_fail@plt+0x192c>
   12144:	mov	r6, r0
   12148:	sub	r0, r6, #2
   1214c:	cmp	r0, #2
   12150:	bcs	12088 <__assert_fail@plt+0xba0>
   12154:	cmp	r7, #2
   12158:	bne	12094 <__assert_fail@plt+0xbac>
   1215c:	cmp	r6, #3
   12160:	mov	r6, #3
   12164:	moveq	r7, r6
   12168:	b	12094 <__assert_fail@plt+0xbac>
   1216c:	ldrb	r0, [sl, #9]
   12170:	cmp	r0, #0
   12174:	beq	12314 <__assert_fail@plt+0xe2c>
   12178:	ldr	r0, [r8, #48]	; 0x30
   1217c:	cmp	r0, #0
   12180:	beq	12348 <__assert_fail@plt+0xe60>
   12184:	mov	r0, #2
   12188:	mov	r1, r8
   1218c:	mov	r2, #1
   12190:	mov	r3, sl
   12194:	str	r0, [sp]
   12198:	add	r0, sp, #16
   1219c:	str	r0, [sp, #4]
   121a0:	mov	r0, r4
   121a4:	bl	128ec <__assert_fail@plt+0x1404>
   121a8:	cmp	r0, #2
   121ac:	mov	r9, r0
   121b0:	ldreq	r0, [sp, #16]
   121b4:	cmpeq	r0, #4
   121b8:	beq	124b4 <__assert_fail@plt+0xfcc>
   121bc:	mov	r6, #2
   121c0:	cmp	r9, #2
   121c4:	beq	1253c <__assert_fail@plt+0x1054>
   121c8:	b	124ec <__assert_fail@plt+0x1004>
   121cc:	movw	r1, #46838	; 0xb6f6
   121d0:	ldr	r5, [r8, #32]
   121d4:	mov	r0, #0
   121d8:	mov	r2, #5
   121dc:	movt	r1, #1
   121e0:	bl	1126c <dcgettext@plt>
   121e4:	ldr	r2, [r8, #28]
   121e8:	mov	r6, r0
   121ec:	mov	r0, #0
   121f0:	mov	r1, #3
   121f4:	bl	18d40 <__assert_fail@plt+0x7858>
   121f8:	mov	r3, r0
   121fc:	mov	r0, #0
   12200:	mov	r1, r5
   12204:	mov	r2, r6
   12208:	b	12244 <__assert_fail@plt+0xd5c>
   1220c:	movw	r1, #46652	; 0xb63c
   12210:	mov	r0, #0
   12214:	mov	r2, #5
   12218:	movt	r1, #1
   1221c:	bl	1126c <dcgettext@plt>
   12220:	ldr	r2, [r8, #28]
   12224:	mov	r5, r0
   12228:	mov	r0, #0
   1222c:	mov	r1, #3
   12230:	bl	18d40 <__assert_fail@plt+0x7858>
   12234:	mov	r3, r0
   12238:	mov	r0, #0
   1223c:	mov	r1, #0
   12240:	mov	r2, r5
   12244:	bl	112fc <error@plt>
   12248:	mov	r6, #4
   1224c:	mov	r0, r4
   12250:	mov	r1, r8
   12254:	mov	r2, #4
   12258:	bl	15b34 <__assert_fail@plt+0x464c>
   1225c:	mov	r0, r4
   12260:	bl	144b0 <__assert_fail@plt+0x2fc8>
   12264:	b	12090 <__assert_fail@plt+0xba8>
   12268:	ldrb	r1, [sl, #8]
   1226c:	cmp	r1, #0
   12270:	beq	120f8 <__assert_fail@plt+0xc10>
   12274:	ldr	r1, [r8, #48]	; 0x30
   12278:	cmp	r1, #1
   1227c:	blt	120f8 <__assert_fail@plt+0xc10>
   12280:	ldr	r1, [sp, #12]
   12284:	ldr	r6, [r5]
   12288:	ldrd	r2, [r1]
   1228c:	ldr	r1, [r5, #4]
   12290:	eor	r1, r1, r3
   12294:	eor	r2, r6, r2
   12298:	orrs	r1, r2, r1
   1229c:	beq	120f8 <__assert_fail@plt+0xc10>
   122a0:	ldr	r0, [r8, #4]
   122a4:	mov	r2, #1
   122a8:	ldr	r1, [r0, #48]	; 0x30
   122ac:	cmp	r1, #0
   122b0:	bmi	122d4 <__assert_fail@plt+0xdec>
   122b4:	ldr	r1, [r0, #16]
   122b8:	cmp	r1, #0
   122bc:	bne	122d4 <__assert_fail@plt+0xdec>
   122c0:	str	r2, [r0, #16]
   122c4:	ldr	r0, [r0, #4]
   122c8:	ldr	r1, [r0, #48]	; 0x30
   122cc:	cmn	r1, #1
   122d0:	bgt	122b4 <__assert_fail@plt+0xdcc>
   122d4:	movw	r1, #46569	; 0xb5e9
   122d8:	mov	r0, #0
   122dc:	mov	r2, #5
   122e0:	movt	r1, #1
   122e4:	bl	1126c <dcgettext@plt>
   122e8:	ldr	r1, [r8, #28]
   122ec:	mov	r5, r0
   122f0:	mov	r0, #4
   122f4:	mov	r6, #4
   122f8:	bl	18ac4 <__assert_fail@plt+0x75dc>
   122fc:	mov	r3, r0
   12300:	mov	r0, #0
   12304:	mov	r1, #0
   12308:	mov	r2, r5
   1230c:	bl	112fc <error@plt>
   12310:	b	12090 <__assert_fail@plt+0xba8>
   12314:	ldrb	r0, [sl, #10]
   12318:	cmp	r0, #0
   1231c:	beq	125e0 <__assert_fail@plt+0x10f8>
   12320:	ldr	r1, [r8, #24]
   12324:	ldr	r0, [r4, #32]
   12328:	bl	12824 <__assert_fail@plt+0x133c>
   1232c:	cmp	r0, #0
   12330:	bne	12178 <__assert_fail@plt+0xc90>
   12334:	ldrb	r0, [sl, #10]
   12338:	mov	r6, #39	; 0x27
   1233c:	cmp	r0, #0
   12340:	movweq	r6, #21
   12344:	b	125e4 <__assert_fail@plt+0x10fc>
   12348:	ldr	r6, [r8, #24]
   1234c:	mov	r0, r6
   12350:	bl	13574 <__assert_fail@plt+0x208c>
   12354:	ldrb	r1, [r0]
   12358:	cmp	r1, #46	; 0x2e
   1235c:	bne	12400 <__assert_fail@plt+0xf18>
   12360:	ldrb	r1, [r0, #1]
   12364:	cmp	r1, #46	; 0x2e
   12368:	mov	r1, #1
   1236c:	movweq	r1, #2
   12370:	ldrb	r0, [r0, r1]
   12374:	cmp	r0, #47	; 0x2f
   12378:	cmpne	r0, #0
   1237c:	bne	12400 <__assert_fail@plt+0xf18>
   12380:	movw	r1, #46332	; 0xb4fc
   12384:	mov	r0, #0
   12388:	mov	r2, #5
   1238c:	movt	r1, #1
   12390:	bl	1126c <dcgettext@plt>
   12394:	movw	r2, #46384	; 0xb530
   12398:	mov	r9, r0
   1239c:	mov	r0, #0
   123a0:	mov	r1, #4
   123a4:	mov	r6, #4
   123a8:	movt	r2, #1
   123ac:	bl	18a1c <__assert_fail@plt+0x7534>
   123b0:	movw	r2, #46383	; 0xb52f
   123b4:	mov	r7, r0
   123b8:	mov	r0, #1
   123bc:	mov	r1, #4
   123c0:	movt	r2, #1
   123c4:	bl	18a1c <__assert_fail@plt+0x7534>
   123c8:	ldr	r2, [r8, #28]
   123cc:	mov	r5, r0
   123d0:	mov	r0, #2
   123d4:	mov	r1, #4
   123d8:	bl	18a1c <__assert_fail@plt+0x7534>
   123dc:	str	r0, [sp, #4]
   123e0:	mov	r2, r9
   123e4:	mov	r0, #0
   123e8:	mov	r1, #0
   123ec:	mov	r3, r7
   123f0:	str	r5, [sp]
   123f4:	mov	r9, #0
   123f8:	bl	112fc <error@plt>
   123fc:	b	1224c <__assert_fail@plt+0xd64>
   12400:	ldr	r0, [sl, #12]
   12404:	cmp	r0, #0
   12408:	beq	12544 <__assert_fail@plt+0x105c>
   1240c:	add	r1, r8, #160	; 0xa0
   12410:	ldrd	r2, [r0]
   12414:	ldm	r1, {r1, r9}
   12418:	eor	r3, r9, r3
   1241c:	mov	r9, #0
   12420:	eor	r1, r1, r2
   12424:	orrs	r1, r1, r3
   12428:	bne	12544 <__assert_fail@plt+0x105c>
   1242c:	ldrd	r0, [r0, #8]
   12430:	ldrd	r2, [r5]
   12434:	eor	r1, r3, r1
   12438:	eor	r0, r2, r0
   1243c:	orrs	r0, r0, r1
   12440:	bne	12544 <__assert_fail@plt+0x105c>
   12444:	movw	r7, #48513	; 0xbd81
   12448:	ldr	r0, [r8, #28]
   1244c:	movt	r7, #1
   12450:	mov	r1, r7
   12454:	bl	11200 <strcmp@plt>
   12458:	cmp	r0, #0
   1245c:	beq	126c4 <__assert_fail@plt+0x11dc>
   12460:	movw	r1, #46431	; 0xb55f
   12464:	mov	r0, #0
   12468:	mov	r2, #5
   1246c:	movt	r1, #1
   12470:	bl	1126c <dcgettext@plt>
   12474:	ldr	r2, [r8, #28]
   12478:	mov	r5, r0
   1247c:	mov	r0, #0
   12480:	mov	r1, #4
   12484:	bl	18a1c <__assert_fail@plt+0x7534>
   12488:	mov	r6, r0
   1248c:	mov	r0, #1
   12490:	mov	r1, #4
   12494:	mov	r2, r7
   12498:	bl	18a1c <__assert_fail@plt+0x7534>
   1249c:	str	r0, [sp]
   124a0:	mov	r0, #0
   124a4:	mov	r1, #0
   124a8:	mov	r2, r5
   124ac:	mov	r3, r6
   124b0:	b	126f8 <__assert_fail@plt+0x1210>
   124b4:	mov	r0, r4
   124b8:	mov	r1, r8
   124bc:	mov	r2, sl
   124c0:	mov	r3, #1
   124c4:	bl	12e14 <__assert_fail@plt+0x192c>
   124c8:	mov	r9, r0
   124cc:	cmp	r0, #2
   124d0:	bne	124ec <__assert_fail@plt+0x1004>
   124d4:	mov	r0, r4
   124d8:	mov	r1, r8
   124dc:	mov	r2, #4
   124e0:	bl	15b34 <__assert_fail@plt+0x464c>
   124e4:	mov	r9, #2
   124e8:	b	12530 <__assert_fail@plt+0x1048>
   124ec:	ldr	r0, [r8, #4]
   124f0:	mov	r2, #1
   124f4:	ldr	r1, [r0, #48]	; 0x30
   124f8:	cmp	r1, #0
   124fc:	bmi	12520 <__assert_fail@plt+0x1038>
   12500:	ldr	r1, [r0, #16]
   12504:	cmp	r1, #0
   12508:	bne	12520 <__assert_fail@plt+0x1038>
   1250c:	str	r2, [r0, #16]
   12510:	ldr	r0, [r0, #4]
   12514:	ldr	r1, [r0, #48]	; 0x30
   12518:	cmn	r1, #1
   1251c:	bgt	12500 <__assert_fail@plt+0x1018>
   12520:	mov	r0, r4
   12524:	mov	r1, r8
   12528:	mov	r2, #4
   1252c:	bl	15b34 <__assert_fail@plt+0x464c>
   12530:	mov	r0, r4
   12534:	bl	144b0 <__assert_fail@plt+0x2fc8>
   12538:	mov	r6, r9
   1253c:	mov	r9, #0
   12540:	b	12148 <__assert_fail@plt+0xc60>
   12544:	ldrb	r0, [sl, #16]
   12548:	cmp	r0, #0
   1254c:	beq	12184 <__assert_fail@plt+0xc9c>
   12550:	movw	r1, #46383	; 0xb52f
   12554:	mov	r0, r6
   12558:	mov	r2, #0
   1255c:	movt	r1, #1
   12560:	bl	13940 <__assert_fail@plt+0x2458>
   12564:	mov	r6, r0
   12568:	mov	r0, #3
   1256c:	add	r2, sp, #16
   12570:	mov	r1, r6
   12574:	bl	114b8 <__lxstat64@plt>
   12578:	cmp	r0, #0
   1257c:	beq	12654 <__assert_fail@plt+0x116c>
   12580:	movw	r1, #46538	; 0xb5ca
   12584:	mov	r0, #0
   12588:	mov	r2, #5
   1258c:	movt	r1, #1
   12590:	bl	1126c <dcgettext@plt>
   12594:	mov	r5, r0
   12598:	mov	r0, #0
   1259c:	mov	r1, #4
   125a0:	mov	r2, r6
   125a4:	bl	18a1c <__assert_fail@plt+0x7534>
   125a8:	ldr	r2, [r8, #24]
   125ac:	mov	r7, r0
   125b0:	mov	r0, #1
   125b4:	mov	r1, #4
   125b8:	bl	18a1c <__assert_fail@plt+0x7534>
   125bc:	str	r0, [sp]
   125c0:	mov	r0, #0
   125c4:	mov	r1, #0
   125c8:	mov	r2, r5
   125cc:	mov	r3, r7
   125d0:	bl	112fc <error@plt>
   125d4:	mov	r0, r6
   125d8:	bl	13a78 <__assert_fail@plt+0x2590>
   125dc:	b	12248 <__assert_fail@plt+0xd60>
   125e0:	mov	r6, #21
   125e4:	movw	r1, #46315	; 0xb4eb
   125e8:	mov	r0, #0
   125ec:	mov	r2, #5
   125f0:	movt	r1, #1
   125f4:	bl	1126c <dcgettext@plt>
   125f8:	ldr	r1, [r8, #28]
   125fc:	mov	r5, r0
   12600:	mov	r0, #4
   12604:	bl	18ac4 <__assert_fail@plt+0x75dc>
   12608:	mov	r3, r0
   1260c:	mov	r0, #0
   12610:	mov	r1, r6
   12614:	mov	r2, r5
   12618:	bl	112fc <error@plt>
   1261c:	ldr	r0, [r8, #4]
   12620:	mov	r2, #1
   12624:	ldr	r1, [r0, #48]	; 0x30
   12628:	cmp	r1, #0
   1262c:	bmi	12248 <__assert_fail@plt+0xd60>
   12630:	ldr	r1, [r0, #16]
   12634:	cmp	r1, #0
   12638:	bne	12248 <__assert_fail@plt+0xd60>
   1263c:	str	r2, [r0, #16]
   12640:	ldr	r0, [r0, #4]
   12644:	ldr	r1, [r0, #48]	; 0x30
   12648:	cmn	r1, #1
   1264c:	bgt	12630 <__assert_fail@plt+0x1148>
   12650:	b	12248 <__assert_fail@plt+0xd60>
   12654:	mov	r0, r6
   12658:	bl	13a78 <__assert_fail@plt+0x2590>
   1265c:	ldr	r0, [sp, #12]
   12660:	ldr	r2, [sp, #16]
   12664:	ldr	r3, [sp, #20]
   12668:	ldrd	r0, [r0]
   1266c:	eor	r1, r1, r3
   12670:	eor	r0, r0, r2
   12674:	orrs	r0, r0, r1
   12678:	beq	12184 <__assert_fail@plt+0xc9c>
   1267c:	movw	r1, #46569	; 0xb5e9
   12680:	mov	r0, #0
   12684:	mov	r2, #5
   12688:	movt	r1, #1
   1268c:	bl	1126c <dcgettext@plt>
   12690:	ldr	r1, [r8, #28]
   12694:	mov	r5, r0
   12698:	mov	r0, #4
   1269c:	bl	18ac4 <__assert_fail@plt+0x75dc>
   126a0:	mov	r3, r0
   126a4:	mov	r0, #0
   126a8:	mov	r1, #0
   126ac:	mov	r2, r5
   126b0:	bl	112fc <error@plt>
   126b4:	movw	r1, #46615	; 0xb617
   126b8:	mov	r0, #0
   126bc:	movt	r1, #1
   126c0:	b	12708 <__assert_fail@plt+0x1220>
   126c4:	movw	r1, #46386	; 0xb532
   126c8:	mov	r0, #0
   126cc:	mov	r2, #5
   126d0:	movt	r1, #1
   126d4:	bl	1126c <dcgettext@plt>
   126d8:	ldr	r1, [r8, #28]
   126dc:	mov	r5, r0
   126e0:	mov	r0, #4
   126e4:	bl	18ac4 <__assert_fail@plt+0x75dc>
   126e8:	mov	r3, r0
   126ec:	mov	r0, #0
   126f0:	mov	r1, #0
   126f4:	mov	r2, r5
   126f8:	bl	112fc <error@plt>
   126fc:	movw	r1, #46489	; 0xb599
   12700:	mov	r0, #0
   12704:	movt	r1, #1
   12708:	mov	r2, #5
   1270c:	bl	1126c <dcgettext@plt>
   12710:	mov	r2, r0
   12714:	mov	r0, #0
   12718:	mov	r1, #0
   1271c:	bl	112fc <error@plt>
   12720:	b	12248 <__assert_fail@plt+0xd60>
   12724:	mov	r7, #2
   12728:	b	127a8 <__assert_fail@plt+0x12c0>
   1272c:	mov	r7, #2
   12730:	bl	1138c <__errno_location@plt>
   12734:	ldr	r6, [r0]
   12738:	mov	r5, r0
   1273c:	cmp	r6, #0
   12740:	beq	1276c <__assert_fail@plt+0x1284>
   12744:	movw	r1, #46192	; 0xb470
   12748:	mov	r0, #0
   1274c:	mov	r2, #5
   12750:	movt	r1, #1
   12754:	bl	1126c <dcgettext@plt>
   12758:	mov	r2, r0
   1275c:	mov	r0, #0
   12760:	mov	r1, r6
   12764:	bl	112fc <error@plt>
   12768:	mov	r7, #4
   1276c:	mov	r0, r4
   12770:	bl	14308 <__assert_fail@plt+0x2e20>
   12774:	cmp	r0, #0
   12778:	beq	127a8 <__assert_fail@plt+0x12c0>
   1277c:	movw	r1, #46298	; 0xb4da
   12780:	ldr	r4, [r5]
   12784:	mov	r0, #0
   12788:	mov	r2, #5
   1278c:	movt	r1, #1
   12790:	bl	1126c <dcgettext@plt>
   12794:	mov	r2, r0
   12798:	mov	r0, #0
   1279c:	mov	r1, r4
   127a0:	bl	112fc <error@plt>
   127a4:	mov	r7, #4
   127a8:	mov	r0, r7
   127ac:	sub	sp, fp, #28
   127b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127b4:	movw	r1, #46859	; 0xb70b
   127b8:	mov	r0, #0
   127bc:	mov	r2, #5
   127c0:	movt	r1, #1
   127c4:	bl	1126c <dcgettext@plt>
   127c8:	ldr	r2, [r8, #28]
   127cc:	ldrh	r5, [r8, #56]	; 0x38
   127d0:	mov	r4, r0
   127d4:	mov	r0, #0
   127d8:	mov	r1, #3
   127dc:	bl	18d40 <__assert_fail@plt+0x7858>
   127e0:	movw	r1, #46915	; 0xb743
   127e4:	mov	r2, r4
   127e8:	mov	r3, r5
   127ec:	movt	r1, #1
   127f0:	stm	sp, {r0, r1}
   127f4:	mov	r0, #0
   127f8:	mov	r1, #0
   127fc:	bl	112fc <error@plt>
   12800:	bl	114a0 <abort@plt>
   12804:	movw	r0, #46208	; 0xb480
   12808:	movw	r1, #46225	; 0xb491
   1280c:	movw	r3, #46238	; 0xb49e
   12810:	movw	r2, #610	; 0x262
   12814:	movt	r0, #1
   12818:	movt	r1, #1
   1281c:	movt	r3, #1
   12820:	bl	114e8 <__assert_fail@plt>
   12824:	push	{r4, r5, r6, r7, fp, lr}
   12828:	add	fp, sp, #16
   1282c:	mov	r2, #51456	; 0xc900
   12830:	bl	11380 <openat64@plt>
   12834:	cmp	r0, #0
   12838:	bmi	128e4 <__assert_fail@plt+0x13fc>
   1283c:	mov	r5, r0
   12840:	bl	11440 <fdopendir@plt>
   12844:	cmp	r0, #0
   12848:	beq	128dc <__assert_fail@plt+0x13f4>
   1284c:	mov	r4, r0
   12850:	bl	1138c <__errno_location@plt>
   12854:	mov	r5, r0
   12858:	mov	r0, #0
   1285c:	str	r0, [r5]
   12860:	mov	r0, r4
   12864:	bl	11434 <readdir64@plt>
   12868:	cmp	r0, #0
   1286c:	beq	128b8 <__assert_fail@plt+0x13d0>
   12870:	mov	r6, r0
   12874:	ldrb	r0, [r6, #19]
   12878:	cmp	r0, #46	; 0x2e
   1287c:	bne	128bc <__assert_fail@plt+0x13d4>
   12880:	ldrb	r0, [r6, #20]
   12884:	cmp	r0, #46	; 0x2e
   12888:	mov	r0, #1
   1288c:	movweq	r0, #2
   12890:	add	r0, r6, r0
   12894:	ldrb	r0, [r0, #19]
   12898:	cmp	r0, #47	; 0x2f
   1289c:	cmpne	r0, #0
   128a0:	bne	128bc <__assert_fail@plt+0x13d4>
   128a4:	mov	r0, r4
   128a8:	bl	11434 <readdir64@plt>
   128ac:	mov	r6, r0
   128b0:	cmp	r0, #0
   128b4:	bne	12874 <__assert_fail@plt+0x138c>
   128b8:	mov	r6, #0
   128bc:	ldr	r7, [r5]
   128c0:	mov	r0, r4
   128c4:	bl	114d0 <closedir@plt>
   128c8:	orr	r0, r6, r7
   128cc:	str	r7, [r5]
   128d0:	clz	r0, r0
   128d4:	lsr	r0, r0, #5
   128d8:	pop	{r4, r5, r6, r7, fp, pc}
   128dc:	mov	r0, r5
   128e0:	bl	114ac <close@plt>
   128e4:	mov	r0, #0
   128e8:	pop	{r4, r5, r6, r7, fp, pc}
   128ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f0:	add	fp, sp, #28
   128f4:	sub	sp, sp, #132	; 0x84
   128f8:	ldr	r7, [fp, #12]
   128fc:	mov	r5, r2
   12900:	mov	r4, r1
   12904:	ldr	r2, [r1, #28]
   12908:	ldr	r1, [r1, #24]
   1290c:	ldr	r0, [r0, #32]
   12910:	add	r8, sp, #24
   12914:	mvn	r6, #0
   12918:	add	sl, r8, #48	; 0x30
   1291c:	cmp	r7, #0
   12920:	str	r2, [sp, #20]
   12924:	str	r1, [sp, #12]
   12928:	str	r0, [sp, #16]
   1292c:	beq	12970 <__assert_fail@plt+0x1488>
   12930:	mov	r2, #2
   12934:	str	r2, [r7]
   12938:	str	r6, [sl]
   1293c:	str	r6, [sl, #4]
   12940:	mov	r6, r3
   12944:	bl	12824 <__assert_fail@plt+0x133c>
   12948:	mov	r3, r6
   1294c:	mov	r6, r0
   12950:	mov	r0, #3
   12954:	mov	r9, r5
   12958:	cmp	r6, #0
   1295c:	movwne	r0, #4
   12960:	cmp	r5, #0
   12964:	movwne	r9, #4
   12968:	str	r0, [r7]
   1296c:	b	12988 <__assert_fail@plt+0x14a0>
   12970:	cmp	r5, #0
   12974:	mov	r9, r5
   12978:	str	r6, [sl]
   1297c:	str	r6, [sl, #4]
   12980:	mov	r6, #0
   12984:	movwne	r9, #4
   12988:	ldr	r0, [r4, #16]
   1298c:	mov	r4, #3
   12990:	cmp	r0, #0
   12994:	bne	12a74 <__assert_fail@plt+0x158c>
   12998:	ldr	r1, [r3, #4]
   1299c:	cmp	r1, #5
   129a0:	beq	12a70 <__assert_fail@plt+0x1588>
   129a4:	ldrb	r0, [r3]
   129a8:	add	r8, r8, #96	; 0x60
   129ac:	mov	ip, #0
   129b0:	cmp	r0, #0
   129b4:	beq	129c8 <__assert_fail@plt+0x14e0>
   129b8:	mov	r7, #0
   129bc:	cmp	r1, #3
   129c0:	beq	12a0c <__assert_fail@plt+0x1524>
   129c4:	b	12a70 <__assert_fail@plt+0x1588>
   129c8:	cmp	r1, #3
   129cc:	beq	129e0 <__assert_fail@plt+0x14f8>
   129d0:	ldrb	r0, [r3, #17]
   129d4:	mov	r7, #0
   129d8:	cmp	r0, #0
   129dc:	beq	12a04 <__assert_fail@plt+0x151c>
   129e0:	str	r3, [sp, #8]
   129e4:	bl	19818 <__assert_fail@plt+0x8330>
   129e8:	cmp	r0, #0
   129ec:	beq	12a80 <__assert_fail@plt+0x1598>
   129f0:	bl	1138c <__errno_location@plt>
   129f4:	ldr	r3, [sp, #8]
   129f8:	ldr	r7, [r0]
   129fc:	mov	ip, #0
   12a00:	ldr	r1, [r3, #4]
   12a04:	cmp	r1, #3
   12a08:	bne	12a70 <__assert_fail@plt+0x1588>
   12a0c:	cmp	ip, #0
   12a10:	bmi	12bd8 <__assert_fail@plt+0x16f0>
   12a14:	cmp	r5, #0
   12a18:	bne	12bd8 <__assert_fail@plt+0x16f0>
   12a1c:	ldm	sl, {r0, r7}
   12a20:	mvn	r5, #0
   12a24:	eor	r2, r7, r5
   12a28:	eor	r1, r0, r5
   12a2c:	orrs	r2, r1, r2
   12a30:	ldr	r1, [sp, #16]
   12a34:	beq	12af8 <__assert_fail@plt+0x1610>
   12a38:	subs	r0, r5, r0
   12a3c:	sbcs	r0, r5, r7
   12a40:	bge	12b48 <__assert_fail@plt+0x1660>
   12a44:	ldr	r0, [sp, #40]	; 0x28
   12a48:	and	r0, r0, #61440	; 0xf000
   12a4c:	cmp	r0, #16384	; 0x4000
   12a50:	beq	12be8 <__assert_fail@plt+0x1700>
   12a54:	mov	r9, #0
   12a58:	cmp	r0, #40960	; 0xa000
   12a5c:	bne	12c10 <__assert_fail@plt+0x1728>
   12a60:	ldr	r0, [r3, #4]
   12a64:	mov	r9, #10
   12a68:	cmp	r0, #3
   12a6c:	beq	12c10 <__assert_fail@plt+0x1728>
   12a70:	mov	r4, #2
   12a74:	mov	r0, r4
   12a78:	sub	sp, fp, #28
   12a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a80:	ldrd	r0, [sl]
   12a84:	mvn	r7, #0
   12a88:	eor	r2, r1, r7
   12a8c:	eor	r3, r0, r7
   12a90:	orrs	r2, r3, r2
   12a94:	beq	12b58 <__assert_fail@plt+0x1670>
   12a98:	subs	r0, r7, r0
   12a9c:	sbcs	r0, r7, r1
   12aa0:	bge	12bac <__assert_fail@plt+0x16c4>
   12aa4:	ldr	r0, [sp, #40]	; 0x28
   12aa8:	and	r0, r0, #61440	; 0xf000
   12aac:	cmp	r0, #40960	; 0xa000
   12ab0:	beq	129f0 <__assert_fail@plt+0x1508>
   12ab4:	ldr	r0, [sp, #16]
   12ab8:	ldr	r1, [sp, #12]
   12abc:	mov	r2, #2
   12ac0:	mov	r3, #512	; 0x200
   12ac4:	bl	1123c <faccessat@plt>
   12ac8:	cmp	r0, #0
   12acc:	beq	129f0 <__assert_fail@plt+0x1508>
   12ad0:	bl	1138c <__errno_location@plt>
   12ad4:	ldr	r1, [r0]
   12ad8:	ldr	r7, [r0]
   12adc:	ldr	r3, [sp, #8]
   12ae0:	mvn	ip, #0
   12ae4:	cmp	r1, #13
   12ae8:	movweq	ip, #1
   12aec:	cmp	ip, #0
   12af0:	bpl	12a14 <__assert_fail@plt+0x152c>
   12af4:	b	12bd8 <__assert_fail@plt+0x16f0>
   12af8:	ldr	r2, [sp, #12]
   12afc:	mov	r0, #256	; 0x100
   12b00:	mov	r9, r3
   12b04:	add	r3, sp, #24
   12b08:	str	ip, [sp, #8]
   12b0c:	str	r0, [sp]
   12b10:	mov	r0, #3
   12b14:	bl	1129c <__fxstatat64@plt>
   12b18:	cmp	r0, #0
   12b1c:	beq	12db4 <__assert_fail@plt+0x18cc>
   12b20:	subs	r0, r5, #1
   12b24:	sbc	r1, r5, #0
   12b28:	strd	r0, [sl]
   12b2c:	bl	1138c <__errno_location@plt>
   12b30:	ldr	r7, [r0]
   12b34:	asr	r1, r7, #31
   12b38:	str	r7, [r8]
   12b3c:	str	r1, [r8, #4]
   12b40:	str	r7, [r0]
   12b44:	b	12cc8 <__assert_fail@plt+0x17e0>
   12b48:	ldr	r7, [r8]
   12b4c:	bl	1138c <__errno_location@plt>
   12b50:	str	r7, [r0]
   12b54:	b	12cc8 <__assert_fail@plt+0x17e0>
   12b58:	ldr	r1, [sp, #16]
   12b5c:	ldr	r2, [sp, #12]
   12b60:	mov	r0, #256	; 0x100
   12b64:	add	r3, sp, #24
   12b68:	str	r0, [sp]
   12b6c:	mov	r0, #3
   12b70:	bl	1129c <__fxstatat64@plt>
   12b74:	cmp	r0, #0
   12b78:	beq	12e00 <__assert_fail@plt+0x1918>
   12b7c:	mvn	r1, #0
   12b80:	subs	r0, r1, #1
   12b84:	sbc	r1, r1, #0
   12b88:	strd	r0, [sl]
   12b8c:	bl	1138c <__errno_location@plt>
   12b90:	mov	r2, r8
   12b94:	ldr	r8, [r0]
   12b98:	mov	r7, r2
   12b9c:	asr	r1, r8, #31
   12ba0:	str	r8, [r2]
   12ba4:	str	r1, [r2, #4]
   12ba8:	b	12bb8 <__assert_fail@plt+0x16d0>
   12bac:	mov	r7, r8
   12bb0:	ldr	r8, [r8]
   12bb4:	bl	1138c <__errno_location@plt>
   12bb8:	str	r8, [r0]
   12bbc:	ldr	r3, [sp, #8]
   12bc0:	mvn	ip, #0
   12bc4:	mov	r8, r7
   12bc8:	ldr	r0, [r0]
   12bcc:	mov	r7, r0
   12bd0:	cmp	ip, #0
   12bd4:	bpl	12a14 <__assert_fail@plt+0x152c>
   12bd8:	cmp	ip, #0
   12bdc:	bmi	12cc8 <__assert_fail@plt+0x17e0>
   12be0:	cmp	r5, #0
   12be4:	beq	12c10 <__assert_fail@plt+0x1728>
   12be8:	ldrb	r0, [r3, #9]
   12bec:	mov	r9, #4
   12bf0:	cmp	r0, #0
   12bf4:	bne	12c10 <__assert_fail@plt+0x1728>
   12bf8:	ldrb	r0, [r3, #10]
   12bfc:	mov	r7, #21
   12c00:	cmp	r0, #0
   12c04:	beq	12cc8 <__assert_fail@plt+0x17e0>
   12c08:	eors	r0, r6, #1
   12c0c:	bne	12cc8 <__assert_fail@plt+0x17e0>
   12c10:	ldr	r1, [sp, #20]
   12c14:	ldr	r7, [fp, #8]
   12c18:	mov	r0, #4
   12c1c:	mov	r5, ip
   12c20:	bl	18ac4 <__assert_fail@plt+0x75dc>
   12c24:	mov	r3, r0
   12c28:	eor	r0, r9, #4
   12c2c:	eor	r1, r7, #2
   12c30:	orrs	r0, r1, r0
   12c34:	movwne	r0, #1
   12c38:	orrs	r0, r6, r0
   12c3c:	beq	12d08 <__assert_fail@plt+0x1820>
   12c40:	ldrd	r0, [sl]
   12c44:	mvn	r7, #0
   12c48:	mov	r9, r3
   12c4c:	eor	r2, r1, r7
   12c50:	eor	r3, r0, r7
   12c54:	orrs	r2, r3, r2
   12c58:	beq	12d6c <__assert_fail@plt+0x1884>
   12c5c:	subs	r0, r7, r0
   12c60:	sbcs	r0, r7, r1
   12c64:	bge	12dc4 <__assert_fail@plt+0x18dc>
   12c68:	movw	r0, #47052	; 0xb7cc
   12c6c:	movw	r1, #47017	; 0xb7a9
   12c70:	cmp	r5, #0
   12c74:	mov	r2, #5
   12c78:	movt	r0, #1
   12c7c:	movt	r1, #1
   12c80:	moveq	r1, r0
   12c84:	movw	r0, #49544	; 0xc188
   12c88:	movt	r0, #2
   12c8c:	ldr	r8, [r0]
   12c90:	mov	r0, #0
   12c94:	bl	1126c <dcgettext@plt>
   12c98:	mov	r7, r0
   12c9c:	movw	r0, #49596	; 0xc1bc
   12ca0:	movt	r0, #2
   12ca4:	ldr	r6, [r0]
   12ca8:	add	r0, sp, #24
   12cac:	bl	13878 <__assert_fail@plt+0x2390>
   12cb0:	stm	sp, {r0, r9}
   12cb4:	mov	r0, r8
   12cb8:	mov	r1, #1
   12cbc:	mov	r2, r7
   12cc0:	mov	r3, r6
   12cc4:	b	12d58 <__assert_fail@plt+0x1870>
   12cc8:	ldr	r1, [sp, #20]
   12ccc:	mov	r0, #4
   12cd0:	mov	r4, #4
   12cd4:	bl	18ac4 <__assert_fail@plt+0x75dc>
   12cd8:	movw	r1, #46315	; 0xb4eb
   12cdc:	mov	r5, r0
   12ce0:	mov	r0, #0
   12ce4:	mov	r2, #5
   12ce8:	movt	r1, #1
   12cec:	bl	1126c <dcgettext@plt>
   12cf0:	mov	r2, r0
   12cf4:	mov	r0, #0
   12cf8:	mov	r1, r7
   12cfc:	mov	r3, r5
   12d00:	bl	112fc <error@plt>
   12d04:	b	12a74 <__assert_fail@plt+0x158c>
   12d08:	movw	r0, #46985	; 0xb789
   12d0c:	movw	r1, #46937	; 0xb759
   12d10:	cmp	r5, #0
   12d14:	mov	r2, #5
   12d18:	mov	r5, r3
   12d1c:	movt	r0, #1
   12d20:	movt	r1, #1
   12d24:	moveq	r1, r0
   12d28:	movw	r0, #49544	; 0xc188
   12d2c:	movt	r0, #2
   12d30:	ldr	r6, [r0]
   12d34:	mov	r0, #0
   12d38:	bl	1126c <dcgettext@plt>
   12d3c:	mov	r2, r0
   12d40:	movw	r0, #49596	; 0xc1bc
   12d44:	str	r5, [sp]
   12d48:	mov	r1, #1
   12d4c:	movt	r0, #2
   12d50:	ldr	r3, [r0]
   12d54:	mov	r0, r6
   12d58:	bl	113c8 <__fprintf_chk@plt>
   12d5c:	bl	19ee4 <__assert_fail@plt+0x89fc>
   12d60:	cmp	r0, #0
   12d64:	movne	r4, #2
   12d68:	b	12a74 <__assert_fail@plt+0x158c>
   12d6c:	ldr	r1, [sp, #16]
   12d70:	ldr	r2, [sp, #12]
   12d74:	mov	r0, #256	; 0x100
   12d78:	add	r3, sp, #24
   12d7c:	str	r0, [sp]
   12d80:	mov	r0, #3
   12d84:	bl	1129c <__fxstatat64@plt>
   12d88:	cmp	r0, #0
   12d8c:	beq	12e0c <__assert_fail@plt+0x1924>
   12d90:	subs	r0, r7, #1
   12d94:	sbc	r1, r7, #0
   12d98:	strd	r0, [sl]
   12d9c:	bl	1138c <__errno_location@plt>
   12da0:	ldr	r4, [r0]
   12da4:	asr	r1, r4, #31
   12da8:	str	r4, [r8]
   12dac:	str	r1, [r8, #4]
   12db0:	b	12dcc <__assert_fail@plt+0x18e4>
   12db4:	ldr	ip, [sp, #8]
   12db8:	ldm	sl, {r0, r7}
   12dbc:	mov	r3, r9
   12dc0:	b	12a38 <__assert_fail@plt+0x1550>
   12dc4:	ldr	r4, [r8]
   12dc8:	bl	1138c <__errno_location@plt>
   12dcc:	movw	r1, #46315	; 0xb4eb
   12dd0:	str	r4, [r0]
   12dd4:	mov	r0, #0
   12dd8:	mov	r2, #5
   12ddc:	movt	r1, #1
   12de0:	bl	1126c <dcgettext@plt>
   12de4:	mov	r2, r0
   12de8:	mov	r0, #0
   12dec:	mov	r1, r4
   12df0:	mov	r3, r9
   12df4:	bl	112fc <error@plt>
   12df8:	mov	r4, #4
   12dfc:	b	12a74 <__assert_fail@plt+0x158c>
   12e00:	ldrd	r0, [sl]
   12e04:	mvn	r7, #0
   12e08:	b	12a98 <__assert_fail@plt+0x15b0>
   12e0c:	ldrd	r0, [sl]
   12e10:	b	12c5c <__assert_fail@plt+0x1774>
   12e14:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12e18:	add	fp, sp, #24
   12e1c:	sub	sp, sp, #112	; 0x70
   12e20:	mov	r4, r1
   12e24:	mov	r7, r0
   12e28:	ldr	r1, [r1, #24]
   12e2c:	ldr	r0, [r0, #32]
   12e30:	cmp	r3, #0
   12e34:	mov	r5, r2
   12e38:	mov	r2, r3
   12e3c:	mov	r6, r3
   12e40:	movwne	r2, #512	; 0x200
   12e44:	bl	11218 <unlinkat@plt>
   12e48:	cmp	r0, #0
   12e4c:	beq	12f8c <__assert_fail@plt+0x1aa4>
   12e50:	bl	1138c <__errno_location@plt>
   12e54:	ldr	r6, [r0]
   12e58:	mov	r8, r0
   12e5c:	cmp	r6, #30
   12e60:	bne	12ea0 <__assert_fail@plt+0x19b8>
   12e64:	ldr	r2, [r4, #24]
   12e68:	ldr	r1, [r7, #32]
   12e6c:	mov	r0, #256	; 0x100
   12e70:	add	r3, sp, #8
   12e74:	str	r0, [sp]
   12e78:	mov	r0, #3
   12e7c:	bl	1129c <__fxstatat64@plt>
   12e80:	cmp	r0, #0
   12e84:	beq	12e94 <__assert_fail@plt+0x19ac>
   12e88:	ldr	r0, [r8]
   12e8c:	cmp	r0, #2
   12e90:	beq	12e9c <__assert_fail@plt+0x19b4>
   12e94:	mov	r0, #30
   12e98:	str	r0, [r8]
   12e9c:	ldr	r6, [r8]
   12ea0:	ldrb	r0, [r5]
   12ea4:	cmp	r0, #0
   12ea8:	beq	12ed4 <__assert_fail@plt+0x19ec>
   12eac:	mov	r5, #2
   12eb0:	cmp	r6, #22
   12eb4:	bhi	12ecc <__assert_fail@plt+0x19e4>
   12eb8:	movw	r1, #4
   12ebc:	mov	r0, #1
   12ec0:	movt	r1, #80	; 0x50
   12ec4:	tst	r1, r0, lsl r6
   12ec8:	bne	12fe0 <__assert_fail@plt+0x1af8>
   12ecc:	cmp	r6, #84	; 0x54
   12ed0:	beq	12fe0 <__assert_fail@plt+0x1af8>
   12ed4:	ldrh	r0, [r4, #56]	; 0x38
   12ed8:	cmp	r0, #4
   12edc:	bne	12f18 <__assert_fail@plt+0x1a30>
   12ee0:	sub	r0, r6, #17
   12ee4:	cmp	r0, #22
   12ee8:	bhi	12f18 <__assert_fail@plt+0x1a30>
   12eec:	movw	r2, #25
   12ef0:	mov	r1, #1
   12ef4:	movt	r2, #64	; 0x40
   12ef8:	tst	r2, r1, lsl r0
   12efc:	beq	12f18 <__assert_fail@plt+0x1a30>
   12f00:	ldr	r0, [r4, #32]
   12f04:	cmp	r0, #13
   12f08:	cmpne	r0, #1
   12f0c:	bne	12f18 <__assert_fail@plt+0x1a30>
   12f10:	mov	r6, r0
   12f14:	str	r0, [r8]
   12f18:	movw	r1, #46315	; 0xb4eb
   12f1c:	mov	r0, #0
   12f20:	mov	r2, #5
   12f24:	movt	r1, #1
   12f28:	bl	1126c <dcgettext@plt>
   12f2c:	ldr	r1, [r4, #28]
   12f30:	mov	r7, r0
   12f34:	mov	r0, #4
   12f38:	mov	r5, #4
   12f3c:	bl	18ac4 <__assert_fail@plt+0x75dc>
   12f40:	mov	r3, r0
   12f44:	mov	r0, #0
   12f48:	mov	r1, r6
   12f4c:	mov	r2, r7
   12f50:	bl	112fc <error@plt>
   12f54:	ldr	r0, [r4, #4]
   12f58:	ldr	r1, [r0, #48]	; 0x30
   12f5c:	cmp	r1, #0
   12f60:	bmi	12fe0 <__assert_fail@plt+0x1af8>
   12f64:	mov	r1, #1
   12f68:	ldr	r2, [r0, #16]
   12f6c:	cmp	r2, #0
   12f70:	bne	12fe0 <__assert_fail@plt+0x1af8>
   12f74:	str	r1, [r0, #16]
   12f78:	ldr	r0, [r0, #4]
   12f7c:	ldr	r2, [r0, #48]	; 0x30
   12f80:	cmn	r2, #1
   12f84:	bgt	12f68 <__assert_fail@plt+0x1a80>
   12f88:	b	12fe0 <__assert_fail@plt+0x1af8>
   12f8c:	ldrb	r0, [r5, #18]
   12f90:	mov	r5, #2
   12f94:	cmp	r0, #0
   12f98:	beq	12fe0 <__assert_fail@plt+0x1af8>
   12f9c:	movw	r0, #47071	; 0xb7df
   12fa0:	movw	r1, #47093	; 0xb7f5
   12fa4:	cmp	r6, #0
   12fa8:	mov	r2, #5
   12fac:	movt	r0, #1
   12fb0:	movt	r1, #1
   12fb4:	movne	r1, r0
   12fb8:	mov	r0, #0
   12fbc:	bl	1126c <dcgettext@plt>
   12fc0:	ldr	r1, [r4, #28]
   12fc4:	mov	r6, r0
   12fc8:	mov	r0, #4
   12fcc:	bl	18ac4 <__assert_fail@plt+0x75dc>
   12fd0:	mov	r2, r0
   12fd4:	mov	r0, #1
   12fd8:	mov	r1, r6
   12fdc:	bl	113b0 <__printf_chk@plt>
   12fe0:	mov	r0, r5
   12fe4:	sub	sp, fp, #24
   12fe8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12fec:	mov	r0, #1
   12ff0:	b	115e8 <__assert_fail@plt+0x100>
   12ff4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ff8:	add	fp, sp, #28
   12ffc:	sub	sp, sp, #12
   13000:	mov	r4, r3
   13004:	mov	r6, r2
   13008:	mov	r5, r1
   1300c:	mov	sl, r0
   13010:	bl	11374 <strlen@plt>
   13014:	ldr	r8, [r5]
   13018:	cmp	r8, #0
   1301c:	beq	130dc <__assert_fail@plt+0x1bf4>
   13020:	mov	r7, r0
   13024:	mov	r0, #0
   13028:	add	r9, r5, #4
   1302c:	mov	r5, #0
   13030:	str	r6, [sp, #4]
   13034:	str	r0, [sp]
   13038:	mvn	r0, #0
   1303c:	str	r0, [sp, #8]
   13040:	b	1305c <__assert_fail@plt+0x1b74>
   13044:	str	r5, [sp, #8]
   13048:	ldr	r8, [r9, r5, lsl #2]
   1304c:	add	r6, r6, r4
   13050:	add	r5, r5, #1
   13054:	cmp	r8, #0
   13058:	beq	130c4 <__assert_fail@plt+0x1bdc>
   1305c:	mov	r0, r8
   13060:	mov	r1, sl
   13064:	mov	r2, r7
   13068:	bl	11494 <strncmp@plt>
   1306c:	cmp	r0, #0
   13070:	bne	13048 <__assert_fail@plt+0x1b60>
   13074:	mov	r0, r8
   13078:	bl	11374 <strlen@plt>
   1307c:	cmp	r0, r7
   13080:	beq	130e0 <__assert_fail@plt+0x1bf8>
   13084:	ldr	r0, [sp, #8]
   13088:	cmn	r0, #1
   1308c:	beq	13044 <__assert_fail@plt+0x1b5c>
   13090:	ldr	r0, [sp, #4]
   13094:	cmp	r0, #0
   13098:	beq	130b8 <__assert_fail@plt+0x1bd0>
   1309c:	ldr	r1, [sp, #8]
   130a0:	mov	r2, r4
   130a4:	mla	r0, r1, r4, r0
   130a8:	mov	r1, r6
   130ac:	bl	11368 <bcmp@plt>
   130b0:	cmp	r0, #0
   130b4:	beq	13048 <__assert_fail@plt+0x1b60>
   130b8:	mov	r0, #1
   130bc:	str	r0, [sp]
   130c0:	b	13048 <__assert_fail@plt+0x1b60>
   130c4:	ldr	r0, [sp]
   130c8:	tst	r0, #1
   130cc:	ldr	r0, [sp, #8]
   130d0:	mvnne	r0, #1
   130d4:	sub	sp, fp, #28
   130d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130dc:	mvn	r5, #0
   130e0:	mov	r0, r5
   130e4:	sub	sp, fp, #28
   130e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130ec:	push	{r4, r5, r6, r7, fp, lr}
   130f0:	add	fp, sp, #16
   130f4:	mov	r5, r0
   130f8:	ldr	r0, [r1]
   130fc:	mvn	r4, #0
   13100:	cmp	r0, #0
   13104:	beq	13130 <__assert_fail@plt+0x1c48>
   13108:	add	r7, r1, #4
   1310c:	mov	r6, #0
   13110:	mov	r1, r5
   13114:	bl	11200 <strcmp@plt>
   13118:	cmp	r0, #0
   1311c:	beq	13138 <__assert_fail@plt+0x1c50>
   13120:	ldr	r0, [r7, r6, lsl #2]
   13124:	add	r6, r6, #1
   13128:	cmp	r0, #0
   1312c:	bne	13110 <__assert_fail@plt+0x1c28>
   13130:	mov	r0, r4
   13134:	pop	{r4, r5, r6, r7, fp, pc}
   13138:	mov	r0, r6
   1313c:	pop	{r4, r5, r6, r7, fp, pc}
   13140:	push	{r4, r5, r6, sl, fp, lr}
   13144:	add	fp, sp, #16
   13148:	sub	sp, sp, #8
   1314c:	mov	r5, r0
   13150:	movw	r0, #47120	; 0xb810
   13154:	mov	r4, r1
   13158:	movw	r1, #47147	; 0xb82b
   1315c:	cmn	r2, #1
   13160:	mov	r2, #5
   13164:	movt	r0, #1
   13168:	movt	r1, #1
   1316c:	moveq	r1, r0
   13170:	mov	r0, #0
   13174:	bl	1126c <dcgettext@plt>
   13178:	mov	r6, r0
   1317c:	mov	r0, #0
   13180:	mov	r1, #8
   13184:	mov	r2, r4
   13188:	bl	18a1c <__assert_fail@plt+0x7534>
   1318c:	mov	r4, r0
   13190:	mov	r0, #1
   13194:	mov	r1, r5
   13198:	bl	18fdc <__assert_fail@plt+0x7af4>
   1319c:	str	r0, [sp]
   131a0:	mov	r0, #0
   131a4:	mov	r1, #0
   131a8:	mov	r2, r6
   131ac:	mov	r3, r4
   131b0:	bl	112fc <error@plt>
   131b4:	sub	sp, fp, #16
   131b8:	pop	{r4, r5, r6, sl, fp, pc}
   131bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c0:	add	fp, sp, #28
   131c4:	sub	sp, sp, #4
   131c8:	mov	sl, r1
   131cc:	movw	r1, #47176	; 0xb848
   131d0:	mov	r4, r2
   131d4:	mov	r6, r0
   131d8:	mov	r0, #0
   131dc:	mov	r2, #5
   131e0:	mov	r8, #0
   131e4:	movt	r1, #1
   131e8:	bl	1126c <dcgettext@plt>
   131ec:	movw	r1, #49544	; 0xc188
   131f0:	movt	r1, #2
   131f4:	ldr	r1, [r1]
   131f8:	bl	111dc <fputs_unlocked@plt>
   131fc:	ldr	r7, [r6]
   13200:	cmp	r7, #0
   13204:	beq	132c0 <__assert_fail@plt+0x1dd8>
   13208:	add	r0, r6, #4
   1320c:	mov	r9, #0
   13210:	mov	r6, #0
   13214:	str	r0, [sp]
   13218:	cmp	r9, #0
   1321c:	bne	13274 <__assert_fail@plt+0x1d8c>
   13220:	mov	r5, #0
   13224:	movw	r0, #49544	; 0xc188
   13228:	movt	r0, #2
   1322c:	ldr	r6, [r0]
   13230:	mov	r0, r7
   13234:	bl	18fec <__assert_fail@plt+0x7b04>
   13238:	movw	r2, #47197	; 0xb85d
   1323c:	mov	r3, r0
   13240:	mov	r0, r6
   13244:	mov	r1, #1
   13248:	movt	r2, #1
   1324c:	bl	113c8 <__fprintf_chk@plt>
   13250:	add	r6, sl, r5
   13254:	ldr	r0, [sp]
   13258:	add	r8, r8, r4
   1325c:	ldr	r7, [r0, -r9, lsl #2]
   13260:	sub	r9, r9, #1
   13264:	cmp	r7, #0
   13268:	beq	132c0 <__assert_fail@plt+0x1dd8>
   1326c:	cmp	r9, #0
   13270:	beq	13220 <__assert_fail@plt+0x1d38>
   13274:	add	r1, sl, r8
   13278:	mov	r0, r6
   1327c:	mov	r2, r4
   13280:	bl	11368 <bcmp@plt>
   13284:	cmp	r0, #0
   13288:	mov	r5, r8
   1328c:	bne	13224 <__assert_fail@plt+0x1d3c>
   13290:	movw	r0, #49544	; 0xc188
   13294:	movt	r0, #2
   13298:	ldr	r5, [r0]
   1329c:	mov	r0, r7
   132a0:	bl	18fec <__assert_fail@plt+0x7b04>
   132a4:	movw	r2, #47205	; 0xb865
   132a8:	mov	r3, r0
   132ac:	mov	r0, r5
   132b0:	mov	r1, #1
   132b4:	movt	r2, #1
   132b8:	bl	113c8 <__fprintf_chk@plt>
   132bc:	b	13254 <__assert_fail@plt+0x1d6c>
   132c0:	movw	r0, #49544	; 0xc188
   132c4:	movt	r0, #2
   132c8:	ldr	r0, [r0]
   132cc:	ldr	r1, [r0, #20]
   132d0:	ldr	r2, [r0, #24]
   132d4:	cmp	r1, r2
   132d8:	addcc	r2, r1, #1
   132dc:	strcc	r2, [r0, #20]
   132e0:	movcc	r0, #10
   132e4:	strbcc	r0, [r1]
   132e8:	subcc	sp, fp, #28
   132ec:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f0:	mov	r1, #10
   132f4:	sub	sp, fp, #28
   132f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132fc:	b	11404 <__overflow@plt>
   13300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13304:	add	fp, sp, #28
   13308:	sub	sp, sp, #20
   1330c:	mov	r9, r0
   13310:	ldr	r0, [fp, #16]
   13314:	mov	r8, r3
   13318:	mov	sl, r2
   1331c:	mov	r7, r1
   13320:	cmp	r0, #0
   13324:	beq	133e4 <__assert_fail@plt+0x1efc>
   13328:	mov	r0, r7
   1332c:	str	r9, [sp, #8]
   13330:	str	r8, [sp, #16]
   13334:	bl	11374 <strlen@plt>
   13338:	ldr	r9, [sl]
   1333c:	cmp	r9, #0
   13340:	beq	13454 <__assert_fail@plt+0x1f6c>
   13344:	str	sl, [sp, #4]
   13348:	add	r8, sl, #4
   1334c:	ldr	sl, [sp, #16]
   13350:	mov	r4, r0
   13354:	mov	r0, #0
   13358:	mvn	r6, #0
   1335c:	mov	r5, #0
   13360:	str	r0, [sp, #12]
   13364:	b	13384 <__assert_fail@plt+0x1e9c>
   13368:	mov	r6, r5
   1336c:	ldr	r9, [r8, r5, lsl #2]
   13370:	ldr	r0, [fp, #8]
   13374:	add	r5, r5, #1
   13378:	add	sl, sl, r0
   1337c:	cmp	r9, #0
   13380:	beq	13424 <__assert_fail@plt+0x1f3c>
   13384:	mov	r0, r9
   13388:	mov	r1, r7
   1338c:	mov	r2, r4
   13390:	bl	11494 <strncmp@plt>
   13394:	cmp	r0, #0
   13398:	bne	1336c <__assert_fail@plt+0x1e84>
   1339c:	mov	r0, r9
   133a0:	bl	11374 <strlen@plt>
   133a4:	cmp	r0, r4
   133a8:	beq	134d8 <__assert_fail@plt+0x1ff0>
   133ac:	cmn	r6, #1
   133b0:	beq	13368 <__assert_fail@plt+0x1e80>
   133b4:	ldr	r0, [sp, #16]
   133b8:	cmp	r0, #0
   133bc:	beq	133d8 <__assert_fail@plt+0x1ef0>
   133c0:	ldr	r2, [fp, #8]
   133c4:	mov	r1, sl
   133c8:	mla	r0, r6, r2, r0
   133cc:	bl	11368 <bcmp@plt>
   133d0:	cmp	r0, #0
   133d4:	beq	1336c <__assert_fail@plt+0x1e84>
   133d8:	mov	r0, #1
   133dc:	str	r0, [sp, #12]
   133e0:	b	1336c <__assert_fail@plt+0x1e84>
   133e4:	ldr	r0, [sl]
   133e8:	movw	r4, #47120	; 0xb810
   133ec:	movt	r4, #1
   133f0:	cmp	r0, #0
   133f4:	beq	13464 <__assert_fail@plt+0x1f7c>
   133f8:	add	r5, sl, #4
   133fc:	mov	r6, #0
   13400:	mov	r1, r7
   13404:	bl	11200 <strcmp@plt>
   13408:	cmp	r0, #0
   1340c:	beq	1343c <__assert_fail@plt+0x1f54>
   13410:	ldr	r0, [r5, r6, lsl #2]
   13414:	add	r6, r6, #1
   13418:	cmp	r0, #0
   1341c:	bne	13400 <__assert_fail@plt+0x1f18>
   13420:	b	13464 <__assert_fail@plt+0x1f7c>
   13424:	ldr	r0, [sp, #12]
   13428:	ldr	r8, [sp, #16]
   1342c:	ldr	sl, [sp, #4]
   13430:	ldr	r9, [sp, #8]
   13434:	tst	r0, #1
   13438:	bne	13448 <__assert_fail@plt+0x1f60>
   1343c:	cmn	r6, #1
   13440:	bgt	134cc <__assert_fail@plt+0x1fe4>
   13444:	beq	1345c <__assert_fail@plt+0x1f74>
   13448:	movw	r4, #47147	; 0xb82b
   1344c:	movt	r4, #1
   13450:	b	13464 <__assert_fail@plt+0x1f7c>
   13454:	ldr	r8, [sp, #16]
   13458:	ldr	r9, [sp, #8]
   1345c:	movw	r4, #47120	; 0xb810
   13460:	movt	r4, #1
   13464:	ldr	r6, [fp, #12]
   13468:	mov	r0, #0
   1346c:	mov	r1, r4
   13470:	mov	r2, #5
   13474:	bl	1126c <dcgettext@plt>
   13478:	mov	r4, r0
   1347c:	mov	r0, #0
   13480:	mov	r1, #8
   13484:	mov	r2, r7
   13488:	bl	18a1c <__assert_fail@plt+0x7534>
   1348c:	mov	r5, r0
   13490:	mov	r0, #1
   13494:	mov	r1, r9
   13498:	bl	18fdc <__assert_fail@plt+0x7af4>
   1349c:	str	r0, [sp]
   134a0:	mov	r0, #0
   134a4:	mov	r1, #0
   134a8:	mov	r2, r4
   134ac:	mov	r3, r5
   134b0:	bl	112fc <error@plt>
   134b4:	ldr	r2, [fp, #8]
   134b8:	mov	r0, sl
   134bc:	mov	r1, r8
   134c0:	bl	131bc <__assert_fail@plt+0x1cd4>
   134c4:	blx	r6
   134c8:	mvn	r6, #0
   134cc:	mov	r0, r6
   134d0:	sub	sp, fp, #28
   134d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134d8:	ldr	r8, [sp, #16]
   134dc:	ldr	sl, [sp, #4]
   134e0:	ldr	r9, [sp, #8]
   134e4:	mov	r6, r5
   134e8:	cmn	r6, #1
   134ec:	bgt	134cc <__assert_fail@plt+0x1fe4>
   134f0:	b	13444 <__assert_fail@plt+0x1f5c>
   134f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134f8:	add	fp, sp, #24
   134fc:	ldr	r6, [r1]
   13500:	cmp	r6, #0
   13504:	beq	13568 <__assert_fail@plt+0x2080>
   13508:	mov	r8, r1
   1350c:	mov	r7, r2
   13510:	mov	r1, r2
   13514:	mov	r2, r3
   13518:	mov	r4, r3
   1351c:	mov	r9, r0
   13520:	bl	11368 <bcmp@plt>
   13524:	cmp	r0, #0
   13528:	beq	13560 <__assert_fail@plt+0x2078>
   1352c:	add	r7, r7, r4
   13530:	add	r5, r8, #4
   13534:	ldr	r6, [r5]
   13538:	cmp	r6, #0
   1353c:	beq	13568 <__assert_fail@plt+0x2080>
   13540:	mov	r0, r9
   13544:	mov	r1, r7
   13548:	mov	r2, r4
   1354c:	bl	11368 <bcmp@plt>
   13550:	add	r7, r7, r4
   13554:	add	r5, r5, #4
   13558:	cmp	r0, #0
   1355c:	bne	13534 <__assert_fail@plt+0x204c>
   13560:	mov	r0, r6
   13564:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13568:	mov	r6, #0
   1356c:	mov	r0, r6
   13570:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13574:	sub	r0, r0, #1
   13578:	ldrb	r3, [r0, #1]!
   1357c:	cmp	r3, #47	; 0x2f
   13580:	beq	13578 <__assert_fail@plt+0x2090>
   13584:	mov	r2, #0
   13588:	mov	r1, r0
   1358c:	b	13598 <__assert_fail@plt+0x20b0>
   13590:	ldrb	r3, [r1, #1]!
   13594:	mov	r2, #1
   13598:	uxtb	r3, r3
   1359c:	cmp	r3, #47	; 0x2f
   135a0:	beq	13590 <__assert_fail@plt+0x20a8>
   135a4:	cmp	r3, #0
   135a8:	bxeq	lr
   135ac:	tst	r2, #1
   135b0:	mov	r2, #0
   135b4:	movne	r0, r1
   135b8:	ldrb	r3, [r1, #1]!
   135bc:	b	13598 <__assert_fail@plt+0x20b0>
   135c0:	push	{r4, sl, fp, lr}
   135c4:	add	fp, sp, #8
   135c8:	mov	r4, r0
   135cc:	bl	11374 <strlen@plt>
   135d0:	mov	r1, r0
   135d4:	sub	r2, r4, #1
   135d8:	mov	r0, r1
   135dc:	cmp	r1, #2
   135e0:	bcc	135f4 <__assert_fail@plt+0x210c>
   135e4:	ldrb	r3, [r2, r0]
   135e8:	sub	r1, r0, #1
   135ec:	cmp	r3, #47	; 0x2f
   135f0:	beq	135d8 <__assert_fail@plt+0x20f0>
   135f4:	pop	{r4, sl, fp, pc}
   135f8:	movw	r1, #49584	; 0xc1b0
   135fc:	movt	r1, #2
   13600:	str	r0, [r1]
   13604:	bx	lr
   13608:	push	{r4, r5, r6, sl, fp, lr}
   1360c:	add	fp, sp, #16
   13610:	sub	sp, sp, #8
   13614:	movw	r6, #49552	; 0xc190
   13618:	movt	r6, #2
   1361c:	ldr	r5, [r6]
   13620:	mov	r0, r5
   13624:	bl	13a38 <__assert_fail@plt+0x2550>
   13628:	cmp	r0, #0
   1362c:	beq	1366c <__assert_fail@plt+0x2184>
   13630:	mov	r0, #1
   13634:	mov	r2, #0
   13638:	mov	r3, #0
   1363c:	mov	r4, #0
   13640:	str	r0, [sp]
   13644:	mov	r0, r5
   13648:	bl	13aa0 <__assert_fail@plt+0x25b8>
   1364c:	cmp	r0, #0
   13650:	bne	13670 <__assert_fail@plt+0x2188>
   13654:	ldr	r0, [r6]
   13658:	bl	1381c <__assert_fail@plt+0x2334>
   1365c:	cmp	r0, #0
   13660:	mov	r4, r0
   13664:	movwne	r4, #1
   13668:	b	13670 <__assert_fail@plt+0x2188>
   1366c:	mov	r4, #0
   13670:	ldr	r0, [r6]
   13674:	bl	1a03c <__assert_fail@plt+0x8b54>
   13678:	cmp	r4, #0
   1367c:	cmpeq	r0, #0
   13680:	bne	13690 <__assert_fail@plt+0x21a8>
   13684:	sub	sp, fp, #16
   13688:	pop	{r4, r5, r6, sl, fp, lr}
   1368c:	b	13734 <__assert_fail@plt+0x224c>
   13690:	movw	r1, #47210	; 0xb86a
   13694:	mov	r0, #0
   13698:	mov	r2, #5
   1369c:	movt	r1, #1
   136a0:	bl	1126c <dcgettext@plt>
   136a4:	mov	r4, r0
   136a8:	movw	r0, #49584	; 0xc1b0
   136ac:	movt	r0, #2
   136b0:	ldr	r6, [r0]
   136b4:	bl	1138c <__errno_location@plt>
   136b8:	ldr	r5, [r0]
   136bc:	cmp	r6, #0
   136c0:	bne	136dc <__assert_fail@plt+0x21f4>
   136c4:	movw	r2, #47207	; 0xb867
   136c8:	mov	r0, #0
   136cc:	mov	r1, r5
   136d0:	mov	r3, r4
   136d4:	movt	r2, #1
   136d8:	b	136fc <__assert_fail@plt+0x2214>
   136dc:	mov	r0, r6
   136e0:	bl	18c64 <__assert_fail@plt+0x777c>
   136e4:	movw	r2, #47229	; 0xb87d
   136e8:	mov	r3, r0
   136ec:	str	r4, [sp]
   136f0:	mov	r0, #0
   136f4:	mov	r1, r5
   136f8:	movt	r2, #1
   136fc:	bl	112fc <error@plt>
   13700:	bl	13734 <__assert_fail@plt+0x224c>
   13704:	movw	r0, #49456	; 0xc130
   13708:	movt	r0, #2
   1370c:	ldr	r0, [r0]
   13710:	bl	11248 <_exit@plt>
   13714:	movw	r1, #49588	; 0xc1b4
   13718:	movt	r1, #2
   1371c:	str	r0, [r1]
   13720:	bx	lr
   13724:	movw	r1, #49592	; 0xc1b8
   13728:	movt	r1, #2
   1372c:	strb	r0, [r1]
   13730:	bx	lr
   13734:	push	{r4, r5, r6, sl, fp, lr}
   13738:	add	fp, sp, #16
   1373c:	sub	sp, sp, #8
   13740:	movw	r0, #49556	; 0xc194
   13744:	movt	r0, #2
   13748:	ldr	r0, [r0]
   1374c:	bl	1a03c <__assert_fail@plt+0x8b54>
   13750:	cmp	r0, #0
   13754:	beq	1377c <__assert_fail@plt+0x2294>
   13758:	movw	r0, #49592	; 0xc1b8
   1375c:	movt	r0, #2
   13760:	ldrb	r0, [r0]
   13764:	cmp	r0, #0
   13768:	beq	1379c <__assert_fail@plt+0x22b4>
   1376c:	bl	1138c <__errno_location@plt>
   13770:	ldr	r0, [r0]
   13774:	cmp	r0, #32
   13778:	bne	1379c <__assert_fail@plt+0x22b4>
   1377c:	movw	r0, #49544	; 0xc188
   13780:	movt	r0, #2
   13784:	ldr	r0, [r0]
   13788:	bl	1a03c <__assert_fail@plt+0x8b54>
   1378c:	cmp	r0, #0
   13790:	subeq	sp, fp, #16
   13794:	popeq	{r4, r5, r6, sl, fp, pc}
   13798:	b	1380c <__assert_fail@plt+0x2324>
   1379c:	movw	r1, #47236	; 0xb884
   137a0:	mov	r0, #0
   137a4:	mov	r2, #5
   137a8:	movt	r1, #1
   137ac:	bl	1126c <dcgettext@plt>
   137b0:	mov	r4, r0
   137b4:	movw	r0, #49588	; 0xc1b4
   137b8:	movt	r0, #2
   137bc:	ldr	r6, [r0]
   137c0:	bl	1138c <__errno_location@plt>
   137c4:	ldr	r5, [r0]
   137c8:	cmp	r6, #0
   137cc:	bne	137e8 <__assert_fail@plt+0x2300>
   137d0:	movw	r2, #47207	; 0xb867
   137d4:	mov	r0, #0
   137d8:	mov	r1, r5
   137dc:	mov	r3, r4
   137e0:	movt	r2, #1
   137e4:	b	13808 <__assert_fail@plt+0x2320>
   137e8:	mov	r0, r6
   137ec:	bl	18c64 <__assert_fail@plt+0x777c>
   137f0:	movw	r2, #47229	; 0xb87d
   137f4:	mov	r3, r0
   137f8:	str	r4, [sp]
   137fc:	mov	r0, #0
   13800:	mov	r1, r5
   13804:	movt	r2, #1
   13808:	bl	112fc <error@plt>
   1380c:	movw	r0, #49456	; 0xc130
   13810:	movt	r0, #2
   13814:	ldr	r0, [r0]
   13818:	bl	11248 <_exit@plt>
   1381c:	push	{r4, sl, fp, lr}
   13820:	add	fp, sp, #8
   13824:	sub	sp, sp, #8
   13828:	mov	r4, r0
   1382c:	cmp	r0, #0
   13830:	beq	13868 <__assert_fail@plt+0x2380>
   13834:	mov	r0, r4
   13838:	bl	1132c <__freading@plt>
   1383c:	cmp	r0, #0
   13840:	beq	13868 <__assert_fail@plt+0x2380>
   13844:	ldrb	r0, [r4, #1]
   13848:	tst	r0, #1
   1384c:	beq	13868 <__assert_fail@plt+0x2380>
   13850:	mov	r0, #1
   13854:	mov	r2, #0
   13858:	mov	r3, #0
   1385c:	str	r0, [sp]
   13860:	mov	r0, r4
   13864:	bl	13aa0 <__assert_fail@plt+0x25b8>
   13868:	mov	r0, r4
   1386c:	sub	sp, fp, #8
   13870:	pop	{r4, sl, fp, lr}
   13874:	b	1120c <fflush@plt>
   13878:	ldr	r1, [r0, #16]
   1387c:	and	r1, r1, #61440	; 0xf000
   13880:	sub	r1, r1, #4096	; 0x1000
   13884:	lsr	r2, r1, #12
   13888:	cmp	r2, #11
   1388c:	bhi	138e8 <__assert_fail@plt+0x2400>
   13890:	movw	r1, #47280	; 0xb8b0
   13894:	add	r3, pc, #4
   13898:	movt	r1, #1
   1389c:	ldr	pc, [r3, r2, lsl #2]
   138a0:	ldrdeq	r3, [r1], -r0
   138a4:	ldrdeq	r3, [r1], -ip
   138a8:	andeq	r3, r1, r8, ror #17
   138ac:	andeq	r3, r1, r4, lsr r9
   138b0:	andeq	r3, r1, r8, ror #17
   138b4:	strdeq	r3, [r1], -r4
   138b8:	andeq	r3, r1, r8, ror #17
   138bc:	andeq	r3, r1, r8, lsl r9
   138c0:	andeq	r3, r1, r8, ror #17
   138c4:	andeq	r3, r1, r0, lsl #18
   138c8:	andeq	r3, r1, r8, ror #17
   138cc:	andeq	r3, r1, ip, lsl #18
   138d0:	movw	r1, #47346	; 0xb8f2
   138d4:	movt	r1, #1
   138d8:	b	13934 <__assert_fail@plt+0x244c>
   138dc:	movw	r1, #47323	; 0xb8db
   138e0:	movt	r1, #1
   138e4:	b	13934 <__assert_fail@plt+0x244c>
   138e8:	movw	r1, #47358	; 0xb8fe
   138ec:	movt	r1, #1
   138f0:	b	13934 <__assert_fail@plt+0x244c>
   138f4:	movw	r1, #47304	; 0xb8c8
   138f8:	movt	r1, #1
   138fc:	b	13934 <__assert_fail@plt+0x244c>
   13900:	movw	r1, #47290	; 0xb8ba
   13904:	movt	r1, #1
   13908:	b	13934 <__assert_fail@plt+0x244c>
   1390c:	movw	r1, #47351	; 0xb8f7
   13910:	movt	r1, #1
   13914:	b	13934 <__assert_fail@plt+0x244c>
   13918:	ldrd	r0, [r0, #48]	; 0x30
   1391c:	orrs	r0, r0, r1
   13920:	movw	r0, #47248	; 0xb890
   13924:	movw	r1, #47267	; 0xb8a3
   13928:	movt	r0, #1
   1392c:	movt	r1, #1
   13930:	moveq	r1, r0
   13934:	mov	r0, #0
   13938:	mov	r2, #5
   1393c:	b	1126c <dcgettext@plt>
   13940:	push	{fp, lr}
   13944:	mov	fp, sp
   13948:	bl	13958 <__assert_fail@plt+0x2470>
   1394c:	cmp	r0, #0
   13950:	popne	{fp, pc}
   13954:	bl	19e24 <__assert_fail@plt+0x893c>
   13958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1395c:	add	fp, sp, #28
   13960:	push	{r2}		; (str r2, [sp, #-4]!)
   13964:	mov	sl, r1
   13968:	mov	r7, r0
   1396c:	bl	13574 <__assert_fail@plt+0x208c>
   13970:	sub	r4, r0, r7
   13974:	bl	135c0 <__assert_fail@plt+0x20d8>
   13978:	mov	r6, r0
   1397c:	add	r5, r4, r0
   13980:	mov	r0, sl
   13984:	bl	11374 <strlen@plt>
   13988:	mov	r9, r0
   1398c:	cmp	r6, #0
   13990:	beq	139b8 <__assert_fail@plt+0x24d0>
   13994:	add	r0, r5, r7
   13998:	mov	r4, #0
   1399c:	ldrb	r0, [r0, #-1]
   139a0:	cmp	r0, #47	; 0x2f
   139a4:	beq	139c8 <__assert_fail@plt+0x24e0>
   139a8:	ldrb	r0, [sl]
   139ac:	subs	r4, r0, #47	; 0x2f
   139b0:	movwne	r4, #47	; 0x2f
   139b4:	b	139c8 <__assert_fail@plt+0x24e0>
   139b8:	ldrb	r0, [sl]
   139bc:	mov	r4, #0
   139c0:	cmp	r0, #47	; 0x2f
   139c4:	movweq	r4, #46	; 0x2e
   139c8:	uxtb	r8, r4
   139cc:	add	r0, r9, r5
   139d0:	cmp	r8, #0
   139d4:	movwne	r8, #1
   139d8:	add	r0, r0, r8
   139dc:	add	r0, r0, #1
   139e0:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   139e4:	mov	r6, r0
   139e8:	cmp	r0, #0
   139ec:	beq	13a2c <__assert_fail@plt+0x2544>
   139f0:	mov	r0, r6
   139f4:	mov	r1, r7
   139f8:	mov	r2, r5
   139fc:	mvn	r3, #0
   13a00:	bl	114dc <__mempcpy_chk@plt>
   13a04:	ldr	r1, [sp]
   13a08:	strb	r4, [r0], r8
   13a0c:	mov	r2, r9
   13a10:	mvn	r3, #0
   13a14:	cmp	r1, #0
   13a18:	strne	r0, [r1]
   13a1c:	mov	r1, sl
   13a20:	bl	114dc <__mempcpy_chk@plt>
   13a24:	mov	r1, #0
   13a28:	strb	r1, [r0]
   13a2c:	mov	r0, r6
   13a30:	sub	sp, fp, #28
   13a34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a38:	ldrd	r2, [r0, #16]
   13a3c:	mov	r1, #0
   13a40:	cmp	r3, r2
   13a44:	bhi	13a70 <__assert_fail@plt+0x2588>
   13a48:	ldrb	r3, [r0, #1]
   13a4c:	ldmib	r0, {r1, r2}
   13a50:	sub	r1, r2, r1
   13a54:	mov	r2, #0
   13a58:	tst	r3, #1
   13a5c:	beq	13a6c <__assert_fail@plt+0x2584>
   13a60:	ldr	r2, [r0, #36]	; 0x24
   13a64:	ldr	r0, [r0, #44]	; 0x2c
   13a68:	sub	r2, r0, r2
   13a6c:	add	r1, r1, r2
   13a70:	mov	r0, r1
   13a74:	bx	lr
   13a78:	push	{r4, r5, r6, sl, fp, lr}
   13a7c:	add	fp, sp, #16
   13a80:	mov	r4, r0
   13a84:	bl	1138c <__errno_location@plt>
   13a88:	ldr	r6, [r0]
   13a8c:	mov	r5, r0
   13a90:	mov	r0, r4
   13a94:	bl	11230 <free@plt>
   13a98:	str	r6, [r5]
   13a9c:	pop	{r4, r5, r6, sl, fp, pc}
   13aa0:	push	{r4, r5, r6, r7, fp, lr}
   13aa4:	add	fp, sp, #16
   13aa8:	sub	sp, sp, #8
   13aac:	mov	r4, r0
   13ab0:	ldr	r0, [r0, #4]
   13ab4:	mov	r5, r3
   13ab8:	mov	r6, r2
   13abc:	ldr	r1, [r4, #8]
   13ac0:	cmp	r1, r0
   13ac4:	bne	13ae0 <__assert_fail@plt+0x25f8>
   13ac8:	ldrd	r0, [r4, #16]
   13acc:	cmp	r1, r0
   13ad0:	bne	13ae0 <__assert_fail@plt+0x25f8>
   13ad4:	ldr	r0, [r4, #36]	; 0x24
   13ad8:	cmp	r0, #0
   13adc:	beq	13af8 <__assert_fail@plt+0x2610>
   13ae0:	mov	r0, r4
   13ae4:	mov	r2, r6
   13ae8:	mov	r3, r5
   13aec:	sub	sp, fp, #16
   13af0:	pop	{r4, r5, r6, r7, fp, lr}
   13af4:	b	113e0 <fseeko64@plt>
   13af8:	ldr	r7, [fp, #8]
   13afc:	mov	r0, r4
   13b00:	bl	113bc <fileno@plt>
   13b04:	mov	r2, r6
   13b08:	mov	r3, r5
   13b0c:	str	r7, [sp]
   13b10:	bl	112cc <lseek64@plt>
   13b14:	and	r2, r0, r1
   13b18:	cmn	r2, #1
   13b1c:	beq	13b3c <__assert_fail@plt+0x2654>
   13b20:	strd	r0, [r4, #80]	; 0x50
   13b24:	ldr	r0, [r4]
   13b28:	bic	r0, r0, #16
   13b2c:	str	r0, [r4]
   13b30:	mov	r0, #0
   13b34:	sub	sp, fp, #16
   13b38:	pop	{r4, r5, r6, r7, fp, pc}
   13b3c:	mvn	r0, #0
   13b40:	sub	sp, fp, #16
   13b44:	pop	{r4, r5, r6, r7, fp, pc}
   13b48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b4c:	add	fp, sp, #28
   13b50:	sub	sp, sp, #28
   13b54:	cmp	r1, #4096	; 0x1000
   13b58:	bcs	13b74 <__assert_fail@plt+0x268c>
   13b5c:	mov	r7, r0
   13b60:	and	r0, r1, #516	; 0x204
   13b64:	mov	r5, r1
   13b68:	cmp	r0, #516	; 0x204
   13b6c:	tstne	r5, #18
   13b70:	bne	13b90 <__assert_fail@plt+0x26a8>
   13b74:	bl	1138c <__errno_location@plt>
   13b78:	mov	r1, #22
   13b7c:	mov	r4, #0
   13b80:	str	r1, [r0]
   13b84:	mov	r0, r4
   13b88:	sub	sp, fp, #28
   13b8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b90:	mov	r0, #1
   13b94:	mov	r1, #96	; 0x60
   13b98:	mov	sl, r2
   13b9c:	bl	19f64 <__assert_fail@plt+0x8a7c>
   13ba0:	cmp	r0, #0
   13ba4:	beq	13fac <__assert_fail@plt+0x2ac4>
   13ba8:	mov	r4, r0
   13bac:	mvn	r0, #99	; 0x63
   13bb0:	tst	r5, #2
   13bb4:	mov	r1, r5
   13bb8:	str	r0, [r4, #32]
   13bbc:	bic	r0, r5, #516	; 0x204
   13bc0:	str	sl, [r4, #44]	; 0x2c
   13bc4:	str	r4, [sp, #24]
   13bc8:	orrne	r1, r0, #4
   13bcc:	str	r1, [r4, #48]	; 0x30
   13bd0:	ldr	r0, [r7]
   13bd4:	cmp	r0, #0
   13bd8:	beq	13c10 <__assert_fail@plt+0x2728>
   13bdc:	add	r6, r7, #4
   13be0:	mov	r4, #0
   13be4:	bl	11374 <strlen@plt>
   13be8:	cmp	r0, r4
   13bec:	movhi	r4, r0
   13bf0:	ldr	r0, [r6], #4
   13bf4:	cmp	r0, #0
   13bf8:	bne	13be4 <__assert_fail@plt+0x26fc>
   13bfc:	add	r0, r4, #1
   13c00:	ldr	r4, [sp, #24]
   13c04:	cmp	r0, #4096	; 0x1000
   13c08:	movls	r0, #4096	; 0x1000
   13c0c:	b	13c14 <__assert_fail@plt+0x272c>
   13c10:	mov	r0, #4096	; 0x1000
   13c14:	ldr	r1, [r4, #36]	; 0x24
   13c18:	add	r0, r0, #256	; 0x100
   13c1c:	adds	r1, r0, r1
   13c20:	bcc	13c44 <__assert_fail@plt+0x275c>
   13c24:	ldr	r0, [r4, #24]
   13c28:	bl	13a78 <__assert_fail@plt+0x2590>
   13c2c:	mov	r0, #0
   13c30:	str	r0, [r4, #24]
   13c34:	bl	1138c <__errno_location@plt>
   13c38:	mov	r1, #36	; 0x24
   13c3c:	str	r1, [r0]
   13c40:	b	13fa4 <__assert_fail@plt+0x2abc>
   13c44:	str	r1, [r4, #36]	; 0x24
   13c48:	ldr	r0, [r4, #24]
   13c4c:	bl	19fe8 <__assert_fail@plt+0x8b00>
   13c50:	cmp	r0, #0
   13c54:	beq	13cc8 <__assert_fail@plt+0x27e0>
   13c58:	str	r0, [r4, #24]
   13c5c:	ldr	r0, [r7]
   13c60:	cmp	r0, #0
   13c64:	beq	13cdc <__assert_fail@plt+0x27f4>
   13c68:	mov	r0, #176	; 0xb0
   13c6c:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   13c70:	cmp	r0, #0
   13c74:	beq	13f9c <__assert_fail@plt+0x2ab4>
   13c78:	ldr	r1, [r4, #24]
   13c7c:	mov	r6, r0
   13c80:	mov	r0, #0
   13c84:	mov	r2, #196608	; 0x30000
   13c88:	strb	r0, [r6, #168]	; 0xa8
   13c8c:	str	r2, [r6, #58]	; 0x3a
   13c90:	mvn	r2, #0
   13c94:	str	r4, [r6, #44]	; 0x2c
   13c98:	str	r2, [r6, #48]	; 0x30
   13c9c:	str	r0, [r6, #52]	; 0x34
   13ca0:	str	r0, [r6, #12]
   13ca4:	str	r0, [r6, #16]
   13ca8:	str	r0, [r6, #20]
   13cac:	str	r1, [r6, #28]
   13cb0:	str	r0, [r6, #32]
   13cb4:	cmp	sl, #0
   13cb8:	beq	13ce8 <__assert_fail@plt+0x2800>
   13cbc:	ldrb	r0, [r4, #49]	; 0x31
   13cc0:	ubfx	r0, r0, #2, #1
   13cc4:	b	13cec <__assert_fail@plt+0x2804>
   13cc8:	ldr	r0, [r4, #24]
   13ccc:	bl	13a78 <__assert_fail@plt+0x2590>
   13cd0:	mov	r0, #0
   13cd4:	str	r0, [r4, #24]
   13cd8:	b	13fa4 <__assert_fail@plt+0x2abc>
   13cdc:	mov	r6, #0
   13ce0:	cmp	sl, #0
   13ce4:	bne	13cbc <__assert_fail@plt+0x27d4>
   13ce8:	mov	r0, #1
   13cec:	ldr	r4, [r7]
   13cf0:	cmp	r4, #0
   13cf4:	beq	13e60 <__assert_fail@plt+0x2978>
   13cf8:	eor	r0, r0, #1
   13cfc:	str	r6, [sp, #20]
   13d00:	and	r1, r5, #2048	; 0x800
   13d04:	mov	r9, #0
   13d08:	mov	r6, #0
   13d0c:	str	sl, [sp, #8]
   13d10:	str	r0, [sp, #12]
   13d14:	mov	r0, #0
   13d18:	str	r1, [sp, #16]
   13d1c:	str	r0, [sp, #4]
   13d20:	b	13d4c <__assert_fail@plt+0x2864>
   13d24:	cmp	r9, #0
   13d28:	str	r4, [r5, #8]
   13d2c:	beq	13e54 <__assert_fail@plt+0x296c>
   13d30:	ldr	r0, [sp, #4]
   13d34:	str	r5, [sp, #4]
   13d38:	str	r5, [r0, #8]
   13d3c:	ldr	r4, [r7, #4]!
   13d40:	add	r6, r6, #1
   13d44:	cmp	r4, #0
   13d48:	beq	13e7c <__assert_fail@plt+0x2994>
   13d4c:	mov	r0, r4
   13d50:	bl	11374 <strlen@plt>
   13d54:	mov	r8, r0
   13d58:	ldr	r0, [sp, #16]
   13d5c:	cmp	r0, #0
   13d60:	bne	13d98 <__assert_fail@plt+0x28b0>
   13d64:	cmp	r8, #3
   13d68:	bcc	13d98 <__assert_fail@plt+0x28b0>
   13d6c:	add	r0, r8, r4
   13d70:	ldrb	r0, [r0, #-1]
   13d74:	cmp	r0, #47	; 0x2f
   13d78:	bne	13d98 <__assert_fail@plt+0x28b0>
   13d7c:	sub	r0, r4, #2
   13d80:	ldrb	r1, [r0, r8]
   13d84:	cmp	r1, #47	; 0x2f
   13d88:	bne	13d98 <__assert_fail@plt+0x28b0>
   13d8c:	sub	r8, r8, #1
   13d90:	cmp	r8, #1
   13d94:	bhi	13d80 <__assert_fail@plt+0x2898>
   13d98:	add	r0, r8, #176	; 0xb0
   13d9c:	bic	r0, r0, #7
   13da0:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   13da4:	cmp	r0, #0
   13da8:	beq	13e6c <__assert_fail@plt+0x2984>
   13dac:	add	sl, r0, #168	; 0xa8
   13db0:	mov	r5, r0
   13db4:	mov	r1, r4
   13db8:	mov	r2, r8
   13dbc:	mov	r0, sl
   13dc0:	bl	11254 <memcpy@plt>
   13dc4:	ldr	r0, [sp, #24]
   13dc8:	ldr	r2, [sp, #20]
   13dcc:	mov	r4, #0
   13dd0:	strb	r4, [sl, r8]
   13dd4:	str	r2, [r5, #4]
   13dd8:	add	r2, r5, #44	; 0x2c
   13ddc:	ldr	r1, [r0, #24]
   13de0:	stm	r2, {r0, r4, r8}
   13de4:	mov	r2, #196608	; 0x30000
   13de8:	str	r2, [r5, #58]	; 0x3a
   13dec:	ldr	r2, [sp, #12]
   13df0:	str	r4, [r5, #12]
   13df4:	str	r4, [r5, #16]
   13df8:	str	r4, [r5, #20]
   13dfc:	str	sl, [r5, #24]
   13e00:	str	r1, [r5, #28]
   13e04:	clz	r1, r9
   13e08:	str	r4, [r5, #32]
   13e0c:	lsr	r1, r1, #5
   13e10:	orrs	r1, r2, r1
   13e14:	bne	13e2c <__assert_fail@plt+0x2944>
   13e18:	mov	r0, #2
   13e1c:	str	r0, [r5, #112]	; 0x70
   13e20:	str	r4, [r5, #116]	; 0x74
   13e24:	mov	r0, #11
   13e28:	b	13e38 <__assert_fail@plt+0x2950>
   13e2c:	mov	r1, r5
   13e30:	mov	r2, #0
   13e34:	bl	14040 <__assert_fail@plt+0x2b58>
   13e38:	ldr	sl, [sp, #8]
   13e3c:	strh	r0, [r5, #56]	; 0x38
   13e40:	cmp	sl, #0
   13e44:	beq	13d24 <__assert_fail@plt+0x283c>
   13e48:	str	r9, [r5, #8]
   13e4c:	mov	r9, r5
   13e50:	b	13d3c <__assert_fail@plt+0x2854>
   13e54:	mov	r0, r5
   13e58:	str	r5, [sp, #4]
   13e5c:	b	13e4c <__assert_fail@plt+0x2964>
   13e60:	ldr	r4, [sp, #24]
   13e64:	mov	r9, #0
   13e68:	b	13eb0 <__assert_fail@plt+0x29c8>
   13e6c:	ldr	r6, [sp, #20]
   13e70:	cmp	r9, #0
   13e74:	bne	13f78 <__assert_fail@plt+0x2a90>
   13e78:	b	13f90 <__assert_fail@plt+0x2aa8>
   13e7c:	cmp	sl, #0
   13e80:	beq	13ea8 <__assert_fail@plt+0x29c0>
   13e84:	ldr	r4, [sp, #24]
   13e88:	cmp	r6, #2
   13e8c:	bcc	13eac <__assert_fail@plt+0x29c4>
   13e90:	mov	r0, r4
   13e94:	mov	r1, r9
   13e98:	mov	r2, r6
   13e9c:	bl	141d8 <__assert_fail@plt+0x2cf0>
   13ea0:	mov	r9, r0
   13ea4:	b	13eac <__assert_fail@plt+0x29c4>
   13ea8:	ldr	r4, [sp, #24]
   13eac:	ldr	r6, [sp, #20]
   13eb0:	mov	r0, #176	; 0xb0
   13eb4:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   13eb8:	cmp	r0, #0
   13ebc:	beq	13f50 <__assert_fail@plt+0x2a68>
   13ec0:	ldr	r2, [r4, #24]
   13ec4:	mov	r1, #0
   13ec8:	mov	r3, #196608	; 0x30000
   13ecc:	str	r0, [r4]
   13ed0:	str	r1, [r0, #52]	; 0x34
   13ed4:	strb	r1, [r0, #168]	; 0xa8
   13ed8:	str	r4, [r0, #44]	; 0x2c
   13edc:	str	r3, [r0, #58]	; 0x3a
   13ee0:	str	r2, [r0, #28]
   13ee4:	mov	r2, #9
   13ee8:	str	r1, [r0, #32]
   13eec:	strh	r2, [r0, #56]	; 0x38
   13ef0:	str	r9, [r0, #8]
   13ef4:	str	r1, [r0, #12]
   13ef8:	str	r1, [r0, #16]
   13efc:	str	r1, [r0, #20]
   13f00:	mov	r1, #1
   13f04:	str	r1, [r0, #48]	; 0x30
   13f08:	ldrh	r0, [r4, #48]	; 0x30
   13f0c:	movw	r1, #258	; 0x102
   13f10:	tst	r0, r1
   13f14:	beq	13fb4 <__assert_fail@plt+0x2acc>
   13f18:	movw	r0, #14968	; 0x3a78
   13f1c:	movw	r2, #23884	; 0x5d4c
   13f20:	movw	r3, #23916	; 0x5d6c
   13f24:	mov	r1, #0
   13f28:	movt	r0, #1
   13f2c:	movt	r2, #1
   13f30:	movt	r3, #1
   13f34:	str	r0, [sp]
   13f38:	mov	r0, #31
   13f3c:	bl	163fc <__assert_fail@plt+0x4f14>
   13f40:	cmp	r0, #0
   13f44:	str	r0, [r4, #56]	; 0x38
   13f48:	bne	13fcc <__assert_fail@plt+0x2ae4>
   13f4c:	b	13f58 <__assert_fail@plt+0x2a70>
   13f50:	mov	r0, #0
   13f54:	str	r0, [r4]
   13f58:	cmp	r9, #0
   13f5c:	bne	13f78 <__assert_fail@plt+0x2a90>
   13f60:	b	13f90 <__assert_fail@plt+0x2aa8>
   13f64:	mov	r0, r9
   13f68:	bl	13a78 <__assert_fail@plt+0x2590>
   13f6c:	cmp	r4, #0
   13f70:	mov	r9, r4
   13f74:	beq	13f90 <__assert_fail@plt+0x2aa8>
   13f78:	ldrd	r4, [r9, #8]
   13f7c:	cmp	r5, #0
   13f80:	beq	13f64 <__assert_fail@plt+0x2a7c>
   13f84:	mov	r0, r5
   13f88:	bl	114d0 <closedir@plt>
   13f8c:	b	13f64 <__assert_fail@plt+0x2a7c>
   13f90:	mov	r0, r6
   13f94:	bl	13a78 <__assert_fail@plt+0x2590>
   13f98:	ldr	r4, [sp, #24]
   13f9c:	ldr	r0, [r4, #24]
   13fa0:	bl	13a78 <__assert_fail@plt+0x2590>
   13fa4:	mov	r0, r4
   13fa8:	bl	13a78 <__assert_fail@plt+0x2590>
   13fac:	mov	r4, #0
   13fb0:	b	13b84 <__assert_fail@plt+0x269c>
   13fb4:	mov	r0, #32
   13fb8:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   13fbc:	cmp	r0, #0
   13fc0:	str	r0, [r4, #56]	; 0x38
   13fc4:	beq	13f58 <__assert_fail@plt+0x2a70>
   13fc8:	bl	1a0c0 <__assert_fail@plt+0x8bd8>
   13fcc:	ldr	r4, [sp, #24]
   13fd0:	ldr	r0, [r4, #48]	; 0x30
   13fd4:	tst	r0, #516	; 0x204
   13fd8:	bne	14030 <__assert_fail@plt+0x2b48>
   13fdc:	mov	r1, #32768	; 0x8000
   13fe0:	tst	r0, #512	; 0x200
   13fe4:	and	r1, r1, r0, lsl #11
   13fe8:	orr	r1, r1, #18688	; 0x4900
   13fec:	orr	r2, r1, #524288	; 0x80000
   13ff0:	bne	14008 <__assert_fail@plt+0x2b20>
   13ff4:	movw	r0, #46384	; 0xb530
   13ff8:	mov	r1, r2
   13ffc:	movt	r0, #1
   14000:	bl	1a42c <__assert_fail@plt+0x8f44>
   14004:	b	14018 <__assert_fail@plt+0x2b30>
   14008:	ldr	r0, [r4, #32]
   1400c:	movw	r1, #46384	; 0xb530
   14010:	movt	r1, #1
   14014:	bl	17300 <__assert_fail@plt+0x5e18>
   14018:	cmn	r0, #1
   1401c:	str	r0, [r4, #28]
   14020:	bgt	14030 <__assert_fail@plt+0x2b48>
   14024:	ldr	r0, [r4, #48]	; 0x30
   14028:	orr	r0, r0, #4
   1402c:	str	r0, [r4, #48]	; 0x30
   14030:	add	r0, r4, #60	; 0x3c
   14034:	mvn	r1, #0
   14038:	bl	17238 <__assert_fail@plt+0x5d50>
   1403c:	b	13b84 <__assert_fail@plt+0x269c>
   14040:	push	{r4, r5, r6, sl, fp, lr}
   14044:	add	fp, sp, #16
   14048:	sub	sp, sp, #8
   1404c:	mov	r4, r1
   14050:	ldr	r1, [r0, #48]	; 0x30
   14054:	ldr	r3, [r4, #48]	; 0x30
   14058:	add	r5, r4, #64	; 0x40
   1405c:	cmp	r3, #0
   14060:	andeq	r3, r1, #1
   14064:	orreq	r2, r3, r2
   14068:	cmp	r2, #0
   1406c:	andseq	r1, r1, #2
   14070:	beq	140cc <__assert_fail@plt+0x2be4>
   14074:	ldr	r1, [r4, #24]
   14078:	mov	r0, #3
   1407c:	mov	r2, r5
   14080:	bl	1147c <__xstat64@plt>
   14084:	cmp	r0, #0
   14088:	beq	1414c <__assert_fail@plt+0x2c64>
   1408c:	bl	1138c <__errno_location@plt>
   14090:	mov	r6, r0
   14094:	ldr	r0, [r0]
   14098:	cmp	r0, #2
   1409c:	bne	140fc <__assert_fail@plt+0x2c14>
   140a0:	ldr	r1, [r4, #24]
   140a4:	mov	r0, #3
   140a8:	mov	r2, r5
   140ac:	bl	114b8 <__lxstat64@plt>
   140b0:	cmp	r0, #0
   140b4:	bne	140f8 <__assert_fail@plt+0x2c10>
   140b8:	mov	r0, #0
   140bc:	str	r0, [r6]
   140c0:	mov	r0, #13
   140c4:	sub	sp, fp, #16
   140c8:	pop	{r4, r5, r6, sl, fp, pc}
   140cc:	ldr	r1, [r0, #32]
   140d0:	ldr	r2, [r4, #24]
   140d4:	mov	r0, #256	; 0x100
   140d8:	mov	r3, r5
   140dc:	str	r0, [sp]
   140e0:	mov	r0, #3
   140e4:	bl	1129c <__fxstatat64@plt>
   140e8:	cmp	r0, #0
   140ec:	beq	1414c <__assert_fail@plt+0x2c64>
   140f0:	bl	1138c <__errno_location@plt>
   140f4:	mov	r6, r0
   140f8:	ldr	r0, [r6]
   140fc:	vmov.i32	q8, #0	; 0x00000000
   14100:	add	r1, r5, #80	; 0x50
   14104:	str	r0, [r4, #32]
   14108:	mov	r0, #0
   1410c:	str	r0, [r5, #96]	; 0x60
   14110:	vst1.64	{d16-d17}, [r1]
   14114:	add	r1, r5, #64	; 0x40
   14118:	vst1.64	{d16-d17}, [r1]
   1411c:	add	r1, r5, #48	; 0x30
   14120:	vst1.64	{d16-d17}, [r1]
   14124:	add	r1, r5, #32
   14128:	vst1.64	{d16-d17}, [r1]
   1412c:	add	r1, r5, #16
   14130:	vst1.64	{d16-d17}, [r1]
   14134:	mov	r1, #100	; 0x64
   14138:	vst1.64	{d16-d17}, [r5], r1
   1413c:	str	r0, [r5]
   14140:	mov	r0, #10
   14144:	sub	sp, fp, #16
   14148:	pop	{r4, r5, r6, sl, fp, pc}
   1414c:	ldr	r0, [r4, #80]	; 0x50
   14150:	and	r0, r0, #61440	; 0xf000
   14154:	cmp	r0, #40960	; 0xa000
   14158:	beq	141c0 <__assert_fail@plt+0x2cd8>
   1415c:	cmp	r0, #32768	; 0x8000
   14160:	beq	141b4 <__assert_fail@plt+0x2ccc>
   14164:	cmp	r0, #16384	; 0x4000
   14168:	bne	141cc <__assert_fail@plt+0x2ce4>
   1416c:	ldrb	r1, [r4, #168]	; 0xa8
   14170:	mov	r0, #1
   14174:	cmp	r1, #46	; 0x2e
   14178:	bne	141d0 <__assert_fail@plt+0x2ce8>
   1417c:	ldrb	r1, [r4, #169]	; 0xa9
   14180:	cmp	r1, #0
   14184:	beq	1419c <__assert_fail@plt+0x2cb4>
   14188:	cmp	r1, #46	; 0x2e
   1418c:	bne	141d0 <__assert_fail@plt+0x2ce8>
   14190:	ldrb	r1, [r4, #170]	; 0xaa
   14194:	cmp	r1, #0
   14198:	bne	141d0 <__assert_fail@plt+0x2ce8>
   1419c:	ldr	r1, [r4, #48]	; 0x30
   141a0:	mov	r0, #5
   141a4:	cmp	r1, #0
   141a8:	movweq	r0, #1
   141ac:	sub	sp, fp, #16
   141b0:	pop	{r4, r5, r6, sl, fp, pc}
   141b4:	mov	r0, #8
   141b8:	sub	sp, fp, #16
   141bc:	pop	{r4, r5, r6, sl, fp, pc}
   141c0:	mov	r0, #12
   141c4:	sub	sp, fp, #16
   141c8:	pop	{r4, r5, r6, sl, fp, pc}
   141cc:	mov	r0, #3
   141d0:	sub	sp, fp, #16
   141d4:	pop	{r4, r5, r6, sl, fp, pc}
   141d8:	push	{r4, r5, r6, r7, fp, lr}
   141dc:	add	fp, sp, #16
   141e0:	mov	r6, r0
   141e4:	ldr	r7, [r0, #44]	; 0x2c
   141e8:	ldr	r0, [r0, #40]	; 0x28
   141ec:	mov	r5, r2
   141f0:	mov	r4, r1
   141f4:	cmp	r0, r2
   141f8:	bcs	14230 <__assert_fail@plt+0x2d48>
   141fc:	add	r1, r5, #40	; 0x28
   14200:	cmn	r1, #-1073741823	; 0xc0000001
   14204:	str	r1, [r6, #40]	; 0x28
   14208:	bhi	142d4 <__assert_fail@plt+0x2dec>
   1420c:	ldr	r0, [r6, #8]
   14210:	lsl	r1, r1, #2
   14214:	bl	19fe8 <__assert_fail@plt+0x8b00>
   14218:	cmp	r0, #0
   1421c:	beq	142d4 <__assert_fail@plt+0x2dec>
   14220:	str	r0, [r6, #8]
   14224:	cmp	r4, #0
   14228:	bne	1423c <__assert_fail@plt+0x2d54>
   1422c:	b	14250 <__assert_fail@plt+0x2d68>
   14230:	ldr	r0, [r6, #8]
   14234:	cmp	r4, #0
   14238:	beq	14250 <__assert_fail@plt+0x2d68>
   1423c:	str	r4, [r0], #4
   14240:	ldr	r4, [r4, #8]
   14244:	cmp	r4, #0
   14248:	bne	1423c <__assert_fail@plt+0x2d54>
   1424c:	ldr	r0, [r6, #8]
   14250:	mov	r1, r5
   14254:	mov	r2, #4
   14258:	mov	r3, r7
   1425c:	bl	11464 <qsort@plt>
   14260:	ldr	r0, [r6, #8]
   14264:	cmp	r5, #1
   14268:	ldr	r4, [r0]
   1426c:	mov	r1, r4
   14270:	beq	142f8 <__assert_fail@plt+0x2e10>
   14274:	mov	r2, r0
   14278:	ldr	r1, [r2, #4]!
   1427c:	str	r1, [r4, #8]
   14280:	subs	r1, r5, #2
   14284:	beq	142f0 <__assert_fail@plt+0x2e08>
   14288:	tst	r1, #1
   1428c:	beq	142a4 <__assert_fail@plt+0x2dbc>
   14290:	ldr	r1, [r0, #8]!
   14294:	ldr	r2, [r0, #-4]
   14298:	str	r1, [r2, #8]
   1429c:	sub	r1, r5, #3
   142a0:	mov	r2, r0
   142a4:	cmp	r5, #3
   142a8:	beq	142f4 <__assert_fail@plt+0x2e0c>
   142ac:	mov	r0, r2
   142b0:	ldm	r2, {r3, r7}
   142b4:	subs	r1, r1, #2
   142b8:	str	r7, [r3, #8]
   142bc:	ldr	r3, [r0, #8]!
   142c0:	ldr	r2, [r2, #4]
   142c4:	str	r3, [r2, #8]
   142c8:	mov	r2, r0
   142cc:	bne	142b0 <__assert_fail@plt+0x2dc8>
   142d0:	b	142f4 <__assert_fail@plt+0x2e0c>
   142d4:	ldr	r0, [r6, #8]
   142d8:	bl	13a78 <__assert_fail@plt+0x2590>
   142dc:	mov	r0, #0
   142e0:	str	r0, [r6, #40]	; 0x28
   142e4:	str	r0, [r6, #8]
   142e8:	mov	r0, r4
   142ec:	pop	{r4, r5, r6, r7, fp, pc}
   142f0:	mov	r0, r2
   142f4:	ldr	r1, [r0]
   142f8:	mov	r0, #0
   142fc:	str	r0, [r1, #8]
   14300:	mov	r0, r4
   14304:	pop	{r4, r5, r6, r7, fp, pc}
   14308:	push	{r4, r5, r6, r7, fp, lr}
   1430c:	add	fp, sp, #16
   14310:	mov	r4, r0
   14314:	ldr	r0, [r0]
   14318:	cmp	r0, #0
   1431c:	beq	1435c <__assert_fail@plt+0x2e74>
   14320:	ldr	r1, [r0, #48]	; 0x30
   14324:	cmp	r1, #0
   14328:	bmi	14350 <__assert_fail@plt+0x2e68>
   1432c:	ldr	r5, [r0, #8]
   14330:	cmp	r5, #0
   14334:	ldreq	r5, [r0, #4]
   14338:	bl	13a78 <__assert_fail@plt+0x2590>
   1433c:	ldr	r0, [r5, #48]	; 0x30
   14340:	cmn	r0, #1
   14344:	mov	r0, r5
   14348:	bgt	1432c <__assert_fail@plt+0x2e44>
   1434c:	b	14354 <__assert_fail@plt+0x2e6c>
   14350:	mov	r5, r0
   14354:	mov	r0, r5
   14358:	bl	13a78 <__assert_fail@plt+0x2590>
   1435c:	ldr	r5, [r4, #4]
   14360:	cmp	r5, #0
   14364:	bne	14380 <__assert_fail@plt+0x2e98>
   14368:	b	14398 <__assert_fail@plt+0x2eb0>
   1436c:	mov	r0, r5
   14370:	bl	13a78 <__assert_fail@plt+0x2590>
   14374:	cmp	r6, #0
   14378:	mov	r5, r6
   1437c:	beq	14398 <__assert_fail@plt+0x2eb0>
   14380:	ldrd	r6, [r5, #8]
   14384:	cmp	r7, #0
   14388:	beq	1436c <__assert_fail@plt+0x2e84>
   1438c:	mov	r0, r7
   14390:	bl	114d0 <closedir@plt>
   14394:	b	1436c <__assert_fail@plt+0x2e84>
   14398:	ldr	r0, [r4, #8]
   1439c:	bl	13a78 <__assert_fail@plt+0x2590>
   143a0:	ldr	r0, [r4, #24]
   143a4:	bl	13a78 <__assert_fail@plt+0x2590>
   143a8:	ldr	r0, [r4, #48]	; 0x30
   143ac:	tst	r0, #512	; 0x200
   143b0:	bne	143dc <__assert_fail@plt+0x2ef4>
   143b4:	mov	r6, #0
   143b8:	tst	r0, #4
   143bc:	bne	14420 <__assert_fail@plt+0x2f38>
   143c0:	ldr	r0, [r4, #28]
   143c4:	bl	11458 <fchdir@plt>
   143c8:	cmp	r0, #0
   143cc:	beq	143fc <__assert_fail@plt+0x2f14>
   143d0:	bl	1138c <__errno_location@plt>
   143d4:	ldr	r6, [r0]
   143d8:	b	14400 <__assert_fail@plt+0x2f18>
   143dc:	ldr	r0, [r4, #32]
   143e0:	mov	r6, #0
   143e4:	cmp	r0, #0
   143e8:	bmi	14420 <__assert_fail@plt+0x2f38>
   143ec:	bl	114ac <close@plt>
   143f0:	cmp	r0, #0
   143f4:	bne	14418 <__assert_fail@plt+0x2f30>
   143f8:	b	14420 <__assert_fail@plt+0x2f38>
   143fc:	mov	r6, #0
   14400:	ldr	r0, [r4, #28]
   14404:	bl	114ac <close@plt>
   14408:	cmp	r6, #0
   1440c:	bne	14420 <__assert_fail@plt+0x2f38>
   14410:	cmp	r0, #0
   14414:	beq	14420 <__assert_fail@plt+0x2f38>
   14418:	bl	1138c <__errno_location@plt>
   1441c:	ldr	r6, [r0]
   14420:	add	r5, r4, #60	; 0x3c
   14424:	mov	r0, r5
   14428:	bl	1725c <__assert_fail@plt+0x5d74>
   1442c:	cmp	r0, #0
   14430:	bne	1444c <__assert_fail@plt+0x2f64>
   14434:	mov	r0, r5
   14438:	bl	172b0 <__assert_fail@plt+0x5dc8>
   1443c:	cmp	r0, #0
   14440:	bmi	14424 <__assert_fail@plt+0x2f3c>
   14444:	bl	114ac <close@plt>
   14448:	b	14424 <__assert_fail@plt+0x2f3c>
   1444c:	ldr	r0, [r4, #52]	; 0x34
   14450:	cmp	r0, #0
   14454:	beq	1445c <__assert_fail@plt+0x2f74>
   14458:	bl	16700 <__assert_fail@plt+0x5218>
   1445c:	ldrh	r0, [r4, #48]	; 0x30
   14460:	movw	r1, #258	; 0x102
   14464:	tst	r0, r1
   14468:	beq	14480 <__assert_fail@plt+0x2f98>
   1446c:	ldr	r0, [r4, #56]	; 0x38
   14470:	cmp	r0, #0
   14474:	beq	14488 <__assert_fail@plt+0x2fa0>
   14478:	bl	16700 <__assert_fail@plt+0x5218>
   1447c:	b	14488 <__assert_fail@plt+0x2fa0>
   14480:	ldr	r0, [r4, #56]	; 0x38
   14484:	bl	13a78 <__assert_fail@plt+0x2590>
   14488:	mov	r0, r4
   1448c:	bl	13a78 <__assert_fail@plt+0x2590>
   14490:	cmp	r6, #0
   14494:	beq	144a8 <__assert_fail@plt+0x2fc0>
   14498:	bl	1138c <__errno_location@plt>
   1449c:	str	r6, [r0]
   144a0:	mvn	r0, #0
   144a4:	pop	{r4, r5, r6, r7, fp, pc}
   144a8:	mov	r0, #0
   144ac:	pop	{r4, r5, r6, r7, fp, pc}
   144b0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   144b4:	add	fp, sp, #24
   144b8:	sub	sp, sp, #8
   144bc:	ldr	r6, [r0]
   144c0:	mov	r5, #0
   144c4:	cmp	r6, #0
   144c8:	beq	14c08 <__assert_fail@plt+0x3720>
   144cc:	mov	r4, r0
   144d0:	ldr	r0, [r0, #48]	; 0x30
   144d4:	tst	r0, #8192	; 0x2000
   144d8:	bne	14c08 <__assert_fail@plt+0x3720>
   144dc:	ldrh	r1, [r6, #60]	; 0x3c
   144e0:	mov	r2, #3
   144e4:	strh	r2, [r6, #60]	; 0x3c
   144e8:	cmp	r1, #1
   144ec:	beq	1455c <__assert_fail@plt+0x3074>
   144f0:	cmp	r1, #2
   144f4:	bne	14578 <__assert_fail@plt+0x3090>
   144f8:	ldrh	r2, [r6, #56]	; 0x38
   144fc:	bic	r3, r2, #1
   14500:	cmp	r3, #12
   14504:	bne	1457c <__assert_fail@plt+0x3094>
   14508:	mov	r0, r4
   1450c:	mov	r1, r6
   14510:	mov	r2, #1
   14514:	bl	14040 <__assert_fail@plt+0x2b58>
   14518:	cmp	r0, #1
   1451c:	strh	r0, [r6, #56]	; 0x38
   14520:	bne	1466c <__assert_fail@plt+0x3184>
   14524:	ldr	r0, [r4, #48]	; 0x30
   14528:	tst	r0, #4
   1452c:	bne	1466c <__assert_fail@plt+0x3184>
   14530:	mov	r1, #32768	; 0x8000
   14534:	tst	r0, #512	; 0x200
   14538:	and	r1, r1, r0, lsl #11
   1453c:	orr	r1, r1, #18688	; 0x4900
   14540:	orr	r2, r1, #524288	; 0x80000
   14544:	bne	14850 <__assert_fail@plt+0x3368>
   14548:	movw	r0, #46384	; 0xb530
   1454c:	mov	r1, r2
   14550:	movt	r0, #1
   14554:	bl	1a42c <__assert_fail@plt+0x8f44>
   14558:	b	14860 <__assert_fail@plt+0x3378>
   1455c:	mov	r0, r4
   14560:	mov	r1, r6
   14564:	mov	r2, #0
   14568:	bl	14040 <__assert_fail@plt+0x2b58>
   1456c:	strh	r0, [r6, #56]	; 0x38
   14570:	mov	r5, r6
   14574:	b	14c08 <__assert_fail@plt+0x3720>
   14578:	ldrh	r2, [r6, #56]	; 0x38
   1457c:	cmp	r2, #1
   14580:	bne	145dc <__assert_fail@plt+0x30f4>
   14584:	cmp	r1, #4
   14588:	bne	14674 <__assert_fail@plt+0x318c>
   1458c:	ldrb	r0, [r6, #58]	; 0x3a
   14590:	tst	r0, #2
   14594:	beq	145a0 <__assert_fail@plt+0x30b8>
   14598:	ldr	r0, [r6, #36]	; 0x24
   1459c:	bl	114ac <close@plt>
   145a0:	ldr	r5, [r4, #4]
   145a4:	cmp	r5, #0
   145a8:	bne	145c4 <__assert_fail@plt+0x30dc>
   145ac:	b	1470c <__assert_fail@plt+0x3224>
   145b0:	mov	r0, r5
   145b4:	bl	13a78 <__assert_fail@plt+0x2590>
   145b8:	cmp	r8, #0
   145bc:	mov	r5, r8
   145c0:	beq	14704 <__assert_fail@plt+0x321c>
   145c4:	ldrd	r8, [r5, #8]
   145c8:	cmp	r9, #0
   145cc:	beq	145b0 <__assert_fail@plt+0x30c8>
   145d0:	mov	r0, r9
   145d4:	bl	114d0 <closedir@plt>
   145d8:	b	145b0 <__assert_fail@plt+0x30c8>
   145dc:	ldr	r5, [r6, #8]
   145e0:	cmp	r5, #0
   145e4:	beq	14728 <__assert_fail@plt+0x3240>
   145e8:	mov	r0, r6
   145ec:	str	r5, [r4]
   145f0:	bl	13a78 <__assert_fail@plt+0x2590>
   145f4:	ldr	r0, [r5, #48]	; 0x30
   145f8:	cmp	r0, #0
   145fc:	beq	14774 <__assert_fail@plt+0x328c>
   14600:	ldrh	r0, [r5, #60]	; 0x3c
   14604:	mov	r6, r5
   14608:	cmp	r0, #4
   1460c:	beq	145dc <__assert_fail@plt+0x30f4>
   14610:	cmp	r0, #2
   14614:	bne	14ad0 <__assert_fail@plt+0x35e8>
   14618:	mov	r0, r4
   1461c:	mov	r1, r5
   14620:	mov	r2, #1
   14624:	bl	14040 <__assert_fail@plt+0x2b58>
   14628:	cmp	r0, #1
   1462c:	strh	r0, [r5, #56]	; 0x38
   14630:	bne	14ac8 <__assert_fail@plt+0x35e0>
   14634:	ldr	r0, [r4, #48]	; 0x30
   14638:	tst	r0, #4
   1463c:	bne	14ac8 <__assert_fail@plt+0x35e0>
   14640:	mov	r1, #32768	; 0x8000
   14644:	tst	r0, #512	; 0x200
   14648:	and	r1, r1, r0, lsl #11
   1464c:	orr	r1, r1, #18688	; 0x4900
   14650:	orr	r2, r1, #524288	; 0x80000
   14654:	bne	14a88 <__assert_fail@plt+0x35a0>
   14658:	movw	r0, #46384	; 0xb530
   1465c:	mov	r1, r2
   14660:	movt	r0, #1
   14664:	bl	1a42c <__assert_fail@plt+0x8f44>
   14668:	b	14a98 <__assert_fail@plt+0x35b0>
   1466c:	mov	r5, r6
   14670:	b	14b0c <__assert_fail@plt+0x3624>
   14674:	tst	r0, #64	; 0x40
   14678:	beq	14694 <__assert_fail@plt+0x31ac>
   1467c:	ldrd	r2, [r4, #16]
   14680:	ldrd	r8, [r6, #64]	; 0x40
   14684:	eor	r1, r9, r3
   14688:	eor	r2, r8, r2
   1468c:	orrs	r1, r2, r1
   14690:	bne	1458c <__assert_fail@plt+0x30a4>
   14694:	ldr	r5, [r4, #4]
   14698:	cmp	r5, #0
   1469c:	beq	147f8 <__assert_fail@plt+0x3310>
   146a0:	tst	r0, #4096	; 0x1000
   146a4:	bne	147b8 <__assert_fail@plt+0x32d0>
   146a8:	ldr	r3, [r6, #24]
   146ac:	mov	r0, r4
   146b0:	mov	r1, r6
   146b4:	mvn	r2, #0
   146b8:	bl	14cf4 <__assert_fail@plt+0x380c>
   146bc:	cmp	r0, #0
   146c0:	beq	14810 <__assert_fail@plt+0x3328>
   146c4:	bl	1138c <__errno_location@plt>
   146c8:	ldr	r0, [r0]
   146cc:	str	r0, [r6, #32]
   146d0:	ldrh	r0, [r6, #58]	; 0x3a
   146d4:	orr	r0, r0, #1
   146d8:	strh	r0, [r6, #58]	; 0x3a
   146dc:	ldr	r0, [r4, #4]
   146e0:	cmp	r0, #0
   146e4:	beq	14810 <__assert_fail@plt+0x3328>
   146e8:	ldmib	r0, {r1, r2}
   146ec:	cmp	r2, #0
   146f0:	ldr	r1, [r1, #24]
   146f4:	str	r1, [r0, #24]
   146f8:	mov	r0, r2
   146fc:	bne	146e8 <__assert_fail@plt+0x3200>
   14700:	b	14810 <__assert_fail@plt+0x3328>
   14704:	mov	r0, #0
   14708:	str	r0, [r4, #4]
   1470c:	mov	r0, #6
   14710:	strh	r0, [r6, #56]	; 0x38
   14714:	mov	r0, r4
   14718:	mov	r1, r6
   1471c:	bl	14c18 <__assert_fail@plt+0x3730>
   14720:	mov	r5, r6
   14724:	b	14c08 <__assert_fail@plt+0x3720>
   14728:	ldr	r5, [r6, #4]
   1472c:	ldr	r0, [r5, #12]
   14730:	cmp	r0, #0
   14734:	beq	14890 <__assert_fail@plt+0x33a8>
   14738:	str	r5, [r4]
   1473c:	ldr	r1, [r5, #40]	; 0x28
   14740:	ldr	r0, [r4, #24]
   14744:	mov	r5, #0
   14748:	strb	r5, [r0, r1]
   1474c:	mov	r0, r4
   14750:	mov	r1, #3
   14754:	bl	14f54 <__assert_fail@plt+0x3a6c>
   14758:	cmp	r0, #0
   1475c:	beq	14880 <__assert_fail@plt+0x3398>
   14760:	mov	r7, r0
   14764:	mov	r0, r6
   14768:	bl	13a78 <__assert_fail@plt+0x2590>
   1476c:	mov	r5, r7
   14770:	b	14ad0 <__assert_fail@plt+0x35e8>
   14774:	mov	r0, r4
   14778:	bl	159e4 <__assert_fail@plt+0x44fc>
   1477c:	ldr	r1, [r4, #48]	; 0x30
   14780:	cmp	r0, #0
   14784:	beq	14798 <__assert_fail@plt+0x32b0>
   14788:	orr	r0, r1, #8192	; 0x2000
   1478c:	mov	r5, #0
   14790:	str	r0, [r4, #48]	; 0x30
   14794:	b	14c08 <__assert_fail@plt+0x3720>
   14798:	movw	r0, #258	; 0x102
   1479c:	tst	r1, r0
   147a0:	beq	14940 <__assert_fail@plt+0x3458>
   147a4:	ldr	r0, [r4, #56]	; 0x38
   147a8:	cmp	r0, #0
   147ac:	beq	14948 <__assert_fail@plt+0x3460>
   147b0:	bl	16700 <__assert_fail@plt+0x5218>
   147b4:	b	14948 <__assert_fail@plt+0x3460>
   147b8:	bic	r0, r0, #4096	; 0x1000
   147bc:	str	r0, [r4, #48]	; 0x30
   147c0:	b	147d8 <__assert_fail@plt+0x32f0>
   147c4:	mov	r0, r5
   147c8:	bl	13a78 <__assert_fail@plt+0x2590>
   147cc:	cmp	r8, #0
   147d0:	mov	r5, r8
   147d4:	beq	147f0 <__assert_fail@plt+0x3308>
   147d8:	ldrd	r8, [r5, #8]
   147dc:	cmp	r9, #0
   147e0:	beq	147c4 <__assert_fail@plt+0x32dc>
   147e4:	mov	r0, r9
   147e8:	bl	114d0 <closedir@plt>
   147ec:	b	147c4 <__assert_fail@plt+0x32dc>
   147f0:	mov	r0, #0
   147f4:	str	r0, [r4, #4]
   147f8:	mov	r0, r4
   147fc:	mov	r1, #3
   14800:	bl	14f54 <__assert_fail@plt+0x3a6c>
   14804:	cmp	r0, #0
   14808:	str	r0, [r4, #4]
   1480c:	beq	14820 <__assert_fail@plt+0x3338>
   14810:	ldr	r5, [r4, #4]
   14814:	mov	r0, #0
   14818:	str	r0, [r4, #4]
   1481c:	b	14ad0 <__assert_fail@plt+0x35e8>
   14820:	ldrb	r0, [r4, #49]	; 0x31
   14824:	mov	r5, #0
   14828:	tst	r0, #32
   1482c:	bne	14c08 <__assert_fail@plt+0x3720>
   14830:	ldr	r0, [r6, #32]
   14834:	cmp	r0, #0
   14838:	beq	14714 <__assert_fail@plt+0x322c>
   1483c:	ldrh	r0, [r6, #56]	; 0x38
   14840:	cmp	r0, #4
   14844:	beq	14714 <__assert_fail@plt+0x322c>
   14848:	mov	r0, #7
   1484c:	b	14710 <__assert_fail@plt+0x3228>
   14850:	ldr	r0, [r4, #32]
   14854:	movw	r1, #46384	; 0xb530
   14858:	movt	r1, #1
   1485c:	bl	17300 <__assert_fail@plt+0x5e18>
   14860:	cmn	r0, #1
   14864:	str	r0, [r6, #36]	; 0x24
   14868:	ble	14924 <__assert_fail@plt+0x343c>
   1486c:	ldrh	r0, [r6, #58]	; 0x3a
   14870:	mov	r5, r6
   14874:	orr	r0, r0, #2
   14878:	strh	r0, [r6, #58]	; 0x3a
   1487c:	b	14b0c <__assert_fail@plt+0x3624>
   14880:	ldrb	r0, [r4, #49]	; 0x31
   14884:	tst	r0, #32
   14888:	bne	14c08 <__assert_fail@plt+0x3720>
   1488c:	ldr	r5, [r6, #4]
   14890:	mov	r0, r6
   14894:	str	r5, [r4]
   14898:	bl	13a78 <__assert_fail@plt+0x2590>
   1489c:	ldr	r0, [r5, #48]	; 0x30
   148a0:	cmn	r0, #1
   148a4:	beq	14908 <__assert_fail@plt+0x3420>
   148a8:	ldrh	r0, [r5, #56]	; 0x38
   148ac:	cmp	r0, #11
   148b0:	beq	14c14 <__assert_fail@plt+0x372c>
   148b4:	ldr	r0, [r5, #40]	; 0x28
   148b8:	ldr	r1, [r4, #24]
   148bc:	mov	r2, #0
   148c0:	strb	r2, [r1, r0]
   148c4:	ldr	r0, [r5, #48]	; 0x30
   148c8:	cmp	r0, #0
   148cc:	beq	14a18 <__assert_fail@plt+0x3530>
   148d0:	ldrh	r0, [r5, #58]	; 0x3a
   148d4:	tst	r0, #2
   148d8:	bne	14a44 <__assert_fail@plt+0x355c>
   148dc:	tst	r0, #1
   148e0:	bne	14bcc <__assert_fail@plt+0x36e4>
   148e4:	ldr	r1, [r5, #4]
   148e8:	movw	r3, #46383	; 0xb52f
   148ec:	mov	r0, r4
   148f0:	mvn	r2, #0
   148f4:	movt	r3, #1
   148f8:	bl	14cf4 <__assert_fail@plt+0x380c>
   148fc:	cmp	r0, #0
   14900:	bne	14a28 <__assert_fail@plt+0x3540>
   14904:	b	14bcc <__assert_fail@plt+0x36e4>
   14908:	mov	r0, r5
   1490c:	bl	13a78 <__assert_fail@plt+0x2590>
   14910:	bl	1138c <__errno_location@plt>
   14914:	mov	r5, #0
   14918:	str	r5, [r0]
   1491c:	str	r5, [r4]
   14920:	b	14c08 <__assert_fail@plt+0x3720>
   14924:	bl	1138c <__errno_location@plt>
   14928:	ldr	r0, [r0]
   1492c:	mov	r1, #7
   14930:	mov	r5, r6
   14934:	strh	r1, [r6, #56]	; 0x38
   14938:	str	r0, [r6, #32]
   1493c:	b	14b0c <__assert_fail@plt+0x3624>
   14940:	ldr	r0, [r4, #56]	; 0x38
   14944:	bl	13a78 <__assert_fail@plt+0x2590>
   14948:	ldr	r1, [r5, #52]	; 0x34
   1494c:	add	r6, r5, #168	; 0xa8
   14950:	str	r1, [r5, #40]	; 0x28
   14954:	add	r2, r1, #1
   14958:	mov	r1, r6
   1495c:	ldr	r0, [r4, #24]
   14960:	bl	11224 <memmove@plt>
   14964:	mov	r0, r6
   14968:	mov	r1, #47	; 0x2f
   1496c:	bl	1141c <strrchr@plt>
   14970:	cmp	r0, #0
   14974:	beq	149b0 <__assert_fail@plt+0x34c8>
   14978:	cmp	r0, r6
   1497c:	bne	1498c <__assert_fail@plt+0x34a4>
   14980:	ldrb	r1, [r5, #169]	; 0xa9
   14984:	cmp	r1, #0
   14988:	beq	149b0 <__assert_fail@plt+0x34c8>
   1498c:	add	r7, r0, #1
   14990:	mov	r0, r7
   14994:	bl	11374 <strlen@plt>
   14998:	mov	r8, r0
   1499c:	add	r2, r0, #1
   149a0:	mov	r0, r6
   149a4:	mov	r1, r7
   149a8:	bl	11224 <memmove@plt>
   149ac:	str	r8, [r5, #52]	; 0x34
   149b0:	ldr	r0, [r4, #24]
   149b4:	movw	r1, #258	; 0x102
   149b8:	str	r0, [r5, #24]
   149bc:	str	r0, [r5, #28]
   149c0:	ldrh	r0, [r4, #48]	; 0x30
   149c4:	tst	r0, r1
   149c8:	beq	149fc <__assert_fail@plt+0x3514>
   149cc:	movw	r0, #14968	; 0x3a78
   149d0:	movw	r2, #23884	; 0x5d4c
   149d4:	movw	r3, #23916	; 0x5d6c
   149d8:	mov	r1, #0
   149dc:	movt	r0, #1
   149e0:	movt	r2, #1
   149e4:	movt	r3, #1
   149e8:	str	r0, [sp]
   149ec:	mov	r0, #31
   149f0:	bl	163fc <__assert_fail@plt+0x4f14>
   149f4:	str	r0, [r4, #56]	; 0x38
   149f8:	b	14b0c <__assert_fail@plt+0x3624>
   149fc:	mov	r0, #32
   14a00:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   14a04:	cmp	r0, #0
   14a08:	str	r0, [r4, #56]	; 0x38
   14a0c:	beq	14b0c <__assert_fail@plt+0x3624>
   14a10:	bl	1a0c0 <__assert_fail@plt+0x8bd8>
   14a14:	b	14b0c <__assert_fail@plt+0x3624>
   14a18:	mov	r0, r4
   14a1c:	bl	159e4 <__assert_fail@plt+0x44fc>
   14a20:	cmp	r0, #0
   14a24:	beq	14bcc <__assert_fail@plt+0x36e4>
   14a28:	bl	1138c <__errno_location@plt>
   14a2c:	ldr	r0, [r0]
   14a30:	str	r0, [r5, #32]
   14a34:	ldr	r0, [r4, #48]	; 0x30
   14a38:	orr	r0, r0, #8192	; 0x2000
   14a3c:	str	r0, [r4, #48]	; 0x30
   14a40:	b	14bcc <__assert_fail@plt+0x36e4>
   14a44:	ldr	r0, [r4, #48]	; 0x30
   14a48:	tst	r0, #4
   14a4c:	bne	14bc4 <__assert_fail@plt+0x36dc>
   14a50:	ldr	r6, [r5, #36]	; 0x24
   14a54:	tst	r0, #512	; 0x200
   14a58:	bne	14b98 <__assert_fail@plt+0x36b0>
   14a5c:	mov	r0, r6
   14a60:	bl	11458 <fchdir@plt>
   14a64:	cmp	r0, #0
   14a68:	beq	14bc4 <__assert_fail@plt+0x36dc>
   14a6c:	bl	1138c <__errno_location@plt>
   14a70:	ldr	r0, [r0]
   14a74:	str	r0, [r5, #32]
   14a78:	ldr	r0, [r4, #48]	; 0x30
   14a7c:	orr	r0, r0, #8192	; 0x2000
   14a80:	str	r0, [r4, #48]	; 0x30
   14a84:	b	14bc4 <__assert_fail@plt+0x36dc>
   14a88:	ldr	r0, [r4, #32]
   14a8c:	movw	r1, #46384	; 0xb530
   14a90:	movt	r1, #1
   14a94:	bl	17300 <__assert_fail@plt+0x5e18>
   14a98:	cmn	r0, #1
   14a9c:	str	r0, [r5, #36]	; 0x24
   14aa0:	ble	14ab4 <__assert_fail@plt+0x35cc>
   14aa4:	ldrh	r0, [r5, #58]	; 0x3a
   14aa8:	orr	r0, r0, #2
   14aac:	strh	r0, [r5, #58]	; 0x3a
   14ab0:	b	14ac8 <__assert_fail@plt+0x35e0>
   14ab4:	bl	1138c <__errno_location@plt>
   14ab8:	ldr	r0, [r0]
   14abc:	mov	r1, #7
   14ac0:	strh	r1, [r5, #56]	; 0x38
   14ac4:	str	r0, [r5, #32]
   14ac8:	mov	r0, #3
   14acc:	strh	r0, [r5, #60]	; 0x3c
   14ad0:	ldr	r0, [r5, #4]
   14ad4:	ldr	r1, [r0, #28]
   14ad8:	ldr	r0, [r0, #40]	; 0x28
   14adc:	sub	r2, r0, #1
   14ae0:	ldrb	r1, [r1, r2]
   14ae4:	cmp	r1, #47	; 0x2f
   14ae8:	ldr	r1, [r4, #24]
   14aec:	moveq	r0, r2
   14af0:	mov	r2, #47	; 0x2f
   14af4:	strb	r2, [r1, r0]!
   14af8:	ldr	r2, [r5, #52]	; 0x34
   14afc:	add	r0, r1, #1
   14b00:	add	r1, r5, #168	; 0xa8
   14b04:	add	r2, r2, #1
   14b08:	bl	11224 <memmove@plt>
   14b0c:	str	r5, [r4]
   14b10:	ldrh	r0, [r5, #56]	; 0x38
   14b14:	cmp	r0, #11
   14b18:	bne	14b50 <__assert_fail@plt+0x3668>
   14b1c:	add	r0, r5, #112	; 0x70
   14b20:	ldrd	r0, [r0]
   14b24:	eor	r2, r0, #1
   14b28:	orrs	r2, r2, r1
   14b2c:	beq	14c08 <__assert_fail@plt+0x3720>
   14b30:	eor	r0, r0, #2
   14b34:	orrs	r0, r0, r1
   14b38:	bne	14c14 <__assert_fail@plt+0x372c>
   14b3c:	mov	r0, r4
   14b40:	mov	r1, r5
   14b44:	mov	r2, #0
   14b48:	bl	14040 <__assert_fail@plt+0x2b58>
   14b4c:	strh	r0, [r5, #56]	; 0x38
   14b50:	cmp	r0, #1
   14b54:	bne	14c08 <__assert_fail@plt+0x3720>
   14b58:	ldr	r0, [r5, #48]	; 0x30
   14b5c:	cmp	r0, #0
   14b60:	bne	14b70 <__assert_fail@plt+0x3688>
   14b64:	add	r0, r5, #64	; 0x40
   14b68:	ldrd	r0, [r0]
   14b6c:	strd	r0, [r4, #16]
   14b70:	mov	r0, r4
   14b74:	mov	r1, r5
   14b78:	bl	15a74 <__assert_fail@plt+0x458c>
   14b7c:	cmp	r0, #0
   14b80:	bne	14c08 <__assert_fail@plt+0x3720>
   14b84:	bl	1138c <__errno_location@plt>
   14b88:	mov	r1, #12
   14b8c:	mov	r5, #0
   14b90:	str	r1, [r0]
   14b94:	b	14c08 <__assert_fail@plt+0x3720>
   14b98:	ldr	r1, [r4, #32]
   14b9c:	cmp	r1, r6
   14ba0:	bne	14bac <__assert_fail@plt+0x36c4>
   14ba4:	cmn	r1, #100	; 0x64
   14ba8:	bne	14c14 <__assert_fail@plt+0x372c>
   14bac:	add	r0, r4, #60	; 0x3c
   14bb0:	bl	17264 <__assert_fail@plt+0x5d7c>
   14bb4:	cmp	r0, #0
   14bb8:	bmi	14bc0 <__assert_fail@plt+0x36d8>
   14bbc:	bl	114ac <close@plt>
   14bc0:	str	r6, [r4, #32]
   14bc4:	ldr	r0, [r5, #36]	; 0x24
   14bc8:	bl	114ac <close@plt>
   14bcc:	ldrh	r0, [r5, #56]	; 0x38
   14bd0:	cmp	r0, #2
   14bd4:	beq	14bfc <__assert_fail@plt+0x3714>
   14bd8:	ldr	r0, [r5, #32]
   14bdc:	mov	r1, #7
   14be0:	cmp	r0, #0
   14be4:	movweq	r1, #6
   14be8:	strh	r1, [r5, #56]	; 0x38
   14bec:	bne	14bfc <__assert_fail@plt+0x3714>
   14bf0:	mov	r0, r4
   14bf4:	mov	r1, r5
   14bf8:	bl	14c18 <__assert_fail@plt+0x3730>
   14bfc:	ldrb	r0, [r4, #49]	; 0x31
   14c00:	tst	r0, #32
   14c04:	movne	r5, #0
   14c08:	mov	r0, r5
   14c0c:	sub	sp, fp, #24
   14c10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c14:	bl	114a0 <abort@plt>
   14c18:	push	{r4, r5, r7, sl, fp, lr}
   14c1c:	add	fp, sp, #16
   14c20:	sub	sp, sp, #24
   14c24:	ldrh	r2, [r0, #48]	; 0x30
   14c28:	movw	r3, #258	; 0x102
   14c2c:	add	lr, r1, #64	; 0x40
   14c30:	add	r4, r1, #160	; 0xa0
   14c34:	tst	r2, r3
   14c38:	beq	14c70 <__assert_fail@plt+0x3788>
   14c3c:	ldrd	r2, [lr]
   14c40:	mov	r1, sp
   14c44:	stm	sp, {r2, r3}
   14c48:	ldrd	r2, [r4]
   14c4c:	str	r3, [sp, #12]
   14c50:	str	r2, [sp, #8]
   14c54:	ldr	r0, [r0, #56]	; 0x38
   14c58:	bl	16f90 <__assert_fail@plt+0x5aa8>
   14c5c:	cmp	r0, #0
   14c60:	beq	14cf0 <__assert_fail@plt+0x3808>
   14c64:	bl	13a78 <__assert_fail@plt+0x2590>
   14c68:	sub	sp, fp, #16
   14c6c:	pop	{r4, r5, r7, sl, fp, pc}
   14c70:	ldr	r1, [r1, #4]
   14c74:	cmp	r1, #0
   14c78:	beq	14ce8 <__assert_fail@plt+0x3800>
   14c7c:	ldr	r2, [r1, #48]	; 0x30
   14c80:	cmp	r2, #0
   14c84:	bmi	14ce8 <__assert_fail@plt+0x3800>
   14c88:	ldr	ip, [r0, #56]	; 0x38
   14c8c:	ldrd	r2, [ip, #16]
   14c90:	orrs	r2, r2, r3
   14c94:	beq	14cf0 <__assert_fail@plt+0x3808>
   14c98:	ldrd	r2, [r4]
   14c9c:	ldrd	r4, [ip]
   14ca0:	eor	r3, r5, r3
   14ca4:	eor	r2, r4, r2
   14ca8:	orrs	r2, r2, r3
   14cac:	bne	14ce8 <__assert_fail@plt+0x3800>
   14cb0:	add	r3, ip, #8
   14cb4:	ldm	lr, {r2, r5}
   14cb8:	ldm	r3, {r4, r7}
   14cbc:	eor	r7, r7, r5
   14cc0:	eor	r2, r4, r2
   14cc4:	orrs	r2, r2, r7
   14cc8:	bne	14ce8 <__assert_fail@plt+0x3800>
   14ccc:	add	r2, r1, #64	; 0x40
   14cd0:	add	r1, r1, #160	; 0xa0
   14cd4:	ldm	r2, {r2, r5}
   14cd8:	stm	r3, {r2, r5}
   14cdc:	ldr	r0, [r0, #56]	; 0x38
   14ce0:	ldrd	r2, [r1]
   14ce4:	strd	r2, [r0]
   14ce8:	sub	sp, fp, #16
   14cec:	pop	{r4, r5, r7, sl, fp, pc}
   14cf0:	bl	114a0 <abort@plt>
   14cf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cf8:	add	fp, sp, #28
   14cfc:	sub	sp, sp, #108	; 0x6c
   14d00:	mov	r7, r3
   14d04:	mov	r4, r2
   14d08:	mov	r8, r1
   14d0c:	mov	sl, r0
   14d10:	cmp	r3, #0
   14d14:	beq	14d38 <__assert_fail@plt+0x3850>
   14d18:	movw	r1, #46383	; 0xb52f
   14d1c:	mov	r0, r7
   14d20:	movt	r1, #1
   14d24:	bl	11200 <strcmp@plt>
   14d28:	cmp	r0, #0
   14d2c:	mov	r6, r0
   14d30:	movwne	r6, #1
   14d34:	b	14d3c <__assert_fail@plt+0x3854>
   14d38:	mov	r6, #1
   14d3c:	ldr	r0, [sl, #48]	; 0x30
   14d40:	tst	r0, #4
   14d44:	bne	14d9c <__assert_fail@plt+0x38b4>
   14d48:	cmn	r4, #1
   14d4c:	mov	r1, #0
   14d50:	mov	r9, #0
   14d54:	movwgt	r1, #1
   14d58:	orrs	r1, r1, r6
   14d5c:	bne	14dbc <__assert_fail@plt+0x38d4>
   14d60:	ands	r0, r0, #512	; 0x200
   14d64:	beq	14dbc <__assert_fail@plt+0x38d4>
   14d68:	add	r4, sl, #60	; 0x3c
   14d6c:	mov	r0, r4
   14d70:	bl	1725c <__assert_fail@plt+0x5d74>
   14d74:	cmp	r0, #0
   14d78:	bne	14dc4 <__assert_fail@plt+0x38dc>
   14d7c:	mov	r0, r4
   14d80:	bl	172b0 <__assert_fail@plt+0x5dc8>
   14d84:	cmn	r0, #1
   14d88:	ble	14dc4 <__assert_fail@plt+0x38dc>
   14d8c:	mov	r4, r0
   14d90:	mov	r9, #0
   14d94:	mov	r7, #0
   14d98:	b	14e0c <__assert_fail@plt+0x3924>
   14d9c:	mov	r5, #0
   14da0:	cmp	r4, #0
   14da4:	bmi	14f44 <__assert_fail@plt+0x3a5c>
   14da8:	ands	r0, r0, #512	; 0x200
   14dac:	beq	14f44 <__assert_fail@plt+0x3a5c>
   14db0:	mov	r0, r4
   14db4:	bl	114ac <close@plt>
   14db8:	b	14f44 <__assert_fail@plt+0x3a5c>
   14dbc:	cmn	r4, #1
   14dc0:	bgt	14e0c <__assert_fail@plt+0x3924>
   14dc4:	ldr	r0, [sl, #48]	; 0x30
   14dc8:	mov	r1, #32768	; 0x8000
   14dcc:	and	r1, r1, r0, lsl #11
   14dd0:	tst	r0, #512	; 0x200
   14dd4:	orr	r1, r1, #18688	; 0x4900
   14dd8:	orr	r2, r1, #524288	; 0x80000
   14ddc:	bne	14df0 <__assert_fail@plt+0x3908>
   14de0:	mov	r0, r7
   14de4:	mov	r1, r2
   14de8:	bl	1a42c <__assert_fail@plt+0x8f44>
   14dec:	b	14dfc <__assert_fail@plt+0x3914>
   14df0:	ldr	r0, [sl, #32]
   14df4:	mov	r1, r7
   14df8:	bl	17300 <__assert_fail@plt+0x5e18>
   14dfc:	mov	r4, r0
   14e00:	mov	r9, #1
   14e04:	cmp	r0, #0
   14e08:	bmi	14ee8 <__assert_fail@plt+0x3a00>
   14e0c:	ldr	r5, [sl, #48]	; 0x30
   14e10:	tst	r5, #2
   14e14:	bne	14e58 <__assert_fail@plt+0x3970>
   14e18:	cmp	r7, #0
   14e1c:	beq	14e38 <__assert_fail@plt+0x3950>
   14e20:	movw	r1, #46383	; 0xb52f
   14e24:	mov	r0, r7
   14e28:	movt	r1, #1
   14e2c:	bl	11200 <strcmp@plt>
   14e30:	cmp	r0, #0
   14e34:	beq	14e58 <__assert_fail@plt+0x3970>
   14e38:	tst	r5, #512	; 0x200
   14e3c:	bne	14eb8 <__assert_fail@plt+0x39d0>
   14e40:	mov	r0, r4
   14e44:	bl	11458 <fchdir@plt>
   14e48:	mov	r5, r0
   14e4c:	cmp	r9, #0
   14e50:	bne	14f08 <__assert_fail@plt+0x3a20>
   14e54:	b	14f44 <__assert_fail@plt+0x3a5c>
   14e58:	mov	r2, sp
   14e5c:	mov	r0, #3
   14e60:	mov	r1, r4
   14e64:	bl	112b4 <__fxstat64@plt>
   14e68:	cmp	r0, #0
   14e6c:	bne	14efc <__assert_fail@plt+0x3a14>
   14e70:	add	r0, r8, #64	; 0x40
   14e74:	ldm	sp, {r2, r3}
   14e78:	ldrd	r0, [r0]
   14e7c:	eor	r1, r1, r3
   14e80:	eor	r0, r0, r2
   14e84:	orrs	r0, r0, r1
   14e88:	bne	14ef0 <__assert_fail@plt+0x3a08>
   14e8c:	add	r0, r8, #160	; 0xa0
   14e90:	ldr	r2, [sp, #96]	; 0x60
   14e94:	ldr	r3, [sp, #100]	; 0x64
   14e98:	ldrd	r0, [r0]
   14e9c:	eor	r1, r1, r3
   14ea0:	eor	r0, r0, r2
   14ea4:	orrs	r0, r0, r1
   14ea8:	bne	14ef0 <__assert_fail@plt+0x3a08>
   14eac:	ldr	r5, [sl, #48]	; 0x30
   14eb0:	tst	r5, #512	; 0x200
   14eb4:	beq	14e40 <__assert_fail@plt+0x3958>
   14eb8:	ldr	r1, [sl, #32]
   14ebc:	cmp	r1, r4
   14ec0:	bne	14ecc <__assert_fail@plt+0x39e4>
   14ec4:	cmn	r1, #100	; 0x64
   14ec8:	bne	14f50 <__assert_fail@plt+0x3a68>
   14ecc:	cmp	r6, #0
   14ed0:	beq	14f24 <__assert_fail@plt+0x3a3c>
   14ed4:	add	r0, sl, #60	; 0x3c
   14ed8:	bl	17264 <__assert_fail@plt+0x5d7c>
   14edc:	cmp	r0, #0
   14ee0:	bpl	14f38 <__assert_fail@plt+0x3a50>
   14ee4:	b	14f3c <__assert_fail@plt+0x3a54>
   14ee8:	mvn	r5, #0
   14eec:	b	14f44 <__assert_fail@plt+0x3a5c>
   14ef0:	bl	1138c <__errno_location@plt>
   14ef4:	mov	r1, #2
   14ef8:	str	r1, [r0]
   14efc:	mvn	r5, #0
   14f00:	cmp	r9, #0
   14f04:	beq	14f44 <__assert_fail@plt+0x3a5c>
   14f08:	bl	1138c <__errno_location@plt>
   14f0c:	ldr	r7, [r0]
   14f10:	mov	r6, r0
   14f14:	mov	r0, r4
   14f18:	bl	114ac <close@plt>
   14f1c:	str	r7, [r6]
   14f20:	b	14f44 <__assert_fail@plt+0x3a5c>
   14f24:	tst	r5, #4
   14f28:	bne	14f3c <__assert_fail@plt+0x3a54>
   14f2c:	cmp	r1, #0
   14f30:	bmi	14f3c <__assert_fail@plt+0x3a54>
   14f34:	mov	r0, r1
   14f38:	bl	114ac <close@plt>
   14f3c:	str	r4, [sl, #32]
   14f40:	mov	r5, #0
   14f44:	mov	r0, r5
   14f48:	sub	sp, fp, #28
   14f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f50:	bl	114a0 <abort@plt>
   14f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f58:	add	fp, sp, #28
   14f5c:	sub	sp, sp, #68	; 0x44
   14f60:	ldr	sl, [r0]
   14f64:	mov	r7, r1
   14f68:	mov	r5, r0
   14f6c:	str	r0, [sp, #48]	; 0x30
   14f70:	ldr	r4, [sl, #12]
   14f74:	cmp	r4, #0
   14f78:	beq	14fc0 <__assert_fail@plt+0x3ad8>
   14f7c:	mov	r0, r4
   14f80:	bl	1144c <dirfd@plt>
   14f84:	cmn	r0, #1
   14f88:	str	r0, [fp, #-32]	; 0xffffffe0
   14f8c:	ble	14ff4 <__assert_fail@plt+0x3b0c>
   14f90:	mov	r1, r5
   14f94:	str	r4, [sp, #12]
   14f98:	str	r7, [sp, #4]
   14f9c:	mov	ip, #0
   14fa0:	ldr	r0, [r1, #44]!	; 0x2c
   14fa4:	str	r1, [sp, #20]
   14fa8:	mvn	r1, #0
   14fac:	cmp	r0, #0
   14fb0:	movweq	r1, #34464	; 0x86a0
   14fb4:	movteq	r1, #1
   14fb8:	str	r1, [sp, #32]
   14fbc:	b	15244 <__assert_fail@plt+0x3d5c>
   14fc0:	ldr	r3, [r5, #48]	; 0x30
   14fc4:	mvn	r0, #99	; 0x63
   14fc8:	mov	r2, #0
   14fcc:	and	r1, r3, #516	; 0x204
   14fd0:	cmp	r1, #512	; 0x200
   14fd4:	ldr	r1, [sl, #24]
   14fd8:	ldreq	r0, [r5, #32]
   14fdc:	tst	r3, #16
   14fe0:	beq	1501c <__assert_fail@plt+0x3b34>
   14fe4:	tst	r3, #1
   14fe8:	bne	15010 <__assert_fail@plt+0x3b28>
   14fec:	mov	r2, #32768	; 0x8000
   14ff0:	b	1501c <__assert_fail@plt+0x3b34>
   14ff4:	ldr	r0, [sl, #12]
   14ff8:	bl	114d0 <closedir@plt>
   14ffc:	mov	r6, #0
   15000:	str	r6, [sl, #12]
   15004:	cmp	r7, #3
   15008:	beq	15060 <__assert_fail@plt+0x3b78>
   1500c:	b	159d8 <__assert_fail@plt+0x44f0>
   15010:	ldr	r3, [sl, #48]	; 0x30
   15014:	cmp	r3, #0
   15018:	movne	r2, #32768	; 0x8000
   1501c:	sub	r3, fp, #32
   15020:	bl	17338 <__assert_fail@plt+0x5e50>
   15024:	cmp	r0, #0
   15028:	str	r0, [sl, #12]
   1502c:	beq	15054 <__assert_fail@plt+0x3b6c>
   15030:	ldrh	r0, [sl, #56]	; 0x38
   15034:	cmp	r0, #11
   15038:	bne	15078 <__assert_fail@plt+0x3b90>
   1503c:	mov	r0, r5
   15040:	mov	r1, sl
   15044:	mov	r2, #0
   15048:	bl	14040 <__assert_fail@plt+0x2b58>
   1504c:	strh	r0, [sl, #56]	; 0x38
   15050:	b	150b8 <__assert_fail@plt+0x3bd0>
   15054:	mov	r6, #0
   15058:	cmp	r7, #3
   1505c:	bne	159d8 <__assert_fail@plt+0x44f0>
   15060:	mov	r0, #4
   15064:	strh	r0, [sl, #56]	; 0x38
   15068:	bl	1138c <__errno_location@plt>
   1506c:	ldr	r0, [r0]
   15070:	str	r0, [sl, #32]
   15074:	b	159d8 <__assert_fail@plt+0x44f0>
   15078:	ldrb	r0, [r5, #49]	; 0x31
   1507c:	tst	r0, #1
   15080:	beq	150b8 <__assert_fail@plt+0x3bd0>
   15084:	mov	r0, r5
   15088:	mov	r1, sl
   1508c:	bl	14c18 <__assert_fail@plt+0x3730>
   15090:	mov	r0, r5
   15094:	mov	r1, sl
   15098:	mov	r2, #0
   1509c:	mov	r6, #0
   150a0:	bl	14040 <__assert_fail@plt+0x2b58>
   150a4:	mov	r0, r5
   150a8:	mov	r1, sl
   150ac:	bl	15a74 <__assert_fail@plt+0x458c>
   150b0:	cmp	r0, #0
   150b4:	beq	1515c <__assert_fail@plt+0x3c74>
   150b8:	mov	r1, r5
   150bc:	str	r7, [sp, #4]
   150c0:	str	r4, [sp, #12]
   150c4:	ldr	r0, [r1, #44]!	; 0x2c
   150c8:	str	r1, [sp, #20]
   150cc:	mvn	r1, #0
   150d0:	cmp	r0, #0
   150d4:	movweq	r1, #34464	; 0x86a0
   150d8:	movteq	r1, #1
   150dc:	cmp	r7, #2
   150e0:	str	r1, [sp, #32]
   150e4:	bne	15100 <__assert_fail@plt+0x3c18>
   150e8:	mov	ip, #1
   150ec:	cmp	r7, #3
   150f0:	bne	15244 <__assert_fail@plt+0x3d5c>
   150f4:	sub	r0, r7, #3
   150f8:	mov	r5, #0
   150fc:	b	15188 <__assert_fail@plt+0x3ca0>
   15100:	ldr	r0, [r5, #48]	; 0x30
   15104:	and	r0, r0, #56	; 0x38
   15108:	cmp	r0, #24
   1510c:	bne	15180 <__assert_fail@plt+0x3c98>
   15110:	ldr	r0, [sl, #84]	; 0x54
   15114:	cmp	r0, #2
   15118:	bne	15180 <__assert_fail@plt+0x3c98>
   1511c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15120:	mov	r0, sl
   15124:	bl	15dec <__assert_fail@plt+0x4904>
   15128:	movw	r1, #26984	; 0x6968
   1512c:	cmp	r0, r1
   15130:	ble	1516c <__assert_fail@plt+0x3c84>
   15134:	movw	r1, #26985	; 0x6969
   15138:	cmp	r0, r1
   1513c:	movwne	r1, #16719	; 0x414f
   15140:	movtne	r1, #21318	; 0x5346
   15144:	cmpne	r0, r1
   15148:	beq	15180 <__assert_fail@plt+0x3c98>
   1514c:	movw	r1, #40864	; 0x9fa0
   15150:	cmp	r0, r1
   15154:	beq	15180 <__assert_fail@plt+0x3c98>
   15158:	b	150e8 <__assert_fail@plt+0x3c00>
   1515c:	bl	1138c <__errno_location@plt>
   15160:	mov	r1, #12
   15164:	str	r1, [r0]
   15168:	b	159d8 <__assert_fail@plt+0x44f0>
   1516c:	movw	r1, #19778	; 0x4d42
   15170:	movt	r1, #65363	; 0xff53
   15174:	cmp	r0, r1
   15178:	cmpne	r0, #0
   1517c:	bne	150e8 <__assert_fail@plt+0x3c00>
   15180:	sub	r0, r7, #3
   15184:	mov	r5, #1
   15188:	clz	r0, r0
   1518c:	lsr	r6, r0, #5
   15190:	ldr	r0, [sp, #48]	; 0x30
   15194:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15198:	ldrb	r0, [r0, #49]	; 0x31
   1519c:	tst	r0, #2
   151a0:	beq	151bc <__assert_fail@plt+0x3cd4>
   151a4:	mov	r0, r2
   151a8:	movw	r1, #1030	; 0x406
   151ac:	mov	r2, #3
   151b0:	bl	1a24c <__assert_fail@plt+0x8d64>
   151b4:	mov	r2, r0
   151b8:	str	r0, [fp, #-32]	; 0xffffffe0
   151bc:	cmp	r2, #0
   151c0:	bmi	151dc <__assert_fail@plt+0x3cf4>
   151c4:	ldr	r0, [sp, #48]	; 0x30
   151c8:	mov	r1, sl
   151cc:	mov	r3, #0
   151d0:	bl	14cf4 <__assert_fail@plt+0x380c>
   151d4:	cmp	r0, #0
   151d8:	beq	1523c <__assert_fail@plt+0x3d54>
   151dc:	and	r0, r6, r5
   151e0:	cmp	r0, #1
   151e4:	bne	151f4 <__assert_fail@plt+0x3d0c>
   151e8:	bl	1138c <__errno_location@plt>
   151ec:	ldr	r0, [r0]
   151f0:	str	r0, [sl, #32]
   151f4:	ldrh	r0, [sl, #58]	; 0x3a
   151f8:	orr	r0, r0, #1
   151fc:	strh	r0, [sl, #58]	; 0x3a
   15200:	ldr	r0, [sl, #12]
   15204:	bl	114d0 <closedir@plt>
   15208:	ldr	r5, [sp, #48]	; 0x30
   1520c:	mov	r4, #0
   15210:	str	r4, [sl, #12]
   15214:	ldrb	r0, [r5, #49]	; 0x31
   15218:	tst	r0, #2
   1521c:	beq	15230 <__assert_fail@plt+0x3d48>
   15220:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15224:	cmp	r0, #0
   15228:	bmi	15230 <__assert_fail@plt+0x3d48>
   1522c:	bl	114ac <close@plt>
   15230:	mov	ip, #1
   15234:	str	r4, [sl, #12]
   15238:	b	15244 <__assert_fail@plt+0x3d5c>
   1523c:	ldr	r5, [sp, #48]	; 0x30
   15240:	mov	ip, #0
   15244:	ldr	r0, [sl, #40]	; 0x28
   15248:	ldr	r1, [sl, #28]
   1524c:	mov	r9, #0
   15250:	sub	r2, r0, #1
   15254:	ldrb	r1, [r1, r2]
   15258:	cmp	r1, #47	; 0x2f
   1525c:	ldrb	r1, [r5, #48]	; 0x30
   15260:	moveq	r0, r2
   15264:	tst	r1, #4
   15268:	mov	r1, #0
   1526c:	str	r1, [sp, #40]	; 0x28
   15270:	beq	15288 <__assert_fail@plt+0x3da0>
   15274:	ldr	r1, [r5, #24]
   15278:	mov	r2, #47	; 0x2f
   1527c:	strb	r2, [r1, r0]!
   15280:	add	r1, r1, #1
   15284:	str	r1, [sp, #40]	; 0x28
   15288:	ldr	r6, [sl, #12]
   1528c:	add	r1, r0, #1
   15290:	str	r1, [fp, #-44]	; 0xffffffd4
   15294:	cmp	r6, #0
   15298:	beq	155f8 <__assert_fail@plt+0x4110>
   1529c:	ldr	r0, [sl, #48]	; 0x30
   152a0:	str	ip, [sp]
   152a4:	mov	r4, #0
   152a8:	add	r0, r0, #1
   152ac:	str	r0, [sp, #24]
   152b0:	ldr	r0, [r5, #36]	; 0x24
   152b4:	sub	r0, r0, r1
   152b8:	str	r0, [fp, #-36]	; 0xffffffdc
   152bc:	bl	1138c <__errno_location@plt>
   152c0:	str	r0, [sp, #36]	; 0x24
   152c4:	mov	r0, #0
   152c8:	mov	r9, #0
   152cc:	mov	r7, #0
   152d0:	str	sl, [sp, #28]
   152d4:	str	r0, [sp, #44]	; 0x2c
   152d8:	mov	r0, #0
   152dc:	str	r0, [sp, #8]
   152e0:	mov	r0, #0
   152e4:	str	r0, [sp, #16]
   152e8:	ldr	r0, [sp, #36]	; 0x24
   152ec:	str	r4, [r0]
   152f0:	mov	r0, r6
   152f4:	bl	11434 <readdir64@plt>
   152f8:	cmp	r0, #0
   152fc:	beq	15604 <__assert_fail@plt+0x411c>
   15300:	mov	r8, r0
   15304:	ldrb	r0, [r5, #48]	; 0x30
   15308:	tst	r0, #32
   1530c:	bne	1533c <__assert_fail@plt+0x3e54>
   15310:	ldrb	r0, [r8, #19]
   15314:	cmp	r0, #46	; 0x2e
   15318:	bne	1533c <__assert_fail@plt+0x3e54>
   1531c:	ldrb	r0, [r8, #20]
   15320:	cmp	r0, #0
   15324:	beq	155d4 <__assert_fail@plt+0x40ec>
   15328:	cmp	r0, #46	; 0x2e
   1532c:	bne	1533c <__assert_fail@plt+0x3e54>
   15330:	ldrb	r0, [r8, #21]
   15334:	cmp	r0, #0
   15338:	beq	155d4 <__assert_fail@plt+0x40ec>
   1533c:	add	r4, r8, #19
   15340:	mov	r0, r4
   15344:	bl	11374 <strlen@plt>
   15348:	mov	r5, r0
   1534c:	add	r0, r0, #176	; 0xb0
   15350:	bic	r0, r0, #7
   15354:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   15358:	mov	r6, r0
   1535c:	cmp	r0, #0
   15360:	beq	15960 <__assert_fail@plt+0x4478>
   15364:	add	sl, r6, #168	; 0xa8
   15368:	mov	r1, r4
   1536c:	mov	r2, r5
   15370:	str	r7, [fp, #-40]	; 0xffffffd8
   15374:	mov	r0, sl
   15378:	bl	11254 <memcpy@plt>
   1537c:	ldr	r2, [sp, #48]	; 0x30
   15380:	mov	r0, #0
   15384:	mov	r1, #196608	; 0x30000
   15388:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1538c:	strb	r0, [sl, r5]
   15390:	str	r5, [r6, #52]	; 0x34
   15394:	str	r2, [r6, #44]	; 0x2c
   15398:	add	r7, r5, r3
   1539c:	ldr	r4, [r2, #24]
   153a0:	str	r0, [r6, #12]
   153a4:	str	r0, [r6, #16]
   153a8:	str	r0, [r6, #20]
   153ac:	str	r1, [r6, #58]	; 0x3a
   153b0:	str	r4, [r6, #28]
   153b4:	str	r0, [r6, #32]
   153b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   153bc:	cmp	r5, r0
   153c0:	bcs	153d4 <__assert_fail@plt+0x3eec>
   153c4:	mov	r5, r2
   153c8:	cmp	r7, r3
   153cc:	bcs	15444 <__assert_fail@plt+0x3f5c>
   153d0:	b	15850 <__assert_fail@plt+0x4368>
   153d4:	ldr	r1, [r2, #36]	; 0x24
   153d8:	movw	r0, #257	; 0x101
   153dc:	mov	r5, r2
   153e0:	add	r0, r7, r0
   153e4:	adds	r1, r0, r1
   153e8:	bcs	1592c <__assert_fail@plt+0x4444>
   153ec:	mov	r0, r4
   153f0:	str	r1, [r5, #36]	; 0x24
   153f4:	bl	19fe8 <__assert_fail@plt+0x8b00>
   153f8:	cmp	r0, #0
   153fc:	beq	1594c <__assert_fail@plt+0x4464>
   15400:	cmp	r0, r4
   15404:	str	r0, [r5, #24]
   15408:	beq	15430 <__assert_fail@plt+0x3f48>
   1540c:	ldrb	r1, [r5, #48]	; 0x30
   15410:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15414:	tst	r1, #4
   15418:	ldr	r1, [sp, #40]	; 0x28
   1541c:	addne	r1, r0, r3
   15420:	mov	r0, #1
   15424:	str	r1, [sp, #40]	; 0x28
   15428:	str	r0, [sp, #16]
   1542c:	b	15434 <__assert_fail@plt+0x3f4c>
   15430:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15434:	ldr	r0, [r5, #36]	; 0x24
   15438:	sub	r0, r0, r3
   1543c:	cmp	r7, r3
   15440:	bcc	15850 <__assert_fail@plt+0x4368>
   15444:	str	r0, [fp, #-36]	; 0xffffffdc
   15448:	ldr	r0, [sp, #24]
   1544c:	add	r4, r6, #112	; 0x70
   15450:	str	r0, [r6, #48]	; 0x30
   15454:	ldr	r0, [r5]
   15458:	str	r7, [r6, #40]	; 0x28
   1545c:	str	r0, [r6, #4]
   15460:	ldrd	r0, [r8]
   15464:	strd	r0, [r4, #48]	; 0x30
   15468:	ldrb	r0, [r5, #48]	; 0x30
   1546c:	tst	r0, #4
   15470:	bne	1547c <__assert_fail@plt+0x3f94>
   15474:	str	sl, [r6, #24]
   15478:	b	15498 <__assert_fail@plt+0x3fb0>
   1547c:	ldr	r0, [r6, #28]
   15480:	ldr	r1, [r6, #52]	; 0x34
   15484:	str	r0, [r6, #24]
   15488:	ldr	r0, [sp, #40]	; 0x28
   1548c:	add	r2, r1, #1
   15490:	mov	r1, sl
   15494:	bl	11224 <memmove@plt>
   15498:	ldr	r0, [r5, #44]	; 0x2c
   1549c:	ldr	r7, [fp, #-40]	; 0xffffffd8
   154a0:	ldr	r2, [r5, #48]	; 0x30
   154a4:	ldr	sl, [sp, #28]
   154a8:	cmp	r0, #0
   154ac:	beq	154d0 <__assert_fail@plt+0x3fe8>
   154b0:	ands	r0, r2, #1024	; 0x400
   154b4:	bne	154d0 <__assert_fail@plt+0x3fe8>
   154b8:	mov	r0, r5
   154bc:	mov	r1, r6
   154c0:	mov	r2, #0
   154c4:	bl	14040 <__assert_fail@plt+0x2b58>
   154c8:	strh	r0, [r6, #56]	; 0x38
   154cc:	b	15544 <__assert_fail@plt+0x405c>
   154d0:	ldrb	r3, [r8, #18]
   154d4:	mov	r0, #0
   154d8:	tst	r2, #8
   154dc:	mov	r1, #0
   154e0:	beq	15504 <__assert_fail@plt+0x401c>
   154e4:	orr	r1, r3, #4
   154e8:	cmp	r1, #4
   154ec:	mov	r1, #0
   154f0:	beq	15504 <__assert_fail@plt+0x401c>
   154f4:	eor	r1, r3, #10
   154f8:	and	r2, r2, #16
   154fc:	orrs	r1, r2, r1
   15500:	movwne	r1, #1
   15504:	mov	r2, #11
   15508:	strh	r2, [r6, #56]	; 0x38
   1550c:	sub	r2, r3, #1
   15510:	uxtb	r3, r2
   15514:	cmp	r3, #11
   15518:	bhi	1552c <__assert_fail@plt+0x4044>
   1551c:	sxtb	r0, r2
   15520:	movw	r2, #47372	; 0xb90c
   15524:	movt	r2, #1
   15528:	ldr	r0, [r2, r0, lsl #2]
   1552c:	cmp	r1, #0
   15530:	str	r0, [r6, #80]	; 0x50
   15534:	mov	r0, #2
   15538:	mov	r1, #0
   1553c:	movwne	r0, #1
   15540:	strd	r0, [r4]
   15544:	mov	r4, #0
   15548:	cmp	r9, #0
   1554c:	str	r4, [r6, #8]
   15550:	beq	15560 <__assert_fail@plt+0x4078>
   15554:	ldr	r0, [sp, #44]	; 0x2c
   15558:	str	r6, [r0, #8]
   1555c:	b	15564 <__assert_fail@plt+0x407c>
   15560:	mov	r9, r6
   15564:	movw	r0, #10000	; 0x2710
   15568:	cmp	r7, r0
   1556c:	bne	155c0 <__assert_fail@plt+0x40d8>
   15570:	ldr	r0, [sp, #20]
   15574:	ldr	r0, [r0]
   15578:	cmp	r0, #0
   1557c:	bne	155c0 <__assert_fail@plt+0x40d8>
   15580:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15584:	mov	r0, sl
   15588:	bl	15dec <__assert_fail@plt+0x4904>
   1558c:	mov	r1, #0
   15590:	str	r1, [sp, #8]
   15594:	movw	r1, #19778	; 0x4d42
   15598:	movt	r1, #65363	; 0xff53
   1559c:	cmp	r0, r1
   155a0:	movwne	r1, #26985	; 0x6969
   155a4:	cmpne	r0, r1
   155a8:	beq	155c0 <__assert_fail@plt+0x40d8>
   155ac:	movw	r1, #6548	; 0x1994
   155b0:	movt	r1, #258	; 0x102
   155b4:	cmp	r0, r1
   155b8:	movne	r0, #1
   155bc:	strne	r0, [sp, #8]
   155c0:	ldr	r0, [sp, #32]
   155c4:	add	r7, r7, #1
   155c8:	cmp	r0, r7
   155cc:	bls	155e0 <__assert_fail@plt+0x40f8>
   155d0:	str	r6, [sp, #44]	; 0x2c
   155d4:	ldr	r6, [sl, #12]
   155d8:	cmp	r6, #0
   155dc:	bne	152e8 <__assert_fail@plt+0x3e00>
   155e0:	ldr	r0, [sp, #16]
   155e4:	ldr	ip, [sp]
   155e8:	ldr	r4, [sp, #8]
   155ec:	tst	r0, #1
   155f0:	bne	15658 <__assert_fail@plt+0x4170>
   155f4:	b	156f8 <__assert_fail@plt+0x4210>
   155f8:	mov	r7, #0
   155fc:	mov	r4, #0
   15600:	b	156f8 <__assert_fail@plt+0x4210>
   15604:	ldr	r0, [sp, #36]	; 0x24
   15608:	ldr	r0, [r0]
   1560c:	cmp	r0, #0
   15610:	beq	1562c <__assert_fail@plt+0x4144>
   15614:	str	r0, [sl, #32]
   15618:	ldr	r0, [sp, #12]
   1561c:	orrs	r0, r0, r7
   15620:	mov	r0, #4
   15624:	movwne	r0, #7
   15628:	strh	r0, [sl, #56]	; 0x38
   1562c:	ldr	r0, [sl, #12]
   15630:	ldr	r4, [sp, #8]
   15634:	cmp	r0, #0
   15638:	beq	15648 <__assert_fail@plt+0x4160>
   1563c:	bl	114d0 <closedir@plt>
   15640:	mov	r0, #0
   15644:	str	r0, [sl, #12]
   15648:	ldr	r0, [sp, #16]
   1564c:	ldr	ip, [sp]
   15650:	tst	r0, #1
   15654:	beq	156f8 <__assert_fail@plt+0x4210>
   15658:	ldr	r1, [r5, #4]
   1565c:	ldr	r0, [r5, #24]
   15660:	cmp	r1, #0
   15664:	bne	1567c <__assert_fail@plt+0x4194>
   15668:	b	156a0 <__assert_fail@plt+0x41b8>
   1566c:	str	r0, [r1, #28]
   15670:	ldr	r1, [r1, #8]
   15674:	cmp	r1, #0
   15678:	beq	156a0 <__assert_fail@plt+0x41b8>
   1567c:	ldr	r2, [r1, #24]
   15680:	add	r3, r1, #168	; 0xa8
   15684:	cmp	r2, r3
   15688:	beq	1566c <__assert_fail@plt+0x4184>
   1568c:	ldr	r3, [r1, #28]
   15690:	sub	r2, r2, r3
   15694:	add	r2, r0, r2
   15698:	str	r2, [r1, #24]
   1569c:	b	1566c <__assert_fail@plt+0x4184>
   156a0:	ldr	r1, [r9, #48]	; 0x30
   156a4:	cmp	r1, #0
   156a8:	bmi	156f8 <__assert_fail@plt+0x4210>
   156ac:	mov	r1, r9
   156b0:	b	156d4 <__assert_fail@plt+0x41ec>
   156b4:	str	r0, [r1, #28]
   156b8:	ldr	r2, [r1, #8]
   156bc:	cmp	r2, #0
   156c0:	ldreq	r2, [r1, #4]
   156c4:	ldr	r1, [r2, #48]	; 0x30
   156c8:	cmn	r1, #1
   156cc:	mov	r1, r2
   156d0:	ble	156f8 <__assert_fail@plt+0x4210>
   156d4:	ldr	r2, [r1, #24]
   156d8:	add	r3, r1, #168	; 0xa8
   156dc:	cmp	r2, r3
   156e0:	beq	156b4 <__assert_fail@plt+0x41cc>
   156e4:	ldr	r3, [r1, #28]
   156e8:	sub	r2, r2, r3
   156ec:	add	r2, r0, r2
   156f0:	str	r2, [r1, #24]
   156f4:	b	156b4 <__assert_fail@plt+0x41cc>
   156f8:	ldrb	r0, [r5, #48]	; 0x30
   156fc:	tst	r0, #4
   15700:	beq	1572c <__assert_fail@plt+0x4244>
   15704:	ldr	r2, [sp, #40]	; 0x28
   15708:	ldr	r0, [r5, #36]	; 0x24
   1570c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   15710:	cmp	r3, r0
   15714:	sub	r1, r2, #1
   15718:	mov	r0, #0
   1571c:	moveq	r2, r1
   15720:	cmp	r7, #0
   15724:	moveq	r2, r1
   15728:	strb	r0, [r2]
   1572c:	ldr	r0, [sp, #12]
   15730:	cmp	r0, #0
   15734:	movwne	r0, #1
   15738:	orrs	r0, r0, ip
   1573c:	beq	157a4 <__assert_fail@plt+0x42bc>
   15740:	cmp	r7, #0
   15744:	bne	157e4 <__assert_fail@plt+0x42fc>
   15748:	ldr	r0, [sp, #4]
   1574c:	cmp	r0, #3
   15750:	bne	15768 <__assert_fail@plt+0x4280>
   15754:	ldrh	r0, [sl, #56]	; 0x38
   15758:	cmp	r0, #4
   1575c:	cmpne	r0, #7
   15760:	movne	r0, #6
   15764:	strhne	r0, [sl, #56]	; 0x38
   15768:	mov	r6, #0
   1576c:	cmp	r9, #0
   15770:	bne	1578c <__assert_fail@plt+0x42a4>
   15774:	b	159d8 <__assert_fail@plt+0x44f0>
   15778:	mov	r0, r9
   1577c:	bl	13a78 <__assert_fail@plt+0x2590>
   15780:	cmp	r4, #0
   15784:	mov	r9, r4
   15788:	beq	159d8 <__assert_fail@plt+0x44f0>
   1578c:	ldrd	r4, [r9, #8]
   15790:	cmp	r5, #0
   15794:	beq	15778 <__assert_fail@plt+0x4290>
   15798:	mov	r0, r5
   1579c:	bl	114d0 <closedir@plt>
   157a0:	b	15778 <__assert_fail@plt+0x4290>
   157a4:	ldr	r0, [sp, #4]
   157a8:	cmp	r0, #1
   157ac:	cmpne	r7, #0
   157b0:	bne	157e4 <__assert_fail@plt+0x42fc>
   157b4:	ldr	r0, [sl, #48]	; 0x30
   157b8:	cmp	r0, #0
   157bc:	beq	158cc <__assert_fail@plt+0x43e4>
   157c0:	ldr	r1, [sl, #4]
   157c4:	movw	r3, #46383	; 0xb52f
   157c8:	mov	r0, r5
   157cc:	mvn	r2, #0
   157d0:	movt	r3, #1
   157d4:	bl	14cf4 <__assert_fail@plt+0x380c>
   157d8:	cmp	r0, #0
   157dc:	bne	158dc <__assert_fail@plt+0x43f4>
   157e0:	b	15740 <__assert_fail@plt+0x4258>
   157e4:	tst	r4, #1
   157e8:	beq	15818 <__assert_fail@plt+0x4330>
   157ec:	movw	r0, #23988	; 0x5db4
   157f0:	mov	r1, r9
   157f4:	mov	r2, r7
   157f8:	movt	r0, #1
   157fc:	str	r0, [r5, #44]	; 0x2c
   15800:	mov	r0, r5
   15804:	bl	141d8 <__assert_fail@plt+0x2cf0>
   15808:	mov	r6, r0
   1580c:	mov	r0, #0
   15810:	str	r0, [r5, #44]	; 0x2c
   15814:	b	159d8 <__assert_fail@plt+0x44f0>
   15818:	cmp	r7, #2
   1581c:	bcc	15848 <__assert_fail@plt+0x4360>
   15820:	ldr	r0, [sp, #20]
   15824:	ldr	r0, [r0]
   15828:	cmp	r0, #0
   1582c:	beq	15848 <__assert_fail@plt+0x4360>
   15830:	mov	r0, r5
   15834:	mov	r1, r9
   15838:	mov	r2, r7
   1583c:	bl	141d8 <__assert_fail@plt+0x2cf0>
   15840:	mov	r6, r0
   15844:	b	159d8 <__assert_fail@plt+0x44f0>
   15848:	mov	r6, r9
   1584c:	b	159d8 <__assert_fail@plt+0x44f0>
   15850:	mov	r0, r6
   15854:	bl	13a78 <__assert_fail@plt+0x2590>
   15858:	ldr	r7, [sp, #28]
   1585c:	cmp	r9, #0
   15860:	bne	1587c <__assert_fail@plt+0x4394>
   15864:	b	15894 <__assert_fail@plt+0x43ac>
   15868:	mov	r0, r9
   1586c:	bl	13a78 <__assert_fail@plt+0x2590>
   15870:	cmp	r4, #0
   15874:	mov	r9, r4
   15878:	beq	15894 <__assert_fail@plt+0x43ac>
   1587c:	ldrd	r4, [r9, #8]
   15880:	cmp	r5, #0
   15884:	beq	15868 <__assert_fail@plt+0x4380>
   15888:	mov	r0, r5
   1588c:	bl	114d0 <closedir@plt>
   15890:	b	15868 <__assert_fail@plt+0x4380>
   15894:	ldr	r0, [r7, #12]
   15898:	bl	114d0 <closedir@plt>
   1589c:	ldr	r1, [sp, #48]	; 0x30
   158a0:	mov	r0, #7
   158a4:	mov	r6, #0
   158a8:	strh	r0, [r7, #56]	; 0x38
   158ac:	str	r6, [r7, #12]
   158b0:	ldr	r0, [r1, #48]	; 0x30
   158b4:	orr	r0, r0, #8192	; 0x2000
   158b8:	str	r0, [r1, #48]	; 0x30
   158bc:	ldr	r1, [sp, #36]	; 0x24
   158c0:	mov	r0, #36	; 0x24
   158c4:	str	r0, [r1]
   158c8:	b	159d8 <__assert_fail@plt+0x44f0>
   158cc:	mov	r0, r5
   158d0:	bl	159e4 <__assert_fail@plt+0x44fc>
   158d4:	cmp	r0, #0
   158d8:	beq	15740 <__assert_fail@plt+0x4258>
   158dc:	mov	r0, #7
   158e0:	mov	r6, #0
   158e4:	cmp	r9, #0
   158e8:	strh	r0, [sl, #56]	; 0x38
   158ec:	ldr	r0, [r5, #48]	; 0x30
   158f0:	orr	r0, r0, #8192	; 0x2000
   158f4:	str	r0, [r5, #48]	; 0x30
   158f8:	bne	15914 <__assert_fail@plt+0x442c>
   158fc:	b	159d8 <__assert_fail@plt+0x44f0>
   15900:	mov	r0, r9
   15904:	bl	13a78 <__assert_fail@plt+0x2590>
   15908:	cmp	r4, #0
   1590c:	mov	r9, r4
   15910:	beq	159d8 <__assert_fail@plt+0x44f0>
   15914:	ldrd	r4, [r9, #8]
   15918:	cmp	r5, #0
   1591c:	beq	15900 <__assert_fail@plt+0x4418>
   15920:	mov	r0, r5
   15924:	bl	114d0 <closedir@plt>
   15928:	b	15900 <__assert_fail@plt+0x4418>
   1592c:	mov	r0, r4
   15930:	bl	13a78 <__assert_fail@plt+0x2590>
   15934:	ldr	r1, [sp, #36]	; 0x24
   15938:	mov	r0, #0
   1593c:	str	r0, [r5, #24]
   15940:	mov	r0, #36	; 0x24
   15944:	str	r0, [r1]
   15948:	b	1595c <__assert_fail@plt+0x4474>
   1594c:	ldr	r0, [r5, #24]
   15950:	bl	13a78 <__assert_fail@plt+0x2590>
   15954:	mov	r0, #0
   15958:	str	r0, [r5, #24]
   1595c:	ldr	sl, [sp, #28]
   15960:	ldr	r0, [sp, #36]	; 0x24
   15964:	ldr	r4, [r0]
   15968:	mov	r0, r6
   1596c:	bl	13a78 <__assert_fail@plt+0x2590>
   15970:	ldr	r5, [sp, #48]	; 0x30
   15974:	cmp	r9, #0
   15978:	bne	15994 <__assert_fail@plt+0x44ac>
   1597c:	b	159ac <__assert_fail@plt+0x44c4>
   15980:	mov	r0, r9
   15984:	bl	13a78 <__assert_fail@plt+0x2590>
   15988:	cmp	r6, #0
   1598c:	mov	r9, r6
   15990:	beq	159ac <__assert_fail@plt+0x44c4>
   15994:	ldrd	r6, [r9, #8]
   15998:	cmp	r7, #0
   1599c:	beq	15980 <__assert_fail@plt+0x4498>
   159a0:	mov	r0, r7
   159a4:	bl	114d0 <closedir@plt>
   159a8:	b	15980 <__assert_fail@plt+0x4498>
   159ac:	ldr	r0, [sl, #12]
   159b0:	bl	114d0 <closedir@plt>
   159b4:	mov	r0, #7
   159b8:	mov	r6, #0
   159bc:	strh	r0, [sl, #56]	; 0x38
   159c0:	str	r6, [sl, #12]
   159c4:	ldr	r0, [r5, #48]	; 0x30
   159c8:	orr	r0, r0, #8192	; 0x2000
   159cc:	str	r0, [r5, #48]	; 0x30
   159d0:	ldr	r0, [sp, #36]	; 0x24
   159d4:	str	r4, [r0]
   159d8:	mov	r0, r6
   159dc:	sub	sp, fp, #28
   159e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159e4:	push	{r4, r5, fp, lr}
   159e8:	add	fp, sp, #8
   159ec:	mov	r5, r0
   159f0:	ldr	r0, [r0, #48]	; 0x30
   159f4:	mov	r4, #0
   159f8:	tst	r0, #4
   159fc:	bne	15a40 <__assert_fail@plt+0x4558>
   15a00:	tst	r0, #512	; 0x200
   15a04:	bne	15a20 <__assert_fail@plt+0x4538>
   15a08:	ldr	r0, [r5, #28]
   15a0c:	bl	11458 <fchdir@plt>
   15a10:	cmp	r0, #0
   15a14:	mov	r4, r0
   15a18:	movwne	r4, #1
   15a1c:	b	15a40 <__assert_fail@plt+0x4558>
   15a20:	ldr	r1, [r5, #32]
   15a24:	add	r0, r5, #60	; 0x3c
   15a28:	bl	17264 <__assert_fail@plt+0x5d7c>
   15a2c:	cmp	r0, #0
   15a30:	bmi	15a38 <__assert_fail@plt+0x4550>
   15a34:	bl	114ac <close@plt>
   15a38:	mvn	r0, #99	; 0x63
   15a3c:	str	r0, [r5, #32]
   15a40:	add	r5, r5, #60	; 0x3c
   15a44:	mov	r0, r5
   15a48:	bl	1725c <__assert_fail@plt+0x5d74>
   15a4c:	cmp	r0, #0
   15a50:	bne	15a6c <__assert_fail@plt+0x4584>
   15a54:	mov	r0, r5
   15a58:	bl	172b0 <__assert_fail@plt+0x5dc8>
   15a5c:	cmp	r0, #0
   15a60:	bmi	15a44 <__assert_fail@plt+0x455c>
   15a64:	bl	114ac <close@plt>
   15a68:	b	15a44 <__assert_fail@plt+0x455c>
   15a6c:	mov	r0, r4
   15a70:	pop	{r4, r5, fp, pc}
   15a74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15a78:	add	fp, sp, #24
   15a7c:	mov	r6, r0
   15a80:	ldrh	r0, [r0, #48]	; 0x30
   15a84:	mov	r4, r1
   15a88:	add	r5, r1, #64	; 0x40
   15a8c:	movw	r1, #258	; 0x102
   15a90:	tst	r0, r1
   15a94:	beq	15b0c <__assert_fail@plt+0x4624>
   15a98:	mov	r0, #24
   15a9c:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   15aa0:	mov	r8, #0
   15aa4:	cmp	r0, #0
   15aa8:	beq	15b2c <__assert_fail@plt+0x4644>
   15aac:	ldrd	r2, [r5]
   15ab0:	mov	r7, r0
   15ab4:	add	r0, r4, #160	; 0xa0
   15ab8:	stm	r7, {r2, r3}
   15abc:	add	r2, r7, #8
   15ac0:	ldrd	r0, [r0]
   15ac4:	stm	r2, {r0, r1, r4}
   15ac8:	mov	r1, r7
   15acc:	ldr	r0, [r6, #56]	; 0x38
   15ad0:	bl	16f50 <__assert_fail@plt+0x5a68>
   15ad4:	cmp	r0, r7
   15ad8:	beq	15b00 <__assert_fail@plt+0x4618>
   15adc:	mov	r5, r0
   15ae0:	mov	r0, r7
   15ae4:	bl	13a78 <__assert_fail@plt+0x2590>
   15ae8:	cmp	r5, #0
   15aec:	beq	15b2c <__assert_fail@plt+0x4644>
   15af0:	ldr	r0, [r5, #16]
   15af4:	mov	r1, #2
   15af8:	strh	r1, [r4, #56]	; 0x38
   15afc:	str	r0, [r4]
   15b00:	mov	r8, #1
   15b04:	mov	r0, r8
   15b08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b0c:	ldr	r0, [r6, #56]	; 0x38
   15b10:	mov	r1, r5
   15b14:	bl	1a0dc <__assert_fail@plt+0x8bf4>
   15b18:	cmp	r0, #0
   15b1c:	mov	r8, #1
   15b20:	movne	r0, #2
   15b24:	strhne	r0, [r4, #56]	; 0x38
   15b28:	strne	r4, [r4]
   15b2c:	mov	r0, r8
   15b30:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15b34:	push	{fp, lr}
   15b38:	mov	fp, sp
   15b3c:	cmp	r2, #5
   15b40:	bcc	15b58 <__assert_fail@plt+0x4670>
   15b44:	bl	1138c <__errno_location@plt>
   15b48:	mov	r1, #22
   15b4c:	str	r1, [r0]
   15b50:	mov	r0, #1
   15b54:	pop	{fp, pc}
   15b58:	mov	r0, #0
   15b5c:	strh	r2, [r1, #60]	; 0x3c
   15b60:	pop	{fp, pc}
   15b64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b68:	add	fp, sp, #28
   15b6c:	sub	sp, sp, #4
   15b70:	mov	r9, r0
   15b74:	mvn	r0, #4096	; 0x1000
   15b78:	tst	r1, r0
   15b7c:	beq	15b94 <__assert_fail@plt+0x46ac>
   15b80:	bl	1138c <__errno_location@plt>
   15b84:	mov	r1, #22
   15b88:	mov	r5, #0
   15b8c:	str	r1, [r0]
   15b90:	b	15c94 <__assert_fail@plt+0x47ac>
   15b94:	ldr	r8, [r9]
   15b98:	mov	r7, r1
   15b9c:	bl	1138c <__errno_location@plt>
   15ba0:	mov	r5, #0
   15ba4:	mov	sl, r0
   15ba8:	str	r5, [r0]
   15bac:	ldrb	r0, [r9, #49]	; 0x31
   15bb0:	tst	r0, #32
   15bb4:	bne	15c94 <__assert_fail@plt+0x47ac>
   15bb8:	ldrh	r0, [r8, #56]	; 0x38
   15bbc:	cmp	r0, #1
   15bc0:	beq	15bd0 <__assert_fail@plt+0x46e8>
   15bc4:	cmp	r0, #9
   15bc8:	ldreq	r5, [r8, #8]
   15bcc:	b	15c94 <__assert_fail@plt+0x47ac>
   15bd0:	ldr	r6, [r9, #4]
   15bd4:	cmp	r6, #0
   15bd8:	bne	15bf4 <__assert_fail@plt+0x470c>
   15bdc:	b	15c10 <__assert_fail@plt+0x4728>
   15be0:	mov	r0, r6
   15be4:	bl	13a78 <__assert_fail@plt+0x2590>
   15be8:	cmp	r4, #0
   15bec:	mov	r6, r4
   15bf0:	beq	15c10 <__assert_fail@plt+0x4728>
   15bf4:	ldr	r1, [r6, #12]
   15bf8:	ldr	r4, [r6, #8]
   15bfc:	cmp	r1, #0
   15c00:	beq	15be0 <__assert_fail@plt+0x46f8>
   15c04:	mov	r0, r1
   15c08:	bl	114d0 <closedir@plt>
   15c0c:	b	15be0 <__assert_fail@plt+0x46f8>
   15c10:	mov	r4, #1
   15c14:	cmp	r7, #4096	; 0x1000
   15c18:	bne	15c2c <__assert_fail@plt+0x4744>
   15c1c:	ldr	r0, [r9, #48]	; 0x30
   15c20:	mov	r4, #2
   15c24:	orr	r0, r0, #4096	; 0x1000
   15c28:	str	r0, [r9, #48]	; 0x30
   15c2c:	ldr	r0, [r8, #48]	; 0x30
   15c30:	cmp	r0, #0
   15c34:	bne	15c80 <__assert_fail@plt+0x4798>
   15c38:	ldr	r0, [r8, #24]
   15c3c:	ldrb	r0, [r0]
   15c40:	cmp	r0, #47	; 0x2f
   15c44:	beq	15c80 <__assert_fail@plt+0x4798>
   15c48:	ldr	r0, [r9, #48]	; 0x30
   15c4c:	tst	r0, #4
   15c50:	bne	15c80 <__assert_fail@plt+0x4798>
   15c54:	mov	r1, #32768	; 0x8000
   15c58:	tst	r0, #512	; 0x200
   15c5c:	and	r1, r1, r0, lsl #11
   15c60:	orr	r1, r1, #18688	; 0x4900
   15c64:	orr	r2, r1, #524288	; 0x80000
   15c68:	bne	15ca0 <__assert_fail@plt+0x47b8>
   15c6c:	movw	r0, #46384	; 0xb530
   15c70:	mov	r1, r2
   15c74:	movt	r0, #1
   15c78:	bl	1a42c <__assert_fail@plt+0x8f44>
   15c7c:	b	15cb0 <__assert_fail@plt+0x47c8>
   15c80:	mov	r0, r9
   15c84:	mov	r1, r4
   15c88:	bl	14f54 <__assert_fail@plt+0x3a6c>
   15c8c:	mov	r5, r0
   15c90:	str	r0, [r9, #4]
   15c94:	mov	r0, r5
   15c98:	sub	sp, fp, #28
   15c9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca0:	ldr	r0, [r9, #32]
   15ca4:	movw	r1, #46384	; 0xb530
   15ca8:	movt	r1, #1
   15cac:	bl	17300 <__assert_fail@plt+0x5e18>
   15cb0:	mov	r8, r0
   15cb4:	cmn	r0, #1
   15cb8:	ble	15cfc <__assert_fail@plt+0x4814>
   15cbc:	mov	r0, r9
   15cc0:	mov	r1, r4
   15cc4:	bl	14f54 <__assert_fail@plt+0x3a6c>
   15cc8:	str	r0, [r9, #4]
   15ccc:	ldrb	r0, [r9, #49]	; 0x31
   15cd0:	tst	r0, #2
   15cd4:	bne	15d08 <__assert_fail@plt+0x4820>
   15cd8:	mov	r0, r8
   15cdc:	bl	11458 <fchdir@plt>
   15ce0:	cmp	r0, #0
   15ce4:	beq	15d38 <__assert_fail@plt+0x4850>
   15ce8:	ldr	r4, [sl]
   15cec:	mov	r0, r8
   15cf0:	bl	114ac <close@plt>
   15cf4:	str	r4, [sl]
   15cf8:	b	15c94 <__assert_fail@plt+0x47ac>
   15cfc:	mov	r5, #0
   15d00:	str	r5, [r9, #4]
   15d04:	b	15c94 <__assert_fail@plt+0x47ac>
   15d08:	ldr	r1, [r9, #32]
   15d0c:	cmp	r1, r8
   15d10:	bne	15d1c <__assert_fail@plt+0x4834>
   15d14:	cmn	r1, #100	; 0x64
   15d18:	bne	15d48 <__assert_fail@plt+0x4860>
   15d1c:	add	r0, r9, #60	; 0x3c
   15d20:	bl	17264 <__assert_fail@plt+0x5d7c>
   15d24:	cmp	r0, #0
   15d28:	bmi	15d30 <__assert_fail@plt+0x4848>
   15d2c:	bl	114ac <close@plt>
   15d30:	str	r8, [r9, #32]
   15d34:	b	15d40 <__assert_fail@plt+0x4858>
   15d38:	mov	r0, r8
   15d3c:	bl	114ac <close@plt>
   15d40:	ldr	r5, [r9, #4]
   15d44:	b	15c94 <__assert_fail@plt+0x47ac>
   15d48:	bl	114a0 <abort@plt>
   15d4c:	push	{fp, lr}
   15d50:	mov	fp, sp
   15d54:	mov	r2, r1
   15d58:	ldrd	r0, [r0, #8]
   15d5c:	mov	r3, #0
   15d60:	bl	1a658 <__assert_fail@plt+0x9170>
   15d64:	mov	r0, r2
   15d68:	pop	{fp, pc}
   15d6c:	push	{r4, r5, fp, lr}
   15d70:	add	fp, sp, #8
   15d74:	ldrd	r2, [r1, #8]
   15d78:	ldrd	r4, [r0, #8]
   15d7c:	eor	r3, r5, r3
   15d80:	eor	r2, r4, r2
   15d84:	orrs	r2, r2, r3
   15d88:	mov	r2, #0
   15d8c:	bne	15dac <__assert_fail@plt+0x48c4>
   15d90:	ldrd	r2, [r1]
   15d94:	ldrd	r0, [r0]
   15d98:	eor	r1, r1, r3
   15d9c:	eor	r0, r0, r2
   15da0:	orr	r0, r0, r1
   15da4:	clz	r0, r0
   15da8:	lsr	r2, r0, #5
   15dac:	mov	r0, r2
   15db0:	pop	{r4, r5, fp, pc}
   15db4:	push	{r4, r5, fp, lr}
   15db8:	add	fp, sp, #8
   15dbc:	ldr	r0, [r0]
   15dc0:	ldrd	r2, [r0, #160]	; 0xa0
   15dc4:	ldr	r0, [r1]
   15dc8:	ldrd	r4, [r0, #160]	; 0xa0
   15dcc:	mov	r0, #0
   15dd0:	subs	r1, r4, r2
   15dd4:	sbcs	r1, r5, r3
   15dd8:	movwcc	r0, #1
   15ddc:	subs	r1, r2, r4
   15de0:	sbcs	r1, r3, r5
   15de4:	subcc	r0, r0, #1
   15de8:	pop	{r4, r5, fp, pc}
   15dec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15df0:	add	fp, sp, #24
   15df4:	sub	sp, sp, #96	; 0x60
   15df8:	ldr	r7, [r0, #44]	; 0x2c
   15dfc:	mov	r4, r0
   15e00:	mov	r5, #0
   15e04:	ldrb	r0, [r7, #49]	; 0x31
   15e08:	tst	r0, #2
   15e0c:	beq	15f08 <__assert_fail@plt+0x4a20>
   15e10:	ldr	r6, [r7, #52]	; 0x34
   15e14:	mov	r9, r1
   15e18:	cmp	r6, #0
   15e1c:	bne	15e5c <__assert_fail@plt+0x4974>
   15e20:	movw	r0, #14968	; 0x3a78
   15e24:	movw	r2, #24340	; 0x5f14
   15e28:	movw	r3, #24372	; 0x5f34
   15e2c:	mov	r1, #0
   15e30:	mov	r8, #0
   15e34:	movt	r0, #1
   15e38:	movt	r2, #1
   15e3c:	movt	r3, #1
   15e40:	str	r0, [sp]
   15e44:	mov	r0, #13
   15e48:	bl	163fc <__assert_fail@plt+0x4f14>
   15e4c:	mov	r6, r0
   15e50:	cmp	r0, #0
   15e54:	str	r0, [r7, #52]	; 0x34
   15e58:	beq	15e94 <__assert_fail@plt+0x49ac>
   15e5c:	ldrd	r0, [r4, #64]	; 0x40
   15e60:	str	r1, [sp, #12]
   15e64:	str	r0, [sp, #8]
   15e68:	add	r1, sp, #8
   15e6c:	mov	r0, r6
   15e70:	bl	16148 <__assert_fail@plt+0x4c60>
   15e74:	cmp	r0, #0
   15e78:	beq	15e84 <__assert_fail@plt+0x499c>
   15e7c:	ldr	r5, [r0, #8]
   15e80:	b	15f08 <__assert_fail@plt+0x4a20>
   15e84:	mov	r8, #1
   15e88:	cmp	r9, #0
   15e8c:	bpl	15ea0 <__assert_fail@plt+0x49b8>
   15e90:	b	15f08 <__assert_fail@plt+0x4a20>
   15e94:	mov	r6, #0
   15e98:	cmp	r9, #0
   15e9c:	bmi	15f08 <__assert_fail@plt+0x4a20>
   15ea0:	add	r1, sp, #8
   15ea4:	mov	r0, r9
   15ea8:	bl	111c4 <fstatfs64@plt>
   15eac:	cmp	r0, #0
   15eb0:	bne	15f08 <__assert_fail@plt+0x4a20>
   15eb4:	cmp	r8, #0
   15eb8:	beq	15f04 <__assert_fail@plt+0x4a1c>
   15ebc:	mov	r0, #16
   15ec0:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   15ec4:	cmp	r0, #0
   15ec8:	beq	15f04 <__assert_fail@plt+0x4a1c>
   15ecc:	mov	r5, r0
   15ed0:	ldrd	r0, [r4, #64]	; 0x40
   15ed4:	ldr	r2, [sp, #8]
   15ed8:	stm	r5, {r0, r1, r2}
   15edc:	mov	r0, r6
   15ee0:	mov	r1, r5
   15ee4:	bl	16f50 <__assert_fail@plt+0x5a68>
   15ee8:	cmp	r0, #0
   15eec:	beq	15efc <__assert_fail@plt+0x4a14>
   15ef0:	cmp	r0, r5
   15ef4:	beq	15f04 <__assert_fail@plt+0x4a1c>
   15ef8:	bl	114a0 <abort@plt>
   15efc:	mov	r0, r5
   15f00:	bl	13a78 <__assert_fail@plt+0x2590>
   15f04:	ldr	r5, [sp, #8]
   15f08:	mov	r0, r5
   15f0c:	sub	sp, fp, #24
   15f10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15f14:	push	{fp, lr}
   15f18:	mov	fp, sp
   15f1c:	mov	r2, r1
   15f20:	ldrd	r0, [r0]
   15f24:	mov	r3, #0
   15f28:	bl	1a658 <__assert_fail@plt+0x9170>
   15f2c:	mov	r0, r2
   15f30:	pop	{fp, pc}
   15f34:	ldrd	r2, [r1]
   15f38:	ldrd	r0, [r0]
   15f3c:	eor	r1, r1, r3
   15f40:	eor	r0, r0, r2
   15f44:	orr	r0, r0, r1
   15f48:	clz	r0, r0
   15f4c:	lsr	r0, r0, #5
   15f50:	bx	lr
   15f54:	andeq	r0, r0, r0
   15f58:	ldr	r0, [r0, #8]
   15f5c:	bx	lr
   15f60:	ldr	r0, [r0, #12]
   15f64:	bx	lr
   15f68:	ldr	r0, [r0, #16]
   15f6c:	bx	lr
   15f70:	ldm	r0, {r2, ip}
   15f74:	mov	r0, #0
   15f78:	cmp	r2, ip
   15f7c:	bxcs	lr
   15f80:	mov	r0, #0
   15f84:	b	15f94 <__assert_fail@plt+0x4aac>
   15f88:	add	r2, r2, #8
   15f8c:	cmp	r2, ip
   15f90:	bcs	15fc4 <__assert_fail@plt+0x4adc>
   15f94:	ldr	r1, [r2]
   15f98:	cmp	r1, #0
   15f9c:	beq	15f88 <__assert_fail@plt+0x4aa0>
   15fa0:	mov	r3, #0
   15fa4:	mov	r1, r2
   15fa8:	ldr	r1, [r1, #4]
   15fac:	add	r3, r3, #1
   15fb0:	cmp	r1, #0
   15fb4:	bne	15fa8 <__assert_fail@plt+0x4ac0>
   15fb8:	cmp	r3, r0
   15fbc:	movhi	r0, r3
   15fc0:	b	15f88 <__assert_fail@plt+0x4aa0>
   15fc4:	bx	lr
   15fc8:	push	{fp, lr}
   15fcc:	mov	fp, sp
   15fd0:	ldm	r0, {r3, ip}
   15fd4:	mov	lr, #0
   15fd8:	mov	r1, #0
   15fdc:	cmp	r3, ip
   15fe0:	bcs	16024 <__assert_fail@plt+0x4b3c>
   15fe4:	mov	r1, #0
   15fe8:	mov	lr, #0
   15fec:	b	15ffc <__assert_fail@plt+0x4b14>
   15ff0:	add	r3, r3, #8
   15ff4:	cmp	r3, ip
   15ff8:	bcs	16024 <__assert_fail@plt+0x4b3c>
   15ffc:	ldr	r2, [r3]
   16000:	cmp	r2, #0
   16004:	beq	15ff0 <__assert_fail@plt+0x4b08>
   16008:	mov	r2, r3
   1600c:	ldr	r2, [r2, #4]
   16010:	add	r1, r1, #1
   16014:	cmp	r2, #0
   16018:	bne	1600c <__assert_fail@plt+0x4b24>
   1601c:	add	lr, lr, #1
   16020:	b	15ff0 <__assert_fail@plt+0x4b08>
   16024:	ldr	r2, [r0, #12]
   16028:	cmp	lr, r2
   1602c:	bne	16044 <__assert_fail@plt+0x4b5c>
   16030:	ldr	r2, [r0, #16]
   16034:	mov	r0, #1
   16038:	cmp	r1, r2
   1603c:	movne	r0, #0
   16040:	pop	{fp, pc}
   16044:	mov	r0, #0
   16048:	pop	{fp, pc}
   1604c:	nop	{0}
   16050:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16054:	add	fp, sp, #24
   16058:	sub	sp, sp, #8
   1605c:	ldr	r6, [r0]
   16060:	ldmib	r0, {r2, r7, r8}
   16064:	ldr	r3, [r0, #16]
   16068:	mov	r4, r1
   1606c:	mov	r5, #0
   16070:	cmp	r6, r2
   16074:	bcs	160bc <__assert_fail@plt+0x4bd4>
   16078:	mov	r5, #0
   1607c:	b	1608c <__assert_fail@plt+0x4ba4>
   16080:	add	r6, r6, #8
   16084:	cmp	r6, r2
   16088:	bcs	160bc <__assert_fail@plt+0x4bd4>
   1608c:	ldr	r0, [r6]
   16090:	cmp	r0, #0
   16094:	beq	16080 <__assert_fail@plt+0x4b98>
   16098:	mov	r0, #0
   1609c:	mov	r1, r6
   160a0:	ldr	r1, [r1, #4]
   160a4:	add	r0, r0, #1
   160a8:	cmp	r1, #0
   160ac:	bne	160a0 <__assert_fail@plt+0x4bb8>
   160b0:	cmp	r0, r5
   160b4:	movhi	r5, r0
   160b8:	b	16080 <__assert_fail@plt+0x4b98>
   160bc:	movw	r2, #47420	; 0xb93c
   160c0:	mov	r0, r4
   160c4:	mov	r1, #1
   160c8:	movt	r2, #1
   160cc:	bl	113c8 <__fprintf_chk@plt>
   160d0:	movw	r2, #47444	; 0xb954
   160d4:	mov	r0, r4
   160d8:	mov	r1, #1
   160dc:	mov	r3, r7
   160e0:	movt	r2, #1
   160e4:	bl	113c8 <__fprintf_chk@plt>
   160e8:	vmov	s0, r8
   160ec:	vldr	d16, [pc, #76]	; 16140 <__assert_fail@plt+0x4c58>
   160f0:	movw	r2, #47468	; 0xb96c
   160f4:	mov	r0, r4
   160f8:	mov	r1, #1
   160fc:	mov	r3, r8
   16100:	movt	r2, #1
   16104:	vcvt.f64.u32	d17, s0
   16108:	vmov	s0, r7
   1610c:	vcvt.f64.u32	d18, s0
   16110:	vmul.f64	d16, d17, d16
   16114:	vdiv.f64	d16, d16, d18
   16118:	vstr	d16, [sp]
   1611c:	bl	113c8 <__fprintf_chk@plt>
   16120:	movw	r2, #47501	; 0xb98d
   16124:	mov	r0, r4
   16128:	mov	r1, #1
   1612c:	mov	r3, r5
   16130:	movt	r2, #1
   16134:	sub	sp, fp, #24
   16138:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1613c:	b	113c8 <__fprintf_chk@plt>
   16140:	andeq	r0, r0, r0
   16144:	subsmi	r0, r9, r0
   16148:	push	{r4, r5, r6, r7, fp, lr}
   1614c:	add	fp, sp, #16
   16150:	mov	r4, r1
   16154:	ldr	r1, [r0, #8]
   16158:	ldr	r2, [r0, #24]
   1615c:	mov	r5, r0
   16160:	mov	r0, r4
   16164:	blx	r2
   16168:	ldr	r1, [r5, #8]
   1616c:	cmp	r0, r1
   16170:	bcs	161d8 <__assert_fail@plt+0x4cf0>
   16174:	ldr	r7, [r5]
   16178:	mov	r6, #0
   1617c:	ldr	r1, [r7, r0, lsl #3]!
   16180:	cmp	r1, #0
   16184:	cmpne	r7, #0
   16188:	bne	161b8 <__assert_fail@plt+0x4cd0>
   1618c:	mov	r0, r6
   16190:	pop	{r4, r5, r6, r7, fp, pc}
   16194:	ldr	r2, [r5, #28]
   16198:	mov	r0, r4
   1619c:	blx	r2
   161a0:	cmp	r0, #0
   161a4:	bne	161cc <__assert_fail@plt+0x4ce4>
   161a8:	ldr	r7, [r7, #4]
   161ac:	cmp	r7, #0
   161b0:	beq	1618c <__assert_fail@plt+0x4ca4>
   161b4:	ldr	r1, [r7]
   161b8:	cmp	r1, r4
   161bc:	bne	16194 <__assert_fail@plt+0x4cac>
   161c0:	mov	r6, r4
   161c4:	mov	r0, r6
   161c8:	pop	{r4, r5, r6, r7, fp, pc}
   161cc:	ldr	r6, [r7]
   161d0:	mov	r0, r6
   161d4:	pop	{r4, r5, r6, r7, fp, pc}
   161d8:	bl	114a0 <abort@plt>
   161dc:	push	{fp, lr}
   161e0:	mov	fp, sp
   161e4:	ldr	r1, [r0, #16]
   161e8:	cmp	r1, #0
   161ec:	beq	1620c <__assert_fail@plt+0x4d24>
   161f0:	ldm	r0, {r1, r2}
   161f4:	cmp	r1, r2
   161f8:	bcs	16214 <__assert_fail@plt+0x4d2c>
   161fc:	ldr	r0, [r1], #8
   16200:	cmp	r0, #0
   16204:	beq	161f4 <__assert_fail@plt+0x4d0c>
   16208:	pop	{fp, pc}
   1620c:	mov	r0, #0
   16210:	pop	{fp, pc}
   16214:	bl	114a0 <abort@plt>
   16218:	push	{r4, r5, fp, lr}
   1621c:	add	fp, sp, #8
   16220:	mov	r5, r1
   16224:	ldr	r1, [r0, #8]
   16228:	ldr	r2, [r0, #24]
   1622c:	mov	r4, r0
   16230:	mov	r0, r5
   16234:	blx	r2
   16238:	ldr	r1, [r4, #8]
   1623c:	cmp	r0, r1
   16240:	bcs	162a4 <__assert_fail@plt+0x4dbc>
   16244:	ldr	r1, [r4]
   16248:	add	r2, r1, r0, lsl #3
   1624c:	ldr	r3, [r2]
   16250:	ldr	r2, [r2, #4]
   16254:	cmp	r3, r5
   16258:	beq	16268 <__assert_fail@plt+0x4d80>
   1625c:	cmp	r2, #0
   16260:	bne	1624c <__assert_fail@plt+0x4d64>
   16264:	b	16278 <__assert_fail@plt+0x4d90>
   16268:	cmp	r2, #0
   1626c:	beq	16278 <__assert_fail@plt+0x4d90>
   16270:	ldr	r0, [r2]
   16274:	pop	{r4, r5, fp, pc}
   16278:	ldr	r2, [r4, #4]
   1627c:	add	r0, r1, r0, lsl #3
   16280:	add	r1, r0, #8
   16284:	cmp	r1, r2
   16288:	bcs	1629c <__assert_fail@plt+0x4db4>
   1628c:	ldr	r0, [r1], #8
   16290:	cmp	r0, #0
   16294:	beq	16284 <__assert_fail@plt+0x4d9c>
   16298:	pop	{r4, r5, fp, pc}
   1629c:	mov	r0, #0
   162a0:	pop	{r4, r5, fp, pc}
   162a4:	bl	114a0 <abort@plt>
   162a8:	push	{r4, r5, fp, lr}
   162ac:	add	fp, sp, #8
   162b0:	ldm	r0, {r5, lr}
   162b4:	mov	ip, r0
   162b8:	mov	r0, #0
   162bc:	cmp	r5, lr
   162c0:	popcs	{r4, r5, fp, pc}
   162c4:	mov	r0, #0
   162c8:	b	162dc <__assert_fail@plt+0x4df4>
   162cc:	ldr	lr, [ip, #4]
   162d0:	add	r5, r5, #8
   162d4:	cmp	r5, lr
   162d8:	bcs	16314 <__assert_fail@plt+0x4e2c>
   162dc:	ldr	r3, [r5]
   162e0:	cmp	r3, #0
   162e4:	cmpne	r5, #0
   162e8:	beq	162d0 <__assert_fail@plt+0x4de8>
   162ec:	mov	r3, r5
   162f0:	cmp	r0, r2
   162f4:	bcs	16314 <__assert_fail@plt+0x4e2c>
   162f8:	ldr	r4, [r3]
   162fc:	str	r4, [r1, r0, lsl #2]
   16300:	add	r0, r0, #1
   16304:	ldr	r3, [r3, #4]
   16308:	cmp	r3, #0
   1630c:	bne	162f0 <__assert_fail@plt+0x4e08>
   16310:	b	162cc <__assert_fail@plt+0x4de4>
   16314:	pop	{r4, r5, fp, pc}
   16318:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1631c:	add	fp, sp, #24
   16320:	mov	r5, r1
   16324:	ldr	r4, [r0]
   16328:	ldr	r1, [r0, #4]
   1632c:	mov	r6, #0
   16330:	cmp	r4, r1
   16334:	bcs	163a0 <__assert_fail@plt+0x4eb8>
   16338:	mov	r9, r2
   1633c:	mov	r8, r0
   16340:	mov	r6, #0
   16344:	b	16358 <__assert_fail@plt+0x4e70>
   16348:	ldr	r1, [r8, #4]
   1634c:	add	r4, r4, #8
   16350:	cmp	r4, r1
   16354:	bcs	163a0 <__assert_fail@plt+0x4eb8>
   16358:	ldr	r0, [r4]
   1635c:	cmp	r0, #0
   16360:	cmpne	r4, #0
   16364:	beq	1634c <__assert_fail@plt+0x4e64>
   16368:	mov	r1, r9
   1636c:	blx	r5
   16370:	cmp	r0, #0
   16374:	beq	163a0 <__assert_fail@plt+0x4eb8>
   16378:	mov	r7, r4
   1637c:	ldr	r7, [r7, #4]
   16380:	add	r6, r6, #1
   16384:	cmp	r7, #0
   16388:	beq	16348 <__assert_fail@plt+0x4e60>
   1638c:	ldr	r0, [r7]
   16390:	mov	r1, r9
   16394:	blx	r5
   16398:	cmp	r0, #0
   1639c:	bne	1637c <__assert_fail@plt+0x4e94>
   163a0:	mov	r0, r6
   163a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   163a8:	ldrb	r2, [r0]
   163ac:	cmp	r2, #0
   163b0:	moveq	r0, #0
   163b4:	bxeq	lr
   163b8:	add	r3, r0, #1
   163bc:	mov	r0, #0
   163c0:	rsb	r0, r0, r0, lsl #5
   163c4:	uxtab	r0, r0, r2
   163c8:	udiv	r2, r0, r1
   163cc:	mls	r0, r2, r1, r0
   163d0:	ldrb	r2, [r3], #1
   163d4:	cmp	r2, #0
   163d8:	bne	163c0 <__assert_fail@plt+0x4ed8>
   163dc:	bx	lr
   163e0:	movw	r1, #47528	; 0xb9a8
   163e4:	movt	r1, #1
   163e8:	vld1.32	{d16-d17}, [r1]!
   163ec:	ldr	r1, [r1]
   163f0:	vst1.32	{d16-d17}, [r0]!
   163f4:	str	r1, [r0]
   163f8:	bx	lr
   163fc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16400:	add	fp, sp, #24
   16404:	movw	r9, #26148	; 0x6624
   16408:	cmp	r3, #0
   1640c:	movw	r5, #26128	; 0x6610
   16410:	mov	r6, r0
   16414:	mov	r0, #40	; 0x28
   16418:	mov	r7, r1
   1641c:	movt	r9, #1
   16420:	movne	r9, r3
   16424:	cmp	r2, #0
   16428:	movt	r5, #1
   1642c:	movne	r5, r2
   16430:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   16434:	mov	r8, #0
   16438:	cmp	r0, #0
   1643c:	beq	165f8 <__assert_fail@plt+0x5110>
   16440:	mov	r4, r0
   16444:	movw	r0, #47528	; 0xb9a8
   16448:	cmp	r7, #0
   1644c:	movt	r0, #1
   16450:	moveq	r7, r0
   16454:	cmp	r7, r0
   16458:	str	r7, [r4, #20]
   1645c:	beq	164d8 <__assert_fail@plt+0x4ff0>
   16460:	vldr	s2, [pc, #408]	; 16600 <__assert_fail@plt+0x5118>
   16464:	vldr	s0, [r7, #8]
   16468:	vcmpe.f32	s0, s2
   1646c:	vmrs	APSR_nzcv, fpscr
   16470:	ble	16584 <__assert_fail@plt+0x509c>
   16474:	vldr	s4, [pc, #392]	; 16604 <__assert_fail@plt+0x511c>
   16478:	vcmpe.f32	s0, s4
   1647c:	vmrs	APSR_nzcv, fpscr
   16480:	bpl	16584 <__assert_fail@plt+0x509c>
   16484:	vldr	s4, [pc, #380]	; 16608 <__assert_fail@plt+0x5120>
   16488:	vldr	s6, [r7, #12]
   1648c:	vcmpe.f32	s6, s4
   16490:	vmrs	APSR_nzcv, fpscr
   16494:	ble	16584 <__assert_fail@plt+0x509c>
   16498:	vldr	s4, [r7]
   1649c:	vcmpe.f32	s4, #0.0
   164a0:	vmrs	APSR_nzcv, fpscr
   164a4:	blt	16584 <__assert_fail@plt+0x509c>
   164a8:	vadd.f32	s2, s4, s2
   164ac:	vcmpe.f32	s2, s0
   164b0:	vmrs	APSR_nzcv, fpscr
   164b4:	bpl	16584 <__assert_fail@plt+0x509c>
   164b8:	vldr	s0, [r7, #4]
   164bc:	vmov.f32	s4, #112	; 0x3f800000  1.0
   164c0:	vcmpe.f32	s0, s4
   164c4:	vmrs	APSR_nzcv, fpscr
   164c8:	bhi	16584 <__assert_fail@plt+0x509c>
   164cc:	vcmpe.f32	s2, s0
   164d0:	vmrs	APSR_nzcv, fpscr
   164d4:	bpl	16584 <__assert_fail@plt+0x509c>
   164d8:	ldrb	r0, [r7, #16]
   164dc:	cmp	r0, #0
   164e0:	bne	1650c <__assert_fail@plt+0x5024>
   164e4:	vmov	s2, r6
   164e8:	vldr	s0, [r7, #8]
   164ec:	vldr	s4, [pc, #280]	; 1660c <__assert_fail@plt+0x5124>
   164f0:	vcvt.f32.u32	s2, s2
   164f4:	vdiv.f32	s2, s2, s0
   164f8:	vcvt.u32.f32	s0, s2
   164fc:	vcmpe.f32	s2, s4
   16500:	vmrs	APSR_nzcv, fpscr
   16504:	bge	16594 <__assert_fail@plt+0x50ac>
   16508:	vmov	r6, s0
   1650c:	cmp	r6, #10
   16510:	movls	r6, #10
   16514:	orr	r0, r6, #1
   16518:	cmn	r0, #1
   1651c:	beq	16594 <__assert_fail@plt+0x50ac>
   16520:	ldr	r6, [fp, #8]
   16524:	mov	r1, #3
   16528:	cmp	r0, #10
   1652c:	bcc	16564 <__assert_fail@plt+0x507c>
   16530:	mov	r1, #3
   16534:	mov	r3, #9
   16538:	mov	r2, #12
   1653c:	udiv	r7, r0, r1
   16540:	mls	r7, r7, r1, r0
   16544:	cmp	r7, #0
   16548:	beq	16564 <__assert_fail@plt+0x507c>
   1654c:	add	r3, r3, r2
   16550:	add	r2, r2, #8
   16554:	add	r1, r1, #2
   16558:	add	r3, r3, #4
   1655c:	cmp	r3, r0
   16560:	bcc	1653c <__assert_fail@plt+0x5054>
   16564:	udiv	r2, r0, r1
   16568:	mls	r1, r2, r1, r0
   1656c:	cmp	r1, #0
   16570:	bne	1658c <__assert_fail@plt+0x50a4>
   16574:	add	r0, r0, #2
   16578:	cmn	r0, #1
   1657c:	bne	16524 <__assert_fail@plt+0x503c>
   16580:	b	16594 <__assert_fail@plt+0x50ac>
   16584:	str	r0, [r4, #20]
   16588:	b	1659c <__assert_fail@plt+0x50b4>
   1658c:	cmp	r0, #536870912	; 0x20000000
   16590:	bcc	165ac <__assert_fail@plt+0x50c4>
   16594:	mov	r0, #0
   16598:	str	r0, [r4, #8]
   1659c:	mov	r0, r4
   165a0:	bl	13a78 <__assert_fail@plt+0x2590>
   165a4:	mov	r0, r8
   165a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   165ac:	cmp	r0, #0
   165b0:	str	r0, [r4, #8]
   165b4:	beq	1659c <__assert_fail@plt+0x50b4>
   165b8:	mov	r1, #8
   165bc:	bl	19f64 <__assert_fail@plt+0x8a7c>
   165c0:	cmp	r0, #0
   165c4:	str	r0, [r4]
   165c8:	beq	1659c <__assert_fail@plt+0x50b4>
   165cc:	mov	r1, #0
   165d0:	str	r5, [r4, #24]
   165d4:	str	r9, [r4, #28]
   165d8:	str	r6, [r4, #32]
   165dc:	mov	r8, r4
   165e0:	str	r1, [r4, #36]	; 0x24
   165e4:	str	r1, [r4, #12]
   165e8:	str	r1, [r4, #16]
   165ec:	ldr	r1, [r4, #8]
   165f0:	add	r0, r0, r1, lsl #3
   165f4:	str	r0, [r4, #4]
   165f8:	mov	r0, r8
   165fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16600:	stclcc	12, cr12, [ip, #820]	; 0x334
   16604:	svccc	0x00666666
   16608:	svccc	0x008ccccd
   1660c:	svcmi	0x00800000
   16610:	ror	r2, r0, #3
   16614:	udiv	r2, r2, r1
   16618:	mul	r1, r2, r1
   1661c:	rsb	r0, r1, r0, ror #3
   16620:	bx	lr
   16624:	sub	r0, r0, r1
   16628:	clz	r0, r0
   1662c:	lsr	r0, r0, #5
   16630:	bx	lr
   16634:	push	{r4, r5, r6, r7, fp, lr}
   16638:	add	fp, sp, #16
   1663c:	mov	r4, r0
   16640:	ldr	r5, [r0]
   16644:	ldr	r0, [r0, #4]
   16648:	cmp	r5, r0
   1664c:	bcs	166f0 <__assert_fail@plt+0x5208>
   16650:	mov	r6, #0
   16654:	b	16670 <__assert_fail@plt+0x5188>
   16658:	str	r6, [r5]
   1665c:	str	r6, [r5, #4]
   16660:	ldr	r0, [r4, #4]
   16664:	add	r5, r5, #8
   16668:	cmp	r5, r0
   1666c:	bcs	166f0 <__assert_fail@plt+0x5208>
   16670:	ldr	r1, [r5]
   16674:	cmp	r1, #0
   16678:	beq	16664 <__assert_fail@plt+0x517c>
   1667c:	ldr	r1, [r4, #32]
   16680:	ldr	r7, [r5, #4]
   16684:	cmp	r1, #0
   16688:	mov	r0, r1
   1668c:	movwne	r0, #1
   16690:	cmp	r7, #0
   16694:	bne	166d8 <__assert_fail@plt+0x51f0>
   16698:	cmp	r0, #0
   1669c:	beq	16658 <__assert_fail@plt+0x5170>
   166a0:	ldr	r0, [r5]
   166a4:	blx	r1
   166a8:	b	16658 <__assert_fail@plt+0x5170>
   166ac:	str	r6, [r7]
   166b0:	cmp	r1, #0
   166b4:	ldr	r2, [r7, #4]
   166b8:	ldr	r0, [r4, #36]	; 0x24
   166bc:	str	r0, [r7, #4]
   166c0:	mov	r0, r1
   166c4:	str	r7, [r4, #36]	; 0x24
   166c8:	movwne	r0, #1
   166cc:	cmp	r2, #0
   166d0:	mov	r7, r2
   166d4:	beq	16698 <__assert_fail@plt+0x51b0>
   166d8:	tst	r0, #1
   166dc:	beq	166ac <__assert_fail@plt+0x51c4>
   166e0:	ldr	r0, [r7]
   166e4:	blx	r1
   166e8:	ldr	r1, [r4, #32]
   166ec:	b	166ac <__assert_fail@plt+0x51c4>
   166f0:	mov	r0, #0
   166f4:	str	r0, [r4, #12]
   166f8:	str	r0, [r4, #16]
   166fc:	pop	{r4, r5, r6, r7, fp, pc}
   16700:	push	{r4, r5, r6, sl, fp, lr}
   16704:	add	fp, sp, #16
   16708:	mov	r4, r0
   1670c:	ldr	r0, [r0, #32]
   16710:	cmp	r0, #0
   16714:	beq	16788 <__assert_fail@plt+0x52a0>
   16718:	ldr	r0, [r4, #16]
   1671c:	cmp	r0, #0
   16720:	beq	16788 <__assert_fail@plt+0x52a0>
   16724:	ldr	r5, [r4]
   16728:	ldr	r1, [r4, #4]
   1672c:	cmp	r5, r1
   16730:	bcc	16748 <__assert_fail@plt+0x5260>
   16734:	b	16788 <__assert_fail@plt+0x52a0>
   16738:	ldr	r1, [r4, #4]
   1673c:	add	r5, r5, #8
   16740:	cmp	r5, r1
   16744:	bcs	16788 <__assert_fail@plt+0x52a0>
   16748:	ldr	r0, [r5]
   1674c:	cmp	r0, #0
   16750:	cmpne	r5, #0
   16754:	beq	1673c <__assert_fail@plt+0x5254>
   16758:	ldr	r1, [r4, #32]
   1675c:	blx	r1
   16760:	ldr	r6, [r5, #4]
   16764:	cmp	r6, #0
   16768:	beq	16738 <__assert_fail@plt+0x5250>
   1676c:	ldr	r1, [r4, #32]
   16770:	ldr	r0, [r6]
   16774:	blx	r1
   16778:	ldr	r6, [r6, #4]
   1677c:	cmp	r6, #0
   16780:	bne	1676c <__assert_fail@plt+0x5284>
   16784:	b	16738 <__assert_fail@plt+0x5250>
   16788:	ldr	r5, [r4]
   1678c:	ldr	r1, [r4, #4]
   16790:	cmp	r5, r1
   16794:	bcc	167a8 <__assert_fail@plt+0x52c0>
   16798:	b	167d0 <__assert_fail@plt+0x52e8>
   1679c:	add	r5, r5, #8
   167a0:	cmp	r5, r1
   167a4:	bcs	167d0 <__assert_fail@plt+0x52e8>
   167a8:	ldr	r0, [r5, #4]
   167ac:	cmp	r0, #0
   167b0:	beq	1679c <__assert_fail@plt+0x52b4>
   167b4:	ldr	r6, [r0, #4]
   167b8:	bl	13a78 <__assert_fail@plt+0x2590>
   167bc:	cmp	r6, #0
   167c0:	mov	r0, r6
   167c4:	bne	167b4 <__assert_fail@plt+0x52cc>
   167c8:	ldr	r1, [r4, #4]
   167cc:	b	1679c <__assert_fail@plt+0x52b4>
   167d0:	ldr	r0, [r4, #36]	; 0x24
   167d4:	cmp	r0, #0
   167d8:	beq	167f0 <__assert_fail@plt+0x5308>
   167dc:	ldr	r5, [r0, #4]
   167e0:	bl	13a78 <__assert_fail@plt+0x2590>
   167e4:	cmp	r5, #0
   167e8:	mov	r0, r5
   167ec:	bne	167dc <__assert_fail@plt+0x52f4>
   167f0:	ldr	r0, [r4]
   167f4:	bl	13a78 <__assert_fail@plt+0x2590>
   167f8:	mov	r0, r4
   167fc:	pop	{r4, r5, r6, sl, fp, lr}
   16800:	b	13a78 <__assert_fail@plt+0x2590>
   16804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16808:	add	fp, sp, #28
   1680c:	sub	sp, sp, #44	; 0x2c
   16810:	mov	r7, r0
   16814:	mov	r4, r0
   16818:	ldr	r0, [r7, #20]!
   1681c:	ldrb	r2, [r0, #16]
   16820:	cmp	r2, #0
   16824:	bne	16854 <__assert_fail@plt+0x536c>
   16828:	vmov	s2, r1
   1682c:	vldr	s0, [r0, #8]
   16830:	vldr	s4, [pc, #564]	; 16a6c <__assert_fail@plt+0x5584>
   16834:	mov	r5, #0
   16838:	vcvt.f32.u32	s2, s2
   1683c:	vdiv.f32	s2, s2, s0
   16840:	vcvt.u32.f32	s0, s2
   16844:	vcmpe.f32	s2, s4
   16848:	vmrs	APSR_nzcv, fpscr
   1684c:	bge	16a5c <__assert_fail@plt+0x5574>
   16850:	vmov	r1, s0
   16854:	cmp	r1, #10
   16858:	mov	r5, #0
   1685c:	movls	r1, #10
   16860:	orr	r6, r1, #1
   16864:	cmn	r6, #1
   16868:	beq	16a5c <__assert_fail@plt+0x5574>
   1686c:	mov	r0, #3
   16870:	cmp	r6, #10
   16874:	bcc	168ac <__assert_fail@plt+0x53c4>
   16878:	mov	r0, #3
   1687c:	mov	r2, #9
   16880:	mov	r1, #12
   16884:	udiv	r3, r6, r0
   16888:	mls	r3, r3, r0, r6
   1688c:	cmp	r3, #0
   16890:	beq	168ac <__assert_fail@plt+0x53c4>
   16894:	add	r2, r2, r1
   16898:	add	r1, r1, #8
   1689c:	add	r0, r0, #2
   168a0:	add	r2, r2, #4
   168a4:	cmp	r2, r6
   168a8:	bcc	16884 <__assert_fail@plt+0x539c>
   168ac:	udiv	r1, r6, r0
   168b0:	mls	r0, r1, r0, r6
   168b4:	cmp	r0, #0
   168b8:	bne	168cc <__assert_fail@plt+0x53e4>
   168bc:	add	r6, r6, #2
   168c0:	cmn	r6, #1
   168c4:	bne	1686c <__assert_fail@plt+0x5384>
   168c8:	b	16a5c <__assert_fail@plt+0x5574>
   168cc:	sub	r0, r6, #1
   168d0:	cmn	r0, #-536870910	; 0xe0000002
   168d4:	bhi	16a5c <__assert_fail@plt+0x5574>
   168d8:	ldr	r0, [r4, #8]
   168dc:	cmp	r6, r0
   168e0:	bne	168ec <__assert_fail@plt+0x5404>
   168e4:	mov	r5, #1
   168e8:	b	16a5c <__assert_fail@plt+0x5574>
   168ec:	mov	r0, r6
   168f0:	mov	r1, #8
   168f4:	bl	19f64 <__assert_fail@plt+0x8a7c>
   168f8:	cmp	r0, #0
   168fc:	str	r0, [sp, #4]
   16900:	beq	16a5c <__assert_fail@plt+0x5574>
   16904:	add	r0, r0, r6, lsl #3
   16908:	mov	r1, #0
   1690c:	add	r5, sp, #4
   16910:	mov	sl, r4
   16914:	mov	r2, #0
   16918:	str	r1, [sp, #20]
   1691c:	str	r1, [sp, #16]
   16920:	str	r6, [sp, #12]
   16924:	mov	r1, r4
   16928:	str	r0, [sp, #8]
   1692c:	add	r0, r5, #20
   16930:	vld1.32	{d16-d17}, [r7]
   16934:	vst1.32	{d16-d17}, [r0]
   16938:	ldr	r0, [sl, #36]!	; 0x24
   1693c:	str	r0, [sp, #40]	; 0x28
   16940:	mov	r0, r5
   16944:	bl	16a70 <__assert_fail@plt+0x5588>
   16948:	cmp	r0, #0
   1694c:	beq	16974 <__assert_fail@plt+0x548c>
   16950:	ldr	r0, [r4]
   16954:	bl	13a78 <__assert_fail@plt+0x2590>
   16958:	mov	r0, #36	; 0x24
   1695c:	vld1.32	{d16-d17}, [r5], r0
   16960:	vst1.32	{d16-d17}, [r4], r0
   16964:	ldr	r0, [r5]
   16968:	mov	r5, #1
   1696c:	str	r0, [r4]
   16970:	b	16a5c <__assert_fail@plt+0x5574>
   16974:	ldr	r0, [sp, #40]	; 0x28
   16978:	str	r0, [sl]
   1697c:	ldr	r0, [sp, #8]
   16980:	ldr	r8, [sp, #4]
   16984:	cmp	r8, r0
   16988:	str	r0, [sp]
   1698c:	bcs	16a38 <__assert_fail@plt+0x5550>
   16990:	mov	r9, #0
   16994:	b	169ac <__assert_fail@plt+0x54c4>
   16998:	str	r9, [r8, #4]
   1699c:	ldr	r0, [sp]
   169a0:	add	r8, r8, #8
   169a4:	cmp	r8, r0
   169a8:	bcs	16a38 <__assert_fail@plt+0x5550>
   169ac:	ldr	r0, [r8]
   169b0:	cmp	r0, #0
   169b4:	beq	1699c <__assert_fail@plt+0x54b4>
   169b8:	ldr	r6, [r8, #4]
   169bc:	cmp	r6, #0
   169c0:	beq	16998 <__assert_fail@plt+0x54b0>
   169c4:	ldr	r1, [r4, #8]
   169c8:	b	169ec <__assert_fail@plt+0x5504>
   169cc:	add	r0, r3, r0, lsl #3
   169d0:	add	r0, r0, #4
   169d4:	ldr	r3, [r0]
   169d8:	cmp	r2, #0
   169dc:	str	r3, [r6, #4]
   169e0:	str	r6, [r0]
   169e4:	mov	r6, r2
   169e8:	beq	16998 <__assert_fail@plt+0x54b0>
   169ec:	ldr	r5, [r6]
   169f0:	ldr	r2, [r4, #24]
   169f4:	mov	r0, r5
   169f8:	blx	r2
   169fc:	ldr	r1, [r4, #8]
   16a00:	cmp	r0, r1
   16a04:	bcs	16a68 <__assert_fail@plt+0x5580>
   16a08:	ldr	r3, [r4]
   16a0c:	ldr	r2, [r6, #4]
   16a10:	ldr	r7, [r3, r0, lsl #3]
   16a14:	cmp	r7, #0
   16a18:	bne	169cc <__assert_fail@plt+0x54e4>
   16a1c:	str	r5, [r3, r0, lsl #3]
   16a20:	ldr	r0, [r4, #12]
   16a24:	add	r0, r0, #1
   16a28:	str	r0, [r4, #12]
   16a2c:	mov	r0, sl
   16a30:	str	r9, [r6]
   16a34:	b	169d4 <__assert_fail@plt+0x54ec>
   16a38:	add	r1, sp, #4
   16a3c:	mov	r0, r4
   16a40:	mov	r2, #0
   16a44:	mov	r5, #0
   16a48:	bl	16a70 <__assert_fail@plt+0x5588>
   16a4c:	cmp	r0, #0
   16a50:	beq	16a68 <__assert_fail@plt+0x5580>
   16a54:	ldr	r0, [sp, #4]
   16a58:	bl	13a78 <__assert_fail@plt+0x2590>
   16a5c:	mov	r0, r5
   16a60:	sub	sp, fp, #28
   16a64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a68:	bl	114a0 <abort@plt>
   16a6c:	svcmi	0x00800000
   16a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a74:	add	fp, sp, #28
   16a78:	sub	sp, sp, #12
   16a7c:	ldr	sl, [r1]
   16a80:	str	r1, [sp, #8]
   16a84:	ldr	r1, [r1, #4]
   16a88:	mov	r7, r0
   16a8c:	mov	r0, #1
   16a90:	str	r2, [sp, #4]
   16a94:	cmp	sl, r1
   16a98:	bcs	16bf4 <__assert_fail@plt+0x570c>
   16a9c:	add	r8, r7, #36	; 0x24
   16aa0:	mov	r9, #0
   16aa4:	b	16ae0 <__assert_fail@plt+0x55f8>
   16aa8:	str	r4, [r6, r5, lsl #3]
   16aac:	ldr	r0, [r7, #12]
   16ab0:	add	r0, r0, #1
   16ab4:	str	r0, [r7, #12]
   16ab8:	ldr	r1, [sp, #8]
   16abc:	str	r9, [sl]
   16ac0:	ldr	r0, [r1, #12]
   16ac4:	sub	r0, r0, #1
   16ac8:	str	r0, [r1, #12]
   16acc:	ldr	r0, [sp, #8]
   16ad0:	add	sl, sl, #8
   16ad4:	ldr	r0, [r0, #4]
   16ad8:	cmp	sl, r0
   16adc:	bcs	16bf0 <__assert_fail@plt+0x5708>
   16ae0:	ldr	r4, [sl]
   16ae4:	cmp	r4, #0
   16ae8:	beq	16acc <__assert_fail@plt+0x55e4>
   16aec:	ldr	r5, [sl, #4]
   16af0:	cmp	r5, #0
   16af4:	beq	16b70 <__assert_fail@plt+0x5688>
   16af8:	ldr	r1, [r7, #8]
   16afc:	b	16b30 <__assert_fail@plt+0x5648>
   16b00:	str	r4, [r3, r0, lsl #3]
   16b04:	ldr	r0, [r7, #12]
   16b08:	add	r0, r0, #1
   16b0c:	str	r0, [r7, #12]
   16b10:	mov	r0, r8
   16b14:	str	r9, [r5]
   16b18:	ldr	r3, [r0]
   16b1c:	cmp	r2, #0
   16b20:	str	r3, [r5, #4]
   16b24:	str	r5, [r0]
   16b28:	mov	r5, r2
   16b2c:	beq	16b6c <__assert_fail@plt+0x5684>
   16b30:	ldr	r4, [r5]
   16b34:	ldr	r2, [r7, #24]
   16b38:	mov	r0, r4
   16b3c:	blx	r2
   16b40:	ldr	r1, [r7, #8]
   16b44:	cmp	r0, r1
   16b48:	bcs	16c08 <__assert_fail@plt+0x5720>
   16b4c:	ldr	r3, [r7]
   16b50:	ldr	r2, [r5, #4]
   16b54:	ldr	r6, [r3, r0, lsl #3]
   16b58:	cmp	r6, #0
   16b5c:	beq	16b00 <__assert_fail@plt+0x5618>
   16b60:	add	r0, r3, r0, lsl #3
   16b64:	add	r0, r0, #4
   16b68:	b	16b18 <__assert_fail@plt+0x5630>
   16b6c:	ldr	r4, [sl]
   16b70:	ldr	r0, [sp, #4]
   16b74:	str	r9, [sl, #4]
   16b78:	cmp	r0, #0
   16b7c:	bne	16acc <__assert_fail@plt+0x55e4>
   16b80:	ldr	r1, [r7, #8]
   16b84:	ldr	r2, [r7, #24]
   16b88:	mov	r0, r4
   16b8c:	blx	r2
   16b90:	mov	r5, r0
   16b94:	ldr	r0, [r7, #8]
   16b98:	cmp	r5, r0
   16b9c:	bcs	16c08 <__assert_fail@plt+0x5720>
   16ba0:	ldr	r6, [r7]
   16ba4:	ldr	r0, [r6, r5, lsl #3]
   16ba8:	cmp	r0, #0
   16bac:	beq	16aa8 <__assert_fail@plt+0x55c0>
   16bb0:	ldr	r0, [r8]
   16bb4:	cmp	r0, #0
   16bb8:	beq	16bc8 <__assert_fail@plt+0x56e0>
   16bbc:	ldr	r1, [r0, #4]
   16bc0:	str	r1, [r8]
   16bc4:	b	16bd8 <__assert_fail@plt+0x56f0>
   16bc8:	mov	r0, #8
   16bcc:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   16bd0:	cmp	r0, #0
   16bd4:	beq	16bfc <__assert_fail@plt+0x5714>
   16bd8:	add	r1, r6, r5, lsl #3
   16bdc:	str	r4, [r0]
   16be0:	ldr	r2, [r1, #4]
   16be4:	str	r2, [r0, #4]
   16be8:	str	r0, [r1, #4]
   16bec:	b	16ab8 <__assert_fail@plt+0x55d0>
   16bf0:	mov	r0, #1
   16bf4:	sub	sp, fp, #28
   16bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16bfc:	mov	r0, #0
   16c00:	sub	sp, fp, #28
   16c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c08:	bl	114a0 <abort@plt>
   16c0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c10:	add	fp, sp, #28
   16c14:	sub	sp, sp, #4
   16c18:	cmp	r1, #0
   16c1c:	beq	16f38 <__assert_fail@plt+0x5a50>
   16c20:	mov	r8, r2
   16c24:	mov	sl, r1
   16c28:	ldr	r1, [r0, #8]
   16c2c:	ldr	r2, [r0, #24]
   16c30:	mov	r4, r0
   16c34:	mov	r0, sl
   16c38:	blx	r2
   16c3c:	mov	r7, r0
   16c40:	ldr	r0, [r4, #8]
   16c44:	cmp	r7, r0
   16c48:	bcs	16f38 <__assert_fail@plt+0x5a50>
   16c4c:	ldr	r5, [r4]
   16c50:	mov	r9, r5
   16c54:	ldr	r1, [r9, r7, lsl #3]!
   16c58:	cmp	r1, #0
   16c5c:	beq	16ce8 <__assert_fail@plt+0x5800>
   16c60:	cmp	r1, sl
   16c64:	beq	16c90 <__assert_fail@plt+0x57a8>
   16c68:	ldr	r2, [r4, #28]
   16c6c:	mov	r0, sl
   16c70:	blx	r2
   16c74:	cmp	r0, #0
   16c78:	mov	r6, r9
   16c7c:	beq	16ca4 <__assert_fail@plt+0x57bc>
   16c80:	ldr	r0, [r6]
   16c84:	cmp	r0, #0
   16c88:	bne	16c94 <__assert_fail@plt+0x57ac>
   16c8c:	b	16ce8 <__assert_fail@plt+0x5800>
   16c90:	mov	r0, sl
   16c94:	cmp	r8, #0
   16c98:	mov	r7, #0
   16c9c:	strne	r0, [r8]
   16ca0:	b	16ed4 <__assert_fail@plt+0x59ec>
   16ca4:	add	r6, r5, r7, lsl #3
   16ca8:	ldr	r0, [r6, #4]!
   16cac:	cmp	r0, #0
   16cb0:	beq	16ce8 <__assert_fail@plt+0x5800>
   16cb4:	ldr	r1, [r0]
   16cb8:	cmp	r1, sl
   16cbc:	beq	16cdc <__assert_fail@plt+0x57f4>
   16cc0:	ldr	r2, [r4, #28]
   16cc4:	mov	r0, sl
   16cc8:	blx	r2
   16ccc:	ldr	r6, [r6]
   16cd0:	cmp	r0, #0
   16cd4:	beq	16ca8 <__assert_fail@plt+0x57c0>
   16cd8:	b	16c80 <__assert_fail@plt+0x5798>
   16cdc:	mov	r0, sl
   16ce0:	cmp	r0, #0
   16ce4:	bne	16c94 <__assert_fail@plt+0x57ac>
   16ce8:	vldr	s0, [r4, #8]
   16cec:	vldr	s2, [r4, #12]
   16cf0:	ldr	r0, [r4, #20]
   16cf4:	vcvt.f32.u32	s0, s0
   16cf8:	vcvt.f32.u32	s4, s2
   16cfc:	vldr	s2, [r0, #8]
   16d00:	vmul.f32	s6, s2, s0
   16d04:	vcmpe.f32	s6, s4
   16d08:	vmrs	APSR_nzcv, fpscr
   16d0c:	bpl	16e60 <__assert_fail@plt+0x5978>
   16d10:	movw	r1, #47528	; 0xb9a8
   16d14:	movt	r1, #1
   16d18:	cmp	r0, r1
   16d1c:	beq	16da8 <__assert_fail@plt+0x58c0>
   16d20:	vldr	s6, [pc, #532]	; 16f3c <__assert_fail@plt+0x5a54>
   16d24:	vcmpe.f32	s2, s6
   16d28:	vmrs	APSR_nzcv, fpscr
   16d2c:	ble	16d94 <__assert_fail@plt+0x58ac>
   16d30:	vldr	s8, [pc, #520]	; 16f40 <__assert_fail@plt+0x5a58>
   16d34:	vcmpe.f32	s2, s8
   16d38:	vmrs	APSR_nzcv, fpscr
   16d3c:	bpl	16d94 <__assert_fail@plt+0x58ac>
   16d40:	vldr	s8, [pc, #508]	; 16f44 <__assert_fail@plt+0x5a5c>
   16d44:	vldr	s10, [r0, #12]
   16d48:	vcmpe.f32	s10, s8
   16d4c:	vmrs	APSR_nzcv, fpscr
   16d50:	ble	16d94 <__assert_fail@plt+0x58ac>
   16d54:	vldr	s8, [r0]
   16d58:	vcmpe.f32	s8, #0.0
   16d5c:	vmrs	APSR_nzcv, fpscr
   16d60:	blt	16d94 <__assert_fail@plt+0x58ac>
   16d64:	vadd.f32	s6, s8, s6
   16d68:	vcmpe.f32	s6, s2
   16d6c:	vmrs	APSR_nzcv, fpscr
   16d70:	bpl	16d94 <__assert_fail@plt+0x58ac>
   16d74:	vldr	s8, [r0, #4]
   16d78:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16d7c:	vcmpe.f32	s8, s10
   16d80:	vmrs	APSR_nzcv, fpscr
   16d84:	bhi	16d94 <__assert_fail@plt+0x58ac>
   16d88:	vcmpe.f32	s6, s8
   16d8c:	vmrs	APSR_nzcv, fpscr
   16d90:	bmi	16dac <__assert_fail@plt+0x58c4>
   16d94:	vldr	s2, [pc, #428]	; 16f48 <__assert_fail@plt+0x5a60>
   16d98:	movw	r0, #47528	; 0xb9a8
   16d9c:	movt	r0, #1
   16da0:	str	r0, [r4, #20]
   16da4:	b	16dac <__assert_fail@plt+0x58c4>
   16da8:	mov	r0, r1
   16dac:	vmul.f32	s6, s2, s0
   16db0:	vcmpe.f32	s6, s4
   16db4:	vmrs	APSR_nzcv, fpscr
   16db8:	bpl	16e60 <__assert_fail@plt+0x5978>
   16dbc:	vldr	s4, [r0, #12]
   16dc0:	ldrb	r0, [r0, #16]
   16dc4:	mvn	r7, #0
   16dc8:	cmp	r0, #0
   16dcc:	vmul.f32	s0, s4, s0
   16dd0:	vldr	s4, [pc, #372]	; 16f4c <__assert_fail@plt+0x5a64>
   16dd4:	vmul.f32	s2, s2, s0
   16dd8:	vseleq.f32	s0, s2, s0
   16ddc:	vcmpe.f32	s0, s4
   16de0:	vmrs	APSR_nzcv, fpscr
   16de4:	bge	16ed4 <__assert_fail@plt+0x59ec>
   16de8:	vcvt.u32.f32	s0, s0
   16dec:	mov	r0, r4
   16df0:	vmov	r1, s0
   16df4:	bl	16804 <__assert_fail@plt+0x531c>
   16df8:	cmp	r0, #0
   16dfc:	beq	16ed4 <__assert_fail@plt+0x59ec>
   16e00:	ldr	r1, [r4, #8]
   16e04:	ldr	r2, [r4, #24]
   16e08:	mov	r0, sl
   16e0c:	blx	r2
   16e10:	mov	r7, r0
   16e14:	ldr	r0, [r4, #8]
   16e18:	cmp	r7, r0
   16e1c:	bcs	16f38 <__assert_fail@plt+0x5a50>
   16e20:	ldr	r5, [r4]
   16e24:	mov	r9, r5
   16e28:	ldr	r1, [r9, r7, lsl #3]!
   16e2c:	cmp	r1, #0
   16e30:	beq	16e60 <__assert_fail@plt+0x5978>
   16e34:	cmp	r1, sl
   16e38:	mov	r0, sl
   16e3c:	beq	16e58 <__assert_fail@plt+0x5970>
   16e40:	ldr	r2, [r4, #28]
   16e44:	mov	r0, sl
   16e48:	blx	r2
   16e4c:	cmp	r0, #0
   16e50:	beq	16ee8 <__assert_fail@plt+0x5a00>
   16e54:	ldr	r0, [r9]
   16e58:	cmp	r0, #0
   16e5c:	bne	16f38 <__assert_fail@plt+0x5a50>
   16e60:	ldr	r0, [r9]
   16e64:	cmp	r0, #0
   16e68:	beq	16e84 <__assert_fail@plt+0x599c>
   16e6c:	ldr	r0, [r4, #36]	; 0x24
   16e70:	cmp	r0, #0
   16e74:	beq	16ea4 <__assert_fail@plt+0x59bc>
   16e78:	ldr	r1, [r0, #4]
   16e7c:	str	r1, [r4, #36]	; 0x24
   16e80:	b	16eb4 <__assert_fail@plt+0x59cc>
   16e84:	str	sl, [r9]
   16e88:	ldr	r0, [r4, #12]
   16e8c:	ldr	r1, [r4, #16]
   16e90:	add	r0, r0, #1
   16e94:	add	r1, r1, #1
   16e98:	str	r0, [r4, #12]
   16e9c:	str	r1, [r4, #16]
   16ea0:	b	16ed0 <__assert_fail@plt+0x59e8>
   16ea4:	mov	r0, #8
   16ea8:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   16eac:	cmp	r0, #0
   16eb0:	beq	16ee0 <__assert_fail@plt+0x59f8>
   16eb4:	str	sl, [r0]
   16eb8:	ldr	r1, [r9, #4]
   16ebc:	str	r1, [r0, #4]
   16ec0:	str	r0, [r9, #4]
   16ec4:	ldr	r0, [r4, #16]
   16ec8:	add	r0, r0, #1
   16ecc:	str	r0, [r4, #16]
   16ed0:	mov	r7, #1
   16ed4:	mov	r0, r7
   16ed8:	sub	sp, fp, #28
   16edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ee0:	mvn	r7, #0
   16ee4:	b	16ed4 <__assert_fail@plt+0x59ec>
   16ee8:	add	r6, r5, r7, lsl #3
   16eec:	ldr	r0, [r6, #4]!
   16ef0:	cmp	r0, #0
   16ef4:	beq	16e60 <__assert_fail@plt+0x5978>
   16ef8:	ldr	r1, [r0]
   16efc:	cmp	r1, sl
   16f00:	beq	16f2c <__assert_fail@plt+0x5a44>
   16f04:	ldr	r2, [r4, #28]
   16f08:	mov	r0, sl
   16f0c:	blx	r2
   16f10:	ldr	r6, [r6]
   16f14:	cmp	r0, #0
   16f18:	beq	16eec <__assert_fail@plt+0x5a04>
   16f1c:	ldr	r0, [r6]
   16f20:	cmp	r0, #0
   16f24:	beq	16e60 <__assert_fail@plt+0x5978>
   16f28:	b	16f38 <__assert_fail@plt+0x5a50>
   16f2c:	mov	r0, sl
   16f30:	cmp	r0, #0
   16f34:	beq	16e60 <__assert_fail@plt+0x5978>
   16f38:	bl	114a0 <abort@plt>
   16f3c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16f40:	svccc	0x00666666
   16f44:	svccc	0x008ccccd
   16f48:	svccc	0x004ccccd
   16f4c:	svcmi	0x00800000
   16f50:	push	{r4, sl, fp, lr}
   16f54:	add	fp, sp, #8
   16f58:	sub	sp, sp, #8
   16f5c:	add	r2, sp, #4
   16f60:	mov	r4, r1
   16f64:	bl	16c0c <__assert_fail@plt+0x5724>
   16f68:	cmn	r0, #1
   16f6c:	beq	16f80 <__assert_fail@plt+0x5a98>
   16f70:	ldr	r1, [sp, #4]
   16f74:	cmp	r0, #0
   16f78:	moveq	r4, r1
   16f7c:	b	16f84 <__assert_fail@plt+0x5a9c>
   16f80:	mov	r4, #0
   16f84:	mov	r0, r4
   16f88:	sub	sp, fp, #8
   16f8c:	pop	{r4, sl, fp, pc}
   16f90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f94:	add	fp, sp, #24
   16f98:	mov	r9, r1
   16f9c:	ldr	r1, [r0, #8]
   16fa0:	ldr	r2, [r0, #24]
   16fa4:	mov	r5, r0
   16fa8:	mov	r0, r9
   16fac:	blx	r2
   16fb0:	mov	r7, r0
   16fb4:	ldr	r0, [r5, #8]
   16fb8:	cmp	r7, r0
   16fbc:	bcs	17220 <__assert_fail@plt+0x5d38>
   16fc0:	ldr	r6, [r5]
   16fc4:	mov	r8, #0
   16fc8:	mov	r4, r6
   16fcc:	ldr	r1, [r4, r7, lsl #3]!
   16fd0:	cmp	r1, #0
   16fd4:	beq	17088 <__assert_fail@plt+0x5ba0>
   16fd8:	cmp	r1, r9
   16fdc:	beq	16ff8 <__assert_fail@plt+0x5b10>
   16fe0:	ldr	r2, [r5, #28]
   16fe4:	mov	r0, r9
   16fe8:	blx	r2
   16fec:	cmp	r0, #0
   16ff0:	beq	17030 <__assert_fail@plt+0x5b48>
   16ff4:	ldr	r9, [r4]
   16ff8:	add	r0, r6, r7, lsl #3
   16ffc:	ldr	r0, [r0, #4]
   17000:	cmp	r0, #0
   17004:	beq	17078 <__assert_fail@plt+0x5b90>
   17008:	ldm	r0, {r1, r2}
   1700c:	stm	r4, {r1, r2}
   17010:	mov	r1, #0
   17014:	str	r1, [r0]
   17018:	ldr	r1, [r5, #36]	; 0x24
   1701c:	str	r1, [r0, #4]
   17020:	str	r0, [r5, #36]	; 0x24
   17024:	cmp	r9, #0
   17028:	bne	170c0 <__assert_fail@plt+0x5bd8>
   1702c:	b	17088 <__assert_fail@plt+0x5ba0>
   17030:	add	r7, r6, r7, lsl #3
   17034:	ldr	r0, [r7, #4]!
   17038:	cmp	r0, #0
   1703c:	beq	17088 <__assert_fail@plt+0x5ba0>
   17040:	ldr	r1, [r0]
   17044:	cmp	r1, r9
   17048:	beq	17090 <__assert_fail@plt+0x5ba8>
   1704c:	ldr	r2, [r5, #28]
   17050:	mov	r0, r9
   17054:	blx	r2
   17058:	ldr	r1, [r7]
   1705c:	cmp	r0, #0
   17060:	bne	17098 <__assert_fail@plt+0x5bb0>
   17064:	ldr	r0, [r1, #4]!
   17068:	mov	r7, r1
   1706c:	cmp	r0, #0
   17070:	bne	17040 <__assert_fail@plt+0x5b58>
   17074:	b	17088 <__assert_fail@plt+0x5ba0>
   17078:	mov	r0, #0
   1707c:	str	r0, [r4]
   17080:	cmp	r9, #0
   17084:	bne	170c0 <__assert_fail@plt+0x5bd8>
   17088:	mov	r0, r8
   1708c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17090:	mov	r1, r0
   17094:	b	1709c <__assert_fail@plt+0x5bb4>
   17098:	ldr	r9, [r1]
   1709c:	ldr	r0, [r1, #4]
   170a0:	str	r0, [r7]
   170a4:	mov	r0, #0
   170a8:	str	r0, [r1]
   170ac:	ldr	r0, [r5, #36]	; 0x24
   170b0:	str	r0, [r1, #4]
   170b4:	str	r1, [r5, #36]	; 0x24
   170b8:	cmp	r9, #0
   170bc:	beq	17088 <__assert_fail@plt+0x5ba0>
   170c0:	ldr	r0, [r5, #16]
   170c4:	sub	r0, r0, #1
   170c8:	str	r0, [r5, #16]
   170cc:	ldr	r0, [r4]
   170d0:	cmp	r0, #0
   170d4:	bne	17214 <__assert_fail@plt+0x5d2c>
   170d8:	ldr	r0, [r5, #12]
   170dc:	vldr	s0, [r5, #8]
   170e0:	sub	r1, r0, #1
   170e4:	str	r1, [r5, #12]
   170e8:	vmov	s2, r1
   170ec:	ldr	r0, [r5, #20]
   170f0:	vcvt.f32.u32	s0, s0
   170f4:	vcvt.f32.u32	s2, s2
   170f8:	vldr	s4, [r0]
   170fc:	vmul.f32	s6, s4, s0
   17100:	vcmpe.f32	s6, s2
   17104:	vmrs	APSR_nzcv, fpscr
   17108:	ble	17214 <__assert_fail@plt+0x5d2c>
   1710c:	movw	r1, #47528	; 0xb9a8
   17110:	movt	r1, #1
   17114:	cmp	r0, r1
   17118:	beq	171a4 <__assert_fail@plt+0x5cbc>
   1711c:	vldr	s8, [pc, #256]	; 17224 <__assert_fail@plt+0x5d3c>
   17120:	vldr	s6, [r0, #8]
   17124:	vcmpe.f32	s6, s8
   17128:	vmrs	APSR_nzcv, fpscr
   1712c:	ble	17190 <__assert_fail@plt+0x5ca8>
   17130:	vldr	s10, [pc, #240]	; 17228 <__assert_fail@plt+0x5d40>
   17134:	vcmpe.f32	s6, s10
   17138:	vmrs	APSR_nzcv, fpscr
   1713c:	bpl	17190 <__assert_fail@plt+0x5ca8>
   17140:	vcmpe.f32	s4, #0.0
   17144:	vmrs	APSR_nzcv, fpscr
   17148:	blt	17190 <__assert_fail@plt+0x5ca8>
   1714c:	vldr	s10, [r0, #12]
   17150:	vldr	s12, [pc, #212]	; 1722c <__assert_fail@plt+0x5d44>
   17154:	vcmpe.f32	s10, s12
   17158:	vmrs	APSR_nzcv, fpscr
   1715c:	ble	17190 <__assert_fail@plt+0x5ca8>
   17160:	vadd.f32	s8, s4, s8
   17164:	vcmpe.f32	s8, s6
   17168:	vmrs	APSR_nzcv, fpscr
   1716c:	bpl	17190 <__assert_fail@plt+0x5ca8>
   17170:	vldr	s6, [r0, #4]
   17174:	vmov.f32	s10, #112	; 0x3f800000  1.0
   17178:	vcmpe.f32	s6, s10
   1717c:	vmrs	APSR_nzcv, fpscr
   17180:	bhi	17190 <__assert_fail@plt+0x5ca8>
   17184:	vcmpe.f32	s8, s6
   17188:	vmrs	APSR_nzcv, fpscr
   1718c:	bmi	171a8 <__assert_fail@plt+0x5cc0>
   17190:	vldr	s4, [pc, #152]	; 17230 <__assert_fail@plt+0x5d48>
   17194:	movw	r0, #47528	; 0xb9a8
   17198:	movt	r0, #1
   1719c:	str	r0, [r5, #20]
   171a0:	b	171a8 <__assert_fail@plt+0x5cc0>
   171a4:	mov	r0, r1
   171a8:	vmul.f32	s4, s4, s0
   171ac:	vcmpe.f32	s4, s2
   171b0:	vmrs	APSR_nzcv, fpscr
   171b4:	ble	17214 <__assert_fail@plt+0x5d2c>
   171b8:	vldr	s2, [r0, #4]
   171bc:	ldrb	r1, [r0, #16]
   171c0:	cmp	r1, #0
   171c4:	vmul.f32	s0, s2, s0
   171c8:	bne	171d4 <__assert_fail@plt+0x5cec>
   171cc:	vldr	s2, [r0, #8]
   171d0:	vmul.f32	s0, s0, s2
   171d4:	vcvt.u32.f32	s0, s0
   171d8:	mov	r0, r5
   171dc:	vmov	r1, s0
   171e0:	bl	16804 <__assert_fail@plt+0x531c>
   171e4:	cmp	r0, #0
   171e8:	bne	17214 <__assert_fail@plt+0x5d2c>
   171ec:	ldr	r0, [r5, #36]	; 0x24
   171f0:	cmp	r0, #0
   171f4:	beq	1720c <__assert_fail@plt+0x5d24>
   171f8:	ldr	r4, [r0, #4]
   171fc:	bl	13a78 <__assert_fail@plt+0x2590>
   17200:	cmp	r4, #0
   17204:	mov	r0, r4
   17208:	bne	171f8 <__assert_fail@plt+0x5d10>
   1720c:	mov	r0, #0
   17210:	str	r0, [r5, #36]	; 0x24
   17214:	mov	r8, r9
   17218:	mov	r0, r8
   1721c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17220:	bl	114a0 <abort@plt>
   17224:	stclcc	12, cr12, [ip, #820]	; 0x334
   17228:	svccc	0x00666666
   1722c:	svccc	0x008ccccd
   17230:	andeq	r0, r0, r0
   17234:	b	16f90 <__assert_fail@plt+0x5aa8>
   17238:	vdup.32	q8, r1
   1723c:	mov	r2, #0
   17240:	str	r2, [r0, #20]
   17244:	str	r2, [r0, #24]
   17248:	mov	r2, #1
   1724c:	strb	r2, [r0, #28]
   17250:	vst1.32	{d16-d17}, [r0]!
   17254:	str	r1, [r0]
   17258:	bx	lr
   1725c:	ldrb	r0, [r0, #28]
   17260:	bx	lr
   17264:	push	{fp, lr}
   17268:	mov	fp, sp
   1726c:	ldrb	r3, [r0, #28]
   17270:	ldr	r2, [r0, #20]
   17274:	eor	lr, r3, #1
   17278:	add	r2, r2, lr
   1727c:	and	r3, r2, #3
   17280:	ldr	ip, [r0, r3, lsl #2]
   17284:	str	r1, [r0, r3, lsl #2]
   17288:	str	r3, [r0, #20]
   1728c:	ldr	r1, [r0, #24]
   17290:	cmp	r3, r1
   17294:	addeq	r1, r2, lr
   17298:	andeq	r1, r1, #3
   1729c:	streq	r1, [r0, #24]
   172a0:	mov	r1, #0
   172a4:	strb	r1, [r0, #28]
   172a8:	mov	r0, ip
   172ac:	pop	{fp, pc}
   172b0:	push	{fp, lr}
   172b4:	mov	fp, sp
   172b8:	ldrb	r1, [r0, #28]
   172bc:	cmp	r1, #0
   172c0:	bne	172fc <__assert_fail@plt+0x5e14>
   172c4:	ldr	r3, [r0, #20]
   172c8:	ldr	r2, [r0, #16]
   172cc:	ldr	r1, [r0, r3, lsl #2]
   172d0:	str	r2, [r0, r3, lsl #2]
   172d4:	ldr	r2, [r0, #20]
   172d8:	ldr	r3, [r0, #24]
   172dc:	cmp	r2, r3
   172e0:	moveq	r2, #1
   172e4:	strbeq	r2, [r0, #28]
   172e8:	subne	r2, r2, #1
   172ec:	andne	r2, r2, #3
   172f0:	strne	r2, [r0, #20]
   172f4:	mov	r0, r1
   172f8:	pop	{fp, pc}
   172fc:	bl	114a0 <abort@plt>
   17300:	sub	sp, sp, #4
   17304:	push	{fp, lr}
   17308:	mov	fp, sp
   1730c:	sub	sp, sp, #4
   17310:	str	r3, [fp, #8]
   17314:	tst	r2, #64	; 0x40
   17318:	mov	r3, #0
   1731c:	ldrne	r3, [fp, #8]
   17320:	bl	11380 <openat64@plt>
   17324:	bl	19190 <__assert_fail@plt+0x7ca8>
   17328:	mov	sp, fp
   1732c:	pop	{fp, lr}
   17330:	add	sp, sp, #4
   17334:	bx	lr
   17338:	push	{r4, r5, r6, sl, fp, lr}
   1733c:	add	fp, sp, #16
   17340:	orr	r2, r2, #18688	; 0x4900
   17344:	mov	r4, r3
   17348:	orr	r2, r2, #524288	; 0x80000
   1734c:	bl	17300 <__assert_fail@plt+0x5e18>
   17350:	mov	r5, r0
   17354:	mov	r0, #0
   17358:	cmp	r5, #0
   1735c:	bmi	17394 <__assert_fail@plt+0x5eac>
   17360:	mov	r0, r5
   17364:	bl	11440 <fdopendir@plt>
   17368:	cmp	r0, #0
   1736c:	beq	17378 <__assert_fail@plt+0x5e90>
   17370:	str	r5, [r4]
   17374:	pop	{r4, r5, r6, sl, fp, pc}
   17378:	bl	1138c <__errno_location@plt>
   1737c:	ldr	r6, [r0]
   17380:	mov	r4, r0
   17384:	mov	r0, r5
   17388:	bl	114ac <close@plt>
   1738c:	mov	r0, #0
   17390:	str	r6, [r4]
   17394:	pop	{r4, r5, r6, sl, fp, pc}
   17398:	push	{r4, r5, fp, lr}
   1739c:	add	fp, sp, #8
   173a0:	cmp	r0, #0
   173a4:	beq	17438 <__assert_fail@plt+0x5f50>
   173a8:	mov	r1, #47	; 0x2f
   173ac:	mov	r4, r0
   173b0:	bl	1141c <strrchr@plt>
   173b4:	cmp	r0, #0
   173b8:	mov	r5, r4
   173bc:	addne	r5, r0, #1
   173c0:	sub	r0, r5, r4
   173c4:	cmp	r0, #7
   173c8:	blt	1741c <__assert_fail@plt+0x5f34>
   173cc:	movw	r1, #47604	; 0xb9f4
   173d0:	sub	r0, r5, #7
   173d4:	mov	r2, #7
   173d8:	movt	r1, #1
   173dc:	bl	11494 <strncmp@plt>
   173e0:	cmp	r0, #0
   173e4:	bne	1741c <__assert_fail@plt+0x5f34>
   173e8:	movw	r1, #47612	; 0xb9fc
   173ec:	mov	r0, r5
   173f0:	mov	r2, #3
   173f4:	movt	r1, #1
   173f8:	bl	11494 <strncmp@plt>
   173fc:	cmp	r0, #0
   17400:	beq	1740c <__assert_fail@plt+0x5f24>
   17404:	mov	r4, r5
   17408:	b	1741c <__assert_fail@plt+0x5f34>
   1740c:	movw	r0, #49528	; 0xc178
   17410:	add	r4, r5, #3
   17414:	movt	r0, #2
   17418:	str	r4, [r0]
   1741c:	movw	r0, #49532	; 0xc17c
   17420:	movt	r0, #2
   17424:	str	r4, [r0]
   17428:	movw	r0, #49596	; 0xc1bc
   1742c:	movt	r0, #2
   17430:	str	r4, [r0]
   17434:	pop	{r4, r5, fp, pc}
   17438:	movw	r0, #49544	; 0xc188
   1743c:	mov	r1, #55	; 0x37
   17440:	mov	r2, #1
   17444:	movt	r0, #2
   17448:	ldr	r3, [r0]
   1744c:	movw	r0, #47548	; 0xb9bc
   17450:	movt	r0, #1
   17454:	bl	112c0 <fwrite@plt>
   17458:	bl	114a0 <abort@plt>
   1745c:	push	{r4, r5, r6, sl, fp, lr}
   17460:	add	fp, sp, #16
   17464:	mov	r4, r0
   17468:	movw	r0, #49600	; 0xc1c0
   1746c:	movt	r0, #2
   17470:	cmp	r4, #0
   17474:	moveq	r4, r0
   17478:	bl	1138c <__errno_location@plt>
   1747c:	ldr	r6, [r0]
   17480:	mov	r5, r0
   17484:	mov	r0, r4
   17488:	mov	r1, #48	; 0x30
   1748c:	bl	19d48 <__assert_fail@plt+0x8860>
   17490:	str	r6, [r5]
   17494:	pop	{r4, r5, r6, sl, fp, pc}
   17498:	movw	r1, #49600	; 0xc1c0
   1749c:	cmp	r0, #0
   174a0:	movt	r1, #2
   174a4:	movne	r1, r0
   174a8:	ldr	r0, [r1]
   174ac:	bx	lr
   174b0:	movw	r2, #49600	; 0xc1c0
   174b4:	cmp	r0, #0
   174b8:	movt	r2, #2
   174bc:	movne	r2, r0
   174c0:	str	r1, [r2]
   174c4:	bx	lr
   174c8:	movw	r3, #49600	; 0xc1c0
   174cc:	cmp	r0, #0
   174d0:	and	r2, r2, #1
   174d4:	movt	r3, #2
   174d8:	movne	r3, r0
   174dc:	ubfx	r0, r1, #5, #3
   174e0:	and	r1, r1, #31
   174e4:	add	ip, r3, r0, lsl #2
   174e8:	mov	r0, #1
   174ec:	ldr	r3, [ip, #8]
   174f0:	and	r0, r0, r3, lsr r1
   174f4:	eor	r2, r0, r2
   174f8:	eor	r1, r3, r2, lsl r1
   174fc:	str	r1, [ip, #8]
   17500:	bx	lr
   17504:	movw	r2, #49600	; 0xc1c0
   17508:	cmp	r0, #0
   1750c:	movt	r2, #2
   17510:	movne	r2, r0
   17514:	ldr	r0, [r2, #4]
   17518:	str	r1, [r2, #4]
   1751c:	bx	lr
   17520:	push	{fp, lr}
   17524:	mov	fp, sp
   17528:	movw	r3, #49600	; 0xc1c0
   1752c:	cmp	r0, #0
   17530:	movt	r3, #2
   17534:	movne	r3, r0
   17538:	cmp	r1, #0
   1753c:	mov	r0, #10
   17540:	cmpne	r2, #0
   17544:	str	r0, [r3]
   17548:	bne	17550 <__assert_fail@plt+0x6068>
   1754c:	bl	114a0 <abort@plt>
   17550:	str	r1, [r3, #40]	; 0x28
   17554:	str	r2, [r3, #44]	; 0x2c
   17558:	pop	{fp, pc}
   1755c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17560:	add	fp, sp, #28
   17564:	sub	sp, sp, #20
   17568:	mov	r7, r0
   1756c:	ldr	r0, [fp, #8]
   17570:	movw	r5, #49600	; 0xc1c0
   17574:	mov	r8, r3
   17578:	mov	r9, r2
   1757c:	mov	sl, r1
   17580:	movt	r5, #2
   17584:	cmp	r0, #0
   17588:	movne	r5, r0
   1758c:	bl	1138c <__errno_location@plt>
   17590:	ldr	r2, [r5, #40]	; 0x28
   17594:	ldr	r3, [r5, #44]	; 0x2c
   17598:	mov	r4, r0
   1759c:	ldm	r5, {r0, r1}
   175a0:	add	r5, r5, #8
   175a4:	ldr	r6, [r4]
   175a8:	stm	sp, {r0, r1, r5}
   175ac:	mov	r0, r7
   175b0:	mov	r1, sl
   175b4:	str	r2, [sp, #12]
   175b8:	str	r3, [sp, #16]
   175bc:	mov	r2, r9
   175c0:	mov	r3, r8
   175c4:	bl	175d4 <__assert_fail@plt+0x60ec>
   175c8:	str	r6, [r4]
   175cc:	sub	sp, fp, #28
   175d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175d8:	add	fp, sp, #28
   175dc:	sub	sp, sp, #156	; 0x9c
   175e0:	mov	r5, r0
   175e4:	add	r0, r2, #1
   175e8:	mov	r6, r1
   175ec:	mov	sl, r3
   175f0:	str	r2, [fp, #-80]	; 0xffffffb0
   175f4:	str	r0, [sp, #72]	; 0x48
   175f8:	ldr	r0, [fp, #12]
   175fc:	and	r1, r0, #1
   17600:	str	r1, [sp, #36]	; 0x24
   17604:	and	r1, r0, #4
   17608:	str	r1, [sp, #32]
   1760c:	ubfx	r9, r0, #1, #1
   17610:	bl	112d8 <__ctype_get_mb_cur_max@plt>
   17614:	str	r0, [sp, #40]	; 0x28
   17618:	ldr	r0, [fp, #24]
   1761c:	ldr	r7, [fp, #8]
   17620:	mov	r1, #0
   17624:	str	r5, [fp, #-84]	; 0xffffffac
   17628:	str	r1, [fp, #-56]	; 0xffffffc8
   1762c:	mov	r1, #0
   17630:	str	r1, [sp, #60]	; 0x3c
   17634:	mov	r1, #1
   17638:	str	r1, [fp, #-48]	; 0xffffffd0
   1763c:	str	r0, [sp, #80]	; 0x50
   17640:	ldr	r0, [fp, #20]
   17644:	str	r0, [sp, #76]	; 0x4c
   17648:	mov	r0, #0
   1764c:	str	r0, [sp, #56]	; 0x38
   17650:	mov	r0, #0
   17654:	str	r0, [fp, #-88]	; 0xffffffa8
   17658:	mov	r0, #0
   1765c:	str	r0, [fp, #-72]	; 0xffffffb8
   17660:	mov	r0, #0
   17664:	cmp	r7, #10
   17668:	bhi	185fc <__assert_fail@plt+0x7114>
   1766c:	add	r1, pc, #24
   17670:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17674:	mov	r4, r6
   17678:	mov	r8, #0
   1767c:	mov	r2, #1
   17680:	mov	r3, #0
   17684:	mov	lr, sl
   17688:	ldr	pc, [r1, r7, lsl #2]
   1768c:	andeq	r7, r1, r0, asr r7
   17690:	andeq	r7, r1, r4, lsr #15
   17694:	andeq	r7, r1, r4, ror #14
   17698:	andeq	r7, r1, r8, asr #14
   1769c:	muleq	r1, r8, r7
   176a0:	andeq	r7, r1, ip, asr #15
   176a4:	andeq	r7, r1, r4, ror r7
   176a8:	andeq	r7, r1, r0, asr r8
   176ac:			; <UNDEFINED> instruction: 0x000176b8
   176b0:			; <UNDEFINED> instruction: 0x000176b8
   176b4:	andeq	r7, r1, r0, ror #13
   176b8:	movw	r0, #47694	; 0xba4e
   176bc:	mov	r1, r7
   176c0:	movt	r0, #1
   176c4:	bl	19004 <__assert_fail@plt+0x7b1c>
   176c8:	str	r0, [sp, #76]	; 0x4c
   176cc:	movw	r0, #47696	; 0xba50
   176d0:	mov	r1, r7
   176d4:	movt	r0, #1
   176d8:	bl	19004 <__assert_fail@plt+0x7b1c>
   176dc:	str	r0, [sp, #80]	; 0x50
   176e0:	mov	r8, #0
   176e4:	tst	r9, #1
   176e8:	bne	17720 <__assert_fail@plt+0x6238>
   176ec:	ldr	r0, [sp, #76]	; 0x4c
   176f0:	ldrb	r0, [r0]
   176f4:	cmp	r0, #0
   176f8:	beq	17720 <__assert_fail@plt+0x6238>
   176fc:	ldr	r1, [sp, #76]	; 0x4c
   17700:	mov	r8, #0
   17704:	add	r1, r1, #1
   17708:	cmp	r8, r4
   1770c:	strbcc	r0, [r5, r8]
   17710:	ldrb	r0, [r1, r8]
   17714:	add	r8, r8, #1
   17718:	cmp	r0, #0
   1771c:	bne	17708 <__assert_fail@plt+0x6220>
   17720:	ldr	r6, [sp, #80]	; 0x50
   17724:	mov	r0, r6
   17728:	bl	11374 <strlen@plt>
   1772c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17730:	str	r0, [fp, #-72]	; 0xffffffb8
   17734:	str	r6, [fp, #-88]	; 0xffffffa8
   17738:	mov	r2, #1
   1773c:	mov	r3, r9
   17740:	mov	lr, sl
   17744:	b	17850 <__assert_fail@plt+0x6368>
   17748:	mov	r0, #1
   1774c:	b	177a4 <__assert_fail@plt+0x62bc>
   17750:	mov	r7, #0
   17754:	mov	r8, #0
   17758:	mov	r2, r0
   1775c:	mov	r3, #0
   17760:	b	17850 <__assert_fail@plt+0x6368>
   17764:	tst	r9, #1
   17768:	bne	177a4 <__assert_fail@plt+0x62bc>
   1776c:	mov	r2, r0
   17770:	b	177fc <__assert_fail@plt+0x6314>
   17774:	mov	r0, #1
   17778:	mov	r8, #0
   1777c:	mov	r7, #5
   17780:	mov	r2, #1
   17784:	str	r0, [fp, #-72]	; 0xffffffb8
   17788:	movw	r0, #47692	; 0xba4c
   1778c:	movt	r0, #1
   17790:	str	r0, [fp, #-88]	; 0xffffffa8
   17794:	b	177c4 <__assert_fail@plt+0x62dc>
   17798:	mov	r2, #1
   1779c:	tst	r9, #1
   177a0:	beq	177fc <__assert_fail@plt+0x6314>
   177a4:	mov	r1, #1
   177a8:	mov	r8, #0
   177ac:	mov	r7, #2
   177b0:	mov	r2, r0
   177b4:	str	r1, [fp, #-72]	; 0xffffffb8
   177b8:	movw	r1, #47696	; 0xba50
   177bc:	movt	r1, #1
   177c0:	str	r1, [fp, #-88]	; 0xffffffa8
   177c4:	mov	r3, #1
   177c8:	b	17850 <__assert_fail@plt+0x6368>
   177cc:	tst	r9, #1
   177d0:	beq	17820 <__assert_fail@plt+0x6338>
   177d4:	mov	r0, #1
   177d8:	mov	r8, #0
   177dc:	mov	r2, #1
   177e0:	mov	r3, #1
   177e4:	mov	r7, #5
   177e8:	str	r0, [fp, #-72]	; 0xffffffb8
   177ec:	movw	r0, #47692	; 0xba4c
   177f0:	movt	r0, #1
   177f4:	str	r0, [fp, #-88]	; 0xffffffa8
   177f8:	b	17850 <__assert_fail@plt+0x6368>
   177fc:	cmp	r4, #0
   17800:	mov	r8, #1
   17804:	mov	r3, #0
   17808:	mov	r7, #2
   1780c:	movne	r0, #39	; 0x27
   17810:	strbne	r0, [r5]
   17814:	movw	r0, #47696	; 0xba50
   17818:	movt	r0, #1
   1781c:	b	17844 <__assert_fail@plt+0x635c>
   17820:	cmp	r4, #0
   17824:	mov	r8, #1
   17828:	mov	r2, #1
   1782c:	mov	r7, #5
   17830:	mov	r3, #0
   17834:	movne	r0, #34	; 0x22
   17838:	strbne	r0, [r5]
   1783c:	movw	r0, #47692	; 0xba4c
   17840:	movt	r0, #1
   17844:	str	r0, [fp, #-88]	; 0xffffffa8
   17848:	mov	r0, #1
   1784c:	str	r0, [fp, #-72]	; 0xffffffb8
   17850:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17854:	eor	r6, r3, #1
   17858:	str	r7, [fp, #-68]	; 0xffffffbc
   1785c:	str	r3, [fp, #-76]	; 0xffffffb4
   17860:	str	r2, [sp, #84]	; 0x54
   17864:	str	r6, [sp, #92]	; 0x5c
   17868:	cmp	r0, #0
   1786c:	movwne	r0, #1
   17870:	and	r1, r0, r3
   17874:	and	r1, r2, r1
   17878:	str	r1, [sp, #48]	; 0x30
   1787c:	sub	r1, r7, #2
   17880:	clz	r1, r1
   17884:	lsr	r1, r1, #5
   17888:	and	r1, r1, r3
   1788c:	str	r1, [sp, #64]	; 0x40
   17890:	subs	r1, r7, #2
   17894:	mov	r7, #0
   17898:	movwne	r1, #1
   1789c:	orr	r6, r1, r6
   178a0:	and	r1, r1, r2
   178a4:	and	r0, r0, r1
   178a8:	str	r6, [sp, #68]	; 0x44
   178ac:	str	r0, [fp, #-60]	; 0xffffffc4
   178b0:	orr	r0, r1, r3
   178b4:	ldr	r1, [fp, #16]
   178b8:	eor	r0, r0, #1
   178bc:	clz	r1, r1
   178c0:	lsr	r1, r1, #5
   178c4:	orr	r0, r1, r0
   178c8:	str	r0, [fp, #-64]	; 0xffffffc0
   178cc:	eor	r0, r2, #1
   178d0:	str	r0, [sp, #52]	; 0x34
   178d4:	cmn	lr, #1
   178d8:	beq	178e8 <__assert_fail@plt+0x6400>
   178dc:	cmp	r7, lr
   178e0:	bne	178f4 <__assert_fail@plt+0x640c>
   178e4:	b	1843c <__assert_fail@plt+0x6f54>
   178e8:	ldrb	r0, [ip, r7]
   178ec:	cmp	r0, #0
   178f0:	beq	18444 <__assert_fail@plt+0x6f5c>
   178f4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   178f8:	mov	sl, #0
   178fc:	cmp	r0, #0
   17900:	beq	17938 <__assert_fail@plt+0x6450>
   17904:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17908:	add	r5, r7, r0
   1790c:	cmp	r0, #2
   17910:	bcc	1792c <__assert_fail@plt+0x6444>
   17914:	cmn	lr, #1
   17918:	bne	1792c <__assert_fail@plt+0x6444>
   1791c:	mov	r0, ip
   17920:	bl	11374 <strlen@plt>
   17924:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17928:	mov	lr, r0
   1792c:	cmp	r5, lr
   17930:	bls	17940 <__assert_fail@plt+0x6458>
   17934:	ldr	r5, [fp, #-84]	; 0xffffffac
   17938:	mov	r0, #0
   1793c:	b	1798c <__assert_fail@plt+0x64a4>
   17940:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17944:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17948:	add	r0, ip, r7
   1794c:	mov	r6, r4
   17950:	mov	r4, lr
   17954:	bl	11368 <bcmp@plt>
   17958:	ldr	r2, [sp, #92]	; 0x5c
   1795c:	cmp	r0, #0
   17960:	ldr	r5, [fp, #-84]	; 0xffffffac
   17964:	mov	r1, r0
   17968:	movwne	r1, #1
   1796c:	orr	r1, r1, r2
   17970:	tst	r1, #1
   17974:	beq	184cc <__assert_fail@plt+0x6fe4>
   17978:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1797c:	clz	r0, r0
   17980:	mov	lr, r4
   17984:	mov	r4, r6
   17988:	lsr	r0, r0, #5
   1798c:	str	r0, [fp, #-52]	; 0xffffffcc
   17990:	ldrb	r6, [ip, r7]
   17994:	cmp	r6, #126	; 0x7e
   17998:	bhi	17ec8 <__assert_fail@plt+0x69e0>
   1799c:	add	r3, pc, #16
   179a0:	mov	r9, #1
   179a4:	mov	r2, #110	; 0x6e
   179a8:	mov	r0, #97	; 0x61
   179ac:	mov	r1, #0
   179b0:	ldr	pc, [r3, r6, lsl #2]
   179b4:	andeq	r7, r1, r8, lsr #26
   179b8:	andeq	r7, r1, r8, asr #29
   179bc:	andeq	r7, r1, r8, asr #29
   179c0:	andeq	r7, r1, r8, asr #29
   179c4:	andeq	r7, r1, r8, asr #29
   179c8:	andeq	r7, r1, r8, asr #29
   179cc:	andeq	r7, r1, r8, asr #29
   179d0:	andeq	r7, r1, r4, lsr #31
   179d4:	andeq	r7, r1, r8, lsl #26
   179d8:	andeq	r7, r1, r0, lsl #26
   179dc:	andeq	r7, r1, r4, lsl sp
   179e0:	andeq	r7, r1, r0, lsr lr
   179e4:	strdeq	r7, [r1], -r8
   179e8:	andeq	r7, r1, r0, lsl sp
   179ec:	andeq	r7, r1, r8, asr #29
   179f0:	andeq	r7, r1, r8, asr #29
   179f4:	andeq	r7, r1, r8, asr #29
   179f8:	andeq	r7, r1, r8, asr #29
   179fc:	andeq	r7, r1, r8, asr #29
   17a00:	andeq	r7, r1, r8, asr #29
   17a04:	andeq	r7, r1, r8, asr #29
   17a08:	andeq	r7, r1, r8, asr #29
   17a0c:	andeq	r7, r1, r8, asr #29
   17a10:	andeq	r7, r1, r8, asr #29
   17a14:	andeq	r7, r1, r8, asr #29
   17a18:	andeq	r7, r1, r8, asr #29
   17a1c:	andeq	r7, r1, r8, asr #29
   17a20:	andeq	r7, r1, r8, asr #29
   17a24:	andeq	r7, r1, r8, asr #29
   17a28:	andeq	r7, r1, r8, asr #29
   17a2c:	andeq	r7, r1, r8, asr #29
   17a30:	andeq	r7, r1, r8, asr #29
   17a34:	andeq	r7, r1, ip, lsr #25
   17a38:			; <UNDEFINED> instruction: 0x00017cb0
   17a3c:			; <UNDEFINED> instruction: 0x00017cb0
   17a40:	muleq	r1, r8, ip
   17a44:			; <UNDEFINED> instruction: 0x00017cb0
   17a48:			; <UNDEFINED> instruction: 0x00017bb0
   17a4c:			; <UNDEFINED> instruction: 0x00017cb0
   17a50:	andeq	r7, r1, r8, lsr lr
   17a54:			; <UNDEFINED> instruction: 0x00017cb0
   17a58:			; <UNDEFINED> instruction: 0x00017cb0
   17a5c:			; <UNDEFINED> instruction: 0x00017cb0
   17a60:			; <UNDEFINED> instruction: 0x00017bb0
   17a64:			; <UNDEFINED> instruction: 0x00017bb0
   17a68:			; <UNDEFINED> instruction: 0x00017bb0
   17a6c:			; <UNDEFINED> instruction: 0x00017bb0
   17a70:			; <UNDEFINED> instruction: 0x00017bb0
   17a74:			; <UNDEFINED> instruction: 0x00017bb0
   17a78:			; <UNDEFINED> instruction: 0x00017bb0
   17a7c:			; <UNDEFINED> instruction: 0x00017bb0
   17a80:			; <UNDEFINED> instruction: 0x00017bb0
   17a84:			; <UNDEFINED> instruction: 0x00017bb0
   17a88:			; <UNDEFINED> instruction: 0x00017bb0
   17a8c:			; <UNDEFINED> instruction: 0x00017bb0
   17a90:			; <UNDEFINED> instruction: 0x00017bb0
   17a94:			; <UNDEFINED> instruction: 0x00017bb0
   17a98:			; <UNDEFINED> instruction: 0x00017bb0
   17a9c:			; <UNDEFINED> instruction: 0x00017bb0
   17aa0:			; <UNDEFINED> instruction: 0x00017cb0
   17aa4:			; <UNDEFINED> instruction: 0x00017cb0
   17aa8:			; <UNDEFINED> instruction: 0x00017cb0
   17aac:			; <UNDEFINED> instruction: 0x00017cb0
   17ab0:	andeq	r7, r1, r0, lsl #28
   17ab4:	andeq	r7, r1, r8, asr #29
   17ab8:			; <UNDEFINED> instruction: 0x00017bb0
   17abc:			; <UNDEFINED> instruction: 0x00017bb0
   17ac0:			; <UNDEFINED> instruction: 0x00017bb0
   17ac4:			; <UNDEFINED> instruction: 0x00017bb0
   17ac8:			; <UNDEFINED> instruction: 0x00017bb0
   17acc:			; <UNDEFINED> instruction: 0x00017bb0
   17ad0:			; <UNDEFINED> instruction: 0x00017bb0
   17ad4:			; <UNDEFINED> instruction: 0x00017bb0
   17ad8:			; <UNDEFINED> instruction: 0x00017bb0
   17adc:			; <UNDEFINED> instruction: 0x00017bb0
   17ae0:			; <UNDEFINED> instruction: 0x00017bb0
   17ae4:			; <UNDEFINED> instruction: 0x00017bb0
   17ae8:			; <UNDEFINED> instruction: 0x00017bb0
   17aec:			; <UNDEFINED> instruction: 0x00017bb0
   17af0:			; <UNDEFINED> instruction: 0x00017bb0
   17af4:			; <UNDEFINED> instruction: 0x00017bb0
   17af8:			; <UNDEFINED> instruction: 0x00017bb0
   17afc:			; <UNDEFINED> instruction: 0x00017bb0
   17b00:			; <UNDEFINED> instruction: 0x00017bb0
   17b04:			; <UNDEFINED> instruction: 0x00017bb0
   17b08:			; <UNDEFINED> instruction: 0x00017bb0
   17b0c:			; <UNDEFINED> instruction: 0x00017bb0
   17b10:			; <UNDEFINED> instruction: 0x00017bb0
   17b14:			; <UNDEFINED> instruction: 0x00017bb0
   17b18:			; <UNDEFINED> instruction: 0x00017bb0
   17b1c:			; <UNDEFINED> instruction: 0x00017bb0
   17b20:			; <UNDEFINED> instruction: 0x00017cb0
   17b24:	ldrdeq	r7, [r1], -r8
   17b28:			; <UNDEFINED> instruction: 0x00017bb0
   17b2c:			; <UNDEFINED> instruction: 0x00017cb0
   17b30:			; <UNDEFINED> instruction: 0x00017bb0
   17b34:			; <UNDEFINED> instruction: 0x00017cb0
   17b38:			; <UNDEFINED> instruction: 0x00017bb0
   17b3c:			; <UNDEFINED> instruction: 0x00017bb0
   17b40:			; <UNDEFINED> instruction: 0x00017bb0
   17b44:			; <UNDEFINED> instruction: 0x00017bb0
   17b48:			; <UNDEFINED> instruction: 0x00017bb0
   17b4c:			; <UNDEFINED> instruction: 0x00017bb0
   17b50:			; <UNDEFINED> instruction: 0x00017bb0
   17b54:			; <UNDEFINED> instruction: 0x00017bb0
   17b58:			; <UNDEFINED> instruction: 0x00017bb0
   17b5c:			; <UNDEFINED> instruction: 0x00017bb0
   17b60:			; <UNDEFINED> instruction: 0x00017bb0
   17b64:			; <UNDEFINED> instruction: 0x00017bb0
   17b68:			; <UNDEFINED> instruction: 0x00017bb0
   17b6c:			; <UNDEFINED> instruction: 0x00017bb0
   17b70:			; <UNDEFINED> instruction: 0x00017bb0
   17b74:			; <UNDEFINED> instruction: 0x00017bb0
   17b78:			; <UNDEFINED> instruction: 0x00017bb0
   17b7c:			; <UNDEFINED> instruction: 0x00017bb0
   17b80:			; <UNDEFINED> instruction: 0x00017bb0
   17b84:			; <UNDEFINED> instruction: 0x00017bb0
   17b88:			; <UNDEFINED> instruction: 0x00017bb0
   17b8c:			; <UNDEFINED> instruction: 0x00017bb0
   17b90:			; <UNDEFINED> instruction: 0x00017bb0
   17b94:			; <UNDEFINED> instruction: 0x00017bb0
   17b98:			; <UNDEFINED> instruction: 0x00017bb0
   17b9c:			; <UNDEFINED> instruction: 0x00017bb0
   17ba0:	andeq	r7, r1, ip, ror #24
   17ba4:			; <UNDEFINED> instruction: 0x00017cb0
   17ba8:	andeq	r7, r1, ip, ror #24
   17bac:	muleq	r1, r8, ip
   17bb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17bb4:	tst	r0, #1
   17bb8:	bne	17be4 <__assert_fail@plt+0x66fc>
   17bbc:	ldr	r1, [fp, #16]
   17bc0:	ubfx	r0, r6, #5, #3
   17bc4:	mov	r2, #1
   17bc8:	ldr	r0, [r1, r0, lsl #2]
   17bcc:	and	r1, r6, #31
   17bd0:	tst	r0, r2, lsl r1
   17bd4:	beq	17be4 <__assert_fail@plt+0x66fc>
   17bd8:	mov	r0, r6
   17bdc:	mov	r1, r9
   17be0:	b	17bf8 <__assert_fail@plt+0x6710>
   17be4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17be8:	mov	r1, r9
   17bec:	cmp	r0, #0
   17bf0:	mov	r0, r6
   17bf4:	beq	17f38 <__assert_fail@plt+0x6a50>
   17bf8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17bfc:	tst	r2, #1
   17c00:	bne	18508 <__assert_fail@plt+0x7020>
   17c04:	ldr	r2, [fp, #-68]	; 0xffffffbc
   17c08:	ldr	r3, [fp, #-56]	; 0xffffffc8
   17c0c:	subs	r2, r2, #2
   17c10:	movwne	r2, #1
   17c14:	orr	r2, r2, r3
   17c18:	tst	r2, #1
   17c1c:	bne	17c58 <__assert_fail@plt+0x6770>
   17c20:	cmp	r8, r4
   17c24:	movcc	r2, #39	; 0x27
   17c28:	strbcc	r2, [r5, r8]
   17c2c:	add	r2, r8, #1
   17c30:	cmp	r2, r4
   17c34:	movcc	r3, #36	; 0x24
   17c38:	strbcc	r3, [r5, r2]
   17c3c:	add	r2, r8, #2
   17c40:	add	r8, r8, #3
   17c44:	cmp	r2, r4
   17c48:	movcc	r3, #39	; 0x27
   17c4c:	strbcc	r3, [r5, r2]
   17c50:	mov	r2, #1
   17c54:	str	r2, [fp, #-56]	; 0xffffffc8
   17c58:	cmp	r8, r4
   17c5c:	movcc	r2, #92	; 0x5c
   17c60:	strbcc	r2, [r5, r8]
   17c64:	add	r8, r8, #1
   17c68:	b	17f7c <__assert_fail@plt+0x6a94>
   17c6c:	cmp	lr, #1
   17c70:	beq	17c98 <__assert_fail@plt+0x67b0>
   17c74:	mov	r9, #0
   17c78:	cmn	lr, #1
   17c7c:	bne	17ca4 <__assert_fail@plt+0x67bc>
   17c80:	ldrb	r0, [ip, #1]
   17c84:	cmp	r0, #0
   17c88:	beq	17c98 <__assert_fail@plt+0x67b0>
   17c8c:	mvn	lr, #0
   17c90:	mov	sl, #0
   17c94:	b	17bb0 <__assert_fail@plt+0x66c8>
   17c98:	mov	r9, #0
   17c9c:	cmp	r7, #0
   17ca0:	beq	17cac <__assert_fail@plt+0x67c4>
   17ca4:	mov	sl, #0
   17ca8:	b	17bb0 <__assert_fail@plt+0x66c8>
   17cac:	mov	r1, #1
   17cb0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17cb4:	cmp	r0, #2
   17cb8:	bne	17cd0 <__assert_fail@plt+0x67e8>
   17cbc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17cc0:	mov	r9, r1
   17cc4:	tst	r0, #1
   17cc8:	beq	17bb0 <__assert_fail@plt+0x66c8>
   17ccc:	b	18508 <__assert_fail@plt+0x7020>
   17cd0:	mov	r9, r1
   17cd4:	b	17bb0 <__assert_fail@plt+0x66c8>
   17cd8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17cdc:	cmp	r0, #2
   17ce0:	bne	17f1c <__assert_fail@plt+0x6a34>
   17ce4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17ce8:	tst	r0, #1
   17cec:	bne	18508 <__assert_fail@plt+0x7020>
   17cf0:	mov	sl, #0
   17cf4:	b	17f30 <__assert_fail@plt+0x6a48>
   17cf8:	mov	r0, #102	; 0x66
   17cfc:	b	17fa4 <__assert_fail@plt+0x6abc>
   17d00:	mov	r2, #116	; 0x74
   17d04:	b	17d14 <__assert_fail@plt+0x682c>
   17d08:	mov	r0, #98	; 0x62
   17d0c:	b	17fa4 <__assert_fail@plt+0x6abc>
   17d10:	mov	r2, #114	; 0x72
   17d14:	ldr	r0, [sp, #68]	; 0x44
   17d18:	tst	r0, #1
   17d1c:	mov	r0, r2
   17d20:	bne	17fa4 <__assert_fail@plt+0x6abc>
   17d24:	b	18508 <__assert_fail@plt+0x7020>
   17d28:	ldr	r0, [sp, #84]	; 0x54
   17d2c:	tst	r0, #1
   17d30:	beq	17fc0 <__assert_fail@plt+0x6ad8>
   17d34:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17d38:	tst	r0, #1
   17d3c:	bne	185f4 <__assert_fail@plt+0x710c>
   17d40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17d44:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17d48:	subs	r0, r0, #2
   17d4c:	movwne	r0, #1
   17d50:	orr	r0, r0, r1
   17d54:	tst	r0, #1
   17d58:	bne	17d94 <__assert_fail@plt+0x68ac>
   17d5c:	cmp	r8, r4
   17d60:	movcc	r0, #39	; 0x27
   17d64:	strbcc	r0, [r5, r8]
   17d68:	add	r0, r8, #1
   17d6c:	cmp	r0, r4
   17d70:	movcc	r1, #36	; 0x24
   17d74:	strbcc	r1, [r5, r0]
   17d78:	add	r0, r8, #2
   17d7c:	add	r8, r8, #3
   17d80:	cmp	r0, r4
   17d84:	movcc	r1, #39	; 0x27
   17d88:	strbcc	r1, [r5, r0]
   17d8c:	mov	r0, #1
   17d90:	str	r0, [fp, #-56]	; 0xffffffc8
   17d94:	ldr	r1, [fp, #-68]	; 0xffffffbc
   17d98:	cmp	r8, r4
   17d9c:	mov	r9, #0
   17da0:	mov	sl, #1
   17da4:	mov	r6, #48	; 0x30
   17da8:	movcc	r0, #92	; 0x5c
   17dac:	strbcc	r0, [r5, r8]
   17db0:	add	r0, r8, #1
   17db4:	cmp	r1, #2
   17db8:	beq	18188 <__assert_fail@plt+0x6ca0>
   17dbc:	add	r1, r7, #1
   17dc0:	cmp	r1, lr
   17dc4:	bcs	18188 <__assert_fail@plt+0x6ca0>
   17dc8:	ldrb	r1, [ip, r1]
   17dcc:	sub	r1, r1, #48	; 0x30
   17dd0:	uxtb	r1, r1
   17dd4:	cmp	r1, #9
   17dd8:	bhi	18188 <__assert_fail@plt+0x6ca0>
   17ddc:	cmp	r0, r4
   17de0:	movcc	r1, #48	; 0x30
   17de4:	strbcc	r1, [r5, r0]
   17de8:	add	r0, r8, #2
   17dec:	add	r8, r8, #3
   17df0:	cmp	r0, r4
   17df4:	movcc	r1, #48	; 0x30
   17df8:	strbcc	r1, [r5, r0]
   17dfc:	b	17bb0 <__assert_fail@plt+0x66c8>
   17e00:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e04:	mov	sl, #0
   17e08:	mov	r6, #63	; 0x3f
   17e0c:	cmp	r0, #5
   17e10:	beq	18190 <__assert_fail@plt+0x6ca8>
   17e14:	cmp	r0, #2
   17e18:	bne	18238 <__assert_fail@plt+0x6d50>
   17e1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e20:	mov	r9, #0
   17e24:	tst	r0, #1
   17e28:	beq	17bb0 <__assert_fail@plt+0x66c8>
   17e2c:	b	18508 <__assert_fail@plt+0x7020>
   17e30:	mov	r0, #118	; 0x76
   17e34:	b	17fa4 <__assert_fail@plt+0x6abc>
   17e38:	mov	r0, #1
   17e3c:	mov	r6, #39	; 0x27
   17e40:	str	r0, [sp, #60]	; 0x3c
   17e44:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e48:	cmp	r0, #2
   17e4c:	bne	17fdc <__assert_fail@plt+0x6af4>
   17e50:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17e54:	tst	r0, #1
   17e58:	bne	18508 <__assert_fail@plt+0x7020>
   17e5c:	ldr	r2, [sp, #56]	; 0x38
   17e60:	clz	r1, r4
   17e64:	mov	sl, #0
   17e68:	mov	r9, #1
   17e6c:	lsr	r1, r1, #5
   17e70:	cmp	r2, #0
   17e74:	mov	r0, r2
   17e78:	movwne	r0, #1
   17e7c:	orrs	r0, r0, r1
   17e80:	moveq	r2, r4
   17e84:	moveq	r4, r0
   17e88:	cmp	r8, r4
   17e8c:	str	r2, [sp, #56]	; 0x38
   17e90:	movcc	r0, #39	; 0x27
   17e94:	strbcc	r0, [r5, r8]
   17e98:	add	r0, r8, #1
   17e9c:	cmp	r0, r4
   17ea0:	movcc	r1, #92	; 0x5c
   17ea4:	strbcc	r1, [r5, r0]
   17ea8:	add	r0, r8, #2
   17eac:	add	r8, r8, #3
   17eb0:	cmp	r0, r4
   17eb4:	movcc	r1, #39	; 0x27
   17eb8:	strbcc	r1, [r5, r0]
   17ebc:	mov	r0, #0
   17ec0:	str	r0, [fp, #-56]	; 0xffffffc8
   17ec4:	b	17bb0 <__assert_fail@plt+0x66c8>
   17ec8:	ldr	r0, [sp, #40]	; 0x28
   17ecc:	str	r4, [sp, #88]	; 0x58
   17ed0:	cmp	r0, #1
   17ed4:	bne	17fe4 <__assert_fail@plt+0x6afc>
   17ed8:	str	lr, [sp, #28]
   17edc:	bl	11350 <__ctype_b_loc@plt>
   17ee0:	ldr	r0, [r0]
   17ee4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17ee8:	mov	r2, #1
   17eec:	add	r0, r0, r6, lsl #1
   17ef0:	ldrb	r0, [r0, #1]
   17ef4:	ubfx	r9, r0, #6, #1
   17ef8:	ldr	r0, [sp, #52]	; 0x34
   17efc:	cmp	r2, #1
   17f00:	orr	r0, r9, r0
   17f04:	bhi	18240 <__assert_fail@plt+0x6d58>
   17f08:	tst	r0, #1
   17f0c:	beq	18240 <__assert_fail@plt+0x6d58>
   17f10:	ldr	lr, [sp, #28]
   17f14:	ldr	r4, [sp, #88]	; 0x58
   17f18:	b	17bb0 <__assert_fail@plt+0x66c8>
   17f1c:	ldr	r1, [sp, #48]	; 0x30
   17f20:	mov	sl, #0
   17f24:	mov	r0, #92	; 0x5c
   17f28:	cmp	r1, #0
   17f2c:	beq	17fa4 <__assert_fail@plt+0x6abc>
   17f30:	mov	r6, #92	; 0x5c
   17f34:	mov	r9, #0
   17f38:	cmp	sl, #0
   17f3c:	bne	17f74 <__assert_fail@plt+0x6a8c>
   17f40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   17f44:	tst	r0, #1
   17f48:	beq	17f74 <__assert_fail@plt+0x6a8c>
   17f4c:	cmp	r8, r4
   17f50:	movcc	r0, #39	; 0x27
   17f54:	strbcc	r0, [r5, r8]
   17f58:	add	r0, r8, #1
   17f5c:	add	r8, r8, #2
   17f60:	cmp	r0, r4
   17f64:	movcc	r1, #39	; 0x27
   17f68:	strbcc	r1, [r5, r0]
   17f6c:	mov	r0, #0
   17f70:	str	r0, [fp, #-56]	; 0xffffffc8
   17f74:	mov	r1, r9
   17f78:	mov	r0, r6
   17f7c:	cmp	r8, r4
   17f80:	strbcc	r0, [r5, r8]
   17f84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   17f88:	add	r8, r8, #1
   17f8c:	and	r0, r0, r1
   17f90:	str	r0, [fp, #-48]	; 0xffffffd0
   17f94:	add	r7, r7, #1
   17f98:	cmn	lr, #1
   17f9c:	bne	178dc <__assert_fail@plt+0x63f4>
   17fa0:	b	178e8 <__assert_fail@plt+0x6400>
   17fa4:	ldr	r1, [sp, #84]	; 0x54
   17fa8:	mov	sl, #0
   17fac:	mov	r9, #0
   17fb0:	tst	r1, #1
   17fb4:	mov	r1, #0
   17fb8:	beq	17bb0 <__assert_fail@plt+0x66c8>
   17fbc:	b	17bf8 <__assert_fail@plt+0x6710>
   17fc0:	ldr	r0, [sp, #36]	; 0x24
   17fc4:	mov	r6, #0
   17fc8:	mov	sl, #0
   17fcc:	mov	r9, #0
   17fd0:	cmp	r0, #0
   17fd4:	beq	17bb0 <__assert_fail@plt+0x66c8>
   17fd8:	b	17f94 <__assert_fail@plt+0x6aac>
   17fdc:	mov	r9, #1
   17fe0:	b	17bb0 <__assert_fail@plt+0x66c8>
   17fe4:	mov	r0, #0
   17fe8:	cmn	lr, #1
   17fec:	sub	r4, fp, #40	; 0x28
   17ff0:	str	r0, [fp, #-36]	; 0xffffffdc
   17ff4:	str	r0, [fp, #-40]	; 0xffffffd8
   17ff8:	bne	1800c <__assert_fail@plt+0x6b24>
   17ffc:	mov	r0, ip
   18000:	bl	11374 <strlen@plt>
   18004:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18008:	mov	lr, r0
   1800c:	ldr	r0, [sp, #72]	; 0x48
   18010:	mov	r9, #1
   18014:	mov	r2, #0
   18018:	str	lr, [sp, #28]
   1801c:	add	r0, r0, r7
   18020:	str	r0, [sp, #20]
   18024:	b	18068 <__assert_fail@plt+0x6b80>
   18028:	ldr	r5, [sp, #44]	; 0x2c
   1802c:	add	r5, r0, r5
   18030:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18034:	bl	112a8 <iswprint@plt>
   18038:	cmp	r0, #0
   1803c:	sub	r4, fp, #40	; 0x28
   18040:	movwne	r0, #1
   18044:	and	r9, r9, r0
   18048:	mov	r0, r4
   1804c:	bl	11260 <mbsinit@plt>
   18050:	mov	r2, r5
   18054:	ldr	lr, [sp, #28]
   18058:	ldr	r5, [fp, #-84]	; 0xffffffac
   1805c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18060:	cmp	r0, #0
   18064:	bne	17ef8 <__assert_fail@plt+0x6a10>
   18068:	add	r0, r2, r7
   1806c:	str	r2, [sp, #44]	; 0x2c
   18070:	mov	r3, r4
   18074:	add	r1, ip, r0
   18078:	str	r0, [sp, #24]
   1807c:	sub	r2, lr, r0
   18080:	sub	r0, fp, #44	; 0x2c
   18084:	bl	1a4a0 <__assert_fail@plt+0x8fb8>
   18088:	cmp	r0, #0
   1808c:	beq	18430 <__assert_fail@plt+0x6f48>
   18090:	cmn	r0, #1
   18094:	beq	183ec <__assert_fail@plt+0x6f04>
   18098:	ldr	lr, [sp, #28]
   1809c:	cmn	r0, #2
   180a0:	beq	183f4 <__assert_fail@plt+0x6f0c>
   180a4:	ldr	r2, [sp, #64]	; 0x40
   180a8:	ldr	r4, [sp, #88]	; 0x58
   180ac:	ldr	ip, [sp, #84]	; 0x54
   180b0:	cmp	r0, #2
   180b4:	mov	r1, #0
   180b8:	movwcc	r1, #1
   180bc:	eor	r2, r2, #1
   180c0:	orrs	r1, r2, r1
   180c4:	bne	18028 <__assert_fail@plt+0x6b40>
   180c8:	ldr	r1, [sp, #44]	; 0x2c
   180cc:	ldr	r2, [sp, #20]
   180d0:	add	r1, r2, r1
   180d4:	sub	r2, r0, #1
   180d8:	b	180e8 <__assert_fail@plt+0x6c00>
   180dc:	add	r1, r1, #1
   180e0:	subs	r2, r2, #1
   180e4:	beq	18028 <__assert_fail@plt+0x6b40>
   180e8:	ldrb	r3, [r1]
   180ec:	sub	r3, r3, #91	; 0x5b
   180f0:	cmp	r3, #33	; 0x21
   180f4:	bhi	180dc <__assert_fail@plt+0x6bf4>
   180f8:	add	r5, pc, #0
   180fc:	ldr	pc, [r5, r3, lsl #2]
   18100:	andeq	r8, r1, r4, ror #9
   18104:	andeq	r8, r1, r4, ror #9
   18108:	ldrdeq	r8, [r1], -ip
   1810c:	andeq	r8, r1, r4, ror #9
   18110:	ldrdeq	r8, [r1], -ip
   18114:	andeq	r8, r1, r4, ror #9
   18118:	ldrdeq	r8, [r1], -ip
   1811c:	ldrdeq	r8, [r1], -ip
   18120:	ldrdeq	r8, [r1], -ip
   18124:	ldrdeq	r8, [r1], -ip
   18128:	ldrdeq	r8, [r1], -ip
   1812c:	ldrdeq	r8, [r1], -ip
   18130:	ldrdeq	r8, [r1], -ip
   18134:	ldrdeq	r8, [r1], -ip
   18138:	ldrdeq	r8, [r1], -ip
   1813c:	ldrdeq	r8, [r1], -ip
   18140:	ldrdeq	r8, [r1], -ip
   18144:	ldrdeq	r8, [r1], -ip
   18148:	ldrdeq	r8, [r1], -ip
   1814c:	ldrdeq	r8, [r1], -ip
   18150:	ldrdeq	r8, [r1], -ip
   18154:	ldrdeq	r8, [r1], -ip
   18158:	ldrdeq	r8, [r1], -ip
   1815c:	ldrdeq	r8, [r1], -ip
   18160:	ldrdeq	r8, [r1], -ip
   18164:	ldrdeq	r8, [r1], -ip
   18168:	ldrdeq	r8, [r1], -ip
   1816c:	ldrdeq	r8, [r1], -ip
   18170:	ldrdeq	r8, [r1], -ip
   18174:	ldrdeq	r8, [r1], -ip
   18178:	ldrdeq	r8, [r1], -ip
   1817c:	ldrdeq	r8, [r1], -ip
   18180:	ldrdeq	r8, [r1], -ip
   18184:	andeq	r8, r1, r4, ror #9
   18188:	mov	r8, r0
   1818c:	b	17bb0 <__assert_fail@plt+0x66c8>
   18190:	ldr	r0, [sp, #32]
   18194:	cmp	r0, #0
   18198:	beq	18238 <__assert_fail@plt+0x6d50>
   1819c:	add	r0, r7, #2
   181a0:	cmp	r0, lr
   181a4:	bcs	18238 <__assert_fail@plt+0x6d50>
   181a8:	add	r1, r7, ip
   181ac:	ldrb	r1, [r1, #1]
   181b0:	cmp	r1, #63	; 0x3f
   181b4:	bne	18238 <__assert_fail@plt+0x6d50>
   181b8:	ldrb	r9, [ip, r0]
   181bc:	sub	r2, r9, #33	; 0x21
   181c0:	cmp	r2, #29
   181c4:	bhi	18238 <__assert_fail@plt+0x6d50>
   181c8:	movw	r1, #20929	; 0x51c1
   181cc:	mov	r3, #1
   181d0:	movt	r1, #14336	; 0x3800
   181d4:	tst	r1, r3, lsl r2
   181d8:	beq	18238 <__assert_fail@plt+0x6d50>
   181dc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   181e0:	tst	r1, #1
   181e4:	bne	18508 <__assert_fail@plt+0x7020>
   181e8:	cmp	r8, r4
   181ec:	add	r2, r8, #1
   181f0:	mov	r6, r9
   181f4:	mov	r7, r0
   181f8:	mov	r9, #0
   181fc:	movcc	r1, #63	; 0x3f
   18200:	strbcc	r1, [r5, r8]
   18204:	cmp	r2, r4
   18208:	movcc	r1, #34	; 0x22
   1820c:	strbcc	r1, [r5, r2]
   18210:	add	r2, r8, #2
   18214:	cmp	r2, r4
   18218:	movcc	r1, #34	; 0x22
   1821c:	strbcc	r1, [r5, r2]
   18220:	add	r2, r8, #3
   18224:	add	r8, r8, #4
   18228:	cmp	r2, r4
   1822c:	movcc	r1, #63	; 0x3f
   18230:	strbcc	r1, [r5, r2]
   18234:	b	17bb0 <__assert_fail@plt+0x66c8>
   18238:	mov	r9, #0
   1823c:	b	17bb0 <__assert_fail@plt+0x66c8>
   18240:	ldr	lr, [sp, #28]
   18244:	ldr	r4, [fp, #-56]	; 0xffffffc8
   18248:	add	r1, r2, r7
   1824c:	mov	r2, #0
   18250:	str	r1, [sp, #44]	; 0x2c
   18254:	tst	r0, #1
   18258:	bne	18374 <__assert_fail@plt+0x6e8c>
   1825c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18260:	tst	r1, #1
   18264:	bne	18504 <__assert_fail@plt+0x701c>
   18268:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1826c:	subs	r2, r1, #2
   18270:	movwne	r2, #1
   18274:	orr	r2, r2, r4
   18278:	tst	r2, #1
   1827c:	bne	182c0 <__assert_fail@plt+0x6dd8>
   18280:	ldr	r1, [sp, #88]	; 0x58
   18284:	add	r2, r8, #1
   18288:	mov	r4, #1
   1828c:	cmp	r8, r1
   18290:	movcc	r1, #39	; 0x27
   18294:	strbcc	r1, [r5, r8]
   18298:	ldr	r1, [sp, #88]	; 0x58
   1829c:	cmp	r2, r1
   182a0:	movcc	r1, #36	; 0x24
   182a4:	strbcc	r1, [r5, r2]
   182a8:	ldr	r1, [sp, #88]	; 0x58
   182ac:	add	r2, r8, #2
   182b0:	add	r8, r8, #3
   182b4:	cmp	r2, r1
   182b8:	movcc	r1, #39	; 0x27
   182bc:	strbcc	r1, [r5, r2]
   182c0:	ldr	r1, [sp, #88]	; 0x58
   182c4:	add	r2, r8, #1
   182c8:	cmp	r8, r1
   182cc:	movcc	r1, #92	; 0x5c
   182d0:	strbcc	r1, [r5, r8]
   182d4:	ldr	r1, [sp, #88]	; 0x58
   182d8:	cmp	r2, r1
   182dc:	bcs	182f0 <__assert_fail@plt+0x6e08>
   182e0:	uxtb	r3, r6
   182e4:	mov	r1, #48	; 0x30
   182e8:	orr	r3, r1, r3, lsr #6
   182ec:	strb	r3, [r5, r2]
   182f0:	ldr	r1, [sp, #88]	; 0x58
   182f4:	add	r2, r8, #2
   182f8:	add	r8, r8, #3
   182fc:	cmp	r2, r1
   18300:	lsrcc	r3, r6, #3
   18304:	movcc	r1, #6
   18308:	bficc	r3, r1, #3, #29
   1830c:	mov	r1, #6
   18310:	bfi	r6, r1, #3, #29
   18314:	strbcc	r3, [r5, r2]
   18318:	mov	r2, #1
   1831c:	b	1839c <__assert_fail@plt+0x6eb4>
   18320:	ldr	r1, [sp, #88]	; 0x58
   18324:	ldr	r5, [fp, #-84]	; 0xffffffac
   18328:	ldr	r4, [sp, #88]	; 0x58
   1832c:	cmp	r8, r1
   18330:	movcc	r1, #39	; 0x27
   18334:	strbcc	r1, [r5, r8]
   18338:	add	r1, r8, #1
   1833c:	add	r8, r8, #2
   18340:	cmp	r1, r4
   18344:	movcc	r4, #39	; 0x27
   18348:	strbcc	r4, [r5, r1]
   1834c:	mov	r4, #0
   18350:	ldr	r1, [sp, #88]	; 0x58
   18354:	cmp	r8, r1
   18358:	ldr	r1, [sp, #72]	; 0x48
   1835c:	strbcc	r6, [r5, r8]
   18360:	add	r8, r8, #1
   18364:	ldrb	r6, [r1, r7]
   18368:	mov	r7, r3
   1836c:	tst	r0, #1
   18370:	beq	1825c <__assert_fail@plt+0x6d74>
   18374:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18378:	tst	r1, #1
   1837c:	beq	18394 <__assert_fail@plt+0x6eac>
   18380:	ldr	r1, [sp, #88]	; 0x58
   18384:	cmp	r8, r1
   18388:	movcc	r1, #92	; 0x5c
   1838c:	strbcc	r1, [r5, r8]
   18390:	add	r8, r8, #1
   18394:	mov	r1, #0
   18398:	str	r1, [fp, #-52]	; 0xffffffcc
   1839c:	ldr	r1, [sp, #44]	; 0x2c
   183a0:	add	r3, r7, #1
   183a4:	and	sl, r2, #1
   183a8:	cmp	r1, r3
   183ac:	bls	183d0 <__assert_fail@plt+0x6ee8>
   183b0:	cmp	sl, #0
   183b4:	mvn	r5, r4
   183b8:	movwne	sl, #1
   183bc:	orr	r5, r5, sl
   183c0:	tst	r5, #1
   183c4:	beq	18320 <__assert_fail@plt+0x6e38>
   183c8:	ldr	r5, [fp, #-84]	; 0xffffffac
   183cc:	b	18350 <__assert_fail@plt+0x6e68>
   183d0:	str	r4, [fp, #-56]	; 0xffffffc8
   183d4:	ldr	r4, [sp, #88]	; 0x58
   183d8:	cmp	sl, #0
   183dc:	movwne	sl, #1
   183e0:	cmp	sl, #0
   183e4:	beq	17f40 <__assert_fail@plt+0x6a58>
   183e8:	b	17f74 <__assert_fail@plt+0x6a8c>
   183ec:	mov	r9, #0
   183f0:	b	18430 <__assert_fail@plt+0x6f48>
   183f4:	ldr	r0, [sp, #24]
   183f8:	mov	r9, #0
   183fc:	cmp	lr, r0
   18400:	bls	18430 <__assert_fail@plt+0x6f48>
   18404:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18408:	ldr	r2, [sp, #44]	; 0x2c
   1840c:	add	r0, ip, r7
   18410:	ldrb	r1, [r0, r2]
   18414:	cmp	r1, #0
   18418:	beq	17ef8 <__assert_fail@plt+0x6a10>
   1841c:	add	r2, r2, #1
   18420:	add	r1, r7, r2
   18424:	cmp	r1, lr
   18428:	bcc	18410 <__assert_fail@plt+0x6f28>
   1842c:	b	17ef8 <__assert_fail@plt+0x6a10>
   18430:	ldr	ip, [fp, #-80]	; 0xffffffb0
   18434:	ldr	r2, [sp, #44]	; 0x2c
   18438:	b	17ef8 <__assert_fail@plt+0x6a10>
   1843c:	mov	lr, r7
   18440:	b	18448 <__assert_fail@plt+0x6f60>
   18444:	mvn	lr, #0
   18448:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1844c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   18450:	eor	r0, r1, #2
   18454:	orr	r0, r0, r8
   18458:	clz	r0, r0
   1845c:	lsr	r0, r0, #5
   18460:	tst	r2, r0
   18464:	bne	18508 <__assert_fail@plt+0x7020>
   18468:	subs	r0, r1, #2
   1846c:	movwne	r0, #1
   18470:	orr	r0, r2, r0
   18474:	tst	r0, #1
   18478:	ldreq	r0, [sp, #60]	; 0x3c
   1847c:	eoreq	r0, r0, #1
   18480:	tsteq	r0, #1
   18484:	bne	1859c <__assert_fail@plt+0x70b4>
   18488:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1848c:	mov	sl, lr
   18490:	tst	r0, #1
   18494:	bne	18568 <__assert_fail@plt+0x7080>
   18498:	ldr	r6, [sp, #56]	; 0x38
   1849c:	mov	r9, #0
   184a0:	cmp	r6, #0
   184a4:	beq	18594 <__assert_fail@plt+0x70ac>
   184a8:	ldr	r0, [sp, #84]	; 0x54
   184ac:	mov	r1, #0
   184b0:	mov	r7, #2
   184b4:	cmp	r4, #0
   184b8:	str	r1, [fp, #-48]	; 0xffffffd0
   184bc:	mov	r1, #0
   184c0:	str	r1, [fp, #-76]	; 0xffffffb4
   184c4:	beq	17664 <__assert_fail@plt+0x617c>
   184c8:	b	1859c <__assert_fail@plt+0x70b4>
   184cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   184d0:	ldr	r1, [fp, #12]
   184d4:	ldr	r2, [fp, #-68]	; 0xffffffbc
   184d8:	mov	lr, r4
   184dc:	mov	r4, r6
   184e0:	b	18528 <__assert_fail@plt+0x7040>
   184e4:	tst	ip, #1
   184e8:	ldr	r5, [fp, #-84]	; 0xffffffac
   184ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   184f0:	ldr	r1, [fp, #12]
   184f4:	mov	r0, #2
   184f8:	movwne	r0, #4
   184fc:	mov	r2, r0
   18500:	b	18528 <__assert_fail@plt+0x7040>
   18504:	ldr	r4, [sp, #88]	; 0x58
   18508:	ldr	r1, [sp, #84]	; 0x54
   1850c:	mov	r0, #2
   18510:	tst	r1, #1
   18514:	movwne	r0, #4
   18518:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1851c:	ldr	r1, [fp, #12]
   18520:	cmp	r2, #2
   18524:	moveq	r2, r0
   18528:	mov	r0, #0
   1852c:	bic	r1, r1, #2
   18530:	str	r2, [sp]
   18534:	mov	r2, ip
   18538:	mov	r3, lr
   1853c:	str	r0, [sp, #8]
   18540:	ldr	r0, [sp, #76]	; 0x4c
   18544:	str	r1, [sp, #4]
   18548:	mov	r1, r4
   1854c:	str	r0, [sp, #12]
   18550:	ldr	r0, [sp, #80]	; 0x50
   18554:	str	r0, [sp, #16]
   18558:	mov	r0, r5
   1855c:	bl	175d4 <__assert_fail@plt+0x60ec>
   18560:	mov	r8, r0
   18564:	b	185e8 <__assert_fail@plt+0x7100>
   18568:	mov	r0, #5
   1856c:	ldr	r1, [sp, #56]	; 0x38
   18570:	ldr	r2, [fp, #-80]	; 0xffffffb0
   18574:	mov	r3, sl
   18578:	str	r0, [sp]
   1857c:	ldr	r0, [fp, #12]
   18580:	str	r0, [sp, #4]
   18584:	ldr	r0, [fp, #16]
   18588:	str	r0, [sp, #8]
   1858c:	ldr	r0, [sp, #76]	; 0x4c
   18590:	b	1854c <__assert_fail@plt+0x7064>
   18594:	mov	r0, #0
   18598:	str	r0, [fp, #-76]	; 0xffffffb4
   1859c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   185a0:	cmp	r1, #0
   185a4:	beq	185dc <__assert_fail@plt+0x70f4>
   185a8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   185ac:	tst	r0, #1
   185b0:	bne	185dc <__assert_fail@plt+0x70f4>
   185b4:	ldrb	r0, [r1]
   185b8:	cmp	r0, #0
   185bc:	beq	185dc <__assert_fail@plt+0x70f4>
   185c0:	add	r1, r1, #1
   185c4:	cmp	r8, r4
   185c8:	strbcc	r0, [r5, r8]
   185cc:	add	r8, r8, #1
   185d0:	ldrb	r0, [r1], #1
   185d4:	cmp	r0, #0
   185d8:	bne	185c4 <__assert_fail@plt+0x70dc>
   185dc:	cmp	r8, r4
   185e0:	movcc	r0, #0
   185e4:	strbcc	r0, [r5, r8]
   185e8:	mov	r0, r8
   185ec:	sub	sp, fp, #28
   185f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   185f4:	mov	r0, #4
   185f8:	b	18518 <__assert_fail@plt+0x7030>
   185fc:	bl	114a0 <abort@plt>
   18600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18604:	add	fp, sp, #28
   18608:	sub	sp, sp, #28
   1860c:	movw	r5, #49600	; 0xc1c0
   18610:	cmp	r2, #0
   18614:	mov	r4, r1
   18618:	mov	r7, r0
   1861c:	str	r0, [sp, #20]
   18620:	movt	r5, #2
   18624:	movne	r5, r2
   18628:	bl	1138c <__errno_location@plt>
   1862c:	mov	sl, r0
   18630:	ldr	r2, [r5, #40]	; 0x28
   18634:	ldr	r3, [r5, #44]	; 0x2c
   18638:	ldm	r5, {r0, r1}
   1863c:	orr	r8, r1, #1
   18640:	add	r9, r5, #8
   18644:	mov	r1, #0
   18648:	ldr	r6, [sl]
   1864c:	stm	sp, {r0, r8, r9}
   18650:	mov	r0, #0
   18654:	str	r2, [sp, #12]
   18658:	str	r3, [sp, #16]
   1865c:	mov	r2, r7
   18660:	mov	r3, r4
   18664:	str	r6, [sp, #24]
   18668:	mov	r6, r4
   1866c:	bl	175d4 <__assert_fail@plt+0x60ec>
   18670:	add	r7, r0, #1
   18674:	mov	r0, r7
   18678:	bl	19918 <__assert_fail@plt+0x8430>
   1867c:	mov	r4, r0
   18680:	ldr	r0, [r5]
   18684:	ldr	r2, [r5, #44]	; 0x2c
   18688:	ldr	r1, [r5, #40]	; 0x28
   1868c:	mov	r3, r6
   18690:	stm	sp, {r0, r8, r9}
   18694:	str	r2, [sp, #16]
   18698:	ldr	r2, [sp, #20]
   1869c:	str	r1, [sp, #12]
   186a0:	mov	r0, r4
   186a4:	mov	r1, r7
   186a8:	bl	175d4 <__assert_fail@plt+0x60ec>
   186ac:	ldr	r0, [sp, #24]
   186b0:	str	r0, [sl]
   186b4:	mov	r0, r4
   186b8:	sub	sp, fp, #28
   186bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186c4:	add	fp, sp, #28
   186c8:	sub	sp, sp, #36	; 0x24
   186cc:	movw	r8, #49600	; 0xc1c0
   186d0:	cmp	r3, #0
   186d4:	mov	r4, r2
   186d8:	str	r2, [sp, #24]
   186dc:	mov	r5, r1
   186e0:	mov	r6, r0
   186e4:	str	r0, [sp, #20]
   186e8:	movt	r8, #2
   186ec:	movne	r8, r3
   186f0:	bl	1138c <__errno_location@plt>
   186f4:	str	r0, [sp, #28]
   186f8:	ldr	r1, [r8, #40]	; 0x28
   186fc:	ldr	r2, [r8, #44]	; 0x2c
   18700:	ldr	r7, [r0]
   18704:	cmp	r4, #0
   18708:	add	sl, r8, #8
   1870c:	mov	r0, #0
   18710:	ldm	r8, {r3, r9}
   18714:	orreq	r9, r9, #1
   18718:	stm	sp, {r3, r9, sl}
   1871c:	str	r1, [sp, #12]
   18720:	str	r2, [sp, #16]
   18724:	mov	r1, #0
   18728:	mov	r2, r6
   1872c:	mov	r3, r5
   18730:	str	r7, [sp, #32]
   18734:	mov	r7, r5
   18738:	bl	175d4 <__assert_fail@plt+0x60ec>
   1873c:	add	r4, r0, #1
   18740:	mov	r5, r0
   18744:	mov	r0, r4
   18748:	bl	19918 <__assert_fail@plt+0x8430>
   1874c:	mov	r6, r0
   18750:	ldr	r0, [r8]
   18754:	ldr	r2, [r8, #44]	; 0x2c
   18758:	ldr	r1, [r8, #40]	; 0x28
   1875c:	mov	r3, r7
   18760:	stm	sp, {r0, r9, sl}
   18764:	str	r2, [sp, #16]
   18768:	ldr	r2, [sp, #20]
   1876c:	str	r1, [sp, #12]
   18770:	mov	r0, r6
   18774:	mov	r1, r4
   18778:	bl	175d4 <__assert_fail@plt+0x60ec>
   1877c:	ldr	r0, [sp, #24]
   18780:	ldr	r1, [sp, #32]
   18784:	ldr	r2, [sp, #28]
   18788:	cmp	r0, #0
   1878c:	str	r1, [r2]
   18790:	strne	r5, [r0]
   18794:	mov	r0, r6
   18798:	sub	sp, fp, #28
   1879c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   187a4:	add	fp, sp, #24
   187a8:	movw	r5, #49468	; 0xc13c
   187ac:	movw	r8, #49464	; 0xc138
   187b0:	movt	r5, #2
   187b4:	movt	r8, #2
   187b8:	ldr	r0, [r5]
   187bc:	ldr	r4, [r8]
   187c0:	cmp	r0, #2
   187c4:	blt	187f0 <__assert_fail@plt+0x7308>
   187c8:	add	r7, r4, #12
   187cc:	mov	r6, #0
   187d0:	ldr	r0, [r7, r6, lsl #3]
   187d4:	bl	13a78 <__assert_fail@plt+0x2590>
   187d8:	ldr	r1, [r5]
   187dc:	add	r2, r6, #2
   187e0:	add	r0, r6, #1
   187e4:	mov	r6, r0
   187e8:	cmp	r2, r1
   187ec:	blt	187d0 <__assert_fail@plt+0x72e8>
   187f0:	ldr	r0, [r4, #4]
   187f4:	movw	r9, #49648	; 0xc1f0
   187f8:	movw	r7, #49472	; 0xc140
   187fc:	movt	r9, #2
   18800:	movt	r7, #2
   18804:	cmp	r0, r9
   18808:	beq	18818 <__assert_fail@plt+0x7330>
   1880c:	bl	13a78 <__assert_fail@plt+0x2590>
   18810:	mov	r0, #256	; 0x100
   18814:	stm	r7, {r0, r9}
   18818:	cmp	r4, r7
   1881c:	beq	1882c <__assert_fail@plt+0x7344>
   18820:	mov	r0, r4
   18824:	bl	13a78 <__assert_fail@plt+0x2590>
   18828:	str	r7, [r8]
   1882c:	mov	r0, #1
   18830:	str	r0, [r5]
   18834:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18838:	movw	r3, #49600	; 0xc1c0
   1883c:	mvn	r2, #0
   18840:	movt	r3, #2
   18844:	b	18848 <__assert_fail@plt+0x7360>
   18848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1884c:	add	fp, sp, #28
   18850:	sub	sp, sp, #44	; 0x2c
   18854:	mov	r7, r3
   18858:	str	r2, [sp, #36]	; 0x24
   1885c:	str	r1, [sp, #32]
   18860:	mov	r5, r0
   18864:	bl	1138c <__errno_location@plt>
   18868:	cmp	r5, #0
   1886c:	bmi	189dc <__assert_fail@plt+0x74f4>
   18870:	cmn	r5, #-2147483647	; 0x80000001
   18874:	beq	189dc <__assert_fail@plt+0x74f4>
   18878:	movw	r8, #49468	; 0xc13c
   1887c:	movw	r4, #49464	; 0xc138
   18880:	str	r0, [sp, #28]
   18884:	ldr	r0, [r0]
   18888:	movt	r8, #2
   1888c:	movt	r4, #2
   18890:	ldr	r1, [r8]
   18894:	ldr	r6, [r4]
   18898:	str	r0, [sp, #24]
   1889c:	cmp	r1, r5
   188a0:	ble	188ac <__assert_fail@plt+0x73c4>
   188a4:	mov	sl, r6
   188a8:	b	18918 <__assert_fail@plt+0x7430>
   188ac:	movw	r9, #49472	; 0xc140
   188b0:	mov	r0, #8
   188b4:	str	r1, [fp, #-32]	; 0xffffffe0
   188b8:	sub	r1, r5, r1
   188bc:	mvn	r3, #-2147483648	; 0x80000000
   188c0:	movt	r9, #2
   188c4:	str	r0, [sp]
   188c8:	add	r2, r1, #1
   188cc:	sub	r1, fp, #32
   188d0:	subs	r0, r6, r9
   188d4:	movne	r0, r6
   188d8:	bl	19b18 <__assert_fail@plt+0x8630>
   188dc:	mov	sl, r0
   188e0:	cmp	r6, r9
   188e4:	str	r0, [r4]
   188e8:	bne	188f4 <__assert_fail@plt+0x740c>
   188ec:	ldrd	r0, [r9]
   188f0:	stm	sl, {r0, r1}
   188f4:	ldr	r1, [r8]
   188f8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   188fc:	add	r0, sl, r1, lsl #3
   18900:	sub	r1, r2, r1
   18904:	lsl	r2, r1, #3
   18908:	mov	r1, #0
   1890c:	bl	113a4 <memset@plt>
   18910:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18914:	str	r0, [r8]
   18918:	mov	r9, sl
   1891c:	ldm	r7, {r0, r1}
   18920:	orr	r8, r1, #1
   18924:	add	r1, r7, #8
   18928:	ldr	r2, [r7, #40]	; 0x28
   1892c:	ldr	r3, [r7, #44]	; 0x2c
   18930:	ldr	r6, [r9, r5, lsl #3]!
   18934:	str	r1, [sp, #20]
   18938:	ldr	r4, [r9, #4]!
   1893c:	stm	sp, {r0, r8}
   18940:	add	r0, sp, #8
   18944:	stm	r0, {r1, r2, r3}
   18948:	ldr	r2, [sp, #32]
   1894c:	ldr	r3, [sp, #36]	; 0x24
   18950:	mov	r1, r6
   18954:	mov	r0, r4
   18958:	bl	175d4 <__assert_fail@plt+0x60ec>
   1895c:	cmp	r6, r0
   18960:	bhi	189c4 <__assert_fail@plt+0x74dc>
   18964:	add	r6, r0, #1
   18968:	movw	r0, #49648	; 0xc1f0
   1896c:	movt	r0, #2
   18970:	str	r6, [sl, r5, lsl #3]
   18974:	cmp	r4, r0
   18978:	beq	18984 <__assert_fail@plt+0x749c>
   1897c:	mov	r0, r4
   18980:	bl	13a78 <__assert_fail@plt+0x2590>
   18984:	mov	r0, r6
   18988:	bl	19918 <__assert_fail@plt+0x8430>
   1898c:	str	r0, [r9]
   18990:	mov	r4, r0
   18994:	add	r3, sp, #8
   18998:	ldr	r0, [r7]
   1899c:	ldr	r1, [r7, #40]	; 0x28
   189a0:	ldr	r2, [r7, #44]	; 0x2c
   189a4:	stm	sp, {r0, r8}
   189a8:	ldr	r0, [sp, #20]
   189ac:	stm	r3, {r0, r1, r2}
   189b0:	ldr	r2, [sp, #32]
   189b4:	ldr	r3, [sp, #36]	; 0x24
   189b8:	mov	r0, r4
   189bc:	mov	r1, r6
   189c0:	bl	175d4 <__assert_fail@plt+0x60ec>
   189c4:	ldr	r0, [sp, #28]
   189c8:	ldr	r1, [sp, #24]
   189cc:	str	r1, [r0]
   189d0:	mov	r0, r4
   189d4:	sub	sp, fp, #28
   189d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189dc:	bl	114a0 <abort@plt>
   189e0:	movw	r3, #49600	; 0xc1c0
   189e4:	movt	r3, #2
   189e8:	b	18848 <__assert_fail@plt+0x7360>
   189ec:	movw	r3, #49600	; 0xc1c0
   189f0:	mov	r1, r0
   189f4:	mov	r0, #0
   189f8:	mvn	r2, #0
   189fc:	movt	r3, #2
   18a00:	b	18848 <__assert_fail@plt+0x7360>
   18a04:	movw	r3, #49600	; 0xc1c0
   18a08:	mov	r2, r1
   18a0c:	mov	r1, r0
   18a10:	mov	r0, #0
   18a14:	movt	r3, #2
   18a18:	b	18848 <__assert_fail@plt+0x7360>
   18a1c:	push	{fp, lr}
   18a20:	mov	fp, sp
   18a24:	sub	sp, sp, #48	; 0x30
   18a28:	vmov.i32	q8, #0	; 0x00000000
   18a2c:	mov	ip, #32
   18a30:	mov	r3, sp
   18a34:	mov	lr, r2
   18a38:	cmp	r1, #10
   18a3c:	add	r2, r3, #16
   18a40:	vst1.64	{d16-d17}, [r3], ip
   18a44:	vst1.64	{d16-d17}, [r2]
   18a48:	vst1.64	{d16-d17}, [r3]
   18a4c:	beq	18a6c <__assert_fail@plt+0x7584>
   18a50:	str	r1, [sp]
   18a54:	mov	r3, sp
   18a58:	mov	r1, lr
   18a5c:	mvn	r2, #0
   18a60:	bl	18848 <__assert_fail@plt+0x7360>
   18a64:	mov	sp, fp
   18a68:	pop	{fp, pc}
   18a6c:	bl	114a0 <abort@plt>
   18a70:	push	{r4, sl, fp, lr}
   18a74:	add	fp, sp, #8
   18a78:	sub	sp, sp, #48	; 0x30
   18a7c:	vmov.i32	q8, #0	; 0x00000000
   18a80:	mov	ip, r3
   18a84:	mov	r3, sp
   18a88:	mov	lr, #32
   18a8c:	cmp	r1, #10
   18a90:	add	r4, r3, #16
   18a94:	vst1.64	{d16-d17}, [r3], lr
   18a98:	vst1.64	{d16-d17}, [r4]
   18a9c:	vst1.64	{d16-d17}, [r3]
   18aa0:	beq	18ac0 <__assert_fail@plt+0x75d8>
   18aa4:	str	r1, [sp]
   18aa8:	mov	r1, r2
   18aac:	mov	r3, sp
   18ab0:	mov	r2, ip
   18ab4:	bl	18848 <__assert_fail@plt+0x7360>
   18ab8:	sub	sp, fp, #8
   18abc:	pop	{r4, sl, fp, pc}
   18ac0:	bl	114a0 <abort@plt>
   18ac4:	push	{fp, lr}
   18ac8:	mov	fp, sp
   18acc:	sub	sp, sp, #48	; 0x30
   18ad0:	vmov.i32	q8, #0	; 0x00000000
   18ad4:	mov	r3, sp
   18ad8:	mov	ip, #32
   18adc:	cmp	r0, #10
   18ae0:	add	r2, r3, #16
   18ae4:	vst1.64	{d16-d17}, [r3], ip
   18ae8:	vst1.64	{d16-d17}, [r2]
   18aec:	vst1.64	{d16-d17}, [r3]
   18af0:	beq	18b10 <__assert_fail@plt+0x7628>
   18af4:	str	r0, [sp]
   18af8:	mov	r3, sp
   18afc:	mov	r0, #0
   18b00:	mvn	r2, #0
   18b04:	bl	18848 <__assert_fail@plt+0x7360>
   18b08:	mov	sp, fp
   18b0c:	pop	{fp, pc}
   18b10:	bl	114a0 <abort@plt>
   18b14:	push	{fp, lr}
   18b18:	mov	fp, sp
   18b1c:	sub	sp, sp, #48	; 0x30
   18b20:	vmov.i32	q8, #0	; 0x00000000
   18b24:	mov	r3, sp
   18b28:	mov	ip, #32
   18b2c:	cmp	r0, #10
   18b30:	add	lr, r3, #16
   18b34:	vst1.64	{d16-d17}, [r3], ip
   18b38:	vst1.64	{d16-d17}, [lr]
   18b3c:	vst1.64	{d16-d17}, [r3]
   18b40:	beq	18b5c <__assert_fail@plt+0x7674>
   18b44:	str	r0, [sp]
   18b48:	mov	r3, sp
   18b4c:	mov	r0, #0
   18b50:	bl	18848 <__assert_fail@plt+0x7360>
   18b54:	mov	sp, fp
   18b58:	pop	{fp, pc}
   18b5c:	bl	114a0 <abort@plt>
   18b60:	push	{r4, sl, fp, lr}
   18b64:	add	fp, sp, #8
   18b68:	sub	sp, sp, #48	; 0x30
   18b6c:	mov	lr, r0
   18b70:	movw	r0, #49600	; 0xc1c0
   18b74:	mov	ip, r1
   18b78:	mov	r1, #32
   18b7c:	mov	r4, #1
   18b80:	movt	r0, #2
   18b84:	add	r3, r0, #16
   18b88:	vld1.64	{d16-d17}, [r0], r1
   18b8c:	vld1.64	{d20-d21}, [r0]
   18b90:	vld1.64	{d18-d19}, [r3]
   18b94:	mov	r3, sp
   18b98:	add	r0, r3, #32
   18b9c:	add	r1, r3, #16
   18ba0:	vst1.64	{d20-d21}, [r0]
   18ba4:	mov	r0, #28
   18ba8:	vst1.64	{d18-d19}, [r1]
   18bac:	mov	r1, r3
   18bb0:	and	r0, r0, r2, lsr #3
   18bb4:	and	r2, r2, #31
   18bb8:	vst1.64	{d16-d17}, [r1], r0
   18bbc:	ldr	r0, [r1, #8]
   18bc0:	bic	r4, r4, r0, lsr r2
   18bc4:	eor	r0, r0, r4, lsl r2
   18bc8:	mov	r2, ip
   18bcc:	str	r0, [r1, #8]
   18bd0:	mov	r0, #0
   18bd4:	mov	r1, lr
   18bd8:	bl	18848 <__assert_fail@plt+0x7360>
   18bdc:	sub	sp, fp, #8
   18be0:	pop	{r4, sl, fp, pc}
   18be4:	push	{fp, lr}
   18be8:	mov	fp, sp
   18bec:	sub	sp, sp, #48	; 0x30
   18bf0:	mov	ip, r0
   18bf4:	movw	r0, #49600	; 0xc1c0
   18bf8:	mov	r2, #32
   18bfc:	movt	r0, #2
   18c00:	add	r3, r0, #16
   18c04:	vld1.64	{d16-d17}, [r0], r2
   18c08:	vld1.64	{d20-d21}, [r0]
   18c0c:	vld1.64	{d18-d19}, [r3]
   18c10:	mov	r3, sp
   18c14:	add	r0, r3, #32
   18c18:	add	r2, r3, #16
   18c1c:	vst1.64	{d20-d21}, [r0]
   18c20:	mov	r0, #28
   18c24:	vst1.64	{d18-d19}, [r2]
   18c28:	mov	r2, r3
   18c2c:	and	r0, r0, r1, lsr #3
   18c30:	and	r1, r1, #31
   18c34:	vst1.64	{d16-d17}, [r2], r0
   18c38:	mov	r0, #1
   18c3c:	ldr	lr, [r2, #8]
   18c40:	bic	r0, r0, lr, lsr r1
   18c44:	eor	r0, lr, r0, lsl r1
   18c48:	mov	r1, ip
   18c4c:	str	r0, [r2, #8]
   18c50:	mov	r0, #0
   18c54:	mvn	r2, #0
   18c58:	bl	18848 <__assert_fail@plt+0x7360>
   18c5c:	mov	sp, fp
   18c60:	pop	{fp, pc}
   18c64:	push	{fp, lr}
   18c68:	mov	fp, sp
   18c6c:	sub	sp, sp, #48	; 0x30
   18c70:	mov	r1, r0
   18c74:	movw	r0, #49600	; 0xc1c0
   18c78:	mov	r3, #32
   18c7c:	movt	r0, #2
   18c80:	add	r2, r0, #16
   18c84:	vld1.64	{d16-d17}, [r0], r3
   18c88:	mov	r3, sp
   18c8c:	vld1.64	{d18-d19}, [r2]
   18c90:	vld1.64	{d20-d21}, [r0]
   18c94:	add	r2, r3, #16
   18c98:	add	r0, r3, #32
   18c9c:	vst1.64	{d18-d19}, [r2]
   18ca0:	vst1.64	{d20-d21}, [r0]
   18ca4:	mov	r0, #12
   18ca8:	mov	r2, r3
   18cac:	vst1.64	{d16-d17}, [r2], r0
   18cb0:	ldr	r0, [r2]
   18cb4:	orr	r0, r0, #67108864	; 0x4000000
   18cb8:	str	r0, [r2]
   18cbc:	mov	r0, #0
   18cc0:	mvn	r2, #0
   18cc4:	bl	18848 <__assert_fail@plt+0x7360>
   18cc8:	mov	sp, fp
   18ccc:	pop	{fp, pc}
   18cd0:	push	{fp, lr}
   18cd4:	mov	fp, sp
   18cd8:	sub	sp, sp, #48	; 0x30
   18cdc:	mov	ip, r1
   18ce0:	mov	r1, r0
   18ce4:	movw	r0, #49600	; 0xc1c0
   18ce8:	mov	r2, #32
   18cec:	movt	r0, #2
   18cf0:	add	r3, r0, #16
   18cf4:	vld1.64	{d16-d17}, [r0], r2
   18cf8:	vld1.64	{d18-d19}, [r3]
   18cfc:	vld1.64	{d20-d21}, [r0]
   18d00:	mov	r3, sp
   18d04:	add	r2, r3, #16
   18d08:	add	r0, r3, #32
   18d0c:	vst1.64	{d18-d19}, [r2]
   18d10:	vst1.64	{d20-d21}, [r0]
   18d14:	mov	r0, #12
   18d18:	mov	r2, r3
   18d1c:	vst1.64	{d16-d17}, [r2], r0
   18d20:	ldr	r0, [r2]
   18d24:	orr	r0, r0, #67108864	; 0x4000000
   18d28:	str	r0, [r2]
   18d2c:	mov	r0, #0
   18d30:	mov	r2, ip
   18d34:	bl	18848 <__assert_fail@plt+0x7360>
   18d38:	mov	sp, fp
   18d3c:	pop	{fp, pc}
   18d40:	push	{r4, sl, fp, lr}
   18d44:	add	fp, sp, #8
   18d48:	sub	sp, sp, #96	; 0x60
   18d4c:	vmov.i32	q8, #0	; 0x00000000
   18d50:	mov	ip, r2
   18d54:	mov	r2, sp
   18d58:	mov	r4, #28
   18d5c:	cmp	r1, #10
   18d60:	mov	r3, r2
   18d64:	add	lr, r2, #16
   18d68:	vst1.64	{d16-d17}, [r3], r4
   18d6c:	vst1.64	{d16-d17}, [lr]
   18d70:	vst1.32	{d16-d17}, [r3]
   18d74:	beq	18dc4 <__assert_fail@plt+0x78dc>
   18d78:	vld1.64	{d16-d17}, [r2], r4
   18d7c:	vld1.64	{d18-d19}, [lr]
   18d80:	add	r3, sp, #48	; 0x30
   18d84:	vld1.32	{d20-d21}, [r2]
   18d88:	add	r2, r3, #20
   18d8c:	add	r4, r3, #4
   18d90:	vst1.32	{d18-d19}, [r2]
   18d94:	add	r2, r3, #32
   18d98:	vst1.32	{d16-d17}, [r4]
   18d9c:	vst1.32	{d20-d21}, [r2]
   18da0:	str	r1, [sp, #48]	; 0x30
   18da4:	mvn	r2, #0
   18da8:	ldr	r1, [sp, #60]	; 0x3c
   18dac:	orr	r1, r1, #67108864	; 0x4000000
   18db0:	str	r1, [sp, #60]	; 0x3c
   18db4:	mov	r1, ip
   18db8:	bl	18848 <__assert_fail@plt+0x7360>
   18dbc:	sub	sp, fp, #8
   18dc0:	pop	{r4, sl, fp, pc}
   18dc4:	bl	114a0 <abort@plt>
   18dc8:	push	{r4, r5, r6, sl, fp, lr}
   18dcc:	add	fp, sp, #16
   18dd0:	sub	sp, sp, #48	; 0x30
   18dd4:	mov	ip, r3
   18dd8:	movw	r3, #49600	; 0xc1c0
   18ddc:	mov	r6, #32
   18de0:	cmp	r1, #0
   18de4:	mov	r4, sp
   18de8:	movt	r3, #2
   18dec:	cmpne	r2, #0
   18df0:	add	r5, r4, #16
   18df4:	add	lr, r3, #16
   18df8:	vld1.64	{d16-d17}, [r3], r6
   18dfc:	vld1.64	{d18-d19}, [lr]
   18e00:	vld1.64	{d20-d21}, [r3]
   18e04:	mov	r3, #10
   18e08:	vst1.64	{d16-d17}, [r4], r6
   18e0c:	vst1.64	{d18-d19}, [r5]
   18e10:	vst1.64	{d20-d21}, [r4]
   18e14:	str	r3, [sp]
   18e18:	bne	18e20 <__assert_fail@plt+0x7938>
   18e1c:	bl	114a0 <abort@plt>
   18e20:	str	r2, [sp, #44]	; 0x2c
   18e24:	str	r1, [sp, #40]	; 0x28
   18e28:	mov	r3, sp
   18e2c:	mov	r1, ip
   18e30:	mvn	r2, #0
   18e34:	bl	18848 <__assert_fail@plt+0x7360>
   18e38:	sub	sp, fp, #16
   18e3c:	pop	{r4, r5, r6, sl, fp, pc}
   18e40:	push	{r4, r5, r6, sl, fp, lr}
   18e44:	add	fp, sp, #16
   18e48:	sub	sp, sp, #48	; 0x30
   18e4c:	mov	lr, r3
   18e50:	movw	r3, #49600	; 0xc1c0
   18e54:	mov	r6, #32
   18e58:	cmp	r1, #0
   18e5c:	mov	r4, sp
   18e60:	movt	r3, #2
   18e64:	cmpne	r2, #0
   18e68:	add	r5, r4, #16
   18e6c:	add	ip, r3, #16
   18e70:	vld1.64	{d16-d17}, [r3], r6
   18e74:	vld1.64	{d18-d19}, [ip]
   18e78:	vld1.64	{d20-d21}, [r3]
   18e7c:	mov	r3, #10
   18e80:	vst1.64	{d16-d17}, [r4], r6
   18e84:	vst1.64	{d18-d19}, [r5]
   18e88:	vst1.64	{d20-d21}, [r4]
   18e8c:	str	r3, [sp]
   18e90:	bne	18e98 <__assert_fail@plt+0x79b0>
   18e94:	bl	114a0 <abort@plt>
   18e98:	ldr	ip, [fp, #8]
   18e9c:	str	r2, [sp, #44]	; 0x2c
   18ea0:	str	r1, [sp, #40]	; 0x28
   18ea4:	mov	r3, sp
   18ea8:	mov	r1, lr
   18eac:	mov	r2, ip
   18eb0:	bl	18848 <__assert_fail@plt+0x7360>
   18eb4:	sub	sp, fp, #16
   18eb8:	pop	{r4, r5, r6, sl, fp, pc}
   18ebc:	push	{r4, sl, fp, lr}
   18ec0:	add	fp, sp, #8
   18ec4:	sub	sp, sp, #48	; 0x30
   18ec8:	movw	r3, #49600	; 0xc1c0
   18ecc:	mov	lr, #32
   18ed0:	mov	ip, r2
   18ed4:	cmp	r0, #0
   18ed8:	movt	r3, #2
   18edc:	cmpne	r1, #0
   18ee0:	add	r2, r3, #16
   18ee4:	vld1.64	{d16-d17}, [r3], lr
   18ee8:	vld1.64	{d20-d21}, [r3]
   18eec:	vld1.64	{d18-d19}, [r2]
   18ef0:	mov	r2, sp
   18ef4:	add	r4, r2, #16
   18ef8:	vst1.64	{d16-d17}, [r2], lr
   18efc:	vst1.64	{d20-d21}, [r2]
   18f00:	mov	r2, #10
   18f04:	vst1.64	{d18-d19}, [r4]
   18f08:	str	r2, [sp]
   18f0c:	bne	18f14 <__assert_fail@plt+0x7a2c>
   18f10:	bl	114a0 <abort@plt>
   18f14:	str	r1, [sp, #44]	; 0x2c
   18f18:	str	r0, [sp, #40]	; 0x28
   18f1c:	mov	r3, sp
   18f20:	mov	r0, #0
   18f24:	mov	r1, ip
   18f28:	mvn	r2, #0
   18f2c:	bl	18848 <__assert_fail@plt+0x7360>
   18f30:	sub	sp, fp, #8
   18f34:	pop	{r4, sl, fp, pc}
   18f38:	push	{r4, r5, fp, lr}
   18f3c:	add	fp, sp, #8
   18f40:	sub	sp, sp, #48	; 0x30
   18f44:	mov	ip, r3
   18f48:	movw	r3, #49600	; 0xc1c0
   18f4c:	mov	r4, #32
   18f50:	mov	lr, r2
   18f54:	cmp	r0, #0
   18f58:	movt	r3, #2
   18f5c:	cmpne	r1, #0
   18f60:	add	r2, r3, #16
   18f64:	vld1.64	{d16-d17}, [r3], r4
   18f68:	vld1.64	{d20-d21}, [r3]
   18f6c:	vld1.64	{d18-d19}, [r2]
   18f70:	mov	r2, sp
   18f74:	add	r5, r2, #16
   18f78:	vst1.64	{d16-d17}, [r2], r4
   18f7c:	vst1.64	{d20-d21}, [r2]
   18f80:	mov	r2, #10
   18f84:	vst1.64	{d18-d19}, [r5]
   18f88:	str	r2, [sp]
   18f8c:	bne	18f94 <__assert_fail@plt+0x7aac>
   18f90:	bl	114a0 <abort@plt>
   18f94:	str	r1, [sp, #44]	; 0x2c
   18f98:	str	r0, [sp, #40]	; 0x28
   18f9c:	mov	r3, sp
   18fa0:	mov	r0, #0
   18fa4:	mov	r1, lr
   18fa8:	mov	r2, ip
   18fac:	bl	18848 <__assert_fail@plt+0x7360>
   18fb0:	sub	sp, fp, #8
   18fb4:	pop	{r4, r5, fp, pc}
   18fb8:	movw	r3, #49480	; 0xc148
   18fbc:	movt	r3, #2
   18fc0:	b	18848 <__assert_fail@plt+0x7360>
   18fc4:	movw	r3, #49480	; 0xc148
   18fc8:	mov	r2, r1
   18fcc:	mov	r1, r0
   18fd0:	mov	r0, #0
   18fd4:	movt	r3, #2
   18fd8:	b	18848 <__assert_fail@plt+0x7360>
   18fdc:	movw	r3, #49480	; 0xc148
   18fe0:	mvn	r2, #0
   18fe4:	movt	r3, #2
   18fe8:	b	18848 <__assert_fail@plt+0x7360>
   18fec:	movw	r3, #49480	; 0xc148
   18ff0:	mov	r1, r0
   18ff4:	mov	r0, #0
   18ff8:	mvn	r2, #0
   18ffc:	movt	r3, #2
   19000:	b	18848 <__assert_fail@plt+0x7360>
   19004:	push	{r4, r5, fp, lr}
   19008:	add	fp, sp, #8
   1900c:	mov	r5, r0
   19010:	mov	r4, r1
   19014:	mov	r0, #0
   19018:	mov	r2, #5
   1901c:	mov	r1, r5
   19020:	bl	1126c <dcgettext@plt>
   19024:	cmp	r0, r5
   19028:	popne	{r4, r5, fp, pc}
   1902c:	bl	1a468 <__assert_fail@plt+0x8f80>
   19030:	ldrb	r1, [r0]
   19034:	and	r1, r1, #223	; 0xdf
   19038:	cmp	r1, #71	; 0x47
   1903c:	beq	190a4 <__assert_fail@plt+0x7bbc>
   19040:	cmp	r1, #85	; 0x55
   19044:	bne	190fc <__assert_fail@plt+0x7c14>
   19048:	ldrb	r1, [r0, #1]
   1904c:	and	r1, r1, #223	; 0xdf
   19050:	cmp	r1, #84	; 0x54
   19054:	bne	190fc <__assert_fail@plt+0x7c14>
   19058:	ldrb	r1, [r0, #2]
   1905c:	and	r1, r1, #223	; 0xdf
   19060:	cmp	r1, #70	; 0x46
   19064:	bne	190fc <__assert_fail@plt+0x7c14>
   19068:	ldrb	r1, [r0, #3]
   1906c:	cmp	r1, #45	; 0x2d
   19070:	bne	190fc <__assert_fail@plt+0x7c14>
   19074:	ldrb	r1, [r0, #4]
   19078:	cmp	r1, #56	; 0x38
   1907c:	bne	190fc <__assert_fail@plt+0x7c14>
   19080:	ldrb	r0, [r0, #5]
   19084:	cmp	r0, #0
   19088:	bne	190fc <__assert_fail@plt+0x7c14>
   1908c:	ldrb	r1, [r5]
   19090:	movw	r2, #47698	; 0xba52
   19094:	movw	r0, #47702	; 0xba56
   19098:	movt	r2, #1
   1909c:	movt	r0, #1
   190a0:	b	1912c <__assert_fail@plt+0x7c44>
   190a4:	ldrb	r1, [r0, #1]
   190a8:	and	r1, r1, #223	; 0xdf
   190ac:	cmp	r1, #66	; 0x42
   190b0:	bne	190fc <__assert_fail@plt+0x7c14>
   190b4:	ldrb	r1, [r0, #2]
   190b8:	cmp	r1, #49	; 0x31
   190bc:	bne	190fc <__assert_fail@plt+0x7c14>
   190c0:	ldrb	r1, [r0, #3]
   190c4:	cmp	r1, #56	; 0x38
   190c8:	bne	190fc <__assert_fail@plt+0x7c14>
   190cc:	ldrb	r1, [r0, #4]
   190d0:	cmp	r1, #48	; 0x30
   190d4:	bne	190fc <__assert_fail@plt+0x7c14>
   190d8:	ldrb	r1, [r0, #5]
   190dc:	cmp	r1, #51	; 0x33
   190e0:	bne	190fc <__assert_fail@plt+0x7c14>
   190e4:	ldrb	r1, [r0, #6]
   190e8:	cmp	r1, #48	; 0x30
   190ec:	bne	190fc <__assert_fail@plt+0x7c14>
   190f0:	ldrb	r0, [r0, #7]
   190f4:	cmp	r0, #0
   190f8:	beq	19118 <__assert_fail@plt+0x7c30>
   190fc:	movw	r1, #47692	; 0xba4c
   19100:	movw	r0, #47696	; 0xba50
   19104:	cmp	r4, #9
   19108:	movt	r1, #1
   1910c:	movt	r0, #1
   19110:	moveq	r0, r1
   19114:	pop	{r4, r5, fp, pc}
   19118:	ldrb	r1, [r5]
   1911c:	movw	r2, #47706	; 0xba5a
   19120:	movw	r0, #47710	; 0xba5e
   19124:	movt	r2, #1
   19128:	movt	r0, #1
   1912c:	cmp	r1, #96	; 0x60
   19130:	moveq	r0, r2
   19134:	pop	{r4, r5, fp, pc}
   19138:	push	{r4, sl, fp, lr}
   1913c:	add	fp, sp, #8
   19140:	sub	sp, sp, #104	; 0x68
   19144:	movw	r1, #48513	; 0xbd81
   19148:	mov	r4, r0
   1914c:	mov	r2, sp
   19150:	mov	r0, #3
   19154:	movt	r1, #1
   19158:	bl	114b8 <__lxstat64@plt>
   1915c:	mov	r1, r0
   19160:	mov	r0, #0
   19164:	cmp	r1, #0
   19168:	beq	19174 <__assert_fail@plt+0x7c8c>
   1916c:	sub	sp, fp, #8
   19170:	pop	{r4, sl, fp, pc}
   19174:	ldr	r0, [sp, #96]	; 0x60
   19178:	ldr	r1, [sp, #100]	; 0x64
   1917c:	ldm	sp, {r2, r3}
   19180:	stm	r4, {r0, r1, r2, r3}
   19184:	mov	r0, r4
   19188:	sub	sp, fp, #8
   1918c:	pop	{r4, sl, fp, pc}
   19190:	push	{r4, r5, r6, r7, fp, lr}
   19194:	add	fp, sp, #16
   19198:	mov	r4, r0
   1919c:	cmp	r0, #2
   191a0:	bhi	191d0 <__assert_fail@plt+0x7ce8>
   191a4:	mov	r0, r4
   191a8:	bl	1a540 <__assert_fail@plt+0x9058>
   191ac:	mov	r5, r0
   191b0:	bl	1138c <__errno_location@plt>
   191b4:	ldr	r7, [r0]
   191b8:	mov	r6, r0
   191bc:	mov	r0, r4
   191c0:	bl	114ac <close@plt>
   191c4:	mov	r0, r5
   191c8:	str	r7, [r6]
   191cc:	pop	{r4, r5, r6, r7, fp, pc}
   191d0:	mov	r0, r4
   191d4:	pop	{r4, r5, r6, r7, fp, pc}
   191d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   191dc:	add	fp, sp, #24
   191e0:	sub	sp, sp, #32
   191e4:	ldr	r6, [fp, #12]
   191e8:	ldr	r7, [fp, #8]
   191ec:	mov	r4, r2
   191f0:	mov	r8, r0
   191f4:	cmp	r1, #0
   191f8:	beq	19220 <__assert_fail@plt+0x7d38>
   191fc:	movw	r2, #47800	; 0xbab8
   19200:	mov	r5, r1
   19204:	str	r3, [sp, #4]
   19208:	str	r4, [sp]
   1920c:	mov	r0, r8
   19210:	mov	r1, #1
   19214:	movt	r2, #1
   19218:	mov	r3, r5
   1921c:	b	19238 <__assert_fail@plt+0x7d50>
   19220:	movw	r2, #47812	; 0xbac4
   19224:	str	r3, [sp]
   19228:	mov	r0, r8
   1922c:	mov	r1, #1
   19230:	mov	r3, r4
   19234:	movt	r2, #1
   19238:	bl	113c8 <__fprintf_chk@plt>
   1923c:	movw	r1, #47819	; 0xbacb
   19240:	mov	r0, #0
   19244:	mov	r2, #5
   19248:	movt	r1, #1
   1924c:	bl	1126c <dcgettext@plt>
   19250:	movw	r2, #48515	; 0xbd83
   19254:	mov	r3, r0
   19258:	movw	r0, #2022	; 0x7e6
   1925c:	mov	r1, #1
   19260:	movt	r2, #1
   19264:	str	r0, [sp]
   19268:	mov	r0, r8
   1926c:	bl	113c8 <__fprintf_chk@plt>
   19270:	movw	r4, #45743	; 0xb2af
   19274:	mov	r1, r8
   19278:	movt	r4, #1
   1927c:	mov	r0, r4
   19280:	bl	111dc <fputs_unlocked@plt>
   19284:	movw	r1, #47823	; 0xbacf
   19288:	mov	r0, #0
   1928c:	mov	r2, #5
   19290:	movt	r1, #1
   19294:	bl	1126c <dcgettext@plt>
   19298:	movw	r3, #47994	; 0xbb7a
   1929c:	mov	r2, r0
   192a0:	mov	r0, r8
   192a4:	mov	r1, #1
   192a8:	movt	r3, #1
   192ac:	bl	113c8 <__fprintf_chk@plt>
   192b0:	mov	r0, r4
   192b4:	mov	r1, r8
   192b8:	bl	111dc <fputs_unlocked@plt>
   192bc:	cmp	r6, #9
   192c0:	bhi	192fc <__assert_fail@plt+0x7e14>
   192c4:	add	r0, pc, #0
   192c8:	ldr	pc, [r0, r6, lsl #2]
   192cc:	strdeq	r9, [r1], -r4
   192d0:	andeq	r9, r1, r8, lsl #6
   192d4:	andeq	r9, r1, r8, lsr r3
   192d8:	andeq	r9, r1, r0, ror #6
   192dc:	andeq	r9, r1, r8, lsl #7
   192e0:			; <UNDEFINED> instruction: 0x000193b0
   192e4:	ldrdeq	r9, [r1], -r8
   192e8:	andeq	r9, r1, r0, lsl r4
   192ec:			; <UNDEFINED> instruction: 0x000194b0
   192f0:	andeq	r9, r1, r8, asr r4
   192f4:	sub	sp, fp, #24
   192f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   192fc:	movw	r1, #48347	; 0xbcdb
   19300:	movt	r1, #1
   19304:	b	19460 <__assert_fail@plt+0x7f78>
   19308:	movw	r1, #48028	; 0xbb9c
   1930c:	mov	r0, #0
   19310:	mov	r2, #5
   19314:	movt	r1, #1
   19318:	bl	1126c <dcgettext@plt>
   1931c:	ldr	r3, [r7]
   19320:	mov	r2, r0
   19324:	mov	r0, r8
   19328:	mov	r1, #1
   1932c:	sub	sp, fp, #24
   19330:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19334:	b	113c8 <__fprintf_chk@plt>
   19338:	movw	r1, #48044	; 0xbbac
   1933c:	mov	r0, #0
   19340:	mov	r2, #5
   19344:	movt	r1, #1
   19348:	bl	1126c <dcgettext@plt>
   1934c:	mov	r2, r0
   19350:	ldr	r3, [r7]
   19354:	ldr	r0, [r7, #4]
   19358:	str	r0, [sp]
   1935c:	b	1944c <__assert_fail@plt+0x7f64>
   19360:	movw	r1, #48067	; 0xbbc3
   19364:	mov	r0, #0
   19368:	mov	r2, #5
   1936c:	movt	r1, #1
   19370:	bl	1126c <dcgettext@plt>
   19374:	mov	r2, r0
   19378:	ldr	r3, [r7]
   1937c:	ldmib	r7, {r0, r1}
   19380:	stm	sp, {r0, r1}
   19384:	b	1944c <__assert_fail@plt+0x7f64>
   19388:	movw	r1, #48095	; 0xbbdf
   1938c:	mov	r0, #0
   19390:	mov	r2, #5
   19394:	movt	r1, #1
   19398:	bl	1126c <dcgettext@plt>
   1939c:	ldr	r3, [r7]
   193a0:	mov	r2, r0
   193a4:	ldmib	r7, {r0, r1, r7}
   193a8:	stm	sp, {r0, r1, r7}
   193ac:	b	1944c <__assert_fail@plt+0x7f64>
   193b0:	movw	r1, #48127	; 0xbbff
   193b4:	mov	r0, #0
   193b8:	mov	r2, #5
   193bc:	movt	r1, #1
   193c0:	bl	1126c <dcgettext@plt>
   193c4:	ldr	r3, [r7]
   193c8:	mov	r2, r0
   193cc:	ldmib	r7, {r0, r1, r6, r7}
   193d0:	stm	sp, {r0, r1, r6, r7}
   193d4:	b	1944c <__assert_fail@plt+0x7f64>
   193d8:	movw	r1, #48163	; 0xbc23
   193dc:	mov	r0, #0
   193e0:	mov	r2, #5
   193e4:	movt	r1, #1
   193e8:	bl	1126c <dcgettext@plt>
   193ec:	mov	r2, r0
   193f0:	ldr	r3, [r7]
   193f4:	ldmib	r7, {r0, r1, r6}
   193f8:	ldr	r5, [r7, #16]
   193fc:	ldr	r7, [r7, #20]
   19400:	stm	sp, {r0, r1, r6}
   19404:	str	r5, [sp, #12]
   19408:	str	r7, [sp, #16]
   1940c:	b	1944c <__assert_fail@plt+0x7f64>
   19410:	movw	r1, #48203	; 0xbc4b
   19414:	mov	r0, #0
   19418:	mov	r2, #5
   1941c:	movt	r1, #1
   19420:	bl	1126c <dcgettext@plt>
   19424:	mov	r2, r0
   19428:	ldr	r3, [r7]
   1942c:	ldmib	r7, {r0, r1, r6}
   19430:	ldr	r5, [r7, #16]
   19434:	ldr	r4, [r7, #20]
   19438:	ldr	r7, [r7, #24]
   1943c:	stm	sp, {r0, r1, r6}
   19440:	str	r5, [sp, #12]
   19444:	str	r4, [sp, #16]
   19448:	str	r7, [sp, #20]
   1944c:	mov	r0, r8
   19450:	mov	r1, #1
   19454:	b	19500 <__assert_fail@plt+0x8018>
   19458:	movw	r1, #48295	; 0xbca7
   1945c:	movt	r1, #1
   19460:	mov	r0, #0
   19464:	mov	r2, #5
   19468:	bl	1126c <dcgettext@plt>
   1946c:	mov	ip, r0
   19470:	ldr	r3, [r7]
   19474:	ldr	r0, [r7, #4]
   19478:	ldr	r1, [r7, #8]
   1947c:	ldr	r6, [r7, #12]
   19480:	ldr	r5, [r7, #16]
   19484:	ldr	r4, [r7, #20]
   19488:	ldr	r2, [r7, #24]
   1948c:	ldr	lr, [r7, #28]
   19490:	ldr	r7, [r7, #32]
   19494:	stm	sp, {r0, r1, r6}
   19498:	str	r5, [sp, #12]
   1949c:	str	r4, [sp, #16]
   194a0:	str	r2, [sp, #20]
   194a4:	str	lr, [sp, #24]
   194a8:	str	r7, [sp, #28]
   194ac:	b	194f4 <__assert_fail@plt+0x800c>
   194b0:	movw	r1, #48247	; 0xbc77
   194b4:	mov	r0, #0
   194b8:	mov	r2, #5
   194bc:	movt	r1, #1
   194c0:	bl	1126c <dcgettext@plt>
   194c4:	mov	ip, r0
   194c8:	ldr	r3, [r7]
   194cc:	ldmib	r7, {r0, r1, r6}
   194d0:	ldr	r5, [r7, #16]
   194d4:	ldr	r4, [r7, #20]
   194d8:	ldr	r2, [r7, #24]
   194dc:	ldr	r7, [r7, #28]
   194e0:	stm	sp, {r0, r1, r6}
   194e4:	str	r5, [sp, #12]
   194e8:	str	r4, [sp, #16]
   194ec:	str	r2, [sp, #20]
   194f0:	str	r7, [sp, #24]
   194f4:	mov	r0, r8
   194f8:	mov	r1, #1
   194fc:	mov	r2, ip
   19500:	bl	113c8 <__fprintf_chk@plt>
   19504:	sub	sp, fp, #24
   19508:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1950c:	push	{r4, sl, fp, lr}
   19510:	add	fp, sp, #8
   19514:	sub	sp, sp, #8
   19518:	ldr	ip, [fp, #8]
   1951c:	mov	lr, #0
   19520:	ldr	r4, [ip, lr, lsl #2]
   19524:	add	lr, lr, #1
   19528:	cmp	r4, #0
   1952c:	bne	19520 <__assert_fail@plt+0x8038>
   19530:	sub	r4, lr, #1
   19534:	str	ip, [sp]
   19538:	str	r4, [sp, #4]
   1953c:	bl	191d8 <__assert_fail@plt+0x7cf0>
   19540:	sub	sp, fp, #8
   19544:	pop	{r4, sl, fp, pc}
   19548:	push	{fp, lr}
   1954c:	mov	fp, sp
   19550:	sub	sp, sp, #48	; 0x30
   19554:	ldr	ip, [fp, #8]
   19558:	ldr	lr, [ip]
   1955c:	cmp	lr, #0
   19560:	str	lr, [sp, #8]
   19564:	beq	19600 <__assert_fail@plt+0x8118>
   19568:	ldr	lr, [ip, #4]
   1956c:	cmp	lr, #0
   19570:	str	lr, [sp, #12]
   19574:	beq	19608 <__assert_fail@plt+0x8120>
   19578:	ldr	lr, [ip, #8]
   1957c:	cmp	lr, #0
   19580:	str	lr, [sp, #16]
   19584:	beq	19610 <__assert_fail@plt+0x8128>
   19588:	ldr	lr, [ip, #12]
   1958c:	cmp	lr, #0
   19590:	str	lr, [sp, #20]
   19594:	beq	19618 <__assert_fail@plt+0x8130>
   19598:	ldr	lr, [ip, #16]
   1959c:	cmp	lr, #0
   195a0:	str	lr, [sp, #24]
   195a4:	beq	19620 <__assert_fail@plt+0x8138>
   195a8:	ldr	lr, [ip, #20]
   195ac:	cmp	lr, #0
   195b0:	str	lr, [sp, #28]
   195b4:	beq	19628 <__assert_fail@plt+0x8140>
   195b8:	ldr	lr, [ip, #24]
   195bc:	cmp	lr, #0
   195c0:	str	lr, [sp, #32]
   195c4:	beq	19630 <__assert_fail@plt+0x8148>
   195c8:	ldr	lr, [ip, #28]
   195cc:	cmp	lr, #0
   195d0:	str	lr, [sp, #36]	; 0x24
   195d4:	beq	19638 <__assert_fail@plt+0x8150>
   195d8:	ldr	lr, [ip, #32]
   195dc:	cmp	lr, #0
   195e0:	str	lr, [sp, #40]	; 0x28
   195e4:	beq	19640 <__assert_fail@plt+0x8158>
   195e8:	ldr	lr, [ip, #36]	; 0x24
   195ec:	mov	ip, #10
   195f0:	cmp	lr, #0
   195f4:	str	lr, [sp, #44]	; 0x2c
   195f8:	movweq	ip, #9
   195fc:	b	19644 <__assert_fail@plt+0x815c>
   19600:	mov	ip, #0
   19604:	b	19644 <__assert_fail@plt+0x815c>
   19608:	mov	ip, #1
   1960c:	b	19644 <__assert_fail@plt+0x815c>
   19610:	mov	ip, #2
   19614:	b	19644 <__assert_fail@plt+0x815c>
   19618:	mov	ip, #3
   1961c:	b	19644 <__assert_fail@plt+0x815c>
   19620:	mov	ip, #4
   19624:	b	19644 <__assert_fail@plt+0x815c>
   19628:	mov	ip, #5
   1962c:	b	19644 <__assert_fail@plt+0x815c>
   19630:	mov	ip, #6
   19634:	b	19644 <__assert_fail@plt+0x815c>
   19638:	mov	ip, #7
   1963c:	b	19644 <__assert_fail@plt+0x815c>
   19640:	mov	ip, #8
   19644:	add	lr, sp, #8
   19648:	str	ip, [sp, #4]
   1964c:	str	lr, [sp]
   19650:	bl	191d8 <__assert_fail@plt+0x7cf0>
   19654:	mov	sp, fp
   19658:	pop	{fp, pc}
   1965c:	push	{fp, lr}
   19660:	mov	fp, sp
   19664:	sub	sp, sp, #56	; 0x38
   19668:	add	ip, fp, #8
   1966c:	str	ip, [sp, #12]
   19670:	ldr	lr, [fp, #8]
   19674:	cmp	lr, #0
   19678:	str	lr, [sp, #16]
   1967c:	beq	19718 <__assert_fail@plt+0x8230>
   19680:	ldr	lr, [ip, #4]
   19684:	cmp	lr, #0
   19688:	str	lr, [sp, #20]
   1968c:	beq	19720 <__assert_fail@plt+0x8238>
   19690:	ldr	lr, [ip, #8]
   19694:	cmp	lr, #0
   19698:	str	lr, [sp, #24]
   1969c:	beq	19728 <__assert_fail@plt+0x8240>
   196a0:	ldr	lr, [ip, #12]
   196a4:	cmp	lr, #0
   196a8:	str	lr, [sp, #28]
   196ac:	beq	19730 <__assert_fail@plt+0x8248>
   196b0:	ldr	lr, [ip, #16]
   196b4:	cmp	lr, #0
   196b8:	str	lr, [sp, #32]
   196bc:	beq	19738 <__assert_fail@plt+0x8250>
   196c0:	ldr	lr, [ip, #20]
   196c4:	cmp	lr, #0
   196c8:	str	lr, [sp, #36]	; 0x24
   196cc:	beq	19740 <__assert_fail@plt+0x8258>
   196d0:	ldr	lr, [ip, #24]
   196d4:	cmp	lr, #0
   196d8:	str	lr, [sp, #40]	; 0x28
   196dc:	beq	19748 <__assert_fail@plt+0x8260>
   196e0:	ldr	lr, [ip, #28]
   196e4:	cmp	lr, #0
   196e8:	str	lr, [sp, #44]	; 0x2c
   196ec:	beq	19750 <__assert_fail@plt+0x8268>
   196f0:	ldr	lr, [ip, #32]
   196f4:	cmp	lr, #0
   196f8:	str	lr, [sp, #48]	; 0x30
   196fc:	beq	19758 <__assert_fail@plt+0x8270>
   19700:	ldr	lr, [ip, #36]	; 0x24
   19704:	mov	ip, #10
   19708:	cmp	lr, #0
   1970c:	str	lr, [sp, #52]	; 0x34
   19710:	movweq	ip, #9
   19714:	b	1975c <__assert_fail@plt+0x8274>
   19718:	mov	ip, #0
   1971c:	b	1975c <__assert_fail@plt+0x8274>
   19720:	mov	ip, #1
   19724:	b	1975c <__assert_fail@plt+0x8274>
   19728:	mov	ip, #2
   1972c:	b	1975c <__assert_fail@plt+0x8274>
   19730:	mov	ip, #3
   19734:	b	1975c <__assert_fail@plt+0x8274>
   19738:	mov	ip, #4
   1973c:	b	1975c <__assert_fail@plt+0x8274>
   19740:	mov	ip, #5
   19744:	b	1975c <__assert_fail@plt+0x8274>
   19748:	mov	ip, #6
   1974c:	b	1975c <__assert_fail@plt+0x8274>
   19750:	mov	ip, #7
   19754:	b	1975c <__assert_fail@plt+0x8274>
   19758:	mov	ip, #8
   1975c:	add	lr, sp, #16
   19760:	str	ip, [sp, #4]
   19764:	str	lr, [sp]
   19768:	bl	191d8 <__assert_fail@plt+0x7cf0>
   1976c:	mov	sp, fp
   19770:	pop	{fp, pc}
   19774:	push	{fp, lr}
   19778:	mov	fp, sp
   1977c:	movw	r0, #49556	; 0xc194
   19780:	movt	r0, #2
   19784:	ldr	r1, [r0]
   19788:	movw	r0, #45743	; 0xb2af
   1978c:	movt	r0, #1
   19790:	bl	111dc <fputs_unlocked@plt>
   19794:	movw	r1, #48407	; 0xbd17
   19798:	mov	r0, #0
   1979c:	mov	r2, #5
   197a0:	movt	r1, #1
   197a4:	bl	1126c <dcgettext@plt>
   197a8:	movw	r2, #46915	; 0xb743
   197ac:	mov	r1, r0
   197b0:	mov	r0, #1
   197b4:	movt	r2, #1
   197b8:	bl	113b0 <__printf_chk@plt>
   197bc:	movw	r1, #48427	; 0xbd2b
   197c0:	mov	r0, #0
   197c4:	mov	r2, #5
   197c8:	movt	r1, #1
   197cc:	bl	1126c <dcgettext@plt>
   197d0:	movw	r2, #45125	; 0xb045
   197d4:	movw	r3, #45552	; 0xb1f0
   197d8:	mov	r1, r0
   197dc:	mov	r0, #1
   197e0:	movt	r2, #1
   197e4:	movt	r3, #1
   197e8:	bl	113b0 <__printf_chk@plt>
   197ec:	movw	r1, #48447	; 0xbd3f
   197f0:	mov	r0, #0
   197f4:	mov	r2, #5
   197f8:	movt	r1, #1
   197fc:	bl	1126c <dcgettext@plt>
   19800:	movw	r2, #48486	; 0xbd66
   19804:	mov	r1, r0
   19808:	mov	r0, #1
   1980c:	movt	r2, #1
   19810:	pop	{fp, lr}
   19814:	b	113b0 <__printf_chk@plt>
   19818:	push	{r4, sl, fp, lr}
   1981c:	add	fp, sp, #8
   19820:	movw	r4, #49904	; 0xc2f0
   19824:	movt	r4, #2
   19828:	ldrb	r0, [r4]
   1982c:	cmp	r0, #1
   19830:	bne	19844 <__assert_fail@plt+0x835c>
   19834:	movw	r0, #49905	; 0xc2f1
   19838:	movt	r0, #2
   1983c:	ldrb	r0, [r0]
   19840:	b	19864 <__assert_fail@plt+0x837c>
   19844:	bl	11290 <geteuid@plt>
   19848:	mov	r1, #1
   1984c:	clz	r0, r0
   19850:	strb	r1, [r4]
   19854:	movw	r1, #49905	; 0xc2f1
   19858:	lsr	r0, r0, #5
   1985c:	movt	r1, #2
   19860:	strb	r0, [r1]
   19864:	cmp	r0, #0
   19868:	movwne	r0, #1
   1986c:	pop	{r4, sl, fp, pc}
   19870:	push	{r4, r5, r6, sl, fp, lr}
   19874:	add	fp, sp, #16
   19878:	mov	r4, r2
   1987c:	mov	r5, r1
   19880:	mov	r6, r0
   19884:	bl	1a504 <__assert_fail@plt+0x901c>
   19888:	cmp	r0, #0
   1988c:	popne	{r4, r5, r6, sl, fp, pc}
   19890:	cmp	r6, #0
   19894:	beq	198a8 <__assert_fail@plt+0x83c0>
   19898:	cmp	r5, #0
   1989c:	cmpne	r4, #0
   198a0:	bne	198a8 <__assert_fail@plt+0x83c0>
   198a4:	pop	{r4, r5, r6, sl, fp, pc}
   198a8:	bl	19e24 <__assert_fail@plt+0x893c>
   198ac:	push	{r4, r5, r6, sl, fp, lr}
   198b0:	add	fp, sp, #16
   198b4:	mov	r4, r2
   198b8:	mov	r5, r1
   198bc:	mov	r6, r0
   198c0:	bl	1a504 <__assert_fail@plt+0x901c>
   198c4:	cmp	r0, #0
   198c8:	popne	{r4, r5, r6, sl, fp, pc}
   198cc:	cmp	r6, #0
   198d0:	beq	198e4 <__assert_fail@plt+0x83fc>
   198d4:	cmp	r5, #0
   198d8:	cmpne	r4, #0
   198dc:	bne	198e4 <__assert_fail@plt+0x83fc>
   198e0:	pop	{r4, r5, r6, sl, fp, pc}
   198e4:	bl	19e24 <__assert_fail@plt+0x893c>
   198e8:	push	{fp, lr}
   198ec:	mov	fp, sp
   198f0:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   198f4:	cmp	r0, #0
   198f8:	popne	{fp, pc}
   198fc:	bl	19e24 <__assert_fail@plt+0x893c>
   19900:	push	{fp, lr}
   19904:	mov	fp, sp
   19908:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   1990c:	cmp	r0, #0
   19910:	popne	{fp, pc}
   19914:	bl	19e24 <__assert_fail@plt+0x893c>
   19918:	push	{fp, lr}
   1991c:	mov	fp, sp
   19920:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   19924:	cmp	r0, #0
   19928:	popne	{fp, pc}
   1992c:	bl	19e24 <__assert_fail@plt+0x893c>
   19930:	push	{r4, r5, fp, lr}
   19934:	add	fp, sp, #8
   19938:	mov	r4, r1
   1993c:	mov	r5, r0
   19940:	bl	19fe8 <__assert_fail@plt+0x8b00>
   19944:	cmp	r0, #0
   19948:	popne	{r4, r5, fp, pc}
   1994c:	cmp	r5, #0
   19950:	beq	19960 <__assert_fail@plt+0x8478>
   19954:	cmp	r4, #0
   19958:	bne	19960 <__assert_fail@plt+0x8478>
   1995c:	pop	{r4, r5, fp, pc}
   19960:	bl	19e24 <__assert_fail@plt+0x893c>
   19964:	push	{fp, lr}
   19968:	mov	fp, sp
   1996c:	cmp	r1, #0
   19970:	orreq	r1, r1, #1
   19974:	bl	19fe8 <__assert_fail@plt+0x8b00>
   19978:	cmp	r0, #0
   1997c:	popne	{fp, pc}
   19980:	bl	19e24 <__assert_fail@plt+0x893c>
   19984:	push	{fp, lr}
   19988:	mov	fp, sp
   1998c:	clz	r3, r2
   19990:	lsr	ip, r3, #5
   19994:	clz	r3, r1
   19998:	lsr	r3, r3, #5
   1999c:	orrs	r3, r3, ip
   199a0:	movwne	r1, #1
   199a4:	movwne	r2, #1
   199a8:	bl	1a504 <__assert_fail@plt+0x901c>
   199ac:	cmp	r0, #0
   199b0:	popne	{fp, pc}
   199b4:	bl	19e24 <__assert_fail@plt+0x893c>
   199b8:	push	{fp, lr}
   199bc:	mov	fp, sp
   199c0:	mov	r2, r1
   199c4:	mov	r1, r0
   199c8:	mov	r0, #0
   199cc:	bl	1a504 <__assert_fail@plt+0x901c>
   199d0:	cmp	r0, #0
   199d4:	popne	{fp, pc}
   199d8:	bl	19e24 <__assert_fail@plt+0x893c>
   199dc:	push	{fp, lr}
   199e0:	mov	fp, sp
   199e4:	mov	r2, r1
   199e8:	mov	r1, r0
   199ec:	clz	r0, r2
   199f0:	clz	r3, r1
   199f4:	lsr	r0, r0, #5
   199f8:	lsr	r3, r3, #5
   199fc:	orrs	r0, r3, r0
   19a00:	mov	r0, #0
   19a04:	movwne	r1, #1
   19a08:	movwne	r2, #1
   19a0c:	bl	1a504 <__assert_fail@plt+0x901c>
   19a10:	cmp	r0, #0
   19a14:	popne	{fp, pc}
   19a18:	bl	19e24 <__assert_fail@plt+0x893c>
   19a1c:	push	{r4, r5, r6, sl, fp, lr}
   19a20:	add	fp, sp, #16
   19a24:	ldr	r5, [r1]
   19a28:	mov	r4, r1
   19a2c:	mov	r6, r0
   19a30:	cmp	r0, #0
   19a34:	beq	19a4c <__assert_fail@plt+0x8564>
   19a38:	mov	r0, #1
   19a3c:	add	r0, r0, r5, lsr #1
   19a40:	adds	r5, r5, r0
   19a44:	bcc	19a54 <__assert_fail@plt+0x856c>
   19a48:	b	19a90 <__assert_fail@plt+0x85a8>
   19a4c:	cmp	r5, #0
   19a50:	movweq	r5, #64	; 0x40
   19a54:	mov	r0, r6
   19a58:	mov	r1, r5
   19a5c:	mov	r2, #1
   19a60:	bl	1a504 <__assert_fail@plt+0x901c>
   19a64:	cmp	r5, #0
   19a68:	mov	r1, r5
   19a6c:	movwne	r1, #1
   19a70:	cmp	r0, #0
   19a74:	bne	19a88 <__assert_fail@plt+0x85a0>
   19a78:	clz	r2, r6
   19a7c:	lsr	r2, r2, #5
   19a80:	orrs	r1, r2, r1
   19a84:	bne	19a90 <__assert_fail@plt+0x85a8>
   19a88:	str	r5, [r4]
   19a8c:	pop	{r4, r5, r6, sl, fp, pc}
   19a90:	bl	19e24 <__assert_fail@plt+0x893c>
   19a94:	push	{r4, r5, r6, r7, fp, lr}
   19a98:	add	fp, sp, #16
   19a9c:	ldr	r5, [r1]
   19aa0:	mov	r6, r2
   19aa4:	mov	r4, r1
   19aa8:	mov	r7, r0
   19aac:	cmp	r0, #0
   19ab0:	beq	19ac8 <__assert_fail@plt+0x85e0>
   19ab4:	mov	r0, #1
   19ab8:	add	r0, r0, r5, lsr #1
   19abc:	adds	r5, r5, r0
   19ac0:	bcc	19ae0 <__assert_fail@plt+0x85f8>
   19ac4:	b	19b14 <__assert_fail@plt+0x862c>
   19ac8:	cmp	r5, #0
   19acc:	bne	19ae0 <__assert_fail@plt+0x85f8>
   19ad0:	mov	r0, #64	; 0x40
   19ad4:	cmp	r6, #64	; 0x40
   19ad8:	udiv	r5, r0, r6
   19adc:	addhi	r5, r5, #1
   19ae0:	mov	r0, r7
   19ae4:	mov	r1, r5
   19ae8:	mov	r2, r6
   19aec:	bl	1a504 <__assert_fail@plt+0x901c>
   19af0:	cmp	r0, #0
   19af4:	bne	19b0c <__assert_fail@plt+0x8624>
   19af8:	cmp	r7, #0
   19afc:	beq	19b14 <__assert_fail@plt+0x862c>
   19b00:	cmp	r6, #0
   19b04:	cmpne	r5, #0
   19b08:	bne	19b14 <__assert_fail@plt+0x862c>
   19b0c:	str	r5, [r4]
   19b10:	pop	{r4, r5, r6, r7, fp, pc}
   19b14:	bl	19e24 <__assert_fail@plt+0x893c>
   19b18:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19b1c:	add	fp, sp, #24
   19b20:	mov	r8, r1
   19b24:	ldr	r1, [r1]
   19b28:	mov	r5, r0
   19b2c:	add	r0, r1, r1, asr #1
   19b30:	cmp	r0, r1
   19b34:	mvnvs	r0, #-2147483648	; 0x80000000
   19b38:	cmp	r0, r3
   19b3c:	mov	r7, r0
   19b40:	movgt	r7, r3
   19b44:	cmn	r3, #1
   19b48:	movle	r7, r0
   19b4c:	ldr	r0, [fp, #8]
   19b50:	cmn	r0, #1
   19b54:	ble	19b7c <__assert_fail@plt+0x8694>
   19b58:	cmp	r0, #0
   19b5c:	beq	19bd0 <__assert_fail@plt+0x86e8>
   19b60:	cmn	r7, #1
   19b64:	ble	19ba4 <__assert_fail@plt+0x86bc>
   19b68:	mvn	r4, #-2147483648	; 0x80000000
   19b6c:	udiv	r6, r4, r0
   19b70:	cmp	r6, r7
   19b74:	bge	19bd0 <__assert_fail@plt+0x86e8>
   19b78:	b	19be0 <__assert_fail@plt+0x86f8>
   19b7c:	cmn	r7, #1
   19b80:	ble	19bc0 <__assert_fail@plt+0x86d8>
   19b84:	cmn	r0, #1
   19b88:	beq	19bd0 <__assert_fail@plt+0x86e8>
   19b8c:	mov	r6, #-2147483648	; 0x80000000
   19b90:	mvn	r4, #-2147483648	; 0x80000000
   19b94:	sdiv	r6, r6, r0
   19b98:	cmp	r6, r7
   19b9c:	bge	19bd0 <__assert_fail@plt+0x86e8>
   19ba0:	b	19be0 <__assert_fail@plt+0x86f8>
   19ba4:	beq	19bd0 <__assert_fail@plt+0x86e8>
   19ba8:	mov	r6, #-2147483648	; 0x80000000
   19bac:	mvn	r4, #-2147483648	; 0x80000000
   19bb0:	sdiv	r6, r6, r7
   19bb4:	cmp	r6, r0
   19bb8:	bge	19bd0 <__assert_fail@plt+0x86e8>
   19bbc:	b	19be0 <__assert_fail@plt+0x86f8>
   19bc0:	mvn	r4, #-2147483648	; 0x80000000
   19bc4:	sdiv	r6, r4, r0
   19bc8:	cmp	r7, r6
   19bcc:	blt	19be0 <__assert_fail@plt+0x86f8>
   19bd0:	mul	r6, r7, r0
   19bd4:	mov	r4, #64	; 0x40
   19bd8:	cmp	r6, #63	; 0x3f
   19bdc:	bgt	19be8 <__assert_fail@plt+0x8700>
   19be0:	sdiv	r7, r4, r0
   19be4:	mul	r6, r7, r0
   19be8:	cmp	r5, #0
   19bec:	moveq	r4, #0
   19bf0:	streq	r4, [r8]
   19bf4:	sub	r4, r7, r1
   19bf8:	cmp	r4, r2
   19bfc:	bge	19ca8 <__assert_fail@plt+0x87c0>
   19c00:	add	r7, r1, r2
   19c04:	mov	r6, #0
   19c08:	mov	r2, #0
   19c0c:	cmp	r7, r3
   19c10:	movwgt	r6, #1
   19c14:	cmn	r3, #1
   19c18:	movwgt	r2, #1
   19c1c:	cmp	r7, r1
   19c20:	bvs	19cdc <__assert_fail@plt+0x87f4>
   19c24:	ands	r1, r2, r6
   19c28:	bne	19cdc <__assert_fail@plt+0x87f4>
   19c2c:	cmn	r0, #1
   19c30:	ble	19c58 <__assert_fail@plt+0x8770>
   19c34:	cmp	r0, #0
   19c38:	beq	19ca4 <__assert_fail@plt+0x87bc>
   19c3c:	cmn	r7, #1
   19c40:	ble	19c7c <__assert_fail@plt+0x8794>
   19c44:	mvn	r1, #-2147483648	; 0x80000000
   19c48:	udiv	r1, r1, r0
   19c4c:	cmp	r1, r7
   19c50:	bge	19ca4 <__assert_fail@plt+0x87bc>
   19c54:	b	19cdc <__assert_fail@plt+0x87f4>
   19c58:	cmn	r7, #1
   19c5c:	ble	19c94 <__assert_fail@plt+0x87ac>
   19c60:	cmn	r0, #1
   19c64:	beq	19ca4 <__assert_fail@plt+0x87bc>
   19c68:	mov	r1, #-2147483648	; 0x80000000
   19c6c:	sdiv	r1, r1, r0
   19c70:	cmp	r1, r7
   19c74:	bge	19ca4 <__assert_fail@plt+0x87bc>
   19c78:	b	19cdc <__assert_fail@plt+0x87f4>
   19c7c:	beq	19ca4 <__assert_fail@plt+0x87bc>
   19c80:	mov	r1, #-2147483648	; 0x80000000
   19c84:	sdiv	r1, r1, r7
   19c88:	cmp	r1, r0
   19c8c:	bge	19ca4 <__assert_fail@plt+0x87bc>
   19c90:	b	19cdc <__assert_fail@plt+0x87f4>
   19c94:	mvn	r1, #-2147483648	; 0x80000000
   19c98:	sdiv	r1, r1, r0
   19c9c:	cmp	r7, r1
   19ca0:	blt	19cdc <__assert_fail@plt+0x87f4>
   19ca4:	mul	r6, r7, r0
   19ca8:	mov	r0, r5
   19cac:	mov	r1, r6
   19cb0:	bl	19fe8 <__assert_fail@plt+0x8b00>
   19cb4:	cmp	r6, #0
   19cb8:	movwne	r6, #1
   19cbc:	cmp	r0, #0
   19cc0:	bne	19cd4 <__assert_fail@plt+0x87ec>
   19cc4:	clz	r1, r5
   19cc8:	lsr	r1, r1, #5
   19ccc:	orrs	r1, r1, r6
   19cd0:	bne	19cdc <__assert_fail@plt+0x87f4>
   19cd4:	str	r7, [r8]
   19cd8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19cdc:	bl	19e24 <__assert_fail@plt+0x893c>
   19ce0:	push	{fp, lr}
   19ce4:	mov	fp, sp
   19ce8:	mov	r1, #1
   19cec:	bl	19f64 <__assert_fail@plt+0x8a7c>
   19cf0:	cmp	r0, #0
   19cf4:	popne	{fp, pc}
   19cf8:	bl	19e24 <__assert_fail@plt+0x893c>
   19cfc:	push	{fp, lr}
   19d00:	mov	fp, sp
   19d04:	bl	19f64 <__assert_fail@plt+0x8a7c>
   19d08:	cmp	r0, #0
   19d0c:	popne	{fp, pc}
   19d10:	bl	19e24 <__assert_fail@plt+0x893c>
   19d14:	push	{fp, lr}
   19d18:	mov	fp, sp
   19d1c:	mov	r1, #1
   19d20:	bl	19f64 <__assert_fail@plt+0x8a7c>
   19d24:	cmp	r0, #0
   19d28:	popne	{fp, pc}
   19d2c:	bl	19e24 <__assert_fail@plt+0x893c>
   19d30:	push	{fp, lr}
   19d34:	mov	fp, sp
   19d38:	bl	19f64 <__assert_fail@plt+0x8a7c>
   19d3c:	cmp	r0, #0
   19d40:	popne	{fp, pc}
   19d44:	bl	19e24 <__assert_fail@plt+0x893c>
   19d48:	push	{r4, r5, fp, lr}
   19d4c:	add	fp, sp, #8
   19d50:	mov	r5, r0
   19d54:	mov	r0, r1
   19d58:	mov	r4, r1
   19d5c:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   19d60:	cmp	r0, #0
   19d64:	beq	19d78 <__assert_fail@plt+0x8890>
   19d68:	mov	r1, r5
   19d6c:	mov	r2, r4
   19d70:	pop	{r4, r5, fp, lr}
   19d74:	b	11254 <memcpy@plt>
   19d78:	bl	19e24 <__assert_fail@plt+0x893c>
   19d7c:	push	{r4, r5, fp, lr}
   19d80:	add	fp, sp, #8
   19d84:	mov	r5, r0
   19d88:	mov	r0, r1
   19d8c:	mov	r4, r1
   19d90:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   19d94:	cmp	r0, #0
   19d98:	beq	19dac <__assert_fail@plt+0x88c4>
   19d9c:	mov	r1, r5
   19da0:	mov	r2, r4
   19da4:	pop	{r4, r5, fp, lr}
   19da8:	b	11254 <memcpy@plt>
   19dac:	bl	19e24 <__assert_fail@plt+0x893c>
   19db0:	push	{r4, r5, fp, lr}
   19db4:	add	fp, sp, #8
   19db8:	mov	r5, r0
   19dbc:	add	r0, r1, #1
   19dc0:	mov	r4, r1
   19dc4:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   19dc8:	cmp	r0, #0
   19dcc:	beq	19de8 <__assert_fail@plt+0x8900>
   19dd0:	mov	r1, #0
   19dd4:	mov	r2, r4
   19dd8:	strb	r1, [r0, r4]
   19ddc:	mov	r1, r5
   19de0:	pop	{r4, r5, fp, lr}
   19de4:	b	11254 <memcpy@plt>
   19de8:	bl	19e24 <__assert_fail@plt+0x893c>
   19dec:	push	{r4, r5, fp, lr}
   19df0:	add	fp, sp, #8
   19df4:	mov	r4, r0
   19df8:	bl	11374 <strlen@plt>
   19dfc:	add	r5, r0, #1
   19e00:	mov	r0, r5
   19e04:	bl	19fb8 <__assert_fail@plt+0x8ad0>
   19e08:	cmp	r0, #0
   19e0c:	beq	19e20 <__assert_fail@plt+0x8938>
   19e10:	mov	r1, r4
   19e14:	mov	r2, r5
   19e18:	pop	{r4, r5, fp, lr}
   19e1c:	b	11254 <memcpy@plt>
   19e20:	bl	19e24 <__assert_fail@plt+0x893c>
   19e24:	push	{fp, lr}
   19e28:	mov	fp, sp
   19e2c:	movw	r0, #49456	; 0xc130
   19e30:	movw	r1, #48562	; 0xbdb2
   19e34:	mov	r2, #5
   19e38:	movt	r0, #2
   19e3c:	movt	r1, #1
   19e40:	ldr	r4, [r0]
   19e44:	mov	r0, #0
   19e48:	bl	1126c <dcgettext@plt>
   19e4c:	movw	r2, #47207	; 0xb867
   19e50:	mov	r3, r0
   19e54:	mov	r0, r4
   19e58:	mov	r1, #0
   19e5c:	movt	r2, #1
   19e60:	bl	112fc <error@plt>
   19e64:	bl	114a0 <abort@plt>
   19e68:	push	{fp, lr}
   19e6c:	mov	fp, sp
   19e70:	orr	r1, r1, #512	; 0x200
   19e74:	bl	13b48 <__assert_fail@plt+0x2660>
   19e78:	cmp	r0, #0
   19e7c:	popne	{fp, pc}
   19e80:	bl	1138c <__errno_location@plt>
   19e84:	ldr	r0, [r0]
   19e88:	cmp	r0, #22
   19e8c:	bne	19eb0 <__assert_fail@plt+0x89c8>
   19e90:	movw	r0, #48579	; 0xbdc3
   19e94:	movw	r1, #48595	; 0xbdd3
   19e98:	movw	r3, #48606	; 0xbdde
   19e9c:	mov	r2, #41	; 0x29
   19ea0:	movt	r0, #1
   19ea4:	movt	r1, #1
   19ea8:	movt	r3, #1
   19eac:	bl	114e8 <__assert_fail@plt>
   19eb0:	bl	19e24 <__assert_fail@plt+0x893c>
   19eb4:	ldr	r0, [r0, #48]	; 0x30
   19eb8:	and	r0, r0, #17
   19ebc:	cmp	r0, #16
   19ec0:	moveq	r0, #1
   19ec4:	bxeq	lr
   19ec8:	cmp	r0, #17
   19ecc:	movne	r0, #0
   19ed0:	bxne	lr
   19ed4:	ldr	r0, [r1, #48]	; 0x30
   19ed8:	cmp	r0, #0
   19edc:	movwne	r0, #1
   19ee0:	bx	lr
   19ee4:	push	{r4, sl, fp, lr}
   19ee8:	add	fp, sp, #8
   19eec:	sub	sp, sp, #8
   19ef0:	movw	r0, #49552	; 0xc190
   19ef4:	mov	r4, #0
   19ef8:	mov	r1, sp
   19efc:	mov	r2, #10
   19f00:	movt	r0, #2
   19f04:	str	r4, [sp, #4]
   19f08:	str	r4, [sp]
   19f0c:	ldr	r3, [r0]
   19f10:	add	r0, sp, #4
   19f14:	bl	111f4 <__getdelim@plt>
   19f18:	cmp	r0, #1
   19f1c:	blt	19f50 <__assert_fail@plt+0x8a68>
   19f20:	sub	r1, r0, #1
   19f24:	ldr	r0, [sp, #4]
   19f28:	ldrb	r2, [r0, r1]
   19f2c:	cmp	r2, #10
   19f30:	bne	19f40 <__assert_fail@plt+0x8a58>
   19f34:	mov	r2, #0
   19f38:	strb	r2, [r0, r1]
   19f3c:	ldr	r0, [sp, #4]
   19f40:	bl	113f8 <rpmatch@plt>
   19f44:	cmp	r0, #0
   19f48:	mov	r4, #0
   19f4c:	movwgt	r4, #1
   19f50:	ldr	r0, [sp, #4]
   19f54:	bl	13a78 <__assert_fail@plt+0x2590>
   19f58:	mov	r0, r4
   19f5c:	sub	sp, fp, #8
   19f60:	pop	{r4, sl, fp, pc}
   19f64:	clz	r2, r1
   19f68:	clz	r3, r0
   19f6c:	lsr	r2, r2, #5
   19f70:	lsr	r3, r3, #5
   19f74:	orrs	r2, r3, r2
   19f78:	movwne	r1, #1
   19f7c:	movwne	r0, #1
   19f80:	cmp	r1, #0
   19f84:	beq	19fb4 <__assert_fail@plt+0x8acc>
   19f88:	mvn	r2, #-2147483648	; 0x80000000
   19f8c:	udiv	r2, r2, r1
   19f90:	cmp	r2, r0
   19f94:	bcs	19fb4 <__assert_fail@plt+0x8acc>
   19f98:	push	{fp, lr}
   19f9c:	mov	fp, sp
   19fa0:	bl	1138c <__errno_location@plt>
   19fa4:	mov	r1, #12
   19fa8:	str	r1, [r0]
   19fac:	mov	r0, #0
   19fb0:	pop	{fp, pc}
   19fb4:	b	111d0 <calloc@plt>
   19fb8:	cmp	r0, #0
   19fbc:	movweq	r0, #1
   19fc0:	cmn	r0, #1
   19fc4:	ble	19fcc <__assert_fail@plt+0x8ae4>
   19fc8:	b	11314 <malloc@plt>
   19fcc:	push	{fp, lr}
   19fd0:	mov	fp, sp
   19fd4:	bl	1138c <__errno_location@plt>
   19fd8:	mov	r1, #12
   19fdc:	str	r1, [r0]
   19fe0:	mov	r0, #0
   19fe4:	pop	{fp, pc}
   19fe8:	push	{fp, lr}
   19fec:	mov	fp, sp
   19ff0:	cmp	r0, #0
   19ff4:	beq	1a010 <__assert_fail@plt+0x8b28>
   19ff8:	cmp	r1, #0
   19ffc:	beq	1a01c <__assert_fail@plt+0x8b34>
   1a000:	cmn	r1, #1
   1a004:	ble	1a028 <__assert_fail@plt+0x8b40>
   1a008:	pop	{fp, lr}
   1a00c:	b	11278 <realloc@plt>
   1a010:	mov	r0, r1
   1a014:	pop	{fp, lr}
   1a018:	b	19fb8 <__assert_fail@plt+0x8ad0>
   1a01c:	bl	13a78 <__assert_fail@plt+0x2590>
   1a020:	mov	r0, #0
   1a024:	pop	{fp, pc}
   1a028:	bl	1138c <__errno_location@plt>
   1a02c:	mov	r1, #12
   1a030:	str	r1, [r0]
   1a034:	mov	r0, #0
   1a038:	pop	{fp, pc}
   1a03c:	push	{r4, r5, r6, sl, fp, lr}
   1a040:	add	fp, sp, #16
   1a044:	mov	r4, r0
   1a048:	bl	112e4 <__fpending@plt>
   1a04c:	ldr	r6, [r4]
   1a050:	mov	r5, r0
   1a054:	mov	r0, r4
   1a058:	bl	1a1b0 <__assert_fail@plt+0x8cc8>
   1a05c:	tst	r6, #32
   1a060:	bne	1a098 <__assert_fail@plt+0x8bb0>
   1a064:	cmp	r0, #0
   1a068:	mov	r4, r0
   1a06c:	mvnne	r4, #0
   1a070:	cmp	r5, #0
   1a074:	bne	1a0a4 <__assert_fail@plt+0x8bbc>
   1a078:	cmp	r0, #0
   1a07c:	beq	1a0a4 <__assert_fail@plt+0x8bbc>
   1a080:	bl	1138c <__errno_location@plt>
   1a084:	ldr	r0, [r0]
   1a088:	subs	r4, r0, #9
   1a08c:	mvnne	r4, #0
   1a090:	mov	r0, r4
   1a094:	pop	{r4, r5, r6, sl, fp, pc}
   1a098:	mvn	r4, #0
   1a09c:	cmp	r0, #0
   1a0a0:	beq	1a0ac <__assert_fail@plt+0x8bc4>
   1a0a4:	mov	r0, r4
   1a0a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a0ac:	bl	1138c <__errno_location@plt>
   1a0b0:	mov	r1, #0
   1a0b4:	str	r1, [r0]
   1a0b8:	mov	r0, r4
   1a0bc:	pop	{r4, r5, r6, sl, fp, pc}
   1a0c0:	movw	r2, #62998	; 0xf616
   1a0c4:	mov	r1, #0
   1a0c8:	movt	r2, #149	; 0x95
   1a0cc:	str	r1, [r0, #16]
   1a0d0:	str	r1, [r0, #20]
   1a0d4:	str	r2, [r0, #24]
   1a0d8:	bx	lr
   1a0dc:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   1a0e0:	add	fp, sp, #24
   1a0e4:	ldr	r2, [r0, #24]
   1a0e8:	movw	r3, #62998	; 0xf616
   1a0ec:	movt	r3, #149	; 0x95
   1a0f0:	cmp	r2, r3
   1a0f4:	bne	1a190 <__assert_fail@plt+0x8ca8>
   1a0f8:	add	r3, r0, #16
   1a0fc:	add	ip, r0, #8
   1a100:	ldrd	r4, [r3]
   1a104:	orrs	r2, r4, r5
   1a108:	beq	1a144 <__assert_fail@plt+0x8c5c>
   1a10c:	ldr	r6, [r1, #96]	; 0x60
   1a110:	ldr	r9, [r1, #100]	; 0x64
   1a114:	ldm	r0, {r2, r7}
   1a118:	eor	r7, r9, r7
   1a11c:	eor	r2, r6, r2
   1a120:	orrs	r2, r2, r7
   1a124:	bne	1a144 <__assert_fail@plt+0x8c5c>
   1a128:	ldm	ip, {r2, r7}
   1a12c:	ldm	r1, {r6, r9}
   1a130:	eor	r7, r9, r7
   1a134:	eor	r2, r6, r2
   1a138:	orrs	r2, r2, r7
   1a13c:	mov	r2, #1
   1a140:	beq	1a17c <__assert_fail@plt+0x8c94>
   1a144:	adds	r6, r4, #1
   1a148:	adc	r7, r5, #0
   1a14c:	and	r2, r6, r4
   1a150:	strd	r6, [r3]
   1a154:	and	r3, r7, r5
   1a158:	orrs	r2, r2, r3
   1a15c:	mov	r2, #0
   1a160:	bne	1a17c <__assert_fail@plt+0x8c94>
   1a164:	orrs	r3, r6, r7
   1a168:	beq	1a184 <__assert_fail@plt+0x8c9c>
   1a16c:	ldrd	r4, [r1]
   1a170:	strd	r4, [ip]
   1a174:	ldrd	r4, [r1, #96]	; 0x60
   1a178:	strd	r4, [r0]
   1a17c:	mov	r0, r2
   1a180:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a184:	mov	r2, #1
   1a188:	mov	r0, r2
   1a18c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   1a190:	movw	r0, #48684	; 0xbe2c
   1a194:	movw	r1, #48708	; 0xbe44
   1a198:	movw	r3, #48726	; 0xbe56
   1a19c:	mov	r2, #60	; 0x3c
   1a1a0:	movt	r0, #1
   1a1a4:	movt	r1, #1
   1a1a8:	movt	r3, #1
   1a1ac:	bl	114e8 <__assert_fail@plt>
   1a1b0:	push	{r4, r5, r6, sl, fp, lr}
   1a1b4:	add	fp, sp, #16
   1a1b8:	sub	sp, sp, #8
   1a1bc:	mov	r4, r0
   1a1c0:	bl	113bc <fileno@plt>
   1a1c4:	cmn	r0, #1
   1a1c8:	ble	1a23c <__assert_fail@plt+0x8d54>
   1a1cc:	mov	r0, r4
   1a1d0:	bl	1132c <__freading@plt>
   1a1d4:	cmp	r0, #0
   1a1d8:	beq	1a204 <__assert_fail@plt+0x8d1c>
   1a1dc:	mov	r0, r4
   1a1e0:	bl	113bc <fileno@plt>
   1a1e4:	mov	r1, #1
   1a1e8:	mov	r2, #0
   1a1ec:	mov	r3, #0
   1a1f0:	str	r1, [sp]
   1a1f4:	bl	112cc <lseek64@plt>
   1a1f8:	and	r0, r0, r1
   1a1fc:	cmn	r0, #1
   1a200:	beq	1a23c <__assert_fail@plt+0x8d54>
   1a204:	mov	r0, r4
   1a208:	bl	1381c <__assert_fail@plt+0x2334>
   1a20c:	cmp	r0, #0
   1a210:	beq	1a23c <__assert_fail@plt+0x8d54>
   1a214:	bl	1138c <__errno_location@plt>
   1a218:	ldr	r6, [r0]
   1a21c:	mov	r5, r0
   1a220:	mov	r0, r4
   1a224:	bl	113d4 <fclose@plt>
   1a228:	cmp	r6, #0
   1a22c:	strne	r6, [r5]
   1a230:	mvnne	r0, #0
   1a234:	sub	sp, fp, #16
   1a238:	pop	{r4, r5, r6, sl, fp, pc}
   1a23c:	mov	r0, r4
   1a240:	sub	sp, fp, #16
   1a244:	pop	{r4, r5, r6, sl, fp, lr}
   1a248:	b	113d4 <fclose@plt>
   1a24c:	sub	sp, sp, #8
   1a250:	push	{r4, r5, r6, r7, fp, lr}
   1a254:	add	fp, sp, #16
   1a258:	sub	sp, sp, #8
   1a25c:	mov	r5, r0
   1a260:	add	r0, fp, #8
   1a264:	cmp	r1, #11
   1a268:	str	r2, [fp, #8]
   1a26c:	str	r3, [fp, #12]
   1a270:	str	r0, [sp, #4]
   1a274:	bhi	1a2b0 <__assert_fail@plt+0x8dc8>
   1a278:	mov	r0, #1
   1a27c:	movw	r2, #1300	; 0x514
   1a280:	tst	r2, r0, lsl r1
   1a284:	bne	1a370 <__assert_fail@plt+0x8e88>
   1a288:	movw	r2, #2570	; 0xa0a
   1a28c:	tst	r2, r0, lsl r1
   1a290:	bne	1a2d8 <__assert_fail@plt+0x8df0>
   1a294:	cmp	r1, #0
   1a298:	bne	1a2b0 <__assert_fail@plt+0x8dc8>
   1a29c:	ldr	r0, [sp, #4]
   1a2a0:	add	r1, r0, #4
   1a2a4:	str	r1, [sp, #4]
   1a2a8:	mov	r1, #0
   1a2ac:	b	1a37c <__assert_fail@plt+0x8e94>
   1a2b0:	sub	r0, r1, #1024	; 0x400
   1a2b4:	cmp	r0, #10
   1a2b8:	bhi	1a370 <__assert_fail@plt+0x8e88>
   1a2bc:	mov	r2, #1
   1a2c0:	movw	r3, #645	; 0x285
   1a2c4:	tst	r3, r2, lsl r0
   1a2c8:	bne	1a370 <__assert_fail@plt+0x8e88>
   1a2cc:	movw	r3, #1282	; 0x502
   1a2d0:	tst	r3, r2, lsl r0
   1a2d4:	beq	1a2e4 <__assert_fail@plt+0x8dfc>
   1a2d8:	mov	r0, r5
   1a2dc:	bl	113ec <fcntl64@plt>
   1a2e0:	b	1a388 <__assert_fail@plt+0x8ea0>
   1a2e4:	cmp	r0, #6
   1a2e8:	bne	1a370 <__assert_fail@plt+0x8e88>
   1a2ec:	ldr	r0, [sp, #4]
   1a2f0:	movw	r7, #49908	; 0xc2f4
   1a2f4:	movt	r7, #2
   1a2f8:	add	r1, r0, #4
   1a2fc:	str	r1, [sp, #4]
   1a300:	ldr	r6, [r0]
   1a304:	ldr	r0, [r7]
   1a308:	cmp	r0, #0
   1a30c:	bmi	1a3ac <__assert_fail@plt+0x8ec4>
   1a310:	mov	r0, r5
   1a314:	movw	r1, #1030	; 0x406
   1a318:	mov	r2, r6
   1a31c:	bl	113ec <fcntl64@plt>
   1a320:	mov	r4, r0
   1a324:	cmn	r0, #1
   1a328:	bgt	1a3a0 <__assert_fail@plt+0x8eb8>
   1a32c:	bl	1138c <__errno_location@plt>
   1a330:	ldr	r0, [r0]
   1a334:	cmp	r0, #22
   1a338:	bne	1a3a0 <__assert_fail@plt+0x8eb8>
   1a33c:	mov	r0, r5
   1a340:	mov	r1, #0
   1a344:	mov	r2, r6
   1a348:	bl	113ec <fcntl64@plt>
   1a34c:	mov	r4, r0
   1a350:	cmp	r0, #0
   1a354:	bmi	1a38c <__assert_fail@plt+0x8ea4>
   1a358:	mvn	r0, #0
   1a35c:	str	r0, [r7]
   1a360:	mov	r0, #1
   1a364:	cmp	r0, #0
   1a368:	bne	1a3d8 <__assert_fail@plt+0x8ef0>
   1a36c:	b	1a38c <__assert_fail@plt+0x8ea4>
   1a370:	ldr	r0, [sp, #4]
   1a374:	add	r2, r0, #4
   1a378:	str	r2, [sp, #4]
   1a37c:	ldr	r2, [r0]
   1a380:	mov	r0, r5
   1a384:	bl	113ec <fcntl64@plt>
   1a388:	mov	r4, r0
   1a38c:	mov	r0, r4
   1a390:	sub	sp, fp, #16
   1a394:	pop	{r4, r5, r6, r7, fp, lr}
   1a398:	add	sp, sp, #8
   1a39c:	bx	lr
   1a3a0:	mov	r0, #1
   1a3a4:	str	r0, [r7]
   1a3a8:	b	1a38c <__assert_fail@plt+0x8ea4>
   1a3ac:	mov	r0, r5
   1a3b0:	mov	r1, #0
   1a3b4:	mov	r2, r6
   1a3b8:	bl	113ec <fcntl64@plt>
   1a3bc:	mov	r4, r0
   1a3c0:	ldr	r0, [r7]
   1a3c4:	add	r0, r0, #1
   1a3c8:	clz	r0, r0
   1a3cc:	lsr	r0, r0, #5
   1a3d0:	cmp	r0, #0
   1a3d4:	beq	1a38c <__assert_fail@plt+0x8ea4>
   1a3d8:	cmp	r4, #0
   1a3dc:	bmi	1a38c <__assert_fail@plt+0x8ea4>
   1a3e0:	mov	r0, r4
   1a3e4:	mov	r1, #1
   1a3e8:	bl	113ec <fcntl64@plt>
   1a3ec:	cmp	r0, #0
   1a3f0:	bmi	1a40c <__assert_fail@plt+0x8f24>
   1a3f4:	orr	r2, r0, #1
   1a3f8:	mov	r0, r4
   1a3fc:	mov	r1, #2
   1a400:	bl	113ec <fcntl64@plt>
   1a404:	cmn	r0, #1
   1a408:	bne	1a38c <__assert_fail@plt+0x8ea4>
   1a40c:	bl	1138c <__errno_location@plt>
   1a410:	ldr	r6, [r0]
   1a414:	mov	r5, r0
   1a418:	mov	r0, r4
   1a41c:	bl	114ac <close@plt>
   1a420:	str	r6, [r5]
   1a424:	mvn	r4, #0
   1a428:	b	1a38c <__assert_fail@plt+0x8ea4>
   1a42c:	sub	sp, sp, #8
   1a430:	push	{fp, lr}
   1a434:	mov	fp, sp
   1a438:	sub	sp, sp, #8
   1a43c:	str	r2, [fp, #8]
   1a440:	str	r3, [fp, #12]
   1a444:	tst	r1, #64	; 0x40
   1a448:	mov	r2, #0
   1a44c:	ldrne	r2, [fp, #8]
   1a450:	bl	11308 <open64@plt>
   1a454:	bl	19190 <__assert_fail@plt+0x7ca8>
   1a458:	mov	sp, fp
   1a45c:	pop	{fp, lr}
   1a460:	add	sp, sp, #8
   1a464:	bx	lr
   1a468:	push	{fp, lr}
   1a46c:	mov	fp, sp
   1a470:	mov	r0, #14
   1a474:	bl	11428 <nl_langinfo@plt>
   1a478:	movw	r1, #45744	; 0xb2b0
   1a47c:	cmp	r0, #0
   1a480:	movt	r1, #1
   1a484:	movne	r1, r0
   1a488:	movw	r0, #48793	; 0xbe99
   1a48c:	ldrb	r2, [r1]
   1a490:	movt	r0, #1
   1a494:	cmp	r2, #0
   1a498:	movne	r0, r1
   1a49c:	pop	{fp, pc}
   1a4a0:	push	{r4, r5, r6, r7, fp, lr}
   1a4a4:	add	fp, sp, #16
   1a4a8:	sub	sp, sp, #8
   1a4ac:	cmp	r0, #0
   1a4b0:	add	r5, sp, #4
   1a4b4:	mov	r7, r2
   1a4b8:	mov	r4, r1
   1a4bc:	movne	r5, r0
   1a4c0:	mov	r0, r5
   1a4c4:	bl	112f0 <mbrtowc@plt>
   1a4c8:	mov	r6, r0
   1a4cc:	cmp	r7, #0
   1a4d0:	beq	1a4f8 <__assert_fail@plt+0x9010>
   1a4d4:	cmn	r6, #2
   1a4d8:	bcc	1a4f8 <__assert_fail@plt+0x9010>
   1a4dc:	mov	r0, #0
   1a4e0:	bl	1a54c <__assert_fail@plt+0x9064>
   1a4e4:	cmp	r0, #0
   1a4e8:	bne	1a4f8 <__assert_fail@plt+0x9010>
   1a4ec:	ldrb	r0, [r4]
   1a4f0:	mov	r6, #1
   1a4f4:	str	r0, [r5]
   1a4f8:	mov	r0, r6
   1a4fc:	sub	sp, fp, #16
   1a500:	pop	{r4, r5, r6, r7, fp, pc}
   1a504:	cmp	r2, #0
   1a508:	beq	1a538 <__assert_fail@plt+0x9050>
   1a50c:	mvn	r3, #0
   1a510:	udiv	r3, r3, r2
   1a514:	cmp	r3, r1
   1a518:	bcs	1a538 <__assert_fail@plt+0x9050>
   1a51c:	push	{fp, lr}
   1a520:	mov	fp, sp
   1a524:	bl	1138c <__errno_location@plt>
   1a528:	mov	r1, #12
   1a52c:	str	r1, [r0]
   1a530:	mov	r0, #0
   1a534:	pop	{fp, pc}
   1a538:	mul	r1, r2, r1
   1a53c:	b	19fe8 <__assert_fail@plt+0x8b00>
   1a540:	mov	r1, #0
   1a544:	mov	r2, #3
   1a548:	b	1a24c <__assert_fail@plt+0x8d64>
   1a54c:	push	{r4, sl, fp, lr}
   1a550:	add	fp, sp, #8
   1a554:	sub	sp, sp, #264	; 0x108
   1a558:	add	r1, sp, #7
   1a55c:	movw	r2, #257	; 0x101
   1a560:	bl	1a5b8 <__assert_fail@plt+0x90d0>
   1a564:	mov	r4, #0
   1a568:	cmp	r0, #0
   1a56c:	bne	1a5ac <__assert_fail@plt+0x90c4>
   1a570:	movw	r1, #48799	; 0xbe9f
   1a574:	add	r0, sp, #7
   1a578:	mov	r2, #2
   1a57c:	movt	r1, #1
   1a580:	bl	11368 <bcmp@plt>
   1a584:	cmp	r0, #0
   1a588:	beq	1a5ac <__assert_fail@plt+0x90c4>
   1a58c:	movw	r1, #48801	; 0xbea1
   1a590:	add	r0, sp, #7
   1a594:	mov	r2, #6
   1a598:	movt	r1, #1
   1a59c:	bl	11368 <bcmp@plt>
   1a5a0:	cmp	r0, #0
   1a5a4:	mov	r4, r0
   1a5a8:	movwne	r4, #1
   1a5ac:	mov	r0, r4
   1a5b0:	sub	sp, fp, #8
   1a5b4:	pop	{r4, sl, fp, pc}
   1a5b8:	push	{r4, r5, r6, r7, fp, lr}
   1a5bc:	add	fp, sp, #16
   1a5c0:	mov	r4, r1
   1a5c4:	mov	r1, #0
   1a5c8:	mov	r6, r2
   1a5cc:	bl	11410 <setlocale@plt>
   1a5d0:	cmp	r0, #0
   1a5d4:	beq	1a604 <__assert_fail@plt+0x911c>
   1a5d8:	mov	r7, r0
   1a5dc:	bl	11374 <strlen@plt>
   1a5e0:	cmp	r0, r6
   1a5e4:	bcs	1a620 <__assert_fail@plt+0x9138>
   1a5e8:	add	r2, r0, #1
   1a5ec:	mov	r0, r4
   1a5f0:	mov	r1, r7
   1a5f4:	bl	11254 <memcpy@plt>
   1a5f8:	mov	r5, #0
   1a5fc:	mov	r0, r5
   1a600:	pop	{r4, r5, r6, r7, fp, pc}
   1a604:	mov	r5, #22
   1a608:	cmp	r6, #0
   1a60c:	beq	1a648 <__assert_fail@plt+0x9160>
   1a610:	mov	r0, #0
   1a614:	strb	r0, [r4]
   1a618:	mov	r0, r5
   1a61c:	pop	{r4, r5, r6, r7, fp, pc}
   1a620:	mov	r5, #34	; 0x22
   1a624:	cmp	r6, #0
   1a628:	beq	1a648 <__assert_fail@plt+0x9160>
   1a62c:	sub	r6, r6, #1
   1a630:	mov	r0, r4
   1a634:	mov	r1, r7
   1a638:	mov	r2, r6
   1a63c:	bl	11254 <memcpy@plt>
   1a640:	mov	r0, #0
   1a644:	strb	r0, [r4, r6]
   1a648:	mov	r0, r5
   1a64c:	pop	{r4, r5, r6, r7, fp, pc}
   1a650:	mov	r1, #0
   1a654:	b	11410 <setlocale@plt>
   1a658:	cmp	r3, #0
   1a65c:	cmpeq	r2, #0
   1a660:	bne	1a678 <__assert_fail@plt+0x9190>
   1a664:	cmp	r1, #0
   1a668:	cmpeq	r0, #0
   1a66c:	mvnne	r1, #0
   1a670:	mvnne	r0, #0
   1a674:	b	1a694 <__assert_fail@plt+0x91ac>
   1a678:	sub	sp, sp, #8
   1a67c:	push	{sp, lr}
   1a680:	bl	1a6a4 <__assert_fail@plt+0x91bc>
   1a684:	ldr	lr, [sp, #4]
   1a688:	add	sp, sp, #8
   1a68c:	pop	{r2, r3}
   1a690:	bx	lr
   1a694:	push	{r1, lr}
   1a698:	mov	r0, #8
   1a69c:	bl	111e8 <raise@plt>
   1a6a0:	pop	{r1, pc}
   1a6a4:	cmp	r1, r3
   1a6a8:	cmpeq	r0, r2
   1a6ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6b0:	mov	r4, r0
   1a6b4:	movcc	r0, #0
   1a6b8:	mov	r5, r1
   1a6bc:	ldr	lr, [sp, #36]	; 0x24
   1a6c0:	movcc	r1, r0
   1a6c4:	bcc	1a7c0 <__assert_fail@plt+0x92d8>
   1a6c8:	cmp	r3, #0
   1a6cc:	clzeq	ip, r2
   1a6d0:	clzne	ip, r3
   1a6d4:	addeq	ip, ip, #32
   1a6d8:	cmp	r5, #0
   1a6dc:	clzeq	r1, r4
   1a6e0:	addeq	r1, r1, #32
   1a6e4:	clzne	r1, r5
   1a6e8:	sub	ip, ip, r1
   1a6ec:	sub	sl, ip, #32
   1a6f0:	lsl	r9, r3, ip
   1a6f4:	rsb	fp, ip, #32
   1a6f8:	orr	r9, r9, r2, lsl sl
   1a6fc:	orr	r9, r9, r2, lsr fp
   1a700:	lsl	r8, r2, ip
   1a704:	cmp	r5, r9
   1a708:	cmpeq	r4, r8
   1a70c:	movcc	r0, #0
   1a710:	movcc	r1, r0
   1a714:	bcc	1a730 <__assert_fail@plt+0x9248>
   1a718:	mov	r0, #1
   1a71c:	subs	r4, r4, r8
   1a720:	lsl	r1, r0, sl
   1a724:	orr	r1, r1, r0, lsr fp
   1a728:	lsl	r0, r0, ip
   1a72c:	sbc	r5, r5, r9
   1a730:	cmp	ip, #0
   1a734:	beq	1a7c0 <__assert_fail@plt+0x92d8>
   1a738:	lsr	r6, r8, #1
   1a73c:	orr	r6, r6, r9, lsl #31
   1a740:	lsr	r7, r9, #1
   1a744:	mov	r2, ip
   1a748:	b	1a76c <__assert_fail@plt+0x9284>
   1a74c:	subs	r3, r4, r6
   1a750:	sbc	r8, r5, r7
   1a754:	adds	r3, r3, r3
   1a758:	adc	r8, r8, r8
   1a75c:	adds	r4, r3, #1
   1a760:	adc	r5, r8, #0
   1a764:	subs	r2, r2, #1
   1a768:	beq	1a788 <__assert_fail@plt+0x92a0>
   1a76c:	cmp	r5, r7
   1a770:	cmpeq	r4, r6
   1a774:	bcs	1a74c <__assert_fail@plt+0x9264>
   1a778:	adds	r4, r4, r4
   1a77c:	adc	r5, r5, r5
   1a780:	subs	r2, r2, #1
   1a784:	bne	1a76c <__assert_fail@plt+0x9284>
   1a788:	lsr	r3, r4, ip
   1a78c:	orr	r3, r3, r5, lsl fp
   1a790:	lsr	r2, r5, ip
   1a794:	orr	r3, r3, r5, lsr sl
   1a798:	adds	r0, r0, r4
   1a79c:	mov	r4, r3
   1a7a0:	lsl	r3, r2, ip
   1a7a4:	orr	r3, r3, r4, lsl sl
   1a7a8:	lsl	ip, r4, ip
   1a7ac:	orr	r3, r3, r4, lsr fp
   1a7b0:	adc	r1, r1, r5
   1a7b4:	subs	r0, r0, ip
   1a7b8:	mov	r5, r2
   1a7bc:	sbc	r1, r1, r3
   1a7c0:	cmp	lr, #0
   1a7c4:	strdne	r4, [lr]
   1a7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a7d0:	mov	r7, r0
   1a7d4:	ldr	r6, [pc, #72]	; 1a824 <__assert_fail@plt+0x933c>
   1a7d8:	ldr	r5, [pc, #72]	; 1a828 <__assert_fail@plt+0x9340>
   1a7dc:	add	r6, pc, r6
   1a7e0:	add	r5, pc, r5
   1a7e4:	sub	r6, r6, r5
   1a7e8:	mov	r8, r1
   1a7ec:	mov	r9, r2
   1a7f0:	bl	111a4 <fstatfs64@plt-0x20>
   1a7f4:	asrs	r6, r6, #2
   1a7f8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7fc:	mov	r4, #0
   1a800:	add	r4, r4, #1
   1a804:	ldr	r3, [r5], #4
   1a808:	mov	r2, r9
   1a80c:	mov	r1, r8
   1a810:	mov	r0, r7
   1a814:	blx	r3
   1a818:	cmp	r6, r4
   1a81c:	bne	1a800 <__assert_fail@plt+0x9318>
   1a820:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a824:	andeq	r1, r1, r8, lsr #14
   1a828:	andeq	r1, r1, r0, lsr #14
   1a82c:	bx	lr
   1a830:	ldr	r3, [pc, #12]	; 1a844 <__assert_fail@plt+0x935c>
   1a834:	mov	r1, #0
   1a838:	add	r3, pc, r3
   1a83c:	ldr	r2, [r3]
   1a840:	b	11398 <__cxa_atexit@plt>
   1a844:	andeq	r1, r1, r4, ror #17

Disassembly of section .fini:

0001a848 <.fini>:
   1a848:	push	{r3, lr}
   1a84c:	pop	{r3, pc}
