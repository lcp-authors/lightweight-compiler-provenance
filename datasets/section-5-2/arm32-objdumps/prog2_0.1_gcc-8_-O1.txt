
../repos/prog2/0.1:     file format elf32-littlearm


Disassembly of section .init:

00010554 <.init>:
   10554:	push	{r3, lr}
   10558:	bl	105ec <_start@@Base+0x3c>
   1055c:	pop	{r3, pc}

Disassembly of section .plt:

00010560 <printf@plt-0x14>:
   10560:	push	{lr}		; (str lr, [sp, #-4]!)
   10564:	ldr	lr, [pc, #4]	; 10570 <printf@plt-0x4>
   10568:	add	lr, pc, lr
   1056c:	ldr	pc, [lr, #8]!
   10570:	muleq	r1, r0, sl

00010574 <printf@plt>:
   10574:	add	ip, pc, #0, 12
   10578:	add	ip, ip, #16, 20	; 0x10000
   1057c:	ldr	pc, [ip, #2704]!	; 0xa90

00010580 <__libc_start_main@plt>:
   10580:	add	ip, pc, #0, 12
   10584:	add	ip, ip, #16, 20	; 0x10000
   10588:	ldr	pc, [ip, #2696]!	; 0xa88

0001058c <__gmon_start__@plt>:
   1058c:	add	ip, pc, #0, 12
   10590:	add	ip, ip, #16, 20	; 0x10000
   10594:	ldr	pc, [ip, #2688]!	; 0xa80

00010598 <__isoc99_scanf@plt>:
   10598:	add	ip, pc, #0, 12
   1059c:	add	ip, ip, #16, 20	; 0x10000
   105a0:	ldr	pc, [ip, #2680]!	; 0xa78

000105a4 <abort@plt>:
   105a4:	add	ip, pc, #0, 12
   105a8:	add	ip, ip, #16, 20	; 0x10000
   105ac:	ldr	pc, [ip, #2672]!	; 0xa70

Disassembly of section .text:

000105b0 <_start@@Base>:
   105b0:	mov	fp, #0
   105b4:	mov	lr, #0
   105b8:	pop	{r1}		; (ldr r1, [sp], #4)
   105bc:	mov	r2, sp
   105c0:	push	{r2}		; (str r2, [sp, #-4]!)
   105c4:	push	{r0}		; (str r0, [sp, #-4]!)
   105c8:	ldr	ip, [pc, #16]	; 105e0 <_start@@Base+0x30>
   105cc:	push	{ip}		; (str ip, [sp, #-4]!)
   105d0:	ldr	r0, [pc, #12]	; 105e4 <_start@@Base+0x34>
   105d4:	ldr	r3, [pc, #12]	; 105e8 <_start@@Base+0x38>
   105d8:	bl	10580 <__libc_start_main@plt>
   105dc:	bl	105a4 <abort@plt>
   105e0:	andeq	r0, r1, r4, ror #15
   105e4:	andeq	r0, r1, r0, lsr #13
   105e8:	andeq	r0, r1, r4, lsl #15
   105ec:	ldr	r3, [pc, #20]	; 10608 <_start@@Base+0x58>
   105f0:	ldr	r2, [pc, #20]	; 1060c <_start@@Base+0x5c>
   105f4:	add	r3, pc, r3
   105f8:	ldr	r2, [r3, r2]
   105fc:	cmp	r2, #0
   10600:	bxeq	lr
   10604:	b	1058c <__gmon_start__@plt>
   10608:	andeq	r0, r1, r4, lsl #20
   1060c:	andeq	r0, r0, r0, lsr #32
   10610:	ldr	r0, [pc, #24]	; 10630 <_start@@Base+0x80>
   10614:	ldr	r3, [pc, #24]	; 10634 <_start@@Base+0x84>
   10618:	cmp	r3, r0
   1061c:	bxeq	lr
   10620:	ldr	r3, [pc, #16]	; 10638 <_start@@Base+0x88>
   10624:	cmp	r3, #0
   10628:	bxeq	lr
   1062c:	bx	r3
   10630:	andeq	r1, r2, ip, lsr #32
   10634:	andeq	r1, r2, ip, lsr #32
   10638:	andeq	r0, r0, r0
   1063c:	ldr	r0, [pc, #36]	; 10668 <_start@@Base+0xb8>
   10640:	ldr	r1, [pc, #36]	; 1066c <_start@@Base+0xbc>
   10644:	sub	r1, r1, r0
   10648:	asr	r1, r1, #2
   1064c:	add	r1, r1, r1, lsr #31
   10650:	asrs	r1, r1, #1
   10654:	bxeq	lr
   10658:	ldr	r3, [pc, #16]	; 10670 <_start@@Base+0xc0>
   1065c:	cmp	r3, #0
   10660:	bxeq	lr
   10664:	bx	r3
   10668:	andeq	r1, r2, ip, lsr #32
   1066c:	andeq	r1, r2, ip, lsr #32
   10670:	andeq	r0, r0, r0
   10674:	push	{r4, lr}
   10678:	ldr	r4, [pc, #24]	; 10698 <_start@@Base+0xe8>
   1067c:	ldrb	r3, [r4]
   10680:	cmp	r3, #0
   10684:	popne	{r4, pc}
   10688:	bl	10610 <_start@@Base+0x60>
   1068c:	mov	r3, #1
   10690:	strb	r3, [r4]
   10694:	pop	{r4, pc}
   10698:	andeq	r1, r2, ip, lsr #32
   1069c:	b	1063c <_start@@Base+0x8c>

000106a0 <main@@Base>:
   106a0:	str	r4, [sp, #-8]!
   106a4:	str	lr, [sp, #4]
   106a8:	sub	sp, sp, #24
   106ac:	movw	r0, #2036	; 0x7f4
   106b0:	movt	r0, #1
   106b4:	bl	10574 <printf@plt>
   106b8:	movw	r4, #2056	; 0x808
   106bc:	movt	r4, #1
   106c0:	add	r1, sp, #8
   106c4:	mov	r0, r4
   106c8:	bl	10598 <__isoc99_scanf@plt>
   106cc:	movw	r0, #2060	; 0x80c
   106d0:	movt	r0, #1
   106d4:	bl	10574 <printf@plt>
   106d8:	add	r1, sp, #20
   106dc:	mov	r0, r4
   106e0:	bl	10598 <__isoc99_scanf@plt>
   106e4:	add	r1, sp, #16
   106e8:	mov	r0, r4
   106ec:	bl	10598 <__isoc99_scanf@plt>
   106f0:	movw	r0, #2080	; 0x820
   106f4:	movt	r0, #1
   106f8:	bl	10574 <printf@plt>
   106fc:	add	r1, sp, #12
   10700:	mov	r0, r4
   10704:	bl	10598 <__isoc99_scanf@plt>
   10708:	mov	r3, #0
   1070c:	str	r3, [sp, #20]
   10710:	vldr	s15, [sp, #16]
   10714:	vcmpe.f32	s15, #0.0
   10718:	vmrs	APSR_nzcv, fpscr
   1071c:	blt	10770 <main@@Base+0xd0>
   10720:	vmov	s15, r3
   10724:	movw	r4, #2100	; 0x834
   10728:	movt	r4, #1
   1072c:	vldr	s12, [sp, #8]
   10730:	vmul.f32	s12, s15, s12
   10734:	vmul.f32	s12, s12, s15
   10738:	vcvt.f64.f32	d6, s12
   1073c:	vstr	d6, [sp]
   10740:	vcvt.f64.f32	d7, s15
   10744:	vmov	r2, r3, d7
   10748:	mov	r0, r4
   1074c:	bl	10574 <printf@plt>
   10750:	vldr	s15, [sp, #20]
   10754:	vldr	s14, [sp, #12]
   10758:	vadd.f32	s15, s15, s14
   1075c:	vstr	s15, [sp, #20]
   10760:	vldr	s14, [sp, #16]
   10764:	vcmpe.f32	s15, s14
   10768:	vmrs	APSR_nzcv, fpscr
   1076c:	bls	1072c <main@@Base+0x8c>
   10770:	mov	r0, #0
   10774:	add	sp, sp, #24
   10778:	ldr	r4, [sp]
   1077c:	add	sp, sp, #4
   10780:	pop	{pc}		; (ldr pc, [sp], #4)

00010784 <__libc_csu_init@@Base>:
   10784:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10788:	mov	r7, r0
   1078c:	ldr	r6, [pc, #72]	; 107dc <__libc_csu_init@@Base+0x58>
   10790:	ldr	r5, [pc, #72]	; 107e0 <__libc_csu_init@@Base+0x5c>
   10794:	add	r6, pc, r6
   10798:	add	r5, pc, r5
   1079c:	sub	r6, r6, r5
   107a0:	mov	r8, r1
   107a4:	mov	r9, r2
   107a8:	bl	10554 <printf@plt-0x20>
   107ac:	asrs	r6, r6, #2
   107b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   107b4:	mov	r4, #0
   107b8:	add	r4, r4, #1
   107bc:	ldr	r3, [r5], #4
   107c0:	mov	r2, r9
   107c4:	mov	r1, r8
   107c8:	mov	r0, r7
   107cc:	blx	r3
   107d0:	cmp	r6, r4
   107d4:	bne	107b8 <__libc_csu_init@@Base+0x34>
   107d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   107dc:	andeq	r0, r1, r8, ror r7
   107e0:	andeq	r0, r1, r0, ror r7

000107e4 <__libc_csu_fini@@Base>:
   107e4:	bx	lr

Disassembly of section .fini:

000107e8 <.fini>:
   107e8:	push	{r3, lr}
   107ec:	pop	{r3, pc}
