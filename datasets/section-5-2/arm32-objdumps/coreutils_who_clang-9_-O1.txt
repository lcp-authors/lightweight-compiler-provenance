
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

000110ac <.init>:
   110ac:	push	{r3, lr}
   110b0:	bl	11408 <__assert_fail@plt+0x48>
   110b4:	pop	{r3, pc}

Disassembly of section .plt:

000110b8 <calloc@plt-0x14>:
   110b8:	push	{lr}		; (str lr, [sp, #-4]!)
   110bc:	ldr	lr, [pc, #4]	; 110c8 <calloc@plt-0x4>
   110c0:	add	lr, pc, lr
   110c4:	ldr	pc, [lr, #8]!
   110c8:	andeq	r6, r1, r8, lsr pc

000110cc <calloc@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #3896]!	; 0xf38

000110d8 <fputs_unlocked@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #3888]!	; 0xf30

000110e4 <raise@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #3880]!	; 0xf28

000110f0 <strcmp@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #3872]!	; 0xf20

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #3864]!	; 0xf18

00011108 <utmpxname@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #3856]!	; 0xf10

00011114 <free@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #3848]!	; 0xf08

00011120 <gai_strerror@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #3840]!	; 0xf00

0001112c <_exit@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3832]!	; 0xef8

00011138 <memcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3824]!	; 0xef0

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #3816]!	; 0xee8

00011150 <time@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3808]!	; 0xee0

0001115c <stpcpy@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3800]!	; 0xed8

00011168 <dcgettext@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3792]!	; 0xed0

00011174 <strdup@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3784]!	; 0xec8

00011180 <setutxent@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3776]!	; 0xec0

0001118c <realloc@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3768]!	; 0xeb8

00011198 <textdomain@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #90112	; 0x16000
   111a0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111a4 <iswprint@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #90112	; 0x16000
   111ac:	ldr	pc, [ip, #3752]!	; 0xea8

000111b0 <fwrite@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #90112	; 0x16000
   111b8:	ldr	pc, [ip, #3744]!	; 0xea0

000111bc <lseek64@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #90112	; 0x16000
   111c4:	ldr	pc, [ip, #3736]!	; 0xe98

000111c8 <__ctype_get_mb_cur_max@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #90112	; 0x16000
   111d0:	ldr	pc, [ip, #3728]!	; 0xe90

000111d4 <__fpending@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #90112	; 0x16000
   111dc:	ldr	pc, [ip, #3720]!	; 0xe88

000111e0 <ferror_unlocked@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #90112	; 0x16000
   111e8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ec <mbrtowc@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #90112	; 0x16000
   111f4:	ldr	pc, [ip, #3704]!	; 0xe78

000111f8 <error@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #90112	; 0x16000
   11200:	ldr	pc, [ip, #3696]!	; 0xe70

00011204 <__asprintf_chk@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3688]!	; 0xe68

00011210 <puts@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3680]!	; 0xe60

0001121c <malloc@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3672]!	; 0xe58

00011228 <__libc_start_main@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3664]!	; 0xe50

00011234 <strftime@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3656]!	; 0xe48

00011240 <__freading@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3648]!	; 0xe40

0001124c <localtime@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3640]!	; 0xe38

00011258 <__gmon_start__@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #90112	; 0x16000
   11260:	ldr	pc, [ip, #3632]!	; 0xe30

00011264 <getopt_long@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #90112	; 0x16000
   1126c:	ldr	pc, [ip, #3624]!	; 0xe28

00011270 <kill@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #90112	; 0x16000
   11278:	ldr	pc, [ip, #3616]!	; 0xe20

0001127c <__ctype_b_loc@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #90112	; 0x16000
   11284:	ldr	pc, [ip, #3608]!	; 0xe18

00011288 <exit@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #90112	; 0x16000
   11290:	ldr	pc, [ip, #3600]!	; 0xe10

00011294 <bcmp@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #90112	; 0x16000
   1129c:	ldr	pc, [ip, #3592]!	; 0xe08

000112a0 <ttyname@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #90112	; 0x16000
   112a8:	ldr	pc, [ip, #3584]!	; 0xe00

000112ac <strlen@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #90112	; 0x16000
   112b4:	ldr	pc, [ip, #3576]!	; 0xdf8

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #90112	; 0x16000
   112c0:	ldr	pc, [ip, #3568]!	; 0xdf0

000112c4 <__errno_location@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #90112	; 0x16000
   112cc:	ldr	pc, [ip, #3560]!	; 0xde8

000112d0 <__sprintf_chk@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #90112	; 0x16000
   112d8:	ldr	pc, [ip, #3552]!	; 0xde0

000112dc <__cxa_atexit@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #90112	; 0x16000
   112e4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112e8 <memset@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #90112	; 0x16000
   112f0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112f4 <strncpy@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #90112	; 0x16000
   112fc:	ldr	pc, [ip, #3528]!	; 0xdc8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #90112	; 0x16000
   11308:	ldr	pc, [ip, #3520]!	; 0xdc0

0001130c <fileno@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #90112	; 0x16000
   11314:	ldr	pc, [ip, #3512]!	; 0xdb8

00011318 <__fprintf_chk@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #90112	; 0x16000
   11320:	ldr	pc, [ip, #3504]!	; 0xdb0

00011324 <fclose@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #90112	; 0x16000
   1132c:	ldr	pc, [ip, #3496]!	; 0xda8

00011330 <fseeko64@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #90112	; 0x16000
   11338:	ldr	pc, [ip, #3488]!	; 0xda0

0001133c <endutxent@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #90112	; 0x16000
   11344:	ldr	pc, [ip, #3480]!	; 0xd98

00011348 <setlocale@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #90112	; 0x16000
   11350:	ldr	pc, [ip, #3472]!	; 0xd90

00011354 <strrchr@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #90112	; 0x16000
   1135c:	ldr	pc, [ip, #3464]!	; 0xd88

00011360 <nl_langinfo@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #90112	; 0x16000
   11368:	ldr	pc, [ip, #3456]!	; 0xd80

0001136c <freeaddrinfo@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #90112	; 0x16000
   11374:	ldr	pc, [ip, #3448]!	; 0xd78

00011378 <getaddrinfo@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #90112	; 0x16000
   11380:	ldr	pc, [ip, #3440]!	; 0xd70

00011384 <bindtextdomain@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #90112	; 0x16000
   1138c:	ldr	pc, [ip, #3432]!	; 0xd68

00011390 <__xstat64@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #90112	; 0x16000
   11398:	ldr	pc, [ip, #3424]!	; 0xd60

0001139c <strncmp@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #90112	; 0x16000
   113a4:	ldr	pc, [ip, #3416]!	; 0xd58

000113a8 <abort@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #90112	; 0x16000
   113b0:	ldr	pc, [ip, #3408]!	; 0xd50

000113b4 <getutxent@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #90112	; 0x16000
   113bc:	ldr	pc, [ip, #3400]!	; 0xd48

000113c0 <__assert_fail@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #90112	; 0x16000
   113c8:	ldr	pc, [ip, #3392]!	; 0xd40

Disassembly of section .text:

000113cc <.text>:
   113cc:	mov	fp, #0
   113d0:	mov	lr, #0
   113d4:	pop	{r1}		; (ldr r1, [sp], #4)
   113d8:	mov	r2, sp
   113dc:	push	{r2}		; (str r2, [sp, #-4]!)
   113e0:	push	{r0}		; (str r0, [sp, #-4]!)
   113e4:	ldr	ip, [pc, #16]	; 113fc <__assert_fail@plt+0x3c>
   113e8:	push	{ip}		; (str ip, [sp, #-4]!)
   113ec:	ldr	r0, [pc, #12]	; 11400 <__assert_fail@plt+0x40>
   113f0:	ldr	r3, [pc, #12]	; 11404 <__assert_fail@plt+0x44>
   113f4:	bl	11228 <__libc_start_main@plt>
   113f8:	bl	113a8 <abort@plt>
   113fc:	andeq	r6, r1, ip, asr r1
   11400:	andeq	r1, r1, ip, ror #15
   11404:	strdeq	r6, [r1], -ip
   11408:	ldr	r3, [pc, #20]	; 11424 <__assert_fail@plt+0x64>
   1140c:	ldr	r2, [pc, #20]	; 11428 <__assert_fail@plt+0x68>
   11410:	add	r3, pc, r3
   11414:	ldr	r2, [r3, r2]
   11418:	cmp	r2, #0
   1141c:	bxeq	lr
   11420:	b	11258 <__gmon_start__@plt>
   11424:	andeq	r6, r1, r8, ror #23
   11428:	andeq	r0, r0, ip, lsl #2
   1142c:	ldr	r0, [pc, #24]	; 1144c <__assert_fail@plt+0x8c>
   11430:	ldr	r3, [pc, #24]	; 11450 <__assert_fail@plt+0x90>
   11434:	cmp	r3, r0
   11438:	bxeq	lr
   1143c:	ldr	r3, [pc, #16]	; 11454 <__assert_fail@plt+0x94>
   11440:	cmp	r3, #0
   11444:	bxeq	lr
   11448:	bx	r3
   1144c:	andeq	r8, r2, r8, ror #2
   11450:	andeq	r8, r2, r8, ror #2
   11454:	andeq	r0, r0, r0
   11458:	ldr	r0, [pc, #36]	; 11484 <__assert_fail@plt+0xc4>
   1145c:	ldr	r1, [pc, #36]	; 11488 <__assert_fail@plt+0xc8>
   11460:	sub	r1, r1, r0
   11464:	asr	r1, r1, #2
   11468:	add	r1, r1, r1, lsr #31
   1146c:	asrs	r1, r1, #1
   11470:	bxeq	lr
   11474:	ldr	r3, [pc, #16]	; 1148c <__assert_fail@plt+0xcc>
   11478:	cmp	r3, #0
   1147c:	bxeq	lr
   11480:	bx	r3
   11484:	andeq	r8, r2, r8, ror #2
   11488:	andeq	r8, r2, r8, ror #2
   1148c:	andeq	r0, r0, r0
   11490:	push	{r4, lr}
   11494:	ldr	r4, [pc, #24]	; 114b4 <__assert_fail@plt+0xf4>
   11498:	ldrb	r3, [r4]
   1149c:	cmp	r3, #0
   114a0:	popne	{r4, pc}
   114a4:	bl	1142c <__assert_fail@plt+0x6c>
   114a8:	mov	r3, #1
   114ac:	strb	r3, [r4]
   114b0:	pop	{r4, pc}
   114b4:	andeq	r8, r2, r0, lsl #3
   114b8:	b	11458 <__assert_fail@plt+0x98>
   114bc:	push	{fp, lr}
   114c0:	mov	fp, sp
   114c4:	mov	r4, r0
   114c8:	cmp	r0, #0
   114cc:	bne	11620 <__assert_fail@plt+0x260>
   114d0:	movw	r1, #25019	; 0x61bb
   114d4:	movt	r1, #1
   114d8:	mov	r0, #0
   114dc:	mov	r2, #5
   114e0:	bl	11168 <dcgettext@plt>
   114e4:	mov	r1, r0
   114e8:	movw	r0, #33284	; 0x8204
   114ec:	movt	r0, #2
   114f0:	ldr	r2, [r0]
   114f4:	mov	r0, #1
   114f8:	bl	11300 <__printf_chk@plt>
   114fc:	movw	r1, #25063	; 0x61e7
   11500:	movt	r1, #1
   11504:	mov	r0, #0
   11508:	mov	r2, #5
   1150c:	bl	11168 <dcgettext@plt>
   11510:	movw	r5, #33148	; 0x817c
   11514:	movt	r5, #2
   11518:	ldr	r1, [r5]
   1151c:	bl	110d8 <fputs_unlocked@plt>
   11520:	movw	r1, #25123	; 0x6223
   11524:	movt	r1, #1
   11528:	mov	r0, #0
   1152c:	mov	r2, #5
   11530:	bl	11168 <dcgettext@plt>
   11534:	ldr	r1, [r5]
   11538:	bl	110d8 <fputs_unlocked@plt>
   1153c:	movw	r1, #25318	; 0x62e6
   11540:	movt	r1, #1
   11544:	mov	r0, #0
   11548:	mov	r2, #5
   1154c:	bl	11168 <dcgettext@plt>
   11550:	ldr	r1, [r5]
   11554:	bl	110d8 <fputs_unlocked@plt>
   11558:	movw	r1, #25368	; 0x6318
   1155c:	movt	r1, #1
   11560:	mov	r0, #0
   11564:	mov	r2, #5
   11568:	bl	11168 <dcgettext@plt>
   1156c:	ldr	r1, [r5]
   11570:	bl	110d8 <fputs_unlocked@plt>
   11574:	movw	r1, #25555	; 0x63d3
   11578:	movt	r1, #1
   1157c:	mov	r0, #0
   11580:	mov	r2, #5
   11584:	bl	11168 <dcgettext@plt>
   11588:	ldr	r1, [r5]
   1158c:	bl	110d8 <fputs_unlocked@plt>
   11590:	movw	r1, #25778	; 0x64b2
   11594:	movt	r1, #1
   11598:	mov	r0, #0
   1159c:	mov	r2, #5
   115a0:	bl	11168 <dcgettext@plt>
   115a4:	ldr	r1, [r5]
   115a8:	bl	110d8 <fputs_unlocked@plt>
   115ac:	movw	r1, #25941	; 0x6555
   115b0:	movt	r1, #1
   115b4:	mov	r0, #0
   115b8:	mov	r2, #5
   115bc:	bl	11168 <dcgettext@plt>
   115c0:	ldr	r1, [r5]
   115c4:	bl	110d8 <fputs_unlocked@plt>
   115c8:	movw	r1, #25986	; 0x6582
   115cc:	movt	r1, #1
   115d0:	mov	r0, #0
   115d4:	mov	r2, #5
   115d8:	bl	11168 <dcgettext@plt>
   115dc:	ldr	r1, [r5]
   115e0:	bl	110d8 <fputs_unlocked@plt>
   115e4:	movw	r1, #26040	; 0x65b8
   115e8:	movt	r1, #1
   115ec:	mov	r0, #0
   115f0:	mov	r2, #5
   115f4:	bl	11168 <dcgettext@plt>
   115f8:	mov	r1, r0
   115fc:	movw	r2, #26165	; 0x6635
   11600:	movt	r2, #1
   11604:	movw	r3, #26179	; 0x6643
   11608:	movt	r3, #1
   1160c:	mov	r0, #1
   11610:	bl	11300 <__printf_chk@plt>
   11614:	bl	11664 <__assert_fail@plt+0x2a4>
   11618:	mov	r0, r4
   1161c:	bl	11288 <exit@plt>
   11620:	movw	r0, #33144	; 0x8178
   11624:	movt	r0, #2
   11628:	ldr	r5, [r0]
   1162c:	movw	r1, #24980	; 0x6194
   11630:	movt	r1, #1
   11634:	mov	r0, #0
   11638:	mov	r2, #5
   1163c:	bl	11168 <dcgettext@plt>
   11640:	mov	r2, r0
   11644:	movw	r0, #33284	; 0x8204
   11648:	movt	r0, #2
   1164c:	ldr	r3, [r0]
   11650:	mov	r0, r5
   11654:	mov	r1, #1
   11658:	bl	11318 <__fprintf_chk@plt>
   1165c:	mov	r0, r4
   11660:	bl	11288 <exit@plt>
   11664:	push	{r4, r5, r6, sl, fp, lr}
   11668:	add	fp, sp, #16
   1166c:	sub	sp, sp, #56	; 0x38
   11670:	movw	r0, #27376	; 0x6af0
   11674:	movt	r0, #1
   11678:	add	r1, r0, #32
   1167c:	mov	r2, #48	; 0x30
   11680:	vld1.64	{d16-d17}, [r1]
   11684:	mov	r6, sp
   11688:	add	r1, r6, #32
   1168c:	add	r3, r0, #16
   11690:	vld1.64	{d18-d19}, [r0], r2
   11694:	vld1.64	{d20-d21}, [r3]
   11698:	vldr	d22, [r0]
   1169c:	vst1.64	{d16-d17}, [r1]
   116a0:	add	r0, r6, #16
   116a4:	vst1.64	{d20-d21}, [r0]
   116a8:	mov	r0, r6
   116ac:	vst1.64	{d18-d19}, [r0], r2
   116b0:	vstr	d22, [r0]
   116b4:	ldr	r1, [sp]
   116b8:	cmp	r1, #0
   116bc:	movw	r4, #26193	; 0x6651
   116c0:	movt	r4, #1
   116c4:	beq	116ec <__assert_fail@plt+0x32c>
   116c8:	mov	r6, sp
   116cc:	movw	r5, #26193	; 0x6651
   116d0:	movt	r5, #1
   116d4:	mov	r0, r5
   116d8:	bl	110f0 <strcmp@plt>
   116dc:	cmp	r0, #0
   116e0:	ldrne	r1, [r6, #8]!
   116e4:	cmpne	r1, #0
   116e8:	bne	116d4 <__assert_fail@plt+0x314>
   116ec:	ldr	r5, [r6, #4]
   116f0:	movw	r1, #26436	; 0x6744
   116f4:	movt	r1, #1
   116f8:	mov	r0, #0
   116fc:	mov	r2, #5
   11700:	bl	11168 <dcgettext@plt>
   11704:	mov	r1, r0
   11708:	movw	r2, #26236	; 0x667c
   1170c:	movt	r2, #1
   11710:	movw	r3, #26459	; 0x675b
   11714:	movt	r3, #1
   11718:	mov	r0, #1
   1171c:	bl	11300 <__printf_chk@plt>
   11720:	cmp	r5, #0
   11724:	moveq	r5, r4
   11728:	mov	r0, #5
   1172c:	mov	r1, #0
   11730:	bl	11348 <setlocale@plt>
   11734:	cmp	r0, #0
   11738:	beq	11778 <__assert_fail@plt+0x3b8>
   1173c:	movw	r1, #26499	; 0x6783
   11740:	movt	r1, #1
   11744:	mov	r2, #3
   11748:	bl	1139c <strncmp@plt>
   1174c:	cmp	r0, #0
   11750:	beq	11778 <__assert_fail@plt+0x3b8>
   11754:	movw	r1, #26503	; 0x6787
   11758:	movt	r1, #1
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	bl	11168 <dcgettext@plt>
   11768:	movw	r1, #33148	; 0x817c
   1176c:	movt	r1, #2
   11770:	ldr	r1, [r1]
   11774:	bl	110d8 <fputs_unlocked@plt>
   11778:	movw	r1, #26574	; 0x67ce
   1177c:	movt	r1, #1
   11780:	mov	r0, #0
   11784:	mov	r2, #5
   11788:	bl	11168 <dcgettext@plt>
   1178c:	mov	r1, r0
   11790:	movw	r2, #26459	; 0x675b
   11794:	movt	r2, #1
   11798:	mov	r0, #1
   1179c:	mov	r3, r4
   117a0:	bl	11300 <__printf_chk@plt>
   117a4:	movw	r0, #26369	; 0x6701
   117a8:	movt	r0, #1
   117ac:	movw	r6, #26651	; 0x681b
   117b0:	movt	r6, #1
   117b4:	cmp	r5, r4
   117b8:	moveq	r6, r0
   117bc:	movw	r1, #26601	; 0x67e9
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	bl	11168 <dcgettext@plt>
   117d0:	mov	r1, r0
   117d4:	mov	r0, #1
   117d8:	mov	r2, r5
   117dc:	mov	r3, r6
   117e0:	sub	sp, fp, #16
   117e4:	pop	{r4, r5, r6, sl, fp, lr}
   117e8:	b	11300 <__printf_chk@plt>
   117ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117f0:	add	fp, sp, #28
   117f4:	sub	sp, sp, #20
   117f8:	mov	r4, r1
   117fc:	mov	r5, r0
   11800:	ldr	r0, [r1]
   11804:	bl	133a8 <__assert_fail@plt+0x1fe8>
   11808:	movw	r1, #26651	; 0x681b
   1180c:	movt	r1, #1
   11810:	mov	r0, #6
   11814:	bl	11348 <setlocale@plt>
   11818:	movw	r6, #26240	; 0x6680
   1181c:	movt	r6, #1
   11820:	movw	r1, #26197	; 0x6655
   11824:	movt	r1, #1
   11828:	mov	r0, r6
   1182c:	bl	11384 <bindtextdomain@plt>
   11830:	mov	r0, r6
   11834:	bl	11198 <textdomain@plt>
   11838:	movw	r0, #12652	; 0x316c
   1183c:	movt	r0, #1
   11840:	bl	16160 <__assert_fail@plt+0x4da0>
   11844:	mov	r6, #1
   11848:	movw	r9, #27088	; 0x69d0
   1184c:	movt	r9, #1
   11850:	movw	r7, #33156	; 0x8184
   11854:	movt	r7, #2
   11858:	mov	sl, #1
   1185c:	b	11878 <__assert_fail@plt+0x4b8>
   11860:	movw	r0, #33158	; 0x8186
   11864:	movt	r0, #2
   11868:	strb	r6, [r0]
   1186c:	movw	r0, #33164	; 0x818c
   11870:	movt	r0, #2
   11874:	strb	r6, [r0]
   11878:	mov	r8, sl
   1187c:	mov	sl, #0
   11880:	str	sl, [sp]
   11884:	mov	r0, r5
   11888:	mov	r1, r4
   1188c:	movw	r2, #26221	; 0x666d
   11890:	movt	r2, #1
   11894:	mov	r3, r9
   11898:	bl	11264 <getopt_long@plt>
   1189c:	add	r1, r0, #3
   118a0:	cmp	r1, #122	; 0x7a
   118a4:	bhi	11aac <__assert_fail@plt+0x6ec>
   118a8:	add	r2, pc, #4
   118ac:	mov	r0, r7
   118b0:	ldr	pc, [r2, r1, lsl #2]
   118b4:	andeq	r1, r1, ip, lsr #25
   118b8:	andeq	r1, r1, r8, lsl #26
   118bc:			; <UNDEFINED> instruction: 0x00011bbc
   118c0:	andeq	r1, r1, r4, lsr #25
   118c4:	andeq	r1, r1, r4, lsr #25
   118c8:	andeq	r1, r1, r4, lsr #25
   118cc:	andeq	r1, r1, r4, lsr #25
   118d0:	andeq	r1, r1, r4, lsr #25
   118d4:	andeq	r1, r1, r4, lsr #25
   118d8:	andeq	r1, r1, r4, lsr #25
   118dc:	andeq	r1, r1, r4, lsr #25
   118e0:	andeq	r1, r1, r4, lsr #25
   118e4:	andeq	r1, r1, r4, lsr #25
   118e8:	andeq	r1, r1, r4, lsr #25
   118ec:	andeq	r1, r1, r4, lsr #25
   118f0:	andeq	r1, r1, r4, lsr #25
   118f4:	andeq	r1, r1, r4, lsr #25
   118f8:	andeq	r1, r1, r4, lsr #25
   118fc:	andeq	r1, r1, r4, lsr #25
   11900:	andeq	r1, r1, r4, lsr #25
   11904:	andeq	r1, r1, r4, lsr #25
   11908:	andeq	r1, r1, r4, lsr #25
   1190c:	andeq	r1, r1, r4, lsr #25
   11910:	andeq	r1, r1, r4, lsr #25
   11914:	andeq	r1, r1, r4, lsr #25
   11918:	andeq	r1, r1, r4, lsr #25
   1191c:	andeq	r1, r1, r4, lsr #25
   11920:	andeq	r1, r1, r4, lsr #25
   11924:	andeq	r1, r1, r4, lsr #25
   11928:	andeq	r1, r1, r4, lsr #25
   1192c:	andeq	r1, r1, r4, lsr #25
   11930:	andeq	r1, r1, r4, lsr #25
   11934:	andeq	r1, r1, r4, lsr #25
   11938:	andeq	r1, r1, r4, lsr #25
   1193c:	andeq	r1, r1, r4, lsr #25
   11940:	andeq	r1, r1, r4, lsr #25
   11944:	andeq	r1, r1, r4, lsr #25
   11948:	andeq	r1, r1, r4, lsr #25
   1194c:	andeq	r1, r1, r4, lsr #25
   11950:	andeq	r1, r1, r4, lsr #25
   11954:	andeq	r1, r1, r4, lsr #25
   11958:	andeq	r1, r1, r4, lsr #25
   1195c:	andeq	r1, r1, r4, lsr #25
   11960:	andeq	r1, r1, r4, lsr #25
   11964:	andeq	r1, r1, r4, lsr #25
   11968:	andeq	r1, r1, r4, lsr #25
   1196c:	andeq	r1, r1, r4, lsr #25
   11970:	andeq	r1, r1, r4, lsr #25
   11974:	andeq	r1, r1, r4, lsr #25
   11978:	andeq	r1, r1, r4, lsr #25
   1197c:	andeq	r1, r1, r4, lsr #25
   11980:	andeq	r1, r1, r4, lsr #25
   11984:	andeq	r1, r1, r4, lsr #25
   11988:	andeq	r1, r1, r4, lsr #25
   1198c:	andeq	r1, r1, r4, lsr #25
   11990:	andeq	r1, r1, r4, lsr #25
   11994:	andeq	r1, r1, r4, lsr #25
   11998:	andeq	r1, r1, r4, lsr #25
   1199c:	andeq	r1, r1, r4, lsr #25
   119a0:	andeq	r1, r1, r4, lsr #25
   119a4:	andeq	r1, r1, r4, lsr #25
   119a8:	andeq	r1, r1, r4, lsr #25
   119ac:	andeq	r1, r1, r4, lsr #25
   119b0:	andeq	r1, r1, r4, lsr #25
   119b4:	andeq	r1, r1, r4, lsr #25
   119b8:	andeq	r1, r1, r4, lsr #25
   119bc:	andeq	r1, r1, r4, lsr #25
   119c0:	andeq	r1, r1, r4, lsr #25
   119c4:	andeq	r1, r1, r4, lsr #25
   119c8:	andeq	r1, r1, r4, lsr #25
   119cc:	andeq	r1, r1, r4, lsr #25
   119d0:	andeq	r1, r1, r4, lsr #25
   119d4:	andeq	r1, r1, r4, lsr #25
   119d8:	andeq	r1, r1, r4, lsr #25
   119dc:	andeq	r1, r1, r4, lsr #25
   119e0:	strdeq	r1, [r1], -r4
   119e4:	andeq	r1, r1, r4, lsr #25
   119e8:	andeq	r1, r1, r4, lsr #25
   119ec:	andeq	r1, r1, r4, lsr #25
   119f0:	andeq	r1, r1, r4, lsr #25
   119f4:	andeq	r1, r1, r4, lsr #25
   119f8:	andeq	r1, r1, r4, lsr #25
   119fc:	andeq	r1, r1, r4, lsr #25
   11a00:	andeq	r1, r1, r4, lsr #25
   11a04:	andeq	r1, r1, r4, lsr #25
   11a08:	andeq	r1, r1, r4, lsr #25
   11a0c:	andeq	r1, r1, r4, lsr #25
   11a10:	andeq	r1, r1, r0, lsr #21
   11a14:	andeq	r1, r1, r4, lsr #25
   11a18:	andeq	r1, r1, r4, lsr #25
   11a1c:	andeq	r1, r1, r4, lsr #25
   11a20:	andeq	r1, r1, r4, lsr #25
   11a24:	andeq	r1, r1, r4, lsr #25
   11a28:	andeq	r1, r1, r4, lsr #25
   11a2c:	andeq	r1, r1, r4, lsr #25
   11a30:	andeq	r1, r1, r4, lsr #25
   11a34:	andeq	r1, r1, r4, lsr #25
   11a38:	andeq	r1, r1, r4, lsr #25
   11a3c:	andeq	r1, r1, r4, lsr #25
   11a40:	andeq	r1, r1, r4, lsr #25
   11a44:	andeq	r1, r1, ip, lsl fp
   11a48:			; <UNDEFINED> instruction: 0x00011bb4
   11a4c:	andeq	r1, r1, r4, lsr #25
   11a50:	ldrdeq	r1, [r1], -ip
   11a54:	andeq	r1, r1, r4, lsr #25
   11a58:	andeq	r1, r1, r4, lsr #25
   11a5c:	andeq	r1, r1, r4, lsr #25
   11a60:	andeq	r1, r1, r4, lsr #25
   11a64:	andeq	r1, r1, r4, lsr #25
   11a68:	andeq	r1, r1, r4, lsr #25
   11a6c:	andeq	r1, r1, r4, lsr #25
   11a70:	andeq	r1, r1, r0, ror #16
   11a74:	muleq	r1, r0, fp
   11a78:	andeq	r1, r1, r4, lsr #25
   11a7c:	andeq	r1, r1, r4, lsr #25
   11a80:	andeq	r1, r1, r0, lsl #22
   11a84:	andeq	r1, r1, r0, asr #21
   11a88:	andeq	r1, r1, r0, lsl fp
   11a8c:	andeq	r1, r1, r8, lsr #23
   11a90:	andeq	r1, r1, ip, asr #21
   11a94:	muleq	r1, ip, fp
   11a98:	andeq	r1, r1, r4, lsr #25
   11a9c:	andeq	r1, r1, r0, lsr #21
   11aa0:	movw	r0, #33163	; 0x818b
   11aa4:	movt	r0, #2
   11aa8:	b	11bb0 <__assert_fail@plt+0x7f0>
   11aac:	cmp	r0, #256	; 0x100
   11ab0:	bne	11ca4 <__assert_fail@plt+0x8e4>
   11ab4:	movw	r0, #33170	; 0x8192
   11ab8:	movt	r0, #2
   11abc:	b	11bb0 <__assert_fail@plt+0x7f0>
   11ac0:	movw	r0, #33168	; 0x8190
   11ac4:	movt	r0, #2
   11ac8:	b	11bb0 <__assert_fail@plt+0x7f0>
   11acc:	movw	r0, #33161	; 0x8189
   11ad0:	movt	r0, #2
   11ad4:	strb	r6, [r0]
   11ad8:	b	11878 <__assert_fail@plt+0x4b8>
   11adc:	movw	r0, #33164	; 0x818c
   11ae0:	movt	r0, #2
   11ae4:	strb	r6, [r0]
   11ae8:	movw	r0, #33157	; 0x8185
   11aec:	movt	r0, #2
   11af0:	b	11b7c <__assert_fail@plt+0x7bc>
   11af4:	movw	r0, #33166	; 0x818e
   11af8:	movt	r0, #2
   11afc:	b	11bb0 <__assert_fail@plt+0x7f0>
   11b00:	movw	r0, #33159	; 0x8187
   11b04:	movt	r0, #2
   11b08:	strb	r6, [r0]
   11b0c:	b	11878 <__assert_fail@plt+0x4b8>
   11b10:	movw	r0, #33160	; 0x8188
   11b14:	movt	r0, #2
   11b18:	b	11868 <__assert_fail@plt+0x4a8>
   11b1c:	movw	r0, #33157	; 0x8185
   11b20:	movt	r0, #2
   11b24:	strb	r6, [r0]
   11b28:	strb	r6, [r7]
   11b2c:	movw	r0, #33158	; 0x8186
   11b30:	movt	r0, #2
   11b34:	strb	r6, [r0]
   11b38:	movw	r0, #33159	; 0x8187
   11b3c:	movt	r0, #2
   11b40:	strb	r6, [r0]
   11b44:	movw	r0, #33160	; 0x8188
   11b48:	movt	r0, #2
   11b4c:	strb	r6, [r0]
   11b50:	movw	r0, #33161	; 0x8189
   11b54:	movt	r0, #2
   11b58:	strb	r6, [r0]
   11b5c:	movw	r0, #33162	; 0x818a
   11b60:	movt	r0, #2
   11b64:	strb	r6, [r0]
   11b68:	movw	r0, #33163	; 0x818b
   11b6c:	movt	r0, #2
   11b70:	strb	r6, [r0]
   11b74:	movw	r0, #33164	; 0x818c
   11b78:	movt	r0, #2
   11b7c:	strb	r6, [r0]
   11b80:	movw	r0, #33165	; 0x818d
   11b84:	movt	r0, #2
   11b88:	strb	r6, [r0]
   11b8c:	b	11878 <__assert_fail@plt+0x4b8>
   11b90:	movw	r0, #33167	; 0x818f
   11b94:	movt	r0, #2
   11b98:	b	11bb0 <__assert_fail@plt+0x7f0>
   11b9c:	movw	r0, #33162	; 0x818a
   11ba0:	movt	r0, #2
   11ba4:	b	11868 <__assert_fail@plt+0x4a8>
   11ba8:	movw	r0, #33169	; 0x8191
   11bac:	movt	r0, #2
   11bb0:	mov	sl, r8
   11bb4:	strb	r6, [r0]
   11bb8:	b	11878 <__assert_fail@plt+0x4b8>
   11bbc:	tst	r8, #1
   11bc0:	beq	11be0 <__assert_fail@plt+0x820>
   11bc4:	movw	r0, #33169	; 0x8191
   11bc8:	movt	r0, #2
   11bcc:	mov	r1, #1
   11bd0:	strb	r1, [r0]
   11bd4:	movw	r0, #33162	; 0x818a
   11bd8:	movt	r0, #2
   11bdc:	strb	r1, [r0]
   11be0:	movw	r0, #33165	; 0x818d
   11be4:	movt	r0, #2
   11be8:	ldrb	r0, [r0]
   11bec:	cmp	r0, #1
   11bf0:	movweq	r0, #33169	; 0x8191
   11bf4:	movteq	r0, #2
   11bf8:	moveq	r1, #0
   11bfc:	strbeq	r1, [r0]
   11c00:	mov	r0, #2
   11c04:	bl	1327c <__assert_fail@plt+0x1ebc>
   11c08:	movw	r1, #26297	; 0x66b9
   11c0c:	movt	r1, #1
   11c10:	movw	r2, #26312	; 0x66c8
   11c14:	movt	r2, #1
   11c18:	cmp	r0, #0
   11c1c:	movne	r2, r1
   11c20:	movw	r0, #33172	; 0x8194
   11c24:	movt	r0, #2
   11c28:	str	r2, [r0]
   11c2c:	mov	r0, #12
   11c30:	movwne	r0, #16
   11c34:	movw	r1, #33176	; 0x8198
   11c38:	movt	r1, #2
   11c3c:	str	r0, [r1]
   11c40:	movw	r6, #33136	; 0x8170
   11c44:	movt	r6, #2
   11c48:	ldr	r0, [r6]
   11c4c:	sub	r1, r5, r0
   11c50:	add	r2, r1, #1
   11c54:	cmp	r2, #2
   11c58:	bcc	11c7c <__assert_fail@plt+0x8bc>
   11c5c:	cmp	r1, #1
   11c60:	beq	11c8c <__assert_fail@plt+0x8cc>
   11c64:	cmp	r1, #2
   11c68:	bne	11d10 <__assert_fail@plt+0x950>
   11c6c:	movw	r0, #33167	; 0x818f
   11c70:	movt	r0, #2
   11c74:	mov	r1, #1
   11c78:	strb	r1, [r0]
   11c7c:	movw	r0, #26165	; 0x6635
   11c80:	movt	r0, #1
   11c84:	mov	r1, #1
   11c88:	b	11c94 <__assert_fail@plt+0x8d4>
   11c8c:	ldr	r0, [r4, r0, lsl #2]
   11c90:	mov	r1, #0
   11c94:	bl	11d54 <__assert_fail@plt+0x994>
   11c98:	mov	r0, #0
   11c9c:	sub	sp, fp, #28
   11ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ca4:	mov	r0, #1
   11ca8:	bl	114bc <__assert_fail@plt+0xfc>
   11cac:	movw	r0, #33056	; 0x8120
   11cb0:	movt	r0, #2
   11cb4:	ldr	r3, [r0]
   11cb8:	movw	r0, #33148	; 0x817c
   11cbc:	movt	r0, #2
   11cc0:	ldr	r0, [r0]
   11cc4:	mov	r1, #0
   11cc8:	movw	r2, #26283	; 0x66ab
   11ccc:	movt	r2, #1
   11cd0:	movw	r7, #26267	; 0x669b
   11cd4:	movt	r7, #1
   11cd8:	movw	r6, #26250	; 0x668a
   11cdc:	movt	r6, #1
   11ce0:	stm	sp, {r6, r7}
   11ce4:	str	r2, [sp, #8]
   11ce8:	str	r1, [sp, #12]
   11cec:	movw	r1, #26193	; 0x6651
   11cf0:	movt	r1, #1
   11cf4:	movw	r2, #26236	; 0x667c
   11cf8:	movt	r2, #1
   11cfc:	bl	155e8 <__assert_fail@plt+0x4228>
   11d00:	mov	r0, #0
   11d04:	bl	11288 <exit@plt>
   11d08:	mov	r0, #0
   11d0c:	bl	114bc <__assert_fail@plt+0xfc>
   11d10:	movw	r1, #26324	; 0x66d4
   11d14:	movt	r1, #1
   11d18:	mov	r0, #0
   11d1c:	mov	r2, #5
   11d20:	bl	11168 <dcgettext@plt>
   11d24:	mov	r5, r0
   11d28:	ldr	r0, [r6]
   11d2c:	add	r0, r4, r0, lsl #2
   11d30:	ldr	r0, [r0, #8]
   11d34:	bl	14b9c <__assert_fail@plt+0x37dc>
   11d38:	mov	r3, r0
   11d3c:	mov	r0, #0
   11d40:	mov	r1, #0
   11d44:	mov	r2, r5
   11d48:	bl	111f8 <error@plt>
   11d4c:	mov	r0, #1
   11d50:	bl	114bc <__assert_fail@plt+0xfc>
   11d54:	push	{r4, r5, fp, lr}
   11d58:	add	fp, sp, #8
   11d5c:	sub	sp, sp, #8
   11d60:	mov	r3, r1
   11d64:	mov	r4, r0
   11d68:	add	r1, sp, #4
   11d6c:	mov	r2, sp
   11d70:	bl	15018 <__assert_fail@plt+0x3c58>
   11d74:	cmp	r0, #0
   11d78:	bne	11db4 <__assert_fail@plt+0x9f4>
   11d7c:	movw	r0, #33168	; 0x8190
   11d80:	movt	r0, #2
   11d84:	ldrb	r2, [r0]
   11d88:	ldr	r1, [sp]
   11d8c:	ldr	r0, [sp, #4]
   11d90:	cmp	r2, #1
   11d94:	bne	11da0 <__assert_fail@plt+0x9e0>
   11d98:	bl	11de4 <__assert_fail@plt+0xa24>
   11d9c:	b	11da4 <__assert_fail@plt+0x9e4>
   11da0:	bl	11eac <__assert_fail@plt+0xaec>
   11da4:	ldr	r0, [sp]
   11da8:	bl	13254 <__assert_fail@plt+0x1e94>
   11dac:	sub	sp, fp, #8
   11db0:	pop	{r4, r5, fp, pc}
   11db4:	bl	112c4 <__errno_location@plt>
   11db8:	ldr	r5, [r0]
   11dbc:	mov	r0, #0
   11dc0:	mov	r1, #3
   11dc4:	mov	r2, r4
   11dc8:	bl	14a5c <__assert_fail@plt+0x369c>
   11dcc:	mov	r3, r0
   11dd0:	movw	r2, #27463	; 0x6b47
   11dd4:	movt	r2, #1
   11dd8:	mov	r0, #1
   11ddc:	mov	r1, r5
   11de0:	bl	111f8 <error@plt>
   11de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de8:	add	fp, sp, #28
   11dec:	sub	sp, sp, #4
   11df0:	cmp	r0, #0
   11df4:	beq	11e7c <__assert_fail@plt+0xabc>
   11df8:	mov	r5, r1
   11dfc:	mov	r6, r0
   11e00:	mov	r9, #0
   11e04:	movw	r7, #26651	; 0x681b
   11e08:	movt	r7, #1
   11e0c:	movw	r8, #26757	; 0x6885
   11e10:	movt	r8, #1
   11e14:	movw	sl, #26906	; 0x691a
   11e18:	movt	sl, #1
   11e1c:	b	11e2c <__assert_fail@plt+0xa6c>
   11e20:	add	r5, r5, #384	; 0x180
   11e24:	cmp	r6, #0
   11e28:	beq	11e80 <__assert_fail@plt+0xac0>
   11e2c:	ldrb	r0, [r5, #44]	; 0x2c
   11e30:	sub	r6, r6, #1
   11e34:	cmp	r0, #0
   11e38:	beq	11e20 <__assert_fail@plt+0xa60>
   11e3c:	ldrh	r0, [r5]
   11e40:	cmp	r0, #7
   11e44:	bne	11e20 <__assert_fail@plt+0xa60>
   11e48:	mov	r0, r5
   11e4c:	bl	14fb4 <__assert_fail@plt+0x3bf4>
   11e50:	mov	r4, r0
   11e54:	mov	r0, #1
   11e58:	mov	r1, r8
   11e5c:	mov	r2, r7
   11e60:	mov	r3, r4
   11e64:	bl	11300 <__printf_chk@plt>
   11e68:	mov	r0, r4
   11e6c:	bl	13254 <__assert_fail@plt+0x1e94>
   11e70:	add	r9, r9, #1
   11e74:	mov	r7, sl
   11e78:	b	11e20 <__assert_fail@plt+0xa60>
   11e7c:	mov	r9, #0
   11e80:	movw	r1, #26762	; 0x688a
   11e84:	movt	r1, #1
   11e88:	mov	r0, #0
   11e8c:	mov	r2, #5
   11e90:	bl	11168 <dcgettext@plt>
   11e94:	mov	r1, r0
   11e98:	mov	r0, #1
   11e9c:	mov	r2, r9
   11ea0:	sub	sp, fp, #28
   11ea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea8:	b	11300 <__printf_chk@plt>
   11eac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11eb0:	add	fp, sp, #28
   11eb4:	sub	sp, sp, #4
   11eb8:	mov	r4, r1
   11ebc:	mov	r5, r0
   11ec0:	movw	r0, #33166	; 0x818e
   11ec4:	movt	r0, #2
   11ec8:	ldrb	r0, [r0]
   11ecc:	cmp	r0, #1
   11ed0:	bleq	120a8 <__assert_fail@plt+0xce8>
   11ed4:	movw	r8, #33167	; 0x818f
   11ed8:	movt	r8, #2
   11edc:	ldrb	r0, [r8]
   11ee0:	cmp	r0, #1
   11ee4:	bne	11f14 <__assert_fail@plt+0xb54>
   11ee8:	mov	r0, #0
   11eec:	bl	112a0 <ttyname@plt>
   11ef0:	cmp	r0, #0
   11ef4:	beq	120a0 <__assert_fail@plt+0xce0>
   11ef8:	mov	r6, r0
   11efc:	movw	r1, #26776	; 0x6898
   11f00:	movt	r1, #1
   11f04:	mov	r2, #5
   11f08:	bl	1139c <strncmp@plt>
   11f0c:	cmp	r0, #0
   11f10:	addeq	r6, r6, #5
   11f14:	cmp	r5, #0
   11f18:	beq	120a0 <__assert_fail@plt+0xce0>
   11f1c:	mov	r7, #-2147483648	; 0x80000000
   11f20:	movw	r9, #33162	; 0x818a
   11f24:	movt	r9, #2
   11f28:	movw	sl, #33160	; 0x8188
   11f2c:	movt	sl, #2
   11f30:	b	11f58 <__assert_fail@plt+0xb98>
   11f34:	mov	r0, r4
   11f38:	bl	12490 <__assert_fail@plt+0x10d0>
   11f3c:	sub	r5, r5, #1
   11f40:	ldrh	r0, [r4]
   11f44:	cmp	r0, #2
   11f48:	ldreq	r7, [r4, #340]	; 0x154
   11f4c:	add	r4, r4, #384	; 0x180
   11f50:	cmp	r5, #0
   11f54:	beq	120a0 <__assert_fail@plt+0xce0>
   11f58:	ldrb	r0, [r8]
   11f5c:	cmp	r0, #1
   11f60:	bne	11f7c <__assert_fail@plt+0xbbc>
   11f64:	add	r1, r4, #8
   11f68:	mov	r0, r6
   11f6c:	mov	r2, #32
   11f70:	bl	1139c <strncmp@plt>
   11f74:	cmp	r0, #0
   11f78:	bne	11f3c <__assert_fail@plt+0xb7c>
   11f7c:	ldrb	r0, [r9]
   11f80:	cmp	r0, #1
   11f84:	bne	11fb0 <__assert_fail@plt+0xbf0>
   11f88:	ldrb	r0, [r4, #44]	; 0x2c
   11f8c:	cmp	r0, #0
   11f90:	beq	11fb0 <__assert_fail@plt+0xbf0>
   11f94:	ldrh	r0, [r4]
   11f98:	cmp	r0, #7
   11f9c:	bne	11fb0 <__assert_fail@plt+0xbf0>
   11fa0:	mov	r0, r4
   11fa4:	mov	r1, r7
   11fa8:	bl	12188 <__assert_fail@plt+0xdc8>
   11fac:	b	11f3c <__assert_fail@plt+0xb7c>
   11fb0:	ldrb	r0, [sl]
   11fb4:	cmp	r0, #1
   11fb8:	bne	11fc8 <__assert_fail@plt+0xc08>
   11fbc:	ldrh	r0, [r4]
   11fc0:	cmp	r0, #1
   11fc4:	beq	11f34 <__assert_fail@plt+0xb74>
   11fc8:	movw	r0, #33156	; 0x8184
   11fcc:	movt	r0, #2
   11fd0:	ldrb	r0, [r0]
   11fd4:	cmp	r0, #1
   11fd8:	bne	11ff4 <__assert_fail@plt+0xc34>
   11fdc:	ldrh	r0, [r4]
   11fe0:	cmp	r0, #2
   11fe4:	bne	11ff4 <__assert_fail@plt+0xc34>
   11fe8:	mov	r0, r4
   11fec:	bl	125f8 <__assert_fail@plt+0x1238>
   11ff0:	b	11f3c <__assert_fail@plt+0xb7c>
   11ff4:	movw	r0, #33161	; 0x8189
   11ff8:	movt	r0, #2
   11ffc:	ldrb	r0, [r0]
   12000:	cmp	r0, #1
   12004:	bne	12020 <__assert_fail@plt+0xc60>
   12008:	ldrh	r0, [r4]
   1200c:	cmp	r0, #3
   12010:	bne	12020 <__assert_fail@plt+0xc60>
   12014:	mov	r0, r4
   12018:	bl	1265c <__assert_fail@plt+0x129c>
   1201c:	b	11f3c <__assert_fail@plt+0xb7c>
   12020:	movw	r0, #33159	; 0x8187
   12024:	movt	r0, #2
   12028:	ldrb	r0, [r0]
   1202c:	cmp	r0, #1
   12030:	bne	1204c <__assert_fail@plt+0xc8c>
   12034:	ldrh	r0, [r4]
   12038:	cmp	r0, #5
   1203c:	bne	1204c <__assert_fail@plt+0xc8c>
   12040:	mov	r0, r4
   12044:	bl	126c0 <__assert_fail@plt+0x1300>
   12048:	b	11f3c <__assert_fail@plt+0xb7c>
   1204c:	movw	r0, #33158	; 0x8186
   12050:	movt	r0, #2
   12054:	ldrb	r0, [r0]
   12058:	cmp	r0, #1
   1205c:	bne	12078 <__assert_fail@plt+0xcb8>
   12060:	ldrh	r0, [r4]
   12064:	cmp	r0, #6
   12068:	bne	12078 <__assert_fail@plt+0xcb8>
   1206c:	mov	r0, r4
   12070:	bl	12740 <__assert_fail@plt+0x1380>
   12074:	b	11f3c <__assert_fail@plt+0xb7c>
   12078:	movw	r0, #33157	; 0x8185
   1207c:	movt	r0, #2
   12080:	ldrb	r0, [r0]
   12084:	cmp	r0, #1
   12088:	bne	11f3c <__assert_fail@plt+0xb7c>
   1208c:	ldrh	r0, [r4]
   12090:	cmp	r0, #8
   12094:	moveq	r0, r4
   12098:	bleq	127dc <__assert_fail@plt+0x141c>
   1209c:	b	11f3c <__assert_fail@plt+0xb7c>
   120a0:	sub	sp, fp, #28
   120a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120a8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   120ac:	add	fp, sp, #24
   120b0:	sub	sp, sp, #24
   120b4:	movw	r1, #26782	; 0x689e
   120b8:	movt	r1, #1
   120bc:	mov	r0, #0
   120c0:	mov	r2, #5
   120c4:	bl	11168 <dcgettext@plt>
   120c8:	mov	r8, r0
   120cc:	movw	r1, #26787	; 0x68a3
   120d0:	movt	r1, #1
   120d4:	mov	r0, #0
   120d8:	mov	r2, #5
   120dc:	bl	11168 <dcgettext@plt>
   120e0:	mov	r9, r0
   120e4:	movw	r1, #26792	; 0x68a8
   120e8:	movt	r1, #1
   120ec:	mov	r0, #0
   120f0:	mov	r2, #5
   120f4:	bl	11168 <dcgettext@plt>
   120f8:	mov	r6, r0
   120fc:	movw	r1, #26797	; 0x68ad
   12100:	movt	r1, #1
   12104:	mov	r0, #0
   12108:	mov	r2, #5
   1210c:	bl	11168 <dcgettext@plt>
   12110:	mov	r7, r0
   12114:	movw	r1, #26802	; 0x68b2
   12118:	movt	r1, #1
   1211c:	mov	r0, #0
   12120:	mov	r2, #5
   12124:	bl	11168 <dcgettext@plt>
   12128:	mov	r4, r0
   1212c:	movw	r1, #26806	; 0x68b6
   12130:	movt	r1, #1
   12134:	mov	r0, #0
   12138:	mov	r2, #5
   1213c:	bl	11168 <dcgettext@plt>
   12140:	mov	r5, r0
   12144:	movw	r1, #26814	; 0x68be
   12148:	movt	r1, #1
   1214c:	mov	r0, #0
   12150:	mov	r2, #5
   12154:	bl	11168 <dcgettext@plt>
   12158:	str	r9, [sp]
   1215c:	stmib	sp, {r6, r7}
   12160:	str	r4, [sp, #12]
   12164:	str	r5, [sp, #16]
   12168:	str	r0, [sp, #20]
   1216c:	mvn	r0, #0
   12170:	mov	r1, r8
   12174:	mov	r2, #32
   12178:	mvn	r3, #0
   1217c:	bl	1291c <__assert_fail@plt+0x155c>
   12180:	sub	sp, fp, #24
   12184:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12188:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1218c:	add	fp, sp, #28
   12190:	sub	sp, sp, #460	; 0x1cc
   12194:	mov	r5, r1
   12198:	mov	r7, r0
   1219c:	ldr	r0, [r0, #4]
   121a0:	str	r0, [sp]
   121a4:	sub	r8, fp, #196	; 0xc4
   121a8:	movw	r3, #26876	; 0x68fc
   121ac:	movt	r3, #1
   121b0:	mov	r0, r8
   121b4:	mov	r1, #1
   121b8:	mov	r2, #12
   121bc:	bl	112d0 <__sprintf_chk@plt>
   121c0:	mov	r4, r7
   121c4:	ldrb	r0, [r4, #8]!
   121c8:	cmp	r0, #47	; 0x2f
   121cc:	bne	121d8 <__assert_fail@plt+0xe18>
   121d0:	sub	r0, fp, #184	; 0xb8
   121d4:	b	121f4 <__assert_fail@plt+0xe34>
   121d8:	mov	r0, #47	; 0x2f
   121dc:	strh	r0, [fp, #-180]	; 0xffffff4c
   121e0:	movw	r0, #25647	; 0x642f
   121e4:	movt	r0, #30309	; 0x7665
   121e8:	str	r0, [fp, #-184]	; 0xffffff48
   121ec:	sub	r0, fp, #184	; 0xb8
   121f0:	orr	r0, r0, #5
   121f4:	mov	r1, r4
   121f8:	mov	r2, #32
   121fc:	bl	12b44 <__assert_fail@plt+0x1784>
   12200:	sub	r0, fp, #184	; 0xb8
   12204:	sub	r1, fp, #136	; 0x88
   12208:	bl	16178 <__assert_fail@plt+0x4db8>
   1220c:	mov	r9, #63	; 0x3f
   12210:	cmp	r0, #0
   12214:	beq	12228 <__assert_fail@plt+0xe68>
   12218:	sub	r0, fp, #143	; 0x8f
   1221c:	movw	r3, #26885	; 0x6905
   12220:	movt	r3, #1
   12224:	b	12268 <__assert_fail@plt+0xea8>
   12228:	sub	r0, fp, #136	; 0x88
   1222c:	bl	12b78 <__assert_fail@plt+0x17b8>
   12230:	mov	r9, #45	; 0x2d
   12234:	cmp	r0, #0
   12238:	movwne	r9, #43	; 0x2b
   1223c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12240:	cmp	r0, #0
   12244:	beq	12218 <__assert_fail@plt+0xe58>
   12248:	mov	r1, r5
   1224c:	bl	12b84 <__assert_fail@plt+0x17c4>
   12250:	mov	r1, #6
   12254:	str	r1, [sp]
   12258:	str	r0, [sp, #4]
   1225c:	sub	r0, fp, #143	; 0x8f
   12260:	movw	r3, #26880	; 0x6900
   12264:	movt	r3, #1
   12268:	mov	r1, #1
   1226c:	mov	r2, #7
   12270:	bl	112d0 <__sprintf_chk@plt>
   12274:	mov	r1, r7
   12278:	ldrb	r0, [r1, #76]!	; 0x4c
   1227c:	cmp	r0, #0
   12280:	movw	r6, #33180	; 0x819c
   12284:	movt	r6, #2
   12288:	beq	12388 <__assert_fail@plt+0xfc8>
   1228c:	add	r5, sp, #35	; 0x23
   12290:	mov	r0, r5
   12294:	mov	r2, #256	; 0x100
   12298:	bl	12b44 <__assert_fail@plt+0x1784>
   1229c:	mov	r0, r5
   122a0:	mov	r1, #58	; 0x3a
   122a4:	bl	112b8 <strchr@plt>
   122a8:	mov	sl, #0
   122ac:	cmp	r0, #0
   122b0:	mov	r6, #0
   122b4:	movne	r1, #0
   122b8:	strbne	r1, [r0], #1
   122bc:	movne	r6, r0
   122c0:	ldrb	r0, [sp, #35]	; 0x23
   122c4:	cmp	r0, #0
   122c8:	str	r7, [sp, #28]
   122cc:	str	r9, [sp, #24]
   122d0:	mov	r7, r4
   122d4:	mov	r4, r8
   122d8:	beq	122fc <__assert_fail@plt+0xf3c>
   122dc:	movw	r0, #33170	; 0x8192
   122e0:	movt	r0, #2
   122e4:	ldrb	r0, [r0]
   122e8:	cmp	r0, #1
   122ec:	bne	122fc <__assert_fail@plt+0xf3c>
   122f0:	add	r0, sp, #35	; 0x23
   122f4:	bl	1309c <__assert_fail@plt+0x1cdc>
   122f8:	mov	sl, r0
   122fc:	cmp	sl, #0
   12300:	movne	r5, sl
   12304:	movw	r0, #33184	; 0x81a0
   12308:	movt	r0, #2
   1230c:	ldr	r9, [r0]
   12310:	mov	r0, r5
   12314:	bl	112ac <strlen@plt>
   12318:	mov	r8, r0
   1231c:	cmp	r6, #0
   12320:	beq	123c8 <__assert_fail@plt+0x1008>
   12324:	mov	r0, r6
   12328:	bl	112ac <strlen@plt>
   1232c:	add	r0, r8, r0
   12330:	add	r0, r0, #4
   12334:	cmp	r9, r0
   12338:	bcs	1236c <__assert_fail@plt+0xfac>
   1233c:	movw	r1, #33184	; 0x81a0
   12340:	movt	r1, #2
   12344:	mov	r9, r1
   12348:	str	r0, [r1]
   1234c:	movw	r0, #33180	; 0x819c
   12350:	movt	r0, #2
   12354:	mov	r8, r0
   12358:	ldr	r0, [r0]
   1235c:	bl	13254 <__assert_fail@plt+0x1e94>
   12360:	ldr	r0, [r9]
   12364:	bl	156f0 <__assert_fail@plt+0x4330>
   12368:	str	r0, [r8]
   1236c:	movw	r0, #33180	; 0x819c
   12370:	movt	r0, #2
   12374:	ldr	r0, [r0]
   12378:	stm	sp, {r5, r6}
   1237c:	movw	r3, #26889	; 0x6909
   12380:	movt	r3, #1
   12384:	b	12410 <__assert_fail@plt+0x1050>
   12388:	movw	r5, #33184	; 0x81a0
   1238c:	movt	r5, #2
   12390:	ldr	r0, [r5]
   12394:	cmp	r0, #0
   12398:	bne	123b8 <__assert_fail@plt+0xff8>
   1239c:	mov	r0, #1
   123a0:	str	r0, [r5]
   123a4:	ldr	r0, [r6]
   123a8:	bl	13254 <__assert_fail@plt+0x1e94>
   123ac:	ldr	r0, [r5]
   123b0:	bl	156f0 <__assert_fail@plt+0x4330>
   123b4:	str	r0, [r6]
   123b8:	ldr	r0, [r6]
   123bc:	mov	r1, #0
   123c0:	strb	r1, [r0]
   123c4:	b	12444 <__assert_fail@plt+0x1084>
   123c8:	add	r0, r8, #3
   123cc:	cmp	r9, r0
   123d0:	movw	r6, #33180	; 0x819c
   123d4:	movt	r6, #2
   123d8:	bcs	12400 <__assert_fail@plt+0x1040>
   123dc:	movw	r1, #33184	; 0x81a0
   123e0:	movt	r1, #2
   123e4:	mov	r8, r1
   123e8:	str	r0, [r1]
   123ec:	ldr	r0, [r6]
   123f0:	bl	13254 <__assert_fail@plt+0x1e94>
   123f4:	ldr	r0, [r8]
   123f8:	bl	156f0 <__assert_fail@plt+0x4330>
   123fc:	str	r0, [r6]
   12400:	ldr	r0, [r6]
   12404:	str	r5, [sp]
   12408:	movw	r3, #26897	; 0x6911
   1240c:	movt	r3, #1
   12410:	mov	r1, #1
   12414:	mvn	r2, #0
   12418:	bl	112d0 <__sprintf_chk@plt>
   1241c:	mov	r8, r4
   12420:	mov	r4, r7
   12424:	ldr	r7, [sp, #28]
   12428:	ldr	r9, [sp, #24]
   1242c:	cmp	sl, #0
   12430:	beq	1243c <__assert_fail@plt+0x107c>
   12434:	mov	r0, r5
   12438:	bl	13254 <__assert_fail@plt+0x1e94>
   1243c:	movw	r6, #33180	; 0x819c
   12440:	movt	r6, #2
   12444:	mov	r0, r7
   12448:	bl	12ca0 <__assert_fail@plt+0x18e0>
   1244c:	ldr	r1, [r6]
   12450:	movw	r2, #26651	; 0x681b
   12454:	movt	r2, #1
   12458:	sub	r3, fp, #143	; 0x8f
   1245c:	cmp	r1, #0
   12460:	moveq	r1, r2
   12464:	str	r4, [sp]
   12468:	stmib	sp, {r0, r3, r8}
   1246c:	str	r1, [sp, #16]
   12470:	str	r2, [sp, #20]
   12474:	add	r1, r7, #44	; 0x2c
   12478:	mov	r0, #32
   1247c:	mov	r2, r9
   12480:	mov	r3, #32
   12484:	bl	1291c <__assert_fail@plt+0x155c>
   12488:	sub	sp, fp, #28
   1248c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12490:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12494:	add	fp, sp, #24
   12498:	sub	sp, sp, #24
   1249c:	mov	r4, r0
   124a0:	ldr	r7, [r0, #4]
   124a4:	asr	r0, r7, #31
   124a8:	add	r5, r7, r0, lsr #24
   124ac:	movw	r8, #33228	; 0x81cc
   124b0:	movt	r8, #2
   124b4:	ldr	r0, [r8]
   124b8:	cmp	r0, #0
   124bc:	bne	124e4 <__assert_fail@plt+0x1124>
   124c0:	movw	r1, #27004	; 0x697c
   124c4:	movt	r1, #1
   124c8:	mov	r0, #0
   124cc:	mov	r2, #5
   124d0:	bl	11168 <dcgettext@plt>
   124d4:	bl	112ac <strlen@plt>
   124d8:	add	r0, r0, #3
   124dc:	bl	156f0 <__assert_fail@plt+0x4330>
   124e0:	str	r0, [r8]
   124e4:	asr	r6, r5, #8
   124e8:	ldr	r5, [r8]
   124ec:	movw	r1, #27004	; 0x697c
   124f0:	movt	r1, #1
   124f4:	mov	r0, #0
   124f8:	mov	r2, #5
   124fc:	bl	11168 <dcgettext@plt>
   12500:	uxtb	r1, r7
   12504:	stm	sp, {r0, r1}
   12508:	movw	r3, #27014	; 0x6986
   1250c:	movt	r3, #1
   12510:	mov	r0, r5
   12514:	mov	r1, #1
   12518:	mvn	r2, #0
   1251c:	bl	112d0 <__sprintf_chk@plt>
   12520:	movw	r7, #33232	; 0x81d0
   12524:	movt	r7, #2
   12528:	ldr	r0, [r7]
   1252c:	cmp	r0, #0
   12530:	bne	12558 <__assert_fail@plt+0x1198>
   12534:	movw	r1, #27020	; 0x698c
   12538:	movt	r1, #1
   1253c:	mov	r0, #0
   12540:	mov	r2, #5
   12544:	bl	11168 <dcgettext@plt>
   12548:	bl	112ac <strlen@plt>
   1254c:	add	r0, r0, #2
   12550:	bl	156f0 <__assert_fail@plt+0x4330>
   12554:	str	r0, [r7]
   12558:	ldr	r5, [r7]
   1255c:	movw	r1, #27020	; 0x698c
   12560:	movt	r1, #1
   12564:	mov	r0, #0
   12568:	mov	r2, #5
   1256c:	bl	11168 <dcgettext@plt>
   12570:	uxtb	r6, r6
   12574:	cmp	r6, #78	; 0x4e
   12578:	mov	r1, r6
   1257c:	movweq	r1, #83	; 0x53
   12580:	stm	sp, {r0, r1}
   12584:	movw	r3, #27026	; 0x6992
   12588:	movt	r3, #1
   1258c:	mov	r0, r5
   12590:	mov	r1, #1
   12594:	mvn	r2, #0
   12598:	bl	112d0 <__sprintf_chk@plt>
   1259c:	ldr	r5, [r8]
   125a0:	mov	r0, r4
   125a4:	bl	12ca0 <__assert_fail@plt+0x18e0>
   125a8:	mov	r4, r0
   125ac:	mov	r0, r6
   125b0:	bl	12e54 <__assert_fail@plt+0x1a94>
   125b4:	ldr	r2, [r7]
   125b8:	movw	r1, #26651	; 0x681b
   125bc:	movt	r1, #1
   125c0:	cmp	r0, #0
   125c4:	moveq	r2, r1
   125c8:	str	r5, [sp]
   125cc:	str	r4, [sp, #4]
   125d0:	str	r1, [sp, #8]
   125d4:	str	r1, [sp, #12]
   125d8:	str	r2, [sp, #16]
   125dc:	str	r1, [sp, #20]
   125e0:	mvn	r0, #0
   125e4:	mov	r2, #32
   125e8:	mvn	r3, #0
   125ec:	bl	1291c <__assert_fail@plt+0x155c>
   125f0:	sub	sp, fp, #24
   125f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   125f8:	push	{r4, r5, fp, lr}
   125fc:	add	fp, sp, #8
   12600:	sub	sp, sp, #24
   12604:	mov	r4, r0
   12608:	movw	r1, #27031	; 0x6997
   1260c:	movt	r1, #1
   12610:	mov	r0, #0
   12614:	mov	r2, #5
   12618:	bl	11168 <dcgettext@plt>
   1261c:	mov	r5, r0
   12620:	mov	r0, r4
   12624:	bl	12ca0 <__assert_fail@plt+0x18e0>
   12628:	movw	r1, #26651	; 0x681b
   1262c:	movt	r1, #1
   12630:	str	r5, [sp]
   12634:	stmib	sp, {r0, r1}
   12638:	str	r1, [sp, #12]
   1263c:	str	r1, [sp, #16]
   12640:	str	r1, [sp, #20]
   12644:	mvn	r0, #0
   12648:	mov	r2, #32
   1264c:	mvn	r3, #0
   12650:	bl	1291c <__assert_fail@plt+0x155c>
   12654:	sub	sp, fp, #8
   12658:	pop	{r4, r5, fp, pc}
   1265c:	push	{r4, r5, fp, lr}
   12660:	add	fp, sp, #8
   12664:	sub	sp, sp, #24
   12668:	mov	r4, r0
   1266c:	movw	r1, #27043	; 0x69a3
   12670:	movt	r1, #1
   12674:	mov	r0, #0
   12678:	mov	r2, #5
   1267c:	bl	11168 <dcgettext@plt>
   12680:	mov	r5, r0
   12684:	mov	r0, r4
   12688:	bl	12ca0 <__assert_fail@plt+0x18e0>
   1268c:	movw	r1, #26651	; 0x681b
   12690:	movt	r1, #1
   12694:	str	r5, [sp]
   12698:	stmib	sp, {r0, r1}
   1269c:	str	r1, [sp, #12]
   126a0:	str	r1, [sp, #16]
   126a4:	str	r1, [sp, #20]
   126a8:	mvn	r0, #0
   126ac:	mov	r2, #32
   126b0:	mvn	r3, #0
   126b4:	bl	1291c <__assert_fail@plt+0x155c>
   126b8:	sub	sp, fp, #8
   126bc:	pop	{r4, r5, fp, pc}
   126c0:	push	{r4, r5, r6, sl, fp, lr}
   126c4:	add	fp, sp, #16
   126c8:	sub	sp, sp, #40	; 0x28
   126cc:	mov	r5, r0
   126d0:	bl	12d14 <__assert_fail@plt+0x1954>
   126d4:	mov	r4, r0
   126d8:	ldr	r0, [r5, #4]
   126dc:	str	r0, [sp]
   126e0:	add	r6, sp, #28
   126e4:	movw	r3, #26876	; 0x68fc
   126e8:	movt	r3, #1
   126ec:	mov	r0, r6
   126f0:	mov	r1, #1
   126f4:	mov	r2, #12
   126f8:	bl	112d0 <__sprintf_chk@plt>
   126fc:	mov	r0, r5
   12700:	bl	12ca0 <__assert_fail@plt+0x18e0>
   12704:	movw	r1, #26651	; 0x681b
   12708:	movt	r1, #1
   1270c:	add	r2, r5, #8
   12710:	str	r2, [sp]
   12714:	stmib	sp, {r0, r1, r6}
   12718:	str	r4, [sp, #16]
   1271c:	str	r1, [sp, #20]
   12720:	mvn	r0, #0
   12724:	mov	r2, #32
   12728:	mov	r3, #32
   1272c:	bl	1291c <__assert_fail@plt+0x155c>
   12730:	mov	r0, r4
   12734:	bl	13254 <__assert_fail@plt+0x1e94>
   12738:	sub	sp, fp, #16
   1273c:	pop	{r4, r5, r6, sl, fp, pc}
   12740:	push	{r4, r5, r6, r7, fp, lr}
   12744:	add	fp, sp, #16
   12748:	sub	sp, sp, #40	; 0x28
   1274c:	mov	r5, r0
   12750:	bl	12d14 <__assert_fail@plt+0x1954>
   12754:	mov	r4, r0
   12758:	ldr	r0, [r5, #4]
   1275c:	str	r0, [sp]
   12760:	add	r6, sp, #28
   12764:	movw	r3, #26876	; 0x68fc
   12768:	movt	r3, #1
   1276c:	mov	r0, r6
   12770:	mov	r1, #1
   12774:	mov	r2, #12
   12778:	bl	112d0 <__sprintf_chk@plt>
   1277c:	movw	r1, #27060	; 0x69b4
   12780:	movt	r1, #1
   12784:	mov	r0, #0
   12788:	mov	r2, #5
   1278c:	bl	11168 <dcgettext@plt>
   12790:	mov	r7, r0
   12794:	mov	r0, r5
   12798:	bl	12ca0 <__assert_fail@plt+0x18e0>
   1279c:	movw	r1, #26651	; 0x681b
   127a0:	movt	r1, #1
   127a4:	add	r2, r5, #8
   127a8:	str	r2, [sp]
   127ac:	stmib	sp, {r0, r1, r6}
   127b0:	str	r4, [sp, #16]
   127b4:	str	r1, [sp, #20]
   127b8:	mvn	r0, #0
   127bc:	mov	r1, r7
   127c0:	mov	r2, #32
   127c4:	mov	r3, #32
   127c8:	bl	1291c <__assert_fail@plt+0x155c>
   127cc:	mov	r0, r4
   127d0:	bl	13254 <__assert_fail@plt+0x1e94>
   127d4:	sub	sp, fp, #16
   127d8:	pop	{r4, r5, r6, r7, fp, pc}
   127dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127e0:	add	fp, sp, #28
   127e4:	sub	sp, sp, #36	; 0x24
   127e8:	mov	r5, r0
   127ec:	bl	12d14 <__assert_fail@plt+0x1954>
   127f0:	mov	sl, r0
   127f4:	ldr	r0, [r5, #4]
   127f8:	str	r0, [sp]
   127fc:	add	r0, sp, #24
   12800:	movw	r3, #26876	; 0x68fc
   12804:	movt	r3, #1
   12808:	mov	r1, #1
   1280c:	mov	r2, #12
   12810:	bl	112d0 <__sprintf_chk@plt>
   12814:	add	r4, r5, #332	; 0x14c
   12818:	movw	r9, #33236	; 0x81d4
   1281c:	movt	r9, #2
   12820:	ldr	r0, [r9]
   12824:	cmp	r0, #0
   12828:	bne	12870 <__assert_fail@plt+0x14b0>
   1282c:	movw	r1, #27066	; 0x69ba
   12830:	movt	r1, #1
   12834:	mov	r0, #0
   12838:	mov	r2, #5
   1283c:	bl	11168 <dcgettext@plt>
   12840:	bl	112ac <strlen@plt>
   12844:	mov	r7, r0
   12848:	movw	r1, #27072	; 0x69c0
   1284c:	movt	r1, #1
   12850:	mov	r0, #0
   12854:	mov	r2, #5
   12858:	bl	11168 <dcgettext@plt>
   1285c:	bl	112ac <strlen@plt>
   12860:	add	r0, r7, r0
   12864:	add	r0, r0, #14
   12868:	bl	156f0 <__assert_fail@plt+0x4330>
   1286c:	str	r0, [r9]
   12870:	ldr	r7, [r9]
   12874:	movw	r1, #27066	; 0x69ba
   12878:	movt	r1, #1
   1287c:	mov	r0, #0
   12880:	mov	r2, #5
   12884:	bl	11168 <dcgettext@plt>
   12888:	mov	r6, r0
   1288c:	ldrsh	r8, [r4]
   12890:	movw	r1, #27072	; 0x69c0
   12894:	movt	r1, #1
   12898:	mov	r0, #0
   1289c:	mov	r2, #5
   128a0:	bl	11168 <dcgettext@plt>
   128a4:	ldrsh	r1, [r4, #2]
   128a8:	stm	sp, {r6, r8}
   128ac:	str	r0, [sp, #8]
   128b0:	str	r1, [sp, #12]
   128b4:	movw	r3, #27078	; 0x69c6
   128b8:	movt	r3, #1
   128bc:	mov	r0, r7
   128c0:	mov	r1, #1
   128c4:	mvn	r2, #0
   128c8:	bl	112d0 <__sprintf_chk@plt>
   128cc:	mov	r0, r5
   128d0:	bl	12ca0 <__assert_fail@plt+0x18e0>
   128d4:	ldr	r2, [r9]
   128d8:	movw	r1, #26651	; 0x681b
   128dc:	movt	r1, #1
   128e0:	add	r3, r5, #8
   128e4:	str	r3, [sp]
   128e8:	stmib	sp, {r0, r1}
   128ec:	add	r0, sp, #24
   128f0:	str	r0, [sp, #12]
   128f4:	str	sl, [sp, #16]
   128f8:	str	r2, [sp, #20]
   128fc:	mvn	r0, #0
   12900:	mov	r2, #32
   12904:	mov	r3, #32
   12908:	bl	1291c <__assert_fail@plt+0x155c>
   1290c:	mov	r0, sl
   12910:	bl	13254 <__assert_fail@plt+0x1e94>
   12914:	sub	sp, fp, #28
   12918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1291c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12920:	add	fp, sp, #28
   12924:	sub	sp, sp, #68	; 0x44
   12928:	mov	r4, r3
   1292c:	mov	r6, r1
   12930:	mov	r7, r0
   12934:	movw	r9, #33048	; 0x8118
   12938:	movt	r9, #2
   1293c:	strb	r2, [r9, #1]
   12940:	movw	r0, #33164	; 0x818c
   12944:	movt	r0, #2
   12948:	ldrb	r0, [r0]
   1294c:	cmp	r0, #1
   12950:	movw	r5, #33169	; 0x8191
   12954:	movt	r5, #2
   12958:	bne	1299c <__assert_fail@plt+0x15dc>
   1295c:	ldrb	r0, [r5]
   12960:	cmp	r0, #0
   12964:	bne	1299c <__assert_fail@plt+0x15dc>
   12968:	ldr	r8, [fp, #16]
   1296c:	mov	r0, r8
   12970:	bl	112ac <strlen@plt>
   12974:	cmp	r0, #6
   12978:	bhi	1299c <__assert_fail@plt+0x15dc>
   1297c:	str	r8, [sp]
   12980:	sub	r0, fp, #40	; 0x28
   12984:	movw	r3, #26819	; 0x68c3
   12988:	movt	r3, #1
   1298c:	mov	r1, #1
   12990:	mov	r2, #8
   12994:	bl	112d0 <__sprintf_chk@plt>
   12998:	b	129a4 <__assert_fail@plt+0x15e4>
   1299c:	mov	r0, #0
   129a0:	strb	r0, [fp, #-40]	; 0xffffffd8
   129a4:	ldrb	r0, [r5]
   129a8:	cmp	r0, #0
   129ac:	bne	129e8 <__assert_fail@plt+0x1628>
   129b0:	ldr	r8, [fp, #20]
   129b4:	mov	r0, r8
   129b8:	bl	112ac <strlen@plt>
   129bc:	cmp	r0, #11
   129c0:	bhi	129e8 <__assert_fail@plt+0x1628>
   129c4:	mov	r5, r7
   129c8:	str	r8, [sp]
   129cc:	add	r0, sp, #43	; 0x2b
   129d0:	movw	r3, #26825	; 0x68c9
   129d4:	movt	r3, #1
   129d8:	mov	r1, #1
   129dc:	mov	r2, #13
   129e0:	bl	112d0 <__sprintf_chk@plt>
   129e4:	b	129f4 <__assert_fail@plt+0x1634>
   129e8:	mov	r5, r7
   129ec:	mov	r0, #0
   129f0:	strb	r0, [sp, #43]	; 0x2b
   129f4:	ldr	r8, [fp, #28]
   129f8:	movw	sl, #33165	; 0x818d
   129fc:	movt	sl, #2
   12a00:	ldrb	r1, [sl]
   12a04:	mov	r0, #1
   12a08:	cmp	r1, #1
   12a0c:	bne	12a28 <__assert_fail@plt+0x1668>
   12a10:	mov	r0, r8
   12a14:	bl	112ac <strlen@plt>
   12a18:	mov	r1, r0
   12a1c:	add	r0, r0, #2
   12a20:	cmp	r1, #12
   12a24:	movwcc	r0, #14
   12a28:	bl	156f0 <__assert_fail@plt+0x4330>
   12a2c:	mov	r7, r0
   12a30:	ldrb	r0, [sl]
   12a34:	cmp	r0, #1
   12a38:	bne	12a5c <__assert_fail@plt+0x169c>
   12a3c:	str	r8, [sp]
   12a40:	movw	r3, #26831	; 0x68cf
   12a44:	movt	r3, #1
   12a48:	mov	r0, r7
   12a4c:	mov	r1, #1
   12a50:	mvn	r2, #0
   12a54:	bl	112d0 <__sprintf_chk@plt>
   12a58:	b	12a64 <__assert_fail@plt+0x16a4>
   12a5c:	mov	r0, #0
   12a60:	strb	r0, [r7]
   12a64:	mov	r3, r5
   12a68:	mov	r2, r4
   12a6c:	movw	r0, #33163	; 0x818b
   12a70:	movt	r0, #2
   12a74:	ldrb	r0, [r0]
   12a78:	movw	r1, #33176	; 0x8198
   12a7c:	movt	r1, #2
   12a80:	ldr	r1, [r1]
   12a84:	ldr	r5, [fp, #24]
   12a88:	str	r5, [sp, #32]
   12a8c:	str	r7, [sp, #36]	; 0x24
   12a90:	add	ip, sp, #43	; 0x2b
   12a94:	sub	r5, fp, #40	; 0x28
   12a98:	movw	r4, #26871	; 0x68f7
   12a9c:	movt	r4, #1
   12aa0:	cmp	r6, #0
   12aa4:	movne	r4, r6
   12aa8:	movw	r6, #26651	; 0x681b
   12aac:	movt	r6, #1
   12ab0:	cmp	r0, #0
   12ab4:	movne	r6, r9
   12ab8:	stm	sp, {r4, r6}
   12abc:	str	r2, [sp, #8]
   12ac0:	ldr	r0, [fp, #8]
   12ac4:	str	r0, [sp, #12]
   12ac8:	str	r1, [sp, #16]
   12acc:	ldr	r0, [fp, #12]
   12ad0:	add	r1, sp, #20
   12ad4:	stm	r1, {r0, r5, ip}
   12ad8:	sub	r0, fp, #32
   12adc:	movw	r2, #26838	; 0x68d6
   12ae0:	movt	r2, #1
   12ae4:	mov	r1, #1
   12ae8:	bl	11204 <__asprintf_chk@plt>
   12aec:	cmn	r0, #1
   12af0:	beq	12b40 <__assert_fail@plt+0x1780>
   12af4:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12af8:	mov	r0, r4
   12afc:	bl	112ac <strlen@plt>
   12b00:	add	r0, r0, r4
   12b04:	add	r0, r0, #1
   12b08:	ldrb	r1, [r0, #-2]
   12b0c:	sub	r0, r0, #1
   12b10:	cmp	r1, #32
   12b14:	beq	12b08 <__assert_fail@plt+0x1748>
   12b18:	mov	r1, #0
   12b1c:	strb	r1, [r0]
   12b20:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b24:	bl	11210 <puts@plt>
   12b28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12b2c:	bl	13254 <__assert_fail@plt+0x1e94>
   12b30:	mov	r0, r7
   12b34:	bl	13254 <__assert_fail@plt+0x1e94>
   12b38:	sub	sp, fp, #28
   12b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b40:	bl	15a78 <__assert_fail@plt+0x46b8>
   12b44:	cmp	r2, #1
   12b48:	blt	12b6c <__assert_fail@plt+0x17ac>
   12b4c:	add	r2, r1, r2
   12b50:	ldrb	r3, [r1]
   12b54:	cmp	r3, #0
   12b58:	beq	12b6c <__assert_fail@plt+0x17ac>
   12b5c:	strb	r3, [r0], #1
   12b60:	add	r1, r1, #1
   12b64:	cmp	r1, r2
   12b68:	bcc	12b50 <__assert_fail@plt+0x1790>
   12b6c:	mov	r1, #0
   12b70:	strb	r1, [r0]
   12b74:	bx	lr
   12b78:	ldrb	r0, [r0, #16]
   12b7c:	ubfx	r0, r0, #4, #1
   12b80:	bx	lr
   12b84:	push	{r4, r5, r6, sl, fp, lr}
   12b88:	add	fp, sp, #16
   12b8c:	sub	sp, sp, #8
   12b90:	mov	r5, r1
   12b94:	mov	r4, r0
   12b98:	movw	r6, #33052	; 0x811c
   12b9c:	movt	r6, #2
   12ba0:	ldr	r0, [r6]
   12ba4:	cmp	r0, #-2147483648	; 0x80000000
   12ba8:	bne	12bb8 <__assert_fail@plt+0x17f8>
   12bac:	movw	r0, #33052	; 0x811c
   12bb0:	movt	r0, #2
   12bb4:	bl	11150 <time@plt>
   12bb8:	cmp	r5, r4
   12bbc:	bge	12bf4 <__assert_fail@plt+0x1834>
   12bc0:	ldr	r0, [r6]
   12bc4:	cmp	r0, r4
   12bc8:	blt	12bf4 <__assert_fail@plt+0x1834>
   12bcc:	sub	r1, r0, #4480	; 0x1180
   12bd0:	sub	r1, r1, #81920	; 0x14000
   12bd4:	cmp	r1, r4
   12bd8:	bge	12bf4 <__assert_fail@plt+0x1834>
   12bdc:	sub	r0, r0, r4
   12be0:	cmp	r0, #60	; 0x3c
   12be4:	bge	12c10 <__assert_fail@plt+0x1850>
   12be8:	movw	r4, #26902	; 0x6916
   12bec:	movt	r4, #1
   12bf0:	b	12c74 <__assert_fail@plt+0x18b4>
   12bf4:	movw	r1, #26998	; 0x6976
   12bf8:	movt	r1, #1
   12bfc:	mov	r0, #0
   12c00:	mov	r2, #5
   12c04:	sub	sp, fp, #16
   12c08:	pop	{r4, r5, r6, sl, fp, lr}
   12c0c:	b	11168 <dcgettext@plt>
   12c10:	movw	r1, #20864	; 0x5180
   12c14:	movt	r1, #1
   12c18:	cmp	r0, r1
   12c1c:	bge	12c80 <__assert_fail@plt+0x18c0>
   12c20:	movw	r1, #46021	; 0xb3c5
   12c24:	movt	r1, #37282	; 0x91a2
   12c28:	umull	r1, r2, r0, r1
   12c2c:	lsr	r1, r2, #11
   12c30:	mov	r2, #3600	; 0xe10
   12c34:	mls	r0, r1, r2, r0
   12c38:	uxth	r0, r0
   12c3c:	movw	r2, #34953	; 0x8889
   12c40:	movt	r2, #34952	; 0x8888
   12c44:	umull	r0, r2, r0, r2
   12c48:	lsr	r0, r2, #5
   12c4c:	str	r1, [sp]
   12c50:	str	r0, [sp, #4]
   12c54:	movw	r4, #33188	; 0x81a4
   12c58:	movt	r4, #2
   12c5c:	movw	r3, #26988	; 0x696c
   12c60:	movt	r3, #1
   12c64:	mov	r0, r4
   12c68:	mov	r1, #1
   12c6c:	mov	r2, #6
   12c70:	bl	112d0 <__sprintf_chk@plt>
   12c74:	mov	r0, r4
   12c78:	sub	sp, fp, #16
   12c7c:	pop	{r4, r5, r6, sl, fp, pc}
   12c80:	movw	r0, #26908	; 0x691c
   12c84:	movt	r0, #1
   12c88:	movw	r1, #26938	; 0x693a
   12c8c:	movt	r1, #1
   12c90:	movw	r3, #26948	; 0x6944
   12c94:	movt	r3, #1
   12c98:	mov	r2, #205	; 0xcd
   12c9c:	bl	113c0 <__assert_fail@plt>
   12ca0:	push	{r4, sl, fp, lr}
   12ca4:	add	fp, sp, #8
   12ca8:	sub	sp, sp, #8
   12cac:	ldr	r0, [r0, #340]	; 0x154
   12cb0:	str	r0, [sp, #4]
   12cb4:	add	r0, sp, #4
   12cb8:	bl	1124c <localtime@plt>
   12cbc:	cmp	r0, #0
   12cc0:	beq	12cec <__assert_fail@plt+0x192c>
   12cc4:	mov	r3, r0
   12cc8:	movw	r0, #33172	; 0x8194
   12ccc:	movt	r0, #2
   12cd0:	ldr	r2, [r0]
   12cd4:	movw	r4, #33194	; 0x81aa
   12cd8:	movt	r4, #2
   12cdc:	mov	r0, r4
   12ce0:	mov	r1, #33	; 0x21
   12ce4:	bl	11234 <strftime@plt>
   12ce8:	b	12cf8 <__assert_fail@plt+0x1938>
   12cec:	ldr	r0, [sp, #4]
   12cf0:	bl	12d04 <__assert_fail@plt+0x1944>
   12cf4:	mov	r4, r0
   12cf8:	mov	r0, r4
   12cfc:	sub	sp, fp, #8
   12d00:	pop	{r4, sl, fp, pc}
   12d04:	asr	r1, r0, #31
   12d08:	movw	r2, #33194	; 0x81aa
   12d0c:	movt	r2, #2
   12d10:	b	132e8 <__assert_fail@plt+0x1f28>
   12d14:	push	{r4, r5, r6, sl, fp, lr}
   12d18:	add	fp, sp, #16
   12d1c:	mov	r4, r0
   12d20:	movw	r5, #27056	; 0x69b0
   12d24:	movt	r5, #1
   12d28:	mov	r0, #0
   12d2c:	mov	r1, r5
   12d30:	mov	r2, #5
   12d34:	bl	11168 <dcgettext@plt>
   12d38:	bl	112ac <strlen@plt>
   12d3c:	add	r0, r0, #5
   12d40:	bl	156f0 <__assert_fail@plt+0x4330>
   12d44:	mov	r6, r0
   12d48:	mov	r0, #0
   12d4c:	mov	r1, r5
   12d50:	mov	r2, #5
   12d54:	bl	11168 <dcgettext@plt>
   12d58:	mov	r1, r0
   12d5c:	mov	r0, r6
   12d60:	bl	1115c <stpcpy@plt>
   12d64:	add	r1, r4, #40	; 0x28
   12d68:	mov	r2, #4
   12d6c:	bl	12b44 <__assert_fail@plt+0x1784>
   12d70:	mov	r0, r6
   12d74:	pop	{r4, r5, r6, sl, fp, pc}
   12d78:	mov	r1, r0
   12d7c:	sub	r2, r0, #65	; 0x41
   12d80:	mov	r0, #1
   12d84:	cmp	r2, #26
   12d88:	subcs	r2, r1, #97	; 0x61
   12d8c:	cmpcs	r2, #26
   12d90:	bcs	12d98 <__assert_fail@plt+0x19d8>
   12d94:	bx	lr
   12d98:	sub	r1, r1, #48	; 0x30
   12d9c:	cmp	r1, #10
   12da0:	movcs	r0, #0
   12da4:	bx	lr
   12da8:	mov	r1, r0
   12dac:	sub	r2, r0, #65	; 0x41
   12db0:	mov	r0, #1
   12db4:	cmp	r2, #26
   12db8:	subcs	r1, r1, #97	; 0x61
   12dbc:	cmpcs	r1, #26
   12dc0:	movcs	r0, #0
   12dc4:	bx	lr
   12dc8:	mov	r1, #0
   12dcc:	cmp	r0, #128	; 0x80
   12dd0:	movwcc	r1, #1
   12dd4:	mov	r0, r1
   12dd8:	bx	lr
   12ddc:	sub	r1, r0, #9
   12de0:	clz	r1, r1
   12de4:	lsr	r1, r1, #5
   12de8:	sub	r0, r0, #32
   12dec:	clz	r0, r0
   12df0:	lsr	r0, r0, #5
   12df4:	orr	r0, r0, r1
   12df8:	bx	lr
   12dfc:	mov	r1, r0
   12e00:	mov	r0, #1
   12e04:	cmp	r1, #32
   12e08:	bxcc	lr
   12e0c:	cmp	r1, #127	; 0x7f
   12e10:	movne	r0, #0
   12e14:	bx	lr
   12e18:	sub	r1, r0, #48	; 0x30
   12e1c:	mov	r0, #0
   12e20:	cmp	r1, #10
   12e24:	movwcc	r0, #1
   12e28:	bx	lr
   12e2c:	sub	r1, r0, #33	; 0x21
   12e30:	mov	r0, #0
   12e34:	cmp	r1, #94	; 0x5e
   12e38:	movwcc	r0, #1
   12e3c:	bx	lr
   12e40:	sub	r1, r0, #97	; 0x61
   12e44:	mov	r0, #0
   12e48:	cmp	r1, #26
   12e4c:	movwcc	r0, #1
   12e50:	bx	lr
   12e54:	sub	r1, r0, #32
   12e58:	mov	r0, #0
   12e5c:	cmp	r1, #95	; 0x5f
   12e60:	movwcc	r0, #1
   12e64:	bx	lr
   12e68:	sub	r1, r0, #33	; 0x21
   12e6c:	cmp	r1, #93	; 0x5d
   12e70:	bhi	12ffc <__assert_fail@plt+0x1c3c>
   12e74:	mov	r0, #1
   12e78:	add	r2, pc, #0
   12e7c:	ldr	pc, [r2, r1, lsl #2]
   12e80:	strdeq	r2, [r1], -r8
   12e84:	strdeq	r2, [r1], -r8
   12e88:	strdeq	r2, [r1], -r8
   12e8c:	strdeq	r2, [r1], -r8
   12e90:	strdeq	r2, [r1], -r8
   12e94:	strdeq	r2, [r1], -r8
   12e98:	strdeq	r2, [r1], -r8
   12e9c:	strdeq	r2, [r1], -r8
   12ea0:	strdeq	r2, [r1], -r8
   12ea4:	strdeq	r2, [r1], -r8
   12ea8:	strdeq	r2, [r1], -r8
   12eac:	strdeq	r2, [r1], -r8
   12eb0:	strdeq	r2, [r1], -r8
   12eb4:	strdeq	r2, [r1], -r8
   12eb8:	strdeq	r2, [r1], -r8
   12ebc:	strdeq	r2, [r1], -ip
   12ec0:	strdeq	r2, [r1], -ip
   12ec4:	strdeq	r2, [r1], -ip
   12ec8:	strdeq	r2, [r1], -ip
   12ecc:	strdeq	r2, [r1], -ip
   12ed0:	strdeq	r2, [r1], -ip
   12ed4:	strdeq	r2, [r1], -ip
   12ed8:	strdeq	r2, [r1], -ip
   12edc:	strdeq	r2, [r1], -ip
   12ee0:	strdeq	r2, [r1], -ip
   12ee4:	strdeq	r2, [r1], -r8
   12ee8:	strdeq	r2, [r1], -r8
   12eec:	strdeq	r2, [r1], -r8
   12ef0:	strdeq	r2, [r1], -r8
   12ef4:	strdeq	r2, [r1], -r8
   12ef8:	strdeq	r2, [r1], -r8
   12efc:	strdeq	r2, [r1], -r8
   12f00:	strdeq	r2, [r1], -ip
   12f04:	strdeq	r2, [r1], -ip
   12f08:	strdeq	r2, [r1], -ip
   12f0c:	strdeq	r2, [r1], -ip
   12f10:	strdeq	r2, [r1], -ip
   12f14:	strdeq	r2, [r1], -ip
   12f18:	strdeq	r2, [r1], -ip
   12f1c:	strdeq	r2, [r1], -ip
   12f20:	strdeq	r2, [r1], -ip
   12f24:	strdeq	r2, [r1], -ip
   12f28:	strdeq	r2, [r1], -ip
   12f2c:	strdeq	r2, [r1], -ip
   12f30:	strdeq	r2, [r1], -ip
   12f34:	strdeq	r2, [r1], -ip
   12f38:	strdeq	r2, [r1], -ip
   12f3c:	strdeq	r2, [r1], -ip
   12f40:	strdeq	r2, [r1], -ip
   12f44:	strdeq	r2, [r1], -ip
   12f48:	strdeq	r2, [r1], -ip
   12f4c:	strdeq	r2, [r1], -ip
   12f50:	strdeq	r2, [r1], -ip
   12f54:	strdeq	r2, [r1], -ip
   12f58:	strdeq	r2, [r1], -ip
   12f5c:	strdeq	r2, [r1], -ip
   12f60:	strdeq	r2, [r1], -ip
   12f64:	strdeq	r2, [r1], -ip
   12f68:	strdeq	r2, [r1], -r8
   12f6c:	strdeq	r2, [r1], -r8
   12f70:	strdeq	r2, [r1], -r8
   12f74:	strdeq	r2, [r1], -r8
   12f78:	strdeq	r2, [r1], -r8
   12f7c:	strdeq	r2, [r1], -r8
   12f80:	strdeq	r2, [r1], -ip
   12f84:	strdeq	r2, [r1], -ip
   12f88:	strdeq	r2, [r1], -ip
   12f8c:	strdeq	r2, [r1], -ip
   12f90:	strdeq	r2, [r1], -ip
   12f94:	strdeq	r2, [r1], -ip
   12f98:	strdeq	r2, [r1], -ip
   12f9c:	strdeq	r2, [r1], -ip
   12fa0:	strdeq	r2, [r1], -ip
   12fa4:	strdeq	r2, [r1], -ip
   12fa8:	strdeq	r2, [r1], -ip
   12fac:	strdeq	r2, [r1], -ip
   12fb0:	strdeq	r2, [r1], -ip
   12fb4:	strdeq	r2, [r1], -ip
   12fb8:	strdeq	r2, [r1], -ip
   12fbc:	strdeq	r2, [r1], -ip
   12fc0:	strdeq	r2, [r1], -ip
   12fc4:	strdeq	r2, [r1], -ip
   12fc8:	strdeq	r2, [r1], -ip
   12fcc:	strdeq	r2, [r1], -ip
   12fd0:	strdeq	r2, [r1], -ip
   12fd4:	strdeq	r2, [r1], -ip
   12fd8:	strdeq	r2, [r1], -ip
   12fdc:	strdeq	r2, [r1], -ip
   12fe0:	strdeq	r2, [r1], -ip
   12fe4:	strdeq	r2, [r1], -ip
   12fe8:	strdeq	r2, [r1], -r8
   12fec:	strdeq	r2, [r1], -r8
   12ff0:	strdeq	r2, [r1], -r8
   12ff4:	strdeq	r2, [r1], -r8
   12ff8:	bx	lr
   12ffc:	mov	r0, #0
   13000:	bx	lr
   13004:	sub	r0, r0, #9
   13008:	cmp	r0, #23
   1300c:	movhi	r0, #0
   13010:	bxhi	lr
   13014:	bic	r0, r0, #-16777216	; 0xff000000
   13018:	movw	r1, #31
   1301c:	movt	r1, #128	; 0x80
   13020:	mov	r2, #1
   13024:	and	r0, r2, r1, lsr r0
   13028:	bx	lr
   1302c:	sub	r1, r0, #65	; 0x41
   13030:	mov	r0, #0
   13034:	cmp	r1, #26
   13038:	movwcc	r0, #1
   1303c:	bx	lr
   13040:	mov	r1, r0
   13044:	sub	r2, r0, #48	; 0x30
   13048:	mov	r0, #1
   1304c:	cmp	r2, #22
   13050:	bhi	13068 <__assert_fail@plt+0x1ca8>
   13054:	mov	ip, #1
   13058:	movw	r3, #1023	; 0x3ff
   1305c:	movt	r3, #126	; 0x7e
   13060:	tst	r3, ip, lsl r2
   13064:	bxne	lr
   13068:	sub	r1, r1, #97	; 0x61
   1306c:	cmp	r1, #6
   13070:	movcs	r0, #0
   13074:	bxcs	lr
   13078:	bx	lr
   1307c:	sub	r1, r0, #65	; 0x41
   13080:	cmp	r1, #26
   13084:	addcc	r0, r0, #32
   13088:	bx	lr
   1308c:	sub	r1, r0, #97	; 0x61
   13090:	cmp	r1, #26
   13094:	subcc	r0, r0, #32
   13098:	bx	lr
   1309c:	movw	r1, #33240	; 0x81d8
   130a0:	movt	r1, #2
   130a4:	b	130a8 <__assert_fail@plt+0x1ce8>
   130a8:	push	{r4, r5, r6, sl, fp, lr}
   130ac:	add	fp, sp, #16
   130b0:	sub	sp, sp, #8
   130b4:	mov	r5, r1
   130b8:	mov	r6, r0
   130bc:	movw	r2, #33244	; 0x81dc
   130c0:	movt	r2, #2
   130c4:	mov	r0, #2
   130c8:	str	r0, [r2]
   130cc:	mov	r4, #0
   130d0:	str	r4, [sp, #4]
   130d4:	add	r3, sp, #4
   130d8:	mov	r0, r6
   130dc:	mov	r1, #0
   130e0:	bl	11378 <getaddrinfo@plt>
   130e4:	cmp	r0, #0
   130e8:	beq	130f8 <__assert_fail@plt+0x1d38>
   130ec:	cmp	r5, #0
   130f0:	strne	r0, [r5]
   130f4:	b	13130 <__assert_fail@plt+0x1d70>
   130f8:	ldr	r0, [sp, #4]
   130fc:	ldr	r0, [r0, #24]
   13100:	cmp	r0, #0
   13104:	movne	r6, r0
   13108:	mov	r0, r6
   1310c:	bl	11174 <strdup@plt>
   13110:	mov	r4, r0
   13114:	cmp	r5, #0
   13118:	beq	13128 <__assert_fail@plt+0x1d68>
   1311c:	cmp	r4, #0
   13120:	mvneq	r0, #9
   13124:	streq	r0, [r5]
   13128:	ldr	r0, [sp, #4]
   1312c:	bl	1136c <freeaddrinfo@plt>
   13130:	mov	r0, r4
   13134:	sub	sp, fp, #16
   13138:	pop	{r4, r5, r6, sl, fp, pc}
   1313c:	movw	r0, #33240	; 0x81d8
   13140:	movt	r0, #2
   13144:	ldr	r0, [r0]
   13148:	b	11120 <gai_strerror@plt>
   1314c:	movw	r1, #33276	; 0x81fc
   13150:	movt	r1, #2
   13154:	str	r0, [r1]
   13158:	bx	lr
   1315c:	movw	r1, #33280	; 0x8200
   13160:	movt	r1, #2
   13164:	strb	r0, [r1]
   13168:	bx	lr
   1316c:	push	{r4, r5, r6, sl, fp, lr}
   13170:	add	fp, sp, #16
   13174:	sub	sp, sp, #8
   13178:	movw	r0, #33148	; 0x817c
   1317c:	movt	r0, #2
   13180:	ldr	r0, [r0]
   13184:	bl	15b94 <__assert_fail@plt+0x47d4>
   13188:	cmp	r0, #0
   1318c:	beq	131b4 <__assert_fail@plt+0x1df4>
   13190:	movw	r0, #33280	; 0x8200
   13194:	movt	r0, #2
   13198:	ldrb	r0, [r0]
   1319c:	cmp	r0, #0
   131a0:	beq	131d4 <__assert_fail@plt+0x1e14>
   131a4:	bl	112c4 <__errno_location@plt>
   131a8:	ldr	r0, [r0]
   131ac:	cmp	r0, #32
   131b0:	bne	131d4 <__assert_fail@plt+0x1e14>
   131b4:	movw	r0, #33144	; 0x8178
   131b8:	movt	r0, #2
   131bc:	ldr	r0, [r0]
   131c0:	bl	15b94 <__assert_fail@plt+0x47d4>
   131c4:	cmp	r0, #0
   131c8:	subeq	sp, fp, #16
   131cc:	popeq	{r4, r5, r6, sl, fp, pc}
   131d0:	b	13244 <__assert_fail@plt+0x1e84>
   131d4:	movw	r1, #27447	; 0x6b37
   131d8:	movt	r1, #1
   131dc:	mov	r0, #0
   131e0:	mov	r2, #5
   131e4:	bl	11168 <dcgettext@plt>
   131e8:	mov	r4, r0
   131ec:	movw	r0, #33276	; 0x81fc
   131f0:	movt	r0, #2
   131f4:	ldr	r6, [r0]
   131f8:	bl	112c4 <__errno_location@plt>
   131fc:	ldr	r5, [r0]
   13200:	cmp	r6, #0
   13204:	bne	13220 <__assert_fail@plt+0x1e60>
   13208:	movw	r2, #27463	; 0x6b47
   1320c:	movt	r2, #1
   13210:	mov	r0, #0
   13214:	mov	r1, r5
   13218:	mov	r3, r4
   1321c:	b	13240 <__assert_fail@plt+0x1e80>
   13220:	mov	r0, r6
   13224:	bl	14a4c <__assert_fail@plt+0x368c>
   13228:	mov	r3, r0
   1322c:	str	r4, [sp]
   13230:	movw	r2, #27459	; 0x6b43
   13234:	movt	r2, #1
   13238:	mov	r0, #0
   1323c:	mov	r1, r5
   13240:	bl	111f8 <error@plt>
   13244:	movw	r0, #33060	; 0x8124
   13248:	movt	r0, #2
   1324c:	ldr	r0, [r0]
   13250:	bl	1112c <_exit@plt>
   13254:	push	{r4, r5, r6, sl, fp, lr}
   13258:	add	fp, sp, #16
   1325c:	mov	r4, r0
   13260:	bl	112c4 <__errno_location@plt>
   13264:	mov	r5, r0
   13268:	ldr	r6, [r0]
   1326c:	mov	r0, r4
   13270:	bl	11114 <free@plt>
   13274:	str	r6, [r5]
   13278:	pop	{r4, r5, r6, sl, fp, pc}
   1327c:	push	{r4, sl, fp, lr}
   13280:	add	fp, sp, #8
   13284:	sub	sp, sp, #264	; 0x108
   13288:	add	r1, sp, #7
   1328c:	movw	r2, #257	; 0x101
   13290:	bl	15184 <__assert_fail@plt+0x3dc4>
   13294:	mov	r4, #0
   13298:	cmp	r0, #0
   1329c:	bne	132dc <__assert_fail@plt+0x1f1c>
   132a0:	add	r0, sp, #7
   132a4:	movw	r1, #27466	; 0x6b4a
   132a8:	movt	r1, #1
   132ac:	mov	r2, #2
   132b0:	bl	11294 <bcmp@plt>
   132b4:	cmp	r0, #0
   132b8:	beq	132dc <__assert_fail@plt+0x1f1c>
   132bc:	add	r0, sp, #7
   132c0:	movw	r1, #27468	; 0x6b4c
   132c4:	movt	r1, #1
   132c8:	mov	r2, #6
   132cc:	bl	11294 <bcmp@plt>
   132d0:	mov	r4, r0
   132d4:	cmp	r0, #0
   132d8:	movwne	r4, #1
   132dc:	mov	r0, r4
   132e0:	sub	sp, fp, #8
   132e4:	pop	{r4, sl, fp, pc}
   132e8:	push	{r4, r5, r6, sl, fp, lr}
   132ec:	add	fp, sp, #16
   132f0:	mov	r4, r1
   132f4:	mov	r5, r0
   132f8:	mov	r0, #0
   132fc:	strb	r0, [r2, #20]
   13300:	add	r6, r2, #19
   13304:	cmp	r1, #0
   13308:	bmi	13358 <__assert_fail@plt+0x1f98>
   1330c:	mov	r0, r5
   13310:	mov	r1, r4
   13314:	mov	r2, #10
   13318:	mov	r3, #0
   1331c:	bl	15ef0 <__assert_fail@plt+0x4b30>
   13320:	add	r2, r0, r0, lsl #2
   13324:	sub	r2, r5, r2, lsl #1
   13328:	add	r2, r2, #48	; 0x30
   1332c:	strb	r2, [r6], #-1
   13330:	adds	r2, r5, #9
   13334:	adc	r3, r4, #0
   13338:	rsbs	r2, r2, #18
   1333c:	rscs	r2, r3, #0
   13340:	mov	r5, r0
   13344:	mov	r4, r1
   13348:	bcc	1330c <__assert_fail@plt+0x1f4c>
   1334c:	add	r6, r6, #1
   13350:	mov	r0, r6
   13354:	pop	{r4, r5, r6, sl, fp, pc}
   13358:	mov	r0, r5
   1335c:	mov	r1, r4
   13360:	mov	r2, #10
   13364:	mov	r3, #0
   13368:	bl	15ef0 <__assert_fail@plt+0x4b30>
   1336c:	add	r2, r0, r0, lsl #2
   13370:	rsb	r2, r5, r2, lsl #1
   13374:	add	r2, r2, #48	; 0x30
   13378:	strb	r2, [r6], #-1
   1337c:	adds	r2, r5, #9
   13380:	adc	r3, r4, #0
   13384:	rsbs	r2, r2, #18
   13388:	rscs	r2, r3, #0
   1338c:	mov	r5, r0
   13390:	mov	r4, r1
   13394:	bcc	13358 <__assert_fail@plt+0x1f98>
   13398:	mov	r0, #45	; 0x2d
   1339c:	strb	r0, [r6]
   133a0:	mov	r0, r6
   133a4:	pop	{r4, r5, r6, sl, fp, pc}
   133a8:	push	{r4, r5, fp, lr}
   133ac:	add	fp, sp, #8
   133b0:	cmp	r0, #0
   133b4:	beq	13448 <__assert_fail@plt+0x2088>
   133b8:	mov	r4, r0
   133bc:	mov	r1, #47	; 0x2f
   133c0:	bl	11354 <strrchr@plt>
   133c4:	cmp	r0, #0
   133c8:	mov	r5, r4
   133cc:	addne	r5, r0, #1
   133d0:	sub	r0, r5, r4
   133d4:	cmp	r0, #7
   133d8:	blt	1342c <__assert_fail@plt+0x206c>
   133dc:	sub	r0, r5, #7
   133e0:	movw	r1, #27530	; 0x6b8a
   133e4:	movt	r1, #1
   133e8:	mov	r2, #7
   133ec:	bl	1139c <strncmp@plt>
   133f0:	cmp	r0, #0
   133f4:	bne	1342c <__assert_fail@plt+0x206c>
   133f8:	movw	r1, #27538	; 0x6b92
   133fc:	movt	r1, #1
   13400:	mov	r0, r5
   13404:	mov	r2, #3
   13408:	bl	1139c <strncmp@plt>
   1340c:	cmp	r0, #0
   13410:	beq	1341c <__assert_fail@plt+0x205c>
   13414:	mov	r4, r5
   13418:	b	1342c <__assert_fail@plt+0x206c>
   1341c:	add	r4, r5, #3
   13420:	movw	r0, #33128	; 0x8168
   13424:	movt	r0, #2
   13428:	str	r4, [r0]
   1342c:	movw	r0, #33132	; 0x816c
   13430:	movt	r0, #2
   13434:	str	r4, [r0]
   13438:	movw	r0, #33284	; 0x8204
   1343c:	movt	r0, #2
   13440:	str	r4, [r0]
   13444:	pop	{r4, r5, fp, pc}
   13448:	movw	r0, #33144	; 0x8178
   1344c:	movt	r0, #2
   13450:	ldr	r3, [r0]
   13454:	movw	r0, #27474	; 0x6b52
   13458:	movt	r0, #1
   1345c:	mov	r1, #55	; 0x37
   13460:	mov	r2, #1
   13464:	bl	111b0 <fwrite@plt>
   13468:	bl	113a8 <abort@plt>
   1346c:	push	{r4, r5, r6, sl, fp, lr}
   13470:	add	fp, sp, #16
   13474:	mov	r4, r0
   13478:	movw	r0, #33288	; 0x8208
   1347c:	movt	r0, #2
   13480:	cmp	r4, #0
   13484:	moveq	r4, r0
   13488:	bl	112c4 <__errno_location@plt>
   1348c:	mov	r5, r0
   13490:	ldr	r6, [r0]
   13494:	mov	r0, r4
   13498:	mov	r1, #48	; 0x30
   1349c:	bl	159d8 <__assert_fail@plt+0x4618>
   134a0:	str	r6, [r5]
   134a4:	pop	{r4, r5, r6, sl, fp, pc}
   134a8:	movw	r1, #33288	; 0x8208
   134ac:	movt	r1, #2
   134b0:	cmp	r0, #0
   134b4:	movne	r1, r0
   134b8:	ldr	r0, [r1]
   134bc:	bx	lr
   134c0:	movw	r2, #33288	; 0x8208
   134c4:	movt	r2, #2
   134c8:	cmp	r0, #0
   134cc:	movne	r2, r0
   134d0:	str	r1, [r2]
   134d4:	bx	lr
   134d8:	movw	r3, #33288	; 0x8208
   134dc:	movt	r3, #2
   134e0:	cmp	r0, #0
   134e4:	movne	r3, r0
   134e8:	ubfx	r0, r1, #5, #3
   134ec:	add	ip, r3, r0, lsl #2
   134f0:	ldr	r3, [ip, #8]
   134f4:	and	r1, r1, #31
   134f8:	mov	r0, #1
   134fc:	and	r0, r0, r3, lsr r1
   13500:	and	r2, r2, #1
   13504:	eor	r2, r0, r2
   13508:	eor	r1, r3, r2, lsl r1
   1350c:	str	r1, [ip, #8]
   13510:	bx	lr
   13514:	movw	r2, #33288	; 0x8208
   13518:	movt	r2, #2
   1351c:	cmp	r0, #0
   13520:	movne	r2, r0
   13524:	ldr	r0, [r2, #4]
   13528:	str	r1, [r2, #4]
   1352c:	bx	lr
   13530:	push	{fp, lr}
   13534:	mov	fp, sp
   13538:	movw	r3, #33288	; 0x8208
   1353c:	movt	r3, #2
   13540:	cmp	r0, #0
   13544:	movne	r3, r0
   13548:	mov	r0, #10
   1354c:	str	r0, [r3]
   13550:	cmp	r1, #0
   13554:	cmpne	r2, #0
   13558:	bne	13560 <__assert_fail@plt+0x21a0>
   1355c:	bl	113a8 <abort@plt>
   13560:	str	r1, [r3, #40]	; 0x28
   13564:	str	r2, [r3, #44]	; 0x2c
   13568:	pop	{fp, pc}
   1356c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13570:	add	fp, sp, #28
   13574:	sub	sp, sp, #20
   13578:	mov	r8, r3
   1357c:	mov	r9, r2
   13580:	mov	sl, r1
   13584:	mov	r7, r0
   13588:	ldr	r0, [fp, #8]
   1358c:	movw	r5, #33288	; 0x8208
   13590:	movt	r5, #2
   13594:	cmp	r0, #0
   13598:	movne	r5, r0
   1359c:	bl	112c4 <__errno_location@plt>
   135a0:	mov	r4, r0
   135a4:	ldm	r5, {r0, r1}
   135a8:	ldr	r2, [r5, #40]	; 0x28
   135ac:	ldr	r3, [r5, #44]	; 0x2c
   135b0:	ldr	r6, [r4]
   135b4:	add	r5, r5, #8
   135b8:	stm	sp, {r0, r1, r5}
   135bc:	str	r2, [sp, #12]
   135c0:	str	r3, [sp, #16]
   135c4:	mov	r0, r7
   135c8:	mov	r1, sl
   135cc:	mov	r2, r9
   135d0:	mov	r3, r8
   135d4:	bl	135e4 <__assert_fail@plt+0x2224>
   135d8:	str	r6, [r4]
   135dc:	sub	sp, fp, #28
   135e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135e8:	add	fp, sp, #28
   135ec:	sub	sp, sp, #156	; 0x9c
   135f0:	mov	r9, r3
   135f4:	mov	r7, r1
   135f8:	mov	r6, r0
   135fc:	str	r2, [fp, #-80]	; 0xffffffb0
   13600:	add	r0, r2, #1
   13604:	str	r0, [sp, #76]	; 0x4c
   13608:	ldr	r0, [fp, #12]
   1360c:	and	r1, r0, #1
   13610:	str	r1, [sp, #40]	; 0x28
   13614:	and	r1, r0, #4
   13618:	str	r1, [sp, #36]	; 0x24
   1361c:	ubfx	r4, r0, #1, #1
   13620:	bl	111c8 <__ctype_get_mb_cur_max@plt>
   13624:	str	r0, [sp, #44]	; 0x2c
   13628:	ldr	r0, [fp, #24]
   1362c:	str	r0, [sp, #88]	; 0x58
   13630:	ldr	r0, [fp, #20]
   13634:	str	r0, [sp, #80]	; 0x50
   13638:	ldr	r1, [fp, #8]
   1363c:	mov	r0, #0
   13640:	str	r0, [sp, #84]	; 0x54
   13644:	mov	r0, #0
   13648:	str	r0, [fp, #-84]	; 0xffffffac
   1364c:	mov	r0, #0
   13650:	str	r0, [fp, #-72]	; 0xffffffb8
   13654:	mov	r0, #0
   13658:	mov	r2, #0
   1365c:	str	r2, [fp, #-56]	; 0xffffffc8
   13660:	mov	r2, #0
   13664:	str	r2, [sp, #64]	; 0x40
   13668:	mov	r2, #1
   1366c:	str	r2, [fp, #-48]	; 0xffffffd0
   13670:	cmp	r1, #10
   13674:	bhi	145a0 <__assert_fail@plt+0x31e0>
   13678:	mov	sl, r7
   1367c:	mov	r7, r1
   13680:	add	r1, pc, #24
   13684:	mov	r8, #0
   13688:	mov	r2, #1
   1368c:	mov	r3, #0
   13690:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13694:	mov	lr, r9
   13698:	mov	r5, r6
   1369c:	ldr	pc, [r1, r7, lsl #2]
   136a0:	andeq	r3, r1, r4, ror r7
   136a4:			; <UNDEFINED> instruction: 0x000137b4
   136a8:	andeq	r3, r1, r4, lsl #15
   136ac:	andeq	r3, r1, ip, ror #14
   136b0:	andeq	r3, r1, r8, lsr #15
   136b4:	andeq	r3, r1, r8, lsl #16
   136b8:	muleq	r1, r4, r7
   136bc:	andeq	r3, r1, r4, ror #16
   136c0:	andeq	r3, r1, ip, asr #13
   136c4:	andeq	r3, r1, ip, asr #13
   136c8:	strdeq	r3, [r1], -r8
   136cc:	movw	r0, #27620	; 0x6be4
   136d0:	movt	r0, #1
   136d4:	mov	r1, r7
   136d8:	bl	14ba8 <__assert_fail@plt+0x37e8>
   136dc:	str	r0, [sp, #80]	; 0x50
   136e0:	movw	r0, #27622	; 0x6be6
   136e4:	movt	r0, #1
   136e8:	mov	r1, r7
   136ec:	bl	14ba8 <__assert_fail@plt+0x37e8>
   136f0:	mov	r5, r6
   136f4:	str	r0, [sp, #88]	; 0x58
   136f8:	mov	r8, #0
   136fc:	tst	r4, #1
   13700:	str	r7, [fp, #-64]	; 0xffffffc0
   13704:	bne	1373c <__assert_fail@plt+0x237c>
   13708:	ldr	r0, [sp, #80]	; 0x50
   1370c:	ldrb	r0, [r0]
   13710:	cmp	r0, #0
   13714:	beq	1373c <__assert_fail@plt+0x237c>
   13718:	ldr	r1, [sp, #80]	; 0x50
   1371c:	add	r1, r1, #1
   13720:	mov	r8, #0
   13724:	cmp	r8, sl
   13728:	strbcc	r0, [r5, r8]
   1372c:	ldrb	r0, [r1, r8]
   13730:	add	r8, r8, #1
   13734:	cmp	r0, #0
   13738:	bne	13724 <__assert_fail@plt+0x2364>
   1373c:	ldr	r7, [sp, #88]	; 0x58
   13740:	mov	r0, r7
   13744:	bl	112ac <strlen@plt>
   13748:	mov	r5, r6
   1374c:	str	r0, [fp, #-72]	; 0xffffffb8
   13750:	str	r7, [fp, #-84]	; 0xffffffac
   13754:	mov	r2, #1
   13758:	mov	r3, r4
   1375c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13760:	mov	lr, r9
   13764:	ldr	r7, [fp, #-64]	; 0xffffffc0
   13768:	b	13864 <__assert_fail@plt+0x24a4>
   1376c:	mov	r0, #1
   13770:	b	137b4 <__assert_fail@plt+0x23f4>
   13774:	mov	r7, #0
   13778:	mov	r8, #0
   1377c:	mov	r2, r0
   13780:	b	13860 <__assert_fail@plt+0x24a0>
   13784:	tst	r4, #1
   13788:	bne	137b4 <__assert_fail@plt+0x23f4>
   1378c:	mov	r2, r0
   13790:	b	137dc <__assert_fail@plt+0x241c>
   13794:	mov	r0, #1
   13798:	str	r0, [fp, #-72]	; 0xffffffb8
   1379c:	mov	r8, #0
   137a0:	mov	r7, #5
   137a4:	b	13820 <__assert_fail@plt+0x2460>
   137a8:	mov	r2, #1
   137ac:	tst	r4, #1
   137b0:	beq	137dc <__assert_fail@plt+0x241c>
   137b4:	mov	r1, #1
   137b8:	str	r1, [fp, #-72]	; 0xffffffb8
   137bc:	mov	r8, #0
   137c0:	mov	r7, #2
   137c4:	movw	r1, #27622	; 0x6be6
   137c8:	movt	r1, #1
   137cc:	str	r1, [fp, #-84]	; 0xffffffac
   137d0:	mov	r2, r0
   137d4:	mov	r3, #1
   137d8:	b	13864 <__assert_fail@plt+0x24a4>
   137dc:	mov	r8, #1
   137e0:	mov	r7, #2
   137e4:	cmp	sl, #0
   137e8:	movne	r0, #39	; 0x27
   137ec:	strbne	r0, [r5]
   137f0:	movw	r0, #27622	; 0x6be6
   137f4:	movt	r0, #1
   137f8:	str	r0, [fp, #-84]	; 0xffffffac
   137fc:	mov	r0, #1
   13800:	str	r0, [fp, #-72]	; 0xffffffb8
   13804:	b	13860 <__assert_fail@plt+0x24a0>
   13808:	mov	r7, #5
   1380c:	tst	r4, #1
   13810:	beq	13838 <__assert_fail@plt+0x2478>
   13814:	mov	r0, #1
   13818:	str	r0, [fp, #-72]	; 0xffffffb8
   1381c:	mov	r8, #0
   13820:	movw	r0, #27618	; 0x6be2
   13824:	movt	r0, #1
   13828:	str	r0, [fp, #-84]	; 0xffffffac
   1382c:	mov	r2, #1
   13830:	mov	r3, #1
   13834:	b	13864 <__assert_fail@plt+0x24a4>
   13838:	cmp	sl, #0
   1383c:	movne	r0, #34	; 0x22
   13840:	strbne	r0, [r5]
   13844:	mov	r8, #1
   13848:	movw	r0, #27618	; 0x6be2
   1384c:	movt	r0, #1
   13850:	str	r0, [fp, #-84]	; 0xffffffac
   13854:	mov	r0, #1
   13858:	str	r0, [fp, #-72]	; 0xffffffb8
   1385c:	mov	r2, #1
   13860:	mov	r3, #0
   13864:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13868:	cmp	r0, #0
   1386c:	movwne	r0, #1
   13870:	and	r1, r0, r3
   13874:	and	r1, r2, r1
   13878:	str	r1, [sp, #56]	; 0x38
   1387c:	sub	r1, r7, #2
   13880:	clz	r1, r1
   13884:	lsr	r1, r1, #5
   13888:	and	r1, r1, r3
   1388c:	str	r1, [sp, #68]	; 0x44
   13890:	str	r7, [fp, #-64]	; 0xffffffc0
   13894:	subs	r1, r7, #2
   13898:	movwne	r1, #1
   1389c:	eor	r4, r3, #1
   138a0:	str	r4, [fp, #-88]	; 0xffffffa8
   138a4:	orr	r4, r1, r4
   138a8:	str	r4, [sp, #72]	; 0x48
   138ac:	and	r1, r1, r2
   138b0:	and	r0, r0, r1
   138b4:	str	r0, [fp, #-60]	; 0xffffffc4
   138b8:	str	r3, [fp, #-76]	; 0xffffffb4
   138bc:	orr	r0, r1, r3
   138c0:	eor	r0, r0, #1
   138c4:	ldr	r1, [fp, #16]
   138c8:	clz	r1, r1
   138cc:	lsr	r1, r1, #5
   138d0:	orr	r0, r1, r0
   138d4:	str	r0, [fp, #-68]	; 0xffffffbc
   138d8:	str	r2, [sp, #92]	; 0x5c
   138dc:	eor	r0, r2, #1
   138e0:	str	r0, [sp, #60]	; 0x3c
   138e4:	mov	r7, #0
   138e8:	cmn	lr, #1
   138ec:	beq	138fc <__assert_fail@plt+0x253c>
   138f0:	cmp	r7, lr
   138f4:	bne	13908 <__assert_fail@plt+0x2548>
   138f8:	b	14414 <__assert_fail@plt+0x3054>
   138fc:	ldrb	r0, [ip, r7]
   13900:	cmp	r0, #0
   13904:	beq	14414 <__assert_fail@plt+0x3054>
   13908:	mov	r9, #0
   1390c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13910:	cmp	r0, #0
   13914:	beq	13948 <__assert_fail@plt+0x2588>
   13918:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1391c:	add	r4, r7, r0
   13920:	cmp	r0, #2
   13924:	bcc	13940 <__assert_fail@plt+0x2580>
   13928:	cmn	lr, #1
   1392c:	bne	13940 <__assert_fail@plt+0x2580>
   13930:	mov	r0, ip
   13934:	bl	112ac <strlen@plt>
   13938:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1393c:	mov	lr, r0
   13940:	cmp	r4, lr
   13944:	bls	13954 <__assert_fail@plt+0x2594>
   13948:	mov	r0, #0
   1394c:	str	r0, [fp, #-52]	; 0xffffffcc
   13950:	b	13998 <__assert_fail@plt+0x25d8>
   13954:	mov	r4, lr
   13958:	add	r0, ip, r7
   1395c:	ldr	r1, [fp, #-84]	; 0xffffffac
   13960:	ldr	r2, [fp, #-72]	; 0xffffffb8
   13964:	bl	11294 <bcmp@plt>
   13968:	cmp	r0, #0
   1396c:	mov	r1, r0
   13970:	movwne	r1, #1
   13974:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13978:	orr	r1, r1, r2
   1397c:	tst	r1, #1
   13980:	beq	144e8 <__assert_fail@plt+0x3128>
   13984:	clz	r0, r0
   13988:	lsr	r0, r0, #5
   1398c:	str	r0, [fp, #-52]	; 0xffffffcc
   13990:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13994:	mov	lr, r4
   13998:	ldrb	r4, [ip, r7]
   1399c:	cmp	r4, #126	; 0x7e
   139a0:	bhi	13ed0 <__assert_fail@plt+0x2b10>
   139a4:	mov	r6, #1
   139a8:	mov	r2, #110	; 0x6e
   139ac:	mov	r0, #97	; 0x61
   139b0:	add	r3, pc, #4
   139b4:	mov	r1, #0
   139b8:	ldr	pc, [r3, r4, lsl #2]
   139bc:	andeq	r3, r1, r0, lsr sp
   139c0:	ldrdeq	r3, [r1], -r0
   139c4:	ldrdeq	r3, [r1], -r0
   139c8:	ldrdeq	r3, [r1], -r0
   139cc:	ldrdeq	r3, [r1], -r0
   139d0:	ldrdeq	r3, [r1], -r0
   139d4:	ldrdeq	r3, [r1], -r0
   139d8:	andeq	r3, r1, r4, lsr #31
   139dc:	andeq	r3, r1, r0, lsl sp
   139e0:	andeq	r3, r1, r8, lsl #26
   139e4:	andeq	r3, r1, ip, lsl sp
   139e8:	andeq	r3, r1, r8, lsr lr
   139ec:	andeq	r3, r1, r0, lsl #26
   139f0:	andeq	r3, r1, r8, lsl sp
   139f4:	ldrdeq	r3, [r1], -r0
   139f8:	ldrdeq	r3, [r1], -r0
   139fc:	ldrdeq	r3, [r1], -r0
   13a00:	ldrdeq	r3, [r1], -r0
   13a04:	ldrdeq	r3, [r1], -r0
   13a08:	ldrdeq	r3, [r1], -r0
   13a0c:	ldrdeq	r3, [r1], -r0
   13a10:	ldrdeq	r3, [r1], -r0
   13a14:	ldrdeq	r3, [r1], -r0
   13a18:	ldrdeq	r3, [r1], -r0
   13a1c:	ldrdeq	r3, [r1], -r0
   13a20:	ldrdeq	r3, [r1], -r0
   13a24:	ldrdeq	r3, [r1], -r0
   13a28:	ldrdeq	r3, [r1], -r0
   13a2c:	ldrdeq	r3, [r1], -r0
   13a30:	ldrdeq	r3, [r1], -r0
   13a34:	ldrdeq	r3, [r1], -r0
   13a38:	ldrdeq	r3, [r1], -r0
   13a3c:			; <UNDEFINED> instruction: 0x00013cb4
   13a40:			; <UNDEFINED> instruction: 0x00013cb8
   13a44:			; <UNDEFINED> instruction: 0x00013cb8
   13a48:	andeq	r3, r1, r0, lsr #25
   13a4c:			; <UNDEFINED> instruction: 0x00013cb8
   13a50:			; <UNDEFINED> instruction: 0x00013bb8
   13a54:			; <UNDEFINED> instruction: 0x00013cb8
   13a58:	andeq	r3, r1, r0, asr #28
   13a5c:			; <UNDEFINED> instruction: 0x00013cb8
   13a60:			; <UNDEFINED> instruction: 0x00013cb8
   13a64:			; <UNDEFINED> instruction: 0x00013cb8
   13a68:			; <UNDEFINED> instruction: 0x00013bb8
   13a6c:			; <UNDEFINED> instruction: 0x00013bb8
   13a70:			; <UNDEFINED> instruction: 0x00013bb8
   13a74:			; <UNDEFINED> instruction: 0x00013bb8
   13a78:			; <UNDEFINED> instruction: 0x00013bb8
   13a7c:			; <UNDEFINED> instruction: 0x00013bb8
   13a80:			; <UNDEFINED> instruction: 0x00013bb8
   13a84:			; <UNDEFINED> instruction: 0x00013bb8
   13a88:			; <UNDEFINED> instruction: 0x00013bb8
   13a8c:			; <UNDEFINED> instruction: 0x00013bb8
   13a90:			; <UNDEFINED> instruction: 0x00013bb8
   13a94:			; <UNDEFINED> instruction: 0x00013bb8
   13a98:			; <UNDEFINED> instruction: 0x00013bb8
   13a9c:			; <UNDEFINED> instruction: 0x00013bb8
   13aa0:			; <UNDEFINED> instruction: 0x00013bb8
   13aa4:			; <UNDEFINED> instruction: 0x00013bb8
   13aa8:			; <UNDEFINED> instruction: 0x00013cb8
   13aac:			; <UNDEFINED> instruction: 0x00013cb8
   13ab0:			; <UNDEFINED> instruction: 0x00013cb8
   13ab4:			; <UNDEFINED> instruction: 0x00013cb8
   13ab8:	andeq	r3, r1, r8, lsl #28
   13abc:	ldrdeq	r3, [r1], -r0
   13ac0:			; <UNDEFINED> instruction: 0x00013bb8
   13ac4:			; <UNDEFINED> instruction: 0x00013bb8
   13ac8:			; <UNDEFINED> instruction: 0x00013bb8
   13acc:			; <UNDEFINED> instruction: 0x00013bb8
   13ad0:			; <UNDEFINED> instruction: 0x00013bb8
   13ad4:			; <UNDEFINED> instruction: 0x00013bb8
   13ad8:			; <UNDEFINED> instruction: 0x00013bb8
   13adc:			; <UNDEFINED> instruction: 0x00013bb8
   13ae0:			; <UNDEFINED> instruction: 0x00013bb8
   13ae4:			; <UNDEFINED> instruction: 0x00013bb8
   13ae8:			; <UNDEFINED> instruction: 0x00013bb8
   13aec:			; <UNDEFINED> instruction: 0x00013bb8
   13af0:			; <UNDEFINED> instruction: 0x00013bb8
   13af4:			; <UNDEFINED> instruction: 0x00013bb8
   13af8:			; <UNDEFINED> instruction: 0x00013bb8
   13afc:			; <UNDEFINED> instruction: 0x00013bb8
   13b00:			; <UNDEFINED> instruction: 0x00013bb8
   13b04:			; <UNDEFINED> instruction: 0x00013bb8
   13b08:			; <UNDEFINED> instruction: 0x00013bb8
   13b0c:			; <UNDEFINED> instruction: 0x00013bb8
   13b10:			; <UNDEFINED> instruction: 0x00013bb8
   13b14:			; <UNDEFINED> instruction: 0x00013bb8
   13b18:			; <UNDEFINED> instruction: 0x00013bb8
   13b1c:			; <UNDEFINED> instruction: 0x00013bb8
   13b20:			; <UNDEFINED> instruction: 0x00013bb8
   13b24:			; <UNDEFINED> instruction: 0x00013bb8
   13b28:			; <UNDEFINED> instruction: 0x00013cb8
   13b2c:	andeq	r3, r1, r0, ror #25
   13b30:			; <UNDEFINED> instruction: 0x00013bb8
   13b34:			; <UNDEFINED> instruction: 0x00013cb8
   13b38:			; <UNDEFINED> instruction: 0x00013bb8
   13b3c:			; <UNDEFINED> instruction: 0x00013cb8
   13b40:			; <UNDEFINED> instruction: 0x00013bb8
   13b44:			; <UNDEFINED> instruction: 0x00013bb8
   13b48:			; <UNDEFINED> instruction: 0x00013bb8
   13b4c:			; <UNDEFINED> instruction: 0x00013bb8
   13b50:			; <UNDEFINED> instruction: 0x00013bb8
   13b54:			; <UNDEFINED> instruction: 0x00013bb8
   13b58:			; <UNDEFINED> instruction: 0x00013bb8
   13b5c:			; <UNDEFINED> instruction: 0x00013bb8
   13b60:			; <UNDEFINED> instruction: 0x00013bb8
   13b64:			; <UNDEFINED> instruction: 0x00013bb8
   13b68:			; <UNDEFINED> instruction: 0x00013bb8
   13b6c:			; <UNDEFINED> instruction: 0x00013bb8
   13b70:			; <UNDEFINED> instruction: 0x00013bb8
   13b74:			; <UNDEFINED> instruction: 0x00013bb8
   13b78:			; <UNDEFINED> instruction: 0x00013bb8
   13b7c:			; <UNDEFINED> instruction: 0x00013bb8
   13b80:			; <UNDEFINED> instruction: 0x00013bb8
   13b84:			; <UNDEFINED> instruction: 0x00013bb8
   13b88:			; <UNDEFINED> instruction: 0x00013bb8
   13b8c:			; <UNDEFINED> instruction: 0x00013bb8
   13b90:			; <UNDEFINED> instruction: 0x00013bb8
   13b94:			; <UNDEFINED> instruction: 0x00013bb8
   13b98:			; <UNDEFINED> instruction: 0x00013bb8
   13b9c:			; <UNDEFINED> instruction: 0x00013bb8
   13ba0:			; <UNDEFINED> instruction: 0x00013bb8
   13ba4:			; <UNDEFINED> instruction: 0x00013bb8
   13ba8:	andeq	r3, r1, r4, ror ip
   13bac:			; <UNDEFINED> instruction: 0x00013cb8
   13bb0:	andeq	r3, r1, r4, ror ip
   13bb4:	andeq	r3, r1, r0, lsr #25
   13bb8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13bbc:	tst	r0, #1
   13bc0:	bne	13bec <__assert_fail@plt+0x282c>
   13bc4:	ubfx	r0, r4, #5, #3
   13bc8:	ldr	r1, [fp, #16]
   13bcc:	ldr	r0, [r1, r0, lsl #2]
   13bd0:	and	r1, r4, #31
   13bd4:	mov	r2, #1
   13bd8:	tst	r0, r2, lsl r1
   13bdc:	beq	13bec <__assert_fail@plt+0x282c>
   13be0:	mov	r0, r4
   13be4:	mov	r1, r6
   13be8:	b	13c00 <__assert_fail@plt+0x2840>
   13bec:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13bf0:	cmp	r0, #0
   13bf4:	mov	r0, r4
   13bf8:	mov	r1, r6
   13bfc:	beq	13f38 <__assert_fail@plt+0x2b78>
   13c00:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13c04:	tst	r2, #1
   13c08:	bne	144fc <__assert_fail@plt+0x313c>
   13c0c:	ldr	r2, [fp, #-64]	; 0xffffffc0
   13c10:	subs	r2, r2, #2
   13c14:	movwne	r2, #1
   13c18:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13c1c:	orr	r2, r2, r3
   13c20:	tst	r2, #1
   13c24:	bne	13c60 <__assert_fail@plt+0x28a0>
   13c28:	cmp	r8, sl
   13c2c:	movcc	r2, #39	; 0x27
   13c30:	strbcc	r2, [r5, r8]
   13c34:	add	r2, r8, #1
   13c38:	cmp	r2, sl
   13c3c:	movcc	r3, #36	; 0x24
   13c40:	strbcc	r3, [r5, r2]
   13c44:	add	r2, r8, #2
   13c48:	cmp	r2, sl
   13c4c:	movcc	r3, #39	; 0x27
   13c50:	strbcc	r3, [r5, r2]
   13c54:	add	r8, r8, #3
   13c58:	mov	r2, #1
   13c5c:	str	r2, [fp, #-56]	; 0xffffffc8
   13c60:	cmp	r8, sl
   13c64:	movcc	r2, #92	; 0x5c
   13c68:	strbcc	r2, [r5, r8]
   13c6c:	add	r8, r8, #1
   13c70:	b	13f7c <__assert_fail@plt+0x2bbc>
   13c74:	cmp	lr, #1
   13c78:	beq	13ca0 <__assert_fail@plt+0x28e0>
   13c7c:	mov	r6, #0
   13c80:	cmn	lr, #1
   13c84:	bne	13cac <__assert_fail@plt+0x28ec>
   13c88:	ldrb	r0, [ip, #1]
   13c8c:	cmp	r0, #0
   13c90:	beq	13ca0 <__assert_fail@plt+0x28e0>
   13c94:	mvn	lr, #0
   13c98:	mov	r9, #0
   13c9c:	b	13bb8 <__assert_fail@plt+0x27f8>
   13ca0:	mov	r6, #0
   13ca4:	cmp	r7, #0
   13ca8:	beq	13cb4 <__assert_fail@plt+0x28f4>
   13cac:	mov	r9, #0
   13cb0:	b	13bb8 <__assert_fail@plt+0x27f8>
   13cb4:	mov	r1, #1
   13cb8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13cbc:	cmp	r0, #2
   13cc0:	bne	13cd8 <__assert_fail@plt+0x2918>
   13cc4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13cc8:	tst	r0, #1
   13ccc:	mov	r6, r1
   13cd0:	beq	13bb8 <__assert_fail@plt+0x27f8>
   13cd4:	b	144fc <__assert_fail@plt+0x313c>
   13cd8:	mov	r6, r1
   13cdc:	b	13bb8 <__assert_fail@plt+0x27f8>
   13ce0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ce4:	cmp	r0, #2
   13ce8:	bne	13f1c <__assert_fail@plt+0x2b5c>
   13cec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13cf0:	tst	r0, #1
   13cf4:	bne	144fc <__assert_fail@plt+0x313c>
   13cf8:	mov	r9, #0
   13cfc:	b	13f30 <__assert_fail@plt+0x2b70>
   13d00:	mov	r0, #102	; 0x66
   13d04:	b	13fa4 <__assert_fail@plt+0x2be4>
   13d08:	mov	r2, #116	; 0x74
   13d0c:	b	13d1c <__assert_fail@plt+0x295c>
   13d10:	mov	r0, #98	; 0x62
   13d14:	b	13fa4 <__assert_fail@plt+0x2be4>
   13d18:	mov	r2, #114	; 0x72
   13d1c:	ldr	r0, [sp, #72]	; 0x48
   13d20:	tst	r0, #1
   13d24:	mov	r0, r2
   13d28:	bne	13fa4 <__assert_fail@plt+0x2be4>
   13d2c:	b	144fc <__assert_fail@plt+0x313c>
   13d30:	ldr	r0, [sp, #92]	; 0x5c
   13d34:	tst	r0, #1
   13d38:	beq	13fc0 <__assert_fail@plt+0x2c00>
   13d3c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13d40:	tst	r0, #1
   13d44:	bne	144fc <__assert_fail@plt+0x313c>
   13d48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13d4c:	subs	r0, r0, #2
   13d50:	movwne	r0, #1
   13d54:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13d58:	orr	r0, r0, r1
   13d5c:	tst	r0, #1
   13d60:	bne	13d9c <__assert_fail@plt+0x29dc>
   13d64:	cmp	r8, sl
   13d68:	movcc	r0, #39	; 0x27
   13d6c:	strbcc	r0, [r5, r8]
   13d70:	add	r0, r8, #1
   13d74:	cmp	r0, sl
   13d78:	movcc	r1, #36	; 0x24
   13d7c:	strbcc	r1, [r5, r0]
   13d80:	add	r0, r8, #2
   13d84:	cmp	r0, sl
   13d88:	movcc	r1, #39	; 0x27
   13d8c:	strbcc	r1, [r5, r0]
   13d90:	add	r8, r8, #3
   13d94:	mov	r0, #1
   13d98:	str	r0, [fp, #-56]	; 0xffffffc8
   13d9c:	cmp	r8, sl
   13da0:	movcc	r0, #92	; 0x5c
   13da4:	strbcc	r0, [r5, r8]
   13da8:	add	r0, r8, #1
   13dac:	mov	r6, #0
   13db0:	mov	r9, #1
   13db4:	mov	r4, #48	; 0x30
   13db8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13dbc:	cmp	r1, #2
   13dc0:	beq	14184 <__assert_fail@plt+0x2dc4>
   13dc4:	add	r1, r7, #1
   13dc8:	cmp	r1, lr
   13dcc:	bcs	14184 <__assert_fail@plt+0x2dc4>
   13dd0:	ldrb	r1, [ip, r1]
   13dd4:	sub	r1, r1, #48	; 0x30
   13dd8:	uxtb	r1, r1
   13ddc:	cmp	r1, #9
   13de0:	bhi	14184 <__assert_fail@plt+0x2dc4>
   13de4:	cmp	r0, sl
   13de8:	movcc	r1, #48	; 0x30
   13dec:	strbcc	r1, [r5, r0]
   13df0:	add	r0, r8, #2
   13df4:	cmp	r0, sl
   13df8:	movcc	r1, #48	; 0x30
   13dfc:	strbcc	r1, [r5, r0]
   13e00:	add	r8, r8, #3
   13e04:	b	13bb8 <__assert_fail@plt+0x27f8>
   13e08:	mov	r9, #0
   13e0c:	mov	r4, #63	; 0x3f
   13e10:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e14:	cmp	r0, #5
   13e18:	beq	1418c <__assert_fail@plt+0x2dcc>
   13e1c:	cmp	r0, #2
   13e20:	bne	14234 <__assert_fail@plt+0x2e74>
   13e24:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e28:	tst	r0, #1
   13e2c:	mov	r6, #0
   13e30:	beq	13bb8 <__assert_fail@plt+0x27f8>
   13e34:	b	144fc <__assert_fail@plt+0x313c>
   13e38:	mov	r0, #118	; 0x76
   13e3c:	b	13fa4 <__assert_fail@plt+0x2be4>
   13e40:	mov	r4, #39	; 0x27
   13e44:	mov	r0, #1
   13e48:	str	r0, [sp, #64]	; 0x40
   13e4c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13e50:	cmp	r0, #2
   13e54:	bne	13fdc <__assert_fail@plt+0x2c1c>
   13e58:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13e5c:	tst	r0, #1
   13e60:	bne	144fc <__assert_fail@plt+0x313c>
   13e64:	ldr	r2, [sp, #84]	; 0x54
   13e68:	cmp	r2, #0
   13e6c:	mov	r0, r2
   13e70:	movwne	r0, #1
   13e74:	clz	r1, sl
   13e78:	lsr	r1, r1, #5
   13e7c:	orrs	r0, r0, r1
   13e80:	moveq	r2, sl
   13e84:	str	r2, [sp, #84]	; 0x54
   13e88:	moveq	sl, r0
   13e8c:	cmp	r8, sl
   13e90:	movcc	r0, #39	; 0x27
   13e94:	strbcc	r0, [r5, r8]
   13e98:	add	r0, r8, #1
   13e9c:	cmp	r0, sl
   13ea0:	movcc	r1, #92	; 0x5c
   13ea4:	strbcc	r1, [r5, r0]
   13ea8:	add	r0, r8, #2
   13eac:	cmp	r0, sl
   13eb0:	movcc	r1, #39	; 0x27
   13eb4:	strbcc	r1, [r5, r0]
   13eb8:	add	r8, r8, #3
   13ebc:	mov	r0, #0
   13ec0:	str	r0, [fp, #-56]	; 0xffffffc8
   13ec4:	mov	r9, #0
   13ec8:	mov	r6, #1
   13ecc:	b	13bb8 <__assert_fail@plt+0x27f8>
   13ed0:	ldr	r0, [sp, #44]	; 0x2c
   13ed4:	cmp	r0, #1
   13ed8:	bne	13fe4 <__assert_fail@plt+0x2c24>
   13edc:	str	lr, [sp, #32]
   13ee0:	bl	1127c <__ctype_b_loc@plt>
   13ee4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13ee8:	ldr	r0, [r0]
   13eec:	add	r0, r0, r4, lsl #1
   13ef0:	ldrb	r0, [r0, #1]
   13ef4:	ubfx	r6, r0, #6, #1
   13ef8:	mov	r2, #1
   13efc:	ldr	r0, [sp, #60]	; 0x3c
   13f00:	orr	r1, r6, r0
   13f04:	cmp	r2, #1
   13f08:	bhi	1423c <__assert_fail@plt+0x2e7c>
   13f0c:	tst	r1, #1
   13f10:	beq	1423c <__assert_fail@plt+0x2e7c>
   13f14:	ldr	lr, [sp, #32]
   13f18:	b	13bb8 <__assert_fail@plt+0x27f8>
   13f1c:	mov	r9, #0
   13f20:	mov	r0, #92	; 0x5c
   13f24:	ldr	r1, [sp, #56]	; 0x38
   13f28:	cmp	r1, #0
   13f2c:	beq	13fa4 <__assert_fail@plt+0x2be4>
   13f30:	mov	r4, #92	; 0x5c
   13f34:	mov	r6, #0
   13f38:	cmp	r9, #0
   13f3c:	bne	13f74 <__assert_fail@plt+0x2bb4>
   13f40:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13f44:	tst	r0, #1
   13f48:	beq	13f74 <__assert_fail@plt+0x2bb4>
   13f4c:	cmp	r8, sl
   13f50:	movcc	r0, #39	; 0x27
   13f54:	strbcc	r0, [r5, r8]
   13f58:	add	r0, r8, #1
   13f5c:	cmp	r0, sl
   13f60:	movcc	r1, #39	; 0x27
   13f64:	strbcc	r1, [r5, r0]
   13f68:	add	r8, r8, #2
   13f6c:	mov	r0, #0
   13f70:	str	r0, [fp, #-56]	; 0xffffffc8
   13f74:	mov	r1, r6
   13f78:	mov	r0, r4
   13f7c:	cmp	r8, sl
   13f80:	strbcc	r0, [r5, r8]
   13f84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13f88:	and	r0, r0, r1
   13f8c:	str	r0, [fp, #-48]	; 0xffffffd0
   13f90:	add	r8, r8, #1
   13f94:	add	r7, r7, #1
   13f98:	cmn	lr, #1
   13f9c:	bne	138f0 <__assert_fail@plt+0x2530>
   13fa0:	b	138fc <__assert_fail@plt+0x253c>
   13fa4:	mov	r9, #0
   13fa8:	ldr	r1, [sp, #92]	; 0x5c
   13fac:	tst	r1, #1
   13fb0:	mov	r6, #0
   13fb4:	mov	r1, #0
   13fb8:	beq	13bb8 <__assert_fail@plt+0x27f8>
   13fbc:	b	13c00 <__assert_fail@plt+0x2840>
   13fc0:	mov	r4, #0
   13fc4:	ldr	r0, [sp, #40]	; 0x28
   13fc8:	cmp	r0, #0
   13fcc:	mov	r9, #0
   13fd0:	mov	r6, #0
   13fd4:	beq	13bb8 <__assert_fail@plt+0x27f8>
   13fd8:	b	13f94 <__assert_fail@plt+0x2bd4>
   13fdc:	mov	r6, #1
   13fe0:	b	13bb8 <__assert_fail@plt+0x27f8>
   13fe4:	mov	r0, #0
   13fe8:	str	r0, [fp, #-36]	; 0xffffffdc
   13fec:	str	r0, [fp, #-40]	; 0xffffffd8
   13ff0:	cmn	lr, #1
   13ff4:	bne	14008 <__assert_fail@plt+0x2c48>
   13ff8:	mov	r0, ip
   13ffc:	bl	112ac <strlen@plt>
   14000:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14004:	mov	lr, r0
   14008:	ldr	r0, [sp, #76]	; 0x4c
   1400c:	add	r0, r0, r7
   14010:	str	r0, [sp, #24]
   14014:	mov	r6, #1
   14018:	mov	r2, #0
   1401c:	sub	r0, fp, #40	; 0x28
   14020:	mov	r3, r0
   14024:	str	r5, [sp, #28]
   14028:	str	lr, [sp, #32]
   1402c:	b	14070 <__assert_fail@plt+0x2cb0>
   14030:	ldr	r5, [sp, #52]	; 0x34
   14034:	add	r5, r0, r5
   14038:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1403c:	bl	111a4 <iswprint@plt>
   14040:	cmp	r0, #0
   14044:	movwne	r0, #1
   14048:	and	r6, r6, r0
   1404c:	sub	r0, fp, #40	; 0x28
   14050:	bl	11144 <mbsinit@plt>
   14054:	sub	r3, fp, #40	; 0x28
   14058:	mov	r2, r5
   1405c:	ldr	lr, [sp, #32]
   14060:	cmp	r0, #0
   14064:	ldr	r5, [sp, #28]
   14068:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1406c:	bne	13efc <__assert_fail@plt+0x2b3c>
   14070:	str	r2, [sp, #52]	; 0x34
   14074:	add	r0, r2, r7
   14078:	add	r1, ip, r0
   1407c:	str	r0, [sp, #48]	; 0x30
   14080:	sub	r2, lr, r0
   14084:	sub	r0, fp, #44	; 0x2c
   14088:	bl	15e50 <__assert_fail@plt+0x4a90>
   1408c:	cmp	r0, #0
   14090:	beq	14408 <__assert_fail@plt+0x3048>
   14094:	cmn	r0, #1
   14098:	beq	143c4 <__assert_fail@plt+0x3004>
   1409c:	cmn	r0, #2
   140a0:	ldr	lr, [sp, #32]
   140a4:	beq	143cc <__assert_fail@plt+0x300c>
   140a8:	cmp	r0, #2
   140ac:	mov	r1, #0
   140b0:	movwcc	r1, #1
   140b4:	ldr	r2, [sp, #68]	; 0x44
   140b8:	eor	r2, r2, #1
   140bc:	orrs	r1, r2, r1
   140c0:	bne	14030 <__assert_fail@plt+0x2c70>
   140c4:	ldr	r1, [sp, #52]	; 0x34
   140c8:	ldr	r2, [sp, #24]
   140cc:	add	r1, r2, r1
   140d0:	sub	r2, r0, #1
   140d4:	b	140e4 <__assert_fail@plt+0x2d24>
   140d8:	add	r1, r1, #1
   140dc:	subs	r2, r2, #1
   140e0:	beq	14030 <__assert_fail@plt+0x2c70>
   140e4:	ldrb	r3, [r1]
   140e8:	sub	r3, r3, #91	; 0x5b
   140ec:	cmp	r3, #33	; 0x21
   140f0:	bhi	140d8 <__assert_fail@plt+0x2d18>
   140f4:	add	r5, pc, #0
   140f8:	ldr	pc, [r5, r3, lsl #2]
   140fc:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14100:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14104:	ldrdeq	r4, [r1], -r8
   14108:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1410c:	ldrdeq	r4, [r1], -r8
   14110:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14114:	ldrdeq	r4, [r1], -r8
   14118:	ldrdeq	r4, [r1], -r8
   1411c:	ldrdeq	r4, [r1], -r8
   14120:	ldrdeq	r4, [r1], -r8
   14124:	ldrdeq	r4, [r1], -r8
   14128:	ldrdeq	r4, [r1], -r8
   1412c:	ldrdeq	r4, [r1], -r8
   14130:	ldrdeq	r4, [r1], -r8
   14134:	ldrdeq	r4, [r1], -r8
   14138:	ldrdeq	r4, [r1], -r8
   1413c:	ldrdeq	r4, [r1], -r8
   14140:	ldrdeq	r4, [r1], -r8
   14144:	ldrdeq	r4, [r1], -r8
   14148:	ldrdeq	r4, [r1], -r8
   1414c:	ldrdeq	r4, [r1], -r8
   14150:	ldrdeq	r4, [r1], -r8
   14154:	ldrdeq	r4, [r1], -r8
   14158:	ldrdeq	r4, [r1], -r8
   1415c:	ldrdeq	r4, [r1], -r8
   14160:	ldrdeq	r4, [r1], -r8
   14164:	ldrdeq	r4, [r1], -r8
   14168:	ldrdeq	r4, [r1], -r8
   1416c:	ldrdeq	r4, [r1], -r8
   14170:	ldrdeq	r4, [r1], -r8
   14174:	ldrdeq	r4, [r1], -r8
   14178:	ldrdeq	r4, [r1], -r8
   1417c:	ldrdeq	r4, [r1], -r8
   14180:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14184:	mov	r8, r0
   14188:	b	13bb8 <__assert_fail@plt+0x27f8>
   1418c:	ldr	r0, [sp, #36]	; 0x24
   14190:	cmp	r0, #0
   14194:	beq	14234 <__assert_fail@plt+0x2e74>
   14198:	add	r0, r7, #2
   1419c:	cmp	r0, lr
   141a0:	bcs	14234 <__assert_fail@plt+0x2e74>
   141a4:	add	r1, r7, ip
   141a8:	ldrb	r1, [r1, #1]
   141ac:	cmp	r1, #63	; 0x3f
   141b0:	bne	14234 <__assert_fail@plt+0x2e74>
   141b4:	ldrb	r1, [ip, r0]
   141b8:	sub	r2, r1, #33	; 0x21
   141bc:	cmp	r2, #29
   141c0:	bhi	14234 <__assert_fail@plt+0x2e74>
   141c4:	mov	r3, #1
   141c8:	movw	r6, #20929	; 0x51c1
   141cc:	movt	r6, #14336	; 0x3800
   141d0:	tst	r6, r3, lsl r2
   141d4:	beq	14234 <__assert_fail@plt+0x2e74>
   141d8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   141dc:	tst	r2, #1
   141e0:	bne	144fc <__assert_fail@plt+0x313c>
   141e4:	cmp	r8, sl
   141e8:	movcc	r2, #63	; 0x3f
   141ec:	strbcc	r2, [r5, r8]
   141f0:	add	r2, r8, #1
   141f4:	cmp	r2, sl
   141f8:	movcc	r3, #34	; 0x22
   141fc:	strbcc	r3, [r5, r2]
   14200:	add	r2, r8, #2
   14204:	cmp	r2, sl
   14208:	movcc	r3, #34	; 0x22
   1420c:	strbcc	r3, [r5, r2]
   14210:	add	r2, r8, #3
   14214:	cmp	r2, sl
   14218:	movcc	r3, #63	; 0x3f
   1421c:	strbcc	r3, [r5, r2]
   14220:	add	r8, r8, #4
   14224:	mov	r7, r0
   14228:	mov	r4, r1
   1422c:	mov	r6, #0
   14230:	b	13bb8 <__assert_fail@plt+0x27f8>
   14234:	mov	r6, #0
   14238:	b	13bb8 <__assert_fail@plt+0x27f8>
   1423c:	add	r0, r2, r7
   14240:	str	r0, [sp, #52]	; 0x34
   14244:	mov	r2, #0
   14248:	ldr	lr, [sp, #32]
   1424c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14250:	str	r1, [sp, #48]	; 0x30
   14254:	tst	r1, #1
   14258:	bne	14334 <__assert_fail@plt+0x2f74>
   1425c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   14260:	tst	r1, #1
   14264:	bne	144fc <__assert_fail@plt+0x313c>
   14268:	mov	r3, r0
   1426c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14270:	subs	r1, r0, #2
   14274:	movwne	r1, #1
   14278:	orr	r1, r1, r3
   1427c:	tst	r1, #1
   14280:	bne	142b8 <__assert_fail@plt+0x2ef8>
   14284:	cmp	r8, sl
   14288:	movcc	r0, #39	; 0x27
   1428c:	strbcc	r0, [r5, r8]
   14290:	add	r2, r8, #1
   14294:	cmp	r2, sl
   14298:	movcc	r0, #36	; 0x24
   1429c:	strbcc	r0, [r5, r2]
   142a0:	add	r2, r8, #2
   142a4:	cmp	r2, sl
   142a8:	movcc	r0, #39	; 0x27
   142ac:	strbcc	r0, [r5, r2]
   142b0:	add	r8, r8, #3
   142b4:	mov	r3, #1
   142b8:	cmp	r8, sl
   142bc:	movcc	r1, #92	; 0x5c
   142c0:	strbcc	r1, [r5, r8]
   142c4:	add	r2, r8, #1
   142c8:	cmp	r2, sl
   142cc:	bcs	142e0 <__assert_fail@plt+0x2f20>
   142d0:	uxtb	r1, r4
   142d4:	mov	r0, #48	; 0x30
   142d8:	orr	r1, r0, r1, lsr #6
   142dc:	strb	r1, [r5, r2]
   142e0:	add	r2, r8, #2
   142e4:	cmp	r2, sl
   142e8:	lsrcc	r1, r4, #3
   142ec:	movcc	r0, #6
   142f0:	bficc	r1, r0, #3, #29
   142f4:	strbcc	r1, [r5, r2]
   142f8:	mov	r0, #6
   142fc:	bfi	r4, r0, #3, #29
   14300:	add	r8, r8, #3
   14304:	mov	r2, #1
   14308:	mov	r0, r3
   1430c:	b	14358 <__assert_fail@plt+0x2f98>
   14310:	cmp	r8, sl
   14314:	strbcc	r4, [r5, r8]
   14318:	ldr	r1, [sp, #76]	; 0x4c
   1431c:	ldrb	r4, [r1, r7]
   14320:	add	r8, r8, #1
   14324:	mov	r7, r3
   14328:	ldr	r1, [sp, #48]	; 0x30
   1432c:	tst	r1, #1
   14330:	beq	1425c <__assert_fail@plt+0x2e9c>
   14334:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14338:	tst	r1, #1
   1433c:	beq	14350 <__assert_fail@plt+0x2f90>
   14340:	cmp	r8, sl
   14344:	movcc	r1, #92	; 0x5c
   14348:	strbcc	r1, [r5, r8]
   1434c:	add	r8, r8, #1
   14350:	mov	r1, #0
   14354:	str	r1, [fp, #-52]	; 0xffffffcc
   14358:	and	r9, r2, #1
   1435c:	add	r3, r7, #1
   14360:	ldr	r1, [sp, #52]	; 0x34
   14364:	cmp	r1, r3
   14368:	bls	143ac <__assert_fail@plt+0x2fec>
   1436c:	cmp	r9, #0
   14370:	movwne	r9, #1
   14374:	mvn	r1, r0
   14378:	orr	r1, r1, r9
   1437c:	tst	r1, #1
   14380:	bne	14310 <__assert_fail@plt+0x2f50>
   14384:	cmp	r8, sl
   14388:	movcc	r1, #39	; 0x27
   1438c:	strbcc	r1, [r5, r8]
   14390:	add	r1, r8, #1
   14394:	cmp	r1, sl
   14398:	movcc	r0, #39	; 0x27
   1439c:	strbcc	r0, [r5, r1]
   143a0:	add	r8, r8, #2
   143a4:	mov	r0, #0
   143a8:	b	14310 <__assert_fail@plt+0x2f50>
   143ac:	str	r0, [fp, #-56]	; 0xffffffc8
   143b0:	cmp	r9, #0
   143b4:	movwne	r9, #1
   143b8:	cmp	r9, #0
   143bc:	beq	13f40 <__assert_fail@plt+0x2b80>
   143c0:	b	13f74 <__assert_fail@plt+0x2bb4>
   143c4:	mov	r6, #0
   143c8:	b	14408 <__assert_fail@plt+0x3048>
   143cc:	mov	r6, #0
   143d0:	ldr	r0, [sp, #48]	; 0x30
   143d4:	cmp	r0, lr
   143d8:	bcs	14408 <__assert_fail@plt+0x3048>
   143dc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   143e0:	add	r0, ip, r7
   143e4:	ldr	r2, [sp, #52]	; 0x34
   143e8:	ldrb	r1, [r0, r2]
   143ec:	cmp	r1, #0
   143f0:	beq	13efc <__assert_fail@plt+0x2b3c>
   143f4:	add	r2, r2, #1
   143f8:	add	r1, r7, r2
   143fc:	cmp	r1, lr
   14400:	bcc	143e8 <__assert_fail@plt+0x3028>
   14404:	b	13efc <__assert_fail@plt+0x2b3c>
   14408:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1440c:	ldr	r2, [sp, #52]	; 0x34
   14410:	b	13efc <__assert_fail@plt+0x2b3c>
   14414:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14418:	eor	r0, r1, #2
   1441c:	orr	r0, r0, r8
   14420:	clz	r0, r0
   14424:	lsr	r0, r0, #5
   14428:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1442c:	tst	r3, r0
   14430:	bne	144fc <__assert_fail@plt+0x313c>
   14434:	mov	r6, r5
   14438:	subs	r0, r1, #2
   1443c:	movwne	r0, #1
   14440:	orr	r0, r3, r0
   14444:	tst	r0, #1
   14448:	ldr	r2, [sp, #92]	; 0x5c
   1444c:	ldreq	r0, [sp, #64]	; 0x40
   14450:	eoreq	r0, r0, #1
   14454:	tsteq	r0, #1
   14458:	bne	14498 <__assert_fail@plt+0x30d8>
   1445c:	mov	r9, lr
   14460:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14464:	tst	r0, #1
   14468:	bne	14564 <__assert_fail@plt+0x31a4>
   1446c:	ldr	r0, [sp, #84]	; 0x54
   14470:	cmp	r0, #0
   14474:	beq	14498 <__assert_fail@plt+0x30d8>
   14478:	mov	r0, #0
   1447c:	str	r0, [fp, #-48]	; 0xffffffd0
   14480:	mov	r1, #2
   14484:	cmp	sl, #0
   14488:	mov	r0, r2
   1448c:	mov	r4, r3
   14490:	ldr	r7, [sp, #84]	; 0x54
   14494:	beq	13670 <__assert_fail@plt+0x22b0>
   14498:	ldr	r1, [fp, #-84]	; 0xffffffac
   1449c:	clz	r0, r1
   144a0:	lsr	r0, r0, #5
   144a4:	orr	r0, r0, r3
   144a8:	tst	r0, #1
   144ac:	bne	144d8 <__assert_fail@plt+0x3118>
   144b0:	ldrb	r0, [r1]
   144b4:	cmp	r0, #0
   144b8:	beq	144d8 <__assert_fail@plt+0x3118>
   144bc:	add	r1, r1, #1
   144c0:	cmp	r8, sl
   144c4:	strbcc	r0, [r6, r8]
   144c8:	add	r8, r8, #1
   144cc:	ldrb	r0, [r1], #1
   144d0:	cmp	r0, #0
   144d4:	bne	144c0 <__assert_fail@plt+0x3100>
   144d8:	cmp	r8, sl
   144dc:	movcc	r0, #0
   144e0:	strbcc	r0, [r6, r8]
   144e4:	b	14558 <__assert_fail@plt+0x3198>
   144e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   144ec:	mov	lr, r4
   144f0:	b	144fc <__assert_fail@plt+0x313c>
   144f4:	ldr	r5, [sp, #28]
   144f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   144fc:	mov	r0, #0
   14500:	ldr	r1, [fp, #12]
   14504:	bic	r1, r1, #2
   14508:	mov	r2, #2
   1450c:	ldr	r3, [sp, #92]	; 0x5c
   14510:	tst	r3, #1
   14514:	movwne	r2, #4
   14518:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1451c:	cmp	r3, #2
   14520:	movne	r2, r3
   14524:	str	r2, [sp]
   14528:	str	r1, [sp, #4]
   1452c:	str	r0, [sp, #8]
   14530:	ldr	r0, [sp, #80]	; 0x50
   14534:	str	r0, [sp, #12]
   14538:	ldr	r0, [sp, #88]	; 0x58
   1453c:	str	r0, [sp, #16]
   14540:	mov	r0, r5
   14544:	mov	r1, sl
   14548:	mov	r2, ip
   1454c:	mov	r3, lr
   14550:	bl	135e4 <__assert_fail@plt+0x2224>
   14554:	mov	r8, r0
   14558:	mov	r0, r8
   1455c:	sub	sp, fp, #28
   14560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14564:	mov	r0, #5
   14568:	str	r0, [sp]
   1456c:	ldr	r0, [fp, #12]
   14570:	str	r0, [sp, #4]
   14574:	ldr	r0, [fp, #16]
   14578:	str	r0, [sp, #8]
   1457c:	ldr	r0, [sp, #80]	; 0x50
   14580:	str	r0, [sp, #12]
   14584:	ldr	r0, [sp, #88]	; 0x58
   14588:	str	r0, [sp, #16]
   1458c:	mov	r0, r6
   14590:	ldr	r1, [sp, #84]	; 0x54
   14594:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14598:	mov	r3, r9
   1459c:	b	14550 <__assert_fail@plt+0x3190>
   145a0:	bl	113a8 <abort@plt>
   145a4:	mov	r3, r2
   145a8:	mov	r2, #0
   145ac:	b	145b0 <__assert_fail@plt+0x31f0>
   145b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145b4:	add	fp, sp, #28
   145b8:	sub	sp, sp, #36	; 0x24
   145bc:	mov	r4, r2
   145c0:	str	r2, [sp, #24]
   145c4:	mov	r5, r1
   145c8:	mov	r6, r0
   145cc:	str	r0, [sp, #20]
   145d0:	movw	r8, #33288	; 0x8208
   145d4:	movt	r8, #2
   145d8:	cmp	r3, #0
   145dc:	movne	r8, r3
   145e0:	bl	112c4 <__errno_location@plt>
   145e4:	str	r0, [sp, #28]
   145e8:	ldm	r8, {r3, r9}
   145ec:	ldr	r1, [r8, #40]	; 0x28
   145f0:	ldr	r2, [r8, #44]	; 0x2c
   145f4:	ldr	r7, [r0]
   145f8:	str	r7, [sp, #32]
   145fc:	add	sl, r8, #8
   14600:	cmp	r4, #0
   14604:	orreq	r9, r9, #1
   14608:	stm	sp, {r3, r9, sl}
   1460c:	str	r1, [sp, #12]
   14610:	str	r2, [sp, #16]
   14614:	mov	r0, #0
   14618:	mov	r1, #0
   1461c:	mov	r2, r6
   14620:	mov	r3, r5
   14624:	mov	r7, r5
   14628:	bl	135e4 <__assert_fail@plt+0x2224>
   1462c:	mov	r5, r0
   14630:	add	r4, r0, #1
   14634:	mov	r0, r4
   14638:	bl	1572c <__assert_fail@plt+0x436c>
   1463c:	mov	r6, r0
   14640:	ldr	r0, [r8]
   14644:	ldr	r1, [r8, #40]	; 0x28
   14648:	ldr	r2, [r8, #44]	; 0x2c
   1464c:	stm	sp, {r0, r9, sl}
   14650:	str	r1, [sp, #12]
   14654:	str	r2, [sp, #16]
   14658:	mov	r0, r6
   1465c:	mov	r1, r4
   14660:	ldr	r2, [sp, #20]
   14664:	mov	r3, r7
   14668:	bl	135e4 <__assert_fail@plt+0x2224>
   1466c:	ldr	r0, [sp, #24]
   14670:	ldr	r1, [sp, #32]
   14674:	ldr	r2, [sp, #28]
   14678:	str	r1, [r2]
   1467c:	cmp	r0, #0
   14680:	strne	r5, [r0]
   14684:	mov	r0, r6
   14688:	sub	sp, fp, #28
   1468c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14690:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14694:	add	fp, sp, #24
   14698:	movw	r8, #33064	; 0x8128
   1469c:	movt	r8, #2
   146a0:	ldr	r4, [r8]
   146a4:	movw	r5, #33068	; 0x812c
   146a8:	movt	r5, #2
   146ac:	ldr	r0, [r5]
   146b0:	cmp	r0, #2
   146b4:	blt	146e0 <__assert_fail@plt+0x3320>
   146b8:	add	r7, r4, #12
   146bc:	mov	r6, #0
   146c0:	ldr	r0, [r7, r6, lsl #3]
   146c4:	bl	13254 <__assert_fail@plt+0x1e94>
   146c8:	add	r0, r6, #1
   146cc:	ldr	r1, [r5]
   146d0:	add	r2, r6, #2
   146d4:	cmp	r2, r1
   146d8:	mov	r6, r0
   146dc:	blt	146c0 <__assert_fail@plt+0x3300>
   146e0:	ldr	r0, [r4, #4]
   146e4:	movw	r9, #33336	; 0x8238
   146e8:	movt	r9, #2
   146ec:	cmp	r0, r9
   146f0:	movw	r7, #33072	; 0x8130
   146f4:	movt	r7, #2
   146f8:	beq	14708 <__assert_fail@plt+0x3348>
   146fc:	bl	13254 <__assert_fail@plt+0x1e94>
   14700:	mov	r0, #256	; 0x100
   14704:	stm	r7, {r0, r9}
   14708:	cmp	r4, r7
   1470c:	beq	1471c <__assert_fail@plt+0x335c>
   14710:	mov	r0, r4
   14714:	bl	13254 <__assert_fail@plt+0x1e94>
   14718:	str	r7, [r8]
   1471c:	mov	r0, #1
   14720:	str	r0, [r5]
   14724:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14728:	movw	r3, #33288	; 0x8208
   1472c:	movt	r3, #2
   14730:	mvn	r2, #0
   14734:	b	14738 <__assert_fail@plt+0x3378>
   14738:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1473c:	add	fp, sp, #28
   14740:	sub	sp, sp, #44	; 0x2c
   14744:	mov	r7, r3
   14748:	str	r2, [sp, #36]	; 0x24
   1474c:	str	r1, [sp, #32]
   14750:	mov	r5, r0
   14754:	bl	112c4 <__errno_location@plt>
   14758:	cmp	r5, #0
   1475c:	bmi	148cc <__assert_fail@plt+0x350c>
   14760:	cmn	r5, #-2147483647	; 0x80000001
   14764:	beq	148cc <__assert_fail@plt+0x350c>
   14768:	movw	r4, #33064	; 0x8128
   1476c:	movt	r4, #2
   14770:	ldr	r6, [r4]
   14774:	str	r0, [sp, #28]
   14778:	ldr	r0, [r0]
   1477c:	str	r0, [sp, #24]
   14780:	movw	r8, #33068	; 0x812c
   14784:	movt	r8, #2
   14788:	ldr	r1, [r8]
   1478c:	cmp	r1, r5
   14790:	ble	1479c <__assert_fail@plt+0x33dc>
   14794:	mov	sl, r6
   14798:	b	14808 <__assert_fail@plt+0x3448>
   1479c:	str	r1, [fp, #-32]	; 0xffffffe0
   147a0:	mov	r0, #8
   147a4:	str	r0, [sp]
   147a8:	movw	r9, #33072	; 0x8130
   147ac:	movt	r9, #2
   147b0:	subs	r0, r6, r9
   147b4:	movne	r0, r6
   147b8:	sub	r1, r5, r1
   147bc:	add	r2, r1, #1
   147c0:	sub	r1, fp, #32
   147c4:	mvn	r3, #-2147483648	; 0x80000000
   147c8:	bl	15808 <__assert_fail@plt+0x4448>
   147cc:	mov	sl, r0
   147d0:	str	r0, [r4]
   147d4:	cmp	r6, r9
   147d8:	bne	147e4 <__assert_fail@plt+0x3424>
   147dc:	ldrd	r0, [r9]
   147e0:	stm	sl, {r0, r1}
   147e4:	ldr	r1, [r8]
   147e8:	add	r0, sl, r1, lsl #3
   147ec:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147f0:	sub	r1, r2, r1
   147f4:	lsl	r2, r1, #3
   147f8:	mov	r1, #0
   147fc:	bl	112e8 <memset@plt>
   14800:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14804:	str	r0, [r8]
   14808:	mov	r9, sl
   1480c:	ldr	r6, [r9, r5, lsl #3]!
   14810:	ldr	r4, [r9, #4]!
   14814:	ldm	r7, {r0, r1}
   14818:	ldr	r2, [r7, #40]	; 0x28
   1481c:	ldr	r3, [r7, #44]	; 0x2c
   14820:	orr	r8, r1, #1
   14824:	add	r1, r7, #8
   14828:	stm	sp, {r0, r8}
   1482c:	str	r1, [sp, #20]
   14830:	add	r0, sp, #8
   14834:	stm	r0, {r1, r2, r3}
   14838:	mov	r0, r4
   1483c:	mov	r1, r6
   14840:	ldr	r2, [sp, #32]
   14844:	ldr	r3, [sp, #36]	; 0x24
   14848:	bl	135e4 <__assert_fail@plt+0x2224>
   1484c:	cmp	r6, r0
   14850:	bhi	148b4 <__assert_fail@plt+0x34f4>
   14854:	add	r6, r0, #1
   14858:	str	r6, [sl, r5, lsl #3]
   1485c:	movw	r0, #33336	; 0x8238
   14860:	movt	r0, #2
   14864:	cmp	r4, r0
   14868:	beq	14874 <__assert_fail@plt+0x34b4>
   1486c:	mov	r0, r4
   14870:	bl	13254 <__assert_fail@plt+0x1e94>
   14874:	mov	r0, r6
   14878:	bl	1572c <__assert_fail@plt+0x436c>
   1487c:	mov	r4, r0
   14880:	str	r0, [r9]
   14884:	ldr	r0, [r7]
   14888:	ldr	r1, [r7, #40]	; 0x28
   1488c:	ldr	r2, [r7, #44]	; 0x2c
   14890:	stm	sp, {r0, r8}
   14894:	ldr	r0, [sp, #20]
   14898:	add	r3, sp, #8
   1489c:	stm	r3, {r0, r1, r2}
   148a0:	mov	r0, r4
   148a4:	mov	r1, r6
   148a8:	ldr	r2, [sp, #32]
   148ac:	ldr	r3, [sp, #36]	; 0x24
   148b0:	bl	135e4 <__assert_fail@plt+0x2224>
   148b4:	ldr	r0, [sp, #28]
   148b8:	ldr	r1, [sp, #24]
   148bc:	str	r1, [r0]
   148c0:	mov	r0, r4
   148c4:	sub	sp, fp, #28
   148c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148cc:	bl	113a8 <abort@plt>
   148d0:	movw	r3, #33288	; 0x8208
   148d4:	movt	r3, #2
   148d8:	b	14738 <__assert_fail@plt+0x3378>
   148dc:	mov	r1, r0
   148e0:	mov	r0, #0
   148e4:	b	14728 <__assert_fail@plt+0x3368>
   148e8:	mov	r2, r1
   148ec:	mov	r1, r0
   148f0:	mov	r0, #0
   148f4:	b	148d0 <__assert_fail@plt+0x3510>
   148f8:	push	{r4, r5, r6, sl, fp, lr}
   148fc:	add	fp, sp, #16
   14900:	sub	sp, sp, #48	; 0x30
   14904:	mov	r4, r2
   14908:	mov	r5, r0
   1490c:	mov	r6, sp
   14910:	mov	r0, r6
   14914:	bl	14934 <__assert_fail@plt+0x3574>
   14918:	mov	r0, r5
   1491c:	mov	r1, r4
   14920:	mvn	r2, #0
   14924:	mov	r3, r6
   14928:	bl	14738 <__assert_fail@plt+0x3378>
   1492c:	sub	sp, fp, #16
   14930:	pop	{r4, r5, r6, sl, fp, pc}
   14934:	push	{fp, lr}
   14938:	mov	fp, sp
   1493c:	vmov.i32	q8, #0	; 0x00000000
   14940:	mov	r2, #32
   14944:	mov	r3, r0
   14948:	vst1.32	{d16-d17}, [r3], r2
   1494c:	vst1.32	{d16-d17}, [r3]
   14950:	add	r2, r0, #16
   14954:	vst1.32	{d16-d17}, [r2]
   14958:	cmp	r1, #10
   1495c:	strne	r1, [r0]
   14960:	popne	{fp, pc}
   14964:	bl	113a8 <abort@plt>
   14968:	push	{r4, r5, r6, r7, fp, lr}
   1496c:	add	fp, sp, #16
   14970:	sub	sp, sp, #48	; 0x30
   14974:	mov	r4, r3
   14978:	mov	r5, r2
   1497c:	mov	r6, r0
   14980:	mov	r7, sp
   14984:	mov	r0, r7
   14988:	bl	14934 <__assert_fail@plt+0x3574>
   1498c:	mov	r0, r6
   14990:	mov	r1, r5
   14994:	mov	r2, r4
   14998:	mov	r3, r7
   1499c:	bl	14738 <__assert_fail@plt+0x3378>
   149a0:	sub	sp, fp, #16
   149a4:	pop	{r4, r5, r6, r7, fp, pc}
   149a8:	mov	r2, r1
   149ac:	mov	r1, r0
   149b0:	mov	r0, #0
   149b4:	b	148f8 <__assert_fail@plt+0x3538>
   149b8:	mov	r3, r2
   149bc:	mov	r2, r1
   149c0:	mov	r1, r0
   149c4:	mov	r0, #0
   149c8:	b	14968 <__assert_fail@plt+0x35a8>
   149cc:	push	{r4, r5, r6, sl, fp, lr}
   149d0:	add	fp, sp, #16
   149d4:	sub	sp, sp, #48	; 0x30
   149d8:	mov	r4, r1
   149dc:	mov	r5, r0
   149e0:	movw	r0, #33288	; 0x8208
   149e4:	movt	r0, #2
   149e8:	add	r1, r0, #16
   149ec:	mov	r3, #32
   149f0:	vld1.64	{d16-d17}, [r0], r3
   149f4:	vld1.64	{d18-d19}, [r1]
   149f8:	mov	r6, sp
   149fc:	add	r1, r6, #16
   14a00:	vld1.64	{d20-d21}, [r0]
   14a04:	vst1.64	{d18-d19}, [r1]
   14a08:	mov	r0, r6
   14a0c:	vst1.64	{d16-d17}, [r0], r3
   14a10:	vst1.64	{d20-d21}, [r0]
   14a14:	mov	r0, r6
   14a18:	mov	r1, r2
   14a1c:	mov	r2, #1
   14a20:	bl	134d8 <__assert_fail@plt+0x2118>
   14a24:	mov	r0, #0
   14a28:	mov	r1, r5
   14a2c:	mov	r2, r4
   14a30:	mov	r3, r6
   14a34:	bl	14738 <__assert_fail@plt+0x3378>
   14a38:	sub	sp, fp, #16
   14a3c:	pop	{r4, r5, r6, sl, fp, pc}
   14a40:	mov	r2, r1
   14a44:	mvn	r1, #0
   14a48:	b	149cc <__assert_fail@plt+0x360c>
   14a4c:	mov	r1, #58	; 0x3a
   14a50:	b	14a40 <__assert_fail@plt+0x3680>
   14a54:	mov	r2, #58	; 0x3a
   14a58:	b	149cc <__assert_fail@plt+0x360c>
   14a5c:	push	{r4, r5, r6, sl, fp, lr}
   14a60:	add	fp, sp, #16
   14a64:	sub	sp, sp, #48	; 0x30
   14a68:	mov	r4, r2
   14a6c:	mov	r5, r0
   14a70:	mov	r6, sp
   14a74:	mov	r0, r6
   14a78:	bl	14934 <__assert_fail@plt+0x3574>
   14a7c:	mov	r0, r6
   14a80:	mov	r1, #58	; 0x3a
   14a84:	mov	r2, #1
   14a88:	bl	134d8 <__assert_fail@plt+0x2118>
   14a8c:	mov	r0, r5
   14a90:	mov	r1, r4
   14a94:	mvn	r2, #0
   14a98:	mov	r3, r6
   14a9c:	bl	14738 <__assert_fail@plt+0x3378>
   14aa0:	sub	sp, fp, #16
   14aa4:	pop	{r4, r5, r6, sl, fp, pc}
   14aa8:	push	{fp, lr}
   14aac:	mov	fp, sp
   14ab0:	sub	sp, sp, #8
   14ab4:	mvn	ip, #0
   14ab8:	str	ip, [sp]
   14abc:	bl	14ac8 <__assert_fail@plt+0x3708>
   14ac0:	mov	sp, fp
   14ac4:	pop	{fp, pc}
   14ac8:	push	{r4, r5, r6, r7, fp, lr}
   14acc:	add	fp, sp, #16
   14ad0:	sub	sp, sp, #48	; 0x30
   14ad4:	mov	r7, r3
   14ad8:	mov	r5, r0
   14adc:	movw	r0, #33288	; 0x8208
   14ae0:	movt	r0, #2
   14ae4:	add	r3, r0, #16
   14ae8:	mov	r4, #32
   14aec:	vld1.64	{d16-d17}, [r0], r4
   14af0:	vld1.64	{d18-d19}, [r3]
   14af4:	mov	r6, sp
   14af8:	add	r3, r6, #16
   14afc:	vld1.64	{d20-d21}, [r0]
   14b00:	vst1.64	{d18-d19}, [r3]
   14b04:	mov	r0, r6
   14b08:	vst1.64	{d16-d17}, [r0], r4
   14b0c:	vst1.64	{d20-d21}, [r0]
   14b10:	mov	r0, r6
   14b14:	bl	13530 <__assert_fail@plt+0x2170>
   14b18:	ldr	r2, [fp, #8]
   14b1c:	mov	r0, r5
   14b20:	mov	r1, r7
   14b24:	mov	r3, r6
   14b28:	bl	14738 <__assert_fail@plt+0x3378>
   14b2c:	sub	sp, fp, #16
   14b30:	pop	{r4, r5, r6, r7, fp, pc}
   14b34:	mov	r3, r2
   14b38:	mov	r2, r1
   14b3c:	mov	r1, r0
   14b40:	mov	r0, #0
   14b44:	b	14aa8 <__assert_fail@plt+0x36e8>
   14b48:	push	{fp, lr}
   14b4c:	mov	fp, sp
   14b50:	sub	sp, sp, #8
   14b54:	mov	ip, r2
   14b58:	mov	r2, r1
   14b5c:	mov	r1, r0
   14b60:	str	r3, [sp]
   14b64:	mov	r0, #0
   14b68:	mov	r3, ip
   14b6c:	bl	14ac8 <__assert_fail@plt+0x3708>
   14b70:	mov	sp, fp
   14b74:	pop	{fp, pc}
   14b78:	movw	r3, #33080	; 0x8138
   14b7c:	movt	r3, #2
   14b80:	b	14738 <__assert_fail@plt+0x3378>
   14b84:	mov	r2, r1
   14b88:	mov	r1, r0
   14b8c:	mov	r0, #0
   14b90:	b	14b78 <__assert_fail@plt+0x37b8>
   14b94:	mvn	r2, #0
   14b98:	b	14b78 <__assert_fail@plt+0x37b8>
   14b9c:	mov	r1, r0
   14ba0:	mov	r0, #0
   14ba4:	b	14b94 <__assert_fail@plt+0x37d4>
   14ba8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14bac:	add	fp, sp, #24
   14bb0:	sub	sp, sp, #16
   14bb4:	mov	r4, r1
   14bb8:	mov	r5, r0
   14bbc:	mov	r7, #0
   14bc0:	mov	r0, #0
   14bc4:	mov	r1, r5
   14bc8:	mov	r2, #5
   14bcc:	bl	11168 <dcgettext@plt>
   14bd0:	cmp	r0, r5
   14bd4:	beq	14be0 <__assert_fail@plt+0x3820>
   14bd8:	sub	sp, fp, #24
   14bdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14be0:	bl	15e18 <__assert_fail@plt+0x4a58>
   14be4:	mov	r6, r0
   14be8:	mov	r8, #56	; 0x38
   14bec:	mov	r0, #45	; 0x2d
   14bf0:	stm	sp, {r0, r8}
   14bf4:	str	r7, [sp, #8]
   14bf8:	str	r7, [sp, #12]
   14bfc:	mov	r0, r6
   14c00:	mov	r1, #85	; 0x55
   14c04:	mov	r2, #84	; 0x54
   14c08:	mov	r3, #70	; 0x46
   14c0c:	bl	14ca4 <__assert_fail@plt+0x38e4>
   14c10:	cmp	r0, #0
   14c14:	beq	14c30 <__assert_fail@plt+0x3870>
   14c18:	ldrb	r1, [r5]
   14c1c:	movw	r2, #27624	; 0x6be8
   14c20:	movt	r2, #1
   14c24:	movw	r0, #27628	; 0x6bec
   14c28:	movt	r0, #1
   14c2c:	b	14c74 <__assert_fail@plt+0x38b4>
   14c30:	mov	r0, #48	; 0x30
   14c34:	mov	r1, #51	; 0x33
   14c38:	str	r8, [sp]
   14c3c:	stmib	sp, {r0, r1}
   14c40:	str	r0, [sp, #12]
   14c44:	mov	r0, r6
   14c48:	mov	r1, #71	; 0x47
   14c4c:	mov	r2, #66	; 0x42
   14c50:	mov	r3, #49	; 0x31
   14c54:	bl	14ca4 <__assert_fail@plt+0x38e4>
   14c58:	cmp	r0, #0
   14c5c:	beq	14c84 <__assert_fail@plt+0x38c4>
   14c60:	ldrb	r1, [r5]
   14c64:	movw	r2, #27632	; 0x6bf0
   14c68:	movt	r2, #1
   14c6c:	movw	r0, #27636	; 0x6bf4
   14c70:	movt	r0, #1
   14c74:	cmp	r1, #96	; 0x60
   14c78:	moveq	r0, r2
   14c7c:	sub	sp, fp, #24
   14c80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c84:	movw	r1, #27618	; 0x6be2
   14c88:	movt	r1, #1
   14c8c:	movw	r0, #27622	; 0x6be6
   14c90:	movt	r0, #1
   14c94:	cmp	r4, #9
   14c98:	moveq	r0, r1
   14c9c:	sub	sp, fp, #24
   14ca0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ca4:	push	{r4, r5, r6, r7, fp, lr}
   14ca8:	add	fp, sp, #16
   14cac:	sub	sp, sp, #16
   14cb0:	mov	r4, r3
   14cb4:	mov	r5, r2
   14cb8:	mov	r7, r1
   14cbc:	mov	r6, r0
   14cc0:	mov	r0, r1
   14cc4:	bl	1302c <__assert_fail@plt+0x1c6c>
   14cc8:	ldrb	r1, [r6]
   14ccc:	cmp	r0, #0
   14cd0:	andne	r1, r1, #223	; 0xdf
   14cd4:	mov	r0, #0
   14cd8:	cmp	r1, r7
   14cdc:	bne	14d14 <__assert_fail@plt+0x3954>
   14ce0:	cmp	r7, #0
   14ce4:	beq	14d1c <__assert_fail@plt+0x395c>
   14ce8:	ldr	r0, [fp, #20]
   14cec:	ldr	r1, [fp, #16]
   14cf0:	ldr	r2, [fp, #12]
   14cf4:	ldr	r3, [fp, #8]
   14cf8:	str	r2, [sp]
   14cfc:	str	r1, [sp, #4]
   14d00:	str	r0, [sp, #8]
   14d04:	mov	r0, r6
   14d08:	mov	r1, r5
   14d0c:	mov	r2, r4
   14d10:	bl	14d28 <__assert_fail@plt+0x3968>
   14d14:	sub	sp, fp, #16
   14d18:	pop	{r4, r5, r6, r7, fp, pc}
   14d1c:	mov	r0, #1
   14d20:	sub	sp, fp, #16
   14d24:	pop	{r4, r5, r6, r7, fp, pc}
   14d28:	push	{r4, r5, r6, r7, fp, lr}
   14d2c:	add	fp, sp, #16
   14d30:	sub	sp, sp, #8
   14d34:	mov	r4, r3
   14d38:	mov	r5, r2
   14d3c:	mov	r7, r1
   14d40:	mov	r6, r0
   14d44:	mov	r0, r1
   14d48:	bl	1302c <__assert_fail@plt+0x1c6c>
   14d4c:	ldrb	r1, [r6, #1]
   14d50:	cmp	r0, #0
   14d54:	andne	r1, r1, #223	; 0xdf
   14d58:	mov	r0, #0
   14d5c:	cmp	r1, r7
   14d60:	bne	14d90 <__assert_fail@plt+0x39d0>
   14d64:	cmp	r7, #0
   14d68:	beq	14d98 <__assert_fail@plt+0x39d8>
   14d6c:	ldr	r0, [fp, #16]
   14d70:	ldr	r1, [fp, #12]
   14d74:	ldr	r3, [fp, #8]
   14d78:	str	r1, [sp]
   14d7c:	str	r0, [sp, #4]
   14d80:	mov	r0, r6
   14d84:	mov	r1, r5
   14d88:	mov	r2, r4
   14d8c:	bl	14da4 <__assert_fail@plt+0x39e4>
   14d90:	sub	sp, fp, #16
   14d94:	pop	{r4, r5, r6, r7, fp, pc}
   14d98:	mov	r0, #1
   14d9c:	sub	sp, fp, #16
   14da0:	pop	{r4, r5, r6, r7, fp, pc}
   14da4:	push	{r4, r5, r6, r7, fp, lr}
   14da8:	add	fp, sp, #16
   14dac:	sub	sp, sp, #8
   14db0:	mov	r4, r3
   14db4:	mov	r5, r2
   14db8:	mov	r7, r1
   14dbc:	mov	r6, r0
   14dc0:	mov	r0, r1
   14dc4:	bl	1302c <__assert_fail@plt+0x1c6c>
   14dc8:	ldrb	r1, [r6, #2]
   14dcc:	cmp	r0, #0
   14dd0:	andne	r1, r1, #223	; 0xdf
   14dd4:	mov	r0, #0
   14dd8:	cmp	r1, r7
   14ddc:	bne	14e04 <__assert_fail@plt+0x3a44>
   14de0:	cmp	r7, #0
   14de4:	beq	14e0c <__assert_fail@plt+0x3a4c>
   14de8:	ldr	r0, [fp, #12]
   14dec:	ldr	r3, [fp, #8]
   14df0:	str	r0, [sp]
   14df4:	mov	r0, r6
   14df8:	mov	r1, r5
   14dfc:	mov	r2, r4
   14e00:	bl	14e18 <__assert_fail@plt+0x3a58>
   14e04:	sub	sp, fp, #16
   14e08:	pop	{r4, r5, r6, r7, fp, pc}
   14e0c:	mov	r0, #1
   14e10:	sub	sp, fp, #16
   14e14:	pop	{r4, r5, r6, r7, fp, pc}
   14e18:	push	{r4, r5, r6, r7, fp, lr}
   14e1c:	add	fp, sp, #16
   14e20:	mov	r4, r3
   14e24:	mov	r5, r2
   14e28:	mov	r7, r1
   14e2c:	mov	r6, r0
   14e30:	mov	r0, r1
   14e34:	bl	1302c <__assert_fail@plt+0x1c6c>
   14e38:	ldrb	r1, [r6, #3]
   14e3c:	ldr	r3, [fp, #8]
   14e40:	cmp	r0, #0
   14e44:	andne	r1, r1, #223	; 0xdf
   14e48:	mov	r0, #0
   14e4c:	cmp	r1, r7
   14e50:	bne	14e74 <__assert_fail@plt+0x3ab4>
   14e54:	cmp	r7, #0
   14e58:	beq	14e70 <__assert_fail@plt+0x3ab0>
   14e5c:	mov	r0, r6
   14e60:	mov	r1, r5
   14e64:	mov	r2, r4
   14e68:	pop	{r4, r5, r6, r7, fp, lr}
   14e6c:	b	14e78 <__assert_fail@plt+0x3ab8>
   14e70:	mov	r0, #1
   14e74:	pop	{r4, r5, r6, r7, fp, pc}
   14e78:	push	{r4, r5, r6, r7, fp, lr}
   14e7c:	add	fp, sp, #16
   14e80:	mov	r4, r3
   14e84:	mov	r5, r2
   14e88:	mov	r7, r1
   14e8c:	mov	r6, r0
   14e90:	mov	r0, r1
   14e94:	bl	1302c <__assert_fail@plt+0x1c6c>
   14e98:	ldrb	r1, [r6, #4]
   14e9c:	cmp	r0, #0
   14ea0:	andne	r1, r1, #223	; 0xdf
   14ea4:	mov	r0, #0
   14ea8:	cmp	r1, r7
   14eac:	bne	14ed0 <__assert_fail@plt+0x3b10>
   14eb0:	cmp	r7, #0
   14eb4:	beq	14ecc <__assert_fail@plt+0x3b0c>
   14eb8:	mov	r0, r6
   14ebc:	mov	r1, r5
   14ec0:	mov	r2, r4
   14ec4:	pop	{r4, r5, r6, r7, fp, lr}
   14ec8:	b	14ed4 <__assert_fail@plt+0x3b14>
   14ecc:	mov	r0, #1
   14ed0:	pop	{r4, r5, r6, r7, fp, pc}
   14ed4:	push	{r4, r5, r6, sl, fp, lr}
   14ed8:	add	fp, sp, #16
   14edc:	mov	r4, r2
   14ee0:	mov	r6, r1
   14ee4:	mov	r5, r0
   14ee8:	mov	r0, r1
   14eec:	bl	1302c <__assert_fail@plt+0x1c6c>
   14ef0:	ldrb	r1, [r5, #5]
   14ef4:	cmp	r0, #0
   14ef8:	andne	r1, r1, #223	; 0xdf
   14efc:	mov	r0, #0
   14f00:	cmp	r1, r6
   14f04:	bne	14f24 <__assert_fail@plt+0x3b64>
   14f08:	cmp	r6, #0
   14f0c:	beq	14f20 <__assert_fail@plt+0x3b60>
   14f10:	mov	r0, r5
   14f14:	mov	r1, r4
   14f18:	pop	{r4, r5, r6, sl, fp, lr}
   14f1c:	b	14f28 <__assert_fail@plt+0x3b68>
   14f20:	mov	r0, #1
   14f24:	pop	{r4, r5, r6, sl, fp, pc}
   14f28:	push	{r4, r5, fp, lr}
   14f2c:	add	fp, sp, #8
   14f30:	mov	r5, r1
   14f34:	mov	r4, r0
   14f38:	mov	r0, r1
   14f3c:	bl	1302c <__assert_fail@plt+0x1c6c>
   14f40:	ldrb	r1, [r4, #6]
   14f44:	cmp	r0, #0
   14f48:	andne	r1, r1, #223	; 0xdf
   14f4c:	mov	r0, #0
   14f50:	cmp	r1, r5
   14f54:	popne	{r4, r5, fp, pc}
   14f58:	cmp	r5, #0
   14f5c:	beq	14f6c <__assert_fail@plt+0x3bac>
   14f60:	mov	r0, r4
   14f64:	pop	{r4, r5, fp, lr}
   14f68:	b	14f74 <__assert_fail@plt+0x3bb4>
   14f6c:	mov	r0, #1
   14f70:	pop	{r4, r5, fp, pc}
   14f74:	push	{r4, sl, fp, lr}
   14f78:	add	fp, sp, #8
   14f7c:	mov	r4, r0
   14f80:	mov	r0, #0
   14f84:	bl	1302c <__assert_fail@plt+0x1c6c>
   14f88:	ldrb	r1, [r4, #7]
   14f8c:	cmp	r0, #0
   14f90:	beq	14fa4 <__assert_fail@plt+0x3be4>
   14f94:	tst	r1, #223	; 0xdf
   14f98:	bne	14fac <__assert_fail@plt+0x3bec>
   14f9c:	mov	r0, #1
   14fa0:	pop	{r4, sl, fp, pc}
   14fa4:	cmp	r1, #0
   14fa8:	beq	14f9c <__assert_fail@plt+0x3bdc>
   14fac:	mov	r0, #0
   14fb0:	pop	{r4, sl, fp, pc}
   14fb4:	push	{r4, r5, fp, lr}
   14fb8:	add	fp, sp, #8
   14fbc:	mov	r5, r0
   14fc0:	mov	r0, #33	; 0x21
   14fc4:	bl	156f0 <__assert_fail@plt+0x4330>
   14fc8:	mov	r4, r0
   14fcc:	add	r1, r5, #44	; 0x2c
   14fd0:	mov	r2, #32
   14fd4:	bl	112f4 <strncpy@plt>
   14fd8:	mov	r5, #0
   14fdc:	strb	r5, [r0, #32]
   14fe0:	bl	112ac <strlen@plt>
   14fe4:	cmp	r0, #1
   14fe8:	blt	15010 <__assert_fail@plt+0x3c50>
   14fec:	add	r1, r4, r0
   14ff0:	mov	r0, r1
   14ff4:	ldrb	r2, [r0, #-1]!
   14ff8:	cmp	r2, #32
   14ffc:	bne	15010 <__assert_fail@plt+0x3c50>
   15000:	strb	r5, [r1, #-1]
   15004:	cmp	r4, r0
   15008:	mov	r1, r0
   1500c:	bcc	14ff4 <__assert_fail@plt+0x3c34>
   15010:	mov	r0, r4
   15014:	pop	{r4, r5, fp, pc}
   15018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1501c:	add	fp, sp, #28
   15020:	sub	sp, sp, #12
   15024:	mov	r6, r3
   15028:	str	r2, [sp, #4]
   1502c:	mov	r9, r1
   15030:	mov	r7, #0
   15034:	str	r7, [sp, #8]
   15038:	bl	11108 <utmpxname@plt>
   1503c:	bl	11180 <setutxent@plt>
   15040:	bl	113b4 <getutxent@plt>
   15044:	cmp	r0, #0
   15048:	beq	150cc <__assert_fail@plt+0x3d0c>
   1504c:	mov	r5, r0
   15050:	mov	r4, #0
   15054:	mov	r8, #384	; 0x180
   15058:	add	sl, sp, #8
   1505c:	mov	r7, #0
   15060:	b	1508c <__assert_fail@plt+0x3ccc>
   15064:	add	r0, r4, r4, lsl #1
   15068:	add	r0, r7, r0, lsl #7
   1506c:	mov	r1, r5
   15070:	mov	r2, #384	; 0x180
   15074:	bl	11138 <memcpy@plt>
   15078:	add	r4, r4, #1
   1507c:	bl	113b4 <getutxent@plt>
   15080:	mov	r5, r0
   15084:	cmp	r0, #0
   15088:	beq	150d0 <__assert_fail@plt+0x3d10>
   1508c:	mov	r0, r5
   15090:	mov	r1, r6
   15094:	bl	150ec <__assert_fail@plt+0x3d2c>
   15098:	cmp	r0, #0
   1509c:	beq	1507c <__assert_fail@plt+0x3cbc>
   150a0:	ldr	r0, [sp, #8]
   150a4:	cmp	r4, r0
   150a8:	bne	15064 <__assert_fail@plt+0x3ca4>
   150ac:	str	r8, [sp]
   150b0:	mov	r0, r7
   150b4:	mov	r1, sl
   150b8:	mov	r2, #1
   150bc:	mvn	r3, #0
   150c0:	bl	15808 <__assert_fail@plt+0x4448>
   150c4:	mov	r7, r0
   150c8:	b	15064 <__assert_fail@plt+0x3ca4>
   150cc:	mov	r4, #0
   150d0:	bl	1133c <endutxent@plt>
   150d4:	str	r4, [r9]
   150d8:	ldr	r0, [sp, #4]
   150dc:	str	r7, [r0]
   150e0:	mov	r0, #0
   150e4:	sub	sp, fp, #28
   150e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150ec:	push	{r4, sl, fp, lr}
   150f0:	add	fp, sp, #8
   150f4:	ldrb	r2, [r0, #44]	; 0x2c
   150f8:	mov	r4, #0
   150fc:	cmp	r2, #0
   15100:	mov	r2, #0
   15104:	beq	15118 <__assert_fail@plt+0x3d58>
   15108:	ldrh	r2, [r0]
   1510c:	sub	r2, r2, #7
   15110:	clz	r2, r2
   15114:	lsr	r2, r2, #5
   15118:	tst	r1, #2
   1511c:	beq	15130 <__assert_fail@plt+0x3d70>
   15120:	cmp	r2, #0
   15124:	bne	15130 <__assert_fail@plt+0x3d70>
   15128:	mov	r0, r4
   1512c:	pop	{r4, sl, fp, pc}
   15130:	tst	r1, #1
   15134:	beq	15160 <__assert_fail@plt+0x3da0>
   15138:	eors	r1, r2, #1
   1513c:	bne	15160 <__assert_fail@plt+0x3da0>
   15140:	ldr	r0, [r0, #4]
   15144:	cmp	r0, #1
   15148:	blt	15160 <__assert_fail@plt+0x3da0>
   1514c:	mov	r4, #0
   15150:	mov	r1, #0
   15154:	bl	11270 <kill@plt>
   15158:	cmn	r0, #1
   1515c:	ble	1516c <__assert_fail@plt+0x3dac>
   15160:	mov	r4, #1
   15164:	mov	r0, r4
   15168:	pop	{r4, sl, fp, pc}
   1516c:	bl	112c4 <__errno_location@plt>
   15170:	ldr	r0, [r0]
   15174:	cmp	r0, #3
   15178:	movne	r4, #1
   1517c:	mov	r0, r4
   15180:	pop	{r4, sl, fp, pc}
   15184:	b	15188 <__assert_fail@plt+0x3dc8>
   15188:	push	{r4, r5, r6, r7, fp, lr}
   1518c:	add	fp, sp, #16
   15190:	mov	r6, r2
   15194:	mov	r4, r1
   15198:	bl	15220 <__assert_fail@plt+0x3e60>
   1519c:	cmp	r0, #0
   151a0:	beq	151d0 <__assert_fail@plt+0x3e10>
   151a4:	mov	r7, r0
   151a8:	bl	112ac <strlen@plt>
   151ac:	cmp	r0, r6
   151b0:	bcs	151ec <__assert_fail@plt+0x3e2c>
   151b4:	add	r2, r0, #1
   151b8:	mov	r0, r4
   151bc:	mov	r1, r7
   151c0:	bl	11138 <memcpy@plt>
   151c4:	mov	r5, #0
   151c8:	mov	r0, r5
   151cc:	pop	{r4, r5, r6, r7, fp, pc}
   151d0:	mov	r5, #22
   151d4:	cmp	r6, #0
   151d8:	beq	15214 <__assert_fail@plt+0x3e54>
   151dc:	mov	r0, #0
   151e0:	strb	r0, [r4]
   151e4:	mov	r0, r5
   151e8:	pop	{r4, r5, r6, r7, fp, pc}
   151ec:	mov	r5, #34	; 0x22
   151f0:	cmp	r6, #0
   151f4:	beq	15214 <__assert_fail@plt+0x3e54>
   151f8:	sub	r6, r6, #1
   151fc:	mov	r0, r4
   15200:	mov	r1, r7
   15204:	mov	r2, r6
   15208:	bl	11138 <memcpy@plt>
   1520c:	mov	r0, #0
   15210:	strb	r0, [r4, r6]
   15214:	mov	r0, r5
   15218:	pop	{r4, r5, r6, r7, fp, pc}
   1521c:	b	15220 <__assert_fail@plt+0x3e60>
   15220:	mov	r1, #0
   15224:	b	11348 <setlocale@plt>
   15228:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1522c:	add	fp, sp, #24
   15230:	sub	sp, sp, #32
   15234:	mov	r4, r2
   15238:	mov	r8, r0
   1523c:	ldr	r6, [fp, #12]
   15240:	ldr	r7, [fp, #8]
   15244:	cmp	r1, #0
   15248:	beq	15270 <__assert_fail@plt+0x3eb0>
   1524c:	mov	r5, r1
   15250:	str	r4, [sp]
   15254:	str	r3, [sp, #4]
   15258:	movw	r2, #27724	; 0x6c4c
   1525c:	movt	r2, #1
   15260:	mov	r0, r8
   15264:	mov	r1, #1
   15268:	mov	r3, r5
   1526c:	b	15288 <__assert_fail@plt+0x3ec8>
   15270:	str	r3, [sp]
   15274:	movw	r2, #27736	; 0x6c58
   15278:	movt	r2, #1
   1527c:	mov	r0, r8
   15280:	mov	r1, #1
   15284:	mov	r3, r4
   15288:	bl	11318 <__fprintf_chk@plt>
   1528c:	movw	r1, #27743	; 0x6c5f
   15290:	movt	r1, #1
   15294:	mov	r0, #0
   15298:	mov	r2, #5
   1529c:	bl	11168 <dcgettext@plt>
   152a0:	mov	r3, r0
   152a4:	movw	r0, #2022	; 0x7e6
   152a8:	str	r0, [sp]
   152ac:	movw	r2, #28461	; 0x6f2d
   152b0:	movt	r2, #1
   152b4:	mov	r0, r8
   152b8:	mov	r1, #1
   152bc:	bl	11318 <__fprintf_chk@plt>
   152c0:	movw	r4, #26650	; 0x681a
   152c4:	movt	r4, #1
   152c8:	mov	r0, r4
   152cc:	mov	r1, r8
   152d0:	bl	110d8 <fputs_unlocked@plt>
   152d4:	movw	r1, #27747	; 0x6c63
   152d8:	movt	r1, #1
   152dc:	mov	r0, #0
   152e0:	mov	r2, #5
   152e4:	bl	11168 <dcgettext@plt>
   152e8:	mov	r2, r0
   152ec:	movw	r3, #27918	; 0x6d0e
   152f0:	movt	r3, #1
   152f4:	mov	r0, r8
   152f8:	mov	r1, #1
   152fc:	bl	11318 <__fprintf_chk@plt>
   15300:	mov	r0, r4
   15304:	mov	r1, r8
   15308:	bl	110d8 <fputs_unlocked@plt>
   1530c:	cmp	r6, #9
   15310:	bhi	1534c <__assert_fail@plt+0x3f8c>
   15314:	add	r0, pc, #0
   15318:	ldr	pc, [r0, r6, lsl #2]
   1531c:	andeq	r5, r1, r4, asr #6
   15320:	andeq	r5, r1, r8, asr r3
   15324:	andeq	r5, r1, r8, lsl #7
   15328:			; <UNDEFINED> instruction: 0x000153b0
   1532c:	ldrdeq	r5, [r1], -r8
   15330:	andeq	r5, r1, r0, lsl #8
   15334:	andeq	r5, r1, r8, lsr #8
   15338:	andeq	r5, r1, r0, ror #8
   1533c:	andeq	r5, r1, r0, lsl #10
   15340:	andeq	r5, r1, r8, lsr #9
   15344:	sub	sp, fp, #24
   15348:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1534c:	movw	r1, #28271	; 0x6e6f
   15350:	movt	r1, #1
   15354:	b	154b0 <__assert_fail@plt+0x40f0>
   15358:	movw	r1, #27952	; 0x6d30
   1535c:	movt	r1, #1
   15360:	mov	r0, #0
   15364:	mov	r2, #5
   15368:	bl	11168 <dcgettext@plt>
   1536c:	mov	r2, r0
   15370:	ldr	r3, [r7]
   15374:	mov	r0, r8
   15378:	mov	r1, #1
   1537c:	sub	sp, fp, #24
   15380:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15384:	b	11318 <__fprintf_chk@plt>
   15388:	movw	r1, #27968	; 0x6d40
   1538c:	movt	r1, #1
   15390:	mov	r0, #0
   15394:	mov	r2, #5
   15398:	bl	11168 <dcgettext@plt>
   1539c:	mov	r2, r0
   153a0:	ldr	r3, [r7]
   153a4:	ldr	r0, [r7, #4]
   153a8:	str	r0, [sp]
   153ac:	b	1549c <__assert_fail@plt+0x40dc>
   153b0:	movw	r1, #27991	; 0x6d57
   153b4:	movt	r1, #1
   153b8:	mov	r0, #0
   153bc:	mov	r2, #5
   153c0:	bl	11168 <dcgettext@plt>
   153c4:	mov	r2, r0
   153c8:	ldr	r3, [r7]
   153cc:	ldmib	r7, {r0, r1}
   153d0:	stm	sp, {r0, r1}
   153d4:	b	1549c <__assert_fail@plt+0x40dc>
   153d8:	movw	r1, #28019	; 0x6d73
   153dc:	movt	r1, #1
   153e0:	mov	r0, #0
   153e4:	mov	r2, #5
   153e8:	bl	11168 <dcgettext@plt>
   153ec:	mov	r2, r0
   153f0:	ldr	r3, [r7]
   153f4:	ldmib	r7, {r0, r1, r7}
   153f8:	stm	sp, {r0, r1, r7}
   153fc:	b	1549c <__assert_fail@plt+0x40dc>
   15400:	movw	r1, #28051	; 0x6d93
   15404:	movt	r1, #1
   15408:	mov	r0, #0
   1540c:	mov	r2, #5
   15410:	bl	11168 <dcgettext@plt>
   15414:	mov	r2, r0
   15418:	ldr	r3, [r7]
   1541c:	ldmib	r7, {r0, r1, r6, r7}
   15420:	stm	sp, {r0, r1, r6, r7}
   15424:	b	1549c <__assert_fail@plt+0x40dc>
   15428:	movw	r1, #28087	; 0x6db7
   1542c:	movt	r1, #1
   15430:	mov	r0, #0
   15434:	mov	r2, #5
   15438:	bl	11168 <dcgettext@plt>
   1543c:	mov	r2, r0
   15440:	ldr	r3, [r7]
   15444:	ldmib	r7, {r0, r1, r6}
   15448:	ldr	r5, [r7, #16]
   1544c:	ldr	r7, [r7, #20]
   15450:	stm	sp, {r0, r1, r6}
   15454:	str	r5, [sp, #12]
   15458:	str	r7, [sp, #16]
   1545c:	b	1549c <__assert_fail@plt+0x40dc>
   15460:	movw	r1, #28127	; 0x6ddf
   15464:	movt	r1, #1
   15468:	mov	r0, #0
   1546c:	mov	r2, #5
   15470:	bl	11168 <dcgettext@plt>
   15474:	mov	r2, r0
   15478:	ldr	r3, [r7]
   1547c:	ldmib	r7, {r0, r1, r6}
   15480:	ldr	r5, [r7, #16]
   15484:	ldr	r4, [r7, #20]
   15488:	ldr	r7, [r7, #24]
   1548c:	stm	sp, {r0, r1, r6}
   15490:	str	r5, [sp, #12]
   15494:	str	r4, [sp, #16]
   15498:	str	r7, [sp, #20]
   1549c:	mov	r0, r8
   154a0:	mov	r1, #1
   154a4:	b	15550 <__assert_fail@plt+0x4190>
   154a8:	movw	r1, #28219	; 0x6e3b
   154ac:	movt	r1, #1
   154b0:	mov	r0, #0
   154b4:	mov	r2, #5
   154b8:	bl	11168 <dcgettext@plt>
   154bc:	mov	ip, r0
   154c0:	ldr	r3, [r7]
   154c4:	ldr	r0, [r7, #4]
   154c8:	ldr	r1, [r7, #8]
   154cc:	ldr	r6, [r7, #12]
   154d0:	ldr	r5, [r7, #16]
   154d4:	ldr	r4, [r7, #20]
   154d8:	ldr	r2, [r7, #24]
   154dc:	ldr	lr, [r7, #28]
   154e0:	ldr	r7, [r7, #32]
   154e4:	stm	sp, {r0, r1, r6}
   154e8:	str	r5, [sp, #12]
   154ec:	str	r4, [sp, #16]
   154f0:	str	r2, [sp, #20]
   154f4:	str	lr, [sp, #24]
   154f8:	str	r7, [sp, #28]
   154fc:	b	15544 <__assert_fail@plt+0x4184>
   15500:	movw	r1, #28171	; 0x6e0b
   15504:	movt	r1, #1
   15508:	mov	r0, #0
   1550c:	mov	r2, #5
   15510:	bl	11168 <dcgettext@plt>
   15514:	mov	ip, r0
   15518:	ldr	r3, [r7]
   1551c:	ldmib	r7, {r0, r1, r6}
   15520:	ldr	r5, [r7, #16]
   15524:	ldr	r4, [r7, #20]
   15528:	ldr	r2, [r7, #24]
   1552c:	ldr	r7, [r7, #28]
   15530:	stm	sp, {r0, r1, r6}
   15534:	str	r5, [sp, #12]
   15538:	str	r4, [sp, #16]
   1553c:	str	r2, [sp, #20]
   15540:	str	r7, [sp, #24]
   15544:	mov	r0, r8
   15548:	mov	r1, #1
   1554c:	mov	r2, ip
   15550:	bl	11318 <__fprintf_chk@plt>
   15554:	sub	sp, fp, #24
   15558:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1555c:	push	{r4, sl, fp, lr}
   15560:	add	fp, sp, #8
   15564:	sub	sp, sp, #8
   15568:	mov	lr, #0
   1556c:	ldr	ip, [fp, #8]
   15570:	ldr	r4, [ip, lr, lsl #2]
   15574:	add	lr, lr, #1
   15578:	cmp	r4, #0
   1557c:	bne	15570 <__assert_fail@plt+0x41b0>
   15580:	sub	r4, lr, #1
   15584:	str	ip, [sp]
   15588:	str	r4, [sp, #4]
   1558c:	bl	15228 <__assert_fail@plt+0x3e68>
   15590:	sub	sp, fp, #8
   15594:	pop	{r4, sl, fp, pc}
   15598:	push	{r4, r5, fp, lr}
   1559c:	add	fp, sp, #8
   155a0:	sub	sp, sp, #48	; 0x30
   155a4:	mov	ip, #0
   155a8:	ldr	r4, [fp, #8]
   155ac:	add	lr, sp, #8
   155b0:	ldr	r5, [r4]
   155b4:	str	r5, [lr, ip, lsl #2]
   155b8:	cmp	r5, #0
   155bc:	beq	155d4 <__assert_fail@plt+0x4214>
   155c0:	add	ip, ip, #1
   155c4:	add	r4, r4, #4
   155c8:	cmp	ip, #10
   155cc:	bne	155b0 <__assert_fail@plt+0x41f0>
   155d0:	mov	ip, #10
   155d4:	str	lr, [sp]
   155d8:	str	ip, [sp, #4]
   155dc:	bl	15228 <__assert_fail@plt+0x3e68>
   155e0:	sub	sp, fp, #8
   155e4:	pop	{r4, r5, fp, pc}
   155e8:	push	{fp, lr}
   155ec:	mov	fp, sp
   155f0:	sub	sp, sp, #8
   155f4:	add	ip, fp, #8
   155f8:	str	ip, [sp, #4]
   155fc:	str	ip, [sp]
   15600:	bl	15598 <__assert_fail@plt+0x41d8>
   15604:	mov	sp, fp
   15608:	pop	{fp, pc}
   1560c:	push	{fp, lr}
   15610:	mov	fp, sp
   15614:	movw	r0, #33148	; 0x817c
   15618:	movt	r0, #2
   1561c:	ldr	r1, [r0]
   15620:	movw	r0, #26650	; 0x681a
   15624:	movt	r0, #1
   15628:	bl	110d8 <fputs_unlocked@plt>
   1562c:	movw	r1, #28331	; 0x6eab
   15630:	movt	r1, #1
   15634:	mov	r0, #0
   15638:	mov	r2, #5
   1563c:	bl	11168 <dcgettext@plt>
   15640:	mov	r1, r0
   15644:	movw	r2, #28351	; 0x6ebf
   15648:	movt	r2, #1
   1564c:	mov	r0, #1
   15650:	bl	11300 <__printf_chk@plt>
   15654:	movw	r1, #28373	; 0x6ed5
   15658:	movt	r1, #1
   1565c:	mov	r0, #0
   15660:	mov	r2, #5
   15664:	bl	11168 <dcgettext@plt>
   15668:	mov	r1, r0
   1566c:	movw	r2, #26236	; 0x667c
   15670:	movt	r2, #1
   15674:	movw	r3, #26459	; 0x675b
   15678:	movt	r3, #1
   1567c:	mov	r0, #1
   15680:	bl	11300 <__printf_chk@plt>
   15684:	movw	r1, #28393	; 0x6ee9
   15688:	movt	r1, #1
   1568c:	mov	r0, #0
   15690:	mov	r2, #5
   15694:	bl	11168 <dcgettext@plt>
   15698:	mov	r1, r0
   1569c:	movw	r2, #28432	; 0x6f10
   156a0:	movt	r2, #1
   156a4:	mov	r0, #1
   156a8:	pop	{fp, lr}
   156ac:	b	11300 <__printf_chk@plt>
   156b0:	b	156b4 <__assert_fail@plt+0x42f4>
   156b4:	push	{r4, r5, r6, sl, fp, lr}
   156b8:	add	fp, sp, #16
   156bc:	mov	r4, r2
   156c0:	mov	r5, r1
   156c4:	mov	r6, r0
   156c8:	bl	15eb4 <__assert_fail@plt+0x4af4>
   156cc:	cmp	r0, #0
   156d0:	popne	{r4, r5, r6, sl, fp, pc}
   156d4:	cmp	r6, #0
   156d8:	beq	156ec <__assert_fail@plt+0x432c>
   156dc:	cmp	r5, #0
   156e0:	cmpne	r4, #0
   156e4:	bne	156ec <__assert_fail@plt+0x432c>
   156e8:	pop	{r4, r5, r6, sl, fp, pc}
   156ec:	bl	15a78 <__assert_fail@plt+0x46b8>
   156f0:	push	{fp, lr}
   156f4:	mov	fp, sp
   156f8:	bl	15b10 <__assert_fail@plt+0x4750>
   156fc:	pop	{fp, lr}
   15700:	b	15704 <__assert_fail@plt+0x4344>
   15704:	cmp	r0, #0
   15708:	bxne	lr
   1570c:	push	{fp, lr}
   15710:	mov	fp, sp
   15714:	bl	15a78 <__assert_fail@plt+0x46b8>
   15718:	push	{fp, lr}
   1571c:	mov	fp, sp
   15720:	bl	15de4 <__assert_fail@plt+0x4a24>
   15724:	pop	{fp, lr}
   15728:	b	15704 <__assert_fail@plt+0x4344>
   1572c:	b	156f0 <__assert_fail@plt+0x4330>
   15730:	push	{r4, r5, fp, lr}
   15734:	add	fp, sp, #8
   15738:	mov	r4, r1
   1573c:	mov	r5, r0
   15740:	bl	15b40 <__assert_fail@plt+0x4780>
   15744:	cmp	r0, #0
   15748:	popne	{r4, r5, fp, pc}
   1574c:	cmp	r5, #0
   15750:	beq	15760 <__assert_fail@plt+0x43a0>
   15754:	cmp	r4, #0
   15758:	bne	15760 <__assert_fail@plt+0x43a0>
   1575c:	pop	{r4, r5, fp, pc}
   15760:	bl	15a78 <__assert_fail@plt+0x46b8>
   15764:	push	{fp, lr}
   15768:	mov	fp, sp
   1576c:	bl	15de8 <__assert_fail@plt+0x4a28>
   15770:	pop	{fp, lr}
   15774:	b	15704 <__assert_fail@plt+0x4344>
   15778:	push	{fp, lr}
   1577c:	mov	fp, sp
   15780:	bl	15df8 <__assert_fail@plt+0x4a38>
   15784:	pop	{fp, lr}
   15788:	b	15704 <__assert_fail@plt+0x4344>
   1578c:	mov	r2, r1
   15790:	mov	r1, r0
   15794:	mov	r0, #0
   15798:	b	156b4 <__assert_fail@plt+0x42f4>
   1579c:	mov	r2, r1
   157a0:	mov	r1, r0
   157a4:	mov	r0, #0
   157a8:	b	15778 <__assert_fail@plt+0x43b8>
   157ac:	mov	r2, #1
   157b0:	b	157b4 <__assert_fail@plt+0x43f4>
   157b4:	push	{r4, r5, fp, lr}
   157b8:	add	fp, sp, #8
   157bc:	mov	r4, r1
   157c0:	ldr	r5, [r1]
   157c4:	cmp	r0, #0
   157c8:	beq	157e0 <__assert_fail@plt+0x4420>
   157cc:	mov	r1, #1
   157d0:	add	r1, r1, r5, lsr #1
   157d4:	adds	r5, r5, r1
   157d8:	bcc	157f8 <__assert_fail@plt+0x4438>
   157dc:	bl	15a78 <__assert_fail@plt+0x46b8>
   157e0:	cmp	r5, #0
   157e4:	bne	157f8 <__assert_fail@plt+0x4438>
   157e8:	mov	r1, #64	; 0x40
   157ec:	udiv	r5, r1, r2
   157f0:	cmp	r2, #64	; 0x40
   157f4:	addhi	r5, r5, #1
   157f8:	mov	r1, r5
   157fc:	bl	156b4 <__assert_fail@plt+0x42f4>
   15800:	str	r5, [r4]
   15804:	pop	{r4, r5, fp, pc}
   15808:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1580c:	add	fp, sp, #24
   15810:	mov	r8, r1
   15814:	ldr	r6, [r1]
   15818:	add	r1, r6, r6, asr #1
   1581c:	cmp	r1, r6
   15820:	mvnvs	r1, #-2147483648	; 0x80000000
   15824:	cmp	r1, r3
   15828:	mov	r5, r1
   1582c:	movgt	r5, r3
   15830:	cmn	r3, #1
   15834:	movle	r5, r1
   15838:	ldr	r4, [fp, #8]
   1583c:	cmn	r4, #1
   15840:	ble	15868 <__assert_fail@plt+0x44a8>
   15844:	cmp	r4, #0
   15848:	beq	158bc <__assert_fail@plt+0x44fc>
   1584c:	cmn	r5, #1
   15850:	ble	15890 <__assert_fail@plt+0x44d0>
   15854:	mvn	r7, #-2147483648	; 0x80000000
   15858:	udiv	r1, r7, r4
   1585c:	cmp	r1, r5
   15860:	bge	158bc <__assert_fail@plt+0x44fc>
   15864:	b	158cc <__assert_fail@plt+0x450c>
   15868:	cmn	r5, #1
   1586c:	ble	158ac <__assert_fail@plt+0x44ec>
   15870:	cmn	r4, #1
   15874:	beq	158bc <__assert_fail@plt+0x44fc>
   15878:	mov	r1, #-2147483648	; 0x80000000
   1587c:	sdiv	r1, r1, r4
   15880:	mvn	r7, #-2147483648	; 0x80000000
   15884:	cmp	r1, r5
   15888:	bge	158bc <__assert_fail@plt+0x44fc>
   1588c:	b	158cc <__assert_fail@plt+0x450c>
   15890:	beq	158bc <__assert_fail@plt+0x44fc>
   15894:	mov	r1, #-2147483648	; 0x80000000
   15898:	sdiv	r1, r1, r5
   1589c:	mvn	r7, #-2147483648	; 0x80000000
   158a0:	cmp	r1, r4
   158a4:	bge	158bc <__assert_fail@plt+0x44fc>
   158a8:	b	158cc <__assert_fail@plt+0x450c>
   158ac:	mvn	r7, #-2147483648	; 0x80000000
   158b0:	sdiv	r1, r7, r4
   158b4:	cmp	r5, r1
   158b8:	blt	158cc <__assert_fail@plt+0x450c>
   158bc:	mul	r1, r5, r4
   158c0:	mov	r7, #64	; 0x40
   158c4:	cmp	r1, #63	; 0x3f
   158c8:	bgt	158d4 <__assert_fail@plt+0x4514>
   158cc:	sdiv	r5, r7, r4
   158d0:	mul	r1, r5, r4
   158d4:	cmp	r0, #0
   158d8:	moveq	r7, #0
   158dc:	streq	r7, [r8]
   158e0:	sub	r7, r5, r6
   158e4:	cmp	r7, r2
   158e8:	bge	15994 <__assert_fail@plt+0x45d4>
   158ec:	add	r5, r6, r2
   158f0:	mov	r1, #0
   158f4:	cmp	r5, r3
   158f8:	mov	r2, #0
   158fc:	movwgt	r2, #1
   15900:	cmn	r3, #1
   15904:	movwgt	r1, #1
   15908:	cmp	r5, r6
   1590c:	bvs	1597c <__assert_fail@plt+0x45bc>
   15910:	ands	r1, r1, r2
   15914:	bne	1597c <__assert_fail@plt+0x45bc>
   15918:	cmn	r4, #1
   1591c:	ble	15944 <__assert_fail@plt+0x4584>
   15920:	cmp	r4, #0
   15924:	beq	15990 <__assert_fail@plt+0x45d0>
   15928:	cmn	r5, #1
   1592c:	ble	15968 <__assert_fail@plt+0x45a8>
   15930:	mvn	r1, #-2147483648	; 0x80000000
   15934:	udiv	r1, r1, r4
   15938:	cmp	r1, r5
   1593c:	bge	15990 <__assert_fail@plt+0x45d0>
   15940:	b	1597c <__assert_fail@plt+0x45bc>
   15944:	cmn	r5, #1
   15948:	ble	15980 <__assert_fail@plt+0x45c0>
   1594c:	cmn	r4, #1
   15950:	beq	15990 <__assert_fail@plt+0x45d0>
   15954:	mov	r1, #-2147483648	; 0x80000000
   15958:	sdiv	r1, r1, r4
   1595c:	cmp	r1, r5
   15960:	bge	15990 <__assert_fail@plt+0x45d0>
   15964:	b	1597c <__assert_fail@plt+0x45bc>
   15968:	beq	15990 <__assert_fail@plt+0x45d0>
   1596c:	mov	r1, #-2147483648	; 0x80000000
   15970:	sdiv	r1, r1, r5
   15974:	cmp	r1, r4
   15978:	bge	15990 <__assert_fail@plt+0x45d0>
   1597c:	bl	15a78 <__assert_fail@plt+0x46b8>
   15980:	mvn	r1, #-2147483648	; 0x80000000
   15984:	sdiv	r1, r1, r4
   15988:	cmp	r5, r1
   1598c:	blt	1597c <__assert_fail@plt+0x45bc>
   15990:	mul	r1, r5, r4
   15994:	bl	15730 <__assert_fail@plt+0x4370>
   15998:	str	r5, [r8]
   1599c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   159a0:	mov	r1, #1
   159a4:	b	159a8 <__assert_fail@plt+0x45e8>
   159a8:	push	{fp, lr}
   159ac:	mov	fp, sp
   159b0:	bl	15abc <__assert_fail@plt+0x46fc>
   159b4:	pop	{fp, lr}
   159b8:	b	15704 <__assert_fail@plt+0x4344>
   159bc:	mov	r1, #1
   159c0:	b	159c4 <__assert_fail@plt+0x4604>
   159c4:	push	{fp, lr}
   159c8:	mov	fp, sp
   159cc:	bl	15df4 <__assert_fail@plt+0x4a34>
   159d0:	pop	{fp, lr}
   159d4:	b	15704 <__assert_fail@plt+0x4344>
   159d8:	push	{r4, r5, fp, lr}
   159dc:	add	fp, sp, #8
   159e0:	mov	r4, r1
   159e4:	mov	r5, r0
   159e8:	mov	r0, r1
   159ec:	bl	156f0 <__assert_fail@plt+0x4330>
   159f0:	mov	r1, r5
   159f4:	mov	r2, r4
   159f8:	pop	{r4, r5, fp, lr}
   159fc:	b	11138 <memcpy@plt>
   15a00:	push	{r4, r5, fp, lr}
   15a04:	add	fp, sp, #8
   15a08:	mov	r4, r1
   15a0c:	mov	r5, r0
   15a10:	mov	r0, r1
   15a14:	bl	15718 <__assert_fail@plt+0x4358>
   15a18:	mov	r1, r5
   15a1c:	mov	r2, r4
   15a20:	pop	{r4, r5, fp, lr}
   15a24:	b	11138 <memcpy@plt>
   15a28:	push	{r4, r5, fp, lr}
   15a2c:	add	fp, sp, #8
   15a30:	mov	r4, r1
   15a34:	mov	r5, r0
   15a38:	add	r0, r1, #1
   15a3c:	bl	15718 <__assert_fail@plt+0x4358>
   15a40:	mov	r1, #0
   15a44:	strb	r1, [r0, r4]
   15a48:	mov	r1, r5
   15a4c:	mov	r2, r4
   15a50:	pop	{r4, r5, fp, lr}
   15a54:	b	11138 <memcpy@plt>
   15a58:	push	{r4, sl, fp, lr}
   15a5c:	add	fp, sp, #8
   15a60:	mov	r4, r0
   15a64:	bl	112ac <strlen@plt>
   15a68:	add	r1, r0, #1
   15a6c:	mov	r0, r4
   15a70:	pop	{r4, sl, fp, lr}
   15a74:	b	159d8 <__assert_fail@plt+0x4618>
   15a78:	push	{fp, lr}
   15a7c:	mov	fp, sp
   15a80:	movw	r0, #33060	; 0x8124
   15a84:	movt	r0, #2
   15a88:	ldr	r4, [r0]
   15a8c:	movw	r1, #28508	; 0x6f5c
   15a90:	movt	r1, #1
   15a94:	mov	r0, #0
   15a98:	mov	r2, #5
   15a9c:	bl	11168 <dcgettext@plt>
   15aa0:	mov	r3, r0
   15aa4:	movw	r2, #27463	; 0x6b47
   15aa8:	movt	r2, #1
   15aac:	mov	r0, r4
   15ab0:	mov	r1, #0
   15ab4:	bl	111f8 <error@plt>
   15ab8:	bl	113a8 <abort@plt>
   15abc:	clz	r2, r1
   15ac0:	lsr	r2, r2, #5
   15ac4:	clz	r3, r0
   15ac8:	lsr	r3, r3, #5
   15acc:	orrs	r2, r3, r2
   15ad0:	movwne	r1, #1
   15ad4:	movwne	r0, #1
   15ad8:	cmp	r1, #0
   15adc:	beq	15b0c <__assert_fail@plt+0x474c>
   15ae0:	mvn	r2, #-2147483648	; 0x80000000
   15ae4:	udiv	r2, r2, r1
   15ae8:	cmp	r2, r0
   15aec:	bcs	15b0c <__assert_fail@plt+0x474c>
   15af0:	push	{fp, lr}
   15af4:	mov	fp, sp
   15af8:	bl	112c4 <__errno_location@plt>
   15afc:	mov	r1, #12
   15b00:	str	r1, [r0]
   15b04:	mov	r0, #0
   15b08:	pop	{fp, pc}
   15b0c:	b	110cc <calloc@plt>
   15b10:	cmp	r0, #0
   15b14:	movweq	r0, #1
   15b18:	cmn	r0, #1
   15b1c:	ble	15b24 <__assert_fail@plt+0x4764>
   15b20:	b	1121c <malloc@plt>
   15b24:	push	{fp, lr}
   15b28:	mov	fp, sp
   15b2c:	bl	112c4 <__errno_location@plt>
   15b30:	mov	r1, #12
   15b34:	str	r1, [r0]
   15b38:	mov	r0, #0
   15b3c:	pop	{fp, pc}
   15b40:	push	{fp, lr}
   15b44:	mov	fp, sp
   15b48:	cmp	r0, #0
   15b4c:	beq	15b68 <__assert_fail@plt+0x47a8>
   15b50:	cmp	r1, #0
   15b54:	beq	15b74 <__assert_fail@plt+0x47b4>
   15b58:	cmn	r1, #1
   15b5c:	ble	15b80 <__assert_fail@plt+0x47c0>
   15b60:	pop	{fp, lr}
   15b64:	b	1118c <realloc@plt>
   15b68:	mov	r0, r1
   15b6c:	pop	{fp, lr}
   15b70:	b	15b10 <__assert_fail@plt+0x4750>
   15b74:	bl	13254 <__assert_fail@plt+0x1e94>
   15b78:	mov	r0, #0
   15b7c:	pop	{fp, pc}
   15b80:	bl	112c4 <__errno_location@plt>
   15b84:	mov	r1, #12
   15b88:	str	r1, [r0]
   15b8c:	mov	r0, #0
   15b90:	pop	{fp, pc}
   15b94:	push	{r4, r5, r6, sl, fp, lr}
   15b98:	add	fp, sp, #16
   15b9c:	mov	r4, r0
   15ba0:	bl	111d4 <__fpending@plt>
   15ba4:	mov	r5, r0
   15ba8:	mov	r0, r4
   15bac:	bl	111e0 <ferror_unlocked@plt>
   15bb0:	mov	r6, r0
   15bb4:	mov	r0, r4
   15bb8:	bl	15c18 <__assert_fail@plt+0x4858>
   15bbc:	cmp	r6, #0
   15bc0:	beq	15be4 <__assert_fail@plt+0x4824>
   15bc4:	mvn	r4, #0
   15bc8:	cmp	r0, #0
   15bcc:	bne	15c10 <__assert_fail@plt+0x4850>
   15bd0:	bl	112c4 <__errno_location@plt>
   15bd4:	mov	r1, #0
   15bd8:	str	r1, [r0]
   15bdc:	mov	r0, r4
   15be0:	pop	{r4, r5, r6, sl, fp, pc}
   15be4:	cmp	r0, #0
   15be8:	mov	r4, r0
   15bec:	mvnne	r4, #0
   15bf0:	cmp	r5, #0
   15bf4:	bne	15c10 <__assert_fail@plt+0x4850>
   15bf8:	cmp	r0, #0
   15bfc:	beq	15c10 <__assert_fail@plt+0x4850>
   15c00:	bl	112c4 <__errno_location@plt>
   15c04:	ldr	r0, [r0]
   15c08:	subs	r4, r0, #9
   15c0c:	mvnne	r4, #0
   15c10:	mov	r0, r4
   15c14:	pop	{r4, r5, r6, sl, fp, pc}
   15c18:	push	{r4, r5, fp, lr}
   15c1c:	add	fp, sp, #8
   15c20:	sub	sp, sp, #8
   15c24:	mov	r4, r0
   15c28:	bl	1130c <fileno@plt>
   15c2c:	cmn	r0, #1
   15c30:	ble	15ca8 <__assert_fail@plt+0x48e8>
   15c34:	mov	r0, r4
   15c38:	bl	11240 <__freading@plt>
   15c3c:	cmp	r0, #0
   15c40:	beq	15c6c <__assert_fail@plt+0x48ac>
   15c44:	mov	r0, r4
   15c48:	bl	1130c <fileno@plt>
   15c4c:	mov	r1, #1
   15c50:	str	r1, [sp]
   15c54:	mov	r2, #0
   15c58:	mov	r3, #0
   15c5c:	bl	111bc <lseek64@plt>
   15c60:	and	r0, r0, r1
   15c64:	cmn	r0, #1
   15c68:	beq	15ca8 <__assert_fail@plt+0x48e8>
   15c6c:	mov	r0, r4
   15c70:	bl	15cb8 <__assert_fail@plt+0x48f8>
   15c74:	cmp	r0, #0
   15c78:	beq	15ca8 <__assert_fail@plt+0x48e8>
   15c7c:	bl	112c4 <__errno_location@plt>
   15c80:	ldr	r5, [r0]
   15c84:	mov	r0, r4
   15c88:	bl	11324 <fclose@plt>
   15c8c:	cmp	r5, #0
   15c90:	beq	15ca0 <__assert_fail@plt+0x48e0>
   15c94:	bl	112c4 <__errno_location@plt>
   15c98:	str	r5, [r0]
   15c9c:	mvn	r0, #0
   15ca0:	sub	sp, fp, #8
   15ca4:	pop	{r4, r5, fp, pc}
   15ca8:	mov	r0, r4
   15cac:	sub	sp, fp, #8
   15cb0:	pop	{r4, r5, fp, lr}
   15cb4:	b	11324 <fclose@plt>
   15cb8:	push	{r4, sl, fp, lr}
   15cbc:	add	fp, sp, #8
   15cc0:	mov	r4, r0
   15cc4:	cmp	r0, #0
   15cc8:	beq	15ce0 <__assert_fail@plt+0x4920>
   15ccc:	mov	r0, r4
   15cd0:	bl	11240 <__freading@plt>
   15cd4:	cmp	r0, #0
   15cd8:	movne	r0, r4
   15cdc:	blne	15cec <__assert_fail@plt+0x492c>
   15ce0:	mov	r0, r4
   15ce4:	pop	{r4, sl, fp, lr}
   15ce8:	b	110fc <fflush@plt>
   15cec:	push	{fp, lr}
   15cf0:	mov	fp, sp
   15cf4:	sub	sp, sp, #8
   15cf8:	ldrb	r1, [r0, #1]
   15cfc:	tst	r1, #1
   15d00:	beq	15d18 <__assert_fail@plt+0x4958>
   15d04:	mov	r1, #1
   15d08:	str	r1, [sp]
   15d0c:	mov	r2, #0
   15d10:	mov	r3, #0
   15d14:	bl	15d20 <__assert_fail@plt+0x4960>
   15d18:	mov	sp, fp
   15d1c:	pop	{fp, pc}
   15d20:	push	{r4, r5, r6, r7, fp, lr}
   15d24:	add	fp, sp, #16
   15d28:	sub	sp, sp, #8
   15d2c:	mov	r5, r3
   15d30:	mov	r6, r2
   15d34:	mov	r4, r0
   15d38:	ldr	r0, [r0, #4]
   15d3c:	ldr	r1, [r4, #8]
   15d40:	cmp	r1, r0
   15d44:	bne	15d60 <__assert_fail@plt+0x49a0>
   15d48:	ldrd	r0, [r4, #16]
   15d4c:	cmp	r1, r0
   15d50:	bne	15d60 <__assert_fail@plt+0x49a0>
   15d54:	ldr	r0, [r4, #36]	; 0x24
   15d58:	cmp	r0, #0
   15d5c:	beq	15d78 <__assert_fail@plt+0x49b8>
   15d60:	mov	r0, r4
   15d64:	mov	r2, r6
   15d68:	mov	r3, r5
   15d6c:	sub	sp, fp, #16
   15d70:	pop	{r4, r5, r6, r7, fp, lr}
   15d74:	b	11330 <fseeko64@plt>
   15d78:	ldr	r7, [fp, #8]
   15d7c:	mov	r0, r4
   15d80:	bl	1130c <fileno@plt>
   15d84:	str	r7, [sp]
   15d88:	mov	r2, r6
   15d8c:	mov	r3, r5
   15d90:	bl	111bc <lseek64@plt>
   15d94:	and	r2, r0, r1
   15d98:	cmn	r2, #1
   15d9c:	beq	15dbc <__assert_fail@plt+0x49fc>
   15da0:	strd	r0, [r4, #80]	; 0x50
   15da4:	ldr	r0, [r4]
   15da8:	bic	r0, r0, #16
   15dac:	str	r0, [r4]
   15db0:	mov	r0, #0
   15db4:	sub	sp, fp, #16
   15db8:	pop	{r4, r5, r6, r7, fp, pc}
   15dbc:	mvn	r0, #0
   15dc0:	sub	sp, fp, #16
   15dc4:	pop	{r4, r5, r6, r7, fp, pc}
   15dc8:	push	{fp, lr}
   15dcc:	mov	fp, sp
   15dd0:	bl	112c4 <__errno_location@plt>
   15dd4:	mov	r1, #12
   15dd8:	str	r1, [r0]
   15ddc:	mov	r0, #0
   15de0:	pop	{fp, pc}
   15de4:	b	15b10 <__assert_fail@plt+0x4750>
   15de8:	cmp	r1, #0
   15dec:	orreq	r1, r1, #1
   15df0:	b	15b40 <__assert_fail@plt+0x4780>
   15df4:	b	15abc <__assert_fail@plt+0x46fc>
   15df8:	clz	r3, r2
   15dfc:	lsr	ip, r3, #5
   15e00:	clz	r3, r1
   15e04:	lsr	r3, r3, #5
   15e08:	orrs	r3, r3, ip
   15e0c:	movwne	r1, #1
   15e10:	movwne	r2, #1
   15e14:	b	15eb4 <__assert_fail@plt+0x4af4>
   15e18:	push	{fp, lr}
   15e1c:	mov	fp, sp
   15e20:	mov	r0, #14
   15e24:	bl	11360 <nl_langinfo@plt>
   15e28:	movw	r1, #26651	; 0x681b
   15e2c:	movt	r1, #1
   15e30:	cmp	r0, #0
   15e34:	movne	r1, r0
   15e38:	ldrb	r2, [r1]
   15e3c:	movw	r0, #28525	; 0x6f6d
   15e40:	movt	r0, #1
   15e44:	cmp	r2, #0
   15e48:	movne	r0, r1
   15e4c:	pop	{fp, pc}
   15e50:	push	{r4, r5, r6, r7, fp, lr}
   15e54:	add	fp, sp, #16
   15e58:	sub	sp, sp, #8
   15e5c:	mov	r7, r2
   15e60:	mov	r4, r1
   15e64:	add	r5, sp, #4
   15e68:	cmp	r0, #0
   15e6c:	movne	r5, r0
   15e70:	mov	r0, r5
   15e74:	bl	111ec <mbrtowc@plt>
   15e78:	mov	r6, r0
   15e7c:	cmp	r7, #0
   15e80:	beq	15ea8 <__assert_fail@plt+0x4ae8>
   15e84:	cmn	r6, #2
   15e88:	bcc	15ea8 <__assert_fail@plt+0x4ae8>
   15e8c:	mov	r0, #0
   15e90:	bl	1327c <__assert_fail@plt+0x1ebc>
   15e94:	cmp	r0, #0
   15e98:	bne	15ea8 <__assert_fail@plt+0x4ae8>
   15e9c:	ldrb	r0, [r4]
   15ea0:	str	r0, [r5]
   15ea4:	mov	r6, #1
   15ea8:	mov	r0, r6
   15eac:	sub	sp, fp, #16
   15eb0:	pop	{r4, r5, r6, r7, fp, pc}
   15eb4:	cmp	r2, #0
   15eb8:	beq	15ee8 <__assert_fail@plt+0x4b28>
   15ebc:	mvn	r3, #0
   15ec0:	udiv	r3, r3, r2
   15ec4:	cmp	r3, r1
   15ec8:	bcs	15ee8 <__assert_fail@plt+0x4b28>
   15ecc:	push	{fp, lr}
   15ed0:	mov	fp, sp
   15ed4:	bl	112c4 <__errno_location@plt>
   15ed8:	mov	r1, #12
   15edc:	str	r1, [r0]
   15ee0:	mov	r0, #0
   15ee4:	pop	{fp, pc}
   15ee8:	mul	r1, r2, r1
   15eec:	b	15b40 <__assert_fail@plt+0x4780>
   15ef0:	cmp	r3, #0
   15ef4:	cmpeq	r2, #0
   15ef8:	bne	15f1c <__assert_fail@plt+0x4b5c>
   15efc:	cmp	r1, #0
   15f00:	movlt	r1, #-2147483648	; 0x80000000
   15f04:	movlt	r0, #0
   15f08:	blt	15f18 <__assert_fail@plt+0x4b58>
   15f0c:	cmpeq	r0, #0
   15f10:	mvnne	r1, #-2147483648	; 0x80000000
   15f14:	mvnne	r0, #0
   15f18:	b	15fc4 <__assert_fail@plt+0x4c04>
   15f1c:	sub	sp, sp, #8
   15f20:	push	{sp, lr}
   15f24:	cmp	r1, #0
   15f28:	blt	15f48 <__assert_fail@plt+0x4b88>
   15f2c:	cmp	r3, #0
   15f30:	blt	15f7c <__assert_fail@plt+0x4bbc>
   15f34:	bl	15fd4 <__assert_fail@plt+0x4c14>
   15f38:	ldr	lr, [sp, #4]
   15f3c:	add	sp, sp, #8
   15f40:	pop	{r2, r3}
   15f44:	bx	lr
   15f48:	rsbs	r0, r0, #0
   15f4c:	sbc	r1, r1, r1, lsl #1
   15f50:	cmp	r3, #0
   15f54:	blt	15fa0 <__assert_fail@plt+0x4be0>
   15f58:	bl	15fd4 <__assert_fail@plt+0x4c14>
   15f5c:	ldr	lr, [sp, #4]
   15f60:	add	sp, sp, #8
   15f64:	pop	{r2, r3}
   15f68:	rsbs	r0, r0, #0
   15f6c:	sbc	r1, r1, r1, lsl #1
   15f70:	rsbs	r2, r2, #0
   15f74:	sbc	r3, r3, r3, lsl #1
   15f78:	bx	lr
   15f7c:	rsbs	r2, r2, #0
   15f80:	sbc	r3, r3, r3, lsl #1
   15f84:	bl	15fd4 <__assert_fail@plt+0x4c14>
   15f88:	ldr	lr, [sp, #4]
   15f8c:	add	sp, sp, #8
   15f90:	pop	{r2, r3}
   15f94:	rsbs	r0, r0, #0
   15f98:	sbc	r1, r1, r1, lsl #1
   15f9c:	bx	lr
   15fa0:	rsbs	r2, r2, #0
   15fa4:	sbc	r3, r3, r3, lsl #1
   15fa8:	bl	15fd4 <__assert_fail@plt+0x4c14>
   15fac:	ldr	lr, [sp, #4]
   15fb0:	add	sp, sp, #8
   15fb4:	pop	{r2, r3}
   15fb8:	rsbs	r2, r2, #0
   15fbc:	sbc	r3, r3, r3, lsl #1
   15fc0:	bx	lr
   15fc4:	push	{r1, lr}
   15fc8:	mov	r0, #8
   15fcc:	bl	110e4 <raise@plt>
   15fd0:	pop	{r1, pc}
   15fd4:	cmp	r1, r3
   15fd8:	cmpeq	r0, r2
   15fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15fe0:	mov	r4, r0
   15fe4:	movcc	r0, #0
   15fe8:	mov	r5, r1
   15fec:	ldr	lr, [sp, #36]	; 0x24
   15ff0:	movcc	r1, r0
   15ff4:	bcc	160f0 <__assert_fail@plt+0x4d30>
   15ff8:	cmp	r3, #0
   15ffc:	clzeq	ip, r2
   16000:	clzne	ip, r3
   16004:	addeq	ip, ip, #32
   16008:	cmp	r5, #0
   1600c:	clzeq	r1, r4
   16010:	addeq	r1, r1, #32
   16014:	clzne	r1, r5
   16018:	sub	ip, ip, r1
   1601c:	sub	sl, ip, #32
   16020:	lsl	r9, r3, ip
   16024:	rsb	fp, ip, #32
   16028:	orr	r9, r9, r2, lsl sl
   1602c:	orr	r9, r9, r2, lsr fp
   16030:	lsl	r8, r2, ip
   16034:	cmp	r5, r9
   16038:	cmpeq	r4, r8
   1603c:	movcc	r0, #0
   16040:	movcc	r1, r0
   16044:	bcc	16060 <__assert_fail@plt+0x4ca0>
   16048:	mov	r0, #1
   1604c:	subs	r4, r4, r8
   16050:	lsl	r1, r0, sl
   16054:	orr	r1, r1, r0, lsr fp
   16058:	lsl	r0, r0, ip
   1605c:	sbc	r5, r5, r9
   16060:	cmp	ip, #0
   16064:	beq	160f0 <__assert_fail@plt+0x4d30>
   16068:	lsr	r6, r8, #1
   1606c:	orr	r6, r6, r9, lsl #31
   16070:	lsr	r7, r9, #1
   16074:	mov	r2, ip
   16078:	b	1609c <__assert_fail@plt+0x4cdc>
   1607c:	subs	r3, r4, r6
   16080:	sbc	r8, r5, r7
   16084:	adds	r3, r3, r3
   16088:	adc	r8, r8, r8
   1608c:	adds	r4, r3, #1
   16090:	adc	r5, r8, #0
   16094:	subs	r2, r2, #1
   16098:	beq	160b8 <__assert_fail@plt+0x4cf8>
   1609c:	cmp	r5, r7
   160a0:	cmpeq	r4, r6
   160a4:	bcs	1607c <__assert_fail@plt+0x4cbc>
   160a8:	adds	r4, r4, r4
   160ac:	adc	r5, r5, r5
   160b0:	subs	r2, r2, #1
   160b4:	bne	1609c <__assert_fail@plt+0x4cdc>
   160b8:	lsr	r3, r4, ip
   160bc:	orr	r3, r3, r5, lsl fp
   160c0:	lsr	r2, r5, ip
   160c4:	orr	r3, r3, r5, lsr sl
   160c8:	adds	r0, r0, r4
   160cc:	mov	r4, r3
   160d0:	lsl	r3, r2, ip
   160d4:	orr	r3, r3, r4, lsl sl
   160d8:	lsl	ip, r4, ip
   160dc:	orr	r3, r3, r4, lsr fp
   160e0:	adc	r1, r1, r5
   160e4:	subs	r0, r0, ip
   160e8:	mov	r5, r2
   160ec:	sbc	r1, r1, r3
   160f0:	cmp	lr, #0
   160f4:	strdne	r4, [lr]
   160f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16100:	mov	r7, r0
   16104:	ldr	r6, [pc, #72]	; 16154 <__assert_fail@plt+0x4d94>
   16108:	ldr	r5, [pc, #72]	; 16158 <__assert_fail@plt+0x4d98>
   1610c:	add	r6, pc, r6
   16110:	add	r5, pc, r5
   16114:	sub	r6, r6, r5
   16118:	mov	r8, r1
   1611c:	mov	r9, r2
   16120:	bl	110ac <calloc@plt-0x20>
   16124:	asrs	r6, r6, #2
   16128:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1612c:	mov	r4, #0
   16130:	add	r4, r4, #1
   16134:	ldr	r3, [r5], #4
   16138:	mov	r2, r9
   1613c:	mov	r1, r8
   16140:	mov	r0, r7
   16144:	blx	r3
   16148:	cmp	r6, r4
   1614c:	bne	16130 <__assert_fail@plt+0x4d70>
   16150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16154:	strdeq	r1, [r1], -r8
   16158:	strdeq	r1, [r1], -r0
   1615c:	bx	lr
   16160:	ldr	r3, [pc, #12]	; 16174 <__assert_fail@plt+0x4db4>
   16164:	mov	r1, #0
   16168:	add	r3, pc, r3
   1616c:	ldr	r2, [r3]
   16170:	b	112dc <__cxa_atexit@plt>
   16174:	andeq	r1, r1, r4, lsr #31
   16178:	mov	r2, r1
   1617c:	mov	r1, r0
   16180:	mov	r0, #3
   16184:	b	11390 <__xstat64@plt>

Disassembly of section .fini:

00016188 <.fini>:
   16188:	push	{r3, lr}
   1618c:	pop	{r3, pc}
