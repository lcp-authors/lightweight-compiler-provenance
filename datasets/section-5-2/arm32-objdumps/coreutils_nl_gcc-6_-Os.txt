
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010fd8 <.init>:
   10fd8:	push	{r3, lr}
   10fdc:	bl	1196c <__assert_fail@plt+0x638>
   10fe0:	pop	{r3, pc}

Disassembly of section .plt:

00010fe4 <pthread_mutex_unlock@plt-0x14>:
   10fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   10fe8:	ldr	lr, [pc, #4]	; 10ff4 <pthread_mutex_unlock@plt-0x4>
   10fec:	add	lr, pc, lr
   10ff0:	ldr	pc, [lr, #8]!
   10ff4:	andeq	r1, r2, ip

00010ff8 <pthread_mutex_unlock@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #135168	; 0x21000
   11000:	ldr	pc, [ip, #12]!

00011004 <calloc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #135168	; 0x21000
   1100c:	ldr	pc, [ip, #4]!

00011010 <fputs_unlocked@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #32, 20	; 0x20000
   11018:	ldr	pc, [ip, #4092]!	; 0xffc

0001101c <wctype@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #32, 20	; 0x20000
   11024:	ldr	pc, [ip, #4084]!	; 0xff4

00011028 <raise@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #32, 20	; 0x20000
   11030:	ldr	pc, [ip, #4076]!	; 0xfec

00011034 <wcrtomb@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #32, 20	; 0x20000
   1103c:	ldr	pc, [ip, #4068]!	; 0xfe4

00011040 <iswctype@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #32, 20	; 0x20000
   11048:	ldr	pc, [ip, #4060]!	; 0xfdc

0001104c <strcmp@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #32, 20	; 0x20000
   11054:	ldr	pc, [ip, #4052]!	; 0xfd4

00011058 <posix_fadvise64@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #32, 20	; 0x20000
   11060:	ldr	pc, [ip, #4044]!	; 0xfcc

00011064 <pthread_mutex_destroy@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #32, 20	; 0x20000
   1106c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011070 <fflush@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #32, 20	; 0x20000
   11078:	ldr	pc, [ip, #4028]!	; 0xfbc

0001107c <memmove@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #32, 20	; 0x20000
   11084:	ldr	pc, [ip, #4020]!	; 0xfb4

00011088 <free@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #32, 20	; 0x20000
   11090:	ldr	pc, [ip, #4012]!	; 0xfac

00011094 <pthread_mutex_lock@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #32, 20	; 0x20000
   1109c:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a0 <_exit@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #32, 20	; 0x20000
   110a8:	ldr	pc, [ip, #3996]!	; 0xf9c

000110ac <memcpy@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #32, 20	; 0x20000
   110b4:	ldr	pc, [ip, #3988]!	; 0xf94

000110b8 <tolower@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #32, 20	; 0x20000
   110c0:	ldr	pc, [ip, #3980]!	; 0xf8c

000110c4 <pthread_mutex_init@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #32, 20	; 0x20000
   110cc:	ldr	pc, [ip, #3972]!	; 0xf84

000110d0 <towlower@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #32, 20	; 0x20000
   110d8:	ldr	pc, [ip, #3964]!	; 0xf7c

000110dc <mbsinit@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #32, 20	; 0x20000
   110e4:	ldr	pc, [ip, #3956]!	; 0xf74

000110e8 <fwrite_unlocked@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #32, 20	; 0x20000
   110f0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110f4 <memcmp@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #32, 20	; 0x20000
   110fc:	ldr	pc, [ip, #3940]!	; 0xf64

00011100 <stpcpy@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #32, 20	; 0x20000
   11108:	ldr	pc, [ip, #3932]!	; 0xf5c

0001110c <fputc_unlocked@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #32, 20	; 0x20000
   11114:	ldr	pc, [ip, #3924]!	; 0xf54

00011118 <getc_unlocked@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #32, 20	; 0x20000
   11120:	ldr	pc, [ip, #3916]!	; 0xf4c

00011124 <dcgettext@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #32, 20	; 0x20000
   1112c:	ldr	pc, [ip, #3908]!	; 0xf44

00011130 <realloc@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #32, 20	; 0x20000
   11138:	ldr	pc, [ip, #3900]!	; 0xf3c

0001113c <textdomain@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #32, 20	; 0x20000
   11144:	ldr	pc, [ip, #3892]!	; 0xf34

00011148 <iswprint@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #32, 20	; 0x20000
   11150:	ldr	pc, [ip, #3884]!	; 0xf2c

00011154 <lseek64@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #32, 20	; 0x20000
   1115c:	ldr	pc, [ip, #3876]!	; 0xf24

00011160 <__ctype_get_mb_cur_max@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #32, 20	; 0x20000
   11168:	ldr	pc, [ip, #3868]!	; 0xf1c

0001116c <strcpy@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #32, 20	; 0x20000
   11174:	ldr	pc, [ip, #3860]!	; 0xf14

00011178 <__fpending@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #32, 20	; 0x20000
   11180:	ldr	pc, [ip, #3852]!	; 0xf0c

00011184 <ferror_unlocked@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #32, 20	; 0x20000
   1118c:	ldr	pc, [ip, #3844]!	; 0xf04

00011190 <mbrtowc@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #32, 20	; 0x20000
   11198:	ldr	pc, [ip, #3836]!	; 0xefc

0001119c <error@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #32, 20	; 0x20000
   111a4:	ldr	pc, [ip, #3828]!	; 0xef4

000111a8 <malloc@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #32, 20	; 0x20000
   111b0:	ldr	pc, [ip, #3820]!	; 0xeec

000111b4 <__libc_start_main@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #32, 20	; 0x20000
   111bc:	ldr	pc, [ip, #3812]!	; 0xee4

000111c0 <__freading@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #32, 20	; 0x20000
   111c8:	ldr	pc, [ip, #3804]!	; 0xedc

000111cc <__gmon_start__@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #32, 20	; 0x20000
   111d4:	ldr	pc, [ip, #3796]!	; 0xed4

000111d8 <getopt_long@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #32, 20	; 0x20000
   111e0:	ldr	pc, [ip, #3788]!	; 0xecc

000111e4 <__ctype_b_loc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #32, 20	; 0x20000
   111ec:	ldr	pc, [ip, #3780]!	; 0xec4

000111f0 <exit@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #32, 20	; 0x20000
   111f8:	ldr	pc, [ip, #3772]!	; 0xebc

000111fc <strlen@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #32, 20	; 0x20000
   11204:	ldr	pc, [ip, #3764]!	; 0xeb4

00011208 <strchr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #32, 20	; 0x20000
   11210:	ldr	pc, [ip, #3756]!	; 0xeac

00011214 <__errno_location@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #32, 20	; 0x20000
   1121c:	ldr	pc, [ip, #3748]!	; 0xea4

00011220 <iswalnum@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #32, 20	; 0x20000
   11228:	ldr	pc, [ip, #3740]!	; 0xe9c

0001122c <__cxa_atexit@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #32, 20	; 0x20000
   11234:	ldr	pc, [ip, #3732]!	; 0xe94

00011238 <memset@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #32, 20	; 0x20000
   11240:	ldr	pc, [ip, #3724]!	; 0xe8c

00011244 <btowc@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #32, 20	; 0x20000
   1124c:	ldr	pc, [ip, #3716]!	; 0xe84

00011250 <__printf_chk@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #32, 20	; 0x20000
   11258:	ldr	pc, [ip, #3708]!	; 0xe7c

0001125c <fileno@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #32, 20	; 0x20000
   11264:	ldr	pc, [ip, #3700]!	; 0xe74

00011268 <__fprintf_chk@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #32, 20	; 0x20000
   11270:	ldr	pc, [ip, #3692]!	; 0xe6c

00011274 <strtoimax@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #32, 20	; 0x20000
   1127c:	ldr	pc, [ip, #3684]!	; 0xe64

00011280 <fclose@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #32, 20	; 0x20000
   11288:	ldr	pc, [ip, #3676]!	; 0xe5c

0001128c <fseeko64@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #32, 20	; 0x20000
   11294:	ldr	pc, [ip, #3668]!	; 0xe54

00011298 <setlocale@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #32, 20	; 0x20000
   112a0:	ldr	pc, [ip, #3660]!	; 0xe4c

000112a4 <toupper@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #32, 20	; 0x20000
   112ac:	ldr	pc, [ip, #3652]!	; 0xe44

000112b0 <strrchr@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #32, 20	; 0x20000
   112b8:	ldr	pc, [ip, #3644]!	; 0xe3c

000112bc <nl_langinfo@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #32, 20	; 0x20000
   112c4:	ldr	pc, [ip, #3636]!	; 0xe34

000112c8 <clearerr_unlocked@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #32, 20	; 0x20000
   112d0:	ldr	pc, [ip, #3628]!	; 0xe2c

000112d4 <fopen64@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #32, 20	; 0x20000
   112dc:	ldr	pc, [ip, #3620]!	; 0xe24

000112e0 <bindtextdomain@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #32, 20	; 0x20000
   112e8:	ldr	pc, [ip, #3612]!	; 0xe1c

000112ec <towupper@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #32, 20	; 0x20000
   112f4:	ldr	pc, [ip, #3604]!	; 0xe14

000112f8 <fputs@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #32, 20	; 0x20000
   11300:	ldr	pc, [ip, #3596]!	; 0xe0c

00011304 <strncmp@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #32, 20	; 0x20000
   1130c:	ldr	pc, [ip, #3588]!	; 0xe04

00011310 <abort@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #32, 20	; 0x20000
   11318:	ldr	pc, [ip, #3580]!	; 0xdfc

0001131c <feof_unlocked@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #32, 20	; 0x20000
   11324:	ldr	pc, [ip, #3572]!	; 0xdf4

00011328 <putchar_unlocked@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #32, 20	; 0x20000
   11330:	ldr	pc, [ip, #3564]!	; 0xdec

00011334 <__assert_fail@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #32, 20	; 0x20000
   1133c:	ldr	pc, [ip, #3556]!	; 0xde4

Disassembly of section .text:

00011340 <.text>:
   11340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11344:	mov	r8, r0
   11348:	sub	sp, sp, #36	; 0x24
   1134c:	ldr	r0, [r1]
   11350:	mov	r9, r1
   11354:	bl	12634 <__assert_fail@plt+0x1300>
   11358:	ldr	r1, [pc, #1328]	; 11890 <__assert_fail@plt+0x55c>
   1135c:	mov	r0, #6
   11360:	bl	11298 <setlocale@plt>
   11364:	ldr	r1, [pc, #1320]	; 11894 <__assert_fail@plt+0x560>
   11368:	ldr	r0, [pc, #1320]	; 11898 <__assert_fail@plt+0x564>
   1136c:	bl	112e0 <bindtextdomain@plt>
   11370:	ldr	r5, [pc, #1316]	; 1189c <__assert_fail@plt+0x568>
   11374:	ldr	r0, [pc, #1308]	; 11898 <__assert_fail@plt+0x564>
   11378:	ldr	r6, [pc, #1312]	; 118a0 <__assert_fail@plt+0x56c>
   1137c:	bl	1113c <textdomain@plt>
   11380:	mov	r4, #1
   11384:	ldr	r0, [pc, #1304]	; 118a4 <__assert_fail@plt+0x570>
   11388:	bl	207dc <__assert_fail@plt+0xf4a8>
   1138c:	mov	r3, #0
   11390:	strb	r3, [r5, #16]
   11394:	ldr	fp, [pc, #1292]	; 118a8 <__assert_fail@plt+0x574>
   11398:	ldr	sl, [pc, #1292]	; 118ac <__assert_fail@plt+0x578>
   1139c:	mov	r7, #0
   113a0:	str	r7, [sp]
   113a4:	mov	r3, fp
   113a8:	mov	r2, sl
   113ac:	mov	r1, r9
   113b0:	mov	r0, r8
   113b4:	bl	111d8 <getopt_long@plt>
   113b8:	cmn	r0, #1
   113bc:	bne	113d0 <__assert_fail@plt+0x9c>
   113c0:	cmp	r4, #0
   113c4:	bne	11740 <__assert_fail@plt+0x40c>
   113c8:	mov	r0, #1
   113cc:	b	11704 <__assert_fail@plt+0x3d0>
   113d0:	cmp	r0, #105	; 0x69
   113d4:	beq	115bc <__assert_fail@plt+0x288>
   113d8:	bgt	11440 <__assert_fail@plt+0x10c>
   113dc:	cmp	r0, #98	; 0x62
   113e0:	beq	11528 <__assert_fail@plt+0x1f4>
   113e4:	bgt	11400 <__assert_fail@plt+0xcc>
   113e8:	cmn	r0, #3
   113ec:	beq	11708 <__assert_fail@plt+0x3d4>
   113f0:	cmn	r0, #2
   113f4:	beq	11700 <__assert_fail@plt+0x3cc>
   113f8:	mov	r4, r7
   113fc:	b	113a0 <__assert_fail@plt+0x6c>
   11400:	cmp	r0, #102	; 0x66
   11404:	beq	1154c <__assert_fail@plt+0x218>
   11408:	cmp	r0, #104	; 0x68
   1140c:	beq	114dc <__assert_fail@plt+0x1a8>
   11410:	cmp	r0, #100	; 0x64
   11414:	bne	113f8 <__assert_fail@plt+0xc4>
   11418:	ldr	r7, [r6]
   1141c:	mov	r0, r7
   11420:	bl	111fc <strlen@plt>
   11424:	ldr	r3, [pc, #1156]	; 118b0 <__assert_fail@plt+0x57c>
   11428:	sub	r0, r0, #1
   1142c:	cmp	r0, #1
   11430:	ldrls	r2, [r3, #40]	; 0x28
   11434:	bls	116ec <__assert_fail@plt+0x3b8>
   11438:	str	r7, [r3, #40]	; 0x28
   1143c:	b	11394 <__assert_fail@plt+0x60>
   11440:	cmp	r0, #112	; 0x70
   11444:	beq	11608 <__assert_fail@plt+0x2d4>
   11448:	bgt	114b4 <__assert_fail@plt+0x180>
   1144c:	cmp	r0, #108	; 0x6c
   11450:	beq	11614 <__assert_fail@plt+0x2e0>
   11454:	cmp	r0, #110	; 0x6e
   11458:	bne	113f8 <__assert_fail@plt+0xc4>
   1145c:	ldr	r7, [r6]
   11460:	ldr	r1, [pc, #1100]	; 118b4 <__assert_fail@plt+0x580>
   11464:	mov	r0, r7
   11468:	bl	1104c <strcmp@plt>
   1146c:	cmp	r0, #0
   11470:	ldreq	r2, [pc, #1088]	; 118b8 <__assert_fail@plt+0x584>
   11474:	beq	114a8 <__assert_fail@plt+0x174>
   11478:	ldr	r1, [pc, #1084]	; 118bc <__assert_fail@plt+0x588>
   1147c:	mov	r0, r7
   11480:	bl	1104c <strcmp@plt>
   11484:	cmp	r0, #0
   11488:	ldreq	r2, [pc, #1072]	; 118c0 <__assert_fail@plt+0x58c>
   1148c:	beq	114a8 <__assert_fail@plt+0x174>
   11490:	ldr	r1, [pc, #1068]	; 118c4 <__assert_fail@plt+0x590>
   11494:	mov	r0, r7
   11498:	bl	1104c <strcmp@plt>
   1149c:	cmp	r0, #0
   114a0:	bne	116ac <__assert_fail@plt+0x378>
   114a4:	ldr	r2, [pc, #1052]	; 118c8 <__assert_fail@plt+0x594>
   114a8:	ldr	r3, [pc, #1024]	; 118b0 <__assert_fail@plt+0x57c>
   114ac:	str	r2, [r3, #4]
   114b0:	b	11394 <__assert_fail@plt+0x60>
   114b4:	cmp	r0, #118	; 0x76
   114b8:	beq	11570 <__assert_fail@plt+0x23c>
   114bc:	cmp	r0, #119	; 0x77
   114c0:	beq	11660 <__assert_fail@plt+0x32c>
   114c4:	cmp	r0, #115	; 0x73
   114c8:	bne	113f8 <__assert_fail@plt+0xc4>
   114cc:	ldr	r3, [pc, #988]	; 118b0 <__assert_fail@plt+0x57c>
   114d0:	ldr	r2, [r6]
   114d4:	str	r2, [r3, #8]
   114d8:	b	11394 <__assert_fail@plt+0x60>
   114dc:	ldr	r2, [pc, #1000]	; 118cc <__assert_fail@plt+0x598>
   114e0:	ldr	r0, [pc, #1000]	; 118d0 <__assert_fail@plt+0x59c>
   114e4:	sub	r1, r2, #96	; 0x60
   114e8:	bl	11b54 <__assert_fail@plt+0x820>
   114ec:	subs	r7, r0, #0
   114f0:	moveq	r2, #5
   114f4:	ldreq	r1, [pc, #984]	; 118d4 <__assert_fail@plt+0x5a0>
   114f8:	bne	11394 <__assert_fail@plt+0x60>
   114fc:	bl	11124 <dcgettext@plt>
   11500:	mov	r4, r0
   11504:	ldr	r0, [r6]
   11508:	bl	13c64 <__assert_fail@plt+0x2930>
   1150c:	mov	r2, r4
   11510:	mov	r1, r7
   11514:	mov	r3, r0
   11518:	mov	r0, r7
   1151c:	bl	1119c <error@plt>
   11520:	mov	r4, #0
   11524:	b	11394 <__assert_fail@plt+0x60>
   11528:	ldr	r2, [pc, #936]	; 118d8 <__assert_fail@plt+0x5a4>
   1152c:	ldr	r0, [pc, #936]	; 118dc <__assert_fail@plt+0x5a8>
   11530:	sub	r1, r2, #320	; 0x140
   11534:	bl	11b54 <__assert_fail@plt+0x820>
   11538:	subs	r7, r0, #0
   1153c:	bne	11394 <__assert_fail@plt+0x60>
   11540:	mov	r2, #5
   11544:	ldr	r1, [pc, #916]	; 118e0 <__assert_fail@plt+0x5ac>
   11548:	b	114fc <__assert_fail@plt+0x1c8>
   1154c:	ldr	r2, [pc, #912]	; 118e4 <__assert_fail@plt+0x5b0>
   11550:	ldr	r0, [pc, #912]	; 118e8 <__assert_fail@plt+0x5b4>
   11554:	sub	r1, r2, #544	; 0x220
   11558:	bl	11b54 <__assert_fail@plt+0x820>
   1155c:	subs	r7, r0, #0
   11560:	moveq	r2, #5
   11564:	ldreq	r1, [pc, #896]	; 118ec <__assert_fail@plt+0x5b8>
   11568:	bne	11394 <__assert_fail@plt+0x60>
   1156c:	b	114fc <__assert_fail@plt+0x1c8>
   11570:	mov	r2, #5
   11574:	ldr	r1, [pc, #884]	; 118f0 <__assert_fail@plt+0x5bc>
   11578:	mov	r0, #0
   1157c:	ldr	sl, [r6]
   11580:	bl	11124 <dcgettext@plt>
   11584:	ldr	r3, [pc, #772]	; 11890 <__assert_fail@plt+0x55c>
   11588:	mvn	r2, #0
   1158c:	str	r3, [sp, #8]
   11590:	mvn	r3, #-2147483648	; 0x80000000
   11594:	str	r7, [sp, #16]
   11598:	strd	r2, [sp]
   1159c:	mov	r3, #-2147483648	; 0x80000000
   115a0:	mov	r2, #0
   115a4:	str	r0, [sp, #12]
   115a8:	mov	r0, sl
   115ac:	bl	1f89c <__assert_fail@plt+0xe568>
   115b0:	ldr	r3, [pc, #760]	; 118b0 <__assert_fail@plt+0x57c>
   115b4:	strd	r0, [r3, #32]
   115b8:	b	11394 <__assert_fail@plt+0x60>
   115bc:	mov	r2, #5
   115c0:	ldr	r1, [pc, #812]	; 118f4 <__assert_fail@plt+0x5c0>
   115c4:	mov	r0, #0
   115c8:	ldr	sl, [r6]
   115cc:	bl	11124 <dcgettext@plt>
   115d0:	ldr	r3, [pc, #696]	; 11890 <__assert_fail@plt+0x55c>
   115d4:	mvn	r2, #0
   115d8:	str	r3, [sp, #8]
   115dc:	mvn	r3, #-2147483648	; 0x80000000
   115e0:	str	r7, [sp, #16]
   115e4:	strd	r2, [sp]
   115e8:	mov	r3, #-2147483648	; 0x80000000
   115ec:	mov	r2, #0
   115f0:	str	r0, [sp, #12]
   115f4:	mov	r0, sl
   115f8:	bl	1f89c <__assert_fail@plt+0xe568>
   115fc:	ldr	r3, [pc, #684]	; 118b0 <__assert_fail@plt+0x57c>
   11600:	strd	r0, [r3, #16]
   11604:	b	11394 <__assert_fail@plt+0x60>
   11608:	ldr	r3, [pc, #672]	; 118b0 <__assert_fail@plt+0x57c>
   1160c:	strb	r7, [r3, #24]
   11610:	b	11394 <__assert_fail@plt+0x60>
   11614:	mov	r2, #5
   11618:	ldr	r1, [pc, #728]	; 118f8 <__assert_fail@plt+0x5c4>
   1161c:	mov	r0, #0
   11620:	ldr	sl, [r6]
   11624:	bl	11124 <dcgettext@plt>
   11628:	ldr	r3, [pc, #608]	; 11890 <__assert_fail@plt+0x55c>
   1162c:	mvn	r2, #0
   11630:	str	r3, [sp, #8]
   11634:	mvn	r3, #-2147483648	; 0x80000000
   11638:	str	r7, [sp, #16]
   1163c:	strd	r2, [sp]
   11640:	mov	r3, #0
   11644:	mov	r2, #1
   11648:	str	r0, [sp, #12]
   1164c:	mov	r0, sl
   11650:	bl	1f89c <__assert_fail@plt+0xe568>
   11654:	ldr	r3, [pc, #596]	; 118b0 <__assert_fail@plt+0x57c>
   11658:	strd	r0, [r3, #48]	; 0x30
   1165c:	b	11394 <__assert_fail@plt+0x60>
   11660:	mov	r2, #5
   11664:	ldr	r1, [pc, #656]	; 118fc <__assert_fail@plt+0x5c8>
   11668:	mov	r0, #0
   1166c:	ldr	sl, [r6]
   11670:	bl	11124 <dcgettext@plt>
   11674:	ldr	r3, [pc, #532]	; 11890 <__assert_fail@plt+0x55c>
   11678:	mvn	r2, #-2147483648	; 0x80000000
   1167c:	str	r3, [sp, #8]
   11680:	mov	r3, #0
   11684:	str	r7, [sp, #16]
   11688:	strd	r2, [sp]
   1168c:	mov	r3, #0
   11690:	mov	r2, #1
   11694:	str	r0, [sp, #12]
   11698:	mov	r0, sl
   1169c:	bl	1f89c <__assert_fail@plt+0xe568>
   116a0:	ldr	r3, [pc, #520]	; 118b0 <__assert_fail@plt+0x57c>
   116a4:	str	r0, [r3]
   116a8:	b	11394 <__assert_fail@plt+0x60>
   116ac:	mov	r2, #5
   116b0:	ldr	r1, [pc, #584]	; 11900 <__assert_fail@plt+0x5cc>
   116b4:	mov	r0, #0
   116b8:	bl	11124 <dcgettext@plt>
   116bc:	mov	r4, r0
   116c0:	ldr	r0, [r6]
   116c4:	bl	13c64 <__assert_fail@plt+0x2930>
   116c8:	mov	r1, #0
   116cc:	mov	r2, r4
   116d0:	mov	r3, r0
   116d4:	mov	r0, r1
   116d8:	b	1151c <__assert_fail@plt+0x1e8>
   116dc:	add	r1, r3, #1
   116e0:	str	r1, [r6]
   116e4:	ldrb	r3, [r3]
   116e8:	strb	r3, [r2], #1
   116ec:	ldr	r3, [r6]
   116f0:	ldrb	r1, [r3]
   116f4:	cmp	r1, #0
   116f8:	bne	116dc <__assert_fail@plt+0x3a8>
   116fc:	b	11394 <__assert_fail@plt+0x60>
   11700:	mov	r0, #0
   11704:	bl	11f64 <__assert_fail@plt+0xc30>
   11708:	ldr	r3, [pc, #500]	; 11904 <__assert_fail@plt+0x5d0>
   1170c:	ldr	r0, [pc, #500]	; 11908 <__assert_fail@plt+0x5d4>
   11710:	str	r3, [sp, #4]
   11714:	ldr	r3, [pc, #496]	; 1190c <__assert_fail@plt+0x5d8>
   11718:	str	r7, [sp, #8]
   1171c:	str	r3, [sp]
   11720:	ldr	r3, [pc, #488]	; 11910 <__assert_fail@plt+0x5dc>
   11724:	ldr	r0, [r0]
   11728:	ldr	r2, [pc, #484]	; 11914 <__assert_fail@plt+0x5e0>
   1172c:	ldr	r3, [r3]
   11730:	ldr	r1, [pc, #480]	; 11918 <__assert_fail@plt+0x5e4>
   11734:	bl	1f1c8 <__assert_fail@plt+0xde94>
   11738:	mov	r0, #0
   1173c:	bl	111f0 <exit@plt>
   11740:	ldr	r6, [pc, #360]	; 118b0 <__assert_fail@plt+0x57c>
   11744:	ldr	r0, [r6, #40]	; 0x28
   11748:	bl	111fc <strlen@plt>
   1174c:	lsl	r2, r0, #1
   11750:	mov	fp, r0
   11754:	add	r0, r2, r0
   11758:	str	r0, [r5, #36]	; 0x24
   1175c:	add	r0, r0, #1
   11760:	str	r2, [sp, #28]
   11764:	bl	1f290 <__assert_fail@plt+0xdf5c>
   11768:	ldr	sl, [r6, #40]	; 0x28
   1176c:	mov	r1, sl
   11770:	str	r0, [r5, #40]	; 0x28
   11774:	str	r0, [sp, #24]
   11778:	bl	11100 <stpcpy@plt>
   1177c:	mov	r1, sl
   11780:	bl	11100 <stpcpy@plt>
   11784:	mov	r1, sl
   11788:	bl	1116c <strcpy@plt>
   1178c:	ldr	r3, [sp, #24]
   11790:	ldr	r2, [sp, #28]
   11794:	add	sl, r3, fp
   11798:	str	sl, [r5, #48]	; 0x30
   1179c:	ldr	r0, [pc, #376]	; 1191c <__assert_fail@plt+0x5e8>
   117a0:	add	sl, sl, fp
   117a4:	str	r2, [r5, #44]	; 0x2c
   117a8:	str	sl, [r5, #52]	; 0x34
   117ac:	str	fp, [r5, #32]
   117b0:	bl	12534 <__assert_fail@plt+0x1200>
   117b4:	ldr	r0, [r6, #8]
   117b8:	bl	111fc <strlen@plt>
   117bc:	mov	sl, r0
   117c0:	ldr	r0, [r6]
   117c4:	add	r0, r0, #1
   117c8:	add	r0, r0, sl
   117cc:	bl	1f290 <__assert_fail@plt+0xdf5c>
   117d0:	ldr	r2, [r6]
   117d4:	mov	r1, #32
   117d8:	add	sl, sl, r2
   117dc:	mov	r2, sl
   117e0:	str	r0, [r5, #64]	; 0x40
   117e4:	bl	11238 <memset@plt>
   117e8:	ldrd	r2, [r6, #32]
   117ec:	strd	r2, [r5, #8]
   117f0:	strb	r7, [r0, sl]
   117f4:	ldr	r3, [r6, #60]	; 0x3c
   117f8:	ldr	r6, [pc, #288]	; 11920 <__assert_fail@plt+0x5ec>
   117fc:	str	r3, [r5, #72]	; 0x48
   11800:	ldr	r3, [pc, #284]	; 11924 <__assert_fail@plt+0x5f0>
   11804:	str	r3, [r5, #68]	; 0x44
   11808:	ldr	r3, [r6]
   1180c:	cmp	r8, r3
   11810:	bne	11870 <__assert_fail@plt+0x53c>
   11814:	ldr	r0, [pc, #268]	; 11928 <__assert_fail@plt+0x5f4>
   11818:	bl	11c3c <__assert_fail@plt+0x908>
   1181c:	mov	r4, r0
   11820:	ldrb	r3, [r5, #16]
   11824:	cmp	r3, #0
   11828:	beq	11880 <__assert_fail@plt+0x54c>
   1182c:	ldr	r3, [pc, #248]	; 1192c <__assert_fail@plt+0x5f8>
   11830:	ldr	r0, [r3]
   11834:	bl	123a8 <__assert_fail@plt+0x1074>
   11838:	cmn	r0, #1
   1183c:	bne	11880 <__assert_fail@plt+0x54c>
   11840:	bl	11214 <__errno_location@plt>
   11844:	ldr	r2, [pc, #220]	; 11928 <__assert_fail@plt+0x5f4>
   11848:	ldr	r1, [r0]
   1184c:	mov	r0, #1
   11850:	bl	1119c <error@plt>
   11854:	ldr	r0, [r9, r3, lsl #2]
   11858:	bl	11c3c <__assert_fail@plt+0x908>
   1185c:	ldr	r3, [r6]
   11860:	add	r3, r3, #1
   11864:	str	r3, [r6]
   11868:	and	r4, r4, r0
   1186c:	uxtb	r4, r4
   11870:	ldr	r3, [r6]
   11874:	cmp	r8, r3
   11878:	bgt	11854 <__assert_fail@plt+0x520>
   1187c:	b	11820 <__assert_fail@plt+0x4ec>
   11880:	eor	r0, r4, #1
   11884:	uxtb	r0, r0
   11888:	add	sp, sp, #36	; 0x24
   1188c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11890:	strdeq	r1, [r2], -r6
   11894:	andeq	r1, r2, sp, ror r1
   11898:	ldrdeq	r1, [r2], -sl
   1189c:	andeq	r2, r3, r8, ror #3
   118a0:	andeq	r2, r3, r0, ror #3
   118a4:	andeq	r2, r1, r8, lsl #5
   118a8:	andeq	r0, r2, r4, asr r8
   118ac:	andeq	r1, r2, r3, asr #5
   118b0:	andeq	r2, r3, r0, lsr r1
   118b4:	andeq	r1, r2, sl, ror r2
   118b8:	andeq	r0, r2, r8, lsr r8
   118bc:	andeq	r1, r2, sp, ror r2
   118c0:	andeq	r0, r2, r1, asr #16
   118c4:	andeq	r1, r2, r0, lsl #5
   118c8:	andeq	r0, r2, r9, asr #16
   118cc:	muleq	r3, r4, r2
   118d0:	andeq	r2, r3, r8, ror #2
   118d4:	muleq	r2, r5, r1
   118d8:	muleq	r3, r4, r3
   118dc:	andeq	r2, r3, ip, ror #2
   118e0:			; <UNDEFINED> instruction: 0x000211b8
   118e4:	muleq	r3, r4, r4
   118e8:	andeq	r2, r3, r0, ror r1
   118ec:	ldrdeq	r1, [r2], -r9
   118f0:	strdeq	r1, [r2], -ip
   118f4:	andeq	r1, r2, r9, lsl r2
   118f8:	andeq	r1, r2, r7, lsr r2
   118fc:	andeq	r1, r2, sl, asr r2
   11900:	andeq	r1, r2, r3, lsl #5
   11904:	andeq	r1, r2, r5, lsr #5
   11908:	ldrdeq	r2, [r3], -ip
   1190c:			; <UNDEFINED> instruction: 0x000212b5
   11910:	andeq	r2, r3, r8, ror r1
   11914:	ldrdeq	r1, [r2], -r6
   11918:	andeq	r0, r2, ip, ror #18
   1191c:	strdeq	r2, [r3], -ip
   11920:	andeq	r2, r3, r8, asr #3
   11924:	andeq	r2, r3, r4, asr r2
   11928:	andeq	r1, r2, fp, asr r4
   1192c:	ldrdeq	r2, [r3], -r8
   11930:	mov	fp, #0
   11934:	mov	lr, #0
   11938:	pop	{r1}		; (ldr r1, [sp], #4)
   1193c:	mov	r2, sp
   11940:	push	{r2}		; (str r2, [sp, #-4]!)
   11944:	push	{r0}		; (str r0, [sp, #-4]!)
   11948:	ldr	ip, [pc, #16]	; 11960 <__assert_fail@plt+0x62c>
   1194c:	push	{ip}		; (str ip, [sp, #-4]!)
   11950:	ldr	r0, [pc, #12]	; 11964 <__assert_fail@plt+0x630>
   11954:	ldr	r3, [pc, #12]	; 11968 <__assert_fail@plt+0x634>
   11958:	bl	111b4 <__libc_start_main@plt>
   1195c:	bl	11310 <abort@plt>
   11960:	ldrdeq	r0, [r2], -r8
   11964:	andeq	r1, r1, r0, asr #6
   11968:	andeq	r0, r2, r8, ror r7
   1196c:	ldr	r3, [pc, #20]	; 11988 <__assert_fail@plt+0x654>
   11970:	ldr	r2, [pc, #20]	; 1198c <__assert_fail@plt+0x658>
   11974:	add	r3, pc, r3
   11978:	ldr	r2, [r3, r2]
   1197c:	cmp	r2, #0
   11980:	bxeq	lr
   11984:	b	111cc <__gmon_start__@plt>
   11988:	andeq	r0, r2, r4, lsl #13
   1198c:	andeq	r0, r0, r4, lsr #2
   11990:	ldr	r3, [pc, #28]	; 119b4 <__assert_fail@plt+0x680>
   11994:	ldr	r0, [pc, #28]	; 119b8 <__assert_fail@plt+0x684>
   11998:	sub	r3, r3, r0
   1199c:	cmp	r3, #6
   119a0:	bxls	lr
   119a4:	ldr	r3, [pc, #16]	; 119bc <__assert_fail@plt+0x688>
   119a8:	cmp	r3, #0
   119ac:	bxeq	lr
   119b0:	bx	r3
   119b4:	andeq	r2, r3, r3, asr #3
   119b8:	andeq	r2, r3, r0, asr #3
   119bc:	andeq	r0, r0, r0
   119c0:	ldr	r1, [pc, #36]	; 119ec <__assert_fail@plt+0x6b8>
   119c4:	ldr	r0, [pc, #36]	; 119f0 <__assert_fail@plt+0x6bc>
   119c8:	sub	r1, r1, r0
   119cc:	asr	r1, r1, #2
   119d0:	add	r1, r1, r1, lsr #31
   119d4:	asrs	r1, r1, #1
   119d8:	bxeq	lr
   119dc:	ldr	r3, [pc, #16]	; 119f4 <__assert_fail@plt+0x6c0>
   119e0:	cmp	r3, #0
   119e4:	bxeq	lr
   119e8:	bx	r3
   119ec:	andeq	r2, r3, r0, asr #3
   119f0:	andeq	r2, r3, r0, asr #3
   119f4:	andeq	r0, r0, r0
   119f8:	push	{r4, lr}
   119fc:	ldr	r4, [pc, #24]	; 11a1c <__assert_fail@plt+0x6e8>
   11a00:	ldrb	r3, [r4]
   11a04:	cmp	r3, #0
   11a08:	popne	{r4, pc}
   11a0c:	bl	11990 <__assert_fail@plt+0x65c>
   11a10:	mov	r3, #1
   11a14:	strb	r3, [r4]
   11a18:	pop	{r4, pc}
   11a1c:	andeq	r2, r3, r4, ror #3
   11a20:	ldr	r0, [pc, #40]	; 11a50 <__assert_fail@plt+0x71c>
   11a24:	ldr	r3, [r0]
   11a28:	cmp	r3, #0
   11a2c:	bne	11a34 <__assert_fail@plt+0x700>
   11a30:	b	119c0 <__assert_fail@plt+0x68c>
   11a34:	ldr	r3, [pc, #24]	; 11a54 <__assert_fail@plt+0x720>
   11a38:	cmp	r3, #0
   11a3c:	beq	11a30 <__assert_fail@plt+0x6fc>
   11a40:	push	{r4, lr}
   11a44:	blx	r3
   11a48:	pop	{r4, lr}
   11a4c:	b	119c0 <__assert_fail@plt+0x68c>
   11a50:	andeq	r1, r3, r4, lsl pc
   11a54:	andeq	r0, r0, r0
   11a58:	push	{r4, r5, r6, r7, lr}
   11a5c:	sub	sp, sp, #20
   11a60:	ldr	r4, [pc, #224]	; 11b48 <__assert_fail@plt+0x814>
   11a64:	ldrb	r3, [r4]
   11a68:	cmp	r3, #0
   11a6c:	beq	11a90 <__assert_fail@plt+0x75c>
   11a70:	mov	r2, #5
   11a74:	ldr	r1, [pc, #208]	; 11b4c <__assert_fail@plt+0x818>
   11a78:	mov	r0, #0
   11a7c:	bl	11124 <dcgettext@plt>
   11a80:	mov	r1, #0
   11a84:	mov	r2, r0
   11a88:	mov	r0, #1
   11a8c:	bl	1119c <error@plt>
   11a90:	ldr	r5, [pc, #184]	; 11b50 <__assert_fail@plt+0x81c>
   11a94:	mov	r0, #1
   11a98:	ldr	r3, [r5, #8]
   11a9c:	ldr	r1, [r5, #4]
   11aa0:	str	r3, [sp, #8]
   11aa4:	ldrd	r2, [r4, #8]
   11aa8:	strd	r2, [sp]
   11aac:	ldr	r2, [r5]
   11ab0:	bl	11250 <__printf_chk@plt>
   11ab4:	ldrd	r2, [r5, #16]
   11ab8:	cmp	r2, #0
   11abc:	sbcs	r1, r3, #0
   11ac0:	bge	11b10 <__assert_fail@plt+0x7dc>
   11ac4:	mov	r6, #0
   11ac8:	mov	r7, #-2147483648	; 0x80000000
   11acc:	subs	r6, r6, r2
   11ad0:	ldrd	r0, [r4, #8]
   11ad4:	sbc	r7, r7, r3
   11ad8:	cmp	r0, r6
   11adc:	sbcs	r1, r1, r7
   11ae0:	movlt	r1, #1
   11ae4:	movge	r1, #0
   11ae8:	cmp	r1, #0
   11aec:	beq	11b34 <__assert_fail@plt+0x800>
   11af0:	ldrd	r0, [r4, #8]
   11af4:	adds	r2, r2, r0
   11af8:	adc	r3, r3, r1
   11afc:	strd	r2, [r4, #8]
   11b00:	mov	r3, #1
   11b04:	strb	r3, [r4]
   11b08:	add	sp, sp, #20
   11b0c:	pop	{r4, r5, r6, r7, pc}
   11b10:	ldrd	r6, [r4, #8]
   11b14:	cmp	r6, #0
   11b18:	sbcs	r1, r7, #0
   11b1c:	blt	11b34 <__assert_fail@plt+0x800>
   11b20:	mvn	r0, #0
   11b24:	mvn	r1, #-2147483648	; 0x80000000
   11b28:	subs	r0, r0, r2
   11b2c:	sbc	r1, r1, r3
   11b30:	b	11ad8 <__assert_fail@plt+0x7a4>
   11b34:	ldrd	r0, [r4, #8]
   11b38:	adds	r2, r2, r0
   11b3c:	adc	r3, r3, r1
   11b40:	strd	r2, [r4, #8]
   11b44:	b	11b08 <__assert_fail@plt+0x7d4>
   11b48:	andeq	r2, r3, r8, ror #3
   11b4c:	andeq	r0, r2, r4, lsr r9
   11b50:	andeq	r2, r3, r0, lsr r1
   11b54:	push	{r4, r5, r6, lr}
   11b58:	ldr	lr, [pc, #160]	; 11c00 <__assert_fail@plt+0x8cc>
   11b5c:	ldr	r3, [lr]
   11b60:	ldrb	ip, [r3]
   11b64:	cmp	ip, #110	; 0x6e
   11b68:	beq	11b78 <__assert_fail@plt+0x844>
   11b6c:	bhi	11b84 <__assert_fail@plt+0x850>
   11b70:	cmp	ip, #97	; 0x61
   11b74:	bne	11bf8 <__assert_fail@plt+0x8c4>
   11b78:	str	r3, [r0]
   11b7c:	mov	r0, #1
   11b80:	pop	{r4, r5, r6, pc}
   11b84:	cmp	ip, #112	; 0x70
   11b88:	beq	11b94 <__assert_fail@plt+0x860>
   11b8c:	cmp	ip, #116	; 0x74
   11b90:	b	11b74 <__assert_fail@plt+0x840>
   11b94:	mov	r4, r1
   11b98:	add	r1, r3, #1
   11b9c:	str	r1, [lr]
   11ba0:	str	r3, [r0]
   11ba4:	ldr	r3, [pc, #88]	; 11c04 <__assert_fail@plt+0x8d0>
   11ba8:	ldr	r6, [lr]
   11bac:	mov	r5, #0
   11bb0:	str	r2, [r4, #16]
   11bb4:	ldr	r2, [pc, #76]	; 11c08 <__assert_fail@plt+0x8d4>
   11bb8:	str	r5, [r4]
   11bbc:	str	r5, [r4, #4]
   11bc0:	str	r5, [r4, #20]
   11bc4:	mov	r0, r6
   11bc8:	str	r2, [r3]
   11bcc:	bl	111fc <strlen@plt>
   11bd0:	mov	r2, r4
   11bd4:	mov	r1, r0
   11bd8:	mov	r0, r6
   11bdc:	bl	1e460 <__assert_fail@plt+0xd12c>
   11be0:	subs	r3, r0, #0
   11be4:	beq	11b7c <__assert_fail@plt+0x848>
   11be8:	ldr	r2, [pc, #28]	; 11c0c <__assert_fail@plt+0x8d8>
   11bec:	mov	r1, r5
   11bf0:	mov	r0, #1
   11bf4:	bl	1119c <error@plt>
   11bf8:	mov	r0, #0
   11bfc:	pop	{r4, r5, r6, pc}
   11c00:	andeq	r2, r3, r0, ror #3
   11c04:	ldrdeq	r2, [r3], -r0
   11c08:	andeq	r0, r0, r6, asr #5
   11c0c:			; <UNDEFINED> instruction: 0x000211b5
   11c10:	ldr	r2, [pc, #28]	; 11c34 <__assert_fail@plt+0x900>
   11c14:	ldrb	r3, [r2, #24]
   11c18:	cmp	r3, #0
   11c1c:	ldrne	r3, [pc, #20]	; 11c38 <__assert_fail@plt+0x904>
   11c20:	ldrdne	r0, [r2, #32]
   11c24:	movne	r2, #0
   11c28:	strbne	r2, [r3]
   11c2c:	strdne	r0, [r3, #8]
   11c30:	bx	lr
   11c34:	andeq	r2, r3, r0, lsr r1
   11c38:	andeq	r2, r3, r8, ror #3
   11c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c40:	sub	sp, sp, #20
   11c44:	ldr	r1, [pc, #744]	; 11f34 <__assert_fail@plt+0xc00>
   11c48:	mov	r8, r0
   11c4c:	bl	1104c <strcmp@plt>
   11c50:	cmp	r0, #0
   11c54:	bne	11ce0 <__assert_fail@plt+0x9ac>
   11c58:	ldr	r3, [pc, #728]	; 11f38 <__assert_fail@plt+0xc04>
   11c5c:	mov	r2, #1
   11c60:	strb	r2, [r3, #16]
   11c64:	ldr	r3, [pc, #720]	; 11f3c <__assert_fail@plt+0xc08>
   11c68:	ldr	r5, [r3]
   11c6c:	mov	r1, #2
   11c70:	mov	r0, r5
   11c74:	bl	12378 <__assert_fail@plt+0x1044>
   11c78:	ldr	r4, [pc, #696]	; 11f38 <__assert_fail@plt+0xc04>
   11c7c:	ldr	r7, [pc, #700]	; 11f40 <__assert_fail@plt+0xc0c>
   11c80:	mov	r1, r5
   11c84:	ldr	r0, [pc, #696]	; 11f44 <__assert_fail@plt+0xc10>
   11c88:	bl	12624 <__assert_fail@plt+0x12f0>
   11c8c:	cmp	r0, #0
   11c90:	bne	11d28 <__assert_fail@plt+0x9f4>
   11c94:	bl	11214 <__errno_location@plt>
   11c98:	ldr	r4, [r0]
   11c9c:	mov	r6, r0
   11ca0:	mov	r0, r5
   11ca4:	bl	11184 <ferror_unlocked@plt>
   11ca8:	ldr	r1, [pc, #644]	; 11f34 <__assert_fail@plt+0xc00>
   11cac:	cmp	r0, #0
   11cb0:	mov	r0, r8
   11cb4:	moveq	r4, #0
   11cb8:	bl	1104c <strcmp@plt>
   11cbc:	cmp	r0, #0
   11cc0:	mov	r0, r5
   11cc4:	bne	11eb8 <__assert_fail@plt+0xb84>
   11cc8:	bl	112c8 <clearerr_unlocked@plt>
   11ccc:	cmp	r4, #0
   11cd0:	moveq	r0, #1
   11cd4:	bne	11cfc <__assert_fail@plt+0x9c8>
   11cd8:	add	sp, sp, #20
   11cdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ce0:	ldr	r1, [pc, #608]	; 11f48 <__assert_fail@plt+0xc14>
   11ce4:	mov	r0, r8
   11ce8:	bl	112d4 <fopen64@plt>
   11cec:	subs	r5, r0, #0
   11cf0:	bne	11c6c <__assert_fail@plt+0x938>
   11cf4:	bl	11214 <__errno_location@plt>
   11cf8:	ldr	r4, [r0]
   11cfc:	mov	r2, r8
   11d00:	mov	r1, #3
   11d04:	mov	r0, #0
   11d08:	bl	13b24 <__assert_fail@plt+0x27f0>
   11d0c:	ldr	r2, [pc, #568]	; 11f4c <__assert_fail@plt+0xc18>
   11d10:	mov	r1, r4
   11d14:	mov	r3, r0
   11d18:	mov	r0, #0
   11d1c:	bl	1119c <error@plt>
   11d20:	mov	r0, #0
   11d24:	b	11cd8 <__assert_fail@plt+0x9a4>
   11d28:	ldr	sl, [r4, #24]
   11d2c:	sub	r6, sl, #1
   11d30:	cmp	r6, #1
   11d34:	bls	11dd4 <__assert_fail@plt+0xaa0>
   11d38:	ldr	r3, [r4, #32]
   11d3c:	cmp	r3, #1
   11d40:	str	r3, [sp, #12]
   11d44:	bls	11dd4 <__assert_fail@plt+0xaa0>
   11d48:	ldr	fp, [pc, #512]	; 11f50 <__assert_fail@plt+0xc1c>
   11d4c:	ldr	r9, [r4, #28]
   11d50:	mov	r2, #2
   11d54:	ldr	r1, [fp, #40]	; 0x28
   11d58:	mov	r0, r9
   11d5c:	bl	110f4 <memcmp@plt>
   11d60:	cmp	r0, #0
   11d64:	bne	11dd4 <__assert_fail@plt+0xaa0>
   11d68:	ldr	r2, [r4, #36]	; 0x24
   11d6c:	cmp	r6, r2
   11d70:	bne	11d8c <__assert_fail@plt+0xa58>
   11d74:	mov	r2, r6
   11d78:	ldr	r1, [r4, #40]	; 0x28
   11d7c:	mov	r0, r9
   11d80:	bl	110f4 <memcmp@plt>
   11d84:	cmp	r0, #0
   11d88:	beq	11ef4 <__assert_fail@plt+0xbc0>
   11d8c:	ldr	r2, [r4, #44]	; 0x2c
   11d90:	cmp	r6, r2
   11d94:	bne	11db0 <__assert_fail@plt+0xa7c>
   11d98:	mov	r2, r6
   11d9c:	ldr	r1, [r4, #48]	; 0x30
   11da0:	mov	r0, r9
   11da4:	bl	110f4 <memcmp@plt>
   11da8:	cmp	r0, #0
   11dac:	beq	11f14 <__assert_fail@plt+0xbe0>
   11db0:	ldr	r3, [sp, #12]
   11db4:	cmp	r6, r3
   11db8:	bne	11dd4 <__assert_fail@plt+0xaa0>
   11dbc:	mov	r2, r6
   11dc0:	ldr	r1, [r4, #52]	; 0x34
   11dc4:	mov	r0, r9
   11dc8:	bl	110f4 <memcmp@plt>
   11dcc:	cmp	r0, #0
   11dd0:	beq	11f24 <__assert_fail@plt+0xbf0>
   11dd4:	ldr	r3, [r4, #72]	; 0x48
   11dd8:	ldrb	r3, [r3]
   11ddc:	cmp	r3, #110	; 0x6e
   11de0:	beq	11e50 <__assert_fail@plt+0xb1c>
   11de4:	bhi	11ed4 <__assert_fail@plt+0xba0>
   11de8:	cmp	r3, #97	; 0x61
   11dec:	bne	11e1c <__assert_fail@plt+0xae8>
   11df0:	ldr	r3, [pc, #344]	; 11f50 <__assert_fail@plt+0xc1c>
   11df4:	ldrd	r0, [r3, #48]	; 0x30
   11df8:	cmp	r0, #2
   11dfc:	sbcs	r3, r1, #0
   11e00:	blt	11eec <__assert_fail@plt+0xbb8>
   11e04:	cmp	sl, #1
   11e08:	ble	11e34 <__assert_fail@plt+0xb00>
   11e0c:	bl	11a58 <__assert_fail@plt+0x724>
   11e10:	mov	r2, #0
   11e14:	mov	r3, #0
   11e18:	strd	r2, [r4, #56]	; 0x38
   11e1c:	ldr	r3, [r7]
   11e20:	ldr	r2, [r4, #24]
   11e24:	mov	r1, #1
   11e28:	ldr	r0, [r4, #28]
   11e2c:	bl	110e8 <fwrite_unlocked@plt>
   11e30:	b	11c80 <__assert_fail@plt+0x94c>
   11e34:	ldrd	r2, [r4, #56]	; 0x38
   11e38:	adds	r2, r2, #1
   11e3c:	adc	r3, r3, #0
   11e40:	cmp	r1, r3
   11e44:	cmpeq	r0, r2
   11e48:	strd	r2, [r4, #56]	; 0x38
   11e4c:	beq	11e0c <__assert_fail@plt+0xad8>
   11e50:	ldr	r1, [r7]
   11e54:	ldr	r0, [r4, #64]	; 0x40
   11e58:	bl	11010 <fputs_unlocked@plt>
   11e5c:	b	11e1c <__assert_fail@plt+0xae8>
   11e60:	mov	r9, #0
   11e64:	mov	r3, r9
   11e68:	stm	sp, {r6, r9}
   11e6c:	mov	r2, r6
   11e70:	ldr	r1, [r4, #28]
   11e74:	ldr	r0, [r4, #68]	; 0x44
   11e78:	bl	1eca4 <__assert_fail@plt+0xd970>
   11e7c:	cmn	r0, #2
   11e80:	beq	11e90 <__assert_fail@plt+0xb5c>
   11e84:	cmn	r0, #1
   11e88:	beq	11e50 <__assert_fail@plt+0xb1c>
   11e8c:	b	11eec <__assert_fail@plt+0xbb8>
   11e90:	bl	11214 <__errno_location@plt>
   11e94:	mov	r2, #5
   11e98:	ldr	r1, [pc, #180]	; 11f54 <__assert_fail@plt+0xc20>
   11e9c:	ldr	r4, [r0]
   11ea0:	mov	r0, r9
   11ea4:	bl	11124 <dcgettext@plt>
   11ea8:	mov	r1, r4
   11eac:	mov	r2, r0
   11eb0:	mov	r0, #1
   11eb4:	bl	1119c <error@plt>
   11eb8:	bl	123a8 <__assert_fail@plt+0x1074>
   11ebc:	cmp	r0, #0
   11ec0:	beq	11ccc <__assert_fail@plt+0x998>
   11ec4:	cmp	r4, #0
   11ec8:	bne	11cfc <__assert_fail@plt+0x9c8>
   11ecc:	ldr	r4, [r6]
   11ed0:	b	11ccc <__assert_fail@plt+0x998>
   11ed4:	cmp	r3, #112	; 0x70
   11ed8:	beq	11e60 <__assert_fail@plt+0xb2c>
   11edc:	cmp	r3, #116	; 0x74
   11ee0:	bne	11e1c <__assert_fail@plt+0xae8>
   11ee4:	cmp	sl, #1
   11ee8:	ble	11e50 <__assert_fail@plt+0xb1c>
   11eec:	bl	11a58 <__assert_fail@plt+0x724>
   11ef0:	b	11e1c <__assert_fail@plt+0xae8>
   11ef4:	ldr	r3, [fp, #56]	; 0x38
   11ef8:	str	r3, [r4, #72]	; 0x48
   11efc:	ldr	r3, [pc, #84]	; 11f58 <__assert_fail@plt+0xc24>
   11f00:	str	r3, [r4, #68]	; 0x44
   11f04:	bl	11c10 <__assert_fail@plt+0x8dc>
   11f08:	mov	r0, #10
   11f0c:	bl	11328 <putchar_unlocked@plt>
   11f10:	b	11c80 <__assert_fail@plt+0x94c>
   11f14:	ldr	r3, [fp, #60]	; 0x3c
   11f18:	str	r3, [r4, #72]	; 0x48
   11f1c:	ldr	r3, [pc, #56]	; 11f5c <__assert_fail@plt+0xc28>
   11f20:	b	11f00 <__assert_fail@plt+0xbcc>
   11f24:	ldr	r3, [fp, #64]	; 0x40
   11f28:	str	r3, [r4, #72]	; 0x48
   11f2c:	ldr	r3, [pc, #44]	; 11f60 <__assert_fail@plt+0xc2c>
   11f30:	b	11f00 <__assert_fail@plt+0xbcc>
   11f34:	andeq	r1, r2, fp, asr r4
   11f38:	andeq	r2, r3, r8, ror #3
   11f3c:	ldrdeq	r2, [r3], -r8
   11f40:	ldrdeq	r2, [r3], -ip
   11f44:	strdeq	r2, [r3], -ip
   11f48:	andeq	r1, r2, r7, lsl r2
   11f4c:			; <UNDEFINED> instruction: 0x000211b5
   11f50:	andeq	r2, r3, r0, lsr r1
   11f54:	andeq	r0, r2, r9, asr #18
   11f58:	andeq	r2, r3, r4, lsr r2
   11f5c:	andeq	r2, r3, r4, asr r2
   11f60:	andeq	r2, r3, r4, ror r2
   11f64:	subs	r5, r0, #0
   11f68:	push	{r7, lr}
   11f6c:	sub	sp, sp, #56	; 0x38
   11f70:	ldr	r4, [pc, #644]	; 121fc <__assert_fail@plt+0xec8>
   11f74:	beq	11fac <__assert_fail@plt+0xc78>
   11f78:	ldr	r3, [pc, #640]	; 12200 <__assert_fail@plt+0xecc>
   11f7c:	mov	r2, #5
   11f80:	ldr	r1, [pc, #636]	; 12204 <__assert_fail@plt+0xed0>
   11f84:	mov	r0, #0
   11f88:	ldr	r6, [r3]
   11f8c:	bl	11124 <dcgettext@plt>
   11f90:	ldr	r3, [r4]
   11f94:	mov	r1, #1
   11f98:	mov	r2, r0
   11f9c:	mov	r0, r6
   11fa0:	bl	11268 <__fprintf_chk@plt>
   11fa4:	mov	r0, r5
   11fa8:	bl	111f0 <exit@plt>
   11fac:	mov	r2, #5
   11fb0:	ldr	r1, [pc, #592]	; 12208 <__assert_fail@plt+0xed4>
   11fb4:	bl	11124 <dcgettext@plt>
   11fb8:	ldr	r2, [r4]
   11fbc:	ldr	r4, [pc, #584]	; 1220c <__assert_fail@plt+0xed8>
   11fc0:	ldr	r8, [pc, #584]	; 12210 <__assert_fail@plt+0xedc>
   11fc4:	mov	r6, r5
   11fc8:	mov	r1, r0
   11fcc:	mov	r0, #1
   11fd0:	bl	11250 <__printf_chk@plt>
   11fd4:	mov	r2, #5
   11fd8:	ldr	r1, [pc, #564]	; 12214 <__assert_fail@plt+0xee0>
   11fdc:	mov	r0, r5
   11fe0:	bl	11124 <dcgettext@plt>
   11fe4:	ldr	r1, [r4]
   11fe8:	bl	11010 <fputs_unlocked@plt>
   11fec:	mov	r2, #5
   11ff0:	ldr	r1, [pc, #544]	; 12218 <__assert_fail@plt+0xee4>
   11ff4:	mov	r0, r5
   11ff8:	bl	11124 <dcgettext@plt>
   11ffc:	ldr	r1, [r4]
   12000:	bl	11010 <fputs_unlocked@plt>
   12004:	mov	r2, #5
   12008:	ldr	r1, [pc, #524]	; 1221c <__assert_fail@plt+0xee8>
   1200c:	mov	r0, r5
   12010:	bl	11124 <dcgettext@plt>
   12014:	ldr	r1, [r4]
   12018:	bl	11010 <fputs_unlocked@plt>
   1201c:	mov	r2, #5
   12020:	ldr	r1, [pc, #504]	; 12220 <__assert_fail@plt+0xeec>
   12024:	mov	r0, r5
   12028:	bl	11124 <dcgettext@plt>
   1202c:	ldr	r1, [r4]
   12030:	bl	11010 <fputs_unlocked@plt>
   12034:	mov	r2, #5
   12038:	ldr	r1, [pc, #484]	; 12224 <__assert_fail@plt+0xef0>
   1203c:	mov	r0, r5
   12040:	bl	11124 <dcgettext@plt>
   12044:	ldr	r1, [r4]
   12048:	bl	11010 <fputs_unlocked@plt>
   1204c:	mov	r2, #5
   12050:	ldr	r1, [pc, #464]	; 12228 <__assert_fail@plt+0xef4>
   12054:	mov	r0, r5
   12058:	bl	11124 <dcgettext@plt>
   1205c:	ldr	r1, [r4]
   12060:	bl	11010 <fputs_unlocked@plt>
   12064:	mov	r2, #5
   12068:	ldr	r1, [pc, #444]	; 1222c <__assert_fail@plt+0xef8>
   1206c:	mov	r0, r5
   12070:	bl	11124 <dcgettext@plt>
   12074:	ldr	r1, [r4]
   12078:	bl	11010 <fputs_unlocked@plt>
   1207c:	mov	r2, #5
   12080:	ldr	r1, [pc, #424]	; 12230 <__assert_fail@plt+0xefc>
   12084:	mov	r0, r5
   12088:	bl	11124 <dcgettext@plt>
   1208c:	ldr	r1, [r4]
   12090:	bl	11010 <fputs_unlocked@plt>
   12094:	mov	r2, #5
   12098:	ldr	r1, [pc, #404]	; 12234 <__assert_fail@plt+0xf00>
   1209c:	mov	r0, r5
   120a0:	bl	11124 <dcgettext@plt>
   120a4:	ldr	r1, [r4]
   120a8:	bl	11010 <fputs_unlocked@plt>
   120ac:	mov	r2, #5
   120b0:	ldr	r1, [pc, #384]	; 12238 <__assert_fail@plt+0xf04>
   120b4:	mov	r0, r5
   120b8:	bl	11124 <dcgettext@plt>
   120bc:	ldr	r1, [r4]
   120c0:	bl	11010 <fputs_unlocked@plt>
   120c4:	mov	r2, #5
   120c8:	ldr	r1, [pc, #364]	; 1223c <__assert_fail@plt+0xf08>
   120cc:	mov	r0, r5
   120d0:	bl	11124 <dcgettext@plt>
   120d4:	ldr	r1, [r4]
   120d8:	bl	11010 <fputs_unlocked@plt>
   120dc:	ldr	lr, [pc, #348]	; 12240 <__assert_fail@plt+0xf0c>
   120e0:	mov	ip, sp
   120e4:	ldm	lr!, {r0, r1, r2, r3}
   120e8:	stmia	ip!, {r0, r1, r2, r3}
   120ec:	ldm	lr!, {r0, r1, r2, r3}
   120f0:	stmia	ip!, {r0, r1, r2, r3}
   120f4:	ldm	lr!, {r0, r1, r2, r3}
   120f8:	stmia	ip!, {r0, r1, r2, r3}
   120fc:	ldm	lr, {r0, r1}
   12100:	stm	ip, {r0, r1}
   12104:	ldr	r1, [sp, r6]
   12108:	add	r7, sp, r6
   1210c:	cmp	r1, #0
   12110:	bne	121b4 <__assert_fail@plt+0xe80>
   12114:	ldr	r6, [r7, #4]
   12118:	ldr	r7, [pc, #240]	; 12210 <__assert_fail@plt+0xedc>
   1211c:	cmp	r6, #0
   12120:	mov	r2, #5
   12124:	ldr	r1, [pc, #280]	; 12244 <__assert_fail@plt+0xf10>
   12128:	mov	r0, #0
   1212c:	moveq	r6, r7
   12130:	bl	11124 <dcgettext@plt>
   12134:	ldr	r3, [pc, #268]	; 12248 <__assert_fail@plt+0xf14>
   12138:	ldr	r2, [pc, #268]	; 1224c <__assert_fail@plt+0xf18>
   1213c:	mov	r1, r0
   12140:	mov	r0, #1
   12144:	bl	11250 <__printf_chk@plt>
   12148:	mov	r1, #0
   1214c:	mov	r0, #5
   12150:	bl	11298 <setlocale@plt>
   12154:	cmp	r0, #0
   12158:	bne	121cc <__assert_fail@plt+0xe98>
   1215c:	mov	r2, #5
   12160:	ldr	r1, [pc, #232]	; 12250 <__assert_fail@plt+0xf1c>
   12164:	mov	r0, #0
   12168:	bl	11124 <dcgettext@plt>
   1216c:	ldr	r3, [pc, #156]	; 12210 <__assert_fail@plt+0xedc>
   12170:	ldr	r2, [pc, #208]	; 12248 <__assert_fail@plt+0xf14>
   12174:	mov	r1, r0
   12178:	mov	r0, #1
   1217c:	bl	11250 <__printf_chk@plt>
   12180:	mov	r2, #5
   12184:	ldr	r1, [pc, #200]	; 12254 <__assert_fail@plt+0xf20>
   12188:	mov	r0, #0
   1218c:	bl	11124 <dcgettext@plt>
   12190:	ldr	r2, [pc, #192]	; 12258 <__assert_fail@plt+0xf24>
   12194:	cmp	r6, r7
   12198:	ldr	r3, [pc, #188]	; 1225c <__assert_fail@plt+0xf28>
   1219c:	moveq	r3, r2
   121a0:	mov	r2, r6
   121a4:	mov	r1, r0
   121a8:	mov	r0, #1
   121ac:	bl	11250 <__printf_chk@plt>
   121b0:	b	11fa4 <__assert_fail@plt+0xc70>
   121b4:	mov	r0, r8
   121b8:	bl	1104c <strcmp@plt>
   121bc:	add	r6, r6, #8
   121c0:	cmp	r0, #0
   121c4:	bne	12104 <__assert_fail@plt+0xdd0>
   121c8:	b	12114 <__assert_fail@plt+0xde0>
   121cc:	mov	r2, #3
   121d0:	ldr	r1, [pc, #136]	; 12260 <__assert_fail@plt+0xf2c>
   121d4:	bl	11304 <strncmp@plt>
   121d8:	cmp	r0, #0
   121dc:	beq	1215c <__assert_fail@plt+0xe28>
   121e0:	mov	r2, #5
   121e4:	ldr	r1, [pc, #120]	; 12264 <__assert_fail@plt+0xf30>
   121e8:	mov	r0, #0
   121ec:	bl	11124 <dcgettext@plt>
   121f0:	ldr	r1, [r4]
   121f4:	bl	11010 <fputs_unlocked@plt>
   121f8:	b	1215c <__assert_fail@plt+0xe28>
   121fc:	muleq	r3, ip, r5
   12200:	ldrdeq	r2, [r3], -r0
   12204:	andeq	r0, r2, pc, ror #18
   12208:	muleq	r2, r6, r9
   1220c:	ldrdeq	r2, [r3], -ip
   12210:	andeq	r0, r2, ip, ror #18
   12214:			; <UNDEFINED> instruction: 0x000209b7
   12218:	strdeq	r0, [r2], -r5
   1221c:	andeq	r0, r2, sp, lsr #20
   12220:	andeq	r0, r2, r8, ror sl
   12224:	andeq	r0, r2, sl, asr #22
   12228:	andeq	r0, r2, r5, lsl #26
   1222c:	muleq	r2, r4, sp
   12230:	andeq	r0, r2, r1, asr #27
   12234:	strdeq	r0, [r2], -r7
   12238:	andeq	r0, r2, sl, lsr pc
   1223c:	andeq	r1, r2, r4
   12240:	andeq	r0, r2, r0, lsl #16
   12244:	muleq	r2, r7, r0
   12248:	andeq	r1, r2, lr, lsr #1
   1224c:	ldrdeq	r1, [r2], -r6
   12250:	andeq	r1, r2, pc, lsr #2
   12254:	andeq	r1, r2, sl, asr #2
   12258:	strdeq	r1, [r2], -r5
   1225c:	strdeq	r1, [r2], -r6
   12260:	andeq	r1, r2, r4, ror #1
   12264:	andeq	r1, r2, r8, ror #1
   12268:	ldr	r3, [pc, #4]	; 12274 <__assert_fail@plt+0xf40>
   1226c:	str	r0, [r3]
   12270:	bx	lr
   12274:	muleq	r3, r4, r5
   12278:	ldr	r3, [pc, #4]	; 12284 <__assert_fail@plt+0xf50>
   1227c:	strb	r0, [r3, #4]
   12280:	bx	lr
   12284:	muleq	r3, r4, r5
   12288:	ldr	r3, [pc, #192]	; 12350 <__assert_fail@plt+0x101c>
   1228c:	push	{r0, r1, r4, r5, r6, lr}
   12290:	ldr	r0, [r3]
   12294:	bl	1fdf4 <__assert_fail@plt+0xeac0>
   12298:	cmp	r0, #0
   1229c:	beq	12334 <__assert_fail@plt+0x1000>
   122a0:	ldr	r3, [pc, #172]	; 12354 <__assert_fail@plt+0x1020>
   122a4:	mov	r4, r3
   122a8:	ldrb	r2, [r3, #4]
   122ac:	cmp	r2, #0
   122b0:	beq	122c4 <__assert_fail@plt+0xf90>
   122b4:	bl	11214 <__errno_location@plt>
   122b8:	ldr	r3, [r0]
   122bc:	cmp	r3, #32
   122c0:	beq	12334 <__assert_fail@plt+0x1000>
   122c4:	mov	r2, #5
   122c8:	ldr	r1, [pc, #136]	; 12358 <__assert_fail@plt+0x1024>
   122cc:	mov	r0, #0
   122d0:	bl	11124 <dcgettext@plt>
   122d4:	ldr	r4, [r4]
   122d8:	cmp	r4, #0
   122dc:	mov	r5, r0
   122e0:	beq	12318 <__assert_fail@plt+0xfe4>
   122e4:	bl	11214 <__errno_location@plt>
   122e8:	ldr	r6, [r0]
   122ec:	mov	r0, r4
   122f0:	bl	13b14 <__assert_fail@plt+0x27e0>
   122f4:	str	r5, [sp]
   122f8:	ldr	r2, [pc, #92]	; 1235c <__assert_fail@plt+0x1028>
   122fc:	mov	r1, r6
   12300:	mov	r3, r0
   12304:	mov	r0, #0
   12308:	bl	1119c <error@plt>
   1230c:	ldr	r3, [pc, #76]	; 12360 <__assert_fail@plt+0x102c>
   12310:	ldr	r0, [r3]
   12314:	bl	110a0 <_exit@plt>
   12318:	bl	11214 <__errno_location@plt>
   1231c:	mov	r3, r5
   12320:	ldr	r2, [pc, #60]	; 12364 <__assert_fail@plt+0x1030>
   12324:	ldr	r1, [r0]
   12328:	mov	r0, r4
   1232c:	bl	1119c <error@plt>
   12330:	b	1230c <__assert_fail@plt+0xfd8>
   12334:	ldr	r3, [pc, #44]	; 12368 <__assert_fail@plt+0x1034>
   12338:	ldr	r0, [r3]
   1233c:	bl	1fdf4 <__assert_fail@plt+0xeac0>
   12340:	cmp	r0, #0
   12344:	bne	1230c <__assert_fail@plt+0xfd8>
   12348:	add	sp, sp, #8
   1234c:	pop	{r4, r5, r6, pc}
   12350:	ldrdeq	r2, [r3], -ip
   12354:	muleq	r3, r4, r5
   12358:	andeq	r1, r2, r6, lsl #8
   1235c:	andeq	r1, r2, r2, lsl r4
   12360:	andeq	r2, r3, ip, ror r1
   12364:			; <UNDEFINED> instruction: 0x000211b5
   12368:	ldrdeq	r2, [r3], -r0
   1236c:	push	{r4, r5}
   12370:	pop	{r4, r5}
   12374:	b	11058 <posix_fadvise64@plt>
   12378:	cmp	r0, #0
   1237c:	bxeq	lr
   12380:	push	{r0, r1, r2, r3, r4, lr}
   12384:	mov	r4, r1
   12388:	bl	1125c <fileno@plt>
   1238c:	mov	r2, #0
   12390:	mov	r3, #0
   12394:	str	r4, [sp, #8]
   12398:	strd	r2, [sp]
   1239c:	bl	11058 <posix_fadvise64@plt>
   123a0:	add	sp, sp, #16
   123a4:	pop	{r4, pc}
   123a8:	push	{r0, r1, r2, r4, r5, lr}
   123ac:	mov	r4, r0
   123b0:	bl	1125c <fileno@plt>
   123b4:	cmp	r0, #0
   123b8:	mov	r0, r4
   123bc:	bge	123cc <__assert_fail@plt+0x1098>
   123c0:	add	sp, sp, #12
   123c4:	pop	{r4, r5, lr}
   123c8:	b	11280 <fclose@plt>
   123cc:	bl	111c0 <__freading@plt>
   123d0:	cmp	r0, #0
   123d4:	bne	12410 <__assert_fail@plt+0x10dc>
   123d8:	mov	r0, r4
   123dc:	bl	12450 <__assert_fail@plt+0x111c>
   123e0:	cmp	r0, #0
   123e4:	bne	12444 <__assert_fail@plt+0x1110>
   123e8:	mov	r5, #0
   123ec:	mov	r0, r4
   123f0:	bl	11280 <fclose@plt>
   123f4:	cmp	r5, #0
   123f8:	beq	12408 <__assert_fail@plt+0x10d4>
   123fc:	bl	11214 <__errno_location@plt>
   12400:	str	r5, [r0]
   12404:	mvn	r0, #0
   12408:	add	sp, sp, #12
   1240c:	pop	{r4, r5, pc}
   12410:	mov	r0, r4
   12414:	bl	1125c <fileno@plt>
   12418:	mov	r3, #1
   1241c:	str	r3, [sp]
   12420:	mov	r2, #0
   12424:	mov	r3, #0
   12428:	bl	11154 <lseek64@plt>
   1242c:	mvn	r3, #0
   12430:	mvn	r2, #0
   12434:	cmp	r1, r3
   12438:	cmpeq	r0, r2
   1243c:	bne	123d8 <__assert_fail@plt+0x10a4>
   12440:	b	123e8 <__assert_fail@plt+0x10b4>
   12444:	bl	11214 <__errno_location@plt>
   12448:	ldr	r5, [r0]
   1244c:	b	123ec <__assert_fail@plt+0x10b8>
   12450:	push	{r0, r1, r4, lr}
   12454:	subs	r4, r0, #0
   12458:	bne	1246c <__assert_fail@plt+0x1138>
   1245c:	mov	r0, r4
   12460:	add	sp, sp, #8
   12464:	pop	{r4, lr}
   12468:	b	11070 <fflush@plt>
   1246c:	bl	111c0 <__freading@plt>
   12470:	cmp	r0, #0
   12474:	beq	1245c <__assert_fail@plt+0x1128>
   12478:	ldr	r3, [r4]
   1247c:	tst	r3, #256	; 0x100
   12480:	beq	1245c <__assert_fail@plt+0x1128>
   12484:	mov	r3, #1
   12488:	str	r3, [sp]
   1248c:	mov	r2, #0
   12490:	mov	r3, #0
   12494:	mov	r0, r4
   12498:	bl	124a0 <__assert_fail@plt+0x116c>
   1249c:	b	1245c <__assert_fail@plt+0x1128>
   124a0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   124a4:	mov	r4, r0
   124a8:	ldmib	r0, {ip, lr}
   124ac:	ldr	r8, [sp, #32]
   124b0:	cmp	lr, ip
   124b4:	bne	12520 <__assert_fail@plt+0x11ec>
   124b8:	ldr	lr, [r0, #20]
   124bc:	ldr	ip, [r0, #16]
   124c0:	cmp	lr, ip
   124c4:	bne	12520 <__assert_fail@plt+0x11ec>
   124c8:	ldr	r5, [r0, #36]	; 0x24
   124cc:	cmp	r5, #0
   124d0:	bne	12520 <__assert_fail@plt+0x11ec>
   124d4:	mov	r6, r2
   124d8:	mov	r7, r3
   124dc:	bl	1125c <fileno@plt>
   124e0:	mov	r2, r6
   124e4:	mov	r3, r7
   124e8:	str	r8, [sp]
   124ec:	bl	11154 <lseek64@plt>
   124f0:	mvn	r3, #0
   124f4:	mvn	r2, #0
   124f8:	cmp	r1, r3
   124fc:	cmpeq	r0, r2
   12500:	mvneq	r0, #0
   12504:	ldrne	r3, [r4]
   12508:	strdne	r0, [r4, #80]	; 0x50
   1250c:	movne	r0, r5
   12510:	bicne	r3, r3, #16
   12514:	strne	r3, [r4]
   12518:	add	sp, sp, #8
   1251c:	pop	{r4, r5, r6, r7, r8, pc}
   12520:	str	r8, [sp, #32]
   12524:	mov	r0, r4
   12528:	add	sp, sp, #8
   1252c:	pop	{r4, r5, r6, r7, r8, lr}
   12530:	b	1128c <fseeko64@plt>
   12534:	mov	r3, #0
   12538:	str	r3, [r0]
   1253c:	str	r3, [r0, #4]
   12540:	str	r3, [r0, #8]
   12544:	bx	lr
   12548:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1254c:	mov	r4, r0
   12550:	ldr	r5, [r0, #8]
   12554:	ldr	r6, [r0]
   12558:	mov	r0, r1
   1255c:	mov	r9, r1
   12560:	mov	r8, r2
   12564:	bl	1131c <feof_unlocked@plt>
   12568:	add	r6, r5, r6
   1256c:	cmp	r0, #0
   12570:	moveq	sl, r5
   12574:	mvneq	fp, #0
   12578:	beq	1258c <__assert_fail@plt+0x1258>
   1257c:	mov	r4, #0
   12580:	mov	r0, r4
   12584:	add	sp, sp, #12
   12588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1258c:	mov	r0, r9
   12590:	bl	11118 <getc_unlocked@plt>
   12594:	cmn	r0, #1
   12598:	mov	r7, r0
   1259c:	bne	125c8 <__assert_fail@plt+0x1294>
   125a0:	cmp	r5, sl
   125a4:	beq	1257c <__assert_fail@plt+0x1248>
   125a8:	mov	r0, r9
   125ac:	bl	11184 <ferror_unlocked@plt>
   125b0:	cmp	r0, #0
   125b4:	bne	1257c <__assert_fail@plt+0x1248>
   125b8:	ldrb	r2, [sl, #-1]
   125bc:	cmp	r2, r8
   125c0:	beq	12618 <__assert_fail@plt+0x12e4>
   125c4:	mov	r7, r8
   125c8:	cmp	sl, r6
   125cc:	movne	r2, sl
   125d0:	bne	12608 <__assert_fail@plt+0x12d4>
   125d4:	mov	r3, #1
   125d8:	ldr	r6, [r4]
   125dc:	mov	r2, #1
   125e0:	str	r3, [sp]
   125e4:	mov	r0, r5
   125e8:	mov	r3, fp
   125ec:	mov	r1, r4
   125f0:	bl	1f400 <__assert_fail@plt+0xe0cc>
   125f4:	add	r2, r0, r6
   125f8:	ldr	r6, [r4]
   125fc:	mov	r5, r0
   12600:	add	r6, r0, r6
   12604:	str	r0, [r4, #8]
   12608:	cmp	r7, r8
   1260c:	add	sl, r2, #1
   12610:	strb	r7, [r2]
   12614:	bne	1258c <__assert_fail@plt+0x1258>
   12618:	sub	r5, sl, r5
   1261c:	str	r5, [r4, #4]
   12620:	b	12580 <__assert_fail@plt+0x124c>
   12624:	mov	r2, #10
   12628:	b	12548 <__assert_fail@plt+0x1214>
   1262c:	ldr	r0, [r0, #8]
   12630:	b	1ff1c <__assert_fail@plt+0xebe8>
   12634:	push	{r4, r5, r6, lr}
   12638:	subs	r5, r0, #0
   1263c:	bne	12654 <__assert_fail@plt+0x1320>
   12640:	ldr	r3, [pc, #124]	; 126c4 <__assert_fail@plt+0x1390>
   12644:	ldr	r0, [pc, #124]	; 126c8 <__assert_fail@plt+0x1394>
   12648:	ldr	r1, [r3]
   1264c:	bl	112f8 <fputs@plt>
   12650:	bl	11310 <abort@plt>
   12654:	mov	r1, #47	; 0x2f
   12658:	bl	112b0 <strrchr@plt>
   1265c:	cmp	r0, #0
   12660:	addne	r4, r0, #1
   12664:	moveq	r4, r5
   12668:	sub	r3, r4, r5
   1266c:	cmp	r3, #6
   12670:	ble	126b0 <__assert_fail@plt+0x137c>
   12674:	mov	r2, #7
   12678:	ldr	r1, [pc, #76]	; 126cc <__assert_fail@plt+0x1398>
   1267c:	sub	r0, r4, #7
   12680:	bl	11304 <strncmp@plt>
   12684:	cmp	r0, #0
   12688:	bne	126b0 <__assert_fail@plt+0x137c>
   1268c:	mov	r2, #3
   12690:	ldr	r1, [pc, #56]	; 126d0 <__assert_fail@plt+0x139c>
   12694:	mov	r0, r4
   12698:	bl	11304 <strncmp@plt>
   1269c:	cmp	r0, #0
   126a0:	movne	r5, r4
   126a4:	ldreq	r3, [pc, #40]	; 126d4 <__assert_fail@plt+0x13a0>
   126a8:	addeq	r5, r4, #3
   126ac:	streq	r5, [r3]
   126b0:	ldr	r3, [pc, #32]	; 126d8 <__assert_fail@plt+0x13a4>
   126b4:	str	r5, [r3]
   126b8:	ldr	r3, [pc, #28]	; 126dc <__assert_fail@plt+0x13a8>
   126bc:	str	r5, [r3]
   126c0:	pop	{r4, r5, r6, pc}
   126c4:	ldrdeq	r2, [r3], -r0
   126c8:	andeq	r1, r2, r9, lsl r4
   126cc:	andeq	r1, r2, r1, asr r4
   126d0:	andeq	r1, r2, r9, asr r4
   126d4:	andeq	r2, r3, r0, asr #3
   126d8:	muleq	r3, ip, r5
   126dc:	andeq	r2, r3, r4, asr #3
   126e0:	push	{r4, r5, r6, lr}
   126e4:	mov	r2, #48	; 0x30
   126e8:	mov	r5, r1
   126ec:	mov	r1, #0
   126f0:	mov	r4, r0
   126f4:	bl	11238 <memset@plt>
   126f8:	cmp	r5, #10
   126fc:	bne	12704 <__assert_fail@plt+0x13d0>
   12700:	bl	11310 <abort@plt>
   12704:	str	r5, [r4]
   12708:	mov	r0, r4
   1270c:	pop	{r4, r5, r6, pc}
   12710:	push	{r4, r5, r6, lr}
   12714:	mov	r4, r0
   12718:	mov	r5, r1
   1271c:	bl	1ff70 <__assert_fail@plt+0xec3c>
   12720:	ldrb	r3, [r0]
   12724:	bic	r3, r3, #32
   12728:	cmp	r3, #85	; 0x55
   1272c:	bne	1279c <__assert_fail@plt+0x1468>
   12730:	ldrb	r3, [r0, #1]
   12734:	bic	r3, r3, #32
   12738:	cmp	r3, #84	; 0x54
   1273c:	bne	12774 <__assert_fail@plt+0x1440>
   12740:	ldrb	r3, [r0, #2]
   12744:	bic	r3, r3, #32
   12748:	cmp	r3, #70	; 0x46
   1274c:	bne	12774 <__assert_fail@plt+0x1440>
   12750:	ldrb	r3, [r0, #3]
   12754:	cmp	r3, #45	; 0x2d
   12758:	bne	12774 <__assert_fail@plt+0x1440>
   1275c:	ldrb	r3, [r0, #4]
   12760:	cmp	r3, #56	; 0x38
   12764:	bne	12774 <__assert_fail@plt+0x1440>
   12768:	ldrb	r3, [r0, #5]
   1276c:	cmp	r3, #0
   12770:	beq	12788 <__assert_fail@plt+0x1454>
   12774:	ldr	r1, [pc, #144]	; 1280c <__assert_fail@plt+0x14d8>
   12778:	ldr	r0, [pc, #144]	; 12810 <__assert_fail@plt+0x14dc>
   1277c:	cmp	r5, #9
   12780:	movne	r0, r1
   12784:	pop	{r4, r5, r6, pc}
   12788:	ldrb	r3, [r4]
   1278c:	ldr	r1, [pc, #128]	; 12814 <__assert_fail@plt+0x14e0>
   12790:	ldr	r0, [pc, #128]	; 12818 <__assert_fail@plt+0x14e4>
   12794:	cmp	r3, #96	; 0x60
   12798:	b	12780 <__assert_fail@plt+0x144c>
   1279c:	cmp	r3, #71	; 0x47
   127a0:	bne	12774 <__assert_fail@plt+0x1440>
   127a4:	ldrb	r3, [r0, #1]
   127a8:	bic	r3, r3, #32
   127ac:	cmp	r3, #66	; 0x42
   127b0:	bne	12774 <__assert_fail@plt+0x1440>
   127b4:	ldrb	r3, [r0, #2]
   127b8:	cmp	r3, #49	; 0x31
   127bc:	bne	12774 <__assert_fail@plt+0x1440>
   127c0:	ldrb	r3, [r0, #3]
   127c4:	cmp	r3, #56	; 0x38
   127c8:	bne	12774 <__assert_fail@plt+0x1440>
   127cc:	ldrb	r3, [r0, #4]
   127d0:	cmp	r3, #48	; 0x30
   127d4:	bne	12774 <__assert_fail@plt+0x1440>
   127d8:	ldrb	r3, [r0, #5]
   127dc:	cmp	r3, #51	; 0x33
   127e0:	bne	12774 <__assert_fail@plt+0x1440>
   127e4:	ldrb	r3, [r0, #6]
   127e8:	cmp	r3, #48	; 0x30
   127ec:	bne	12774 <__assert_fail@plt+0x1440>
   127f0:	ldrb	r3, [r0, #7]
   127f4:	cmp	r3, #0
   127f8:	bne	12774 <__assert_fail@plt+0x1440>
   127fc:	ldrb	r3, [r4]
   12800:	ldr	r1, [pc, #20]	; 1281c <__assert_fail@plt+0x14e8>
   12804:	ldr	r0, [pc, #20]	; 12820 <__assert_fail@plt+0x14ec>
   12808:	b	12794 <__assert_fail@plt+0x1460>
   1280c:	andeq	r1, r2, r5, asr #9
   12810:	andeq	r1, r2, r3, asr #9
   12814:			; <UNDEFINED> instruction: 0x000214b8
   12818:			; <UNDEFINED> instruction: 0x000214b4
   1281c:	andeq	r1, r2, r0, asr #9
   12820:			; <UNDEFINED> instruction: 0x000214bc
   12824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12828:	sub	sp, sp, #108	; 0x6c
   1282c:	mov	r8, r0
   12830:	str	r3, [sp, #36]	; 0x24
   12834:	mov	r5, r1
   12838:	str	r2, [sp, #44]	; 0x2c
   1283c:	ldr	sl, [sp, #144]	; 0x90
   12840:	bl	11160 <__ctype_get_mb_cur_max@plt>
   12844:	ldr	r3, [sp, #148]	; 0x94
   12848:	mov	r7, #0
   1284c:	str	r7, [sp, #48]	; 0x30
   12850:	lsr	r6, r3, #1
   12854:	and	r6, r6, #1
   12858:	mov	r3, #1
   1285c:	str	r3, [sp, #72]	; 0x48
   12860:	str	r7, [sp, #24]
   12864:	str	r7, [sp, #32]
   12868:	str	r7, [sp, #40]	; 0x28
   1286c:	str	r7, [sp, #60]	; 0x3c
   12870:	str	r0, [sp, #76]	; 0x4c
   12874:	cmp	sl, #10
   12878:	ldrls	pc, [pc, sl, lsl #2]
   1287c:	b	12ab8 <__assert_fail@plt+0x1784>
   12880:	andeq	r2, r1, ip, lsr #17
   12884:	andeq	r3, r1, r0, asr #10
   12888:	andeq	r2, r1, r4, lsl #21
   1288c:	ldrdeq	r2, [r1], -r0
   12890:	andeq	r2, r1, r0, ror #20
   12894:			; <UNDEFINED> instruction: 0x000128b8
   12898:	andeq	r3, r1, r0, lsr #10
   1289c:			; <UNDEFINED> instruction: 0x00012abc
   128a0:			; <UNDEFINED> instruction: 0x000129b0
   128a4:			; <UNDEFINED> instruction: 0x000129b0
   128a8:			; <UNDEFINED> instruction: 0x000129b0
   128ac:	mov	r6, #0
   128b0:	mov	r4, #0
   128b4:	b	128e4 <__assert_fail@plt+0x15b0>
   128b8:	cmp	r6, #0
   128bc:	bne	12ae0 <__assert_fail@plt+0x17ac>
   128c0:	cmp	r5, #0
   128c4:	movne	r3, #34	; 0x22
   128c8:	strbne	r3, [r8]
   128cc:	mov	r3, #1
   128d0:	str	r3, [sp, #24]
   128d4:	str	r3, [sp, #32]
   128d8:	mov	r4, #1
   128dc:	ldr	r3, [pc, #3172]	; 13548 <__assert_fail@plt+0x2214>
   128e0:	str	r3, [sp, #40]	; 0x28
   128e4:	mov	r9, r5
   128e8:	mov	r3, #0
   128ec:	str	r7, [sp, #68]	; 0x44
   128f0:	str	r3, [sp, #28]
   128f4:	ldr	r3, [sp, #36]	; 0x24
   128f8:	cmn	r3, #1
   128fc:	bne	1348c <__assert_fail@plt+0x2158>
   12900:	ldr	r3, [sp, #44]	; 0x2c
   12904:	ldr	r2, [sp, #28]
   12908:	ldrb	r3, [r3, r2]
   1290c:	adds	r3, r3, #0
   12910:	movne	r3, #1
   12914:	str	r3, [sp, #52]	; 0x34
   12918:	ldr	r3, [sp, #52]	; 0x34
   1291c:	cmp	r3, #0
   12920:	bne	12b08 <__assert_fail@plt+0x17d4>
   12924:	sub	r2, sl, #2
   12928:	clz	r2, r2
   1292c:	lsr	r2, r2, #5
   12930:	and	r3, r6, r2
   12934:	cmp	r4, #0
   12938:	movne	r3, #0
   1293c:	andeq	r3, r3, #1
   12940:	cmp	r3, #0
   12944:	bne	12cd0 <__assert_fail@plt+0x199c>
   12948:	eor	r3, r6, #1
   1294c:	ands	r2, r2, r3
   12950:	beq	134c4 <__assert_fail@plt+0x2190>
   12954:	ldr	r3, [sp, #68]	; 0x44
   12958:	cmp	r3, #0
   1295c:	beq	134fc <__assert_fail@plt+0x21c8>
   12960:	ldr	r3, [sp, #72]	; 0x48
   12964:	cmp	r3, #0
   12968:	beq	134a0 <__assert_fail@plt+0x216c>
   1296c:	ldr	r3, [sp, #160]	; 0xa0
   12970:	ldr	r2, [sp, #44]	; 0x2c
   12974:	str	r3, [sp, #16]
   12978:	ldr	r3, [sp, #156]	; 0x9c
   1297c:	ldr	r1, [sp, #60]	; 0x3c
   12980:	str	r3, [sp, #12]
   12984:	ldr	r3, [sp, #152]	; 0x98
   12988:	str	r3, [sp, #8]
   1298c:	ldr	r3, [sp, #148]	; 0x94
   12990:	str	r3, [sp, #4]
   12994:	mov	r3, #5
   12998:	str	r3, [sp]
   1299c:	ldr	r3, [sp, #36]	; 0x24
   129a0:	mov	r0, r8
   129a4:	bl	12824 <__assert_fail@plt+0x14f0>
   129a8:	mov	r4, r0
   129ac:	b	134f0 <__assert_fail@plt+0x21bc>
   129b0:	cmp	sl, #10
   129b4:	beq	12a10 <__assert_fail@plt+0x16dc>
   129b8:	ldr	r4, [pc, #2956]	; 1354c <__assert_fail@plt+0x2218>
   129bc:	mov	r2, #5
   129c0:	mov	r1, r4
   129c4:	mov	r0, #0
   129c8:	bl	11124 <dcgettext@plt>
   129cc:	cmp	r0, r4
   129d0:	str	r0, [sp, #156]	; 0x9c
   129d4:	bne	129e4 <__assert_fail@plt+0x16b0>
   129d8:	mov	r1, sl
   129dc:	bl	12710 <__assert_fail@plt+0x13dc>
   129e0:	str	r0, [sp, #156]	; 0x9c
   129e4:	ldr	r4, [pc, #2916]	; 13550 <__assert_fail@plt+0x221c>
   129e8:	mov	r2, #5
   129ec:	mov	r1, r4
   129f0:	mov	r0, #0
   129f4:	bl	11124 <dcgettext@plt>
   129f8:	cmp	r0, r4
   129fc:	str	r0, [sp, #160]	; 0xa0
   12a00:	bne	12a10 <__assert_fail@plt+0x16dc>
   12a04:	mov	r1, sl
   12a08:	bl	12710 <__assert_fail@plt+0x13dc>
   12a0c:	str	r0, [sp, #160]	; 0xa0
   12a10:	cmp	r6, #0
   12a14:	moveq	r4, r6
   12a18:	beq	12a30 <__assert_fail@plt+0x16fc>
   12a1c:	mov	r4, #0
   12a20:	b	12a40 <__assert_fail@plt+0x170c>
   12a24:	cmp	r5, r4
   12a28:	strbhi	r3, [r8, r4]
   12a2c:	add	r4, r4, #1
   12a30:	ldr	r3, [sp, #156]	; 0x9c
   12a34:	ldrb	r3, [r3, r4]
   12a38:	cmp	r3, #0
   12a3c:	bne	12a24 <__assert_fail@plt+0x16f0>
   12a40:	ldr	r0, [sp, #160]	; 0xa0
   12a44:	bl	111fc <strlen@plt>
   12a48:	ldr	r3, [sp, #160]	; 0xa0
   12a4c:	str	r3, [sp, #40]	; 0x28
   12a50:	mov	r3, #1
   12a54:	str	r3, [sp, #24]
   12a58:	str	r0, [sp, #32]
   12a5c:	b	128e4 <__assert_fail@plt+0x15b0>
   12a60:	mov	r3, #1
   12a64:	cmp	r6, #0
   12a68:	streq	r3, [sp, #24]
   12a6c:	beq	12a8c <__assert_fail@plt+0x1758>
   12a70:	str	r3, [sp, #32]
   12a74:	ldr	r3, [pc, #2772]	; 13550 <__assert_fail@plt+0x221c>
   12a78:	mov	r4, #0
   12a7c:	str	r3, [sp, #40]	; 0x28
   12a80:	b	12ab0 <__assert_fail@plt+0x177c>
   12a84:	cmp	r6, #0
   12a88:	bne	12af8 <__assert_fail@plt+0x17c4>
   12a8c:	cmp	r5, #0
   12a90:	movne	r3, #39	; 0x27
   12a94:	strbne	r3, [r8]
   12a98:	mov	r3, #1
   12a9c:	str	r3, [sp, #32]
   12aa0:	mov	r6, #0
   12aa4:	ldr	r3, [pc, #2724]	; 13550 <__assert_fail@plt+0x221c>
   12aa8:	mov	r4, #1
   12aac:	str	r3, [sp, #40]	; 0x28
   12ab0:	mov	sl, #2
   12ab4:	b	128e4 <__assert_fail@plt+0x15b0>
   12ab8:	bl	11310 <abort@plt>
   12abc:	mov	r6, #0
   12ac0:	mov	r3, #1
   12ac4:	str	r3, [sp, #24]
   12ac8:	mov	r4, r6
   12acc:	b	128e4 <__assert_fail@plt+0x15b0>
   12ad0:	mov	r6, #1
   12ad4:	str	r6, [sp, #24]
   12ad8:	str	r6, [sp, #32]
   12adc:	b	12a74 <__assert_fail@plt+0x1740>
   12ae0:	mov	r3, #1
   12ae4:	str	r3, [sp, #32]
   12ae8:	ldr	r3, [pc, #2648]	; 13548 <__assert_fail@plt+0x2214>
   12aec:	str	r6, [sp, #24]
   12af0:	str	r3, [sp, #40]	; 0x28
   12af4:	b	128b0 <__assert_fail@plt+0x157c>
   12af8:	mov	r3, #1
   12afc:	str	r3, [sp, #32]
   12b00:	ldr	r3, [pc, #2632]	; 13550 <__assert_fail@plt+0x221c>
   12b04:	b	12af0 <__assert_fail@plt+0x17bc>
   12b08:	ldr	r3, [sp, #32]
   12b0c:	ldr	fp, [sp, #24]
   12b10:	cmp	sl, #2
   12b14:	moveq	fp, #0
   12b18:	andne	fp, fp, #1
   12b1c:	adds	r5, r3, #0
   12b20:	movne	r5, #1
   12b24:	ands	r3, r5, fp
   12b28:	str	r3, [sp, #64]	; 0x40
   12b2c:	beq	12bfc <__assert_fail@plt+0x18c8>
   12b30:	ldr	r2, [sp, #32]
   12b34:	ldr	r3, [sp, #28]
   12b38:	add	r7, r3, r2
   12b3c:	mov	r3, r2
   12b40:	ldr	r2, [sp, #36]	; 0x24
   12b44:	cmp	r3, #1
   12b48:	movls	r3, #0
   12b4c:	movhi	r3, #1
   12b50:	cmn	r2, #1
   12b54:	movne	r3, #0
   12b58:	cmp	r3, #0
   12b5c:	beq	12b6c <__assert_fail@plt+0x1838>
   12b60:	ldr	r0, [sp, #44]	; 0x2c
   12b64:	bl	111fc <strlen@plt>
   12b68:	str	r0, [sp, #36]	; 0x24
   12b6c:	ldr	r3, [sp, #36]	; 0x24
   12b70:	cmp	r3, r7
   12b74:	bcc	12bf4 <__assert_fail@plt+0x18c0>
   12b78:	ldr	r3, [sp, #44]	; 0x2c
   12b7c:	ldr	r0, [sp, #28]
   12b80:	ldr	r2, [sp, #32]
   12b84:	ldr	r1, [sp, #40]	; 0x28
   12b88:	add	r0, r3, r0
   12b8c:	bl	110f4 <memcmp@plt>
   12b90:	cmp	r0, #0
   12b94:	bne	12bf4 <__assert_fail@plt+0x18c0>
   12b98:	cmp	r6, #0
   12b9c:	beq	12bfc <__assert_fail@plt+0x18c8>
   12ba0:	str	r6, [sp, #24]
   12ba4:	ldr	r3, [sp, #24]
   12ba8:	ldr	r2, [sp, #44]	; 0x2c
   12bac:	cmp	sl, #2
   12bb0:	movne	r3, #0
   12bb4:	andeq	r3, r3, #1
   12bb8:	cmp	r3, #0
   12bbc:	ldr	r3, [sp, #160]	; 0xa0
   12bc0:	movne	sl, #4
   12bc4:	str	r3, [sp, #16]
   12bc8:	ldr	r3, [sp, #156]	; 0x9c
   12bcc:	str	sl, [sp]
   12bd0:	str	r3, [sp, #12]
   12bd4:	mov	r3, #0
   12bd8:	str	r3, [sp, #8]
   12bdc:	ldr	r3, [sp, #148]	; 0x94
   12be0:	mov	r1, r9
   12be4:	bic	r3, r3, #2
   12be8:	str	r3, [sp, #4]
   12bec:	ldr	r3, [sp, #36]	; 0x24
   12bf0:	b	129a0 <__assert_fail@plt+0x166c>
   12bf4:	mov	r3, #0
   12bf8:	str	r3, [sp, #64]	; 0x40
   12bfc:	ldr	r2, [sp, #28]
   12c00:	ldr	r3, [sp, #44]	; 0x2c
   12c04:	add	r3, r3, r2
   12c08:	str	r3, [sp, #80]	; 0x50
   12c0c:	ldr	r3, [sp, #44]	; 0x2c
   12c10:	ldrb	r7, [r3, r2]
   12c14:	cmp	r7, #58	; 0x3a
   12c18:	bhi	12d80 <__assert_fail@plt+0x1a4c>
   12c1c:	cmp	r7, #43	; 0x2b
   12c20:	bcs	12dd4 <__assert_fail@plt+0x1aa0>
   12c24:	cmp	r7, #32
   12c28:	beq	12e2c <__assert_fail@plt+0x1af8>
   12c2c:	bhi	12cd8 <__assert_fail@plt+0x19a4>
   12c30:	cmp	r7, #9
   12c34:	beq	130e0 <__assert_fail@plt+0x1dac>
   12c38:	bhi	12c9c <__assert_fail@plt+0x1968>
   12c3c:	cmp	r7, #7
   12c40:	beq	1318c <__assert_fail@plt+0x1e58>
   12c44:	bhi	12e48 <__assert_fail@plt+0x1b14>
   12c48:	cmp	r7, #0
   12c4c:	beq	12e64 <__assert_fail@plt+0x1b30>
   12c50:	ldr	r3, [sp, #76]	; 0x4c
   12c54:	cmp	r3, #1
   12c58:	bne	131d0 <__assert_fail@plt+0x1e9c>
   12c5c:	bl	111e4 <__ctype_b_loc@plt>
   12c60:	sxth	r3, r7
   12c64:	lsl	r3, r3, #1
   12c68:	ldr	r2, [r0]
   12c6c:	ldrh	r5, [r2, r3]
   12c70:	ldr	r3, [sp, #76]	; 0x4c
   12c74:	str	r3, [sp, #56]	; 0x38
   12c78:	lsr	r5, r5, #14
   12c7c:	and	r5, r5, #1
   12c80:	ldr	r3, [sp, #24]
   12c84:	eor	fp, r5, #1
   12c88:	and	fp, fp, r3
   12c8c:	ands	fp, fp, #255	; 0xff
   12c90:	beq	13018 <__assert_fail@plt+0x1ce4>
   12c94:	mov	r5, #0
   12c98:	b	1327c <__assert_fail@plt+0x1f48>
   12c9c:	cmp	r7, #11
   12ca0:	beq	130e8 <__assert_fail@plt+0x1db4>
   12ca4:	bcc	13184 <__assert_fail@plt+0x1e50>
   12ca8:	cmp	r7, #12
   12cac:	beq	13194 <__assert_fail@plt+0x1e60>
   12cb0:	cmp	r7, #13
   12cb4:	moveq	r3, #114	; 0x72
   12cb8:	bne	12c50 <__assert_fail@plt+0x191c>
   12cbc:	cmp	sl, #2
   12cc0:	movne	r2, #0
   12cc4:	andeq	r2, r6, #1
   12cc8:	cmp	r2, #0
   12ccc:	beq	12e4c <__assert_fail@plt+0x1b18>
   12cd0:	mov	sl, #2
   12cd4:	b	12ba4 <__assert_fail@plt+0x1870>
   12cd8:	cmp	r7, #37	; 0x25
   12cdc:	beq	12dd4 <__assert_fail@plt+0x1aa0>
   12ce0:	bhi	12cf4 <__assert_fail@plt+0x19c0>
   12ce4:	cmp	r7, #35	; 0x23
   12ce8:	beq	12e20 <__assert_fail@plt+0x1aec>
   12cec:	mov	r5, #0
   12cf0:	b	12e30 <__assert_fail@plt+0x1afc>
   12cf4:	cmp	r7, #39	; 0x27
   12cf8:	bne	12cec <__assert_fail@plt+0x19b8>
   12cfc:	cmp	sl, #2
   12d00:	ldrne	r5, [sp, #52]	; 0x34
   12d04:	movne	r3, r5
   12d08:	strne	r3, [sp, #68]	; 0x44
   12d0c:	bne	12dd8 <__assert_fail@plt+0x1aa4>
   12d10:	cmp	r6, #0
   12d14:	bne	12ba4 <__assert_fail@plt+0x1870>
   12d18:	ldr	r2, [sp, #60]	; 0x3c
   12d1c:	adds	r3, r9, #0
   12d20:	movne	r3, #1
   12d24:	cmp	r2, #0
   12d28:	movne	r3, #0
   12d2c:	cmp	r3, #0
   12d30:	strne	r9, [sp, #60]	; 0x3c
   12d34:	movne	r9, #0
   12d38:	bne	12d48 <__assert_fail@plt+0x1a14>
   12d3c:	cmp	r9, r4
   12d40:	movhi	r3, #39	; 0x27
   12d44:	strbhi	r3, [r8, r4]
   12d48:	add	r3, r4, #1
   12d4c:	cmp	r3, r9
   12d50:	movcc	r2, #92	; 0x5c
   12d54:	strbcc	r2, [r8, r3]
   12d58:	add	r3, r4, #2
   12d5c:	cmp	r3, r9
   12d60:	ldr	r5, [sp, #52]	; 0x34
   12d64:	movcc	r2, #39	; 0x27
   12d68:	strbcc	r2, [r8, r3]
   12d6c:	add	r4, r4, #3
   12d70:	mov	fp, r6
   12d74:	str	r5, [sp, #68]	; 0x44
   12d78:	str	r6, [sp, #48]	; 0x30
   12d7c:	b	13018 <__assert_fail@plt+0x1ce4>
   12d80:	cmp	r7, #94	; 0x5e
   12d84:	beq	12cec <__assert_fail@plt+0x19b8>
   12d88:	bhi	12de0 <__assert_fail@plt+0x1aac>
   12d8c:	cmp	r7, #90	; 0x5a
   12d90:	bhi	12dc8 <__assert_fail@plt+0x1a94>
   12d94:	cmp	r7, #65	; 0x41
   12d98:	bcs	12dd4 <__assert_fail@plt+0x1aa0>
   12d9c:	cmp	r7, #62	; 0x3e
   12da0:	bls	12cec <__assert_fail@plt+0x19b8>
   12da4:	cmp	r7, #63	; 0x3f
   12da8:	bne	12c50 <__assert_fail@plt+0x191c>
   12dac:	cmp	sl, #2
   12db0:	beq	12f54 <__assert_fail@plt+0x1c20>
   12db4:	cmp	sl, #5
   12db8:	beq	12f64 <__assert_fail@plt+0x1c30>
   12dbc:	mov	fp, #0
   12dc0:	mov	r5, fp
   12dc4:	b	13018 <__assert_fail@plt+0x1ce4>
   12dc8:	cmp	r7, #92	; 0x5c
   12dcc:	beq	130f0 <__assert_fail@plt+0x1dbc>
   12dd0:	bls	12cec <__assert_fail@plt+0x19b8>
   12dd4:	ldr	r5, [sp, #52]	; 0x34
   12dd8:	mov	fp, #0
   12ddc:	b	13018 <__assert_fail@plt+0x1ce4>
   12de0:	cmp	r7, #122	; 0x7a
   12de4:	bhi	12e04 <__assert_fail@plt+0x1ad0>
   12de8:	cmp	r7, #97	; 0x61
   12dec:	bcs	12dd4 <__assert_fail@plt+0x1aa0>
   12df0:	cmp	r7, #95	; 0x5f
   12df4:	beq	12dd4 <__assert_fail@plt+0x1aa0>
   12df8:	cmp	r7, #96	; 0x60
   12dfc:	bne	12c50 <__assert_fail@plt+0x191c>
   12e00:	b	12cec <__assert_fail@plt+0x19b8>
   12e04:	cmp	r7, #124	; 0x7c
   12e08:	beq	12cec <__assert_fail@plt+0x19b8>
   12e0c:	bcc	1319c <__assert_fail@plt+0x1e68>
   12e10:	cmp	r7, #125	; 0x7d
   12e14:	beq	1319c <__assert_fail@plt+0x1e68>
   12e18:	cmp	r7, #126	; 0x7e
   12e1c:	bne	12c50 <__assert_fail@plt+0x191c>
   12e20:	ldr	r3, [sp, #28]
   12e24:	cmp	r3, #0
   12e28:	bne	12f5c <__assert_fail@plt+0x1c28>
   12e2c:	ldr	r5, [sp, #52]	; 0x34
   12e30:	cmp	sl, #2
   12e34:	movne	fp, #0
   12e38:	andeq	fp, r6, #1
   12e3c:	cmp	fp, #0
   12e40:	beq	13018 <__assert_fail@plt+0x1ce4>
   12e44:	b	12cd0 <__assert_fail@plt+0x199c>
   12e48:	mov	r3, #98	; 0x62
   12e4c:	ldr	r2, [sp, #24]
   12e50:	cmp	r2, #0
   12e54:	beq	12f5c <__assert_fail@plt+0x1c28>
   12e58:	mov	r7, r3
   12e5c:	mov	r5, #0
   12e60:	b	13070 <__assert_fail@plt+0x1d3c>
   12e64:	ldr	r3, [sp, #24]
   12e68:	cmp	r3, #0
   12e6c:	beq	12f38 <__assert_fail@plt+0x1c04>
   12e70:	cmp	r6, #0
   12e74:	bne	12ba0 <__assert_fail@plt+0x186c>
   12e78:	ldr	r3, [sp, #48]	; 0x30
   12e7c:	eor	r2, r3, #1
   12e80:	cmp	sl, #2
   12e84:	movne	r2, #0
   12e88:	andeq	r2, r2, #1
   12e8c:	cmp	r2, #0
   12e90:	moveq	r3, r4
   12e94:	beq	12ecc <__assert_fail@plt+0x1b98>
   12e98:	cmp	r9, r4
   12e9c:	movhi	r3, #39	; 0x27
   12ea0:	strbhi	r3, [r8, r4]
   12ea4:	add	r3, r4, #1
   12ea8:	cmp	r9, r3
   12eac:	movhi	r1, #36	; 0x24
   12eb0:	strbhi	r1, [r8, r3]
   12eb4:	add	r3, r4, #2
   12eb8:	cmp	r9, r3
   12ebc:	movhi	r1, #39	; 0x27
   12ec0:	strbhi	r1, [r8, r3]
   12ec4:	add	r3, r4, #3
   12ec8:	str	r2, [sp, #48]	; 0x30
   12ecc:	cmp	r9, r3
   12ed0:	movhi	r2, #92	; 0x5c
   12ed4:	strbhi	r2, [r8, r3]
   12ed8:	cmp	fp, #0
   12edc:	add	r4, r3, #1
   12ee0:	beq	13470 <__assert_fail@plt+0x213c>
   12ee4:	ldr	r2, [sp, #28]
   12ee8:	ldr	r1, [sp, #36]	; 0x24
   12eec:	add	r2, r2, #1
   12ef0:	cmp	r1, r2
   12ef4:	bls	12f30 <__assert_fail@plt+0x1bfc>
   12ef8:	ldr	r1, [sp, #44]	; 0x2c
   12efc:	mov	r7, #48	; 0x30
   12f00:	ldrb	r2, [r1, r2]
   12f04:	sub	r2, r2, #48	; 0x30
   12f08:	cmp	r2, #9
   12f0c:	movhi	r5, r6
   12f10:	bhi	13018 <__assert_fail@plt+0x1ce4>
   12f14:	cmp	r9, r4
   12f18:	add	r2, r3, #2
   12f1c:	strbhi	r7, [r8, r4]
   12f20:	cmp	r9, r2
   12f24:	add	r4, r3, #3
   12f28:	movhi	r1, #48	; 0x30
   12f2c:	strbhi	r1, [r8, r2]
   12f30:	mov	r5, r6
   12f34:	b	13478 <__assert_fail@plt+0x2144>
   12f38:	ldr	r3, [sp, #148]	; 0x94
   12f3c:	tst	r3, #1
   12f40:	ldreq	r5, [sp, #24]
   12f44:	beq	13484 <__assert_fail@plt+0x2150>
   12f48:	ldr	r3, [sp, #28]
   12f4c:	add	r3, r3, #1
   12f50:	b	128f0 <__assert_fail@plt+0x15bc>
   12f54:	cmp	r6, #0
   12f58:	bne	12ba4 <__assert_fail@plt+0x1870>
   12f5c:	mov	r5, #0
   12f60:	b	12dd8 <__assert_fail@plt+0x1aa4>
   12f64:	ldr	r3, [sp, #148]	; 0x94
   12f68:	tst	r3, #4
   12f6c:	beq	12f5c <__assert_fail@plt+0x1c28>
   12f70:	ldr	r3, [sp, #28]
   12f74:	add	r2, r3, #2
   12f78:	ldr	r3, [sp, #36]	; 0x24
   12f7c:	cmp	r3, r2
   12f80:	bls	12f5c <__assert_fail@plt+0x1c28>
   12f84:	ldr	r3, [sp, #44]	; 0x2c
   12f88:	ldr	r1, [sp, #28]
   12f8c:	add	r3, r3, r1
   12f90:	ldrb	r0, [r3, #1]
   12f94:	cmp	r0, #63	; 0x3f
   12f98:	bne	12f5c <__assert_fail@plt+0x1c28>
   12f9c:	ldr	r3, [sp, #44]	; 0x2c
   12fa0:	ldrb	r1, [r3, r2]
   12fa4:	sub	r3, r1, #33	; 0x21
   12fa8:	uxtb	r3, r3
   12fac:	cmp	r3, #29
   12fb0:	bhi	13480 <__assert_fail@plt+0x214c>
   12fb4:	mov	ip, #1
   12fb8:	ldr	r5, [pc, #1428]	; 13554 <__assert_fail@plt+0x2220>
   12fbc:	ands	r5, r5, ip, lsl r3
   12fc0:	beq	12dd8 <__assert_fail@plt+0x1aa4>
   12fc4:	cmp	r6, #0
   12fc8:	bne	12ba4 <__assert_fail@plt+0x1870>
   12fcc:	add	r3, r4, #1
   12fd0:	cmp	r9, r4
   12fd4:	strbhi	r0, [r8, r4]
   12fd8:	cmp	r9, r3
   12fdc:	movhi	r0, #34	; 0x22
   12fe0:	strbhi	r0, [r8, r3]
   12fe4:	add	r3, r4, #2
   12fe8:	cmp	r9, r3
   12fec:	movhi	r0, #34	; 0x22
   12ff0:	strbhi	r0, [r8, r3]
   12ff4:	add	r3, r4, #3
   12ff8:	cmp	r9, r3
   12ffc:	add	r4, r4, #4
   13000:	mov	r5, r6
   13004:	mov	fp, r6
   13008:	mov	r7, r1
   1300c:	movhi	r0, #63	; 0x3f
   13010:	strbhi	r0, [r8, r3]
   13014:	str	r2, [sp, #28]
   13018:	ldr	r3, [sp, #24]
   1301c:	eor	r3, r3, #1
   13020:	cmp	sl, #2
   13024:	orreq	r3, r3, #1
   13028:	eor	r3, r3, #1
   1302c:	orr	r3, r6, r3
   13030:	tst	r3, #255	; 0xff
   13034:	beq	13064 <__assert_fail@plt+0x1d30>
   13038:	ldr	r3, [sp, #152]	; 0x98
   1303c:	cmp	r3, #0
   13040:	beq	13064 <__assert_fail@plt+0x1d30>
   13044:	lsr	r2, r7, #5
   13048:	ldr	r1, [sp, #152]	; 0x98
   1304c:	uxtb	r2, r2
   13050:	and	r3, r7, #31
   13054:	ldr	r2, [r1, r2, lsl #2]
   13058:	lsr	r3, r2, r3
   1305c:	tst	r3, #1
   13060:	bne	13070 <__assert_fail@plt+0x1d3c>
   13064:	ldr	r3, [sp, #64]	; 0x40
   13068:	cmp	r3, #0
   1306c:	beq	13108 <__assert_fail@plt+0x1dd4>
   13070:	cmp	r6, #0
   13074:	bne	12ba4 <__assert_fail@plt+0x1870>
   13078:	ldr	r3, [sp, #48]	; 0x30
   1307c:	eor	r3, r3, #1
   13080:	cmp	sl, #2
   13084:	movne	r3, #0
   13088:	andeq	r3, r3, #1
   1308c:	cmp	r3, #0
   13090:	beq	130c8 <__assert_fail@plt+0x1d94>
   13094:	cmp	r9, r4
   13098:	movhi	r2, #39	; 0x27
   1309c:	strbhi	r2, [r8, r4]
   130a0:	add	r2, r4, #1
   130a4:	cmp	r9, r2
   130a8:	movhi	r1, #36	; 0x24
   130ac:	strbhi	r1, [r8, r2]
   130b0:	add	r2, r4, #2
   130b4:	cmp	r9, r2
   130b8:	add	r4, r4, #3
   130bc:	movhi	r1, #39	; 0x27
   130c0:	strbhi	r1, [r8, r2]
   130c4:	str	r3, [sp, #48]	; 0x30
   130c8:	cmp	r9, r4
   130cc:	movhi	r3, #92	; 0x5c
   130d0:	strbhi	r3, [r8, r4]
   130d4:	ldr	fp, [sp, #52]	; 0x34
   130d8:	add	r4, r4, #1
   130dc:	b	13108 <__assert_fail@plt+0x1dd4>
   130e0:	mov	r3, #116	; 0x74
   130e4:	b	12cbc <__assert_fail@plt+0x1988>
   130e8:	mov	r3, #118	; 0x76
   130ec:	b	12e4c <__assert_fail@plt+0x1b18>
   130f0:	cmp	sl, #2
   130f4:	bne	13164 <__assert_fail@plt+0x1e30>
   130f8:	cmp	r6, #0
   130fc:	bne	12ba4 <__assert_fail@plt+0x1870>
   13100:	mov	r5, r6
   13104:	mov	fp, r6
   13108:	ldr	r3, [sp, #48]	; 0x30
   1310c:	eor	fp, fp, #1
   13110:	and	fp, fp, r3
   13114:	tst	fp, #255	; 0xff
   13118:	beq	13144 <__assert_fail@plt+0x1e10>
   1311c:	cmp	r9, r4
   13120:	movhi	r3, #39	; 0x27
   13124:	strbhi	r3, [r8, r4]
   13128:	add	r3, r4, #1
   1312c:	cmp	r9, r3
   13130:	movhi	r2, #39	; 0x27
   13134:	add	r4, r4, #2
   13138:	strbhi	r2, [r8, r3]
   1313c:	mov	r3, #0
   13140:	str	r3, [sp, #48]	; 0x30
   13144:	cmp	r9, r4
   13148:	strbhi	r7, [r8, r4]
   1314c:	ldr	r3, [sp, #72]	; 0x48
   13150:	cmp	r5, #0
   13154:	moveq	r3, #0
   13158:	add	r4, r4, #1
   1315c:	str	r3, [sp, #72]	; 0x48
   13160:	b	12f48 <__assert_fail@plt+0x1c14>
   13164:	ldr	r3, [sp, #24]
   13168:	and	r3, r3, r6
   1316c:	tst	r5, r3
   13170:	moveq	r3, r7
   13174:	beq	12cbc <__assert_fail@plt+0x1988>
   13178:	mov	fp, #0
   1317c:	mov	r5, fp
   13180:	b	13108 <__assert_fail@plt+0x1dd4>
   13184:	mov	r3, #110	; 0x6e
   13188:	b	12cbc <__assert_fail@plt+0x1988>
   1318c:	mov	r3, #97	; 0x61
   13190:	b	12e4c <__assert_fail@plt+0x1b18>
   13194:	mov	r3, #102	; 0x66
   13198:	b	12e4c <__assert_fail@plt+0x1b18>
   1319c:	ldr	r3, [sp, #36]	; 0x24
   131a0:	cmn	r3, #1
   131a4:	bne	131c4 <__assert_fail@plt+0x1e90>
   131a8:	ldr	r3, [sp, #44]	; 0x2c
   131ac:	ldrb	r3, [r3, #1]
   131b0:	adds	r3, r3, #0
   131b4:	movne	r3, #1
   131b8:	cmp	r3, #0
   131bc:	bne	12f5c <__assert_fail@plt+0x1c28>
   131c0:	b	12e20 <__assert_fail@plt+0x1aec>
   131c4:	ldr	r3, [sp, #36]	; 0x24
   131c8:	subs	r3, r3, #1
   131cc:	b	131b4 <__assert_fail@plt+0x1e80>
   131d0:	mov	r3, #0
   131d4:	str	r3, [sp, #96]	; 0x60
   131d8:	str	r3, [sp, #100]	; 0x64
   131dc:	ldr	r3, [sp, #36]	; 0x24
   131e0:	cmn	r3, #1
   131e4:	bne	131f4 <__assert_fail@plt+0x1ec0>
   131e8:	ldr	r0, [sp, #44]	; 0x2c
   131ec:	bl	111fc <strlen@plt>
   131f0:	str	r0, [sp, #36]	; 0x24
   131f4:	ldr	r5, [sp, #52]	; 0x34
   131f8:	mov	r3, #0
   131fc:	str	r3, [sp, #56]	; 0x38
   13200:	ldr	r3, [sp, #28]
   13204:	ldr	r2, [sp, #56]	; 0x38
   13208:	ldr	r1, [sp, #36]	; 0x24
   1320c:	add	r2, r3, r2
   13210:	ldr	r3, [sp, #44]	; 0x2c
   13214:	add	r0, sp, #92	; 0x5c
   13218:	add	fp, r3, r2
   1321c:	sub	r2, r1, r2
   13220:	add	r3, sp, #96	; 0x60
   13224:	mov	r1, fp
   13228:	bl	1ffa4 <__assert_fail@plt+0xec70>
   1322c:	subs	r2, r0, #0
   13230:	beq	13270 <__assert_fail@plt+0x1f3c>
   13234:	cmn	r2, #1
   13238:	beq	13448 <__assert_fail@plt+0x2114>
   1323c:	cmn	r2, #2
   13240:	bne	133b8 <__assert_fail@plt+0x2084>
   13244:	ldr	r2, [sp, #56]	; 0x38
   13248:	ldr	r3, [sp, #28]
   1324c:	add	r3, r3, r2
   13250:	ldr	r2, [sp, #36]	; 0x24
   13254:	cmp	r2, r3
   13258:	bls	13448 <__assert_fail@plt+0x2114>
   1325c:	ldr	r3, [sp, #80]	; 0x50
   13260:	ldr	r2, [sp, #56]	; 0x38
   13264:	ldrb	r5, [r3, r2]
   13268:	cmp	r5, #0
   1326c:	bne	133a8 <__assert_fail@plt+0x2074>
   13270:	ldr	r3, [sp, #56]	; 0x38
   13274:	cmp	r3, #1
   13278:	bls	12c80 <__assert_fail@plt+0x194c>
   1327c:	ldr	r2, [sp, #56]	; 0x38
   13280:	ldr	r3, [sp, #28]
   13284:	mov	fp, #0
   13288:	add	r3, r3, r2
   1328c:	ldr	r2, [sp, #24]
   13290:	str	r3, [sp, #52]	; 0x34
   13294:	eor	r3, r5, #1
   13298:	and	r3, r3, r2
   1329c:	mov	ip, #92	; 0x5c
   132a0:	uxtb	r3, r3
   132a4:	mov	r2, #39	; 0x27
   132a8:	cmp	r3, #0
   132ac:	beq	13450 <__assert_fail@plt+0x211c>
   132b0:	cmp	r6, #0
   132b4:	bne	12ba0 <__assert_fail@plt+0x186c>
   132b8:	ldr	r1, [sp, #48]	; 0x30
   132bc:	eor	r1, r1, #1
   132c0:	cmp	sl, #2
   132c4:	movne	r1, #0
   132c8:	andeq	r1, r1, #1
   132cc:	cmp	r1, #0
   132d0:	beq	13300 <__assert_fail@plt+0x1fcc>
   132d4:	add	r0, r4, #1
   132d8:	cmp	r9, r4
   132dc:	strbhi	r2, [r8, r4]
   132e0:	cmp	r9, r0
   132e4:	movhi	lr, #36	; 0x24
   132e8:	strbhi	lr, [r8, r0]
   132ec:	add	r0, r4, #2
   132f0:	add	r4, r4, #3
   132f4:	cmp	r9, r0
   132f8:	strbhi	r2, [r8, r0]
   132fc:	str	r1, [sp, #48]	; 0x30
   13300:	add	r0, r4, #1
   13304:	cmp	r9, r4
   13308:	strbhi	ip, [r8, r4]
   1330c:	cmp	r9, r0
   13310:	lsrhi	r1, r7, #6
   13314:	addhi	r1, r1, #48	; 0x30
   13318:	strbhi	r1, [r8, r0]
   1331c:	add	r0, r4, #2
   13320:	cmp	r9, r0
   13324:	lsrhi	r1, r7, #3
   13328:	and	r7, r7, #7
   1332c:	andhi	r1, r1, #7
   13330:	add	r4, r4, #3
   13334:	add	r7, r7, #48	; 0x30
   13338:	mov	fp, r3
   1333c:	addhi	r1, r1, #48	; 0x30
   13340:	strbhi	r1, [r8, r0]
   13344:	ldr	r1, [sp, #28]
   13348:	ldr	r0, [sp, #52]	; 0x34
   1334c:	add	r1, r1, #1
   13350:	cmp	r0, r1
   13354:	bls	13108 <__assert_fail@plt+0x1dd4>
   13358:	ldr	lr, [sp, #48]	; 0x30
   1335c:	eor	r0, fp, #1
   13360:	and	r0, r0, lr
   13364:	tst	r0, #255	; 0xff
   13368:	beq	1338c <__assert_fail@plt+0x2058>
   1336c:	add	r0, r4, #1
   13370:	cmp	r9, r4
   13374:	strbhi	r2, [r8, r4]
   13378:	cmp	r9, r0
   1337c:	add	r4, r4, #2
   13380:	strbhi	r2, [r8, r0]
   13384:	mov	r0, #0
   13388:	str	r0, [sp, #48]	; 0x30
   1338c:	ldr	r0, [sp, #44]	; 0x2c
   13390:	cmp	r9, r4
   13394:	strbhi	r7, [r8, r4]
   13398:	str	r1, [sp, #28]
   1339c:	add	r4, r4, #1
   133a0:	ldrb	r7, [r0, r1]
   133a4:	b	132a8 <__assert_fail@plt+0x1f74>
   133a8:	ldr	r3, [sp, #56]	; 0x38
   133ac:	add	r3, r3, #1
   133b0:	str	r3, [sp, #56]	; 0x38
   133b4:	b	13244 <__assert_fail@plt+0x1f10>
   133b8:	cmp	sl, #2
   133bc:	movne	r3, #0
   133c0:	andeq	r3, r6, #1
   133c4:	cmp	r3, #0
   133c8:	movne	r1, #1
   133cc:	bne	13428 <__assert_fail@plt+0x20f4>
   133d0:	ldr	r0, [sp, #92]	; 0x5c
   133d4:	str	r2, [sp, #84]	; 0x54
   133d8:	bl	11148 <iswprint@plt>
   133dc:	ldr	r3, [sp, #56]	; 0x38
   133e0:	ldr	r2, [sp, #84]	; 0x54
   133e4:	add	r3, r3, r2
   133e8:	str	r3, [sp, #56]	; 0x38
   133ec:	cmp	r0, #0
   133f0:	add	r0, sp, #96	; 0x60
   133f4:	moveq	r5, #0
   133f8:	bl	110dc <mbsinit@plt>
   133fc:	cmp	r0, #0
   13400:	beq	13200 <__assert_fail@plt+0x1ecc>
   13404:	b	13270 <__assert_fail@plt+0x1f3c>
   13408:	ldrb	r3, [fp, r1]
   1340c:	cmp	r3, #94	; 0x5e
   13410:	beq	12cd0 <__assert_fail@plt+0x199c>
   13414:	bhi	13434 <__assert_fail@plt+0x2100>
   13418:	sub	r3, r3, #91	; 0x5b
   1341c:	cmp	r3, #1
   13420:	bls	12cd0 <__assert_fail@plt+0x199c>
   13424:	add	r1, r1, #1
   13428:	cmp	r1, r2
   1342c:	bne	13408 <__assert_fail@plt+0x20d4>
   13430:	b	133d0 <__assert_fail@plt+0x209c>
   13434:	cmp	r3, #96	; 0x60
   13438:	beq	12cd0 <__assert_fail@plt+0x199c>
   1343c:	cmp	r3, #124	; 0x7c
   13440:	bne	13424 <__assert_fail@plt+0x20f0>
   13444:	b	12cd0 <__assert_fail@plt+0x199c>
   13448:	mov	r5, #0
   1344c:	b	13270 <__assert_fail@plt+0x1f3c>
   13450:	ldr	r1, [sp, #64]	; 0x40
   13454:	cmp	r1, #0
   13458:	beq	13344 <__assert_fail@plt+0x2010>
   1345c:	cmp	r9, r4
   13460:	strbhi	ip, [r8, r4]
   13464:	str	r3, [sp, #64]	; 0x40
   13468:	add	r4, r4, #1
   1346c:	b	13344 <__assert_fail@plt+0x2010>
   13470:	mov	r5, fp
   13474:	ldr	fp, [sp, #24]
   13478:	mov	r7, #48	; 0x30
   1347c:	b	13018 <__assert_fail@plt+0x1ce4>
   13480:	mov	r5, #0
   13484:	mov	fp, r5
   13488:	b	13018 <__assert_fail@plt+0x1ce4>
   1348c:	ldr	r3, [sp, #36]	; 0x24
   13490:	ldr	r2, [sp, #28]
   13494:	subs	r3, r3, r2
   13498:	movne	r3, #1
   1349c:	b	12914 <__assert_fail@plt+0x15e0>
   134a0:	ldr	r3, [sp, #60]	; 0x3c
   134a4:	clz	r7, r9
   134a8:	cmp	r3, #0
   134ac:	lsr	r7, r7, #5
   134b0:	moveq	r7, #0
   134b4:	cmp	r7, #0
   134b8:	mov	r5, r3
   134bc:	bne	12874 <__assert_fail@plt+0x1540>
   134c0:	ldr	r3, [sp, #68]	; 0x44
   134c4:	ldr	r2, [sp, #40]	; 0x28
   134c8:	cmp	r2, #0
   134cc:	moveq	r3, #0
   134d0:	andne	r3, r3, #1
   134d4:	cmp	r3, #0
   134d8:	movne	r3, r2
   134dc:	subne	r2, r3, #1
   134e0:	bne	13510 <__assert_fail@plt+0x21dc>
   134e4:	cmp	r9, r4
   134e8:	movhi	r3, #0
   134ec:	strbhi	r3, [r8, r4]
   134f0:	mov	r0, r4
   134f4:	add	sp, sp, #108	; 0x6c
   134f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134fc:	mov	r3, r2
   13500:	b	134c4 <__assert_fail@plt+0x2190>
   13504:	cmp	r9, r4
   13508:	strbhi	r3, [r8, r4]
   1350c:	add	r4, r4, #1
   13510:	ldrb	r3, [r2, #1]!
   13514:	cmp	r3, #0
   13518:	bne	13504 <__assert_fail@plt+0x21d0>
   1351c:	b	134e4 <__assert_fail@plt+0x21b0>
   13520:	ldr	r3, [pc, #32]	; 13548 <__assert_fail@plt+0x2214>
   13524:	mov	r6, #1
   13528:	str	r6, [sp, #24]
   1352c:	str	r6, [sp, #32]
   13530:	str	r3, [sp, #40]	; 0x28
   13534:	mov	r4, #0
   13538:	mov	sl, #5
   1353c:	b	128e4 <__assert_fail@plt+0x15b0>
   13540:	mov	r6, #1
   13544:	b	12ad8 <__assert_fail@plt+0x17a4>
   13548:	andeq	r1, r2, r3, asr #9
   1354c:	andeq	r1, r2, r7, asr #9
   13550:	andeq	r1, r2, r5, asr #9
   13554:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   13558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1355c:	sub	sp, sp, #52	; 0x34
   13560:	mov	r6, r0
   13564:	mov	r5, r3
   13568:	mov	r8, r1
   1356c:	mov	r9, r2
   13570:	bl	11214 <__errno_location@plt>
   13574:	ldr	r7, [pc, #380]	; 136f8 <__assert_fail@plt+0x23c4>
   13578:	cmn	r6, #-2147483647	; 0x80000001
   1357c:	ldr	r4, [r7]
   13580:	ldr	r3, [r0]
   13584:	str	r0, [sp, #24]
   13588:	str	r3, [sp, #32]
   1358c:	movne	r3, #0
   13590:	moveq	r3, #1
   13594:	orrs	r3, r3, r6, lsr #31
   13598:	beq	135a0 <__assert_fail@plt+0x226c>
   1359c:	bl	11310 <abort@plt>
   135a0:	ldr	r2, [r7, #4]
   135a4:	cmp	r6, r2
   135a8:	blt	13618 <__assert_fail@plt+0x22e4>
   135ac:	add	r1, sp, #48	; 0x30
   135b0:	add	sl, r7, #8
   135b4:	str	r2, [r1, #-4]!
   135b8:	cmp	r4, sl
   135bc:	mov	r3, #8
   135c0:	sub	r2, r6, r2
   135c4:	movne	r0, r4
   135c8:	str	r3, [sp]
   135cc:	add	r2, r2, #1
   135d0:	mvn	r3, #-2147483648	; 0x80000000
   135d4:	moveq	r0, #0
   135d8:	bl	1f400 <__assert_fail@plt+0xe0cc>
   135dc:	cmp	r4, sl
   135e0:	ldr	r2, [sp, #44]	; 0x2c
   135e4:	mov	fp, r0
   135e8:	str	r0, [r7]
   135ec:	ldmeq	r4, {r0, r1}
   135f0:	mov	r4, fp
   135f4:	stmeq	fp, {r0, r1}
   135f8:	ldr	r0, [r7, #4]
   135fc:	mov	r1, #0
   13600:	sub	r2, r2, r0
   13604:	add	r0, fp, r0, lsl #3
   13608:	lsl	r2, r2, #3
   1360c:	bl	11238 <memset@plt>
   13610:	ldr	r3, [sp, #44]	; 0x2c
   13614:	str	r3, [r7, #4]
   13618:	ldr	r3, [r5, #4]
   1361c:	add	sl, r4, r6, lsl #3
   13620:	orr	r3, r3, #1
   13624:	str	r3, [sp, #28]
   13628:	add	r3, r5, #8
   1362c:	str	r3, [sp, #36]	; 0x24
   13630:	ldr	r3, [r5, #44]	; 0x2c
   13634:	ldr	fp, [r4, r6, lsl #3]
   13638:	ldr	r7, [sl, #4]
   1363c:	str	r3, [sp, #16]
   13640:	ldr	r3, [r5, #40]	; 0x28
   13644:	mov	r2, r8
   13648:	str	r3, [sp, #12]
   1364c:	add	r3, r5, #8
   13650:	str	r3, [sp, #8]
   13654:	ldr	r3, [sp, #28]
   13658:	mov	r1, fp
   1365c:	str	r3, [sp, #4]
   13660:	ldr	r3, [r5]
   13664:	mov	r0, r7
   13668:	str	r3, [sp]
   1366c:	mov	r3, r9
   13670:	bl	12824 <__assert_fail@plt+0x14f0>
   13674:	cmp	fp, r0
   13678:	bhi	136e0 <__assert_fail@plt+0x23ac>
   1367c:	ldr	r3, [pc, #120]	; 136fc <__assert_fail@plt+0x23c8>
   13680:	add	fp, r0, #1
   13684:	cmp	r7, r3
   13688:	str	fp, [r4, r6, lsl #3]
   1368c:	beq	13698 <__assert_fail@plt+0x2364>
   13690:	mov	r0, r7
   13694:	bl	1ff1c <__assert_fail@plt+0xebe8>
   13698:	mov	r0, fp
   1369c:	bl	1f2b8 <__assert_fail@plt+0xdf84>
   136a0:	ldr	r3, [r5, #44]	; 0x2c
   136a4:	mov	r2, r8
   136a8:	mov	r1, fp
   136ac:	str	r0, [sl, #4]
   136b0:	str	r3, [sp, #16]
   136b4:	ldr	r3, [r5, #40]	; 0x28
   136b8:	mov	r7, r0
   136bc:	str	r3, [sp, #12]
   136c0:	add	r3, r5, #8
   136c4:	str	r3, [sp, #8]
   136c8:	ldr	r3, [sp, #28]
   136cc:	str	r3, [sp, #4]
   136d0:	ldr	r3, [r5]
   136d4:	str	r3, [sp]
   136d8:	mov	r3, r9
   136dc:	bl	12824 <__assert_fail@plt+0x14f0>
   136e0:	ldr	r3, [sp, #24]
   136e4:	ldr	r2, [sp, #32]
   136e8:	mov	r0, r7
   136ec:	str	r2, [r3]
   136f0:	add	sp, sp, #52	; 0x34
   136f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136f8:	andeq	r2, r3, r0, lsl #3
   136fc:	andeq	r2, r3, r0, lsr #11
   13700:	push	{r4, r5, r6, lr}
   13704:	mov	r5, r0
   13708:	bl	11214 <__errno_location@plt>
   1370c:	cmp	r5, #0
   13710:	mov	r1, #48	; 0x30
   13714:	ldr	r6, [r0]
   13718:	mov	r4, r0
   1371c:	ldr	r0, [pc, #12]	; 13730 <__assert_fail@plt+0x23fc>
   13720:	movne	r0, r5
   13724:	bl	1f694 <__assert_fail@plt+0xe360>
   13728:	str	r6, [r4]
   1372c:	pop	{r4, r5, r6, pc}
   13730:	andeq	r2, r3, r0, lsr #13
   13734:	ldr	r3, [pc, #12]	; 13748 <__assert_fail@plt+0x2414>
   13738:	cmp	r0, #0
   1373c:	moveq	r0, r3
   13740:	ldr	r0, [r0]
   13744:	bx	lr
   13748:	andeq	r2, r3, r0, lsr #13
   1374c:	ldr	r3, [pc, #12]	; 13760 <__assert_fail@plt+0x242c>
   13750:	cmp	r0, #0
   13754:	moveq	r0, r3
   13758:	str	r1, [r0]
   1375c:	bx	lr
   13760:	andeq	r2, r3, r0, lsr #13
   13764:	ldr	r3, [pc, #52]	; 137a0 <__assert_fail@plt+0x246c>
   13768:	cmp	r0, #0
   1376c:	moveq	r0, r3
   13770:	add	r3, r0, #8
   13774:	push	{lr}		; (str lr, [sp, #-4]!)
   13778:	lsr	lr, r1, #5
   1377c:	and	r1, r1, #31
   13780:	ldr	ip, [r3, lr, lsl #2]
   13784:	lsr	r0, ip, r1
   13788:	eor	r2, r2, r0
   1378c:	and	r2, r2, #1
   13790:	and	r0, r0, #1
   13794:	eor	r1, ip, r2, lsl r1
   13798:	str	r1, [r3, lr, lsl #2]
   1379c:	pop	{pc}		; (ldr pc, [sp], #4)
   137a0:	andeq	r2, r3, r0, lsr #13
   137a4:	ldr	r3, [pc, #16]	; 137bc <__assert_fail@plt+0x2488>
   137a8:	cmp	r0, #0
   137ac:	movne	r3, r0
   137b0:	ldr	r0, [r3, #4]
   137b4:	str	r1, [r3, #4]
   137b8:	bx	lr
   137bc:	andeq	r2, r3, r0, lsr #13
   137c0:	ldr	r3, [pc, #44]	; 137f4 <__assert_fail@plt+0x24c0>
   137c4:	cmp	r0, #0
   137c8:	moveq	r0, r3
   137cc:	mov	r3, #10
   137d0:	cmp	r2, #0
   137d4:	cmpne	r1, #0
   137d8:	str	r3, [r0]
   137dc:	bne	137e8 <__assert_fail@plt+0x24b4>
   137e0:	push	{r4, lr}
   137e4:	bl	11310 <abort@plt>
   137e8:	str	r1, [r0, #40]	; 0x28
   137ec:	str	r2, [r0, #44]	; 0x2c
   137f0:	bx	lr
   137f4:	andeq	r2, r3, r0, lsr #13
   137f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   137fc:	sub	sp, sp, #24
   13800:	mov	sl, r3
   13804:	ldr	r4, [sp, #56]	; 0x38
   13808:	ldr	r3, [pc, #100]	; 13874 <__assert_fail@plt+0x2540>
   1380c:	cmp	r4, #0
   13810:	moveq	r4, r3
   13814:	mov	r7, r0
   13818:	mov	r8, r1
   1381c:	mov	r9, r2
   13820:	bl	11214 <__errno_location@plt>
   13824:	ldr	r3, [r4, #44]	; 0x2c
   13828:	mov	r2, r9
   1382c:	mov	r1, r8
   13830:	ldr	r6, [r0]
   13834:	str	r3, [sp, #16]
   13838:	ldr	r3, [r4, #40]	; 0x28
   1383c:	mov	r5, r0
   13840:	str	r3, [sp, #12]
   13844:	add	r3, r4, #8
   13848:	str	r3, [sp, #8]
   1384c:	ldr	r3, [r4, #4]
   13850:	mov	r0, r7
   13854:	str	r3, [sp, #4]
   13858:	ldr	r3, [r4]
   1385c:	str	r3, [sp]
   13860:	mov	r3, sl
   13864:	bl	12824 <__assert_fail@plt+0x14f0>
   13868:	str	r6, [r5]
   1386c:	add	sp, sp, #24
   13870:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13874:	andeq	r2, r3, r0, lsr #13
   13878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1387c:	cmp	r3, #0
   13880:	sub	sp, sp, #44	; 0x2c
   13884:	ldr	r4, [pc, #188]	; 13948 <__assert_fail@plt+0x2614>
   13888:	mov	r6, r2
   1388c:	movne	r4, r3
   13890:	mov	sl, r1
   13894:	mov	r9, r0
   13898:	bl	11214 <__errno_location@plt>
   1389c:	ldr	r5, [r4, #4]
   138a0:	add	fp, r4, #8
   138a4:	cmp	r6, #0
   138a8:	orreq	r5, r5, #1
   138ac:	mov	r1, #0
   138b0:	mov	r2, r9
   138b4:	ldr	r3, [r0]
   138b8:	mov	r8, r0
   138bc:	str	r3, [sp, #28]
   138c0:	ldr	r3, [r4, #44]	; 0x2c
   138c4:	mov	r0, r1
   138c8:	str	r3, [sp, #16]
   138cc:	ldr	r3, [r4, #40]	; 0x28
   138d0:	stmib	sp, {r5, fp}
   138d4:	str	r3, [sp, #12]
   138d8:	ldr	r3, [r4]
   138dc:	str	r3, [sp]
   138e0:	mov	r3, sl
   138e4:	bl	12824 <__assert_fail@plt+0x14f0>
   138e8:	add	r1, r0, #1
   138ec:	mov	r7, r0
   138f0:	mov	r0, r1
   138f4:	str	r1, [sp, #36]	; 0x24
   138f8:	bl	1f2b8 <__assert_fail@plt+0xdf84>
   138fc:	ldr	r3, [r4, #44]	; 0x2c
   13900:	mov	r2, r9
   13904:	str	r3, [sp, #16]
   13908:	ldr	r3, [r4, #40]	; 0x28
   1390c:	stmib	sp, {r5, fp}
   13910:	str	r3, [sp, #12]
   13914:	ldr	r3, [r4]
   13918:	ldr	r1, [sp, #36]	; 0x24
   1391c:	str	r3, [sp]
   13920:	mov	r3, sl
   13924:	str	r0, [sp, #32]
   13928:	bl	12824 <__assert_fail@plt+0x14f0>
   1392c:	ldr	r3, [sp, #28]
   13930:	cmp	r6, #0
   13934:	str	r3, [r8]
   13938:	ldr	r0, [sp, #32]
   1393c:	strne	r7, [r6]
   13940:	add	sp, sp, #44	; 0x2c
   13944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13948:	andeq	r2, r3, r0, lsr #13
   1394c:	mov	r3, r2
   13950:	mov	r2, #0
   13954:	b	13878 <__assert_fail@plt+0x2544>
   13958:	push	{r4, r5, r6, r7, r8, lr}
   1395c:	mov	r6, #1
   13960:	ldr	r4, [pc, #104]	; 139d0 <__assert_fail@plt+0x269c>
   13964:	ldr	r5, [r4]
   13968:	add	r7, r5, #12
   1396c:	ldr	r3, [r4, #4]
   13970:	add	r7, r7, #8
   13974:	cmp	r6, r3
   13978:	blt	139c0 <__assert_fail@plt+0x268c>
   1397c:	ldr	r0, [r5, #4]
   13980:	ldr	r6, [pc, #76]	; 139d4 <__assert_fail@plt+0x26a0>
   13984:	cmp	r0, r6
   13988:	beq	1399c <__assert_fail@plt+0x2668>
   1398c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   13990:	mov	r3, #256	; 0x100
   13994:	str	r3, [r4, #8]
   13998:	str	r6, [r4, #12]
   1399c:	ldr	r6, [pc, #52]	; 139d8 <__assert_fail@plt+0x26a4>
   139a0:	cmp	r5, r6
   139a4:	beq	139b4 <__assert_fail@plt+0x2680>
   139a8:	mov	r0, r5
   139ac:	bl	1ff1c <__assert_fail@plt+0xebe8>
   139b0:	str	r6, [r4]
   139b4:	mov	r3, #1
   139b8:	str	r3, [r4, #4]
   139bc:	pop	{r4, r5, r6, r7, r8, pc}
   139c0:	ldr	r0, [r7, #-8]
   139c4:	bl	1ff1c <__assert_fail@plt+0xebe8>
   139c8:	add	r6, r6, #1
   139cc:	b	1396c <__assert_fail@plt+0x2638>
   139d0:	andeq	r2, r3, r0, lsl #3
   139d4:	andeq	r2, r3, r0, lsr #11
   139d8:	andeq	r2, r3, r8, lsl #3
   139dc:	ldr	r3, [pc, #4]	; 139e8 <__assert_fail@plt+0x26b4>
   139e0:	mvn	r2, #0
   139e4:	b	13558 <__assert_fail@plt+0x2224>
   139e8:	andeq	r2, r3, r0, lsr #13
   139ec:	ldr	r3, [pc]	; 139f4 <__assert_fail@plt+0x26c0>
   139f0:	b	13558 <__assert_fail@plt+0x2224>
   139f4:	andeq	r2, r3, r0, lsr #13
   139f8:	mov	r1, r0
   139fc:	mov	r0, #0
   13a00:	b	139dc <__assert_fail@plt+0x26a8>
   13a04:	mov	r2, r1
   13a08:	mov	r1, r0
   13a0c:	mov	r0, #0
   13a10:	b	139ec <__assert_fail@plt+0x26b8>
   13a14:	push	{r4, r5, lr}
   13a18:	sub	sp, sp, #52	; 0x34
   13a1c:	mov	r5, r2
   13a20:	mov	r4, r0
   13a24:	mov	r0, sp
   13a28:	bl	126e0 <__assert_fail@plt+0x13ac>
   13a2c:	mov	r3, sp
   13a30:	mvn	r2, #0
   13a34:	mov	r1, r5
   13a38:	mov	r0, r4
   13a3c:	bl	13558 <__assert_fail@plt+0x2224>
   13a40:	add	sp, sp, #52	; 0x34
   13a44:	pop	{r4, r5, pc}
   13a48:	push	{r4, r5, r6, lr}
   13a4c:	sub	sp, sp, #48	; 0x30
   13a50:	mov	r5, r2
   13a54:	mov	r6, r3
   13a58:	mov	r4, r0
   13a5c:	mov	r0, sp
   13a60:	bl	126e0 <__assert_fail@plt+0x13ac>
   13a64:	mov	r3, sp
   13a68:	mov	r2, r6
   13a6c:	mov	r1, r5
   13a70:	mov	r0, r4
   13a74:	bl	13558 <__assert_fail@plt+0x2224>
   13a78:	add	sp, sp, #48	; 0x30
   13a7c:	pop	{r4, r5, r6, pc}
   13a80:	mov	r2, r1
   13a84:	mov	r1, r0
   13a88:	mov	r0, #0
   13a8c:	b	13a14 <__assert_fail@plt+0x26e0>
   13a90:	mov	r3, r2
   13a94:	mov	r2, r1
   13a98:	mov	r1, r0
   13a9c:	mov	r0, #0
   13aa0:	b	13a48 <__assert_fail@plt+0x2714>
   13aa4:	push	{r4, r5, r6, lr}
   13aa8:	mov	r4, r0
   13aac:	ldr	lr, [pc, #80]	; 13b04 <__assert_fail@plt+0x27d0>
   13ab0:	mov	r5, r1
   13ab4:	mov	r6, r2
   13ab8:	ldm	lr!, {r0, r1, r2, r3}
   13abc:	sub	sp, sp, #48	; 0x30
   13ac0:	mov	ip, sp
   13ac4:	stmia	ip!, {r0, r1, r2, r3}
   13ac8:	ldm	lr!, {r0, r1, r2, r3}
   13acc:	stmia	ip!, {r0, r1, r2, r3}
   13ad0:	ldm	lr, {r0, r1, r2, r3}
   13ad4:	stm	ip, {r0, r1, r2, r3}
   13ad8:	mov	r1, r6
   13adc:	mov	r2, #1
   13ae0:	mov	r0, sp
   13ae4:	bl	13764 <__assert_fail@plt+0x2430>
   13ae8:	mov	r3, sp
   13aec:	mov	r2, r5
   13af0:	mov	r1, r4
   13af4:	mov	r0, #0
   13af8:	bl	13558 <__assert_fail@plt+0x2224>
   13afc:	add	sp, sp, #48	; 0x30
   13b00:	pop	{r4, r5, r6, pc}
   13b04:	andeq	r2, r3, r0, lsr #13
   13b08:	mov	r2, r1
   13b0c:	mvn	r1, #0
   13b10:	b	13aa4 <__assert_fail@plt+0x2770>
   13b14:	mov	r1, #58	; 0x3a
   13b18:	b	13b08 <__assert_fail@plt+0x27d4>
   13b1c:	mov	r2, #58	; 0x3a
   13b20:	b	13aa4 <__assert_fail@plt+0x2770>
   13b24:	push	{r4, r5, lr}
   13b28:	sub	sp, sp, #100	; 0x64
   13b2c:	mov	r4, r0
   13b30:	mov	r0, sp
   13b34:	mov	r5, r2
   13b38:	bl	126e0 <__assert_fail@plt+0x13ac>
   13b3c:	mov	ip, sp
   13b40:	add	lr, sp, #48	; 0x30
   13b44:	ldm	ip!, {r0, r1, r2, r3}
   13b48:	stmia	lr!, {r0, r1, r2, r3}
   13b4c:	ldm	ip!, {r0, r1, r2, r3}
   13b50:	stmia	lr!, {r0, r1, r2, r3}
   13b54:	ldm	ip, {r0, r1, r2, r3}
   13b58:	stm	lr, {r0, r1, r2, r3}
   13b5c:	mov	r2, #1
   13b60:	mov	r1, #58	; 0x3a
   13b64:	add	r0, sp, #48	; 0x30
   13b68:	bl	13764 <__assert_fail@plt+0x2430>
   13b6c:	add	r3, sp, #48	; 0x30
   13b70:	mvn	r2, #0
   13b74:	mov	r1, r5
   13b78:	mov	r0, r4
   13b7c:	bl	13558 <__assert_fail@plt+0x2224>
   13b80:	add	sp, sp, #100	; 0x64
   13b84:	pop	{r4, r5, pc}
   13b88:	push	{r4, r5, r6, r7, lr}
   13b8c:	mov	r4, r0
   13b90:	ldr	lr, [pc, #84]	; 13bec <__assert_fail@plt+0x28b8>
   13b94:	mov	r6, r1
   13b98:	mov	r7, r2
   13b9c:	mov	r5, r3
   13ba0:	ldm	lr!, {r0, r1, r2, r3}
   13ba4:	sub	sp, sp, #52	; 0x34
   13ba8:	mov	ip, sp
   13bac:	stmia	ip!, {r0, r1, r2, r3}
   13bb0:	ldm	lr!, {r0, r1, r2, r3}
   13bb4:	stmia	ip!, {r0, r1, r2, r3}
   13bb8:	ldm	lr, {r0, r1, r2, r3}
   13bbc:	stm	ip, {r0, r1, r2, r3}
   13bc0:	mov	r2, r7
   13bc4:	mov	r1, r6
   13bc8:	mov	r0, sp
   13bcc:	bl	137c0 <__assert_fail@plt+0x248c>
   13bd0:	mov	r3, sp
   13bd4:	ldr	r2, [sp, #72]	; 0x48
   13bd8:	mov	r1, r5
   13bdc:	mov	r0, r4
   13be0:	bl	13558 <__assert_fail@plt+0x2224>
   13be4:	add	sp, sp, #52	; 0x34
   13be8:	pop	{r4, r5, r6, r7, pc}
   13bec:	andeq	r2, r3, r0, lsr #13
   13bf0:	mvn	ip, #0
   13bf4:	push	{r0, r1, r2, lr}
   13bf8:	str	ip, [sp]
   13bfc:	bl	13b88 <__assert_fail@plt+0x2854>
   13c00:	add	sp, sp, #12
   13c04:	pop	{pc}		; (ldr pc, [sp], #4)
   13c08:	mov	r3, r2
   13c0c:	mov	r2, r1
   13c10:	mov	r1, r0
   13c14:	mov	r0, #0
   13c18:	b	13bf0 <__assert_fail@plt+0x28bc>
   13c1c:	push	{r0, r1, r2, lr}
   13c20:	str	r3, [sp]
   13c24:	mov	r3, r2
   13c28:	mov	r2, r1
   13c2c:	mov	r1, r0
   13c30:	mov	r0, #0
   13c34:	bl	13b88 <__assert_fail@plt+0x2854>
   13c38:	add	sp, sp, #12
   13c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c40:	ldr	r3, [pc]	; 13c48 <__assert_fail@plt+0x2914>
   13c44:	b	13558 <__assert_fail@plt+0x2224>
   13c48:	muleq	r3, r0, r1
   13c4c:	mov	r2, r1
   13c50:	mov	r1, r0
   13c54:	mov	r0, #0
   13c58:	b	13c40 <__assert_fail@plt+0x290c>
   13c5c:	mvn	r2, #0
   13c60:	b	13c40 <__assert_fail@plt+0x290c>
   13c64:	mov	r1, r0
   13c68:	mov	r0, #0
   13c6c:	b	13c5c <__assert_fail@plt+0x2928>
   13c70:	cmp	r1, #0
   13c74:	add	r3, r1, #31
   13c78:	movge	r3, r1
   13c7c:	rsbs	r2, r1, #0
   13c80:	asr	r3, r3, #5
   13c84:	and	r2, r2, #31
   13c88:	and	r1, r1, #31
   13c8c:	mov	ip, #1
   13c90:	rsbpl	r1, r2, #0
   13c94:	ldr	r2, [r0, r3, lsl #2]
   13c98:	orr	r1, r2, ip, lsl r1
   13c9c:	str	r1, [r0, r3, lsl #2]
   13ca0:	bx	lr
   13ca4:	cmp	r1, #0
   13ca8:	add	r3, r1, #31
   13cac:	movge	r3, r1
   13cb0:	rsbs	r2, r1, #0
   13cb4:	asr	r3, r3, #5
   13cb8:	and	r2, r2, #31
   13cbc:	ldr	r0, [r0, r3, lsl #2]
   13cc0:	and	r1, r1, #31
   13cc4:	rsbpl	r1, r2, #0
   13cc8:	lsr	r0, r0, r1
   13ccc:	and	r0, r0, #1
   13cd0:	bx	lr
   13cd4:	sub	r3, r0, #4
   13cd8:	add	r0, r0, #28
   13cdc:	ldr	r2, [r3, #4]
   13ce0:	mvn	r2, r2
   13ce4:	str	r2, [r3, #4]!
   13ce8:	cmp	r3, r0
   13cec:	bne	13cdc <__assert_fail@plt+0x29a8>
   13cf0:	bx	lr
   13cf4:	sub	r3, r0, #4
   13cf8:	sub	r1, r1, #4
   13cfc:	add	r0, r0, #28
   13d00:	ldr	r2, [r3, #4]
   13d04:	ldr	ip, [r1, #4]!
   13d08:	orr	r2, r2, ip
   13d0c:	str	r2, [r3, #4]!
   13d10:	cmp	r3, r0
   13d14:	bne	13d00 <__assert_fail@plt+0x29cc>
   13d18:	bx	lr
   13d1c:	sub	r3, r0, #4
   13d20:	sub	r1, r1, #4
   13d24:	add	r0, r0, #28
   13d28:	ldr	r2, [r3, #4]
   13d2c:	ldr	ip, [r1, #4]!
   13d30:	and	r2, r2, ip
   13d34:	str	r2, [r3, #4]!
   13d38:	cmp	r3, r0
   13d3c:	bne	13d28 <__assert_fail@plt+0x29f4>
   13d40:	bx	lr
   13d44:	ldr	r3, [r0, #80]	; 0x50
   13d48:	cmp	r3, #1
   13d4c:	movne	r2, r0
   13d50:	movne	r0, #1
   13d54:	ldrne	ip, [r2, #28]
   13d58:	bne	13d64 <__assert_fail@plt+0x2a30>
   13d5c:	mov	r0, r3
   13d60:	bx	lr
   13d64:	add	r3, r0, r1
   13d68:	cmp	ip, r3
   13d6c:	bgt	13d74 <__assert_fail@plt+0x2a40>
   13d70:	bx	lr
   13d74:	push	{lr}		; (str lr, [sp, #-4]!)
   13d78:	ldr	lr, [r2, #8]
   13d7c:	ldr	r3, [lr, r3, lsl #2]
   13d80:	cmn	r3, #1
   13d84:	popne	{pc}		; (ldrne pc, [sp], #4)
   13d88:	add	r0, r0, #1
   13d8c:	add	r3, r0, r1
   13d90:	cmp	ip, r3
   13d94:	bgt	13d78 <__assert_fail@plt+0x2a44>
   13d98:	pop	{pc}		; (ldr pc, [sp], #4)
   13d9c:	ldr	r3, [r0, #80]	; 0x50
   13da0:	cmp	r3, #1
   13da4:	ldreq	r3, [r0, #4]
   13da8:	ldrne	r3, [r0, #8]
   13dac:	ldrbeq	r0, [r3, r1]
   13db0:	ldrne	r0, [r3, r1, lsl #2]
   13db4:	bx	lr
   13db8:	ldr	r3, [r0, #36]	; 0x24
   13dbc:	ldr	r2, [r0, #48]	; 0x30
   13dc0:	cmp	r3, r2
   13dc4:	movlt	r2, r3
   13dc8:	ldr	r3, [r0, #28]
   13dcc:	cmp	r3, r2
   13dd0:	blt	13de0 <__assert_fail@plt+0x2aac>
   13dd4:	str	r3, [r0, #28]
   13dd8:	str	r3, [r0, #32]
   13ddc:	bx	lr
   13de0:	ldr	r1, [r0]
   13de4:	ldr	ip, [r0, #24]
   13de8:	add	r1, r1, r3
   13dec:	ldrb	r1, [r1, ip]
   13df0:	ldr	ip, [r0, #64]	; 0x40
   13df4:	ldrb	ip, [ip, r1]
   13df8:	ldr	r1, [r0, #4]
   13dfc:	strb	ip, [r1, r3]
   13e00:	add	r3, r3, #1
   13e04:	b	13dcc <__assert_fail@plt+0x2a98>
   13e08:	ldr	r2, [r0, #4]
   13e0c:	cmp	r2, #0
   13e10:	ble	13e5c <__assert_fail@plt+0x2b28>
   13e14:	sub	r2, r2, #1
   13e18:	mov	r3, #0
   13e1c:	push	{lr}		; (str lr, [sp, #-4]!)
   13e20:	cmp	r2, r3
   13e24:	ldr	lr, [r0, #8]
   13e28:	bhi	13e40 <__assert_fail@plt+0x2b0c>
   13e2c:	ldr	r2, [lr, r3, lsl #2]
   13e30:	cmp	r1, r2
   13e34:	bne	13e64 <__assert_fail@plt+0x2b30>
   13e38:	add	r0, r3, #1
   13e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e40:	add	ip, r2, r3
   13e44:	lsr	ip, ip, #1
   13e48:	ldr	lr, [lr, ip, lsl #2]
   13e4c:	cmp	lr, r1
   13e50:	addlt	r3, ip, #1
   13e54:	movge	r2, ip
   13e58:	b	13e20 <__assert_fail@plt+0x2aec>
   13e5c:	mov	r0, #0
   13e60:	bx	lr
   13e64:	mov	r0, #0
   13e68:	pop	{pc}		; (ldr pc, [sp], #4)
   13e6c:	ldr	r3, [r1, #40]	; 0x28
   13e70:	ldr	ip, [r1, #56]	; 0x38
   13e74:	cmp	ip, r3
   13e78:	movle	r3, #2
   13e7c:	strble	r3, [r0, #4]
   13e80:	movle	r3, #0
   13e84:	ble	13fa8 <__assert_fail@plt+0x2c74>
   13e88:	push	{r4, lr}
   13e8c:	ldr	lr, [r1, #4]
   13e90:	ldrb	ip, [lr, r3]
   13e94:	strb	ip, [r0]
   13e98:	ldr	r4, [r1, #80]	; 0x50
   13e9c:	cmp	r4, #1
   13ea0:	ble	13ecc <__assert_fail@plt+0x2b98>
   13ea4:	ldr	r4, [r1, #28]
   13ea8:	cmp	r3, r4
   13eac:	beq	13ecc <__assert_fail@plt+0x2b98>
   13eb0:	ldr	r4, [r1, #8]
   13eb4:	ldr	r4, [r4, r3, lsl #2]
   13eb8:	cmn	r4, #1
   13ebc:	bne	13ecc <__assert_fail@plt+0x2b98>
   13ec0:	mov	r3, #1
   13ec4:	strb	r3, [r0, #4]
   13ec8:	b	13f58 <__assert_fail@plt+0x2c24>
   13ecc:	cmp	ip, #92	; 0x5c
   13ed0:	bne	13ef8 <__assert_fail@plt+0x2bc4>
   13ed4:	tst	r2, #1
   13ed8:	beq	13ec0 <__assert_fail@plt+0x2b8c>
   13edc:	ldr	r2, [r1, #48]	; 0x30
   13ee0:	add	r3, r3, #1
   13ee4:	cmp	r3, r2
   13ee8:	strlt	r3, [r1, #40]	; 0x28
   13eec:	ldrblt	r3, [lr, r3]
   13ef0:	strblt	r3, [r0]
   13ef4:	b	13ec0 <__assert_fail@plt+0x2b8c>
   13ef8:	cmp	ip, #91	; 0x5b
   13efc:	bne	13f70 <__assert_fail@plt+0x2c3c>
   13f00:	ldr	r4, [r1, #48]	; 0x30
   13f04:	add	ip, r3, #1
   13f08:	cmp	ip, r4
   13f0c:	addlt	r3, lr, r3
   13f10:	movge	r3, #0
   13f14:	ldrblt	r3, [r3, #1]
   13f18:	cmp	r3, #58	; 0x3a
   13f1c:	strb	r3, [r0]
   13f20:	beq	13f60 <__assert_fail@plt+0x2c2c>
   13f24:	cmp	r3, #61	; 0x3d
   13f28:	beq	13f4c <__assert_fail@plt+0x2c18>
   13f2c:	cmp	r3, #46	; 0x2e
   13f30:	moveq	r3, #26
   13f34:	beq	13f50 <__assert_fail@plt+0x2c1c>
   13f38:	mov	r3, #1
   13f3c:	mov	r2, #91	; 0x5b
   13f40:	strb	r3, [r0, #4]
   13f44:	strb	r2, [r0]
   13f48:	b	13f58 <__assert_fail@plt+0x2c24>
   13f4c:	mov	r3, #28
   13f50:	strb	r3, [r0, #4]
   13f54:	mov	r3, #2
   13f58:	mov	r0, r3
   13f5c:	pop	{r4, pc}
   13f60:	tst	r2, #4
   13f64:	beq	13f38 <__assert_fail@plt+0x2c04>
   13f68:	mov	r3, #30
   13f6c:	b	13f50 <__assert_fail@plt+0x2c1c>
   13f70:	cmp	ip, #93	; 0x5d
   13f74:	beq	13f98 <__assert_fail@plt+0x2c64>
   13f78:	cmp	ip, #94	; 0x5e
   13f7c:	beq	13fa0 <__assert_fail@plt+0x2c6c>
   13f80:	cmp	ip, #45	; 0x2d
   13f84:	moveq	r3, #22
   13f88:	bne	13ec0 <__assert_fail@plt+0x2b8c>
   13f8c:	strb	r3, [r0, #4]
   13f90:	mov	r3, #1
   13f94:	b	13f58 <__assert_fail@plt+0x2c24>
   13f98:	mov	r3, #21
   13f9c:	b	13f8c <__assert_fail@plt+0x2c58>
   13fa0:	mov	r3, #25
   13fa4:	b	13f8c <__assert_fail@plt+0x2c58>
   13fa8:	mov	r0, r3
   13fac:	bx	lr
   13fb0:	ldrb	r3, [r1, #24]
   13fb4:	cmp	r3, #17
   13fb8:	bne	13fd0 <__assert_fail@plt+0x2c9c>
   13fbc:	ldr	r3, [r1, #20]
   13fc0:	cmp	r0, r3
   13fc4:	ldrbeq	r3, [r1, #26]
   13fc8:	orreq	r3, r3, #8
   13fcc:	strbeq	r3, [r1, #26]
   13fd0:	mov	r0, #0
   13fd4:	bx	lr
   13fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	sub	sp, sp, #44	; 0x2c
   13fe0:	ldr	sl, [r0, #84]	; 0x54
   13fe4:	str	r3, [sp, #16]
   13fe8:	mov	r6, r2
   13fec:	ldr	r2, [sp, #16]
   13ff0:	ldr	r3, [sl, #24]
   13ff4:	mov	r9, #12
   13ff8:	mov	fp, r0
   13ffc:	mla	r9, r9, r2, r3
   14000:	ldr	r2, [sp, #80]	; 0x50
   14004:	mov	r3, #24
   14008:	mov	r4, r1
   1400c:	mul	r3, r3, r2
   14010:	mov	r8, #0
   14014:	str	r3, [sp, #24]
   14018:	mov	r3, #1
   1401c:	lsl	r3, r3, r6
   14020:	str	r3, [sp, #12]
   14024:	mvn	r3, r3
   14028:	str	r3, [sp, #32]
   1402c:	and	r3, r1, #1
   14030:	str	r3, [sp, #36]	; 0x24
   14034:	and	r3, r1, #2
   14038:	str	r3, [sp, #20]
   1403c:	ldr	r3, [r9, #4]
   14040:	cmp	r8, r3
   14044:	lsrge	r4, r4, #1
   14048:	andge	r0, r4, #1
   1404c:	bge	140f0 <__assert_fail@plt+0x2dbc>
   14050:	ldr	r3, [r9, #8]
   14054:	ldr	r7, [r3, r8, lsl #2]
   14058:	ldr	r3, [sl]
   1405c:	add	r2, r3, r7, lsl #3
   14060:	ldrb	r2, [r2, #4]
   14064:	cmp	r2, #8
   14068:	beq	14168 <__assert_fail@plt+0x2e34>
   1406c:	cmp	r2, #9
   14070:	beq	14184 <__assert_fail@plt+0x2e50>
   14074:	cmp	r2, #4
   14078:	bne	14160 <__assert_fail@plt+0x2e2c>
   1407c:	ldr	r3, [sp, #80]	; 0x50
   14080:	cmn	r3, #1
   14084:	beq	14160 <__assert_fail@plt+0x2e2c>
   14088:	mov	r3, #12
   1408c:	mul	r3, r3, r7
   14090:	str	r3, [sp, #28]
   14094:	ldr	r3, [sp, #24]
   14098:	add	r5, r3, #24
   1409c:	ldr	r3, [fp, #116]	; 0x74
   140a0:	add	r5, r3, r5
   140a4:	ldr	r3, [r5, #-24]	; 0xffffffe8
   140a8:	cmp	r7, r3
   140ac:	bne	14150 <__assert_fail@plt+0x2e1c>
   140b0:	cmp	r6, #31
   140b4:	bgt	140c8 <__assert_fail@plt+0x2d94>
   140b8:	ldr	r3, [r5, #-8]
   140bc:	ldr	r2, [sp, #12]
   140c0:	tst	r2, r3
   140c4:	beq	14150 <__assert_fail@plt+0x2e1c>
   140c8:	ldr	r2, [sp, #28]
   140cc:	ldr	r3, [sl, #20]
   140d0:	add	r3, r3, r2
   140d4:	ldr	r2, [sp, #16]
   140d8:	ldr	r3, [r3, #8]
   140dc:	ldr	r3, [r3]
   140e0:	cmp	r2, r3
   140e4:	bne	140f8 <__assert_fail@plt+0x2dc4>
   140e8:	ands	r0, r4, #1
   140ec:	mvnne	r0, #0
   140f0:	add	sp, sp, #44	; 0x2c
   140f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140f8:	ldr	r2, [sp, #80]	; 0x50
   140fc:	mov	r1, r4
   14100:	str	r2, [sp]
   14104:	mov	r0, fp
   14108:	mov	r2, r6
   1410c:	bl	13fd8 <__assert_fail@plt+0x2ca4>
   14110:	cmn	r0, #1
   14114:	bne	14120 <__assert_fail@plt+0x2dec>
   14118:	mvn	r0, #0
   1411c:	b	140f0 <__assert_fail@plt+0x2dbc>
   14120:	cmp	r0, #0
   14124:	bne	1413c <__assert_fail@plt+0x2e08>
   14128:	ldr	r3, [sp, #20]
   1412c:	cmp	r3, #0
   14130:	beq	1413c <__assert_fail@plt+0x2e08>
   14134:	mov	r0, #0
   14138:	b	140f0 <__assert_fail@plt+0x2dbc>
   1413c:	cmp	r6, #31
   14140:	ldrle	r3, [r5, #-8]
   14144:	ldrle	r2, [sp, #32]
   14148:	andle	r3, r3, r2
   1414c:	strle	r3, [r5, #-8]
   14150:	add	r5, r5, #24
   14154:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   14158:	cmp	r3, #0
   1415c:	bne	140a4 <__assert_fail@plt+0x2d70>
   14160:	add	r8, r8, #1
   14164:	b	1403c <__assert_fail@plt+0x2d08>
   14168:	ldr	r2, [sp, #36]	; 0x24
   1416c:	cmp	r2, #0
   14170:	beq	14160 <__assert_fail@plt+0x2e2c>
   14174:	ldr	r3, [r3, r7, lsl #3]
   14178:	cmp	r3, r6
   1417c:	bne	14160 <__assert_fail@plt+0x2e2c>
   14180:	b	14118 <__assert_fail@plt+0x2de4>
   14184:	ldr	r2, [sp, #20]
   14188:	cmp	r2, #0
   1418c:	beq	14160 <__assert_fail@plt+0x2e2c>
   14190:	ldr	r3, [r3, r7, lsl #3]
   14194:	cmp	r6, r3
   14198:	bne	14160 <__assert_fail@plt+0x2e2c>
   1419c:	b	14134 <__assert_fail@plt+0x2e00>
   141a0:	push	{r4, r5, lr}
   141a4:	mov	lr, #24
   141a8:	ldr	r5, [r0, #116]	; 0x74
   141ac:	ldr	ip, [sp, #12]
   141b0:	mla	r1, lr, r1, r5
   141b4:	ldr	r4, [sp, #16]
   141b8:	ldr	lr, [r1, #8]
   141bc:	cmp	lr, ip
   141c0:	bgt	141f8 <__assert_fail@plt+0x2ec4>
   141c4:	ldr	r1, [r1, #12]
   141c8:	cmp	ip, r1
   141cc:	bgt	14204 <__assert_fail@plt+0x2ed0>
   141d0:	cmp	ip, r1
   141d4:	moveq	r1, #2
   141d8:	movne	r1, #0
   141dc:	cmp	lr, ip
   141e0:	orreq	r1, r1, #1
   141e4:	cmp	r1, #0
   141e8:	beq	141fc <__assert_fail@plt+0x2ec8>
   141ec:	str	r4, [sp, #12]
   141f0:	pop	{r4, r5, lr}
   141f4:	b	13fd8 <__assert_fail@plt+0x2ca4>
   141f8:	mvn	r1, #0
   141fc:	mov	r0, r1
   14200:	pop	{r4, r5, pc}
   14204:	mov	r1, #1
   14208:	b	141fc <__assert_fail@plt+0x2ec8>
   1420c:	push	{r4, r5, lr}
   14210:	mov	r3, #0
   14214:	ldr	r4, [r0, #108]	; 0x6c
   14218:	mov	r5, #24
   1421c:	mov	ip, r4
   14220:	cmp	ip, r3
   14224:	bgt	14254 <__assert_fail@plt+0x2f20>
   14228:	cmp	r4, r3
   1422c:	mvnle	r3, #0
   14230:	ble	1424c <__assert_fail@plt+0x2f18>
   14234:	ldr	r0, [r0, #116]	; 0x74
   14238:	mov	r2, #24
   1423c:	mla	r2, r2, r3, r0
   14240:	ldr	r2, [r2, #4]
   14244:	cmp	r1, r2
   14248:	mvnne	r3, #0
   1424c:	mov	r0, r3
   14250:	pop	{r4, r5, pc}
   14254:	add	r2, ip, r3
   14258:	ldr	lr, [r0, #116]	; 0x74
   1425c:	add	r2, r2, r2, lsr #31
   14260:	asr	r2, r2, #1
   14264:	mla	lr, r5, r2, lr
   14268:	ldr	lr, [lr, #4]
   1426c:	cmp	lr, r1
   14270:	addlt	r3, r2, #1
   14274:	movge	ip, r2
   14278:	b	14220 <__assert_fail@plt+0x2eec>
   1427c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14280:	mov	r6, r1
   14284:	sub	sp, sp, #20
   14288:	mov	r1, r3
   1428c:	mov	r5, r0
   14290:	mov	sl, r2
   14294:	mov	r7, r3
   14298:	ldr	r9, [r0, #84]	; 0x54
   1429c:	bl	1420c <__assert_fail@plt+0x2ed8>
   142a0:	ldr	r1, [sp, #60]	; 0x3c
   142a4:	mov	r4, #0
   142a8:	str	r0, [sp, #8]
   142ac:	mov	r0, r5
   142b0:	bl	1420c <__assert_fail@plt+0x2ed8>
   142b4:	str	r0, [sp, #12]
   142b8:	ldr	r3, [r6, #4]
   142bc:	cmp	r4, r3
   142c0:	blt	142d0 <__assert_fail@plt+0x2f9c>
   142c4:	mov	r0, #0
   142c8:	add	sp, sp, #20
   142cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d0:	ldr	r3, [r6, #8]
   142d4:	ldr	r2, [r5, #116]	; 0x74
   142d8:	mov	r0, r5
   142dc:	ldr	r1, [r3, r4, lsl #2]
   142e0:	mov	r3, #24
   142e4:	mul	r3, r3, r1
   142e8:	ldr	r2, [r2, r3]
   142ec:	ldr	r3, [r9]
   142f0:	ldr	r8, [r3, r2, lsl #3]
   142f4:	ldr	r3, [sp, #8]
   142f8:	mov	r2, r8
   142fc:	str	r3, [sp, #4]
   14300:	str	r7, [sp]
   14304:	mov	r3, sl
   14308:	bl	141a0 <__assert_fail@plt+0x2e6c>
   1430c:	ldr	r3, [sp, #12]
   14310:	ldr	r1, [r6, #8]
   14314:	str	r3, [sp, #4]
   14318:	ldr	r3, [sp, #60]	; 0x3c
   1431c:	mov	r2, r8
   14320:	str	r3, [sp]
   14324:	ldr	r3, [sp, #56]	; 0x38
   14328:	ldr	r1, [r1, r4, lsl #2]
   1432c:	mov	fp, r0
   14330:	mov	r0, r5
   14334:	bl	141a0 <__assert_fail@plt+0x2e6c>
   14338:	cmp	fp, r0
   1433c:	addeq	r4, r4, #1
   14340:	beq	142b8 <__assert_fail@plt+0x2f84>
   14344:	mov	r0, #1
   14348:	b	142c8 <__assert_fail@plt+0x2f94>
   1434c:	push	{r4, r5, r6, lr}
   14350:	mov	r4, r0
   14354:	mov	r5, r1
   14358:	mov	r6, r2
   1435c:	ldr	r3, [r4, #4]
   14360:	cmp	r3, #0
   14364:	bne	143b4 <__assert_fail@plt+0x3080>
   14368:	ldr	r3, [r4, #8]
   1436c:	cmp	r3, #0
   14370:	bne	143b4 <__assert_fail@plt+0x3080>
   14374:	mov	r1, r4
   14378:	mov	r0, r6
   1437c:	blx	r5
   14380:	cmp	r0, #0
   14384:	popne	{r4, r5, r6, pc}
   14388:	ldr	r1, [r4]
   1438c:	cmp	r1, #0
   14390:	popeq	{r4, r5, r6, pc}
   14394:	ldr	r3, [r1, #8]
   14398:	cmp	r4, r3
   1439c:	cmpne	r3, #0
   143a0:	moveq	r2, #1
   143a4:	movne	r2, #0
   143a8:	cmp	r2, #0
   143ac:	mov	r4, r1
   143b0:	bne	14374 <__assert_fail@plt+0x3040>
   143b4:	mov	r4, r3
   143b8:	b	1435c <__assert_fail@plt+0x3028>
   143bc:	push	{r4, r5, r6, r7, r8, lr}
   143c0:	mov	r4, r0
   143c4:	mov	r5, r1
   143c8:	mov	r6, r2
   143cc:	mov	r7, #0
   143d0:	mov	r1, r4
   143d4:	mov	r0, r6
   143d8:	blx	r5
   143dc:	cmp	r0, #0
   143e0:	popne	{r4, r5, r6, r7, r8, pc}
   143e4:	ldr	r3, [r4, #4]
   143e8:	cmp	r3, #0
   143ec:	moveq	r1, r7
   143f0:	beq	14410 <__assert_fail@plt+0x30dc>
   143f4:	mov	r4, r3
   143f8:	b	143d0 <__assert_fail@plt+0x309c>
   143fc:	ldr	r3, [r4]
   14400:	mov	r1, r4
   14404:	cmp	r3, #0
   14408:	popeq	{r4, r5, r6, r7, r8, pc}
   1440c:	mov	r4, r3
   14410:	ldr	r3, [r4, #8]
   14414:	cmp	r3, #0
   14418:	cmpne	r1, r3
   1441c:	beq	143fc <__assert_fail@plt+0x30c8>
   14420:	b	143f4 <__assert_fail@plt+0x30c0>
   14424:	ldr	r3, [r0, #80]	; 0x50
   14428:	push	{r4, r5, r6, lr}
   1442c:	cmp	r3, #1
   14430:	mov	r4, r0
   14434:	mov	r5, r1
   14438:	ble	14488 <__assert_fail@plt+0x3154>
   1443c:	cmn	r1, #-1073741823	; 0xc0000001
   14440:	bls	1444c <__assert_fail@plt+0x3118>
   14444:	mov	r0, #12
   14448:	pop	{r4, r5, r6, pc}
   1444c:	lsl	r6, r1, #2
   14450:	mov	r1, r6
   14454:	ldr	r0, [r0, #8]
   14458:	bl	1fd98 <__assert_fail@plt+0xea64>
   1445c:	cmp	r0, #0
   14460:	beq	14444 <__assert_fail@plt+0x3110>
   14464:	str	r0, [r4, #8]
   14468:	ldr	r0, [r4, #12]
   1446c:	cmp	r0, #0
   14470:	beq	14488 <__assert_fail@plt+0x3154>
   14474:	mov	r1, r6
   14478:	bl	1fd98 <__assert_fail@plt+0xea64>
   1447c:	cmp	r0, #0
   14480:	beq	14444 <__assert_fail@plt+0x3110>
   14484:	str	r0, [r4, #12]
   14488:	ldrb	r3, [r4, #75]	; 0x4b
   1448c:	cmp	r3, #0
   14490:	beq	144ac <__assert_fail@plt+0x3178>
   14494:	mov	r1, r5
   14498:	ldr	r0, [r4, #4]
   1449c:	bl	1fd98 <__assert_fail@plt+0xea64>
   144a0:	cmp	r0, #0
   144a4:	beq	14444 <__assert_fail@plt+0x3110>
   144a8:	str	r0, [r4, #4]
   144ac:	str	r5, [r4, #36]	; 0x24
   144b0:	mov	r0, #0
   144b4:	pop	{r4, r5, r6, pc}
   144b8:	push	{r4, r5, r6, lr}
   144bc:	mov	r5, r1
   144c0:	ldm	r0, {r1, r3}
   144c4:	mov	r4, r0
   144c8:	cmp	r1, r3
   144cc:	bne	144f4 <__assert_fail@plt+0x31c0>
   144d0:	add	r1, r1, #1
   144d4:	lsl	r3, r1, #1
   144d8:	str	r3, [r0]
   144dc:	lsl	r1, r1, #3
   144e0:	ldr	r0, [r0, #8]
   144e4:	bl	1fd98 <__assert_fail@plt+0xea64>
   144e8:	cmp	r0, #0
   144ec:	popeq	{r4, r5, r6, pc}
   144f0:	str	r0, [r4, #8]
   144f4:	ldr	r3, [r4, #4]
   144f8:	ldr	r2, [r4, #8]
   144fc:	add	r1, r3, #1
   14500:	str	r1, [r4, #4]
   14504:	mov	r0, #1
   14508:	str	r5, [r2, r3, lsl #2]
   1450c:	pop	{r4, r5, r6, pc}
   14510:	push	{r4, r5, r6, r7, r8, lr}
   14514:	mov	r7, r3
   14518:	ldr	r3, [r0, #64]	; 0x40
   1451c:	mov	r4, r0
   14520:	cmp	r3, #31
   14524:	mov	r5, r1
   14528:	mov	r6, r2
   1452c:	bne	14554 <__assert_fail@plt+0x3220>
   14530:	mov	r0, #996	; 0x3e4
   14534:	bl	1fd58 <__assert_fail@plt+0xea24>
   14538:	subs	lr, r0, #0
   1453c:	beq	145b4 <__assert_fail@plt+0x3280>
   14540:	ldr	r3, [r4, #56]	; 0x38
   14544:	str	lr, [r4, #56]	; 0x38
   14548:	str	r3, [lr]
   1454c:	mov	r3, #0
   14550:	str	r3, [r4, #64]	; 0x40
   14554:	ldr	r1, [r4, #64]	; 0x40
   14558:	ldr	ip, [r4, #56]	; 0x38
   1455c:	add	r3, r1, #1
   14560:	lsl	r1, r1, #5
   14564:	add	lr, r1, #4
   14568:	str	r3, [r4, #64]	; 0x40
   1456c:	add	lr, ip, lr
   14570:	mov	r3, #0
   14574:	add	ip, ip, r1
   14578:	add	r2, ip, #24
   1457c:	stmib	ip, {r3, r5, r6}
   14580:	cmp	r5, #0
   14584:	ldm	r7, {r0, r1}
   14588:	stm	r2, {r0, r1}
   1458c:	ldrb	r2, [ip, #30]
   14590:	str	r3, [ip, #16]
   14594:	str	r3, [ip, #20]
   14598:	and	r2, r2, #243	; 0xf3
   1459c:	mvn	r3, #0
   145a0:	strb	r2, [ip, #30]
   145a4:	str	r3, [ip, #32]
   145a8:	strne	lr, [r5]
   145ac:	cmp	r6, #0
   145b0:	strne	lr, [r6]
   145b4:	mov	r0, lr
   145b8:	pop	{r4, r5, r6, r7, r8, pc}
   145bc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   145c0:	mov	r4, r0
   145c4:	ldr	r5, [r0]
   145c8:	mov	r8, r1
   145cc:	add	r6, sp, #4
   145d0:	mov	r7, #0
   145d4:	add	r3, r4, #20
   145d8:	mov	r2, r7
   145dc:	mov	r1, #0
   145e0:	mov	r0, r8
   145e4:	bl	14510 <__assert_fail@plt+0x31dc>
   145e8:	cmp	r0, #0
   145ec:	str	r0, [r6]
   145f0:	beq	14650 <__assert_fail@plt+0x331c>
   145f4:	str	r5, [r0]
   145f8:	ldr	r5, [r6]
   145fc:	ldrb	r3, [r5, #26]
   14600:	orr	r3, r3, #4
   14604:	strb	r3, [r5, #26]
   14608:	ldr	r3, [r4, #4]
   1460c:	cmp	r3, #0
   14610:	addne	r6, r5, #4
   14614:	bne	14630 <__assert_fail@plt+0x32fc>
   14618:	mov	r2, r7
   1461c:	ldr	r3, [r4, #8]
   14620:	cmp	r3, #0
   14624:	cmpne	r2, r3
   14628:	beq	14638 <__assert_fail@plt+0x3304>
   1462c:	add	r6, r5, #8
   14630:	mov	r4, r3
   14634:	b	145d4 <__assert_fail@plt+0x32a0>
   14638:	ldr	r3, [r4]
   1463c:	ldr	r5, [r5]
   14640:	cmp	r3, #0
   14644:	mov	r2, r4
   14648:	bne	14658 <__assert_fail@plt+0x3324>
   1464c:	ldr	r0, [sp, #4]
   14650:	add	sp, sp, #8
   14654:	pop	{r4, r5, r6, r7, r8, pc}
   14658:	mov	r4, r3
   1465c:	b	1461c <__assert_fail@plt+0x32e8>
   14660:	mov	ip, #0
   14664:	push	{r0, r1, r2, lr}
   14668:	str	ip, [sp, #4]
   1466c:	strb	r3, [sp, #4]
   14670:	mov	r3, sp
   14674:	str	ip, [sp]
   14678:	bl	14510 <__assert_fail@plt+0x31dc>
   1467c:	add	sp, sp, #12
   14680:	pop	{pc}		; (ldr pc, [sp], #4)
   14684:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14688:	ldr	r9, [r1]
   1468c:	ldr	r4, [r2, #4]
   14690:	ldrb	r1, [r1, #28]
   14694:	adds	r3, r4, #0
   14698:	movne	r3, #1
   1469c:	ands	r3, r3, r1, lsr #4
   146a0:	beq	146c0 <__assert_fail@plt+0x338c>
   146a4:	ldr	r1, [r2, #20]
   146a8:	cmp	r1, #31
   146ac:	bgt	14758 <__assert_fail@plt+0x3424>
   146b0:	ldr	r3, [r9, #80]	; 0x50
   146b4:	lsr	r3, r3, r1
   146b8:	tst	r3, #1
   146bc:	beq	14758 <__assert_fail@plt+0x3424>
   146c0:	mov	sl, r2
   146c4:	mov	r2, #0
   146c8:	mov	r1, r2
   146cc:	mov	r3, #8
   146d0:	mov	r7, r0
   146d4:	mov	r0, r9
   146d8:	bl	14660 <__assert_fail@plt+0x332c>
   146dc:	mov	r2, #0
   146e0:	mov	r3, #9
   146e4:	mov	r1, r2
   146e8:	mov	r6, r0
   146ec:	mov	r0, r9
   146f0:	bl	14660 <__assert_fail@plt+0x332c>
   146f4:	cmp	r4, #0
   146f8:	mov	r5, r0
   146fc:	moveq	r8, r0
   14700:	beq	1471c <__assert_fail@plt+0x33e8>
   14704:	mov	r2, r0
   14708:	mov	r3, #16
   1470c:	mov	r1, r4
   14710:	mov	r0, r9
   14714:	bl	14660 <__assert_fail@plt+0x332c>
   14718:	mov	r8, r0
   1471c:	mov	r3, #16
   14720:	mov	r2, r8
   14724:	mov	r1, r6
   14728:	mov	r0, r9
   1472c:	bl	14660 <__assert_fail@plt+0x332c>
   14730:	cmp	r8, #0
   14734:	cmpne	r0, #0
   14738:	mov	r4, r0
   1473c:	beq	1474c <__assert_fail@plt+0x3418>
   14740:	cmp	r5, #0
   14744:	cmpne	r6, #0
   14748:	bne	14760 <__assert_fail@plt+0x342c>
   1474c:	mov	r4, #0
   14750:	mov	r3, #12
   14754:	str	r3, [r7]
   14758:	mov	r0, r4
   1475c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14760:	ldr	r3, [sl, #20]
   14764:	str	r3, [r5, #20]
   14768:	str	r3, [r6, #20]
   1476c:	ldrb	r3, [sl, #26]
   14770:	ldrb	r2, [r5, #26]
   14774:	and	r3, r3, #8
   14778:	bic	r2, r2, #8
   1477c:	orr	r2, r3, r2
   14780:	strb	r2, [r5, #26]
   14784:	ldrb	r2, [r6, #26]
   14788:	bic	r2, r2, #8
   1478c:	orr	r3, r3, r2
   14790:	strb	r3, [r6, #26]
   14794:	b	14758 <__assert_fail@plt+0x3424>
   14798:	push	{r0, r1, r2, r4, r5, lr}
   1479c:	mov	r3, #0
   147a0:	ldr	r2, [r1, #4]
   147a4:	mov	r5, r0
   147a8:	cmp	r2, r3
   147ac:	mov	r4, r1
   147b0:	str	r3, [sp, #4]
   147b4:	beq	147dc <__assert_fail@plt+0x34a8>
   147b8:	ldrb	r3, [r2, #24]
   147bc:	cmp	r3, #17
   147c0:	bne	147dc <__assert_fail@plt+0x34a8>
   147c4:	mov	r1, r0
   147c8:	add	r0, sp, #4
   147cc:	bl	14684 <__assert_fail@plt+0x3350>
   147d0:	cmp	r0, #0
   147d4:	str	r0, [r4, #4]
   147d8:	strne	r4, [r0]
   147dc:	ldr	r2, [r4, #8]
   147e0:	cmp	r2, #0
   147e4:	beq	1480c <__assert_fail@plt+0x34d8>
   147e8:	ldrb	r3, [r2, #24]
   147ec:	cmp	r3, #17
   147f0:	bne	1480c <__assert_fail@plt+0x34d8>
   147f4:	mov	r1, r5
   147f8:	add	r0, sp, #4
   147fc:	bl	14684 <__assert_fail@plt+0x3350>
   14800:	cmp	r0, #0
   14804:	str	r0, [r4, #8]
   14808:	strne	r4, [r0]
   1480c:	ldr	r0, [sp, #4]
   14810:	add	sp, sp, #12
   14814:	pop	{r4, r5, pc}
   14818:	mov	r3, #1
   1481c:	push	{r4, r5, r6, lr}
   14820:	mov	r4, r0
   14824:	str	r3, [r0]
   14828:	str	r3, [r0, #4]
   1482c:	mov	r0, #4
   14830:	mov	r5, r1
   14834:	bl	1fd58 <__assert_fail@plt+0xea24>
   14838:	cmp	r0, #0
   1483c:	str	r0, [r4, #8]
   14840:	streq	r0, [r4, #4]
   14844:	streq	r0, [r4]
   14848:	strne	r5, [r0]
   1484c:	moveq	r0, #12
   14850:	movne	r0, #0
   14854:	pop	{r4, r5, r6, pc}
   14858:	mov	r3, #0
   1485c:	push	{r4, lr}
   14860:	mov	r4, r0
   14864:	str	r1, [r0]
   14868:	str	r3, [r0, #4]
   1486c:	lsl	r0, r1, #2
   14870:	bl	1fd58 <__assert_fail@plt+0xea24>
   14874:	cmp	r0, #0
   14878:	str	r0, [r4, #8]
   1487c:	moveq	r0, #12
   14880:	movne	r0, #0
   14884:	pop	{r4, pc}
   14888:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1488c:	mov	r7, r1
   14890:	mov	r9, r0
   14894:	str	r2, [r7], #16
   14898:	mov	r5, r1
   1489c:	mov	r0, r7
   148a0:	ldr	r1, [r1, #8]
   148a4:	mov	r4, r2
   148a8:	bl	14858 <__assert_fail@plt+0x3524>
   148ac:	subs	r8, r0, #0
   148b0:	moveq	r6, r8
   148b4:	beq	148e4 <__assert_fail@plt+0x35b0>
   148b8:	mov	r8, #12
   148bc:	mov	r0, r8
   148c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148c4:	ldr	r3, [r5, #12]
   148c8:	ldr	r1, [r3, r6, lsl #2]
   148cc:	ldr	r3, [r9]
   148d0:	add	r3, r3, r1, lsl #3
   148d4:	ldrb	r3, [r3, #4]
   148d8:	tst	r3, #8
   148dc:	beq	14954 <__assert_fail@plt+0x3620>
   148e0:	add	r6, r6, #1
   148e4:	ldr	r3, [r5, #8]
   148e8:	cmp	r6, r3
   148ec:	blt	148c4 <__assert_fail@plt+0x3590>
   148f0:	ldr	r3, [r9, #68]	; 0x44
   148f4:	ldr	r7, [r9, #32]
   148f8:	and	r4, r4, r3
   148fc:	mov	r3, #12
   14900:	mul	r4, r3, r4
   14904:	add	r6, r7, r4
   14908:	ldr	r1, [r7, r4]
   1490c:	ldr	r3, [r6, #4]
   14910:	cmp	r3, r1
   14914:	bgt	1493c <__assert_fail@plt+0x3608>
   14918:	add	r1, r1, #1
   1491c:	ldr	r0, [r6, #8]
   14920:	lsl	r9, r1, #1
   14924:	lsl	r1, r1, #3
   14928:	bl	1fd98 <__assert_fail@plt+0xea64>
   1492c:	cmp	r0, #0
   14930:	beq	148b8 <__assert_fail@plt+0x3584>
   14934:	str	r0, [r6, #8]
   14938:	str	r9, [r6, #4]
   1493c:	ldr	r3, [r7, r4]
   14940:	ldr	r2, [r6, #8]
   14944:	add	r1, r3, #1
   14948:	str	r1, [r7, r4]
   1494c:	str	r5, [r2, r3, lsl #2]
   14950:	b	148bc <__assert_fail@plt+0x3588>
   14954:	mov	r0, r7
   14958:	bl	144b8 <__assert_fail@plt+0x3184>
   1495c:	cmp	r0, #0
   14960:	bne	148e0 <__assert_fail@plt+0x35ac>
   14964:	b	148b8 <__assert_fail@plt+0x3584>
   14968:	mov	r2, #32
   1496c:	mov	r1, #0
   14970:	b	11238 <memset@plt>
   14974:	push	{r4, r5, r6, r7, r8, r9, lr}
   14978:	sub	sp, sp, #84	; 0x54
   1497c:	ldr	r8, [r0, #36]	; 0x24
   14980:	ldr	r3, [r0, #48]	; 0x30
   14984:	ldr	r5, [r0, #28]
   14988:	cmp	r8, r3
   1498c:	mov	r4, r0
   14990:	movge	r8, r3
   14994:	add	r7, sp, #8
   14998:	add	r9, sp, #16
   1499c:	cmp	r5, r8
   149a0:	bge	14ab8 <__assert_fail@plt+0x3784>
   149a4:	add	r6, r4, #16
   149a8:	ldr	r3, [r4, #64]	; 0x40
   149ac:	ldm	r6, {r0, r1}
   149b0:	cmp	r3, #0
   149b4:	sub	r2, r8, r5
   149b8:	stm	r7, {r0, r1}
   149bc:	movne	r3, #0
   149c0:	bne	14a08 <__assert_fail@plt+0x36d4>
   149c4:	ldr	r1, [r4, #24]
   149c8:	add	r3, r5, r1
   149cc:	ldr	r1, [r4]
   149d0:	add	r1, r1, r3
   149d4:	b	14a20 <__assert_fail@plt+0x36ec>
   149d8:	ldr	r1, [r4]
   149dc:	ldr	r0, [r4, #24]
   149e0:	add	r1, r1, r5
   149e4:	add	r1, r1, r3
   149e8:	ldrb	r1, [r1, r0]
   149ec:	ldr	r0, [r4, #64]	; 0x40
   149f0:	ldrb	r0, [r0, r1]
   149f4:	ldr	r1, [r4, #4]
   149f8:	add	r1, r1, r5
   149fc:	strb	r0, [r1, r3]
   14a00:	strb	r0, [r9, r3]
   14a04:	add	r3, r3, #1
   14a08:	ldr	r1, [r4, #80]	; 0x50
   14a0c:	cmp	r2, r1
   14a10:	movlt	r1, r2
   14a14:	cmp	r3, r1
   14a18:	blt	149d8 <__assert_fail@plt+0x36a4>
   14a1c:	mov	r1, r9
   14a20:	mov	r3, r6
   14a24:	add	r0, sp, #4
   14a28:	bl	1ffa4 <__assert_fail@plt+0xec70>
   14a2c:	sub	r3, r0, #1
   14a30:	cmn	r3, #3
   14a34:	bhi	14a50 <__assert_fail@plt+0x371c>
   14a38:	cmn	r0, #2
   14a3c:	bne	14a80 <__assert_fail@plt+0x374c>
   14a40:	ldr	r2, [r4, #36]	; 0x24
   14a44:	ldr	r3, [r4, #48]	; 0x30
   14a48:	cmp	r2, r3
   14a4c:	blt	14ab0 <__assert_fail@plt+0x377c>
   14a50:	ldr	r3, [r4]
   14a54:	ldr	r2, [r4, #24]
   14a58:	add	r3, r3, r5
   14a5c:	ldm	r7, {r0, r1}
   14a60:	ldrb	r3, [r3, r2]
   14a64:	ldr	r2, [r4, #64]	; 0x40
   14a68:	cmp	r2, #0
   14a6c:	str	r3, [sp, #4]
   14a70:	ldrbne	r3, [r2, r3]
   14a74:	stm	r6, {r0, r1}
   14a78:	mov	r0, #1
   14a7c:	strne	r3, [sp, #4]
   14a80:	ldr	r2, [r4, #8]
   14a84:	ldr	r3, [sp, #4]
   14a88:	add	r0, r5, r0
   14a8c:	str	r3, [r2, r5, lsl #2]
   14a90:	mvn	r1, #0
   14a94:	add	r3, r5, #1
   14a98:	cmp	r3, r0
   14a9c:	mov	r5, r3
   14aa0:	bge	1499c <__assert_fail@plt+0x3668>
   14aa4:	str	r1, [r2, r3, lsl #2]
   14aa8:	add	r3, r3, #1
   14aac:	b	14a98 <__assert_fail@plt+0x3764>
   14ab0:	ldm	r7, {r0, r1}
   14ab4:	stm	r6, {r0, r1}
   14ab8:	str	r5, [r4, #28]
   14abc:	str	r5, [r4, #32]
   14ac0:	add	sp, sp, #84	; 0x54
   14ac4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14acc:	mov	r4, r0
   14ad0:	ldr	r3, [r0, #48]	; 0x30
   14ad4:	ldr	r7, [r0, #36]	; 0x24
   14ad8:	sub	sp, sp, #100	; 0x64
   14adc:	cmp	r7, r3
   14ae0:	movge	r7, r3
   14ae4:	ldrb	r3, [r0, #74]	; 0x4a
   14ae8:	ldr	r6, [r0, #28]
   14aec:	cmp	r3, #0
   14af0:	bne	14b14 <__assert_fail@plt+0x37e0>
   14af4:	ldr	r3, [r0, #64]	; 0x40
   14af8:	cmp	r3, #0
   14afc:	bne	14b14 <__assert_fail@plt+0x37e0>
   14b00:	ldrb	r3, [r0, #76]	; 0x4c
   14b04:	cmp	r3, #0
   14b08:	moveq	r5, r6
   14b0c:	addeq	r8, sp, #24
   14b10:	beq	14b74 <__assert_fail@plt+0x3840>
   14b14:	ldr	r5, [r4, #32]
   14b18:	cmp	r6, r7
   14b1c:	blt	14c28 <__assert_fail@plt+0x38f4>
   14b20:	b	14cf8 <__assert_fail@plt+0x39c4>
   14b24:	ldr	fp, [r4]
   14b28:	ldr	sl, [r4, #24]
   14b2c:	add	r3, fp, r5
   14b30:	add	r6, r4, #16
   14b34:	ldrb	r9, [r3, sl]
   14b38:	tst	r9, #128	; 0x80
   14b3c:	bne	14b80 <__assert_fail@plt+0x384c>
   14b40:	mov	r0, r6
   14b44:	bl	110dc <mbsinit@plt>
   14b48:	cmp	r0, #0
   14b4c:	beq	14b80 <__assert_fail@plt+0x384c>
   14b50:	mov	r0, r9
   14b54:	bl	112ec <towupper@plt>
   14b58:	bics	r3, r0, #127	; 0x7f
   14b5c:	bne	14b80 <__assert_fail@plt+0x384c>
   14b60:	ldr	r3, [r4, #4]
   14b64:	strb	r0, [r3, r5]
   14b68:	ldr	r3, [r4, #8]
   14b6c:	str	r0, [r3, r5, lsl #2]
   14b70:	add	r5, r5, #1
   14b74:	cmp	r5, r7
   14b78:	blt	14b24 <__assert_fail@plt+0x37f0>
   14b7c:	b	14d64 <__assert_fail@plt+0x3a30>
   14b80:	ldm	r6, {r0, r1}
   14b84:	mov	r3, r6
   14b88:	sub	r2, r7, r5
   14b8c:	stm	r8, {r0, r1}
   14b90:	add	r1, sl, r5
   14b94:	add	r1, fp, r1
   14b98:	add	r0, sp, #20
   14b9c:	str	r5, [sp, #4]
   14ba0:	bl	1ffa4 <__assert_fail@plt+0xec70>
   14ba4:	sub	r3, r0, #1
   14ba8:	cmn	r3, #4
   14bac:	mov	sl, r0
   14bb0:	bhi	14d1c <__assert_fail@plt+0x39e8>
   14bb4:	ldr	r9, [sp, #20]
   14bb8:	mov	r0, r9
   14bbc:	bl	112ec <towupper@plt>
   14bc0:	cmp	r9, r0
   14bc4:	mov	r6, r0
   14bc8:	beq	14d00 <__assert_fail@plt+0x39cc>
   14bcc:	mov	r1, r0
   14bd0:	mov	r2, r8
   14bd4:	add	r0, sp, #32
   14bd8:	bl	11034 <wcrtomb@plt>
   14bdc:	cmp	sl, r0
   14be0:	bne	14c24 <__assert_fail@plt+0x38f0>
   14be4:	ldr	r0, [r4, #4]
   14be8:	mov	r2, sl
   14bec:	add	r1, sp, #32
   14bf0:	add	r0, r0, r5
   14bf4:	bl	110ac <memcpy@plt>
   14bf8:	ldr	r2, [r4, #8]
   14bfc:	add	sl, r5, sl
   14c00:	add	r3, r5, #1
   14c04:	mvn	r1, #0
   14c08:	str	r6, [r2, r5, lsl #2]
   14c0c:	cmp	r3, sl
   14c10:	mov	r5, r3
   14c14:	bge	14b74 <__assert_fail@plt+0x3840>
   14c18:	str	r1, [r2, r3, lsl #2]
   14c1c:	add	r3, r3, #1
   14c20:	b	14c0c <__assert_fail@plt+0x38d8>
   14c24:	mov	r6, r5
   14c28:	add	r3, r4, #16
   14c2c:	ldr	ip, [r4, #64]	; 0x40
   14c30:	ldm	r3, {r0, r1}
   14c34:	add	sl, sp, #24
   14c38:	cmp	ip, #0
   14c3c:	sub	r2, r7, r6
   14c40:	str	r3, [sp, #4]
   14c44:	stm	sl, {r0, r1}
   14c48:	beq	14d9c <__assert_fail@plt+0x3a68>
   14c4c:	ldr	r0, [r4, #80]	; 0x50
   14c50:	mov	r3, #0
   14c54:	cmp	r2, r0
   14c58:	movlt	r0, r2
   14c5c:	add	r9, sp, #32
   14c60:	cmp	r3, r0
   14c64:	blt	14d78 <__assert_fail@plt+0x3a44>
   14c68:	ldr	r3, [sp, #4]
   14c6c:	mov	r1, r9
   14c70:	add	r0, sp, #20
   14c74:	bl	1ffa4 <__assert_fail@plt+0xec70>
   14c78:	sub	r3, r0, #1
   14c7c:	cmn	r3, #4
   14c80:	mov	r8, r0
   14c84:	str	r3, [sp, #8]
   14c88:	bhi	14f20 <__assert_fail@plt+0x3bec>
   14c8c:	ldr	r3, [sp, #20]
   14c90:	mov	r0, r3
   14c94:	str	r3, [sp, #12]
   14c98:	bl	112ec <towupper@plt>
   14c9c:	ldr	r3, [sp, #12]
   14ca0:	cmp	r3, r0
   14ca4:	mov	fp, r0
   14ca8:	beq	14eac <__assert_fail@plt+0x3b78>
   14cac:	mov	r1, r0
   14cb0:	mov	r2, sl
   14cb4:	add	r0, sp, #32
   14cb8:	bl	11034 <wcrtomb@plt>
   14cbc:	cmp	r8, r0
   14cc0:	mov	r3, r0
   14cc4:	moveq	r2, r8
   14cc8:	ldreq	r0, [r4, #4]
   14ccc:	addeq	r1, sp, #32
   14cd0:	beq	14eb8 <__assert_fail@plt+0x3b84>
   14cd4:	cmn	r3, #1
   14cd8:	beq	14eac <__assert_fail@plt+0x3b78>
   14cdc:	ldr	r0, [r4, #36]	; 0x24
   14ce0:	add	r9, r6, r3
   14ce4:	cmp	r9, r0
   14ce8:	bls	14db0 <__assert_fail@plt+0x3a7c>
   14cec:	ldm	sl, {r0, r1}
   14cf0:	ldr	r3, [sp, #4]
   14cf4:	stm	r3, {r0, r1}
   14cf8:	str	r6, [r4, #28]
   14cfc:	b	14d68 <__assert_fail@plt+0x3a34>
   14d00:	ldr	r3, [r4, #24]
   14d04:	ldr	r1, [r4]
   14d08:	add	r3, r5, r3
   14d0c:	ldr	r0, [r4, #4]
   14d10:	mov	r2, sl
   14d14:	add	r1, r1, r3
   14d18:	b	14bf0 <__assert_fail@plt+0x38bc>
   14d1c:	cmn	r3, #3
   14d20:	bne	14d34 <__assert_fail@plt+0x3a00>
   14d24:	ldr	r2, [r4, #36]	; 0x24
   14d28:	ldr	r3, [r4, #48]	; 0x30
   14d2c:	cmp	r2, r3
   14d30:	blt	14d5c <__assert_fail@plt+0x3a28>
   14d34:	ldr	r3, [r4, #4]
   14d38:	ldr	r2, [sp, #4]
   14d3c:	cmn	sl, #1
   14d40:	strb	r9, [r3, r5]
   14d44:	ldr	r3, [r4, #8]
   14d48:	add	r5, r5, #1
   14d4c:	str	r9, [r3, r2, lsl #2]
   14d50:	ldmeq	r8, {r0, r1}
   14d54:	stmeq	r6, {r0, r1}
   14d58:	b	14b74 <__assert_fail@plt+0x3840>
   14d5c:	ldm	r8, {r0, r1}
   14d60:	stm	r6, {r0, r1}
   14d64:	str	r5, [r4, #28]
   14d68:	mov	r0, #0
   14d6c:	str	r5, [r4, #32]
   14d70:	add	sp, sp, #100	; 0x64
   14d74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d78:	ldr	r1, [r4]
   14d7c:	ldr	lr, [r4, #24]
   14d80:	add	r1, r1, r5
   14d84:	add	r1, r1, r3
   14d88:	ldrb	r1, [r1, lr]
   14d8c:	ldrb	r1, [ip, r1]
   14d90:	strb	r1, [r9, r3]
   14d94:	add	r3, r3, #1
   14d98:	b	14c60 <__assert_fail@plt+0x392c>
   14d9c:	ldr	r9, [r4, #24]
   14da0:	add	r3, r5, r9
   14da4:	ldr	r9, [r4]
   14da8:	add	r9, r9, r3
   14dac:	b	14c68 <__assert_fail@plt+0x3934>
   14db0:	ldr	r2, [r4, #12]
   14db4:	cmp	r2, #0
   14db8:	bne	14ddc <__assert_fail@plt+0x3aa8>
   14dbc:	lsl	r0, r0, #2
   14dc0:	str	r3, [sp, #4]
   14dc4:	bl	1fd58 <__assert_fail@plt+0xea24>
   14dc8:	ldr	r3, [sp, #4]
   14dcc:	cmp	r0, #0
   14dd0:	str	r0, [r4, #12]
   14dd4:	moveq	r0, #12
   14dd8:	beq	14d70 <__assert_fail@plt+0x3a3c>
   14ddc:	ldrb	r2, [r4, #76]	; 0x4c
   14de0:	cmp	r2, #0
   14de4:	beq	14e78 <__assert_fail@plt+0x3b44>
   14de8:	ldr	r0, [r4, #4]
   14dec:	mov	r2, r3
   14df0:	add	r1, sp, #32
   14df4:	add	r0, r0, r6
   14df8:	str	r3, [sp, #4]
   14dfc:	bl	110ac <memcpy@plt>
   14e00:	ldr	r1, [r4, #8]
   14e04:	ldr	r0, [r4, #12]
   14e08:	lsl	r2, r6, #2
   14e0c:	ldr	r3, [sp, #4]
   14e10:	add	ip, r1, r2
   14e14:	str	fp, [r1, r6, lsl #2]
   14e18:	mvn	lr, #0
   14e1c:	add	r1, r0, r2
   14e20:	mov	r2, #1
   14e24:	str	r5, [r0, r6, lsl #2]
   14e28:	cmp	r2, r3
   14e2c:	bcc	14e8c <__assert_fail@plt+0x3b58>
   14e30:	ldr	r2, [r4, #52]	; 0x34
   14e34:	ldr	r7, [r4, #48]	; 0x30
   14e38:	cmp	r5, r2
   14e3c:	sub	r3, r3, r8
   14e40:	ldrlt	r2, [r4, #56]	; 0x38
   14e44:	add	r7, r3, r7
   14e48:	addlt	r3, r2, r3
   14e4c:	strlt	r3, [r4, #56]	; 0x38
   14e50:	ldr	r3, [r4, #36]	; 0x24
   14e54:	str	r7, [r4, #48]	; 0x30
   14e58:	cmp	r7, r3
   14e5c:	movge	r7, r3
   14e60:	mov	r6, r9
   14e64:	add	r5, r5, r8
   14e68:	b	14b18 <__assert_fail@plt+0x37e4>
   14e6c:	ldr	r1, [r4, #12]
   14e70:	str	r2, [r1, r2, lsl #2]
   14e74:	add	r2, r2, #1
   14e78:	cmp	r2, r6
   14e7c:	bne	14e6c <__assert_fail@plt+0x3b38>
   14e80:	mov	r2, #1
   14e84:	strb	r2, [r4, #76]	; 0x4c
   14e88:	b	14de8 <__assert_fail@plt+0x3ab4>
   14e8c:	ldr	r0, [sp, #8]
   14e90:	cmp	r2, r8
   14e94:	movcc	r0, r2
   14e98:	add	r0, r5, r0
   14e9c:	str	r0, [r1, r2, lsl #2]
   14ea0:	str	lr, [ip, r2, lsl #2]
   14ea4:	add	r2, r2, #1
   14ea8:	b	14e28 <__assert_fail@plt+0x3af4>
   14eac:	ldr	r0, [r4, #4]
   14eb0:	mov	r2, r8
   14eb4:	mov	r1, r9
   14eb8:	add	r0, r0, r6
   14ebc:	bl	110ac <memcpy@plt>
   14ec0:	ldrb	r3, [r4, #76]	; 0x4c
   14ec4:	cmp	r3, #0
   14ec8:	bne	14efc <__assert_fail@plt+0x3bc8>
   14ecc:	ldr	r2, [r4, #8]
   14ed0:	add	r5, r5, r8
   14ed4:	add	r3, r6, #1
   14ed8:	add	r8, r6, r8
   14edc:	mvn	r1, #0
   14ee0:	str	fp, [r2, r6, lsl #2]
   14ee4:	cmp	r3, r8
   14ee8:	mov	r6, r3
   14eec:	bge	14b18 <__assert_fail@plt+0x37e4>
   14ef0:	str	r1, [r2, r3, lsl #2]
   14ef4:	add	r3, r3, #1
   14ef8:	b	14ee4 <__assert_fail@plt+0x3bb0>
   14efc:	ldr	r2, [r4, #12]
   14f00:	mov	r3, #0
   14f04:	add	r2, r2, r6, lsl #2
   14f08:	add	r1, r5, r3
   14f0c:	str	r1, [r2, r3, lsl #2]
   14f10:	add	r3, r3, #1
   14f14:	cmp	r8, r3
   14f18:	bne	14f08 <__assert_fail@plt+0x3bd4>
   14f1c:	b	14ecc <__assert_fail@plt+0x3b98>
   14f20:	sub	r3, r0, #1
   14f24:	cmn	r3, #3
   14f28:	bne	14f3c <__assert_fail@plt+0x3c08>
   14f2c:	ldr	r2, [r4, #36]	; 0x24
   14f30:	ldr	r3, [r4, #48]	; 0x30
   14f34:	cmp	r2, r3
   14f38:	blt	14cec <__assert_fail@plt+0x39b8>
   14f3c:	ldr	r3, [r4]
   14f40:	ldr	r2, [r4, #24]
   14f44:	add	r3, r3, r5
   14f48:	mov	r1, r6
   14f4c:	ldrb	r3, [r3, r2]
   14f50:	ldr	r2, [r4, #64]	; 0x40
   14f54:	cmp	r2, #0
   14f58:	ldrbne	r3, [r2, r3]
   14f5c:	ldr	r2, [r4, #4]
   14f60:	strb	r3, [r2, r6]
   14f64:	ldrb	r2, [r4, #76]	; 0x4c
   14f68:	cmp	r2, #0
   14f6c:	ldrne	r2, [r4, #12]
   14f70:	strne	r5, [r2, r6, lsl #2]
   14f74:	ldr	r2, [r4, #8]
   14f78:	cmn	r8, #1
   14f7c:	add	r5, r5, #1
   14f80:	str	r3, [r2, r1, lsl #2]
   14f84:	ldreq	r3, [sp, #4]
   14f88:	ldmeq	sl, {r0, r1}
   14f8c:	add	r6, r6, #1
   14f90:	stmeq	r3, {r0, r1}
   14f94:	b	14b18 <__assert_fail@plt+0x37e4>
   14f98:	push	{r4, r5, r6, lr}
   14f9c:	mov	r4, r0
   14fa0:	ldr	r3, [r0, #36]	; 0x24
   14fa4:	ldr	r6, [r0, #48]	; 0x30
   14fa8:	ldr	r5, [r0, #28]
   14fac:	cmp	r3, r6
   14fb0:	movlt	r6, r3
   14fb4:	cmp	r5, r6
   14fb8:	blt	14fc8 <__assert_fail@plt+0x3c94>
   14fbc:	str	r5, [r4, #28]
   14fc0:	str	r5, [r4, #32]
   14fc4:	pop	{r4, r5, r6, pc}
   14fc8:	ldr	r3, [r4]
   14fcc:	ldr	r2, [r4, #24]
   14fd0:	add	r3, r3, r5
   14fd4:	ldrb	r0, [r3, r2]
   14fd8:	ldr	r3, [r4, #64]	; 0x40
   14fdc:	cmp	r3, #0
   14fe0:	ldrbne	r0, [r3, r0]
   14fe4:	bl	112a4 <toupper@plt>
   14fe8:	ldr	r3, [r4, #4]
   14fec:	strb	r0, [r3, r5]
   14ff0:	add	r5, r5, #1
   14ff4:	b	14fb4 <__assert_fail@plt+0x3c80>
   14ff8:	ldr	r3, [r0, #36]	; 0x24
   14ffc:	push	{r4, r5, r6, lr}
   15000:	cmn	r3, #-536870910	; 0xe0000002
   15004:	bls	15014 <__assert_fail@plt+0x3ce0>
   15008:	mov	r5, #12
   1500c:	mov	r0, r5
   15010:	pop	{r4, r5, r6, pc}
   15014:	ldr	r2, [r0, #48]	; 0x30
   15018:	lsl	r3, r3, #1
   1501c:	cmp	r3, r2
   15020:	movge	r3, r2
   15024:	cmp	r3, r1
   15028:	movge	r1, r3
   1502c:	mov	r4, r0
   15030:	bl	14424 <__assert_fail@plt+0x30f0>
   15034:	subs	r5, r0, #0
   15038:	bne	1500c <__assert_fail@plt+0x3cd8>
   1503c:	ldr	r0, [r4, #100]	; 0x64
   15040:	cmp	r0, #0
   15044:	beq	15064 <__assert_fail@plt+0x3d30>
   15048:	ldr	r1, [r4, #36]	; 0x24
   1504c:	add	r1, r1, #1
   15050:	lsl	r1, r1, #2
   15054:	bl	1fd98 <__assert_fail@plt+0xea64>
   15058:	cmp	r0, #0
   1505c:	beq	15008 <__assert_fail@plt+0x3cd4>
   15060:	str	r0, [r4, #100]	; 0x64
   15064:	ldrb	r3, [r4, #72]	; 0x48
   15068:	cmp	r3, #0
   1506c:	ldr	r3, [r4, #80]	; 0x50
   15070:	beq	15090 <__assert_fail@plt+0x3d5c>
   15074:	cmp	r3, #1
   15078:	mov	r0, r4
   1507c:	ble	15088 <__assert_fail@plt+0x3d54>
   15080:	pop	{r4, r5, r6, lr}
   15084:	b	14ac8 <__assert_fail@plt+0x3794>
   15088:	bl	14f98 <__assert_fail@plt+0x3c64>
   1508c:	b	1500c <__assert_fail@plt+0x3cd8>
   15090:	cmp	r3, #1
   15094:	ble	150a4 <__assert_fail@plt+0x3d70>
   15098:	mov	r0, r4
   1509c:	bl	14974 <__assert_fail@plt+0x3640>
   150a0:	b	1500c <__assert_fail@plt+0x3cd8>
   150a4:	ldr	r3, [r4, #64]	; 0x40
   150a8:	cmp	r3, #0
   150ac:	beq	1500c <__assert_fail@plt+0x3cd8>
   150b0:	mov	r0, r4
   150b4:	bl	13db8 <__assert_fail@plt+0x2a84>
   150b8:	b	1500c <__assert_fail@plt+0x3cd8>
   150bc:	push	{r4, lr}
   150c0:	mov	r4, r0
   150c4:	ldr	r0, [r0]
   150c8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   150cc:	ldr	r0, [r4, #4]
   150d0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   150d4:	ldr	r0, [r4, #8]
   150d8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   150dc:	ldr	r0, [r4, #12]
   150e0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   150e4:	mov	r0, r4
   150e8:	pop	{r4, lr}
   150ec:	b	1ff1c <__assert_fail@plt+0xebe8>
   150f0:	ldr	r2, [r0, #4]
   150f4:	ldr	r3, [pc, #32]	; 1511c <__assert_fail@plt+0x3de8>
   150f8:	and	r3, r3, r2
   150fc:	cmp	r3, #6
   15100:	bne	1510c <__assert_fail@plt+0x3dd8>
   15104:	ldr	r0, [r0]
   15108:	b	150bc <__assert_fail@plt+0x3d88>
   1510c:	cmp	r3, #3
   15110:	bxne	lr
   15114:	ldr	r0, [r0]
   15118:	b	1ff1c <__assert_fail@plt+0xebe8>
   1511c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   15120:	add	r0, r1, #20
   15124:	push	{r4, lr}
   15128:	bl	150f0 <__assert_fail@plt+0x3dbc>
   1512c:	mov	r0, #0
   15130:	pop	{r4, pc}
   15134:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15138:	mov	r4, r0
   1513c:	ldr	r6, [r0, #4]
   15140:	ldr	r3, [r0, #8]
   15144:	stm	sp, {r1, r2}
   15148:	cmp	r3, r6
   1514c:	mov	r7, sp
   15150:	ldrb	r5, [sp, #4]
   15154:	bcc	15228 <__assert_fail@plt+0x3ef4>
   15158:	ldr	r3, [pc, #376]	; 152d8 <__assert_fail@plt+0x3fa4>
   1515c:	lsl	r8, r6, #1
   15160:	cmp	r8, r3
   15164:	bls	15174 <__assert_fail@plt+0x3e40>
   15168:	mvn	r0, #0
   1516c:	add	sp, sp, #12
   15170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15174:	lsl	r1, r6, #4
   15178:	ldr	r0, [r0]
   1517c:	bl	1fd98 <__assert_fail@plt+0xea64>
   15180:	cmp	r0, #0
   15184:	beq	15168 <__assert_fail@plt+0x3e34>
   15188:	lsl	r6, r6, #3
   1518c:	mov	r1, r6
   15190:	str	r0, [r4]
   15194:	ldr	r0, [r4, #12]
   15198:	bl	1fd98 <__assert_fail@plt+0xea64>
   1519c:	mov	r1, r6
   151a0:	mov	r6, #12
   151a4:	mul	r6, r6, r8
   151a8:	mov	sl, r0
   151ac:	ldr	r0, [r4, #16]
   151b0:	bl	1fd98 <__assert_fail@plt+0xea64>
   151b4:	mov	r1, r6
   151b8:	mov	fp, r0
   151bc:	ldr	r0, [r4, #20]
   151c0:	bl	1fd98 <__assert_fail@plt+0xea64>
   151c4:	mov	r1, r6
   151c8:	mov	r9, r0
   151cc:	ldr	r0, [r4, #24]
   151d0:	bl	1fd98 <__assert_fail@plt+0xea64>
   151d4:	cmp	fp, #0
   151d8:	cmpne	sl, #0
   151dc:	mov	r6, r0
   151e0:	beq	151f0 <__assert_fail@plt+0x3ebc>
   151e4:	cmp	r0, #0
   151e8:	cmpne	r9, #0
   151ec:	bne	15214 <__assert_fail@plt+0x3ee0>
   151f0:	mov	r0, sl
   151f4:	bl	1ff1c <__assert_fail@plt+0xebe8>
   151f8:	mov	r0, fp
   151fc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15200:	mov	r0, r9
   15204:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15208:	mov	r0, r6
   1520c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15210:	b	15168 <__assert_fail@plt+0x3e34>
   15214:	str	sl, [r4, #12]
   15218:	str	fp, [r4, #16]
   1521c:	str	r9, [r4, #20]
   15220:	str	r0, [r4, #24]
   15224:	str	r8, [r4, #4]
   15228:	ldr	ip, [r4, #8]
   1522c:	ldr	r3, [r4]
   15230:	ldm	r7, {r0, r1}
   15234:	add	r3, r3, ip, lsl #3
   15238:	cmp	r5, #5
   1523c:	stm	r3, {r0, r1}
   15240:	subne	r5, r5, #6
   15244:	bic	r1, r1, #261120	; 0x3fc00
   15248:	bic	r1, r1, #768	; 0x300
   1524c:	clzne	r5, r5
   15250:	str	r1, [r3, #4]
   15254:	lsrne	r5, r5, #5
   15258:	bne	1526c <__assert_fail@plt+0x3f38>
   1525c:	ldr	r5, [r4, #92]	; 0x5c
   15260:	cmp	r5, #1
   15264:	movle	r5, #0
   15268:	movgt	r5, #1
   1526c:	ldrb	r2, [r3, #6]
   15270:	bic	r2, r2, #16
   15274:	orr	r5, r2, r5, lsl #4
   15278:	strb	r5, [r3, #6]
   1527c:	ldr	r3, [r4, #12]
   15280:	mvn	r2, #0
   15284:	str	r2, [r3, ip, lsl #2]
   15288:	ldr	r1, [r4, #8]
   1528c:	mov	r2, #12
   15290:	ldr	ip, [r4, #20]
   15294:	mul	r1, r2, r1
   15298:	mov	r3, #0
   1529c:	add	r0, ip, r1
   152a0:	str	r3, [ip, r1]
   152a4:	str	r3, [r0, #4]
   152a8:	str	r3, [r0, #8]
   152ac:	ldr	r1, [r4, #8]
   152b0:	ldr	r0, [r4, #24]
   152b4:	mul	r2, r2, r1
   152b8:	add	r1, r0, r2
   152bc:	str	r3, [r0, r2]
   152c0:	str	r3, [r1, #4]
   152c4:	str	r3, [r1, #8]
   152c8:	ldr	r0, [r4, #8]
   152cc:	add	r3, r0, #1
   152d0:	str	r3, [r4, #8]
   152d4:	b	1516c <__assert_fail@plt+0x3e38>
   152d8:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   152dc:	ldr	r3, [r0]
   152e0:	push	{r4, r5, r6, r7, r8, lr}
   152e4:	lsl	r7, r1, #3
   152e8:	add	r3, r3, r7
   152ec:	mov	r6, r1
   152f0:	mov	r4, r2
   152f4:	ldm	r3, {r1, r2}
   152f8:	mov	r5, r0
   152fc:	bl	15134 <__assert_fail@plt+0x3e00>
   15300:	cmn	r0, #1
   15304:	popeq	{r4, r5, r6, r7, r8, pc}
   15308:	ldr	lr, [r5]
   1530c:	ldr	ip, [pc, #80]	; 15364 <__assert_fail@plt+0x4030>
   15310:	add	r1, lr, r0, lsl #3
   15314:	and	r2, r4, ip
   15318:	ldr	r3, [r1, #4]
   1531c:	ldr	r4, [pc, #68]	; 15368 <__assert_fail@plt+0x4034>
   15320:	add	r7, lr, r7
   15324:	bic	r3, r3, r4
   15328:	orr	r3, r3, r2, lsl #8
   1532c:	str	r3, [r1, #4]
   15330:	ldr	lr, [r7, #4]
   15334:	bic	r3, r3, r4
   15338:	and	ip, ip, lr, lsr #8
   1533c:	orr	r2, r2, ip
   15340:	orr	r3, r3, r2, lsl #8
   15344:	str	r3, [r1, #4]
   15348:	lsr	r2, r3, #16
   1534c:	uxtb	r3, r2
   15350:	orr	r3, r3, #4
   15354:	strb	r3, [r1, #6]
   15358:	ldr	r3, [r5, #16]
   1535c:	str	r6, [r3, r0, lsl #2]
   15360:	pop	{r4, r5, r6, r7, r8, pc}
   15364:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15368:	andeq	pc, r3, r0, lsl #30
   1536c:	push	{r4, lr}
   15370:	mov	r4, r0
   15374:	ldr	r0, [r0, #24]
   15378:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1537c:	ldr	r0, [r4, #36]	; 0x24
   15380:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15384:	ldr	r3, [r4, #40]	; 0x28
   15388:	add	r2, r4, #4
   1538c:	cmp	r3, r2
   15390:	beq	153a4 <__assert_fail@plt+0x4070>
   15394:	ldr	r0, [r3, #8]
   15398:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1539c:	ldr	r0, [r4, #40]	; 0x28
   153a0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   153a4:	ldr	r0, [r4, #12]
   153a8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   153ac:	ldr	r0, [r4, #48]	; 0x30
   153b0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   153b4:	ldr	r0, [r4, #44]	; 0x2c
   153b8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   153bc:	mov	r0, r4
   153c0:	pop	{r4, lr}
   153c4:	b	1ff1c <__assert_fail@plt+0xebe8>
   153c8:	push	{r4, lr}
   153cc:	mov	r4, r0
   153d0:	ldr	r0, [r0, #8]
   153d4:	bl	1ff1c <__assert_fail@plt+0xebe8>
   153d8:	ldr	r0, [r4, #12]
   153dc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   153e0:	ldrb	r3, [r4, #75]	; 0x4b
   153e4:	cmp	r3, #0
   153e8:	popeq	{r4, pc}
   153ec:	ldr	r0, [r4, #4]
   153f0:	pop	{r4, lr}
   153f4:	b	1ff1c <__assert_fail@plt+0xebe8>
   153f8:	ldr	r3, [r0]
   153fc:	push	{r4, r5, r6, r7, r8, lr}
   15400:	cmp	r3, #0
   15404:	mov	r4, r0
   15408:	movne	r5, #0
   1540c:	bne	1549c <__assert_fail@plt+0x4168>
   15410:	ldr	r0, [r4, #12]
   15414:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15418:	mov	r5, #0
   1541c:	mov	r6, r5
   15420:	ldr	r3, [r4, #8]
   15424:	cmp	r3, r6
   15428:	bhi	154ac <__assert_fail@plt+0x4178>
   1542c:	ldr	r0, [r4, #20]
   15430:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15434:	ldr	r0, [r4, #24]
   15438:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1543c:	ldr	r0, [r4, #28]
   15440:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15444:	ldr	r0, [r4]
   15448:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1544c:	ldr	r3, [r4, #32]
   15450:	cmp	r3, #0
   15454:	movne	r6, #0
   15458:	movne	r8, #12
   1545c:	bne	15524 <__assert_fail@plt+0x41f0>
   15460:	ldr	r0, [r4, #32]
   15464:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15468:	ldr	r0, [r4, #60]	; 0x3c
   1546c:	ldr	r3, [pc, #220]	; 15550 <__assert_fail@plt+0x421c>
   15470:	cmp	r0, r3
   15474:	bne	15548 <__assert_fail@plt+0x4214>
   15478:	ldr	r0, [r4, #132]	; 0x84
   1547c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15480:	mov	r0, r4
   15484:	pop	{r4, r5, r6, r7, r8, lr}
   15488:	b	1ff1c <__assert_fail@plt+0xebe8>
   1548c:	ldr	r0, [r4]
   15490:	add	r0, r0, r5, lsl #3
   15494:	bl	150f0 <__assert_fail@plt+0x3dbc>
   15498:	add	r5, r5, #1
   1549c:	ldr	r3, [r4, #8]
   154a0:	cmp	r3, r5
   154a4:	bhi	1548c <__assert_fail@plt+0x4158>
   154a8:	b	15410 <__assert_fail@plt+0x40dc>
   154ac:	ldr	r3, [r4, #24]
   154b0:	cmp	r3, #0
   154b4:	beq	154c4 <__assert_fail@plt+0x4190>
   154b8:	add	r3, r3, r5
   154bc:	ldr	r0, [r3, #8]
   154c0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   154c4:	ldr	r3, [r4, #28]
   154c8:	cmp	r3, #0
   154cc:	beq	154dc <__assert_fail@plt+0x41a8>
   154d0:	add	r3, r3, r5
   154d4:	ldr	r0, [r3, #8]
   154d8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   154dc:	ldr	r3, [r4, #20]
   154e0:	cmp	r3, #0
   154e4:	beq	154f4 <__assert_fail@plt+0x41c0>
   154e8:	add	r3, r3, r5
   154ec:	ldr	r0, [r3, #8]
   154f0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   154f4:	add	r6, r6, #1
   154f8:	add	r5, r5, #12
   154fc:	b	15420 <__assert_fail@plt+0x40ec>
   15500:	ldr	r5, [r4, #32]
   15504:	mov	r7, #0
   15508:	mla	r5, r8, r6, r5
   1550c:	ldr	r3, [r5]
   15510:	cmp	r7, r3
   15514:	blt	15534 <__assert_fail@plt+0x4200>
   15518:	ldr	r0, [r5, #8]
   1551c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15520:	add	r6, r6, #1
   15524:	ldr	r3, [r4, #68]	; 0x44
   15528:	cmp	r3, r6
   1552c:	bcs	15500 <__assert_fail@plt+0x41cc>
   15530:	b	15460 <__assert_fail@plt+0x412c>
   15534:	ldr	r3, [r5, #8]
   15538:	ldr	r0, [r3, r7, lsl #2]
   1553c:	bl	1536c <__assert_fail@plt+0x4038>
   15540:	add	r7, r7, #1
   15544:	b	1550c <__assert_fail@plt+0x41d8>
   15548:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1554c:	b	15478 <__assert_fail@plt+0x4144>
   15550:	andeq	r1, r2, r8, lsl r5
   15554:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15558:	mov	r5, #0
   1555c:	mov	r6, r0
   15560:	mov	r8, r5
   15564:	ldr	r3, [r6, #124]	; 0x7c
   15568:	cmp	r5, r3
   1556c:	blt	1557c <__assert_fail@plt+0x4248>
   15570:	str	r8, [r6, #124]	; 0x7c
   15574:	str	r8, [r6, #108]	; 0x6c
   15578:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1557c:	ldr	r3, [r6, #132]	; 0x84
   15580:	mov	r7, #0
   15584:	ldr	r4, [r3, r5, lsl #2]
   15588:	ldr	r3, [r4, #16]
   1558c:	cmp	r7, r3
   15590:	blt	155c8 <__assert_fail@plt+0x4294>
   15594:	ldr	r0, [r4, #20]
   15598:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1559c:	ldr	r3, [r4, #8]
   155a0:	cmp	r3, #0
   155a4:	beq	155b8 <__assert_fail@plt+0x4284>
   155a8:	ldr	r0, [r3, #8]
   155ac:	bl	1ff1c <__assert_fail@plt+0xebe8>
   155b0:	ldr	r0, [r4, #8]
   155b4:	bl	1ff1c <__assert_fail@plt+0xebe8>
   155b8:	mov	r0, r4
   155bc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   155c0:	add	r5, r5, #1
   155c4:	b	15564 <__assert_fail@plt+0x4230>
   155c8:	ldr	r3, [r4, #20]
   155cc:	ldr	r9, [r3, r7, lsl #2]
   155d0:	add	r7, r7, #1
   155d4:	ldr	r0, [r9, #16]
   155d8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   155dc:	mov	r0, r9
   155e0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   155e4:	b	15588 <__assert_fail@plt+0x4254>
   155e8:	push	{r4, r5, r6, lr}
   155ec:	mov	r4, r0
   155f0:	ldr	r0, [r0, #8]
   155f4:	add	r5, r4, #12
   155f8:	cmp	r0, r5
   155fc:	beq	15604 <__assert_fail@plt+0x42d0>
   15600:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15604:	mov	r2, #0
   15608:	mov	r3, #16
   1560c:	str	r5, [r4, #8]
   15610:	stm	r4, {r2, r3}
   15614:	pop	{r4, r5, r6, pc}
   15618:	push	{r4, r5, r6, r7, r8, lr}
   1561c:	subs	r4, r0, #0
   15620:	movne	r5, #0
   15624:	movne	r7, #24
   15628:	bne	1565c <__assert_fail@plt+0x4328>
   1562c:	mov	r0, #0
   15630:	pop	{r4, r5, r6, r7, r8, pc}
   15634:	mul	r6, r7, r5
   15638:	ldr	r2, [r4, #8]
   1563c:	add	r5, r5, #1
   15640:	add	r2, r2, r6
   15644:	ldr	r0, [r2, #20]
   15648:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1564c:	ldr	r3, [r4, #8]
   15650:	add	r3, r3, r6
   15654:	ldr	r0, [r3, #8]
   15658:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1565c:	ldr	r3, [r4]
   15660:	cmp	r5, r3
   15664:	blt	15634 <__assert_fail@plt+0x4300>
   15668:	ldr	r0, [r4, #8]
   1566c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   15670:	b	1562c <__assert_fail@plt+0x42f8>
   15674:	mov	r3, r1
   15678:	ldr	r2, [r1, #28]
   1567c:	ldrb	r1, [r1, #24]
   15680:	sub	r1, r1, #2
   15684:	cmp	r1, #14
   15688:	ldrls	pc, [pc, r1, lsl #2]
   1568c:	b	15798 <__assert_fail@plt+0x4464>
   15690:	andeq	r5, r1, r8, lsr #15
   15694:	muleq	r1, r8, r7
   15698:	andeq	r5, r1, r4, ror r7
   1569c:	muleq	r1, r8, r7
   156a0:	muleq	r1, r8, r7
   156a4:	muleq	r1, r8, r7
   156a8:	andeq	r5, r1, ip, asr r7
   156ac:	andeq	r5, r1, ip, asr r7
   156b0:	andeq	r5, r1, ip, asr #13
   156b4:	andeq	r5, r1, ip, asr #13
   156b8:	andeq	r5, r1, ip, asr r7
   156bc:	muleq	r1, r8, r7
   156c0:	muleq	r1, r8, r7
   156c4:	muleq	r1, r8, r7
   156c8:	andeq	r5, r1, r8, lsr #15
   156cc:	ldrb	r1, [r0, #88]	; 0x58
   156d0:	push	{r4, r5, r6, r7, r8, lr}
   156d4:	mov	r4, #12
   156d8:	orr	r1, r1, #1
   156dc:	strb	r1, [r0, #88]	; 0x58
   156e0:	ldr	r1, [r3, #4]
   156e4:	mul	r2, r4, r2
   156e8:	cmp	r1, #0
   156ec:	mov	r7, #2
   156f0:	ldreq	r1, [r3, #16]
   156f4:	ldrne	r1, [r1, #12]
   156f8:	ldr	r8, [r1, #28]
   156fc:	ldr	r1, [r3, #8]
   15700:	cmp	r1, #0
   15704:	ldrne	r3, [r1, #12]
   15708:	ldreq	r3, [r3, #16]
   1570c:	ldr	r5, [r3, #28]
   15710:	ldr	r3, [r0, #20]
   15714:	mov	r0, #8
   15718:	add	r6, r3, r2
   1571c:	str	r7, [r3, r2]
   15720:	bl	1fd58 <__assert_fail@plt+0xea24>
   15724:	cmp	r0, #0
   15728:	str	r0, [r6, #8]
   1572c:	beq	157b0 <__assert_fail@plt+0x447c>
   15730:	cmp	r8, r5
   15734:	moveq	r3, #1
   15738:	streq	r3, [r6, #4]
   1573c:	streq	r8, [r0]
   15740:	beq	15754 <__assert_fail@plt+0x4420>
   15744:	str	r7, [r6, #4]
   15748:	strlt	r8, [r0]
   1574c:	strlt	r5, [r0, #4]
   15750:	stmge	r0, {r5, r8}
   15754:	mov	r0, #0
   15758:	pop	{r4, r5, r6, r7, r8, pc}
   1575c:	ldr	r1, [r3, #16]
   15760:	ldr	r3, [r0, #20]
   15764:	ldr	r1, [r1, #28]
   15768:	mov	r0, #12
   1576c:	mla	r0, r0, r2, r3
   15770:	b	14818 <__assert_fail@plt+0x34e4>
   15774:	ldr	r1, [r3, #16]
   15778:	ldr	ip, [r0, #12]
   1577c:	ldr	r1, [r1, #28]
   15780:	str	r1, [ip, r2, lsl #2]
   15784:	ldrb	r3, [r3, #24]
   15788:	cmp	r3, #4
   1578c:	bne	157a8 <__assert_fail@plt+0x4474>
   15790:	ldr	r3, [r0, #20]
   15794:	b	15768 <__assert_fail@plt+0x4434>
   15798:	ldr	r3, [r3, #16]
   1579c:	ldr	r1, [r3, #28]
   157a0:	ldr	r3, [r0, #12]
   157a4:	str	r1, [r3, r2, lsl #2]
   157a8:	mov	r0, #0
   157ac:	bx	lr
   157b0:	mov	r0, r4
   157b4:	pop	{r4, r5, r6, r7, r8, pc}
   157b8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   157bc:	mov	r4, r0
   157c0:	ldr	sl, [r0, #84]	; 0x54
   157c4:	mov	r9, r1
   157c8:	mov	r6, r2
   157cc:	mov	r5, #0
   157d0:	mov	r7, #24
   157d4:	mov	r8, #1
   157d8:	ldr	r3, [r9, #4]
   157dc:	cmp	r5, r3
   157e0:	blt	157f0 <__assert_fail@plt+0x44bc>
   157e4:	mov	r0, #0
   157e8:	add	sp, sp, #12
   157ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157f0:	ldr	r3, [r9, #8]
   157f4:	ldr	fp, [r3, r5, lsl #2]
   157f8:	ldr	r3, [sl]
   157fc:	add	r2, r3, fp, lsl #3
   15800:	ldrb	r2, [r2, #4]
   15804:	cmp	r2, #8
   15808:	bne	158ac <__assert_fail@plt+0x4578>
   1580c:	ldr	r2, [r3, fp, lsl #3]
   15810:	cmp	r2, #31
   15814:	bgt	158ac <__assert_fail@plt+0x4578>
   15818:	ldr	r3, [sl, #80]	; 0x50
   1581c:	lsr	r3, r3, r2
   15820:	tst	r3, #1
   15824:	beq	158ac <__assert_fail@plt+0x4578>
   15828:	ldr	r1, [r4, #128]	; 0x80
   1582c:	ldr	r3, [r4, #124]	; 0x7c
   15830:	ldr	r0, [r4, #132]	; 0x84
   15834:	cmp	r1, r3
   15838:	bne	15860 <__assert_fail@plt+0x452c>
   1583c:	lsl	r3, r1, #1
   15840:	lsl	r1, r1, #3
   15844:	str	r3, [sp]
   15848:	bl	1fd98 <__assert_fail@plt+0xea64>
   1584c:	cmp	r0, #0
   15850:	beq	158b4 <__assert_fail@plt+0x4580>
   15854:	ldr	r3, [sp]
   15858:	str	r0, [r4, #132]	; 0x84
   1585c:	str	r3, [r4, #128]	; 0x80
   15860:	ldr	r2, [r4, #124]	; 0x7c
   15864:	ldr	r3, [r4, #132]	; 0x84
   15868:	mov	r1, r7
   1586c:	mov	r0, r8
   15870:	str	r2, [sp, #4]
   15874:	str	r3, [sp]
   15878:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1587c:	ldr	r3, [sp]
   15880:	ldr	r2, [sp, #4]
   15884:	str	r0, [r3, r2, lsl #2]
   15888:	ldr	r3, [r4, #124]	; 0x7c
   1588c:	ldr	r2, [r4, #132]	; 0x84
   15890:	ldr	r2, [r2, r3, lsl #2]
   15894:	cmp	r2, #0
   15898:	beq	158b4 <__assert_fail@plt+0x4580>
   1589c:	add	r3, r3, #1
   158a0:	str	fp, [r2, #4]
   158a4:	str	r3, [r4, #124]	; 0x7c
   158a8:	str	r6, [r2]
   158ac:	add	r5, r5, #1
   158b0:	b	157d8 <__assert_fail@plt+0x44a4>
   158b4:	mov	r0, #12
   158b8:	b	157e8 <__assert_fail@plt+0x44b4>
   158bc:	ldr	r3, [r0, #36]	; 0x24
   158c0:	push	{r4, r5, r6, lr}
   158c4:	cmp	r3, r1
   158c8:	mov	r4, r0
   158cc:	mov	r5, r1
   158d0:	ldr	r6, [r0, #104]	; 0x68
   158d4:	bgt	158e4 <__assert_fail@plt+0x45b0>
   158d8:	ldr	r2, [r0, #48]	; 0x30
   158dc:	cmp	r3, r2
   158e0:	blt	1590c <__assert_fail@plt+0x45d8>
   158e4:	ldr	r3, [r4, #28]
   158e8:	cmp	r5, r3
   158ec:	bge	15900 <__assert_fail@plt+0x45cc>
   158f0:	cmp	r6, r5
   158f4:	blt	15924 <__assert_fail@plt+0x45f0>
   158f8:	mov	r0, #0
   158fc:	pop	{r4, r5, r6, pc}
   15900:	ldr	r2, [r4, #48]	; 0x30
   15904:	cmp	r3, r2
   15908:	bge	158f0 <__assert_fail@plt+0x45bc>
   1590c:	add	r1, r5, #1
   15910:	mov	r0, r4
   15914:	bl	14ff8 <__assert_fail@plt+0x3cc4>
   15918:	cmp	r0, #0
   1591c:	beq	158f0 <__assert_fail@plt+0x45bc>
   15920:	pop	{r4, r5, r6, pc}
   15924:	sub	r2, r5, r6
   15928:	ldr	r0, [r4, #100]	; 0x64
   1592c:	add	r6, r6, #1
   15930:	lsl	r2, r2, #2
   15934:	mov	r1, #0
   15938:	add	r0, r0, r6, lsl #2
   1593c:	bl	11238 <memset@plt>
   15940:	str	r5, [r4, #104]	; 0x68
   15944:	b	158f8 <__assert_fail@plt+0x45c4>
   15948:	push	{r4, r5, r6, r7, r8, lr}
   1594c:	subs	r4, r0, #0
   15950:	ldr	r7, [sp, #28]
   15954:	beq	159e8 <__assert_fail@plt+0x46b4>
   15958:	ldr	r5, [r4]
   1595c:	cmp	r5, #0
   15960:	beq	159e8 <__assert_fail@plt+0x46b4>
   15964:	sub	ip, r5, #1
   15968:	mov	r5, #24
   1596c:	mov	r0, r3
   15970:	mul	r5, r5, ip
   15974:	ldr	r3, [r4, #8]
   15978:	str	ip, [r4]
   1597c:	add	ip, r3, r5
   15980:	ldr	r3, [r3, r5]
   15984:	lsl	r6, r2, #3
   15988:	str	r3, [r1]
   1598c:	mov	r2, r6
   15990:	ldr	r1, [ip, #8]
   15994:	bl	110ac <memcpy@plt>
   15998:	ldr	r3, [r4, #8]
   1599c:	mov	r2, r6
   159a0:	add	r3, r3, r5
   159a4:	ldr	r0, [sp, #24]
   159a8:	ldr	r1, [r3, #8]
   159ac:	add	r1, r1, r6
   159b0:	bl	110ac <memcpy@plt>
   159b4:	ldr	r0, [r7, #8]
   159b8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   159bc:	ldr	r3, [r4, #8]
   159c0:	add	r3, r3, r5
   159c4:	ldr	r0, [r3, #8]
   159c8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   159cc:	ldr	r3, [r4, #8]
   159d0:	add	r5, r3, r5
   159d4:	add	r3, r5, #12
   159d8:	ldm	r3, {r0, r1, r2}
   159dc:	stm	r7, {r0, r1, r2}
   159e0:	ldr	r0, [r5, #4]
   159e4:	pop	{r4, r5, r6, r7, r8, pc}
   159e8:	mvn	r0, #0
   159ec:	pop	{r4, r5, r6, r7, r8, pc}
   159f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   159f4:	mov	r9, r3
   159f8:	ldr	r3, [sp, #36]	; 0x24
   159fc:	mov	r5, r0
   15a00:	tst	r3, #4194304	; 0x400000
   15a04:	mov	r4, r1
   15a08:	mov	r8, r2
   15a0c:	ldr	r6, [sp, #32]
   15a10:	beq	15a44 <__assert_fail@plt+0x4710>
   15a14:	mov	r0, r6
   15a18:	ldr	r1, [pc, #1816]	; 16138 <__assert_fail@plt+0x4e04>
   15a1c:	bl	1104c <strcmp@plt>
   15a20:	cmp	r0, #0
   15a24:	ldreq	r6, [pc, #1808]	; 1613c <__assert_fail@plt+0x4e08>
   15a28:	beq	15a44 <__assert_fail@plt+0x4710>
   15a2c:	mov	r0, r6
   15a30:	ldr	r1, [pc, #1800]	; 16140 <__assert_fail@plt+0x4e0c>
   15a34:	bl	1104c <strcmp@plt>
   15a38:	ldr	r3, [pc, #1788]	; 1613c <__assert_fail@plt+0x4e08>
   15a3c:	cmp	r0, #0
   15a40:	moveq	r6, r3
   15a44:	ldr	r7, [r9]
   15a48:	ldr	r3, [r8, #36]	; 0x24
   15a4c:	cmp	r7, r3
   15a50:	bne	15a78 <__assert_fail@plt+0x4744>
   15a54:	lsl	r7, r7, #1
   15a58:	add	r7, r7, #1
   15a5c:	ldr	r0, [r8, #12]
   15a60:	lsl	r1, r7, #2
   15a64:	bl	1fd98 <__assert_fail@plt+0xea64>
   15a68:	cmp	r0, #0
   15a6c:	beq	16128 <__assert_fail@plt+0x4df4>
   15a70:	str	r0, [r8, #12]
   15a74:	str	r7, [r9]
   15a78:	ldr	r7, [r8, #36]	; 0x24
   15a7c:	mov	r0, r6
   15a80:	add	r3, r7, #1
   15a84:	str	r3, [r8, #36]	; 0x24
   15a88:	ldr	r9, [r8, #12]
   15a8c:	bl	1101c <wctype@plt>
   15a90:	ldr	r1, [pc, #1708]	; 16144 <__assert_fail@plt+0x4e10>
   15a94:	str	r0, [r9, r7, lsl #2]
   15a98:	mov	r0, r6
   15a9c:	bl	1104c <strcmp@plt>
   15aa0:	subs	r7, r0, #0
   15aa4:	bne	15b24 <__assert_fail@plt+0x47f0>
   15aa8:	cmp	r5, #0
   15aac:	beq	15aec <__assert_fail@plt+0x47b8>
   15ab0:	bl	111e4 <__ctype_b_loc@plt>
   15ab4:	mov	r6, r0
   15ab8:	ldr	r2, [r6]
   15abc:	lsl	r3, r7, #1
   15ac0:	ldrh	r3, [r2, r3]
   15ac4:	tst	r3, #8
   15ac8:	beq	15ad8 <__assert_fail@plt+0x47a4>
   15acc:	ldrb	r1, [r5, r7]
   15ad0:	mov	r0, r4
   15ad4:	bl	13c70 <__assert_fail@plt+0x293c>
   15ad8:	add	r7, r7, #1
   15adc:	cmp	r7, #256	; 0x100
   15ae0:	bne	15ab8 <__assert_fail@plt+0x4784>
   15ae4:	mov	r0, #0
   15ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15aec:	bl	111e4 <__ctype_b_loc@plt>
   15af0:	mov	r5, r0
   15af4:	ldr	r2, [r5]
   15af8:	lsl	r3, r7, #1
   15afc:	ldrh	r3, [r2, r3]
   15b00:	tst	r3, #8
   15b04:	beq	15b14 <__assert_fail@plt+0x47e0>
   15b08:	mov	r1, r7
   15b0c:	mov	r0, r4
   15b10:	bl	13c70 <__assert_fail@plt+0x293c>
   15b14:	add	r7, r7, #1
   15b18:	cmp	r7, #256	; 0x100
   15b1c:	bne	15af4 <__assert_fail@plt+0x47c0>
   15b20:	b	15ae4 <__assert_fail@plt+0x47b0>
   15b24:	ldr	r1, [pc, #1564]	; 16148 <__assert_fail@plt+0x4e14>
   15b28:	mov	r0, r6
   15b2c:	bl	1104c <strcmp@plt>
   15b30:	subs	r7, r0, #0
   15b34:	bne	15bb0 <__assert_fail@plt+0x487c>
   15b38:	cmp	r5, #0
   15b3c:	beq	15b78 <__assert_fail@plt+0x4844>
   15b40:	bl	111e4 <__ctype_b_loc@plt>
   15b44:	mov	r6, r0
   15b48:	ldr	r2, [r6]
   15b4c:	lsl	r3, r7, #1
   15b50:	ldrh	r3, [r2, r3]
   15b54:	tst	r3, #2
   15b58:	beq	15b68 <__assert_fail@plt+0x4834>
   15b5c:	ldrb	r1, [r5, r7]
   15b60:	mov	r0, r4
   15b64:	bl	13c70 <__assert_fail@plt+0x293c>
   15b68:	add	r7, r7, #1
   15b6c:	cmp	r7, #256	; 0x100
   15b70:	bne	15b48 <__assert_fail@plt+0x4814>
   15b74:	b	15ae4 <__assert_fail@plt+0x47b0>
   15b78:	bl	111e4 <__ctype_b_loc@plt>
   15b7c:	mov	r5, r0
   15b80:	ldr	r2, [r5]
   15b84:	lsl	r3, r7, #1
   15b88:	ldrh	r3, [r2, r3]
   15b8c:	tst	r3, #2
   15b90:	beq	15ba0 <__assert_fail@plt+0x486c>
   15b94:	mov	r1, r7
   15b98:	mov	r0, r4
   15b9c:	bl	13c70 <__assert_fail@plt+0x293c>
   15ba0:	add	r7, r7, #1
   15ba4:	cmp	r7, #256	; 0x100
   15ba8:	bne	15b80 <__assert_fail@plt+0x484c>
   15bac:	b	15ae4 <__assert_fail@plt+0x47b0>
   15bb0:	ldr	r1, [pc, #1416]	; 16140 <__assert_fail@plt+0x4e0c>
   15bb4:	mov	r0, r6
   15bb8:	bl	1104c <strcmp@plt>
   15bbc:	subs	r7, r0, #0
   15bc0:	bne	15c3c <__assert_fail@plt+0x4908>
   15bc4:	cmp	r5, #0
   15bc8:	beq	15c04 <__assert_fail@plt+0x48d0>
   15bcc:	bl	111e4 <__ctype_b_loc@plt>
   15bd0:	mov	r6, r0
   15bd4:	ldr	r2, [r6]
   15bd8:	lsl	r3, r7, #1
   15bdc:	ldrh	r3, [r2, r3]
   15be0:	tst	r3, #512	; 0x200
   15be4:	beq	15bf4 <__assert_fail@plt+0x48c0>
   15be8:	ldrb	r1, [r5, r7]
   15bec:	mov	r0, r4
   15bf0:	bl	13c70 <__assert_fail@plt+0x293c>
   15bf4:	add	r7, r7, #1
   15bf8:	cmp	r7, #256	; 0x100
   15bfc:	bne	15bd4 <__assert_fail@plt+0x48a0>
   15c00:	b	15ae4 <__assert_fail@plt+0x47b0>
   15c04:	bl	111e4 <__ctype_b_loc@plt>
   15c08:	mov	r5, r0
   15c0c:	ldr	r2, [r5]
   15c10:	lsl	r3, r7, #1
   15c14:	ldrh	r3, [r2, r3]
   15c18:	tst	r3, #512	; 0x200
   15c1c:	beq	15c2c <__assert_fail@plt+0x48f8>
   15c20:	mov	r1, r7
   15c24:	mov	r0, r4
   15c28:	bl	13c70 <__assert_fail@plt+0x293c>
   15c2c:	add	r7, r7, #1
   15c30:	cmp	r7, #256	; 0x100
   15c34:	bne	15c0c <__assert_fail@plt+0x48d8>
   15c38:	b	15ae4 <__assert_fail@plt+0x47b0>
   15c3c:	ldr	r1, [pc, #1288]	; 1614c <__assert_fail@plt+0x4e18>
   15c40:	mov	r0, r6
   15c44:	bl	1104c <strcmp@plt>
   15c48:	subs	r7, r0, #0
   15c4c:	bne	15cc8 <__assert_fail@plt+0x4994>
   15c50:	cmp	r5, #0
   15c54:	beq	15c90 <__assert_fail@plt+0x495c>
   15c58:	bl	111e4 <__ctype_b_loc@plt>
   15c5c:	mov	r6, r0
   15c60:	ldr	r2, [r6]
   15c64:	lsl	r3, r7, #1
   15c68:	ldrh	r3, [r2, r3]
   15c6c:	tst	r3, #8192	; 0x2000
   15c70:	beq	15c80 <__assert_fail@plt+0x494c>
   15c74:	ldrb	r1, [r5, r7]
   15c78:	mov	r0, r4
   15c7c:	bl	13c70 <__assert_fail@plt+0x293c>
   15c80:	add	r7, r7, #1
   15c84:	cmp	r7, #256	; 0x100
   15c88:	bne	15c60 <__assert_fail@plt+0x492c>
   15c8c:	b	15ae4 <__assert_fail@plt+0x47b0>
   15c90:	bl	111e4 <__ctype_b_loc@plt>
   15c94:	mov	r5, r0
   15c98:	ldr	r2, [r5]
   15c9c:	lsl	r3, r7, #1
   15ca0:	ldrh	r3, [r2, r3]
   15ca4:	tst	r3, #8192	; 0x2000
   15ca8:	beq	15cb8 <__assert_fail@plt+0x4984>
   15cac:	mov	r1, r7
   15cb0:	mov	r0, r4
   15cb4:	bl	13c70 <__assert_fail@plt+0x293c>
   15cb8:	add	r7, r7, #1
   15cbc:	cmp	r7, #256	; 0x100
   15cc0:	bne	15c98 <__assert_fail@plt+0x4964>
   15cc4:	b	15ae4 <__assert_fail@plt+0x47b0>
   15cc8:	ldr	r1, [pc, #1132]	; 1613c <__assert_fail@plt+0x4e08>
   15ccc:	mov	r0, r6
   15cd0:	bl	1104c <strcmp@plt>
   15cd4:	subs	r7, r0, #0
   15cd8:	bne	15d54 <__assert_fail@plt+0x4a20>
   15cdc:	cmp	r5, #0
   15ce0:	beq	15d1c <__assert_fail@plt+0x49e8>
   15ce4:	bl	111e4 <__ctype_b_loc@plt>
   15ce8:	mov	r6, r0
   15cec:	ldr	r2, [r6]
   15cf0:	lsl	r3, r7, #1
   15cf4:	ldrh	r3, [r2, r3]
   15cf8:	tst	r3, #1024	; 0x400
   15cfc:	beq	15d0c <__assert_fail@plt+0x49d8>
   15d00:	ldrb	r1, [r5, r7]
   15d04:	mov	r0, r4
   15d08:	bl	13c70 <__assert_fail@plt+0x293c>
   15d0c:	add	r7, r7, #1
   15d10:	cmp	r7, #256	; 0x100
   15d14:	bne	15cec <__assert_fail@plt+0x49b8>
   15d18:	b	15ae4 <__assert_fail@plt+0x47b0>
   15d1c:	bl	111e4 <__ctype_b_loc@plt>
   15d20:	mov	r5, r0
   15d24:	ldr	r2, [r5]
   15d28:	lsl	r3, r7, #1
   15d2c:	ldrh	r3, [r2, r3]
   15d30:	tst	r3, #1024	; 0x400
   15d34:	beq	15d44 <__assert_fail@plt+0x4a10>
   15d38:	mov	r1, r7
   15d3c:	mov	r0, r4
   15d40:	bl	13c70 <__assert_fail@plt+0x293c>
   15d44:	add	r7, r7, #1
   15d48:	cmp	r7, #256	; 0x100
   15d4c:	bne	15d24 <__assert_fail@plt+0x49f0>
   15d50:	b	15ae4 <__assert_fail@plt+0x47b0>
   15d54:	ldr	r1, [pc, #1012]	; 16150 <__assert_fail@plt+0x4e1c>
   15d58:	mov	r0, r6
   15d5c:	bl	1104c <strcmp@plt>
   15d60:	subs	r7, r0, #0
   15d64:	bne	15de0 <__assert_fail@plt+0x4aac>
   15d68:	cmp	r5, #0
   15d6c:	beq	15da8 <__assert_fail@plt+0x4a74>
   15d70:	bl	111e4 <__ctype_b_loc@plt>
   15d74:	mov	r6, r0
   15d78:	ldr	r2, [r6]
   15d7c:	lsl	r3, r7, #1
   15d80:	ldrh	r3, [r2, r3]
   15d84:	tst	r3, #2048	; 0x800
   15d88:	beq	15d98 <__assert_fail@plt+0x4a64>
   15d8c:	ldrb	r1, [r5, r7]
   15d90:	mov	r0, r4
   15d94:	bl	13c70 <__assert_fail@plt+0x293c>
   15d98:	add	r7, r7, #1
   15d9c:	cmp	r7, #256	; 0x100
   15da0:	bne	15d78 <__assert_fail@plt+0x4a44>
   15da4:	b	15ae4 <__assert_fail@plt+0x47b0>
   15da8:	bl	111e4 <__ctype_b_loc@plt>
   15dac:	mov	r5, r0
   15db0:	ldr	r2, [r5]
   15db4:	lsl	r3, r7, #1
   15db8:	ldrh	r3, [r2, r3]
   15dbc:	tst	r3, #2048	; 0x800
   15dc0:	beq	15dd0 <__assert_fail@plt+0x4a9c>
   15dc4:	mov	r1, r7
   15dc8:	mov	r0, r4
   15dcc:	bl	13c70 <__assert_fail@plt+0x293c>
   15dd0:	add	r7, r7, #1
   15dd4:	cmp	r7, #256	; 0x100
   15dd8:	bne	15db0 <__assert_fail@plt+0x4a7c>
   15ddc:	b	15ae4 <__assert_fail@plt+0x47b0>
   15de0:	ldr	r1, [pc, #876]	; 16154 <__assert_fail@plt+0x4e20>
   15de4:	mov	r0, r6
   15de8:	bl	1104c <strcmp@plt>
   15dec:	subs	r7, r0, #0
   15df0:	bne	15e6c <__assert_fail@plt+0x4b38>
   15df4:	cmp	r5, #0
   15df8:	beq	15e34 <__assert_fail@plt+0x4b00>
   15dfc:	bl	111e4 <__ctype_b_loc@plt>
   15e00:	mov	r6, r0
   15e04:	ldr	r2, [r6]
   15e08:	lsl	r3, r7, #1
   15e0c:	ldrh	r3, [r2, r3]
   15e10:	tst	r3, #16384	; 0x4000
   15e14:	beq	15e24 <__assert_fail@plt+0x4af0>
   15e18:	ldrb	r1, [r5, r7]
   15e1c:	mov	r0, r4
   15e20:	bl	13c70 <__assert_fail@plt+0x293c>
   15e24:	add	r7, r7, #1
   15e28:	cmp	r7, #256	; 0x100
   15e2c:	bne	15e04 <__assert_fail@plt+0x4ad0>
   15e30:	b	15ae4 <__assert_fail@plt+0x47b0>
   15e34:	bl	111e4 <__ctype_b_loc@plt>
   15e38:	mov	r5, r0
   15e3c:	ldr	r2, [r5]
   15e40:	lsl	r3, r7, #1
   15e44:	ldrh	r3, [r2, r3]
   15e48:	tst	r3, #16384	; 0x4000
   15e4c:	beq	15e5c <__assert_fail@plt+0x4b28>
   15e50:	mov	r1, r7
   15e54:	mov	r0, r4
   15e58:	bl	13c70 <__assert_fail@plt+0x293c>
   15e5c:	add	r7, r7, #1
   15e60:	cmp	r7, #256	; 0x100
   15e64:	bne	15e3c <__assert_fail@plt+0x4b08>
   15e68:	b	15ae4 <__assert_fail@plt+0x47b0>
   15e6c:	ldr	r1, [pc, #708]	; 16138 <__assert_fail@plt+0x4e04>
   15e70:	mov	r0, r6
   15e74:	bl	1104c <strcmp@plt>
   15e78:	subs	r7, r0, #0
   15e7c:	bne	15ef8 <__assert_fail@plt+0x4bc4>
   15e80:	cmp	r5, #0
   15e84:	beq	15ec0 <__assert_fail@plt+0x4b8c>
   15e88:	bl	111e4 <__ctype_b_loc@plt>
   15e8c:	mov	r6, r0
   15e90:	ldr	r2, [r6]
   15e94:	lsl	r3, r7, #1
   15e98:	ldrh	r3, [r2, r3]
   15e9c:	tst	r3, #256	; 0x100
   15ea0:	beq	15eb0 <__assert_fail@plt+0x4b7c>
   15ea4:	ldrb	r1, [r5, r7]
   15ea8:	mov	r0, r4
   15eac:	bl	13c70 <__assert_fail@plt+0x293c>
   15eb0:	add	r7, r7, #1
   15eb4:	cmp	r7, #256	; 0x100
   15eb8:	bne	15e90 <__assert_fail@plt+0x4b5c>
   15ebc:	b	15ae4 <__assert_fail@plt+0x47b0>
   15ec0:	bl	111e4 <__ctype_b_loc@plt>
   15ec4:	mov	r5, r0
   15ec8:	ldr	r2, [r5]
   15ecc:	lsl	r3, r7, #1
   15ed0:	ldrh	r3, [r2, r3]
   15ed4:	tst	r3, #256	; 0x100
   15ed8:	beq	15ee8 <__assert_fail@plt+0x4bb4>
   15edc:	mov	r1, r7
   15ee0:	mov	r0, r4
   15ee4:	bl	13c70 <__assert_fail@plt+0x293c>
   15ee8:	add	r7, r7, #1
   15eec:	cmp	r7, #256	; 0x100
   15ef0:	bne	15ec8 <__assert_fail@plt+0x4b94>
   15ef4:	b	15ae4 <__assert_fail@plt+0x47b0>
   15ef8:	ldr	r1, [pc, #600]	; 16158 <__assert_fail@plt+0x4e24>
   15efc:	mov	r0, r6
   15f00:	bl	1104c <strcmp@plt>
   15f04:	subs	r7, r0, #0
   15f08:	bne	15f84 <__assert_fail@plt+0x4c50>
   15f0c:	cmp	r5, #0
   15f10:	beq	15f4c <__assert_fail@plt+0x4c18>
   15f14:	bl	111e4 <__ctype_b_loc@plt>
   15f18:	mov	r6, r0
   15f1c:	ldr	r2, [r6]
   15f20:	lsl	r3, r7, #1
   15f24:	ldrh	r3, [r2, r3]
   15f28:	tst	r3, #1
   15f2c:	beq	15f3c <__assert_fail@plt+0x4c08>
   15f30:	ldrb	r1, [r5, r7]
   15f34:	mov	r0, r4
   15f38:	bl	13c70 <__assert_fail@plt+0x293c>
   15f3c:	add	r7, r7, #1
   15f40:	cmp	r7, #256	; 0x100
   15f44:	bne	15f1c <__assert_fail@plt+0x4be8>
   15f48:	b	15ae4 <__assert_fail@plt+0x47b0>
   15f4c:	bl	111e4 <__ctype_b_loc@plt>
   15f50:	mov	r5, r0
   15f54:	ldr	r2, [r5]
   15f58:	lsl	r3, r7, #1
   15f5c:	ldrh	r3, [r2, r3]
   15f60:	tst	r3, #1
   15f64:	beq	15f74 <__assert_fail@plt+0x4c40>
   15f68:	mov	r1, r7
   15f6c:	mov	r0, r4
   15f70:	bl	13c70 <__assert_fail@plt+0x293c>
   15f74:	add	r7, r7, #1
   15f78:	cmp	r7, #256	; 0x100
   15f7c:	bne	15f54 <__assert_fail@plt+0x4c20>
   15f80:	b	15ae4 <__assert_fail@plt+0x47b0>
   15f84:	ldr	r1, [pc, #464]	; 1615c <__assert_fail@plt+0x4e28>
   15f88:	mov	r0, r6
   15f8c:	bl	1104c <strcmp@plt>
   15f90:	subs	r7, r0, #0
   15f94:	bne	16010 <__assert_fail@plt+0x4cdc>
   15f98:	cmp	r5, #0
   15f9c:	beq	15fd8 <__assert_fail@plt+0x4ca4>
   15fa0:	bl	111e4 <__ctype_b_loc@plt>
   15fa4:	mov	r6, r0
   15fa8:	ldr	r2, [r6]
   15fac:	lsl	r3, r7, #1
   15fb0:	ldrsh	r3, [r2, r3]
   15fb4:	cmp	r3, #0
   15fb8:	bge	15fc8 <__assert_fail@plt+0x4c94>
   15fbc:	ldrb	r1, [r5, r7]
   15fc0:	mov	r0, r4
   15fc4:	bl	13c70 <__assert_fail@plt+0x293c>
   15fc8:	add	r7, r7, #1
   15fcc:	cmp	r7, #256	; 0x100
   15fd0:	bne	15fa8 <__assert_fail@plt+0x4c74>
   15fd4:	b	15ae4 <__assert_fail@plt+0x47b0>
   15fd8:	bl	111e4 <__ctype_b_loc@plt>
   15fdc:	mov	r5, r0
   15fe0:	ldr	r2, [r5]
   15fe4:	lsl	r3, r7, #1
   15fe8:	ldrsh	r3, [r2, r3]
   15fec:	cmp	r3, #0
   15ff0:	bge	16000 <__assert_fail@plt+0x4ccc>
   15ff4:	mov	r1, r7
   15ff8:	mov	r0, r4
   15ffc:	bl	13c70 <__assert_fail@plt+0x293c>
   16000:	add	r7, r7, #1
   16004:	cmp	r7, #256	; 0x100
   16008:	bne	15fe0 <__assert_fail@plt+0x4cac>
   1600c:	b	15ae4 <__assert_fail@plt+0x47b0>
   16010:	ldr	r1, [pc, #328]	; 16160 <__assert_fail@plt+0x4e2c>
   16014:	mov	r0, r6
   16018:	bl	1104c <strcmp@plt>
   1601c:	subs	r7, r0, #0
   16020:	bne	1609c <__assert_fail@plt+0x4d68>
   16024:	cmp	r5, #0
   16028:	beq	16064 <__assert_fail@plt+0x4d30>
   1602c:	bl	111e4 <__ctype_b_loc@plt>
   16030:	mov	r6, r0
   16034:	ldr	r2, [r6]
   16038:	lsl	r3, r7, #1
   1603c:	ldrh	r3, [r2, r3]
   16040:	tst	r3, #4
   16044:	beq	16054 <__assert_fail@plt+0x4d20>
   16048:	ldrb	r1, [r5, r7]
   1604c:	mov	r0, r4
   16050:	bl	13c70 <__assert_fail@plt+0x293c>
   16054:	add	r7, r7, #1
   16058:	cmp	r7, #256	; 0x100
   1605c:	bne	16034 <__assert_fail@plt+0x4d00>
   16060:	b	15ae4 <__assert_fail@plt+0x47b0>
   16064:	bl	111e4 <__ctype_b_loc@plt>
   16068:	mov	r5, r0
   1606c:	ldr	r2, [r5]
   16070:	lsl	r3, r7, #1
   16074:	ldrh	r3, [r2, r3]
   16078:	tst	r3, #4
   1607c:	beq	1608c <__assert_fail@plt+0x4d58>
   16080:	mov	r1, r7
   16084:	mov	r0, r4
   16088:	bl	13c70 <__assert_fail@plt+0x293c>
   1608c:	add	r7, r7, #1
   16090:	cmp	r7, #256	; 0x100
   16094:	bne	1606c <__assert_fail@plt+0x4d38>
   16098:	b	15ae4 <__assert_fail@plt+0x47b0>
   1609c:	mov	r0, r6
   160a0:	ldr	r1, [pc, #188]	; 16164 <__assert_fail@plt+0x4e30>
   160a4:	bl	1104c <strcmp@plt>
   160a8:	subs	r6, r0, #0
   160ac:	bne	16130 <__assert_fail@plt+0x4dfc>
   160b0:	cmp	r5, #0
   160b4:	beq	160f0 <__assert_fail@plt+0x4dbc>
   160b8:	bl	111e4 <__ctype_b_loc@plt>
   160bc:	mov	r7, r0
   160c0:	ldr	r2, [r7]
   160c4:	lsl	r3, r6, #1
   160c8:	ldrh	r3, [r2, r3]
   160cc:	tst	r3, #4096	; 0x1000
   160d0:	beq	160e0 <__assert_fail@plt+0x4dac>
   160d4:	ldrb	r1, [r5, r6]
   160d8:	mov	r0, r4
   160dc:	bl	13c70 <__assert_fail@plt+0x293c>
   160e0:	add	r6, r6, #1
   160e4:	cmp	r6, #256	; 0x100
   160e8:	bne	160c0 <__assert_fail@plt+0x4d8c>
   160ec:	b	15ae4 <__assert_fail@plt+0x47b0>
   160f0:	bl	111e4 <__ctype_b_loc@plt>
   160f4:	mov	r5, r0
   160f8:	ldr	r2, [r5]
   160fc:	lsl	r3, r6, #1
   16100:	ldrh	r3, [r2, r3]
   16104:	tst	r3, #4096	; 0x1000
   16108:	beq	16118 <__assert_fail@plt+0x4de4>
   1610c:	mov	r1, r6
   16110:	mov	r0, r4
   16114:	bl	13c70 <__assert_fail@plt+0x293c>
   16118:	add	r6, r6, #1
   1611c:	cmp	r6, #256	; 0x100
   16120:	bne	160f8 <__assert_fail@plt+0x4dc4>
   16124:	b	15ae4 <__assert_fail@plt+0x47b0>
   16128:	mov	r0, #12
   1612c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16130:	mov	r0, #4
   16134:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16138:	andeq	r1, r2, r2, lsl #14
   1613c:	strdeq	r1, [r2], -ip
   16140:	andeq	r1, r2, r8, lsl #14
   16144:	andeq	r1, r2, lr, lsl #14
   16148:	andeq	r1, r2, r4, lsl r7
   1614c:	andeq	r1, r2, sl, lsl r7
   16150:	andeq	r1, r2, r9, lsr r7
   16154:	andeq	r1, r2, r0, lsr #14
   16158:	andeq	r1, r2, r6, lsr #14
   1615c:	andeq	r1, r2, ip, lsr #14
   16160:	andeq	r1, r2, r2, lsr r7
   16164:	andeq	r1, r2, r8, lsr r7
   16168:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1616c:	sub	sp, sp, #36	; 0x24
   16170:	mov	r7, r0
   16174:	mov	fp, r1
   16178:	mov	r4, #0
   1617c:	mov	r1, #1
   16180:	mov	r0, #32
   16184:	str	r2, [sp, #12]
   16188:	mov	r9, r3
   1618c:	ldrb	sl, [sp, #72]	; 0x48
   16190:	ldr	r8, [sp, #76]	; 0x4c
   16194:	str	r4, [sp, #20]
   16198:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1619c:	subs	r5, r0, #0
   161a0:	bne	161b4 <__assert_fail@plt+0x4e80>
   161a4:	mov	r3, #12
   161a8:	str	r3, [r8]
   161ac:	mov	r4, #0
   161b0:	b	16228 <__assert_fail@plt+0x4ef4>
   161b4:	mov	r1, #1
   161b8:	mov	r0, #40	; 0x28
   161bc:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   161c0:	subs	r6, r0, #0
   161c4:	bne	161d4 <__assert_fail@plt+0x4ea0>
   161c8:	mov	r0, r5
   161cc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   161d0:	b	161a4 <__assert_fail@plt+0x4e70>
   161d4:	ldrb	r2, [r6, #16]
   161d8:	and	r3, sl, #1
   161dc:	mov	r0, fp
   161e0:	bic	r2, r2, #1
   161e4:	orr	r3, r3, r2
   161e8:	strb	r3, [r6, #16]
   161ec:	ldr	r3, [sp, #12]
   161f0:	str	r4, [sp, #4]
   161f4:	str	r3, [sp]
   161f8:	mov	r2, r6
   161fc:	add	r3, sp, #20
   16200:	mov	r1, r5
   16204:	bl	159f0 <__assert_fail@plt+0x46bc>
   16208:	subs	fp, r0, #0
   1620c:	subeq	r9, r9, #1
   16210:	beq	1623c <__assert_fail@plt+0x4f08>
   16214:	mov	r0, r5
   16218:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1621c:	mov	r0, r6
   16220:	bl	150bc <__assert_fail@plt+0x3d88>
   16224:	str	fp, [r8]
   16228:	mov	r0, r4
   1622c:	add	sp, sp, #36	; 0x24
   16230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16234:	mov	r0, r5
   16238:	bl	13c70 <__assert_fail@plt+0x293c>
   1623c:	ldrb	r1, [r9, #1]!
   16240:	cmp	r1, #0
   16244:	bne	16234 <__assert_fail@plt+0x4f00>
   16248:	cmp	sl, #0
   1624c:	beq	16258 <__assert_fail@plt+0x4f24>
   16250:	mov	r0, r5
   16254:	bl	13cd4 <__assert_fail@plt+0x29a0>
   16258:	ldr	r3, [r7, #92]	; 0x5c
   1625c:	cmp	r3, #1
   16260:	ble	16270 <__assert_fail@plt+0x4f3c>
   16264:	ldr	r1, [r7, #60]	; 0x3c
   16268:	mov	r0, r5
   1626c:	bl	13d1c <__assert_fail@plt+0x29e8>
   16270:	mov	r9, #0
   16274:	mov	r3, #3
   16278:	str	r9, [sp, #28]
   1627c:	mov	r2, r9
   16280:	strb	r3, [sp, #28]
   16284:	mov	r1, r9
   16288:	add	r3, sp, #24
   1628c:	mov	r0, r7
   16290:	str	r5, [sp, #24]
   16294:	bl	14510 <__assert_fail@plt+0x31dc>
   16298:	subs	r4, r0, #0
   1629c:	beq	16304 <__assert_fail@plt+0x4fd0>
   162a0:	ldr	r3, [r7, #92]	; 0x5c
   162a4:	cmp	r3, #1
   162a8:	ble	162f8 <__assert_fail@plt+0x4fc4>
   162ac:	mov	r3, #6
   162b0:	strb	r3, [sp, #28]
   162b4:	ldrb	r3, [r7, #88]	; 0x58
   162b8:	mov	r2, r9
   162bc:	mov	r1, r9
   162c0:	orr	r3, r3, #2
   162c4:	strb	r3, [r7, #88]	; 0x58
   162c8:	mov	r0, r7
   162cc:	add	r3, sp, #24
   162d0:	str	r6, [sp, #24]
   162d4:	bl	14510 <__assert_fail@plt+0x31dc>
   162d8:	subs	r2, r0, #0
   162dc:	beq	16304 <__assert_fail@plt+0x4fd0>
   162e0:	mov	r1, r4
   162e4:	mov	r3, #10
   162e8:	mov	r0, r7
   162ec:	bl	14660 <__assert_fail@plt+0x332c>
   162f0:	mov	r4, r0
   162f4:	b	16228 <__assert_fail@plt+0x4ef4>
   162f8:	mov	r0, r6
   162fc:	bl	150bc <__assert_fail@plt+0x3d88>
   16300:	b	16228 <__assert_fail@plt+0x4ef4>
   16304:	mov	r0, r5
   16308:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1630c:	mov	r0, r6
   16310:	bl	150bc <__assert_fail@plt+0x3d88>
   16314:	b	161a4 <__assert_fail@plt+0x4e70>
   16318:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1631c:	ldr	sl, [r0]
   16320:	add	ip, sl, r1, lsl #3
   16324:	ldrb	r9, [ip, #4]
   16328:	cmp	r9, #7
   1632c:	bne	1641c <__assert_fail@plt+0x50e8>
   16330:	ldr	r0, [r2, #4]
   16334:	add	r1, r0, r3
   16338:	ldrb	ip, [r0, r3]
   1633c:	cmp	ip, #193	; 0xc1
   16340:	bhi	16350 <__assert_fail@plt+0x501c>
   16344:	mov	r4, #0
   16348:	mov	r0, r4
   1634c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16350:	ldr	r0, [r2, #48]	; 0x30
   16354:	add	r2, r3, #1
   16358:	cmp	r2, r0
   1635c:	bge	16344 <__assert_fail@plt+0x5010>
   16360:	cmp	ip, #223	; 0xdf
   16364:	ldrb	r2, [r1, #1]
   16368:	bhi	16380 <__assert_fail@plt+0x504c>
   1636c:	eor	r2, r2, #128	; 0x80
   16370:	cmp	r2, #63	; 0x3f
   16374:	movls	r4, #2
   16378:	bls	16348 <__assert_fail@plt+0x5014>
   1637c:	b	16344 <__assert_fail@plt+0x5010>
   16380:	cmp	ip, #239	; 0xef
   16384:	bhi	163c8 <__assert_fail@plt+0x5094>
   16388:	cmp	r2, #159	; 0x9f
   1638c:	cmpls	ip, #224	; 0xe0
   16390:	movne	r4, #3
   16394:	beq	16344 <__assert_fail@plt+0x5010>
   16398:	add	r3, r4, r3
   1639c:	cmp	r0, r3
   163a0:	blt	16344 <__assert_fail@plt+0x5010>
   163a4:	mov	r3, #1
   163a8:	ldrb	r2, [r1, r3]
   163ac:	eor	r2, r2, #128	; 0x80
   163b0:	cmp	r2, #63	; 0x3f
   163b4:	bhi	16344 <__assert_fail@plt+0x5010>
   163b8:	add	r3, r3, #1
   163bc:	cmp	r4, r3
   163c0:	bne	163a8 <__assert_fail@plt+0x5074>
   163c4:	b	16348 <__assert_fail@plt+0x5014>
   163c8:	cmp	ip, #247	; 0xf7
   163cc:	bhi	163e4 <__assert_fail@plt+0x50b0>
   163d0:	cmp	r2, #143	; 0x8f
   163d4:	cmpls	ip, #240	; 0xf0
   163d8:	movne	r4, #4
   163dc:	bne	16398 <__assert_fail@plt+0x5064>
   163e0:	b	16344 <__assert_fail@plt+0x5010>
   163e4:	cmp	ip, #251	; 0xfb
   163e8:	bhi	16400 <__assert_fail@plt+0x50cc>
   163ec:	cmp	r2, #135	; 0x87
   163f0:	cmpls	ip, #248	; 0xf8
   163f4:	movne	r4, #5
   163f8:	bne	16398 <__assert_fail@plt+0x5064>
   163fc:	b	16344 <__assert_fail@plt+0x5010>
   16400:	cmp	ip, #253	; 0xfd
   16404:	bhi	16344 <__assert_fail@plt+0x5010>
   16408:	cmp	r2, #131	; 0x83
   1640c:	cmpls	ip, #252	; 0xfc
   16410:	beq	16344 <__assert_fail@plt+0x5010>
   16414:	mov	r4, #6
   16418:	b	16398 <__assert_fail@plt+0x5064>
   1641c:	mov	r5, r1
   16420:	mov	r8, r0
   16424:	mov	r1, r3
   16428:	mov	r0, r2
   1642c:	mov	r7, r3
   16430:	mov	r6, r2
   16434:	bl	13d44 <__assert_fail@plt+0x2a10>
   16438:	cmp	r9, #5
   1643c:	mov	r4, r0
   16440:	bne	16484 <__assert_fail@plt+0x5150>
   16444:	cmp	r0, #1
   16448:	ble	16344 <__assert_fail@plt+0x5010>
   1644c:	ldr	r3, [r8, #128]	; 0x80
   16450:	tst	r3, #64	; 0x40
   16454:	bne	16468 <__assert_fail@plt+0x5134>
   16458:	ldr	r2, [r6, #4]
   1645c:	ldrb	r2, [r2, r7]
   16460:	cmp	r2, #10
   16464:	beq	16344 <__assert_fail@plt+0x5010>
   16468:	tst	r3, #128	; 0x80
   1646c:	beq	16348 <__assert_fail@plt+0x5014>
   16470:	ldr	r3, [r6, #4]
   16474:	ldrb	r3, [r3, r7]
   16478:	cmp	r3, #0
   1647c:	beq	16344 <__assert_fail@plt+0x5010>
   16480:	b	16348 <__assert_fail@plt+0x5014>
   16484:	cmp	r0, #1
   16488:	movle	r3, #0
   1648c:	movgt	r3, #1
   16490:	cmp	r9, #6
   16494:	movne	r3, #0
   16498:	cmp	r3, #0
   1649c:	beq	16344 <__assert_fail@plt+0x5010>
   164a0:	ldr	r5, [sl, r5, lsl #3]
   164a4:	ldr	r3, [r5, #32]
   164a8:	ldr	r2, [r5, #20]
   164ac:	cmp	r3, #0
   164b0:	bne	164c8 <__assert_fail@plt+0x5194>
   164b4:	ldr	r3, [r5, #36]	; 0x24
   164b8:	cmp	r3, #0
   164bc:	bne	164c8 <__assert_fail@plt+0x5194>
   164c0:	cmp	r2, #0
   164c4:	beq	1655c <__assert_fail@plt+0x5228>
   164c8:	mov	r0, r6
   164cc:	mov	r1, r7
   164d0:	bl	13d9c <__assert_fail@plt+0x2a68>
   164d4:	mov	r3, #0
   164d8:	mov	r6, r0
   164dc:	cmp	r3, r2
   164e0:	blt	16524 <__assert_fail@plt+0x51f0>
   164e4:	mov	r7, #0
   164e8:	ldr	r3, [r5, #36]	; 0x24
   164ec:	cmp	r7, r3
   164f0:	blt	1653c <__assert_fail@plt+0x5208>
   164f4:	ldr	r2, [r5, #32]
   164f8:	mov	r3, #0
   164fc:	cmp	r3, r2
   16500:	blt	16564 <__assert_fail@plt+0x5230>
   16504:	mov	r3, #0
   16508:	ldrb	r2, [r5, #16]
   1650c:	tst	r2, #1
   16510:	moveq	r4, r3
   16514:	beq	16348 <__assert_fail@plt+0x5014>
   16518:	cmp	r3, #0
   1651c:	bne	16344 <__assert_fail@plt+0x5010>
   16520:	b	16348 <__assert_fail@plt+0x5014>
   16524:	ldr	r1, [r5]
   16528:	ldr	r1, [r1, r3, lsl #2]
   1652c:	cmp	r6, r1
   16530:	beq	1658c <__assert_fail@plt+0x5258>
   16534:	add	r3, r3, #1
   16538:	b	164dc <__assert_fail@plt+0x51a8>
   1653c:	ldr	r3, [r5, #12]
   16540:	mov	r0, r6
   16544:	ldr	r1, [r3, r7, lsl #2]
   16548:	bl	11040 <iswctype@plt>
   1654c:	cmp	r0, #0
   16550:	bne	1658c <__assert_fail@plt+0x5258>
   16554:	add	r7, r7, #1
   16558:	b	164e8 <__assert_fail@plt+0x51b4>
   1655c:	mov	r6, r2
   16560:	b	164f4 <__assert_fail@plt+0x51c0>
   16564:	ldr	r1, [r5, #4]
   16568:	ldr	r1, [r1, r3, lsl #2]
   1656c:	cmp	r6, r1
   16570:	bcc	16584 <__assert_fail@plt+0x5250>
   16574:	ldr	r1, [r5, #8]
   16578:	ldr	r1, [r1, r3, lsl #2]
   1657c:	cmp	r6, r1
   16580:	bls	1658c <__assert_fail@plt+0x5258>
   16584:	add	r3, r3, #1
   16588:	b	164fc <__assert_fail@plt+0x51c8>
   1658c:	mov	r3, r4
   16590:	b	16508 <__assert_fail@plt+0x51d4>
   16594:	ldr	r3, [r0, #4]
   16598:	ldr	r2, [r1, #4]
   1659c:	cmp	r3, r2
   165a0:	bne	165cc <__assert_fail@plt+0x5298>
   165a4:	subs	r3, r3, #1
   165a8:	bpl	165b4 <__assert_fail@plt+0x5280>
   165ac:	mov	r0, #1
   165b0:	bx	lr
   165b4:	ldr	ip, [r0, #8]
   165b8:	ldr	r2, [r1, #8]
   165bc:	ldr	ip, [ip, r3, lsl #2]
   165c0:	ldr	r2, [r2, r3, lsl #2]
   165c4:	cmp	ip, r2
   165c8:	b	165a0 <__assert_fail@plt+0x526c>
   165cc:	mov	r0, #0
   165d0:	bx	lr
   165d4:	cmp	r1, #0
   165d8:	bxlt	lr
   165dc:	ldr	r3, [r0, #4]
   165e0:	cmp	r1, r3
   165e4:	bxge	lr
   165e8:	sub	r3, r3, #1
   165ec:	str	r3, [r0, #4]
   165f0:	ldr	ip, [r0, #4]
   165f4:	lsl	r3, r1, #2
   165f8:	cmp	r1, ip
   165fc:	add	r2, r3, #4
   16600:	blt	16608 <__assert_fail@plt+0x52d4>
   16604:	bx	lr
   16608:	push	{lr}		; (str lr, [sp, #-4]!)
   1660c:	add	r1, r1, #1
   16610:	ldr	ip, [r0, #8]
   16614:	ldr	lr, [ip, r2]
   16618:	str	lr, [ip, r3]
   1661c:	ldr	ip, [r0, #4]
   16620:	mov	r3, r2
   16624:	cmp	r1, ip
   16628:	add	r2, r2, #4
   1662c:	blt	1660c <__assert_fail@plt+0x52d8>
   16630:	pop	{pc}		; (ldr pc, [sp], #4)
   16634:	ldrb	r3, [r1, #24]
   16638:	cmp	r3, #4
   1663c:	bne	16670 <__assert_fail@plt+0x533c>
   16640:	ldr	r3, [r0, #132]	; 0x84
   16644:	cmp	r3, #0
   16648:	beq	16668 <__assert_fail@plt+0x5334>
   1664c:	ldr	r2, [r1, #20]
   16650:	ldr	r2, [r3, r2, lsl #2]
   16654:	str	r2, [r1, #20]
   16658:	mov	r1, #1
   1665c:	ldr	r3, [r0, #80]	; 0x50
   16660:	orr	r3, r3, r1, lsl r2
   16664:	str	r3, [r0, #80]	; 0x50
   16668:	mov	r0, #0
   1666c:	bx	lr
   16670:	cmp	r3, #17
   16674:	bne	16668 <__assert_fail@plt+0x5334>
   16678:	ldr	r3, [r1, #4]
   1667c:	cmp	r3, #0
   16680:	beq	16668 <__assert_fail@plt+0x5334>
   16684:	ldrb	r2, [r3, #24]
   16688:	cmp	r2, #17
   1668c:	bne	16668 <__assert_fail@plt+0x5334>
   16690:	ldr	r2, [r3, #20]
   16694:	ldr	r3, [r3, #4]
   16698:	cmp	r3, #0
   1669c:	str	r3, [r1, #4]
   166a0:	strne	r1, [r3]
   166a4:	ldr	r3, [r0, #132]	; 0x84
   166a8:	ldr	r1, [r1, #20]
   166ac:	cmp	r2, #31
   166b0:	ldr	r1, [r3, r1, lsl #2]
   166b4:	str	r1, [r3, r2, lsl #2]
   166b8:	bgt	16668 <__assert_fail@plt+0x5334>
   166bc:	ldr	r3, [r0, #80]	; 0x50
   166c0:	mov	r1, #1
   166c4:	bic	r3, r3, r1, lsl r2
   166c8:	b	16664 <__assert_fail@plt+0x5330>
   166cc:	ldrb	r3, [r1, #24]
   166d0:	ldr	r2, [r1, #4]
   166d4:	cmp	r3, #11
   166d8:	streq	r1, [r2, #16]
   166dc:	beq	16700 <__assert_fail@plt+0x53cc>
   166e0:	cmp	r3, #16
   166e4:	ldr	r3, [r1, #8]
   166e8:	beq	16708 <__assert_fail@plt+0x53d4>
   166ec:	cmp	r2, #0
   166f0:	ldrne	r0, [r1, #16]
   166f4:	strne	r0, [r2, #16]
   166f8:	cmp	r3, #0
   166fc:	bne	16710 <__assert_fail@plt+0x53dc>
   16700:	mov	r0, #0
   16704:	bx	lr
   16708:	ldr	r0, [r3, #12]
   1670c:	str	r0, [r2, #16]
   16710:	ldr	r2, [r1, #16]
   16714:	str	r2, [r3, #16]
   16718:	b	16700 <__assert_fail@plt+0x53cc>
   1671c:	ldr	r3, [r1, #4]
   16720:	cmp	r3, #0
   16724:	beq	16884 <__assert_fail@plt+0x5550>
   16728:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1672c:	ldr	r5, [r2, #4]
   16730:	cmp	r5, #0
   16734:	beq	16868 <__assert_fail@plt+0x5534>
   16738:	mov	r6, r2
   1673c:	ldr	r2, [r0, #4]
   16740:	add	r3, r3, r5
   16744:	ldr	r5, [r0]
   16748:	add	r2, r3, r2
   1674c:	cmp	r2, r5
   16750:	mov	r7, r1
   16754:	mov	r4, r0
   16758:	ble	1677c <__assert_fail@plt+0x5448>
   1675c:	add	r5, r3, r5
   16760:	ldr	r0, [r0, #8]
   16764:	lsl	r1, r5, #2
   16768:	bl	1fd98 <__assert_fail@plt+0xea64>
   1676c:	cmp	r0, #0
   16770:	beq	1688c <__assert_fail@plt+0x5558>
   16774:	str	r0, [r4, #8]
   16778:	str	r5, [r4]
   1677c:	ldr	r2, [r4, #4]
   16780:	ldr	r3, [r7, #4]
   16784:	ldr	r0, [r6, #4]
   16788:	add	ip, r2, r3
   1678c:	ldr	r8, [r7, #8]
   16790:	ldr	r9, [r6, #8]
   16794:	add	ip, ip, r0
   16798:	sub	r3, r3, #1
   1679c:	sub	r0, r0, #1
   167a0:	sub	r2, r2, #1
   167a4:	ldr	lr, [r9, r0, lsl #2]
   167a8:	ldr	r1, [r8, r3, lsl #2]
   167ac:	cmp	r1, lr
   167b0:	lsleq	lr, r2, #2
   167b4:	beq	167c8 <__assert_fail@plt+0x5494>
   167b8:	blt	167f8 <__assert_fail@plt+0x54c4>
   167bc:	subs	r3, r3, #1
   167c0:	b	167fc <__assert_fail@plt+0x54c8>
   167c4:	sub	r2, r2, #1
   167c8:	cmp	r2, #0
   167cc:	ldr	r5, [r4, #8]
   167d0:	blt	167e8 <__assert_fail@plt+0x54b4>
   167d4:	ldr	sl, [r5, lr]
   167d8:	sub	lr, lr, #4
   167dc:	cmp	r1, sl
   167e0:	blt	167c4 <__assert_fail@plt+0x5490>
   167e4:	beq	167f0 <__assert_fail@plt+0x54bc>
   167e8:	sub	ip, ip, #1
   167ec:	str	r1, [r5, ip, lsl #2]
   167f0:	subs	r3, r3, #1
   167f4:	bmi	16800 <__assert_fail@plt+0x54cc>
   167f8:	subs	r0, r0, #1
   167fc:	bpl	167a4 <__assert_fail@plt+0x5470>
   16800:	ldr	r1, [r4, #4]
   16804:	ldr	r2, [r7, #4]
   16808:	ldr	r0, [r6, #4]
   1680c:	add	r2, r1, r2
   16810:	add	r2, r2, r0
   16814:	sub	r3, r1, #1
   16818:	sub	lr, r2, #1
   1681c:	sub	r2, r2, ip
   16820:	add	r1, r1, r2
   16824:	cmp	r3, #0
   16828:	cmpge	r2, #0
   1682c:	str	r1, [r4, #4]
   16830:	ldr	r0, [r4, #8]
   16834:	ble	1685c <__assert_fail@plt+0x5528>
   16838:	ldr	r5, [r0, lr, lsl #2]
   1683c:	ldr	r4, [r0, r3, lsl #2]
   16840:	cmp	r5, r4
   16844:	ble	16870 <__assert_fail@plt+0x553c>
   16848:	add	r1, r3, r2
   1684c:	subs	r2, r2, #1
   16850:	sub	lr, lr, #1
   16854:	str	r5, [r0, r1, lsl #2]
   16858:	bne	16838 <__assert_fail@plt+0x5504>
   1685c:	lsl	r2, r2, #2
   16860:	add	r1, r0, ip, lsl #2
   16864:	bl	110ac <memcpy@plt>
   16868:	mov	r0, #0
   1686c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16870:	add	r1, r3, r2
   16874:	subs	r3, r3, #1
   16878:	str	r4, [r0, r1, lsl #2]
   1687c:	bcs	16838 <__assert_fail@plt+0x5504>
   16880:	b	1685c <__assert_fail@plt+0x5528>
   16884:	mov	r0, r3
   16888:	bx	lr
   1688c:	mov	r0, #12
   16890:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16894:	ldr	r3, [r1, #4]
   16898:	str	r3, [r0, #4]
   1689c:	ldr	r2, [r1, #4]
   168a0:	cmp	r2, #0
   168a4:	ble	168f4 <__assert_fail@plt+0x55c0>
   168a8:	push	{r4, r5, r6, lr}
   168ac:	mov	r4, r0
   168b0:	str	r3, [r0]
   168b4:	lsl	r0, r3, #2
   168b8:	mov	r5, r1
   168bc:	bl	1fd58 <__assert_fail@plt+0xea24>
   168c0:	cmp	r0, #0
   168c4:	str	r0, [r4, #8]
   168c8:	bne	168dc <__assert_fail@plt+0x55a8>
   168cc:	str	r0, [r4, #4]
   168d0:	str	r0, [r4]
   168d4:	mov	r0, #12
   168d8:	pop	{r4, r5, r6, pc}
   168dc:	ldr	r2, [r5, #4]
   168e0:	ldr	r1, [r5, #8]
   168e4:	lsl	r2, r2, #2
   168e8:	bl	110ac <memcpy@plt>
   168ec:	mov	r0, #0
   168f0:	pop	{r4, r5, r6, pc}
   168f4:	mov	r3, #0
   168f8:	str	r3, [r0]
   168fc:	str	r3, [r0, #4]
   16900:	str	r3, [r0, #8]
   16904:	mov	r0, r3
   16908:	bx	lr
   1690c:	cmp	r1, #0
   16910:	beq	169a8 <__assert_fail@plt+0x5674>
   16914:	ldr	r3, [r1, #4]
   16918:	cmp	r2, #0
   1691c:	cmpne	r3, #0
   16920:	ble	1699c <__assert_fail@plt+0x5668>
   16924:	ldr	ip, [r2, #4]
   16928:	cmp	ip, #0
   1692c:	ble	169a4 <__assert_fail@plt+0x5670>
   16930:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16934:	mov	r6, r0
   16938:	add	r0, r3, ip
   1693c:	str	r0, [r6]
   16940:	lsl	r0, r0, #2
   16944:	mov	r5, r1
   16948:	mov	r7, r2
   1694c:	bl	1fd58 <__assert_fail@plt+0xea24>
   16950:	cmp	r0, #0
   16954:	str	r0, [r6, #8]
   16958:	beq	16a0c <__assert_fail@plt+0x56d8>
   1695c:	mov	r3, #0
   16960:	ldr	r2, [r5, #4]
   16964:	mov	r8, r0
   16968:	mov	r9, #1
   1696c:	mov	lr, r3
   16970:	cmp	lr, r2
   16974:	sub	r4, r9, #1
   16978:	ldr	ip, [r7, #4]
   1697c:	bge	16a14 <__assert_fail@plt+0x56e0>
   16980:	cmp	r3, ip
   16984:	ldr	r1, [r5, #8]
   16988:	blt	169d8 <__assert_fail@plt+0x56a4>
   1698c:	sub	r5, r2, lr
   16990:	add	r1, r1, lr, lsl #2
   16994:	lsl	r2, r5, #2
   16998:	b	16a2c <__assert_fail@plt+0x56f8>
   1699c:	cmp	r3, #0
   169a0:	ble	169a8 <__assert_fail@plt+0x5674>
   169a4:	b	16894 <__assert_fail@plt+0x5560>
   169a8:	cmp	r2, #0
   169ac:	beq	169c0 <__assert_fail@plt+0x568c>
   169b0:	ldr	r3, [r2, #4]
   169b4:	cmp	r3, #0
   169b8:	movgt	r1, r2
   169bc:	bgt	169a4 <__assert_fail@plt+0x5670>
   169c0:	mov	r3, #0
   169c4:	str	r3, [r0]
   169c8:	str	r3, [r0, #4]
   169cc:	str	r3, [r0, #8]
   169d0:	mov	r0, r3
   169d4:	bx	lr
   169d8:	ldr	ip, [r7, #8]
   169dc:	ldr	r1, [r1, lr, lsl #2]
   169e0:	ldr	ip, [ip, r3, lsl #2]
   169e4:	cmp	r1, ip
   169e8:	addgt	r3, r3, #1
   169ec:	strgt	ip, [r8]
   169f0:	bgt	16a00 <__assert_fail@plt+0x56cc>
   169f4:	addeq	r3, r3, #1
   169f8:	add	lr, lr, #1
   169fc:	str	r1, [r8]
   16a00:	add	r9, r9, #1
   16a04:	add	r8, r8, #4
   16a08:	b	16970 <__assert_fail@plt+0x563c>
   16a0c:	mov	r0, #12
   16a10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a14:	cmp	r3, ip
   16a18:	bge	16a38 <__assert_fail@plt+0x5704>
   16a1c:	sub	r5, ip, r3
   16a20:	ldr	r1, [r7, #8]
   16a24:	lsl	r2, r5, #2
   16a28:	add	r1, r1, r3, lsl #2
   16a2c:	add	r0, r0, r4, lsl #2
   16a30:	bl	110ac <memcpy@plt>
   16a34:	add	r4, r4, r5
   16a38:	str	r4, [r6, #4]
   16a3c:	mov	r0, #0
   16a40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a48:	mov	ip, #0
   16a4c:	ldr	r4, [r2, #4]
   16a50:	sub	sp, sp, #20
   16a54:	cmp	r4, ip
   16a58:	str	ip, [r0]
   16a5c:	addne	r9, r4, r3
   16a60:	bne	16a80 <__assert_fail@plt+0x574c>
   16a64:	mov	r0, r4
   16a68:	add	sp, sp, #20
   16a6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a70:	ldr	lr, [r2, #8]
   16a74:	ldr	lr, [lr, ip, lsl #2]
   16a78:	add	ip, ip, #1
   16a7c:	add	r9, r9, lr
   16a80:	cmp	r4, ip
   16a84:	bgt	16a70 <__assert_fail@plt+0x573c>
   16a88:	mov	r7, r3
   16a8c:	ldr	r3, [r1, #68]	; 0x44
   16a90:	mov	r5, r2
   16a94:	and	r2, r9, r3
   16a98:	mov	r3, #12
   16a9c:	mov	r8, r1
   16aa0:	mul	r3, r3, r2
   16aa4:	ldr	r2, [r1, #32]
   16aa8:	mov	r6, #0
   16aac:	add	sl, r2, r3
   16ab0:	ldr	fp, [r2, r3]
   16ab4:	str	r0, [sp, #8]
   16ab8:	cmp	r6, fp
   16abc:	blt	16b08 <__assert_fail@plt+0x57d4>
   16ac0:	mov	r1, #1
   16ac4:	mov	r0, #56	; 0x38
   16ac8:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   16acc:	subs	r4, r0, #0
   16ad0:	beq	16af4 <__assert_fail@plt+0x57c0>
   16ad4:	add	sl, r4, #4
   16ad8:	mov	r1, r5
   16adc:	mov	r0, sl
   16ae0:	bl	16894 <__assert_fail@plt+0x5560>
   16ae4:	subs	r6, r0, #0
   16ae8:	beq	16b50 <__assert_fail@plt+0x581c>
   16aec:	mov	r0, r4
   16af0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   16af4:	ldr	r2, [sp, #8]
   16af8:	mov	r3, #12
   16afc:	mov	r4, #0
   16b00:	str	r3, [r2]
   16b04:	b	16a64 <__assert_fail@plt+0x5730>
   16b08:	ldr	r3, [sl, #8]
   16b0c:	ldr	r4, [r3, r6, lsl #2]
   16b10:	ldr	r3, [r4]
   16b14:	cmp	r3, r9
   16b18:	bne	16b48 <__assert_fail@plt+0x5814>
   16b1c:	ldrb	r3, [r4, #52]	; 0x34
   16b20:	and	r3, r3, #15
   16b24:	cmp	r7, r3
   16b28:	bne	16b48 <__assert_fail@plt+0x5814>
   16b2c:	ldr	r0, [r4, #40]	; 0x28
   16b30:	cmp	r0, #0
   16b34:	beq	16b48 <__assert_fail@plt+0x5814>
   16b38:	mov	r1, r5
   16b3c:	bl	16594 <__assert_fail@plt+0x5260>
   16b40:	cmp	r0, #0
   16b44:	bne	16a64 <__assert_fail@plt+0x5730>
   16b48:	add	r6, r6, #1
   16b4c:	b	16ab8 <__assert_fail@plt+0x5784>
   16b50:	ldrb	r2, [r4, #52]	; 0x34
   16b54:	and	r3, r7, #15
   16b58:	mov	fp, r6
   16b5c:	bic	r2, r2, #15
   16b60:	orr	r3, r3, r2
   16b64:	strb	r3, [r4, #52]	; 0x34
   16b68:	and	r3, r7, #4
   16b6c:	str	r3, [sp]
   16b70:	and	r3, r7, #2
   16b74:	str	sl, [r4, #40]	; 0x28
   16b78:	str	r3, [sp, #4]
   16b7c:	ldr	r3, [r5, #4]
   16b80:	cmp	fp, r3
   16b84:	blt	16ba4 <__assert_fail@plt+0x5870>
   16b88:	mov	r2, r9
   16b8c:	mov	r1, r4
   16b90:	mov	r0, r8
   16b94:	bl	14888 <__assert_fail@plt+0x3554>
   16b98:	cmp	r0, #0
   16b9c:	beq	16a64 <__assert_fail@plt+0x5730>
   16ba0:	b	16c50 <__assert_fail@plt+0x591c>
   16ba4:	ldr	r3, [r5, #8]
   16ba8:	ldr	r1, [r8]
   16bac:	ldr	r2, [pc, #304]	; 16ce4 <__assert_fail@plt+0x59b0>
   16bb0:	ldr	r3, [r3, fp, lsl #2]
   16bb4:	add	r1, r1, r3, lsl #3
   16bb8:	ldr	r3, [r1, #4]
   16bbc:	ldrb	ip, [r1, #4]
   16bc0:	ands	r3, r2, r3, lsr #8
   16bc4:	moveq	r0, #1
   16bc8:	movne	r0, #0
   16bcc:	cmp	ip, #1
   16bd0:	movne	r0, #0
   16bd4:	andeq	r0, r0, #1
   16bd8:	cmp	r0, #0
   16bdc:	bne	16cdc <__assert_fail@plt+0x59a8>
   16be0:	ldrb	r1, [r1, #6]
   16be4:	ldrb	r0, [r4, #52]	; 0x34
   16be8:	cmp	ip, #2
   16bec:	lsr	r1, r1, #4
   16bf0:	orr	r1, r1, r0, lsr #5
   16bf4:	and	r1, r1, #1
   16bf8:	bic	r0, r0, #32
   16bfc:	orr	r1, r0, r1, lsl #5
   16c00:	strb	r1, [r4, #52]	; 0x34
   16c04:	uxtbeq	r1, r1
   16c08:	orreq	r1, r1, #16
   16c0c:	beq	16c20 <__assert_fail@plt+0x58ec>
   16c10:	cmp	ip, #4
   16c14:	bne	16c24 <__assert_fail@plt+0x58f0>
   16c18:	ldrb	r1, [r4, #52]	; 0x34
   16c1c:	orr	r1, r1, #64	; 0x40
   16c20:	strb	r1, [r4, #52]	; 0x34
   16c24:	cmp	r3, #0
   16c28:	beq	16cdc <__assert_fail@plt+0x59a8>
   16c2c:	ldr	r1, [r4, #40]	; 0x28
   16c30:	cmp	sl, r1
   16c34:	bne	16c84 <__assert_fail@plt+0x5950>
   16c38:	mov	r0, #12
   16c3c:	str	r3, [sp, #12]
   16c40:	bl	1fd58 <__assert_fail@plt+0xea24>
   16c44:	ldr	r3, [sp, #12]
   16c48:	subs	r1, r0, #0
   16c4c:	bne	16c5c <__assert_fail@plt+0x5928>
   16c50:	mov	r0, r4
   16c54:	bl	1536c <__assert_fail@plt+0x4038>
   16c58:	b	16af4 <__assert_fail@plt+0x57c0>
   16c5c:	str	r1, [r4, #40]	; 0x28
   16c60:	mov	r1, r5
   16c64:	str	r3, [sp, #12]
   16c68:	bl	16894 <__assert_fail@plt+0x5560>
   16c6c:	ldr	r3, [sp, #12]
   16c70:	subs	r6, r0, #0
   16c74:	bne	16c50 <__assert_fail@plt+0x591c>
   16c78:	ldrb	r1, [r4, #52]	; 0x34
   16c7c:	orr	r1, r1, #128	; 0x80
   16c80:	strb	r1, [r4, #52]	; 0x34
   16c84:	tst	r3, #1
   16c88:	beq	16c94 <__assert_fail@plt+0x5960>
   16c8c:	tst	r7, #1
   16c90:	beq	16ccc <__assert_fail@plt+0x5998>
   16c94:	tst	r3, #2
   16c98:	beq	16ca4 <__assert_fail@plt+0x5970>
   16c9c:	tst	r7, #1
   16ca0:	bne	16ccc <__assert_fail@plt+0x5998>
   16ca4:	tst	r3, #16
   16ca8:	beq	16cb8 <__assert_fail@plt+0x5984>
   16cac:	ldr	r2, [sp, #4]
   16cb0:	cmp	r2, #0
   16cb4:	beq	16ccc <__assert_fail@plt+0x5998>
   16cb8:	tst	r3, #64	; 0x40
   16cbc:	beq	16cdc <__assert_fail@plt+0x59a8>
   16cc0:	ldr	r3, [sp]
   16cc4:	cmp	r3, #0
   16cc8:	bne	16cdc <__assert_fail@plt+0x59a8>
   16ccc:	sub	r1, fp, r6
   16cd0:	mov	r0, sl
   16cd4:	bl	165d4 <__assert_fail@plt+0x52a0>
   16cd8:	add	r6, r6, #1
   16cdc:	add	fp, fp, #1
   16ce0:	b	16b7c <__assert_fail@plt+0x5848>
   16ce4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16ce8:	ldrb	r3, [r1, #24]
   16cec:	cmp	r3, #16
   16cf0:	bne	16d10 <__assert_fail@plt+0x59dc>
   16cf4:	ldr	r3, [r1, #4]
   16cf8:	mov	r0, #0
   16cfc:	ldr	r2, [r3, #12]
   16d00:	ldr	r3, [r3, #28]
   16d04:	str	r2, [r1, #12]
   16d08:	str	r3, [r1, #28]
   16d0c:	bx	lr
   16d10:	push	{r4, r5, r6, lr}
   16d14:	add	r3, r1, #20
   16d18:	mov	r4, r1
   16d1c:	mov	r5, r0
   16d20:	str	r1, [r4, #12]
   16d24:	ldm	r3, {r1, r2}
   16d28:	bl	15134 <__assert_fail@plt+0x3e00>
   16d2c:	cmn	r0, #1
   16d30:	str	r0, [r4, #28]
   16d34:	beq	16d74 <__assert_fail@plt+0x5a40>
   16d38:	ldrb	r3, [r4, #24]
   16d3c:	cmp	r3, #12
   16d40:	bne	16d6c <__assert_fail@plt+0x5a38>
   16d44:	ldr	r3, [r5]
   16d48:	ldr	r2, [r4, #20]
   16d4c:	add	r0, r3, r0, lsl #3
   16d50:	lsl	r2, r2, #22
   16d54:	ldr	r3, [r0, #4]
   16d58:	lsr	r2, r2, #22
   16d5c:	bic	r3, r3, #261120	; 0x3fc00
   16d60:	bic	r3, r3, #768	; 0x300
   16d64:	orr	r3, r3, r2, lsl #8
   16d68:	str	r3, [r0, #4]
   16d6c:	mov	r0, #0
   16d70:	pop	{r4, r5, r6, pc}
   16d74:	mov	r0, #12
   16d78:	pop	{r4, r5, r6, pc}
   16d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d80:	sub	sp, sp, #36	; 0x24
   16d84:	ldr	r5, [r0, #28]
   16d88:	str	r3, [sp, #4]
   16d8c:	mov	r3, #12
   16d90:	mov	r8, r0
   16d94:	mla	r5, r3, r1, r5
   16d98:	mov	sl, r1
   16d9c:	mov	r7, r2
   16da0:	mvn	fp, #0
   16da4:	mov	r4, #0
   16da8:	str	r4, [sp, #20]
   16dac:	str	r4, [sp, #24]
   16db0:	str	r4, [sp, #28]
   16db4:	str	r3, [sp, #8]
   16db8:	ldr	r3, [r5, #4]
   16dbc:	cmp	r4, r3
   16dc0:	blt	16de4 <__assert_fail@plt+0x5ab0>
   16dc4:	mov	r4, #0
   16dc8:	ldr	r3, [r5, #4]
   16dcc:	cmp	r4, r3
   16dd0:	blt	16ec8 <__assert_fail@plt+0x5b94>
   16dd4:	ldr	r0, [sp, #28]
   16dd8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   16ddc:	mov	r6, #0
   16de0:	b	16eb4 <__assert_fail@plt+0x5b80>
   16de4:	ldr	r3, [r5, #8]
   16de8:	ldr	r6, [r3, r4, lsl #2]
   16dec:	cmp	sl, r6
   16df0:	beq	16ec0 <__assert_fail@plt+0x5b8c>
   16df4:	ldr	r3, [r8]
   16df8:	add	r3, r3, r6, lsl #3
   16dfc:	ldrb	r3, [r3, #4]
   16e00:	tst	r3, #8
   16e04:	beq	16ec0 <__assert_fail@plt+0x5b8c>
   16e08:	ldr	r3, [sp, #8]
   16e0c:	mov	r0, r5
   16e10:	mul	r6, r3, r6
   16e14:	ldr	r3, [r8, #20]
   16e18:	add	r3, r3, r6
   16e1c:	ldr	r1, [r3, #8]
   16e20:	ldr	r3, [r3, #4]
   16e24:	ldr	r2, [r1]
   16e28:	cmp	r3, #1
   16e2c:	movle	r9, fp
   16e30:	ldrgt	r9, [r1, #4]
   16e34:	mov	r1, r2
   16e38:	str	r2, [sp, #12]
   16e3c:	bl	13e08 <__assert_fail@plt+0x2ad4>
   16e40:	cmp	r0, #0
   16e44:	bne	16e60 <__assert_fail@plt+0x5b2c>
   16e48:	ldr	r2, [sp, #12]
   16e4c:	mov	r0, r7
   16e50:	mov	r1, r2
   16e54:	bl	13e08 <__assert_fail@plt+0x2ad4>
   16e58:	cmp	r0, #0
   16e5c:	bne	16e90 <__assert_fail@plt+0x5b5c>
   16e60:	cmp	r9, #0
   16e64:	ble	16ec0 <__assert_fail@plt+0x5b8c>
   16e68:	mov	r1, r9
   16e6c:	mov	r0, r5
   16e70:	bl	13e08 <__assert_fail@plt+0x2ad4>
   16e74:	cmp	r0, #0
   16e78:	bne	16ec0 <__assert_fail@plt+0x5b8c>
   16e7c:	mov	r1, r9
   16e80:	mov	r0, r7
   16e84:	bl	13e08 <__assert_fail@plt+0x2ad4>
   16e88:	cmp	r0, #0
   16e8c:	beq	16ec0 <__assert_fail@plt+0x5b8c>
   16e90:	ldr	r2, [r8, #28]
   16e94:	ldr	r1, [sp, #4]
   16e98:	add	r2, r2, r6
   16e9c:	add	r0, sp, #20
   16ea0:	bl	1671c <__assert_fail@plt+0x53e8>
   16ea4:	subs	r6, r0, #0
   16ea8:	beq	16ec0 <__assert_fail@plt+0x5b8c>
   16eac:	ldr	r0, [sp, #28]
   16eb0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   16eb4:	mov	r0, r6
   16eb8:	add	sp, sp, #36	; 0x24
   16ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec0:	add	r4, r4, #1
   16ec4:	b	16db8 <__assert_fail@plt+0x5a84>
   16ec8:	ldr	r3, [r5, #8]
   16ecc:	add	r0, sp, #20
   16ed0:	ldr	r6, [r3, r4, lsl #2]
   16ed4:	mov	r1, r6
   16ed8:	bl	13e08 <__assert_fail@plt+0x2ad4>
   16edc:	cmp	r0, #0
   16ee0:	bne	16efc <__assert_fail@plt+0x5bc8>
   16ee4:	mov	r1, r6
   16ee8:	mov	r0, r7
   16eec:	bl	13e08 <__assert_fail@plt+0x2ad4>
   16ef0:	sub	r1, r0, #1
   16ef4:	mov	r0, r7
   16ef8:	bl	165d4 <__assert_fail@plt+0x52a0>
   16efc:	add	r4, r4, #1
   16f00:	b	16dc8 <__assert_fail@plt+0x5a94>
   16f04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f08:	sub	sp, sp, #300	; 0x12c
   16f0c:	ldr	r6, [r0]
   16f10:	mov	r8, r0
   16f14:	mov	r9, r1
   16f18:	ldr	r3, [r6, #92]	; 0x5c
   16f1c:	mov	r4, r2
   16f20:	cmp	r3, #1
   16f24:	movne	r3, #0
   16f28:	ldreq	r3, [r0, #12]
   16f2c:	add	r7, sp, #40	; 0x28
   16f30:	lsreq	r3, r3, #22
   16f34:	andeq	r3, r3, #1
   16f38:	str	r3, [sp, #4]
   16f3c:	mov	r3, #0
   16f40:	str	r3, [sp]
   16f44:	ldr	r3, [r9, #8]
   16f48:	ldr	r2, [sp]
   16f4c:	cmp	r2, r3
   16f50:	bge	17264 <__assert_fail@plt+0x5f30>
   16f54:	ldr	r3, [r9, #12]
   16f58:	ldr	r2, [sp]
   16f5c:	ldr	sl, [r3, r2, lsl #2]
   16f60:	lsl	r3, sl, #3
   16f64:	str	r3, [sp, #8]
   16f68:	ldr	r3, [r6]
   16f6c:	lsl	r2, sl, #3
   16f70:	add	r2, r3, r2
   16f74:	ldrb	r5, [r2, #4]
   16f78:	cmp	r5, #1
   16f7c:	bne	17064 <__assert_fail@plt+0x5d30>
   16f80:	ldrb	r0, [r3, sl, lsl #3]
   16f84:	ldr	r3, [sp, #4]
   16f88:	cmp	r3, #0
   16f8c:	strb	r5, [r4, r0]
   16f90:	beq	16f9c <__assert_fail@plt+0x5c68>
   16f94:	bl	110b8 <tolower@plt>
   16f98:	strb	r5, [r4, r0]
   16f9c:	ldr	r3, [r8, #12]
   16fa0:	tst	r3, #4194304	; 0x400000
   16fa4:	beq	17044 <__assert_fail@plt+0x5d10>
   16fa8:	ldr	r3, [r6, #92]	; 0x5c
   16fac:	cmp	r3, #1
   16fb0:	ble	17044 <__assert_fail@plt+0x5d10>
   16fb4:	ldr	r2, [r6]
   16fb8:	ldr	r0, [pc, #684]	; 1726c <__assert_fail@plt+0x5f38>
   16fbc:	mov	r5, #1
   16fc0:	ldrb	r3, [r2, sl, lsl #3]
   16fc4:	strb	r3, [sp, #40]	; 0x28
   16fc8:	ldr	ip, [r6, #8]
   16fcc:	add	r1, sl, r5
   16fd0:	cmp	ip, r1
   16fd4:	bls	16ff4 <__assert_fail@plt+0x5cc0>
   16fd8:	add	r3, r2, r1, lsl #3
   16fdc:	ldr	r3, [r3, #4]
   16fe0:	bic	r3, r3, #-16777216	; 0xff000000
   16fe4:	bic	r3, r3, #14614528	; 0xdf0000
   16fe8:	bic	r3, r3, #65280	; 0xff00
   16fec:	cmp	r3, r0
   16ff0:	beq	17054 <__assert_fail@plt+0x5d20>
   16ff4:	mov	r3, #0
   16ff8:	str	r3, [sp, #32]
   16ffc:	str	r3, [sp, #36]	; 0x24
   17000:	mov	r2, r5
   17004:	add	r3, sp, #32
   17008:	mov	r1, r7
   1700c:	add	r0, sp, #28
   17010:	bl	1ffa4 <__assert_fail@plt+0xec70>
   17014:	cmp	r0, r5
   17018:	bne	17044 <__assert_fail@plt+0x5d10>
   1701c:	ldr	r0, [sp, #28]
   17020:	bl	110d0 <towlower@plt>
   17024:	add	r2, sp, #32
   17028:	mov	r1, r0
   1702c:	mov	r0, r7
   17030:	bl	11034 <wcrtomb@plt>
   17034:	cmn	r0, #1
   17038:	movne	r2, #1
   1703c:	ldrbne	r3, [sp, #40]	; 0x28
   17040:	strbne	r2, [r4, r3]
   17044:	ldr	r3, [sp]
   17048:	add	r3, r3, #1
   1704c:	str	r3, [sp]
   17050:	b	16f44 <__assert_fail@plt+0x5c10>
   17054:	ldrb	r3, [r2, r1, lsl #3]
   17058:	strb	r3, [r7, r5]
   1705c:	add	r5, r5, #1
   17060:	b	16fcc <__assert_fail@plt+0x5c98>
   17064:	cmp	r5, #3
   17068:	bne	170ec <__assert_fail@plt+0x5db8>
   1706c:	mov	sl, #0
   17070:	mov	r1, #1
   17074:	ldr	r2, [sp, #8]
   17078:	ldr	r3, [r6]
   1707c:	lsl	fp, sl, #3
   17080:	mov	r5, #0
   17084:	ldr	r3, [r3, r2]
   17088:	add	r2, r4, fp
   1708c:	ldr	r3, [r3, sl]
   17090:	lsr	ip, r3, r5
   17094:	tst	ip, #1
   17098:	add	r0, r5, fp
   1709c:	beq	170d0 <__assert_fail@plt+0x5d9c>
   170a0:	ldr	ip, [sp, #4]
   170a4:	strb	r1, [r2, r5]
   170a8:	cmp	ip, #0
   170ac:	beq	170d0 <__assert_fail@plt+0x5d9c>
   170b0:	str	r1, [sp, #20]
   170b4:	str	r2, [sp, #16]
   170b8:	str	r3, [sp, #12]
   170bc:	bl	110b8 <tolower@plt>
   170c0:	ldr	r2, [sp, #16]
   170c4:	ldr	r3, [sp, #12]
   170c8:	ldr	r1, [sp, #20]
   170cc:	strb	r1, [r4, r0]
   170d0:	add	r5, r5, #1
   170d4:	cmp	r5, #32
   170d8:	bne	17090 <__assert_fail@plt+0x5d5c>
   170dc:	add	sl, sl, #4
   170e0:	cmp	sl, #32
   170e4:	bne	17074 <__assert_fail@plt+0x5d40>
   170e8:	b	17044 <__assert_fail@plt+0x5d10>
   170ec:	cmp	r5, #6
   170f0:	bne	17230 <__assert_fail@plt+0x5efc>
   170f4:	ldr	r2, [r6, #92]	; 0x5c
   170f8:	ldr	fp, [r3, sl, lsl #3]
   170fc:	cmp	r2, #1
   17100:	ble	171dc <__assert_fail@plt+0x5ea8>
   17104:	ldr	r2, [fp, #36]	; 0x24
   17108:	cmp	r2, #0
   1710c:	bne	171e4 <__assert_fail@plt+0x5eb0>
   17110:	ldrb	r2, [fp, #16]
   17114:	tst	r2, #1
   17118:	bne	171e4 <__assert_fail@plt+0x5eb0>
   1711c:	ldr	r5, [fp, #32]
   17120:	cmp	r5, #0
   17124:	bne	171e4 <__assert_fail@plt+0x5eb0>
   17128:	mov	sl, #0
   1712c:	ldr	r2, [fp, #20]
   17130:	cmp	r5, r2
   17134:	bge	17044 <__assert_fail@plt+0x5d10>
   17138:	str	sl, [sp, #32]
   1713c:	str	sl, [sp, #36]	; 0x24
   17140:	ldr	r1, [fp]
   17144:	lsl	r3, r5, #2
   17148:	add	r2, sp, #32
   1714c:	ldr	r1, [r1, r5, lsl #2]
   17150:	mov	r0, r7
   17154:	str	r3, [sp, #8]
   17158:	bl	11034 <wcrtomb@plt>
   1715c:	cmn	r0, #1
   17160:	beq	1718c <__assert_fail@plt+0x5e58>
   17164:	ldrb	r0, [sp, #40]	; 0x28
   17168:	ldr	r3, [sp, #4]
   1716c:	mov	r2, #1
   17170:	cmp	r3, #0
   17174:	strb	r2, [r4, r0]
   17178:	str	r2, [sp, #8]
   1717c:	beq	1718c <__assert_fail@plt+0x5e58>
   17180:	bl	110b8 <tolower@plt>
   17184:	ldr	r2, [sp, #8]
   17188:	strb	r2, [r4, r0]
   1718c:	ldr	r2, [r8, #12]
   17190:	tst	r2, #4194304	; 0x400000
   17194:	beq	171d4 <__assert_fail@plt+0x5ea0>
   17198:	ldr	r2, [r6, #92]	; 0x5c
   1719c:	cmp	r2, #1
   171a0:	ble	171d4 <__assert_fail@plt+0x5ea0>
   171a4:	ldr	r2, [fp]
   171a8:	lsl	r3, r5, #2
   171ac:	ldr	r0, [r2, r3]
   171b0:	bl	110d0 <towlower@plt>
   171b4:	add	r2, sp, #32
   171b8:	mov	r1, r0
   171bc:	mov	r0, r7
   171c0:	bl	11034 <wcrtomb@plt>
   171c4:	cmn	r0, #1
   171c8:	movne	r1, #1
   171cc:	ldrbne	r2, [sp, #40]	; 0x28
   171d0:	strbne	r1, [r4, r2]
   171d4:	add	r5, r5, #1
   171d8:	b	1712c <__assert_fail@plt+0x5df8>
   171dc:	mov	r5, #0
   171e0:	b	17128 <__assert_fail@plt+0x5df4>
   171e4:	mov	r5, #0
   171e8:	strb	r5, [sp, #32]
   171ec:	mov	r2, #1
   171f0:	mov	r3, r7
   171f4:	add	r1, sp, #32
   171f8:	mov	r0, r5
   171fc:	str	r5, [r7]
   17200:	str	r5, [r7, #4]
   17204:	bl	1ffa4 <__assert_fail@plt+0xec70>
   17208:	ldrb	r3, [sp, #32]
   1720c:	cmn	r0, #2
   17210:	moveq	r2, #1
   17214:	strbeq	r2, [r4, r3]
   17218:	add	r3, r3, #1
   1721c:	uxtb	r3, r3
   17220:	cmp	r3, #0
   17224:	strb	r3, [sp, #32]
   17228:	bne	171ec <__assert_fail@plt+0x5eb8>
   1722c:	b	17044 <__assert_fail@plt+0x5d10>
   17230:	and	r3, r5, #253	; 0xfd
   17234:	cmp	r3, #5
   17238:	beq	17244 <__assert_fail@plt+0x5f10>
   1723c:	cmp	r5, #2
   17240:	bne	17044 <__assert_fail@plt+0x5d10>
   17244:	mov	r2, #256	; 0x100
   17248:	mov	r1, #1
   1724c:	mov	r0, r4
   17250:	bl	11238 <memset@plt>
   17254:	cmp	r5, #2
   17258:	ldrbeq	r3, [r8, #28]
   1725c:	orreq	r3, r3, #1
   17260:	strbeq	r3, [r8, #28]
   17264:	add	sp, sp, #300	; 0x12c
   17268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1726c:	eoreq	r0, r0, r1
   17270:	ldr	r3, [r0]
   17274:	push	{r4, r5, r6, lr}
   17278:	cmp	r3, #0
   1727c:	bne	17290 <__assert_fail@plt+0x5f5c>
   17280:	bl	14818 <__assert_fail@plt+0x34e4>
   17284:	clz	r0, r0
   17288:	lsr	r0, r0, #5
   1728c:	pop	{r4, r5, r6, pc}
   17290:	ldr	r2, [r0, #4]
   17294:	mov	r4, r0
   17298:	cmp	r2, #0
   1729c:	mov	r5, r1
   172a0:	ldreq	r3, [r0, #8]
   172a4:	streq	r1, [r3]
   172a8:	beq	1732c <__assert_fail@plt+0x5ff8>
   172ac:	cmp	r3, r2
   172b0:	bne	172d4 <__assert_fail@plt+0x5fa0>
   172b4:	lsl	r2, r3, #1
   172b8:	str	r2, [r0]
   172bc:	lsl	r1, r3, #3
   172c0:	ldr	r0, [r0, #8]
   172c4:	bl	1fd98 <__assert_fail@plt+0xea64>
   172c8:	cmp	r0, #0
   172cc:	popeq	{r4, r5, r6, pc}
   172d0:	str	r0, [r4, #8]
   172d4:	ldr	r2, [r4, #8]
   172d8:	ldr	r3, [r2]
   172dc:	cmp	r5, r3
   172e0:	ldr	r3, [r4, #4]
   172e4:	movlt	r1, r3
   172e8:	addlt	r0, r2, r3, lsl #2
   172ec:	blt	17318 <__assert_fail@plt+0x5fe4>
   172f0:	add	r1, r2, r3, lsl #2
   172f4:	ldr	r0, [r1, #-4]
   172f8:	cmp	r5, r0
   172fc:	bge	17328 <__assert_fail@plt+0x5ff4>
   17300:	str	r0, [r1], #-4
   17304:	sub	r3, r3, #1
   17308:	b	172f4 <__assert_fail@plt+0x5fc0>
   1730c:	ldr	ip, [r0, #-4]
   17310:	sub	r1, r1, #1
   17314:	str	ip, [r0], #-4
   17318:	cmp	r1, #0
   1731c:	bgt	1730c <__assert_fail@plt+0x5fd8>
   17320:	cmp	r3, #0
   17324:	subge	r3, r3, r3
   17328:	str	r5, [r2, r3, lsl #2]
   1732c:	ldr	r3, [r4, #4]
   17330:	mov	r0, #1
   17334:	add	r3, r3, #1
   17338:	str	r3, [r4, #4]
   1733c:	pop	{r4, r5, r6, pc}
   17340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17344:	sub	sp, sp, #20
   17348:	mov	r4, r0
   1734c:	ldr	r6, [sp, #56]	; 0x38
   17350:	mov	r7, r1
   17354:	mov	r5, r2
   17358:	mov	fp, r3
   1735c:	mov	sl, #12
   17360:	ldr	ip, [r4]
   17364:	ldr	r2, [r4, #20]
   17368:	add	r1, ip, r7, lsl #3
   1736c:	ldrb	r3, [r1, #4]
   17370:	cmp	r3, #4
   17374:	bne	173ec <__assert_fail@plt+0x60b8>
   17378:	ldr	r3, [r4, #12]
   1737c:	mul	r9, sl, r5
   17380:	ldr	r8, [r3, r7, lsl #2]
   17384:	add	r2, r2, r9
   17388:	mov	r1, #0
   1738c:	str	r1, [r2, #4]
   17390:	mov	r0, r4
   17394:	mov	r2, r6
   17398:	mov	r1, r8
   1739c:	str	r5, [sp, #12]
   173a0:	bl	152dc <__assert_fail@plt+0x3fa8>
   173a4:	ldr	r3, [sp, #12]
   173a8:	cmn	r0, #1
   173ac:	mov	r5, r0
   173b0:	bne	173c0 <__assert_fail@plt+0x608c>
   173b4:	mov	r0, #12
   173b8:	add	sp, sp, #20
   173bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173c0:	ldr	r2, [r4, #12]
   173c4:	ldr	r1, [r2, r7, lsl #2]
   173c8:	str	r1, [r2, r3, lsl #2]
   173cc:	ldr	r0, [r4, #20]
   173d0:	mov	r1, r5
   173d4:	add	r0, r0, r9
   173d8:	bl	17270 <__assert_fail@plt+0x5f3c>
   173dc:	cmp	r0, #0
   173e0:	beq	173b4 <__assert_fail@plt+0x6080>
   173e4:	mov	r7, r8
   173e8:	b	17360 <__assert_fail@plt+0x602c>
   173ec:	mul	r8, sl, r7
   173f0:	add	r3, r2, r8
   173f4:	ldr	r0, [r3, #4]
   173f8:	cmp	r0, #0
   173fc:	ldreq	r3, [r4, #12]
   17400:	ldreq	r2, [r3, r7, lsl #2]
   17404:	streq	r2, [r3, r5, lsl #2]
   17408:	beq	173b8 <__assert_fail@plt+0x6084>
   1740c:	cmp	r0, #1
   17410:	ldr	r3, [r3, #8]
   17414:	mul	r9, sl, r5
   17418:	bne	17498 <__assert_fail@plt+0x6164>
   1741c:	cmp	r7, r5
   17420:	ldr	r8, [r3]
   17424:	add	r0, r2, r9
   17428:	mov	r3, #0
   1742c:	sub	r2, r7, fp
   17430:	clz	r2, r2
   17434:	lsr	r2, r2, #5
   17438:	moveq	r2, #0
   1743c:	cmp	r2, r3
   17440:	str	r3, [r0, #4]
   17444:	beq	17468 <__assert_fail@plt+0x6134>
   17448:	mov	r1, r8
   1744c:	str	r3, [sp, #12]
   17450:	bl	17270 <__assert_fail@plt+0x5f3c>
   17454:	ldr	r3, [sp, #12]
   17458:	cmp	r0, #0
   1745c:	movne	r0, r3
   17460:	bne	173b8 <__assert_fail@plt+0x6084>
   17464:	b	173b4 <__assert_fail@plt+0x6080>
   17468:	ldr	r3, [r1, #4]
   1746c:	ldr	r2, [pc, #272]	; 17584 <__assert_fail@plt+0x6250>
   17470:	and	r3, r2, r3, lsr #8
   17474:	orr	r6, r6, r3
   17478:	mov	r2, r6
   1747c:	mov	r1, r8
   17480:	mov	r0, r4
   17484:	bl	152dc <__assert_fail@plt+0x3fa8>
   17488:	cmn	r0, #1
   1748c:	mov	r5, r0
   17490:	bne	173cc <__assert_fail@plt+0x6098>
   17494:	b	173b4 <__assert_fail@plt+0x6080>
   17498:	add	r0, r2, r9
   1749c:	ldr	r5, [r3]
   174a0:	mov	r3, #0
   174a4:	str	r3, [r0, #4]
   174a8:	ldr	r3, [r4, #8]
   174ac:	sub	r2, r3, #-536870911	; 0xe0000001
   174b0:	sub	r1, r3, #1
   174b4:	sub	r3, r3, #-1073741823	; 0xc0000001
   174b8:	add	ip, ip, r2, lsl #3
   174bc:	lsl	r3, r3, #2
   174c0:	ldrb	lr, [ip, #6]
   174c4:	cmp	r1, #0
   174c8:	movle	r2, #0
   174cc:	movgt	r2, #1
   174d0:	ands	r2, r2, lr, lsr #2
   174d4:	bne	17540 <__assert_fail@plt+0x620c>
   174d8:	mov	r2, r6
   174dc:	mov	r1, r5
   174e0:	mov	r0, r4
   174e4:	bl	152dc <__assert_fail@plt+0x3fa8>
   174e8:	cmn	r0, #1
   174ec:	mov	r7, r0
   174f0:	beq	173b4 <__assert_fail@plt+0x6080>
   174f4:	ldr	r0, [r4, #20]
   174f8:	mov	r1, r7
   174fc:	add	r0, r0, r9
   17500:	bl	17270 <__assert_fail@plt+0x5f3c>
   17504:	cmp	r0, #0
   17508:	beq	173b4 <__assert_fail@plt+0x6080>
   1750c:	str	r6, [sp]
   17510:	mov	r3, fp
   17514:	mov	r2, r7
   17518:	mov	r1, r5
   1751c:	mov	r0, r4
   17520:	bl	17340 <__assert_fail@plt+0x600c>
   17524:	cmp	r0, #0
   17528:	bne	173b8 <__assert_fail@plt+0x6084>
   1752c:	ldr	r3, [r4, #20]
   17530:	add	r8, r3, r8
   17534:	ldr	r3, [r8, #8]
   17538:	ldr	r8, [r3, #4]
   1753c:	b	17478 <__assert_fail@plt+0x6144>
   17540:	ldr	r2, [r4, #16]
   17544:	ldr	r2, [r2, r3]
   17548:	cmp	r5, r2
   1754c:	bne	17564 <__assert_fail@plt+0x6230>
   17550:	ldr	r2, [ip, #4]
   17554:	ldr	lr, [pc, #40]	; 17584 <__assert_fail@plt+0x6250>
   17558:	and	r2, lr, r2, lsr #8
   1755c:	cmp	r6, r2
   17560:	beq	17574 <__assert_fail@plt+0x6240>
   17564:	sub	r1, r1, #1
   17568:	sub	ip, ip, #8
   1756c:	sub	r3, r3, #4
   17570:	b	174c0 <__assert_fail@plt+0x618c>
   17574:	bl	17270 <__assert_fail@plt+0x5f3c>
   17578:	cmp	r0, #0
   1757c:	bne	1752c <__assert_fail@plt+0x61f8>
   17580:	b	173b4 <__assert_fail@plt+0x6080>
   17584:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   17588:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1758c:	mov	r6, r0
   17590:	ldr	r7, [sp, #40]	; 0x28
   17594:	mov	r5, r1
   17598:	mov	r4, r2
   1759c:	mov	r8, r3
   175a0:	mov	r9, #12
   175a4:	mov	r1, r4
   175a8:	mov	r0, r5
   175ac:	bl	13e08 <__assert_fail@plt+0x2ad4>
   175b0:	cmp	r0, #0
   175b4:	beq	175c0 <__assert_fail@plt+0x628c>
   175b8:	mov	r0, #0
   175bc:	b	17600 <__assert_fail@plt+0x62cc>
   175c0:	ldr	r3, [r6]
   175c4:	add	r2, r3, r4, lsl #3
   175c8:	ldrb	r2, [r2, #4]
   175cc:	cmp	r2, r7
   175d0:	bne	17608 <__assert_fail@plt+0x62d4>
   175d4:	ldr	r3, [r3, r4, lsl #3]
   175d8:	cmp	r8, r3
   175dc:	bne	17608 <__assert_fail@plt+0x62d4>
   175e0:	cmp	r7, #9
   175e4:	bne	175b8 <__assert_fail@plt+0x6284>
   175e8:	mov	r1, r4
   175ec:	mov	r0, r5
   175f0:	bl	17270 <__assert_fail@plt+0x5f3c>
   175f4:	cmp	r0, #0
   175f8:	bne	175b8 <__assert_fail@plt+0x6284>
   175fc:	mov	r0, #12
   17600:	add	sp, sp, #12
   17604:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17608:	mov	r1, r4
   1760c:	mov	r0, r5
   17610:	bl	17270 <__assert_fail@plt+0x5f3c>
   17614:	cmp	r0, #0
   17618:	beq	175fc <__assert_fail@plt+0x62c8>
   1761c:	mul	r4, r9, r4
   17620:	ldr	r3, [r6, #20]
   17624:	add	r3, r3, r4
   17628:	ldr	r2, [r3, #4]
   1762c:	cmp	r2, #0
   17630:	beq	175b8 <__assert_fail@plt+0x6284>
   17634:	cmp	r2, #2
   17638:	beq	17650 <__assert_fail@plt+0x631c>
   1763c:	ldr	r2, [r6, #20]
   17640:	add	r4, r2, r4
   17644:	ldr	r3, [r4, #8]
   17648:	ldr	r4, [r3]
   1764c:	b	175a4 <__assert_fail@plt+0x6270>
   17650:	ldr	r2, [r3, #8]
   17654:	mov	r1, r5
   17658:	str	r7, [sp]
   1765c:	mov	r3, r8
   17660:	ldr	r2, [r2, #4]
   17664:	mov	r0, r6
   17668:	bl	17588 <__assert_fail@plt+0x6254>
   1766c:	cmp	r0, #0
   17670:	beq	1763c <__assert_fail@plt+0x6308>
   17674:	b	17600 <__assert_fail@plt+0x62cc>
   17678:	push	{r4, r5, r6, r7, r8, lr}
   1767c:	subs	r7, r1, #0
   17680:	bne	1768c <__assert_fail@plt+0x6358>
   17684:	mov	r0, #0
   17688:	pop	{r4, r5, r6, r7, r8, pc}
   1768c:	ldr	r3, [r7, #4]
   17690:	cmp	r3, #0
   17694:	beq	17684 <__assert_fail@plt+0x6350>
   17698:	ldm	r0, {r1, r2}
   1769c:	mov	r5, r0
   176a0:	add	r2, r2, r3, lsl #1
   176a4:	cmp	r1, r2
   176a8:	bge	176d0 <__assert_fail@plt+0x639c>
   176ac:	add	r1, r3, r1
   176b0:	ldr	r0, [r0, #8]
   176b4:	lsl	r4, r1, #1
   176b8:	lsl	r1, r1, #3
   176bc:	bl	1fd98 <__assert_fail@plt+0xea64>
   176c0:	cmp	r0, #0
   176c4:	beq	177d4 <__assert_fail@plt+0x64a0>
   176c8:	str	r0, [r5, #8]
   176cc:	str	r4, [r5]
   176d0:	ldr	r4, [r5, #4]
   176d4:	ldr	r2, [r7, #4]
   176d8:	cmp	r4, #0
   176dc:	bne	176fc <__assert_fail@plt+0x63c8>
   176e0:	str	r2, [r5, #4]
   176e4:	ldr	r2, [r7, #4]
   176e8:	ldr	r0, [r5, #8]
   176ec:	ldr	r1, [r7, #8]
   176f0:	lsl	r2, r2, #2
   176f4:	bl	110ac <memcpy@plt>
   176f8:	b	17684 <__assert_fail@plt+0x6350>
   176fc:	add	r6, r4, r2, lsl #1
   17700:	sub	r3, r4, #1
   17704:	sub	r2, r2, #1
   17708:	cmp	r2, #0
   1770c:	cmpge	r3, #0
   17710:	bge	17788 <__assert_fail@plt+0x6454>
   17714:	cmp	r2, #0
   17718:	blt	17738 <__assert_fail@plt+0x6404>
   1771c:	add	r2, r2, #1
   17720:	sub	r6, r6, r2
   17724:	ldr	r0, [r5, #8]
   17728:	lsl	r2, r2, #2
   1772c:	ldr	r1, [r7, #8]
   17730:	add	r0, r0, r6, lsl #2
   17734:	bl	110ac <memcpy@plt>
   17738:	ldr	r2, [r7, #4]
   1773c:	ldr	r1, [r5, #4]
   17740:	add	r2, r1, r2, lsl #1
   17744:	sub	ip, r2, #1
   17748:	subs	r2, r2, r6
   1774c:	beq	17684 <__assert_fail@plt+0x6350>
   17750:	ldr	r0, [r5, #8]
   17754:	sub	r3, r1, #1
   17758:	add	r1, r1, r2
   1775c:	str	r1, [r5, #4]
   17760:	ldr	r4, [r0, ip, lsl #2]
   17764:	ldr	lr, [r0, r3, lsl #2]
   17768:	add	r1, r3, r2
   1776c:	cmp	r4, lr
   17770:	ble	177bc <__assert_fail@plt+0x6488>
   17774:	subs	r2, r2, #1
   17778:	sub	ip, ip, #1
   1777c:	str	r4, [r0, r1, lsl #2]
   17780:	bne	17760 <__assert_fail@plt+0x642c>
   17784:	b	17684 <__assert_fail@plt+0x6350>
   17788:	ldr	r1, [r5, #8]
   1778c:	ldr	r0, [r7, #8]
   17790:	ldr	ip, [r1, r3, lsl #2]
   17794:	ldr	r0, [r0, r2, lsl #2]
   17798:	cmp	ip, r0
   1779c:	subeq	r2, r2, #1
   177a0:	beq	177b4 <__assert_fail@plt+0x6480>
   177a4:	sublt	r6, r6, #1
   177a8:	sublt	r2, r2, #1
   177ac:	strlt	r0, [r1, r6, lsl #2]
   177b0:	blt	17708 <__assert_fail@plt+0x63d4>
   177b4:	sub	r3, r3, #1
   177b8:	b	17708 <__assert_fail@plt+0x63d4>
   177bc:	subs	r3, r3, #1
   177c0:	str	lr, [r0, r1, lsl #2]
   177c4:	bpl	17760 <__assert_fail@plt+0x642c>
   177c8:	lsl	r2, r2, #2
   177cc:	add	r1, r0, r6, lsl #2
   177d0:	b	176f4 <__assert_fail@plt+0x63c0>
   177d4:	mov	r0, #12
   177d8:	pop	{r4, r5, r6, r7, r8, pc}
   177dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177e0:	mov	r7, #12
   177e4:	sub	sp, sp, #44	; 0x2c
   177e8:	mul	r7, r7, r2
   177ec:	str	r3, [sp, #12]
   177f0:	ldr	r3, [r1, #20]
   177f4:	mov	r4, r1
   177f8:	add	r3, r3, r7
   177fc:	add	r6, sp, #16
   17800:	ldr	r1, [r3, #4]
   17804:	str	r0, [sp, #8]
   17808:	add	r1, r1, #1
   1780c:	mov	r0, r6
   17810:	mov	r5, r2
   17814:	bl	14858 <__assert_fail@plt+0x3524>
   17818:	subs	sl, r0, #0
   1781c:	bne	178b4 <__assert_fail@plt+0x6580>
   17820:	ldr	r3, [sp, #20]
   17824:	lsl	r8, r5, #3
   17828:	add	r2, r3, #1
   1782c:	str	r2, [sp, #20]
   17830:	ldr	r2, [sp, #24]
   17834:	str	r5, [r2, r3, lsl #2]
   17838:	ldr	r3, [r4, #24]
   1783c:	mvn	r2, #0
   17840:	add	r3, r3, r7
   17844:	str	r2, [r3, #4]
   17848:	ldr	r3, [r4]
   1784c:	add	r2, r3, r8
   17850:	ldr	r1, [r2, #4]
   17854:	ldr	r2, [pc, #352]	; 179bc <__assert_fail@plt+0x6688>
   17858:	and	r2, r2, r1
   1785c:	cmp	r2, #0
   17860:	bne	178c0 <__assert_fail@plt+0x658c>
   17864:	ldr	r3, [r4]
   17868:	add	r8, r3, r8
   1786c:	ldrb	r5, [r8, #4]
   17870:	ands	r5, r5, #8
   17874:	movne	r5, #0
   17878:	movne	r9, r5
   1787c:	addne	r8, sp, #28
   17880:	bne	17948 <__assert_fail@plt+0x6614>
   17884:	ldr	r3, [sp, #12]
   17888:	eor	r3, r3, #1
   1788c:	tst	r5, r3
   17890:	ldr	r3, [r4, #24]
   17894:	ldmeq	r6, {r0, r1, r2}
   17898:	add	r7, r3, r7
   1789c:	movne	r3, #0
   178a0:	strne	r3, [r7, #4]
   178a4:	stmeq	r7, {r0, r1, r2}
   178a8:	ldm	r6, {r0, r1, r2}
   178ac:	ldr	r3, [sp, #8]
   178b0:	stm	r3, {r0, r1, r2}
   178b4:	mov	r0, sl
   178b8:	add	sp, sp, #44	; 0x2c
   178bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178c0:	ldr	r2, [r4, #20]
   178c4:	add	r2, r2, r7
   178c8:	ldr	r0, [r2, #4]
   178cc:	cmp	r0, #0
   178d0:	beq	17864 <__assert_fail@plt+0x6530>
   178d4:	ldr	r2, [r2, #8]
   178d8:	ldr	r2, [r2]
   178dc:	add	r3, r3, r2, lsl #3
   178e0:	ldrb	r3, [r3, #6]
   178e4:	tst	r3, #4
   178e8:	bne	17864 <__assert_fail@plt+0x6530>
   178ec:	ldr	r3, [pc, #204]	; 179c0 <__assert_fail@plt+0x668c>
   178f0:	mov	r2, r5
   178f4:	and	r3, r3, r1, lsr #8
   178f8:	str	r3, [sp]
   178fc:	mov	r1, r5
   17900:	mov	r3, r5
   17904:	mov	r0, r4
   17908:	bl	17340 <__assert_fail@plt+0x600c>
   1790c:	cmp	r0, #0
   17910:	beq	17864 <__assert_fail@plt+0x6530>
   17914:	mov	sl, r0
   17918:	b	178b4 <__assert_fail@plt+0x6580>
   1791c:	ldr	r3, [r3, #8]
   17920:	ldr	r1, [r4, #24]
   17924:	ldr	r2, [r3, r9, lsl #2]
   17928:	mov	r3, #12
   1792c:	mul	fp, r3, r2
   17930:	add	r1, r1, fp
   17934:	ldr	r3, [r1, #4]
   17938:	cmn	r3, #1
   1793c:	bne	17960 <__assert_fail@plt+0x662c>
   17940:	mov	r5, #1
   17944:	add	r9, r9, #1
   17948:	ldr	r3, [r4, #20]
   1794c:	add	r3, r3, r7
   17950:	ldr	r2, [r3, #4]
   17954:	cmp	r9, r2
   17958:	blt	1791c <__assert_fail@plt+0x65e8>
   1795c:	b	17884 <__assert_fail@plt+0x6550>
   17960:	cmp	r3, #0
   17964:	bne	179b0 <__assert_fail@plt+0x667c>
   17968:	mov	r1, r4
   1796c:	mov	r0, r8
   17970:	bl	177dc <__assert_fail@plt+0x64a8>
   17974:	cmp	r0, #0
   17978:	bne	17914 <__assert_fail@plt+0x65e0>
   1797c:	mov	r1, r8
   17980:	mov	r0, r6
   17984:	bl	17678 <__assert_fail@plt+0x6344>
   17988:	cmp	r0, #0
   1798c:	bne	17914 <__assert_fail@plt+0x65e0>
   17990:	ldr	r3, [r4, #24]
   17994:	add	fp, r3, fp
   17998:	ldr	r3, [fp, #4]
   1799c:	cmp	r3, #0
   179a0:	bne	17944 <__assert_fail@plt+0x6610>
   179a4:	ldr	r0, [sp, #36]	; 0x24
   179a8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   179ac:	b	17940 <__assert_fail@plt+0x660c>
   179b0:	ldm	r1, {r0, r1, r2}
   179b4:	stm	r8, {r0, r1, r2}
   179b8:	b	1797c <__assert_fail@plt+0x6648>
   179bc:	andeq	pc, r3, r0, lsl #30
   179c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   179c4:	cmp	r1, #0
   179c8:	push	{r4, r5, r6, lr}
   179cc:	mov	r4, r0
   179d0:	bge	179dc <__assert_fail@plt+0x66a8>
   179d4:	ldr	r0, [r4, #60]	; 0x3c
   179d8:	pop	{r4, r5, r6, pc}
   179dc:	ldr	r3, [r0, #48]	; 0x30
   179e0:	cmp	r1, r3
   179e4:	bne	179f8 <__assert_fail@plt+0x66c4>
   179e8:	tst	r2, #2
   179ec:	movne	r0, #8
   179f0:	moveq	r0, #10
   179f4:	pop	{r4, r5, r6, pc}
   179f8:	ldr	r3, [r0, #80]	; 0x50
   179fc:	cmp	r3, #1
   17a00:	ldrgt	r3, [r0, #8]
   17a04:	bgt	17a38 <__assert_fail@plt+0x6704>
   17a08:	ldr	r3, [r0, #4]
   17a0c:	ldr	r0, [r0, #68]	; 0x44
   17a10:	ldrb	r5, [r3, r1]
   17a14:	mov	r1, r5
   17a18:	bl	13ca4 <__assert_fail@plt+0x2970>
   17a1c:	cmp	r0, #0
   17a20:	bne	17a9c <__assert_fail@plt+0x6768>
   17a24:	cmp	r5, #10
   17a28:	popne	{r4, r5, r6, pc}
   17a2c:	b	17a80 <__assert_fail@plt+0x674c>
   17a30:	subs	r1, r1, #1
   17a34:	bcc	179d4 <__assert_fail@plt+0x66a0>
   17a38:	ldr	r5, [r3, r1, lsl #2]
   17a3c:	cmn	r5, #1
   17a40:	beq	17a30 <__assert_fail@plt+0x66fc>
   17a44:	ldrb	r3, [r4, #78]	; 0x4e
   17a48:	cmp	r3, #0
   17a4c:	beq	17a78 <__assert_fail@plt+0x6744>
   17a50:	mov	r0, r5
   17a54:	bl	11220 <iswalnum@plt>
   17a58:	sub	r3, r5, #95	; 0x5f
   17a5c:	clz	r3, r3
   17a60:	lsr	r3, r3, #5
   17a64:	cmp	r0, #0
   17a68:	moveq	r0, r3
   17a6c:	orrne	r0, r3, #1
   17a70:	cmp	r0, #0
   17a74:	bne	17a9c <__assert_fail@plt+0x6768>
   17a78:	cmp	r5, #10
   17a7c:	bne	17a94 <__assert_fail@plt+0x6760>
   17a80:	ldrb	r0, [r4, #77]	; 0x4d
   17a84:	cmp	r0, #0
   17a88:	movne	r0, #2
   17a8c:	moveq	r0, #0
   17a90:	pop	{r4, r5, r6, pc}
   17a94:	mov	r0, #0
   17a98:	pop	{r4, r5, r6, pc}
   17a9c:	mov	r0, #1
   17aa0:	pop	{r4, r5, r6, pc}
   17aa4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17aa8:	mov	r4, r0
   17aac:	ldr	r5, [r0, #24]
   17ab0:	sub	sp, sp, #28
   17ab4:	cmp	r5, r1
   17ab8:	mov	r6, r1
   17abc:	mov	sl, r2
   17ac0:	suble	r5, r1, r5
   17ac4:	ble	17b24 <__assert_fail@plt+0x67f0>
   17ac8:	ldr	r3, [r0, #80]	; 0x50
   17acc:	mov	r5, r1
   17ad0:	cmp	r3, #1
   17ad4:	ldr	r3, [r0, #44]	; 0x2c
   17ad8:	movgt	r2, #0
   17adc:	str	r3, [r0, #48]	; 0x30
   17ae0:	ldr	r3, [r0, #52]	; 0x34
   17ae4:	strgt	r2, [r0, #16]
   17ae8:	strgt	r2, [r0, #20]
   17aec:	str	r3, [r0, #56]	; 0x38
   17af0:	tst	sl, #1
   17af4:	mov	r3, #0
   17af8:	str	r3, [r0, #28]
   17afc:	str	r3, [r0, #24]
   17b00:	str	r3, [r0, #32]
   17b04:	strb	r3, [r0, #76]	; 0x4c
   17b08:	moveq	r3, #6
   17b0c:	movne	r3, #4
   17b10:	str	r3, [r0, #60]	; 0x3c
   17b14:	ldrb	r3, [r0, #75]	; 0x4b
   17b18:	cmp	r3, #0
   17b1c:	ldreq	r3, [r0]
   17b20:	streq	r3, [r0, #4]
   17b24:	cmp	r5, #0
   17b28:	beq	17c24 <__assert_fail@plt+0x68f0>
   17b2c:	ldr	r3, [r4, #32]
   17b30:	ldr	r8, [r4, #28]
   17b34:	cmp	r5, r3
   17b38:	ldrb	r3, [r4, #76]	; 0x4c
   17b3c:	bge	17dcc <__assert_fail@plt+0x6a98>
   17b40:	cmp	r3, #0
   17b44:	beq	17d5c <__assert_fail@plt+0x6a28>
   17b48:	ldr	r9, [r4, #12]
   17b4c:	mov	r3, r8
   17b50:	mov	r2, #0
   17b54:	add	r7, r2, r3
   17b58:	add	r7, r7, r7, lsr #31
   17b5c:	asr	r7, r7, #1
   17b60:	ldr	r1, [r9, r7, lsl #2]
   17b64:	cmp	r5, r1
   17b68:	blt	17c70 <__assert_fail@plt+0x693c>
   17b6c:	ble	17b84 <__assert_fail@plt+0x6850>
   17b70:	add	r2, r7, #1
   17b74:	cmp	r2, r3
   17b78:	blt	17b54 <__assert_fail@plt+0x6820>
   17b7c:	cmp	r5, r1
   17b80:	addgt	r7, r7, #1
   17b84:	mov	r2, sl
   17b88:	sub	r1, r7, #1
   17b8c:	mov	r0, r4
   17b90:	bl	179c4 <__assert_fail@plt+0x6690>
   17b94:	cmp	r5, r8
   17b98:	movge	r3, #0
   17b9c:	movlt	r3, #1
   17ba0:	cmp	r5, r7
   17ba4:	movne	r3, #0
   17ba8:	cmp	r3, #0
   17bac:	str	r0, [r4, #60]	; 0x3c
   17bb0:	beq	17c94 <__assert_fail@plt+0x6960>
   17bb4:	ldr	r3, [r9, r7, lsl #2]
   17bb8:	cmp	r5, r3
   17bbc:	bne	17c94 <__assert_fail@plt+0x6960>
   17bc0:	ldr	r0, [r4, #8]
   17bc4:	sub	r2, r8, r5
   17bc8:	add	r1, r0, r5, lsl #2
   17bcc:	lsl	r2, r2, #2
   17bd0:	bl	1107c <memmove@plt>
   17bd4:	ldr	r0, [r4, #4]
   17bd8:	ldr	r2, [r4, #28]
   17bdc:	add	r1, r0, r5
   17be0:	sub	r2, r2, r5
   17be4:	bl	1107c <memmove@plt>
   17be8:	ldr	r3, [r4, #28]
   17bec:	sub	r3, r3, r5
   17bf0:	str	r3, [r4, #28]
   17bf4:	ldr	r3, [r4, #32]
   17bf8:	sub	r3, r3, r5
   17bfc:	str	r3, [r4, #32]
   17c00:	mov	r3, #0
   17c04:	ldr	r2, [r4, #28]
   17c08:	cmp	r3, r2
   17c0c:	blt	17c78 <__assert_fail@plt+0x6944>
   17c10:	ldrb	r3, [r4, #75]	; 0x4b
   17c14:	cmp	r3, #0
   17c18:	ldreq	r3, [r4, #4]
   17c1c:	addeq	r3, r3, r5
   17c20:	streq	r3, [r4, #4]
   17c24:	ldr	r2, [r4, #56]	; 0x38
   17c28:	ldr	r3, [r4, #48]	; 0x30
   17c2c:	str	r6, [r4, #24]
   17c30:	sub	r3, r3, r5
   17c34:	sub	r5, r2, r5
   17c38:	ldr	r2, [r4, #80]	; 0x50
   17c3c:	str	r3, [r4, #48]	; 0x30
   17c40:	cmp	r2, #1
   17c44:	str	r5, [r4, #56]	; 0x38
   17c48:	ble	180a4 <__assert_fail@plt+0x6d70>
   17c4c:	ldrb	r3, [r4, #72]	; 0x48
   17c50:	mov	r0, r4
   17c54:	cmp	r3, #0
   17c58:	beq	18094 <__assert_fail@plt+0x6d60>
   17c5c:	bl	14ac8 <__assert_fail@plt+0x3794>
   17c60:	cmp	r0, #0
   17c64:	beq	18098 <__assert_fail@plt+0x6d64>
   17c68:	add	sp, sp, #28
   17c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c70:	mov	r3, r7
   17c74:	b	17b74 <__assert_fail@plt+0x6840>
   17c78:	ldr	r1, [r4, #12]
   17c7c:	add	r2, r5, r3
   17c80:	ldr	r2, [r1, r2, lsl #2]
   17c84:	sub	r2, r2, r5
   17c88:	str	r2, [r1, r3, lsl #2]
   17c8c:	add	r3, r3, #1
   17c90:	b	17c04 <__assert_fail@plt+0x68d0>
   17c94:	ldr	r3, [r4, #44]	; 0x2c
   17c98:	sub	r3, r3, r6
   17c9c:	add	r3, r3, r5
   17ca0:	str	r3, [r4, #48]	; 0x30
   17ca4:	ldr	r3, [r4, #52]	; 0x34
   17ca8:	sub	r3, r3, r6
   17cac:	add	r3, r3, r5
   17cb0:	str	r3, [r4, #56]	; 0x38
   17cb4:	mov	r3, #0
   17cb8:	strb	r3, [r4, #76]	; 0x4c
   17cbc:	add	r3, r9, r7, lsl #2
   17cc0:	cmp	r7, #0
   17cc4:	ble	17cd4 <__assert_fail@plt+0x69a0>
   17cc8:	ldr	r2, [r3, #-4]!
   17ccc:	cmp	r5, r2
   17cd0:	beq	17d10 <__assert_fail@plt+0x69dc>
   17cd4:	lsl	r3, r7, #2
   17cd8:	cmp	r7, r8
   17cdc:	blt	17d18 <__assert_fail@plt+0x69e4>
   17ce0:	moveq	r3, #0
   17ce4:	streq	r3, [r4, #28]
   17ce8:	beq	17d08 <__assert_fail@plt+0x69d4>
   17cec:	ldr	r3, [r9, r7, lsl #2]
   17cf0:	sub	r3, r3, r5
   17cf4:	cmp	r3, #0
   17cf8:	str	r3, [r4, #28]
   17cfc:	mvnne	r1, #0
   17d00:	movne	r3, #0
   17d04:	bne	17d40 <__assert_fail@plt+0x6a0c>
   17d08:	ldr	r3, [r4, #28]
   17d0c:	b	17dc4 <__assert_fail@plt+0x6a90>
   17d10:	sub	r7, r7, #1
   17d14:	b	17cc0 <__assert_fail@plt+0x698c>
   17d18:	ldr	r2, [r4, #8]
   17d1c:	ldr	r2, [r2, r3]
   17d20:	add	r3, r3, #4
   17d24:	cmn	r2, #1
   17d28:	bne	17cec <__assert_fail@plt+0x69b8>
   17d2c:	add	r7, r7, #1
   17d30:	b	17cd8 <__assert_fail@plt+0x69a4>
   17d34:	ldr	r2, [r4, #8]
   17d38:	str	r1, [r2, r3, lsl #2]
   17d3c:	add	r3, r3, #1
   17d40:	ldr	r2, [r4, #28]
   17d44:	cmp	r3, r2
   17d48:	blt	17d34 <__assert_fail@plt+0x6a00>
   17d4c:	mov	r1, #255	; 0xff
   17d50:	ldr	r0, [r4, #4]
   17d54:	bl	11238 <memset@plt>
   17d58:	b	17d08 <__assert_fail@plt+0x69d4>
   17d5c:	mov	r2, sl
   17d60:	sub	r1, r5, #1
   17d64:	mov	r0, r4
   17d68:	bl	179c4 <__assert_fail@plt+0x6690>
   17d6c:	ldr	r3, [r4, #80]	; 0x50
   17d70:	cmp	r3, #1
   17d74:	str	r0, [r4, #60]	; 0x3c
   17d78:	ble	17d90 <__assert_fail@plt+0x6a5c>
   17d7c:	ldr	r0, [r4, #8]
   17d80:	sub	r2, r8, r5
   17d84:	add	r1, r0, r5, lsl #2
   17d88:	lsl	r2, r2, #2
   17d8c:	bl	1107c <memmove@plt>
   17d90:	ldrb	r3, [r4, #75]	; 0x4b
   17d94:	cmp	r3, #0
   17d98:	beq	17db0 <__assert_fail@plt+0x6a7c>
   17d9c:	ldr	r0, [r4, #4]
   17da0:	ldr	r2, [r4, #28]
   17da4:	add	r1, r0, r5
   17da8:	sub	r2, r2, r5
   17dac:	bl	1107c <memmove@plt>
   17db0:	ldr	r3, [r4, #28]
   17db4:	sub	r3, r3, r5
   17db8:	str	r3, [r4, #28]
   17dbc:	ldr	r3, [r4, #32]
   17dc0:	sub	r3, r3, r5
   17dc4:	str	r3, [r4, #32]
   17dc8:	b	17c10 <__assert_fail@plt+0x68dc>
   17dcc:	cmp	r3, #0
   17dd0:	beq	17dfc <__assert_fail@plt+0x6ac8>
   17dd4:	ldr	r3, [r4, #44]	; 0x2c
   17dd8:	sub	r3, r3, r6
   17ddc:	add	r3, r3, r5
   17de0:	str	r3, [r4, #48]	; 0x30
   17de4:	ldr	r3, [r4, #52]	; 0x34
   17de8:	sub	r3, r3, r6
   17dec:	add	r3, r3, r5
   17df0:	str	r3, [r4, #56]	; 0x38
   17df4:	mov	r3, #0
   17df8:	strb	r3, [r4, #76]	; 0x4c
   17dfc:	ldr	r3, [r4, #80]	; 0x50
   17e00:	mov	r2, #0
   17e04:	cmp	r3, #1
   17e08:	str	r2, [r4, #28]
   17e0c:	ldr	r7, [r4, #24]
   17e10:	ble	1803c <__assert_fail@plt+0x6d08>
   17e14:	ldrb	r2, [r4, #73]	; 0x49
   17e18:	cmp	r2, #0
   17e1c:	beq	17ee8 <__assert_fail@plt+0x6bb4>
   17e20:	ldr	r2, [r4]
   17e24:	sub	r3, r5, r3
   17e28:	add	r7, r2, r7
   17e2c:	add	r3, r7, r3
   17e30:	cmp	r2, r3
   17e34:	sub	r9, r5, #1
   17e38:	movcs	r3, r2
   17e3c:	add	r9, r7, r9
   17e40:	cmp	r9, r3
   17e44:	mov	r1, r9
   17e48:	bcc	17ee8 <__assert_fail@plt+0x6bb4>
   17e4c:	ldrb	r2, [r9]
   17e50:	sub	r0, r9, #1
   17e54:	and	r2, r2, #192	; 0xc0
   17e58:	cmp	r2, #128	; 0x80
   17e5c:	beq	17f64 <__assert_fail@plt+0x6c30>
   17e60:	ldr	r2, [r4, #48]	; 0x30
   17e64:	ldr	r0, [r4, #64]	; 0x40
   17e68:	add	r2, r7, r2
   17e6c:	cmp	r0, #0
   17e70:	sub	r2, r2, r9
   17e74:	beq	17e90 <__assert_fail@plt+0x6b5c>
   17e78:	cmp	r2, #6
   17e7c:	movlt	r3, r2
   17e80:	movge	r3, #6
   17e84:	add	r1, sp, #8
   17e88:	subs	r3, r3, #1
   17e8c:	bpl	17f54 <__assert_fail@plt+0x6c20>
   17e90:	add	r3, sp, #16
   17e94:	mov	fp, #0
   17e98:	add	r0, sp, #4
   17e9c:	str	fp, [sp, #16]
   17ea0:	str	fp, [sp, #20]
   17ea4:	bl	1ffa4 <__assert_fail@plt+0xec70>
   17ea8:	add	r7, r7, r5
   17eac:	sub	r9, r7, r9
   17eb0:	cmp	r0, r9
   17eb4:	movcc	r3, #0
   17eb8:	movcs	r3, #1
   17ebc:	cmn	r0, #3
   17ec0:	movhi	r3, #0
   17ec4:	cmp	r3, fp
   17ec8:	beq	17ee8 <__assert_fail@plt+0x6bb4>
   17ecc:	str	fp, [r4, #16]
   17ed0:	str	fp, [r4, #20]
   17ed4:	ldr	fp, [sp, #4]
   17ed8:	sub	r0, r0, r9
   17edc:	cmn	fp, #1
   17ee0:	str	r0, [r4, #28]
   17ee4:	bne	17fd8 <__assert_fail@plt+0x6ca4>
   17ee8:	ldr	r7, [r4, #24]
   17eec:	ldr	r3, [r4, #32]
   17ef0:	mvn	fp, #0
   17ef4:	add	r7, r7, r3
   17ef8:	cmp	r6, r7
   17efc:	bgt	17f6c <__assert_fail@plt+0x6c38>
   17f00:	sub	r7, r7, r6
   17f04:	cmn	fp, #1
   17f08:	str	r7, [r4, #28]
   17f0c:	bne	17fd8 <__assert_fail@plt+0x6ca4>
   17f10:	mov	r2, sl
   17f14:	sub	r1, r8, #1
   17f18:	mov	r0, r4
   17f1c:	bl	179c4 <__assert_fail@plt+0x6690>
   17f20:	str	r0, [r4, #60]	; 0x3c
   17f24:	ldr	r3, [r4, #28]
   17f28:	cmp	r3, #0
   17f2c:	movne	r3, #0
   17f30:	mvnne	r1, #0
   17f34:	beq	17d08 <__assert_fail@plt+0x69d4>
   17f38:	ldr	r2, [r4, #28]
   17f3c:	cmp	r3, r2
   17f40:	blt	1802c <__assert_fail@plt+0x6cf8>
   17f44:	ldrb	r3, [r4, #75]	; 0x4b
   17f48:	cmp	r3, #0
   17f4c:	beq	17d08 <__assert_fail@plt+0x69d4>
   17f50:	b	17d4c <__assert_fail@plt+0x6a18>
   17f54:	ldrb	ip, [r9, r3]
   17f58:	ldrb	ip, [r0, ip]
   17f5c:	strb	ip, [r1, r3]
   17f60:	b	17e88 <__assert_fail@plt+0x6b54>
   17f64:	mov	r9, r0
   17f68:	b	17e40 <__assert_fail@plt+0x6b0c>
   17f6c:	add	r9, r4, #16
   17f70:	add	r3, sp, #16
   17f74:	ldm	r9, {r0, r1}
   17f78:	ldr	fp, [r4, #44]	; 0x2c
   17f7c:	stm	r3, {r0, r1}
   17f80:	ldr	r1, [r4]
   17f84:	sub	fp, fp, r7
   17f88:	mov	r3, r9
   17f8c:	mov	r2, fp
   17f90:	add	r1, r1, r7
   17f94:	add	r0, sp, #8
   17f98:	bl	1ffa4 <__assert_fail@plt+0xec70>
   17f9c:	sub	r3, r0, #1
   17fa0:	cmn	r3, #4
   17fa4:	ldrls	fp, [sp, #8]
   17fa8:	bls	17fd0 <__assert_fail@plt+0x6c9c>
   17fac:	cmp	fp, #0
   17fb0:	cmpne	r0, #0
   17fb4:	moveq	fp, #0
   17fb8:	ldrne	r3, [r4]
   17fbc:	ldrbne	fp, [r3, r7]
   17fc0:	add	r3, sp, #16
   17fc4:	ldm	r3, {r0, r1}
   17fc8:	stm	r9, {r0, r1}
   17fcc:	mov	r0, #1
   17fd0:	add	r7, r7, r0
   17fd4:	b	17ef8 <__assert_fail@plt+0x6bc4>
   17fd8:	ldrb	r3, [r4, #78]	; 0x4e
   17fdc:	cmp	r3, #0
   17fe0:	beq	18008 <__assert_fail@plt+0x6cd4>
   17fe4:	mov	r0, fp
   17fe8:	bl	11220 <iswalnum@plt>
   17fec:	cmp	fp, #95	; 0x5f
   17ff0:	clz	r0, r0
   17ff4:	lsr	r0, r0, #5
   17ff8:	moveq	r0, #0
   17ffc:	cmp	r0, #0
   18000:	moveq	r3, #1
   18004:	beq	18024 <__assert_fail@plt+0x6cf0>
   18008:	cmp	fp, #10
   1800c:	movne	r3, #0
   18010:	bne	18024 <__assert_fail@plt+0x6cf0>
   18014:	ldrb	r3, [r4, #77]	; 0x4d
   18018:	cmp	r3, #0
   1801c:	movne	r3, #2
   18020:	moveq	r3, #0
   18024:	str	r3, [r4, #60]	; 0x3c
   18028:	b	17f24 <__assert_fail@plt+0x6bf0>
   1802c:	ldr	r2, [r4, #8]
   18030:	str	r1, [r2, r3, lsl #2]
   18034:	add	r3, r3, #1
   18038:	b	17f38 <__assert_fail@plt+0x6c04>
   1803c:	ldr	r3, [r4]
   18040:	ldr	r0, [r4, #68]	; 0x44
   18044:	add	r3, r3, r5
   18048:	add	r7, r3, r7
   1804c:	ldr	r3, [r4, #64]	; 0x40
   18050:	ldrb	r7, [r7, #-1]
   18054:	cmp	r3, #0
   18058:	str	r2, [r4, #32]
   1805c:	ldrbne	r7, [r3, r7]
   18060:	mov	r1, r7
   18064:	bl	13ca4 <__assert_fail@plt+0x2970>
   18068:	cmp	r0, #0
   1806c:	movne	r0, #1
   18070:	bne	1808c <__assert_fail@plt+0x6d58>
   18074:	cmp	r7, #10
   18078:	bne	1808c <__assert_fail@plt+0x6d58>
   1807c:	ldrb	r0, [r4, #77]	; 0x4d
   18080:	cmp	r0, #0
   18084:	movne	r0, #2
   18088:	moveq	r0, #0
   1808c:	str	r0, [r4, #60]	; 0x3c
   18090:	b	17c10 <__assert_fail@plt+0x68dc>
   18094:	bl	14974 <__assert_fail@plt+0x3640>
   18098:	mov	r0, #0
   1809c:	str	r0, [r4, #40]	; 0x28
   180a0:	b	17c68 <__assert_fail@plt+0x6934>
   180a4:	ldrb	r2, [r4, #75]	; 0x4b
   180a8:	cmp	r2, #0
   180ac:	streq	r3, [r4, #28]
   180b0:	beq	18098 <__assert_fail@plt+0x6d64>
   180b4:	ldrb	r3, [r4, #72]	; 0x48
   180b8:	cmp	r3, #0
   180bc:	beq	180cc <__assert_fail@plt+0x6d98>
   180c0:	mov	r0, r4
   180c4:	bl	14f98 <__assert_fail@plt+0x3c64>
   180c8:	b	18098 <__assert_fail@plt+0x6d64>
   180cc:	ldr	r3, [r4, #64]	; 0x40
   180d0:	cmp	r3, #0
   180d4:	beq	18098 <__assert_fail@plt+0x6d64>
   180d8:	mov	r0, r4
   180dc:	bl	13db8 <__assert_fail@plt+0x2a84>
   180e0:	b	18098 <__assert_fail@plt+0x6d64>
   180e4:	ldr	r3, [r0, #4]
   180e8:	push	{r4, r5, r6, lr}
   180ec:	mov	r5, r1
   180f0:	ldrb	r1, [r3, r2]
   180f4:	ldrb	r3, [r5, #4]
   180f8:	mov	r4, r0
   180fc:	mov	r6, r2
   18100:	sub	r3, r3, #1
   18104:	cmp	r3, #6
   18108:	ldrls	pc, [pc, r3, lsl #2]
   1810c:	b	181f8 <__assert_fail@plt+0x6ec4>
   18110:	andeq	r8, r1, ip, lsr #2
   18114:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18118:	andeq	r8, r1, r8, lsr #3
   1811c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18120:	andeq	r8, r1, r4, asr #3
   18124:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18128:			; <UNDEFINED> instruction: 0x000181bc
   1812c:	ldrb	r3, [r5]
   18130:	cmp	r3, r1
   18134:	bne	181f8 <__assert_fail@plt+0x6ec4>
   18138:	ldr	r5, [r5, #4]
   1813c:	ldr	r2, [pc, #196]	; 18208 <__assert_fail@plt+0x6ed4>
   18140:	and	r2, r2, r5
   18144:	cmp	r2, #0
   18148:	beq	18200 <__assert_fail@plt+0x6ecc>
   1814c:	ldr	r2, [r4, #88]	; 0x58
   18150:	mov	r1, r6
   18154:	mov	r0, r4
   18158:	bl	179c4 <__assert_fail@plt+0x6690>
   1815c:	ldr	r3, [pc, #168]	; 1820c <__assert_fail@plt+0x6ed8>
   18160:	and	r3, r3, r5, lsr #8
   18164:	tst	r3, #4
   18168:	beq	18174 <__assert_fail@plt+0x6e40>
   1816c:	ands	r1, r0, #1
   18170:	beq	181f8 <__assert_fail@plt+0x6ec4>
   18174:	tst	r3, #8
   18178:	beq	18184 <__assert_fail@plt+0x6e50>
   1817c:	tst	r0, #1
   18180:	bne	181f8 <__assert_fail@plt+0x6ec4>
   18184:	tst	r3, #32
   18188:	beq	18194 <__assert_fail@plt+0x6e60>
   1818c:	ands	r1, r0, #2
   18190:	beq	181f8 <__assert_fail@plt+0x6ec4>
   18194:	tst	r3, #128	; 0x80
   18198:	beq	18200 <__assert_fail@plt+0x6ecc>
   1819c:	lsr	r0, r0, #3
   181a0:	and	r0, r0, #1
   181a4:	pop	{r4, r5, r6, pc}
   181a8:	ldr	r0, [r5]
   181ac:	bl	13ca4 <__assert_fail@plt+0x2970>
   181b0:	cmp	r0, #0
   181b4:	bne	18138 <__assert_fail@plt+0x6e04>
   181b8:	pop	{r4, r5, r6, pc}
   181bc:	tst	r1, #128	; 0x80
   181c0:	bne	181f8 <__assert_fail@plt+0x6ec4>
   181c4:	cmp	r1, #10
   181c8:	bne	181e0 <__assert_fail@plt+0x6eac>
   181cc:	ldr	r3, [r4, #84]	; 0x54
   181d0:	ldr	r0, [r3, #128]	; 0x80
   181d4:	ands	r0, r0, #64	; 0x40
   181d8:	bne	18138 <__assert_fail@plt+0x6e04>
   181dc:	pop	{r4, r5, r6, pc}
   181e0:	cmp	r1, #0
   181e4:	bne	18138 <__assert_fail@plt+0x6e04>
   181e8:	ldr	r3, [r4, #84]	; 0x54
   181ec:	ldr	r3, [r3, #128]	; 0x80
   181f0:	tst	r3, #128	; 0x80
   181f4:	beq	18138 <__assert_fail@plt+0x6e04>
   181f8:	mov	r0, #0
   181fc:	pop	{r4, r5, r6, pc}
   18200:	mov	r0, #1
   18204:	pop	{r4, r5, r6, pc}
   18208:	andeq	pc, r3, r0, lsl #30
   1820c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   18210:	push	{r4, r5, r6, r7, r8, lr}
   18214:	mov	r5, r1
   18218:	mov	r1, r2
   1821c:	ldr	r2, [r0, #88]	; 0x58
   18220:	mov	r4, r0
   18224:	bl	179c4 <__assert_fail@plt+0x6690>
   18228:	ldr	r6, [pc, #152]	; 182c8 <__assert_fail@plt+0x6f94>
   1822c:	ldr	lr, [r5, #8]
   18230:	mov	ip, #0
   18234:	and	r7, r0, #8
   18238:	and	r8, r0, #2
   1823c:	and	r1, r0, #1
   18240:	cmp	ip, lr
   18244:	blt	18250 <__assert_fail@plt+0x6f1c>
   18248:	mov	r0, #0
   1824c:	pop	{r4, r5, r6, r7, r8, pc}
   18250:	ldr	r3, [r5, #12]
   18254:	ldr	r0, [r3, ip, lsl #2]
   18258:	ldr	r3, [r4, #84]	; 0x54
   1825c:	ldr	r2, [r3]
   18260:	add	r2, r2, r0, lsl #3
   18264:	ldr	r3, [r2, #4]
   18268:	ldrb	r2, [r2, #4]
   1826c:	and	r3, r6, r3, lsr #8
   18270:	cmp	r2, #2
   18274:	bne	182c0 <__assert_fail@plt+0x6f8c>
   18278:	cmp	r3, #0
   1827c:	popeq	{r4, r5, r6, r7, r8, pc}
   18280:	tst	r3, #4
   18284:	beq	18290 <__assert_fail@plt+0x6f5c>
   18288:	cmp	r1, #0
   1828c:	beq	182c0 <__assert_fail@plt+0x6f8c>
   18290:	tst	r3, #8
   18294:	beq	182a0 <__assert_fail@plt+0x6f6c>
   18298:	cmp	r1, #0
   1829c:	bne	182c0 <__assert_fail@plt+0x6f8c>
   182a0:	tst	r3, #32
   182a4:	beq	182b0 <__assert_fail@plt+0x6f7c>
   182a8:	cmp	r8, #0
   182ac:	beq	182c0 <__assert_fail@plt+0x6f8c>
   182b0:	tst	r3, #128	; 0x80
   182b4:	popeq	{r4, r5, r6, r7, r8, pc}
   182b8:	cmp	r7, #0
   182bc:	popne	{r4, r5, r6, r7, r8, pc}
   182c0:	add	ip, ip, #1
   182c4:	b	18240 <__assert_fail@plt+0x6f0c>
   182c8:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   182cc:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   182d0:	ldr	r3, [r1, #56]	; 0x38
   182d4:	ldr	r6, [r1, #40]	; 0x28
   182d8:	cmp	r3, r6
   182dc:	movle	r3, #2
   182e0:	strble	r3, [r0, #4]
   182e4:	movle	r0, #0
   182e8:	ble	1834c <__assert_fail@plt+0x7018>
   182ec:	ldr	r9, [r1, #4]
   182f0:	ldrb	r3, [r0, #6]
   182f4:	mov	r5, r2
   182f8:	ldrb	r8, [r9, r6]
   182fc:	and	r3, r3, #159	; 0x9f
   18300:	strb	r3, [r0, #6]
   18304:	strb	r8, [r0]
   18308:	ldr	r2, [r1, #80]	; 0x50
   1830c:	mov	r7, r1
   18310:	cmp	r2, #1
   18314:	mov	r4, r0
   18318:	ble	188ac <__assert_fail@plt+0x7578>
   1831c:	ldr	r3, [r1, #28]
   18320:	cmp	r6, r3
   18324:	beq	1887c <__assert_fail@plt+0x7548>
   18328:	ldr	r3, [r1, #8]
   1832c:	ldr	r3, [r3, r6, lsl #2]
   18330:	cmn	r3, #1
   18334:	bne	1887c <__assert_fail@plt+0x7548>
   18338:	ldrb	r3, [r4, #6]
   1833c:	mov	r0, #1
   18340:	strb	r0, [r4, #4]
   18344:	orr	r3, r3, #32
   18348:	strb	r3, [r4, #6]
   1834c:	add	sp, sp, #8
   18350:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18354:	cmp	r2, #1
   18358:	ble	18390 <__assert_fail@plt+0x705c>
   1835c:	ldr	r3, [r7, #8]
   18360:	lsl	r0, r1, #2
   18364:	ldr	ip, [r3, r1, lsl #2]
   18368:	cmn	ip, #1
   1836c:	beq	188a4 <__assert_fail@plt+0x7570>
   18370:	ldr	ip, [r7, #28]
   18374:	add	r6, r6, #2
   18378:	cmp	ip, r6
   1837c:	beq	18390 <__assert_fail@plt+0x705c>
   18380:	add	r3, r3, r0
   18384:	ldr	r3, [r3, #4]
   18388:	cmn	r3, #1
   1838c:	beq	188a4 <__assert_fail@plt+0x7570>
   18390:	ldrb	r0, [r7, #76]	; 0x4c
   18394:	ldr	lr, [r7, #24]
   18398:	cmp	r0, #0
   1839c:	moveq	ip, r1
   183a0:	ldrne	r3, [r7, #12]
   183a4:	ldrne	ip, [r3, r1, lsl #2]
   183a8:	ldr	r3, [r7]
   183ac:	cmp	r0, #0
   183b0:	add	r3, r3, ip
   183b4:	ldrb	r6, [r3, lr]
   183b8:	beq	183c4 <__assert_fail@plt+0x7090>
   183bc:	tst	r6, #128	; 0x80
   183c0:	bne	188a4 <__assert_fail@plt+0x7570>
   183c4:	mov	r3, #1
   183c8:	cmp	r2, r3
   183cc:	strb	r6, [r4]
   183d0:	strb	r3, [r4, #4]
   183d4:	ldrb	r8, [r4, #6]
   183d8:	ble	18440 <__assert_fail@plt+0x710c>
   183dc:	mov	r0, r7
   183e0:	bl	13d9c <__assert_fail@plt+0x2a68>
   183e4:	bic	r8, r8, #64	; 0x40
   183e8:	mov	r7, r0
   183ec:	bl	11220 <iswalnum@plt>
   183f0:	adds	r0, r0, #0
   183f4:	movne	r0, #1
   183f8:	cmp	r7, #95	; 0x5f
   183fc:	orreq	r0, r0, #1
   18400:	orr	r8, r8, r0, lsl #6
   18404:	strb	r8, [r4, #6]
   18408:	cmp	r6, #66	; 0x42
   1840c:	beq	185b4 <__assert_fail@plt+0x7280>
   18410:	bhi	184d0 <__assert_fail@plt+0x719c>
   18414:	cmp	r6, #57	; 0x39
   18418:	bhi	1849c <__assert_fail@plt+0x7168>
   1841c:	cmp	r6, #49	; 0x31
   18420:	bcs	18584 <__assert_fail@plt+0x7250>
   18424:	cmp	r6, #40	; 0x28
   18428:	beq	1861c <__assert_fail@plt+0x72e8>
   1842c:	bhi	18470 <__assert_fail@plt+0x713c>
   18430:	cmp	r6, #39	; 0x27
   18434:	beq	18604 <__assert_fail@plt+0x72d0>
   18438:	mov	r0, #2
   1843c:	b	1834c <__assert_fail@plt+0x7018>
   18440:	bl	111e4 <__ctype_b_loc@plt>
   18444:	lsl	r3, r6, #1
   18448:	bic	r8, r8, #64	; 0x40
   1844c:	ldr	r2, [r0]
   18450:	ldrh	r3, [r2, r3]
   18454:	lsr	r3, r3, #3
   18458:	and	r3, r3, #1
   1845c:	cmp	r6, #95	; 0x5f
   18460:	orreq	r3, r3, #1
   18464:	orr	r3, r8, r3, lsl #6
   18468:	strb	r3, [r4, #6]
   1846c:	b	18408 <__assert_fail@plt+0x70d4>
   18470:	cmp	r6, #41	; 0x29
   18474:	beq	1862c <__assert_fail@plt+0x72f8>
   18478:	cmp	r6, #43	; 0x2b
   1847c:	bne	18438 <__assert_fail@plt+0x7104>
   18480:	ldr	r0, [pc, #1128]	; 188f0 <__assert_fail@plt+0x75bc>
   18484:	and	r0, r0, r5
   18488:	cmp	r0, #2
   1848c:	moveq	r3, #18
   18490:	bne	18438 <__assert_fail@plt+0x7104>
   18494:	strb	r3, [r4, #4]
   18498:	b	1834c <__assert_fail@plt+0x7018>
   1849c:	cmp	r6, #62	; 0x3e
   184a0:	beq	1859c <__assert_fail@plt+0x7268>
   184a4:	cmp	r6, #63	; 0x3f
   184a8:	beq	1863c <__assert_fail@plt+0x7308>
   184ac:	cmp	r6, #60	; 0x3c
   184b0:	bne	18438 <__assert_fail@plt+0x7104>
   184b4:	tst	r5, #524288	; 0x80000
   184b8:	moveq	r3, #12
   184bc:	strbeq	r3, [r4, #4]
   184c0:	moveq	r3, #6
   184c4:	bne	18438 <__assert_fail@plt+0x7104>
   184c8:	str	r3, [r4]
   184cc:	b	18438 <__assert_fail@plt+0x7104>
   184d0:	cmp	r6, #115	; 0x73
   184d4:	beq	185dc <__assert_fail@plt+0x72a8>
   184d8:	bhi	18528 <__assert_fail@plt+0x71f4>
   184dc:	cmp	r6, #87	; 0x57
   184e0:	beq	185cc <__assert_fail@plt+0x7298>
   184e4:	bhi	18500 <__assert_fail@plt+0x71cc>
   184e8:	cmp	r6, #83	; 0x53
   184ec:	bne	18438 <__assert_fail@plt+0x7104>
   184f0:	tst	r5, #524288	; 0x80000
   184f4:	moveq	r3, #35	; 0x23
   184f8:	beq	1857c <__assert_fail@plt+0x7248>
   184fc:	b	18438 <__assert_fail@plt+0x7104>
   18500:	cmp	r6, #96	; 0x60
   18504:	beq	185ec <__assert_fail@plt+0x72b8>
   18508:	cmp	r6, #98	; 0x62
   1850c:	bne	18438 <__assert_fail@plt+0x7104>
   18510:	tst	r5, #524288	; 0x80000
   18514:	moveq	r3, #12
   18518:	strbeq	r3, [r4, #4]
   1851c:	moveq	r3, #256	; 0x100
   18520:	beq	184c8 <__assert_fail@plt+0x7194>
   18524:	b	18438 <__assert_fail@plt+0x7104>
   18528:	cmp	r6, #123	; 0x7b
   1852c:	beq	18654 <__assert_fail@plt+0x7320>
   18530:	bhi	1854c <__assert_fail@plt+0x7218>
   18534:	cmp	r6, #119	; 0x77
   18538:	bne	18438 <__assert_fail@plt+0x7104>
   1853c:	tst	r5, #524288	; 0x80000
   18540:	moveq	r3, #32
   18544:	beq	1857c <__assert_fail@plt+0x7248>
   18548:	b	18438 <__assert_fail@plt+0x7104>
   1854c:	cmp	r6, #124	; 0x7c
   18550:	beq	18570 <__assert_fail@plt+0x723c>
   18554:	cmp	r6, #125	; 0x7d
   18558:	bne	18438 <__assert_fail@plt+0x7104>
   1855c:	and	r5, r5, #4608	; 0x1200
   18560:	cmp	r5, #512	; 0x200
   18564:	bne	18438 <__assert_fail@plt+0x7104>
   18568:	mov	r3, #24
   1856c:	b	1857c <__assert_fail@plt+0x7248>
   18570:	tst	r5, #33792	; 0x8400
   18574:	moveq	r3, #10
   18578:	bne	18438 <__assert_fail@plt+0x7104>
   1857c:	strb	r3, [r4, #4]
   18580:	b	18438 <__assert_fail@plt+0x7104>
   18584:	tst	r5, #16384	; 0x4000
   18588:	moveq	r3, #4
   1858c:	subeq	r6, r6, #49	; 0x31
   18590:	strbeq	r3, [r4, #4]
   18594:	streq	r6, [r4]
   18598:	b	18438 <__assert_fail@plt+0x7104>
   1859c:	tst	r5, #524288	; 0x80000
   185a0:	moveq	r3, #12
   185a4:	strbeq	r3, [r4, #4]
   185a8:	moveq	r3, #9
   185ac:	beq	184c8 <__assert_fail@plt+0x7194>
   185b0:	b	18438 <__assert_fail@plt+0x7104>
   185b4:	tst	r5, #524288	; 0x80000
   185b8:	moveq	r3, #12
   185bc:	strbeq	r3, [r4, #4]
   185c0:	moveq	r3, #512	; 0x200
   185c4:	beq	184c8 <__assert_fail@plt+0x7194>
   185c8:	b	18438 <__assert_fail@plt+0x7104>
   185cc:	tst	r5, #524288	; 0x80000
   185d0:	moveq	r3, #33	; 0x21
   185d4:	beq	1857c <__assert_fail@plt+0x7248>
   185d8:	b	18438 <__assert_fail@plt+0x7104>
   185dc:	tst	r5, #524288	; 0x80000
   185e0:	moveq	r3, #34	; 0x22
   185e4:	beq	1857c <__assert_fail@plt+0x7248>
   185e8:	b	18438 <__assert_fail@plt+0x7104>
   185ec:	tst	r5, #524288	; 0x80000
   185f0:	moveq	r3, #12
   185f4:	strbeq	r3, [r4, #4]
   185f8:	moveq	r3, #64	; 0x40
   185fc:	beq	184c8 <__assert_fail@plt+0x7194>
   18600:	b	18438 <__assert_fail@plt+0x7104>
   18604:	tst	r5, #524288	; 0x80000
   18608:	bne	18438 <__assert_fail@plt+0x7104>
   1860c:	mov	r3, #12
   18610:	strb	r3, [r4, #4]
   18614:	mov	r3, #128	; 0x80
   18618:	b	184c8 <__assert_fail@plt+0x7194>
   1861c:	tst	r5, #8192	; 0x2000
   18620:	moveq	r3, #8
   18624:	beq	1857c <__assert_fail@plt+0x7248>
   18628:	b	18438 <__assert_fail@plt+0x7104>
   1862c:	tst	r5, #8192	; 0x2000
   18630:	moveq	r3, #9
   18634:	beq	1857c <__assert_fail@plt+0x7248>
   18638:	b	18438 <__assert_fail@plt+0x7104>
   1863c:	ldr	r0, [pc, #684]	; 188f0 <__assert_fail@plt+0x75bc>
   18640:	and	r0, r0, r5
   18644:	cmp	r0, #2
   18648:	bne	18438 <__assert_fail@plt+0x7104>
   1864c:	mov	r3, #19
   18650:	b	18494 <__assert_fail@plt+0x7160>
   18654:	and	r5, r5, #4608	; 0x1200
   18658:	cmp	r5, #512	; 0x200
   1865c:	moveq	r3, #23
   18660:	bne	18438 <__assert_fail@plt+0x7104>
   18664:	b	1857c <__assert_fail@plt+0x7248>
   18668:	cmp	r8, #42	; 0x2a
   1866c:	beq	18708 <__assert_fail@plt+0x73d4>
   18670:	bcc	1874c <__assert_fail@plt+0x7418>
   18674:	cmp	r8, #43	; 0x2b
   18678:	bne	18874 <__assert_fail@plt+0x7540>
   1867c:	ldr	r3, [pc, #620]	; 188f0 <__assert_fail@plt+0x75bc>
   18680:	and	r3, r3, r5
   18684:	cmp	r3, #0
   18688:	moveq	r3, #18
   1868c:	beq	186b4 <__assert_fail@plt+0x7380>
   18690:	b	18874 <__assert_fail@plt+0x7540>
   18694:	cmp	r8, #94	; 0x5e
   18698:	beq	18764 <__assert_fail@plt+0x7430>
   1869c:	bhi	186bc <__assert_fail@plt+0x7388>
   186a0:	cmp	r8, #63	; 0x3f
   186a4:	beq	18710 <__assert_fail@plt+0x73dc>
   186a8:	cmp	r8, #91	; 0x5b
   186ac:	moveq	r3, #20
   186b0:	bne	18874 <__assert_fail@plt+0x7540>
   186b4:	strb	r3, [r4, #4]
   186b8:	b	18874 <__assert_fail@plt+0x7540>
   186bc:	cmp	r8, #124	; 0x7c
   186c0:	beq	186f8 <__assert_fail@plt+0x73c4>
   186c4:	cmp	r8, #125	; 0x7d
   186c8:	beq	18728 <__assert_fail@plt+0x73f4>
   186cc:	cmp	r8, #123	; 0x7b
   186d0:	bne	18874 <__assert_fail@plt+0x7540>
   186d4:	and	r5, r5, #4608	; 0x1200
   186d8:	cmp	r5, #4608	; 0x1200
   186dc:	moveq	r3, #23
   186e0:	bne	18874 <__assert_fail@plt+0x7540>
   186e4:	b	186b4 <__assert_fail@plt+0x7380>
   186e8:	tst	r5, #2048	; 0x800
   186ec:	beq	18874 <__assert_fail@plt+0x7540>
   186f0:	mov	r3, #10
   186f4:	b	186b4 <__assert_fail@plt+0x7380>
   186f8:	and	r5, r5, #33792	; 0x8400
   186fc:	cmp	r5, #32768	; 0x8000
   18700:	bne	18874 <__assert_fail@plt+0x7540>
   18704:	b	186f0 <__assert_fail@plt+0x73bc>
   18708:	mov	r3, #11
   1870c:	b	186b4 <__assert_fail@plt+0x7380>
   18710:	ldr	r3, [pc, #472]	; 188f0 <__assert_fail@plt+0x75bc>
   18714:	and	r3, r3, r5
   18718:	cmp	r3, #0
   1871c:	moveq	r3, #19
   18720:	beq	186b4 <__assert_fail@plt+0x7380>
   18724:	b	18874 <__assert_fail@plt+0x7540>
   18728:	and	r5, r5, #4608	; 0x1200
   1872c:	cmp	r5, #4608	; 0x1200
   18730:	moveq	r3, #24
   18734:	bne	18874 <__assert_fail@plt+0x7540>
   18738:	b	186b4 <__assert_fail@plt+0x7380>
   1873c:	tst	r5, #8192	; 0x2000
   18740:	movne	r3, #8
   18744:	bne	186b4 <__assert_fail@plt+0x7380>
   18748:	b	18874 <__assert_fail@plt+0x7540>
   1874c:	tst	r5, #8192	; 0x2000
   18750:	movne	r3, #9
   18754:	bne	186b4 <__assert_fail@plt+0x7380>
   18758:	b	18874 <__assert_fail@plt+0x7540>
   1875c:	mov	r3, #5
   18760:	b	186b4 <__assert_fail@plt+0x7380>
   18764:	ldr	r3, [pc, #392]	; 188f4 <__assert_fail@plt+0x75c0>
   18768:	cmp	r6, #0
   1876c:	and	r3, r3, r5
   18770:	clz	r3, r3
   18774:	lsr	r3, r3, #5
   18778:	moveq	r3, #0
   1877c:	cmp	r3, #0
   18780:	beq	187a4 <__assert_fail@plt+0x7470>
   18784:	add	r6, r9, r6
   18788:	lsr	r5, r5, #11
   1878c:	ldrb	r2, [r6, #-1]
   18790:	eor	r5, r5, #1
   18794:	cmp	r2, #10
   18798:	orrne	r5, r5, #1
   1879c:	tst	r5, #1
   187a0:	bne	18874 <__assert_fail@plt+0x7540>
   187a4:	mov	r3, #12
   187a8:	strb	r3, [r4, #4]
   187ac:	mov	r3, #16
   187b0:	str	r3, [r4]
   187b4:	b	18874 <__assert_fail@plt+0x7540>
   187b8:	tst	r5, #8
   187bc:	bne	18800 <__assert_fail@plt+0x74cc>
   187c0:	ldr	r3, [r7, #48]	; 0x30
   187c4:	add	r6, r6, #1
   187c8:	cmp	r6, r3
   187cc:	beq	18800 <__assert_fail@plt+0x74cc>
   187d0:	str	r6, [r7, #40]	; 0x28
   187d4:	mov	r2, r5
   187d8:	mov	r1, r7
   187dc:	mov	r0, sp
   187e0:	bl	182cc <__assert_fail@plt+0x6f98>
   187e4:	ldr	r3, [r7, #40]	; 0x28
   187e8:	sub	r3, r3, #1
   187ec:	str	r3, [r7, #40]	; 0x28
   187f0:	ldrb	r3, [sp, #4]
   187f4:	sub	r3, r3, #9
   187f8:	cmp	r3, #1
   187fc:	bhi	18874 <__assert_fail@plt+0x7540>
   18800:	mov	r3, #12
   18804:	strb	r3, [r4, #4]
   18808:	mov	r3, #32
   1880c:	b	187b0 <__assert_fail@plt+0x747c>
   18810:	mov	r3, #1
   18814:	strb	r3, [r4, #4]
   18818:	mov	r1, r6
   1881c:	mov	r0, r7
   18820:	bl	13d9c <__assert_fail@plt+0x2a68>
   18824:	mov	sl, r0
   18828:	bl	11220 <iswalnum@plt>
   1882c:	adds	r3, r0, #0
   18830:	ldrb	r0, [r4, #6]
   18834:	movne	r3, #1
   18838:	cmp	sl, #95	; 0x5f
   1883c:	orreq	r3, r3, #1
   18840:	bic	r0, r0, #64	; 0x40
   18844:	orr	r0, r0, r3, lsl #6
   18848:	strb	r0, [r4, #6]
   1884c:	cmp	r8, #46	; 0x2e
   18850:	beq	1875c <__assert_fail@plt+0x7428>
   18854:	bhi	18694 <__assert_fail@plt+0x7360>
   18858:	cmp	r8, #40	; 0x28
   1885c:	beq	1873c <__assert_fail@plt+0x7408>
   18860:	bhi	18668 <__assert_fail@plt+0x7334>
   18864:	cmp	r8, #10
   18868:	beq	186e8 <__assert_fail@plt+0x73b4>
   1886c:	cmp	r8, #36	; 0x24
   18870:	beq	187b8 <__assert_fail@plt+0x7484>
   18874:	mov	r0, #1
   18878:	b	1834c <__assert_fail@plt+0x7018>
   1887c:	cmp	r8, #92	; 0x5c
   18880:	bne	18810 <__assert_fail@plt+0x74dc>
   18884:	ldr	r3, [r7, #48]	; 0x30
   18888:	add	r1, r6, #1
   1888c:	cmp	r1, r3
   18890:	movge	r3, #36	; 0x24
   18894:	bge	186b4 <__assert_fail@plt+0x7380>
   18898:	ldrb	r3, [r7, #75]	; 0x4b
   1889c:	cmp	r3, #0
   188a0:	bne	18354 <__assert_fail@plt+0x7020>
   188a4:	ldrb	r6, [r9, r1]
   188a8:	b	183c4 <__assert_fail@plt+0x7090>
   188ac:	cmp	r8, #92	; 0x5c
   188b0:	beq	18884 <__assert_fail@plt+0x7550>
   188b4:	mov	r3, #1
   188b8:	strb	r3, [r4, #4]
   188bc:	bl	111e4 <__ctype_b_loc@plt>
   188c0:	lsl	r3, r8, #1
   188c4:	ldr	r2, [r0]
   188c8:	ldrh	r3, [r2, r3]
   188cc:	ldrb	r2, [r4, #6]
   188d0:	lsr	r3, r3, #3
   188d4:	and	r3, r3, #1
   188d8:	cmp	r8, #95	; 0x5f
   188dc:	orreq	r3, r3, #1
   188e0:	bic	r2, r2, #64	; 0x40
   188e4:	orr	r3, r2, r3, lsl #6
   188e8:	strb	r3, [r4, #6]
   188ec:	b	1884c <__assert_fail@plt+0x7518>
   188f0:	andeq	r0, r0, r2, lsl #8
   188f4:	addeq	r0, r0, r8
   188f8:	push	{r4, lr}
   188fc:	mov	r4, r1
   18900:	bl	182cc <__assert_fail@plt+0x6f98>
   18904:	ldr	r3, [r4, #40]	; 0x28
   18908:	add	r0, r3, r0
   1890c:	str	r0, [r4, #40]	; 0x28
   18910:	pop	{r4, pc}
   18914:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18918:	mov	r6, r0
   1891c:	ldr	r9, [pc, #156]	; 189c0 <__assert_fail@plt+0x768c>
   18920:	mov	r5, r1
   18924:	mov	r7, r2
   18928:	mvn	r4, #0
   1892c:	mov	r8, #10
   18930:	mov	sl, #32768	; 0x8000
   18934:	mov	r2, r7
   18938:	mov	r1, r6
   1893c:	mov	r0, r5
   18940:	bl	188f8 <__assert_fail@plt+0x75c4>
   18944:	ldrb	r2, [r5, #4]
   18948:	ldrb	r3, [r5]
   1894c:	cmp	r2, #2
   18950:	beq	189b4 <__assert_fail@plt+0x7680>
   18954:	cmp	r3, #44	; 0x2c
   18958:	cmpne	r2, #24
   1895c:	beq	189b8 <__assert_fail@plt+0x7684>
   18960:	cmp	r2, #1
   18964:	bne	189ac <__assert_fail@plt+0x7678>
   18968:	sub	r1, r3, #48	; 0x30
   1896c:	uxtb	r2, r1
   18970:	cmp	r2, #9
   18974:	movhi	r2, #0
   18978:	movls	r2, #1
   1897c:	cmn	r4, #2
   18980:	moveq	r2, #0
   18984:	cmp	r2, #0
   18988:	beq	189ac <__assert_fail@plt+0x7678>
   1898c:	cmn	r4, #1
   18990:	moveq	r4, r1
   18994:	beq	18934 <__assert_fail@plt+0x7600>
   18998:	mla	r4, r8, r4, r3
   1899c:	cmp	r4, r9
   189a0:	suble	r4, r4, #48	; 0x30
   189a4:	movgt	r4, sl
   189a8:	b	18934 <__assert_fail@plt+0x7600>
   189ac:	mvn	r4, #1
   189b0:	b	18934 <__assert_fail@plt+0x7600>
   189b4:	mvn	r4, #1
   189b8:	mov	r0, r4
   189bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   189c0:	andeq	r8, r0, r0, lsr r0
   189c4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   189c8:	mov	r4, r1
   189cc:	ldr	r5, [r1, #40]	; 0x28
   189d0:	mov	r6, r0
   189d4:	mov	r1, r5
   189d8:	mov	r0, r4
   189dc:	mov	r7, r2
   189e0:	mov	r8, r3
   189e4:	bl	13d44 <__assert_fail@plt+0x2a10>
   189e8:	cmp	r0, #1
   189ec:	ble	18a20 <__assert_fail@plt+0x76ec>
   189f0:	mov	r3, #1
   189f4:	mov	r2, r0
   189f8:	mov	r1, r5
   189fc:	str	r3, [r6]
   18a00:	mov	r0, r4
   18a04:	bl	13d9c <__assert_fail@plt+0x2a68>
   18a08:	str	r0, [r6, #4]
   18a0c:	mov	r0, #0
   18a10:	add	r5, r5, r2
   18a14:	str	r5, [r4, #40]	; 0x28
   18a18:	add	sp, sp, #8
   18a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18a20:	ldrb	r2, [r7, #4]
   18a24:	add	r5, r5, r8
   18a28:	str	r5, [r4, #40]	; 0x28
   18a2c:	and	r3, r2, #251	; 0xfb
   18a30:	cmp	r2, #28
   18a34:	cmpne	r3, #26
   18a38:	bne	18b88 <__assert_fail@plt+0x7854>
   18a3c:	ldr	r3, [r4, #56]	; 0x38
   18a40:	cmp	r5, r3
   18a44:	blt	18a50 <__assert_fail@plt+0x771c>
   18a48:	mov	r0, #7
   18a4c:	b	18a18 <__assert_fail@plt+0x76e4>
   18a50:	ldrb	sl, [r7]
   18a54:	mov	r9, #0
   18a58:	ldrb	r3, [r7, #4]
   18a5c:	ldr	r5, [r4, #40]	; 0x28
   18a60:	cmp	r3, #30
   18a64:	bne	18a74 <__assert_fail@plt+0x7740>
   18a68:	ldrb	r3, [r4, #75]	; 0x4b
   18a6c:	cmp	r3, #0
   18a70:	bne	18a84 <__assert_fail@plt+0x7750>
   18a74:	add	r2, r5, #1
   18a78:	ldr	r3, [r4, #4]
   18a7c:	str	r2, [r4, #40]	; 0x28
   18a80:	b	18b34 <__assert_fail@plt+0x7800>
   18a84:	ldrb	r3, [r4, #76]	; 0x4c
   18a88:	cmp	r3, #0
   18a8c:	beq	18b20 <__assert_fail@plt+0x77ec>
   18a90:	ldr	r3, [r4, #28]
   18a94:	cmp	r5, r3
   18a98:	beq	18aac <__assert_fail@plt+0x7778>
   18a9c:	ldr	r3, [r4, #8]
   18aa0:	ldr	r3, [r3, r5, lsl #2]
   18aa4:	cmn	r3, #1
   18aa8:	beq	18a74 <__assert_fail@plt+0x7740>
   18aac:	ldr	r2, [r4, #12]
   18ab0:	ldr	r3, [r4]
   18ab4:	ldr	r1, [r2, r5, lsl #2]
   18ab8:	ldr	r2, [r4, #24]
   18abc:	add	r3, r3, r1
   18ac0:	ldrb	r8, [r3, r2]
   18ac4:	tst	r8, #128	; 0x80
   18ac8:	bne	18a74 <__assert_fail@plt+0x7740>
   18acc:	mov	r1, r5
   18ad0:	mov	r0, r4
   18ad4:	bl	13d44 <__assert_fail@plt+0x2a10>
   18ad8:	add	r0, r5, r0
   18adc:	str	r0, [r4, #40]	; 0x28
   18ae0:	ldr	r3, [r4, #40]	; 0x28
   18ae4:	ldr	r2, [r4, #56]	; 0x38
   18ae8:	cmp	r2, r3
   18aec:	ble	18a48 <__assert_fail@plt+0x7714>
   18af0:	cmp	sl, r8
   18af4:	bne	18b08 <__assert_fail@plt+0x77d4>
   18af8:	ldr	r2, [r4, #4]
   18afc:	ldrb	r2, [r2, r3]
   18b00:	cmp	r2, #93	; 0x5d
   18b04:	beq	18b3c <__assert_fail@plt+0x7808>
   18b08:	ldr	r3, [r6, #4]
   18b0c:	strb	r8, [r3, r9]
   18b10:	add	r9, r9, #1
   18b14:	cmp	r9, #32
   18b18:	bne	18a58 <__assert_fail@plt+0x7724>
   18b1c:	b	18a48 <__assert_fail@plt+0x7714>
   18b20:	ldr	r3, [r4]
   18b24:	ldr	r2, [r4, #24]
   18b28:	add	r1, r5, #1
   18b2c:	add	r3, r3, r2
   18b30:	str	r1, [r4, #40]	; 0x28
   18b34:	ldrb	r8, [r3, r5]
   18b38:	b	18ae0 <__assert_fail@plt+0x77ac>
   18b3c:	add	r3, r3, #1
   18b40:	str	r3, [r4, #40]	; 0x28
   18b44:	ldr	r3, [r6, #4]
   18b48:	mov	r0, #0
   18b4c:	strb	r0, [r3, r9]
   18b50:	ldrb	r3, [r7, #4]
   18b54:	cmp	r3, #28
   18b58:	beq	18b78 <__assert_fail@plt+0x7844>
   18b5c:	cmp	r3, #30
   18b60:	beq	18b80 <__assert_fail@plt+0x784c>
   18b64:	cmp	r3, #26
   18b68:	moveq	r3, #3
   18b6c:	bne	18a18 <__assert_fail@plt+0x76e4>
   18b70:	str	r3, [r6]
   18b74:	b	18a18 <__assert_fail@plt+0x76e4>
   18b78:	mov	r3, #2
   18b7c:	b	18b70 <__assert_fail@plt+0x783c>
   18b80:	mov	r3, #4
   18b84:	b	18b70 <__assert_fail@plt+0x783c>
   18b88:	ldrb	r3, [sp, #44]	; 0x2c
   18b8c:	cmp	r2, #22
   18b90:	orrne	r3, r3, #1
   18b94:	cmp	r3, #0
   18b98:	bne	18bbc <__assert_fail@plt+0x7888>
   18b9c:	ldr	r2, [sp, #40]	; 0x28
   18ba0:	mov	r1, r4
   18ba4:	mov	r0, sp
   18ba8:	bl	13e6c <__assert_fail@plt+0x2b38>
   18bac:	ldrb	r3, [sp, #4]
   18bb0:	cmp	r3, #21
   18bb4:	movne	r0, #11
   18bb8:	bne	18a18 <__assert_fail@plt+0x76e4>
   18bbc:	mov	r0, #0
   18bc0:	str	r0, [r6]
   18bc4:	ldrb	r3, [r7]
   18bc8:	strb	r3, [r6, #4]
   18bcc:	b	18a18 <__assert_fail@plt+0x76e4>
   18bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bd4:	sub	sp, sp, #14400	; 0x3840
   18bd8:	mov	sl, #0
   18bdc:	sub	sp, sp, #4
   18be0:	mov	r9, r0
   18be4:	str	sl, [r1, #44]	; 0x2c
   18be8:	str	sl, [r1, #48]	; 0x30
   18bec:	add	r0, sp, #64	; 0x40
   18bf0:	mov	r8, r1
   18bf4:	bl	14968 <__assert_fail@plt+0x3634>
   18bf8:	mov	fp, sl
   18bfc:	ldr	r3, [r8, #8]
   18c00:	cmp	fp, r3
   18c04:	blt	18c38 <__assert_fail@plt+0x7904>
   18c08:	cmp	sl, #0
   18c0c:	bgt	19068 <__assert_fail@plt+0x7d34>
   18c10:	bne	19048 <__assert_fail@plt+0x7d14>
   18c14:	mov	r1, #256	; 0x100
   18c18:	mov	r0, #4
   18c1c:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   18c20:	str	r0, [r8, #44]	; 0x2c
   18c24:	adds	r0, r0, #0
   18c28:	movne	r0, #1
   18c2c:	add	sp, sp, #14400	; 0x3840
   18c30:	add	sp, sp, #4
   18c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c38:	lsl	r3, fp, #2
   18c3c:	str	r3, [sp, #12]
   18c40:	ldr	r3, [r8, #12]
   18c44:	ldr	r1, [pc, #1908]	; 193c0 <__assert_fail@plt+0x808c>
   18c48:	ldr	r2, [r3, fp, lsl #2]
   18c4c:	ldr	r3, [r9]
   18c50:	add	r7, r3, r2, lsl #3
   18c54:	ldrb	r4, [r7, #4]
   18c58:	ldr	r5, [r7, #4]
   18c5c:	cmp	r4, #1
   18c60:	and	r5, r1, r5, lsr #8
   18c64:	bne	18ce8 <__assert_fail@plt+0x79b4>
   18c68:	ldrb	r1, [r3, r2, lsl #3]
   18c6c:	add	r0, sp, #64	; 0x40
   18c70:	bl	13c70 <__assert_fail@plt+0x293c>
   18c74:	cmp	r5, #0
   18c78:	bne	18d6c <__assert_fail@plt+0x7a38>
   18c7c:	add	r6, sp, #6208	; 0x1840
   18c80:	mov	r5, #0
   18c84:	add	r3, sp, #3136	; 0xc40
   18c88:	str	r3, [sp, #4]
   18c8c:	cmp	r5, sl
   18c90:	blt	18ef8 <__assert_fail@plt+0x7bc4>
   18c94:	cmp	r5, sl
   18c98:	bne	18e40 <__assert_fail@plt+0x7b0c>
   18c9c:	add	lr, sp, #64	; 0x40
   18ca0:	add	r3, sp, #14400	; 0x3840
   18ca4:	add	ip, r3, sl, lsl #5
   18ca8:	ldm	lr!, {r0, r1, r2, r3}
   18cac:	sub	ip, ip, #8192	; 0x2000
   18cb0:	stmia	ip!, {r0, r1, r2, r3}
   18cb4:	ldm	lr, {r0, r1, r2, r3}
   18cb8:	stm	ip, {r0, r1, r2, r3}
   18cbc:	mov	r0, #12
   18cc0:	ldr	r3, [r8, #12]
   18cc4:	ldr	r2, [sp, #12]
   18cc8:	ldr	r1, [r3, r2]
   18ccc:	add	r3, sp, #3136	; 0xc40
   18cd0:	mla	r0, r0, sl, r3
   18cd4:	bl	14818 <__assert_fail@plt+0x34e4>
   18cd8:	cmp	r0, #0
   18cdc:	bne	19038 <__assert_fail@plt+0x7d04>
   18ce0:	add	sl, sl, #1
   18ce4:	b	18da0 <__assert_fail@plt+0x7a6c>
   18ce8:	cmp	r4, #3
   18cec:	bne	18d00 <__assert_fail@plt+0x79cc>
   18cf0:	ldr	r1, [r3, r2, lsl #3]
   18cf4:	add	r0, sp, #64	; 0x40
   18cf8:	bl	13cf4 <__assert_fail@plt+0x29c0>
   18cfc:	b	18c74 <__assert_fail@plt+0x7940>
   18d00:	cmp	r4, #5
   18d04:	bne	18d5c <__assert_fail@plt+0x7a28>
   18d08:	ldr	r3, [r9, #92]	; 0x5c
   18d0c:	cmp	r3, #1
   18d10:	ble	18d48 <__assert_fail@plt+0x7a14>
   18d14:	ldr	r1, [r9, #60]	; 0x3c
   18d18:	add	r0, sp, #64	; 0x40
   18d1c:	bl	13cf4 <__assert_fail@plt+0x29c0>
   18d20:	ldr	r2, [r9, #128]	; 0x80
   18d24:	tst	r2, #64	; 0x40
   18d28:	ldreq	r3, [sp, #64]	; 0x40
   18d2c:	biceq	r3, r3, #1024	; 0x400
   18d30:	streq	r3, [sp, #64]	; 0x40
   18d34:	tst	r2, #128	; 0x80
   18d38:	ldrne	r3, [sp, #64]	; 0x40
   18d3c:	bicne	r3, r3, #1
   18d40:	strne	r3, [sp, #64]	; 0x40
   18d44:	b	18c74 <__assert_fail@plt+0x7940>
   18d48:	mov	r2, #32
   18d4c:	mvn	r1, #0
   18d50:	add	r0, sp, #64	; 0x40
   18d54:	bl	11238 <memset@plt>
   18d58:	b	18d20 <__assert_fail@plt+0x79ec>
   18d5c:	cmp	r4, #7
   18d60:	bne	18e40 <__assert_fail@plt+0x7b0c>
   18d64:	mov	r2, #16
   18d68:	b	18d4c <__assert_fail@plt+0x7a18>
   18d6c:	tst	r5, #32
   18d70:	beq	18d98 <__assert_fail@plt+0x7a64>
   18d74:	ldr	r6, [sp, #64]	; 0x40
   18d78:	add	r0, sp, #64	; 0x40
   18d7c:	and	r6, r6, #1024	; 0x400
   18d80:	bl	14968 <__assert_fail@plt+0x3634>
   18d84:	cmp	r6, #0
   18d88:	beq	18e40 <__assert_fail@plt+0x7b0c>
   18d8c:	ldr	r3, [sp, #64]	; 0x40
   18d90:	orr	r3, r3, #1024	; 0x400
   18d94:	str	r3, [sp, #64]	; 0x40
   18d98:	tst	r5, #128	; 0x80
   18d9c:	beq	18da8 <__assert_fail@plt+0x7a74>
   18da0:	add	r0, sp, #64	; 0x40
   18da4:	b	18dd0 <__assert_fail@plt+0x7a9c>
   18da8:	tst	r5, #4
   18dac:	bne	18dd8 <__assert_fail@plt+0x7aa4>
   18db0:	tst	r5, #8
   18db4:	beq	18c7c <__assert_fail@plt+0x7948>
   18db8:	cmp	r4, #1
   18dbc:	add	r0, sp, #64	; 0x40
   18dc0:	bne	18e78 <__assert_fail@plt+0x7b44>
   18dc4:	ldrb	r3, [r7, #6]
   18dc8:	tst	r3, #64	; 0x40
   18dcc:	beq	18e78 <__assert_fail@plt+0x7b44>
   18dd0:	bl	14968 <__assert_fail@plt+0x3634>
   18dd4:	b	18e40 <__assert_fail@plt+0x7b0c>
   18dd8:	cmp	r4, #1
   18ddc:	bne	18dec <__assert_fail@plt+0x7ab8>
   18de0:	ldrb	r3, [r7, #6]
   18de4:	tst	r3, #64	; 0x40
   18de8:	beq	18da0 <__assert_fail@plt+0x7a6c>
   18dec:	ldr	r3, [r9, #92]	; 0x5c
   18df0:	add	r2, r9, #96	; 0x60
   18df4:	cmp	r3, #1
   18df8:	ble	18e48 <__assert_fail@plt+0x7b14>
   18dfc:	mov	r3, #0
   18e00:	ldr	lr, [r9, #60]	; 0x3c
   18e04:	mov	r0, r3
   18e08:	add	ip, sp, #64	; 0x40
   18e0c:	ldr	r1, [lr, r0, lsl #2]
   18e10:	ldr	r6, [r2], #4
   18e14:	mvn	r1, r1
   18e18:	orr	r1, r1, r6
   18e1c:	ldr	r6, [ip, r0, lsl #2]
   18e20:	and	r1, r1, r6
   18e24:	str	r1, [ip, r0, lsl #2]
   18e28:	add	r0, r0, #1
   18e2c:	cmp	r0, #8
   18e30:	orr	r3, r3, r1
   18e34:	bne	18e0c <__assert_fail@plt+0x7ad8>
   18e38:	cmp	r3, #0
   18e3c:	bne	18db0 <__assert_fail@plt+0x7a7c>
   18e40:	add	fp, fp, #1
   18e44:	b	18bfc <__assert_fail@plt+0x78c8>
   18e48:	mov	r3, #0
   18e4c:	mov	r1, r3
   18e50:	add	ip, sp, #64	; 0x40
   18e54:	ldr	lr, [ip, r1, lsl #2]
   18e58:	ldr	r0, [r2], #4
   18e5c:	and	r0, r0, lr
   18e60:	str	r0, [ip, r1, lsl #2]
   18e64:	add	r1, r1, #1
   18e68:	cmp	r1, #8
   18e6c:	orr	r3, r3, r0
   18e70:	bne	18e54 <__assert_fail@plt+0x7b20>
   18e74:	b	18e38 <__assert_fail@plt+0x7b04>
   18e78:	ldr	r3, [r9, #92]	; 0x5c
   18e7c:	add	r2, r9, #96	; 0x60
   18e80:	cmp	r3, #1
   18e84:	ble	18ecc <__assert_fail@plt+0x7b98>
   18e88:	mov	r3, #0
   18e8c:	ldr	r5, [r9, #60]	; 0x3c
   18e90:	mov	r1, r3
   18e94:	add	lr, sp, #64	; 0x40
   18e98:	ldr	ip, [r5, r1, lsl #2]
   18e9c:	ldr	r0, [r2], #4
   18ea0:	and	ip, ip, r0
   18ea4:	ldr	r0, [lr, r1, lsl #2]
   18ea8:	bic	r0, r0, ip
   18eac:	str	r0, [lr, r1, lsl #2]
   18eb0:	add	r1, r1, #1
   18eb4:	cmp	r1, #8
   18eb8:	orr	r3, r3, r0
   18ebc:	bne	18e98 <__assert_fail@plt+0x7b64>
   18ec0:	cmp	r3, #0
   18ec4:	beq	18e40 <__assert_fail@plt+0x7b0c>
   18ec8:	b	18c7c <__assert_fail@plt+0x7948>
   18ecc:	mov	r3, #0
   18ed0:	mov	r1, r3
   18ed4:	ldr	ip, [r0, r1, lsl #2]
   18ed8:	ldr	lr, [r2], #4
   18edc:	bic	ip, ip, lr
   18ee0:	str	ip, [r0, r1, lsl #2]
   18ee4:	add	r1, r1, #1
   18ee8:	cmp	r1, #8
   18eec:	orr	r3, r3, ip
   18ef0:	bne	18ed4 <__assert_fail@plt+0x7ba0>
   18ef4:	b	18ec0 <__assert_fail@plt+0x7b8c>
   18ef8:	cmp	r4, #1
   18efc:	bne	18f14 <__assert_fail@plt+0x7be0>
   18f00:	ldrb	r1, [r7]
   18f04:	mov	r0, r6
   18f08:	bl	13ca4 <__assert_fail@plt+0x2970>
   18f0c:	cmp	r0, #0
   18f10:	beq	19020 <__assert_fail@plt+0x7cec>
   18f14:	mov	r2, #0
   18f18:	mov	r3, r2
   18f1c:	add	r1, sp, #64	; 0x40
   18f20:	ldr	r0, [r6, r3, lsl #2]
   18f24:	ldr	r1, [r1, r3, lsl #2]
   18f28:	and	r1, r1, r0
   18f2c:	add	r0, sp, #1088	; 0x440
   18f30:	orr	r2, r2, r1
   18f34:	str	r1, [r0, r3, lsl #2]
   18f38:	add	r3, r3, #1
   18f3c:	cmp	r3, #8
   18f40:	bne	18f1c <__assert_fail@plt+0x7be8>
   18f44:	cmp	r2, #0
   18f48:	beq	19020 <__assert_fail@plt+0x7cec>
   18f4c:	mov	r3, #0
   18f50:	mov	r1, r3
   18f54:	str	r3, [sp, #8]
   18f58:	add	r2, sp, #64	; 0x40
   18f5c:	ldr	r0, [r6, r3, lsl #2]
   18f60:	ldr	r2, [r2, r3, lsl #2]
   18f64:	add	lr, sp, #2112	; 0x840
   18f68:	bic	ip, r0, r2
   18f6c:	bic	r2, r2, r0
   18f70:	add	r0, sp, #64	; 0x40
   18f74:	str	ip, [lr, r3, lsl #2]
   18f78:	str	r2, [r0, r3, lsl #2]
   18f7c:	ldr	r0, [sp, #8]
   18f80:	add	r3, r3, #1
   18f84:	orr	r2, r0, r2
   18f88:	cmp	r3, #8
   18f8c:	orr	r1, r1, ip
   18f90:	str	r2, [sp, #8]
   18f94:	bne	18f58 <__assert_fail@plt+0x7c24>
   18f98:	cmp	r1, #0
   18f9c:	beq	18ff8 <__assert_fail@plt+0x7cc4>
   18fa0:	add	r3, sp, #14400	; 0x3840
   18fa4:	add	ip, r3, sl, lsl #5
   18fa8:	ldm	lr!, {r0, r1, r2, r3}
   18fac:	sub	ip, ip, #8192	; 0x2000
   18fb0:	stmia	ip!, {r0, r1, r2, r3}
   18fb4:	ldm	lr, {r0, r1, r2, r3}
   18fb8:	add	lr, sp, #1088	; 0x440
   18fbc:	stm	ip, {r0, r1, r2, r3}
   18fc0:	add	r3, sp, #6208	; 0x1840
   18fc4:	add	ip, r3, r5, lsl #5
   18fc8:	ldm	lr!, {r0, r1, r2, r3}
   18fcc:	stmia	ip!, {r0, r1, r2, r3}
   18fd0:	ldm	lr, {r0, r1, r2, r3}
   18fd4:	stm	ip, {r0, r1, r2, r3}
   18fd8:	mov	r0, #12
   18fdc:	add	r3, sp, #3136	; 0xc40
   18fe0:	ldr	r1, [sp, #4]
   18fe4:	mla	r0, r0, sl, r3
   18fe8:	bl	16894 <__assert_fail@plt+0x5560>
   18fec:	cmp	r0, #0
   18ff0:	bne	19038 <__assert_fail@plt+0x7d04>
   18ff4:	add	sl, sl, #1
   18ff8:	ldr	r3, [r8, #12]
   18ffc:	ldr	r2, [sp, #12]
   19000:	ldr	r0, [sp, #4]
   19004:	ldr	r1, [r3, r2]
   19008:	bl	17270 <__assert_fail@plt+0x5f3c>
   1900c:	cmp	r0, #0
   19010:	beq	19038 <__assert_fail@plt+0x7d04>
   19014:	ldr	r3, [sp, #8]
   19018:	cmp	r3, #0
   1901c:	beq	18c94 <__assert_fail@plt+0x7960>
   19020:	ldr	r3, [sp, #4]
   19024:	add	r5, r5, #1
   19028:	add	r3, r3, #12
   1902c:	add	r6, r6, #32
   19030:	str	r3, [sp, #4]
   19034:	b	18c8c <__assert_fail@plt+0x7958>
   19038:	mov	r4, #0
   1903c:	mov	r5, #12
   19040:	cmp	r4, sl
   19044:	blt	19050 <__assert_fail@plt+0x7d1c>
   19048:	mov	r0, #0
   1904c:	b	18c2c <__assert_fail@plt+0x78f8>
   19050:	add	r3, sp, #3136	; 0xc40
   19054:	mla	r3, r5, r4, r3
   19058:	add	r4, r4, #1
   1905c:	ldr	r0, [r3, #8]
   19060:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19064:	b	19040 <__assert_fail@plt+0x7d0c>
   19068:	add	r1, sl, #1
   1906c:	add	r0, sp, #20
   19070:	bl	14858 <__assert_fail@plt+0x3524>
   19074:	add	r4, sp, #2112	; 0x840
   19078:	cmp	r0, #0
   1907c:	mov	r5, r0
   19080:	str	r0, [r4, #-2096]	; 0xfffff7d0
   19084:	beq	190b8 <__assert_fail@plt+0x7d84>
   19088:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   1908c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19090:	mov	r4, #0
   19094:	mov	r5, #12
   19098:	add	r3, sp, #3136	; 0xc40
   1909c:	mla	r3, r5, r4, r3
   190a0:	add	r4, r4, #1
   190a4:	ldr	r0, [r3, #8]
   190a8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   190ac:	cmp	r4, sl
   190b0:	bne	19098 <__assert_fail@plt+0x7d64>
   190b4:	b	19048 <__assert_fail@plt+0x7d14>
   190b8:	add	r0, sp, #32
   190bc:	mov	r6, r5
   190c0:	bl	14968 <__assert_fail@plt+0x3634>
   190c4:	add	r3, sp, #16
   190c8:	str	r3, [sp, #4]
   190cc:	mov	r3, #12
   190d0:	add	r2, sp, #3136	; 0xc40
   190d4:	mla	fp, r3, r6, r2
   190d8:	mov	r7, #0
   190dc:	str	r7, [r4, #-2088]	; 0xfffff7d8
   190e0:	ldr	r3, [fp, #4]
   190e4:	cmp	r7, r3
   190e8:	blt	19174 <__assert_fail@plt+0x7e40>
   190ec:	mov	r3, #0
   190f0:	add	r2, sp, #20
   190f4:	mov	r1, r9
   190f8:	ldr	r0, [sp, #4]
   190fc:	bl	16a44 <__assert_fail@plt+0x5710>
   19100:	add	r3, sp, #64	; 0x40
   19104:	cmp	r0, #0
   19108:	mov	r7, r0
   1910c:	str	r0, [r3, r6, lsl #2]
   19110:	bne	19120 <__assert_fail@plt+0x7dec>
   19114:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   19118:	cmp	r3, #0
   1911c:	bne	19088 <__assert_fail@plt+0x7d54>
   19120:	ldrsb	r3, [r7, #52]	; 0x34
   19124:	add	fp, sp, #1088	; 0x440
   19128:	cmp	r3, #0
   1912c:	strge	r7, [fp, r6, lsl #2]
   19130:	strge	r7, [r4, r6, lsl #2]
   19134:	bge	191ec <__assert_fail@plt+0x7eb8>
   19138:	mov	r3, #1
   1913c:	add	r2, sp, #20
   19140:	mov	r1, r9
   19144:	ldr	r0, [sp, #4]
   19148:	bl	16a44 <__assert_fail@plt+0x5710>
   1914c:	cmp	r0, #0
   19150:	str	r0, [fp, r6, lsl #2]
   19154:	bne	191b8 <__assert_fail@plt+0x7e84>
   19158:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   1915c:	cmp	r3, #0
   19160:	bne	19088 <__assert_fail@plt+0x7d54>
   19164:	ldr	r3, [r9, #92]	; 0x5c
   19168:	cmp	r3, #1
   1916c:	movgt	r5, #1
   19170:	b	191c0 <__assert_fail@plt+0x7e8c>
   19174:	ldr	r3, [fp, #8]
   19178:	ldr	r2, [r3, r7, lsl #2]
   1917c:	ldr	r3, [r9, #12]
   19180:	ldr	r3, [r3, r2, lsl #2]
   19184:	cmn	r3, #1
   19188:	bne	19194 <__assert_fail@plt+0x7e60>
   1918c:	add	r7, r7, #1
   19190:	b	190e0 <__assert_fail@plt+0x7dac>
   19194:	ldr	r1, [r9, #24]
   19198:	mov	r2, #12
   1919c:	add	r0, sp, #20
   191a0:	mla	r1, r2, r3, r1
   191a4:	bl	17678 <__assert_fail@plt+0x6344>
   191a8:	cmp	r0, #0
   191ac:	str	r0, [r4, #-2096]	; 0xfffff7d0
   191b0:	beq	1918c <__assert_fail@plt+0x7e58>
   191b4:	b	19088 <__assert_fail@plt+0x7d54>
   191b8:	cmp	r7, r0
   191bc:	bne	19164 <__assert_fail@plt+0x7e30>
   191c0:	mov	r3, #2
   191c4:	add	r2, sp, #20
   191c8:	mov	r1, r9
   191cc:	ldr	r0, [sp, #4]
   191d0:	bl	16a44 <__assert_fail@plt+0x5710>
   191d4:	cmp	r0, #0
   191d8:	str	r0, [r4, r6, lsl #2]
   191dc:	bne	191ec <__assert_fail@plt+0x7eb8>
   191e0:	ldr	r3, [r4, #-2096]	; 0xfffff7d0
   191e4:	cmp	r3, #0
   191e8:	bne	19088 <__assert_fail@plt+0x7d54>
   191ec:	add	r3, sp, #6208	; 0x1840
   191f0:	add	r1, r3, r6, lsl #5
   191f4:	add	r0, sp, #32
   191f8:	add	r6, r6, #1
   191fc:	bl	13cf4 <__assert_fail@plt+0x29c0>
   19200:	cmp	r6, sl
   19204:	bne	190cc <__assert_fail@plt+0x7d98>
   19208:	cmp	r5, #0
   1920c:	bne	19320 <__assert_fail@plt+0x7fec>
   19210:	mov	r1, #256	; 0x100
   19214:	mov	r0, #4
   19218:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1921c:	cmp	r0, #0
   19220:	str	r0, [r8, #44]	; 0x2c
   19224:	beq	19088 <__assert_fail@plt+0x7d54>
   19228:	add	r6, r9, #96	; 0x60
   1922c:	mov	r2, r5
   19230:	add	r3, sp, #32
   19234:	add	lr, r0, r2, lsl #5
   19238:	ldr	r1, [r3, r2]
   1923c:	add	r3, sp, #6208	; 0x1840
   19240:	mov	ip, #1
   19244:	add	r7, r3, r2
   19248:	cmp	r1, #0
   1924c:	bne	192d4 <__assert_fail@plt+0x7fa0>
   19250:	add	r2, r2, #4
   19254:	cmp	r2, #32
   19258:	add	r6, r6, #4
   1925c:	bne	19230 <__assert_fail@plt+0x7efc>
   19260:	ldr	r3, [r4, #-2080]	; 0xfffff7e0
   19264:	mov	r6, r0
   19268:	tst	r3, #1024	; 0x400
   1926c:	beq	192a0 <__assert_fail@plt+0x7f6c>
   19270:	mov	r7, #0
   19274:	mov	r8, #10
   19278:	add	r3, sp, #6208	; 0x1840
   1927c:	mov	r1, r8
   19280:	add	r0, r3, r7, lsl #5
   19284:	bl	13ca4 <__assert_fail@plt+0x2970>
   19288:	cmp	r0, #0
   1928c:	beq	193b0 <__assert_fail@plt+0x807c>
   19290:	ldr	r3, [r4, r7, lsl #2]
   19294:	cmp	r5, #0
   19298:	str	r3, [r6, #40]	; 0x28
   1929c:	strne	r3, [r6, #1064]	; 0x428
   192a0:	ldr	r0, [r4, #-2084]	; 0xfffff7dc
   192a4:	bl	1ff1c <__assert_fail@plt+0xebe8>
   192a8:	mov	r4, #0
   192ac:	mov	r5, #12
   192b0:	add	r3, sp, #3136	; 0xc40
   192b4:	mla	r3, r5, r4, r3
   192b8:	add	r4, r4, #1
   192bc:	ldr	r0, [r3, #8]
   192c0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   192c4:	cmp	r4, sl
   192c8:	bne	192b0 <__assert_fail@plt+0x7f7c>
   192cc:	mov	r0, #1
   192d0:	b	18c2c <__assert_fail@plt+0x78f8>
   192d4:	tst	r1, #1
   192d8:	movne	r3, #0
   192dc:	bne	192f4 <__assert_fail@plt+0x7fc0>
   192e0:	lsl	ip, ip, #1
   192e4:	lsr	r1, r1, #1
   192e8:	add	lr, lr, #4
   192ec:	b	19248 <__assert_fail@plt+0x7f14>
   192f0:	add	r3, r3, #1
   192f4:	ldr	r9, [r7, r3, lsl #5]
   192f8:	tst	ip, r9
   192fc:	beq	192f0 <__assert_fail@plt+0x7fbc>
   19300:	ldr	r9, [r6]
   19304:	lsl	r3, r3, #2
   19308:	add	r3, r4, r3
   1930c:	tst	ip, r9
   19310:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   19314:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   19318:	str	r3, [lr]
   1931c:	b	192e0 <__assert_fail@plt+0x7fac>
   19320:	mov	r1, #512	; 0x200
   19324:	mov	r0, #4
   19328:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1932c:	cmp	r0, #0
   19330:	str	r0, [r8, #48]	; 0x30
   19334:	beq	19088 <__assert_fail@plt+0x7d54>
   19338:	mov	r2, #0
   1933c:	add	r3, sp, #32
   19340:	add	ip, r0, r2, lsl #5
   19344:	ldr	r1, [r3, r2]
   19348:	add	r3, sp, #6208	; 0x1840
   1934c:	mov	lr, #1
   19350:	add	r6, r3, r2
   19354:	cmp	r1, #0
   19358:	bne	1936c <__assert_fail@plt+0x8038>
   1935c:	add	r2, r2, #4
   19360:	cmp	r2, #32
   19364:	bne	1933c <__assert_fail@plt+0x8008>
   19368:	b	19260 <__assert_fail@plt+0x7f2c>
   1936c:	tst	r1, #1
   19370:	movne	r3, #0
   19374:	bne	1938c <__assert_fail@plt+0x8058>
   19378:	lsl	lr, lr, #1
   1937c:	lsr	r1, r1, #1
   19380:	add	ip, ip, #4
   19384:	b	19354 <__assert_fail@plt+0x8020>
   19388:	add	r3, r3, #1
   1938c:	ldr	r7, [r6, r3, lsl #5]
   19390:	tst	lr, r7
   19394:	beq	19388 <__assert_fail@plt+0x8054>
   19398:	add	r3, r4, r3, lsl #2
   1939c:	ldr	r7, [r3, #-2048]	; 0xfffff800
   193a0:	str	r7, [ip]
   193a4:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   193a8:	str	r3, [ip, #1024]	; 0x400
   193ac:	b	19378 <__assert_fail@plt+0x8044>
   193b0:	add	r7, r7, #1
   193b4:	cmp	r7, sl
   193b8:	bne	19278 <__assert_fail@plt+0x7f44>
   193bc:	b	192a0 <__assert_fail@plt+0x7f6c>
   193c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   193c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   193c8:	sub	sp, sp, #28
   193cc:	add	r5, sp, #12
   193d0:	mov	r8, r0
   193d4:	mov	r4, r1
   193d8:	mov	r0, r5
   193dc:	ldr	r1, [r1, #4]
   193e0:	mov	r9, r2
   193e4:	mov	sl, r3
   193e8:	bl	14858 <__assert_fail@plt+0x3524>
   193ec:	subs	r6, r0, #0
   193f0:	moveq	r7, r6
   193f4:	beq	1949c <__assert_fail@plt+0x8168>
   193f8:	mov	r0, r6
   193fc:	add	sp, sp, #28
   19400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19404:	ldr	r3, [r4, #8]
   19408:	ldr	r1, [r8, #24]
   1940c:	ldr	r2, [r3, r7, lsl #2]
   19410:	mov	r3, #12
   19414:	mla	r1, r3, r2, r1
   19418:	mov	r3, #0
   1941c:	ldr	lr, [r1, #4]
   19420:	cmp	r3, lr
   19424:	blt	19448 <__assert_fail@plt+0x8114>
   19428:	mov	r0, r5
   1942c:	bl	17678 <__assert_fail@plt+0x6344>
   19430:	subs	fp, r0, #0
   19434:	beq	19498 <__assert_fail@plt+0x8164>
   19438:	ldr	r0, [sp, #20]
   1943c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19440:	mov	r6, fp
   19444:	b	193f8 <__assert_fail@plt+0x80c4>
   19448:	ldr	r0, [r1, #8]
   1944c:	ldr	ip, [r8]
   19450:	ldr	r0, [r0, r3, lsl #2]
   19454:	add	fp, ip, r0, lsl #3
   19458:	ldrb	fp, [fp, #4]
   1945c:	cmp	sl, fp
   19460:	bne	19470 <__assert_fail@plt+0x813c>
   19464:	ldr	ip, [ip, r0, lsl #3]
   19468:	cmp	r9, ip
   1946c:	beq	19478 <__assert_fail@plt+0x8144>
   19470:	add	r3, r3, #1
   19474:	b	19420 <__assert_fail@plt+0x80ec>
   19478:	cmn	r0, #1
   1947c:	beq	19428 <__assert_fail@plt+0x80f4>
   19480:	str	sl, [sp]
   19484:	mov	r3, r9
   19488:	mov	r1, r5
   1948c:	mov	r0, r8
   19490:	bl	17588 <__assert_fail@plt+0x6254>
   19494:	b	19430 <__assert_fail@plt+0x80fc>
   19498:	add	r7, r7, #1
   1949c:	ldr	r3, [r4, #4]
   194a0:	cmp	r7, r3
   194a4:	blt	19404 <__assert_fail@plt+0x80d0>
   194a8:	ldr	r0, [r4, #8]
   194ac:	bl	1ff1c <__assert_fail@plt+0xebe8>
   194b0:	ldm	r5, {r0, r1, r2}
   194b4:	stm	r4, {r0, r1, r2}
   194b8:	b	193f8 <__assert_fail@plt+0x80c4>
   194bc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194c0:	mov	r3, #0
   194c4:	ldr	r4, [r2, #4]
   194c8:	str	r3, [r0]
   194cc:	cmp	r4, r3
   194d0:	movne	r8, r4
   194d4:	bne	194f0 <__assert_fail@plt+0x81bc>
   194d8:	mov	r0, r4
   194dc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194e0:	ldr	ip, [r2, #8]
   194e4:	ldr	ip, [ip, r3, lsl #2]
   194e8:	add	r3, r3, #1
   194ec:	add	r8, r8, ip
   194f0:	cmp	r4, r3
   194f4:	bgt	194e0 <__assert_fail@plt+0x81ac>
   194f8:	ldr	r3, [r1, #68]	; 0x44
   194fc:	mov	r5, r2
   19500:	and	r2, r8, r3
   19504:	mov	r3, #12
   19508:	mov	r6, r1
   1950c:	mul	r3, r3, r2
   19510:	ldr	r2, [r1, #32]
   19514:	mov	r7, r0
   19518:	add	fp, r2, r3
   1951c:	ldr	sl, [r2, r3]
   19520:	mov	r9, #0
   19524:	cmp	r9, sl
   19528:	blt	19570 <__assert_fail@plt+0x823c>
   1952c:	mov	r1, #1
   19530:	mov	r0, #56	; 0x38
   19534:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   19538:	subs	r4, r0, #0
   1953c:	beq	19560 <__assert_fail@plt+0x822c>
   19540:	add	r9, r4, #4
   19544:	mov	r1, r5
   19548:	mov	r0, r9
   1954c:	bl	16894 <__assert_fail@plt+0x5560>
   19550:	cmp	r0, #0
   19554:	beq	195a0 <__assert_fail@plt+0x826c>
   19558:	mov	r0, r4
   1955c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19560:	mov	r3, #12
   19564:	str	r3, [r7]
   19568:	mov	r4, #0
   1956c:	b	194d8 <__assert_fail@plt+0x81a4>
   19570:	ldr	r3, [fp, #8]
   19574:	ldr	r4, [r3, r9, lsl #2]
   19578:	ldr	r3, [r4]
   1957c:	cmp	r3, r8
   19580:	bne	19598 <__assert_fail@plt+0x8264>
   19584:	mov	r1, r5
   19588:	add	r0, r4, #4
   1958c:	bl	16594 <__assert_fail@plt+0x5260>
   19590:	cmp	r0, #0
   19594:	bne	194d8 <__assert_fail@plt+0x81a4>
   19598:	add	r9, r9, #1
   1959c:	b	19524 <__assert_fail@plt+0x81f0>
   195a0:	str	r9, [r4, #40]	; 0x28
   195a4:	ldr	lr, [pc, #188]	; 19668 <__assert_fail@plt+0x8334>
   195a8:	ldr	r9, [r5, #4]
   195ac:	cmp	r0, r9
   195b0:	blt	195d8 <__assert_fail@plt+0x82a4>
   195b4:	mov	r2, r8
   195b8:	mov	r1, r4
   195bc:	mov	r0, r6
   195c0:	bl	14888 <__assert_fail@plt+0x3554>
   195c4:	cmp	r0, #0
   195c8:	beq	194d8 <__assert_fail@plt+0x81a4>
   195cc:	mov	r0, r4
   195d0:	bl	1536c <__assert_fail@plt+0x4038>
   195d4:	b	19560 <__assert_fail@plt+0x822c>
   195d8:	ldr	r3, [r5, #8]
   195dc:	ldr	r1, [r6]
   195e0:	ldr	r3, [r3, r0, lsl #2]
   195e4:	add	r1, r1, r3, lsl #3
   195e8:	ldrb	ip, [r1, #4]
   195ec:	cmp	ip, #1
   195f0:	bne	19600 <__assert_fail@plt+0x82cc>
   195f4:	ldr	r3, [r1, #4]
   195f8:	tst	r3, lr
   195fc:	beq	19660 <__assert_fail@plt+0x832c>
   19600:	ldrb	r3, [r1, #6]
   19604:	ldrb	r2, [r4, #52]	; 0x34
   19608:	cmp	ip, #2
   1960c:	lsr	r3, r3, #4
   19610:	orr	r3, r3, r2, lsr #5
   19614:	and	r3, r3, #1
   19618:	bic	r2, r2, #32
   1961c:	orr	r3, r2, r3, lsl #5
   19620:	strb	r3, [r4, #52]	; 0x34
   19624:	uxtbeq	r3, r3
   19628:	orreq	r3, r3, #16
   1962c:	beq	1965c <__assert_fail@plt+0x8328>
   19630:	cmp	ip, #4
   19634:	ldrbeq	r3, [r4, #52]	; 0x34
   19638:	orreq	r3, r3, #64	; 0x40
   1963c:	beq	1965c <__assert_fail@plt+0x8328>
   19640:	cmp	ip, #12
   19644:	beq	19654 <__assert_fail@plt+0x8320>
   19648:	ldr	r3, [r1, #4]
   1964c:	tst	r3, lr
   19650:	beq	19660 <__assert_fail@plt+0x832c>
   19654:	ldrb	r3, [r4, #52]	; 0x34
   19658:	orr	r3, r3, #128	; 0x80
   1965c:	strb	r3, [r4, #52]	; 0x34
   19660:	add	r0, r0, #1
   19664:	b	195ac <__assert_fail@plt+0x8278>
   19668:	andeq	pc, r3, r0, lsl #30
   1966c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   19670:	mov	r8, r0
   19674:	mov	r6, r2
   19678:	mov	r7, r3
   1967c:	sub	r5, r1, #4
   19680:	mov	r4, #0
   19684:	cmp	r4, r7
   19688:	blt	19698 <__assert_fail@plt+0x8364>
   1968c:	mov	r0, #0
   19690:	add	sp, sp, #16
   19694:	pop	{r4, r5, r6, r7, r8, pc}
   19698:	ldr	r1, [r5, #4]!
   1969c:	cmp	r1, #0
   196a0:	ldreq	r3, [r6, r4, lsl #2]
   196a4:	streq	r3, [r5]
   196a8:	beq	196fc <__assert_fail@plt+0x83c8>
   196ac:	ldr	r2, [r6, r4, lsl #2]
   196b0:	cmp	r2, #0
   196b4:	beq	196fc <__assert_fail@plt+0x83c8>
   196b8:	add	r2, r2, #4
   196bc:	add	r1, r1, #4
   196c0:	add	r0, sp, #4
   196c4:	bl	1690c <__assert_fail@plt+0x55d8>
   196c8:	cmp	r0, #0
   196cc:	str	r0, [sp]
   196d0:	bne	19690 <__assert_fail@plt+0x835c>
   196d4:	add	r2, sp, #4
   196d8:	mov	r1, r8
   196dc:	mov	r0, sp
   196e0:	bl	194bc <__assert_fail@plt+0x8188>
   196e4:	str	r0, [r5]
   196e8:	ldr	r0, [sp, #12]
   196ec:	bl	1ff1c <__assert_fail@plt+0xebe8>
   196f0:	ldr	r0, [sp]
   196f4:	cmp	r0, #0
   196f8:	bne	19690 <__assert_fail@plt+0x835c>
   196fc:	add	r4, r4, #1
   19700:	b	19684 <__assert_fail@plt+0x8350>
   19704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19708:	sub	sp, sp, #36	; 0x24
   1970c:	mov	r8, r1
   19710:	mov	r1, r2
   19714:	mov	r6, r0
   19718:	mov	r9, r2
   1971c:	str	r3, [sp, #8]
   19720:	bl	1420c <__assert_fail@plt+0x2ed8>
   19724:	cmn	r0, #1
   19728:	bne	19738 <__assert_fail@plt+0x8404>
   1972c:	mov	r0, #0
   19730:	add	sp, sp, #36	; 0x24
   19734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19738:	mov	r3, #24
   1973c:	ldr	r7, [r6, #84]	; 0x54
   19740:	mul	r3, r3, r0
   19744:	str	r3, [sp, #4]
   19748:	ldr	r3, [sp, #4]
   1974c:	mov	fp, #12
   19750:	add	r4, r3, #24
   19754:	ldr	r3, [r6, #116]	; 0x74
   19758:	add	r4, r3, r4
   1975c:	ldr	sl, [r4, #-24]	; 0xffffffe8
   19760:	mov	r0, r8
   19764:	mov	r1, sl
   19768:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1976c:	cmp	r0, #0
   19770:	beq	198c0 <__assert_fail@plt+0x858c>
   19774:	ldr	r5, [r4, #-12]
   19778:	ldr	r2, [r4, #-16]
   1977c:	add	r5, r9, r5
   19780:	sub	r5, r5, r2
   19784:	cmp	r9, r5
   19788:	bne	19818 <__assert_fail@plt+0x84e4>
   1978c:	ldr	r2, [r7, #20]
   19790:	mov	r0, r8
   19794:	mla	r3, fp, sl, r2
   19798:	ldr	r3, [r3, #8]
   1979c:	ldr	r5, [r3]
   197a0:	mov	r1, r5
   197a4:	bl	13e08 <__assert_fail@plt+0x2ad4>
   197a8:	cmp	r0, #0
   197ac:	bne	198c0 <__assert_fail@plt+0x858c>
   197b0:	mov	r1, r5
   197b4:	add	r0, sp, #20
   197b8:	bl	14818 <__assert_fail@plt+0x34e4>
   197bc:	ldr	r3, [sp, #72]	; 0x48
   197c0:	ldr	r2, [sp, #8]
   197c4:	add	r1, sp, #20
   197c8:	str	r0, [sp, #16]
   197cc:	mov	r0, r7
   197d0:	bl	193c4 <__assert_fail@plt+0x8090>
   197d4:	add	r1, sp, #20
   197d8:	mov	r4, r0
   197dc:	mov	r0, r8
   197e0:	bl	17678 <__assert_fail@plt+0x6344>
   197e4:	mov	r5, r0
   197e8:	ldr	r0, [sp, #28]
   197ec:	bl	1ff1c <__assert_fail@plt+0xebe8>
   197f0:	ldr	r0, [sp, #16]
   197f4:	orr	r3, r4, r5
   197f8:	orrs	r3, r3, r0
   197fc:	beq	19748 <__assert_fail@plt+0x8414>
   19800:	cmp	r0, #0
   19804:	bne	19730 <__assert_fail@plt+0x83fc>
   19808:	cmp	r4, #0
   1980c:	movne	r0, r4
   19810:	moveq	r0, r5
   19814:	b	19730 <__assert_fail@plt+0x83fc>
   19818:	ldr	r3, [r6, #100]	; 0x64
   1981c:	ldr	r2, [r7, #12]
   19820:	ldr	r3, [r3, r5, lsl #2]
   19824:	ldr	sl, [r2, sl, lsl #2]
   19828:	cmp	r3, #0
   1982c:	beq	198ec <__assert_fail@plt+0x85b8>
   19830:	add	r3, r3, #4
   19834:	mov	r0, r3
   19838:	mov	r1, sl
   1983c:	str	r3, [sp, #12]
   19840:	bl	13e08 <__assert_fail@plt+0x2ad4>
   19844:	ldr	r3, [sp, #12]
   19848:	cmp	r0, #0
   1984c:	bne	198c0 <__assert_fail@plt+0x858c>
   19850:	mov	r1, r3
   19854:	add	r0, sp, #20
   19858:	bl	16894 <__assert_fail@plt+0x5560>
   1985c:	mov	r1, sl
   19860:	str	r0, [sp, #16]
   19864:	add	r0, sp, #20
   19868:	bl	17270 <__assert_fail@plt+0x5f3c>
   1986c:	ldr	r3, [sp, #16]
   19870:	eor	r0, r0, #1
   19874:	cmp	r3, #0
   19878:	orrne	r0, r0, #1
   1987c:	tst	r0, #255	; 0xff
   19880:	bne	198d4 <__assert_fail@plt+0x85a0>
   19884:	add	r2, sp, #20
   19888:	mov	r1, r7
   1988c:	add	r0, sp, #16
   19890:	ldr	sl, [r6, #100]	; 0x64
   19894:	bl	194bc <__assert_fail@plt+0x8188>
   19898:	str	r0, [sl, r5, lsl #2]
   1989c:	ldr	r0, [sp, #28]
   198a0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   198a4:	ldr	r3, [r6, #100]	; 0x64
   198a8:	ldr	r3, [r3, r5, lsl #2]
   198ac:	cmp	r3, #0
   198b0:	bne	198c0 <__assert_fail@plt+0x858c>
   198b4:	ldr	r0, [sp, #16]
   198b8:	cmp	r0, #0
   198bc:	bne	19730 <__assert_fail@plt+0x83fc>
   198c0:	add	r4, r4, #24
   198c4:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   198c8:	cmp	r3, #0
   198cc:	bne	1975c <__assert_fail@plt+0x8428>
   198d0:	b	1972c <__assert_fail@plt+0x83f8>
   198d4:	ldr	r0, [sp, #28]
   198d8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   198dc:	ldr	r0, [sp, #16]
   198e0:	cmp	r0, #0
   198e4:	moveq	r0, #12
   198e8:	b	19730 <__assert_fail@plt+0x83fc>
   198ec:	mov	r1, sl
   198f0:	add	r0, sp, #20
   198f4:	bl	14818 <__assert_fail@plt+0x34e4>
   198f8:	cmp	r0, #0
   198fc:	str	r0, [sp, #16]
   19900:	beq	19884 <__assert_fail@plt+0x8550>
   19904:	b	19730 <__assert_fail@plt+0x83fc>
   19908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1990c:	mov	r9, r3
   19910:	ldr	sl, [r0, #84]	; 0x54
   19914:	sub	sp, sp, #76	; 0x4c
   19918:	mov	fp, #0
   1991c:	ldr	r3, [sl]
   19920:	str	fp, [sp, #40]	; 0x28
   19924:	ldr	r5, [r0, #120]	; 0x78
   19928:	ldr	r3, [r3, r2, lsl #3]
   1992c:	ldr	r8, [r1, #4]
   19930:	str	r3, [sp, #16]
   19934:	ldr	r3, [sp, #116]	; 0x74
   19938:	mov	r4, r0
   1993c:	add	r5, r3, r5
   19940:	cmp	r5, r8
   19944:	mov	r7, r1
   19948:	mov	r6, r2
   1994c:	blt	199b0 <__assert_fail@plt+0x867c>
   19950:	mvn	r3, #-2147483648	; 0x80000000
   19954:	add	r5, r5, #1
   19958:	sub	r3, r3, r8
   1995c:	cmp	r5, r3
   19960:	ble	19970 <__assert_fail@plt+0x863c>
   19964:	mov	r0, #12
   19968:	add	sp, sp, #76	; 0x4c
   1996c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19970:	add	r3, r8, r5
   19974:	cmn	r3, #-1073741823	; 0xc0000001
   19978:	bhi	19964 <__assert_fail@plt+0x8630>
   1997c:	lsl	r1, r3, #2
   19980:	ldr	r0, [r7, #8]
   19984:	str	r3, [sp, #12]
   19988:	bl	1fd98 <__assert_fail@plt+0xea64>
   1998c:	cmp	r0, #0
   19990:	beq	19964 <__assert_fail@plt+0x8630>
   19994:	ldr	r3, [sp, #12]
   19998:	str	r0, [r7, #8]
   1999c:	str	r3, [r7, #4]
   199a0:	lsl	r2, r5, #2
   199a4:	mov	r1, fp
   199a8:	add	r0, r0, r8, lsl #2
   199ac:	bl	11238 <memset@plt>
   199b0:	ldr	r5, [r7]
   199b4:	ldr	r3, [r4, #100]	; 0x64
   199b8:	cmp	r5, #0
   199bc:	ldr	fp, [r7, #8]
   199c0:	moveq	r5, r9
   199c4:	str	r3, [sp, #28]
   199c8:	ldr	r3, [r4, #40]	; 0x28
   199cc:	str	fp, [r4, #100]	; 0x64
   199d0:	str	r5, [r4, #40]	; 0x28
   199d4:	ldr	r2, [r4, #88]	; 0x58
   199d8:	sub	r1, r5, #1
   199dc:	mov	r0, r4
   199e0:	str	r3, [sp, #32]
   199e4:	bl	179c4 <__assert_fail@plt+0x6690>
   199e8:	cmp	r5, r9
   199ec:	mov	r8, r0
   199f0:	bne	19a6c <__assert_fail@plt+0x8738>
   199f4:	mov	r1, r6
   199f8:	add	r0, sp, #48	; 0x30
   199fc:	bl	14818 <__assert_fail@plt+0x34e4>
   19a00:	cmp	r0, #0
   19a04:	str	r0, [sp, #40]	; 0x28
   19a08:	bne	19968 <__assert_fail@plt+0x8634>
   19a0c:	ldr	r3, [sp, #120]	; 0x78
   19a10:	ldr	r2, [sp, #16]
   19a14:	add	r1, sp, #48	; 0x30
   19a18:	mov	r0, sl
   19a1c:	bl	193c4 <__assert_fail@plt+0x8090>
   19a20:	cmp	r0, #0
   19a24:	str	r0, [sp, #40]	; 0x28
   19a28:	bne	19b5c <__assert_fail@plt+0x8828>
   19a2c:	ldr	r3, [sp, #52]	; 0x34
   19a30:	cmp	r3, #0
   19a34:	bne	19b34 <__assert_fail@plt+0x8800>
   19a38:	mov	r3, r8
   19a3c:	add	r2, sp, #48	; 0x30
   19a40:	mov	r1, sl
   19a44:	add	r0, sp, #40	; 0x28
   19a48:	bl	16a44 <__assert_fail@plt+0x5710>
   19a4c:	subs	r6, r0, #0
   19a50:	bne	19a60 <__assert_fail@plt+0x872c>
   19a54:	ldr	r3, [sp, #40]	; 0x28
   19a58:	cmp	r3, #0
   19a5c:	bne	19b5c <__assert_fail@plt+0x8828>
   19a60:	ldr	r3, [r4, #100]	; 0x64
   19a64:	str	r6, [r3, r5, lsl #2]
   19a68:	b	19aa8 <__assert_fail@plt+0x8774>
   19a6c:	ldr	r6, [fp, r5, lsl #2]
   19a70:	cmp	r6, #0
   19a74:	beq	19b18 <__assert_fail@plt+0x87e4>
   19a78:	ldrb	r3, [r6, #52]	; 0x34
   19a7c:	tst	r3, #64	; 0x40
   19a80:	beq	19b18 <__assert_fail@plt+0x87e4>
   19a84:	add	r1, r6, #4
   19a88:	add	r0, sp, #48	; 0x30
   19a8c:	bl	16894 <__assert_fail@plt+0x5560>
   19a90:	cmp	r0, #0
   19a94:	str	r0, [sp, #40]	; 0x28
   19a98:	bne	19968 <__assert_fail@plt+0x8634>
   19a9c:	ldrb	r3, [r6, #52]	; 0x34
   19aa0:	tst	r3, #64	; 0x40
   19aa4:	bne	19a2c <__assert_fail@plt+0x86f8>
   19aa8:	add	r3, r5, #1
   19aac:	lsl	r3, r3, #2
   19ab0:	str	r3, [sp, #24]
   19ab4:	mov	r3, #0
   19ab8:	str	r3, [sp, #12]
   19abc:	ldr	r3, [sp, #116]	; 0x74
   19ac0:	cmp	r5, r3
   19ac4:	blt	19d80 <__assert_fail@plt+0x8a4c>
   19ac8:	ldr	r0, [sp, #56]	; 0x38
   19acc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19ad0:	ldr	r3, [r4, #100]	; 0x64
   19ad4:	ldr	r2, [sp, #116]	; 0x74
   19ad8:	ldr	r0, [r3, r2, lsl #2]
   19adc:	ldr	r3, [sp, #28]
   19ae0:	cmp	r0, #0
   19ae4:	str	r5, [r7]
   19ae8:	addne	r0, r0, #4
   19aec:	str	r3, [r4, #100]	; 0x64
   19af0:	ldr	r3, [sp, #32]
   19af4:	cmp	r0, #0
   19af8:	str	r3, [r4, #40]	; 0x28
   19afc:	moveq	r0, #1
   19b00:	beq	19968 <__assert_fail@plt+0x8634>
   19b04:	ldr	r1, [sp, #112]	; 0x70
   19b08:	bl	13e08 <__assert_fail@plt+0x2ad4>
   19b0c:	clz	r0, r0
   19b10:	lsr	r0, r0, #5
   19b14:	b	19968 <__assert_fail@plt+0x8634>
   19b18:	mov	r3, #0
   19b1c:	cmp	r6, r3
   19b20:	str	r3, [sp, #48]	; 0x30
   19b24:	str	r3, [sp, #52]	; 0x34
   19b28:	str	r3, [sp, #56]	; 0x38
   19b2c:	bne	19a9c <__assert_fail@plt+0x8768>
   19b30:	b	19aa8 <__assert_fail@plt+0x8774>
   19b34:	ldr	r3, [sp, #120]	; 0x78
   19b38:	mov	r2, r5
   19b3c:	str	r3, [sp]
   19b40:	add	r1, sp, #48	; 0x30
   19b44:	ldr	r3, [sp, #16]
   19b48:	mov	r0, r4
   19b4c:	bl	19704 <__assert_fail@plt+0x83d0>
   19b50:	cmp	r0, #0
   19b54:	str	r0, [sp, #40]	; 0x28
   19b58:	beq	19a38 <__assert_fail@plt+0x8704>
   19b5c:	ldr	r0, [sp, #56]	; 0x38
   19b60:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19b64:	ldr	r0, [sp, #40]	; 0x28
   19b68:	b	19968 <__assert_fail@plt+0x8634>
   19b6c:	ldr	r3, [r6, #24]
   19b70:	ldr	r2, [sp, #20]
   19b74:	ldr	fp, [r3, r2, lsl #2]
   19b78:	ldr	r3, [r9]
   19b7c:	lsl	r8, fp, #3
   19b80:	add	r3, r3, r8
   19b84:	ldrb	r3, [r3, #6]
   19b88:	tst	r3, #16
   19b8c:	bne	19bb8 <__assert_fail@plt+0x8884>
   19b90:	ldr	r1, [r9]
   19b94:	mov	r2, r5
   19b98:	add	r1, r1, r8
   19b9c:	mov	r0, r4
   19ba0:	bl	180e4 <__assert_fail@plt+0x6db0>
   19ba4:	cmp	r0, #0
   19ba8:	bne	19d48 <__assert_fail@plt+0x8a14>
   19bac:	ldr	r3, [sp, #20]
   19bb0:	add	r3, r3, #1
   19bb4:	b	19de4 <__assert_fail@plt+0x8ab0>
   19bb8:	mov	r3, r5
   19bbc:	mov	r2, r4
   19bc0:	mov	r1, fp
   19bc4:	mov	r0, r9
   19bc8:	bl	16318 <__assert_fail@plt+0x4fe4>
   19bcc:	cmp	r0, #1
   19bd0:	ble	19d74 <__assert_fail@plt+0x8a40>
   19bd4:	ldr	r2, [r4, #100]	; 0x64
   19bd8:	add	r8, r5, r0
   19bdc:	ldr	r3, [r9, #12]
   19be0:	ldr	r1, [r2, r8, lsl #2]
   19be4:	mov	r2, #0
   19be8:	cmp	r1, r2
   19bec:	ldr	r3, [r3, fp, lsl #2]
   19bf0:	str	r2, [sp, #64]	; 0x40
   19bf4:	beq	19cf4 <__assert_fail@plt+0x89c0>
   19bf8:	add	r1, r1, #4
   19bfc:	add	r0, sp, #60	; 0x3c
   19c00:	str	r3, [sp, #36]	; 0x24
   19c04:	bl	17678 <__assert_fail@plt+0x6344>
   19c08:	ldr	r3, [sp, #36]	; 0x24
   19c0c:	cmp	r0, #0
   19c10:	str	r0, [sp, #44]	; 0x2c
   19c14:	beq	19cf4 <__assert_fail@plt+0x89c0>
   19c18:	ldr	r0, [sp, #68]	; 0x44
   19c1c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19c20:	ldr	r3, [sp, #44]	; 0x2c
   19c24:	cmp	r3, #0
   19c28:	str	r3, [sp, #40]	; 0x28
   19c2c:	bne	19b5c <__assert_fail@plt+0x8828>
   19c30:	ldr	r3, [sp, #52]	; 0x34
   19c34:	add	r6, r5, #1
   19c38:	cmp	r3, #0
   19c3c:	beq	19c88 <__assert_fail@plt+0x8954>
   19c40:	ldr	r3, [sp, #120]	; 0x78
   19c44:	ldr	r2, [sp, #16]
   19c48:	add	r1, sp, #48	; 0x30
   19c4c:	mov	r0, sl
   19c50:	bl	193c4 <__assert_fail@plt+0x8090>
   19c54:	cmp	r0, #0
   19c58:	str	r0, [sp, #40]	; 0x28
   19c5c:	bne	19b5c <__assert_fail@plt+0x8828>
   19c60:	ldr	r3, [sp, #120]	; 0x78
   19c64:	mov	r2, r6
   19c68:	str	r3, [sp]
   19c6c:	add	r1, sp, #48	; 0x30
   19c70:	ldr	r3, [sp, #16]
   19c74:	mov	r0, r4
   19c78:	bl	19704 <__assert_fail@plt+0x83d0>
   19c7c:	cmp	r0, #0
   19c80:	str	r0, [sp, #40]	; 0x28
   19c84:	bne	19b5c <__assert_fail@plt+0x8828>
   19c88:	ldr	r2, [r4, #88]	; 0x58
   19c8c:	mov	r1, r5
   19c90:	mov	r0, r4
   19c94:	bl	179c4 <__assert_fail@plt+0x6690>
   19c98:	add	r2, sp, #48	; 0x30
   19c9c:	mov	r1, sl
   19ca0:	mov	r3, r0
   19ca4:	add	r0, sp, #40	; 0x28
   19ca8:	bl	16a44 <__assert_fail@plt+0x5710>
   19cac:	subs	r6, r0, #0
   19cb0:	bne	19cc0 <__assert_fail@plt+0x898c>
   19cb4:	ldr	r3, [sp, #40]	; 0x28
   19cb8:	cmp	r3, #0
   19cbc:	bne	19b5c <__assert_fail@plt+0x8828>
   19cc0:	ldr	r3, [r4, #100]	; 0x64
   19cc4:	ldr	r2, [sp, #24]
   19cc8:	cmp	r6, #0
   19ccc:	add	r5, r5, #1
   19cd0:	str	r6, [r3, r2]
   19cd4:	ldreq	r3, [sp, #12]
   19cd8:	movne	r3, #0
   19cdc:	addeq	r3, r3, #1
   19ce0:	str	r3, [sp, #12]
   19ce4:	ldr	r3, [sp, #24]
   19ce8:	add	r3, r3, #4
   19cec:	str	r3, [sp, #24]
   19cf0:	b	19abc <__assert_fail@plt+0x8788>
   19cf4:	mov	r1, r3
   19cf8:	add	r0, sp, #60	; 0x3c
   19cfc:	bl	17270 <__assert_fail@plt+0x5f3c>
   19d00:	cmp	r0, #0
   19d04:	bne	19d18 <__assert_fail@plt+0x89e4>
   19d08:	ldr	r0, [sp, #68]	; 0x44
   19d0c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19d10:	mov	r3, #12
   19d14:	b	19c24 <__assert_fail@plt+0x88f0>
   19d18:	ldr	r3, [r4, #100]	; 0x64
   19d1c:	add	r2, sp, #60	; 0x3c
   19d20:	mov	r1, r9
   19d24:	add	r0, sp, #44	; 0x2c
   19d28:	str	r3, [sp, #36]	; 0x24
   19d2c:	bl	194bc <__assert_fail@plt+0x8188>
   19d30:	ldr	r3, [sp, #36]	; 0x24
   19d34:	str	r0, [r3, r8, lsl #2]
   19d38:	ldr	r3, [r4, #100]	; 0x64
   19d3c:	ldr	r3, [r3, r8, lsl #2]
   19d40:	cmp	r3, #0
   19d44:	beq	19d64 <__assert_fail@plt+0x8a30>
   19d48:	ldr	r3, [r9, #12]
   19d4c:	add	r0, sp, #48	; 0x30
   19d50:	ldr	r1, [r3, fp, lsl #2]
   19d54:	bl	17270 <__assert_fail@plt+0x5f3c>
   19d58:	cmp	r0, #0
   19d5c:	bne	19bac <__assert_fail@plt+0x8878>
   19d60:	b	19d08 <__assert_fail@plt+0x89d4>
   19d64:	ldr	r3, [sp, #44]	; 0x2c
   19d68:	cmp	r3, #0
   19d6c:	beq	19d48 <__assert_fail@plt+0x8a14>
   19d70:	b	19c18 <__assert_fail@plt+0x88e4>
   19d74:	cmp	r0, #0
   19d78:	bne	19d48 <__assert_fail@plt+0x8a14>
   19d7c:	b	19b90 <__assert_fail@plt+0x885c>
   19d80:	ldr	r3, [r4, #120]	; 0x78
   19d84:	ldr	r2, [sp, #12]
   19d88:	cmp	r2, r3
   19d8c:	bgt	19ac8 <__assert_fail@plt+0x8794>
   19d90:	mov	r3, #0
   19d94:	str	r3, [sp, #52]	; 0x34
   19d98:	ldr	r2, [sp, #24]
   19d9c:	ldr	r3, [r4, #100]	; 0x64
   19da0:	ldr	r1, [r3, r2]
   19da4:	cmp	r1, #0
   19da8:	beq	19e08 <__assert_fail@plt+0x8ad4>
   19dac:	add	r1, r1, #4
   19db0:	add	r0, sp, #48	; 0x30
   19db4:	bl	17678 <__assert_fail@plt+0x6344>
   19db8:	cmp	r0, #0
   19dbc:	str	r0, [sp, #40]	; 0x28
   19dc0:	bne	19b5c <__assert_fail@plt+0x8828>
   19dc4:	cmp	r6, #0
   19dc8:	beq	19c30 <__assert_fail@plt+0x88fc>
   19dcc:	ldr	r9, [r4, #84]	; 0x54
   19dd0:	mov	r3, #0
   19dd4:	str	r3, [sp, #44]	; 0x2c
   19dd8:	str	r3, [sp, #60]	; 0x3c
   19ddc:	str	r3, [sp, #64]	; 0x40
   19de0:	str	r3, [sp, #68]	; 0x44
   19de4:	str	r3, [sp, #20]
   19de8:	ldr	r2, [sp, #20]
   19dec:	ldr	r3, [r6, #20]
   19df0:	cmp	r2, r3
   19df4:	blt	19b6c <__assert_fail@plt+0x8838>
   19df8:	ldr	r0, [sp, #68]	; 0x44
   19dfc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19e00:	mov	r3, #0
   19e04:	b	19c24 <__assert_fail@plt+0x88f0>
   19e08:	cmp	r6, #0
   19e0c:	bne	19dcc <__assert_fail@plt+0x8a98>
   19e10:	b	19c88 <__assert_fail@plt+0x8954>
   19e14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e18:	sub	sp, sp, #20
   19e1c:	mov	r8, r2
   19e20:	ldr	r5, [sp, #56]	; 0x38
   19e24:	mov	sl, r3
   19e28:	mov	r3, #8
   19e2c:	str	r3, [sp, #8]
   19e30:	str	r5, [sp, #4]
   19e34:	str	sl, [sp]
   19e38:	mov	r7, r1
   19e3c:	ldm	r2, {r2, r3}
   19e40:	add	r1, r8, #8
   19e44:	mov	r4, r0
   19e48:	bl	19908 <__assert_fail@plt+0x85d4>
   19e4c:	subs	fp, r0, #0
   19e50:	bne	19e90 <__assert_fail@plt+0x8b5c>
   19e54:	ldr	r3, [r4, #112]	; 0x70
   19e58:	ldr	r2, [r4, #108]	; 0x6c
   19e5c:	ldr	r9, [r7]
   19e60:	cmp	r2, r3
   19e64:	ldr	r6, [r8, #4]
   19e68:	blt	19ec8 <__assert_fail@plt+0x8b94>
   19e6c:	mov	r1, #48	; 0x30
   19e70:	ldr	r0, [r4, #116]	; 0x74
   19e74:	mul	r1, r1, r3
   19e78:	bl	1fd98 <__assert_fail@plt+0xea64>
   19e7c:	subs	r3, r0, #0
   19e80:	bne	19e9c <__assert_fail@plt+0x8b68>
   19e84:	ldr	r0, [r4, #116]	; 0x74
   19e88:	bl	1ff1c <__assert_fail@plt+0xebe8>
   19e8c:	mov	fp, #12
   19e90:	mov	r0, fp
   19e94:	add	sp, sp, #20
   19e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e9c:	ldr	r2, [r4, #112]	; 0x70
   19ea0:	ldr	ip, [r4, #108]	; 0x6c
   19ea4:	mov	r0, #24
   19ea8:	str	r3, [r4, #116]	; 0x74
   19eac:	mul	r2, r0, r2
   19eb0:	mov	r1, fp
   19eb4:	mla	r0, r0, ip, r3
   19eb8:	bl	11238 <memset@plt>
   19ebc:	ldr	r3, [r4, #112]	; 0x70
   19ec0:	lsl	r3, r3, #1
   19ec4:	str	r3, [r4, #112]	; 0x70
   19ec8:	ldr	r3, [r4, #108]	; 0x6c
   19ecc:	cmp	r3, #0
   19ed0:	ble	19ef8 <__assert_fail@plt+0x8bc4>
   19ed4:	mov	r2, #24
   19ed8:	ldr	r1, [r4, #116]	; 0x74
   19edc:	mul	r2, r2, r3
   19ee0:	sub	r2, r2, #24
   19ee4:	add	r2, r1, r2
   19ee8:	ldr	r1, [r2, #4]
   19eec:	cmp	r5, r1
   19ef0:	moveq	r1, #1
   19ef4:	strbeq	r1, [r2, #20]
   19ef8:	mov	r1, #24
   19efc:	ldr	r0, [r4, #116]	; 0x74
   19f00:	mul	r1, r1, r3
   19f04:	cmp	r9, r6
   19f08:	add	r2, r0, r1
   19f0c:	str	sl, [r0, r1]
   19f10:	add	r3, r3, #1
   19f14:	movne	r1, #0
   19f18:	mvneq	r1, #0
   19f1c:	stmib	r2, {r5, r9}
   19f20:	str	r6, [r2, #12]
   19f24:	str	r1, [r2, #16]
   19f28:	str	r3, [r4, #108]	; 0x6c
   19f2c:	mov	r3, #0
   19f30:	strb	r3, [r2, #20]
   19f34:	ldr	r3, [r4, #120]	; 0x78
   19f38:	sub	r6, r6, r9
   19f3c:	ldr	r1, [r8, #4]
   19f40:	cmp	r3, r6
   19f44:	add	r5, r5, r1
   19f48:	strlt	r6, [r4, #120]	; 0x78
   19f4c:	ldr	r1, [r7]
   19f50:	mov	r0, r4
   19f54:	sub	r1, r5, r1
   19f58:	add	sp, sp, #20
   19f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f60:	b	158bc <__assert_fail@plt+0x4588>
   19f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f68:	sub	sp, sp, #84	; 0x54
   19f6c:	ldr	sl, [r0, #40]	; 0x28
   19f70:	ldr	fp, [r0, #84]	; 0x54
   19f74:	mov	r4, r0
   19f78:	lsl	r3, sl, #2
   19f7c:	str	r3, [sp, #44]	; 0x2c
   19f80:	mov	r3, #0
   19f84:	str	r1, [sp, #56]	; 0x38
   19f88:	str	r3, [sp, #24]
   19f8c:	ldr	r3, [sp, #56]	; 0x38
   19f90:	ldr	r2, [sp, #24]
   19f94:	ldr	r3, [r3, #4]
   19f98:	cmp	r2, r3
   19f9c:	movge	r3, #0
   19fa0:	strge	r3, [sp, #64]	; 0x40
   19fa4:	bge	1a560 <__assert_fail@plt+0x922c>
   19fa8:	ldr	r3, [sp, #56]	; 0x38
   19fac:	ldr	r2, [sp, #24]
   19fb0:	ldr	r3, [r3, #8]
   19fb4:	ldr	r3, [r3, r2, lsl #2]
   19fb8:	str	r3, [sp, #20]
   19fbc:	ldr	r2, [sp, #20]
   19fc0:	ldr	r3, [fp]
   19fc4:	add	r3, r3, r2, lsl #3
   19fc8:	ldrb	r2, [r3, #4]
   19fcc:	cmp	r2, #4
   19fd0:	beq	19fe0 <__assert_fail@plt+0x8cac>
   19fd4:	ldr	r3, [sp, #24]
   19fd8:	add	r3, r3, #1
   19fdc:	b	19f88 <__assert_fail@plt+0x8c54>
   19fe0:	ldr	r5, [r3, #4]
   19fe4:	ldr	r3, [pc, #1444]	; 1a590 <__assert_fail@plt+0x925c>
   19fe8:	tst	r5, r3
   19fec:	beq	1a048 <__assert_fail@plt+0x8d14>
   19ff0:	ldr	r2, [r4, #88]	; 0x58
   19ff4:	mov	r1, sl
   19ff8:	mov	r0, r4
   19ffc:	bl	179c4 <__assert_fail@plt+0x6690>
   1a000:	ldr	r3, [pc, #1420]	; 1a594 <__assert_fail@plt+0x9260>
   1a004:	and	r3, r3, r5, lsr #8
   1a008:	tst	r3, #4
   1a00c:	beq	1a018 <__assert_fail@plt+0x8ce4>
   1a010:	tst	r0, #1
   1a014:	beq	19fd4 <__assert_fail@plt+0x8ca0>
   1a018:	tst	r3, #8
   1a01c:	beq	1a028 <__assert_fail@plt+0x8cf4>
   1a020:	tst	r0, #1
   1a024:	bne	19fd4 <__assert_fail@plt+0x8ca0>
   1a028:	tst	r3, #32
   1a02c:	beq	1a038 <__assert_fail@plt+0x8d04>
   1a030:	tst	r0, #2
   1a034:	beq	19fd4 <__assert_fail@plt+0x8ca0>
   1a038:	tst	r3, #128	; 0x80
   1a03c:	beq	1a048 <__assert_fail@plt+0x8d14>
   1a040:	tst	r0, #8
   1a044:	beq	19fd4 <__assert_fail@plt+0x8ca0>
   1a048:	ldr	r3, [r4, #108]	; 0x6c
   1a04c:	mov	r1, sl
   1a050:	mov	r0, r4
   1a054:	str	r3, [sp, #28]
   1a058:	bl	1420c <__assert_fail@plt+0x2ed8>
   1a05c:	cmn	r0, #1
   1a060:	beq	1a110 <__assert_fail@plt+0x8ddc>
   1a064:	mov	r3, #24
   1a068:	mul	r0, r3, r0
   1a06c:	add	r3, r0, r3
   1a070:	ldr	r0, [r4, #116]	; 0x74
   1a074:	add	r0, r0, r3
   1a078:	ldr	r3, [r0, #-24]	; 0xffffffe8
   1a07c:	ldr	r2, [sp, #20]
   1a080:	cmp	r2, r3
   1a084:	bne	1a100 <__assert_fail@plt+0x8dcc>
   1a088:	mov	r0, #0
   1a08c:	cmp	r0, #0
   1a090:	str	r0, [sp, #64]	; 0x40
   1a094:	bne	1a560 <__assert_fail@plt+0x922c>
   1a098:	ldr	r3, [sp, #20]
   1a09c:	ldr	r2, [sp, #20]
   1a0a0:	mov	r7, #24
   1a0a4:	lsl	r3, r3, #2
   1a0a8:	str	r3, [sp, #32]
   1a0ac:	mov	r3, #12
   1a0b0:	str	r0, [sp, #48]	; 0x30
   1a0b4:	mul	r3, r3, r2
   1a0b8:	str	r3, [sp, #40]	; 0x28
   1a0bc:	ldr	r3, [sp, #28]
   1a0c0:	mul	r7, r7, r3
   1a0c4:	ldr	r3, [r4, #108]	; 0x6c
   1a0c8:	ldr	r2, [sp, #28]
   1a0cc:	cmp	r2, r3
   1a0d0:	bge	19fd4 <__assert_fail@plt+0x8ca0>
   1a0d4:	ldr	r2, [r4, #116]	; 0x74
   1a0d8:	ldr	r1, [sp, #20]
   1a0dc:	add	r3, r2, r7
   1a0e0:	ldr	r2, [r2, r7]
   1a0e4:	cmp	r1, r2
   1a0e8:	beq	1a420 <__assert_fail@plt+0x90ec>
   1a0ec:	ldr	r3, [sp, #28]
   1a0f0:	add	r7, r7, #24
   1a0f4:	add	r3, r3, #1
   1a0f8:	str	r3, [sp, #28]
   1a0fc:	b	1a0c4 <__assert_fail@plt+0x8d90>
   1a100:	add	r0, r0, #24
   1a104:	ldrb	r3, [r0, #-28]	; 0xffffffe4
   1a108:	cmp	r3, #0
   1a10c:	bne	1a078 <__assert_fail@plt+0x8d44>
   1a110:	ldr	r3, [r4, #84]	; 0x54
   1a114:	ldr	r2, [sp, #20]
   1a118:	str	r3, [sp, #40]	; 0x28
   1a11c:	ldr	r3, [r3]
   1a120:	ldr	r8, [r4, #4]
   1a124:	ldr	r3, [r3, r2, lsl #3]
   1a128:	str	r3, [sp, #48]	; 0x30
   1a12c:	mov	r3, #0
   1a130:	str	r3, [sp, #32]
   1a134:	ldr	r2, [sp, #32]
   1a138:	ldr	r3, [r4, #124]	; 0x7c
   1a13c:	cmp	r2, r3
   1a140:	bge	1a088 <__assert_fail@plt+0x8d54>
   1a144:	ldr	r3, [r4, #132]	; 0x84
   1a148:	ldr	r2, [sp, #32]
   1a14c:	ldr	r5, [r3, r2, lsl #2]
   1a150:	ldr	r3, [sp, #40]	; 0x28
   1a154:	ldr	r2, [r5, #4]
   1a158:	ldr	r3, [r3]
   1a15c:	ldr	r3, [r3, r2, lsl #3]
   1a160:	ldr	r2, [sp, #48]	; 0x30
   1a164:	cmp	r2, r3
   1a168:	moveq	r7, sl
   1a16c:	ldreq	r6, [r5]
   1a170:	moveq	r9, #0
   1a174:	beq	1a1d4 <__assert_fail@plt+0x8ea0>
   1a178:	ldr	r3, [sp, #32]
   1a17c:	add	r3, r3, #1
   1a180:	b	1a130 <__assert_fail@plt+0x8dfc>
   1a184:	ldr	r3, [r5, #20]
   1a188:	ldr	r3, [r3, r9, lsl #2]
   1a18c:	str	r3, [sp, #52]	; 0x34
   1a190:	ldr	r3, [r3, #4]
   1a194:	str	r3, [sp, #36]	; 0x24
   1a198:	sub	r3, r3, r6
   1a19c:	cmp	r3, #0
   1a1a0:	bgt	1a1e4 <__assert_fail@plt+0x8eb0>
   1a1a4:	add	r7, r7, r3
   1a1a8:	str	sl, [sp]
   1a1ac:	ldr	r3, [sp, #20]
   1a1b0:	ldr	r2, [sp, #52]	; 0x34
   1a1b4:	mov	r1, r5
   1a1b8:	mov	r0, r4
   1a1bc:	bl	19e14 <__assert_fail@plt+0x8ae0>
   1a1c0:	ldr	r8, [r4, #4]
   1a1c4:	cmp	r0, #1
   1a1c8:	bhi	1a08c <__assert_fail@plt+0x8d58>
   1a1cc:	ldr	r6, [sp, #36]	; 0x24
   1a1d0:	add	r9, r9, #1
   1a1d4:	ldr	r3, [r5, #16]
   1a1d8:	cmp	r9, r3
   1a1dc:	blt	1a184 <__assert_fail@plt+0x8e50>
   1a1e0:	b	1a23c <__assert_fail@plt+0x8f08>
   1a1e4:	ldr	r2, [r4, #28]
   1a1e8:	add	r1, r3, r7
   1a1ec:	cmp	r1, r2
   1a1f0:	ble	1a21c <__assert_fail@plt+0x8ee8>
   1a1f4:	ldr	r2, [r4, #48]	; 0x30
   1a1f8:	str	r3, [sp, #60]	; 0x3c
   1a1fc:	cmp	r1, r2
   1a200:	bgt	1a23c <__assert_fail@plt+0x8f08>
   1a204:	mov	r0, r4
   1a208:	bl	158bc <__assert_fail@plt+0x4588>
   1a20c:	cmp	r0, #0
   1a210:	bne	1a08c <__assert_fail@plt+0x8d58>
   1a214:	ldr	r8, [r4, #4]
   1a218:	ldr	r3, [sp, #60]	; 0x3c
   1a21c:	mov	r2, r3
   1a220:	add	r1, r8, r6
   1a224:	add	r0, r8, r7
   1a228:	str	r3, [sp, #60]	; 0x3c
   1a22c:	bl	110f4 <memcmp@plt>
   1a230:	ldr	r3, [sp, #60]	; 0x3c
   1a234:	cmp	r0, #0
   1a238:	beq	1a1a4 <__assert_fail@plt+0x8e70>
   1a23c:	ldr	r3, [r5, #16]
   1a240:	cmp	r9, r3
   1a244:	blt	1a178 <__assert_fail@plt+0x8e44>
   1a248:	cmp	r9, #0
   1a24c:	addgt	r6, r6, #1
   1a250:	lsl	r3, r6, #2
   1a254:	cmp	sl, r6
   1a258:	str	r3, [sp, #36]	; 0x24
   1a25c:	blt	1a178 <__assert_fail@plt+0x8e44>
   1a260:	ldr	r3, [r5]
   1a264:	sub	r3, r6, r3
   1a268:	cmp	r3, #0
   1a26c:	ble	1a2bc <__assert_fail@plt+0x8f88>
   1a270:	ldr	r3, [r4, #28]
   1a274:	cmp	r3, r7
   1a278:	bgt	1a2a0 <__assert_fail@plt+0x8f6c>
   1a27c:	ldr	r3, [r4, #48]	; 0x30
   1a280:	cmp	r7, r3
   1a284:	bge	1a178 <__assert_fail@plt+0x8e44>
   1a288:	add	r1, r7, #1
   1a28c:	mov	r0, r4
   1a290:	bl	14ff8 <__assert_fail@plt+0x3cc4>
   1a294:	cmp	r0, #0
   1a298:	bne	1a08c <__assert_fail@plt+0x8d58>
   1a29c:	ldr	r8, [r4, #4]
   1a2a0:	add	r3, r8, r6
   1a2a4:	ldrb	r1, [r8, r7]
   1a2a8:	ldrb	r3, [r3, #-1]
   1a2ac:	add	r2, r7, #1
   1a2b0:	cmp	r1, r3
   1a2b4:	bne	1a178 <__assert_fail@plt+0x8e44>
   1a2b8:	mov	r7, r2
   1a2bc:	ldr	r3, [r4, #100]	; 0x64
   1a2c0:	ldr	r2, [sp, #36]	; 0x24
   1a2c4:	ldr	r2, [r3, r2]
   1a2c8:	cmp	r2, #0
   1a2cc:	movne	r3, #0
   1a2d0:	ldrne	r0, [r2, #8]
   1a2d4:	bne	1a31c <__assert_fail@plt+0x8fe8>
   1a2d8:	ldr	r3, [sp, #36]	; 0x24
   1a2dc:	add	r6, r6, #1
   1a2e0:	add	r3, r3, #4
   1a2e4:	b	1a254 <__assert_fail@plt+0x8f20>
   1a2e8:	ldr	r1, [r2, #12]
   1a2ec:	ldr	r9, [r1, r3, lsl #2]
   1a2f0:	ldr	r1, [sp, #40]	; 0x28
   1a2f4:	ldr	r1, [r1]
   1a2f8:	add	ip, r1, r9, lsl #3
   1a2fc:	ldrb	ip, [ip, #4]
   1a300:	cmp	ip, #9
   1a304:	bne	1a318 <__assert_fail@plt+0x8fe4>
   1a308:	ldr	r1, [r1, r9, lsl #3]
   1a30c:	ldr	ip, [sp, #48]	; 0x30
   1a310:	cmp	ip, r1
   1a314:	beq	1a328 <__assert_fail@plt+0x8ff4>
   1a318:	add	r3, r3, #1
   1a31c:	cmp	r3, r0
   1a320:	blt	1a2e8 <__assert_fail@plt+0x8fb4>
   1a324:	b	1a2d8 <__assert_fail@plt+0x8fa4>
   1a328:	cmn	r9, #1
   1a32c:	beq	1a2d8 <__assert_fail@plt+0x8fa4>
   1a330:	ldr	r3, [r5, #8]
   1a334:	cmp	r3, #0
   1a338:	beq	1a3f8 <__assert_fail@plt+0x90c4>
   1a33c:	mov	r3, #9
   1a340:	str	r3, [sp, #8]
   1a344:	str	r6, [sp, #4]
   1a348:	str	r9, [sp]
   1a34c:	mov	r0, r4
   1a350:	ldr	r3, [r5]
   1a354:	ldr	r2, [r5, #4]
   1a358:	ldr	r1, [r5, #8]
   1a35c:	bl	19908 <__assert_fail@plt+0x85d4>
   1a360:	cmp	r0, #1
   1a364:	beq	1a2d8 <__assert_fail@plt+0x8fa4>
   1a368:	cmp	r0, #0
   1a36c:	bne	1a08c <__assert_fail@plt+0x8d58>
   1a370:	ldr	r8, [r5, #16]
   1a374:	ldr	r3, [r5, #12]
   1a378:	cmp	r8, r3
   1a37c:	bne	1a3a4 <__assert_fail@plt+0x9070>
   1a380:	lsl	r8, r8, #1
   1a384:	add	r8, r8, #1
   1a388:	ldr	r0, [r5, #20]
   1a38c:	lsl	r1, r8, #2
   1a390:	bl	1fd98 <__assert_fail@plt+0xea64>
   1a394:	cmp	r0, #0
   1a398:	beq	1a418 <__assert_fail@plt+0x90e4>
   1a39c:	str	r0, [r5, #20]
   1a3a0:	str	r8, [r5, #12]
   1a3a4:	mov	r1, #20
   1a3a8:	mov	r0, #1
   1a3ac:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1a3b0:	subs	r2, r0, #0
   1a3b4:	beq	1a418 <__assert_fail@plt+0x90e4>
   1a3b8:	ldr	r3, [r5, #16]
   1a3bc:	ldr	r1, [r5, #20]
   1a3c0:	mov	r0, r4
   1a3c4:	str	r2, [r1, r3, lsl #2]
   1a3c8:	add	r3, r3, #1
   1a3cc:	str	r9, [r2]
   1a3d0:	str	r6, [r2, #4]
   1a3d4:	mov	r1, r5
   1a3d8:	str	r3, [r5, #16]
   1a3dc:	str	sl, [sp]
   1a3e0:	ldr	r3, [sp, #20]
   1a3e4:	bl	19e14 <__assert_fail@plt+0x8ae0>
   1a3e8:	ldr	r8, [r4, #4]
   1a3ec:	cmp	r0, #1
   1a3f0:	bls	1a2d8 <__assert_fail@plt+0x8fa4>
   1a3f4:	b	1a08c <__assert_fail@plt+0x8d58>
   1a3f8:	ldr	r1, [r5]
   1a3fc:	mov	r0, #12
   1a400:	sub	r1, r6, r1
   1a404:	add	r1, r1, #1
   1a408:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1a40c:	cmp	r0, #0
   1a410:	str	r0, [r5, #8]
   1a414:	bne	1a33c <__assert_fail@plt+0x9008>
   1a418:	mov	r0, #12
   1a41c:	b	1a08c <__assert_fail@plt+0x8d58>
   1a420:	ldr	r2, [r3, #4]
   1a424:	cmp	sl, r2
   1a428:	bne	1a0ec <__assert_fail@plt+0x8db8>
   1a42c:	ldr	r5, [r3, #12]
   1a430:	ldr	r3, [r3, #8]
   1a434:	mov	r0, r4
   1a438:	subs	r2, r5, r3
   1a43c:	str	r2, [sp, #36]	; 0x24
   1a440:	ldreq	r1, [sp, #40]	; 0x28
   1a444:	ldreq	r2, [fp, #20]
   1a448:	ldrne	r2, [fp, #12]
   1a44c:	addeq	r2, r2, r1
   1a450:	ldrne	r1, [sp, #32]
   1a454:	ldreq	r2, [r2, #8]
   1a458:	add	r5, sl, r5
   1a45c:	ldrne	r6, [r2, r1]
   1a460:	ldreq	r6, [r2]
   1a464:	mov	r1, #12
   1a468:	ldr	r2, [fp, #24]
   1a46c:	sub	r5, r5, r3
   1a470:	mla	r6, r1, r6, r2
   1a474:	ldr	r2, [r4, #88]	; 0x58
   1a478:	sub	r1, r5, #1
   1a47c:	bl	179c4 <__assert_fail@plt+0x6690>
   1a480:	ldr	r8, [r4, #100]	; 0x64
   1a484:	ldr	r2, [sp, #44]	; 0x2c
   1a488:	ldr	r1, [r8, r5, lsl #2]
   1a48c:	ldr	r2, [r8, r2]
   1a490:	cmp	r2, #0
   1a494:	ldrne	r9, [r2, #8]
   1a498:	ldreq	r9, [sp, #48]	; 0x30
   1a49c:	cmp	r1, #0
   1a4a0:	mov	r3, r0
   1a4a4:	bne	1a534 <__assert_fail@plt+0x9200>
   1a4a8:	mov	r2, r6
   1a4ac:	mov	r1, fp
   1a4b0:	add	r0, sp, #64	; 0x40
   1a4b4:	bl	16a44 <__assert_fail@plt+0x5710>
   1a4b8:	str	r0, [r8, r5, lsl #2]
   1a4bc:	ldr	r3, [r4, #100]	; 0x64
   1a4c0:	ldr	r3, [r3, r5, lsl #2]
   1a4c4:	cmp	r3, #0
   1a4c8:	bne	1a4d8 <__assert_fail@plt+0x91a4>
   1a4cc:	ldr	r3, [sp, #64]	; 0x40
   1a4d0:	cmp	r3, #0
   1a4d4:	bne	1a560 <__assert_fail@plt+0x922c>
   1a4d8:	ldr	r3, [sp, #36]	; 0x24
   1a4dc:	cmp	r3, #0
   1a4e0:	bne	1a0ec <__assert_fail@plt+0x8db8>
   1a4e4:	ldr	r3, [r4, #100]	; 0x64
   1a4e8:	ldr	r2, [sp, #44]	; 0x2c
   1a4ec:	ldr	r3, [r3, r2]
   1a4f0:	ldr	r3, [r3, #8]
   1a4f4:	cmp	r9, r3
   1a4f8:	bge	1a0ec <__assert_fail@plt+0x8db8>
   1a4fc:	mov	r2, sl
   1a500:	mov	r1, r6
   1a504:	mov	r0, r4
   1a508:	bl	157b8 <__assert_fail@plt+0x4484>
   1a50c:	cmp	r0, #0
   1a510:	str	r0, [sp, #64]	; 0x40
   1a514:	bne	1a560 <__assert_fail@plt+0x922c>
   1a518:	mov	r1, r6
   1a51c:	mov	r0, r4
   1a520:	bl	19f64 <__assert_fail@plt+0x8c30>
   1a524:	cmp	r0, #0
   1a528:	str	r0, [sp, #64]	; 0x40
   1a52c:	beq	1a0ec <__assert_fail@plt+0x8db8>
   1a530:	b	1a560 <__assert_fail@plt+0x922c>
   1a534:	str	r0, [sp, #52]	; 0x34
   1a538:	mov	r2, r6
   1a53c:	ldr	r1, [r1, #40]	; 0x28
   1a540:	add	r0, sp, #68	; 0x44
   1a544:	bl	1690c <__assert_fail@plt+0x55d8>
   1a548:	ldr	r3, [sp, #52]	; 0x34
   1a54c:	cmp	r0, #0
   1a550:	str	r0, [sp, #64]	; 0x40
   1a554:	beq	1a56c <__assert_fail@plt+0x9238>
   1a558:	ldr	r0, [sp, #76]	; 0x4c
   1a55c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1a560:	ldr	r0, [sp, #64]	; 0x40
   1a564:	add	sp, sp, #84	; 0x54
   1a568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a56c:	add	r2, sp, #68	; 0x44
   1a570:	mov	r1, fp
   1a574:	add	r0, sp, #64	; 0x40
   1a578:	ldr	r8, [r4, #100]	; 0x64
   1a57c:	bl	16a44 <__assert_fail@plt+0x5710>
   1a580:	str	r0, [r8, r5, lsl #2]
   1a584:	ldr	r0, [sp, #76]	; 0x4c
   1a588:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1a58c:	b	1a4bc <__assert_fail@plt+0x9188>
   1a590:	andeq	pc, r3, r0, lsl #30
   1a594:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1a598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a59c:	mov	r8, r0
   1a5a0:	ldr	r3, [r1, #104]	; 0x68
   1a5a4:	ldr	r6, [r1, #40]	; 0x28
   1a5a8:	ldr	sl, [r1, #84]	; 0x54
   1a5ac:	cmp	r6, r3
   1a5b0:	ldr	r3, [r1, #100]	; 0x64
   1a5b4:	sub	sp, sp, #20
   1a5b8:	mov	r5, r1
   1a5bc:	strgt	r2, [r3, r6, lsl #2]
   1a5c0:	mov	r4, r2
   1a5c4:	strgt	r6, [r1, #104]	; 0x68
   1a5c8:	bgt	1a668 <__assert_fail@plt+0x9334>
   1a5cc:	ldr	r2, [r3, r6, lsl #2]
   1a5d0:	cmp	r2, #0
   1a5d4:	streq	r4, [r3, r6, lsl #2]
   1a5d8:	beq	1a668 <__assert_fail@plt+0x9334>
   1a5dc:	cmp	r4, #0
   1a5e0:	ldr	r2, [r2, #40]	; 0x28
   1a5e4:	add	r7, sp, #4
   1a5e8:	beq	1a618 <__assert_fail@plt+0x92e4>
   1a5ec:	ldr	r9, [r4, #40]	; 0x28
   1a5f0:	mov	r0, r7
   1a5f4:	mov	r1, r9
   1a5f8:	bl	1690c <__assert_fail@plt+0x55d8>
   1a5fc:	cmp	r0, #0
   1a600:	str	r0, [r8]
   1a604:	beq	1a624 <__assert_fail@plt+0x92f0>
   1a608:	mov	r4, #0
   1a60c:	mov	r0, r4
   1a610:	add	sp, sp, #20
   1a614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a618:	ldm	r2, {r0, r1, r2}
   1a61c:	mov	r9, r4
   1a620:	stm	r7, {r0, r1, r2}
   1a624:	mov	r0, r5
   1a628:	ldr	r1, [r5, #40]	; 0x28
   1a62c:	ldr	r2, [r5, #88]	; 0x58
   1a630:	sub	r1, r1, #1
   1a634:	bl	179c4 <__assert_fail@plt+0x6690>
   1a638:	mov	r2, r7
   1a63c:	mov	r1, sl
   1a640:	ldr	fp, [r5, #100]	; 0x64
   1a644:	mov	r3, r0
   1a648:	mov	r0, r8
   1a64c:	bl	16a44 <__assert_fail@plt+0x5710>
   1a650:	cmp	r9, #0
   1a654:	mov	r4, r0
   1a658:	str	r0, [fp, r6, lsl #2]
   1a65c:	beq	1a668 <__assert_fail@plt+0x9334>
   1a660:	ldr	r0, [sp, #12]
   1a664:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1a668:	ldr	r3, [sl, #76]	; 0x4c
   1a66c:	cmp	r3, #0
   1a670:	beq	1a60c <__assert_fail@plt+0x92d8>
   1a674:	cmp	r4, #0
   1a678:	beq	1a608 <__assert_fail@plt+0x92d4>
   1a67c:	add	r7, r4, #4
   1a680:	mov	r2, r6
   1a684:	mov	r1, r7
   1a688:	mov	r0, r5
   1a68c:	bl	157b8 <__assert_fail@plt+0x4484>
   1a690:	cmp	r0, #0
   1a694:	str	r0, [r8]
   1a698:	bne	1a608 <__assert_fail@plt+0x92d4>
   1a69c:	ldrb	r3, [r4, #52]	; 0x34
   1a6a0:	tst	r3, #64	; 0x40
   1a6a4:	beq	1a60c <__assert_fail@plt+0x92d8>
   1a6a8:	mov	r1, r7
   1a6ac:	mov	r0, r5
   1a6b0:	bl	19f64 <__assert_fail@plt+0x8c30>
   1a6b4:	cmp	r0, #0
   1a6b8:	str	r0, [r8]
   1a6bc:	bne	1a608 <__assert_fail@plt+0x92d4>
   1a6c0:	ldr	r3, [r5, #100]	; 0x64
   1a6c4:	ldr	r4, [r3, r6, lsl #2]
   1a6c8:	b	1a60c <__assert_fail@plt+0x92d8>
   1a6cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6d0:	sub	sp, sp, #92	; 0x5c
   1a6d4:	mov	r4, r3
   1a6d8:	mov	r3, #0
   1a6dc:	str	r3, [sp, #56]	; 0x38
   1a6e0:	lsl	r3, r2, #2
   1a6e4:	str	r3, [sp, #32]
   1a6e8:	ldr	r3, [r0, #100]	; 0x64
   1a6ec:	mov	fp, r2
   1a6f0:	ldr	r7, [r0, #84]	; 0x54
   1a6f4:	ldr	r3, [r3, r2, lsl #2]
   1a6f8:	mov	r6, r0
   1a6fc:	cmp	r3, #0
   1a700:	addne	r3, r3, #4
   1a704:	str	r3, [sp, #8]
   1a708:	ldr	r3, [r4, #4]
   1a70c:	mov	r5, r1
   1a710:	cmp	r3, #0
   1a714:	ldreq	r2, [r1]
   1a718:	streq	r3, [r2, fp, lsl #2]
   1a71c:	beq	1aa20 <__assert_fail@plt+0x96ec>
   1a720:	ldr	r3, [sp, #8]
   1a724:	cmp	r3, #0
   1a728:	bne	1a75c <__assert_fail@plt+0x9428>
   1a72c:	mov	r2, r4
   1a730:	mov	r1, r7
   1a734:	add	r0, sp, #56	; 0x38
   1a738:	ldr	r8, [r5]
   1a73c:	bl	194bc <__assert_fail@plt+0x8188>
   1a740:	ldr	r3, [sp, #56]	; 0x38
   1a744:	cmp	r3, #0
   1a748:	str	r0, [r8, fp, lsl #2]
   1a74c:	beq	1aa20 <__assert_fail@plt+0x96ec>
   1a750:	mov	r0, r3
   1a754:	add	sp, sp, #92	; 0x5c
   1a758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a75c:	add	r0, sp, #88	; 0x58
   1a760:	mov	r3, #0
   1a764:	str	r3, [r0, #-28]!	; 0xffffffe4
   1a768:	mov	r2, r4
   1a76c:	mov	r1, r7
   1a770:	bl	194bc <__assert_fail@plt+0x8188>
   1a774:	ldr	r8, [sp, #60]	; 0x3c
   1a778:	cmp	r8, #0
   1a77c:	bne	1a7a4 <__assert_fail@plt+0x9470>
   1a780:	mov	r9, r0
   1a784:	ldr	r3, [r9, #28]!
   1a788:	cmp	r3, #0
   1a78c:	beq	1a7e4 <__assert_fail@plt+0x94b0>
   1a790:	mov	r2, r9
   1a794:	ldr	r1, [sp, #8]
   1a798:	mov	r0, r4
   1a79c:	bl	1671c <__assert_fail@plt+0x53e8>
   1a7a0:	mov	r8, r0
   1a7a4:	cmp	r8, #0
   1a7a8:	str	r8, [sp, #56]	; 0x38
   1a7ac:	movne	r3, r8
   1a7b0:	bne	1a750 <__assert_fail@plt+0x941c>
   1a7b4:	ldr	r3, [r5, #20]
   1a7b8:	cmp	r3, #0
   1a7bc:	strne	r8, [sp, #12]
   1a7c0:	ldrne	r3, [r6, #116]	; 0x74
   1a7c4:	strne	r3, [sp, #16]
   1a7c8:	beq	1a72c <__assert_fail@plt+0x93f8>
   1a7cc:	ldr	r3, [r5, #20]
   1a7d0:	ldr	r2, [sp, #12]
   1a7d4:	cmp	r2, r3
   1a7d8:	blt	1a844 <__assert_fail@plt+0x9510>
   1a7dc:	mov	r3, r8
   1a7e0:	b	1a9b4 <__assert_fail@plt+0x9680>
   1a7e4:	ldr	r1, [r4, #4]
   1a7e8:	mov	r0, r9
   1a7ec:	bl	14858 <__assert_fail@plt+0x3524>
   1a7f0:	cmp	r0, #0
   1a7f4:	str	r0, [sp, #60]	; 0x3c
   1a7f8:	moveq	r8, r0
   1a7fc:	moveq	sl, #12
   1a800:	beq	1a834 <__assert_fail@plt+0x9500>
   1a804:	mov	r8, #12
   1a808:	b	1a7a4 <__assert_fail@plt+0x9470>
   1a80c:	ldr	r3, [r4, #8]
   1a810:	mov	r0, r9
   1a814:	ldr	r1, [r3, r8, lsl #2]
   1a818:	ldr	r3, [r7, #28]
   1a81c:	mla	r1, sl, r1, r3
   1a820:	bl	17678 <__assert_fail@plt+0x6344>
   1a824:	cmp	r0, #0
   1a828:	str	r0, [sp, #60]	; 0x3c
   1a82c:	bne	1a804 <__assert_fail@plt+0x94d0>
   1a830:	add	r8, r8, #1
   1a834:	ldr	r3, [r4, #4]
   1a838:	cmp	r8, r3
   1a83c:	blt	1a80c <__assert_fail@plt+0x94d8>
   1a840:	b	1a790 <__assert_fail@plt+0x945c>
   1a844:	ldr	r2, [sp, #12]
   1a848:	ldr	r3, [r5, #24]
   1a84c:	ldr	r3, [r3, r2, lsl #2]
   1a850:	mov	r2, #24
   1a854:	mul	r3, r2, r3
   1a858:	ldr	r2, [sp, #16]
   1a85c:	add	r2, r2, r3
   1a860:	ldr	r1, [r2, #8]
   1a864:	cmp	fp, r1
   1a868:	bgt	1a87c <__assert_fail@plt+0x9548>
   1a86c:	ldr	r3, [sp, #12]
   1a870:	add	r3, r3, #1
   1a874:	str	r3, [sp, #12]
   1a878:	b	1a7cc <__assert_fail@plt+0x9498>
   1a87c:	ldr	r1, [r2, #4]
   1a880:	cmp	fp, r1
   1a884:	bgt	1a86c <__assert_fail@plt+0x9538>
   1a888:	ldr	r1, [sp, #16]
   1a88c:	ldr	r0, [r7]
   1a890:	ldr	r3, [r1, r3]
   1a894:	ldr	r9, [r0, r3, lsl #3]
   1a898:	ldr	r3, [r2, #12]
   1a89c:	cmp	fp, r3
   1a8a0:	movne	sl, #0
   1a8a4:	bne	1a9e8 <__assert_fail@plt+0x96b4>
   1a8a8:	mvn	sl, #0
   1a8ac:	ldr	lr, [r4, #4]
   1a8b0:	mov	r1, sl
   1a8b4:	mov	r2, #0
   1a8b8:	cmp	r2, lr
   1a8bc:	blt	1a958 <__assert_fail@plt+0x9624>
   1a8c0:	cmp	r1, #0
   1a8c4:	bge	1a99c <__assert_fail@plt+0x9668>
   1a8c8:	cmp	sl, #0
   1a8cc:	movge	r9, #0
   1a8d0:	blt	1a86c <__assert_fail@plt+0x9538>
   1a8d4:	ldr	r3, [r4, #4]
   1a8d8:	cmp	r9, r3
   1a8dc:	bge	1a86c <__assert_fail@plt+0x9538>
   1a8e0:	ldr	r3, [r4, #8]
   1a8e4:	ldr	r0, [r7, #28]
   1a8e8:	mov	r1, sl
   1a8ec:	ldr	r3, [r3, r9, lsl #2]
   1a8f0:	str	r3, [sp, #20]
   1a8f4:	ldr	r2, [sp, #20]
   1a8f8:	mov	r3, #12
   1a8fc:	mul	r3, r3, r2
   1a900:	add	r0, r0, r3
   1a904:	str	r3, [sp, #24]
   1a908:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1a90c:	cmp	r0, #0
   1a910:	bne	1a950 <__assert_fail@plt+0x961c>
   1a914:	ldr	r3, [sp, #24]
   1a918:	ldr	r0, [r7, #24]
   1a91c:	mov	r1, sl
   1a920:	add	r0, r0, r3
   1a924:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1a928:	cmp	r0, #0
   1a92c:	bne	1a950 <__assert_fail@plt+0x961c>
   1a930:	ldr	r3, [sp, #8]
   1a934:	mov	r2, r4
   1a938:	ldr	r1, [sp, #20]
   1a93c:	mov	r0, r7
   1a940:	bl	16d7c <__assert_fail@plt+0x5a48>
   1a944:	subs	r3, r0, #0
   1a948:	bne	1a9b4 <__assert_fail@plt+0x9680>
   1a94c:	sub	r9, r9, #1
   1a950:	add	r9, r9, #1
   1a954:	b	1a8d4 <__assert_fail@plt+0x95a0>
   1a958:	ldr	r3, [r4, #8]
   1a95c:	ldr	r3, [r3, r2, lsl #2]
   1a960:	add	ip, r0, r3, lsl #3
   1a964:	ldrb	ip, [ip, #4]
   1a968:	cmp	ip, #8
   1a96c:	bne	1a984 <__assert_fail@plt+0x9650>
   1a970:	ldr	ip, [r0, r3, lsl #3]
   1a974:	cmp	r9, ip
   1a978:	moveq	r1, r3
   1a97c:	add	r2, r2, #1
   1a980:	b	1a8b8 <__assert_fail@plt+0x9584>
   1a984:	cmp	ip, #9
   1a988:	bne	1a97c <__assert_fail@plt+0x9648>
   1a98c:	ldr	ip, [r0, r3, lsl #3]
   1a990:	cmp	r9, ip
   1a994:	moveq	sl, r3
   1a998:	b	1a97c <__assert_fail@plt+0x9648>
   1a99c:	ldr	r3, [sp, #8]
   1a9a0:	mov	r2, r4
   1a9a4:	mov	r0, r7
   1a9a8:	bl	16d7c <__assert_fail@plt+0x5a48>
   1a9ac:	subs	r3, r0, #0
   1a9b0:	beq	1a8c8 <__assert_fail@plt+0x9594>
   1a9b4:	cmp	r3, #0
   1a9b8:	str	r3, [sp, #56]	; 0x38
   1a9bc:	beq	1a72c <__assert_fail@plt+0x93f8>
   1a9c0:	b	1a750 <__assert_fail@plt+0x941c>
   1a9c4:	ldr	r3, [r4, #8]
   1a9c8:	ldr	r2, [r7]
   1a9cc:	ldr	r1, [r3, sl, lsl #2]
   1a9d0:	add	r3, r2, r1, lsl #3
   1a9d4:	ldrb	r3, [r3, #4]
   1a9d8:	sub	r3, r3, #8
   1a9dc:	cmp	r3, #1
   1a9e0:	bls	1a9f8 <__assert_fail@plt+0x96c4>
   1a9e4:	add	sl, sl, #1
   1a9e8:	ldr	r3, [r4, #4]
   1a9ec:	cmp	sl, r3
   1a9f0:	blt	1a9c4 <__assert_fail@plt+0x9690>
   1a9f4:	b	1a86c <__assert_fail@plt+0x9538>
   1a9f8:	ldr	r3, [r2, r1, lsl #3]
   1a9fc:	cmp	r9, r3
   1aa00:	bne	1a9e4 <__assert_fail@plt+0x96b0>
   1aa04:	ldr	r3, [sp, #8]
   1aa08:	mov	r2, r4
   1aa0c:	mov	r0, r7
   1aa10:	bl	16d7c <__assert_fail@plt+0x5a48>
   1aa14:	subs	r3, r0, #0
   1aa18:	beq	1a9e4 <__assert_fail@plt+0x96b0>
   1aa1c:	b	1a9b4 <__assert_fail@plt+0x9680>
   1aa20:	ldr	r3, [sp, #8]
   1aa24:	cmp	r3, #0
   1aa28:	beq	1abf8 <__assert_fail@plt+0x98c4>
   1aa2c:	ldr	r3, [r6, #100]	; 0x64
   1aa30:	ldr	r3, [r3, fp, lsl #2]
   1aa34:	ldrb	r3, [r3, #52]	; 0x34
   1aa38:	ands	r3, r3, #64	; 0x40
   1aa3c:	beq	1a750 <__assert_fail@plt+0x941c>
   1aa40:	mov	r1, fp
   1aa44:	mov	r0, r6
   1aa48:	bl	1420c <__assert_fail@plt+0x2ed8>
   1aa4c:	mov	sl, #0
   1aa50:	cmn	r0, #1
   1aa54:	mov	r3, r0
   1aa58:	str	r0, [sp, #16]
   1aa5c:	moveq	r3, sl
   1aa60:	beq	1a750 <__assert_fail@plt+0x941c>
   1aa64:	mov	r3, #24
   1aa68:	add	r9, sp, #88	; 0x58
   1aa6c:	mul	r3, r3, r0
   1aa70:	ldr	r8, [r6, #84]	; 0x54
   1aa74:	str	sl, [r9, #-28]!	; 0xffffffe4
   1aa78:	str	r3, [sp, #36]	; 0x24
   1aa7c:	add	r3, r9, #16
   1aa80:	str	r3, [sp, #28]
   1aa84:	ldr	r3, [sp, #8]
   1aa88:	ldr	r3, [r3, #4]
   1aa8c:	cmp	sl, r3
   1aa90:	movge	r3, #0
   1aa94:	bge	1abe0 <__assert_fail@plt+0x98ac>
   1aa98:	ldr	r3, [sp, #8]
   1aa9c:	ldr	r2, [r5, #8]
   1aaa0:	ldr	r3, [r3, #8]
   1aaa4:	ldr	r7, [r3, sl, lsl #2]
   1aaa8:	ldr	r3, [r8]
   1aaac:	cmp	r7, r2
   1aab0:	add	r3, r3, r7, lsl #3
   1aab4:	ldrb	r3, [r3, #4]
   1aab8:	bne	1aad0 <__assert_fail@plt+0x979c>
   1aabc:	ldr	r2, [r5, #12]
   1aac0:	cmp	fp, r2
   1aac4:	bne	1aad0 <__assert_fail@plt+0x979c>
   1aac8:	add	sl, sl, #1
   1aacc:	b	1aa84 <__assert_fail@plt+0x9750>
   1aad0:	cmp	r3, #4
   1aad4:	bne	1aac8 <__assert_fail@plt+0x9794>
   1aad8:	ldr	r3, [sp, #36]	; 0x24
   1aadc:	ldr	r4, [r6, #116]	; 0x74
   1aae0:	add	r4, r4, r3
   1aae4:	mov	r3, #12
   1aae8:	mul	r3, r3, r7
   1aaec:	str	r3, [sp, #44]	; 0x2c
   1aaf0:	lsl	r3, r7, #2
   1aaf4:	str	r3, [sp, #40]	; 0x28
   1aaf8:	ldr	r3, [sp, #36]	; 0x24
   1aafc:	str	r3, [sp, #20]
   1ab00:	ldr	r3, [sp, #16]
   1ab04:	str	r3, [sp, #12]
   1ab08:	add	r3, r5, #16
   1ab0c:	str	r3, [sp, #24]
   1ab10:	ldr	r3, [r4]
   1ab14:	cmp	r7, r3
   1ab18:	bne	1ac90 <__assert_fail@plt+0x995c>
   1ab1c:	ldr	r2, [r4, #8]
   1ab20:	ldr	r3, [r4, #12]
   1ab24:	sub	r3, r3, r2
   1ab28:	cmp	r3, #0
   1ab2c:	add	r2, fp, r3
   1ab30:	ldreq	r1, [sp, #44]	; 0x2c
   1ab34:	ldreq	r3, [r8, #20]
   1ab38:	ldrne	r1, [sp, #40]	; 0x28
   1ab3c:	addeq	r3, r3, r1
   1ab40:	ldrne	r3, [r8, #12]
   1ab44:	ldreq	r3, [r3, #8]
   1ab48:	ldrne	r3, [r3, r1]
   1ab4c:	ldr	r1, [r5, #12]
   1ab50:	ldreq	r3, [r3]
   1ab54:	cmp	r2, r1
   1ab58:	bgt	1ac90 <__assert_fail@plt+0x995c>
   1ab5c:	ldr	r1, [r5]
   1ab60:	str	r2, [sp, #52]	; 0x34
   1ab64:	ldr	r0, [r1, r2, lsl #2]
   1ab68:	cmp	r0, #0
   1ab6c:	beq	1ac90 <__assert_fail@plt+0x995c>
   1ab70:	mov	r1, r3
   1ab74:	add	r0, r0, #4
   1ab78:	str	r3, [sp, #48]	; 0x30
   1ab7c:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1ab80:	ldr	r3, [sp, #48]	; 0x30
   1ab84:	ldr	r2, [sp, #52]	; 0x34
   1ab88:	cmp	r0, #0
   1ab8c:	beq	1ac90 <__assert_fail@plt+0x995c>
   1ab90:	str	r2, [sp, #4]
   1ab94:	str	r3, [sp]
   1ab98:	mov	r2, r7
   1ab9c:	mov	r3, fp
   1aba0:	ldr	r1, [sp, #24]
   1aba4:	mov	r0, r6
   1aba8:	bl	1427c <__assert_fail@plt+0x2f48>
   1abac:	cmp	r0, #0
   1abb0:	bne	1ac90 <__assert_fail@plt+0x995c>
   1abb4:	ldr	r3, [sp, #60]	; 0x3c
   1abb8:	cmp	r3, #0
   1abbc:	beq	1ac00 <__assert_fail@plt+0x98cc>
   1abc0:	ldr	r1, [sp, #12]
   1abc4:	ldr	r0, [sp, #28]
   1abc8:	str	r7, [sp, #68]	; 0x44
   1abcc:	str	fp, [sp, #72]	; 0x48
   1abd0:	bl	17270 <__assert_fail@plt+0x5f3c>
   1abd4:	cmp	r0, #0
   1abd8:	bne	1ac34 <__assert_fail@plt+0x9900>
   1abdc:	mov	r3, #12
   1abe0:	ldr	r2, [sp, #60]	; 0x3c
   1abe4:	cmp	r2, #0
   1abe8:	beq	1a750 <__assert_fail@plt+0x941c>
   1abec:	ldr	r0, [sp, #84]	; 0x54
   1abf0:	str	r3, [sp, #8]
   1abf4:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1abf8:	ldr	r3, [sp, #8]
   1abfc:	b	1a750 <__assert_fail@plt+0x941c>
   1ac00:	mov	lr, r5
   1ac04:	add	ip, sp, #60	; 0x3c
   1ac08:	ldm	lr!, {r0, r1, r2, r3}
   1ac0c:	stmia	ip!, {r0, r1, r2, r3}
   1ac10:	ldr	r3, [sp, #24]
   1ac14:	ldm	r3, {r0, r1, r2}
   1ac18:	stm	ip, {r0, r1, r2}
   1ac1c:	mov	r1, r3
   1ac20:	mov	r0, ip
   1ac24:	bl	16894 <__assert_fail@plt+0x5560>
   1ac28:	subs	r3, r0, #0
   1ac2c:	beq	1abc0 <__assert_fail@plt+0x988c>
   1ac30:	b	1abe0 <__assert_fail@plt+0x98ac>
   1ac34:	ldr	r3, [sp, #60]	; 0x3c
   1ac38:	ldr	r2, [sp, #32]
   1ac3c:	mov	r1, r9
   1ac40:	mov	r0, r6
   1ac44:	ldr	r4, [r3, r2]
   1ac48:	bl	1acdc <__assert_fail@plt+0x99a8>
   1ac4c:	subs	r3, r0, #0
   1ac50:	bne	1abe0 <__assert_fail@plt+0x98ac>
   1ac54:	ldr	r1, [r5, #4]
   1ac58:	cmp	r1, #0
   1ac5c:	bne	1acc0 <__assert_fail@plt+0x998c>
   1ac60:	ldr	r3, [sp, #60]	; 0x3c
   1ac64:	ldr	r2, [sp, #32]
   1ac68:	ldr	r1, [sp, #12]
   1ac6c:	ldr	r0, [sp, #28]
   1ac70:	str	r4, [r3, r2]
   1ac74:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1ac78:	sub	r1, r0, #1
   1ac7c:	ldr	r0, [sp, #28]
   1ac80:	bl	165d4 <__assert_fail@plt+0x52a0>
   1ac84:	ldr	r4, [r6, #116]	; 0x74
   1ac88:	ldr	r3, [sp, #20]
   1ac8c:	add	r4, r4, r3
   1ac90:	ldr	r3, [sp, #12]
   1ac94:	add	r2, r4, #24
   1ac98:	add	r3, r3, #1
   1ac9c:	str	r3, [sp, #12]
   1aca0:	ldr	r3, [sp, #20]
   1aca4:	add	r3, r3, #24
   1aca8:	str	r3, [sp, #20]
   1acac:	ldrb	r3, [r4, #20]
   1acb0:	cmp	r3, #0
   1acb4:	beq	1aac8 <__assert_fail@plt+0x9794>
   1acb8:	mov	r4, r2
   1acbc:	b	1ab10 <__assert_fail@plt+0x97dc>
   1acc0:	add	r3, fp, #1
   1acc4:	ldr	r2, [sp, #60]	; 0x3c
   1acc8:	mov	r0, r8
   1accc:	bl	1966c <__assert_fail@plt+0x8338>
   1acd0:	subs	r3, r0, #0
   1acd4:	beq	1ac60 <__assert_fail@plt+0x992c>
   1acd8:	b	1abe0 <__assert_fail@plt+0x98ac>
   1acdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ace0:	sub	sp, sp, #52	; 0x34
   1ace4:	add	r7, sp, #36	; 0x24
   1ace8:	ldr	r4, [r1, #12]
   1acec:	mov	r6, r0
   1acf0:	mov	r5, r1
   1acf4:	mov	r0, r7
   1acf8:	ldr	r1, [r1, #8]
   1acfc:	bl	14818 <__assert_fail@plt+0x34e4>
   1ad00:	subs	fp, r0, #0
   1ad04:	bne	1ad38 <__assert_fail@plt+0x9a04>
   1ad08:	mov	r3, r7
   1ad0c:	mov	r2, r4
   1ad10:	mov	r1, r5
   1ad14:	mov	r0, r6
   1ad18:	bl	1a6cc <__assert_fail@plt+0x9398>
   1ad1c:	subs	fp, r0, #0
   1ad20:	lsleq	r8, r4, #2
   1ad24:	streq	fp, [sp, #8]
   1ad28:	streq	r7, [sp, #20]
   1ad2c:	beq	1aefc <__assert_fail@plt+0x9bc8>
   1ad30:	ldr	r0, [sp, #44]	; 0x2c
   1ad34:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1ad38:	mov	r0, fp
   1ad3c:	add	sp, sp, #52	; 0x34
   1ad40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ad44:	mov	r3, #0
   1ad48:	str	r3, [sp, #40]	; 0x28
   1ad4c:	ldr	r3, [r6, #100]	; 0x64
   1ad50:	sub	r4, r4, #1
   1ad54:	add	r3, r3, r8
   1ad58:	ldr	sl, [r3, #-4]
   1ad5c:	cmp	sl, #0
   1ad60:	bne	1ad8c <__assert_fail@plt+0x9a58>
   1ad64:	ldr	r3, [sp, #20]
   1ad68:	mov	r2, r4
   1ad6c:	mov	r1, r5
   1ad70:	mov	r0, r6
   1ad74:	bl	1a6cc <__assert_fail@plt+0x9398>
   1ad78:	sub	r8, r8, #4
   1ad7c:	cmp	r0, #0
   1ad80:	beq	1aefc <__assert_fail@plt+0x9bc8>
   1ad84:	mov	fp, r0
   1ad88:	b	1ad30 <__assert_fail@plt+0x99fc>
   1ad8c:	ldr	r9, [r6, #84]	; 0x54
   1ad90:	mov	r3, #0
   1ad94:	str	r3, [sp, #12]
   1ad98:	add	r3, r5, #16
   1ad9c:	str	r3, [sp, #28]
   1ada0:	ldr	r3, [sl, #20]
   1ada4:	ldr	r2, [sp, #12]
   1ada8:	cmp	r2, r3
   1adac:	bge	1ad64 <__assert_fail@plt+0x9a30>
   1adb0:	ldr	r3, [sl, #24]
   1adb4:	ldr	r2, [sp, #12]
   1adb8:	ldr	r7, [r3, r2, lsl #2]
   1adbc:	lsl	r3, r7, #3
   1adc0:	str	r3, [sp, #16]
   1adc4:	ldr	r3, [r9]
   1adc8:	lsl	r2, r7, #3
   1adcc:	add	r3, r3, r2
   1add0:	ldrb	r3, [r3, #6]
   1add4:	tst	r3, #16
   1add8:	bne	1ae0c <__assert_fail@plt+0x9ad8>
   1addc:	ldr	r1, [r9]
   1ade0:	lsl	r3, r7, #3
   1ade4:	mov	r2, r4
   1ade8:	add	r1, r1, r3
   1adec:	mov	r0, r6
   1adf0:	bl	180e4 <__assert_fail@plt+0x6db0>
   1adf4:	cmp	r0, #0
   1adf8:	bne	1aecc <__assert_fail@plt+0x9b98>
   1adfc:	ldr	r3, [sp, #12]
   1ae00:	add	r3, r3, #1
   1ae04:	str	r3, [sp, #12]
   1ae08:	b	1ada0 <__assert_fail@plt+0x9a6c>
   1ae0c:	ldr	r3, [r5, #12]
   1ae10:	mov	r2, r6
   1ae14:	str	r3, [sp, #24]
   1ae18:	ldr	r3, [r6, #84]	; 0x54
   1ae1c:	mov	r1, r7
   1ae20:	str	r3, [sp, #16]
   1ae24:	ldr	r0, [sp, #16]
   1ae28:	mov	r3, r4
   1ae2c:	bl	16318 <__assert_fail@plt+0x4fe4>
   1ae30:	subs	r3, r0, #0
   1ae34:	ble	1ae78 <__assert_fail@plt+0x9b44>
   1ae38:	ldr	r1, [sp, #24]
   1ae3c:	add	r2, r4, r3
   1ae40:	cmp	r1, r2
   1ae44:	blt	1ae7c <__assert_fail@plt+0x9b48>
   1ae48:	ldr	r1, [r5]
   1ae4c:	str	r3, [sp, #24]
   1ae50:	ldr	r0, [r1, r2, lsl #2]
   1ae54:	cmp	r0, #0
   1ae58:	beq	1addc <__assert_fail@plt+0x9aa8>
   1ae5c:	ldr	r3, [sp, #16]
   1ae60:	add	r0, r0, #4
   1ae64:	ldr	r2, [r3, #12]
   1ae68:	ldr	r1, [r2, r7, lsl #2]
   1ae6c:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1ae70:	ldr	r3, [sp, #24]
   1ae74:	cmp	r0, #0
   1ae78:	beq	1addc <__assert_fail@plt+0x9aa8>
   1ae7c:	ldr	r2, [r5, #20]
   1ae80:	cmp	r2, #0
   1ae84:	beq	1aeb0 <__assert_fail@plt+0x9b7c>
   1ae88:	ldr	r2, [r9, #12]
   1ae8c:	add	r3, r4, r3
   1ae90:	str	r4, [sp, #4]
   1ae94:	str	r7, [sp]
   1ae98:	ldr	r1, [sp, #28]
   1ae9c:	ldr	r2, [r2, r7, lsl #2]
   1aea0:	mov	r0, r6
   1aea4:	bl	1427c <__assert_fail@plt+0x2f48>
   1aea8:	cmp	r0, #0
   1aeac:	bne	1adfc <__assert_fail@plt+0x9ac8>
   1aeb0:	mov	r1, r7
   1aeb4:	ldr	r0, [sp, #20]
   1aeb8:	bl	17270 <__assert_fail@plt+0x5f3c>
   1aebc:	cmp	r0, #0
   1aec0:	bne	1adfc <__assert_fail@plt+0x9ac8>
   1aec4:	mov	fp, #12
   1aec8:	b	1ad30 <__assert_fail@plt+0x99fc>
   1aecc:	ldr	r3, [r5]
   1aed0:	ldr	r0, [r3, r8]
   1aed4:	cmp	r0, #0
   1aed8:	beq	1adfc <__assert_fail@plt+0x9ac8>
   1aedc:	ldr	r3, [r9, #12]
   1aee0:	add	r0, r0, #4
   1aee4:	ldr	r1, [r3, r7, lsl #2]
   1aee8:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1aeec:	cmp	r0, #0
   1aef0:	beq	1adfc <__assert_fail@plt+0x9ac8>
   1aef4:	mov	r3, #1
   1aef8:	b	1ae7c <__assert_fail@plt+0x9b48>
   1aefc:	cmp	r4, #0
   1af00:	ble	1ad30 <__assert_fail@plt+0x99fc>
   1af04:	ldr	r0, [r5]
   1af08:	ldr	r3, [r0, r8]
   1af0c:	cmp	r3, #0
   1af10:	movne	r3, #0
   1af14:	ldreq	r3, [sp, #8]
   1af18:	addeq	r3, r3, #1
   1af1c:	str	r3, [sp, #8]
   1af20:	ldr	r2, [sp, #8]
   1af24:	ldr	r3, [r6, #120]	; 0x78
   1af28:	cmp	r2, r3
   1af2c:	ble	1ad44 <__assert_fail@plt+0x9a10>
   1af30:	mov	r2, r8
   1af34:	mov	r1, #0
   1af38:	bl	11238 <memset@plt>
   1af3c:	b	1ad30 <__assert_fail@plt+0x99fc>
   1af40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af44:	sub	sp, sp, #420	; 0x1a4
   1af48:	mov	sl, r0
   1af4c:	ldr	fp, [r0]
   1af50:	str	r1, [sp, #32]
   1af54:	str	r2, [sp, #36]	; 0x24
   1af58:	mov	r1, #0
   1af5c:	mov	r2, #136	; 0x88
   1af60:	add	r0, sp, #140	; 0x8c
   1af64:	mov	r5, r3
   1af68:	ldr	r8, [sp, #456]	; 0x1c8
   1af6c:	ldr	r7, [sp, #460]	; 0x1cc
   1af70:	ldr	r6, [sp, #464]	; 0x1d0
   1af74:	ldr	r4, [sp, #468]	; 0x1d4
   1af78:	bl	11238 <memset@plt>
   1af7c:	ldr	r2, [sl, #16]
   1af80:	str	fp, [sp, #224]	; 0xe0
   1af84:	cmp	r2, #0
   1af88:	streq	r2, [sp, #20]
   1af8c:	beq	1afb4 <__assert_fail@plt+0x9c80>
   1af90:	ldrb	r1, [sl, #28]
   1af94:	subs	r3, r5, r8
   1af98:	movne	r3, #1
   1af9c:	ands	r3, r3, r1, lsr #3
   1afa0:	beq	1afb0 <__assert_fail@plt+0x9c7c>
   1afa4:	tst	r1, #1
   1afa8:	moveq	r3, r2
   1afac:	movne	r3, #0
   1afb0:	str	r3, [sp, #20]
   1afb4:	ldr	r3, [sl, #24]
   1afb8:	cmp	r3, r6
   1afbc:	subcc	r2, r6, #1
   1afc0:	subcc	r3, r2, r3
   1afc4:	movcs	r3, #0
   1afc8:	str	r3, [sp, #68]	; 0x44
   1afcc:	ldr	r3, [sl, #8]
   1afd0:	cmp	r3, #0
   1afd4:	beq	1afe4 <__assert_fail@plt+0x9cb0>
   1afd8:	ldr	r2, [fp, #36]	; 0x24
   1afdc:	cmp	r2, #0
   1afe0:	bne	1c118 <__assert_fail@plt+0xade4>
   1afe4:	mov	r3, #1
   1afe8:	str	r3, [sp, #12]
   1afec:	b	1bba4 <__assert_fail@plt+0xa870>
   1aff0:	ldr	r3, [pc, #4028]	; 1bfb4 <__assert_fail@plt+0xac80>
   1aff4:	cmp	r7, r3
   1aff8:	bgt	1b028 <__assert_fail@plt+0x9cf4>
   1affc:	mov	r0, #24
   1b000:	mul	r0, r0, r7
   1b004:	bl	1fd58 <__assert_fail@plt+0xea24>
   1b008:	str	r0, [sp, #256]	; 0x100
   1b00c:	lsl	r0, r9, #3
   1b010:	bl	1fd58 <__assert_fail@plt+0xea24>
   1b014:	ldr	r3, [sp, #256]	; 0x100
   1b018:	cmp	r0, #0
   1b01c:	cmpne	r3, #0
   1b020:	str	r0, [sp, #272]	; 0x110
   1b024:	bne	1c2d8 <__assert_fail@plt+0xafa4>
   1b028:	mov	r3, #12
   1b02c:	b	1b0f0 <__assert_fail@plt+0x9dbc>
   1b030:	ldr	r0, [sp, #176]	; 0xb0
   1b034:	cmn	r0, #-1073741822	; 0xc0000002
   1b038:	bhi	1b028 <__assert_fail@plt+0x9cf4>
   1b03c:	add	r0, r0, #1
   1b040:	lsl	r0, r0, #2
   1b044:	bl	1fd58 <__assert_fail@plt+0xea24>
   1b048:	cmp	r0, #0
   1b04c:	str	r0, [sp, #240]	; 0xf0
   1b050:	bne	1c300 <__assert_fail@plt+0xafcc>
   1b054:	b	1b028 <__assert_fail@plt+0x9cf4>
   1b058:	ldr	r3, [sp, #92]	; 0x5c
   1b05c:	cmp	r3, #1
   1b060:	moveq	r3, #4
   1b064:	beq	1b088 <__assert_fail@plt+0x9d54>
   1b068:	ldr	r3, [sl, #12]
   1b06c:	ldr	r2, [sp, #24]
   1b070:	lsr	r3, r3, #22
   1b074:	eor	r3, r3, #1
   1b078:	cmp	r2, #0
   1b07c:	movne	r3, #0
   1b080:	andeq	r3, r3, #1
   1b084:	lsl	r3, r3, #2
   1b088:	cmp	r5, r8
   1b08c:	movle	r2, #2
   1b090:	movgt	r2, #0
   1b094:	orr	r6, r6, r3
   1b098:	orr	r3, r6, r2
   1b09c:	cmp	r5, r8
   1b0a0:	str	r3, [sp, #84]	; 0x54
   1b0a4:	add	r3, sp, #416	; 0x1a0
   1b0a8:	suble	r3, r3, #308	; 0x134
   1b0ac:	movgt	r3, #0
   1b0b0:	str	r3, [sp, #88]	; 0x58
   1b0b4:	adds	r3, r3, #0
   1b0b8:	movne	r3, #1
   1b0bc:	str	r3, [sp, #96]	; 0x60
   1b0c0:	ldr	r3, [sp, #108]	; 0x6c
   1b0c4:	ldr	r2, [sp, #40]	; 0x28
   1b0c8:	cmp	r2, r3
   1b0cc:	ldr	r2, [sp, #60]	; 0x3c
   1b0d0:	movge	r5, #0
   1b0d4:	movlt	r5, #1
   1b0d8:	cmp	r2, r3
   1b0dc:	orrgt	r5, r5, #1
   1b0e0:	cmp	r5, #0
   1b0e4:	str	r5, [sp, #28]
   1b0e8:	beq	1b0f8 <__assert_fail@plt+0x9dc4>
   1b0ec:	mov	r3, #1
   1b0f0:	str	r3, [sp, #12]
   1b0f4:	b	1bb70 <__assert_fail@plt+0xa83c>
   1b0f8:	ldr	r2, [sp, #84]	; 0x54
   1b0fc:	sub	r2, r2, #4
   1b100:	cmp	r2, #4
   1b104:	ldrls	pc, [pc, r2, lsl #2]
   1b108:	b	1b4c0 <__assert_fail@plt+0xa18c>
   1b10c:	ldrdeq	fp, [r1], -r4
   1b110:	ldrdeq	fp, [r1], -r4
   1b114:	muleq	r1, r4, r1
   1b118:	andeq	fp, r1, r0, lsr #2
   1b11c:	andeq	fp, r1, ip, lsr #4
   1b120:	ldr	r2, [sp, #32]
   1b124:	ldr	r1, [sp, #28]
   1b128:	add	r3, r2, r3
   1b12c:	mov	ip, #1
   1b130:	ldr	r2, [sp, #32]
   1b134:	ldr	r0, [sp, #40]	; 0x28
   1b138:	sub	r2, r3, r2
   1b13c:	cmp	r0, r2
   1b140:	bgt	1b204 <__assert_fail@plt+0x9ed0>
   1b144:	cmp	r1, #0
   1b148:	strne	r2, [sp, #108]	; 0x6c
   1b14c:	ldr	r3, [sp, #108]	; 0x6c
   1b150:	ldr	r2, [sp, #40]	; 0x28
   1b154:	cmp	r2, r3
   1b158:	bne	1b22c <__assert_fail@plt+0x9ef8>
   1b15c:	ldr	r3, [sp, #36]	; 0x24
   1b160:	ldr	r2, [sp, #40]	; 0x28
   1b164:	cmp	r3, r2
   1b168:	movle	r3, #0
   1b16c:	ldrgt	r3, [sp, #32]
   1b170:	ldrbgt	r3, [r3, r2]
   1b174:	ldr	r2, [sp, #24]
   1b178:	cmp	r2, #0
   1b17c:	ldrbne	r3, [r2, r3]
   1b180:	ldr	r2, [sp, #20]
   1b184:	ldrb	r3, [r2, r3]
   1b188:	cmp	r3, #0
   1b18c:	bne	1b22c <__assert_fail@plt+0x9ef8>
   1b190:	b	1b0ec <__assert_fail@plt+0x9db8>
   1b194:	ldr	r2, [sp, #32]
   1b198:	ldr	r1, [sp, #28]
   1b19c:	add	r3, r2, r3
   1b1a0:	mov	ip, #1
   1b1a4:	ldr	r2, [sp, #32]
   1b1a8:	ldr	r0, [sp, #40]	; 0x28
   1b1ac:	sub	r2, r3, r2
   1b1b0:	cmp	r0, r2
   1b1b4:	ble	1b144 <__assert_fail@plt+0x9e10>
   1b1b8:	ldrb	r0, [r3], #1
   1b1bc:	ldr	lr, [sp, #20]
   1b1c0:	ldrb	r0, [lr, r0]
   1b1c4:	cmp	r0, #0
   1b1c8:	bne	1b220 <__assert_fail@plt+0x9eec>
   1b1cc:	mov	r1, ip
   1b1d0:	b	1b1a4 <__assert_fail@plt+0x9e70>
   1b1d4:	ldr	r1, [sp, #28]
   1b1d8:	mov	ip, #0
   1b1dc:	mov	lr, #1
   1b1e0:	ldr	r2, [sp, #60]	; 0x3c
   1b1e4:	mov	r0, r3
   1b1e8:	cmp	r3, r2
   1b1ec:	bge	1b478 <__assert_fail@plt+0xa144>
   1b1f0:	cmp	r1, #0
   1b1f4:	strne	r3, [sp, #108]	; 0x6c
   1b1f8:	b	1b0ec <__assert_fail@plt+0x9db8>
   1b1fc:	mov	r1, ip
   1b200:	b	1b130 <__assert_fail@plt+0x9dfc>
   1b204:	ldrb	r0, [r3], #1
   1b208:	ldr	lr, [sp, #24]
   1b20c:	ldrb	r0, [lr, r0]
   1b210:	ldr	lr, [sp, #20]
   1b214:	ldrb	r0, [lr, r0]
   1b218:	cmp	r0, #0
   1b21c:	beq	1b1fc <__assert_fail@plt+0x9ec8>
   1b220:	cmp	r1, #0
   1b224:	strne	r2, [sp, #108]	; 0x6c
   1b228:	beq	1b14c <__assert_fail@plt+0x9e18>
   1b22c:	ldr	r2, [sp, #472]	; 0x1d8
   1b230:	ldr	r1, [sp, #108]	; 0x6c
   1b234:	add	r0, sp, #140	; 0x8c
   1b238:	bl	17aa4 <__assert_fail@plt+0x6770>
   1b23c:	subs	r3, r0, #0
   1b240:	str	r3, [sp, #12]
   1b244:	bne	1bb70 <__assert_fail@plt+0xa83c>
   1b248:	ldr	r3, [sp, #92]	; 0x5c
   1b24c:	cmp	r3, #1
   1b250:	beq	1b270 <__assert_fail@plt+0x9f3c>
   1b254:	ldr	r3, [sp, #168]	; 0xa8
   1b258:	cmp	r3, #0
   1b25c:	beq	1b270 <__assert_fail@plt+0x9f3c>
   1b260:	ldr	r3, [sp, #148]	; 0x94
   1b264:	ldr	r3, [r3]
   1b268:	cmn	r3, #1
   1b26c:	beq	1b5d0 <__assert_fail@plt+0xa29c>
   1b270:	ldr	r7, [sp, #224]	; 0xe0
   1b274:	mov	r3, #0
   1b278:	str	r3, [sp, #260]	; 0x104
   1b27c:	ldr	r6, [r7, #36]	; 0x24
   1b280:	str	r3, [sp, #248]	; 0xf8
   1b284:	str	r3, [sp, #244]	; 0xf4
   1b288:	str	r3, [sp, #116]	; 0x74
   1b28c:	ldrsb	r3, [r6, #52]	; 0x34
   1b290:	ldr	r5, [sp, #180]	; 0xb4
   1b294:	cmp	r3, #0
   1b298:	bge	1b300 <__assert_fail@plt+0x9fcc>
   1b29c:	ldr	r2, [sp, #228]	; 0xe4
   1b2a0:	sub	r1, r5, #1
   1b2a4:	add	r0, sp, #140	; 0x8c
   1b2a8:	bl	179c4 <__assert_fail@plt+0x6690>
   1b2ac:	tst	r0, #1
   1b2b0:	mov	r3, r0
   1b2b4:	ldrne	r6, [r7, #40]	; 0x28
   1b2b8:	bne	1b300 <__assert_fail@plt+0x9fcc>
   1b2bc:	cmp	r0, #0
   1b2c0:	beq	1b300 <__assert_fail@plt+0x9fcc>
   1b2c4:	and	r2, r0, #6
   1b2c8:	cmp	r2, #6
   1b2cc:	ldreq	r6, [r7, #48]	; 0x30
   1b2d0:	beq	1b300 <__assert_fail@plt+0x9fcc>
   1b2d4:	tst	r0, #2
   1b2d8:	ldrne	r6, [r7, #44]	; 0x2c
   1b2dc:	bne	1b300 <__assert_fail@plt+0x9fcc>
   1b2e0:	tst	r0, #4
   1b2e4:	beq	1b300 <__assert_fail@plt+0x9fcc>
   1b2e8:	ldr	r2, [r6, #40]	; 0x28
   1b2ec:	mov	r1, r7
   1b2f0:	add	r0, sp, #116	; 0x74
   1b2f4:	bl	16a44 <__assert_fail@plt+0x5710>
   1b2f8:	subs	r6, r0, #0
   1b2fc:	beq	1b028 <__assert_fail@plt+0x9cf4>
   1b300:	ldr	r3, [sp, #240]	; 0xf0
   1b304:	cmp	r3, #0
   1b308:	beq	1b57c <__assert_fail@plt+0xa248>
   1b30c:	str	r6, [r3, r5, lsl #2]
   1b310:	ldr	r3, [r7, #76]	; 0x4c
   1b314:	cmp	r3, #0
   1b318:	beq	1b57c <__assert_fail@plt+0xa248>
   1b31c:	add	r7, r6, #4
   1b320:	mov	r2, #0
   1b324:	mov	r1, r7
   1b328:	add	r0, sp, #140	; 0x8c
   1b32c:	bl	157b8 <__assert_fail@plt+0x4484>
   1b330:	cmp	r0, #0
   1b334:	str	r0, [sp, #116]	; 0x74
   1b338:	bne	1b574 <__assert_fail@plt+0xa240>
   1b33c:	ldrb	r3, [r6, #52]	; 0x34
   1b340:	tst	r3, #64	; 0x40
   1b344:	bne	1b55c <__assert_fail@plt+0xa228>
   1b348:	ldr	r3, [sp, #28]
   1b34c:	ldrb	r0, [r6, #52]	; 0x34
   1b350:	str	r3, [sp, #44]	; 0x2c
   1b354:	lsr	r0, r0, #4
   1b358:	ands	r0, r0, #1
   1b35c:	bne	1b584 <__assert_fail@plt+0xa250>
   1b360:	mvn	r3, #0
   1b364:	str	r0, [sp, #52]	; 0x34
   1b368:	str	r5, [sp, #72]	; 0x48
   1b36c:	mov	r5, r3
   1b370:	ldr	r3, [sp, #88]	; 0x58
   1b374:	str	r3, [sp, #48]	; 0x30
   1b378:	ldr	r1, [sp, #180]	; 0xb4
   1b37c:	ldr	r3, [sp, #196]	; 0xc4
   1b380:	cmp	r1, r3
   1b384:	bge	1b450 <__assert_fail@plt+0xa11c>
   1b388:	add	r3, r1, #1
   1b38c:	str	r3, [sp, #64]	; 0x40
   1b390:	ldr	r3, [sp, #176]	; 0xb0
   1b394:	add	r2, r1, #1
   1b398:	cmp	r2, r3
   1b39c:	blt	1b3ac <__assert_fail@plt+0xa078>
   1b3a0:	ldr	r2, [sp, #188]	; 0xbc
   1b3a4:	cmp	r3, r2
   1b3a8:	blt	1b3c8 <__assert_fail@plt+0xa094>
   1b3ac:	ldr	r3, [sp, #168]	; 0xa8
   1b3b0:	add	r2, r1, #1
   1b3b4:	cmp	r2, r3
   1b3b8:	blt	1b3e0 <__assert_fail@plt+0xa0ac>
   1b3bc:	ldr	r2, [sp, #188]	; 0xbc
   1b3c0:	cmp	r3, r2
   1b3c4:	bge	1b3e0 <__assert_fail@plt+0xa0ac>
   1b3c8:	add	r1, r1, #2
   1b3cc:	add	r0, sp, #140	; 0x8c
   1b3d0:	bl	14ff8 <__assert_fail@plt+0x3cc4>
   1b3d4:	cmp	r0, #0
   1b3d8:	str	r0, [sp, #116]	; 0x74
   1b3dc:	bne	1b028 <__assert_fail@plt+0x9cf4>
   1b3e0:	ldrb	r3, [r6, #52]	; 0x34
   1b3e4:	tst	r3, #32
   1b3e8:	bne	1b5e4 <__assert_fail@plt+0xa2b0>
   1b3ec:	ldr	r3, [sp, #180]	; 0xb4
   1b3f0:	add	r2, r3, #1
   1b3f4:	str	r2, [sp, #180]	; 0xb4
   1b3f8:	ldr	r2, [sp, #144]	; 0x90
   1b3fc:	ldrb	r8, [r2, r3]
   1b400:	ldr	r3, [r6, #44]	; 0x2c
   1b404:	cmp	r3, #0
   1b408:	beq	1b7a8 <__assert_fail@plt+0xa474>
   1b40c:	ldr	r7, [r3, r8, lsl #2]
   1b410:	ldr	r3, [sp, #240]	; 0xf0
   1b414:	cmp	r3, #0
   1b418:	beq	1b430 <__assert_fail@plt+0xa0fc>
   1b41c:	mov	r2, r7
   1b420:	add	r1, sp, #140	; 0x8c
   1b424:	add	r0, sp, #116	; 0x74
   1b428:	bl	1a598 <__assert_fail@plt+0x9264>
   1b42c:	mov	r7, r0
   1b430:	cmp	r7, #0
   1b434:	bne	1b878 <__assert_fail@plt+0xa544>
   1b438:	ldr	r3, [sp, #116]	; 0x74
   1b43c:	cmp	r3, #0
   1b440:	bne	1b028 <__assert_fail@plt+0x9cf4>
   1b444:	ldr	r3, [sp, #240]	; 0xf0
   1b448:	cmp	r3, #0
   1b44c:	bne	1b7f8 <__assert_fail@plt+0xa4c4>
   1b450:	ldr	r3, [sp, #48]	; 0x30
   1b454:	cmp	r3, #0
   1b458:	beq	1b5c0 <__assert_fail@plt+0xa28c>
   1b45c:	ldr	r3, [sp, #48]	; 0x30
   1b460:	ldr	r2, [sp, #72]	; 0x48
   1b464:	ldr	r3, [r3]
   1b468:	add	r3, r3, r2
   1b46c:	ldr	r2, [sp, #48]	; 0x30
   1b470:	str	r3, [r2]
   1b474:	b	1b5c0 <__assert_fail@plt+0xa28c>
   1b478:	ldr	r2, [sp, #36]	; 0x24
   1b47c:	ldr	r5, [sp, #24]
   1b480:	cmp	r2, r3
   1b484:	movle	r2, ip
   1b488:	ldrgt	r2, [sp, #32]
   1b48c:	ldrbgt	r2, [r2, r3]
   1b490:	cmp	r5, #0
   1b494:	sub	r3, r3, #1
   1b498:	ldrbne	r2, [r5, r2]
   1b49c:	ldr	r5, [sp, #20]
   1b4a0:	ldrb	r2, [r5, r2]
   1b4a4:	cmp	r2, #0
   1b4a8:	beq	1b4b8 <__assert_fail@plt+0xa184>
   1b4ac:	cmp	r1, #0
   1b4b0:	strne	r0, [sp, #108]	; 0x6c
   1b4b4:	b	1b22c <__assert_fail@plt+0x9ef8>
   1b4b8:	mov	r1, lr
   1b4bc:	b	1b1e0 <__assert_fail@plt+0x9eac>
   1b4c0:	mov	r6, #0
   1b4c4:	ldr	r5, [sp, #108]	; 0x6c
   1b4c8:	ldr	r3, [sp, #164]	; 0xa4
   1b4cc:	ldr	r2, [sp, #172]	; 0xac
   1b4d0:	sub	r3, r5, r3
   1b4d4:	cmp	r3, r2
   1b4d8:	bcc	1b500 <__assert_fail@plt+0xa1cc>
   1b4dc:	ldr	r2, [sp, #472]	; 0x1d8
   1b4e0:	mov	r1, r5
   1b4e4:	add	r0, sp, #140	; 0x8c
   1b4e8:	bl	17aa4 <__assert_fail@plt+0x6770>
   1b4ec:	subs	r3, r0, #0
   1b4f0:	str	r3, [sp, #12]
   1b4f4:	bne	1bb70 <__assert_fail@plt+0xa83c>
   1b4f8:	ldr	r3, [sp, #164]	; 0xa4
   1b4fc:	sub	r3, r5, r3
   1b500:	ldr	r2, [sp, #168]	; 0xa8
   1b504:	cmp	r3, r2
   1b508:	movcs	r3, r6
   1b50c:	ldrcc	r2, [sp, #144]	; 0x90
   1b510:	ldrbcc	r3, [r2, r3]
   1b514:	ldr	r2, [sp, #20]
   1b518:	ldrb	r3, [r2, r3]
   1b51c:	cmp	r3, #0
   1b520:	bne	1b22c <__assert_fail@plt+0x9ef8>
   1b524:	ldr	r3, [sp, #80]	; 0x50
   1b528:	ldr	r2, [sp, #60]	; 0x3c
   1b52c:	add	r5, r3, r5
   1b530:	ldr	r3, [sp, #40]	; 0x28
   1b534:	str	r5, [sp, #108]	; 0x6c
   1b538:	cmp	r3, r5
   1b53c:	movge	r3, #0
   1b540:	movlt	r3, #1
   1b544:	cmp	r2, r5
   1b548:	movle	r5, r3
   1b54c:	orrgt	r5, r3, #1
   1b550:	cmp	r5, #0
   1b554:	beq	1b4c4 <__assert_fail@plt+0xa190>
   1b558:	b	1b0ec <__assert_fail@plt+0x9db8>
   1b55c:	mov	r1, r7
   1b560:	add	r0, sp, #140	; 0x8c
   1b564:	bl	19f64 <__assert_fail@plt+0x8c30>
   1b568:	cmp	r0, #0
   1b56c:	str	r0, [sp, #116]	; 0x74
   1b570:	beq	1b348 <__assert_fail@plt+0xa014>
   1b574:	mov	r5, r0
   1b578:	b	1b5c0 <__assert_fail@plt+0xa28c>
   1b57c:	ldr	r3, [sp, #96]	; 0x60
   1b580:	b	1b34c <__assert_fail@plt+0xa018>
   1b584:	ldrsb	r3, [r6, #52]	; 0x34
   1b588:	cmp	r3, #0
   1b58c:	bge	1b5a8 <__assert_fail@plt+0xa274>
   1b590:	mov	r2, r5
   1b594:	mov	r1, r6
   1b598:	add	r0, sp, #140	; 0x8c
   1b59c:	bl	18210 <__assert_fail@plt+0x6edc>
   1b5a0:	cmp	r0, #0
   1b5a4:	beq	1b360 <__assert_fail@plt+0xa02c>
   1b5a8:	ldr	r3, [sp, #56]	; 0x38
   1b5ac:	cmp	r3, #0
   1b5b0:	movne	r2, #1
   1b5b4:	movne	r3, r5
   1b5b8:	strne	r2, [sp, #52]	; 0x34
   1b5bc:	bne	1b368 <__assert_fail@plt+0xa034>
   1b5c0:	cmn	r5, #1
   1b5c4:	bne	1b90c <__assert_fail@plt+0xa5d8>
   1b5c8:	add	r0, sp, #140	; 0x8c
   1b5cc:	bl	15554 <__assert_fail@plt+0x4220>
   1b5d0:	ldr	r3, [sp, #108]	; 0x6c
   1b5d4:	ldr	r2, [sp, #80]	; 0x50
   1b5d8:	add	r3, r3, r2
   1b5dc:	str	r3, [sp, #108]	; 0x6c
   1b5e0:	b	1b0c0 <__assert_fail@plt+0x9d8c>
   1b5e4:	ldr	r8, [sp, #224]	; 0xe0
   1b5e8:	mov	r9, #0
   1b5ec:	ldr	r3, [r6, #8]
   1b5f0:	cmp	r9, r3
   1b5f4:	ldrge	r0, [sp, #12]
   1b5f8:	bge	1b794 <__assert_fail@plt+0xa460>
   1b5fc:	ldr	r3, [r6, #12]
   1b600:	ldr	r3, [r3, r9, lsl #2]
   1b604:	str	r3, [sp, #76]	; 0x4c
   1b608:	ldr	r2, [sp, #76]	; 0x4c
   1b60c:	ldr	r3, [r8]
   1b610:	add	r3, r3, r2, lsl #3
   1b614:	ldrb	r2, [r3, #6]
   1b618:	tst	r2, #16
   1b61c:	beq	1b770 <__assert_fail@plt+0xa43c>
   1b620:	ldr	r7, [r3, #4]
   1b624:	ldr	r3, [pc, #2444]	; 1bfb8 <__assert_fail@plt+0xac84>
   1b628:	tst	r7, r3
   1b62c:	beq	1b688 <__assert_fail@plt+0xa354>
   1b630:	ldr	r2, [sp, #228]	; 0xe4
   1b634:	ldr	r1, [sp, #180]	; 0xb4
   1b638:	add	r0, sp, #140	; 0x8c
   1b63c:	bl	179c4 <__assert_fail@plt+0x6690>
   1b640:	ldr	r3, [pc, #2420]	; 1bfbc <__assert_fail@plt+0xac88>
   1b644:	and	r3, r3, r7, lsr #8
   1b648:	tst	r3, #4
   1b64c:	beq	1b658 <__assert_fail@plt+0xa324>
   1b650:	tst	r0, #1
   1b654:	beq	1b770 <__assert_fail@plt+0xa43c>
   1b658:	tst	r3, #8
   1b65c:	beq	1b668 <__assert_fail@plt+0xa334>
   1b660:	tst	r0, #1
   1b664:	bne	1b770 <__assert_fail@plt+0xa43c>
   1b668:	tst	r3, #32
   1b66c:	beq	1b678 <__assert_fail@plt+0xa344>
   1b670:	tst	r0, #2
   1b674:	beq	1b770 <__assert_fail@plt+0xa43c>
   1b678:	tst	r3, #128	; 0x80
   1b67c:	beq	1b688 <__assert_fail@plt+0xa354>
   1b680:	tst	r0, #8
   1b684:	beq	1b770 <__assert_fail@plt+0xa43c>
   1b688:	ldr	r3, [sp, #180]	; 0xb4
   1b68c:	add	r2, sp, #140	; 0x8c
   1b690:	ldr	r1, [sp, #76]	; 0x4c
   1b694:	mov	r0, r8
   1b698:	bl	16318 <__assert_fail@plt+0x4fe4>
   1b69c:	cmp	r0, #0
   1b6a0:	beq	1b770 <__assert_fail@plt+0xa43c>
   1b6a4:	ldr	r7, [sp, #180]	; 0xb4
   1b6a8:	ldr	r3, [sp, #260]	; 0x104
   1b6ac:	add	r7, r0, r7
   1b6b0:	cmp	r3, r0
   1b6b4:	strge	r3, [sp, #260]	; 0x104
   1b6b8:	strlt	r0, [sp, #260]	; 0x104
   1b6bc:	mov	r1, r7
   1b6c0:	add	r0, sp, #140	; 0x8c
   1b6c4:	bl	158bc <__assert_fail@plt+0x4588>
   1b6c8:	cmp	r0, #0
   1b6cc:	str	r0, [sp, #128]	; 0x80
   1b6d0:	bne	1b794 <__assert_fail@plt+0xa460>
   1b6d4:	ldr	r3, [r8, #12]
   1b6d8:	ldr	r2, [sp, #76]	; 0x4c
   1b6dc:	mov	r1, #12
   1b6e0:	ldr	r2, [r3, r2, lsl #2]
   1b6e4:	ldr	r3, [r8, #24]
   1b6e8:	mla	r2, r1, r2, r3
   1b6ec:	ldr	r3, [sp, #240]	; 0xf0
   1b6f0:	ldr	r3, [r3, r7, lsl #2]
   1b6f4:	cmp	r3, #0
   1b6f8:	str	r3, [sp, #76]	; 0x4c
   1b6fc:	bne	1b778 <__assert_fail@plt+0xa444>
   1b700:	ldm	r2, {r0, r1, r2}
   1b704:	add	r3, sp, #276	; 0x114
   1b708:	stm	r3, {r0, r1, r2}
   1b70c:	sub	r1, r7, #1
   1b710:	ldr	r2, [sp, #228]	; 0xe4
   1b714:	add	r0, sp, #140	; 0x8c
   1b718:	bl	179c4 <__assert_fail@plt+0x6690>
   1b71c:	ldr	r3, [sp, #240]	; 0xf0
   1b720:	add	r2, sp, #276	; 0x114
   1b724:	str	r3, [sp, #100]	; 0x64
   1b728:	mov	r1, r8
   1b72c:	mov	r3, r0
   1b730:	add	r0, sp, #128	; 0x80
   1b734:	bl	16a44 <__assert_fail@plt+0x5710>
   1b738:	ldr	r3, [sp, #100]	; 0x64
   1b73c:	str	r0, [r3, r7, lsl #2]
   1b740:	ldr	r3, [sp, #76]	; 0x4c
   1b744:	cmp	r3, #0
   1b748:	beq	1b754 <__assert_fail@plt+0xa420>
   1b74c:	ldr	r0, [sp, #284]	; 0x11c
   1b750:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1b754:	ldr	r3, [sp, #240]	; 0xf0
   1b758:	ldr	r3, [r3, r7, lsl #2]
   1b75c:	cmp	r3, #0
   1b760:	bne	1b770 <__assert_fail@plt+0xa43c>
   1b764:	ldr	r0, [sp, #128]	; 0x80
   1b768:	cmp	r0, #0
   1b76c:	bne	1b794 <__assert_fail@plt+0xa460>
   1b770:	add	r9, r9, #1
   1b774:	b	1b5ec <__assert_fail@plt+0xa2b8>
   1b778:	ldr	r3, [sp, #76]	; 0x4c
   1b77c:	add	r0, sp, #276	; 0x114
   1b780:	ldr	r1, [r3, #40]	; 0x28
   1b784:	bl	1690c <__assert_fail@plt+0x55d8>
   1b788:	cmp	r0, #0
   1b78c:	str	r0, [sp, #128]	; 0x80
   1b790:	beq	1b70c <__assert_fail@plt+0xa3d8>
   1b794:	cmp	r0, #0
   1b798:	str	r0, [sp, #116]	; 0x74
   1b79c:	beq	1b3ec <__assert_fail@plt+0xa0b8>
   1b7a0:	mov	r7, #0
   1b7a4:	b	1b410 <__assert_fail@plt+0xa0dc>
   1b7a8:	ldr	r7, [r6, #48]	; 0x30
   1b7ac:	cmp	r7, #0
   1b7b0:	beq	1b7d8 <__assert_fail@plt+0xa4a4>
   1b7b4:	ldr	r1, [sp, #180]	; 0xb4
   1b7b8:	ldr	r2, [sp, #228]	; 0xe4
   1b7bc:	sub	r1, r1, #1
   1b7c0:	add	r0, sp, #140	; 0x8c
   1b7c4:	bl	179c4 <__assert_fail@plt+0x6690>
   1b7c8:	tst	r0, #1
   1b7cc:	addne	r8, r8, #256	; 0x100
   1b7d0:	ldr	r7, [r7, r8, lsl #2]
   1b7d4:	b	1b410 <__assert_fail@plt+0xa0dc>
   1b7d8:	mov	r1, r6
   1b7dc:	ldr	r0, [sp, #224]	; 0xe0
   1b7e0:	bl	18bd0 <__assert_fail@plt+0x789c>
   1b7e4:	subs	r7, r0, #0
   1b7e8:	bne	1b400 <__assert_fail@plt+0xa0cc>
   1b7ec:	mov	r3, #12
   1b7f0:	str	r3, [sp, #116]	; 0x74
   1b7f4:	b	1b410 <__assert_fail@plt+0xa0dc>
   1b7f8:	ldr	r3, [sp, #56]	; 0x38
   1b7fc:	eor	r8, r3, #1
   1b800:	ldr	r3, [sp, #52]	; 0x34
   1b804:	ands	r8, r8, r3
   1b808:	bne	1b450 <__assert_fail@plt+0xa11c>
   1b80c:	mov	r9, #1
   1b810:	ldr	ip, [sp, #244]	; 0xf4
   1b814:	ldr	r3, [sp, #180]	; 0xb4
   1b818:	ldr	r0, [sp, #240]	; 0xf0
   1b81c:	mov	r2, r8
   1b820:	add	r1, r3, #1
   1b824:	cmp	ip, r1
   1b828:	bge	1b838 <__assert_fail@plt+0xa504>
   1b82c:	cmp	r2, #0
   1b830:	strne	r3, [sp, #180]	; 0xb4
   1b834:	b	1b450 <__assert_fail@plt+0xa11c>
   1b838:	mov	r3, r1
   1b83c:	ldr	r1, [r0, r1, lsl #2]
   1b840:	mov	r2, r9
   1b844:	cmp	r1, #0
   1b848:	beq	1b820 <__assert_fail@plt+0xa4ec>
   1b84c:	mov	r2, #0
   1b850:	add	r1, sp, #140	; 0x8c
   1b854:	add	r0, sp, #116	; 0x74
   1b858:	str	r3, [sp, #180]	; 0xb4
   1b85c:	bl	1a598 <__assert_fail@plt+0x9264>
   1b860:	ldr	r3, [sp, #116]	; 0x74
   1b864:	cmp	r3, #0
   1b868:	mov	r7, r0
   1b86c:	bne	1b900 <__assert_fail@plt+0xa5cc>
   1b870:	cmp	r0, #0
   1b874:	beq	1b810 <__assert_fail@plt+0xa4dc>
   1b878:	ldr	r3, [sp, #44]	; 0x2c
   1b87c:	ldr	r2, [sp, #72]	; 0x48
   1b880:	cmp	r6, r7
   1b884:	movne	r3, #0
   1b888:	andeq	r3, r3, #1
   1b88c:	str	r3, [sp, #44]	; 0x2c
   1b890:	ldr	r1, [sp, #44]	; 0x2c
   1b894:	ldr	r3, [sp, #64]	; 0x40
   1b898:	cmp	r1, #0
   1b89c:	moveq	r3, r2
   1b8a0:	str	r3, [sp, #64]	; 0x40
   1b8a4:	ldrb	r3, [r7, #52]	; 0x34
   1b8a8:	tst	r3, #16
   1b8ac:	beq	1b8f0 <__assert_fail@plt+0xa5bc>
   1b8b0:	tst	r3, #128	; 0x80
   1b8b4:	beq	1b8d0 <__assert_fail@plt+0xa59c>
   1b8b8:	ldr	r2, [sp, #180]	; 0xb4
   1b8bc:	mov	r1, r7
   1b8c0:	add	r0, sp, #140	; 0x8c
   1b8c4:	bl	18210 <__assert_fail@plt+0x6edc>
   1b8c8:	cmp	r0, #0
   1b8cc:	beq	1b8f0 <__assert_fail@plt+0xa5bc>
   1b8d0:	ldr	r3, [sp, #56]	; 0x38
   1b8d4:	ldr	r5, [sp, #180]	; 0xb4
   1b8d8:	cmp	r3, #0
   1b8dc:	beq	1b5c0 <__assert_fail@plt+0xa28c>
   1b8e0:	mov	r3, #1
   1b8e4:	str	r3, [sp, #52]	; 0x34
   1b8e8:	mov	r3, #0
   1b8ec:	str	r3, [sp, #48]	; 0x30
   1b8f0:	ldr	r3, [sp, #64]	; 0x40
   1b8f4:	mov	r6, r7
   1b8f8:	str	r3, [sp, #72]	; 0x48
   1b8fc:	b	1b378 <__assert_fail@plt+0xa044>
   1b900:	cmp	r0, #0
   1b904:	bne	1b878 <__assert_fail@plt+0xa544>
   1b908:	b	1b450 <__assert_fail@plt+0xa11c>
   1b90c:	cmn	r5, #2
   1b910:	beq	1b028 <__assert_fail@plt+0x9cf4>
   1b914:	ldrb	r6, [sl, #28]
   1b918:	ldr	r3, [sp, #16]
   1b91c:	str	r5, [sp, #232]	; 0xe8
   1b920:	lsr	r6, r6, #4
   1b924:	eor	r6, r6, #1
   1b928:	cmp	r3, #1
   1b92c:	movls	r6, #0
   1b930:	andhi	r6, r6, #1
   1b934:	cmp	r6, #0
   1b938:	bne	1b948 <__assert_fail@plt+0xa614>
   1b93c:	ldr	r3, [fp, #76]	; 0x4c
   1b940:	cmp	r3, #0
   1b944:	beq	1b974 <__assert_fail@plt+0xa640>
   1b948:	ldr	r3, [sp, #240]	; 0xf0
   1b94c:	mov	r2, r5
   1b950:	add	r0, sp, #140	; 0x8c
   1b954:	ldr	r1, [r3, r5, lsl #2]
   1b958:	bl	18210 <__assert_fail@plt+0x6edc>
   1b95c:	cmp	r6, #0
   1b960:	str	r0, [sp, #236]	; 0xec
   1b964:	beq	1b974 <__assert_fail@plt+0xa640>
   1b968:	ldrb	r3, [fp, #88]	; 0x58
   1b96c:	tst	r3, #1
   1b970:	bne	1b980 <__assert_fail@plt+0xa64c>
   1b974:	ldr	r3, [fp, #76]	; 0x4c
   1b978:	cmp	r3, #0
   1b97c:	beq	1bb58 <__assert_fail@plt+0xa824>
   1b980:	ldr	r3, [sp, #224]	; 0xe0
   1b984:	cmn	r5, #-1073741822	; 0xc0000002
   1b988:	str	r3, [sp, #48]	; 0x30
   1b98c:	ldr	r3, [sp, #236]	; 0xec
   1b990:	str	r3, [sp, #44]	; 0x2c
   1b994:	bhi	1b028 <__assert_fail@plt+0x9cf4>
   1b998:	add	r9, r5, #1
   1b99c:	lsl	r9, r9, #2
   1b9a0:	mov	r0, r9
   1b9a4:	bl	1fd58 <__assert_fail@plt+0xea24>
   1b9a8:	subs	r7, r0, #0
   1b9ac:	beq	1bb1c <__assert_fail@plt+0xa7e8>
   1b9b0:	ldr	r3, [sp, #48]	; 0x30
   1b9b4:	ldr	r6, [r3, #76]	; 0x4c
   1b9b8:	cmp	r6, #0
   1b9bc:	beq	1baac <__assert_fail@plt+0xa778>
   1b9c0:	mov	r0, r9
   1b9c4:	bl	1fd58 <__assert_fail@plt+0xea24>
   1b9c8:	subs	r6, r0, #0
   1b9cc:	beq	1bb20 <__assert_fail@plt+0xa7ec>
   1b9d0:	mov	r9, #0
   1b9d4:	add	r3, r5, #1
   1b9d8:	mov	r1, r9
   1b9dc:	lsl	r2, r3, #2
   1b9e0:	mov	r0, r6
   1b9e4:	str	r3, [sp, #52]	; 0x34
   1b9e8:	bl	11238 <memset@plt>
   1b9ec:	ldr	r3, [sp, #44]	; 0x2c
   1b9f0:	add	r1, sp, #276	; 0x114
   1b9f4:	add	r0, sp, #140	; 0x8c
   1b9f8:	str	r3, [sp, #284]	; 0x11c
   1b9fc:	str	r7, [sp, #276]	; 0x114
   1ba00:	str	r6, [sp, #280]	; 0x118
   1ba04:	str	r5, [sp, #288]	; 0x120
   1ba08:	str	r9, [sp, #292]	; 0x124
   1ba0c:	str	r9, [sp, #296]	; 0x128
   1ba10:	str	r9, [sp, #300]	; 0x12c
   1ba14:	bl	1acdc <__assert_fail@plt+0x99a8>
   1ba18:	mov	r8, r0
   1ba1c:	ldr	r0, [sp, #300]	; 0x12c
   1ba20:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1ba24:	cmp	r8, #0
   1ba28:	bne	1bb24 <__assert_fail@plt+0xa7f0>
   1ba2c:	ldr	r3, [r7]
   1ba30:	cmp	r3, #0
   1ba34:	bne	1ba7c <__assert_fail@plt+0xa748>
   1ba38:	ldr	r3, [r6]
   1ba3c:	cmp	r3, #0
   1ba40:	bne	1ba7c <__assert_fail@plt+0xa748>
   1ba44:	ldr	r2, [sp, #240]	; 0xf0
   1ba48:	subs	r5, r5, #1
   1ba4c:	bcc	1bb50 <__assert_fail@plt+0xa81c>
   1ba50:	ldr	r1, [r2, r5, lsl #2]
   1ba54:	cmp	r1, #0
   1ba58:	beq	1ba48 <__assert_fail@plt+0xa714>
   1ba5c:	ldrb	r3, [r1, #52]	; 0x34
   1ba60:	tst	r3, #16
   1ba64:	beq	1ba48 <__assert_fail@plt+0xa714>
   1ba68:	mov	r2, r5
   1ba6c:	add	r0, sp, #140	; 0x8c
   1ba70:	bl	18210 <__assert_fail@plt+0x6edc>
   1ba74:	str	r0, [sp, #44]	; 0x2c
   1ba78:	b	1b9d4 <__assert_fail@plt+0xa6a0>
   1ba7c:	add	r3, r5, #1
   1ba80:	mov	r2, r6
   1ba84:	mov	r1, r7
   1ba88:	ldr	r0, [sp, #48]	; 0x30
   1ba8c:	bl	1966c <__assert_fail@plt+0x8338>
   1ba90:	mov	r8, r0
   1ba94:	mov	r0, r6
   1ba98:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1ba9c:	cmp	r8, #0
   1baa0:	beq	1baf8 <__assert_fail@plt+0xa7c4>
   1baa4:	mov	r6, #0
   1baa8:	b	1bb24 <__assert_fail@plt+0xa7f0>
   1baac:	ldr	r3, [sp, #44]	; 0x2c
   1bab0:	add	r1, sp, #276	; 0x114
   1bab4:	add	r0, sp, #140	; 0x8c
   1bab8:	str	r3, [sp, #284]	; 0x11c
   1babc:	str	r7, [sp, #276]	; 0x114
   1bac0:	str	r6, [sp, #280]	; 0x118
   1bac4:	str	r5, [sp, #288]	; 0x120
   1bac8:	str	r6, [sp, #292]	; 0x124
   1bacc:	str	r6, [sp, #296]	; 0x128
   1bad0:	str	r6, [sp, #300]	; 0x12c
   1bad4:	bl	1acdc <__assert_fail@plt+0x99a8>
   1bad8:	mov	r8, r0
   1badc:	ldr	r0, [sp, #300]	; 0x12c
   1bae0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bae4:	cmp	r8, #0
   1bae8:	bne	1bb24 <__assert_fail@plt+0xa7f0>
   1baec:	ldr	r2, [r7]
   1baf0:	cmp	r2, #0
   1baf4:	beq	1bb4c <__assert_fail@plt+0xa818>
   1baf8:	ldr	r0, [sp, #240]	; 0xf0
   1bafc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bb00:	ldr	r3, [sp, #44]	; 0x2c
   1bb04:	str	r7, [sp, #240]	; 0xf0
   1bb08:	str	r3, [sp, #236]	; 0xec
   1bb0c:	str	r5, [sp, #232]	; 0xe8
   1bb10:	ldr	r8, [sp, #12]
   1bb14:	mov	r7, #0
   1bb18:	b	1baa4 <__assert_fail@plt+0xa770>
   1bb1c:	mov	r6, r7
   1bb20:	mov	r8, #12
   1bb24:	mov	r0, r7
   1bb28:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bb2c:	mov	r0, r6
   1bb30:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bb34:	cmp	r8, #0
   1bb38:	beq	1bb58 <__assert_fail@plt+0xa824>
   1bb3c:	cmp	r8, #1
   1bb40:	beq	1b5c8 <__assert_fail@plt+0xa294>
   1bb44:	str	r8, [sp, #12]
   1bb48:	b	1bb70 <__assert_fail@plt+0xa83c>
   1bb4c:	mov	r6, r8
   1bb50:	mov	r8, #1
   1bb54:	b	1bb24 <__assert_fail@plt+0xa7f0>
   1bb58:	ldr	r3, [sp, #16]
   1bb5c:	cmp	r3, #0
   1bb60:	addne	r3, r4, #8
   1bb64:	movne	r7, #1
   1bb68:	mvnne	r2, #0
   1bb6c:	bne	1bbbc <__assert_fail@plt+0xa888>
   1bb70:	ldr	r0, [sp, #240]	; 0xf0
   1bb74:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bb78:	ldr	r3, [fp, #76]	; 0x4c
   1bb7c:	cmp	r3, #0
   1bb80:	beq	1bb9c <__assert_fail@plt+0xa868>
   1bb84:	add	r0, sp, #140	; 0x8c
   1bb88:	bl	15554 <__assert_fail@plt+0x4220>
   1bb8c:	ldr	r0, [sp, #272]	; 0x110
   1bb90:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bb94:	ldr	r0, [sp, #256]	; 0x100
   1bb98:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bb9c:	add	r0, sp, #140	; 0x8c
   1bba0:	bl	153c8 <__assert_fail@plt+0x4094>
   1bba4:	ldr	r0, [sp, #12]
   1bba8:	add	sp, sp, #420	; 0x1a4
   1bbac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bbb0:	add	r7, r7, #1
   1bbb4:	str	r2, [r3, #-4]
   1bbb8:	str	r2, [r3, #-8]
   1bbbc:	ldr	r1, [sp, #16]
   1bbc0:	add	r3, r3, #8
   1bbc4:	cmp	r7, r1
   1bbc8:	bne	1bbb0 <__assert_fail@plt+0xa87c>
   1bbcc:	mov	r3, #0
   1bbd0:	str	r3, [r4]
   1bbd4:	ldr	r3, [sp, #232]	; 0xe8
   1bbd8:	str	r3, [r4, #4]
   1bbdc:	ldrb	r3, [sl, #28]
   1bbe0:	lsr	r3, r3, #4
   1bbe4:	eor	r3, r3, #1
   1bbe8:	cmp	r7, #1
   1bbec:	moveq	r3, #0
   1bbf0:	andne	r3, r3, #1
   1bbf4:	cmp	r3, #0
   1bbf8:	bne	1bcf0 <__assert_fail@plt+0xa9bc>
   1bbfc:	ldrb	r8, [sp, #216]	; 0xd8
   1bc00:	ldr	ip, [sp, #168]	; 0xa8
   1bc04:	ldr	r5, [sp, #152]	; 0x98
   1bc08:	ldr	lr, [sp, #172]	; 0xac
   1bc0c:	ldr	r6, [sp, #108]	; 0x6c
   1bc10:	mov	r1, r4
   1bc14:	mov	r2, r4
   1bc18:	mov	r3, #0
   1bc1c:	ldr	r0, [r4, r3, lsl #3]
   1bc20:	cmn	r0, #1
   1bc24:	beq	1bc6c <__assert_fail@plt+0xa938>
   1bc28:	cmp	r8, #0
   1bc2c:	beq	1bc54 <__assert_fail@plt+0xa920>
   1bc30:	cmp	r0, ip
   1bc34:	moveq	r0, lr
   1bc38:	ldrne	r0, [r5, r0, lsl #2]
   1bc3c:	str	r0, [r4, r3, lsl #3]
   1bc40:	ldr	r0, [r2, #4]
   1bc44:	cmp	ip, r0
   1bc48:	moveq	r0, lr
   1bc4c:	ldrne	r0, [r5, r0, lsl #2]
   1bc50:	str	r0, [r2, #4]
   1bc54:	ldr	r0, [r4, r3, lsl #3]
   1bc58:	add	r0, r0, r6
   1bc5c:	str	r0, [r4, r3, lsl #3]
   1bc60:	ldr	r0, [r2, #4]
   1bc64:	add	r0, r0, r6
   1bc68:	str	r0, [r2, #4]
   1bc6c:	add	r3, r3, #1
   1bc70:	cmp	r7, r3
   1bc74:	add	r2, r2, #8
   1bc78:	bne	1bc1c <__assert_fail@plt+0xa8e8>
   1bc7c:	ldr	r2, [sp, #16]
   1bc80:	mvn	r0, #0
   1bc84:	add	r6, r4, r2, lsl #3
   1bc88:	mov	r2, #0
   1bc8c:	ldr	ip, [sp, #68]	; 0x44
   1bc90:	add	r6, r6, #8
   1bc94:	cmp	r2, ip
   1bc98:	blt	1c108 <__assert_fail@plt+0xadd4>
   1bc9c:	ldr	r2, [fp, #132]	; 0x84
   1bca0:	cmp	r2, #0
   1bca4:	movne	ip, #0
   1bca8:	beq	1bb70 <__assert_fail@plt+0xa83c>
   1bcac:	add	lr, ip, #1
   1bcb0:	cmp	r3, lr
   1bcb4:	beq	1bb70 <__assert_fail@plt+0xa83c>
   1bcb8:	ldr	r0, [r2]
   1bcbc:	cmp	ip, r0
   1bcc0:	beq	1bce0 <__assert_fail@plt+0xa9ac>
   1bcc4:	add	r0, r0, #1
   1bcc8:	ldr	r0, [r4, r0, lsl #3]
   1bccc:	str	r0, [r1, #8]
   1bcd0:	ldr	r0, [r2]
   1bcd4:	add	r0, r4, r0, lsl #3
   1bcd8:	ldr	r0, [r0, #12]
   1bcdc:	str	r0, [r1, #12]
   1bce0:	add	r2, r2, #4
   1bce4:	add	r1, r1, #8
   1bce8:	mov	ip, lr
   1bcec:	b	1bcac <__assert_fail@plt+0xa978>
   1bcf0:	ldrb	r3, [fp, #88]	; 0x58
   1bcf4:	tst	r3, #1
   1bcf8:	beq	1bd10 <__assert_fail@plt+0xa9dc>
   1bcfc:	ldr	r5, [fp, #76]	; 0x4c
   1bd00:	cmp	r5, #0
   1bd04:	movle	r3, #0
   1bd08:	movgt	r3, #1
   1bd0c:	str	r3, [sp, #28]
   1bd10:	ldr	r3, [sl]
   1bd14:	mov	r2, #2
   1bd18:	str	r3, [sp, #32]
   1bd1c:	mov	r3, #0
   1bd20:	str	r3, [sp, #128]	; 0x80
   1bd24:	str	r3, [sp, #136]	; 0x88
   1bd28:	str	r3, [sp, #276]	; 0x114
   1bd2c:	mov	r3, #16
   1bd30:	str	r3, [sp, #280]	; 0x118
   1bd34:	add	r3, sp, #288	; 0x120
   1bd38:	str	r3, [sp, #284]	; 0x11c
   1bd3c:	ldr	r3, [sp, #28]
   1bd40:	str	r2, [sp, #132]	; 0x84
   1bd44:	cmp	r3, #0
   1bd48:	beq	1bdf0 <__assert_fail@plt+0xaabc>
   1bd4c:	mov	r0, #48	; 0x30
   1bd50:	bl	1fd58 <__assert_fail@plt+0xea24>
   1bd54:	cmp	r0, #0
   1bd58:	str	r0, [sp, #136]	; 0x88
   1bd5c:	addne	r5, sp, #128	; 0x80
   1bd60:	beq	1b028 <__assert_fail@plt+0x9cf4>
   1bd64:	ldr	r3, [sp, #32]
   1bd68:	ldr	r2, [sp, #16]
   1bd6c:	ldr	r6, [r3, #72]	; 0x48
   1bd70:	mov	r3, #0
   1bd74:	str	r3, [sp, #116]	; 0x74
   1bd78:	str	r3, [sp, #120]	; 0x78
   1bd7c:	str	r3, [sp, #124]	; 0x7c
   1bd80:	ldr	r3, [sp, #276]	; 0x114
   1bd84:	cmp	r2, r3
   1bd88:	ldrls	r3, [sp, #16]
   1bd8c:	strls	r3, [sp, #276]	; 0x114
   1bd90:	bls	1c35c <__assert_fail@plt+0xb028>
   1bd94:	add	r8, sp, #288	; 0x120
   1bd98:	mov	r3, #8
   1bd9c:	mov	r2, r8
   1bda0:	ldr	r1, [sp, #16]
   1bda4:	add	r0, sp, #276	; 0x114
   1bda8:	bl	1fe64 <__assert_fail@plt+0xeb30>
   1bdac:	cmp	r0, #0
   1bdb0:	bne	1c35c <__assert_fail@plt+0xb028>
   1bdb4:	ldr	r0, [sp, #284]	; 0x11c
   1bdb8:	cmp	r0, r8
   1bdbc:	beq	1bdc4 <__assert_fail@plt+0xaa90>
   1bdc0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bdc4:	add	r3, sp, #288	; 0x120
   1bdc8:	str	r3, [sp, #284]	; 0x11c
   1bdcc:	mov	r3, #0
   1bdd0:	str	r3, [sp, #276]	; 0x114
   1bdd4:	mvn	r3, #0
   1bdd8:	str	r3, [sp, #280]	; 0x118
   1bddc:	add	r0, sp, #276	; 0x114
   1bde0:	bl	155e8 <__assert_fail@plt+0x42b4>
   1bde4:	mov	r0, r5
   1bde8:	bl	15618 <__assert_fail@plt+0x42e4>
   1bdec:	b	1b028 <__assert_fail@plt+0x9cf4>
   1bdf0:	ldr	r5, [sp, #28]
   1bdf4:	b	1bd64 <__assert_fail@plt+0xaa30>
   1bdf8:	cmp	ip, #9
   1bdfc:	bne	1c3e4 <__assert_fail@plt+0xb0b0>
   1be00:	ldr	r3, [r3, r1]
   1be04:	add	r3, r3, #1
   1be08:	cmp	r7, r3
   1be0c:	ble	1c3e4 <__assert_fail@plt+0xb0b0>
   1be10:	ldr	ip, [r4, r3, lsl #3]
   1be14:	add	r1, r4, r3, lsl #3
   1be18:	cmp	r2, ip
   1be1c:	ble	1be38 <__assert_fail@plt+0xab04>
   1be20:	str	r2, [r1, #4]
   1be24:	ldr	r0, [sp, #20]
   1be28:	ldr	r2, [sp, #24]
   1be2c:	mov	r1, r4
   1be30:	bl	110ac <memcpy@plt>
   1be34:	b	1c3e4 <__assert_fail@plt+0xb0b0>
   1be38:	ldrb	r0, [r0, #6]
   1be3c:	tst	r0, #8
   1be40:	beq	1be60 <__assert_fail@plt+0xab2c>
   1be44:	ldr	r0, [sp, #20]
   1be48:	ldr	r3, [r0, r3, lsl #3]
   1be4c:	cmn	r3, #1
   1be50:	movne	r1, r0
   1be54:	ldrne	r2, [sp, #24]
   1be58:	movne	r0, r4
   1be5c:	bne	1be30 <__assert_fail@plt+0xaafc>
   1be60:	str	r2, [r1, #4]
   1be64:	b	1c3e4 <__assert_fail@plt+0xb0b0>
   1be68:	cmp	r5, #0
   1be6c:	beq	1bebc <__assert_fail@plt+0xab88>
   1be70:	mov	r2, r4
   1be74:	mov	r3, #0
   1be78:	ldr	r1, [r4, r3, lsl #3]
   1be7c:	cmp	r1, #0
   1be80:	blt	1bee4 <__assert_fail@plt+0xabb0>
   1be84:	ldr	r1, [r2, #4]
   1be88:	cmn	r1, #1
   1be8c:	bne	1bee4 <__assert_fail@plt+0xabb0>
   1be90:	add	r3, sp, #116	; 0x74
   1be94:	str	r3, [sp, #4]
   1be98:	ldr	r3, [sp, #20]
   1be9c:	mov	r2, r7
   1bea0:	str	r3, [sp]
   1bea4:	ldr	r1, [sp, #28]
   1bea8:	mov	r3, r4
   1beac:	mov	r0, r5
   1beb0:	bl	15948 <__assert_fail@plt+0x4614>
   1beb4:	subs	r6, r0, #0
   1beb8:	bge	1c41c <__assert_fail@plt+0xb0e8>
   1bebc:	ldr	r0, [sp, #124]	; 0x7c
   1bec0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bec4:	add	r0, sp, #276	; 0x114
   1bec8:	bl	155e8 <__assert_fail@plt+0x42b4>
   1becc:	mov	r0, r5
   1bed0:	bl	15618 <__assert_fail@plt+0x42e4>
   1bed4:	cmp	r0, #0
   1bed8:	beq	1bbfc <__assert_fail@plt+0xa8c8>
   1bedc:	str	r0, [sp, #12]
   1bee0:	b	1bb70 <__assert_fail@plt+0xa83c>
   1bee4:	add	r3, r3, #1
   1bee8:	cmp	r7, r3
   1beec:	add	r2, r2, #8
   1bef0:	bne	1be78 <__assert_fail@plt+0xab44>
   1bef4:	b	1bebc <__assert_fail@plt+0xab88>
   1bef8:	mov	r1, r6
   1befc:	add	r0, sp, #116	; 0x74
   1bf00:	bl	17270 <__assert_fail@plt+0x5f3c>
   1bf04:	cmp	r0, #0
   1bf08:	bne	1c46c <__assert_fail@plt+0xb138>
   1bf0c:	ldr	r0, [sp, #124]	; 0x7c
   1bf10:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bf14:	b	1bddc <__assert_fail@plt+0xaaa8>
   1bf18:	mov	r6, r8
   1bf1c:	add	r3, r3, #1
   1bf20:	b	1c478 <__assert_fail@plt+0xb144>
   1bf24:	ldrb	r1, [r1, #6]
   1bf28:	tst	r1, #16
   1bf2c:	beq	1bfc0 <__assert_fail@plt+0xac8c>
   1bf30:	ldr	r3, [sp, #112]	; 0x70
   1bf34:	add	r2, sp, #140	; 0x8c
   1bf38:	mov	r1, r6
   1bf3c:	mov	r0, r8
   1bf40:	bl	16318 <__assert_fail@plt+0x4fe4>
   1bf44:	subs	r3, r0, #0
   1bf48:	bne	1c0a0 <__assert_fail@plt+0xad6c>
   1bf4c:	ldr	r1, [r8]
   1bf50:	ldr	r2, [sp, #112]	; 0x70
   1bf54:	add	r1, r1, r9
   1bf58:	add	r0, sp, #140	; 0x8c
   1bf5c:	bl	180e4 <__assert_fail@plt+0x6db0>
   1bf60:	cmp	r0, #0
   1bf64:	movne	r3, #0
   1bf68:	bne	1c0a0 <__assert_fail@plt+0xad6c>
   1bf6c:	add	r3, sp, #116	; 0x74
   1bf70:	str	r3, [sp, #4]
   1bf74:	ldr	r3, [sp, #20]
   1bf78:	mov	r2, r7
   1bf7c:	str	r3, [sp]
   1bf80:	ldr	r1, [sp, #28]
   1bf84:	mov	r3, r4
   1bf88:	mov	r0, r5
   1bf8c:	bl	15948 <__assert_fail@plt+0x4614>
   1bf90:	subs	r6, r0, #0
   1bf94:	bge	1c39c <__assert_fail@plt+0xb068>
   1bf98:	ldr	r0, [sp, #124]	; 0x7c
   1bf9c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1bfa0:	add	r0, sp, #276	; 0x114
   1bfa4:	bl	155e8 <__assert_fail@plt+0x42b4>
   1bfa8:	mov	r0, r5
   1bfac:	bl	15618 <__assert_fail@plt+0x42e4>
   1bfb0:	b	1b0ec <__assert_fail@plt+0x9db8>
   1bfb4:	beq	feac6a64 <optarg@@GLIBC_2.4+0xfea94884>
   1bfb8:	andeq	pc, r3, r0, lsl #30
   1bfbc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1bfc0:	cmp	r2, #4
   1bfc4:	bne	1bf4c <__assert_fail@plt+0xac18>
   1bfc8:	ldr	r3, [r3, r9]
   1bfcc:	add	r3, r3, #1
   1bfd0:	cmp	r7, r3
   1bfd4:	ble	1bffc <__assert_fail@plt+0xacc8>
   1bfd8:	add	r2, r4, r3, lsl #3
   1bfdc:	ldr	r0, [r4, r3, lsl #3]
   1bfe0:	ldr	r2, [r2, #4]
   1bfe4:	cmp	r5, #0
   1bfe8:	sub	r3, r2, r0
   1bfec:	bne	1c050 <__assert_fail@plt+0xad1c>
   1bff0:	cmp	r3, #0
   1bff4:	bne	1c0a0 <__assert_fail@plt+0xad6c>
   1bff8:	b	1c004 <__assert_fail@plt+0xacd0>
   1bffc:	cmp	r5, #0
   1c000:	bne	1bf6c <__assert_fail@plt+0xac38>
   1c004:	mov	r1, r6
   1c008:	add	r0, sp, #116	; 0x74
   1c00c:	bl	17270 <__assert_fail@plt+0x5f3c>
   1c010:	cmp	r0, #0
   1c014:	beq	1bf0c <__assert_fail@plt+0xabd8>
   1c018:	ldr	r2, [r8, #20]
   1c01c:	mov	r3, #12
   1c020:	mla	r6, r3, r6, r2
   1c024:	ldr	r2, [sp, #112]	; 0x70
   1c028:	ldr	r3, [r6, #8]
   1c02c:	ldr	r6, [r3]
   1c030:	ldr	r3, [sp, #240]	; 0xf0
   1c034:	mov	r1, r6
   1c038:	ldr	r0, [r3, r2, lsl #2]
   1c03c:	add	r0, r0, #4
   1c040:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1c044:	cmp	r0, #0
   1c048:	beq	1bf4c <__assert_fail@plt+0xac18>
   1c04c:	b	1c598 <__assert_fail@plt+0xb264>
   1c050:	cmn	r0, #1
   1c054:	beq	1bf6c <__assert_fail@plt+0xac38>
   1c058:	cmn	r2, #1
   1c05c:	beq	1bf6c <__assert_fail@plt+0xac38>
   1c060:	cmp	r3, #0
   1c064:	beq	1c004 <__assert_fail@plt+0xacd0>
   1c068:	ldr	r1, [sp, #112]	; 0x70
   1c06c:	ldr	r2, [sp, #168]	; 0xa8
   1c070:	ldr	ip, [sp, #144]	; 0x90
   1c074:	sub	r2, r2, r1
   1c078:	cmp	r3, r2
   1c07c:	bgt	1bf6c <__assert_fail@plt+0xac38>
   1c080:	mov	r2, r3
   1c084:	add	r1, ip, r1
   1c088:	add	r0, ip, r0
   1c08c:	str	r3, [sp, #40]	; 0x28
   1c090:	bl	110f4 <memcmp@plt>
   1c094:	ldr	r3, [sp, #40]	; 0x28
   1c098:	cmp	r0, #0
   1c09c:	bne	1bf6c <__assert_fail@plt+0xac38>
   1c0a0:	ldr	r2, [r8, #12]
   1c0a4:	cmp	r3, #0
   1c0a8:	ldr	r6, [r2, sl, lsl #2]
   1c0ac:	ldr	r2, [sp, #112]	; 0x70
   1c0b0:	addeq	r3, r2, #1
   1c0b4:	addne	r3, r3, r2
   1c0b8:	cmp	r5, #0
   1c0bc:	str	r3, [sp, #112]	; 0x70
   1c0c0:	beq	1c0f4 <__assert_fail@plt+0xadc0>
   1c0c4:	ldr	r2, [sp, #232]	; 0xe8
   1c0c8:	cmp	r3, r2
   1c0cc:	bgt	1bf6c <__assert_fail@plt+0xac38>
   1c0d0:	ldr	r2, [sp, #240]	; 0xf0
   1c0d4:	ldr	r0, [r2, r3, lsl #2]
   1c0d8:	cmp	r0, #0
   1c0dc:	beq	1bf6c <__assert_fail@plt+0xac38>
   1c0e0:	mov	r1, r6
   1c0e4:	add	r0, r0, #4
   1c0e8:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1c0ec:	cmp	r0, #0
   1c0f0:	beq	1bf6c <__assert_fail@plt+0xac38>
   1c0f4:	mov	r3, #0
   1c0f8:	str	r3, [sp, #120]	; 0x78
   1c0fc:	b	1c598 <__assert_fail@plt+0xb264>
   1c100:	mov	r6, r8
   1c104:	b	1c598 <__assert_fail@plt+0xb264>
   1c108:	str	r0, [r6, #-8]
   1c10c:	str	r0, [r6, #-4]
   1c110:	add	r2, r2, #1
   1c114:	b	1bc8c <__assert_fail@plt+0xa958>
   1c118:	ldr	r3, [fp, #40]	; 0x28
   1c11c:	cmp	r3, #0
   1c120:	beq	1afe4 <__assert_fail@plt+0x9cb0>
   1c124:	ldr	r1, [fp, #44]	; 0x2c
   1c128:	cmp	r1, #0
   1c12c:	beq	1afe4 <__assert_fail@plt+0x9cb0>
   1c130:	ldr	r0, [fp, #48]	; 0x30
   1c134:	cmp	r0, #0
   1c138:	beq	1afe4 <__assert_fail@plt+0x9cb0>
   1c13c:	ldr	r2, [r2, #8]
   1c140:	cmp	r2, #0
   1c144:	bne	1c184 <__assert_fail@plt+0xae50>
   1c148:	ldr	r3, [r3, #8]
   1c14c:	cmp	r3, #0
   1c150:	bne	1c184 <__assert_fail@plt+0xae50>
   1c154:	ldr	r3, [r1, #8]
   1c158:	cmp	r3, #0
   1c15c:	beq	1c16c <__assert_fail@plt+0xae38>
   1c160:	ldrsb	r3, [sl, #28]
   1c164:	cmp	r3, #0
   1c168:	blt	1c184 <__assert_fail@plt+0xae50>
   1c16c:	cmp	r5, #0
   1c170:	cmpne	r8, #0
   1c174:	movne	r8, #1
   1c178:	moveq	r8, #0
   1c17c:	bne	1afe4 <__assert_fail@plt+0x9cb0>
   1c180:	mov	r5, r8
   1c184:	ldr	r3, [sp, #68]	; 0x44
   1c188:	subs	r3, r6, r3
   1c18c:	str	r3, [sp, #16]
   1c190:	movne	r3, #1
   1c194:	bne	1c1a4 <__assert_fail@plt+0xae70>
   1c198:	ldr	r3, [fp, #76]	; 0x4c
   1c19c:	adds	r3, r3, #0
   1c1a0:	movne	r3, #1
   1c1a4:	ldr	ip, [sp, #32]
   1c1a8:	str	r3, [sp, #56]	; 0x38
   1c1ac:	ldr	r3, [sl, #20]
   1c1b0:	ldr	r2, [fp, #8]
   1c1b4:	str	ip, [sp, #140]	; 0x8c
   1c1b8:	ldr	ip, [sp, #36]	; 0x24
   1c1bc:	ldr	r0, [fp, #92]	; 0x5c
   1c1c0:	str	r3, [sp, #24]
   1c1c4:	ldr	r3, [sl, #12]
   1c1c8:	add	r2, r2, #1
   1c1cc:	str	ip, [sp, #188]	; 0xbc
   1c1d0:	str	ip, [sp, #184]	; 0xb8
   1c1d4:	ldr	ip, [sp, #24]
   1c1d8:	cmp	r2, r0
   1c1dc:	movlt	r2, r0
   1c1e0:	lsr	r3, r3, #22
   1c1e4:	adds	r6, ip, #0
   1c1e8:	and	r3, r3, #1
   1c1ec:	movne	r6, #1
   1c1f0:	strb	r3, [sp, #212]	; 0xd4
   1c1f4:	orr	r3, r3, r6
   1c1f8:	strb	r3, [sp, #215]	; 0xd7
   1c1fc:	ldrb	r3, [fp, #88]	; 0x58
   1c200:	ldr	r1, [sp, #36]	; 0x24
   1c204:	str	r0, [sp, #220]	; 0xdc
   1c208:	add	r1, r1, #1
   1c20c:	lsr	r0, r3, #2
   1c210:	lsr	r3, r3, #3
   1c214:	and	r3, r3, #1
   1c218:	cmp	r2, r1
   1c21c:	and	r0, r0, #1
   1c220:	strb	r3, [sp, #214]	; 0xd6
   1c224:	ldr	r3, [sp, #36]	; 0x24
   1c228:	strb	r0, [sp, #213]	; 0xd5
   1c22c:	movlt	r1, r2
   1c230:	add	r0, sp, #140	; 0x8c
   1c234:	str	r3, [sp, #196]	; 0xc4
   1c238:	str	r3, [sp, #192]	; 0xc0
   1c23c:	str	ip, [sp, #204]	; 0xcc
   1c240:	bl	14424 <__assert_fail@plt+0x30f0>
   1c244:	subs	r3, r0, #0
   1c248:	str	r3, [sp, #12]
   1c24c:	bne	1bb70 <__assert_fail@plt+0xa83c>
   1c250:	add	r3, fp, #96	; 0x60
   1c254:	str	r3, [sp, #208]	; 0xd0
   1c258:	ldrb	r3, [fp, #88]	; 0x58
   1c25c:	lsr	r3, r3, #4
   1c260:	and	r3, r3, #1
   1c264:	strb	r3, [sp, #218]	; 0xda
   1c268:	ldrb	r3, [sp, #215]	; 0xd7
   1c26c:	cmp	r3, #0
   1c270:	ldrne	r2, [sp, #144]	; 0x90
   1c274:	ldreq	r2, [sp, #32]
   1c278:	cmp	r3, #0
   1c27c:	str	r2, [sp, #144]	; 0x90
   1c280:	movne	r3, #0
   1c284:	bne	1c29c <__assert_fail@plt+0xaf68>
   1c288:	ldr	r3, [fp, #92]	; 0x5c
   1c28c:	ldr	r2, [sp, #36]	; 0x24
   1c290:	cmp	r3, #1
   1c294:	movgt	r2, #0
   1c298:	mov	r3, r2
   1c29c:	str	r3, [sp, #168]	; 0xa8
   1c2a0:	str	r3, [sp, #172]	; 0xac
   1c2a4:	ldrb	r3, [sl, #28]
   1c2a8:	str	r7, [sp, #196]	; 0xc4
   1c2ac:	str	r7, [sp, #192]	; 0xc0
   1c2b0:	lsr	r3, r3, #7
   1c2b4:	strb	r3, [sp, #217]	; 0xd9
   1c2b8:	ldr	r9, [fp, #76]	; 0x4c
   1c2bc:	ldr	r3, [sp, #472]	; 0x1d8
   1c2c0:	lsl	r7, r9, #1
   1c2c4:	str	r3, [sp, #228]	; 0xe4
   1c2c8:	cmp	r7, #0
   1c2cc:	mvn	r3, #0
   1c2d0:	str	r3, [sp, #232]	; 0xe8
   1c2d4:	bgt	1aff0 <__assert_fail@plt+0x9cbc>
   1c2d8:	mov	r3, #1
   1c2dc:	str	r3, [sp, #260]	; 0x104
   1c2e0:	ldr	r3, [sp, #16]
   1c2e4:	str	r7, [sp, #252]	; 0xfc
   1c2e8:	cmp	r3, #1
   1c2ec:	str	r7, [sp, #268]	; 0x10c
   1c2f0:	bhi	1b030 <__assert_fail@plt+0x9cfc>
   1c2f4:	ldrb	r3, [fp, #88]	; 0x58
   1c2f8:	tst	r3, #2
   1c2fc:	bne	1b030 <__assert_fail@plt+0x9cfc>
   1c300:	ldr	r3, [sp, #472]	; 0x1d8
   1c304:	str	r5, [sp, #108]	; 0x6c
   1c308:	tst	r3, #1
   1c30c:	moveq	r3, #6
   1c310:	movne	r3, #4
   1c314:	cmp	r5, r8
   1c318:	str	r3, [sp, #200]	; 0xc8
   1c31c:	movle	r3, #1
   1c320:	mvngt	r3, #0
   1c324:	str	r3, [sp, #80]	; 0x50
   1c328:	movlt	r3, r5
   1c32c:	movge	r3, r8
   1c330:	str	r3, [sp, #60]	; 0x3c
   1c334:	movge	r3, r5
   1c338:	movlt	r3, r8
   1c33c:	str	r3, [sp, #40]	; 0x28
   1c340:	ldr	r3, [fp, #92]	; 0x5c
   1c344:	str	r3, [sp, #92]	; 0x5c
   1c348:	ldr	r3, [sp, #20]
   1c34c:	cmp	r3, #0
   1c350:	bne	1b058 <__assert_fail@plt+0x9d24>
   1c354:	mov	r3, #8
   1c358:	b	1b09c <__assert_fail@plt+0x9d68>
   1c35c:	ldr	r3, [sp, #284]	; 0x11c
   1c360:	mov	r1, r4
   1c364:	str	r3, [sp, #20]
   1c368:	ldr	r3, [sp, #16]
   1c36c:	ldr	r0, [sp, #20]
   1c370:	lsl	r3, r3, #3
   1c374:	mov	r2, r3
   1c378:	str	r3, [sp, #24]
   1c37c:	bl	110ac <memcpy@plt>
   1c380:	ldr	r3, [r4]
   1c384:	add	r2, sp, #416	; 0x1a0
   1c388:	str	r3, [r2, #-304]!	; 0xfffffed0
   1c38c:	ldr	r3, [sp, #16]
   1c390:	str	r2, [sp, #28]
   1c394:	lsl	r3, r3, #4
   1c398:	str	r3, [sp, #36]	; 0x24
   1c39c:	ldr	r2, [sp, #112]	; 0x70
   1c3a0:	ldr	r3, [r4, #4]
   1c3a4:	cmp	r2, r3
   1c3a8:	bgt	1bebc <__assert_fail@plt+0xab88>
   1c3ac:	ldr	r3, [sp, #32]
   1c3b0:	lsl	r1, r6, #3
   1c3b4:	ldr	r3, [r3]
   1c3b8:	add	r0, r3, r1
   1c3bc:	ldrb	ip, [r0, #4]
   1c3c0:	cmp	ip, #8
   1c3c4:	bne	1bdf8 <__assert_fail@plt+0xaac4>
   1c3c8:	ldr	r3, [r3, r6, lsl #3]
   1c3cc:	add	r3, r3, #1
   1c3d0:	cmp	r7, r3
   1c3d4:	addgt	r1, r4, r3, lsl #3
   1c3d8:	strgt	r2, [r4, r3, lsl #3]
   1c3dc:	mvngt	r3, #0
   1c3e0:	strgt	r3, [r1, #4]
   1c3e4:	ldr	r2, [r4, #4]
   1c3e8:	ldr	r3, [sp, #112]	; 0x70
   1c3ec:	cmp	r2, r3
   1c3f0:	bne	1c400 <__assert_fail@plt+0xb0cc>
   1c3f4:	ldr	r3, [sp, #236]	; 0xec
   1c3f8:	cmp	r6, r3
   1c3fc:	beq	1be68 <__assert_fail@plt+0xab34>
   1c400:	cmp	r5, #0
   1c404:	beq	1c41c <__assert_fail@plt+0xb0e8>
   1c408:	mov	r1, r6
   1c40c:	add	r0, sp, #116	; 0x74
   1c410:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1c414:	cmp	r0, #0
   1c418:	bne	1be70 <__assert_fail@plt+0xab3c>
   1c41c:	ldr	r8, [sp, #224]	; 0xe0
   1c420:	lsl	r9, r6, #3
   1c424:	mov	sl, r6
   1c428:	ldr	r3, [r8]
   1c42c:	add	r1, r3, r9
   1c430:	ldrb	r2, [r1, #4]
   1c434:	tst	r2, #8
   1c438:	beq	1bf24 <__assert_fail@plt+0xabf0>
   1c43c:	ldr	r3, [sp, #240]	; 0xf0
   1c440:	ldr	r2, [sp, #112]	; 0x70
   1c444:	mov	sl, #12
   1c448:	mov	r1, r6
   1c44c:	ldr	r9, [r3, r2, lsl #2]
   1c450:	ldr	r3, [r8, #20]
   1c454:	add	r0, sp, #116	; 0x74
   1c458:	mla	sl, sl, r6, r3
   1c45c:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1c460:	add	r9, r9, #4
   1c464:	cmp	r0, #0
   1c468:	beq	1bef8 <__assert_fail@plt+0xabc4>
   1c46c:	ldr	r2, [sl, #4]
   1c470:	mov	r3, #0
   1c474:	mvn	r6, #0
   1c478:	cmp	r3, r2
   1c47c:	bge	1c598 <__assert_fail@plt+0xb264>
   1c480:	ldr	r1, [sl, #8]
   1c484:	mov	r0, r9
   1c488:	str	r2, [sp, #44]	; 0x2c
   1c48c:	ldr	r8, [r1, r3, lsl #2]
   1c490:	str	r3, [sp, #40]	; 0x28
   1c494:	mov	r1, r8
   1c498:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1c49c:	ldr	r3, [sp, #40]	; 0x28
   1c4a0:	ldr	r2, [sp, #44]	; 0x2c
   1c4a4:	cmp	r0, #0
   1c4a8:	beq	1bf1c <__assert_fail@plt+0xabe8>
   1c4ac:	cmn	r6, #1
   1c4b0:	beq	1bf18 <__assert_fail@plt+0xabe4>
   1c4b4:	mov	r1, r6
   1c4b8:	add	r0, sp, #116	; 0x74
   1c4bc:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1c4c0:	cmp	r0, #0
   1c4c4:	bne	1c100 <__assert_fail@plt+0xadcc>
   1c4c8:	cmp	r5, #0
   1c4cc:	beq	1c598 <__assert_fail@plt+0xb264>
   1c4d0:	ldr	r9, [r5]
   1c4d4:	ldr	r2, [r5, #4]
   1c4d8:	add	r3, r9, #1
   1c4dc:	cmp	r3, r2
   1c4e0:	ldr	sl, [sp, #112]	; 0x70
   1c4e4:	str	r3, [r5]
   1c4e8:	bne	1c514 <__assert_fail@plt+0xb1e0>
   1c4ec:	mov	r1, #48	; 0x30
   1c4f0:	ldr	r0, [r5, #8]
   1c4f4:	mul	r1, r1, r3
   1c4f8:	bl	1fd98 <__assert_fail@plt+0xea64>
   1c4fc:	cmp	r0, #0
   1c500:	beq	1bf0c <__assert_fail@plt+0xabd8>
   1c504:	ldr	r3, [r5, #4]
   1c508:	str	r0, [r5, #8]
   1c50c:	lsl	r3, r3, #1
   1c510:	str	r3, [r5, #4]
   1c514:	mov	r0, #24
   1c518:	ldr	r2, [r5, #8]
   1c51c:	mul	r9, r0, r9
   1c520:	ldr	r0, [sp, #36]	; 0x24
   1c524:	add	r3, r2, r9
   1c528:	str	sl, [r2, r9]
   1c52c:	str	r8, [r3, #4]
   1c530:	str	r3, [sp, #40]	; 0x28
   1c534:	bl	1fd58 <__assert_fail@plt+0xea24>
   1c538:	ldr	r3, [sp, #40]	; 0x28
   1c53c:	str	r0, [r3, #8]
   1c540:	ldr	r3, [r5, #8]
   1c544:	add	r3, r3, r9
   1c548:	ldr	r0, [r3, #8]
   1c54c:	cmp	r0, #0
   1c550:	beq	1bf0c <__assert_fail@plt+0xabd8>
   1c554:	ldr	r2, [sp, #24]
   1c558:	mov	r1, r4
   1c55c:	bl	110ac <memcpy@plt>
   1c560:	ldr	r3, [r5, #8]
   1c564:	ldr	r2, [sp, #24]
   1c568:	add	r3, r3, r9
   1c56c:	ldr	r1, [sp, #20]
   1c570:	ldr	r0, [r3, #8]
   1c574:	add	r0, r0, r2
   1c578:	bl	110ac <memcpy@plt>
   1c57c:	ldr	r0, [r5, #8]
   1c580:	add	r1, sp, #116	; 0x74
   1c584:	add	r0, r0, r9
   1c588:	add	r0, r0, #12
   1c58c:	bl	16894 <__assert_fail@plt+0x5560>
   1c590:	cmp	r0, #0
   1c594:	bne	1bf0c <__assert_fail@plt+0xabd8>
   1c598:	cmp	r6, #0
   1c59c:	bge	1c39c <__assert_fail@plt+0xb068>
   1c5a0:	cmn	r6, #2
   1c5a4:	bne	1bf6c <__assert_fail@plt+0xac38>
   1c5a8:	b	1bf0c <__assert_fail@plt+0xabd8>
   1c5ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c5b0:	sub	sp, sp, #156	; 0x9c
   1c5b4:	mov	fp, r0
   1c5b8:	ldr	r9, [sp, #196]	; 0xc4
   1c5bc:	mov	r5, r1
   1c5c0:	mov	sl, r2
   1c5c4:	and	r6, r3, #16777216	; 0x1000000
   1c5c8:	and	r7, r3, #32
   1c5cc:	and	r8, r3, #16
   1c5d0:	str	r3, [sp, #12]
   1c5d4:	ldrb	r3, [sl, #4]
   1c5d8:	ldr	r4, [r5]
   1c5dc:	sub	r2, r3, #1
   1c5e0:	cmp	r2, #35	; 0x23
   1c5e4:	ldrls	pc, [pc, r2, lsl #2]
   1c5e8:	b	1d0e8 <__assert_fail@plt+0xbdb4>
   1c5ec:	andeq	ip, r1, ip, ror r6
   1c5f0:	andeq	ip, r1, r0, lsl #17
   1c5f4:	andeq	sp, r1, r8, ror #1
   1c5f8:			; <UNDEFINED> instruction: 0x0001cdb4
   1c5fc:	andeq	sp, r1, r0, rrx
   1c600:	andeq	sp, r1, r8, ror #1
   1c604:	andeq	sp, r1, r8, ror #1
   1c608:	ldrdeq	ip, [r1], -r0
   1c60c:	andeq	ip, r1, r0, asr lr
   1c610:	andeq	ip, r1, r0, lsl #17
   1c614:	andeq	ip, r1, r4, lsr #28
   1c618:	muleq	r1, r8, lr
   1c61c:	andeq	sp, r1, r8, ror #1
   1c620:	andeq	sp, r1, r8, ror #1
   1c624:	andeq	sp, r1, r8, ror #1
   1c628:	andeq	sp, r1, r8, ror #1
   1c62c:	andeq	sp, r1, r8, ror #1
   1c630:	andeq	ip, r1, r4, lsr #28
   1c634:	andeq	ip, r1, r4, lsr #28
   1c638:	andeq	ip, r1, ip, asr #17
   1c63c:	andeq	sp, r1, r8, ror #1
   1c640:	andeq	sp, r1, r8, ror #1
   1c644:	andeq	ip, r1, r4, lsl lr
   1c648:	andeq	ip, r1, r0, ror lr
   1c64c:	andeq	sp, r1, r8, ror #1
   1c650:	andeq	sp, r1, r8, ror #1
   1c654:	andeq	sp, r1, r8, ror #1
   1c658:	andeq	sp, r1, r8, ror #1
   1c65c:	andeq	sp, r1, r8, ror #1
   1c660:	andeq	sp, r1, r8, ror #1
   1c664:	andeq	sp, r1, r8, ror #1
   1c668:	andeq	sp, r1, ip, lsl #1
   1c66c:	andeq	sp, r1, ip, lsl #1
   1c670:	andeq	sp, r1, r0, asr #1
   1c674:	andeq	sp, r1, r0, asr #1
   1c678:	andeq	sp, r1, r0, ror #1
   1c67c:	mov	r2, #0
   1c680:	mov	r3, sl
   1c684:	mov	r1, r2
   1c688:	mov	r0, r4
   1c68c:	bl	14510 <__assert_fail@plt+0x31dc>
   1c690:	subs	r5, r0, #0
   1c694:	bne	1c6a4 <__assert_fail@plt+0xb370>
   1c698:	mov	r3, #12
   1c69c:	str	r3, [r9]
   1c6a0:	b	1c880 <__assert_fail@plt+0xb54c>
   1c6a4:	ldr	r3, [r4, #92]	; 0x5c
   1c6a8:	cmp	r3, #1
   1c6ac:	movgt	r7, #0
   1c6b0:	movgt	r8, #16
   1c6b4:	bgt	1c7a0 <__assert_fail@plt+0xb46c>
   1c6b8:	ldr	r2, [sp, #12]
   1c6bc:	mov	r1, fp
   1c6c0:	mov	r0, sl
   1c6c4:	bl	188f8 <__assert_fail@plt+0x75c4>
   1c6c8:	ldrb	r3, [sl, #4]
   1c6cc:	cmp	r3, #23
   1c6d0:	movhi	r7, #1
   1c6d4:	ldrls	r2, [pc, #3844]	; 1d5e0 <__assert_fail@plt+0xc2ac>
   1c6d8:	sub	r8, r3, #18
   1c6dc:	clz	r8, r8
   1c6e0:	mvnls	r7, r2, lsr r3
   1c6e4:	ands	r7, r7, #1
   1c6e8:	lsr	r8, r8, #5
   1c6ec:	bne	1ce64 <__assert_fail@plt+0xbb30>
   1c6f0:	ldr	r2, [fp, #40]	; 0x28
   1c6f4:	ldm	sl, {r0, r1}
   1c6f8:	str	r2, [sp, #16]
   1c6fc:	add	r2, sp, #120	; 0x78
   1c700:	cmp	r3, #23
   1c704:	stm	r2, {r0, r1}
   1c708:	bne	1d204 <__assert_fail@plt+0xbed0>
   1c70c:	ldr	r2, [sp, #12]
   1c710:	mov	r1, sl
   1c714:	mov	r0, fp
   1c718:	bl	18914 <__assert_fail@plt+0x75e0>
   1c71c:	cmn	r0, #1
   1c720:	mov	r8, r0
   1c724:	bne	1d0e8 <__assert_fail@plt+0xbdb4>
   1c728:	ldrb	r3, [sl, #4]
   1c72c:	cmp	r3, #1
   1c730:	bne	1c744 <__assert_fail@plt+0xb410>
   1c734:	ldrb	r3, [sl]
   1c738:	cmp	r3, #44	; 0x2c
   1c73c:	moveq	r8, r7
   1c740:	beq	1d154 <__assert_fail@plt+0xbe20>
   1c744:	mov	r3, #10
   1c748:	str	r3, [r9]
   1c74c:	mov	r6, #0
   1c750:	b	1d11c <__assert_fail@plt+0xbde8>
   1c754:	ldr	r2, [sp, #12]
   1c758:	mov	r1, fp
   1c75c:	mov	r0, sl
   1c760:	bl	188f8 <__assert_fail@plt+0x75c4>
   1c764:	mov	r3, sl
   1c768:	mov	r2, r7
   1c76c:	mov	r1, #0
   1c770:	mov	r0, r4
   1c774:	bl	14510 <__assert_fail@plt+0x31dc>
   1c778:	mov	r1, r5
   1c77c:	mov	r3, r8
   1c780:	mov	r6, r0
   1c784:	mov	r2, r0
   1c788:	mov	r0, r4
   1c78c:	bl	14660 <__assert_fail@plt+0x332c>
   1c790:	cmp	r0, #0
   1c794:	cmpne	r6, #0
   1c798:	mov	r5, r0
   1c79c:	beq	1c698 <__assert_fail@plt+0xb364>
   1c7a0:	ldr	r3, [fp, #40]	; 0x28
   1c7a4:	ldr	r2, [fp, #56]	; 0x38
   1c7a8:	cmp	r2, r3
   1c7ac:	ble	1c6b8 <__assert_fail@plt+0xb384>
   1c7b0:	ldr	r2, [fp, #28]
   1c7b4:	cmp	r3, r2
   1c7b8:	beq	1c6b8 <__assert_fail@plt+0xb384>
   1c7bc:	ldr	r2, [fp, #8]
   1c7c0:	ldr	r3, [r2, r3, lsl #2]
   1c7c4:	cmn	r3, #1
   1c7c8:	beq	1c754 <__assert_fail@plt+0xb420>
   1c7cc:	b	1c6b8 <__assert_fail@plt+0xb384>
   1c7d0:	ldr	r6, [r5, #24]
   1c7d4:	mov	r1, fp
   1c7d8:	add	r3, r6, #1
   1c7dc:	str	r3, [r5, #24]
   1c7e0:	ldr	r3, [sp, #12]
   1c7e4:	mov	r0, sl
   1c7e8:	orr	r2, r3, #8388608	; 0x800000
   1c7ec:	bl	188f8 <__assert_fail@plt+0x75c4>
   1c7f0:	ldrb	r3, [sl, #4]
   1c7f4:	cmp	r3, #9
   1c7f8:	beq	1c888 <__assert_fail@plt+0xb554>
   1c7fc:	ldr	r3, [sp, #192]	; 0xc0
   1c800:	mov	r2, sl
   1c804:	add	r3, r3, #1
   1c808:	str	r3, [sp]
   1c80c:	mov	r1, r5
   1c810:	str	r9, [sp, #4]
   1c814:	ldr	r3, [sp, #12]
   1c818:	mov	r0, fp
   1c81c:	bl	1d75c <__assert_fail@plt+0xc428>
   1c820:	ldr	r2, [r9]
   1c824:	cmp	r2, #0
   1c828:	mov	r5, r0
   1c82c:	bne	1c854 <__assert_fail@plt+0xb520>
   1c830:	ldrb	r3, [sl, #4]
   1c834:	cmp	r3, #9
   1c838:	beq	1c854 <__assert_fail@plt+0xb520>
   1c83c:	cmp	r0, #0
   1c840:	beq	1c84c <__assert_fail@plt+0xb518>
   1c844:	ldr	r1, [pc, #3480]	; 1d5e4 <__assert_fail@plt+0xc2b0>
   1c848:	bl	1434c <__assert_fail@plt+0x3018>
   1c84c:	mov	r3, #8
   1c850:	str	r3, [r9]
   1c854:	ldr	r3, [r9]
   1c858:	cmp	r3, #0
   1c85c:	beq	1c88c <__assert_fail@plt+0xb558>
   1c860:	mov	r5, #0
   1c864:	ldr	r3, [r9]
   1c868:	adds	r3, r3, #0
   1c86c:	movne	r3, #1
   1c870:	cmp	r5, #0
   1c874:	movne	r3, #0
   1c878:	cmp	r3, #0
   1c87c:	beq	1c6b8 <__assert_fail@plt+0xb384>
   1c880:	mov	r5, #0
   1c884:	b	1ce64 <__assert_fail@plt+0xbb30>
   1c888:	mov	r5, #0
   1c88c:	cmp	r6, #8
   1c890:	movls	r2, #1
   1c894:	ldrls	r3, [r4, #84]	; 0x54
   1c898:	mov	r1, r5
   1c89c:	orrls	r3, r3, r2, lsl r6
   1c8a0:	mov	r0, r4
   1c8a4:	strls	r3, [r4, #84]	; 0x54
   1c8a8:	mov	r2, #0
   1c8ac:	mov	r3, #17
   1c8b0:	bl	14660 <__assert_fail@plt+0x332c>
   1c8b4:	subs	r5, r0, #0
   1c8b8:	strne	r6, [r5, #20]
   1c8bc:	bne	1c864 <__assert_fail@plt+0xb530>
   1c8c0:	mov	r3, #12
   1c8c4:	str	r3, [r9]
   1c8c8:	b	1c864 <__assert_fail@plt+0xb530>
   1c8cc:	mov	r5, #0
   1c8d0:	mov	r1, #1
   1c8d4:	mov	r0, #32
   1c8d8:	str	r5, [sp, #60]	; 0x3c
   1c8dc:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1c8e0:	mov	r1, #1
   1c8e4:	str	r0, [sp, #16]
   1c8e8:	mov	r0, #40	; 0x28
   1c8ec:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1c8f0:	ldr	r3, [sp, #16]
   1c8f4:	cmp	r0, r5
   1c8f8:	cmpne	r3, r5
   1c8fc:	moveq	r3, #1
   1c900:	movne	r3, #0
   1c904:	mov	r6, r0
   1c908:	str	r3, [sp, #36]	; 0x24
   1c90c:	bne	1c924 <__assert_fail@plt+0xb5f0>
   1c910:	ldr	r0, [sp, #16]
   1c914:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1c918:	mov	r0, r6
   1c91c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1c920:	b	1c8c0 <__assert_fail@plt+0xb58c>
   1c924:	ldr	r2, [sp, #12]
   1c928:	mov	r1, fp
   1c92c:	mov	r0, sl
   1c930:	bl	13e6c <__assert_fail@plt+0x2b38>
   1c934:	ldrb	r3, [sl, #4]
   1c938:	cmp	r3, #2
   1c93c:	str	r0, [sp, #24]
   1c940:	bne	1c950 <__assert_fail@plt+0xb61c>
   1c944:	mov	r3, #2
   1c948:	str	r3, [r9]
   1c94c:	b	1ca28 <__assert_fail@plt+0xb6f4>
   1c950:	cmp	r3, #25
   1c954:	ldrne	r3, [sp, #36]	; 0x24
   1c958:	bne	1c9b4 <__assert_fail@plt+0xb680>
   1c95c:	ldrb	r3, [r6, #16]
   1c960:	orr	r3, r3, #1
   1c964:	strb	r3, [r6, #16]
   1c968:	ldr	r3, [sp, #12]
   1c96c:	tst	r3, #256	; 0x100
   1c970:	beq	1c980 <__assert_fail@plt+0xb64c>
   1c974:	mov	r1, #10
   1c978:	ldr	r0, [sp, #16]
   1c97c:	bl	13c70 <__assert_fail@plt+0x293c>
   1c980:	ldr	r3, [fp, #40]	; 0x28
   1c984:	ldr	r2, [sp, #24]
   1c988:	mov	r1, fp
   1c98c:	add	r3, r3, r2
   1c990:	str	r3, [fp, #40]	; 0x28
   1c994:	ldr	r2, [sp, #12]
   1c998:	mov	r0, sl
   1c99c:	bl	13e6c <__assert_fail@plt+0x2b38>
   1c9a0:	ldrb	r3, [sl, #4]
   1c9a4:	cmp	r3, #2
   1c9a8:	movne	r3, #1
   1c9ac:	str	r0, [sp, #24]
   1c9b0:	beq	1c944 <__assert_fail@plt+0xb610>
   1c9b4:	str	r3, [sp, #40]	; 0x28
   1c9b8:	ldrb	r3, [sl, #4]
   1c9bc:	mov	r2, #0
   1c9c0:	str	r2, [sp, #28]
   1c9c4:	cmp	r3, #21
   1c9c8:	ldr	r2, [sp, #12]
   1c9cc:	moveq	r3, #1
   1c9d0:	strbeq	r3, [sl, #4]
   1c9d4:	mov	r3, #0
   1c9d8:	str	r3, [sp, #32]
   1c9dc:	lsr	r2, r2, #16
   1c9e0:	mov	r3, #1
   1c9e4:	and	r2, r2, r3
   1c9e8:	str	r2, [sp, #44]	; 0x2c
   1c9ec:	add	r0, sp, #152	; 0x98
   1c9f0:	mov	r7, #3
   1c9f4:	str	r7, [r0, #-88]!	; 0xffffffa8
   1c9f8:	str	r3, [sp, #4]
   1c9fc:	ldr	r3, [sp, #12]
   1ca00:	add	r2, sp, #88	; 0x58
   1ca04:	str	r2, [sp, #68]	; 0x44
   1ca08:	str	r3, [sp]
   1ca0c:	mov	r2, sl
   1ca10:	ldr	r3, [sp, #24]
   1ca14:	mov	r1, fp
   1ca18:	bl	189c4 <__assert_fail@plt+0x7690>
   1ca1c:	subs	r5, r0, #0
   1ca20:	beq	1ca3c <__assert_fail@plt+0xb708>
   1ca24:	str	r5, [r9]
   1ca28:	ldr	r0, [sp, #16]
   1ca2c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1ca30:	mov	r0, r6
   1ca34:	bl	150bc <__assert_fail@plt+0x3d88>
   1ca38:	b	1c860 <__assert_fail@plt+0xb52c>
   1ca3c:	ldr	r2, [sp, #12]
   1ca40:	mov	r1, fp
   1ca44:	mov	r0, sl
   1ca48:	bl	13e6c <__assert_fail@plt+0x2b38>
   1ca4c:	ldr	r3, [sp, #64]	; 0x40
   1ca50:	sub	r3, r3, #2
   1ca54:	bics	r3, r3, #2
   1ca58:	str	r0, [sp, #24]
   1ca5c:	beq	1cacc <__assert_fail@plt+0xb798>
   1ca60:	ldrb	r3, [sl, #4]
   1ca64:	cmp	r3, #2
   1ca68:	bne	1ca74 <__assert_fail@plt+0xb740>
   1ca6c:	mov	r3, #7
   1ca70:	b	1c948 <__assert_fail@plt+0xb614>
   1ca74:	cmp	r3, #22
   1ca78:	bne	1cacc <__assert_fail@plt+0xb798>
   1ca7c:	ldr	r3, [fp, #40]	; 0x28
   1ca80:	ldr	r2, [sp, #24]
   1ca84:	mov	r1, fp
   1ca88:	add	r3, r3, r2
   1ca8c:	str	r3, [fp, #40]	; 0x28
   1ca90:	ldr	r2, [sp, #12]
   1ca94:	add	r0, sp, #80	; 0x50
   1ca98:	bl	13e6c <__assert_fail@plt+0x2b38>
   1ca9c:	ldrb	r2, [sp, #84]	; 0x54
   1caa0:	cmp	r2, #2
   1caa4:	mov	r3, r0
   1caa8:	beq	1ca6c <__assert_fail@plt+0xb738>
   1caac:	cmp	r2, #21
   1cab0:	bne	1d3f0 <__assert_fail@plt+0xc0bc>
   1cab4:	ldr	r3, [fp, #40]	; 0x28
   1cab8:	ldr	r2, [sp, #24]
   1cabc:	sub	r3, r3, r2
   1cac0:	str	r3, [fp, #40]	; 0x28
   1cac4:	mov	r3, #1
   1cac8:	strb	r3, [sl, #4]
   1cacc:	ldr	r3, [sp, #64]	; 0x40
   1cad0:	cmp	r3, #4
   1cad4:	ldrls	pc, [pc, r3, lsl #2]
   1cad8:	b	1cc90 <__assert_fail@plt+0xb95c>
   1cadc:			; <UNDEFINED> instruction: 0x0001cbb8
   1cae0:	andeq	ip, r1, r0, ror #23
   1cae4:	andeq	ip, r1, r0, lsr ip
   1cae8:	andeq	ip, r1, r0, lsr ip
   1caec:	andeq	ip, r1, r0, ror #24
   1caf0:	ldr	r2, [sp, #12]
   1caf4:	mov	r1, fp
   1caf8:	mov	r0, sl
   1cafc:	bl	13e6c <__assert_fail@plt+0x2b38>
   1cb00:	ldr	r8, [sp, #64]	; 0x40
   1cb04:	sub	r3, r8, #2
   1cb08:	bics	r3, r3, #2
   1cb0c:	str	r0, [sp, #24]
   1cb10:	beq	1cb24 <__assert_fail@plt+0xb7f0>
   1cb14:	ldr	r7, [sp, #72]	; 0x48
   1cb18:	sub	r3, r7, #2
   1cb1c:	bics	r3, r3, #2
   1cb20:	bne	1d430 <__assert_fail@plt+0xc0fc>
   1cb24:	mov	r3, #11
   1cb28:	b	1d580 <__assert_fail@plt+0xc24c>
   1cb2c:	ldr	r0, [sp, #68]	; 0x44
   1cb30:	bl	111fc <strlen@plt>
   1cb34:	cmp	r0, #1
   1cb38:	bls	1d5d4 <__assert_fail@plt+0xc2a0>
   1cb3c:	mov	r3, #3
   1cb40:	b	1d580 <__assert_fail@plt+0xc24c>
   1cb44:	stmib	r6, {r2, r3}
   1cb48:	str	r8, [sp, #32]
   1cb4c:	ldr	r2, [r6, #32]
   1cb50:	ldr	r3, [r6, #4]
   1cb54:	str	r5, [r3, r2, lsl #2]
   1cb58:	ldr	r2, [r6, #8]
   1cb5c:	ldr	r3, [r6, #32]
   1cb60:	add	r1, r3, #1
   1cb64:	str	r1, [r6, #32]
   1cb68:	str	r7, [r2, r3, lsl #2]
   1cb6c:	mov	r8, #0
   1cb70:	cmp	r5, r8
   1cb74:	movhi	r3, #0
   1cb78:	movls	r3, #1
   1cb7c:	cmp	r7, r8
   1cb80:	movcc	r3, #0
   1cb84:	cmp	r3, #0
   1cb88:	beq	1cb98 <__assert_fail@plt+0xb864>
   1cb8c:	mov	r1, r8
   1cb90:	ldr	r0, [sp, #16]
   1cb94:	bl	13c70 <__assert_fail@plt+0x293c>
   1cb98:	add	r8, r8, #1
   1cb9c:	cmp	r8, #256	; 0x100
   1cba0:	bne	1cb70 <__assert_fail@plt+0xb83c>
   1cba4:	ldr	r3, [sp, #20]
   1cba8:	cmp	r3, #0
   1cbac:	str	r3, [r9]
   1cbb0:	beq	1cbc4 <__assert_fail@plt+0xb890>
   1cbb4:	b	1ca28 <__assert_fail@plt+0xb6f4>
   1cbb8:	ldrb	r1, [sp, #68]	; 0x44
   1cbbc:	ldr	r0, [sp, #16]
   1cbc0:	bl	13c70 <__assert_fail@plt+0x293c>
   1cbc4:	ldrb	r3, [sl, #4]
   1cbc8:	cmp	r3, #2
   1cbcc:	beq	1ca6c <__assert_fail@plt+0xb738>
   1cbd0:	cmp	r3, #21
   1cbd4:	beq	1cc90 <__assert_fail@plt+0xb95c>
   1cbd8:	ldr	r3, [sp, #36]	; 0x24
   1cbdc:	b	1c9ec <__assert_fail@plt+0xb6b8>
   1cbe0:	ldr	r3, [r6, #20]
   1cbe4:	ldr	r2, [sp, #28]
   1cbe8:	cmp	r3, r2
   1cbec:	bne	1cc14 <__assert_fail@plt+0xb8e0>
   1cbf0:	lsl	r3, r2, #1
   1cbf4:	add	r3, r3, #1
   1cbf8:	ldr	r0, [r6]
   1cbfc:	lsl	r1, r3, #2
   1cc00:	str	r3, [sp, #28]
   1cc04:	bl	1fd98 <__assert_fail@plt+0xea64>
   1cc08:	cmp	r0, #0
   1cc0c:	beq	1d5cc <__assert_fail@plt+0xc298>
   1cc10:	str	r0, [r6]
   1cc14:	ldr	r3, [r6, #20]
   1cc18:	ldr	r2, [r6]
   1cc1c:	add	r1, r3, #1
   1cc20:	str	r1, [r6, #20]
   1cc24:	ldr	r1, [sp, #68]	; 0x44
   1cc28:	str	r1, [r2, r3, lsl #2]
   1cc2c:	b	1cbc4 <__assert_fail@plt+0xb890>
   1cc30:	ldr	r7, [sp, #68]	; 0x44
   1cc34:	mov	r0, r7
   1cc38:	bl	111fc <strlen@plt>
   1cc3c:	cmp	r0, #1
   1cc40:	movne	r5, #3
   1cc44:	bne	1cc54 <__assert_fail@plt+0xb920>
   1cc48:	ldrb	r1, [r7]
   1cc4c:	ldr	r0, [sp, #16]
   1cc50:	bl	13c70 <__assert_fail@plt+0x293c>
   1cc54:	str	r5, [r9]
   1cc58:	cmp	r5, #0
   1cc5c:	b	1cbb0 <__assert_fail@plt+0xb87c>
   1cc60:	ldr	r3, [sp, #12]
   1cc64:	mov	r2, r6
   1cc68:	str	r3, [sp, #4]
   1cc6c:	ldr	r3, [sp, #68]	; 0x44
   1cc70:	ldr	r1, [sp, #16]
   1cc74:	str	r3, [sp]
   1cc78:	ldr	r0, [fp, #64]	; 0x40
   1cc7c:	add	r3, sp, #60	; 0x3c
   1cc80:	bl	159f0 <__assert_fail@plt+0x46bc>
   1cc84:	str	r0, [r9]
   1cc88:	cmp	r0, #0
   1cc8c:	b	1cbb0 <__assert_fail@plt+0xb87c>
   1cc90:	ldr	r3, [fp, #40]	; 0x28
   1cc94:	ldr	r2, [sp, #24]
   1cc98:	add	r3, r3, r2
   1cc9c:	str	r3, [fp, #40]	; 0x28
   1cca0:	ldr	r3, [sp, #40]	; 0x28
   1cca4:	cmp	r3, #0
   1cca8:	beq	1ccb4 <__assert_fail@plt+0xb980>
   1ccac:	ldr	r0, [sp, #16]
   1ccb0:	bl	13cd4 <__assert_fail@plt+0x29a0>
   1ccb4:	ldr	r3, [r4, #92]	; 0x5c
   1ccb8:	cmp	r3, #1
   1ccbc:	ble	1cccc <__assert_fail@plt+0xb998>
   1ccc0:	ldr	r1, [r4, #60]	; 0x3c
   1ccc4:	ldr	r0, [sp, #16]
   1ccc8:	bl	13d1c <__assert_fail@plt+0x29e8>
   1cccc:	ldr	r3, [r6, #20]
   1ccd0:	cmp	r3, #0
   1ccd4:	bne	1cd20 <__assert_fail@plt+0xb9ec>
   1ccd8:	ldr	r3, [r6, #24]
   1ccdc:	cmp	r3, #0
   1cce0:	bne	1cd20 <__assert_fail@plt+0xb9ec>
   1cce4:	ldr	r3, [r6, #28]
   1cce8:	cmp	r3, #0
   1ccec:	bne	1cd20 <__assert_fail@plt+0xb9ec>
   1ccf0:	ldr	r3, [r6, #32]
   1ccf4:	cmp	r3, #0
   1ccf8:	bne	1cd20 <__assert_fail@plt+0xb9ec>
   1ccfc:	ldr	r3, [r4, #92]	; 0x5c
   1cd00:	cmp	r3, #1
   1cd04:	ble	1cd84 <__assert_fail@plt+0xba50>
   1cd08:	ldr	r3, [r6, #36]	; 0x24
   1cd0c:	cmp	r3, #0
   1cd10:	bne	1cd20 <__assert_fail@plt+0xb9ec>
   1cd14:	ldrb	r3, [r6, #16]
   1cd18:	tst	r3, #1
   1cd1c:	beq	1cd84 <__assert_fail@plt+0xba50>
   1cd20:	ldrb	r3, [r4, #88]	; 0x58
   1cd24:	mov	r2, #0
   1cd28:	mov	r1, r2
   1cd2c:	orr	r3, r3, #2
   1cd30:	strb	r3, [r4, #88]	; 0x58
   1cd34:	mov	r3, #6
   1cd38:	strb	r3, [sp, #124]	; 0x7c
   1cd3c:	mov	r0, r4
   1cd40:	add	r3, sp, #120	; 0x78
   1cd44:	str	r6, [sp, #120]	; 0x78
   1cd48:	bl	14510 <__assert_fail@plt+0x31dc>
   1cd4c:	subs	r5, r0, #0
   1cd50:	beq	1d5cc <__assert_fail@plt+0xc298>
   1cd54:	ldr	r3, [sp, #16]
   1cd58:	ldr	r2, [sp, #16]
   1cd5c:	sub	r3, r3, #4
   1cd60:	add	r2, r2, #28
   1cd64:	ldr	r1, [r3, #4]!
   1cd68:	cmp	r1, #0
   1cd6c:	bne	1d588 <__assert_fail@plt+0xc254>
   1cd70:	cmp	r2, r3
   1cd74:	bne	1cd64 <__assert_fail@plt+0xba30>
   1cd78:	ldr	r0, [sp, #16]
   1cd7c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1cd80:	b	1c864 <__assert_fail@plt+0xb530>
   1cd84:	mov	r0, r6
   1cd88:	bl	150bc <__assert_fail@plt+0x3d88>
   1cd8c:	mov	r3, #3
   1cd90:	strb	r3, [sp, #124]	; 0x7c
   1cd94:	ldr	r3, [sp, #16]
   1cd98:	mov	r2, #0
   1cd9c:	str	r3, [sp, #120]	; 0x78
   1cda0:	mov	r1, r2
   1cda4:	add	r3, sp, #120	; 0x78
   1cda8:	mov	r0, r4
   1cdac:	bl	14510 <__assert_fail@plt+0x31dc>
   1cdb0:	b	1d5c4 <__assert_fail@plt+0xc290>
   1cdb4:	ldr	r2, [sl]
   1cdb8:	mov	r3, #1
   1cdbc:	ldr	r5, [r4, #84]	; 0x54
   1cdc0:	lsl	r3, r3, r2
   1cdc4:	ands	r5, r3, r5
   1cdc8:	moveq	r3, #6
   1cdcc:	beq	1ce60 <__assert_fail@plt+0xbb2c>
   1cdd0:	ldr	r2, [r4, #80]	; 0x50
   1cdd4:	mov	r0, r4
   1cdd8:	orr	r3, r2, r3
   1cddc:	mov	r2, #0
   1cde0:	str	r3, [r4, #80]	; 0x50
   1cde4:	mov	r1, r2
   1cde8:	mov	r3, sl
   1cdec:	bl	14510 <__assert_fail@plt+0x31dc>
   1cdf0:	subs	r5, r0, #0
   1cdf4:	ldrne	r3, [r4, #76]	; 0x4c
   1cdf8:	addne	r3, r3, #1
   1cdfc:	strne	r3, [r4, #76]	; 0x4c
   1ce00:	beq	1c698 <__assert_fail@plt+0xb364>
   1ce04:	ldrb	r3, [r4, #88]	; 0x58
   1ce08:	orr	r3, r3, #2
   1ce0c:	strb	r3, [r4, #88]	; 0x58
   1ce10:	b	1c6b8 <__assert_fail@plt+0xb384>
   1ce14:	cmp	r6, #0
   1ce18:	beq	1ce24 <__assert_fail@plt+0xbaf0>
   1ce1c:	mov	r3, #13
   1ce20:	b	1c69c <__assert_fail@plt+0xb368>
   1ce24:	cmp	r7, #0
   1ce28:	bne	1ce1c <__assert_fail@plt+0xbae8>
   1ce2c:	cmp	r8, #0
   1ce30:	beq	1ce48 <__assert_fail@plt+0xbb14>
   1ce34:	ldr	r2, [sp, #12]
   1ce38:	mov	r1, fp
   1ce3c:	mov	r0, sl
   1ce40:	bl	188f8 <__assert_fail@plt+0x75c4>
   1ce44:	b	1c5d4 <__assert_fail@plt+0xb2a0>
   1ce48:	cmp	r3, #9
   1ce4c:	bne	1ce70 <__assert_fail@plt+0xbb3c>
   1ce50:	ldr	r3, [sp, #12]
   1ce54:	ands	r5, r3, #131072	; 0x20000
   1ce58:	bne	1ce70 <__assert_fail@plt+0xbb3c>
   1ce5c:	mov	r3, #16
   1ce60:	str	r3, [r9]
   1ce64:	mov	r0, r5
   1ce68:	add	sp, sp, #156	; 0x9c
   1ce6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce70:	mov	r3, #1
   1ce74:	mov	r2, #0
   1ce78:	strb	r3, [sl, #4]
   1ce7c:	mov	r1, r2
   1ce80:	mov	r3, sl
   1ce84:	mov	r0, r4
   1ce88:	bl	14510 <__assert_fail@plt+0x31dc>
   1ce8c:	subs	r5, r0, #0
   1ce90:	bne	1c6b8 <__assert_fail@plt+0xb384>
   1ce94:	b	1c698 <__assert_fail@plt+0xb364>
   1ce98:	ldr	r2, [sl]
   1ce9c:	ldr	r3, [pc, #1860]	; 1d5e8 <__assert_fail@plt+0xc2b4>
   1cea0:	and	r3, r3, r2
   1cea4:	cmp	r3, #0
   1cea8:	beq	1cef8 <__assert_fail@plt+0xbbc4>
   1ceac:	ldrb	r3, [r4, #88]	; 0x58
   1ceb0:	ands	r5, r3, #16
   1ceb4:	bne	1cef8 <__assert_fail@plt+0xbbc4>
   1ceb8:	orr	r3, r3, #16
   1cebc:	ands	r1, r3, #8
   1cec0:	strb	r3, [r4, #88]	; 0x58
   1cec4:	bne	1cff0 <__assert_fail@plt+0xbcbc>
   1cec8:	ldr	r2, [pc, #1820]	; 1d5ec <__assert_fail@plt+0xc2b8>
   1cecc:	tst	r3, #4
   1ced0:	str	r2, [r4, #100]	; 0x64
   1ced4:	mvn	r2, #2013265921	; 0x78000001
   1ced8:	str	r2, [r4, #104]	; 0x68
   1cedc:	mvn	r2, #-134217727	; 0xf8000001
   1cee0:	str	r1, [r4, #96]	; 0x60
   1cee4:	str	r2, [r4, #108]	; 0x6c
   1cee8:	beq	1d010 <__assert_fail@plt+0xbcdc>
   1ceec:	mov	r2, #16
   1cef0:	add	r0, r4, #112	; 0x70
   1cef4:	bl	11238 <memset@plt>
   1cef8:	ldr	r3, [sl]
   1cefc:	sub	r2, r3, #256	; 0x100
   1cf00:	bics	r2, r2, #256	; 0x100
   1cf04:	bne	1d040 <__assert_fail@plt+0xbd0c>
   1cf08:	cmp	r3, #256	; 0x100
   1cf0c:	bne	1d01c <__assert_fail@plt+0xbce8>
   1cf10:	mov	r3, #6
   1cf14:	str	r3, [sl]
   1cf18:	mov	r1, r2
   1cf1c:	mov	r3, sl
   1cf20:	mov	r0, r4
   1cf24:	bl	14510 <__assert_fail@plt+0x31dc>
   1cf28:	mov	r3, #9
   1cf2c:	mov	r5, r0
   1cf30:	mov	r2, #0
   1cf34:	mov	r1, r2
   1cf38:	str	r3, [sl]
   1cf3c:	mov	r0, r4
   1cf40:	mov	r3, sl
   1cf44:	bl	14510 <__assert_fail@plt+0x31dc>
   1cf48:	mov	r1, r5
   1cf4c:	mov	r3, #10
   1cf50:	mov	r2, r0
   1cf54:	mov	r6, r0
   1cf58:	mov	r0, r4
   1cf5c:	bl	14660 <__assert_fail@plt+0x332c>
   1cf60:	cmp	r6, #0
   1cf64:	cmpne	r5, #0
   1cf68:	moveq	r2, #1
   1cf6c:	movne	r2, #0
   1cf70:	cmp	r0, #0
   1cf74:	orreq	r2, r2, #1
   1cf78:	cmp	r2, #0
   1cf7c:	mov	r5, r0
   1cf80:	bne	1c698 <__assert_fail@plt+0xb364>
   1cf84:	ldr	r2, [sp, #12]
   1cf88:	mov	r1, fp
   1cf8c:	mov	r0, sl
   1cf90:	bl	188f8 <__assert_fail@plt+0x75c4>
   1cf94:	b	1ce64 <__assert_fail@plt+0xbb30>
   1cf98:	ldrh	r7, [ip], #2
   1cf9c:	add	r0, r5, r2
   1cfa0:	lsr	r7, r7, #3
   1cfa4:	cmp	r0, #95	; 0x5f
   1cfa8:	movne	r0, r7
   1cfac:	orreq	r0, r7, #1
   1cfb0:	tst	r0, #1
   1cfb4:	ldrne	r0, [r3]
   1cfb8:	orrne	r0, r0, lr, lsl r2
   1cfbc:	add	r2, r2, #1
   1cfc0:	strne	r0, [r3]
   1cfc4:	cmp	r2, #32
   1cfc8:	bne	1cf98 <__assert_fail@plt+0xbc64>
   1cfcc:	add	r6, r6, #1
   1cfd0:	cmp	r6, #8
   1cfd4:	add	r5, r5, #32
   1cfd8:	add	r1, r1, #64	; 0x40
   1cfdc:	add	r3, r3, #4
   1cfe0:	beq	1cef8 <__assert_fail@plt+0xbbc4>
   1cfe4:	mov	ip, r1
   1cfe8:	mov	r2, #0
   1cfec:	b	1cf98 <__assert_fail@plt+0xbc64>
   1cff0:	mov	r6, r5
   1cff4:	bl	111e4 <__ctype_b_loc@plt>
   1cff8:	add	r3, r6, #24
   1cffc:	mov	lr, #1
   1d000:	add	r3, r4, r3, lsl #2
   1d004:	ldr	r1, [r0]
   1d008:	add	r1, r1, r5, lsl #1
   1d00c:	b	1cfe4 <__assert_fail@plt+0xbcb0>
   1d010:	mov	r5, #128	; 0x80
   1d014:	mov	r6, #4
   1d018:	b	1cff4 <__assert_fail@plt+0xbcc0>
   1d01c:	mov	r3, #5
   1d020:	str	r3, [sl]
   1d024:	mov	r1, r2
   1d028:	mov	r3, sl
   1d02c:	mov	r0, r4
   1d030:	bl	14510 <__assert_fail@plt+0x31dc>
   1d034:	mov	r3, #10
   1d038:	mov	r5, r0
   1d03c:	b	1cf30 <__assert_fail@plt+0xbbfc>
   1d040:	mov	r2, #0
   1d044:	mov	r3, sl
   1d048:	mov	r1, r2
   1d04c:	mov	r0, r4
   1d050:	bl	14510 <__assert_fail@plt+0x31dc>
   1d054:	subs	r5, r0, #0
   1d058:	bne	1cf84 <__assert_fail@plt+0xbc50>
   1d05c:	b	1c698 <__assert_fail@plt+0xb364>
   1d060:	mov	r2, #0
   1d064:	mov	r3, sl
   1d068:	mov	r1, r2
   1d06c:	mov	r0, r4
   1d070:	bl	14510 <__assert_fail@plt+0x31dc>
   1d074:	subs	r5, r0, #0
   1d078:	beq	1c698 <__assert_fail@plt+0xb364>
   1d07c:	ldr	r3, [r4, #92]	; 0x5c
   1d080:	cmp	r3, #1
   1d084:	bgt	1ce04 <__assert_fail@plt+0xbad0>
   1d088:	b	1c6b8 <__assert_fail@plt+0xb384>
   1d08c:	sub	r3, r3, #33	; 0x21
   1d090:	clz	r3, r3
   1d094:	lsr	r3, r3, #5
   1d098:	str	r3, [sp]
   1d09c:	ldr	r2, [pc, #1356]	; 1d5f0 <__assert_fail@plt+0xc2bc>
   1d0a0:	ldr	r3, [pc, #1356]	; 1d5f4 <__assert_fail@plt+0xc2c0>
   1d0a4:	str	r9, [sp, #4]
   1d0a8:	ldr	r1, [fp, #64]	; 0x40
   1d0ac:	mov	r0, r4
   1d0b0:	bl	16168 <__assert_fail@plt+0x4e34>
   1d0b4:	ldr	r3, [r9]
   1d0b8:	mov	r5, r0
   1d0bc:	b	1c868 <__assert_fail@plt+0xb534>
   1d0c0:	sub	r3, r3, #35	; 0x23
   1d0c4:	clz	r3, r3
   1d0c8:	lsr	r3, r3, #5
   1d0cc:	str	r3, [sp]
   1d0d0:	str	r9, [sp, #4]
   1d0d4:	ldr	r3, [pc, #1308]	; 1d5f8 <__assert_fail@plt+0xc2c4>
   1d0d8:	ldr	r2, [pc, #1308]	; 1d5fc <__assert_fail@plt+0xc2c8>
   1d0dc:	b	1d0a8 <__assert_fail@plt+0xbd74>
   1d0e0:	mov	r3, #5
   1d0e4:	b	1c69c <__assert_fail@plt+0xb368>
   1d0e8:	cmn	r0, #2
   1d0ec:	bne	1d154 <__assert_fail@plt+0xbe20>
   1d0f0:	cmn	r8, #2
   1d0f4:	cmnne	r7, #2
   1d0f8:	bne	1d1bc <__assert_fail@plt+0xbe88>
   1d0fc:	ldr	r3, [sp, #12]
   1d100:	ands	r6, r3, #2097152	; 0x200000
   1d104:	bne	1d198 <__assert_fail@plt+0xbe64>
   1d108:	ldrb	r3, [sl, #4]
   1d10c:	cmp	r3, #2
   1d110:	moveq	r3, #9
   1d114:	streq	r3, [r9]
   1d118:	bne	1c744 <__assert_fail@plt+0xb410>
   1d11c:	ldr	r2, [r9]
   1d120:	adds	r2, r2, #0
   1d124:	movne	r2, #1
   1d128:	cmp	r6, #0
   1d12c:	movne	r2, #0
   1d130:	cmp	r2, #0
   1d134:	beq	1d3b4 <__assert_fail@plt+0xc080>
   1d138:	cmp	r5, #0
   1d13c:	beq	1c880 <__assert_fail@plt+0xb54c>
   1d140:	mov	r2, #0
   1d144:	ldr	r1, [pc, #1176]	; 1d5e4 <__assert_fail@plt+0xc2b0>
   1d148:	mov	r0, r5
   1d14c:	bl	1434c <__assert_fail@plt+0x3018>
   1d150:	b	1c880 <__assert_fail@plt+0xb54c>
   1d154:	ldrb	r3, [sl, #4]
   1d158:	cmp	r3, #24
   1d15c:	moveq	r7, r8
   1d160:	beq	1d0f0 <__assert_fail@plt+0xbdbc>
   1d164:	cmp	r3, #1
   1d168:	bne	1d190 <__assert_fail@plt+0xbe5c>
   1d16c:	ldrb	r3, [sl]
   1d170:	cmp	r3, #44	; 0x2c
   1d174:	bne	1d190 <__assert_fail@plt+0xbe5c>
   1d178:	ldr	r2, [sp, #12]
   1d17c:	mov	r1, sl
   1d180:	mov	r0, fp
   1d184:	bl	18914 <__assert_fail@plt+0x75e0>
   1d188:	mov	r7, r0
   1d18c:	b	1d0f0 <__assert_fail@plt+0xbdbc>
   1d190:	mvn	r7, #1
   1d194:	b	1d0f0 <__assert_fail@plt+0xbdbc>
   1d198:	ldr	r3, [sp, #16]
   1d19c:	str	r3, [fp, #40]	; 0x28
   1d1a0:	add	r3, sp, #120	; 0x78
   1d1a4:	ldm	r3, {r0, r1}
   1d1a8:	mov	r3, #1
   1d1ac:	stm	sl, {r0, r1}
   1d1b0:	strb	r3, [sl, #4]
   1d1b4:	mov	r6, r5
   1d1b8:	b	1d11c <__assert_fail@plt+0xbde8>
   1d1bc:	cmn	r7, #1
   1d1c0:	cmpne	r7, r8
   1d1c4:	blt	1c744 <__assert_fail@plt+0xb410>
   1d1c8:	ldrb	r3, [sl, #4]
   1d1cc:	cmp	r3, #24
   1d1d0:	bne	1c744 <__assert_fail@plt+0xb410>
   1d1d4:	cmn	r7, #1
   1d1d8:	ldr	r3, [pc, #1056]	; 1d600 <__assert_fail@plt+0xc2cc>
   1d1dc:	bne	1d1fc <__assert_fail@plt+0xbec8>
   1d1e0:	cmp	r8, r3
   1d1e4:	movle	r3, #0
   1d1e8:	movgt	r3, #1
   1d1ec:	cmp	r3, #0
   1d1f0:	beq	1d210 <__assert_fail@plt+0xbedc>
   1d1f4:	mov	r3, #15
   1d1f8:	b	1c748 <__assert_fail@plt+0xb414>
   1d1fc:	cmp	r7, r3
   1d200:	b	1d1e4 <__assert_fail@plt+0xbeb0>
   1d204:	cmp	r3, #19
   1d208:	mvnne	r7, #0
   1d20c:	moveq	r7, #1
   1d210:	ldr	r2, [sp, #12]
   1d214:	mov	r1, fp
   1d218:	mov	r0, sl
   1d21c:	bl	188f8 <__assert_fail@plt+0x75c4>
   1d220:	cmp	r5, #0
   1d224:	beq	1d1b4 <__assert_fail@plt+0xbe80>
   1d228:	orrs	r6, r8, r7
   1d22c:	bne	1d244 <__assert_fail@plt+0xbf10>
   1d230:	mov	r2, r6
   1d234:	ldr	r1, [pc, #936]	; 1d5e4 <__assert_fail@plt+0xc2b0>
   1d238:	mov	r0, r5
   1d23c:	bl	1434c <__assert_fail@plt+0x3018>
   1d240:	b	1d11c <__assert_fail@plt+0xbde8>
   1d244:	cmp	r8, #0
   1d248:	movgt	r6, r5
   1d24c:	strgt	r5, [sp, #16]
   1d250:	movgt	r3, #2
   1d254:	bgt	1d320 <__assert_fail@plt+0xbfec>
   1d258:	mov	r3, #0
   1d25c:	str	r5, [sp, #16]
   1d260:	str	r3, [sp, #20]
   1d264:	ldr	r3, [sp, #16]
   1d268:	ldrb	r3, [r3, #24]
   1d26c:	cmp	r3, #17
   1d270:	bne	1d288 <__assert_fail@plt+0xbf54>
   1d274:	ldr	r3, [sp, #16]
   1d278:	ldr	r1, [pc, #900]	; 1d604 <__assert_fail@plt+0xc2d0>
   1d27c:	mov	r0, r3
   1d280:	ldr	r2, [r3, #20]
   1d284:	bl	1434c <__assert_fail@plt+0x3018>
   1d288:	cmn	r7, #1
   1d28c:	movne	r3, #10
   1d290:	moveq	r3, #11
   1d294:	mov	r2, #0
   1d298:	ldr	r1, [sp, #16]
   1d29c:	mov	r0, r4
   1d2a0:	bl	14660 <__assert_fail@plt+0x332c>
   1d2a4:	subs	r6, r0, #0
   1d2a8:	addne	r8, r8, #2
   1d2ac:	beq	1d354 <__assert_fail@plt+0xc020>
   1d2b0:	cmp	r7, r8
   1d2b4:	bge	1d35c <__assert_fail@plt+0xc028>
   1d2b8:	ldr	r3, [sp, #20]
   1d2bc:	cmp	r3, #0
   1d2c0:	beq	1d11c <__assert_fail@plt+0xbde8>
   1d2c4:	mov	r2, r6
   1d2c8:	mov	r3, #16
   1d2cc:	ldr	r1, [sp, #20]
   1d2d0:	mov	r0, r4
   1d2d4:	bl	14660 <__assert_fail@plt+0x332c>
   1d2d8:	mov	r6, r0
   1d2dc:	b	1d11c <__assert_fail@plt+0xbde8>
   1d2e0:	mov	r1, r4
   1d2e4:	ldr	r0, [sp, #16]
   1d2e8:	bl	145bc <__assert_fail@plt+0x3288>
   1d2ec:	mov	r3, #16
   1d2f0:	mov	r1, r6
   1d2f4:	str	r0, [sp, #16]
   1d2f8:	mov	r2, r0
   1d2fc:	mov	r0, r4
   1d300:	bl	14660 <__assert_fail@plt+0x332c>
   1d304:	ldr	r3, [sp, #16]
   1d308:	cmp	r0, #0
   1d30c:	cmpne	r3, #0
   1d310:	mov	r6, r0
   1d314:	beq	1d354 <__assert_fail@plt+0xc020>
   1d318:	ldr	r3, [sp, #20]
   1d31c:	add	r3, r3, #1
   1d320:	str	r3, [sp, #20]
   1d324:	ldr	r3, [sp, #20]
   1d328:	cmp	r8, r3
   1d32c:	bge	1d2e0 <__assert_fail@plt+0xbfac>
   1d330:	cmp	r8, r7
   1d334:	beq	1d11c <__assert_fail@plt+0xbde8>
   1d338:	mov	r1, r4
   1d33c:	ldr	r0, [sp, #16]
   1d340:	bl	145bc <__assert_fail@plt+0x3288>
   1d344:	subs	r3, r0, #0
   1d348:	str	r3, [sp, #16]
   1d34c:	strne	r6, [sp, #20]
   1d350:	bne	1d264 <__assert_fail@plt+0xbf30>
   1d354:	mov	r3, #12
   1d358:	b	1c748 <__assert_fail@plt+0xb414>
   1d35c:	mov	r1, r4
   1d360:	ldr	r0, [sp, #16]
   1d364:	bl	145bc <__assert_fail@plt+0x3288>
   1d368:	mov	r3, #16
   1d36c:	mov	r1, r6
   1d370:	str	r0, [sp, #16]
   1d374:	mov	r2, r0
   1d378:	mov	r0, r4
   1d37c:	bl	14660 <__assert_fail@plt+0x332c>
   1d380:	ldr	r3, [sp, #16]
   1d384:	cmp	r0, #0
   1d388:	cmpne	r3, #0
   1d38c:	mov	r1, r0
   1d390:	beq	1d354 <__assert_fail@plt+0xc020>
   1d394:	mov	r3, #10
   1d398:	mov	r2, #0
   1d39c:	mov	r0, r4
   1d3a0:	bl	14660 <__assert_fail@plt+0x332c>
   1d3a4:	subs	r6, r0, #0
   1d3a8:	beq	1d354 <__assert_fail@plt+0xc020>
   1d3ac:	add	r8, r8, #1
   1d3b0:	b	1d2b0 <__assert_fail@plt+0xbf7c>
   1d3b4:	ldr	r3, [sp, #12]
   1d3b8:	tst	r3, #16777216	; 0x1000000
   1d3bc:	beq	1d3e8 <__assert_fail@plt+0xc0b4>
   1d3c0:	ldrb	r3, [sl, #4]
   1d3c4:	cmp	r3, #23
   1d3c8:	cmpne	r3, #11
   1d3cc:	bne	1d3e8 <__assert_fail@plt+0xc0b4>
   1d3d0:	cmp	r6, #0
   1d3d4:	beq	1ce1c <__assert_fail@plt+0xbae8>
   1d3d8:	ldr	r1, [pc, #516]	; 1d5e4 <__assert_fail@plt+0xc2b0>
   1d3dc:	mov	r0, r6
   1d3e0:	bl	1434c <__assert_fail@plt+0x3018>
   1d3e4:	b	1ce1c <__assert_fail@plt+0xbae8>
   1d3e8:	mov	r5, r6
   1d3ec:	b	1c6c8 <__assert_fail@plt+0xb394>
   1d3f0:	add	r2, sp, #120	; 0x78
   1d3f4:	add	r0, sp, #152	; 0x98
   1d3f8:	str	r2, [sp, #76]	; 0x4c
   1d3fc:	mov	r2, #1
   1d400:	str	r7, [r0, #-80]!	; 0xffffffb0
   1d404:	str	r2, [sp, #4]
   1d408:	ldr	r2, [sp, #12]
   1d40c:	mov	r1, fp
   1d410:	str	r2, [sp]
   1d414:	add	r2, sp, #80	; 0x50
   1d418:	bl	189c4 <__assert_fail@plt+0x7690>
   1d41c:	subs	r3, r0, #0
   1d420:	str	r3, [sp, #20]
   1d424:	beq	1caf0 <__assert_fail@plt+0xb7bc>
   1d428:	ldr	r3, [sp, #20]
   1d42c:	b	1c948 <__assert_fail@plt+0xb614>
   1d430:	cmp	r8, #3
   1d434:	beq	1cb2c <__assert_fail@plt+0xb7f8>
   1d438:	cmp	r7, #3
   1d43c:	bne	1d450 <__assert_fail@plt+0xc11c>
   1d440:	ldr	r0, [sp, #76]	; 0x4c
   1d444:	bl	111fc <strlen@plt>
   1d448:	cmp	r0, #1
   1d44c:	bhi	1cb3c <__assert_fail@plt+0xb808>
   1d450:	cmp	r8, #0
   1d454:	ldrbeq	r5, [sp, #68]	; 0x44
   1d458:	beq	1d470 <__assert_fail@plt+0xc13c>
   1d45c:	cmp	r8, #3
   1d460:	movne	r5, #0
   1d464:	bne	1d470 <__assert_fail@plt+0xc13c>
   1d468:	ldr	r3, [sp, #68]	; 0x44
   1d46c:	ldrb	r5, [r3]
   1d470:	cmp	r7, #0
   1d474:	ldrbeq	r7, [sp, #76]	; 0x4c
   1d478:	beq	1d48c <__assert_fail@plt+0xc158>
   1d47c:	cmp	r7, #3
   1d480:	movne	r7, #0
   1d484:	ldreq	r3, [sp, #76]	; 0x4c
   1d488:	ldrbeq	r7, [r3]
   1d48c:	cmp	r8, #0
   1d490:	cmpne	r8, #3
   1d494:	ldrne	r5, [sp, #68]	; 0x44
   1d498:	bne	1d4b4 <__assert_fail@plt+0xc180>
   1d49c:	ldr	r3, [r4, #92]	; 0x5c
   1d4a0:	cmp	r3, #1
   1d4a4:	ble	1d4b4 <__assert_fail@plt+0xc180>
   1d4a8:	mov	r0, r5
   1d4ac:	bl	11244 <btowc@plt>
   1d4b0:	mov	r5, r0
   1d4b4:	ldr	r3, [sp, #72]	; 0x48
   1d4b8:	cmp	r3, #3
   1d4bc:	cmpne	r3, #0
   1d4c0:	ldrne	r7, [sp, #76]	; 0x4c
   1d4c4:	bne	1d4e0 <__assert_fail@plt+0xc1ac>
   1d4c8:	ldr	r3, [r4, #92]	; 0x5c
   1d4cc:	cmp	r3, #1
   1d4d0:	ble	1d4e0 <__assert_fail@plt+0xc1ac>
   1d4d4:	mov	r0, r7
   1d4d8:	bl	11244 <btowc@plt>
   1d4dc:	mov	r7, r0
   1d4e0:	cmn	r5, #1
   1d4e4:	cmnne	r7, #1
   1d4e8:	beq	1cb3c <__assert_fail@plt+0xb808>
   1d4ec:	ldr	r3, [sp, #44]	; 0x2c
   1d4f0:	cmp	r5, r7
   1d4f4:	movls	r3, #0
   1d4f8:	andhi	r3, r3, #1
   1d4fc:	cmp	r3, #0
   1d500:	bne	1cb24 <__assert_fail@plt+0xb7f0>
   1d504:	ldr	r3, [r4, #92]	; 0x5c
   1d508:	cmp	r3, #1
   1d50c:	ble	1cb6c <__assert_fail@plt+0xb838>
   1d510:	ldr	r3, [r6, #32]
   1d514:	ldr	r2, [sp, #32]
   1d518:	cmp	r3, r2
   1d51c:	bne	1cb4c <__assert_fail@plt+0xb818>
   1d520:	lsl	r8, r2, #1
   1d524:	add	r8, r8, #1
   1d528:	ldr	r0, [r6, #4]
   1d52c:	lsl	r3, r8, #2
   1d530:	mov	r1, r3
   1d534:	str	r3, [sp, #52]	; 0x34
   1d538:	bl	1fd98 <__assert_fail@plt+0xea64>
   1d53c:	ldr	r3, [sp, #52]	; 0x34
   1d540:	mov	r1, r3
   1d544:	str	r0, [sp, #48]	; 0x30
   1d548:	ldr	r0, [r6, #8]
   1d54c:	bl	1fd98 <__assert_fail@plt+0xea64>
   1d550:	ldr	r2, [sp, #48]	; 0x30
   1d554:	cmp	r0, #0
   1d558:	cmpne	r2, #0
   1d55c:	mov	r3, r0
   1d560:	bne	1cb44 <__assert_fail@plt+0xb810>
   1d564:	str	r0, [sp, #20]
   1d568:	mov	r0, r2
   1d56c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1d570:	ldr	r3, [sp, #20]
   1d574:	mov	r0, r3
   1d578:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1d57c:	mov	r3, #12
   1d580:	str	r3, [sp, #20]
   1d584:	b	1cba4 <__assert_fail@plt+0xb870>
   1d588:	mov	r3, #3
   1d58c:	strb	r3, [sp, #124]	; 0x7c
   1d590:	ldr	r3, [sp, #16]
   1d594:	mov	r2, #0
   1d598:	str	r3, [sp, #120]	; 0x78
   1d59c:	mov	r1, r2
   1d5a0:	add	r3, sp, #120	; 0x78
   1d5a4:	mov	r0, r4
   1d5a8:	bl	14510 <__assert_fail@plt+0x31dc>
   1d5ac:	subs	r1, r0, #0
   1d5b0:	beq	1d5cc <__assert_fail@plt+0xc298>
   1d5b4:	mov	r3, #10
   1d5b8:	mov	r2, r5
   1d5bc:	mov	r0, r4
   1d5c0:	bl	14660 <__assert_fail@plt+0x332c>
   1d5c4:	subs	r5, r0, #0
   1d5c8:	bne	1c864 <__assert_fail@plt+0xb530>
   1d5cc:	mov	r3, #12
   1d5d0:	b	1c948 <__assert_fail@plt+0xb614>
   1d5d4:	cmp	r7, #3
   1d5d8:	bne	1d468 <__assert_fail@plt+0xc134>
   1d5dc:	b	1d440 <__assert_fail@plt+0xc10c>
   1d5e0:	addeq	r0, ip, r0, lsl #16
   1d5e4:	andeq	r5, r1, r0, lsr #2
   1d5e8:	andeq	r0, r0, pc, lsl #6
   1d5ec:	mvnseq	r0, #0
   1d5f0:	andeq	r1, r2, lr, lsl #14
   1d5f4:	andeq	r1, r2, r6, ror #1
   1d5f8:	strdeq	r1, [r2], -r6
   1d5fc:	andeq	r1, r2, sl, lsl r7
   1d600:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1d604:			; <UNDEFINED> instruction: 0x00013fb0
   1d608:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d60c:	sub	sp, sp, #20
   1d610:	ldr	ip, [r1]
   1d614:	ldr	r5, [sp, #60]	; 0x3c
   1d618:	mov	sl, r3
   1d61c:	str	r0, [sp, #12]
   1d620:	stmib	sp, {r5, ip}
   1d624:	ldr	ip, [sp, #56]	; 0x38
   1d628:	mov	r7, r1
   1d62c:	str	ip, [sp]
   1d630:	mov	r8, r2
   1d634:	bl	1c5ac <__assert_fail@plt+0xb278>
   1d638:	ldr	r3, [r5]
   1d63c:	adds	r3, r3, #0
   1d640:	movne	r3, #1
   1d644:	cmp	r0, #0
   1d648:	movne	r3, #0
   1d64c:	cmp	r3, #0
   1d650:	moveq	r4, r0
   1d654:	moveq	fp, #16
   1d658:	beq	1d6d0 <__assert_fail@plt+0xc39c>
   1d65c:	mov	r4, #0
   1d660:	mov	r0, r4
   1d664:	add	sp, sp, #20
   1d668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d66c:	cmp	r4, #0
   1d670:	cmpne	r0, #0
   1d674:	beq	1d6c0 <__assert_fail@plt+0xc38c>
   1d678:	mov	r2, r0
   1d67c:	mov	r3, fp
   1d680:	mov	r1, r4
   1d684:	ldr	r0, [sp, #8]
   1d688:	bl	14660 <__assert_fail@plt+0x332c>
   1d68c:	subs	r9, r0, #0
   1d690:	bne	1d6cc <__assert_fail@plt+0xc398>
   1d694:	mov	r2, r9
   1d698:	ldr	r1, [pc, #184]	; 1d758 <__assert_fail@plt+0xc424>
   1d69c:	mov	r0, r6
   1d6a0:	bl	1434c <__assert_fail@plt+0x3018>
   1d6a4:	mov	r2, r9
   1d6a8:	ldr	r1, [pc, #168]	; 1d758 <__assert_fail@plt+0xc424>
   1d6ac:	mov	r0, r4
   1d6b0:	bl	1434c <__assert_fail@plt+0x3018>
   1d6b4:	mov	r2, #12
   1d6b8:	str	r2, [r5]
   1d6bc:	b	1d65c <__assert_fail@plt+0xc328>
   1d6c0:	cmp	r4, #0
   1d6c4:	movne	r9, r4
   1d6c8:	moveq	r9, r0
   1d6cc:	mov	r4, r9
   1d6d0:	ldrb	r2, [r8, #4]
   1d6d4:	and	r3, r2, #247	; 0xf7
   1d6d8:	cmp	r3, #2
   1d6dc:	beq	1d660 <__assert_fail@plt+0xc32c>
   1d6e0:	ldr	r3, [sp, #56]	; 0x38
   1d6e4:	clz	r3, r3
   1d6e8:	lsr	r3, r3, #5
   1d6ec:	cmp	r2, #9
   1d6f0:	orrne	r3, r3, #1
   1d6f4:	cmp	r3, #0
   1d6f8:	beq	1d660 <__assert_fail@plt+0xc32c>
   1d6fc:	ldr	r3, [sp, #56]	; 0x38
   1d700:	str	r5, [sp, #4]
   1d704:	str	r3, [sp]
   1d708:	mov	r2, r8
   1d70c:	mov	r3, sl
   1d710:	mov	r1, r7
   1d714:	ldr	r0, [sp, #12]
   1d718:	bl	1c5ac <__assert_fail@plt+0xb278>
   1d71c:	ldr	r3, [r5]
   1d720:	adds	r3, r3, #0
   1d724:	movne	r3, #1
   1d728:	cmp	r0, #0
   1d72c:	movne	r3, #0
   1d730:	cmp	r3, #0
   1d734:	mov	r6, r0
   1d738:	beq	1d66c <__assert_fail@plt+0xc338>
   1d73c:	cmp	r4, #0
   1d740:	beq	1d65c <__assert_fail@plt+0xc328>
   1d744:	mov	r2, #0
   1d748:	ldr	r1, [pc, #8]	; 1d758 <__assert_fail@plt+0xc424>
   1d74c:	mov	r0, r4
   1d750:	bl	1434c <__assert_fail@plt+0x3018>
   1d754:	b	1d65c <__assert_fail@plt+0xc328>
   1d758:	andeq	r5, r1, r0, lsr #2
   1d75c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d760:	sub	sp, sp, #28
   1d764:	ldr	r6, [r1]
   1d768:	ldr	r7, [sp, #68]	; 0x44
   1d76c:	mov	fp, r3
   1d770:	ldr	ip, [r6, #84]	; 0x54
   1d774:	str	r7, [sp, #4]
   1d778:	str	ip, [sp, #12]
   1d77c:	ldr	ip, [sp, #64]	; 0x40
   1d780:	mov	r9, r0
   1d784:	str	ip, [sp]
   1d788:	mov	sl, r1
   1d78c:	mov	r8, r2
   1d790:	bl	1d608 <__assert_fail@plt+0xc2d4>
   1d794:	ldr	r5, [r7]
   1d798:	adds	r5, r5, #0
   1d79c:	movne	r5, #1
   1d7a0:	cmp	r0, #0
   1d7a4:	movne	r5, #0
   1d7a8:	cmp	r5, #0
   1d7ac:	orreq	r3, fp, #8388608	; 0x800000
   1d7b0:	moveq	r4, r0
   1d7b4:	streq	r3, [sp, #20]
   1d7b8:	beq	1d808 <__assert_fail@plt+0xc4d4>
   1d7bc:	mov	r4, #0
   1d7c0:	mov	r0, r4
   1d7c4:	add	sp, sp, #28
   1d7c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d7cc:	ldr	r3, [r6, #84]	; 0x54
   1d7d0:	ldr	r1, [sp, #16]
   1d7d4:	orr	r3, r3, r1
   1d7d8:	str	r3, [r6, #84]	; 0x54
   1d7dc:	mov	r1, r4
   1d7e0:	mov	r3, #10
   1d7e4:	mov	r0, r6
   1d7e8:	bl	14660 <__assert_fail@plt+0x332c>
   1d7ec:	subs	r4, r0, #0
   1d7f0:	bne	1d808 <__assert_fail@plt+0xc4d4>
   1d7f4:	mov	r3, #12
   1d7f8:	str	r3, [r7]
   1d7fc:	b	1d7c0 <__assert_fail@plt+0xc48c>
   1d800:	mov	r2, r5
   1d804:	b	1d7dc <__assert_fail@plt+0xc4a8>
   1d808:	ldrb	r3, [r8, #4]
   1d80c:	cmp	r3, #10
   1d810:	bne	1d7c0 <__assert_fail@plt+0xc48c>
   1d814:	ldr	r2, [sp, #20]
   1d818:	mov	r1, r9
   1d81c:	mov	r0, r8
   1d820:	bl	188f8 <__assert_fail@plt+0x75c4>
   1d824:	ldrb	r2, [r8, #4]
   1d828:	and	r3, r2, #247	; 0xf7
   1d82c:	cmp	r3, #2
   1d830:	beq	1d800 <__assert_fail@plt+0xc4cc>
   1d834:	ldr	r3, [sp, #64]	; 0x40
   1d838:	clz	r3, r3
   1d83c:	lsr	r3, r3, #5
   1d840:	cmp	r2, #9
   1d844:	orrne	r3, r3, #1
   1d848:	cmp	r3, #0
   1d84c:	beq	1d800 <__assert_fail@plt+0xc4cc>
   1d850:	ldr	r3, [r6, #84]	; 0x54
   1d854:	mov	r2, r8
   1d858:	str	r3, [sp, #16]
   1d85c:	ldr	r3, [sp, #12]
   1d860:	mov	r1, sl
   1d864:	str	r3, [r6, #84]	; 0x54
   1d868:	ldr	r3, [sp, #64]	; 0x40
   1d86c:	str	r7, [sp, #4]
   1d870:	str	r3, [sp]
   1d874:	mov	r0, r9
   1d878:	mov	r3, fp
   1d87c:	bl	1d608 <__assert_fail@plt+0xc2d4>
   1d880:	ldr	r3, [r7]
   1d884:	adds	r3, r3, #0
   1d888:	movne	r3, #1
   1d88c:	cmp	r0, #0
   1d890:	movne	r3, #0
   1d894:	cmp	r3, #0
   1d898:	mov	r2, r0
   1d89c:	beq	1d7cc <__assert_fail@plt+0xc498>
   1d8a0:	cmp	r4, #0
   1d8a4:	beq	1d7bc <__assert_fail@plt+0xc488>
   1d8a8:	mov	r2, #0
   1d8ac:	ldr	r1, [pc, #8]	; 1d8bc <__assert_fail@plt+0xc588>
   1d8b0:	mov	r0, r4
   1d8b4:	bl	1434c <__assert_fail@plt+0x3018>
   1d8b8:	b	1d7bc <__assert_fail@plt+0xc488>
   1d8bc:	andeq	r5, r1, r0, lsr #2
   1d8c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8c4:	mov	r9, r3
   1d8c8:	ldrb	r3, [r0, #28]
   1d8cc:	sub	sp, sp, #132	; 0x84
   1d8d0:	mov	r7, r2
   1d8d4:	and	r3, r3, #144	; 0x90
   1d8d8:	strb	r3, [r0, #28]
   1d8dc:	ldr	r3, [r0, #4]
   1d8e0:	mov	r2, #0
   1d8e4:	cmp	r3, #159	; 0x9f
   1d8e8:	mov	r6, r0
   1d8ec:	mov	sl, r1
   1d8f0:	str	r2, [sp, #24]
   1d8f4:	str	r9, [r0, #12]
   1d8f8:	str	r2, [r0, #8]
   1d8fc:	str	r2, [r0, #24]
   1d900:	ldr	r4, [r0]
   1d904:	bhi	1d928 <__assert_fail@plt+0xc5f4>
   1d908:	mov	r0, r4
   1d90c:	mov	r1, #160	; 0xa0
   1d910:	bl	1fd98 <__assert_fail@plt+0xea64>
   1d914:	subs	r4, r0, #0
   1d918:	beq	1e3f4 <__assert_fail@plt+0xd0c0>
   1d91c:	mov	r3, #160	; 0xa0
   1d920:	str	r3, [r6, #4]
   1d924:	str	r4, [r6]
   1d928:	mov	r2, #160	; 0xa0
   1d92c:	str	r2, [r6, #8]
   1d930:	mov	r1, #0
   1d934:	mov	r0, r4
   1d938:	bl	11238 <memset@plt>
   1d93c:	mov	r3, #31
   1d940:	str	r3, [r4, #64]	; 0x40
   1d944:	ldr	r3, [pc, #2796]	; 1e438 <__assert_fail@plt+0xd104>
   1d948:	cmp	r7, r3
   1d94c:	bls	1daf0 <__assert_fail@plt+0xc7bc>
   1d950:	mov	r5, #12
   1d954:	cmp	r5, #0
   1d958:	str	r5, [sp, #24]
   1d95c:	bne	1e420 <__assert_fail@plt+0xd0ec>
   1d960:	ldr	r8, [pc, #2772]	; 1e43c <__assert_fail@plt+0xd108>
   1d964:	ldr	r1, [pc, #2772]	; 1e440 <__assert_fail@plt+0xd10c>
   1d968:	cmp	r8, #0
   1d96c:	mov	r3, #1
   1d970:	moveq	r3, r5
   1d974:	cmp	r1, #0
   1d978:	mov	r2, #1
   1d97c:	moveq	r2, r1
   1d980:	orr	r3, r3, r2
   1d984:	tst	r3, #1
   1d988:	bne	1e3fc <__assert_fail@plt+0xd0c8>
   1d98c:	ldr	r3, [r6, #20]
   1d990:	mov	r2, #84	; 0x54
   1d994:	str	r3, [sp, #12]
   1d998:	mov	r1, #0
   1d99c:	ands	r3, r9, #4194304	; 0x400000
   1d9a0:	add	r0, sp, #44	; 0x2c
   1d9a4:	movne	fp, #1
   1d9a8:	moveq	fp, #0
   1d9ac:	str	r3, [sp, #16]
   1d9b0:	bl	11238 <memset@plt>
   1d9b4:	ldr	r3, [sp, #12]
   1d9b8:	ldrb	r2, [r4, #88]	; 0x58
   1d9bc:	str	r3, [sp, #108]	; 0x6c
   1d9c0:	strb	fp, [sp, #116]	; 0x74
   1d9c4:	cmp	r3, #0
   1d9c8:	orrne	fp, fp, #1
   1d9cc:	ldr	r3, [r4, #92]	; 0x5c
   1d9d0:	cmp	r7, #0
   1d9d4:	str	r3, [sp, #124]	; 0x7c
   1d9d8:	lsr	r3, r2, #2
   1d9dc:	lsr	r2, r2, #3
   1d9e0:	and	r3, r3, #1
   1d9e4:	and	r2, r2, #1
   1d9e8:	str	sl, [sp, #44]	; 0x2c
   1d9ec:	str	r7, [sp, #92]	; 0x5c
   1d9f0:	str	r7, [sp, #88]	; 0x58
   1d9f4:	strb	fp, [sp, #119]	; 0x77
   1d9f8:	strb	r3, [sp, #117]	; 0x75
   1d9fc:	strb	r2, [sp, #118]	; 0x76
   1da00:	str	r7, [sp, #100]	; 0x64
   1da04:	str	r7, [sp, #96]	; 0x60
   1da08:	bgt	1dc68 <__assert_fail@plt+0xc934>
   1da0c:	ldrb	r3, [sp, #119]	; 0x77
   1da10:	cmp	r3, #0
   1da14:	ldrne	sl, [sp, #48]	; 0x30
   1da18:	ands	r3, r9, #4194304	; 0x400000
   1da1c:	cmp	r3, #0
   1da20:	str	sl, [sp, #48]	; 0x30
   1da24:	ldr	r3, [r4, #92]	; 0x5c
   1da28:	beq	1dc90 <__assert_fail@plt+0xc95c>
   1da2c:	cmp	r3, #1
   1da30:	ble	1dc84 <__assert_fail@plt+0xc950>
   1da34:	add	r0, sp, #44	; 0x2c
   1da38:	bl	14ac8 <__assert_fail@plt+0x3794>
   1da3c:	subs	r5, r0, #0
   1da40:	bne	1da7c <__assert_fail@plt+0xc748>
   1da44:	ldr	r3, [sp, #76]	; 0x4c
   1da48:	cmp	r7, r3
   1da4c:	ble	1da7c <__assert_fail@plt+0xc748>
   1da50:	ldr	r2, [r4, #92]	; 0x5c
   1da54:	ldr	r3, [sp, #72]	; 0x48
   1da58:	ldr	r1, [sp, #80]	; 0x50
   1da5c:	add	r3, r3, r2
   1da60:	cmp	r1, r3
   1da64:	bgt	1da7c <__assert_fail@plt+0xc748>
   1da68:	lsl	r1, r1, #1
   1da6c:	add	r0, sp, #44	; 0x2c
   1da70:	bl	14424 <__assert_fail@plt+0x30f0>
   1da74:	subs	r5, r0, #0
   1da78:	beq	1da34 <__assert_fail@plt+0xc700>
   1da7c:	cmp	r5, #0
   1da80:	str	r5, [sp, #24]
   1da84:	beq	1dcd8 <__assert_fail@plt+0xc9a4>
   1da88:	ldr	r7, [r6]
   1da8c:	ldr	r5, [r7, #56]	; 0x38
   1da90:	cmp	r5, #0
   1da94:	bne	1dcc4 <__assert_fail@plt+0xc990>
   1da98:	mov	r3, #31
   1da9c:	ldr	r0, [r7, #16]
   1daa0:	str	r5, [r7, #56]	; 0x38
   1daa4:	str	r3, [r7, #64]	; 0x40
   1daa8:	str	r5, [r7, #52]	; 0x34
   1daac:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1dab0:	str	r5, [r7, #16]
   1dab4:	add	r0, sp, #44	; 0x2c
   1dab8:	bl	153c8 <__assert_fail@plt+0x4094>
   1dabc:	ldr	r2, [pc, #2428]	; 1e440 <__assert_fail@plt+0xd10c>
   1dac0:	mov	r3, #1
   1dac4:	cmp	r2, #0
   1dac8:	moveq	r3, r5
   1dacc:	cmp	r8, #0
   1dad0:	mov	r2, #1
   1dad4:	moveq	r2, r8
   1dad8:	orr	r3, r3, r2
   1dadc:	tst	r3, #1
   1dae0:	beq	1e420 <__assert_fail@plt+0xd0ec>
   1dae4:	add	r0, r4, #136	; 0x88
   1dae8:	bl	11064 <pthread_mutex_destroy@plt>
   1daec:	b	1e420 <__assert_fail@plt+0xd0ec>
   1daf0:	add	r0, r7, #1
   1daf4:	str	r0, [r4, #4]
   1daf8:	lsl	r0, r0, #3
   1dafc:	bl	1fd58 <__assert_fail@plt+0xea24>
   1db00:	mov	r5, #1
   1db04:	str	r0, [r4]
   1db08:	cmp	r7, r5
   1db0c:	lslcs	r5, r5, #1
   1db10:	bcs	1db08 <__assert_fail@plt+0xc7d4>
   1db14:	mov	r1, r5
   1db18:	mov	r0, #12
   1db1c:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1db20:	sub	r5, r5, #1
   1db24:	str	r5, [r4, #68]	; 0x44
   1db28:	str	r0, [r4, #32]
   1db2c:	bl	11160 <__ctype_get_mb_cur_max@plt>
   1db30:	str	r0, [r4, #92]	; 0x5c
   1db34:	mov	r0, #14
   1db38:	bl	112bc <nl_langinfo@plt>
   1db3c:	ldrb	r3, [r0]
   1db40:	and	r3, r3, #223	; 0xdf
   1db44:	cmp	r3, #85	; 0x55
   1db48:	bne	1db98 <__assert_fail@plt+0xc864>
   1db4c:	ldrb	r3, [r0, #1]
   1db50:	and	r3, r3, #223	; 0xdf
   1db54:	cmp	r3, #84	; 0x54
   1db58:	bne	1db98 <__assert_fail@plt+0xc864>
   1db5c:	ldrb	r3, [r0, #2]
   1db60:	and	r3, r3, #223	; 0xdf
   1db64:	cmp	r3, #70	; 0x46
   1db68:	bne	1db98 <__assert_fail@plt+0xc864>
   1db6c:	ldrb	r3, [r0, #3]
   1db70:	ldr	r1, [pc, #2252]	; 1e444 <__assert_fail@plt+0xd110>
   1db74:	cmp	r3, #45	; 0x2d
   1db78:	moveq	r3, #4
   1db7c:	movne	r3, #3
   1db80:	add	r0, r0, r3
   1db84:	bl	1104c <strcmp@plt>
   1db88:	cmp	r0, #0
   1db8c:	ldrbeq	r3, [r4, #88]	; 0x58
   1db90:	orreq	r3, r3, #4
   1db94:	strbeq	r3, [r4, #88]	; 0x58
   1db98:	ldrb	r3, [r4, #88]	; 0x58
   1db9c:	bic	r3, r3, #8
   1dba0:	strb	r3, [r4, #88]	; 0x58
   1dba4:	ldr	r3, [r4, #92]	; 0x5c
   1dba8:	cmp	r3, #1
   1dbac:	ble	1dc48 <__assert_fail@plt+0xc914>
   1dbb0:	ldrb	r5, [r4, #88]	; 0x58
   1dbb4:	ands	r5, r5, #4
   1dbb8:	ldrne	r3, [pc, #2184]	; 1e448 <__assert_fail@plt+0xd114>
   1dbbc:	strne	r3, [r4, #60]	; 0x3c
   1dbc0:	bne	1dc48 <__assert_fail@plt+0xc914>
   1dbc4:	mov	r1, #1
   1dbc8:	mov	r0, #32
   1dbcc:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1dbd0:	cmp	r0, #0
   1dbd4:	str	r0, [r4, #60]	; 0x3c
   1dbd8:	movne	r2, #1
   1dbdc:	beq	1d950 <__assert_fail@plt+0xc61c>
   1dbe0:	lsl	fp, r5, #3
   1dbe4:	mov	r8, #0
   1dbe8:	add	r3, r8, fp
   1dbec:	mov	r0, r3
   1dbf0:	str	r2, [sp, #16]
   1dbf4:	str	r3, [sp, #12]
   1dbf8:	bl	11244 <btowc@plt>
   1dbfc:	ldr	r2, [sp, #16]
   1dc00:	ldr	r3, [sp, #12]
   1dc04:	cmn	r0, #1
   1dc08:	ldrne	ip, [r4, #60]	; 0x3c
   1dc0c:	ldrne	r1, [ip, r5]
   1dc10:	orrne	r1, r1, r2, lsl r8
   1dc14:	strne	r1, [ip, r5]
   1dc18:	bics	r1, r3, #127	; 0x7f
   1dc1c:	bne	1dc30 <__assert_fail@plt+0xc8fc>
   1dc20:	cmp	r3, r0
   1dc24:	ldrbne	r3, [r4, #88]	; 0x58
   1dc28:	orrne	r3, r3, #8
   1dc2c:	strbne	r3, [r4, #88]	; 0x58
   1dc30:	add	r8, r8, #1
   1dc34:	cmp	r8, #32
   1dc38:	bne	1dbe8 <__assert_fail@plt+0xc8b4>
   1dc3c:	add	r5, r5, #4
   1dc40:	cmp	r5, #32
   1dc44:	bne	1dbe0 <__assert_fail@plt+0xc8ac>
   1dc48:	ldr	r3, [r4]
   1dc4c:	cmp	r3, #0
   1dc50:	beq	1d950 <__assert_fail@plt+0xc61c>
   1dc54:	ldr	r3, [r4, #32]
   1dc58:	cmp	r3, #0
   1dc5c:	beq	1d950 <__assert_fail@plt+0xc61c>
   1dc60:	mov	r5, #0
   1dc64:	b	1d954 <__assert_fail@plt+0xc620>
   1dc68:	add	r1, r7, #1
   1dc6c:	add	r0, sp, #44	; 0x2c
   1dc70:	bl	14424 <__assert_fail@plt+0x30f0>
   1dc74:	cmp	r0, #0
   1dc78:	beq	1da0c <__assert_fail@plt+0xc6d8>
   1dc7c:	mov	r5, r0
   1dc80:	b	1da7c <__assert_fail@plt+0xc748>
   1dc84:	add	r0, sp, #44	; 0x2c
   1dc88:	bl	14f98 <__assert_fail@plt+0x3c64>
   1dc8c:	b	1da7c <__assert_fail@plt+0xc748>
   1dc90:	cmp	r3, #1
   1dc94:	ble	1dca4 <__assert_fail@plt+0xc970>
   1dc98:	add	r0, sp, #44	; 0x2c
   1dc9c:	bl	14974 <__assert_fail@plt+0x3640>
   1dca0:	b	1da7c <__assert_fail@plt+0xc748>
   1dca4:	cmp	fp, #0
   1dca8:	ldreq	r3, [sp, #80]	; 0x50
   1dcac:	streq	r3, [sp, #72]	; 0x48
   1dcb0:	streq	r3, [sp, #76]	; 0x4c
   1dcb4:	beq	1da7c <__assert_fail@plt+0xc748>
   1dcb8:	add	r0, sp, #44	; 0x2c
   1dcbc:	bl	13db8 <__assert_fail@plt+0x2a84>
   1dcc0:	b	1da7c <__assert_fail@plt+0xc748>
   1dcc4:	ldr	r9, [r5]
   1dcc8:	mov	r0, r5
   1dccc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1dcd0:	mov	r5, r9
   1dcd4:	b	1da90 <__assert_fail@plt+0xc75c>
   1dcd8:	ldr	r7, [r6]
   1dcdc:	orr	r2, r9, #8388608	; 0x800000
   1dce0:	str	r5, [r6, #24]
   1dce4:	add	r1, sp, #44	; 0x2c
   1dce8:	str	r9, [r7, #128]	; 0x80
   1dcec:	add	r0, sp, #32
   1dcf0:	bl	188f8 <__assert_fail@plt+0x75c4>
   1dcf4:	add	r3, sp, #24
   1dcf8:	str	r3, [sp, #4]
   1dcfc:	str	r5, [sp]
   1dd00:	mov	r3, r9
   1dd04:	add	r2, sp, #32
   1dd08:	mov	r1, r6
   1dd0c:	add	r0, sp, #44	; 0x2c
   1dd10:	bl	1d75c <__assert_fail@plt+0xc428>
   1dd14:	ldr	r3, [sp, #24]
   1dd18:	adds	r3, r3, #0
   1dd1c:	movne	r3, #1
   1dd20:	cmp	r0, #0
   1dd24:	movne	r3, #0
   1dd28:	cmp	r3, #0
   1dd2c:	mov	r9, r0
   1dd30:	movne	r0, r5
   1dd34:	bne	1dd80 <__assert_fail@plt+0xca4c>
   1dd38:	mov	r2, r5
   1dd3c:	mov	r1, r5
   1dd40:	mov	r3, #2
   1dd44:	mov	r0, r7
   1dd48:	bl	14660 <__assert_fail@plt+0x332c>
   1dd4c:	cmp	r9, #0
   1dd50:	mov	r5, r0
   1dd54:	beq	1dd6c <__assert_fail@plt+0xca38>
   1dd58:	mov	r3, #16
   1dd5c:	mov	r2, r5
   1dd60:	mov	r1, r9
   1dd64:	mov	r0, r7
   1dd68:	bl	14660 <__assert_fail@plt+0x332c>
   1dd6c:	cmp	r0, #0
   1dd70:	cmpne	r5, #0
   1dd74:	moveq	r0, #0
   1dd78:	moveq	r3, #12
   1dd7c:	streq	r3, [sp, #24]
   1dd80:	cmp	r0, #0
   1dd84:	str	r0, [r4, #52]	; 0x34
   1dd88:	beq	1da88 <__assert_fail@plt+0xc754>
   1dd8c:	ldr	r5, [r6]
   1dd90:	mov	r7, #12
   1dd94:	ldr	r0, [r5, #4]
   1dd98:	lsl	r0, r0, #2
   1dd9c:	bl	1fd58 <__assert_fail@plt+0xea24>
   1dda0:	str	r0, [r5, #12]
   1dda4:	ldr	r0, [r5, #4]
   1dda8:	lsl	r0, r0, #2
   1ddac:	bl	1fd58 <__assert_fail@plt+0xea24>
   1ddb0:	str	r0, [r5, #16]
   1ddb4:	ldr	r0, [r5, #4]
   1ddb8:	mul	r0, r7, r0
   1ddbc:	bl	1fd58 <__assert_fail@plt+0xea24>
   1ddc0:	str	r0, [r5, #20]
   1ddc4:	ldr	r0, [r5, #4]
   1ddc8:	mul	r0, r7, r0
   1ddcc:	bl	1fd58 <__assert_fail@plt+0xea24>
   1ddd0:	ldr	r3, [r5, #12]
   1ddd4:	cmp	r3, #0
   1ddd8:	str	r0, [r5, #24]
   1dddc:	bne	1ded8 <__assert_fail@plt+0xcba4>
   1dde0:	mov	r7, #12
   1dde4:	cmp	r7, #0
   1dde8:	str	r7, [sp, #24]
   1ddec:	bne	1da88 <__assert_fail@plt+0xc754>
   1ddf0:	ldrb	r2, [r4, #88]	; 0x58
   1ddf4:	ldr	r3, [sp, #16]
   1ddf8:	clz	r3, r3
   1ddfc:	lsr	r3, r3, #5
   1de00:	ands	r3, r3, r2, lsr #2
   1de04:	beq	1de20 <__assert_fail@plt+0xcaec>
   1de08:	ldr	r2, [r6, #20]
   1de0c:	cmp	r2, #0
   1de10:	moveq	lr, r7
   1de14:	ldreq	ip, [r4, #8]
   1de18:	moveq	r0, r7
   1de1c:	beq	1e1c0 <__assert_fail@plt+0xce8c>
   1de20:	ldr	r3, [r4, #52]	; 0x34
   1de24:	ldr	r1, [r4, #24]
   1de28:	mov	r9, #12
   1de2c:	ldr	r3, [r3, #12]
   1de30:	add	r0, sp, #32
   1de34:	ldr	r3, [r3, #28]
   1de38:	str	r3, [r4, #72]	; 0x48
   1de3c:	mla	r1, r9, r3, r1
   1de40:	bl	16894 <__assert_fail@plt+0x5560>
   1de44:	cmp	r0, #0
   1de48:	mov	r7, r0
   1de4c:	str	r0, [sp, #28]
   1de50:	bne	1de88 <__assert_fail@plt+0xcb54>
   1de54:	ldr	r3, [r4, #76]	; 0x4c
   1de58:	cmp	r3, #0
   1de5c:	movgt	r5, r0
   1de60:	bgt	1e2d0 <__assert_fail@plt+0xcf9c>
   1de64:	mov	r3, #0
   1de68:	add	r2, sp, #32
   1de6c:	mov	r1, r4
   1de70:	add	r0, sp, #28
   1de74:	bl	16a44 <__assert_fail@plt+0x5710>
   1de78:	cmp	r0, #0
   1de7c:	str	r0, [r4, #36]	; 0x24
   1de80:	bne	1e358 <__assert_fail@plt+0xd024>
   1de84:	ldr	r7, [sp, #28]
   1de88:	str	r7, [sp, #24]
   1de8c:	ldr	r7, [r6]
   1de90:	ldr	r5, [r7, #56]	; 0x38
   1de94:	cmp	r5, #0
   1de98:	bne	1e3e0 <__assert_fail@plt+0xd0ac>
   1de9c:	mov	r3, #31
   1dea0:	str	r3, [r7, #64]	; 0x40
   1dea4:	ldr	r0, [r7, #16]
   1dea8:	str	r5, [r7, #56]	; 0x38
   1deac:	str	r5, [r7, #52]	; 0x34
   1deb0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1deb4:	str	r5, [r7, #16]
   1deb8:	add	r0, sp, #44	; 0x2c
   1debc:	bl	153c8 <__assert_fail@plt+0x4094>
   1dec0:	ldr	r3, [sp, #24]
   1dec4:	cmp	r3, #0
   1dec8:	bne	1dabc <__assert_fail@plt+0xc788>
   1decc:	ldr	r0, [sp, #24]
   1ded0:	add	sp, sp, #132	; 0x84
   1ded4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ded8:	ldr	r3, [r5, #16]
   1dedc:	cmp	r3, #0
   1dee0:	beq	1dde0 <__assert_fail@plt+0xcaac>
   1dee4:	ldr	r9, [r5, #20]
   1dee8:	cmp	r0, #0
   1deec:	cmpne	r9, #0
   1def0:	moveq	r9, #1
   1def4:	movne	r9, #0
   1def8:	beq	1dde0 <__assert_fail@plt+0xcaac>
   1defc:	ldr	r0, [r6, #24]
   1df00:	lsl	r0, r0, #2
   1df04:	bl	1fd58 <__assert_fail@plt+0xea24>
   1df08:	cmp	r0, #0
   1df0c:	str	r0, [r5, #132]	; 0x84
   1df10:	ldrne	r2, [r6, #24]
   1df14:	movne	r3, r9
   1df18:	bne	1dfe8 <__assert_fail@plt+0xccb4>
   1df1c:	mov	r2, r6
   1df20:	ldr	r1, [pc, #1316]	; 1e44c <__assert_fail@plt+0xd118>
   1df24:	ldr	r0, [r5, #52]	; 0x34
   1df28:	bl	1434c <__assert_fail@plt+0x3018>
   1df2c:	subs	r7, r0, #0
   1df30:	bne	1dde4 <__assert_fail@plt+0xcab0>
   1df34:	mov	r2, r5
   1df38:	ldr	r1, [pc, #1296]	; 1e450 <__assert_fail@plt+0xd11c>
   1df3c:	ldr	r0, [r5, #52]	; 0x34
   1df40:	bl	1434c <__assert_fail@plt+0x3018>
   1df44:	subs	r7, r0, #0
   1df48:	bne	1dde4 <__assert_fail@plt+0xcab0>
   1df4c:	mov	r2, r5
   1df50:	ldr	r1, [pc, #1276]	; 1e454 <__assert_fail@plt+0xd120>
   1df54:	ldr	r0, [r5, #52]	; 0x34
   1df58:	bl	143bc <__assert_fail@plt+0x3088>
   1df5c:	mov	r2, r5
   1df60:	ldr	r1, [pc, #1264]	; 1e458 <__assert_fail@plt+0xd124>
   1df64:	ldr	r0, [r5, #52]	; 0x34
   1df68:	bl	143bc <__assert_fail@plt+0x3088>
   1df6c:	subs	r7, r0, #0
   1df70:	bne	1dde4 <__assert_fail@plt+0xcab0>
   1df74:	mov	fp, r9
   1df78:	mov	sl, r7
   1df7c:	ldr	r0, [r5, #8]
   1df80:	cmp	r0, sl
   1df84:	bne	1df98 <__assert_fail@plt+0xcc64>
   1df88:	cmp	fp, #0
   1df8c:	beq	1e068 <__assert_fail@plt+0xcd34>
   1df90:	mov	fp, r9
   1df94:	mov	sl, #0
   1df98:	mov	r3, #12
   1df9c:	mul	r3, r3, sl
   1dfa0:	str	r3, [sp, #12]
   1dfa4:	ldr	r2, [sp, #12]
   1dfa8:	ldr	r3, [r5, #24]
   1dfac:	add	r3, r3, r2
   1dfb0:	ldr	r3, [r3, #4]
   1dfb4:	cmp	r3, #0
   1dfb8:	bne	1e060 <__assert_fail@plt+0xcd2c>
   1dfbc:	mov	r3, #1
   1dfc0:	mov	r2, sl
   1dfc4:	mov	r1, r5
   1dfc8:	add	r0, sp, #32
   1dfcc:	bl	177dc <__assert_fail@plt+0x64a8>
   1dfd0:	cmp	r0, #0
   1dfd4:	beq	1e03c <__assert_fail@plt+0xcd08>
   1dfd8:	mov	r7, r0
   1dfdc:	b	1dde4 <__assert_fail@plt+0xcab0>
   1dfe0:	str	r3, [r0, r3, lsl #2]
   1dfe4:	add	r3, r3, #1
   1dfe8:	cmp	r2, r3
   1dfec:	bne	1dfe0 <__assert_fail@plt+0xccac>
   1dff0:	mov	r2, r5
   1dff4:	ldr	r1, [pc, #1120]	; 1e45c <__assert_fail@plt+0xd128>
   1dff8:	ldr	r0, [r5, #52]	; 0x34
   1dffc:	bl	143bc <__assert_fail@plt+0x3088>
   1e000:	ldr	r2, [r6, #24]
   1e004:	mov	r3, #0
   1e008:	cmp	r2, r3
   1e00c:	bne	1e024 <__assert_fail@plt+0xccf0>
   1e010:	ldr	r0, [r5, #132]	; 0x84
   1e014:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e018:	mov	r3, #0
   1e01c:	str	r3, [r5, #132]	; 0x84
   1e020:	b	1df1c <__assert_fail@plt+0xcbe8>
   1e024:	ldr	r1, [r5, #132]	; 0x84
   1e028:	ldr	r1, [r1, r3, lsl #2]
   1e02c:	cmp	r1, r3
   1e030:	bne	1df1c <__assert_fail@plt+0xcbe8>
   1e034:	add	r3, r3, #1
   1e038:	b	1e008 <__assert_fail@plt+0xccd4>
   1e03c:	ldr	r3, [r5, #24]
   1e040:	ldr	r2, [sp, #12]
   1e044:	add	r3, r3, r2
   1e048:	ldr	r3, [r3, #4]
   1e04c:	cmp	r3, #0
   1e050:	bne	1e060 <__assert_fail@plt+0xcd2c>
   1e054:	ldr	r0, [sp, #40]	; 0x28
   1e058:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e05c:	mov	fp, #1
   1e060:	add	sl, sl, #1
   1e064:	b	1df7c <__assert_fail@plt+0xcc48>
   1e068:	ldrb	r3, [r6, #28]
   1e06c:	tst	r3, #16
   1e070:	beq	1e084 <__assert_fail@plt+0xcd50>
   1e074:	ldr	r3, [r5, #76]	; 0x4c
   1e078:	cmp	r3, #0
   1e07c:	bne	1e09c <__assert_fail@plt+0xcd68>
   1e080:	b	1dde4 <__assert_fail@plt+0xcab0>
   1e084:	ldr	r3, [r6, #24]
   1e088:	cmp	r3, #0
   1e08c:	beq	1e074 <__assert_fail@plt+0xcd40>
   1e090:	ldrb	r3, [r5, #88]	; 0x58
   1e094:	tst	r3, #1
   1e098:	beq	1e074 <__assert_fail@plt+0xcd40>
   1e09c:	mov	r9, #12
   1e0a0:	mul	r0, r9, r0
   1e0a4:	bl	1fd58 <__assert_fail@plt+0xea24>
   1e0a8:	cmp	r0, #0
   1e0ac:	movne	r3, #0
   1e0b0:	str	r0, [r5, #28]
   1e0b4:	movne	r2, r3
   1e0b8:	beq	1dde0 <__assert_fail@plt+0xcaac>
   1e0bc:	ldr	r1, [r5, #8]
   1e0c0:	cmp	r3, r1
   1e0c4:	bcc	1e10c <__assert_fail@plt+0xcdd8>
   1e0c8:	mov	r9, #0
   1e0cc:	mov	fp, #12
   1e0d0:	ldr	r3, [r5, #8]
   1e0d4:	cmp	r9, r3
   1e0d8:	bcs	1dde4 <__assert_fail@plt+0xcab0>
   1e0dc:	mul	r3, fp, r9
   1e0e0:	ldr	r2, [r5, #24]
   1e0e4:	mov	sl, #0
   1e0e8:	add	r2, r2, r3
   1e0ec:	ldr	r2, [r2, #8]
   1e0f0:	ldr	r1, [r5, #24]
   1e0f4:	add	r1, r1, r3
   1e0f8:	ldr	r1, [r1, #4]
   1e0fc:	cmp	sl, r1
   1e100:	blt	1e12c <__assert_fail@plt+0xcdf8>
   1e104:	add	r9, r9, #1
   1e108:	b	1e0d0 <__assert_fail@plt+0xcd9c>
   1e10c:	mul	r0, r9, r3
   1e110:	ldr	ip, [r5, #28]
   1e114:	add	r3, r3, #1
   1e118:	add	r1, ip, r0
   1e11c:	str	r2, [ip, r0]
   1e120:	str	r2, [r1, #4]
   1e124:	str	r2, [r1, #8]
   1e128:	b	1e0bc <__assert_fail@plt+0xcd88>
   1e12c:	ldr	ip, [r2, sl, lsl #2]
   1e130:	ldr	r0, [r5, #28]
   1e134:	mov	r1, r9
   1e138:	mla	r0, fp, ip, r0
   1e13c:	str	r3, [sp, #20]
   1e140:	str	r2, [sp, #12]
   1e144:	bl	144b8 <__assert_fail@plt+0x3184>
   1e148:	cmp	r0, #0
   1e14c:	beq	1dde0 <__assert_fail@plt+0xcaac>
   1e150:	add	sl, sl, #1
   1e154:	ldr	r3, [sp, #20]
   1e158:	ldr	r2, [sp, #12]
   1e15c:	b	1e0f0 <__assert_fail@plt+0xcdbc>
   1e160:	ldr	r2, [r4]
   1e164:	lsl	r5, r0, #3
   1e168:	add	r1, r2, r5
   1e16c:	ldrb	r1, [r1, #4]
   1e170:	sub	r1, r1, #1
   1e174:	cmp	r1, #11
   1e178:	ldrls	pc, [pc, r1, lsl #2]
   1e17c:	b	1e258 <__assert_fail@plt+0xcf24>
   1e180:			; <UNDEFINED> instruction: 0x0001e1b0
   1e184:			; <UNDEFINED> instruction: 0x0001e1bc
   1e188:	andeq	lr, r1, r4, lsr r2
   1e18c:			; <UNDEFINED> instruction: 0x0001e1bc
   1e190:	andeq	lr, r1, ip, asr r2
   1e194:	andeq	sp, r1, r0, lsr #28
   1e198:	andeq	lr, r1, r8, asr r2
   1e19c:			; <UNDEFINED> instruction: 0x0001e1bc
   1e1a0:			; <UNDEFINED> instruction: 0x0001e1bc
   1e1a4:			; <UNDEFINED> instruction: 0x0001e1bc
   1e1a8:			; <UNDEFINED> instruction: 0x0001e1bc
   1e1ac:	andeq	lr, r1, r8, lsl #4
   1e1b0:	ldrsb	r2, [r2, r5]
   1e1b4:	cmp	r2, #0
   1e1b8:	movlt	lr, r3
   1e1bc:	add	r0, r0, #1
   1e1c0:	cmp	r0, ip
   1e1c4:	bne	1e160 <__assert_fail@plt+0xce2c>
   1e1c8:	orr	r3, lr, r7
   1e1cc:	tst	r3, #255	; 0xff
   1e1d0:	movne	r3, #0
   1e1d4:	movne	r5, #7
   1e1d8:	bne	1e294 <__assert_fail@plt+0xcf60>
   1e1dc:	mov	r3, #1
   1e1e0:	str	r3, [r4, #92]	; 0x5c
   1e1e4:	ldr	r2, [r4, #76]	; 0x4c
   1e1e8:	ldrb	r3, [r4, #88]	; 0x58
   1e1ec:	cmp	r2, #0
   1e1f0:	movle	r2, r7
   1e1f4:	orrgt	r2, r7, #1
   1e1f8:	and	r7, r3, #249	; 0xf9
   1e1fc:	orr	r7, r7, r2, lsl #1
   1e200:	strb	r7, [r4, #88]	; 0x58
   1e204:	b	1de20 <__assert_fail@plt+0xcaec>
   1e208:	ldr	r2, [r2, r0, lsl #3]
   1e20c:	cmp	r2, #32
   1e210:	beq	1e1bc <__assert_fail@plt+0xce88>
   1e214:	bhi	1e224 <__assert_fail@plt+0xcef0>
   1e218:	cmp	r2, #16
   1e21c:	beq	1e1bc <__assert_fail@plt+0xce88>
   1e220:	b	1de20 <__assert_fail@plt+0xcaec>
   1e224:	cmp	r2, #64	; 0x40
   1e228:	beq	1e1bc <__assert_fail@plt+0xce88>
   1e22c:	cmp	r2, #128	; 0x80
   1e230:	b	1e21c <__assert_fail@plt+0xcee8>
   1e234:	ldr	r2, [r2, r0, lsl #3]
   1e238:	add	r1, r2, #12
   1e23c:	add	r2, r2, #28
   1e240:	ldr	r5, [r1, #4]!
   1e244:	cmp	r5, #0
   1e248:	bne	1de20 <__assert_fail@plt+0xcaec>
   1e24c:	cmp	r1, r2
   1e250:	bne	1e240 <__assert_fail@plt+0xcf0c>
   1e254:	b	1e1bc <__assert_fail@plt+0xce88>
   1e258:	bl	11310 <abort@plt>
   1e25c:	mov	r7, r3
   1e260:	b	1e1bc <__assert_fail@plt+0xce88>
   1e264:	ldr	lr, [r4]
   1e268:	lsl	ip, r3, #3
   1e26c:	add	r2, lr, ip
   1e270:	ldrb	r1, [r2, #4]
   1e274:	cmp	r1, #1
   1e278:	bne	1e2a0 <__assert_fail@plt+0xcf6c>
   1e27c:	ldrsb	r1, [lr, ip]
   1e280:	cmp	r1, #0
   1e284:	ldrblt	r1, [r2, #6]
   1e288:	biclt	r1, r1, #32
   1e28c:	strblt	r1, [r2, #6]
   1e290:	add	r3, r3, #1
   1e294:	cmp	r0, r3
   1e298:	bne	1e264 <__assert_fail@plt+0xcf30>
   1e29c:	b	1e1dc <__assert_fail@plt+0xcea8>
   1e2a0:	cmp	r1, #5
   1e2a4:	strbeq	r5, [r2, #4]
   1e2a8:	b	1e290 <__assert_fail@plt+0xcf5c>
   1e2ac:	ldr	ip, [sp, #40]	; 0x28
   1e2b0:	ldr	r1, [r4]
   1e2b4:	ldr	r3, [ip, r5, lsl #2]
   1e2b8:	add	lr, r1, r3, lsl #3
   1e2bc:	ldrb	r2, [lr, #4]
   1e2c0:	cmp	r2, #4
   1e2c4:	moveq	r2, #0
   1e2c8:	beq	1e308 <__assert_fail@plt+0xcfd4>
   1e2cc:	add	r5, r5, #1
   1e2d0:	ldr	r0, [sp, #36]	; 0x24
   1e2d4:	cmp	r5, r0
   1e2d8:	blt	1e2ac <__assert_fail@plt+0xcf78>
   1e2dc:	b	1de64 <__assert_fail@plt+0xcb30>
   1e2e0:	ldr	sl, [ip, r2, lsl #2]
   1e2e4:	add	fp, r1, sl, lsl #3
   1e2e8:	ldrb	fp, [fp, #4]
   1e2ec:	cmp	fp, #9
   1e2f0:	bne	1e304 <__assert_fail@plt+0xcfd0>
   1e2f4:	ldr	fp, [r1, sl, lsl #3]
   1e2f8:	ldr	sl, [lr]
   1e2fc:	cmp	fp, sl
   1e300:	beq	1e314 <__assert_fail@plt+0xcfe0>
   1e304:	add	r2, r2, #1
   1e308:	cmp	r2, r0
   1e30c:	blt	1e2e0 <__assert_fail@plt+0xcfac>
   1e310:	beq	1e2cc <__assert_fail@plt+0xcf98>
   1e314:	ldr	r2, [r4, #20]
   1e318:	add	r0, sp, #32
   1e31c:	mla	r3, r9, r3, r2
   1e320:	ldr	r3, [r3, #8]
   1e324:	ldr	sl, [r3]
   1e328:	mov	r1, sl
   1e32c:	bl	13e08 <__assert_fail@plt+0x2ad4>
   1e330:	cmp	r0, #0
   1e334:	bne	1e2cc <__assert_fail@plt+0xcf98>
   1e338:	ldr	r1, [r4, #24]
   1e33c:	add	r0, sp, #32
   1e340:	mla	r1, r9, sl, r1
   1e344:	bl	17678 <__assert_fail@plt+0x6344>
   1e348:	subs	r5, r0, #0
   1e34c:	beq	1e2cc <__assert_fail@plt+0xcf98>
   1e350:	mov	r7, r5
   1e354:	b	1de88 <__assert_fail@plt+0xcb54>
   1e358:	ldrsb	r3, [r0, #52]	; 0x34
   1e35c:	cmp	r3, #0
   1e360:	strge	r0, [r4, #48]	; 0x30
   1e364:	strge	r0, [r4, #44]	; 0x2c
   1e368:	strge	r0, [r4, #40]	; 0x28
   1e36c:	bge	1e3d4 <__assert_fail@plt+0xd0a0>
   1e370:	mov	r3, #1
   1e374:	add	r2, sp, #32
   1e378:	mov	r1, r4
   1e37c:	add	r0, sp, #28
   1e380:	bl	16a44 <__assert_fail@plt+0x5710>
   1e384:	mov	r3, #2
   1e388:	add	r2, sp, #32
   1e38c:	mov	r1, r4
   1e390:	str	r0, [r4, #40]	; 0x28
   1e394:	add	r0, sp, #28
   1e398:	bl	16a44 <__assert_fail@plt+0x5710>
   1e39c:	mov	r3, #6
   1e3a0:	add	r2, sp, #32
   1e3a4:	mov	r1, r4
   1e3a8:	str	r0, [r4, #44]	; 0x2c
   1e3ac:	add	r0, sp, #28
   1e3b0:	bl	16a44 <__assert_fail@plt+0x5710>
   1e3b4:	ldr	r3, [r4, #40]	; 0x28
   1e3b8:	cmp	r3, #0
   1e3bc:	str	r0, [r4, #48]	; 0x30
   1e3c0:	beq	1de84 <__assert_fail@plt+0xcb50>
   1e3c4:	ldr	r3, [r4, #44]	; 0x2c
   1e3c8:	cmp	r0, #0
   1e3cc:	cmpne	r3, #0
   1e3d0:	beq	1de84 <__assert_fail@plt+0xcb50>
   1e3d4:	ldr	r0, [sp, #40]	; 0x28
   1e3d8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e3dc:	b	1de88 <__assert_fail@plt+0xcb54>
   1e3e0:	ldr	r9, [r5]
   1e3e4:	mov	r0, r5
   1e3e8:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e3ec:	mov	r5, r9
   1e3f0:	b	1de94 <__assert_fail@plt+0xcb60>
   1e3f4:	mov	r0, #12
   1e3f8:	b	1ded0 <__assert_fail@plt+0xcb9c>
   1e3fc:	mov	r1, #0
   1e400:	add	r0, r4, #136	; 0x88
   1e404:	bl	110c4 <pthread_mutex_init@plt>
   1e408:	cmp	r0, #0
   1e40c:	movne	r3, #12
   1e410:	strne	r3, [sp, #24]
   1e414:	ldr	r3, [sp, #24]
   1e418:	cmp	r3, #0
   1e41c:	beq	1d98c <__assert_fail@plt+0xc658>
   1e420:	mov	r0, r4
   1e424:	bl	153f8 <__assert_fail@plt+0x40c4>
   1e428:	mov	r3, #0
   1e42c:	str	r3, [r6]
   1e430:	str	r3, [r6, #4]
   1e434:	b	1decc <__assert_fail@plt+0xcb98>
   1e438:	beq	feac8ee4 <optarg@@GLIBC_2.4+0xfea96d04>
	...
   1e444:	andeq	r1, r2, pc, lsr r7
   1e448:	andeq	r1, r2, r8, lsl r5
   1e44c:	muleq	r1, r8, r7
   1e450:	andeq	r6, r1, r8, ror #25
   1e454:	andeq	r6, r1, ip, asr #13
   1e458:	andeq	r5, r1, r4, ror r6
   1e45c:	andeq	r6, r1, r4, lsr r6
   1e460:	ldr	r3, [pc, #96]	; 1e4c8 <__assert_fail@plt+0xd194>
   1e464:	mov	ip, r2
   1e468:	ldrb	r2, [r2, #28]
   1e46c:	ldr	r3, [r3]
   1e470:	push	{r4, lr}
   1e474:	and	r2, r2, #239	; 0xef
   1e478:	lsr	lr, r3, #21
   1e47c:	and	lr, lr, #16
   1e480:	orr	r2, r2, lr
   1e484:	orr	r2, r2, #128	; 0x80
   1e488:	strb	r2, [ip, #28]
   1e48c:	mov	r2, r1
   1e490:	mov	r1, r0
   1e494:	mov	r0, ip
   1e498:	bl	1d8c0 <__assert_fail@plt+0xc58c>
   1e49c:	subs	r2, r0, #0
   1e4a0:	popeq	{r4, pc}
   1e4a4:	ldr	r3, [pc, #32]	; 1e4cc <__assert_fail@plt+0xd198>
   1e4a8:	mov	r0, #0
   1e4ac:	add	r1, r3, #32
   1e4b0:	add	r3, r3, r2, lsl #2
   1e4b4:	pop	{r4, lr}
   1e4b8:	mov	r2, #5
   1e4bc:	ldr	r3, [r3, #416]	; 0x1a0
   1e4c0:	add	r1, r1, r3
   1e4c4:	b	11124 <dcgettext@plt>
   1e4c8:	ldrdeq	r2, [r3], -r0
   1e4cc:	andeq	r1, r2, r8, lsl r5
   1e4d0:	ldr	r3, [pc, #12]	; 1e4e4 <__assert_fail@plt+0xd1b0>
   1e4d4:	ldr	r2, [r3]
   1e4d8:	str	r0, [r3]
   1e4dc:	mov	r0, r2
   1e4e0:	bx	lr
   1e4e4:	ldrdeq	r2, [r3], -r0
   1e4e8:	push	{r4, r5, r6, lr}
   1e4ec:	mov	r2, #256	; 0x100
   1e4f0:	ldr	r5, [r0]
   1e4f4:	ldr	r6, [r0, #16]
   1e4f8:	mov	r4, r0
   1e4fc:	mov	r1, #0
   1e500:	mov	r0, r6
   1e504:	bl	11238 <memset@plt>
   1e508:	ldr	r1, [r5, #36]	; 0x24
   1e50c:	mov	r2, r6
   1e510:	mov	r0, r4
   1e514:	bl	16f04 <__assert_fail@plt+0x5bd0>
   1e518:	ldr	r1, [r5, #40]	; 0x28
   1e51c:	ldr	r3, [r5, #36]	; 0x24
   1e520:	cmp	r3, r1
   1e524:	beq	1e534 <__assert_fail@plt+0xd200>
   1e528:	mov	r2, r6
   1e52c:	mov	r0, r4
   1e530:	bl	16f04 <__assert_fail@plt+0x5bd0>
   1e534:	ldr	r1, [r5, #44]	; 0x2c
   1e538:	ldr	r3, [r5, #36]	; 0x24
   1e53c:	cmp	r3, r1
   1e540:	beq	1e550 <__assert_fail@plt+0xd21c>
   1e544:	mov	r2, r6
   1e548:	mov	r0, r4
   1e54c:	bl	16f04 <__assert_fail@plt+0x5bd0>
   1e550:	ldr	r1, [r5, #48]	; 0x30
   1e554:	ldr	r3, [r5, #36]	; 0x24
   1e558:	cmp	r3, r1
   1e55c:	beq	1e56c <__assert_fail@plt+0xd238>
   1e560:	mov	r2, r6
   1e564:	mov	r0, r4
   1e568:	bl	16f04 <__assert_fail@plt+0x5bd0>
   1e56c:	ldrb	r3, [r4, #28]
   1e570:	mov	r0, #0
   1e574:	orr	r3, r3, #8
   1e578:	strb	r3, [r4, #28]
   1e57c:	pop	{r4, r5, r6, pc}
   1e580:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e584:	sub	sp, sp, #44	; 0x2c
   1e588:	cmp	r3, r2
   1e58c:	ldr	ip, [sp, #80]	; 0x50
   1e590:	movle	lr, #0
   1e594:	movgt	lr, #1
   1e598:	orrs	lr, lr, r3, lsr #31
   1e59c:	ldr	r4, [sp, #88]	; 0x58
   1e5a0:	ldr	fp, [r0]
   1e5a4:	add	r8, r3, ip
   1e5a8:	mvnne	r7, #0
   1e5ac:	bne	1e724 <__assert_fail@plt+0xd3f0>
   1e5b0:	cmp	r8, r2
   1e5b4:	bgt	1e730 <__assert_fail@plt+0xd3fc>
   1e5b8:	cmp	ip, #0
   1e5bc:	cmpge	r3, r8
   1e5c0:	movgt	lr, #1
   1e5c4:	movle	lr, #0
   1e5c8:	bgt	1e730 <__assert_fail@plt+0xd3fc>
   1e5cc:	cmp	r8, #0
   1e5d0:	movlt	r8, lr
   1e5d4:	blt	1e5ec <__assert_fail@plt+0xd2b8>
   1e5d8:	cmp	r3, r8
   1e5dc:	movgt	lr, #0
   1e5e0:	movle	lr, #1
   1e5e4:	ands	ip, lr, ip, lsr #31
   1e5e8:	movne	r8, #0
   1e5ec:	ldr	lr, [pc, #700]	; 1e8b0 <__assert_fail@plt+0xd57c>
   1e5f0:	ldr	r6, [pc, #700]	; 1e8b4 <__assert_fail@plt+0xd580>
   1e5f4:	cmp	lr, #0
   1e5f8:	mov	ip, #1
   1e5fc:	moveq	ip, lr
   1e600:	cmp	r6, #0
   1e604:	mov	lr, #1
   1e608:	moveq	lr, r6
   1e60c:	mov	r7, r3
   1e610:	orr	r3, ip, lr
   1e614:	ands	r3, r3, #255	; 0xff
   1e618:	str	r2, [sp, #36]	; 0x24
   1e61c:	str	r1, [sp, #32]
   1e620:	mov	r6, r0
   1e624:	str	r3, [sp, #28]
   1e628:	beq	1e634 <__assert_fail@plt+0xd300>
   1e62c:	add	r0, fp, #136	; 0x88
   1e630:	bl	11094 <pthread_mutex_lock@plt>
   1e634:	ldrb	r3, [r6, #28]
   1e638:	cmp	r8, r7
   1e63c:	lsr	sl, r3, #5
   1e640:	and	sl, sl, #3
   1e644:	ble	1e664 <__assert_fail@plt+0xd330>
   1e648:	ldr	r2, [r6, #16]
   1e64c:	cmp	r2, #0
   1e650:	beq	1e664 <__assert_fail@plt+0xd330>
   1e654:	tst	r3, #8
   1e658:	bne	1e664 <__assert_fail@plt+0xd330>
   1e65c:	mov	r0, r6
   1e660:	bl	1e4e8 <__assert_fail@plt+0xd1b4>
   1e664:	ldrb	r2, [r6, #28]
   1e668:	lsr	r3, r2, #4
   1e66c:	and	r3, r3, #1
   1e670:	cmp	r4, #0
   1e674:	orreq	r3, r3, #1
   1e678:	cmp	r3, #0
   1e67c:	movne	r5, #1
   1e680:	movne	r4, #0
   1e684:	bne	1e6b0 <__assert_fail@plt+0xd37c>
   1e688:	and	r2, r2, #6
   1e68c:	cmp	r2, #4
   1e690:	ldr	r5, [r6, #24]
   1e694:	bne	1e738 <__assert_fail@plt+0xd404>
   1e698:	ldr	r2, [r4]
   1e69c:	cmp	r2, r5
   1e6a0:	bhi	1e738 <__assert_fail@plt+0xd404>
   1e6a4:	subs	r5, r2, #0
   1e6a8:	movle	r5, #1
   1e6ac:	movle	r4, r3
   1e6b0:	lsl	r0, r5, #3
   1e6b4:	bl	1fd58 <__assert_fail@plt+0xea24>
   1e6b8:	subs	r9, r0, #0
   1e6bc:	mvneq	r7, #1
   1e6c0:	beq	1e710 <__assert_fail@plt+0xd3dc>
   1e6c4:	ldr	r3, [sp, #84]	; 0x54
   1e6c8:	str	sl, [sp, #16]
   1e6cc:	str	r3, [sp, #4]
   1e6d0:	str	r9, [sp, #12]
   1e6d4:	str	r5, [sp, #8]
   1e6d8:	str	r8, [sp]
   1e6dc:	mov	r3, r7
   1e6e0:	ldr	r2, [sp, #36]	; 0x24
   1e6e4:	ldr	r1, [sp, #32]
   1e6e8:	mov	r0, r6
   1e6ec:	bl	1af40 <__assert_fail@plt+0x9c0c>
   1e6f0:	cmp	r0, #0
   1e6f4:	beq	1e740 <__assert_fail@plt+0xd40c>
   1e6f8:	cmp	r0, #1
   1e6fc:	mvneq	r7, #0
   1e700:	beq	1e708 <__assert_fail@plt+0xd3d4>
   1e704:	mvn	r7, #1
   1e708:	mov	r0, r9
   1e70c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e710:	ldr	r3, [sp, #28]
   1e714:	cmp	r3, #0
   1e718:	beq	1e724 <__assert_fail@plt+0xd3f0>
   1e71c:	add	r0, fp, #136	; 0x88
   1e720:	bl	10ff8 <pthread_mutex_unlock@plt>
   1e724:	mov	r0, r7
   1e728:	add	sp, sp, #44	; 0x2c
   1e72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e730:	mov	r8, r2
   1e734:	b	1e5ec <__assert_fail@plt+0xd2b8>
   1e738:	add	r5, r5, #1
   1e73c:	b	1e6b0 <__assert_fail@plt+0xd37c>
   1e740:	cmp	r4, #0
   1e744:	beq	1e794 <__assert_fail@plt+0xd460>
   1e748:	ldrb	r8, [r6, #28]
   1e74c:	add	sl, r5, #1
   1e750:	lsr	r8, r8, #1
   1e754:	ands	r8, r8, #3
   1e758:	bne	1e7d8 <__assert_fail@plt+0xd4a4>
   1e75c:	lsl	r8, sl, #2
   1e760:	mov	r0, r8
   1e764:	bl	1fd58 <__assert_fail@plt+0xea24>
   1e768:	cmp	r0, #0
   1e76c:	str	r0, [r4, #4]
   1e770:	bne	1e7ac <__assert_fail@plt+0xd478>
   1e774:	mov	r8, #0
   1e778:	ldrb	r3, [r6, #28]
   1e77c:	and	r8, r8, #3
   1e780:	bic	r3, r3, #6
   1e784:	orr	r8, r3, r8, lsl #1
   1e788:	tst	r8, #6
   1e78c:	strb	r8, [r6, #28]
   1e790:	beq	1e704 <__assert_fail@plt+0xd3d0>
   1e794:	ldrb	r3, [sp, #92]	; 0x5c
   1e798:	cmp	r3, #0
   1e79c:	ldrne	r3, [r9, #4]
   1e7a0:	subne	r7, r3, r7
   1e7a4:	ldreq	r7, [r9]
   1e7a8:	b	1e708 <__assert_fail@plt+0xd3d4>
   1e7ac:	mov	r0, r8
   1e7b0:	bl	1fd58 <__assert_fail@plt+0xea24>
   1e7b4:	cmp	r0, #0
   1e7b8:	mov	r8, r0
   1e7bc:	str	r0, [r4, #8]
   1e7c0:	strne	sl, [r4]
   1e7c4:	movne	r8, #1
   1e7c8:	bne	1e848 <__assert_fail@plt+0xd514>
   1e7cc:	ldr	r0, [r4, #4]
   1e7d0:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e7d4:	b	1e778 <__assert_fail@plt+0xd444>
   1e7d8:	cmp	r8, #1
   1e7dc:	movne	r8, #2
   1e7e0:	bne	1e848 <__assert_fail@plt+0xd514>
   1e7e4:	ldr	r3, [r4]
   1e7e8:	cmp	r3, sl
   1e7ec:	bcs	1e848 <__assert_fail@plt+0xd514>
   1e7f0:	lsl	r2, sl, #2
   1e7f4:	mov	r1, r2
   1e7f8:	ldr	r0, [r4, #4]
   1e7fc:	str	r2, [sp, #36]	; 0x24
   1e800:	bl	1fd98 <__assert_fail@plt+0xea64>
   1e804:	subs	r3, r0, #0
   1e808:	str	r3, [sp, #32]
   1e80c:	beq	1e774 <__assert_fail@plt+0xd440>
   1e810:	ldr	r2, [sp, #36]	; 0x24
   1e814:	ldr	r0, [r4, #8]
   1e818:	mov	r1, r2
   1e81c:	bl	1fd98 <__assert_fail@plt+0xea64>
   1e820:	ldr	r3, [sp, #32]
   1e824:	subs	r2, r0, #0
   1e828:	strne	r3, [r4, #4]
   1e82c:	strne	r2, [r4, #8]
   1e830:	strne	sl, [r4]
   1e834:	bne	1e848 <__assert_fail@plt+0xd514>
   1e838:	mov	r0, r3
   1e83c:	str	r2, [sp, #32]
   1e840:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e844:	b	1e774 <__assert_fail@plt+0xd440>
   1e848:	mov	r2, r9
   1e84c:	mov	r3, #0
   1e850:	cmp	r5, r3
   1e854:	add	r2, r2, #8
   1e858:	bgt	1e890 <__assert_fail@plt+0xd55c>
   1e85c:	bic	r5, r5, r5, asr #31
   1e860:	mvn	r2, #0
   1e864:	lsl	r3, r5, #2
   1e868:	ldr	r1, [r4]
   1e86c:	cmp	r5, r1
   1e870:	bcs	1e778 <__assert_fail@plt+0xd444>
   1e874:	ldr	r1, [r4, #4]
   1e878:	ldr	r0, [r4, #8]
   1e87c:	add	r5, r5, #1
   1e880:	str	r2, [r0, r3]
   1e884:	str	r2, [r1, r3]
   1e888:	add	r3, r3, #4
   1e88c:	b	1e868 <__assert_fail@plt+0xd534>
   1e890:	ldr	r1, [r4, #4]
   1e894:	ldr	r0, [r2, #-8]
   1e898:	str	r0, [r1, r3, lsl #2]
   1e89c:	ldr	r1, [r4, #8]
   1e8a0:	ldr	r0, [r2, #-4]
   1e8a4:	str	r0, [r1, r3, lsl #2]
   1e8a8:	add	r3, r3, #1
   1e8ac:	b	1e850 <__assert_fail@plt+0xd51c>
	...
   1e8b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e8bc:	sub	sp, sp, #20
   1e8c0:	mov	r7, r3
   1e8c4:	ldr	r9, [sp, #72]	; 0x48
   1e8c8:	ldr	r5, [sp, #56]	; 0x38
   1e8cc:	orr	r3, r2, r9
   1e8d0:	orrs	r3, r3, r5
   1e8d4:	bpl	1e8fc <__assert_fail@plt+0xd5c8>
   1e8d8:	mvn	r4, #1
   1e8dc:	mov	r0, r4
   1e8e0:	add	sp, sp, #20
   1e8e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e8e8:	mov	r7, r8
   1e8ec:	mov	r6, #0
   1e8f0:	b	1e964 <__assert_fail@plt+0xd630>
   1e8f4:	mov	r6, r4
   1e8f8:	b	1e964 <__assert_fail@plt+0xd630>
   1e8fc:	cmp	r5, #0
   1e900:	mov	sl, r0
   1e904:	mov	r8, r1
   1e908:	mov	r4, r2
   1e90c:	blt	1e920 <__assert_fail@plt+0xd5ec>
   1e910:	mvn	r3, #-2147483648	; 0x80000000
   1e914:	sub	r3, r3, r5
   1e918:	cmp	r4, r3
   1e91c:	bgt	1e8d8 <__assert_fail@plt+0xd5a4>
   1e920:	cmp	r5, #0
   1e924:	add	fp, r4, r5
   1e928:	ble	1e8e8 <__assert_fail@plt+0xd5b4>
   1e92c:	cmp	r4, #0
   1e930:	beq	1e8f4 <__assert_fail@plt+0xd5c0>
   1e934:	mov	r0, fp
   1e938:	bl	1fd58 <__assert_fail@plt+0xea24>
   1e93c:	subs	r6, r0, #0
   1e940:	beq	1e8d8 <__assert_fail@plt+0xd5a4>
   1e944:	mov	r2, r4
   1e948:	mov	r1, r8
   1e94c:	bl	110ac <memcpy@plt>
   1e950:	mov	r1, r7
   1e954:	mov	r2, r5
   1e958:	add	r0, r6, r4
   1e95c:	bl	110ac <memcpy@plt>
   1e960:	mov	r7, r6
   1e964:	ldrb	r3, [sp, #76]	; 0x4c
   1e968:	str	r9, [sp, #4]
   1e96c:	mov	r2, fp
   1e970:	str	r3, [sp, #12]
   1e974:	ldr	r3, [sp, #68]	; 0x44
   1e978:	mov	r1, r7
   1e97c:	str	r3, [sp, #8]
   1e980:	ldr	r3, [sp, #64]	; 0x40
   1e984:	mov	r0, sl
   1e988:	str	r3, [sp]
   1e98c:	ldr	r3, [sp, #60]	; 0x3c
   1e990:	bl	1e580 <__assert_fail@plt+0xd24c>
   1e994:	mov	r4, r0
   1e998:	mov	r0, r6
   1e99c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1e9a0:	b	1e8dc <__assert_fail@plt+0xd5a8>
   1e9a4:	ldr	r3, [pc, #232]	; 1ea94 <__assert_fail@plt+0xd760>
   1e9a8:	tst	r2, #1
   1e9ac:	push	{r4, r5, r6, r7, r8, lr}
   1e9b0:	mov	r4, r0
   1e9b4:	ldr	r6, [pc, #220]	; 1ea98 <__assert_fail@plt+0xd764>
   1e9b8:	moveq	r6, r3
   1e9bc:	mov	r3, #0
   1e9c0:	str	r3, [r0]
   1e9c4:	str	r3, [r0, #4]
   1e9c8:	str	r3, [r0, #8]
   1e9cc:	mov	r0, #256	; 0x100
   1e9d0:	mov	r7, r1
   1e9d4:	mov	r5, r2
   1e9d8:	bl	1fd58 <__assert_fail@plt+0xea24>
   1e9dc:	cmp	r0, #0
   1e9e0:	str	r0, [r4, #16]
   1e9e4:	beq	1ea8c <__assert_fail@plt+0xd758>
   1e9e8:	ldrb	r2, [r4, #28]
   1e9ec:	tst	r5, #2
   1e9f0:	movne	r3, #4194304	; 0x400000
   1e9f4:	moveq	r3, #0
   1e9f8:	tst	r5, #4
   1e9fc:	orrne	r2, r2, #128	; 0x80
   1ea00:	biceq	r2, r2, #128	; 0x80
   1ea04:	strb	r2, [r4, #28]
   1ea08:	ldrb	r2, [r4, #28]
   1ea0c:	lsl	r5, r5, #1
   1ea10:	and	r5, r5, #16
   1ea14:	bic	r2, r2, #16
   1ea18:	orr	r6, r6, r3
   1ea1c:	orr	r5, r5, r2
   1ea20:	mov	r3, #0
   1ea24:	bicne	r6, r6, #64	; 0x40
   1ea28:	strb	r5, [r4, #28]
   1ea2c:	str	r3, [r4, #20]
   1ea30:	mov	r0, r7
   1ea34:	orrne	r6, r6, #256	; 0x100
   1ea38:	bl	111fc <strlen@plt>
   1ea3c:	mov	r3, r6
   1ea40:	mov	r1, r7
   1ea44:	mov	r2, r0
   1ea48:	mov	r0, r4
   1ea4c:	bl	1d8c0 <__assert_fail@plt+0xc58c>
   1ea50:	cmp	r0, #16
   1ea54:	mov	r5, r0
   1ea58:	beq	1ea74 <__assert_fail@plt+0xd740>
   1ea5c:	cmp	r0, #0
   1ea60:	bne	1ea78 <__assert_fail@plt+0xd744>
   1ea64:	mov	r0, r4
   1ea68:	bl	1e4e8 <__assert_fail@plt+0xd1b4>
   1ea6c:	mov	r0, r5
   1ea70:	pop	{r4, r5, r6, r7, r8, pc}
   1ea74:	mov	r5, #8
   1ea78:	ldr	r0, [r4, #16]
   1ea7c:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1ea80:	mov	r3, #0
   1ea84:	str	r3, [r4, #16]
   1ea88:	b	1ea6c <__assert_fail@plt+0xd738>
   1ea8c:	mov	r0, #12
   1ea90:	pop	{r4, r5, r6, r7, r8, pc}
   1ea94:	smlabteq	r1, r6, r2, r0
   1ea98:	strdeq	fp, [r3], -ip
   1ea9c:	cmp	r0, #16
   1eaa0:	push	{r4, r5, r6, r7, r8, lr}
   1eaa4:	bls	1eaac <__assert_fail@plt+0xd778>
   1eaa8:	bl	11310 <abort@plt>
   1eaac:	mov	r4, r3
   1eab0:	ldr	r3, [pc, #88]	; 1eb10 <__assert_fail@plt+0xd7dc>
   1eab4:	mov	r6, r2
   1eab8:	add	r1, r3, #32
   1eabc:	add	r3, r3, r0, lsl #2
   1eac0:	mov	r2, #5
   1eac4:	ldr	r3, [r3, #416]	; 0x1a0
   1eac8:	mov	r0, #0
   1eacc:	add	r1, r1, r3
   1ead0:	bl	11124 <dcgettext@plt>
   1ead4:	mov	r7, r0
   1ead8:	bl	111fc <strlen@plt>
   1eadc:	cmp	r4, #0
   1eae0:	add	r5, r0, #1
   1eae4:	beq	1eb08 <__assert_fail@plt+0xd7d4>
   1eae8:	cmp	r5, r4
   1eaec:	subhi	r2, r4, #1
   1eaf0:	movhi	r3, #0
   1eaf4:	strbhi	r3, [r6, r2]
   1eaf8:	movls	r2, r5
   1eafc:	mov	r1, r7
   1eb00:	mov	r0, r6
   1eb04:	bl	110ac <memcpy@plt>
   1eb08:	mov	r0, r5
   1eb0c:	pop	{r4, r5, r6, r7, r8, pc}
   1eb10:	andeq	r1, r2, r8, lsl r5
   1eb14:	push	{r4, r5, r6, lr}
   1eb18:	mov	r4, r0
   1eb1c:	ldr	r5, [r0]
   1eb20:	cmp	r5, #0
   1eb24:	beq	1eb64 <__assert_fail@plt+0xd830>
   1eb28:	ldr	r2, [pc, #92]	; 1eb8c <__assert_fail@plt+0xd858>
   1eb2c:	ldr	r1, [pc, #92]	; 1eb90 <__assert_fail@plt+0xd85c>
   1eb30:	cmp	r2, #0
   1eb34:	mov	r3, #1
   1eb38:	moveq	r3, r2
   1eb3c:	cmp	r1, #0
   1eb40:	mov	r2, #1
   1eb44:	moveq	r2, r1
   1eb48:	orr	r3, r3, r2
   1eb4c:	tst	r3, #1
   1eb50:	beq	1eb5c <__assert_fail@plt+0xd828>
   1eb54:	add	r0, r5, #136	; 0x88
   1eb58:	bl	11064 <pthread_mutex_destroy@plt>
   1eb5c:	mov	r0, r5
   1eb60:	bl	153f8 <__assert_fail@plt+0x40c4>
   1eb64:	mov	r5, #0
   1eb68:	ldr	r0, [r4, #16]
   1eb6c:	str	r5, [r4]
   1eb70:	str	r5, [r4, #4]
   1eb74:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1eb78:	str	r5, [r4, #16]
   1eb7c:	ldr	r0, [r4, #20]
   1eb80:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1eb84:	str	r5, [r4, #20]
   1eb88:	pop	{r4, r5, r6, pc}
	...
   1eb94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb98:	sub	sp, sp, #36	; 0x24
   1eb9c:	ldr	r9, [sp, #72]	; 0x48
   1eba0:	bics	ip, r9, #7
   1eba4:	movne	r0, #2
   1eba8:	bne	1ec6c <__assert_fail@plt+0xd938>
   1ebac:	ands	fp, r9, #4
   1ebb0:	mov	r8, r3
   1ebb4:	str	r2, [sp, #28]
   1ebb8:	mov	r7, r1
   1ebbc:	mov	r6, r0
   1ebc0:	ldrne	fp, [r3]
   1ebc4:	ldrne	r5, [r3, #4]
   1ebc8:	bne	1ebd8 <__assert_fail@plt+0xd8a4>
   1ebcc:	mov	r0, r1
   1ebd0:	bl	111fc <strlen@plt>
   1ebd4:	mov	r5, r0
   1ebd8:	ldr	r2, [pc, #148]	; 1ec74 <__assert_fail@plt+0xd940>
   1ebdc:	ldr	r1, [pc, #148]	; 1ec78 <__assert_fail@plt+0xd944>
   1ebe0:	cmp	r2, #0
   1ebe4:	mov	r4, #1
   1ebe8:	moveq	r4, r2
   1ebec:	cmp	r1, #0
   1ebf0:	mov	r2, #1
   1ebf4:	moveq	r2, r1
   1ebf8:	orr	r4, r4, r2
   1ebfc:	ands	r4, r4, #255	; 0xff
   1ec00:	ldr	sl, [r6]
   1ec04:	beq	1ec10 <__assert_fail@plt+0xd8dc>
   1ec08:	add	r0, sl, #136	; 0x88
   1ec0c:	bl	11094 <pthread_mutex_lock@plt>
   1ec10:	ldrb	r2, [r6, #28]
   1ec14:	mov	r1, r7
   1ec18:	str	r5, [sp, #4]
   1ec1c:	tst	r2, #16
   1ec20:	movne	r2, #0
   1ec24:	ldreq	r3, [sp, #28]
   1ec28:	strne	r2, [sp, #12]
   1ec2c:	strne	r2, [sp, #8]
   1ec30:	streq	r3, [sp, #8]
   1ec34:	streq	r8, [sp, #12]
   1ec38:	str	r5, [sp]
   1ec3c:	mov	r2, r5
   1ec40:	str	r9, [sp, #16]
   1ec44:	mov	r3, fp
   1ec48:	mov	r0, r6
   1ec4c:	bl	1af40 <__assert_fail@plt+0x9c0c>
   1ec50:	cmp	r4, #0
   1ec54:	mov	r5, r0
   1ec58:	beq	1ec64 <__assert_fail@plt+0xd930>
   1ec5c:	add	r0, sl, #136	; 0x88
   1ec60:	bl	10ff8 <pthread_mutex_unlock@plt>
   1ec64:	adds	r0, r5, #0
   1ec68:	movne	r0, #1
   1ec6c:	add	sp, sp, #36	; 0x24
   1ec70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...
   1ec7c:	push	{r0, r1, r2, r3, r4, lr}
   1ec80:	mov	ip, #1
   1ec84:	str	ip, [sp, #12]
   1ec88:	ldr	ip, [sp, #24]
   1ec8c:	stmib	sp, {r2, ip}
   1ec90:	mov	ip, #0
   1ec94:	str	ip, [sp]
   1ec98:	bl	1e580 <__assert_fail@plt+0xd24c>
   1ec9c:	add	sp, sp, #20
   1eca0:	pop	{pc}		; (ldr pc, [sp], #4)
   1eca4:	push	{r0, r1, r2, r3, r4, lr}
   1eca8:	mov	ip, #0
   1ecac:	str	ip, [sp, #12]
   1ecb0:	ldr	ip, [sp, #28]
   1ecb4:	stmib	sp, {r2, ip}
   1ecb8:	ldr	ip, [sp, #24]
   1ecbc:	str	ip, [sp]
   1ecc0:	bl	1e580 <__assert_fail@plt+0xd24c>
   1ecc4:	add	sp, sp, #20
   1ecc8:	pop	{pc}		; (ldr pc, [sp], #4)
   1eccc:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ecd0:	mov	ip, #1
   1ecd4:	str	ip, [sp, #20]
   1ecd8:	ldr	ip, [sp, #44]	; 0x2c
   1ecdc:	str	ip, [sp, #16]
   1ece0:	ldr	ip, [sp, #40]	; 0x28
   1ece4:	str	ip, [sp, #12]
   1ece8:	mov	ip, #0
   1ecec:	str	ip, [sp, #8]
   1ecf0:	ldr	ip, [sp, #36]	; 0x24
   1ecf4:	str	ip, [sp, #4]
   1ecf8:	ldr	ip, [sp, #32]
   1ecfc:	str	ip, [sp]
   1ed00:	bl	1e8b8 <__assert_fail@plt+0xd584>
   1ed04:	add	sp, sp, #28
   1ed08:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed0c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1ed10:	mov	ip, #0
   1ed14:	str	ip, [sp, #20]
   1ed18:	ldr	ip, [sp, #48]	; 0x30
   1ed1c:	str	ip, [sp, #16]
   1ed20:	ldr	ip, [sp, #44]	; 0x2c
   1ed24:	str	ip, [sp, #12]
   1ed28:	ldr	ip, [sp, #40]	; 0x28
   1ed2c:	str	ip, [sp, #8]
   1ed30:	ldr	ip, [sp, #36]	; 0x24
   1ed34:	str	ip, [sp, #4]
   1ed38:	ldr	ip, [sp, #32]
   1ed3c:	str	ip, [sp]
   1ed40:	bl	1e8b8 <__assert_fail@plt+0xd584>
   1ed44:	add	sp, sp, #28
   1ed48:	pop	{pc}		; (ldr pc, [sp], #4)
   1ed4c:	ldrb	ip, [r0, #28]
   1ed50:	cmp	r2, #0
   1ed54:	bicne	ip, ip, #4
   1ed58:	orrne	ip, ip, #2
   1ed5c:	strbne	ip, [r0, #28]
   1ed60:	stmne	r1, {r2, r3}
   1ed64:	ldrne	r3, [sp]
   1ed68:	biceq	ip, ip, #6
   1ed6c:	strbeq	ip, [r0, #28]
   1ed70:	strne	r3, [r1, #8]
   1ed74:	streq	r2, [r1]
   1ed78:	streq	r2, [r1, #8]
   1ed7c:	streq	r2, [r1, #4]
   1ed80:	bx	lr
   1ed84:	push	{r4, r5, r6, lr}
   1ed88:	sub	sp, sp, #32
   1ed8c:	cmp	r1, #0
   1ed90:	mov	r5, r0
   1ed94:	ldr	r4, [sp, #48]	; 0x30
   1ed98:	ldr	r6, [sp, #52]	; 0x34
   1ed9c:	beq	1ee50 <__assert_fail@plt+0xdb1c>
   1eda0:	stm	sp, {r2, r3}
   1eda4:	mov	r3, r1
   1eda8:	ldr	r2, [pc, #860]	; 1f10c <__assert_fail@plt+0xddd8>
   1edac:	mov	r1, #1
   1edb0:	bl	11268 <__fprintf_chk@plt>
   1edb4:	mov	r2, #5
   1edb8:	ldr	r1, [pc, #848]	; 1f110 <__assert_fail@plt+0xdddc>
   1edbc:	mov	r0, #0
   1edc0:	bl	11124 <dcgettext@plt>
   1edc4:	ldr	r3, [pc, #840]	; 1f114 <__assert_fail@plt+0xdde0>
   1edc8:	ldr	r2, [pc, #840]	; 1f118 <__assert_fail@plt+0xdde4>
   1edcc:	str	r3, [sp]
   1edd0:	mov	r1, #1
   1edd4:	mov	r3, r0
   1edd8:	mov	r0, r5
   1eddc:	bl	11268 <__fprintf_chk@plt>
   1ede0:	mov	r1, r5
   1ede4:	mov	r0, #10
   1ede8:	bl	1110c <fputc_unlocked@plt>
   1edec:	mov	r2, #5
   1edf0:	ldr	r1, [pc, #804]	; 1f11c <__assert_fail@plt+0xdde8>
   1edf4:	mov	r0, #0
   1edf8:	bl	11124 <dcgettext@plt>
   1edfc:	mov	r1, #1
   1ee00:	ldr	r3, [pc, #792]	; 1f120 <__assert_fail@plt+0xddec>
   1ee04:	mov	r2, r0
   1ee08:	mov	r0, r5
   1ee0c:	bl	11268 <__fprintf_chk@plt>
   1ee10:	mov	r1, r5
   1ee14:	mov	r0, #10
   1ee18:	bl	1110c <fputc_unlocked@plt>
   1ee1c:	cmp	r6, #9
   1ee20:	ldrls	pc, [pc, r6, lsl #2]
   1ee24:	b	1f100 <__assert_fail@plt+0xddcc>
   1ee28:	andeq	lr, r1, r0, asr #30
   1ee2c:	andeq	lr, r1, r8, ror #28
   1ee30:	muleq	r1, r4, lr
   1ee34:	andeq	lr, r1, r8, asr #29
   1ee38:	andeq	lr, r1, r4, lsl #30
   1ee3c:	andeq	lr, r1, r8, asr #30
   1ee40:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1ee44:	andeq	lr, r1, r0, ror #31
   1ee48:	andeq	pc, r1, r8, lsr r0	; <UNPREDICTABLE>
   1ee4c:	muleq	r1, r8, r0
   1ee50:	str	r3, [sp]
   1ee54:	mov	r1, #1
   1ee58:	mov	r3, r2
   1ee5c:	ldr	r2, [pc, #704]	; 1f124 <__assert_fail@plt+0xddf0>
   1ee60:	bl	11268 <__fprintf_chk@plt>
   1ee64:	b	1edb4 <__assert_fail@plt+0xda80>
   1ee68:	mov	r2, #5
   1ee6c:	ldr	r1, [pc, #692]	; 1f128 <__assert_fail@plt+0xddf4>
   1ee70:	mov	r0, #0
   1ee74:	bl	11124 <dcgettext@plt>
   1ee78:	ldr	r3, [r4]
   1ee7c:	mov	r1, #1
   1ee80:	mov	r2, r0
   1ee84:	mov	r0, r5
   1ee88:	add	sp, sp, #32
   1ee8c:	pop	{r4, r5, r6, lr}
   1ee90:	b	11268 <__fprintf_chk@plt>
   1ee94:	mov	r2, #5
   1ee98:	ldr	r1, [pc, #652]	; 1f12c <__assert_fail@plt+0xddf8>
   1ee9c:	mov	r0, #0
   1eea0:	bl	11124 <dcgettext@plt>
   1eea4:	ldr	r3, [r4, #4]
   1eea8:	mov	r1, #1
   1eeac:	str	r3, [sp, #48]	; 0x30
   1eeb0:	ldr	r3, [r4]
   1eeb4:	mov	r2, r0
   1eeb8:	mov	r0, r5
   1eebc:	add	sp, sp, #32
   1eec0:	pop	{r4, r5, r6, lr}
   1eec4:	b	11268 <__fprintf_chk@plt>
   1eec8:	mov	r2, #5
   1eecc:	ldr	r1, [pc, #604]	; 1f130 <__assert_fail@plt+0xddfc>
   1eed0:	mov	r0, #0
   1eed4:	bl	11124 <dcgettext@plt>
   1eed8:	ldr	r3, [r4, #8]
   1eedc:	mov	r1, #1
   1eee0:	str	r3, [sp, #52]	; 0x34
   1eee4:	ldr	r3, [r4, #4]
   1eee8:	str	r3, [sp, #48]	; 0x30
   1eeec:	ldr	r3, [r4]
   1eef0:	mov	r2, r0
   1eef4:	mov	r0, r5
   1eef8:	add	sp, sp, #32
   1eefc:	pop	{r4, r5, r6, lr}
   1ef00:	b	11268 <__fprintf_chk@plt>
   1ef04:	mov	r2, #5
   1ef08:	ldr	r1, [pc, #548]	; 1f134 <__assert_fail@plt+0xde00>
   1ef0c:	mov	r0, #0
   1ef10:	bl	11124 <dcgettext@plt>
   1ef14:	ldr	r3, [r4, #12]
   1ef18:	mov	r1, #1
   1ef1c:	str	r3, [sp, #8]
   1ef20:	ldr	r3, [r4, #8]
   1ef24:	str	r3, [sp, #4]
   1ef28:	ldr	r3, [r4, #4]
   1ef2c:	str	r3, [sp]
   1ef30:	ldr	r3, [r4]
   1ef34:	mov	r2, r0
   1ef38:	mov	r0, r5
   1ef3c:	bl	11268 <__fprintf_chk@plt>
   1ef40:	add	sp, sp, #32
   1ef44:	pop	{r4, r5, r6, pc}
   1ef48:	mov	r2, #5
   1ef4c:	ldr	r1, [pc, #484]	; 1f138 <__assert_fail@plt+0xde04>
   1ef50:	mov	r0, #0
   1ef54:	bl	11124 <dcgettext@plt>
   1ef58:	ldr	r3, [r4, #16]
   1ef5c:	mov	r1, #1
   1ef60:	str	r3, [sp, #12]
   1ef64:	ldr	r3, [r4, #12]
   1ef68:	str	r3, [sp, #8]
   1ef6c:	ldr	r3, [r4, #8]
   1ef70:	str	r3, [sp, #4]
   1ef74:	ldr	r3, [r4, #4]
   1ef78:	str	r3, [sp]
   1ef7c:	ldr	r3, [r4]
   1ef80:	mov	r2, r0
   1ef84:	mov	r0, r5
   1ef88:	bl	11268 <__fprintf_chk@plt>
   1ef8c:	b	1ef40 <__assert_fail@plt+0xdc0c>
   1ef90:	mov	r2, #5
   1ef94:	ldr	r1, [pc, #416]	; 1f13c <__assert_fail@plt+0xde08>
   1ef98:	mov	r0, #0
   1ef9c:	bl	11124 <dcgettext@plt>
   1efa0:	ldr	r3, [r4, #20]
   1efa4:	mov	r1, #1
   1efa8:	str	r3, [sp, #16]
   1efac:	ldr	r3, [r4, #16]
   1efb0:	str	r3, [sp, #12]
   1efb4:	ldr	r3, [r4, #12]
   1efb8:	str	r3, [sp, #8]
   1efbc:	ldr	r3, [r4, #8]
   1efc0:	str	r3, [sp, #4]
   1efc4:	ldr	r3, [r4, #4]
   1efc8:	str	r3, [sp]
   1efcc:	ldr	r3, [r4]
   1efd0:	mov	r2, r0
   1efd4:	mov	r0, r5
   1efd8:	bl	11268 <__fprintf_chk@plt>
   1efdc:	b	1ef40 <__assert_fail@plt+0xdc0c>
   1efe0:	mov	r2, #5
   1efe4:	ldr	r1, [pc, #340]	; 1f140 <__assert_fail@plt+0xde0c>
   1efe8:	mov	r0, #0
   1efec:	bl	11124 <dcgettext@plt>
   1eff0:	ldr	r3, [r4, #24]
   1eff4:	mov	r1, #1
   1eff8:	str	r3, [sp, #20]
   1effc:	ldr	r3, [r4, #20]
   1f000:	str	r3, [sp, #16]
   1f004:	ldr	r3, [r4, #16]
   1f008:	str	r3, [sp, #12]
   1f00c:	ldr	r3, [r4, #12]
   1f010:	str	r3, [sp, #8]
   1f014:	ldr	r3, [r4, #8]
   1f018:	str	r3, [sp, #4]
   1f01c:	ldr	r3, [r4, #4]
   1f020:	str	r3, [sp]
   1f024:	ldr	r3, [r4]
   1f028:	mov	r2, r0
   1f02c:	mov	r0, r5
   1f030:	bl	11268 <__fprintf_chk@plt>
   1f034:	b	1ef40 <__assert_fail@plt+0xdc0c>
   1f038:	mov	r2, #5
   1f03c:	ldr	r1, [pc, #256]	; 1f144 <__assert_fail@plt+0xde10>
   1f040:	mov	r0, #0
   1f044:	bl	11124 <dcgettext@plt>
   1f048:	ldr	r3, [r4, #28]
   1f04c:	mov	r1, #1
   1f050:	str	r3, [sp, #24]
   1f054:	ldr	r3, [r4, #24]
   1f058:	str	r3, [sp, #20]
   1f05c:	ldr	r3, [r4, #20]
   1f060:	str	r3, [sp, #16]
   1f064:	ldr	r3, [r4, #16]
   1f068:	str	r3, [sp, #12]
   1f06c:	ldr	r3, [r4, #12]
   1f070:	str	r3, [sp, #8]
   1f074:	ldr	r3, [r4, #8]
   1f078:	str	r3, [sp, #4]
   1f07c:	ldr	r3, [r4, #4]
   1f080:	str	r3, [sp]
   1f084:	ldr	r3, [r4]
   1f088:	mov	r2, r0
   1f08c:	mov	r0, r5
   1f090:	bl	11268 <__fprintf_chk@plt>
   1f094:	b	1ef40 <__assert_fail@plt+0xdc0c>
   1f098:	ldr	r1, [pc, #168]	; 1f148 <__assert_fail@plt+0xde14>
   1f09c:	mov	r2, #5
   1f0a0:	mov	r0, #0
   1f0a4:	bl	11124 <dcgettext@plt>
   1f0a8:	ldr	r3, [r4, #32]
   1f0ac:	mov	r1, #1
   1f0b0:	str	r3, [sp, #28]
   1f0b4:	ldr	r3, [r4, #28]
   1f0b8:	str	r3, [sp, #24]
   1f0bc:	ldr	r3, [r4, #24]
   1f0c0:	str	r3, [sp, #20]
   1f0c4:	ldr	r3, [r4, #20]
   1f0c8:	str	r3, [sp, #16]
   1f0cc:	ldr	r3, [r4, #16]
   1f0d0:	str	r3, [sp, #12]
   1f0d4:	ldr	r3, [r4, #12]
   1f0d8:	str	r3, [sp, #8]
   1f0dc:	ldr	r3, [r4, #8]
   1f0e0:	str	r3, [sp, #4]
   1f0e4:	ldr	r3, [r4, #4]
   1f0e8:	str	r3, [sp]
   1f0ec:	ldr	r3, [r4]
   1f0f0:	mov	r2, r0
   1f0f4:	mov	r0, r5
   1f0f8:	bl	11268 <__fprintf_chk@plt>
   1f0fc:	b	1ef40 <__assert_fail@plt+0xdc0c>
   1f100:	mov	r2, #5
   1f104:	ldr	r1, [pc, #64]	; 1f14c <__assert_fail@plt+0xde18>
   1f108:	b	1f0a0 <__assert_fail@plt+0xdd6c>
   1f10c:	andeq	r1, r2, r1, asr #14
   1f110:	andeq	r1, r2, r4, asr r7
   1f114:	andeq	r0, r0, r6, ror #15
   1f118:	andeq	r1, r2, r2, lsr #20
   1f11c:	andeq	r1, r2, r8, asr r7
   1f120:	andeq	r1, r2, r3, lsl #16
   1f124:	andeq	r1, r2, sp, asr #14
   1f128:	andeq	r1, r2, r5, lsr #16
   1f12c:	andeq	r1, r2, r5, lsr r8
   1f130:	andeq	r1, r2, ip, asr #16
   1f134:	andeq	r1, r2, r8, ror #16
   1f138:	andeq	r1, r2, r8, lsl #17
   1f13c:	andeq	r1, r2, ip, lsr #17
   1f140:	ldrdeq	r1, [r2], -r4
   1f144:	andeq	r1, r2, r0, lsl #18
   1f148:	andeq	r1, r2, r0, lsr r9
   1f14c:	andeq	r1, r2, r4, ror #18
   1f150:	push	{r0, r1, r4, lr}
   1f154:	mov	ip, #0
   1f158:	ldr	lr, [sp, #16]
   1f15c:	ldr	r4, [lr, ip, lsl #2]
   1f160:	cmp	r4, #0
   1f164:	bne	1f17c <__assert_fail@plt+0xde48>
   1f168:	str	ip, [sp, #4]
   1f16c:	str	lr, [sp]
   1f170:	bl	1ed84 <__assert_fail@plt+0xda50>
   1f174:	add	sp, sp, #8
   1f178:	pop	{r4, pc}
   1f17c:	add	ip, ip, #1
   1f180:	b	1f15c <__assert_fail@plt+0xde28>
   1f184:	push	{r4, r5, lr}
   1f188:	sub	sp, sp, #52	; 0x34
   1f18c:	mov	ip, #0
   1f190:	ldr	r5, [sp, #64]	; 0x40
   1f194:	add	lr, sp, #8
   1f198:	ldr	r4, [r5, ip, lsl #2]
   1f19c:	cmp	r4, #0
   1f1a0:	str	r4, [lr, ip, lsl #2]
   1f1a4:	beq	1f1b4 <__assert_fail@plt+0xde80>
   1f1a8:	add	ip, ip, #1
   1f1ac:	cmp	ip, #10
   1f1b0:	bne	1f198 <__assert_fail@plt+0xde64>
   1f1b4:	str	ip, [sp, #4]
   1f1b8:	str	lr, [sp]
   1f1bc:	bl	1ed84 <__assert_fail@plt+0xda50>
   1f1c0:	add	sp, sp, #52	; 0x34
   1f1c4:	pop	{r4, r5, pc}
   1f1c8:	push	{r3}		; (str r3, [sp, #-4]!)
   1f1cc:	push	{r0, r1, r2, r3, lr}
   1f1d0:	add	r3, sp, #24
   1f1d4:	str	r3, [sp, #12]
   1f1d8:	str	r3, [sp]
   1f1dc:	ldr	r3, [sp, #20]
   1f1e0:	bl	1f184 <__assert_fail@plt+0xde50>
   1f1e4:	add	sp, sp, #16
   1f1e8:	pop	{lr}		; (ldr lr, [sp], #4)
   1f1ec:	add	sp, sp, #4
   1f1f0:	bx	lr
   1f1f4:	ldr	r3, [pc, #116]	; 1f270 <__assert_fail@plt+0xdf3c>
   1f1f8:	push	{r4, lr}
   1f1fc:	mov	r0, #10
   1f200:	ldr	r1, [r3]
   1f204:	bl	1110c <fputc_unlocked@plt>
   1f208:	mov	r2, #5
   1f20c:	ldr	r1, [pc, #96]	; 1f274 <__assert_fail@plt+0xdf40>
   1f210:	mov	r0, #0
   1f214:	bl	11124 <dcgettext@plt>
   1f218:	ldr	r2, [pc, #88]	; 1f278 <__assert_fail@plt+0xdf44>
   1f21c:	mov	r1, r0
   1f220:	mov	r0, #1
   1f224:	bl	11250 <__printf_chk@plt>
   1f228:	mov	r2, #5
   1f22c:	ldr	r1, [pc, #72]	; 1f27c <__assert_fail@plt+0xdf48>
   1f230:	mov	r0, #0
   1f234:	bl	11124 <dcgettext@plt>
   1f238:	ldr	r3, [pc, #64]	; 1f280 <__assert_fail@plt+0xdf4c>
   1f23c:	ldr	r2, [pc, #64]	; 1f284 <__assert_fail@plt+0xdf50>
   1f240:	mov	r1, r0
   1f244:	mov	r0, #1
   1f248:	bl	11250 <__printf_chk@plt>
   1f24c:	mov	r2, #5
   1f250:	ldr	r1, [pc, #48]	; 1f288 <__assert_fail@plt+0xdf54>
   1f254:	mov	r0, #0
   1f258:	bl	11124 <dcgettext@plt>
   1f25c:	ldr	r2, [pc, #40]	; 1f28c <__assert_fail@plt+0xdf58>
   1f260:	pop	{r4, lr}
   1f264:	mov	r1, r0
   1f268:	mov	r0, #1
   1f26c:	b	11250 <__printf_chk@plt>
   1f270:	ldrdeq	r2, [r3], -ip
   1f274:	andeq	r1, r2, r0, lsr #19
   1f278:			; <UNDEFINED> instruction: 0x000219b4
   1f27c:	andeq	r1, r2, sl, asr #19
   1f280:	andeq	r1, r2, lr, lsr #1
   1f284:	ldrdeq	r1, [r2], -r6
   1f288:	ldrdeq	r1, [r2], -lr
   1f28c:	andeq	r1, r2, r5, lsl #20
   1f290:	push	{r4, lr}
   1f294:	bl	1fd58 <__assert_fail@plt+0xea24>
   1f298:	cmp	r0, #0
   1f29c:	popne	{r4, pc}
   1f2a0:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f2a4:	push	{r4, lr}
   1f2a8:	bl	1fd58 <__assert_fail@plt+0xea24>
   1f2ac:	cmp	r0, #0
   1f2b0:	popne	{r4, pc}
   1f2b4:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f2b8:	b	1f290 <__assert_fail@plt+0xdf5c>
   1f2bc:	push	{r4, r5, r6, lr}
   1f2c0:	mov	r5, r0
   1f2c4:	mov	r4, r1
   1f2c8:	bl	1fd98 <__assert_fail@plt+0xea64>
   1f2cc:	cmp	r0, #0
   1f2d0:	popne	{r4, r5, r6, pc}
   1f2d4:	adds	r4, r4, #0
   1f2d8:	movne	r4, #1
   1f2dc:	cmp	r5, #0
   1f2e0:	orreq	r4, r4, #1
   1f2e4:	cmp	r4, #0
   1f2e8:	popeq	{r4, r5, r6, pc}
   1f2ec:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f2f0:	push	{r4, lr}
   1f2f4:	cmp	r1, #0
   1f2f8:	orreq	r1, r1, #1
   1f2fc:	bl	1fd98 <__assert_fail@plt+0xea64>
   1f300:	cmp	r0, #0
   1f304:	popne	{r4, pc}
   1f308:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f30c:	push	{r4, r5, r6, lr}
   1f310:	mov	r6, r0
   1f314:	mov	r5, r1
   1f318:	mov	r4, r2
   1f31c:	bl	1fff4 <__assert_fail@plt+0xecc0>
   1f320:	cmp	r0, #0
   1f324:	popne	{r4, r5, r6, pc}
   1f328:	cmp	r6, #0
   1f32c:	beq	1f33c <__assert_fail@plt+0xe008>
   1f330:	cmp	r5, #0
   1f334:	cmpne	r4, #0
   1f338:	popeq	{r4, r5, r6, pc}
   1f33c:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f340:	b	1f30c <__assert_fail@plt+0xdfd8>
   1f344:	cmp	r2, #0
   1f348:	cmpne	r1, #0
   1f34c:	moveq	r2, #1
   1f350:	moveq	r1, r2
   1f354:	push	{r4, lr}
   1f358:	bl	1fff4 <__assert_fail@plt+0xecc0>
   1f35c:	cmp	r0, #0
   1f360:	popne	{r4, pc}
   1f364:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f368:	mov	r2, r1
   1f36c:	mov	r1, r0
   1f370:	mov	r0, #0
   1f374:	b	1f30c <__assert_fail@plt+0xdfd8>
   1f378:	mov	r2, r1
   1f37c:	mov	r1, r0
   1f380:	mov	r0, #0
   1f384:	b	1f344 <__assert_fail@plt+0xe010>
   1f388:	push	{r4, r5, r6, r7, r8, lr}
   1f38c:	subs	r7, r0, #0
   1f390:	mov	r5, r1
   1f394:	mov	r6, r2
   1f398:	ldr	r4, [r1]
   1f39c:	bne	1f3d8 <__assert_fail@plt+0xe0a4>
   1f3a0:	cmp	r4, #0
   1f3a4:	bne	1f3c0 <__assert_fail@plt+0xe08c>
   1f3a8:	mov	r1, r2
   1f3ac:	mov	r0, #64	; 0x40
   1f3b0:	bl	20120 <__assert_fail@plt+0xedec>
   1f3b4:	cmp	r0, #0
   1f3b8:	movne	r4, r0
   1f3bc:	addeq	r4, r0, #1
   1f3c0:	mov	r2, r6
   1f3c4:	mov	r1, r4
   1f3c8:	mov	r0, r7
   1f3cc:	bl	1f30c <__assert_fail@plt+0xdfd8>
   1f3d0:	str	r4, [r5]
   1f3d4:	pop	{r4, r5, r6, r7, r8, pc}
   1f3d8:	lsr	r2, r4, #1
   1f3dc:	add	r3, r2, #1
   1f3e0:	mvn	r3, r3
   1f3e4:	cmp	r4, r3
   1f3e8:	addls	r4, r4, #1
   1f3ec:	addls	r4, r4, r2
   1f3f0:	bls	1f3c0 <__assert_fail@plt+0xe08c>
   1f3f4:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f3f8:	mov	r2, #1
   1f3fc:	b	1f388 <__assert_fail@plt+0xe054>
   1f400:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f404:	mov	sl, r0
   1f408:	ldr	r8, [r1]
   1f40c:	mov	fp, r1
   1f410:	mov	r5, r2
   1f414:	asrs	r4, r8, #1
   1f418:	mov	r9, r3
   1f41c:	ldr	r7, [sp, #48]	; 0x30
   1f420:	bpl	1f4bc <__assert_fail@plt+0xe188>
   1f424:	rsb	r2, r4, #-2147483648	; 0x80000000
   1f428:	cmp	r8, r2
   1f42c:	movge	r2, #0
   1f430:	movlt	r2, #1
   1f434:	mvn	r3, r9
   1f438:	cmp	r2, #0
   1f43c:	lsr	r3, r3, #31
   1f440:	addeq	r4, r4, r8
   1f444:	mvnne	r4, #-2147483648	; 0x80000000
   1f448:	mov	r0, r3
   1f44c:	cmp	r9, r4
   1f450:	movge	r0, #0
   1f454:	andlt	r0, r0, #1
   1f458:	cmp	r0, #0
   1f45c:	str	r3, [sp, #4]
   1f460:	bne	1f630 <__assert_fail@plt+0xe2fc>
   1f464:	cmp	r7, #0
   1f468:	bge	1f57c <__assert_fail@plt+0xe248>
   1f46c:	cmp	r4, #0
   1f470:	bge	1f4d4 <__assert_fail@plt+0xe1a0>
   1f474:	mov	r1, r7
   1f478:	mvn	r0, #-2147483648	; 0x80000000
   1f47c:	bl	2032c <__assert_fail@plt+0xeff8>
   1f480:	cmp	r0, r4
   1f484:	movle	r0, #0
   1f488:	movgt	r0, #1
   1f48c:	cmp	r0, #0
   1f490:	mvnne	r6, #-2147483648	; 0x80000000
   1f494:	beq	1f4e4 <__assert_fail@plt+0xe1b0>
   1f498:	mov	r1, r7
   1f49c:	mov	r0, r6
   1f4a0:	bl	2032c <__assert_fail@plt+0xeff8>
   1f4a4:	mov	r1, r7
   1f4a8:	mov	r4, r0
   1f4ac:	mov	r0, r6
   1f4b0:	bl	2054c <__assert_fail@plt+0xf218>
   1f4b4:	sub	r1, r6, r1
   1f4b8:	b	1f4f4 <__assert_fail@plt+0xe1c0>
   1f4bc:	mvn	r2, #-2147483648	; 0x80000000
   1f4c0:	sub	r2, r2, r4
   1f4c4:	cmp	r8, r2
   1f4c8:	movle	r2, #0
   1f4cc:	movgt	r2, #1
   1f4d0:	b	1f434 <__assert_fail@plt+0xe100>
   1f4d4:	cmn	r7, #1
   1f4d8:	movne	r1, r7
   1f4dc:	movne	r0, #-2147483648	; 0x80000000
   1f4e0:	bne	1f648 <__assert_fail@plt+0xe314>
   1f4e4:	mul	r1, r7, r4
   1f4e8:	cmp	r1, #63	; 0x3f
   1f4ec:	movle	r6, #64	; 0x40
   1f4f0:	ble	1f498 <__assert_fail@plt+0xe164>
   1f4f4:	cmp	sl, #0
   1f4f8:	sub	r2, r4, r8
   1f4fc:	streq	sl, [fp]
   1f500:	cmp	r2, r5
   1f504:	bge	1f5d8 <__assert_fail@plt+0xe2a4>
   1f508:	cmp	r5, #0
   1f50c:	bge	1f5a4 <__assert_fail@plt+0xe270>
   1f510:	rsb	r2, r5, #-2147483648	; 0x80000000
   1f514:	cmp	r8, r2
   1f518:	movge	r2, #0
   1f51c:	movlt	r2, #1
   1f520:	cmp	r2, #0
   1f524:	bne	1f578 <__assert_fail@plt+0xe244>
   1f528:	ldr	r0, [sp, #4]
   1f52c:	add	r5, r8, r5
   1f530:	cmp	r9, r5
   1f534:	movge	r0, #0
   1f538:	andlt	r0, r0, #1
   1f53c:	cmp	r0, #0
   1f540:	mov	r4, r5
   1f544:	bne	1f578 <__assert_fail@plt+0xe244>
   1f548:	cmp	r7, #0
   1f54c:	bge	1f5ec <__assert_fail@plt+0xe2b8>
   1f550:	cmp	r5, #0
   1f554:	bge	1f5c4 <__assert_fail@plt+0xe290>
   1f558:	mov	r1, r7
   1f55c:	mvn	r0, #-2147483648	; 0x80000000
   1f560:	bl	2032c <__assert_fail@plt+0xeff8>
   1f564:	cmp	r5, r0
   1f568:	movge	r0, #0
   1f56c:	movlt	r0, #1
   1f570:	cmp	r0, #0
   1f574:	beq	1f5d4 <__assert_fail@plt+0xe2a0>
   1f578:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f57c:	beq	1f4e4 <__assert_fail@plt+0xe1b0>
   1f580:	cmp	r4, #0
   1f584:	bge	1f640 <__assert_fail@plt+0xe30c>
   1f588:	cmn	r4, #1
   1f58c:	beq	1f4e4 <__assert_fail@plt+0xe1b0>
   1f590:	mov	r1, r4
   1f594:	mov	r0, #-2147483648	; 0x80000000
   1f598:	bl	2032c <__assert_fail@plt+0xeff8>
   1f59c:	cmp	r7, r0
   1f5a0:	b	1f484 <__assert_fail@plt+0xe150>
   1f5a4:	cmp	r8, #0
   1f5a8:	blt	1f528 <__assert_fail@plt+0xe1f4>
   1f5ac:	mvn	r2, #-2147483648	; 0x80000000
   1f5b0:	sub	r2, r2, r5
   1f5b4:	cmp	r8, r2
   1f5b8:	movle	r2, #0
   1f5bc:	movgt	r2, #1
   1f5c0:	b	1f520 <__assert_fail@plt+0xe1ec>
   1f5c4:	cmn	r7, #1
   1f5c8:	movne	r1, r7
   1f5cc:	movne	r0, #-2147483648	; 0x80000000
   1f5d0:	bne	1f624 <__assert_fail@plt+0xe2f0>
   1f5d4:	mul	r1, r5, r7
   1f5d8:	mov	r0, sl
   1f5dc:	bl	1f2bc <__assert_fail@plt+0xdf88>
   1f5e0:	str	r4, [fp]
   1f5e4:	add	sp, sp, #12
   1f5e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5ec:	beq	1f5d4 <__assert_fail@plt+0xe2a0>
   1f5f0:	cmp	r5, #0
   1f5f4:	movge	r1, r7
   1f5f8:	mvnge	r0, #-2147483648	; 0x80000000
   1f5fc:	bge	1f624 <__assert_fail@plt+0xe2f0>
   1f600:	cmn	r5, #1
   1f604:	beq	1f5d4 <__assert_fail@plt+0xe2a0>
   1f608:	mov	r1, r5
   1f60c:	mov	r0, #-2147483648	; 0x80000000
   1f610:	bl	2032c <__assert_fail@plt+0xeff8>
   1f614:	cmp	r7, r0
   1f618:	movle	r0, #0
   1f61c:	movgt	r0, #1
   1f620:	b	1f570 <__assert_fail@plt+0xe23c>
   1f624:	bl	2032c <__assert_fail@plt+0xeff8>
   1f628:	cmp	r5, r0
   1f62c:	b	1f618 <__assert_fail@plt+0xe2e4>
   1f630:	cmp	r7, #0
   1f634:	mov	r4, r9
   1f638:	blt	1f4d4 <__assert_fail@plt+0xe1a0>
   1f63c:	beq	1f4e4 <__assert_fail@plt+0xe1b0>
   1f640:	mov	r1, r7
   1f644:	mvn	r0, #-2147483648	; 0x80000000
   1f648:	bl	2032c <__assert_fail@plt+0xeff8>
   1f64c:	cmp	r0, r4
   1f650:	movge	r0, #0
   1f654:	movlt	r0, #1
   1f658:	b	1f48c <__assert_fail@plt+0xe158>
   1f65c:	push	{r4, lr}
   1f660:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1f664:	cmp	r0, #0
   1f668:	popne	{r4, pc}
   1f66c:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f670:	mov	r1, #1
   1f674:	b	1f65c <__assert_fail@plt+0xe328>
   1f678:	push	{r4, lr}
   1f67c:	bl	1fd10 <__assert_fail@plt+0xe9dc>
   1f680:	cmp	r0, #0
   1f684:	popne	{r4, pc}
   1f688:	bl	1f724 <__assert_fail@plt+0xe3f0>
   1f68c:	mov	r1, #1
   1f690:	b	1f678 <__assert_fail@plt+0xe344>
   1f694:	push	{r4, r5, r6, lr}
   1f698:	mov	r4, r1
   1f69c:	mov	r5, r0
   1f6a0:	mov	r0, r1
   1f6a4:	bl	1f290 <__assert_fail@plt+0xdf5c>
   1f6a8:	mov	r2, r4
   1f6ac:	mov	r1, r5
   1f6b0:	pop	{r4, r5, r6, lr}
   1f6b4:	b	110ac <memcpy@plt>
   1f6b8:	push	{r4, r5, r6, lr}
   1f6bc:	mov	r4, r1
   1f6c0:	mov	r5, r0
   1f6c4:	mov	r0, r1
   1f6c8:	bl	1f2a4 <__assert_fail@plt+0xdf70>
   1f6cc:	mov	r2, r4
   1f6d0:	mov	r1, r5
   1f6d4:	pop	{r4, r5, r6, lr}
   1f6d8:	b	110ac <memcpy@plt>
   1f6dc:	push	{r4, r5, r6, lr}
   1f6e0:	mov	r5, r0
   1f6e4:	add	r0, r1, #1
   1f6e8:	mov	r4, r1
   1f6ec:	bl	1f2a4 <__assert_fail@plt+0xdf70>
   1f6f0:	mov	r2, #0
   1f6f4:	mov	r1, r5
   1f6f8:	strb	r2, [r0, r4]
   1f6fc:	mov	r2, r4
   1f700:	pop	{r4, r5, r6, lr}
   1f704:	b	110ac <memcpy@plt>
   1f708:	push	{r4, lr}
   1f70c:	mov	r4, r0
   1f710:	bl	111fc <strlen@plt>
   1f714:	add	r1, r0, #1
   1f718:	mov	r0, r4
   1f71c:	pop	{r4, lr}
   1f720:	b	1f694 <__assert_fail@plt+0xe360>
   1f724:	ldr	r3, [pc, #44]	; 1f758 <__assert_fail@plt+0xe424>
   1f728:	push	{r4, lr}
   1f72c:	mov	r2, #5
   1f730:	ldr	r1, [pc, #36]	; 1f75c <__assert_fail@plt+0xe428>
   1f734:	mov	r0, #0
   1f738:	ldr	r4, [r3]
   1f73c:	bl	11124 <dcgettext@plt>
   1f740:	ldr	r2, [pc, #24]	; 1f760 <__assert_fail@plt+0xe42c>
   1f744:	mov	r1, #0
   1f748:	mov	r3, r0
   1f74c:	mov	r0, r4
   1f750:	bl	1119c <error@plt>
   1f754:	bl	11310 <abort@plt>
   1f758:	andeq	r2, r3, ip, ror r1
   1f75c:	andeq	r1, r2, r1, asr sl
   1f760:			; <UNDEFINED> instruction: 0x000211b5
   1f764:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   1f768:	mov	r9, r3
   1f76c:	ldr	r3, [sp, #48]	; 0x30
   1f770:	mov	r8, r2
   1f774:	str	r3, [sp]
   1f778:	mov	r2, r1
   1f77c:	add	r3, sp, #8
   1f780:	mov	r1, #0
   1f784:	mov	r6, r0
   1f788:	ldr	r4, [sp, #56]	; 0x38
   1f78c:	bl	1fa18 <__assert_fail@plt+0xe6e4>
   1f790:	cmp	r0, #0
   1f794:	bne	1f814 <__assert_fail@plt+0xe4e0>
   1f798:	ldrd	r0, [sp, #8]
   1f79c:	cmp	r0, r8
   1f7a0:	sbcs	r3, r1, r9
   1f7a4:	ldrd	r2, [sp, #40]	; 0x28
   1f7a8:	movlt	ip, #1
   1f7ac:	movge	ip, #0
   1f7b0:	cmp	r2, r0
   1f7b4:	sbcs	r3, r3, r1
   1f7b8:	movge	r3, ip
   1f7bc:	orrlt	r3, ip, #1
   1f7c0:	cmp	r3, #0
   1f7c4:	beq	1f890 <__assert_fail@plt+0xe55c>
   1f7c8:	cmp	r0, #1073741824	; 0x40000000
   1f7cc:	sbcs	r3, r1, #0
   1f7d0:	blt	1f7f4 <__assert_fail@plt+0xe4c0>
   1f7d4:	bl	11214 <__errno_location@plt>
   1f7d8:	mov	r3, #75	; 0x4b
   1f7dc:	cmp	r4, #0
   1f7e0:	str	r3, [r0]
   1f7e4:	beq	1f85c <__assert_fail@plt+0xe528>
   1f7e8:	bl	11214 <__errno_location@plt>
   1f7ec:	ldr	r5, [r0]
   1f7f0:	b	1f870 <__assert_fail@plt+0xe53c>
   1f7f4:	mov	r2, #-1073741824	; 0xc0000000
   1f7f8:	mvn	r3, #0
   1f7fc:	cmp	r0, r2
   1f800:	sbcs	r3, r1, r3
   1f804:	blt	1f7d4 <__assert_fail@plt+0xe4a0>
   1f808:	bl	11214 <__errno_location@plt>
   1f80c:	mov	r3, #34	; 0x22
   1f810:	b	1f7dc <__assert_fail@plt+0xe4a8>
   1f814:	cmp	r0, #1
   1f818:	bne	1f840 <__assert_fail@plt+0xe50c>
   1f81c:	bl	11214 <__errno_location@plt>
   1f820:	mov	r3, #75	; 0x4b
   1f824:	cmp	r4, #0
   1f828:	str	r3, [r0]
   1f82c:	bne	1f860 <__assert_fail@plt+0xe52c>
   1f830:	bl	11214 <__errno_location@plt>
   1f834:	mov	r4, #1
   1f838:	ldr	r5, [r0]
   1f83c:	b	1f870 <__assert_fail@plt+0xe53c>
   1f840:	cmp	r0, #3
   1f844:	bne	1f854 <__assert_fail@plt+0xe520>
   1f848:	bl	11214 <__errno_location@plt>
   1f84c:	mov	r3, #0
   1f850:	b	1f824 <__assert_fail@plt+0xe4f0>
   1f854:	cmp	r4, #0
   1f858:	bne	1f860 <__assert_fail@plt+0xe52c>
   1f85c:	mov	r4, #1
   1f860:	bl	11214 <__errno_location@plt>
   1f864:	ldr	r5, [r0]
   1f868:	cmp	r5, #22
   1f86c:	moveq	r5, #0
   1f870:	mov	r0, r6
   1f874:	bl	13c64 <__assert_fail@plt+0x2930>
   1f878:	ldr	r3, [sp, #52]	; 0x34
   1f87c:	ldr	r2, [pc, #20]	; 1f898 <__assert_fail@plt+0xe564>
   1f880:	mov	r1, r5
   1f884:	str	r0, [sp]
   1f888:	mov	r0, r4
   1f88c:	bl	1119c <error@plt>
   1f890:	add	sp, sp, #16
   1f894:	pop	{r4, r5, r6, r8, r9, pc}
   1f898:	andeq	r1, r2, r2, lsl r4
   1f89c:	push	{r4, r5}
   1f8a0:	mov	r1, #10
   1f8a4:	pop	{r4, r5}
   1f8a8:	b	1f764 <__assert_fail@plt+0xe430>
   1f8ac:	push	{r4, r5, r6, r7, r8, lr}
   1f8b0:	subs	r4, r1, #0
   1f8b4:	mov	r5, r0
   1f8b8:	bge	1f974 <__assert_fail@plt+0xe640>
   1f8bc:	ldrd	r6, [r0]
   1f8c0:	cmp	r6, #0
   1f8c4:	sbcs	r3, r7, #0
   1f8c8:	bge	1f928 <__assert_fail@plt+0xe5f4>
   1f8cc:	asr	r3, r4, #31
   1f8d0:	mov	r2, r4
   1f8d4:	mvn	r0, #0
   1f8d8:	mvn	r1, #-2147483648	; 0x80000000
   1f8dc:	bl	2056c <__assert_fail@plt+0xf238>
   1f8e0:	cmp	r6, r0
   1f8e4:	sbcs	r3, r7, r1
   1f8e8:	movlt	r3, #1
   1f8ec:	movge	r3, #0
   1f8f0:	cmp	r3, #0
   1f8f4:	movne	r2, #0
   1f8f8:	movne	r3, #-2147483648	; 0x80000000
   1f8fc:	bne	1f968 <__assert_fail@plt+0xe634>
   1f900:	ldr	r2, [r5]
   1f904:	asr	r3, r4, #31
   1f908:	ldr	r1, [r5, #4]
   1f90c:	mul	r3, r3, r2
   1f910:	mov	r0, #0
   1f914:	mla	r1, r4, r1, r3
   1f918:	umull	r2, r3, r2, r4
   1f91c:	add	r3, r1, r3
   1f920:	strd	r2, [r5]
   1f924:	pop	{r4, r5, r6, r7, r8, pc}
   1f928:	cmn	r4, #1
   1f92c:	moveq	r3, #0
   1f930:	beq	1f958 <__assert_fail@plt+0xe624>
   1f934:	mov	r2, r4
   1f938:	asr	r3, r4, #31
   1f93c:	mov	r0, #0
   1f940:	mov	r1, #-2147483648	; 0x80000000
   1f944:	bl	2056c <__assert_fail@plt+0xf238>
   1f948:	cmp	r0, r6
   1f94c:	sbcs	r3, r1, r7
   1f950:	movlt	r3, #1
   1f954:	movge	r3, #0
   1f958:	cmp	r3, #0
   1f95c:	mvnne	r2, #0
   1f960:	mvnne	r3, #-2147483648	; 0x80000000
   1f964:	beq	1f900 <__assert_fail@plt+0xe5cc>
   1f968:	strd	r2, [r5]
   1f96c:	mov	r0, #1
   1f970:	pop	{r4, r5, r6, r7, r8, pc}
   1f974:	beq	1f900 <__assert_fail@plt+0xe5cc>
   1f978:	ldrd	r6, [r0]
   1f97c:	cmp	r6, #0
   1f980:	sbcs	r3, r7, #0
   1f984:	bge	1f9c8 <__assert_fail@plt+0xe694>
   1f988:	mvn	r3, #0
   1f98c:	cmp	r7, r3
   1f990:	mvn	r2, #0
   1f994:	cmpeq	r6, r2
   1f998:	moveq	r3, #0
   1f99c:	beq	1f8f0 <__assert_fail@plt+0xe5bc>
   1f9a0:	mov	r2, r6
   1f9a4:	mov	r3, r7
   1f9a8:	mov	r0, #0
   1f9ac:	mov	r1, #-2147483648	; 0x80000000
   1f9b0:	bl	2056c <__assert_fail@plt+0xf238>
   1f9b4:	asr	r3, r4, #31
   1f9b8:	mov	r2, r4
   1f9bc:	cmp	r0, r4
   1f9c0:	sbcs	r3, r1, r3
   1f9c4:	b	1f8e8 <__assert_fail@plt+0xe5b4>
   1f9c8:	mov	r2, r4
   1f9cc:	asr	r3, r4, #31
   1f9d0:	mvn	r0, #0
   1f9d4:	mvn	r1, #-2147483648	; 0x80000000
   1f9d8:	b	1f944 <__assert_fail@plt+0xe610>
   1f9dc:	push	{r4, r5, r6, r7, r8, lr}
   1f9e0:	mov	r6, r0
   1f9e4:	mov	r7, r1
   1f9e8:	mov	r5, r2
   1f9ec:	mov	r4, #0
   1f9f0:	cmp	r5, #0
   1f9f4:	bne	1fa00 <__assert_fail@plt+0xe6cc>
   1f9f8:	mov	r0, r4
   1f9fc:	pop	{r4, r5, r6, r7, r8, pc}
   1fa00:	mov	r1, r7
   1fa04:	mov	r0, r6
   1fa08:	bl	1f8ac <__assert_fail@plt+0xe578>
   1fa0c:	sub	r5, r5, #1
   1fa10:	orr	r4, r4, r0
   1fa14:	b	1f9f0 <__assert_fail@plt+0xe6bc>
   1fa18:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1fa1c:	cmp	r2, #36	; 0x24
   1fa20:	ldr	r9, [sp, #48]	; 0x30
   1fa24:	bls	1fa3c <__assert_fail@plt+0xe708>
   1fa28:	ldr	r3, [pc, #724]	; 1fd04 <__assert_fail@plt+0xe9d0>
   1fa2c:	mov	r2, #85	; 0x55
   1fa30:	ldr	r1, [pc, #720]	; 1fd08 <__assert_fail@plt+0xe9d4>
   1fa34:	ldr	r0, [pc, #720]	; 1fd0c <__assert_fail@plt+0xe9d8>
   1fa38:	bl	11334 <__assert_fail@plt>
   1fa3c:	cmp	r1, #0
   1fa40:	mov	r7, r1
   1fa44:	mov	r4, r0
   1fa48:	addeq	r7, sp, #4
   1fa4c:	mov	r6, r2
   1fa50:	mov	r8, r3
   1fa54:	bl	11214 <__errno_location@plt>
   1fa58:	mov	r5, #0
   1fa5c:	mov	r2, r6
   1fa60:	mov	r1, r7
   1fa64:	str	r5, [r0]
   1fa68:	mov	sl, r0
   1fa6c:	mov	r0, r4
   1fa70:	bl	11274 <strtoimax@plt>
   1fa74:	ldr	r6, [r7]
   1fa78:	cmp	r4, r6
   1fa7c:	strd	r0, [sp, #8]
   1fa80:	bne	1fae4 <__assert_fail@plt+0xe7b0>
   1fa84:	cmp	r9, r5
   1fa88:	beq	1fcfc <__assert_fail@plt+0xe9c8>
   1fa8c:	ldrb	r1, [r6]
   1fa90:	cmp	r1, r5
   1fa94:	beq	1fcfc <__assert_fail@plt+0xe9c8>
   1fa98:	mov	r0, r9
   1fa9c:	bl	11208 <strchr@plt>
   1faa0:	cmp	r0, r5
   1faa4:	beq	1fcfc <__assert_fail@plt+0xe9c8>
   1faa8:	mov	r2, #1
   1faac:	mov	r3, #0
   1fab0:	strd	r2, [sp, #8]
   1fab4:	ldrb	r4, [r6]
   1fab8:	cmp	r4, #0
   1fabc:	beq	1fbfc <__assert_fail@plt+0xe8c8>
   1fac0:	mov	r1, r4
   1fac4:	mov	r0, r9
   1fac8:	bl	11208 <strchr@plt>
   1facc:	cmp	r0, #0
   1fad0:	bne	1fb14 <__assert_fail@plt+0xe7e0>
   1fad4:	ldrd	r2, [sp, #8]
   1fad8:	orr	r5, r5, #2
   1fadc:	strd	r2, [r8]
   1fae0:	b	1fb08 <__assert_fail@plt+0xe7d4>
   1fae4:	ldr	r5, [sl]
   1fae8:	cmp	r5, #0
   1faec:	beq	1fafc <__assert_fail@plt+0xe7c8>
   1faf0:	cmp	r5, #34	; 0x22
   1faf4:	bne	1fcfc <__assert_fail@plt+0xe9c8>
   1faf8:	mov	r5, #1
   1fafc:	cmp	r9, #0
   1fb00:	bne	1fab4 <__assert_fail@plt+0xe780>
   1fb04:	strd	r0, [r8]
   1fb08:	mov	r0, r5
   1fb0c:	add	sp, sp, #16
   1fb10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fb14:	cmp	r4, #84	; 0x54
   1fb18:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fb1c:	bhi	1fb54 <__assert_fail@plt+0xe820>
   1fb20:	cmp	r4, #75	; 0x4b
   1fb24:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fb28:	bhi	1fb44 <__assert_fail@plt+0xe810>
   1fb2c:	cmp	r4, #69	; 0x45
   1fb30:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fb34:	cmp	r4, #71	; 0x47
   1fb38:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fb3c:	mov	r6, #1
   1fb40:	b	1fc30 <__assert_fail@plt+0xe8fc>
   1fb44:	cmp	r4, #77	; 0x4d
   1fb48:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fb4c:	cmp	r4, #80	; 0x50
   1fb50:	b	1fb38 <__assert_fail@plt+0xe804>
   1fb54:	cmp	r4, #103	; 0x67
   1fb58:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fb5c:	bhi	1fc08 <__assert_fail@plt+0xe8d4>
   1fb60:	sub	r3, r4, #89	; 0x59
   1fb64:	cmp	r3, #1
   1fb68:	bhi	1fb3c <__assert_fail@plt+0xe808>
   1fb6c:	mov	r1, #48	; 0x30
   1fb70:	mov	r0, r9
   1fb74:	bl	11208 <strchr@plt>
   1fb78:	cmp	r0, #0
   1fb7c:	beq	1fb3c <__assert_fail@plt+0xe808>
   1fb80:	ldrb	r3, [r6, #1]
   1fb84:	cmp	r3, #68	; 0x44
   1fb88:	beq	1fb9c <__assert_fail@plt+0xe868>
   1fb8c:	cmp	r3, #105	; 0x69
   1fb90:	beq	1fc20 <__assert_fail@plt+0xe8ec>
   1fb94:	cmp	r3, #66	; 0x42
   1fb98:	bne	1fb3c <__assert_fail@plt+0xe808>
   1fb9c:	mov	r6, #2
   1fba0:	mov	r1, #1000	; 0x3e8
   1fba4:	cmp	r4, #89	; 0x59
   1fba8:	beq	1fce4 <__assert_fail@plt+0xe9b0>
   1fbac:	bhi	1fc58 <__assert_fail@plt+0xe924>
   1fbb0:	cmp	r4, #75	; 0x4b
   1fbb4:	beq	1fc98 <__assert_fail@plt+0xe964>
   1fbb8:	bhi	1fc38 <__assert_fail@plt+0xe904>
   1fbbc:	cmp	r4, #69	; 0x45
   1fbc0:	beq	1fcc0 <__assert_fail@plt+0xe98c>
   1fbc4:	cmp	r4, #71	; 0x47
   1fbc8:	beq	1fccc <__assert_fail@plt+0xe998>
   1fbcc:	cmp	r4, #66	; 0x42
   1fbd0:	moveq	r1, #1024	; 0x400
   1fbd4:	bne	1fad4 <__assert_fail@plt+0xe7a0>
   1fbd8:	add	r0, sp, #8
   1fbdc:	bl	1f8ac <__assert_fail@plt+0xe578>
   1fbe0:	ldr	r3, [r7]
   1fbe4:	orr	r5, r5, r0
   1fbe8:	add	r2, r3, r6
   1fbec:	str	r2, [r7]
   1fbf0:	ldrb	r3, [r3, r6]
   1fbf4:	cmp	r3, #0
   1fbf8:	orrne	r5, r5, #2
   1fbfc:	ldrd	r2, [sp, #8]
   1fc00:	strd	r2, [r8]
   1fc04:	b	1fb08 <__assert_fail@plt+0xe7d4>
   1fc08:	cmp	r4, #109	; 0x6d
   1fc0c:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fc10:	cmp	r4, #116	; 0x74
   1fc14:	beq	1fb6c <__assert_fail@plt+0xe838>
   1fc18:	cmp	r4, #107	; 0x6b
   1fc1c:	b	1fb38 <__assert_fail@plt+0xe804>
   1fc20:	ldrb	r6, [r6, #2]
   1fc24:	cmp	r6, #66	; 0x42
   1fc28:	movne	r6, #1
   1fc2c:	moveq	r6, #3
   1fc30:	mov	r1, #1024	; 0x400
   1fc34:	b	1fba4 <__assert_fail@plt+0xe870>
   1fc38:	cmp	r4, #80	; 0x50
   1fc3c:	beq	1fcd4 <__assert_fail@plt+0xe9a0>
   1fc40:	cmp	r4, #84	; 0x54
   1fc44:	beq	1fcdc <__assert_fail@plt+0xe9a8>
   1fc48:	cmp	r4, #77	; 0x4d
   1fc4c:	bne	1fad4 <__assert_fail@plt+0xe7a0>
   1fc50:	mov	r2, #2
   1fc54:	b	1fcc4 <__assert_fail@plt+0xe990>
   1fc58:	cmp	r4, #103	; 0x67
   1fc5c:	beq	1fccc <__assert_fail@plt+0xe998>
   1fc60:	bhi	1fc84 <__assert_fail@plt+0xe950>
   1fc64:	cmp	r4, #98	; 0x62
   1fc68:	beq	1fcb8 <__assert_fail@plt+0xe984>
   1fc6c:	cmp	r4, #99	; 0x63
   1fc70:	beq	1fcf4 <__assert_fail@plt+0xe9c0>
   1fc74:	cmp	r4, #90	; 0x5a
   1fc78:	bne	1fad4 <__assert_fail@plt+0xe7a0>
   1fc7c:	mov	r2, #7
   1fc80:	b	1fcc4 <__assert_fail@plt+0xe990>
   1fc84:	cmp	r4, #109	; 0x6d
   1fc88:	beq	1fc50 <__assert_fail@plt+0xe91c>
   1fc8c:	bhi	1fca0 <__assert_fail@plt+0xe96c>
   1fc90:	cmp	r4, #107	; 0x6b
   1fc94:	bne	1fad4 <__assert_fail@plt+0xe7a0>
   1fc98:	mov	r2, #1
   1fc9c:	b	1fcc4 <__assert_fail@plt+0xe990>
   1fca0:	cmp	r4, #116	; 0x74
   1fca4:	beq	1fcdc <__assert_fail@plt+0xe9a8>
   1fca8:	cmp	r4, #119	; 0x77
   1fcac:	moveq	r1, #2
   1fcb0:	beq	1fbd8 <__assert_fail@plt+0xe8a4>
   1fcb4:	b	1fad4 <__assert_fail@plt+0xe7a0>
   1fcb8:	mov	r1, #512	; 0x200
   1fcbc:	b	1fbd8 <__assert_fail@plt+0xe8a4>
   1fcc0:	mov	r2, #6
   1fcc4:	add	r0, sp, #8
   1fcc8:	b	1fcec <__assert_fail@plt+0xe9b8>
   1fccc:	mov	r2, #3
   1fcd0:	b	1fcc4 <__assert_fail@plt+0xe990>
   1fcd4:	mov	r2, #5
   1fcd8:	b	1fcc4 <__assert_fail@plt+0xe990>
   1fcdc:	mov	r2, #4
   1fce0:	b	1fcc4 <__assert_fail@plt+0xe990>
   1fce4:	mov	r2, #8
   1fce8:	add	r0, sp, r2
   1fcec:	bl	1f9dc <__assert_fail@plt+0xe6a8>
   1fcf0:	b	1fbe0 <__assert_fail@plt+0xe8ac>
   1fcf4:	mov	r0, #0
   1fcf8:	b	1fbe0 <__assert_fail@plt+0xe8ac>
   1fcfc:	mov	r5, #4
   1fd00:	b	1fb08 <__assert_fail@plt+0xe7d4>
   1fd04:	andeq	r1, r2, r2, ror #20
   1fd08:	andeq	r1, r2, sp, ror #20
   1fd0c:	andeq	r1, r2, fp, ror sl
   1fd10:	cmp	r1, #0
   1fd14:	cmpne	r0, #0
   1fd18:	moveq	r1, #1
   1fd1c:	moveq	r0, r1
   1fd20:	umull	r2, r3, r0, r1
   1fd24:	adds	r3, r3, #0
   1fd28:	movne	r3, #1
   1fd2c:	cmp	r2, #0
   1fd30:	blt	1fd40 <__assert_fail@plt+0xea0c>
   1fd34:	cmp	r3, #0
   1fd38:	bne	1fd40 <__assert_fail@plt+0xea0c>
   1fd3c:	b	11004 <calloc@plt>
   1fd40:	push	{r4, lr}
   1fd44:	bl	11214 <__errno_location@plt>
   1fd48:	mov	r3, #12
   1fd4c:	str	r3, [r0]
   1fd50:	mov	r0, #0
   1fd54:	pop	{r4, pc}
   1fd58:	cmp	r0, #0
   1fd5c:	mov	r3, #0
   1fd60:	moveq	r0, #1
   1fd64:	adds	r3, r3, #0
   1fd68:	movne	r3, #1
   1fd6c:	cmp	r0, #0
   1fd70:	blt	1fd80 <__assert_fail@plt+0xea4c>
   1fd74:	cmp	r3, #0
   1fd78:	bne	1fd80 <__assert_fail@plt+0xea4c>
   1fd7c:	b	111a8 <malloc@plt>
   1fd80:	push	{r4, lr}
   1fd84:	bl	11214 <__errno_location@plt>
   1fd88:	mov	r3, #12
   1fd8c:	str	r3, [r0]
   1fd90:	mov	r0, #0
   1fd94:	pop	{r4, pc}
   1fd98:	cmp	r0, #0
   1fd9c:	push	{r4, lr}
   1fda0:	mov	r4, r1
   1fda4:	bne	1fdb4 <__assert_fail@plt+0xea80>
   1fda8:	mov	r0, r1
   1fdac:	pop	{r4, lr}
   1fdb0:	b	1fd58 <__assert_fail@plt+0xea24>
   1fdb4:	cmp	r1, #0
   1fdb8:	bne	1fdc8 <__assert_fail@plt+0xea94>
   1fdbc:	bl	1ff1c <__assert_fail@plt+0xebe8>
   1fdc0:	mov	r0, #0
   1fdc4:	pop	{r4, pc}
   1fdc8:	cmp	r1, #0
   1fdcc:	blt	1fddc <__assert_fail@plt+0xeaa8>
   1fdd0:	mov	r3, #0
   1fdd4:	cmp	r3, r3
   1fdd8:	beq	1fdec <__assert_fail@plt+0xeab8>
   1fddc:	bl	11214 <__errno_location@plt>
   1fde0:	mov	r3, #12
   1fde4:	str	r3, [r0]
   1fde8:	b	1fdc0 <__assert_fail@plt+0xea8c>
   1fdec:	pop	{r4, lr}
   1fdf0:	b	11130 <realloc@plt>
   1fdf4:	push	{r4, r5, r6, lr}
   1fdf8:	mov	r4, r0
   1fdfc:	bl	11178 <__fpending@plt>
   1fe00:	mov	r5, r0
   1fe04:	mov	r0, r4
   1fe08:	bl	11184 <ferror_unlocked@plt>
   1fe0c:	mov	r6, r0
   1fe10:	mov	r0, r4
   1fe14:	bl	123a8 <__assert_fail@plt+0x1074>
   1fe18:	cmp	r6, #0
   1fe1c:	mov	r4, r0
   1fe20:	bne	1fe4c <__assert_fail@plt+0xeb18>
   1fe24:	cmp	r0, #0
   1fe28:	beq	1fe44 <__assert_fail@plt+0xeb10>
   1fe2c:	cmp	r5, #0
   1fe30:	bne	1fe5c <__assert_fail@plt+0xeb28>
   1fe34:	bl	11214 <__errno_location@plt>
   1fe38:	ldr	r4, [r0]
   1fe3c:	subs	r4, r4, #9
   1fe40:	mvnne	r4, #0
   1fe44:	mov	r0, r4
   1fe48:	pop	{r4, r5, r6, pc}
   1fe4c:	cmp	r0, #0
   1fe50:	bne	1fe5c <__assert_fail@plt+0xeb28>
   1fe54:	bl	11214 <__errno_location@plt>
   1fe58:	str	r4, [r0]
   1fe5c:	mvn	r4, #0
   1fe60:	b	1fe44 <__assert_fail@plt+0xeb10>
   1fe64:	ldr	ip, [r0, #4]
   1fe68:	cmp	ip, r1
   1fe6c:	bcc	1fe7c <__assert_fail@plt+0xeb48>
   1fe70:	str	r1, [r0]
   1fe74:	mov	r0, #1
   1fe78:	bx	lr
   1fe7c:	cmp	r3, #0
   1fe80:	push	{r4, r5, r6, r7, r8, lr}
   1fe84:	mov	r7, r3
   1fe88:	mov	r6, r2
   1fe8c:	mov	r5, r1
   1fe90:	mov	r4, r0
   1fe94:	beq	1feac <__assert_fail@plt+0xeb78>
   1fe98:	mov	r1, r3
   1fe9c:	mvn	r0, #0
   1fea0:	bl	20120 <__assert_fail@plt+0xedec>
   1fea4:	cmp	r5, r0
   1fea8:	bhi	1ff0c <__assert_fail@plt+0xebd8>
   1feac:	ldr	r0, [r4, #8]
   1feb0:	mul	r1, r7, r5
   1feb4:	cmp	r0, r6
   1feb8:	bne	1fefc <__assert_fail@plt+0xebc8>
   1febc:	mov	r0, r1
   1fec0:	bl	1fd58 <__assert_fail@plt+0xea24>
   1fec4:	subs	r6, r0, #0
   1fec8:	bne	1fed4 <__assert_fail@plt+0xeba0>
   1fecc:	mov	r0, #0
   1fed0:	pop	{r4, r5, r6, r7, r8, pc}
   1fed4:	ldr	r1, [r4, #8]
   1fed8:	cmp	r1, #0
   1fedc:	beq	1feec <__assert_fail@plt+0xebb8>
   1fee0:	ldr	r2, [r4]
   1fee4:	mul	r2, r2, r7
   1fee8:	bl	110ac <memcpy@plt>
   1feec:	stmib	r4, {r5, r6}
   1fef0:	str	r5, [r4]
   1fef4:	mov	r0, #1
   1fef8:	pop	{r4, r5, r6, r7, r8, pc}
   1fefc:	bl	1fd98 <__assert_fail@plt+0xea64>
   1ff00:	subs	r6, r0, #0
   1ff04:	bne	1feec <__assert_fail@plt+0xebb8>
   1ff08:	b	1fecc <__assert_fail@plt+0xeb98>
   1ff0c:	bl	11214 <__errno_location@plt>
   1ff10:	mov	r3, #12
   1ff14:	str	r3, [r0]
   1ff18:	b	1fecc <__assert_fail@plt+0xeb98>
   1ff1c:	push	{r0, r1, r2, r4, r5, lr}
   1ff20:	mov	r5, r0
   1ff24:	bl	11214 <__errno_location@plt>
   1ff28:	ldr	r3, [r0]
   1ff2c:	mov	r4, r0
   1ff30:	str	r3, [sp]
   1ff34:	str	r3, [sp, #4]
   1ff38:	mov	r3, #0
   1ff3c:	str	r3, [r0]
   1ff40:	mov	r0, r5
   1ff44:	bl	11088 <free@plt>
   1ff48:	ldr	r3, [r4]
   1ff4c:	add	r2, sp, #8
   1ff50:	cmp	r3, #0
   1ff54:	moveq	r3, #4
   1ff58:	movne	r3, #0
   1ff5c:	add	r3, r2, r3
   1ff60:	ldr	r3, [r3, #-8]
   1ff64:	str	r3, [r4]
   1ff68:	add	sp, sp, #12
   1ff6c:	pop	{r4, r5, pc}
   1ff70:	push	{r4, lr}
   1ff74:	mov	r0, #14
   1ff78:	bl	112bc <nl_langinfo@plt>
   1ff7c:	ldr	r3, [pc, #24]	; 1ff9c <__assert_fail@plt+0xec68>
   1ff80:	cmp	r0, #0
   1ff84:	moveq	r0, r3
   1ff88:	ldr	r3, [pc, #16]	; 1ffa0 <__assert_fail@plt+0xec6c>
   1ff8c:	ldrb	r2, [r0]
   1ff90:	cmp	r2, #0
   1ff94:	moveq	r0, r3
   1ff98:	pop	{r4, pc}
   1ff9c:	strdeq	r1, [r2], -r6
   1ffa0:	andeq	r1, r2, r1, lsr #21
   1ffa4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1ffa8:	subs	r5, r0, #0
   1ffac:	addeq	r5, sp, #4
   1ffb0:	mov	r0, r5
   1ffb4:	mov	r7, r2
   1ffb8:	mov	r6, r1
   1ffbc:	bl	11190 <mbrtowc@plt>
   1ffc0:	cmp	r7, #0
   1ffc4:	cmnne	r0, #3
   1ffc8:	mov	r4, r0
   1ffcc:	bls	1ffe8 <__assert_fail@plt+0xecb4>
   1ffd0:	mov	r0, #0
   1ffd4:	bl	20040 <__assert_fail@plt+0xed0c>
   1ffd8:	cmp	r0, #0
   1ffdc:	moveq	r4, #1
   1ffe0:	ldrbeq	r3, [r6]
   1ffe4:	streq	r3, [r5]
   1ffe8:	mov	r0, r4
   1ffec:	add	sp, sp, #12
   1fff0:	pop	{r4, r5, r6, r7, pc}
   1fff4:	push	{r4, r5, r6, lr}
   1fff8:	subs	r4, r2, #0
   1fffc:	mov	r6, r0
   20000:	mov	r5, r1
   20004:	beq	2001c <__assert_fail@plt+0xece8>
   20008:	mov	r1, r4
   2000c:	mvn	r0, #0
   20010:	bl	20120 <__assert_fail@plt+0xedec>
   20014:	cmp	r0, r5
   20018:	bcc	2002c <__assert_fail@plt+0xecf8>
   2001c:	mul	r1, r5, r4
   20020:	mov	r0, r6
   20024:	pop	{r4, r5, r6, lr}
   20028:	b	1fd98 <__assert_fail@plt+0xea64>
   2002c:	bl	11214 <__errno_location@plt>
   20030:	mov	r3, #12
   20034:	str	r3, [r0]
   20038:	mov	r0, #0
   2003c:	pop	{r4, r5, r6, pc}
   20040:	push	{lr}		; (str lr, [sp, #-4]!)
   20044:	sub	sp, sp, #268	; 0x10c
   20048:	ldr	r2, [pc, #64]	; 20090 <__assert_fail@plt+0xed5c>
   2004c:	add	r1, sp, #4
   20050:	bl	2009c <__assert_fail@plt+0xed68>
   20054:	cmp	r0, #0
   20058:	movne	r0, #0
   2005c:	bne	20088 <__assert_fail@plt+0xed54>
   20060:	ldr	r1, [pc, #44]	; 20094 <__assert_fail@plt+0xed60>
   20064:	add	r0, sp, #4
   20068:	bl	1104c <strcmp@plt>
   2006c:	cmp	r0, #0
   20070:	beq	20088 <__assert_fail@plt+0xed54>
   20074:	ldr	r1, [pc, #28]	; 20098 <__assert_fail@plt+0xed64>
   20078:	add	r0, sp, #4
   2007c:	bl	1104c <strcmp@plt>
   20080:	adds	r0, r0, #0
   20084:	movne	r0, #1
   20088:	add	sp, sp, #268	; 0x10c
   2008c:	pop	{pc}		; (ldr pc, [sp], #4)
   20090:	andeq	r0, r0, r1, lsl #2
   20094:	andeq	r1, r2, r7, lsr #21
   20098:	andeq	r1, r2, r9, lsr #21
   2009c:	push	{r4, r5, r6, lr}
   200a0:	mov	r5, r1
   200a4:	mov	r1, #0
   200a8:	mov	r4, r2
   200ac:	bl	11298 <setlocale@plt>
   200b0:	subs	r6, r0, #0
   200b4:	bne	200c8 <__assert_fail@plt+0xed94>
   200b8:	cmp	r4, #0
   200bc:	strbne	r6, [r5]
   200c0:	mov	r0, #22
   200c4:	pop	{r4, r5, r6, pc}
   200c8:	bl	111fc <strlen@plt>
   200cc:	cmp	r4, r0
   200d0:	bls	200ec <__assert_fail@plt+0xedb8>
   200d4:	add	r2, r0, #1
   200d8:	mov	r1, r6
   200dc:	mov	r0, r5
   200e0:	bl	110ac <memcpy@plt>
   200e4:	mov	r0, #0
   200e8:	pop	{r4, r5, r6, pc}
   200ec:	cmp	r4, #0
   200f0:	beq	20110 <__assert_fail@plt+0xeddc>
   200f4:	sub	r4, r4, #1
   200f8:	mov	r2, r4
   200fc:	mov	r1, r6
   20100:	mov	r0, r5
   20104:	bl	110ac <memcpy@plt>
   20108:	mov	r3, #0
   2010c:	strb	r3, [r5, r4]
   20110:	mov	r0, #34	; 0x22
   20114:	pop	{r4, r5, r6, pc}
   20118:	mov	r1, #0
   2011c:	b	11298 <setlocale@plt>
   20120:	subs	r2, r1, #1
   20124:	bxeq	lr
   20128:	bcc	20300 <__assert_fail@plt+0xefcc>
   2012c:	cmp	r0, r1
   20130:	bls	202e4 <__assert_fail@plt+0xefb0>
   20134:	tst	r1, r2
   20138:	beq	202f0 <__assert_fail@plt+0xefbc>
   2013c:	clz	r3, r0
   20140:	clz	r2, r1
   20144:	sub	r3, r2, r3
   20148:	rsbs	r3, r3, #31
   2014c:	addne	r3, r3, r3, lsl #1
   20150:	mov	r2, #0
   20154:	addne	pc, pc, r3, lsl #2
   20158:	nop			; (mov r0, r0)
   2015c:	cmp	r0, r1, lsl #31
   20160:	adc	r2, r2, r2
   20164:	subcs	r0, r0, r1, lsl #31
   20168:	cmp	r0, r1, lsl #30
   2016c:	adc	r2, r2, r2
   20170:	subcs	r0, r0, r1, lsl #30
   20174:	cmp	r0, r1, lsl #29
   20178:	adc	r2, r2, r2
   2017c:	subcs	r0, r0, r1, lsl #29
   20180:	cmp	r0, r1, lsl #28
   20184:	adc	r2, r2, r2
   20188:	subcs	r0, r0, r1, lsl #28
   2018c:	cmp	r0, r1, lsl #27
   20190:	adc	r2, r2, r2
   20194:	subcs	r0, r0, r1, lsl #27
   20198:	cmp	r0, r1, lsl #26
   2019c:	adc	r2, r2, r2
   201a0:	subcs	r0, r0, r1, lsl #26
   201a4:	cmp	r0, r1, lsl #25
   201a8:	adc	r2, r2, r2
   201ac:	subcs	r0, r0, r1, lsl #25
   201b0:	cmp	r0, r1, lsl #24
   201b4:	adc	r2, r2, r2
   201b8:	subcs	r0, r0, r1, lsl #24
   201bc:	cmp	r0, r1, lsl #23
   201c0:	adc	r2, r2, r2
   201c4:	subcs	r0, r0, r1, lsl #23
   201c8:	cmp	r0, r1, lsl #22
   201cc:	adc	r2, r2, r2
   201d0:	subcs	r0, r0, r1, lsl #22
   201d4:	cmp	r0, r1, lsl #21
   201d8:	adc	r2, r2, r2
   201dc:	subcs	r0, r0, r1, lsl #21
   201e0:	cmp	r0, r1, lsl #20
   201e4:	adc	r2, r2, r2
   201e8:	subcs	r0, r0, r1, lsl #20
   201ec:	cmp	r0, r1, lsl #19
   201f0:	adc	r2, r2, r2
   201f4:	subcs	r0, r0, r1, lsl #19
   201f8:	cmp	r0, r1, lsl #18
   201fc:	adc	r2, r2, r2
   20200:	subcs	r0, r0, r1, lsl #18
   20204:	cmp	r0, r1, lsl #17
   20208:	adc	r2, r2, r2
   2020c:	subcs	r0, r0, r1, lsl #17
   20210:	cmp	r0, r1, lsl #16
   20214:	adc	r2, r2, r2
   20218:	subcs	r0, r0, r1, lsl #16
   2021c:	cmp	r0, r1, lsl #15
   20220:	adc	r2, r2, r2
   20224:	subcs	r0, r0, r1, lsl #15
   20228:	cmp	r0, r1, lsl #14
   2022c:	adc	r2, r2, r2
   20230:	subcs	r0, r0, r1, lsl #14
   20234:	cmp	r0, r1, lsl #13
   20238:	adc	r2, r2, r2
   2023c:	subcs	r0, r0, r1, lsl #13
   20240:	cmp	r0, r1, lsl #12
   20244:	adc	r2, r2, r2
   20248:	subcs	r0, r0, r1, lsl #12
   2024c:	cmp	r0, r1, lsl #11
   20250:	adc	r2, r2, r2
   20254:	subcs	r0, r0, r1, lsl #11
   20258:	cmp	r0, r1, lsl #10
   2025c:	adc	r2, r2, r2
   20260:	subcs	r0, r0, r1, lsl #10
   20264:	cmp	r0, r1, lsl #9
   20268:	adc	r2, r2, r2
   2026c:	subcs	r0, r0, r1, lsl #9
   20270:	cmp	r0, r1, lsl #8
   20274:	adc	r2, r2, r2
   20278:	subcs	r0, r0, r1, lsl #8
   2027c:	cmp	r0, r1, lsl #7
   20280:	adc	r2, r2, r2
   20284:	subcs	r0, r0, r1, lsl #7
   20288:	cmp	r0, r1, lsl #6
   2028c:	adc	r2, r2, r2
   20290:	subcs	r0, r0, r1, lsl #6
   20294:	cmp	r0, r1, lsl #5
   20298:	adc	r2, r2, r2
   2029c:	subcs	r0, r0, r1, lsl #5
   202a0:	cmp	r0, r1, lsl #4
   202a4:	adc	r2, r2, r2
   202a8:	subcs	r0, r0, r1, lsl #4
   202ac:	cmp	r0, r1, lsl #3
   202b0:	adc	r2, r2, r2
   202b4:	subcs	r0, r0, r1, lsl #3
   202b8:	cmp	r0, r1, lsl #2
   202bc:	adc	r2, r2, r2
   202c0:	subcs	r0, r0, r1, lsl #2
   202c4:	cmp	r0, r1, lsl #1
   202c8:	adc	r2, r2, r2
   202cc:	subcs	r0, r0, r1, lsl #1
   202d0:	cmp	r0, r1
   202d4:	adc	r2, r2, r2
   202d8:	subcs	r0, r0, r1
   202dc:	mov	r0, r2
   202e0:	bx	lr
   202e4:	moveq	r0, #1
   202e8:	movne	r0, #0
   202ec:	bx	lr
   202f0:	clz	r2, r1
   202f4:	rsb	r2, r2, #31
   202f8:	lsr	r0, r0, r2
   202fc:	bx	lr
   20300:	cmp	r0, #0
   20304:	mvnne	r0, #0
   20308:	b	20640 <__assert_fail@plt+0xf30c>
   2030c:	cmp	r1, #0
   20310:	beq	20300 <__assert_fail@plt+0xefcc>
   20314:	push	{r0, r1, lr}
   20318:	bl	20120 <__assert_fail@plt+0xedec>
   2031c:	pop	{r1, r2, lr}
   20320:	mul	r3, r2, r0
   20324:	sub	r1, r1, r3
   20328:	bx	lr
   2032c:	cmp	r1, #0
   20330:	beq	2053c <__assert_fail@plt+0xf208>
   20334:	eor	ip, r0, r1
   20338:	rsbmi	r1, r1, #0
   2033c:	subs	r2, r1, #1
   20340:	beq	20508 <__assert_fail@plt+0xf1d4>
   20344:	movs	r3, r0
   20348:	rsbmi	r3, r0, #0
   2034c:	cmp	r3, r1
   20350:	bls	20514 <__assert_fail@plt+0xf1e0>
   20354:	tst	r1, r2
   20358:	beq	20524 <__assert_fail@plt+0xf1f0>
   2035c:	clz	r2, r3
   20360:	clz	r0, r1
   20364:	sub	r2, r0, r2
   20368:	rsbs	r2, r2, #31
   2036c:	addne	r2, r2, r2, lsl #1
   20370:	mov	r0, #0
   20374:	addne	pc, pc, r2, lsl #2
   20378:	nop			; (mov r0, r0)
   2037c:	cmp	r3, r1, lsl #31
   20380:	adc	r0, r0, r0
   20384:	subcs	r3, r3, r1, lsl #31
   20388:	cmp	r3, r1, lsl #30
   2038c:	adc	r0, r0, r0
   20390:	subcs	r3, r3, r1, lsl #30
   20394:	cmp	r3, r1, lsl #29
   20398:	adc	r0, r0, r0
   2039c:	subcs	r3, r3, r1, lsl #29
   203a0:	cmp	r3, r1, lsl #28
   203a4:	adc	r0, r0, r0
   203a8:	subcs	r3, r3, r1, lsl #28
   203ac:	cmp	r3, r1, lsl #27
   203b0:	adc	r0, r0, r0
   203b4:	subcs	r3, r3, r1, lsl #27
   203b8:	cmp	r3, r1, lsl #26
   203bc:	adc	r0, r0, r0
   203c0:	subcs	r3, r3, r1, lsl #26
   203c4:	cmp	r3, r1, lsl #25
   203c8:	adc	r0, r0, r0
   203cc:	subcs	r3, r3, r1, lsl #25
   203d0:	cmp	r3, r1, lsl #24
   203d4:	adc	r0, r0, r0
   203d8:	subcs	r3, r3, r1, lsl #24
   203dc:	cmp	r3, r1, lsl #23
   203e0:	adc	r0, r0, r0
   203e4:	subcs	r3, r3, r1, lsl #23
   203e8:	cmp	r3, r1, lsl #22
   203ec:	adc	r0, r0, r0
   203f0:	subcs	r3, r3, r1, lsl #22
   203f4:	cmp	r3, r1, lsl #21
   203f8:	adc	r0, r0, r0
   203fc:	subcs	r3, r3, r1, lsl #21
   20400:	cmp	r3, r1, lsl #20
   20404:	adc	r0, r0, r0
   20408:	subcs	r3, r3, r1, lsl #20
   2040c:	cmp	r3, r1, lsl #19
   20410:	adc	r0, r0, r0
   20414:	subcs	r3, r3, r1, lsl #19
   20418:	cmp	r3, r1, lsl #18
   2041c:	adc	r0, r0, r0
   20420:	subcs	r3, r3, r1, lsl #18
   20424:	cmp	r3, r1, lsl #17
   20428:	adc	r0, r0, r0
   2042c:	subcs	r3, r3, r1, lsl #17
   20430:	cmp	r3, r1, lsl #16
   20434:	adc	r0, r0, r0
   20438:	subcs	r3, r3, r1, lsl #16
   2043c:	cmp	r3, r1, lsl #15
   20440:	adc	r0, r0, r0
   20444:	subcs	r3, r3, r1, lsl #15
   20448:	cmp	r3, r1, lsl #14
   2044c:	adc	r0, r0, r0
   20450:	subcs	r3, r3, r1, lsl #14
   20454:	cmp	r3, r1, lsl #13
   20458:	adc	r0, r0, r0
   2045c:	subcs	r3, r3, r1, lsl #13
   20460:	cmp	r3, r1, lsl #12
   20464:	adc	r0, r0, r0
   20468:	subcs	r3, r3, r1, lsl #12
   2046c:	cmp	r3, r1, lsl #11
   20470:	adc	r0, r0, r0
   20474:	subcs	r3, r3, r1, lsl #11
   20478:	cmp	r3, r1, lsl #10
   2047c:	adc	r0, r0, r0
   20480:	subcs	r3, r3, r1, lsl #10
   20484:	cmp	r3, r1, lsl #9
   20488:	adc	r0, r0, r0
   2048c:	subcs	r3, r3, r1, lsl #9
   20490:	cmp	r3, r1, lsl #8
   20494:	adc	r0, r0, r0
   20498:	subcs	r3, r3, r1, lsl #8
   2049c:	cmp	r3, r1, lsl #7
   204a0:	adc	r0, r0, r0
   204a4:	subcs	r3, r3, r1, lsl #7
   204a8:	cmp	r3, r1, lsl #6
   204ac:	adc	r0, r0, r0
   204b0:	subcs	r3, r3, r1, lsl #6
   204b4:	cmp	r3, r1, lsl #5
   204b8:	adc	r0, r0, r0
   204bc:	subcs	r3, r3, r1, lsl #5
   204c0:	cmp	r3, r1, lsl #4
   204c4:	adc	r0, r0, r0
   204c8:	subcs	r3, r3, r1, lsl #4
   204cc:	cmp	r3, r1, lsl #3
   204d0:	adc	r0, r0, r0
   204d4:	subcs	r3, r3, r1, lsl #3
   204d8:	cmp	r3, r1, lsl #2
   204dc:	adc	r0, r0, r0
   204e0:	subcs	r3, r3, r1, lsl #2
   204e4:	cmp	r3, r1, lsl #1
   204e8:	adc	r0, r0, r0
   204ec:	subcs	r3, r3, r1, lsl #1
   204f0:	cmp	r3, r1
   204f4:	adc	r0, r0, r0
   204f8:	subcs	r3, r3, r1
   204fc:	cmp	ip, #0
   20500:	rsbmi	r0, r0, #0
   20504:	bx	lr
   20508:	teq	ip, r0
   2050c:	rsbmi	r0, r0, #0
   20510:	bx	lr
   20514:	movcc	r0, #0
   20518:	asreq	r0, ip, #31
   2051c:	orreq	r0, r0, #1
   20520:	bx	lr
   20524:	clz	r2, r1
   20528:	rsb	r2, r2, #31
   2052c:	cmp	ip, #0
   20530:	lsr	r0, r3, r2
   20534:	rsbmi	r0, r0, #0
   20538:	bx	lr
   2053c:	cmp	r0, #0
   20540:	mvngt	r0, #-2147483648	; 0x80000000
   20544:	movlt	r0, #-2147483648	; 0x80000000
   20548:	b	20640 <__assert_fail@plt+0xf30c>
   2054c:	cmp	r1, #0
   20550:	beq	2053c <__assert_fail@plt+0xf208>
   20554:	push	{r0, r1, lr}
   20558:	bl	20334 <__assert_fail@plt+0xf000>
   2055c:	pop	{r1, r2, lr}
   20560:	mul	r3, r2, r0
   20564:	sub	r1, r1, r3
   20568:	bx	lr
   2056c:	cmp	r3, #0
   20570:	cmpeq	r2, #0
   20574:	bne	20598 <__assert_fail@plt+0xf264>
   20578:	cmp	r1, #0
   2057c:	movlt	r1, #-2147483648	; 0x80000000
   20580:	movlt	r0, #0
   20584:	blt	20594 <__assert_fail@plt+0xf260>
   20588:	cmpeq	r0, #0
   2058c:	mvnne	r1, #-2147483648	; 0x80000000
   20590:	mvnne	r0, #0
   20594:	b	20640 <__assert_fail@plt+0xf30c>
   20598:	sub	sp, sp, #8
   2059c:	push	{sp, lr}
   205a0:	cmp	r1, #0
   205a4:	blt	205c4 <__assert_fail@plt+0xf290>
   205a8:	cmp	r3, #0
   205ac:	blt	205f8 <__assert_fail@plt+0xf2c4>
   205b0:	bl	20650 <__assert_fail@plt+0xf31c>
   205b4:	ldr	lr, [sp, #4]
   205b8:	add	sp, sp, #8
   205bc:	pop	{r2, r3}
   205c0:	bx	lr
   205c4:	rsbs	r0, r0, #0
   205c8:	sbc	r1, r1, r1, lsl #1
   205cc:	cmp	r3, #0
   205d0:	blt	2061c <__assert_fail@plt+0xf2e8>
   205d4:	bl	20650 <__assert_fail@plt+0xf31c>
   205d8:	ldr	lr, [sp, #4]
   205dc:	add	sp, sp, #8
   205e0:	pop	{r2, r3}
   205e4:	rsbs	r0, r0, #0
   205e8:	sbc	r1, r1, r1, lsl #1
   205ec:	rsbs	r2, r2, #0
   205f0:	sbc	r3, r3, r3, lsl #1
   205f4:	bx	lr
   205f8:	rsbs	r2, r2, #0
   205fc:	sbc	r3, r3, r3, lsl #1
   20600:	bl	20650 <__assert_fail@plt+0xf31c>
   20604:	ldr	lr, [sp, #4]
   20608:	add	sp, sp, #8
   2060c:	pop	{r2, r3}
   20610:	rsbs	r0, r0, #0
   20614:	sbc	r1, r1, r1, lsl #1
   20618:	bx	lr
   2061c:	rsbs	r2, r2, #0
   20620:	sbc	r3, r3, r3, lsl #1
   20624:	bl	20650 <__assert_fail@plt+0xf31c>
   20628:	ldr	lr, [sp, #4]
   2062c:	add	sp, sp, #8
   20630:	pop	{r2, r3}
   20634:	rsbs	r2, r2, #0
   20638:	sbc	r3, r3, r3, lsl #1
   2063c:	bx	lr
   20640:	push	{r1, lr}
   20644:	mov	r0, #8
   20648:	bl	11028 <raise@plt>
   2064c:	pop	{r1, pc}
   20650:	cmp	r1, r3
   20654:	push	{r4, r5, r6, r7, r8, r9, lr}
   20658:	cmpeq	r0, r2
   2065c:	mov	r4, r0
   20660:	mov	r5, r1
   20664:	ldr	r9, [sp, #28]
   20668:	movcc	r0, #0
   2066c:	movcc	r1, #0
   20670:	bcc	20768 <__assert_fail@plt+0xf434>
   20674:	cmp	r3, #0
   20678:	clzeq	ip, r2
   2067c:	clzne	ip, r3
   20680:	addeq	ip, ip, #32
   20684:	cmp	r5, #0
   20688:	clzeq	r1, r4
   2068c:	addeq	r1, r1, #32
   20690:	clzne	r1, r5
   20694:	sub	ip, ip, r1
   20698:	sub	lr, ip, #32
   2069c:	lsl	r7, r3, ip
   206a0:	rsb	r8, ip, #32
   206a4:	orr	r7, r7, r2, lsl lr
   206a8:	orr	r7, r7, r2, lsr r8
   206ac:	lsl	r6, r2, ip
   206b0:	cmp	r5, r7
   206b4:	cmpeq	r4, r6
   206b8:	movcc	r0, #0
   206bc:	movcc	r1, #0
   206c0:	bcc	206dc <__assert_fail@plt+0xf3a8>
   206c4:	mov	r3, #1
   206c8:	subs	r4, r4, r6
   206cc:	lsl	r1, r3, lr
   206d0:	lsl	r0, r3, ip
   206d4:	orr	r1, r1, r3, lsr r8
   206d8:	sbc	r5, r5, r7
   206dc:	cmp	ip, #0
   206e0:	beq	20768 <__assert_fail@plt+0xf434>
   206e4:	lsrs	r3, r7, #1
   206e8:	rrx	r2, r6
   206ec:	mov	r6, ip
   206f0:	b	20714 <__assert_fail@plt+0xf3e0>
   206f4:	subs	r4, r4, r2
   206f8:	sbc	r5, r5, r3
   206fc:	adds	r4, r4, r4
   20700:	adc	r5, r5, r5
   20704:	adds	r4, r4, #1
   20708:	adc	r5, r5, #0
   2070c:	subs	r6, r6, #1
   20710:	beq	20730 <__assert_fail@plt+0xf3fc>
   20714:	cmp	r5, r3
   20718:	cmpeq	r4, r2
   2071c:	bcs	206f4 <__assert_fail@plt+0xf3c0>
   20720:	adds	r4, r4, r4
   20724:	adc	r5, r5, r5
   20728:	subs	r6, r6, #1
   2072c:	bne	20714 <__assert_fail@plt+0xf3e0>
   20730:	lsr	r6, r4, ip
   20734:	lsr	r7, r5, ip
   20738:	orr	r6, r6, r5, lsl r8
   2073c:	adds	r2, r0, r4
   20740:	orr	r6, r6, r5, lsr lr
   20744:	adc	r3, r1, r5
   20748:	lsl	r1, r7, ip
   2074c:	orr	r1, r1, r6, lsl lr
   20750:	lsl	r0, r6, ip
   20754:	orr	r1, r1, r6, lsr r8
   20758:	subs	r0, r2, r0
   2075c:	mov	r4, r6
   20760:	mov	r5, r7
   20764:	sbc	r1, r3, r1
   20768:	cmp	r9, #0
   2076c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   20770:	strd	r4, [r9]
   20774:	pop	{r4, r5, r6, r7, r8, r9, pc}
   20778:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2077c:	mov	r7, r0
   20780:	ldr	r6, [pc, #72]	; 207d0 <__assert_fail@plt+0xf49c>
   20784:	ldr	r5, [pc, #72]	; 207d4 <__assert_fail@plt+0xf4a0>
   20788:	add	r6, pc, r6
   2078c:	add	r5, pc, r5
   20790:	sub	r6, r6, r5
   20794:	mov	r8, r1
   20798:	mov	r9, r2
   2079c:	bl	10fd8 <pthread_mutex_unlock@plt-0x20>
   207a0:	asrs	r6, r6, #2
   207a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   207a8:	mov	r4, #0
   207ac:	add	r4, r4, #1
   207b0:	ldr	r3, [r5], #4
   207b4:	mov	r2, r9
   207b8:	mov	r1, r8
   207bc:	mov	r0, r7
   207c0:	blx	r3
   207c4:	cmp	r6, r4
   207c8:	bne	207ac <__assert_fail@plt+0xf478>
   207cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   207d0:	andeq	r1, r1, r0, lsl #15
   207d4:	andeq	r1, r1, r8, ror r7
   207d8:	bx	lr
   207dc:	ldr	r3, [pc, #12]	; 207f0 <__assert_fail@plt+0xf4bc>
   207e0:	mov	r1, #0
   207e4:	add	r3, pc, r3
   207e8:	ldr	r2, [r3]
   207ec:	b	1122c <__cxa_atexit@plt>
   207f0:	andeq	r1, r1, r0, asr #18

Disassembly of section .fini:

000207f4 <.fini>:
   207f4:	push	{r3, lr}
   207f8:	pop	{r3, pc}
