
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e40 <.init>:
   10e40:	push	{r3, lr}
   10e44:	bl	11118 <__assert_fail@plt+0x48>
   10e48:	pop	{r3, pc}

Disassembly of section .plt:

00010e4c <calloc@plt-0x14>:
   10e4c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e50:	ldr	lr, [pc, #4]	; 10e5c <calloc@plt-0x4>
   10e54:	add	lr, pc, lr
   10e58:	ldr	pc, [lr, #8]!
   10e5c:	andeq	r5, r1, r4, lsr #3

00010e60 <calloc@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #86016	; 0x15000
   10e68:	ldr	pc, [ip, #420]!	; 0x1a4

00010e6c <fputs_unlocked@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #86016	; 0x15000
   10e74:	ldr	pc, [ip, #412]!	; 0x19c

00010e78 <raise@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #86016	; 0x15000
   10e80:	ldr	pc, [ip, #404]!	; 0x194

00010e84 <strcmp@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #86016	; 0x15000
   10e8c:	ldr	pc, [ip, #396]!	; 0x18c

00010e90 <posix_fadvise64@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #86016	; 0x15000
   10e98:	ldr	pc, [ip, #388]!	; 0x184

00010e9c <fflush@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #86016	; 0x15000
   10ea4:	ldr	pc, [ip, #380]!	; 0x17c

00010ea8 <memmove@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #86016	; 0x15000
   10eb0:	ldr	pc, [ip, #372]!	; 0x174

00010eb4 <free@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #364]!	; 0x16c

00010ec0 <_exit@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #356]!	; 0x164

00010ecc <memcpy@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #348]!	; 0x15c

00010ed8 <mbsinit@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #340]!	; 0x154

00010ee4 <fwrite_unlocked@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #332]!	; 0x14c

00010ef0 <memcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #324]!	; 0x144

00010efc <getc_unlocked@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #316]!	; 0x13c

00010f08 <dcgettext@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #308]!	; 0x134

00010f14 <realloc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #300]!	; 0x12c

00010f20 <textdomain@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #292]!	; 0x124

00010f2c <iswprint@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #284]!	; 0x11c

00010f38 <fwrite@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #276]!	; 0x114

00010f44 <lseek64@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #268]!	; 0x10c

00010f50 <__ctype_get_mb_cur_max@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #260]!	; 0x104

00010f5c <__fpending@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #252]!	; 0xfc

00010f68 <ferror_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #244]!	; 0xf4

00010f74 <mbrtowc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #236]!	; 0xec

00010f80 <error@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #228]!	; 0xe4

00010f8c <malloc@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #220]!	; 0xdc

00010f98 <__libc_start_main@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #212]!	; 0xd4

00010fa4 <__freading@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #204]!	; 0xcc

00010fb0 <__gmon_start__@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #196]!	; 0xc4

00010fbc <getopt_long@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #188]!	; 0xbc

00010fc8 <__ctype_b_loc@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #180]!	; 0xb4

00010fd4 <exit@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #172]!	; 0xac

00010fe0 <strlen@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #164]!	; 0xa4

00010fec <strchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #156]!	; 0x9c

00010ff8 <__errno_location@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #148]!	; 0x94

00011004 <__cxa_atexit@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #86016	; 0x15000
   1100c:	ldr	pc, [ip, #140]!	; 0x8c

00011010 <memset@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #86016	; 0x15000
   11018:	ldr	pc, [ip, #132]!	; 0x84

0001101c <__printf_chk@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #86016	; 0x15000
   11024:	ldr	pc, [ip, #124]!	; 0x7c

00011028 <fileno@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #86016	; 0x15000
   11030:	ldr	pc, [ip, #116]!	; 0x74

00011034 <strtoumax@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #86016	; 0x15000
   1103c:	ldr	pc, [ip, #108]!	; 0x6c

00011040 <__fprintf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #86016	; 0x15000
   11048:	ldr	pc, [ip, #100]!	; 0x64

0001104c <fclose@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #86016	; 0x15000
   11054:	ldr	pc, [ip, #92]!	; 0x5c

00011058 <fseeko64@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #86016	; 0x15000
   11060:	ldr	pc, [ip, #84]!	; 0x54

00011064 <setlocale@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #86016	; 0x15000
   1106c:	ldr	pc, [ip, #76]!	; 0x4c

00011070 <strrchr@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #86016	; 0x15000
   11078:	ldr	pc, [ip, #68]!	; 0x44

0001107c <nl_langinfo@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #86016	; 0x15000
   11084:	ldr	pc, [ip, #60]!	; 0x3c

00011088 <clearerr_unlocked@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #86016	; 0x15000
   11090:	ldr	pc, [ip, #52]!	; 0x34

00011094 <fopen64@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #86016	; 0x15000
   1109c:	ldr	pc, [ip, #44]!	; 0x2c

000110a0 <bindtextdomain@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #36]!	; 0x24

000110ac <strncmp@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #28]!

000110b8 <abort@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #86016	; 0x15000
   110c0:	ldr	pc, [ip, #20]!

000110c4 <putchar_unlocked@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #86016	; 0x15000
   110cc:	ldr	pc, [ip, #12]!

000110d0 <__assert_fail@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #86016	; 0x15000
   110d8:	ldr	pc, [ip, #4]!

Disassembly of section .text:

000110dc <.text>:
   110dc:	mov	fp, #0
   110e0:	mov	lr, #0
   110e4:	pop	{r1}		; (ldr r1, [sp], #4)
   110e8:	mov	r2, sp
   110ec:	push	{r2}		; (str r2, [sp, #-4]!)
   110f0:	push	{r0}		; (str r0, [sp, #-4]!)
   110f4:	ldr	ip, [pc, #16]	; 1110c <__assert_fail@plt+0x3c>
   110f8:	push	{ip}		; (str ip, [sp, #-4]!)
   110fc:	ldr	r0, [pc, #12]	; 11110 <__assert_fail@plt+0x40>
   11100:	ldr	r3, [pc, #12]	; 11114 <__assert_fail@plt+0x44>
   11104:	bl	10f98 <__libc_start_main@plt>
   11108:	bl	110b8 <abort@plt>
   1110c:	andeq	r5, r1, r4, lsl r2
   11110:	andeq	r1, r1, r0, asr #9
   11114:			; <UNDEFINED> instruction: 0x000151b4
   11118:	ldr	r3, [pc, #20]	; 11134 <__assert_fail@plt+0x64>
   1111c:	ldr	r2, [pc, #20]	; 11138 <__assert_fail@plt+0x68>
   11120:	add	r3, pc, r3
   11124:	ldr	r2, [r3, r2]
   11128:	cmp	r2, #0
   1112c:	bxeq	lr
   11130:	b	10fb0 <__gmon_start__@plt>
   11134:	ldrdeq	r4, [r1], -r8
   11138:	andeq	r0, r0, r0, ror #1
   1113c:	ldr	r0, [pc, #24]	; 1115c <__assert_fail@plt+0x8c>
   11140:	ldr	r3, [pc, #24]	; 11160 <__assert_fail@plt+0x90>
   11144:	cmp	r3, r0
   11148:	bxeq	lr
   1114c:	ldr	r3, [pc, #16]	; 11164 <__assert_fail@plt+0x94>
   11150:	cmp	r3, #0
   11154:	bxeq	lr
   11158:	bx	r3
   1115c:	andeq	r6, r2, r8, lsr r1
   11160:	andeq	r6, r2, r8, lsr r1
   11164:	andeq	r0, r0, r0
   11168:	ldr	r0, [pc, #36]	; 11194 <__assert_fail@plt+0xc4>
   1116c:	ldr	r1, [pc, #36]	; 11198 <__assert_fail@plt+0xc8>
   11170:	sub	r1, r1, r0
   11174:	asr	r1, r1, #2
   11178:	add	r1, r1, r1, lsr #31
   1117c:	asrs	r1, r1, #1
   11180:	bxeq	lr
   11184:	ldr	r3, [pc, #16]	; 1119c <__assert_fail@plt+0xcc>
   11188:	cmp	r3, #0
   1118c:	bxeq	lr
   11190:	bx	r3
   11194:	andeq	r6, r2, r8, lsr r1
   11198:	andeq	r6, r2, r8, lsr r1
   1119c:	andeq	r0, r0, r0
   111a0:	push	{r4, lr}
   111a4:	ldr	r4, [pc, #24]	; 111c4 <__assert_fail@plt+0xf4>
   111a8:	ldrb	r3, [r4]
   111ac:	cmp	r3, #0
   111b0:	popne	{r4, pc}
   111b4:	bl	1113c <__assert_fail@plt+0x6c>
   111b8:	mov	r3, #1
   111bc:	strb	r3, [r4]
   111c0:	pop	{r4, pc}
   111c4:	andeq	r6, r2, ip, asr r1
   111c8:	b	11168 <__assert_fail@plt+0x98>
   111cc:	push	{fp, lr}
   111d0:	mov	fp, sp
   111d4:	mov	r4, r0
   111d8:	cmp	r0, #0
   111dc:	bne	11298 <__assert_fail@plt+0x1c8>
   111e0:	movw	r1, #21091	; 0x5263
   111e4:	movt	r1, #1
   111e8:	mov	r0, #0
   111ec:	mov	r2, #5
   111f0:	bl	10f08 <dcgettext@plt>
   111f4:	mov	r1, r0
   111f8:	movw	r0, #24948	; 0x6174
   111fc:	movt	r0, #2
   11200:	ldr	r2, [r0]
   11204:	mov	r0, #1
   11208:	bl	1101c <__printf_chk@plt>
   1120c:	movw	r1, #21124	; 0x5284
   11210:	movt	r1, #1
   11214:	mov	r0, #0
   11218:	mov	r2, #5
   1121c:	bl	10f08 <dcgettext@plt>
   11220:	movw	r5, #24916	; 0x6154
   11224:	movt	r5, #2
   11228:	ldr	r1, [r5]
   1122c:	bl	10e6c <fputs_unlocked@plt>
   11230:	bl	112dc <__assert_fail@plt+0x20c>
   11234:	bl	1130c <__assert_fail@plt+0x23c>
   11238:	movw	r1, #21184	; 0x52c0
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10f08 <dcgettext@plt>
   1124c:	ldr	r1, [r5]
   11250:	bl	10e6c <fputs_unlocked@plt>
   11254:	movw	r1, #21331	; 0x5353
   11258:	movt	r1, #1
   1125c:	mov	r0, #0
   11260:	mov	r2, #5
   11264:	bl	10f08 <dcgettext@plt>
   11268:	ldr	r1, [r5]
   1126c:	bl	10e6c <fputs_unlocked@plt>
   11270:	movw	r1, #21376	; 0x5380
   11274:	movt	r1, #1
   11278:	mov	r0, #0
   1127c:	mov	r2, #5
   11280:	bl	10f08 <dcgettext@plt>
   11284:	ldr	r1, [r5]
   11288:	bl	10e6c <fputs_unlocked@plt>
   1128c:	bl	1133c <__assert_fail@plt+0x26c>
   11290:	mov	r0, r4
   11294:	bl	10fd4 <exit@plt>
   11298:	movw	r0, #24904	; 0x6148
   1129c:	movt	r0, #2
   112a0:	ldr	r5, [r0]
   112a4:	movw	r1, #21052	; 0x523c
   112a8:	movt	r1, #1
   112ac:	mov	r0, #0
   112b0:	mov	r2, #5
   112b4:	bl	10f08 <dcgettext@plt>
   112b8:	mov	r2, r0
   112bc:	movw	r0, #24948	; 0x6174
   112c0:	movt	r0, #2
   112c4:	ldr	r3, [r0]
   112c8:	mov	r0, r5
   112cc:	mov	r1, #1
   112d0:	bl	11040 <__fprintf_chk@plt>
   112d4:	mov	r0, r4
   112d8:	bl	10fd4 <exit@plt>
   112dc:	push	{fp, lr}
   112e0:	mov	fp, sp
   112e4:	movw	r1, #21515	; 0x540b
   112e8:	movt	r1, #1
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	bl	10f08 <dcgettext@plt>
   112f8:	movw	r1, #24916	; 0x6154
   112fc:	movt	r1, #2
   11300:	ldr	r1, [r1]
   11304:	pop	{fp, lr}
   11308:	b	10e6c <fputs_unlocked@plt>
   1130c:	push	{fp, lr}
   11310:	mov	fp, sp
   11314:	movw	r1, #21571	; 0x5443
   11318:	movt	r1, #1
   1131c:	mov	r0, #0
   11320:	mov	r2, #5
   11324:	bl	10f08 <dcgettext@plt>
   11328:	movw	r1, #24916	; 0x6154
   1132c:	movt	r1, #2
   11330:	ldr	r1, [r1]
   11334:	pop	{fp, lr}
   11338:	b	10e6c <fputs_unlocked@plt>
   1133c:	push	{r4, r5, fp, lr}
   11340:	add	fp, sp, #8
   11344:	sub	sp, sp, #56	; 0x38
   11348:	movw	r0, #22128	; 0x5670
   1134c:	movt	r0, #1
   11350:	add	r1, r0, #32
   11354:	mov	r5, sp
   11358:	mov	r2, #48	; 0x30
   1135c:	vld1.64	{d16-d17}, [r1]
   11360:	add	r1, r5, #32
   11364:	add	r3, r0, #16
   11368:	vld1.64	{d18-d19}, [r0], r2
   1136c:	vld1.64	{d20-d21}, [r3]
   11370:	vldr	d22, [r0]
   11374:	vst1.64	{d16-d17}, [r1]
   11378:	add	r0, r5, #16
   1137c:	vst1.64	{d20-d21}, [r0]
   11380:	mov	r0, r5
   11384:	vst1.64	{d18-d19}, [r0], r2
   11388:	vstr	d22, [r0]
   1138c:	ldr	r1, [sp]
   11390:	cmp	r1, #0
   11394:	beq	113bc <__assert_fail@plt+0x2ec>
   11398:	mov	r5, sp
   1139c:	movw	r4, #21430	; 0x53b6
   113a0:	movt	r4, #1
   113a4:	mov	r0, r4
   113a8:	bl	10e84 <strcmp@plt>
   113ac:	cmp	r0, #0
   113b0:	ldrne	r1, [r5, #8]!
   113b4:	cmpne	r1, #0
   113b8:	bne	113a4 <__assert_fail@plt+0x2d4>
   113bc:	ldr	r4, [r5, #4]
   113c0:	movw	r1, #21741	; 0x54ed
   113c4:	movt	r1, #1
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	bl	10f08 <dcgettext@plt>
   113d4:	mov	r1, r0
   113d8:	movw	r2, #21485	; 0x53ed
   113dc:	movt	r2, #1
   113e0:	movw	r3, #21764	; 0x5504
   113e4:	movt	r3, #1
   113e8:	mov	r0, #1
   113ec:	bl	1101c <__printf_chk@plt>
   113f0:	movw	r5, #21430	; 0x53b6
   113f4:	movt	r5, #1
   113f8:	cmp	r4, #0
   113fc:	moveq	r4, r5
   11400:	mov	r0, #5
   11404:	mov	r1, #0
   11408:	bl	11064 <setlocale@plt>
   1140c:	cmp	r0, #0
   11410:	beq	11450 <__assert_fail@plt+0x380>
   11414:	movw	r1, #21804	; 0x552c
   11418:	movt	r1, #1
   1141c:	mov	r2, #3
   11420:	bl	110ac <strncmp@plt>
   11424:	cmp	r0, #0
   11428:	beq	11450 <__assert_fail@plt+0x380>
   1142c:	movw	r1, #21808	; 0x5530
   11430:	movt	r1, #1
   11434:	mov	r0, #0
   11438:	mov	r2, #5
   1143c:	bl	10f08 <dcgettext@plt>
   11440:	movw	r1, #24916	; 0x6154
   11444:	movt	r1, #2
   11448:	ldr	r1, [r1]
   1144c:	bl	10e6c <fputs_unlocked@plt>
   11450:	movw	r1, #21879	; 0x5577
   11454:	movt	r1, #1
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	bl	10f08 <dcgettext@plt>
   11464:	mov	r1, r0
   11468:	movw	r2, #21764	; 0x5504
   1146c:	movt	r2, #1
   11470:	mov	r0, #1
   11474:	mov	r3, r5
   11478:	bl	1101c <__printf_chk@plt>
   1147c:	movw	r1, #21906	; 0x5592
   11480:	movt	r1, #1
   11484:	mov	r0, #0
   11488:	mov	r2, #5
   1148c:	bl	10f08 <dcgettext@plt>
   11490:	mov	r1, r0
   11494:	movw	r0, #21674	; 0x54aa
   11498:	movt	r0, #1
   1149c:	movw	r3, #21956	; 0x55c4
   114a0:	movt	r3, #1
   114a4:	cmp	r4, r5
   114a8:	moveq	r3, r0
   114ac:	mov	r0, #1
   114b0:	mov	r2, r4
   114b4:	bl	1101c <__printf_chk@plt>
   114b8:	sub	sp, fp, #8
   114bc:	pop	{r4, r5, fp, pc}
   114c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c4:	add	fp, sp, #28
   114c8:	sub	sp, sp, #28
   114cc:	mov	r4, r1
   114d0:	mov	r5, r0
   114d4:	ldr	r0, [r1]
   114d8:	bl	11e34 <__assert_fail@plt+0xd64>
   114dc:	movw	r1, #21956	; 0x55c4
   114e0:	movt	r1, #1
   114e4:	mov	r0, #6
   114e8:	bl	11064 <setlocale@plt>
   114ec:	movw	r6, #21489	; 0x53f1
   114f0:	movt	r6, #1
   114f4:	movw	r1, #21435	; 0x53bb
   114f8:	movt	r1, #1
   114fc:	mov	r0, r6
   11500:	bl	110a0 <bindtextdomain@plt>
   11504:	mov	r0, r6
   11508:	bl	10f20 <textdomain@plt>
   1150c:	movw	r0, #7008	; 0x1b60
   11510:	movt	r0, #1
   11514:	bl	15218 <__assert_fail@plt+0x4148>
   11518:	movw	r0, #24928	; 0x6160
   1151c:	movt	r0, #2
   11520:	mov	r8, #0
   11524:	strb	r8, [r0]
   11528:	movw	r0, #24929	; 0x6161
   1152c:	movt	r0, #2
   11530:	strb	r8, [r0]
   11534:	movw	r0, #24930	; 0x6162
   11538:	movt	r0, #2
   1153c:	strb	r8, [r0]
   11540:	str	r8, [sp]
   11544:	movw	r2, #21992	; 0x55e8
   11548:	movt	r2, #1
   1154c:	movw	r3, #22028	; 0x560c
   11550:	movt	r3, #1
   11554:	mov	r0, r5
   11558:	mov	r1, r4
   1155c:	bl	10fbc <getopt_long@plt>
   11560:	mov	r7, #80	; 0x50
   11564:	cmn	r0, #1
   11568:	beq	11664 <__assert_fail@plt+0x594>
   1156c:	movw	r9, #24920	; 0x6158
   11570:	movt	r9, #2
   11574:	movw	sl, #21992	; 0x55e8
   11578:	movt	sl, #1
   1157c:	movw	r6, #22028	; 0x560c
   11580:	movt	r6, #1
   11584:	b	115cc <__assert_fail@plt+0x4fc>
   11588:	cmp	r0, #114	; 0x72
   1158c:	ble	115a4 <__assert_fail@plt+0x4d4>
   11590:	cmp	r0, #115	; 0x73
   11594:	beq	115b8 <__assert_fail@plt+0x4e8>
   11598:	cmp	r0, #119	; 0x77
   1159c:	beq	115fc <__assert_fail@plt+0x52c>
   115a0:	b	11754 <__assert_fail@plt+0x684>
   115a4:	cmp	r0, #98	; 0x62
   115a8:	bne	116f4 <__assert_fail@plt+0x624>
   115ac:	movw	r0, #24929	; 0x6161
   115b0:	movt	r0, #2
   115b4:	b	115c0 <__assert_fail@plt+0x4f0>
   115b8:	movw	r0, #24930	; 0x6162
   115bc:	movt	r0, #2
   115c0:	mov	r1, #1
   115c4:	strb	r1, [r0]
   115c8:	b	11644 <__assert_fail@plt+0x574>
   115cc:	sub	r1, r0, #48	; 0x30
   115d0:	cmp	r1, #10
   115d4:	bcs	11588 <__assert_fail@plt+0x4b8>
   115d8:	ldr	r1, [r9]
   115dc:	cmp	r1, #0
   115e0:	beq	115ec <__assert_fail@plt+0x51c>
   115e4:	sub	r0, r1, #1
   115e8:	b	115f8 <__assert_fail@plt+0x528>
   115ec:	strb	r8, [sp, #27]
   115f0:	strb	r0, [sp, #26]
   115f4:	add	r0, sp, #26
   115f8:	str	r0, [r9]
   115fc:	ldr	r7, [r9]
   11600:	mov	r0, #0
   11604:	movw	r1, #21459	; 0x53d3
   11608:	movt	r1, #1
   1160c:	mov	r2, #5
   11610:	bl	10f08 <dcgettext@plt>
   11614:	mvn	r1, #9
   11618:	stm	sp, {r1, r8}
   1161c:	movw	r1, #21956	; 0x55c4
   11620:	movt	r1, #1
   11624:	str	r1, [sp, #8]
   11628:	str	r0, [sp, #12]
   1162c:	str	r8, [sp, #16]
   11630:	mov	r0, r7
   11634:	mov	r2, #1
   11638:	mov	r3, #0
   1163c:	bl	14428 <__assert_fail@plt+0x3358>
   11640:	mov	r7, r0
   11644:	str	r8, [sp]
   11648:	mov	r0, r5
   1164c:	mov	r1, r4
   11650:	mov	r2, sl
   11654:	mov	r3, r6
   11658:	bl	10fbc <getopt_long@plt>
   1165c:	cmn	r0, #1
   11660:	bne	115cc <__assert_fail@plt+0x4fc>
   11664:	movw	r0, #24896	; 0x6140
   11668:	movt	r0, #2
   1166c:	ldr	r0, [r0]
   11670:	cmp	r0, r5
   11674:	bne	11690 <__assert_fail@plt+0x5c0>
   11678:	movw	r0, #22284	; 0x570c
   1167c:	movt	r0, #1
   11680:	mov	r1, r7
   11684:	bl	11774 <__assert_fail@plt+0x6a4>
   11688:	mov	r6, r0
   1168c:	b	116bc <__assert_fail@plt+0x5ec>
   11690:	mov	r6, #1
   11694:	bge	116bc <__assert_fail@plt+0x5ec>
   11698:	sub	r5, r5, r0
   1169c:	add	r4, r4, r0, lsl #2
   116a0:	mov	r6, #1
   116a4:	ldr	r0, [r4], #4
   116a8:	mov	r1, r7
   116ac:	bl	11774 <__assert_fail@plt+0x6a4>
   116b0:	and	r6, r6, r0
   116b4:	subs	r5, r5, #1
   116b8:	bne	116a4 <__assert_fail@plt+0x5d4>
   116bc:	movw	r0, #24928	; 0x6160
   116c0:	movt	r0, #2
   116c4:	ldrb	r0, [r0]
   116c8:	cmp	r0, #1
   116cc:	bne	116e8 <__assert_fail@plt+0x618>
   116d0:	movw	r0, #24912	; 0x6150
   116d4:	movt	r0, #2
   116d8:	ldr	r0, [r0]
   116dc:	bl	11c88 <__assert_fail@plt+0xbb8>
   116e0:	cmn	r0, #1
   116e4:	beq	1175c <__assert_fail@plt+0x68c>
   116e8:	eor	r0, r6, #1
   116ec:	sub	sp, fp, #28
   116f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f4:	cmn	r0, #3
   116f8:	beq	1170c <__assert_fail@plt+0x63c>
   116fc:	cmn	r0, #2
   11700:	bne	11754 <__assert_fail@plt+0x684>
   11704:	mov	r0, #0
   11708:	bl	111cc <__assert_fail@plt+0xfc>
   1170c:	movw	r0, #24816	; 0x60f0
   11710:	movt	r0, #2
   11714:	ldr	r3, [r0]
   11718:	movw	r0, #24916	; 0x6154
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	mov	r1, #0
   11728:	movw	r2, #21499	; 0x53fb
   1172c:	movt	r2, #1
   11730:	str	r2, [sp]
   11734:	str	r1, [sp, #4]
   11738:	movw	r1, #21430	; 0x53b6
   1173c:	movt	r1, #1
   11740:	movw	r2, #21485	; 0x53ed
   11744:	movt	r2, #1
   11748:	bl	13e3c <__assert_fail@plt+0x2d6c>
   1174c:	mov	r0, #0
   11750:	bl	10fd4 <exit@plt>
   11754:	mov	r0, #1
   11758:	bl	111cc <__assert_fail@plt+0xfc>
   1175c:	bl	10ff8 <__errno_location@plt>
   11760:	ldr	r1, [r0]
   11764:	movw	r2, #22284	; 0x570c
   11768:	movt	r2, #1
   1176c:	mov	r0, #1
   11770:	bl	10f80 <error@plt>
   11774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11778:	add	fp, sp, #28
   1177c:	sub	sp, sp, #20
   11780:	str	r1, [sp, #16]
   11784:	mov	r6, r0
   11788:	movw	r1, #22284	; 0x570c
   1178c:	movt	r1, #1
   11790:	bl	10e84 <strcmp@plt>
   11794:	cmp	r0, #0
   11798:	beq	11a68 <__assert_fail@plt+0x998>
   1179c:	movw	r1, #22209	; 0x56c1
   117a0:	movt	r1, #1
   117a4:	mov	r0, r6
   117a8:	bl	11094 <fopen64@plt>
   117ac:	mov	r4, r0
   117b0:	cmp	r4, #0
   117b4:	beq	11a8c <__assert_fail@plt+0x9bc>
   117b8:	mov	r0, r4
   117bc:	mov	r1, #2
   117c0:	bl	11c4c <__assert_fail@plt+0xb7c>
   117c4:	mov	r0, r4
   117c8:	bl	10efc <getc_unlocked@plt>
   117cc:	cmn	r0, #1
   117d0:	str	r6, [sp]
   117d4:	str	r4, [sp, #4]
   117d8:	mov	r7, #0
   117dc:	beq	119dc <__assert_fail@plt+0x90c>
   117e0:	mov	r8, #0
   117e4:	str	r0, [sp, #8]
   117e8:	movw	r0, #24936	; 0x6168
   117ec:	movt	r0, #2
   117f0:	ldr	r0, [r0]
   117f4:	add	r5, r7, #1
   117f8:	cmp	r5, r0
   117fc:	bcc	11820 <__assert_fail@plt+0x750>
   11800:	movw	r0, #24932	; 0x6164
   11804:	movt	r0, #2
   11808:	mov	r4, r0
   1180c:	ldr	r0, [r0]
   11810:	movw	r1, #24936	; 0x6168
   11814:	movt	r1, #2
   11818:	bl	1400c <__assert_fail@plt+0x2f3c>
   1181c:	str	r0, [r4]
   11820:	ldr	r0, [sp, #8]
   11824:	cmp	r0, #10
   11828:	bne	11864 <__assert_fail@plt+0x794>
   1182c:	mov	r1, r0
   11830:	movw	r0, #24932	; 0x6164
   11834:	movt	r0, #2
   11838:	ldr	r0, [r0]
   1183c:	strb	r1, [r0, r7]
   11840:	movw	r1, #24916	; 0x6154
   11844:	movt	r1, #2
   11848:	ldr	r3, [r1]
   1184c:	mov	r1, #1
   11850:	mov	r2, r5
   11854:	bl	10ee4 <fwrite_unlocked@plt>
   11858:	mov	r8, #0
   1185c:	mov	r7, #0
   11860:	b	119cc <__assert_fail@plt+0x8fc>
   11864:	uxtb	r1, r0
   11868:	mov	r0, r8
   1186c:	str	r1, [sp, #12]
   11870:	b	11878 <__assert_fail@plt+0x7a8>
   11874:	ldr	r1, [sp, #12]
   11878:	bl	11ae8 <__assert_fail@plt+0xa18>
   1187c:	mov	r8, r0
   11880:	ldr	r0, [sp, #16]
   11884:	cmp	r8, r0
   11888:	bls	119a4 <__assert_fail@plt+0x8d4>
   1188c:	movw	r0, #24930	; 0x6162
   11890:	movt	r0, #2
   11894:	ldrb	r0, [r0]
   11898:	cmp	r0, #1
   1189c:	bne	11964 <__assert_fail@plt+0x894>
   118a0:	movw	r0, #24932	; 0x6164
   118a4:	movt	r0, #2
   118a8:	ldr	r0, [r0]
   118ac:	add	r0, r0, r7
   118b0:	sub	r5, r0, #1
   118b4:	mov	sl, #0
   118b8:	adds	r0, r7, sl
   118bc:	beq	11964 <__assert_fail@plt+0x894>
   118c0:	mov	r9, sl
   118c4:	bl	10fc8 <__ctype_b_loc@plt>
   118c8:	ldrb	r6, [r5, sl]
   118cc:	ldr	r4, [r0]
   118d0:	mov	r0, r6
   118d4:	bl	11b3c <__assert_fail@plt+0xa6c>
   118d8:	ldrb	r0, [r4, r6, lsl #1]
   118dc:	sub	sl, sl, #1
   118e0:	tst	r0, #1
   118e4:	beq	118b8 <__assert_fail@plt+0x7e8>
   118e8:	add	r0, r7, sl
   118ec:	add	r2, r0, #1
   118f0:	movw	r0, #24916	; 0x6154
   118f4:	movt	r0, #2
   118f8:	ldr	r3, [r0]
   118fc:	movw	r0, #24932	; 0x6164
   11900:	movt	r0, #2
   11904:	mov	r4, r0
   11908:	ldr	r0, [r0]
   1190c:	mov	r1, #1
   11910:	bl	10ee4 <fwrite_unlocked@plt>
   11914:	mov	r0, #10
   11918:	bl	110c4 <putchar_unlocked@plt>
   1191c:	ldr	r6, [r4]
   11920:	add	r0, r6, r7
   11924:	add	r0, r0, sl
   11928:	add	r1, r0, #1
   1192c:	mvn	r7, sl
   11930:	mov	r0, r6
   11934:	mov	r2, r7
   11938:	bl	10ea8 <memmove@plt>
   1193c:	cmn	sl, #1
   11940:	beq	11998 <__assert_fail@plt+0x8c8>
   11944:	mov	r5, #0
   11948:	mov	r0, #0
   1194c:	ldrb	r1, [r6, -r5]
   11950:	bl	11ae8 <__assert_fail@plt+0xa18>
   11954:	sub	r5, r5, #1
   11958:	cmp	r9, r5
   1195c:	bne	1194c <__assert_fail@plt+0x87c>
   11960:	b	11874 <__assert_fail@plt+0x7a4>
   11964:	movw	r0, #24932	; 0x6164
   11968:	movt	r0, #2
   1196c:	ldr	r0, [r0]
   11970:	cmp	r7, #0
   11974:	beq	119c0 <__assert_fail@plt+0x8f0>
   11978:	mov	r1, #10
   1197c:	strb	r1, [r0, r7]
   11980:	movw	r1, #24916	; 0x6154
   11984:	movt	r1, #2
   11988:	ldr	r3, [r1]
   1198c:	add	r2, r7, #1
   11990:	mov	r1, #1
   11994:	bl	10ee4 <fwrite_unlocked@plt>
   11998:	mov	r0, #0
   1199c:	mov	r7, #0
   119a0:	b	11874 <__assert_fail@plt+0x7a4>
   119a4:	movw	r0, #24932	; 0x6164
   119a8:	movt	r0, #2
   119ac:	ldr	r0, [r0]
   119b0:	ldr	r1, [sp, #8]
   119b4:	strb	r1, [r0, r7]
   119b8:	add	r7, r7, #1
   119bc:	b	119cc <__assert_fail@plt+0x8fc>
   119c0:	ldr	r1, [sp, #8]
   119c4:	strb	r1, [r0, r7]
   119c8:	mov	r7, #1
   119cc:	ldr	r0, [sp, #4]
   119d0:	bl	10efc <getc_unlocked@plt>
   119d4:	cmn	r0, #1
   119d8:	bne	117e4 <__assert_fail@plt+0x714>
   119dc:	bl	10ff8 <__errno_location@plt>
   119e0:	mov	r8, r0
   119e4:	ldr	r4, [r0]
   119e8:	ldr	r5, [sp, #4]
   119ec:	mov	r0, r5
   119f0:	bl	10f68 <ferror_unlocked@plt>
   119f4:	cmp	r0, #0
   119f8:	moveq	r4, r0
   119fc:	cmp	r7, #0
   11a00:	beq	11a28 <__assert_fail@plt+0x958>
   11a04:	movw	r0, #24916	; 0x6154
   11a08:	movt	r0, #2
   11a0c:	ldr	r3, [r0]
   11a10:	movw	r0, #24932	; 0x6164
   11a14:	movt	r0, #2
   11a18:	ldr	r0, [r0]
   11a1c:	mov	r1, #1
   11a20:	mov	r2, r7
   11a24:	bl	10ee4 <fwrite_unlocked@plt>
   11a28:	movw	r1, #22284	; 0x570c
   11a2c:	movt	r1, #1
   11a30:	ldr	r6, [sp]
   11a34:	mov	r0, r6
   11a38:	bl	10e84 <strcmp@plt>
   11a3c:	cmp	r0, #0
   11a40:	beq	11a98 <__assert_fail@plt+0x9c8>
   11a44:	mov	r0, r5
   11a48:	bl	11c88 <__assert_fail@plt+0xbb8>
   11a4c:	cmp	r4, #0
   11a50:	bne	11a5c <__assert_fail@plt+0x98c>
   11a54:	cmp	r0, #0
   11a58:	ldrne	r4, [r8]
   11a5c:	cmp	r4, #0
   11a60:	bne	11aa8 <__assert_fail@plt+0x9d8>
   11a64:	b	11ad8 <__assert_fail@plt+0xa08>
   11a68:	movw	r0, #24928	; 0x6160
   11a6c:	movt	r0, #2
   11a70:	mov	r1, #1
   11a74:	strb	r1, [r0]
   11a78:	movw	r0, #24912	; 0x6150
   11a7c:	movt	r0, #2
   11a80:	ldr	r4, [r0]
   11a84:	cmp	r4, #0
   11a88:	bne	117b8 <__assert_fail@plt+0x6e8>
   11a8c:	bl	10ff8 <__errno_location@plt>
   11a90:	ldr	r4, [r0]
   11a94:	b	11aa8 <__assert_fail@plt+0x9d8>
   11a98:	mov	r0, r5
   11a9c:	bl	11088 <clearerr_unlocked@plt>
   11aa0:	cmp	r4, #0
   11aa4:	beq	11ad8 <__assert_fail@plt+0xa08>
   11aa8:	mov	r5, #0
   11aac:	mov	r0, #0
   11ab0:	mov	r1, #3
   11ab4:	mov	r2, r6
   11ab8:	bl	1352c <__assert_fail@plt+0x245c>
   11abc:	mov	r3, r0
   11ac0:	movw	r2, #22215	; 0x56c7
   11ac4:	movt	r2, #1
   11ac8:	mov	r0, #0
   11acc:	mov	r1, r4
   11ad0:	bl	10f80 <error@plt>
   11ad4:	b	11adc <__assert_fail@plt+0xa0c>
   11ad8:	mov	r5, #1
   11adc:	mov	r0, r5
   11ae0:	sub	sp, fp, #28
   11ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ae8:	movw	r2, #24929	; 0x6161
   11aec:	movt	r2, #2
   11af0:	ldrb	r2, [r2]
   11af4:	cmp	r2, #0
   11af8:	bne	11b24 <__assert_fail@plt+0xa54>
   11afc:	cmp	r1, #13
   11b00:	moveq	r0, #0
   11b04:	bxeq	lr
   11b08:	cmp	r1, #9
   11b0c:	beq	11b2c <__assert_fail@plt+0xa5c>
   11b10:	cmp	r1, #8
   11b14:	bne	11b24 <__assert_fail@plt+0xa54>
   11b18:	cmp	r0, #0
   11b1c:	subne	r0, r0, #1
   11b20:	bx	lr
   11b24:	add	r0, r0, #1
   11b28:	bx	lr
   11b2c:	and	r1, r0, #7
   11b30:	add	r0, r0, #8
   11b34:	sub	r0, r0, r1
   11b38:	bx	lr
   11b3c:	bx	lr
   11b40:	movw	r1, #24940	; 0x616c
   11b44:	movt	r1, #2
   11b48:	str	r0, [r1]
   11b4c:	bx	lr
   11b50:	movw	r1, #24944	; 0x6170
   11b54:	movt	r1, #2
   11b58:	strb	r0, [r1]
   11b5c:	bx	lr
   11b60:	push	{r4, r5, r6, sl, fp, lr}
   11b64:	add	fp, sp, #16
   11b68:	sub	sp, sp, #8
   11b6c:	movw	r0, #24916	; 0x6154
   11b70:	movt	r0, #2
   11b74:	ldr	r0, [r0]
   11b78:	bl	14d60 <__assert_fail@plt+0x3c90>
   11b7c:	cmp	r0, #0
   11b80:	beq	11ba8 <__assert_fail@plt+0xad8>
   11b84:	movw	r0, #24944	; 0x6170
   11b88:	movt	r0, #2
   11b8c:	ldrb	r0, [r0]
   11b90:	cmp	r0, #0
   11b94:	beq	11bc8 <__assert_fail@plt+0xaf8>
   11b98:	bl	10ff8 <__errno_location@plt>
   11b9c:	ldr	r0, [r0]
   11ba0:	cmp	r0, #32
   11ba4:	bne	11bc8 <__assert_fail@plt+0xaf8>
   11ba8:	movw	r0, #24904	; 0x6148
   11bac:	movt	r0, #2
   11bb0:	ldr	r0, [r0]
   11bb4:	bl	14d60 <__assert_fail@plt+0x3c90>
   11bb8:	cmp	r0, #0
   11bbc:	subeq	sp, fp, #16
   11bc0:	popeq	{r4, r5, r6, sl, fp, pc}
   11bc4:	b	11c38 <__assert_fail@plt+0xb68>
   11bc8:	movw	r1, #22199	; 0x56b7
   11bcc:	movt	r1, #1
   11bd0:	mov	r0, #0
   11bd4:	mov	r2, #5
   11bd8:	bl	10f08 <dcgettext@plt>
   11bdc:	mov	r4, r0
   11be0:	movw	r0, #24940	; 0x616c
   11be4:	movt	r0, #2
   11be8:	ldr	r6, [r0]
   11bec:	bl	10ff8 <__errno_location@plt>
   11bf0:	ldr	r5, [r0]
   11bf4:	cmp	r6, #0
   11bf8:	bne	11c14 <__assert_fail@plt+0xb44>
   11bfc:	movw	r2, #22215	; 0x56c7
   11c00:	movt	r2, #1
   11c04:	mov	r0, #0
   11c08:	mov	r1, r5
   11c0c:	mov	r3, r4
   11c10:	b	11c34 <__assert_fail@plt+0xb64>
   11c14:	mov	r0, r6
   11c18:	bl	1351c <__assert_fail@plt+0x244c>
   11c1c:	mov	r3, r0
   11c20:	str	r4, [sp]
   11c24:	movw	r2, #22211	; 0x56c3
   11c28:	movt	r2, #1
   11c2c:	mov	r0, #0
   11c30:	mov	r1, r5
   11c34:	bl	10f80 <error@plt>
   11c38:	movw	r0, #24820	; 0x60f4
   11c3c:	movt	r0, #2
   11c40:	ldr	r0, [r0]
   11c44:	bl	10ec0 <_exit@plt>
   11c48:	b	10e90 <posix_fadvise64@plt>
   11c4c:	cmp	r0, #0
   11c50:	bxeq	lr
   11c54:	push	{r4, sl, fp, lr}
   11c58:	add	fp, sp, #8
   11c5c:	sub	sp, sp, #16
   11c60:	mov	r4, r1
   11c64:	bl	11028 <fileno@plt>
   11c68:	mov	r1, #0
   11c6c:	str	r1, [sp]
   11c70:	stmib	sp, {r1, r4}
   11c74:	mov	r2, #0
   11c78:	mov	r3, #0
   11c7c:	bl	11c48 <__assert_fail@plt+0xb78>
   11c80:	sub	sp, fp, #8
   11c84:	pop	{r4, sl, fp, pc}
   11c88:	push	{r4, r5, fp, lr}
   11c8c:	add	fp, sp, #8
   11c90:	sub	sp, sp, #8
   11c94:	mov	r4, r0
   11c98:	bl	11028 <fileno@plt>
   11c9c:	cmn	r0, #1
   11ca0:	ble	11d18 <__assert_fail@plt+0xc48>
   11ca4:	mov	r0, r4
   11ca8:	bl	10fa4 <__freading@plt>
   11cac:	cmp	r0, #0
   11cb0:	beq	11cdc <__assert_fail@plt+0xc0c>
   11cb4:	mov	r0, r4
   11cb8:	bl	11028 <fileno@plt>
   11cbc:	mov	r1, #1
   11cc0:	str	r1, [sp]
   11cc4:	mov	r2, #0
   11cc8:	mov	r3, #0
   11ccc:	bl	10f44 <lseek64@plt>
   11cd0:	and	r0, r0, r1
   11cd4:	cmn	r0, #1
   11cd8:	beq	11d18 <__assert_fail@plt+0xc48>
   11cdc:	mov	r0, r4
   11ce0:	bl	11d28 <__assert_fail@plt+0xc58>
   11ce4:	cmp	r0, #0
   11ce8:	beq	11d18 <__assert_fail@plt+0xc48>
   11cec:	bl	10ff8 <__errno_location@plt>
   11cf0:	ldr	r5, [r0]
   11cf4:	mov	r0, r4
   11cf8:	bl	1104c <fclose@plt>
   11cfc:	cmp	r5, #0
   11d00:	beq	11d10 <__assert_fail@plt+0xc40>
   11d04:	bl	10ff8 <__errno_location@plt>
   11d08:	str	r5, [r0]
   11d0c:	mvn	r0, #0
   11d10:	sub	sp, fp, #8
   11d14:	pop	{r4, r5, fp, pc}
   11d18:	mov	r0, r4
   11d1c:	sub	sp, fp, #8
   11d20:	pop	{r4, r5, fp, lr}
   11d24:	b	1104c <fclose@plt>
   11d28:	push	{r4, sl, fp, lr}
   11d2c:	add	fp, sp, #8
   11d30:	mov	r4, r0
   11d34:	cmp	r0, #0
   11d38:	beq	11d50 <__assert_fail@plt+0xc80>
   11d3c:	mov	r0, r4
   11d40:	bl	10fa4 <__freading@plt>
   11d44:	cmp	r0, #0
   11d48:	movne	r0, r4
   11d4c:	blne	11d5c <__assert_fail@plt+0xc8c>
   11d50:	mov	r0, r4
   11d54:	pop	{r4, sl, fp, lr}
   11d58:	b	10e9c <fflush@plt>
   11d5c:	ldrb	r1, [r0, #1]
   11d60:	tst	r1, #1
   11d64:	bxeq	lr
   11d68:	push	{fp, lr}
   11d6c:	mov	fp, sp
   11d70:	sub	sp, sp, #8
   11d74:	mov	r1, #1
   11d78:	str	r1, [sp]
   11d7c:	mov	r2, #0
   11d80:	mov	r3, #0
   11d84:	bl	11d90 <__assert_fail@plt+0xcc0>
   11d88:	mov	sp, fp
   11d8c:	pop	{fp, pc}
   11d90:	push	{r4, r5, r6, r7, fp, lr}
   11d94:	add	fp, sp, #16
   11d98:	sub	sp, sp, #8
   11d9c:	mov	r5, r3
   11da0:	mov	r6, r2
   11da4:	mov	r4, r0
   11da8:	ldr	r0, [r0, #4]
   11dac:	ldr	r1, [r4, #8]
   11db0:	cmp	r1, r0
   11db4:	bne	11dd0 <__assert_fail@plt+0xd00>
   11db8:	ldrd	r0, [r4, #16]
   11dbc:	cmp	r1, r0
   11dc0:	bne	11dd0 <__assert_fail@plt+0xd00>
   11dc4:	ldr	r0, [r4, #36]	; 0x24
   11dc8:	cmp	r0, #0
   11dcc:	beq	11de8 <__assert_fail@plt+0xd18>
   11dd0:	mov	r0, r4
   11dd4:	mov	r2, r6
   11dd8:	mov	r3, r5
   11ddc:	sub	sp, fp, #16
   11de0:	pop	{r4, r5, r6, r7, fp, lr}
   11de4:	b	11058 <fseeko64@plt>
   11de8:	ldr	r7, [fp, #8]
   11dec:	mov	r0, r4
   11df0:	bl	11028 <fileno@plt>
   11df4:	str	r7, [sp]
   11df8:	mov	r2, r6
   11dfc:	mov	r3, r5
   11e00:	bl	10f44 <lseek64@plt>
   11e04:	and	r2, r0, r1
   11e08:	cmn	r2, #1
   11e0c:	mvneq	r0, #0
   11e10:	subeq	sp, fp, #16
   11e14:	popeq	{r4, r5, r6, r7, fp, pc}
   11e18:	strd	r0, [r4, #80]	; 0x50
   11e1c:	ldr	r0, [r4]
   11e20:	bic	r0, r0, #16
   11e24:	str	r0, [r4]
   11e28:	mov	r0, #0
   11e2c:	sub	sp, fp, #16
   11e30:	pop	{r4, r5, r6, r7, fp, pc}
   11e34:	push	{r4, r5, fp, lr}
   11e38:	add	fp, sp, #8
   11e3c:	cmp	r0, #0
   11e40:	beq	11ed4 <__assert_fail@plt+0xe04>
   11e44:	mov	r4, r0
   11e48:	mov	r1, #47	; 0x2f
   11e4c:	bl	11070 <strrchr@plt>
   11e50:	cmp	r0, #0
   11e54:	mov	r5, r4
   11e58:	addne	r5, r0, #1
   11e5c:	sub	r0, r5, r4
   11e60:	cmp	r0, #7
   11e64:	blt	11eb8 <__assert_fail@plt+0xde8>
   11e68:	sub	r0, r5, #7
   11e6c:	movw	r1, #22274	; 0x5702
   11e70:	movt	r1, #1
   11e74:	mov	r2, #7
   11e78:	bl	110ac <strncmp@plt>
   11e7c:	cmp	r0, #0
   11e80:	bne	11eb8 <__assert_fail@plt+0xde8>
   11e84:	movw	r1, #22282	; 0x570a
   11e88:	movt	r1, #1
   11e8c:	mov	r0, r5
   11e90:	mov	r2, #3
   11e94:	bl	110ac <strncmp@plt>
   11e98:	cmp	r0, #0
   11e9c:	beq	11ea8 <__assert_fail@plt+0xdd8>
   11ea0:	mov	r4, r5
   11ea4:	b	11eb8 <__assert_fail@plt+0xde8>
   11ea8:	add	r4, r5, #3
   11eac:	movw	r0, #24888	; 0x6138
   11eb0:	movt	r0, #2
   11eb4:	str	r4, [r0]
   11eb8:	movw	r0, #24892	; 0x613c
   11ebc:	movt	r0, #2
   11ec0:	str	r4, [r0]
   11ec4:	movw	r0, #24948	; 0x6174
   11ec8:	movt	r0, #2
   11ecc:	str	r4, [r0]
   11ed0:	pop	{r4, r5, fp, pc}
   11ed4:	movw	r0, #24904	; 0x6148
   11ed8:	movt	r0, #2
   11edc:	ldr	r3, [r0]
   11ee0:	movw	r0, #22218	; 0x56ca
   11ee4:	movt	r0, #1
   11ee8:	mov	r1, #55	; 0x37
   11eec:	mov	r2, #1
   11ef0:	bl	10f38 <fwrite@plt>
   11ef4:	bl	110b8 <abort@plt>
   11ef8:	push	{r4, r5, r6, sl, fp, lr}
   11efc:	add	fp, sp, #16
   11f00:	mov	r4, r0
   11f04:	movw	r0, #24952	; 0x6178
   11f08:	movt	r0, #2
   11f0c:	cmp	r4, #0
   11f10:	moveq	r4, r0
   11f14:	bl	10ff8 <__errno_location@plt>
   11f18:	mov	r5, r0
   11f1c:	ldr	r6, [r0]
   11f20:	mov	r0, r4
   11f24:	mov	r1, #48	; 0x30
   11f28:	bl	14238 <__assert_fail@plt+0x3168>
   11f2c:	str	r6, [r5]
   11f30:	pop	{r4, r5, r6, sl, fp, pc}
   11f34:	movw	r1, #24952	; 0x6178
   11f38:	movt	r1, #2
   11f3c:	cmp	r0, #0
   11f40:	movne	r1, r0
   11f44:	ldr	r0, [r1]
   11f48:	bx	lr
   11f4c:	movw	r2, #24952	; 0x6178
   11f50:	movt	r2, #2
   11f54:	cmp	r0, #0
   11f58:	movne	r2, r0
   11f5c:	str	r1, [r2]
   11f60:	bx	lr
   11f64:	movw	r3, #24952	; 0x6178
   11f68:	movt	r3, #2
   11f6c:	cmp	r0, #0
   11f70:	movne	r3, r0
   11f74:	ubfx	r0, r1, #5, #3
   11f78:	add	r0, r3, r0, lsl #2
   11f7c:	ldr	r3, [r0, #8]
   11f80:	and	r1, r1, #31
   11f84:	eor	r2, r2, r3, lsr r1
   11f88:	and	r2, r2, #1
   11f8c:	eor	r2, r3, r2, lsl r1
   11f90:	str	r2, [r0, #8]
   11f94:	mov	r0, #1
   11f98:	and	r0, r0, r3, lsr r1
   11f9c:	bx	lr
   11fa0:	movw	r2, #24952	; 0x6178
   11fa4:	movt	r2, #2
   11fa8:	cmp	r0, #0
   11fac:	movne	r2, r0
   11fb0:	ldr	r0, [r2, #4]
   11fb4:	str	r1, [r2, #4]
   11fb8:	bx	lr
   11fbc:	movw	r3, #24952	; 0x6178
   11fc0:	movt	r3, #2
   11fc4:	cmp	r0, #0
   11fc8:	movne	r3, r0
   11fcc:	mov	r0, #10
   11fd0:	str	r0, [r3]
   11fd4:	cmp	r1, #0
   11fd8:	cmpne	r2, #0
   11fdc:	bne	11fec <__assert_fail@plt+0xf1c>
   11fe0:	push	{fp, lr}
   11fe4:	mov	fp, sp
   11fe8:	bl	110b8 <abort@plt>
   11fec:	str	r1, [r3, #40]	; 0x28
   11ff0:	str	r2, [r3, #44]	; 0x2c
   11ff4:	bx	lr
   11ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ffc:	add	fp, sp, #28
   12000:	sub	sp, sp, #20
   12004:	mov	r8, r3
   12008:	mov	r9, r2
   1200c:	mov	sl, r1
   12010:	mov	r7, r0
   12014:	ldr	r0, [fp, #8]
   12018:	movw	r5, #24952	; 0x6178
   1201c:	movt	r5, #2
   12020:	cmp	r0, #0
   12024:	movne	r5, r0
   12028:	bl	10ff8 <__errno_location@plt>
   1202c:	mov	r4, r0
   12030:	ldm	r5, {r0, r1}
   12034:	ldr	r2, [r5, #40]	; 0x28
   12038:	ldr	r3, [r5, #44]	; 0x2c
   1203c:	ldr	r6, [r4]
   12040:	add	r5, r5, #8
   12044:	stm	sp, {r0, r1, r5}
   12048:	str	r2, [sp, #12]
   1204c:	str	r3, [sp, #16]
   12050:	mov	r0, r7
   12054:	mov	r1, sl
   12058:	mov	r2, r9
   1205c:	mov	r3, r8
   12060:	bl	12070 <__assert_fail@plt+0xfa0>
   12064:	str	r6, [r4]
   12068:	sub	sp, fp, #28
   1206c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12074:	add	fp, sp, #28
   12078:	sub	sp, sp, #156	; 0x9c
   1207c:	mov	r9, r3
   12080:	str	r2, [fp, #-84]	; 0xffffffac
   12084:	mov	r6, r1
   12088:	mov	r7, r0
   1208c:	ldr	r0, [fp, #12]
   12090:	and	r1, r0, #4
   12094:	str	r1, [sp, #32]
   12098:	and	r1, r0, #1
   1209c:	str	r1, [sp, #36]	; 0x24
   120a0:	ubfx	sl, r0, #1, #1
   120a4:	bl	10f50 <__ctype_get_mb_cur_max@plt>
   120a8:	str	r0, [sp, #40]	; 0x28
   120ac:	ldr	r0, [fp, #24]
   120b0:	str	r0, [sp, #76]	; 0x4c
   120b4:	ldr	r0, [fp, #20]
   120b8:	str	r0, [sp, #68]	; 0x44
   120bc:	ldr	r0, [fp, #8]
   120c0:	str	r0, [fp, #-60]	; 0xffffffc4
   120c4:	mov	r0, #0
   120c8:	str	r0, [sp, #72]	; 0x48
   120cc:	mov	r0, #0
   120d0:	str	r0, [sp, #92]	; 0x5c
   120d4:	mov	r0, #0
   120d8:	str	r0, [fp, #-72]	; 0xffffffb8
   120dc:	mov	r0, #0
   120e0:	mov	r1, #0
   120e4:	str	r1, [fp, #-56]	; 0xffffffc8
   120e8:	mov	r1, #0
   120ec:	str	r1, [sp, #56]	; 0x38
   120f0:	mov	r5, #1
   120f4:	str	r7, [sp, #80]	; 0x50
   120f8:	mov	r4, r6
   120fc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12100:	cmp	r6, #10
   12104:	bhi	1306c <__assert_fail@plt+0x1f9c>
   12108:	add	r1, pc, #20
   1210c:	mov	r8, #0
   12110:	mov	r2, #1
   12114:	mov	r3, #0
   12118:	ldr	ip, [fp, #-84]	; 0xffffffac
   1211c:	mov	lr, r9
   12120:	ldr	pc, [r1, r6, lsl #2]
   12124:	strdeq	r2, [r1], -ip
   12128:	andeq	r2, r1, ip, lsr #4
   1212c:	andeq	r2, r1, ip, ror #3
   12130:	andeq	r2, r1, r4, ror #3
   12134:	andeq	r2, r1, r0, lsr #4
   12138:	andeq	r2, r1, r0, lsl #5
   1213c:	andeq	r2, r1, ip, lsl #4
   12140:	ldrdeq	r2, [r1], -ip
   12144:	andeq	r2, r1, r0, asr r1
   12148:	andeq	r2, r1, r0, asr r1
   1214c:	andeq	r2, r1, r8, ror r1
   12150:	movw	r0, #22364	; 0x575c
   12154:	movt	r0, #1
   12158:	mov	r1, r6
   1215c:	bl	13678 <__assert_fail@plt+0x25a8>
   12160:	str	r0, [sp, #68]	; 0x44
   12164:	movw	r0, #22366	; 0x575e
   12168:	movt	r0, #1
   1216c:	mov	r1, r6
   12170:	bl	13678 <__assert_fail@plt+0x25a8>
   12174:	str	r0, [sp, #76]	; 0x4c
   12178:	mov	r8, #0
   1217c:	tst	sl, #1
   12180:	bne	121b8 <__assert_fail@plt+0x10e8>
   12184:	ldr	r0, [sp, #68]	; 0x44
   12188:	ldrb	r0, [r0]
   1218c:	cmp	r0, #0
   12190:	beq	121b8 <__assert_fail@plt+0x10e8>
   12194:	ldr	r1, [sp, #68]	; 0x44
   12198:	add	r1, r1, #1
   1219c:	mov	r8, #0
   121a0:	cmp	r8, r4
   121a4:	strbcc	r0, [r7, r8]
   121a8:	ldrb	r0, [r1, r8]
   121ac:	add	r8, r8, #1
   121b0:	cmp	r0, #0
   121b4:	bne	121a0 <__assert_fail@plt+0x10d0>
   121b8:	ldr	r6, [sp, #76]	; 0x4c
   121bc:	mov	r0, r6
   121c0:	bl	10fe0 <strlen@plt>
   121c4:	str	r0, [fp, #-72]	; 0xffffffb8
   121c8:	str	r6, [sp, #92]	; 0x5c
   121cc:	mov	r2, #1
   121d0:	mov	r3, sl
   121d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   121d8:	mov	lr, r9
   121dc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   121e0:	b	122dc <__assert_fail@plt+0x120c>
   121e4:	mov	r0, #1
   121e8:	b	1222c <__assert_fail@plt+0x115c>
   121ec:	tst	sl, #1
   121f0:	bne	1222c <__assert_fail@plt+0x115c>
   121f4:	mov	r2, r0
   121f8:	b	12254 <__assert_fail@plt+0x1184>
   121fc:	mov	r6, #0
   12200:	mov	r8, #0
   12204:	mov	r2, r0
   12208:	b	122d8 <__assert_fail@plt+0x1208>
   1220c:	mov	r0, #1
   12210:	str	r0, [fp, #-72]	; 0xffffffb8
   12214:	mov	r8, #0
   12218:	mov	r6, #5
   1221c:	b	12298 <__assert_fail@plt+0x11c8>
   12220:	mov	r2, #1
   12224:	tst	sl, #1
   12228:	beq	12254 <__assert_fail@plt+0x1184>
   1222c:	mov	r1, #1
   12230:	str	r1, [fp, #-72]	; 0xffffffb8
   12234:	mov	r8, #0
   12238:	mov	r6, #2
   1223c:	movw	r1, #22366	; 0x575e
   12240:	movt	r1, #1
   12244:	str	r1, [sp, #92]	; 0x5c
   12248:	mov	r2, r0
   1224c:	mov	r3, #1
   12250:	b	122dc <__assert_fail@plt+0x120c>
   12254:	mov	r8, #1
   12258:	mov	r6, #2
   1225c:	cmp	r4, #0
   12260:	movne	r0, #39	; 0x27
   12264:	strbne	r0, [r7]
   12268:	movw	r0, #22366	; 0x575e
   1226c:	movt	r0, #1
   12270:	str	r0, [sp, #92]	; 0x5c
   12274:	mov	r0, #1
   12278:	str	r0, [fp, #-72]	; 0xffffffb8
   1227c:	b	122d8 <__assert_fail@plt+0x1208>
   12280:	mov	r6, #5
   12284:	tst	sl, #1
   12288:	beq	122b0 <__assert_fail@plt+0x11e0>
   1228c:	mov	r0, #1
   12290:	str	r0, [fp, #-72]	; 0xffffffb8
   12294:	mov	r8, #0
   12298:	movw	r0, #22362	; 0x575a
   1229c:	movt	r0, #1
   122a0:	str	r0, [sp, #92]	; 0x5c
   122a4:	mov	r2, #1
   122a8:	mov	r3, #1
   122ac:	b	122dc <__assert_fail@plt+0x120c>
   122b0:	cmp	r4, #0
   122b4:	movne	r0, #34	; 0x22
   122b8:	strbne	r0, [r7]
   122bc:	mov	r8, #1
   122c0:	movw	r0, #22362	; 0x575a
   122c4:	movt	r0, #1
   122c8:	str	r0, [sp, #92]	; 0x5c
   122cc:	mov	r0, #1
   122d0:	str	r0, [fp, #-72]	; 0xffffffb8
   122d4:	mov	r2, #1
   122d8:	mov	r3, #0
   122dc:	ldr	r0, [fp, #16]
   122e0:	cmp	r0, #0
   122e4:	movwne	r0, #1
   122e8:	and	r0, r0, r3
   122ec:	str	r0, [fp, #-88]	; 0xffffffa8
   122f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   122f4:	cmp	r0, #0
   122f8:	movwne	r0, #1
   122fc:	and	r1, r0, r3
   12300:	and	r1, r2, r1
   12304:	str	r1, [sp, #48]	; 0x30
   12308:	str	r6, [fp, #-60]	; 0xffffffc4
   1230c:	subs	r6, r6, #2
   12310:	clz	r1, r6
   12314:	lsr	r1, r1, #5
   12318:	and	r1, r1, r3
   1231c:	str	r1, [sp, #60]	; 0x3c
   12320:	str	r6, [fp, #-80]	; 0xffffffb0
   12324:	mov	r1, r6
   12328:	movwne	r1, #1
   1232c:	str	r3, [fp, #-76]	; 0xffffffb4
   12330:	eor	r3, r3, #1
   12334:	str	r3, [sp, #88]	; 0x58
   12338:	orr	r3, r1, r3
   1233c:	str	r3, [sp, #64]	; 0x40
   12340:	and	r1, r1, r2
   12344:	str	r1, [fp, #-68]	; 0xffffffbc
   12348:	and	r0, r0, r1
   1234c:	str	r0, [fp, #-64]	; 0xffffffc0
   12350:	str	r2, [sp, #84]	; 0x54
   12354:	eor	r0, r2, #1
   12358:	str	r0, [sp, #52]	; 0x34
   1235c:	mov	r6, #0
   12360:	cmn	lr, #1
   12364:	beq	12374 <__assert_fail@plt+0x12a4>
   12368:	cmp	r6, lr
   1236c:	bne	12380 <__assert_fail@plt+0x12b0>
   12370:	b	12eec <__assert_fail@plt+0x1e1c>
   12374:	ldrb	r0, [ip, r6]
   12378:	cmp	r0, #0
   1237c:	beq	12eec <__assert_fail@plt+0x1e1c>
   12380:	str	r5, [fp, #-48]	; 0xffffffd0
   12384:	mov	sl, #0
   12388:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1238c:	cmp	r0, #0
   12390:	beq	123c4 <__assert_fail@plt+0x12f4>
   12394:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12398:	add	r5, r6, r0
   1239c:	cmp	r0, #2
   123a0:	bcc	123bc <__assert_fail@plt+0x12ec>
   123a4:	cmn	lr, #1
   123a8:	bne	123bc <__assert_fail@plt+0x12ec>
   123ac:	mov	r0, ip
   123b0:	bl	10fe0 <strlen@plt>
   123b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   123b8:	mov	lr, r0
   123bc:	cmp	r5, lr
   123c0:	bls	123d0 <__assert_fail@plt+0x1300>
   123c4:	mov	r0, #0
   123c8:	str	r0, [fp, #-52]	; 0xffffffcc
   123cc:	b	1241c <__assert_fail@plt+0x134c>
   123d0:	mov	r5, r4
   123d4:	mov	r4, lr
   123d8:	add	r0, ip, r6
   123dc:	ldr	r1, [sp, #92]	; 0x5c
   123e0:	ldr	r2, [fp, #-72]	; 0xffffffb8
   123e4:	bl	10ef0 <memcmp@plt>
   123e8:	cmp	r0, #0
   123ec:	mov	r1, r0
   123f0:	movwne	r1, #1
   123f4:	ldr	r2, [sp, #88]	; 0x58
   123f8:	orr	r1, r1, r2
   123fc:	tst	r1, #1
   12400:	beq	12fb0 <__assert_fail@plt+0x1ee0>
   12404:	clz	r0, r0
   12408:	lsr	r0, r0, #5
   1240c:	str	r0, [fp, #-52]	; 0xffffffcc
   12410:	ldr	ip, [fp, #-84]	; 0xffffffac
   12414:	mov	lr, r4
   12418:	mov	r4, r5
   1241c:	ldrb	r5, [ip, r6]
   12420:	cmp	r5, #126	; 0x7e
   12424:	bhi	127e0 <__assert_fail@plt+0x1710>
   12428:	mov	r9, #1
   1242c:	mov	r2, #110	; 0x6e
   12430:	mov	r0, #97	; 0x61
   12434:	add	r3, pc, #4
   12438:	mov	r1, #0
   1243c:	ldr	pc, [r3, r5, lsl #2]
   12440:	ldrdeq	r2, [r1], -r8
   12444:	andeq	r2, r1, r0, ror #15
   12448:	andeq	r2, r1, r0, ror #15
   1244c:	andeq	r2, r1, r0, ror #15
   12450:	andeq	r2, r1, r0, ror #15
   12454:	andeq	r2, r1, r0, ror #15
   12458:	andeq	r2, r1, r0, ror #15
   1245c:	andeq	r2, r1, r4, lsr #17
   12460:			; <UNDEFINED> instruction: 0x000126b8
   12464:			; <UNDEFINED> instruction: 0x000126b0
   12468:	andeq	r2, r1, r4, asr #13
   1246c:	andeq	r2, r1, r8, asr #14
   12470:	andeq	r2, r1, r8, lsr #13
   12474:	andeq	r2, r1, r0, asr #13
   12478:	andeq	r2, r1, r0, ror #15
   1247c:	andeq	r2, r1, r0, ror #15
   12480:	andeq	r2, r1, r0, ror #15
   12484:	andeq	r2, r1, r0, ror #15
   12488:	andeq	r2, r1, r0, ror #15
   1248c:	andeq	r2, r1, r0, ror #15
   12490:	andeq	r2, r1, r0, ror #15
   12494:	andeq	r2, r1, r0, ror #15
   12498:	andeq	r2, r1, r0, ror #15
   1249c:	andeq	r2, r1, r0, ror #15
   124a0:	andeq	r2, r1, r0, ror #15
   124a4:	andeq	r2, r1, r0, ror #15
   124a8:	andeq	r2, r1, r0, ror #15
   124ac:	andeq	r2, r1, r0, ror #15
   124b0:	andeq	r2, r1, r0, ror #15
   124b4:	andeq	r2, r1, r0, ror #15
   124b8:	andeq	r2, r1, r0, ror #15
   124bc:	andeq	r2, r1, r0, ror #15
   124c0:	andeq	r2, r1, r4, asr r8
   124c4:	andeq	r2, r1, r8, asr r8
   124c8:	andeq	r2, r1, r8, asr r8
   124cc:	andeq	r2, r1, r0, asr r6
   124d0:	andeq	r2, r1, r8, asr r8
   124d4:	andeq	r2, r1, ip, lsr r6
   124d8:	andeq	r2, r1, r8, asr r8
   124dc:	andeq	r2, r1, r0, asr r7
   124e0:	andeq	r2, r1, r8, asr r8
   124e4:	andeq	r2, r1, r8, asr r8
   124e8:	andeq	r2, r1, r8, asr r8
   124ec:	andeq	r2, r1, ip, lsr r6
   124f0:	andeq	r2, r1, ip, lsr r6
   124f4:	andeq	r2, r1, ip, lsr r6
   124f8:	andeq	r2, r1, ip, lsr r6
   124fc:	andeq	r2, r1, ip, lsr r6
   12500:	andeq	r2, r1, ip, lsr r6
   12504:	andeq	r2, r1, ip, lsr r6
   12508:	andeq	r2, r1, ip, lsr r6
   1250c:	andeq	r2, r1, ip, lsr r6
   12510:	andeq	r2, r1, ip, lsr r6
   12514:	andeq	r2, r1, ip, lsr r6
   12518:	andeq	r2, r1, ip, lsr r6
   1251c:	andeq	r2, r1, ip, lsr r6
   12520:	andeq	r2, r1, ip, lsr r6
   12524:	andeq	r2, r1, ip, lsr r6
   12528:	andeq	r2, r1, ip, lsr r6
   1252c:	andeq	r2, r1, r8, asr r8
   12530:	andeq	r2, r1, r8, asr r8
   12534:	andeq	r2, r1, r8, asr r8
   12538:	andeq	r2, r1, r8, asr r8
   1253c:	andeq	r2, r1, r8, lsl r7
   12540:	andeq	r2, r1, r0, ror #15
   12544:	andeq	r2, r1, ip, lsr r6
   12548:	andeq	r2, r1, ip, lsr r6
   1254c:	andeq	r2, r1, ip, lsr r6
   12550:	andeq	r2, r1, ip, lsr r6
   12554:	andeq	r2, r1, ip, lsr r6
   12558:	andeq	r2, r1, ip, lsr r6
   1255c:	andeq	r2, r1, ip, lsr r6
   12560:	andeq	r2, r1, ip, lsr r6
   12564:	andeq	r2, r1, ip, lsr r6
   12568:	andeq	r2, r1, ip, lsr r6
   1256c:	andeq	r2, r1, ip, lsr r6
   12570:	andeq	r2, r1, ip, lsr r6
   12574:	andeq	r2, r1, ip, lsr r6
   12578:	andeq	r2, r1, ip, lsr r6
   1257c:	andeq	r2, r1, ip, lsr r6
   12580:	andeq	r2, r1, ip, lsr r6
   12584:	andeq	r2, r1, ip, lsr r6
   12588:	andeq	r2, r1, ip, lsr r6
   1258c:	andeq	r2, r1, ip, lsr r6
   12590:	andeq	r2, r1, ip, lsr r6
   12594:	andeq	r2, r1, ip, lsr r6
   12598:	andeq	r2, r1, ip, lsr r6
   1259c:	andeq	r2, r1, ip, lsr r6
   125a0:	andeq	r2, r1, ip, lsr r6
   125a4:	andeq	r2, r1, ip, lsr r6
   125a8:	andeq	r2, r1, ip, lsr r6
   125ac:	andeq	r2, r1, r8, asr r8
   125b0:	andeq	r2, r1, r4, lsl #13
   125b4:	andeq	r2, r1, ip, lsr r6
   125b8:	andeq	r2, r1, r8, asr r8
   125bc:	andeq	r2, r1, ip, lsr r6
   125c0:	andeq	r2, r1, r8, asr r8
   125c4:	andeq	r2, r1, ip, lsr r6
   125c8:	andeq	r2, r1, ip, lsr r6
   125cc:	andeq	r2, r1, ip, lsr r6
   125d0:	andeq	r2, r1, ip, lsr r6
   125d4:	andeq	r2, r1, ip, lsr r6
   125d8:	andeq	r2, r1, ip, lsr r6
   125dc:	andeq	r2, r1, ip, lsr r6
   125e0:	andeq	r2, r1, ip, lsr r6
   125e4:	andeq	r2, r1, ip, lsr r6
   125e8:	andeq	r2, r1, ip, lsr r6
   125ec:	andeq	r2, r1, ip, lsr r6
   125f0:	andeq	r2, r1, ip, lsr r6
   125f4:	andeq	r2, r1, ip, lsr r6
   125f8:	andeq	r2, r1, ip, lsr r6
   125fc:	andeq	r2, r1, ip, lsr r6
   12600:	andeq	r2, r1, ip, lsr r6
   12604:	andeq	r2, r1, ip, lsr r6
   12608:	andeq	r2, r1, ip, lsr r6
   1260c:	andeq	r2, r1, ip, lsr r6
   12610:	andeq	r2, r1, ip, lsr r6
   12614:	andeq	r2, r1, ip, lsr r6
   12618:	andeq	r2, r1, ip, lsr r6
   1261c:	andeq	r2, r1, ip, lsr r6
   12620:	andeq	r2, r1, ip, lsr r6
   12624:	andeq	r2, r1, ip, lsr r6
   12628:	andeq	r2, r1, ip, lsr r6
   1262c:	andeq	r2, r1, r4, ror #12
   12630:	andeq	r2, r1, r8, asr r8
   12634:	andeq	r2, r1, r4, ror #12
   12638:	andeq	r2, r1, r0, asr r6
   1263c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12640:	cmp	r0, #0
   12644:	beq	128b8 <__assert_fail@plt+0x17e8>
   12648:	ldr	r0, [fp, #16]
   1264c:	b	128bc <__assert_fail@plt+0x17ec>
   12650:	mov	r9, #0
   12654:	cmp	r6, #0
   12658:	beq	12854 <__assert_fail@plt+0x1784>
   1265c:	mov	sl, #0
   12660:	b	1263c <__assert_fail@plt+0x156c>
   12664:	mov	r9, #0
   12668:	cmn	lr, #1
   1266c:	beq	12838 <__assert_fail@plt+0x1768>
   12670:	cmp	r6, #0
   12674:	bne	1265c <__assert_fail@plt+0x158c>
   12678:	cmp	lr, #1
   1267c:	beq	12854 <__assert_fail@plt+0x1784>
   12680:	b	1265c <__assert_fail@plt+0x158c>
   12684:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12688:	cmp	r0, #2
   1268c:	bne	12880 <__assert_fail@plt+0x17b0>
   12690:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12694:	tst	r0, #1
   12698:	bne	12fc8 <__assert_fail@plt+0x1ef8>
   1269c:	mov	sl, #0
   126a0:	mov	r0, #92	; 0x5c
   126a4:	b	12894 <__assert_fail@plt+0x17c4>
   126a8:	mov	r0, #102	; 0x66
   126ac:	b	128a4 <__assert_fail@plt+0x17d4>
   126b0:	mov	r2, #116	; 0x74
   126b4:	b	126c4 <__assert_fail@plt+0x15f4>
   126b8:	mov	r0, #98	; 0x62
   126bc:	b	128a4 <__assert_fail@plt+0x17d4>
   126c0:	mov	r2, #114	; 0x72
   126c4:	ldr	r0, [sp, #64]	; 0x40
   126c8:	tst	r0, #1
   126cc:	mov	r0, r2
   126d0:	bne	128a4 <__assert_fail@plt+0x17d4>
   126d4:	b	12fc8 <__assert_fail@plt+0x1ef8>
   126d8:	ldr	r0, [sp, #84]	; 0x54
   126dc:	tst	r0, #1
   126e0:	beq	12994 <__assert_fail@plt+0x18c4>
   126e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   126e8:	tst	r0, #1
   126ec:	bne	12fc8 <__assert_fail@plt+0x1ef8>
   126f0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   126f4:	cmp	r0, #2
   126f8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   126fc:	movwne	r0, #1
   12700:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12704:	orr	r0, r0, r2
   12708:	tst	r0, #1
   1270c:	beq	12d88 <__assert_fail@plt+0x1cb8>
   12710:	mov	r0, r8
   12714:	b	12dbc <__assert_fail@plt+0x1cec>
   12718:	mov	sl, #0
   1271c:	mov	r5, #63	; 0x3f
   12720:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12724:	cmp	r0, #5
   12728:	beq	12b48 <__assert_fail@plt+0x1a78>
   1272c:	cmp	r0, #2
   12730:	bne	12be8 <__assert_fail@plt+0x1b18>
   12734:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12738:	tst	r0, #1
   1273c:	mov	r9, #0
   12740:	beq	1263c <__assert_fail@plt+0x156c>
   12744:	b	12fc8 <__assert_fail@plt+0x1ef8>
   12748:	mov	r0, #118	; 0x76
   1274c:	b	128a4 <__assert_fail@plt+0x17d4>
   12750:	mov	r5, #39	; 0x27
   12754:	mov	r0, #1
   12758:	str	r0, [sp, #56]	; 0x38
   1275c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12760:	cmp	r0, #2
   12764:	bne	129b4 <__assert_fail@plt+0x18e4>
   12768:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1276c:	tst	r0, #1
   12770:	bne	12fc8 <__assert_fail@plt+0x1ef8>
   12774:	ldr	r2, [sp, #72]	; 0x48
   12778:	cmp	r2, #0
   1277c:	mov	r0, r2
   12780:	movwne	r0, #1
   12784:	clz	r1, r4
   12788:	lsr	r1, r1, #5
   1278c:	orrs	r0, r0, r1
   12790:	moveq	r2, r4
   12794:	str	r2, [sp, #72]	; 0x48
   12798:	moveq	r4, r0
   1279c:	cmp	r8, r4
   127a0:	movcc	r0, #39	; 0x27
   127a4:	strbcc	r0, [r7, r8]
   127a8:	add	r0, r8, #1
   127ac:	cmp	r0, r4
   127b0:	movcc	r1, #92	; 0x5c
   127b4:	strbcc	r1, [r7, r0]
   127b8:	add	r0, r8, #2
   127bc:	cmp	r0, r4
   127c0:	movcc	r1, #39	; 0x27
   127c4:	strbcc	r1, [r7, r0]
   127c8:	add	r8, r8, #3
   127cc:	mov	r0, #0
   127d0:	str	r0, [fp, #-56]	; 0xffffffc8
   127d4:	mov	sl, #0
   127d8:	mov	r9, #1
   127dc:	b	1263c <__assert_fail@plt+0x156c>
   127e0:	str	r4, [sp, #24]
   127e4:	ldr	r0, [sp, #40]	; 0x28
   127e8:	cmp	r0, #1
   127ec:	bne	129bc <__assert_fail@plt+0x18ec>
   127f0:	str	lr, [sp, #28]
   127f4:	bl	10fc8 <__ctype_b_loc@plt>
   127f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   127fc:	ldr	r0, [r0]
   12800:	add	r0, r0, r5, lsl #1
   12804:	ldrb	r0, [r0, #1]
   12808:	ubfx	r9, r0, #6, #1
   1280c:	mov	r1, #1
   12810:	ldr	r4, [sp, #24]
   12814:	ldr	r0, [sp, #52]	; 0x34
   12818:	orr	r0, r9, r0
   1281c:	mov	r2, r1
   12820:	cmp	r1, #1
   12824:	bhi	12bf0 <__assert_fail@plt+0x1b20>
   12828:	tst	r0, #1
   1282c:	beq	12bf0 <__assert_fail@plt+0x1b20>
   12830:	ldr	lr, [sp, #28]
   12834:	b	1263c <__assert_fail@plt+0x156c>
   12838:	cmp	r6, #0
   1283c:	ldrbeq	r0, [ip, #1]
   12840:	cmpeq	r0, #0
   12844:	beq	12854 <__assert_fail@plt+0x1784>
   12848:	mvn	lr, #0
   1284c:	mov	sl, #0
   12850:	b	1263c <__assert_fail@plt+0x156c>
   12854:	mov	r1, #1
   12858:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1285c:	cmp	r0, #2
   12860:	bne	12878 <__assert_fail@plt+0x17a8>
   12864:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12868:	tst	r0, #1
   1286c:	mov	r9, r1
   12870:	beq	1263c <__assert_fail@plt+0x156c>
   12874:	b	12fc8 <__assert_fail@plt+0x1ef8>
   12878:	mov	r9, r1
   1287c:	b	1263c <__assert_fail@plt+0x156c>
   12880:	mov	sl, #0
   12884:	mov	r0, #92	; 0x5c
   12888:	ldr	r1, [sp, #48]	; 0x30
   1288c:	cmp	r1, #0
   12890:	beq	128a4 <__assert_fail@plt+0x17d4>
   12894:	mov	r9, #0
   12898:	cmp	sl, #0
   1289c:	beq	12e54 <__assert_fail@plt+0x1d84>
   128a0:	b	12e90 <__assert_fail@plt+0x1dc0>
   128a4:	mov	r9, #0
   128a8:	ldr	r1, [sp, #84]	; 0x54
   128ac:	tst	r1, #1
   128b0:	mov	sl, #0
   128b4:	bne	128f4 <__assert_fail@plt+0x1824>
   128b8:	ldr	r0, [fp, #-88]	; 0xffffffa8
   128bc:	cmp	r0, #0
   128c0:	mov	r0, r5
   128c4:	beq	128e8 <__assert_fail@plt+0x1818>
   128c8:	ubfx	r0, r5, #5, #3
   128cc:	ldr	r1, [fp, #16]
   128d0:	ldr	r0, [r1, r0, lsl #2]
   128d4:	and	r1, r5, #31
   128d8:	mov	r2, #1
   128dc:	tst	r0, r2, lsl r1
   128e0:	mov	r0, r5
   128e4:	bne	128f4 <__assert_fail@plt+0x1824>
   128e8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   128ec:	cmp	r1, #0
   128f0:	beq	12e4c <__assert_fail@plt+0x1d7c>
   128f4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   128f8:	tst	r1, #1
   128fc:	bne	12fc8 <__assert_fail@plt+0x1ef8>
   12900:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12904:	cmp	r1, #2
   12908:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1290c:	movwne	r1, #1
   12910:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12914:	orr	r1, r1, r2
   12918:	tst	r1, #1
   1291c:	beq	12928 <__assert_fail@plt+0x1858>
   12920:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12924:	b	12964 <__assert_fail@plt+0x1894>
   12928:	cmp	r8, r4
   1292c:	movcc	r1, #39	; 0x27
   12930:	strbcc	r1, [r7, r8]
   12934:	add	r1, r8, #1
   12938:	cmp	r1, r4
   1293c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12940:	movcc	r2, #36	; 0x24
   12944:	strbcc	r2, [r7, r1]
   12948:	add	r1, r8, #2
   1294c:	cmp	r1, r4
   12950:	movcc	r2, #39	; 0x27
   12954:	strbcc	r2, [r7, r1]
   12958:	add	r8, r8, #3
   1295c:	mov	r1, #1
   12960:	str	r1, [fp, #-56]	; 0xffffffc8
   12964:	cmp	r8, r4
   12968:	movcc	r1, #92	; 0x5c
   1296c:	strbcc	r1, [r7, r8]
   12970:	add	r8, r8, #1
   12974:	cmp	r8, r4
   12978:	strbcc	r0, [r7, r8]
   1297c:	and	r5, r5, r9
   12980:	add	r8, r8, #1
   12984:	add	r6, r6, #1
   12988:	cmn	lr, #1
   1298c:	bne	12368 <__assert_fail@plt+0x1298>
   12990:	b	12374 <__assert_fail@plt+0x12a4>
   12994:	mov	r9, #0
   12998:	ldr	r0, [sp, #36]	; 0x24
   1299c:	cmp	r0, #0
   129a0:	mov	sl, #0
   129a4:	mov	r5, #0
   129a8:	beq	128b8 <__assert_fail@plt+0x17e8>
   129ac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   129b0:	b	12984 <__assert_fail@plt+0x18b4>
   129b4:	mov	r9, #1
   129b8:	b	1263c <__assert_fail@plt+0x156c>
   129bc:	mov	r0, #0
   129c0:	str	r0, [fp, #-36]	; 0xffffffdc
   129c4:	str	r0, [fp, #-40]	; 0xffffffd8
   129c8:	cmn	lr, #1
   129cc:	bne	129e0 <__assert_fail@plt+0x1910>
   129d0:	mov	r0, ip
   129d4:	bl	10fe0 <strlen@plt>
   129d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   129dc:	mov	lr, r0
   129e0:	add	r0, ip, r6
   129e4:	str	r0, [sp, #20]
   129e8:	mov	r9, #1
   129ec:	mov	r7, #0
   129f0:	sub	r4, fp, #40	; 0x28
   129f4:	str	lr, [sp, #28]
   129f8:	str	r7, [sp, #44]	; 0x2c
   129fc:	add	r7, r7, r6
   12a00:	add	r1, ip, r7
   12a04:	sub	r2, lr, r7
   12a08:	sub	r0, fp, #44	; 0x2c
   12a0c:	mov	r3, r4
   12a10:	bl	14e98 <__assert_fail@plt+0x3dc8>
   12a14:	cmp	r0, #0
   12a18:	beq	12ed8 <__assert_fail@plt+0x1e08>
   12a1c:	cmn	r0, #1
   12a20:	beq	12e98 <__assert_fail@plt+0x1dc8>
   12a24:	cmn	r0, #2
   12a28:	ldr	lr, [sp, #28]
   12a2c:	beq	12ea0 <__assert_fail@plt+0x1dd0>
   12a30:	cmp	r0, #2
   12a34:	mov	r1, #0
   12a38:	movwcc	r1, #1
   12a3c:	ldr	r2, [sp, #60]	; 0x3c
   12a40:	eor	r2, r2, #1
   12a44:	orrs	r1, r2, r1
   12a48:	ldr	r4, [sp, #24]
   12a4c:	bne	12b0c <__assert_fail@plt+0x1a3c>
   12a50:	ldr	r1, [sp, #44]	; 0x2c
   12a54:	ldr	r2, [sp, #20]
   12a58:	add	r1, r2, r1
   12a5c:	mov	r2, #1
   12a60:	ldrb	r3, [r1, r2]
   12a64:	sub	r3, r3, #91	; 0x5b
   12a68:	cmp	r3, #33	; 0x21
   12a6c:	bhi	12b00 <__assert_fail@plt+0x1a30>
   12a70:	add	r7, pc, #0
   12a74:	ldr	pc, [r7, r3, lsl #2]
   12a78:	andeq	r2, r1, r0, asr #31
   12a7c:	andeq	r2, r1, r0, asr #31
   12a80:	andeq	r2, r1, r0, lsl #22
   12a84:	andeq	r2, r1, r0, asr #31
   12a88:	andeq	r2, r1, r0, lsl #22
   12a8c:	andeq	r2, r1, r0, asr #31
   12a90:	andeq	r2, r1, r0, lsl #22
   12a94:	andeq	r2, r1, r0, lsl #22
   12a98:	andeq	r2, r1, r0, lsl #22
   12a9c:	andeq	r2, r1, r0, lsl #22
   12aa0:	andeq	r2, r1, r0, lsl #22
   12aa4:	andeq	r2, r1, r0, lsl #22
   12aa8:	andeq	r2, r1, r0, lsl #22
   12aac:	andeq	r2, r1, r0, lsl #22
   12ab0:	andeq	r2, r1, r0, lsl #22
   12ab4:	andeq	r2, r1, r0, lsl #22
   12ab8:	andeq	r2, r1, r0, lsl #22
   12abc:	andeq	r2, r1, r0, lsl #22
   12ac0:	andeq	r2, r1, r0, lsl #22
   12ac4:	andeq	r2, r1, r0, lsl #22
   12ac8:	andeq	r2, r1, r0, lsl #22
   12acc:	andeq	r2, r1, r0, lsl #22
   12ad0:	andeq	r2, r1, r0, lsl #22
   12ad4:	andeq	r2, r1, r0, lsl #22
   12ad8:	andeq	r2, r1, r0, lsl #22
   12adc:	andeq	r2, r1, r0, lsl #22
   12ae0:	andeq	r2, r1, r0, lsl #22
   12ae4:	andeq	r2, r1, r0, lsl #22
   12ae8:	andeq	r2, r1, r0, lsl #22
   12aec:	andeq	r2, r1, r0, lsl #22
   12af0:	andeq	r2, r1, r0, lsl #22
   12af4:	andeq	r2, r1, r0, lsl #22
   12af8:	andeq	r2, r1, r0, lsl #22
   12afc:	andeq	r2, r1, r0, asr #31
   12b00:	add	r2, r2, #1
   12b04:	cmp	r2, r0
   12b08:	bcc	12a60 <__assert_fail@plt+0x1990>
   12b0c:	ldr	r7, [sp, #44]	; 0x2c
   12b10:	add	r7, r0, r7
   12b14:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12b18:	bl	10f2c <iswprint@plt>
   12b1c:	cmp	r0, #0
   12b20:	movwne	r0, #1
   12b24:	and	r9, r9, r0
   12b28:	sub	r4, fp, #40	; 0x28
   12b2c:	mov	r0, r4
   12b30:	bl	10ed8 <mbsinit@plt>
   12b34:	ldr	lr, [sp, #28]
   12b38:	cmp	r0, #0
   12b3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12b40:	beq	129f8 <__assert_fail@plt+0x1928>
   12b44:	b	12ee0 <__assert_fail@plt+0x1e10>
   12b48:	ldr	r0, [sp, #32]
   12b4c:	cmp	r0, #0
   12b50:	beq	12be8 <__assert_fail@plt+0x1b18>
   12b54:	add	r0, r6, #2
   12b58:	cmp	r0, lr
   12b5c:	bcs	12be8 <__assert_fail@plt+0x1b18>
   12b60:	add	r1, ip, r6
   12b64:	ldrb	r1, [r1, #1]
   12b68:	cmp	r1, #63	; 0x3f
   12b6c:	bne	12be8 <__assert_fail@plt+0x1b18>
   12b70:	ldrb	r9, [ip, r0]
   12b74:	sub	r2, r9, #33	; 0x21
   12b78:	cmp	r2, #29
   12b7c:	bhi	12be8 <__assert_fail@plt+0x1b18>
   12b80:	mov	r3, #1
   12b84:	movw	r1, #20929	; 0x51c1
   12b88:	movt	r1, #14336	; 0x3800
   12b8c:	tst	r1, r3, lsl r2
   12b90:	beq	12be8 <__assert_fail@plt+0x1b18>
   12b94:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12b98:	tst	r1, #1
   12b9c:	bne	12fc8 <__assert_fail@plt+0x1ef8>
   12ba0:	cmp	r8, r4
   12ba4:	movcc	r1, #63	; 0x3f
   12ba8:	strbcc	r1, [r7, r8]
   12bac:	add	r2, r8, #1
   12bb0:	cmp	r2, r4
   12bb4:	movcc	r1, #34	; 0x22
   12bb8:	strbcc	r1, [r7, r2]
   12bbc:	add	r2, r8, #2
   12bc0:	cmp	r2, r4
   12bc4:	movcc	r1, #34	; 0x22
   12bc8:	strbcc	r1, [r7, r2]
   12bcc:	add	r2, r8, #3
   12bd0:	cmp	r2, r4
   12bd4:	movcc	r1, #63	; 0x3f
   12bd8:	strbcc	r1, [r7, r2]
   12bdc:	add	r8, r8, #4
   12be0:	mov	r6, r0
   12be4:	mov	r5, r9
   12be8:	mov	r9, #0
   12bec:	b	1263c <__assert_fail@plt+0x156c>
   12bf0:	add	r1, r2, r6
   12bf4:	str	r1, [sp, #44]	; 0x2c
   12bf8:	add	r1, r6, #1
   12bfc:	mov	r3, #0
   12c00:	ldr	lr, [sp, #28]
   12c04:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12c08:	tst	r0, #1
   12c0c:	bne	12d00 <__assert_fail@plt+0x1c30>
   12c10:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c14:	tst	r2, #1
   12c18:	bne	12fc8 <__assert_fail@plt+0x1ef8>
   12c1c:	cmp	r6, #2
   12c20:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12c24:	movwne	r3, #1
   12c28:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c2c:	orr	r3, r3, r2
   12c30:	tst	r3, #1
   12c34:	bne	12c70 <__assert_fail@plt+0x1ba0>
   12c38:	cmp	r8, r4
   12c3c:	movcc	r2, #39	; 0x27
   12c40:	strbcc	r2, [r7, r8]
   12c44:	add	r3, r8, #1
   12c48:	cmp	r3, r4
   12c4c:	movcc	r2, #36	; 0x24
   12c50:	strbcc	r2, [r7, r3]
   12c54:	add	r3, r8, #2
   12c58:	cmp	r3, r4
   12c5c:	movcc	r2, #39	; 0x27
   12c60:	strbcc	r2, [r7, r3]
   12c64:	add	r8, r8, #3
   12c68:	mov	r2, #1
   12c6c:	str	r2, [fp, #-56]	; 0xffffffc8
   12c70:	cmp	r8, r4
   12c74:	movcc	r2, #92	; 0x5c
   12c78:	strbcc	r2, [r7, r8]
   12c7c:	add	r3, r8, #1
   12c80:	cmp	r3, r4
   12c84:	bcs	12ca4 <__assert_fail@plt+0x1bd4>
   12c88:	and	r7, r5, #192	; 0xc0
   12c8c:	mov	r2, #48	; 0x30
   12c90:	orr	r7, r2, r7, lsr #6
   12c94:	ldr	r6, [sp, #80]	; 0x50
   12c98:	strb	r7, [r6, r3]
   12c9c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12ca0:	ldr	r7, [sp, #80]	; 0x50
   12ca4:	add	r3, r8, #2
   12ca8:	cmp	r3, r4
   12cac:	bcs	12ccc <__assert_fail@plt+0x1bfc>
   12cb0:	lsr	r7, r5, #3
   12cb4:	mov	r2, #6
   12cb8:	bfi	r7, r2, #3, #29
   12cbc:	ldr	r6, [sp, #80]	; 0x50
   12cc0:	strb	r7, [r6, r3]
   12cc4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12cc8:	ldr	r7, [sp, #80]	; 0x50
   12ccc:	mov	r2, #6
   12cd0:	bfi	r5, r2, #3, #29
   12cd4:	add	r8, r8, #3
   12cd8:	mov	r3, #1
   12cdc:	b	12d24 <__assert_fail@plt+0x1c54>
   12ce0:	ldr	r7, [sp, #80]	; 0x50
   12ce4:	cmp	r8, r4
   12ce8:	strbcc	r5, [r7, r8]
   12cec:	ldrb	r5, [ip, r1]
   12cf0:	add	r1, r1, #1
   12cf4:	add	r8, r8, #1
   12cf8:	tst	r0, #1
   12cfc:	beq	12c10 <__assert_fail@plt+0x1b40>
   12d00:	ldr	r2, [fp, #-52]	; 0xffffffcc
   12d04:	tst	r2, #1
   12d08:	beq	12d1c <__assert_fail@plt+0x1c4c>
   12d0c:	cmp	r8, r4
   12d10:	movcc	r2, #92	; 0x5c
   12d14:	strbcc	r2, [r7, r8]
   12d18:	add	r8, r8, #1
   12d1c:	mov	r2, #0
   12d20:	str	r2, [fp, #-52]	; 0xffffffcc
   12d24:	and	sl, r3, #1
   12d28:	ldr	r2, [sp, #44]	; 0x2c
   12d2c:	cmp	r2, r1
   12d30:	bls	12e3c <__assert_fail@plt+0x1d6c>
   12d34:	cmp	sl, #0
   12d38:	movwne	sl, #1
   12d3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12d40:	mvn	r7, r2
   12d44:	orr	r7, r7, sl
   12d48:	tst	r7, #1
   12d4c:	bne	12ce0 <__assert_fail@plt+0x1c10>
   12d50:	cmp	r8, r4
   12d54:	ldrcc	r7, [sp, #80]	; 0x50
   12d58:	movcc	r2, #39	; 0x27
   12d5c:	strbcc	r2, [r7, r8]
   12d60:	add	r7, r8, #1
   12d64:	cmp	r7, r4
   12d68:	ldrcc	r6, [sp, #80]	; 0x50
   12d6c:	movcc	r2, #39	; 0x27
   12d70:	strbcc	r2, [r6, r7]
   12d74:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   12d78:	add	r8, r8, #2
   12d7c:	mov	r2, #0
   12d80:	str	r2, [fp, #-56]	; 0xffffffc8
   12d84:	b	12ce0 <__assert_fail@plt+0x1c10>
   12d88:	cmp	r8, r4
   12d8c:	movcc	r0, #39	; 0x27
   12d90:	strbcc	r0, [r7, r8]
   12d94:	add	r0, r8, #1
   12d98:	cmp	r0, r4
   12d9c:	movcc	r1, #36	; 0x24
   12da0:	strbcc	r1, [r7, r0]
   12da4:	add	r0, r8, #2
   12da8:	cmp	r0, r4
   12dac:	movcc	r1, #39	; 0x27
   12db0:	strbcc	r1, [r7, r0]
   12db4:	add	r0, r8, #3
   12db8:	mov	r2, #1
   12dbc:	cmp	r0, r4
   12dc0:	movcc	r1, #92	; 0x5c
   12dc4:	strbcc	r1, [r7, r0]
   12dc8:	str	r2, [fp, #-56]	; 0xffffffc8
   12dcc:	add	r8, r0, #1
   12dd0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12dd4:	cmp	r1, #2
   12dd8:	beq	12e2c <__assert_fail@plt+0x1d5c>
   12ddc:	add	r1, r6, #1
   12de0:	mov	r9, #0
   12de4:	mov	sl, #1
   12de8:	mov	r5, #48	; 0x30
   12dec:	cmp	r1, lr
   12df0:	bcs	1263c <__assert_fail@plt+0x156c>
   12df4:	ldrb	r1, [ip, r1]
   12df8:	sub	r1, r1, #48	; 0x30
   12dfc:	uxtb	r1, r1
   12e00:	cmp	r1, #9
   12e04:	bhi	1263c <__assert_fail@plt+0x156c>
   12e08:	cmp	r8, r4
   12e0c:	movcc	r1, #48	; 0x30
   12e10:	strbcc	r1, [r7, r8]
   12e14:	add	r1, r0, #2
   12e18:	cmp	r1, r4
   12e1c:	movcc	r2, #48	; 0x30
   12e20:	strbcc	r2, [r7, r1]
   12e24:	add	r8, r0, #3
   12e28:	b	1263c <__assert_fail@plt+0x156c>
   12e2c:	mov	r0, #48	; 0x30
   12e30:	mov	sl, #1
   12e34:	mov	r9, #0
   12e38:	b	128e8 <__assert_fail@plt+0x1818>
   12e3c:	sub	r6, r1, #1
   12e40:	cmp	sl, #0
   12e44:	movwne	sl, #1
   12e48:	mov	r0, r5
   12e4c:	cmp	sl, #0
   12e50:	bne	12e90 <__assert_fail@plt+0x1dc0>
   12e54:	ldr	r1, [fp, #-56]	; 0xffffffc8
   12e58:	tst	r1, #1
   12e5c:	beq	12e90 <__assert_fail@plt+0x1dc0>
   12e60:	cmp	r8, r4
   12e64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e68:	movcc	r1, #39	; 0x27
   12e6c:	strbcc	r1, [r7, r8]
   12e70:	add	r1, r8, #1
   12e74:	cmp	r1, r4
   12e78:	movcc	r2, #39	; 0x27
   12e7c:	strbcc	r2, [r7, r1]
   12e80:	add	r8, r8, #2
   12e84:	mov	r1, #0
   12e88:	str	r1, [fp, #-56]	; 0xffffffc8
   12e8c:	b	12974 <__assert_fail@plt+0x18a4>
   12e90:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12e94:	b	12974 <__assert_fail@plt+0x18a4>
   12e98:	mov	r9, #0
   12e9c:	b	12ed8 <__assert_fail@plt+0x1e08>
   12ea0:	mov	r9, #0
   12ea4:	cmp	r7, lr
   12ea8:	bcs	12ed8 <__assert_fail@plt+0x1e08>
   12eac:	ldr	ip, [fp, #-84]	; 0xffffffac
   12eb0:	ldr	r7, [sp, #44]	; 0x2c
   12eb4:	ldr	r0, [sp, #20]
   12eb8:	ldrb	r0, [r0, r7]
   12ebc:	cmp	r0, #0
   12ec0:	beq	12ee0 <__assert_fail@plt+0x1e10>
   12ec4:	add	r7, r7, #1
   12ec8:	add	r0, r6, r7
   12ecc:	cmp	r0, lr
   12ed0:	bcc	12eb4 <__assert_fail@plt+0x1de4>
   12ed4:	b	12ee0 <__assert_fail@plt+0x1e10>
   12ed8:	ldr	ip, [fp, #-84]	; 0xffffffac
   12edc:	ldr	r7, [sp, #44]	; 0x2c
   12ee0:	mov	r1, r7
   12ee4:	ldr	r7, [sp, #80]	; 0x50
   12ee8:	b	12810 <__assert_fail@plt+0x1740>
   12eec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12ef0:	eor	r0, r1, #2
   12ef4:	orr	r0, r0, r8
   12ef8:	clz	r0, r0
   12efc:	lsr	r0, r0, #5
   12f00:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f04:	tst	r2, r0
   12f08:	bne	12fc8 <__assert_fail@plt+0x1ef8>
   12f0c:	cmp	r1, #2
   12f10:	ldr	r0, [fp, #-80]	; 0xffffffb0
   12f14:	movwne	r0, #1
   12f18:	orr	r0, r2, r0
   12f1c:	tst	r0, #1
   12f20:	ldreq	r0, [sp, #56]	; 0x38
   12f24:	eoreq	r0, r0, #1
   12f28:	tsteq	r0, #1
   12f2c:	bne	12f60 <__assert_fail@plt+0x1e90>
   12f30:	mov	r9, lr
   12f34:	tst	r5, #1
   12f38:	bne	13030 <__assert_fail@plt+0x1f60>
   12f3c:	ldr	r0, [sp, #72]	; 0x48
   12f40:	cmp	r0, #0
   12f44:	beq	12f60 <__assert_fail@plt+0x1e90>
   12f48:	mov	r5, #0
   12f4c:	cmp	r4, #0
   12f50:	ldr	r0, [sp, #84]	; 0x54
   12f54:	mov	sl, r2
   12f58:	ldr	r6, [sp, #72]	; 0x48
   12f5c:	beq	120f8 <__assert_fail@plt+0x1028>
   12f60:	ldr	r1, [sp, #92]	; 0x5c
   12f64:	clz	r0, r1
   12f68:	lsr	r0, r0, #5
   12f6c:	orr	r0, r0, r2
   12f70:	tst	r0, #1
   12f74:	bne	12fa0 <__assert_fail@plt+0x1ed0>
   12f78:	ldrb	r0, [r1]
   12f7c:	cmp	r0, #0
   12f80:	beq	12fa0 <__assert_fail@plt+0x1ed0>
   12f84:	add	r1, r1, #1
   12f88:	cmp	r8, r4
   12f8c:	strbcc	r0, [r7, r8]
   12f90:	add	r8, r8, #1
   12f94:	ldrb	r0, [r1], #1
   12f98:	cmp	r0, #0
   12f9c:	bne	12f88 <__assert_fail@plt+0x1eb8>
   12fa0:	cmp	r8, r4
   12fa4:	movcc	r0, #0
   12fa8:	strbcc	r0, [r7, r8]
   12fac:	b	13024 <__assert_fail@plt+0x1f54>
   12fb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fb4:	mov	lr, r4
   12fb8:	mov	r4, r5
   12fbc:	b	12fc8 <__assert_fail@plt+0x1ef8>
   12fc0:	ldr	r7, [sp, #80]	; 0x50
   12fc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12fc8:	mov	r0, #0
   12fcc:	ldr	r1, [fp, #12]
   12fd0:	bic	r1, r1, #2
   12fd4:	ldr	r2, [sp, #84]	; 0x54
   12fd8:	tst	r2, #1
   12fdc:	ldr	r3, [fp, #-60]	; 0xffffffc4
   12fe0:	mov	r2, r3
   12fe4:	movwne	r2, #4
   12fe8:	cmp	r3, #2
   12fec:	movne	r2, r3
   12ff0:	str	r2, [sp]
   12ff4:	str	r1, [sp, #4]
   12ff8:	str	r0, [sp, #8]
   12ffc:	ldr	r0, [sp, #68]	; 0x44
   13000:	str	r0, [sp, #12]
   13004:	ldr	r0, [sp, #76]	; 0x4c
   13008:	str	r0, [sp, #16]
   1300c:	mov	r0, r7
   13010:	mov	r1, r4
   13014:	mov	r2, ip
   13018:	mov	r3, lr
   1301c:	bl	12070 <__assert_fail@plt+0xfa0>
   13020:	mov	r8, r0
   13024:	mov	r0, r8
   13028:	sub	sp, fp, #28
   1302c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13030:	mov	r0, #5
   13034:	str	r0, [sp]
   13038:	ldr	r0, [fp, #12]
   1303c:	str	r0, [sp, #4]
   13040:	ldr	r0, [fp, #16]
   13044:	str	r0, [sp, #8]
   13048:	ldr	r0, [sp, #68]	; 0x44
   1304c:	str	r0, [sp, #12]
   13050:	ldr	r0, [sp, #76]	; 0x4c
   13054:	str	r0, [sp, #16]
   13058:	mov	r0, r7
   1305c:	ldr	r1, [sp, #72]	; 0x48
   13060:	ldr	r2, [fp, #-84]	; 0xffffffac
   13064:	mov	r3, r9
   13068:	b	1301c <__assert_fail@plt+0x1f4c>
   1306c:	bl	110b8 <abort@plt>
   13070:	mov	r3, r2
   13074:	mov	r2, #0
   13078:	b	1307c <__assert_fail@plt+0x1fac>
   1307c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13080:	add	fp, sp, #28
   13084:	sub	sp, sp, #36	; 0x24
   13088:	mov	r4, r2
   1308c:	str	r2, [sp, #24]
   13090:	mov	r5, r1
   13094:	mov	r6, r0
   13098:	str	r0, [sp, #20]
   1309c:	movw	r8, #24952	; 0x6178
   130a0:	movt	r8, #2
   130a4:	cmp	r3, #0
   130a8:	movne	r8, r3
   130ac:	bl	10ff8 <__errno_location@plt>
   130b0:	str	r0, [sp, #28]
   130b4:	ldm	r8, {r3, r9}
   130b8:	ldr	r1, [r8, #40]	; 0x28
   130bc:	ldr	r2, [r8, #44]	; 0x2c
   130c0:	ldr	r7, [r0]
   130c4:	str	r7, [sp, #32]
   130c8:	add	sl, r8, #8
   130cc:	cmp	r4, #0
   130d0:	orreq	r9, r9, #1
   130d4:	stm	sp, {r3, r9, sl}
   130d8:	str	r1, [sp, #12]
   130dc:	str	r2, [sp, #16]
   130e0:	mov	r0, #0
   130e4:	mov	r1, #0
   130e8:	mov	r2, r6
   130ec:	mov	r3, r5
   130f0:	mov	r7, r5
   130f4:	bl	12070 <__assert_fail@plt+0xfa0>
   130f8:	mov	r5, r0
   130fc:	add	r4, r0, #1
   13100:	mov	r0, r4
   13104:	bl	13f80 <__assert_fail@plt+0x2eb0>
   13108:	mov	r6, r0
   1310c:	ldr	r0, [r8]
   13110:	ldr	r1, [r8, #40]	; 0x28
   13114:	ldr	r2, [r8, #44]	; 0x2c
   13118:	stm	sp, {r0, r9, sl}
   1311c:	str	r1, [sp, #12]
   13120:	str	r2, [sp, #16]
   13124:	mov	r0, r6
   13128:	mov	r1, r4
   1312c:	ldr	r2, [sp, #20]
   13130:	mov	r3, r7
   13134:	bl	12070 <__assert_fail@plt+0xfa0>
   13138:	ldr	r0, [sp, #24]
   1313c:	ldr	r1, [sp, #32]
   13140:	ldr	r2, [sp, #28]
   13144:	str	r1, [r2]
   13148:	cmp	r0, #0
   1314c:	strne	r5, [r0]
   13150:	mov	r0, r6
   13154:	sub	sp, fp, #28
   13158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1315c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13160:	add	fp, sp, #24
   13164:	movw	r8, #24824	; 0x60f8
   13168:	movt	r8, #2
   1316c:	ldr	r4, [r8]
   13170:	movw	r5, #24828	; 0x60fc
   13174:	movt	r5, #2
   13178:	ldr	r0, [r5]
   1317c:	cmp	r0, #2
   13180:	blt	131ac <__assert_fail@plt+0x20dc>
   13184:	add	r7, r4, #12
   13188:	mov	r6, #0
   1318c:	ldr	r0, [r7, r6, lsl #3]
   13190:	bl	14de8 <__assert_fail@plt+0x3d18>
   13194:	add	r0, r6, #1
   13198:	ldr	r1, [r5]
   1319c:	add	r2, r6, #2
   131a0:	cmp	r2, r1
   131a4:	mov	r6, r0
   131a8:	blt	1318c <__assert_fail@plt+0x20bc>
   131ac:	ldr	r0, [r4, #4]
   131b0:	movw	r7, #25000	; 0x61a8
   131b4:	movt	r7, #2
   131b8:	cmp	r0, r7
   131bc:	beq	131d4 <__assert_fail@plt+0x2104>
   131c0:	bl	14de8 <__assert_fail@plt+0x3d18>
   131c4:	movw	r0, #24832	; 0x6100
   131c8:	movt	r0, #2
   131cc:	mov	r6, #256	; 0x100
   131d0:	strd	r6, [r0]
   131d4:	movw	r6, #24832	; 0x6100
   131d8:	movt	r6, #2
   131dc:	cmp	r4, r6
   131e0:	beq	131f0 <__assert_fail@plt+0x2120>
   131e4:	mov	r0, r4
   131e8:	bl	14de8 <__assert_fail@plt+0x3d18>
   131ec:	str	r6, [r8]
   131f0:	mov	r0, #1
   131f4:	str	r0, [r5]
   131f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   131fc:	movw	r3, #24952	; 0x6178
   13200:	movt	r3, #2
   13204:	mvn	r2, #0
   13208:	b	1320c <__assert_fail@plt+0x213c>
   1320c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13210:	add	fp, sp, #28
   13214:	sub	sp, sp, #44	; 0x2c
   13218:	mov	r7, r3
   1321c:	str	r2, [sp, #36]	; 0x24
   13220:	str	r1, [sp, #32]
   13224:	mov	r5, r0
   13228:	bl	10ff8 <__errno_location@plt>
   1322c:	cmp	r5, #0
   13230:	blt	1339c <__assert_fail@plt+0x22cc>
   13234:	cmn	r5, #-2147483647	; 0x80000001
   13238:	beq	1339c <__assert_fail@plt+0x22cc>
   1323c:	movw	r4, #24824	; 0x60f8
   13240:	movt	r4, #2
   13244:	ldr	r6, [r4]
   13248:	str	r0, [sp, #28]
   1324c:	ldr	r0, [r0]
   13250:	str	r0, [sp, #24]
   13254:	movw	r8, #24828	; 0x60fc
   13258:	movt	r8, #2
   1325c:	ldr	r1, [r8]
   13260:	cmp	r1, r5
   13264:	ble	13270 <__assert_fail@plt+0x21a0>
   13268:	mov	sl, r6
   1326c:	b	132d8 <__assert_fail@plt+0x2208>
   13270:	str	r1, [fp, #-32]	; 0xffffffe0
   13274:	mov	r0, #8
   13278:	str	r0, [sp]
   1327c:	movw	r9, #24832	; 0x6100
   13280:	movt	r9, #2
   13284:	subs	r0, r6, r9
   13288:	movne	r0, r6
   1328c:	add	r2, r5, #1
   13290:	sub	r2, r2, r1
   13294:	sub	r1, fp, #32
   13298:	mvn	r3, #-2147483648	; 0x80000000
   1329c:	bl	14068 <__assert_fail@plt+0x2f98>
   132a0:	mov	sl, r0
   132a4:	str	r0, [r4]
   132a8:	cmp	r6, r9
   132ac:	ldrdeq	r0, [r9]
   132b0:	stmeq	sl, {r0, r1}
   132b4:	ldr	r1, [r8]
   132b8:	add	r0, sl, r1, lsl #3
   132bc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   132c0:	sub	r1, r2, r1
   132c4:	lsl	r2, r1, #3
   132c8:	mov	r1, #0
   132cc:	bl	11010 <memset@plt>
   132d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   132d4:	str	r0, [r8]
   132d8:	mov	r9, sl
   132dc:	ldr	r6, [r9, r5, lsl #3]!
   132e0:	ldr	r4, [r9, #4]!
   132e4:	ldm	r7, {r0, r1}
   132e8:	ldr	r2, [r7, #40]	; 0x28
   132ec:	ldr	r3, [r7, #44]	; 0x2c
   132f0:	orr	r8, r1, #1
   132f4:	add	r1, r7, #8
   132f8:	stm	sp, {r0, r8}
   132fc:	str	r1, [sp, #20]
   13300:	add	r0, sp, #8
   13304:	stm	r0, {r1, r2, r3}
   13308:	mov	r0, r4
   1330c:	mov	r1, r6
   13310:	ldr	r2, [sp, #32]
   13314:	ldr	r3, [sp, #36]	; 0x24
   13318:	bl	12070 <__assert_fail@plt+0xfa0>
   1331c:	cmp	r6, r0
   13320:	bhi	13384 <__assert_fail@plt+0x22b4>
   13324:	add	r6, r0, #1
   13328:	str	r6, [sl, r5, lsl #3]
   1332c:	movw	r0, #25000	; 0x61a8
   13330:	movt	r0, #2
   13334:	cmp	r4, r0
   13338:	beq	13344 <__assert_fail@plt+0x2274>
   1333c:	mov	r0, r4
   13340:	bl	14de8 <__assert_fail@plt+0x3d18>
   13344:	mov	r0, r6
   13348:	bl	13f80 <__assert_fail@plt+0x2eb0>
   1334c:	mov	r4, r0
   13350:	str	r0, [r9]
   13354:	ldr	r0, [r7]
   13358:	ldr	r1, [r7, #40]	; 0x28
   1335c:	ldr	r2, [r7, #44]	; 0x2c
   13360:	stm	sp, {r0, r8}
   13364:	ldr	r0, [sp, #20]
   13368:	add	r3, sp, #8
   1336c:	stm	r3, {r0, r1, r2}
   13370:	mov	r0, r4
   13374:	mov	r1, r6
   13378:	ldr	r2, [sp, #32]
   1337c:	ldr	r3, [sp, #36]	; 0x24
   13380:	bl	12070 <__assert_fail@plt+0xfa0>
   13384:	ldr	r0, [sp, #28]
   13388:	ldr	r1, [sp, #24]
   1338c:	str	r1, [r0]
   13390:	mov	r0, r4
   13394:	sub	sp, fp, #28
   13398:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1339c:	bl	110b8 <abort@plt>
   133a0:	movw	r3, #24952	; 0x6178
   133a4:	movt	r3, #2
   133a8:	b	1320c <__assert_fail@plt+0x213c>
   133ac:	mov	r1, r0
   133b0:	mov	r0, #0
   133b4:	b	131fc <__assert_fail@plt+0x212c>
   133b8:	mov	r2, r1
   133bc:	mov	r1, r0
   133c0:	mov	r0, #0
   133c4:	b	133a0 <__assert_fail@plt+0x22d0>
   133c8:	push	{r4, r5, r6, sl, fp, lr}
   133cc:	add	fp, sp, #16
   133d0:	sub	sp, sp, #48	; 0x30
   133d4:	mov	r4, r2
   133d8:	mov	r5, r0
   133dc:	mov	r6, sp
   133e0:	mov	r0, r6
   133e4:	bl	13404 <__assert_fail@plt+0x2334>
   133e8:	mov	r0, r5
   133ec:	mov	r1, r4
   133f0:	mvn	r2, #0
   133f4:	mov	r3, r6
   133f8:	bl	1320c <__assert_fail@plt+0x213c>
   133fc:	sub	sp, fp, #16
   13400:	pop	{r4, r5, r6, sl, fp, pc}
   13404:	vmov.i32	q8, #0	; 0x00000000
   13408:	mov	r2, #32
   1340c:	mov	r3, r0
   13410:	vst1.32	{d16-d17}, [r3], r2
   13414:	vst1.32	{d16-d17}, [r3]
   13418:	add	r2, r0, #16
   1341c:	vst1.32	{d16-d17}, [r2]
   13420:	cmp	r1, #10
   13424:	strne	r1, [r0]
   13428:	bxne	lr
   1342c:	push	{fp, lr}
   13430:	mov	fp, sp
   13434:	bl	110b8 <abort@plt>
   13438:	push	{r4, r5, r6, r7, fp, lr}
   1343c:	add	fp, sp, #16
   13440:	sub	sp, sp, #48	; 0x30
   13444:	mov	r4, r3
   13448:	mov	r5, r2
   1344c:	mov	r6, r0
   13450:	mov	r7, sp
   13454:	mov	r0, r7
   13458:	bl	13404 <__assert_fail@plt+0x2334>
   1345c:	mov	r0, r6
   13460:	mov	r1, r5
   13464:	mov	r2, r4
   13468:	mov	r3, r7
   1346c:	bl	1320c <__assert_fail@plt+0x213c>
   13470:	sub	sp, fp, #16
   13474:	pop	{r4, r5, r6, r7, fp, pc}
   13478:	mov	r2, r1
   1347c:	mov	r1, r0
   13480:	mov	r0, #0
   13484:	b	133c8 <__assert_fail@plt+0x22f8>
   13488:	mov	r3, r2
   1348c:	mov	r2, r1
   13490:	mov	r1, r0
   13494:	mov	r0, #0
   13498:	b	13438 <__assert_fail@plt+0x2368>
   1349c:	push	{r4, r5, r6, sl, fp, lr}
   134a0:	add	fp, sp, #16
   134a4:	sub	sp, sp, #48	; 0x30
   134a8:	mov	r4, r1
   134ac:	mov	r5, r0
   134b0:	mov	r0, #32
   134b4:	movw	r1, #24952	; 0x6178
   134b8:	movt	r1, #2
   134bc:	add	r3, r1, #16
   134c0:	vld1.64	{d16-d17}, [r1], r0
   134c4:	mov	r6, sp
   134c8:	vld1.64	{d18-d19}, [r3]
   134cc:	add	r3, r6, #16
   134d0:	vld1.64	{d20-d21}, [r1]
   134d4:	vst1.64	{d18-d19}, [r3]
   134d8:	mov	r1, r6
   134dc:	vst1.64	{d16-d17}, [r1], r0
   134e0:	vst1.64	{d20-d21}, [r1]
   134e4:	mov	r0, r6
   134e8:	mov	r1, r2
   134ec:	mov	r2, #1
   134f0:	bl	11f64 <__assert_fail@plt+0xe94>
   134f4:	mov	r0, #0
   134f8:	mov	r1, r5
   134fc:	mov	r2, r4
   13500:	mov	r3, r6
   13504:	bl	1320c <__assert_fail@plt+0x213c>
   13508:	sub	sp, fp, #16
   1350c:	pop	{r4, r5, r6, sl, fp, pc}
   13510:	mov	r2, r1
   13514:	mvn	r1, #0
   13518:	b	1349c <__assert_fail@plt+0x23cc>
   1351c:	mov	r1, #58	; 0x3a
   13520:	b	13510 <__assert_fail@plt+0x2440>
   13524:	mov	r2, #58	; 0x3a
   13528:	b	1349c <__assert_fail@plt+0x23cc>
   1352c:	push	{r4, r5, r6, sl, fp, lr}
   13530:	add	fp, sp, #16
   13534:	sub	sp, sp, #48	; 0x30
   13538:	mov	r4, r2
   1353c:	mov	r5, r0
   13540:	mov	r6, sp
   13544:	mov	r0, r6
   13548:	bl	13404 <__assert_fail@plt+0x2334>
   1354c:	mov	r0, r6
   13550:	mov	r1, #58	; 0x3a
   13554:	mov	r2, #1
   13558:	bl	11f64 <__assert_fail@plt+0xe94>
   1355c:	mov	r0, r5
   13560:	mov	r1, r4
   13564:	mvn	r2, #0
   13568:	mov	r3, r6
   1356c:	bl	1320c <__assert_fail@plt+0x213c>
   13570:	sub	sp, fp, #16
   13574:	pop	{r4, r5, r6, sl, fp, pc}
   13578:	push	{fp, lr}
   1357c:	mov	fp, sp
   13580:	sub	sp, sp, #8
   13584:	mvn	ip, #0
   13588:	str	ip, [sp]
   1358c:	bl	13598 <__assert_fail@plt+0x24c8>
   13590:	mov	sp, fp
   13594:	pop	{fp, pc}
   13598:	push	{r4, r5, r6, r7, fp, lr}
   1359c:	add	fp, sp, #16
   135a0:	sub	sp, sp, #48	; 0x30
   135a4:	mov	r7, r3
   135a8:	mov	r5, r0
   135ac:	mov	r0, #32
   135b0:	movw	r3, #24952	; 0x6178
   135b4:	movt	r3, #2
   135b8:	add	r4, r3, #16
   135bc:	vld1.64	{d16-d17}, [r3], r0
   135c0:	mov	r6, sp
   135c4:	vld1.64	{d18-d19}, [r4]
   135c8:	add	r4, r6, #16
   135cc:	vld1.64	{d20-d21}, [r3]
   135d0:	vst1.64	{d18-d19}, [r4]
   135d4:	mov	r3, r6
   135d8:	vst1.64	{d16-d17}, [r3], r0
   135dc:	vst1.64	{d20-d21}, [r3]
   135e0:	mov	r0, r6
   135e4:	bl	11fbc <__assert_fail@plt+0xeec>
   135e8:	ldr	r2, [fp, #8]
   135ec:	mov	r0, r5
   135f0:	mov	r1, r7
   135f4:	mov	r3, r6
   135f8:	bl	1320c <__assert_fail@plt+0x213c>
   135fc:	sub	sp, fp, #16
   13600:	pop	{r4, r5, r6, r7, fp, pc}
   13604:	mov	r3, r2
   13608:	mov	r2, r1
   1360c:	mov	r1, r0
   13610:	mov	r0, #0
   13614:	b	13578 <__assert_fail@plt+0x24a8>
   13618:	push	{fp, lr}
   1361c:	mov	fp, sp
   13620:	sub	sp, sp, #8
   13624:	mov	ip, r2
   13628:	mov	r2, r1
   1362c:	mov	r1, r0
   13630:	str	r3, [sp]
   13634:	mov	r0, #0
   13638:	mov	r3, ip
   1363c:	bl	13598 <__assert_fail@plt+0x24c8>
   13640:	mov	sp, fp
   13644:	pop	{fp, pc}
   13648:	movw	r3, #24840	; 0x6108
   1364c:	movt	r3, #2
   13650:	b	1320c <__assert_fail@plt+0x213c>
   13654:	mov	r2, r1
   13658:	mov	r1, r0
   1365c:	mov	r0, #0
   13660:	b	13648 <__assert_fail@plt+0x2578>
   13664:	mvn	r2, #0
   13668:	b	13648 <__assert_fail@plt+0x2578>
   1366c:	mov	r1, r0
   13670:	mov	r0, #0
   13674:	b	13664 <__assert_fail@plt+0x2594>
   13678:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1367c:	add	fp, sp, #24
   13680:	sub	sp, sp, #16
   13684:	mov	r4, r1
   13688:	mov	r5, r0
   1368c:	mov	r7, #0
   13690:	mov	r0, #0
   13694:	mov	r1, r5
   13698:	mov	r2, #5
   1369c:	bl	10f08 <dcgettext@plt>
   136a0:	cmp	r0, r5
   136a4:	beq	136b0 <__assert_fail@plt+0x25e0>
   136a8:	sub	sp, fp, #24
   136ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   136b0:	bl	14e60 <__assert_fail@plt+0x3d90>
   136b4:	mov	r6, r0
   136b8:	mov	r8, #56	; 0x38
   136bc:	mov	r0, #45	; 0x2d
   136c0:	stm	sp, {r0, r8}
   136c4:	str	r7, [sp, #8]
   136c8:	str	r7, [sp, #12]
   136cc:	mov	r0, r6
   136d0:	mov	r1, #85	; 0x55
   136d4:	mov	r2, #84	; 0x54
   136d8:	mov	r3, #70	; 0x46
   136dc:	bl	13774 <__assert_fail@plt+0x26a4>
   136e0:	cmp	r0, #0
   136e4:	beq	13700 <__assert_fail@plt+0x2630>
   136e8:	ldrb	r1, [r5]
   136ec:	movw	r2, #22368	; 0x5760
   136f0:	movt	r2, #1
   136f4:	movw	r0, #22372	; 0x5764
   136f8:	movt	r0, #1
   136fc:	b	13744 <__assert_fail@plt+0x2674>
   13700:	mov	r0, #48	; 0x30
   13704:	mov	r1, #51	; 0x33
   13708:	str	r8, [sp]
   1370c:	stmib	sp, {r0, r1}
   13710:	str	r0, [sp, #12]
   13714:	mov	r0, r6
   13718:	mov	r1, #71	; 0x47
   1371c:	mov	r2, #66	; 0x42
   13720:	mov	r3, #49	; 0x31
   13724:	bl	13774 <__assert_fail@plt+0x26a4>
   13728:	cmp	r0, #0
   1372c:	beq	13754 <__assert_fail@plt+0x2684>
   13730:	ldrb	r1, [r5]
   13734:	movw	r2, #22376	; 0x5768
   13738:	movt	r2, #1
   1373c:	movw	r0, #22380	; 0x576c
   13740:	movt	r0, #1
   13744:	cmp	r1, #96	; 0x60
   13748:	moveq	r0, r2
   1374c:	sub	sp, fp, #24
   13750:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13754:	movw	r1, #22362	; 0x575a
   13758:	movt	r1, #1
   1375c:	movw	r0, #22366	; 0x575e
   13760:	movt	r0, #1
   13764:	cmp	r4, #9
   13768:	moveq	r0, r1
   1376c:	sub	sp, fp, #24
   13770:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13774:	push	{r4, r5, r6, r7, fp, lr}
   13778:	add	fp, sp, #16
   1377c:	sub	sp, sp, #16
   13780:	mov	r4, r3
   13784:	mov	r5, r2
   13788:	mov	r7, r1
   1378c:	mov	r6, r0
   13790:	mov	r0, r1
   13794:	bl	14cf0 <__assert_fail@plt+0x3c20>
   13798:	ldrb	r1, [r6]
   1379c:	cmp	r0, #0
   137a0:	andne	r1, r1, #223	; 0xdf
   137a4:	mov	r0, #0
   137a8:	cmp	r1, r7
   137ac:	bne	137ec <__assert_fail@plt+0x271c>
   137b0:	cmp	r7, #0
   137b4:	moveq	r0, #1
   137b8:	subeq	sp, fp, #16
   137bc:	popeq	{r4, r5, r6, r7, fp, pc}
   137c0:	ldr	r0, [fp, #20]
   137c4:	ldr	r1, [fp, #16]
   137c8:	ldr	r2, [fp, #12]
   137cc:	ldr	r3, [fp, #8]
   137d0:	str	r2, [sp]
   137d4:	str	r1, [sp, #4]
   137d8:	str	r0, [sp, #8]
   137dc:	mov	r0, r6
   137e0:	mov	r1, r5
   137e4:	mov	r2, r4
   137e8:	bl	137f4 <__assert_fail@plt+0x2724>
   137ec:	sub	sp, fp, #16
   137f0:	pop	{r4, r5, r6, r7, fp, pc}
   137f4:	push	{r4, r5, r6, r7, fp, lr}
   137f8:	add	fp, sp, #16
   137fc:	sub	sp, sp, #8
   13800:	mov	r4, r3
   13804:	mov	r5, r2
   13808:	mov	r7, r1
   1380c:	mov	r6, r0
   13810:	mov	r0, r1
   13814:	bl	14cf0 <__assert_fail@plt+0x3c20>
   13818:	ldrb	r1, [r6, #1]
   1381c:	cmp	r0, #0
   13820:	andne	r1, r1, #223	; 0xdf
   13824:	mov	r0, #0
   13828:	cmp	r1, r7
   1382c:	bne	13864 <__assert_fail@plt+0x2794>
   13830:	cmp	r7, #0
   13834:	moveq	r0, #1
   13838:	subeq	sp, fp, #16
   1383c:	popeq	{r4, r5, r6, r7, fp, pc}
   13840:	ldr	r0, [fp, #16]
   13844:	ldr	r1, [fp, #12]
   13848:	ldr	r3, [fp, #8]
   1384c:	str	r1, [sp]
   13850:	str	r0, [sp, #4]
   13854:	mov	r0, r6
   13858:	mov	r1, r5
   1385c:	mov	r2, r4
   13860:	bl	1386c <__assert_fail@plt+0x279c>
   13864:	sub	sp, fp, #16
   13868:	pop	{r4, r5, r6, r7, fp, pc}
   1386c:	push	{r4, r5, r6, r7, fp, lr}
   13870:	add	fp, sp, #16
   13874:	sub	sp, sp, #8
   13878:	mov	r4, r3
   1387c:	mov	r5, r2
   13880:	mov	r7, r1
   13884:	mov	r6, r0
   13888:	mov	r0, r1
   1388c:	bl	14cf0 <__assert_fail@plt+0x3c20>
   13890:	ldrb	r1, [r6, #2]
   13894:	cmp	r0, #0
   13898:	andne	r1, r1, #223	; 0xdf
   1389c:	mov	r0, #0
   138a0:	cmp	r1, r7
   138a4:	bne	138d4 <__assert_fail@plt+0x2804>
   138a8:	cmp	r7, #0
   138ac:	moveq	r0, #1
   138b0:	subeq	sp, fp, #16
   138b4:	popeq	{r4, r5, r6, r7, fp, pc}
   138b8:	ldr	r0, [fp, #12]
   138bc:	ldr	r3, [fp, #8]
   138c0:	str	r0, [sp]
   138c4:	mov	r0, r6
   138c8:	mov	r1, r5
   138cc:	mov	r2, r4
   138d0:	bl	138dc <__assert_fail@plt+0x280c>
   138d4:	sub	sp, fp, #16
   138d8:	pop	{r4, r5, r6, r7, fp, pc}
   138dc:	push	{r4, r5, r6, r7, fp, lr}
   138e0:	add	fp, sp, #16
   138e4:	mov	r4, r3
   138e8:	mov	r5, r2
   138ec:	mov	r7, r1
   138f0:	mov	r6, r0
   138f4:	mov	r0, r1
   138f8:	bl	14cf0 <__assert_fail@plt+0x3c20>
   138fc:	ldrb	r1, [r6, #3]
   13900:	ldr	r3, [fp, #8]
   13904:	cmp	r0, #0
   13908:	andne	r1, r1, #223	; 0xdf
   1390c:	mov	r0, #0
   13910:	cmp	r1, r7
   13914:	popne	{r4, r5, r6, r7, fp, pc}
   13918:	cmp	r7, #0
   1391c:	beq	13934 <__assert_fail@plt+0x2864>
   13920:	mov	r0, r6
   13924:	mov	r1, r5
   13928:	mov	r2, r4
   1392c:	pop	{r4, r5, r6, r7, fp, lr}
   13930:	b	1393c <__assert_fail@plt+0x286c>
   13934:	mov	r0, #1
   13938:	pop	{r4, r5, r6, r7, fp, pc}
   1393c:	push	{r4, r5, r6, r7, fp, lr}
   13940:	add	fp, sp, #16
   13944:	mov	r4, r3
   13948:	mov	r5, r2
   1394c:	mov	r7, r1
   13950:	mov	r6, r0
   13954:	mov	r0, r1
   13958:	bl	14cf0 <__assert_fail@plt+0x3c20>
   1395c:	ldrb	r1, [r6, #4]
   13960:	cmp	r0, #0
   13964:	andne	r1, r1, #223	; 0xdf
   13968:	mov	r0, #0
   1396c:	cmp	r1, r7
   13970:	popne	{r4, r5, r6, r7, fp, pc}
   13974:	cmp	r7, #0
   13978:	beq	13990 <__assert_fail@plt+0x28c0>
   1397c:	mov	r0, r6
   13980:	mov	r1, r5
   13984:	mov	r2, r4
   13988:	pop	{r4, r5, r6, r7, fp, lr}
   1398c:	b	13998 <__assert_fail@plt+0x28c8>
   13990:	mov	r0, #1
   13994:	pop	{r4, r5, r6, r7, fp, pc}
   13998:	push	{r4, r5, r6, sl, fp, lr}
   1399c:	add	fp, sp, #16
   139a0:	mov	r4, r2
   139a4:	mov	r6, r1
   139a8:	mov	r5, r0
   139ac:	mov	r0, r1
   139b0:	bl	14cf0 <__assert_fail@plt+0x3c20>
   139b4:	ldrb	r1, [r5, #5]
   139b8:	cmp	r0, #0
   139bc:	andne	r1, r1, #223	; 0xdf
   139c0:	mov	r0, #0
   139c4:	cmp	r1, r6
   139c8:	popne	{r4, r5, r6, sl, fp, pc}
   139cc:	cmp	r6, #0
   139d0:	beq	139e4 <__assert_fail@plt+0x2914>
   139d4:	mov	r0, r5
   139d8:	mov	r1, r4
   139dc:	pop	{r4, r5, r6, sl, fp, lr}
   139e0:	b	139ec <__assert_fail@plt+0x291c>
   139e4:	mov	r0, #1
   139e8:	pop	{r4, r5, r6, sl, fp, pc}
   139ec:	push	{r4, r5, fp, lr}
   139f0:	add	fp, sp, #8
   139f4:	mov	r5, r1
   139f8:	mov	r4, r0
   139fc:	mov	r0, r1
   13a00:	bl	14cf0 <__assert_fail@plt+0x3c20>
   13a04:	ldrb	r1, [r4, #6]
   13a08:	cmp	r0, #0
   13a0c:	andne	r1, r1, #223	; 0xdf
   13a10:	mov	r0, #0
   13a14:	cmp	r1, r5
   13a18:	popne	{r4, r5, fp, pc}
   13a1c:	cmp	r5, #0
   13a20:	beq	13a30 <__assert_fail@plt+0x2960>
   13a24:	mov	r0, r4
   13a28:	pop	{r4, r5, fp, lr}
   13a2c:	b	13a38 <__assert_fail@plt+0x2968>
   13a30:	mov	r0, #1
   13a34:	pop	{r4, r5, fp, pc}
   13a38:	push	{r4, sl, fp, lr}
   13a3c:	add	fp, sp, #8
   13a40:	mov	r4, r0
   13a44:	mov	r0, #0
   13a48:	bl	14cf0 <__assert_fail@plt+0x3c20>
   13a4c:	ldrb	r1, [r4, #7]
   13a50:	cmp	r0, #0
   13a54:	beq	13a6c <__assert_fail@plt+0x299c>
   13a58:	tst	r1, #223	; 0xdf
   13a5c:	moveq	r0, #1
   13a60:	popeq	{r4, sl, fp, pc}
   13a64:	mov	r0, #0
   13a68:	pop	{r4, sl, fp, pc}
   13a6c:	cmp	r1, #0
   13a70:	moveq	r0, #1
   13a74:	popeq	{r4, sl, fp, pc}
   13a78:	mov	r0, #0
   13a7c:	pop	{r4, sl, fp, pc}
   13a80:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a84:	add	fp, sp, #24
   13a88:	sub	sp, sp, #32
   13a8c:	mov	r4, r2
   13a90:	mov	r8, r0
   13a94:	ldr	r6, [fp, #12]
   13a98:	ldr	r7, [fp, #8]
   13a9c:	cmp	r1, #0
   13aa0:	beq	13ac8 <__assert_fail@plt+0x29f8>
   13aa4:	mov	r5, r1
   13aa8:	str	r4, [sp]
   13aac:	str	r3, [sp, #4]
   13ab0:	movw	r2, #22468	; 0x57c4
   13ab4:	movt	r2, #1
   13ab8:	mov	r0, r8
   13abc:	mov	r1, #1
   13ac0:	mov	r3, r5
   13ac4:	b	13ae0 <__assert_fail@plt+0x2a10>
   13ac8:	str	r3, [sp]
   13acc:	movw	r2, #22480	; 0x57d0
   13ad0:	movt	r2, #1
   13ad4:	mov	r0, r8
   13ad8:	mov	r1, #1
   13adc:	mov	r3, r4
   13ae0:	bl	11040 <__fprintf_chk@plt>
   13ae4:	movw	r1, #22487	; 0x57d7
   13ae8:	movt	r1, #1
   13aec:	mov	r0, #0
   13af0:	mov	r2, #5
   13af4:	bl	10f08 <dcgettext@plt>
   13af8:	mov	r3, r0
   13afc:	movw	r0, #2022	; 0x7e6
   13b00:	str	r0, [sp]
   13b04:	movw	r2, #23205	; 0x5aa5
   13b08:	movt	r2, #1
   13b0c:	mov	r0, r8
   13b10:	mov	r1, #1
   13b14:	bl	11040 <__fprintf_chk@plt>
   13b18:	movw	r4, #21955	; 0x55c3
   13b1c:	movt	r4, #1
   13b20:	mov	r0, r4
   13b24:	mov	r1, r8
   13b28:	bl	10e6c <fputs_unlocked@plt>
   13b2c:	movw	r1, #22491	; 0x57db
   13b30:	movt	r1, #1
   13b34:	mov	r0, #0
   13b38:	mov	r2, #5
   13b3c:	bl	10f08 <dcgettext@plt>
   13b40:	mov	r2, r0
   13b44:	movw	r3, #22662	; 0x5886
   13b48:	movt	r3, #1
   13b4c:	mov	r0, r8
   13b50:	mov	r1, #1
   13b54:	bl	11040 <__fprintf_chk@plt>
   13b58:	mov	r0, r4
   13b5c:	mov	r1, r8
   13b60:	bl	10e6c <fputs_unlocked@plt>
   13b64:	cmp	r6, #9
   13b68:	bhi	13ba4 <__assert_fail@plt+0x2ad4>
   13b6c:	add	r0, pc, #0
   13b70:	ldr	pc, [r0, r6, lsl #2]
   13b74:	muleq	r1, ip, fp
   13b78:			; <UNDEFINED> instruction: 0x00013bb0
   13b7c:	andeq	r3, r1, r0, ror #23
   13b80:	andeq	r3, r1, r8, lsl #24
   13b84:	andeq	r3, r1, r0, lsr ip
   13b88:	andeq	r3, r1, r8, asr ip
   13b8c:	andeq	r3, r1, r0, lsl #25
   13b90:			; <UNDEFINED> instruction: 0x00013cb8
   13b94:	andeq	r3, r1, r8, asr sp
   13b98:	andeq	r3, r1, r0, lsl #26
   13b9c:	sub	sp, fp, #24
   13ba0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ba4:	movw	r1, #23015	; 0x59e7
   13ba8:	movt	r1, #1
   13bac:	b	13d08 <__assert_fail@plt+0x2c38>
   13bb0:	movw	r1, #22696	; 0x58a8
   13bb4:	movt	r1, #1
   13bb8:	mov	r0, #0
   13bbc:	mov	r2, #5
   13bc0:	bl	10f08 <dcgettext@plt>
   13bc4:	mov	r2, r0
   13bc8:	ldr	r3, [r7]
   13bcc:	mov	r0, r8
   13bd0:	mov	r1, #1
   13bd4:	sub	sp, fp, #24
   13bd8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13bdc:	b	11040 <__fprintf_chk@plt>
   13be0:	movw	r1, #22712	; 0x58b8
   13be4:	movt	r1, #1
   13be8:	mov	r0, #0
   13bec:	mov	r2, #5
   13bf0:	bl	10f08 <dcgettext@plt>
   13bf4:	mov	r2, r0
   13bf8:	ldr	r3, [r7]
   13bfc:	ldr	r0, [r7, #4]
   13c00:	str	r0, [sp]
   13c04:	b	13cf4 <__assert_fail@plt+0x2c24>
   13c08:	movw	r1, #22735	; 0x58cf
   13c0c:	movt	r1, #1
   13c10:	mov	r0, #0
   13c14:	mov	r2, #5
   13c18:	bl	10f08 <dcgettext@plt>
   13c1c:	mov	r2, r0
   13c20:	ldr	r3, [r7]
   13c24:	ldmib	r7, {r0, r1}
   13c28:	stm	sp, {r0, r1}
   13c2c:	b	13cf4 <__assert_fail@plt+0x2c24>
   13c30:	movw	r1, #22763	; 0x58eb
   13c34:	movt	r1, #1
   13c38:	mov	r0, #0
   13c3c:	mov	r2, #5
   13c40:	bl	10f08 <dcgettext@plt>
   13c44:	mov	r2, r0
   13c48:	ldr	r3, [r7]
   13c4c:	ldmib	r7, {r0, r1, r7}
   13c50:	stm	sp, {r0, r1, r7}
   13c54:	b	13cf4 <__assert_fail@plt+0x2c24>
   13c58:	movw	r1, #22795	; 0x590b
   13c5c:	movt	r1, #1
   13c60:	mov	r0, #0
   13c64:	mov	r2, #5
   13c68:	bl	10f08 <dcgettext@plt>
   13c6c:	mov	r2, r0
   13c70:	ldr	r3, [r7]
   13c74:	ldmib	r7, {r0, r1, r6, r7}
   13c78:	stm	sp, {r0, r1, r6, r7}
   13c7c:	b	13cf4 <__assert_fail@plt+0x2c24>
   13c80:	movw	r1, #22831	; 0x592f
   13c84:	movt	r1, #1
   13c88:	mov	r0, #0
   13c8c:	mov	r2, #5
   13c90:	bl	10f08 <dcgettext@plt>
   13c94:	mov	r2, r0
   13c98:	ldr	r3, [r7]
   13c9c:	ldmib	r7, {r0, r1, r6}
   13ca0:	ldr	r5, [r7, #16]
   13ca4:	ldr	r7, [r7, #20]
   13ca8:	stm	sp, {r0, r1, r6}
   13cac:	str	r5, [sp, #12]
   13cb0:	str	r7, [sp, #16]
   13cb4:	b	13cf4 <__assert_fail@plt+0x2c24>
   13cb8:	movw	r1, #22871	; 0x5957
   13cbc:	movt	r1, #1
   13cc0:	mov	r0, #0
   13cc4:	mov	r2, #5
   13cc8:	bl	10f08 <dcgettext@plt>
   13ccc:	mov	r2, r0
   13cd0:	ldr	r3, [r7]
   13cd4:	ldmib	r7, {r0, r1, r6}
   13cd8:	ldr	r5, [r7, #16]
   13cdc:	ldr	r4, [r7, #20]
   13ce0:	ldr	r7, [r7, #24]
   13ce4:	stm	sp, {r0, r1, r6}
   13ce8:	str	r5, [sp, #12]
   13cec:	str	r4, [sp, #16]
   13cf0:	str	r7, [sp, #20]
   13cf4:	mov	r0, r8
   13cf8:	mov	r1, #1
   13cfc:	b	13da8 <__assert_fail@plt+0x2cd8>
   13d00:	movw	r1, #22963	; 0x59b3
   13d04:	movt	r1, #1
   13d08:	mov	r0, #0
   13d0c:	mov	r2, #5
   13d10:	bl	10f08 <dcgettext@plt>
   13d14:	mov	ip, r0
   13d18:	ldr	r3, [r7]
   13d1c:	ldr	r0, [r7, #4]
   13d20:	ldr	r1, [r7, #8]
   13d24:	ldr	r6, [r7, #12]
   13d28:	ldr	r5, [r7, #16]
   13d2c:	ldr	r4, [r7, #20]
   13d30:	ldr	r2, [r7, #24]
   13d34:	ldr	lr, [r7, #28]
   13d38:	ldr	r7, [r7, #32]
   13d3c:	stm	sp, {r0, r1, r6}
   13d40:	str	r5, [sp, #12]
   13d44:	str	r4, [sp, #16]
   13d48:	str	r2, [sp, #20]
   13d4c:	str	lr, [sp, #24]
   13d50:	str	r7, [sp, #28]
   13d54:	b	13d9c <__assert_fail@plt+0x2ccc>
   13d58:	movw	r1, #22915	; 0x5983
   13d5c:	movt	r1, #1
   13d60:	mov	r0, #0
   13d64:	mov	r2, #5
   13d68:	bl	10f08 <dcgettext@plt>
   13d6c:	mov	ip, r0
   13d70:	ldr	r3, [r7]
   13d74:	ldmib	r7, {r0, r1, r6}
   13d78:	ldr	r5, [r7, #16]
   13d7c:	ldr	r4, [r7, #20]
   13d80:	ldr	r2, [r7, #24]
   13d84:	ldr	r7, [r7, #28]
   13d88:	stm	sp, {r0, r1, r6}
   13d8c:	str	r5, [sp, #12]
   13d90:	str	r4, [sp, #16]
   13d94:	str	r2, [sp, #20]
   13d98:	str	r7, [sp, #24]
   13d9c:	mov	r0, r8
   13da0:	mov	r1, #1
   13da4:	mov	r2, ip
   13da8:	bl	11040 <__fprintf_chk@plt>
   13dac:	sub	sp, fp, #24
   13db0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13db4:	push	{r4, sl, fp, lr}
   13db8:	add	fp, sp, #8
   13dbc:	sub	sp, sp, #8
   13dc0:	mov	lr, #0
   13dc4:	ldr	ip, [fp, #8]
   13dc8:	ldr	r4, [ip, lr, lsl #2]
   13dcc:	add	lr, lr, #1
   13dd0:	cmp	r4, #0
   13dd4:	bne	13dc8 <__assert_fail@plt+0x2cf8>
   13dd8:	sub	r4, lr, #1
   13ddc:	str	ip, [sp]
   13de0:	str	r4, [sp, #4]
   13de4:	bl	13a80 <__assert_fail@plt+0x29b0>
   13de8:	sub	sp, fp, #8
   13dec:	pop	{r4, sl, fp, pc}
   13df0:	push	{r4, r5, fp, lr}
   13df4:	add	fp, sp, #8
   13df8:	sub	sp, sp, #48	; 0x30
   13dfc:	mov	ip, #0
   13e00:	ldr	r4, [fp, #8]
   13e04:	add	lr, sp, #8
   13e08:	ldr	r5, [r4]
   13e0c:	str	r5, [lr, ip, lsl #2]
   13e10:	cmp	r5, #0
   13e14:	beq	13e28 <__assert_fail@plt+0x2d58>
   13e18:	add	ip, ip, #1
   13e1c:	add	r4, r4, #4
   13e20:	cmp	ip, #10
   13e24:	bcc	13e08 <__assert_fail@plt+0x2d38>
   13e28:	str	lr, [sp]
   13e2c:	str	ip, [sp, #4]
   13e30:	bl	13a80 <__assert_fail@plt+0x29b0>
   13e34:	sub	sp, fp, #8
   13e38:	pop	{r4, r5, fp, pc}
   13e3c:	push	{fp, lr}
   13e40:	mov	fp, sp
   13e44:	sub	sp, sp, #8
   13e48:	add	ip, fp, #8
   13e4c:	str	ip, [sp, #4]
   13e50:	str	ip, [sp]
   13e54:	bl	13df0 <__assert_fail@plt+0x2d20>
   13e58:	mov	sp, fp
   13e5c:	pop	{fp, pc}
   13e60:	push	{fp, lr}
   13e64:	mov	fp, sp
   13e68:	movw	r0, #24916	; 0x6154
   13e6c:	movt	r0, #2
   13e70:	ldr	r1, [r0]
   13e74:	movw	r0, #21955	; 0x55c3
   13e78:	movt	r0, #1
   13e7c:	bl	10e6c <fputs_unlocked@plt>
   13e80:	movw	r1, #23075	; 0x5a23
   13e84:	movt	r1, #1
   13e88:	mov	r0, #0
   13e8c:	mov	r2, #5
   13e90:	bl	10f08 <dcgettext@plt>
   13e94:	mov	r1, r0
   13e98:	movw	r2, #23095	; 0x5a37
   13e9c:	movt	r2, #1
   13ea0:	mov	r0, #1
   13ea4:	bl	1101c <__printf_chk@plt>
   13ea8:	movw	r1, #23117	; 0x5a4d
   13eac:	movt	r1, #1
   13eb0:	mov	r0, #0
   13eb4:	mov	r2, #5
   13eb8:	bl	10f08 <dcgettext@plt>
   13ebc:	mov	r1, r0
   13ec0:	movw	r2, #21485	; 0x53ed
   13ec4:	movt	r2, #1
   13ec8:	movw	r3, #21764	; 0x5504
   13ecc:	movt	r3, #1
   13ed0:	mov	r0, #1
   13ed4:	bl	1101c <__printf_chk@plt>
   13ed8:	movw	r1, #23137	; 0x5a61
   13edc:	movt	r1, #1
   13ee0:	mov	r0, #0
   13ee4:	mov	r2, #5
   13ee8:	bl	10f08 <dcgettext@plt>
   13eec:	mov	r1, r0
   13ef0:	movw	r2, #23176	; 0x5a88
   13ef4:	movt	r2, #1
   13ef8:	mov	r0, #1
   13efc:	pop	{fp, lr}
   13f00:	b	1101c <__printf_chk@plt>
   13f04:	b	13f08 <__assert_fail@plt+0x2e38>
   13f08:	push	{r4, r5, r6, sl, fp, lr}
   13f0c:	add	fp, sp, #16
   13f10:	mov	r4, r2
   13f14:	mov	r5, r1
   13f18:	mov	r6, r0
   13f1c:	bl	14ef8 <__assert_fail@plt+0x3e28>
   13f20:	cmp	r0, #0
   13f24:	popne	{r4, r5, r6, sl, fp, pc}
   13f28:	cmp	r6, #0
   13f2c:	beq	13f40 <__assert_fail@plt+0x2e70>
   13f30:	cmp	r5, #0
   13f34:	cmpne	r4, #0
   13f38:	bne	13f40 <__assert_fail@plt+0x2e70>
   13f3c:	pop	{r4, r5, r6, sl, fp, pc}
   13f40:	bl	142f4 <__assert_fail@plt+0x3224>
   13f44:	push	{fp, lr}
   13f48:	mov	fp, sp
   13f4c:	bl	149b8 <__assert_fail@plt+0x38e8>
   13f50:	bl	13f58 <__assert_fail@plt+0x2e88>
   13f54:	pop	{fp, pc}
   13f58:	cmp	r0, #0
   13f5c:	bxne	lr
   13f60:	push	{fp, lr}
   13f64:	mov	fp, sp
   13f68:	bl	142f4 <__assert_fail@plt+0x3224>
   13f6c:	push	{fp, lr}
   13f70:	mov	fp, sp
   13f74:	bl	14e2c <__assert_fail@plt+0x3d5c>
   13f78:	bl	13f58 <__assert_fail@plt+0x2e88>
   13f7c:	pop	{fp, pc}
   13f80:	b	13f44 <__assert_fail@plt+0x2e74>
   13f84:	push	{r4, r5, fp, lr}
   13f88:	add	fp, sp, #8
   13f8c:	mov	r4, r1
   13f90:	mov	r5, r0
   13f94:	bl	149e8 <__assert_fail@plt+0x3918>
   13f98:	cmp	r0, #0
   13f9c:	popne	{r4, r5, fp, pc}
   13fa0:	cmp	r5, #0
   13fa4:	beq	13fb4 <__assert_fail@plt+0x2ee4>
   13fa8:	cmp	r4, #0
   13fac:	bne	13fb4 <__assert_fail@plt+0x2ee4>
   13fb0:	pop	{r4, r5, fp, pc}
   13fb4:	bl	142f4 <__assert_fail@plt+0x3224>
   13fb8:	push	{fp, lr}
   13fbc:	mov	fp, sp
   13fc0:	bl	14e30 <__assert_fail@plt+0x3d60>
   13fc4:	bl	13f58 <__assert_fail@plt+0x2e88>
   13fc8:	pop	{fp, pc}
   13fcc:	push	{fp, lr}
   13fd0:	mov	fp, sp
   13fd4:	bl	14e40 <__assert_fail@plt+0x3d70>
   13fd8:	bl	13f58 <__assert_fail@plt+0x2e88>
   13fdc:	pop	{fp, pc}
   13fe0:	push	{fp, lr}
   13fe4:	mov	fp, sp
   13fe8:	mov	r2, r1
   13fec:	mov	r1, r0
   13ff0:	mov	r0, #0
   13ff4:	bl	13f08 <__assert_fail@plt+0x2e38>
   13ff8:	pop	{fp, pc}
   13ffc:	mov	r2, r1
   14000:	mov	r1, r0
   14004:	mov	r0, #0
   14008:	b	13fcc <__assert_fail@plt+0x2efc>
   1400c:	mov	r2, #1
   14010:	b	14014 <__assert_fail@plt+0x2f44>
   14014:	push	{r4, r5, fp, lr}
   14018:	add	fp, sp, #8
   1401c:	mov	r4, r1
   14020:	ldr	r5, [r1]
   14024:	cmp	r0, #0
   14028:	beq	14040 <__assert_fail@plt+0x2f70>
   1402c:	mov	r1, #1
   14030:	add	r1, r1, r5, lsr #1
   14034:	adds	r5, r5, r1
   14038:	bcc	14058 <__assert_fail@plt+0x2f88>
   1403c:	bl	142f4 <__assert_fail@plt+0x3224>
   14040:	cmp	r5, #0
   14044:	bne	14058 <__assert_fail@plt+0x2f88>
   14048:	mov	r1, #64	; 0x40
   1404c:	udiv	r5, r1, r2
   14050:	cmp	r2, #64	; 0x40
   14054:	addhi	r5, r5, #1
   14058:	mov	r1, r5
   1405c:	bl	13f08 <__assert_fail@plt+0x2e38>
   14060:	str	r5, [r4]
   14064:	pop	{r4, r5, fp, pc}
   14068:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1406c:	add	fp, sp, #24
   14070:	mov	r8, r1
   14074:	ldr	r6, [r1]
   14078:	add	r1, r6, r6, asr #1
   1407c:	cmp	r1, r6
   14080:	mvnvs	r1, #-2147483648	; 0x80000000
   14084:	cmp	r1, r3
   14088:	mov	r5, r1
   1408c:	movgt	r5, r3
   14090:	cmn	r3, #1
   14094:	movle	r5, r1
   14098:	ldr	r4, [fp, #8]
   1409c:	cmn	r4, #1
   140a0:	ble	140c8 <__assert_fail@plt+0x2ff8>
   140a4:	cmp	r4, #0
   140a8:	beq	1411c <__assert_fail@plt+0x304c>
   140ac:	cmn	r5, #1
   140b0:	ble	140f0 <__assert_fail@plt+0x3020>
   140b4:	mvn	r7, #-2147483648	; 0x80000000
   140b8:	udiv	r1, r7, r4
   140bc:	cmp	r1, r5
   140c0:	bge	1411c <__assert_fail@plt+0x304c>
   140c4:	b	1412c <__assert_fail@plt+0x305c>
   140c8:	cmn	r5, #1
   140cc:	ble	1410c <__assert_fail@plt+0x303c>
   140d0:	cmn	r4, #1
   140d4:	beq	1411c <__assert_fail@plt+0x304c>
   140d8:	mov	r1, #-2147483648	; 0x80000000
   140dc:	sdiv	r1, r1, r4
   140e0:	mvn	r7, #-2147483648	; 0x80000000
   140e4:	cmp	r1, r5
   140e8:	bge	1411c <__assert_fail@plt+0x304c>
   140ec:	b	1412c <__assert_fail@plt+0x305c>
   140f0:	beq	1411c <__assert_fail@plt+0x304c>
   140f4:	mov	r1, #-2147483648	; 0x80000000
   140f8:	sdiv	r1, r1, r5
   140fc:	mvn	r7, #-2147483648	; 0x80000000
   14100:	cmp	r1, r4
   14104:	bge	1411c <__assert_fail@plt+0x304c>
   14108:	b	1412c <__assert_fail@plt+0x305c>
   1410c:	mvn	r7, #-2147483648	; 0x80000000
   14110:	sdiv	r1, r7, r4
   14114:	cmp	r5, r1
   14118:	blt	1412c <__assert_fail@plt+0x305c>
   1411c:	mul	r1, r5, r4
   14120:	mov	r7, #64	; 0x40
   14124:	cmp	r1, #63	; 0x3f
   14128:	bgt	14134 <__assert_fail@plt+0x3064>
   1412c:	sdiv	r5, r7, r4
   14130:	mul	r1, r5, r4
   14134:	cmp	r0, #0
   14138:	moveq	r7, #0
   1413c:	streq	r7, [r8]
   14140:	sub	r7, r5, r6
   14144:	cmp	r7, r2
   14148:	bge	141f4 <__assert_fail@plt+0x3124>
   1414c:	add	r5, r6, r2
   14150:	mov	r1, #0
   14154:	cmp	r5, r3
   14158:	mov	r2, #0
   1415c:	movwgt	r2, #1
   14160:	cmn	r3, #1
   14164:	movwgt	r1, #1
   14168:	cmp	r5, r6
   1416c:	bvs	141dc <__assert_fail@plt+0x310c>
   14170:	ands	r1, r1, r2
   14174:	bne	141dc <__assert_fail@plt+0x310c>
   14178:	cmn	r4, #1
   1417c:	ble	141a4 <__assert_fail@plt+0x30d4>
   14180:	cmp	r4, #0
   14184:	beq	141f0 <__assert_fail@plt+0x3120>
   14188:	cmn	r5, #1
   1418c:	ble	141c8 <__assert_fail@plt+0x30f8>
   14190:	mvn	r1, #-2147483648	; 0x80000000
   14194:	udiv	r1, r1, r4
   14198:	cmp	r1, r5
   1419c:	bge	141f0 <__assert_fail@plt+0x3120>
   141a0:	b	141dc <__assert_fail@plt+0x310c>
   141a4:	cmn	r5, #1
   141a8:	ble	141e0 <__assert_fail@plt+0x3110>
   141ac:	cmn	r4, #1
   141b0:	beq	141f0 <__assert_fail@plt+0x3120>
   141b4:	mov	r1, #-2147483648	; 0x80000000
   141b8:	sdiv	r1, r1, r4
   141bc:	cmp	r1, r5
   141c0:	bge	141f0 <__assert_fail@plt+0x3120>
   141c4:	b	141dc <__assert_fail@plt+0x310c>
   141c8:	beq	141f0 <__assert_fail@plt+0x3120>
   141cc:	mov	r1, #-2147483648	; 0x80000000
   141d0:	sdiv	r1, r1, r5
   141d4:	cmp	r1, r4
   141d8:	bge	141f0 <__assert_fail@plt+0x3120>
   141dc:	bl	142f4 <__assert_fail@plt+0x3224>
   141e0:	mvn	r1, #-2147483648	; 0x80000000
   141e4:	sdiv	r1, r1, r4
   141e8:	cmp	r5, r1
   141ec:	blt	141dc <__assert_fail@plt+0x310c>
   141f0:	mul	r1, r5, r4
   141f4:	bl	13f84 <__assert_fail@plt+0x2eb4>
   141f8:	str	r5, [r8]
   141fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14200:	mov	r1, #1
   14204:	b	14208 <__assert_fail@plt+0x3138>
   14208:	push	{fp, lr}
   1420c:	mov	fp, sp
   14210:	bl	14964 <__assert_fail@plt+0x3894>
   14214:	bl	13f58 <__assert_fail@plt+0x2e88>
   14218:	pop	{fp, pc}
   1421c:	mov	r1, #1
   14220:	b	14224 <__assert_fail@plt+0x3154>
   14224:	push	{fp, lr}
   14228:	mov	fp, sp
   1422c:	bl	14e3c <__assert_fail@plt+0x3d6c>
   14230:	bl	13f58 <__assert_fail@plt+0x2e88>
   14234:	pop	{fp, pc}
   14238:	push	{r4, r5, r6, sl, fp, lr}
   1423c:	add	fp, sp, #16
   14240:	mov	r4, r1
   14244:	mov	r5, r0
   14248:	mov	r0, r1
   1424c:	bl	13f44 <__assert_fail@plt+0x2e74>
   14250:	mov	r6, r0
   14254:	mov	r1, r5
   14258:	mov	r2, r4
   1425c:	bl	10ecc <memcpy@plt>
   14260:	mov	r0, r6
   14264:	pop	{r4, r5, r6, sl, fp, pc}
   14268:	push	{r4, r5, r6, sl, fp, lr}
   1426c:	add	fp, sp, #16
   14270:	mov	r4, r1
   14274:	mov	r5, r0
   14278:	mov	r0, r1
   1427c:	bl	13f6c <__assert_fail@plt+0x2e9c>
   14280:	mov	r6, r0
   14284:	mov	r1, r5
   14288:	mov	r2, r4
   1428c:	bl	10ecc <memcpy@plt>
   14290:	mov	r0, r6
   14294:	pop	{r4, r5, r6, sl, fp, pc}
   14298:	push	{r4, r5, r6, sl, fp, lr}
   1429c:	add	fp, sp, #16
   142a0:	mov	r4, r1
   142a4:	mov	r5, r0
   142a8:	add	r0, r1, #1
   142ac:	bl	13f6c <__assert_fail@plt+0x2e9c>
   142b0:	mov	r6, r0
   142b4:	mov	r0, #0
   142b8:	strb	r0, [r6, r4]
   142bc:	mov	r0, r6
   142c0:	mov	r1, r5
   142c4:	mov	r2, r4
   142c8:	bl	10ecc <memcpy@plt>
   142cc:	mov	r0, r6
   142d0:	pop	{r4, r5, r6, sl, fp, pc}
   142d4:	push	{r4, sl, fp, lr}
   142d8:	add	fp, sp, #8
   142dc:	mov	r4, r0
   142e0:	bl	10fe0 <strlen@plt>
   142e4:	add	r1, r0, #1
   142e8:	mov	r0, r4
   142ec:	pop	{r4, sl, fp, lr}
   142f0:	b	14238 <__assert_fail@plt+0x3168>
   142f4:	push	{fp, lr}
   142f8:	mov	fp, sp
   142fc:	movw	r0, #24820	; 0x60f4
   14300:	movt	r0, #2
   14304:	ldr	r4, [r0]
   14308:	movw	r1, #23252	; 0x5ad4
   1430c:	movt	r1, #1
   14310:	mov	r0, #0
   14314:	mov	r2, #5
   14318:	bl	10f08 <dcgettext@plt>
   1431c:	mov	r3, r0
   14320:	movw	r2, #22215	; 0x56c7
   14324:	movt	r2, #1
   14328:	mov	r0, r4
   1432c:	mov	r1, #0
   14330:	bl	10f80 <error@plt>
   14334:	bl	110b8 <abort@plt>
   14338:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1433c:	add	fp, sp, #24
   14340:	sub	sp, sp, #16
   14344:	mov	r5, r3
   14348:	mov	r6, r2
   1434c:	mov	r2, r1
   14350:	mov	r8, r0
   14354:	ldr	r0, [fp, #16]
   14358:	str	r0, [sp]
   1435c:	add	r3, sp, #8
   14360:	mov	r0, r8
   14364:	mov	r1, #0
   14368:	bl	14430 <__assert_fail@plt+0x3360>
   1436c:	cmp	r0, #0
   14370:	bne	14400 <__assert_fail@plt+0x3330>
   14374:	ldr	r7, [sp, #8]
   14378:	ldr	r4, [sp, #12]
   1437c:	subs	r0, r7, r6
   14380:	sbcs	r0, r4, r5
   14384:	bcc	143a8 <__assert_fail@plt+0x32d8>
   14388:	ldr	r0, [fp, #12]
   1438c:	ldr	r1, [fp, #8]
   14390:	subs	r1, r1, r7
   14394:	sbcs	r0, r0, r4
   14398:	ldrcs	r0, [sp, #8]
   1439c:	ldrcs	r1, [sp, #12]
   143a0:	subcs	sp, fp, #24
   143a4:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   143a8:	bl	10ff8 <__errno_location@plt>
   143ac:	subs	r1, r7, #1073741824	; 0x40000000
   143b0:	sbcs	r1, r4, #0
   143b4:	movcc	r1, #34	; 0x22
   143b8:	movcs	r1, #75	; 0x4b
   143bc:	str	r1, [r0]
   143c0:	ldr	r5, [fp, #24]
   143c4:	ldr	r6, [fp, #20]
   143c8:	bl	10ff8 <__errno_location@plt>
   143cc:	ldr	r4, [r0]
   143d0:	mov	r0, r8
   143d4:	bl	1366c <__assert_fail@plt+0x259c>
   143d8:	str	r0, [sp]
   143dc:	subs	r1, r4, #22
   143e0:	movne	r1, r4
   143e4:	cmp	r5, #0
   143e8:	movweq	r5, #1
   143ec:	movw	r2, #22211	; 0x56c3
   143f0:	movt	r2, #1
   143f4:	mov	r0, r5
   143f8:	mov	r3, r6
   143fc:	bl	10f80 <error@plt>
   14400:	cmp	r0, #1
   14404:	beq	1441c <__assert_fail@plt+0x334c>
   14408:	cmp	r0, #3
   1440c:	bne	143c0 <__assert_fail@plt+0x32f0>
   14410:	bl	10ff8 <__errno_location@plt>
   14414:	mov	r1, #0
   14418:	b	143bc <__assert_fail@plt+0x32ec>
   1441c:	bl	10ff8 <__errno_location@plt>
   14420:	mov	r1, #75	; 0x4b
   14424:	b	143bc <__assert_fail@plt+0x32ec>
   14428:	mov	r1, #10
   1442c:	b	14338 <__assert_fail@plt+0x3268>
   14430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14434:	add	fp, sp, #28
   14438:	sub	sp, sp, #20
   1443c:	cmp	r2, #37	; 0x25
   14440:	bcs	14870 <__assert_fail@plt+0x37a0>
   14444:	mov	r5, r2
   14448:	mov	r6, r1
   1444c:	mov	r4, r0
   14450:	str	r3, [sp, #4]
   14454:	ldr	sl, [fp, #8]
   14458:	bl	10ff8 <__errno_location@plt>
   1445c:	mov	r7, r0
   14460:	mov	r0, #0
   14464:	str	r0, [r7]
   14468:	bl	10fc8 <__ctype_b_loc@plt>
   1446c:	ldr	r1, [r0]
   14470:	mov	r2, r4
   14474:	ldrb	r0, [r2], #1
   14478:	add	r3, r1, r0, lsl #1
   1447c:	ldrb	r3, [r3, #1]
   14480:	tst	r3, #32
   14484:	bne	14474 <__assert_fail@plt+0x33a4>
   14488:	add	r9, sp, #16
   1448c:	cmp	r6, #0
   14490:	movne	r9, r6
   14494:	mov	r8, #4
   14498:	cmp	r0, #45	; 0x2d
   1449c:	beq	14864 <__assert_fail@plt+0x3794>
   144a0:	mov	r0, r4
   144a4:	mov	r1, r9
   144a8:	mov	r2, r5
   144ac:	bl	11034 <strtoumax@plt>
   144b0:	str	r1, [sp, #12]
   144b4:	str	r0, [sp, #8]
   144b8:	ldr	r6, [r9]
   144bc:	cmp	r6, r4
   144c0:	beq	144e8 <__assert_fail@plt+0x3418>
   144c4:	ldr	r0, [r7]
   144c8:	cmp	r0, #0
   144cc:	beq	1451c <__assert_fail@plt+0x344c>
   144d0:	cmp	r0, #34	; 0x22
   144d4:	bne	14864 <__assert_fail@plt+0x3794>
   144d8:	mov	r8, #1
   144dc:	cmp	sl, #0
   144e0:	bne	14528 <__assert_fail@plt+0x3458>
   144e4:	b	14854 <__assert_fail@plt+0x3784>
   144e8:	cmp	sl, #0
   144ec:	ldrbne	r1, [r6]
   144f0:	cmpne	r1, #0
   144f4:	beq	14864 <__assert_fail@plt+0x3794>
   144f8:	mov	r0, sl
   144fc:	bl	10fec <strchr@plt>
   14500:	cmp	r0, #0
   14504:	beq	14864 <__assert_fail@plt+0x3794>
   14508:	mov	r8, #0
   1450c:	str	r8, [sp, #12]
   14510:	mov	r0, #1
   14514:	str	r0, [sp, #8]
   14518:	b	14528 <__assert_fail@plt+0x3458>
   1451c:	mov	r8, r0
   14520:	cmp	sl, #0
   14524:	beq	14854 <__assert_fail@plt+0x3784>
   14528:	ldrb	r4, [r6]
   1452c:	cmp	r4, #0
   14530:	beq	14854 <__assert_fail@plt+0x3784>
   14534:	mov	r0, sl
   14538:	mov	r1, r4
   1453c:	bl	10fec <strchr@plt>
   14540:	cmp	r0, #0
   14544:	beq	14754 <__assert_fail@plt+0x3684>
   14548:	sub	r0, r4, #69	; 0x45
   1454c:	mov	r7, #1
   14550:	mov	r5, #1024	; 0x400
   14554:	cmp	r0, #47	; 0x2f
   14558:	bhi	14650 <__assert_fail@plt+0x3580>
   1455c:	add	r1, pc, #0
   14560:	ldr	pc, [r1, r0, lsl #2]
   14564:	andeq	r4, r1, r4, lsr #12
   14568:	andeq	r4, r1, r0, asr r6
   1456c:	andeq	r4, r1, r4, lsr #12
   14570:	andeq	r4, r1, r0, asr r6
   14574:	andeq	r4, r1, r0, asr r6
   14578:	andeq	r4, r1, r0, asr r6
   1457c:	andeq	r4, r1, r4, lsr #12
   14580:	andeq	r4, r1, r0, asr r6
   14584:	andeq	r4, r1, r4, lsr #12
   14588:	andeq	r4, r1, r0, asr r6
   1458c:	andeq	r4, r1, r0, asr r6
   14590:	andeq	r4, r1, r4, lsr #12
   14594:	andeq	r4, r1, r0, asr r6
   14598:	andeq	r4, r1, r0, asr r6
   1459c:	andeq	r4, r1, r0, asr r6
   145a0:	andeq	r4, r1, r4, lsr #12
   145a4:	andeq	r4, r1, r0, asr r6
   145a8:	andeq	r4, r1, r0, asr r6
   145ac:	andeq	r4, r1, r0, asr r6
   145b0:	andeq	r4, r1, r0, asr r6
   145b4:	andeq	r4, r1, r4, lsr #12
   145b8:	andeq	r4, r1, r4, lsr #12
   145bc:	andeq	r4, r1, r0, asr r6
   145c0:	andeq	r4, r1, r0, asr r6
   145c4:	andeq	r4, r1, r0, asr r6
   145c8:	andeq	r4, r1, r0, asr r6
   145cc:	andeq	r4, r1, r0, asr r6
   145d0:	andeq	r4, r1, r0, asr r6
   145d4:	andeq	r4, r1, r0, asr r6
   145d8:	andeq	r4, r1, r0, asr r6
   145dc:	andeq	r4, r1, r0, asr r6
   145e0:	andeq	r4, r1, r0, asr r6
   145e4:	andeq	r4, r1, r0, asr r6
   145e8:	andeq	r4, r1, r0, asr r6
   145ec:	andeq	r4, r1, r4, lsr #12
   145f0:	andeq	r4, r1, r0, asr r6
   145f4:	andeq	r4, r1, r0, asr r6
   145f8:	andeq	r4, r1, r0, asr r6
   145fc:	andeq	r4, r1, r4, lsr #12
   14600:	andeq	r4, r1, r0, asr r6
   14604:	andeq	r4, r1, r4, lsr #12
   14608:	andeq	r4, r1, r0, asr r6
   1460c:	andeq	r4, r1, r0, asr r6
   14610:	andeq	r4, r1, r0, asr r6
   14614:	andeq	r4, r1, r0, asr r6
   14618:	andeq	r4, r1, r0, asr r6
   1461c:	andeq	r4, r1, r0, asr r6
   14620:	andeq	r4, r1, r4, lsr #12
   14624:	mov	r0, sl
   14628:	mov	r1, #48	; 0x30
   1462c:	bl	10fec <strchr@plt>
   14630:	cmp	r0, #0
   14634:	beq	14650 <__assert_fail@plt+0x3580>
   14638:	ldrb	r0, [r6, #1]
   1463c:	cmp	r0, #66	; 0x42
   14640:	cmpne	r0, #68	; 0x44
   14644:	bne	1476c <__assert_fail@plt+0x369c>
   14648:	mov	r7, #2
   1464c:	mov	r5, #1000	; 0x3e8
   14650:	sub	r1, r4, #66	; 0x42
   14654:	cmp	r1, #53	; 0x35
   14658:	bhi	14754 <__assert_fail@plt+0x3684>
   1465c:	mov	r0, #0
   14660:	add	r2, pc, #0
   14664:	ldr	pc, [r2, r1, lsl #2]
   14668:	ldrdeq	r4, [r1], -r8
   1466c:	andeq	r4, r1, r4, asr r7
   14670:	andeq	r4, r1, r4, asr r7
   14674:	andeq	r4, r1, r4, ror #15
   14678:	andeq	r4, r1, r4, asr r7
   1467c:	andeq	r4, r1, r0, asr #14
   14680:	andeq	r4, r1, r4, asr r7
   14684:	andeq	r4, r1, r4, asr r7
   14688:	andeq	r4, r1, r4, asr r7
   1468c:	andeq	r4, r1, r8, lsl #15
   14690:	andeq	r4, r1, r4, asr r7
   14694:	muleq	r1, ip, r7
   14698:	andeq	r4, r1, r4, asr r7
   1469c:	andeq	r4, r1, r4, asr r7
   146a0:	strdeq	r4, [r1], -r8
   146a4:	andeq	r4, r1, r4, asr r7
   146a8:	andeq	r4, r1, r4, asr r7
   146ac:	andeq	r4, r1, r4, asr r7
   146b0:			; <UNDEFINED> instruction: 0x000147b0
   146b4:	andeq	r4, r1, r4, asr r7
   146b8:	andeq	r4, r1, r4, asr r7
   146bc:	andeq	r4, r1, r4, asr r7
   146c0:	andeq	r4, r1, r4, asr r7
   146c4:	andeq	r4, r1, ip, lsl #16
   146c8:	andeq	r4, r1, r4, asr #15
   146cc:	andeq	r4, r1, r4, asr r7
   146d0:	andeq	r4, r1, r4, asr r7
   146d4:	andeq	r4, r1, r4, asr r7
   146d8:	andeq	r4, r1, r4, asr r7
   146dc:	andeq	r4, r1, r4, asr r7
   146e0:	andeq	r4, r1, r4, asr r7
   146e4:	andeq	r4, r1, r4, asr r7
   146e8:	andeq	r4, r1, r0, lsr #16
   146ec:	andeq	r4, r1, r8, lsr r8
   146f0:	andeq	r4, r1, r4, asr r7
   146f4:	andeq	r4, r1, r4, asr r7
   146f8:	andeq	r4, r1, r4, asr r7
   146fc:	andeq	r4, r1, r0, asr #14
   14700:	andeq	r4, r1, r4, asr r7
   14704:	andeq	r4, r1, r4, asr r7
   14708:	andeq	r4, r1, r4, asr r7
   1470c:	andeq	r4, r1, r8, lsl #15
   14710:	andeq	r4, r1, r4, asr r7
   14714:	muleq	r1, ip, r7
   14718:	andeq	r4, r1, r4, asr r7
   1471c:	andeq	r4, r1, r4, asr r7
   14720:	andeq	r4, r1, r4, asr r7
   14724:	andeq	r4, r1, r4, asr r7
   14728:	andeq	r4, r1, r4, asr r7
   1472c:	andeq	r4, r1, r4, asr r7
   14730:			; <UNDEFINED> instruction: 0x000147b0
   14734:	andeq	r4, r1, r4, asr r7
   14738:	andeq	r4, r1, r4, asr r7
   1473c:	andeq	r4, r1, ip, lsr #16
   14740:	add	r0, sp, #8
   14744:	mov	r1, r5
   14748:	mov	r2, #3
   1474c:	bl	1491c <__assert_fail@plt+0x384c>
   14750:	b	14838 <__assert_fail@plt+0x3768>
   14754:	ldr	r0, [sp, #8]
   14758:	ldr	r1, [sp, #12]
   1475c:	ldr	r2, [sp, #4]
   14760:	strd	r0, [r2]
   14764:	orr	r8, r8, #2
   14768:	b	14864 <__assert_fail@plt+0x3794>
   1476c:	cmp	r0, #105	; 0x69
   14770:	bne	14650 <__assert_fail@plt+0x3580>
   14774:	ldrb	r0, [r6, #2]
   14778:	mov	r7, #1
   1477c:	cmp	r0, #66	; 0x42
   14780:	movweq	r7, #3
   14784:	b	14650 <__assert_fail@plt+0x3580>
   14788:	add	r0, sp, #8
   1478c:	mov	r1, r5
   14790:	mov	r2, #1
   14794:	bl	1491c <__assert_fail@plt+0x384c>
   14798:	b	14838 <__assert_fail@plt+0x3768>
   1479c:	add	r0, sp, #8
   147a0:	mov	r1, r5
   147a4:	mov	r2, #2
   147a8:	bl	1491c <__assert_fail@plt+0x384c>
   147ac:	b	14838 <__assert_fail@plt+0x3768>
   147b0:	add	r0, sp, #8
   147b4:	mov	r1, r5
   147b8:	mov	r2, #4
   147bc:	bl	1491c <__assert_fail@plt+0x384c>
   147c0:	b	14838 <__assert_fail@plt+0x3768>
   147c4:	add	r0, sp, #8
   147c8:	mov	r1, r5
   147cc:	mov	r2, #7
   147d0:	bl	1491c <__assert_fail@plt+0x384c>
   147d4:	b	14838 <__assert_fail@plt+0x3768>
   147d8:	add	r0, sp, #8
   147dc:	mov	r1, #1024	; 0x400
   147e0:	b	14834 <__assert_fail@plt+0x3764>
   147e4:	add	r0, sp, #8
   147e8:	mov	r1, r5
   147ec:	mov	r2, #6
   147f0:	bl	1491c <__assert_fail@plt+0x384c>
   147f4:	b	14838 <__assert_fail@plt+0x3768>
   147f8:	add	r0, sp, #8
   147fc:	mov	r1, r5
   14800:	mov	r2, #5
   14804:	bl	1491c <__assert_fail@plt+0x384c>
   14808:	b	14838 <__assert_fail@plt+0x3768>
   1480c:	add	r0, sp, #8
   14810:	mov	r1, r5
   14814:	mov	r2, #8
   14818:	bl	1491c <__assert_fail@plt+0x384c>
   1481c:	b	14838 <__assert_fail@plt+0x3768>
   14820:	add	r0, sp, #8
   14824:	mov	r1, #512	; 0x200
   14828:	b	14834 <__assert_fail@plt+0x3764>
   1482c:	add	r0, sp, #8
   14830:	mov	r1, #2
   14834:	bl	14890 <__assert_fail@plt+0x37c0>
   14838:	ldr	r1, [r9]
   1483c:	add	r2, r1, r7
   14840:	str	r2, [r9]
   14844:	ldrb	r1, [r1, r7]
   14848:	orr	r8, r0, r8
   1484c:	cmp	r1, #0
   14850:	orrne	r8, r8, #2
   14854:	ldr	r0, [sp, #8]
   14858:	ldr	r1, [sp, #12]
   1485c:	ldr	r2, [sp, #4]
   14860:	strd	r0, [r2]
   14864:	mov	r0, r8
   14868:	sub	sp, fp, #28
   1486c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14870:	movw	r0, #23269	; 0x5ae5
   14874:	movt	r0, #1
   14878:	movw	r1, #23307	; 0x5b0b
   1487c:	movt	r1, #1
   14880:	movw	r3, #23323	; 0x5b1b
   14884:	movt	r3, #1
   14888:	mov	r2, #85	; 0x55
   1488c:	bl	110d0 <__assert_fail@plt>
   14890:	push	{r4, r5, r6, r7, fp, lr}
   14894:	add	fp, sp, #16
   14898:	mov	r5, r1
   1489c:	mov	r4, r0
   148a0:	cmn	r1, #1
   148a4:	ble	148dc <__assert_fail@plt+0x380c>
   148a8:	cmp	r5, #0
   148ac:	beq	148fc <__assert_fail@plt+0x382c>
   148b0:	asr	r3, r5, #31
   148b4:	mvn	r6, #0
   148b8:	mvn	r0, #0
   148bc:	mvn	r1, #0
   148c0:	mov	r2, r5
   148c4:	bl	15040 <__assert_fail@plt+0x3f70>
   148c8:	ldrd	r2, [r4]
   148cc:	subs	r0, r0, r2
   148d0:	sbcs	r0, r1, r3
   148d4:	bcc	148ec <__assert_fail@plt+0x381c>
   148d8:	b	148fc <__assert_fail@plt+0x382c>
   148dc:	ldrd	r0, [r4]
   148e0:	orrs	r0, r0, r1
   148e4:	beq	148fc <__assert_fail@plt+0x382c>
   148e8:	mvn	r6, #0
   148ec:	mov	r0, #1
   148f0:	mvn	r7, #0
   148f4:	strd	r6, [r4]
   148f8:	pop	{r4, r5, r6, r7, fp, pc}
   148fc:	ldrd	r0, [r4]
   14900:	umull	r6, r2, r0, r5
   14904:	asr	r3, r5, #31
   14908:	mla	r0, r0, r3, r2
   1490c:	mla	r7, r1, r5, r0
   14910:	mov	r0, #0
   14914:	strd	r6, [r4]
   14918:	pop	{r4, r5, r6, r7, fp, pc}
   1491c:	push	{r4, r5, r6, r7, fp, lr}
   14920:	add	fp, sp, #16
   14924:	cmp	r2, #0
   14928:	moveq	r6, #0
   1492c:	moveq	r0, r6
   14930:	popeq	{r4, r5, r6, r7, fp, pc}
   14934:	mov	r4, r2
   14938:	mov	r5, r1
   1493c:	mov	r7, r0
   14940:	mov	r6, #0
   14944:	mov	r0, r7
   14948:	mov	r1, r5
   1494c:	bl	14890 <__assert_fail@plt+0x37c0>
   14950:	orr	r6, r0, r6
   14954:	subs	r4, r4, #1
   14958:	bne	14944 <__assert_fail@plt+0x3874>
   1495c:	mov	r0, r6
   14960:	pop	{r4, r5, r6, r7, fp, pc}
   14964:	clz	r2, r1
   14968:	lsr	r2, r2, #5
   1496c:	clz	r3, r0
   14970:	lsr	r3, r3, #5
   14974:	orrs	r2, r3, r2
   14978:	movwne	r1, #1
   1497c:	movwne	r0, #1
   14980:	cmp	r1, #0
   14984:	beq	149b4 <__assert_fail@plt+0x38e4>
   14988:	mvn	r2, #-2147483648	; 0x80000000
   1498c:	udiv	r2, r2, r1
   14990:	cmp	r2, r0
   14994:	bcs	149b4 <__assert_fail@plt+0x38e4>
   14998:	push	{fp, lr}
   1499c:	mov	fp, sp
   149a0:	bl	10ff8 <__errno_location@plt>
   149a4:	mov	r1, #12
   149a8:	str	r1, [r0]
   149ac:	mov	r0, #0
   149b0:	pop	{fp, pc}
   149b4:	b	10e60 <calloc@plt>
   149b8:	cmp	r0, #0
   149bc:	movweq	r0, #1
   149c0:	cmn	r0, #1
   149c4:	ble	149cc <__assert_fail@plt+0x38fc>
   149c8:	b	10f8c <malloc@plt>
   149cc:	push	{fp, lr}
   149d0:	mov	fp, sp
   149d4:	bl	10ff8 <__errno_location@plt>
   149d8:	mov	r1, #12
   149dc:	str	r1, [r0]
   149e0:	mov	r0, #0
   149e4:	pop	{fp, pc}
   149e8:	push	{fp, lr}
   149ec:	mov	fp, sp
   149f0:	cmp	r0, #0
   149f4:	beq	14a10 <__assert_fail@plt+0x3940>
   149f8:	cmp	r1, #0
   149fc:	beq	14a1c <__assert_fail@plt+0x394c>
   14a00:	cmn	r1, #1
   14a04:	ble	14a28 <__assert_fail@plt+0x3958>
   14a08:	pop	{fp, lr}
   14a0c:	b	10f14 <realloc@plt>
   14a10:	mov	r0, r1
   14a14:	pop	{fp, lr}
   14a18:	b	149b8 <__assert_fail@plt+0x38e8>
   14a1c:	bl	14de8 <__assert_fail@plt+0x3d18>
   14a20:	mov	r0, #0
   14a24:	pop	{fp, pc}
   14a28:	bl	10ff8 <__errno_location@plt>
   14a2c:	mov	r1, #12
   14a30:	str	r1, [r0]
   14a34:	mov	r0, #0
   14a38:	pop	{fp, pc}
   14a3c:	mov	r1, r0
   14a40:	sub	r2, r0, #65	; 0x41
   14a44:	mov	r0, #1
   14a48:	cmp	r2, #26
   14a4c:	subcs	r2, r1, #97	; 0x61
   14a50:	cmpcs	r2, #26
   14a54:	bcs	14a5c <__assert_fail@plt+0x398c>
   14a58:	bx	lr
   14a5c:	sub	r1, r1, #48	; 0x30
   14a60:	cmp	r1, #10
   14a64:	movcs	r0, #0
   14a68:	bx	lr
   14a6c:	mov	r1, r0
   14a70:	sub	r2, r0, #65	; 0x41
   14a74:	mov	r0, #1
   14a78:	cmp	r2, #26
   14a7c:	subcs	r1, r1, #97	; 0x61
   14a80:	cmpcs	r1, #26
   14a84:	movcs	r0, #0
   14a88:	bx	lr
   14a8c:	mov	r1, #0
   14a90:	cmp	r0, #128	; 0x80
   14a94:	movwcc	r1, #1
   14a98:	mov	r0, r1
   14a9c:	bx	lr
   14aa0:	sub	r1, r0, #9
   14aa4:	clz	r1, r1
   14aa8:	lsr	r1, r1, #5
   14aac:	sub	r0, r0, #32
   14ab0:	clz	r0, r0
   14ab4:	lsr	r0, r0, #5
   14ab8:	orr	r0, r0, r1
   14abc:	bx	lr
   14ac0:	mov	r1, r0
   14ac4:	mov	r0, #1
   14ac8:	cmp	r1, #32
   14acc:	bxcc	lr
   14ad0:	cmp	r1, #127	; 0x7f
   14ad4:	movne	r0, #0
   14ad8:	bx	lr
   14adc:	sub	r1, r0, #48	; 0x30
   14ae0:	mov	r0, #0
   14ae4:	cmp	r1, #10
   14ae8:	movwcc	r0, #1
   14aec:	bx	lr
   14af0:	sub	r1, r0, #33	; 0x21
   14af4:	mov	r0, #0
   14af8:	cmp	r1, #94	; 0x5e
   14afc:	movwcc	r0, #1
   14b00:	bx	lr
   14b04:	sub	r1, r0, #97	; 0x61
   14b08:	mov	r0, #0
   14b0c:	cmp	r1, #26
   14b10:	movwcc	r0, #1
   14b14:	bx	lr
   14b18:	sub	r1, r0, #32
   14b1c:	mov	r0, #0
   14b20:	cmp	r1, #95	; 0x5f
   14b24:	movwcc	r0, #1
   14b28:	bx	lr
   14b2c:	sub	r1, r0, #33	; 0x21
   14b30:	cmp	r1, #93	; 0x5d
   14b34:	bhi	14cc0 <__assert_fail@plt+0x3bf0>
   14b38:	mov	r0, #1
   14b3c:	add	r2, pc, #0
   14b40:	ldr	pc, [r2, r1, lsl #2]
   14b44:			; <UNDEFINED> instruction: 0x00014cbc
   14b48:			; <UNDEFINED> instruction: 0x00014cbc
   14b4c:			; <UNDEFINED> instruction: 0x00014cbc
   14b50:			; <UNDEFINED> instruction: 0x00014cbc
   14b54:			; <UNDEFINED> instruction: 0x00014cbc
   14b58:			; <UNDEFINED> instruction: 0x00014cbc
   14b5c:			; <UNDEFINED> instruction: 0x00014cbc
   14b60:			; <UNDEFINED> instruction: 0x00014cbc
   14b64:			; <UNDEFINED> instruction: 0x00014cbc
   14b68:			; <UNDEFINED> instruction: 0x00014cbc
   14b6c:			; <UNDEFINED> instruction: 0x00014cbc
   14b70:			; <UNDEFINED> instruction: 0x00014cbc
   14b74:			; <UNDEFINED> instruction: 0x00014cbc
   14b78:			; <UNDEFINED> instruction: 0x00014cbc
   14b7c:			; <UNDEFINED> instruction: 0x00014cbc
   14b80:	andeq	r4, r1, r0, asr #25
   14b84:	andeq	r4, r1, r0, asr #25
   14b88:	andeq	r4, r1, r0, asr #25
   14b8c:	andeq	r4, r1, r0, asr #25
   14b90:	andeq	r4, r1, r0, asr #25
   14b94:	andeq	r4, r1, r0, asr #25
   14b98:	andeq	r4, r1, r0, asr #25
   14b9c:	andeq	r4, r1, r0, asr #25
   14ba0:	andeq	r4, r1, r0, asr #25
   14ba4:	andeq	r4, r1, r0, asr #25
   14ba8:			; <UNDEFINED> instruction: 0x00014cbc
   14bac:			; <UNDEFINED> instruction: 0x00014cbc
   14bb0:			; <UNDEFINED> instruction: 0x00014cbc
   14bb4:			; <UNDEFINED> instruction: 0x00014cbc
   14bb8:			; <UNDEFINED> instruction: 0x00014cbc
   14bbc:			; <UNDEFINED> instruction: 0x00014cbc
   14bc0:			; <UNDEFINED> instruction: 0x00014cbc
   14bc4:	andeq	r4, r1, r0, asr #25
   14bc8:	andeq	r4, r1, r0, asr #25
   14bcc:	andeq	r4, r1, r0, asr #25
   14bd0:	andeq	r4, r1, r0, asr #25
   14bd4:	andeq	r4, r1, r0, asr #25
   14bd8:	andeq	r4, r1, r0, asr #25
   14bdc:	andeq	r4, r1, r0, asr #25
   14be0:	andeq	r4, r1, r0, asr #25
   14be4:	andeq	r4, r1, r0, asr #25
   14be8:	andeq	r4, r1, r0, asr #25
   14bec:	andeq	r4, r1, r0, asr #25
   14bf0:	andeq	r4, r1, r0, asr #25
   14bf4:	andeq	r4, r1, r0, asr #25
   14bf8:	andeq	r4, r1, r0, asr #25
   14bfc:	andeq	r4, r1, r0, asr #25
   14c00:	andeq	r4, r1, r0, asr #25
   14c04:	andeq	r4, r1, r0, asr #25
   14c08:	andeq	r4, r1, r0, asr #25
   14c0c:	andeq	r4, r1, r0, asr #25
   14c10:	andeq	r4, r1, r0, asr #25
   14c14:	andeq	r4, r1, r0, asr #25
   14c18:	andeq	r4, r1, r0, asr #25
   14c1c:	andeq	r4, r1, r0, asr #25
   14c20:	andeq	r4, r1, r0, asr #25
   14c24:	andeq	r4, r1, r0, asr #25
   14c28:	andeq	r4, r1, r0, asr #25
   14c2c:			; <UNDEFINED> instruction: 0x00014cbc
   14c30:			; <UNDEFINED> instruction: 0x00014cbc
   14c34:			; <UNDEFINED> instruction: 0x00014cbc
   14c38:			; <UNDEFINED> instruction: 0x00014cbc
   14c3c:			; <UNDEFINED> instruction: 0x00014cbc
   14c40:			; <UNDEFINED> instruction: 0x00014cbc
   14c44:	andeq	r4, r1, r0, asr #25
   14c48:	andeq	r4, r1, r0, asr #25
   14c4c:	andeq	r4, r1, r0, asr #25
   14c50:	andeq	r4, r1, r0, asr #25
   14c54:	andeq	r4, r1, r0, asr #25
   14c58:	andeq	r4, r1, r0, asr #25
   14c5c:	andeq	r4, r1, r0, asr #25
   14c60:	andeq	r4, r1, r0, asr #25
   14c64:	andeq	r4, r1, r0, asr #25
   14c68:	andeq	r4, r1, r0, asr #25
   14c6c:	andeq	r4, r1, r0, asr #25
   14c70:	andeq	r4, r1, r0, asr #25
   14c74:	andeq	r4, r1, r0, asr #25
   14c78:	andeq	r4, r1, r0, asr #25
   14c7c:	andeq	r4, r1, r0, asr #25
   14c80:	andeq	r4, r1, r0, asr #25
   14c84:	andeq	r4, r1, r0, asr #25
   14c88:	andeq	r4, r1, r0, asr #25
   14c8c:	andeq	r4, r1, r0, asr #25
   14c90:	andeq	r4, r1, r0, asr #25
   14c94:	andeq	r4, r1, r0, asr #25
   14c98:	andeq	r4, r1, r0, asr #25
   14c9c:	andeq	r4, r1, r0, asr #25
   14ca0:	andeq	r4, r1, r0, asr #25
   14ca4:	andeq	r4, r1, r0, asr #25
   14ca8:	andeq	r4, r1, r0, asr #25
   14cac:			; <UNDEFINED> instruction: 0x00014cbc
   14cb0:			; <UNDEFINED> instruction: 0x00014cbc
   14cb4:			; <UNDEFINED> instruction: 0x00014cbc
   14cb8:			; <UNDEFINED> instruction: 0x00014cbc
   14cbc:	bx	lr
   14cc0:	mov	r0, #0
   14cc4:	bx	lr
   14cc8:	sub	r0, r0, #9
   14ccc:	cmp	r0, #23
   14cd0:	movhi	r0, #0
   14cd4:	bxhi	lr
   14cd8:	bic	r0, r0, #-16777216	; 0xff000000
   14cdc:	movw	r1, #31
   14ce0:	movt	r1, #128	; 0x80
   14ce4:	mov	r2, #1
   14ce8:	and	r0, r2, r1, lsr r0
   14cec:	bx	lr
   14cf0:	sub	r1, r0, #65	; 0x41
   14cf4:	mov	r0, #0
   14cf8:	cmp	r1, #26
   14cfc:	movwcc	r0, #1
   14d00:	bx	lr
   14d04:	mov	r1, r0
   14d08:	sub	r2, r0, #48	; 0x30
   14d0c:	mov	r0, #1
   14d10:	cmp	r2, #22
   14d14:	bhi	14d2c <__assert_fail@plt+0x3c5c>
   14d18:	mov	ip, #1
   14d1c:	movw	r3, #1023	; 0x3ff
   14d20:	movt	r3, #126	; 0x7e
   14d24:	tst	r3, ip, lsl r2
   14d28:	bxne	lr
   14d2c:	sub	r1, r1, #97	; 0x61
   14d30:	cmp	r1, #6
   14d34:	movcs	r0, #0
   14d38:	bxcs	lr
   14d3c:	bx	lr
   14d40:	sub	r1, r0, #65	; 0x41
   14d44:	cmp	r1, #26
   14d48:	addcc	r0, r0, #32
   14d4c:	bx	lr
   14d50:	sub	r1, r0, #97	; 0x61
   14d54:	cmp	r1, #26
   14d58:	subcc	r0, r0, #32
   14d5c:	bx	lr
   14d60:	push	{r4, r5, r6, sl, fp, lr}
   14d64:	add	fp, sp, #16
   14d68:	mov	r4, r0
   14d6c:	bl	10f5c <__fpending@plt>
   14d70:	mov	r5, r0
   14d74:	mov	r0, r4
   14d78:	bl	10f68 <ferror_unlocked@plt>
   14d7c:	mov	r6, r0
   14d80:	mov	r0, r4
   14d84:	bl	11c88 <__assert_fail@plt+0xbb8>
   14d88:	cmp	r6, #0
   14d8c:	beq	14dac <__assert_fail@plt+0x3cdc>
   14d90:	mvn	r4, #0
   14d94:	cmp	r0, #0
   14d98:	bne	14de0 <__assert_fail@plt+0x3d10>
   14d9c:	bl	10ff8 <__errno_location@plt>
   14da0:	mov	r1, #0
   14da4:	str	r1, [r0]
   14da8:	b	14de0 <__assert_fail@plt+0x3d10>
   14dac:	cmp	r0, #0
   14db0:	mov	r4, r0
   14db4:	mvnne	r4, #0
   14db8:	cmp	r5, #0
   14dbc:	bne	14de0 <__assert_fail@plt+0x3d10>
   14dc0:	cmp	r0, #0
   14dc4:	beq	14de0 <__assert_fail@plt+0x3d10>
   14dc8:	bl	10ff8 <__errno_location@plt>
   14dcc:	ldr	r0, [r0]
   14dd0:	subs	r4, r0, #9
   14dd4:	mvnne	r4, #0
   14dd8:	mov	r0, r4
   14ddc:	pop	{r4, r5, r6, sl, fp, pc}
   14de0:	mov	r0, r4
   14de4:	pop	{r4, r5, r6, sl, fp, pc}
   14de8:	push	{r4, r5, r6, sl, fp, lr}
   14dec:	add	fp, sp, #16
   14df0:	mov	r4, r0
   14df4:	bl	10ff8 <__errno_location@plt>
   14df8:	mov	r5, r0
   14dfc:	ldr	r6, [r0]
   14e00:	mov	r0, r4
   14e04:	bl	10eb4 <free@plt>
   14e08:	str	r6, [r5]
   14e0c:	pop	{r4, r5, r6, sl, fp, pc}
   14e10:	push	{fp, lr}
   14e14:	mov	fp, sp
   14e18:	bl	10ff8 <__errno_location@plt>
   14e1c:	mov	r1, #12
   14e20:	str	r1, [r0]
   14e24:	mov	r0, #0
   14e28:	pop	{fp, pc}
   14e2c:	b	149b8 <__assert_fail@plt+0x38e8>
   14e30:	cmp	r1, #0
   14e34:	orreq	r1, r1, #1
   14e38:	b	149e8 <__assert_fail@plt+0x3918>
   14e3c:	b	14964 <__assert_fail@plt+0x3894>
   14e40:	clz	r3, r2
   14e44:	lsr	ip, r3, #5
   14e48:	clz	r3, r1
   14e4c:	lsr	r3, r3, #5
   14e50:	orrs	r3, r3, ip
   14e54:	movwne	r1, #1
   14e58:	movwne	r2, #1
   14e5c:	b	14ef8 <__assert_fail@plt+0x3e28>
   14e60:	push	{fp, lr}
   14e64:	mov	fp, sp
   14e68:	mov	r0, #14
   14e6c:	bl	1107c <nl_langinfo@plt>
   14e70:	movw	r1, #21956	; 0x55c4
   14e74:	movt	r1, #1
   14e78:	cmp	r0, #0
   14e7c:	movne	r1, r0
   14e80:	ldrb	r2, [r1]
   14e84:	movw	r0, #23402	; 0x5b6a
   14e88:	movt	r0, #1
   14e8c:	cmp	r2, #0
   14e90:	movne	r0, r1
   14e94:	pop	{fp, pc}
   14e98:	push	{r4, r5, r6, r7, fp, lr}
   14e9c:	add	fp, sp, #16
   14ea0:	sub	sp, sp, #8
   14ea4:	mov	r7, r2
   14ea8:	mov	r4, r1
   14eac:	add	r5, sp, #4
   14eb0:	cmp	r0, #0
   14eb4:	movne	r5, r0
   14eb8:	mov	r0, r5
   14ebc:	bl	10f74 <mbrtowc@plt>
   14ec0:	mov	r6, r0
   14ec4:	cmp	r7, #0
   14ec8:	beq	14eec <__assert_fail@plt+0x3e1c>
   14ecc:	cmn	r6, #2
   14ed0:	bcc	14eec <__assert_fail@plt+0x3e1c>
   14ed4:	mov	r0, #0
   14ed8:	bl	14f34 <__assert_fail@plt+0x3e64>
   14edc:	cmp	r0, #0
   14ee0:	ldrbeq	r0, [r4]
   14ee4:	streq	r0, [r5]
   14ee8:	moveq	r6, #1
   14eec:	mov	r0, r6
   14ef0:	sub	sp, fp, #16
   14ef4:	pop	{r4, r5, r6, r7, fp, pc}
   14ef8:	cmp	r2, #0
   14efc:	beq	14f2c <__assert_fail@plt+0x3e5c>
   14f00:	mvn	r3, #0
   14f04:	udiv	r3, r3, r2
   14f08:	cmp	r3, r1
   14f0c:	bcs	14f2c <__assert_fail@plt+0x3e5c>
   14f10:	push	{fp, lr}
   14f14:	mov	fp, sp
   14f18:	bl	10ff8 <__errno_location@plt>
   14f1c:	mov	r1, #12
   14f20:	str	r1, [r0]
   14f24:	mov	r0, #0
   14f28:	pop	{fp, pc}
   14f2c:	mul	r1, r2, r1
   14f30:	b	149e8 <__assert_fail@plt+0x3918>
   14f34:	push	{r4, sl, fp, lr}
   14f38:	add	fp, sp, #8
   14f3c:	sub	sp, sp, #264	; 0x108
   14f40:	add	r1, sp, #7
   14f44:	movw	r2, #257	; 0x101
   14f48:	bl	14f98 <__assert_fail@plt+0x3ec8>
   14f4c:	mov	r4, #0
   14f50:	cmp	r0, #0
   14f54:	bne	14f8c <__assert_fail@plt+0x3ebc>
   14f58:	add	r0, sp, #7
   14f5c:	movw	r1, #23408	; 0x5b70
   14f60:	movt	r1, #1
   14f64:	bl	10e84 <strcmp@plt>
   14f68:	cmp	r0, #0
   14f6c:	beq	14f8c <__assert_fail@plt+0x3ebc>
   14f70:	add	r0, sp, #7
   14f74:	movw	r1, #23410	; 0x5b72
   14f78:	movt	r1, #1
   14f7c:	bl	10e84 <strcmp@plt>
   14f80:	mov	r4, r0
   14f84:	cmp	r0, #0
   14f88:	movwne	r4, #1
   14f8c:	mov	r0, r4
   14f90:	sub	sp, fp, #8
   14f94:	pop	{r4, sl, fp, pc}
   14f98:	b	14f9c <__assert_fail@plt+0x3ecc>
   14f9c:	push	{r4, r5, r6, r7, fp, lr}
   14fa0:	add	fp, sp, #16
   14fa4:	mov	r6, r2
   14fa8:	mov	r4, r1
   14fac:	bl	15038 <__assert_fail@plt+0x3f68>
   14fb0:	cmp	r0, #0
   14fb4:	beq	14fe4 <__assert_fail@plt+0x3f14>
   14fb8:	mov	r7, r0
   14fbc:	bl	10fe0 <strlen@plt>
   14fc0:	cmp	r0, r6
   14fc4:	bcs	15004 <__assert_fail@plt+0x3f34>
   14fc8:	add	r2, r0, #1
   14fcc:	mov	r0, r4
   14fd0:	mov	r1, r7
   14fd4:	bl	10ecc <memcpy@plt>
   14fd8:	mov	r5, #0
   14fdc:	mov	r0, r5
   14fe0:	pop	{r4, r5, r6, r7, fp, pc}
   14fe4:	mov	r5, #22
   14fe8:	cmp	r6, #0
   14fec:	movne	r0, #0
   14ff0:	strbne	r0, [r4]
   14ff4:	movne	r0, r5
   14ff8:	popne	{r4, r5, r6, r7, fp, pc}
   14ffc:	mov	r0, r5
   15000:	pop	{r4, r5, r6, r7, fp, pc}
   15004:	mov	r5, #34	; 0x22
   15008:	cmp	r6, #0
   1500c:	beq	1502c <__assert_fail@plt+0x3f5c>
   15010:	sub	r6, r6, #1
   15014:	mov	r0, r4
   15018:	mov	r1, r7
   1501c:	mov	r2, r6
   15020:	bl	10ecc <memcpy@plt>
   15024:	mov	r0, #0
   15028:	strb	r0, [r4, r6]
   1502c:	mov	r0, r5
   15030:	pop	{r4, r5, r6, r7, fp, pc}
   15034:	b	15038 <__assert_fail@plt+0x3f68>
   15038:	mov	r1, #0
   1503c:	b	11064 <setlocale@plt>
   15040:	cmp	r3, #0
   15044:	cmpeq	r2, #0
   15048:	bne	15060 <__assert_fail@plt+0x3f90>
   1504c:	cmp	r1, #0
   15050:	cmpeq	r0, #0
   15054:	mvnne	r1, #0
   15058:	mvnne	r0, #0
   1505c:	b	1507c <__assert_fail@plt+0x3fac>
   15060:	sub	sp, sp, #8
   15064:	push	{sp, lr}
   15068:	bl	1508c <__assert_fail@plt+0x3fbc>
   1506c:	ldr	lr, [sp, #4]
   15070:	add	sp, sp, #8
   15074:	pop	{r2, r3}
   15078:	bx	lr
   1507c:	push	{r1, lr}
   15080:	mov	r0, #8
   15084:	bl	10e78 <raise@plt>
   15088:	pop	{r1, pc}
   1508c:	cmp	r1, r3
   15090:	cmpeq	r0, r2
   15094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15098:	mov	r4, r0
   1509c:	movcc	r0, #0
   150a0:	mov	r5, r1
   150a4:	ldr	lr, [sp, #36]	; 0x24
   150a8:	movcc	r1, r0
   150ac:	bcc	151a8 <__assert_fail@plt+0x40d8>
   150b0:	cmp	r3, #0
   150b4:	clzeq	ip, r2
   150b8:	clzne	ip, r3
   150bc:	addeq	ip, ip, #32
   150c0:	cmp	r5, #0
   150c4:	clzeq	r1, r4
   150c8:	addeq	r1, r1, #32
   150cc:	clzne	r1, r5
   150d0:	sub	ip, ip, r1
   150d4:	sub	sl, ip, #32
   150d8:	lsl	r9, r3, ip
   150dc:	rsb	fp, ip, #32
   150e0:	orr	r9, r9, r2, lsl sl
   150e4:	orr	r9, r9, r2, lsr fp
   150e8:	lsl	r8, r2, ip
   150ec:	cmp	r5, r9
   150f0:	cmpeq	r4, r8
   150f4:	movcc	r0, #0
   150f8:	movcc	r1, r0
   150fc:	bcc	15118 <__assert_fail@plt+0x4048>
   15100:	mov	r0, #1
   15104:	subs	r4, r4, r8
   15108:	lsl	r1, r0, sl
   1510c:	orr	r1, r1, r0, lsr fp
   15110:	lsl	r0, r0, ip
   15114:	sbc	r5, r5, r9
   15118:	cmp	ip, #0
   1511c:	beq	151a8 <__assert_fail@plt+0x40d8>
   15120:	lsr	r6, r8, #1
   15124:	orr	r6, r6, r9, lsl #31
   15128:	lsr	r7, r9, #1
   1512c:	mov	r2, ip
   15130:	b	15154 <__assert_fail@plt+0x4084>
   15134:	subs	r3, r4, r6
   15138:	sbc	r8, r5, r7
   1513c:	adds	r3, r3, r3
   15140:	adc	r8, r8, r8
   15144:	adds	r4, r3, #1
   15148:	adc	r5, r8, #0
   1514c:	subs	r2, r2, #1
   15150:	beq	15170 <__assert_fail@plt+0x40a0>
   15154:	cmp	r5, r7
   15158:	cmpeq	r4, r6
   1515c:	bcs	15134 <__assert_fail@plt+0x4064>
   15160:	adds	r4, r4, r4
   15164:	adc	r5, r5, r5
   15168:	subs	r2, r2, #1
   1516c:	bne	15154 <__assert_fail@plt+0x4084>
   15170:	lsr	r3, r4, ip
   15174:	orr	r3, r3, r5, lsl fp
   15178:	lsr	r2, r5, ip
   1517c:	orr	r3, r3, r5, lsr sl
   15180:	adds	r0, r0, r4
   15184:	mov	r4, r3
   15188:	lsl	r3, r2, ip
   1518c:	orr	r3, r3, r4, lsl sl
   15190:	lsl	ip, r4, ip
   15194:	orr	r3, r3, r4, lsr fp
   15198:	adc	r1, r1, r5
   1519c:	subs	r0, r0, ip
   151a0:	mov	r5, r2
   151a4:	sbc	r1, r1, r3
   151a8:	cmp	lr, #0
   151ac:	strdne	r4, [lr]
   151b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   151b8:	mov	r7, r0
   151bc:	ldr	r6, [pc, #72]	; 1520c <__assert_fail@plt+0x413c>
   151c0:	ldr	r5, [pc, #72]	; 15210 <__assert_fail@plt+0x4140>
   151c4:	add	r6, pc, r6
   151c8:	add	r5, pc, r5
   151cc:	sub	r6, r6, r5
   151d0:	mov	r8, r1
   151d4:	mov	r9, r2
   151d8:	bl	10e40 <calloc@plt-0x20>
   151dc:	asrs	r6, r6, #2
   151e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   151e4:	mov	r4, #0
   151e8:	add	r4, r4, #1
   151ec:	ldr	r3, [r5], #4
   151f0:	mov	r2, r9
   151f4:	mov	r1, r8
   151f8:	mov	r0, r7
   151fc:	blx	r3
   15200:	cmp	r6, r4
   15204:	bne	151e8 <__assert_fail@plt+0x4118>
   15208:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1520c:	andeq	r0, r1, r0, asr #26
   15210:	andeq	r0, r1, r8, lsr sp
   15214:	bx	lr
   15218:	ldr	r3, [pc, #12]	; 1522c <__assert_fail@plt+0x415c>
   1521c:	mov	r1, #0
   15220:	add	r3, pc, r3
   15224:	ldr	r2, [r3]
   15228:	b	11004 <__cxa_atexit@plt>
   1522c:	andeq	r0, r1, r4, asr #29

Disassembly of section .fini:

00015230 <.fini>:
   15230:	push	{r3, lr}
   15234:	pop	{r3, pc}
