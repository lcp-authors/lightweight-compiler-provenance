
../repos/babelouest-orcania-3c014d0/liborcania.so.2.1.0:     file format elf32-littlearm


Disassembly of section .init:

00001058 <.init>:
    1058:	push	{r3, lr}
    105c:	bl	1240 <o_strchr@plt+0xc>
    1060:	pop	{r3, pc}

Disassembly of section .plt:

00001064 <strstr@plt-0x14>:
    1064:	push	{lr}		; (str lr, [sp, #-4]!)
    1068:	ldr	lr, [pc, #4]	; 1074 <strstr@plt-0x4>
    106c:	add	lr, pc, lr
    1070:	ldr	pc, [lr, #8]!
    1074:	andeq	r1, r1, ip, lsl #31

00001078 <strstr@plt>:
    1078:	add	ip, pc, #0, 12
    107c:	add	ip, ip, #69632	; 0x11000
    1080:	ldr	pc, [ip, #3980]!	; 0xf8c

00001084 <pointer_list_get_at@plt>:
    1084:	add	ip, pc, #0, 12
    1088:	add	ip, ip, #69632	; 0x11000
    108c:	ldr	pc, [ip, #3972]!	; 0xf84

00001090 <o_strncasecmp@plt>:
    1090:	add	ip, pc, #0, 12
    1094:	add	ip, ip, #69632	; 0x11000
    1098:	ldr	pc, [ip, #3964]!	; 0xf7c

0000109c <strcasestr@plt>:
    109c:	add	ip, pc, #0, 12
    10a0:	add	ip, ip, #69632	; 0x11000
    10a4:	ldr	pc, [ip, #3956]!	; 0xf74

000010a8 <strcmp@plt>:
    10a8:	add	ip, pc, #0, 12
    10ac:	add	ip, ip, #69632	; 0x11000
    10b0:	ldr	pc, [ip, #3948]!	; 0xf6c

000010b4 <__cxa_finalize@plt>:
    10b4:	add	ip, pc, #0, 12
    10b8:	add	ip, ip, #69632	; 0x11000
    10bc:	ldr	pc, [ip, #3940]!	; 0xf64

000010c0 <o_strndup@plt>:
    10c0:	add	ip, pc, #0, 12
    10c4:	add	ip, ip, #69632	; 0x11000
    10c8:	ldr	pc, [ip, #3932]!	; 0xf5c

000010cc <o_free@plt>:
    10cc:	add	ip, pc, #0, 12
    10d0:	add	ip, ip, #69632	; 0x11000
    10d4:	ldr	pc, [ip, #3924]!	; 0xf54

000010d8 <pointer_list_remove_at@plt>:
    10d8:	add	ip, pc, #0, 12
    10dc:	add	ip, ip, #69632	; 0x11000
    10e0:	ldr	pc, [ip, #3916]!	; 0xf4c

000010e4 <memcpy@plt>:
    10e4:	add	ip, pc, #0, 12
    10e8:	add	ip, ip, #69632	; 0x11000
    10ec:	ldr	pc, [ip, #3908]!	; 0xf44

000010f0 <o_strdup@plt>:
    10f0:	add	ip, pc, #0, 12
    10f4:	add	ip, ip, #69632	; 0x11000
    10f8:	ldr	pc, [ip, #3900]!	; 0xf3c

000010fc <o_base64_encode@plt>:
    10fc:	add	ip, pc, #0, 12
    1100:	add	ip, ip, #69632	; 0x11000
    1104:	ldr	pc, [ip, #3892]!	; 0xf34

00001108 <strcasecmp@plt>:
    1108:	add	ip, pc, #0, 12
    110c:	add	ip, ip, #69632	; 0x11000
    1110:	ldr	pc, [ip, #3884]!	; 0xf2c

00001114 <o_strcmp@plt>:
    1114:	add	ip, pc, #0, 12
    1118:	add	ip, ip, #69632	; 0x11000
    111c:	ldr	pc, [ip, #3876]!	; 0xf24

00001120 <trimwhitespace@plt>:
    1120:	add	ip, pc, #0, 12
    1124:	add	ip, ip, #69632	; 0x11000
    1128:	ldr	pc, [ip, #3868]!	; 0xf1c

0000112c <strcpy@plt>:
    112c:	add	ip, pc, #0, 12
    1130:	add	ip, ip, #69632	; 0x11000
    1134:	ldr	pc, [ip, #3860]!	; 0xf14

00001138 <o_strlen@plt>:
    1138:	add	ip, pc, #0, 12
    113c:	add	ip, ip, #69632	; 0x11000
    1140:	ldr	pc, [ip, #3852]!	; 0xf0c

00001144 <o_strcasecmp@plt>:
    1144:	add	ip, pc, #0, 12
    1148:	add	ip, ip, #69632	; 0x11000
    114c:	ldr	pc, [ip, #3844]!	; 0xf04

00001150 <o_realloc@plt>:
    1150:	add	ip, pc, #0, 12
    1154:	add	ip, ip, #69632	; 0x11000
    1158:	ldr	pc, [ip, #3836]!	; 0xefc

0000115c <str_replace@plt>:
    115c:	add	ip, pc, #0, 12
    1160:	add	ip, ip, #69632	; 0x11000
    1164:	ldr	pc, [ip, #3828]!	; 0xef4

00001168 <__gmon_start__@plt>:
    1168:	add	ip, pc, #0, 12
    116c:	add	ip, ip, #69632	; 0x11000
    1170:	ldr	pc, [ip, #3820]!	; 0xeec

00001174 <__ctype_b_loc@plt>:
    1174:	add	ip, pc, #0, 12
    1178:	add	ip, ip, #69632	; 0x11000
    117c:	ldr	pc, [ip, #3812]!	; 0xee4

00001180 <strlen@plt>:
    1180:	add	ip, pc, #0, 12
    1184:	add	ip, ip, #69632	; 0x11000
    1188:	ldr	pc, [ip, #3804]!	; 0xedc

0000118c <strchr@plt>:
    118c:	add	ip, pc, #0, 12
    1190:	add	ip, ip, #69632	; 0x11000
    1194:	ldr	pc, [ip, #3796]!	; 0xed4

00001198 <strncasecmp@plt>:
    1198:	add	ip, pc, #0, 12
    119c:	add	ip, ip, #69632	; 0x11000
    11a0:	ldr	pc, [ip, #3788]!	; 0xecc

000011a4 <snprintf@plt>:
    11a4:	add	ip, pc, #0, 12
    11a8:	add	ip, ip, #69632	; 0x11000
    11ac:	ldr	pc, [ip, #3780]!	; 0xec4

000011b0 <o_malloc@plt>:
    11b0:	add	ip, pc, #0, 12
    11b4:	add	ip, ip, #69632	; 0x11000
    11b8:	ldr	pc, [ip, #3772]!	; 0xebc

000011bc <memset@plt>:
    11bc:	add	ip, pc, #0, 12
    11c0:	add	ip, ip, #69632	; 0x11000
    11c4:	ldr	pc, [ip, #3764]!	; 0xeb4

000011c8 <strncpy@plt>:
    11c8:	add	ip, pc, #0, 12
    11cc:	add	ip, ip, #69632	; 0x11000
    11d0:	ldr	pc, [ip, #3756]!	; 0xeac

000011d4 <pointer_list_size@plt>:
    11d4:	add	ip, pc, #0, 12
    11d8:	add	ip, ip, #69632	; 0x11000
    11dc:	ldr	pc, [ip, #3748]!	; 0xea4

000011e0 <msprintf@plt>:
    11e0:	add	ip, pc, #0, 12
    11e4:	add	ip, ip, #69632	; 0x11000
    11e8:	ldr	pc, [ip, #3740]!	; 0xe9c

000011ec <o_base64url_2_base64@plt>:
    11ec:	add	ip, pc, #0, 12
    11f0:	add	ip, ip, #69632	; 0x11000
    11f4:	ldr	pc, [ip, #3732]!	; 0xe94

000011f8 <strrchr@plt>:
    11f8:	add	ip, pc, #0, 12
    11fc:	add	ip, ip, #69632	; 0x11000
    1200:	ldr	pc, [ip, #3724]!	; 0xe8c

00001204 <o_base64_decode@plt>:
    1204:	add	ip, pc, #0, 12
    1208:	add	ip, ip, #69632	; 0x11000
    120c:	ldr	pc, [ip, #3716]!	; 0xe84

00001210 <vsnprintf@plt>:
    1210:	add	ip, pc, #0, 12
    1214:	add	ip, ip, #69632	; 0x11000
    1218:	ldr	pc, [ip, #3708]!	; 0xe7c

0000121c <o_strncmp@plt>:
    121c:	add	ip, pc, #0, 12
    1220:	add	ip, ip, #69632	; 0x11000
    1224:	ldr	pc, [ip, #3700]!	; 0xe74

00001228 <strncmp@plt>:
    1228:	add	ip, pc, #0, 12
    122c:	add	ip, ip, #69632	; 0x11000
    1230:	ldr	pc, [ip, #3692]!	; 0xe6c

00001234 <o_strchr@plt>:
    1234:	add	ip, pc, #0, 12
    1238:	add	ip, ip, #69632	; 0x11000
    123c:	ldr	pc, [ip, #3684]!	; 0xe64

Disassembly of section .text:

00001240 <o_base64_encode@@Base-0x124>:
    1240:	ldr	r3, [pc, #20]	; 125c <o_strchr@plt+0x28>
    1244:	ldr	r2, [pc, #20]	; 1260 <o_strchr@plt+0x2c>
    1248:	add	r3, pc, r3
    124c:	ldr	r2, [r3, r2]
    1250:	cmp	r2, #0
    1254:	bxeq	lr
    1258:	b	1168 <__gmon_start__@plt>
    125c:			; <UNDEFINED> instruction: 0x00011db0
    1260:	andeq	r0, r0, ip, lsr #1
    1264:	ldr	r0, [pc, #44]	; 1298 <o_strchr@plt+0x64>
    1268:	ldr	r3, [pc, #44]	; 129c <o_strchr@plt+0x68>
    126c:	add	r0, pc, r0
    1270:	add	r3, pc, r3
    1274:	cmp	r3, r0
    1278:	ldr	r3, [pc, #32]	; 12a0 <o_strchr@plt+0x6c>
    127c:	add	r3, pc, r3
    1280:	bxeq	lr
    1284:	ldr	r2, [pc, #24]	; 12a4 <o_strchr@plt+0x70>
    1288:	ldr	r3, [r3, r2]
    128c:	cmp	r3, #0
    1290:	bxeq	lr
    1294:	bx	r3
    1298:	andeq	r1, r1, r0, asr lr
    129c:	andeq	r1, r1, ip, asr #28
    12a0:	andeq	r1, r1, ip, ror sp
    12a4:	andeq	r0, r0, r8, lsr #1
    12a8:	ldr	r0, [pc, #56]	; 12e8 <o_strchr@plt+0xb4>
    12ac:	ldr	r3, [pc, #56]	; 12ec <o_strchr@plt+0xb8>
    12b0:	add	r0, pc, r0
    12b4:	add	r3, pc, r3
    12b8:	sub	r1, r3, r0
    12bc:	ldr	r3, [pc, #44]	; 12f0 <o_strchr@plt+0xbc>
    12c0:	asr	r1, r1, #2
    12c4:	add	r3, pc, r3
    12c8:	add	r1, r1, r1, lsr #31
    12cc:	asrs	r1, r1, #1
    12d0:	bxeq	lr
    12d4:	ldr	r2, [pc, #24]	; 12f4 <o_strchr@plt+0xc0>
    12d8:	ldr	r3, [r3, r2]
    12dc:	cmp	r3, #0
    12e0:	bxeq	lr
    12e4:	bx	r3
    12e8:	andeq	r1, r1, ip, lsl #28
    12ec:	andeq	r1, r1, r8, lsl #28
    12f0:	andeq	r1, r1, r4, lsr sp
    12f4:	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
    12f8:	ldr	r3, [pc, #76]	; 134c <o_strchr@plt+0x118>
    12fc:	ldr	r2, [pc, #76]	; 1350 <o_strchr@plt+0x11c>
    1300:	add	r3, pc, r3
    1304:	add	r2, pc, r2
    1308:	ldrb	r3, [r3]
    130c:	cmp	r3, #0
    1310:	bxne	lr
    1314:	ldr	r3, [pc, #56]	; 1354 <o_strchr@plt+0x120>
    1318:	push	{r4, lr}
    131c:	ldr	r3, [r2, r3]
    1320:	cmp	r3, #0
    1324:	beq	1334 <o_strchr@plt+0x100>
    1328:	ldr	r3, [pc, #40]	; 1358 <o_strchr@plt+0x124>
    132c:	ldr	r0, [pc, r3]
    1330:	bl	10b4 <__cxa_finalize@plt>
    1334:	bl	1264 <o_strchr@plt+0x30>
    1338:	ldr	r3, [pc, #28]	; 135c <o_strchr@plt+0x128>
    133c:	mov	r2, #1
    1340:	add	r3, pc, r3
    1344:	strb	r2, [r3]
    1348:	pop	{r4, pc}
    134c:			; <UNDEFINED> instruction: 0x00011dbc
    1350:	strdeq	r1, [r1], -r4
    1354:	andeq	r0, r0, r4, lsr #1
    1358:	andeq	r1, r1, r0, lsl #27
    135c:	andeq	r1, r1, ip, ror sp
    1360:	b	12a8 <o_strchr@plt+0x74>

00001364 <o_base64_encode@@Base>:
    1364:	push	{r4, r5, fp, lr}
    1368:	add	fp, sp, #8
    136c:	mov	ip, #0
    1370:	cmp	r3, #0
    1374:	cmpne	r0, #0
    1378:	beq	1540 <o_base64_encode@@Base+0x1dc>
    137c:	lsl	lr, r1, #2
    1380:	movw	r4, #43691	; 0xaaab
    1384:	movt	r4, #43690	; 0xaaaa
    1388:	umull	r4, lr, lr, r4
    138c:	mov	r4, #4
    1390:	add	r4, r4, lr, lsr #1
    1394:	movw	r5, #36409	; 0x8e39
    1398:	movt	r5, #14563	; 0x38e3
    139c:	umull	r4, r5, r4, r5
    13a0:	lsr	r4, lr, #1
    13a4:	add	r5, r4, r5, lsr #4
    13a8:	add	r5, r5, #5
    13ac:	cmp	r5, r1
    13b0:	bcc	1540 <o_base64_encode@@Base+0x1dc>
    13b4:	mov	r5, #0
    13b8:	str	r5, [r3]
    13bc:	cmp	r1, #3
    13c0:	blt	1454 <o_base64_encode@@Base+0xf0>
    13c4:	add	ip, r0, r1
    13c8:	ldr	lr, [pc, #376]	; 1548 <o_base64_encode@@Base+0x1e4>
    13cc:	add	lr, pc, lr
    13d0:	cmp	r2, #0
    13d4:	beq	144c <o_base64_encode@@Base+0xe8>
    13d8:	ldrb	r1, [r0]
    13dc:	ldrb	r1, [lr, r1, lsr #2]
    13e0:	strb	r1, [r2]
    13e4:	ldrb	r1, [r0]
    13e8:	ldrb	r4, [r0, #1]
    13ec:	lsr	r4, r4, #4
    13f0:	bfi	r4, r1, #4, #2
    13f4:	ldrb	r1, [lr, r4]
    13f8:	strb	r1, [r2, #1]
    13fc:	ldrb	r1, [r0, #1]
    1400:	ldrb	r4, [r0, #2]
    1404:	lsr	r4, r4, #6
    1408:	bfi	r4, r1, #2, #4
    140c:	ldrb	r1, [lr, r4]
    1410:	strb	r1, [r2, #2]
    1414:	ldrb	r1, [r0, #2]
    1418:	and	r1, r1, #63	; 0x3f
    141c:	ldrb	r1, [lr, r1]
    1420:	strb	r1, [r2, #3]
    1424:	add	r2, r2, #4
    1428:	ldr	r1, [r3]
    142c:	add	r1, r1, #4
    1430:	str	r1, [r3]
    1434:	add	r0, r0, #3
    1438:	sub	r1, ip, r0
    143c:	cmp	r1, #2
    1440:	ble	1454 <o_base64_encode@@Base+0xf0>
    1444:	cmp	r2, #0
    1448:	bne	13d8 <o_base64_encode@@Base+0x74>
    144c:	mov	r2, #0
    1450:	b	1428 <o_base64_encode@@Base+0xc4>
    1454:	cmp	r1, #0
    1458:	beq	1530 <o_base64_encode@@Base+0x1cc>
    145c:	cmp	r2, #0
    1460:	beq	147c <o_base64_encode@@Base+0x118>
    1464:	ldrb	r5, [r0]
    1468:	ldr	r4, [pc, #220]	; 154c <o_base64_encode@@Base+0x1e8>
    146c:	add	r4, pc, r4
    1470:	ldrb	r5, [r4, r5, lsr #2]
    1474:	strb	r5, [r2], #1
    1478:	b	1480 <o_base64_encode@@Base+0x11c>
    147c:	mov	r2, #0
    1480:	ldr	r5, [r3]
    1484:	add	r5, r5, #1
    1488:	str	r5, [r3]
    148c:	cmp	r1, #1
    1490:	bne	14c0 <o_base64_encode@@Base+0x15c>
    1494:	cmp	r2, #0
    1498:	beq	1514 <o_base64_encode@@Base+0x1b0>
    149c:	ldrb	r0, [r0]
    14a0:	mov	r1, #61	; 0x3d
    14a4:	strb	r1, [r2, #1]
    14a8:	and	r0, r0, #3
    14ac:	ldr	r1, [pc, #156]	; 1550 <o_base64_encode@@Base+0x1ec>
    14b0:	add	r1, pc, r1
    14b4:	ldrb	r0, [r1, r0, lsl #4]
    14b8:	strb	r0, [r2]
    14bc:	b	14f8 <o_base64_encode@@Base+0x194>
    14c0:	cmp	r2, #0
    14c4:	beq	1514 <o_base64_encode@@Base+0x1b0>
    14c8:	ldrb	r1, [r0]
    14cc:	ldrb	r5, [r0, #1]
    14d0:	lsr	r5, r5, #4
    14d4:	bfi	r5, r1, #4, #2
    14d8:	ldr	r1, [pc, #116]	; 1554 <o_base64_encode@@Base+0x1f0>
    14dc:	add	r1, pc, r1
    14e0:	ldrb	r5, [r1, r5]
    14e4:	strb	r5, [r2]
    14e8:	ldrb	r0, [r0, #1]
    14ec:	and	r0, r0, #15
    14f0:	ldrb	r0, [r1, r0, lsl #2]
    14f4:	strb	r0, [r2, #1]
    14f8:	ldr	r0, [r3]
    14fc:	add	r0, r0, #2
    1500:	str	r0, [r3]
    1504:	mov	r0, #61	; 0x3d
    1508:	strb	r0, [r2, #2]
    150c:	add	r2, r2, #3
    1510:	b	1524 <o_base64_encode@@Base+0x1c0>
    1514:	ldr	r0, [r3]
    1518:	add	r0, r0, #2
    151c:	str	r0, [r3]
    1520:	mov	r2, #0
    1524:	ldr	r0, [r3]
    1528:	add	r0, r0, #1
    152c:	str	r0, [r3]
    1530:	mov	ip, #1
    1534:	cmp	r2, #0
    1538:	movne	r0, #0
    153c:	strbne	r0, [r2]
    1540:	mov	r0, ip
    1544:	pop	{r4, r5, fp, pc}
    1548:			; <UNDEFINED> instruction: 0x000016b4
    154c:	andeq	r1, r0, r4, lsl r6
    1550:	ldrdeq	r1, [r0], -r0
    1554:	andeq	r1, r0, r4, lsr #11

00001558 <o_base64_decode@@Base>:
    1558:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    155c:	add	fp, sp, #28
    1560:	sub	sp, sp, #268	; 0x10c
    1564:	mov	r6, r0
    1568:	mov	r0, #0
    156c:	cmp	r6, #0
    1570:	beq	1588 <o_base64_decode@@Base+0x30>
    1574:	mov	r5, r1
    1578:	cmp	r1, #0
    157c:	movne	r8, r3
    1580:	cmpne	r3, #0
    1584:	bne	1590 <o_base64_decode@@Base+0x38>
    1588:	sub	sp, fp, #28
    158c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1590:	mov	sl, r2
    1594:	add	r4, sp, #8
    1598:	mov	r0, r4
    159c:	mov	r1, #128	; 0x80
    15a0:	mov	r2, #256	; 0x100
    15a4:	bl	11bc <memset@plt>
    15a8:	mov	r0, #0
    15ac:	ldr	r1, [pc, #388]	; 1738 <o_base64_decode@@Base+0x1e0>
    15b0:	add	r1, pc, r1
    15b4:	ldrb	r2, [r1, r0]
    15b8:	strb	r0, [r4, r2]
    15bc:	add	r0, r0, #1
    15c0:	cmp	r0, #64	; 0x40
    15c4:	bne	15b4 <o_base64_decode@@Base+0x5c>
    15c8:	mov	r0, #0
    15cc:	strb	r0, [sp, #69]	; 0x45
    15d0:	cmp	r5, #0
    15d4:	beq	1588 <o_base64_decode@@Base+0x30>
    15d8:	mov	r1, #0
    15dc:	mov	r0, #0
    15e0:	ldrb	r2, [r6, r0]
    15e4:	ldrb	r2, [r4, r2]
    15e8:	cmp	r2, #128	; 0x80
    15ec:	addne	r1, r1, #1
    15f0:	add	r0, r0, #1
    15f4:	cmp	r5, r0
    15f8:	bne	15e0 <o_base64_decode@@Base+0x88>
    15fc:	mov	r0, #0
    1600:	cmp	r1, #0
    1604:	beq	1588 <o_base64_decode@@Base+0x30>
    1608:	ands	r1, r1, #3
    160c:	bne	1588 <o_base64_decode@@Base+0x30>
    1610:	mov	r9, #0
    1614:	str	r9, [r8]
    1618:	cmp	r5, #0
    161c:	beq	172c <o_base64_decode@@Base+0x1d4>
    1620:	mov	r7, #0
    1624:	b	1634 <o_base64_decode@@Base+0xdc>
    1628:	add	r6, r6, #1
    162c:	subs	r5, r5, #1
    1630:	beq	172c <o_base64_decode@@Base+0x1d4>
    1634:	ldrb	r1, [r6]
    1638:	ldr	r0, [pc, #252]	; 173c <o_base64_decode@@Base+0x1e4>
    163c:	add	r0, pc, r0
    1640:	bl	1234 <o_strchr@plt>
    1644:	cmp	r0, #0
    1648:	bne	1668 <o_base64_decode@@Base+0x110>
    164c:	ldrb	r0, [r6]
    1650:	sub	r1, r0, #9
    1654:	cmp	r1, #2
    1658:	bcc	1668 <o_base64_decode@@Base+0x110>
    165c:	cmp	r0, #61	; 0x3d
    1660:	cmpne	r0, #32
    1664:	bne	1700 <o_base64_decode@@Base+0x1a8>
    1668:	ldrb	r0, [r6]
    166c:	ldrb	r1, [r4, r0]
    1670:	cmp	r1, #128	; 0x80
    1674:	beq	1628 <o_base64_decode@@Base+0xd0>
    1678:	add	r2, sp, #4
    167c:	strb	r1, [r2, r7]
    1680:	cmp	r0, #61	; 0x3d
    1684:	addeq	r9, r9, #1
    1688:	add	r7, r7, #1
    168c:	cmp	r7, #4
    1690:	bne	1628 <o_base64_decode@@Base+0xd0>
    1694:	mov	r0, #0
    1698:	cmp	sl, #0
    169c:	mov	r2, #0
    16a0:	beq	16e0 <o_base64_decode@@Base+0x188>
    16a4:	ldrb	r1, [sp, #4]
    16a8:	ldrb	r2, [sp, #5]
    16ac:	lsr	r2, r2, #4
    16b0:	orr	r1, r2, r1, lsl #2
    16b4:	strb	r1, [sl]
    16b8:	ldrb	r1, [sp, #5]
    16bc:	ldrb	r2, [sp, #6]
    16c0:	lsr	r2, r2, #2
    16c4:	orr	r1, r2, r1, lsl #4
    16c8:	strb	r1, [sl, #1]
    16cc:	ldrb	r1, [sp, #6]
    16d0:	ldrb	r2, [sp, #7]
    16d4:	orr	r1, r2, r1, lsl #6
    16d8:	strb	r1, [sl, #2]
    16dc:	add	r2, sl, #3
    16e0:	ldr	r1, [r8]
    16e4:	add	r3, r1, #3
    16e8:	str	r3, [r8]
    16ec:	cmp	r9, #0
    16f0:	bne	170c <o_base64_decode@@Base+0x1b4>
    16f4:	mov	sl, r2
    16f8:	mov	r7, r9
    16fc:	b	1628 <o_base64_decode@@Base+0xd0>
    1700:	mov	r0, #0
    1704:	sub	sp, fp, #28
    1708:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    170c:	cmp	r9, #2
    1710:	beq	1724 <o_base64_decode@@Base+0x1cc>
    1714:	cmp	r9, #1
    1718:	bne	1588 <o_base64_decode@@Base+0x30>
    171c:	add	r0, r1, #2
    1720:	b	1728 <o_base64_decode@@Base+0x1d0>
    1724:	add	r0, r1, #1
    1728:	str	r0, [r8]
    172c:	mov	r0, #1
    1730:	sub	sp, fp, #28
    1734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1738:	ldrdeq	r1, [r0], -r0
    173c:	andeq	r1, r0, r4, asr #8

00001740 <o_base64url_encode@@Base>:
    1740:	push	{r4, r5, fp, lr}
    1744:	add	fp, sp, #8
    1748:	mov	r4, r3
    174c:	cmp	r2, #0
    1750:	beq	1798 <o_base64url_encode@@Base+0x58>
    1754:	mov	r5, r2
    1758:	mov	r3, r4
    175c:	bl	10fc <o_base64_encode@plt>
    1760:	cmp	r0, #0
    1764:	beq	17e8 <o_base64url_encode@@Base+0xa8>
    1768:	ldr	r1, [r4]
    176c:	cmp	r1, #2
    1770:	bcc	17f0 <o_base64url_encode@@Base+0xb0>
    1774:	sub	r2, r1, #2
    1778:	ldrb	r3, [r5, r2]
    177c:	cmp	r3, #61	; 0x3d
    1780:	bne	17f8 <o_base64url_encode@@Base+0xb8>
    1784:	mov	r1, #0
    1788:	strb	r1, [r5, r2]
    178c:	ldr	r1, [r4]
    1790:	sub	r1, r1, #2
    1794:	b	1818 <o_base64url_encode@@Base+0xd8>
    1798:	mov	r0, #0
    179c:	cmp	r1, #0
    17a0:	cmpne	r4, #0
    17a4:	beq	1870 <o_base64url_encode@@Base+0x130>
    17a8:	vmov	s0, r1
    17ac:	vmov.f64	d16, #16	; 0x40800000  4.0
    17b0:	vcvt.f64.u32	d17, s0
    17b4:	vmov.f64	d18, #8	; 0x40400000  3.0
    17b8:	vmul.f64	d16, d17, d16
    17bc:	vdiv.f64	d16, d16, d18
    17c0:	vmov.f64	d17, #112	; 0x3f800000  1.0
    17c4:	vrintm.f64	d18, d16
    17c8:	vadd.f64	d17, d18, d17
    17cc:	vcmp.f64	d16, d18
    17d0:	vmrs	APSR_nzcv, fpscr
    17d4:	vseleq.f64	d16, d16, d17
    17d8:	vcvt.u32.f64	s0, d16
    17dc:	vstr	s0, [r4]
    17e0:	mov	r0, #1
    17e4:	b	1870 <o_base64url_encode@@Base+0x130>
    17e8:	mov	r0, #0
    17ec:	pop	{r4, r5, fp, pc}
    17f0:	cmp	r1, #0
    17f4:	beq	1870 <o_base64url_encode@@Base+0x130>
    17f8:	sub	r1, r1, #1
    17fc:	ldrb	r2, [r5, r1]
    1800:	cmp	r2, #61	; 0x3d
    1804:	bne	1828 <o_base64url_encode@@Base+0xe8>
    1808:	mov	r2, #0
    180c:	strb	r2, [r5, r1]
    1810:	ldr	r1, [r4]
    1814:	sub	r1, r1, #1
    1818:	str	r1, [r4]
    181c:	cmp	r1, #0
    1820:	bne	1834 <o_base64url_encode@@Base+0xf4>
    1824:	b	1870 <o_base64url_encode@@Base+0x130>
    1828:	ldr	r1, [r4]
    182c:	cmp	r1, #0
    1830:	beq	1870 <o_base64url_encode@@Base+0x130>
    1834:	mov	r1, #0
    1838:	b	1854 <o_base64url_encode@@Base+0x114>
    183c:	mov	r2, #45	; 0x2d
    1840:	strb	r2, [r5, r1]
    1844:	ldr	r2, [r4]
    1848:	add	r1, r1, #1
    184c:	cmp	r1, r2
    1850:	bcs	1870 <o_base64url_encode@@Base+0x130>
    1854:	ldrb	r2, [r5, r1]
    1858:	cmp	r2, #43	; 0x2b
    185c:	beq	183c <o_base64url_encode@@Base+0xfc>
    1860:	cmp	r2, #47	; 0x2f
    1864:	bne	1844 <o_base64url_encode@@Base+0x104>
    1868:	mov	r2, #95	; 0x5f
    186c:	b	1840 <o_base64url_encode@@Base+0x100>
    1870:	pop	{r4, r5, fp, pc}

00001874 <o_base64url_decode@@Base>:
    1874:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1878:	add	fp, sp, #24
    187c:	sub	sp, sp, #8
    1880:	mov	r7, #0
    1884:	cmp	r0, #0
    1888:	beq	18f4 <o_base64url_decode@@Base+0x80>
    188c:	mov	r8, r3
    1890:	mov	r9, r2
    1894:	mov	r5, r1
    1898:	mov	r6, r0
    189c:	add	r0, r1, #3
    18a0:	bl	11b0 <o_malloc@plt>
    18a4:	cmp	r0, #0
    18a8:	beq	18f4 <o_base64url_decode@@Base+0x80>
    18ac:	mov	r4, r0
    18b0:	add	r3, sp, #4
    18b4:	mov	r0, r6
    18b8:	mov	r1, r5
    18bc:	mov	r2, r4
    18c0:	bl	11ec <o_base64url_2_base64@plt>
    18c4:	cmp	r0, #0
    18c8:	beq	18e8 <o_base64url_decode@@Base+0x74>
    18cc:	ldr	r1, [sp, #4]
    18d0:	mov	r0, r4
    18d4:	mov	r2, r9
    18d8:	mov	r3, r8
    18dc:	bl	1204 <o_base64_decode@plt>
    18e0:	mov	r7, r0
    18e4:	b	18ec <o_base64url_decode@@Base+0x78>
    18e8:	mov	r7, #1
    18ec:	mov	r0, r4
    18f0:	bl	10cc <o_free@plt>
    18f4:	mov	r0, r7
    18f8:	sub	sp, fp, #24
    18fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

00001900 <o_base64url_2_base64@@Base>:
    1900:	push	{r4, r5, r6, sl, fp, lr}
    1904:	add	fp, sp, #16
    1908:	cmp	r0, #0
    190c:	beq	1978 <o_base64url_2_base64@@Base+0x78>
    1910:	mov	r4, r3
    1914:	mov	r5, r2
    1918:	mov	r6, r1
    191c:	mov	r1, r0
    1920:	mov	r0, r2
    1924:	mov	r2, r6
    1928:	bl	10e4 <memcpy@plt>
    192c:	str	r6, [r4]
    1930:	mov	r0, #1
    1934:	cmp	r6, #0
    1938:	beq	19c0 <o_base64url_2_base64@@Base+0xc0>
    193c:	mov	r1, r5
    1940:	mov	r2, r6
    1944:	b	195c <o_base64url_2_base64@@Base+0x5c>
    1948:	mov	r3, #43	; 0x2b
    194c:	strb	r3, [r1]
    1950:	add	r1, r1, #1
    1954:	subs	r2, r2, #1
    1958:	beq	1980 <o_base64url_2_base64@@Base+0x80>
    195c:	ldrb	r3, [r1]
    1960:	cmp	r3, #45	; 0x2d
    1964:	beq	1948 <o_base64url_2_base64@@Base+0x48>
    1968:	cmp	r3, #95	; 0x5f
    196c:	bne	1950 <o_base64url_2_base64@@Base+0x50>
    1970:	mov	r3, #47	; 0x2f
    1974:	b	194c <o_base64url_2_base64@@Base+0x4c>
    1978:	mov	r0, #0
    197c:	pop	{r4, r5, r6, sl, fp, pc}
    1980:	and	r1, r6, #3
    1984:	cmp	r1, #3
    1988:	beq	19ac <o_base64url_2_base64@@Base+0xac>
    198c:	cmp	r1, #2
    1990:	bne	19c0 <o_base64url_2_base64@@Base+0xc0>
    1994:	add	r1, r5, r6
    1998:	movw	r2, #15677	; 0x3d3d
    199c:	strh	r2, [r1]
    19a0:	ldr	r1, [r4]
    19a4:	add	r1, r1, #2
    19a8:	b	19bc <o_base64url_2_base64@@Base+0xbc>
    19ac:	mov	r1, #61	; 0x3d
    19b0:	strb	r1, [r5, r6]
    19b4:	ldr	r1, [r4]
    19b8:	add	r1, r1, #1
    19bc:	str	r1, [r4]
    19c0:	pop	{r4, r5, r6, sl, fp, pc}

000019c4 <o_base64_2_base64url@@Base>:
    19c4:	push	{r4, r5, r6, sl, fp, lr}
    19c8:	add	fp, sp, #16
    19cc:	cmp	r0, #0
    19d0:	beq	1a6c <o_base64_2_base64url@@Base+0xa8>
    19d4:	mov	r4, r3
    19d8:	mov	r5, r2
    19dc:	mov	r6, r1
    19e0:	mov	r1, r0
    19e4:	mov	r0, r2
    19e8:	mov	r2, r6
    19ec:	bl	10e4 <memcpy@plt>
    19f0:	str	r6, [r4]
    19f4:	cmp	r6, #0
    19f8:	beq	1a34 <o_base64_2_base64url@@Base+0x70>
    19fc:	mov	r0, r5
    1a00:	b	1a18 <o_base64_2_base64url@@Base+0x54>
    1a04:	mov	r1, #45	; 0x2d
    1a08:	strb	r1, [r0]
    1a0c:	add	r0, r0, #1
    1a10:	subs	r6, r6, #1
    1a14:	beq	1a34 <o_base64_2_base64url@@Base+0x70>
    1a18:	ldrb	r1, [r0]
    1a1c:	cmp	r1, #43	; 0x2b
    1a20:	beq	1a04 <o_base64_2_base64url@@Base+0x40>
    1a24:	cmp	r1, #47	; 0x2f
    1a28:	bne	1a0c <o_base64_2_base64url@@Base+0x48>
    1a2c:	mov	r1, #95	; 0x5f
    1a30:	b	1a08 <o_base64_2_base64url@@Base+0x44>
    1a34:	ldr	r1, [r4]
    1a38:	add	r0, r1, r5
    1a3c:	ldrb	r2, [r0, #-1]
    1a40:	mov	r0, #1
    1a44:	cmp	r2, #61	; 0x3d
    1a48:	bne	1a68 <o_base64_2_base64url@@Base+0xa4>
    1a4c:	sub	r2, r5, #2
    1a50:	sub	r3, r1, #1
    1a54:	str	r3, [r4]
    1a58:	ldrb	r1, [r2, r1]
    1a5c:	cmp	r1, #61	; 0x3d
    1a60:	mov	r1, r3
    1a64:	beq	1a50 <o_base64_2_base64url@@Base+0x8c>
    1a68:	pop	{r4, r5, r6, sl, fp, pc}
    1a6c:	mov	r0, #0
    1a70:	pop	{r4, r5, r6, sl, fp, pc}

00001a74 <o_malloc@@Base>:
    1a74:	cmp	r0, #0
    1a78:	moveq	r0, #0
    1a7c:	bxeq	lr
    1a80:	ldr	r1, [pc, #4]	; 1a8c <o_malloc@@Base+0x18>
    1a84:	ldr	r1, [pc, r1]
    1a88:	bx	r1
    1a8c:	andeq	r1, r1, ip, lsr #12

00001a90 <o_realloc@@Base>:
    1a90:	cmp	r1, #0
    1a94:	moveq	r0, #0
    1a98:	bxeq	lr
    1a9c:	ldr	r2, [pc, #4]	; 1aa8 <o_realloc@@Base+0x18>
    1aa0:	ldr	r2, [pc, r2]
    1aa4:	bx	r2
    1aa8:	andeq	r1, r1, r4, lsl r6

00001aac <o_free@@Base>:
    1aac:	cmp	r0, #0
    1ab0:	bxeq	lr
    1ab4:	ldr	r1, [pc, #4]	; 1ac0 <o_free@@Base+0x14>
    1ab8:	ldr	r1, [pc, r1]
    1abc:	bx	r1
    1ac0:	andeq	r1, r1, r0, lsl #12

00001ac4 <o_set_alloc_funcs@@Base>:
    1ac4:	ldr	r3, [pc, #32]	; 1aec <o_set_alloc_funcs@@Base+0x28>
    1ac8:	add	r3, pc, r3
    1acc:	str	r1, [r3]
    1ad0:	ldr	r1, [pc, #24]	; 1af0 <o_set_alloc_funcs@@Base+0x2c>
    1ad4:	add	r1, pc, r1
    1ad8:	str	r0, [r1]
    1adc:	ldr	r0, [pc, #16]	; 1af4 <o_set_alloc_funcs@@Base+0x30>
    1ae0:	add	r0, pc, r0
    1ae4:	str	r2, [r0]
    1ae8:	bx	lr
    1aec:	andeq	r1, r1, ip, ror #11
    1af0:	ldrdeq	r1, [r1], -ip
    1af4:	ldrdeq	r1, [r1], -r8

00001af8 <o_get_alloc_funcs@@Base>:
    1af8:	cmp	r0, #0
    1afc:	beq	1b0c <o_get_alloc_funcs@@Base+0x14>
    1b00:	ldr	r3, [pc, #48]	; 1b38 <o_get_alloc_funcs@@Base+0x40>
    1b04:	ldr	r3, [pc, r3]
    1b08:	str	r3, [r0]
    1b0c:	cmp	r1, #0
    1b10:	beq	1b20 <o_get_alloc_funcs@@Base+0x28>
    1b14:	ldr	r0, [pc, #32]	; 1b3c <o_get_alloc_funcs@@Base+0x44>
    1b18:	ldr	r0, [pc, r0]
    1b1c:	str	r0, [r1]
    1b20:	cmp	r2, #0
    1b24:	bxeq	lr
    1b28:	ldr	r0, [pc, #16]	; 1b40 <o_get_alloc_funcs@@Base+0x48>
    1b2c:	ldr	r0, [pc, r0]
    1b30:	str	r0, [r2]
    1b34:	bx	lr
    1b38:	andeq	r1, r1, ip, lsr #11
    1b3c:	muleq	r1, ip, r5
    1b40:	andeq	r1, r1, ip, lsl #11

00001b44 <str_replace@@Base>:
    1b44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
    1b48:	add	fp, sp, #24
    1b4c:	sub	sp, sp, #8
    1b50:	mov	r4, #0
    1b54:	cmp	r0, #0
    1b58:	beq	1b70 <str_replace@@Base+0x2c>
    1b5c:	mov	r7, r1
    1b60:	cmp	r1, #0
    1b64:	movne	r5, r2
    1b68:	cmpne	r2, #0
    1b6c:	bne	1b7c <str_replace@@Base+0x38>
    1b70:	mov	r0, r4
    1b74:	sub	sp, fp, #24
    1b78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
    1b7c:	mov	r6, r0
    1b80:	mov	r1, r7
    1b84:	bl	1078 <strstr@plt>
    1b88:	cmp	r0, #0
    1b8c:	beq	1c58 <str_replace@@Base+0x114>
    1b90:	sub	r9, r0, r6
    1b94:	add	r0, r9, #1
    1b98:	bl	11b0 <o_malloc@plt>
    1b9c:	cmp	r0, #0
    1ba0:	beq	1b70 <str_replace@@Base+0x2c>
    1ba4:	mov	r8, r0
    1ba8:	mov	r1, r6
    1bac:	mov	r2, r9
    1bb0:	bl	10e4 <memcpy@plt>
    1bb4:	mov	r4, #0
    1bb8:	strb	r4, [r8, r9]
    1bbc:	mov	r0, r8
    1bc0:	bl	1180 <strlen@plt>
    1bc4:	add	r6, r6, r0
    1bc8:	mov	r0, r7
    1bcc:	bl	1180 <strlen@plt>
    1bd0:	add	r0, r6, r0
    1bd4:	mov	r1, r7
    1bd8:	mov	r2, r5
    1bdc:	bl	115c <str_replace@plt>
    1be0:	cmp	r0, #0
    1be4:	beq	1c68 <str_replace@@Base+0x124>
    1be8:	mov	r7, r0
    1bec:	mov	r0, r5
    1bf0:	bl	1180 <strlen@plt>
    1bf4:	add	r4, r9, r0
    1bf8:	mov	r0, r7
    1bfc:	bl	1180 <strlen@plt>
    1c00:	add	r0, r4, r0
    1c04:	add	r6, r0, #1
    1c08:	mov	r0, r6
    1c0c:	bl	11b0 <o_malloc@plt>
    1c10:	cmp	r0, #0
    1c14:	beq	1c74 <str_replace@@Base+0x130>
    1c18:	mov	r4, r0
    1c1c:	stm	sp, {r5, r7}
    1c20:	ldr	r2, [pc, #100]	; 1c8c <str_replace@@Base+0x148>
    1c24:	add	r2, pc, r2
    1c28:	mov	r1, r6
    1c2c:	mov	r3, r8
    1c30:	bl	11a4 <snprintf@plt>
    1c34:	mov	r5, r0
    1c38:	mov	r0, r8
    1c3c:	bl	10cc <o_free@plt>
    1c40:	mov	r0, r7
    1c44:	bl	10cc <o_free@plt>
    1c48:	cmn	r5, #1
    1c4c:	bgt	1b70 <str_replace@@Base+0x2c>
    1c50:	mov	r0, r4
    1c54:	b	1c80 <str_replace@@Base+0x13c>
    1c58:	mov	r0, r6
    1c5c:	sub	sp, fp, #24
    1c60:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
    1c64:	b	1c90 <o_strdup@@Base>
    1c68:	mov	r0, r8
    1c6c:	bl	10cc <o_free@plt>
    1c70:	b	1b70 <str_replace@@Base+0x2c>
    1c74:	mov	r0, r8
    1c78:	bl	10cc <o_free@plt>
    1c7c:	mov	r0, r7
    1c80:	bl	10cc <o_free@plt>
    1c84:	mov	r4, #0
    1c88:	b	1b70 <str_replace@@Base+0x2c>
    1c8c:	muleq	r0, sp, lr

00001c90 <o_strdup@@Base>:
    1c90:	cmp	r0, #0
    1c94:	moveq	r0, #0
    1c98:	bxeq	lr
    1c9c:	push	{r4, sl, fp, lr}
    1ca0:	add	fp, sp, #8
    1ca4:	mov	r4, r0
    1ca8:	bl	1180 <strlen@plt>
    1cac:	mov	r1, r0
    1cb0:	mov	r0, r4
    1cb4:	pop	{r4, sl, fp, lr}
    1cb8:	b	1e30 <o_strndup@@Base>

00001cbc <msprintf@@Base>:
    1cbc:	sub	sp, sp, #12
    1cc0:	push	{r4, r5, r6, r7, fp, lr}
    1cc4:	add	fp, sp, #16
    1cc8:	sub	sp, sp, #12
    1ccc:	add	ip, fp, #8
    1cd0:	stm	ip, {r1, r2, r3}
    1cd4:	cmp	r0, #0
    1cd8:	beq	1d30 <msprintf@@Base+0x74>
    1cdc:	mov	r4, r0
    1ce0:	add	r3, fp, #8
    1ce4:	str	r3, [sp, #4]
    1ce8:	str	r3, [sp, #8]
    1cec:	mov	r5, #0
    1cf0:	mov	r0, #0
    1cf4:	mov	r1, #0
    1cf8:	mov	r2, r4
    1cfc:	bl	1210 <vsnprintf@plt>
    1d00:	add	r6, r0, #1
    1d04:	mov	r0, r6
    1d08:	bl	11b0 <o_malloc@plt>
    1d0c:	cmp	r0, #0
    1d10:	beq	1d34 <msprintf@@Base+0x78>
    1d14:	mov	r7, r0
    1d18:	ldr	r3, [sp, #4]
    1d1c:	mov	r1, r6
    1d20:	mov	r2, r4
    1d24:	bl	1210 <vsnprintf@plt>
    1d28:	mov	r5, r7
    1d2c:	b	1d34 <msprintf@@Base+0x78>
    1d30:	mov	r5, #0
    1d34:	mov	r0, r5
    1d38:	sub	sp, fp, #16
    1d3c:	pop	{r4, r5, r6, r7, fp, lr}
    1d40:	add	sp, sp, #12
    1d44:	bx	lr

00001d48 <mstrcatf@@Base>:
    1d48:	sub	sp, sp, #8
    1d4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    1d50:	add	fp, sp, #24
    1d54:	sub	sp, sp, #8
    1d58:	str	r2, [fp, #8]
    1d5c:	str	r3, [fp, #12]
    1d60:	cmp	r1, #0
    1d64:	beq	1df0 <mstrcatf@@Base+0xa8>
    1d68:	mov	r5, r1
    1d6c:	mov	r8, r0
    1d70:	add	r3, fp, #8
    1d74:	str	r3, [sp]
    1d78:	str	r3, [sp, #4]
    1d7c:	mov	r6, #0
    1d80:	mov	r0, #0
    1d84:	mov	r1, #0
    1d88:	mov	r2, r5
    1d8c:	bl	1210 <vsnprintf@plt>
    1d90:	add	r4, r0, #1
    1d94:	mov	r0, r4
    1d98:	bl	11b0 <o_malloc@plt>
    1d9c:	mov	r7, r0
    1da0:	cmp	r8, #0
    1da4:	beq	1df8 <mstrcatf@@Base+0xb0>
    1da8:	cmp	r7, #0
    1dac:	beq	1e18 <mstrcatf@@Base+0xd0>
    1db0:	ldr	r3, [sp]
    1db4:	mov	r0, r7
    1db8:	mov	r1, r4
    1dbc:	mov	r2, r5
    1dc0:	bl	1210 <vsnprintf@plt>
    1dc4:	ldr	r0, [pc, #96]	; 1e2c <mstrcatf@@Base+0xe4>
    1dc8:	add	r0, pc, r0
    1dcc:	mov	r1, r8
    1dd0:	mov	r2, r7
    1dd4:	bl	11e0 <msprintf@plt>
    1dd8:	mov	r6, r0
    1ddc:	mov	r0, r7
    1de0:	bl	10cc <o_free@plt>
    1de4:	mov	r0, r8
    1de8:	bl	10cc <o_free@plt>
    1dec:	b	1e18 <mstrcatf@@Base+0xd0>
    1df0:	mov	r6, #0
    1df4:	b	1e18 <mstrcatf@@Base+0xd0>
    1df8:	cmp	r7, #0
    1dfc:	beq	1e14 <mstrcatf@@Base+0xcc>
    1e00:	ldr	r3, [sp]
    1e04:	mov	r0, r7
    1e08:	mov	r1, r4
    1e0c:	mov	r2, r5
    1e10:	bl	1210 <vsnprintf@plt>
    1e14:	mov	r6, r7
    1e18:	mov	r0, r6
    1e1c:	sub	sp, fp, #24
    1e20:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
    1e24:	add	sp, sp, #8
    1e28:	bx	lr
    1e2c:	strdeq	r0, [r0], -fp

00001e30 <o_strndup@@Base>:
    1e30:	push	{r4, r5, r6, r7, fp, lr}
    1e34:	add	fp, sp, #16
    1e38:	mov	r5, #0
    1e3c:	cmp	r0, #0
    1e40:	beq	1e78 <o_strndup@@Base+0x48>
    1e44:	mov	r4, r1
    1e48:	mov	r6, r0
    1e4c:	add	r0, r1, #1
    1e50:	bl	11b0 <o_malloc@plt>
    1e54:	cmp	r0, #0
    1e58:	beq	1e78 <o_strndup@@Base+0x48>
    1e5c:	mov	r7, r0
    1e60:	mov	r1, r6
    1e64:	mov	r2, r4
    1e68:	bl	10e4 <memcpy@plt>
    1e6c:	mov	r0, #0
    1e70:	strb	r0, [r7, r4]
    1e74:	mov	r5, r7
    1e78:	mov	r0, r5
    1e7c:	pop	{r4, r5, r6, r7, fp, pc}

00001e80 <o_strcmp@@Base>:
    1e80:	orrs	r2, r0, r1
    1e84:	mov	r2, #0
    1e88:	beq	1eac <o_strcmp@@Base+0x2c>
    1e8c:	mov	r3, #1
    1e90:	cmp	r1, #0
    1e94:	mov	r2, #1
    1e98:	mvneq	r2, #0
    1e9c:	cmp	r0, #0
    1ea0:	moveq	r2, r3
    1ea4:	cmpne	r1, #0
    1ea8:	bne	1eb4 <o_strcmp@@Base+0x34>
    1eac:	mov	r0, r2
    1eb0:	bx	lr
    1eb4:	b	10a8 <strcmp@plt>

00001eb8 <o_strncmp@@Base>:
    1eb8:	mov	r3, r0
    1ebc:	orrs	r0, r0, r1
    1ec0:	mov	r0, #0
    1ec4:	cmpne	r2, #0
    1ec8:	bne	1ed0 <o_strncmp@@Base+0x18>
    1ecc:	bx	lr
    1ed0:	mov	ip, #1
    1ed4:	cmp	r1, #0
    1ed8:	mov	r0, #1
    1edc:	mvneq	r0, #0
    1ee0:	cmp	r3, #0
    1ee4:	moveq	r0, ip
    1ee8:	cmpne	r1, #0
    1eec:	bxeq	lr
    1ef0:	mov	r0, r3
    1ef4:	b	1228 <strncmp@plt>

00001ef8 <o_strcpy@@Base>:
    1ef8:	mov	r2, #0
    1efc:	cmp	r0, #0
    1f00:	cmpne	r1, #0
    1f04:	bne	1f10 <o_strcpy@@Base+0x18>
    1f08:	mov	r0, r2
    1f0c:	bx	lr
    1f10:	push	{fp, lr}
    1f14:	mov	fp, sp
    1f18:	bl	112c <strcpy@plt>
    1f1c:	mov	r2, r0
    1f20:	pop	{fp, lr}
    1f24:	mov	r0, r2
    1f28:	bx	lr

00001f2c <o_strncpy@@Base>:
    1f2c:	mov	r3, #0
    1f30:	cmp	r0, #0
    1f34:	cmpne	r1, #0
    1f38:	bne	1f44 <o_strncpy@@Base+0x18>
    1f3c:	mov	r0, r3
    1f40:	bx	lr
    1f44:	push	{fp, lr}
    1f48:	mov	fp, sp
    1f4c:	bl	11c8 <strncpy@plt>
    1f50:	mov	r3, r0
    1f54:	pop	{fp, lr}
    1f58:	mov	r0, r3
    1f5c:	bx	lr

00001f60 <o_strcasecmp@@Base>:
    1f60:	orrs	r2, r0, r1
    1f64:	mov	r2, #0
    1f68:	beq	1f94 <o_strcasecmp@@Base+0x34>
    1f6c:	cmp	r0, #0
    1f70:	beq	1f80 <o_strcasecmp@@Base+0x20>
    1f74:	mvn	r2, #0
    1f78:	cmp	r1, #0
    1f7c:	beq	1f94 <o_strcasecmp@@Base+0x34>
    1f80:	cmp	r0, #0
    1f84:	bne	1f9c <o_strcasecmp@@Base+0x3c>
    1f88:	mov	r2, #1
    1f8c:	cmp	r1, #0
    1f90:	beq	1f9c <o_strcasecmp@@Base+0x3c>
    1f94:	mov	r0, r2
    1f98:	bx	lr
    1f9c:	b	1108 <strcasecmp@plt>

00001fa0 <o_strncasecmp@@Base>:
    1fa0:	orrs	r3, r0, r1
    1fa4:	mov	r3, #0
    1fa8:	cmpne	r2, #0
    1fac:	bne	1fb8 <o_strncasecmp@@Base+0x18>
    1fb0:	mov	r0, r3
    1fb4:	bx	lr
    1fb8:	cmp	r0, #0
    1fbc:	beq	1fcc <o_strncasecmp@@Base+0x2c>
    1fc0:	mvn	r3, #0
    1fc4:	cmp	r1, #0
    1fc8:	beq	1fb0 <o_strncasecmp@@Base+0x10>
    1fcc:	cmp	r0, #0
    1fd0:	bne	1fe0 <o_strncasecmp@@Base+0x40>
    1fd4:	mov	r3, #1
    1fd8:	cmp	r1, #0
    1fdc:	bne	1fb0 <o_strncasecmp@@Base+0x10>
    1fe0:	b	1198 <strncasecmp@plt>

00001fe4 <o_strstr@@Base>:
    1fe4:	cmp	r0, #0
    1fe8:	cmpne	r1, #0
    1fec:	bne	1ff8 <o_strstr@@Base+0x14>
    1ff0:	mov	r0, #0
    1ff4:	bx	lr
    1ff8:	b	1078 <strstr@plt>

00001ffc <o_strchr@@Base>:
    1ffc:	cmp	r0, #0
    2000:	moveq	r0, #0
    2004:	bxeq	lr
    2008:	b	118c <strchr@plt>

0000200c <o_strnchr@@Base>:
    200c:	push	{r4, r5, r6, r7, fp, lr}
    2010:	add	fp, sp, #16
    2014:	mov	r4, #0
    2018:	cmp	r0, #0
    201c:	movne	r7, r1
    2020:	cmpne	r1, #0
    2024:	bne	2030 <o_strnchr@@Base+0x24>
    2028:	mov	r0, r4
    202c:	pop	{r4, r5, r6, r7, fp, pc}
    2030:	mov	r5, r2
    2034:	mov	r6, r0
    2038:	bl	1138 <o_strlen@plt>
    203c:	cmp	r0, #0
    2040:	beq	2028 <o_strnchr@@Base+0x1c>
    2044:	ldrb	r1, [r6]
    2048:	cmp	r1, r5
    204c:	beq	2064 <o_strnchr@@Base+0x58>
    2050:	subs	r7, r7, #1
    2054:	sub	r0, r0, #1
    2058:	add	r6, r6, #1
    205c:	bne	203c <o_strnchr@@Base+0x30>
    2060:	b	2028 <o_strnchr@@Base+0x1c>
    2064:	mov	r4, r6
    2068:	mov	r0, r4
    206c:	pop	{r4, r5, r6, r7, fp, pc}

00002070 <o_strlen@@Base>:
    2070:	cmp	r0, #0
    2074:	moveq	r0, #0
    2078:	bxeq	lr
    207c:	b	1180 <strlen@plt>

00002080 <o_strrchr@@Base>:
    2080:	cmp	r0, #0
    2084:	moveq	r0, #0
    2088:	bxeq	lr
    208c:	b	11f8 <strrchr@plt>

00002090 <o_strrnchr@@Base>:
    2090:	push	{r4, r5, r6, r7, fp, lr}
    2094:	add	fp, sp, #16
    2098:	mov	r4, #0
    209c:	cmp	r0, #0
    20a0:	movne	r7, r1
    20a4:	cmpne	r1, #0
    20a8:	bne	20b4 <o_strrnchr@@Base+0x24>
    20ac:	mov	r0, r4
    20b0:	pop	{r4, r5, r6, r7, fp, pc}
    20b4:	mov	r5, r2
    20b8:	mov	r6, r0
    20bc:	bl	1138 <o_strlen@plt>
    20c0:	mov	r1, #1
    20c4:	subs	r2, r0, #1
    20c8:	bmi	20ac <o_strrnchr@@Base+0x1c>
    20cc:	sub	r3, r1, #1
    20d0:	cmp	r3, r7
    20d4:	bcs	20ac <o_strrnchr@@Base+0x1c>
    20d8:	add	r0, r6, r0
    20dc:	ldrb	r0, [r0, #-1]
    20e0:	add	r1, r1, #1
    20e4:	cmp	r0, r5
    20e8:	mov	r0, r2
    20ec:	bne	20c4 <o_strrnchr@@Base+0x34>
    20f0:	add	r4, r6, r2
    20f4:	mov	r0, r4
    20f8:	pop	{r4, r5, r6, r7, fp, pc}

000020fc <o_strnstr@@Base>:
    20fc:	cmp	r0, #0
    2100:	cmpne	r1, #0
    2104:	bne	2110 <o_strnstr@@Base+0x14>
    2108:	mov	r0, #0
    210c:	bx	lr
    2110:	b	2114 <o_strnstr@@Base+0x18>
    2114:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    2118:	add	fp, sp, #24
    211c:	mov	r7, r2
    2120:	mov	r8, r1
    2124:	mov	r4, r0
    2128:	mov	r0, r1
    212c:	bl	1180 <strlen@plt>
    2130:	cmp	r0, #0
    2134:	beq	2184 <o_strnstr@@Base+0x88>
    2138:	mov	r6, r0
    213c:	subs	r0, r7, r0
    2140:	bmi	218c <o_strnstr@@Base+0x90>
    2144:	add	r7, r7, #1
    2148:	ldrb	r5, [r8]
    214c:	b	2160 <o_strnstr@@Base+0x64>
    2150:	sub	r7, r7, #1
    2154:	add	r4, r4, #1
    2158:	cmp	r6, r7
    215c:	beq	218c <o_strnstr@@Base+0x90>
    2160:	ldrb	r0, [r4]
    2164:	cmp	r0, r5
    2168:	bne	2150 <o_strnstr@@Base+0x54>
    216c:	mov	r0, r4
    2170:	mov	r1, r8
    2174:	mov	r2, r6
    2178:	bl	1228 <strncmp@plt>
    217c:	cmp	r0, #0
    2180:	bne	2150 <o_strnstr@@Base+0x54>
    2184:	mov	r0, r4
    2188:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    218c:	mov	r4, #0
    2190:	mov	r0, r4
    2194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00002198 <o_strcasestr@@Base>:
    2198:	cmp	r0, #0
    219c:	cmpne	r1, #0
    21a0:	bne	21ac <o_strcasestr@@Base+0x14>
    21a4:	mov	r0, #0
    21a8:	bx	lr
    21ac:	b	109c <strcasestr@plt>

000021b0 <split_string@@Base>:
    21b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21b4:	add	fp, sp, #28
    21b8:	sub	sp, sp, #4
    21bc:	mov	r5, #0
    21c0:	cmp	r0, #0
    21c4:	movne	r8, r1
    21c8:	cmpne	r1, #0
    21cc:	bne	21dc <split_string@@Base+0x2c>
    21d0:	mov	r0, r5
    21d4:	sub	sp, fp, #28
    21d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21dc:	mov	r4, r2
    21e0:	mov	r6, r0
    21e4:	cmp	r2, #0
    21e8:	movne	r0, #0
    21ec:	strne	r0, [r4]
    21f0:	mov	r0, r6
    21f4:	mov	r1, r8
    21f8:	bl	1078 <strstr@plt>
    21fc:	cmp	r0, #0
    2200:	beq	2288 <split_string@@Base+0xd8>
    2204:	mov	r7, r0
    2208:	mov	r5, #1
    220c:	mov	r9, #4
    2210:	mov	sl, #0
    2214:	cmp	r4, #0
    2218:	bne	224c <split_string@@Base+0x9c>
    221c:	mov	r0, r8
    2220:	bl	1180 <strlen@plt>
    2224:	add	r6, r7, r0
    2228:	mov	r0, r6
    222c:	mov	r1, r8
    2230:	bl	1078 <strstr@plt>
    2234:	mov	r7, r0
    2238:	add	r5, r5, #1
    223c:	cmp	r0, #0
    2240:	beq	228c <split_string@@Base+0xdc>
    2244:	cmp	r4, #0
    2248:	beq	221c <split_string@@Base+0x6c>
    224c:	add	r1, r9, r5, lsl #2
    2250:	ldr	r0, [r4]
    2254:	bl	1150 <o_realloc@plt>
    2258:	str	r0, [r4]
    225c:	cmp	r0, #0
    2260:	beq	221c <split_string@@Base+0x6c>
    2264:	sub	r1, r7, r6
    2268:	mov	r0, r6
    226c:	bl	10c0 <o_strndup@plt>
    2270:	ldr	r1, [r4]
    2274:	add	r1, r1, r5, lsl #2
    2278:	str	r0, [r1, #-4]
    227c:	ldr	r0, [r4]
    2280:	str	sl, [r0, r5, lsl #2]
    2284:	b	221c <split_string@@Base+0x6c>
    2288:	mov	r5, #1
    228c:	cmp	r4, #0
    2290:	beq	21d0 <split_string@@Base+0x20>
    2294:	mov	r0, #4
    2298:	add	r1, r0, r5, lsl #2
    229c:	ldr	r0, [r4]
    22a0:	bl	1150 <o_realloc@plt>
    22a4:	str	r0, [r4]
    22a8:	cmp	r0, #0
    22ac:	beq	21d0 <split_string@@Base+0x20>
    22b0:	mov	r0, r6
    22b4:	bl	10f0 <o_strdup@plt>
    22b8:	ldr	r1, [r4]
    22bc:	add	r1, r1, r5, lsl #2
    22c0:	str	r0, [r1, #-4]
    22c4:	ldr	r0, [r4]
    22c8:	mov	r1, #0
    22cc:	str	r1, [r0, r5, lsl #2]
    22d0:	b	21d0 <split_string@@Base+0x20>

000022d4 <free_string_array@@Base>:
    22d4:	cmp	r0, #0
    22d8:	bxeq	lr
    22dc:	push	{r4, r5, r6, sl, fp, lr}
    22e0:	add	fp, sp, #16
    22e4:	mov	r4, r0
    22e8:	ldr	r0, [r0]
    22ec:	cmp	r0, #0
    22f0:	beq	2310 <free_string_array@@Base+0x3c>
    22f4:	add	r5, r4, #4
    22f8:	mov	r6, #0
    22fc:	bl	10cc <o_free@plt>
    2300:	str	r6, [r5, #-4]
    2304:	ldr	r0, [r5], #4
    2308:	cmp	r0, #0
    230c:	bne	22fc <free_string_array@@Base+0x28>
    2310:	mov	r0, r4
    2314:	pop	{r4, r5, r6, sl, fp, lr}
    2318:	b	10cc <o_free@plt>

0000231c <string_array_size@@Base>:
    231c:	cmp	r0, #0
    2320:	moveq	r0, #0
    2324:	bxeq	lr
    2328:	mov	r1, #0
    232c:	ldr	r2, [r0, r1, lsl #2]
    2330:	add	r1, r1, #1
    2334:	cmp	r2, #0
    2338:	bne	232c <string_array_size@@Base+0x10>
    233c:	sub	r0, r1, #1
    2340:	bx	lr

00002344 <string_array_join@@Base>:
    2344:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    2348:	add	fp, sp, #24
    234c:	mov	r5, #0
    2350:	cmp	r0, #0
    2354:	movne	r4, r1
    2358:	cmpne	r1, #0
    235c:	bne	2368 <string_array_join@@Base+0x24>
    2360:	mov	r0, r5
    2364:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    2368:	ldr	r3, [r0]
    236c:	cmp	r3, #0
    2370:	beq	2360 <string_array_join@@Base+0x1c>
    2374:	add	r6, r0, #4
    2378:	mov	r5, #0
    237c:	ldr	r8, [pc, #76]	; 23d0 <string_array_join@@Base+0x8c>
    2380:	add	r8, pc, r8
    2384:	cmp	r5, #0
    2388:	beq	23c0 <string_array_join@@Base+0x7c>
    238c:	mov	r0, r8
    2390:	mov	r1, r5
    2394:	mov	r2, r4
    2398:	bl	11e0 <msprintf@plt>
    239c:	mov	r7, r0
    23a0:	mov	r0, r5
    23a4:	bl	10cc <o_free@plt>
    23a8:	mov	r5, r7
    23ac:	ldr	r3, [r6], #4
    23b0:	cmp	r3, #0
    23b4:	beq	2360 <string_array_join@@Base+0x1c>
    23b8:	cmp	r5, #0
    23bc:	bne	238c <string_array_join@@Base+0x48>
    23c0:	mov	r0, r3
    23c4:	bl	10f0 <o_strdup@plt>
    23c8:	mov	r5, r0
    23cc:	b	23ac <string_array_join@@Base+0x68>
    23d0:	andeq	r0, r0, r1, asr #14

000023d4 <trimwhitespace@@Base>:
    23d4:	push	{r4, r5, fp, lr}
    23d8:	add	fp, sp, #8
    23dc:	cmp	r0, #0
    23e0:	beq	2458 <trimwhitespace@@Base+0x84>
    23e4:	mov	r4, r0
    23e8:	ldrb	r0, [r0]
    23ec:	cmp	r0, #0
    23f0:	beq	2450 <trimwhitespace@@Base+0x7c>
    23f4:	sub	r4, r4, #1
    23f8:	bl	1174 <__ctype_b_loc@plt>
    23fc:	ldr	r5, [r0]
    2400:	ldrb	r0, [r4, #1]!
    2404:	add	r0, r5, r0, lsl #1
    2408:	ldrb	r0, [r0, #1]
    240c:	tst	r0, #32
    2410:	bne	2400 <trimwhitespace@@Base+0x2c>
    2414:	mov	r0, r4
    2418:	bl	1138 <o_strlen@plt>
    241c:	add	r0, r4, r0
    2420:	sub	r1, r0, #1
    2424:	mov	r0, r1
    2428:	cmp	r1, r4
    242c:	bls	2448 <trimwhitespace@@Base+0x74>
    2430:	mov	r1, r0
    2434:	ldrb	r2, [r1], #-1
    2438:	add	r2, r5, r2, lsl #1
    243c:	ldrb	r2, [r2, #1]
    2440:	tst	r2, #32
    2444:	bne	2424 <trimwhitespace@@Base+0x50>
    2448:	mov	r1, #0
    244c:	strb	r1, [r0, #1]
    2450:	mov	r0, r4
    2454:	pop	{r4, r5, fp, pc}
    2458:	mov	r4, #0
    245c:	mov	r0, r4
    2460:	pop	{r4, r5, fp, pc}

00002464 <trimcharacter@@Base>:
    2464:	push	{r4, r5, fp, lr}
    2468:	add	fp, sp, #8
    246c:	cmp	r0, #0
    2470:	beq	24d4 <trimcharacter@@Base+0x70>
    2474:	mov	r4, r0
    2478:	ldrb	r0, [r0]
    247c:	cmp	r0, #0
    2480:	beq	24cc <trimcharacter@@Base+0x68>
    2484:	mov	r5, r1
    2488:	sub	r4, r4, #1
    248c:	ldrb	r0, [r4, #1]!
    2490:	cmp	r0, r5
    2494:	beq	248c <trimcharacter@@Base+0x28>
    2498:	mov	r0, r4
    249c:	bl	1138 <o_strlen@plt>
    24a0:	add	r0, r4, r0
    24a4:	sub	r1, r0, #1
    24a8:	mov	r0, r1
    24ac:	cmp	r1, r4
    24b0:	bls	24c4 <trimcharacter@@Base+0x60>
    24b4:	mov	r1, r0
    24b8:	ldrb	r2, [r1], #-1
    24bc:	cmp	r2, r5
    24c0:	beq	24a8 <trimcharacter@@Base+0x44>
    24c4:	mov	r1, #0
    24c8:	strb	r1, [r0, #1]
    24cc:	mov	r0, r4
    24d0:	pop	{r4, r5, fp, pc}
    24d4:	mov	r4, #0
    24d8:	mov	r0, r4
    24dc:	pop	{r4, r5, fp, pc}

000024e0 <string_array_has_value@@Base>:
    24e0:	push	{r4, r5, r6, sl, fp, lr}
    24e4:	add	fp, sp, #16
    24e8:	mov	r4, #0
    24ec:	cmp	r0, #0
    24f0:	movne	r5, r1
    24f4:	cmpne	r1, #0
    24f8:	bne	2504 <string_array_has_value@@Base+0x24>
    24fc:	mov	r0, r4
    2500:	pop	{r4, r5, r6, sl, fp, pc}
    2504:	mov	r1, r0
    2508:	ldr	r0, [r0]
    250c:	cmp	r0, #0
    2510:	beq	24fc <string_array_has_value@@Base+0x1c>
    2514:	add	r6, r1, #4
    2518:	mov	r1, r5
    251c:	bl	1114 <o_strcmp@plt>
    2520:	cmp	r0, #0
    2524:	beq	2538 <string_array_has_value@@Base+0x58>
    2528:	ldr	r0, [r6], #4
    252c:	cmp	r0, #0
    2530:	bne	2518 <string_array_has_value@@Base+0x38>
    2534:	b	24fc <string_array_has_value@@Base+0x1c>
    2538:	mov	r4, #1
    253c:	mov	r0, r4
    2540:	pop	{r4, r5, r6, sl, fp, pc}

00002544 <string_array_has_value_case@@Base>:
    2544:	push	{r4, r5, r6, sl, fp, lr}
    2548:	add	fp, sp, #16
    254c:	mov	r4, #0
    2550:	cmp	r0, #0
    2554:	movne	r5, r1
    2558:	cmpne	r1, #0
    255c:	bne	2568 <string_array_has_value_case@@Base+0x24>
    2560:	mov	r0, r4
    2564:	pop	{r4, r5, r6, sl, fp, pc}
    2568:	mov	r1, r0
    256c:	ldr	r0, [r0]
    2570:	cmp	r0, #0
    2574:	beq	2560 <string_array_has_value_case@@Base+0x1c>
    2578:	add	r6, r1, #4
    257c:	mov	r1, r5
    2580:	bl	1144 <o_strcasecmp@plt>
    2584:	cmp	r0, #0
    2588:	beq	259c <string_array_has_value_case@@Base+0x58>
    258c:	ldr	r0, [r6], #4
    2590:	cmp	r0, #0
    2594:	bne	257c <string_array_has_value_case@@Base+0x38>
    2598:	b	2560 <string_array_has_value_case@@Base+0x1c>
    259c:	mov	r4, #1
    25a0:	mov	r0, r4
    25a4:	pop	{r4, r5, r6, sl, fp, pc}

000025a8 <string_array_has_value_n@@Base>:
    25a8:	push	{r4, r5, r6, r7, fp, lr}
    25ac:	add	fp, sp, #16
    25b0:	mov	r4, #0
    25b4:	cmp	r0, #0
    25b8:	movne	r6, r1
    25bc:	cmpne	r1, #0
    25c0:	bne	25cc <string_array_has_value_n@@Base+0x24>
    25c4:	mov	r0, r4
    25c8:	pop	{r4, r5, r6, r7, fp, pc}
    25cc:	mov	r1, r0
    25d0:	ldr	r0, [r0]
    25d4:	cmp	r0, #0
    25d8:	beq	25c4 <string_array_has_value_n@@Base+0x1c>
    25dc:	mov	r5, r2
    25e0:	add	r7, r1, #4
    25e4:	mov	r1, r6
    25e8:	mov	r2, r5
    25ec:	bl	121c <o_strncmp@plt>
    25f0:	cmp	r0, #0
    25f4:	beq	2608 <string_array_has_value_n@@Base+0x60>
    25f8:	ldr	r0, [r7], #4
    25fc:	cmp	r0, #0
    2600:	bne	25e4 <string_array_has_value_n@@Base+0x3c>
    2604:	b	25c4 <string_array_has_value_n@@Base+0x1c>
    2608:	mov	r4, #1
    260c:	mov	r0, r4
    2610:	pop	{r4, r5, r6, r7, fp, pc}

00002614 <string_array_has_value_ncase@@Base>:
    2614:	push	{r4, r5, r6, r7, fp, lr}
    2618:	add	fp, sp, #16
    261c:	mov	r4, #0
    2620:	cmp	r0, #0
    2624:	movne	r6, r1
    2628:	cmpne	r1, #0
    262c:	bne	2638 <string_array_has_value_ncase@@Base+0x24>
    2630:	mov	r0, r4
    2634:	pop	{r4, r5, r6, r7, fp, pc}
    2638:	mov	r1, r0
    263c:	ldr	r0, [r0]
    2640:	cmp	r0, #0
    2644:	beq	2630 <string_array_has_value_ncase@@Base+0x1c>
    2648:	mov	r5, r2
    264c:	add	r7, r1, #4
    2650:	mov	r1, r6
    2654:	mov	r2, r5
    2658:	bl	1090 <o_strncasecmp@plt>
    265c:	cmp	r0, #0
    2660:	beq	2674 <string_array_has_value_ncase@@Base+0x60>
    2664:	ldr	r0, [r7], #4
    2668:	cmp	r0, #0
    266c:	bne	2650 <string_array_has_value_ncase@@Base+0x3c>
    2670:	b	2630 <string_array_has_value_ncase@@Base+0x1c>
    2674:	mov	r4, #1
    2678:	mov	r0, r4
    267c:	pop	{r4, r5, r6, r7, fp, pc}

00002680 <string_array_has_trimmed_value@@Base>:
    2680:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
    2684:	add	fp, sp, #24
    2688:	mov	r6, #0
    268c:	cmp	r0, #0
    2690:	cmpne	r1, #0
    2694:	bne	26a0 <string_array_has_trimmed_value@@Base+0x20>
    2698:	mov	r0, r6
    269c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
    26a0:	mov	r7, r0
    26a4:	mov	r0, r1
    26a8:	bl	10f0 <o_strdup@plt>
    26ac:	mov	r8, r0
    26b0:	cmp	r0, #0
    26b4:	beq	2718 <string_array_has_trimmed_value@@Base+0x98>
    26b8:	mov	r0, r8
    26bc:	bl	1120 <trimwhitespace@plt>
    26c0:	mov	r5, r0
    26c4:	ldr	r0, [r7]
    26c8:	cmp	r0, #0
    26cc:	beq	2718 <string_array_has_trimmed_value@@Base+0x98>
    26d0:	add	r4, r7, #4
    26d4:	bl	10f0 <o_strdup@plt>
    26d8:	cmp	r0, #0
    26dc:	beq	2718 <string_array_has_trimmed_value@@Base+0x98>
    26e0:	mov	r6, r0
    26e4:	bl	1120 <trimwhitespace@plt>
    26e8:	mov	r1, r5
    26ec:	bl	1114 <o_strcmp@plt>
    26f0:	mov	r7, r0
    26f4:	mov	r0, r6
    26f8:	bl	10cc <o_free@plt>
    26fc:	clz	r0, r7
    2700:	lsr	r6, r0, #5
    2704:	ldr	r0, [r4], #4
    2708:	cmp	r0, #0
    270c:	cmpne	r7, #0
    2710:	bne	26d4 <string_array_has_trimmed_value@@Base+0x54>
    2714:	b	271c <string_array_has_trimmed_value@@Base+0x9c>
    2718:	mov	r6, #0
    271c:	mov	r0, r8
    2720:	bl	10cc <o_free@plt>
    2724:	mov	r0, r6
    2728:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

0000272c <pointer_list_init@@Base>:
    272c:	cmp	r0, #0
    2730:	movne	r1, #0
    2734:	strne	r1, [r0]
    2738:	strne	r1, [r0, #4]
    273c:	bx	lr

00002740 <pointer_list_clean@@Base>:
    2740:	push	{r4, r5, fp, lr}
    2744:	add	fp, sp, #8
    2748:	cmp	r0, #0
    274c:	beq	277c <pointer_list_clean@@Base+0x3c>
    2750:	mov	r4, r0
    2754:	bl	11d4 <pointer_list_size@plt>
    2758:	cmp	r0, #0
    275c:	popeq	{r4, r5, fp, pc}
    2760:	sub	r5, r0, #1
    2764:	mov	r0, r4
    2768:	mov	r1, r5
    276c:	bl	10d8 <pointer_list_remove_at@plt>
    2770:	sub	r5, r5, #1
    2774:	cmn	r5, #1
    2778:	bne	2764 <pointer_list_clean@@Base+0x24>
    277c:	pop	{r4, r5, fp, pc}

00002780 <pointer_list_size@@Base>:
    2780:	cmp	r0, #0
    2784:	ldrne	r0, [r0]
    2788:	moveq	r0, #0
    278c:	bx	lr

00002790 <pointer_list_remove_at@@Base>:
    2790:	push	{r4, sl, fp, lr}
    2794:	add	fp, sp, #8
    2798:	mov	r4, r0
    279c:	mov	r0, #0
    27a0:	cmp	r4, #0
    27a4:	beq	2810 <pointer_list_remove_at@@Base+0x80>
    27a8:	ldr	ip, [r4]
    27ac:	cmp	ip, r1
    27b0:	popls	{r4, sl, fp, pc}
    27b4:	sub	r3, ip, #1
    27b8:	cmp	r3, r1
    27bc:	bls	27dc <pointer_list_remove_at@@Base+0x4c>
    27c0:	ldr	r0, [r4, #4]
    27c4:	add	r2, r0, r1, lsl #2
    27c8:	ldr	r2, [r2, #4]
    27cc:	str	r2, [r0, r1, lsl #2]
    27d0:	add	r1, r1, #1
    27d4:	cmp	r3, r1
    27d8:	bne	27c0 <pointer_list_remove_at@@Base+0x30>
    27dc:	ldr	r0, [r4, #4]
    27e0:	cmp	ip, #2
    27e4:	bcc	27f4 <pointer_list_remove_at@@Base+0x64>
    27e8:	lsl	r1, r3, #2
    27ec:	bl	1150 <o_realloc@plt>
    27f0:	b	27fc <pointer_list_remove_at@@Base+0x6c>
    27f4:	bl	10cc <o_free@plt>
    27f8:	mov	r0, #0
    27fc:	str	r0, [r4, #4]
    2800:	ldr	r0, [r4]
    2804:	sub	r0, r0, #1
    2808:	str	r0, [r4]
    280c:	mov	r0, #1
    2810:	pop	{r4, sl, fp, pc}

00002814 <pointer_list_clean_free@@Base>:
    2814:	push	{r4, r5, r6, sl, fp, lr}
    2818:	add	fp, sp, #16
    281c:	cmp	r0, #0
    2820:	beq	2864 <pointer_list_clean_free@@Base+0x50>
    2824:	mov	r4, r1
    2828:	mov	r5, r0
    282c:	bl	11d4 <pointer_list_size@plt>
    2830:	cmp	r0, #0
    2834:	beq	2864 <pointer_list_clean_free@@Base+0x50>
    2838:	sub	r6, r0, #1
    283c:	mov	r0, r5
    2840:	mov	r1, r6
    2844:	bl	1084 <pointer_list_get_at@plt>
    2848:	blx	r4
    284c:	mov	r0, r5
    2850:	mov	r1, r6
    2854:	bl	10d8 <pointer_list_remove_at@plt>
    2858:	sub	r6, r6, #1
    285c:	cmn	r6, #1
    2860:	bne	283c <pointer_list_clean_free@@Base+0x28>
    2864:	pop	{r4, r5, r6, sl, fp, pc}

00002868 <pointer_list_get_at@@Base>:
    2868:	mov	r2, r0
    286c:	mov	r0, #0
    2870:	cmp	r2, #0
    2874:	beq	288c <pointer_list_get_at@@Base+0x24>
    2878:	ldr	r3, [r2]
    287c:	cmp	r3, r1
    2880:	bxls	lr
    2884:	ldr	r0, [r2, #4]
    2888:	ldr	r0, [r0, r1, lsl #2]
    288c:	bx	lr

00002890 <pointer_list_append@@Base>:
    2890:	push	{r4, r5, fp, lr}
    2894:	add	fp, sp, #8
    2898:	cmp	r0, #0
    289c:	beq	28e0 <pointer_list_append@@Base+0x50>
    28a0:	mov	r5, r1
    28a4:	mov	r4, r0
    28a8:	ldr	r1, [r0]
    28ac:	ldr	r0, [r0, #4]
    28b0:	mov	r2, #4
    28b4:	add	r1, r2, r1, lsl #2
    28b8:	bl	1150 <o_realloc@plt>
    28bc:	str	r0, [r4, #4]
    28c0:	cmp	r0, #0
    28c4:	beq	28e8 <pointer_list_append@@Base+0x58>
    28c8:	ldr	r1, [r4]
    28cc:	str	r5, [r0, r1, lsl #2]
    28d0:	add	r0, r1, #1
    28d4:	str	r0, [r4]
    28d8:	mov	r0, #1
    28dc:	pop	{r4, r5, fp, pc}
    28e0:	mov	r0, #0
    28e4:	pop	{r4, r5, fp, pc}
    28e8:	bl	10cc <o_free@plt>
    28ec:	mov	r0, #0
    28f0:	str	r0, [r4, #4]
    28f4:	pop	{r4, r5, fp, pc}

000028f8 <pointer_list_remove_at_free@@Base>:
    28f8:	push	{r4, r5, r6, sl, fp, lr}
    28fc:	add	fp, sp, #16
    2900:	cmp	r0, #0
    2904:	beq	2940 <pointer_list_remove_at_free@@Base+0x48>
    2908:	mov	r4, r1
    290c:	mov	r5, r0
    2910:	ldr	r0, [r0]
    2914:	cmp	r0, r1
    2918:	bls	2940 <pointer_list_remove_at_free@@Base+0x48>
    291c:	mov	r6, r2
    2920:	mov	r0, r5
    2924:	mov	r1, r4
    2928:	bl	1084 <pointer_list_get_at@plt>
    292c:	blx	r6
    2930:	mov	r0, r5
    2934:	mov	r1, r4
    2938:	pop	{r4, r5, r6, sl, fp, lr}
    293c:	b	2790 <pointer_list_remove_at@@Base>
    2940:	mov	r0, #0
    2944:	pop	{r4, r5, r6, sl, fp, pc}

00002948 <pointer_list_insert_at@@Base>:
    2948:	push	{r4, r5, r6, r7, fp, lr}
    294c:	add	fp, sp, #16
    2950:	mov	r7, #0
    2954:	cmp	r0, #0
    2958:	beq	29cc <pointer_list_insert_at@@Base+0x84>
    295c:	mov	r5, r2
    2960:	mov	r4, r0
    2964:	ldr	r0, [r0]
    2968:	cmp	r0, r2
    296c:	bcc	29cc <pointer_list_insert_at@@Base+0x84>
    2970:	mov	r6, r1
    2974:	mov	r1, #4
    2978:	add	r1, r1, r0, lsl #2
    297c:	ldr	r0, [r4, #4]
    2980:	bl	1150 <o_realloc@plt>
    2984:	str	r0, [r4, #4]
    2988:	cmp	r0, #0
    298c:	beq	29cc <pointer_list_insert_at@@Base+0x84>
    2990:	ldm	r4, {r0, r1}
    2994:	cmp	r0, r5
    2998:	bls	29bc <pointer_list_insert_at@@Base+0x74>
    299c:	mov	r2, r0
    29a0:	add	r3, r1, r2, lsl #2
    29a4:	ldr	r3, [r3, #-4]
    29a8:	str	r3, [r1, r2, lsl #2]
    29ac:	sub	r2, r2, #1
    29b0:	ldr	r1, [r4, #4]
    29b4:	cmp	r2, r5
    29b8:	bhi	29a0 <pointer_list_insert_at@@Base+0x58>
    29bc:	str	r6, [r1, r5, lsl #2]
    29c0:	add	r0, r0, #1
    29c4:	str	r0, [r4]
    29c8:	mov	r7, #1
    29cc:	mov	r0, r7
    29d0:	pop	{r4, r5, r6, r7, fp, pc}

000029d4 <pointer_list_remove_pointer@@Base>:
    29d4:	cmp	r0, #0
    29d8:	beq	2a0c <pointer_list_remove_pointer@@Base+0x38>
    29dc:	ldr	r2, [r0]
    29e0:	cmp	r2, #0
    29e4:	beq	2a0c <pointer_list_remove_pointer@@Base+0x38>
    29e8:	ldr	ip, [r0, #4]
    29ec:	mov	r2, #0
    29f0:	ldr	r3, [ip, r2, lsl #2]
    29f4:	cmp	r3, r1
    29f8:	beq	2a14 <pointer_list_remove_pointer@@Base+0x40>
    29fc:	ldr	r3, [r0]
    2a00:	add	r2, r2, #1
    2a04:	cmp	r2, r3
    2a08:	bcc	29f0 <pointer_list_remove_pointer@@Base+0x1c>
    2a0c:	mov	r0, #0
    2a10:	bx	lr
    2a14:	mov	r1, r2
    2a18:	b	2790 <pointer_list_remove_at@@Base>

00002a1c <pointer_list_remove_pointer_free@@Base>:
    2a1c:	push	{r4, r5, fp, lr}
    2a20:	add	fp, sp, #8
    2a24:	cmp	r0, #0
    2a28:	beq	2a60 <pointer_list_remove_pointer_free@@Base+0x44>
    2a2c:	mov	r4, r0
    2a30:	ldr	r0, [r0]
    2a34:	cmp	r0, #0
    2a38:	beq	2a60 <pointer_list_remove_pointer_free@@Base+0x44>
    2a3c:	ldr	r0, [r4, #4]
    2a40:	mov	r5, #0
    2a44:	ldr	r3, [r0, r5, lsl #2]
    2a48:	cmp	r3, r1
    2a4c:	beq	2a68 <pointer_list_remove_pointer_free@@Base+0x4c>
    2a50:	ldr	r3, [r4]
    2a54:	add	r5, r5, #1
    2a58:	cmp	r5, r3
    2a5c:	bcc	2a44 <pointer_list_remove_pointer_free@@Base+0x28>
    2a60:	mov	r0, #0
    2a64:	pop	{r4, r5, fp, pc}
    2a68:	mov	r0, r1
    2a6c:	blx	r2
    2a70:	mov	r0, r4
    2a74:	mov	r1, r5
    2a78:	pop	{r4, r5, fp, lr}
    2a7c:	b	2790 <pointer_list_remove_at@@Base>

Disassembly of section .fini:

00002a80 <.fini>:
    2a80:	push	{r3, lr}
    2a84:	pop	{r3, pc}
