
../repos/coreutils/src/stat:     file format elf32-littlearm


Disassembly of section .init:

0001164c <.init>:
   1164c:	push	{r3, lr}
   11650:	bl	11adc <__assert_fail@plt+0x50>
   11654:	pop	{r3, pc}

Disassembly of section .plt:

00011658 <calloc@plt-0x14>:
   11658:	push	{lr}		; (str lr, [sp, #-4]!)
   1165c:	ldr	lr, [pc, #4]	; 11668 <calloc@plt-0x4>
   11660:	add	lr, pc, lr
   11664:	ldr	pc, [lr, #8]!
   11668:	muleq	r2, r8, r9

0001166c <calloc@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #143360	; 0x23000
   11674:	ldr	pc, [ip, #2456]!	; 0x998

00011678 <fputs_unlocked@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #143360	; 0x23000
   11680:	ldr	pc, [ip, #2448]!	; 0x990

00011684 <raise@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #143360	; 0x23000
   1168c:	ldr	pc, [ip, #2440]!	; 0x988

00011690 <gmtime_r@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #143360	; 0x23000
   11698:	ldr	pc, [ip, #2432]!	; 0x980

0001169c <__getdelim@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #143360	; 0x23000
   116a4:	ldr	pc, [ip, #2424]!	; 0x978

000116a8 <is_selinux_enabled@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #143360	; 0x23000
   116b0:	ldr	pc, [ip, #2416]!	; 0x970

000116b4 <strcmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #143360	; 0x23000
   116bc:	ldr	pc, [ip, #2408]!	; 0x968

000116c0 <strtol@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #143360	; 0x23000
   116c8:	ldr	pc, [ip, #2400]!	; 0x960

000116cc <getpwuid@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #143360	; 0x23000
   116d4:	ldr	pc, [ip, #2392]!	; 0x958

000116d8 <mktime@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #143360	; 0x23000
   116e0:	ldr	pc, [ip, #2384]!	; 0x950

000116e4 <fflush@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #143360	; 0x23000
   116ec:	ldr	pc, [ip, #2376]!	; 0x948

000116f0 <free@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #143360	; 0x23000
   116f8:	ldr	pc, [ip, #2368]!	; 0x940

000116fc <_exit@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #143360	; 0x23000
   11704:	ldr	pc, [ip, #2360]!	; 0x938

00011708 <memcpy@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #143360	; 0x23000
   11710:	ldr	pc, [ip, #2352]!	; 0x930

00011714 <mbsinit@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #143360	; 0x23000
   1171c:	ldr	pc, [ip, #2344]!	; 0x928

00011720 <dcgettext@plt>:
   11720:	add	ip, pc, #0, 12
   11724:	add	ip, ip, #143360	; 0x23000
   11728:	ldr	pc, [ip, #2336]!	; 0x920

0001172c <realloc@plt>:
   1172c:	add	ip, pc, #0, 12
   11730:	add	ip, ip, #143360	; 0x23000
   11734:	ldr	pc, [ip, #2328]!	; 0x918

00011738 <fgetfilecon@plt>:
   11738:	add	ip, pc, #0, 12
   1173c:	add	ip, ip, #143360	; 0x23000
   11740:	ldr	pc, [ip, #2320]!	; 0x910

00011744 <localtime_r@plt>:
   11744:	add	ip, pc, #0, 12
   11748:	add	ip, ip, #143360	; 0x23000
   1174c:	ldr	pc, [ip, #2312]!	; 0x908

00011750 <textdomain@plt>:
   11750:	add	ip, pc, #0, 12
   11754:	add	ip, ip, #143360	; 0x23000
   11758:	ldr	pc, [ip, #2304]!	; 0x900

0001175c <chdir@plt>:
   1175c:	add	ip, pc, #0, 12
   11760:	add	ip, ip, #143360	; 0x23000
   11764:	ldr	pc, [ip, #2296]!	; 0x8f8

00011768 <iswprint@plt>:
   11768:	add	ip, pc, #0, 12
   1176c:	add	ip, ip, #143360	; 0x23000
   11770:	ldr	pc, [ip, #2288]!	; 0x8f0

00011774 <tzset@plt>:
   11774:	add	ip, pc, #0, 12
   11778:	add	ip, ip, #143360	; 0x23000
   1177c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011780 <readlink@plt>:
   11780:	add	ip, pc, #0, 12
   11784:	add	ip, ip, #143360	; 0x23000
   11788:	ldr	pc, [ip, #2272]!	; 0x8e0

0001178c <fwrite@plt>:
   1178c:	add	ip, pc, #0, 12
   11790:	add	ip, ip, #143360	; 0x23000
   11794:	ldr	pc, [ip, #2264]!	; 0x8d8

00011798 <lseek64@plt>:
   11798:	add	ip, pc, #0, 12
   1179c:	add	ip, ip, #143360	; 0x23000
   117a0:	ldr	pc, [ip, #2256]!	; 0x8d0

000117a4 <__ctype_get_mb_cur_max@plt>:
   117a4:	add	ip, pc, #0, 12
   117a8:	add	ip, ip, #143360	; 0x23000
   117ac:	ldr	pc, [ip, #2248]!	; 0x8c8

000117b0 <hasmntopt@plt>:
   117b0:	add	ip, pc, #0, 12
   117b4:	add	ip, ip, #143360	; 0x23000
   117b8:	ldr	pc, [ip, #2240]!	; 0x8c0

000117bc <__fpending@plt>:
   117bc:	add	ip, pc, #0, 12
   117c0:	add	ip, ip, #143360	; 0x23000
   117c4:	ldr	pc, [ip, #2232]!	; 0x8b8

000117c8 <mbrtowc@plt>:
   117c8:	add	ip, pc, #0, 12
   117cc:	add	ip, ip, #143360	; 0x23000
   117d0:	ldr	pc, [ip, #2224]!	; 0x8b0

000117d4 <error@plt>:
   117d4:	add	ip, pc, #0, 12
   117d8:	add	ip, ip, #143360	; 0x23000
   117dc:	ldr	pc, [ip, #2216]!	; 0x8a8

000117e0 <getmntent@plt>:
   117e0:	add	ip, pc, #0, 12
   117e4:	add	ip, ip, #143360	; 0x23000
   117e8:	ldr	pc, [ip, #2208]!	; 0x8a0

000117ec <open64@plt>:
   117ec:	add	ip, pc, #0, 12
   117f0:	add	ip, ip, #143360	; 0x23000
   117f4:	ldr	pc, [ip, #2200]!	; 0x898

000117f8 <getenv@plt>:
   117f8:	add	ip, pc, #0, 12
   117fc:	add	ip, ip, #143360	; 0x23000
   11800:	ldr	pc, [ip, #2192]!	; 0x890

00011804 <lgetfilecon@plt>:
   11804:	add	ip, pc, #0, 12
   11808:	add	ip, ip, #143360	; 0x23000
   1180c:	ldr	pc, [ip, #2184]!	; 0x888

00011810 <malloc@plt>:
   11810:	add	ip, pc, #0, 12
   11814:	add	ip, ip, #143360	; 0x23000
   11818:	ldr	pc, [ip, #2176]!	; 0x880

0001181c <__libc_start_main@plt>:
   1181c:	add	ip, pc, #0, 12
   11820:	add	ip, ip, #143360	; 0x23000
   11824:	ldr	pc, [ip, #2168]!	; 0x878

00011828 <strftime@plt>:
   11828:	add	ip, pc, #0, 12
   1182c:	add	ip, ip, #143360	; 0x23000
   11830:	ldr	pc, [ip, #2160]!	; 0x870

00011834 <__freading@plt>:
   11834:	add	ip, pc, #0, 12
   11838:	add	ip, ip, #143360	; 0x23000
   1183c:	ldr	pc, [ip, #2152]!	; 0x868

00011840 <__ctype_tolower_loc@plt>:
   11840:	add	ip, pc, #0, 12
   11844:	add	ip, ip, #143360	; 0x23000
   11848:	ldr	pc, [ip, #2144]!	; 0x860

0001184c <__ctype_toupper_loc@plt>:
   1184c:	add	ip, pc, #0, 12
   11850:	add	ip, ip, #143360	; 0x23000
   11854:	ldr	pc, [ip, #2136]!	; 0x858

00011858 <__gmon_start__@plt>:
   11858:	add	ip, pc, #0, 12
   1185c:	add	ip, ip, #143360	; 0x23000
   11860:	ldr	pc, [ip, #2128]!	; 0x850

00011864 <getopt_long@plt>:
   11864:	add	ip, pc, #0, 12
   11868:	add	ip, ip, #143360	; 0x23000
   1186c:	ldr	pc, [ip, #2120]!	; 0x848

00011870 <__ctype_b_loc@plt>:
   11870:	add	ip, pc, #0, 12
   11874:	add	ip, ip, #143360	; 0x23000
   11878:	ldr	pc, [ip, #2112]!	; 0x840

0001187c <getcwd@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #143360	; 0x23000
   11884:	ldr	pc, [ip, #2104]!	; 0x838

00011888 <exit@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #143360	; 0x23000
   11890:	ldr	pc, [ip, #2096]!	; 0x830

00011894 <getfilecon@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #143360	; 0x23000
   1189c:	ldr	pc, [ip, #2088]!	; 0x828

000118a0 <bcmp@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #143360	; 0x23000
   118a8:	ldr	pc, [ip, #2080]!	; 0x820

000118ac <strlen@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #143360	; 0x23000
   118b4:	ldr	pc, [ip, #2072]!	; 0x818

000118b8 <strchr@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #143360	; 0x23000
   118c0:	ldr	pc, [ip, #2064]!	; 0x810

000118c4 <setenv@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #143360	; 0x23000
   118cc:	ldr	pc, [ip, #2056]!	; 0x808

000118d0 <openat64@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #143360	; 0x23000
   118d8:	ldr	pc, [ip, #2048]!	; 0x800

000118dc <memrchr@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #143360	; 0x23000
   118e4:	ldr	pc, [ip, #2040]!	; 0x7f8

000118e8 <__errno_location@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #143360	; 0x23000
   118f0:	ldr	pc, [ip, #2032]!	; 0x7f0

000118f4 <__sprintf_chk@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #143360	; 0x23000
   118fc:	ldr	pc, [ip, #2024]!	; 0x7e8

00011900 <__cxa_atexit@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #143360	; 0x23000
   11908:	ldr	pc, [ip, #2016]!	; 0x7e0

0001190c <__vasprintf_chk@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #143360	; 0x23000
   11914:	ldr	pc, [ip, #2008]!	; 0x7d8

00011918 <memset@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #143360	; 0x23000
   11920:	ldr	pc, [ip, #2000]!	; 0x7d0

00011924 <__printf_chk@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #143360	; 0x23000
   1192c:	ldr	pc, [ip, #1992]!	; 0x7c8

00011930 <fileno@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #143360	; 0x23000
   11938:	ldr	pc, [ip, #1984]!	; 0x7c0

0001193c <__fprintf_chk@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #143360	; 0x23000
   11944:	ldr	pc, [ip, #1976]!	; 0x7b8

00011948 <memchr@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #143360	; 0x23000
   11950:	ldr	pc, [ip, #1968]!	; 0x7b0

00011954 <fclose@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #143360	; 0x23000
   1195c:	ldr	pc, [ip, #1960]!	; 0x7a8

00011960 <fseeko64@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #143360	; 0x23000
   11968:	ldr	pc, [ip, #1952]!	; 0x7a0

0001196c <statx@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #143360	; 0x23000
   11974:	ldr	pc, [ip, #1944]!	; 0x798

00011978 <endmntent@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #143360	; 0x23000
   11980:	ldr	pc, [ip, #1936]!	; 0x790

00011984 <fcntl64@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #143360	; 0x23000
   1198c:	ldr	pc, [ip, #1928]!	; 0x788

00011990 <__overflow@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #143360	; 0x23000
   11998:	ldr	pc, [ip, #1920]!	; 0x780

0001199c <setlocale@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #143360	; 0x23000
   119a4:	ldr	pc, [ip, #1912]!	; 0x778

000119a8 <strrchr@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #143360	; 0x23000
   119b0:	ldr	pc, [ip, #1904]!	; 0x770

000119b4 <statfs64@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #143360	; 0x23000
   119bc:	ldr	pc, [ip, #1896]!	; 0x768

000119c0 <nl_langinfo@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #143360	; 0x23000
   119c8:	ldr	pc, [ip, #1888]!	; 0x760

000119cc <sscanf@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #143360	; 0x23000
   119d4:	ldr	pc, [ip, #1880]!	; 0x758

000119d8 <localeconv@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #143360	; 0x23000
   119e0:	ldr	pc, [ip, #1872]!	; 0x750

000119e4 <timegm@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #143360	; 0x23000
   119ec:	ldr	pc, [ip, #1864]!	; 0x748

000119f0 <fchdir@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #143360	; 0x23000
   119f8:	ldr	pc, [ip, #1856]!	; 0x740

000119fc <canonicalize_file_name@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #143360	; 0x23000
   11a04:	ldr	pc, [ip, #1848]!	; 0x738

00011a08 <fopen64@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #143360	; 0x23000
   11a10:	ldr	pc, [ip, #1840]!	; 0x730

00011a14 <freecon@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #143360	; 0x23000
   11a1c:	ldr	pc, [ip, #1832]!	; 0x728

00011a20 <setmntent@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #143360	; 0x23000
   11a28:	ldr	pc, [ip, #1824]!	; 0x720

00011a2c <bindtextdomain@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #143360	; 0x23000
   11a34:	ldr	pc, [ip, #1816]!	; 0x718

00011a38 <__xstat64@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #143360	; 0x23000
   11a40:	ldr	pc, [ip, #1808]!	; 0x710

00011a44 <unsetenv@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #143360	; 0x23000
   11a4c:	ldr	pc, [ip, #1800]!	; 0x708

00011a50 <strncmp@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #143360	; 0x23000
   11a58:	ldr	pc, [ip, #1792]!	; 0x700

00011a5c <abort@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #143360	; 0x23000
   11a64:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a68 <close@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #143360	; 0x23000
   11a70:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a74 <getgrgid@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #143360	; 0x23000
   11a7c:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a80 <strspn@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #143360	; 0x23000
   11a88:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a8c <__assert_fail@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #143360	; 0x23000
   11a94:	ldr	pc, [ip, #1752]!	; 0x6d8

Disassembly of section .text:

00011aa0 <.text>:
   11aa0:	mov	fp, #0
   11aa4:	mov	lr, #0
   11aa8:	pop	{r1}		; (ldr r1, [sp], #4)
   11aac:	mov	r2, sp
   11ab0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ab4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ab8:	ldr	ip, [pc, #16]	; 11ad0 <__assert_fail@plt+0x44>
   11abc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ac0:	ldr	r0, [pc, #12]	; 11ad4 <__assert_fail@plt+0x48>
   11ac4:	ldr	r3, [pc, #12]	; 11ad8 <__assert_fail@plt+0x4c>
   11ac8:	bl	1181c <__libc_start_main@plt>
   11acc:	bl	11a5c <abort@plt>
   11ad0:	andeq	r2, r2, ip, ror #12
   11ad4:	andeq	r1, r1, ip, ror pc
   11ad8:	andeq	r2, r2, ip, lsl #12
   11adc:	ldr	r3, [pc, #20]	; 11af8 <__assert_fail@plt+0x6c>
   11ae0:	ldr	r2, [pc, #20]	; 11afc <__assert_fail@plt+0x70>
   11ae4:	add	r3, pc, r3
   11ae8:	ldr	r2, [r3, r2]
   11aec:	cmp	r2, #0
   11af0:	bxeq	lr
   11af4:	b	11858 <__gmon_start__@plt>
   11af8:	andeq	r3, r2, r4, lsl r5
   11afc:	andeq	r0, r0, r0, ror r1
   11b00:	ldr	r0, [pc, #24]	; 11b20 <__assert_fail@plt+0x94>
   11b04:	ldr	r3, [pc, #24]	; 11b24 <__assert_fail@plt+0x98>
   11b08:	cmp	r3, r0
   11b0c:	bxeq	lr
   11b10:	ldr	r3, [pc, #16]	; 11b28 <__assert_fail@plt+0x9c>
   11b14:	cmp	r3, #0
   11b18:	bxeq	lr
   11b1c:	bx	r3
   11b20:	ldrdeq	r5, [r3], -r0
   11b24:	ldrdeq	r5, [r3], -r0
   11b28:	andeq	r0, r0, r0
   11b2c:	ldr	r0, [pc, #36]	; 11b58 <__assert_fail@plt+0xcc>
   11b30:	ldr	r1, [pc, #36]	; 11b5c <__assert_fail@plt+0xd0>
   11b34:	sub	r1, r1, r0
   11b38:	asr	r1, r1, #2
   11b3c:	add	r1, r1, r1, lsr #31
   11b40:	asrs	r1, r1, #1
   11b44:	bxeq	lr
   11b48:	ldr	r3, [pc, #16]	; 11b60 <__assert_fail@plt+0xd4>
   11b4c:	cmp	r3, #0
   11b50:	bxeq	lr
   11b54:	bx	r3
   11b58:	ldrdeq	r5, [r3], -r0
   11b5c:	ldrdeq	r5, [r3], -r0
   11b60:	andeq	r0, r0, r0
   11b64:	push	{r4, lr}
   11b68:	ldr	r4, [pc, #24]	; 11b88 <__assert_fail@plt+0xfc>
   11b6c:	ldrb	r3, [r4]
   11b70:	cmp	r3, #0
   11b74:	popne	{r4, pc}
   11b78:	bl	11b00 <__assert_fail@plt+0x74>
   11b7c:	mov	r3, #1
   11b80:	strb	r3, [r4]
   11b84:	pop	{r4, pc}
   11b88:	andeq	r5, r3, ip, ror #3
   11b8c:	b	11b2c <__assert_fail@plt+0xa0>
   11b90:	push	{fp, lr}
   11b94:	mov	fp, sp
   11b98:	sub	sp, sp, #56	; 0x38
   11b9c:	mov	r4, r0
   11ba0:	cmp	r0, #0
   11ba4:	bne	11f38 <__assert_fail@plt+0x4ac>
   11ba8:	movw	r1, #9915	; 0x26bb
   11bac:	mov	r0, #0
   11bb0:	mov	r2, #5
   11bb4:	movt	r1, #2
   11bb8:	bl	11720 <dcgettext@plt>
   11bbc:	mov	r1, r0
   11bc0:	movw	r0, #21108	; 0x5274
   11bc4:	movt	r0, #3
   11bc8:	ldr	r2, [r0]
   11bcc:	mov	r0, #1
   11bd0:	bl	11924 <__printf_chk@plt>
   11bd4:	movw	r1, #9946	; 0x26da
   11bd8:	mov	r0, #0
   11bdc:	mov	r2, #5
   11be0:	movt	r1, #2
   11be4:	bl	11720 <dcgettext@plt>
   11be8:	movw	r7, #20964	; 0x51e4
   11bec:	movt	r7, #3
   11bf0:	ldr	r1, [r7]
   11bf4:	bl	11678 <fputs_unlocked@plt>
   11bf8:	movw	r1, #13527	; 0x34d7
   11bfc:	mov	r0, #0
   11c00:	mov	r2, #5
   11c04:	movt	r1, #2
   11c08:	bl	11720 <dcgettext@plt>
   11c0c:	ldr	r1, [r7]
   11c10:	bl	11678 <fputs_unlocked@plt>
   11c14:	movw	r1, #9983	; 0x26ff
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	movt	r1, #2
   11c24:	bl	11720 <dcgettext@plt>
   11c28:	ldr	r1, [r7]
   11c2c:	bl	11678 <fputs_unlocked@plt>
   11c30:	movw	r1, #10095	; 0x276f
   11c34:	mov	r0, #0
   11c38:	mov	r2, #5
   11c3c:	movt	r1, #2
   11c40:	bl	11720 <dcgettext@plt>
   11c44:	ldr	r1, [r7]
   11c48:	bl	11678 <fputs_unlocked@plt>
   11c4c:	movw	r1, #10230	; 0x27f6
   11c50:	mov	r0, #0
   11c54:	mov	r2, #5
   11c58:	movt	r1, #2
   11c5c:	bl	11720 <dcgettext@plt>
   11c60:	ldr	r1, [r7]
   11c64:	bl	11678 <fputs_unlocked@plt>
   11c68:	movw	r1, #10648	; 0x2998
   11c6c:	mov	r0, #0
   11c70:	mov	r2, #5
   11c74:	movt	r1, #2
   11c78:	bl	11720 <dcgettext@plt>
   11c7c:	ldr	r1, [r7]
   11c80:	bl	11678 <fputs_unlocked@plt>
   11c84:	movw	r1, #10693	; 0x29c5
   11c88:	mov	r0, #0
   11c8c:	mov	r2, #5
   11c90:	movt	r1, #2
   11c94:	bl	11720 <dcgettext@plt>
   11c98:	ldr	r1, [r7]
   11c9c:	bl	11678 <fputs_unlocked@plt>
   11ca0:	movw	r1, #10747	; 0x29fb
   11ca4:	mov	r0, #0
   11ca8:	mov	r2, #5
   11cac:	movt	r1, #2
   11cb0:	bl	11720 <dcgettext@plt>
   11cb4:	ldr	r1, [r7]
   11cb8:	bl	11678 <fputs_unlocked@plt>
   11cbc:	movw	r1, #10992	; 0x2af0
   11cc0:	mov	r0, #0
   11cc4:	mov	r2, #5
   11cc8:	movt	r1, #2
   11ccc:	bl	11720 <dcgettext@plt>
   11cd0:	ldr	r1, [r7]
   11cd4:	bl	11678 <fputs_unlocked@plt>
   11cd8:	movw	r1, #11317	; 0x2c35
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	movt	r1, #2
   11ce8:	bl	11720 <dcgettext@plt>
   11cec:	ldr	r1, [r7]
   11cf0:	bl	11678 <fputs_unlocked@plt>
   11cf4:	movw	r1, #11564	; 0x2d2c
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	movt	r1, #2
   11d04:	bl	11720 <dcgettext@plt>
   11d08:	ldr	r1, [r7]
   11d0c:	bl	11678 <fputs_unlocked@plt>
   11d10:	movw	r1, #12153	; 0x2f79
   11d14:	mov	r0, #0
   11d18:	mov	r2, #5
   11d1c:	movt	r1, #2
   11d20:	bl	11720 <dcgettext@plt>
   11d24:	ldr	r1, [r7]
   11d28:	bl	11678 <fputs_unlocked@plt>
   11d2c:	movw	r1, #12631	; 0x3157
   11d30:	mov	r0, #0
   11d34:	mov	r2, #5
   11d38:	movt	r1, #2
   11d3c:	bl	11720 <dcgettext@plt>
   11d40:	ldr	r1, [r7]
   11d44:	bl	11678 <fputs_unlocked@plt>
   11d48:	movw	r1, #12871	; 0x3247
   11d4c:	mov	r0, #0
   11d50:	mov	r2, #5
   11d54:	movt	r1, #2
   11d58:	bl	11720 <dcgettext@plt>
   11d5c:	ldr	r1, [r7]
   11d60:	bl	11678 <fputs_unlocked@plt>
   11d64:	movw	r1, #13121	; 0x3341
   11d68:	mov	r0, #0
   11d6c:	mov	r2, #5
   11d70:	movt	r1, #2
   11d74:	bl	11720 <dcgettext@plt>
   11d78:	movw	r2, #15832	; 0x3dd8
   11d7c:	mov	r1, r0
   11d80:	mov	r0, #1
   11d84:	movt	r2, #2
   11d88:	bl	11924 <__printf_chk@plt>
   11d8c:	movw	r1, #13176	; 0x3378
   11d90:	mov	r0, #0
   11d94:	mov	r2, #5
   11d98:	movt	r1, #2
   11d9c:	bl	11720 <dcgettext@plt>
   11da0:	movw	r2, #15884	; 0x3e0c
   11da4:	mov	r1, r0
   11da8:	mov	r0, #1
   11dac:	movt	r2, #2
   11db0:	bl	11924 <__printf_chk@plt>
   11db4:	movw	r1, #13244	; 0x33bc
   11db8:	mov	r0, #0
   11dbc:	mov	r2, #5
   11dc0:	movt	r1, #2
   11dc4:	bl	11720 <dcgettext@plt>
   11dc8:	movw	r5, #13435	; 0x347b
   11dcc:	mov	r1, r0
   11dd0:	mov	r0, #1
   11dd4:	movt	r5, #2
   11dd8:	mov	r2, r5
   11ddc:	bl	11924 <__printf_chk@plt>
   11de0:	movw	r0, #16096	; 0x3ee0
   11de4:	mov	r2, #48	; 0x30
   11de8:	mov	r6, sp
   11dec:	movt	r0, #2
   11df0:	add	r1, r0, #32
   11df4:	add	r3, r0, #16
   11df8:	vld1.64	{d18-d19}, [r0], r2
   11dfc:	vld1.64	{d16-d17}, [r1]
   11e00:	vld1.64	{d20-d21}, [r3]
   11e04:	vldr	d22, [r0]
   11e08:	add	r1, r6, #32
   11e0c:	add	r0, r6, #16
   11e10:	vst1.64	{d16-d17}, [r1]
   11e14:	movw	r1, #13602	; 0x3522
   11e18:	vst1.64	{d20-d21}, [r0]
   11e1c:	mov	r0, r6
   11e20:	movt	r1, #2
   11e24:	vst1.64	{d18-d19}, [r0], r2
   11e28:	vstr	d22, [r0]
   11e2c:	mov	r0, r5
   11e30:	bl	116b4 <strcmp@plt>
   11e34:	cmp	r0, #0
   11e38:	ldrne	r1, [r6, #8]!
   11e3c:	cmpne	r1, #0
   11e40:	bne	11e2c <__assert_fail@plt+0x3a0>
   11e44:	movw	r1, #13697	; 0x3581
   11e48:	ldr	r6, [r6, #4]
   11e4c:	mov	r0, #0
   11e50:	mov	r2, #5
   11e54:	movt	r1, #2
   11e58:	bl	11720 <dcgettext@plt>
   11e5c:	movw	r2, #13479	; 0x34a7
   11e60:	movw	r3, #13720	; 0x3598
   11e64:	mov	r1, r0
   11e68:	mov	r0, #1
   11e6c:	movt	r2, #2
   11e70:	movt	r3, #2
   11e74:	bl	11924 <__printf_chk@plt>
   11e78:	cmp	r6, #0
   11e7c:	mov	r0, #5
   11e80:	mov	r1, #0
   11e84:	moveq	r6, r5
   11e88:	bl	1199c <setlocale@plt>
   11e8c:	cmp	r0, #0
   11e90:	beq	11ec8 <__assert_fail@plt+0x43c>
   11e94:	movw	r1, #13760	; 0x35c0
   11e98:	mov	r2, #3
   11e9c:	movt	r1, #2
   11ea0:	bl	11a50 <strncmp@plt>
   11ea4:	cmp	r0, #0
   11ea8:	beq	11ec8 <__assert_fail@plt+0x43c>
   11eac:	movw	r1, #13764	; 0x35c4
   11eb0:	mov	r0, #0
   11eb4:	mov	r2, #5
   11eb8:	movt	r1, #2
   11ebc:	bl	11720 <dcgettext@plt>
   11ec0:	ldr	r1, [r7]
   11ec4:	bl	11678 <fputs_unlocked@plt>
   11ec8:	movw	r1, #13835	; 0x360b
   11ecc:	mov	r0, #0
   11ed0:	mov	r2, #5
   11ed4:	movt	r1, #2
   11ed8:	bl	11720 <dcgettext@plt>
   11edc:	movw	r2, #13720	; 0x3598
   11ee0:	mov	r1, r0
   11ee4:	mov	r0, #1
   11ee8:	mov	r3, r5
   11eec:	movt	r2, #2
   11ef0:	bl	11924 <__printf_chk@plt>
   11ef4:	movw	r1, #13862	; 0x3626
   11ef8:	mov	r0, #0
   11efc:	mov	r2, #5
   11f00:	movt	r1, #2
   11f04:	bl	11720 <dcgettext@plt>
   11f08:	mov	r1, r0
   11f0c:	movw	r0, #13630	; 0x353e
   11f10:	movw	r3, #12630	; 0x3156
   11f14:	cmp	r6, r5
   11f18:	mov	r2, r6
   11f1c:	movt	r0, #2
   11f20:	movt	r3, #2
   11f24:	moveq	r3, r0
   11f28:	mov	r0, #1
   11f2c:	bl	11924 <__printf_chk@plt>
   11f30:	mov	r0, r4
   11f34:	bl	11888 <exit@plt>
   11f38:	movw	r0, #20960	; 0x51e0
   11f3c:	movw	r1, #9876	; 0x2694
   11f40:	mov	r2, #5
   11f44:	movt	r0, #3
   11f48:	movt	r1, #2
   11f4c:	ldr	r5, [r0]
   11f50:	mov	r0, #0
   11f54:	bl	11720 <dcgettext@plt>
   11f58:	mov	r2, r0
   11f5c:	movw	r0, #21108	; 0x5274
   11f60:	mov	r1, #1
   11f64:	movt	r0, #3
   11f68:	ldr	r3, [r0]
   11f6c:	mov	r0, r5
   11f70:	bl	1193c <__fprintf_chk@plt>
   11f74:	mov	r0, r4
   11f78:	bl	11888 <exit@plt>
   11f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f80:	add	fp, sp, #28
   11f84:	sub	sp, sp, #492	; 0x1ec
   11f88:	str	r0, [sp, #112]	; 0x70
   11f8c:	ldr	r0, [r1]
   11f90:	str	r1, [sp, #108]	; 0x6c
   11f94:	bl	1d470 <__assert_fail@plt+0xb9e4>
   11f98:	movw	r1, #12630	; 0x3156
   11f9c:	mov	r0, #6
   11fa0:	movt	r1, #2
   11fa4:	bl	1199c <setlocale@plt>
   11fa8:	movw	r4, #13483	; 0x34ab
   11fac:	movw	r1, #13440	; 0x3480
   11fb0:	movt	r4, #2
   11fb4:	movt	r1, #2
   11fb8:	mov	r0, r4
   11fbc:	bl	11a2c <bindtextdomain@plt>
   11fc0:	mov	r0, r4
   11fc4:	bl	11750 <textdomain@plt>
   11fc8:	bl	119d8 <localeconv@plt>
   11fcc:	ldr	r1, [r0]
   11fd0:	movw	r4, #21000	; 0x5208
   11fd4:	movw	r0, #16319	; 0x3fbf
   11fd8:	movt	r4, #3
   11fdc:	movt	r0, #2
   11fe0:	ldrb	r2, [r1]
   11fe4:	cmp	r2, #0
   11fe8:	movne	r0, r1
   11fec:	str	r0, [r4, #8]
   11ff0:	bl	118ac <strlen@plt>
   11ff4:	str	r0, [r4, #12]
   11ff8:	movw	r0, #42444	; 0xa5cc
   11ffc:	movt	r0, #1
   12000:	bl	22670 <__assert_fail@plt+0x10be4>
   12004:	add	r0, sp, #128	; 0x80
   12008:	movw	r4, #13464	; 0x3498
   1200c:	movw	r7, #15920	; 0x3e30
   12010:	movw	r8, #20968	; 0x51e8
   12014:	movw	sl, #20864	; 0x5180
   12018:	mov	r5, #0
   1201c:	mov	r9, #1
   12020:	mov	r6, #0
   12024:	add	r1, r0, #32
   12028:	movt	r4, #2
   1202c:	movt	r7, #2
   12030:	movt	r8, #3
   12034:	movt	sl, #3
   12038:	str	r1, [sp, #76]	; 0x4c
   1203c:	add	r1, r0, #40	; 0x28
   12040:	str	r1, [sp, #72]	; 0x48
   12044:	add	r1, r0, #48	; 0x30
   12048:	str	r1, [sp, #68]	; 0x44
   1204c:	add	r1, r0, #64	; 0x40
   12050:	str	r1, [sp, #88]	; 0x58
   12054:	add	r1, r0, #80	; 0x50
   12058:	str	r1, [sp, #20]
   1205c:	add	r1, r0, #96	; 0x60
   12060:	add	r0, r0, #112	; 0x70
   12064:	str	r0, [sp, #80]	; 0x50
   12068:	sub	r0, fp, #136	; 0x88
   1206c:	str	r1, [sp, #84]	; 0x54
   12070:	add	r1, r0, #32
   12074:	str	r1, [sp, #64]	; 0x40
   12078:	add	r1, r0, #48	; 0x30
   1207c:	str	r1, [sp, #60]	; 0x3c
   12080:	add	r1, r0, #64	; 0x40
   12084:	str	r1, [sp, #56]	; 0x38
   12088:	add	r1, r0, #72	; 0x48
   1208c:	str	r1, [sp, #52]	; 0x34
   12090:	add	r1, r0, #80	; 0x50
   12094:	str	r1, [sp, #48]	; 0x30
   12098:	add	r1, r0, #88	; 0x58
   1209c:	add	r0, r0, #96	; 0x60
   120a0:	str	r0, [sp, #40]	; 0x28
   120a4:	mov	r0, #0
   120a8:	str	r1, [sp, #44]	; 0x2c
   120ac:	str	r0, [sp, #100]	; 0x64
   120b0:	mov	r0, #0
   120b4:	str	r0, [sp, #104]	; 0x68
   120b8:	ldr	r0, [sp, #112]	; 0x70
   120bc:	ldr	r1, [sp, #108]	; 0x6c
   120c0:	mov	r2, r4
   120c4:	mov	r3, r7
   120c8:	str	r5, [sp]
   120cc:	bl	11864 <getopt_long@plt>
   120d0:	cmp	r0, #98	; 0x62
   120d4:	ble	120fc <__assert_fail@plt+0x670>
   120d8:	cmp	r0, #115	; 0x73
   120dc:	bgt	12198 <__assert_fail@plt+0x70c>
   120e0:	cmp	r0, #99	; 0x63
   120e4:	beq	1220c <__assert_fail@plt+0x780>
   120e8:	cmp	r0, #102	; 0x66
   120ec:	mov	r0, #1
   120f0:	str	r0, [sp, #100]	; 0x64
   120f4:	beq	120b8 <__assert_fail@plt+0x62c>
   120f8:	b	12a94 <__assert_fail@plt+0x1008>
   120fc:	add	r1, r0, #3
   12100:	cmp	r1, #3
   12104:	bhi	121a8 <__assert_fail@plt+0x71c>
   12108:	add	r0, pc, #0
   1210c:	ldr	pc, [r0, r1, lsl #2]
   12110:	andeq	r2, r1, r4, asr #20
   12114:	andeq	r2, r1, ip, lsl #21
   12118:	andeq	r2, r1, ip, lsr #4
   1211c:	andeq	r2, r1, r0, lsr #2
   12120:	movw	r0, #20872	; 0x5188
   12124:	mov	r2, #4
   12128:	ldr	r1, [r8]
   1212c:	mov	r5, r8
   12130:	movt	r0, #3
   12134:	str	r2, [sp]
   12138:	movw	r2, #16076	; 0x3ecc
   1213c:	movt	r2, #2
   12140:	ldr	r0, [r0]
   12144:	stmib	sp, {r0, r9}
   12148:	movw	r9, #16064	; 0x3ec0
   1214c:	movw	r0, #13470	; 0x349e
   12150:	movt	r9, #2
   12154:	movt	r0, #2
   12158:	mov	r3, r9
   1215c:	bl	1a3f8 <__assert_fail@plt+0x896c>
   12160:	ldr	r0, [r9, r0, lsl #2]
   12164:	cmp	r0, #0
   12168:	beq	121c0 <__assert_fail@plt+0x734>
   1216c:	cmp	r0, #2
   12170:	beq	121cc <__assert_fail@plt+0x740>
   12174:	mov	r8, r5
   12178:	cmp	r0, #1
   1217c:	mov	r9, #1
   12180:	mov	r5, #0
   12184:	bne	120b8 <__assert_fail@plt+0x62c>
   12188:	movw	r0, #21000	; 0x5208
   1218c:	movt	r0, #3
   12190:	strh	r9, [r0, #2]
   12194:	b	120b8 <__assert_fail@plt+0x62c>
   12198:	cmp	r0, #116	; 0x74
   1219c:	bne	121ec <__assert_fail@plt+0x760>
   121a0:	mov	r6, #1
   121a4:	b	120b8 <__assert_fail@plt+0x62c>
   121a8:	cmp	r0, #76	; 0x4c
   121ac:	bne	12a94 <__assert_fail@plt+0x1008>
   121b0:	movw	r0, #21000	; 0x5208
   121b4:	movt	r0, #3
   121b8:	strb	r9, [r0, #1]
   121bc:	b	120b8 <__assert_fail@plt+0x62c>
   121c0:	movw	r0, #21000	; 0x5208
   121c4:	mov	r1, #0
   121c8:	b	121d4 <__assert_fail@plt+0x748>
   121cc:	movw	r0, #21000	; 0x5208
   121d0:	mov	r1, #256	; 0x100
   121d4:	movt	r0, #3
   121d8:	mov	r8, r5
   121dc:	strh	r1, [r0, #2]
   121e0:	mov	r9, #1
   121e4:	mov	r5, #0
   121e8:	b	120b8 <__assert_fail@plt+0x62c>
   121ec:	cmp	r0, #256	; 0x100
   121f0:	bne	12a94 <__assert_fail@plt+0x1008>
   121f4:	movw	r0, #21000	; 0x5208
   121f8:	movt	r0, #3
   121fc:	strb	r9, [r0]
   12200:	movw	r0, #12630	; 0x3156
   12204:	movt	r0, #2
   12208:	b	12220 <__assert_fail@plt+0x794>
   1220c:	movw	r0, #21000	; 0x5208
   12210:	movt	r0, #3
   12214:	strb	r5, [r0]
   12218:	movw	r0, #12629	; 0x3155
   1221c:	movt	r0, #2
   12220:	str	r0, [sl]
   12224:	ldr	r0, [r8]
   12228:	b	120b4 <__assert_fail@plt+0x628>
   1222c:	movw	r9, #20952	; 0x51d8
   12230:	ldr	r1, [sp, #112]	; 0x70
   12234:	movt	r9, #3
   12238:	ldr	r0, [r9]
   1223c:	cmp	r0, r1
   12240:	beq	12a9c <__assert_fail@plt+0x1010>
   12244:	ldr	r7, [sp, #104]	; 0x68
   12248:	movw	r8, #21000	; 0x5208
   1224c:	movt	r8, #3
   12250:	cmp	r7, #0
   12254:	beq	122b8 <__assert_fail@plt+0x82c>
   12258:	movw	r1, #13524	; 0x34d4
   1225c:	mov	r0, r7
   12260:	movt	r1, #2
   12264:	bl	20b68 <__assert_fail@plt+0xf0dc>
   12268:	cmp	r0, #0
   1226c:	beq	12340 <__assert_fail@plt+0x8b4>
   12270:	movw	r0, #13977	; 0x3699
   12274:	movt	r0, #2
   12278:	bl	117f8 <getenv@plt>
   1227c:	cmp	r0, #0
   12280:	beq	122f0 <__assert_fail@plt+0x864>
   12284:	movw	r5, #16980	; 0x4254
   12288:	movw	r1, #16936	; 0x4228
   1228c:	mov	r3, #4
   12290:	mov	r4, r0
   12294:	movt	r5, #2
   12298:	movt	r1, #2
   1229c:	mov	r2, r5
   122a0:	bl	1a074 <__assert_fail@plt+0x85e8>
   122a4:	cmp	r0, #0
   122a8:	bmi	12300 <__assert_fail@plt+0x874>
   122ac:	ldr	r1, [r5, r0, lsl #2]
   122b0:	mov	r0, #0
   122b4:	b	122f8 <__assert_fail@plt+0x86c>
   122b8:	ldr	r0, [sp, #100]	; 0x64
   122bc:	and	r5, r6, #1
   122c0:	mov	r2, #0
   122c4:	mov	r1, r5
   122c8:	and	r4, r0, #1
   122cc:	mov	r0, r4
   122d0:	bl	12ac8 <__assert_fail@plt+0x103c>
   122d4:	mov	r7, r0
   122d8:	mov	r0, r4
   122dc:	mov	r1, r5
   122e0:	mov	r2, #1
   122e4:	bl	12ac8 <__assert_fail@plt+0x103c>
   122e8:	str	r0, [sp, #24]
   122ec:	b	12344 <__assert_fail@plt+0x8b8>
   122f0:	mov	r0, #0
   122f4:	mov	r1, #4
   122f8:	bl	1d588 <__assert_fail@plt+0xbafc>
   122fc:	b	12340 <__assert_fail@plt+0x8b4>
   12300:	mov	r0, #0
   12304:	mov	r1, #4
   12308:	bl	1d588 <__assert_fail@plt+0xbafc>
   1230c:	movw	r1, #13991	; 0x36a7
   12310:	mov	r0, #0
   12314:	mov	r2, #5
   12318:	movt	r1, #2
   1231c:	bl	11720 <dcgettext@plt>
   12320:	mov	r5, r0
   12324:	mov	r0, r4
   12328:	bl	1f434 <__assert_fail@plt+0xd9a8>
   1232c:	mov	r3, r0
   12330:	mov	r0, #0
   12334:	mov	r1, #0
   12338:	mov	r2, r5
   1233c:	bl	117d4 <error@plt>
   12340:	str	r7, [sp, #24]
   12344:	ldr	r9, [r9]
   12348:	ldr	r1, [sp, #112]	; 0x70
   1234c:	mov	r0, #0
   12350:	add	r4, sp, #128	; 0x80
   12354:	cmp	r9, r1
   12358:	bge	12a3c <__assert_fail@plt+0xfb0>
   1235c:	ldr	r0, [sp, #20]
   12360:	mov	sl, #1
   12364:	str	r7, [sp, #104]	; 0x68
   12368:	add	r0, r0, #8
   1236c:	str	r0, [sp, #16]
   12370:	add	r0, sp, #116	; 0x74
   12374:	add	r0, r0, #4
   12378:	str	r0, [sp, #12]
   1237c:	ldr	r0, [sp, #84]	; 0x54
   12380:	add	r0, r0, #8
   12384:	str	r0, [sp, #36]	; 0x24
   12388:	ldr	r0, [sp, #80]	; 0x50
   1238c:	add	r0, r0, #8
   12390:	str	r0, [sp, #32]
   12394:	ldr	r0, [sp, #88]	; 0x58
   12398:	add	r0, r0, #8
   1239c:	str	r0, [sp, #28]
   123a0:	b	123d8 <__assert_fail@plt+0x94c>
   123a4:	add	r2, sp, #116	; 0x74
   123a8:	movw	r3, #22748	; 0x58dc
   123ac:	str	r2, [sp]
   123b0:	ldr	r2, [sp, #92]	; 0x5c
   123b4:	movt	r3, #1
   123b8:	bl	12c5c <__assert_fail@plt+0x11d0>
   123bc:	eor	r7, r0, #1
   123c0:	add	r4, sp, #128	; 0x80
   123c4:	ldr	r0, [sp, #112]	; 0x70
   123c8:	add	r9, r9, #1
   123cc:	and	sl, sl, r7
   123d0:	cmp	r9, r0
   123d4:	beq	12a38 <__assert_fail@plt+0xfac>
   123d8:	ldr	r0, [sp, #108]	; 0x6c
   123dc:	ldr	r5, [r0, r9, lsl #2]
   123e0:	ldr	r0, [sp, #100]	; 0x64
   123e4:	tst	r0, #1
   123e8:	beq	12468 <__assert_fail@plt+0x9dc>
   123ec:	movw	r1, #16839	; 0x41c7
   123f0:	mov	r0, r5
   123f4:	movt	r1, #2
   123f8:	bl	116b4 <strcmp@plt>
   123fc:	cmp	r0, #0
   12400:	beq	12954 <__assert_fail@plt+0xec8>
   12404:	mov	r0, r5
   12408:	mov	r1, r4
   1240c:	bl	119b4 <statfs64@plt>
   12410:	cmp	r0, #0
   12414:	beq	129f0 <__assert_fail@plt+0xf64>
   12418:	bl	118e8 <__errno_location@plt>
   1241c:	movw	r1, #14579	; 0x38f3
   12420:	mov	r4, r5
   12424:	ldr	r5, [r0]
   12428:	mov	r0, #0
   1242c:	mov	r2, #5
   12430:	mov	r7, #0
   12434:	movt	r1, #2
   12438:	bl	11720 <dcgettext@plt>
   1243c:	mov	r6, r0
   12440:	mov	r0, #4
   12444:	mov	r1, r4
   12448:	bl	1ef0c <__assert_fail@plt+0xd480>
   1244c:	mov	r3, r0
   12450:	mov	r0, #0
   12454:	mov	r1, r5
   12458:	mov	r2, r6
   1245c:	add	r4, sp, #128	; 0x80
   12460:	bl	117d4 <error@plt>
   12464:	b	123c4 <__assert_fail@plt+0x938>
   12468:	movw	r1, #16839	; 0x41c7
   1246c:	mov	r0, r5
   12470:	movt	r1, #2
   12474:	bl	116b4 <strcmp@plt>
   12478:	mov	r6, r0
   1247c:	mov	r0, r4
   12480:	mov	r1, #0
   12484:	mov	r2, #256	; 0x100
   12488:	bl	11918 <memset@plt>
   1248c:	mvn	r0, #0
   12490:	ldrb	r1, [r8, #3]
   12494:	mov	r7, #256	; 0x100
   12498:	mov	r2, r5
   1249c:	str	r5, [sp, #92]	; 0x5c
   124a0:	str	r0, [sp, #124]	; 0x7c
   124a4:	str	r0, [sp, #120]	; 0x78
   124a8:	sub	r0, fp, #136	; 0x88
   124ac:	str	r0, [sp, #116]	; 0x74
   124b0:	ldrb	r0, [r8, #1]
   124b4:	cmp	r0, #0
   124b8:	movw	r0, #12630	; 0x3156
   124bc:	movt	r0, #2
   124c0:	movwne	r7, #0
   124c4:	cmp	r6, #0
   124c8:	movweq	r7, #4096	; 0x1000
   124cc:	mvnne	r6, #99	; 0x63
   124d0:	moveq	r2, r0
   124d4:	cmp	r1, #1
   124d8:	str	r2, [sp, #96]	; 0x60
   124dc:	bne	124e8 <__assert_fail@plt+0xa5c>
   124e0:	orr	r7, r7, #16384	; 0x4000
   124e4:	b	124f0 <__assert_fail@plt+0xa64>
   124e8:	ldrb	r0, [r8, #2]
   124ec:	bfi	r7, r0, #13, #1
   124f0:	ldr	r8, [sp, #104]	; 0x68
   124f4:	mov	r5, #0
   124f8:	ldrb	r0, [r8]
   124fc:	cmp	r0, #37	; 0x25
   12500:	beq	1251c <__assert_fail@plt+0xa90>
   12504:	cmp	r0, #0
   12508:	beq	127ec <__assert_fail@plt+0xd60>
   1250c:	add	r8, r8, #1
   12510:	ldrb	r0, [r8]
   12514:	cmp	r0, #37	; 0x25
   12518:	bne	12504 <__assert_fail@plt+0xa78>
   1251c:	movw	r1, #16201	; 0x3f49
   12520:	add	r4, r8, #1
   12524:	movt	r1, #2
   12528:	mov	r0, r4
   1252c:	bl	11a80 <strspn@plt>
   12530:	add	r8, r4, r0
   12534:	movw	r4, #16209	; 0x3f51
   12538:	movt	r4, #2
   1253c:	mov	r0, r8
   12540:	mov	r1, r4
   12544:	bl	11a80 <strspn@plt>
   12548:	ldrb	r1, [r8, r0]!
   1254c:	cmp	r1, #46	; 0x2e
   12550:	bne	12568 <__assert_fail@plt+0xadc>
   12554:	add	r0, r8, #1
   12558:	mov	r1, r4
   1255c:	bl	11a80 <strspn@plt>
   12560:	add	r8, r0, r8
   12564:	ldrb	r1, [r8, #1]!
   12568:	cmp	r1, #122	; 0x7a
   1256c:	bhi	127d0 <__assert_fail@plt+0xd44>
   12570:	add	r2, pc, #4
   12574:	mov	r0, #2
   12578:	ldr	pc, [r2, r1, lsl #2]
   1257c:	andeq	r2, r1, ip, ror #15
   12580:	ldrdeq	r2, [r1], -r0
   12584:	ldrdeq	r2, [r1], -r0
   12588:	ldrdeq	r2, [r1], -r0
   1258c:	ldrdeq	r2, [r1], -r0
   12590:	ldrdeq	r2, [r1], -r0
   12594:	ldrdeq	r2, [r1], -r0
   12598:	ldrdeq	r2, [r1], -r0
   1259c:	ldrdeq	r2, [r1], -r0
   125a0:	ldrdeq	r2, [r1], -r0
   125a4:	ldrdeq	r2, [r1], -r0
   125a8:	ldrdeq	r2, [r1], -r0
   125ac:	ldrdeq	r2, [r1], -r0
   125b0:	ldrdeq	r2, [r1], -r0
   125b4:	ldrdeq	r2, [r1], -r0
   125b8:	ldrdeq	r2, [r1], -r0
   125bc:	ldrdeq	r2, [r1], -r0
   125c0:	ldrdeq	r2, [r1], -r0
   125c4:	ldrdeq	r2, [r1], -r0
   125c8:	ldrdeq	r2, [r1], -r0
   125cc:	ldrdeq	r2, [r1], -r0
   125d0:	ldrdeq	r2, [r1], -r0
   125d4:	ldrdeq	r2, [r1], -r0
   125d8:	ldrdeq	r2, [r1], -r0
   125dc:	ldrdeq	r2, [r1], -r0
   125e0:	ldrdeq	r2, [r1], -r0
   125e4:	ldrdeq	r2, [r1], -r0
   125e8:	ldrdeq	r2, [r1], -r0
   125ec:	ldrdeq	r2, [r1], -r0
   125f0:	ldrdeq	r2, [r1], -r0
   125f4:	ldrdeq	r2, [r1], -r0
   125f8:	ldrdeq	r2, [r1], -r0
   125fc:	ldrdeq	r2, [r1], -r0
   12600:	ldrdeq	r2, [r1], -r0
   12604:	ldrdeq	r2, [r1], -r0
   12608:	ldrdeq	r2, [r1], -r0
   1260c:	ldrdeq	r2, [r1], -r0
   12610:	ldrdeq	r2, [r1], -r0
   12614:	ldrdeq	r2, [r1], -r0
   12618:	ldrdeq	r2, [r1], -r0
   1261c:	ldrdeq	r2, [r1], -r0
   12620:	ldrdeq	r2, [r1], -r0
   12624:	ldrdeq	r2, [r1], -r0
   12628:	ldrdeq	r2, [r1], -r0
   1262c:	ldrdeq	r2, [r1], -r0
   12630:	ldrdeq	r2, [r1], -r0
   12634:	ldrdeq	r2, [r1], -r0
   12638:	ldrdeq	r2, [r1], -r0
   1263c:	ldrdeq	r2, [r1], -r0
   12640:	ldrdeq	r2, [r1], -r0
   12644:	ldrdeq	r2, [r1], -r0
   12648:	ldrdeq	r2, [r1], -r0
   1264c:	ldrdeq	r2, [r1], -r0
   12650:	ldrdeq	r2, [r1], -r0
   12654:	ldrdeq	r2, [r1], -r0
   12658:	ldrdeq	r2, [r1], -r0
   1265c:	ldrdeq	r2, [r1], -r0
   12660:	ldrdeq	r2, [r1], -r0
   12664:	ldrdeq	r2, [r1], -r0
   12668:	ldrdeq	r2, [r1], -r0
   1266c:	ldrdeq	r2, [r1], -r0
   12670:	ldrdeq	r2, [r1], -r0
   12674:	ldrdeq	r2, [r1], -r0
   12678:	ldrdeq	r2, [r1], -r0
   1267c:	ldrdeq	r2, [r1], -r0
   12680:	ldrdeq	r2, [r1], -r4
   12684:	ldrdeq	r2, [r1], -r0
   12688:	ldrdeq	r2, [r1], -r0
   1268c:	ldrdeq	r2, [r1], -r4
   12690:	ldrdeq	r2, [r1], -r0
   12694:	andeq	r2, r1, r8, lsr #15
   12698:	andeq	r2, r1, r8, ror #14
   1269c:	ldrdeq	r2, [r1], -r0
   126a0:	ldrdeq	r2, [r1], -r0
   126a4:	ldrdeq	r2, [r1], -r0
   126a8:	ldrdeq	r2, [r1], -r0
   126ac:	ldrdeq	r2, [r1], -r0
   126b0:	ldrdeq	r2, [r1], -r0
   126b4:	ldrdeq	r2, [r1], -r4
   126b8:	ldrdeq	r2, [r1], -r0
   126bc:	ldrdeq	r2, [r1], -r0
   126c0:	ldrdeq	r2, [r1], -r0
   126c4:	ldrdeq	r2, [r1], -r0
   126c8:	ldrdeq	r2, [r1], -r0
   126cc:	ldrdeq	r2, [r1], -r4
   126d0:	andeq	r2, r1, r8, lsl #15
   126d4:	ldrdeq	r2, [r1], -r0
   126d8:	andeq	r2, r1, r0, lsl #15
   126dc:	muleq	r1, r0, r7
   126e0:	andeq	r2, r1, r0, ror r7
   126e4:	andeq	r2, r1, r8, ror r7
   126e8:	ldrdeq	r2, [r1], -r0
   126ec:	ldrdeq	r2, [r1], -r0
   126f0:	ldrdeq	r2, [r1], -r0
   126f4:	ldrdeq	r2, [r1], -r0
   126f8:	ldrdeq	r2, [r1], -r0
   126fc:	ldrdeq	r2, [r1], -r0
   12700:	ldrdeq	r2, [r1], -r4
   12704:	andeq	r2, r1, r8, asr #15
   12708:	ldrdeq	r2, [r1], -r0
   1270c:	ldrdeq	r2, [r1], -r4
   12710:	ldrdeq	r2, [r1], -r0
   12714:			; <UNDEFINED> instruction: 0x000127b8
   12718:	andeq	r2, r1, r8, ror #14
   1271c:	andeq	r2, r1, r0, asr #15
   12720:	andeq	r2, r1, r0, lsr #15
   12724:	ldrdeq	r2, [r1], -r0
   12728:	ldrdeq	r2, [r1], -r0
   1272c:	ldrdeq	r2, [r1], -r0
   12730:	muleq	r1, r8, r7
   12734:	ldrdeq	r2, [r1], -r0
   12738:	ldrdeq	r2, [r1], -r0
   1273c:	ldrdeq	r2, [r1], -r0
   12740:	ldrdeq	r2, [r1], -r0
   12744:	ldrdeq	r2, [r1], -r0
   12748:			; <UNDEFINED> instruction: 0x000127b0
   1274c:	ldrdeq	r2, [r1], -r4
   12750:	andeq	r2, r1, r8, lsl #15
   12754:	ldrdeq	r2, [r1], -r0
   12758:	andeq	r2, r1, r0, lsl #15
   1275c:	muleq	r1, r0, r7
   12760:	andeq	r2, r1, r0, ror r7
   12764:	andeq	r2, r1, r8, ror r7
   12768:	mov	r0, #16
   1276c:	b	127d4 <__assert_fail@plt+0xd48>
   12770:	mov	r0, #64	; 0x40
   12774:	b	127d4 <__assert_fail@plt+0xd48>
   12778:	mov	r0, #128	; 0x80
   1277c:	b	127d4 <__assert_fail@plt+0xd48>
   12780:	mov	r0, #2048	; 0x800
   12784:	b	127d4 <__assert_fail@plt+0xd48>
   12788:	mov	r0, #8
   1278c:	b	127d4 <__assert_fail@plt+0xd48>
   12790:	mov	r0, #32
   12794:	b	127d4 <__assert_fail@plt+0xd48>
   12798:	movw	r0, #258	; 0x102
   1279c:	b	127d4 <__assert_fail@plt+0xd48>
   127a0:	mov	r0, #256	; 0x100
   127a4:	b	127d4 <__assert_fail@plt+0xd48>
   127a8:	mov	r0, #1
   127ac:	b	127d4 <__assert_fail@plt+0xd48>
   127b0:	mov	r0, #512	; 0x200
   127b4:	b	127d4 <__assert_fail@plt+0xd48>
   127b8:	mov	r0, #3
   127bc:	b	127d4 <__assert_fail@plt+0xd48>
   127c0:	mov	r0, #4
   127c4:	b	127d4 <__assert_fail@plt+0xd48>
   127c8:	mov	r0, #1024	; 0x400
   127cc:	b	127d4 <__assert_fail@plt+0xd48>
   127d0:	mov	r0, #0
   127d4:	orr	r5, r0, r5
   127d8:	add	r8, r8, #1
   127dc:	ldrb	r0, [r8]
   127e0:	cmp	r0, #37	; 0x25
   127e4:	bne	12504 <__assert_fail@plt+0xa78>
   127e8:	b	1251c <__assert_fail@plt+0xa90>
   127ec:	ldr	r1, [sp, #96]	; 0x60
   127f0:	add	r0, sp, #128	; 0x80
   127f4:	mov	r2, r7
   127f8:	mov	r3, r5
   127fc:	str	r0, [sp]
   12800:	mov	r0, r6
   12804:	bl	1196c <statx@plt>
   12808:	cmn	r0, #1
   1280c:	ble	12998 <__assert_fail@plt+0xf0c>
   12810:	ldr	r3, [sp, #264]	; 0x108
   12814:	movw	r5, #65280	; 0xff00
   12818:	ldr	r7, [sp, #268]	; 0x10c
   1281c:	ldrh	r2, [sp, #156]	; 0x9c
   12820:	mov	r1, r0
   12824:	sub	lr, fp, #116	; 0x74
   12828:	movw	r8, #21000	; 0x5208
   1282c:	movt	r5, #15
   12830:	movt	r8, #3
   12834:	mov	ip, r5
   12838:	and	r5, r5, r3, lsl #8
   1283c:	bfc	r3, #0, #12
   12840:	bic	r6, r7, #255	; 0xff
   12844:	and	r0, r2, #45056	; 0xb000
   12848:	orr	r0, r0, #16384	; 0x4000
   1284c:	orr	r3, r3, r6, lsr #20
   12850:	cmp	r0, #24576	; 0x6000
   12854:	ldr	r0, [sp, #104]	; 0x68
   12858:	ldreq	r0, [sp, #24]
   1285c:	str	r3, [fp, #-132]	; 0xffffff7c
   12860:	uxtb	r3, r7
   12864:	add	r7, sp, #144	; 0x90
   12868:	orr	r3, r5, r3
   1286c:	orr	r3, r3, r6, lsl #12
   12870:	ldr	r6, [sp, #256]	; 0x100
   12874:	str	r3, [fp, #-136]	; 0xffffff78
   12878:	ldr	r3, [sp, #76]	; 0x4c
   1287c:	ldrd	r4, [r3]
   12880:	ldr	r3, [sp, #40]	; 0x28
   12884:	strd	r4, [r3]
   12888:	str	r2, [fp, #-120]	; 0xffffff88
   1288c:	ldm	r7, {r2, r3, r7}
   12890:	stm	lr, {r2, r3, r7}
   12894:	ldr	r2, [sp, #260]	; 0x104
   12898:	and	r7, ip, r6, lsl #8
   1289c:	bfc	r6, #0, #12
   128a0:	bic	r3, r2, #255	; 0xff
   128a4:	uxtb	r2, r2
   128a8:	orr	r5, r6, r3, lsr #20
   128ac:	orr	r2, r7, r2
   128b0:	ldr	r7, [sp, #60]	; 0x3c
   128b4:	orr	r4, r2, r3, lsl #12
   128b8:	ldr	r2, [sp, #64]	; 0x40
   128bc:	strd	r4, [r2]
   128c0:	ldr	r2, [sp, #72]	; 0x48
   128c4:	ldrd	r2, [r2]
   128c8:	strd	r2, [r7]
   128cc:	ldr	r2, [sp, #132]	; 0x84
   128d0:	ldr	r7, [sp, #56]	; 0x38
   128d4:	str	r2, [fp, #-80]	; 0xffffffb0
   128d8:	ldr	r2, [sp, #68]	; 0x44
   128dc:	ldrd	r2, [r2]
   128e0:	strd	r2, [r7]
   128e4:	ldr	r2, [sp, #88]	; 0x58
   128e8:	ldr	r3, [sp, #28]
   128ec:	ldr	r7, [sp, #52]	; 0x34
   128f0:	ldr	r2, [r2]
   128f4:	ldr	r3, [r3]
   128f8:	strd	r2, [r7]
   128fc:	ldr	r2, [sp, #80]	; 0x50
   12900:	ldr	r3, [sp, #32]
   12904:	ldr	r7, [sp, #48]	; 0x30
   12908:	ldr	r2, [r2]
   1290c:	ldr	r3, [r3]
   12910:	strd	r2, [r7]
   12914:	ldr	r2, [sp, #84]	; 0x54
   12918:	ldr	r3, [sp, #36]	; 0x24
   1291c:	ldr	r7, [sp, #44]	; 0x2c
   12920:	ldr	r2, [r2]
   12924:	ldr	r3, [r3]
   12928:	strd	r2, [r7]
   1292c:	ldrb	r2, [sp, #129]	; 0x81
   12930:	tst	r2, #8
   12934:	beq	123a4 <__assert_fail@plt+0x918>
   12938:	ldr	r2, [sp, #20]
   1293c:	ldr	r3, [sp, #16]
   12940:	ldr	r7, [sp, #12]
   12944:	ldr	r2, [r2]
   12948:	ldr	r3, [r3]
   1294c:	stm	r7, {r2, r3}
   12950:	b	123a4 <__assert_fail@plt+0x918>
   12954:	movw	r1, #14511	; 0x38af
   12958:	mov	r0, #0
   1295c:	mov	r2, #5
   12960:	mov	r7, #0
   12964:	movt	r1, #2
   12968:	bl	11720 <dcgettext@plt>
   1296c:	mov	r1, r5
   12970:	mov	r5, r0
   12974:	mov	r0, #4
   12978:	bl	1ef0c <__assert_fail@plt+0xd480>
   1297c:	mov	r3, r0
   12980:	mov	r0, #0
   12984:	mov	r1, #0
   12988:	mov	r2, r5
   1298c:	add	r4, sp, #128	; 0x80
   12990:	bl	117d4 <error@plt>
   12994:	b	123c4 <__assert_fail@plt+0x938>
   12998:	bl	118e8 <__errno_location@plt>
   1299c:	ldr	r5, [r0]
   129a0:	movw	r8, #21000	; 0x5208
   129a4:	tst	r7, #4096	; 0x1000
   129a8:	mov	r7, #0
   129ac:	mov	r0, #0
   129b0:	movt	r8, #3
   129b4:	bne	12a14 <__assert_fail@plt+0xf88>
   129b8:	movw	r1, #15816	; 0x3dc8
   129bc:	mov	r2, #5
   129c0:	movt	r1, #2
   129c4:	bl	11720 <dcgettext@plt>
   129c8:	ldr	r1, [sp, #92]	; 0x5c
   129cc:	mov	r4, r0
   129d0:	mov	r0, #4
   129d4:	bl	1ef0c <__assert_fail@plt+0xd480>
   129d8:	mov	r3, r0
   129dc:	mov	r0, #0
   129e0:	mov	r1, r5
   129e4:	mov	r2, r4
   129e8:	bl	117d4 <error@plt>
   129ec:	b	123c0 <__assert_fail@plt+0x934>
   129f0:	ldr	r0, [sp, #104]	; 0x68
   129f4:	movw	r3, #13020	; 0x32dc
   129f8:	mvn	r1, #0
   129fc:	mov	r2, r5
   12a00:	str	r4, [sp]
   12a04:	movt	r3, #1
   12a08:	bl	12c5c <__assert_fail@plt+0x11d0>
   12a0c:	eor	r7, r0, #1
   12a10:	b	123c4 <__assert_fail@plt+0x938>
   12a14:	movw	r1, #15789	; 0x3dad
   12a18:	mov	r2, #5
   12a1c:	movt	r1, #2
   12a20:	bl	11720 <dcgettext@plt>
   12a24:	mov	r2, r0
   12a28:	mov	r0, #0
   12a2c:	mov	r1, r5
   12a30:	bl	117d4 <error@plt>
   12a34:	b	123c0 <__assert_fail@plt+0x934>
   12a38:	eor	r0, sl, #1
   12a3c:	sub	sp, fp, #28
   12a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a44:	movw	r0, #20868	; 0x5184
   12a48:	movw	r2, #13493	; 0x34b5
   12a4c:	mov	r1, #0
   12a50:	movt	r0, #3
   12a54:	movt	r2, #2
   12a58:	str	r1, [sp, #4]
   12a5c:	movw	r1, #13435	; 0x347b
   12a60:	movt	r1, #2
   12a64:	ldr	r3, [r0]
   12a68:	movw	r0, #20964	; 0x51e4
   12a6c:	str	r2, [sp]
   12a70:	movw	r2, #13479	; 0x34a7
   12a74:	movt	r0, #3
   12a78:	movt	r2, #2
   12a7c:	ldr	r0, [r0]
   12a80:	bl	2026c <__assert_fail@plt+0xe7e0>
   12a84:	mov	r0, #0
   12a88:	bl	11888 <exit@plt>
   12a8c:	mov	r0, #0
   12a90:	bl	11b90 <__assert_fail@plt+0x104>
   12a94:	mov	r0, #1
   12a98:	bl	11b90 <__assert_fail@plt+0x104>
   12a9c:	movw	r1, #13508	; 0x34c4
   12aa0:	mov	r0, #0
   12aa4:	mov	r2, #5
   12aa8:	movt	r1, #2
   12aac:	bl	11720 <dcgettext@plt>
   12ab0:	mov	r2, r0
   12ab4:	mov	r0, #0
   12ab8:	mov	r1, #0
   12abc:	bl	117d4 <error@plt>
   12ac0:	mov	r0, #1
   12ac4:	bl	11b90 <__assert_fail@plt+0x104>
   12ac8:	push	{r4, r5, r6, sl, fp, lr}
   12acc:	add	fp, sp, #16
   12ad0:	cmp	r0, #0
   12ad4:	beq	12af0 <__assert_fail@plt+0x1064>
   12ad8:	cmp	r1, #0
   12adc:	beq	12b14 <__assert_fail@plt+0x1088>
   12ae0:	movw	r0, #15884	; 0x3e0c
   12ae4:	movt	r0, #2
   12ae8:	pop	{r4, r5, r6, sl, fp, lr}
   12aec:	b	209a4 <__assert_fail@plt+0xef18>
   12af0:	cmp	r1, #0
   12af4:	beq	12b30 <__assert_fail@plt+0x10a4>
   12af8:	bl	116a8 <is_selinux_enabled@plt>
   12afc:	cmp	r0, #1
   12b00:	blt	12c0c <__assert_fail@plt+0x1180>
   12b04:	movw	r0, #15832	; 0x3dd8
   12b08:	movt	r0, #2
   12b0c:	pop	{r4, r5, r6, sl, fp, lr}
   12b10:	b	209a4 <__assert_fail@plt+0xef18>
   12b14:	movw	r1, #14056	; 0x36e8
   12b18:	mov	r0, #0
   12b1c:	mov	r2, #5
   12b20:	movt	r1, #2
   12b24:	bl	11720 <dcgettext@plt>
   12b28:	pop	{r4, r5, r6, sl, fp, lr}
   12b2c:	b	209a4 <__assert_fail@plt+0xef18>
   12b30:	movw	r1, #14228	; 0x3794
   12b34:	mov	r4, r2
   12b38:	mov	r0, #0
   12b3c:	mov	r2, #5
   12b40:	movt	r1, #2
   12b44:	bl	11720 <dcgettext@plt>
   12b48:	bl	209a4 <__assert_fail@plt+0xef18>
   12b4c:	mov	r5, r0
   12b50:	movw	r0, #14291	; 0x37d3
   12b54:	movw	r1, #14355	; 0x3813
   12b58:	cmp	r4, #0
   12b5c:	mov	r2, #5
   12b60:	movt	r0, #2
   12b64:	movt	r1, #2
   12b68:	movne	r1, r0
   12b6c:	mov	r0, #0
   12b70:	bl	11720 <dcgettext@plt>
   12b74:	movw	r4, #14286	; 0x37ce
   12b78:	mov	r2, r0
   12b7c:	mov	r1, r5
   12b80:	movt	r4, #2
   12b84:	mov	r0, r4
   12b88:	bl	20a5c <__assert_fail@plt+0xefd0>
   12b8c:	mov	r6, r0
   12b90:	mov	r0, r5
   12b94:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   12b98:	movw	r1, #14396	; 0x383c
   12b9c:	mov	r0, #0
   12ba0:	mov	r2, #5
   12ba4:	movt	r1, #2
   12ba8:	bl	11720 <dcgettext@plt>
   12bac:	mov	r2, r0
   12bb0:	mov	r0, r4
   12bb4:	mov	r1, r6
   12bb8:	bl	20a5c <__assert_fail@plt+0xefd0>
   12bbc:	mov	r4, r0
   12bc0:	mov	r0, r6
   12bc4:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   12bc8:	bl	116a8 <is_selinux_enabled@plt>
   12bcc:	cmp	r0, #1
   12bd0:	blt	12c1c <__assert_fail@plt+0x1190>
   12bd4:	movw	r1, #14453	; 0x3875
   12bd8:	mov	r0, #0
   12bdc:	mov	r2, #5
   12be0:	movt	r1, #2
   12be4:	bl	11720 <dcgettext@plt>
   12be8:	mov	r2, r0
   12bec:	movw	r0, #14286	; 0x37ce
   12bf0:	mov	r1, r4
   12bf4:	movt	r0, #2
   12bf8:	bl	20a5c <__assert_fail@plt+0xefd0>
   12bfc:	mov	r5, r0
   12c00:	mov	r0, r4
   12c04:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   12c08:	b	12c20 <__assert_fail@plt+0x1194>
   12c0c:	movw	r0, #16152	; 0x3f18
   12c10:	movt	r0, #2
   12c14:	pop	{r4, r5, r6, sl, fp, lr}
   12c18:	b	209a4 <__assert_fail@plt+0xef18>
   12c1c:	mov	r5, r4
   12c20:	movw	r1, #14466	; 0x3882
   12c24:	mov	r0, #0
   12c28:	mov	r2, #5
   12c2c:	movt	r1, #2
   12c30:	bl	11720 <dcgettext@plt>
   12c34:	mov	r2, r0
   12c38:	movw	r0, #14286	; 0x37ce
   12c3c:	mov	r1, r5
   12c40:	movt	r0, #2
   12c44:	bl	20a5c <__assert_fail@plt+0xefd0>
   12c48:	mov	r4, r0
   12c4c:	mov	r0, r5
   12c50:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   12c54:	mov	r0, r4
   12c58:	pop	{r4, r5, r6, sl, fp, pc}
   12c5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c60:	add	fp, sp, #28
   12c64:	sub	sp, sp, #28
   12c68:	add	ip, sp, #16
   12c6c:	mov	sl, r0
   12c70:	stm	ip, {r1, r2, r3}
   12c74:	bl	118ac <strlen@plt>
   12c78:	add	r0, r0, #4
   12c7c:	bl	204a0 <__assert_fail@plt+0xea14>
   12c80:	movw	r5, #16209	; 0x3f51
   12c84:	movw	r6, #20964	; 0x51e4
   12c88:	mov	r4, r0
   12c8c:	mov	r9, #0
   12c90:	movt	r5, #2
   12c94:	movt	r6, #3
   12c98:	ldrb	r1, [sl]
   12c9c:	cmp	r1, #37	; 0x25
   12ca0:	bne	12cf0 <__assert_fail@plt+0x1264>
   12ca4:	b	12d30 <__assert_fail@plt+0x12a4>
   12ca8:	mov	r3, r5
   12cac:	ldr	r0, [sp, #16]
   12cb0:	mov	r1, r7
   12cb4:	ldr	r7, [sp, #24]
   12cb8:	str	r0, [sp]
   12cbc:	ldr	r0, [sp, #20]
   12cc0:	str	r0, [sp, #4]
   12cc4:	ldr	r0, [fp, #8]
   12cc8:	str	r0, [sp, #8]
   12ccc:	mov	r0, r4
   12cd0:	blx	r7
   12cd4:	orr	r9, r9, r0
   12cd8:	add	sl, r8, #1
   12cdc:	movw	r5, #16209	; 0x3f51
   12ce0:	movt	r5, #2
   12ce4:	ldrb	r1, [sl]
   12ce8:	cmp	r1, #37	; 0x25
   12cec:	beq	12d30 <__assert_fail@plt+0x12a4>
   12cf0:	cmp	r1, #92	; 0x5c
   12cf4:	beq	12da8 <__assert_fail@plt+0x131c>
   12cf8:	cmp	r1, #0
   12cfc:	beq	13270 <__assert_fail@plt+0x17e4>
   12d00:	ldr	r0, [r6]
   12d04:	ldr	r2, [r0, #20]
   12d08:	ldr	r3, [r0, #24]
   12d0c:	cmp	r2, r3
   12d10:	bcs	13220 <__assert_fail@plt+0x1794>
   12d14:	add	r3, r2, #1
   12d18:	add	sl, sl, #1
   12d1c:	str	r3, [r0, #20]
   12d20:	strb	r1, [r2]
   12d24:	ldrb	r1, [sl]
   12d28:	cmp	r1, #37	; 0x25
   12d2c:	bne	12cf0 <__assert_fail@plt+0x1264>
   12d30:	movw	r1, #16201	; 0x3f49
   12d34:	add	r7, sl, #1
   12d38:	movt	r1, #2
   12d3c:	mov	r0, r7
   12d40:	bl	11a80 <strspn@plt>
   12d44:	add	r8, r7, r0
   12d48:	mov	r1, r5
   12d4c:	mov	r0, r8
   12d50:	bl	11a80 <strspn@plt>
   12d54:	mov	r1, r5
   12d58:	ldrb	r5, [r8, r0]!
   12d5c:	cmp	r5, #46	; 0x2e
   12d60:	bne	12d74 <__assert_fail@plt+0x12e8>
   12d64:	add	r0, r8, #1
   12d68:	bl	11a80 <strspn@plt>
   12d6c:	add	r8, r0, r8
   12d70:	ldrb	r5, [r8, #1]!
   12d74:	sub	r7, r8, sl
   12d78:	mov	r0, r4
   12d7c:	mov	r1, sl
   12d80:	mov	r2, r7
   12d84:	bl	11708 <memcpy@plt>
   12d88:	mov	r2, #0
   12d8c:	cmp	r5, #71	; 0x47
   12d90:	bgt	12e70 <__assert_fail@plt+0x13e4>
   12d94:	cmp	r5, #0
   12d98:	beq	13028 <__assert_fail@plt+0x159c>
   12d9c:	cmp	r5, #37	; 0x25
   12da0:	beq	1302c <__assert_fail@plt+0x15a0>
   12da4:	b	12ca8 <__assert_fail@plt+0x121c>
   12da8:	movw	r0, #21000	; 0x5208
   12dac:	movt	r0, #3
   12db0:	ldrb	r0, [r0]
   12db4:	cmp	r0, #0
   12db8:	beq	12e38 <__assert_fail@plt+0x13ac>
   12dbc:	mov	r5, sl
   12dc0:	ldrb	r7, [r5, #1]!
   12dc4:	and	r0, r7, #248	; 0xf8
   12dc8:	cmp	r0, #48	; 0x30
   12dcc:	bne	12eb0 <__assert_fail@plt+0x1424>
   12dd0:	mov	r5, sl
   12dd4:	sub	r1, r7, #48	; 0x30
   12dd8:	ldrb	r0, [r5, #2]!
   12ddc:	and	r2, r0, #248	; 0xf8
   12de0:	cmp	r2, #48	; 0x30
   12de4:	bne	12e0c <__assert_fail@plt+0x1380>
   12de8:	add	r0, r0, r1, lsl #3
   12dec:	mov	r5, sl
   12df0:	sub	r1, r0, #48	; 0x30
   12df4:	ldrb	r0, [r5, #3]!
   12df8:	and	r2, r0, #248	; 0xf8
   12dfc:	cmp	r2, #48	; 0x30
   12e00:	addeq	r0, r0, r1, lsl #3
   12e04:	addeq	r5, sl, #4
   12e08:	subeq	r1, r0, #48	; 0x30
   12e0c:	ldr	r0, [r6]
   12e10:	ldr	r2, [r0, #20]
   12e14:	ldr	r3, [r0, #24]
   12e18:	cmp	r2, r3
   12e1c:	bcs	13244 <__assert_fail@plt+0x17b8>
   12e20:	add	r3, r2, #1
   12e24:	str	r3, [r0, #20]
   12e28:	strb	r1, [r2]
   12e2c:	sub	r0, r5, #1
   12e30:	add	sl, r0, #1
   12e34:	b	12cdc <__assert_fail@plt+0x1250>
   12e38:	ldr	r0, [r6]
   12e3c:	ldr	r1, [r0, #20]
   12e40:	ldr	r2, [r0, #24]
   12e44:	cmp	r1, r2
   12e48:	bcs	1321c <__assert_fail@plt+0x1790>
   12e4c:	add	r2, r1, #1
   12e50:	add	sl, sl, #1
   12e54:	str	r2, [r0, #20]
   12e58:	mov	r0, #92	; 0x5c
   12e5c:	strb	r0, [r1]
   12e60:	ldrb	r1, [sl]
   12e64:	cmp	r1, #37	; 0x25
   12e68:	bne	12cf0 <__assert_fail@plt+0x1264>
   12e6c:	b	12d30 <__assert_fail@plt+0x12a4>
   12e70:	cmp	r5, #72	; 0x48
   12e74:	cmpne	r5, #76	; 0x4c
   12e78:	bne	12ca8 <__assert_fail@plt+0x121c>
   12e7c:	ldr	r0, [sp, #24]
   12e80:	movw	r1, #22748	; 0x58dc
   12e84:	movt	r1, #1
   12e88:	cmp	r0, r1
   12e8c:	bne	12ca8 <__assert_fail@plt+0x121c>
   12e90:	mov	r0, r8
   12e94:	ldrb	r3, [r0, #1]!
   12e98:	cmp	r3, #100	; 0x64
   12e9c:	cmpne	r3, #114	; 0x72
   12ea0:	bne	12ca8 <__assert_fail@plt+0x121c>
   12ea4:	mov	r8, r0
   12ea8:	mov	r2, r5
   12eac:	b	12cac <__assert_fail@plt+0x1220>
   12eb0:	sub	r0, r7, #34	; 0x22
   12eb4:	cmp	r0, #86	; 0x56
   12eb8:	bhi	1305c <__assert_fail@plt+0x15d0>
   12ebc:	add	r1, pc, #0
   12ec0:	ldr	pc, [r1, r0, lsl #2]
   12ec4:	andeq	r3, r1, r4, lsr r1
   12ec8:	andeq	r3, r1, r4, lsl #2
   12ecc:	andeq	r3, r1, r4, lsl #2
   12ed0:	andeq	r3, r1, r4, lsl #2
   12ed4:	andeq	r3, r1, r4, lsl #2
   12ed8:	andeq	r3, r1, r4, lsl #2
   12edc:	andeq	r3, r1, r4, lsl #2
   12ee0:	andeq	r3, r1, r4, lsl #2
   12ee4:	andeq	r3, r1, r4, lsl #2
   12ee8:	andeq	r3, r1, r4, lsl #2
   12eec:	andeq	r3, r1, r4, lsl #2
   12ef0:	andeq	r3, r1, r4, lsl #2
   12ef4:	andeq	r3, r1, r4, lsl #2
   12ef8:	andeq	r3, r1, r4, lsl #2
   12efc:	andeq	r3, r1, r4, lsl #2
   12f00:	andeq	r3, r1, r4, lsl #2
   12f04:	andeq	r3, r1, r4, lsl #2
   12f08:	andeq	r3, r1, r4, lsl #2
   12f0c:	andeq	r3, r1, r4, lsl #2
   12f10:	andeq	r3, r1, r4, lsl #2
   12f14:	andeq	r3, r1, r4, lsl #2
   12f18:	andeq	r3, r1, r4, lsl #2
   12f1c:	andeq	r3, r1, r4, lsl #2
   12f20:	andeq	r3, r1, r4, lsl #2
   12f24:	andeq	r3, r1, r4, lsl #2
   12f28:	andeq	r3, r1, r4, lsl #2
   12f2c:	andeq	r3, r1, r4, lsl #2
   12f30:	andeq	r3, r1, r4, lsl #2
   12f34:	andeq	r3, r1, r4, lsl #2
   12f38:	andeq	r3, r1, r4, lsl #2
   12f3c:	andeq	r3, r1, r4, lsl #2
   12f40:	andeq	r3, r1, r4, lsl #2
   12f44:	andeq	r3, r1, r4, lsl #2
   12f48:	andeq	r3, r1, r4, lsl #2
   12f4c:	andeq	r3, r1, r4, lsl #2
   12f50:	andeq	r3, r1, r4, lsl #2
   12f54:	andeq	r3, r1, r4, lsl #2
   12f58:	andeq	r3, r1, r4, lsl #2
   12f5c:	andeq	r3, r1, r4, lsl #2
   12f60:	andeq	r3, r1, r4, lsl #2
   12f64:	andeq	r3, r1, r4, lsl #2
   12f68:	andeq	r3, r1, r4, lsl #2
   12f6c:	andeq	r3, r1, r4, lsl #2
   12f70:	andeq	r3, r1, r4, lsl #2
   12f74:	andeq	r3, r1, r4, lsl #2
   12f78:	andeq	r3, r1, r4, lsl #2
   12f7c:	andeq	r3, r1, r4, lsl #2
   12f80:	andeq	r3, r1, r4, lsl #2
   12f84:	andeq	r3, r1, r4, lsl #2
   12f88:	andeq	r3, r1, r4, lsl #2
   12f8c:	andeq	r3, r1, r4, lsl #2
   12f90:	andeq	r3, r1, r4, lsl #2
   12f94:	andeq	r3, r1, r4, lsl #2
   12f98:	andeq	r3, r1, r4, lsl #2
   12f9c:	andeq	r3, r1, r4, lsl #2
   12fa0:	andeq	r3, r1, r4, lsl #2
   12fa4:	andeq	r3, r1, r4, lsl #2
   12fa8:	andeq	r3, r1, r4, lsl #2
   12fac:	andeq	r3, r1, r4, lsr r1
   12fb0:	andeq	r3, r1, r4, lsl #2
   12fb4:	andeq	r3, r1, r4, lsl #2
   12fb8:	andeq	r3, r1, r4, lsl #2
   12fbc:	andeq	r3, r1, r4, lsl #2
   12fc0:	andeq	r3, r1, r0, lsr #32
   12fc4:	ldrdeq	r3, [r1], -r4
   12fc8:	andeq	r3, r1, r4, lsl #2
   12fcc:	andeq	r3, r1, r4, lsl #2
   12fd0:	strheq	r3, [r1], -ip
   12fd4:	andeq	r3, r1, r4, asr #1
   12fd8:	andeq	r3, r1, r4, lsl #2
   12fdc:	andeq	r3, r1, r4, lsl #2
   12fe0:	andeq	r3, r1, r4, lsl #2
   12fe4:	andeq	r3, r1, r4, lsl #2
   12fe8:	andeq	r3, r1, r4, lsl #2
   12fec:	andeq	r3, r1, r4, lsl #2
   12ff0:	andeq	r3, r1, r4, lsl #2
   12ff4:	andeq	r3, r1, ip, asr #1
   12ff8:	andeq	r3, r1, r4, lsl #2
   12ffc:	andeq	r3, r1, r4, lsl #2
   13000:	andeq	r3, r1, r4, lsl #2
   13004:	ldrdeq	r3, [r1], -ip
   13008:	andeq	r3, r1, r4, lsl #2
   1300c:	strheq	r3, [r1], -r4
   13010:	andeq	r3, r1, r4, lsl #2
   13014:	andeq	r3, r1, r0, lsr r1
   13018:	andeq	r3, r1, r4, lsl #2
   1301c:	andeq	r3, r1, r4, ror #1
   13020:	mov	r7, #7
   13024:	b	13134 <__assert_fail@plt+0x16a8>
   13028:	sub	r8, r8, #1
   1302c:	cmp	r7, #2
   13030:	bcs	13298 <__assert_fail@plt+0x180c>
   13034:	ldr	r0, [r6]
   13038:	ldr	r1, [r0, #20]
   1303c:	ldr	r2, [r0, #24]
   13040:	cmp	r1, r2
   13044:	bcs	13238 <__assert_fail@plt+0x17ac>
   13048:	add	r2, r1, #1
   1304c:	str	r2, [r0, #20]
   13050:	mov	r0, #37	; 0x25
   13054:	strb	r0, [r1]
   13058:	b	12cd8 <__assert_fail@plt+0x124c>
   1305c:	cmp	r7, #0
   13060:	bne	13104 <__assert_fail@plt+0x1678>
   13064:	movw	r1, #14644	; 0x3934
   13068:	mov	r0, #0
   1306c:	mov	r2, #5
   13070:	movt	r1, #2
   13074:	bl	11720 <dcgettext@plt>
   13078:	mov	r2, r0
   1307c:	mov	r0, #0
   13080:	mov	r1, #0
   13084:	bl	117d4 <error@plt>
   13088:	ldr	r0, [r6]
   1308c:	ldr	r1, [r0, #20]
   13090:	ldr	r2, [r0, #24]
   13094:	cmp	r1, r2
   13098:	bcs	1325c <__assert_fail@plt+0x17d0>
   1309c:	add	r2, r1, #1
   130a0:	str	r2, [r0, #20]
   130a4:	mov	r0, #92	; 0x5c
   130a8:	strb	r0, [r1]
   130ac:	add	sl, sl, #1
   130b0:	b	12cdc <__assert_fail@plt+0x1250>
   130b4:	mov	r7, #9
   130b8:	b	13134 <__assert_fail@plt+0x16a8>
   130bc:	mov	r7, #27
   130c0:	b	13134 <__assert_fail@plt+0x16a8>
   130c4:	mov	r7, #12
   130c8:	b	13134 <__assert_fail@plt+0x16a8>
   130cc:	mov	r7, #10
   130d0:	b	13134 <__assert_fail@plt+0x16a8>
   130d4:	mov	r7, #8
   130d8:	b	13134 <__assert_fail@plt+0x16a8>
   130dc:	mov	r7, #13
   130e0:	b	13134 <__assert_fail@plt+0x16a8>
   130e4:	bl	11870 <__ctype_b_loc@plt>
   130e8:	mov	r1, sl
   130ec:	ldr	r0, [r0]
   130f0:	ldrb	r2, [r1, #2]!
   130f4:	add	r3, r0, r2, lsl #1
   130f8:	ldrb	r3, [r3, #1]
   130fc:	tst	r3, #16
   13100:	bne	1315c <__assert_fail@plt+0x16d0>
   13104:	movw	r1, #14911	; 0x3a3f
   13108:	mov	r0, #0
   1310c:	mov	r2, #5
   13110:	movt	r1, #2
   13114:	bl	11720 <dcgettext@plt>
   13118:	mov	r2, r0
   1311c:	mov	r0, #0
   13120:	mov	r1, #0
   13124:	mov	r3, r7
   13128:	bl	117d4 <error@plt>
   1312c:	b	13134 <__assert_fail@plt+0x16a8>
   13130:	mov	r7, #11
   13134:	ldr	r0, [r6]
   13138:	ldr	r1, [r0, #20]
   1313c:	ldr	r2, [r0, #24]
   13140:	cmp	r1, r2
   13144:	bcs	13250 <__assert_fail@plt+0x17c4>
   13148:	add	r2, r1, #1
   1314c:	str	r2, [r0, #20]
   13150:	strb	r7, [r1]
   13154:	add	sl, r5, #1
   13158:	b	12cdc <__assert_fail@plt+0x1250>
   1315c:	sub	r3, r2, #97	; 0x61
   13160:	uxtb	r7, r3
   13164:	mvn	r3, #86	; 0x56
   13168:	cmp	r7, #6
   1316c:	bcc	13184 <__assert_fail@plt+0x16f8>
   13170:	sub	r3, r2, #65	; 0x41
   13174:	uxtb	r3, r3
   13178:	cmp	r3, #6
   1317c:	mvn	r3, #47	; 0x2f
   13180:	mvncc	r3, #54	; 0x36
   13184:	add	r2, r3, r2
   13188:	ldrb	r3, [sl, #3]!
   1318c:	add	r0, r0, r3, lsl #1
   13190:	ldrb	r0, [r0, #1]
   13194:	tst	r0, #16
   13198:	bne	131ac <__assert_fail@plt+0x1720>
   1319c:	movw	r5, #16209	; 0x3f51
   131a0:	mov	sl, r1
   131a4:	movt	r5, #2
   131a8:	b	131e8 <__assert_fail@plt+0x175c>
   131ac:	sub	r1, r3, #97	; 0x61
   131b0:	movw	r5, #16209	; 0x3f51
   131b4:	lsl	r0, r2, #4
   131b8:	uxtb	r2, r1
   131bc:	movt	r5, #2
   131c0:	mvn	r1, #86	; 0x56
   131c4:	cmp	r2, #6
   131c8:	bcc	131e0 <__assert_fail@plt+0x1754>
   131cc:	sub	r1, r3, #65	; 0x41
   131d0:	uxtb	r1, r1
   131d4:	cmp	r1, #6
   131d8:	mvn	r1, #47	; 0x2f
   131dc:	mvncc	r1, #54	; 0x36
   131e0:	add	r1, r1, r3
   131e4:	add	r2, r1, r0
   131e8:	ldr	r0, [r6]
   131ec:	ldr	r1, [r0, #20]
   131f0:	ldr	r3, [r0, #24]
   131f4:	cmp	r1, r3
   131f8:	bcs	13268 <__assert_fail@plt+0x17dc>
   131fc:	add	r3, r1, #1
   13200:	add	sl, sl, #1
   13204:	str	r3, [r0, #20]
   13208:	strb	r2, [r1]
   1320c:	ldrb	r1, [sl]
   13210:	cmp	r1, #37	; 0x25
   13214:	bne	12cf0 <__assert_fail@plt+0x1264>
   13218:	b	12d30 <__assert_fail@plt+0x12a4>
   1321c:	mov	r1, #92	; 0x5c
   13220:	bl	11990 <__overflow@plt>
   13224:	add	sl, sl, #1
   13228:	ldrb	r1, [sl]
   1322c:	cmp	r1, #37	; 0x25
   13230:	bne	12cf0 <__assert_fail@plt+0x1264>
   13234:	b	12d30 <__assert_fail@plt+0x12a4>
   13238:	mov	r1, #37	; 0x25
   1323c:	bl	11990 <__overflow@plt>
   13240:	b	12cd8 <__assert_fail@plt+0x124c>
   13244:	uxtb	r1, r1
   13248:	bl	11990 <__overflow@plt>
   1324c:	b	12e2c <__assert_fail@plt+0x13a0>
   13250:	mov	r1, r7
   13254:	bl	11990 <__overflow@plt>
   13258:	b	13154 <__assert_fail@plt+0x16c8>
   1325c:	mov	r1, #92	; 0x5c
   13260:	bl	11990 <__overflow@plt>
   13264:	b	130ac <__assert_fail@plt+0x1620>
   13268:	uxtb	r1, r2
   1326c:	b	13220 <__assert_fail@plt+0x1794>
   13270:	mov	r0, r4
   13274:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   13278:	movw	r0, #20864	; 0x5180
   1327c:	ldr	r1, [r6]
   13280:	movt	r0, #3
   13284:	ldr	r0, [r0]
   13288:	bl	11678 <fputs_unlocked@plt>
   1328c:	and	r0, r9, #1
   13290:	sub	sp, fp, #28
   13294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13298:	mov	r0, r4
   1329c:	mov	r1, #0
   132a0:	mov	r2, #5
   132a4:	strb	r5, [r0, r7]!
   132a8:	strb	r1, [r0, #1]
   132ac:	movw	r1, #14622	; 0x391e
   132b0:	mov	r0, #0
   132b4:	movt	r1, #2
   132b8:	bl	11720 <dcgettext@plt>
   132bc:	mov	r5, r0
   132c0:	mov	r0, r4
   132c4:	bl	1f434 <__assert_fail@plt+0xd9a8>
   132c8:	mov	r3, r0
   132cc:	mov	r0, #1
   132d0:	mov	r1, #0
   132d4:	mov	r2, r5
   132d8:	bl	117d4 <error@plt>
   132dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   132e0:	add	fp, sp, #28
   132e4:	sub	sp, sp, #28
   132e8:	sub	r3, r3, #83	; 0x53
   132ec:	cmp	r3, #33	; 0x21
   132f0:	bhi	134b0 <__assert_fail@plt+0x1a24>
   132f4:	mov	sl, r0
   132f8:	ldr	r0, [fp, #16]
   132fc:	add	r7, pc, #12
   13300:	mov	r6, r1
   13304:	add	r1, r0, #8
   13308:	add	r2, r0, #24
   1330c:	ldr	pc, [r7, r3, lsl #2]
   13310:	muleq	r1, r8, r3
   13314:	andeq	r3, r1, r4, lsl r4
   13318:			; <UNDEFINED> instruction: 0x000134b0
   1331c:			; <UNDEFINED> instruction: 0x000134b0
   13320:			; <UNDEFINED> instruction: 0x000134b0
   13324:			; <UNDEFINED> instruction: 0x000134b0
   13328:			; <UNDEFINED> instruction: 0x000134b0
   1332c:			; <UNDEFINED> instruction: 0x000134b0
   13330:			; <UNDEFINED> instruction: 0x000134b0
   13334:			; <UNDEFINED> instruction: 0x000134b0
   13338:			; <UNDEFINED> instruction: 0x000134b0
   1333c:			; <UNDEFINED> instruction: 0x000134b0
   13340:			; <UNDEFINED> instruction: 0x000134b0
   13344:			; <UNDEFINED> instruction: 0x000134b0
   13348:	andeq	r3, r1, r8, ror #9
   1334c:	andeq	r3, r1, r4, ror #10
   13350:	andeq	r3, r1, r0, ror #11
   13354:	andeq	r3, r1, ip, asr r6
   13358:			; <UNDEFINED> instruction: 0x000134b0
   1335c:	ldrdeq	r3, [r1], -r8
   13360:			; <UNDEFINED> instruction: 0x000134b0
   13364:			; <UNDEFINED> instruction: 0x000134b0
   13368:	andeq	r3, r1, r4, asr r7
   1336c:			; <UNDEFINED> instruction: 0x000134b0
   13370:			; <UNDEFINED> instruction: 0x000134b0
   13374:	ldrdeq	r3, [r1], -r8
   13378:			; <UNDEFINED> instruction: 0x000134b0
   1337c:	andeq	r3, r1, ip, asr #16
   13380:			; <UNDEFINED> instruction: 0x000134b0
   13384:			; <UNDEFINED> instruction: 0x000134b0
   13388:			; <UNDEFINED> instruction: 0x000134b0
   1338c:			; <UNDEFINED> instruction: 0x000134b0
   13390:	andeq	r3, r1, r4, asr #17
   13394:	andeq	r3, r1, r8, lsr r9
   13398:	ldr	r8, [r0, #60]	; 0x3c
   1339c:	add	r9, sl, r6
   133a0:	str	sl, [sp, #20]
   133a4:	add	sl, sl, #1
   133a8:	str	r6, [sp, #24]
   133ac:	cmp	r8, #0
   133b0:	ldreq	r8, [r0, #4]
   133b4:	cmp	r6, #2
   133b8:	blt	139ac <__assert_fail@plt+0x1f20>
   133bc:	movw	r7, #16201	; 0x3f49
   133c0:	movw	r4, #14722	; 0x3982
   133c4:	mov	r6, sl
   133c8:	movt	r7, #2
   133cc:	movt	r4, #2
   133d0:	ldrb	r5, [r6]
   133d4:	mov	r0, r7
   133d8:	mov	r2, #8
   133dc:	mov	r1, r5
   133e0:	bl	11948 <memchr@plt>
   133e4:	cmp	r0, #0
   133e8:	beq	139b0 <__assert_fail@plt+0x1f24>
   133ec:	mov	r0, r4
   133f0:	mov	r1, r5
   133f4:	mov	r2, #4
   133f8:	bl	11948 <memchr@plt>
   133fc:	cmp	r0, #0
   13400:	add	r6, r6, #1
   13404:	strbne	r5, [sl], #1
   13408:	cmp	r6, r9
   1340c:	bcc	133d0 <__assert_fail@plt+0x1944>
   13410:	b	139b0 <__assert_fail@plt+0x1f24>
   13414:	ldr	r0, [r0]
   13418:	movw	r1, #4519	; 0x11a7
   1341c:	movt	r1, #305	; 0x131
   13420:	cmp	r0, r1
   13424:	bgt	13ad4 <__assert_fail@plt+0x2048>
   13428:	movw	r1, #16963	; 0x4243
   1342c:	cmp	r0, r1
   13430:	bgt	1457c <__assert_fail@plt+0x2af0>
   13434:	movw	r1, #19777	; 0x4d41
   13438:	movt	r1, #65363	; 0xff53
   1343c:	cmp	r0, r1
   13440:	bgt	14658 <__assert_fail@plt+0x2bcc>
   13444:	movw	r1, #5519	; 0x158f
   13448:	movt	r1, #51031	; 0xc757
   1344c:	cmp	r0, r1
   13450:	ble	148f0 <__assert_fail@plt+0x2e64>
   13454:	movw	r1, #57825	; 0xe1e1
   13458:	movt	r1, #57589	; 0xe0f5
   1345c:	cmp	r0, r1
   13460:	ble	14b24 <__assert_fail@plt+0x3098>
   13464:	movw	r1, #65419	; 0xff8b
   13468:	movt	r1, #63868	; 0xf97c
   1346c:	cmp	r0, r1
   13470:	ble	14f18 <__assert_fail@plt+0x348c>
   13474:	movw	r1, #65420	; 0xff8c
   13478:	movt	r1, #63868	; 0xf97c
   1347c:	cmp	r0, r1
   13480:	beq	153e0 <__assert_fail@plt+0x3954>
   13484:	movw	r1, #59465	; 0xe849
   13488:	movt	r1, #63893	; 0xf995
   1348c:	cmp	r0, r1
   13490:	beq	153ec <__assert_fail@plt+0x3960>
   13494:	movw	r1, #19778	; 0x4d42
   13498:	movt	r1, #65107	; 0xfe53
   1349c:	cmp	r0, r1
   134a0:	bne	156b4 <__assert_fail@plt+0x3c28>
   134a4:	movw	r0, #15620	; 0x3d04
   134a8:	movt	r0, #2
   134ac:	b	1572c <__assert_fail@plt+0x3ca0>
   134b0:	movw	r0, #20964	; 0x51e4
   134b4:	movt	r0, #3
   134b8:	ldr	r0, [r0]
   134bc:	ldr	r1, [r0, #20]
   134c0:	ldr	r2, [r0, #24]
   134c4:	cmp	r1, r2
   134c8:	bcs	158c8 <__assert_fail@plt+0x3e3c>
   134cc:	add	r2, r1, #1
   134d0:	str	r2, [r0, #20]
   134d4:	mov	r0, #63	; 0x3f
   134d8:	strb	r0, [r1]
   134dc:	mov	r0, #0
   134e0:	sub	sp, fp, #28
   134e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134e8:	ldr	r1, [r2]
   134ec:	ldr	r0, [r2, #4]
   134f0:	add	r8, sl, r6
   134f4:	add	r4, sl, #1
   134f8:	cmp	r6, #2
   134fc:	str	r6, [sp, #24]
   13500:	str	r1, [sp, #12]
   13504:	str	r0, [sp, #16]
   13508:	blt	13b60 <__assert_fail@plt+0x20d4>
   1350c:	movw	r6, #16201	; 0x3f49
   13510:	movw	r9, #14812	; 0x39dc
   13514:	mov	r7, r4
   13518:	movt	r6, #2
   1351c:	movt	r9, #2
   13520:	ldrb	r5, [r7]
   13524:	mov	r0, r6
   13528:	mov	r2, #8
   1352c:	mov	r1, r5
   13530:	bl	11948 <memchr@plt>
   13534:	cmp	r0, #0
   13538:	beq	13b64 <__assert_fail@plt+0x20d8>
   1353c:	mov	r0, r9
   13540:	mov	r1, r5
   13544:	mov	r2, #6
   13548:	bl	11948 <memchr@plt>
   1354c:	cmp	r0, #0
   13550:	add	r7, r7, #1
   13554:	strbne	r5, [r4], #1
   13558:	cmp	r7, r8
   1355c:	bcc	13520 <__assert_fail@plt+0x1a94>
   13560:	b	13b64 <__assert_fail@plt+0x20d8>
   13564:	ldr	r0, [r1, #4]
   13568:	ldr	r1, [r1]
   1356c:	add	r8, sl, r6
   13570:	add	r4, sl, #1
   13574:	cmp	r6, #2
   13578:	str	r6, [sp, #24]
   1357c:	str	r1, [sp, #12]
   13580:	str	r0, [sp, #16]
   13584:	blt	13c74 <__assert_fail@plt+0x21e8>
   13588:	movw	r6, #16201	; 0x3f49
   1358c:	movw	r9, #14812	; 0x39dc
   13590:	mov	r7, r4
   13594:	movt	r6, #2
   13598:	movt	r9, #2
   1359c:	ldrb	r5, [r7]
   135a0:	mov	r0, r6
   135a4:	mov	r2, #8
   135a8:	mov	r1, r5
   135ac:	bl	11948 <memchr@plt>
   135b0:	cmp	r0, #0
   135b4:	beq	13c78 <__assert_fail@plt+0x21ec>
   135b8:	mov	r0, r9
   135bc:	mov	r1, r5
   135c0:	mov	r2, #6
   135c4:	bl	11948 <memchr@plt>
   135c8:	cmp	r0, #0
   135cc:	add	r7, r7, #1
   135d0:	strbne	r5, [r4], #1
   135d4:	cmp	r7, r8
   135d8:	bcc	1359c <__assert_fail@plt+0x1b10>
   135dc:	b	13c78 <__assert_fail@plt+0x21ec>
   135e0:	ldr	r1, [r2, #8]
   135e4:	ldr	r0, [r2, #12]
   135e8:	add	r8, sl, r6
   135ec:	add	r7, sl, #1
   135f0:	cmp	r6, #2
   135f4:	str	r6, [sp, #24]
   135f8:	str	r1, [sp, #12]
   135fc:	str	r0, [sp, #16]
   13600:	blt	13d88 <__assert_fail@plt+0x22fc>
   13604:	movw	r6, #16201	; 0x3f49
   13608:	movw	r9, #14722	; 0x3982
   1360c:	mov	r5, r7
   13610:	movt	r6, #2
   13614:	movt	r9, #2
   13618:	ldrb	r4, [r5]
   1361c:	mov	r0, r6
   13620:	mov	r2, #8
   13624:	mov	r1, r4
   13628:	bl	11948 <memchr@plt>
   1362c:	cmp	r0, #0
   13630:	beq	13d8c <__assert_fail@plt+0x2300>
   13634:	mov	r0, r9
   13638:	mov	r1, r4
   1363c:	mov	r2, #4
   13640:	bl	11948 <memchr@plt>
   13644:	cmp	r0, #0
   13648:	add	r5, r5, #1
   1364c:	strbne	r4, [r7], #1
   13650:	cmp	r5, r8
   13654:	bcc	13618 <__assert_fail@plt+0x1b8c>
   13658:	b	13d8c <__assert_fail@plt+0x2300>
   1365c:	ldr	r1, [r0, #40]	; 0x28
   13660:	ldr	r0, [r0, #44]	; 0x2c
   13664:	add	r8, sl, r6
   13668:	add	r7, sl, #1
   1366c:	cmp	r6, #2
   13670:	str	r6, [sp, #24]
   13674:	str	r1, [sp, #12]
   13678:	str	r0, [sp, #16]
   1367c:	blt	13e88 <__assert_fail@plt+0x23fc>
   13680:	movw	r6, #16201	; 0x3f49
   13684:	movw	r9, #14812	; 0x39dc
   13688:	mov	r5, r7
   1368c:	movt	r6, #2
   13690:	movt	r9, #2
   13694:	ldrb	r4, [r5]
   13698:	mov	r0, r6
   1369c:	mov	r2, #8
   136a0:	mov	r1, r4
   136a4:	bl	11948 <memchr@plt>
   136a8:	cmp	r0, #0
   136ac:	beq	13e8c <__assert_fail@plt+0x2400>
   136b0:	mov	r0, r9
   136b4:	mov	r1, r4
   136b8:	mov	r2, #6
   136bc:	bl	11948 <memchr@plt>
   136c0:	cmp	r0, #0
   136c4:	add	r5, r5, #1
   136c8:	strbne	r4, [r7], #1
   136cc:	cmp	r5, r8
   136d0:	bcc	13694 <__assert_fail@plt+0x1c08>
   136d4:	b	13e8c <__assert_fail@plt+0x2400>
   136d8:	ldr	r0, [r1, #12]
   136dc:	ldr	r1, [r1, #8]
   136e0:	add	r8, sl, r6
   136e4:	add	r4, sl, #1
   136e8:	cmp	r6, #2
   136ec:	str	r6, [sp, #24]
   136f0:	str	r1, [sp, #12]
   136f4:	str	r0, [sp, #16]
   136f8:	blt	13f88 <__assert_fail@plt+0x24fc>
   136fc:	movw	r6, #16201	; 0x3f49
   13700:	movw	r9, #14812	; 0x39dc
   13704:	mov	r7, r4
   13708:	movt	r6, #2
   1370c:	movt	r9, #2
   13710:	ldrb	r5, [r7]
   13714:	mov	r0, r6
   13718:	mov	r2, #8
   1371c:	mov	r1, r5
   13720:	bl	11948 <memchr@plt>
   13724:	cmp	r0, #0
   13728:	beq	13f8c <__assert_fail@plt+0x2500>
   1372c:	mov	r0, r9
   13730:	mov	r1, r5
   13734:	mov	r2, #6
   13738:	bl	11948 <memchr@plt>
   1373c:	cmp	r0, #0
   13740:	add	r7, r7, #1
   13744:	strbne	r5, [r4], #1
   13748:	cmp	r7, r8
   1374c:	bcc	13710 <__assert_fail@plt+0x1c84>
   13750:	b	13f8c <__assert_fail@plt+0x2500>
   13754:	mov	r1, sl
   13758:	add	sl, sl, r6
   1375c:	mov	r7, r6
   13760:	cmp	r6, #2
   13764:	add	r8, r1, #1
   13768:	str	r1, [sp, #20]
   1376c:	ldr	r1, [r0, #48]	; 0x30
   13770:	ldr	r0, [r0, #52]	; 0x34
   13774:	str	r1, [sp, #24]
   13778:	str	r0, [sp, #16]
   1377c:	blt	14088 <__assert_fail@plt+0x25fc>
   13780:	movw	r6, #16201	; 0x3f49
   13784:	movw	r9, #14730	; 0x398a
   13788:	mov	r4, r8
   1378c:	movt	r6, #2
   13790:	movt	r9, #2
   13794:	ldrb	r5, [r4]
   13798:	mov	r0, r6
   1379c:	mov	r2, #8
   137a0:	mov	r1, r5
   137a4:	bl	11948 <memchr@plt>
   137a8:	cmp	r0, #0
   137ac:	beq	1408c <__assert_fail@plt+0x2600>
   137b0:	mov	r0, r9
   137b4:	mov	r1, r5
   137b8:	mov	r2, #4
   137bc:	bl	11948 <memchr@plt>
   137c0:	cmp	r0, #0
   137c4:	add	r4, r4, #1
   137c8:	strbne	r5, [r8], #1
   137cc:	cmp	r4, sl
   137d0:	bcc	13794 <__assert_fail@plt+0x1d08>
   137d4:	b	1408c <__assert_fail@plt+0x2600>
   137d8:	ldr	r0, [r0, #56]	; 0x38
   137dc:	add	r8, sl, r6
   137e0:	add	r4, sl, #1
   137e4:	cmp	r6, #2
   137e8:	str	r6, [sp, #24]
   137ec:	str	r0, [sp, #16]
   137f0:	blt	14180 <__assert_fail@plt+0x26f4>
   137f4:	movw	r7, #16201	; 0x3f49
   137f8:	movw	r9, #14722	; 0x3982
   137fc:	mov	r6, r4
   13800:	movt	r7, #2
   13804:	movt	r9, #2
   13808:	ldrb	r5, [r6]
   1380c:	mov	r0, r7
   13810:	mov	r2, #8
   13814:	mov	r1, r5
   13818:	bl	11948 <memchr@plt>
   1381c:	cmp	r0, #0
   13820:	beq	14184 <__assert_fail@plt+0x26f8>
   13824:	mov	r0, r9
   13828:	mov	r1, r5
   1382c:	mov	r2, #4
   13830:	bl	11948 <memchr@plt>
   13834:	cmp	r0, #0
   13838:	add	r6, r6, #1
   1383c:	strbne	r5, [r4], #1
   13840:	cmp	r6, r8
   13844:	bcc	13808 <__assert_fail@plt+0x1d7c>
   13848:	b	14184 <__assert_fail@plt+0x26f8>
   1384c:	mov	r0, sl
   13850:	mov	r1, r6
   13854:	add	sl, sl, r6
   13858:	add	r6, r0, #1
   1385c:	mov	r4, r1
   13860:	cmp	r1, #2
   13864:	str	r0, [sp, #20]
   13868:	blt	14290 <__assert_fail@plt+0x2804>
   1386c:	movw	r9, #16201	; 0x3f49
   13870:	movw	r8, #16839	; 0x41c7
   13874:	mov	r7, r6
   13878:	movt	r9, #2
   1387c:	movt	r8, #2
   13880:	ldrb	r5, [r7]
   13884:	mov	r0, r9
   13888:	mov	r2, #8
   1388c:	mov	r1, r5
   13890:	bl	11948 <memchr@plt>
   13894:	cmp	r0, #0
   13898:	beq	14294 <__assert_fail@plt+0x2808>
   1389c:	mov	r0, r8
   138a0:	mov	r1, r5
   138a4:	mov	r2, #2
   138a8:	bl	11948 <memchr@plt>
   138ac:	cmp	r0, #0
   138b0:	add	r7, r7, #1
   138b4:	strbne	r5, [r6], #1
   138b8:	cmp	r7, sl
   138bc:	bcc	13880 <__assert_fail@plt+0x1df4>
   138c0:	b	14294 <__assert_fail@plt+0x2808>
   138c4:	ldr	r0, [r0, #4]
   138c8:	add	r8, sl, r6
   138cc:	add	r4, sl, #1
   138d0:	cmp	r6, #2
   138d4:	str	r6, [sp, #24]
   138d8:	str	r0, [sp, #16]
   138dc:	blt	14384 <__assert_fail@plt+0x28f8>
   138e0:	movw	r7, #16201	; 0x3f49
   138e4:	movw	r9, #14722	; 0x3982
   138e8:	mov	r6, r4
   138ec:	movt	r7, #2
   138f0:	movt	r9, #2
   138f4:	ldrb	r5, [r6]
   138f8:	mov	r0, r7
   138fc:	mov	r2, #8
   13900:	mov	r1, r5
   13904:	bl	11948 <memchr@plt>
   13908:	cmp	r0, #0
   1390c:	beq	14388 <__assert_fail@plt+0x28fc>
   13910:	mov	r0, r9
   13914:	mov	r1, r5
   13918:	mov	r2, #4
   1391c:	bl	11948 <memchr@plt>
   13920:	cmp	r0, #0
   13924:	add	r6, r6, #1
   13928:	strbne	r5, [r4], #1
   1392c:	cmp	r6, r8
   13930:	bcc	138f4 <__assert_fail@plt+0x1e68>
   13934:	b	14388 <__assert_fail@plt+0x28fc>
   13938:	ldr	r0, [r0]
   1393c:	add	r8, sl, r6
   13940:	add	r4, sl, #1
   13944:	cmp	r6, #2
   13948:	str	r6, [sp, #24]
   1394c:	str	r0, [sp, #16]
   13950:	blt	14480 <__assert_fail@plt+0x29f4>
   13954:	movw	r7, #16201	; 0x3f49
   13958:	movw	r9, #14730	; 0x398a
   1395c:	mov	r6, r4
   13960:	movt	r7, #2
   13964:	movt	r9, #2
   13968:	ldrb	r5, [r6]
   1396c:	mov	r0, r7
   13970:	mov	r2, #8
   13974:	mov	r1, r5
   13978:	bl	11948 <memchr@plt>
   1397c:	cmp	r0, #0
   13980:	beq	14484 <__assert_fail@plt+0x29f8>
   13984:	mov	r0, r9
   13988:	mov	r1, r5
   1398c:	mov	r2, #4
   13990:	bl	11948 <memchr@plt>
   13994:	cmp	r0, #0
   13998:	add	r6, r6, #1
   1399c:	strbne	r5, [r4], #1
   139a0:	cmp	r6, r8
   139a4:	bcc	13968 <__assert_fail@plt+0x1edc>
   139a8:	b	14484 <__assert_fail@plt+0x29f8>
   139ac:	mov	r6, sl
   139b0:	cmp	r6, r9
   139b4:	bcs	13ab8 <__assert_fail@plt+0x202c>
   139b8:	ldr	r0, [sp, #24]
   139bc:	ldr	r1, [sp, #20]
   139c0:	sub	r0, r0, r6
   139c4:	add	r0, r1, r0
   139c8:	cmp	r0, #16
   139cc:	bcc	13aa8 <__assert_fail@plt+0x201c>
   139d0:	cmp	sl, r9
   139d4:	addcc	r1, sl, r0
   139d8:	cmpcc	r6, r1
   139dc:	bcc	13aa8 <__assert_fail@plt+0x201c>
   139e0:	str	r0, [sp, #16]
   139e4:	bic	r0, r0, #15
   139e8:	mov	r2, #1
   139ec:	mov	r3, #0
   139f0:	sub	r5, r0, #16
   139f4:	str	r0, [sp, #12]
   139f8:	add	r7, r2, r5, lsr #4
   139fc:	cmp	r5, #48	; 0x30
   13a00:	and	r0, r7, #3
   13a04:	str	r0, [sp, #24]
   13a08:	bcc	13a68 <__assert_fail@plt+0x1fdc>
   13a0c:	ldr	r0, [sp, #24]
   13a10:	mov	r3, #0
   13a14:	mov	r5, #48	; 0x30
   13a18:	sub	r7, r7, r0
   13a1c:	add	r4, r6, r3
   13a20:	add	r1, sl, r3
   13a24:	subs	r7, r7, #4
   13a28:	add	r3, r3, #64	; 0x40
   13a2c:	mov	r2, r4
   13a30:	mov	ip, r1
   13a34:	add	lr, r4, #16
   13a38:	add	r0, r1, #16
   13a3c:	vld1.8	{d16-d17}, [r2], r5
   13a40:	vst1.8	{d16-d17}, [ip], r5
   13a44:	vld1.8	{d16-d17}, [lr]
   13a48:	vst1.8	{d16-d17}, [r0]
   13a4c:	add	r0, r4, #32
   13a50:	vld1.8	{d16-d17}, [r0]
   13a54:	add	r0, r1, #32
   13a58:	vst1.8	{d16-d17}, [r0]
   13a5c:	vld1.8	{d16-d17}, [r2]
   13a60:	vst1.8	{d16-d17}, [ip]
   13a64:	bne	13a1c <__assert_fail@plt+0x1f90>
   13a68:	ldr	r0, [sp, #24]
   13a6c:	cmp	r0, #0
   13a70:	beq	13a90 <__assert_fail@plt+0x2004>
   13a74:	add	r7, sl, r3
   13a78:	add	r3, r6, r3
   13a7c:	rsb	r2, r0, #0
   13a80:	vld1.8	{d16-d17}, [r3]!
   13a84:	adds	r2, r2, #1
   13a88:	vst1.8	{d16-d17}, [r7]!
   13a8c:	bcc	13a80 <__assert_fail@plt+0x1ff4>
   13a90:	ldr	r1, [sp, #12]
   13a94:	ldr	r0, [sp, #16]
   13a98:	add	sl, sl, r1
   13a9c:	cmp	r1, r0
   13aa0:	beq	13ab8 <__assert_fail@plt+0x202c>
   13aa4:	add	r6, r6, r1
   13aa8:	ldrb	r0, [r6], #1
   13aac:	cmp	r9, r6
   13ab0:	strb	r0, [sl], #1
   13ab4:	bne	13aa8 <__assert_fail@plt+0x201c>
   13ab8:	movw	r0, #27756	; 0x6c6c
   13abc:	ldr	r1, [sp, #20]
   13ac0:	asr	r3, r8, #31
   13ac4:	mov	r2, r8
   13ac8:	movt	r0, #117	; 0x75
   13acc:	str	r0, [sl]
   13ad0:	b	14850 <__assert_fail@plt+0x2dc4>
   13ad4:	movw	r1, #255	; 0xff
   13ad8:	movt	r1, #21529	; 0x5419
   13adc:	cmp	r0, r1
   13ae0:	bgt	145dc <__assert_fail@plt+0x2b50>
   13ae4:	movw	r1, #17993	; 0x4649
   13ae8:	movt	r1, #12627	; 0x3153
   13aec:	cmp	r0, r1
   13af0:	ble	1469c <__assert_fail@plt+0x2c10>
   13af4:	movw	r1, #18002	; 0x4652
   13af8:	movt	r1, #18256	; 0x4750
   13afc:	cmp	r0, r1
   13b00:	ble	1493c <__assert_fail@plt+0x2eb0>
   13b04:	movw	r1, #12620	; 0x314c
   13b08:	movt	r1, #21318	; 0x5346
   13b0c:	cmp	r0, r1
   13b10:	ble	14b60 <__assert_fail@plt+0x30d4>
   13b14:	movw	r1, #18501	; 0x4845
   13b18:	movt	r1, #21318	; 0x5346
   13b1c:	cmp	r0, r1
   13b20:	ble	14f44 <__assert_fail@plt+0x34b8>
   13b24:	movw	r1, #18502	; 0x4846
   13b28:	movt	r1, #21318	; 0x5346
   13b2c:	cmp	r0, r1
   13b30:	beq	153f8 <__assert_fail@plt+0x396c>
   13b34:	movw	r1, #21582	; 0x544e
   13b38:	movt	r1, #21318	; 0x5346
   13b3c:	cmp	r0, r1
   13b40:	beq	15404 <__assert_fail@plt+0x3978>
   13b44:	movw	r1, #17227	; 0x434b
   13b48:	movt	r1, #21327	; 0x534f
   13b4c:	cmp	r0, r1
   13b50:	bne	156b4 <__assert_fail@plt+0x3c28>
   13b54:	movw	r0, #15630	; 0x3d0e
   13b58:	movt	r0, #2
   13b5c:	b	1572c <__assert_fail@plt+0x3ca0>
   13b60:	mov	r7, r4
   13b64:	cmp	r7, r8
   13b68:	bcs	1407c <__assert_fail@plt+0x25f0>
   13b6c:	ldr	r0, [sp, #24]
   13b70:	sub	r0, r0, r7
   13b74:	add	r9, sl, r0
   13b78:	cmp	r9, #16
   13b7c:	bcc	13c58 <__assert_fail@plt+0x21cc>
   13b80:	cmp	r4, r8
   13b84:	addcc	r1, r4, r9
   13b88:	cmpcc	r7, r1
   13b8c:	bcc	13c58 <__assert_fail@plt+0x21cc>
   13b90:	bic	r0, r9, #15
   13b94:	mov	r2, #1
   13b98:	mov	r3, #0
   13b9c:	str	sl, [sp, #20]
   13ba0:	sub	r5, r0, #16
   13ba4:	str	r0, [sp, #8]
   13ba8:	add	r6, r2, r5, lsr #4
   13bac:	cmp	r5, #48	; 0x30
   13bb0:	and	r0, r6, #3
   13bb4:	str	r0, [sp, #24]
   13bb8:	bcc	13c18 <__assert_fail@plt+0x218c>
   13bbc:	ldr	r0, [sp, #24]
   13bc0:	mov	r3, #0
   13bc4:	mov	sl, #48	; 0x30
   13bc8:	sub	r6, r6, r0
   13bcc:	add	r2, r7, r3
   13bd0:	add	r0, r4, r3
   13bd4:	subs	r6, r6, #4
   13bd8:	add	r3, r3, #64	; 0x40
   13bdc:	mov	lr, r2
   13be0:	mov	r5, r0
   13be4:	add	ip, r2, #16
   13be8:	add	r1, r0, #16
   13bec:	add	r0, r0, #32
   13bf0:	vld1.8	{d16-d17}, [lr], sl
   13bf4:	vst1.8	{d16-d17}, [r5], sl
   13bf8:	vld1.8	{d16-d17}, [ip]
   13bfc:	vst1.8	{d16-d17}, [r1]
   13c00:	add	r1, r2, #32
   13c04:	vld1.8	{d16-d17}, [r1]
   13c08:	vst1.8	{d16-d17}, [r0]
   13c0c:	vld1.8	{d16-d17}, [lr]
   13c10:	vst1.8	{d16-d17}, [r5]
   13c14:	bne	13bcc <__assert_fail@plt+0x2140>
   13c18:	ldr	r0, [sp, #24]
   13c1c:	cmp	r0, #0
   13c20:	beq	13c40 <__assert_fail@plt+0x21b4>
   13c24:	add	r6, r4, r3
   13c28:	add	r3, r7, r3
   13c2c:	rsb	r2, r0, #0
   13c30:	vld1.8	{d16-d17}, [r3]!
   13c34:	adds	r2, r2, #1
   13c38:	vst1.8	{d16-d17}, [r6]!
   13c3c:	bcc	13c30 <__assert_fail@plt+0x21a4>
   13c40:	ldr	r0, [sp, #8]
   13c44:	ldr	sl, [sp, #20]
   13c48:	add	r4, r4, r0
   13c4c:	cmp	r0, r9
   13c50:	beq	1407c <__assert_fail@plt+0x25f0>
   13c54:	add	r7, r7, r0
   13c58:	ldr	r3, [sp, #16]
   13c5c:	ldr	r2, [sp, #12]
   13c60:	ldrb	r0, [r7], #1
   13c64:	cmp	r8, r7
   13c68:	strb	r0, [r4], #1
   13c6c:	bne	13c60 <__assert_fail@plt+0x21d4>
   13c70:	b	14814 <__assert_fail@plt+0x2d88>
   13c74:	mov	r7, r4
   13c78:	cmp	r7, r8
   13c7c:	bcs	1407c <__assert_fail@plt+0x25f0>
   13c80:	ldr	r0, [sp, #24]
   13c84:	sub	r0, r0, r7
   13c88:	add	r9, sl, r0
   13c8c:	cmp	r9, #16
   13c90:	bcc	13d6c <__assert_fail@plt+0x22e0>
   13c94:	cmp	r4, r8
   13c98:	addcc	r1, r4, r9
   13c9c:	cmpcc	r7, r1
   13ca0:	bcc	13d6c <__assert_fail@plt+0x22e0>
   13ca4:	bic	r0, r9, #15
   13ca8:	mov	r2, #1
   13cac:	mov	r3, #0
   13cb0:	str	sl, [sp, #20]
   13cb4:	sub	r5, r0, #16
   13cb8:	str	r0, [sp, #8]
   13cbc:	add	r6, r2, r5, lsr #4
   13cc0:	cmp	r5, #48	; 0x30
   13cc4:	and	r0, r6, #3
   13cc8:	str	r0, [sp, #24]
   13ccc:	bcc	13d2c <__assert_fail@plt+0x22a0>
   13cd0:	ldr	r0, [sp, #24]
   13cd4:	mov	r3, #0
   13cd8:	mov	sl, #48	; 0x30
   13cdc:	sub	r6, r6, r0
   13ce0:	add	r2, r7, r3
   13ce4:	add	r0, r4, r3
   13ce8:	subs	r6, r6, #4
   13cec:	add	r3, r3, #64	; 0x40
   13cf0:	mov	lr, r2
   13cf4:	mov	r5, r0
   13cf8:	add	ip, r2, #16
   13cfc:	add	r1, r0, #16
   13d00:	add	r0, r0, #32
   13d04:	vld1.8	{d16-d17}, [lr], sl
   13d08:	vst1.8	{d16-d17}, [r5], sl
   13d0c:	vld1.8	{d16-d17}, [ip]
   13d10:	vst1.8	{d16-d17}, [r1]
   13d14:	add	r1, r2, #32
   13d18:	vld1.8	{d16-d17}, [r1]
   13d1c:	vst1.8	{d16-d17}, [r0]
   13d20:	vld1.8	{d16-d17}, [lr]
   13d24:	vst1.8	{d16-d17}, [r5]
   13d28:	bne	13ce0 <__assert_fail@plt+0x2254>
   13d2c:	ldr	r0, [sp, #24]
   13d30:	cmp	r0, #0
   13d34:	beq	13d54 <__assert_fail@plt+0x22c8>
   13d38:	add	r6, r4, r3
   13d3c:	add	r3, r7, r3
   13d40:	rsb	r2, r0, #0
   13d44:	vld1.8	{d16-d17}, [r3]!
   13d48:	adds	r2, r2, #1
   13d4c:	vst1.8	{d16-d17}, [r6]!
   13d50:	bcc	13d44 <__assert_fail@plt+0x22b8>
   13d54:	ldr	r0, [sp, #8]
   13d58:	ldr	sl, [sp, #20]
   13d5c:	add	r4, r4, r0
   13d60:	cmp	r0, r9
   13d64:	beq	1407c <__assert_fail@plt+0x25f0>
   13d68:	add	r7, r7, r0
   13d6c:	ldr	r3, [sp, #16]
   13d70:	ldr	r2, [sp, #12]
   13d74:	ldrb	r0, [r7], #1
   13d78:	cmp	r8, r7
   13d7c:	strb	r0, [r4], #1
   13d80:	bne	13d74 <__assert_fail@plt+0x22e8>
   13d84:	b	14814 <__assert_fail@plt+0x2d88>
   13d88:	mov	r5, r7
   13d8c:	cmp	r5, r8
   13d90:	bcs	13e7c <__assert_fail@plt+0x23f0>
   13d94:	ldr	r0, [sp, #24]
   13d98:	sub	r0, r0, r5
   13d9c:	add	r9, sl, r0
   13da0:	cmp	r9, #16
   13da4:	bcc	147a8 <__assert_fail@plt+0x2d1c>
   13da8:	cmp	r7, r8
   13dac:	addcc	r1, r7, r9
   13db0:	cmpcc	r5, r1
   13db4:	bcc	147a8 <__assert_fail@plt+0x2d1c>
   13db8:	bic	r0, r9, #15
   13dbc:	mov	r2, #1
   13dc0:	mov	r3, #0
   13dc4:	str	sl, [sp, #20]
   13dc8:	sub	r4, r0, #16
   13dcc:	str	r0, [sp, #8]
   13dd0:	add	r6, r2, r4, lsr #4
   13dd4:	cmp	r4, #48	; 0x30
   13dd8:	and	r0, r6, #3
   13ddc:	str	r0, [sp, #24]
   13de0:	bcc	13e40 <__assert_fail@plt+0x23b4>
   13de4:	ldr	r0, [sp, #24]
   13de8:	mov	r3, #0
   13dec:	mov	sl, #48	; 0x30
   13df0:	sub	r6, r6, r0
   13df4:	add	r2, r5, r3
   13df8:	add	r0, r7, r3
   13dfc:	subs	r6, r6, #4
   13e00:	add	r3, r3, #64	; 0x40
   13e04:	mov	lr, r2
   13e08:	mov	r4, r0
   13e0c:	add	ip, r2, #16
   13e10:	add	r1, r0, #16
   13e14:	add	r0, r0, #32
   13e18:	vld1.8	{d16-d17}, [lr], sl
   13e1c:	vst1.8	{d16-d17}, [r4], sl
   13e20:	vld1.8	{d16-d17}, [ip]
   13e24:	vst1.8	{d16-d17}, [r1]
   13e28:	add	r1, r2, #32
   13e2c:	vld1.8	{d16-d17}, [r1]
   13e30:	vst1.8	{d16-d17}, [r0]
   13e34:	vld1.8	{d16-d17}, [lr]
   13e38:	vst1.8	{d16-d17}, [r4]
   13e3c:	bne	13df4 <__assert_fail@plt+0x2368>
   13e40:	ldr	r0, [sp, #24]
   13e44:	cmp	r0, #0
   13e48:	beq	13e68 <__assert_fail@plt+0x23dc>
   13e4c:	add	r6, r7, r3
   13e50:	add	r3, r5, r3
   13e54:	rsb	r2, r0, #0
   13e58:	vld1.8	{d16-d17}, [r3]!
   13e5c:	adds	r2, r2, #1
   13e60:	vst1.8	{d16-d17}, [r6]!
   13e64:	bcc	13e58 <__assert_fail@plt+0x23cc>
   13e68:	ldr	r0, [sp, #8]
   13e6c:	ldr	sl, [sp, #20]
   13e70:	add	r7, r7, r0
   13e74:	cmp	r0, r9
   13e78:	bne	147a4 <__assert_fail@plt+0x2d18>
   13e7c:	ldr	r3, [sp, #16]
   13e80:	ldr	r2, [sp, #12]
   13e84:	b	147c0 <__assert_fail@plt+0x2d34>
   13e88:	mov	r5, r7
   13e8c:	cmp	r5, r8
   13e90:	bcs	13f7c <__assert_fail@plt+0x24f0>
   13e94:	ldr	r0, [sp, #24]
   13e98:	sub	r0, r0, r5
   13e9c:	add	r9, sl, r0
   13ea0:	cmp	r9, #16
   13ea4:	bcc	147d0 <__assert_fail@plt+0x2d44>
   13ea8:	cmp	r7, r8
   13eac:	addcc	r1, r7, r9
   13eb0:	cmpcc	r5, r1
   13eb4:	bcc	147d0 <__assert_fail@plt+0x2d44>
   13eb8:	bic	r0, r9, #15
   13ebc:	mov	r2, #1
   13ec0:	mov	r3, #0
   13ec4:	str	sl, [sp, #20]
   13ec8:	sub	r4, r0, #16
   13ecc:	str	r0, [sp, #8]
   13ed0:	add	r6, r2, r4, lsr #4
   13ed4:	cmp	r4, #48	; 0x30
   13ed8:	and	r0, r6, #3
   13edc:	str	r0, [sp, #24]
   13ee0:	bcc	13f40 <__assert_fail@plt+0x24b4>
   13ee4:	ldr	r0, [sp, #24]
   13ee8:	mov	r3, #0
   13eec:	mov	sl, #48	; 0x30
   13ef0:	sub	r6, r6, r0
   13ef4:	add	r2, r5, r3
   13ef8:	add	r0, r7, r3
   13efc:	subs	r6, r6, #4
   13f00:	add	r3, r3, #64	; 0x40
   13f04:	mov	lr, r2
   13f08:	mov	r4, r0
   13f0c:	add	ip, r2, #16
   13f10:	add	r1, r0, #16
   13f14:	add	r0, r0, #32
   13f18:	vld1.8	{d16-d17}, [lr], sl
   13f1c:	vst1.8	{d16-d17}, [r4], sl
   13f20:	vld1.8	{d16-d17}, [ip]
   13f24:	vst1.8	{d16-d17}, [r1]
   13f28:	add	r1, r2, #32
   13f2c:	vld1.8	{d16-d17}, [r1]
   13f30:	vst1.8	{d16-d17}, [r0]
   13f34:	vld1.8	{d16-d17}, [lr]
   13f38:	vst1.8	{d16-d17}, [r4]
   13f3c:	bne	13ef4 <__assert_fail@plt+0x2468>
   13f40:	ldr	r0, [sp, #24]
   13f44:	cmp	r0, #0
   13f48:	beq	13f68 <__assert_fail@plt+0x24dc>
   13f4c:	add	r6, r7, r3
   13f50:	add	r3, r5, r3
   13f54:	rsb	r2, r0, #0
   13f58:	vld1.8	{d16-d17}, [r3]!
   13f5c:	adds	r2, r2, #1
   13f60:	vst1.8	{d16-d17}, [r6]!
   13f64:	bcc	13f58 <__assert_fail@plt+0x24cc>
   13f68:	ldr	r0, [sp, #8]
   13f6c:	ldr	sl, [sp, #20]
   13f70:	add	r7, r7, r0
   13f74:	cmp	r0, r9
   13f78:	bne	147cc <__assert_fail@plt+0x2d40>
   13f7c:	ldr	r3, [sp, #16]
   13f80:	ldr	r2, [sp, #12]
   13f84:	b	147e8 <__assert_fail@plt+0x2d5c>
   13f88:	mov	r7, r4
   13f8c:	cmp	r7, r8
   13f90:	bcs	1407c <__assert_fail@plt+0x25f0>
   13f94:	ldr	r0, [sp, #24]
   13f98:	sub	r0, r0, r7
   13f9c:	add	r9, sl, r0
   13fa0:	cmp	r9, #16
   13fa4:	bcc	147fc <__assert_fail@plt+0x2d70>
   13fa8:	cmp	r4, r8
   13fac:	addcc	r1, r4, r9
   13fb0:	cmpcc	r7, r1
   13fb4:	bcc	147fc <__assert_fail@plt+0x2d70>
   13fb8:	bic	r0, r9, #15
   13fbc:	mov	r2, #1
   13fc0:	mov	r3, #0
   13fc4:	str	sl, [sp, #20]
   13fc8:	sub	r5, r0, #16
   13fcc:	str	r0, [sp, #8]
   13fd0:	add	r6, r2, r5, lsr #4
   13fd4:	cmp	r5, #48	; 0x30
   13fd8:	and	r0, r6, #3
   13fdc:	str	r0, [sp, #24]
   13fe0:	bcc	14040 <__assert_fail@plt+0x25b4>
   13fe4:	ldr	r0, [sp, #24]
   13fe8:	mov	r3, #0
   13fec:	mov	sl, #48	; 0x30
   13ff0:	sub	r6, r6, r0
   13ff4:	add	r2, r7, r3
   13ff8:	add	r0, r4, r3
   13ffc:	subs	r6, r6, #4
   14000:	add	r3, r3, #64	; 0x40
   14004:	mov	lr, r2
   14008:	mov	r5, r0
   1400c:	add	ip, r2, #16
   14010:	add	r1, r0, #16
   14014:	add	r0, r0, #32
   14018:	vld1.8	{d16-d17}, [lr], sl
   1401c:	vst1.8	{d16-d17}, [r5], sl
   14020:	vld1.8	{d16-d17}, [ip]
   14024:	vst1.8	{d16-d17}, [r1]
   14028:	add	r1, r2, #32
   1402c:	vld1.8	{d16-d17}, [r1]
   14030:	vst1.8	{d16-d17}, [r0]
   14034:	vld1.8	{d16-d17}, [lr]
   14038:	vst1.8	{d16-d17}, [r5]
   1403c:	bne	13ff4 <__assert_fail@plt+0x2568>
   14040:	ldr	r0, [sp, #24]
   14044:	cmp	r0, #0
   14048:	beq	14068 <__assert_fail@plt+0x25dc>
   1404c:	add	r6, r4, r3
   14050:	add	r3, r7, r3
   14054:	rsb	r2, r0, #0
   14058:	vld1.8	{d16-d17}, [r3]!
   1405c:	adds	r2, r2, #1
   14060:	vst1.8	{d16-d17}, [r6]!
   14064:	bcc	14058 <__assert_fail@plt+0x25cc>
   14068:	ldr	r0, [sp, #8]
   1406c:	ldr	sl, [sp, #20]
   14070:	add	r4, r4, r0
   14074:	cmp	r0, r9
   14078:	bne	147f8 <__assert_fail@plt+0x2d6c>
   1407c:	ldr	r3, [sp, #16]
   14080:	ldr	r2, [sp, #12]
   14084:	b	14814 <__assert_fail@plt+0x2d88>
   14088:	mov	r4, r8
   1408c:	cmp	r4, sl
   14090:	bcs	14174 <__assert_fail@plt+0x26e8>
   14094:	ldr	r1, [sp, #20]
   14098:	sub	r0, r7, r4
   1409c:	add	r9, r1, r0
   140a0:	cmp	r9, #16
   140a4:	bcc	14828 <__assert_fail@plt+0x2d9c>
   140a8:	cmp	r8, sl
   140ac:	addcc	r1, r8, r9
   140b0:	cmpcc	r4, r1
   140b4:	bcc	14828 <__assert_fail@plt+0x2d9c>
   140b8:	bic	r0, r9, #15
   140bc:	mov	r2, #1
   140c0:	mov	r3, #0
   140c4:	sub	r5, r0, #16
   140c8:	str	r0, [sp, #8]
   140cc:	add	r6, r2, r5, lsr #4
   140d0:	cmp	r5, #48	; 0x30
   140d4:	and	r0, r6, #3
   140d8:	str	r0, [sp, #12]
   140dc:	bcc	1413c <__assert_fail@plt+0x26b0>
   140e0:	ldr	r0, [sp, #12]
   140e4:	mov	r3, #0
   140e8:	mov	lr, #48	; 0x30
   140ec:	sub	r6, r6, r0
   140f0:	add	r2, r4, r3
   140f4:	add	r0, r8, r3
   140f8:	subs	r6, r6, #4
   140fc:	add	r3, r3, #64	; 0x40
   14100:	mov	r1, r2
   14104:	mov	r5, r0
   14108:	add	ip, r2, #16
   1410c:	add	r7, r0, #16
   14110:	add	r2, r2, #32
   14114:	add	r0, r0, #32
   14118:	vld1.8	{d16-d17}, [r1], lr
   1411c:	vst1.8	{d16-d17}, [r5], lr
   14120:	vld1.8	{d16-d17}, [ip]
   14124:	vst1.8	{d16-d17}, [r7]
   14128:	vld1.8	{d16-d17}, [r2]
   1412c:	vst1.8	{d16-d17}, [r0]
   14130:	vld1.8	{d16-d17}, [r1]
   14134:	vst1.8	{d16-d17}, [r5]
   14138:	bne	140f0 <__assert_fail@plt+0x2664>
   1413c:	ldr	r0, [sp, #12]
   14140:	cmp	r0, #0
   14144:	beq	14164 <__assert_fail@plt+0x26d8>
   14148:	add	r6, r8, r3
   1414c:	add	r3, r4, r3
   14150:	rsb	r2, r0, #0
   14154:	vld1.8	{d16-d17}, [r3]!
   14158:	adds	r2, r2, #1
   1415c:	vst1.8	{d16-d17}, [r6]!
   14160:	bcc	14154 <__assert_fail@plt+0x26c8>
   14164:	ldr	r0, [sp, #8]
   14168:	add	r8, r8, r0
   1416c:	cmp	r0, r9
   14170:	bne	14824 <__assert_fail@plt+0x2d98>
   14174:	ldr	r3, [sp, #24]
   14178:	ldr	r2, [sp, #16]
   1417c:	b	14840 <__assert_fail@plt+0x2db4>
   14180:	mov	r6, r4
   14184:	cmp	r6, r8
   14188:	bcs	14478 <__assert_fail@plt+0x29ec>
   1418c:	ldr	r0, [sp, #24]
   14190:	sub	r0, r0, r6
   14194:	add	r9, sl, r0
   14198:	cmp	r9, #16
   1419c:	bcc	14278 <__assert_fail@plt+0x27ec>
   141a0:	cmp	r4, r8
   141a4:	addcc	r1, r4, r9
   141a8:	cmpcc	r6, r1
   141ac:	bcc	14278 <__assert_fail@plt+0x27ec>
   141b0:	bic	r0, r9, #15
   141b4:	mov	r2, #1
   141b8:	mov	r3, #0
   141bc:	str	sl, [sp, #20]
   141c0:	sub	r5, r0, #16
   141c4:	str	r0, [sp, #12]
   141c8:	add	r7, r2, r5, lsr #4
   141cc:	cmp	r5, #48	; 0x30
   141d0:	and	r0, r7, #3
   141d4:	str	r0, [sp, #24]
   141d8:	bcc	14238 <__assert_fail@plt+0x27ac>
   141dc:	ldr	r0, [sp, #24]
   141e0:	mov	r3, #0
   141e4:	mov	sl, #48	; 0x30
   141e8:	sub	r7, r7, r0
   141ec:	add	r2, r6, r3
   141f0:	add	r0, r4, r3
   141f4:	subs	r7, r7, #4
   141f8:	add	r3, r3, #64	; 0x40
   141fc:	mov	lr, r2
   14200:	mov	r5, r0
   14204:	add	ip, r2, #16
   14208:	add	r1, r0, #16
   1420c:	add	r0, r0, #32
   14210:	vld1.8	{d16-d17}, [lr], sl
   14214:	vst1.8	{d16-d17}, [r5], sl
   14218:	vld1.8	{d16-d17}, [ip]
   1421c:	vst1.8	{d16-d17}, [r1]
   14220:	add	r1, r2, #32
   14224:	vld1.8	{d16-d17}, [r1]
   14228:	vst1.8	{d16-d17}, [r0]
   1422c:	vld1.8	{d16-d17}, [lr]
   14230:	vst1.8	{d16-d17}, [r5]
   14234:	bne	141ec <__assert_fail@plt+0x2760>
   14238:	ldr	r0, [sp, #24]
   1423c:	cmp	r0, #0
   14240:	beq	14260 <__assert_fail@plt+0x27d4>
   14244:	add	r7, r4, r3
   14248:	add	r3, r6, r3
   1424c:	rsb	r2, r0, #0
   14250:	vld1.8	{d16-d17}, [r3]!
   14254:	adds	r2, r2, #1
   14258:	vst1.8	{d16-d17}, [r7]!
   1425c:	bcc	14250 <__assert_fail@plt+0x27c4>
   14260:	ldr	r0, [sp, #12]
   14264:	ldr	sl, [sp, #20]
   14268:	add	r4, r4, r0
   1426c:	cmp	r0, r9
   14270:	beq	14478 <__assert_fail@plt+0x29ec>
   14274:	add	r6, r6, r0
   14278:	ldr	r2, [sp, #16]
   1427c:	ldrb	r0, [r6], #1
   14280:	cmp	r8, r6
   14284:	strb	r0, [r4], #1
   14288:	bne	1427c <__assert_fail@plt+0x27f0>
   1428c:	b	148a4 <__assert_fail@plt+0x2e18>
   14290:	mov	r7, r6
   14294:	ldr	r2, [fp, #12]
   14298:	cmp	r7, sl
   1429c:	bcs	1487c <__assert_fail@plt+0x2df0>
   142a0:	ldr	r1, [sp, #20]
   142a4:	sub	r0, r4, r7
   142a8:	add	r0, r1, r0
   142ac:	cmp	r0, #16
   142b0:	bcc	1486c <__assert_fail@plt+0x2de0>
   142b4:	cmp	r6, sl
   142b8:	addcc	r1, r6, r0
   142bc:	cmpcc	r7, r1
   142c0:	bcc	1486c <__assert_fail@plt+0x2de0>
   142c4:	str	r0, [sp, #24]
   142c8:	bic	r0, r0, #15
   142cc:	mov	r1, #1
   142d0:	mov	r5, #0
   142d4:	sub	r3, r0, #16
   142d8:	str	r0, [sp, #16]
   142dc:	add	r1, r1, r3, lsr #4
   142e0:	cmp	r3, #48	; 0x30
   142e4:	and	r2, r1, #3
   142e8:	bcc	14344 <__assert_fail@plt+0x28b8>
   142ec:	sub	r3, r1, r2
   142f0:	mov	r5, #0
   142f4:	mov	r9, #48	; 0x30
   142f8:	add	r0, r7, r5
   142fc:	add	r4, r6, r5
   14300:	subs	r3, r3, #4
   14304:	add	r5, r5, #64	; 0x40
   14308:	mov	r8, r0
   1430c:	mov	ip, r4
   14310:	add	lr, r0, #16
   14314:	add	r1, r4, #16
   14318:	add	r0, r0, #32
   1431c:	vld1.8	{d16-d17}, [r8], r9
   14320:	vst1.8	{d16-d17}, [ip], r9
   14324:	vld1.8	{d16-d17}, [lr]
   14328:	vst1.8	{d16-d17}, [r1]
   1432c:	vld1.8	{d16-d17}, [r0]
   14330:	add	r0, r4, #32
   14334:	vst1.8	{d16-d17}, [r0]
   14338:	vld1.8	{d16-d17}, [r8]
   1433c:	vst1.8	{d16-d17}, [ip]
   14340:	bne	142f8 <__assert_fail@plt+0x286c>
   14344:	cmp	r2, #0
   14348:	beq	14368 <__assert_fail@plt+0x28dc>
   1434c:	add	r1, r6, r5
   14350:	add	r3, r7, r5
   14354:	rsb	r5, r2, #0
   14358:	vld1.8	{d16-d17}, [r3]!
   1435c:	adds	r5, r5, #1
   14360:	vst1.8	{d16-d17}, [r1]!
   14364:	bcc	14358 <__assert_fail@plt+0x28cc>
   14368:	ldr	r2, [sp, #16]
   1436c:	ldr	r0, [sp, #24]
   14370:	add	r6, r6, r2
   14374:	cmp	r2, r0
   14378:	bne	14864 <__assert_fail@plt+0x2dd8>
   1437c:	ldr	r2, [fp, #12]
   14380:	b	1487c <__assert_fail@plt+0x2df0>
   14384:	mov	r6, r4
   14388:	cmp	r6, r8
   1438c:	bcs	14478 <__assert_fail@plt+0x29ec>
   14390:	ldr	r0, [sp, #24]
   14394:	sub	r0, r0, r6
   14398:	add	r9, sl, r0
   1439c:	cmp	r9, #16
   143a0:	bcc	14890 <__assert_fail@plt+0x2e04>
   143a4:	cmp	r4, r8
   143a8:	addcc	r1, r4, r9
   143ac:	cmpcc	r6, r1
   143b0:	bcc	14890 <__assert_fail@plt+0x2e04>
   143b4:	bic	r0, r9, #15
   143b8:	mov	r2, #1
   143bc:	mov	r3, #0
   143c0:	str	sl, [sp, #20]
   143c4:	sub	r5, r0, #16
   143c8:	str	r0, [sp, #12]
   143cc:	add	r7, r2, r5, lsr #4
   143d0:	cmp	r5, #48	; 0x30
   143d4:	and	r0, r7, #3
   143d8:	str	r0, [sp, #24]
   143dc:	bcc	1443c <__assert_fail@plt+0x29b0>
   143e0:	ldr	r0, [sp, #24]
   143e4:	mov	r3, #0
   143e8:	mov	sl, #48	; 0x30
   143ec:	sub	r7, r7, r0
   143f0:	add	r2, r6, r3
   143f4:	add	r0, r4, r3
   143f8:	subs	r7, r7, #4
   143fc:	add	r3, r3, #64	; 0x40
   14400:	mov	lr, r2
   14404:	mov	r5, r0
   14408:	add	ip, r2, #16
   1440c:	add	r1, r0, #16
   14410:	add	r0, r0, #32
   14414:	vld1.8	{d16-d17}, [lr], sl
   14418:	vst1.8	{d16-d17}, [r5], sl
   1441c:	vld1.8	{d16-d17}, [ip]
   14420:	vst1.8	{d16-d17}, [r1]
   14424:	add	r1, r2, #32
   14428:	vld1.8	{d16-d17}, [r1]
   1442c:	vst1.8	{d16-d17}, [r0]
   14430:	vld1.8	{d16-d17}, [lr]
   14434:	vst1.8	{d16-d17}, [r5]
   14438:	bne	143f0 <__assert_fail@plt+0x2964>
   1443c:	ldr	r0, [sp, #24]
   14440:	cmp	r0, #0
   14444:	beq	14464 <__assert_fail@plt+0x29d8>
   14448:	add	r7, r4, r3
   1444c:	add	r3, r6, r3
   14450:	rsb	r2, r0, #0
   14454:	vld1.8	{d16-d17}, [r3]!
   14458:	adds	r2, r2, #1
   1445c:	vst1.8	{d16-d17}, [r7]!
   14460:	bcc	14454 <__assert_fail@plt+0x29c8>
   14464:	ldr	r0, [sp, #12]
   14468:	ldr	sl, [sp, #20]
   1446c:	add	r4, r4, r0
   14470:	cmp	r0, r9
   14474:	bne	1488c <__assert_fail@plt+0x2e00>
   14478:	ldr	r2, [sp, #16]
   1447c:	b	148a4 <__assert_fail@plt+0x2e18>
   14480:	mov	r6, r4
   14484:	cmp	r6, r8
   14488:	bcs	14574 <__assert_fail@plt+0x2ae8>
   1448c:	ldr	r0, [sp, #24]
   14490:	sub	r0, r0, r6
   14494:	add	r9, sl, r0
   14498:	cmp	r9, #16
   1449c:	bcc	148b4 <__assert_fail@plt+0x2e28>
   144a0:	cmp	r4, r8
   144a4:	addcc	r1, r4, r9
   144a8:	cmpcc	r6, r1
   144ac:	bcc	148b4 <__assert_fail@plt+0x2e28>
   144b0:	bic	r0, r9, #15
   144b4:	mov	r2, #1
   144b8:	mov	r3, #0
   144bc:	str	sl, [sp, #20]
   144c0:	sub	r5, r0, #16
   144c4:	str	r0, [sp, #12]
   144c8:	add	r7, r2, r5, lsr #4
   144cc:	cmp	r5, #48	; 0x30
   144d0:	and	r0, r7, #3
   144d4:	str	r0, [sp, #24]
   144d8:	bcc	14538 <__assert_fail@plt+0x2aac>
   144dc:	ldr	r0, [sp, #24]
   144e0:	mov	r3, #0
   144e4:	mov	sl, #48	; 0x30
   144e8:	sub	r7, r7, r0
   144ec:	add	r2, r6, r3
   144f0:	add	r0, r4, r3
   144f4:	subs	r7, r7, #4
   144f8:	add	r3, r3, #64	; 0x40
   144fc:	mov	lr, r2
   14500:	mov	r5, r0
   14504:	add	ip, r2, #16
   14508:	add	r1, r0, #16
   1450c:	add	r0, r0, #32
   14510:	vld1.8	{d16-d17}, [lr], sl
   14514:	vst1.8	{d16-d17}, [r5], sl
   14518:	vld1.8	{d16-d17}, [ip]
   1451c:	vst1.8	{d16-d17}, [r1]
   14520:	add	r1, r2, #32
   14524:	vld1.8	{d16-d17}, [r1]
   14528:	vst1.8	{d16-d17}, [r0]
   1452c:	vld1.8	{d16-d17}, [lr]
   14530:	vst1.8	{d16-d17}, [r5]
   14534:	bne	144ec <__assert_fail@plt+0x2a60>
   14538:	ldr	r0, [sp, #24]
   1453c:	cmp	r0, #0
   14540:	beq	14560 <__assert_fail@plt+0x2ad4>
   14544:	add	r7, r4, r3
   14548:	add	r3, r6, r3
   1454c:	rsb	r2, r0, #0
   14550:	vld1.8	{d16-d17}, [r3]!
   14554:	adds	r2, r2, #1
   14558:	vst1.8	{d16-d17}, [r7]!
   1455c:	bcc	14550 <__assert_fail@plt+0x2ac4>
   14560:	ldr	r0, [sp, #12]
   14564:	ldr	sl, [sp, #20]
   14568:	add	r4, r4, r0
   1456c:	cmp	r0, r9
   14570:	bne	148b0 <__assert_fail@plt+0x2e24>
   14574:	ldr	r2, [sp, #16]
   14578:	b	148c8 <__assert_fail@plt+0x2e3c>
   1457c:	movw	r1, #61264	; 0xef50
   14580:	cmp	r0, r1
   14584:	bgt	146f8 <__assert_fail@plt+0x2c6c>
   14588:	movw	r1, #26984	; 0x6968
   1458c:	cmp	r0, r1
   14590:	ble	14988 <__assert_fail@plt+0x2efc>
   14594:	movw	r1, #40863	; 0x9f9f
   14598:	cmp	r0, r1
   1459c:	ble	14b9c <__assert_fail@plt+0x3110>
   145a0:	movw	r1, #40865	; 0x9fa1
   145a4:	cmp	r0, r1
   145a8:	ble	14f70 <__assert_fail@plt+0x34e4>
   145ac:	movw	r1, #40866	; 0x9fa2
   145b0:	cmp	r0, r1
   145b4:	beq	15410 <__assert_fail@plt+0x3984>
   145b8:	movw	r1, #44533	; 0xadf5
   145bc:	cmp	r0, r1
   145c0:	beq	1541c <__assert_fail@plt+0x3990>
   145c4:	movw	r1, #44543	; 0xadff
   145c8:	cmp	r0, r1
   145cc:	bne	156b4 <__assert_fail@plt+0x3c28>
   145d0:	movw	r0, #14961	; 0x3a71
   145d4:	movt	r0, #2
   145d8:	b	1572c <__assert_fail@plt+0x3ca0>
   145dc:	movw	r1, #21826	; 0x5542
   145e0:	movt	r1, #25971	; 0x6573
   145e4:	cmp	r0, r1
   145e8:	ble	14748 <__assert_fail@plt+0x2cbc>
   145ec:	movw	r1, #26226	; 0x6672
   145f0:	movt	r1, #29539	; 0x7363
   145f4:	cmp	r0, r1
   145f8:	ble	149c4 <__assert_fail@plt+0x2f38>
   145fc:	movw	r1, #25454	; 0x636e
   14600:	movt	r1, #29793	; 0x7461
   14604:	cmp	r0, r1
   14608:	ble	14bcc <__assert_fail@plt+0x3140>
   1460c:	movw	r1, #16981	; 0x4255
   14610:	movt	r1, #30831	; 0x786f
   14614:	cmp	r0, r1
   14618:	ble	14f94 <__assert_fail@plt+0x3508>
   1461c:	movw	r1, #16982	; 0x4256
   14620:	movt	r1, #30831	; 0x786f
   14624:	cmp	r0, r1
   14628:	beq	15428 <__assert_fail@plt+0x399c>
   1462c:	movw	r1, #30256	; 0x7630
   14630:	movt	r1, #31052	; 0x794c
   14634:	cmp	r0, r1
   14638:	beq	15434 <__assert_fail@plt+0x39a8>
   1463c:	movw	r1, #26227	; 0x6673
   14640:	movt	r1, #31868	; 0x7c7c
   14644:	cmp	r0, r1
   14648:	bne	156b4 <__assert_fail@plt+0x3c28>
   1464c:	movw	r0, #15509	; 0x3c95
   14650:	movt	r0, #2
   14654:	b	1572c <__assert_fail@plt+0x3ca0>
   14658:	movw	r1, #7376	; 0x1cd0
   1465c:	cmp	r0, r1
   14660:	bgt	14af4 <__assert_fail@plt+0x3068>
   14664:	movw	r1, #390	; 0x186
   14668:	cmp	r0, r1
   1466c:	bgt	14c08 <__assert_fail@plt+0x317c>
   14670:	movw	r1, #19778	; 0x4d42
   14674:	movt	r1, #65363	; 0xff53
   14678:	cmp	r0, r1
   1467c:	beq	15390 <__assert_fail@plt+0x3904>
   14680:	cmp	r0, #47	; 0x2f
   14684:	beq	1539c <__assert_fail@plt+0x3910>
   14688:	cmp	r0, #51	; 0x33
   1468c:	bne	156b4 <__assert_fail@plt+0x3c28>
   14690:	movw	r0, #15748	; 0x3d84
   14694:	movt	r0, #2
   14698:	b	1572c <__assert_fail@plt+0x3ca0>
   1469c:	movw	r1, #513	; 0x201
   146a0:	movt	r1, #6528	; 0x1980
   146a4:	cmp	r0, r1
   146a8:	bgt	14a10 <__assert_fail@plt+0x2f84>
   146ac:	movw	r1, #3023	; 0xbcf
   146b0:	movt	r1, #3024	; 0xbd0
   146b4:	cmp	r0, r1
   146b8:	bgt	14ca0 <__assert_fail@plt+0x3214>
   146bc:	movw	r1, #6451	; 0x1933
   146c0:	movt	r1, #2308	; 0x904
   146c4:	cmp	r0, r1
   146c8:	bgt	14fc0 <__assert_fail@plt+0x3534>
   146cc:	movw	r1, #4520	; 0x11a8
   146d0:	movt	r1, #305	; 0x131
   146d4:	cmp	r0, r1
   146d8:	beq	15440 <__assert_fail@plt+0x39b4>
   146dc:	movw	r1, #22561	; 0x5821
   146e0:	movt	r1, #1893	; 0x765
   146e4:	cmp	r0, r1
   146e8:	bne	156b4 <__assert_fail@plt+0x3c28>
   146ec:	movw	r0, #15540	; 0x3cb4
   146f0:	movt	r0, #2
   146f4:	b	1572c <__assert_fail@plt+0x3ca0>
   146f8:	movw	r1, #6547	; 0x1993
   146fc:	movt	r1, #258	; 0x102
   14700:	cmp	r0, r1
   14704:	bgt	14a5c <__assert_fail@plt+0x2fd0>
   14708:	movw	r1, #57578	; 0xe0ea
   1470c:	movt	r1, #39	; 0x27
   14710:	cmp	r0, r1
   14714:	bgt	14cdc <__assert_fail@plt+0x3250>
   14718:	movw	r1, #61790	; 0xf15e
   1471c:	cmp	r0, r1
   14720:	bgt	14fec <__assert_fail@plt+0x3560>
   14724:	movw	r1, #61265	; 0xef51
   14728:	cmp	r0, r1
   1472c:	beq	1544c <__assert_fail@plt+0x39c0>
   14730:	movw	r1, #61267	; 0xef53
   14734:	cmp	r0, r1
   14738:	bne	156b4 <__assert_fail@plt+0x3c28>
   1473c:	movw	r0, #15202	; 0x3b62
   14740:	movt	r0, #2
   14744:	b	1572c <__assert_fail@plt+0x3ca0>
   14748:	movw	r1, #26475	; 0x676b
   1474c:	movt	r1, #24933	; 0x6165
   14750:	cmp	r0, r1
   14754:	bgt	14aa8 <__assert_fail@plt+0x301c>
   14758:	movw	r1, #27119	; 0x69ef
   1475c:	movt	r1, #23100	; 0x5a3c
   14760:	cmp	r0, r1
   14764:	bgt	14d18 <__assert_fail@plt+0x328c>
   14768:	movw	r1, #22568	; 0x5828
   1476c:	movt	r1, #22569	; 0x5829
   14770:	cmp	r0, r1
   14774:	bgt	15014 <__assert_fail@plt+0x3588>
   14778:	movw	r1, #256	; 0x100
   1477c:	movt	r1, #21529	; 0x5419
   14780:	cmp	r0, r1
   14784:	beq	15008 <__assert_fail@plt+0x357c>
   14788:	movw	r1, #18003	; 0x4653
   1478c:	movt	r1, #22106	; 0x565a
   14790:	cmp	r0, r1
   14794:	bne	156b4 <__assert_fail@plt+0x3c28>
   14798:	movw	r0, #15721	; 0x3d69
   1479c:	movt	r0, #2
   147a0:	b	1572c <__assert_fail@plt+0x3ca0>
   147a4:	add	r5, r5, r0
   147a8:	ldr	r3, [sp, #16]
   147ac:	ldr	r2, [sp, #12]
   147b0:	ldrb	r0, [r5], #1
   147b4:	cmp	r8, r5
   147b8:	strb	r0, [r7], #1
   147bc:	bne	147b0 <__assert_fail@plt+0x2d24>
   147c0:	movw	r0, #27756	; 0x6c6c
   147c4:	movt	r0, #117	; 0x75
   147c8:	b	147f0 <__assert_fail@plt+0x2d64>
   147cc:	add	r5, r5, r0
   147d0:	ldr	r3, [sp, #16]
   147d4:	ldr	r2, [sp, #12]
   147d8:	ldrb	r0, [r5], #1
   147dc:	cmp	r8, r5
   147e0:	strb	r0, [r7], #1
   147e4:	bne	147d8 <__assert_fail@plt+0x2d4c>
   147e8:	movw	r0, #27756	; 0x6c6c
   147ec:	movt	r0, #100	; 0x64
   147f0:	str	r0, [r7]
   147f4:	b	148d8 <__assert_fail@plt+0x2e4c>
   147f8:	add	r7, r7, r0
   147fc:	ldr	r3, [sp, #16]
   14800:	ldr	r2, [sp, #12]
   14804:	ldrb	r0, [r7], #1
   14808:	cmp	r8, r7
   1480c:	strb	r0, [r4], #1
   14810:	bne	14804 <__assert_fail@plt+0x2d78>
   14814:	movw	r0, #27756	; 0x6c6c
   14818:	movt	r0, #100	; 0x64
   1481c:	str	r0, [r4]
   14820:	b	148d8 <__assert_fail@plt+0x2e4c>
   14824:	add	r4, r4, r0
   14828:	ldr	r3, [sp, #24]
   1482c:	ldr	r2, [sp, #16]
   14830:	ldrb	r0, [r4], #1
   14834:	cmp	sl, r4
   14838:	strb	r0, [r8], #1
   1483c:	bne	14830 <__assert_fail@plt+0x2da4>
   14840:	movw	r0, #27756	; 0x6c6c
   14844:	ldr	r1, [sp, #20]
   14848:	movt	r0, #120	; 0x78
   1484c:	str	r0, [r8]
   14850:	mov	r0, #1
   14854:	bl	11924 <__printf_chk@plt>
   14858:	mov	r0, #0
   1485c:	sub	sp, fp, #28
   14860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14864:	add	r7, r7, r2
   14868:	ldr	r2, [fp, #12]
   1486c:	ldrb	r0, [r7], #1
   14870:	cmp	sl, r7
   14874:	strb	r0, [r6], #1
   14878:	bne	1486c <__assert_fail@plt+0x2de0>
   1487c:	ldr	r1, [sp, #20]
   14880:	mov	r0, #115	; 0x73
   14884:	strh	r0, [r6]
   14888:	b	158b4 <__assert_fail@plt+0x3e28>
   1488c:	add	r6, r6, r0
   14890:	ldr	r2, [sp, #16]
   14894:	ldrb	r0, [r6], #1
   14898:	cmp	r8, r6
   1489c:	strb	r0, [r4], #1
   148a0:	bne	14894 <__assert_fail@plt+0x2e08>
   148a4:	movw	r0, #27756	; 0x6c6c
   148a8:	movt	r0, #117	; 0x75
   148ac:	b	148d0 <__assert_fail@plt+0x2e44>
   148b0:	add	r6, r6, r0
   148b4:	ldr	r2, [sp, #16]
   148b8:	ldrb	r0, [r6], #1
   148bc:	cmp	r8, r6
   148c0:	strb	r0, [r4], #1
   148c4:	bne	148b8 <__assert_fail@plt+0x2e2c>
   148c8:	movw	r0, #27756	; 0x6c6c
   148cc:	movt	r0, #120	; 0x78
   148d0:	str	r0, [r4]
   148d4:	asr	r3, r2, #31
   148d8:	mov	r0, #1
   148dc:	mov	r1, sl
   148e0:	bl	11924 <__printf_chk@plt>
   148e4:	mov	r0, #0
   148e8:	sub	sp, fp, #28
   148ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148f0:	movw	r1, #43753	; 0xaae9
   148f4:	movt	r1, #43735	; 0xaad7
   148f8:	cmp	r0, r1
   148fc:	bgt	14d54 <__assert_fail@plt+0x32c8>
   14900:	movw	r1, #22773	; 0x58f5
   14904:	movt	r1, #38276	; 0x9584
   14908:	cmp	r0, r1
   1490c:	bgt	15040 <__assert_fail@plt+0x35b4>
   14910:	movw	r1, #22774	; 0x58f6
   14914:	movt	r1, #34180	; 0x8584
   14918:	cmp	r0, r1
   1491c:	beq	15458 <__assert_fail@plt+0x39cc>
   14920:	movw	r1, #26686	; 0x683e
   14924:	movt	r1, #37155	; 0x9123
   14928:	cmp	r0, r1
   1492c:	bne	156b4 <__assert_fail@plt+0x3c28>
   14930:	movw	r0, #15040	; 0x3ac0
   14934:	movt	r0, #2
   14938:	b	1572c <__assert_fail@plt+0x3ca0>
   1493c:	movw	r1, #16705	; 0x4141
   14940:	movt	r1, #17485	; 0x444d
   14944:	cmp	r0, r1
   14948:	bgt	14d90 <__assert_fail@plt+0x3304>
   1494c:	movw	r1, #20044	; 0x4e4c
   14950:	movt	r1, #16969	; 0x4249
   14954:	cmp	r0, r1
   14958:	bgt	1506c <__assert_fail@plt+0x35e0>
   1495c:	movw	r1, #17994	; 0x464a
   14960:	movt	r1, #12627	; 0x3153
   14964:	cmp	r0, r1
   14968:	beq	15464 <__assert_fail@plt+0x39d8>
   1496c:	movw	r1, #21297	; 0x5331
   14970:	movt	r1, #16966	; 0x4246
   14974:	cmp	r0, r1
   14978:	bne	156b4 <__assert_fail@plt+0x3c28>
   1497c:	movw	r0, #15007	; 0x3a9f
   14980:	movt	r0, #2
   14984:	b	1572c <__assert_fail@plt+0x3ca0>
   14988:	movw	r1, #19801	; 0x4d59
   1498c:	cmp	r0, r1
   14990:	bgt	14dcc <__assert_fail@plt+0x3340>
   14994:	movw	r1, #18519	; 0x4857
   14998:	cmp	r0, r1
   1499c:	bgt	15098 <__assert_fail@plt+0x360c>
   149a0:	movw	r1, #16964	; 0x4244
   149a4:	cmp	r0, r1
   149a8:	beq	15470 <__assert_fail@plt+0x39e4>
   149ac:	movw	r1, #18475	; 0x482b
   149b0:	cmp	r0, r1
   149b4:	bne	156b4 <__assert_fail@plt+0x3c28>
   149b8:	movw	r0, #15266	; 0x3ba2
   149bc:	movt	r0, #2
   149c0:	b	1572c <__assert_fail@plt+0x3ca0>
   149c4:	movw	r1, #18002	; 0x4652
   149c8:	movt	r1, #27457	; 0x6b41
   149cc:	cmp	r0, r1
   149d0:	bgt	14dfc <__assert_fail@plt+0x3370>
   149d4:	movw	r1, #26984	; 0x6968
   149d8:	movt	r1, #26457	; 0x6759
   149dc:	cmp	r0, r1
   149e0:	bgt	150bc <__assert_fail@plt+0x3630>
   149e4:	movw	r1, #21827	; 0x5543
   149e8:	movt	r1, #25971	; 0x6573
   149ec:	cmp	r0, r1
   149f0:	beq	1547c <__assert_fail@plt+0x39f0>
   149f4:	movw	r1, #21830	; 0x5546
   149f8:	movt	r1, #25971	; 0x6573
   149fc:	cmp	r0, r1
   14a00:	bne	156b4 <__assert_fail@plt+0x3c28>
   14a04:	movw	r0, #15228	; 0x3b7c
   14a08:	movt	r0, #2
   14a0c:	b	1572c <__assert_fail@plt+0x3ca0>
   14a10:	movw	r1, #6404	; 0x1904
   14a14:	movt	r1, #9221	; 0x2405
   14a18:	cmp	r0, r1
   14a1c:	bgt	14e38 <__assert_fail@plt+0x33ac>
   14a20:	movw	r1, #64205	; 0xfacd
   14a24:	movt	r1, #7085	; 0x1bad
   14a28:	cmp	r0, r1
   14a2c:	bgt	150e8 <__assert_fail@plt+0x365c>
   14a30:	movw	r1, #514	; 0x202
   14a34:	movt	r1, #6528	; 0x1980
   14a38:	cmp	r0, r1
   14a3c:	beq	15488 <__assert_fail@plt+0x39fc>
   14a40:	movw	r1, #806	; 0x326
   14a44:	movt	r1, #6531	; 0x1983
   14a48:	cmp	r0, r1
   14a4c:	bne	156b4 <__assert_fail@plt+0x3c28>
   14a50:	movw	r0, #15222	; 0x3b76
   14a54:	movt	r0, #2
   14a58:	b	1572c <__assert_fail@plt+0x3ca0>
   14a5c:	movw	r1, #53612	; 0xd16c
   14a60:	movt	r1, #303	; 0x12f
   14a64:	cmp	r0, r1
   14a68:	bgt	14e74 <__assert_fail@plt+0x33e8>
   14a6c:	movw	r1, #6548	; 0x1994
   14a70:	movt	r1, #258	; 0x102
   14a74:	cmp	r0, r1
   14a78:	beq	153c8 <__assert_fail@plt+0x393c>
   14a7c:	movw	r1, #6551	; 0x1997
   14a80:	movt	r1, #258	; 0x102
   14a84:	cmp	r0, r1
   14a88:	beq	153d4 <__assert_fail@plt+0x3948>
   14a8c:	movw	r1, #6512	; 0x1970
   14a90:	movt	r1, #278	; 0x116
   14a94:	cmp	r0, r1
   14a98:	bne	156b4 <__assert_fail@plt+0x3c28>
   14a9c:	movw	r0, #15252	; 0x3b94
   14aa0:	movt	r0, #2
   14aa4:	b	1572c <__assert_fail@plt+0x3ca0>
   14aa8:	movw	r1, #25969	; 0x6571
   14aac:	movt	r1, #25189	; 0x6265
   14ab0:	cmp	r0, r1
   14ab4:	bgt	14eac <__assert_fail@plt+0x3420>
   14ab8:	movw	r1, #25973	; 0x6575
   14abc:	movt	r1, #25188	; 0x6264
   14ac0:	cmp	r0, r1
   14ac4:	bgt	15114 <__assert_fail@plt+0x3688>
   14ac8:	movw	r1, #26476	; 0x676c
   14acc:	movt	r1, #24933	; 0x6165
   14ad0:	cmp	r0, r1
   14ad4:	beq	15494 <__assert_fail@plt+0x3a08>
   14ad8:	movw	r1, #26227	; 0x6673
   14adc:	movt	r1, #24949	; 0x6175
   14ae0:	cmp	r0, r1
   14ae4:	bne	156b4 <__assert_fail@plt+0x3c28>
   14ae8:	movw	r0, #14980	; 0x3a84
   14aec:	movt	r0, #2
   14af0:	b	1572c <__assert_fail@plt+0x3ca0>
   14af4:	movw	r1, #13363	; 0x3433
   14af8:	cmp	r0, r1
   14afc:	ble	14ee8 <__assert_fail@plt+0x345c>
   14b00:	movw	r1, #16387	; 0x4003
   14b04:	cmp	r0, r1
   14b08:	bgt	15140 <__assert_fail@plt+0x36b4>
   14b0c:	movw	r1, #13364	; 0x3434
   14b10:	cmp	r0, r1
   14b14:	beq	154a0 <__assert_fail@plt+0x3a14>
   14b18:	cmp	r0, #16384	; 0x4000
   14b1c:	beq	151d4 <__assert_fail@plt+0x3748>
   14b20:	b	156b4 <__assert_fail@plt+0x3c28>
   14b24:	movw	r1, #18960	; 0x4a10
   14b28:	movt	r1, #51966	; 0xcafe
   14b2c:	cmp	r0, r1
   14b30:	bgt	15164 <__assert_fail@plt+0x36d8>
   14b34:	movw	r1, #5520	; 0x1590
   14b38:	movt	r1, #51031	; 0xc757
   14b3c:	cmp	r0, r1
   14b40:	beq	154ac <__assert_fail@plt+0x3a20>
   14b44:	movw	r1, #33128	; 0x8168
   14b48:	movt	r1, #51582	; 0xc97e
   14b4c:	cmp	r0, r1
   14b50:	bne	156b4 <__assert_fail@plt+0x3c28>
   14b54:	movw	r0, #15349	; 0x3bf5
   14b58:	movt	r0, #2
   14b5c:	b	1572c <__assert_fail@plt+0x3ca0>
   14b60:	movw	r1, #18802	; 0x4972
   14b64:	movt	r1, #21093	; 0x5265
   14b68:	cmp	r0, r1
   14b6c:	bgt	15190 <__assert_fail@plt+0x3704>
   14b70:	movw	r1, #18003	; 0x4653
   14b74:	movt	r1, #18256	; 0x4750
   14b78:	cmp	r0, r1
   14b7c:	beq	154b8 <__assert_fail@plt+0x3a2c>
   14b80:	movw	r1, #20549	; 0x5045
   14b84:	movt	r1, #20553	; 0x5049
   14b88:	cmp	r0, r1
   14b8c:	bne	156b4 <__assert_fail@plt+0x3c28>
   14b90:	movw	r0, #15563	; 0x3ccb
   14b94:	movt	r0, #2
   14b98:	b	1572c <__assert_fail@plt+0x3ca0>
   14b9c:	movw	r1, #29365	; 0x72b5
   14ba0:	cmp	r0, r1
   14ba4:	bgt	151bc <__assert_fail@plt+0x3730>
   14ba8:	movw	r1, #26985	; 0x6969
   14bac:	cmp	r0, r1
   14bb0:	beq	154c4 <__assert_fail@plt+0x3a38>
   14bb4:	movw	r1, #29301	; 0x7275
   14bb8:	cmp	r0, r1
   14bbc:	bne	156b4 <__assert_fail@plt+0x3c28>
   14bc0:	movw	r0, #15553	; 0x3cc1
   14bc4:	movt	r0, #2
   14bc8:	b	1572c <__assert_fail@plt+0x3ca0>
   14bcc:	movw	r1, #29304	; 0x7278
   14bd0:	movt	r1, #29554	; 0x7372
   14bd4:	cmp	r0, r1
   14bd8:	bgt	151e0 <__assert_fail@plt+0x3754>
   14bdc:	movw	r1, #26227	; 0x6673
   14be0:	movt	r1, #29539	; 0x7363
   14be4:	cmp	r0, r1
   14be8:	beq	154d0 <__assert_fail@plt+0x3a44>
   14bec:	movw	r1, #29544	; 0x7368
   14bf0:	movt	r1, #29553	; 0x7371
   14bf4:	cmp	r0, r1
   14bf8:	bne	156b4 <__assert_fail@plt+0x3c28>
   14bfc:	movw	r0, #15637	; 0x3d15
   14c00:	movt	r0, #2
   14c04:	b	1572c <__assert_fail@plt+0x3ca0>
   14c08:	movw	r1, #4979	; 0x1373
   14c0c:	sub	r1, r0, r1
   14c10:	cmp	r1, #28
   14c14:	bhi	153a8 <__assert_fail@plt+0x391c>
   14c18:	add	r2, pc, #0
   14c1c:	ldr	pc, [r2, r1, lsl #2]
   14c20:	muleq	r1, r4, ip
   14c24:			; <UNDEFINED> instruction: 0x000156b4
   14c28:			; <UNDEFINED> instruction: 0x000156b4
   14c2c:			; <UNDEFINED> instruction: 0x000156b4
   14c30:			; <UNDEFINED> instruction: 0x000156b4
   14c34:			; <UNDEFINED> instruction: 0x000156b4
   14c38:			; <UNDEFINED> instruction: 0x000156b4
   14c3c:			; <UNDEFINED> instruction: 0x000156b4
   14c40:			; <UNDEFINED> instruction: 0x000156b4
   14c44:			; <UNDEFINED> instruction: 0x000156b4
   14c48:	andeq	r5, r1, r0, lsl #14
   14c4c:			; <UNDEFINED> instruction: 0x000156b4
   14c50:	andeq	r5, r1, ip, lsl #14
   14c54:			; <UNDEFINED> instruction: 0x000156b4
   14c58:			; <UNDEFINED> instruction: 0x000156b4
   14c5c:			; <UNDEFINED> instruction: 0x000156b4
   14c60:			; <UNDEFINED> instruction: 0x000156b4
   14c64:			; <UNDEFINED> instruction: 0x000156b4
   14c68:			; <UNDEFINED> instruction: 0x000156b4
   14c6c:			; <UNDEFINED> instruction: 0x000156b4
   14c70:			; <UNDEFINED> instruction: 0x000156b4
   14c74:			; <UNDEFINED> instruction: 0x000156b4
   14c78:			; <UNDEFINED> instruction: 0x000156b4
   14c7c:			; <UNDEFINED> instruction: 0x000156b4
   14c80:			; <UNDEFINED> instruction: 0x000156b4
   14c84:			; <UNDEFINED> instruction: 0x000156b4
   14c88:			; <UNDEFINED> instruction: 0x000156b4
   14c8c:			; <UNDEFINED> instruction: 0x000156b4
   14c90:	andeq	r5, r1, r8, lsl r7
   14c94:	movw	r0, #15691	; 0x3d4b
   14c98:	movt	r0, #2
   14c9c:	b	1572c <__assert_fail@plt+0x3ca0>
   14ca0:	movw	r1, #4965	; 0x1365
   14ca4:	movt	r1, #4966	; 0x1366
   14ca8:	cmp	r0, r1
   14cac:	bgt	1520c <__assert_fail@plt+0x3780>
   14cb0:	movw	r1, #3024	; 0xbd0
   14cb4:	movt	r1, #3024	; 0xbd0
   14cb8:	cmp	r0, r1
   14cbc:	beq	154dc <__assert_fail@plt+0x3a50>
   14cc0:	movw	r1, #30804	; 0x7854
   14cc4:	movt	r1, #4400	; 0x1130
   14cc8:	cmp	r0, r1
   14ccc:	bne	156b4 <__assert_fail@plt+0x3c28>
   14cd0:	movw	r0, #15298	; 0x3bc2
   14cd4:	movt	r0, #2
   14cd8:	b	1572c <__assert_fail@plt+0x3ca0>
   14cdc:	movw	r1, #65517	; 0xffed
   14ce0:	movt	r1, #192	; 0xc0
   14ce4:	cmp	r0, r1
   14ce8:	bgt	15238 <__assert_fail@plt+0x37ac>
   14cec:	movw	r1, #57579	; 0xe0eb
   14cf0:	movt	r1, #39	; 0x27
   14cf4:	cmp	r0, r1
   14cf8:	beq	154e8 <__assert_fail@plt+0x3a5c>
   14cfc:	movw	r1, #19027	; 0x4a53
   14d00:	movt	r1, #65	; 0x41
   14d04:	cmp	r0, r1
   14d08:	bne	156b4 <__assert_fail@plt+0x3c28>
   14d0c:	movw	r0, #15008	; 0x3aa0
   14d10:	movt	r0, #2
   14d14:	b	1572c <__assert_fail@plt+0x3ca0>
   14d18:	movw	r1, #11764	; 0x2df4
   14d1c:	movt	r1, #24010	; 0x5dca
   14d20:	cmp	r0, r1
   14d24:	bgt	15264 <__assert_fail@plt+0x37d8>
   14d28:	movw	r1, #27120	; 0x69f0
   14d2c:	movt	r1, #23100	; 0x5a3c
   14d30:	cmp	r0, r1
   14d34:	beq	154f4 <__assert_fail@plt+0x3a68>
   14d38:	movw	r1, #18003	; 0x4653
   14d3c:	movt	r1, #23119	; 0x5a4f
   14d40:	cmp	r0, r1
   14d44:	bne	156b4 <__assert_fail@plt+0x3c28>
   14d48:	movw	r0, #15755	; 0x3d8b
   14d4c:	movt	r0, #2
   14d50:	b	1572c <__assert_fail@plt+0x3ca0>
   14d54:	movw	r1, #44219	; 0xacbb
   14d58:	movt	r1, #47819	; 0xbacb
   14d5c:	cmp	r0, r1
   14d60:	bgt	15290 <__assert_fail@plt+0x3804>
   14d64:	movw	r1, #43754	; 0xaaea
   14d68:	movt	r1, #43735	; 0xaad7
   14d6c:	cmp	r0, r1
   14d70:	beq	15500 <__assert_fail@plt+0x3a74>
   14d74:	movw	r1, #6516	; 0x1974
   14d78:	movt	r1, #43962	; 0xabba
   14d7c:	cmp	r0, r1
   14d80:	bne	156b4 <__assert_fail@plt+0x3c28>
   14d84:	movw	r0, #15732	; 0x3d74
   14d88:	movt	r0, #2
   14d8c:	b	1572c <__assert_fail@plt+0x3ca0>
   14d90:	movw	r1, #17484	; 0x444c
   14d94:	movt	r1, #17741	; 0x454d
   14d98:	cmp	r0, r1
   14d9c:	bgt	152bc <__assert_fail@plt+0x3830>
   14da0:	movw	r1, #16706	; 0x4142
   14da4:	movt	r1, #17485	; 0x444d
   14da8:	cmp	r0, r1
   14dac:	beq	1550c <__assert_fail@plt+0x3a80>
   14db0:	movw	r1, #52520	; 0xcd28
   14db4:	movt	r1, #17725	; 0x453d
   14db8:	cmp	r0, r1
   14dbc:	bne	156b4 <__assert_fail@plt+0x3c28>
   14dc0:	movw	r0, #15111	; 0x3b07
   14dc4:	movt	r0, #2
   14dc8:	b	1572c <__assert_fail@plt+0x3ca0>
   14dcc:	movw	r1, #22091	; 0x564b
   14dd0:	cmp	r0, r1
   14dd4:	bgt	152e8 <__assert_fail@plt+0x385c>
   14dd8:	movw	r1, #19802	; 0x4d5a
   14ddc:	cmp	r0, r1
   14de0:	beq	15518 <__assert_fail@plt+0x3a8c>
   14de4:	movw	r1, #20859	; 0x517b
   14de8:	cmp	r0, r1
   14dec:	bne	156b4 <__assert_fail@plt+0x3c28>
   14df0:	movw	r0, #15616	; 0x3d00
   14df4:	movt	r0, #2
   14df8:	b	1572c <__assert_fail@plt+0x3ca0>
   14dfc:	movw	r1, #29539	; 0x7363
   14e00:	movt	r1, #28262	; 0x6e66
   14e04:	cmp	r0, r1
   14e08:	bgt	1530c <__assert_fail@plt+0x3880>
   14e0c:	movw	r1, #18003	; 0x4653
   14e10:	movt	r1, #27457	; 0x6b41
   14e14:	cmp	r0, r1
   14e18:	beq	15524 <__assert_fail@plt+0x3a98>
   14e1c:	movw	r1, #28528	; 0x6f70
   14e20:	movt	r1, #27759	; 0x6c6f
   14e24:	cmp	r0, r1
   14e28:	bne	156b4 <__assert_fail@plt+0x3c28>
   14e2c:	movw	r0, #15012	; 0x3aa4
   14e30:	movt	r0, #2
   14e34:	b	1572c <__assert_fail@plt+0x3ca0>
   14e38:	movw	r1, #7657	; 0x1de9
   14e3c:	movt	r1, #11181	; 0x2bad
   14e40:	cmp	r0, r1
   14e44:	bgt	15338 <__assert_fail@plt+0x38ac>
   14e48:	movw	r1, #6405	; 0x1905
   14e4c:	movt	r1, #9221	; 0x2405
   14e50:	cmp	r0, r1
   14e54:	beq	15530 <__assert_fail@plt+0x3aa4>
   14e58:	movw	r1, #15685	; 0x3d45
   14e5c:	movt	r1, #10445	; 0x28cd
   14e60:	cmp	r0, r1
   14e64:	bne	156b4 <__assert_fail@plt+0x3c28>
   14e68:	movw	r0, #15104	; 0x3b00
   14e6c:	movt	r0, #2
   14e70:	b	1572c <__assert_fail@plt+0x3ca0>
   14e74:	movw	r1, #2124	; 0x84c
   14e78:	movt	r1, #65232	; 0xfed0
   14e7c:	add	r1, r0, r1
   14e80:	cmp	r1, #3
   14e84:	bhi	15698 <__assert_fail@plt+0x3c0c>
   14e88:	add	r0, pc, #0
   14e8c:	ldr	pc, [r0, r1, lsl #2]
   14e90:	andeq	r4, r1, r0, lsr #29
   14e94:	ldrdeq	r5, [r1], -ip
   14e98:	andeq	r5, r1, r8, ror #13
   14e9c:	strdeq	r5, [r1], -r4
   14ea0:	movw	r0, #15738	; 0x3d7a
   14ea4:	movt	r0, #2
   14ea8:	b	1572c <__assert_fail@plt+0x3ca0>
   14eac:	movw	r1, #26399	; 0x671f
   14eb0:	movt	r1, #25698	; 0x6462
   14eb4:	cmp	r0, r1
   14eb8:	bgt	15364 <__assert_fail@plt+0x38d8>
   14ebc:	movw	r1, #25970	; 0x6572
   14ec0:	movt	r1, #25189	; 0x6265
   14ec4:	cmp	r0, r1
   14ec8:	beq	1553c <__assert_fail@plt+0x3ab0>
   14ecc:	movw	r1, #29296	; 0x7270
   14ed0:	movt	r1, #25447	; 0x6367
   14ed4:	cmp	r0, r1
   14ed8:	bne	156b4 <__assert_fail@plt+0x3c28>
   14edc:	movw	r0, #15071	; 0x3adf
   14ee0:	movt	r0, #2
   14ee4:	b	1572c <__assert_fail@plt+0x3ca0>
   14ee8:	movw	r1, #7377	; 0x1cd1
   14eec:	cmp	r0, r1
   14ef0:	beq	15548 <__assert_fail@plt+0x3abc>
   14ef4:	movw	r1, #9320	; 0x2468
   14ef8:	cmp	r0, r1
   14efc:	beq	15554 <__assert_fail@plt+0x3ac8>
   14f00:	movw	r1, #9336	; 0x2478
   14f04:	cmp	r0, r1
   14f08:	bne	156b4 <__assert_fail@plt+0x3c28>
   14f0c:	movw	r0, #15399	; 0x3c27
   14f10:	movt	r0, #2
   14f14:	b	1572c <__assert_fail@plt+0x3ca0>
   14f18:	movw	r1, #57826	; 0xe1e2
   14f1c:	movt	r1, #57589	; 0xe0f5
   14f20:	cmp	r0, r1
   14f24:	beq	15560 <__assert_fail@plt+0x3ad4>
   14f28:	movw	r1, #8208	; 0x2010
   14f2c:	movt	r1, #62197	; 0xf2f5
   14f30:	cmp	r0, r1
   14f34:	bne	156b4 <__assert_fail@plt+0x3c28>
   14f38:	movw	r0, #15217	; 0x3b71
   14f3c:	movt	r0, #2
   14f40:	b	1572c <__assert_fail@plt+0x3ca0>
   14f44:	movw	r1, #12621	; 0x314d
   14f48:	movt	r1, #21318	; 0x5346
   14f4c:	cmp	r0, r1
   14f50:	beq	1556c <__assert_fail@plt+0x3ae0>
   14f54:	movw	r1, #16719	; 0x414f
   14f58:	movt	r1, #21318	; 0x5346
   14f5c:	cmp	r0, r1
   14f60:	bne	156b4 <__assert_fail@plt+0x3c28>
   14f64:	movw	r0, #15345	; 0x3bf1
   14f68:	movt	r0, #2
   14f6c:	b	1572c <__assert_fail@plt+0x3ca0>
   14f70:	movw	r1, #40864	; 0x9fa0
   14f74:	cmp	r0, r1
   14f78:	beq	15578 <__assert_fail@plt+0x3aec>
   14f7c:	movw	r1, #40865	; 0x9fa1
   14f80:	cmp	r0, r1
   14f84:	bne	156b4 <__assert_fail@plt+0x3c28>
   14f88:	movw	r0, #15467	; 0x3c6b
   14f8c:	movt	r0, #2
   14f90:	b	1572c <__assert_fail@plt+0x3ca0>
   14f94:	movw	r1, #25455	; 0x636f
   14f98:	movt	r1, #29793	; 0x7461
   14f9c:	cmp	r0, r1
   14fa0:	beq	15584 <__assert_fail@plt+0x3af8>
   14fa4:	movw	r1, #24931	; 0x6163
   14fa8:	movt	r1, #29810	; 0x7472
   14fac:	cmp	r0, r1
   14fb0:	bne	156b4 <__assert_fail@plt+0x3c28>
   14fb4:	movw	r0, #15670	; 0x3d36
   14fb8:	movt	r0, #2
   14fbc:	b	1572c <__assert_fail@plt+0x3ca0>
   14fc0:	movw	r1, #6452	; 0x1934
   14fc4:	movt	r1, #2308	; 0x904
   14fc8:	cmp	r0, r1
   14fcc:	beq	15590 <__assert_fail@plt+0x3b04>
   14fd0:	movw	r1, #7658	; 0x1dea
   14fd4:	movt	r1, #2989	; 0xbad
   14fd8:	cmp	r0, r1
   14fdc:	bne	156b4 <__assert_fail@plt+0x3c28>
   14fe0:	movw	r0, #15244	; 0x3b8c
   14fe4:	movt	r0, #2
   14fe8:	b	1572c <__assert_fail@plt+0x3ca0>
   14fec:	movw	r1, #61791	; 0xf15f
   14ff0:	cmp	r0, r1
   14ff4:	beq	1559c <__assert_fail@plt+0x3b10>
   14ff8:	movw	r1, #6484	; 0x1954
   14ffc:	movt	r1, #1
   15000:	cmp	r0, r1
   15004:	bne	156b4 <__assert_fail@plt+0x3c28>
   15008:	movw	r0, #14981	; 0x3a85
   1500c:	movt	r0, #2
   15010:	b	1572c <__assert_fail@plt+0x3ca0>
   15014:	movw	r1, #22569	; 0x5829
   15018:	movt	r1, #22569	; 0x5829
   1501c:	cmp	r0, r1
   15020:	beq	155a8 <__assert_fail@plt+0x3b1c>
   15024:	movw	r1, #21314	; 0x5342
   15028:	movt	r1, #22598	; 0x5846
   1502c:	cmp	r0, r1
   15030:	bne	156b4 <__assert_fail@plt+0x3c28>
   15034:	movw	r0, #15125	; 0x3b15
   15038:	movt	r0, #2
   1503c:	b	1572c <__assert_fail@plt+0x3ca0>
   15040:	movw	r1, #22774	; 0x58f6
   15044:	movt	r1, #38276	; 0x9584
   15048:	cmp	r0, r1
   1504c:	beq	155b4 <__assert_fail@plt+0x3b28>
   15050:	movw	r1, #64757	; 0xfcf5
   15054:	movt	r1, #42241	; 0xa501
   15058:	cmp	r0, r1
   1505c:	bne	156b4 <__assert_fail@plt+0x3c28>
   15060:	movw	r0, #15716	; 0x3d64
   15064:	movt	r0, #2
   15068:	b	1572c <__assert_fail@plt+0x3ca0>
   1506c:	movw	r1, #20045	; 0x4e4d
   15070:	movt	r1, #16969	; 0x4249
   15074:	cmp	r0, r1
   15078:	beq	155c0 <__assert_fail@plt+0x3b34>
   1507c:	movw	r1, #23891	; 0x5d53
   15080:	movt	r1, #17217	; 0x4341
   15084:	cmp	r0, r1
   15088:	bne	156b4 <__assert_fail@plt+0x3c28>
   1508c:	movw	r0, #15608	; 0x3cf8
   15090:	movt	r0, #2
   15094:	b	1572c <__assert_fail@plt+0x3ca0>
   15098:	movw	r1, #18520	; 0x4858
   1509c:	cmp	r0, r1
   150a0:	beq	155cc <__assert_fail@plt+0x3b40>
   150a4:	movw	r1, #19780	; 0x4d44
   150a8:	cmp	r0, r1
   150ac:	bne	156b4 <__assert_fail@plt+0x3c28>
   150b0:	movw	r0, #15433	; 0x3c49
   150b4:	movt	r0, #2
   150b8:	b	1572c <__assert_fail@plt+0x3ca0>
   150bc:	movw	r1, #26985	; 0x6969
   150c0:	movt	r1, #26457	; 0x6759
   150c4:	cmp	r0, r1
   150c8:	beq	155d8 <__assert_fail@plt+0x3b4c>
   150cc:	movw	r1, #4386	; 0x1122
   150d0:	movt	r1, #26649	; 0x6819
   150d4:	cmp	r0, r1
   150d8:	bne	156b4 <__assert_fail@plt+0x3c28>
   150dc:	movw	r0, #15535	; 0x3caf
   150e0:	movt	r0, #2
   150e4:	b	1572c <__assert_fail@plt+0x3ca0>
   150e8:	movw	r1, #64206	; 0xface
   150ec:	movt	r1, #7085	; 0x1bad
   150f0:	cmp	r0, r1
   150f4:	beq	155e4 <__assert_fail@plt+0x3b58>
   150f8:	movw	r1, #47792	; 0xbab0
   150fc:	movt	r1, #8209	; 0x2011
   15100:	cmp	r0, r1
   15104:	bne	156b4 <__assert_fail@plt+0x3c28>
   15108:	movw	r0, #15186	; 0x3b52
   1510c:	movt	r0, #2
   15110:	b	1572c <__assert_fail@plt+0x3ca0>
   15114:	movw	r1, #25974	; 0x6576
   15118:	movt	r1, #25188	; 0x6264
   1511c:	cmp	r0, r1
   15120:	beq	155f0 <__assert_fail@plt+0x3b64>
   15124:	movw	r1, #25968	; 0x6570
   15128:	movt	r1, #25189	; 0x6265
   1512c:	cmp	r0, r1
   15130:	bne	156b4 <__assert_fail@plt+0x3c28>
   15134:	movw	r0, #15095	; 0x3af7
   15138:	movt	r0, #2
   1513c:	b	1572c <__assert_fail@plt+0x3ca0>
   15140:	movw	r1, #16388	; 0x4004
   15144:	cmp	r0, r1
   15148:	beq	151d4 <__assert_fail@plt+0x3748>
   1514c:	movw	r1, #16390	; 0x4006
   15150:	cmp	r0, r1
   15154:	bne	156b4 <__assert_fail@plt+0x3c28>
   15158:	movw	r0, #15188	; 0x3b54
   1515c:	movt	r0, #2
   15160:	b	1572c <__assert_fail@plt+0x3ca0>
   15164:	movw	r1, #18961	; 0x4a11
   15168:	movt	r1, #51966	; 0xcafe
   1516c:	cmp	r0, r1
   15170:	beq	155fc <__assert_fail@plt+0x3b70>
   15174:	movw	r1, #33252	; 0x81e4
   15178:	movt	r1, #56926	; 0xde5e
   1517c:	cmp	r0, r1
   15180:	bne	156b4 <__assert_fail@plt+0x3c28>
   15184:	movw	r0, #15171	; 0x3b43
   15188:	movt	r0, #2
   1518c:	b	1572c <__assert_fail@plt+0x3ca0>
   15190:	movw	r1, #18803	; 0x4973
   15194:	movt	r1, #21093	; 0x5265
   15198:	cmp	r0, r1
   1519c:	beq	15608 <__assert_fail@plt+0x3b7c>
   151a0:	movw	r1, #17229	; 0x434d
   151a4:	movt	r1, #21317	; 0x5345
   151a8:	cmp	r0, r1
   151ac:	bne	156b4 <__assert_fail@plt+0x3c28>
   151b0:	movw	r0, #15579	; 0x3cdb
   151b4:	movt	r0, #2
   151b8:	b	1572c <__assert_fail@plt+0x3ca0>
   151bc:	movw	r1, #29366	; 0x72b6
   151c0:	cmp	r0, r1
   151c4:	beq	15614 <__assert_fail@plt+0x3b88>
   151c8:	movw	r1, #38496	; 0x9660
   151cc:	cmp	r0, r1
   151d0:	bne	156b4 <__assert_fail@plt+0x3c28>
   151d4:	movw	r0, #15322	; 0x3bda
   151d8:	movt	r0, #2
   151dc:	b	1572c <__assert_fail@plt+0x3ca0>
   151e0:	movw	r1, #29305	; 0x7279
   151e4:	movt	r1, #29554	; 0x7372
   151e8:	cmp	r0, r1
   151ec:	beq	15620 <__assert_fail@plt+0x3b94>
   151f0:	movw	r1, #29253	; 0x7245
   151f4:	movt	r1, #29557	; 0x7375
   151f8:	cmp	r0, r1
   151fc:	bne	156b4 <__assert_fail@plt+0x3c28>
   15200:	movw	r0, #15086	; 0x3aee
   15204:	movt	r0, #2
   15208:	b	1572c <__assert_fail@plt+0x3ca0>
   1520c:	movw	r1, #4966	; 0x1366
   15210:	movt	r1, #4966	; 0x1366
   15214:	cmp	r0, r1
   15218:	beq	1562c <__assert_fail@plt+0x3ba0>
   1521c:	movw	r1, #13126	; 0x3346
   15220:	movt	r1, #5377	; 0x1501
   15224:	cmp	r0, r1
   15228:	bne	156b4 <__assert_fail@plt+0x3c28>
   1522c:	movw	r0, #15684	; 0x3d44
   15230:	movt	r0, #2
   15234:	b	1572c <__assert_fail@plt+0x3ca0>
   15238:	movw	r1, #65518	; 0xffee
   1523c:	movt	r1, #192	; 0xc0
   15240:	cmp	r0, r1
   15244:	beq	15638 <__assert_fail@plt+0x3bac>
   15248:	movw	r1, #25600	; 0x6400
   1524c:	movt	r1, #195	; 0xc3
   15250:	cmp	r0, r1
   15254:	bne	156b4 <__assert_fail@plt+0x3c28>
   15258:	movw	r0, #15057	; 0x3ad1
   1525c:	movt	r0, #2
   15260:	b	1572c <__assert_fail@plt+0x3ca0>
   15264:	movw	r1, #11765	; 0x2df5
   15268:	movt	r1, #24010	; 0x5dca
   1526c:	cmp	r0, r1
   15270:	beq	15644 <__assert_fail@plt+0x3bb8>
   15274:	movw	r1, #26227	; 0x6673
   15278:	movt	r1, #24931	; 0x6163
   1527c:	cmp	r0, r1
   15280:	bne	156b4 <__assert_fail@plt+0x3c28>
   15284:	movw	r0, #14951	; 0x3a67
   15288:	movt	r0, #2
   1528c:	b	1572c <__assert_fail@plt+0x3ca0>
   15290:	movw	r1, #44220	; 0xacbc
   15294:	movt	r1, #47819	; 0xbacb
   15298:	cmp	r0, r1
   1529c:	beq	15650 <__assert_fail@plt+0x3bc4>
   152a0:	movw	r1, #57005	; 0xdead
   152a4:	movt	r1, #48879	; 0xbeef
   152a8:	cmp	r0, r1
   152ac:	bne	156b4 <__assert_fail@plt+0x3c28>
   152b0:	movw	r0, #15625	; 0x3d09
   152b4:	movt	r0, #2
   152b8:	b	1572c <__assert_fail@plt+0x3ca0>
   152bc:	movw	r1, #17485	; 0x444d
   152c0:	movt	r1, #17741	; 0x454d
   152c4:	cmp	r0, r1
   152c8:	beq	1565c <__assert_fail@plt+0x3bd0>
   152cc:	movw	r1, #18003	; 0x4653
   152d0:	movt	r1, #17752	; 0x4558
   152d4:	cmp	r0, r1
   152d8:	bne	156b4 <__assert_fail@plt+0x3c28>
   152dc:	movw	r0, #15247	; 0x3b8f
   152e0:	movt	r0, #2
   152e4:	b	1572c <__assert_fail@plt+0x3ca0>
   152e8:	movw	r1, #22092	; 0x564c
   152ec:	cmp	r0, r1
   152f0:	beq	15668 <__assert_fail@plt+0x3bdc>
   152f4:	movw	r1, #24053	; 0x5df5
   152f8:	cmp	r0, r1
   152fc:	bne	156b4 <__assert_fail@plt+0x3c28>
   15300:	movw	r0, #15192	; 0x3b58
   15304:	movt	r0, #2
   15308:	b	1572c <__assert_fail@plt+0x3ca0>
   1530c:	movw	r1, #29540	; 0x7364
   15310:	movt	r1, #28262	; 0x6e66
   15314:	cmp	r0, r1
   15318:	beq	15674 <__assert_fail@plt+0x3be8>
   1531c:	movw	r1, #26227	; 0x6673
   15320:	movt	r1, #28275	; 0x6e73
   15324:	cmp	r0, r1
   15328:	bne	156b4 <__assert_fail@plt+0x3c28>
   1532c:	movw	r0, #15457	; 0x3c61
   15330:	movt	r0, #2
   15334:	b	1572c <__assert_fail@plt+0x3ca0>
   15338:	movw	r1, #7658	; 0x1dea
   1533c:	movt	r1, #11181	; 0x2bad
   15340:	cmp	r0, r1
   15344:	beq	15680 <__assert_fail@plt+0x3bf4>
   15348:	movw	r1, #12225	; 0x2fc1
   1534c:	movt	r1, #12225	; 0x2fc1
   15350:	cmp	r0, r1
   15354:	bne	156b4 <__assert_fail@plt+0x3c28>
   15358:	movw	r0, #15722	; 0x3d6a
   1535c:	movt	r0, #2
   15360:	b	1572c <__assert_fail@plt+0x3ca0>
   15364:	movw	r1, #26400	; 0x6720
   15368:	movt	r1, #25698	; 0x6462
   1536c:	cmp	r0, r1
   15370:	beq	1568c <__assert_fail@plt+0x3c00>
   15374:	movw	r1, #24952	; 0x6178
   15378:	movt	r1, #25700	; 0x6464
   1537c:	cmp	r0, r1
   15380:	bne	156b4 <__assert_fail@plt+0x3c28>
   15384:	movw	r0, #15123	; 0x3b13
   15388:	movt	r0, #2
   1538c:	b	1572c <__assert_fail@plt+0x3ca0>
   15390:	movw	r0, #15081	; 0x3ae9
   15394:	movt	r0, #2
   15398:	b	1572c <__assert_fail@plt+0x3ca0>
   1539c:	movw	r0, #15530	; 0x3caa
   153a0:	movt	r0, #2
   153a4:	b	1572c <__assert_fail@plt+0x3ca0>
   153a8:	movw	r1, #391	; 0x187
   153ac:	cmp	r0, r1
   153b0:	beq	15724 <__assert_fail@plt+0x3c98>
   153b4:	cmp	r0, #1984	; 0x7c0
   153b8:	bne	156b4 <__assert_fail@plt+0x3c28>
   153bc:	movw	r0, #15328	; 0x3be0
   153c0:	movt	r0, #2
   153c4:	b	1572c <__assert_fail@plt+0x3ca0>
   153c8:	movw	r0, #15664	; 0x3d30
   153cc:	movt	r0, #2
   153d0:	b	1572c <__assert_fail@plt+0x3ca0>
   153d4:	movw	r0, #15697	; 0x3d51
   153d8:	movt	r0, #2
   153dc:	b	1572c <__assert_fail@plt+0x3ca0>
   153e0:	movw	r0, #15600	; 0x3cf0
   153e4:	movt	r0, #2
   153e8:	b	1572c <__assert_fail@plt+0x3ca0>
   153ec:	movw	r0, #15283	; 0x3bb3
   153f0:	movt	r0, #2
   153f4:	b	1572c <__assert_fail@plt+0x3ca0>
   153f8:	movw	r0, #15726	; 0x3d6e
   153fc:	movt	r0, #2
   15400:	b	1572c <__assert_fail@plt+0x3ca0>
   15404:	movw	r0, #15462	; 0x3c66
   15408:	movt	r0, #2
   1540c:	b	1572c <__assert_fail@plt+0x3ca0>
   15410:	movw	r0, #15688	; 0x3d48
   15414:	movt	r0, #2
   15418:	b	1572c <__assert_fail@plt+0x3ca0>
   1541c:	movw	r0, #14956	; 0x3a6c
   15420:	movt	r0, #2
   15424:	b	1572c <__assert_fail@plt+0x3ca0>
   15428:	movw	r0, #15702	; 0x3d56
   1542c:	movt	r0, #2
   15430:	b	1572c <__assert_fail@plt+0x3ca0>
   15434:	movw	r0, #15482	; 0x3c7a
   15438:	movt	r0, #2
   1543c:	b	1572c <__assert_fail@plt+0x3ca0>
   15440:	movw	r0, #15306	; 0x3bca
   15444:	movt	r0, #2
   15448:	b	1572c <__assert_fail@plt+0x3ca0>
   1544c:	movw	r0, #15212	; 0x3b6c
   15450:	movt	r0, #2
   15454:	b	1572c <__assert_fail@plt+0x3ca0>
   15458:	movw	r0, #15105	; 0x3b01
   1545c:	movt	r0, #2
   15460:	b	1572c <__assert_fail@plt+0x3ca0>
   15464:	movw	r0, #15339	; 0x3beb
   15468:	movt	r0, #2
   1546c:	b	1572c <__assert_fail@plt+0x3ca0>
   15470:	movw	r0, #15642	; 0x3d1a
   15474:	movt	r0, #2
   15478:	b	1572c <__assert_fail@plt+0x3ca0>
   1547c:	movw	r0, #15236	; 0x3b84
   15480:	movt	r0, #2
   15484:	b	1572c <__assert_fail@plt+0x3ca0>
   15488:	movw	r0, #15426	; 0x3c42
   1548c:	movt	r0, #2
   15490:	b	1572c <__assert_fail@plt+0x3ca0>
   15494:	movw	r0, #15521	; 0x3ca1
   15498:	movt	r0, #2
   1549c:	b	1572c <__assert_fail@plt+0x3ca0>
   154a0:	movw	r0, #15451	; 0x3c5b
   154a4:	movt	r0, #2
   154a8:	b	1572c <__assert_fail@plt+0x3ca0>
   154ac:	movw	r0, #15498	; 0x3c8a
   154b0:	movt	r0, #2
   154b4:	b	1572c <__assert_fail@plt+0x3ca0>
   154b8:	movw	r0, #15261	; 0x3b9d
   154bc:	movt	r0, #2
   154c0:	b	1572c <__assert_fail@plt+0x3ca0>
   154c4:	movw	r0, #15494	; 0x3c86
   154c8:	movt	r0, #2
   154cc:	b	1572c <__assert_fail@plt+0x3ca0>
   154d0:	movw	r0, #15589	; 0x3ce5
   154d4:	movt	r0, #2
   154d8:	b	1572c <__assert_fail@plt+0x3ca0>
   154dc:	movw	r0, #15355	; 0x3bfb
   154e0:	movt	r0, #2
   154e4:	b	1572c <__assert_fail@plt+0x3ca0>
   154e8:	movw	r0, #15062	; 0x3ad6
   154ec:	movt	r0, #2
   154f0:	b	1572c <__assert_fail@plt+0x3ca0>
   154f4:	movw	r0, #14946	; 0x3a62
   154f8:	movt	r0, #2
   154fc:	b	1572c <__assert_fail@plt+0x3ca0>
   15500:	movw	r0, #15492	; 0x3c84
   15504:	movt	r0, #2
   15508:	b	1572c <__assert_fail@plt+0x3ca0>
   1550c:	movw	r0, #15151	; 0x3b2f
   15510:	movt	r0, #2
   15514:	b	1572c <__assert_fail@plt+0x3ca0>
   15518:	movw	r0, #15419	; 0x3c3b
   1551c:	movt	r0, #2
   15520:	b	1572c <__assert_fail@plt+0x3ca0>
   15524:	movw	r0, #15343	; 0x3bef
   15528:	movt	r0, #2
   1552c:	b	1572c <__assert_fail@plt+0x3ca0>
   15530:	movw	r0, #15678	; 0x3d3e
   15534:	movt	r0, #2
   15538:	b	1572c <__assert_fail@plt+0x3ca0>
   1553c:	movw	r0, #15646	; 0x3d1e
   15540:	movt	r0, #2
   15544:	b	1572c <__assert_fail@plt+0x3ca0>
   15548:	movw	r0, #15144	; 0x3b28
   1554c:	movt	r0, #2
   15550:	b	1572c <__assert_fail@plt+0x3ca0>
   15554:	movw	r0, #15390	; 0x3c1e
   15558:	movt	r0, #2
   1555c:	b	1572c <__assert_fail@plt+0x3ca0>
   15560:	movw	r0, #15180	; 0x3b4c
   15564:	movt	r0, #2
   15568:	b	1572c <__assert_fail@plt+0x3ca0>
   1556c:	movw	r0, #15362	; 0x3c02
   15570:	movt	r0, #2
   15574:	b	1572c <__assert_fail@plt+0x3ca0>
   15578:	movw	r0, #15516	; 0x3c9c
   1557c:	movt	r0, #2
   15580:	b	1572c <__assert_fail@plt+0x3ca0>
   15584:	movw	r0, #15476	; 0x3c74
   15588:	movt	r0, #2
   1558c:	b	1572c <__assert_fail@plt+0x3ca0>
   15590:	movw	r0, #14966	; 0x3a76
   15594:	movt	r0, #2
   15598:	b	1572c <__assert_fail@plt+0x3ca0>
   1559c:	movw	r0, #15162	; 0x3b3a
   155a0:	movt	r0, #2
   155a4:	b	1572c <__assert_fail@plt+0x3ca0>
   155a8:	movw	r0, #15762	; 0x3d92
   155ac:	movt	r0, #2
   155b0:	b	1572c <__assert_fail@plt+0x3ca0>
   155b4:	movw	r0, #15288	; 0x3bb8
   155b8:	movt	r0, #2
   155bc:	b	1572c <__assert_fail@plt+0x3ca0>
   155c0:	movw	r0, #15028	; 0x3ab4
   155c4:	movt	r0, #2
   155c8:	b	1572c <__assert_fail@plt+0x3ca0>
   155cc:	movw	r0, #15271	; 0x3ba7
   155d0:	movt	r0, #2
   155d4:	b	1572c <__assert_fail@plt+0x3ca0>
   155d8:	movw	r0, #15559	; 0x3cc7
   155dc:	movt	r0, #2
   155e0:	b	1572c <__assert_fail@plt+0x3ca0>
   155e4:	movw	r0, #15294	; 0x3bbe
   155e8:	movt	r0, #2
   155ec:	b	1572c <__assert_fail@plt+0x3ca0>
   155f0:	movw	r0, #15690	; 0x3d4a
   155f4:	movt	r0, #2
   155f8:	b	1572c <__assert_fail@plt+0x3ca0>
   155fc:	movw	r0, #15021	; 0x3aad
   15600:	movt	r0, #2
   15604:	b	1572c <__assert_fail@plt+0x3ca0>
   15608:	movw	r0, #15544	; 0x3cb8
   1560c:	movt	r0, #2
   15610:	b	1572c <__assert_fail@plt+0x3ca0>
   15614:	movw	r0, #15333	; 0x3be5
   15618:	movt	r0, #2
   1561c:	b	1572c <__assert_fail@plt+0x3ca0>
   15620:	movw	r0, #15046	; 0x3ac6
   15624:	movt	r0, #2
   15628:	b	1572c <__assert_fail@plt+0x3ca0>
   1562c:	movw	r0, #14992	; 0x3a90
   15630:	movt	r0, #2
   15634:	b	1572c <__assert_fail@plt+0x3ca0>
   15638:	movw	r0, #15276	; 0x3bac
   1563c:	movt	r0, #2
   15640:	b	1572c <__assert_fail@plt+0x3ca0>
   15644:	movw	r0, #15570	; 0x3cd2
   15648:	movt	r0, #2
   1564c:	b	1572c <__assert_fail@plt+0x3ca0>
   15650:	movw	r0, #15709	; 0x3d5d
   15654:	movt	r0, #2
   15658:	b	1572c <__assert_fail@plt+0x3ca0>
   1565c:	movw	r0, #15137	; 0x3b21
   15660:	movt	r0, #2
   15664:	b	1572c <__assert_fail@plt+0x3ca0>
   15668:	movw	r0, #15439	; 0x3c4f
   1566c:	movt	r0, #2
   15670:	b	1572c <__assert_fail@plt+0x3ca0>
   15674:	movw	r0, #15446	; 0x3c56
   15678:	movt	r0, #2
   1567c:	b	1572c <__assert_fail@plt+0x3ca0>
   15680:	movw	r0, #15312	; 0x3bd0
   15684:	movt	r0, #2
   15688:	b	1572c <__assert_fail@plt+0x3ca0>
   1568c:	movw	r0, #15129	; 0x3b19
   15690:	movt	r0, #2
   15694:	b	1572c <__assert_fail@plt+0x3ca0>
   15698:	movw	r1, #53613	; 0xd16d
   1569c:	movt	r1, #303	; 0x12f
   156a0:	cmp	r0, r1
   156a4:	bne	156b4 <__assert_fail@plt+0x3c28>
   156a8:	movw	r0, #15744	; 0x3d80
   156ac:	movt	r0, #2
   156b0:	b	1572c <__assert_fail@plt+0x3ca0>
   156b4:	movw	r3, #15773	; 0x3d9d
   156b8:	str	r0, [sp]
   156bc:	movw	r0, #20976	; 0x51f0
   156c0:	mov	r1, #1
   156c4:	mov	r2, #21
   156c8:	movt	r0, #3
   156cc:	movt	r3, #2
   156d0:	str	r0, [sp, #16]
   156d4:	bl	118f4 <__sprintf_chk@plt>
   156d8:	b	15730 <__assert_fail@plt+0x3ca4>
   156dc:	movw	r0, #15658	; 0x3d2a
   156e0:	movt	r0, #2
   156e4:	b	1572c <__assert_fail@plt+0x3ca0>
   156e8:	movw	r0, #15652	; 0x3d24
   156ec:	movt	r0, #2
   156f0:	b	1572c <__assert_fail@plt+0x3ca0>
   156f4:	movw	r0, #15091	; 0x3af3
   156f8:	movt	r0, #2
   156fc:	b	1572c <__assert_fail@plt+0x3ca0>
   15700:	movw	r0, #15198	; 0x3b5e
   15704:	movt	r0, #2
   15708:	b	1572c <__assert_fail@plt+0x3ca0>
   1570c:	movw	r0, #15367	; 0x3c07
   15710:	movt	r0, #2
   15714:	b	1572c <__assert_fail@plt+0x3ca0>
   15718:	movw	r0, #15373	; 0x3c0d
   1571c:	movt	r0, #2
   15720:	b	1572c <__assert_fail@plt+0x3ca0>
   15724:	movw	r0, #14985	; 0x3a89
   15728:	movt	r0, #2
   1572c:	str	r0, [sp, #16]
   15730:	add	r8, sl, r6
   15734:	add	r4, sl, #1
   15738:	cmp	r6, #2
   1573c:	str	r6, [sp, #24]
   15740:	blt	1579c <__assert_fail@plt+0x3d10>
   15744:	movw	r7, #16201	; 0x3f49
   15748:	movw	r9, #16839	; 0x41c7
   1574c:	mov	r6, r4
   15750:	movt	r7, #2
   15754:	movt	r9, #2
   15758:	ldrb	r5, [r6]
   1575c:	mov	r0, r7
   15760:	mov	r2, #8
   15764:	mov	r1, r5
   15768:	bl	11948 <memchr@plt>
   1576c:	cmp	r0, #0
   15770:	beq	157a0 <__assert_fail@plt+0x3d14>
   15774:	mov	r0, r9
   15778:	mov	r1, r5
   1577c:	mov	r2, #2
   15780:	bl	11948 <memchr@plt>
   15784:	cmp	r0, #0
   15788:	add	r6, r6, #1
   1578c:	strbne	r5, [r4], #1
   15790:	cmp	r6, r8
   15794:	bcc	15758 <__assert_fail@plt+0x3ccc>
   15798:	b	157a0 <__assert_fail@plt+0x3d14>
   1579c:	mov	r6, r4
   157a0:	cmp	r6, r8
   157a4:	bcs	158a4 <__assert_fail@plt+0x3e18>
   157a8:	ldr	r0, [sp, #24]
   157ac:	sub	r0, r0, r6
   157b0:	add	r9, sl, r0
   157b4:	cmp	r9, #16
   157b8:	bcc	15894 <__assert_fail@plt+0x3e08>
   157bc:	cmp	r4, r8
   157c0:	addcc	r1, r4, r9
   157c4:	cmpcc	r6, r1
   157c8:	bcc	15894 <__assert_fail@plt+0x3e08>
   157cc:	bic	r0, r9, #15
   157d0:	mov	r2, #1
   157d4:	mov	r3, #0
   157d8:	str	sl, [sp, #20]
   157dc:	sub	r5, r0, #16
   157e0:	str	r0, [sp, #12]
   157e4:	add	r7, r2, r5, lsr #4
   157e8:	cmp	r5, #48	; 0x30
   157ec:	and	r0, r7, #3
   157f0:	str	r0, [sp, #24]
   157f4:	bcc	15854 <__assert_fail@plt+0x3dc8>
   157f8:	ldr	r0, [sp, #24]
   157fc:	mov	r3, #0
   15800:	mov	sl, #48	; 0x30
   15804:	sub	r7, r7, r0
   15808:	add	r2, r6, r3
   1580c:	add	r0, r4, r3
   15810:	subs	r7, r7, #4
   15814:	add	r3, r3, #64	; 0x40
   15818:	mov	lr, r2
   1581c:	mov	r5, r0
   15820:	add	ip, r2, #16
   15824:	add	r1, r0, #16
   15828:	add	r0, r0, #32
   1582c:	vld1.8	{d16-d17}, [lr], sl
   15830:	vst1.8	{d16-d17}, [r5], sl
   15834:	vld1.8	{d16-d17}, [ip]
   15838:	vst1.8	{d16-d17}, [r1]
   1583c:	add	r1, r2, #32
   15840:	vld1.8	{d16-d17}, [r1]
   15844:	vst1.8	{d16-d17}, [r0]
   15848:	vld1.8	{d16-d17}, [lr]
   1584c:	vst1.8	{d16-d17}, [r5]
   15850:	bne	15808 <__assert_fail@plt+0x3d7c>
   15854:	ldr	r0, [sp, #24]
   15858:	cmp	r0, #0
   1585c:	beq	1587c <__assert_fail@plt+0x3df0>
   15860:	add	r7, r4, r3
   15864:	add	r3, r6, r3
   15868:	rsb	r2, r0, #0
   1586c:	vld1.8	{d16-d17}, [r3]!
   15870:	adds	r2, r2, #1
   15874:	vst1.8	{d16-d17}, [r7]!
   15878:	bcc	1586c <__assert_fail@plt+0x3de0>
   1587c:	ldr	r0, [sp, #12]
   15880:	ldr	sl, [sp, #20]
   15884:	add	r4, r4, r0
   15888:	cmp	r0, r9
   1588c:	beq	158a4 <__assert_fail@plt+0x3e18>
   15890:	add	r6, r6, r0
   15894:	ldrb	r0, [r6], #1
   15898:	cmp	r8, r6
   1589c:	strb	r0, [r4], #1
   158a0:	bne	15894 <__assert_fail@plt+0x3e08>
   158a4:	ldr	r2, [sp, #16]
   158a8:	mov	r0, #115	; 0x73
   158ac:	mov	r1, sl
   158b0:	strh	r0, [r4]
   158b4:	mov	r0, #1
   158b8:	bl	11924 <__printf_chk@plt>
   158bc:	mov	r0, #0
   158c0:	sub	sp, fp, #28
   158c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158c8:	mov	r1, #63	; 0x3f
   158cc:	bl	11990 <__overflow@plt>
   158d0:	mov	r0, #0
   158d4:	sub	sp, fp, #28
   158d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158e0:	add	fp, sp, #28
   158e4:	sub	sp, sp, #36	; 0x24
   158e8:	mov	r8, r1
   158ec:	sub	r1, r3, #65	; 0x41
   158f0:	cmp	r1, #57	; 0x39
   158f4:	bhi	15c08 <__assert_fail@plt+0x417c>
   158f8:	mov	r9, r0
   158fc:	ldr	r0, [fp, #16]
   15900:	ldr	ip, [fp, #12]
   15904:	ldm	r0, {sl, lr}
   15908:	ldr	r3, [r0, #8]
   1590c:	add	r7, pc, #16
   15910:	add	r6, sl, #48	; 0x30
   15914:	add	r0, sl, #32
   15918:	add	r5, sl, #72	; 0x48
   1591c:	add	r4, sl, #80	; 0x50
   15920:	ldr	pc, [r7, r1, lsl #2]
   15924:	andeq	r5, r1, ip, lsl #20
   15928:	andeq	r5, r1, r0, lsr #21
   1592c:	andeq	r5, r1, r0, lsl fp
   15930:	andeq	r5, r1, ip, lsl #23
   15934:	andeq	r5, r1, r8, lsl #24
   15938:	andeq	r5, r1, r4, asr #24
   1593c:	andeq	r5, r1, r4, asr #25
   15940:	andeq	r5, r1, r8, lsl #24
   15944:	andeq	r5, r1, r8, lsl #24
   15948:	andeq	r5, r1, r8, lsl #24
   1594c:	andeq	r5, r1, r8, lsl #24
   15950:	andeq	r5, r1, r8, lsl #24
   15954:	andeq	r5, r1, r8, lsl #24
   15958:	ldrdeq	r5, [r1], -ip
   1595c:	andeq	r5, r1, r8, lsl #24
   15960:	andeq	r5, r1, r8, lsl #24
   15964:	andeq	r5, r1, r8, lsl #24
   15968:	andeq	r5, r1, r0, ror sp
   1596c:	andeq	r5, r1, r8, lsl #24
   15970:	andeq	r5, r1, ip, ror #27
   15974:	andeq	r5, r1, r4, ror lr
   15978:	andeq	r5, r1, r8, lsl #24
   1597c:	andeq	r5, r1, ip, lsl #29
   15980:			; <UNDEFINED> instruction: 0x00015eb8
   15984:	andeq	r5, r1, r0, asr #29
   15988:	andeq	r5, r1, r8, asr #29
   1598c:	andeq	r5, r1, r8, lsl #24
   15990:	andeq	r5, r1, r8, lsl #24
   15994:	andeq	r5, r1, r8, lsl #24
   15998:	andeq	r5, r1, r8, lsl #24
   1599c:	andeq	r5, r1, r8, lsl #24
   159a0:	andeq	r5, r1, r8, lsl #24
   159a4:	andeq	r5, r1, r8, ror #29
   159a8:	andeq	r5, r1, r0, ror #30
   159ac:	andeq	r5, r1, r8, lsl #24
   159b0:	andeq	r5, r1, r0, ror #31
   159b4:	andeq	r5, r1, r8, lsl #24
   159b8:	andeq	r6, r1, r0, ror r0
   159bc:	andeq	r6, r1, ip, ror #1
   159c0:	andeq	r6, r1, r8, ror #2
   159c4:	andeq	r6, r1, r4, ror #3
   159c8:	andeq	r5, r1, r8, lsl #24
   159cc:	andeq	r5, r1, r8, lsl #24
   159d0:	andeq	r5, r1, r8, lsl #24
   159d4:	andeq	r6, r1, r4, ror #4
   159d8:	andeq	r6, r1, r4, asr #5
   159dc:	andeq	r6, r1, r4, lsr r3
   159e0:	andeq	r5, r1, r8, lsl #24
   159e4:	andeq	r5, r1, r8, lsl #24
   159e8:	andeq	r6, r1, r0, ror #7
   159ec:	andeq	r6, r1, r0, ror r4
   159f0:	andeq	r6, r1, ip, ror #9
   159f4:	andeq	r6, r1, r4, ror r5
   159f8:	andeq	r5, r1, r8, lsl #24
   159fc:	strdeq	r6, [r1], -r0
   15a00:	andeq	r6, r1, r4, ror r6
   15a04:	andeq	r6, r1, ip, ror #13
   15a08:	andeq	r6, r1, r4, ror #14
   15a0c:	movw	r4, #21000	; 0x5208
   15a10:	mov	r0, sl
   15a14:	movt	r4, #3
   15a18:	add	r1, r4, #24
   15a1c:	str	r1, [sp, #20]
   15a20:	bl	1aa00 <__assert_fail@plt+0x8f74>
   15a24:	mov	r0, #0
   15a28:	str	r9, [sp, #28]
   15a2c:	strb	r0, [r4, #34]	; 0x22
   15a30:	mov	r0, r8
   15a34:	add	r8, r9, r8
   15a38:	add	r4, r9, #1
   15a3c:	mov	r7, r0
   15a40:	cmp	r0, #2
   15a44:	blt	167e0 <__assert_fail@plt+0x4d54>
   15a48:	movw	sl, #16201	; 0x3f49
   15a4c:	movw	r9, #16839	; 0x41c7
   15a50:	mov	r5, r4
   15a54:	movt	sl, #2
   15a58:	movt	r9, #2
   15a5c:	ldrb	r6, [r5]
   15a60:	mov	r0, sl
   15a64:	mov	r2, #8
   15a68:	mov	r1, r6
   15a6c:	bl	11948 <memchr@plt>
   15a70:	cmp	r0, #0
   15a74:	beq	167e4 <__assert_fail@plt+0x4d58>
   15a78:	mov	r0, r9
   15a7c:	mov	r1, r6
   15a80:	mov	r2, #2
   15a84:	bl	11948 <memchr@plt>
   15a88:	cmp	r0, #0
   15a8c:	add	r5, r5, #1
   15a90:	strbne	r6, [r4], #1
   15a94:	cmp	r5, r8
   15a98:	bcc	15a5c <__assert_fail@plt+0x3fd0>
   15a9c:	b	167e4 <__assert_fail@plt+0x4d58>
   15aa0:	add	sl, r9, r8
   15aa4:	add	r4, r9, #1
   15aa8:	mov	r6, r8
   15aac:	cmp	r8, #2
   15ab0:	str	r9, [sp, #28]
   15ab4:	blt	168ec <__assert_fail@plt+0x4e60>
   15ab8:	movw	r9, #16201	; 0x3f49
   15abc:	movw	r8, #14722	; 0x3982
   15ac0:	mov	r5, r4
   15ac4:	movt	r9, #2
   15ac8:	movt	r8, #2
   15acc:	ldrb	r7, [r5]
   15ad0:	mov	r0, r9
   15ad4:	mov	r2, #8
   15ad8:	mov	r1, r7
   15adc:	bl	11948 <memchr@plt>
   15ae0:	cmp	r0, #0
   15ae4:	beq	168f0 <__assert_fail@plt+0x4e64>
   15ae8:	mov	r0, r8
   15aec:	mov	r1, r7
   15af0:	mov	r2, #4
   15af4:	bl	11948 <memchr@plt>
   15af8:	cmp	r0, #0
   15afc:	add	r5, r5, #1
   15b00:	strbne	r7, [r4], #1
   15b04:	cmp	r5, sl
   15b08:	bcc	15acc <__assert_fail@plt+0x4040>
   15b0c:	b	168f0 <__assert_fail@plt+0x4e64>
   15b10:	movw	r0, #21000	; 0x5208
   15b14:	add	r1, sp, #32
   15b18:	mov	r7, ip
   15b1c:	movt	r0, #3
   15b20:	ldrb	r0, [r0, #1]
   15b24:	cmp	r0, #1
   15b28:	bne	169f4 <__assert_fail@plt+0x4f68>
   15b2c:	mov	r0, ip
   15b30:	bl	1f4ec <__assert_fail@plt+0xda60>
   15b34:	cmp	r0, #0
   15b38:	bpl	16a04 <__assert_fail@plt+0x4f78>
   15b3c:	bl	118e8 <__errno_location@plt>
   15b40:	movw	r1, #14874	; 0x3a1a
   15b44:	ldr	r4, [r0]
   15b48:	mov	r0, #0
   15b4c:	mov	r2, #5
   15b50:	mov	r5, #0
   15b54:	movt	r1, #2
   15b58:	bl	11720 <dcgettext@plt>
   15b5c:	mov	r6, r0
   15b60:	mov	r0, #4
   15b64:	mov	r1, r7
   15b68:	bl	1ef0c <__assert_fail@plt+0xd480>
   15b6c:	mov	r3, r0
   15b70:	mov	r0, #0
   15b74:	mov	r1, r4
   15b78:	mov	r2, r6
   15b7c:	bl	117d4 <error@plt>
   15b80:	mov	r7, #1
   15b84:	str	r5, [sp, #32]
   15b88:	b	16a0c <__assert_fail@plt+0x4f80>
   15b8c:	str	r9, [sp, #28]
   15b90:	add	r6, r9, r8
   15b94:	add	r9, r9, #1
   15b98:	cmp	r8, #2
   15b9c:	ldr	r1, [sl]
   15ba0:	ldr	r0, [sl, #4]
   15ba4:	str	r1, [sp, #16]
   15ba8:	str	r0, [sp, #20]
   15bac:	blt	16a50 <__assert_fail@plt+0x4fc4>
   15bb0:	movw	r4, #16201	; 0x3f49
   15bb4:	movw	sl, #14730	; 0x398a
   15bb8:	mov	r5, r9
   15bbc:	movt	r4, #2
   15bc0:	movt	sl, #2
   15bc4:	ldrb	r7, [r5]
   15bc8:	mov	r0, r4
   15bcc:	mov	r2, #8
   15bd0:	mov	r1, r7
   15bd4:	bl	11948 <memchr@plt>
   15bd8:	cmp	r0, #0
   15bdc:	beq	16a54 <__assert_fail@plt+0x4fc8>
   15be0:	mov	r0, sl
   15be4:	mov	r1, r7
   15be8:	mov	r2, #4
   15bec:	bl	11948 <memchr@plt>
   15bf0:	cmp	r0, #0
   15bf4:	add	r5, r5, #1
   15bf8:	strbne	r7, [r9], #1
   15bfc:	cmp	r5, r6
   15c00:	bcc	15bc4 <__assert_fail@plt+0x4138>
   15c04:	b	16a54 <__assert_fail@plt+0x4fc8>
   15c08:	movw	r0, #20964	; 0x51e4
   15c0c:	movt	r0, #3
   15c10:	ldr	r0, [r0]
   15c14:	ldr	r1, [r0, #20]
   15c18:	ldr	r2, [r0, #24]
   15c1c:	cmp	r1, r2
   15c20:	bcs	192c8 <__assert_fail@plt+0x783c>
   15c24:	add	r2, r1, #1
   15c28:	str	r2, [r0, #20]
   15c2c:	mov	r0, #63	; 0x3f
   15c30:	strb	r0, [r1]
   15c34:	mov	r7, #0
   15c38:	mov	r0, r7
   15c3c:	sub	sp, fp, #28
   15c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c44:	mov	r0, sl
   15c48:	mov	r5, r8
   15c4c:	add	r8, r9, r8
   15c50:	bl	1a7ac <__assert_fail@plt+0x8d20>
   15c54:	add	r7, r9, #1
   15c58:	mov	r4, r5
   15c5c:	cmp	r5, #2
   15c60:	str	r0, [sp, #20]
   15c64:	str	r9, [sp, #28]
   15c68:	blt	16b5c <__assert_fail@plt+0x50d0>
   15c6c:	movw	sl, #16201	; 0x3f49
   15c70:	movw	r9, #16839	; 0x41c7
   15c74:	mov	r5, r7
   15c78:	movt	sl, #2
   15c7c:	movt	r9, #2
   15c80:	ldrb	r6, [r5]
   15c84:	mov	r0, sl
   15c88:	mov	r2, #8
   15c8c:	mov	r1, r6
   15c90:	bl	11948 <memchr@plt>
   15c94:	cmp	r0, #0
   15c98:	beq	16b60 <__assert_fail@plt+0x50d4>
   15c9c:	mov	r0, r9
   15ca0:	mov	r1, r6
   15ca4:	mov	r2, #2
   15ca8:	bl	11948 <memchr@plt>
   15cac:	cmp	r0, #0
   15cb0:	add	r5, r5, #1
   15cb4:	strbne	r6, [r7], #1
   15cb8:	cmp	r5, r8
   15cbc:	bcc	15c80 <__assert_fail@plt+0x41f4>
   15cc0:	b	16b60 <__assert_fail@plt+0x50d4>
   15cc4:	ldr	r0, [sl, #28]
   15cc8:	bl	11a74 <getgrgid@plt>
   15ccc:	cmp	r0, #0
   15cd0:	beq	17e5c <__assert_fail@plt+0x63d0>
   15cd4:	ldr	r0, [r0]
   15cd8:	b	17e64 <__assert_fail@plt+0x63d8>
   15cdc:	mov	r0, #0
   15ce0:	str	r6, [sp, #12]
   15ce4:	mov	r4, ip
   15ce8:	bl	1d570 <__assert_fail@plt+0xbae4>
   15cec:	mov	r1, r4
   15cf0:	bl	1ef0c <__assert_fail@plt+0xd480>
   15cf4:	add	r5, r9, #1
   15cf8:	add	r7, r9, r8
   15cfc:	str	r9, [sp, #28]
   15d00:	cmp	r8, #2
   15d04:	str	r0, [sp, #16]
   15d08:	mov	r6, r5
   15d0c:	mov	r9, r5
   15d10:	blt	18340 <__assert_fail@plt+0x68b4>
   15d14:	mov	r9, r5
   15d18:	mov	r6, r5
   15d1c:	mov	r4, r8
   15d20:	ldrb	r8, [r6]
   15d24:	movw	r0, #16201	; 0x3f49
   15d28:	mov	r2, #8
   15d2c:	movt	r0, #2
   15d30:	mov	r1, r8
   15d34:	bl	11948 <memchr@plt>
   15d38:	cmp	r0, #0
   15d3c:	beq	1833c <__assert_fail@plt+0x68b0>
   15d40:	movw	r0, #16839	; 0x41c7
   15d44:	mov	r1, r8
   15d48:	mov	r2, #2
   15d4c:	movt	r0, #2
   15d50:	bl	11948 <memchr@plt>
   15d54:	cmp	r0, #0
   15d58:	add	r6, r6, #1
   15d5c:	strbne	r8, [r9], #1
   15d60:	mov	r8, r4
   15d64:	cmp	r6, r7
   15d68:	bcc	15d1c <__assert_fail@plt+0x4290>
   15d6c:	b	18340 <__assert_fail@plt+0x68b4>
   15d70:	str	r9, [sp, #28]
   15d74:	add	r6, r9, r8
   15d78:	add	r9, r9, #1
   15d7c:	cmp	r8, #2
   15d80:	ldr	r1, [r0]
   15d84:	ldr	r0, [r0, #4]
   15d88:	str	r1, [sp, #16]
   15d8c:	str	r0, [sp, #20]
   15d90:	blt	16c54 <__assert_fail@plt+0x51c8>
   15d94:	movw	r4, #16201	; 0x3f49
   15d98:	movw	sl, #14730	; 0x398a
   15d9c:	mov	r5, r9
   15da0:	movt	r4, #2
   15da4:	movt	sl, #2
   15da8:	ldrb	r7, [r5]
   15dac:	mov	r0, r4
   15db0:	mov	r2, #8
   15db4:	mov	r1, r7
   15db8:	bl	11948 <memchr@plt>
   15dbc:	cmp	r0, #0
   15dc0:	beq	16c58 <__assert_fail@plt+0x51cc>
   15dc4:	mov	r0, sl
   15dc8:	mov	r1, r7
   15dcc:	mov	r2, #4
   15dd0:	bl	11948 <memchr@plt>
   15dd4:	cmp	r0, #0
   15dd8:	add	r5, r5, #1
   15ddc:	strbne	r7, [r9], #1
   15de0:	cmp	r5, r6
   15de4:	bcc	15da8 <__assert_fail@plt+0x431c>
   15de8:	b	16c58 <__assert_fail@plt+0x51cc>
   15dec:	ldrd	r0, [r0]
   15df0:	mov	r3, r8
   15df4:	add	r8, r9, r8
   15df8:	add	r4, r9, #1
   15dfc:	str	r9, [sp, #28]
   15e00:	mov	r7, r3
   15e04:	cmp	r3, #2
   15e08:	lsr	r2, r0, #12
   15e0c:	orr	r1, r2, r1, lsl #20
   15e10:	bfi	r1, r0, #0, #8
   15e14:	str	r1, [sp, #20]
   15e18:	blt	16d4c <__assert_fail@plt+0x52c0>
   15e1c:	movw	sl, #16201	; 0x3f49
   15e20:	movw	r9, #14730	; 0x398a
   15e24:	mov	r5, r4
   15e28:	movt	sl, #2
   15e2c:	movt	r9, #2
   15e30:	ldrb	r6, [r5]
   15e34:	mov	r0, sl
   15e38:	mov	r2, #8
   15e3c:	mov	r1, r6
   15e40:	bl	11948 <memchr@plt>
   15e44:	cmp	r0, #0
   15e48:	beq	16d50 <__assert_fail@plt+0x52c4>
   15e4c:	mov	r0, r9
   15e50:	mov	r1, r6
   15e54:	mov	r2, #4
   15e58:	bl	11948 <memchr@plt>
   15e5c:	cmp	r0, #0
   15e60:	add	r5, r5, #1
   15e64:	strbne	r6, [r4], #1
   15e68:	cmp	r5, r8
   15e6c:	bcc	15e30 <__assert_fail@plt+0x43a4>
   15e70:	b	16d50 <__assert_fail@plt+0x52c4>
   15e74:	ldr	r0, [sl, #24]
   15e78:	bl	116cc <getpwuid@plt>
   15e7c:	cmp	r0, #0
   15e80:	beq	17fe8 <__assert_fail@plt+0x655c>
   15e84:	ldr	r0, [r0]
   15e88:	b	17ff0 <__assert_fail@plt+0x6564>
   15e8c:	mov	r7, #0
   15e90:	cmn	r3, #1
   15e94:	mov	r0, r9
   15e98:	mov	r1, r8
   15e9c:	movle	lr, r7
   15ea0:	movle	r3, r7
   15ea4:	mov	r2, lr
   15ea8:	bl	19390 <__assert_fail@plt+0x7904>
   15eac:	mov	r0, r7
   15eb0:	sub	sp, fp, #28
   15eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15eb8:	ldrd	r2, [r5]
   15ebc:	b	15ecc <__assert_fail@plt+0x4440>
   15ec0:	ldrd	r2, [r4]
   15ec4:	b	15ecc <__assert_fail@plt+0x4440>
   15ec8:	ldrd	r2, [sl, #88]	; 0x58
   15ecc:	mov	r0, r9
   15ed0:	mov	r1, r8
   15ed4:	bl	19390 <__assert_fail@plt+0x7904>
   15ed8:	mov	r7, #0
   15edc:	mov	r0, r7
   15ee0:	sub	sp, fp, #28
   15ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ee8:	ldr	sl, [sl, #16]
   15eec:	mov	r0, r8
   15ef0:	add	r8, r9, r8
   15ef4:	add	r4, r9, #1
   15ef8:	str	r9, [sp, #28]
   15efc:	cmp	r0, #2
   15f00:	str	r0, [sp, #24]
   15f04:	blt	16e58 <__assert_fail@plt+0x53cc>
   15f08:	movw	r7, #16201	; 0x3f49
   15f0c:	movw	r9, #14730	; 0x398a
   15f10:	mov	r5, r4
   15f14:	movt	r7, #2
   15f18:	movt	r9, #2
   15f1c:	ldrb	r6, [r5]
   15f20:	mov	r0, r7
   15f24:	mov	r2, #8
   15f28:	mov	r1, r6
   15f2c:	bl	11948 <memchr@plt>
   15f30:	cmp	r0, #0
   15f34:	beq	16e5c <__assert_fail@plt+0x53d0>
   15f38:	mov	r0, r9
   15f3c:	mov	r1, r6
   15f40:	mov	r2, #4
   15f44:	bl	11948 <memchr@plt>
   15f48:	cmp	r0, #0
   15f4c:	add	r5, r5, #1
   15f50:	strbne	r6, [r4], #1
   15f54:	cmp	r5, r8
   15f58:	bcc	15f1c <__assert_fail@plt+0x4490>
   15f5c:	b	16e5c <__assert_fail@plt+0x53d0>
   15f60:	add	r0, sl, #64	; 0x40
   15f64:	str	r9, [sp, #28]
   15f68:	add	r6, r9, r8
   15f6c:	add	r9, r9, #1
   15f70:	cmp	r8, #2
   15f74:	ldr	r1, [r0]
   15f78:	ldr	r0, [r0, #4]
   15f7c:	str	r1, [sp, #16]
   15f80:	str	r0, [sp, #20]
   15f84:	blt	16f70 <__assert_fail@plt+0x54e4>
   15f88:	movw	r4, #16201	; 0x3f49
   15f8c:	movw	sl, #14722	; 0x3982
   15f90:	mov	r5, r9
   15f94:	movt	r4, #2
   15f98:	movt	sl, #2
   15f9c:	ldrb	r7, [r5]
   15fa0:	mov	r0, r4
   15fa4:	mov	r2, #8
   15fa8:	mov	r1, r7
   15fac:	bl	11948 <memchr@plt>
   15fb0:	cmp	r0, #0
   15fb4:	beq	16f74 <__assert_fail@plt+0x54e8>
   15fb8:	mov	r0, sl
   15fbc:	mov	r1, r7
   15fc0:	mov	r2, #4
   15fc4:	bl	11948 <memchr@plt>
   15fc8:	cmp	r0, #0
   15fcc:	add	r5, r5, #1
   15fd0:	strbne	r7, [r9], #1
   15fd4:	cmp	r5, r6
   15fd8:	bcc	15f9c <__assert_fail@plt+0x4510>
   15fdc:	b	16f74 <__assert_fail@plt+0x54e8>
   15fe0:	cmp	r2, #72	; 0x48
   15fe4:	str	r9, [sp, #28]
   15fe8:	bne	1707c <__assert_fail@plt+0x55f0>
   15fec:	ldrd	r0, [sl]
   15ff0:	mov	r2, r8
   15ff4:	add	r8, r9, r8
   15ff8:	add	r7, r9, #1
   15ffc:	mov	r4, r2
   16000:	cmp	r2, #2
   16004:	lsr	r1, r1, #12
   16008:	lsr	r0, r0, #8
   1600c:	bfi	r0, r1, #12, #20
   16010:	str	r0, [sp, #20]
   16014:	blt	1852c <__assert_fail@plt+0x6aa0>
   16018:	movw	sl, #16201	; 0x3f49
   1601c:	movw	r9, #14722	; 0x3982
   16020:	mov	r5, r7
   16024:	movt	sl, #2
   16028:	movt	r9, #2
   1602c:	ldrb	r6, [r5]
   16030:	mov	r0, sl
   16034:	mov	r2, #8
   16038:	mov	r1, r6
   1603c:	bl	11948 <memchr@plt>
   16040:	cmp	r0, #0
   16044:	beq	18530 <__assert_fail@plt+0x6aa4>
   16048:	mov	r0, r9
   1604c:	mov	r1, r6
   16050:	mov	r2, #4
   16054:	bl	11948 <memchr@plt>
   16058:	cmp	r0, #0
   1605c:	add	r5, r5, #1
   16060:	strbne	r6, [r7], #1
   16064:	cmp	r5, r8
   16068:	bcc	1602c <__assert_fail@plt+0x45a0>
   1606c:	b	18530 <__assert_fail@plt+0x6aa4>
   16070:	ldr	r1, [sl, #16]
   16074:	mov	r0, r8
   16078:	add	r8, r9, r8
   1607c:	add	r4, r9, #1
   16080:	str	r9, [sp, #28]
   16084:	mov	sl, r0
   16088:	cmp	r0, #2
   1608c:	str	r1, [sp, #20]
   16090:	blt	1710c <__assert_fail@plt+0x5680>
   16094:	movw	r7, #16201	; 0x3f49
   16098:	movw	r9, #14730	; 0x398a
   1609c:	mov	r5, r4
   160a0:	movt	r7, #2
   160a4:	movt	r9, #2
   160a8:	ldrb	r6, [r5]
   160ac:	mov	r0, r7
   160b0:	mov	r2, #8
   160b4:	mov	r1, r6
   160b8:	bl	11948 <memchr@plt>
   160bc:	cmp	r0, #0
   160c0:	beq	17110 <__assert_fail@plt+0x5684>
   160c4:	mov	r0, r9
   160c8:	mov	r1, r6
   160cc:	mov	r2, #4
   160d0:	bl	11948 <memchr@plt>
   160d4:	cmp	r0, #0
   160d8:	add	r5, r5, #1
   160dc:	strbne	r6, [r4], #1
   160e0:	cmp	r5, r8
   160e4:	bcc	160a8 <__assert_fail@plt+0x461c>
   160e8:	b	17110 <__assert_fail@plt+0x5684>
   160ec:	ldr	r1, [sl, #28]
   160f0:	mov	r0, r8
   160f4:	add	r8, r9, r8
   160f8:	add	r4, r9, #1
   160fc:	str	r9, [sp, #28]
   16100:	mov	sl, r0
   16104:	cmp	r0, #2
   16108:	str	r1, [sp, #20]
   1610c:	blt	17218 <__assert_fail@plt+0x578c>
   16110:	movw	r7, #16201	; 0x3f49
   16114:	movw	r9, #14722	; 0x3982
   16118:	mov	r5, r4
   1611c:	movt	r7, #2
   16120:	movt	r9, #2
   16124:	ldrb	r6, [r5]
   16128:	mov	r0, r7
   1612c:	mov	r2, #8
   16130:	mov	r1, r6
   16134:	bl	11948 <memchr@plt>
   16138:	cmp	r0, #0
   1613c:	beq	1721c <__assert_fail@plt+0x5790>
   16140:	mov	r0, r9
   16144:	mov	r1, r6
   16148:	mov	r2, #4
   1614c:	bl	11948 <memchr@plt>
   16150:	cmp	r0, #0
   16154:	add	r5, r5, #1
   16158:	strbne	r6, [r4], #1
   1615c:	cmp	r5, r8
   16160:	bcc	16124 <__assert_fail@plt+0x4698>
   16164:	b	1721c <__assert_fail@plt+0x5790>
   16168:	ldr	r1, [sl, #20]
   1616c:	mov	r0, r8
   16170:	add	r8, r9, r8
   16174:	add	r4, r9, #1
   16178:	str	r9, [sp, #28]
   1617c:	mov	sl, r0
   16180:	cmp	r0, #2
   16184:	str	r1, [sp, #20]
   16188:	blt	17324 <__assert_fail@plt+0x5898>
   1618c:	movw	r7, #16201	; 0x3f49
   16190:	movw	r9, #14722	; 0x3982
   16194:	mov	r5, r4
   16198:	movt	r7, #2
   1619c:	movt	r9, #2
   161a0:	ldrb	r6, [r5]
   161a4:	mov	r0, r7
   161a8:	mov	r2, #8
   161ac:	mov	r1, r6
   161b0:	bl	11948 <memchr@plt>
   161b4:	cmp	r0, #0
   161b8:	beq	17328 <__assert_fail@plt+0x589c>
   161bc:	mov	r0, r9
   161c0:	mov	r1, r6
   161c4:	mov	r2, #4
   161c8:	bl	11948 <memchr@plt>
   161cc:	cmp	r0, #0
   161d0:	add	r5, r5, #1
   161d4:	strbne	r6, [r4], #1
   161d8:	cmp	r5, r8
   161dc:	bcc	161a0 <__assert_fail@plt+0x4714>
   161e0:	b	17328 <__assert_fail@plt+0x589c>
   161e4:	add	r0, sl, #96	; 0x60
   161e8:	str	r9, [sp, #28]
   161ec:	add	r6, r9, r8
   161f0:	add	r9, r9, #1
   161f4:	cmp	r8, #2
   161f8:	ldr	r1, [r0]
   161fc:	ldr	r0, [r0, #4]
   16200:	str	r1, [sp, #16]
   16204:	str	r0, [sp, #20]
   16208:	blt	17430 <__assert_fail@plt+0x59a4>
   1620c:	movw	r4, #16201	; 0x3f49
   16210:	movw	sl, #14722	; 0x3982
   16214:	mov	r5, r9
   16218:	movt	r4, #2
   1621c:	movt	sl, #2
   16220:	ldrb	r7, [r5]
   16224:	mov	r0, r4
   16228:	mov	r2, #8
   1622c:	mov	r1, r7
   16230:	bl	11948 <memchr@plt>
   16234:	cmp	r0, #0
   16238:	beq	17434 <__assert_fail@plt+0x59a8>
   1623c:	mov	r0, sl
   16240:	mov	r1, r7
   16244:	mov	r2, #4
   16248:	bl	11948 <memchr@plt>
   1624c:	cmp	r0, #0
   16250:	add	r5, r5, #1
   16254:	strbne	r7, [r9], #1
   16258:	cmp	r5, r6
   1625c:	bcc	16220 <__assert_fail@plt+0x4794>
   16260:	b	17434 <__assert_fail@plt+0x59a8>
   16264:	movw	r0, #21000	; 0x5208
   16268:	movt	r0, #3
   1626c:	ldrb	r0, [r0, #1]
   16270:	cmp	r0, #0
   16274:	bne	16288 <__assert_fail@plt+0x47fc>
   16278:	ldr	r0, [sl, #16]
   1627c:	and	r0, r0, #61440	; 0xf000
   16280:	cmp	r0, #40960	; 0xa000
   16284:	beq	17e34 <__assert_fail@plt+0x63a8>
   16288:	mov	r0, ip
   1628c:	mov	r5, ip
   16290:	bl	119fc <canonicalize_file_name@plt>
   16294:	cmp	r0, #0
   16298:	beq	182f0 <__assert_fail@plt+0x6864>
   1629c:	mov	r6, r0
   162a0:	bl	19a50 <__assert_fail@plt+0x7fc4>
   162a4:	mov	r4, r0
   162a8:	mov	r0, r6
   162ac:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   162b0:	cmp	r4, #0
   162b4:	mov	ip, r5
   162b8:	beq	17e34 <__assert_fail@plt+0x63a8>
   162bc:	mov	r5, #0
   162c0:	b	17e54 <__assert_fail@plt+0x63c8>
   162c4:	add	sl, r9, r8
   162c8:	add	r4, r9, #1
   162cc:	mov	r6, r8
   162d0:	cmp	r8, #2
   162d4:	str	r9, [sp, #28]
   162d8:	blt	17528 <__assert_fail@plt+0x5a9c>
   162dc:	movw	r9, #16201	; 0x3f49
   162e0:	movw	r8, #16839	; 0x41c7
   162e4:	mov	r5, r4
   162e8:	movt	r9, #2
   162ec:	movt	r8, #2
   162f0:	ldrb	r7, [r5]
   162f4:	mov	r0, r9
   162f8:	mov	r2, #8
   162fc:	mov	r1, r7
   16300:	bl	11948 <memchr@plt>
   16304:	cmp	r0, #0
   16308:	beq	1752c <__assert_fail@plt+0x5aa0>
   1630c:	mov	r0, r8
   16310:	mov	r1, r7
   16314:	mov	r2, #2
   16318:	bl	11948 <memchr@plt>
   1631c:	cmp	r0, #0
   16320:	add	r5, r5, #1
   16324:	strbne	r7, [r4], #1
   16328:	cmp	r5, sl
   1632c:	bcc	162f0 <__assert_fail@plt+0x4864>
   16330:	b	1752c <__assert_fail@plt+0x5aa0>
   16334:	ldr	r0, [sl, #56]	; 0x38
   16338:	mov	r1, #0
   1633c:	add	r6, r9, r8
   16340:	str	r9, [sp, #28]
   16344:	subs	r2, r0, #536870913	; 0x20000001
   16348:	mov	sl, r0
   1634c:	rscs	r2, r1, r0, asr #31
   16350:	mov	r2, #0
   16354:	movwcc	r2, #1
   16358:	rsbs	r3, r0, #0
   1635c:	sbcs	r3, r1, r0, asr #31
   16360:	movwlt	r1, #1
   16364:	ands	r1, r1, r2
   16368:	asrne	r1, r0, #31
   1636c:	mov	r0, r8
   16370:	moveq	sl, #512	; 0x200
   16374:	add	r8, r9, #1
   16378:	cmp	r0, #2
   1637c:	str	r1, [sp, #20]
   16380:	str	r0, [sp, #24]
   16384:	blt	17638 <__assert_fail@plt+0x5bac>
   16388:	movw	r4, #16201	; 0x3f49
   1638c:	movw	r9, #14722	; 0x3982
   16390:	mov	r5, r8
   16394:	movt	r4, #2
   16398:	movt	r9, #2
   1639c:	ldrb	r7, [r5]
   163a0:	mov	r0, r4
   163a4:	mov	r2, #8
   163a8:	mov	r1, r7
   163ac:	bl	11948 <memchr@plt>
   163b0:	cmp	r0, #0
   163b4:	beq	1763c <__assert_fail@plt+0x5bb0>
   163b8:	mov	r0, r9
   163bc:	mov	r1, r7
   163c0:	mov	r2, #4
   163c4:	bl	11948 <memchr@plt>
   163c8:	cmp	r0, #0
   163cc:	add	r5, r5, #1
   163d0:	strbne	r7, [r8], #1
   163d4:	cmp	r5, r6
   163d8:	bcc	1639c <__assert_fail@plt+0x4910>
   163dc:	b	1763c <__assert_fail@plt+0x5bb0>
   163e0:	cmp	r2, #72	; 0x48
   163e4:	str	r9, [sp, #28]
   163e8:	bne	1774c <__assert_fail@plt+0x5cc0>
   163ec:	ldrd	r0, [r0]
   163f0:	mov	r2, r8
   163f4:	add	r8, r9, r8
   163f8:	add	r4, r9, #1
   163fc:	mov	r7, r2
   16400:	cmp	r2, #2
   16404:	lsr	r1, r1, #12
   16408:	lsr	r0, r0, #8
   1640c:	bfi	r0, r1, #12, #20
   16410:	str	r0, [sp, #20]
   16414:	blt	18624 <__assert_fail@plt+0x6b98>
   16418:	movw	sl, #16201	; 0x3f49
   1641c:	movw	r9, #14722	; 0x3982
   16420:	mov	r5, r4
   16424:	movt	sl, #2
   16428:	movt	r9, #2
   1642c:	ldrb	r6, [r5]
   16430:	mov	r0, sl
   16434:	mov	r2, #8
   16438:	mov	r1, r6
   1643c:	bl	11948 <memchr@plt>
   16440:	cmp	r0, #0
   16444:	beq	18628 <__assert_fail@plt+0x6b9c>
   16448:	mov	r0, r9
   1644c:	mov	r1, r6
   16450:	mov	r2, #4
   16454:	bl	11948 <memchr@plt>
   16458:	cmp	r0, #0
   1645c:	add	r5, r5, #1
   16460:	strbne	r6, [r4], #1
   16464:	cmp	r5, r8
   16468:	bcc	1642c <__assert_fail@plt+0x49a0>
   1646c:	b	18628 <__assert_fail@plt+0x6b9c>
   16470:	str	r9, [sp, #28]
   16474:	add	r4, r9, r8
   16478:	add	r9, r9, #1
   1647c:	cmp	r8, #2
   16480:	ldr	r1, [r6]
   16484:	ldr	r0, [r6, #4]
   16488:	str	r1, [sp, #16]
   1648c:	str	r0, [sp, #20]
   16490:	blt	177dc <__assert_fail@plt+0x5d50>
   16494:	movw	r5, #16201	; 0x3f49
   16498:	movw	sl, #14812	; 0x39dc
   1649c:	mov	r6, r9
   164a0:	movt	r5, #2
   164a4:	movt	sl, #2
   164a8:	ldrb	r7, [r6]
   164ac:	mov	r0, r5
   164b0:	mov	r2, #8
   164b4:	mov	r1, r7
   164b8:	bl	11948 <memchr@plt>
   164bc:	cmp	r0, #0
   164c0:	beq	177e0 <__assert_fail@plt+0x5d54>
   164c4:	mov	r0, sl
   164c8:	mov	r1, r7
   164cc:	mov	r2, #6
   164d0:	bl	11948 <memchr@plt>
   164d4:	cmp	r0, #0
   164d8:	add	r6, r6, #1
   164dc:	strbne	r7, [r9], #1
   164e0:	cmp	r6, r4
   164e4:	bcc	164a8 <__assert_fail@plt+0x4a1c>
   164e8:	b	177e0 <__assert_fail@plt+0x5d54>
   164ec:	ldrd	r0, [r0]
   164f0:	mov	r2, r8
   164f4:	add	r8, r9, r8
   164f8:	add	r4, r9, #1
   164fc:	str	r9, [sp, #28]
   16500:	mov	r7, r2
   16504:	cmp	r2, #2
   16508:	lsr	r1, r1, #12
   1650c:	lsr	r0, r0, #8
   16510:	bfi	r0, r1, #12, #20
   16514:	str	r0, [sp, #20]
   16518:	blt	178d4 <__assert_fail@plt+0x5e48>
   1651c:	movw	sl, #16201	; 0x3f49
   16520:	movw	r9, #14730	; 0x398a
   16524:	mov	r5, r4
   16528:	movt	sl, #2
   1652c:	movt	r9, #2
   16530:	ldrb	r6, [r5]
   16534:	mov	r0, sl
   16538:	mov	r2, #8
   1653c:	mov	r1, r6
   16540:	bl	11948 <memchr@plt>
   16544:	cmp	r0, #0
   16548:	beq	178d8 <__assert_fail@plt+0x5e4c>
   1654c:	mov	r0, r9
   16550:	mov	r1, r6
   16554:	mov	r2, #4
   16558:	bl	11948 <memchr@plt>
   1655c:	cmp	r0, #0
   16560:	add	r5, r5, #1
   16564:	strbne	r6, [r4], #1
   16568:	cmp	r5, r8
   1656c:	bcc	16530 <__assert_fail@plt+0x4aa4>
   16570:	b	178d8 <__assert_fail@plt+0x5e4c>
   16574:	ldr	r1, [sl, #24]
   16578:	mov	r0, r8
   1657c:	add	r8, r9, r8
   16580:	add	r4, r9, #1
   16584:	str	r9, [sp, #28]
   16588:	mov	sl, r0
   1658c:	cmp	r0, #2
   16590:	str	r1, [sp, #20]
   16594:	blt	179cc <__assert_fail@plt+0x5f40>
   16598:	movw	r7, #16201	; 0x3f49
   1659c:	movw	r9, #14722	; 0x3982
   165a0:	mov	r5, r4
   165a4:	movt	r7, #2
   165a8:	movt	r9, #2
   165ac:	ldrb	r6, [r5]
   165b0:	mov	r0, r7
   165b4:	mov	r2, #8
   165b8:	mov	r1, r6
   165bc:	bl	11948 <memchr@plt>
   165c0:	cmp	r0, #0
   165c4:	beq	179d0 <__assert_fail@plt+0x5f44>
   165c8:	mov	r0, r9
   165cc:	mov	r1, r6
   165d0:	mov	r2, #4
   165d4:	bl	11948 <memchr@plt>
   165d8:	cmp	r0, #0
   165dc:	add	r5, r5, #1
   165e0:	strbne	r6, [r4], #1
   165e4:	cmp	r5, r8
   165e8:	bcc	165ac <__assert_fail@plt+0x4b20>
   165ec:	b	179d0 <__assert_fail@plt+0x5f44>
   165f0:	cmn	r3, #1
   165f4:	str	r9, [sp, #28]
   165f8:	ble	18160 <__assert_fail@plt+0x66d4>
   165fc:	mov	r0, lr
   16600:	mov	r1, r3
   16604:	bl	192e0 <__assert_fail@plt+0x7854>
   16608:	add	sl, r9, r8
   1660c:	add	r4, r9, #1
   16610:	mov	r6, r8
   16614:	cmp	r8, #2
   16618:	blt	181cc <__assert_fail@plt+0x6740>
   1661c:	movw	r9, #16201	; 0x3f49
   16620:	movw	r8, #16839	; 0x41c7
   16624:	mov	r5, r4
   16628:	movt	r9, #2
   1662c:	movt	r8, #2
   16630:	ldrb	r7, [r5]
   16634:	mov	r0, r9
   16638:	mov	r2, #8
   1663c:	mov	r1, r7
   16640:	bl	11948 <memchr@plt>
   16644:	cmp	r0, #0
   16648:	beq	181d0 <__assert_fail@plt+0x6744>
   1664c:	mov	r0, r8
   16650:	mov	r1, r7
   16654:	mov	r2, #2
   16658:	bl	11948 <memchr@plt>
   1665c:	cmp	r0, #0
   16660:	add	r5, r5, #1
   16664:	strbne	r7, [r4], #1
   16668:	cmp	r5, sl
   1666c:	bcc	16630 <__assert_fail@plt+0x4ba4>
   16670:	b	181d0 <__assert_fail@plt+0x6744>
   16674:	ldrd	r0, [r5]
   16678:	bl	192e0 <__assert_fail@plt+0x7854>
   1667c:	add	sl, r9, r8
   16680:	add	r4, r9, #1
   16684:	mov	r6, r8
   16688:	cmp	r8, #2
   1668c:	str	r9, [sp, #28]
   16690:	blt	17ad8 <__assert_fail@plt+0x604c>
   16694:	movw	r9, #16201	; 0x3f49
   16698:	movw	r8, #16839	; 0x41c7
   1669c:	mov	r5, r4
   166a0:	movt	r9, #2
   166a4:	movt	r8, #2
   166a8:	ldrb	r7, [r5]
   166ac:	mov	r0, r9
   166b0:	mov	r2, #8
   166b4:	mov	r1, r7
   166b8:	bl	11948 <memchr@plt>
   166bc:	cmp	r0, #0
   166c0:	beq	17adc <__assert_fail@plt+0x6050>
   166c4:	mov	r0, r8
   166c8:	mov	r1, r7
   166cc:	mov	r2, #2
   166d0:	bl	11948 <memchr@plt>
   166d4:	cmp	r0, #0
   166d8:	add	r5, r5, #1
   166dc:	strbne	r7, [r4], #1
   166e0:	cmp	r5, sl
   166e4:	bcc	166a8 <__assert_fail@plt+0x4c1c>
   166e8:	b	17adc <__assert_fail@plt+0x6050>
   166ec:	ldrd	r0, [r4]
   166f0:	bl	192e0 <__assert_fail@plt+0x7854>
   166f4:	add	sl, r9, r8
   166f8:	add	r4, r9, #1
   166fc:	mov	r6, r8
   16700:	cmp	r8, #2
   16704:	str	r9, [sp, #28]
   16708:	blt	17be0 <__assert_fail@plt+0x6154>
   1670c:	movw	r9, #16201	; 0x3f49
   16710:	movw	r8, #16839	; 0x41c7
   16714:	mov	r5, r4
   16718:	movt	r9, #2
   1671c:	movt	r8, #2
   16720:	ldrb	r7, [r5]
   16724:	mov	r0, r9
   16728:	mov	r2, #8
   1672c:	mov	r1, r7
   16730:	bl	11948 <memchr@plt>
   16734:	cmp	r0, #0
   16738:	beq	17be4 <__assert_fail@plt+0x6158>
   1673c:	mov	r0, r8
   16740:	mov	r1, r7
   16744:	mov	r2, #2
   16748:	bl	11948 <memchr@plt>
   1674c:	cmp	r0, #0
   16750:	add	r5, r5, #1
   16754:	strbne	r7, [r4], #1
   16758:	cmp	r5, sl
   1675c:	bcc	16720 <__assert_fail@plt+0x4c94>
   16760:	b	17be4 <__assert_fail@plt+0x6158>
   16764:	add	r0, sl, #88	; 0x58
   16768:	ldrd	r0, [r0]
   1676c:	bl	192e0 <__assert_fail@plt+0x7854>
   16770:	add	sl, r9, r8
   16774:	add	r4, r9, #1
   16778:	mov	r6, r8
   1677c:	cmp	r8, #2
   16780:	str	r9, [sp, #28]
   16784:	blt	17ce8 <__assert_fail@plt+0x625c>
   16788:	movw	r9, #16201	; 0x3f49
   1678c:	movw	r8, #16839	; 0x41c7
   16790:	mov	r5, r4
   16794:	movt	r9, #2
   16798:	movt	r8, #2
   1679c:	ldrb	r7, [r5]
   167a0:	mov	r0, r9
   167a4:	mov	r2, #8
   167a8:	mov	r1, r7
   167ac:	bl	11948 <memchr@plt>
   167b0:	cmp	r0, #0
   167b4:	beq	17cec <__assert_fail@plt+0x6260>
   167b8:	mov	r0, r8
   167bc:	mov	r1, r7
   167c0:	mov	r2, #2
   167c4:	bl	11948 <memchr@plt>
   167c8:	cmp	r0, #0
   167cc:	add	r5, r5, #1
   167d0:	strbne	r7, [r4], #1
   167d4:	cmp	r5, sl
   167d8:	bcc	1679c <__assert_fail@plt+0x4d10>
   167dc:	b	17cec <__assert_fail@plt+0x6260>
   167e0:	mov	r5, r4
   167e4:	cmp	r5, r8
   167e8:	bcs	18154 <__assert_fail@plt+0x66c8>
   167ec:	ldr	r1, [sp, #28]
   167f0:	sub	r0, r7, r5
   167f4:	add	r9, r1, r0
   167f8:	cmp	r9, #16
   167fc:	bcc	168d0 <__assert_fail@plt+0x4e44>
   16800:	cmp	r4, r8
   16804:	addcc	r1, r4, r9
   16808:	cmpcc	r5, r1
   1680c:	bcc	168d0 <__assert_fail@plt+0x4e44>
   16810:	bic	r0, r9, #15
   16814:	mov	r2, #1
   16818:	mov	r3, #0
   1681c:	sub	r6, r0, #16
   16820:	str	r0, [sp, #16]
   16824:	add	r2, r2, r6, lsr #4
   16828:	cmp	r6, #48	; 0x30
   1682c:	and	r0, r2, #3
   16830:	str	r0, [sp, #24]
   16834:	bcc	16894 <__assert_fail@plt+0x4e08>
   16838:	ldr	r0, [sp, #24]
   1683c:	mov	r3, #0
   16840:	mov	sl, #48	; 0x30
   16844:	sub	r6, r2, r0
   16848:	add	r1, r5, r3
   1684c:	add	r2, r4, r3
   16850:	subs	r6, r6, #4
   16854:	add	r3, r3, #64	; 0x40
   16858:	mov	r0, r1
   1685c:	mov	ip, r2
   16860:	add	lr, r1, #16
   16864:	add	r7, r2, #16
   16868:	add	r1, r1, #32
   1686c:	vld1.8	{d16-d17}, [r0], sl
   16870:	vst1.8	{d16-d17}, [ip], sl
   16874:	vld1.8	{d16-d17}, [lr]
   16878:	vst1.8	{d16-d17}, [r7]
   1687c:	vld1.8	{d16-d17}, [r1]
   16880:	add	r1, r2, #32
   16884:	vst1.8	{d16-d17}, [r1]
   16888:	vld1.8	{d16-d17}, [r0]
   1688c:	vst1.8	{d16-d17}, [ip]
   16890:	bne	16848 <__assert_fail@plt+0x4dbc>
   16894:	ldr	r0, [sp, #24]
   16898:	cmp	r0, #0
   1689c:	beq	168bc <__assert_fail@plt+0x4e30>
   168a0:	add	r2, r4, r3
   168a4:	add	r3, r5, r3
   168a8:	rsb	r6, r0, #0
   168ac:	vld1.8	{d16-d17}, [r3]!
   168b0:	adds	r6, r6, #1
   168b4:	vst1.8	{d16-d17}, [r2]!
   168b8:	bcc	168ac <__assert_fail@plt+0x4e20>
   168bc:	ldr	r0, [sp, #16]
   168c0:	add	r4, r4, r0
   168c4:	cmp	r0, r9
   168c8:	beq	18154 <__assert_fail@plt+0x66c8>
   168cc:	add	r5, r5, r0
   168d0:	ldr	r1, [sp, #28]
   168d4:	ldr	r2, [sp, #20]
   168d8:	ldrb	r0, [r5], #1
   168dc:	cmp	r8, r5
   168e0:	strb	r0, [r4], #1
   168e4:	bne	168d8 <__assert_fail@plt+0x4e4c>
   168e8:	b	1926c <__assert_fail@plt+0x77e0>
   168ec:	mov	r5, r4
   168f0:	cmp	r5, sl
   168f4:	bcs	17df0 <__assert_fail@plt+0x6364>
   168f8:	ldr	r1, [sp, #28]
   168fc:	sub	r0, r6, r5
   16900:	add	r8, r1, r0
   16904:	cmp	r8, #16
   16908:	bcc	169e0 <__assert_fail@plt+0x4f54>
   1690c:	cmp	r4, sl
   16910:	addcc	r0, r4, r8
   16914:	cmpcc	r5, r0
   16918:	bcc	169e0 <__assert_fail@plt+0x4f54>
   1691c:	bic	r0, r8, #15
   16920:	mov	r2, #1
   16924:	mov	r3, #0
   16928:	sub	r7, r0, #16
   1692c:	str	r0, [sp, #20]
   16930:	add	r2, r2, r7, lsr #4
   16934:	cmp	r7, #48	; 0x30
   16938:	and	r0, r2, #3
   1693c:	str	r0, [sp, #24]
   16940:	bcc	169a0 <__assert_fail@plt+0x4f14>
   16944:	ldr	r0, [sp, #24]
   16948:	mov	r3, #0
   1694c:	mov	r9, #48	; 0x30
   16950:	sub	r7, r2, r0
   16954:	add	r1, r5, r3
   16958:	add	r2, r4, r3
   1695c:	subs	r7, r7, #4
   16960:	add	r3, r3, #64	; 0x40
   16964:	mov	lr, r1
   16968:	mov	r6, r2
   1696c:	add	ip, r1, #16
   16970:	add	r0, r2, #16
   16974:	vld1.8	{d16-d17}, [lr], r9
   16978:	vst1.8	{d16-d17}, [r6], r9
   1697c:	vld1.8	{d16-d17}, [ip]
   16980:	vst1.8	{d16-d17}, [r0]
   16984:	add	r0, r1, #32
   16988:	vld1.8	{d16-d17}, [r0]
   1698c:	add	r0, r2, #32
   16990:	vst1.8	{d16-d17}, [r0]
   16994:	vld1.8	{d16-d17}, [lr]
   16998:	vst1.8	{d16-d17}, [r6]
   1699c:	bne	16954 <__assert_fail@plt+0x4ec8>
   169a0:	ldr	r0, [sp, #24]
   169a4:	cmp	r0, #0
   169a8:	beq	169c8 <__assert_fail@plt+0x4f3c>
   169ac:	add	r2, r4, r3
   169b0:	add	r3, r5, r3
   169b4:	rsb	r7, r0, #0
   169b8:	vld1.8	{d16-d17}, [r3]!
   169bc:	adds	r7, r7, #1
   169c0:	vst1.8	{d16-d17}, [r2]!
   169c4:	bcc	169b8 <__assert_fail@plt+0x4f2c>
   169c8:	ldr	r0, [sp, #20]
   169cc:	ldr	r1, [sp, #28]
   169d0:	add	r4, r4, r0
   169d4:	cmp	r0, r8
   169d8:	beq	17df4 <__assert_fail@plt+0x6368>
   169dc:	add	r5, r5, r0
   169e0:	ldrb	r0, [r5], #1
   169e4:	cmp	sl, r5
   169e8:	strb	r0, [r4], #1
   169ec:	bne	169e0 <__assert_fail@plt+0x4f54>
   169f0:	b	17df4 <__assert_fail@plt+0x6368>
   169f4:	mov	r0, ip
   169f8:	bl	1f560 <__assert_fail@plt+0xdad4>
   169fc:	cmp	r0, #0
   16a00:	bmi	15b3c <__assert_fail@plt+0x40b0>
   16a04:	ldr	r5, [sp, #32]
   16a08:	mov	r7, #0
   16a0c:	movw	r2, #14742	; 0x3996
   16a10:	add	r0, r9, r8
   16a14:	mov	r1, #115	; 0x73
   16a18:	cmp	r5, #0
   16a1c:	strh	r1, [r0]
   16a20:	movt	r2, #2
   16a24:	movne	r2, r5
   16a28:	mov	r0, #1
   16a2c:	mov	r1, r9
   16a30:	bl	11924 <__printf_chk@plt>
   16a34:	ldr	r0, [sp, #32]
   16a38:	cmp	r0, #0
   16a3c:	beq	18b74 <__assert_fail@plt+0x70e8>
   16a40:	bl	11a14 <freecon@plt>
   16a44:	mov	r0, r7
   16a48:	sub	sp, fp, #28
   16a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a50:	mov	r5, r9
   16a54:	cmp	r5, r6
   16a58:	bcs	16d40 <__assert_fail@plt+0x52b4>
   16a5c:	ldr	r1, [sp, #28]
   16a60:	sub	r0, r8, r5
   16a64:	add	sl, r1, r0
   16a68:	cmp	sl, #16
   16a6c:	bcc	16b40 <__assert_fail@plt+0x50b4>
   16a70:	cmp	r9, r6
   16a74:	addcc	r1, r9, sl
   16a78:	cmpcc	r5, r1
   16a7c:	bcc	16b40 <__assert_fail@plt+0x50b4>
   16a80:	bic	r0, sl, #15
   16a84:	mov	r2, #1
   16a88:	mov	r3, #0
   16a8c:	sub	r4, r0, #16
   16a90:	str	r0, [sp, #12]
   16a94:	add	r7, r2, r4, lsr #4
   16a98:	cmp	r4, #48	; 0x30
   16a9c:	and	r0, r7, #3
   16aa0:	str	r0, [sp, #24]
   16aa4:	bcc	16b04 <__assert_fail@plt+0x5078>
   16aa8:	ldr	r0, [sp, #24]
   16aac:	mov	r3, #0
   16ab0:	mov	r8, #48	; 0x30
   16ab4:	sub	r7, r7, r0
   16ab8:	add	r2, r5, r3
   16abc:	add	r0, r9, r3
   16ac0:	subs	r7, r7, #4
   16ac4:	add	r3, r3, #64	; 0x40
   16ac8:	mov	r1, r2
   16acc:	mov	ip, r0
   16ad0:	add	lr, r2, #16
   16ad4:	add	r4, r0, #16
   16ad8:	add	r2, r2, #32
   16adc:	add	r0, r0, #32
   16ae0:	vld1.8	{d16-d17}, [r1], r8
   16ae4:	vst1.8	{d16-d17}, [ip], r8
   16ae8:	vld1.8	{d16-d17}, [lr]
   16aec:	vst1.8	{d16-d17}, [r4]
   16af0:	vld1.8	{d16-d17}, [r2]
   16af4:	vst1.8	{d16-d17}, [r0]
   16af8:	vld1.8	{d16-d17}, [r1]
   16afc:	vst1.8	{d16-d17}, [ip]
   16b00:	bne	16ab8 <__assert_fail@plt+0x502c>
   16b04:	ldr	r0, [sp, #24]
   16b08:	cmp	r0, #0
   16b0c:	beq	16b2c <__assert_fail@plt+0x50a0>
   16b10:	add	r7, r9, r3
   16b14:	add	r3, r5, r3
   16b18:	rsb	r2, r0, #0
   16b1c:	vld1.8	{d16-d17}, [r3]!
   16b20:	adds	r2, r2, #1
   16b24:	vst1.8	{d16-d17}, [r7]!
   16b28:	bcc	16b1c <__assert_fail@plt+0x5090>
   16b2c:	ldr	r0, [sp, #12]
   16b30:	add	r9, r9, r0
   16b34:	cmp	r0, sl
   16b38:	beq	16d40 <__assert_fail@plt+0x52b4>
   16b3c:	add	r5, r5, r0
   16b40:	ldr	r3, [sp, #20]
   16b44:	ldr	r2, [sp, #16]
   16b48:	ldrb	r0, [r5], #1
   16b4c:	cmp	r6, r5
   16b50:	strb	r0, [r9], #1
   16b54:	bne	16b48 <__assert_fail@plt+0x50bc>
   16b58:	b	19194 <__assert_fail@plt+0x7708>
   16b5c:	mov	r5, r7
   16b60:	cmp	r5, r8
   16b64:	bcs	16c48 <__assert_fail@plt+0x51bc>
   16b68:	ldr	r1, [sp, #28]
   16b6c:	sub	r0, r4, r5
   16b70:	add	r9, r1, r0
   16b74:	cmp	r9, #16
   16b78:	bcc	19154 <__assert_fail@plt+0x76c8>
   16b7c:	cmp	r7, r8
   16b80:	addcc	r1, r7, r9
   16b84:	cmpcc	r5, r1
   16b88:	bcc	19154 <__assert_fail@plt+0x76c8>
   16b8c:	bic	r0, r9, #15
   16b90:	mov	r2, #1
   16b94:	mov	r3, #0
   16b98:	sub	r6, r0, #16
   16b9c:	str	r0, [sp, #16]
   16ba0:	add	r2, r2, r6, lsr #4
   16ba4:	cmp	r6, #48	; 0x30
   16ba8:	and	r0, r2, #3
   16bac:	str	r0, [sp, #24]
   16bb0:	bcc	16c10 <__assert_fail@plt+0x5184>
   16bb4:	ldr	r0, [sp, #24]
   16bb8:	mov	r3, #0
   16bbc:	mov	sl, #48	; 0x30
   16bc0:	sub	r6, r2, r0
   16bc4:	add	r1, r5, r3
   16bc8:	add	r2, r7, r3
   16bcc:	subs	r6, r6, #4
   16bd0:	add	r3, r3, #64	; 0x40
   16bd4:	mov	r0, r1
   16bd8:	mov	ip, r2
   16bdc:	add	lr, r1, #16
   16be0:	add	r4, r2, #16
   16be4:	add	r1, r1, #32
   16be8:	vld1.8	{d16-d17}, [r0], sl
   16bec:	vst1.8	{d16-d17}, [ip], sl
   16bf0:	vld1.8	{d16-d17}, [lr]
   16bf4:	vst1.8	{d16-d17}, [r4]
   16bf8:	vld1.8	{d16-d17}, [r1]
   16bfc:	add	r1, r2, #32
   16c00:	vst1.8	{d16-d17}, [r1]
   16c04:	vld1.8	{d16-d17}, [r0]
   16c08:	vst1.8	{d16-d17}, [ip]
   16c0c:	bne	16bc4 <__assert_fail@plt+0x5138>
   16c10:	ldr	r0, [sp, #24]
   16c14:	cmp	r0, #0
   16c18:	beq	16c38 <__assert_fail@plt+0x51ac>
   16c1c:	add	r2, r7, r3
   16c20:	add	r3, r5, r3
   16c24:	rsb	r6, r0, #0
   16c28:	vld1.8	{d16-d17}, [r3]!
   16c2c:	adds	r6, r6, #1
   16c30:	vst1.8	{d16-d17}, [r2]!
   16c34:	bcc	16c28 <__assert_fail@plt+0x519c>
   16c38:	ldr	r0, [sp, #16]
   16c3c:	add	r7, r7, r0
   16c40:	cmp	r0, r9
   16c44:	bne	19150 <__assert_fail@plt+0x76c4>
   16c48:	ldr	r1, [sp, #28]
   16c4c:	ldr	r2, [sp, #20]
   16c50:	b	1916c <__assert_fail@plt+0x76e0>
   16c54:	mov	r5, r9
   16c58:	cmp	r5, r6
   16c5c:	bcs	16d40 <__assert_fail@plt+0x52b4>
   16c60:	ldr	r1, [sp, #28]
   16c64:	sub	r0, r8, r5
   16c68:	add	sl, r1, r0
   16c6c:	cmp	sl, #16
   16c70:	bcc	1917c <__assert_fail@plt+0x76f0>
   16c74:	cmp	r9, r6
   16c78:	addcc	r1, r9, sl
   16c7c:	cmpcc	r5, r1
   16c80:	bcc	1917c <__assert_fail@plt+0x76f0>
   16c84:	bic	r0, sl, #15
   16c88:	mov	r2, #1
   16c8c:	mov	r3, #0
   16c90:	sub	r4, r0, #16
   16c94:	str	r0, [sp, #12]
   16c98:	add	r7, r2, r4, lsr #4
   16c9c:	cmp	r4, #48	; 0x30
   16ca0:	and	r0, r7, #3
   16ca4:	str	r0, [sp, #24]
   16ca8:	bcc	16d08 <__assert_fail@plt+0x527c>
   16cac:	ldr	r0, [sp, #24]
   16cb0:	mov	r3, #0
   16cb4:	mov	r8, #48	; 0x30
   16cb8:	sub	r7, r7, r0
   16cbc:	add	r2, r5, r3
   16cc0:	add	r0, r9, r3
   16cc4:	subs	r7, r7, #4
   16cc8:	add	r3, r3, #64	; 0x40
   16ccc:	mov	r1, r2
   16cd0:	mov	ip, r0
   16cd4:	add	lr, r2, #16
   16cd8:	add	r4, r0, #16
   16cdc:	add	r2, r2, #32
   16ce0:	add	r0, r0, #32
   16ce4:	vld1.8	{d16-d17}, [r1], r8
   16ce8:	vst1.8	{d16-d17}, [ip], r8
   16cec:	vld1.8	{d16-d17}, [lr]
   16cf0:	vst1.8	{d16-d17}, [r4]
   16cf4:	vld1.8	{d16-d17}, [r2]
   16cf8:	vst1.8	{d16-d17}, [r0]
   16cfc:	vld1.8	{d16-d17}, [r1]
   16d00:	vst1.8	{d16-d17}, [ip]
   16d04:	bne	16cbc <__assert_fail@plt+0x5230>
   16d08:	ldr	r0, [sp, #24]
   16d0c:	cmp	r0, #0
   16d10:	beq	16d30 <__assert_fail@plt+0x52a4>
   16d14:	add	r7, r9, r3
   16d18:	add	r3, r5, r3
   16d1c:	rsb	r2, r0, #0
   16d20:	vld1.8	{d16-d17}, [r3]!
   16d24:	adds	r2, r2, #1
   16d28:	vst1.8	{d16-d17}, [r7]!
   16d2c:	bcc	16d20 <__assert_fail@plt+0x5294>
   16d30:	ldr	r0, [sp, #12]
   16d34:	add	r9, r9, r0
   16d38:	cmp	r0, sl
   16d3c:	bne	19178 <__assert_fail@plt+0x76ec>
   16d40:	ldr	r3, [sp, #20]
   16d44:	ldr	r2, [sp, #16]
   16d48:	b	19194 <__assert_fail@plt+0x7708>
   16d4c:	mov	r5, r4
   16d50:	cmp	r5, r8
   16d54:	bcs	179c0 <__assert_fail@plt+0x5f34>
   16d58:	ldr	r1, [sp, #28]
   16d5c:	sub	r0, r7, r5
   16d60:	add	r9, r1, r0
   16d64:	cmp	r9, #16
   16d68:	bcc	16e3c <__assert_fail@plt+0x53b0>
   16d6c:	cmp	r4, r8
   16d70:	addcc	r1, r4, r9
   16d74:	cmpcc	r5, r1
   16d78:	bcc	16e3c <__assert_fail@plt+0x53b0>
   16d7c:	bic	r0, r9, #15
   16d80:	mov	r2, #1
   16d84:	mov	r3, #0
   16d88:	sub	r6, r0, #16
   16d8c:	str	r0, [sp, #16]
   16d90:	add	r2, r2, r6, lsr #4
   16d94:	cmp	r6, #48	; 0x30
   16d98:	and	r0, r2, #3
   16d9c:	str	r0, [sp, #24]
   16da0:	bcc	16e00 <__assert_fail@plt+0x5374>
   16da4:	ldr	r0, [sp, #24]
   16da8:	mov	r3, #0
   16dac:	mov	sl, #48	; 0x30
   16db0:	sub	r6, r2, r0
   16db4:	add	r1, r5, r3
   16db8:	add	r2, r4, r3
   16dbc:	subs	r6, r6, #4
   16dc0:	add	r3, r3, #64	; 0x40
   16dc4:	mov	r0, r1
   16dc8:	mov	ip, r2
   16dcc:	add	lr, r1, #16
   16dd0:	add	r7, r2, #16
   16dd4:	add	r1, r1, #32
   16dd8:	vld1.8	{d16-d17}, [r0], sl
   16ddc:	vst1.8	{d16-d17}, [ip], sl
   16de0:	vld1.8	{d16-d17}, [lr]
   16de4:	vst1.8	{d16-d17}, [r7]
   16de8:	vld1.8	{d16-d17}, [r1]
   16dec:	add	r1, r2, #32
   16df0:	vst1.8	{d16-d17}, [r1]
   16df4:	vld1.8	{d16-d17}, [r0]
   16df8:	vst1.8	{d16-d17}, [ip]
   16dfc:	bne	16db4 <__assert_fail@plt+0x5328>
   16e00:	ldr	r0, [sp, #24]
   16e04:	cmp	r0, #0
   16e08:	beq	16e28 <__assert_fail@plt+0x539c>
   16e0c:	add	r2, r4, r3
   16e10:	add	r3, r5, r3
   16e14:	rsb	r6, r0, #0
   16e18:	vld1.8	{d16-d17}, [r3]!
   16e1c:	adds	r6, r6, #1
   16e20:	vst1.8	{d16-d17}, [r2]!
   16e24:	bcc	16e18 <__assert_fail@plt+0x538c>
   16e28:	ldr	r0, [sp, #16]
   16e2c:	add	r4, r4, r0
   16e30:	cmp	r0, r9
   16e34:	beq	179c0 <__assert_fail@plt+0x5f34>
   16e38:	add	r5, r5, r0
   16e3c:	ldr	r1, [sp, #28]
   16e40:	ldr	r2, [sp, #20]
   16e44:	ldrb	r0, [r5], #1
   16e48:	cmp	r8, r5
   16e4c:	strb	r0, [r4], #1
   16e50:	bne	16e44 <__assert_fail@plt+0x53b8>
   16e54:	b	19228 <__assert_fail@plt+0x779c>
   16e58:	mov	r5, r4
   16e5c:	bfc	sl, #12, #20
   16e60:	cmp	r5, r8
   16e64:	bcs	17e0c <__assert_fail@plt+0x6380>
   16e68:	ldr	r0, [sp, #24]
   16e6c:	ldr	r1, [sp, #28]
   16e70:	sub	r0, r0, r5
   16e74:	add	r2, r1, r0
   16e78:	cmp	r2, #16
   16e7c:	bcc	16f5c <__assert_fail@plt+0x54d0>
   16e80:	cmp	r4, r8
   16e84:	addcc	r0, r4, r2
   16e88:	cmpcc	r5, r0
   16e8c:	bcc	16f5c <__assert_fail@plt+0x54d0>
   16e90:	bic	r0, r2, #15
   16e94:	str	r2, [sp, #20]
   16e98:	mov	r2, #1
   16e9c:	mov	r3, #0
   16ea0:	sub	r6, r0, #16
   16ea4:	str	r0, [sp, #16]
   16ea8:	add	r7, r2, r6, lsr #4
   16eac:	cmp	r6, #48	; 0x30
   16eb0:	and	r0, r7, #3
   16eb4:	str	r0, [sp, #24]
   16eb8:	bcc	16f18 <__assert_fail@plt+0x548c>
   16ebc:	ldr	r0, [sp, #24]
   16ec0:	mov	r3, #0
   16ec4:	mov	r9, #48	; 0x30
   16ec8:	sub	r7, r7, r0
   16ecc:	add	r2, r5, r3
   16ed0:	add	r0, r4, r3
   16ed4:	subs	r7, r7, #4
   16ed8:	add	r3, r3, #64	; 0x40
   16edc:	mov	r1, r2
   16ee0:	mov	ip, r0
   16ee4:	add	lr, r2, #16
   16ee8:	add	r6, r0, #16
   16eec:	add	r2, r2, #32
   16ef0:	add	r0, r0, #32
   16ef4:	vld1.8	{d16-d17}, [r1], r9
   16ef8:	vst1.8	{d16-d17}, [ip], r9
   16efc:	vld1.8	{d16-d17}, [lr]
   16f00:	vst1.8	{d16-d17}, [r6]
   16f04:	vld1.8	{d16-d17}, [r2]
   16f08:	vst1.8	{d16-d17}, [r0]
   16f0c:	vld1.8	{d16-d17}, [r1]
   16f10:	vst1.8	{d16-d17}, [ip]
   16f14:	bne	16ecc <__assert_fail@plt+0x5440>
   16f18:	ldr	r0, [sp, #24]
   16f1c:	cmp	r0, #0
   16f20:	beq	16f40 <__assert_fail@plt+0x54b4>
   16f24:	add	r7, r4, r3
   16f28:	add	r3, r5, r3
   16f2c:	rsb	r2, r0, #0
   16f30:	vld1.8	{d16-d17}, [r3]!
   16f34:	adds	r2, r2, #1
   16f38:	vst1.8	{d16-d17}, [r7]!
   16f3c:	bcc	16f30 <__assert_fail@plt+0x54a4>
   16f40:	ldr	r2, [sp, #16]
   16f44:	ldr	r0, [sp, #20]
   16f48:	ldr	r1, [sp, #28]
   16f4c:	add	r4, r4, r2
   16f50:	cmp	r2, r0
   16f54:	beq	17e10 <__assert_fail@plt+0x6384>
   16f58:	add	r5, r5, r2
   16f5c:	ldrb	r0, [r5], #1
   16f60:	cmp	r8, r5
   16f64:	strb	r0, [r4], #1
   16f68:	bne	16f5c <__assert_fail@plt+0x54d0>
   16f6c:	b	17e10 <__assert_fail@plt+0x6384>
   16f70:	mov	r5, r9
   16f74:	cmp	r5, r6
   16f78:	bcs	1751c <__assert_fail@plt+0x5a90>
   16f7c:	ldr	r1, [sp, #28]
   16f80:	sub	r0, r8, r5
   16f84:	add	sl, r1, r0
   16f88:	cmp	sl, #16
   16f8c:	bcc	17060 <__assert_fail@plt+0x55d4>
   16f90:	cmp	r9, r6
   16f94:	addcc	r1, r9, sl
   16f98:	cmpcc	r5, r1
   16f9c:	bcc	17060 <__assert_fail@plt+0x55d4>
   16fa0:	bic	r0, sl, #15
   16fa4:	mov	r2, #1
   16fa8:	mov	r3, #0
   16fac:	sub	r4, r0, #16
   16fb0:	str	r0, [sp, #12]
   16fb4:	add	r7, r2, r4, lsr #4
   16fb8:	cmp	r4, #48	; 0x30
   16fbc:	and	r0, r7, #3
   16fc0:	str	r0, [sp, #24]
   16fc4:	bcc	17024 <__assert_fail@plt+0x5598>
   16fc8:	ldr	r0, [sp, #24]
   16fcc:	mov	r3, #0
   16fd0:	mov	r8, #48	; 0x30
   16fd4:	sub	r7, r7, r0
   16fd8:	add	r2, r5, r3
   16fdc:	add	r0, r9, r3
   16fe0:	subs	r7, r7, #4
   16fe4:	add	r3, r3, #64	; 0x40
   16fe8:	mov	r1, r2
   16fec:	mov	ip, r0
   16ff0:	add	lr, r2, #16
   16ff4:	add	r4, r0, #16
   16ff8:	add	r2, r2, #32
   16ffc:	add	r0, r0, #32
   17000:	vld1.8	{d16-d17}, [r1], r8
   17004:	vst1.8	{d16-d17}, [ip], r8
   17008:	vld1.8	{d16-d17}, [lr]
   1700c:	vst1.8	{d16-d17}, [r4]
   17010:	vld1.8	{d16-d17}, [r2]
   17014:	vst1.8	{d16-d17}, [r0]
   17018:	vld1.8	{d16-d17}, [r1]
   1701c:	vst1.8	{d16-d17}, [ip]
   17020:	bne	16fd8 <__assert_fail@plt+0x554c>
   17024:	ldr	r0, [sp, #24]
   17028:	cmp	r0, #0
   1702c:	beq	1704c <__assert_fail@plt+0x55c0>
   17030:	add	r7, r9, r3
   17034:	add	r3, r5, r3
   17038:	rsb	r2, r0, #0
   1703c:	vld1.8	{d16-d17}, [r3]!
   17040:	adds	r2, r2, #1
   17044:	vst1.8	{d16-d17}, [r7]!
   17048:	bcc	1703c <__assert_fail@plt+0x55b0>
   1704c:	ldr	r0, [sp, #12]
   17050:	add	r9, r9, r0
   17054:	cmp	r0, sl
   17058:	beq	1751c <__assert_fail@plt+0x5a90>
   1705c:	add	r5, r5, r0
   17060:	ldr	r3, [sp, #20]
   17064:	ldr	r2, [sp, #16]
   17068:	ldrb	r0, [r5], #1
   1706c:	cmp	r6, r5
   17070:	strb	r0, [r9], #1
   17074:	bne	17068 <__assert_fail@plt+0x55dc>
   17078:	b	191bc <__assert_fail@plt+0x7730>
   1707c:	ldr	r3, [sl, #4]
   17080:	ldr	sl, [sl]
   17084:	cmp	r2, #76	; 0x4c
   17088:	str	r8, [sp, #24]
   1708c:	bne	18724 <__assert_fail@plt+0x6c98>
   17090:	lsr	r0, sl, #12
   17094:	mov	r1, r9
   17098:	mov	r2, r8
   1709c:	add	r9, r9, r8
   170a0:	orr	r8, r0, r3, lsl #20
   170a4:	add	r7, r1, #1
   170a8:	cmp	r2, #2
   170ac:	bfi	r8, sl, #0, #8
   170b0:	blt	18b94 <__assert_fail@plt+0x7108>
   170b4:	movw	r4, #16201	; 0x3f49
   170b8:	movw	sl, #14722	; 0x3982
   170bc:	mov	r5, r7
   170c0:	movt	r4, #2
   170c4:	movt	sl, #2
   170c8:	ldrb	r6, [r5]
   170cc:	mov	r0, r4
   170d0:	mov	r2, #8
   170d4:	mov	r1, r6
   170d8:	bl	11948 <memchr@plt>
   170dc:	cmp	r0, #0
   170e0:	beq	18b98 <__assert_fail@plt+0x710c>
   170e4:	mov	r0, sl
   170e8:	mov	r1, r6
   170ec:	mov	r2, #4
   170f0:	bl	11948 <memchr@plt>
   170f4:	cmp	r0, #0
   170f8:	add	r5, r5, #1
   170fc:	strbne	r6, [r7], #1
   17100:	cmp	r5, r9
   17104:	bcc	170c8 <__assert_fail@plt+0x563c>
   17108:	b	18b98 <__assert_fail@plt+0x710c>
   1710c:	mov	r5, r4
   17110:	cmp	r5, r8
   17114:	bcs	179c0 <__assert_fail@plt+0x5f34>
   17118:	ldr	r1, [sp, #28]
   1711c:	sub	r0, sl, r5
   17120:	add	r9, r1, r0
   17124:	cmp	r9, #16
   17128:	bcc	171fc <__assert_fail@plt+0x5770>
   1712c:	cmp	r4, r8
   17130:	addcc	r1, r4, r9
   17134:	cmpcc	r5, r1
   17138:	bcc	171fc <__assert_fail@plt+0x5770>
   1713c:	bic	r0, r9, #15
   17140:	mov	r2, #1
   17144:	mov	r3, #0
   17148:	sub	r6, r0, #16
   1714c:	str	r0, [sp, #16]
   17150:	add	r7, r2, r6, lsr #4
   17154:	cmp	r6, #48	; 0x30
   17158:	and	r0, r7, #3
   1715c:	str	r0, [sp, #24]
   17160:	bcc	171c0 <__assert_fail@plt+0x5734>
   17164:	ldr	r0, [sp, #24]
   17168:	mov	r3, #0
   1716c:	mov	sl, #48	; 0x30
   17170:	sub	r7, r7, r0
   17174:	add	r2, r5, r3
   17178:	add	r0, r4, r3
   1717c:	subs	r7, r7, #4
   17180:	add	r3, r3, #64	; 0x40
   17184:	mov	r1, r2
   17188:	mov	ip, r0
   1718c:	add	lr, r2, #16
   17190:	add	r6, r0, #16
   17194:	add	r2, r2, #32
   17198:	add	r0, r0, #32
   1719c:	vld1.8	{d16-d17}, [r1], sl
   171a0:	vst1.8	{d16-d17}, [ip], sl
   171a4:	vld1.8	{d16-d17}, [lr]
   171a8:	vst1.8	{d16-d17}, [r6]
   171ac:	vld1.8	{d16-d17}, [r2]
   171b0:	vst1.8	{d16-d17}, [r0]
   171b4:	vld1.8	{d16-d17}, [r1]
   171b8:	vst1.8	{d16-d17}, [ip]
   171bc:	bne	17174 <__assert_fail@plt+0x56e8>
   171c0:	ldr	r0, [sp, #24]
   171c4:	cmp	r0, #0
   171c8:	beq	171e8 <__assert_fail@plt+0x575c>
   171cc:	add	r7, r4, r3
   171d0:	add	r3, r5, r3
   171d4:	rsb	r2, r0, #0
   171d8:	vld1.8	{d16-d17}, [r3]!
   171dc:	adds	r2, r2, #1
   171e0:	vst1.8	{d16-d17}, [r7]!
   171e4:	bcc	171d8 <__assert_fail@plt+0x574c>
   171e8:	ldr	r0, [sp, #16]
   171ec:	add	r4, r4, r0
   171f0:	cmp	r0, r9
   171f4:	beq	179c0 <__assert_fail@plt+0x5f34>
   171f8:	add	r5, r5, r0
   171fc:	ldr	r1, [sp, #28]
   17200:	ldr	r2, [sp, #20]
   17204:	ldrb	r0, [r5], #1
   17208:	cmp	r8, r5
   1720c:	strb	r0, [r4], #1
   17210:	bne	17204 <__assert_fail@plt+0x5778>
   17214:	b	19228 <__assert_fail@plt+0x779c>
   17218:	mov	r5, r4
   1721c:	cmp	r5, r8
   17220:	bcs	18710 <__assert_fail@plt+0x6c84>
   17224:	ldr	r1, [sp, #28]
   17228:	sub	r0, sl, r5
   1722c:	add	r9, r1, r0
   17230:	cmp	r9, #16
   17234:	bcc	17308 <__assert_fail@plt+0x587c>
   17238:	cmp	r4, r8
   1723c:	addcc	r1, r4, r9
   17240:	cmpcc	r5, r1
   17244:	bcc	17308 <__assert_fail@plt+0x587c>
   17248:	bic	r0, r9, #15
   1724c:	mov	r2, #1
   17250:	mov	r3, #0
   17254:	sub	r6, r0, #16
   17258:	str	r0, [sp, #16]
   1725c:	add	r7, r2, r6, lsr #4
   17260:	cmp	r6, #48	; 0x30
   17264:	and	r0, r7, #3
   17268:	str	r0, [sp, #24]
   1726c:	bcc	172cc <__assert_fail@plt+0x5840>
   17270:	ldr	r0, [sp, #24]
   17274:	mov	r3, #0
   17278:	mov	sl, #48	; 0x30
   1727c:	sub	r7, r7, r0
   17280:	add	r2, r5, r3
   17284:	add	r0, r4, r3
   17288:	subs	r7, r7, #4
   1728c:	add	r3, r3, #64	; 0x40
   17290:	mov	r1, r2
   17294:	mov	ip, r0
   17298:	add	lr, r2, #16
   1729c:	add	r6, r0, #16
   172a0:	add	r2, r2, #32
   172a4:	add	r0, r0, #32
   172a8:	vld1.8	{d16-d17}, [r1], sl
   172ac:	vst1.8	{d16-d17}, [ip], sl
   172b0:	vld1.8	{d16-d17}, [lr]
   172b4:	vst1.8	{d16-d17}, [r6]
   172b8:	vld1.8	{d16-d17}, [r2]
   172bc:	vst1.8	{d16-d17}, [r0]
   172c0:	vld1.8	{d16-d17}, [r1]
   172c4:	vst1.8	{d16-d17}, [ip]
   172c8:	bne	17280 <__assert_fail@plt+0x57f4>
   172cc:	ldr	r0, [sp, #24]
   172d0:	cmp	r0, #0
   172d4:	beq	172f4 <__assert_fail@plt+0x5868>
   172d8:	add	r7, r4, r3
   172dc:	add	r3, r5, r3
   172e0:	rsb	r2, r0, #0
   172e4:	vld1.8	{d16-d17}, [r3]!
   172e8:	adds	r2, r2, #1
   172ec:	vst1.8	{d16-d17}, [r7]!
   172f0:	bcc	172e4 <__assert_fail@plt+0x5858>
   172f4:	ldr	r0, [sp, #16]
   172f8:	add	r4, r4, r0
   172fc:	cmp	r0, r9
   17300:	beq	18710 <__assert_fail@plt+0x6c84>
   17304:	add	r5, r5, r0
   17308:	ldr	r1, [sp, #28]
   1730c:	ldr	r2, [sp, #20]
   17310:	ldrb	r0, [r5], #1
   17314:	cmp	r8, r5
   17318:	strb	r0, [r4], #1
   1731c:	bne	17310 <__assert_fail@plt+0x5884>
   17320:	b	18718 <__assert_fail@plt+0x6c8c>
   17324:	mov	r5, r4
   17328:	cmp	r5, r8
   1732c:	bcs	18710 <__assert_fail@plt+0x6c84>
   17330:	ldr	r1, [sp, #28]
   17334:	sub	r0, sl, r5
   17338:	add	r9, r1, r0
   1733c:	cmp	r9, #16
   17340:	bcc	17414 <__assert_fail@plt+0x5988>
   17344:	cmp	r4, r8
   17348:	addcc	r1, r4, r9
   1734c:	cmpcc	r5, r1
   17350:	bcc	17414 <__assert_fail@plt+0x5988>
   17354:	bic	r0, r9, #15
   17358:	mov	r2, #1
   1735c:	mov	r3, #0
   17360:	sub	r6, r0, #16
   17364:	str	r0, [sp, #16]
   17368:	add	r7, r2, r6, lsr #4
   1736c:	cmp	r6, #48	; 0x30
   17370:	and	r0, r7, #3
   17374:	str	r0, [sp, #24]
   17378:	bcc	173d8 <__assert_fail@plt+0x594c>
   1737c:	ldr	r0, [sp, #24]
   17380:	mov	r3, #0
   17384:	mov	sl, #48	; 0x30
   17388:	sub	r7, r7, r0
   1738c:	add	r2, r5, r3
   17390:	add	r0, r4, r3
   17394:	subs	r7, r7, #4
   17398:	add	r3, r3, #64	; 0x40
   1739c:	mov	r1, r2
   173a0:	mov	ip, r0
   173a4:	add	lr, r2, #16
   173a8:	add	r6, r0, #16
   173ac:	add	r2, r2, #32
   173b0:	add	r0, r0, #32
   173b4:	vld1.8	{d16-d17}, [r1], sl
   173b8:	vst1.8	{d16-d17}, [ip], sl
   173bc:	vld1.8	{d16-d17}, [lr]
   173c0:	vst1.8	{d16-d17}, [r6]
   173c4:	vld1.8	{d16-d17}, [r2]
   173c8:	vst1.8	{d16-d17}, [r0]
   173cc:	vld1.8	{d16-d17}, [r1]
   173d0:	vst1.8	{d16-d17}, [ip]
   173d4:	bne	1738c <__assert_fail@plt+0x5900>
   173d8:	ldr	r0, [sp, #24]
   173dc:	cmp	r0, #0
   173e0:	beq	17400 <__assert_fail@plt+0x5974>
   173e4:	add	r7, r4, r3
   173e8:	add	r3, r5, r3
   173ec:	rsb	r2, r0, #0
   173f0:	vld1.8	{d16-d17}, [r3]!
   173f4:	adds	r2, r2, #1
   173f8:	vst1.8	{d16-d17}, [r7]!
   173fc:	bcc	173f0 <__assert_fail@plt+0x5964>
   17400:	ldr	r0, [sp, #16]
   17404:	add	r4, r4, r0
   17408:	cmp	r0, r9
   1740c:	beq	18710 <__assert_fail@plt+0x6c84>
   17410:	add	r5, r5, r0
   17414:	ldr	r1, [sp, #28]
   17418:	ldr	r2, [sp, #20]
   1741c:	ldrb	r0, [r5], #1
   17420:	cmp	r8, r5
   17424:	strb	r0, [r4], #1
   17428:	bne	1741c <__assert_fail@plt+0x5990>
   1742c:	b	18718 <__assert_fail@plt+0x6c8c>
   17430:	mov	r5, r9
   17434:	cmp	r5, r6
   17438:	bcs	1751c <__assert_fail@plt+0x5a90>
   1743c:	ldr	r1, [sp, #28]
   17440:	sub	r0, r8, r5
   17444:	add	sl, r1, r0
   17448:	cmp	sl, #16
   1744c:	bcc	191a4 <__assert_fail@plt+0x7718>
   17450:	cmp	r9, r6
   17454:	addcc	r1, r9, sl
   17458:	cmpcc	r5, r1
   1745c:	bcc	191a4 <__assert_fail@plt+0x7718>
   17460:	bic	r0, sl, #15
   17464:	mov	r2, #1
   17468:	mov	r3, #0
   1746c:	sub	r4, r0, #16
   17470:	str	r0, [sp, #12]
   17474:	add	r7, r2, r4, lsr #4
   17478:	cmp	r4, #48	; 0x30
   1747c:	and	r0, r7, #3
   17480:	str	r0, [sp, #24]
   17484:	bcc	174e4 <__assert_fail@plt+0x5a58>
   17488:	ldr	r0, [sp, #24]
   1748c:	mov	r3, #0
   17490:	mov	r8, #48	; 0x30
   17494:	sub	r7, r7, r0
   17498:	add	r2, r5, r3
   1749c:	add	r0, r9, r3
   174a0:	subs	r7, r7, #4
   174a4:	add	r3, r3, #64	; 0x40
   174a8:	mov	r1, r2
   174ac:	mov	ip, r0
   174b0:	add	lr, r2, #16
   174b4:	add	r4, r0, #16
   174b8:	add	r2, r2, #32
   174bc:	add	r0, r0, #32
   174c0:	vld1.8	{d16-d17}, [r1], r8
   174c4:	vst1.8	{d16-d17}, [ip], r8
   174c8:	vld1.8	{d16-d17}, [lr]
   174cc:	vst1.8	{d16-d17}, [r4]
   174d0:	vld1.8	{d16-d17}, [r2]
   174d4:	vst1.8	{d16-d17}, [r0]
   174d8:	vld1.8	{d16-d17}, [r1]
   174dc:	vst1.8	{d16-d17}, [ip]
   174e0:	bne	17498 <__assert_fail@plt+0x5a0c>
   174e4:	ldr	r0, [sp, #24]
   174e8:	cmp	r0, #0
   174ec:	beq	1750c <__assert_fail@plt+0x5a80>
   174f0:	add	r7, r9, r3
   174f4:	add	r3, r5, r3
   174f8:	rsb	r2, r0, #0
   174fc:	vld1.8	{d16-d17}, [r3]!
   17500:	adds	r2, r2, #1
   17504:	vst1.8	{d16-d17}, [r7]!
   17508:	bcc	174fc <__assert_fail@plt+0x5a70>
   1750c:	ldr	r0, [sp, #12]
   17510:	add	r9, r9, r0
   17514:	cmp	r0, sl
   17518:	bne	191a0 <__assert_fail@plt+0x7714>
   1751c:	ldr	r3, [sp, #20]
   17520:	ldr	r2, [sp, #16]
   17524:	b	191bc <__assert_fail@plt+0x7730>
   17528:	mov	r5, r4
   1752c:	cmp	r5, sl
   17530:	bcs	17e28 <__assert_fail@plt+0x639c>
   17534:	ldr	r1, [sp, #28]
   17538:	ldr	r2, [fp, #12]
   1753c:	sub	r0, r6, r5
   17540:	add	r8, r1, r0
   17544:	cmp	r8, #16
   17548:	bcc	17624 <__assert_fail@plt+0x5b98>
   1754c:	cmp	r4, sl
   17550:	addcc	r0, r4, r8
   17554:	cmpcc	r5, r0
   17558:	bcc	17624 <__assert_fail@plt+0x5b98>
   1755c:	bic	r0, r8, #15
   17560:	mov	r2, #1
   17564:	mov	r3, #0
   17568:	sub	r7, r0, #16
   1756c:	str	r0, [sp, #20]
   17570:	add	r2, r2, r7, lsr #4
   17574:	cmp	r7, #48	; 0x30
   17578:	and	r0, r2, #3
   1757c:	str	r0, [sp, #24]
   17580:	bcc	175e0 <__assert_fail@plt+0x5b54>
   17584:	ldr	r0, [sp, #24]
   17588:	mov	r3, #0
   1758c:	mov	r9, #48	; 0x30
   17590:	sub	r7, r2, r0
   17594:	add	r1, r5, r3
   17598:	add	r2, r4, r3
   1759c:	subs	r7, r7, #4
   175a0:	add	r3, r3, #64	; 0x40
   175a4:	mov	lr, r1
   175a8:	mov	r6, r2
   175ac:	add	ip, r1, #16
   175b0:	add	r0, r2, #16
   175b4:	vld1.8	{d16-d17}, [lr], r9
   175b8:	vst1.8	{d16-d17}, [r6], r9
   175bc:	vld1.8	{d16-d17}, [ip]
   175c0:	vst1.8	{d16-d17}, [r0]
   175c4:	add	r0, r1, #32
   175c8:	vld1.8	{d16-d17}, [r0]
   175cc:	add	r0, r2, #32
   175d0:	vst1.8	{d16-d17}, [r0]
   175d4:	vld1.8	{d16-d17}, [lr]
   175d8:	vst1.8	{d16-d17}, [r6]
   175dc:	bne	17594 <__assert_fail@plt+0x5b08>
   175e0:	ldr	r0, [sp, #24]
   175e4:	cmp	r0, #0
   175e8:	beq	17608 <__assert_fail@plt+0x5b7c>
   175ec:	add	r2, r4, r3
   175f0:	add	r3, r5, r3
   175f4:	rsb	r7, r0, #0
   175f8:	vld1.8	{d16-d17}, [r3]!
   175fc:	adds	r7, r7, #1
   17600:	vst1.8	{d16-d17}, [r2]!
   17604:	bcc	175f8 <__assert_fail@plt+0x5b6c>
   17608:	ldr	r0, [sp, #20]
   1760c:	ldr	r1, [sp, #28]
   17610:	ldr	r2, [fp, #12]
   17614:	add	r4, r4, r0
   17618:	cmp	r0, r8
   1761c:	beq	1926c <__assert_fail@plt+0x77e0>
   17620:	add	r5, r5, r0
   17624:	ldrb	r0, [r5], #1
   17628:	cmp	sl, r5
   1762c:	strb	r0, [r4], #1
   17630:	bne	17624 <__assert_fail@plt+0x5b98>
   17634:	b	1926c <__assert_fail@plt+0x77e0>
   17638:	mov	r5, r8
   1763c:	cmp	r5, r6
   17640:	bcs	18ff8 <__assert_fail@plt+0x756c>
   17644:	ldr	r0, [sp, #24]
   17648:	ldr	r1, [sp, #28]
   1764c:	sub	r0, r0, r5
   17650:	add	r2, r1, r0
   17654:	cmp	r2, #16
   17658:	bcc	17738 <__assert_fail@plt+0x5cac>
   1765c:	cmp	r8, r6
   17660:	addcc	r0, r8, r2
   17664:	cmpcc	r5, r0
   17668:	bcc	17738 <__assert_fail@plt+0x5cac>
   1766c:	bic	r0, r2, #15
   17670:	str	r2, [sp, #16]
   17674:	mov	r2, #1
   17678:	mov	r3, #0
   1767c:	sub	r4, r0, #16
   17680:	str	r0, [sp, #12]
   17684:	add	r7, r2, r4, lsr #4
   17688:	cmp	r4, #48	; 0x30
   1768c:	and	r0, r7, #3
   17690:	str	r0, [sp, #24]
   17694:	bcc	176f4 <__assert_fail@plt+0x5c68>
   17698:	ldr	r0, [sp, #24]
   1769c:	mov	r3, #0
   176a0:	mov	r9, #48	; 0x30
   176a4:	sub	r7, r7, r0
   176a8:	add	r2, r5, r3
   176ac:	add	r0, r8, r3
   176b0:	subs	r7, r7, #4
   176b4:	add	r3, r3, #64	; 0x40
   176b8:	mov	r1, r2
   176bc:	mov	ip, r0
   176c0:	add	lr, r2, #16
   176c4:	add	r4, r0, #16
   176c8:	add	r2, r2, #32
   176cc:	add	r0, r0, #32
   176d0:	vld1.8	{d16-d17}, [r1], r9
   176d4:	vst1.8	{d16-d17}, [ip], r9
   176d8:	vld1.8	{d16-d17}, [lr]
   176dc:	vst1.8	{d16-d17}, [r4]
   176e0:	vld1.8	{d16-d17}, [r2]
   176e4:	vst1.8	{d16-d17}, [r0]
   176e8:	vld1.8	{d16-d17}, [r1]
   176ec:	vst1.8	{d16-d17}, [ip]
   176f0:	bne	176a8 <__assert_fail@plt+0x5c1c>
   176f4:	ldr	r0, [sp, #24]
   176f8:	cmp	r0, #0
   176fc:	beq	1771c <__assert_fail@plt+0x5c90>
   17700:	add	r7, r8, r3
   17704:	add	r3, r5, r3
   17708:	rsb	r2, r0, #0
   1770c:	vld1.8	{d16-d17}, [r3]!
   17710:	adds	r2, r2, #1
   17714:	vst1.8	{d16-d17}, [r7]!
   17718:	bcc	1770c <__assert_fail@plt+0x5c80>
   1771c:	ldr	r2, [sp, #12]
   17720:	ldr	r0, [sp, #16]
   17724:	ldr	r1, [sp, #28]
   17728:	add	r8, r8, r2
   1772c:	cmp	r2, r0
   17730:	beq	18ffc <__assert_fail@plt+0x7570>
   17734:	add	r5, r5, r2
   17738:	ldrb	r0, [r5], #1
   1773c:	cmp	r6, r5
   17740:	strb	r0, [r8], #1
   17744:	bne	17738 <__assert_fail@plt+0x5cac>
   17748:	b	18ffc <__assert_fail@plt+0x7570>
   1774c:	ldr	sl, [r0]
   17750:	ldr	r3, [r0, #4]
   17754:	cmp	r2, #76	; 0x4c
   17758:	str	r8, [sp, #24]
   1775c:	bne	18794 <__assert_fail@plt+0x6d08>
   17760:	lsr	r0, sl, #12
   17764:	mov	r1, r9
   17768:	mov	r2, r8
   1776c:	add	r9, r9, r8
   17770:	orr	r8, r0, r3, lsl #20
   17774:	add	r7, r1, #1
   17778:	cmp	r2, #2
   1777c:	bfi	r8, sl, #0, #8
   17780:	blt	18ca4 <__assert_fail@plt+0x7218>
   17784:	movw	r4, #16201	; 0x3f49
   17788:	movw	sl, #14722	; 0x3982
   1778c:	mov	r5, r7
   17790:	movt	r4, #2
   17794:	movt	sl, #2
   17798:	ldrb	r6, [r5]
   1779c:	mov	r0, r4
   177a0:	mov	r2, #8
   177a4:	mov	r1, r6
   177a8:	bl	11948 <memchr@plt>
   177ac:	cmp	r0, #0
   177b0:	beq	18ca8 <__assert_fail@plt+0x721c>
   177b4:	mov	r0, sl
   177b8:	mov	r1, r6
   177bc:	mov	r2, #4
   177c0:	bl	11948 <memchr@plt>
   177c4:	cmp	r0, #0
   177c8:	add	r5, r5, #1
   177cc:	strbne	r6, [r7], #1
   177d0:	cmp	r5, r9
   177d4:	bcc	17798 <__assert_fail@plt+0x5d0c>
   177d8:	b	18ca8 <__assert_fail@plt+0x721c>
   177dc:	mov	r6, r9
   177e0:	cmp	r6, r4
   177e4:	bcs	178c8 <__assert_fail@plt+0x5e3c>
   177e8:	ldr	r1, [sp, #28]
   177ec:	sub	r0, r8, r6
   177f0:	add	sl, r1, r0
   177f4:	cmp	sl, #16
   177f8:	bcc	191cc <__assert_fail@plt+0x7740>
   177fc:	cmp	r9, r4
   17800:	addcc	r1, r9, sl
   17804:	cmpcc	r6, r1
   17808:	bcc	191cc <__assert_fail@plt+0x7740>
   1780c:	bic	r0, sl, #15
   17810:	mov	r2, #1
   17814:	mov	r3, #0
   17818:	sub	r5, r0, #16
   1781c:	str	r0, [sp, #12]
   17820:	add	r7, r2, r5, lsr #4
   17824:	cmp	r5, #48	; 0x30
   17828:	and	r0, r7, #3
   1782c:	str	r0, [sp, #24]
   17830:	bcc	17890 <__assert_fail@plt+0x5e04>
   17834:	ldr	r0, [sp, #24]
   17838:	mov	r3, #0
   1783c:	mov	r8, #48	; 0x30
   17840:	sub	r7, r7, r0
   17844:	add	r2, r6, r3
   17848:	add	r0, r9, r3
   1784c:	subs	r7, r7, #4
   17850:	add	r3, r3, #64	; 0x40
   17854:	mov	r1, r2
   17858:	mov	ip, r0
   1785c:	add	lr, r2, #16
   17860:	add	r5, r0, #16
   17864:	add	r2, r2, #32
   17868:	add	r0, r0, #32
   1786c:	vld1.8	{d16-d17}, [r1], r8
   17870:	vst1.8	{d16-d17}, [ip], r8
   17874:	vld1.8	{d16-d17}, [lr]
   17878:	vst1.8	{d16-d17}, [r5]
   1787c:	vld1.8	{d16-d17}, [r2]
   17880:	vst1.8	{d16-d17}, [r0]
   17884:	vld1.8	{d16-d17}, [r1]
   17888:	vst1.8	{d16-d17}, [ip]
   1788c:	bne	17844 <__assert_fail@plt+0x5db8>
   17890:	ldr	r0, [sp, #24]
   17894:	cmp	r0, #0
   17898:	beq	178b8 <__assert_fail@plt+0x5e2c>
   1789c:	add	r7, r9, r3
   178a0:	add	r3, r6, r3
   178a4:	rsb	r2, r0, #0
   178a8:	vld1.8	{d16-d17}, [r3]!
   178ac:	adds	r2, r2, #1
   178b0:	vst1.8	{d16-d17}, [r7]!
   178b4:	bcc	178a8 <__assert_fail@plt+0x5e1c>
   178b8:	ldr	r0, [sp, #12]
   178bc:	add	r9, r9, r0
   178c0:	cmp	r0, sl
   178c4:	bne	191c8 <__assert_fail@plt+0x773c>
   178c8:	ldr	r3, [sp, #20]
   178cc:	ldr	r2, [sp, #16]
   178d0:	b	191e4 <__assert_fail@plt+0x7758>
   178d4:	mov	r5, r4
   178d8:	cmp	r5, r8
   178dc:	bcs	179c0 <__assert_fail@plt+0x5f34>
   178e0:	ldr	r1, [sp, #28]
   178e4:	sub	r0, r7, r5
   178e8:	add	r9, r1, r0
   178ec:	cmp	r9, #16
   178f0:	bcc	19210 <__assert_fail@plt+0x7784>
   178f4:	cmp	r4, r8
   178f8:	addcc	r1, r4, r9
   178fc:	cmpcc	r5, r1
   17900:	bcc	19210 <__assert_fail@plt+0x7784>
   17904:	bic	r0, r9, #15
   17908:	mov	r2, #1
   1790c:	mov	r3, #0
   17910:	sub	r6, r0, #16
   17914:	str	r0, [sp, #16]
   17918:	add	r2, r2, r6, lsr #4
   1791c:	cmp	r6, #48	; 0x30
   17920:	and	r0, r2, #3
   17924:	str	r0, [sp, #24]
   17928:	bcc	17988 <__assert_fail@plt+0x5efc>
   1792c:	ldr	r0, [sp, #24]
   17930:	mov	r3, #0
   17934:	mov	sl, #48	; 0x30
   17938:	sub	r6, r2, r0
   1793c:	add	r1, r5, r3
   17940:	add	r2, r4, r3
   17944:	subs	r6, r6, #4
   17948:	add	r3, r3, #64	; 0x40
   1794c:	mov	r0, r1
   17950:	mov	ip, r2
   17954:	add	lr, r1, #16
   17958:	add	r7, r2, #16
   1795c:	add	r1, r1, #32
   17960:	vld1.8	{d16-d17}, [r0], sl
   17964:	vst1.8	{d16-d17}, [ip], sl
   17968:	vld1.8	{d16-d17}, [lr]
   1796c:	vst1.8	{d16-d17}, [r7]
   17970:	vld1.8	{d16-d17}, [r1]
   17974:	add	r1, r2, #32
   17978:	vst1.8	{d16-d17}, [r1]
   1797c:	vld1.8	{d16-d17}, [r0]
   17980:	vst1.8	{d16-d17}, [ip]
   17984:	bne	1793c <__assert_fail@plt+0x5eb0>
   17988:	ldr	r0, [sp, #24]
   1798c:	cmp	r0, #0
   17990:	beq	179b0 <__assert_fail@plt+0x5f24>
   17994:	add	r2, r4, r3
   17998:	add	r3, r5, r3
   1799c:	rsb	r6, r0, #0
   179a0:	vld1.8	{d16-d17}, [r3]!
   179a4:	adds	r6, r6, #1
   179a8:	vst1.8	{d16-d17}, [r2]!
   179ac:	bcc	179a0 <__assert_fail@plt+0x5f14>
   179b0:	ldr	r0, [sp, #16]
   179b4:	add	r4, r4, r0
   179b8:	cmp	r0, r9
   179bc:	bne	1920c <__assert_fail@plt+0x7780>
   179c0:	ldr	r1, [sp, #28]
   179c4:	ldr	r2, [sp, #20]
   179c8:	b	19228 <__assert_fail@plt+0x779c>
   179cc:	mov	r5, r4
   179d0:	cmp	r5, r8
   179d4:	bcs	18710 <__assert_fail@plt+0x6c84>
   179d8:	ldr	r1, [sp, #28]
   179dc:	sub	r0, sl, r5
   179e0:	add	r9, r1, r0
   179e4:	cmp	r9, #16
   179e8:	bcc	17abc <__assert_fail@plt+0x6030>
   179ec:	cmp	r4, r8
   179f0:	addcc	r1, r4, r9
   179f4:	cmpcc	r5, r1
   179f8:	bcc	17abc <__assert_fail@plt+0x6030>
   179fc:	bic	r0, r9, #15
   17a00:	mov	r2, #1
   17a04:	mov	r3, #0
   17a08:	sub	r6, r0, #16
   17a0c:	str	r0, [sp, #16]
   17a10:	add	r7, r2, r6, lsr #4
   17a14:	cmp	r6, #48	; 0x30
   17a18:	and	r0, r7, #3
   17a1c:	str	r0, [sp, #24]
   17a20:	bcc	17a80 <__assert_fail@plt+0x5ff4>
   17a24:	ldr	r0, [sp, #24]
   17a28:	mov	r3, #0
   17a2c:	mov	sl, #48	; 0x30
   17a30:	sub	r7, r7, r0
   17a34:	add	r2, r5, r3
   17a38:	add	r0, r4, r3
   17a3c:	subs	r7, r7, #4
   17a40:	add	r3, r3, #64	; 0x40
   17a44:	mov	r1, r2
   17a48:	mov	ip, r0
   17a4c:	add	lr, r2, #16
   17a50:	add	r6, r0, #16
   17a54:	add	r2, r2, #32
   17a58:	add	r0, r0, #32
   17a5c:	vld1.8	{d16-d17}, [r1], sl
   17a60:	vst1.8	{d16-d17}, [ip], sl
   17a64:	vld1.8	{d16-d17}, [lr]
   17a68:	vst1.8	{d16-d17}, [r6]
   17a6c:	vld1.8	{d16-d17}, [r2]
   17a70:	vst1.8	{d16-d17}, [r0]
   17a74:	vld1.8	{d16-d17}, [r1]
   17a78:	vst1.8	{d16-d17}, [ip]
   17a7c:	bne	17a34 <__assert_fail@plt+0x5fa8>
   17a80:	ldr	r0, [sp, #24]
   17a84:	cmp	r0, #0
   17a88:	beq	17aa8 <__assert_fail@plt+0x601c>
   17a8c:	add	r7, r4, r3
   17a90:	add	r3, r5, r3
   17a94:	rsb	r2, r0, #0
   17a98:	vld1.8	{d16-d17}, [r3]!
   17a9c:	adds	r2, r2, #1
   17aa0:	vst1.8	{d16-d17}, [r7]!
   17aa4:	bcc	17a98 <__assert_fail@plt+0x600c>
   17aa8:	ldr	r0, [sp, #16]
   17aac:	add	r4, r4, r0
   17ab0:	cmp	r0, r9
   17ab4:	beq	18710 <__assert_fail@plt+0x6c84>
   17ab8:	add	r5, r5, r0
   17abc:	ldr	r1, [sp, #28]
   17ac0:	ldr	r2, [sp, #20]
   17ac4:	ldrb	r0, [r5], #1
   17ac8:	cmp	r8, r5
   17acc:	strb	r0, [r4], #1
   17ad0:	bne	17ac4 <__assert_fail@plt+0x6038>
   17ad4:	b	18718 <__assert_fail@plt+0x6c8c>
   17ad8:	mov	r5, r4
   17adc:	cmp	r5, sl
   17ae0:	bcs	182d4 <__assert_fail@plt+0x6848>
   17ae4:	ldr	r1, [sp, #28]
   17ae8:	sub	r0, r6, r5
   17aec:	add	r8, r1, r0
   17af0:	cmp	r8, #16
   17af4:	bcc	17bcc <__assert_fail@plt+0x6140>
   17af8:	cmp	r4, sl
   17afc:	addcc	r0, r4, r8
   17b00:	cmpcc	r5, r0
   17b04:	bcc	17bcc <__assert_fail@plt+0x6140>
   17b08:	bic	r0, r8, #15
   17b0c:	mov	r2, #1
   17b10:	mov	r3, #0
   17b14:	sub	r7, r0, #16
   17b18:	str	r0, [sp, #20]
   17b1c:	add	r2, r2, r7, lsr #4
   17b20:	cmp	r7, #48	; 0x30
   17b24:	and	r0, r2, #3
   17b28:	str	r0, [sp, #24]
   17b2c:	bcc	17b8c <__assert_fail@plt+0x6100>
   17b30:	ldr	r0, [sp, #24]
   17b34:	mov	r3, #0
   17b38:	mov	r9, #48	; 0x30
   17b3c:	sub	r7, r2, r0
   17b40:	add	r1, r5, r3
   17b44:	add	r2, r4, r3
   17b48:	subs	r7, r7, #4
   17b4c:	add	r3, r3, #64	; 0x40
   17b50:	mov	lr, r1
   17b54:	mov	r6, r2
   17b58:	add	ip, r1, #16
   17b5c:	add	r0, r2, #16
   17b60:	vld1.8	{d16-d17}, [lr], r9
   17b64:	vst1.8	{d16-d17}, [r6], r9
   17b68:	vld1.8	{d16-d17}, [ip]
   17b6c:	vst1.8	{d16-d17}, [r0]
   17b70:	add	r0, r1, #32
   17b74:	vld1.8	{d16-d17}, [r0]
   17b78:	add	r0, r2, #32
   17b7c:	vst1.8	{d16-d17}, [r0]
   17b80:	vld1.8	{d16-d17}, [lr]
   17b84:	vst1.8	{d16-d17}, [r6]
   17b88:	bne	17b40 <__assert_fail@plt+0x60b4>
   17b8c:	ldr	r0, [sp, #24]
   17b90:	cmp	r0, #0
   17b94:	beq	17bb4 <__assert_fail@plt+0x6128>
   17b98:	add	r2, r4, r3
   17b9c:	add	r3, r5, r3
   17ba0:	rsb	r7, r0, #0
   17ba4:	vld1.8	{d16-d17}, [r3]!
   17ba8:	adds	r7, r7, #1
   17bac:	vst1.8	{d16-d17}, [r2]!
   17bb0:	bcc	17ba4 <__assert_fail@plt+0x6118>
   17bb4:	ldr	r0, [sp, #20]
   17bb8:	ldr	r1, [sp, #28]
   17bbc:	add	r4, r4, r0
   17bc0:	cmp	r0, r8
   17bc4:	beq	182d8 <__assert_fail@plt+0x684c>
   17bc8:	add	r5, r5, r0
   17bcc:	ldrb	r0, [r5], #1
   17bd0:	cmp	sl, r5
   17bd4:	strb	r0, [r4], #1
   17bd8:	bne	17bcc <__assert_fail@plt+0x6140>
   17bdc:	b	182d8 <__assert_fail@plt+0x684c>
   17be0:	mov	r5, r4
   17be4:	cmp	r5, sl
   17be8:	bcs	182d4 <__assert_fail@plt+0x6848>
   17bec:	ldr	r1, [sp, #28]
   17bf0:	sub	r0, r6, r5
   17bf4:	add	r8, r1, r0
   17bf8:	cmp	r8, #16
   17bfc:	bcc	17cd4 <__assert_fail@plt+0x6248>
   17c00:	cmp	r4, sl
   17c04:	addcc	r0, r4, r8
   17c08:	cmpcc	r5, r0
   17c0c:	bcc	17cd4 <__assert_fail@plt+0x6248>
   17c10:	bic	r0, r8, #15
   17c14:	mov	r2, #1
   17c18:	mov	r3, #0
   17c1c:	sub	r7, r0, #16
   17c20:	str	r0, [sp, #20]
   17c24:	add	r2, r2, r7, lsr #4
   17c28:	cmp	r7, #48	; 0x30
   17c2c:	and	r0, r2, #3
   17c30:	str	r0, [sp, #24]
   17c34:	bcc	17c94 <__assert_fail@plt+0x6208>
   17c38:	ldr	r0, [sp, #24]
   17c3c:	mov	r3, #0
   17c40:	mov	r9, #48	; 0x30
   17c44:	sub	r7, r2, r0
   17c48:	add	r1, r5, r3
   17c4c:	add	r2, r4, r3
   17c50:	subs	r7, r7, #4
   17c54:	add	r3, r3, #64	; 0x40
   17c58:	mov	lr, r1
   17c5c:	mov	r6, r2
   17c60:	add	ip, r1, #16
   17c64:	add	r0, r2, #16
   17c68:	vld1.8	{d16-d17}, [lr], r9
   17c6c:	vst1.8	{d16-d17}, [r6], r9
   17c70:	vld1.8	{d16-d17}, [ip]
   17c74:	vst1.8	{d16-d17}, [r0]
   17c78:	add	r0, r1, #32
   17c7c:	vld1.8	{d16-d17}, [r0]
   17c80:	add	r0, r2, #32
   17c84:	vst1.8	{d16-d17}, [r0]
   17c88:	vld1.8	{d16-d17}, [lr]
   17c8c:	vst1.8	{d16-d17}, [r6]
   17c90:	bne	17c48 <__assert_fail@plt+0x61bc>
   17c94:	ldr	r0, [sp, #24]
   17c98:	cmp	r0, #0
   17c9c:	beq	17cbc <__assert_fail@plt+0x6230>
   17ca0:	add	r2, r4, r3
   17ca4:	add	r3, r5, r3
   17ca8:	rsb	r7, r0, #0
   17cac:	vld1.8	{d16-d17}, [r3]!
   17cb0:	adds	r7, r7, #1
   17cb4:	vst1.8	{d16-d17}, [r2]!
   17cb8:	bcc	17cac <__assert_fail@plt+0x6220>
   17cbc:	ldr	r0, [sp, #20]
   17cc0:	ldr	r1, [sp, #28]
   17cc4:	add	r4, r4, r0
   17cc8:	cmp	r0, r8
   17ccc:	beq	182d8 <__assert_fail@plt+0x684c>
   17cd0:	add	r5, r5, r0
   17cd4:	ldrb	r0, [r5], #1
   17cd8:	cmp	sl, r5
   17cdc:	strb	r0, [r4], #1
   17ce0:	bne	17cd4 <__assert_fail@plt+0x6248>
   17ce4:	b	182d8 <__assert_fail@plt+0x684c>
   17ce8:	mov	r5, r4
   17cec:	cmp	r5, sl
   17cf0:	bcs	182d4 <__assert_fail@plt+0x6848>
   17cf4:	ldr	r1, [sp, #28]
   17cf8:	sub	r0, r6, r5
   17cfc:	add	r8, r1, r0
   17d00:	cmp	r8, #16
   17d04:	bcc	17ddc <__assert_fail@plt+0x6350>
   17d08:	cmp	r4, sl
   17d0c:	addcc	r0, r4, r8
   17d10:	cmpcc	r5, r0
   17d14:	bcc	17ddc <__assert_fail@plt+0x6350>
   17d18:	bic	r0, r8, #15
   17d1c:	mov	r2, #1
   17d20:	mov	r3, #0
   17d24:	sub	r7, r0, #16
   17d28:	str	r0, [sp, #20]
   17d2c:	add	r2, r2, r7, lsr #4
   17d30:	cmp	r7, #48	; 0x30
   17d34:	and	r0, r2, #3
   17d38:	str	r0, [sp, #24]
   17d3c:	bcc	17d9c <__assert_fail@plt+0x6310>
   17d40:	ldr	r0, [sp, #24]
   17d44:	mov	r3, #0
   17d48:	mov	r9, #48	; 0x30
   17d4c:	sub	r7, r2, r0
   17d50:	add	r1, r5, r3
   17d54:	add	r2, r4, r3
   17d58:	subs	r7, r7, #4
   17d5c:	add	r3, r3, #64	; 0x40
   17d60:	mov	lr, r1
   17d64:	mov	r6, r2
   17d68:	add	ip, r1, #16
   17d6c:	add	r0, r2, #16
   17d70:	vld1.8	{d16-d17}, [lr], r9
   17d74:	vst1.8	{d16-d17}, [r6], r9
   17d78:	vld1.8	{d16-d17}, [ip]
   17d7c:	vst1.8	{d16-d17}, [r0]
   17d80:	add	r0, r1, #32
   17d84:	vld1.8	{d16-d17}, [r0]
   17d88:	add	r0, r2, #32
   17d8c:	vst1.8	{d16-d17}, [r0]
   17d90:	vld1.8	{d16-d17}, [lr]
   17d94:	vst1.8	{d16-d17}, [r6]
   17d98:	bne	17d50 <__assert_fail@plt+0x62c4>
   17d9c:	ldr	r0, [sp, #24]
   17da0:	cmp	r0, #0
   17da4:	beq	17dc4 <__assert_fail@plt+0x6338>
   17da8:	add	r2, r4, r3
   17dac:	add	r3, r5, r3
   17db0:	rsb	r7, r0, #0
   17db4:	vld1.8	{d16-d17}, [r3]!
   17db8:	adds	r7, r7, #1
   17dbc:	vst1.8	{d16-d17}, [r2]!
   17dc0:	bcc	17db4 <__assert_fail@plt+0x6328>
   17dc4:	ldr	r0, [sp, #20]
   17dc8:	ldr	r1, [sp, #28]
   17dcc:	add	r4, r4, r0
   17dd0:	cmp	r0, r8
   17dd4:	beq	182d8 <__assert_fail@plt+0x684c>
   17dd8:	add	r5, r5, r0
   17ddc:	ldrb	r0, [r5], #1
   17de0:	cmp	sl, r5
   17de4:	strb	r0, [r4], #1
   17de8:	bne	17ddc <__assert_fail@plt+0x6350>
   17dec:	b	182d8 <__assert_fail@plt+0x684c>
   17df0:	ldr	r1, [sp, #28]
   17df4:	movw	r0, #27756	; 0x6c6c
   17df8:	mov	r7, #0
   17dfc:	mov	r2, #512	; 0x200
   17e00:	movt	r0, #117	; 0x75
   17e04:	str	r0, [r4]
   17e08:	b	19238 <__assert_fail@plt+0x77ac>
   17e0c:	ldr	r1, [sp, #28]
   17e10:	movw	r0, #27756	; 0x6c6c
   17e14:	mov	r7, #0
   17e18:	mov	r2, sl
   17e1c:	movt	r0, #111	; 0x6f
   17e20:	str	r0, [r4]
   17e24:	b	19238 <__assert_fail@plt+0x77ac>
   17e28:	ldr	r1, [sp, #28]
   17e2c:	ldr	r2, [fp, #12]
   17e30:	b	1926c <__assert_fail@plt+0x77e0>
   17e34:	mov	r0, ip
   17e38:	mov	r1, sl
   17e3c:	bl	19ba0 <__assert_fail@plt+0x8114>
   17e40:	cmp	r0, #0
   17e44:	beq	189a8 <__assert_fail@plt+0x6f1c>
   17e48:	mov	r5, r0
   17e4c:	bl	19a50 <__assert_fail@plt+0x7fc4>
   17e50:	mov	r4, r0
   17e54:	mov	r7, #0
   17e58:	b	189b4 <__assert_fail@plt+0x6f28>
   17e5c:	movw	r0, #14714	; 0x397a
   17e60:	movt	r0, #2
   17e64:	str	r0, [sp, #20]
   17e68:	mov	r0, r8
   17e6c:	add	r8, r9, r8
   17e70:	add	r4, r9, #1
   17e74:	str	r9, [sp, #28]
   17e78:	mov	r7, r0
   17e7c:	cmp	r0, #2
   17e80:	blt	17edc <__assert_fail@plt+0x6450>
   17e84:	movw	sl, #16201	; 0x3f49
   17e88:	movw	r9, #16839	; 0x41c7
   17e8c:	mov	r5, r4
   17e90:	movt	sl, #2
   17e94:	movt	r9, #2
   17e98:	ldrb	r6, [r5]
   17e9c:	mov	r0, sl
   17ea0:	mov	r2, #8
   17ea4:	mov	r1, r6
   17ea8:	bl	11948 <memchr@plt>
   17eac:	cmp	r0, #0
   17eb0:	beq	17ee0 <__assert_fail@plt+0x6454>
   17eb4:	mov	r0, r9
   17eb8:	mov	r1, r6
   17ebc:	mov	r2, #2
   17ec0:	bl	11948 <memchr@plt>
   17ec4:	cmp	r0, #0
   17ec8:	add	r5, r5, #1
   17ecc:	strbne	r6, [r4], #1
   17ed0:	cmp	r5, r8
   17ed4:	bcc	17e98 <__assert_fail@plt+0x640c>
   17ed8:	b	17ee0 <__assert_fail@plt+0x6454>
   17edc:	mov	r5, r4
   17ee0:	cmp	r5, r8
   17ee4:	bcs	18154 <__assert_fail@plt+0x66c8>
   17ee8:	ldr	r1, [sp, #28]
   17eec:	sub	r0, r7, r5
   17ef0:	add	r9, r1, r0
   17ef4:	cmp	r9, #16
   17ef8:	bcc	17fcc <__assert_fail@plt+0x6540>
   17efc:	cmp	r4, r8
   17f00:	addcc	r1, r4, r9
   17f04:	cmpcc	r5, r1
   17f08:	bcc	17fcc <__assert_fail@plt+0x6540>
   17f0c:	bic	r0, r9, #15
   17f10:	mov	r2, #1
   17f14:	mov	r3, #0
   17f18:	sub	r6, r0, #16
   17f1c:	str	r0, [sp, #16]
   17f20:	add	r2, r2, r6, lsr #4
   17f24:	cmp	r6, #48	; 0x30
   17f28:	and	r0, r2, #3
   17f2c:	str	r0, [sp, #24]
   17f30:	bcc	17f90 <__assert_fail@plt+0x6504>
   17f34:	ldr	r0, [sp, #24]
   17f38:	mov	r3, #0
   17f3c:	mov	sl, #48	; 0x30
   17f40:	sub	r6, r2, r0
   17f44:	add	r1, r5, r3
   17f48:	add	r2, r4, r3
   17f4c:	subs	r6, r6, #4
   17f50:	add	r3, r3, #64	; 0x40
   17f54:	mov	r0, r1
   17f58:	mov	ip, r2
   17f5c:	add	lr, r1, #16
   17f60:	add	r7, r2, #16
   17f64:	add	r1, r1, #32
   17f68:	vld1.8	{d16-d17}, [r0], sl
   17f6c:	vst1.8	{d16-d17}, [ip], sl
   17f70:	vld1.8	{d16-d17}, [lr]
   17f74:	vst1.8	{d16-d17}, [r7]
   17f78:	vld1.8	{d16-d17}, [r1]
   17f7c:	add	r1, r2, #32
   17f80:	vst1.8	{d16-d17}, [r1]
   17f84:	vld1.8	{d16-d17}, [r0]
   17f88:	vst1.8	{d16-d17}, [ip]
   17f8c:	bne	17f44 <__assert_fail@plt+0x64b8>
   17f90:	ldr	r0, [sp, #24]
   17f94:	cmp	r0, #0
   17f98:	beq	17fb8 <__assert_fail@plt+0x652c>
   17f9c:	add	r2, r4, r3
   17fa0:	add	r3, r5, r3
   17fa4:	rsb	r6, r0, #0
   17fa8:	vld1.8	{d16-d17}, [r3]!
   17fac:	adds	r6, r6, #1
   17fb0:	vst1.8	{d16-d17}, [r2]!
   17fb4:	bcc	17fa8 <__assert_fail@plt+0x651c>
   17fb8:	ldr	r0, [sp, #16]
   17fbc:	add	r4, r4, r0
   17fc0:	cmp	r0, r9
   17fc4:	beq	18154 <__assert_fail@plt+0x66c8>
   17fc8:	add	r5, r5, r0
   17fcc:	ldr	r1, [sp, #28]
   17fd0:	ldr	r2, [sp, #20]
   17fd4:	ldrb	r0, [r5], #1
   17fd8:	cmp	r8, r5
   17fdc:	strb	r0, [r4], #1
   17fe0:	bne	17fd4 <__assert_fail@plt+0x6548>
   17fe4:	b	1926c <__assert_fail@plt+0x77e0>
   17fe8:	movw	r0, #14714	; 0x397a
   17fec:	movt	r0, #2
   17ff0:	str	r0, [sp, #20]
   17ff4:	mov	r0, r8
   17ff8:	add	r8, r9, r8
   17ffc:	add	r4, r9, #1
   18000:	str	r9, [sp, #28]
   18004:	mov	r7, r0
   18008:	cmp	r0, #2
   1800c:	blt	18068 <__assert_fail@plt+0x65dc>
   18010:	movw	sl, #16201	; 0x3f49
   18014:	movw	r9, #16839	; 0x41c7
   18018:	mov	r5, r4
   1801c:	movt	sl, #2
   18020:	movt	r9, #2
   18024:	ldrb	r6, [r5]
   18028:	mov	r0, sl
   1802c:	mov	r2, #8
   18030:	mov	r1, r6
   18034:	bl	11948 <memchr@plt>
   18038:	cmp	r0, #0
   1803c:	beq	1806c <__assert_fail@plt+0x65e0>
   18040:	mov	r0, r9
   18044:	mov	r1, r6
   18048:	mov	r2, #2
   1804c:	bl	11948 <memchr@plt>
   18050:	cmp	r0, #0
   18054:	add	r5, r5, #1
   18058:	strbne	r6, [r4], #1
   1805c:	cmp	r5, r8
   18060:	bcc	18024 <__assert_fail@plt+0x6598>
   18064:	b	1806c <__assert_fail@plt+0x65e0>
   18068:	mov	r5, r4
   1806c:	cmp	r5, r8
   18070:	bcs	18154 <__assert_fail@plt+0x66c8>
   18074:	ldr	r1, [sp, #28]
   18078:	sub	r0, r7, r5
   1807c:	add	r9, r1, r0
   18080:	cmp	r9, #16
   18084:	bcc	19254 <__assert_fail@plt+0x77c8>
   18088:	cmp	r4, r8
   1808c:	addcc	r1, r4, r9
   18090:	cmpcc	r5, r1
   18094:	bcc	19254 <__assert_fail@plt+0x77c8>
   18098:	bic	r0, r9, #15
   1809c:	mov	r2, #1
   180a0:	mov	r3, #0
   180a4:	sub	r6, r0, #16
   180a8:	str	r0, [sp, #16]
   180ac:	add	r2, r2, r6, lsr #4
   180b0:	cmp	r6, #48	; 0x30
   180b4:	and	r0, r2, #3
   180b8:	str	r0, [sp, #24]
   180bc:	bcc	1811c <__assert_fail@plt+0x6690>
   180c0:	ldr	r0, [sp, #24]
   180c4:	mov	r3, #0
   180c8:	mov	sl, #48	; 0x30
   180cc:	sub	r6, r2, r0
   180d0:	add	r1, r5, r3
   180d4:	add	r2, r4, r3
   180d8:	subs	r6, r6, #4
   180dc:	add	r3, r3, #64	; 0x40
   180e0:	mov	r0, r1
   180e4:	mov	ip, r2
   180e8:	add	lr, r1, #16
   180ec:	add	r7, r2, #16
   180f0:	add	r1, r1, #32
   180f4:	vld1.8	{d16-d17}, [r0], sl
   180f8:	vst1.8	{d16-d17}, [ip], sl
   180fc:	vld1.8	{d16-d17}, [lr]
   18100:	vst1.8	{d16-d17}, [r7]
   18104:	vld1.8	{d16-d17}, [r1]
   18108:	add	r1, r2, #32
   1810c:	vst1.8	{d16-d17}, [r1]
   18110:	vld1.8	{d16-d17}, [r0]
   18114:	vst1.8	{d16-d17}, [ip]
   18118:	bne	180d0 <__assert_fail@plt+0x6644>
   1811c:	ldr	r0, [sp, #24]
   18120:	cmp	r0, #0
   18124:	beq	18144 <__assert_fail@plt+0x66b8>
   18128:	add	r2, r4, r3
   1812c:	add	r3, r5, r3
   18130:	rsb	r6, r0, #0
   18134:	vld1.8	{d16-d17}, [r3]!
   18138:	adds	r6, r6, #1
   1813c:	vst1.8	{d16-d17}, [r2]!
   18140:	bcc	18134 <__assert_fail@plt+0x66a8>
   18144:	ldr	r0, [sp, #16]
   18148:	add	r4, r4, r0
   1814c:	cmp	r0, r9
   18150:	bne	19250 <__assert_fail@plt+0x77c4>
   18154:	ldr	r1, [sp, #28]
   18158:	ldr	r2, [sp, #20]
   1815c:	b	1926c <__assert_fail@plt+0x77e0>
   18160:	add	sl, r9, r8
   18164:	add	r4, r9, #1
   18168:	mov	r6, r8
   1816c:	cmp	r8, #2
   18170:	blt	18810 <__assert_fail@plt+0x6d84>
   18174:	movw	r9, #16201	; 0x3f49
   18178:	movw	r8, #16839	; 0x41c7
   1817c:	mov	r5, r4
   18180:	movt	r9, #2
   18184:	movt	r8, #2
   18188:	ldrb	r7, [r5]
   1818c:	mov	r0, r9
   18190:	mov	r2, #8
   18194:	mov	r1, r7
   18198:	bl	11948 <memchr@plt>
   1819c:	cmp	r0, #0
   181a0:	beq	18814 <__assert_fail@plt+0x6d88>
   181a4:	mov	r0, r8
   181a8:	mov	r1, r7
   181ac:	mov	r2, #2
   181b0:	bl	11948 <memchr@plt>
   181b4:	cmp	r0, #0
   181b8:	add	r5, r5, #1
   181bc:	strbne	r7, [r4], #1
   181c0:	cmp	r5, sl
   181c4:	bcc	18188 <__assert_fail@plt+0x66fc>
   181c8:	b	18814 <__assert_fail@plt+0x6d88>
   181cc:	mov	r5, r4
   181d0:	cmp	r5, sl
   181d4:	bcs	182d4 <__assert_fail@plt+0x6848>
   181d8:	ldr	r1, [sp, #28]
   181dc:	sub	r0, r6, r5
   181e0:	add	r8, r1, r0
   181e4:	cmp	r8, #16
   181e8:	bcc	182c0 <__assert_fail@plt+0x6834>
   181ec:	cmp	r4, sl
   181f0:	addcc	r0, r4, r8
   181f4:	cmpcc	r5, r0
   181f8:	bcc	182c0 <__assert_fail@plt+0x6834>
   181fc:	bic	r0, r8, #15
   18200:	mov	r2, #1
   18204:	mov	r3, #0
   18208:	sub	r7, r0, #16
   1820c:	str	r0, [sp, #20]
   18210:	add	r2, r2, r7, lsr #4
   18214:	cmp	r7, #48	; 0x30
   18218:	and	r0, r2, #3
   1821c:	str	r0, [sp, #24]
   18220:	bcc	18280 <__assert_fail@plt+0x67f4>
   18224:	ldr	r0, [sp, #24]
   18228:	mov	r3, #0
   1822c:	mov	r9, #48	; 0x30
   18230:	sub	r7, r2, r0
   18234:	add	r1, r5, r3
   18238:	add	r2, r4, r3
   1823c:	subs	r7, r7, #4
   18240:	add	r3, r3, #64	; 0x40
   18244:	mov	lr, r1
   18248:	mov	r6, r2
   1824c:	add	ip, r1, #16
   18250:	add	r0, r2, #16
   18254:	vld1.8	{d16-d17}, [lr], r9
   18258:	vst1.8	{d16-d17}, [r6], r9
   1825c:	vld1.8	{d16-d17}, [ip]
   18260:	vst1.8	{d16-d17}, [r0]
   18264:	add	r0, r1, #32
   18268:	vld1.8	{d16-d17}, [r0]
   1826c:	add	r0, r2, #32
   18270:	vst1.8	{d16-d17}, [r0]
   18274:	vld1.8	{d16-d17}, [lr]
   18278:	vst1.8	{d16-d17}, [r6]
   1827c:	bne	18234 <__assert_fail@plt+0x67a8>
   18280:	ldr	r0, [sp, #24]
   18284:	cmp	r0, #0
   18288:	beq	182a8 <__assert_fail@plt+0x681c>
   1828c:	add	r2, r4, r3
   18290:	add	r3, r5, r3
   18294:	rsb	r7, r0, #0
   18298:	vld1.8	{d16-d17}, [r3]!
   1829c:	adds	r7, r7, #1
   182a0:	vst1.8	{d16-d17}, [r2]!
   182a4:	bcc	18298 <__assert_fail@plt+0x680c>
   182a8:	ldr	r0, [sp, #20]
   182ac:	ldr	r1, [sp, #28]
   182b0:	add	r4, r4, r0
   182b4:	cmp	r0, r8
   182b8:	beq	182d8 <__assert_fail@plt+0x684c>
   182bc:	add	r5, r5, r0
   182c0:	ldrb	r0, [r5], #1
   182c4:	cmp	sl, r5
   182c8:	strb	r0, [r4], #1
   182cc:	bne	182c0 <__assert_fail@plt+0x6834>
   182d0:	b	182d8 <__assert_fail@plt+0x684c>
   182d4:	ldr	r1, [sp, #28]
   182d8:	mov	r0, #115	; 0x73
   182dc:	strh	r0, [r4]
   182e0:	movw	r0, #21000	; 0x5208
   182e4:	movt	r0, #3
   182e8:	add	r2, r0, #36	; 0x24
   182ec:	b	19274 <__assert_fail@plt+0x77e8>
   182f0:	bl	118e8 <__errno_location@plt>
   182f4:	movw	r1, #14744	; 0x3998
   182f8:	ldr	r6, [r0]
   182fc:	mov	r0, #0
   18300:	mov	r2, #5
   18304:	mov	r4, #0
   18308:	movt	r1, #2
   1830c:	bl	11720 <dcgettext@plt>
   18310:	mov	r7, r0
   18314:	mov	r0, #4
   18318:	mov	r1, r5
   1831c:	bl	1ef0c <__assert_fail@plt+0xd480>
   18320:	mov	r3, r0
   18324:	mov	r0, #0
   18328:	mov	r1, r6
   1832c:	mov	r2, r7
   18330:	bl	117d4 <error@plt>
   18334:	mov	r7, #1
   18338:	b	189b0 <__assert_fail@plt+0x6f24>
   1833c:	mov	r8, r4
   18340:	cmp	r6, r7
   18344:	str	r7, [sp, #20]
   18348:	bcs	18454 <__assert_fail@plt+0x69c8>
   1834c:	ldr	r1, [sp, #28]
   18350:	sub	r0, r8, r6
   18354:	add	r0, r1, r0
   18358:	cmp	r0, #16
   1835c:	bcc	18444 <__assert_fail@plt+0x69b8>
   18360:	cmp	r9, r7
   18364:	addcc	r1, r9, r0
   18368:	cmpcc	r6, r1
   1836c:	bcc	18444 <__assert_fail@plt+0x69b8>
   18370:	str	r0, [sp, #4]
   18374:	bic	r0, r0, #15
   18378:	mov	r2, #1
   1837c:	mov	r3, #0
   18380:	str	r8, [sp, #24]
   18384:	sub	r7, r0, #16
   18388:	str	r0, [sp]
   1838c:	add	r2, r2, r7, lsr #4
   18390:	cmp	r7, #48	; 0x30
   18394:	and	r0, r2, #3
   18398:	str	r0, [sp, #8]
   1839c:	bcc	183fc <__assert_fail@plt+0x6970>
   183a0:	ldr	r0, [sp, #8]
   183a4:	mov	r3, #0
   183a8:	mov	r8, #48	; 0x30
   183ac:	sub	r4, r2, r0
   183b0:	add	r7, r6, r3
   183b4:	add	r0, r9, r3
   183b8:	subs	r4, r4, #4
   183bc:	add	r3, r3, #64	; 0x40
   183c0:	mov	r1, r7
   183c4:	mov	ip, r0
   183c8:	add	lr, r7, #16
   183cc:	add	r2, r0, #16
   183d0:	add	r0, r0, #32
   183d4:	vld1.8	{d16-d17}, [r1], r8
   183d8:	vst1.8	{d16-d17}, [ip], r8
   183dc:	vld1.8	{d16-d17}, [lr]
   183e0:	vst1.8	{d16-d17}, [r2]
   183e4:	add	r2, r7, #32
   183e8:	vld1.8	{d16-d17}, [r2]
   183ec:	vst1.8	{d16-d17}, [r0]
   183f0:	vld1.8	{d16-d17}, [r1]
   183f4:	vst1.8	{d16-d17}, [ip]
   183f8:	bne	183b0 <__assert_fail@plt+0x6924>
   183fc:	ldr	r0, [sp, #8]
   18400:	cmp	r0, #0
   18404:	beq	18424 <__assert_fail@plt+0x6998>
   18408:	add	r2, r9, r3
   1840c:	add	r3, r6, r3
   18410:	rsb	r4, r0, #0
   18414:	vld1.8	{d16-d17}, [r3]!
   18418:	adds	r4, r4, #1
   1841c:	vst1.8	{d16-d17}, [r2]!
   18420:	bcc	18414 <__assert_fail@plt+0x6988>
   18424:	ldr	r1, [sp]
   18428:	ldr	r0, [sp, #4]
   1842c:	ldr	r8, [sp, #24]
   18430:	ldr	r7, [sp, #20]
   18434:	add	r9, r9, r1
   18438:	cmp	r1, r0
   1843c:	beq	18454 <__assert_fail@plt+0x69c8>
   18440:	add	r6, r6, r1
   18444:	ldrb	r0, [r6], #1
   18448:	cmp	r7, r6
   1844c:	strb	r0, [r9], #1
   18450:	bne	18444 <__assert_fail@plt+0x69b8>
   18454:	ldr	r1, [sp, #28]
   18458:	ldr	r2, [sp, #16]
   1845c:	mov	r0, #115	; 0x73
   18460:	strh	r0, [r9]
   18464:	mov	r0, #1
   18468:	bl	11924 <__printf_chk@plt>
   1846c:	ldr	r0, [sl, #16]
   18470:	mov	r7, #0
   18474:	and	r0, r0, #61440	; 0xf000
   18478:	cmp	r0, #40960	; 0xa000
   1847c:	bne	18b74 <__assert_fail@plt+0x70e8>
   18480:	ldr	r0, [sp, #12]
   18484:	ldr	r6, [fp, #12]
   18488:	mov	sl, r8
   1848c:	ldr	r1, [r0]
   18490:	mov	r0, r6
   18494:	bl	19e94 <__assert_fail@plt+0x8408>
   18498:	cmp	r0, #0
   1849c:	beq	18918 <__assert_fail@plt+0x6e8c>
   184a0:	movw	r1, #14709	; 0x3975
   184a4:	mov	r8, r0
   184a8:	mov	r0, #1
   184ac:	movt	r1, #2
   184b0:	bl	11924 <__printf_chk@plt>
   184b4:	mov	r0, #0
   184b8:	bl	1d570 <__assert_fail@plt+0xbae4>
   184bc:	mov	r1, r8
   184c0:	bl	1ef0c <__assert_fail@plt+0xd480>
   184c4:	cmp	sl, #2
   184c8:	str	r0, [sp, #16]
   184cc:	blt	18b80 <__assert_fail@plt+0x70f4>
   184d0:	movw	r6, #16201	; 0x3f49
   184d4:	movw	r9, #16839	; 0x41c7
   184d8:	mov	r4, r5
   184dc:	movt	r6, #2
   184e0:	movt	r9, #2
   184e4:	ldrb	r7, [r4]
   184e8:	mov	r0, r6
   184ec:	mov	r2, #8
   184f0:	mov	r1, r7
   184f4:	bl	11948 <memchr@plt>
   184f8:	cmp	r0, #0
   184fc:	beq	19018 <__assert_fail@plt+0x758c>
   18500:	mov	r0, r9
   18504:	mov	r1, r7
   18508:	mov	r2, #2
   1850c:	bl	11948 <memchr@plt>
   18510:	ldr	r3, [sp, #20]
   18514:	cmp	r0, #0
   18518:	add	r4, r4, #1
   1851c:	strbne	r7, [r5], #1
   18520:	cmp	r4, r3
   18524:	bcc	184e4 <__assert_fail@plt+0x6a58>
   18528:	b	1901c <__assert_fail@plt+0x7590>
   1852c:	mov	r5, r7
   18530:	cmp	r5, r8
   18534:	bcs	18804 <__assert_fail@plt+0x6d78>
   18538:	ldr	r1, [sp, #28]
   1853c:	sub	r0, r4, r5
   18540:	add	r9, r1, r0
   18544:	cmp	r9, #16
   18548:	bcc	18968 <__assert_fail@plt+0x6edc>
   1854c:	cmp	r7, r8
   18550:	addcc	r1, r7, r9
   18554:	cmpcc	r5, r1
   18558:	bcc	18968 <__assert_fail@plt+0x6edc>
   1855c:	bic	r0, r9, #15
   18560:	mov	r2, #1
   18564:	mov	r3, #0
   18568:	sub	r6, r0, #16
   1856c:	str	r0, [sp, #16]
   18570:	add	r2, r2, r6, lsr #4
   18574:	cmp	r6, #48	; 0x30
   18578:	and	r0, r2, #3
   1857c:	str	r0, [sp, #24]
   18580:	bcc	185e0 <__assert_fail@plt+0x6b54>
   18584:	ldr	r0, [sp, #24]
   18588:	mov	r3, #0
   1858c:	mov	sl, #48	; 0x30
   18590:	sub	r6, r2, r0
   18594:	add	r1, r5, r3
   18598:	add	r2, r7, r3
   1859c:	subs	r6, r6, #4
   185a0:	add	r3, r3, #64	; 0x40
   185a4:	mov	r0, r1
   185a8:	mov	ip, r2
   185ac:	add	lr, r1, #16
   185b0:	add	r4, r2, #16
   185b4:	add	r1, r1, #32
   185b8:	vld1.8	{d16-d17}, [r0], sl
   185bc:	vst1.8	{d16-d17}, [ip], sl
   185c0:	vld1.8	{d16-d17}, [lr]
   185c4:	vst1.8	{d16-d17}, [r4]
   185c8:	vld1.8	{d16-d17}, [r1]
   185cc:	add	r1, r2, #32
   185d0:	vst1.8	{d16-d17}, [r1]
   185d4:	vld1.8	{d16-d17}, [r0]
   185d8:	vst1.8	{d16-d17}, [ip]
   185dc:	bne	18594 <__assert_fail@plt+0x6b08>
   185e0:	ldr	r0, [sp, #24]
   185e4:	cmp	r0, #0
   185e8:	beq	18608 <__assert_fail@plt+0x6b7c>
   185ec:	add	r2, r7, r3
   185f0:	add	r3, r5, r3
   185f4:	rsb	r6, r0, #0
   185f8:	vld1.8	{d16-d17}, [r3]!
   185fc:	adds	r6, r6, #1
   18600:	vst1.8	{d16-d17}, [r2]!
   18604:	bcc	185f8 <__assert_fail@plt+0x6b6c>
   18608:	ldr	r0, [sp, #16]
   1860c:	ldr	r2, [sp, #20]
   18610:	add	r7, r7, r0
   18614:	cmp	r0, r9
   18618:	bne	1928c <__assert_fail@plt+0x7800>
   1861c:	ldr	r1, [sp, #28]
   18620:	b	18980 <__assert_fail@plt+0x6ef4>
   18624:	mov	r5, r4
   18628:	cmp	r5, r8
   1862c:	bcs	18710 <__assert_fail@plt+0x6c84>
   18630:	ldr	r1, [sp, #28]
   18634:	sub	r0, r7, r5
   18638:	add	r9, r1, r0
   1863c:	cmp	r9, #16
   18640:	bcc	1929c <__assert_fail@plt+0x7810>
   18644:	cmp	r4, r8
   18648:	addcc	r1, r4, r9
   1864c:	cmpcc	r5, r1
   18650:	bcc	1929c <__assert_fail@plt+0x7810>
   18654:	bic	r0, r9, #15
   18658:	mov	r2, #1
   1865c:	mov	r3, #0
   18660:	sub	r6, r0, #16
   18664:	str	r0, [sp, #16]
   18668:	add	r2, r2, r6, lsr #4
   1866c:	cmp	r6, #48	; 0x30
   18670:	and	r0, r2, #3
   18674:	str	r0, [sp, #24]
   18678:	bcc	186d8 <__assert_fail@plt+0x6c4c>
   1867c:	ldr	r0, [sp, #24]
   18680:	mov	r3, #0
   18684:	mov	sl, #48	; 0x30
   18688:	sub	r6, r2, r0
   1868c:	add	r1, r5, r3
   18690:	add	r2, r4, r3
   18694:	subs	r6, r6, #4
   18698:	add	r3, r3, #64	; 0x40
   1869c:	mov	r0, r1
   186a0:	mov	ip, r2
   186a4:	add	lr, r1, #16
   186a8:	add	r7, r2, #16
   186ac:	add	r1, r1, #32
   186b0:	vld1.8	{d16-d17}, [r0], sl
   186b4:	vst1.8	{d16-d17}, [ip], sl
   186b8:	vld1.8	{d16-d17}, [lr]
   186bc:	vst1.8	{d16-d17}, [r7]
   186c0:	vld1.8	{d16-d17}, [r1]
   186c4:	add	r1, r2, #32
   186c8:	vst1.8	{d16-d17}, [r1]
   186cc:	vld1.8	{d16-d17}, [r0]
   186d0:	vst1.8	{d16-d17}, [ip]
   186d4:	bne	1868c <__assert_fail@plt+0x6c00>
   186d8:	ldr	r0, [sp, #24]
   186dc:	cmp	r0, #0
   186e0:	beq	18700 <__assert_fail@plt+0x6c74>
   186e4:	add	r2, r4, r3
   186e8:	add	r3, r5, r3
   186ec:	rsb	r6, r0, #0
   186f0:	vld1.8	{d16-d17}, [r3]!
   186f4:	adds	r6, r6, #1
   186f8:	vst1.8	{d16-d17}, [r2]!
   186fc:	bcc	186f0 <__assert_fail@plt+0x6c64>
   18700:	ldr	r0, [sp, #16]
   18704:	add	r4, r4, r0
   18708:	cmp	r0, r9
   1870c:	bne	19298 <__assert_fail@plt+0x780c>
   18710:	ldr	r1, [sp, #28]
   18714:	ldr	r2, [sp, #20]
   18718:	movw	r0, #27756	; 0x6c6c
   1871c:	movt	r0, #117	; 0x75
   18720:	b	19230 <__assert_fail@plt+0x77a4>
   18724:	mov	r0, r8
   18728:	add	r6, r9, r8
   1872c:	add	r8, r9, #1
   18730:	str	r3, [sp, #20]
   18734:	cmp	r0, #2
   18738:	blt	18dd0 <__assert_fail@plt+0x7344>
   1873c:	movw	r4, #16201	; 0x3f49
   18740:	movw	r9, #14722	; 0x3982
   18744:	mov	r5, r8
   18748:	movt	r4, #2
   1874c:	movt	r9, #2
   18750:	ldrb	r7, [r5]
   18754:	mov	r0, r4
   18758:	mov	r2, #8
   1875c:	mov	r1, r7
   18760:	bl	11948 <memchr@plt>
   18764:	cmp	r0, #0
   18768:	beq	18dd4 <__assert_fail@plt+0x7348>
   1876c:	mov	r0, r9
   18770:	mov	r1, r7
   18774:	mov	r2, #4
   18778:	bl	11948 <memchr@plt>
   1877c:	cmp	r0, #0
   18780:	add	r5, r5, #1
   18784:	strbne	r7, [r8], #1
   18788:	cmp	r5, r6
   1878c:	bcc	18750 <__assert_fail@plt+0x6cc4>
   18790:	b	18dd4 <__assert_fail@plt+0x7348>
   18794:	mov	r0, r8
   18798:	add	r6, r9, r8
   1879c:	add	r8, r9, #1
   187a0:	str	r3, [sp, #20]
   187a4:	cmp	r0, #2
   187a8:	blt	18ee4 <__assert_fail@plt+0x7458>
   187ac:	movw	r4, #16201	; 0x3f49
   187b0:	movw	r9, #14722	; 0x3982
   187b4:	mov	r5, r8
   187b8:	movt	r4, #2
   187bc:	movt	r9, #2
   187c0:	ldrb	r7, [r5]
   187c4:	mov	r0, r4
   187c8:	mov	r2, #8
   187cc:	mov	r1, r7
   187d0:	bl	11948 <memchr@plt>
   187d4:	cmp	r0, #0
   187d8:	beq	18ee8 <__assert_fail@plt+0x745c>
   187dc:	mov	r0, r9
   187e0:	mov	r1, r7
   187e4:	mov	r2, #4
   187e8:	bl	11948 <memchr@plt>
   187ec:	cmp	r0, #0
   187f0:	add	r5, r5, #1
   187f4:	strbne	r7, [r8], #1
   187f8:	cmp	r5, r6
   187fc:	bcc	187c0 <__assert_fail@plt+0x6d34>
   18800:	b	18ee8 <__assert_fail@plt+0x745c>
   18804:	ldr	r1, [sp, #28]
   18808:	ldr	r2, [sp, #20]
   1880c:	b	18980 <__assert_fail@plt+0x6ef4>
   18810:	mov	r5, r4
   18814:	cmp	r5, sl
   18818:	bcs	18990 <__assert_fail@plt+0x6f04>
   1881c:	ldr	r1, [sp, #28]
   18820:	sub	r0, r6, r5
   18824:	add	r8, r1, r0
   18828:	cmp	r8, #16
   1882c:	bcc	18904 <__assert_fail@plt+0x6e78>
   18830:	cmp	r4, sl
   18834:	addcc	r0, r4, r8
   18838:	cmpcc	r5, r0
   1883c:	bcc	18904 <__assert_fail@plt+0x6e78>
   18840:	bic	r0, r8, #15
   18844:	mov	r2, #1
   18848:	mov	r3, #0
   1884c:	sub	r7, r0, #16
   18850:	str	r0, [sp, #20]
   18854:	add	r2, r2, r7, lsr #4
   18858:	cmp	r7, #48	; 0x30
   1885c:	and	r0, r2, #3
   18860:	str	r0, [sp, #24]
   18864:	bcc	188c4 <__assert_fail@plt+0x6e38>
   18868:	ldr	r0, [sp, #24]
   1886c:	mov	r3, #0
   18870:	mov	r9, #48	; 0x30
   18874:	sub	r7, r2, r0
   18878:	add	r1, r5, r3
   1887c:	add	r2, r4, r3
   18880:	subs	r7, r7, #4
   18884:	add	r3, r3, #64	; 0x40
   18888:	mov	lr, r1
   1888c:	mov	r6, r2
   18890:	add	ip, r1, #16
   18894:	add	r0, r2, #16
   18898:	vld1.8	{d16-d17}, [lr], r9
   1889c:	vst1.8	{d16-d17}, [r6], r9
   188a0:	vld1.8	{d16-d17}, [ip]
   188a4:	vst1.8	{d16-d17}, [r0]
   188a8:	add	r0, r1, #32
   188ac:	vld1.8	{d16-d17}, [r0]
   188b0:	add	r0, r2, #32
   188b4:	vst1.8	{d16-d17}, [r0]
   188b8:	vld1.8	{d16-d17}, [lr]
   188bc:	vst1.8	{d16-d17}, [r6]
   188c0:	bne	18878 <__assert_fail@plt+0x6dec>
   188c4:	ldr	r0, [sp, #24]
   188c8:	cmp	r0, #0
   188cc:	beq	188ec <__assert_fail@plt+0x6e60>
   188d0:	add	r2, r4, r3
   188d4:	add	r3, r5, r3
   188d8:	rsb	r7, r0, #0
   188dc:	vld1.8	{d16-d17}, [r3]!
   188e0:	adds	r7, r7, #1
   188e4:	vst1.8	{d16-d17}, [r2]!
   188e8:	bcc	188dc <__assert_fail@plt+0x6e50>
   188ec:	ldr	r0, [sp, #20]
   188f0:	ldr	r1, [sp, #28]
   188f4:	add	r4, r4, r0
   188f8:	cmp	r0, r8
   188fc:	beq	18994 <__assert_fail@plt+0x6f08>
   18900:	add	r5, r5, r0
   18904:	ldrb	r0, [r5], #1
   18908:	cmp	sl, r5
   1890c:	strb	r0, [r4], #1
   18910:	bne	18904 <__assert_fail@plt+0x6e78>
   18914:	b	18994 <__assert_fail@plt+0x6f08>
   18918:	bl	118e8 <__errno_location@plt>
   1891c:	movw	r1, #14680	; 0x3958
   18920:	ldr	r4, [r0]
   18924:	mov	r0, #0
   18928:	mov	r2, #5
   1892c:	movt	r1, #2
   18930:	bl	11720 <dcgettext@plt>
   18934:	mov	r5, r0
   18938:	mov	r0, #4
   1893c:	mov	r1, r6
   18940:	bl	1ef0c <__assert_fail@plt+0xd480>
   18944:	mov	r3, r0
   18948:	mov	r0, #0
   1894c:	mov	r1, r4
   18950:	mov	r2, r5
   18954:	bl	117d4 <error@plt>
   18958:	mov	r7, #1
   1895c:	mov	r0, r7
   18960:	sub	sp, fp, #28
   18964:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18968:	ldr	r1, [sp, #28]
   1896c:	ldr	r2, [sp, #20]
   18970:	ldrb	r0, [r5], #1
   18974:	cmp	r8, r5
   18978:	strb	r0, [r7], #1
   1897c:	bne	18970 <__assert_fail@plt+0x6ee4>
   18980:	movw	r0, #27756	; 0x6c6c
   18984:	movt	r0, #117	; 0x75
   18988:	str	r0, [r7]
   1898c:	b	19234 <__assert_fail@plt+0x77a8>
   18990:	ldr	r1, [sp, #28]
   18994:	movw	r2, #16839	; 0x41c7
   18998:	mov	r0, #115	; 0x73
   1899c:	strh	r0, [r4]
   189a0:	movt	r2, #2
   189a4:	b	19274 <__assert_fail@plt+0x77e8>
   189a8:	mov	r7, #1
   189ac:	mov	r4, #0
   189b0:	mov	r5, #0
   189b4:	movw	r1, #14742	; 0x3996
   189b8:	cmp	r5, #0
   189bc:	mov	r0, r9
   189c0:	add	r9, r9, r8
   189c4:	str	r5, [sp, #20]
   189c8:	str	r8, [sp, #24]
   189cc:	movt	r1, #2
   189d0:	movne	r1, r5
   189d4:	cmp	r4, #0
   189d8:	add	sl, r0, #1
   189dc:	str	r0, [sp, #28]
   189e0:	movne	r1, r4
   189e4:	cmp	r8, #2
   189e8:	str	r1, [sp, #16]
   189ec:	blt	18a48 <__assert_fail@plt+0x6fbc>
   189f0:	movw	r4, #16201	; 0x3f49
   189f4:	movw	r6, #16839	; 0x41c7
   189f8:	mov	r5, sl
   189fc:	movt	r4, #2
   18a00:	movt	r6, #2
   18a04:	ldrb	r8, [r5]
   18a08:	mov	r0, r4
   18a0c:	mov	r2, #8
   18a10:	mov	r1, r8
   18a14:	bl	11948 <memchr@plt>
   18a18:	cmp	r0, #0
   18a1c:	beq	18a4c <__assert_fail@plt+0x6fc0>
   18a20:	mov	r0, r6
   18a24:	mov	r1, r8
   18a28:	mov	r2, #2
   18a2c:	bl	11948 <memchr@plt>
   18a30:	cmp	r0, #0
   18a34:	add	r5, r5, #1
   18a38:	strbne	r8, [sl], #1
   18a3c:	cmp	r5, r9
   18a40:	bcc	18a04 <__assert_fail@plt+0x6f78>
   18a44:	b	18a4c <__assert_fail@plt+0x6fc0>
   18a48:	mov	r5, sl
   18a4c:	cmp	r5, r9
   18a50:	bcs	18b54 <__assert_fail@plt+0x70c8>
   18a54:	ldr	r0, [sp, #24]
   18a58:	ldr	r1, [sp, #28]
   18a5c:	sub	r0, r0, r5
   18a60:	add	r0, r1, r0
   18a64:	cmp	r0, #16
   18a68:	bcc	18b44 <__assert_fail@plt+0x70b8>
   18a6c:	cmp	sl, r9
   18a70:	addcc	r1, sl, r0
   18a74:	cmpcc	r5, r1
   18a78:	bcc	18b44 <__assert_fail@plt+0x70b8>
   18a7c:	str	r0, [sp, #12]
   18a80:	bic	r0, r0, #15
   18a84:	mov	r2, #1
   18a88:	mov	r3, #0
   18a8c:	sub	r4, r0, #16
   18a90:	str	r0, [sp, #8]
   18a94:	add	r2, r2, r4, lsr #4
   18a98:	cmp	r4, #48	; 0x30
   18a9c:	and	r0, r2, #3
   18aa0:	str	r0, [sp, #24]
   18aa4:	bcc	18b04 <__assert_fail@plt+0x7078>
   18aa8:	ldr	r0, [sp, #24]
   18aac:	mov	r3, #0
   18ab0:	mov	r8, #48	; 0x30
   18ab4:	sub	r4, r2, r0
   18ab8:	add	r1, r5, r3
   18abc:	add	r2, sl, r3
   18ac0:	subs	r4, r4, #4
   18ac4:	add	r3, r3, #64	; 0x40
   18ac8:	mov	r0, r1
   18acc:	mov	ip, r2
   18ad0:	add	lr, r1, #16
   18ad4:	add	r6, r2, #16
   18ad8:	add	r1, r1, #32
   18adc:	vld1.8	{d16-d17}, [r0], r8
   18ae0:	vst1.8	{d16-d17}, [ip], r8
   18ae4:	vld1.8	{d16-d17}, [lr]
   18ae8:	vst1.8	{d16-d17}, [r6]
   18aec:	vld1.8	{d16-d17}, [r1]
   18af0:	add	r1, r2, #32
   18af4:	vst1.8	{d16-d17}, [r1]
   18af8:	vld1.8	{d16-d17}, [r0]
   18afc:	vst1.8	{d16-d17}, [ip]
   18b00:	bne	18ab8 <__assert_fail@plt+0x702c>
   18b04:	ldr	r0, [sp, #24]
   18b08:	cmp	r0, #0
   18b0c:	beq	18b2c <__assert_fail@plt+0x70a0>
   18b10:	add	r2, sl, r3
   18b14:	add	r3, r5, r3
   18b18:	rsb	r4, r0, #0
   18b1c:	vld1.8	{d16-d17}, [r3]!
   18b20:	adds	r4, r4, #1
   18b24:	vst1.8	{d16-d17}, [r2]!
   18b28:	bcc	18b1c <__assert_fail@plt+0x7090>
   18b2c:	ldr	r1, [sp, #8]
   18b30:	ldr	r0, [sp, #12]
   18b34:	add	sl, sl, r1
   18b38:	cmp	r1, r0
   18b3c:	beq	18b54 <__assert_fail@plt+0x70c8>
   18b40:	add	r5, r5, r1
   18b44:	ldrb	r0, [r5], #1
   18b48:	cmp	r9, r5
   18b4c:	strb	r0, [sl], #1
   18b50:	bne	18b44 <__assert_fail@plt+0x70b8>
   18b54:	ldr	r1, [sp, #28]
   18b58:	ldr	r2, [sp, #16]
   18b5c:	mov	r0, #115	; 0x73
   18b60:	strh	r0, [sl]
   18b64:	mov	r0, #1
   18b68:	bl	11924 <__printf_chk@plt>
   18b6c:	ldr	r0, [sp, #20]
   18b70:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   18b74:	mov	r0, r7
   18b78:	sub	sp, fp, #28
   18b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18b80:	ldr	r3, [sp, #20]
   18b84:	mov	r4, r5
   18b88:	cmp	r4, r3
   18b8c:	bcc	19024 <__assert_fail@plt+0x7598>
   18b90:	b	19104 <__assert_fail@plt+0x7678>
   18b94:	mov	r5, r7
   18b98:	cmp	r5, r9
   18b9c:	bcs	18db0 <__assert_fail@plt+0x7324>
   18ba0:	ldr	r0, [sp, #24]
   18ba4:	ldr	r1, [sp, #28]
   18ba8:	sub	r0, r0, r5
   18bac:	add	r0, r1, r0
   18bb0:	cmp	r0, #16
   18bb4:	bcc	18c90 <__assert_fail@plt+0x7204>
   18bb8:	cmp	r7, r9
   18bbc:	addcc	r1, r7, r0
   18bc0:	cmpcc	r5, r1
   18bc4:	bcc	18c90 <__assert_fail@plt+0x7204>
   18bc8:	str	r0, [sp, #20]
   18bcc:	bic	r0, r0, #15
   18bd0:	mov	r2, #1
   18bd4:	mov	r3, #0
   18bd8:	sub	r4, r0, #16
   18bdc:	str	r0, [sp, #16]
   18be0:	add	r6, r2, r4, lsr #4
   18be4:	cmp	r4, #48	; 0x30
   18be8:	and	r0, r6, #3
   18bec:	str	r0, [sp, #24]
   18bf0:	bcc	18c50 <__assert_fail@plt+0x71c4>
   18bf4:	ldr	r0, [sp, #24]
   18bf8:	mov	r3, #0
   18bfc:	mov	sl, #48	; 0x30
   18c00:	sub	r6, r6, r0
   18c04:	add	r2, r5, r3
   18c08:	add	r0, r7, r3
   18c0c:	subs	r6, r6, #4
   18c10:	add	r3, r3, #64	; 0x40
   18c14:	mov	r1, r2
   18c18:	mov	ip, r0
   18c1c:	add	lr, r2, #16
   18c20:	add	r4, r0, #16
   18c24:	add	r2, r2, #32
   18c28:	add	r0, r0, #32
   18c2c:	vld1.8	{d16-d17}, [r1], sl
   18c30:	vst1.8	{d16-d17}, [ip], sl
   18c34:	vld1.8	{d16-d17}, [lr]
   18c38:	vst1.8	{d16-d17}, [r4]
   18c3c:	vld1.8	{d16-d17}, [r2]
   18c40:	vst1.8	{d16-d17}, [r0]
   18c44:	vld1.8	{d16-d17}, [r1]
   18c48:	vst1.8	{d16-d17}, [ip]
   18c4c:	bne	18c04 <__assert_fail@plt+0x7178>
   18c50:	ldr	r0, [sp, #24]
   18c54:	cmp	r0, #0
   18c58:	beq	18c78 <__assert_fail@plt+0x71ec>
   18c5c:	add	r6, r7, r3
   18c60:	add	r3, r5, r3
   18c64:	rsb	r2, r0, #0
   18c68:	vld1.8	{d16-d17}, [r3]!
   18c6c:	adds	r2, r2, #1
   18c70:	vst1.8	{d16-d17}, [r6]!
   18c74:	bcc	18c68 <__assert_fail@plt+0x71dc>
   18c78:	ldr	r1, [sp, #16]
   18c7c:	ldr	r0, [sp, #20]
   18c80:	add	r7, r7, r1
   18c84:	cmp	r1, r0
   18c88:	beq	18db0 <__assert_fail@plt+0x7324>
   18c8c:	add	r5, r5, r1
   18c90:	ldrb	r0, [r5], #1
   18c94:	cmp	r9, r5
   18c98:	strb	r0, [r7], #1
   18c9c:	bne	18c90 <__assert_fail@plt+0x7204>
   18ca0:	b	18db0 <__assert_fail@plt+0x7324>
   18ca4:	mov	r5, r7
   18ca8:	cmp	r5, r9
   18cac:	bcs	18db0 <__assert_fail@plt+0x7324>
   18cb0:	ldr	r0, [sp, #24]
   18cb4:	ldr	r1, [sp, #28]
   18cb8:	sub	r0, r0, r5
   18cbc:	add	r0, r1, r0
   18cc0:	cmp	r0, #16
   18cc4:	bcc	18da0 <__assert_fail@plt+0x7314>
   18cc8:	cmp	r7, r9
   18ccc:	addcc	r1, r7, r0
   18cd0:	cmpcc	r5, r1
   18cd4:	bcc	18da0 <__assert_fail@plt+0x7314>
   18cd8:	str	r0, [sp, #20]
   18cdc:	bic	r0, r0, #15
   18ce0:	mov	r2, #1
   18ce4:	mov	r3, #0
   18ce8:	sub	r4, r0, #16
   18cec:	str	r0, [sp, #16]
   18cf0:	add	r6, r2, r4, lsr #4
   18cf4:	cmp	r4, #48	; 0x30
   18cf8:	and	r0, r6, #3
   18cfc:	str	r0, [sp, #24]
   18d00:	bcc	18d60 <__assert_fail@plt+0x72d4>
   18d04:	ldr	r0, [sp, #24]
   18d08:	mov	r3, #0
   18d0c:	mov	sl, #48	; 0x30
   18d10:	sub	r6, r6, r0
   18d14:	add	r2, r5, r3
   18d18:	add	r0, r7, r3
   18d1c:	subs	r6, r6, #4
   18d20:	add	r3, r3, #64	; 0x40
   18d24:	mov	r1, r2
   18d28:	mov	ip, r0
   18d2c:	add	lr, r2, #16
   18d30:	add	r4, r0, #16
   18d34:	add	r2, r2, #32
   18d38:	add	r0, r0, #32
   18d3c:	vld1.8	{d16-d17}, [r1], sl
   18d40:	vst1.8	{d16-d17}, [ip], sl
   18d44:	vld1.8	{d16-d17}, [lr]
   18d48:	vst1.8	{d16-d17}, [r4]
   18d4c:	vld1.8	{d16-d17}, [r2]
   18d50:	vst1.8	{d16-d17}, [r0]
   18d54:	vld1.8	{d16-d17}, [r1]
   18d58:	vst1.8	{d16-d17}, [ip]
   18d5c:	bne	18d14 <__assert_fail@plt+0x7288>
   18d60:	ldr	r0, [sp, #24]
   18d64:	cmp	r0, #0
   18d68:	beq	18d88 <__assert_fail@plt+0x72fc>
   18d6c:	add	r6, r7, r3
   18d70:	add	r3, r5, r3
   18d74:	rsb	r2, r0, #0
   18d78:	vld1.8	{d16-d17}, [r3]!
   18d7c:	adds	r2, r2, #1
   18d80:	vst1.8	{d16-d17}, [r6]!
   18d84:	bcc	18d78 <__assert_fail@plt+0x72ec>
   18d88:	ldr	r1, [sp, #16]
   18d8c:	ldr	r0, [sp, #20]
   18d90:	add	r7, r7, r1
   18d94:	cmp	r1, r0
   18d98:	beq	18db0 <__assert_fail@plt+0x7324>
   18d9c:	add	r5, r5, r1
   18da0:	ldrb	r0, [r5], #1
   18da4:	cmp	r9, r5
   18da8:	strb	r0, [r7], #1
   18dac:	bne	18da0 <__assert_fail@plt+0x7314>
   18db0:	movw	r0, #27756	; 0x6c6c
   18db4:	mov	r2, r8
   18db8:	movt	r0, #117	; 0x75
   18dbc:	str	r0, [r7]
   18dc0:	mov	r7, #0
   18dc4:	mov	r0, #1
   18dc8:	ldr	r1, [sp, #28]
   18dcc:	b	1923c <__assert_fail@plt+0x77b0>
   18dd0:	mov	r5, r8
   18dd4:	cmp	r5, r6
   18dd8:	bcs	18ff8 <__assert_fail@plt+0x756c>
   18ddc:	ldr	r0, [sp, #24]
   18de0:	ldr	r1, [sp, #28]
   18de4:	sub	r0, r0, r5
   18de8:	add	r2, r1, r0
   18dec:	cmp	r2, #16
   18df0:	bcc	18ed0 <__assert_fail@plt+0x7444>
   18df4:	cmp	r8, r6
   18df8:	addcc	r0, r8, r2
   18dfc:	cmpcc	r5, r0
   18e00:	bcc	18ed0 <__assert_fail@plt+0x7444>
   18e04:	bic	r0, r2, #15
   18e08:	str	r2, [sp, #16]
   18e0c:	mov	r2, #1
   18e10:	mov	r3, #0
   18e14:	sub	r4, r0, #16
   18e18:	str	r0, [sp, #12]
   18e1c:	add	r7, r2, r4, lsr #4
   18e20:	cmp	r4, #48	; 0x30
   18e24:	and	r0, r7, #3
   18e28:	str	r0, [sp, #24]
   18e2c:	bcc	18e8c <__assert_fail@plt+0x7400>
   18e30:	ldr	r0, [sp, #24]
   18e34:	mov	r3, #0
   18e38:	mov	r9, #48	; 0x30
   18e3c:	sub	r7, r7, r0
   18e40:	add	r2, r5, r3
   18e44:	add	r0, r8, r3
   18e48:	subs	r7, r7, #4
   18e4c:	add	r3, r3, #64	; 0x40
   18e50:	mov	r1, r2
   18e54:	mov	ip, r0
   18e58:	add	lr, r2, #16
   18e5c:	add	r4, r0, #16
   18e60:	add	r2, r2, #32
   18e64:	add	r0, r0, #32
   18e68:	vld1.8	{d16-d17}, [r1], r9
   18e6c:	vst1.8	{d16-d17}, [ip], r9
   18e70:	vld1.8	{d16-d17}, [lr]
   18e74:	vst1.8	{d16-d17}, [r4]
   18e78:	vld1.8	{d16-d17}, [r2]
   18e7c:	vst1.8	{d16-d17}, [r0]
   18e80:	vld1.8	{d16-d17}, [r1]
   18e84:	vst1.8	{d16-d17}, [ip]
   18e88:	bne	18e40 <__assert_fail@plt+0x73b4>
   18e8c:	ldr	r0, [sp, #24]
   18e90:	cmp	r0, #0
   18e94:	beq	18eb4 <__assert_fail@plt+0x7428>
   18e98:	add	r7, r8, r3
   18e9c:	add	r3, r5, r3
   18ea0:	rsb	r2, r0, #0
   18ea4:	vld1.8	{d16-d17}, [r3]!
   18ea8:	adds	r2, r2, #1
   18eac:	vst1.8	{d16-d17}, [r7]!
   18eb0:	bcc	18ea4 <__assert_fail@plt+0x7418>
   18eb4:	ldr	r2, [sp, #12]
   18eb8:	ldr	r0, [sp, #16]
   18ebc:	ldr	r1, [sp, #28]
   18ec0:	add	r8, r8, r2
   18ec4:	cmp	r2, r0
   18ec8:	beq	18ffc <__assert_fail@plt+0x7570>
   18ecc:	add	r5, r5, r2
   18ed0:	ldrb	r0, [r5], #1
   18ed4:	cmp	r6, r5
   18ed8:	strb	r0, [r8], #1
   18edc:	bne	18ed0 <__assert_fail@plt+0x7444>
   18ee0:	b	18ffc <__assert_fail@plt+0x7570>
   18ee4:	mov	r5, r8
   18ee8:	cmp	r5, r6
   18eec:	bcs	18ff8 <__assert_fail@plt+0x756c>
   18ef0:	ldr	r0, [sp, #24]
   18ef4:	ldr	r1, [sp, #28]
   18ef8:	sub	r0, r0, r5
   18efc:	add	r2, r1, r0
   18f00:	cmp	r2, #16
   18f04:	bcc	18fe4 <__assert_fail@plt+0x7558>
   18f08:	cmp	r8, r6
   18f0c:	addcc	r0, r8, r2
   18f10:	cmpcc	r5, r0
   18f14:	bcc	18fe4 <__assert_fail@plt+0x7558>
   18f18:	bic	r0, r2, #15
   18f1c:	str	r2, [sp, #16]
   18f20:	mov	r2, #1
   18f24:	mov	r3, #0
   18f28:	sub	r4, r0, #16
   18f2c:	str	r0, [sp, #12]
   18f30:	add	r7, r2, r4, lsr #4
   18f34:	cmp	r4, #48	; 0x30
   18f38:	and	r0, r7, #3
   18f3c:	str	r0, [sp, #24]
   18f40:	bcc	18fa0 <__assert_fail@plt+0x7514>
   18f44:	ldr	r0, [sp, #24]
   18f48:	mov	r3, #0
   18f4c:	mov	r9, #48	; 0x30
   18f50:	sub	r7, r7, r0
   18f54:	add	r2, r5, r3
   18f58:	add	r0, r8, r3
   18f5c:	subs	r7, r7, #4
   18f60:	add	r3, r3, #64	; 0x40
   18f64:	mov	r1, r2
   18f68:	mov	ip, r0
   18f6c:	add	lr, r2, #16
   18f70:	add	r4, r0, #16
   18f74:	add	r2, r2, #32
   18f78:	add	r0, r0, #32
   18f7c:	vld1.8	{d16-d17}, [r1], r9
   18f80:	vst1.8	{d16-d17}, [ip], r9
   18f84:	vld1.8	{d16-d17}, [lr]
   18f88:	vst1.8	{d16-d17}, [r4]
   18f8c:	vld1.8	{d16-d17}, [r2]
   18f90:	vst1.8	{d16-d17}, [r0]
   18f94:	vld1.8	{d16-d17}, [r1]
   18f98:	vst1.8	{d16-d17}, [ip]
   18f9c:	bne	18f54 <__assert_fail@plt+0x74c8>
   18fa0:	ldr	r0, [sp, #24]
   18fa4:	cmp	r0, #0
   18fa8:	beq	18fc8 <__assert_fail@plt+0x753c>
   18fac:	add	r7, r8, r3
   18fb0:	add	r3, r5, r3
   18fb4:	rsb	r2, r0, #0
   18fb8:	vld1.8	{d16-d17}, [r3]!
   18fbc:	adds	r2, r2, #1
   18fc0:	vst1.8	{d16-d17}, [r7]!
   18fc4:	bcc	18fb8 <__assert_fail@plt+0x752c>
   18fc8:	ldr	r2, [sp, #12]
   18fcc:	ldr	r0, [sp, #16]
   18fd0:	ldr	r1, [sp, #28]
   18fd4:	add	r8, r8, r2
   18fd8:	cmp	r2, r0
   18fdc:	beq	18ffc <__assert_fail@plt+0x7570>
   18fe0:	add	r5, r5, r2
   18fe4:	ldrb	r0, [r5], #1
   18fe8:	cmp	r6, r5
   18fec:	strb	r0, [r8], #1
   18ff0:	bne	18fe4 <__assert_fail@plt+0x7558>
   18ff4:	b	18ffc <__assert_fail@plt+0x7570>
   18ff8:	ldr	r1, [sp, #28]
   18ffc:	movw	r0, #27756	; 0x6c6c
   19000:	mov	r2, sl
   19004:	movt	r0, #117	; 0x75
   19008:	str	r0, [r8]
   1900c:	mov	r0, #1
   19010:	ldr	r3, [sp, #20]
   19014:	b	191f8 <__assert_fail@plt+0x776c>
   19018:	ldr	r3, [sp, #20]
   1901c:	cmp	r4, r3
   19020:	bcs	19104 <__assert_fail@plt+0x7678>
   19024:	ldr	r1, [sp, #28]
   19028:	sub	r0, sl, r4
   1902c:	add	r9, r1, r0
   19030:	cmp	r9, #16
   19034:	bcc	19110 <__assert_fail@plt+0x7684>
   19038:	cmp	r5, r3
   1903c:	addcc	r1, r5, r9
   19040:	cmpcc	r4, r1
   19044:	bcc	19110 <__assert_fail@plt+0x7684>
   19048:	bic	r0, r9, #15
   1904c:	mov	r2, #1
   19050:	mov	r3, #0
   19054:	sub	r6, r0, #16
   19058:	str	r0, [sp, #12]
   1905c:	add	r7, r2, r6, lsr #4
   19060:	cmp	r6, #48	; 0x30
   19064:	and	r0, r7, #3
   19068:	str	r0, [sp, #24]
   1906c:	bcc	190cc <__assert_fail@plt+0x7640>
   19070:	ldr	r0, [sp, #24]
   19074:	mov	r3, #0
   19078:	mov	sl, #48	; 0x30
   1907c:	sub	r7, r7, r0
   19080:	add	r2, r4, r3
   19084:	add	r0, r5, r3
   19088:	subs	r7, r7, #4
   1908c:	add	r3, r3, #64	; 0x40
   19090:	mov	lr, r2
   19094:	mov	r6, r0
   19098:	add	ip, r2, #16
   1909c:	add	r1, r0, #16
   190a0:	add	r0, r0, #32
   190a4:	vld1.8	{d16-d17}, [lr], sl
   190a8:	vst1.8	{d16-d17}, [r6], sl
   190ac:	vld1.8	{d16-d17}, [ip]
   190b0:	vst1.8	{d16-d17}, [r1]
   190b4:	add	r1, r2, #32
   190b8:	vld1.8	{d16-d17}, [r1]
   190bc:	vst1.8	{d16-d17}, [r0]
   190c0:	vld1.8	{d16-d17}, [lr]
   190c4:	vst1.8	{d16-d17}, [r6]
   190c8:	bne	19080 <__assert_fail@plt+0x75f4>
   190cc:	ldr	r0, [sp, #24]
   190d0:	cmp	r0, #0
   190d4:	beq	190f4 <__assert_fail@plt+0x7668>
   190d8:	add	r7, r5, r3
   190dc:	add	r3, r4, r3
   190e0:	rsb	r2, r0, #0
   190e4:	vld1.8	{d16-d17}, [r3]!
   190e8:	adds	r2, r2, #1
   190ec:	vst1.8	{d16-d17}, [r7]!
   190f0:	bcc	190e4 <__assert_fail@plt+0x7658>
   190f4:	ldr	r0, [sp, #12]
   190f8:	add	r5, r5, r0
   190fc:	cmp	r0, r9
   19100:	bne	192b8 <__assert_fail@plt+0x782c>
   19104:	ldr	r1, [sp, #28]
   19108:	ldr	r2, [sp, #16]
   1910c:	b	19128 <__assert_fail@plt+0x769c>
   19110:	ldr	r1, [sp, #28]
   19114:	ldr	r2, [sp, #16]
   19118:	ldrb	r0, [r4], #1
   1911c:	cmp	r3, r4
   19120:	strb	r0, [r5], #1
   19124:	bne	19118 <__assert_fail@plt+0x768c>
   19128:	mov	r0, #115	; 0x73
   1912c:	strh	r0, [r5]
   19130:	mov	r0, #1
   19134:	bl	11924 <__printf_chk@plt>
   19138:	mov	r0, r8
   1913c:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   19140:	mov	r7, #0
   19144:	mov	r0, r7
   19148:	sub	sp, fp, #28
   1914c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19150:	add	r5, r5, r0
   19154:	ldr	r1, [sp, #28]
   19158:	ldr	r2, [sp, #20]
   1915c:	ldrb	r0, [r5], #1
   19160:	cmp	r8, r5
   19164:	strb	r0, [r7], #1
   19168:	bne	1915c <__assert_fail@plt+0x76d0>
   1916c:	mov	r0, #115	; 0x73
   19170:	strh	r0, [r7]
   19174:	b	19274 <__assert_fail@plt+0x77e8>
   19178:	add	r5, r5, r0
   1917c:	ldr	r3, [sp, #20]
   19180:	ldr	r2, [sp, #16]
   19184:	ldrb	r0, [r5], #1
   19188:	cmp	r6, r5
   1918c:	strb	r0, [r9], #1
   19190:	bne	19184 <__assert_fail@plt+0x76f8>
   19194:	movw	r0, #27756	; 0x6c6c
   19198:	movt	r0, #120	; 0x78
   1919c:	b	191ec <__assert_fail@plt+0x7760>
   191a0:	add	r5, r5, r0
   191a4:	ldr	r3, [sp, #20]
   191a8:	ldr	r2, [sp, #16]
   191ac:	ldrb	r0, [r5], #1
   191b0:	cmp	r6, r5
   191b4:	strb	r0, [r9], #1
   191b8:	bne	191ac <__assert_fail@plt+0x7720>
   191bc:	movw	r0, #27756	; 0x6c6c
   191c0:	movt	r0, #117	; 0x75
   191c4:	b	191ec <__assert_fail@plt+0x7760>
   191c8:	add	r6, r6, r0
   191cc:	ldr	r3, [sp, #20]
   191d0:	ldr	r2, [sp, #16]
   191d4:	ldrb	r0, [r6], #1
   191d8:	cmp	r4, r6
   191dc:	strb	r0, [r9], #1
   191e0:	bne	191d4 <__assert_fail@plt+0x7748>
   191e4:	movw	r0, #27756	; 0x6c6c
   191e8:	movt	r0, #100	; 0x64
   191ec:	str	r0, [r9]
   191f0:	mov	r0, #1
   191f4:	ldr	r1, [sp, #28]
   191f8:	bl	11924 <__printf_chk@plt>
   191fc:	mov	r7, #0
   19200:	mov	r0, r7
   19204:	sub	sp, fp, #28
   19208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1920c:	add	r5, r5, r0
   19210:	ldr	r1, [sp, #28]
   19214:	ldr	r2, [sp, #20]
   19218:	ldrb	r0, [r5], #1
   1921c:	cmp	r8, r5
   19220:	strb	r0, [r4], #1
   19224:	bne	19218 <__assert_fail@plt+0x778c>
   19228:	movw	r0, #27756	; 0x6c6c
   1922c:	movt	r0, #120	; 0x78
   19230:	str	r0, [r4]
   19234:	mov	r7, #0
   19238:	mov	r0, #1
   1923c:	mov	r3, #0
   19240:	bl	11924 <__printf_chk@plt>
   19244:	mov	r0, r7
   19248:	sub	sp, fp, #28
   1924c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19250:	add	r5, r5, r0
   19254:	ldr	r1, [sp, #28]
   19258:	ldr	r2, [sp, #20]
   1925c:	ldrb	r0, [r5], #1
   19260:	cmp	r8, r5
   19264:	strb	r0, [r4], #1
   19268:	bne	1925c <__assert_fail@plt+0x77d0>
   1926c:	mov	r0, #115	; 0x73
   19270:	strh	r0, [r4]
   19274:	mov	r0, #1
   19278:	bl	11924 <__printf_chk@plt>
   1927c:	mov	r7, #0
   19280:	mov	r0, r7
   19284:	sub	sp, fp, #28
   19288:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1928c:	ldr	r1, [sp, #28]
   19290:	add	r5, r5, r0
   19294:	b	18970 <__assert_fail@plt+0x6ee4>
   19298:	add	r5, r5, r0
   1929c:	ldr	r1, [sp, #28]
   192a0:	ldr	r2, [sp, #20]
   192a4:	ldrb	r0, [r5], #1
   192a8:	cmp	r8, r5
   192ac:	strb	r0, [r4], #1
   192b0:	bne	192a4 <__assert_fail@plt+0x7818>
   192b4:	b	18718 <__assert_fail@plt+0x6c8c>
   192b8:	ldr	r1, [sp, #28]
   192bc:	ldr	r3, [sp, #20]
   192c0:	add	r4, r4, r0
   192c4:	b	19114 <__assert_fail@plt+0x7688>
   192c8:	mov	r1, #63	; 0x3f
   192cc:	bl	11990 <__overflow@plt>
   192d0:	mov	r7, #0
   192d4:	mov	r0, r7
   192d8:	sub	sp, fp, #28
   192dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192e0:	push	{r4, r5, fp, lr}
   192e4:	add	fp, sp, #8
   192e8:	sub	sp, sp, #88	; 0x58
   192ec:	movw	r5, #21000	; 0x5208
   192f0:	str	r1, [fp, #-12]
   192f4:	str	r0, [fp, #-16]
   192f8:	mov	r4, r1
   192fc:	movt	r5, #3
   19300:	ldr	r0, [r5, #20]
   19304:	cmp	r0, #0
   19308:	bne	19320 <__assert_fail@plt+0x7894>
   1930c:	movw	r0, #14822	; 0x39e6
   19310:	movt	r0, #2
   19314:	bl	117f8 <getenv@plt>
   19318:	bl	1f648 <__assert_fail@plt+0xdbbc>
   1931c:	str	r0, [r5, #20]
   19320:	sub	r1, fp, #16
   19324:	add	r2, sp, #36	; 0x24
   19328:	bl	1f70c <__assert_fail@plt+0xdc80>
   1932c:	cmp	r0, #0
   19330:	beq	1935c <__assert_fail@plt+0x78d0>
   19334:	ldr	r0, [r5, #20]
   19338:	movw	r2, #14825	; 0x39e9
   1933c:	add	r3, sp, #36	; 0x24
   19340:	mov	r1, #61	; 0x3d
   19344:	movt	r2, #2
   19348:	stm	sp, {r0, r4}
   1934c:	add	r0, r5, #36	; 0x24
   19350:	bl	1b81c <__assert_fail@plt+0x9d90>
   19354:	sub	sp, fp, #8
   19358:	pop	{r4, r5, fp, pc}
   1935c:	ldr	r0, [fp, #-16]
   19360:	add	r2, sp, #15
   19364:	asr	r1, r0, #31
   19368:	bl	1aa30 <__assert_fail@plt+0x8fa4>
   1936c:	movw	r3, #14849	; 0x3a01
   19370:	stm	sp, {r0, r4}
   19374:	add	r0, r5, #36	; 0x24
   19378:	mov	r1, #1
   1937c:	mov	r2, #61	; 0x3d
   19380:	movt	r3, #2
   19384:	bl	118f4 <__sprintf_chk@plt>
   19388:	sub	sp, fp, #8
   1938c:	pop	{r4, r5, fp, pc}
   19390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19394:	add	fp, sp, #28
   19398:	sub	sp, sp, #52	; 0x34
   1939c:	mov	r5, r1
   193a0:	mov	sl, r2
   193a4:	mov	r1, #46	; 0x2e
   193a8:	mov	r8, r3
   193ac:	mov	r9, r0
   193b0:	mov	r2, r5
   193b4:	bl	11948 <memchr@plt>
   193b8:	cmp	r0, #0
   193bc:	beq	194b0 <__assert_fail@plt+0x7a24>
   193c0:	mov	r7, r0
   193c4:	mov	r4, #0
   193c8:	sub	r0, r0, r9
   193cc:	strb	r4, [r9, r5]
   193d0:	str	r0, [fp, #-32]	; 0xffffffe0
   193d4:	mov	r0, r7
   193d8:	mov	r5, #9
   193dc:	ldrb	r1, [r0, #1]!
   193e0:	sub	r1, r1, #48	; 0x30
   193e4:	cmp	r1, #9
   193e8:	bhi	19408 <__assert_fail@plt+0x797c>
   193ec:	mov	r1, #0
   193f0:	mov	r2, #10
   193f4:	mov	r6, #0
   193f8:	bl	116c0 <strtol@plt>
   193fc:	mov	r5, r0
   19400:	cmp	r0, #0
   19404:	beq	194b8 <__assert_fail@plt+0x7a2c>
   19408:	ldrb	r0, [r7, #-1]
   1940c:	sub	r0, r0, #48	; 0x30
   19410:	cmp	r0, #9
   19414:	bhi	194a0 <__assert_fail@plt+0x7a14>
   19418:	mov	r6, r9
   1941c:	mov	r0, #0
   19420:	strb	r0, [r7]
   19424:	ldrb	r0, [r7, #-2]
   19428:	sub	r9, r7, #1
   1942c:	mov	r7, r9
   19430:	sub	r0, r0, #48	; 0x30
   19434:	cmp	r0, #10
   19438:	bcc	19424 <__assert_fail@plt+0x7998>
   1943c:	mov	r0, r9
   19440:	mov	r1, #0
   19444:	mov	r2, #10
   19448:	mov	r7, #0
   1944c:	bl	116c0 <strtol@plt>
   19450:	mov	r4, r0
   19454:	cmp	r0, #2
   19458:	blt	19560 <__assert_fail@plt+0x7ad4>
   1945c:	movw	r0, #21000	; 0x5208
   19460:	movt	r0, #3
   19464:	ldr	r0, [r0, #12]
   19468:	subs	r0, r4, r0
   1946c:	movcs	r7, r0
   19470:	ldrb	r0, [r9]
   19474:	cmp	r7, #2
   19478:	subge	r2, r7, r5
   1947c:	cmpge	r2, #2
   19480:	sub	r0, r0, #48	; 0x30
   19484:	clz	r0, r0
   19488:	lsr	r0, r0, #5
   1948c:	add	r1, r9, r0
   19490:	mov	r9, r6
   19494:	sub	r0, r1, r6
   19498:	str	r0, [fp, #-32]	; 0xffffffe0
   1949c:	bge	19990 <__assert_fail@plt+0x7f04>
   194a0:	cmp	r5, #8
   194a4:	bgt	1956c <__assert_fail@plt+0x7ae0>
   194a8:	mov	r6, r4
   194ac:	b	194bc <__assert_fail@plt+0x7a30>
   194b0:	str	r5, [fp, #-32]	; 0xffffffe0
   194b4:	mov	r6, #0
   194b8:	mov	r5, #0
   194bc:	rsb	r0, r5, #9
   194c0:	mov	r2, #1
   194c4:	mov	r1, r5
   194c8:	cmp	r0, #3
   194cc:	bls	19540 <__assert_fail@plt+0x7ab4>
   194d0:	bic	r1, r0, #3
   194d4:	mov	r2, #1
   194d8:	vmov.i32	q8, #1	; 0x00000001
   194dc:	sub	r7, r1, #4
   194e0:	add	r3, r2, r7, lsr #2
   194e4:	cmp	r7, #12
   194e8:	and	r2, r3, #3
   194ec:	bcc	19508 <__assert_fail@plt+0x7a7c>
   194f0:	sub	r3, r2, r3
   194f4:	add	r7, pc, #932	; 0x3a4
   194f8:	adds	r3, r3, #4
   194fc:	vld1.64	{d18-d19}, [r7 :128]
   19500:	vmul.i32	q8, q8, q9
   19504:	bne	194f4 <__assert_fail@plt+0x7a68>
   19508:	cmp	r2, #0
   1950c:	beq	19524 <__assert_fail@plt+0x7a98>
   19510:	vmov.i32	q9, #10	; 0x0000000a
   19514:	rsb	r2, r2, #0
   19518:	vmul.i32	q8, q8, q9
   1951c:	adds	r2, r2, #1
   19520:	bcc	19518 <__assert_fail@plt+0x7a8c>
   19524:	vext.8	q9, q8, q8, #8
   19528:	cmp	r0, r1
   1952c:	vmul.i32	q0, q8, q9
   19530:	vmul.i32	q8, q0, d0[1]
   19534:	vmov.32	r2, d16[0]
   19538:	beq	19554 <__assert_fail@plt+0x7ac8>
   1953c:	add	r1, r5, r1
   19540:	sub	r0, r1, #9
   19544:	add	r1, r2, r2, lsl #2
   19548:	adds	r0, r0, #1
   1954c:	lsl	r2, r1, #1
   19550:	bcc	19544 <__assert_fail@plt+0x7ab8>
   19554:	str	r5, [sp, #36]	; 0x24
   19558:	mov	r4, r6
   1955c:	b	19578 <__assert_fail@plt+0x7aec>
   19560:	mov	r9, r6
   19564:	cmp	r5, #8
   19568:	ble	194a8 <__assert_fail@plt+0x7a1c>
   1956c:	mov	r2, #1
   19570:	mov	r0, #9
   19574:	str	r0, [sp, #36]	; 0x24
   19578:	sdiv	r3, r8, r2
   1957c:	cmn	sl, #1
   19580:	str	r5, [fp, #-36]	; 0xffffffdc
   19584:	str	r4, [sp, #40]	; 0x28
   19588:	bgt	19650 <__assert_fail@plt+0x7bc4>
   1958c:	cmp	r8, #0
   19590:	beq	19650 <__assert_fail@plt+0x7bc4>
   19594:	movw	r1, #51712	; 0xca00
   19598:	mls	r0, r3, r2, r8
   1959c:	movt	r1, #15258	; 0x3b9a
   195a0:	udiv	r1, r1, r2
   195a4:	cmp	r0, #0
   195a8:	sub	r3, r1, r3
   195ac:	subne	r3, r3, #1
   195b0:	cmp	r3, #0
   195b4:	str	r3, [sp, #32]
   195b8:	addne	sl, sl, #1
   195bc:	cmp	sl, #0
   195c0:	bne	19654 <__assert_fail@plt+0x7bc8>
   195c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   195c8:	add	r7, r9, #1
   195cc:	add	sl, r9, r0
   195d0:	cmp	r0, #2
   195d4:	blt	197cc <__assert_fail@plt+0x7d40>
   195d8:	movw	r5, #16201	; 0x3f49
   195dc:	movw	r8, #14812	; 0x39dc
   195e0:	mov	r6, r7
   195e4:	movt	r5, #2
   195e8:	movt	r8, #2
   195ec:	ldrb	r4, [r6]
   195f0:	mov	r0, r5
   195f4:	mov	r2, #8
   195f8:	mov	r1, r4
   195fc:	bl	11948 <memchr@plt>
   19600:	cmp	r0, #0
   19604:	beq	1962c <__assert_fail@plt+0x7ba0>
   19608:	mov	r0, r8
   1960c:	mov	r1, r4
   19610:	mov	r2, #6
   19614:	bl	11948 <memchr@plt>
   19618:	cmp	r0, #0
   1961c:	add	r6, r6, #1
   19620:	strbne	r4, [r7], #1
   19624:	cmp	r6, sl
   19628:	bcc	195ec <__assert_fail@plt+0x7b60>
   1962c:	cmp	r6, sl
   19630:	bcs	197d8 <__assert_fail@plt+0x7d4c>
   19634:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19638:	sub	r0, r0, r6
   1963c:	add	r0, r9, r0
   19640:	cmp	r0, #16
   19644:	bcs	198b0 <__assert_fail@plt+0x7e24>
   19648:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1964c:	b	19a10 <__assert_fail@plt+0x7f84>
   19650:	str	r3, [sp, #32]
   19654:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19658:	add	r8, r9, #1
   1965c:	str	sl, [sp, #28]
   19660:	add	r6, r9, r0
   19664:	cmp	r0, #2
   19668:	blt	196cc <__assert_fail@plt+0x7c40>
   1966c:	movw	r5, #16201	; 0x3f49
   19670:	movw	sl, #14812	; 0x39dc
   19674:	mov	r7, r8
   19678:	movt	r5, #2
   1967c:	movt	sl, #2
   19680:	ldrb	r4, [r7]
   19684:	mov	r0, r5
   19688:	mov	r2, #8
   1968c:	mov	r1, r4
   19690:	bl	11948 <memchr@plt>
   19694:	cmp	r0, #0
   19698:	beq	196c0 <__assert_fail@plt+0x7c34>
   1969c:	mov	r0, sl
   196a0:	mov	r1, r4
   196a4:	mov	r2, #6
   196a8:	bl	11948 <memchr@plt>
   196ac:	cmp	r0, #0
   196b0:	add	r7, r7, #1
   196b4:	strbne	r4, [r8], #1
   196b8:	cmp	r7, r6
   196bc:	bcc	19680 <__assert_fail@plt+0x7bf4>
   196c0:	cmp	r7, r6
   196c4:	bcc	196d8 <__assert_fail@plt+0x7c4c>
   196c8:	b	197c0 <__assert_fail@plt+0x7d34>
   196cc:	mov	r7, r8
   196d0:	cmp	r7, r6
   196d4:	bcs	197c0 <__assert_fail@plt+0x7d34>
   196d8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   196dc:	sub	r0, r0, r7
   196e0:	add	sl, r9, r0
   196e4:	cmp	sl, #16
   196e8:	bcc	197e4 <__assert_fail@plt+0x7d58>
   196ec:	cmp	r8, r6
   196f0:	addcc	r1, r8, sl
   196f4:	cmpcc	r7, r1
   196f8:	bcc	197e4 <__assert_fail@plt+0x7d58>
   196fc:	bic	r0, sl, #15
   19700:	mov	r2, #1
   19704:	mov	r3, #0
   19708:	str	r9, [sp, #24]
   1970c:	sub	r4, r0, #16
   19710:	str	r0, [sp, #20]
   19714:	add	r5, r2, r4, lsr #4
   19718:	cmp	r4, #48	; 0x30
   1971c:	and	r0, r5, #3
   19720:	str	r0, [fp, #-32]	; 0xffffffe0
   19724:	bcc	19784 <__assert_fail@plt+0x7cf8>
   19728:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1972c:	mov	r3, #0
   19730:	mov	r9, #48	; 0x30
   19734:	sub	r5, r5, r0
   19738:	add	r2, r7, r3
   1973c:	add	r0, r8, r3
   19740:	subs	r5, r5, #4
   19744:	add	r3, r3, #64	; 0x40
   19748:	mov	r1, r2
   1974c:	mov	ip, r0
   19750:	add	lr, r2, #16
   19754:	add	r4, r0, #16
   19758:	add	r2, r2, #32
   1975c:	add	r0, r0, #32
   19760:	vld1.8	{d16-d17}, [r1], r9
   19764:	vst1.8	{d16-d17}, [ip], r9
   19768:	vld1.8	{d16-d17}, [lr]
   1976c:	vst1.8	{d16-d17}, [r4]
   19770:	vld1.8	{d16-d17}, [r2]
   19774:	vst1.8	{d16-d17}, [r0]
   19778:	vld1.8	{d16-d17}, [r1]
   1977c:	vst1.8	{d16-d17}, [ip]
   19780:	bne	19738 <__assert_fail@plt+0x7cac>
   19784:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19788:	cmp	r0, #0
   1978c:	beq	197ac <__assert_fail@plt+0x7d20>
   19790:	add	r5, r8, r3
   19794:	add	r3, r7, r3
   19798:	rsb	r2, r0, #0
   1979c:	vld1.8	{d16-d17}, [r3]!
   197a0:	adds	r2, r2, #1
   197a4:	vst1.8	{d16-d17}, [r5]!
   197a8:	bcc	1979c <__assert_fail@plt+0x7d10>
   197ac:	ldr	r0, [sp, #20]
   197b0:	ldr	r9, [sp, #24]
   197b4:	add	r8, r8, r0
   197b8:	cmp	r0, sl
   197bc:	bne	197e0 <__assert_fail@plt+0x7d54>
   197c0:	ldr	r5, [sp, #40]	; 0x28
   197c4:	ldr	r2, [sp, #28]
   197c8:	b	197fc <__assert_fail@plt+0x7d70>
   197cc:	mov	r6, r7
   197d0:	cmp	r6, sl
   197d4:	bcc	19634 <__assert_fail@plt+0x7ba8>
   197d8:	ldr	r4, [fp, #-36]	; 0xffffffdc
   197dc:	b	19a20 <__assert_fail@plt+0x7f94>
   197e0:	add	r7, r7, r0
   197e4:	ldr	r5, [sp, #40]	; 0x28
   197e8:	ldr	r2, [sp, #28]
   197ec:	ldrb	r0, [r7], #1
   197f0:	cmp	r6, r7
   197f4:	strb	r0, [r8], #1
   197f8:	bne	197ec <__assert_fail@plt+0x7d60>
   197fc:	movw	r0, #27756	; 0x6c6c
   19800:	asr	r3, r2, #31
   19804:	mov	r1, r9
   19808:	movt	r0, #100	; 0x64
   1980c:	str	r0, [r8]
   19810:	mov	r0, #1
   19814:	bl	11924 <__printf_chk@plt>
   19818:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1981c:	cmp	r4, #0
   19820:	beq	19890 <__assert_fail@plt+0x7e04>
   19824:	ldr	r3, [sp, #36]	; 0x24
   19828:	bic	r2, r0, r0, asr #31
   1982c:	mov	r0, #0
   19830:	mov	r6, #0
   19834:	cmp	r5, r2
   19838:	sub	r1, r4, r3
   1983c:	ble	19860 <__assert_fail@plt+0x7dd4>
   19840:	movw	r7, #21000	; 0x5208
   19844:	sub	r2, r5, r2
   19848:	mov	r6, #0
   1984c:	movt	r7, #3
   19850:	ldr	r7, [r7, #12]
   19854:	cmp	r2, r7
   19858:	subhi	r2, r2, r3
   1985c:	subhi	r6, r2, r7
   19860:	movw	r2, #21000	; 0x5208
   19864:	ldr	r7, [sp, #32]
   19868:	str	r1, [sp, #8]
   1986c:	movw	r1, #14857	; 0x3a09
   19870:	str	r0, [sp, #12]
   19874:	mov	r0, #1
   19878:	str	r6, [sp, #4]
   1987c:	movt	r2, #3
   19880:	movt	r1, #2
   19884:	ldr	r2, [r2, #8]
   19888:	str	r7, [sp]
   1988c:	bl	11924 <__printf_chk@plt>
   19890:	sub	sp, fp, #28
   19894:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19898:	nop	{0}
   1989c:	nop	{0}
   198a0:	andeq	r2, r0, r0, lsl r7
   198a4:	andeq	r2, r0, r0, lsl r7
   198a8:	andeq	r2, r0, r0, lsl r7
   198ac:	andeq	r2, r0, r0, lsl r7
   198b0:	cmp	r7, sl
   198b4:	addcc	r1, r7, r0
   198b8:	cmpcc	r6, r1
   198bc:	bcc	19a0c <__assert_fail@plt+0x7f80>
   198c0:	str	r0, [sp, #28]
   198c4:	bic	r0, r0, #15
   198c8:	mov	r2, #1
   198cc:	mov	r3, #0
   198d0:	sub	r4, r0, #16
   198d4:	str	r0, [sp, #24]
   198d8:	add	r5, r2, r4, lsr #4
   198dc:	cmp	r4, #48	; 0x30
   198e0:	and	r0, r5, #3
   198e4:	str	r0, [fp, #-32]	; 0xffffffe0
   198e8:	bcc	19948 <__assert_fail@plt+0x7ebc>
   198ec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   198f0:	mov	r3, #0
   198f4:	mov	r8, #48	; 0x30
   198f8:	sub	r5, r5, r0
   198fc:	add	r2, r6, r3
   19900:	add	r0, r7, r3
   19904:	subs	r5, r5, #4
   19908:	add	r3, r3, #64	; 0x40
   1990c:	mov	r1, r2
   19910:	mov	ip, r0
   19914:	add	lr, r2, #16
   19918:	add	r4, r0, #16
   1991c:	add	r2, r2, #32
   19920:	add	r0, r0, #32
   19924:	vld1.8	{d16-d17}, [r1], r8
   19928:	vst1.8	{d16-d17}, [ip], r8
   1992c:	vld1.8	{d16-d17}, [lr]
   19930:	vst1.8	{d16-d17}, [r4]
   19934:	vld1.8	{d16-d17}, [r2]
   19938:	vst1.8	{d16-d17}, [r0]
   1993c:	vld1.8	{d16-d17}, [r1]
   19940:	vst1.8	{d16-d17}, [ip]
   19944:	bne	198fc <__assert_fail@plt+0x7e70>
   19948:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1994c:	cmp	r0, #0
   19950:	beq	19970 <__assert_fail@plt+0x7ee4>
   19954:	add	r5, r7, r3
   19958:	add	r3, r6, r3
   1995c:	rsb	r2, r0, #0
   19960:	vld1.8	{d16-d17}, [r3]!
   19964:	adds	r2, r2, #1
   19968:	vst1.8	{d16-d17}, [r5]!
   1996c:	bcc	19960 <__assert_fail@plt+0x7ed4>
   19970:	ldr	r1, [sp, #24]
   19974:	ldr	r0, [sp, #28]
   19978:	ldr	r4, [fp, #-36]	; 0xffffffdc
   1997c:	add	r7, r7, r1
   19980:	cmp	r1, r0
   19984:	beq	19a20 <__assert_fail@plt+0x7f94>
   19988:	add	r6, r6, r1
   1998c:	b	19a10 <__assert_fail@plt+0x7f84>
   19990:	mov	r6, #0
   19994:	cmp	r1, r9
   19998:	mov	r0, r9
   1999c:	bls	199dc <__assert_fail@plt+0x7f50>
   199a0:	add	r1, r1, #1
   199a4:	add	r3, r9, #1
   199a8:	mov	r7, #0
   199ac:	mov	r0, r9
   199b0:	ldrb	r6, [r3, #-1]
   199b4:	add	r3, r3, #1
   199b8:	cmp	r6, #45	; 0x2d
   199bc:	strbne	r6, [r0], #1
   199c0:	moveq	r7, #1
   199c4:	cmp	r1, r3
   199c8:	bne	199b0 <__assert_fail@plt+0x7f24>
   199cc:	sub	r6, r0, r9
   199d0:	mov	r1, #0
   199d4:	tst	r7, #1
   199d8:	bne	199f8 <__assert_fail@plt+0x7f6c>
   199dc:	movw	r3, #16755	; 0x4173
   199e0:	str	r2, [sp]
   199e4:	mov	r1, #1
   199e8:	mvn	r2, #0
   199ec:	movt	r3, #2
   199f0:	bl	118f4 <__sprintf_chk@plt>
   199f4:	mov	r1, r0
   199f8:	add	r0, r6, r1
   199fc:	str	r0, [fp, #-32]	; 0xffffffe0
   19a00:	cmp	r5, #8
   19a04:	ble	194a8 <__assert_fail@plt+0x7a1c>
   19a08:	b	1956c <__assert_fail@plt+0x7ae0>
   19a0c:	ldr	r4, [fp, #-36]	; 0xffffffdc
   19a10:	ldrb	r0, [r6], #1
   19a14:	cmp	sl, r6
   19a18:	strb	r0, [r7], #1
   19a1c:	bne	19a10 <__assert_fail@plt+0x7f84>
   19a20:	vmov.f64	d16, #208	; 0xbe800000 -0.250
   19a24:	movw	r0, #12334	; 0x302e
   19a28:	mov	r1, r9
   19a2c:	movt	r0, #102	; 0x66
   19a30:	vmov	r2, r3, d16
   19a34:	str	r0, [r7]
   19a38:	mov	r0, #1
   19a3c:	bl	11924 <__printf_chk@plt>
   19a40:	ldr	r5, [sp, #40]	; 0x28
   19a44:	cmp	r4, #0
   19a48:	bne	19824 <__assert_fail@plt+0x7d98>
   19a4c:	b	19890 <__assert_fail@plt+0x7e04>
   19a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19a54:	add	fp, sp, #28
   19a58:	sub	sp, sp, #212	; 0xd4
   19a5c:	movw	r6, #21000	; 0x5208
   19a60:	mov	r4, r0
   19a64:	movt	r6, #3
   19a68:	ldrb	r0, [r6, #4]
   19a6c:	cmp	r0, #0
   19a70:	bne	19ac4 <__assert_fail@plt+0x8038>
   19a74:	mov	r0, #0
   19a78:	bl	1aaf0 <__assert_fail@plt+0x9064>
   19a7c:	cmp	r0, #0
   19a80:	str	r0, [r6, #16]
   19a84:	bne	19abc <__assert_fail@plt+0x8030>
   19a88:	bl	118e8 <__errno_location@plt>
   19a8c:	movw	r1, #14770	; 0x39b2
   19a90:	ldr	r5, [r0]
   19a94:	mov	r0, #0
   19a98:	mov	r2, #5
   19a9c:	movt	r1, #2
   19aa0:	bl	11720 <dcgettext@plt>
   19aa4:	movw	r2, #13173	; 0x3375
   19aa8:	mov	r3, r0
   19aac:	mov	r0, #0
   19ab0:	mov	r1, r5
   19ab4:	movt	r2, #2
   19ab8:	bl	117d4 <error@plt>
   19abc:	mov	r0, #1
   19ac0:	strb	r0, [r6, #4]
   19ac4:	add	r7, sp, #104	; 0x68
   19ac8:	mov	r0, #3
   19acc:	mov	r1, r4
   19ad0:	mov	r2, r7
   19ad4:	bl	11a38 <__xstat64@plt>
   19ad8:	mov	r5, #0
   19adc:	cmp	r0, #0
   19ae0:	bne	19b94 <__assert_fail@plt+0x8108>
   19ae4:	ldr	r6, [r6, #16]
   19ae8:	cmp	r6, #0
   19aec:	beq	19b94 <__assert_fail@plt+0x8108>
   19af0:	mov	r8, sp
   19af4:	add	sl, r7, #96	; 0x60
   19af8:	add	r9, r8, #96	; 0x60
   19afc:	ldrb	r0, [r6, #24]
   19b00:	tst	r0, #1
   19b04:	bne	19b20 <__assert_fail@plt+0x8094>
   19b08:	ldr	r6, [r6, #28]
   19b0c:	cmp	r6, #0
   19b10:	beq	19b94 <__assert_fail@plt+0x8108>
   19b14:	ldrb	r0, [r6, #24]
   19b18:	tst	r0, #1
   19b1c:	beq	19b08 <__assert_fail@plt+0x807c>
   19b20:	ldr	r7, [r6]
   19b24:	ldrb	r0, [r7]
   19b28:	cmp	r0, #47	; 0x2f
   19b2c:	bne	19b08 <__assert_fail@plt+0x807c>
   19b30:	ldr	r0, [r6, #4]
   19b34:	mov	r1, r4
   19b38:	bl	116b4 <strcmp@plt>
   19b3c:	cmp	r0, #0
   19b40:	bne	19b08 <__assert_fail@plt+0x807c>
   19b44:	mov	r0, #3
   19b48:	mov	r1, r7
   19b4c:	mov	r2, r8
   19b50:	bl	11a38 <__xstat64@plt>
   19b54:	cmp	r0, #0
   19b58:	bne	19b08 <__assert_fail@plt+0x807c>
   19b5c:	ldrd	r0, [r9]
   19b60:	ldrd	r2, [sl]
   19b64:	eor	r1, r3, r1
   19b68:	eor	r0, r2, r0
   19b6c:	orrs	r0, r0, r1
   19b70:	bne	19b08 <__assert_fail@plt+0x807c>
   19b74:	ldr	r2, [sp, #104]	; 0x68
   19b78:	ldr	r3, [sp, #108]	; 0x6c
   19b7c:	ldm	sp, {r0, r1}
   19b80:	eor	r1, r3, r1
   19b84:	eor	r0, r2, r0
   19b88:	orrs	r0, r0, r1
   19b8c:	bne	19b08 <__assert_fail@plt+0x807c>
   19b90:	ldr	r5, [r6]
   19b94:	mov	r0, r5
   19b98:	sub	sp, fp, #28
   19b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ba4:	add	fp, sp, #28
   19ba8:	sub	sp, sp, #220	; 0xdc
   19bac:	mov	r5, r0
   19bb0:	sub	r0, fp, #40	; 0x28
   19bb4:	mov	r4, r1
   19bb8:	bl	1f44c <__assert_fail@plt+0xd9c0>
   19bbc:	cmp	r0, #0
   19bc0:	beq	19c00 <__assert_fail@plt+0x8174>
   19bc4:	bl	118e8 <__errno_location@plt>
   19bc8:	movw	r1, #16220	; 0x3f5c
   19bcc:	ldr	r5, [r0]
   19bd0:	mov	r0, #0
   19bd4:	mov	r2, #5
   19bd8:	mov	r4, #0
   19bdc:	movt	r1, #2
   19be0:	bl	11720 <dcgettext@plt>
   19be4:	mov	r2, r0
   19be8:	mov	r0, #0
   19bec:	mov	r1, r5
   19bf0:	bl	117d4 <error@plt>
   19bf4:	mov	r0, r4
   19bf8:	sub	sp, fp, #28
   19bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c00:	ldr	r0, [r4, #16]
   19c04:	and	r0, r0, #61440	; 0xf000
   19c08:	cmp	r0, #16384	; 0x4000
   19c0c:	bne	19c34 <__assert_fail@plt+0x81a8>
   19c10:	sub	r0, fp, #144	; 0x90
   19c14:	mov	r1, r4
   19c18:	mov	r2, #104	; 0x68
   19c1c:	bl	11708 <memcpy@plt>
   19c20:	mov	r0, r5
   19c24:	bl	1175c <chdir@plt>
   19c28:	cmn	r0, #1
   19c2c:	bgt	19c98 <__assert_fail@plt+0x820c>
   19c30:	b	19d50 <__assert_fail@plt+0x82c4>
   19c34:	mov	r0, r5
   19c38:	bl	1a6b8 <__assert_fail@plt+0x8c2c>
   19c3c:	mov	r4, r0
   19c40:	bl	118ac <strlen@plt>
   19c44:	add	r1, r0, #8
   19c48:	bic	r1, r1, #7
   19c4c:	sub	r5, sp, r1
   19c50:	mov	sp, r5
   19c54:	add	r2, r0, #1
   19c58:	mov	r0, r5
   19c5c:	mov	r1, r4
   19c60:	bl	11708 <memcpy@plt>
   19c64:	mov	r0, r4
   19c68:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   19c6c:	mov	r0, r5
   19c70:	bl	1175c <chdir@plt>
   19c74:	cmn	r0, #1
   19c78:	ble	19d50 <__assert_fail@plt+0x82c4>
   19c7c:	movw	r1, #16319	; 0x3fbf
   19c80:	sub	r2, fp, #144	; 0x90
   19c84:	mov	r0, #3
   19c88:	movt	r1, #2
   19c8c:	bl	11a38 <__xstat64@plt>
   19c90:	cmn	r0, #1
   19c94:	ble	19dac <__assert_fail@plt+0x8320>
   19c98:	movw	r1, #16318	; 0x3fbe
   19c9c:	sub	r4, fp, #248	; 0xf8
   19ca0:	mov	r0, #3
   19ca4:	movt	r1, #2
   19ca8:	mov	r2, r4
   19cac:	bl	11a38 <__xstat64@plt>
   19cb0:	movw	r8, #16321	; 0x3fc1
   19cb4:	cmp	r0, #0
   19cb8:	movt	r8, #2
   19cbc:	bmi	19df4 <__assert_fail@plt+0x8368>
   19cc0:	movw	r7, #16318	; 0x3fbe
   19cc4:	movw	sl, #16249	; 0x3f79
   19cc8:	sub	r9, fp, #144	; 0x90
   19ccc:	add	r6, r4, #96	; 0x60
   19cd0:	movt	r7, #2
   19cd4:	movt	sl, #2
   19cd8:	add	r5, r9, #96	; 0x60
   19cdc:	ldr	r0, [fp, #-144]	; 0xffffff70
   19ce0:	ldr	r2, [fp, #-248]	; 0xffffff08
   19ce4:	ldr	r1, [fp, #-140]	; 0xffffff74
   19ce8:	ldr	r3, [fp, #-244]	; 0xffffff0c
   19cec:	eor	r1, r3, r1
   19cf0:	eor	r0, r2, r0
   19cf4:	orrs	r0, r0, r1
   19cf8:	bne	19da0 <__assert_fail@plt+0x8314>
   19cfc:	ldrd	r0, [r5]
   19d00:	ldrd	r2, [r6]
   19d04:	eor	r1, r3, r1
   19d08:	eor	r0, r2, r0
   19d0c:	orrs	r0, r0, r1
   19d10:	beq	19da0 <__assert_fail@plt+0x8314>
   19d14:	mov	r0, r7
   19d18:	bl	1175c <chdir@plt>
   19d1c:	cmn	r0, #1
   19d20:	ble	19df0 <__assert_fail@plt+0x8364>
   19d24:	mov	r0, r9
   19d28:	mov	r1, r4
   19d2c:	mov	r2, #104	; 0x68
   19d30:	bl	11708 <memcpy@plt>
   19d34:	mov	r0, #3
   19d38:	mov	r1, r7
   19d3c:	mov	r2, r4
   19d40:	bl	11a38 <__xstat64@plt>
   19d44:	cmp	r0, #0
   19d48:	bpl	19cdc <__assert_fail@plt+0x8250>
   19d4c:	b	19df4 <__assert_fail@plt+0x8368>
   19d50:	bl	118e8 <__errno_location@plt>
   19d54:	movw	r1, #16249	; 0x3f79
   19d58:	ldr	r6, [r0]
   19d5c:	mov	r0, #0
   19d60:	mov	r2, #5
   19d64:	mov	r4, #0
   19d68:	movt	r1, #2
   19d6c:	bl	11720 <dcgettext@plt>
   19d70:	mov	r7, r0
   19d74:	mov	r0, #4
   19d78:	mov	r1, r5
   19d7c:	bl	1ef0c <__assert_fail@plt+0xd480>
   19d80:	mov	r3, r0
   19d84:	mov	r0, #0
   19d88:	mov	r1, r6
   19d8c:	mov	r2, r7
   19d90:	bl	117d4 <error@plt>
   19d94:	mov	r0, r4
   19d98:	sub	sp, fp, #28
   19d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19da0:	bl	20a20 <__assert_fail@plt+0xef94>
   19da4:	mov	r4, r0
   19da8:	b	19e38 <__assert_fail@plt+0x83ac>
   19dac:	bl	118e8 <__errno_location@plt>
   19db0:	movw	r1, #16279	; 0x3f97
   19db4:	ldr	r6, [r0]
   19db8:	mov	r0, #0
   19dbc:	mov	r2, #5
   19dc0:	mov	r4, #0
   19dc4:	movt	r1, #2
   19dc8:	bl	11720 <dcgettext@plt>
   19dcc:	mov	r7, r0
   19dd0:	mov	r0, #4
   19dd4:	mov	r1, r5
   19dd8:	bl	1ef0c <__assert_fail@plt+0xd480>
   19ddc:	mov	r3, r0
   19de0:	mov	r0, #0
   19de4:	mov	r1, r6
   19de8:	mov	r2, r7
   19dec:	b	19e34 <__assert_fail@plt+0x83a8>
   19df0:	mov	r8, sl
   19df4:	bl	118e8 <__errno_location@plt>
   19df8:	ldr	r6, [r0]
   19dfc:	mov	r0, #0
   19e00:	mov	r1, r8
   19e04:	mov	r2, #5
   19e08:	mov	r4, #0
   19e0c:	bl	11720 <dcgettext@plt>
   19e10:	movw	r1, #16318	; 0x3fbe
   19e14:	mov	r5, r0
   19e18:	mov	r0, #4
   19e1c:	movt	r1, #2
   19e20:	bl	1ef0c <__assert_fail@plt+0xd480>
   19e24:	mov	r3, r0
   19e28:	mov	r0, #0
   19e2c:	mov	r1, r6
   19e30:	mov	r2, r5
   19e34:	bl	117d4 <error@plt>
   19e38:	bl	118e8 <__errno_location@plt>
   19e3c:	ldr	r6, [r0]
   19e40:	mov	r5, r0
   19e44:	sub	r0, fp, #40	; 0x28
   19e48:	bl	1f4a8 <__assert_fail@plt+0xda1c>
   19e4c:	cmp	r0, #0
   19e50:	bne	19e6c <__assert_fail@plt+0x83e0>
   19e54:	sub	r0, fp, #40	; 0x28
   19e58:	bl	1f4c4 <__assert_fail@plt+0xda38>
   19e5c:	str	r6, [r5]
   19e60:	mov	r0, r4
   19e64:	sub	sp, fp, #28
   19e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e6c:	movw	r1, #16336	; 0x3fd0
   19e70:	ldr	r4, [r5]
   19e74:	mov	r0, #0
   19e78:	mov	r2, #5
   19e7c:	movt	r1, #2
   19e80:	bl	11720 <dcgettext@plt>
   19e84:	mov	r2, r0
   19e88:	mov	r0, #1
   19e8c:	mov	r1, r4
   19e90:	bl	117d4 <error@plt>
   19e94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19e98:	add	fp, sp, #24
   19e9c:	sub	sp, sp, #128	; 0x80
   19ea0:	mov	r5, r0
   19ea4:	cmp	r1, #0
   19ea8:	beq	19f28 <__assert_fail@plt+0x849c>
   19eac:	cmp	r1, #1024	; 0x400
   19eb0:	movw	r4, #1025	; 0x401
   19eb4:	addls	r4, r1, #1
   19eb8:	mov	r0, r4
   19ebc:	bl	20ae4 <__assert_fail@plt+0xf058>
   19ec0:	cmp	r0, #0
   19ec4:	beq	19fb0 <__assert_fail@plt+0x8524>
   19ec8:	mov	r6, r0
   19ecc:	b	19ee8 <__assert_fail@plt+0x845c>
   19ed0:	lsl	r4, r4, #1
   19ed4:	mov	r0, r4
   19ed8:	bl	20ae4 <__assert_fail@plt+0xf058>
   19edc:	mov	r6, r0
   19ee0:	cmp	r0, #0
   19ee4:	beq	19fb0 <__assert_fail@plt+0x8524>
   19ee8:	mov	r0, r5
   19eec:	mov	r1, r6
   19ef0:	mov	r2, r4
   19ef4:	bl	11780 <readlink@plt>
   19ef8:	cmn	r0, #1
   19efc:	ble	19fc0 <__assert_fail@plt+0x8534>
   19f00:	cmp	r0, r4
   19f04:	bcc	1a018 <__assert_fail@plt+0x858c>
   19f08:	mov	r0, r6
   19f0c:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   19f10:	cmn	r4, #-1073741823	; 0xc0000001
   19f14:	bls	19ed0 <__assert_fail@plt+0x8444>
   19f18:	cmn	r4, #-2147483647	; 0x80000001
   19f1c:	mvn	r4, #-2147483648	; 0x80000000
   19f20:	bcc	19ed4 <__assert_fail@plt+0x8448>
   19f24:	b	19fb0 <__assert_fail@plt+0x8524>
   19f28:	mov	r4, #128	; 0x80
   19f2c:	mov	r8, sp
   19f30:	mov	r6, #0
   19f34:	cmp	r4, #128	; 0x80
   19f38:	mov	r7, r8
   19f3c:	beq	19f74 <__assert_fail@plt+0x84e8>
   19f40:	b	19f5c <__assert_fail@plt+0x84d0>
   19f44:	lsl	r0, r4, #1
   19f48:	mov	r4, r0
   19f4c:	mov	r6, #0
   19f50:	cmp	r4, #128	; 0x80
   19f54:	mov	r7, r8
   19f58:	beq	19f74 <__assert_fail@plt+0x84e8>
   19f5c:	mov	r0, r4
   19f60:	bl	20ae4 <__assert_fail@plt+0xf058>
   19f64:	mov	r7, r0
   19f68:	cmp	r0, #0
   19f6c:	mov	r6, r0
   19f70:	beq	19fb0 <__assert_fail@plt+0x8524>
   19f74:	mov	r0, r5
   19f78:	mov	r1, r7
   19f7c:	mov	r2, r4
   19f80:	bl	11780 <readlink@plt>
   19f84:	cmp	r0, #0
   19f88:	bmi	19fc0 <__assert_fail@plt+0x8534>
   19f8c:	cmp	r0, r4
   19f90:	bcc	19fd8 <__assert_fail@plt+0x854c>
   19f94:	mov	r0, r6
   19f98:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   19f9c:	cmp	r4, #1073741824	; 0x40000000
   19fa0:	bcc	19f44 <__assert_fail@plt+0x84b8>
   19fa4:	mvn	r0, #-2147483648	; 0x80000000
   19fa8:	cmn	r4, #-2147483647	; 0x80000001
   19fac:	bcc	19f48 <__assert_fail@plt+0x84bc>
   19fb0:	bl	118e8 <__errno_location@plt>
   19fb4:	mov	r1, #12
   19fb8:	str	r1, [r0]
   19fbc:	b	19fc8 <__assert_fail@plt+0x853c>
   19fc0:	mov	r0, r6
   19fc4:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   19fc8:	mov	r5, #0
   19fcc:	mov	r0, r5
   19fd0:	sub	sp, fp, #24
   19fd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19fd8:	mov	r5, #0
   19fdc:	add	r8, r0, #1
   19fe0:	cmp	r6, #0
   19fe4:	strb	r5, [r7, r0]
   19fe8:	beq	1a03c <__assert_fail@plt+0x85b0>
   19fec:	cmp	r8, r4
   19ff0:	bcs	1a02c <__assert_fail@plt+0x85a0>
   19ff4:	mov	r0, r6
   19ff8:	mov	r1, r8
   19ffc:	bl	20b14 <__assert_fail@plt+0xf088>
   1a000:	cmp	r0, #0
   1a004:	mov	r5, r0
   1a008:	moveq	r5, r6
   1a00c:	mov	r0, r5
   1a010:	sub	sp, fp, #24
   1a014:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a018:	mov	r1, #0
   1a01c:	add	r8, r0, #1
   1a020:	strb	r1, [r6, r0]
   1a024:	cmp	r8, r4
   1a028:	bcc	19ff4 <__assert_fail@plt+0x8568>
   1a02c:	mov	r5, r6
   1a030:	mov	r0, r5
   1a034:	sub	sp, fp, #24
   1a038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a03c:	mov	r0, r8
   1a040:	bl	20ae4 <__assert_fail@plt+0xf058>
   1a044:	cmp	r0, #0
   1a048:	beq	19fcc <__assert_fail@plt+0x8540>
   1a04c:	mov	r1, r7
   1a050:	mov	r2, r8
   1a054:	mov	r4, r0
   1a058:	bl	11708 <memcpy@plt>
   1a05c:	mov	r5, r4
   1a060:	mov	r0, r5
   1a064:	sub	sp, fp, #24
   1a068:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a06c:	mov	r0, #1
   1a070:	b	11b90 <__assert_fail@plt+0x104>
   1a074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a078:	add	fp, sp, #28
   1a07c:	sub	sp, sp, #12
   1a080:	mov	r4, r3
   1a084:	mov	r9, r2
   1a088:	mov	r7, r1
   1a08c:	mov	r8, r0
   1a090:	bl	118ac <strlen@plt>
   1a094:	ldr	r6, [r7]
   1a098:	cmp	r6, #0
   1a09c:	beq	1a148 <__assert_fail@plt+0x86bc>
   1a0a0:	mov	r5, r0
   1a0a4:	cmp	r9, #0
   1a0a8:	beq	1a158 <__assert_fail@plt+0x86cc>
   1a0ac:	add	r0, r7, #4
   1a0b0:	mvn	sl, #0
   1a0b4:	mov	r7, #0
   1a0b8:	str	r9, [sp]
   1a0bc:	str	r0, [sp, #8]
   1a0c0:	mov	r0, #0
   1a0c4:	str	r0, [sp, #4]
   1a0c8:	mov	r0, r9
   1a0cc:	b	1a110 <__assert_fail@plt+0x8684>
   1a0d0:	ldr	r0, [sp]
   1a0d4:	mov	r1, r9
   1a0d8:	mov	r2, r4
   1a0dc:	mla	r0, sl, r4, r0
   1a0e0:	bl	118a0 <bcmp@plt>
   1a0e4:	ldr	r1, [sp, #4]
   1a0e8:	cmp	r0, #0
   1a0ec:	movwne	r0, #1
   1a0f0:	orr	r1, r1, r0
   1a0f4:	str	r1, [sp, #4]
   1a0f8:	ldr	r0, [sp, #8]
   1a0fc:	add	r9, r9, r4
   1a100:	ldr	r6, [r0, r7, lsl #2]
   1a104:	add	r7, r7, #1
   1a108:	cmp	r6, #0
   1a10c:	beq	1a1cc <__assert_fail@plt+0x8740>
   1a110:	mov	r0, r6
   1a114:	mov	r1, r8
   1a118:	mov	r2, r5
   1a11c:	bl	11a50 <strncmp@plt>
   1a120:	cmp	r0, #0
   1a124:	bne	1a0f8 <__assert_fail@plt+0x866c>
   1a128:	mov	r0, r6
   1a12c:	bl	118ac <strlen@plt>
   1a130:	cmp	r0, r5
   1a134:	beq	1a14c <__assert_fail@plt+0x86c0>
   1a138:	cmn	sl, #1
   1a13c:	bne	1a0d0 <__assert_fail@plt+0x8644>
   1a140:	mov	sl, r7
   1a144:	b	1a0f8 <__assert_fail@plt+0x866c>
   1a148:	mvn	r7, #0
   1a14c:	mov	r0, r7
   1a150:	sub	sp, fp, #28
   1a154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a158:	add	r4, r7, #4
   1a15c:	mov	r0, #0
   1a160:	mvn	r9, #0
   1a164:	mvn	sl, #0
   1a168:	mov	r7, #0
   1a16c:	str	r0, [sp, #4]
   1a170:	b	1a1a0 <__assert_fail@plt+0x8714>
   1a174:	ldr	r1, [sp, #4]
   1a178:	subs	r0, sl, r9
   1a17c:	movwne	r0, #1
   1a180:	cmn	sl, #1
   1a184:	moveq	sl, r7
   1a188:	orr	r1, r1, r0
   1a18c:	str	r1, [sp, #4]
   1a190:	ldr	r6, [r4, r7, lsl #2]
   1a194:	add	r7, r7, #1
   1a198:	cmp	r6, #0
   1a19c:	beq	1a1cc <__assert_fail@plt+0x8740>
   1a1a0:	mov	r0, r6
   1a1a4:	mov	r1, r8
   1a1a8:	mov	r2, r5
   1a1ac:	bl	11a50 <strncmp@plt>
   1a1b0:	cmp	r0, #0
   1a1b4:	bne	1a190 <__assert_fail@plt+0x8704>
   1a1b8:	mov	r0, r6
   1a1bc:	bl	118ac <strlen@plt>
   1a1c0:	cmp	r0, r5
   1a1c4:	bne	1a174 <__assert_fail@plt+0x86e8>
   1a1c8:	b	1a14c <__assert_fail@plt+0x86c0>
   1a1cc:	ldr	r0, [sp, #4]
   1a1d0:	tst	r0, #1
   1a1d4:	mvnne	sl, #1
   1a1d8:	mov	r0, sl
   1a1dc:	sub	sp, fp, #28
   1a1e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1e4:	push	{r4, r5, r6, r7, fp, lr}
   1a1e8:	add	fp, sp, #16
   1a1ec:	mov	r5, r0
   1a1f0:	ldr	r0, [r1]
   1a1f4:	mvn	r4, #0
   1a1f8:	cmp	r0, #0
   1a1fc:	beq	1a228 <__assert_fail@plt+0x879c>
   1a200:	add	r7, r1, #4
   1a204:	mov	r6, #0
   1a208:	mov	r1, r5
   1a20c:	bl	116b4 <strcmp@plt>
   1a210:	cmp	r0, #0
   1a214:	beq	1a230 <__assert_fail@plt+0x87a4>
   1a218:	ldr	r0, [r7, r6, lsl #2]
   1a21c:	add	r6, r6, #1
   1a220:	cmp	r0, #0
   1a224:	bne	1a208 <__assert_fail@plt+0x877c>
   1a228:	mov	r0, r4
   1a22c:	pop	{r4, r5, r6, r7, fp, pc}
   1a230:	mov	r0, r6
   1a234:	pop	{r4, r5, r6, r7, fp, pc}
   1a238:	push	{r4, r5, r6, sl, fp, lr}
   1a23c:	add	fp, sp, #16
   1a240:	sub	sp, sp, #8
   1a244:	mov	r5, r0
   1a248:	movw	r0, #16397	; 0x400d
   1a24c:	mov	r4, r1
   1a250:	movw	r1, #16424	; 0x4028
   1a254:	cmn	r2, #1
   1a258:	mov	r2, #5
   1a25c:	movt	r0, #2
   1a260:	movt	r1, #2
   1a264:	moveq	r1, r0
   1a268:	mov	r0, #0
   1a26c:	bl	11720 <dcgettext@plt>
   1a270:	mov	r6, r0
   1a274:	mov	r0, #0
   1a278:	mov	r1, #8
   1a27c:	mov	r2, r4
   1a280:	bl	1ee64 <__assert_fail@plt+0xd3d8>
   1a284:	mov	r4, r0
   1a288:	mov	r0, #1
   1a28c:	mov	r1, r5
   1a290:	bl	1f424 <__assert_fail@plt+0xd998>
   1a294:	str	r0, [sp]
   1a298:	mov	r0, #0
   1a29c:	mov	r1, #0
   1a2a0:	mov	r2, r6
   1a2a4:	mov	r3, r4
   1a2a8:	bl	117d4 <error@plt>
   1a2ac:	sub	sp, fp, #16
   1a2b0:	pop	{r4, r5, r6, sl, fp, pc}
   1a2b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2b8:	add	fp, sp, #28
   1a2bc:	sub	sp, sp, #4
   1a2c0:	mov	sl, r1
   1a2c4:	movw	r1, #16453	; 0x4045
   1a2c8:	mov	r4, r2
   1a2cc:	mov	r6, r0
   1a2d0:	mov	r0, #0
   1a2d4:	mov	r2, #5
   1a2d8:	mov	r8, #0
   1a2dc:	movt	r1, #2
   1a2e0:	bl	11720 <dcgettext@plt>
   1a2e4:	movw	r1, #20960	; 0x51e0
   1a2e8:	movt	r1, #3
   1a2ec:	ldr	r1, [r1]
   1a2f0:	bl	11678 <fputs_unlocked@plt>
   1a2f4:	ldr	r7, [r6]
   1a2f8:	cmp	r7, #0
   1a2fc:	beq	1a3b8 <__assert_fail@plt+0x892c>
   1a300:	add	r0, r6, #4
   1a304:	mov	r9, #0
   1a308:	mov	r6, #0
   1a30c:	str	r0, [sp]
   1a310:	cmp	r9, #0
   1a314:	bne	1a36c <__assert_fail@plt+0x88e0>
   1a318:	mov	r5, #0
   1a31c:	movw	r0, #20960	; 0x51e0
   1a320:	movt	r0, #3
   1a324:	ldr	r6, [r0]
   1a328:	mov	r0, r7
   1a32c:	bl	1f434 <__assert_fail@plt+0xd9a8>
   1a330:	movw	r2, #16474	; 0x405a
   1a334:	mov	r3, r0
   1a338:	mov	r0, r6
   1a33c:	mov	r1, #1
   1a340:	movt	r2, #2
   1a344:	bl	1193c <__fprintf_chk@plt>
   1a348:	add	r6, sl, r5
   1a34c:	ldr	r0, [sp]
   1a350:	add	r8, r8, r4
   1a354:	ldr	r7, [r0, -r9, lsl #2]
   1a358:	sub	r9, r9, #1
   1a35c:	cmp	r7, #0
   1a360:	beq	1a3b8 <__assert_fail@plt+0x892c>
   1a364:	cmp	r9, #0
   1a368:	beq	1a318 <__assert_fail@plt+0x888c>
   1a36c:	add	r1, sl, r8
   1a370:	mov	r0, r6
   1a374:	mov	r2, r4
   1a378:	bl	118a0 <bcmp@plt>
   1a37c:	cmp	r0, #0
   1a380:	mov	r5, r8
   1a384:	bne	1a31c <__assert_fail@plt+0x8890>
   1a388:	movw	r0, #20960	; 0x51e0
   1a38c:	movt	r0, #3
   1a390:	ldr	r5, [r0]
   1a394:	mov	r0, r7
   1a398:	bl	1f434 <__assert_fail@plt+0xd9a8>
   1a39c:	movw	r2, #16482	; 0x4062
   1a3a0:	mov	r3, r0
   1a3a4:	mov	r0, r5
   1a3a8:	mov	r1, #1
   1a3ac:	movt	r2, #2
   1a3b0:	bl	1193c <__fprintf_chk@plt>
   1a3b4:	b	1a34c <__assert_fail@plt+0x88c0>
   1a3b8:	movw	r0, #20960	; 0x51e0
   1a3bc:	movt	r0, #3
   1a3c0:	ldr	r0, [r0]
   1a3c4:	ldr	r1, [r0, #20]
   1a3c8:	ldr	r2, [r0, #24]
   1a3cc:	cmp	r1, r2
   1a3d0:	addcc	r2, r1, #1
   1a3d4:	strcc	r2, [r0, #20]
   1a3d8:	movcc	r0, #10
   1a3dc:	strbcc	r0, [r1]
   1a3e0:	subcc	sp, fp, #28
   1a3e4:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3e8:	mov	r1, #10
   1a3ec:	sub	sp, fp, #28
   1a3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3f4:	b	11990 <__overflow@plt>
   1a3f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3fc:	add	fp, sp, #28
   1a400:	sub	sp, sp, #12
   1a404:	mov	sl, r0
   1a408:	ldr	r0, [fp, #16]
   1a40c:	ldr	r9, [fp, #8]
   1a410:	mov	r5, r3
   1a414:	mov	r8, r2
   1a418:	mov	r6, r1
   1a41c:	cmp	r0, #0
   1a420:	beq	1a450 <__assert_fail@plt+0x89c4>
   1a424:	mov	r0, r6
   1a428:	mov	r1, r8
   1a42c:	mov	r2, r5
   1a430:	mov	r3, r9
   1a434:	bl	1a074 <__assert_fail@plt+0x85e8>
   1a438:	mov	r4, r0
   1a43c:	cmn	r4, #1
   1a440:	ble	1a4a0 <__assert_fail@plt+0x8a14>
   1a444:	mov	r0, r4
   1a448:	sub	sp, fp, #28
   1a44c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a450:	ldr	r0, [r8]
   1a454:	movw	r7, #16397	; 0x400d
   1a458:	str	r5, [sp, #8]
   1a45c:	movt	r7, #2
   1a460:	cmp	r0, #0
   1a464:	beq	1a4b8 <__assert_fail@plt+0x8a2c>
   1a468:	add	r5, r8, #4
   1a46c:	mov	r4, #0
   1a470:	mov	r1, r6
   1a474:	bl	116b4 <strcmp@plt>
   1a478:	cmp	r0, #0
   1a47c:	beq	1a494 <__assert_fail@plt+0x8a08>
   1a480:	ldr	r0, [r5, r4, lsl #2]
   1a484:	add	r4, r4, #1
   1a488:	cmp	r0, #0
   1a48c:	bne	1a470 <__assert_fail@plt+0x89e4>
   1a490:	b	1a4b8 <__assert_fail@plt+0x8a2c>
   1a494:	ldr	r5, [sp, #8]
   1a498:	cmn	r4, #1
   1a49c:	bgt	1a444 <__assert_fail@plt+0x89b8>
   1a4a0:	movw	r0, #16397	; 0x400d
   1a4a4:	movw	r7, #16424	; 0x4028
   1a4a8:	str	r5, [sp, #8]
   1a4ac:	movt	r0, #2
   1a4b0:	movt	r7, #2
   1a4b4:	moveq	r7, r0
   1a4b8:	ldr	r5, [fp, #12]
   1a4bc:	mov	r0, #0
   1a4c0:	mov	r1, r7
   1a4c4:	mov	r2, #5
   1a4c8:	bl	11720 <dcgettext@plt>
   1a4cc:	mov	r4, r0
   1a4d0:	mov	r0, #0
   1a4d4:	mov	r1, #8
   1a4d8:	mov	r2, r6
   1a4dc:	bl	1ee64 <__assert_fail@plt+0xd3d8>
   1a4e0:	mov	r6, r0
   1a4e4:	mov	r0, #1
   1a4e8:	mov	r1, sl
   1a4ec:	bl	1f424 <__assert_fail@plt+0xd998>
   1a4f0:	str	r0, [sp]
   1a4f4:	mov	r0, #0
   1a4f8:	mov	r1, #0
   1a4fc:	mov	r2, r4
   1a500:	mov	r3, r6
   1a504:	bl	117d4 <error@plt>
   1a508:	ldr	r1, [sp, #8]
   1a50c:	mov	r0, r8
   1a510:	mov	r2, r9
   1a514:	bl	1a2b4 <__assert_fail@plt+0x8828>
   1a518:	blx	r5
   1a51c:	mvn	r4, #0
   1a520:	mov	r0, r4
   1a524:	sub	sp, fp, #28
   1a528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a52c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a530:	add	fp, sp, #24
   1a534:	ldr	r6, [r1]
   1a538:	cmp	r6, #0
   1a53c:	beq	1a5a0 <__assert_fail@plt+0x8b14>
   1a540:	mov	r8, r1
   1a544:	mov	r7, r2
   1a548:	mov	r1, r2
   1a54c:	mov	r2, r3
   1a550:	mov	r4, r3
   1a554:	mov	r9, r0
   1a558:	bl	118a0 <bcmp@plt>
   1a55c:	cmp	r0, #0
   1a560:	beq	1a598 <__assert_fail@plt+0x8b0c>
   1a564:	add	r7, r7, r4
   1a568:	add	r5, r8, #4
   1a56c:	ldr	r6, [r5]
   1a570:	cmp	r6, #0
   1a574:	beq	1a5a0 <__assert_fail@plt+0x8b14>
   1a578:	mov	r0, r9
   1a57c:	mov	r1, r7
   1a580:	mov	r2, r4
   1a584:	bl	118a0 <bcmp@plt>
   1a588:	add	r7, r7, r4
   1a58c:	add	r5, r5, #4
   1a590:	cmp	r0, #0
   1a594:	bne	1a56c <__assert_fail@plt+0x8ae0>
   1a598:	mov	r0, r6
   1a59c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a5a0:	mov	r6, #0
   1a5a4:	mov	r0, r6
   1a5a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a5ac:	movw	r1, #21100	; 0x526c
   1a5b0:	movt	r1, #3
   1a5b4:	str	r0, [r1, #4]
   1a5b8:	bx	lr
   1a5bc:	movw	r1, #21100	; 0x526c
   1a5c0:	movt	r1, #3
   1a5c4:	strb	r0, [r1]
   1a5c8:	bx	lr
   1a5cc:	push	{r4, r5, r6, sl, fp, lr}
   1a5d0:	add	fp, sp, #16
   1a5d4:	sub	sp, sp, #8
   1a5d8:	movw	r0, #20964	; 0x51e4
   1a5dc:	movt	r0, #3
   1a5e0:	ldr	r0, [r0]
   1a5e4:	bl	21c1c <__assert_fail@plt+0x10190>
   1a5e8:	cmp	r0, #0
   1a5ec:	beq	1a614 <__assert_fail@plt+0x8b88>
   1a5f0:	movw	r5, #21100	; 0x526c
   1a5f4:	movt	r5, #3
   1a5f8:	ldrb	r0, [r5]
   1a5fc:	cmp	r0, #0
   1a600:	beq	1a640 <__assert_fail@plt+0x8bb4>
   1a604:	bl	118e8 <__errno_location@plt>
   1a608:	ldr	r0, [r0]
   1a60c:	cmp	r0, #32
   1a610:	bne	1a640 <__assert_fail@plt+0x8bb4>
   1a614:	movw	r0, #20960	; 0x51e0
   1a618:	movt	r0, #3
   1a61c:	ldr	r0, [r0]
   1a620:	bl	21c1c <__assert_fail@plt+0x10190>
   1a624:	cmp	r0, #0
   1a628:	subeq	sp, fp, #16
   1a62c:	popeq	{r4, r5, r6, sl, fp, pc}
   1a630:	movw	r0, #20876	; 0x518c
   1a634:	movt	r0, #3
   1a638:	ldr	r0, [r0]
   1a63c:	bl	116fc <_exit@plt>
   1a640:	movw	r1, #16487	; 0x4067
   1a644:	mov	r0, #0
   1a648:	mov	r2, #5
   1a64c:	movt	r1, #2
   1a650:	bl	11720 <dcgettext@plt>
   1a654:	ldr	r6, [r5, #4]
   1a658:	mov	r4, r0
   1a65c:	bl	118e8 <__errno_location@plt>
   1a660:	ldr	r5, [r0]
   1a664:	cmp	r6, #0
   1a668:	bne	1a684 <__assert_fail@plt+0x8bf8>
   1a66c:	movw	r2, #13173	; 0x3375
   1a670:	mov	r0, #0
   1a674:	mov	r1, r5
   1a678:	mov	r3, r4
   1a67c:	movt	r2, #2
   1a680:	b	1a6a4 <__assert_fail@plt+0x8c18>
   1a684:	mov	r0, r6
   1a688:	bl	1f0ac <__assert_fail@plt+0xd620>
   1a68c:	movw	r2, #16499	; 0x4073
   1a690:	mov	r3, r0
   1a694:	str	r4, [sp]
   1a698:	mov	r0, #0
   1a69c:	mov	r1, r5
   1a6a0:	movt	r2, #2
   1a6a4:	bl	117d4 <error@plt>
   1a6a8:	movw	r0, #20876	; 0x518c
   1a6ac:	movt	r0, #3
   1a6b0:	ldr	r0, [r0]
   1a6b4:	bl	116fc <_exit@plt>
   1a6b8:	push	{fp, lr}
   1a6bc:	mov	fp, sp
   1a6c0:	bl	1a718 <__assert_fail@plt+0x8c8c>
   1a6c4:	cmp	r0, #0
   1a6c8:	popne	{fp, pc}
   1a6cc:	bl	209dc <__assert_fail@plt+0xef50>
   1a6d0:	push	{r4, r5, r6, sl, fp, lr}
   1a6d4:	add	fp, sp, #16
   1a6d8:	mov	r5, r0
   1a6dc:	mov	r4, r0
   1a6e0:	ldrb	r6, [r5], #-1
   1a6e4:	bl	217c4 <__assert_fail@plt+0xfd38>
   1a6e8:	sub	r2, r0, r4
   1a6ec:	sub	r0, r6, #47	; 0x2f
   1a6f0:	clz	r0, r0
   1a6f4:	lsr	r1, r0, #5
   1a6f8:	mov	r0, r2
   1a6fc:	cmp	r2, r1
   1a700:	bls	1a714 <__assert_fail@plt+0x8c88>
   1a704:	ldrb	r3, [r5, r0]
   1a708:	sub	r2, r0, #1
   1a70c:	cmp	r3, #47	; 0x2f
   1a710:	beq	1a6f8 <__assert_fail@plt+0x8c6c>
   1a714:	pop	{r4, r5, r6, sl, fp, pc}
   1a718:	push	{r4, r5, r6, sl, fp, lr}
   1a71c:	add	fp, sp, #16
   1a720:	mov	r6, r0
   1a724:	mov	r4, r0
   1a728:	ldrb	r5, [r6], #-1
   1a72c:	bl	217c4 <__assert_fail@plt+0xfd38>
   1a730:	sub	r1, r0, r4
   1a734:	sub	r0, r5, #47	; 0x2f
   1a738:	clz	r0, r0
   1a73c:	lsr	r0, r0, #5
   1a740:	mov	r5, r1
   1a744:	cmp	r1, r0
   1a748:	bls	1a75c <__assert_fail@plt+0x8cd0>
   1a74c:	ldrb	r2, [r6, r5]
   1a750:	sub	r1, r5, #1
   1a754:	cmp	r2, #47	; 0x2f
   1a758:	beq	1a740 <__assert_fail@plt+0x8cb4>
   1a75c:	cmp	r5, #0
   1a760:	mov	r0, r5
   1a764:	addeq	r0, r0, #1
   1a768:	add	r0, r0, #1
   1a76c:	bl	20ae4 <__assert_fail@plt+0xf058>
   1a770:	mov	r6, r0
   1a774:	cmp	r0, #0
   1a778:	beq	1a7a4 <__assert_fail@plt+0x8d18>
   1a77c:	mov	r0, r6
   1a780:	mov	r1, r4
   1a784:	mov	r2, r5
   1a788:	bl	11708 <memcpy@plt>
   1a78c:	cmp	r5, #0
   1a790:	moveq	r0, #46	; 0x2e
   1a794:	moveq	r5, #1
   1a798:	strbeq	r0, [r6]
   1a79c:	mov	r0, #0
   1a7a0:	strb	r0, [r6, r5]
   1a7a4:	mov	r0, r6
   1a7a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a7ac:	ldr	r1, [r0, #16]
   1a7b0:	and	r1, r1, #61440	; 0xf000
   1a7b4:	sub	r1, r1, #4096	; 0x1000
   1a7b8:	lsr	r2, r1, #12
   1a7bc:	cmp	r2, #11
   1a7c0:	bhi	1a82c <__assert_fail@plt+0x8da0>
   1a7c4:	movw	r1, #16372	; 0x3ff4
   1a7c8:	add	r3, pc, #4
   1a7cc:	movt	r1, #2
   1a7d0:	ldr	pc, [r3, r2, lsl #2]
   1a7d4:	andeq	sl, r1, r4, lsl #16
   1a7d8:	andeq	sl, r1, r8, lsl r8
   1a7dc:	andeq	sl, r1, ip, lsr #16
   1a7e0:	andeq	sl, r1, ip, lsl #16
   1a7e4:	andeq	sl, r1, ip, lsr #16
   1a7e8:	andeq	sl, r1, r0, asr #16
   1a7ec:	andeq	sl, r1, ip, lsr #16
   1a7f0:	andeq	sl, r1, ip, ror r8
   1a7f4:	andeq	sl, r1, ip, lsr #16
   1a7f8:	andeq	sl, r1, r4, asr r8
   1a7fc:	andeq	sl, r1, ip, lsr #16
   1a800:	andeq	sl, r1, r8, ror #16
   1a804:	movw	r1, #16594	; 0x40d2
   1a808:	movt	r1, #2
   1a80c:	mov	r0, #0
   1a810:	mov	r2, #5
   1a814:	b	11720 <dcgettext@plt>
   1a818:	movw	r1, #16571	; 0x40bb
   1a81c:	movt	r1, #2
   1a820:	mov	r0, #0
   1a824:	mov	r2, #5
   1a828:	b	11720 <dcgettext@plt>
   1a82c:	movw	r1, #16606	; 0x40de
   1a830:	movt	r1, #2
   1a834:	mov	r0, #0
   1a838:	mov	r2, #5
   1a83c:	b	11720 <dcgettext@plt>
   1a840:	movw	r1, #16552	; 0x40a8
   1a844:	movt	r1, #2
   1a848:	mov	r0, #0
   1a84c:	mov	r2, #5
   1a850:	b	11720 <dcgettext@plt>
   1a854:	movw	r1, #16538	; 0x409a
   1a858:	movt	r1, #2
   1a85c:	mov	r0, #0
   1a860:	mov	r2, #5
   1a864:	b	11720 <dcgettext@plt>
   1a868:	movw	r1, #16599	; 0x40d7
   1a86c:	movt	r1, #2
   1a870:	mov	r0, #0
   1a874:	mov	r2, #5
   1a878:	b	11720 <dcgettext@plt>
   1a87c:	ldrd	r0, [r0, #48]	; 0x30
   1a880:	orrs	r0, r0, r1
   1a884:	movw	r0, #16506	; 0x407a
   1a888:	movw	r1, #16525	; 0x408d
   1a88c:	movt	r0, #2
   1a890:	movt	r1, #2
   1a894:	moveq	r1, r0
   1a898:	mov	r0, #0
   1a89c:	mov	r2, #5
   1a8a0:	b	11720 <dcgettext@plt>
   1a8a4:	push	{fp, lr}
   1a8a8:	mov	fp, sp
   1a8ac:	and	r2, r0, #61440	; 0xf000
   1a8b0:	sub	r2, r2, #4096	; 0x1000
   1a8b4:	lsr	r3, r2, #12
   1a8b8:	cmp	r3, #11
   1a8bc:	bhi	1a90c <__assert_fail@plt+0x8e80>
   1a8c0:	add	r2, pc, #4
   1a8c4:	mov	ip, #45	; 0x2d
   1a8c8:	ldr	pc, [r2, r3, lsl #2]
   1a8cc:	strdeq	sl, [r1], -ip
   1a8d0:	andeq	sl, r1, r4, lsl #18
   1a8d4:	andeq	sl, r1, ip, lsl #18
   1a8d8:	andeq	sl, r1, r4, lsl r9
   1a8dc:	andeq	sl, r1, ip, lsl #18
   1a8e0:	andeq	sl, r1, ip, lsr #18
   1a8e4:	andeq	sl, r1, ip, lsl #18
   1a8e8:	andeq	sl, r1, r0, lsr r9
   1a8ec:	andeq	sl, r1, ip, lsl #18
   1a8f0:	andeq	sl, r1, ip, lsl r9
   1a8f4:	andeq	sl, r1, ip, lsl #18
   1a8f8:	andeq	sl, r1, r4, lsr #18
   1a8fc:	mov	ip, #112	; 0x70
   1a900:	b	1a930 <__assert_fail@plt+0x8ea4>
   1a904:	mov	ip, #99	; 0x63
   1a908:	b	1a930 <__assert_fail@plt+0x8ea4>
   1a90c:	mov	ip, #63	; 0x3f
   1a910:	b	1a930 <__assert_fail@plt+0x8ea4>
   1a914:	mov	ip, #100	; 0x64
   1a918:	b	1a930 <__assert_fail@plt+0x8ea4>
   1a91c:	mov	ip, #108	; 0x6c
   1a920:	b	1a930 <__assert_fail@plt+0x8ea4>
   1a924:	mov	ip, #115	; 0x73
   1a928:	b	1a930 <__assert_fail@plt+0x8ea4>
   1a92c:	mov	ip, #98	; 0x62
   1a930:	tst	r0, #2
   1a934:	mov	r3, #119	; 0x77
   1a938:	mov	r2, #32
   1a93c:	mov	lr, #45	; 0x2d
   1a940:	movweq	r3, #45	; 0x2d
   1a944:	tst	r0, #4
   1a948:	strh	r2, [r1, #10]
   1a94c:	mov	r2, #114	; 0x72
   1a950:	strb	ip, [r1]
   1a954:	mov	ip, #119	; 0x77
   1a958:	movweq	r2, #45	; 0x2d
   1a95c:	tst	r0, #16
   1a960:	strb	r3, [r1, #8]
   1a964:	mov	r3, #114	; 0x72
   1a968:	strb	r2, [r1, #7]
   1a96c:	mov	r2, #119	; 0x77
   1a970:	movweq	r2, #45	; 0x2d
   1a974:	tst	r0, #32
   1a978:	strb	r2, [r1, #5]
   1a97c:	mov	r2, #114	; 0x72
   1a980:	movweq	r2, #45	; 0x2d
   1a984:	tst	r0, #128	; 0x80
   1a988:	movweq	ip, #45	; 0x2d
   1a98c:	tst	r0, #256	; 0x100
   1a990:	strb	r2, [r1, #4]
   1a994:	movweq	r3, #45	; 0x2d
   1a998:	ands	r2, r0, #1
   1a99c:	strb	ip, [r1, #2]
   1a9a0:	mov	r2, #84	; 0x54
   1a9a4:	mov	ip, #45	; 0x2d
   1a9a8:	strb	r3, [r1, #1]
   1a9ac:	mov	r3, #45	; 0x2d
   1a9b0:	movwne	r3, #120	; 0x78
   1a9b4:	movwne	r2, #116	; 0x74
   1a9b8:	tst	r0, #512	; 0x200
   1a9bc:	moveq	r2, r3
   1a9c0:	mov	r3, #83	; 0x53
   1a9c4:	strb	r2, [r1, #9]
   1a9c8:	ands	r2, r0, #8
   1a9cc:	mov	r2, #83	; 0x53
   1a9d0:	movwne	lr, #120	; 0x78
   1a9d4:	movwne	r2, #115	; 0x73
   1a9d8:	tst	r0, #1024	; 0x400
   1a9dc:	moveq	r2, lr
   1a9e0:	strb	r2, [r1, #6]
   1a9e4:	ands	r2, r0, #64	; 0x40
   1a9e8:	movwne	ip, #120	; 0x78
   1a9ec:	movwne	r3, #115	; 0x73
   1a9f0:	tst	r0, #2048	; 0x800
   1a9f4:	moveq	r3, ip
   1a9f8:	strb	r3, [r1, #3]
   1a9fc:	pop	{fp, pc}
   1aa00:	ldr	r0, [r0, #16]
   1aa04:	b	1a8a4 <__assert_fail@plt+0x8e18>
   1aa08:	push	{r4, r5, r6, sl, fp, lr}
   1aa0c:	add	fp, sp, #16
   1aa10:	mov	r4, r0
   1aa14:	bl	118e8 <__errno_location@plt>
   1aa18:	ldr	r6, [r0]
   1aa1c:	mov	r5, r0
   1aa20:	mov	r0, r4
   1aa24:	bl	116f0 <free@plt>
   1aa28:	str	r6, [r5]
   1aa2c:	pop	{r4, r5, r6, sl, fp, pc}
   1aa30:	push	{r4, r5, r6, sl, fp, lr}
   1aa34:	add	fp, sp, #16
   1aa38:	mov	r5, r0
   1aa3c:	mov	r0, #0
   1aa40:	mov	r4, r1
   1aa44:	add	r6, r2, #19
   1aa48:	cmp	r1, #0
   1aa4c:	strb	r0, [r2, #20]
   1aa50:	bmi	1aaa0 <__assert_fail@plt+0x9014>
   1aa54:	mov	r0, r5
   1aa58:	mov	r1, r4
   1aa5c:	mov	r2, #10
   1aa60:	mov	r3, #0
   1aa64:	bl	22400 <__assert_fail@plt+0x10974>
   1aa68:	add	r2, r0, r0, lsl #2
   1aa6c:	sub	r2, r5, r2, lsl #1
   1aa70:	add	r2, r2, #48	; 0x30
   1aa74:	strb	r2, [r6], #-1
   1aa78:	adds	r2, r5, #9
   1aa7c:	mov	r5, r0
   1aa80:	adc	r3, r4, #0
   1aa84:	rsbs	r2, r2, #18
   1aa88:	mov	r4, r1
   1aa8c:	rscs	r2, r3, #0
   1aa90:	bcc	1aa54 <__assert_fail@plt+0x8fc8>
   1aa94:	add	r6, r6, #1
   1aa98:	mov	r0, r6
   1aa9c:	pop	{r4, r5, r6, sl, fp, pc}
   1aaa0:	mov	r0, r5
   1aaa4:	mov	r1, r4
   1aaa8:	mov	r2, #10
   1aaac:	mov	r3, #0
   1aab0:	bl	22400 <__assert_fail@plt+0x10974>
   1aab4:	add	r2, r0, r0, lsl #2
   1aab8:	rsb	r2, r5, r2, lsl #1
   1aabc:	add	r2, r2, #48	; 0x30
   1aac0:	strb	r2, [r6], #-1
   1aac4:	adds	r2, r5, #9
   1aac8:	mov	r5, r0
   1aacc:	adc	r3, r4, #0
   1aad0:	rsbs	r2, r2, #18
   1aad4:	mov	r4, r1
   1aad8:	rscs	r2, r3, #0
   1aadc:	bcc	1aaa0 <__assert_fail@plt+0x9014>
   1aae0:	mov	r0, #45	; 0x2d
   1aae4:	strb	r0, [r6]
   1aae8:	mov	r0, r6
   1aaec:	pop	{r4, r5, r6, sl, fp, pc}
   1aaf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aaf4:	add	fp, sp, #28
   1aaf8:	sub	sp, sp, #36	; 0x24
   1aafc:	movw	r0, #16617	; 0x40e9
   1ab00:	movw	r1, #16688	; 0x4130
   1ab04:	movt	r0, #2
   1ab08:	movt	r1, #2
   1ab0c:	bl	11a08 <fopen64@plt>
   1ab10:	cmp	r0, #0
   1ab14:	beq	1b2f8 <__assert_fail@plt+0x986c>
   1ab18:	mov	r3, r0
   1ab1c:	mov	r0, #0
   1ab20:	add	r1, sp, #24
   1ab24:	mov	r2, #10
   1ab28:	str	r0, [sp, #28]
   1ab2c:	str	r0, [sp, #24]
   1ab30:	add	r0, sp, #28
   1ab34:	mov	r9, r3
   1ab38:	bl	1169c <__getdelim@plt>
   1ab3c:	cmn	r0, #1
   1ab40:	beq	1b6cc <__assert_fail@plt+0x9c40>
   1ab44:	movw	r8, #16638	; 0x40fe
   1ab48:	add	r0, sp, #32
   1ab4c:	add	sl, sp, #12
   1ab50:	add	r6, sp, #20
   1ab54:	add	r7, sp, #16
   1ab58:	add	r5, sp, #28
   1ab5c:	add	r4, sp, #24
   1ab60:	str	r9, [sp, #4]
   1ab64:	movt	r8, #2
   1ab68:	str	r0, [sp, #8]
   1ab6c:	b	1aba0 <__assert_fail@plt+0x9114>
   1ab70:	add	r6, sp, #20
   1ab74:	add	r7, sp, #16
   1ab78:	add	r5, sp, #28
   1ab7c:	add	r4, sp, #24
   1ab80:	mov	r3, r9
   1ab84:	mov	r0, r5
   1ab88:	mov	r1, r4
   1ab8c:	mov	r2, #10
   1ab90:	mov	r9, r3
   1ab94:	bl	1169c <__getdelim@plt>
   1ab98:	cmn	r0, #1
   1ab9c:	beq	1b6d4 <__assert_fail@plt+0x9c48>
   1aba0:	ldr	r0, [sp, #28]
   1aba4:	mov	r1, r8
   1aba8:	mov	r2, r6
   1abac:	mov	r3, r7
   1abb0:	str	sl, [sp]
   1abb4:	bl	119cc <sscanf@plt>
   1abb8:	orr	r0, r0, #1
   1abbc:	cmp	r0, #3
   1abc0:	bne	1ab80 <__assert_fail@plt+0x90f4>
   1abc4:	ldr	r0, [sp, #12]
   1abc8:	ldr	r1, [sp, #28]
   1abcc:	add	r0, r1, r0
   1abd0:	mov	r1, #32
   1abd4:	mov	r5, r0
   1abd8:	bl	118b8 <strchr@plt>
   1abdc:	cmp	r0, #0
   1abe0:	beq	1ab70 <__assert_fail@plt+0x90e4>
   1abe4:	mov	r6, r0
   1abe8:	mov	r4, #0
   1abec:	mov	r1, #32
   1abf0:	strb	r4, [r6], #1
   1abf4:	mov	r0, r6
   1abf8:	bl	118b8 <strchr@plt>
   1abfc:	cmp	r0, #0
   1ac00:	beq	1ab70 <__assert_fail@plt+0x90e4>
   1ac04:	movw	r1, #16655	; 0x410f
   1ac08:	strb	r4, [r0], #1
   1ac0c:	movt	r1, #2
   1ac10:	bl	20b68 <__assert_fail@plt+0xf0dc>
   1ac14:	cmp	r0, #0
   1ac18:	beq	1ab70 <__assert_fail@plt+0x90e4>
   1ac1c:	add	sl, r0, #3
   1ac20:	mov	r1, #32
   1ac24:	mov	r0, sl
   1ac28:	bl	118b8 <strchr@plt>
   1ac2c:	cmp	r0, #0
   1ac30:	beq	1b13c <__assert_fail@plt+0x96b0>
   1ac34:	mov	r9, r0
   1ac38:	mov	r4, #0
   1ac3c:	mov	r1, #32
   1ac40:	strb	r4, [r9], #1
   1ac44:	mov	r0, r9
   1ac48:	bl	118b8 <strchr@plt>
   1ac4c:	cmp	r0, #0
   1ac50:	beq	1b13c <__assert_fail@plt+0x96b0>
   1ac54:	strb	r4, [r0]
   1ac58:	mov	r0, r9
   1ac5c:	bl	118ac <strlen@plt>
   1ac60:	adds	r0, r0, #1
   1ac64:	mov	r8, r5
   1ac68:	bcs	1ad08 <__assert_fail@plt+0x927c>
   1ac6c:	mov	r2, #0
   1ac70:	mov	r1, r9
   1ac74:	ldrb	r3, [r9, r2]
   1ac78:	add	r7, r2, #4
   1ac7c:	cmp	r7, r0
   1ac80:	bcc	1aca4 <__assert_fail@plt+0x9218>
   1ac84:	add	r2, r2, #1
   1ac88:	strb	r3, [r1], #1
   1ac8c:	cmp	r2, r0
   1ac90:	bcs	1ad08 <__assert_fail@plt+0x927c>
   1ac94:	ldrb	r3, [r9, r2]
   1ac98:	add	r7, r2, #4
   1ac9c:	cmp	r7, r0
   1aca0:	bcs	1ac84 <__assert_fail@plt+0x91f8>
   1aca4:	cmp	r3, #92	; 0x5c
   1aca8:	bne	1ac84 <__assert_fail@plt+0x91f8>
   1acac:	add	r7, r2, r9
   1acb0:	ldrb	r5, [r7, #1]
   1acb4:	and	r4, r5, #252	; 0xfc
   1acb8:	cmp	r4, #48	; 0x30
   1acbc:	bne	1ac84 <__assert_fail@plt+0x91f8>
   1acc0:	ldrb	r4, [r7, #2]
   1acc4:	and	r7, r4, #248	; 0xf8
   1acc8:	cmp	r7, #48	; 0x30
   1accc:	bne	1ac84 <__assert_fail@plt+0x91f8>
   1acd0:	add	ip, r2, #3
   1acd4:	ldrb	lr, [r9, ip]
   1acd8:	and	r7, lr, #248	; 0xf8
   1acdc:	cmp	r7, #48	; 0x30
   1ace0:	bne	1ac84 <__assert_fail@plt+0x91f8>
   1ace4:	lsl	r2, r5, #6
   1ace8:	add	r2, r2, r4, lsl #3
   1acec:	add	r2, r2, lr
   1acf0:	add	r3, r2, #80	; 0x50
   1acf4:	mov	r2, ip
   1acf8:	add	r2, r2, #1
   1acfc:	strb	r3, [r1], #1
   1ad00:	cmp	r2, r0
   1ad04:	bcc	1ac94 <__assert_fail@plt+0x9208>
   1ad08:	mov	r0, r6
   1ad0c:	bl	118ac <strlen@plt>
   1ad10:	adds	r0, r0, #1
   1ad14:	bcs	1adb4 <__assert_fail@plt+0x9328>
   1ad18:	mov	r2, #0
   1ad1c:	mov	r1, r6
   1ad20:	ldrb	r3, [r6, r2]
   1ad24:	add	r7, r2, #4
   1ad28:	cmp	r7, r0
   1ad2c:	bcc	1ad50 <__assert_fail@plt+0x92c4>
   1ad30:	add	r2, r2, #1
   1ad34:	strb	r3, [r1], #1
   1ad38:	cmp	r2, r0
   1ad3c:	bcs	1adb4 <__assert_fail@plt+0x9328>
   1ad40:	ldrb	r3, [r6, r2]
   1ad44:	add	r7, r2, #4
   1ad48:	cmp	r7, r0
   1ad4c:	bcs	1ad30 <__assert_fail@plt+0x92a4>
   1ad50:	cmp	r3, #92	; 0x5c
   1ad54:	bne	1ad30 <__assert_fail@plt+0x92a4>
   1ad58:	add	r7, r2, r6
   1ad5c:	ldrb	r5, [r7, #1]
   1ad60:	and	r4, r5, #252	; 0xfc
   1ad64:	cmp	r4, #48	; 0x30
   1ad68:	bne	1ad30 <__assert_fail@plt+0x92a4>
   1ad6c:	ldrb	r4, [r7, #2]
   1ad70:	and	r7, r4, #248	; 0xf8
   1ad74:	cmp	r7, #48	; 0x30
   1ad78:	bne	1ad30 <__assert_fail@plt+0x92a4>
   1ad7c:	add	ip, r2, #3
   1ad80:	ldrb	lr, [r6, ip]
   1ad84:	and	r7, lr, #248	; 0xf8
   1ad88:	cmp	r7, #48	; 0x30
   1ad8c:	bne	1ad30 <__assert_fail@plt+0x92a4>
   1ad90:	lsl	r2, r5, #6
   1ad94:	add	r2, r2, r4, lsl #3
   1ad98:	add	r2, r2, lr
   1ad9c:	add	r3, r2, #80	; 0x50
   1ada0:	mov	r2, ip
   1ada4:	add	r2, r2, #1
   1ada8:	strb	r3, [r1], #1
   1adac:	cmp	r2, r0
   1adb0:	bcc	1ad40 <__assert_fail@plt+0x92b4>
   1adb4:	mov	r0, r8
   1adb8:	bl	118ac <strlen@plt>
   1adbc:	adds	r0, r0, #1
   1adc0:	bcs	1ae60 <__assert_fail@plt+0x93d4>
   1adc4:	mov	r2, #0
   1adc8:	mov	r1, r8
   1adcc:	ldrb	r3, [r8, r2]
   1add0:	add	r7, r2, #4
   1add4:	cmp	r7, r0
   1add8:	bcc	1adfc <__assert_fail@plt+0x9370>
   1addc:	add	r2, r2, #1
   1ade0:	strb	r3, [r1], #1
   1ade4:	cmp	r2, r0
   1ade8:	bcs	1ae60 <__assert_fail@plt+0x93d4>
   1adec:	ldrb	r3, [r8, r2]
   1adf0:	add	r7, r2, #4
   1adf4:	cmp	r7, r0
   1adf8:	bcs	1addc <__assert_fail@plt+0x9350>
   1adfc:	cmp	r3, #92	; 0x5c
   1ae00:	bne	1addc <__assert_fail@plt+0x9350>
   1ae04:	add	r7, r2, r8
   1ae08:	ldrb	r5, [r7, #1]
   1ae0c:	and	r4, r5, #252	; 0xfc
   1ae10:	cmp	r4, #48	; 0x30
   1ae14:	bne	1addc <__assert_fail@plt+0x9350>
   1ae18:	ldrb	r4, [r7, #2]
   1ae1c:	and	r7, r4, #248	; 0xf8
   1ae20:	cmp	r7, #48	; 0x30
   1ae24:	bne	1addc <__assert_fail@plt+0x9350>
   1ae28:	add	ip, r2, #3
   1ae2c:	ldrb	lr, [r8, ip]
   1ae30:	and	r7, lr, #248	; 0xf8
   1ae34:	cmp	r7, #48	; 0x30
   1ae38:	bne	1addc <__assert_fail@plt+0x9350>
   1ae3c:	lsl	r2, r5, #6
   1ae40:	add	r2, r2, r4, lsl #3
   1ae44:	add	r2, r2, lr
   1ae48:	add	r3, r2, #80	; 0x50
   1ae4c:	mov	r2, ip
   1ae50:	add	r2, r2, #1
   1ae54:	strb	r3, [r1], #1
   1ae58:	cmp	r2, r0
   1ae5c:	bcc	1adec <__assert_fail@plt+0x9360>
   1ae60:	mov	r0, sl
   1ae64:	bl	118ac <strlen@plt>
   1ae68:	adds	r0, r0, #1
   1ae6c:	bcs	1af0c <__assert_fail@plt+0x9480>
   1ae70:	mov	r2, #0
   1ae74:	mov	r1, sl
   1ae78:	ldrb	r3, [sl, r2]
   1ae7c:	add	r7, r2, #4
   1ae80:	cmp	r7, r0
   1ae84:	bcc	1aea8 <__assert_fail@plt+0x941c>
   1ae88:	add	r2, r2, #1
   1ae8c:	strb	r3, [r1], #1
   1ae90:	cmp	r2, r0
   1ae94:	bcs	1af0c <__assert_fail@plt+0x9480>
   1ae98:	ldrb	r3, [sl, r2]
   1ae9c:	add	r7, r2, #4
   1aea0:	cmp	r7, r0
   1aea4:	bcs	1ae88 <__assert_fail@plt+0x93fc>
   1aea8:	cmp	r3, #92	; 0x5c
   1aeac:	bne	1ae88 <__assert_fail@plt+0x93fc>
   1aeb0:	add	r7, r2, sl
   1aeb4:	ldrb	r5, [r7, #1]
   1aeb8:	and	r4, r5, #252	; 0xfc
   1aebc:	cmp	r4, #48	; 0x30
   1aec0:	bne	1ae88 <__assert_fail@plt+0x93fc>
   1aec4:	ldrb	r4, [r7, #2]
   1aec8:	and	r7, r4, #248	; 0xf8
   1aecc:	cmp	r7, #48	; 0x30
   1aed0:	bne	1ae88 <__assert_fail@plt+0x93fc>
   1aed4:	add	ip, r2, #3
   1aed8:	ldrb	lr, [sl, ip]
   1aedc:	and	r7, lr, #248	; 0xf8
   1aee0:	cmp	r7, #48	; 0x30
   1aee4:	bne	1ae88 <__assert_fail@plt+0x93fc>
   1aee8:	lsl	r2, r5, #6
   1aeec:	add	r2, r2, r4, lsl #3
   1aef0:	add	r2, r2, lr
   1aef4:	add	r3, r2, #80	; 0x50
   1aef8:	mov	r2, ip
   1aefc:	add	r2, r2, #1
   1af00:	strb	r3, [r1], #1
   1af04:	cmp	r2, r0
   1af08:	bcc	1ae98 <__assert_fail@plt+0x940c>
   1af0c:	mov	r0, #32
   1af10:	bl	204a0 <__assert_fail@plt+0xea14>
   1af14:	mov	r7, r0
   1af18:	mov	r0, r9
   1af1c:	bl	209a4 <__assert_fail@plt+0xef18>
   1af20:	str	r0, [r7]
   1af24:	mov	r0, r6
   1af28:	bl	209a4 <__assert_fail@plt+0xef18>
   1af2c:	str	r0, [r7, #4]
   1af30:	mov	r0, r8
   1af34:	bl	209a4 <__assert_fail@plt+0xef18>
   1af38:	str	r0, [r7, #8]
   1af3c:	mov	r0, sl
   1af40:	bl	209a4 <__assert_fail@plt+0xef18>
   1af44:	str	r0, [r7, #12]
   1af48:	mov	r6, r0
   1af4c:	ldr	r2, [sp, #20]
   1af50:	ldrb	r0, [r7, #24]
   1af54:	mov	r3, r2
   1af58:	orr	r4, r0, #4
   1af5c:	ldr	r0, [sp, #16]
   1af60:	bfc	r3, #0, #12
   1af64:	strb	r4, [r7, #24]
   1af68:	bic	r1, r0, #255	; 0xff
   1af6c:	uxtb	r0, r0
   1af70:	orr	r3, r3, r1, lsr #20
   1af74:	bfi	r0, r2, #8, #12
   1af78:	str	r3, [r7, #20]
   1af7c:	orr	r0, r0, r1, lsl #12
   1af80:	movw	r1, #14985	; 0x3a89
   1af84:	movt	r1, #2
   1af88:	str	r0, [r7, #16]
   1af8c:	mov	r0, r6
   1af90:	bl	116b4 <strcmp@plt>
   1af94:	cmp	r0, #0
   1af98:	mov	r8, #1
   1af9c:	mov	r0, #1
   1afa0:	beq	1b10c <__assert_fail@plt+0x9680>
   1afa4:	movw	r1, #15516	; 0x3c9c
   1afa8:	mov	r0, r6
   1afac:	movt	r1, #2
   1afb0:	bl	116b4 <strcmp@plt>
   1afb4:	cmp	r0, #0
   1afb8:	mov	r0, #1
   1afbc:	beq	1b10c <__assert_fail@plt+0x9680>
   1afc0:	movw	r1, #16659	; 0x4113
   1afc4:	mov	r0, r6
   1afc8:	movt	r1, #2
   1afcc:	bl	116b4 <strcmp@plt>
   1afd0:	cmp	r0, #0
   1afd4:	mov	r0, #1
   1afd8:	beq	1b10c <__assert_fail@plt+0x9680>
   1afdc:	movw	r1, #15129	; 0x3b19
   1afe0:	mov	r0, r6
   1afe4:	movt	r1, #2
   1afe8:	bl	116b4 <strcmp@plt>
   1afec:	cmp	r0, #0
   1aff0:	mov	r0, #1
   1aff4:	beq	1b10c <__assert_fail@plt+0x9680>
   1aff8:	movw	r1, #15144	; 0x3b28
   1affc:	mov	r0, r6
   1b000:	movt	r1, #2
   1b004:	bl	116b4 <strcmp@plt>
   1b008:	cmp	r0, #0
   1b00c:	mov	r0, #1
   1b010:	beq	1b10c <__assert_fail@plt+0x9680>
   1b014:	movw	r1, #15236	; 0x3b84
   1b018:	mov	r0, r6
   1b01c:	movt	r1, #2
   1b020:	bl	116b4 <strcmp@plt>
   1b024:	cmp	r0, #0
   1b028:	mov	r0, #1
   1b02c:	beq	1b10c <__assert_fail@plt+0x9680>
   1b030:	movw	r1, #16665	; 0x4119
   1b034:	mov	r0, r6
   1b038:	movt	r1, #2
   1b03c:	bl	116b4 <strcmp@plt>
   1b040:	cmp	r0, #0
   1b044:	mov	r0, #1
   1b048:	beq	1b10c <__assert_fail@plt+0x9680>
   1b04c:	movw	r1, #15426	; 0x3c42
   1b050:	mov	r0, r6
   1b054:	movt	r1, #2
   1b058:	bl	116b4 <strcmp@plt>
   1b05c:	cmp	r0, #0
   1b060:	mov	r0, #1
   1b064:	beq	1b10c <__assert_fail@plt+0x9680>
   1b068:	movw	r1, #15559	; 0x3cc7
   1b06c:	mov	r0, r6
   1b070:	movt	r1, #2
   1b074:	bl	116b4 <strcmp@plt>
   1b078:	cmp	r0, #0
   1b07c:	mov	r0, #1
   1b080:	beq	1b10c <__assert_fail@plt+0x9680>
   1b084:	movw	r1, #15646	; 0x3d1e
   1b088:	mov	r0, r6
   1b08c:	movt	r1, #2
   1b090:	bl	116b4 <strcmp@plt>
   1b094:	cmp	r0, #0
   1b098:	mov	r0, #1
   1b09c:	beq	1b10c <__assert_fail@plt+0x9680>
   1b0a0:	movw	r1, #15691	; 0x3d4b
   1b0a4:	mov	r0, r6
   1b0a8:	movt	r1, #2
   1b0ac:	bl	116b4 <strcmp@plt>
   1b0b0:	cmp	r0, #0
   1b0b4:	mov	r0, #1
   1b0b8:	beq	1b10c <__assert_fail@plt+0x9680>
   1b0bc:	movw	r1, #16677	; 0x4125
   1b0c0:	mov	r0, r6
   1b0c4:	movt	r1, #2
   1b0c8:	bl	116b4 <strcmp@plt>
   1b0cc:	cmp	r0, #0
   1b0d0:	mov	r0, #1
   1b0d4:	beq	1b10c <__assert_fail@plt+0x9680>
   1b0d8:	movw	r1, #16684	; 0x412c
   1b0dc:	mov	r0, r6
   1b0e0:	movt	r1, #2
   1b0e4:	bl	116b4 <strcmp@plt>
   1b0e8:	cmp	r0, #0
   1b0ec:	mov	r0, #1
   1b0f0:	beq	1b10c <__assert_fail@plt+0x9680>
   1b0f4:	movw	r1, #16691	; 0x4133
   1b0f8:	mov	r0, r6
   1b0fc:	movt	r1, #2
   1b100:	bl	116b4 <strcmp@plt>
   1b104:	clz	r0, r0
   1b108:	lsr	r0, r0, #5
   1b10c:	bic	r1, r4, #1
   1b110:	orr	r5, r1, r0
   1b114:	mov	r1, #58	; 0x3a
   1b118:	strb	r5, [r7, #24]
   1b11c:	ldr	r4, [r7]
   1b120:	mov	r0, r4
   1b124:	bl	118b8 <strchr@plt>
   1b128:	ldr	r3, [sp, #4]
   1b12c:	cmp	r0, #0
   1b130:	beq	1b154 <__assert_fail@plt+0x96c8>
   1b134:	add	r6, sp, #20
   1b138:	b	1b2c0 <__assert_fail@plt+0x9834>
   1b13c:	ldr	r3, [sp, #4]
   1b140:	movw	r8, #16638	; 0x40fe
   1b144:	add	sl, sp, #12
   1b148:	add	r6, sp, #20
   1b14c:	movt	r8, #2
   1b150:	b	1b2e8 <__assert_fail@plt+0x985c>
   1b154:	ldrb	r0, [r4]
   1b158:	mov	r9, r3
   1b15c:	cmp	r0, #47	; 0x2f
   1b160:	bne	1b1b8 <__assert_fail@plt+0x972c>
   1b164:	ldrb	r0, [r4, #1]
   1b168:	cmp	r0, #47	; 0x2f
   1b16c:	bne	1b1b8 <__assert_fail@plt+0x972c>
   1b170:	movw	r1, #16696	; 0x4138
   1b174:	mov	r0, r6
   1b178:	movt	r1, #2
   1b17c:	bl	116b4 <strcmp@plt>
   1b180:	cmp	r0, #0
   1b184:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b188:	movw	r1, #16702	; 0x413e
   1b18c:	mov	r0, r6
   1b190:	movt	r1, #2
   1b194:	bl	116b4 <strcmp@plt>
   1b198:	cmp	r0, #0
   1b19c:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b1a0:	movw	r1, #15081	; 0x3ae9
   1b1a4:	mov	r0, r6
   1b1a8:	movt	r1, #2
   1b1ac:	bl	116b4 <strcmp@plt>
   1b1b0:	cmp	r0, #0
   1b1b4:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b1b8:	movw	r1, #14951	; 0x3a67
   1b1bc:	mov	r0, r6
   1b1c0:	movt	r1, #2
   1b1c4:	bl	116b4 <strcmp@plt>
   1b1c8:	cmp	r0, #0
   1b1cc:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b1d0:	movw	r1, #15345	; 0x3bf1
   1b1d4:	mov	r0, r6
   1b1d8:	movt	r1, #2
   1b1dc:	bl	116b4 <strcmp@plt>
   1b1e0:	cmp	r0, #0
   1b1e4:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b1e8:	movw	r1, #15086	; 0x3aee
   1b1ec:	mov	r0, r6
   1b1f0:	movt	r1, #2
   1b1f4:	bl	116b4 <strcmp@plt>
   1b1f8:	cmp	r0, #0
   1b1fc:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b200:	movw	r1, #16707	; 0x4143
   1b204:	mov	r0, r6
   1b208:	movt	r1, #2
   1b20c:	bl	116b4 <strcmp@plt>
   1b210:	cmp	r0, #0
   1b214:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b218:	movw	r1, #15222	; 0x3b76
   1b21c:	mov	r0, r6
   1b220:	movt	r1, #2
   1b224:	bl	116b4 <strcmp@plt>
   1b228:	cmp	r0, #0
   1b22c:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b230:	movw	r1, #15261	; 0x3b9d
   1b234:	mov	r0, r6
   1b238:	movt	r1, #2
   1b23c:	bl	116b4 <strcmp@plt>
   1b240:	cmp	r0, #0
   1b244:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b248:	movw	r1, #15306	; 0x3bca
   1b24c:	mov	r0, r6
   1b250:	movt	r1, #2
   1b254:	bl	116b4 <strcmp@plt>
   1b258:	cmp	r0, #0
   1b25c:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b260:	movw	r1, #15476	; 0x3c74
   1b264:	mov	r0, r6
   1b268:	movt	r1, #2
   1b26c:	bl	116b4 <strcmp@plt>
   1b270:	cmp	r0, #0
   1b274:	beq	1b2b8 <__assert_fail@plt+0x982c>
   1b278:	movw	r1, #15716	; 0x3d64
   1b27c:	mov	r0, r6
   1b280:	movt	r1, #2
   1b284:	bl	116b4 <strcmp@plt>
   1b288:	cmp	r0, #0
   1b28c:	add	r6, sp, #20
   1b290:	mov	r3, r9
   1b294:	beq	1b2c0 <__assert_fail@plt+0x9834>
   1b298:	movw	r0, #16718	; 0x414e
   1b29c:	mov	r1, r4
   1b2a0:	movt	r0, #2
   1b2a4:	bl	116b4 <strcmp@plt>
   1b2a8:	clz	r0, r0
   1b2ac:	mov	r3, r9
   1b2b0:	lsr	r8, r0, #5
   1b2b4:	b	1b2c0 <__assert_fail@plt+0x9834>
   1b2b8:	add	r6, sp, #20
   1b2bc:	mov	r3, r9
   1b2c0:	and	r0, r5, #253	; 0xfd
   1b2c4:	add	sl, sp, #12
   1b2c8:	orr	r0, r0, r8, lsl #1
   1b2cc:	movw	r8, #16638	; 0x40fe
   1b2d0:	movt	r8, #2
   1b2d4:	strb	r0, [r7, #24]
   1b2d8:	ldr	r0, [sp, #8]
   1b2dc:	str	r7, [r0]
   1b2e0:	add	r0, r7, #28
   1b2e4:	str	r0, [sp, #8]
   1b2e8:	add	r7, sp, #16
   1b2ec:	add	r5, sp, #28
   1b2f0:	add	r4, sp, #24
   1b2f4:	b	1ab84 <__assert_fail@plt+0x90f8>
   1b2f8:	movw	r0, #16725	; 0x4155
   1b2fc:	movw	r1, #13975	; 0x3697
   1b300:	movt	r0, #2
   1b304:	movt	r1, #2
   1b308:	bl	11a20 <setmntent@plt>
   1b30c:	cmp	r0, #0
   1b310:	beq	1b720 <__assert_fail@plt+0x9c94>
   1b314:	mov	r8, r0
   1b318:	bl	117e0 <getmntent@plt>
   1b31c:	cmp	r0, #0
   1b320:	beq	1b730 <__assert_fail@plt+0x9ca4>
   1b324:	mov	r5, r0
   1b328:	add	sl, sp, #32
   1b32c:	b	1b388 <__assert_fail@plt+0x98fc>
   1b330:	bic	r1, r4, #1
   1b334:	orr	r4, r1, r0
   1b338:	mov	r1, #58	; 0x3a
   1b33c:	strb	r4, [r9, #24]
   1b340:	ldr	r5, [r9]
   1b344:	mov	r0, r5
   1b348:	bl	118b8 <strchr@plt>
   1b34c:	cmp	r0, #0
   1b350:	beq	1b578 <__assert_fail@plt+0x9aec>
   1b354:	mvn	r0, #0
   1b358:	str	r0, [r9, #16]
   1b35c:	str	r0, [r9, #20]
   1b360:	and	r0, r4, #253	; 0xfd
   1b364:	orr	r0, r0, r6, lsl #1
   1b368:	strb	r0, [r9, #24]
   1b36c:	mov	r0, r8
   1b370:	str	r9, [sl]
   1b374:	add	sl, r9, #28
   1b378:	bl	117e0 <getmntent@plt>
   1b37c:	mov	r5, r0
   1b380:	cmp	r0, #0
   1b384:	beq	1b734 <__assert_fail@plt+0x9ca8>
   1b388:	movw	r1, #16735	; 0x415f
   1b38c:	mov	r0, r5
   1b390:	movt	r1, #2
   1b394:	bl	117b0 <hasmntopt@plt>
   1b398:	str	r0, [sp, #8]
   1b39c:	mov	r0, #32
   1b3a0:	bl	204a0 <__assert_fail@plt+0xea14>
   1b3a4:	mov	r9, r0
   1b3a8:	ldr	r0, [r5]
   1b3ac:	bl	209a4 <__assert_fail@plt+0xef18>
   1b3b0:	str	r0, [r9]
   1b3b4:	ldr	r0, [r5, #4]
   1b3b8:	bl	209a4 <__assert_fail@plt+0xef18>
   1b3bc:	str	r0, [r9, #4]
   1b3c0:	mov	r0, #0
   1b3c4:	str	r0, [r9, #8]
   1b3c8:	ldr	r0, [r5, #8]
   1b3cc:	bl	209a4 <__assert_fail@plt+0xef18>
   1b3d0:	str	r0, [r9, #12]
   1b3d4:	mov	r7, r0
   1b3d8:	movw	r1, #14985	; 0x3a89
   1b3dc:	ldrb	r0, [r9, #24]
   1b3e0:	movt	r1, #2
   1b3e4:	orr	r4, r0, #4
   1b3e8:	mov	r0, r7
   1b3ec:	strb	r4, [r9, #24]
   1b3f0:	bl	116b4 <strcmp@plt>
   1b3f4:	cmp	r0, #0
   1b3f8:	mov	r6, #1
   1b3fc:	mov	r0, #1
   1b400:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b404:	movw	r1, #15516	; 0x3c9c
   1b408:	mov	r0, r7
   1b40c:	movt	r1, #2
   1b410:	bl	116b4 <strcmp@plt>
   1b414:	cmp	r0, #0
   1b418:	mov	r0, #1
   1b41c:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b420:	movw	r1, #16659	; 0x4113
   1b424:	mov	r0, r7
   1b428:	movt	r1, #2
   1b42c:	bl	116b4 <strcmp@plt>
   1b430:	cmp	r0, #0
   1b434:	mov	r0, #1
   1b438:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b43c:	movw	r1, #15129	; 0x3b19
   1b440:	mov	r0, r7
   1b444:	movt	r1, #2
   1b448:	bl	116b4 <strcmp@plt>
   1b44c:	cmp	r0, #0
   1b450:	mov	r0, #1
   1b454:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b458:	movw	r1, #15144	; 0x3b28
   1b45c:	mov	r0, r7
   1b460:	movt	r1, #2
   1b464:	bl	116b4 <strcmp@plt>
   1b468:	cmp	r0, #0
   1b46c:	mov	r0, #1
   1b470:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b474:	movw	r1, #15236	; 0x3b84
   1b478:	mov	r0, r7
   1b47c:	movt	r1, #2
   1b480:	bl	116b4 <strcmp@plt>
   1b484:	cmp	r0, #0
   1b488:	mov	r0, #1
   1b48c:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b490:	movw	r1, #16665	; 0x4119
   1b494:	mov	r0, r7
   1b498:	movt	r1, #2
   1b49c:	bl	116b4 <strcmp@plt>
   1b4a0:	cmp	r0, #0
   1b4a4:	mov	r0, #1
   1b4a8:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b4ac:	movw	r1, #15426	; 0x3c42
   1b4b0:	mov	r0, r7
   1b4b4:	movt	r1, #2
   1b4b8:	bl	116b4 <strcmp@plt>
   1b4bc:	cmp	r0, #0
   1b4c0:	mov	r0, #1
   1b4c4:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b4c8:	movw	r1, #15559	; 0x3cc7
   1b4cc:	mov	r0, r7
   1b4d0:	movt	r1, #2
   1b4d4:	bl	116b4 <strcmp@plt>
   1b4d8:	cmp	r0, #0
   1b4dc:	mov	r0, #1
   1b4e0:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b4e4:	movw	r1, #15646	; 0x3d1e
   1b4e8:	mov	r0, r7
   1b4ec:	movt	r1, #2
   1b4f0:	bl	116b4 <strcmp@plt>
   1b4f4:	cmp	r0, #0
   1b4f8:	mov	r0, #1
   1b4fc:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b500:	movw	r1, #15691	; 0x3d4b
   1b504:	mov	r0, r7
   1b508:	movt	r1, #2
   1b50c:	bl	116b4 <strcmp@plt>
   1b510:	cmp	r0, #0
   1b514:	mov	r0, #1
   1b518:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b51c:	movw	r1, #16677	; 0x4125
   1b520:	mov	r0, r7
   1b524:	movt	r1, #2
   1b528:	bl	116b4 <strcmp@plt>
   1b52c:	cmp	r0, #0
   1b530:	mov	r0, #1
   1b534:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b538:	movw	r1, #16684	; 0x412c
   1b53c:	mov	r0, r7
   1b540:	movt	r1, #2
   1b544:	bl	116b4 <strcmp@plt>
   1b548:	cmp	r0, #0
   1b54c:	mov	r0, #1
   1b550:	beq	1b330 <__assert_fail@plt+0x98a4>
   1b554:	movw	r1, #16691	; 0x4133
   1b558:	mov	r0, r7
   1b55c:	movt	r1, #2
   1b560:	bl	116b4 <strcmp@plt>
   1b564:	ldr	r1, [sp, #8]
   1b568:	orr	r0, r1, r0
   1b56c:	clz	r0, r0
   1b570:	lsr	r0, r0, #5
   1b574:	b	1b330 <__assert_fail@plt+0x98a4>
   1b578:	ldrb	r0, [r5]
   1b57c:	cmp	r0, #47	; 0x2f
   1b580:	bne	1b5d8 <__assert_fail@plt+0x9b4c>
   1b584:	ldrb	r0, [r5, #1]
   1b588:	cmp	r0, #47	; 0x2f
   1b58c:	bne	1b5d8 <__assert_fail@plt+0x9b4c>
   1b590:	movw	r1, #16696	; 0x4138
   1b594:	mov	r0, r7
   1b598:	movt	r1, #2
   1b59c:	bl	116b4 <strcmp@plt>
   1b5a0:	cmp	r0, #0
   1b5a4:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b5a8:	movw	r1, #16702	; 0x413e
   1b5ac:	mov	r0, r7
   1b5b0:	movt	r1, #2
   1b5b4:	bl	116b4 <strcmp@plt>
   1b5b8:	cmp	r0, #0
   1b5bc:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b5c0:	movw	r1, #15081	; 0x3ae9
   1b5c4:	mov	r0, r7
   1b5c8:	movt	r1, #2
   1b5cc:	bl	116b4 <strcmp@plt>
   1b5d0:	cmp	r0, #0
   1b5d4:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b5d8:	movw	r1, #14951	; 0x3a67
   1b5dc:	mov	r0, r7
   1b5e0:	movt	r1, #2
   1b5e4:	bl	116b4 <strcmp@plt>
   1b5e8:	cmp	r0, #0
   1b5ec:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b5f0:	movw	r1, #15345	; 0x3bf1
   1b5f4:	mov	r0, r7
   1b5f8:	movt	r1, #2
   1b5fc:	bl	116b4 <strcmp@plt>
   1b600:	cmp	r0, #0
   1b604:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b608:	movw	r1, #15086	; 0x3aee
   1b60c:	mov	r0, r7
   1b610:	movt	r1, #2
   1b614:	bl	116b4 <strcmp@plt>
   1b618:	cmp	r0, #0
   1b61c:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b620:	movw	r1, #16707	; 0x4143
   1b624:	mov	r0, r7
   1b628:	movt	r1, #2
   1b62c:	bl	116b4 <strcmp@plt>
   1b630:	cmp	r0, #0
   1b634:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b638:	movw	r1, #15222	; 0x3b76
   1b63c:	mov	r0, r7
   1b640:	movt	r1, #2
   1b644:	bl	116b4 <strcmp@plt>
   1b648:	cmp	r0, #0
   1b64c:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b650:	movw	r1, #15261	; 0x3b9d
   1b654:	mov	r0, r7
   1b658:	movt	r1, #2
   1b65c:	bl	116b4 <strcmp@plt>
   1b660:	cmp	r0, #0
   1b664:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b668:	movw	r1, #15306	; 0x3bca
   1b66c:	mov	r0, r7
   1b670:	movt	r1, #2
   1b674:	bl	116b4 <strcmp@plt>
   1b678:	cmp	r0, #0
   1b67c:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b680:	movw	r1, #15476	; 0x3c74
   1b684:	mov	r0, r7
   1b688:	movt	r1, #2
   1b68c:	bl	116b4 <strcmp@plt>
   1b690:	cmp	r0, #0
   1b694:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b698:	movw	r1, #15716	; 0x3d64
   1b69c:	mov	r0, r7
   1b6a0:	movt	r1, #2
   1b6a4:	bl	116b4 <strcmp@plt>
   1b6a8:	cmp	r0, #0
   1b6ac:	beq	1b354 <__assert_fail@plt+0x98c8>
   1b6b0:	movw	r0, #16718	; 0x414e
   1b6b4:	mov	r1, r5
   1b6b8:	movt	r0, #2
   1b6bc:	bl	116b4 <strcmp@plt>
   1b6c0:	clz	r0, r0
   1b6c4:	lsr	r6, r0, #5
   1b6c8:	b	1b354 <__assert_fail@plt+0x98c8>
   1b6cc:	add	r0, sp, #32
   1b6d0:	str	r0, [sp, #8]
   1b6d4:	ldr	r0, [sp, #28]
   1b6d8:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b6dc:	ldrb	r1, [r9]
   1b6e0:	tst	r1, #32
   1b6e4:	bne	1b700 <__assert_fail@plt+0x9c74>
   1b6e8:	mov	r0, r9
   1b6ec:	bl	21ca0 <__assert_fail@plt+0x10214>
   1b6f0:	ldr	sl, [sp, #8]
   1b6f4:	cmn	r0, #1
   1b6f8:	bne	1b744 <__assert_fail@plt+0x9cb8>
   1b6fc:	b	1b75c <__assert_fail@plt+0x9cd0>
   1b700:	bl	118e8 <__errno_location@plt>
   1b704:	ldr	r6, [r0]
   1b708:	mov	r5, r0
   1b70c:	mov	r0, r9
   1b710:	bl	21ca0 <__assert_fail@plt+0x10214>
   1b714:	ldr	sl, [sp, #8]
   1b718:	str	r6, [r5]
   1b71c:	b	1b75c <__assert_fail@plt+0x9cd0>
   1b720:	mov	r4, #0
   1b724:	mov	r0, r4
   1b728:	sub	sp, fp, #28
   1b72c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b730:	add	sl, sp, #32
   1b734:	mov	r0, r8
   1b738:	bl	11978 <endmntent@plt>
   1b73c:	cmp	r0, #0
   1b740:	beq	1b75c <__assert_fail@plt+0x9cd0>
   1b744:	mov	r0, #0
   1b748:	str	r0, [sl]
   1b74c:	ldr	r4, [sp, #32]
   1b750:	mov	r0, r4
   1b754:	sub	sp, fp, #28
   1b758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b75c:	bl	118e8 <__errno_location@plt>
   1b760:	mov	r4, #0
   1b764:	ldr	r8, [r0]
   1b768:	mov	r5, r0
   1b76c:	str	r4, [sl]
   1b770:	ldr	r6, [sp, #32]
   1b774:	cmp	r6, #0
   1b778:	bne	1b7a4 <__assert_fail@plt+0x9d18>
   1b77c:	str	r8, [r5]
   1b780:	mov	r0, r4
   1b784:	sub	sp, fp, #28
   1b788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b78c:	mov	r0, r6
   1b790:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b794:	cmp	r7, #0
   1b798:	mov	r6, r7
   1b79c:	str	r7, [sp, #32]
   1b7a0:	beq	1b77c <__assert_fail@plt+0x9cf0>
   1b7a4:	ldr	r0, [r6]
   1b7a8:	ldr	r7, [r6, #28]
   1b7ac:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b7b0:	ldr	r0, [r6, #4]
   1b7b4:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b7b8:	ldr	r0, [r6, #8]
   1b7bc:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b7c0:	ldrb	r0, [r6, #24]
   1b7c4:	tst	r0, #4
   1b7c8:	beq	1b78c <__assert_fail@plt+0x9d00>
   1b7cc:	ldr	r0, [r6, #12]
   1b7d0:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b7d4:	b	1b78c <__assert_fail@plt+0x9d00>
   1b7d8:	push	{r4, sl, fp, lr}
   1b7dc:	add	fp, sp, #8
   1b7e0:	mov	r4, r0
   1b7e4:	ldr	r0, [r0]
   1b7e8:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b7ec:	ldr	r0, [r4, #4]
   1b7f0:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b7f4:	ldr	r0, [r4, #8]
   1b7f8:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b7fc:	ldrb	r0, [r4, #24]
   1b800:	tst	r0, #4
   1b804:	beq	1b810 <__assert_fail@plt+0x9d84>
   1b808:	ldr	r0, [r4, #12]
   1b80c:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1b810:	mov	r0, r4
   1b814:	pop	{r4, sl, fp, lr}
   1b818:	b	1aa08 <__assert_fail@plt+0x8f7c>
   1b81c:	push	{fp, lr}
   1b820:	mov	fp, sp
   1b824:	sub	sp, sp, #24
   1b828:	mvn	ip, #0
   1b82c:	str	ip, [sp, #8]
   1b830:	mov	ip, #0
   1b834:	str	ip, [sp, #4]
   1b838:	str	ip, [sp]
   1b83c:	ldr	ip, [fp, #12]
   1b840:	str	ip, [sp, #16]
   1b844:	ldr	ip, [fp, #8]
   1b848:	str	ip, [sp, #12]
   1b84c:	bl	1b858 <__assert_fail@plt+0x9dcc>
   1b850:	mov	sp, fp
   1b854:	pop	{fp, pc}
   1b858:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b85c:	add	fp, sp, #28
   1b860:	sub	sp, sp, #140	; 0x8c
   1b864:	sub	sp, sp, #1024	; 0x400
   1b868:	mov	r4, r3
   1b86c:	mov	r6, r2
   1b870:	str	r1, [sp, #104]	; 0x68
   1b874:	str	r0, [sp, #108]	; 0x6c
   1b878:	bl	118e8 <__errno_location@plt>
   1b87c:	mov	r2, r4
   1b880:	ldrb	r3, [r6]
   1b884:	str	r0, [sp, #76]	; 0x4c
   1b888:	ldr	r0, [r0]
   1b88c:	movw	r5, #12630	; 0x3156
   1b890:	ldr	r1, [r2, #8]!
   1b894:	movt	r5, #2
   1b898:	str	r0, [sp, #72]	; 0x48
   1b89c:	cmp	r1, #0
   1b8a0:	mov	r7, r1
   1b8a4:	movweq	r7, #12
   1b8a8:	cmp	r1, #12
   1b8ac:	subgt	r7, r1, #12
   1b8b0:	ldr	r1, [r2, #32]
   1b8b4:	cmp	r1, #0
   1b8b8:	movne	r5, r1
   1b8bc:	cmp	r3, #0
   1b8c0:	beq	1d418 <__assert_fail@plt+0xb98c>
   1b8c4:	sub	r0, fp, #48	; 0x30
   1b8c8:	mvn	r1, #13
   1b8cc:	str	r2, [sp, #60]	; 0x3c
   1b8d0:	str	r7, [sp, #56]	; 0x38
   1b8d4:	ldr	r7, [fp, #16]
   1b8d8:	ldr	ip, [sp, #108]	; 0x6c
   1b8dc:	sub	r9, r5, #2
   1b8e0:	mov	sl, r6
   1b8e4:	mov	lr, #0
   1b8e8:	mov	r8, #-2147483648	; 0x80000000
   1b8ec:	str	r5, [sp, #64]	; 0x40
   1b8f0:	str	r4, [sp, #88]	; 0x58
   1b8f4:	sub	r1, r1, r0
   1b8f8:	str	r9, [sp, #32]
   1b8fc:	str	r1, [sp, #44]	; 0x2c
   1b900:	add	r1, sp, #112	; 0x70
   1b904:	add	r1, r1, #1
   1b908:	str	r1, [sp, #48]	; 0x30
   1b90c:	sub	r1, fp, #53	; 0x35
   1b910:	add	r2, r1, #3
   1b914:	add	r1, r1, #2
   1b918:	str	r1, [sp, #84]	; 0x54
   1b91c:	add	r1, r4, #12
   1b920:	str	r2, [sp, #68]	; 0x44
   1b924:	str	r1, [sp, #52]	; 0x34
   1b928:	sub	r1, r0, #2
   1b92c:	str	r1, [sp, #28]
   1b930:	add	r1, r0, #8
   1b934:	str	r1, [sp, #24]
   1b938:	add	r1, r0, #13
   1b93c:	add	r0, r0, #14
   1b940:	str	r0, [sp, #80]	; 0x50
   1b944:	mvn	r0, r0
   1b948:	str	r1, [sp, #40]	; 0x28
   1b94c:	str	r0, [sp, #36]	; 0x24
   1b950:	uxtb	r1, r3
   1b954:	cmp	r1, #37	; 0x25
   1b958:	beq	1b984 <__assert_fail@plt+0x9ef8>
   1b95c:	b	1ba30 <__assert_fail@plt+0x9fa4>
   1b960:	mov	ip, #0
   1b964:	add	lr, r5, lr
   1b968:	ldrb	r3, [sl, #1]!
   1b96c:	mvn	r7, #0
   1b970:	cmp	r3, #0
   1b974:	beq	1d420 <__assert_fail@plt+0xb994>
   1b978:	uxtb	r1, r3
   1b97c:	cmp	r1, #37	; 0x25
   1b980:	bne	1ba30 <__assert_fail@plt+0x9fa4>
   1b984:	ldr	r0, [fp, #8]
   1b988:	mov	r6, #0
   1b98c:	mov	r9, #0
   1b990:	str	sl, [sp, #100]	; 0x64
   1b994:	mov	r4, r0
   1b998:	add	r1, sl, #2
   1b99c:	add	sl, sl, #1
   1b9a0:	ldrb	r0, [sl]
   1b9a4:	sub	r2, r0, #35	; 0x23
   1b9a8:	cmp	r2, #13
   1b9ac:	bhi	1b9f0 <__assert_fail@plt+0x9f64>
   1b9b0:	add	r3, pc, #0
   1b9b4:	ldr	pc, [r3, r2, lsl #2]
   1b9b8:	andeq	fp, r1, r8, lsr #20
   1b9bc:	andeq	fp, r1, ip, lsr #21
   1b9c0:	andeq	fp, r1, ip, lsr #21
   1b9c4:	andeq	fp, r1, ip, lsr #21
   1b9c8:	andeq	fp, r1, ip, lsr #21
   1b9cc:	andeq	fp, r1, ip, lsr #21
   1b9d0:	andeq	fp, r1, ip, lsr #21
   1b9d4:	andeq	fp, r1, ip, lsr #21
   1b9d8:	strdeq	fp, [r1], -r8
   1b9dc:	andeq	fp, r1, ip, lsr #21
   1b9e0:	strdeq	fp, [r1], -r8
   1b9e4:	andeq	fp, r1, ip, lsr #21
   1b9e8:	andeq	fp, r1, ip, lsr #21
   1b9ec:	strdeq	fp, [r1], -r8
   1b9f0:	cmp	r0, #95	; 0x5f
   1b9f4:	bne	1ba18 <__assert_fail@plt+0x9f8c>
   1b9f8:	add	r1, r1, #1
   1b9fc:	add	sl, sl, #1
   1ba00:	mov	r9, r0
   1ba04:	ldrb	r0, [sl]
   1ba08:	sub	r2, r0, #35	; 0x23
   1ba0c:	cmp	r2, #13
   1ba10:	bls	1b9b0 <__assert_fail@plt+0x9f24>
   1ba14:	b	1b9f0 <__assert_fail@plt+0x9f64>
   1ba18:	cmp	r0, #94	; 0x5e
   1ba1c:	bne	1baac <__assert_fail@plt+0xa020>
   1ba20:	mov	r4, #1
   1ba24:	b	1b998 <__assert_fail@plt+0x9f0c>
   1ba28:	mov	r6, #1
   1ba2c:	b	1b998 <__assert_fail@plt+0x9f0c>
   1ba30:	ldr	r0, [sp, #104]	; 0x68
   1ba34:	bic	r1, r7, r7, asr #31
   1ba38:	cmp	r1, #1
   1ba3c:	mov	r5, r1
   1ba40:	movls	r5, #1
   1ba44:	sub	r2, r0, lr
   1ba48:	cmp	r5, r2
   1ba4c:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1ba50:	cmp	ip, #0
   1ba54:	beq	1b960 <__assert_fail@plt+0x9ed4>
   1ba58:	cmp	r1, #2
   1ba5c:	bcc	1ba90 <__assert_fail@plt+0xa004>
   1ba60:	sub	r4, r1, #1
   1ba64:	mov	r0, ip
   1ba68:	mov	r1, #32
   1ba6c:	mov	r7, lr
   1ba70:	mov	r6, ip
   1ba74:	mov	r2, r4
   1ba78:	bl	11918 <memset@plt>
   1ba7c:	ldrb	r3, [sl]
   1ba80:	mov	ip, r6
   1ba84:	mov	lr, r7
   1ba88:	add	ip, r6, r4
   1ba8c:	mov	r8, #-2147483648	; 0x80000000
   1ba90:	strb	r3, [ip], #1
   1ba94:	add	lr, r5, lr
   1ba98:	ldrb	r3, [sl, #1]!
   1ba9c:	mvn	r7, #0
   1baa0:	cmp	r3, #0
   1baa4:	bne	1b978 <__assert_fail@plt+0x9eec>
   1baa8:	b	1d420 <__assert_fail@plt+0xb994>
   1baac:	sub	r2, r0, #48	; 0x30
   1bab0:	cmp	r2, #9
   1bab4:	bhi	1bb34 <__assert_fail@plt+0xa0a8>
   1bab8:	movw	r5, #52428	; 0xcccc
   1babc:	mov	r7, #0
   1bac0:	movt	r5, #3276	; 0xccc
   1bac4:	cmn	r7, #1
   1bac8:	bgt	1bb00 <__assert_fail@plt+0xa074>
   1bacc:	b	1bb0c <__assert_fail@plt+0xa080>
   1bad0:	add	r2, r7, r7, lsl #2
   1bad4:	lsl	r3, r2, #1
   1bad8:	uxtab	r0, r3, r0
   1badc:	sub	r7, r0, #48	; 0x30
   1bae0:	cmp	r7, r2, lsl #1
   1bae4:	mvnvs	r7, #-2147483648	; 0x80000000
   1bae8:	ldrb	r0, [r1], #1
   1baec:	sub	r2, r0, #48	; 0x30
   1baf0:	cmp	r2, #10
   1baf4:	bcs	1bb30 <__assert_fail@plt+0xa0a4>
   1baf8:	cmn	r7, #1
   1bafc:	ble	1bb0c <__assert_fail@plt+0xa080>
   1bb00:	cmp	r7, r5
   1bb04:	ble	1bad0 <__assert_fail@plt+0xa044>
   1bb08:	b	1bb1c <__assert_fail@plt+0xa090>
   1bb0c:	beq	1bad0 <__assert_fail@plt+0xa044>
   1bb10:	sdiv	r2, r8, r7
   1bb14:	cmp	r2, #10
   1bb18:	bge	1bad0 <__assert_fail@plt+0xa044>
   1bb1c:	mvn	r7, #-2147483648	; 0x80000000
   1bb20:	ldrb	r0, [r1], #1
   1bb24:	sub	r2, r0, #48	; 0x30
   1bb28:	cmp	r2, #10
   1bb2c:	bcc	1baf8 <__assert_fail@plt+0xa06c>
   1bb30:	sub	sl, r1, #1
   1bb34:	cmp	r0, #79	; 0x4f
   1bb38:	str	ip, [sp, #108]	; 0x6c
   1bb3c:	str	r4, [sp, #96]	; 0x60
   1bb40:	cmpne	r0, #69	; 0x45
   1bb44:	bne	1bb58 <__assert_fail@plt+0xa0cc>
   1bb48:	ldrb	r1, [sl, #1]!
   1bb4c:	cmp	r1, #122	; 0x7a
   1bb50:	bls	1bb68 <__assert_fail@plt+0xa0dc>
   1bb54:	b	1c678 <__assert_fail@plt+0xabec>
   1bb58:	mov	r1, r0
   1bb5c:	mov	r0, #0
   1bb60:	cmp	r1, #122	; 0x7a
   1bb64:	bhi	1c678 <__assert_fail@plt+0xabec>
   1bb68:	movw	r4, #16758	; 0x4176
   1bb6c:	add	r2, pc, #12
   1bb70:	mov	r5, #0
   1bb74:	mvn	r8, #0
   1bb78:	movt	r4, #2
   1bb7c:	ldr	pc, [r2, r1, lsl #2]
   1bb80:	andeq	fp, r1, r8, ror #29
   1bb84:	andeq	ip, r1, r8, ror r6
   1bb88:	andeq	ip, r1, r8, ror r6
   1bb8c:	andeq	ip, r1, r8, ror r6
   1bb90:	andeq	ip, r1, r8, ror r6
   1bb94:	andeq	ip, r1, r8, ror r6
   1bb98:	andeq	ip, r1, r8, ror r6
   1bb9c:	andeq	ip, r1, r8, ror r6
   1bba0:	andeq	ip, r1, r8, ror r6
   1bba4:	andeq	ip, r1, r8, ror r6
   1bba8:	andeq	ip, r1, r8, ror r6
   1bbac:	andeq	ip, r1, r8, ror r6
   1bbb0:	andeq	ip, r1, r8, ror r6
   1bbb4:	andeq	ip, r1, r8, ror r6
   1bbb8:	andeq	ip, r1, r8, ror r6
   1bbbc:	andeq	ip, r1, r8, ror r6
   1bbc0:	andeq	ip, r1, r8, ror r6
   1bbc4:	andeq	ip, r1, r8, ror r6
   1bbc8:	andeq	ip, r1, r8, ror r6
   1bbcc:	andeq	ip, r1, r8, ror r6
   1bbd0:	andeq	ip, r1, r8, ror r6
   1bbd4:	andeq	ip, r1, r8, ror r6
   1bbd8:	andeq	ip, r1, r8, ror r6
   1bbdc:	andeq	ip, r1, r8, ror r6
   1bbe0:	andeq	ip, r1, r8, ror r6
   1bbe4:	andeq	ip, r1, r8, ror r6
   1bbe8:	andeq	ip, r1, r8, ror r6
   1bbec:	andeq	ip, r1, r8, ror r6
   1bbf0:	andeq	ip, r1, r8, ror r6
   1bbf4:	andeq	ip, r1, r8, ror r6
   1bbf8:	andeq	ip, r1, r8, ror r6
   1bbfc:	andeq	ip, r1, r8, ror r6
   1bc00:	andeq	ip, r1, r8, ror r6
   1bc04:	andeq	ip, r1, r8, ror r6
   1bc08:	andeq	ip, r1, r8, ror r6
   1bc0c:	andeq	ip, r1, r8, ror r6
   1bc10:	andeq	ip, r1, r8, ror r6
   1bc14:	ldrdeq	fp, [r1], -r8
   1bc18:	andeq	ip, r1, r8, ror r6
   1bc1c:	andeq	ip, r1, r8, ror r6
   1bc20:	andeq	ip, r1, r8, ror r6
   1bc24:	andeq	ip, r1, r8, ror r6
   1bc28:	andeq	ip, r1, r8, ror r6
   1bc2c:	andeq	ip, r1, r8, ror r6
   1bc30:	andeq	ip, r1, r8, ror r6
   1bc34:	andeq	ip, r1, r8, ror r6
   1bc38:	andeq	ip, r1, r8, ror r6
   1bc3c:	andeq	ip, r1, r8, ror r6
   1bc40:	andeq	ip, r1, r8, ror r6
   1bc44:	andeq	ip, r1, r8, ror r6
   1bc48:	andeq	ip, r1, r8, ror r6
   1bc4c:	andeq	ip, r1, r8, ror r6
   1bc50:	andeq	ip, r1, r8, ror r6
   1bc54:	andeq	ip, r1, r8, ror r6
   1bc58:	andeq	ip, r1, r8, ror r6
   1bc5c:	andeq	ip, r1, r8, ror r6
   1bc60:	andeq	ip, r1, r8, ror r6
   1bc64:	andeq	ip, r1, r8, ror r6
   1bc68:	strdeq	fp, [r1], -r0
   1bc6c:	andeq	ip, r1, r8, ror r6
   1bc70:	andeq	ip, r1, r8, ror r6
   1bc74:	andeq	ip, r1, r8, ror r6
   1bc78:	andeq	ip, r1, r8, ror r6
   1bc7c:	andeq	ip, r1, r8, ror r6
   1bc80:	andeq	ip, r1, r8, ror r6
   1bc84:	andeq	fp, r1, ip, ror #30
   1bc88:	andeq	fp, r1, ip, lsl #31
   1bc8c:	andeq	fp, r1, ip, lsr #31
   1bc90:	andeq	fp, r1, r0, asr #31
   1bc94:	andeq	ip, r1, r8, ror r6
   1bc98:	ldrdeq	fp, [r1], -r4
   1bc9c:	andeq	fp, r1, ip, ror #26
   1bca0:	andeq	ip, r1, r0
   1bca4:	andeq	ip, r1, r4, lsl r0
   1bca8:	andeq	ip, r1, r8, ror r6
   1bcac:	andeq	ip, r1, r8, ror r6
   1bcb0:	andeq	ip, r1, r8, ror r6
   1bcb4:	andeq	ip, r1, r8, lsr #32
   1bcb8:	andeq	ip, r1, ip, lsr r0
   1bcbc:	andeq	ip, r1, r8, ror r6
   1bcc0:	andeq	ip, r1, r0, asr #1
   1bcc4:	andeq	ip, r1, r8, ror r6
   1bcc8:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1bccc:	andeq	ip, r1, r0, ror #1
   1bcd0:	strdeq	ip, [r1], -r4
   1bcd4:	andeq	ip, r1, r4, lsr #3
   1bcd8:	andeq	fp, r1, ip, ror #26
   1bcdc:	ldrdeq	ip, [r1], -r0
   1bce0:	andeq	ip, r1, ip, lsl r2
   1bce4:	andeq	ip, r1, r0, lsr r2
   1bce8:	andeq	ip, r1, ip, ror #4
   1bcec:	andeq	ip, r1, r8, ror r6
   1bcf0:	andeq	ip, r1, r8, ror r6
   1bcf4:	andeq	ip, r1, r8, ror r6
   1bcf8:	andeq	ip, r1, r8, ror r6
   1bcfc:	andeq	ip, r1, r8, ror r6
   1bd00:	andeq	ip, r1, r8, ror r6
   1bd04:	ldrdeq	ip, [r1], -r8
   1bd08:			; <UNDEFINED> instruction: 0x0001bebc
   1bd0c:	strdeq	ip, [r1], -r8
   1bd10:	andeq	ip, r1, ip, lsl #6
   1bd14:	andeq	ip, r1, r0, lsr #6
   1bd18:	andeq	ip, r1, r8, ror r6
   1bd1c:	andeq	fp, r1, ip, ror #26
   1bd20:			; <UNDEFINED> instruction: 0x0001bebc
   1bd24:	andeq	ip, r1, r8, ror r6
   1bd28:	andeq	ip, r1, r0, lsr r3
   1bd2c:	andeq	ip, r1, r8, asr #6
   1bd30:	andeq	ip, r1, ip, asr r3
   1bd34:	andeq	ip, r1, r4, lsl #9
   1bd38:	andeq	ip, r1, ip, lsr #9
   1bd3c:	andeq	ip, r1, r8, ror r6
   1bd40:	andeq	ip, r1, r4, asr #1
   1bd44:	andeq	ip, r1, r8, lsl #10
   1bd48:	andeq	sp, r1, r4, ror r1
   1bd4c:	andeq	ip, r1, r8, lsr #10
   1bd50:	andeq	ip, r1, r8, asr #11
   1bd54:	andeq	ip, r1, r4, lsr #12
   1bd58:	andeq	ip, r1, r8, ror r6
   1bd5c:	andeq	ip, r1, r8, asr r6
   1bd60:	andeq	ip, r1, r0, ror r6
   1bd64:	andeq	ip, r1, r4, lsl #16
   1bd68:	andeq	fp, r1, ip, lsl pc
   1bd6c:	cmp	r0, #69	; 0x45
   1bd70:	beq	1c678 <__assert_fail@plt+0xabec>
   1bd74:	ldr	r2, [sp, #88]	; 0x58
   1bd78:	movw	ip, #9363	; 0x2493
   1bd7c:	str	lr, [sp, #92]	; 0x5c
   1bd80:	movw	r6, #382	; 0x17e
   1bd84:	movt	ip, #37449	; 0x9249
   1bd88:	ldr	r8, [r2, #24]
   1bd8c:	ldr	r5, [r2, #28]
   1bd90:	ldr	lr, [r2, #20]
   1bd94:	sub	r2, r5, r8
   1bd98:	cmp	lr, #0
   1bd9c:	add	r2, r2, r6
   1bda0:	smmla	r4, r2, ip, r2
   1bda4:	asr	r6, r4, #2
   1bda8:	add	r4, r6, r4, lsr #31
   1bdac:	rsb	r4, r4, r4, lsl #3
   1bdb0:	sub	r2, r4, r2
   1bdb4:	add	r2, r5, r2
   1bdb8:	add	r4, r2, #3
   1bdbc:	mvn	r2, #99	; 0x63
   1bdc0:	movwmi	r2, #300	; 0x12c
   1bdc4:	add	r2, r2, lr
   1bdc8:	cmn	r4, #1
   1bdcc:	ble	1c9c4 <__assert_fail@plt+0xaf38>
   1bdd0:	movw	r6, #365	; 0x16d
   1bdd4:	tst	r2, #3
   1bdd8:	bne	1be24 <__assert_fail@plt+0xa398>
   1bddc:	movw	r6, #34079	; 0x851f
   1bde0:	mov	ip, #100	; 0x64
   1bde4:	movt	r6, #20971	; 0x51eb
   1bde8:	smmul	r6, r2, r6
   1bdec:	asr	r3, r6, #5
   1bdf0:	add	r3, r3, r6, lsr #31
   1bdf4:	mls	ip, r3, ip, r2
   1bdf8:	asr	r3, r6, #7
   1bdfc:	add	r3, r3, r6, lsr #31
   1be00:	mov	r6, #400	; 0x190
   1be04:	mls	r2, r3, r6, r2
   1be08:	movw	r6, #365	; 0x16d
   1be0c:	cmp	r2, #0
   1be10:	movweq	r6, #366	; 0x16e
   1be14:	cmp	ip, #0
   1be18:	movw	ip, #9363	; 0x2493
   1be1c:	movt	ip, #37449	; 0x9249
   1be20:	movwne	r6, #366	; 0x16e
   1be24:	add	r2, r8, r6
   1be28:	movw	r3, #382	; 0x17e
   1be2c:	sub	r2, r5, r2
   1be30:	add	r2, r2, r3
   1be34:	smmla	r2, r2, ip, r2
   1be38:	asr	r3, r2, #2
   1be3c:	add	r2, r3, r2, lsr #31
   1be40:	movw	r3, #379	; 0x17b
   1be44:	rsb	r2, r2, r2, lsl #3
   1be48:	add	r2, r8, r2
   1be4c:	sub	r2, r2, r3
   1be50:	cmn	r2, #1
   1be54:	movgt	r4, r2
   1be58:	mvn	r2, r2
   1be5c:	lsr	r3, r2, #31
   1be60:	cmp	r1, #71	; 0x47
   1be64:	beq	1ca48 <__assert_fail@plt+0xafbc>
   1be68:	cmp	r1, #103	; 0x67
   1be6c:	bne	1ca78 <__assert_fail@plt+0xafec>
   1be70:	movw	r2, #34079	; 0x851f
   1be74:	mov	ip, #2
   1be78:	movt	r2, #20971	; 0x51eb
   1be7c:	smmul	r6, lr, r2
   1be80:	asr	r5, r6, #5
   1be84:	add	r6, r5, r6, lsr #31
   1be88:	mov	r5, #100	; 0x64
   1be8c:	mls	r6, r6, r5, lr
   1be90:	add	r6, r3, r6
   1be94:	smmul	r2, r6, r2
   1be98:	asr	r4, r2, #5
   1be9c:	add	r2, r4, r2, lsr #31
   1bea0:	mls	r4, r2, r5, r6
   1bea4:	mov	r2, #0
   1bea8:	cmn	r4, #1
   1beac:	ble	1ce8c <__assert_fail@plt+0xb400>
   1beb0:	ldr	lr, [sp, #92]	; 0x5c
   1beb4:	mov	r3, r4
   1beb8:	b	1ced4 <__assert_fail@plt+0xb448>
   1bebc:	ldr	r2, [sp, #96]	; 0x60
   1bec0:	mov	r5, #0
   1bec4:	cmp	r0, #69	; 0x45
   1bec8:	orr	r2, r6, r2
   1becc:	str	r2, [sp, #96]	; 0x60
   1bed0:	beq	1c678 <__assert_fail@plt+0xabec>
   1bed4:	b	1d174 <__assert_fail@plt+0xb6e8>
   1bed8:	ldr	r1, [sp, #100]	; 0x64
   1bedc:	sub	r0, sl, #1
   1bee0:	cmp	r0, r1
   1bee4:	beq	1cc28 <__assert_fail@plt+0xb19c>
   1bee8:	sub	sl, sl, #1
   1beec:	b	1c678 <__assert_fail@plt+0xabec>
   1bef0:	mov	r5, #1
   1bef4:	ldrb	r2, [sl, r5]
   1bef8:	cmp	r2, #58	; 0x3a
   1befc:	bne	1bf10 <__assert_fail@plt+0xa484>
   1bf00:	add	r5, r5, #1
   1bf04:	ldrb	r2, [sl, r5]
   1bf08:	cmp	r2, #58	; 0x3a
   1bf0c:	beq	1bf00 <__assert_fail@plt+0xa474>
   1bf10:	cmp	r2, #122	; 0x7a
   1bf14:	bne	1c678 <__assert_fail@plt+0xabec>
   1bf18:	add	sl, sl, r5
   1bf1c:	ldr	r3, [sp, #88]	; 0x58
   1bf20:	ldr	r2, [r3, #32]
   1bf24:	cmp	r2, #0
   1bf28:	bmi	1d228 <__assert_fail@plt+0xb79c>
   1bf2c:	mov	r8, lr
   1bf30:	ldr	lr, [r3, #36]	; 0x24
   1bf34:	cmp	lr, #0
   1bf38:	bmi	1ccf0 <__assert_fail@plt+0xb264>
   1bf3c:	ldr	r3, [sp, #108]	; 0x6c
   1bf40:	mov	r2, #0
   1bf44:	bne	1ccf8 <__assert_fail@plt+0xb26c>
   1bf48:	ldr	r2, [sp, #64]	; 0x40
   1bf4c:	ldrb	r2, [r2]
   1bf50:	sub	r2, r2, #45	; 0x2d
   1bf54:	clz	r2, r2
   1bf58:	lsr	r2, r2, #5
   1bf5c:	cmp	r5, #3
   1bf60:	bls	1cd00 <__assert_fail@plt+0xb274>
   1bf64:	mov	lr, r8
   1bf68:	b	1c67c <__assert_fail@plt+0xabf0>
   1bf6c:	cmp	r0, #0
   1bf70:	bne	1c678 <__assert_fail@plt+0xabec>
   1bf74:	ldr	r1, [sp, #96]	; 0x60
   1bf78:	mov	r5, #0
   1bf7c:	orr	r1, r6, r1
   1bf80:	str	r1, [sp, #96]	; 0x60
   1bf84:	mov	r1, #65	; 0x41
   1bf88:	b	1d174 <__assert_fail@plt+0xb6e8>
   1bf8c:	cmp	r0, #69	; 0x45
   1bf90:	beq	1c678 <__assert_fail@plt+0xabec>
   1bf94:	ldr	r1, [sp, #96]	; 0x60
   1bf98:	mov	r5, #0
   1bf9c:	orr	r1, r6, r1
   1bfa0:	str	r1, [sp, #96]	; 0x60
   1bfa4:	mov	r1, #66	; 0x42
   1bfa8:	b	1d174 <__assert_fail@plt+0xb6e8>
   1bfac:	cmp	r0, #69	; 0x45
   1bfb0:	bne	1ca94 <__assert_fail@plt+0xb008>
   1bfb4:	mov	r5, #0
   1bfb8:	mov	r1, #67	; 0x43
   1bfbc:	b	1d174 <__assert_fail@plt+0xb6e8>
   1bfc0:	cmp	r0, #0
   1bfc4:	bne	1c678 <__assert_fail@plt+0xabec>
   1bfc8:	movw	r4, #16740	; 0x4164
   1bfcc:	movt	r4, #2
   1bfd0:	b	1c0fc <__assert_fail@plt+0xa670>
   1bfd4:	cmp	r0, #0
   1bfd8:	bne	1c678 <__assert_fail@plt+0xabec>
   1bfdc:	movw	r4, #16749	; 0x416d
   1bfe0:	cmp	r9, #0
   1bfe4:	movt	r4, #2
   1bfe8:	bne	1ceac <__assert_fail@plt+0xb420>
   1bfec:	cmp	r7, #0
   1bff0:	bpl	1ceac <__assert_fail@plt+0xb420>
   1bff4:	mov	r9, #43	; 0x2b
   1bff8:	mov	r8, #4
   1bffc:	b	1c0fc <__assert_fail@plt+0xa670>
   1c000:	cmp	r0, #69	; 0x45
   1c004:	beq	1c678 <__assert_fail@plt+0xabec>
   1c008:	ldr	r2, [sp, #60]	; 0x3c
   1c00c:	ldr	r3, [r2]
   1c010:	b	1c370 <__assert_fail@plt+0xa8e4>
   1c014:	mov	ip, #2
   1c018:	cmp	r0, #69	; 0x45
   1c01c:	beq	1c678 <__assert_fail@plt+0xabec>
   1c020:	ldr	r3, [sp, #56]	; 0x38
   1c024:	b	1c374 <__assert_fail@plt+0xa8e8>
   1c028:	cmp	r0, #69	; 0x45
   1c02c:	beq	1c678 <__assert_fail@plt+0xabec>
   1c030:	ldr	r2, [sp, #88]	; 0x58
   1c034:	ldr	r3, [r2, #4]
   1c038:	b	1c370 <__assert_fail@plt+0xa8e4>
   1c03c:	cmp	r0, #69	; 0x45
   1c040:	beq	1c678 <__assert_fail@plt+0xabec>
   1c044:	ldr	r1, [fp, #24]
   1c048:	ldr	ip, [sp, #108]	; 0x6c
   1c04c:	cmp	r7, #1
   1c050:	sub	r5, fp, #48	; 0x30
   1c054:	mov	r4, #9
   1c058:	mov	r0, #8
   1c05c:	movwlt	r7, #9
   1c060:	mov	r8, r5
   1c064:	cmp	r7, r4
   1c068:	blt	1c098 <__assert_fail@plt+0xa60c>
   1c06c:	movw	r2, #26215	; 0x6667
   1c070:	cmp	r4, #2
   1c074:	movt	r2, #26214	; 0x6666
   1c078:	blt	1cae8 <__assert_fail@plt+0xb05c>
   1c07c:	smmul	r3, r1, r2
   1c080:	asr	r6, r3, #2
   1c084:	add	r3, r6, r3, lsr #31
   1c088:	add	r3, r3, r3, lsl #2
   1c08c:	sub	r3, r1, r3, lsl #1
   1c090:	cmp	r3, #0
   1c094:	bne	1cae8 <__assert_fail@plt+0xb05c>
   1c098:	movw	r2, #26215	; 0x6667
   1c09c:	sub	r0, r0, #1
   1c0a0:	sub	r4, r4, #1
   1c0a4:	movt	r2, #26214	; 0x6666
   1c0a8:	smmul	r1, r1, r2
   1c0ac:	asr	r2, r1, #2
   1c0b0:	add	r1, r2, r1, lsr #31
   1c0b4:	cmp	r7, r4
   1c0b8:	blt	1c098 <__assert_fail@plt+0xa60c>
   1c0bc:	b	1c06c <__assert_fail@plt+0xa5e0>
   1c0c0:	mov	r5, #1
   1c0c4:	ldr	r2, [sp, #96]	; 0x60
   1c0c8:	eor	r1, r6, #1
   1c0cc:	orr	r5, r6, r5
   1c0d0:	and	r2, r2, r1
   1c0d4:	mov	r1, #112	; 0x70
   1c0d8:	str	r2, [sp, #96]	; 0x60
   1c0dc:	b	1d174 <__assert_fail@plt+0xb6e8>
   1c0e0:	cmp	r0, #69	; 0x45
   1c0e4:	beq	1c678 <__assert_fail@plt+0xabec>
   1c0e8:	ldr	r2, [sp, #88]	; 0x58
   1c0ec:	ldr	r3, [r2]
   1c0f0:	b	1c370 <__assert_fail@plt+0xa8e4>
   1c0f4:	movw	r4, #16764	; 0x417c
   1c0f8:	movt	r4, #2
   1c0fc:	ldr	r0, [sp, #96]	; 0x60
   1c100:	ldr	r3, [sp, #88]	; 0x58
   1c104:	mvn	r1, #0
   1c108:	mov	r2, r4
   1c10c:	str	lr, [sp, #92]	; 0x5c
   1c110:	and	r0, r0, #1
   1c114:	stm	sp, {r0, r9}
   1c118:	str	r0, [sp, #100]	; 0x64
   1c11c:	ldr	r0, [fp, #20]
   1c120:	str	r8, [sp, #8]
   1c124:	str	r0, [sp, #12]
   1c128:	ldr	r0, [fp, #24]
   1c12c:	str	r0, [sp, #16]
   1c130:	mov	r0, #0
   1c134:	bl	1b858 <__assert_fail@plt+0x9dcc>
   1c138:	mov	r6, r0
   1c13c:	subs	r0, r9, #45	; 0x2d
   1c140:	ldr	lr, [sp, #92]	; 0x5c
   1c144:	ldr	r1, [sp, #104]	; 0x68
   1c148:	movne	r0, r7
   1c14c:	cmp	r7, #0
   1c150:	mov	r5, r6
   1c154:	movwmi	r0, #0
   1c158:	cmp	r0, r6
   1c15c:	movhi	r5, r0
   1c160:	sub	r1, r1, lr
   1c164:	cmp	r5, r1
   1c168:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1c16c:	ldr	r7, [sp, #108]	; 0x6c
   1c170:	cmp	r7, #0
   1c174:	beq	1c818 <__assert_fail@plt+0xad8c>
   1c178:	cmp	r0, r6
   1c17c:	bls	1c820 <__assert_fail@plt+0xad94>
   1c180:	cmp	r9, #48	; 0x30
   1c184:	sub	r2, r0, r6
   1c188:	str	r1, [sp, #20]
   1c18c:	cmpne	r9, #43	; 0x2b
   1c190:	str	r2, [sp, #96]	; 0x60
   1c194:	bne	1ce1c <__assert_fail@plt+0xb390>
   1c198:	mov	r0, r7
   1c19c:	mov	r1, #48	; 0x30
   1c1a0:	b	1ce24 <__assert_fail@plt+0xb398>
   1c1a4:	cmp	r0, #69	; 0x45
   1c1a8:	beq	1c678 <__assert_fail@plt+0xabec>
   1c1ac:	ldr	r3, [sp, #88]	; 0x58
   1c1b0:	ldr	r2, [r3, #24]
   1c1b4:	ldr	r3, [r3, #28]
   1c1b8:	sub	r2, r3, r2
   1c1bc:	movw	r3, #9363	; 0x2493
   1c1c0:	movt	r3, #37449	; 0x9249
   1c1c4:	add	r2, r2, #7
   1c1c8:	smmla	r2, r2, r3, r2
   1c1cc:	b	1c210 <__assert_fail@plt+0xa784>
   1c1d0:	cmp	r0, #69	; 0x45
   1c1d4:	beq	1c678 <__assert_fail@plt+0xabec>
   1c1d8:	ldr	r3, [sp, #88]	; 0x58
   1c1dc:	movw	r6, #9363	; 0x2493
   1c1e0:	movt	r6, #37449	; 0x9249
   1c1e4:	ldr	r2, [r3, #24]
   1c1e8:	ldr	r3, [r3, #28]
   1c1ec:	add	r2, r2, #6
   1c1f0:	smmla	r5, r2, r6, r2
   1c1f4:	asr	r4, r5, #2
   1c1f8:	add	r5, r4, r5, lsr #31
   1c1fc:	rsb	r5, r5, r5, lsl #3
   1c200:	sub	r2, r5, r2
   1c204:	add	r2, r3, r2
   1c208:	add	r2, r2, #7
   1c20c:	smmla	r2, r2, r6, r2
   1c210:	asr	r3, r2, #2
   1c214:	add	r3, r3, r2, lsr #31
   1c218:	b	1c370 <__assert_fail@plt+0xa8e4>
   1c21c:	cmp	r0, #79	; 0x4f
   1c220:	beq	1c678 <__assert_fail@plt+0xabec>
   1c224:	mov	r5, #0
   1c228:	mov	r1, #88	; 0x58
   1c22c:	b	1d174 <__assert_fail@plt+0xb6e8>
   1c230:	cmp	r0, #69	; 0x45
   1c234:	beq	1cd74 <__assert_fail@plt+0xb2e8>
   1c238:	cmp	r0, #79	; 0x4f
   1c23c:	beq	1c678 <__assert_fail@plt+0xabec>
   1c240:	ldr	r2, [sp, #88]	; 0x58
   1c244:	movw	r6, #63636	; 0xf894
   1c248:	mov	ip, #4
   1c24c:	movt	r6, #65535	; 0xffff
   1c250:	ldr	r3, [r2, #20]
   1c254:	mov	r2, #0
   1c258:	cmp	r3, r6
   1c25c:	movw	r6, #1900	; 0x76c
   1c260:	movwlt	r2, #1
   1c264:	add	r3, r3, r6
   1c268:	b	1ced4 <__assert_fail@plt+0xb448>
   1c26c:	ldr	r0, [sp, #64]	; 0x40
   1c270:	subs	r5, r9, #45	; 0x2d
   1c274:	bicne	r5, r7, r7, asr #31
   1c278:	mov	r7, lr
   1c27c:	bl	118ac <strlen@plt>
   1c280:	mov	r8, r0
   1c284:	cmp	r5, r0
   1c288:	mov	r4, r0
   1c28c:	ldr	r0, [sp, #104]	; 0x68
   1c290:	movhi	r4, r5
   1c294:	sub	r0, r0, r7
   1c298:	cmp	r4, r0
   1c29c:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1c2a0:	ldr	ip, [sp, #108]	; 0x6c
   1c2a4:	mov	lr, r7
   1c2a8:	cmp	ip, #0
   1c2ac:	beq	1cc88 <__assert_fail@plt+0xb1fc>
   1c2b0:	cmp	r5, r8
   1c2b4:	bls	1cd80 <__assert_fail@plt+0xb2f4>
   1c2b8:	uxtb	r0, r9
   1c2bc:	sub	r5, r5, r8
   1c2c0:	cmp	r0, #48	; 0x30
   1c2c4:	cmpne	r0, #43	; 0x2b
   1c2c8:	bne	1cfdc <__assert_fail@plt+0xb550>
   1c2cc:	mov	r0, ip
   1c2d0:	mov	r1, #48	; 0x30
   1c2d4:	b	1cfe4 <__assert_fail@plt+0xb558>
   1c2d8:	cmp	r0, #0
   1c2dc:	bne	1c678 <__assert_fail@plt+0xabec>
   1c2e0:	ldr	r1, [sp, #96]	; 0x60
   1c2e4:	mov	r5, #0
   1c2e8:	orr	r1, r6, r1
   1c2ec:	str	r1, [sp, #96]	; 0x60
   1c2f0:	mov	r1, #97	; 0x61
   1c2f4:	b	1d174 <__assert_fail@plt+0xb6e8>
   1c2f8:	cmp	r0, #79	; 0x4f
   1c2fc:	beq	1c678 <__assert_fail@plt+0xabec>
   1c300:	mov	r5, #0
   1c304:	mov	r1, #99	; 0x63
   1c308:	b	1d174 <__assert_fail@plt+0xb6e8>
   1c30c:	cmp	r0, #69	; 0x45
   1c310:	beq	1c678 <__assert_fail@plt+0xabec>
   1c314:	ldr	r2, [sp, #52]	; 0x34
   1c318:	ldr	r3, [r2]
   1c31c:	b	1c370 <__assert_fail@plt+0xa8e4>
   1c320:	ldr	r2, [sp, #52]	; 0x34
   1c324:	cmp	r0, #69	; 0x45
   1c328:	bne	1c354 <__assert_fail@plt+0xa8c8>
   1c32c:	b	1c678 <__assert_fail@plt+0xabec>
   1c330:	cmp	r0, #69	; 0x45
   1c334:	beq	1c678 <__assert_fail@plt+0xabec>
   1c338:	ldr	r2, [sp, #88]	; 0x58
   1c33c:	mov	ip, #3
   1c340:	ldr	r3, [r2, #28]
   1c344:	b	1c498 <__assert_fail@plt+0xaa0c>
   1c348:	ldr	r2, [sp, #60]	; 0x3c
   1c34c:	cmp	r0, #69	; 0x45
   1c350:	beq	1c678 <__assert_fail@plt+0xabec>
   1c354:	ldr	r3, [r2]
   1c358:	b	1c368 <__assert_fail@plt+0xa8dc>
   1c35c:	ldr	r3, [sp, #56]	; 0x38
   1c360:	cmp	r0, #69	; 0x45
   1c364:	beq	1c678 <__assert_fail@plt+0xabec>
   1c368:	cmp	r9, #0
   1c36c:	movweq	r9, #95	; 0x5f
   1c370:	mov	ip, #2
   1c374:	lsr	r2, r3, #31
   1c378:	cmp	r2, #0
   1c37c:	mov	r6, #0
   1c380:	mov	r4, #0
   1c384:	movwne	r2, #1
   1c388:	cmp	r0, #79	; 0x4f
   1c38c:	moveq	r5, #0
   1c390:	cmpeq	r2, #0
   1c394:	beq	1d174 <__assert_fail@plt+0xb6e8>
   1c398:	ldr	r8, [sp, #80]	; 0x50
   1c39c:	cmp	r2, #0
   1c3a0:	rsbne	r3, r3, #0
   1c3a4:	tst	r6, #1
   1c3a8:	asr	r6, r6, #1
   1c3ac:	movne	r0, #58	; 0x3a
   1c3b0:	strbne	r0, [r8, #-1]!
   1c3b4:	movw	r0, #52429	; 0xcccd
   1c3b8:	cmp	r3, #9
   1c3bc:	movt	r0, #52428	; 0xcccc
   1c3c0:	umull	r0, r1, r3, r0
   1c3c4:	lsr	r0, r1, #3
   1c3c8:	add	r1, r0, r0, lsl #2
   1c3cc:	sub	r1, r3, r1, lsl #1
   1c3d0:	mov	r3, r0
   1c3d4:	orr	r1, r1, #48	; 0x30
   1c3d8:	strb	r1, [r8, #-1]!
   1c3dc:	bhi	1c3a4 <__assert_fail@plt+0xa918>
   1c3e0:	cmp	r6, #0
   1c3e4:	mov	r3, r0
   1c3e8:	bne	1c3a4 <__assert_fail@plt+0xa918>
   1c3ec:	cmp	r7, #0
   1c3f0:	ldr	r3, [sp, #108]	; 0x6c
   1c3f4:	str	sl, [sp, #100]	; 0x64
   1c3f8:	movmi	r7, ip
   1c3fc:	ldr	ip, [sp, #96]	; 0x60
   1c400:	cmp	r4, #0
   1c404:	movwne	r4, #43	; 0x2b
   1c408:	cmp	r9, #0
   1c40c:	movweq	r9, #48	; 0x30
   1c410:	ldr	r1, [sp, #80]	; 0x50
   1c414:	cmp	r2, #0
   1c418:	mov	r0, r7
   1c41c:	movwne	r4, #45	; 0x2d
   1c420:	cmp	r4, #0
   1c424:	subne	r0, r0, #1
   1c428:	sub	sl, r1, r8
   1c42c:	sub	r0, r0, sl
   1c430:	cmp	r0, #1
   1c434:	movwlt	r0, #0
   1c438:	subs	r5, r9, #45	; 0x2d
   1c43c:	movne	r5, r0
   1c440:	cmp	r4, #0
   1c444:	beq	1c85c <__assert_fail@plt+0xadd0>
   1c448:	cmp	r9, #95	; 0x5f
   1c44c:	bne	1c838 <__assert_fail@plt+0xadac>
   1c450:	cmp	r3, #0
   1c454:	beq	1c82c <__assert_fail@plt+0xada0>
   1c458:	mov	r0, r3
   1c45c:	mov	r1, #32
   1c460:	mov	r2, r5
   1c464:	str	lr, [sp, #92]	; 0x5c
   1c468:	mov	r6, r3
   1c46c:	bl	11918 <memset@plt>
   1c470:	ldr	ip, [sp, #96]	; 0x60
   1c474:	ldr	lr, [sp, #92]	; 0x5c
   1c478:	mov	r3, r6
   1c47c:	add	r3, r6, r5
   1c480:	b	1c830 <__assert_fail@plt+0xada4>
   1c484:	cmp	r0, #69	; 0x45
   1c488:	beq	1c678 <__assert_fail@plt+0xabec>
   1c48c:	ldr	r2, [sp, #88]	; 0x58
   1c490:	mov	ip, #2
   1c494:	ldr	r3, [r2, #16]
   1c498:	mov	r2, #0
   1c49c:	cmn	r3, #1
   1c4a0:	add	r3, r3, #1
   1c4a4:	movwlt	r2, #1
   1c4a8:	b	1c378 <__assert_fail@plt+0xa8ec>
   1c4ac:	subs	r0, r9, #45	; 0x2d
   1c4b0:	ldr	r1, [sp, #104]	; 0x68
   1c4b4:	bicne	r0, r7, r7, asr #31
   1c4b8:	cmp	r0, #1
   1c4bc:	mov	r5, r0
   1c4c0:	movls	r5, #1
   1c4c4:	sub	r1, r1, lr
   1c4c8:	cmp	r5, r1
   1c4cc:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1c4d0:	ldr	ip, [sp, #108]	; 0x6c
   1c4d4:	mov	r8, #-2147483648	; 0x80000000
   1c4d8:	cmp	ip, #0
   1c4dc:	beq	1b960 <__assert_fail@plt+0x9ed4>
   1c4e0:	cmp	r0, #2
   1c4e4:	bcc	1d0c8 <__assert_fail@plt+0xb63c>
   1c4e8:	uxtb	r1, r9
   1c4ec:	sub	r4, r0, #1
   1c4f0:	cmp	r1, #48	; 0x30
   1c4f4:	cmpne	r1, #43	; 0x2b
   1c4f8:	bne	1d0a0 <__assert_fail@plt+0xb614>
   1c4fc:	mov	r0, ip
   1c500:	mov	r1, #48	; 0x30
   1c504:	b	1d0a8 <__assert_fail@plt+0xb61c>
   1c508:	ldr	r2, [sp, #88]	; 0x58
   1c50c:	mov	r3, #11
   1c510:	mov	ip, #1
   1c514:	ldr	r2, [r2, #16]
   1c518:	mul	r2, r2, r3
   1c51c:	add	r3, ip, r2, asr #5
   1c520:	mov	r2, #0
   1c524:	b	1c378 <__assert_fail@plt+0xa8ec>
   1c528:	ldr	r2, [sp, #88]	; 0x58
   1c52c:	mov	r0, #28
   1c530:	add	r1, sp, #112	; 0x70
   1c534:	str	lr, [sp, #92]	; 0x5c
   1c538:	mov	r4, r1
   1c53c:	mov	r3, r2
   1c540:	add	r2, r2, #16
   1c544:	vld1.32	{d16-d17}, [r3], r0
   1c548:	vld1.32	{d18-d19}, [r2]
   1c54c:	add	r2, r1, #16
   1c550:	vld1.32	{d20-d21}, [r3]
   1c554:	vst1.64	{d16-d17}, [r4], r0
   1c558:	mvn	r0, #0
   1c55c:	vst1.64	{d18-d19}, [r2]
   1c560:	vst1.32	{d20-d21}, [r4]
   1c564:	str	r0, [r4]
   1c568:	ldr	r0, [fp, #20]
   1c56c:	bl	1fb00 <__assert_fail@plt+0xe074>
   1c570:	ldr	r1, [r4]
   1c574:	cmp	r1, #0
   1c578:	bmi	1d468 <__assert_fail@plt+0xb9dc>
   1c57c:	movw	r1, #26215	; 0x6667
   1c580:	cmp	r0, #0
   1c584:	movt	r1, #26214	; 0x6666
   1c588:	bmi	1cc90 <__assert_fail@plt+0xb204>
   1c58c:	ldr	r4, [sp, #96]	; 0x60
   1c590:	ldr	r2, [sp, #40]	; 0x28
   1c594:	mov	r3, r0
   1c598:	smmul	r6, r3, r1
   1c59c:	asr	r5, r6, #2
   1c5a0:	add	r6, r5, r6, lsr #31
   1c5a4:	add	r5, r6, r6, lsl #2
   1c5a8:	sub	r5, r3, r5, lsl #1
   1c5ac:	add	r3, r3, #9
   1c5b0:	cmp	r3, #18
   1c5b4:	mov	r3, r6
   1c5b8:	add	r5, r5, #48	; 0x30
   1c5bc:	strb	r5, [r2], #-1
   1c5c0:	bhi	1c598 <__assert_fail@plt+0xab0c>
   1c5c4:	b	1ccc8 <__assert_fail@plt+0xb23c>
   1c5c8:	subs	r0, r9, #45	; 0x2d
   1c5cc:	ldr	r1, [sp, #104]	; 0x68
   1c5d0:	bicne	r0, r7, r7, asr #31
   1c5d4:	cmp	r0, #1
   1c5d8:	mov	r5, r0
   1c5dc:	movls	r5, #1
   1c5e0:	sub	r1, r1, lr
   1c5e4:	cmp	r5, r1
   1c5e8:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1c5ec:	ldr	ip, [sp, #108]	; 0x6c
   1c5f0:	mov	r8, #-2147483648	; 0x80000000
   1c5f4:	cmp	ip, #0
   1c5f8:	beq	1b960 <__assert_fail@plt+0x9ed4>
   1c5fc:	cmp	r0, #2
   1c600:	bcc	1d0f8 <__assert_fail@plt+0xb66c>
   1c604:	uxtb	r1, r9
   1c608:	sub	r4, r0, #1
   1c60c:	cmp	r1, #48	; 0x30
   1c610:	cmpne	r1, #43	; 0x2b
   1c614:	bne	1d0d0 <__assert_fail@plt+0xb644>
   1c618:	mov	r0, ip
   1c61c:	mov	r1, #48	; 0x30
   1c620:	b	1d0d8 <__assert_fail@plt+0xb64c>
   1c624:	ldr	r2, [sp, #88]	; 0x58
   1c628:	movw	r3, #9363	; 0x2493
   1c62c:	mov	ip, #1
   1c630:	movt	r3, #37449	; 0x9249
   1c634:	ldr	r2, [r2, #24]
   1c638:	add	r2, r2, #6
   1c63c:	smmla	r3, r2, r3, r2
   1c640:	asr	r6, r3, #2
   1c644:	add	r3, r6, r3, lsr #31
   1c648:	rsb	r3, r3, r3, lsl #3
   1c64c:	sub	r2, r2, r3
   1c650:	add	r3, r2, #1
   1c654:	b	1c374 <__assert_fail@plt+0xa8e8>
   1c658:	cmp	r0, #69	; 0x45
   1c65c:	beq	1c678 <__assert_fail@plt+0xabec>
   1c660:	ldr	r2, [sp, #88]	; 0x58
   1c664:	mov	ip, #1
   1c668:	ldr	r3, [r2, #24]
   1c66c:	b	1c374 <__assert_fail@plt+0xa8e8>
   1c670:	cmp	r0, #79	; 0x4f
   1c674:	bne	1cbe0 <__assert_fail@plt+0xb154>
   1c678:	ldr	r3, [sp, #108]	; 0x6c
   1c67c:	ldr	r0, [sp, #100]	; 0x64
   1c680:	subs	r5, r9, #45	; 0x2d
   1c684:	bicne	r5, r7, r7, asr #31
   1c688:	sub	r8, sl, r0
   1c68c:	ldr	r0, [sp, #104]	; 0x68
   1c690:	add	r4, r8, #1
   1c694:	cmp	r5, r4
   1c698:	mov	r7, r4
   1c69c:	movhi	r7, r5
   1c6a0:	sub	r0, r0, lr
   1c6a4:	cmp	r7, r0
   1c6a8:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1c6ac:	cmp	r3, #0
   1c6b0:	beq	1c6e4 <__assert_fail@plt+0xac58>
   1c6b4:	cmp	r5, r4
   1c6b8:	mov	ip, r3
   1c6bc:	bls	1c708 <__assert_fail@plt+0xac7c>
   1c6c0:	uxtb	r0, r9
   1c6c4:	sub	r6, r5, r4
   1c6c8:	str	lr, [sp, #92]	; 0x5c
   1c6cc:	cmp	r0, #48	; 0x30
   1c6d0:	cmpne	r0, #43	; 0x2b
   1c6d4:	bne	1c6ec <__assert_fail@plt+0xac60>
   1c6d8:	mov	r0, r3
   1c6dc:	mov	r1, #48	; 0x30
   1c6e0:	b	1c6f4 <__assert_fail@plt+0xac68>
   1c6e4:	mov	ip, #0
   1c6e8:	b	1c7e8 <__assert_fail@plt+0xad5c>
   1c6ec:	mov	r0, r3
   1c6f0:	mov	r1, #32
   1c6f4:	mov	r2, r6
   1c6f8:	mov	r9, r3
   1c6fc:	bl	11918 <memset@plt>
   1c700:	ldr	lr, [sp, #92]	; 0x5c
   1c704:	add	ip, r9, r6
   1c708:	ldr	r0, [sp, #96]	; 0x60
   1c70c:	tst	r0, #1
   1c710:	beq	1c7c4 <__assert_fail@plt+0xad38>
   1c714:	cmp	r4, #0
   1c718:	beq	1c7e4 <__assert_fail@plt+0xad58>
   1c71c:	ldr	r0, [sp, #100]	; 0x64
   1c720:	str	lr, [sp, #92]	; 0x5c
   1c724:	mov	r6, ip
   1c728:	sub	r0, sl, r0
   1c72c:	add	r9, r0, #1
   1c730:	bl	1184c <__ctype_toupper_loc@plt>
   1c734:	mov	ip, r6
   1c738:	tst	r9, #1
   1c73c:	mov	r1, r4
   1c740:	beq	1c758 <__assert_fail@plt+0xaccc>
   1c744:	ldrb	r1, [sl]
   1c748:	ldr	r2, [r0]
   1c74c:	ldr	r1, [r2, r1, lsl #2]
   1c750:	strb	r1, [ip, r8]
   1c754:	mov	r1, r8
   1c758:	ldr	r2, [sp, #100]	; 0x64
   1c75c:	ldr	lr, [sp, #92]	; 0x5c
   1c760:	ldr	r3, [sp, #108]	; 0x6c
   1c764:	cmp	sl, r2
   1c768:	beq	1c7e4 <__assert_fail@plt+0xad58>
   1c76c:	ldr	r6, [sp, #100]	; 0x64
   1c770:	cmp	r5, r9
   1c774:	movhi	r9, r5
   1c778:	add	r2, r1, r6
   1c77c:	add	r2, r2, r9
   1c780:	sub	r2, r2, sl
   1c784:	add	r2, r3, r2
   1c788:	sub	r3, r6, #2
   1c78c:	sub	r2, r2, #2
   1c790:	add	r6, r3, r1
   1c794:	ldr	r5, [r0]
   1c798:	ldrb	r6, [r6, #1]
   1c79c:	ldr	r6, [r5, r6, lsl #2]
   1c7a0:	strb	r6, [r2]
   1c7a4:	ldrb	r6, [r3, r1]
   1c7a8:	ldr	r5, [r0]
   1c7ac:	subs	r1, r1, #2
   1c7b0:	ldr	r6, [r5, r6, lsl #2]
   1c7b4:	strb	r6, [r2, #-1]
   1c7b8:	sub	r2, r2, #2
   1c7bc:	bne	1c790 <__assert_fail@plt+0xad04>
   1c7c0:	b	1c7e4 <__assert_fail@plt+0xad58>
   1c7c4:	ldr	r1, [sp, #100]	; 0x64
   1c7c8:	mov	r0, ip
   1c7cc:	mov	r2, r4
   1c7d0:	mov	r5, lr
   1c7d4:	mov	r6, ip
   1c7d8:	bl	11708 <memcpy@plt>
   1c7dc:	mov	ip, r6
   1c7e0:	mov	lr, r5
   1c7e4:	add	ip, ip, r4
   1c7e8:	add	lr, r7, lr
   1c7ec:	mov	r8, #-2147483648	; 0x80000000
   1c7f0:	ldrb	r3, [sl, #1]!
   1c7f4:	mvn	r7, #0
   1c7f8:	cmp	r3, #0
   1c7fc:	bne	1b978 <__assert_fail@plt+0x9eec>
   1c800:	b	1d420 <__assert_fail@plt+0xb994>
   1c804:	cmp	r0, #69	; 0x45
   1c808:	bne	1cbec <__assert_fail@plt+0xb160>
   1c80c:	mov	r5, #0
   1c810:	mov	r1, #121	; 0x79
   1c814:	b	1d174 <__assert_fail@plt+0xb6e8>
   1c818:	mov	ip, #0
   1c81c:	b	1ce70 <__assert_fail@plt+0xb3e4>
   1c820:	ldr	r3, [sp, #88]	; 0x58
   1c824:	ldr	r0, [sp, #100]	; 0x64
   1c828:	b	1ce40 <__assert_fail@plt+0xb3b4>
   1c82c:	mov	r3, #0
   1c830:	sub	r7, r7, r5
   1c834:	add	lr, r5, lr
   1c838:	ldr	r0, [sp, #104]	; 0x68
   1c83c:	sub	r0, r0, lr
   1c840:	cmp	r0, #2
   1c844:	bcc	1d44c <__assert_fail@plt+0xb9c0>
   1c848:	cmp	r3, #0
   1c84c:	sub	r7, r7, #1
   1c850:	add	lr, lr, #1
   1c854:	strbne	r4, [r3], #1
   1c858:	moveq	r3, #0
   1c85c:	subs	r5, r9, #45	; 0x2d
   1c860:	ldr	r0, [sp, #104]	; 0x68
   1c864:	mov	r4, sl
   1c868:	bicne	r5, r7, r7, asr #31
   1c86c:	cmp	r5, sl
   1c870:	movhi	r4, r5
   1c874:	sub	r0, r0, lr
   1c878:	cmp	r4, r0
   1c87c:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1c880:	cmp	r3, #0
   1c884:	beq	1c8b4 <__assert_fail@plt+0xae28>
   1c888:	cmp	r5, sl
   1c88c:	mov	r6, r3
   1c890:	bls	1c8e0 <__assert_fail@plt+0xae54>
   1c894:	cmp	r9, #48	; 0x30
   1c898:	sub	r6, r5, sl
   1c89c:	str	lr, [sp, #92]	; 0x5c
   1c8a0:	cmpne	r9, #43	; 0x2b
   1c8a4:	bne	1c8bc <__assert_fail@plt+0xae30>
   1c8a8:	mov	r0, r3
   1c8ac:	mov	r1, #48	; 0x30
   1c8b0:	b	1c8c4 <__assert_fail@plt+0xae38>
   1c8b4:	mov	ip, #0
   1c8b8:	b	1c9a4 <__assert_fail@plt+0xaf18>
   1c8bc:	mov	r0, r3
   1c8c0:	mov	r1, #32
   1c8c4:	mov	r2, r6
   1c8c8:	mov	r7, r3
   1c8cc:	bl	11918 <memset@plt>
   1c8d0:	ldr	lr, [sp, #92]	; 0x5c
   1c8d4:	ldr	ip, [sp, #96]	; 0x60
   1c8d8:	add	r6, r7, r6
   1c8dc:	mov	r3, r7
   1c8e0:	tst	ip, #1
   1c8e4:	beq	1c988 <__assert_fail@plt+0xaefc>
   1c8e8:	cmp	sl, #0
   1c8ec:	beq	1c9a0 <__assert_fail@plt+0xaf14>
   1c8f0:	str	r3, [sp, #108]	; 0x6c
   1c8f4:	mov	r7, lr
   1c8f8:	mvn	r9, r8
   1c8fc:	bl	1184c <__ctype_toupper_loc@plt>
   1c900:	tst	sl, #1
   1c904:	mov	r1, sl
   1c908:	beq	1c920 <__assert_fail@plt+0xae94>
   1c90c:	sub	r1, sl, #1
   1c910:	ldr	r3, [r0]
   1c914:	ldrb	r2, [r8, r1]
   1c918:	ldr	r2, [r3, r2, lsl #2]
   1c91c:	strb	r2, [r6, r1]
   1c920:	ldr	r2, [sp, #44]	; 0x2c
   1c924:	mov	lr, r7
   1c928:	ldr	r7, [sp, #108]	; 0x6c
   1c92c:	cmp	r9, r2
   1c930:	beq	1c9a0 <__assert_fail@plt+0xaf14>
   1c934:	ldr	r3, [sp, #36]	; 0x24
   1c938:	cmp	r5, sl
   1c93c:	add	r2, r1, r8
   1c940:	movls	r5, sl
   1c944:	add	r2, r2, r5
   1c948:	add	r3, r7, r3
   1c94c:	add	r2, r3, r2
   1c950:	sub	r3, r8, #2
   1c954:	add	r5, r3, r1
   1c958:	ldr	r7, [r0]
   1c95c:	ldrb	r5, [r5, #1]
   1c960:	ldr	r7, [r7, r5, lsl #2]
   1c964:	strb	r7, [r2]
   1c968:	ldrb	r7, [r3, r1]
   1c96c:	ldr	r5, [r0]
   1c970:	subs	r1, r1, #2
   1c974:	ldr	r7, [r5, r7, lsl #2]
   1c978:	strb	r7, [r2, #-1]
   1c97c:	sub	r2, r2, #2
   1c980:	bne	1c954 <__assert_fail@plt+0xaec8>
   1c984:	b	1c9a0 <__assert_fail@plt+0xaf14>
   1c988:	mov	r0, r6
   1c98c:	mov	r1, r8
   1c990:	mov	r2, sl
   1c994:	mov	r5, lr
   1c998:	bl	11708 <memcpy@plt>
   1c99c:	mov	lr, r5
   1c9a0:	add	ip, r6, sl
   1c9a4:	ldr	sl, [sp, #100]	; 0x64
   1c9a8:	add	lr, r4, lr
   1c9ac:	mov	r8, #-2147483648	; 0x80000000
   1c9b0:	ldrb	r3, [sl, #1]!
   1c9b4:	mvn	r7, #0
   1c9b8:	cmp	r3, #0
   1c9bc:	bne	1b978 <__assert_fail@plt+0x9eec>
   1c9c0:	b	1d420 <__assert_fail@plt+0xb994>
   1c9c4:	sub	r2, r2, #1
   1c9c8:	movw	r4, #365	; 0x16d
   1c9cc:	tst	r2, #3
   1c9d0:	bne	1ca14 <__assert_fail@plt+0xaf88>
   1c9d4:	movw	r4, #34079	; 0x851f
   1c9d8:	movt	r4, #20971	; 0x51eb
   1c9dc:	smmul	r4, r2, r4
   1c9e0:	asr	r6, r4, #5
   1c9e4:	add	r3, r6, r4, lsr #31
   1c9e8:	mov	r6, #100	; 0x64
   1c9ec:	mls	r3, r3, r6, r2
   1c9f0:	asr	r6, r4, #7
   1c9f4:	add	r4, r6, r4, lsr #31
   1c9f8:	mov	r6, #400	; 0x190
   1c9fc:	mls	r2, r4, r6, r2
   1ca00:	movw	r4, #365	; 0x16d
   1ca04:	cmp	r2, #0
   1ca08:	movweq	r4, #366	; 0x16e
   1ca0c:	cmp	r3, #0
   1ca10:	movwne	r4, #366	; 0x16e
   1ca14:	add	r2, r4, r5
   1ca18:	movw	r4, #382	; 0x17e
   1ca1c:	sub	r3, r4, r8
   1ca20:	add	r2, r3, r2
   1ca24:	smmla	r2, r2, ip, r2
   1ca28:	asr	r4, r2, #2
   1ca2c:	add	r2, r4, r2, lsr #31
   1ca30:	rsb	r2, r2, r2, lsl #3
   1ca34:	sub	r2, r2, r3
   1ca38:	mvn	r3, #0
   1ca3c:	add	r4, r2, #3
   1ca40:	cmp	r1, #71	; 0x47
   1ca44:	bne	1be68 <__assert_fail@plt+0xa3dc>
   1ca48:	movw	r2, #63636	; 0xf894
   1ca4c:	mov	ip, #4
   1ca50:	movt	r2, #65535	; 0xffff
   1ca54:	sub	r6, r2, r3
   1ca58:	add	r3, lr, r3
   1ca5c:	mov	r2, #0
   1ca60:	cmp	lr, r6
   1ca64:	ldr	lr, [sp, #92]	; 0x5c
   1ca68:	movw	r6, #1900	; 0x76c
   1ca6c:	movwlt	r2, #1
   1ca70:	add	r3, r3, r6
   1ca74:	b	1ced4 <__assert_fail@plt+0xb448>
   1ca78:	smmla	r2, r4, ip, r4
   1ca7c:	ldr	lr, [sp, #92]	; 0x5c
   1ca80:	mov	ip, #2
   1ca84:	asr	r3, r2, #2
   1ca88:	add	r2, r3, r2, lsr #31
   1ca8c:	add	r3, r2, #1
   1ca90:	b	1c374 <__assert_fail@plt+0xa8e8>
   1ca94:	ldr	r2, [sp, #88]	; 0x58
   1ca98:	movw	r5, #63636	; 0xf894
   1ca9c:	mov	r3, #0
   1caa0:	mvn	r4, #98	; 0x62
   1caa4:	mov	ip, #2
   1caa8:	movt	r5, #65535	; 0xffff
   1caac:	ldr	r6, [r2, #20]
   1cab0:	mov	r2, #0
   1cab4:	cmp	r6, r5
   1cab8:	movwge	r3, #1
   1cabc:	cmp	r6, r5
   1cac0:	and	r3, r3, r6, lsr #31
   1cac4:	movwlt	r2, #1
   1cac8:	smlabb	r3, r3, r4, r6
   1cacc:	movw	r4, #34079	; 0x851f
   1cad0:	movt	r4, #20971	; 0x51eb
   1cad4:	smmul	r3, r3, r4
   1cad8:	asr	r4, r3, #5
   1cadc:	add	r3, r4, r3, lsr #31
   1cae0:	add	r3, r3, #19
   1cae4:	b	1ced4 <__assert_fail@plt+0xb448>
   1cae8:	cmp	r4, #1
   1caec:	blt	1cb20 <__assert_fail@plt+0xb094>
   1caf0:	smmul	r3, r1, r2
   1caf4:	cmp	r0, #0
   1caf8:	asr	r6, r3, #2
   1cafc:	add	r3, r6, r3, lsr #31
   1cb00:	add	r6, r3, r3, lsl #2
   1cb04:	sub	r1, r1, r6, lsl #1
   1cb08:	add	r1, r1, #48	; 0x30
   1cb0c:	strb	r1, [r8, r0]
   1cb10:	sub	r1, r0, #1
   1cb14:	mov	r0, r1
   1cb18:	mov	r1, r3
   1cb1c:	bgt	1caf0 <__assert_fail@plt+0xb064>
   1cb20:	ldr	r0, [sp, #104]	; 0x68
   1cb24:	cmp	r9, #0
   1cb28:	movweq	r9, #48	; 0x30
   1cb2c:	sub	r8, r0, lr
   1cb30:	cmp	r4, r8
   1cb34:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1cb38:	mov	r2, #0
   1cb3c:	cmp	ip, #0
   1cb40:	mov	r5, #0
   1cb44:	beq	1cf70 <__assert_fail@plt+0xb4e4>
   1cb48:	ldr	r0, [sp, #96]	; 0x60
   1cb4c:	tst	r0, #1
   1cb50:	beq	1cf48 <__assert_fail@plt+0xb4bc>
   1cb54:	cmp	r4, #0
   1cb58:	beq	1cf68 <__assert_fail@plt+0xb4dc>
   1cb5c:	mov	r5, lr
   1cb60:	mov	r6, ip
   1cb64:	bl	1184c <__ctype_toupper_loc@plt>
   1cb68:	mov	ip, r6
   1cb6c:	tst	r4, #1
   1cb70:	mov	r1, r4
   1cb74:	beq	1cb98 <__assert_fail@plt+0xb10c>
   1cb78:	ldr	r1, [sp, #24]
   1cb7c:	ldr	r2, [r0]
   1cb80:	add	r1, r1, r4
   1cb84:	ldrb	r1, [r1, #-9]
   1cb88:	ldr	r1, [r2, r1, lsl #2]
   1cb8c:	add	r2, ip, r4
   1cb90:	strb	r1, [r2, #-1]
   1cb94:	sub	r1, r4, #1
   1cb98:	ldr	r6, [sp, #28]
   1cb9c:	cmp	r4, #1
   1cba0:	mov	lr, r5
   1cba4:	beq	1cf68 <__assert_fail@plt+0xb4dc>
   1cba8:	sub	r2, ip, #2
   1cbac:	add	r3, r6, r1
   1cbb0:	ldr	r5, [r0]
   1cbb4:	ldrb	r3, [r3, #1]
   1cbb8:	ldr	r3, [r5, r3, lsl #2]
   1cbbc:	add	r5, r2, r1
   1cbc0:	strb	r3, [r5, #1]
   1cbc4:	ldrb	r3, [r6, r1]
   1cbc8:	ldr	r5, [r0]
   1cbcc:	ldr	r3, [r5, r3, lsl #2]
   1cbd0:	strb	r3, [r2, r1]
   1cbd4:	subs	r1, r1, #2
   1cbd8:	bne	1cbac <__assert_fail@plt+0xb120>
   1cbdc:	b	1cf68 <__assert_fail@plt+0xb4dc>
   1cbe0:	mov	r5, #0
   1cbe4:	mov	r1, #120	; 0x78
   1cbe8:	b	1d174 <__assert_fail@plt+0xb6e8>
   1cbec:	ldr	r2, [sp, #88]	; 0x58
   1cbf0:	mov	ip, #2
   1cbf4:	ldr	r6, [r2, #20]
   1cbf8:	movw	r2, #34079	; 0x851f
   1cbfc:	movt	r2, #20971	; 0x51eb
   1cc00:	smmul	r2, r6, r2
   1cc04:	asr	r3, r2, #5
   1cc08:	add	r2, r3, r2, lsr #31
   1cc0c:	mov	r3, #100	; 0x64
   1cc10:	mls	r5, r2, r3, r6
   1cc14:	mov	r2, #0
   1cc18:	cmn	r5, #1
   1cc1c:	ble	1cec0 <__assert_fail@plt+0xb434>
   1cc20:	mov	r3, r5
   1cc24:	b	1ced4 <__assert_fail@plt+0xb448>
   1cc28:	subs	r0, r9, #45	; 0x2d
   1cc2c:	ldr	r1, [sp, #104]	; 0x68
   1cc30:	bicne	r0, r7, r7, asr #31
   1cc34:	cmp	r0, #1
   1cc38:	mov	r5, r0
   1cc3c:	movls	r5, #1
   1cc40:	sub	r1, r1, lr
   1cc44:	cmp	r5, r1
   1cc48:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1cc4c:	ldr	ip, [sp, #108]	; 0x6c
   1cc50:	mov	r8, #-2147483648	; 0x80000000
   1cc54:	cmp	ip, #0
   1cc58:	beq	1b960 <__assert_fail@plt+0x9ed4>
   1cc5c:	mov	r1, #37	; 0x25
   1cc60:	cmp	r0, #2
   1cc64:	bcc	1d3f4 <__assert_fail@plt+0xb968>
   1cc68:	uxtb	r1, r9
   1cc6c:	sub	r4, r0, #1
   1cc70:	cmp	r1, #48	; 0x30
   1cc74:	cmpne	r1, #43	; 0x2b
   1cc78:	bne	1d3c8 <__assert_fail@plt+0xb93c>
   1cc7c:	mov	r0, ip
   1cc80:	mov	r1, #48	; 0x30
   1cc84:	b	1d3d0 <__assert_fail@plt+0xb944>
   1cc88:	mov	ip, #0
   1cc8c:	b	1d084 <__assert_fail@plt+0xb5f8>
   1cc90:	ldr	r4, [sp, #96]	; 0x60
   1cc94:	ldr	r2, [sp, #40]	; 0x28
   1cc98:	mov	r3, r0
   1cc9c:	smmul	r6, r3, r1
   1cca0:	asr	r5, r6, #2
   1cca4:	add	r6, r5, r6, lsr #31
   1cca8:	add	r5, r6, r6, lsl #2
   1ccac:	rsb	r5, r3, r5, lsl #1
   1ccb0:	add	r3, r3, #9
   1ccb4:	cmp	r3, #18
   1ccb8:	mov	r3, r6
   1ccbc:	add	r5, r5, #48	; 0x30
   1ccc0:	strb	r5, [r2], #-1
   1ccc4:	bhi	1cc9c <__assert_fail@plt+0xb210>
   1ccc8:	ldr	lr, [sp, #92]	; 0x5c
   1cccc:	ldr	r3, [sp, #108]	; 0x6c
   1ccd0:	cmp	r7, #0
   1ccd4:	add	r8, r2, #1
   1ccd8:	mov	ip, r4
   1ccdc:	lsr	r2, r0, #31
   1cce0:	mov	r4, #0
   1cce4:	str	sl, [sp, #100]	; 0x64
   1cce8:	movwmi	r7, #1
   1ccec:	b	1c408 <__assert_fail@plt+0xa97c>
   1ccf0:	ldr	r3, [sp, #108]	; 0x6c
   1ccf4:	mov	r2, #1
   1ccf8:	cmp	r5, #3
   1ccfc:	bhi	1bf64 <__assert_fail@plt+0xa4d8>
   1cd00:	movw	ip, #34953	; 0x8889
   1cd04:	movt	ip, #34952	; 0x8888
   1cd08:	smmla	r6, lr, ip, lr
   1cd0c:	asr	r3, r6, #5
   1cd10:	add	r6, r3, r6, lsr #31
   1cd14:	smmla	r3, r6, ip, r6
   1cd18:	asr	r4, r3, #5
   1cd1c:	add	r3, r4, r3, lsr #31
   1cd20:	rsb	r3, r3, r3, lsl #4
   1cd24:	sub	ip, r6, r3, lsl #2
   1cd28:	movw	r3, #46021	; 0xb3c5
   1cd2c:	movt	r3, #37282	; 0x91a2
   1cd30:	smmla	r3, lr, r3, lr
   1cd34:	asr	r4, r3, #11
   1cd38:	add	r3, r4, r3, lsr #31
   1cd3c:	rsb	r4, r6, r6, lsl #4
   1cd40:	add	r6, pc, #4
   1cd44:	sub	r4, lr, r4, lsl #2
   1cd48:	ldr	pc, [r6, r5, lsl #2]
   1cd4c:	andeq	ip, r1, ip, asr sp
   1cd50:	andeq	sp, r1, ip, asr #2
   1cd54:	andeq	ip, r1, r8, lsr #30
   1cd58:	andeq	ip, r1, r0, lsr #30
   1cd5c:	mov	r6, #100	; 0x64
   1cd60:	mla	r3, r3, r6, ip
   1cd64:	mov	ip, #5
   1cd68:	mov	r4, #1
   1cd6c:	mov	r6, #0
   1cd70:	b	1d160 <__assert_fail@plt+0xb6d4>
   1cd74:	mov	r5, #0
   1cd78:	mov	r1, #89	; 0x59
   1cd7c:	b	1d174 <__assert_fail@plt+0xb6e8>
   1cd80:	ldr	r9, [sp, #32]
   1cd84:	mov	r0, r6
   1cd88:	tst	r0, #1
   1cd8c:	bne	1d00c <__assert_fail@plt+0xb580>
   1cd90:	ldr	r1, [sp, #96]	; 0x60
   1cd94:	eor	r0, r0, #1
   1cd98:	and	r0, r1, r0
   1cd9c:	tst	r0, #1
   1cda0:	beq	1cfbc <__assert_fail@plt+0xb530>
   1cda4:	cmp	r8, #0
   1cda8:	beq	1d080 <__assert_fail@plt+0xb5f4>
   1cdac:	mov	r5, ip
   1cdb0:	bl	1184c <__ctype_toupper_loc@plt>
   1cdb4:	mov	ip, r5
   1cdb8:	tst	r8, #1
   1cdbc:	mov	r1, r8
   1cdc0:	beq	1cddc <__assert_fail@plt+0xb350>
   1cdc4:	ldr	r2, [sp, #64]	; 0x40
   1cdc8:	sub	r1, r8, #1
   1cdcc:	ldr	r3, [r0]
   1cdd0:	ldrb	r2, [r2, r1]
   1cdd4:	ldr	r2, [r3, r2, lsl #2]
   1cdd8:	strb	r2, [ip, r1]
   1cddc:	cmp	r8, #1
   1cde0:	mov	lr, r7
   1cde4:	beq	1d080 <__assert_fail@plt+0xb5f4>
   1cde8:	add	r2, r9, r1
   1cdec:	ldr	r3, [r0]
   1cdf0:	ldrb	r2, [r2, #1]
   1cdf4:	ldr	r2, [r3, r2, lsl #2]
   1cdf8:	add	r3, ip, r1
   1cdfc:	strb	r2, [r3, #-1]
   1ce00:	ldrb	r2, [r9, r1]
   1ce04:	ldr	r7, [r0]
   1ce08:	subs	r1, r1, #2
   1ce0c:	ldr	r2, [r7, r2, lsl #2]
   1ce10:	strb	r2, [r3, #-2]
   1ce14:	bne	1cde8 <__assert_fail@plt+0xb35c>
   1ce18:	b	1d080 <__assert_fail@plt+0xb5f4>
   1ce1c:	mov	r0, r7
   1ce20:	mov	r1, #32
   1ce24:	ldr	r2, [sp, #96]	; 0x60
   1ce28:	bl	11918 <memset@plt>
   1ce2c:	ldr	r2, [sp, #96]	; 0x60
   1ce30:	ldr	r1, [sp, #20]
   1ce34:	ldr	r3, [sp, #88]	; 0x58
   1ce38:	ldr	r0, [sp, #100]	; 0x64
   1ce3c:	add	r7, r7, r2
   1ce40:	stm	sp, {r0, r9}
   1ce44:	ldr	r0, [fp, #20]
   1ce48:	mov	r2, r4
   1ce4c:	str	r8, [sp, #8]
   1ce50:	str	r0, [sp, #12]
   1ce54:	ldr	r0, [fp, #24]
   1ce58:	str	r0, [sp, #16]
   1ce5c:	mov	r0, r7
   1ce60:	bl	1b858 <__assert_fail@plt+0x9dcc>
   1ce64:	ldr	lr, [sp, #92]	; 0x5c
   1ce68:	mov	ip, r7
   1ce6c:	add	ip, r7, r6
   1ce70:	mov	r8, #-2147483648	; 0x80000000
   1ce74:	add	lr, r5, lr
   1ce78:	ldrb	r3, [sl, #1]!
   1ce7c:	mvn	r7, #0
   1ce80:	cmp	r3, #0
   1ce84:	bne	1b978 <__assert_fail@plt+0x9eec>
   1ce88:	b	1d420 <__assert_fail@plt+0xb994>
   1ce8c:	movw	r5, #63636	; 0xf894
   1ce90:	movt	r5, #65535	; 0xffff
   1ce94:	sub	r5, r5, r3
   1ce98:	add	r3, r4, #100	; 0x64
   1ce9c:	cmp	lr, r5
   1cea0:	ldr	lr, [sp, #92]	; 0x5c
   1cea4:	rsblt	r3, r4, #0
   1cea8:	b	1ced4 <__assert_fail@plt+0xb448>
   1ceac:	cmp	r7, #6
   1ceb0:	mov	r0, r7
   1ceb4:	movle	r0, #6
   1ceb8:	sub	r8, r0, #6
   1cebc:	b	1c0fc <__assert_fail@plt+0xa670>
   1cec0:	movw	r4, #63636	; 0xf894
   1cec4:	add	r3, r5, #100	; 0x64
   1cec8:	movt	r4, #65535	; 0xffff
   1cecc:	cmp	r6, r4
   1ced0:	rsblt	r3, r5, #0
   1ced4:	ldr	r4, [fp, #12]
   1ced8:	cmp	r9, #0
   1cedc:	mov	r6, #0
   1cee0:	moveq	r9, r4
   1cee4:	mov	r4, #0
   1cee8:	cmp	r9, #43	; 0x2b
   1ceec:	bne	1c388 <__assert_fail@plt+0xa8fc>
   1cef0:	cmp	ip, r7
   1cef4:	mov	r4, #0
   1cef8:	movw	r5, #9999	; 0x270f
   1cefc:	mov	r8, lr
   1cf00:	mov	lr, #0
   1cf04:	movwlt	r4, #1
   1cf08:	cmp	ip, #2
   1cf0c:	movweq	r5, #99	; 0x63
   1cf10:	cmp	r5, r3
   1cf14:	movwcc	lr, #1
   1cf18:	orr	r4, r4, lr
   1cf1c:	b	1d160 <__assert_fail@plt+0xb6d4>
   1cf20:	cmp	r4, #0
   1cf24:	beq	1d144 <__assert_fail@plt+0xb6b8>
   1cf28:	movw	r6, #10000	; 0x2710
   1cf2c:	mla	r3, r3, r6, r4
   1cf30:	mov	r6, #100	; 0x64
   1cf34:	mov	r4, #1
   1cf38:	mla	r3, ip, r6, r3
   1cf3c:	mov	ip, #9
   1cf40:	mov	r6, #20
   1cf44:	b	1d160 <__assert_fail@plt+0xb6d4>
   1cf48:	sub	r1, fp, #48	; 0x30
   1cf4c:	mov	r0, ip
   1cf50:	mov	r2, r4
   1cf54:	mov	r5, lr
   1cf58:	mov	r6, ip
   1cf5c:	bl	11708 <memcpy@plt>
   1cf60:	mov	ip, r6
   1cf64:	mov	lr, r5
   1cf68:	add	r5, ip, r4
   1cf6c:	mov	r2, #0
   1cf70:	cmp	r9, #45	; 0x2d
   1cf74:	subne	r0, r7, r4
   1cf78:	bicne	r2, r0, r0, asr #31
   1cf7c:	sub	r0, r8, r4
   1cf80:	cmp	r2, r0
   1cf84:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1cf88:	cmp	r5, #0
   1cf8c:	beq	1cfb4 <__assert_fail@plt+0xb528>
   1cf90:	cmp	r2, #0
   1cf94:	beq	1cfb4 <__assert_fail@plt+0xb528>
   1cf98:	uxtb	r0, r9
   1cf9c:	cmp	r0, #48	; 0x30
   1cfa0:	cmpne	r0, #43	; 0x2b
   1cfa4:	bne	1d118 <__assert_fail@plt+0xb68c>
   1cfa8:	mov	r0, r5
   1cfac:	mov	r1, #48	; 0x30
   1cfb0:	b	1d120 <__assert_fail@plt+0xb694>
   1cfb4:	mov	ip, r5
   1cfb8:	b	1d138 <__assert_fail@plt+0xb6ac>
   1cfbc:	ldr	r1, [sp, #64]	; 0x40
   1cfc0:	mov	r0, ip
   1cfc4:	mov	r2, r8
   1cfc8:	mov	r5, ip
   1cfcc:	bl	11708 <memcpy@plt>
   1cfd0:	mov	ip, r5
   1cfd4:	mov	lr, r7
   1cfd8:	b	1d080 <__assert_fail@plt+0xb5f4>
   1cfdc:	mov	r0, ip
   1cfe0:	mov	r1, #32
   1cfe4:	mov	r2, r5
   1cfe8:	mov	r9, ip
   1cfec:	bl	11918 <memset@plt>
   1cff0:	mov	ip, r9
   1cff4:	ldr	r9, [sp, #32]
   1cff8:	mov	r0, r6
   1cffc:	mov	lr, r7
   1d000:	add	ip, ip, r5
   1d004:	tst	r0, #1
   1d008:	beq	1cd90 <__assert_fail@plt+0xb304>
   1d00c:	cmp	r8, #0
   1d010:	beq	1d080 <__assert_fail@plt+0xb5f4>
   1d014:	mov	r5, ip
   1d018:	bl	11840 <__ctype_tolower_loc@plt>
   1d01c:	mov	ip, r5
   1d020:	tst	r8, #1
   1d024:	mov	r1, r8
   1d028:	beq	1d044 <__assert_fail@plt+0xb5b8>
   1d02c:	ldr	r2, [sp, #64]	; 0x40
   1d030:	sub	r1, r8, #1
   1d034:	ldr	r3, [r0]
   1d038:	ldrb	r2, [r2, r1]
   1d03c:	ldr	r2, [r3, r2, lsl #2]
   1d040:	strb	r2, [ip, r1]
   1d044:	cmp	r8, #1
   1d048:	mov	lr, r7
   1d04c:	beq	1d080 <__assert_fail@plt+0xb5f4>
   1d050:	add	r2, r9, r1
   1d054:	ldr	r3, [r0]
   1d058:	ldrb	r2, [r2, #1]
   1d05c:	ldr	r2, [r3, r2, lsl #2]
   1d060:	add	r3, ip, r1
   1d064:	strb	r2, [r3, #-1]
   1d068:	ldrb	r2, [r9, r1]
   1d06c:	ldr	r7, [r0]
   1d070:	subs	r1, r1, #2
   1d074:	ldr	r2, [r7, r2, lsl #2]
   1d078:	strb	r2, [r3, #-2]
   1d07c:	bne	1d050 <__assert_fail@plt+0xb5c4>
   1d080:	add	ip, ip, r8
   1d084:	mov	r8, #-2147483648	; 0x80000000
   1d088:	add	lr, r4, lr
   1d08c:	ldrb	r3, [sl, #1]!
   1d090:	mvn	r7, #0
   1d094:	cmp	r3, #0
   1d098:	bne	1b978 <__assert_fail@plt+0x9eec>
   1d09c:	b	1d420 <__assert_fail@plt+0xb994>
   1d0a0:	mov	r0, ip
   1d0a4:	mov	r1, #32
   1d0a8:	mov	r2, r4
   1d0ac:	mov	r6, lr
   1d0b0:	mov	r7, ip
   1d0b4:	bl	11918 <memset@plt>
   1d0b8:	mov	ip, r7
   1d0bc:	mov	lr, r6
   1d0c0:	add	ip, r7, r4
   1d0c4:	mov	r8, #-2147483648	; 0x80000000
   1d0c8:	mov	r0, #10
   1d0cc:	b	1d0fc <__assert_fail@plt+0xb670>
   1d0d0:	mov	r0, ip
   1d0d4:	mov	r1, #32
   1d0d8:	mov	r2, r4
   1d0dc:	mov	r6, lr
   1d0e0:	mov	r7, ip
   1d0e4:	bl	11918 <memset@plt>
   1d0e8:	mov	ip, r7
   1d0ec:	mov	lr, r6
   1d0f0:	add	ip, r7, r4
   1d0f4:	mov	r8, #-2147483648	; 0x80000000
   1d0f8:	mov	r0, #9
   1d0fc:	strb	r0, [ip], #1
   1d100:	add	lr, r5, lr
   1d104:	ldrb	r3, [sl, #1]!
   1d108:	mvn	r7, #0
   1d10c:	cmp	r3, #0
   1d110:	bne	1b978 <__assert_fail@plt+0x9eec>
   1d114:	b	1d420 <__assert_fail@plt+0xb994>
   1d118:	mov	r0, r5
   1d11c:	mov	r1, #32
   1d120:	mov	r7, r2
   1d124:	mov	r6, lr
   1d128:	bl	11918 <memset@plt>
   1d12c:	mov	r2, r7
   1d130:	mov	lr, r6
   1d134:	add	ip, r5, r7
   1d138:	add	r0, r2, lr
   1d13c:	add	lr, r0, r4
   1d140:	b	1c7ec <__assert_fail@plt+0xad60>
   1d144:	cmp	ip, #0
   1d148:	beq	1d410 <__assert_fail@plt+0xb984>
   1d14c:	mov	r6, #100	; 0x64
   1d150:	mov	r4, #1
   1d154:	mla	r3, r3, r6, ip
   1d158:	mov	ip, #6
   1d15c:	mov	r6, #4
   1d160:	mov	lr, r8
   1d164:	cmp	r0, #79	; 0x4f
   1d168:	moveq	r5, #0
   1d16c:	cmpeq	r2, #0
   1d170:	bne	1c398 <__assert_fail@plt+0xa90c>
   1d174:	movw	r2, #9504	; 0x2520
   1d178:	cmp	r0, #0
   1d17c:	ldr	r3, [sp, #88]	; 0x58
   1d180:	str	lr, [sp, #92]	; 0x5c
   1d184:	strh	r2, [fp, #-53]	; 0xffffffcb
   1d188:	ldr	r2, [sp, #84]	; 0x54
   1d18c:	ldrne	r2, [sp, #68]	; 0x44
   1d190:	strbne	r0, [fp, #-51]	; 0xffffffcd
   1d194:	mov	r0, #0
   1d198:	strb	r0, [r2, #1]
   1d19c:	strb	r1, [r2]
   1d1a0:	add	r0, sp, #112	; 0x70
   1d1a4:	sub	r2, fp, #53	; 0x35
   1d1a8:	mov	r1, #1024	; 0x400
   1d1ac:	bl	11828 <strftime@plt>
   1d1b0:	cmp	r0, #0
   1d1b4:	beq	1d224 <__assert_fail@plt+0xb798>
   1d1b8:	subs	r4, r9, #45	; 0x2d
   1d1bc:	mov	r6, r0
   1d1c0:	sub	r8, r0, #1
   1d1c4:	ldr	lr, [sp, #92]	; 0x5c
   1d1c8:	ldr	r0, [sp, #104]	; 0x68
   1d1cc:	movne	r4, r7
   1d1d0:	cmp	r7, #0
   1d1d4:	mov	r7, r8
   1d1d8:	movwmi	r4, #0
   1d1dc:	cmp	r4, r8
   1d1e0:	movhi	r7, r4
   1d1e4:	sub	r0, r0, lr
   1d1e8:	cmp	r7, r0
   1d1ec:	bcs	1d44c <__assert_fail@plt+0xb9c0>
   1d1f0:	ldr	r0, [sp, #108]	; 0x6c
   1d1f4:	cmp	r0, #0
   1d1f8:	beq	1d244 <__assert_fail@plt+0xb7b8>
   1d1fc:	cmp	r4, r8
   1d200:	mov	r2, r0
   1d204:	bls	1d268 <__assert_fail@plt+0xb7dc>
   1d208:	cmp	r9, #48	; 0x30
   1d20c:	sub	r2, r4, r8
   1d210:	cmpne	r9, #43	; 0x2b
   1d214:	str	r2, [sp, #100]	; 0x64
   1d218:	bne	1d24c <__assert_fail@plt+0xb7c0>
   1d21c:	mov	r1, #48	; 0x30
   1d220:	b	1d250 <__assert_fail@plt+0xb7c4>
   1d224:	ldr	lr, [sp, #92]	; 0x5c
   1d228:	ldr	ip, [sp, #108]	; 0x6c
   1d22c:	mov	r8, #-2147483648	; 0x80000000
   1d230:	ldrb	r3, [sl, #1]!
   1d234:	mvn	r7, #0
   1d238:	cmp	r3, #0
   1d23c:	bne	1b978 <__assert_fail@plt+0x9eec>
   1d240:	b	1d420 <__assert_fail@plt+0xb994>
   1d244:	mov	ip, #0
   1d248:	b	1d3ac <__assert_fail@plt+0xb920>
   1d24c:	mov	r1, #32
   1d250:	mov	r9, r0
   1d254:	bl	11918 <memset@plt>
   1d258:	ldr	r0, [sp, #100]	; 0x64
   1d25c:	ldr	lr, [sp, #92]	; 0x5c
   1d260:	add	r2, r9, r0
   1d264:	mov	r0, r9
   1d268:	tst	r5, #1
   1d26c:	str	r2, [sp, #100]	; 0x64
   1d270:	beq	1d2fc <__assert_fail@plt+0xb870>
   1d274:	cmp	r8, #0
   1d278:	beq	1d3a4 <__assert_fail@plt+0xb918>
   1d27c:	mov	r5, r0
   1d280:	bl	11840 <__ctype_tolower_loc@plt>
   1d284:	add	ip, sp, #112	; 0x70
   1d288:	tst	r8, #1
   1d28c:	mov	r1, r8
   1d290:	beq	1d2ac <__assert_fail@plt+0xb820>
   1d294:	ldrb	r1, [ip, r8]
   1d298:	ldr	r2, [r0]
   1d29c:	ldr	r3, [sp, #100]	; 0x64
   1d2a0:	ldr	r2, [r2, r1, lsl #2]
   1d2a4:	sub	r1, r6, #2
   1d2a8:	strb	r2, [r3, r1]
   1d2ac:	ldr	lr, [sp, #92]	; 0x5c
   1d2b0:	cmp	r6, #2
   1d2b4:	beq	1d3a4 <__assert_fail@plt+0xb918>
   1d2b8:	cmp	r4, r8
   1d2bc:	movls	r4, r8
   1d2c0:	sub	r2, r4, r6
   1d2c4:	add	r5, r5, r2
   1d2c8:	ldrb	r3, [ip, r1]
   1d2cc:	ldr	r6, [r0]
   1d2d0:	mov	r2, r5
   1d2d4:	ldr	r3, [r6, r3, lsl #2]
   1d2d8:	strb	r3, [r2, r1]!
   1d2dc:	add	r3, ip, r1
   1d2e0:	subs	r1, r1, #2
   1d2e4:	ldrb	r3, [r3, #-1]
   1d2e8:	ldr	r6, [r0]
   1d2ec:	ldr	r3, [r6, r3, lsl #2]
   1d2f0:	strb	r3, [r2, #-1]
   1d2f4:	bne	1d2c8 <__assert_fail@plt+0xb83c>
   1d2f8:	b	1d3a4 <__assert_fail@plt+0xb918>
   1d2fc:	ldr	r1, [sp, #96]	; 0x60
   1d300:	tst	r1, #1
   1d304:	beq	1d390 <__assert_fail@plt+0xb904>
   1d308:	cmp	r8, #0
   1d30c:	beq	1d3a4 <__assert_fail@plt+0xb918>
   1d310:	mov	r5, r0
   1d314:	bl	1184c <__ctype_toupper_loc@plt>
   1d318:	add	ip, sp, #112	; 0x70
   1d31c:	tst	r8, #1
   1d320:	mov	r1, r8
   1d324:	beq	1d340 <__assert_fail@plt+0xb8b4>
   1d328:	ldrb	r1, [ip, r8]
   1d32c:	ldr	r2, [r0]
   1d330:	ldr	r3, [sp, #100]	; 0x64
   1d334:	ldr	r2, [r2, r1, lsl #2]
   1d338:	sub	r1, r6, #2
   1d33c:	strb	r2, [r3, r1]
   1d340:	ldr	lr, [sp, #92]	; 0x5c
   1d344:	cmp	r6, #2
   1d348:	beq	1d3a4 <__assert_fail@plt+0xb918>
   1d34c:	cmp	r4, r8
   1d350:	movls	r4, r8
   1d354:	sub	r2, r4, r6
   1d358:	add	r5, r5, r2
   1d35c:	ldrb	r3, [ip, r1]
   1d360:	ldr	r6, [r0]
   1d364:	mov	r2, r5
   1d368:	ldr	r3, [r6, r3, lsl #2]
   1d36c:	strb	r3, [r2, r1]!
   1d370:	add	r3, ip, r1
   1d374:	subs	r1, r1, #2
   1d378:	ldrb	r3, [r3, #-1]
   1d37c:	ldr	r6, [r0]
   1d380:	ldr	r3, [r6, r3, lsl #2]
   1d384:	strb	r3, [r2, #-1]
   1d388:	bne	1d35c <__assert_fail@plt+0xb8d0>
   1d38c:	b	1d3a4 <__assert_fail@plt+0xb918>
   1d390:	ldr	r1, [sp, #48]	; 0x30
   1d394:	mov	r0, r2
   1d398:	mov	r2, r8
   1d39c:	bl	11708 <memcpy@plt>
   1d3a0:	ldr	lr, [sp, #92]	; 0x5c
   1d3a4:	ldr	r0, [sp, #100]	; 0x64
   1d3a8:	add	ip, r0, r8
   1d3ac:	mov	r8, #-2147483648	; 0x80000000
   1d3b0:	add	lr, r7, lr
   1d3b4:	ldrb	r3, [sl, #1]!
   1d3b8:	mvn	r7, #0
   1d3bc:	cmp	r3, #0
   1d3c0:	bne	1b978 <__assert_fail@plt+0x9eec>
   1d3c4:	b	1d420 <__assert_fail@plt+0xb994>
   1d3c8:	mov	r0, ip
   1d3cc:	mov	r1, #32
   1d3d0:	mov	r2, r4
   1d3d4:	mov	r6, lr
   1d3d8:	mov	r7, ip
   1d3dc:	bl	11918 <memset@plt>
   1d3e0:	ldrb	r1, [sl]
   1d3e4:	mov	ip, r7
   1d3e8:	mov	lr, r6
   1d3ec:	add	ip, r7, r4
   1d3f0:	mov	r8, #-2147483648	; 0x80000000
   1d3f4:	strb	r1, [ip], #1
   1d3f8:	add	lr, r5, lr
   1d3fc:	ldrb	r3, [sl, #1]!
   1d400:	mvn	r7, #0
   1d404:	cmp	r3, #0
   1d408:	bne	1b978 <__assert_fail@plt+0x9eec>
   1d40c:	b	1d420 <__assert_fail@plt+0xb994>
   1d410:	mov	ip, #3
   1d414:	b	1cd68 <__assert_fail@plt+0xb2dc>
   1d418:	ldr	ip, [sp, #108]	; 0x6c
   1d41c:	mov	lr, #0
   1d420:	ldr	r0, [sp, #104]	; 0x68
   1d424:	ldr	r1, [sp, #72]	; 0x48
   1d428:	cmp	r0, #0
   1d42c:	cmpne	ip, #0
   1d430:	movne	r0, #0
   1d434:	strbne	r0, [ip]
   1d438:	ldr	r0, [sp, #76]	; 0x4c
   1d43c:	str	r1, [r0]
   1d440:	mov	r0, lr
   1d444:	sub	sp, fp, #28
   1d448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d44c:	mov	r0, #34	; 0x22
   1d450:	ldr	r1, [sp, #76]	; 0x4c
   1d454:	mov	lr, #0
   1d458:	str	r0, [r1]
   1d45c:	mov	r0, lr
   1d460:	sub	sp, fp, #28
   1d464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d468:	mov	r0, #75	; 0x4b
   1d46c:	b	1d450 <__assert_fail@plt+0xb9c4>
   1d470:	push	{r4, r5, fp, lr}
   1d474:	add	fp, sp, #8
   1d478:	cmp	r0, #0
   1d47c:	beq	1d510 <__assert_fail@plt+0xba84>
   1d480:	mov	r1, #47	; 0x2f
   1d484:	mov	r4, r0
   1d488:	bl	119a8 <strrchr@plt>
   1d48c:	cmp	r0, #0
   1d490:	mov	r5, r4
   1d494:	addne	r5, r0, #1
   1d498:	sub	r0, r5, r4
   1d49c:	cmp	r0, #7
   1d4a0:	blt	1d4f4 <__assert_fail@plt+0xba68>
   1d4a4:	movw	r1, #16829	; 0x41bd
   1d4a8:	sub	r0, r5, #7
   1d4ac:	mov	r2, #7
   1d4b0:	movt	r1, #2
   1d4b4:	bl	11a50 <strncmp@plt>
   1d4b8:	cmp	r0, #0
   1d4bc:	bne	1d4f4 <__assert_fail@plt+0xba68>
   1d4c0:	movw	r1, #16837	; 0x41c5
   1d4c4:	mov	r0, r5
   1d4c8:	mov	r2, #3
   1d4cc:	movt	r1, #2
   1d4d0:	bl	11a50 <strncmp@plt>
   1d4d4:	cmp	r0, #0
   1d4d8:	beq	1d4e4 <__assert_fail@plt+0xba58>
   1d4dc:	mov	r4, r5
   1d4e0:	b	1d4f4 <__assert_fail@plt+0xba68>
   1d4e4:	movw	r0, #20944	; 0x51d0
   1d4e8:	add	r4, r5, #3
   1d4ec:	movt	r0, #3
   1d4f0:	str	r4, [r0]
   1d4f4:	movw	r0, #20948	; 0x51d4
   1d4f8:	movt	r0, #3
   1d4fc:	str	r4, [r0]
   1d500:	movw	r0, #21108	; 0x5274
   1d504:	movt	r0, #3
   1d508:	str	r4, [r0]
   1d50c:	pop	{r4, r5, fp, pc}
   1d510:	movw	r0, #20960	; 0x51e0
   1d514:	mov	r1, #55	; 0x37
   1d518:	mov	r2, #1
   1d51c:	movt	r0, #3
   1d520:	ldr	r3, [r0]
   1d524:	movw	r0, #16773	; 0x4185
   1d528:	movt	r0, #2
   1d52c:	bl	1178c <fwrite@plt>
   1d530:	bl	11a5c <abort@plt>
   1d534:	push	{r4, r5, r6, sl, fp, lr}
   1d538:	add	fp, sp, #16
   1d53c:	mov	r4, r0
   1d540:	movw	r0, #21112	; 0x5278
   1d544:	movt	r0, #3
   1d548:	cmp	r4, #0
   1d54c:	moveq	r4, r0
   1d550:	bl	118e8 <__errno_location@plt>
   1d554:	ldr	r6, [r0]
   1d558:	mov	r5, r0
   1d55c:	mov	r0, r4
   1d560:	mov	r1, #48	; 0x30
   1d564:	bl	20900 <__assert_fail@plt+0xee74>
   1d568:	str	r6, [r5]
   1d56c:	pop	{r4, r5, r6, sl, fp, pc}
   1d570:	movw	r1, #21112	; 0x5278
   1d574:	cmp	r0, #0
   1d578:	movt	r1, #3
   1d57c:	movne	r1, r0
   1d580:	ldr	r0, [r1]
   1d584:	bx	lr
   1d588:	movw	r2, #21112	; 0x5278
   1d58c:	cmp	r0, #0
   1d590:	movt	r2, #3
   1d594:	movne	r2, r0
   1d598:	str	r1, [r2]
   1d59c:	bx	lr
   1d5a0:	movw	r3, #21112	; 0x5278
   1d5a4:	cmp	r0, #0
   1d5a8:	and	r2, r2, #1
   1d5ac:	movt	r3, #3
   1d5b0:	movne	r3, r0
   1d5b4:	ubfx	r0, r1, #5, #3
   1d5b8:	and	r1, r1, #31
   1d5bc:	add	ip, r3, r0, lsl #2
   1d5c0:	mov	r0, #1
   1d5c4:	ldr	r3, [ip, #8]
   1d5c8:	and	r0, r0, r3, lsr r1
   1d5cc:	eor	r2, r0, r2
   1d5d0:	eor	r1, r3, r2, lsl r1
   1d5d4:	str	r1, [ip, #8]
   1d5d8:	bx	lr
   1d5dc:	movw	r2, #21112	; 0x5278
   1d5e0:	cmp	r0, #0
   1d5e4:	movt	r2, #3
   1d5e8:	movne	r2, r0
   1d5ec:	ldr	r0, [r2, #4]
   1d5f0:	str	r1, [r2, #4]
   1d5f4:	bx	lr
   1d5f8:	push	{fp, lr}
   1d5fc:	mov	fp, sp
   1d600:	movw	r3, #21112	; 0x5278
   1d604:	cmp	r0, #0
   1d608:	movt	r3, #3
   1d60c:	movne	r3, r0
   1d610:	cmp	r1, #0
   1d614:	mov	r0, #10
   1d618:	cmpne	r2, #0
   1d61c:	str	r0, [r3]
   1d620:	bne	1d628 <__assert_fail@plt+0xbb9c>
   1d624:	bl	11a5c <abort@plt>
   1d628:	str	r1, [r3, #40]	; 0x28
   1d62c:	str	r2, [r3, #44]	; 0x2c
   1d630:	pop	{fp, pc}
   1d634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d638:	add	fp, sp, #28
   1d63c:	sub	sp, sp, #20
   1d640:	mov	r7, r0
   1d644:	ldr	r0, [fp, #8]
   1d648:	movw	r5, #21112	; 0x5278
   1d64c:	mov	r8, r3
   1d650:	mov	r9, r2
   1d654:	mov	sl, r1
   1d658:	movt	r5, #3
   1d65c:	cmp	r0, #0
   1d660:	movne	r5, r0
   1d664:	bl	118e8 <__errno_location@plt>
   1d668:	ldr	r2, [r5, #40]	; 0x28
   1d66c:	ldr	r3, [r5, #44]	; 0x2c
   1d670:	mov	r4, r0
   1d674:	ldm	r5, {r0, r1}
   1d678:	add	r5, r5, #8
   1d67c:	ldr	r6, [r4]
   1d680:	stm	sp, {r0, r1, r5}
   1d684:	mov	r0, r7
   1d688:	mov	r1, sl
   1d68c:	str	r2, [sp, #12]
   1d690:	str	r3, [sp, #16]
   1d694:	mov	r2, r9
   1d698:	mov	r3, r8
   1d69c:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1d6a0:	str	r6, [r4]
   1d6a4:	sub	sp, fp, #28
   1d6a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d6ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6b0:	add	fp, sp, #28
   1d6b4:	sub	sp, sp, #156	; 0x9c
   1d6b8:	str	r0, [fp, #-84]	; 0xffffffac
   1d6bc:	add	r0, r2, #1
   1d6c0:	mov	r6, r1
   1d6c4:	mov	r7, r3
   1d6c8:	str	r2, [fp, #-80]	; 0xffffffb0
   1d6cc:	str	r0, [sp, #80]	; 0x50
   1d6d0:	ldr	r0, [fp, #12]
   1d6d4:	and	r1, r0, #1
   1d6d8:	str	r1, [sp, #36]	; 0x24
   1d6dc:	and	r1, r0, #4
   1d6e0:	str	r1, [sp, #32]
   1d6e4:	ubfx	r8, r0, #1, #1
   1d6e8:	bl	117a4 <__ctype_get_mb_cur_max@plt>
   1d6ec:	str	r0, [sp, #40]	; 0x28
   1d6f0:	ldr	r0, [fp, #24]
   1d6f4:	ldr	r4, [fp, #8]
   1d6f8:	mov	r1, #0
   1d6fc:	str	r1, [fp, #-52]	; 0xffffffcc
   1d700:	mov	r1, #0
   1d704:	str	r1, [sp, #60]	; 0x3c
   1d708:	mov	r1, #1
   1d70c:	str	r1, [sp, #84]	; 0x54
   1d710:	str	r0, [sp, #76]	; 0x4c
   1d714:	ldr	r0, [fp, #20]
   1d718:	str	r0, [sp, #72]	; 0x48
   1d71c:	mov	r0, #0
   1d720:	str	r0, [sp, #56]	; 0x38
   1d724:	mov	r0, #0
   1d728:	str	r0, [fp, #-88]	; 0xffffffa8
   1d72c:	mov	r0, #0
   1d730:	str	r0, [fp, #-72]	; 0xffffffb8
   1d734:	mov	r0, #0
   1d738:	cmp	r4, #10
   1d73c:	bhi	1ea58 <__assert_fail@plt+0xcfcc>
   1d740:	add	r1, pc, #24
   1d744:	ldr	ip, [fp, #-84]	; 0xffffffac
   1d748:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1d74c:	mov	r5, r6
   1d750:	mov	r9, #0
   1d754:	mov	r2, #1
   1d758:	mov	r3, #0
   1d75c:	ldr	pc, [r1, r4, lsl #2]
   1d760:	andeq	sp, r1, r8, lsr #16
   1d764:	andeq	sp, r1, r4, ror #16
   1d768:	andeq	sp, r1, r8, lsr r8
   1d76c:	andeq	sp, r1, r0, lsr #16
   1d770:	andeq	sp, r1, r8, asr r8
   1d774:			; <UNDEFINED> instruction: 0x0001d8bc
   1d778:	andeq	sp, r1, r8, asr #16
   1d77c:	andeq	sp, r1, r4, lsr fp
   1d780:	andeq	sp, r1, ip, lsl #15
   1d784:	andeq	sp, r1, ip, lsl #15
   1d788:	andeq	sp, r1, r4, asr #19
   1d78c:	movw	r6, #16919	; 0x4217
   1d790:	mov	r0, #0
   1d794:	mov	r2, #5
   1d798:	movt	r6, #2
   1d79c:	mov	r1, r6
   1d7a0:	bl	11720 <dcgettext@plt>
   1d7a4:	cmp	r0, r6
   1d7a8:	str	r0, [sp, #72]	; 0x48
   1d7ac:	bne	1d99c <__assert_fail@plt+0xbf10>
   1d7b0:	bl	21e7c <__assert_fail@plt+0x103f0>
   1d7b4:	ldrb	r1, [r0]
   1d7b8:	and	r1, r1, #223	; 0xdf
   1d7bc:	cmp	r1, #71	; 0x47
   1d7c0:	beq	1d91c <__assert_fail@plt+0xbe90>
   1d7c4:	cmp	r1, #85	; 0x55
   1d7c8:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d7cc:	ldrb	r1, [r0, #1]
   1d7d0:	and	r1, r1, #223	; 0xdf
   1d7d4:	cmp	r1, #84	; 0x54
   1d7d8:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d7dc:	ldrb	r1, [r0, #2]
   1d7e0:	and	r1, r1, #223	; 0xdf
   1d7e4:	cmp	r1, #70	; 0x46
   1d7e8:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d7ec:	ldrb	r1, [r0, #3]
   1d7f0:	cmp	r1, #45	; 0x2d
   1d7f4:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d7f8:	ldrb	r1, [r0, #4]
   1d7fc:	cmp	r1, #56	; 0x38
   1d800:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d804:	ldrb	r0, [r0, #5]
   1d808:	cmp	r0, #0
   1d80c:	movw	r0, #16921	; 0x4219
   1d810:	movt	r0, #2
   1d814:	str	r0, [sp, #72]	; 0x48
   1d818:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d81c:	b	1d99c <__assert_fail@plt+0xbf10>
   1d820:	mov	r0, #1
   1d824:	b	1d864 <__assert_fail@plt+0xbdd8>
   1d828:	mov	r4, #0
   1d82c:	mov	r9, #0
   1d830:	mov	r2, r0
   1d834:	b	1d8b4 <__assert_fail@plt+0xbe28>
   1d838:	tst	r8, #1
   1d83c:	bne	1d864 <__assert_fail@plt+0xbdd8>
   1d840:	mov	r2, r0
   1d844:	b	1d88c <__assert_fail@plt+0xbe00>
   1d848:	mov	r0, #1
   1d84c:	mov	r9, #0
   1d850:	mov	r4, #5
   1d854:	b	1d8d0 <__assert_fail@plt+0xbe44>
   1d858:	mov	r2, #1
   1d85c:	tst	r8, #1
   1d860:	beq	1d88c <__assert_fail@plt+0xbe00>
   1d864:	mov	r1, #1
   1d868:	mov	r9, #0
   1d86c:	mov	r4, #2
   1d870:	mov	r2, r0
   1d874:	mov	r3, #1
   1d878:	str	r1, [fp, #-72]	; 0xffffffb8
   1d87c:	movw	r1, #17901	; 0x45ed
   1d880:	movt	r1, #2
   1d884:	str	r1, [fp, #-88]	; 0xffffffa8
   1d888:	b	1db34 <__assert_fail@plt+0xc0a8>
   1d88c:	cmp	r5, #0
   1d890:	mov	r9, #1
   1d894:	mov	r4, #2
   1d898:	movne	r0, #39	; 0x27
   1d89c:	strbne	r0, [ip]
   1d8a0:	movw	r0, #17901	; 0x45ed
   1d8a4:	movt	r0, #2
   1d8a8:	str	r0, [fp, #-88]	; 0xffffffa8
   1d8ac:	mov	r0, #1
   1d8b0:	str	r0, [fp, #-72]	; 0xffffffb8
   1d8b4:	mov	r3, #0
   1d8b8:	b	1db34 <__assert_fail@plt+0xc0a8>
   1d8bc:	mov	r4, #5
   1d8c0:	tst	r8, #1
   1d8c4:	beq	1d8ec <__assert_fail@plt+0xbe60>
   1d8c8:	mov	r0, #1
   1d8cc:	mov	r9, #0
   1d8d0:	str	r0, [fp, #-72]	; 0xffffffb8
   1d8d4:	movw	r0, #16917	; 0x4215
   1d8d8:	mov	r2, #1
   1d8dc:	mov	r3, #1
   1d8e0:	movt	r0, #2
   1d8e4:	str	r0, [fp, #-88]	; 0xffffffa8
   1d8e8:	b	1db34 <__assert_fail@plt+0xc0a8>
   1d8ec:	cmp	r5, #0
   1d8f0:	mov	r3, #0
   1d8f4:	mov	r9, #1
   1d8f8:	mov	r2, #1
   1d8fc:	movne	r0, #34	; 0x22
   1d900:	strbne	r0, [ip]
   1d904:	movw	r0, #16917	; 0x4215
   1d908:	movt	r0, #2
   1d90c:	str	r0, [fp, #-88]	; 0xffffffa8
   1d910:	mov	r0, #1
   1d914:	str	r0, [fp, #-72]	; 0xffffffb8
   1d918:	b	1db34 <__assert_fail@plt+0xc0a8>
   1d91c:	ldrb	r1, [r0, #1]
   1d920:	and	r1, r1, #223	; 0xdf
   1d924:	cmp	r1, #66	; 0x42
   1d928:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d92c:	ldrb	r1, [r0, #2]
   1d930:	cmp	r1, #49	; 0x31
   1d934:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d938:	ldrb	r1, [r0, #3]
   1d93c:	cmp	r1, #56	; 0x38
   1d940:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d944:	ldrb	r1, [r0, #4]
   1d948:	cmp	r1, #48	; 0x30
   1d94c:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d950:	ldrb	r1, [r0, #5]
   1d954:	cmp	r1, #51	; 0x33
   1d958:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d95c:	ldrb	r1, [r0, #6]
   1d960:	cmp	r1, #48	; 0x30
   1d964:	bne	1d980 <__assert_fail@plt+0xbef4>
   1d968:	ldrb	r0, [r0, #7]
   1d96c:	cmp	r0, #0
   1d970:	movw	r0, #16929	; 0x4221
   1d974:	movt	r0, #2
   1d978:	str	r0, [sp, #72]	; 0x48
   1d97c:	beq	1d99c <__assert_fail@plt+0xbf10>
   1d980:	movw	r1, #16917	; 0x4215
   1d984:	movw	r0, #17901	; 0x45ed
   1d988:	cmp	r4, #9
   1d98c:	movt	r1, #2
   1d990:	movt	r0, #2
   1d994:	moveq	r0, r1
   1d998:	str	r0, [sp, #72]	; 0x48
   1d99c:	movw	r6, #17901	; 0x45ed
   1d9a0:	mov	r0, #0
   1d9a4:	mov	r2, #5
   1d9a8:	movt	r6, #2
   1d9ac:	mov	r1, r6
   1d9b0:	bl	11720 <dcgettext@plt>
   1d9b4:	cmp	r0, r6
   1d9b8:	str	r0, [sp, #76]	; 0x4c
   1d9bc:	beq	1da08 <__assert_fail@plt+0xbf7c>
   1d9c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1d9c4:	mov	r9, #0
   1d9c8:	tst	r8, #1
   1d9cc:	bne	1db10 <__assert_fail@plt+0xc084>
   1d9d0:	ldr	r0, [sp, #72]	; 0x48
   1d9d4:	ldrb	r0, [r0]
   1d9d8:	cmp	r0, #0
   1d9dc:	beq	1db10 <__assert_fail@plt+0xc084>
   1d9e0:	ldr	r1, [sp, #72]	; 0x48
   1d9e4:	mov	r9, #0
   1d9e8:	add	r1, r1, #1
   1d9ec:	cmp	r9, r5
   1d9f0:	strbcc	r0, [ip, r9]
   1d9f4:	ldrb	r0, [r1, r9]
   1d9f8:	add	r9, r9, #1
   1d9fc:	cmp	r0, #0
   1da00:	bne	1d9ec <__assert_fail@plt+0xbf60>
   1da04:	b	1db10 <__assert_fail@plt+0xc084>
   1da08:	bl	21e7c <__assert_fail@plt+0x103f0>
   1da0c:	ldrb	r1, [r0]
   1da10:	and	r1, r1, #223	; 0xdf
   1da14:	cmp	r1, #71	; 0x47
   1da18:	beq	1da88 <__assert_fail@plt+0xbffc>
   1da1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1da20:	cmp	r1, #85	; 0x55
   1da24:	bne	1dae4 <__assert_fail@plt+0xc058>
   1da28:	ldrb	r1, [r0, #1]
   1da2c:	and	r1, r1, #223	; 0xdf
   1da30:	cmp	r1, #84	; 0x54
   1da34:	bne	1dae4 <__assert_fail@plt+0xc058>
   1da38:	ldrb	r1, [r0, #2]
   1da3c:	and	r1, r1, #223	; 0xdf
   1da40:	cmp	r1, #70	; 0x46
   1da44:	bne	1dae4 <__assert_fail@plt+0xc058>
   1da48:	ldrb	r1, [r0, #3]
   1da4c:	cmp	r1, #45	; 0x2d
   1da50:	bne	1dae4 <__assert_fail@plt+0xc058>
   1da54:	ldrb	r1, [r0, #4]
   1da58:	cmp	r1, #56	; 0x38
   1da5c:	bne	1dae4 <__assert_fail@plt+0xc058>
   1da60:	ldrb	r0, [r0, #5]
   1da64:	cmp	r0, #0
   1da68:	bne	1dae4 <__assert_fail@plt+0xc058>
   1da6c:	movw	r0, #16925	; 0x421d
   1da70:	movt	r0, #2
   1da74:	str	r0, [sp, #76]	; 0x4c
   1da78:	mov	r9, #0
   1da7c:	tst	r8, #1
   1da80:	beq	1d9d0 <__assert_fail@plt+0xbf44>
   1da84:	b	1db10 <__assert_fail@plt+0xc084>
   1da88:	ldrb	r1, [r0, #1]
   1da8c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1da90:	and	r1, r1, #223	; 0xdf
   1da94:	cmp	r1, #66	; 0x42
   1da98:	bne	1dae4 <__assert_fail@plt+0xc058>
   1da9c:	ldrb	r1, [r0, #2]
   1daa0:	cmp	r1, #49	; 0x31
   1daa4:	bne	1dae4 <__assert_fail@plt+0xc058>
   1daa8:	ldrb	r1, [r0, #3]
   1daac:	cmp	r1, #56	; 0x38
   1dab0:	bne	1dae4 <__assert_fail@plt+0xc058>
   1dab4:	ldrb	r1, [r0, #4]
   1dab8:	cmp	r1, #48	; 0x30
   1dabc:	bne	1dae4 <__assert_fail@plt+0xc058>
   1dac0:	ldrb	r1, [r0, #5]
   1dac4:	cmp	r1, #51	; 0x33
   1dac8:	bne	1dae4 <__assert_fail@plt+0xc058>
   1dacc:	ldrb	r1, [r0, #6]
   1dad0:	cmp	r1, #48	; 0x30
   1dad4:	bne	1dae4 <__assert_fail@plt+0xc058>
   1dad8:	ldrb	r0, [r0, #7]
   1dadc:	cmp	r0, #0
   1dae0:	beq	1e8f8 <__assert_fail@plt+0xce6c>
   1dae4:	movw	r0, #17901	; 0x45ed
   1dae8:	cmp	r4, #9
   1daec:	movt	r0, #2
   1daf0:	mov	r1, r0
   1daf4:	movw	r0, #16917	; 0x4215
   1daf8:	movt	r0, #2
   1dafc:	moveq	r1, r0
   1db00:	str	r1, [sp, #76]	; 0x4c
   1db04:	mov	r9, #0
   1db08:	tst	r8, #1
   1db0c:	beq	1d9d0 <__assert_fail@plt+0xbf44>
   1db10:	ldr	r6, [sp, #76]	; 0x4c
   1db14:	mov	r0, r6
   1db18:	bl	118ac <strlen@plt>
   1db1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1db20:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1db24:	str	r0, [fp, #-72]	; 0xffffffb8
   1db28:	str	r6, [fp, #-88]	; 0xffffffa8
   1db2c:	mov	r2, #1
   1db30:	mov	r3, r8
   1db34:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1db38:	str	r4, [fp, #-64]	; 0xffffffc0
   1db3c:	mov	sl, #0
   1db40:	str	r3, [fp, #-76]	; 0xffffffb4
   1db44:	str	r2, [sp, #88]	; 0x58
   1db48:	cmp	r0, #0
   1db4c:	movwne	r0, #1
   1db50:	and	r1, r0, r3
   1db54:	and	r1, r2, r1
   1db58:	str	r1, [sp, #48]	; 0x30
   1db5c:	sub	r1, r4, #2
   1db60:	clz	r1, r1
   1db64:	lsr	r1, r1, #5
   1db68:	and	r1, r1, r3
   1db6c:	str	r1, [sp, #44]	; 0x2c
   1db70:	subs	r1, r4, #2
   1db74:	eor	r4, r3, #1
   1db78:	movwne	r1, #1
   1db7c:	str	r4, [sp, #92]	; 0x5c
   1db80:	orr	r4, r1, r4
   1db84:	and	r1, r1, r2
   1db88:	and	r0, r0, r1
   1db8c:	str	r4, [sp, #64]	; 0x40
   1db90:	ldr	r4, [sp, #84]	; 0x54
   1db94:	str	r0, [fp, #-60]	; 0xffffffc4
   1db98:	orr	r0, r1, r3
   1db9c:	ldr	r1, [fp, #16]
   1dba0:	eor	r0, r0, #1
   1dba4:	clz	r1, r1
   1dba8:	lsr	r1, r1, #5
   1dbac:	orr	r0, r1, r0
   1dbb0:	str	r0, [fp, #-68]	; 0xffffffbc
   1dbb4:	eor	r0, r2, #1
   1dbb8:	str	r0, [sp, #52]	; 0x34
   1dbbc:	cmn	r7, #1
   1dbc0:	beq	1dbd0 <__assert_fail@plt+0xc144>
   1dbc4:	cmp	sl, r7
   1dbc8:	bne	1dbdc <__assert_fail@plt+0xc150>
   1dbcc:	b	1e870 <__assert_fail@plt+0xcde4>
   1dbd0:	ldrb	r0, [lr, sl]
   1dbd4:	cmp	r0, #0
   1dbd8:	beq	1e878 <__assert_fail@plt+0xcdec>
   1dbdc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1dbe0:	cmp	r0, #0
   1dbe4:	beq	1dc44 <__assert_fail@plt+0xc1b8>
   1dbe8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1dbec:	mov	r6, r5
   1dbf0:	add	r5, sl, r0
   1dbf4:	cmp	r0, #2
   1dbf8:	bcc	1dc64 <__assert_fail@plt+0xc1d8>
   1dbfc:	mov	r0, #0
   1dc00:	cmn	r7, #1
   1dc04:	str	r0, [fp, #-56]	; 0xffffffc8
   1dc08:	bne	1dc20 <__assert_fail@plt+0xc194>
   1dc0c:	mov	r0, lr
   1dc10:	bl	118ac <strlen@plt>
   1dc14:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1dc18:	ldr	ip, [fp, #-84]	; 0xffffffac
   1dc1c:	mov	r7, r0
   1dc20:	cmp	r5, r7
   1dc24:	bls	1dc74 <__assert_fail@plt+0xc1e8>
   1dc28:	mov	r0, #0
   1dc2c:	mov	r5, r6
   1dc30:	str	r0, [fp, #-48]	; 0xffffffd0
   1dc34:	ldrb	r6, [lr, sl]
   1dc38:	cmp	r6, #126	; 0x7e
   1dc3c:	bls	1dcc4 <__assert_fail@plt+0xc238>
   1dc40:	b	1e220 <__assert_fail@plt+0xc794>
   1dc44:	mov	r0, #0
   1dc48:	str	r0, [fp, #-56]	; 0xffffffc8
   1dc4c:	mov	r0, #0
   1dc50:	str	r0, [fp, #-48]	; 0xffffffd0
   1dc54:	ldrb	r6, [lr, sl]
   1dc58:	cmp	r6, #126	; 0x7e
   1dc5c:	bls	1dcc4 <__assert_fail@plt+0xc238>
   1dc60:	b	1e220 <__assert_fail@plt+0xc794>
   1dc64:	mov	r0, #0
   1dc68:	str	r0, [fp, #-56]	; 0xffffffc8
   1dc6c:	cmp	r5, r7
   1dc70:	bhi	1dc28 <__assert_fail@plt+0xc19c>
   1dc74:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1dc78:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1dc7c:	add	r0, lr, sl
   1dc80:	bl	118a0 <bcmp@plt>
   1dc84:	ldr	r2, [sp, #92]	; 0x5c
   1dc88:	cmp	r0, #0
   1dc8c:	mov	r1, r0
   1dc90:	mov	r5, r6
   1dc94:	movwne	r1, #1
   1dc98:	orr	r1, r1, r2
   1dc9c:	tst	r1, #1
   1dca0:	beq	1e938 <__assert_fail@plt+0xceac>
   1dca4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1dca8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1dcac:	clz	r0, r0
   1dcb0:	lsr	r0, r0, #5
   1dcb4:	str	r0, [fp, #-48]	; 0xffffffd0
   1dcb8:	ldrb	r6, [lr, sl]
   1dcbc:	cmp	r6, #126	; 0x7e
   1dcc0:	bhi	1e220 <__assert_fail@plt+0xc794>
   1dcc4:	add	r3, pc, #16
   1dcc8:	mov	r8, #1
   1dccc:	mov	r2, #110	; 0x6e
   1dcd0:	mov	r0, #97	; 0x61
   1dcd4:	mov	r1, #0
   1dcd8:	ldr	pc, [r3, r6, lsl #2]
   1dcdc:	ldrdeq	sp, [r1], -r8
   1dce0:	andeq	lr, r1, r0, lsr #4
   1dce4:	andeq	lr, r1, r0, lsr #4
   1dce8:	andeq	lr, r1, r0, lsr #4
   1dcec:	andeq	lr, r1, r0, lsr #4
   1dcf0:	andeq	lr, r1, r0, lsr #4
   1dcf4:	andeq	lr, r1, r0, lsr #4
   1dcf8:	ldrdeq	lr, [r1], -r4
   1dcfc:			; <UNDEFINED> instruction: 0x0001dfb8
   1dd00:			; <UNDEFINED> instruction: 0x0001dfb0
   1dd04:	andeq	sp, r1, r4, asr #31
   1dd08:	strdeq	lr, [r1], -r4
   1dd0c:	andeq	sp, r1, r8, lsr #31
   1dd10:	andeq	sp, r1, r0, asr #31
   1dd14:	andeq	lr, r1, r0, lsr #4
   1dd18:	andeq	lr, r1, r0, lsr #4
   1dd1c:	andeq	lr, r1, r0, lsr #4
   1dd20:	andeq	lr, r1, r0, lsr #4
   1dd24:	andeq	lr, r1, r0, lsr #4
   1dd28:	andeq	lr, r1, r0, lsr #4
   1dd2c:	andeq	lr, r1, r0, lsr #4
   1dd30:	andeq	lr, r1, r0, lsr #4
   1dd34:	andeq	lr, r1, r0, lsr #4
   1dd38:	andeq	lr, r1, r0, lsr #4
   1dd3c:	andeq	lr, r1, r0, lsr #4
   1dd40:	andeq	lr, r1, r0, lsr #4
   1dd44:	andeq	lr, r1, r0, lsr #4
   1dd48:	andeq	lr, r1, r0, lsr #4
   1dd4c:	andeq	lr, r1, r0, lsr #4
   1dd50:	andeq	lr, r1, r0, lsr #4
   1dd54:	andeq	lr, r1, r0, lsr #4
   1dd58:	andeq	lr, r1, r0, lsr #4
   1dd5c:	andeq	sp, r1, ip, asr #30
   1dd60:	andeq	sp, r1, r0, asr pc
   1dd64:	andeq	sp, r1, r0, asr pc
   1dd68:	andeq	sp, r1, r0, asr #30
   1dd6c:	andeq	sp, r1, r0, asr pc
   1dd70:	ldrdeq	sp, [r1], -r8
   1dd74:	andeq	sp, r1, r0, asr pc
   1dd78:	strdeq	lr, [r1], -ip
   1dd7c:	andeq	sp, r1, r0, asr pc
   1dd80:	andeq	sp, r1, r0, asr pc
   1dd84:	andeq	sp, r1, r0, asr pc
   1dd88:	ldrdeq	sp, [r1], -r8
   1dd8c:	ldrdeq	sp, [r1], -r8
   1dd90:	ldrdeq	sp, [r1], -r8
   1dd94:	ldrdeq	sp, [r1], -r8
   1dd98:	ldrdeq	sp, [r1], -r8
   1dd9c:	ldrdeq	sp, [r1], -r8
   1dda0:	ldrdeq	sp, [r1], -r8
   1dda4:	ldrdeq	sp, [r1], -r8
   1dda8:	ldrdeq	sp, [r1], -r8
   1ddac:	ldrdeq	sp, [r1], -r8
   1ddb0:	ldrdeq	sp, [r1], -r8
   1ddb4:	ldrdeq	sp, [r1], -r8
   1ddb8:	ldrdeq	sp, [r1], -r8
   1ddbc:	ldrdeq	sp, [r1], -r8
   1ddc0:	ldrdeq	sp, [r1], -r8
   1ddc4:	ldrdeq	sp, [r1], -r8
   1ddc8:	andeq	sp, r1, r0, asr pc
   1ddcc:	andeq	sp, r1, r0, asr pc
   1ddd0:	andeq	sp, r1, r0, asr pc
   1ddd4:	andeq	sp, r1, r0, asr pc
   1ddd8:	andeq	lr, r1, r0, asr #1
   1dddc:	andeq	lr, r1, r0, lsr #4
   1dde0:	ldrdeq	sp, [r1], -r8
   1dde4:	ldrdeq	sp, [r1], -r8
   1dde8:	ldrdeq	sp, [r1], -r8
   1ddec:	ldrdeq	sp, [r1], -r8
   1ddf0:	ldrdeq	sp, [r1], -r8
   1ddf4:	ldrdeq	sp, [r1], -r8
   1ddf8:	ldrdeq	sp, [r1], -r8
   1ddfc:	ldrdeq	sp, [r1], -r8
   1de00:	ldrdeq	sp, [r1], -r8
   1de04:	ldrdeq	sp, [r1], -r8
   1de08:	ldrdeq	sp, [r1], -r8
   1de0c:	ldrdeq	sp, [r1], -r8
   1de10:	ldrdeq	sp, [r1], -r8
   1de14:	ldrdeq	sp, [r1], -r8
   1de18:	ldrdeq	sp, [r1], -r8
   1de1c:	ldrdeq	sp, [r1], -r8
   1de20:	ldrdeq	sp, [r1], -r8
   1de24:	ldrdeq	sp, [r1], -r8
   1de28:	ldrdeq	sp, [r1], -r8
   1de2c:	ldrdeq	sp, [r1], -r8
   1de30:	ldrdeq	sp, [r1], -r8
   1de34:	ldrdeq	sp, [r1], -r8
   1de38:	ldrdeq	sp, [r1], -r8
   1de3c:	ldrdeq	sp, [r1], -r8
   1de40:	ldrdeq	sp, [r1], -r8
   1de44:	ldrdeq	sp, [r1], -r8
   1de48:	andeq	sp, r1, r0, asr pc
   1de4c:	andeq	sp, r1, r4, lsl #31
   1de50:	ldrdeq	sp, [r1], -r8
   1de54:	andeq	sp, r1, r0, asr pc
   1de58:	ldrdeq	sp, [r1], -r8
   1de5c:	andeq	sp, r1, r0, asr pc
   1de60:	ldrdeq	sp, [r1], -r8
   1de64:	ldrdeq	sp, [r1], -r8
   1de68:	ldrdeq	sp, [r1], -r8
   1de6c:	ldrdeq	sp, [r1], -r8
   1de70:	ldrdeq	sp, [r1], -r8
   1de74:	ldrdeq	sp, [r1], -r8
   1de78:	ldrdeq	sp, [r1], -r8
   1de7c:	ldrdeq	sp, [r1], -r8
   1de80:	ldrdeq	sp, [r1], -r8
   1de84:	ldrdeq	sp, [r1], -r8
   1de88:	ldrdeq	sp, [r1], -r8
   1de8c:	ldrdeq	sp, [r1], -r8
   1de90:	ldrdeq	sp, [r1], -r8
   1de94:	ldrdeq	sp, [r1], -r8
   1de98:	ldrdeq	sp, [r1], -r8
   1de9c:	ldrdeq	sp, [r1], -r8
   1dea0:	ldrdeq	sp, [r1], -r8
   1dea4:	ldrdeq	sp, [r1], -r8
   1dea8:	ldrdeq	sp, [r1], -r8
   1deac:	ldrdeq	sp, [r1], -r8
   1deb0:	ldrdeq	sp, [r1], -r8
   1deb4:	ldrdeq	sp, [r1], -r8
   1deb8:	ldrdeq	sp, [r1], -r8
   1debc:	ldrdeq	sp, [r1], -r8
   1dec0:	ldrdeq	sp, [r1], -r8
   1dec4:	ldrdeq	sp, [r1], -r8
   1dec8:	andeq	sp, r1, r8, lsl pc
   1decc:	andeq	sp, r1, r0, asr pc
   1ded0:	andeq	sp, r1, r8, lsl pc
   1ded4:	andeq	sp, r1, r0, asr #30
   1ded8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1dedc:	tst	r0, #1
   1dee0:	bne	1e198 <__assert_fail@plt+0xc70c>
   1dee4:	ldr	r1, [fp, #16]
   1dee8:	ubfx	r0, r6, #5, #3
   1deec:	mov	r2, #1
   1def0:	ldr	r0, [r1, r0, lsl #2]
   1def4:	and	r1, r6, #31
   1def8:	tst	r0, r2, lsl r1
   1defc:	beq	1e198 <__assert_fail@plt+0xc70c>
   1df00:	mov	r0, r6
   1df04:	mov	r1, r8
   1df08:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1df0c:	tst	r2, #1
   1df10:	beq	1e1b8 <__assert_fail@plt+0xc72c>
   1df14:	b	1e914 <__assert_fail@plt+0xce88>
   1df18:	cmp	r7, #1
   1df1c:	beq	1df40 <__assert_fail@plt+0xc4b4>
   1df20:	mov	r8, #0
   1df24:	cmn	r7, #1
   1df28:	bne	1e184 <__assert_fail@plt+0xc6f8>
   1df2c:	ldrb	r0, [lr, #1]
   1df30:	cmp	r0, #0
   1df34:	beq	1df40 <__assert_fail@plt+0xc4b4>
   1df38:	mvn	r7, #0
   1df3c:	b	1e184 <__assert_fail@plt+0xc6f8>
   1df40:	mov	r8, #0
   1df44:	cmp	sl, #0
   1df48:	bne	1e184 <__assert_fail@plt+0xc6f8>
   1df4c:	mov	r1, #1
   1df50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1df54:	cmp	r0, #2
   1df58:	bne	1df70 <__assert_fail@plt+0xc4e4>
   1df5c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1df60:	mov	r8, r1
   1df64:	tst	r0, #1
   1df68:	beq	1ded8 <__assert_fail@plt+0xc44c>
   1df6c:	b	1e914 <__assert_fail@plt+0xce88>
   1df70:	mov	r8, r1
   1df74:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1df78:	tst	r0, #1
   1df7c:	beq	1dee4 <__assert_fail@plt+0xc458>
   1df80:	b	1e198 <__assert_fail@plt+0xc70c>
   1df84:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1df88:	cmp	r0, #2
   1df8c:	bne	1e24c <__assert_fail@plt+0xc7c0>
   1df90:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1df94:	tst	r0, #1
   1df98:	bne	1e914 <__assert_fail@plt+0xce88>
   1df9c:	mov	r0, #0
   1dfa0:	str	r0, [fp, #-56]	; 0xffffffc8
   1dfa4:	b	1e264 <__assert_fail@plt+0xc7d8>
   1dfa8:	mov	r0, #102	; 0x66
   1dfac:	b	1e2d4 <__assert_fail@plt+0xc848>
   1dfb0:	mov	r2, #116	; 0x74
   1dfb4:	b	1dfc4 <__assert_fail@plt+0xc538>
   1dfb8:	mov	r0, #98	; 0x62
   1dfbc:	b	1e2d4 <__assert_fail@plt+0xc848>
   1dfc0:	mov	r2, #114	; 0x72
   1dfc4:	ldr	r0, [sp, #64]	; 0x40
   1dfc8:	tst	r0, #1
   1dfcc:	mov	r0, r2
   1dfd0:	bne	1e2d4 <__assert_fail@plt+0xc848>
   1dfd4:	b	1e914 <__assert_fail@plt+0xce88>
   1dfd8:	ldr	r0, [sp, #88]	; 0x58
   1dfdc:	tst	r0, #1
   1dfe0:	beq	1e2f4 <__assert_fail@plt+0xc868>
   1dfe4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1dfe8:	tst	r0, #1
   1dfec:	bne	1ea50 <__assert_fail@plt+0xcfc4>
   1dff0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1dff4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1dff8:	subs	r0, r0, #2
   1dffc:	movwne	r0, #1
   1e000:	orr	r0, r0, r1
   1e004:	tst	r0, #1
   1e008:	bne	1e044 <__assert_fail@plt+0xc5b8>
   1e00c:	cmp	r9, r5
   1e010:	movcc	r0, #39	; 0x27
   1e014:	strbcc	r0, [ip, r9]
   1e018:	add	r0, r9, #1
   1e01c:	cmp	r0, r5
   1e020:	movcc	r1, #36	; 0x24
   1e024:	strbcc	r1, [ip, r0]
   1e028:	add	r0, r9, #2
   1e02c:	add	r9, r9, #3
   1e030:	cmp	r0, r5
   1e034:	movcc	r1, #39	; 0x27
   1e038:	strbcc	r1, [ip, r0]
   1e03c:	mov	r0, #1
   1e040:	str	r0, [fp, #-52]	; 0xffffffcc
   1e044:	mov	r1, #1
   1e048:	cmp	r9, r5
   1e04c:	mov	r8, #0
   1e050:	mov	r6, #48	; 0x30
   1e054:	str	r1, [fp, #-56]	; 0xffffffc8
   1e058:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1e05c:	movcc	r0, #92	; 0x5c
   1e060:	strbcc	r0, [ip, r9]
   1e064:	add	r0, r9, #1
   1e068:	cmp	r1, #2
   1e06c:	beq	1e4c0 <__assert_fail@plt+0xca34>
   1e070:	add	r1, sl, #1
   1e074:	cmp	r1, r7
   1e078:	bcs	1e4c0 <__assert_fail@plt+0xca34>
   1e07c:	ldrb	r1, [lr, r1]
   1e080:	sub	r1, r1, #48	; 0x30
   1e084:	uxtb	r1, r1
   1e088:	cmp	r1, #9
   1e08c:	bhi	1e4c0 <__assert_fail@plt+0xca34>
   1e090:	cmp	r0, r5
   1e094:	movcc	r1, #48	; 0x30
   1e098:	strbcc	r1, [ip, r0]
   1e09c:	add	r0, r9, #2
   1e0a0:	add	r9, r9, #3
   1e0a4:	cmp	r0, r5
   1e0a8:	movcc	r1, #48	; 0x30
   1e0ac:	strbcc	r1, [ip, r0]
   1e0b0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e0b4:	tst	r0, #1
   1e0b8:	beq	1dee4 <__assert_fail@plt+0xc458>
   1e0bc:	b	1e198 <__assert_fail@plt+0xc70c>
   1e0c0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e0c4:	mov	r6, #63	; 0x3f
   1e0c8:	cmp	r0, #5
   1e0cc:	beq	1e4d4 <__assert_fail@plt+0xca48>
   1e0d0:	mov	r1, #0
   1e0d4:	cmp	r0, #2
   1e0d8:	str	r1, [fp, #-56]	; 0xffffffc8
   1e0dc:	bne	1e59c <__assert_fail@plt+0xcb10>
   1e0e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e0e4:	mov	r8, #0
   1e0e8:	tst	r0, #1
   1e0ec:	beq	1ded8 <__assert_fail@plt+0xc44c>
   1e0f0:	b	1e914 <__assert_fail@plt+0xce88>
   1e0f4:	mov	r0, #118	; 0x76
   1e0f8:	b	1e2d4 <__assert_fail@plt+0xc848>
   1e0fc:	mov	r0, #1
   1e100:	mov	r6, #39	; 0x27
   1e104:	str	r0, [sp, #60]	; 0x3c
   1e108:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1e10c:	cmp	r0, #2
   1e110:	bne	1e314 <__assert_fail@plt+0xc888>
   1e114:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1e118:	tst	r0, #1
   1e11c:	bne	1e914 <__assert_fail@plt+0xce88>
   1e120:	ldr	r2, [sp, #56]	; 0x38
   1e124:	clz	r1, r5
   1e128:	mov	r8, #1
   1e12c:	lsr	r1, r1, #5
   1e130:	cmp	r2, #0
   1e134:	mov	r0, r2
   1e138:	movwne	r0, #1
   1e13c:	orrs	r0, r0, r1
   1e140:	moveq	r2, r5
   1e144:	moveq	r5, r0
   1e148:	cmp	r9, r5
   1e14c:	str	r2, [sp, #56]	; 0x38
   1e150:	movcc	r0, #39	; 0x27
   1e154:	strbcc	r0, [ip, r9]
   1e158:	add	r0, r9, #1
   1e15c:	cmp	r0, r5
   1e160:	movcc	r1, #92	; 0x5c
   1e164:	strbcc	r1, [ip, r0]
   1e168:	add	r0, r9, #2
   1e16c:	add	r9, r9, #3
   1e170:	cmp	r0, r5
   1e174:	movcc	r1, #39	; 0x27
   1e178:	strbcc	r1, [ip, r0]
   1e17c:	mov	r0, #0
   1e180:	str	r0, [fp, #-52]	; 0xffffffcc
   1e184:	mov	r0, #0
   1e188:	str	r0, [fp, #-56]	; 0xffffffc8
   1e18c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e190:	tst	r0, #1
   1e194:	beq	1dee4 <__assert_fail@plt+0xc458>
   1e198:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1e19c:	mov	r1, r8
   1e1a0:	cmp	r0, #0
   1e1a4:	mov	r0, r6
   1e1a8:	beq	1e26c <__assert_fail@plt+0xc7e0>
   1e1ac:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1e1b0:	tst	r2, #1
   1e1b4:	bne	1e914 <__assert_fail@plt+0xce88>
   1e1b8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e1bc:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1e1c0:	subs	r2, r2, #2
   1e1c4:	movwne	r2, #1
   1e1c8:	orr	r2, r2, r3
   1e1cc:	tst	r2, #1
   1e1d0:	bne	1e20c <__assert_fail@plt+0xc780>
   1e1d4:	cmp	r9, r5
   1e1d8:	movcc	r2, #39	; 0x27
   1e1dc:	strbcc	r2, [ip, r9]
   1e1e0:	add	r2, r9, #1
   1e1e4:	cmp	r2, r5
   1e1e8:	movcc	r3, #36	; 0x24
   1e1ec:	strbcc	r3, [ip, r2]
   1e1f0:	add	r2, r9, #2
   1e1f4:	add	r9, r9, #3
   1e1f8:	cmp	r2, r5
   1e1fc:	movcc	r3, #39	; 0x27
   1e200:	strbcc	r3, [ip, r2]
   1e204:	mov	r2, #1
   1e208:	str	r2, [fp, #-52]	; 0xffffffcc
   1e20c:	cmp	r9, r5
   1e210:	movcc	r2, #92	; 0x5c
   1e214:	strbcc	r2, [ip, r9]
   1e218:	add	r9, r9, #1
   1e21c:	b	1e2b4 <__assert_fail@plt+0xc828>
   1e220:	ldr	r0, [sp, #40]	; 0x28
   1e224:	cmp	r0, #1
   1e228:	bne	1e328 <__assert_fail@plt+0xc89c>
   1e22c:	bl	11870 <__ctype_b_loc@plt>
   1e230:	ldr	r0, [r0]
   1e234:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e238:	mov	r1, #1
   1e23c:	add	r0, r0, r6, lsl #1
   1e240:	ldrb	r0, [r0, #1]
   1e244:	ubfx	r8, r0, #6, #1
   1e248:	b	1e680 <__assert_fail@plt+0xcbf4>
   1e24c:	ldr	r1, [sp, #48]	; 0x30
   1e250:	mov	r0, #0
   1e254:	str	r0, [fp, #-56]	; 0xffffffc8
   1e258:	mov	r0, #92	; 0x5c
   1e25c:	cmp	r1, #0
   1e260:	beq	1e2d4 <__assert_fail@plt+0xc848>
   1e264:	mov	r6, #92	; 0x5c
   1e268:	mov	r8, #0
   1e26c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e270:	cmp	r0, #0
   1e274:	bne	1e2ac <__assert_fail@plt+0xc820>
   1e278:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1e27c:	tst	r0, #1
   1e280:	beq	1e2ac <__assert_fail@plt+0xc820>
   1e284:	cmp	r9, r5
   1e288:	movcc	r0, #39	; 0x27
   1e28c:	strbcc	r0, [ip, r9]
   1e290:	add	r0, r9, #1
   1e294:	add	r9, r9, #2
   1e298:	cmp	r0, r5
   1e29c:	movcc	r1, #39	; 0x27
   1e2a0:	strbcc	r1, [ip, r0]
   1e2a4:	mov	r0, #0
   1e2a8:	str	r0, [fp, #-52]	; 0xffffffcc
   1e2ac:	mov	r1, r8
   1e2b0:	mov	r0, r6
   1e2b4:	cmp	r9, r5
   1e2b8:	and	r4, r4, r1
   1e2bc:	strbcc	r0, [ip, r9]
   1e2c0:	add	r9, r9, #1
   1e2c4:	add	sl, sl, #1
   1e2c8:	cmn	r7, #1
   1e2cc:	bne	1dbc4 <__assert_fail@plt+0xc138>
   1e2d0:	b	1dbd0 <__assert_fail@plt+0xc144>
   1e2d4:	mov	r1, #0
   1e2d8:	mov	r8, #0
   1e2dc:	str	r1, [fp, #-56]	; 0xffffffc8
   1e2e0:	ldr	r1, [sp, #88]	; 0x58
   1e2e4:	tst	r1, #1
   1e2e8:	mov	r1, #0
   1e2ec:	beq	1ded8 <__assert_fail@plt+0xc44c>
   1e2f0:	b	1e1ac <__assert_fail@plt+0xc720>
   1e2f4:	ldr	r0, [sp, #36]	; 0x24
   1e2f8:	mov	r6, #0
   1e2fc:	mov	r8, #0
   1e300:	cmp	r0, #0
   1e304:	mov	r0, #0
   1e308:	str	r0, [fp, #-56]	; 0xffffffc8
   1e30c:	bne	1e2c4 <__assert_fail@plt+0xc838>
   1e310:	b	1ded8 <__assert_fail@plt+0xc44c>
   1e314:	mov	r8, #1
   1e318:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e31c:	tst	r0, #1
   1e320:	beq	1dee4 <__assert_fail@plt+0xc458>
   1e324:	b	1e198 <__assert_fail@plt+0xc70c>
   1e328:	mov	r0, #0
   1e32c:	cmn	r7, #1
   1e330:	str	r0, [fp, #-36]	; 0xffffffdc
   1e334:	str	r0, [fp, #-40]	; 0xffffffd8
   1e338:	bne	1e34c <__assert_fail@plt+0xc8c0>
   1e33c:	mov	r0, lr
   1e340:	bl	118ac <strlen@plt>
   1e344:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e348:	mov	r7, r0
   1e34c:	ldr	r0, [sp, #44]	; 0x2c
   1e350:	str	r4, [sp, #84]	; 0x54
   1e354:	str	r5, [sp, #28]
   1e358:	cmp	r0, #0
   1e35c:	beq	1e5b0 <__assert_fail@plt+0xcb24>
   1e360:	ldr	r0, [sp, #80]	; 0x50
   1e364:	mov	r8, #1
   1e368:	mov	r5, #0
   1e36c:	add	r0, r0, sl
   1e370:	str	r0, [sp, #24]
   1e374:	sub	r0, fp, #40	; 0x28
   1e378:	mov	r3, r0
   1e37c:	b	1e3b8 <__assert_fail@plt+0xc92c>
   1e380:	ldr	r5, [sp, #68]	; 0x44
   1e384:	add	r5, r0, r5
   1e388:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1e38c:	bl	11768 <iswprint@plt>
   1e390:	cmp	r0, #0
   1e394:	sub	r4, fp, #40	; 0x28
   1e398:	movwne	r0, #1
   1e39c:	and	r8, r8, r0
   1e3a0:	mov	r0, r4
   1e3a4:	bl	11714 <mbsinit@plt>
   1e3a8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e3ac:	mov	r3, r4
   1e3b0:	cmp	r0, #0
   1e3b4:	bne	1e674 <__assert_fail@plt+0xcbe8>
   1e3b8:	str	r5, [sp, #68]	; 0x44
   1e3bc:	add	r5, r5, sl
   1e3c0:	sub	r0, fp, #44	; 0x2c
   1e3c4:	add	r1, lr, r5
   1e3c8:	sub	r2, r7, r5
   1e3cc:	bl	21eb4 <__assert_fail@plt+0x10428>
   1e3d0:	cmn	r0, #2
   1e3d4:	beq	1e634 <__assert_fail@plt+0xcba8>
   1e3d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e3dc:	cmn	r0, #1
   1e3e0:	beq	1e628 <__assert_fail@plt+0xcb9c>
   1e3e4:	cmp	r0, #0
   1e3e8:	beq	1e62c <__assert_fail@plt+0xcba0>
   1e3ec:	cmp	r0, #2
   1e3f0:	bcc	1e380 <__assert_fail@plt+0xc8f4>
   1e3f4:	ldr	r1, [sp, #68]	; 0x44
   1e3f8:	ldr	r2, [sp, #24]
   1e3fc:	add	r1, r2, r1
   1e400:	sub	r2, r0, #1
   1e404:	ldrb	r3, [r1]
   1e408:	sub	r3, r3, #91	; 0x5b
   1e40c:	cmp	r3, #33	; 0x21
   1e410:	bls	1e430 <__assert_fail@plt+0xc9a4>
   1e414:	add	r1, r1, #1
   1e418:	subs	r2, r2, #1
   1e41c:	beq	1e380 <__assert_fail@plt+0xc8f4>
   1e420:	ldrb	r3, [r1]
   1e424:	sub	r3, r3, #91	; 0x5b
   1e428:	cmp	r3, #33	; 0x21
   1e42c:	bhi	1e414 <__assert_fail@plt+0xc988>
   1e430:	add	r5, pc, #0
   1e434:	ldr	pc, [r5, r3, lsl #2]
   1e438:	andeq	lr, r1, ip, asr #18
   1e43c:	andeq	lr, r1, ip, asr #18
   1e440:	andeq	lr, r1, r4, lsl r4
   1e444:	andeq	lr, r1, ip, asr #18
   1e448:	andeq	lr, r1, r4, lsl r4
   1e44c:	andeq	lr, r1, ip, asr #18
   1e450:	andeq	lr, r1, r4, lsl r4
   1e454:	andeq	lr, r1, r4, lsl r4
   1e458:	andeq	lr, r1, r4, lsl r4
   1e45c:	andeq	lr, r1, r4, lsl r4
   1e460:	andeq	lr, r1, r4, lsl r4
   1e464:	andeq	lr, r1, r4, lsl r4
   1e468:	andeq	lr, r1, r4, lsl r4
   1e46c:	andeq	lr, r1, r4, lsl r4
   1e470:	andeq	lr, r1, r4, lsl r4
   1e474:	andeq	lr, r1, r4, lsl r4
   1e478:	andeq	lr, r1, r4, lsl r4
   1e47c:	andeq	lr, r1, r4, lsl r4
   1e480:	andeq	lr, r1, r4, lsl r4
   1e484:	andeq	lr, r1, r4, lsl r4
   1e488:	andeq	lr, r1, r4, lsl r4
   1e48c:	andeq	lr, r1, r4, lsl r4
   1e490:	andeq	lr, r1, r4, lsl r4
   1e494:	andeq	lr, r1, r4, lsl r4
   1e498:	andeq	lr, r1, r4, lsl r4
   1e49c:	andeq	lr, r1, r4, lsl r4
   1e4a0:	andeq	lr, r1, r4, lsl r4
   1e4a4:	andeq	lr, r1, r4, lsl r4
   1e4a8:	andeq	lr, r1, r4, lsl r4
   1e4ac:	andeq	lr, r1, r4, lsl r4
   1e4b0:	andeq	lr, r1, r4, lsl r4
   1e4b4:	andeq	lr, r1, r4, lsl r4
   1e4b8:	andeq	lr, r1, r4, lsl r4
   1e4bc:	andeq	lr, r1, ip, asr #18
   1e4c0:	mov	r9, r0
   1e4c4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e4c8:	tst	r0, #1
   1e4cc:	beq	1dee4 <__assert_fail@plt+0xc458>
   1e4d0:	b	1e198 <__assert_fail@plt+0xc70c>
   1e4d4:	mov	r0, #0
   1e4d8:	str	r0, [fp, #-56]	; 0xffffffc8
   1e4dc:	ldr	r0, [sp, #32]
   1e4e0:	cmp	r0, #0
   1e4e4:	beq	1e59c <__assert_fail@plt+0xcb10>
   1e4e8:	add	r0, sl, #2
   1e4ec:	mov	r1, r7
   1e4f0:	cmp	r0, r7
   1e4f4:	bcs	1e59c <__assert_fail@plt+0xcb10>
   1e4f8:	add	r1, sl, lr
   1e4fc:	ldrb	r1, [r1, #1]
   1e500:	cmp	r1, #63	; 0x3f
   1e504:	bne	1e59c <__assert_fail@plt+0xcb10>
   1e508:	ldrb	r8, [lr, r0]
   1e50c:	sub	r2, r8, #33	; 0x21
   1e510:	cmp	r2, #29
   1e514:	bhi	1e59c <__assert_fail@plt+0xcb10>
   1e518:	mov	r1, r4
   1e51c:	movw	r4, #20929	; 0x51c1
   1e520:	mov	r3, #1
   1e524:	movt	r4, #14336	; 0x3800
   1e528:	tst	r4, r3, lsl r2
   1e52c:	beq	1e858 <__assert_fail@plt+0xcdcc>
   1e530:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1e534:	tst	r2, #1
   1e538:	bne	1e914 <__assert_fail@plt+0xce88>
   1e53c:	cmp	r9, r5
   1e540:	mov	r6, r8
   1e544:	mov	r4, r1
   1e548:	mov	sl, r0
   1e54c:	mov	r8, #0
   1e550:	movcc	r2, #63	; 0x3f
   1e554:	strbcc	r2, [ip, r9]
   1e558:	add	r2, r9, #1
   1e55c:	cmp	r2, r5
   1e560:	movcc	r3, #34	; 0x22
   1e564:	strbcc	r3, [ip, r2]
   1e568:	add	r2, r9, #2
   1e56c:	cmp	r2, r5
   1e570:	movcc	r3, #34	; 0x22
   1e574:	strbcc	r3, [ip, r2]
   1e578:	add	r2, r9, #3
   1e57c:	add	r9, r9, #4
   1e580:	cmp	r2, r5
   1e584:	movcc	r3, #63	; 0x3f
   1e588:	strbcc	r3, [ip, r2]
   1e58c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e590:	tst	r0, #1
   1e594:	beq	1dee4 <__assert_fail@plt+0xc458>
   1e598:	b	1e198 <__assert_fail@plt+0xc70c>
   1e59c:	mov	r8, #0
   1e5a0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e5a4:	tst	r0, #1
   1e5a8:	beq	1dee4 <__assert_fail@plt+0xc458>
   1e5ac:	b	1e198 <__assert_fail@plt+0xc70c>
   1e5b0:	mov	r8, #1
   1e5b4:	mov	r5, #0
   1e5b8:	sub	r4, fp, #40	; 0x28
   1e5bc:	str	r5, [sp, #68]	; 0x44
   1e5c0:	add	r5, r5, sl
   1e5c4:	sub	r0, fp, #44	; 0x2c
   1e5c8:	mov	r3, r4
   1e5cc:	add	r1, lr, r5
   1e5d0:	sub	r2, r7, r5
   1e5d4:	bl	21eb4 <__assert_fail@plt+0x10428>
   1e5d8:	cmn	r0, #2
   1e5dc:	beq	1e634 <__assert_fail@plt+0xcba8>
   1e5e0:	cmn	r0, #1
   1e5e4:	beq	1e628 <__assert_fail@plt+0xcb9c>
   1e5e8:	ldr	r5, [sp, #68]	; 0x44
   1e5ec:	cmp	r0, #0
   1e5f0:	beq	1e670 <__assert_fail@plt+0xcbe4>
   1e5f4:	add	r5, r0, r5
   1e5f8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1e5fc:	bl	11768 <iswprint@plt>
   1e600:	cmp	r0, #0
   1e604:	sub	r4, fp, #40	; 0x28
   1e608:	movwne	r0, #1
   1e60c:	and	r8, r8, r0
   1e610:	mov	r0, r4
   1e614:	bl	11714 <mbsinit@plt>
   1e618:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e61c:	cmp	r0, #0
   1e620:	beq	1e5bc <__assert_fail@plt+0xcb30>
   1e624:	b	1e674 <__assert_fail@plt+0xcbe8>
   1e628:	mov	r8, #0
   1e62c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e630:	b	1e668 <__assert_fail@plt+0xcbdc>
   1e634:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e638:	mov	r8, #0
   1e63c:	cmp	r5, r7
   1e640:	bcs	1e668 <__assert_fail@plt+0xcbdc>
   1e644:	ldrb	r0, [lr, r5]
   1e648:	cmp	r0, #0
   1e64c:	beq	1e668 <__assert_fail@plt+0xcbdc>
   1e650:	ldr	r0, [sp, #68]	; 0x44
   1e654:	add	r0, r0, #1
   1e658:	add	r5, r0, sl
   1e65c:	str	r0, [sp, #68]	; 0x44
   1e660:	cmp	r5, r7
   1e664:	bcc	1e644 <__assert_fail@plt+0xcbb8>
   1e668:	ldr	r5, [sp, #68]	; 0x44
   1e66c:	b	1e674 <__assert_fail@plt+0xcbe8>
   1e670:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e674:	mov	r1, r5
   1e678:	ldr	r5, [sp, #28]
   1e67c:	ldr	r4, [sp, #84]	; 0x54
   1e680:	ldr	r0, [sp, #52]	; 0x34
   1e684:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e688:	cmp	r1, #1
   1e68c:	orr	r2, r8, r0
   1e690:	mov	r0, r1
   1e694:	bhi	1e6a0 <__assert_fail@plt+0xcc14>
   1e698:	tst	r2, #1
   1e69c:	bne	1ded8 <__assert_fail@plt+0xc44c>
   1e6a0:	add	r0, r0, sl
   1e6a4:	str	r2, [sp, #84]	; 0x54
   1e6a8:	str	r0, [fp, #-56]	; 0xffffffc8
   1e6ac:	mov	r0, #0
   1e6b0:	tst	r2, #1
   1e6b4:	bne	1e794 <__assert_fail@plt+0xcd08>
   1e6b8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1e6bc:	tst	r1, #1
   1e6c0:	bne	1e914 <__assert_fail@plt+0xce88>
   1e6c4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1e6c8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1e6cc:	subs	r2, r1, #2
   1e6d0:	movwne	r2, #1
   1e6d4:	orr	r2, r2, r0
   1e6d8:	tst	r2, #1
   1e6dc:	bne	1e718 <__assert_fail@plt+0xcc8c>
   1e6e0:	cmp	r9, r5
   1e6e4:	add	r2, r9, #1
   1e6e8:	mov	r0, #1
   1e6ec:	movcc	r1, #39	; 0x27
   1e6f0:	str	r0, [fp, #-52]	; 0xffffffcc
   1e6f4:	strbcc	r1, [ip, r9]
   1e6f8:	cmp	r2, r5
   1e6fc:	movcc	r1, #36	; 0x24
   1e700:	strbcc	r1, [ip, r2]
   1e704:	add	r2, r9, #2
   1e708:	add	r9, r9, #3
   1e70c:	cmp	r2, r5
   1e710:	movcc	r1, #39	; 0x27
   1e714:	strbcc	r1, [ip, r2]
   1e718:	cmp	r9, r5
   1e71c:	add	r2, r9, #1
   1e720:	movcc	r1, #92	; 0x5c
   1e724:	strbcc	r1, [ip, r9]
   1e728:	cmp	r2, r5
   1e72c:	bcs	1e740 <__assert_fail@plt+0xccb4>
   1e730:	uxtb	r3, r6
   1e734:	mov	r1, #48	; 0x30
   1e738:	orr	r3, r1, r3, lsr #6
   1e73c:	strb	r3, [ip, r2]
   1e740:	add	r2, r9, #2
   1e744:	add	r9, r9, #3
   1e748:	cmp	r2, r5
   1e74c:	lsrcc	r3, r6, #3
   1e750:	movcc	r1, #6
   1e754:	bficc	r3, r1, #3, #29
   1e758:	mov	r1, #6
   1e75c:	bfi	r6, r1, #3, #29
   1e760:	strbcc	r3, [ip, r2]
   1e764:	mov	r2, #1
   1e768:	b	1e7c8 <__assert_fail@plt+0xcd3c>
   1e76c:	ldr	r1, [sp, #80]	; 0x50
   1e770:	cmp	r9, r2
   1e774:	mov	r5, r2
   1e778:	ldr	r2, [sp, #84]	; 0x54
   1e77c:	strbcc	r6, [ip, r9]
   1e780:	add	r9, r9, #1
   1e784:	ldrb	r6, [r1, sl]
   1e788:	mov	sl, r3
   1e78c:	tst	r2, #1
   1e790:	beq	1e6b8 <__assert_fail@plt+0xcc2c>
   1e794:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1e798:	tst	r1, #1
   1e79c:	beq	1e7bc <__assert_fail@plt+0xcd30>
   1e7a0:	cmp	r9, r5
   1e7a4:	mov	r2, r0
   1e7a8:	movcc	r1, #92	; 0x5c
   1e7ac:	strbcc	r1, [ip, r9]
   1e7b0:	add	r9, r9, #1
   1e7b4:	mov	r1, #0
   1e7b8:	b	1e7c4 <__assert_fail@plt+0xcd38>
   1e7bc:	mov	r1, #0
   1e7c0:	mov	r2, r0
   1e7c4:	str	r1, [fp, #-48]	; 0xffffffd0
   1e7c8:	mov	r0, r2
   1e7cc:	and	r1, r2, #1
   1e7d0:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1e7d4:	add	r3, sl, #1
   1e7d8:	cmp	r2, r3
   1e7dc:	bls	1e83c <__assert_fail@plt+0xcdb0>
   1e7e0:	mov	r2, r5
   1e7e4:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1e7e8:	cmp	r1, #0
   1e7ec:	movwne	r1, #1
   1e7f0:	mvn	r5, r5
   1e7f4:	orr	r5, r5, r1
   1e7f8:	tst	r5, #1
   1e7fc:	bne	1e76c <__assert_fail@plt+0xcce0>
   1e800:	cmp	r9, r2
   1e804:	movcc	r5, r4
   1e808:	movcc	r4, #39	; 0x27
   1e80c:	strbcc	r4, [ip, r9]
   1e810:	movcc	r4, r5
   1e814:	add	r5, r9, #1
   1e818:	add	r9, r9, #2
   1e81c:	cmp	r5, r2
   1e820:	movcc	r1, r4
   1e824:	movcc	r4, #39	; 0x27
   1e828:	strbcc	r4, [ip, r5]
   1e82c:	movcc	r4, r1
   1e830:	mov	r1, #0
   1e834:	str	r1, [fp, #-52]	; 0xffffffcc
   1e838:	b	1e76c <__assert_fail@plt+0xcce0>
   1e83c:	cmp	r1, #0
   1e840:	movwne	r1, #1
   1e844:	str	r1, [fp, #-56]	; 0xffffffc8
   1e848:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1e84c:	cmp	r0, #0
   1e850:	beq	1e278 <__assert_fail@plt+0xc7ec>
   1e854:	b	1e2ac <__assert_fail@plt+0xc820>
   1e858:	mov	r8, #0
   1e85c:	mov	r4, r1
   1e860:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1e864:	tst	r0, #1
   1e868:	beq	1dee4 <__assert_fail@plt+0xc458>
   1e86c:	b	1e198 <__assert_fail@plt+0xc70c>
   1e870:	mov	r7, sl
   1e874:	b	1e87c <__assert_fail@plt+0xcdf0>
   1e878:	mvn	r7, #0
   1e87c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1e880:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1e884:	ldr	r2, [sp, #88]	; 0x58
   1e888:	eor	r0, r1, #2
   1e88c:	orr	r0, r0, r9
   1e890:	clz	r0, r0
   1e894:	lsr	r0, r0, #5
   1e898:	tst	r3, r0
   1e89c:	bne	1e914 <__assert_fail@plt+0xce88>
   1e8a0:	subs	r0, r1, #2
   1e8a4:	movwne	r0, #1
   1e8a8:	orr	r0, r3, r0
   1e8ac:	tst	r0, #1
   1e8b0:	ldreq	r0, [sp, #60]	; 0x3c
   1e8b4:	eoreq	r0, r0, #1
   1e8b8:	tsteq	r0, #1
   1e8bc:	bne	1e9f0 <__assert_fail@plt+0xcf64>
   1e8c0:	tst	r4, #1
   1e8c4:	bne	1e9b4 <__assert_fail@plt+0xcf28>
   1e8c8:	ldr	r6, [sp, #56]	; 0x38
   1e8cc:	mov	r8, #0
   1e8d0:	cmp	r6, #0
   1e8d4:	beq	1e9ec <__assert_fail@plt+0xcf60>
   1e8d8:	mov	r1, #0
   1e8dc:	mov	r4, #2
   1e8e0:	cmp	r5, #0
   1e8e4:	mov	r0, r2
   1e8e8:	mov	r3, #0
   1e8ec:	str	r1, [sp, #84]	; 0x54
   1e8f0:	beq	1d738 <__assert_fail@plt+0xbcac>
   1e8f4:	b	1e9f0 <__assert_fail@plt+0xcf64>
   1e8f8:	movw	r0, #16933	; 0x4225
   1e8fc:	movt	r0, #2
   1e900:	str	r0, [sp, #76]	; 0x4c
   1e904:	mov	r9, #0
   1e908:	tst	r8, #1
   1e90c:	beq	1d9d0 <__assert_fail@plt+0xbf44>
   1e910:	b	1db10 <__assert_fail@plt+0xc084>
   1e914:	ldr	r1, [sp, #88]	; 0x58
   1e918:	mov	r0, #2
   1e91c:	tst	r1, #1
   1e920:	movwne	r0, #4
   1e924:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e928:	ldr	r1, [fp, #12]
   1e92c:	cmp	r2, #2
   1e930:	moveq	r2, r0
   1e934:	b	1e96c <__assert_fail@plt+0xcee0>
   1e938:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e93c:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e940:	ldr	r1, [fp, #12]
   1e944:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1e948:	b	1e96c <__assert_fail@plt+0xcee0>
   1e94c:	ldr	r1, [sp, #88]	; 0x58
   1e950:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e954:	ldr	r5, [sp, #28]
   1e958:	mov	r0, #2
   1e95c:	tst	r1, #1
   1e960:	ldr	r1, [fp, #12]
   1e964:	movwne	r0, #4
   1e968:	mov	r2, r0
   1e96c:	mov	r0, #0
   1e970:	bic	r1, r1, #2
   1e974:	str	r2, [sp]
   1e978:	mov	r2, lr
   1e97c:	str	r0, [sp, #8]
   1e980:	ldr	r0, [sp, #72]	; 0x48
   1e984:	str	r1, [sp, #4]
   1e988:	mov	r1, r5
   1e98c:	str	r0, [sp, #12]
   1e990:	ldr	r0, [sp, #76]	; 0x4c
   1e994:	str	r0, [sp, #16]
   1e998:	mov	r0, ip
   1e99c:	mov	r3, r7
   1e9a0:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1e9a4:	mov	r9, r0
   1e9a8:	mov	r0, r9
   1e9ac:	sub	sp, fp, #28
   1e9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9b4:	mov	r0, #5
   1e9b8:	ldr	r1, [sp, #56]	; 0x38
   1e9bc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1e9c0:	str	r0, [sp]
   1e9c4:	ldr	r0, [fp, #12]
   1e9c8:	str	r0, [sp, #4]
   1e9cc:	ldr	r0, [fp, #16]
   1e9d0:	str	r0, [sp, #8]
   1e9d4:	ldr	r0, [sp, #72]	; 0x48
   1e9d8:	str	r0, [sp, #12]
   1e9dc:	ldr	r0, [sp, #76]	; 0x4c
   1e9e0:	str	r0, [sp, #16]
   1e9e4:	ldr	r0, [fp, #-84]	; 0xffffffac
   1e9e8:	b	1e99c <__assert_fail@plt+0xcf10>
   1e9ec:	mov	r3, #0
   1e9f0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1e9f4:	cmp	r1, #0
   1e9f8:	beq	1ea34 <__assert_fail@plt+0xcfa8>
   1e9fc:	ldr	r2, [fp, #-84]	; 0xffffffac
   1ea00:	tst	r3, #1
   1ea04:	bne	1ea38 <__assert_fail@plt+0xcfac>
   1ea08:	ldrb	r0, [r1]
   1ea0c:	cmp	r0, #0
   1ea10:	beq	1ea38 <__assert_fail@plt+0xcfac>
   1ea14:	add	r1, r1, #1
   1ea18:	cmp	r9, r5
   1ea1c:	strbcc	r0, [r2, r9]
   1ea20:	add	r9, r9, #1
   1ea24:	ldrb	r0, [r1], #1
   1ea28:	cmp	r0, #0
   1ea2c:	bne	1ea18 <__assert_fail@plt+0xcf8c>
   1ea30:	b	1ea38 <__assert_fail@plt+0xcfac>
   1ea34:	ldr	r2, [fp, #-84]	; 0xffffffac
   1ea38:	cmp	r9, r5
   1ea3c:	movcc	r0, #0
   1ea40:	strbcc	r0, [r2, r9]
   1ea44:	mov	r0, r9
   1ea48:	sub	sp, fp, #28
   1ea4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea50:	mov	r0, #4
   1ea54:	b	1e924 <__assert_fail@plt+0xce98>
   1ea58:	bl	11a5c <abort@plt>
   1ea5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea60:	add	fp, sp, #28
   1ea64:	sub	sp, sp, #28
   1ea68:	movw	r5, #21112	; 0x5278
   1ea6c:	cmp	r2, #0
   1ea70:	mov	r4, r1
   1ea74:	mov	r7, r0
   1ea78:	str	r0, [sp, #20]
   1ea7c:	movt	r5, #3
   1ea80:	movne	r5, r2
   1ea84:	bl	118e8 <__errno_location@plt>
   1ea88:	mov	sl, r0
   1ea8c:	ldr	r2, [r5, #40]	; 0x28
   1ea90:	ldr	r3, [r5, #44]	; 0x2c
   1ea94:	ldm	r5, {r0, r1}
   1ea98:	orr	r8, r1, #1
   1ea9c:	add	r9, r5, #8
   1eaa0:	mov	r1, #0
   1eaa4:	ldr	r6, [sl]
   1eaa8:	stm	sp, {r0, r8, r9}
   1eaac:	mov	r0, #0
   1eab0:	str	r2, [sp, #12]
   1eab4:	str	r3, [sp, #16]
   1eab8:	mov	r2, r7
   1eabc:	mov	r3, r4
   1eac0:	str	r6, [sp, #24]
   1eac4:	mov	r6, r4
   1eac8:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1eacc:	add	r7, r0, #1
   1ead0:	mov	r0, r7
   1ead4:	bl	204d0 <__assert_fail@plt+0xea44>
   1ead8:	mov	r4, r0
   1eadc:	ldr	r0, [r5]
   1eae0:	ldr	r2, [r5, #44]	; 0x2c
   1eae4:	ldr	r1, [r5, #40]	; 0x28
   1eae8:	mov	r3, r6
   1eaec:	stm	sp, {r0, r8, r9}
   1eaf0:	str	r2, [sp, #16]
   1eaf4:	ldr	r2, [sp, #20]
   1eaf8:	str	r1, [sp, #12]
   1eafc:	mov	r0, r4
   1eb00:	mov	r1, r7
   1eb04:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1eb08:	ldr	r0, [sp, #24]
   1eb0c:	str	r0, [sl]
   1eb10:	mov	r0, r4
   1eb14:	sub	sp, fp, #28
   1eb18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb20:	add	fp, sp, #28
   1eb24:	sub	sp, sp, #36	; 0x24
   1eb28:	movw	r8, #21112	; 0x5278
   1eb2c:	cmp	r3, #0
   1eb30:	mov	r4, r2
   1eb34:	str	r2, [sp, #24]
   1eb38:	mov	r5, r1
   1eb3c:	mov	r6, r0
   1eb40:	str	r0, [sp, #20]
   1eb44:	movt	r8, #3
   1eb48:	movne	r8, r3
   1eb4c:	bl	118e8 <__errno_location@plt>
   1eb50:	str	r0, [sp, #28]
   1eb54:	ldr	r1, [r8, #40]	; 0x28
   1eb58:	ldr	r2, [r8, #44]	; 0x2c
   1eb5c:	ldr	r7, [r0]
   1eb60:	cmp	r4, #0
   1eb64:	add	sl, r8, #8
   1eb68:	mov	r0, #0
   1eb6c:	ldm	r8, {r3, r9}
   1eb70:	orreq	r9, r9, #1
   1eb74:	stm	sp, {r3, r9, sl}
   1eb78:	str	r1, [sp, #12]
   1eb7c:	str	r2, [sp, #16]
   1eb80:	mov	r1, #0
   1eb84:	mov	r2, r6
   1eb88:	mov	r3, r5
   1eb8c:	str	r7, [sp, #32]
   1eb90:	mov	r7, r5
   1eb94:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1eb98:	add	r4, r0, #1
   1eb9c:	mov	r5, r0
   1eba0:	mov	r0, r4
   1eba4:	bl	204d0 <__assert_fail@plt+0xea44>
   1eba8:	mov	r6, r0
   1ebac:	ldr	r0, [r8]
   1ebb0:	ldr	r2, [r8, #44]	; 0x2c
   1ebb4:	ldr	r1, [r8, #40]	; 0x28
   1ebb8:	mov	r3, r7
   1ebbc:	stm	sp, {r0, r9, sl}
   1ebc0:	str	r2, [sp, #16]
   1ebc4:	ldr	r2, [sp, #20]
   1ebc8:	str	r1, [sp, #12]
   1ebcc:	mov	r0, r6
   1ebd0:	mov	r1, r4
   1ebd4:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1ebd8:	ldr	r0, [sp, #24]
   1ebdc:	ldr	r1, [sp, #32]
   1ebe0:	ldr	r2, [sp, #28]
   1ebe4:	cmp	r0, #0
   1ebe8:	str	r1, [r2]
   1ebec:	strne	r5, [r0]
   1ebf0:	mov	r0, r6
   1ebf4:	sub	sp, fp, #28
   1ebf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebfc:	push	{r4, r5, r6, r7, fp, lr}
   1ec00:	add	fp, sp, #16
   1ec04:	movw	r4, #20928	; 0x51c0
   1ec08:	movt	r4, #3
   1ec0c:	ldrd	r6, [r4]
   1ec10:	cmp	r7, #2
   1ec14:	blt	1ec40 <__assert_fail@plt+0xd1b4>
   1ec18:	add	r5, r6, #12
   1ec1c:	mov	r7, #0
   1ec20:	ldr	r0, [r5, r7, lsl #3]
   1ec24:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1ec28:	ldr	r1, [r4, #4]
   1ec2c:	add	r2, r7, #2
   1ec30:	add	r0, r7, #1
   1ec34:	mov	r7, r0
   1ec38:	cmp	r2, r1
   1ec3c:	blt	1ec20 <__assert_fail@plt+0xd194>
   1ec40:	ldr	r0, [r6, #4]
   1ec44:	movw	r5, #21160	; 0x52a8
   1ec48:	movt	r5, #3
   1ec4c:	cmp	r0, r5
   1ec50:	beq	1ec64 <__assert_fail@plt+0xd1d8>
   1ec54:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1ec58:	mov	r0, #256	; 0x100
   1ec5c:	str	r0, [r4, #8]
   1ec60:	str	r5, [r4, #12]
   1ec64:	add	r5, r4, #8
   1ec68:	cmp	r6, r5
   1ec6c:	beq	1ec7c <__assert_fail@plt+0xd1f0>
   1ec70:	mov	r0, r6
   1ec74:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1ec78:	str	r5, [r4]
   1ec7c:	mov	r0, #1
   1ec80:	str	r0, [r4, #4]
   1ec84:	pop	{r4, r5, r6, r7, fp, pc}
   1ec88:	movw	r3, #21112	; 0x5278
   1ec8c:	mvn	r2, #0
   1ec90:	movt	r3, #3
   1ec94:	b	1ec98 <__assert_fail@plt+0xd20c>
   1ec98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec9c:	add	fp, sp, #28
   1eca0:	sub	sp, sp, #44	; 0x2c
   1eca4:	mov	r7, r3
   1eca8:	str	r2, [sp, #36]	; 0x24
   1ecac:	str	r1, [sp, #32]
   1ecb0:	mov	r5, r0
   1ecb4:	bl	118e8 <__errno_location@plt>
   1ecb8:	cmp	r5, #0
   1ecbc:	bmi	1ee24 <__assert_fail@plt+0xd398>
   1ecc0:	cmn	r5, #-2147483647	; 0x80000001
   1ecc4:	beq	1ee24 <__assert_fail@plt+0xd398>
   1ecc8:	movw	r8, #20928	; 0x51c0
   1eccc:	mov	r4, r0
   1ecd0:	ldr	r0, [r0]
   1ecd4:	movt	r8, #3
   1ecd8:	str	r4, [sp, #28]
   1ecdc:	ldr	r1, [r8, #4]
   1ece0:	ldr	r6, [r8]
   1ece4:	str	r0, [sp, #24]
   1ece8:	cmp	r1, r5
   1ecec:	ble	1ecf8 <__assert_fail@plt+0xd26c>
   1ecf0:	mov	sl, r6
   1ecf4:	b	1ed60 <__assert_fail@plt+0xd2d4>
   1ecf8:	mov	r0, #8
   1ecfc:	add	r9, r8, #8
   1ed00:	str	r1, [fp, #-32]	; 0xffffffe0
   1ed04:	sub	r1, r5, r1
   1ed08:	mvn	r3, #-2147483648	; 0x80000000
   1ed0c:	str	r0, [sp]
   1ed10:	subs	r0, r6, r9
   1ed14:	add	r2, r1, #1
   1ed18:	sub	r1, fp, #32
   1ed1c:	movne	r0, r6
   1ed20:	bl	206d0 <__assert_fail@plt+0xec44>
   1ed24:	mov	sl, r0
   1ed28:	cmp	r6, r9
   1ed2c:	str	r0, [r8]
   1ed30:	bne	1ed3c <__assert_fail@plt+0xd2b0>
   1ed34:	ldrd	r0, [r8, #8]
   1ed38:	stm	sl, {r0, r1}
   1ed3c:	ldr	r1, [r8, #4]
   1ed40:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1ed44:	add	r0, sl, r1, lsl #3
   1ed48:	sub	r1, r2, r1
   1ed4c:	lsl	r2, r1, #3
   1ed50:	mov	r1, #0
   1ed54:	bl	11918 <memset@plt>
   1ed58:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1ed5c:	str	r0, [r8, #4]
   1ed60:	mov	r9, sl
   1ed64:	ldm	r7, {r0, r1}
   1ed68:	orr	r8, r1, #1
   1ed6c:	add	r1, r7, #8
   1ed70:	ldr	r2, [r7, #40]	; 0x28
   1ed74:	ldr	r3, [r7, #44]	; 0x2c
   1ed78:	ldr	r6, [r9, r5, lsl #3]!
   1ed7c:	str	r1, [sp, #20]
   1ed80:	ldr	r4, [r9, #4]!
   1ed84:	stm	sp, {r0, r8}
   1ed88:	add	r0, sp, #8
   1ed8c:	stm	r0, {r1, r2, r3}
   1ed90:	ldr	r2, [sp, #32]
   1ed94:	ldr	r3, [sp, #36]	; 0x24
   1ed98:	mov	r1, r6
   1ed9c:	mov	r0, r4
   1eda0:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1eda4:	cmp	r6, r0
   1eda8:	bhi	1ee0c <__assert_fail@plt+0xd380>
   1edac:	add	r6, r0, #1
   1edb0:	movw	r0, #21160	; 0x52a8
   1edb4:	movt	r0, #3
   1edb8:	str	r6, [sl, r5, lsl #3]
   1edbc:	cmp	r4, r0
   1edc0:	beq	1edcc <__assert_fail@plt+0xd340>
   1edc4:	mov	r0, r4
   1edc8:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1edcc:	mov	r0, r6
   1edd0:	bl	204d0 <__assert_fail@plt+0xea44>
   1edd4:	str	r0, [r9]
   1edd8:	mov	r4, r0
   1eddc:	add	r3, sp, #8
   1ede0:	ldr	r0, [r7]
   1ede4:	ldr	r1, [r7, #40]	; 0x28
   1ede8:	ldr	r2, [r7, #44]	; 0x2c
   1edec:	stm	sp, {r0, r8}
   1edf0:	ldr	r0, [sp, #20]
   1edf4:	stm	r3, {r0, r1, r2}
   1edf8:	ldr	r2, [sp, #32]
   1edfc:	ldr	r3, [sp, #36]	; 0x24
   1ee00:	mov	r0, r4
   1ee04:	mov	r1, r6
   1ee08:	bl	1d6ac <__assert_fail@plt+0xbc20>
   1ee0c:	ldr	r1, [sp, #24]
   1ee10:	ldr	r0, [sp, #28]
   1ee14:	str	r1, [r0]
   1ee18:	mov	r0, r4
   1ee1c:	sub	sp, fp, #28
   1ee20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ee24:	bl	11a5c <abort@plt>
   1ee28:	movw	r3, #21112	; 0x5278
   1ee2c:	movt	r3, #3
   1ee30:	b	1ec98 <__assert_fail@plt+0xd20c>
   1ee34:	movw	r3, #21112	; 0x5278
   1ee38:	mov	r1, r0
   1ee3c:	mov	r0, #0
   1ee40:	mvn	r2, #0
   1ee44:	movt	r3, #3
   1ee48:	b	1ec98 <__assert_fail@plt+0xd20c>
   1ee4c:	movw	r3, #21112	; 0x5278
   1ee50:	mov	r2, r1
   1ee54:	mov	r1, r0
   1ee58:	mov	r0, #0
   1ee5c:	movt	r3, #3
   1ee60:	b	1ec98 <__assert_fail@plt+0xd20c>
   1ee64:	push	{fp, lr}
   1ee68:	mov	fp, sp
   1ee6c:	sub	sp, sp, #48	; 0x30
   1ee70:	vmov.i32	q8, #0	; 0x00000000
   1ee74:	mov	ip, #32
   1ee78:	mov	r3, sp
   1ee7c:	mov	lr, r2
   1ee80:	cmp	r1, #10
   1ee84:	add	r2, r3, #16
   1ee88:	vst1.64	{d16-d17}, [r3], ip
   1ee8c:	vst1.64	{d16-d17}, [r2]
   1ee90:	vst1.64	{d16-d17}, [r3]
   1ee94:	beq	1eeb4 <__assert_fail@plt+0xd428>
   1ee98:	str	r1, [sp]
   1ee9c:	mov	r3, sp
   1eea0:	mov	r1, lr
   1eea4:	mvn	r2, #0
   1eea8:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1eeac:	mov	sp, fp
   1eeb0:	pop	{fp, pc}
   1eeb4:	bl	11a5c <abort@plt>
   1eeb8:	push	{r4, sl, fp, lr}
   1eebc:	add	fp, sp, #8
   1eec0:	sub	sp, sp, #48	; 0x30
   1eec4:	vmov.i32	q8, #0	; 0x00000000
   1eec8:	mov	ip, r3
   1eecc:	mov	r3, sp
   1eed0:	mov	lr, #32
   1eed4:	cmp	r1, #10
   1eed8:	add	r4, r3, #16
   1eedc:	vst1.64	{d16-d17}, [r3], lr
   1eee0:	vst1.64	{d16-d17}, [r4]
   1eee4:	vst1.64	{d16-d17}, [r3]
   1eee8:	beq	1ef08 <__assert_fail@plt+0xd47c>
   1eeec:	str	r1, [sp]
   1eef0:	mov	r1, r2
   1eef4:	mov	r3, sp
   1eef8:	mov	r2, ip
   1eefc:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1ef00:	sub	sp, fp, #8
   1ef04:	pop	{r4, sl, fp, pc}
   1ef08:	bl	11a5c <abort@plt>
   1ef0c:	push	{fp, lr}
   1ef10:	mov	fp, sp
   1ef14:	sub	sp, sp, #48	; 0x30
   1ef18:	vmov.i32	q8, #0	; 0x00000000
   1ef1c:	mov	r3, sp
   1ef20:	mov	ip, #32
   1ef24:	cmp	r0, #10
   1ef28:	add	r2, r3, #16
   1ef2c:	vst1.64	{d16-d17}, [r3], ip
   1ef30:	vst1.64	{d16-d17}, [r2]
   1ef34:	vst1.64	{d16-d17}, [r3]
   1ef38:	beq	1ef58 <__assert_fail@plt+0xd4cc>
   1ef3c:	str	r0, [sp]
   1ef40:	mov	r3, sp
   1ef44:	mov	r0, #0
   1ef48:	mvn	r2, #0
   1ef4c:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1ef50:	mov	sp, fp
   1ef54:	pop	{fp, pc}
   1ef58:	bl	11a5c <abort@plt>
   1ef5c:	push	{fp, lr}
   1ef60:	mov	fp, sp
   1ef64:	sub	sp, sp, #48	; 0x30
   1ef68:	vmov.i32	q8, #0	; 0x00000000
   1ef6c:	mov	r3, sp
   1ef70:	mov	ip, #32
   1ef74:	cmp	r0, #10
   1ef78:	add	lr, r3, #16
   1ef7c:	vst1.64	{d16-d17}, [r3], ip
   1ef80:	vst1.64	{d16-d17}, [lr]
   1ef84:	vst1.64	{d16-d17}, [r3]
   1ef88:	beq	1efa4 <__assert_fail@plt+0xd518>
   1ef8c:	str	r0, [sp]
   1ef90:	mov	r3, sp
   1ef94:	mov	r0, #0
   1ef98:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1ef9c:	mov	sp, fp
   1efa0:	pop	{fp, pc}
   1efa4:	bl	11a5c <abort@plt>
   1efa8:	push	{r4, sl, fp, lr}
   1efac:	add	fp, sp, #8
   1efb0:	sub	sp, sp, #48	; 0x30
   1efb4:	mov	lr, r0
   1efb8:	movw	r0, #21112	; 0x5278
   1efbc:	mov	ip, r1
   1efc0:	mov	r1, #32
   1efc4:	mov	r4, #1
   1efc8:	movt	r0, #3
   1efcc:	add	r3, r0, #16
   1efd0:	vld1.64	{d16-d17}, [r0], r1
   1efd4:	vld1.64	{d20-d21}, [r0]
   1efd8:	vld1.64	{d18-d19}, [r3]
   1efdc:	mov	r3, sp
   1efe0:	add	r0, r3, #32
   1efe4:	add	r1, r3, #16
   1efe8:	vst1.64	{d20-d21}, [r0]
   1efec:	mov	r0, #28
   1eff0:	vst1.64	{d18-d19}, [r1]
   1eff4:	mov	r1, r3
   1eff8:	and	r0, r0, r2, lsr #3
   1effc:	and	r2, r2, #31
   1f000:	vst1.64	{d16-d17}, [r1], r0
   1f004:	ldr	r0, [r1, #8]
   1f008:	bic	r4, r4, r0, lsr r2
   1f00c:	eor	r0, r0, r4, lsl r2
   1f010:	mov	r2, ip
   1f014:	str	r0, [r1, #8]
   1f018:	mov	r0, #0
   1f01c:	mov	r1, lr
   1f020:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f024:	sub	sp, fp, #8
   1f028:	pop	{r4, sl, fp, pc}
   1f02c:	push	{fp, lr}
   1f030:	mov	fp, sp
   1f034:	sub	sp, sp, #48	; 0x30
   1f038:	mov	ip, r0
   1f03c:	movw	r0, #21112	; 0x5278
   1f040:	mov	r2, #32
   1f044:	movt	r0, #3
   1f048:	add	r3, r0, #16
   1f04c:	vld1.64	{d16-d17}, [r0], r2
   1f050:	vld1.64	{d20-d21}, [r0]
   1f054:	vld1.64	{d18-d19}, [r3]
   1f058:	mov	r3, sp
   1f05c:	add	r0, r3, #32
   1f060:	add	r2, r3, #16
   1f064:	vst1.64	{d20-d21}, [r0]
   1f068:	mov	r0, #28
   1f06c:	vst1.64	{d18-d19}, [r2]
   1f070:	mov	r2, r3
   1f074:	and	r0, r0, r1, lsr #3
   1f078:	and	r1, r1, #31
   1f07c:	vst1.64	{d16-d17}, [r2], r0
   1f080:	mov	r0, #1
   1f084:	ldr	lr, [r2, #8]
   1f088:	bic	r0, r0, lr, lsr r1
   1f08c:	eor	r0, lr, r0, lsl r1
   1f090:	mov	r1, ip
   1f094:	str	r0, [r2, #8]
   1f098:	mov	r0, #0
   1f09c:	mvn	r2, #0
   1f0a0:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f0a4:	mov	sp, fp
   1f0a8:	pop	{fp, pc}
   1f0ac:	push	{fp, lr}
   1f0b0:	mov	fp, sp
   1f0b4:	sub	sp, sp, #48	; 0x30
   1f0b8:	mov	r1, r0
   1f0bc:	movw	r0, #21112	; 0x5278
   1f0c0:	mov	r3, #32
   1f0c4:	movt	r0, #3
   1f0c8:	add	r2, r0, #16
   1f0cc:	vld1.64	{d16-d17}, [r0], r3
   1f0d0:	mov	r3, sp
   1f0d4:	vld1.64	{d18-d19}, [r2]
   1f0d8:	vld1.64	{d20-d21}, [r0]
   1f0dc:	add	r2, r3, #16
   1f0e0:	add	r0, r3, #32
   1f0e4:	vst1.64	{d18-d19}, [r2]
   1f0e8:	vst1.64	{d20-d21}, [r0]
   1f0ec:	mov	r0, #12
   1f0f0:	mov	r2, r3
   1f0f4:	vst1.64	{d16-d17}, [r2], r0
   1f0f8:	ldr	r0, [r2]
   1f0fc:	orr	r0, r0, #67108864	; 0x4000000
   1f100:	str	r0, [r2]
   1f104:	mov	r0, #0
   1f108:	mvn	r2, #0
   1f10c:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f110:	mov	sp, fp
   1f114:	pop	{fp, pc}
   1f118:	push	{fp, lr}
   1f11c:	mov	fp, sp
   1f120:	sub	sp, sp, #48	; 0x30
   1f124:	mov	ip, r1
   1f128:	mov	r1, r0
   1f12c:	movw	r0, #21112	; 0x5278
   1f130:	mov	r2, #32
   1f134:	movt	r0, #3
   1f138:	add	r3, r0, #16
   1f13c:	vld1.64	{d16-d17}, [r0], r2
   1f140:	vld1.64	{d18-d19}, [r3]
   1f144:	vld1.64	{d20-d21}, [r0]
   1f148:	mov	r3, sp
   1f14c:	add	r2, r3, #16
   1f150:	add	r0, r3, #32
   1f154:	vst1.64	{d18-d19}, [r2]
   1f158:	vst1.64	{d20-d21}, [r0]
   1f15c:	mov	r0, #12
   1f160:	mov	r2, r3
   1f164:	vst1.64	{d16-d17}, [r2], r0
   1f168:	ldr	r0, [r2]
   1f16c:	orr	r0, r0, #67108864	; 0x4000000
   1f170:	str	r0, [r2]
   1f174:	mov	r0, #0
   1f178:	mov	r2, ip
   1f17c:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f180:	mov	sp, fp
   1f184:	pop	{fp, pc}
   1f188:	push	{r4, sl, fp, lr}
   1f18c:	add	fp, sp, #8
   1f190:	sub	sp, sp, #96	; 0x60
   1f194:	vmov.i32	q8, #0	; 0x00000000
   1f198:	mov	ip, r2
   1f19c:	mov	r2, sp
   1f1a0:	mov	r4, #28
   1f1a4:	cmp	r1, #10
   1f1a8:	mov	r3, r2
   1f1ac:	add	lr, r2, #16
   1f1b0:	vst1.64	{d16-d17}, [r3], r4
   1f1b4:	vst1.64	{d16-d17}, [lr]
   1f1b8:	vst1.32	{d16-d17}, [r3]
   1f1bc:	beq	1f20c <__assert_fail@plt+0xd780>
   1f1c0:	vld1.64	{d16-d17}, [r2], r4
   1f1c4:	vld1.64	{d18-d19}, [lr]
   1f1c8:	add	r3, sp, #48	; 0x30
   1f1cc:	vld1.32	{d20-d21}, [r2]
   1f1d0:	add	r2, r3, #20
   1f1d4:	add	r4, r3, #4
   1f1d8:	vst1.32	{d18-d19}, [r2]
   1f1dc:	add	r2, r3, #32
   1f1e0:	vst1.32	{d16-d17}, [r4]
   1f1e4:	vst1.32	{d20-d21}, [r2]
   1f1e8:	str	r1, [sp, #48]	; 0x30
   1f1ec:	mvn	r2, #0
   1f1f0:	ldr	r1, [sp, #60]	; 0x3c
   1f1f4:	orr	r1, r1, #67108864	; 0x4000000
   1f1f8:	str	r1, [sp, #60]	; 0x3c
   1f1fc:	mov	r1, ip
   1f200:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f204:	sub	sp, fp, #8
   1f208:	pop	{r4, sl, fp, pc}
   1f20c:	bl	11a5c <abort@plt>
   1f210:	push	{r4, r5, r6, sl, fp, lr}
   1f214:	add	fp, sp, #16
   1f218:	sub	sp, sp, #48	; 0x30
   1f21c:	mov	ip, r3
   1f220:	movw	r3, #21112	; 0x5278
   1f224:	mov	r6, #32
   1f228:	cmp	r1, #0
   1f22c:	mov	r4, sp
   1f230:	movt	r3, #3
   1f234:	cmpne	r2, #0
   1f238:	add	r5, r4, #16
   1f23c:	add	lr, r3, #16
   1f240:	vld1.64	{d16-d17}, [r3], r6
   1f244:	vld1.64	{d18-d19}, [lr]
   1f248:	vld1.64	{d20-d21}, [r3]
   1f24c:	mov	r3, #10
   1f250:	vst1.64	{d16-d17}, [r4], r6
   1f254:	vst1.64	{d18-d19}, [r5]
   1f258:	vst1.64	{d20-d21}, [r4]
   1f25c:	str	r3, [sp]
   1f260:	bne	1f268 <__assert_fail@plt+0xd7dc>
   1f264:	bl	11a5c <abort@plt>
   1f268:	str	r2, [sp, #44]	; 0x2c
   1f26c:	str	r1, [sp, #40]	; 0x28
   1f270:	mov	r3, sp
   1f274:	mov	r1, ip
   1f278:	mvn	r2, #0
   1f27c:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f280:	sub	sp, fp, #16
   1f284:	pop	{r4, r5, r6, sl, fp, pc}
   1f288:	push	{r4, r5, r6, sl, fp, lr}
   1f28c:	add	fp, sp, #16
   1f290:	sub	sp, sp, #48	; 0x30
   1f294:	mov	lr, r3
   1f298:	movw	r3, #21112	; 0x5278
   1f29c:	mov	r6, #32
   1f2a0:	cmp	r1, #0
   1f2a4:	mov	r4, sp
   1f2a8:	movt	r3, #3
   1f2ac:	cmpne	r2, #0
   1f2b0:	add	r5, r4, #16
   1f2b4:	add	ip, r3, #16
   1f2b8:	vld1.64	{d16-d17}, [r3], r6
   1f2bc:	vld1.64	{d18-d19}, [ip]
   1f2c0:	vld1.64	{d20-d21}, [r3]
   1f2c4:	mov	r3, #10
   1f2c8:	vst1.64	{d16-d17}, [r4], r6
   1f2cc:	vst1.64	{d18-d19}, [r5]
   1f2d0:	vst1.64	{d20-d21}, [r4]
   1f2d4:	str	r3, [sp]
   1f2d8:	bne	1f2e0 <__assert_fail@plt+0xd854>
   1f2dc:	bl	11a5c <abort@plt>
   1f2e0:	ldr	ip, [fp, #8]
   1f2e4:	str	r2, [sp, #44]	; 0x2c
   1f2e8:	str	r1, [sp, #40]	; 0x28
   1f2ec:	mov	r3, sp
   1f2f0:	mov	r1, lr
   1f2f4:	mov	r2, ip
   1f2f8:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f2fc:	sub	sp, fp, #16
   1f300:	pop	{r4, r5, r6, sl, fp, pc}
   1f304:	push	{r4, sl, fp, lr}
   1f308:	add	fp, sp, #8
   1f30c:	sub	sp, sp, #48	; 0x30
   1f310:	movw	r3, #21112	; 0x5278
   1f314:	mov	lr, #32
   1f318:	mov	ip, r2
   1f31c:	cmp	r0, #0
   1f320:	movt	r3, #3
   1f324:	cmpne	r1, #0
   1f328:	add	r2, r3, #16
   1f32c:	vld1.64	{d16-d17}, [r3], lr
   1f330:	vld1.64	{d20-d21}, [r3]
   1f334:	vld1.64	{d18-d19}, [r2]
   1f338:	mov	r2, sp
   1f33c:	add	r4, r2, #16
   1f340:	vst1.64	{d16-d17}, [r2], lr
   1f344:	vst1.64	{d20-d21}, [r2]
   1f348:	mov	r2, #10
   1f34c:	vst1.64	{d18-d19}, [r4]
   1f350:	str	r2, [sp]
   1f354:	bne	1f35c <__assert_fail@plt+0xd8d0>
   1f358:	bl	11a5c <abort@plt>
   1f35c:	str	r1, [sp, #44]	; 0x2c
   1f360:	str	r0, [sp, #40]	; 0x28
   1f364:	mov	r3, sp
   1f368:	mov	r0, #0
   1f36c:	mov	r1, ip
   1f370:	mvn	r2, #0
   1f374:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f378:	sub	sp, fp, #8
   1f37c:	pop	{r4, sl, fp, pc}
   1f380:	push	{r4, r5, fp, lr}
   1f384:	add	fp, sp, #8
   1f388:	sub	sp, sp, #48	; 0x30
   1f38c:	mov	ip, r3
   1f390:	movw	r3, #21112	; 0x5278
   1f394:	mov	r4, #32
   1f398:	mov	lr, r2
   1f39c:	cmp	r0, #0
   1f3a0:	movt	r3, #3
   1f3a4:	cmpne	r1, #0
   1f3a8:	add	r2, r3, #16
   1f3ac:	vld1.64	{d16-d17}, [r3], r4
   1f3b0:	vld1.64	{d20-d21}, [r3]
   1f3b4:	vld1.64	{d18-d19}, [r2]
   1f3b8:	mov	r2, sp
   1f3bc:	add	r5, r2, #16
   1f3c0:	vst1.64	{d16-d17}, [r2], r4
   1f3c4:	vst1.64	{d20-d21}, [r2]
   1f3c8:	mov	r2, #10
   1f3cc:	vst1.64	{d18-d19}, [r5]
   1f3d0:	str	r2, [sp]
   1f3d4:	bne	1f3dc <__assert_fail@plt+0xd950>
   1f3d8:	bl	11a5c <abort@plt>
   1f3dc:	str	r1, [sp, #44]	; 0x2c
   1f3e0:	str	r0, [sp, #40]	; 0x28
   1f3e4:	mov	r3, sp
   1f3e8:	mov	r0, #0
   1f3ec:	mov	r1, lr
   1f3f0:	mov	r2, ip
   1f3f4:	bl	1ec98 <__assert_fail@plt+0xd20c>
   1f3f8:	sub	sp, fp, #8
   1f3fc:	pop	{r4, r5, fp, pc}
   1f400:	movw	r3, #20880	; 0x5190
   1f404:	movt	r3, #3
   1f408:	b	1ec98 <__assert_fail@plt+0xd20c>
   1f40c:	movw	r3, #20880	; 0x5190
   1f410:	mov	r2, r1
   1f414:	mov	r1, r0
   1f418:	mov	r0, #0
   1f41c:	movt	r3, #3
   1f420:	b	1ec98 <__assert_fail@plt+0xd20c>
   1f424:	movw	r3, #20880	; 0x5190
   1f428:	mvn	r2, #0
   1f42c:	movt	r3, #3
   1f430:	b	1ec98 <__assert_fail@plt+0xd20c>
   1f434:	movw	r3, #20880	; 0x5190
   1f438:	mov	r1, r0
   1f43c:	mov	r0, #0
   1f440:	mvn	r2, #0
   1f444:	movt	r3, #3
   1f448:	b	1ec98 <__assert_fail@plt+0xd20c>
   1f44c:	push	{r4, r5, fp, lr}
   1f450:	add	fp, sp, #8
   1f454:	mov	r4, #0
   1f458:	mov	r5, r0
   1f45c:	mov	r1, #524288	; 0x80000
   1f460:	str	r4, [r0, #4]
   1f464:	movw	r0, #16319	; 0x3fbf
   1f468:	movt	r0, #2
   1f46c:	bl	21d3c <__assert_fail@plt+0x102b0>
   1f470:	cmn	r0, #1
   1f474:	str	r0, [r5]
   1f478:	ble	1f484 <__assert_fail@plt+0xd9f8>
   1f47c:	mov	r0, r4
   1f480:	pop	{r4, r5, fp, pc}
   1f484:	mov	r0, #0
   1f488:	mov	r1, #0
   1f48c:	mov	r4, #0
   1f490:	bl	1187c <getcwd@plt>
   1f494:	cmp	r0, #0
   1f498:	str	r0, [r5, #4]
   1f49c:	mvneq	r4, #0
   1f4a0:	mov	r0, r4
   1f4a4:	pop	{r4, r5, fp, pc}
   1f4a8:	ldr	r1, [r0]
   1f4ac:	cmp	r1, #0
   1f4b0:	bmi	1f4bc <__assert_fail@plt+0xda30>
   1f4b4:	mov	r0, r1
   1f4b8:	b	119f0 <fchdir@plt>
   1f4bc:	ldr	r0, [r0, #4]
   1f4c0:	b	2185c <__assert_fail@plt+0xfdd0>
   1f4c4:	push	{r4, sl, fp, lr}
   1f4c8:	add	fp, sp, #8
   1f4cc:	mov	r4, r0
   1f4d0:	ldr	r0, [r0]
   1f4d4:	cmp	r0, #0
   1f4d8:	bmi	1f4e0 <__assert_fail@plt+0xda54>
   1f4dc:	bl	11a68 <close@plt>
   1f4e0:	ldr	r0, [r4, #4]
   1f4e4:	pop	{r4, sl, fp, lr}
   1f4e8:	b	1aa08 <__assert_fail@plt+0x8f7c>
   1f4ec:	push	{r4, r5, fp, lr}
   1f4f0:	add	fp, sp, #8
   1f4f4:	mov	r4, r1
   1f4f8:	bl	11894 <getfilecon@plt>
   1f4fc:	cmp	r0, #10
   1f500:	beq	1f518 <__assert_fail@plt+0xda8c>
   1f504:	cmp	r0, #0
   1f508:	bne	1f55c <__assert_fail@plt+0xdad0>
   1f50c:	bl	118e8 <__errno_location@plt>
   1f510:	mov	r1, #95	; 0x5f
   1f514:	b	1f554 <__assert_fail@plt+0xdac8>
   1f518:	ldr	r5, [r4]
   1f51c:	movw	r1, #17020	; 0x427c
   1f520:	movt	r1, #2
   1f524:	mov	r0, r5
   1f528:	bl	116b4 <strcmp@plt>
   1f52c:	mov	r1, r0
   1f530:	mov	r0, #10
   1f534:	cmp	r1, #0
   1f538:	popne	{r4, r5, fp, pc}
   1f53c:	mov	r0, r5
   1f540:	bl	11a14 <freecon@plt>
   1f544:	mov	r0, #0
   1f548:	str	r0, [r4]
   1f54c:	bl	118e8 <__errno_location@plt>
   1f550:	mov	r1, #61	; 0x3d
   1f554:	str	r1, [r0]
   1f558:	mvn	r0, #0
   1f55c:	pop	{r4, r5, fp, pc}
   1f560:	push	{r4, r5, fp, lr}
   1f564:	add	fp, sp, #8
   1f568:	mov	r4, r1
   1f56c:	bl	11804 <lgetfilecon@plt>
   1f570:	cmp	r0, #10
   1f574:	beq	1f58c <__assert_fail@plt+0xdb00>
   1f578:	cmp	r0, #0
   1f57c:	bne	1f5d0 <__assert_fail@plt+0xdb44>
   1f580:	bl	118e8 <__errno_location@plt>
   1f584:	mov	r1, #95	; 0x5f
   1f588:	b	1f5c8 <__assert_fail@plt+0xdb3c>
   1f58c:	ldr	r5, [r4]
   1f590:	movw	r1, #17020	; 0x427c
   1f594:	movt	r1, #2
   1f598:	mov	r0, r5
   1f59c:	bl	116b4 <strcmp@plt>
   1f5a0:	mov	r1, r0
   1f5a4:	mov	r0, #10
   1f5a8:	cmp	r1, #0
   1f5ac:	popne	{r4, r5, fp, pc}
   1f5b0:	mov	r0, r5
   1f5b4:	bl	11a14 <freecon@plt>
   1f5b8:	mov	r0, #0
   1f5bc:	str	r0, [r4]
   1f5c0:	bl	118e8 <__errno_location@plt>
   1f5c4:	mov	r1, #61	; 0x3d
   1f5c8:	str	r1, [r0]
   1f5cc:	mvn	r0, #0
   1f5d0:	pop	{r4, r5, fp, pc}
   1f5d4:	push	{r4, r5, fp, lr}
   1f5d8:	add	fp, sp, #8
   1f5dc:	mov	r4, r1
   1f5e0:	bl	11738 <fgetfilecon@plt>
   1f5e4:	cmp	r0, #10
   1f5e8:	beq	1f600 <__assert_fail@plt+0xdb74>
   1f5ec:	cmp	r0, #0
   1f5f0:	bne	1f644 <__assert_fail@plt+0xdbb8>
   1f5f4:	bl	118e8 <__errno_location@plt>
   1f5f8:	mov	r1, #95	; 0x5f
   1f5fc:	b	1f63c <__assert_fail@plt+0xdbb0>
   1f600:	ldr	r5, [r4]
   1f604:	movw	r1, #17020	; 0x427c
   1f608:	movt	r1, #2
   1f60c:	mov	r0, r5
   1f610:	bl	116b4 <strcmp@plt>
   1f614:	mov	r1, r0
   1f618:	mov	r0, #10
   1f61c:	cmp	r1, #0
   1f620:	popne	{r4, r5, fp, pc}
   1f624:	mov	r0, r5
   1f628:	bl	11a14 <freecon@plt>
   1f62c:	mov	r0, #0
   1f630:	str	r0, [r4]
   1f634:	bl	118e8 <__errno_location@plt>
   1f638:	mov	r1, #61	; 0x3d
   1f63c:	str	r1, [r0]
   1f640:	mvn	r0, #0
   1f644:	pop	{r4, r5, fp, pc}
   1f648:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1f64c:	add	fp, sp, #24
   1f650:	mov	r4, r0
   1f654:	cmp	r0, #0
   1f658:	beq	1f68c <__assert_fail@plt+0xdc00>
   1f65c:	mov	r0, r4
   1f660:	bl	118ac <strlen@plt>
   1f664:	add	r5, r0, #1
   1f668:	cmp	r5, #58	; 0x3a
   1f66c:	bls	1f690 <__assert_fail@plt+0xdc04>
   1f670:	add	r0, r0, #10
   1f674:	bic	r0, r0, #3
   1f678:	bl	20ae4 <__assert_fail@plt+0xf058>
   1f67c:	mov	r6, r0
   1f680:	cmp	r0, #0
   1f684:	bne	1f6a4 <__assert_fail@plt+0xdc18>
   1f688:	b	1f6dc <__assert_fail@plt+0xdc50>
   1f68c:	mov	r5, #0
   1f690:	mov	r0, #64	; 0x40
   1f694:	bl	20ae4 <__assert_fail@plt+0xf058>
   1f698:	mov	r6, r0
   1f69c:	cmp	r0, #0
   1f6a0:	beq	1f6dc <__assert_fail@plt+0xdc50>
   1f6a4:	cmp	r4, #0
   1f6a8:	mov	r0, r4
   1f6ac:	mov	r8, #0
   1f6b0:	mov	r7, r6
   1f6b4:	movwne	r0, #1
   1f6b8:	str	r8, [r6]
   1f6bc:	strb	r0, [r6, #4]
   1f6c0:	strb	r8, [r7, #5]!
   1f6c4:	beq	1f6dc <__assert_fail@plt+0xdc50>
   1f6c8:	mov	r0, r7
   1f6cc:	mov	r1, r4
   1f6d0:	mov	r2, r5
   1f6d4:	bl	11708 <memcpy@plt>
   1f6d8:	strb	r8, [r7, r5]
   1f6dc:	mov	r0, r6
   1f6e0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1f6e4:	push	{r4, sl, fp, lr}
   1f6e8:	add	fp, sp, #8
   1f6ec:	cmp	r0, #2
   1f6f0:	popcc	{r4, sl, fp, pc}
   1f6f4:	ldr	r4, [r0]
   1f6f8:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1f6fc:	cmp	r4, #0
   1f700:	mov	r0, r4
   1f704:	bne	1f6f4 <__assert_fail@plt+0xdc68>
   1f708:	pop	{r4, sl, fp, pc}
   1f70c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f710:	add	fp, sp, #28
   1f714:	sub	sp, sp, #4
   1f718:	mov	r7, r2
   1f71c:	mov	r5, r1
   1f720:	cmp	r0, #0
   1f724:	beq	1f7a0 <__assert_fail@plt+0xdd14>
   1f728:	mov	r6, r0
   1f72c:	movw	r0, #14822	; 0x39e6
   1f730:	movt	r0, #2
   1f734:	bl	117f8 <getenv@plt>
   1f738:	mov	r9, r0
   1f73c:	ldrb	r0, [r6, #4]
   1f740:	cmp	r9, #0
   1f744:	beq	1f7b4 <__assert_fail@plt+0xdd28>
   1f748:	cmp	r0, #0
   1f74c:	beq	1f764 <__assert_fail@plt+0xdcd8>
   1f750:	add	r0, r6, #5
   1f754:	mov	r1, r9
   1f758:	bl	116b4 <strcmp@plt>
   1f75c:	cmp	r0, #0
   1f760:	beq	1f8a4 <__assert_fail@plt+0xde18>
   1f764:	mov	r0, r9
   1f768:	str	r7, [sp]
   1f76c:	bl	118ac <strlen@plt>
   1f770:	add	sl, r0, #1
   1f774:	mov	r8, #1
   1f778:	cmp	sl, #58	; 0x3a
   1f77c:	bls	1f7c8 <__assert_fail@plt+0xdd3c>
   1f780:	add	r0, r0, #10
   1f784:	bic	r0, r0, #3
   1f788:	bl	20ae4 <__assert_fail@plt+0xf058>
   1f78c:	cmp	r0, #0
   1f790:	bne	1f7d8 <__assert_fail@plt+0xdd4c>
   1f794:	mov	r0, #0
   1f798:	sub	sp, fp, #28
   1f79c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7a0:	mov	r0, r5
   1f7a4:	mov	r1, r7
   1f7a8:	sub	sp, fp, #28
   1f7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7b0:	b	11690 <gmtime_r@plt>
   1f7b4:	mov	r8, #0
   1f7b8:	cmp	r0, #0
   1f7bc:	mov	sl, #0
   1f7c0:	str	r7, [sp]
   1f7c4:	beq	1f8a0 <__assert_fail@plt+0xde14>
   1f7c8:	mov	r0, #64	; 0x40
   1f7cc:	bl	20ae4 <__assert_fail@plt+0xf058>
   1f7d0:	cmp	r0, #0
   1f7d4:	beq	1f794 <__assert_fail@plt+0xdd08>
   1f7d8:	mov	r4, r0
   1f7dc:	mov	r7, r5
   1f7e0:	strb	r8, [r0, #4]
   1f7e4:	mov	r0, #0
   1f7e8:	cmp	r8, #0
   1f7ec:	mov	r5, r4
   1f7f0:	str	r0, [r4]
   1f7f4:	strb	r0, [r5, #5]!
   1f7f8:	beq	1f814 <__assert_fail@plt+0xdd88>
   1f7fc:	mov	r0, r5
   1f800:	mov	r1, r9
   1f804:	mov	r2, sl
   1f808:	mov	r8, #0
   1f80c:	bl	11708 <memcpy@plt>
   1f810:	strb	r8, [r5, sl]
   1f814:	ldrb	r0, [r6, #4]
   1f818:	mov	r5, r7
   1f81c:	cmp	r0, #0
   1f820:	beq	1f880 <__assert_fail@plt+0xddf4>
   1f824:	movw	r0, #14822	; 0x39e6
   1f828:	add	r1, r6, #5
   1f82c:	mov	r2, #1
   1f830:	movt	r0, #2
   1f834:	bl	118c4 <setenv@plt>
   1f838:	ldr	r7, [sp]
   1f83c:	cmp	r0, #0
   1f840:	beq	1f898 <__assert_fail@plt+0xde0c>
   1f844:	bl	118e8 <__errno_location@plt>
   1f848:	ldr	r6, [r0]
   1f84c:	mov	r5, r0
   1f850:	cmp	r4, #2
   1f854:	bcc	1f870 <__assert_fail@plt+0xdde4>
   1f858:	ldr	r7, [r4]
   1f85c:	mov	r0, r4
   1f860:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1f864:	cmp	r7, #0
   1f868:	mov	r4, r7
   1f86c:	bne	1f858 <__assert_fail@plt+0xddcc>
   1f870:	str	r6, [r5]
   1f874:	mov	r0, #0
   1f878:	sub	sp, fp, #28
   1f87c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f880:	movw	r0, #14822	; 0x39e6
   1f884:	movt	r0, #2
   1f888:	bl	11a44 <unsetenv@plt>
   1f88c:	ldr	r7, [sp]
   1f890:	cmp	r0, #0
   1f894:	bne	1f844 <__assert_fail@plt+0xddb8>
   1f898:	bl	11774 <tzset@plt>
   1f89c:	b	1f8a8 <__assert_fail@plt+0xde1c>
   1f8a0:	ldr	r7, [sp]
   1f8a4:	mov	r4, #1
   1f8a8:	mov	r0, r5
   1f8ac:	mov	r1, r7
   1f8b0:	bl	11744 <localtime_r@plt>
   1f8b4:	mov	sl, #1
   1f8b8:	cmp	r0, #0
   1f8bc:	mov	r9, #1
   1f8c0:	beq	1f8d4 <__assert_fail@plt+0xde48>
   1f8c4:	mov	r0, r6
   1f8c8:	mov	r1, r7
   1f8cc:	bl	1f980 <__assert_fail@plt+0xdef4>
   1f8d0:	eor	r9, r0, #1
   1f8d4:	cmp	r4, #1
   1f8d8:	beq	1f93c <__assert_fail@plt+0xdeb0>
   1f8dc:	bl	118e8 <__errno_location@plt>
   1f8e0:	mov	r6, r0
   1f8e4:	ldr	r8, [r0]
   1f8e8:	ldrb	r0, [r4, #4]
   1f8ec:	cmp	r0, #0
   1f8f0:	beq	1f958 <__assert_fail@plt+0xdecc>
   1f8f4:	movw	r0, #14822	; 0x39e6
   1f8f8:	add	r1, r4, #5
   1f8fc:	mov	r2, #1
   1f900:	movt	r0, #2
   1f904:	bl	118c4 <setenv@plt>
   1f908:	cmp	r0, #0
   1f90c:	beq	1f96c <__assert_fail@plt+0xdee0>
   1f910:	ldr	r8, [r6]
   1f914:	mov	sl, #0
   1f918:	cmp	r4, #2
   1f91c:	bcc	1f938 <__assert_fail@plt+0xdeac>
   1f920:	ldr	r5, [r4]
   1f924:	mov	r0, r4
   1f928:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1f92c:	cmp	r5, #0
   1f930:	mov	r4, r5
   1f934:	bne	1f920 <__assert_fail@plt+0xde94>
   1f938:	str	r8, [r6]
   1f93c:	cmp	sl, #0
   1f940:	moveq	r7, sl
   1f944:	cmp	r9, #0
   1f948:	movwne	r7, #0
   1f94c:	mov	r0, r7
   1f950:	sub	sp, fp, #28
   1f954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f958:	movw	r0, #14822	; 0x39e6
   1f95c:	movt	r0, #2
   1f960:	bl	11a44 <unsetenv@plt>
   1f964:	cmp	r0, #0
   1f968:	bne	1f910 <__assert_fail@plt+0xde84>
   1f96c:	bl	11774 <tzset@plt>
   1f970:	mov	sl, #1
   1f974:	cmp	r4, #2
   1f978:	bcs	1f920 <__assert_fail@plt+0xde94>
   1f97c:	b	1f938 <__assert_fail@plt+0xdeac>
   1f980:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f984:	add	fp, sp, #28
   1f988:	sub	sp, sp, #4
   1f98c:	ldr	r7, [r1, #40]	; 0x28
   1f990:	mov	r8, #1
   1f994:	cmp	r7, #0
   1f998:	beq	1fa38 <__assert_fail@plt+0xdfac>
   1f99c:	mov	r5, r1
   1f9a0:	mov	r6, r0
   1f9a4:	cmp	r7, r1
   1f9a8:	bcc	1f9b8 <__assert_fail@plt+0xdf2c>
   1f9ac:	add	r0, r5, #44	; 0x2c
   1f9b0:	cmp	r7, r0
   1f9b4:	bcc	1fa38 <__assert_fail@plt+0xdfac>
   1f9b8:	ldrb	r0, [r7]
   1f9bc:	cmp	r0, #0
   1f9c0:	beq	1fa2c <__assert_fail@plt+0xdfa0>
   1f9c4:	add	r4, r6, #5
   1f9c8:	mov	r0, r4
   1f9cc:	mov	r1, r7
   1f9d0:	bl	116b4 <strcmp@plt>
   1f9d4:	cmp	r0, #0
   1f9d8:	beq	1fadc <__assert_fail@plt+0xe050>
   1f9dc:	ldrb	r0, [r4]
   1f9e0:	cmp	r0, #0
   1f9e4:	bne	1fa00 <__assert_fail@plt+0xdf74>
   1f9e8:	add	r0, r6, #5
   1f9ec:	cmp	r4, r0
   1f9f0:	bne	1fa44 <__assert_fail@plt+0xdfb8>
   1f9f4:	ldrb	r0, [r6, #4]
   1f9f8:	cmp	r0, #0
   1f9fc:	beq	1fa44 <__assert_fail@plt+0xdfb8>
   1fa00:	mov	r0, r4
   1fa04:	bl	118ac <strlen@plt>
   1fa08:	add	r4, r0, r4
   1fa0c:	ldrb	r0, [r4, #1]!
   1fa10:	cmp	r0, #0
   1fa14:	bne	1f9c8 <__assert_fail@plt+0xdf3c>
   1fa18:	ldr	r0, [r6]
   1fa1c:	cmp	r0, #0
   1fa20:	addne	r4, r0, #5
   1fa24:	movne	r6, r0
   1fa28:	b	1f9c8 <__assert_fail@plt+0xdf3c>
   1fa2c:	movw	r4, #12630	; 0x3156
   1fa30:	movt	r4, #2
   1fa34:	str	r4, [r5, #40]	; 0x28
   1fa38:	mov	r0, r8
   1fa3c:	sub	sp, fp, #28
   1fa40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa44:	sub	r0, r6, r4
   1fa48:	add	sl, r0, #64	; 0x40
   1fa4c:	mov	r0, r7
   1fa50:	bl	118ac <strlen@plt>
   1fa54:	add	r9, r0, #1
   1fa58:	cmp	r9, sl
   1fa5c:	bge	1fa88 <__assert_fail@plt+0xdffc>
   1fa60:	mov	r0, r4
   1fa64:	mov	r1, r7
   1fa68:	mov	r2, r9
   1fa6c:	bl	11708 <memcpy@plt>
   1fa70:	mov	r0, #0
   1fa74:	strb	r0, [r4, r9]
   1fa78:	str	r4, [r5, #40]	; 0x28
   1fa7c:	mov	r0, r8
   1fa80:	sub	sp, fp, #28
   1fa84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa88:	add	r0, r0, #10
   1fa8c:	cmp	r9, #59	; 0x3b
   1fa90:	bic	r0, r0, #3
   1fa94:	movwcc	r0, #64	; 0x40
   1fa98:	bl	20ae4 <__assert_fail@plt+0xf058>
   1fa9c:	cmp	r0, #0
   1faa0:	beq	1faec <__assert_fail@plt+0xe060>
   1faa4:	mov	sl, r0
   1faa8:	mov	r0, #1
   1faac:	mov	r1, r7
   1fab0:	mov	r2, r9
   1fab4:	strh	r0, [sl, #4]
   1fab8:	mov	r0, #0
   1fabc:	add	r4, sl, #5
   1fac0:	str	r0, [sl]
   1fac4:	mov	r0, r4
   1fac8:	bl	11708 <memcpy@plt>
   1facc:	mov	r0, #0
   1fad0:	strb	r0, [r4, r9]
   1fad4:	str	sl, [r6]
   1fad8:	strb	r0, [sl, #4]
   1fadc:	str	r4, [r5, #40]	; 0x28
   1fae0:	mov	r0, r8
   1fae4:	sub	sp, fp, #28
   1fae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1faec:	mov	r8, #0
   1faf0:	str	r8, [r6]
   1faf4:	mov	r0, r8
   1faf8:	sub	sp, fp, #28
   1fafc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb04:	add	fp, sp, #28
   1fb08:	sub	sp, sp, #52	; 0x34
   1fb0c:	mov	r9, r1
   1fb10:	cmp	r0, #0
   1fb14:	beq	1fb90 <__assert_fail@plt+0xe104>
   1fb18:	mov	r7, r0
   1fb1c:	movw	r0, #14822	; 0x39e6
   1fb20:	movt	r0, #2
   1fb24:	bl	117f8 <getenv@plt>
   1fb28:	mov	r5, r0
   1fb2c:	ldrb	r0, [r7, #4]
   1fb30:	cmp	r5, #0
   1fb34:	beq	1fba0 <__assert_fail@plt+0xe114>
   1fb38:	cmp	r0, #0
   1fb3c:	beq	1fb54 <__assert_fail@plt+0xe0c8>
   1fb40:	add	r0, r7, #5
   1fb44:	mov	r1, r5
   1fb48:	bl	116b4 <strcmp@plt>
   1fb4c:	cmp	r0, #0
   1fb50:	beq	1fc64 <__assert_fail@plt+0xe1d8>
   1fb54:	mov	r0, r5
   1fb58:	bl	118ac <strlen@plt>
   1fb5c:	add	sl, r0, #1
   1fb60:	mov	r8, #1
   1fb64:	cmp	sl, #58	; 0x3a
   1fb68:	bls	1fbb0 <__assert_fail@plt+0xe124>
   1fb6c:	add	r0, r0, #10
   1fb70:	bic	r0, r0, #3
   1fb74:	bl	20ae4 <__assert_fail@plt+0xf058>
   1fb78:	mvn	r6, #0
   1fb7c:	cmp	r0, #0
   1fb80:	bne	1fbc4 <__assert_fail@plt+0xe138>
   1fb84:	mov	r0, r6
   1fb88:	sub	sp, fp, #28
   1fb8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb90:	mov	r0, r9
   1fb94:	sub	sp, fp, #28
   1fb98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fb9c:	b	119e4 <timegm@plt>
   1fba0:	mov	r8, #0
   1fba4:	cmp	r0, #0
   1fba8:	mov	sl, #0
   1fbac:	beq	1fc64 <__assert_fail@plt+0xe1d8>
   1fbb0:	mov	r0, #64	; 0x40
   1fbb4:	bl	20ae4 <__assert_fail@plt+0xf058>
   1fbb8:	mvn	r6, #0
   1fbbc:	cmp	r0, #0
   1fbc0:	beq	1fb84 <__assert_fail@plt+0xe0f8>
   1fbc4:	mov	r4, r0
   1fbc8:	strb	r8, [r0, #4]
   1fbcc:	mov	r0, #0
   1fbd0:	cmp	r8, #0
   1fbd4:	mov	r6, r4
   1fbd8:	str	r0, [r4]
   1fbdc:	strb	r0, [r6, #5]!
   1fbe0:	beq	1fbfc <__assert_fail@plt+0xe170>
   1fbe4:	mov	r0, r6
   1fbe8:	mov	r1, r5
   1fbec:	mov	r2, sl
   1fbf0:	mov	r8, #0
   1fbf4:	bl	11708 <memcpy@plt>
   1fbf8:	strb	r8, [r6, sl]
   1fbfc:	ldrb	r0, [r7, #4]
   1fc00:	cmp	r0, #0
   1fc04:	beq	1fc6c <__assert_fail@plt+0xe1e0>
   1fc08:	movw	r0, #14822	; 0x39e6
   1fc0c:	add	r1, r7, #5
   1fc10:	mov	r2, #1
   1fc14:	movt	r0, #2
   1fc18:	bl	118c4 <setenv@plt>
   1fc1c:	cmp	r0, #0
   1fc20:	beq	1fc80 <__assert_fail@plt+0xe1f4>
   1fc24:	bl	118e8 <__errno_location@plt>
   1fc28:	ldr	r5, [r0]
   1fc2c:	mov	r6, r0
   1fc30:	cmp	r4, #2
   1fc34:	bcc	1fc50 <__assert_fail@plt+0xe1c4>
   1fc38:	ldr	r7, [r4]
   1fc3c:	mov	r0, r4
   1fc40:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1fc44:	cmp	r7, #0
   1fc48:	mov	r4, r7
   1fc4c:	bne	1fc38 <__assert_fail@plt+0xe1ac>
   1fc50:	str	r5, [r6]
   1fc54:	mvn	r6, #0
   1fc58:	mov	r0, r6
   1fc5c:	sub	sp, fp, #28
   1fc60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fc64:	mov	r4, #1
   1fc68:	b	1fc84 <__assert_fail@plt+0xe1f8>
   1fc6c:	movw	r0, #14822	; 0x39e6
   1fc70:	movt	r0, #2
   1fc74:	bl	11a44 <unsetenv@plt>
   1fc78:	cmp	r0, #0
   1fc7c:	bne	1fc24 <__assert_fail@plt+0xe198>
   1fc80:	bl	11774 <tzset@plt>
   1fc84:	mov	r0, #32
   1fc88:	mov	r1, r9
   1fc8c:	add	r5, sp, #8
   1fc90:	vld1.32	{d16-d17}, [r1], r0
   1fc94:	mov	r2, r5
   1fc98:	vst1.32	{d16-d17}, [r2], r0
   1fc9c:	ldr	r0, [r9, #16]
   1fca0:	ldr	r3, [r9, #20]
   1fca4:	str	r0, [sp, #24]
   1fca8:	mvn	r0, #0
   1fcac:	str	r0, [sp, #36]	; 0x24
   1fcb0:	str	r3, [sp, #28]
   1fcb4:	ldr	r0, [r1]
   1fcb8:	str	r0, [r2]
   1fcbc:	mov	r0, r5
   1fcc0:	bl	116d8 <mktime@plt>
   1fcc4:	mov	r6, r0
   1fcc8:	ldr	r0, [sp, #36]	; 0x24
   1fccc:	mov	sl, #1
   1fcd0:	mov	r8, #1
   1fcd4:	cmp	r0, #0
   1fcd8:	bmi	1fcec <__assert_fail@plt+0xe260>
   1fcdc:	add	r1, sp, #8
   1fce0:	mov	r0, r7
   1fce4:	bl	1f980 <__assert_fail@plt+0xdef4>
   1fce8:	eor	r8, r0, #1
   1fcec:	cmp	r4, #1
   1fcf0:	beq	1fd64 <__assert_fail@plt+0xe2d8>
   1fcf4:	bl	118e8 <__errno_location@plt>
   1fcf8:	mov	r7, r0
   1fcfc:	ldr	sl, [r0]
   1fd00:	ldrb	r0, [r4, #4]
   1fd04:	cmp	r0, #0
   1fd08:	beq	1fdb0 <__assert_fail@plt+0xe324>
   1fd0c:	movw	r0, #14822	; 0x39e6
   1fd10:	add	r1, r4, #5
   1fd14:	mov	r2, #1
   1fd18:	movt	r0, #2
   1fd1c:	bl	118c4 <setenv@plt>
   1fd20:	cmp	r0, #0
   1fd24:	str	r6, [sp, #4]
   1fd28:	beq	1fdc8 <__assert_fail@plt+0xe33c>
   1fd2c:	ldr	r0, [r7]
   1fd30:	mov	sl, #0
   1fd34:	str	r0, [sp]
   1fd38:	cmp	r4, #2
   1fd3c:	bcc	1fd58 <__assert_fail@plt+0xe2cc>
   1fd40:	ldr	r6, [r4]
   1fd44:	mov	r0, r4
   1fd48:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   1fd4c:	cmp	r6, #0
   1fd50:	mov	r4, r6
   1fd54:	bne	1fd40 <__assert_fail@plt+0xe2b4>
   1fd58:	ldr	r0, [sp]
   1fd5c:	ldr	r6, [sp, #4]
   1fd60:	str	r0, [r7]
   1fd64:	eor	r0, sl, #1
   1fd68:	orrs	r0, r8, r0
   1fd6c:	beq	1fd80 <__assert_fail@plt+0xe2f4>
   1fd70:	mvn	r6, #0
   1fd74:	mov	r0, r6
   1fd78:	sub	sp, fp, #28
   1fd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fd80:	mov	r0, #28
   1fd84:	add	r1, r5, #16
   1fd88:	vld1.32	{d16-d17}, [r5], r0
   1fd8c:	vld1.64	{d18-d19}, [r1]
   1fd90:	add	r1, r9, #16
   1fd94:	vld1.32	{d20-d21}, [r5]
   1fd98:	vst1.32	{d16-d17}, [r9], r0
   1fd9c:	vst1.32	{d18-d19}, [r1]
   1fda0:	vst1.32	{d20-d21}, [r9]
   1fda4:	mov	r0, r6
   1fda8:	sub	sp, fp, #28
   1fdac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdb0:	movw	r0, #14822	; 0x39e6
   1fdb4:	movt	r0, #2
   1fdb8:	bl	11a44 <unsetenv@plt>
   1fdbc:	cmp	r0, #0
   1fdc0:	str	r6, [sp, #4]
   1fdc4:	bne	1fd2c <__assert_fail@plt+0xe2a0>
   1fdc8:	str	sl, [sp]
   1fdcc:	bl	11774 <tzset@plt>
   1fdd0:	mov	sl, #1
   1fdd4:	cmp	r4, #2
   1fdd8:	bcs	1fd40 <__assert_fail@plt+0xe2b4>
   1fddc:	b	1fd58 <__assert_fail@plt+0xe2cc>
   1fde0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1fde4:	add	fp, sp, #24
   1fde8:	sub	sp, sp, #32
   1fdec:	ldr	r6, [fp, #12]
   1fdf0:	ldr	r7, [fp, #8]
   1fdf4:	mov	r4, r2
   1fdf8:	mov	r8, r0
   1fdfc:	cmp	r1, #0
   1fe00:	beq	1fe28 <__assert_fail@plt+0xe39c>
   1fe04:	movw	r2, #17030	; 0x4286
   1fe08:	mov	r5, r1
   1fe0c:	str	r3, [sp, #4]
   1fe10:	str	r4, [sp]
   1fe14:	mov	r0, r8
   1fe18:	mov	r1, #1
   1fe1c:	movt	r2, #2
   1fe20:	mov	r3, r5
   1fe24:	b	1fe40 <__assert_fail@plt+0xe3b4>
   1fe28:	movw	r2, #17042	; 0x4292
   1fe2c:	str	r3, [sp]
   1fe30:	mov	r0, r8
   1fe34:	mov	r1, #1
   1fe38:	mov	r3, r4
   1fe3c:	movt	r2, #2
   1fe40:	bl	1193c <__fprintf_chk@plt>
   1fe44:	movw	r1, #17049	; 0x4299
   1fe48:	mov	r0, #0
   1fe4c:	mov	r2, #5
   1fe50:	movt	r1, #2
   1fe54:	bl	11720 <dcgettext@plt>
   1fe58:	movw	r2, #17767	; 0x4567
   1fe5c:	mov	r3, r0
   1fe60:	movw	r0, #2022	; 0x7e6
   1fe64:	mov	r1, #1
   1fe68:	movt	r2, #2
   1fe6c:	str	r0, [sp]
   1fe70:	mov	r0, r8
   1fe74:	bl	1193c <__fprintf_chk@plt>
   1fe78:	movw	r4, #12629	; 0x3155
   1fe7c:	mov	r1, r8
   1fe80:	movt	r4, #2
   1fe84:	mov	r0, r4
   1fe88:	bl	11678 <fputs_unlocked@plt>
   1fe8c:	movw	r1, #17053	; 0x429d
   1fe90:	mov	r0, #0
   1fe94:	mov	r2, #5
   1fe98:	movt	r1, #2
   1fe9c:	bl	11720 <dcgettext@plt>
   1fea0:	movw	r3, #17224	; 0x4348
   1fea4:	mov	r2, r0
   1fea8:	mov	r0, r8
   1feac:	mov	r1, #1
   1feb0:	movt	r3, #2
   1feb4:	bl	1193c <__fprintf_chk@plt>
   1feb8:	mov	r0, r4
   1febc:	mov	r1, r8
   1fec0:	bl	11678 <fputs_unlocked@plt>
   1fec4:	cmp	r6, #9
   1fec8:	bhi	1ff04 <__assert_fail@plt+0xe478>
   1fecc:	add	r0, pc, #0
   1fed0:	ldr	pc, [r0, r6, lsl #2]
   1fed4:	strdeq	pc, [r1], -ip
   1fed8:	andeq	pc, r1, r0, lsl pc	; <UNPREDICTABLE>
   1fedc:	andeq	pc, r1, r0, asr #30
   1fee0:	andeq	pc, r1, r8, ror #30
   1fee4:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1fee8:			; <UNDEFINED> instruction: 0x0001ffb8
   1feec:	andeq	pc, r1, r0, ror #31
   1fef0:	andeq	r0, r2, r8, lsl r0
   1fef4:	andeq	r0, r2, r0, asr #1
   1fef8:	andeq	r0, r2, r8, rrx
   1fefc:	sub	sp, fp, #24
   1ff00:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ff04:	movw	r1, #17577	; 0x44a9
   1ff08:	movt	r1, #2
   1ff0c:	b	20070 <__assert_fail@plt+0xe5e4>
   1ff10:	movw	r1, #17258	; 0x436a
   1ff14:	mov	r0, #0
   1ff18:	mov	r2, #5
   1ff1c:	movt	r1, #2
   1ff20:	bl	11720 <dcgettext@plt>
   1ff24:	ldr	r3, [r7]
   1ff28:	mov	r2, r0
   1ff2c:	mov	r0, r8
   1ff30:	mov	r1, #1
   1ff34:	sub	sp, fp, #24
   1ff38:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ff3c:	b	1193c <__fprintf_chk@plt>
   1ff40:	movw	r1, #17274	; 0x437a
   1ff44:	mov	r0, #0
   1ff48:	mov	r2, #5
   1ff4c:	movt	r1, #2
   1ff50:	bl	11720 <dcgettext@plt>
   1ff54:	mov	r2, r0
   1ff58:	ldr	r3, [r7]
   1ff5c:	ldr	r0, [r7, #4]
   1ff60:	str	r0, [sp]
   1ff64:	b	20054 <__assert_fail@plt+0xe5c8>
   1ff68:	movw	r1, #17297	; 0x4391
   1ff6c:	mov	r0, #0
   1ff70:	mov	r2, #5
   1ff74:	movt	r1, #2
   1ff78:	bl	11720 <dcgettext@plt>
   1ff7c:	mov	r2, r0
   1ff80:	ldr	r3, [r7]
   1ff84:	ldmib	r7, {r0, r1}
   1ff88:	stm	sp, {r0, r1}
   1ff8c:	b	20054 <__assert_fail@plt+0xe5c8>
   1ff90:	movw	r1, #17325	; 0x43ad
   1ff94:	mov	r0, #0
   1ff98:	mov	r2, #5
   1ff9c:	movt	r1, #2
   1ffa0:	bl	11720 <dcgettext@plt>
   1ffa4:	ldr	r3, [r7]
   1ffa8:	mov	r2, r0
   1ffac:	ldmib	r7, {r0, r1, r7}
   1ffb0:	stm	sp, {r0, r1, r7}
   1ffb4:	b	20054 <__assert_fail@plt+0xe5c8>
   1ffb8:	movw	r1, #17357	; 0x43cd
   1ffbc:	mov	r0, #0
   1ffc0:	mov	r2, #5
   1ffc4:	movt	r1, #2
   1ffc8:	bl	11720 <dcgettext@plt>
   1ffcc:	ldr	r3, [r7]
   1ffd0:	mov	r2, r0
   1ffd4:	ldmib	r7, {r0, r1, r6, r7}
   1ffd8:	stm	sp, {r0, r1, r6, r7}
   1ffdc:	b	20054 <__assert_fail@plt+0xe5c8>
   1ffe0:	movw	r1, #17393	; 0x43f1
   1ffe4:	mov	r0, #0
   1ffe8:	mov	r2, #5
   1ffec:	movt	r1, #2
   1fff0:	bl	11720 <dcgettext@plt>
   1fff4:	mov	r2, r0
   1fff8:	ldr	r3, [r7]
   1fffc:	ldmib	r7, {r0, r1, r6}
   20000:	ldr	r5, [r7, #16]
   20004:	ldr	r7, [r7, #20]
   20008:	stm	sp, {r0, r1, r6}
   2000c:	str	r5, [sp, #12]
   20010:	str	r7, [sp, #16]
   20014:	b	20054 <__assert_fail@plt+0xe5c8>
   20018:	movw	r1, #17433	; 0x4419
   2001c:	mov	r0, #0
   20020:	mov	r2, #5
   20024:	movt	r1, #2
   20028:	bl	11720 <dcgettext@plt>
   2002c:	mov	r2, r0
   20030:	ldr	r3, [r7]
   20034:	ldmib	r7, {r0, r1, r6}
   20038:	ldr	r5, [r7, #16]
   2003c:	ldr	r4, [r7, #20]
   20040:	ldr	r7, [r7, #24]
   20044:	stm	sp, {r0, r1, r6}
   20048:	str	r5, [sp, #12]
   2004c:	str	r4, [sp, #16]
   20050:	str	r7, [sp, #20]
   20054:	mov	r0, r8
   20058:	mov	r1, #1
   2005c:	bl	1193c <__fprintf_chk@plt>
   20060:	sub	sp, fp, #24
   20064:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20068:	movw	r1, #17525	; 0x4475
   2006c:	movt	r1, #2
   20070:	mov	r0, #0
   20074:	mov	r2, #5
   20078:	bl	11720 <dcgettext@plt>
   2007c:	mov	ip, r0
   20080:	ldr	r3, [r7]
   20084:	ldr	r0, [r7, #4]
   20088:	ldr	r1, [r7, #8]
   2008c:	ldr	r6, [r7, #12]
   20090:	ldr	r5, [r7, #16]
   20094:	ldr	r4, [r7, #20]
   20098:	ldr	r2, [r7, #24]
   2009c:	ldr	lr, [r7, #28]
   200a0:	ldr	r7, [r7, #32]
   200a4:	stm	sp, {r0, r1, r6}
   200a8:	str	r5, [sp, #12]
   200ac:	str	r4, [sp, #16]
   200b0:	str	r2, [sp, #20]
   200b4:	str	lr, [sp, #24]
   200b8:	str	r7, [sp, #28]
   200bc:	b	20104 <__assert_fail@plt+0xe678>
   200c0:	movw	r1, #17477	; 0x4445
   200c4:	mov	r0, #0
   200c8:	mov	r2, #5
   200cc:	movt	r1, #2
   200d0:	bl	11720 <dcgettext@plt>
   200d4:	mov	ip, r0
   200d8:	ldr	r3, [r7]
   200dc:	ldmib	r7, {r0, r1, r6}
   200e0:	ldr	r5, [r7, #16]
   200e4:	ldr	r4, [r7, #20]
   200e8:	ldr	r2, [r7, #24]
   200ec:	ldr	r7, [r7, #28]
   200f0:	stm	sp, {r0, r1, r6}
   200f4:	str	r5, [sp, #12]
   200f8:	str	r4, [sp, #16]
   200fc:	str	r2, [sp, #20]
   20100:	str	r7, [sp, #24]
   20104:	mov	r0, r8
   20108:	mov	r1, #1
   2010c:	mov	r2, ip
   20110:	bl	1193c <__fprintf_chk@plt>
   20114:	sub	sp, fp, #24
   20118:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2011c:	push	{r4, sl, fp, lr}
   20120:	add	fp, sp, #8
   20124:	sub	sp, sp, #8
   20128:	ldr	ip, [fp, #8]
   2012c:	mov	lr, #0
   20130:	ldr	r4, [ip, lr, lsl #2]
   20134:	add	lr, lr, #1
   20138:	cmp	r4, #0
   2013c:	bne	20130 <__assert_fail@plt+0xe6a4>
   20140:	sub	r4, lr, #1
   20144:	str	ip, [sp]
   20148:	str	r4, [sp, #4]
   2014c:	bl	1fde0 <__assert_fail@plt+0xe354>
   20150:	sub	sp, fp, #8
   20154:	pop	{r4, sl, fp, pc}
   20158:	push	{fp, lr}
   2015c:	mov	fp, sp
   20160:	sub	sp, sp, #48	; 0x30
   20164:	ldr	ip, [fp, #8]
   20168:	ldr	lr, [ip]
   2016c:	cmp	lr, #0
   20170:	str	lr, [sp, #8]
   20174:	beq	20210 <__assert_fail@plt+0xe784>
   20178:	ldr	lr, [ip, #4]
   2017c:	cmp	lr, #0
   20180:	str	lr, [sp, #12]
   20184:	beq	20218 <__assert_fail@plt+0xe78c>
   20188:	ldr	lr, [ip, #8]
   2018c:	cmp	lr, #0
   20190:	str	lr, [sp, #16]
   20194:	beq	20220 <__assert_fail@plt+0xe794>
   20198:	ldr	lr, [ip, #12]
   2019c:	cmp	lr, #0
   201a0:	str	lr, [sp, #20]
   201a4:	beq	20228 <__assert_fail@plt+0xe79c>
   201a8:	ldr	lr, [ip, #16]
   201ac:	cmp	lr, #0
   201b0:	str	lr, [sp, #24]
   201b4:	beq	20230 <__assert_fail@plt+0xe7a4>
   201b8:	ldr	lr, [ip, #20]
   201bc:	cmp	lr, #0
   201c0:	str	lr, [sp, #28]
   201c4:	beq	20238 <__assert_fail@plt+0xe7ac>
   201c8:	ldr	lr, [ip, #24]
   201cc:	cmp	lr, #0
   201d0:	str	lr, [sp, #32]
   201d4:	beq	20240 <__assert_fail@plt+0xe7b4>
   201d8:	ldr	lr, [ip, #28]
   201dc:	cmp	lr, #0
   201e0:	str	lr, [sp, #36]	; 0x24
   201e4:	beq	20248 <__assert_fail@plt+0xe7bc>
   201e8:	ldr	lr, [ip, #32]
   201ec:	cmp	lr, #0
   201f0:	str	lr, [sp, #40]	; 0x28
   201f4:	beq	20250 <__assert_fail@plt+0xe7c4>
   201f8:	ldr	lr, [ip, #36]	; 0x24
   201fc:	mov	ip, #10
   20200:	cmp	lr, #0
   20204:	str	lr, [sp, #44]	; 0x2c
   20208:	movweq	ip, #9
   2020c:	b	20254 <__assert_fail@plt+0xe7c8>
   20210:	mov	ip, #0
   20214:	b	20254 <__assert_fail@plt+0xe7c8>
   20218:	mov	ip, #1
   2021c:	b	20254 <__assert_fail@plt+0xe7c8>
   20220:	mov	ip, #2
   20224:	b	20254 <__assert_fail@plt+0xe7c8>
   20228:	mov	ip, #3
   2022c:	b	20254 <__assert_fail@plt+0xe7c8>
   20230:	mov	ip, #4
   20234:	b	20254 <__assert_fail@plt+0xe7c8>
   20238:	mov	ip, #5
   2023c:	b	20254 <__assert_fail@plt+0xe7c8>
   20240:	mov	ip, #6
   20244:	b	20254 <__assert_fail@plt+0xe7c8>
   20248:	mov	ip, #7
   2024c:	b	20254 <__assert_fail@plt+0xe7c8>
   20250:	mov	ip, #8
   20254:	add	lr, sp, #8
   20258:	str	ip, [sp, #4]
   2025c:	str	lr, [sp]
   20260:	bl	1fde0 <__assert_fail@plt+0xe354>
   20264:	mov	sp, fp
   20268:	pop	{fp, pc}
   2026c:	push	{fp, lr}
   20270:	mov	fp, sp
   20274:	sub	sp, sp, #56	; 0x38
   20278:	add	ip, fp, #8
   2027c:	str	ip, [sp, #12]
   20280:	ldr	lr, [fp, #8]
   20284:	cmp	lr, #0
   20288:	str	lr, [sp, #16]
   2028c:	beq	20328 <__assert_fail@plt+0xe89c>
   20290:	ldr	lr, [ip, #4]
   20294:	cmp	lr, #0
   20298:	str	lr, [sp, #20]
   2029c:	beq	20330 <__assert_fail@plt+0xe8a4>
   202a0:	ldr	lr, [ip, #8]
   202a4:	cmp	lr, #0
   202a8:	str	lr, [sp, #24]
   202ac:	beq	20338 <__assert_fail@plt+0xe8ac>
   202b0:	ldr	lr, [ip, #12]
   202b4:	cmp	lr, #0
   202b8:	str	lr, [sp, #28]
   202bc:	beq	20340 <__assert_fail@plt+0xe8b4>
   202c0:	ldr	lr, [ip, #16]
   202c4:	cmp	lr, #0
   202c8:	str	lr, [sp, #32]
   202cc:	beq	20348 <__assert_fail@plt+0xe8bc>
   202d0:	ldr	lr, [ip, #20]
   202d4:	cmp	lr, #0
   202d8:	str	lr, [sp, #36]	; 0x24
   202dc:	beq	20350 <__assert_fail@plt+0xe8c4>
   202e0:	ldr	lr, [ip, #24]
   202e4:	cmp	lr, #0
   202e8:	str	lr, [sp, #40]	; 0x28
   202ec:	beq	20358 <__assert_fail@plt+0xe8cc>
   202f0:	ldr	lr, [ip, #28]
   202f4:	cmp	lr, #0
   202f8:	str	lr, [sp, #44]	; 0x2c
   202fc:	beq	20360 <__assert_fail@plt+0xe8d4>
   20300:	ldr	lr, [ip, #32]
   20304:	cmp	lr, #0
   20308:	str	lr, [sp, #48]	; 0x30
   2030c:	beq	20368 <__assert_fail@plt+0xe8dc>
   20310:	ldr	lr, [ip, #36]	; 0x24
   20314:	mov	ip, #10
   20318:	cmp	lr, #0
   2031c:	str	lr, [sp, #52]	; 0x34
   20320:	movweq	ip, #9
   20324:	b	2036c <__assert_fail@plt+0xe8e0>
   20328:	mov	ip, #0
   2032c:	b	2036c <__assert_fail@plt+0xe8e0>
   20330:	mov	ip, #1
   20334:	b	2036c <__assert_fail@plt+0xe8e0>
   20338:	mov	ip, #2
   2033c:	b	2036c <__assert_fail@plt+0xe8e0>
   20340:	mov	ip, #3
   20344:	b	2036c <__assert_fail@plt+0xe8e0>
   20348:	mov	ip, #4
   2034c:	b	2036c <__assert_fail@plt+0xe8e0>
   20350:	mov	ip, #5
   20354:	b	2036c <__assert_fail@plt+0xe8e0>
   20358:	mov	ip, #6
   2035c:	b	2036c <__assert_fail@plt+0xe8e0>
   20360:	mov	ip, #7
   20364:	b	2036c <__assert_fail@plt+0xe8e0>
   20368:	mov	ip, #8
   2036c:	add	lr, sp, #16
   20370:	str	ip, [sp, #4]
   20374:	str	lr, [sp]
   20378:	bl	1fde0 <__assert_fail@plt+0xe354>
   2037c:	mov	sp, fp
   20380:	pop	{fp, pc}
   20384:	push	{fp, lr}
   20388:	mov	fp, sp
   2038c:	movw	r0, #20964	; 0x51e4
   20390:	movt	r0, #3
   20394:	ldr	r1, [r0]
   20398:	movw	r0, #12629	; 0x3155
   2039c:	movt	r0, #2
   203a0:	bl	11678 <fputs_unlocked@plt>
   203a4:	movw	r1, #17637	; 0x44e5
   203a8:	mov	r0, #0
   203ac:	mov	r2, #5
   203b0:	movt	r1, #2
   203b4:	bl	11720 <dcgettext@plt>
   203b8:	movw	r2, #17657	; 0x44f9
   203bc:	mov	r1, r0
   203c0:	mov	r0, #1
   203c4:	movt	r2, #2
   203c8:	bl	11924 <__printf_chk@plt>
   203cc:	movw	r1, #17679	; 0x450f
   203d0:	mov	r0, #0
   203d4:	mov	r2, #5
   203d8:	movt	r1, #2
   203dc:	bl	11720 <dcgettext@plt>
   203e0:	movw	r2, #13479	; 0x34a7
   203e4:	movw	r3, #13720	; 0x3598
   203e8:	mov	r1, r0
   203ec:	mov	r0, #1
   203f0:	movt	r2, #2
   203f4:	movt	r3, #2
   203f8:	bl	11924 <__printf_chk@plt>
   203fc:	movw	r1, #17699	; 0x4523
   20400:	mov	r0, #0
   20404:	mov	r2, #5
   20408:	movt	r1, #2
   2040c:	bl	11720 <dcgettext@plt>
   20410:	movw	r2, #17738	; 0x454a
   20414:	mov	r1, r0
   20418:	mov	r0, #1
   2041c:	movt	r2, #2
   20420:	pop	{fp, lr}
   20424:	b	11924 <__printf_chk@plt>
   20428:	push	{r4, r5, r6, sl, fp, lr}
   2042c:	add	fp, sp, #16
   20430:	mov	r4, r2
   20434:	mov	r5, r1
   20438:	mov	r6, r0
   2043c:	bl	21f18 <__assert_fail@plt+0x1048c>
   20440:	cmp	r0, #0
   20444:	popne	{r4, r5, r6, sl, fp, pc}
   20448:	cmp	r6, #0
   2044c:	beq	20460 <__assert_fail@plt+0xe9d4>
   20450:	cmp	r5, #0
   20454:	cmpne	r4, #0
   20458:	bne	20460 <__assert_fail@plt+0xe9d4>
   2045c:	pop	{r4, r5, r6, sl, fp, pc}
   20460:	bl	209dc <__assert_fail@plt+0xef50>
   20464:	push	{r4, r5, r6, sl, fp, lr}
   20468:	add	fp, sp, #16
   2046c:	mov	r4, r2
   20470:	mov	r5, r1
   20474:	mov	r6, r0
   20478:	bl	21f18 <__assert_fail@plt+0x1048c>
   2047c:	cmp	r0, #0
   20480:	popne	{r4, r5, r6, sl, fp, pc}
   20484:	cmp	r6, #0
   20488:	beq	2049c <__assert_fail@plt+0xea10>
   2048c:	cmp	r5, #0
   20490:	cmpne	r4, #0
   20494:	bne	2049c <__assert_fail@plt+0xea10>
   20498:	pop	{r4, r5, r6, sl, fp, pc}
   2049c:	bl	209dc <__assert_fail@plt+0xef50>
   204a0:	push	{fp, lr}
   204a4:	mov	fp, sp
   204a8:	bl	20ae4 <__assert_fail@plt+0xf058>
   204ac:	cmp	r0, #0
   204b0:	popne	{fp, pc}
   204b4:	bl	209dc <__assert_fail@plt+0xef50>
   204b8:	push	{fp, lr}
   204bc:	mov	fp, sp
   204c0:	bl	20ae4 <__assert_fail@plt+0xf058>
   204c4:	cmp	r0, #0
   204c8:	popne	{fp, pc}
   204cc:	bl	209dc <__assert_fail@plt+0xef50>
   204d0:	push	{fp, lr}
   204d4:	mov	fp, sp
   204d8:	bl	20ae4 <__assert_fail@plt+0xf058>
   204dc:	cmp	r0, #0
   204e0:	popne	{fp, pc}
   204e4:	bl	209dc <__assert_fail@plt+0xef50>
   204e8:	push	{r4, r5, fp, lr}
   204ec:	add	fp, sp, #8
   204f0:	mov	r4, r1
   204f4:	mov	r5, r0
   204f8:	bl	20b14 <__assert_fail@plt+0xf088>
   204fc:	cmp	r0, #0
   20500:	popne	{r4, r5, fp, pc}
   20504:	cmp	r5, #0
   20508:	beq	20518 <__assert_fail@plt+0xea8c>
   2050c:	cmp	r4, #0
   20510:	bne	20518 <__assert_fail@plt+0xea8c>
   20514:	pop	{r4, r5, fp, pc}
   20518:	bl	209dc <__assert_fail@plt+0xef50>
   2051c:	push	{fp, lr}
   20520:	mov	fp, sp
   20524:	cmp	r1, #0
   20528:	orreq	r1, r1, #1
   2052c:	bl	20b14 <__assert_fail@plt+0xf088>
   20530:	cmp	r0, #0
   20534:	popne	{fp, pc}
   20538:	bl	209dc <__assert_fail@plt+0xef50>
   2053c:	push	{fp, lr}
   20540:	mov	fp, sp
   20544:	clz	r3, r2
   20548:	lsr	ip, r3, #5
   2054c:	clz	r3, r1
   20550:	lsr	r3, r3, #5
   20554:	orrs	r3, r3, ip
   20558:	movwne	r1, #1
   2055c:	movwne	r2, #1
   20560:	bl	21f18 <__assert_fail@plt+0x1048c>
   20564:	cmp	r0, #0
   20568:	popne	{fp, pc}
   2056c:	bl	209dc <__assert_fail@plt+0xef50>
   20570:	push	{fp, lr}
   20574:	mov	fp, sp
   20578:	mov	r2, r1
   2057c:	mov	r1, r0
   20580:	mov	r0, #0
   20584:	bl	21f18 <__assert_fail@plt+0x1048c>
   20588:	cmp	r0, #0
   2058c:	popne	{fp, pc}
   20590:	bl	209dc <__assert_fail@plt+0xef50>
   20594:	push	{fp, lr}
   20598:	mov	fp, sp
   2059c:	mov	r2, r1
   205a0:	mov	r1, r0
   205a4:	clz	r0, r2
   205a8:	clz	r3, r1
   205ac:	lsr	r0, r0, #5
   205b0:	lsr	r3, r3, #5
   205b4:	orrs	r0, r3, r0
   205b8:	mov	r0, #0
   205bc:	movwne	r1, #1
   205c0:	movwne	r2, #1
   205c4:	bl	21f18 <__assert_fail@plt+0x1048c>
   205c8:	cmp	r0, #0
   205cc:	popne	{fp, pc}
   205d0:	bl	209dc <__assert_fail@plt+0xef50>
   205d4:	push	{r4, r5, r6, sl, fp, lr}
   205d8:	add	fp, sp, #16
   205dc:	ldr	r5, [r1]
   205e0:	mov	r4, r1
   205e4:	mov	r6, r0
   205e8:	cmp	r0, #0
   205ec:	beq	20604 <__assert_fail@plt+0xeb78>
   205f0:	mov	r0, #1
   205f4:	add	r0, r0, r5, lsr #1
   205f8:	adds	r5, r5, r0
   205fc:	bcc	2060c <__assert_fail@plt+0xeb80>
   20600:	b	20648 <__assert_fail@plt+0xebbc>
   20604:	cmp	r5, #0
   20608:	movweq	r5, #64	; 0x40
   2060c:	mov	r0, r6
   20610:	mov	r1, r5
   20614:	mov	r2, #1
   20618:	bl	21f18 <__assert_fail@plt+0x1048c>
   2061c:	cmp	r5, #0
   20620:	mov	r1, r5
   20624:	movwne	r1, #1
   20628:	cmp	r0, #0
   2062c:	bne	20640 <__assert_fail@plt+0xebb4>
   20630:	clz	r2, r6
   20634:	lsr	r2, r2, #5
   20638:	orrs	r1, r2, r1
   2063c:	bne	20648 <__assert_fail@plt+0xebbc>
   20640:	str	r5, [r4]
   20644:	pop	{r4, r5, r6, sl, fp, pc}
   20648:	bl	209dc <__assert_fail@plt+0xef50>
   2064c:	push	{r4, r5, r6, r7, fp, lr}
   20650:	add	fp, sp, #16
   20654:	ldr	r5, [r1]
   20658:	mov	r6, r2
   2065c:	mov	r4, r1
   20660:	mov	r7, r0
   20664:	cmp	r0, #0
   20668:	beq	20680 <__assert_fail@plt+0xebf4>
   2066c:	mov	r0, #1
   20670:	add	r0, r0, r5, lsr #1
   20674:	adds	r5, r5, r0
   20678:	bcc	20698 <__assert_fail@plt+0xec0c>
   2067c:	b	206cc <__assert_fail@plt+0xec40>
   20680:	cmp	r5, #0
   20684:	bne	20698 <__assert_fail@plt+0xec0c>
   20688:	mov	r0, #64	; 0x40
   2068c:	cmp	r6, #64	; 0x40
   20690:	udiv	r5, r0, r6
   20694:	addhi	r5, r5, #1
   20698:	mov	r0, r7
   2069c:	mov	r1, r5
   206a0:	mov	r2, r6
   206a4:	bl	21f18 <__assert_fail@plt+0x1048c>
   206a8:	cmp	r0, #0
   206ac:	bne	206c4 <__assert_fail@plt+0xec38>
   206b0:	cmp	r7, #0
   206b4:	beq	206cc <__assert_fail@plt+0xec40>
   206b8:	cmp	r6, #0
   206bc:	cmpne	r5, #0
   206c0:	bne	206cc <__assert_fail@plt+0xec40>
   206c4:	str	r5, [r4]
   206c8:	pop	{r4, r5, r6, r7, fp, pc}
   206cc:	bl	209dc <__assert_fail@plt+0xef50>
   206d0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   206d4:	add	fp, sp, #24
   206d8:	mov	r8, r1
   206dc:	ldr	r1, [r1]
   206e0:	mov	r5, r0
   206e4:	add	r0, r1, r1, asr #1
   206e8:	cmp	r0, r1
   206ec:	mvnvs	r0, #-2147483648	; 0x80000000
   206f0:	cmp	r0, r3
   206f4:	mov	r7, r0
   206f8:	movgt	r7, r3
   206fc:	cmn	r3, #1
   20700:	movle	r7, r0
   20704:	ldr	r0, [fp, #8]
   20708:	cmn	r0, #1
   2070c:	ble	20734 <__assert_fail@plt+0xeca8>
   20710:	cmp	r0, #0
   20714:	beq	20788 <__assert_fail@plt+0xecfc>
   20718:	cmn	r7, #1
   2071c:	ble	2075c <__assert_fail@plt+0xecd0>
   20720:	mvn	r4, #-2147483648	; 0x80000000
   20724:	udiv	r6, r4, r0
   20728:	cmp	r6, r7
   2072c:	bge	20788 <__assert_fail@plt+0xecfc>
   20730:	b	20798 <__assert_fail@plt+0xed0c>
   20734:	cmn	r7, #1
   20738:	ble	20778 <__assert_fail@plt+0xecec>
   2073c:	cmn	r0, #1
   20740:	beq	20788 <__assert_fail@plt+0xecfc>
   20744:	mov	r6, #-2147483648	; 0x80000000
   20748:	mvn	r4, #-2147483648	; 0x80000000
   2074c:	sdiv	r6, r6, r0
   20750:	cmp	r6, r7
   20754:	bge	20788 <__assert_fail@plt+0xecfc>
   20758:	b	20798 <__assert_fail@plt+0xed0c>
   2075c:	beq	20788 <__assert_fail@plt+0xecfc>
   20760:	mov	r6, #-2147483648	; 0x80000000
   20764:	mvn	r4, #-2147483648	; 0x80000000
   20768:	sdiv	r6, r6, r7
   2076c:	cmp	r6, r0
   20770:	bge	20788 <__assert_fail@plt+0xecfc>
   20774:	b	20798 <__assert_fail@plt+0xed0c>
   20778:	mvn	r4, #-2147483648	; 0x80000000
   2077c:	sdiv	r6, r4, r0
   20780:	cmp	r7, r6
   20784:	blt	20798 <__assert_fail@plt+0xed0c>
   20788:	mul	r6, r7, r0
   2078c:	mov	r4, #64	; 0x40
   20790:	cmp	r6, #63	; 0x3f
   20794:	bgt	207a0 <__assert_fail@plt+0xed14>
   20798:	sdiv	r7, r4, r0
   2079c:	mul	r6, r7, r0
   207a0:	cmp	r5, #0
   207a4:	moveq	r4, #0
   207a8:	streq	r4, [r8]
   207ac:	sub	r4, r7, r1
   207b0:	cmp	r4, r2
   207b4:	bge	20860 <__assert_fail@plt+0xedd4>
   207b8:	add	r7, r1, r2
   207bc:	mov	r6, #0
   207c0:	mov	r2, #0
   207c4:	cmp	r7, r3
   207c8:	movwgt	r6, #1
   207cc:	cmn	r3, #1
   207d0:	movwgt	r2, #1
   207d4:	cmp	r7, r1
   207d8:	bvs	20894 <__assert_fail@plt+0xee08>
   207dc:	ands	r1, r2, r6
   207e0:	bne	20894 <__assert_fail@plt+0xee08>
   207e4:	cmn	r0, #1
   207e8:	ble	20810 <__assert_fail@plt+0xed84>
   207ec:	cmp	r0, #0
   207f0:	beq	2085c <__assert_fail@plt+0xedd0>
   207f4:	cmn	r7, #1
   207f8:	ble	20834 <__assert_fail@plt+0xeda8>
   207fc:	mvn	r1, #-2147483648	; 0x80000000
   20800:	udiv	r1, r1, r0
   20804:	cmp	r1, r7
   20808:	bge	2085c <__assert_fail@plt+0xedd0>
   2080c:	b	20894 <__assert_fail@plt+0xee08>
   20810:	cmn	r7, #1
   20814:	ble	2084c <__assert_fail@plt+0xedc0>
   20818:	cmn	r0, #1
   2081c:	beq	2085c <__assert_fail@plt+0xedd0>
   20820:	mov	r1, #-2147483648	; 0x80000000
   20824:	sdiv	r1, r1, r0
   20828:	cmp	r1, r7
   2082c:	bge	2085c <__assert_fail@plt+0xedd0>
   20830:	b	20894 <__assert_fail@plt+0xee08>
   20834:	beq	2085c <__assert_fail@plt+0xedd0>
   20838:	mov	r1, #-2147483648	; 0x80000000
   2083c:	sdiv	r1, r1, r7
   20840:	cmp	r1, r0
   20844:	bge	2085c <__assert_fail@plt+0xedd0>
   20848:	b	20894 <__assert_fail@plt+0xee08>
   2084c:	mvn	r1, #-2147483648	; 0x80000000
   20850:	sdiv	r1, r1, r0
   20854:	cmp	r7, r1
   20858:	blt	20894 <__assert_fail@plt+0xee08>
   2085c:	mul	r6, r7, r0
   20860:	mov	r0, r5
   20864:	mov	r1, r6
   20868:	bl	20b14 <__assert_fail@plt+0xf088>
   2086c:	cmp	r6, #0
   20870:	movwne	r6, #1
   20874:	cmp	r0, #0
   20878:	bne	2088c <__assert_fail@plt+0xee00>
   2087c:	clz	r1, r5
   20880:	lsr	r1, r1, #5
   20884:	orrs	r1, r1, r6
   20888:	bne	20894 <__assert_fail@plt+0xee08>
   2088c:	str	r7, [r8]
   20890:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   20894:	bl	209dc <__assert_fail@plt+0xef50>
   20898:	push	{fp, lr}
   2089c:	mov	fp, sp
   208a0:	mov	r1, #1
   208a4:	bl	20a90 <__assert_fail@plt+0xf004>
   208a8:	cmp	r0, #0
   208ac:	popne	{fp, pc}
   208b0:	bl	209dc <__assert_fail@plt+0xef50>
   208b4:	push	{fp, lr}
   208b8:	mov	fp, sp
   208bc:	bl	20a90 <__assert_fail@plt+0xf004>
   208c0:	cmp	r0, #0
   208c4:	popne	{fp, pc}
   208c8:	bl	209dc <__assert_fail@plt+0xef50>
   208cc:	push	{fp, lr}
   208d0:	mov	fp, sp
   208d4:	mov	r1, #1
   208d8:	bl	20a90 <__assert_fail@plt+0xf004>
   208dc:	cmp	r0, #0
   208e0:	popne	{fp, pc}
   208e4:	bl	209dc <__assert_fail@plt+0xef50>
   208e8:	push	{fp, lr}
   208ec:	mov	fp, sp
   208f0:	bl	20a90 <__assert_fail@plt+0xf004>
   208f4:	cmp	r0, #0
   208f8:	popne	{fp, pc}
   208fc:	bl	209dc <__assert_fail@plt+0xef50>
   20900:	push	{r4, r5, fp, lr}
   20904:	add	fp, sp, #8
   20908:	mov	r5, r0
   2090c:	mov	r0, r1
   20910:	mov	r4, r1
   20914:	bl	20ae4 <__assert_fail@plt+0xf058>
   20918:	cmp	r0, #0
   2091c:	beq	20930 <__assert_fail@plt+0xeea4>
   20920:	mov	r1, r5
   20924:	mov	r2, r4
   20928:	pop	{r4, r5, fp, lr}
   2092c:	b	11708 <memcpy@plt>
   20930:	bl	209dc <__assert_fail@plt+0xef50>
   20934:	push	{r4, r5, fp, lr}
   20938:	add	fp, sp, #8
   2093c:	mov	r5, r0
   20940:	mov	r0, r1
   20944:	mov	r4, r1
   20948:	bl	20ae4 <__assert_fail@plt+0xf058>
   2094c:	cmp	r0, #0
   20950:	beq	20964 <__assert_fail@plt+0xeed8>
   20954:	mov	r1, r5
   20958:	mov	r2, r4
   2095c:	pop	{r4, r5, fp, lr}
   20960:	b	11708 <memcpy@plt>
   20964:	bl	209dc <__assert_fail@plt+0xef50>
   20968:	push	{r4, r5, fp, lr}
   2096c:	add	fp, sp, #8
   20970:	mov	r5, r0
   20974:	add	r0, r1, #1
   20978:	mov	r4, r1
   2097c:	bl	20ae4 <__assert_fail@plt+0xf058>
   20980:	cmp	r0, #0
   20984:	beq	209a0 <__assert_fail@plt+0xef14>
   20988:	mov	r1, #0
   2098c:	mov	r2, r4
   20990:	strb	r1, [r0, r4]
   20994:	mov	r1, r5
   20998:	pop	{r4, r5, fp, lr}
   2099c:	b	11708 <memcpy@plt>
   209a0:	bl	209dc <__assert_fail@plt+0xef50>
   209a4:	push	{r4, r5, fp, lr}
   209a8:	add	fp, sp, #8
   209ac:	mov	r4, r0
   209b0:	bl	118ac <strlen@plt>
   209b4:	add	r5, r0, #1
   209b8:	mov	r0, r5
   209bc:	bl	20ae4 <__assert_fail@plt+0xf058>
   209c0:	cmp	r0, #0
   209c4:	beq	209d8 <__assert_fail@plt+0xef4c>
   209c8:	mov	r1, r4
   209cc:	mov	r2, r5
   209d0:	pop	{r4, r5, fp, lr}
   209d4:	b	11708 <memcpy@plt>
   209d8:	bl	209dc <__assert_fail@plt+0xef50>
   209dc:	push	{fp, lr}
   209e0:	mov	fp, sp
   209e4:	movw	r0, #20876	; 0x518c
   209e8:	movw	r1, #17814	; 0x4596
   209ec:	mov	r2, #5
   209f0:	movt	r0, #3
   209f4:	movt	r1, #2
   209f8:	ldr	r4, [r0]
   209fc:	mov	r0, #0
   20a00:	bl	11720 <dcgettext@plt>
   20a04:	movw	r2, #13173	; 0x3375
   20a08:	mov	r3, r0
   20a0c:	mov	r0, r4
   20a10:	mov	r1, #0
   20a14:	movt	r2, #2
   20a18:	bl	117d4 <error@plt>
   20a1c:	bl	11a5c <abort@plt>
   20a20:	push	{r4, sl, fp, lr}
   20a24:	add	fp, sp, #8
   20a28:	mov	r0, #0
   20a2c:	mov	r1, #0
   20a30:	bl	1187c <getcwd@plt>
   20a34:	mov	r4, r0
   20a38:	cmp	r0, #0
   20a3c:	bne	20a50 <__assert_fail@plt+0xefc4>
   20a40:	bl	118e8 <__errno_location@plt>
   20a44:	ldr	r0, [r0]
   20a48:	cmp	r0, #12
   20a4c:	beq	20a58 <__assert_fail@plt+0xefcc>
   20a50:	mov	r0, r4
   20a54:	pop	{r4, sl, fp, pc}
   20a58:	bl	209dc <__assert_fail@plt+0xef50>
   20a5c:	sub	sp, sp, #12
   20a60:	push	{fp, lr}
   20a64:	mov	fp, sp
   20a68:	sub	sp, sp, #4
   20a6c:	add	ip, fp, #8
   20a70:	stm	ip, {r1, r2, r3}
   20a74:	add	r1, fp, #8
   20a78:	str	r1, [sp]
   20a7c:	bl	21f9c <__assert_fail@plt+0x10510>
   20a80:	mov	sp, fp
   20a84:	pop	{fp, lr}
   20a88:	add	sp, sp, #12
   20a8c:	bx	lr
   20a90:	clz	r2, r1
   20a94:	clz	r3, r0
   20a98:	lsr	r2, r2, #5
   20a9c:	lsr	r3, r3, #5
   20aa0:	orrs	r2, r3, r2
   20aa4:	movwne	r1, #1
   20aa8:	movwne	r0, #1
   20aac:	cmp	r1, #0
   20ab0:	beq	20ae0 <__assert_fail@plt+0xf054>
   20ab4:	mvn	r2, #-2147483648	; 0x80000000
   20ab8:	udiv	r2, r2, r1
   20abc:	cmp	r2, r0
   20ac0:	bcs	20ae0 <__assert_fail@plt+0xf054>
   20ac4:	push	{fp, lr}
   20ac8:	mov	fp, sp
   20acc:	bl	118e8 <__errno_location@plt>
   20ad0:	mov	r1, #12
   20ad4:	str	r1, [r0]
   20ad8:	mov	r0, #0
   20adc:	pop	{fp, pc}
   20ae0:	b	1166c <calloc@plt>
   20ae4:	cmp	r0, #0
   20ae8:	movweq	r0, #1
   20aec:	cmn	r0, #1
   20af0:	ble	20af8 <__assert_fail@plt+0xf06c>
   20af4:	b	11810 <malloc@plt>
   20af8:	push	{fp, lr}
   20afc:	mov	fp, sp
   20b00:	bl	118e8 <__errno_location@plt>
   20b04:	mov	r1, #12
   20b08:	str	r1, [r0]
   20b0c:	mov	r0, #0
   20b10:	pop	{fp, pc}
   20b14:	push	{fp, lr}
   20b18:	mov	fp, sp
   20b1c:	cmp	r0, #0
   20b20:	beq	20b3c <__assert_fail@plt+0xf0b0>
   20b24:	cmp	r1, #0
   20b28:	beq	20b48 <__assert_fail@plt+0xf0bc>
   20b2c:	cmn	r1, #1
   20b30:	ble	20b54 <__assert_fail@plt+0xf0c8>
   20b34:	pop	{fp, lr}
   20b38:	b	1172c <realloc@plt>
   20b3c:	mov	r0, r1
   20b40:	pop	{fp, lr}
   20b44:	b	20ae4 <__assert_fail@plt+0xf058>
   20b48:	bl	1aa08 <__assert_fail@plt+0x8f7c>
   20b4c:	mov	r0, #0
   20b50:	pop	{fp, pc}
   20b54:	bl	118e8 <__errno_location@plt>
   20b58:	mov	r1, #12
   20b5c:	str	r1, [r0]
   20b60:	mov	r0, #0
   20b64:	pop	{fp, pc}
   20b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b6c:	add	fp, sp, #28
   20b70:	sub	sp, sp, #36	; 0x24
   20b74:	sub	sp, sp, #1024	; 0x400
   20b78:	mov	r8, r1
   20b7c:	ldrb	r1, [r0]
   20b80:	mov	r4, r0
   20b84:	cmp	r1, #0
   20b88:	beq	20c48 <__assert_fail@plt+0xf1bc>
   20b8c:	add	r0, sp, #32
   20b90:	mov	r2, #0
   20b94:	add	sl, r0, #16
   20b98:	mov	r0, #1
   20b9c:	ldrb	r3, [r8, r2]
   20ba0:	cmp	r3, #0
   20ba4:	uxtbne	r1, r1
   20ba8:	subne	r1, r1, r3
   20bac:	clzne	r1, r1
   20bb0:	lsrne	r1, r1, #5
   20bb4:	andne	r0, r0, r1
   20bb8:	addne	r1, r4, r2
   20bbc:	addne	r2, r2, #1
   20bc0:	ldrbne	r1, [r1, #1]
   20bc4:	cmpne	r1, #0
   20bc8:	bne	20b9c <__assert_fail@plt+0xf110>
   20bcc:	add	r6, r8, r2
   20bd0:	mov	r7, r4
   20bd4:	ldrb	r1, [r6]
   20bd8:	cmp	r1, #0
   20bdc:	movwne	r7, #0
   20be0:	tst	r0, #1
   20be4:	cmpeq	r1, #0
   20be8:	bne	20c58 <__assert_fail@plt+0xf1cc>
   20bec:	ldrb	r1, [r8]
   20bf0:	add	r0, r4, #1
   20bf4:	sub	r5, r6, r8
   20bf8:	bl	118b8 <strchr@plt>
   20bfc:	mov	r7, r0
   20c00:	cmp	r5, #1
   20c04:	cmpne	r7, #0
   20c08:	beq	20c58 <__assert_fail@plt+0xf1cc>
   20c0c:	add	r0, r4, r5
   20c10:	sub	r9, r6, r5
   20c14:	str	r6, [sp, #20]
   20c18:	str	r5, [sp, #28]
   20c1c:	str	r7, [sp, #24]
   20c20:	subs	r0, r0, r7
   20c24:	movwcc	r0, #1
   20c28:	cmp	r5, #31
   20c2c:	bhi	20c64 <__assert_fail@plt+0xf1d8>
   20c30:	mov	sl, r0
   20c34:	cmp	r5, #3
   20c38:	bcs	20d9c <__assert_fail@plt+0xf310>
   20c3c:	sub	r6, r5, #1
   20c40:	mov	r5, #1
   20c44:	b	21448 <__assert_fail@plt+0xf9bc>
   20c48:	ldrb	r0, [r8]
   20c4c:	cmp	r0, #0
   20c50:	movne	r4, #0
   20c54:	mov	r7, r4
   20c58:	mov	r0, r7
   20c5c:	sub	sp, fp, #28
   20c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c64:	str	r0, [sp, #8]
   20c68:	rsb	r0, r5, #0
   20c6c:	mvn	r1, #0
   20c70:	mov	r2, #1
   20c74:	mov	ip, #1
   20c78:	mov	r3, #1
   20c7c:	str	r0, [sp, #4]
   20c80:	mov	r0, #0
   20c84:	b	20ca0 <__assert_fail@plt+0xf214>
   20c88:	sub	ip, r2, r1
   20c8c:	mov	r3, #1
   20c90:	mov	r0, r2
   20c94:	add	r2, r3, r0
   20c98:	cmp	r2, r5
   20c9c:	bcs	20cf8 <__assert_fail@plt+0xf26c>
   20ca0:	add	r4, r1, r3
   20ca4:	ldrb	r7, [r9, r2]
   20ca8:	ldrb	r4, [r9, r4]
   20cac:	cmp	r7, r4
   20cb0:	bcc	20c88 <__assert_fail@plt+0xf1fc>
   20cb4:	bne	20cd8 <__assert_fail@plt+0xf24c>
   20cb8:	cmp	r3, ip
   20cbc:	addne	r3, r3, #1
   20cc0:	addeq	r0, r0, ip
   20cc4:	moveq	r3, #1
   20cc8:	add	r2, r3, r0
   20ccc:	cmp	r2, r5
   20cd0:	bcc	20ca0 <__assert_fail@plt+0xf214>
   20cd4:	b	20cf8 <__assert_fail@plt+0xf26c>
   20cd8:	add	r2, r0, #1
   20cdc:	mov	r1, r0
   20ce0:	mov	r3, #1
   20ce4:	mov	ip, #1
   20ce8:	mov	r0, r2
   20cec:	add	r2, r3, r0
   20cf0:	cmp	r2, r5
   20cf4:	bcc	20ca0 <__assert_fail@plt+0xf214>
   20cf8:	cmp	r5, #2
   20cfc:	bcc	20ec8 <__assert_fail@plt+0xf43c>
   20d00:	mvn	lr, #0
   20d04:	mov	r2, #0
   20d08:	mov	r3, #1
   20d0c:	mov	r5, #1
   20d10:	mov	r7, #1
   20d14:	b	20d34 <__assert_fail@plt+0xf2a8>
   20d18:	sub	r5, r3, lr
   20d1c:	mov	r7, #1
   20d20:	mov	r2, r3
   20d24:	ldr	r0, [sp, #28]
   20d28:	add	r3, r7, r2
   20d2c:	cmp	r3, r0
   20d30:	bcs	20ed0 <__assert_fail@plt+0xf444>
   20d34:	add	r4, lr, r7
   20d38:	ldrb	r0, [r9, r3]
   20d3c:	ldrb	r4, [r9, r4]
   20d40:	cmp	r4, r0
   20d44:	bcc	20d18 <__assert_fail@plt+0xf28c>
   20d48:	cmp	r0, r4
   20d4c:	bne	20d74 <__assert_fail@plt+0xf2e8>
   20d50:	cmp	r7, r5
   20d54:	addne	r7, r7, #1
   20d58:	addeq	r2, r2, r5
   20d5c:	moveq	r7, #1
   20d60:	ldr	r0, [sp, #28]
   20d64:	add	r3, r7, r2
   20d68:	cmp	r3, r0
   20d6c:	bcc	20d34 <__assert_fail@plt+0xf2a8>
   20d70:	b	20ed0 <__assert_fail@plt+0xf444>
   20d74:	add	r0, r2, #1
   20d78:	mov	lr, r2
   20d7c:	mov	r7, #1
   20d80:	mov	r5, #1
   20d84:	mov	r2, r0
   20d88:	ldr	r0, [sp, #28]
   20d8c:	add	r3, r7, r2
   20d90:	cmp	r3, r0
   20d94:	bcc	20d34 <__assert_fail@plt+0xf2a8>
   20d98:	b	20ed0 <__assert_fail@plt+0xf444>
   20d9c:	mvn	r1, #0
   20da0:	mov	r0, #0
   20da4:	mov	r2, #1
   20da8:	mov	ip, #1
   20dac:	mov	r3, #1
   20db0:	b	20dcc <__assert_fail@plt+0xf340>
   20db4:	sub	ip, r2, r1
   20db8:	mov	r3, #1
   20dbc:	mov	r0, r2
   20dc0:	add	r2, r3, r0
   20dc4:	cmp	r2, r5
   20dc8:	bcs	20e24 <__assert_fail@plt+0xf398>
   20dcc:	add	r4, r1, r3
   20dd0:	ldrb	r7, [r9, r2]
   20dd4:	ldrb	r4, [r9, r4]
   20dd8:	cmp	r7, r4
   20ddc:	bcc	20db4 <__assert_fail@plt+0xf328>
   20de0:	bne	20e04 <__assert_fail@plt+0xf378>
   20de4:	cmp	r3, ip
   20de8:	addne	r3, r3, #1
   20dec:	addeq	r0, r0, ip
   20df0:	moveq	r3, #1
   20df4:	add	r2, r3, r0
   20df8:	cmp	r2, r5
   20dfc:	bcc	20dcc <__assert_fail@plt+0xf340>
   20e00:	b	20e24 <__assert_fail@plt+0xf398>
   20e04:	add	r2, r0, #1
   20e08:	mov	r1, r0
   20e0c:	mov	r3, #1
   20e10:	mov	ip, #1
   20e14:	mov	r0, r2
   20e18:	add	r2, r3, r0
   20e1c:	cmp	r2, r5
   20e20:	bcc	20dcc <__assert_fail@plt+0xf340>
   20e24:	cmp	r5, #2
   20e28:	bcc	2142c <__assert_fail@plt+0xf9a0>
   20e2c:	mvn	lr, #0
   20e30:	mov	r2, #0
   20e34:	mov	r3, #1
   20e38:	mov	r5, #1
   20e3c:	mov	r7, #1
   20e40:	b	20e60 <__assert_fail@plt+0xf3d4>
   20e44:	sub	r5, r3, lr
   20e48:	mov	r7, #1
   20e4c:	mov	r2, r3
   20e50:	ldr	r0, [sp, #28]
   20e54:	add	r3, r7, r2
   20e58:	cmp	r3, r0
   20e5c:	bcs	21434 <__assert_fail@plt+0xf9a8>
   20e60:	add	r4, lr, r7
   20e64:	ldrb	r0, [r9, r3]
   20e68:	ldrb	r4, [r9, r4]
   20e6c:	cmp	r4, r0
   20e70:	bcc	20e44 <__assert_fail@plt+0xf3b8>
   20e74:	cmp	r0, r4
   20e78:	bne	20ea0 <__assert_fail@plt+0xf414>
   20e7c:	cmp	r7, r5
   20e80:	addne	r7, r7, #1
   20e84:	addeq	r2, r2, r5
   20e88:	moveq	r7, #1
   20e8c:	ldr	r0, [sp, #28]
   20e90:	add	r3, r7, r2
   20e94:	cmp	r3, r0
   20e98:	bcc	20e60 <__assert_fail@plt+0xf3d4>
   20e9c:	b	21434 <__assert_fail@plt+0xf9a8>
   20ea0:	add	r0, r2, #1
   20ea4:	mov	lr, r2
   20ea8:	mov	r7, #1
   20eac:	mov	r5, #1
   20eb0:	mov	r2, r0
   20eb4:	ldr	r0, [sp, #28]
   20eb8:	add	r3, r7, r2
   20ebc:	cmp	r3, r0
   20ec0:	bcc	20e60 <__assert_fail@plt+0xf3d4>
   20ec4:	b	21434 <__assert_fail@plt+0xf9a8>
   20ec8:	mov	r5, #1
   20ecc:	mvn	lr, #0
   20ed0:	ldr	r2, [sp, #28]
   20ed4:	add	r3, sp, #32
   20ed8:	add	r0, sl, #976	; 0x3d0
   20edc:	vdup.32	q8, r2
   20ee0:	vst1.32	{d16-d17}, [r3]
   20ee4:	vst1.32	{d16-d17}, [r0]
   20ee8:	add	r0, sl, #960	; 0x3c0
   20eec:	vst1.32	{d16-d17}, [r0]
   20ef0:	add	r0, sl, #944	; 0x3b0
   20ef4:	vst1.32	{d16-d17}, [r0]
   20ef8:	add	r0, sl, #928	; 0x3a0
   20efc:	vst1.32	{d16-d17}, [r0]
   20f00:	add	r0, sl, #912	; 0x390
   20f04:	vst1.32	{d16-d17}, [r0]
   20f08:	add	r0, sl, #896	; 0x380
   20f0c:	vst1.32	{d16-d17}, [r0]
   20f10:	add	r0, sl, #880	; 0x370
   20f14:	vst1.32	{d16-d17}, [r0]
   20f18:	add	r0, sl, #864	; 0x360
   20f1c:	vst1.32	{d16-d17}, [r0]
   20f20:	add	r0, sl, #848	; 0x350
   20f24:	vst1.32	{d16-d17}, [r0]
   20f28:	add	r0, sl, #832	; 0x340
   20f2c:	vst1.32	{d16-d17}, [r0]
   20f30:	add	r0, sl, #816	; 0x330
   20f34:	vst1.32	{d16-d17}, [r0]
   20f38:	add	r0, sl, #800	; 0x320
   20f3c:	vst1.32	{d16-d17}, [r0]
   20f40:	add	r0, sl, #784	; 0x310
   20f44:	vst1.32	{d16-d17}, [r0]
   20f48:	add	r0, sl, #768	; 0x300
   20f4c:	vst1.32	{d16-d17}, [r0]
   20f50:	add	r0, sl, #752	; 0x2f0
   20f54:	vst1.32	{d16-d17}, [r0]
   20f58:	add	r0, sl, #736	; 0x2e0
   20f5c:	vst1.32	{d16-d17}, [r0]
   20f60:	add	r0, sl, #720	; 0x2d0
   20f64:	vst1.32	{d16-d17}, [r0]
   20f68:	add	r0, sl, #704	; 0x2c0
   20f6c:	vst1.32	{d16-d17}, [r0]
   20f70:	add	r0, sl, #688	; 0x2b0
   20f74:	vst1.32	{d16-d17}, [r0]
   20f78:	add	r0, sl, #672	; 0x2a0
   20f7c:	vst1.32	{d16-d17}, [r0]
   20f80:	add	r0, sl, #656	; 0x290
   20f84:	vst1.32	{d16-d17}, [r0]
   20f88:	add	r0, sl, #640	; 0x280
   20f8c:	vst1.32	{d16-d17}, [r0]
   20f90:	add	r0, sl, #624	; 0x270
   20f94:	vst1.32	{d16-d17}, [r0]
   20f98:	add	r0, sl, #608	; 0x260
   20f9c:	vst1.32	{d16-d17}, [r0]
   20fa0:	add	r0, sl, #592	; 0x250
   20fa4:	vst1.32	{d16-d17}, [r0]
   20fa8:	add	r0, sl, #576	; 0x240
   20fac:	vst1.32	{d16-d17}, [r0]
   20fb0:	add	r0, sl, #560	; 0x230
   20fb4:	vst1.32	{d16-d17}, [r0]
   20fb8:	add	r0, sl, #544	; 0x220
   20fbc:	vst1.32	{d16-d17}, [r0]
   20fc0:	add	r0, sl, #528	; 0x210
   20fc4:	vst1.32	{d16-d17}, [r0]
   20fc8:	add	r0, sl, #512	; 0x200
   20fcc:	vst1.32	{d16-d17}, [r0]
   20fd0:	add	r0, sl, #496	; 0x1f0
   20fd4:	vst1.32	{d16-d17}, [r0]
   20fd8:	add	r0, sl, #480	; 0x1e0
   20fdc:	vst1.32	{d16-d17}, [r0]
   20fe0:	add	r0, sl, #464	; 0x1d0
   20fe4:	vst1.32	{d16-d17}, [r0]
   20fe8:	add	r0, sl, #448	; 0x1c0
   20fec:	vst1.32	{d16-d17}, [r0]
   20ff0:	add	r0, sl, #432	; 0x1b0
   20ff4:	vst1.32	{d16-d17}, [r0]
   20ff8:	add	r0, sl, #416	; 0x1a0
   20ffc:	vst1.32	{d16-d17}, [r0]
   21000:	add	r0, sl, #400	; 0x190
   21004:	vst1.32	{d16-d17}, [r0]
   21008:	add	r0, sl, #384	; 0x180
   2100c:	vst1.32	{d16-d17}, [r0]
   21010:	add	r0, sl, #368	; 0x170
   21014:	vst1.32	{d16-d17}, [r0]
   21018:	add	r0, sl, #352	; 0x160
   2101c:	vst1.32	{d16-d17}, [r0]
   21020:	add	r0, sl, #336	; 0x150
   21024:	vst1.32	{d16-d17}, [r0]
   21028:	add	r0, sl, #320	; 0x140
   2102c:	vst1.32	{d16-d17}, [r0]
   21030:	add	r0, sl, #304	; 0x130
   21034:	vst1.32	{d16-d17}, [r0]
   21038:	add	r0, sl, #288	; 0x120
   2103c:	vst1.32	{d16-d17}, [r0]
   21040:	add	r0, sl, #272	; 0x110
   21044:	vst1.32	{d16-d17}, [r0]
   21048:	add	r0, sl, #256	; 0x100
   2104c:	vst1.32	{d16-d17}, [r0]
   21050:	add	r0, sl, #240	; 0xf0
   21054:	vst1.32	{d16-d17}, [r0]
   21058:	add	r0, sl, #224	; 0xe0
   2105c:	vst1.32	{d16-d17}, [r0]
   21060:	add	r0, sl, #208	; 0xd0
   21064:	vst1.32	{d16-d17}, [r0]
   21068:	add	r0, sl, #192	; 0xc0
   2106c:	vst1.32	{d16-d17}, [r0]
   21070:	add	r0, sl, #176	; 0xb0
   21074:	vst1.32	{d16-d17}, [r0]
   21078:	add	r0, sl, #160	; 0xa0
   2107c:	vst1.32	{d16-d17}, [r0]
   21080:	add	r0, sl, #144	; 0x90
   21084:	vst1.32	{d16-d17}, [r0]
   21088:	add	r0, sl, #128	; 0x80
   2108c:	vst1.32	{d16-d17}, [r0]
   21090:	add	r0, sl, #112	; 0x70
   21094:	vst1.32	{d16-d17}, [r0]
   21098:	add	r0, sl, #96	; 0x60
   2109c:	vst1.32	{d16-d17}, [r0]
   210a0:	add	r0, sl, #80	; 0x50
   210a4:	vst1.32	{d16-d17}, [r0]
   210a8:	add	r0, sl, #64	; 0x40
   210ac:	vst1.32	{d16-d17}, [r0]
   210b0:	add	r0, sl, #48	; 0x30
   210b4:	vst1.32	{d16-d17}, [r0]
   210b8:	add	r0, sl, #32
   210bc:	vst1.32	{d16-d17}, [r0]
   210c0:	add	r0, sl, #16
   210c4:	vst1.32	{d16-d17}, [r0]
   210c8:	mov	r0, #992	; 0x3e0
   210cc:	vst1.32	{d16-d17}, [sl], r0
   210d0:	add	r0, r1, #1
   210d4:	add	r1, lr, #1
   210d8:	cmp	r1, r0
   210dc:	vst1.32	{d16-d17}, [sl]
   210e0:	movcc	r5, ip
   210e4:	movcc	r1, r0
   210e8:	cmp	r2, #0
   210ec:	str	r1, [sp, #16]
   210f0:	str	r5, [sp, #12]
   210f4:	beq	21168 <__assert_fail@plt+0xf6dc>
   210f8:	mov	r6, r3
   210fc:	ldr	r3, [sp, #20]
   21100:	mov	lr, r2
   21104:	and	r0, r2, #1
   21108:	mvn	r2, r8
   2110c:	mov	r1, #0
   21110:	cmn	r2, r3
   21114:	beq	2114c <__assert_fail@plt+0xf6c0>
   21118:	sub	r2, lr, r0
   2111c:	sub	r3, lr, #2
   21120:	mov	r1, #0
   21124:	mov	r5, r9
   21128:	add	r4, r3, #1
   2112c:	ldrb	r7, [r5, r1]!
   21130:	add	r1, r1, #2
   21134:	cmp	r2, r1
   21138:	str	r4, [r6, r7, lsl #2]
   2113c:	ldrb	r7, [r5, #1]
   21140:	str	r3, [r6, r7, lsl #2]
   21144:	sub	r3, r3, #2
   21148:	bne	21124 <__assert_fail@plt+0xf698>
   2114c:	ldr	r5, [sp, #12]
   21150:	cmp	r0, #0
   21154:	beq	21168 <__assert_fail@plt+0xf6dc>
   21158:	ldrb	r0, [r9, r1]
   2115c:	mvn	r1, r1
   21160:	add	r1, lr, r1
   21164:	str	r1, [r6, r0, lsl #2]
   21168:	ldr	r6, [sp, #16]
   2116c:	add	r1, r9, r5
   21170:	mov	r0, r9
   21174:	mov	r2, r6
   21178:	bl	118a0 <bcmp@plt>
   2117c:	cmp	r0, #0
   21180:	beq	212cc <__assert_fail@plt+0xf840>
   21184:	ldr	r0, [sp, #24]
   21188:	ldr	r1, [sp, #8]
   2118c:	ldr	r4, [sp, #28]
   21190:	mov	r7, #0
   21194:	add	r0, r0, r1
   21198:	sub	r2, r4, r1
   2119c:	mov	r1, #0
   211a0:	bl	11948 <memchr@plt>
   211a4:	sub	r1, r4, r6
   211a8:	cmp	r6, r1
   211ac:	movcs	r1, r6
   211b0:	cmp	r4, #0
   211b4:	beq	20c58 <__assert_fail@plt+0xf1cc>
   211b8:	cmp	r0, #0
   211bc:	str	r1, [sp, #12]
   211c0:	bne	20c58 <__assert_fail@plt+0xf1cc>
   211c4:	ldr	r2, [sp, #16]
   211c8:	sub	r0, r4, #1
   211cc:	cmp	r2, r0
   211d0:	bcs	21680 <__assert_fail@plt+0xfbf4>
   211d4:	ldr	r0, [sp, #24]
   211d8:	ldr	r1, [sp, #20]
   211dc:	mov	r5, #0
   211e0:	add	r0, r0, r2
   211e4:	str	r0, [sp, #8]
   211e8:	ldr	r0, [sp, #4]
   211ec:	add	r0, r1, r0
   211f0:	add	sl, r0, r2
   211f4:	sub	r0, r8, r1
   211f8:	mov	r1, r4
   211fc:	add	r0, r0, r2
   21200:	add	r6, r0, #1
   21204:	rsb	r0, r2, #1
   21208:	str	r0, [sp, #20]
   2120c:	ldr	r0, [sp, #24]
   21210:	add	r3, sp, #32
   21214:	add	r0, r1, r0
   21218:	ldrb	r2, [r0, #-1]
   2121c:	ldr	r2, [r3, r2, lsl #2]
   21220:	cmp	r2, #0
   21224:	beq	21230 <__assert_fail@plt+0xf7a4>
   21228:	add	r5, r2, r5
   2122c:	b	2129c <__assert_fail@plt+0xf810>
   21230:	ldr	r2, [sp, #8]
   21234:	mov	ip, r5
   21238:	add	r3, r2, r5
   2123c:	mov	r2, #0
   21240:	ldrb	r7, [r3, -r2]
   21244:	ldrb	r5, [sl, -r2]
   21248:	cmp	r5, r7
   2124c:	bne	21290 <__assert_fail@plt+0xf804>
   21250:	sub	r2, r2, #1
   21254:	cmp	r6, r2
   21258:	bne	21240 <__assert_fail@plt+0xf7b4>
   2125c:	ldr	r5, [sp, #24]
   21260:	ldr	r3, [sp, #20]
   21264:	add	r2, r5, ip
   21268:	cmp	r3, #1
   2126c:	beq	21714 <__assert_fail@plt+0xfc88>
   21270:	ldrb	r7, [r2, -r3]
   21274:	ldrb	r5, [r9, -r3]
   21278:	add	r3, r3, #1
   2127c:	cmp	r5, r7
   21280:	ldr	r5, [sp, #24]
   21284:	beq	21268 <__assert_fail@plt+0xf7dc>
   21288:	ldr	r2, [sp, #12]
   2128c:	b	21294 <__assert_fail@plt+0xf808>
   21290:	rsb	r2, r2, #0
   21294:	add	r2, ip, r2
   21298:	add	r5, r2, #1
   2129c:	add	r8, r5, r4
   212a0:	mov	r7, #0
   212a4:	sub	r2, r8, r1
   212a8:	mov	r1, #0
   212ac:	bl	11948 <memchr@plt>
   212b0:	cmp	r8, #0
   212b4:	beq	20c58 <__assert_fail@plt+0xf1cc>
   212b8:	ldr	r4, [sp, #28]
   212bc:	cmp	r0, #0
   212c0:	mov	r1, r8
   212c4:	beq	2120c <__assert_fail@plt+0xf780>
   212c8:	b	20c58 <__assert_fail@plt+0xf1cc>
   212cc:	ldr	r0, [sp, #24]
   212d0:	ldr	r1, [sp, #8]
   212d4:	ldr	r4, [sp, #28]
   212d8:	mov	r7, #0
   212dc:	add	r0, r0, r1
   212e0:	sub	r2, r4, r1
   212e4:	mov	r1, #0
   212e8:	bl	11948 <memchr@plt>
   212ec:	cmp	r4, #0
   212f0:	beq	20c58 <__assert_fail@plt+0xf1cc>
   212f4:	cmp	r0, #0
   212f8:	bne	20c58 <__assert_fail@plt+0xf1cc>
   212fc:	sub	r0, r4, r5
   21300:	mov	lr, r4
   21304:	sub	r8, r4, #1
   21308:	mov	r4, #0
   2130c:	mov	r6, #0
   21310:	str	r0, [sp, #20]
   21314:	ldr	r0, [sp, #16]
   21318:	mov	ip, lr
   2131c:	sub	r1, r0, #1
   21320:	rsb	r0, r0, #1
   21324:	str	r1, [sp, #8]
   21328:	str	r0, [sp, #4]
   2132c:	ldr	r0, [sp, #24]
   21330:	add	r1, sp, #32
   21334:	add	r0, ip, r0
   21338:	ldrb	r2, [r0, #-1]
   2133c:	ldr	r3, [r1, r2, lsl #2]
   21340:	cmp	r3, #0
   21344:	beq	21368 <__assert_fail@plt+0xf8dc>
   21348:	ldr	r1, [sp, #20]
   2134c:	cmp	r3, r5
   21350:	mov	r2, r3
   21354:	movcc	r2, r1
   21358:	cmp	r4, #0
   2135c:	mov	r4, #0
   21360:	moveq	r2, r3
   21364:	b	213f8 <__assert_fail@plt+0xf96c>
   21368:	ldr	r2, [sp, #16]
   2136c:	cmp	r2, r4
   21370:	movcc	r2, r4
   21374:	cmp	r2, r8
   21378:	bcs	213a0 <__assert_fail@plt+0xf914>
   2137c:	ldr	r1, [sp, #24]
   21380:	add	r3, r1, r6
   21384:	ldrb	r7, [r3, r2]
   21388:	ldrb	r5, [r9, r2]
   2138c:	cmp	r5, r7
   21390:	bne	213e8 <__assert_fail@plt+0xf95c>
   21394:	add	r2, r2, #1
   21398:	cmp	r2, r8
   2139c:	bcc	21384 <__assert_fail@plt+0xf8f8>
   213a0:	ldr	r1, [sp, #24]
   213a4:	ldr	r2, [sp, #8]
   213a8:	add	r7, r1, r6
   213ac:	add	r3, r2, #1
   213b0:	cmp	r4, r3
   213b4:	bcs	213cc <__assert_fail@plt+0xf940>
   213b8:	ldrb	r5, [r7, r2]
   213bc:	ldrb	r1, [r9, r2]
   213c0:	sub	r2, r2, #1
   213c4:	cmp	r1, r5
   213c8:	beq	213ac <__assert_fail@plt+0xf920>
   213cc:	ldr	r5, [sp, #12]
   213d0:	add	r1, r4, #1
   213d4:	ldr	r4, [sp, #20]
   213d8:	cmp	r3, r1
   213dc:	mov	r2, r5
   213e0:	bcs	213f8 <__assert_fail@plt+0xf96c>
   213e4:	b	20c58 <__assert_fail@plt+0xf1cc>
   213e8:	ldr	r1, [sp, #4]
   213ec:	ldr	r5, [sp, #12]
   213f0:	mov	r4, #0
   213f4:	add	r2, r1, r2
   213f8:	add	r6, r2, r6
   213fc:	mov	r1, #0
   21400:	mov	r7, #0
   21404:	add	sl, r6, lr
   21408:	sub	r2, sl, ip
   2140c:	bl	11948 <memchr@plt>
   21410:	cmp	sl, #0
   21414:	beq	20c58 <__assert_fail@plt+0xf1cc>
   21418:	ldr	lr, [sp, #28]
   2141c:	cmp	r0, #0
   21420:	mov	ip, sl
   21424:	beq	2132c <__assert_fail@plt+0xf8a0>
   21428:	b	20c58 <__assert_fail@plt+0xf1cc>
   2142c:	mov	r5, #1
   21430:	mvn	lr, #0
   21434:	add	r0, r1, #1
   21438:	add	r6, lr, #1
   2143c:	cmp	r6, r0
   21440:	movcc	r5, ip
   21444:	movcc	r6, r0
   21448:	add	r1, r9, r5
   2144c:	mov	r0, r9
   21450:	mov	r2, r6
   21454:	bl	118a0 <bcmp@plt>
   21458:	cmp	r0, #0
   2145c:	str	r6, [sp, #20]
   21460:	beq	21564 <__assert_fail@plt+0xfad8>
   21464:	ldr	r0, [sp, #24]
   21468:	ldr	r5, [sp, #28]
   2146c:	mov	r1, #0
   21470:	mov	r7, #0
   21474:	add	r0, r0, sl
   21478:	sub	r2, r5, sl
   2147c:	bl	11948 <memchr@plt>
   21480:	sub	r4, r5, r6
   21484:	cmp	r6, r4
   21488:	movcc	r6, r4
   2148c:	cmp	r5, #0
   21490:	beq	20c58 <__assert_fail@plt+0xf1cc>
   21494:	ldr	ip, [sp, #24]
   21498:	cmp	r0, #0
   2149c:	bne	20c58 <__assert_fail@plt+0xf1cc>
   214a0:	ldr	r0, [sp, #20]
   214a4:	mov	lr, r5
   214a8:	cmp	r5, r0
   214ac:	bls	21724 <__assert_fail@plt+0xfc98>
   214b0:	add	r1, ip, r0
   214b4:	add	sl, r0, r8
   214b8:	rsb	r0, r0, #1
   214bc:	mov	r5, #0
   214c0:	str	r6, [sp, #20]
   214c4:	str	r1, [sp, #16]
   214c8:	mov	r1, lr
   214cc:	str	r0, [sp, #12]
   214d0:	ldr	r0, [sp, #16]
   214d4:	mov	r2, #0
   214d8:	add	r0, r0, r5
   214dc:	ldrb	r3, [r0, r2]
   214e0:	ldrb	r7, [sl, r2]
   214e4:	cmp	r7, r3
   214e8:	bne	21520 <__assert_fail@plt+0xfa94>
   214ec:	add	r2, r2, #1
   214f0:	cmp	r4, r2
   214f4:	bne	214dc <__assert_fail@plt+0xfa50>
   214f8:	ldr	r2, [sp, #12]
   214fc:	add	r0, ip, r5
   21500:	cmp	r2, #1
   21504:	beq	217b4 <__assert_fail@plt+0xfd28>
   21508:	ldrb	r3, [r0, -r2]
   2150c:	ldrb	r7, [r9, -r2]
   21510:	add	r2, r2, #1
   21514:	cmp	r7, r3
   21518:	beq	21500 <__assert_fail@plt+0xfa74>
   2151c:	mov	r2, r6
   21520:	add	r2, r5, r2
   21524:	add	r0, ip, r1
   21528:	mov	r7, #0
   2152c:	add	r2, r2, #1
   21530:	add	r8, r2, lr
   21534:	mov	r5, r2
   21538:	sub	r2, r8, r1
   2153c:	mov	r1, #0
   21540:	bl	11948 <memchr@plt>
   21544:	cmp	r0, #0
   21548:	bne	20c58 <__assert_fail@plt+0xf1cc>
   2154c:	add	lr, sp, #20
   21550:	cmp	r8, #0
   21554:	mov	r1, r8
   21558:	ldm	lr, {r6, ip, lr}
   2155c:	bne	214d0 <__assert_fail@plt+0xfa44>
   21560:	b	20c58 <__assert_fail@plt+0xf1cc>
   21564:	ldr	r0, [sp, #24]
   21568:	ldr	r4, [sp, #28]
   2156c:	mov	r1, #0
   21570:	mov	r7, #0
   21574:	add	r0, r0, sl
   21578:	sub	r2, r4, sl
   2157c:	bl	11948 <memchr@plt>
   21580:	cmp	r4, #0
   21584:	beq	20c58 <__assert_fail@plt+0xf1cc>
   21588:	mov	r8, r5
   2158c:	ldr	r5, [sp, #24]
   21590:	cmp	r0, #0
   21594:	bne	20c58 <__assert_fail@plt+0xf1cc>
   21598:	sub	r0, r4, r8
   2159c:	mov	r1, r4
   215a0:	mov	r6, #0
   215a4:	mov	ip, r4
   215a8:	mov	sl, #0
   215ac:	str	r0, [sp, #16]
   215b0:	ldr	r0, [sp, #20]
   215b4:	sub	r2, r0, #1
   215b8:	rsb	r0, r0, #1
   215bc:	str	r2, [sp, #12]
   215c0:	str	r0, [sp, #8]
   215c4:	ldr	r0, [sp, #20]
   215c8:	cmp	r0, r6
   215cc:	movcc	r0, r6
   215d0:	cmp	r0, r1
   215d4:	bcs	215f8 <__assert_fail@plt+0xfb6c>
   215d8:	add	r2, r5, sl
   215dc:	ldrb	r3, [r2, r0]
   215e0:	ldrb	r7, [r9, r0]
   215e4:	cmp	r7, r3
   215e8:	bne	21638 <__assert_fail@plt+0xfbac>
   215ec:	add	r0, r0, #1
   215f0:	cmp	r0, r1
   215f4:	bcc	215dc <__assert_fail@plt+0xfb50>
   215f8:	ldr	r0, [sp, #12]
   215fc:	add	r7, r5, sl
   21600:	add	r2, r0, #1
   21604:	cmp	r6, r2
   21608:	bcs	21620 <__assert_fail@plt+0xfb94>
   2160c:	ldrb	r3, [r7, r0]
   21610:	ldrb	r4, [r9, r0]
   21614:	sub	r0, r0, #1
   21618:	cmp	r4, r3
   2161c:	beq	21600 <__assert_fail@plt+0xfb74>
   21620:	add	r0, r6, #1
   21624:	ldr	r6, [sp, #16]
   21628:	cmp	r2, r0
   2162c:	mov	r2, r8
   21630:	bcs	21644 <__assert_fail@plt+0xfbb8>
   21634:	b	20c58 <__assert_fail@plt+0xf1cc>
   21638:	ldr	r2, [sp, #8]
   2163c:	mov	r6, #0
   21640:	add	r2, r2, r0
   21644:	add	sl, r2, sl
   21648:	add	r0, r5, ip
   2164c:	mov	r7, #0
   21650:	add	r4, sl, r1
   21654:	mov	r1, #0
   21658:	sub	r2, r4, ip
   2165c:	bl	11948 <memchr@plt>
   21660:	cmp	r4, #0
   21664:	beq	20c58 <__assert_fail@plt+0xf1cc>
   21668:	ldr	r1, [sp, #28]
   2166c:	ldr	r5, [sp, #24]
   21670:	cmp	r0, #0
   21674:	mov	ip, r4
   21678:	beq	215c4 <__assert_fail@plt+0xfb38>
   2167c:	b	20c58 <__assert_fail@plt+0xf1cc>
   21680:	ldr	r0, [sp, #12]
   21684:	rsb	sl, r2, #1
   21688:	mov	r5, #0
   2168c:	mov	r1, r4
   21690:	add	r8, r0, #1
   21694:	mov	ip, r5
   21698:	ldr	r5, [sp, #24]
   2169c:	add	r3, sp, #32
   216a0:	add	r0, r1, r5
   216a4:	ldrb	r2, [r0, #-1]
   216a8:	ldr	r2, [r3, r2, lsl #2]
   216ac:	cmp	r2, #0
   216b0:	bne	216dc <__assert_fail@plt+0xfc50>
   216b4:	add	r2, r5, ip
   216b8:	mov	r3, sl
   216bc:	cmp	r3, #1
   216c0:	beq	21714 <__assert_fail@plt+0xfc88>
   216c4:	ldrb	r7, [r2, -r3]
   216c8:	ldrb	r6, [r9, -r3]
   216cc:	add	r3, r3, #1
   216d0:	cmp	r6, r7
   216d4:	beq	216bc <__assert_fail@plt+0xfc30>
   216d8:	mov	r2, r8
   216dc:	mov	r5, ip
   216e0:	add	r5, r2, ip
   216e4:	mov	r7, #0
   216e8:	add	r6, r5, r4
   216ec:	sub	r2, r6, r1
   216f0:	mov	r1, #0
   216f4:	bl	11948 <memchr@plt>
   216f8:	cmp	r6, #0
   216fc:	beq	20c58 <__assert_fail@plt+0xf1cc>
   21700:	ldr	r4, [sp, #28]
   21704:	cmp	r0, #0
   21708:	mov	r1, r6
   2170c:	beq	21694 <__assert_fail@plt+0xfc08>
   21710:	b	20c58 <__assert_fail@plt+0xf1cc>
   21714:	add	r7, r5, ip
   21718:	mov	r0, r7
   2171c:	sub	sp, fp, #28
   21720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21724:	add	r1, r6, #1
   21728:	rsb	r0, r0, #1
   2172c:	mov	r5, #0
   21730:	mov	r4, ip
   21734:	mov	sl, lr
   21738:	mov	r7, #0
   2173c:	str	r1, [sp, #20]
   21740:	mov	r1, r0
   21744:	cmp	r1, #1
   21748:	beq	217b4 <__assert_fail@plt+0xfd28>
   2174c:	ldrb	r2, [r4, -r1]
   21750:	ldrb	r3, [r9, -r1]
   21754:	add	r1, r1, #1
   21758:	cmp	r3, r2
   2175c:	beq	21744 <__assert_fail@plt+0xfcb8>
   21760:	str	r0, [sp, #16]
   21764:	ldr	r0, [sp, #20]
   21768:	mov	r1, #0
   2176c:	add	r5, r0, r5
   21770:	mov	r6, r5
   21774:	add	r8, r5, lr
   21778:	mov	r5, r0
   2177c:	add	r0, ip, sl
   21780:	mov	r2, r5
   21784:	bl	11948 <memchr@plt>
   21788:	cmp	r8, #0
   2178c:	beq	20c58 <__assert_fail@plt+0xf1cc>
   21790:	cmp	r0, #0
   21794:	ldr	lr, [sp, #28]
   21798:	ldr	ip, [sp, #24]
   2179c:	ldr	r0, [sp, #16]
   217a0:	add	r4, r4, r5
   217a4:	mov	sl, r8
   217a8:	mov	r5, r6
   217ac:	beq	21740 <__assert_fail@plt+0xfcb4>
   217b0:	b	20c58 <__assert_fail@plt+0xf1cc>
   217b4:	add	r7, ip, r5
   217b8:	mov	r0, r7
   217bc:	sub	sp, fp, #28
   217c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217c4:	sub	r0, r0, #1
   217c8:	ldrb	r3, [r0, #1]!
   217cc:	cmp	r3, #47	; 0x2f
   217d0:	beq	217c8 <__assert_fail@plt+0xfd3c>
   217d4:	mov	r2, #0
   217d8:	mov	r1, r0
   217dc:	uxtb	r3, r3
   217e0:	cmp	r3, #47	; 0x2f
   217e4:	bne	217fc <__assert_fail@plt+0xfd70>
   217e8:	ldrb	r3, [r1, #1]!
   217ec:	mov	r2, #1
   217f0:	uxtb	r3, r3
   217f4:	cmp	r3, #47	; 0x2f
   217f8:	beq	217e8 <__assert_fail@plt+0xfd5c>
   217fc:	cmp	r3, #0
   21800:	bxeq	lr
   21804:	tst	r2, #1
   21808:	mov	r2, #0
   2180c:	movne	r0, r1
   21810:	ldrb	r3, [r1, #1]!
   21814:	uxtb	r3, r3
   21818:	cmp	r3, #47	; 0x2f
   2181c:	bne	217fc <__assert_fail@plt+0xfd70>
   21820:	b	217e8 <__assert_fail@plt+0xfd5c>
   21824:	push	{r4, sl, fp, lr}
   21828:	add	fp, sp, #8
   2182c:	mov	r4, r0
   21830:	bl	118ac <strlen@plt>
   21834:	mov	r1, r0
   21838:	sub	r2, r4, #1
   2183c:	mov	r0, r1
   21840:	cmp	r1, #2
   21844:	bcc	21858 <__assert_fail@plt+0xfdcc>
   21848:	ldrb	r3, [r2, r0]
   2184c:	sub	r1, r0, #1
   21850:	cmp	r3, #47	; 0x2f
   21854:	beq	2183c <__assert_fail@plt+0xfdb0>
   21858:	pop	{r4, sl, fp, pc}
   2185c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21860:	add	fp, sp, #28
   21864:	sub	sp, sp, #4
   21868:	mov	r4, r0
   2186c:	bl	1175c <chdir@plt>
   21870:	cmp	r0, #0
   21874:	beq	21944 <__assert_fail@plt+0xfeb8>
   21878:	mov	r6, r0
   2187c:	bl	118e8 <__errno_location@plt>
   21880:	mov	r9, r0
   21884:	ldr	r0, [r0]
   21888:	cmp	r0, #36	; 0x24
   2188c:	bne	21b04 <__assert_fail@plt+0x10078>
   21890:	mov	r0, r4
   21894:	bl	118ac <strlen@plt>
   21898:	cmp	r0, #0
   2189c:	beq	21bbc <__assert_fail@plt+0x10130>
   218a0:	mov	r7, r0
   218a4:	mov	r0, #0
   218a8:	cmp	r0, r7, lsr #12
   218ac:	beq	21bdc <__assert_fail@plt+0x10150>
   218b0:	movw	r1, #17765	; 0x4565
   218b4:	mov	r0, r4
   218b8:	movt	r1, #2
   218bc:	bl	11a80 <strspn@plt>
   218c0:	cmp	r0, #0
   218c4:	beq	21954 <__assert_fail@plt+0xfec8>
   218c8:	mov	r6, r0
   218cc:	cmp	r0, #2
   218d0:	bne	21a80 <__assert_fail@plt+0xfff4>
   218d4:	add	r0, r4, #3
   218d8:	sub	r2, r7, #3
   218dc:	mov	r1, #47	; 0x2f
   218e0:	mov	r8, #47	; 0x2f
   218e4:	bl	11948 <memchr@plt>
   218e8:	cmp	r0, #0
   218ec:	beq	21b18 <__assert_fail@plt+0x1008c>
   218f0:	mov	r6, r0
   218f4:	mov	r0, #0
   218f8:	mov	r1, r4
   218fc:	mov	r2, #18688	; 0x4900
   21900:	strb	r0, [r6]
   21904:	mvn	r0, #99	; 0x63
   21908:	bl	118d0 <openat64@plt>
   2190c:	cmp	r0, #0
   21910:	strb	r8, [r6]
   21914:	bmi	21b10 <__assert_fail@plt+0x10084>
   21918:	movw	r1, #17765	; 0x4565
   2191c:	add	r6, r6, #1
   21920:	mov	r5, r0
   21924:	movt	r1, #2
   21928:	mov	r0, r6
   2192c:	bl	11a80 <strspn@plt>
   21930:	add	r6, r6, r0
   21934:	ldrb	r0, [r6]
   21938:	cmp	r0, #47	; 0x2f
   2193c:	bne	21968 <__assert_fail@plt+0xfedc>
   21940:	b	21ab0 <__assert_fail@plt+0x10024>
   21944:	mov	r6, #0
   21948:	mov	r0, r6
   2194c:	sub	sp, fp, #28
   21950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21954:	mvn	r5, #99	; 0x63
   21958:	mov	r6, r4
   2195c:	ldrb	r0, [r6]
   21960:	cmp	r0, #47	; 0x2f
   21964:	beq	21ab0 <__assert_fail@plt+0x10024>
   21968:	add	sl, r4, r7
   2196c:	cmp	r6, sl
   21970:	bhi	21bfc <__assert_fail@plt+0x10170>
   21974:	sub	r0, sl, r6
   21978:	str	r9, [sp]
   2197c:	cmp	r0, #4096	; 0x1000
   21980:	blt	21a38 <__assert_fail@plt+0xffac>
   21984:	movw	r9, #17765	; 0x4565
   21988:	mov	r8, #0
   2198c:	movt	r9, #2
   21990:	b	219bc <__assert_fail@plt+0xff30>
   21994:	mov	r0, #47	; 0x2f
   21998:	mov	r1, r9
   2199c:	strb	r0, [r4], #1
   219a0:	mov	r0, r4
   219a4:	bl	11a80 <strspn@plt>
   219a8:	add	r6, r4, r0
   219ac:	mov	r5, r7
   219b0:	sub	r0, sl, r6
   219b4:	cmp	r0, #4096	; 0x1000
   219b8:	blt	21a3c <__assert_fail@plt+0xffb0>
   219bc:	mov	r0, r6
   219c0:	mov	r1, #47	; 0x2f
   219c4:	mov	r2, #4096	; 0x1000
   219c8:	bl	118dc <memrchr@plt>
   219cc:	cmp	r0, #0
   219d0:	beq	21b30 <__assert_fail@plt+0x100a4>
   219d4:	mov	r4, r0
   219d8:	strb	r8, [r0], -r6
   219dc:	cmp	r0, #4096	; 0x1000
   219e0:	bge	21b9c <__assert_fail@plt+0x10110>
   219e4:	mov	r0, r5
   219e8:	mov	r1, r6
   219ec:	mov	r2, #18688	; 0x4900
   219f0:	bl	118d0 <openat64@plt>
   219f4:	cmp	r0, #0
   219f8:	bmi	21b4c <__assert_fail@plt+0x100c0>
   219fc:	mov	r7, r0
   21a00:	cmp	r5, #0
   21a04:	bmi	21994 <__assert_fail@plt+0xff08>
   21a08:	mov	r0, r5
   21a0c:	bl	11a68 <close@plt>
   21a10:	cmp	r0, #0
   21a14:	beq	21994 <__assert_fail@plt+0xff08>
   21a18:	movw	r0, #17937	; 0x4611
   21a1c:	movw	r1, #17839	; 0x45af
   21a20:	movw	r3, #17950	; 0x461e
   21a24:	mov	r2, #64	; 0x40
   21a28:	movt	r0, #2
   21a2c:	movt	r1, #2
   21a30:	movt	r3, #2
   21a34:	bl	11a8c <__assert_fail@plt>
   21a38:	mov	r7, r5
   21a3c:	cmp	r6, sl
   21a40:	bcs	21ad0 <__assert_fail@plt+0x10044>
   21a44:	mov	r0, r7
   21a48:	mov	r1, r6
   21a4c:	mov	r2, #18688	; 0x4900
   21a50:	bl	118d0 <openat64@plt>
   21a54:	ldr	r9, [sp]
   21a58:	cmp	r0, #0
   21a5c:	bmi	21b88 <__assert_fail@plt+0x100fc>
   21a60:	mov	r5, r0
   21a64:	cmp	r7, #0
   21a68:	bmi	21ad8 <__assert_fail@plt+0x1004c>
   21a6c:	mov	r0, r7
   21a70:	bl	11a68 <close@plt>
   21a74:	cmp	r0, #0
   21a78:	beq	21ad8 <__assert_fail@plt+0x1004c>
   21a7c:	b	21a18 <__assert_fail@plt+0xff8c>
   21a80:	movw	r1, #17765	; 0x4565
   21a84:	mvn	r0, #99	; 0x63
   21a88:	mov	r2, #18688	; 0x4900
   21a8c:	movt	r1, #2
   21a90:	bl	118d0 <openat64@plt>
   21a94:	cmp	r0, #0
   21a98:	bmi	21b10 <__assert_fail@plt+0x10084>
   21a9c:	mov	r5, r0
   21aa0:	add	r6, r4, r6
   21aa4:	ldrb	r0, [r6]
   21aa8:	cmp	r0, #47	; 0x2f
   21aac:	bne	21968 <__assert_fail@plt+0xfedc>
   21ab0:	movw	r0, #17891	; 0x45e3
   21ab4:	movw	r1, #17839	; 0x45af
   21ab8:	movw	r3, #17856	; 0x45c0
   21abc:	mov	r2, #162	; 0xa2
   21ac0:	movt	r0, #2
   21ac4:	movt	r1, #2
   21ac8:	movt	r3, #2
   21acc:	bl	11a8c <__assert_fail@plt>
   21ad0:	ldr	r9, [sp]
   21ad4:	mov	r5, r7
   21ad8:	mov	r0, r5
   21adc:	bl	119f0 <fchdir@plt>
   21ae0:	cmp	r0, #0
   21ae4:	bne	21b58 <__assert_fail@plt+0x100cc>
   21ae8:	mov	r6, #0
   21aec:	cmp	r5, #0
   21af0:	bmi	21b04 <__assert_fail@plt+0x10078>
   21af4:	mov	r0, r5
   21af8:	bl	11a68 <close@plt>
   21afc:	cmp	r0, #0
   21b00:	bne	21a18 <__assert_fail@plt+0xff8c>
   21b04:	mov	r0, r6
   21b08:	sub	sp, fp, #28
   21b0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b10:	ldr	r4, [r9]
   21b14:	b	21b74 <__assert_fail@plt+0x100e8>
   21b18:	mov	r0, #36	; 0x24
   21b1c:	str	r0, [r9]
   21b20:	mvn	r6, #0
   21b24:	mov	r0, r6
   21b28:	sub	sp, fp, #28
   21b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b30:	ldr	r1, [sp]
   21b34:	mov	r0, #36	; 0x24
   21b38:	str	r0, [r1]
   21b3c:	mvn	r6, #0
   21b40:	mov	r0, r6
   21b44:	sub	sp, fp, #28
   21b48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b4c:	ldr	r9, [sp]
   21b50:	mov	r0, #47	; 0x2f
   21b54:	strb	r0, [r4]
   21b58:	ldr	r4, [r9]
   21b5c:	cmp	r5, #0
   21b60:	bmi	21b74 <__assert_fail@plt+0x100e8>
   21b64:	mov	r0, r5
   21b68:	bl	11a68 <close@plt>
   21b6c:	cmp	r0, #0
   21b70:	bne	21a18 <__assert_fail@plt+0xff8c>
   21b74:	str	r4, [r9]
   21b78:	mvn	r6, #0
   21b7c:	mov	r0, r6
   21b80:	sub	sp, fp, #28
   21b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21b88:	mov	r5, r7
   21b8c:	ldr	r4, [r9]
   21b90:	cmp	r5, #0
   21b94:	bpl	21b64 <__assert_fail@plt+0x100d8>
   21b98:	b	21b74 <__assert_fail@plt+0x100e8>
   21b9c:	movw	r0, #17918	; 0x45fe
   21ba0:	movw	r1, #17839	; 0x45af
   21ba4:	movw	r3, #17856	; 0x45c0
   21ba8:	mov	r2, #179	; 0xb3
   21bac:	movt	r0, #2
   21bb0:	movt	r1, #2
   21bb4:	movt	r3, #2
   21bb8:	bl	11a8c <__assert_fail@plt>
   21bbc:	movw	r0, #17831	; 0x45a7
   21bc0:	movw	r1, #17839	; 0x45af
   21bc4:	movw	r3, #17856	; 0x45c0
   21bc8:	mov	r2, #126	; 0x7e
   21bcc:	movt	r0, #2
   21bd0:	movt	r1, #2
   21bd4:	movt	r3, #2
   21bd8:	bl	11a8c <__assert_fail@plt>
   21bdc:	movw	r0, #17879	; 0x45d7
   21be0:	movw	r1, #17839	; 0x45af
   21be4:	movw	r3, #17856	; 0x45c0
   21be8:	mov	r2, #127	; 0x7f
   21bec:	movt	r0, #2
   21bf0:	movt	r1, #2
   21bf4:	movt	r3, #2
   21bf8:	bl	11a8c <__assert_fail@plt>
   21bfc:	movw	r0, #17903	; 0x45ef
   21c00:	movw	r1, #17839	; 0x45af
   21c04:	movw	r3, #17856	; 0x45c0
   21c08:	mov	r2, #163	; 0xa3
   21c0c:	movt	r0, #2
   21c10:	movt	r1, #2
   21c14:	movt	r3, #2
   21c18:	bl	11a8c <__assert_fail@plt>
   21c1c:	push	{r4, r5, r6, sl, fp, lr}
   21c20:	add	fp, sp, #16
   21c24:	mov	r4, r0
   21c28:	bl	117bc <__fpending@plt>
   21c2c:	ldr	r6, [r4]
   21c30:	mov	r5, r0
   21c34:	mov	r0, r4
   21c38:	bl	21ca0 <__assert_fail@plt+0x10214>
   21c3c:	tst	r6, #32
   21c40:	bne	21c78 <__assert_fail@plt+0x101ec>
   21c44:	cmp	r0, #0
   21c48:	mov	r4, r0
   21c4c:	mvnne	r4, #0
   21c50:	cmp	r5, #0
   21c54:	bne	21c84 <__assert_fail@plt+0x101f8>
   21c58:	cmp	r0, #0
   21c5c:	beq	21c84 <__assert_fail@plt+0x101f8>
   21c60:	bl	118e8 <__errno_location@plt>
   21c64:	ldr	r0, [r0]
   21c68:	subs	r4, r0, #9
   21c6c:	mvnne	r4, #0
   21c70:	mov	r0, r4
   21c74:	pop	{r4, r5, r6, sl, fp, pc}
   21c78:	mvn	r4, #0
   21c7c:	cmp	r0, #0
   21c80:	beq	21c8c <__assert_fail@plt+0x10200>
   21c84:	mov	r0, r4
   21c88:	pop	{r4, r5, r6, sl, fp, pc}
   21c8c:	bl	118e8 <__errno_location@plt>
   21c90:	mov	r1, #0
   21c94:	str	r1, [r0]
   21c98:	mov	r0, r4
   21c9c:	pop	{r4, r5, r6, sl, fp, pc}
   21ca0:	push	{r4, r5, r6, sl, fp, lr}
   21ca4:	add	fp, sp, #16
   21ca8:	sub	sp, sp, #8
   21cac:	mov	r4, r0
   21cb0:	bl	11930 <fileno@plt>
   21cb4:	cmn	r0, #1
   21cb8:	ble	21d2c <__assert_fail@plt+0x102a0>
   21cbc:	mov	r0, r4
   21cc0:	bl	11834 <__freading@plt>
   21cc4:	cmp	r0, #0
   21cc8:	beq	21cf4 <__assert_fail@plt+0x10268>
   21ccc:	mov	r0, r4
   21cd0:	bl	11930 <fileno@plt>
   21cd4:	mov	r1, #1
   21cd8:	mov	r2, #0
   21cdc:	mov	r3, #0
   21ce0:	str	r1, [sp]
   21ce4:	bl	11798 <lseek64@plt>
   21ce8:	and	r0, r0, r1
   21cec:	cmn	r0, #1
   21cf0:	beq	21d2c <__assert_fail@plt+0x102a0>
   21cf4:	mov	r0, r4
   21cf8:	bl	21d78 <__assert_fail@plt+0x102ec>
   21cfc:	cmp	r0, #0
   21d00:	beq	21d2c <__assert_fail@plt+0x102a0>
   21d04:	bl	118e8 <__errno_location@plt>
   21d08:	ldr	r6, [r0]
   21d0c:	mov	r5, r0
   21d10:	mov	r0, r4
   21d14:	bl	11954 <fclose@plt>
   21d18:	cmp	r6, #0
   21d1c:	strne	r6, [r5]
   21d20:	mvnne	r0, #0
   21d24:	sub	sp, fp, #16
   21d28:	pop	{r4, r5, r6, sl, fp, pc}
   21d2c:	mov	r0, r4
   21d30:	sub	sp, fp, #16
   21d34:	pop	{r4, r5, r6, sl, fp, lr}
   21d38:	b	11954 <fclose@plt>
   21d3c:	sub	sp, sp, #8
   21d40:	push	{fp, lr}
   21d44:	mov	fp, sp
   21d48:	sub	sp, sp, #8
   21d4c:	str	r2, [fp, #8]
   21d50:	str	r3, [fp, #12]
   21d54:	tst	r1, #64	; 0x40
   21d58:	mov	r2, #0
   21d5c:	ldrne	r2, [fp, #8]
   21d60:	bl	117ec <open64@plt>
   21d64:	bl	21f54 <__assert_fail@plt+0x104c8>
   21d68:	mov	sp, fp
   21d6c:	pop	{fp, lr}
   21d70:	add	sp, sp, #8
   21d74:	bx	lr
   21d78:	push	{r4, sl, fp, lr}
   21d7c:	add	fp, sp, #8
   21d80:	sub	sp, sp, #8
   21d84:	mov	r4, r0
   21d88:	cmp	r0, #0
   21d8c:	beq	21dc4 <__assert_fail@plt+0x10338>
   21d90:	mov	r0, r4
   21d94:	bl	11834 <__freading@plt>
   21d98:	cmp	r0, #0
   21d9c:	beq	21dc4 <__assert_fail@plt+0x10338>
   21da0:	ldrb	r0, [r4, #1]
   21da4:	tst	r0, #1
   21da8:	beq	21dc4 <__assert_fail@plt+0x10338>
   21dac:	mov	r0, #1
   21db0:	mov	r2, #0
   21db4:	mov	r3, #0
   21db8:	str	r0, [sp]
   21dbc:	mov	r0, r4
   21dc0:	bl	21dd4 <__assert_fail@plt+0x10348>
   21dc4:	mov	r0, r4
   21dc8:	sub	sp, fp, #8
   21dcc:	pop	{r4, sl, fp, lr}
   21dd0:	b	116e4 <fflush@plt>
   21dd4:	push	{r4, r5, r6, r7, fp, lr}
   21dd8:	add	fp, sp, #16
   21ddc:	sub	sp, sp, #8
   21de0:	mov	r4, r0
   21de4:	ldr	r0, [r0, #4]
   21de8:	mov	r5, r3
   21dec:	mov	r6, r2
   21df0:	ldr	r1, [r4, #8]
   21df4:	cmp	r1, r0
   21df8:	bne	21e14 <__assert_fail@plt+0x10388>
   21dfc:	ldrd	r0, [r4, #16]
   21e00:	cmp	r1, r0
   21e04:	bne	21e14 <__assert_fail@plt+0x10388>
   21e08:	ldr	r0, [r4, #36]	; 0x24
   21e0c:	cmp	r0, #0
   21e10:	beq	21e2c <__assert_fail@plt+0x103a0>
   21e14:	mov	r0, r4
   21e18:	mov	r2, r6
   21e1c:	mov	r3, r5
   21e20:	sub	sp, fp, #16
   21e24:	pop	{r4, r5, r6, r7, fp, lr}
   21e28:	b	11960 <fseeko64@plt>
   21e2c:	ldr	r7, [fp, #8]
   21e30:	mov	r0, r4
   21e34:	bl	11930 <fileno@plt>
   21e38:	mov	r2, r6
   21e3c:	mov	r3, r5
   21e40:	str	r7, [sp]
   21e44:	bl	11798 <lseek64@plt>
   21e48:	and	r2, r0, r1
   21e4c:	cmn	r2, #1
   21e50:	beq	21e70 <__assert_fail@plt+0x103e4>
   21e54:	strd	r0, [r4, #80]	; 0x50
   21e58:	ldr	r0, [r4]
   21e5c:	bic	r0, r0, #16
   21e60:	str	r0, [r4]
   21e64:	mov	r0, #0
   21e68:	sub	sp, fp, #16
   21e6c:	pop	{r4, r5, r6, r7, fp, pc}
   21e70:	mvn	r0, #0
   21e74:	sub	sp, fp, #16
   21e78:	pop	{r4, r5, r6, r7, fp, pc}
   21e7c:	push	{fp, lr}
   21e80:	mov	fp, sp
   21e84:	mov	r0, #14
   21e88:	bl	119c0 <nl_langinfo@plt>
   21e8c:	movw	r1, #12630	; 0x3156
   21e90:	cmp	r0, #0
   21e94:	movt	r1, #2
   21e98:	movne	r1, r0
   21e9c:	movw	r0, #17987	; 0x4643
   21ea0:	ldrb	r2, [r1]
   21ea4:	movt	r0, #2
   21ea8:	cmp	r2, #0
   21eac:	movne	r0, r1
   21eb0:	pop	{fp, pc}
   21eb4:	push	{r4, r5, r6, r7, fp, lr}
   21eb8:	add	fp, sp, #16
   21ebc:	sub	sp, sp, #8
   21ec0:	cmp	r0, #0
   21ec4:	add	r5, sp, #4
   21ec8:	mov	r7, r2
   21ecc:	mov	r4, r1
   21ed0:	movne	r5, r0
   21ed4:	mov	r0, r5
   21ed8:	bl	117c8 <mbrtowc@plt>
   21edc:	mov	r6, r0
   21ee0:	cmp	r7, #0
   21ee4:	beq	21f0c <__assert_fail@plt+0x10480>
   21ee8:	cmn	r6, #2
   21eec:	bcc	21f0c <__assert_fail@plt+0x10480>
   21ef0:	mov	r0, #0
   21ef4:	bl	22108 <__assert_fail@plt+0x1067c>
   21ef8:	cmp	r0, #0
   21efc:	bne	21f0c <__assert_fail@plt+0x10480>
   21f00:	ldrb	r0, [r4]
   21f04:	mov	r6, #1
   21f08:	str	r0, [r5]
   21f0c:	mov	r0, r6
   21f10:	sub	sp, fp, #16
   21f14:	pop	{r4, r5, r6, r7, fp, pc}
   21f18:	cmp	r2, #0
   21f1c:	beq	21f4c <__assert_fail@plt+0x104c0>
   21f20:	mvn	r3, #0
   21f24:	udiv	r3, r3, r2
   21f28:	cmp	r3, r1
   21f2c:	bcs	21f4c <__assert_fail@plt+0x104c0>
   21f30:	push	{fp, lr}
   21f34:	mov	fp, sp
   21f38:	bl	118e8 <__errno_location@plt>
   21f3c:	mov	r1, #12
   21f40:	str	r1, [r0]
   21f44:	mov	r0, #0
   21f48:	pop	{fp, pc}
   21f4c:	mul	r1, r2, r1
   21f50:	b	20b14 <__assert_fail@plt+0xf088>
   21f54:	push	{r4, r5, r6, r7, fp, lr}
   21f58:	add	fp, sp, #16
   21f5c:	mov	r4, r0
   21f60:	cmp	r0, #2
   21f64:	bhi	21f94 <__assert_fail@plt+0x10508>
   21f68:	mov	r0, r4
   21f6c:	bl	22214 <__assert_fail@plt+0x10788>
   21f70:	mov	r5, r0
   21f74:	bl	118e8 <__errno_location@plt>
   21f78:	ldr	r7, [r0]
   21f7c:	mov	r6, r0
   21f80:	mov	r0, r4
   21f84:	bl	11a68 <close@plt>
   21f88:	mov	r0, r5
   21f8c:	str	r7, [r6]
   21f90:	pop	{r4, r5, r6, r7, fp, pc}
   21f94:	mov	r0, r4
   21f98:	pop	{r4, r5, r6, r7, fp, pc}
   21f9c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   21fa0:	add	fp, sp, #24
   21fa4:	sub	sp, sp, #16
   21fa8:	mov	r3, r1
   21fac:	mov	r2, r0
   21fb0:	mov	r4, #0
   21fb4:	mov	r0, r2
   21fb8:	ldrb	r1, [r0, -r4, lsl #1]!
   21fbc:	cmp	r1, #37	; 0x25
   21fc0:	bne	21fe4 <__assert_fail@plt+0x10558>
   21fc4:	ldrb	r0, [r0, #1]
   21fc8:	cmp	r0, #115	; 0x73
   21fcc:	bne	22080 <__assert_fail@plt+0x105f4>
   21fd0:	sub	r4, r4, #1
   21fd4:	mov	r0, r2
   21fd8:	ldrb	r1, [r0, -r4, lsl #1]!
   21fdc:	cmp	r1, #37	; 0x25
   21fe0:	beq	21fc4 <__assert_fail@plt+0x10538>
   21fe4:	cmp	r1, #0
   21fe8:	bne	22080 <__assert_fail@plt+0x105f4>
   21fec:	cmp	r4, #0
   21ff0:	str	r3, [sp, #12]
   21ff4:	str	r3, [sp, #8]
   21ff8:	beq	220c4 <__assert_fail@plt+0x10638>
   21ffc:	ldr	r0, [sp, #8]
   22000:	mov	r5, #0
   22004:	mov	r7, r4
   22008:	add	r6, r0, #4
   2200c:	str	r6, [sp, #8]
   22010:	ldr	r0, [r6, #-4]
   22014:	bl	118ac <strlen@plt>
   22018:	adds	r5, r0, r5
   2201c:	add	r6, r6, #4
   22020:	mvncs	r5, #0
   22024:	adds	r7, r7, #1
   22028:	bcc	2200c <__assert_fail@plt+0x10580>
   2202c:	cmn	r5, #1
   22030:	ble	220e8 <__assert_fail@plt+0x1065c>
   22034:	add	r0, r5, #1
   22038:	bl	204a0 <__assert_fail@plt+0xea14>
   2203c:	mov	r8, r0
   22040:	mov	r5, r0
   22044:	ldr	r0, [sp, #12]
   22048:	add	r1, r0, #4
   2204c:	str	r1, [sp, #12]
   22050:	ldr	r6, [r0]
   22054:	mov	r0, r6
   22058:	bl	118ac <strlen@plt>
   2205c:	mov	r7, r0
   22060:	mov	r0, r5
   22064:	mov	r1, r6
   22068:	mov	r2, r7
   2206c:	bl	11708 <memcpy@plt>
   22070:	add	r5, r5, r7
   22074:	adds	r4, r4, #1
   22078:	bcc	22044 <__assert_fail@plt+0x105b8>
   2207c:	b	220d4 <__assert_fail@plt+0x10648>
   22080:	add	r0, sp, #4
   22084:	mov	r1, #1
   22088:	bl	1190c <__vasprintf_chk@plt>
   2208c:	cmn	r0, #1
   22090:	ble	220a4 <__assert_fail@plt+0x10618>
   22094:	ldr	r8, [sp, #4]
   22098:	mov	r0, r8
   2209c:	sub	sp, fp, #24
   220a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   220a4:	bl	118e8 <__errno_location@plt>
   220a8:	ldr	r0, [r0]
   220ac:	mov	r8, #0
   220b0:	cmp	r0, #12
   220b4:	beq	22104 <__assert_fail@plt+0x10678>
   220b8:	mov	r0, r8
   220bc:	sub	sp, fp, #24
   220c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   220c4:	mov	r0, #1
   220c8:	bl	204a0 <__assert_fail@plt+0xea14>
   220cc:	mov	r8, r0
   220d0:	mov	r5, r0
   220d4:	mov	r0, #0
   220d8:	strb	r0, [r5]
   220dc:	mov	r0, r8
   220e0:	sub	sp, fp, #24
   220e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   220e8:	bl	118e8 <__errno_location@plt>
   220ec:	mov	r1, #75	; 0x4b
   220f0:	mov	r8, #0
   220f4:	str	r1, [r0]
   220f8:	mov	r0, r8
   220fc:	sub	sp, fp, #24
   22100:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22104:	bl	209dc <__assert_fail@plt+0xef50>
   22108:	push	{r4, sl, fp, lr}
   2210c:	add	fp, sp, #8
   22110:	sub	sp, sp, #264	; 0x108
   22114:	add	r1, sp, #7
   22118:	movw	r2, #257	; 0x101
   2211c:	bl	22174 <__assert_fail@plt+0x106e8>
   22120:	mov	r4, #0
   22124:	cmp	r0, #0
   22128:	bne	22168 <__assert_fail@plt+0x106dc>
   2212c:	movw	r1, #17993	; 0x4649
   22130:	add	r0, sp, #7
   22134:	mov	r2, #2
   22138:	movt	r1, #2
   2213c:	bl	118a0 <bcmp@plt>
   22140:	cmp	r0, #0
   22144:	beq	22168 <__assert_fail@plt+0x106dc>
   22148:	movw	r1, #17995	; 0x464b
   2214c:	add	r0, sp, #7
   22150:	mov	r2, #6
   22154:	movt	r1, #2
   22158:	bl	118a0 <bcmp@plt>
   2215c:	cmp	r0, #0
   22160:	mov	r4, r0
   22164:	movwne	r4, #1
   22168:	mov	r0, r4
   2216c:	sub	sp, fp, #8
   22170:	pop	{r4, sl, fp, pc}
   22174:	push	{r4, r5, r6, r7, fp, lr}
   22178:	add	fp, sp, #16
   2217c:	mov	r4, r1
   22180:	mov	r1, #0
   22184:	mov	r6, r2
   22188:	bl	1199c <setlocale@plt>
   2218c:	cmp	r0, #0
   22190:	beq	221c0 <__assert_fail@plt+0x10734>
   22194:	mov	r7, r0
   22198:	bl	118ac <strlen@plt>
   2219c:	cmp	r0, r6
   221a0:	bcs	221dc <__assert_fail@plt+0x10750>
   221a4:	add	r2, r0, #1
   221a8:	mov	r0, r4
   221ac:	mov	r1, r7
   221b0:	bl	11708 <memcpy@plt>
   221b4:	mov	r5, #0
   221b8:	mov	r0, r5
   221bc:	pop	{r4, r5, r6, r7, fp, pc}
   221c0:	mov	r5, #22
   221c4:	cmp	r6, #0
   221c8:	beq	22204 <__assert_fail@plt+0x10778>
   221cc:	mov	r0, #0
   221d0:	strb	r0, [r4]
   221d4:	mov	r0, r5
   221d8:	pop	{r4, r5, r6, r7, fp, pc}
   221dc:	mov	r5, #34	; 0x22
   221e0:	cmp	r6, #0
   221e4:	beq	22204 <__assert_fail@plt+0x10778>
   221e8:	sub	r6, r6, #1
   221ec:	mov	r0, r4
   221f0:	mov	r1, r7
   221f4:	mov	r2, r6
   221f8:	bl	11708 <memcpy@plt>
   221fc:	mov	r0, #0
   22200:	strb	r0, [r4, r6]
   22204:	mov	r0, r5
   22208:	pop	{r4, r5, r6, r7, fp, pc}
   2220c:	mov	r1, #0
   22210:	b	1199c <setlocale@plt>
   22214:	mov	r1, #0
   22218:	mov	r2, #3
   2221c:	b	22220 <__assert_fail@plt+0x10794>
   22220:	sub	sp, sp, #8
   22224:	push	{r4, r5, r6, r7, fp, lr}
   22228:	add	fp, sp, #16
   2222c:	sub	sp, sp, #8
   22230:	mov	r5, r0
   22234:	add	r0, fp, #8
   22238:	cmp	r1, #11
   2223c:	str	r2, [fp, #8]
   22240:	str	r3, [fp, #12]
   22244:	str	r0, [sp, #4]
   22248:	bhi	22284 <__assert_fail@plt+0x107f8>
   2224c:	mov	r0, #1
   22250:	movw	r2, #1300	; 0x514
   22254:	tst	r2, r0, lsl r1
   22258:	bne	22344 <__assert_fail@plt+0x108b8>
   2225c:	movw	r2, #2570	; 0xa0a
   22260:	tst	r2, r0, lsl r1
   22264:	bne	222ac <__assert_fail@plt+0x10820>
   22268:	cmp	r1, #0
   2226c:	bne	22284 <__assert_fail@plt+0x107f8>
   22270:	ldr	r0, [sp, #4]
   22274:	add	r1, r0, #4
   22278:	str	r1, [sp, #4]
   2227c:	mov	r1, #0
   22280:	b	22350 <__assert_fail@plt+0x108c4>
   22284:	sub	r0, r1, #1024	; 0x400
   22288:	cmp	r0, #10
   2228c:	bhi	22344 <__assert_fail@plt+0x108b8>
   22290:	mov	r2, #1
   22294:	movw	r3, #645	; 0x285
   22298:	tst	r3, r2, lsl r0
   2229c:	bne	22344 <__assert_fail@plt+0x108b8>
   222a0:	movw	r3, #1282	; 0x502
   222a4:	tst	r3, r2, lsl r0
   222a8:	beq	222b8 <__assert_fail@plt+0x1082c>
   222ac:	mov	r0, r5
   222b0:	bl	11984 <fcntl64@plt>
   222b4:	b	2235c <__assert_fail@plt+0x108d0>
   222b8:	cmp	r0, #6
   222bc:	bne	22344 <__assert_fail@plt+0x108b8>
   222c0:	ldr	r0, [sp, #4]
   222c4:	movw	r7, #21416	; 0x53a8
   222c8:	movt	r7, #3
   222cc:	add	r1, r0, #4
   222d0:	str	r1, [sp, #4]
   222d4:	ldr	r6, [r0]
   222d8:	ldr	r0, [r7]
   222dc:	cmp	r0, #0
   222e0:	bmi	22380 <__assert_fail@plt+0x108f4>
   222e4:	mov	r0, r5
   222e8:	movw	r1, #1030	; 0x406
   222ec:	mov	r2, r6
   222f0:	bl	11984 <fcntl64@plt>
   222f4:	mov	r4, r0
   222f8:	cmn	r0, #1
   222fc:	bgt	22374 <__assert_fail@plt+0x108e8>
   22300:	bl	118e8 <__errno_location@plt>
   22304:	ldr	r0, [r0]
   22308:	cmp	r0, #22
   2230c:	bne	22374 <__assert_fail@plt+0x108e8>
   22310:	mov	r0, r5
   22314:	mov	r1, #0
   22318:	mov	r2, r6
   2231c:	bl	11984 <fcntl64@plt>
   22320:	mov	r4, r0
   22324:	cmp	r0, #0
   22328:	bmi	22360 <__assert_fail@plt+0x108d4>
   2232c:	mvn	r0, #0
   22330:	str	r0, [r7]
   22334:	mov	r0, #1
   22338:	cmp	r0, #0
   2233c:	bne	223ac <__assert_fail@plt+0x10920>
   22340:	b	22360 <__assert_fail@plt+0x108d4>
   22344:	ldr	r0, [sp, #4]
   22348:	add	r2, r0, #4
   2234c:	str	r2, [sp, #4]
   22350:	ldr	r2, [r0]
   22354:	mov	r0, r5
   22358:	bl	11984 <fcntl64@plt>
   2235c:	mov	r4, r0
   22360:	mov	r0, r4
   22364:	sub	sp, fp, #16
   22368:	pop	{r4, r5, r6, r7, fp, lr}
   2236c:	add	sp, sp, #8
   22370:	bx	lr
   22374:	mov	r0, #1
   22378:	str	r0, [r7]
   2237c:	b	22360 <__assert_fail@plt+0x108d4>
   22380:	mov	r0, r5
   22384:	mov	r1, #0
   22388:	mov	r2, r6
   2238c:	bl	11984 <fcntl64@plt>
   22390:	mov	r4, r0
   22394:	ldr	r0, [r7]
   22398:	add	r0, r0, #1
   2239c:	clz	r0, r0
   223a0:	lsr	r0, r0, #5
   223a4:	cmp	r0, #0
   223a8:	beq	22360 <__assert_fail@plt+0x108d4>
   223ac:	cmp	r4, #0
   223b0:	bmi	22360 <__assert_fail@plt+0x108d4>
   223b4:	mov	r0, r4
   223b8:	mov	r1, #1
   223bc:	bl	11984 <fcntl64@plt>
   223c0:	cmp	r0, #0
   223c4:	bmi	223e0 <__assert_fail@plt+0x10954>
   223c8:	orr	r2, r0, #1
   223cc:	mov	r0, r4
   223d0:	mov	r1, #2
   223d4:	bl	11984 <fcntl64@plt>
   223d8:	cmn	r0, #1
   223dc:	bne	22360 <__assert_fail@plt+0x108d4>
   223e0:	bl	118e8 <__errno_location@plt>
   223e4:	ldr	r6, [r0]
   223e8:	mov	r5, r0
   223ec:	mov	r0, r4
   223f0:	bl	11a68 <close@plt>
   223f4:	str	r6, [r5]
   223f8:	mvn	r4, #0
   223fc:	b	22360 <__assert_fail@plt+0x108d4>
   22400:	cmp	r3, #0
   22404:	cmpeq	r2, #0
   22408:	bne	2242c <__assert_fail@plt+0x109a0>
   2240c:	cmp	r1, #0
   22410:	movlt	r1, #-2147483648	; 0x80000000
   22414:	movlt	r0, #0
   22418:	blt	22428 <__assert_fail@plt+0x1099c>
   2241c:	cmpeq	r0, #0
   22420:	mvnne	r1, #-2147483648	; 0x80000000
   22424:	mvnne	r0, #0
   22428:	b	224d4 <__assert_fail@plt+0x10a48>
   2242c:	sub	sp, sp, #8
   22430:	push	{sp, lr}
   22434:	cmp	r1, #0
   22438:	blt	22458 <__assert_fail@plt+0x109cc>
   2243c:	cmp	r3, #0
   22440:	blt	2248c <__assert_fail@plt+0x10a00>
   22444:	bl	224e4 <__assert_fail@plt+0x10a58>
   22448:	ldr	lr, [sp, #4]
   2244c:	add	sp, sp, #8
   22450:	pop	{r2, r3}
   22454:	bx	lr
   22458:	rsbs	r0, r0, #0
   2245c:	sbc	r1, r1, r1, lsl #1
   22460:	cmp	r3, #0
   22464:	blt	224b0 <__assert_fail@plt+0x10a24>
   22468:	bl	224e4 <__assert_fail@plt+0x10a58>
   2246c:	ldr	lr, [sp, #4]
   22470:	add	sp, sp, #8
   22474:	pop	{r2, r3}
   22478:	rsbs	r0, r0, #0
   2247c:	sbc	r1, r1, r1, lsl #1
   22480:	rsbs	r2, r2, #0
   22484:	sbc	r3, r3, r3, lsl #1
   22488:	bx	lr
   2248c:	rsbs	r2, r2, #0
   22490:	sbc	r3, r3, r3, lsl #1
   22494:	bl	224e4 <__assert_fail@plt+0x10a58>
   22498:	ldr	lr, [sp, #4]
   2249c:	add	sp, sp, #8
   224a0:	pop	{r2, r3}
   224a4:	rsbs	r0, r0, #0
   224a8:	sbc	r1, r1, r1, lsl #1
   224ac:	bx	lr
   224b0:	rsbs	r2, r2, #0
   224b4:	sbc	r3, r3, r3, lsl #1
   224b8:	bl	224e4 <__assert_fail@plt+0x10a58>
   224bc:	ldr	lr, [sp, #4]
   224c0:	add	sp, sp, #8
   224c4:	pop	{r2, r3}
   224c8:	rsbs	r2, r2, #0
   224cc:	sbc	r3, r3, r3, lsl #1
   224d0:	bx	lr
   224d4:	push	{r1, lr}
   224d8:	mov	r0, #8
   224dc:	bl	11684 <raise@plt>
   224e0:	pop	{r1, pc}
   224e4:	cmp	r1, r3
   224e8:	cmpeq	r0, r2
   224ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224f0:	mov	r4, r0
   224f4:	movcc	r0, #0
   224f8:	mov	r5, r1
   224fc:	ldr	lr, [sp, #36]	; 0x24
   22500:	movcc	r1, r0
   22504:	bcc	22600 <__assert_fail@plt+0x10b74>
   22508:	cmp	r3, #0
   2250c:	clzeq	ip, r2
   22510:	clzne	ip, r3
   22514:	addeq	ip, ip, #32
   22518:	cmp	r5, #0
   2251c:	clzeq	r1, r4
   22520:	addeq	r1, r1, #32
   22524:	clzne	r1, r5
   22528:	sub	ip, ip, r1
   2252c:	sub	sl, ip, #32
   22530:	lsl	r9, r3, ip
   22534:	rsb	fp, ip, #32
   22538:	orr	r9, r9, r2, lsl sl
   2253c:	orr	r9, r9, r2, lsr fp
   22540:	lsl	r8, r2, ip
   22544:	cmp	r5, r9
   22548:	cmpeq	r4, r8
   2254c:	movcc	r0, #0
   22550:	movcc	r1, r0
   22554:	bcc	22570 <__assert_fail@plt+0x10ae4>
   22558:	mov	r0, #1
   2255c:	subs	r4, r4, r8
   22560:	lsl	r1, r0, sl
   22564:	orr	r1, r1, r0, lsr fp
   22568:	lsl	r0, r0, ip
   2256c:	sbc	r5, r5, r9
   22570:	cmp	ip, #0
   22574:	beq	22600 <__assert_fail@plt+0x10b74>
   22578:	lsr	r6, r8, #1
   2257c:	orr	r6, r6, r9, lsl #31
   22580:	lsr	r7, r9, #1
   22584:	mov	r2, ip
   22588:	b	225ac <__assert_fail@plt+0x10b20>
   2258c:	subs	r3, r4, r6
   22590:	sbc	r8, r5, r7
   22594:	adds	r3, r3, r3
   22598:	adc	r8, r8, r8
   2259c:	adds	r4, r3, #1
   225a0:	adc	r5, r8, #0
   225a4:	subs	r2, r2, #1
   225a8:	beq	225c8 <__assert_fail@plt+0x10b3c>
   225ac:	cmp	r5, r7
   225b0:	cmpeq	r4, r6
   225b4:	bcs	2258c <__assert_fail@plt+0x10b00>
   225b8:	adds	r4, r4, r4
   225bc:	adc	r5, r5, r5
   225c0:	subs	r2, r2, #1
   225c4:	bne	225ac <__assert_fail@plt+0x10b20>
   225c8:	lsr	r3, r4, ip
   225cc:	orr	r3, r3, r5, lsl fp
   225d0:	lsr	r2, r5, ip
   225d4:	orr	r3, r3, r5, lsr sl
   225d8:	adds	r0, r0, r4
   225dc:	mov	r4, r3
   225e0:	lsl	r3, r2, ip
   225e4:	orr	r3, r3, r4, lsl sl
   225e8:	lsl	ip, r4, ip
   225ec:	orr	r3, r3, r4, lsr fp
   225f0:	adc	r1, r1, r5
   225f4:	subs	r0, r0, ip
   225f8:	mov	r5, r2
   225fc:	sbc	r1, r1, r3
   22600:	cmp	lr, #0
   22604:	strdne	r4, [lr]
   22608:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2260c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   22610:	mov	r7, r0
   22614:	ldr	r6, [pc, #72]	; 22664 <__assert_fail@plt+0x10bd8>
   22618:	ldr	r5, [pc, #72]	; 22668 <__assert_fail@plt+0x10bdc>
   2261c:	add	r6, pc, r6
   22620:	add	r5, pc, r5
   22624:	sub	r6, r6, r5
   22628:	mov	r8, r1
   2262c:	mov	r9, r2
   22630:	bl	1164c <calloc@plt-0x20>
   22634:	asrs	r6, r6, #2
   22638:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2263c:	mov	r4, #0
   22640:	add	r4, r4, #1
   22644:	ldr	r3, [r5], #4
   22648:	mov	r2, r9
   2264c:	mov	r1, r8
   22650:	mov	r0, r7
   22654:	blx	r3
   22658:	cmp	r6, r4
   2265c:	bne	22640 <__assert_fail@plt+0x10bb4>
   22660:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22664:	andeq	r2, r1, r0, ror #17
   22668:	ldrdeq	r2, [r1], -r8
   2266c:	bx	lr
   22670:	ldr	r3, [pc, #12]	; 22684 <__assert_fail@plt+0x10bf8>
   22674:	mov	r1, #0
   22678:	add	r3, pc, r3
   2267c:	ldr	r2, [r3]
   22680:	b	11900 <__cxa_atexit@plt>
   22684:	strdeq	r2, [r1], -ip

Disassembly of section .fini:

00022688 <.fini>:
   22688:	push	{r3, lr}
   2268c:	pop	{r3, pc}
