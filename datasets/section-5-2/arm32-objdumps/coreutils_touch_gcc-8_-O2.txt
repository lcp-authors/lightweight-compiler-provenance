
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011044 <.init>:
   11044:	push	{r3, lr}
   11048:	bl	11d04 <__assert_fail@plt+0x934>
   1104c:	pop	{r3, pc}

Disassembly of section .plt:

00011050 <calloc@plt-0x14>:
   11050:	push	{lr}		; (str lr, [sp, #-4]!)
   11054:	ldr	lr, [pc, #4]	; 11060 <calloc@plt-0x4>
   11058:	add	lr, pc, lr
   1105c:	ldr	pc, [lr, #8]!
   11060:	andeq	pc, r1, r0, lsr #31

00011064 <calloc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #126976	; 0x1f000
   1106c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011070 <fputs_unlocked@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #126976	; 0x1f000
   11078:	ldr	pc, [ip, #3992]!	; 0xf98

0001107c <raise@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #126976	; 0x1f000
   11084:	ldr	pc, [ip, #3984]!	; 0xf90

00011088 <gmtime_r@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #126976	; 0x1f000
   11090:	ldr	pc, [ip, #3976]!	; 0xf88

00011094 <utimensat@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #126976	; 0x1f000
   1109c:	ldr	pc, [ip, #3968]!	; 0xf80

000110a0 <strcmp@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #126976	; 0x1f000
   110a8:	ldr	pc, [ip, #3960]!	; 0xf78

000110ac <strtol@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #126976	; 0x1f000
   110b4:	ldr	pc, [ip, #3952]!	; 0xf70

000110b8 <mktime@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #126976	; 0x1f000
   110c0:	ldr	pc, [ip, #3944]!	; 0xf68

000110c4 <fflush@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #126976	; 0x1f000
   110cc:	ldr	pc, [ip, #3936]!	; 0xf60

000110d0 <free@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #126976	; 0x1f000
   110d8:	ldr	pc, [ip, #3928]!	; 0xf58

000110dc <clock_gettime@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #126976	; 0x1f000
   110e4:	ldr	pc, [ip, #3920]!	; 0xf50

000110e8 <_exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #126976	; 0x1f000
   110f0:	ldr	pc, [ip, #3912]!	; 0xf48

000110f4 <memcpy@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #126976	; 0x1f000
   110fc:	ldr	pc, [ip, #3904]!	; 0xf40

00011100 <mbsinit@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #126976	; 0x1f000
   11108:	ldr	pc, [ip, #3896]!	; 0xf38

0001110c <time@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #126976	; 0x1f000
   11114:	ldr	pc, [ip, #3888]!	; 0xf30

00011118 <memcmp@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #126976	; 0x1f000
   11120:	ldr	pc, [ip, #3880]!	; 0xf28

00011124 <fputc_unlocked@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #126976	; 0x1f000
   1112c:	ldr	pc, [ip, #3872]!	; 0xf20

00011130 <dcgettext@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #126976	; 0x1f000
   11138:	ldr	pc, [ip, #3864]!	; 0xf18

0001113c <dup2@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #126976	; 0x1f000
   11144:	ldr	pc, [ip, #3856]!	; 0xf10

00011148 <realloc@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #126976	; 0x1f000
   11150:	ldr	pc, [ip, #3848]!	; 0xf08

00011154 <localtime_r@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #126976	; 0x1f000
   1115c:	ldr	pc, [ip, #3840]!	; 0xf00

00011160 <textdomain@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #126976	; 0x1f000
   11168:	ldr	pc, [ip, #3832]!	; 0xef8

0001116c <iswprint@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #126976	; 0x1f000
   11174:	ldr	pc, [ip, #3824]!	; 0xef0

00011178 <tzset@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #126976	; 0x1f000
   11180:	ldr	pc, [ip, #3816]!	; 0xee8

00011184 <fwrite@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #126976	; 0x1f000
   1118c:	ldr	pc, [ip, #3808]!	; 0xee0

00011190 <lseek64@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #126976	; 0x1f000
   11198:	ldr	pc, [ip, #3800]!	; 0xed8

0001119c <__ctype_get_mb_cur_max@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #126976	; 0x1f000
   111a4:	ldr	pc, [ip, #3792]!	; 0xed0

000111a8 <__fpending@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #126976	; 0x1f000
   111b0:	ldr	pc, [ip, #3784]!	; 0xec8

000111b4 <mbrtowc@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #126976	; 0x1f000
   111bc:	ldr	pc, [ip, #3776]!	; 0xec0

000111c0 <error@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #126976	; 0x1f000
   111c8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111cc <open64@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #126976	; 0x1f000
   111d4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111d8 <getenv@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #126976	; 0x1f000
   111e0:	ldr	pc, [ip, #3752]!	; 0xea8

000111e4 <malloc@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #126976	; 0x1f000
   111ec:	ldr	pc, [ip, #3744]!	; 0xea0

000111f0 <__libc_start_main@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #126976	; 0x1f000
   111f8:	ldr	pc, [ip, #3736]!	; 0xe98

000111fc <strftime@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #126976	; 0x1f000
   11204:	ldr	pc, [ip, #3728]!	; 0xe90

00011208 <__vfprintf_chk@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #126976	; 0x1f000
   11210:	ldr	pc, [ip, #3720]!	; 0xe88

00011214 <__freading@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #126976	; 0x1f000
   1121c:	ldr	pc, [ip, #3712]!	; 0xe80

00011220 <localtime@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #126976	; 0x1f000
   11228:	ldr	pc, [ip, #3704]!	; 0xe78

0001122c <__ctype_tolower_loc@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #126976	; 0x1f000
   11234:	ldr	pc, [ip, #3696]!	; 0xe70

00011238 <__ctype_toupper_loc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #126976	; 0x1f000
   11240:	ldr	pc, [ip, #3688]!	; 0xe68

00011244 <__gmon_start__@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #126976	; 0x1f000
   1124c:	ldr	pc, [ip, #3680]!	; 0xe60

00011250 <getopt_long@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #126976	; 0x1f000
   11258:	ldr	pc, [ip, #3672]!	; 0xe58

0001125c <__ctype_b_loc@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #126976	; 0x1f000
   11264:	ldr	pc, [ip, #3664]!	; 0xe50

00011268 <exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #126976	; 0x1f000
   11270:	ldr	pc, [ip, #3656]!	; 0xe48

00011274 <strlen@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #126976	; 0x1f000
   1127c:	ldr	pc, [ip, #3648]!	; 0xe40

00011280 <strchr@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #126976	; 0x1f000
   11288:	ldr	pc, [ip, #3640]!	; 0xe38

0001128c <setenv@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #126976	; 0x1f000
   11294:	ldr	pc, [ip, #3632]!	; 0xe30

00011298 <__errno_location@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #126976	; 0x1f000
   112a0:	ldr	pc, [ip, #3624]!	; 0xe28

000112a4 <__sprintf_chk@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #126976	; 0x1f000
   112ac:	ldr	pc, [ip, #3616]!	; 0xe20

000112b0 <snprintf@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #126976	; 0x1f000
   112b8:	ldr	pc, [ip, #3608]!	; 0xe18

000112bc <__cxa_atexit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #126976	; 0x1f000
   112c4:	ldr	pc, [ip, #3600]!	; 0xe10

000112c8 <memset@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #126976	; 0x1f000
   112d0:	ldr	pc, [ip, #3592]!	; 0xe08

000112d4 <__printf_chk@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #126976	; 0x1f000
   112dc:	ldr	pc, [ip, #3584]!	; 0xe00

000112e0 <fileno@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #126976	; 0x1f000
   112e8:	ldr	pc, [ip, #3576]!	; 0xdf8

000112ec <__fprintf_chk@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #126976	; 0x1f000
   112f4:	ldr	pc, [ip, #3568]!	; 0xdf0

000112f8 <fclose@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #126976	; 0x1f000
   11300:	ldr	pc, [ip, #3560]!	; 0xde8

00011304 <fseeko64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #126976	; 0x1f000
   1130c:	ldr	pc, [ip, #3552]!	; 0xde0

00011310 <__overflow@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #126976	; 0x1f000
   11318:	ldr	pc, [ip, #3544]!	; 0xdd8

0001131c <setlocale@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #126976	; 0x1f000
   11324:	ldr	pc, [ip, #3536]!	; 0xdd0

00011328 <strrchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #126976	; 0x1f000
   11330:	ldr	pc, [ip, #3528]!	; 0xdc8

00011334 <nl_langinfo@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #126976	; 0x1f000
   1133c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011340 <fputc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #126976	; 0x1f000
   11348:	ldr	pc, [ip, #3512]!	; 0xdb8

0001134c <timegm@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #126976	; 0x1f000
   11354:	ldr	pc, [ip, #3504]!	; 0xdb0

00011358 <futimens@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #126976	; 0x1f000
   11360:	ldr	pc, [ip, #3496]!	; 0xda8

00011364 <bindtextdomain@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #126976	; 0x1f000
   1136c:	ldr	pc, [ip, #3488]!	; 0xda0

00011370 <__xstat64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #126976	; 0x1f000
   11378:	ldr	pc, [ip, #3480]!	; 0xd98

0001137c <unsetenv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #126976	; 0x1f000
   11384:	ldr	pc, [ip, #3472]!	; 0xd90

00011388 <fputs@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #126976	; 0x1f000
   11390:	ldr	pc, [ip, #3464]!	; 0xd88

00011394 <strncmp@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #126976	; 0x1f000
   1139c:	ldr	pc, [ip, #3456]!	; 0xd80

000113a0 <abort@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #126976	; 0x1f000
   113a8:	ldr	pc, [ip, #3448]!	; 0xd78

000113ac <close@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #126976	; 0x1f000
   113b4:	ldr	pc, [ip, #3440]!	; 0xd70

000113b8 <__lxstat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #126976	; 0x1f000
   113c0:	ldr	pc, [ip, #3432]!	; 0xd68

000113c4 <__snprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #126976	; 0x1f000
   113cc:	ldr	pc, [ip, #3424]!	; 0xd60

000113d0 <__assert_fail@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #126976	; 0x1f000
   113d8:	ldr	pc, [ip, #3416]!	; 0xd58

Disassembly of section .text:

000113e0 <.text>:
   113e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113e4:	movw	r4, #4528	; 0x11b0
   113e8:	movt	r4, #3
   113ec:	strd	r6, [sp, #8]
   113f0:	movw	r6, #60728	; 0xed38
   113f4:	movt	r6, #1
   113f8:	strd	r8, [sp, #16]
   113fc:	movw	r9, #58688	; 0xe540
   11400:	movt	r9, #1
   11404:	strd	sl, [sp, #24]
   11408:	mov	fp, r0
   1140c:	mov	sl, r1
   11410:	str	lr, [sp, #32]
   11414:	sub	sp, sp, #164	; 0xa4
   11418:	movw	r8, #4520	; 0x11a8
   1141c:	movt	r8, #3
   11420:	ldr	r0, [r1]
   11424:	add	r7, r9, #100	; 0x64
   11428:	bl	18b00 <__assert_fail@plt+0x7730>
   1142c:	movw	r1, #1768	; 0x6e8
   11430:	movt	r1, #2
   11434:	mov	r0, #6
   11438:	bl	1131c <setlocale@plt>
   1143c:	movw	r1, #60628	; 0xecd4
   11440:	movt	r1, #1
   11444:	movw	r0, #60460	; 0xec2c
   11448:	movt	r0, #1
   1144c:	bl	11364 <bindtextdomain@plt>
   11450:	movw	r0, #60460	; 0xec2c
   11454:	movt	r0, #1
   11458:	bl	11160 <textdomain@plt>
   1145c:	movw	r0, #9800	; 0x2648
   11460:	movt	r0, #1
   11464:	bl	1e51c <__assert_fail@plt+0xd14c>
   11468:	mov	r3, #0
   1146c:	str	r3, [r4, #16]
   11470:	strb	r3, [r4, #20]
   11474:	strb	r3, [r4, #21]
   11478:	str	r3, [sp, #24]
   1147c:	str	r3, [sp, #28]
   11480:	mov	r5, #0
   11484:	mov	r3, r7
   11488:	mov	r2, r6
   1148c:	mov	r1, sl
   11490:	mov	r0, fp
   11494:	str	r5, [sp]
   11498:	bl	11250 <getopt_long@plt>
   1149c:	cmn	r0, #1
   114a0:	beq	11660 <__assert_fail@plt+0x290>
   114a4:	cmp	r0, #102	; 0x66
   114a8:	beq	11480 <__assert_fail@plt+0xb0>
   114ac:	ble	114d0 <__assert_fail@plt+0x100>
   114b0:	cmp	r0, #114	; 0x72
   114b4:	beq	1164c <__assert_fail@plt+0x27c>
   114b8:	bgt	11598 <__assert_fail@plt+0x1c8>
   114bc:	cmp	r0, #104	; 0x68
   114c0:	bne	114f0 <__assert_fail@plt+0x120>
   114c4:	mov	r3, #1
   114c8:	strb	r3, [r4, #22]
   114cc:	b	11480 <__assert_fail@plt+0xb0>
   114d0:	cmp	r0, #97	; 0x61
   114d4:	beq	1163c <__assert_fail@plt+0x26c>
   114d8:	ble	1151c <__assert_fail@plt+0x14c>
   114dc:	cmp	r0, #99	; 0x63
   114e0:	bne	11508 <__assert_fail@plt+0x138>
   114e4:	mov	r3, #1
   114e8:	strb	r3, [r4, #21]
   114ec:	b	11480 <__assert_fail@plt+0xb0>
   114f0:	cmp	r0, #109	; 0x6d
   114f4:	bne	11b9c <__assert_fail@plt+0x7cc>
   114f8:	ldr	r3, [r4, #16]
   114fc:	orr	r3, r3, #2
   11500:	str	r3, [r4, #16]
   11504:	b	11480 <__assert_fail@plt+0xb0>
   11508:	cmp	r0, #100	; 0x64
   1150c:	bne	11b9c <__assert_fail@plt+0x7cc>
   11510:	ldr	r3, [r8]
   11514:	str	r3, [sp, #24]
   11518:	b	11480 <__assert_fail@plt+0xb0>
   1151c:	cmn	r0, #3
   11520:	bne	115d4 <__assert_fail@plt+0x204>
   11524:	movw	r1, #60660	; 0xecf4
   11528:	movt	r1, #1
   1152c:	movw	r2, #60672	; 0xed00
   11530:	movt	r2, #1
   11534:	movw	r3, #60688	; 0xed10
   11538:	movt	r3, #1
   1153c:	movw	r0, #4516	; 0x11a4
   11540:	movt	r0, #3
   11544:	str	r2, [sp, #12]
   11548:	movw	r2, #60716	; 0xed2c
   1154c:	movt	r2, #1
   11550:	str	r1, [sp, #16]
   11554:	movw	r1, #60700	; 0xed1c
   11558:	movt	r1, #1
   1155c:	str	r2, [sp]
   11560:	movw	r2, #60456	; 0xec28
   11564:	movt	r2, #1
   11568:	str	r3, [sp, #8]
   1156c:	movw	r3, #4416	; 0x1140
   11570:	movt	r3, #3
   11574:	str	r1, [sp, #4]
   11578:	movw	r1, #58948	; 0xe644
   1157c:	movt	r1, #1
   11580:	str	r5, [sp, #20]
   11584:	ldr	r0, [r0]
   11588:	ldr	r3, [r3]
   1158c:	bl	1b7bc <__assert_fail@plt+0xa3ec>
   11590:	mov	r0, r5
   11594:	bl	11268 <exit@plt>
   11598:	cmp	r0, #116	; 0x74
   1159c:	bne	115e4 <__assert_fail@plt+0x214>
   115a0:	movw	r0, #4528	; 0x11b0
   115a4:	movt	r0, #3
   115a8:	ldr	r1, [r8]
   115ac:	mov	r2, #6
   115b0:	bl	187ec <__assert_fail@plt+0x741c>
   115b4:	subs	r3, r0, #0
   115b8:	str	r3, [sp, #28]
   115bc:	beq	11c0c <__assert_fail@plt+0x83c>
   115c0:	ldr	r1, [pc, #1780]	; 11cbc <__assert_fail@plt+0x8ec>
   115c4:	str	r5, [r4, #4]
   115c8:	ldrd	r2, [r4]
   115cc:	strd	r2, [r1]
   115d0:	b	11480 <__assert_fail@plt+0xb0>
   115d4:	cmn	r0, #2
   115d8:	bne	11b9c <__assert_fail@plt+0x7cc>
   115dc:	mov	r0, r5
   115e0:	bl	11e14 <__assert_fail@plt+0xa44>
   115e4:	cmp	r0, #256	; 0x100
   115e8:	bne	11b9c <__assert_fail@plt+0x7cc>
   115ec:	movw	r2, #4420	; 0x1144
   115f0:	movt	r2, #3
   115f4:	ldr	r3, [pc, #1732]	; 11cc0 <__assert_fail@plt+0x8f0>
   115f8:	mov	r1, #1
   115fc:	mov	lr, #4
   11600:	ldr	ip, [r2]
   11604:	movw	r0, #60652	; 0xecec
   11608:	movt	r0, #1
   1160c:	str	lr, [sp]
   11610:	str	r1, [sp, #8]
   11614:	add	r2, r3, #20
   11618:	ldr	r1, [r8]
   1161c:	str	ip, [sp, #4]
   11620:	bl	1251c <__assert_fail@plt+0x114c>
   11624:	add	r0, r9, r0, lsl #2
   11628:	ldr	r3, [r4, #16]
   1162c:	ldr	r2, [r0, #56]	; 0x38
   11630:	orr	r3, r3, r2
   11634:	str	r3, [r4, #16]
   11638:	b	11480 <__assert_fail@plt+0xb0>
   1163c:	ldr	r3, [r4, #16]
   11640:	orr	r3, r3, #1
   11644:	str	r3, [r4, #16]
   11648:	b	11480 <__assert_fail@plt+0xb0>
   1164c:	ldr	r3, [r8]
   11650:	mov	r2, #1
   11654:	strb	r2, [r4, #20]
   11658:	str	r3, [r4, #24]
   1165c:	b	11480 <__assert_fail@plt+0xb0>
   11660:	ldr	r3, [r4, #16]
   11664:	cmp	r3, r5
   11668:	moveq	r3, #3
   1166c:	streq	r3, [r4, #16]
   11670:	ldr	r3, [sp, #28]
   11674:	cmp	r3, #0
   11678:	ldrb	r3, [r4, #20]
   1167c:	beq	11984 <__assert_fail@plt+0x5b4>
   11680:	ldr	r2, [sp, #24]
   11684:	cmp	r2, #0
   11688:	orrne	r3, r3, #1
   1168c:	cmp	r3, #0
   11690:	bne	11c00 <__assert_fail@plt+0x830>
   11694:	movw	r8, #4504	; 0x1198
   11698:	movt	r8, #3
   1169c:	ldr	r3, [r8]
   116a0:	cmp	r3, fp
   116a4:	beq	11b78 <__assert_fail@plt+0x7a8>
   116a8:	movge	r3, #1
   116ac:	bge	11918 <__assert_fail@plt+0x548>
   116b0:	movw	r2, #60936	; 0xee08
   116b4:	movt	r2, #1
   116b8:	mov	r9, #1
   116bc:	str	r2, [sp, #24]
   116c0:	movw	r2, #4528	; 0x11b0
   116c4:	movt	r2, #3
   116c8:	str	fp, [sp, #32]
   116cc:	str	r2, [sp, #28]
   116d0:	movw	r2, #60980	; 0xee34
   116d4:	movt	r2, #1
   116d8:	str	r2, [sp, #36]	; 0x24
   116dc:	b	11708 <__assert_fail@plt+0x338>
   116e0:	cmp	r5, #0
   116e4:	beq	11904 <__assert_fail@plt+0x534>
   116e8:	mov	r2, #1
   116ec:	ldr	r3, [r8]
   116f0:	and	r9, r9, r2
   116f4:	ldr	r2, [sp, #32]
   116f8:	add	r3, r3, #1
   116fc:	cmp	r3, r2
   11700:	str	r3, [r8]
   11704:	bge	11914 <__assert_fail@plt+0x544>
   11708:	ldr	r7, [sl, r3, lsl #2]
   1170c:	ldr	r1, [sp, #24]
   11710:	mov	r0, r7
   11714:	bl	110a0 <strcmp@plt>
   11718:	subs	r6, r0, #0
   1171c:	moveq	r5, #1
   11720:	beq	11748 <__assert_fail@plt+0x378>
   11724:	ldrb	r6, [r4, #21]
   11728:	cmp	r6, #0
   1172c:	mvnne	r5, #0
   11730:	movne	r6, #0
   11734:	bne	11748 <__assert_fail@plt+0x378>
   11738:	ldrb	fp, [r4, #22]
   1173c:	cmp	fp, #0
   11740:	mvnne	r5, #0
   11744:	beq	11938 <__assert_fail@plt+0x568>
   11748:	ldr	r3, [r4, #16]
   1174c:	cmp	r3, #3
   11750:	beq	11774 <__assert_fail@plt+0x3a4>
   11754:	cmp	r3, #2
   11758:	mvneq	r3, #-1073741823	; 0xc0000001
   1175c:	streq	r3, [r4, #4]
   11760:	beq	11774 <__assert_fail@plt+0x3a4>
   11764:	cmp	r3, #1
   11768:	bne	11be4 <__assert_fail@plt+0x814>
   1176c:	mvn	r3, #-1073741823	; 0xc0000001
   11770:	str	r3, [r4, #12]
   11774:	ldrb	r3, [r4, #28]
   11778:	mvn	r1, #99	; 0x63
   1177c:	mov	r0, r5
   11780:	ldrb	ip, [r4, #22]
   11784:	cmp	r3, #0
   11788:	ldr	r3, [sp, #28]
   1178c:	movne	r3, #0
   11790:	cmp	r5, #1
   11794:	movne	r2, r7
   11798:	moveq	r2, #0
   1179c:	cmp	ip, #0
   117a0:	movne	ip, #256	; 0x100
   117a4:	moveq	ip, #0
   117a8:	str	ip, [sp]
   117ac:	bl	127b8 <__assert_fail@plt+0x13e8>
   117b0:	cmp	r0, #0
   117b4:	beq	116e0 <__assert_fail@plt+0x310>
   117b8:	bl	11298 <__errno_location@plt>
   117bc:	cmp	r5, #0
   117c0:	ldr	fp, [r0]
   117c4:	beq	118b0 <__assert_fail@plt+0x4e0>
   117c8:	cmp	fp, #9
   117cc:	cmpeq	r5, #1
   117d0:	beq	11964 <__assert_fail@plt+0x594>
   117d4:	cmp	fp, #0
   117d8:	beq	116e8 <__assert_fail@plt+0x318>
   117dc:	cmp	r6, #0
   117e0:	cmpne	r6, #21
   117e4:	beq	11858 <__assert_fail@plt+0x488>
   117e8:	cmp	r6, #22
   117ec:	bne	11818 <__assert_fail@plt+0x448>
   117f0:	add	r2, sp, #56	; 0x38
   117f4:	mov	r1, r7
   117f8:	mov	r0, #3
   117fc:	bl	11370 <__xstat64@plt>
   11800:	cmp	r0, #0
   11804:	bne	11818 <__assert_fail@plt+0x448>
   11808:	ldr	r3, [sp, #72]	; 0x48
   1180c:	and	r3, r3, #61440	; 0xf000
   11810:	cmp	r3, #16384	; 0x4000
   11814:	beq	11858 <__assert_fail@plt+0x488>
   11818:	mov	r2, #5
   1181c:	movw	r1, #61000	; 0xee48
   11820:	movt	r1, #1
   11824:	mov	r0, #0
   11828:	bl	11130 <dcgettext@plt>
   1182c:	mov	r5, r0
   11830:	mov	r1, r7
   11834:	mov	r0, #4
   11838:	bl	1ab3c <__assert_fail@plt+0x976c>
   1183c:	mov	r3, r0
   11840:	mov	r2, r5
   11844:	mov	r1, r6
   11848:	mov	r0, #0
   1184c:	bl	111c0 <error@plt>
   11850:	mov	r2, #0
   11854:	b	116ec <__assert_fail@plt+0x31c>
   11858:	ldrb	r2, [r4, #21]
   1185c:	cmp	fp, #2
   11860:	movne	r2, #0
   11864:	andeq	r2, r2, #1
   11868:	cmp	r2, #0
   1186c:	bne	116ec <__assert_fail@plt+0x31c>
   11870:	mov	r2, #5
   11874:	movw	r1, #61016	; 0xee58
   11878:	movt	r1, #1
   1187c:	mov	r0, #0
   11880:	bl	11130 <dcgettext@plt>
   11884:	mov	r5, r0
   11888:	mov	r1, r7
   1188c:	mov	r0, #4
   11890:	bl	1ab3c <__assert_fail@plt+0x976c>
   11894:	mov	r3, r0
   11898:	mov	r2, r5
   1189c:	mov	r1, fp
   118a0:	mov	r0, #0
   118a4:	bl	111c0 <error@plt>
   118a8:	mov	r2, #0
   118ac:	b	116ec <__assert_fail@plt+0x31c>
   118b0:	mov	r0, r5
   118b4:	bl	113ac <close@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	117d4 <__assert_fail@plt+0x404>
   118c0:	bl	11298 <__errno_location@plt>
   118c4:	ldr	r5, [r0]
   118c8:	mov	r2, #5
   118cc:	mov	r0, #0
   118d0:	ldr	r1, [sp, #36]	; 0x24
   118d4:	bl	11130 <dcgettext@plt>
   118d8:	mov	r6, r0
   118dc:	mov	r1, r7
   118e0:	mov	r0, #4
   118e4:	bl	1ab3c <__assert_fail@plt+0x976c>
   118e8:	mov	r3, r0
   118ec:	mov	r2, r6
   118f0:	mov	r1, r5
   118f4:	mov	r0, #0
   118f8:	bl	111c0 <error@plt>
   118fc:	mov	r2, #0
   11900:	b	116ec <__assert_fail@plt+0x31c>
   11904:	bl	113ac <close@plt>
   11908:	cmp	r0, #0
   1190c:	beq	116e8 <__assert_fail@plt+0x318>
   11910:	b	118c0 <__assert_fail@plt+0x4f0>
   11914:	mov	r3, r9
   11918:	eor	r0, r3, #1
   1191c:	add	sp, sp, #164	; 0xa4
   11920:	ldrd	r4, [sp]
   11924:	ldrd	r6, [sp, #8]
   11928:	ldrd	r8, [sp, #16]
   1192c:	ldrd	sl, [sp, #24]
   11930:	add	sp, sp, #32
   11934:	pop	{pc}		; (ldr pc, [sp], #4)
   11938:	movw	r3, #438	; 0x1b6
   1193c:	movw	r2, #2369	; 0x941
   11940:	mov	r1, r7
   11944:	mov	r0, fp
   11948:	bl	12734 <__assert_fail@plt+0x1364>
   1194c:	subs	r5, r0, #0
   11950:	movge	r6, fp
   11954:	bge	11748 <__assert_fail@plt+0x378>
   11958:	bl	11298 <__errno_location@plt>
   1195c:	ldr	r6, [r0]
   11960:	b	11748 <__assert_fail@plt+0x378>
   11964:	ldrb	r3, [r4, #21]
   11968:	cmp	r3, #0
   1196c:	bne	116e8 <__assert_fail@plt+0x318>
   11970:	cmp	r6, #21
   11974:	cmpne	r6, #0
   11978:	mov	fp, #9
   1197c:	beq	11870 <__assert_fail@plt+0x4a0>
   11980:	b	117e8 <__assert_fail@plt+0x418>
   11984:	cmp	r3, #0
   11988:	bne	11a60 <__assert_fail@plt+0x690>
   1198c:	ldr	r5, [sp, #24]
   11990:	cmp	r5, #0
   11994:	beq	11a24 <__assert_fail@plt+0x654>
   11998:	add	r0, sp, #40	; 0x28
   1199c:	bl	12868 <__assert_fail@plt+0x1498>
   119a0:	add	r2, sp, #40	; 0x28
   119a4:	mov	r1, r5
   119a8:	movw	r0, #4528	; 0x11b0
   119ac:	movt	r0, #3
   119b0:	bl	11db8 <__assert_fail@plt+0x9e8>
   119b4:	ldrd	r2, [r4]
   119b8:	ldr	r1, [r4, #16]
   119bc:	strd	r2, [r4, #8]
   119c0:	cmp	r1, #3
   119c4:	bne	11694 <__assert_fail@plt+0x2c4>
   119c8:	ldr	r3, [r4]
   119cc:	ldr	r2, [sp, #40]	; 0x28
   119d0:	cmp	r3, r2
   119d4:	bne	11694 <__assert_fail@plt+0x2c4>
   119d8:	ldr	r2, [r4, #4]
   119dc:	ldr	r1, [sp, #44]	; 0x2c
   119e0:	cmp	r2, r1
   119e4:	bne	11694 <__assert_fail@plt+0x2c4>
   119e8:	eor	r3, r3, #1
   119ec:	add	r0, sp, #56	; 0x38
   119f0:	ldr	r1, [sp, #24]
   119f4:	str	r3, [sp, #48]	; 0x30
   119f8:	str	r2, [sp, #52]	; 0x34
   119fc:	add	r2, sp, #48	; 0x30
   11a00:	bl	11db8 <__assert_fail@plt+0x9e8>
   11a04:	ldr	r3, [sp, #48]	; 0x30
   11a08:	ldr	r2, [sp, #56]	; 0x38
   11a0c:	cmp	r2, r3
   11a10:	bne	11694 <__assert_fail@plt+0x2c4>
   11a14:	ldr	r3, [sp, #52]	; 0x34
   11a18:	ldr	r2, [sp, #60]	; 0x3c
   11a1c:	cmp	r2, r3
   11a20:	bne	11694 <__assert_fail@plt+0x2c4>
   11a24:	movw	r8, #4504	; 0x1198
   11a28:	movt	r8, #3
   11a2c:	ldr	r3, [r8]
   11a30:	sub	r3, fp, r3
   11a34:	cmp	r3, #1
   11a38:	bgt	11b10 <__assert_fail@plt+0x740>
   11a3c:	ldr	r3, [r4, #16]
   11a40:	cmp	r3, #3
   11a44:	mvnne	r3, #-1073741824	; 0xc0000000
   11a48:	strne	r3, [r4, #4]
   11a4c:	strne	r3, [r4, #12]
   11a50:	bne	1169c <__assert_fail@plt+0x2cc>
   11a54:	mov	r3, #1
   11a58:	strb	r3, [r4, #28]
   11a5c:	b	1169c <__assert_fail@plt+0x2cc>
   11a60:	ldrb	r3, [r4, #22]
   11a64:	add	r2, sp, #56	; 0x38
   11a68:	mov	r0, #3
   11a6c:	ldr	r1, [r4, #24]
   11a70:	cmp	r3, #0
   11a74:	bne	11ae8 <__assert_fail@plt+0x718>
   11a78:	bl	11370 <__xstat64@plt>
   11a7c:	adds	r0, r0, #0
   11a80:	movne	r0, #1
   11a84:	cmp	r0, #0
   11a88:	bne	11ba4 <__assert_fail@plt+0x7d4>
   11a8c:	ldr	r2, [sp, #24]
   11a90:	ldr	r1, [sp, #128]	; 0x80
   11a94:	ldr	r3, [sp, #132]	; 0x84
   11a98:	cmp	r2, #0
   11a9c:	ldr	r2, [sp, #136]	; 0x88
   11aa0:	stm	r4, {r1, r3}
   11aa4:	ldr	r3, [sp, #140]	; 0x8c
   11aa8:	str	r2, [r4, #8]
   11aac:	str	r3, [r4, #12]
   11ab0:	beq	11694 <__assert_fail@plt+0x2c4>
   11ab4:	ldr	r3, [r4, #16]
   11ab8:	tst	r3, #1
   11abc:	bne	11af8 <__assert_fail@plt+0x728>
   11ac0:	ldr	r3, [r4, #16]
   11ac4:	tst	r3, #2
   11ac8:	beq	11694 <__assert_fail@plt+0x2c4>
   11acc:	ldr	r2, [pc, #488]	; 11cbc <__assert_fail@plt+0x8ec>
   11ad0:	movw	r8, #4504	; 0x1198
   11ad4:	movt	r8, #3
   11ad8:	ldr	r1, [sp, #24]
   11adc:	mov	r0, r2
   11ae0:	bl	11db8 <__assert_fail@plt+0x9e8>
   11ae4:	b	1169c <__assert_fail@plt+0x2cc>
   11ae8:	bl	113b8 <__lxstat64@plt>
   11aec:	adds	r0, r0, #0
   11af0:	movne	r0, #1
   11af4:	b	11a84 <__assert_fail@plt+0x6b4>
   11af8:	movw	r2, #4528	; 0x11b0
   11afc:	movt	r2, #3
   11b00:	ldr	r1, [sp, #24]
   11b04:	mov	r0, r2
   11b08:	bl	11db8 <__assert_fail@plt+0x9e8>
   11b0c:	b	11ac0 <__assert_fail@plt+0x6f0>
   11b10:	bl	18a9c <__assert_fail@plt+0x76cc>
   11b14:	movw	r3, #3503	; 0xdaf
   11b18:	movt	r3, #3
   11b1c:	cmp	r0, r3
   11b20:	bgt	11a3c <__assert_fail@plt+0x66c>
   11b24:	ldr	r3, [r8]
   11b28:	movw	r0, #4528	; 0x11b0
   11b2c:	movt	r0, #3
   11b30:	mov	r2, #9
   11b34:	ldr	r1, [sl, r3, lsl #2]
   11b38:	bl	187ec <__assert_fail@plt+0x741c>
   11b3c:	cmp	r0, #0
   11b40:	beq	11a3c <__assert_fail@plt+0x66c>
   11b44:	mov	r3, #0
   11b48:	movw	r0, #60820	; 0xed94
   11b4c:	movt	r0, #1
   11b50:	str	r3, [r4, #4]
   11b54:	ldrd	r2, [r4]
   11b58:	strd	r2, [r4, #8]
   11b5c:	bl	111d8 <getenv@plt>
   11b60:	subs	r6, r0, #0
   11b64:	beq	11c3c <__assert_fail@plt+0x86c>
   11b68:	ldr	r3, [r8]
   11b6c:	add	r3, r3, #1
   11b70:	str	r3, [r8]
   11b74:	b	1169c <__assert_fail@plt+0x2cc>
   11b78:	movw	r1, #60912	; 0xedf0
   11b7c:	movt	r1, #1
   11b80:	mov	r2, #5
   11b84:	mov	r0, #0
   11b88:	bl	11130 <dcgettext@plt>
   11b8c:	mov	r1, #0
   11b90:	mov	r2, r0
   11b94:	mov	r0, r1
   11b98:	bl	111c0 <error@plt>
   11b9c:	mov	r0, #1
   11ba0:	bl	11e14 <__assert_fail@plt+0xa44>
   11ba4:	bl	11298 <__errno_location@plt>
   11ba8:	ldr	r5, [r0]
   11bac:	mov	r2, #5
   11bb0:	movw	r1, #60788	; 0xed74
   11bb4:	movt	r1, #1
   11bb8:	mov	r0, #0
   11bbc:	bl	11130 <dcgettext@plt>
   11bc0:	mov	r6, r0
   11bc4:	mov	r0, #4
   11bc8:	ldr	r1, [r4, #24]
   11bcc:	bl	1ab3c <__assert_fail@plt+0x976c>
   11bd0:	mov	r3, r0
   11bd4:	mov	r2, r6
   11bd8:	mov	r1, r5
   11bdc:	mov	r0, #1
   11be0:	bl	111c0 <error@plt>
   11be4:	movw	r1, #60940	; 0xee0c
   11be8:	movt	r1, #1
   11bec:	ldr	r3, [pc, #208]	; 11cc4 <__assert_fail@plt+0x8f4>
   11bf0:	movw	r0, #60952	; 0xee18
   11bf4:	movt	r0, #1
   11bf8:	mov	r2, #147	; 0x93
   11bfc:	bl	113d0 <__assert_fail@plt>
   11c00:	movw	r1, #60740	; 0xed44
   11c04:	movt	r1, #1
   11c08:	b	11b80 <__assert_fail@plt+0x7b0>
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #58924	; 0xe62c
   11c14:	movt	r1, #1
   11c18:	bl	11130 <dcgettext@plt>
   11c1c:	mov	r4, r0
   11c20:	ldr	r0, [r8]
   11c24:	bl	1adf0 <__assert_fail@plt+0x9a20>
   11c28:	mov	r3, r0
   11c2c:	mov	r2, r4
   11c30:	ldr	r1, [sp, #28]
   11c34:	mov	r0, #1
   11c38:	bl	111c0 <error@plt>
   11c3c:	movw	r0, #4528	; 0x11b0
   11c40:	movt	r0, #3
   11c44:	bl	11220 <localtime@plt>
   11c48:	subs	r5, r0, #0
   11c4c:	beq	11b68 <__assert_fail@plt+0x798>
   11c50:	mov	r2, #5
   11c54:	mov	r0, r6
   11c58:	movw	r1, #60836	; 0xeda4
   11c5c:	movt	r1, #1
   11c60:	bl	11130 <dcgettext@plt>
   11c64:	ldr	ip, [r5]
   11c68:	mov	r2, r0
   11c6c:	mov	r1, r6
   11c70:	mov	r0, r6
   11c74:	ldr	r3, [r8]
   11c78:	str	ip, [sp, #20]
   11c7c:	ldr	ip, [r5, #4]
   11c80:	ldr	r3, [sl, r3, lsl #2]
   11c84:	str	ip, [sp, #16]
   11c88:	ldr	ip, [r5, #8]
   11c8c:	str	ip, [sp, #12]
   11c90:	ldr	ip, [r5, #12]
   11c94:	str	ip, [sp, #8]
   11c98:	ldr	ip, [r5, #16]
   11c9c:	add	ip, ip, #1
   11ca0:	str	ip, [sp, #4]
   11ca4:	ldr	ip, [r5, #20]
   11ca8:	add	ip, ip, #1888	; 0x760
   11cac:	add	ip, ip, #12
   11cb0:	str	ip, [sp]
   11cb4:	bl	111c0 <error@plt>
   11cb8:	b	11b68 <__assert_fail@plt+0x798>
   11cbc:			; <UNDEFINED> instruction: 0x000311b8
   11cc0:	andeq	lr, r1, r8, ror r5
   11cc4:	andeq	lr, r1, r4, lsr #12
   11cc8:	mov	fp, #0
   11ccc:	mov	lr, #0
   11cd0:	pop	{r1}		; (ldr r1, [sp], #4)
   11cd4:	mov	r2, sp
   11cd8:	push	{r2}		; (str r2, [sp, #-4]!)
   11cdc:	push	{r0}		; (str r0, [sp, #-4]!)
   11ce0:	ldr	ip, [pc, #16]	; 11cf8 <__assert_fail@plt+0x928>
   11ce4:	push	{ip}		; (str ip, [sp, #-4]!)
   11ce8:	ldr	r0, [pc, #12]	; 11cfc <__assert_fail@plt+0x92c>
   11cec:	ldr	r3, [pc, #12]	; 11d00 <__assert_fail@plt+0x930>
   11cf0:	bl	111f0 <__libc_start_main@plt>
   11cf4:	bl	113a0 <abort@plt>
   11cf8:	andeq	lr, r1, r8, lsl r5
   11cfc:	andeq	r1, r1, r0, ror #7
   11d00:			; <UNDEFINED> instruction: 0x0001e4b8
   11d04:	ldr	r3, [pc, #20]	; 11d20 <__assert_fail@plt+0x950>
   11d08:	ldr	r2, [pc, #20]	; 11d24 <__assert_fail@plt+0x954>
   11d0c:	add	r3, pc, r3
   11d10:	ldr	r2, [r3, r2]
   11d14:	cmp	r2, #0
   11d18:	bxeq	lr
   11d1c:	b	11244 <__gmon_start__@plt>
   11d20:	andeq	pc, r1, ip, ror #5
   11d24:	andeq	r0, r0, r4, lsr r1
   11d28:	ldr	r0, [pc, #24]	; 11d48 <__assert_fail@plt+0x978>
   11d2c:	ldr	r3, [pc, #24]	; 11d4c <__assert_fail@plt+0x97c>
   11d30:	cmp	r3, r0
   11d34:	bxeq	lr
   11d38:	ldr	r3, [pc, #16]	; 11d50 <__assert_fail@plt+0x980>
   11d3c:	cmp	r3, #0
   11d40:	bxeq	lr
   11d44:	bx	r3
   11d48:	andeq	r1, r3, ip, lsl #3
   11d4c:	andeq	r1, r3, ip, lsl #3
   11d50:	andeq	r0, r0, r0
   11d54:	ldr	r0, [pc, #36]	; 11d80 <__assert_fail@plt+0x9b0>
   11d58:	ldr	r1, [pc, #36]	; 11d84 <__assert_fail@plt+0x9b4>
   11d5c:	sub	r1, r1, r0
   11d60:	asr	r1, r1, #2
   11d64:	add	r1, r1, r1, lsr #31
   11d68:	asrs	r1, r1, #1
   11d6c:	bxeq	lr
   11d70:	ldr	r3, [pc, #16]	; 11d88 <__assert_fail@plt+0x9b8>
   11d74:	cmp	r3, #0
   11d78:	bxeq	lr
   11d7c:	bx	r3
   11d80:	andeq	r1, r3, ip, lsl #3
   11d84:	andeq	r1, r3, ip, lsl #3
   11d88:	andeq	r0, r0, r0
   11d8c:	push	{r4, lr}
   11d90:	ldr	r4, [pc, #24]	; 11db0 <__assert_fail@plt+0x9e0>
   11d94:	ldrb	r3, [r4]
   11d98:	cmp	r3, #0
   11d9c:	popne	{r4, pc}
   11da0:	bl	11d28 <__assert_fail@plt+0x958>
   11da4:	mov	r3, #1
   11da8:	strb	r3, [r4]
   11dac:	pop	{r4, pc}
   11db0:	andeq	r1, r3, ip, lsr #3
   11db4:	b	11d54 <__assert_fail@plt+0x984>
   11db8:	strd	r4, [sp, #-16]!
   11dbc:	mov	r5, r1
   11dc0:	str	r6, [sp, #8]
   11dc4:	str	lr, [sp, #12]
   11dc8:	bl	186b0 <__assert_fail@plt+0x72e0>
   11dcc:	subs	r4, r0, #0
   11dd0:	beq	11de4 <__assert_fail@plt+0xa14>
   11dd4:	ldrd	r4, [sp]
   11dd8:	ldr	r6, [sp, #8]
   11ddc:	add	sp, sp, #12
   11de0:	pop	{pc}		; (ldr pc, [sp], #4)
   11de4:	mov	r2, #5
   11de8:	movw	r1, #58924	; 0xe62c
   11dec:	movt	r1, #1
   11df0:	bl	11130 <dcgettext@plt>
   11df4:	mov	r6, r0
   11df8:	mov	r0, r5
   11dfc:	bl	1adf0 <__assert_fail@plt+0x9a20>
   11e00:	mov	r3, r0
   11e04:	mov	r2, r6
   11e08:	mov	r1, r4
   11e0c:	mov	r0, #1
   11e10:	bl	111c0 <error@plt>
   11e14:	subs	r6, r0, #0
   11e18:	str	r7, [sp, #-8]!
   11e1c:	str	lr, [sp, #4]
   11e20:	sub	sp, sp, #56	; 0x38
   11e24:	beq	11e6c <__assert_fail@plt+0xa9c>
   11e28:	movw	r3, #4512	; 0x11a0
   11e2c:	movt	r3, #3
   11e30:	ldr	r4, [r3]
   11e34:	mov	r2, #5
   11e38:	movw	r1, #58956	; 0xe64c
   11e3c:	movt	r1, #1
   11e40:	mov	r0, #0
   11e44:	bl	11130 <dcgettext@plt>
   11e48:	movw	r3, #4568	; 0x11d8
   11e4c:	movt	r3, #3
   11e50:	mov	r2, r0
   11e54:	mov	r1, #1
   11e58:	ldr	r3, [r3]
   11e5c:	mov	r0, r4
   11e60:	bl	112ec <__fprintf_chk@plt>
   11e64:	mov	r0, r6
   11e68:	bl	11268 <exit@plt>
   11e6c:	mov	r2, #5
   11e70:	movw	r1, #58996	; 0xe674
   11e74:	movt	r1, #1
   11e78:	movw	r7, #4516	; 0x11a4
   11e7c:	movt	r7, #3
   11e80:	bl	11130 <dcgettext@plt>
   11e84:	movw	r3, #4568	; 0x11d8
   11e88:	movt	r3, #3
   11e8c:	mov	r1, r0
   11e90:	mov	r0, #1
   11e94:	ldr	r2, [r3]
   11e98:	bl	112d4 <__printf_chk@plt>
   11e9c:	mov	r2, #5
   11ea0:	movw	r1, #59028	; 0xe694
   11ea4:	movt	r1, #1
   11ea8:	mov	r0, r6
   11eac:	bl	11130 <dcgettext@plt>
   11eb0:	ldr	r1, [r7]
   11eb4:	bl	11070 <fputs_unlocked@plt>
   11eb8:	mov	r2, #5
   11ebc:	movw	r1, #59320	; 0xe7b8
   11ec0:	movt	r1, #1
   11ec4:	mov	r0, r6
   11ec8:	bl	11130 <dcgettext@plt>
   11ecc:	ldr	r1, [r7]
   11ed0:	bl	11070 <fputs_unlocked@plt>
   11ed4:	mov	r2, #5
   11ed8:	movw	r1, #59396	; 0xe804
   11edc:	movt	r1, #1
   11ee0:	mov	r0, r6
   11ee4:	bl	11130 <dcgettext@plt>
   11ee8:	ldr	r1, [r7]
   11eec:	bl	11070 <fputs_unlocked@plt>
   11ef0:	mov	r2, #5
   11ef4:	movw	r1, #59608	; 0xe8d8
   11ef8:	movt	r1, #1
   11efc:	mov	r0, r6
   11f00:	bl	11130 <dcgettext@plt>
   11f04:	ldr	r1, [r7]
   11f08:	bl	11070 <fputs_unlocked@plt>
   11f0c:	mov	r2, #5
   11f10:	movw	r1, #59872	; 0xe9e0
   11f14:	movt	r1, #1
   11f18:	mov	r0, r6
   11f1c:	bl	11130 <dcgettext@plt>
   11f20:	ldr	r1, [r7]
   11f24:	bl	11070 <fputs_unlocked@plt>
   11f28:	mov	r2, #5
   11f2c:	movw	r1, #60216	; 0xeb38
   11f30:	movt	r1, #1
   11f34:	mov	r0, r6
   11f38:	bl	11130 <dcgettext@plt>
   11f3c:	ldr	r1, [r7]
   11f40:	bl	11070 <fputs_unlocked@plt>
   11f44:	mov	r2, #5
   11f48:	movw	r1, #60264	; 0xeb68
   11f4c:	movt	r1, #1
   11f50:	mov	r0, r6
   11f54:	bl	11130 <dcgettext@plt>
   11f58:	ldr	r1, [r7]
   11f5c:	bl	11070 <fputs_unlocked@plt>
   11f60:	mov	r2, #5
   11f64:	movw	r1, #60320	; 0xeba0
   11f68:	movt	r1, #1
   11f6c:	mov	r0, r6
   11f70:	bl	11130 <dcgettext@plt>
   11f74:	ldr	r1, [r7]
   11f78:	bl	11070 <fputs_unlocked@plt>
   11f7c:	movw	lr, #58688	; 0xe540
   11f80:	movt	lr, #1
   11f84:	ldr	ip, [lr]
   11f88:	ldr	r4, [lr, #4]
   11f8c:	ldrd	r8, [lr, #8]
   11f90:	subs	r1, ip, #0
   11f94:	str	ip, [sp]
   11f98:	ldrd	r2, [lr, #16]
   11f9c:	str	r4, [sp, #4]
   11fa0:	ldrd	r4, [lr, #24]
   11fa4:	strd	r8, [sp, #8]
   11fa8:	ldrd	r8, [lr, #32]
   11fac:	strd	r2, [sp, #16]
   11fb0:	ldrd	r2, [lr, #40]	; 0x28
   11fb4:	strd	r4, [sp, #24]
   11fb8:	ldrd	r4, [lr, #48]	; 0x30
   11fbc:	strd	r8, [sp, #32]
   11fc0:	strd	r2, [sp, #40]	; 0x28
   11fc4:	strd	r4, [sp, #48]	; 0x30
   11fc8:	movwne	r5, #58948	; 0xe644
   11fcc:	mov	r4, sp
   11fd0:	movtne	r5, #1
   11fd4:	bne	120cc <__assert_fail@plt+0xcfc>
   11fd8:	ldr	r4, [r4, #4]
   11fdc:	movw	r1, #60392	; 0xebe8
   11fe0:	movt	r1, #1
   11fe4:	mov	r2, #5
   11fe8:	cmp	r4, #0
   11fec:	beq	120e0 <__assert_fail@plt+0xd10>
   11ff0:	mov	r0, #0
   11ff4:	bl	11130 <dcgettext@plt>
   11ff8:	mov	r1, r0
   11ffc:	movw	r3, #60416	; 0xec00
   12000:	movt	r3, #1
   12004:	movw	r2, #60456	; 0xec28
   12008:	movt	r2, #1
   1200c:	mov	r0, #1
   12010:	bl	112d4 <__printf_chk@plt>
   12014:	mov	r1, #0
   12018:	mov	r0, #5
   1201c:	bl	1131c <setlocale@plt>
   12020:	cmp	r0, #0
   12024:	movweq	r5, #58948	; 0xe644
   12028:	movteq	r5, #1
   1202c:	beq	12050 <__assert_fail@plt+0xc80>
   12030:	movw	r1, #60472	; 0xec38
   12034:	movt	r1, #1
   12038:	mov	r2, #3
   1203c:	movw	r5, #58948	; 0xe644
   12040:	movt	r5, #1
   12044:	bl	11394 <strncmp@plt>
   12048:	cmp	r0, #0
   1204c:	bne	12198 <__assert_fail@plt+0xdc8>
   12050:	mov	r2, #5
   12054:	movw	r1, #60548	; 0xec84
   12058:	movt	r1, #1
   1205c:	mov	r0, #0
   12060:	bl	11130 <dcgettext@plt>
   12064:	mov	r1, r0
   12068:	movw	r3, #58948	; 0xe644
   1206c:	movt	r3, #1
   12070:	movw	r2, #60416	; 0xec00
   12074:	movt	r2, #1
   12078:	mov	r0, #1
   1207c:	bl	112d4 <__printf_chk@plt>
   12080:	mov	r2, #5
   12084:	movw	r1, #60576	; 0xeca0
   12088:	movt	r1, #1
   1208c:	mov	r0, #0
   12090:	bl	11130 <dcgettext@plt>
   12094:	movw	r2, #61044	; 0xee74
   12098:	movt	r2, #1
   1209c:	cmp	r4, r5
   120a0:	movw	r3, #1768	; 0x6e8
   120a4:	movt	r3, #2
   120a8:	mov	r1, r0
   120ac:	moveq	r3, r2
   120b0:	mov	r2, r4
   120b4:	mov	r0, #1
   120b8:	bl	112d4 <__printf_chk@plt>
   120bc:	b	11e64 <__assert_fail@plt+0xa94>
   120c0:	ldr	r1, [r4, #8]!
   120c4:	cmp	r1, #0
   120c8:	beq	11fd8 <__assert_fail@plt+0xc08>
   120cc:	mov	r0, r5
   120d0:	bl	110a0 <strcmp@plt>
   120d4:	cmp	r0, #0
   120d8:	bne	120c0 <__assert_fail@plt+0xcf0>
   120dc:	b	11fd8 <__assert_fail@plt+0xc08>
   120e0:	mov	r0, r4
   120e4:	bl	11130 <dcgettext@plt>
   120e8:	mov	r1, r0
   120ec:	movw	r3, #60416	; 0xec00
   120f0:	movt	r3, #1
   120f4:	movw	r2, #60456	; 0xec28
   120f8:	movt	r2, #1
   120fc:	mov	r0, #1
   12100:	bl	112d4 <__printf_chk@plt>
   12104:	mov	r1, r4
   12108:	mov	r0, #5
   1210c:	bl	1131c <setlocale@plt>
   12110:	cmp	r0, #0
   12114:	beq	12130 <__assert_fail@plt+0xd60>
   12118:	movw	r1, #60472	; 0xec38
   1211c:	movt	r1, #1
   12120:	mov	r2, #3
   12124:	bl	11394 <strncmp@plt>
   12128:	cmp	r0, #0
   1212c:	bne	1218c <__assert_fail@plt+0xdbc>
   12130:	mov	r2, #5
   12134:	movw	r1, #60548	; 0xec84
   12138:	movt	r1, #1
   1213c:	mov	r0, #0
   12140:	bl	11130 <dcgettext@plt>
   12144:	mov	r1, r0
   12148:	movw	r3, #58948	; 0xe644
   1214c:	movt	r3, #1
   12150:	movw	r2, #60416	; 0xec00
   12154:	movt	r2, #1
   12158:	mov	r0, #1
   1215c:	bl	112d4 <__printf_chk@plt>
   12160:	movw	r1, #60576	; 0xeca0
   12164:	movt	r1, #1
   12168:	mov	r2, #5
   1216c:	mov	r0, #0
   12170:	bl	11130 <dcgettext@plt>
   12174:	movw	r4, #58948	; 0xe644
   12178:	movt	r4, #1
   1217c:	movw	r3, #61044	; 0xee74
   12180:	movt	r3, #1
   12184:	mov	r1, r0
   12188:	b	120b0 <__assert_fail@plt+0xce0>
   1218c:	movw	r5, #58948	; 0xe644
   12190:	movt	r5, #1
   12194:	mov	r4, r5
   12198:	mov	r2, #5
   1219c:	movw	r1, #60476	; 0xec3c
   121a0:	movt	r1, #1
   121a4:	mov	r0, #0
   121a8:	bl	11130 <dcgettext@plt>
   121ac:	ldr	r1, [r7]
   121b0:	bl	11070 <fputs_unlocked@plt>
   121b4:	b	12050 <__assert_fail@plt+0xc80>
   121b8:	mov	r0, #1
   121bc:	b	11e14 <__assert_fail@plt+0xa44>
   121c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   121c4:	mov	r5, r1
   121c8:	mov	r4, r2
   121cc:	strd	r6, [sp, #8]
   121d0:	mov	r7, r3
   121d4:	strd	r8, [sp, #16]
   121d8:	strd	sl, [sp, #24]
   121dc:	mov	sl, r0
   121e0:	str	lr, [sp, #32]
   121e4:	sub	sp, sp, #12
   121e8:	str	r2, [sp]
   121ec:	bl	11274 <strlen@plt>
   121f0:	ldr	fp, [r5]
   121f4:	cmp	fp, #0
   121f8:	beq	122c8 <__assert_fail@plt+0xef8>
   121fc:	mov	r6, #0
   12200:	mov	r8, r0
   12204:	mvn	r9, #0
   12208:	str	r6, [sp, #4]
   1220c:	b	12238 <__assert_fail@plt+0xe68>
   12210:	bl	11118 <memcmp@plt>
   12214:	ldr	r3, [sp, #4]
   12218:	cmp	r0, #0
   1221c:	movne	r3, #1
   12220:	str	r3, [sp, #4]
   12224:	ldr	fp, [r5, #4]!
   12228:	add	r6, r6, #1
   1222c:	add	r4, r4, r7
   12230:	cmp	fp, #0
   12234:	beq	12294 <__assert_fail@plt+0xec4>
   12238:	mov	r2, r8
   1223c:	mov	r1, sl
   12240:	mov	r0, fp
   12244:	bl	11394 <strncmp@plt>
   12248:	cmp	r0, #0
   1224c:	mov	r0, fp
   12250:	bne	12224 <__assert_fail@plt+0xe54>
   12254:	bl	11274 <strlen@plt>
   12258:	ldr	r3, [sp]
   1225c:	cmp	r0, r8
   12260:	mov	r2, r7
   12264:	mov	r1, r4
   12268:	mla	r0, r7, r9, r3
   1226c:	beq	122c0 <__assert_fail@plt+0xef0>
   12270:	cmn	r9, #1
   12274:	moveq	r9, r6
   12278:	beq	12224 <__assert_fail@plt+0xe54>
   1227c:	ldr	r3, [sp]
   12280:	cmp	r3, #0
   12284:	bne	12210 <__assert_fail@plt+0xe40>
   12288:	mov	r3, #1
   1228c:	str	r3, [sp, #4]
   12290:	b	12224 <__assert_fail@plt+0xe54>
   12294:	ldr	r3, [sp, #4]
   12298:	cmp	r3, #0
   1229c:	mvnne	r9, #1
   122a0:	mov	r0, r9
   122a4:	add	sp, sp, #12
   122a8:	ldrd	r4, [sp]
   122ac:	ldrd	r6, [sp, #8]
   122b0:	ldrd	r8, [sp, #16]
   122b4:	ldrd	sl, [sp, #24]
   122b8:	add	sp, sp, #32
   122bc:	pop	{pc}		; (ldr pc, [sp], #4)
   122c0:	mov	r9, r6
   122c4:	b	122a0 <__assert_fail@plt+0xed0>
   122c8:	mvn	r9, #0
   122cc:	b	122a0 <__assert_fail@plt+0xed0>
   122d0:	strd	r4, [sp, #-16]!
   122d4:	str	r6, [sp, #8]
   122d8:	mov	r6, r0
   122dc:	ldr	r0, [r1]
   122e0:	str	lr, [sp, #12]
   122e4:	cmp	r0, #0
   122e8:	beq	1232c <__assert_fail@plt+0xf5c>
   122ec:	mov	r4, r1
   122f0:	mov	r5, #0
   122f4:	b	12308 <__assert_fail@plt+0xf38>
   122f8:	ldr	r0, [r4, #4]!
   122fc:	add	r5, r5, #1
   12300:	cmp	r0, #0
   12304:	beq	1232c <__assert_fail@plt+0xf5c>
   12308:	mov	r1, r6
   1230c:	bl	110a0 <strcmp@plt>
   12310:	cmp	r0, #0
   12314:	bne	122f8 <__assert_fail@plt+0xf28>
   12318:	mov	r0, r5
   1231c:	ldrd	r4, [sp]
   12320:	ldr	r6, [sp, #8]
   12324:	add	sp, sp, #12
   12328:	pop	{pc}		; (ldr pc, [sp], #4)
   1232c:	ldrd	r4, [sp]
   12330:	mvn	r0, #0
   12334:	ldr	r6, [sp, #8]
   12338:	add	sp, sp, #12
   1233c:	pop	{pc}		; (ldr pc, [sp], #4)
   12340:	cmn	r2, #1
   12344:	strd	r4, [sp, #-16]!
   12348:	mov	r5, r1
   1234c:	movweq	r1, #61260	; 0xef4c
   12350:	movwne	r1, #61288	; 0xef68
   12354:	str	r6, [sp, #8]
   12358:	movteq	r1, #1
   1235c:	movtne	r1, #1
   12360:	str	lr, [sp, #12]
   12364:	mov	r6, r0
   12368:	sub	sp, sp, #8
   1236c:	mov	r2, #5
   12370:	mov	r0, #0
   12374:	bl	11130 <dcgettext@plt>
   12378:	mov	r4, r0
   1237c:	mov	r2, r5
   12380:	mov	r1, #8
   12384:	mov	r0, #0
   12388:	bl	1aab0 <__assert_fail@plt+0x96e0>
   1238c:	mov	r5, r0
   12390:	mov	r1, r6
   12394:	mov	r0, #1
   12398:	bl	1ade0 <__assert_fail@plt+0x9a10>
   1239c:	mov	r1, #0
   123a0:	mov	r3, r5
   123a4:	str	r0, [sp]
   123a8:	mov	r2, r4
   123ac:	mov	r0, r1
   123b0:	bl	111c0 <error@plt>
   123b4:	add	sp, sp, #8
   123b8:	ldrd	r4, [sp]
   123bc:	ldr	r6, [sp, #8]
   123c0:	add	sp, sp, #12
   123c4:	pop	{pc}		; (ldr pc, [sp], #4)
   123c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123cc:	mov	r4, r1
   123d0:	movw	r1, #61320	; 0xef88
   123d4:	movt	r1, #1
   123d8:	strd	r6, [sp, #8]
   123dc:	mov	r6, r0
   123e0:	mov	r7, r2
   123e4:	mov	r0, #0
   123e8:	strd	r8, [sp, #16]
   123ec:	mov	r2, #5
   123f0:	strd	sl, [sp, #24]
   123f4:	movw	sl, #4512	; 0x11a0
   123f8:	movt	sl, #3
   123fc:	str	lr, [sp, #32]
   12400:	sub	sp, sp, #12
   12404:	bl	11130 <dcgettext@plt>
   12408:	ldr	r1, [sl]
   1240c:	bl	11070 <fputs_unlocked@plt>
   12410:	ldr	fp, [r6]
   12414:	cmp	fp, #0
   12418:	beq	124b8 <__assert_fail@plt+0x10e8>
   1241c:	movw	r3, #61344	; 0xefa0
   12420:	movt	r3, #1
   12424:	mov	r9, #0
   12428:	str	r3, [sp]
   1242c:	movw	r3, #61352	; 0xefa8
   12430:	movt	r3, #1
   12434:	mov	r5, r9
   12438:	str	r3, [sp, #4]
   1243c:	b	12474 <__assert_fail@plt+0x10a4>
   12440:	mov	r0, fp
   12444:	mov	r9, r4
   12448:	bl	1adf0 <__assert_fail@plt+0x9a20>
   1244c:	mov	r3, r0
   12450:	mov	r1, #1
   12454:	ldr	r2, [sp]
   12458:	mov	r0, r8
   1245c:	bl	112ec <__fprintf_chk@plt>
   12460:	ldr	fp, [r6, #4]!
   12464:	add	r5, r5, #1
   12468:	add	r4, r4, r7
   1246c:	cmp	fp, #0
   12470:	beq	124b8 <__assert_fail@plt+0x10e8>
   12474:	cmp	r5, #0
   12478:	mov	r1, r4
   1247c:	ldr	r8, [sl]
   12480:	mov	r2, r7
   12484:	mov	r0, r9
   12488:	beq	12440 <__assert_fail@plt+0x1070>
   1248c:	bl	11118 <memcmp@plt>
   12490:	cmp	r0, #0
   12494:	bne	12440 <__assert_fail@plt+0x1070>
   12498:	mov	r0, fp
   1249c:	bl	1adf0 <__assert_fail@plt+0x9a20>
   124a0:	mov	r3, r0
   124a4:	mov	r1, #1
   124a8:	ldr	r2, [sp, #4]
   124ac:	mov	r0, r8
   124b0:	bl	112ec <__fprintf_chk@plt>
   124b4:	b	12460 <__assert_fail@plt+0x1090>
   124b8:	ldr	r0, [sl]
   124bc:	ldr	r3, [r0, #20]
   124c0:	ldr	r2, [r0, #24]
   124c4:	cmp	r3, r2
   124c8:	bcs	124f8 <__assert_fail@plt+0x1128>
   124cc:	add	r1, r3, #1
   124d0:	mov	r2, #10
   124d4:	str	r1, [r0, #20]
   124d8:	strb	r2, [r3]
   124dc:	add	sp, sp, #12
   124e0:	ldrd	r4, [sp]
   124e4:	ldrd	r6, [sp, #8]
   124e8:	ldrd	r8, [sp, #16]
   124ec:	ldrd	sl, [sp, #24]
   124f0:	add	sp, sp, #32
   124f4:	pop	{pc}		; (ldr pc, [sp], #4)
   124f8:	mov	r1, #10
   124fc:	add	sp, sp, #12
   12500:	ldrd	r4, [sp]
   12504:	ldrd	r6, [sp, #8]
   12508:	ldrd	r8, [sp, #16]
   1250c:	ldrd	sl, [sp, #24]
   12510:	ldr	lr, [sp, #32]
   12514:	add	sp, sp, #36	; 0x24
   12518:	b	11310 <__overflow@plt>
   1251c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12520:	mov	r5, r1
   12524:	mov	r4, r2
   12528:	ldrb	ip, [sp, #32]
   1252c:	strd	r6, [sp, #8]
   12530:	mov	r7, r0
   12534:	mov	r6, r3
   12538:	str	r8, [sp, #16]
   1253c:	str	lr, [sp, #20]
   12540:	cmp	ip, #0
   12544:	beq	12578 <__assert_fail@plt+0x11a8>
   12548:	mov	r2, r3
   1254c:	mov	r1, r4
   12550:	ldr	r3, [sp, #24]
   12554:	mov	r0, r5
   12558:	bl	121c0 <__assert_fail@plt+0xdf0>
   1255c:	cmp	r0, #0
   12560:	blt	12588 <__assert_fail@plt+0x11b8>
   12564:	ldrd	r4, [sp]
   12568:	ldrd	r6, [sp, #8]
   1256c:	ldr	r8, [sp, #16]
   12570:	add	sp, sp, #20
   12574:	pop	{pc}		; (ldr pc, [sp], #4)
   12578:	mov	r1, r2
   1257c:	mov	r0, r5
   12580:	bl	122d0 <__assert_fail@plt+0xf00>
   12584:	b	1255c <__assert_fail@plt+0x118c>
   12588:	mov	r2, r0
   1258c:	mov	r1, r5
   12590:	mov	r0, r7
   12594:	bl	12340 <__assert_fail@plt+0xf70>
   12598:	mov	r0, r4
   1259c:	mov	r1, r6
   125a0:	ldr	r2, [sp, #24]
   125a4:	bl	123c8 <__assert_fail@plt+0xff8>
   125a8:	ldr	r3, [sp, #28]
   125ac:	blx	r3
   125b0:	mvn	r0, #0
   125b4:	b	12564 <__assert_fail@plt+0x1194>
   125b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   125bc:	strd	r6, [sp, #8]
   125c0:	ldr	r7, [r1]
   125c4:	str	r8, [sp, #16]
   125c8:	str	lr, [sp, #20]
   125cc:	cmp	r7, #0
   125d0:	beq	12610 <__assert_fail@plt+0x1240>
   125d4:	mov	r6, r3
   125d8:	mov	r8, r0
   125dc:	mov	r4, r2
   125e0:	mov	r5, r1
   125e4:	b	125f4 <__assert_fail@plt+0x1224>
   125e8:	ldr	r7, [r5, #4]!
   125ec:	cmp	r7, #0
   125f0:	beq	12610 <__assert_fail@plt+0x1240>
   125f4:	mov	r1, r4
   125f8:	mov	r2, r6
   125fc:	mov	r0, r8
   12600:	add	r4, r4, r6
   12604:	bl	11118 <memcmp@plt>
   12608:	cmp	r0, #0
   1260c:	bne	125e8 <__assert_fail@plt+0x1218>
   12610:	mov	r0, r7
   12614:	ldrd	r4, [sp]
   12618:	ldrd	r6, [sp, #8]
   1261c:	ldr	r8, [sp, #16]
   12620:	add	sp, sp, #20
   12624:	pop	{pc}		; (ldr pc, [sp], #4)
   12628:	movw	r3, #4560	; 0x11d0
   1262c:	movt	r3, #3
   12630:	str	r0, [r3]
   12634:	bx	lr
   12638:	movw	r3, #4560	; 0x11d0
   1263c:	movt	r3, #3
   12640:	strb	r0, [r3, #4]
   12644:	bx	lr
   12648:	movw	r3, #4516	; 0x11a4
   1264c:	movt	r3, #3
   12650:	strd	r4, [sp, #-16]!
   12654:	ldr	r0, [r3]
   12658:	str	r6, [sp, #8]
   1265c:	str	lr, [sp, #12]
   12660:	sub	sp, sp, #8
   12664:	bl	1be90 <__assert_fail@plt+0xaac0>
   12668:	cmp	r0, #0
   1266c:	beq	12698 <__assert_fail@plt+0x12c8>
   12670:	movw	r4, #4560	; 0x11d0
   12674:	movt	r4, #3
   12678:	ldrb	r6, [r4, #4]
   1267c:	bl	11298 <__errno_location@plt>
   12680:	mov	r5, r0
   12684:	cmp	r6, #0
   12688:	beq	126c4 <__assert_fail@plt+0x12f4>
   1268c:	ldr	r3, [r0]
   12690:	cmp	r3, #32
   12694:	bne	126c4 <__assert_fail@plt+0x12f4>
   12698:	movw	r3, #4512	; 0x11a0
   1269c:	movt	r3, #3
   126a0:	ldr	r0, [r3]
   126a4:	bl	1be90 <__assert_fail@plt+0xaac0>
   126a8:	cmp	r0, #0
   126ac:	bne	1270c <__assert_fail@plt+0x133c>
   126b0:	add	sp, sp, #8
   126b4:	ldrd	r4, [sp]
   126b8:	ldr	r6, [sp, #8]
   126bc:	add	sp, sp, #12
   126c0:	pop	{pc}		; (ldr pc, [sp], #4)
   126c4:	movw	r1, #61360	; 0xefb0
   126c8:	movt	r1, #1
   126cc:	mov	r2, #5
   126d0:	mov	r0, #0
   126d4:	bl	11130 <dcgettext@plt>
   126d8:	mov	r6, r0
   126dc:	ldr	r0, [r4]
   126e0:	cmp	r0, #0
   126e4:	beq	1271c <__assert_fail@plt+0x134c>
   126e8:	ldr	r4, [r5]
   126ec:	bl	1ac04 <__assert_fail@plt+0x9834>
   126f0:	mov	r3, r0
   126f4:	movw	r2, #61372	; 0xefbc
   126f8:	movt	r2, #1
   126fc:	mov	r0, #0
   12700:	str	r6, [sp]
   12704:	mov	r1, r4
   12708:	bl	111c0 <error@plt>
   1270c:	movw	r3, #4424	; 0x1148
   12710:	movt	r3, #3
   12714:	ldr	r0, [r3]
   12718:	bl	110e8 <_exit@plt>
   1271c:	mov	r3, r6
   12720:	movw	r2, #61376	; 0xefc0
   12724:	movt	r2, #1
   12728:	ldr	r1, [r5]
   1272c:	bl	111c0 <error@plt>
   12730:	b	1270c <__assert_fail@plt+0x133c>
   12734:	mov	ip, r1
   12738:	mov	r1, r2
   1273c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12740:	mov	r2, r3
   12744:	mov	r5, r0
   12748:	strd	r6, [sp, #8]
   1274c:	mov	r0, ip
   12750:	str	r8, [sp, #16]
   12754:	str	lr, [sp, #20]
   12758:	bl	111cc <open64@plt>
   1275c:	sub	r3, r5, r0
   12760:	mov	r4, r0
   12764:	clz	r3, r3
   12768:	lsr	r3, r3, #5
   1276c:	orrs	r3, r3, r0, lsr #31
   12770:	beq	1278c <__assert_fail@plt+0x13bc>
   12774:	mov	r0, r4
   12778:	ldrd	r4, [sp]
   1277c:	ldrd	r6, [sp, #8]
   12780:	ldr	r8, [sp, #16]
   12784:	add	sp, sp, #20
   12788:	pop	{pc}		; (ldr pc, [sp], #4)
   1278c:	mov	r1, r5
   12790:	bl	1113c <dup2@plt>
   12794:	mov	r7, r0
   12798:	bl	11298 <__errno_location@plt>
   1279c:	mov	r5, r0
   127a0:	mov	r0, r4
   127a4:	ldr	r6, [r5]
   127a8:	mov	r4, r7
   127ac:	bl	113ac <close@plt>
   127b0:	str	r6, [r5]
   127b4:	b	12774 <__assert_fail@plt+0x13a4>
   127b8:	cmp	r0, #0
   127bc:	strd	r4, [sp, #-16]!
   127c0:	mov	r4, r2
   127c4:	mov	r5, r3
   127c8:	str	r6, [sp, #8]
   127cc:	mov	r6, r1
   127d0:	str	lr, [sp, #12]
   127d4:	bge	12814 <__assert_fail@plt+0x1444>
   127d8:	cmp	r2, #0
   127dc:	beq	12854 <__assert_fail@plt+0x1484>
   127e0:	mov	r1, r4
   127e4:	mov	r2, r5
   127e8:	ldr	r3, [sp, #16]
   127ec:	mov	r0, r6
   127f0:	bl	11094 <utimensat@plt>
   127f4:	mov	r1, r0
   127f8:	cmp	r1, #1
   127fc:	beq	12854 <__assert_fail@plt+0x1484>
   12800:	ldrd	r4, [sp]
   12804:	mov	r0, r1
   12808:	ldr	r6, [sp, #8]
   1280c:	add	sp, sp, #12
   12810:	pop	{pc}		; (ldr pc, [sp], #4)
   12814:	mov	r1, r3
   12818:	bl	11358 <futimens@plt>
   1281c:	cmn	r0, #1
   12820:	mov	r1, r0
   12824:	moveq	r3, #1
   12828:	movne	r3, #0
   1282c:	cmp	r4, #0
   12830:	moveq	r3, #0
   12834:	cmp	r3, #0
   12838:	beq	127f8 <__assert_fail@plt+0x1428>
   1283c:	bl	11298 <__errno_location@plt>
   12840:	ldr	r3, [r0]
   12844:	cmp	r3, #38	; 0x26
   12848:	mvnne	r1, #0
   1284c:	bne	12800 <__assert_fail@plt+0x1430>
   12850:	b	127e0 <__assert_fail@plt+0x1410>
   12854:	bl	11298 <__errno_location@plt>
   12858:	mov	r3, #9
   1285c:	mvn	r1, #0
   12860:	str	r3, [r0]
   12864:	b	12800 <__assert_fail@plt+0x1430>
   12868:	mov	r1, r0
   1286c:	mov	r0, #0
   12870:	b	110dc <clock_gettime@plt>
   12874:	str	r4, [sp, #-8]!
   12878:	mov	r4, r0
   1287c:	mov	r0, #0
   12880:	str	lr, [sp, #4]
   12884:	sub	sp, sp, #8
   12888:	mov	r1, sp
   1288c:	bl	110dc <clock_gettime@plt>
   12890:	ldrd	r2, [sp]
   12894:	mov	r0, r4
   12898:	strd	r2, [r4]
   1289c:	add	sp, sp, #8
   128a0:	ldr	r4, [sp]
   128a4:	add	sp, sp, #4
   128a8:	pop	{pc}		; (ldr pc, [sp], #4)
   128ac:	andeq	r0, r0, r0
   128b0:	sub	sp, sp, #8
   128b4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   128b8:	mov	r4, r0
   128bc:	add	r0, sp, #32
   128c0:	ldr	r1, [r4, #156]	; 0x9c
   128c4:	strd	r6, [sp, #8]
   128c8:	strd	r8, [sp, #16]
   128cc:	str	sl, [sp, #24]
   128d0:	str	lr, [sp, #28]
   128d4:	cmp	r1, #0
   128d8:	ldrd	r6, [sp, #40]	; 0x28
   128dc:	stm	r0, {r2, r3}
   128e0:	ldr	r5, [sp, #48]	; 0x30
   128e4:	beq	12934 <__assert_fail@plt+0x1564>
   128e8:	ldr	r3, [r4, #48]	; 0x30
   128ec:	cmp	r3, #0
   128f0:	bne	12934 <__assert_fail@plt+0x1564>
   128f4:	ldrb	r3, [r4, #153]	; 0x99
   128f8:	cmp	r3, #0
   128fc:	bne	12934 <__assert_fail@plt+0x1564>
   12900:	ldr	r3, [r4, #172]	; 0xac
   12904:	cmp	r5, #2
   12908:	cmple	r3, #0
   1290c:	beq	12a1c <__assert_fail@plt+0x164c>
   12910:	ldrd	r2, [r0]
   12914:	mov	ip, #1
   12918:	ldrd	r6, [r0, #8]
   1291c:	ldrd	r8, [r0, #16]
   12920:	strd	r2, [r4, #32]
   12924:	strd	r6, [r4, #40]	; 0x28
   12928:	strb	ip, [r4, #180]	; 0xb4
   1292c:	strd	r8, [r4, #48]	; 0x30
   12930:	b	129a0 <__assert_fail@plt+0x15d0>
   12934:	cmp	r5, #4
   12938:	ble	129c0 <__assert_fail@plt+0x15f0>
   1293c:	add	ip, r1, #1
   12940:	mov	r2, #100	; 0x64
   12944:	mov	r3, #0
   12948:	mov	r0, r6
   1294c:	mov	r1, r7
   12950:	str	ip, [r4, #156]	; 0x9c
   12954:	sub	r5, r5, #4
   12958:	bl	1e270 <__assert_fail@plt+0xcea0>
   1295c:	mov	r0, r6
   12960:	mov	r1, r7
   12964:	strd	r2, [r4, #64]	; 0x40
   12968:	mov	r2, #100	; 0x64
   1296c:	mov	r3, #0
   12970:	bl	1e270 <__assert_fail@plt+0xcea0>
   12974:	mov	r2, #100	; 0x64
   12978:	mov	r3, #0
   1297c:	bl	1e270 <__assert_fail@plt+0xcea0>
   12980:	mov	r0, r6
   12984:	mov	r1, r7
   12988:	strd	r2, [r4, #56]	; 0x38
   1298c:	movw	r2, #10000	; 0x2710
   12990:	mov	r3, #0
   12994:	bl	1e270 <__assert_fail@plt+0xcea0>
   12998:	strd	r0, [r4, #40]	; 0x28
   1299c:	str	r5, [r4, #48]	; 0x30
   129a0:	ldrd	r4, [sp]
   129a4:	ldrd	r6, [sp, #8]
   129a8:	ldrd	r8, [sp, #16]
   129ac:	ldr	sl, [sp, #24]
   129b0:	ldr	lr, [sp, #28]
   129b4:	add	sp, sp, #32
   129b8:	add	sp, sp, #8
   129bc:	bx	lr
   129c0:	ldr	r3, [r4, #172]	; 0xac
   129c4:	cmp	r5, #2
   129c8:	add	r3, r3, #1
   129cc:	str	r3, [r4, #172]	; 0xac
   129d0:	ble	12a24 <__assert_fail@plt+0x1654>
   129d4:	mov	r2, #100	; 0x64
   129d8:	mov	r3, #0
   129dc:	mov	r0, r6
   129e0:	mov	r1, r7
   129e4:	bl	1e270 <__assert_fail@plt+0xcea0>
   129e8:	mov	r2, #100	; 0x64
   129ec:	mov	r3, #0
   129f0:	strd	r0, [r4, #72]	; 0x48
   129f4:	mov	r0, r6
   129f8:	mov	r1, r7
   129fc:	bl	1e270 <__assert_fail@plt+0xcea0>
   12a00:	strd	r2, [r4, #80]	; 0x50
   12a04:	mov	r3, #0
   12a08:	mov	r2, #2
   12a0c:	str	r2, [r4, #28]
   12a10:	str	r3, [r4, #88]	; 0x58
   12a14:	str	r3, [r4, #92]	; 0x5c
   12a18:	b	129a0 <__assert_fail@plt+0x15d0>
   12a1c:	mov	r3, #1
   12a20:	str	r3, [r4, #172]	; 0xac
   12a24:	mov	r2, #0
   12a28:	mov	r3, #0
   12a2c:	strd	r6, [r4, #72]	; 0x48
   12a30:	strd	r2, [r4, #80]	; 0x50
   12a34:	b	12a04 <__assert_fail@plt+0x1634>
   12a38:	ldr	r3, [r1, #24]
   12a3c:	cmp	r3, #0
   12a40:	blt	12ab4 <__assert_fail@plt+0x16e4>
   12a44:	ldm	r0, {r3, ip}
   12a48:	strd	r4, [sp, #-12]!
   12a4c:	ldr	r2, [r1]
   12a50:	ldr	r5, [r1, #8]
   12a54:	ldr	r4, [r1, #12]
   12a58:	eor	r3, r3, r2
   12a5c:	ldr	r2, [r0, #8]
   12a60:	str	lr, [sp, #8]
   12a64:	ldr	lr, [r1, #4]
   12a68:	eor	r2, r2, r5
   12a6c:	eor	ip, ip, lr
   12a70:	ldr	lr, [r0, #12]
   12a74:	orr	r3, r3, ip
   12a78:	orr	r3, r3, r2
   12a7c:	ldr	ip, [r0, #16]
   12a80:	ldr	r2, [r0, #20]
   12a84:	eor	lr, lr, r4
   12a88:	ldrd	r0, [r1, #16]
   12a8c:	orr	r3, r3, lr
   12a90:	ldrd	r4, [sp]
   12a94:	add	sp, sp, #8
   12a98:	eor	ip, ip, r0
   12a9c:	eor	r2, r2, r1
   12aa0:	orr	r3, r3, ip
   12aa4:	orrs	r3, r3, r2
   12aa8:	moveq	r0, #1
   12aac:	movne	r0, #0
   12ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ab4:	mov	r0, #0
   12ab8:	bx	lr
   12abc:	movw	r2, #46021	; 0xb3c5
   12ac0:	movt	r2, #37282	; 0x91a2
   12ac4:	strd	r4, [sp, #-20]!	; 0xffffffec
   12ac8:	strd	r6, [sp, #8]
   12acc:	subs	r6, r0, #0
   12ad0:	mov	r5, r1
   12ad4:	asr	ip, r6, #31
   12ad8:	str	lr, [sp, #16]
   12adc:	sub	sp, sp, #12
   12ae0:	smull	r2, r4, r2, r6
   12ae4:	movlt	lr, #45	; 0x2d
   12ae8:	movge	lr, #43	; 0x2b
   12aec:	mov	r0, r1
   12af0:	movw	r3, #64228	; 0xfae4
   12af4:	movt	r3, #1
   12af8:	mvn	r2, #0
   12afc:	str	lr, [sp]
   12b00:	add	r4, r4, r6
   12b04:	mov	r1, #1
   12b08:	rsb	r4, ip, r4, asr #11
   12b0c:	eor	ip, r4, r4, asr #31
   12b10:	sub	ip, ip, r4, asr #31
   12b14:	str	ip, [sp, #4]
   12b18:	bl	112a4 <__sprintf_chk@plt>
   12b1c:	mov	r3, #3600	; 0xe10
   12b20:	mls	r4, r3, r4, r6
   12b24:	cmp	r4, #0
   12b28:	beq	12ba0 <__assert_fail@plt+0x17d0>
   12b2c:	cmp	r4, #0
   12b30:	movw	r3, #34953	; 0x8889
   12b34:	movt	r3, #34952	; 0x8888
   12b38:	rsblt	r4, r4, #0
   12b3c:	movw	r2, #33205	; 0x81b5
   12b40:	movt	r2, #6990	; 0x1b4e
   12b44:	umull	ip, r3, r3, r4
   12b48:	movw	r1, #52429	; 0xcccd
   12b4c:	movt	r1, #52428	; 0xcccc
   12b50:	umull	ip, r2, r2, r4
   12b54:	mov	lr, #58	; 0x3a
   12b58:	lsr	ip, r3, #5
   12b5c:	strb	lr, [r5, r0]
   12b60:	add	r0, r5, r0
   12b64:	lsr	r2, r2, #6
   12b68:	rsb	r3, ip, ip, lsl #4
   12b6c:	umull	r7, r6, r1, ip
   12b70:	add	r2, r2, #48	; 0x30
   12b74:	subs	r3, r4, r3, lsl #2
   12b78:	strb	r2, [r0, #1]
   12b7c:	lsr	r6, r6, #3
   12b80:	addeq	r2, r0, #3
   12b84:	add	r6, r6, r6, lsl #2
   12b88:	sub	ip, ip, r6, lsl #1
   12b8c:	add	ip, ip, #48	; 0x30
   12b90:	strb	ip, [r0, #2]
   12b94:	bne	12bb8 <__assert_fail@plt+0x17e8>
   12b98:	mov	r3, #0
   12b9c:	strb	r3, [r2]
   12ba0:	mov	r0, r5
   12ba4:	add	sp, sp, #12
   12ba8:	ldrd	r4, [sp]
   12bac:	ldrd	r6, [sp, #8]
   12bb0:	add	sp, sp, #16
   12bb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bb8:	umull	r2, r1, r1, r3
   12bbc:	add	r2, r0, #6
   12bc0:	strb	lr, [r0, #3]
   12bc4:	lsr	r1, r1, #3
   12bc8:	add	ip, r1, r1, lsl #2
   12bcc:	add	r1, r1, #48	; 0x30
   12bd0:	sub	r3, r3, ip, lsl #1
   12bd4:	strb	r1, [r0, #4]
   12bd8:	add	r3, r3, #48	; 0x30
   12bdc:	strb	r3, [r0, #5]
   12be0:	mov	r3, #0
   12be4:	strb	r3, [r2]
   12be8:	b	12ba0 <__assert_fail@plt+0x17d0>
   12bec:	mov	ip, r0
   12bf0:	movw	r0, #34079	; 0x851f
   12bf4:	movt	r0, #20971	; 0x51eb
   12bf8:	strd	r4, [sp, #-12]!
   12bfc:	mov	r4, r1
   12c00:	asr	r2, ip, #31
   12c04:	str	lr, [sp, #8]
   12c08:	mov	lr, #100	; 0x64
   12c0c:	smull	r3, r1, r0, ip
   12c10:	movw	r5, #63636	; 0xf894
   12c14:	movt	r5, #65535	; 0xffff
   12c18:	movw	r3, #64236	; 0xfaec
   12c1c:	movt	r3, #1
   12c20:	cmp	ip, r5
   12c24:	addge	r3, r3, #1
   12c28:	sub	sp, sp, #12
   12c2c:	rsb	r1, r2, r1, asr #5
   12c30:	mov	r0, r4
   12c34:	mvn	r2, #0
   12c38:	mls	lr, lr, r1, ip
   12c3c:	add	r1, r1, #19
   12c40:	eor	ip, r1, r1, asr #31
   12c44:	cmp	lr, #0
   12c48:	sub	ip, ip, r1, asr #31
   12c4c:	mov	r1, #1
   12c50:	rsblt	lr, lr, #0
   12c54:	stm	sp, {ip, lr}
   12c58:	bl	112a4 <__sprintf_chk@plt>
   12c5c:	mov	r0, r4
   12c60:	add	sp, sp, #12
   12c64:	ldrd	r4, [sp]
   12c68:	add	sp, sp, #8
   12c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c70:	push	{r0, r1, r2, r3}
   12c74:	mov	r2, #6
   12c78:	mov	r1, #1
   12c7c:	movw	r0, #64248	; 0xfaf8
   12c80:	movt	r0, #1
   12c84:	str	r4, [sp, #-8]!
   12c88:	movw	r4, #4512	; 0x11a0
   12c8c:	movt	r4, #3
   12c90:	str	lr, [sp, #4]
   12c94:	sub	sp, sp, #8
   12c98:	ldr	r3, [r4]
   12c9c:	bl	11184 <fwrite@plt>
   12ca0:	ldr	r2, [sp, #16]
   12ca4:	add	ip, sp, #20
   12ca8:	mov	r1, #1
   12cac:	mov	r3, ip
   12cb0:	ldr	r0, [r4]
   12cb4:	str	ip, [sp, #4]
   12cb8:	bl	11208 <__vfprintf_chk@plt>
   12cbc:	add	sp, sp, #8
   12cc0:	ldr	r4, [sp]
   12cc4:	ldr	lr, [sp, #4]
   12cc8:	add	sp, sp, #8
   12ccc:	add	sp, sp, #16
   12cd0:	bx	lr
   12cd4:	str	r4, [sp, #-8]!
   12cd8:	eor	r0, r0, #1
   12cdc:	movw	ip, #4512	; 0x11a0
   12ce0:	movt	ip, #3
   12ce4:	str	lr, [sp, #4]
   12ce8:	sub	sp, sp, #16
   12cec:	ldr	r4, [sp, #24]
   12cf0:	movw	lr, #64256	; 0xfb00
   12cf4:	movt	lr, #1
   12cf8:	mov	r1, #1
   12cfc:	strd	r2, [sp]
   12d00:	add	r2, lr, r0
   12d04:	ldr	r0, [ip]
   12d08:	str	r4, [sp, #8]
   12d0c:	bl	112ec <__fprintf_chk@plt>
   12d10:	mov	r0, #1
   12d14:	add	sp, sp, #16
   12d18:	ldr	r4, [sp]
   12d1c:	add	sp, sp, #4
   12d20:	pop	{pc}		; (ldr pc, [sp], #4)
   12d24:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d28:	movw	r5, #61380	; 0xefc4
   12d2c:	movt	r5, #1
   12d30:	strd	r6, [sp, #8]
   12d34:	mov	r6, r1
   12d38:	mov	r7, r0
   12d3c:	movw	r1, #64268	; 0xfb0c
   12d40:	movt	r1, #1
   12d44:	str	r8, [sp, #16]
   12d48:	str	lr, [sp, #20]
   12d4c:	b	12d5c <__assert_fail@plt+0x198c>
   12d50:	ldr	r1, [r5, #12]!
   12d54:	cmp	r1, #0
   12d58:	beq	12d88 <__assert_fail@plt+0x19b8>
   12d5c:	mov	r0, r6
   12d60:	mov	r4, r5
   12d64:	bl	110a0 <strcmp@plt>
   12d68:	cmp	r0, #0
   12d6c:	bne	12d50 <__assert_fail@plt+0x1980>
   12d70:	mov	r0, r4
   12d74:	ldrd	r4, [sp]
   12d78:	ldrd	r6, [sp, #8]
   12d7c:	ldr	r8, [sp, #16]
   12d80:	add	sp, sp, #20
   12d84:	pop	{pc}		; (ldr pc, [sp], #4)
   12d88:	ldr	r1, [r7, #192]	; 0xc0
   12d8c:	cmp	r1, #0
   12d90:	beq	12dc0 <__assert_fail@plt+0x19f0>
   12d94:	add	r7, r7, #192	; 0xc0
   12d98:	b	12da8 <__assert_fail@plt+0x19d8>
   12d9c:	ldr	r1, [r7, #12]!
   12da0:	cmp	r1, #0
   12da4:	beq	12dc0 <__assert_fail@plt+0x19f0>
   12da8:	mov	r0, r6
   12dac:	mov	r4, r7
   12db0:	bl	110a0 <strcmp@plt>
   12db4:	cmp	r0, #0
   12db8:	bne	12d9c <__assert_fail@plt+0x19cc>
   12dbc:	b	12d70 <__assert_fail@plt+0x19a0>
   12dc0:	movw	r1, #64272	; 0xfb10
   12dc4:	movt	r1, #1
   12dc8:	ldr	r3, [pc, #48]	; 12e00 <__assert_fail@plt+0x1a30>
   12dcc:	b	12ddc <__assert_fail@plt+0x1a0c>
   12dd0:	ldr	r1, [r4, #12]
   12dd4:	cmp	r1, #0
   12dd8:	beq	12df8 <__assert_fail@plt+0x1a28>
   12ddc:	mov	r0, r6
   12de0:	mov	r4, r3
   12de4:	bl	110a0 <strcmp@plt>
   12de8:	cmp	r0, #0
   12dec:	add	r3, r4, #12
   12df0:	bne	12dd0 <__assert_fail@plt+0x1a00>
   12df4:	b	12d70 <__assert_fail@plt+0x19a0>
   12df8:	mov	r4, r1
   12dfc:	b	12d70 <__assert_fail@plt+0x19a0>
   12e00:	strdeq	lr, [r1], -r4
   12e04:	mov	r2, #5
   12e08:	strd	r4, [sp, #-12]!
   12e0c:	mov	r4, r1
   12e10:	mov	r5, r0
   12e14:	movw	r1, #64276	; 0xfb14
   12e18:	movt	r1, #1
   12e1c:	mov	r0, #0
   12e20:	str	lr, [sp, #8]
   12e24:	sub	sp, sp, #12
   12e28:	bl	11130 <dcgettext@plt>
   12e2c:	mov	r1, r5
   12e30:	bl	12c70 <__assert_fail@plt+0x18a0>
   12e34:	ldrd	r2, [r4, #96]	; 0x60
   12e38:	orrs	r1, r2, r3
   12e3c:	bne	12f80 <__assert_fail@plt+0x1bb0>
   12e40:	ldrd	r2, [r4, #104]	; 0x68
   12e44:	orrs	r1, r2, r3
   12e48:	beq	12f14 <__assert_fail@plt+0x1b44>
   12e4c:	mov	r0, #0
   12e50:	movw	r1, #64320	; 0xfb40
   12e54:	movt	r1, #1
   12e58:	str	r1, [sp]
   12e5c:	bl	12cd4 <__assert_fail@plt+0x1904>
   12e60:	ldrd	r2, [r4, #112]	; 0x70
   12e64:	orrs	r1, r2, r3
   12e68:	beq	12e7c <__assert_fail@plt+0x1aac>
   12e6c:	movw	r1, #64332	; 0xfb4c
   12e70:	movt	r1, #1
   12e74:	str	r1, [sp]
   12e78:	bl	12cd4 <__assert_fail@plt+0x1904>
   12e7c:	ldrd	r2, [r4, #120]	; 0x78
   12e80:	orrs	r1, r2, r3
   12e84:	beq	12e98 <__assert_fail@plt+0x1ac8>
   12e88:	movw	r1, #64340	; 0xfb54
   12e8c:	movt	r1, #1
   12e90:	str	r1, [sp]
   12e94:	bl	12cd4 <__assert_fail@plt+0x1904>
   12e98:	ldrd	r2, [r4, #128]	; 0x80
   12e9c:	orrs	r1, r2, r3
   12ea0:	beq	12eb4 <__assert_fail@plt+0x1ae4>
   12ea4:	movw	r1, #64348	; 0xfb5c
   12ea8:	movt	r1, #1
   12eac:	str	r1, [sp]
   12eb0:	bl	12cd4 <__assert_fail@plt+0x1904>
   12eb4:	ldrd	r2, [r4, #136]	; 0x88
   12eb8:	orrs	r1, r2, r3
   12ebc:	beq	12ed0 <__assert_fail@plt+0x1b00>
   12ec0:	movw	r1, #64360	; 0xfb68
   12ec4:	movt	r1, #1
   12ec8:	str	r1, [sp]
   12ecc:	bl	12cd4 <__assert_fail@plt+0x1904>
   12ed0:	ldr	r2, [r4, #144]	; 0x90
   12ed4:	asr	r3, r2, #31
   12ed8:	orrs	r1, r2, r3
   12edc:	beq	12ef0 <__assert_fail@plt+0x1b20>
   12ee0:	movw	r1, #64356	; 0xfb64
   12ee4:	movt	r1, #1
   12ee8:	str	r1, [sp]
   12eec:	bl	12cd4 <__assert_fail@plt+0x1904>
   12ef0:	movw	r3, #4512	; 0x11a0
   12ef4:	movt	r3, #3
   12ef8:	ldr	r1, [r3]
   12efc:	mov	r0, #10
   12f00:	add	sp, sp, #12
   12f04:	ldrd	r4, [sp]
   12f08:	ldr	lr, [sp, #8]
   12f0c:	add	sp, sp, #12
   12f10:	b	11340 <fputc@plt>
   12f14:	ldrd	r2, [r4, #112]	; 0x70
   12f18:	orrs	r1, r2, r3
   12f1c:	bne	12fa4 <__assert_fail@plt+0x1bd4>
   12f20:	ldrd	r2, [r4, #120]	; 0x78
   12f24:	orrs	r1, r2, r3
   12f28:	bne	12fac <__assert_fail@plt+0x1bdc>
   12f2c:	ldrd	r0, [r4, #128]	; 0x80
   12f30:	orrs	r1, r0, r1
   12f34:	bne	12fac <__assert_fail@plt+0x1bdc>
   12f38:	ldrd	r0, [r4, #136]	; 0x88
   12f3c:	orrs	r1, r0, r1
   12f40:	bne	12fac <__assert_fail@plt+0x1bdc>
   12f44:	ldr	r0, [r4, #144]	; 0x90
   12f48:	cmp	r0, #0
   12f4c:	bne	12fac <__assert_fail@plt+0x1bdc>
   12f50:	mov	r2, #5
   12f54:	movw	r1, #64296	; 0xfb28
   12f58:	movt	r1, #1
   12f5c:	bl	11130 <dcgettext@plt>
   12f60:	movw	r3, #4512	; 0x11a0
   12f64:	movt	r3, #3
   12f68:	ldr	r1, [r3]
   12f6c:	add	sp, sp, #12
   12f70:	ldrd	r4, [sp]
   12f74:	ldr	lr, [sp, #8]
   12f78:	add	sp, sp, #12
   12f7c:	b	11388 <fputs@plt>
   12f80:	movw	r1, #64312	; 0xfb38
   12f84:	movt	r1, #1
   12f88:	mov	r0, #0
   12f8c:	str	r1, [sp]
   12f90:	bl	12cd4 <__assert_fail@plt+0x1904>
   12f94:	ldrd	r2, [r4, #104]	; 0x68
   12f98:	orrs	r1, r2, r3
   12f9c:	beq	12e60 <__assert_fail@plt+0x1a90>
   12fa0:	b	12e50 <__assert_fail@plt+0x1a80>
   12fa4:	mov	r0, #0
   12fa8:	b	12e6c <__assert_fail@plt+0x1a9c>
   12fac:	mov	r0, #0
   12fb0:	b	12e80 <__assert_fail@plt+0x1ab0>
   12fb4:	mov	ip, #0
   12fb8:	strd	r4, [sp, #-16]!
   12fbc:	mov	r4, r2
   12fc0:	str	r6, [sp, #8]
   12fc4:	mov	r3, r0
   12fc8:	mov	r5, r1
   12fcc:	str	lr, [sp, #12]
   12fd0:	sub	sp, sp, #40	; 0x28
   12fd4:	movw	r2, #64368	; 0xfb70
   12fd8:	movt	r2, #1
   12fdc:	mov	r0, r4
   12fe0:	mov	r1, #100	; 0x64
   12fe4:	str	ip, [sp]
   12fe8:	str	ip, [sp, #4]
   12fec:	bl	1e0c4 <__assert_fail@plt+0xccf4>
   12ff0:	cmp	r0, #99	; 0x63
   12ff4:	movgt	r3, #0
   12ff8:	movle	r3, #1
   12ffc:	cmp	r5, #0
   13000:	moveq	r3, #0
   13004:	cmp	r3, #0
   13008:	beq	13018 <__assert_fail@plt+0x1c48>
   1300c:	ldr	r3, [r5, #176]	; 0xb0
   13010:	cmp	r3, #0
   13014:	bne	13030 <__assert_fail@plt+0x1c60>
   13018:	mov	r0, r4
   1301c:	add	sp, sp, #40	; 0x28
   13020:	ldrd	r4, [sp]
   13024:	ldr	r6, [sp, #8]
   13028:	add	sp, sp, #12
   1302c:	pop	{pc}		; (ldr pc, [sp], #4)
   13030:	mov	r6, r0
   13034:	add	r1, sp, #12
   13038:	ldr	r0, [r5, #24]
   1303c:	bl	12abc <__assert_fail@plt+0x16ec>
   13040:	movw	r2, #64396	; 0xfb8c
   13044:	movt	r2, #1
   13048:	add	r5, r4, r6
   1304c:	rsb	r1, r6, #100	; 0x64
   13050:	mvn	r3, #0
   13054:	str	r2, [sp]
   13058:	mov	r2, #1
   1305c:	str	r0, [sp, #4]
   13060:	mov	r0, r5
   13064:	bl	113c4 <__snprintf_chk@plt>
   13068:	b	13018 <__assert_fail@plt+0x1c48>
   1306c:	ldrb	r2, [r0, #188]	; 0xbc
   13070:	strd	r4, [sp, #-20]!	; 0xffffffec
   13074:	mov	r4, r0
   13078:	mov	r5, r1
   1307c:	strd	r6, [sp, #8]
   13080:	str	lr, [sp, #16]
   13084:	sub	sp, sp, #20
   13088:	cmp	r2, #0
   1308c:	beq	13140 <__assert_fail@plt+0x1d70>
   13090:	ldr	r2, [r0, #8]
   13094:	ldr	r1, [r0, #12]
   13098:	adds	r6, r2, #1
   1309c:	adc	r7, r1, #0
   130a0:	cmp	r7, #0
   130a4:	cmpeq	r6, #13
   130a8:	bhi	130f4 <__assert_fail@plt+0x1d24>
   130ac:	ldr	r3, [pc, #212]	; 13188 <__assert_fail@plt+0x1db8>
   130b0:	mov	ip, #11
   130b4:	movw	r2, #61376	; 0xefc0
   130b8:	movt	r2, #1
   130bc:	mov	r1, #100	; 0x64
   130c0:	mov	r0, r5
   130c4:	mla	r3, ip, r6, r3
   130c8:	bl	112b0 <snprintf@plt>
   130cc:	ldr	ip, [r4, #16]
   130d0:	cmp	ip, #6
   130d4:	bhi	13128 <__assert_fail@plt+0x1d58>
   130d8:	cmp	r0, #99	; 0x63
   130dc:	bhi	13128 <__assert_fail@plt+0x1d58>
   130e0:	clz	r3, r0
   130e4:	add	r4, r5, r0
   130e8:	lsr	r3, r3, #5
   130ec:	rsb	r1, r0, #100	; 0x64
   130f0:	b	1315c <__assert_fail@plt+0x1d8c>
   130f4:	movw	r0, #64404	; 0xfb94
   130f8:	movt	r0, #1
   130fc:	mvn	r3, #0
   13100:	str	r0, [sp]
   13104:	mov	r0, r5
   13108:	str	r2, [sp, #8]
   1310c:	mov	r2, #1
   13110:	str	r1, [sp, #12]
   13114:	mov	r1, #100	; 0x64
   13118:	bl	113c4 <__snprintf_chk@plt>
   1311c:	ldr	ip, [r4, #16]
   13120:	cmp	ip, #6
   13124:	bls	130e0 <__assert_fail@plt+0x1d10>
   13128:	mov	r0, r5
   1312c:	add	sp, sp, #20
   13130:	ldrd	r4, [sp]
   13134:	ldrd	r6, [sp, #8]
   13138:	add	sp, sp, #16
   1313c:	pop	{pc}		; (ldr pc, [sp], #4)
   13140:	strb	r2, [r1]
   13144:	ldr	ip, [r0, #16]
   13148:	cmp	ip, #6
   1314c:	bhi	13128 <__assert_fail@plt+0x1d58>
   13150:	mov	r4, r1
   13154:	mov	r3, #1
   13158:	mov	r1, #100	; 0x64
   1315c:	ldr	lr, [pc, #40]	; 1318c <__assert_fail@plt+0x1dbc>
   13160:	movw	r2, #61348	; 0xefa4
   13164:	movt	r2, #1
   13168:	add	r2, r3, r2
   1316c:	mov	r0, r4
   13170:	mvn	r3, #0
   13174:	add	ip, lr, ip, lsl #2
   13178:	stm	sp, {r2, ip}
   1317c:	mov	r2, #1
   13180:	bl	113c4 <__snprintf_chk@plt>
   13184:	b	13128 <__assert_fail@plt+0x1d58>
   13188:	andeq	pc, r1, r4, lsr r2	; <UNPREDICTABLE>
   1318c:	ldrdeq	pc, [r1], -r0
   13190:	mov	r2, #5
   13194:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13198:	mov	r4, r1
   1319c:	mov	r5, r0
   131a0:	movw	r1, #64276	; 0xfb14
   131a4:	movt	r1, #1
   131a8:	mov	r0, #0
   131ac:	strd	r6, [sp, #8]
   131b0:	strd	r8, [sp, #16]
   131b4:	strd	sl, [sp, #24]
   131b8:	str	lr, [sp, #32]
   131bc:	sub	sp, sp, #132	; 0x84
   131c0:	bl	11130 <dcgettext@plt>
   131c4:	mov	r1, r5
   131c8:	bl	12c70 <__assert_fail@plt+0x18a0>
   131cc:	ldr	r2, [r4, #156]	; 0x9c
   131d0:	cmp	r2, #0
   131d4:	bne	133e0 <__assert_fail@plt+0x2010>
   131d8:	ldrb	r1, [r4, #180]	; 0xb4
   131dc:	movw	r5, #4512	; 0x11a0
   131e0:	movt	r5, #3
   131e4:	ldrb	r3, [r4, #187]	; 0xbb
   131e8:	ldr	r8, [r5]
   131ec:	cmp	r1, r3
   131f0:	beq	13230 <__assert_fail@plt+0x1e60>
   131f4:	mov	r2, #5
   131f8:	movw	r1, #64460	; 0xfbcc
   131fc:	movt	r1, #1
   13200:	mov	r0, #0
   13204:	bl	11130 <dcgettext@plt>
   13208:	ldrd	r6, [r4, #40]	; 0x28
   1320c:	mov	r2, r0
   13210:	mov	r1, #1
   13214:	mov	r0, r8
   13218:	strd	r6, [sp]
   1321c:	bl	112ec <__fprintf_chk@plt>
   13220:	ldrb	r3, [r4, #180]	; 0xb4
   13224:	mov	r2, #1
   13228:	ldr	r8, [r5]
   1322c:	strb	r3, [r4, #187]	; 0xbb
   13230:	ldr	r3, [r4, #172]	; 0xac
   13234:	cmp	r3, #0
   13238:	beq	13248 <__assert_fail@plt+0x1e78>
   1323c:	ldrb	r3, [r4, #185]	; 0xb9
   13240:	cmp	r3, #0
   13244:	beq	13410 <__assert_fail@plt+0x2040>
   13248:	ldr	r3, [r4, #160]	; 0xa0
   1324c:	cmp	r3, #0
   13250:	beq	132c0 <__assert_fail@plt+0x1ef0>
   13254:	ldrb	r3, [r4, #183]	; 0xb7
   13258:	cmp	r3, #0
   1325c:	bne	132c0 <__assert_fail@plt+0x1ef0>
   13260:	cmp	r2, #0
   13264:	bne	13484 <__assert_fail@plt+0x20b4>
   13268:	mov	r2, #5
   1326c:	movw	r1, #64512	; 0xfc00
   13270:	movt	r1, #1
   13274:	mov	r0, #0
   13278:	bl	11130 <dcgettext@plt>
   1327c:	mov	r9, r0
   13280:	add	r1, sp, #28
   13284:	mov	r0, r4
   13288:	bl	1306c <__assert_fail@plt+0x1c9c>
   1328c:	ldrd	r6, [r4, #8]
   13290:	mov	r3, r0
   13294:	mov	r2, r9
   13298:	mov	r0, r8
   1329c:	mov	r1, #1
   132a0:	ldr	ip, [r4, #16]
   132a4:	strd	r6, [sp]
   132a8:	str	ip, [sp, #8]
   132ac:	bl	112ec <__fprintf_chk@plt>
   132b0:	ldr	r8, [r5]
   132b4:	mov	r3, #1
   132b8:	mov	r2, r3
   132bc:	strb	r3, [r4, #183]	; 0xb7
   132c0:	ldr	r3, [r4, #164]	; 0xa4
   132c4:	cmp	r3, #0
   132c8:	beq	13358 <__assert_fail@plt+0x1f88>
   132cc:	ldrb	r3, [r4, #184]	; 0xb8
   132d0:	cmp	r3, #0
   132d4:	bne	13358 <__assert_fail@plt+0x1f88>
   132d8:	ldr	lr, [r4, #168]	; 0xa8
   132dc:	movw	r3, #64412	; 0xfb9c
   132e0:	movt	r3, #1
   132e4:	movw	ip, #1768	; 0x6e8
   132e8:	movt	ip, #2
   132ec:	eor	r2, r2, #1
   132f0:	movw	r1, #64544	; 0xfc20
   132f4:	movt	r1, #1
   132f8:	mov	r0, r8
   132fc:	add	r2, r1, r2
   13300:	mov	r1, #1
   13304:	cmp	lr, #0
   13308:	movne	ip, r3
   1330c:	ldr	r3, [r4, #20]
   13310:	str	ip, [sp]
   13314:	bl	112ec <__fprintf_chk@plt>
   13318:	ldr	r3, [r4, #176]	; 0xb0
   1331c:	mov	r2, #1
   13320:	strb	r2, [r4, #184]	; 0xb8
   13324:	cmp	r3, #0
   13328:	bne	13498 <__assert_fail@plt+0x20c8>
   1332c:	ldrb	r3, [r4, #152]	; 0x98
   13330:	ldr	r8, [r5]
   13334:	cmp	r3, #0
   13338:	beq	133b8 <__assert_fail@plt+0x1fe8>
   1333c:	ldr	r6, [r4, #88]	; 0x58
   13340:	asr	r7, r6, #31
   13344:	mov	r1, r8
   13348:	mov	r0, #32
   1334c:	bl	11340 <fputc@plt>
   13350:	ldr	r8, [r5]
   13354:	b	1338c <__assert_fail@plt+0x1fbc>
   13358:	ldr	r3, [r4, #176]	; 0xb0
   1335c:	cmp	r3, #0
   13360:	beq	13370 <__assert_fail@plt+0x1fa0>
   13364:	ldrb	r3, [r4, #186]	; 0xba
   13368:	cmp	r3, #0
   1336c:	beq	134b8 <__assert_fail@plt+0x20e8>
   13370:	ldrb	r3, [r4, #152]	; 0x98
   13374:	cmp	r3, #0
   13378:	beq	133b8 <__assert_fail@plt+0x1fe8>
   1337c:	ldr	r6, [r4, #88]	; 0x58
   13380:	cmp	r2, #0
   13384:	asr	r7, r6, #31
   13388:	bne	13344 <__assert_fail@plt+0x1f74>
   1338c:	mov	r2, #5
   13390:	movw	r1, #64556	; 0xfc2c
   13394:	movt	r1, #1
   13398:	mov	r0, #0
   1339c:	bl	11130 <dcgettext@plt>
   133a0:	mov	r2, r0
   133a4:	mov	r1, #1
   133a8:	strd	r6, [sp]
   133ac:	mov	r0, r8
   133b0:	bl	112ec <__fprintf_chk@plt>
   133b4:	ldr	r8, [r5]
   133b8:	mov	r1, r8
   133bc:	mov	r0, #10
   133c0:	bl	11340 <fputc@plt>
   133c4:	add	sp, sp, #132	; 0x84
   133c8:	ldrd	r4, [sp]
   133cc:	ldrd	r6, [sp, #8]
   133d0:	ldrd	r8, [sp, #16]
   133d4:	ldrd	sl, [sp, #24]
   133d8:	add	sp, sp, #32
   133dc:	pop	{pc}		; (ldr pc, [sp], #4)
   133e0:	ldrb	r3, [r4, #182]	; 0xb6
   133e4:	movw	r5, #4512	; 0x11a0
   133e8:	movt	r5, #3
   133ec:	ldr	r8, [r5]
   133f0:	cmp	r3, #0
   133f4:	beq	1350c <__assert_fail@plt+0x213c>
   133f8:	ldrb	r2, [r4, #180]	; 0xb4
   133fc:	ldrb	r3, [r4, #187]	; 0xbb
   13400:	cmp	r2, r3
   13404:	moveq	r2, #0
   13408:	bne	131f4 <__assert_fail@plt+0x1e24>
   1340c:	b	13230 <__assert_fail@plt+0x1e60>
   13410:	mov	r0, r8
   13414:	ldrd	sl, [r4, #72]	; 0x48
   13418:	eor	r2, r2, #1
   1341c:	movw	r3, #64476	; 0xfbdc
   13420:	movt	r3, #1
   13424:	ldr	r6, [r4, #88]	; 0x58
   13428:	add	r2, r3, r2
   1342c:	mov	r1, #1
   13430:	ldrd	r8, [r4, #80]	; 0x50
   13434:	strd	sl, [sp]
   13438:	asr	r7, r6, #31
   1343c:	strd	r8, [sp, #8]
   13440:	strd	r6, [sp, #16]
   13444:	bl	112ec <__fprintf_chk@plt>
   13448:	ldr	r3, [r4, #92]	; 0x5c
   1344c:	cmp	r3, #0
   13450:	bne	1356c <__assert_fail@plt+0x219c>
   13454:	ldr	r1, [r4, #28]
   13458:	ldr	r8, [r5]
   1345c:	cmp	r1, #1
   13460:	beq	13590 <__assert_fail@plt+0x21c0>
   13464:	ldr	r3, [r4, #160]	; 0xa0
   13468:	mov	r2, #1
   1346c:	strb	r2, [r4, #185]	; 0xb9
   13470:	cmp	r3, #0
   13474:	beq	132c0 <__assert_fail@plt+0x1ef0>
   13478:	ldrb	r2, [r4, #183]	; 0xb7
   1347c:	cmp	r2, #0
   13480:	bne	132c0 <__assert_fail@plt+0x1ef0>
   13484:	mov	r1, r8
   13488:	mov	r0, #32
   1348c:	bl	11340 <fputc@plt>
   13490:	ldr	r8, [r5]
   13494:	b	13268 <__assert_fail@plt+0x1e98>
   13498:	ldrb	r3, [r4, #186]	; 0xba
   1349c:	ldr	r8, [r5]
   134a0:	cmp	r3, #0
   134a4:	beq	13584 <__assert_fail@plt+0x21b4>
   134a8:	ldrb	r3, [r4, #152]	; 0x98
   134ac:	cmp	r3, #0
   134b0:	beq	133b8 <__assert_fail@plt+0x1fe8>
   134b4:	b	1333c <__assert_fail@plt+0x1f6c>
   134b8:	eor	r2, r2, #1
   134bc:	movw	r6, #64420	; 0xfba4
   134c0:	movt	r6, #1
   134c4:	add	r6, r2, r6
   134c8:	add	r1, sp, #28
   134cc:	ldr	r0, [r4, #24]
   134d0:	bl	12abc <__assert_fail@plt+0x16ec>
   134d4:	mov	r3, r0
   134d8:	mov	r2, r6
   134dc:	mov	r0, r8
   134e0:	mov	r1, #1
   134e4:	bl	112ec <__fprintf_chk@plt>
   134e8:	ldrb	r3, [r4, #152]	; 0x98
   134ec:	mov	r2, #1
   134f0:	strb	r2, [r4, #186]	; 0xba
   134f4:	cmp	r3, #0
   134f8:	beq	133b4 <__assert_fail@plt+0x1fe4>
   134fc:	ldr	r6, [r4, #88]	; 0x58
   13500:	ldr	r8, [r5]
   13504:	asr	r7, r6, #31
   13508:	b	13344 <__assert_fail@plt+0x1f74>
   1350c:	ldrd	r6, [r4, #64]	; 0x40
   13510:	mov	r0, r8
   13514:	mov	r1, #1
   13518:	movw	r2, #64428	; 0xfbac
   1351c:	movt	r2, #1
   13520:	ldrd	r8, [r4, #40]	; 0x28
   13524:	strd	r6, [sp, #16]
   13528:	ldrd	r6, [r4, #56]	; 0x38
   1352c:	strd	r8, [sp]
   13530:	strd	r6, [sp, #8]
   13534:	bl	112ec <__fprintf_chk@plt>
   13538:	ldrb	r1, [r4, #180]	; 0xb4
   1353c:	mov	r2, #1
   13540:	ldrb	r3, [r4, #187]	; 0xbb
   13544:	strb	r2, [r4, #182]	; 0xb6
   13548:	cmp	r1, r3
   1354c:	beq	13564 <__assert_fail@plt+0x2194>
   13550:	mov	r0, #32
   13554:	ldr	r1, [r5]
   13558:	bl	11340 <fputc@plt>
   1355c:	ldr	r8, [r5]
   13560:	b	131f4 <__assert_fail@plt+0x1e24>
   13564:	ldr	r8, [r5]
   13568:	b	13230 <__assert_fail@plt+0x1e60>
   1356c:	movw	r2, #64500	; 0xfbf4
   13570:	movt	r2, #1
   13574:	ldr	r0, [r5]
   13578:	mov	r1, #1
   1357c:	bl	112ec <__fprintf_chk@plt>
   13580:	b	13454 <__assert_fail@plt+0x2084>
   13584:	movw	r6, #64420	; 0xfba4
   13588:	movt	r6, #1
   1358c:	b	134c8 <__assert_fail@plt+0x20f8>
   13590:	mov	r3, r8
   13594:	movw	r0, #64508	; 0xfbfc
   13598:	movt	r0, #1
   1359c:	mov	r2, #2
   135a0:	bl	11184 <fwrite@plt>
   135a4:	ldr	r8, [r5]
   135a8:	b	13464 <__assert_fail@plt+0x2094>
   135ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135b0:	mov	r3, #0
   135b4:	mov	r5, #38	; 0x26
   135b8:	strd	r6, [sp, #8]
   135bc:	mov	r7, r3
   135c0:	cmn	r5, #93	; 0x5d
   135c4:	strd	r8, [sp, #16]
   135c8:	mov	r4, r5
   135cc:	movw	r9, #61380	; 0xefc4
   135d0:	movt	r9, #1
   135d4:	strd	sl, [sp, #24]
   135d8:	str	lr, [sp, #32]
   135dc:	sub	sp, sp, #1536	; 0x600
   135e0:	sub	sp, sp, #4
   135e4:	add	r8, sp, #264	; 0x108
   135e8:	add	sl, sp, #416	; 0x1a0
   135ec:	str	r0, [sp, #28]
   135f0:	strh	r3, [r8]
   135f4:	str	r3, [sp, #76]	; 0x4c
   135f8:	mov	r3, #51712	; 0xca00
   135fc:	movt	r3, #15258	; 0x3b9a
   13600:	str	r3, [sp, #96]	; 0x60
   13604:	mvn	r3, #1
   13608:	mov	fp, r3
   1360c:	beq	13718 <__assert_fail@plt+0x2348>
   13610:	cmn	fp, #2
   13614:	beq	13a58 <__assert_fail@plt+0x2688>
   13618:	cmp	fp, #0
   1361c:	ble	13a44 <__assert_fail@plt+0x2674>
   13620:	movw	r3, #277	; 0x115
   13624:	cmp	fp, r3
   13628:	ble	13c68 <__assert_fail@plt+0x2898>
   1362c:	add	r4, r5, #2
   13630:	mov	r1, #2
   13634:	cmp	r4, #112	; 0x70
   13638:	bhi	13718 <__assert_fail@plt+0x2348>
   1363c:	add	r4, r9, r4
   13640:	movw	r3, #2260	; 0x8d4
   13644:	ldrsb	r3, [r4, r3]
   13648:	cmp	r3, r1
   1364c:	bne	13718 <__assert_fail@plt+0x2348>
   13650:	ldrb	r7, [r4, #2376]	; 0x948
   13654:	cmp	r7, #0
   13658:	beq	13dc8 <__assert_fail@plt+0x29f8>
   1365c:	ldr	r3, [sp, #76]	; 0x4c
   13660:	add	r1, sp, #312	; 0x138
   13664:	add	ip, sl, #56	; 0x38
   13668:	mvn	fp, #1
   1366c:	str	r8, [sp, #32]
   13670:	ldrd	r4, [sp, #88]	; 0x58
   13674:	cmp	r3, #0
   13678:	subne	r3, r3, #1
   1367c:	strne	r3, [sp, #76]	; 0x4c
   13680:	ldr	r3, [sp, #100]	; 0x64
   13684:	str	r3, [sp, #320]	; 0x140
   13688:	add	r3, sp, #304	; 0x130
   1368c:	ldrd	r2, [r3]
   13690:	strd	r4, [r1]
   13694:	add	r1, sp, #320	; 0x140
   13698:	ldrd	r0, [r1]
   1369c:	strd	r2, [sl, #56]	; 0x38
   136a0:	add	r3, sp, #328	; 0x148
   136a4:	ldrd	r2, [r3]
   136a8:	strd	r4, [sl, #64]	; 0x40
   136ac:	strd	r0, [sl, #72]	; 0x48
   136b0:	add	r1, sp, #336	; 0x150
   136b4:	ldrd	r0, [r1]
   136b8:	strd	r2, [sl, #80]	; 0x50
   136bc:	add	r3, sp, #344	; 0x158
   136c0:	ldrd	r2, [r3]
   136c4:	strd	r0, [sl, #88]	; 0x58
   136c8:	add	r1, sp, #352	; 0x160
   136cc:	ldrd	r0, [r1]
   136d0:	strd	r2, [sl, #96]	; 0x60
   136d4:	mov	sl, ip
   136d8:	strd	r0, [ip, #48]	; 0x30
   136dc:	ldr	r2, [sp, #32]
   136e0:	add	r3, sp, #272	; 0x110
   136e4:	add	r3, r3, #30
   136e8:	add	r8, r2, #2
   136ec:	strh	r7, [r2, #2]
   136f0:	cmp	r8, r3
   136f4:	bcs	15d00 <__assert_fail@plt+0x4930>
   136f8:	cmp	r7, #12
   136fc:	beq	15d08 <__assert_fail@plt+0x4938>
   13700:	add	r3, r9, r7
   13704:	add	r3, r3, #808	; 0x328
   13708:	ldrsb	r5, [r3]
   1370c:	cmn	r5, #93	; 0x5d
   13710:	mov	r4, r5
   13714:	bne	13610 <__assert_fail@plt+0x2240>
   13718:	add	r3, r9, r7
   1371c:	ldrb	ip, [r3, #2492]	; 0x9bc
   13720:	cmp	ip, #0
   13724:	bne	137d4 <__assert_fail@plt+0x2404>
   13728:	ldr	r3, [sp, #76]	; 0x4c
   1372c:	cmp	r3, #3
   13730:	bne	13740 <__assert_fail@plt+0x2370>
   13734:	cmp	fp, #0
   13738:	bgt	13a50 <__assert_fail@plt+0x2680>
   1373c:	beq	13a20 <__assert_fail@plt+0x2650>
   13740:	movw	r0, #2260	; 0x8d4
   13744:	add	r1, sp, #264	; 0x108
   13748:	b	1375c <__assert_fail@plt+0x238c>
   1374c:	cmp	r8, r1
   13750:	sub	sl, sl, #56	; 0x38
   13754:	beq	13a20 <__assert_fail@plt+0x2650>
   13758:	ldrsh	r7, [r8, #-2]!
   1375c:	add	r7, r9, r7
   13760:	add	r7, r7, #808	; 0x328
   13764:	ldrsb	r3, [r7]
   13768:	cmn	r3, #93	; 0x5d
   1376c:	add	r2, r3, #1
   13770:	beq	1374c <__assert_fail@plt+0x237c>
   13774:	cmp	r2, #112	; 0x70
   13778:	add	r3, r9, r2
   1377c:	bhi	1374c <__assert_fail@plt+0x237c>
   13780:	ldrsb	r2, [r3, r0]
   13784:	cmp	r2, #1
   13788:	bne	1374c <__assert_fail@plt+0x237c>
   1378c:	ldrb	r7, [r3, #2376]	; 0x948
   13790:	cmp	r7, #0
   13794:	beq	1374c <__assert_fail@plt+0x237c>
   13798:	ldrd	r4, [sp, #88]	; 0x58
   1379c:	add	r1, sp, #312	; 0x138
   137a0:	add	ip, sl, #56	; 0x38
   137a4:	str	r8, [sp, #32]
   137a8:	ldr	r3, [sp, #100]	; 0x64
   137ac:	str	r3, [sp, #320]	; 0x140
   137b0:	add	r3, sp, #304	; 0x130
   137b4:	ldrd	r2, [r3]
   137b8:	strd	r4, [r1]
   137bc:	add	r1, sp, #320	; 0x140
   137c0:	ldrd	r0, [r1]
   137c4:	strd	r2, [sl, #56]	; 0x38
   137c8:	mov	r3, #3
   137cc:	str	r3, [sp, #76]	; 0x4c
   137d0:	b	136a0 <__assert_fail@plt+0x22d0>
   137d4:	add	r3, r9, ip
   137d8:	add	r5, sp, #368	; 0x170
   137dc:	ldrb	r2, [r3, #2608]	; 0xa30
   137e0:	mov	r4, r5
   137e4:	rsb	r1, r2, #1
   137e8:	rsb	r1, r1, r1, lsl #3
   137ec:	lsl	r1, r1, #3
   137f0:	ldrd	r6, [sl, r1]
   137f4:	add	r3, sl, r1
   137f8:	ldrd	r0, [r3, #8]
   137fc:	ldr	lr, [r3, #16]
   13800:	strd	r6, [r5, #-8]
   13804:	ldr	r7, [r3, #20]
   13808:	strd	r0, [r4], #-8
   1380c:	ldr	r6, [r3, #24]
   13810:	strd	r0, [sp, #44]	; 0x2c
   13814:	ldr	r1, [r3, #28]
   13818:	str	lr, [r4, #16]
   1381c:	str	r7, [r4, #20]
   13820:	str	r6, [r4, #24]
   13824:	str	r7, [sp, #56]	; 0x38
   13828:	ldr	r7, [r3, #32]
   1382c:	str	r6, [sp, #68]	; 0x44
   13830:	ldr	r6, [r3, #40]	; 0x28
   13834:	str	r1, [r4, #28]
   13838:	ldr	r0, [r3, #44]	; 0x2c
   1383c:	str	r7, [r4, #32]
   13840:	str	r6, [sp, #16]
   13844:	str	r6, [r4, #40]	; 0x28
   13848:	str	lr, [sp, #52]	; 0x34
   1384c:	sub	lr, ip, #4
   13850:	str	r7, [sp, #60]	; 0x3c
   13854:	str	r1, [sp, #72]	; 0x48
   13858:	ldr	r1, [r3, #36]	; 0x24
   1385c:	ldrd	r6, [r3, #48]	; 0x30
   13860:	ldr	r3, [r3, #48]	; 0x30
   13864:	str	r1, [r4, #36]	; 0x24
   13868:	str	r3, [sp, #40]	; 0x28
   1386c:	str	r1, [sp, #64]	; 0x40
   13870:	str	r0, [sp, #20]
   13874:	str	r0, [r4, #44]	; 0x2c
   13878:	strd	r6, [r4, #48]	; 0x30
   1387c:	cmp	lr, #87	; 0x57
   13880:	ldrls	pc, [pc, lr, lsl #2]
   13884:	b	16508 <__assert_fail@plt+0x5138>
   13888:	ldrdeq	r4, [r1], -ip
   1388c:	andeq	r6, r1, r8, lsl #10
   13890:	andeq	r6, r1, r8, lsl #10
   13894:	andeq	r4, r1, ip, ror r5
   13898:	andeq	r4, r1, r4, lsl #14
   1389c:	ldrdeq	r4, [r1], -r0
   138a0:	muleq	r1, ip, r6
   138a4:	andeq	r4, r1, r8, asr #12
   138a8:	andeq	r4, r1, r8, ror #17
   138ac:	ldrdeq	r4, [r1], -ip
   138b0:	muleq	r1, ip, r8
   138b4:	andeq	r4, r1, r8, asr r8
   138b8:	andeq	r6, r1, r8, lsl #10
   138bc:	andeq	r6, r1, r8, lsl #10
   138c0:	andeq	r4, r1, ip, lsl #16
   138c4:	andeq	r4, r1, r8, asr #15
   138c8:	andeq	r4, r1, r4, lsl #15
   138cc:	andeq	r6, r1, r8, lsl #10
   138d0:	andeq	r4, r1, r8, lsr r7
   138d4:	andeq	r5, r1, ip, lsl #18
   138d8:	andeq	r5, r1, r0, asr #17
   138dc:	andeq	r6, r1, r8, lsl #10
   138e0:	andeq	r6, r1, r8, lsl #10
   138e4:	strdeq	r5, [r1], -r0
   138e8:	strdeq	r5, [r1], -r4
   138ec:	andeq	r5, r1, r0, asr #23
   138f0:	muleq	r1, ip, fp
   138f4:	andeq	r5, r1, r0, ror fp
   138f8:	andeq	r5, r1, r8, lsl #4
   138fc:	andeq	r5, r1, r0, lsl #1
   13900:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   13904:	strdeq	r4, [r1], -r8
   13908:	andeq	r4, r1, ip, asr #19
   1390c:	muleq	r1, ip, r9
   13910:	andeq	r4, r1, r8, ror #18
   13914:	andeq	r4, r1, ip, asr r9
   13918:	andeq	r4, r1, ip, lsl r9
   1391c:	andeq	r4, r1, r8, ror sp
   13920:	andeq	r4, r1, r8, lsl #26
   13924:	andeq	r3, r1, r8, ror #19
   13928:	muleq	r1, r4, ip
   1392c:	andeq	r4, r1, r4, ror #24
   13930:	andeq	r4, r1, r0, lsr ip
   13934:	andeq	r4, r1, r0, lsl #24
   13938:			; <UNDEFINED> instruction: 0x00014bb4
   1393c:	andeq	r6, r1, r8, lsl #10
   13940:	andeq	r4, r1, ip, lsl #20
   13944:	andeq	r5, r1, r4, lsr r4
   13948:	andeq	r3, r1, r8, lsr #31
   1394c:	andeq	r3, r1, r8, lsr #31
   13950:	andeq	r4, r1, ip, lsr #23
   13954:	andeq	r4, r1, ip, asr #22
   13958:	andeq	r4, r1, r8, ror #21
   1395c:	muleq	r1, r4, sl
   13960:	andeq	r4, r1, r4, lsl r5
   13964:	andeq	r4, r1, r4, lsr #9
   13968:	andeq	r4, r1, r0, lsr #8
   1396c:	andeq	r4, r1, r0, lsl #7
   13970:	andeq	r4, r1, r0, lsr #6
   13974:	andeq	r4, r1, ip, asr #5
   13978:	andeq	r4, r1, r4, ror #4
   1397c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13980:	andeq	r4, r1, ip, lsl #3
   13984:	muleq	r1, ip, r7
   13988:	andeq	r5, r1, ip, lsr #14
   1398c:	andeq	r4, r1, ip, lsr #2
   13990:	strdeq	r5, [r1], -r0
   13994:	andeq	r3, r1, r0, asr #30
   13998:	andeq	r3, r1, r0, asr #30
   1399c:			; <UNDEFINED> instruction: 0x000153b4
   139a0:	andeq	r6, r1, r8, lsl #10
   139a4:	andeq	r5, r1, r4, asr r3
   139a8:	strdeq	r5, [r1], -ip
   139ac:	andeq	r5, r1, ip, asr sl
   139b0:	andeq	r5, r1, r8, ror #19
   139b4:	andeq	r5, r1, r4, ror r9
   139b8:	andeq	r5, r1, r8, ror r6
   139bc:	andeq	r5, r1, r8, lsr #12
   139c0:	andeq	r6, r1, r8, lsl #10
   139c4:	andeq	r6, r1, r8, lsl #10
   139c8:	andeq	r6, r1, r8, lsl #10
   139cc:	ldrdeq	r5, [r1], -r4
   139d0:	andeq	r6, r1, r8, lsl #10
   139d4:	andeq	r4, r1, r8, lsr pc
   139d8:	andeq	r4, r1, r0, lsl #30
   139dc:	andeq	r4, r1, ip, lsl #27
   139e0:	andeq	r5, r1, r4, lsl r4
   139e4:	andeq	r5, r1, r0, asr r9
   139e8:	ldrd	r0, [sl, #-104]	; 0xffffff98
   139ec:	mov	ip, #0
   139f0:	ldr	lr, [sp, #28]
   139f4:	ldrd	r6, [sl, #-56]	; 0xffffffc8
   139f8:	ldrd	r2, [sl, #8]
   139fc:	strd	r0, [lr, #64]	; 0x40
   13a00:	ldr	r1, [sp, #28]
   13a04:	rsbs	r2, r2, #0
   13a08:	strd	r6, [lr, #56]	; 0x38
   13a0c:	rscs	r3, r3, #0
   13a10:	movvs	ip, #1
   13a14:	cmp	ip, #0
   13a18:	strd	r2, [r1, #40]	; 0x28
   13a1c:	beq	14ce4 <__assert_fail@plt+0x3914>
   13a20:	mov	r0, #1
   13a24:	add	sp, sp, #1536	; 0x600
   13a28:	add	sp, sp, #4
   13a2c:	ldrd	r4, [sp]
   13a30:	ldrd	r6, [sp, #8]
   13a34:	ldrd	r8, [sp, #16]
   13a38:	ldrd	sl, [sp, #24]
   13a3c:	add	sp, sp, #32
   13a40:	pop	{pc}		; (ldr pc, [sp], #4)
   13a44:	mov	fp, #0
   13a48:	mov	r1, fp
   13a4c:	b	13634 <__assert_fail@plt+0x2264>
   13a50:	mvn	fp, #1
   13a54:	b	13740 <__assert_fail@plt+0x2370>
   13a58:	ldr	lr, [sp, #28]
   13a5c:	ldr	r2, [lr]
   13a60:	ldrb	r3, [r2]
   13a64:	cmp	r3, #9
   13a68:	bcc	13a90 <__assert_fail@plt+0x26c0>
   13a6c:	cmp	r3, #13
   13a70:	bls	13a7c <__assert_fail@plt+0x26ac>
   13a74:	cmp	r3, #32
   13a78:	bne	13a90 <__assert_fail@plt+0x26c0>
   13a7c:	add	r2, r2, #1
   13a80:	str	r2, [lr]
   13a84:	ldrb	r3, [r2]
   13a88:	cmp	r3, #9
   13a8c:	bcs	13a6c <__assert_fail@plt+0x269c>
   13a90:	sub	ip, r3, #48	; 0x30
   13a94:	sub	r1, r3, #43	; 0x2b
   13a98:	cmp	ip, #9
   13a9c:	and	r1, r1, #253	; 0xfd
   13aa0:	bls	13b14 <__assert_fail@plt+0x2744>
   13aa4:	cmp	r1, #0
   13aa8:	beq	13c90 <__assert_fail@plt+0x28c0>
   13aac:	cmp	r3, #65	; 0x41
   13ab0:	bcc	13ac8 <__assert_fail@plt+0x26f8>
   13ab4:	cmp	r3, #90	; 0x5a
   13ab8:	bls	13db8 <__assert_fail@plt+0x29e8>
   13abc:	sub	r1, r3, #97	; 0x61
   13ac0:	cmp	r1, #25
   13ac4:	bls	13ce8 <__assert_fail@plt+0x2918>
   13ac8:	cmp	r3, #40	; 0x28
   13acc:	bne	164a8 <__assert_fail@plt+0x50d8>
   13ad0:	mov	r3, #0
   13ad4:	b	13af8 <__assert_fail@plt+0x2728>
   13ad8:	cmp	r1, #40	; 0x28
   13adc:	addeq	r3, r3, #1
   13ae0:	beq	13aec <__assert_fail@plt+0x271c>
   13ae4:	cmp	r1, #41	; 0x29
   13ae8:	subeq	r3, r3, #1
   13aec:	cmp	r3, #0
   13af0:	beq	15cf4 <__assert_fail@plt+0x4924>
   13af4:	mov	r2, r0
   13af8:	add	r0, r2, #1
   13afc:	str	r0, [lr]
   13b00:	ldrb	r1, [r0, #-1]
   13b04:	cmp	r1, #0
   13b08:	bne	13ad8 <__assert_fail@plt+0x2708>
   13b0c:	mov	fp, r1
   13b10:	b	13634 <__assert_fail@plt+0x2264>
   13b14:	sub	r0, r3, #45	; 0x2d
   13b18:	cmp	r1, #0
   13b1c:	clz	r0, r0
   13b20:	lsr	r0, r0, #5
   13b24:	bne	15d58 <__assert_fail@plt+0x4988>
   13b28:	cmp	r0, #0
   13b2c:	moveq	r6, #1
   13b30:	mvnne	r6, #0
   13b34:	add	r2, r2, #1
   13b38:	str	r2, [lr]
   13b3c:	ldrb	r3, [r2]
   13b40:	cmp	r3, #9
   13b44:	bcc	13b58 <__assert_fail@plt+0x2788>
   13b48:	cmp	r3, #13
   13b4c:	bls	13b34 <__assert_fail@plt+0x2764>
   13b50:	cmp	r3, #32
   13b54:	beq	13b34 <__assert_fail@plt+0x2764>
   13b58:	sub	ip, r3, #48	; 0x30
   13b5c:	cmp	ip, #9
   13b60:	bhi	13a64 <__assert_fail@plt+0x2694>
   13b64:	mov	r4, #0
   13b68:	mov	fp, #10
   13b6c:	cmn	r6, #1
   13b70:	rsbeq	ip, r3, #48	; 0x30
   13b74:	add	r3, r2, #1
   13b78:	adds	lr, r4, ip
   13b7c:	str	r3, [sp, #16]
   13b80:	bvs	13c84 <__assert_fail@plt+0x28b4>
   13b84:	ldrb	r3, [r2, #1]
   13b88:	smull	r0, r1, lr, fp
   13b8c:	mov	r4, r0
   13b90:	sub	ip, r3, #48	; 0x30
   13b94:	cmp	ip, #9
   13b98:	bls	13c78 <__assert_fail@plt+0x28a8>
   13b9c:	and	r3, r3, #253	; 0xfd
   13ba0:	cmp	r3, #44	; 0x2c
   13ba4:	bne	13ca0 <__assert_fail@plt+0x28d0>
   13ba8:	ldr	r3, [sp, #16]
   13bac:	ldrb	r3, [r3, #1]
   13bb0:	sub	r3, r3, #48	; 0x30
   13bb4:	cmp	r3, #9
   13bb8:	bhi	13ca0 <__assert_fail@plt+0x28d0>
   13bbc:	ldrb	ip, [r2, #3]
   13bc0:	mov	r0, #8
   13bc4:	add	r2, r2, #3
   13bc8:	sub	r1, ip, #48	; 0x30
   13bcc:	add	r3, r3, r3, lsl #2
   13bd0:	cmp	r1, #9
   13bd4:	mov	r4, r1
   13bd8:	lsl	r3, r3, #1
   13bdc:	bhi	13bf4 <__assert_fail@plt+0x2824>
   13be0:	ldrb	ip, [r2, #1]
   13be4:	add	r3, r3, r1
   13be8:	add	r2, r2, #1
   13bec:	sub	r1, ip, #48	; 0x30
   13bf0:	mov	r4, r1
   13bf4:	subs	r0, r0, #1
   13bf8:	bne	13bcc <__assert_fail@plt+0x27fc>
   13bfc:	cmn	r6, #1
   13c00:	beq	140f4 <__assert_fail@plt+0x2d24>
   13c04:	cmp	r4, #9
   13c08:	bhi	13c1c <__assert_fail@plt+0x284c>
   13c0c:	ldrb	r1, [r2, #1]!
   13c10:	sub	r1, r1, #48	; 0x30
   13c14:	cmp	r1, #9
   13c18:	bls	13c0c <__assert_fail@plt+0x283c>
   13c1c:	adds	r1, r3, #0
   13c20:	movne	r1, #1
   13c24:	ands	r1, r1, r6, lsr #31
   13c28:	bne	15c28 <__assert_fail@plt+0x4858>
   13c2c:	cmp	r6, #0
   13c30:	movw	fp, #277	; 0x115
   13c34:	str	lr, [sp, #304]	; 0x130
   13c38:	str	r3, [sp, #308]	; 0x134
   13c3c:	moveq	r1, #22
   13c40:	movne	r1, #21
   13c44:	ldr	r3, [sp, #28]
   13c48:	movne	fp, #276	; 0x114
   13c4c:	str	r2, [r3]
   13c50:	b	13c70 <__assert_fail@plt+0x28a0>
   13c54:	mov	r2, #0
   13c58:	mov	r3, #0
   13c5c:	add	r1, sp, #304	; 0x130
   13c60:	movw	fp, #259	; 0x103
   13c64:	strd	r2, [r1]
   13c68:	add	r3, r9, fp
   13c6c:	ldrb	r1, [r3, #1980]	; 0x7bc
   13c70:	add	r4, r5, r1
   13c74:	b	13634 <__assert_fail@plt+0x2264>
   13c78:	cmp	r1, r0, asr #31
   13c7c:	ldr	r2, [sp, #16]
   13c80:	beq	13b6c <__assert_fail@plt+0x279c>
   13c84:	mov	r1, #2
   13c88:	mov	fp, #63	; 0x3f
   13c8c:	b	13c70 <__assert_fail@plt+0x28a0>
   13c90:	sub	r0, r3, #45	; 0x2d
   13c94:	clz	r0, r0
   13c98:	lsr	r0, r0, #5
   13c9c:	b	13b28 <__assert_fail@plt+0x2758>
   13ca0:	ldr	r0, [sp, #16]
   13ca4:	lsr	r2, r6, #31
   13ca8:	cmp	r6, #0
   13cac:	movw	r1, #274	; 0x112
   13cb0:	movw	fp, #275	; 0x113
   13cb4:	ldr	r3, [sp, #28]
   13cb8:	movne	fp, r1
   13cbc:	moveq	r1, #20
   13cc0:	strb	r2, [sp, #304]	; 0x130
   13cc4:	mov	r2, lr
   13cc8:	movne	r1, #19
   13ccc:	ldr	ip, [r3]
   13cd0:	str	r0, [r3]
   13cd4:	asr	r3, lr, #31
   13cd8:	strd	r2, [sp, #88]	; 0x58
   13cdc:	sub	r3, r0, ip
   13ce0:	str	r3, [sp, #100]	; 0x64
   13ce4:	b	13c70 <__assert_fail@plt+0x28a0>
   13ce8:	add	r6, sp, #244	; 0xf4
   13cec:	add	ip, sp, #256	; 0x100
   13cf0:	mov	r1, r6
   13cf4:	add	ip, ip, #7
   13cf8:	mov	r0, r1
   13cfc:	cmp	r1, ip
   13d00:	add	r2, r2, #1
   13d04:	strbcc	r3, [r0], #1
   13d08:	movcc	r1, r0
   13d0c:	ldr	r3, [sp, #28]
   13d10:	str	r2, [r3]
   13d14:	ldrb	r3, [r2]
   13d18:	cmp	r3, #65	; 0x41
   13d1c:	sub	r0, r3, #97	; 0x61
   13d20:	bcc	13d34 <__assert_fail@plt+0x2964>
   13d24:	cmp	r3, #90	; 0x5a
   13d28:	bls	13cf8 <__assert_fail@plt+0x2928>
   13d2c:	cmp	r0, #25
   13d30:	bls	13cf8 <__assert_fail@plt+0x2928>
   13d34:	cmp	r3, #46	; 0x2e
   13d38:	beq	13cf8 <__assert_fail@plt+0x2928>
   13d3c:	mov	r3, #0
   13d40:	strb	r3, [r1]
   13d44:	ldrb	r3, [sp, #244]	; 0xf4
   13d48:	cmp	r3, #0
   13d4c:	movne	r2, r6
   13d50:	beq	13d74 <__assert_fail@plt+0x29a4>
   13d54:	sub	r1, r3, #97	; 0x61
   13d58:	sub	r0, r3, #32
   13d5c:	cmp	r1, #25
   13d60:	uxtbls	r3, r0
   13d64:	strb	r3, [r2]
   13d68:	ldrb	r3, [r2, #1]!
   13d6c:	cmp	r3, #0
   13d70:	bne	13d54 <__assert_fail@plt+0x2984>
   13d74:	movw	r1, #64580	; 0xfc44
   13d78:	movt	r1, #1
   13d7c:	ldr	fp, [pc, #4076]	; 14d70 <__assert_fail@plt+0x39a0>
   13d80:	b	13d90 <__assert_fail@plt+0x29c0>
   13d84:	ldr	r1, [fp, #12]!
   13d88:	cmp	r1, #0
   13d8c:	beq	15c54 <__assert_fail@plt+0x4884>
   13d90:	mov	r0, r6
   13d94:	bl	110a0 <strcmp@plt>
   13d98:	cmp	r0, #0
   13d9c:	bne	13d84 <__assert_fail@plt+0x29b4>
   13da0:	ldr	r2, [fp, #8]
   13da4:	ldr	fp, [fp, #4]
   13da8:	asr	r3, r2, #31
   13dac:	add	r1, sp, #304	; 0x130
   13db0:	strd	r2, [r1]
   13db4:	b	13618 <__assert_fail@plt+0x2248>
   13db8:	add	ip, sp, #256	; 0x100
   13dbc:	sub	r6, ip, #12
   13dc0:	mov	r1, r6
   13dc4:	b	13cf4 <__assert_fail@plt+0x2924>
   13dc8:	ldrd	r2, [sl, #56]	; 0x38
   13dcc:	add	r5, sp, #368	; 0x170
   13dd0:	add	lr, sl, #56	; 0x38
   13dd4:	mov	r4, r5
   13dd8:	str	r8, [sp, #32]
   13ddc:	mvn	ip, #27
   13de0:	ldrd	r0, [sl, #64]	; 0x40
   13de4:	str	sl, [sp, #80]	; 0x50
   13de8:	strd	r2, [r5, #-8]
   13dec:	ldrd	r2, [sl, #80]	; 0x50
   13df0:	strd	r0, [r4], #-8
   13df4:	ldrd	r0, [sl, #88]	; 0x58
   13df8:	strd	r2, [sp, #16]
   13dfc:	ldrd	r2, [sl, #72]	; 0x48
   13e00:	strd	r2, [r4, #16]
   13e04:	ldrd	r2, [sl, #96]	; 0x60
   13e08:	strd	r0, [r4, #32]
   13e0c:	ldr	r1, [sl, #64]	; 0x40
   13e10:	strd	r2, [r4, #40]	; 0x28
   13e14:	ldrd	r2, [sp, #16]
   13e18:	str	r1, [sp, #44]	; 0x2c
   13e1c:	ldr	r1, [sl, #68]	; 0x44
   13e20:	strd	r2, [r4, #24]
   13e24:	ldrd	r2, [sl, #104]	; 0x68
   13e28:	str	r1, [sp, #48]	; 0x30
   13e2c:	strd	r2, [r4, #48]	; 0x30
   13e30:	ldr	r3, [sl, #72]	; 0x48
   13e34:	str	r3, [sp, #52]	; 0x34
   13e38:	ldr	r3, [sl, #76]	; 0x4c
   13e3c:	str	r3, [sp, #56]	; 0x38
   13e40:	ldr	r3, [sl, #80]	; 0x50
   13e44:	str	r3, [sp, #68]	; 0x44
   13e48:	ldr	r3, [sl, #84]	; 0x54
   13e4c:	str	r3, [sp, #72]	; 0x48
   13e50:	ldr	r3, [sl, #88]	; 0x58
   13e54:	str	r3, [sp, #60]	; 0x3c
   13e58:	ldr	r3, [sl, #92]	; 0x5c
   13e5c:	str	r3, [sp, #64]	; 0x40
   13e60:	ldrd	r2, [sl, #96]	; 0x60
   13e64:	strd	r2, [sp, #16]
   13e68:	ldr	r3, [sl, #104]	; 0x68
   13e6c:	str	r3, [sp, #40]	; 0x28
   13e70:	ldr	r3, [sp, #32]
   13e74:	ldr	r0, [sp, #80]	; 0x50
   13e78:	ldrsh	r1, [r3]
   13e7c:	ldr	r3, [sp, #40]	; 0x28
   13e80:	add	sl, r0, #56	; 0x38
   13e84:	add	r7, r1, r7
   13e88:	cmp	r7, #112	; 0x70
   13e8c:	str	r3, [sp, #408]	; 0x198
   13e90:	ldr	r3, [sp, #44]	; 0x2c
   13e94:	str	r3, [r5]
   13e98:	ldr	r3, [sp, #48]	; 0x30
   13e9c:	str	r3, [r5, #4]
   13ea0:	ldr	r3, [sp, #52]	; 0x34
   13ea4:	str	r3, [r5, #8]
   13ea8:	ldr	r3, [sp, #56]	; 0x38
   13eac:	str	r3, [r5, #12]
   13eb0:	ldr	r3, [sp, #68]	; 0x44
   13eb4:	str	r3, [r5, #16]
   13eb8:	ldr	r3, [sp, #72]	; 0x48
   13ebc:	str	r3, [r5, #20]
   13ec0:	ldr	r3, [sp, #60]	; 0x3c
   13ec4:	str	r3, [r5, #24]
   13ec8:	ldr	r3, [sp, #64]	; 0x40
   13ecc:	str	r3, [r5, #28]
   13ed0:	ldrd	r2, [sp, #16]
   13ed4:	strd	r2, [r5, #32]
   13ed8:	ldrd	r2, [r4]
   13edc:	strd	r2, [r0, #56]	; 0x38
   13ee0:	ldrd	r2, [r4, #24]
   13ee4:	strd	r2, [sp, #16]
   13ee8:	ldrd	r2, [r4, #8]
   13eec:	strd	r2, [sl, #8]
   13ef0:	ldrd	r2, [r4, #32]
   13ef4:	strd	r2, [sl, #32]
   13ef8:	ldrd	r2, [r4, #16]
   13efc:	strd	r2, [sl, #16]
   13f00:	ldrd	r2, [r4, #40]	; 0x28
   13f04:	strd	r2, [sl, #40]	; 0x28
   13f08:	ldrd	r2, [sp, #16]
   13f0c:	strd	r2, [sl, #24]
   13f10:	ldrd	r2, [r4, #48]	; 0x30
   13f14:	strd	r2, [sl, #48]	; 0x30
   13f18:	bhi	13f30 <__assert_fail@plt+0x2b60>
   13f1c:	add	r7, r9, r7
   13f20:	movw	r3, #2260	; 0x8d4
   13f24:	ldrsb	r3, [r7, r3]
   13f28:	cmp	r3, r1
   13f2c:	beq	15c18 <__assert_fail@plt+0x4848>
   13f30:	add	ip, r9, ip
   13f34:	movw	r3, #2820	; 0xb04
   13f38:	ldrsb	r7, [ip, r3]
   13f3c:	b	136dc <__assert_fail@plt+0x230c>
   13f40:	mov	r1, #0
   13f44:	mov	r2, #56	; 0x38
   13f48:	mov	r0, r4
   13f4c:	mov	r6, r1
   13f50:	str	r1, [sp, #60]	; 0x3c
   13f54:	mvn	r7, #92	; 0x5c
   13f58:	bl	112c8 <memset@plt>
   13f5c:	sub	r1, r8, #4
   13f60:	ldr	r3, [sl, #-56]	; 0xffffffc8
   13f64:	sub	r2, sl, #112	; 0x70
   13f68:	mov	ip, #17
   13f6c:	str	r1, [sp, #32]
   13f70:	ldr	r1, [sl, #-52]	; 0xffffffcc
   13f74:	mov	r0, r3
   13f78:	str	r1, [sp, #40]	; 0x28
   13f7c:	asr	r1, r3, #31
   13f80:	str	r6, [sp, #44]	; 0x2c
   13f84:	str	r6, [sp, #48]	; 0x30
   13f88:	strd	r0, [sp, #16]
   13f8c:	str	r6, [sp, #52]	; 0x34
   13f90:	str	r6, [sp, #56]	; 0x38
   13f94:	str	r6, [sp, #64]	; 0x40
   13f98:	str	r6, [sp, #68]	; 0x44
   13f9c:	str	r6, [sp, #72]	; 0x48
   13fa0:	str	r2, [sp, #80]	; 0x50
   13fa4:	b	13e70 <__assert_fail@plt+0x2aa0>
   13fa8:	ldr	lr, [sp, #28]
   13fac:	ldrd	r6, [sl, #40]	; 0x28
   13fb0:	ldr	r1, [sl, #48]	; 0x30
   13fb4:	ldrd	r2, [lr, #136]	; 0x88
   13fb8:	ldr	r0, [lr, #144]	; 0x90
   13fbc:	adds	r1, r0, r1
   13fc0:	movvs	ip, #1
   13fc4:	movvc	ip, #0
   13fc8:	str	r1, [lr, #144]	; 0x90
   13fcc:	ldrd	r0, [lr, #128]	; 0x80
   13fd0:	strd	r0, [sp, #80]	; 0x50
   13fd4:	adds	r0, r2, r6
   13fd8:	adcs	r1, r3, r7
   13fdc:	ldrd	r6, [lr, #120]	; 0x78
   13fe0:	strd	r0, [lr, #136]	; 0x88
   13fe4:	ldrd	r2, [sl, #24]
   13fe8:	ldrd	r0, [sp, #80]	; 0x50
   13fec:	strd	r6, [sp, #128]	; 0x80
   13ff0:	ldrd	r6, [sl, #32]
   13ff4:	strd	r2, [sp, #32]
   13ff8:	movvs	r3, #1
   13ffc:	movvc	r3, #0
   14000:	orr	ip, ip, r3
   14004:	adds	r2, r0, r6
   14008:	ldr	r0, [sp, #28]
   1400c:	adcs	r3, r1, r7
   14010:	movvs	lr, #1
   14014:	movvc	lr, #0
   14018:	ldrd	r6, [sp, #128]	; 0x80
   1401c:	orr	ip, ip, lr
   14020:	mov	lr, r0
   14024:	strd	r2, [r0, #128]	; 0x80
   14028:	ldrd	r2, [r0, #112]	; 0x70
   1402c:	ldrd	r0, [sp, #32]
   14030:	strd	r2, [sp, #136]	; 0x88
   14034:	adds	r2, r6, r0
   14038:	adcs	r3, r7, r1
   1403c:	ldrd	r6, [sl, #8]
   14040:	movvs	r1, #1
   14044:	movvc	r1, #0
   14048:	orr	ip, ip, r1
   1404c:	ldrd	r0, [lr, #104]	; 0x68
   14050:	strd	r2, [lr, #120]	; 0x78
   14054:	strd	r6, [sp, #32]
   14058:	ldrd	r6, [sp, #136]	; 0x88
   1405c:	strd	r0, [sp, #80]	; 0x50
   14060:	ldrd	r0, [sl, #16]
   14064:	adds	r2, r6, r0
   14068:	adcs	r3, r7, r1
   1406c:	movvs	lr, #1
   14070:	movvc	lr, #0
   14074:	orr	ip, ip, lr
   14078:	ldr	lr, [sp, #28]
   1407c:	ldrd	r6, [lr, #96]	; 0x60
   14080:	strd	r2, [lr, #112]	; 0x70
   14084:	strd	r6, [sp, #128]	; 0x80
   14088:	ldrd	r0, [sp, #80]	; 0x50
   1408c:	ldrd	r6, [sp, #32]
   14090:	adds	r2, r0, r6
   14094:	adcs	r3, r1, r7
   14098:	ldrd	r6, [sp, #128]	; 0x80
   1409c:	movvs	r1, #1
   140a0:	movvc	r1, #0
   140a4:	strd	r2, [lr, #104]	; 0x68
   140a8:	str	r1, [sp, #32]
   140ac:	ldrd	r0, [sl]
   140b0:	adds	r2, r6, r0
   140b4:	adcs	r3, r7, r1
   140b8:	ldr	r1, [sp, #32]
   140bc:	strd	r2, [lr, #96]	; 0x60
   140c0:	orrvc	ip, ip, r1
   140c4:	movvs	ip, #1
   140c8:	cmp	ip, #0
   140cc:	bne	13a20 <__assert_fail@plt+0x2650>
   140d0:	sub	r2, sl, #56	; 0x38
   140d4:	mov	r3, #1
   140d8:	mov	ip, #16
   140dc:	mvn	r7, #92	; 0x5c
   140e0:	str	r2, [sp, #80]	; 0x50
   140e4:	sub	r2, r8, #2
   140e8:	strb	r3, [lr, #153]	; 0x99
   140ec:	str	r2, [sp, #32]
   140f0:	b	13e70 <__assert_fail@plt+0x2aa0>
   140f4:	cmp	r1, #9
   140f8:	bhi	15c20 <__assert_fail@plt+0x4850>
   140fc:	cmp	ip, #48	; 0x30
   14100:	bne	1411c <__assert_fail@plt+0x2d4c>
   14104:	ldrb	r1, [r2, #1]!
   14108:	sub	r0, r1, #48	; 0x30
   1410c:	cmp	r0, #9
   14110:	bhi	15c20 <__assert_fail@plt+0x4850>
   14114:	cmp	r1, #48	; 0x30
   14118:	beq	14104 <__assert_fail@plt+0x2d34>
   1411c:	ldrb	r4, [r2]
   14120:	add	r3, r3, #1
   14124:	sub	r4, r4, #48	; 0x30
   14128:	b	13c04 <__assert_fail@plt+0x2834>
   1412c:	mov	r1, #0
   14130:	sub	r3, r8, #4
   14134:	mov	r6, r1
   14138:	mov	r7, r1
   1413c:	mov	r2, #56	; 0x38
   14140:	mov	r0, r4
   14144:	str	r3, [sp, #32]
   14148:	strd	r6, [sp, #60]	; 0x3c
   1414c:	bl	112c8 <memset@plt>
   14150:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   14154:	mov	r1, r6
   14158:	str	r6, [sp, #52]	; 0x34
   1415c:	str	r6, [sp, #68]	; 0x44
   14160:	strd	r2, [sp, #16]
   14164:	sub	r3, sl, #112	; 0x70
   14168:	mov	ip, #17
   1416c:	str	r1, [sp, #40]	; 0x28
   14170:	str	r1, [sp, #44]	; 0x2c
   14174:	str	r7, [sp, #48]	; 0x30
   14178:	str	r7, [sp, #56]	; 0x38
   1417c:	str	r7, [sp, #72]	; 0x48
   14180:	mvn	r7, #92	; 0x5c
   14184:	str	r3, [sp, #80]	; 0x50
   14188:	b	13e70 <__assert_fail@plt+0x2aa0>
   1418c:	mov	r6, #0
   14190:	mov	r7, #0
   14194:	sub	r3, r8, #4
   14198:	mov	r1, #0
   1419c:	mov	r2, #56	; 0x38
   141a0:	mov	r0, r4
   141a4:	strd	r6, [sp, #16]
   141a8:	str	r3, [sp, #32]
   141ac:	str	r6, [sp, #68]	; 0x44
   141b0:	bl	112c8 <memset@plt>
   141b4:	sub	r3, sl, #112	; 0x70
   141b8:	ldr	r1, [sl, #-56]	; 0xffffffc8
   141bc:	str	r6, [sp, #44]	; 0x2c
   141c0:	str	r7, [sp, #48]	; 0x30
   141c4:	str	r3, [sp, #80]	; 0x50
   141c8:	ldr	r3, [sl, #-52]	; 0xffffffcc
   141cc:	str	r6, [sp, #52]	; 0x34
   141d0:	str	r7, [sp, #56]	; 0x38
   141d4:	str	r1, [sp, #60]	; 0x3c
   141d8:	str	r7, [sp, #72]	; 0x48
   141dc:	str	r3, [sp, #64]	; 0x40
   141e0:	mov	r3, #0
   141e4:	mov	ip, #17
   141e8:	mvn	r7, #92	; 0x5c
   141ec:	str	r3, [sp, #40]	; 0x28
   141f0:	b	13e70 <__assert_fail@plt+0x2aa0>
   141f4:	sub	r3, sl, #56	; 0x38
   141f8:	mov	r6, #0
   141fc:	mov	r7, #0
   14200:	mov	r1, #0
   14204:	mov	r2, #56	; 0x38
   14208:	mov	r0, r4
   1420c:	str	r3, [sp, #80]	; 0x50
   14210:	sub	r3, r8, #2
   14214:	strd	r6, [sp, #16]
   14218:	str	r3, [sp, #32]
   1421c:	bl	112c8 <memset@plt>
   14220:	mov	r3, r7
   14224:	mov	ip, #17
   14228:	str	r6, [sp, #44]	; 0x2c
   1422c:	mov	r1, r3
   14230:	mvn	r7, #92	; 0x5c
   14234:	str	r3, [sp, #48]	; 0x30
   14238:	str	r6, [sp, #52]	; 0x34
   1423c:	str	r3, [sp, #64]	; 0x40
   14240:	mov	r3, #0
   14244:	str	r3, [sp, #40]	; 0x28
   14248:	mov	r3, #1
   1424c:	str	r1, [sp, #56]	; 0x38
   14250:	str	r6, [sp, #60]	; 0x3c
   14254:	str	r3, [sp, #68]	; 0x44
   14258:	mov	r3, #0
   1425c:	str	r3, [sp, #72]	; 0x48
   14260:	b	13e70 <__assert_fail@plt+0x2aa0>
   14264:	mov	r6, #0
   14268:	mov	r7, #0
   1426c:	sub	r3, r8, #4
   14270:	mov	r1, #0
   14274:	mov	r2, #56	; 0x38
   14278:	mov	r0, r4
   1427c:	strd	r6, [sp, #16]
   14280:	str	r3, [sp, #32]
   14284:	str	r6, [sp, #60]	; 0x3c
   14288:	bl	112c8 <memset@plt>
   1428c:	sub	r3, sl, #112	; 0x70
   14290:	ldr	r1, [sl, #-48]	; 0xffffffd0
   14294:	str	r6, [sp, #44]	; 0x2c
   14298:	str	r7, [sp, #48]	; 0x30
   1429c:	str	r3, [sp, #80]	; 0x50
   142a0:	ldr	r3, [sl, #-44]	; 0xffffffd4
   142a4:	str	r6, [sp, #52]	; 0x34
   142a8:	str	r7, [sp, #56]	; 0x38
   142ac:	str	r7, [sp, #64]	; 0x40
   142b0:	str	r1, [sp, #68]	; 0x44
   142b4:	str	r3, [sp, #72]	; 0x48
   142b8:	mov	r3, #0
   142bc:	mov	ip, #17
   142c0:	mvn	r7, #92	; 0x5c
   142c4:	str	r3, [sp, #40]	; 0x28
   142c8:	b	13e70 <__assert_fail@plt+0x2aa0>
   142cc:	mov	r6, #0
   142d0:	mov	r7, #0
   142d4:	sub	r3, r8, #4
   142d8:	mov	r1, #0
   142dc:	mov	r2, #56	; 0x38
   142e0:	mov	r0, r4
   142e4:	strd	r6, [sp, #16]
   142e8:	str	r3, [sp, #32]
   142ec:	str	r6, [sp, #60]	; 0x3c
   142f0:	bl	112c8 <memset@plt>
   142f4:	ldr	r1, [sl, #-56]	; 0xffffffc8
   142f8:	sub	r3, sl, #112	; 0x70
   142fc:	str	r6, [sp, #44]	; 0x2c
   14300:	str	r7, [sp, #48]	; 0x30
   14304:	str	r6, [sp, #52]	; 0x34
   14308:	str	r7, [sp, #56]	; 0x38
   1430c:	str	r7, [sp, #64]	; 0x40
   14310:	str	r1, [sp, #68]	; 0x44
   14314:	str	r3, [sp, #80]	; 0x50
   14318:	ldr	r3, [sl, #-52]	; 0xffffffcc
   1431c:	b	142b4 <__assert_fail@plt+0x2ee4>
   14320:	mov	r2, #56	; 0x38
   14324:	mov	r1, #0
   14328:	mov	r0, r4
   1432c:	bl	112c8 <memset@plt>
   14330:	mov	r1, sl
   14334:	sub	ip, r8, #2
   14338:	ldrd	r2, [r1], #-56	; 0xffffffc8
   1433c:	mov	r0, #0
   14340:	str	ip, [sp, #32]
   14344:	mov	ip, #17
   14348:	str	r0, [sp, #44]	; 0x2c
   1434c:	str	r0, [sp, #60]	; 0x3c
   14350:	str	r0, [sp, #68]	; 0x44
   14354:	str	r1, [sp, #80]	; 0x50
   14358:	mov	r1, #0
   1435c:	strd	r0, [sp, #16]
   14360:	str	r1, [sp, #48]	; 0x30
   14364:	str	r1, [sp, #64]	; 0x40
   14368:	str	r1, [sp, #72]	; 0x48
   1436c:	strd	r2, [sp, #52]	; 0x34
   14370:	mov	r3, #0
   14374:	mvn	r7, #92	; 0x5c
   14378:	str	r3, [sp, #40]	; 0x28
   1437c:	b	13e70 <__assert_fail@plt+0x2aa0>
   14380:	mov	r2, #56	; 0x38
   14384:	mov	r1, #0
   14388:	mov	r0, r4
   1438c:	bl	112c8 <memset@plt>
   14390:	ldr	r0, [sl, #-48]	; 0xffffffd0
   14394:	mov	r3, #0
   14398:	ldr	ip, [sl, #-44]	; 0xffffffd4
   1439c:	str	r3, [sp, #32]
   143a0:	ldr	r2, [sl]
   143a4:	ldr	r3, [sl, #4]
   143a8:	cmp	ip, r0, asr #31
   143ac:	asr	r1, r2, #31
   143b0:	bne	1629c <__assert_fail@plt+0x4ecc>
   143b4:	cmp	r1, r3
   143b8:	bne	16224 <__assert_fail@plt+0x4e54>
   143bc:	smull	r2, r3, r0, r2
   143c0:	strd	r2, [sp, #112]	; 0x70
   143c4:	ldr	r3, [sp, #32]
   143c8:	ldrd	r0, [sp, #112]	; 0x70
   143cc:	cmp	r3, #0
   143d0:	str	r0, [sp, #52]	; 0x34
   143d4:	str	r1, [sp, #56]	; 0x38
   143d8:	bne	13a20 <__assert_fail@plt+0x2650>
   143dc:	sub	r2, sl, #112	; 0x70
   143e0:	mov	r0, #0
   143e4:	str	r3, [sp, #40]	; 0x28
   143e8:	mov	r1, #0
   143ec:	str	r2, [sp, #80]	; 0x50
   143f0:	sub	r2, r8, #4
   143f4:	strd	r0, [sp, #16]
   143f8:	str	r2, [sp, #32]
   143fc:	mov	ip, #17
   14400:	mvn	r7, #92	; 0x5c
   14404:	str	r0, [sp, #44]	; 0x2c
   14408:	str	r1, [sp, #48]	; 0x30
   1440c:	str	r0, [sp, #60]	; 0x3c
   14410:	str	r1, [sp, #64]	; 0x40
   14414:	str	r0, [sp, #68]	; 0x44
   14418:	str	r1, [sp, #72]	; 0x48
   1441c:	b	13e70 <__assert_fail@plt+0x2aa0>
   14420:	mov	r2, #56	; 0x38
   14424:	mov	r1, #0
   14428:	mov	r0, r4
   1442c:	bl	112c8 <memset@plt>
   14430:	mov	r3, #0
   14434:	ldr	r7, [sl, #-56]	; 0xffffffc8
   14438:	str	r3, [sp, #40]	; 0x28
   1443c:	ldr	r3, [sl, #-52]	; 0xffffffcc
   14440:	ldr	r2, [sl]
   14444:	mov	r1, r3
   14448:	cmp	r3, r7, asr #31
   1444c:	ldr	r3, [sl, #4]
   14450:	str	r1, [sp, #16]
   14454:	asr	r1, r2, #31
   14458:	bne	16344 <__assert_fail@plt+0x4f74>
   1445c:	cmp	r1, r3
   14460:	bne	162c0 <__assert_fail@plt+0x4ef0>
   14464:	smull	r2, r3, r7, r2
   14468:	strd	r2, [sp, #104]	; 0x68
   1446c:	ldr	r3, [sp, #40]	; 0x28
   14470:	ldrd	r0, [sp, #104]	; 0x68
   14474:	cmp	r3, #0
   14478:	str	r0, [sp, #52]	; 0x34
   1447c:	str	r1, [sp, #56]	; 0x38
   14480:	bne	13a20 <__assert_fail@plt+0x2650>
   14484:	sub	r2, sl, #112	; 0x70
   14488:	mov	r0, #0
   1448c:	mov	r1, #0
   14490:	str	r2, [sp, #80]	; 0x50
   14494:	sub	r2, r8, #4
   14498:	strd	r0, [sp, #16]
   1449c:	str	r2, [sp, #32]
   144a0:	b	143fc <__assert_fail@plt+0x302c>
   144a4:	sub	r3, sl, #56	; 0x38
   144a8:	mov	r6, #0
   144ac:	mov	r7, #0
   144b0:	mov	r1, #0
   144b4:	mov	r2, #56	; 0x38
   144b8:	mov	r0, r4
   144bc:	str	r3, [sp, #80]	; 0x50
   144c0:	sub	r3, r8, #2
   144c4:	strd	r6, [sp, #16]
   144c8:	str	r3, [sp, #32]
   144cc:	bl	112c8 <memset@plt>
   144d0:	mov	r3, r7
   144d4:	mov	ip, #17
   144d8:	str	r6, [sp, #52]	; 0x34
   144dc:	mov	r1, r3
   144e0:	mvn	r7, #92	; 0x5c
   144e4:	str	r3, [sp, #56]	; 0x38
   144e8:	str	r6, [sp, #60]	; 0x3c
   144ec:	str	r3, [sp, #64]	; 0x40
   144f0:	mov	r3, #0
   144f4:	str	r3, [sp, #40]	; 0x28
   144f8:	mov	r3, #1
   144fc:	str	r6, [sp, #68]	; 0x44
   14500:	str	r3, [sp, #44]	; 0x2c
   14504:	mov	r3, #0
   14508:	str	r1, [sp, #72]	; 0x48
   1450c:	str	r3, [sp, #48]	; 0x30
   14510:	b	13e70 <__assert_fail@plt+0x2aa0>
   14514:	mov	r6, #0
   14518:	mov	r7, #0
   1451c:	sub	r3, r8, #4
   14520:	mov	r1, #0
   14524:	mov	r2, #56	; 0x38
   14528:	mov	r0, r4
   1452c:	strd	r6, [sp, #16]
   14530:	str	r3, [sp, #32]
   14534:	str	r6, [sp, #60]	; 0x3c
   14538:	bl	112c8 <memset@plt>
   1453c:	sub	r3, sl, #112	; 0x70
   14540:	ldr	r1, [sl, #-48]	; 0xffffffd0
   14544:	str	r3, [sp, #80]	; 0x50
   14548:	ldr	r3, [sl, #-44]	; 0xffffffd4
   1454c:	str	r1, [sp, #44]	; 0x2c
   14550:	str	r6, [sp, #52]	; 0x34
   14554:	str	r7, [sp, #56]	; 0x38
   14558:	str	r7, [sp, #64]	; 0x40
   1455c:	str	r6, [sp, #68]	; 0x44
   14560:	str	r7, [sp, #72]	; 0x48
   14564:	str	r3, [sp, #48]	; 0x30
   14568:	mov	r3, #0
   1456c:	mov	ip, #17
   14570:	mvn	r7, #92	; 0x5c
   14574:	str	r3, [sp, #40]	; 0x28
   14578:	b	13e70 <__assert_fail@plt+0x2aa0>
   1457c:	ldr	r6, [sp, #28]
   14580:	sub	r3, r8, #2
   14584:	sub	r2, sl, #56	; 0x38
   14588:	movw	r1, #64664	; 0xfc98
   1458c:	movt	r1, #1
   14590:	str	r3, [sp, #32]
   14594:	mov	r0, #0
   14598:	str	r2, [sp, #80]	; 0x50
   1459c:	mov	r2, #5
   145a0:	ldr	ip, [r6, #156]	; 0x9c
   145a4:	ldr	r3, [r6, #172]	; 0xac
   145a8:	add	ip, ip, #1
   145ac:	add	r3, r3, #1
   145b0:	str	ip, [r6, #156]	; 0x9c
   145b4:	str	r3, [r6, #172]	; 0xac
   145b8:	bl	11130 <dcgettext@plt>
   145bc:	ldrb	r3, [r6, #181]	; 0xb5
   145c0:	cmp	r3, #0
   145c4:	beq	148d0 <__assert_fail@plt+0x3500>
   145c8:	mov	r1, r6
   145cc:	mvn	r7, #92	; 0x5c
   145d0:	bl	13190 <__assert_fail@plt+0x1dc0>
   145d4:	mov	ip, #4
   145d8:	b	13e70 <__assert_fail@plt+0x2aa0>
   145dc:	mov	r2, sl
   145e0:	ldr	ip, [sp, #28]
   145e4:	mov	r3, #1
   145e8:	ldrd	r0, [r2], #-112	; 0xffffff90
   145ec:	strb	r3, [ip, #152]	; 0x98
   145f0:	sub	r3, r8, #4
   145f4:	mov	r8, ip
   145f8:	mov	r7, r1
   145fc:	mov	r6, r0
   14600:	str	r3, [sp, #32]
   14604:	movw	r1, #64644	; 0xfc84
   14608:	movt	r1, #1
   1460c:	str	r2, [sp, #80]	; 0x50
   14610:	mov	r0, #0
   14614:	mov	r2, #5
   14618:	strd	r6, [ip, #88]	; 0x58
   1461c:	bl	11130 <dcgettext@plt>
   14620:	ldrb	r3, [r8, #181]	; 0xb5
   14624:	cmp	r3, #0
   14628:	moveq	ip, #2
   1462c:	mvneq	r7, #92	; 0x5c
   14630:	beq	13e70 <__assert_fail@plt+0x2aa0>
   14634:	mov	r1, r8
   14638:	mvn	r7, #92	; 0x5c
   1463c:	bl	13190 <__assert_fail@plt+0x1dc0>
   14640:	mov	ip, #2
   14644:	b	13e70 <__assert_fail@plt+0x2aa0>
   14648:	ldr	r6, [sp, #28]
   1464c:	movw	r1, #61192	; 0xef08
   14650:	movt	r1, #1
   14654:	sub	lr, sl, #56	; 0x38
   14658:	sub	ip, r8, #2
   1465c:	mov	r2, #5
   14660:	mov	r0, #0
   14664:	str	ip, [sp, #32]
   14668:	str	lr, [sp, #80]	; 0x50
   1466c:	ldr	r3, [r6, #156]	; 0x9c
   14670:	add	r3, r3, #1
   14674:	str	r3, [r6, #156]	; 0x9c
   14678:	bl	11130 <dcgettext@plt>
   1467c:	ldrb	r3, [r6, #181]	; 0xb5
   14680:	mov	r1, r6
   14684:	cmp	r3, #0
   14688:	beq	148d0 <__assert_fail@plt+0x3500>
   1468c:	bl	13190 <__assert_fail@plt+0x1dc0>
   14690:	mvn	r7, #92	; 0x5c
   14694:	mov	ip, #4
   14698:	b	13e70 <__assert_fail@plt+0x2aa0>
   1469c:	ldr	r6, [sp, #28]
   146a0:	sub	lr, sl, #56	; 0x38
   146a4:	sub	ip, r8, #2
   146a8:	movw	r1, #476	; 0x1dc
   146ac:	movt	r1, #2
   146b0:	mov	r2, #5
   146b4:	mov	r0, #0
   146b8:	str	ip, [sp, #32]
   146bc:	str	lr, [sp, #80]	; 0x50
   146c0:	ldr	r3, [r6, #176]	; 0xb0
   146c4:	add	r3, r3, #1
   146c8:	str	r3, [r6, #176]	; 0xb0
   146cc:	b	14678 <__assert_fail@plt+0x32a8>
   146d0:	ldr	r6, [sp, #28]
   146d4:	sub	lr, sl, #56	; 0x38
   146d8:	sub	ip, r8, #2
   146dc:	movw	r1, #64676	; 0xfca4
   146e0:	movt	r1, #1
   146e4:	mov	r2, #5
   146e8:	mov	r0, #0
   146ec:	str	ip, [sp, #32]
   146f0:	str	lr, [sp, #80]	; 0x50
   146f4:	ldr	r3, [r6, #164]	; 0xa4
   146f8:	add	r3, r3, #1
   146fc:	str	r3, [r6, #164]	; 0xa4
   14700:	b	14678 <__assert_fail@plt+0x32a8>
   14704:	ldr	r6, [sp, #28]
   14708:	sub	lr, sl, #56	; 0x38
   1470c:	sub	ip, r8, #2
   14710:	movw	r1, #64668	; 0xfc9c
   14714:	movt	r1, #1
   14718:	mov	r2, #5
   1471c:	mov	r0, #0
   14720:	str	ip, [sp, #32]
   14724:	str	lr, [sp, #80]	; 0x50
   14728:	ldr	r3, [r6, #172]	; 0xac
   1472c:	add	r3, r3, #1
   14730:	str	r3, [r6, #172]	; 0xac
   14734:	b	14678 <__assert_fail@plt+0x32a8>
   14738:	sub	ip, r8, #4
   1473c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14740:	mov	r0, #2
   14744:	mov	r1, #0
   14748:	mov	r7, #0
   1474c:	str	ip, [sp, #32]
   14750:	sub	ip, sl, #112	; 0x70
   14754:	mov	r6, #0
   14758:	str	ip, [sp, #80]	; 0x50
   1475c:	ldr	ip, [sp, #28]
   14760:	str	r0, [ip, #28]
   14764:	mov	r0, ip
   14768:	strd	r6, [ip, #80]	; 0x50
   1476c:	mov	r7, #20
   14770:	str	r1, [ip, #88]	; 0x58
   14774:	mov	ip, #8
   14778:	strd	r2, [r0, #72]	; 0x48
   1477c:	str	r1, [r0, #92]	; 0x5c
   14780:	b	13e70 <__assert_fail@plt+0x2aa0>
   14784:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   14788:	sub	r0, r8, #12
   1478c:	mov	ip, sl
   14790:	sub	r1, sl, #272	; 0x110
   14794:	mvn	r7, #92	; 0x5c
   14798:	ldr	r6, [sp, #28]
   1479c:	str	r0, [sp, #32]
   147a0:	ldr	lr, [ip], #-336	; 0xfffffeb0
   147a4:	ldrd	r0, [r1]
   147a8:	strd	r2, [r6, #88]	; 0x58
   147ac:	ldrd	r2, [sl, #-160]	; 0xffffff60
   147b0:	str	lr, [r6, #28]
   147b4:	strd	r0, [r6, #72]	; 0x48
   147b8:	str	ip, [sp, #80]	; 0x50
   147bc:	mov	ip, #7
   147c0:	strd	r2, [r6, #80]	; 0x50
   147c4:	b	13e70 <__assert_fail@plt+0x2aa0>
   147c8:	mov	r1, sl
   147cc:	sub	r0, r8, #8
   147d0:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   147d4:	mov	lr, #0
   147d8:	mvn	r7, #92	; 0x5c
   147dc:	ldr	ip, [r1], #-224	; 0xffffff20
   147e0:	str	r0, [sp, #32]
   147e4:	ldr	r6, [sp, #28]
   147e8:	str	r1, [sp, #80]	; 0x50
   147ec:	ldrd	r0, [sl, #-160]	; 0xffffff60
   147f0:	str	ip, [r6, #28]
   147f4:	mov	ip, #7
   147f8:	strd	r0, [r6, #72]	; 0x48
   147fc:	strd	r2, [r6, #80]	; 0x50
   14800:	str	lr, [r6, #88]	; 0x58
   14804:	str	lr, [r6, #92]	; 0x5c
   14808:	b	13e70 <__assert_fail@plt+0x2aa0>
   1480c:	ldr	ip, [sp, #28]
   14810:	sub	r1, r8, #4
   14814:	mov	r0, #0
   14818:	mov	lr, sl
   1481c:	mvn	r7, #92	; 0x5c
   14820:	str	r1, [sp, #32]
   14824:	mov	r1, #0
   14828:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   1482c:	strd	r0, [ip, #80]	; 0x50
   14830:	mov	r1, #0
   14834:	ldr	r0, [lr], #-112	; 0xffffff90
   14838:	strd	r2, [ip, #72]	; 0x48
   1483c:	str	r1, [ip, #88]	; 0x58
   14840:	str	lr, [sp, #80]	; 0x50
   14844:	mov	lr, ip
   14848:	mov	ip, #7
   1484c:	str	r0, [lr, #28]
   14850:	str	r1, [lr, #92]	; 0x5c
   14854:	b	13e70 <__assert_fail@plt+0x2aa0>
   14858:	movw	r1, #64712	; 0xfcc8
   1485c:	movt	r1, #1
   14860:	mov	r2, #5
   14864:	mov	r0, #0
   14868:	bl	11130 <dcgettext@plt>
   1486c:	ldr	r1, [sp, #28]
   14870:	sub	r2, sl, #56	; 0x38
   14874:	str	r2, [sp, #80]	; 0x50
   14878:	sub	r2, r8, #2
   1487c:	str	r2, [sp, #32]
   14880:	ldrb	r3, [r1, #181]	; 0xb5
   14884:	cmp	r3, #0
   14888:	beq	148d0 <__assert_fail@plt+0x3500>
   1488c:	bl	12e04 <__assert_fail@plt+0x1a34>
   14890:	mvn	r7, #92	; 0x5c
   14894:	mov	ip, #4
   14898:	b	13e70 <__assert_fail@plt+0x2aa0>
   1489c:	mov	r2, #5
   148a0:	movw	r1, #64704	; 0xfcc0
   148a4:	movt	r1, #1
   148a8:	mov	r0, #0
   148ac:	bl	11130 <dcgettext@plt>
   148b0:	ldr	r1, [sp, #28]
   148b4:	sub	r2, sl, #56	; 0x38
   148b8:	str	r2, [sp, #80]	; 0x50
   148bc:	sub	r2, r8, #2
   148c0:	str	r2, [sp, #32]
   148c4:	ldrb	r3, [r1, #181]	; 0xb5
   148c8:	cmp	r3, #0
   148cc:	bne	1468c <__assert_fail@plt+0x32bc>
   148d0:	mov	ip, #4
   148d4:	mvn	r7, #92	; 0x5c
   148d8:	b	13e70 <__assert_fail@plt+0x2aa0>
   148dc:	movw	r1, #64692	; 0xfcb4
   148e0:	movt	r1, #1
   148e4:	b	14860 <__assert_fail@plt+0x3490>
   148e8:	ldr	r6, [sp, #28]
   148ec:	sub	lr, sl, #56	; 0x38
   148f0:	sub	ip, r8, #2
   148f4:	movw	r1, #64688	; 0xfcb0
   148f8:	movt	r1, #1
   148fc:	mov	r2, #5
   14900:	mov	r0, #0
   14904:	str	ip, [sp, #32]
   14908:	str	lr, [sp, #80]	; 0x50
   1490c:	ldr	r3, [r6, #160]	; 0xa0
   14910:	add	r3, r3, #1
   14914:	str	r3, [r6, #160]	; 0xa0
   14918:	b	14678 <__assert_fail@plt+0x32a8>
   1491c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14920:	mov	r1, sl
   14924:	sub	r0, r8, #4
   14928:	mvn	r7, #92	; 0x5c
   1492c:	ldr	ip, [sp, #28]
   14930:	str	r0, [sp, #32]
   14934:	mov	r0, r1
   14938:	ldr	r1, [r0], #-112	; 0xffffff90
   1493c:	str	r0, [sp, #80]	; 0x50
   14940:	mov	r0, #1
   14944:	strb	r0, [ip, #188]	; 0xbc
   14948:	mov	r0, ip
   1494c:	mov	ip, #13
   14950:	strd	r2, [r0, #8]
   14954:	str	r1, [r0, #16]
   14958:	b	13e70 <__assert_fail@plt+0x2aa0>
   1495c:	mov	r1, sl
   14960:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   14964:	b	14924 <__assert_fail@plt+0x3554>
   14968:	sub	r2, r8, #4
   1496c:	ldr	r3, [sl, #-56]	; 0xffffffc8
   14970:	mov	r0, #0
   14974:	mov	r1, #0
   14978:	mov	ip, #13
   1497c:	str	r2, [sp, #32]
   14980:	sub	r2, sl, #112	; 0x70
   14984:	mvn	r7, #92	; 0x5c
   14988:	str	r2, [sp, #80]	; 0x50
   1498c:	ldr	r2, [sp, #28]
   14990:	strd	r0, [r2, #8]
   14994:	str	r3, [r2, #16]
   14998:	b	13e70 <__assert_fail@plt+0x2aa0>
   1499c:	ldr	r1, [sp, #28]
   149a0:	sub	r3, r8, #2
   149a4:	mov	r2, #0
   149a8:	mov	ip, #13
   149ac:	mvn	r7, #92	; 0x5c
   149b0:	str	r3, [sp, #32]
   149b4:	mov	r3, #0
   149b8:	strd	r2, [r1, #8]
   149bc:	ldr	r3, [sl], #-56	; 0xffffffc8
   149c0:	str	r3, [r1, #16]
   149c4:	str	sl, [sp, #80]	; 0x50
   149c8:	b	13e70 <__assert_fail@plt+0x2aa0>
   149cc:	ldr	r3, [sl, #-56]	; 0xffffffc8
   149d0:	sub	r2, r8, #4
   149d4:	str	r2, [sp, #32]
   149d8:	sub	r2, sl, #112	; 0x70
   149dc:	str	r2, [sp, #80]	; 0x50
   149e0:	ldr	r2, [sp, #28]
   149e4:	add	r3, r3, #3600	; 0xe10
   149e8:	mov	ip, #12
   149ec:	mvn	r7, #92	; 0x5c
   149f0:	str	r3, [r2, #24]
   149f4:	b	13e70 <__assert_fail@plt+0x2aa0>
   149f8:	sub	r3, r8, #2
   149fc:	str	r3, [sp, #32]
   14a00:	ldr	r3, [sl], #-56	; 0xffffffc8
   14a04:	str	sl, [sp, #80]	; 0x50
   14a08:	b	149e0 <__assert_fail@plt+0x3610>
   14a0c:	ldrd	r2, [sl, #-112]	; 0xffffff90
   14a10:	ldr	r1, [sp, #28]
   14a14:	ldrd	r6, [sl, #-104]	; 0xffffff98
   14a18:	strd	r2, [r1, #32]
   14a1c:	add	lr, r1, #32
   14a20:	ldrd	r2, [sl, #-96]	; 0xffffffa0
   14a24:	strd	r6, [sp, #32]
   14a28:	ldrd	r6, [sl, #-48]	; 0xffffffd0
   14a2c:	strd	r2, [r1, #48]	; 0x30
   14a30:	ldrd	r2, [sp, #32]
   14a34:	rsbs	r6, r6, #0
   14a38:	rscs	r7, r7, #0
   14a3c:	strd	r2, [r1, #40]	; 0x28
   14a40:	mov	r3, #0
   14a44:	movvs	r3, #1
   14a48:	subs	r1, r3, #0
   14a4c:	ldr	r3, [sp, #28]
   14a50:	strd	r6, [r3, #56]	; 0x38
   14a54:	bne	13a20 <__assert_fail@plt+0x2650>
   14a58:	ldrd	r2, [sl, #8]
   14a5c:	rsbs	r2, r2, #0
   14a60:	rscs	r3, r3, #0
   14a64:	movvs	r1, #1
   14a68:	cmp	r1, #0
   14a6c:	ldr	r1, [sp, #28]
   14a70:	strd	r2, [r1, #64]	; 0x40
   14a74:	bne	13a20 <__assert_fail@plt+0x2650>
   14a78:	sub	r3, sl, #168	; 0xa8
   14a7c:	mov	ip, #15
   14a80:	mvn	r7, #92	; 0x5c
   14a84:	str	r3, [sp, #80]	; 0x50
   14a88:	sub	r3, r8, #6
   14a8c:	str	r3, [sp, #32]
   14a90:	b	13e70 <__assert_fail@plt+0x2aa0>
   14a94:	mov	r6, #0
   14a98:	mov	r7, #0
   14a9c:	sub	r3, r8, #4
   14aa0:	mov	r1, #0
   14aa4:	mov	r2, #56	; 0x38
   14aa8:	mov	r0, r4
   14aac:	strd	r6, [sp, #16]
   14ab0:	str	r3, [sp, #32]
   14ab4:	str	r6, [sp, #60]	; 0x3c
   14ab8:	bl	112c8 <memset@plt>
   14abc:	ldr	r1, [sl, #-56]	; 0xffffffc8
   14ac0:	sub	r3, sl, #112	; 0x70
   14ac4:	str	r1, [sp, #44]	; 0x2c
   14ac8:	str	r6, [sp, #52]	; 0x34
   14acc:	str	r7, [sp, #56]	; 0x38
   14ad0:	str	r7, [sp, #64]	; 0x40
   14ad4:	str	r6, [sp, #68]	; 0x44
   14ad8:	str	r7, [sp, #72]	; 0x48
   14adc:	str	r3, [sp, #80]	; 0x50
   14ae0:	ldr	r3, [sl, #-52]	; 0xffffffcc
   14ae4:	b	14564 <__assert_fail@plt+0x3194>
   14ae8:	mov	r3, #0
   14aec:	mov	r7, #0
   14af0:	mov	r6, #0
   14af4:	sub	ip, sl, #56	; 0x38
   14af8:	mov	r0, #1
   14afc:	mov	r1, #0
   14b00:	sub	r2, r8, #2
   14b04:	strd	r6, [sp, #16]
   14b08:	str	r3, [sp, #40]	; 0x28
   14b0c:	str	r3, [sp, #412]	; 0x19c
   14b10:	mov	r3, r7
   14b14:	mvn	r7, #92	; 0x5c
   14b18:	strd	r0, [r5, #-8]
   14b1c:	str	r2, [sp, #32]
   14b20:	str	r6, [sp, #44]	; 0x2c
   14b24:	str	r3, [sp, #48]	; 0x30
   14b28:	str	r6, [sp, #52]	; 0x34
   14b2c:	str	r3, [sp, #56]	; 0x38
   14b30:	str	r6, [sp, #60]	; 0x3c
   14b34:	str	r3, [sp, #64]	; 0x40
   14b38:	str	r6, [sp, #68]	; 0x44
   14b3c:	str	r3, [sp, #72]	; 0x48
   14b40:	str	ip, [sp, #80]	; 0x50
   14b44:	mov	ip, #17
   14b48:	b	13e70 <__assert_fail@plt+0x2aa0>
   14b4c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14b50:	mov	r1, #0
   14b54:	mov	r7, #0
   14b58:	strd	r2, [r5, #-8]
   14b5c:	mov	r6, #0
   14b60:	sub	ip, sl, #112	; 0x70
   14b64:	sub	r0, r8, #4
   14b68:	strd	r6, [sp, #16]
   14b6c:	str	r1, [sp, #40]	; 0x28
   14b70:	str	r1, [sp, #412]	; 0x19c
   14b74:	mov	r1, r7
   14b78:	str	r0, [sp, #32]
   14b7c:	str	r6, [sp, #44]	; 0x2c
   14b80:	str	r7, [sp, #48]	; 0x30
   14b84:	mvn	r7, #92	; 0x5c
   14b88:	str	r6, [sp, #52]	; 0x34
   14b8c:	str	r1, [sp, #56]	; 0x38
   14b90:	str	r6, [sp, #60]	; 0x3c
   14b94:	str	r1, [sp, #64]	; 0x40
   14b98:	str	r6, [sp, #68]	; 0x44
   14b9c:	str	r1, [sp, #72]	; 0x48
   14ba0:	str	ip, [sp, #80]	; 0x50
   14ba4:	mov	ip, #17
   14ba8:	b	13e70 <__assert_fail@plt+0x2aa0>
   14bac:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   14bb0:	b	14b50 <__assert_fail@plt+0x3780>
   14bb4:	ldrd	r2, [sl, #-104]	; 0xffffff98
   14bb8:	sub	r0, sl, #168	; 0xa8
   14bbc:	sub	r1, r8, #6
   14bc0:	ldr	ip, [sp, #28]
   14bc4:	str	r1, [sp, #32]
   14bc8:	str	r0, [sp, #80]	; 0x50
   14bcc:	ldrd	r6, [sl]
   14bd0:	strd	r2, [ip, #64]	; 0x40
   14bd4:	add	lr, ip, #32
   14bd8:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   14bdc:	ldrd	r0, [sl, #8]
   14be0:	strd	r2, [ip, #56]	; 0x38
   14be4:	ldrd	r2, [sl, #16]
   14be8:	strd	r6, [ip, #32]
   14bec:	mov	ip, #14
   14bf0:	mvn	r7, #92	; 0x5c
   14bf4:	strd	r0, [lr, #8]
   14bf8:	strd	r2, [lr, #16]
   14bfc:	b	13e70 <__assert_fail@plt+0x2aa0>
   14c00:	sub	r2, r8, #4
   14c04:	mov	ip, sl
   14c08:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   14c0c:	mvn	r7, #92	; 0x5c
   14c10:	str	r2, [sp, #32]
   14c14:	ldrd	r2, [ip], #-112	; 0xffffff90
   14c18:	ldr	lr, [sp, #28]
   14c1c:	str	ip, [sp, #80]	; 0x50
   14c20:	mov	ip, #14
   14c24:	strd	r2, [lr, #56]	; 0x38
   14c28:	strd	r0, [lr, #64]	; 0x40
   14c2c:	b	13e70 <__assert_fail@plt+0x2aa0>
   14c30:	ldrd	r2, [sl, #-168]	; 0xffffff58
   14c34:	sub	r0, sl, #224	; 0xe0
   14c38:	sub	r1, r8, #8
   14c3c:	ldr	ip, [sp, #28]
   14c40:	str	r1, [sp, #32]
   14c44:	str	r0, [sp, #80]	; 0x50
   14c48:	ldrd	r6, [sl]
   14c4c:	strd	r2, [ip, #56]	; 0x38
   14c50:	add	lr, ip, #32
   14c54:	ldrd	r2, [sl, #-104]	; 0xffffff98
   14c58:	ldrd	r0, [sl, #8]
   14c5c:	strd	r2, [ip, #64]	; 0x40
   14c60:	b	14be4 <__assert_fail@plt+0x3814>
   14c64:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   14c68:	sub	r1, r8, #4
   14c6c:	str	r1, [sp, #32]
   14c70:	sub	r1, sl, #112	; 0x70
   14c74:	str	r1, [sp, #80]	; 0x50
   14c78:	mov	ip, #14
   14c7c:	mvn	r7, #92	; 0x5c
   14c80:	ldrd	r0, [sl, #8]
   14c84:	ldr	lr, [sp, #28]
   14c88:	strd	r2, [lr, #56]	; 0x38
   14c8c:	strd	r0, [lr, #64]	; 0x40
   14c90:	b	13e70 <__assert_fail@plt+0x2aa0>
   14c94:	ldrd	r0, [sl, #-112]	; 0xffffff90
   14c98:	mov	ip, #0
   14c9c:	ldr	lr, [sp, #28]
   14ca0:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14ca4:	strd	r0, [lr, #56]	; 0x38
   14ca8:	ldr	r0, [sp, #28]
   14cac:	rsbs	r2, r2, #0
   14cb0:	rscs	r3, r3, #0
   14cb4:	movvs	ip, #1
   14cb8:	subs	r1, ip, #0
   14cbc:	strd	r2, [r0, #64]	; 0x40
   14cc0:	bne	13a20 <__assert_fail@plt+0x2650>
   14cc4:	ldrd	r2, [sl, #8]
   14cc8:	rsbs	r2, r2, #0
   14ccc:	rscs	r3, r3, #0
   14cd0:	movvs	r1, #1
   14cd4:	cmp	r1, #0
   14cd8:	ldr	r1, [sp, #28]
   14cdc:	strd	r2, [r1, #40]	; 0x28
   14ce0:	bne	13a20 <__assert_fail@plt+0x2650>
   14ce4:	ldr	r3, [sl, #16]
   14ce8:	sub	r2, r8, #6
   14cec:	mov	ip, #14
   14cf0:	mvn	r7, #92	; 0x5c
   14cf4:	str	r2, [sp, #32]
   14cf8:	sub	r2, sl, #168	; 0xa8
   14cfc:	str	r2, [sp, #80]	; 0x50
   14d00:	str	r3, [r1, #48]	; 0x30
   14d04:	b	13e70 <__assert_fail@plt+0x2aa0>
   14d08:	ldr	r6, [sl, #-208]	; 0xffffff30
   14d0c:	ldr	r3, [sp, #28]
   14d10:	cmp	r6, #3
   14d14:	ldrb	r3, [r3, #181]	; 0xb5
   14d18:	ble	15de0 <__assert_fail@plt+0x4a10>
   14d1c:	cmp	r3, #0
   14d20:	bne	16154 <__assert_fail@plt+0x4d84>
   14d24:	sub	r6, sl, #280	; 0x118
   14d28:	sub	r1, r8, #10
   14d2c:	ldrd	r2, [sl, #-224]	; 0xffffff20
   14d30:	mov	ip, #14
   14d34:	ldr	r8, [sp, #28]
   14d38:	str	r6, [sp, #80]	; 0x50
   14d3c:	ldrd	r6, [sl, #-216]	; 0xffffff28
   14d40:	str	r1, [sp, #32]
   14d44:	ldrd	r0, [sl, #-104]	; 0xffffff98
   14d48:	strd	r2, [r8, #32]
   14d4c:	add	lr, r8, #32
   14d50:	ldrd	r2, [sl, #8]
   14d54:	strd	r6, [r8, #40]	; 0x28
   14d58:	ldrd	r6, [sl, #-208]	; 0xffffff30
   14d5c:	strd	r6, [r8, #48]	; 0x30
   14d60:	mvn	r7, #92	; 0x5c
   14d64:	strd	r0, [r8, #56]	; 0x38
   14d68:	strd	r2, [r8, #64]	; 0x40
   14d6c:	b	13e70 <__assert_fail@plt+0x2aa0>
   14d70:	andeq	pc, r1, r0, ror #6
   14d74:	muleq	r1, ip, r3
   14d78:	sub	r1, r8, #6
   14d7c:	ldrd	r2, [sl, #-104]	; 0xffffff98
   14d80:	str	r1, [sp, #32]
   14d84:	sub	r1, sl, #168	; 0xa8
   14d88:	b	14c74 <__assert_fail@plt+0x38a4>
   14d8c:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   14d90:	sub	r1, sl, #56	; 0x38
   14d94:	ldr	r6, [sp, #28]
   14d98:	strd	r2, [sp]
   14d9c:	ldrd	r2, [sl, #-40]	; 0xffffffd8
   14da0:	mov	r0, r6
   14da4:	strd	r2, [sp, #8]
   14da8:	ldm	r1, {r2, r3}
   14dac:	bl	128b0 <__assert_fail@plt+0x14e0>
   14db0:	mov	lr, r6
   14db4:	ldrd	r6, [sl, #40]	; 0x28
   14db8:	ldr	r1, [sl, #48]	; 0x30
   14dbc:	str	lr, [sp, #28]
   14dc0:	ldrd	r2, [lr, #136]	; 0x88
   14dc4:	ldr	r0, [lr, #144]	; 0x90
   14dc8:	adds	r1, r0, r1
   14dcc:	movvs	ip, #1
   14dd0:	movvc	ip, #0
   14dd4:	str	r1, [lr, #144]	; 0x90
   14dd8:	ldrd	r0, [lr, #128]	; 0x80
   14ddc:	strd	r0, [sp, #80]	; 0x50
   14de0:	adds	r0, r2, r6
   14de4:	adcs	r1, r3, r7
   14de8:	ldrd	r6, [lr, #120]	; 0x78
   14dec:	strd	r0, [lr, #136]	; 0x88
   14df0:	ldrd	r2, [sl, #24]
   14df4:	ldrd	r0, [sp, #80]	; 0x50
   14df8:	strd	r6, [sp, #128]	; 0x80
   14dfc:	ldrd	r6, [sl, #32]
   14e00:	strd	r2, [sp, #32]
   14e04:	movvs	r3, #1
   14e08:	movvc	r3, #0
   14e0c:	orr	ip, ip, r3
   14e10:	adds	r2, r0, r6
   14e14:	ldr	r0, [sp, #28]
   14e18:	adcs	r3, r1, r7
   14e1c:	movvs	lr, #1
   14e20:	movvc	lr, #0
   14e24:	ldrd	r6, [sp, #128]	; 0x80
   14e28:	orr	ip, ip, lr
   14e2c:	mov	lr, r0
   14e30:	strd	r2, [r0, #128]	; 0x80
   14e34:	ldrd	r2, [r0, #112]	; 0x70
   14e38:	ldrd	r0, [sp, #32]
   14e3c:	strd	r2, [sp, #136]	; 0x88
   14e40:	adds	r2, r6, r0
   14e44:	adcs	r3, r7, r1
   14e48:	ldrd	r6, [sl, #8]
   14e4c:	movvs	r1, #1
   14e50:	movvc	r1, #0
   14e54:	orr	ip, ip, r1
   14e58:	ldrd	r0, [lr, #104]	; 0x68
   14e5c:	strd	r2, [lr, #120]	; 0x78
   14e60:	strd	r6, [sp, #32]
   14e64:	ldrd	r6, [sp, #136]	; 0x88
   14e68:	strd	r0, [sp, #80]	; 0x50
   14e6c:	ldrd	r0, [sl, #16]
   14e70:	adds	r2, r6, r0
   14e74:	adcs	r3, r7, r1
   14e78:	movvs	lr, #1
   14e7c:	movvc	lr, #0
   14e80:	orr	ip, ip, lr
   14e84:	ldr	lr, [sp, #28]
   14e88:	ldrd	r6, [lr, #96]	; 0x60
   14e8c:	strd	r2, [lr, #112]	; 0x70
   14e90:	strd	r6, [sp, #128]	; 0x80
   14e94:	ldrd	r0, [sp, #80]	; 0x50
   14e98:	ldrd	r6, [sp, #32]
   14e9c:	adds	r2, r0, r6
   14ea0:	adcs	r3, r1, r7
   14ea4:	ldrd	r6, [sp, #128]	; 0x80
   14ea8:	movvs	r1, #1
   14eac:	movvc	r1, #0
   14eb0:	strd	r2, [lr, #104]	; 0x68
   14eb4:	str	r1, [sp, #32]
   14eb8:	ldrd	r0, [sl]
   14ebc:	adds	r2, r6, r0
   14ec0:	adcs	r3, r7, r1
   14ec4:	ldr	r1, [sp, #32]
   14ec8:	strd	r2, [lr, #96]	; 0x60
   14ecc:	orrvc	ip, ip, r1
   14ed0:	movvs	ip, #1
   14ed4:	cmp	ip, #0
   14ed8:	bne	13a20 <__assert_fail@plt+0x2650>
   14edc:	sub	r2, sl, #112	; 0x70
   14ee0:	mov	r3, #1
   14ee4:	mov	ip, #24
   14ee8:	mvn	r7, #92	; 0x5c
   14eec:	str	r2, [sp, #80]	; 0x50
   14ef0:	sub	r2, r8, #4
   14ef4:	strb	r3, [lr, #153]	; 0x99
   14ef8:	str	r2, [sp, #32]
   14efc:	b	13e70 <__assert_fail@plt+0x2aa0>
   14f00:	ldrd	r2, [sl, #8]
   14f04:	sub	r1, r8, #2
   14f08:	mvn	r7, #92	; 0x5c
   14f0c:	ldr	r0, [sp, #28]
   14f10:	strd	r2, [sp]
   14f14:	ldrd	r2, [sl, #16]
   14f18:	str	r1, [sp, #32]
   14f1c:	sub	r1, sl, #56	; 0x38
   14f20:	strd	r2, [sp, #8]
   14f24:	str	r1, [sp, #80]	; 0x50
   14f28:	ldm	sl, {r2, r3}
   14f2c:	bl	128b0 <__assert_fail@plt+0x14e0>
   14f30:	mov	ip, #23
   14f34:	b	13e70 <__assert_fail@plt+0x2aa0>
   14f38:	ldr	r3, [sl, #8]
   14f3c:	mov	r1, #0
   14f40:	mvn	r0, #0
   14f44:	ldr	r2, [sl, #12]
   14f48:	adds	ip, r3, #-2147483648	; 0x80000000
   14f4c:	adc	r2, r2, #0
   14f50:	str	ip, [sp, #216]	; 0xd8
   14f54:	str	r2, [sp, #220]	; 0xdc
   14f58:	ldrd	r6, [sp, #216]	; 0xd8
   14f5c:	cmp	r7, r1
   14f60:	cmpeq	r6, r0
   14f64:	bhi	13a20 <__assert_fail@plt+0x2650>
   14f68:	mov	r2, #0
   14f6c:	sub	r1, sl, #56	; 0x38
   14f70:	mov	ip, #22
   14f74:	mvn	r7, #91	; 0x5b
   14f78:	str	r3, [sp, #360]	; 0x168
   14f7c:	sub	r3, r8, #2
   14f80:	str	r3, [sp, #32]
   14f84:	str	r1, [sp, #80]	; 0x50
   14f88:	str	r2, [sp, #364]	; 0x16c
   14f8c:	b	13e70 <__assert_fail@plt+0x2aa0>
   14f90:	ldrd	r6, [sl, #-48]	; 0xffffffd0
   14f94:	ldr	r3, [sl, #-40]	; 0xffffffd8
   14f98:	cmp	r3, #2
   14f9c:	ldrd	r2, [sl]
   14fa0:	strd	r2, [sp, #32]
   14fa4:	bgt	15e44 <__assert_fail@plt+0x4a74>
   14fa8:	cmp	r2, #0
   14fac:	sbcs	r3, r3, #0
   14fb0:	blt	161f4 <__assert_fail@plt+0x4e24>
   14fb4:	cmp	r7, r6, asr #31
   14fb8:	mov	lr, #0
   14fbc:	bne	16464 <__assert_fail@plt+0x5094>
   14fc0:	mov	r3, #60	; 0x3c
   14fc4:	smull	r6, r7, r6, r3
   14fc8:	mov	r2, r6
   14fcc:	mov	r3, r7
   14fd0:	ldrb	ip, [sl, #-56]	; 0xffffffc8
   14fd4:	mov	r1, r3
   14fd8:	ldrd	r6, [sp, #32]
   14fdc:	cmp	ip, #0
   14fe0:	beq	1609c <__assert_fail@plt+0x4ccc>
   14fe4:	subs	r2, r2, r6
   14fe8:	mov	r1, #0
   14fec:	sbcs	r3, r3, r7
   14ff0:	mov	r0, r2
   14ff4:	movvs	r1, #1
   14ff8:	mov	r7, r3
   14ffc:	orrs	r3, lr, r1
   15000:	bne	13a20 <__assert_fail@plt+0x2650>
   15004:	adds	r3, r0, #1440	; 0x5a0
   15008:	str	r3, [sp, #200]	; 0xc8
   1500c:	adc	r3, r7, #0
   15010:	str	r3, [sp, #204]	; 0xcc
   15014:	ldrd	r2, [sp, #200]	; 0xc8
   15018:	cmp	r3, #0
   1501c:	cmpeq	r2, #2880	; 0xb40
   15020:	bhi	13a20 <__assert_fail@plt+0x2650>
   15024:	rsb	r2, r0, r0, lsl #4
   15028:	ldrd	r6, [sl, #-112]	; 0xffffff90
   1502c:	lsl	r2, r2, #2
   15030:	asr	r3, r2, #31
   15034:	adds	r0, r2, r6
   15038:	adcs	r1, r3, r7
   1503c:	asr	r3, r0, #31
   15040:	movvs	ip, #1
   15044:	movvc	ip, #0
   15048:	cmp	r1, r3
   1504c:	ldr	r3, [sp, #28]
   15050:	cmpeq	r0, r0
   15054:	movne	ip, #1
   15058:	cmp	ip, #0
   1505c:	str	r0, [r3, #24]
   15060:	bne	13a20 <__assert_fail@plt+0x2650>
   15064:	sub	r3, sl, #168	; 0xa8
   15068:	mov	ip, #12
   1506c:	mvn	r7, #92	; 0x5c
   15070:	str	r3, [sp, #80]	; 0x50
   15074:	sub	r3, r8, #6
   15078:	str	r3, [sp, #32]
   1507c:	b	13e70 <__assert_fail@plt+0x2aa0>
   15080:	ldr	lr, [sp, #28]
   15084:	movw	r3, #40336	; 0x9d90
   15088:	movt	r3, #65535	; 0xffff
   1508c:	ldrd	r6, [sl, #40]	; 0x28
   15090:	ldr	r1, [sl, #48]	; 0x30
   15094:	str	r3, [lr, #24]
   15098:	ldrd	r2, [lr, #136]	; 0x88
   1509c:	ldr	r0, [lr, #144]	; 0x90
   150a0:	adds	r1, r0, r1
   150a4:	movvs	ip, #1
   150a8:	movvc	ip, #0
   150ac:	str	r1, [lr, #144]	; 0x90
   150b0:	ldrd	r0, [lr, #128]	; 0x80
   150b4:	strd	r0, [sp, #80]	; 0x50
   150b8:	adds	r0, r2, r6
   150bc:	adcs	r1, r3, r7
   150c0:	ldrd	r6, [lr, #120]	; 0x78
   150c4:	strd	r0, [lr, #136]	; 0x88
   150c8:	ldrd	r2, [sl, #24]
   150cc:	ldrd	r0, [sp, #80]	; 0x50
   150d0:	strd	r6, [sp, #128]	; 0x80
   150d4:	ldrd	r6, [sl, #32]
   150d8:	strd	r2, [sp, #32]
   150dc:	movvs	r3, #1
   150e0:	movvc	r3, #0
   150e4:	orr	ip, ip, r3
   150e8:	adds	r2, r0, r6
   150ec:	ldr	r0, [sp, #28]
   150f0:	adcs	r3, r1, r7
   150f4:	movvs	lr, #1
   150f8:	movvc	lr, #0
   150fc:	ldrd	r6, [sp, #128]	; 0x80
   15100:	orr	ip, ip, lr
   15104:	mov	lr, r0
   15108:	strd	r2, [r0, #128]	; 0x80
   1510c:	ldrd	r2, [r0, #112]	; 0x70
   15110:	ldrd	r0, [sp, #32]
   15114:	strd	r2, [sp, #136]	; 0x88
   15118:	adds	r2, r6, r0
   1511c:	adcs	r3, r7, r1
   15120:	ldrd	r6, [sl, #8]
   15124:	movvs	r1, #1
   15128:	movvc	r1, #0
   1512c:	orr	ip, ip, r1
   15130:	ldrd	r0, [lr, #104]	; 0x68
   15134:	strd	r2, [lr, #120]	; 0x78
   15138:	strd	r6, [sp, #32]
   1513c:	ldrd	r6, [sp, #136]	; 0x88
   15140:	strd	r0, [sp, #80]	; 0x50
   15144:	ldrd	r0, [sl, #16]
   15148:	adds	r2, r6, r0
   1514c:	adcs	r3, r7, r1
   15150:	movvs	lr, #1
   15154:	movvc	lr, #0
   15158:	orr	ip, ip, lr
   1515c:	ldr	lr, [sp, #28]
   15160:	ldrd	r6, [lr, #96]	; 0x60
   15164:	strd	r2, [lr, #112]	; 0x70
   15168:	strd	r6, [sp, #128]	; 0x80
   1516c:	ldrd	r6, [sp, #32]
   15170:	ldrd	r0, [sp, #80]	; 0x50
   15174:	adds	r2, r0, r6
   15178:	adcs	r3, r1, r7
   1517c:	ldrd	r6, [sp, #128]	; 0x80
   15180:	movvs	r1, #1
   15184:	movvc	r1, #0
   15188:	strd	r2, [lr, #104]	; 0x68
   1518c:	str	r1, [sp, #32]
   15190:	ldrd	r0, [sl]
   15194:	adds	r2, r6, r0
   15198:	adcs	r3, r7, r1
   1519c:	ldr	r1, [sp, #32]
   151a0:	strd	r2, [lr, #96]	; 0x60
   151a4:	orrvc	r0, ip, r1
   151a8:	movvs	r0, #1
   151ac:	cmp	r0, #0
   151b0:	bne	13a20 <__assert_fail@plt+0x2650>
   151b4:	movw	r1, #64692	; 0xfcb4
   151b8:	movt	r1, #1
   151bc:	mov	r3, #1
   151c0:	mov	r6, lr
   151c4:	strb	r3, [lr, #153]	; 0x99
   151c8:	sub	r3, r8, #4
   151cc:	mov	r2, #5
   151d0:	str	r3, [sp, #32]
   151d4:	bl	11130 <dcgettext@plt>
   151d8:	ldrb	r3, [r6, #181]	; 0xb5
   151dc:	sub	r2, sl, #112	; 0x70
   151e0:	mov	r1, r6
   151e4:	str	r2, [sp, #80]	; 0x50
   151e8:	cmp	r3, #0
   151ec:	moveq	ip, #12
   151f0:	mvneq	r7, #92	; 0x5c
   151f4:	beq	13e70 <__assert_fail@plt+0x2aa0>
   151f8:	bl	12e04 <__assert_fail@plt+0x1a34>
   151fc:	mvn	r7, #92	; 0x5c
   15200:	mov	ip, #12
   15204:	b	13e70 <__assert_fail@plt+0x2aa0>
   15208:	ldr	lr, [sp, #28]
   1520c:	ldrd	r6, [sl, #40]	; 0x28
   15210:	ldr	r1, [sl, #48]	; 0x30
   15214:	ldrd	r2, [lr, #136]	; 0x88
   15218:	ldr	r0, [lr, #144]	; 0x90
   1521c:	adds	r1, r0, r1
   15220:	movvs	ip, #1
   15224:	movvc	ip, #0
   15228:	str	r1, [lr, #144]	; 0x90
   1522c:	ldrd	r0, [lr, #128]	; 0x80
   15230:	strd	r0, [sp, #80]	; 0x50
   15234:	adds	r0, r2, r6
   15238:	adcs	r1, r3, r7
   1523c:	ldrd	r6, [lr, #120]	; 0x78
   15240:	strd	r0, [lr, #136]	; 0x88
   15244:	ldrd	r2, [sl, #24]
   15248:	ldrd	r0, [sp, #80]	; 0x50
   1524c:	strd	r6, [sp, #128]	; 0x80
   15250:	ldrd	r6, [sl, #32]
   15254:	strd	r2, [sp, #32]
   15258:	movvs	r3, #1
   1525c:	movvc	r3, #0
   15260:	orr	ip, ip, r3
   15264:	adds	r2, r0, r6
   15268:	ldr	r0, [sp, #28]
   1526c:	adcs	r3, r1, r7
   15270:	movvs	lr, #1
   15274:	movvc	lr, #0
   15278:	ldrd	r6, [sp, #128]	; 0x80
   1527c:	orr	ip, ip, lr
   15280:	mov	lr, r0
   15284:	strd	r2, [r0, #128]	; 0x80
   15288:	ldrd	r2, [r0, #112]	; 0x70
   1528c:	ldrd	r0, [sp, #32]
   15290:	strd	r2, [sp, #136]	; 0x88
   15294:	adds	r2, r6, r0
   15298:	adcs	r3, r7, r1
   1529c:	ldrd	r6, [sl, #8]
   152a0:	movvs	r1, #1
   152a4:	movvc	r1, #0
   152a8:	orr	ip, ip, r1
   152ac:	ldrd	r0, [lr, #104]	; 0x68
   152b0:	strd	r2, [lr, #120]	; 0x78
   152b4:	strd	r6, [sp, #32]
   152b8:	ldrd	r6, [sp, #136]	; 0x88
   152bc:	strd	r0, [sp, #80]	; 0x50
   152c0:	ldrd	r0, [sl, #16]
   152c4:	adds	r2, r6, r0
   152c8:	adcs	r3, r7, r1
   152cc:	movvs	lr, #1
   152d0:	movvc	lr, #0
   152d4:	orr	ip, ip, lr
   152d8:	ldr	lr, [sp, #28]
   152dc:	strd	r2, [lr, #112]	; 0x70
   152e0:	ldrd	r2, [lr, #96]	; 0x60
   152e4:	strd	r2, [sp, #128]	; 0x80
   152e8:	ldrd	r0, [sp, #80]	; 0x50
   152ec:	ldrd	r6, [sp, #32]
   152f0:	adds	r2, r0, r6
   152f4:	adcs	r3, r1, r7
   152f8:	ldr	r1, [sl, #-56]	; 0xffffffc8
   152fc:	ldrd	r6, [sp, #128]	; 0x80
   15300:	strd	r2, [lr, #104]	; 0x68
   15304:	str	r1, [sp, #32]
   15308:	movvs	r1, #1
   1530c:	movvc	r1, #0
   15310:	str	r1, [sp, #80]	; 0x50
   15314:	ldrd	r0, [sl]
   15318:	adds	r2, r6, r0
   1531c:	mov	r6, lr
   15320:	adcs	r3, r7, r1
   15324:	ldr	r1, [sp, #80]	; 0x50
   15328:	strd	r2, [lr, #96]	; 0x60
   1532c:	orrvc	r0, ip, r1
   15330:	movvs	r0, #1
   15334:	ldr	ip, [sp, #32]
   15338:	cmp	r0, #0
   1533c:	str	ip, [lr, #24]
   15340:	bne	13a20 <__assert_fail@plt+0x2650>
   15344:	movw	r1, #64692	; 0xfcb4
   15348:	movt	r1, #1
   1534c:	mov	r3, #1
   15350:	b	151c4 <__assert_fail@plt+0x3df4>
   15354:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   15358:	mov	r1, #0
   1535c:	mov	r7, #0
   15360:	mov	r6, #0
   15364:	sub	ip, sl, #112	; 0x70
   15368:	sub	r0, r8, #4
   1536c:	strd	r6, [sp, #16]
   15370:	str	r1, [sp, #40]	; 0x28
   15374:	str	r1, [sp, #412]	; 0x19c
   15378:	mov	r1, r7
   1537c:	strd	r2, [r5, #-8]
   15380:	str	r0, [sp, #32]
   15384:	str	r6, [sp, #44]	; 0x2c
   15388:	str	r7, [sp, #48]	; 0x30
   1538c:	mov	r7, #60	; 0x3c
   15390:	str	r6, [sp, #52]	; 0x34
   15394:	str	r1, [sp, #56]	; 0x38
   15398:	str	r6, [sp, #60]	; 0x3c
   1539c:	str	r1, [sp, #64]	; 0x40
   153a0:	str	r6, [sp, #68]	; 0x44
   153a4:	str	r1, [sp, #72]	; 0x48
   153a8:	str	ip, [sp, #80]	; 0x50
   153ac:	mov	ip, #18
   153b0:	b	13e70 <__assert_fail@plt+0x2aa0>
   153b4:	mov	r1, #0
   153b8:	sub	ip, sl, #56	; 0x38
   153bc:	mov	r6, r1
   153c0:	mov	r7, r1
   153c4:	sub	r3, r8, #2
   153c8:	mov	r2, #56	; 0x38
   153cc:	mov	r0, r4
   153d0:	str	r3, [sp, #32]
   153d4:	strd	r6, [sp, #60]	; 0x3c
   153d8:	mvn	r7, #92	; 0x5c
   153dc:	str	r1, [sp, #68]	; 0x44
   153e0:	str	ip, [sp, #80]	; 0x50
   153e4:	bl	112c8 <memset@plt>
   153e8:	mov	r2, #1
   153ec:	mov	r3, #0
   153f0:	mov	ip, #17
   153f4:	strd	r2, [sp, #16]
   153f8:	str	r6, [sp, #40]	; 0x28
   153fc:	str	r6, [sp, #44]	; 0x2c
   15400:	str	r6, [sp, #48]	; 0x30
   15404:	str	r6, [sp, #52]	; 0x34
   15408:	str	r6, [sp, #56]	; 0x38
   1540c:	str	r6, [sp, #72]	; 0x48
   15410:	b	13e70 <__assert_fail@plt+0x2aa0>
   15414:	mvn	r2, #0
   15418:	mvn	r3, #0
   1541c:	str	r8, [sp, #32]
   15420:	mov	ip, #25
   15424:	mov	r7, #43	; 0x2b
   15428:	str	sl, [sp, #80]	; 0x50
   1542c:	strd	r2, [r5, #-8]
   15430:	b	13e70 <__assert_fail@plt+0x2aa0>
   15434:	ldrd	r0, [sl, #-56]	; 0xffffffc8
   15438:	ldr	r3, [sl]
   1543c:	ldrd	r6, [sl, #-16]
   15440:	strd	r0, [sp, #32]
   15444:	ldrd	r0, [sl, #-48]	; 0xffffffd0
   15448:	cmp	r3, #0
   1544c:	ldrd	r2, [sl, #-40]	; 0xffffffd8
   15450:	strd	r0, [sp, #80]	; 0x50
   15454:	strd	r2, [sp, #128]	; 0x80
   15458:	ldrd	r2, [sl, #-32]	; 0xffffffe0
   1545c:	strd	r2, [sp, #136]	; 0x88
   15460:	ldrd	r2, [sl, #-24]	; 0xffffffe8
   15464:	strd	r2, [sp, #144]	; 0x90
   15468:	ldr	r2, [sp, #28]
   1546c:	ldr	r3, [sl, #-8]
   15470:	ldrd	r0, [r2, #96]	; 0x60
   15474:	strd	r0, [sp, #184]	; 0xb8
   15478:	ldrd	r0, [r2, #104]	; 0x68
   1547c:	strd	r0, [sp, #176]	; 0xb0
   15480:	ldrd	r0, [r2, #112]	; 0x70
   15484:	strd	r0, [sp, #168]	; 0xa8
   15488:	ldrd	r0, [r2, #120]	; 0x78
   1548c:	strd	r0, [sp, #160]	; 0xa0
   15490:	ldrd	r0, [r2, #128]	; 0x80
   15494:	strd	r0, [sp, #152]	; 0x98
   15498:	ldrd	r0, [r2, #136]	; 0x88
   1549c:	ldr	r2, [r2, #144]	; 0x90
   154a0:	blt	15f30 <__assert_fail@plt+0x4b60>
   154a4:	adds	r3, r2, r3
   154a8:	movvs	lr, #1
   154ac:	movvc	lr, #0
   154b0:	ldr	ip, [sp, #28]
   154b4:	adds	r2, r0, r6
   154b8:	str	r3, [sp, #232]	; 0xe8
   154bc:	adcs	r3, r1, r7
   154c0:	ldrd	r0, [sp, #144]	; 0x90
   154c4:	strd	r2, [sp, #224]	; 0xe0
   154c8:	movvs	r3, #1
   154cc:	movvc	r3, #0
   154d0:	str	r3, [sp, #236]	; 0xec
   154d4:	ldrd	r2, [sp, #152]	; 0x98
   154d8:	adds	r6, r2, r0
   154dc:	adcs	r7, r3, r1
   154e0:	ldrd	r0, [sp, #224]	; 0xe0
   154e4:	ldr	r3, [sp, #232]	; 0xe8
   154e8:	strd	r6, [sp, #144]	; 0x90
   154ec:	ldrd	r6, [sp, #160]	; 0xa0
   154f0:	strd	r0, [ip, #136]	; 0x88
   154f4:	str	r3, [ip, #144]	; 0x90
   154f8:	ldr	r3, [sp, #236]	; 0xec
   154fc:	orr	lr, lr, r3
   15500:	movvs	r3, #1
   15504:	movvc	r3, #0
   15508:	str	r3, [sp, #232]	; 0xe8
   1550c:	ldrd	r2, [sp, #136]	; 0x88
   15510:	adds	r0, r6, r2
   15514:	adcs	r1, r7, r3
   15518:	ldr	r3, [sp, #232]	; 0xe8
   1551c:	strd	r0, [sp, #136]	; 0x88
   15520:	ldrd	r0, [sp, #168]	; 0xa8
   15524:	orr	lr, lr, r3
   15528:	ldrd	r2, [sp, #144]	; 0x90
   1552c:	strd	r2, [ip, #128]	; 0x80
   15530:	movvs	r3, #1
   15534:	movvc	r3, #0
   15538:	str	r3, [sp, #144]	; 0x90
   1553c:	ldrd	r2, [sp, #128]	; 0x80
   15540:	adds	r6, r0, r2
   15544:	adcs	r7, r1, r3
   15548:	ldrd	r0, [sp, #136]	; 0x88
   1554c:	ldr	r3, [sp, #144]	; 0x90
   15550:	strd	r6, [sp, #128]	; 0x80
   15554:	ldrd	r6, [sp, #176]	; 0xb0
   15558:	strd	r0, [ip, #120]	; 0x78
   1555c:	orr	lr, lr, r3
   15560:	movvs	r3, #1
   15564:	movvc	r3, #0
   15568:	str	r3, [sp, #144]	; 0x90
   1556c:	ldrd	r2, [sp, #80]	; 0x50
   15570:	adds	r0, r6, r2
   15574:	adcs	r1, r7, r3
   15578:	ldr	r3, [sp, #144]	; 0x90
   1557c:	strd	r0, [sp, #80]	; 0x50
   15580:	orr	lr, lr, r3
   15584:	ldrd	r2, [sp, #128]	; 0x80
   15588:	strd	r2, [ip, #112]	; 0x70
   1558c:	movvs	r3, #1
   15590:	movvc	r3, #0
   15594:	ldrd	r6, [sp, #184]	; 0xb8
   15598:	str	r3, [sp, #128]	; 0x80
   1559c:	ldrd	r2, [sp, #32]
   155a0:	adds	r0, r6, r2
   155a4:	adcs	r1, r7, r3
   155a8:	ldrd	r6, [sp, #80]	; 0x50
   155ac:	ldr	r3, [sp, #128]	; 0x80
   155b0:	strd	r0, [ip, #96]	; 0x60
   155b4:	strd	r6, [ip, #104]	; 0x68
   155b8:	orrvc	r3, lr, r3
   155bc:	movvs	r3, #1
   155c0:	cmp	r3, #0
   155c4:	bne	13a20 <__assert_fail@plt+0x2650>
   155c8:	sub	r2, sl, #112	; 0x70
   155cc:	mov	r3, #1
   155d0:	mov	ip, #16
   155d4:	mvn	r7, #92	; 0x5c
   155d8:	str	r2, [sp, #80]	; 0x50
   155dc:	sub	r2, r8, #4
   155e0:	str	r2, [sp, #32]
   155e4:	ldr	r2, [sp, #28]
   155e8:	strb	r3, [r2, #153]	; 0x99
   155ec:	b	13e70 <__assert_fail@plt+0x2aa0>
   155f0:	mov	r1, #0
   155f4:	sub	r3, r8, #4
   155f8:	mov	r6, r1
   155fc:	mov	r7, r1
   15600:	mov	r2, #56	; 0x38
   15604:	mov	r0, r4
   15608:	str	r3, [sp, #32]
   1560c:	strd	r6, [sp, #60]	; 0x3c
   15610:	bl	112c8 <memset@plt>
   15614:	mov	r1, r6
   15618:	str	r6, [sp, #52]	; 0x34
   1561c:	str	r6, [sp, #68]	; 0x44
   15620:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   15624:	b	14160 <__assert_fail@plt+0x2d90>
   15628:	mov	r2, #56	; 0x38
   1562c:	mov	r1, #0
   15630:	mov	r0, r4
   15634:	bl	112c8 <memset@plt>
   15638:	mov	r1, sl
   1563c:	mov	r0, #0
   15640:	ldrd	r2, [r1], #-56	; 0xffffffc8
   15644:	sub	ip, r8, #2
   15648:	str	ip, [sp, #32]
   1564c:	mov	ip, #19
   15650:	str	r0, [sp, #44]	; 0x2c
   15654:	str	r0, [sp, #60]	; 0x3c
   15658:	str	r0, [sp, #68]	; 0x44
   1565c:	str	r1, [sp, #80]	; 0x50
   15660:	mov	r1, #0
   15664:	strd	r0, [sp, #16]
   15668:	str	r1, [sp, #48]	; 0x30
   1566c:	str	r1, [sp, #64]	; 0x40
   15670:	str	r1, [sp, #72]	; 0x48
   15674:	b	1436c <__assert_fail@plt+0x2f9c>
   15678:	mov	r1, #0
   1567c:	sub	r3, r8, #4
   15680:	mov	r6, r1
   15684:	mov	r7, r1
   15688:	mov	r2, #56	; 0x38
   1568c:	mov	r0, r4
   15690:	str	r3, [sp, #32]
   15694:	strd	r6, [sp, #60]	; 0x3c
   15698:	mov	r7, #60	; 0x3c
   1569c:	bl	112c8 <memset@plt>
   156a0:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   156a4:	mov	ip, #18
   156a8:	strd	r2, [sp, #16]
   156ac:	sub	r3, sl, #112	; 0x70
   156b0:	str	r6, [sp, #40]	; 0x28
   156b4:	str	r6, [sp, #44]	; 0x2c
   156b8:	str	r6, [sp, #48]	; 0x30
   156bc:	str	r6, [sp, #52]	; 0x34
   156c0:	str	r6, [sp, #56]	; 0x38
   156c4:	str	r6, [sp, #68]	; 0x44
   156c8:	str	r6, [sp, #72]	; 0x48
   156cc:	str	r3, [sp, #80]	; 0x50
   156d0:	b	13e70 <__assert_fail@plt+0x2aa0>
   156d4:	ldr	r3, [sl, #8]
   156d8:	mov	r1, #0
   156dc:	mvn	r0, #0
   156e0:	ldr	r2, [sl, #12]
   156e4:	adds	ip, r3, #-2147483648	; 0x80000000
   156e8:	adc	r2, r2, #0
   156ec:	str	ip, [sp, #208]	; 0xd0
   156f0:	str	r2, [sp, #212]	; 0xd4
   156f4:	ldrd	r6, [sp, #208]	; 0xd0
   156f8:	cmp	r7, r1
   156fc:	cmpeq	r6, r0
   15700:	bhi	13a20 <__assert_fail@plt+0x2650>
   15704:	mov	r2, #0
   15708:	sub	r1, sl, #56	; 0x38
   1570c:	mov	ip, #21
   15710:	mvn	r7, #92	; 0x5c
   15714:	str	r3, [sp, #360]	; 0x168
   15718:	sub	r3, r8, #2
   1571c:	str	r3, [sp, #32]
   15720:	str	r1, [sp, #80]	; 0x50
   15724:	str	r2, [sp, #364]	; 0x16c
   15728:	b	13e70 <__assert_fail@plt+0x2aa0>
   1572c:	sub	r3, sl, #56	; 0x38
   15730:	mov	r6, #0
   15734:	mov	r7, #0
   15738:	mov	r1, #0
   1573c:	mov	r2, #56	; 0x38
   15740:	mov	r0, r4
   15744:	str	r3, [sp, #80]	; 0x50
   15748:	sub	r3, r8, #2
   1574c:	strd	r6, [sp, #16]
   15750:	str	r3, [sp, #32]
   15754:	bl	112c8 <memset@plt>
   15758:	mov	r3, r7
   1575c:	mov	ip, #17
   15760:	str	r6, [sp, #44]	; 0x2c
   15764:	mov	r1, r3
   15768:	mvn	r7, #92	; 0x5c
   1576c:	str	r3, [sp, #48]	; 0x30
   15770:	str	r6, [sp, #52]	; 0x34
   15774:	str	r3, [sp, #72]	; 0x48
   15778:	mov	r3, #0
   1577c:	str	r3, [sp, #40]	; 0x28
   15780:	mov	r3, #1
   15784:	str	r1, [sp, #56]	; 0x38
   15788:	str	r3, [sp, #60]	; 0x3c
   1578c:	mov	r3, #0
   15790:	str	r6, [sp, #68]	; 0x44
   15794:	str	r3, [sp, #64]	; 0x40
   15798:	b	13e70 <__assert_fail@plt+0x2aa0>
   1579c:	mov	r6, #0
   157a0:	mov	r7, #0
   157a4:	sub	r3, r8, #4
   157a8:	mov	r1, #0
   157ac:	mov	r2, #56	; 0x38
   157b0:	mov	r0, r4
   157b4:	strd	r6, [sp, #16]
   157b8:	str	r3, [sp, #32]
   157bc:	str	r6, [sp, #68]	; 0x44
   157c0:	bl	112c8 <memset@plt>
   157c4:	ldr	r1, [sl, #-48]	; 0xffffffd0
   157c8:	sub	r3, sl, #112	; 0x70
   157cc:	str	r6, [sp, #44]	; 0x2c
   157d0:	str	r7, [sp, #48]	; 0x30
   157d4:	str	r6, [sp, #52]	; 0x34
   157d8:	str	r7, [sp, #56]	; 0x38
   157dc:	str	r1, [sp, #60]	; 0x3c
   157e0:	str	r7, [sp, #72]	; 0x48
   157e4:	str	r3, [sp, #80]	; 0x50
   157e8:	ldr	r3, [sl, #-44]	; 0xffffffd4
   157ec:	b	141dc <__assert_fail@plt+0x2e0c>
   157f0:	ldr	r1, [sp, #28]
   157f4:	ldrd	r6, [sl, #-48]	; 0xffffffd0
   157f8:	ldr	r2, [sl, #-40]	; 0xffffffd8
   157fc:	ldr	r3, [r1, #176]	; 0xb0
   15800:	cmp	r2, #2
   15804:	add	r3, r3, #1
   15808:	str	r3, [r1, #176]	; 0xb0
   1580c:	ldrd	r2, [sl]
   15810:	strd	r2, [sp, #32]
   15814:	bgt	15eb8 <__assert_fail@plt+0x4ae8>
   15818:	cmp	r2, #0
   1581c:	sbcs	r3, r3, #0
   15820:	blt	16338 <__assert_fail@plt+0x4f68>
   15824:	cmp	r7, r6, asr #31
   15828:	mov	lr, #0
   1582c:	bne	164c4 <__assert_fail@plt+0x50f4>
   15830:	mov	r3, #60	; 0x3c
   15834:	smull	r6, r7, r6, r3
   15838:	mov	r2, r6
   1583c:	mov	r3, r7
   15840:	ldrb	ip, [sl, #-56]	; 0xffffffc8
   15844:	mov	r1, r3
   15848:	ldrd	r6, [sp, #32]
   1584c:	cmp	ip, #0
   15850:	beq	16080 <__assert_fail@plt+0x4cb0>
   15854:	subs	r2, r2, r6
   15858:	mov	r1, #0
   1585c:	sbcs	r3, r3, r7
   15860:	mov	r0, r2
   15864:	movvs	r1, #1
   15868:	mov	r7, r3
   1586c:	orrs	r3, lr, r1
   15870:	bne	13a20 <__assert_fail@plt+0x2650>
   15874:	adds	r3, r0, #1440	; 0x5a0
   15878:	str	r3, [sp, #192]	; 0xc0
   1587c:	adc	r3, r7, #0
   15880:	str	r3, [sp, #196]	; 0xc4
   15884:	ldrd	r2, [sp, #192]	; 0xc0
   15888:	cmp	r3, #0
   1588c:	cmpeq	r2, #2880	; 0xb40
   15890:	bhi	13a20 <__assert_fail@plt+0x2650>
   15894:	sub	r3, sl, #112	; 0x70
   15898:	rsb	r2, r0, r0, lsl #4
   1589c:	mov	ip, #10
   158a0:	mvn	r7, #26
   158a4:	str	r3, [sp, #80]	; 0x50
   158a8:	sub	r3, r8, #4
   158ac:	str	r3, [sp, #32]
   158b0:	lsl	r3, r2, #2
   158b4:	ldr	r2, [sp, #28]
   158b8:	str	r3, [r2, #24]
   158bc:	b	13e70 <__assert_fail@plt+0x2aa0>
   158c0:	ldrd	r6, [sl, #-160]	; 0xffffff60
   158c4:	sub	r0, r8, #12
   158c8:	sub	r1, sl, #272	; 0x110
   158cc:	mov	ip, #2
   158d0:	ldrd	r2, [sl, #-56]	; 0xffffffc8
   158d4:	str	r0, [sp, #32]
   158d8:	ldr	lr, [sp, #28]
   158dc:	strd	r6, [sp, #128]	; 0x80
   158e0:	mov	r7, #20
   158e4:	ldrd	r0, [r1]
   158e8:	str	ip, [lr, #28]
   158ec:	sub	ip, sl, #336	; 0x150
   158f0:	strd	r2, [lr, #88]	; 0x58
   158f4:	ldrd	r2, [sp, #128]	; 0x80
   158f8:	strd	r0, [lr, #72]	; 0x48
   158fc:	str	ip, [sp, #80]	; 0x50
   15900:	mov	ip, #8
   15904:	strd	r2, [lr, #80]	; 0x50
   15908:	b	13e70 <__assert_fail@plt+0x2aa0>
   1590c:	sub	r1, r8, #8
   15910:	sub	r6, sl, #224	; 0xe0
   15914:	ldrd	r2, [sl, #-48]	; 0xffffffd0
   15918:	mov	ip, #0
   1591c:	mov	lr, #2
   15920:	str	r1, [sp, #32]
   15924:	mov	r7, #20
   15928:	str	r6, [sp, #80]	; 0x50
   1592c:	ldrd	r0, [sl, #-160]	; 0xffffff60
   15930:	ldr	r6, [sp, #28]
   15934:	str	lr, [r6, #28]
   15938:	strd	r0, [r6, #72]	; 0x48
   1593c:	strd	r2, [r6, #80]	; 0x50
   15940:	str	ip, [r6, #88]	; 0x58
   15944:	str	ip, [r6, #92]	; 0x5c
   15948:	mov	ip, #8
   1594c:	b	13e70 <__assert_fail@plt+0x2aa0>
   15950:	ldrd	r2, [sl, #8]
   15954:	sub	r1, r8, #4
   15958:	mov	ip, #25
   1595c:	mov	r7, #43	; 0x2b
   15960:	str	r1, [sp, #32]
   15964:	sub	r1, sl, #112	; 0x70
   15968:	str	r1, [sp, #80]	; 0x50
   1596c:	strd	r2, [r5, #-8]
   15970:	b	13e70 <__assert_fail@plt+0x2aa0>
   15974:	mov	r6, #0
   15978:	mov	r7, #0
   1597c:	sub	r3, r8, #4
   15980:	mov	r1, #0
   15984:	mov	r2, #56	; 0x38
   15988:	mov	r0, r4
   1598c:	strd	r6, [sp, #16]
   15990:	str	r3, [sp, #32]
   15994:	str	r6, [sp, #68]	; 0x44
   15998:	bl	112c8 <memset@plt>
   1599c:	mov	r1, r7
   159a0:	mov	r3, r7
   159a4:	str	r6, [sp, #44]	; 0x2c
   159a8:	mov	ip, #18
   159ac:	mov	r7, #60	; 0x3c
   159b0:	str	r1, [sp, #48]	; 0x30
   159b4:	str	r6, [sp, #52]	; 0x34
   159b8:	str	r1, [sp, #72]	; 0x48
   159bc:	ldr	r1, [sl, #-48]	; 0xffffffd0
   159c0:	str	r1, [sp, #60]	; 0x3c
   159c4:	mov	r1, r3
   159c8:	sub	r3, sl, #112	; 0x70
   159cc:	str	r1, [sp, #56]	; 0x38
   159d0:	str	r3, [sp, #80]	; 0x50
   159d4:	ldr	r3, [sl, #-44]	; 0xffffffd4
   159d8:	str	r3, [sp, #64]	; 0x40
   159dc:	mov	r3, #0
   159e0:	str	r3, [sp, #40]	; 0x28
   159e4:	b	13e70 <__assert_fail@plt+0x2aa0>
   159e8:	mov	r6, #0
   159ec:	mov	r7, #0
   159f0:	sub	r3, r8, #4
   159f4:	mov	r1, #0
   159f8:	mov	r2, #56	; 0x38
   159fc:	mov	r0, r4
   15a00:	strd	r6, [sp, #16]
   15a04:	str	r3, [sp, #32]
   15a08:	str	r6, [sp, #60]	; 0x3c
   15a0c:	bl	112c8 <memset@plt>
   15a10:	mov	r1, r7
   15a14:	mov	r3, r7
   15a18:	str	r6, [sp, #44]	; 0x2c
   15a1c:	mov	ip, #18
   15a20:	mov	r7, #60	; 0x3c
   15a24:	str	r1, [sp, #48]	; 0x30
   15a28:	str	r6, [sp, #52]	; 0x34
   15a2c:	str	r1, [sp, #64]	; 0x40
   15a30:	ldr	r1, [sl, #-48]	; 0xffffffd0
   15a34:	str	r1, [sp, #68]	; 0x44
   15a38:	mov	r1, r3
   15a3c:	sub	r3, sl, #112	; 0x70
   15a40:	str	r1, [sp, #56]	; 0x38
   15a44:	str	r3, [sp, #80]	; 0x50
   15a48:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15a4c:	str	r3, [sp, #72]	; 0x48
   15a50:	mov	r3, #0
   15a54:	str	r3, [sp, #40]	; 0x28
   15a58:	b	13e70 <__assert_fail@plt+0x2aa0>
   15a5c:	mov	r2, #56	; 0x38
   15a60:	mov	r1, #0
   15a64:	mov	r0, r4
   15a68:	bl	112c8 <memset@plt>
   15a6c:	ldr	r0, [sl, #-48]	; 0xffffffd0
   15a70:	mov	r3, #0
   15a74:	ldr	ip, [sl, #-44]	; 0xffffffd4
   15a78:	str	r3, [sp, #32]
   15a7c:	ldr	r2, [sl]
   15a80:	ldr	r3, [sl, #4]
   15a84:	cmp	ip, r0, asr #31
   15a88:	asr	r1, r2, #31
   15a8c:	bne	16130 <__assert_fail@plt+0x4d60>
   15a90:	cmp	r1, r3
   15a94:	bne	160b8 <__assert_fail@plt+0x4ce8>
   15a98:	smull	r2, r3, r0, r2
   15a9c:	strd	r2, [sp, #120]	; 0x78
   15aa0:	ldr	r3, [sp, #32]
   15aa4:	ldrd	r0, [sp, #120]	; 0x78
   15aa8:	cmp	r3, #0
   15aac:	str	r0, [sp, #52]	; 0x34
   15ab0:	str	r1, [sp, #56]	; 0x38
   15ab4:	bne	13a20 <__assert_fail@plt+0x2650>
   15ab8:	sub	r2, sl, #112	; 0x70
   15abc:	mov	r0, #0
   15ac0:	str	r3, [sp, #40]	; 0x28
   15ac4:	mov	r1, #0
   15ac8:	mov	ip, #18
   15acc:	mov	r7, #60	; 0x3c
   15ad0:	str	r2, [sp, #80]	; 0x50
   15ad4:	sub	r2, r8, #4
   15ad8:	strd	r0, [sp, #16]
   15adc:	str	r2, [sp, #32]
   15ae0:	str	r0, [sp, #44]	; 0x2c
   15ae4:	str	r1, [sp, #48]	; 0x30
   15ae8:	str	r0, [sp, #60]	; 0x3c
   15aec:	str	r1, [sp, #64]	; 0x40
   15af0:	str	r0, [sp, #68]	; 0x44
   15af4:	str	r1, [sp, #72]	; 0x48
   15af8:	b	13e70 <__assert_fail@plt+0x2aa0>
   15afc:	mov	r6, #0
   15b00:	mov	r7, #0
   15b04:	sub	r3, r8, #4
   15b08:	mov	r1, #0
   15b0c:	mov	r2, #56	; 0x38
   15b10:	mov	r0, r4
   15b14:	strd	r6, [sp, #16]
   15b18:	str	r3, [sp, #32]
   15b1c:	str	r6, [sp, #60]	; 0x3c
   15b20:	bl	112c8 <memset@plt>
   15b24:	mov	r1, r7
   15b28:	mov	r3, r7
   15b2c:	str	r6, [sp, #52]	; 0x34
   15b30:	mov	ip, #18
   15b34:	mov	r7, #60	; 0x3c
   15b38:	str	r1, [sp, #56]	; 0x38
   15b3c:	str	r1, [sp, #64]	; 0x40
   15b40:	ldr	r1, [sl, #-48]	; 0xffffffd0
   15b44:	str	r1, [sp, #44]	; 0x2c
   15b48:	mov	r1, r3
   15b4c:	sub	r3, sl, #112	; 0x70
   15b50:	str	r6, [sp, #68]	; 0x44
   15b54:	str	r1, [sp, #72]	; 0x48
   15b58:	str	r3, [sp, #80]	; 0x50
   15b5c:	ldr	r3, [sl, #-44]	; 0xffffffd4
   15b60:	str	r3, [sp, #48]	; 0x30
   15b64:	mov	r3, #0
   15b68:	str	r3, [sp, #40]	; 0x28
   15b6c:	b	13e70 <__assert_fail@plt+0x2aa0>
   15b70:	sub	r2, sl, #56	; 0x38
   15b74:	movw	r3, #40336	; 0x9d90
   15b78:	movt	r3, #65535	; 0xffff
   15b7c:	mov	ip, #12
   15b80:	str	r2, [sp, #80]	; 0x50
   15b84:	sub	r2, r8, #2
   15b88:	mvn	r7, #92	; 0x5c
   15b8c:	str	r2, [sp, #32]
   15b90:	ldr	r2, [sp, #28]
   15b94:	str	r3, [r2, #24]
   15b98:	b	13e70 <__assert_fail@plt+0x2aa0>
   15b9c:	sub	r3, r8, #2
   15ba0:	ldr	r2, [sp, #28]
   15ba4:	mov	ip, #12
   15ba8:	mvn	r7, #92	; 0x5c
   15bac:	str	r3, [sp, #32]
   15bb0:	ldr	r3, [sl], #-56	; 0xffffffc8
   15bb4:	str	sl, [sp, #80]	; 0x50
   15bb8:	str	r3, [r2, #24]
   15bbc:	b	13e70 <__assert_fail@plt+0x2aa0>
   15bc0:	ldr	r1, [sp, #28]
   15bc4:	sub	r0, sl, #112	; 0x70
   15bc8:	mov	r2, #1
   15bcc:	mov	ip, #11
   15bd0:	mvn	r7, #92	; 0x5c
   15bd4:	str	r0, [sp, #80]	; 0x50
   15bd8:	sub	r0, r8, #4
   15bdc:	str	r0, [sp, #32]
   15be0:	ldr	r3, [r1, #168]	; 0xa8
   15be4:	str	r2, [r1, #20]
   15be8:	add	r3, r3, r2
   15bec:	str	r3, [r1, #168]	; 0xa8
   15bf0:	b	13e70 <__assert_fail@plt+0x2aa0>
   15bf4:	sub	r3, r8, #2
   15bf8:	ldr	r2, [sp, #28]
   15bfc:	mov	ip, #11
   15c00:	mvn	r7, #92	; 0x5c
   15c04:	str	r3, [sp, #32]
   15c08:	ldr	r3, [sl], #-56	; 0xffffffc8
   15c0c:	str	r3, [r2, #20]
   15c10:	str	sl, [sp, #80]	; 0x50
   15c14:	b	13e70 <__assert_fail@plt+0x2aa0>
   15c18:	ldrb	r7, [r7, #2376]	; 0x948
   15c1c:	b	136dc <__assert_fail@plt+0x230c>
   15c20:	cmp	r3, #0
   15c24:	beq	16554 <__assert_fail@plt+0x5184>
   15c28:	subs	lr, lr, #1
   15c2c:	bvs	13c84 <__assert_fail@plt+0x28b4>
   15c30:	ldr	r0, [sp, #28]
   15c34:	mov	fp, #276	; 0x114
   15c38:	str	lr, [sp, #304]	; 0x130
   15c3c:	ldr	r1, [sp, #96]	; 0x60
   15c40:	str	r2, [r0]
   15c44:	sub	r3, r1, r3
   15c48:	mov	r1, #21
   15c4c:	str	r3, [sp, #308]	; 0x134
   15c50:	b	13c70 <__assert_fail@plt+0x28a0>
   15c54:	mov	r0, r6
   15c58:	str	r1, [sp, #32]
   15c5c:	bl	11274 <strlen@plt>
   15c60:	cmp	r0, #3
   15c64:	mov	r3, r0
   15c68:	str	r0, [sp, #16]
   15c6c:	moveq	r3, #1
   15c70:	beq	15c94 <__assert_fail@plt+0x48c4>
   15c74:	ldr	r1, [sp, #32]
   15c78:	cmp	r3, #4
   15c7c:	movne	r3, r1
   15c80:	bne	15c94 <__assert_fail@plt+0x48c4>
   15c84:	ldrb	r3, [sp, #247]	; 0xf7
   15c88:	sub	r3, r3, #46	; 0x2e
   15c8c:	clz	r3, r3
   15c90:	lsr	r3, r3, #5
   15c94:	ldr	fp, [pc, #-3880]	; 14d74 <__assert_fail@plt+0x39a4>
   15c98:	movw	ip, #64584	; 0xfc48
   15c9c:	movt	ip, #1
   15ca0:	str	r4, [sp, #32]
   15ca4:	mov	r4, fp
   15ca8:	mov	fp, r3
   15cac:	b	15cd0 <__assert_fail@plt+0x4900>
   15cb0:	bl	11394 <strncmp@plt>
   15cb4:	clz	r0, r0
   15cb8:	lsr	r0, r0, #5
   15cbc:	cmp	r0, #0
   15cc0:	bne	15d44 <__assert_fail@plt+0x4974>
   15cc4:	ldr	ip, [r4, #12]!
   15cc8:	cmp	ip, #0
   15ccc:	beq	15d10 <__assert_fail@plt+0x4940>
   15cd0:	cmp	fp, #0
   15cd4:	mov	r1, ip
   15cd8:	mov	r0, r6
   15cdc:	mov	r2, #3
   15ce0:	bne	15cb0 <__assert_fail@plt+0x48e0>
   15ce4:	bl	110a0 <strcmp@plt>
   15ce8:	clz	r0, r0
   15cec:	lsr	r0, r0, #5
   15cf0:	b	15cbc <__assert_fail@plt+0x48ec>
   15cf4:	ldrb	r3, [r2, #1]
   15cf8:	mov	r2, r0
   15cfc:	b	13a64 <__assert_fail@plt+0x2694>
   15d00:	mov	r0, #2
   15d04:	b	13a24 <__assert_fail@plt+0x2654>
   15d08:	mov	r0, #0
   15d0c:	b	13a24 <__assert_fail@plt+0x2654>
   15d10:	mov	r3, r0
   15d14:	mov	r1, r6
   15d18:	ldr	r0, [sp, #28]
   15d1c:	ldr	r4, [sp, #32]
   15d20:	str	r3, [sp, #32]
   15d24:	bl	12d24 <__assert_fail@plt+0x1954>
   15d28:	cmp	r0, #0
   15d2c:	ldr	r3, [sp, #32]
   15d30:	beq	15d60 <__assert_fail@plt+0x4990>
   15d34:	ldr	fp, [r0, #4]
   15d38:	ldr	r2, [r0, #8]
   15d3c:	asr	r3, r2, #31
   15d40:	b	13dac <__assert_fail@plt+0x29dc>
   15d44:	ldr	fp, [r4, #4]
   15d48:	ldr	r2, [r4, #8]
   15d4c:	ldr	r4, [sp, #32]
   15d50:	asr	r3, r2, #31
   15d54:	b	13dac <__assert_fail@plt+0x29dc>
   15d58:	mov	r6, #0
   15d5c:	b	13b64 <__assert_fail@plt+0x2794>
   15d60:	movw	r1, #64612	; 0xfc64
   15d64:	movt	r1, #1
   15d68:	str	r3, [sp, #32]
   15d6c:	mov	r0, r6
   15d70:	bl	110a0 <strcmp@plt>
   15d74:	cmp	r0, #0
   15d78:	ldr	r3, [sp, #32]
   15d7c:	beq	13c54 <__assert_fail@plt+0x2884>
   15d80:	ldr	r2, [pc, #2576]	; 16798 <__assert_fail@plt+0x53c8>
   15d84:	movw	r1, #64592	; 0xfc50
   15d88:	movt	r1, #1
   15d8c:	mov	fp, r9
   15d90:	mov	r9, r5
   15d94:	mov	r5, r3
   15d98:	str	r2, [sp, #32]
   15d9c:	str	r4, [sp, #40]	; 0x28
   15da0:	mov	r4, r2
   15da4:	b	15db4 <__assert_fail@plt+0x49e4>
   15da8:	ldr	r1, [r4, #12]!
   15dac:	cmp	r1, #0
   15db0:	beq	1617c <__assert_fail@plt+0x4dac>
   15db4:	mov	r0, r6
   15db8:	bl	110a0 <strcmp@plt>
   15dbc:	cmp	r0, #0
   15dc0:	bne	15da8 <__assert_fail@plt+0x49d8>
   15dc4:	ldr	r2, [r4, #8]
   15dc8:	mov	r5, r9
   15dcc:	mov	r9, fp
   15dd0:	ldr	fp, [r4, #4]
   15dd4:	ldr	r4, [sp, #40]	; 0x28
   15dd8:	asr	r3, r2, #31
   15ddc:	b	13dac <__assert_fail@plt+0x29dc>
   15de0:	cmp	r3, #0
   15de4:	ldrd	r2, [sl, #-216]	; 0xffffff28
   15de8:	mov	r6, r2
   15dec:	mov	r7, r3
   15df0:	bne	16200 <__assert_fail@plt+0x4e30>
   15df4:	ldr	ip, [sp, #28]
   15df8:	sub	r1, r8, #10
   15dfc:	mov	r0, r6
   15e00:	ldrd	r2, [sl, #-104]	; 0xffffff98
   15e04:	str	r1, [sp, #32]
   15e08:	mov	r1, r7
   15e0c:	ldrd	r6, [sl]
   15e10:	add	lr, ip, #32
   15e14:	strd	r0, [ip, #56]	; 0x38
   15e18:	sub	r1, sl, #280	; 0x118
   15e1c:	strd	r2, [ip, #64]	; 0x40
   15e20:	str	r1, [sp, #80]	; 0x50
   15e24:	ldrd	r0, [sl, #8]
   15e28:	strd	r6, [ip, #32]
   15e2c:	mvn	r7, #92	; 0x5c
   15e30:	ldrd	r2, [sl, #16]
   15e34:	strd	r0, [ip, #40]	; 0x28
   15e38:	mov	ip, #14
   15e3c:	strd	r2, [lr, #16]
   15e40:	b	13e70 <__assert_fail@plt+0x2aa0>
   15e44:	ldrd	r2, [sp, #32]
   15e48:	cmp	r2, #0
   15e4c:	sbcs	r3, r3, #0
   15e50:	bge	14fb4 <__assert_fail@plt+0x3be4>
   15e54:	mov	r2, #100	; 0x64
   15e58:	mov	r3, #0
   15e5c:	mov	r0, r6
   15e60:	mov	r1, r7
   15e64:	bl	1e270 <__assert_fail@plt+0xcea0>
   15e68:	mov	lr, r0
   15e6c:	mov	ip, r1
   15e70:	mov	r0, r6
   15e74:	mov	r1, r7
   15e78:	mov	r2, #100	; 0x64
   15e7c:	mov	r3, #0
   15e80:	mov	r6, lr
   15e84:	mov	r7, ip
   15e88:	bl	1e270 <__assert_fail@plt+0xcea0>
   15e8c:	lsl	r1, r7, #4
   15e90:	lsl	r0, r6, #4
   15e94:	orr	r1, r1, r6, lsr #28
   15e98:	subs	r6, r0, r6
   15e9c:	sbc	r7, r1, r7
   15ea0:	lsl	r1, r6, #2
   15ea4:	lsl	r7, r7, #2
   15ea8:	adds	r0, r1, r2
   15eac:	orr	r7, r7, r6, lsr #30
   15eb0:	adc	r7, r7, r3
   15eb4:	b	15004 <__assert_fail@plt+0x3c34>
   15eb8:	ldrd	r2, [sp, #32]
   15ebc:	cmp	r2, #0
   15ec0:	sbcs	r3, r3, #0
   15ec4:	bge	15824 <__assert_fail@plt+0x4454>
   15ec8:	mov	r2, #100	; 0x64
   15ecc:	mov	r3, #0
   15ed0:	mov	r0, r6
   15ed4:	mov	r1, r7
   15ed8:	bl	1e270 <__assert_fail@plt+0xcea0>
   15edc:	mov	lr, r0
   15ee0:	mov	ip, r1
   15ee4:	mov	r0, r6
   15ee8:	mov	r1, r7
   15eec:	mov	r2, #100	; 0x64
   15ef0:	mov	r3, #0
   15ef4:	mov	r6, lr
   15ef8:	mov	r7, ip
   15efc:	bl	1e270 <__assert_fail@plt+0xcea0>
   15f00:	lsl	r1, r7, #4
   15f04:	lsl	r0, r6, #4
   15f08:	orr	r1, r1, r6, lsr #28
   15f0c:	subs	r6, r0, r6
   15f10:	sbc	r7, r1, r7
   15f14:	lsl	r1, r6, #2
   15f18:	lsl	r7, r7, #2
   15f1c:	adds	r0, r1, r2
   15f20:	orr	r7, r7, r6, lsr #30
   15f24:	mov	r6, r1
   15f28:	adc	r7, r7, r3
   15f2c:	b	15874 <__assert_fail@plt+0x44a4>
   15f30:	subs	ip, r2, r3
   15f34:	mov	r3, #0
   15f38:	mov	lr, #0
   15f3c:	str	r3, [sp, #232]	; 0xe8
   15f40:	movvs	r3, #1
   15f44:	strvs	r3, [sp, #232]	; 0xe8
   15f48:	subs	r2, r0, r6
   15f4c:	sbcs	r3, r1, r7
   15f50:	ldrd	r0, [sp, #144]	; 0x90
   15f54:	movvs	lr, #1
   15f58:	strd	r2, [sp, #224]	; 0xe0
   15f5c:	ldr	r3, [sp, #28]
   15f60:	str	ip, [r3, #144]	; 0x90
   15f64:	mov	ip, #0
   15f68:	ldrd	r2, [sp, #152]	; 0x98
   15f6c:	subs	r6, r2, r0
   15f70:	sbcs	r7, r3, r1
   15f74:	ldr	r1, [sp, #28]
   15f78:	movvs	ip, #1
   15f7c:	ldrd	r2, [sp, #224]	; 0xe0
   15f80:	strd	r6, [sp, #144]	; 0x90
   15f84:	ldrd	r6, [sp, #136]	; 0x88
   15f88:	strd	r2, [r1, #136]	; 0x88
   15f8c:	ldrd	r0, [sp, #160]	; 0xa0
   15f90:	subs	r2, r0, r6
   15f94:	sbcs	r3, r1, r7
   15f98:	ldrd	r0, [sp, #144]	; 0x90
   15f9c:	strd	r2, [sp, #152]	; 0x98
   15fa0:	mov	r3, #0
   15fa4:	ldrd	r6, [sp, #168]	; 0xa8
   15fa8:	str	r3, [sp, #136]	; 0x88
   15fac:	ldr	r3, [sp, #28]
   15fb0:	strd	r0, [r3, #128]	; 0x80
   15fb4:	movvs	r3, #1
   15fb8:	ldrd	r0, [sp, #128]	; 0x80
   15fbc:	strvs	r3, [sp, #136]	; 0x88
   15fc0:	subs	r2, r6, r0
   15fc4:	sbcs	r3, r7, r1
   15fc8:	ldr	r1, [sp, #28]
   15fcc:	strd	r2, [sp, #144]	; 0x90
   15fd0:	mov	r3, #0
   15fd4:	ldrd	r6, [sp, #176]	; 0xb0
   15fd8:	str	r3, [sp, #128]	; 0x80
   15fdc:	ldrd	r2, [sp, #152]	; 0x98
   15fe0:	strd	r2, [r1, #120]	; 0x78
   15fe4:	movvs	r3, #1
   15fe8:	ldrd	r0, [sp, #80]	; 0x50
   15fec:	strvs	r3, [sp, #128]	; 0x80
   15ff0:	subs	r2, r6, r0
   15ff4:	sbcs	r3, r7, r1
   15ff8:	ldr	r1, [sp, #28]
   15ffc:	strd	r2, [sp, #152]	; 0x98
   16000:	mov	r3, #0
   16004:	str	r3, [sp, #80]	; 0x50
   16008:	ldrd	r2, [sp, #144]	; 0x90
   1600c:	ldrd	r6, [sp, #32]
   16010:	strd	r2, [r1, #112]	; 0x70
   16014:	movvs	r3, #1
   16018:	ldrd	r0, [sp, #184]	; 0xb8
   1601c:	strvs	r3, [sp, #80]	; 0x50
   16020:	subs	r2, r0, r6
   16024:	sbcs	r3, r1, r7
   16028:	ldrd	r0, [sp, #152]	; 0x98
   1602c:	mov	r6, r2
   16030:	mov	r7, r3
   16034:	mov	r2, #0
   16038:	ldr	r3, [sp, #28]
   1603c:	movvs	r2, #1
   16040:	strd	r0, [r3, #104]	; 0x68
   16044:	mov	r1, r7
   16048:	mov	r0, r6
   1604c:	ldr	r3, [sp, #232]	; 0xe8
   16050:	orr	r3, r3, lr
   16054:	ldr	lr, [sp, #28]
   16058:	orr	r3, r3, ip
   1605c:	strd	r0, [lr, #96]	; 0x60
   16060:	ldr	r1, [sp, #136]	; 0x88
   16064:	orr	r3, r3, r1
   16068:	ldr	r1, [sp, #128]	; 0x80
   1606c:	orr	r3, r3, r1
   16070:	ldr	r1, [sp, #80]	; 0x50
   16074:	orr	r3, r3, r1
   16078:	orr	r3, r3, r2
   1607c:	b	155c0 <__assert_fail@plt+0x41f0>
   16080:	adds	r2, r2, r6
   16084:	adcs	r3, r3, r7
   16088:	mov	r0, r2
   1608c:	mov	r7, r3
   16090:	movvs	r1, #1
   16094:	movvc	r1, #0
   16098:	b	1586c <__assert_fail@plt+0x449c>
   1609c:	adds	r2, r2, r6
   160a0:	adcs	r3, r3, r7
   160a4:	mov	r0, r2
   160a8:	mov	r7, r3
   160ac:	movvs	r1, #1
   160b0:	movvc	r1, #0
   160b4:	b	14ffc <__assert_fail@plt+0x3c2c>
   160b8:	ldr	r6, [sl]
   160bc:	mov	lr, r3
   160c0:	mov	r1, r0
   160c4:	str	r6, [sp, #40]	; 0x28
   160c8:	ldr	r6, [sl, #4]
   160cc:	str	r6, [sp, #44]	; 0x2c
   160d0:	umull	r6, r7, r0, r2
   160d4:	cmp	lr, #0
   160d8:	strd	r6, [sp, #16]
   160dc:	umull	r6, r7, r1, lr
   160e0:	bge	160f0 <__assert_fail@plt+0x4d20>
   160e4:	mov	lr, #0
   160e8:	subs	r6, r6, lr
   160ec:	sbc	r7, r7, r1
   160f0:	cmp	r1, #0
   160f4:	bge	16108 <__assert_fail@plt+0x4d38>
   160f8:	ldr	r1, [sp, #40]	; 0x28
   160fc:	subs	r6, r6, r1
   16100:	ldr	r1, [sp, #44]	; 0x2c
   16104:	sbc	r7, r7, r1
   16108:	ldr	r1, [sp, #20]
   1610c:	mov	lr, #0
   16110:	adds	r1, r6, r1
   16114:	adc	lr, r7, lr
   16118:	cmp	lr, r1, asr #31
   1611c:	bne	1659c <__assert_fail@plt+0x51cc>
   16120:	ldr	r3, [sp, #16]
   16124:	str	r3, [sp, #120]	; 0x78
   16128:	str	r1, [sp, #124]	; 0x7c
   1612c:	b	15aa0 <__assert_fail@plt+0x46d0>
   16130:	cmp	r1, r3
   16134:	bne	165e8 <__assert_fail@plt+0x5218>
   16138:	ldr	r1, [sl, #-48]	; 0xffffffd0
   1613c:	mov	lr, ip
   16140:	ldr	r6, [sl, #-44]	; 0xffffffd4
   16144:	str	r1, [sp, #40]	; 0x28
   16148:	mov	r1, r2
   1614c:	str	r6, [sp, #44]	; 0x2c
   16150:	b	160d0 <__assert_fail@plt+0x4d00>
   16154:	asr	r7, r6, #31
   16158:	mov	r2, #5
   1615c:	movw	r1, #64720	; 0xfcd0
   16160:	movt	r1, #1
   16164:	mov	r0, #0
   16168:	bl	11130 <dcgettext@plt>
   1616c:	ldrd	r2, [sl, #-216]	; 0xffffff28
   16170:	strd	r6, [sp]
   16174:	bl	12c70 <__assert_fail@plt+0x18a0>
   16178:	b	14d24 <__assert_fail@plt+0x3954>
   1617c:	ldr	r2, [sp, #16]
   16180:	mov	r3, r5
   16184:	mov	r5, r9
   16188:	mov	r9, fp
   1618c:	ldr	r4, [sp, #40]	; 0x28
   16190:	sub	r0, r2, #1
   16194:	ldrb	r2, [r6, r0]
   16198:	add	fp, r6, r0
   1619c:	cmp	r2, #83	; 0x53
   161a0:	beq	16368 <__assert_fail@plt+0x4f98>
   161a4:	movw	r1, #64600	; 0xfc58
   161a8:	movt	r1, #1
   161ac:	ldr	fp, [pc, #1512]	; 1679c <__assert_fail@plt+0x53cc>
   161b0:	str	r9, [sp, #32]
   161b4:	mov	r9, r5
   161b8:	mov	r5, r3
   161bc:	b	161cc <__assert_fail@plt+0x4dfc>
   161c0:	ldr	r1, [fp, #12]!
   161c4:	cmp	r1, #0
   161c8:	beq	163c8 <__assert_fail@plt+0x4ff8>
   161cc:	mov	r0, r6
   161d0:	bl	110a0 <strcmp@plt>
   161d4:	cmp	r0, #0
   161d8:	bne	161c0 <__assert_fail@plt+0x4df0>
   161dc:	ldr	r2, [fp, #8]
   161e0:	mov	r5, r9
   161e4:	ldr	fp, [fp, #4]
   161e8:	ldr	r9, [sp, #32]
   161ec:	asr	r3, r2, #31
   161f0:	b	13dac <__assert_fail@plt+0x29dc>
   161f4:	mov	r2, #0
   161f8:	mov	r3, r2
   161fc:	b	15e8c <__assert_fail@plt+0x4abc>
   16200:	mov	r2, #5
   16204:	movw	r1, #64780	; 0xfd0c
   16208:	movt	r1, #1
   1620c:	mov	r0, #0
   16210:	bl	11130 <dcgettext@plt>
   16214:	mov	r2, r6
   16218:	mov	r3, r7
   1621c:	bl	12c70 <__assert_fail@plt+0x18a0>
   16220:	b	15df4 <__assert_fail@plt+0x4a24>
   16224:	ldr	r6, [sl]
   16228:	mov	lr, r3
   1622c:	mov	r1, r0
   16230:	str	r6, [sp, #40]	; 0x28
   16234:	ldr	r6, [sl, #4]
   16238:	str	r6, [sp, #44]	; 0x2c
   1623c:	umull	r6, r7, r0, r2
   16240:	cmp	lr, #0
   16244:	strd	r6, [sp, #16]
   16248:	umull	r6, r7, r1, lr
   1624c:	bge	1625c <__assert_fail@plt+0x4e8c>
   16250:	mov	lr, #0
   16254:	subs	r6, r6, lr
   16258:	sbc	r7, r7, r1
   1625c:	cmp	r1, #0
   16260:	bge	16274 <__assert_fail@plt+0x4ea4>
   16264:	ldr	r1, [sp, #40]	; 0x28
   16268:	subs	r6, r6, r1
   1626c:	ldr	r1, [sp, #44]	; 0x2c
   16270:	sbc	r7, r7, r1
   16274:	ldr	r1, [sp, #20]
   16278:	mov	lr, #0
   1627c:	adds	r1, r6, r1
   16280:	adc	lr, r7, lr
   16284:	cmp	lr, r1, asr #31
   16288:	bne	166f4 <__assert_fail@plt+0x5324>
   1628c:	ldr	r3, [sp, #16]
   16290:	str	r3, [sp, #112]	; 0x70
   16294:	str	r1, [sp, #116]	; 0x74
   16298:	b	143c4 <__assert_fail@plt+0x2ff4>
   1629c:	cmp	r1, r3
   162a0:	bne	16714 <__assert_fail@plt+0x5344>
   162a4:	ldr	r1, [sl, #-48]	; 0xffffffd0
   162a8:	mov	lr, ip
   162ac:	ldr	r6, [sl, #-44]	; 0xffffffd4
   162b0:	str	r1, [sp, #40]	; 0x28
   162b4:	mov	r1, r2
   162b8:	str	r6, [sp, #44]	; 0x2c
   162bc:	b	1623c <__assert_fail@plt+0x4e6c>
   162c0:	ldr	r1, [sl]
   162c4:	mov	lr, r3
   162c8:	mov	ip, r7
   162cc:	str	r1, [sp, #44]	; 0x2c
   162d0:	ldr	r1, [sl, #4]
   162d4:	str	r1, [sp, #48]	; 0x30
   162d8:	umull	r0, r1, r7, r2
   162dc:	cmp	lr, #0
   162e0:	strd	r0, [sp, #32]
   162e4:	umull	r0, r1, ip, lr
   162e8:	bge	162f8 <__assert_fail@plt+0x4f28>
   162ec:	mov	r6, #0
   162f0:	subs	r0, r0, r6
   162f4:	sbc	r1, r1, ip
   162f8:	cmp	ip, #0
   162fc:	bge	16310 <__assert_fail@plt+0x4f40>
   16300:	ldr	ip, [sp, #44]	; 0x2c
   16304:	subs	r0, r0, ip
   16308:	ldr	ip, [sp, #48]	; 0x30
   1630c:	sbc	r1, r1, ip
   16310:	ldr	ip, [sp, #36]	; 0x24
   16314:	mov	lr, #0
   16318:	adds	ip, r0, ip
   1631c:	adc	lr, r1, lr
   16320:	cmp	lr, ip, asr #31
   16324:	bne	1662c <__assert_fail@plt+0x525c>
   16328:	ldr	r3, [sp, #32]
   1632c:	str	r3, [sp, #104]	; 0x68
   16330:	str	ip, [sp, #108]	; 0x6c
   16334:	b	1446c <__assert_fail@plt+0x309c>
   16338:	mov	r2, #0
   1633c:	mov	r3, r2
   16340:	b	15f00 <__assert_fail@plt+0x4b30>
   16344:	cmp	r1, r3
   16348:	bne	166a0 <__assert_fail@plt+0x52d0>
   1634c:	ldr	r1, [sl, #-56]	; 0xffffffc8
   16350:	mov	ip, r2
   16354:	ldr	lr, [sp, #16]
   16358:	str	r1, [sp, #44]	; 0x2c
   1635c:	ldr	r1, [sl, #-52]	; 0xffffffcc
   16360:	str	r1, [sp, #48]	; 0x30
   16364:	b	162d8 <__assert_fail@plt+0x4f08>
   16368:	movw	r2, #64592	; 0xfc50
   1636c:	movt	r2, #1
   16370:	strb	r1, [r6, r0]
   16374:	mov	r1, r2
   16378:	str	r9, [sp, #40]	; 0x28
   1637c:	mov	r9, r5
   16380:	mov	r5, r3
   16384:	b	1639c <__assert_fail@plt+0x4fcc>
   16388:	ldr	r3, [sp, #32]
   1638c:	ldr	r1, [r3, #12]!
   16390:	cmp	r1, #0
   16394:	str	r3, [sp, #32]
   16398:	beq	1653c <__assert_fail@plt+0x516c>
   1639c:	mov	r0, r6
   163a0:	bl	110a0 <strcmp@plt>
   163a4:	cmp	r0, #0
   163a8:	bne	16388 <__assert_fail@plt+0x4fb8>
   163ac:	ldr	r3, [sp, #32]
   163b0:	mov	r5, r9
   163b4:	ldr	r9, [sp, #40]	; 0x28
   163b8:	ldr	fp, [r3, #4]
   163bc:	ldr	r2, [r3, #8]
   163c0:	asr	r3, r2, #31
   163c4:	b	13dac <__assert_fail@plt+0x29dc>
   163c8:	ldr	r2, [sp, #16]
   163cc:	mov	r3, r5
   163d0:	mov	r5, r9
   163d4:	ldrb	r0, [sp, #244]	; 0xf4
   163d8:	ldr	r9, [sp, #32]
   163dc:	cmp	r2, #1
   163e0:	beq	16664 <__assert_fail@plt+0x5294>
   163e4:	cmp	r0, #0
   163e8:	movne	r1, r6
   163ec:	movne	r2, r6
   163f0:	beq	1642c <__assert_fail@plt+0x505c>
   163f4:	cmp	r0, #46	; 0x2e
   163f8:	ldrb	r0, [r1, #1]!
   163fc:	addne	r2, r2, #1
   16400:	moveq	r3, #1
   16404:	cmp	r0, #0
   16408:	strb	r0, [r2]
   1640c:	bne	163f4 <__assert_fail@plt+0x5024>
   16410:	cmp	r3, #0
   16414:	beq	1642c <__assert_fail@plt+0x505c>
   16418:	mov	r1, r6
   1641c:	ldr	r0, [sp, #28]
   16420:	bl	12d24 <__assert_fail@plt+0x1954>
   16424:	cmp	r0, #0
   16428:	bne	15d34 <__assert_fail@plt+0x4964>
   1642c:	ldr	r3, [sp, #28]
   16430:	ldrb	r3, [r3, #181]	; 0xb5
   16434:	cmp	r3, #0
   16438:	beq	13c84 <__assert_fail@plt+0x28b4>
   1643c:	mov	r2, #5
   16440:	movw	r1, #64616	; 0xfc68
   16444:	movt	r1, #1
   16448:	mov	r0, #0
   1644c:	bl	11130 <dcgettext@plt>
   16450:	mov	r1, r6
   16454:	mov	fp, #63	; 0x3f
   16458:	bl	12c70 <__assert_fail@plt+0x18a0>
   1645c:	mov	r1, #2
   16460:	b	13c70 <__assert_fail@plt+0x28a0>
   16464:	mov	r1, #60	; 0x3c
   16468:	cmp	r7, #0
   1646c:	umull	r2, r3, r6, r1
   16470:	strd	r2, [sp, #80]	; 0x50
   16474:	umull	r2, r3, r1, r7
   16478:	bge	16484 <__assert_fail@plt+0x50b4>
   1647c:	subs	r2, r2, lr
   16480:	sbc	r3, r3, r1
   16484:	ldr	r1, [sp, #84]	; 0x54
   16488:	mov	r0, #0
   1648c:	adds	r1, r2, r1
   16490:	adc	r0, r3, r0
   16494:	cmp	r0, r1, asr #31
   16498:	bne	165bc <__assert_fail@plt+0x51ec>
   1649c:	mov	r3, r1
   164a0:	ldr	r2, [sp, #80]	; 0x50
   164a4:	b	14fd0 <__assert_fail@plt+0x3c00>
   164a8:	ldr	r1, [sp, #28]
   164ac:	add	r3, r2, #1
   164b0:	str	r3, [r1]
   164b4:	ldrb	fp, [r2]
   164b8:	cmp	fp, #0
   164bc:	bne	13c68 <__assert_fail@plt+0x2898>
   164c0:	b	13a48 <__assert_fail@plt+0x2678>
   164c4:	mov	r1, #60	; 0x3c
   164c8:	cmp	r7, #0
   164cc:	umull	r2, r3, r6, r1
   164d0:	strd	r2, [sp, #80]	; 0x50
   164d4:	umull	r2, r3, r1, r7
   164d8:	bge	164e4 <__assert_fail@plt+0x5114>
   164dc:	subs	r2, r2, lr
   164e0:	sbc	r3, r3, r1
   164e4:	ldr	r1, [sp, #84]	; 0x54
   164e8:	mov	r0, #0
   164ec:	adds	r1, r2, r1
   164f0:	adc	r0, r3, r0
   164f4:	cmp	r0, r1, asr #31
   164f8:	bne	16570 <__assert_fail@plt+0x51a0>
   164fc:	mov	r3, r1
   16500:	ldr	r2, [sp, #80]	; 0x50
   16504:	b	15840 <__assert_fail@plt+0x4470>
   16508:	sxth	r2, r2
   1650c:	add	ip, r9, ip
   16510:	rsb	r1, r2, r2, lsl #3
   16514:	ldrb	ip, [ip, #2700]	; 0xa8c
   16518:	movw	r3, #2792	; 0xae8
   1651c:	sub	r2, r8, r2, lsl #1
   16520:	str	r2, [sp, #32]
   16524:	sub	r2, sl, r1, lsl #3
   16528:	sub	ip, ip, #28
   1652c:	str	r2, [sp, #80]	; 0x50
   16530:	add	r2, r9, ip
   16534:	ldrsb	r7, [r2, r3]
   16538:	b	13e70 <__assert_fail@plt+0x2aa0>
   1653c:	mov	r2, #83	; 0x53
   16540:	mov	r3, r5
   16544:	mov	r5, r9
   16548:	ldr	r9, [sp, #40]	; 0x28
   1654c:	strb	r2, [fp]
   16550:	b	161a4 <__assert_fail@plt+0x4dd4>
   16554:	mov	r1, #21
   16558:	mov	fp, #276	; 0x114
   1655c:	str	lr, [sp, #304]	; 0x130
   16560:	str	r3, [sp, #308]	; 0x134
   16564:	ldr	r3, [sp, #28]
   16568:	str	r2, [r3]
   1656c:	b	13c70 <__assert_fail@plt+0x28a0>
   16570:	lsl	r3, r7, #4
   16574:	mov	lr, #1
   16578:	lsl	r2, r6, #4
   1657c:	orr	r3, r3, r6, lsr #28
   16580:	subs	r2, r2, r6
   16584:	sbc	r3, r3, r7
   16588:	lsl	r1, r2, #2
   1658c:	lsl	r3, r3, #2
   16590:	orr	r3, r3, r2, lsr #30
   16594:	mov	r2, r1
   16598:	b	15840 <__assert_fail@plt+0x4470>
   1659c:	mul	r3, r0, r3
   165a0:	umull	r0, r1, r0, r2
   165a4:	mla	r3, r2, ip, r3
   165a8:	add	r1, r3, r1
   165ac:	strd	r0, [sp, #120]	; 0x78
   165b0:	mov	r3, #1
   165b4:	str	r3, [sp, #32]
   165b8:	b	15aa0 <__assert_fail@plt+0x46d0>
   165bc:	lsl	r3, r7, #4
   165c0:	mov	lr, #1
   165c4:	lsl	r2, r6, #4
   165c8:	orr	r3, r3, r6, lsr #28
   165cc:	subs	r2, r2, r6
   165d0:	sbc	r3, r3, r7
   165d4:	lsl	r1, r2, #2
   165d8:	lsl	r3, r3, #2
   165dc:	orr	r3, r3, r2, lsr #30
   165e0:	mov	r2, r1
   165e4:	b	14fd0 <__assert_fail@plt+0x3c00>
   165e8:	mul	r1, r0, r3
   165ec:	add	lr, ip, #1
   165f0:	umull	r6, r7, r0, r2
   165f4:	cmp	lr, #1
   165f8:	mla	r2, r2, ip, r1
   165fc:	add	r7, r2, r7
   16600:	strd	r6, [sp, #120]	; 0x78
   16604:	bhi	165b0 <__assert_fail@plt+0x51e0>
   16608:	add	r2, r3, #1
   1660c:	cmp	r2, #1
   16610:	bhi	165b0 <__assert_fail@plt+0x51e0>
   16614:	cmp	ip, r3
   16618:	bne	16650 <__assert_fail@plt+0x5280>
   1661c:	cmp	r6, #1
   16620:	sbcs	r3, r7, #0
   16624:	bge	15aa0 <__assert_fail@plt+0x46d0>
   16628:	b	165b0 <__assert_fail@plt+0x51e0>
   1662c:	ldr	ip, [sp, #16]
   16630:	mul	r3, r7, r3
   16634:	umull	r0, r1, r7, r2
   16638:	mla	r2, r2, ip, r3
   1663c:	add	r1, r2, r1
   16640:	strd	r0, [sp, #104]	; 0x68
   16644:	mov	r3, #1
   16648:	str	r3, [sp, #40]	; 0x28
   1664c:	b	1446c <__assert_fail@plt+0x309c>
   16650:	ldrd	r2, [sp, #120]	; 0x78
   16654:	cmp	r2, #0
   16658:	sbcs	r3, r3, #0
   1665c:	blt	15aa0 <__assert_fail@plt+0x46d0>
   16660:	b	165b0 <__assert_fail@plt+0x51e0>
   16664:	cmp	r0, #65	; 0x41
   16668:	ldrne	r2, [pc, #304]	; 167a0 <__assert_fail@plt+0x53d0>
   1666c:	beq	16758 <__assert_fail@plt+0x5388>
   16670:	mov	r1, r2
   16674:	add	r2, r2, #12
   16678:	ldr	ip, [r2]
   1667c:	cmp	ip, #0
   16680:	beq	163e4 <__assert_fail@plt+0x5014>
   16684:	ldrb	ip, [ip]
   16688:	cmp	ip, r0
   1668c:	bne	16670 <__assert_fail@plt+0x52a0>
   16690:	ldr	fp, [r1, #16]
   16694:	ldr	r2, [r1, #20]
   16698:	asr	r3, r2, #31
   1669c:	b	13dac <__assert_fail@plt+0x29dc>
   166a0:	ldr	ip, [sp, #16]
   166a4:	mul	r1, r7, r3
   166a8:	umull	r6, r7, r7, r2
   166ac:	mla	r2, r2, ip, r1
   166b0:	add	r0, ip, #1
   166b4:	cmp	r0, #1
   166b8:	mov	r0, r6
   166bc:	add	r2, r2, r7
   166c0:	mov	r1, r2
   166c4:	mov	r7, r2
   166c8:	strd	r0, [sp, #104]	; 0x68
   166cc:	bhi	16644 <__assert_fail@plt+0x5274>
   166d0:	add	r2, r3, #1
   166d4:	cmp	r2, #1
   166d8:	bhi	16644 <__assert_fail@plt+0x5274>
   166dc:	cmp	ip, r3
   166e0:	bne	16770 <__assert_fail@plt+0x53a0>
   166e4:	cmp	r6, #1
   166e8:	sbcs	r3, r7, #0
   166ec:	bge	1446c <__assert_fail@plt+0x309c>
   166f0:	b	16644 <__assert_fail@plt+0x5274>
   166f4:	mul	r3, r0, r3
   166f8:	umull	r0, r1, r0, r2
   166fc:	mla	r2, r2, ip, r3
   16700:	add	r1, r2, r1
   16704:	strd	r0, [sp, #112]	; 0x70
   16708:	mov	r3, #1
   1670c:	str	r3, [sp, #32]
   16710:	b	143c4 <__assert_fail@plt+0x2ff4>
   16714:	mul	r1, r0, r3
   16718:	add	lr, ip, #1
   1671c:	umull	r6, r7, r0, r2
   16720:	cmp	lr, #1
   16724:	mla	r2, r2, ip, r1
   16728:	add	r7, r2, r7
   1672c:	strd	r6, [sp, #112]	; 0x70
   16730:	bhi	16708 <__assert_fail@plt+0x5338>
   16734:	add	r2, r3, #1
   16738:	cmp	r2, #1
   1673c:	bhi	16708 <__assert_fail@plt+0x5338>
   16740:	cmp	ip, r3
   16744:	bne	16784 <__assert_fail@plt+0x53b4>
   16748:	cmp	r6, #1
   1674c:	sbcs	r3, r7, #0
   16750:	bge	143c4 <__assert_fail@plt+0x2ff4>
   16754:	b	16708 <__assert_fail@plt+0x5338>
   16758:	mov	r2, #3600	; 0xe10
   1675c:	mov	r3, #0
   16760:	add	r1, sp, #304	; 0x130
   16764:	movw	fp, #273	; 0x111
   16768:	strd	r2, [r1]
   1676c:	b	13c68 <__assert_fail@plt+0x2898>
   16770:	ldrd	r2, [sp, #104]	; 0x68
   16774:	cmp	r2, #0
   16778:	sbcs	r3, r3, #0
   1677c:	blt	1446c <__assert_fail@plt+0x309c>
   16780:	b	16644 <__assert_fail@plt+0x5274>
   16784:	ldrd	r2, [sp, #112]	; 0x70
   16788:	cmp	r2, #0
   1678c:	sbcs	r3, r3, #0
   16790:	blt	143c4 <__assert_fail@plt+0x2ff4>
   16794:	b	16708 <__assert_fail@plt+0x5338>
   16798:	andeq	pc, r1, r8, asr #9
   1679c:	andeq	pc, r1, ip, asr #10
   167a0:	andeq	pc, r1, r8, asr #12
   167a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   167a8:	strd	r6, [sp, #8]
   167ac:	mov	r7, r1
   167b0:	strd	r8, [sp, #16]
   167b4:	mov	r9, r2
   167b8:	strd	sl, [sp, #24]
   167bc:	mov	sl, r3
   167c0:	str	lr, [sp, #32]
   167c4:	sub	sp, sp, #908	; 0x38c
   167c8:	str	r0, [sp, #80]	; 0x50
   167cc:	mov	r0, r1
   167d0:	bl	11274 <strlen@plt>
   167d4:	cmp	r9, #0
   167d8:	str	r0, [sp, #40]	; 0x28
   167dc:	beq	172cc <__assert_fail@plt+0x5efc>
   167e0:	ldr	r5, [r9]
   167e4:	mov	r2, r7
   167e8:	ldr	r3, [r9, #4]
   167ec:	str	r3, [sp, #36]	; 0x24
   167f0:	mov	r4, r2
   167f4:	ldrb	r3, [r2], #1
   167f8:	cmp	r3, #9
   167fc:	bcc	16810 <__assert_fail@plt+0x5440>
   16800:	cmp	r3, #13
   16804:	bls	167f0 <__assert_fail@plt+0x5420>
   16808:	cmp	r3, #32
   1680c:	beq	167f0 <__assert_fail@plt+0x5420>
   16810:	add	r8, sp, #312	; 0x138
   16814:	mov	r2, #56	; 0x38
   16818:	mov	r1, #0
   1681c:	mov	r0, r8
   16820:	bl	112c8 <memset@plt>
   16824:	movw	r1, #64868	; 0xfd64
   16828:	movt	r1, #1
   1682c:	mov	r2, #4
   16830:	mov	r0, r4
   16834:	bl	11394 <strncmp@plt>
   16838:	cmp	r0, #0
   1683c:	bne	1689c <__assert_fail@plt+0x54cc>
   16840:	ldrb	lr, [r4, #4]
   16844:	add	r2, r4, #4
   16848:	cmp	lr, #0
   1684c:	beq	1689c <__assert_fail@plt+0x54cc>
   16850:	mov	ip, r2
   16854:	mov	r3, lr
   16858:	mov	r0, #1
   1685c:	b	1687c <__assert_fail@plt+0x54ac>
   16860:	cmp	r3, #34	; 0x22
   16864:	beq	16cfc <__assert_fail@plt+0x592c>
   16868:	ldrb	r3, [r1, #1]
   1686c:	add	r0, r0, #1
   16870:	add	ip, r1, #1
   16874:	cmp	r3, #0
   16878:	beq	1689c <__assert_fail@plt+0x54cc>
   1687c:	cmp	r3, #92	; 0x5c
   16880:	mov	r1, ip
   16884:	bne	16860 <__assert_fail@plt+0x5490>
   16888:	ldrb	r3, [ip, #1]
   1688c:	add	r1, ip, #1
   16890:	cmp	r3, #92	; 0x5c
   16894:	cmpne	r3, #34	; 0x22
   16898:	beq	16868 <__assert_fail@plt+0x5498>
   1689c:	mov	r1, r9
   168a0:	add	r2, sp, #224	; 0xe0
   168a4:	ldr	r0, [sp, #944]	; 0x3b0
   168a8:	bl	1b15c <__assert_fail@plt+0x9d8c>
   168ac:	cmp	r0, #0
   168b0:	beq	172dc <__assert_fail@plt+0x5f0c>
   168b4:	ldr	r6, [sp, #944]	; 0x3b0
   168b8:	mov	r3, #0
   168bc:	str	r3, [sp, #32]
   168c0:	ldr	r3, [sp, #36]	; 0x24
   168c4:	add	r1, sp, #728	; 0x2d8
   168c8:	and	sl, sl, #1
   168cc:	movw	ip, #64848	; 0xfd50
   168d0:	movt	ip, #1
   168d4:	ldr	r2, [sp, #240]	; 0xf0
   168d8:	movw	r0, #1900	; 0x76c
   168dc:	ldrb	lr, [r4]
   168e0:	str	r3, [sp, #764]	; 0x2fc
   168e4:	ldr	r9, [sp, #232]	; 0xe8
   168e8:	add	r2, r2, #1
   168ec:	strb	sl, [sp, #853]	; 0x355
   168f0:	asr	r3, r2, #31
   168f4:	ldr	sl, [sp, #236]	; 0xec
   168f8:	cmp	lr, #0
   168fc:	ldr	lr, [sp, #244]	; 0xf4
   16900:	moveq	r4, ip
   16904:	strd	r2, [r1]
   16908:	asr	r3, r9, #31
   1690c:	mov	r2, r9
   16910:	add	r1, sp, #744	; 0x2e8
   16914:	str	r4, [sp, #672]	; 0x2a0
   16918:	ldr	r4, [sp, #224]	; 0xe0
   1691c:	strd	r2, [r1]
   16920:	mov	r1, #0
   16924:	mov	r2, sl
   16928:	adds	r0, r0, lr
   1692c:	asr	r3, sl, #31
   16930:	ldrd	sl, [r8]
   16934:	adc	r1, r1, lr, asr #31
   16938:	add	lr, sp, #712	; 0x2c8
   1693c:	ldr	ip, [sp, #256]	; 0x100
   16940:	strd	r0, [lr]
   16944:	add	r1, sp, #736	; 0x2e0
   16948:	add	r0, sp, #752	; 0x2f0
   1694c:	strd	r2, [r1]
   16950:	add	r1, sp, #768	; 0x300
   16954:	ldr	r2, [sp, #228]	; 0xe4
   16958:	strd	sl, [r1]
   1695c:	ldrd	sl, [r8, #8]
   16960:	str	ip, [sp, #168]	; 0xa8
   16964:	str	r4, [sp, #760]	; 0x2f8
   16968:	mov	r4, #42752	; 0xa700
   1696c:	movt	r4, #118	; 0x76
   16970:	asr	r3, r2, #31
   16974:	strd	sl, [r1, #8]
   16978:	ldrd	sl, [r8, #16]
   1697c:	strd	r2, [r0]
   16980:	mov	r3, #0
   16984:	mov	r2, #2
   16988:	str	r2, [sp, #700]	; 0x2bc
   1698c:	movw	r2, #269	; 0x10d
   16990:	str	r3, [sp, #720]	; 0x2d0
   16994:	strd	sl, [r1, #16]
   16998:	ldrd	sl, [r8, #24]
   1699c:	strd	sl, [r1, #24]
   169a0:	ldrd	sl, [r8, #32]
   169a4:	strd	sl, [r1, #32]
   169a8:	ldrd	sl, [r8, #40]	; 0x28
   169ac:	strd	sl, [r1, #40]	; 0x28
   169b0:	ldrd	r8, [r8, #48]	; 0x30
   169b4:	str	r3, [sp, #828]	; 0x33c
   169b8:	ldr	fp, [sp, #32]
   169bc:	str	r3, [sp, #832]	; 0x340
   169c0:	ldr	r0, [sp, #264]	; 0x108
   169c4:	strd	r8, [r1, #48]	; 0x30
   169c8:	add	r1, sp, #824	; 0x338
   169cc:	mov	r9, #39936	; 0x9c00
   169d0:	movt	r9, #474	; 0x1da
   169d4:	str	r3, [sp, #836]	; 0x344
   169d8:	strh	r3, [r1]
   169dc:	add	r1, sp, #852	; 0x354
   169e0:	add	r1, r1, #2
   169e4:	str	r3, [sp, #840]	; 0x348
   169e8:	strh	r3, [r1]
   169ec:	str	r3, [sp, #844]	; 0x34c
   169f0:	str	r3, [sp, #848]	; 0x350
   169f4:	strb	r3, [sp, #852]	; 0x354
   169f8:	str	r3, [sp, #856]	; 0x358
   169fc:	strb	r3, [sp, #860]	; 0x35c
   16a00:	str	r0, [sp, #864]	; 0x360
   16a04:	str	r2, [sp, #868]	; 0x364
   16a08:	str	ip, [sp, #872]	; 0x368
   16a0c:	str	r3, [sp, #876]	; 0x36c
   16a10:	adds	r3, r5, r4
   16a14:	add	r4, r4, #7733248	; 0x760000
   16a18:	movvs	r8, #1
   16a1c:	movvc	r8, #0
   16a20:	cmp	r8, #0
   16a24:	add	r2, sp, #572	; 0x23c
   16a28:	str	r3, [sp, #372]	; 0x174
   16a2c:	add	r1, sp, #372	; 0x174
   16a30:	mov	r0, r6
   16a34:	add	r4, r4, #42752	; 0xa700
   16a38:	bne	16a6c <__assert_fail@plt+0x569c>
   16a3c:	bl	1b15c <__assert_fail@plt+0x9d8c>
   16a40:	cmp	r0, #0
   16a44:	beq	16a64 <__assert_fail@plt+0x5694>
   16a48:	ldr	r3, [sp, #612]	; 0x264
   16a4c:	cmp	r3, #0
   16a50:	beq	16a64 <__assert_fail@plt+0x5694>
   16a54:	ldr	r2, [sp, #604]	; 0x25c
   16a58:	ldr	r1, [sp, #872]	; 0x368
   16a5c:	cmp	r2, r1
   16a60:	bne	17530 <__assert_fail@plt+0x6160>
   16a64:	cmp	r4, r9
   16a68:	bne	16a10 <__assert_fail@plt+0x5640>
   16a6c:	str	fp, [sp, #32]
   16a70:	ldr	r0, [sp, #864]	; 0x360
   16a74:	cmp	r0, #0
   16a78:	beq	16a94 <__assert_fail@plt+0x56c4>
   16a7c:	ldr	r1, [sp, #876]	; 0x36c
   16a80:	cmp	r1, #0
   16a84:	beq	16a94 <__assert_fail@plt+0x56c4>
   16a88:	bl	110a0 <strcmp@plt>
   16a8c:	cmp	r0, #0
   16a90:	beq	16dc0 <__assert_fail@plt+0x59f0>
   16a94:	add	r0, sp, #672	; 0x2a0
   16a98:	bl	135ac <__assert_fail@plt+0x21dc>
   16a9c:	subs	r5, r0, #0
   16aa0:	bne	16cb4 <__assert_fail@plt+0x58e4>
   16aa4:	ldrb	r7, [sp, #853]	; 0x355
   16aa8:	cmp	r7, #0
   16aac:	bne	16dd0 <__assert_fail@plt+0x5a00>
   16ab0:	ldrb	r4, [sp, #824]	; 0x338
   16ab4:	cmp	r4, #0
   16ab8:	beq	16c2c <__assert_fail@plt+0x585c>
   16abc:	add	r3, sp, #760	; 0x2f8
   16ac0:	ldr	r1, [sp, #80]	; 0x50
   16ac4:	ldrd	r2, [r3]
   16ac8:	strd	r2, [r1]
   16acc:	cmp	r7, #0
   16ad0:	moveq	r4, #1
   16ad4:	beq	16bf0 <__assert_fail@plt+0x5820>
   16ad8:	ldr	r3, [sp, #948]	; 0x3b4
   16adc:	cmp	r3, #0
   16ae0:	beq	1754c <__assert_fail@plt+0x617c>
   16ae4:	movw	r1, #65036	; 0xfe0c
   16ae8:	movt	r1, #1
   16aec:	ldr	r0, [sp, #948]	; 0x3b4
   16af0:	bl	110a0 <strcmp@plt>
   16af4:	cmp	r0, #0
   16af8:	bne	173f0 <__assert_fail@plt+0x6020>
   16afc:	movw	r1, #1648	; 0x670
   16b00:	movt	r1, #2
   16b04:	mov	r2, #5
   16b08:	bl	11130 <dcgettext@plt>
   16b0c:	bl	12c70 <__assert_fail@plt+0x18a0>
   16b10:	ldr	r9, [sp, #80]	; 0x50
   16b14:	mov	r2, #5
   16b18:	movw	r1, #1716	; 0x6b4
   16b1c:	movt	r1, #2
   16b20:	mov	r0, #0
   16b24:	ldm	r9, {r4, r8}
   16b28:	bl	11130 <dcgettext@plt>
   16b2c:	asr	r5, r4, #31
   16b30:	mov	r2, r4
   16b34:	str	r8, [sp]
   16b38:	mov	r3, r5
   16b3c:	bl	12c70 <__assert_fail@plt+0x18a0>
   16b40:	add	r1, sp, #268	; 0x10c
   16b44:	mov	r0, r9
   16b48:	bl	11088 <gmtime_r@plt>
   16b4c:	cmp	r0, #0
   16b50:	beq	16b88 <__assert_fail@plt+0x57b8>
   16b54:	mov	r2, #5
   16b58:	movw	r1, #1752	; 0x6d8
   16b5c:	movt	r1, #2
   16b60:	mov	r0, #0
   16b64:	bl	11130 <dcgettext@plt>
   16b68:	mov	r4, r0
   16b6c:	mov	r1, #0
   16b70:	add	r2, sp, #372	; 0x174
   16b74:	add	r0, sp, #268	; 0x10c
   16b78:	bl	12fb4 <__assert_fail@plt+0x1be4>
   16b7c:	mov	r1, r0
   16b80:	mov	r0, r4
   16b84:	bl	12c70 <__assert_fail@plt+0x18a0>
   16b88:	add	r2, sp, #572	; 0x23c
   16b8c:	mov	r0, r6
   16b90:	ldr	r1, [sp, #80]	; 0x50
   16b94:	bl	1b15c <__assert_fail@plt+0x9d8c>
   16b98:	cmp	r0, #0
   16b9c:	beq	16bec <__assert_fail@plt+0x581c>
   16ba0:	ldr	r8, [sp, #608]	; 0x260
   16ba4:	mov	r2, #5
   16ba8:	movw	r1, #1772	; 0x6ec
   16bac:	movt	r1, #2
   16bb0:	mov	r0, #0
   16bb4:	bl	11130 <dcgettext@plt>
   16bb8:	mov	r4, r0
   16bbc:	add	r2, sp, #372	; 0x174
   16bc0:	mov	r1, #0
   16bc4:	add	r0, sp, #572	; 0x23c
   16bc8:	bl	12fb4 <__assert_fail@plt+0x1be4>
   16bcc:	mov	r5, r0
   16bd0:	add	r1, sp, #108	; 0x6c
   16bd4:	mov	r0, r8
   16bd8:	bl	12abc <__assert_fail@plt+0x16ec>
   16bdc:	mov	r2, r0
   16be0:	mov	r1, r5
   16be4:	mov	r0, r4
   16be8:	bl	12c70 <__assert_fail@plt+0x18a0>
   16bec:	mov	r4, r7
   16bf0:	ldr	r3, [sp, #944]	; 0x3b0
   16bf4:	cmp	r6, r3
   16bf8:	beq	16c04 <__assert_fail@plt+0x5834>
   16bfc:	mov	r0, r6
   16c00:	bl	1b14c <__assert_fail@plt+0x9d7c>
   16c04:	ldr	r0, [sp, #32]
   16c08:	bl	1c02c <__assert_fail@plt+0xac5c>
   16c0c:	mov	r0, r4
   16c10:	add	sp, sp, #908	; 0x38c
   16c14:	ldrd	r4, [sp]
   16c18:	ldrd	r6, [sp, #8]
   16c1c:	ldrd	r8, [sp, #16]
   16c20:	ldrd	sl, [sp, #24]
   16c24:	add	sp, sp, #32
   16c28:	pop	{pc}		; (ldr pc, [sp], #4)
   16c2c:	ldr	r1, [sp, #828]	; 0x33c
   16c30:	ldr	ip, [sp, #832]	; 0x340
   16c34:	ldr	r0, [sp, #844]	; 0x34c
   16c38:	ldr	r2, [sp, #836]	; 0x344
   16c3c:	ldr	lr, [sp, #840]	; 0x348
   16c40:	orr	r3, r0, r1
   16c44:	orr	r3, r3, ip
   16c48:	ldr	ip, [sp, #848]	; 0x350
   16c4c:	orr	r3, r3, lr
   16c50:	add	r2, r2, ip
   16c54:	orr	r3, r3, r2
   16c58:	cmp	r3, #1
   16c5c:	ble	16e58 <__assert_fail@plt+0x5a88>
   16c60:	cmp	r7, #0
   16c64:	beq	16bf0 <__assert_fail@plt+0x5820>
   16c68:	cmp	r0, #1
   16c6c:	bgt	17440 <__assert_fail@plt+0x6070>
   16c70:	cmp	r1, #1
   16c74:	bgt	17430 <__assert_fail@plt+0x6060>
   16c78:	ldr	r3, [sp, #832]	; 0x340
   16c7c:	cmp	r3, #1
   16c80:	bgt	17420 <__assert_fail@plt+0x6050>
   16c84:	ldr	r3, [sp, #840]	; 0x348
   16c88:	cmp	r3, #1
   16c8c:	bgt	17410 <__assert_fail@plt+0x6040>
   16c90:	ldr	r3, [sp, #836]	; 0x344
   16c94:	ldr	r2, [sp, #848]	; 0x350
   16c98:	add	r3, r3, r2
   16c9c:	cmp	r3, #1
   16ca0:	ble	16bf0 <__assert_fail@plt+0x5820>
   16ca4:	movw	r0, #65292	; 0xff0c
   16ca8:	movt	r0, #1
   16cac:	bl	12c70 <__assert_fail@plt+0x18a0>
   16cb0:	b	16bf0 <__assert_fail@plt+0x5820>
   16cb4:	ldrb	r4, [sp, #853]	; 0x355
   16cb8:	cmp	r4, #0
   16cbc:	beq	16bf0 <__assert_fail@plt+0x5820>
   16cc0:	ldr	r2, [sp, #40]	; 0x28
   16cc4:	mov	r0, #0
   16cc8:	mov	r4, #0
   16ccc:	ldr	r3, [sp, #672]	; 0x2a0
   16cd0:	add	r7, r7, r2
   16cd4:	mov	r2, #5
   16cd8:	cmp	r3, r7
   16cdc:	movwcs	r1, #64876	; 0xfd6c
   16ce0:	movwcc	r1, #64900	; 0xfd84
   16ce4:	movtcs	r1, #1
   16ce8:	movtcc	r1, #1
   16cec:	bl	11130 <dcgettext@plt>
   16cf0:	ldr	r1, [sp, #672]	; 0x2a0
   16cf4:	bl	12c70 <__assert_fail@plt+0x18a0>
   16cf8:	b	16bf0 <__assert_fail@plt+0x5820>
   16cfc:	cmp	r0, #100	; 0x64
   16d00:	bgt	172a4 <__assert_fail@plt+0x5ed4>
   16d04:	add	r3, sp, #472	; 0x1d8
   16d08:	str	r3, [sp, #948]	; 0x3b4
   16d0c:	mov	r3, #0
   16d10:	str	r3, [sp, #32]
   16d14:	cmp	lr, #34	; 0x22
   16d18:	ldr	r1, [sp, #948]	; 0x3b4
   16d1c:	beq	16d50 <__assert_fail@plt+0x5980>
   16d20:	ldr	fp, [sp, #32]
   16d24:	sub	lr, lr, #92	; 0x5c
   16d28:	clz	lr, lr
   16d2c:	lsr	lr, lr, #5
   16d30:	add	r3, r2, lr
   16d34:	ldrb	r0, [r2, lr]
   16d38:	add	r2, r3, #1
   16d3c:	ldrb	lr, [r3, #1]
   16d40:	strb	r0, [r1], #1
   16d44:	cmp	lr, #34	; 0x22
   16d48:	bne	16d24 <__assert_fail@plt+0x5954>
   16d4c:	str	fp, [sp, #32]
   16d50:	mov	r3, #0
   16d54:	ldr	r0, [sp, #948]	; 0x3b4
   16d58:	str	r2, [sp, #48]	; 0x30
   16d5c:	strb	r3, [r1]
   16d60:	bl	1aec0 <__assert_fail@plt+0x9af0>
   16d64:	subs	r6, r0, #0
   16d68:	moveq	r4, r6
   16d6c:	beq	16c04 <__assert_fail@plt+0x5834>
   16d70:	ldr	fp, [sp, #32]
   16d74:	ldr	r2, [sp, #48]	; 0x30
   16d78:	add	r2, r2, #1
   16d7c:	mov	r4, r2
   16d80:	ldrb	r3, [r2], #1
   16d84:	cmp	r3, #9
   16d88:	bcc	16d9c <__assert_fail@plt+0x59cc>
   16d8c:	cmp	r3, #13
   16d90:	bls	16d7c <__assert_fail@plt+0x59ac>
   16d94:	cmp	r3, #32
   16d98:	beq	16d7c <__assert_fail@plt+0x59ac>
   16d9c:	mov	r1, r9
   16da0:	add	r2, sp, #224	; 0xe0
   16da4:	str	fp, [sp, #32]
   16da8:	mov	r0, r6
   16dac:	bl	1b15c <__assert_fail@plt+0x9d8c>
   16db0:	cmp	r0, #0
   16db4:	moveq	r4, r0
   16db8:	bne	168c0 <__assert_fail@plt+0x54f0>
   16dbc:	b	16bf0 <__assert_fail@plt+0x5820>
   16dc0:	mvn	r3, #0
   16dc4:	str	r3, [sp, #872]	; 0x368
   16dc8:	str	r0, [sp, #876]	; 0x36c
   16dcc:	b	16a94 <__assert_fail@plt+0x56c4>
   16dd0:	mov	r2, #5
   16dd4:	movw	r1, #64940	; 0xfdac
   16dd8:	movt	r1, #1
   16ddc:	bl	11130 <dcgettext@plt>
   16de0:	bl	12c70 <__assert_fail@plt+0x18a0>
   16de4:	ldrb	r0, [sp, #824]	; 0x338
   16de8:	cmp	r0, #0
   16dec:	bne	173bc <__assert_fail@plt+0x5fec>
   16df0:	ldr	r7, [sp, #848]	; 0x350
   16df4:	movw	r4, #4512	; 0x11a0
   16df8:	movt	r4, #3
   16dfc:	ldr	r5, [r4]
   16e00:	cmp	r7, #0
   16e04:	movwne	r1, #64988	; 0xfddc
   16e08:	movne	r2, #5
   16e0c:	movtne	r1, #1
   16e10:	bne	17310 <__assert_fail@plt+0x5f40>
   16e14:	ldr	r3, [sp, #948]	; 0x3b4
   16e18:	cmp	r3, #0
   16e1c:	beq	17acc <__assert_fail@plt+0x66fc>
   16e20:	ldr	r3, [sp, #944]	; 0x3b0
   16e24:	cmp	r3, r6
   16e28:	beq	172ec <__assert_fail@plt+0x5f1c>
   16e2c:	movw	r1, #65012	; 0xfdf4
   16e30:	movt	r1, #1
   16e34:	mov	r0, r7
   16e38:	mov	r2, #5
   16e3c:	bl	11130 <dcgettext@plt>
   16e40:	mov	r2, r0
   16e44:	mov	r1, #1
   16e48:	ldr	r3, [sp, #948]	; 0x3b4
   16e4c:	mov	r0, r5
   16e50:	bl	112ec <__fprintf_chk@plt>
   16e54:	b	17324 <__assert_fail@plt+0x5f54>
   16e58:	add	r3, sp, #712	; 0x2c8
   16e5c:	ldrd	r8, [r3]
   16e60:	cmp	r8, #0
   16e64:	sbcs	r3, r9, #0
   16e68:	blt	174f8 <__assert_fail@plt+0x6128>
   16e6c:	ldr	r3, [sp, #720]	; 0x2d0
   16e70:	cmp	r3, #2
   16e74:	beq	17468 <__assert_fail@plt+0x6098>
   16e78:	movw	r1, #63636	; 0xf894
   16e7c:	movt	r1, #65535	; 0xffff
   16e80:	adds	r1, r8, r1
   16e84:	mvn	r0, #0
   16e88:	mov	r3, #0
   16e8c:	movw	r2, #1900	; 0x76c
   16e90:	str	r1, [sp, #56]	; 0x38
   16e94:	adc	r1, r9, r0
   16e98:	cmp	r9, r3
   16e9c:	cmpeq	r8, r2
   16ea0:	mov	r5, #0
   16ea4:	str	r1, [sp, #60]	; 0x3c
   16ea8:	ldrd	r2, [sp, #56]	; 0x38
   16eac:	bcs	17454 <__assert_fail@plt+0x6084>
   16eb0:	cmp	r2, #0
   16eb4:	sbcs	r3, r3, #0
   16eb8:	bge	17460 <__assert_fail@plt+0x6090>
   16ebc:	ldrd	r0, [sp, #56]	; 0x38
   16ec0:	asr	r3, r0, #31
   16ec4:	str	r0, [sp, #156]	; 0x9c
   16ec8:	cmp	r1, r3
   16ecc:	cmpeq	r0, r0
   16ed0:	movne	r5, #1
   16ed4:	and	r5, r5, #1
   16ed8:	cmp	r5, #0
   16edc:	bne	174c8 <__assert_fail@plt+0x60f8>
   16ee0:	add	r3, sp, #728	; 0x2d8
   16ee4:	mvn	r8, #0
   16ee8:	ldrb	ip, [sp, #853]	; 0x355
   16eec:	mvn	r9, #0
   16ef0:	ldrd	r2, [r3]
   16ef4:	adds	r0, r2, r8
   16ef8:	adcs	r1, r3, r9
   16efc:	asr	r3, r0, #31
   16f00:	mov	lr, r0
   16f04:	movvs	r7, #1
   16f08:	movvc	r7, #0
   16f0c:	str	r0, [sp, #152]	; 0x98
   16f10:	cmp	r1, r3
   16f14:	cmpeq	r0, r0
   16f18:	movne	r7, #1
   16f1c:	cmp	r7, #0
   16f20:	bne	174d4 <__assert_fail@plt+0x6104>
   16f24:	add	r3, sp, #736	; 0x2e0
   16f28:	ldrd	r2, [r3]
   16f2c:	asr	r1, r2, #31
   16f30:	mov	fp, r2
   16f34:	str	r2, [sp, #148]	; 0x94
   16f38:	cmp	r3, r1
   16f3c:	cmpeq	r2, r2
   16f40:	movne	sl, #1
   16f44:	moveq	sl, #0
   16f48:	bne	174d4 <__assert_fail@plt+0x6104>
   16f4c:	ldr	r0, [sp, #844]	; 0x34c
   16f50:	cmp	r0, #0
   16f54:	bne	17a5c <__assert_fail@plt+0x668c>
   16f58:	ldrb	r3, [sp, #825]	; 0x339
   16f5c:	cmp	r3, #0
   16f60:	beq	17c94 <__assert_fail@plt+0x68c4>
   16f64:	ldr	r3, [sp, #828]	; 0x33c
   16f68:	cmp	r3, #0
   16f6c:	bne	17c94 <__assert_fail@plt+0x68c4>
   16f70:	ldr	r2, [sp, #832]	; 0x340
   16f74:	cmp	r2, #0
   16f78:	beq	17a5c <__assert_fail@plt+0x668c>
   16f7c:	cmp	ip, #0
   16f80:	str	r5, [sp, #136]	; 0x88
   16f84:	str	r5, [sp, #140]	; 0x8c
   16f88:	str	r5, [sp, #144]	; 0x90
   16f8c:	str	r5, [sp, #764]	; 0x2fc
   16f90:	bne	17cb8 <__assert_fail@plt+0x68e8>
   16f94:	mov	ip, r5
   16f98:	mov	r2, r5
   16f9c:	mvn	r1, #0
   16fa0:	str	r1, [sp, #168]	; 0xa8
   16fa4:	ldr	r1, [sp, #836]	; 0x344
   16fa8:	mvn	r7, #0
   16fac:	mov	r0, r6
   16fb0:	str	r3, [sp, #180]	; 0xb4
   16fb4:	ldr	r3, [sp, #156]	; 0x9c
   16fb8:	str	r7, [sp, #160]	; 0xa0
   16fbc:	cmp	r1, #0
   16fc0:	add	r1, sp, #136	; 0x88
   16fc4:	str	r2, [sp, #184]	; 0xb8
   16fc8:	ldrne	r8, [sp, #692]	; 0x2b4
   16fcc:	str	ip, [sp, #188]	; 0xbc
   16fd0:	ldreq	r8, [sp, #168]	; 0xa8
   16fd4:	str	fp, [sp, #192]	; 0xc0
   16fd8:	str	lr, [sp, #196]	; 0xc4
   16fdc:	strne	r8, [sp, #168]	; 0xa8
   16fe0:	str	r3, [sp, #200]	; 0xc8
   16fe4:	str	r8, [sp, #212]	; 0xd4
   16fe8:	bl	1b220 <__assert_fail@plt+0x9e50>
   16fec:	mov	r8, r0
   16ff0:	add	r1, sp, #136	; 0x88
   16ff4:	add	r0, sp, #180	; 0xb4
   16ff8:	bl	12a38 <__assert_fail@plt+0x1668>
   16ffc:	cmp	r0, #0
   17000:	bne	17600 <__assert_fail@plt+0x6230>
   17004:	ldr	r9, [sp, #848]	; 0x350
   17008:	cmp	r9, #0
   1700c:	bne	17568 <__assert_fail@plt+0x6198>
   17010:	ldr	r2, [sp, #136]	; 0x88
   17014:	ldr	r1, [sp, #140]	; 0x8c
   17018:	ldr	lr, [sp, #144]	; 0x90
   1701c:	ldr	r0, [sp, #180]	; 0xb4
   17020:	ldr	ip, [sp, #184]	; 0xb8
   17024:	str	r2, [sp, #72]	; 0x48
   17028:	ldrb	r3, [sp, #853]	; 0x355
   1702c:	str	lr, [sp, #40]	; 0x28
   17030:	str	r0, [sp, #64]	; 0x40
   17034:	cmp	r0, r2
   17038:	cmpeq	ip, r1
   1703c:	ldr	r2, [sp, #148]	; 0x94
   17040:	str	r1, [sp, #88]	; 0x58
   17044:	ldr	r7, [sp, #152]	; 0x98
   17048:	ldr	r8, [sp, #196]	; 0xc4
   1704c:	str	r2, [sp, #80]	; 0x50
   17050:	ldr	r2, [sp, #156]	; 0x9c
   17054:	str	ip, [sp, #84]	; 0x54
   17058:	str	r2, [sp, #56]	; 0x38
   1705c:	ldr	r2, [sp, #188]	; 0xbc
   17060:	mov	fp, r2
   17064:	ldr	r2, [sp, #192]	; 0xc0
   17068:	str	r2, [sp, #36]	; 0x24
   1706c:	ldr	r2, [sp, #200]	; 0xc8
   17070:	str	r2, [sp, #48]	; 0x30
   17074:	bne	18258 <__assert_fail@plt+0x6e88>
   17078:	ldr	r1, [sp, #36]	; 0x24
   1707c:	ldr	ip, [sp, #40]	; 0x28
   17080:	ldr	r2, [sp, #80]	; 0x50
   17084:	cmp	fp, ip
   17088:	sub	r2, r1, r2
   1708c:	clz	r2, r2
   17090:	lsr	r2, r2, #5
   17094:	moveq	r2, #0
   17098:	cmp	r2, #0
   1709c:	beq	18258 <__assert_fail@plt+0x6e88>
   170a0:	ldr	r2, [sp, #48]	; 0x30
   170a4:	ldr	r1, [sp, #56]	; 0x38
   170a8:	cmp	r8, r7
   170ac:	cmpeq	r2, r1
   170b0:	bne	18258 <__assert_fail@plt+0x6e88>
   170b4:	cmp	r3, #0
   170b8:	beq	16bf0 <__assert_fail@plt+0x5820>
   170bc:	mov	r2, #5
   170c0:	movw	r1, #132	; 0x84
   170c4:	movt	r1, #2
   170c8:	mov	r0, #0
   170cc:	bl	11130 <dcgettext@plt>
   170d0:	bl	12c70 <__assert_fail@plt+0x18a0>
   170d4:	mov	r2, #5
   170d8:	movw	r1, #168	; 0xa8
   170dc:	movt	r1, #2
   170e0:	mov	r0, #0
   170e4:	bl	11130 <dcgettext@plt>
   170e8:	mov	r3, r0
   170ec:	add	r5, sp, #572	; 0x23c
   170f0:	mov	r2, r5
   170f4:	add	r1, sp, #672	; 0x2a0
   170f8:	add	r0, sp, #180	; 0xb4
   170fc:	str	r3, [sp, #40]	; 0x28
   17100:	mov	sl, #1
   17104:	bl	12fb4 <__assert_fail@plt+0x1be4>
   17108:	ldr	r3, [sp, #40]	; 0x28
   1710c:	mov	r1, r0
   17110:	mov	r0, r3
   17114:	bl	12c70 <__assert_fail@plt+0x18a0>
   17118:	mov	r2, #5
   1711c:	movw	r1, #200	; 0xc8
   17120:	movt	r1, #2
   17124:	mov	r0, #0
   17128:	bl	11130 <dcgettext@plt>
   1712c:	mov	r3, r0
   17130:	mov	r2, r5
   17134:	add	r1, sp, #672	; 0x2a0
   17138:	add	r0, sp, #136	; 0x88
   1713c:	str	r3, [sp, #40]	; 0x28
   17140:	bl	12fb4 <__assert_fail@plt+0x1be4>
   17144:	ldr	r3, [sp, #40]	; 0x28
   17148:	mov	r1, r0
   1714c:	mov	r0, r3
   17150:	bl	12c70 <__assert_fail@plt+0x18a0>
   17154:	movw	lr, #1768	; 0x6e8
   17158:	movt	lr, #2
   1715c:	movw	r2, #64864	; 0xfd60
   17160:	movt	r2, #1
   17164:	mov	r0, lr
   17168:	mov	r3, lr
   1716c:	stmib	sp, {r0, lr}
   17170:	movw	ip, #1768	; 0x6e8
   17174:	movt	ip, #2
   17178:	ldr	fp, [sp, #72]	; 0x48
   1717c:	movw	r0, #64864	; 0xfd60
   17180:	movt	r0, #1
   17184:	str	r3, [sp, #12]
   17188:	mov	r3, #100	; 0x64
   1718c:	ldr	r1, [sp, #84]	; 0x54
   17190:	str	r2, [sp, #16]
   17194:	mov	r2, #1
   17198:	ldr	lr, [sp, #88]	; 0x58
   1719c:	cmp	r1, lr
   171a0:	ldr	lr, [sp, #64]	; 0x40
   171a4:	moveq	r1, ip
   171a8:	movne	r1, r0
   171ac:	str	r1, [sp, #20]
   171b0:	mov	r1, r3
   171b4:	cmp	lr, fp
   171b8:	movw	lr, #232	; 0xe8
   171bc:	movt	lr, #2
   171c0:	movne	ip, r0
   171c4:	mov	r0, r5
   171c8:	str	lr, [sp]
   171cc:	str	ip, [sp, #24]
   171d0:	bl	113c4 <__snprintf_chk@plt>
   171d4:	ldrb	r3, [sp, #623]	; 0x26f
   171d8:	cmp	r3, #32
   171dc:	bne	18538 <__assert_fail@plt+0x7168>
   171e0:	ldr	fp, [sp, #32]
   171e4:	add	r2, r5, #50	; 0x32
   171e8:	mov	r3, #51	; 0x33
   171ec:	sub	r1, r3, #1
   171f0:	ldrb	r0, [r2], #-1
   171f4:	cmp	r0, #32
   171f8:	bne	17204 <__assert_fail@plt+0x5e34>
   171fc:	subs	r3, r1, #0
   17200:	bne	171ec <__assert_fail@plt+0x5e1c>
   17204:	str	fp, [sp, #32]
   17208:	add	r2, sp, #904	; 0x388
   1720c:	mov	r1, r5
   17210:	add	r3, r2, r3
   17214:	mov	r2, #0
   17218:	movw	r0, #2848	; 0xb20
   1721c:	movt	r0, #2
   17220:	strb	r2, [r3, #-332]	; 0xfffffeb4
   17224:	bl	12c70 <__assert_fail@plt+0x18a0>
   17228:	mov	r2, #5
   1722c:	mov	r0, #0
   17230:	movw	r1, #292	; 0x124
   17234:	movt	r1, #2
   17238:	bl	11130 <dcgettext@plt>
   1723c:	bl	12c70 <__assert_fail@plt+0x18a0>
   17240:	cmp	sl, #0
   17244:	bne	184dc <__assert_fail@plt+0x710c>
   17248:	ldr	r3, [sp, #36]	; 0x24
   1724c:	ldr	r2, [sp, #80]	; 0x50
   17250:	cmp	r3, r2
   17254:	cmpne	r8, r7
   17258:	bne	184c0 <__assert_fail@plt+0x70f0>
   1725c:	mov	r2, #5
   17260:	movw	r1, #408	; 0x198
   17264:	movt	r1, #2
   17268:	mov	r0, #0
   1726c:	bl	11130 <dcgettext@plt>
   17270:	bl	12c70 <__assert_fail@plt+0x18a0>
   17274:	cmp	r9, #0
   17278:	beq	18378 <__assert_fail@plt+0x6fa8>
   1727c:	movw	r1, #444	; 0x1bc
   17280:	movt	r1, #2
   17284:	mov	r2, #5
   17288:	mov	r0, #0
   1728c:	bl	11130 <dcgettext@plt>
   17290:	mov	r1, r0
   17294:	movw	r0, #484	; 0x1e4
   17298:	movt	r0, #2
   1729c:	bl	12c70 <__assert_fail@plt+0x18a0>
   172a0:	b	16bf0 <__assert_fail@plt+0x5820>
   172a4:	str	r2, [sp, #48]	; 0x30
   172a8:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   172ac:	subs	r3, r0, #0
   172b0:	ldr	r2, [sp, #48]	; 0x30
   172b4:	str	r3, [sp, #32]
   172b8:	beq	172dc <__assert_fail@plt+0x5f0c>
   172bc:	ldr	r3, [sp, #32]
   172c0:	ldrb	lr, [r4, #4]
   172c4:	str	r3, [sp, #948]	; 0x3b4
   172c8:	b	16d14 <__assert_fail@plt+0x5944>
   172cc:	add	r0, sp, #100	; 0x64
   172d0:	mov	r9, r0
   172d4:	bl	12868 <__assert_fail@plt+0x1498>
   172d8:	b	167e0 <__assert_fail@plt+0x5410>
   172dc:	mov	r3, #0
   172e0:	mov	r4, r3
   172e4:	str	r3, [sp, #32]
   172e8:	b	16c04 <__assert_fail@plt+0x5834>
   172ec:	movw	r1, #65036	; 0xfe0c
   172f0:	movt	r1, #1
   172f4:	ldr	r0, [sp, #948]	; 0x3b4
   172f8:	bl	110a0 <strcmp@plt>
   172fc:	cmp	r0, #0
   17300:	bne	17abc <__assert_fail@plt+0x66ec>
   17304:	movw	r1, #65044	; 0xfe14
   17308:	movt	r1, #1
   1730c:	mov	r2, #5
   17310:	bl	11130 <dcgettext@plt>
   17314:	mov	r2, r0
   17318:	mov	r1, #1
   1731c:	mov	r0, r5
   17320:	bl	112ec <__fprintf_chk@plt>
   17324:	ldr	r2, [sp, #836]	; 0x344
   17328:	ldr	r5, [r4]
   1732c:	ldr	r3, [sp, #848]	; 0x350
   17330:	cmp	r2, #0
   17334:	beq	1736c <__assert_fail@plt+0x5f9c>
   17338:	cmp	r3, #0
   1733c:	bne	17374 <__assert_fail@plt+0x5fa4>
   17340:	ldr	r3, [sp, #692]	; 0x2b4
   17344:	cmp	r3, #0
   17348:	ble	1739c <__assert_fail@plt+0x5fcc>
   1734c:	mov	r3, r5
   17350:	movw	r0, #65124	; 0xfe64
   17354:	movt	r0, #1
   17358:	mov	r2, #5
   1735c:	mov	r1, #1
   17360:	bl	11184 <fwrite@plt>
   17364:	ldr	r5, [r4]
   17368:	ldr	r3, [sp, #848]	; 0x350
   1736c:	cmp	r3, #0
   17370:	beq	1739c <__assert_fail@plt+0x5fcc>
   17374:	add	r1, sp, #108	; 0x6c
   17378:	ldr	r0, [sp, #696]	; 0x2b8
   1737c:	bl	12abc <__assert_fail@plt+0x16ec>
   17380:	mov	r3, r0
   17384:	movw	r2, #65132	; 0xfe6c
   17388:	movt	r2, #1
   1738c:	mov	r0, r5
   17390:	mov	r1, #1
   17394:	bl	112ec <__fprintf_chk@plt>
   17398:	ldr	r5, [r4]
   1739c:	mov	r1, r5
   173a0:	mov	r0, #10
   173a4:	bl	11340 <fputc@plt>
   173a8:	ldrb	r4, [sp, #824]	; 0x338
   173ac:	ldrb	r7, [sp, #853]	; 0x355
   173b0:	cmp	r4, #0
   173b4:	beq	16c2c <__assert_fail@plt+0x585c>
   173b8:	b	16abc <__assert_fail@plt+0x56ec>
   173bc:	movw	r4, #4512	; 0x11a0
   173c0:	movt	r4, #3
   173c4:	ldr	r7, [r4]
   173c8:	mov	r0, r5
   173cc:	mov	r2, #5
   173d0:	movw	r1, #64960	; 0xfdc0
   173d4:	movt	r1, #1
   173d8:	bl	11130 <dcgettext@plt>
   173dc:	mov	r2, r0
   173e0:	mov	r1, #1
   173e4:	mov	r0, r7
   173e8:	bl	112ec <__fprintf_chk@plt>
   173ec:	b	17324 <__assert_fail@plt+0x5f54>
   173f0:	mov	r2, #5
   173f4:	movw	r1, #1676	; 0x68c
   173f8:	movt	r1, #2
   173fc:	mov	r0, #0
   17400:	bl	11130 <dcgettext@plt>
   17404:	ldr	r1, [sp, #948]	; 0x3b4
   17408:	bl	12c70 <__assert_fail@plt+0x18a0>
   1740c:	b	16b10 <__assert_fail@plt+0x5740>
   17410:	movw	r0, #65248	; 0xfee0
   17414:	movt	r0, #1
   17418:	bl	12c70 <__assert_fail@plt+0x18a0>
   1741c:	b	16c90 <__assert_fail@plt+0x58c0>
   17420:	movw	r0, #65212	; 0xfebc
   17424:	movt	r0, #1
   17428:	bl	12c70 <__assert_fail@plt+0x18a0>
   1742c:	b	16c84 <__assert_fail@plt+0x58b4>
   17430:	movw	r0, #65176	; 0xfe98
   17434:	movt	r0, #1
   17438:	bl	12c70 <__assert_fail@plt+0x18a0>
   1743c:	b	16c78 <__assert_fail@plt+0x58a8>
   17440:	movw	r0, #65140	; 0xfe74
   17444:	movt	r0, #1
   17448:	bl	12c70 <__assert_fail@plt+0x18a0>
   1744c:	ldr	r1, [sp, #828]	; 0x33c
   17450:	b	16c70 <__assert_fail@plt+0x58a0>
   17454:	cmp	r2, #0
   17458:	sbcs	r3, r3, #0
   1745c:	bge	16ebc <__assert_fail@plt+0x5aec>
   17460:	mov	r5, #1
   17464:	b	16ebc <__assert_fail@plt+0x5aec>
   17468:	cmp	r8, #69	; 0x45
   1746c:	mov	r5, #0
   17470:	sbcs	r3, r9, #0
   17474:	movwge	sl, #1900	; 0x76c
   17478:	movlt	sl, #2000	; 0x7d0
   1747c:	adds	sl, r8, sl
   17480:	adc	r5, r9, r5
   17484:	cmp	r7, #0
   17488:	moveq	r8, sl
   1748c:	moveq	r9, r5
   17490:	beq	16e78 <__assert_fail@plt+0x5aa8>
   17494:	mov	r2, #5
   17498:	movw	r1, #65332	; 0xff34
   1749c:	movt	r1, #1
   174a0:	mov	r0, #0
   174a4:	bl	11130 <dcgettext@plt>
   174a8:	mov	r2, r8
   174ac:	mov	r3, r9
   174b0:	str	sl, [sp]
   174b4:	str	r5, [sp, #4]
   174b8:	mov	r8, sl
   174bc:	mov	r9, r5
   174c0:	bl	12c70 <__assert_fail@plt+0x18a0>
   174c4:	b	16e78 <__assert_fail@plt+0x5aa8>
   174c8:	cmp	r7, #0
   174cc:	bne	17ae0 <__assert_fail@plt+0x6710>
   174d0:	ldrb	ip, [sp, #853]	; 0x355
   174d4:	cmp	ip, #0
   174d8:	beq	16bf0 <__assert_fail@plt+0x5820>
   174dc:	mov	r2, #5
   174e0:	movw	r1, #65408	; 0xff80
   174e4:	movt	r1, #1
   174e8:	mov	r0, #0
   174ec:	bl	11130 <dcgettext@plt>
   174f0:	bl	12c70 <__assert_fail@plt+0x18a0>
   174f4:	b	16bf0 <__assert_fail@plt+0x5820>
   174f8:	movw	r0, #63636	; 0xf894
   174fc:	movt	r0, #65535	; 0xffff
   17500:	subs	r2, r0, r8
   17504:	mvn	r1, #0
   17508:	sbcs	r3, r1, r9
   1750c:	asr	r1, r2, #31
   17510:	mov	r5, r4
   17514:	movvs	r5, #1
   17518:	str	r2, [sp, #156]	; 0x9c
   1751c:	cmp	r3, r1
   17520:	cmpeq	r2, r2
   17524:	movne	r5, #1
   17528:	and	r5, r5, #1
   1752c:	b	16ed8 <__assert_fail@plt+0x5b08>
   17530:	movw	r1, #269	; 0x10d
   17534:	str	fp, [sp, #32]
   17538:	str	r3, [sp, #876]	; 0x36c
   1753c:	str	r1, [sp, #880]	; 0x370
   17540:	str	r2, [sp, #884]	; 0x374
   17544:	str	r8, [sp, #888]	; 0x378
   17548:	b	16a70 <__assert_fail@plt+0x56a0>
   1754c:	mov	r2, #5
   17550:	mov	r0, r3
   17554:	movw	r1, #1620	; 0x654
   17558:	movt	r1, #2
   1755c:	bl	11130 <dcgettext@plt>
   17560:	bl	12c70 <__assert_fail@plt+0x18a0>
   17564:	b	16b10 <__assert_fail@plt+0x5740>
   17568:	movw	r2, #22616	; 0x5858
   1756c:	add	r1, sp, #572	; 0x23c
   17570:	ldr	r0, [sp, #696]	; 0x2b8
   17574:	mov	r3, #88	; 0x58
   17578:	strh	r2, [r1], #3
   1757c:	strb	r3, [sp, #574]	; 0x23e
   17580:	bl	12abc <__assert_fail@plt+0x16ec>
   17584:	add	r0, sp, #572	; 0x23c
   17588:	bl	1aec0 <__assert_fail@plt+0x9af0>
   1758c:	subs	r3, r0, #0
   17590:	mov	fp, r3
   17594:	beq	18350 <__assert_fail@plt+0x6f80>
   17598:	ldr	r3, [sp, #180]	; 0xb4
   1759c:	add	r1, sp, #136	; 0x88
   175a0:	ldr	ip, [sp, #184]	; 0xb8
   175a4:	ldr	r2, [sp, #188]	; 0xbc
   175a8:	str	r3, [sp, #136]	; 0x88
   175ac:	ldr	r3, [sp, #192]	; 0xc0
   175b0:	str	ip, [sp, #140]	; 0x8c
   175b4:	ldr	ip, [sp, #196]	; 0xc4
   175b8:	str	r2, [sp, #144]	; 0x90
   175bc:	ldr	r2, [sp, #200]	; 0xc8
   175c0:	str	r3, [sp, #148]	; 0x94
   175c4:	ldr	r3, [sp, #212]	; 0xd4
   175c8:	str	ip, [sp, #152]	; 0x98
   175cc:	str	r7, [sp, #160]	; 0xa0
   175d0:	str	r2, [sp, #156]	; 0x9c
   175d4:	str	r3, [sp, #168]	; 0xa8
   175d8:	bl	1b220 <__assert_fail@plt+0x9e50>
   175dc:	mov	r8, r0
   175e0:	add	r1, sp, #136	; 0x88
   175e4:	add	r0, sp, #180	; 0xb4
   175e8:	bl	12a38 <__assert_fail@plt+0x1668>
   175ec:	mov	r7, r0
   175f0:	mov	r0, fp
   175f4:	bl	1b14c <__assert_fail@plt+0x9d7c>
   175f8:	cmp	r7, #0
   175fc:	beq	17010 <__assert_fail@plt+0x5c40>
   17600:	ldr	r3, [sp, #832]	; 0x340
   17604:	cmp	r3, #0
   17608:	beq	17b4c <__assert_fail@plt+0x677c>
   1760c:	ldr	r3, [sp, #828]	; 0x33c
   17610:	cmp	r3, #0
   17614:	bne	17e38 <__assert_fail@plt+0x6a68>
   17618:	add	r3, sp, #680	; 0x2a8
   1761c:	ldrd	sl, [r3]
   17620:	cmp	sl, #1
   17624:	sbcs	r3, fp, #0
   17628:	blt	17644 <__assert_fail@plt+0x6274>
   1762c:	ldr	r0, [sp, #160]	; 0xa0
   17630:	ldr	r1, [sp, #688]	; 0x2b0
   17634:	cmp	r0, r1
   17638:	beq	17644 <__assert_fail@plt+0x6274>
   1763c:	subs	sl, sl, #1
   17640:	sbc	fp, fp, #0
   17644:	cmp	fp, sl, asr #31
   17648:	mov	lr, #0
   1764c:	bne	18414 <__assert_fail@plt+0x7044>
   17650:	mov	r3, #7
   17654:	smull	r2, r3, sl, r3
   17658:	mov	r1, r2
   1765c:	cmp	lr, #0
   17660:	mov	r8, r1
   17664:	mov	r9, r3
   17668:	bne	18104 <__assert_fail@plt+0x6d34>
   1766c:	ldr	r2, [sp, #160]	; 0xa0
   17670:	movw	r1, #9363	; 0x2493
   17674:	movt	r1, #37449	; 0x9249
   17678:	ldr	r3, [sp, #688]	; 0x2b0
   1767c:	sub	r3, r3, r2
   17680:	add	r3, r3, #7
   17684:	asr	r2, r3, #31
   17688:	smull	r0, r1, r1, r3
   1768c:	add	r1, r1, r3
   17690:	rsb	r2, r2, r1, asr #2
   17694:	rsb	r2, r2, r2, lsl #3
   17698:	sub	r3, r3, r2
   1769c:	mov	r2, r3
   176a0:	asr	r3, r3, #31
   176a4:	adds	r0, r2, r8
   176a8:	adcs	r1, r3, r9
   176ac:	bvs	18104 <__assert_fail@plt+0x6d34>
   176b0:	ldr	r2, [sp, #148]	; 0x94
   176b4:	asr	r3, r2, #31
   176b8:	adds	r8, r0, r2
   176bc:	adcs	r9, r1, r3
   176c0:	asr	r3, r8, #31
   176c4:	str	r8, [sp, #148]	; 0x94
   176c8:	movvs	r7, #1
   176cc:	movvc	r7, #0
   176d0:	cmp	r9, r3
   176d4:	cmpeq	r8, r8
   176d8:	movne	r7, #1
   176dc:	cmp	r7, #0
   176e0:	bne	18104 <__assert_fail@plt+0x6d34>
   176e4:	mvn	r3, #0
   176e8:	add	r1, sp, #136	; 0x88
   176ec:	mov	r0, r6
   176f0:	str	r3, [sp, #168]	; 0xa8
   176f4:	bl	1b220 <__assert_fail@plt+0x9e50>
   176f8:	cmn	r0, #1
   176fc:	mov	r8, r0
   17700:	beq	18104 <__assert_fail@plt+0x6d34>
   17704:	ldrb	r3, [sp, #853]	; 0x355
   17708:	cmp	r3, #0
   1770c:	str	r3, [sp, #36]	; 0x24
   17710:	bne	17b04 <__assert_fail@plt+0x6734>
   17714:	add	r1, sp, #776	; 0x308
   17718:	add	r3, sp, #768	; 0x300
   1771c:	ldr	ip, [sp, #784]	; 0x310
   17720:	ldrd	r0, [r1]
   17724:	ldrd	sl, [r3]
   17728:	strd	r0, [sp, #40]	; 0x28
   1772c:	ldr	lr, [sp, #40]	; 0x28
   17730:	mov	r7, fp
   17734:	strd	sl, [sp, #56]	; 0x38
   17738:	ldr	r0, [sp, #44]	; 0x2c
   1773c:	ldr	r1, [sp, #788]	; 0x314
   17740:	orr	lr, lr, sl
   17744:	orr	r2, lr, ip
   17748:	orr	r0, r0, fp
   1774c:	orr	r3, r0, r1
   17750:	orrs	r3, r2, r3
   17754:	beq	180f4 <__assert_fail@plt+0x6d24>
   17758:	ldrd	r8, [sp, #56]	; 0x38
   1775c:	ldr	r2, [sp, #156]	; 0x9c
   17760:	asr	r3, r2, #31
   17764:	adds	r0, r2, r8
   17768:	adcs	r1, r3, r9
   1776c:	asr	r3, r0, #31
   17770:	movvs	ip, #1
   17774:	movvc	ip, #0
   17778:	cmp	r1, r3
   1777c:	cmpeq	r0, r0
   17780:	bne	16bf0 <__assert_fail@plt+0x5820>
   17784:	cmp	ip, #0
   17788:	moveq	r5, r0
   1778c:	bne	16bf0 <__assert_fail@plt+0x5820>
   17790:	ldrd	r0, [sp, #40]	; 0x28
   17794:	ldr	r2, [sp, #152]	; 0x98
   17798:	asr	r3, r2, #31
   1779c:	adds	r8, r2, r0
   177a0:	adcs	r9, r3, r1
   177a4:	asr	r1, r8, #31
   177a8:	movvs	r3, #1
   177ac:	movvc	r3, #0
   177b0:	cmp	r9, r1
   177b4:	strd	r8, [sp, #40]	; 0x28
   177b8:	cmpeq	r8, r8
   177bc:	bne	17e04 <__assert_fail@plt+0x6a34>
   177c0:	cmp	r3, #0
   177c4:	bne	17e04 <__assert_fail@plt+0x6a34>
   177c8:	add	r3, sp, #784	; 0x310
   177cc:	ldr	r0, [sp, #148]	; 0x94
   177d0:	ldrd	r2, [r3]
   177d4:	asr	r1, r0, #31
   177d8:	adds	r8, r0, r2
   177dc:	adcs	r9, r1, r3
   177e0:	asr	r3, r8, #31
   177e4:	mov	r0, r8
   177e8:	mov	r1, r9
   177ec:	movvs	r7, #1
   177f0:	movvc	r7, #0
   177f4:	cmp	r9, r3
   177f8:	cmpeq	r8, r8
   177fc:	strd	r0, [sp, #48]	; 0x30
   17800:	bne	17e04 <__assert_fail@plt+0x6a34>
   17804:	cmp	r7, #0
   17808:	bne	17e04 <__assert_fail@plt+0x6a34>
   1780c:	ldr	r2, [sp, #48]	; 0x30
   17810:	add	r1, sp, #136	; 0x88
   17814:	mov	r0, r6
   17818:	ldr	r3, [sp, #180]	; 0xb4
   1781c:	ldr	ip, [sp, #188]	; 0xbc
   17820:	str	r5, [sp, #156]	; 0x9c
   17824:	str	r2, [sp, #148]	; 0x94
   17828:	ldr	r2, [sp, #40]	; 0x28
   1782c:	str	r3, [sp, #136]	; 0x88
   17830:	ldr	r3, [sp, #212]	; 0xd4
   17834:	str	ip, [sp, #144]	; 0x90
   17838:	str	r2, [sp, #152]	; 0x98
   1783c:	ldr	r2, [sp, #184]	; 0xb8
   17840:	str	r2, [sp, #140]	; 0x8c
   17844:	str	r3, [sp, #168]	; 0xa8
   17848:	bl	1b220 <__assert_fail@plt+0x9e50>
   1784c:	cmn	r0, #1
   17850:	mov	r8, r0
   17854:	ldrb	r3, [sp, #853]	; 0x355
   17858:	beq	184f8 <__assert_fail@plt+0x7128>
   1785c:	cmp	r3, #0
   17860:	str	r3, [sp, #36]	; 0x24
   17864:	bne	17e80 <__assert_fail@plt+0x6ab0>
   17868:	ldr	r3, [sp, #848]	; 0x350
   1786c:	cmp	r3, #0
   17870:	beq	178a4 <__assert_fail@plt+0x64d4>
   17874:	ldr	r2, [sp, #172]	; 0xac
   17878:	ldr	r1, [sp, #696]	; 0x2b8
   1787c:	asr	fp, r2, #31
   17880:	subs	r2, r1, r2
   17884:	rsc	r3, fp, r1, asr #31
   17888:	subs	sl, r0, r2
   1788c:	asr	r1, sl, #31
   17890:	rsc	fp, r3, r0, asr #31
   17894:	cmp	fp, r1
   17898:	cmpeq	sl, sl
   1789c:	bne	16bf0 <__assert_fail@plt+0x5820>
   178a0:	mov	r8, sl
   178a4:	ldr	r7, [sp, #792]	; 0x318
   178a8:	mov	ip, #0
   178ac:	ldr	r5, [sp, #796]	; 0x31c
   178b0:	cmp	r5, r7, asr #31
   178b4:	bne	183d0 <__assert_fail@plt+0x7000>
   178b8:	mov	r2, #3600	; 0xe10
   178bc:	smull	r2, r3, r7, r2
   178c0:	mov	r0, r2
   178c4:	mov	r1, r3
   178c8:	cmp	ip, #0
   178cc:	mov	r2, r0
   178d0:	mov	r3, r1
   178d4:	bne	16bf0 <__assert_fail@plt+0x5820>
   178d8:	asr	r1, r8, #31
   178dc:	adds	r8, r8, r2
   178e0:	adcs	r9, r1, r3
   178e4:	movvs	r3, #1
   178e8:	movvc	r3, #0
   178ec:	str	r3, [sp, #40]	; 0x28
   178f0:	strd	r8, [sp, #48]	; 0x30
   178f4:	bvs	16bf0 <__assert_fail@plt+0x5820>
   178f8:	ldr	r8, [sp, #800]	; 0x320
   178fc:	mov	r2, #0
   17900:	ldr	r9, [sp, #804]	; 0x324
   17904:	cmp	r9, r8, asr #31
   17908:	bne	18390 <__assert_fail@plt+0x6fc0>
   1790c:	mov	r0, #60	; 0x3c
   17910:	smull	r0, r1, r8, r0
   17914:	mov	ip, r0
   17918:	mov	r3, r1
   1791c:	cmp	r2, #0
   17920:	bne	180cc <__assert_fail@plt+0x6cfc>
   17924:	ldrd	sl, [sp, #48]	; 0x30
   17928:	adds	r2, sl, ip
   1792c:	adcs	r3, fp, r3
   17930:	bvs	180cc <__assert_fail@plt+0x6cfc>
   17934:	add	r1, sp, #808	; 0x328
   17938:	ldrd	r0, [r1]
   1793c:	adds	sl, r2, r0
   17940:	strd	r0, [sp, #56]	; 0x38
   17944:	adcs	fp, r3, r1
   17948:	strd	sl, [sp, #64]	; 0x40
   1794c:	bvs	180cc <__assert_fail@plt+0x6cfc>
   17950:	ldr	r1, [sp, #764]	; 0x2fc
   17954:	ldr	r3, [sp, #816]	; 0x330
   17958:	mov	r0, r3
   1795c:	asr	r3, r3, #31
   17960:	mov	sl, r0
   17964:	mov	fp, r3
   17968:	add	r3, pc, #976	; 0x3d0
   1796c:	ldrd	r2, [r3]
   17970:	strd	sl, [sp, #48]	; 0x30
   17974:	adds	sl, r0, r1
   17978:	adc	fp, fp, r1, asr #31
   1797c:	str	r0, [sp, #72]	; 0x48
   17980:	mov	r0, sl
   17984:	mov	r1, fp
   17988:	bl	1e270 <__assert_fail@plt+0xcea0>
   1798c:	mov	r1, #51712	; 0xca00
   17990:	movt	r1, #15258	; 0x3b9a
   17994:	adds	r0, r2, r1
   17998:	mov	r2, r1
   1799c:	adc	r1, r3, #0
   179a0:	mov	r3, #0
   179a4:	bl	1e270 <__assert_fail@plt+0xcea0>
   179a8:	mov	r0, r2
   179ac:	mov	r1, r3
   179b0:	mov	r2, #51712	; 0xca00
   179b4:	movt	r2, #15258	; 0x3b9a
   179b8:	str	r0, [sp, #84]	; 0x54
   179bc:	subs	r0, sl, r0
   179c0:	mov	r3, #0
   179c4:	sbc	r1, fp, r1
   179c8:	bl	1e270 <__assert_fail@plt+0xcea0>
   179cc:	ldrd	sl, [sp, #64]	; 0x40
   179d0:	asr	r1, r0, #31
   179d4:	adds	r2, sl, r0
   179d8:	adcs	r3, fp, r1
   179dc:	mov	sl, r2
   179e0:	mov	r1, r3
   179e4:	mov	fp, r3
   179e8:	asr	r3, r2, #31
   179ec:	movvs	ip, #1
   179f0:	movvc	ip, #0
   179f4:	cmp	r1, r3
   179f8:	mov	lr, ip
   179fc:	cmpeq	r2, r2
   17a00:	bne	180cc <__assert_fail@plt+0x6cfc>
   17a04:	cmp	ip, #0
   17a08:	bne	180cc <__assert_fail@plt+0x6cfc>
   17a0c:	ldr	r3, [sp, #40]	; 0x28
   17a10:	cmp	r3, #0
   17a14:	ldr	r3, [sp, #80]	; 0x50
   17a18:	str	r2, [r3]
   17a1c:	ldr	r2, [sp, #84]	; 0x54
   17a20:	str	r2, [r3, #4]
   17a24:	beq	17a54 <__assert_fail@plt+0x6684>
   17a28:	orr	r2, r5, r9
   17a2c:	ldrd	r4, [sp, #56]	; 0x38
   17a30:	orr	r3, r7, r8
   17a34:	ldr	ip, [sp, #72]	; 0x48
   17a38:	orr	r3, r3, r4
   17a3c:	orr	r2, r2, r5
   17a40:	orr	r0, r3, ip
   17a44:	ldr	r3, [sp, #52]	; 0x34
   17a48:	orr	r1, r2, r3
   17a4c:	orrs	r3, r0, r1
   17a50:	bne	18540 <__assert_fail@plt+0x7170>
   17a54:	ldr	r7, [sp, #36]	; 0x24
   17a58:	b	16acc <__assert_fail@plt+0x56fc>
   17a5c:	ldr	r1, [sp, #700]	; 0x2bc
   17a60:	add	r3, sp, #744	; 0x2e8
   17a64:	ldrd	r2, [r3]
   17a68:	cmp	r1, #0
   17a6c:	beq	17dc0 <__assert_fail@plt+0x69f0>
   17a70:	cmp	r1, #1
   17a74:	beq	17d48 <__assert_fail@plt+0x6978>
   17a78:	cmp	r3, #0
   17a7c:	cmpeq	r2, #23
   17a80:	bhi	1821c <__assert_fail@plt+0x6e4c>
   17a84:	str	r2, [sp, #144]	; 0x90
   17a88:	ldr	r2, [sp, #752]	; 0x2f0
   17a8c:	cmp	ip, #0
   17a90:	ldr	r3, [sp, #760]	; 0x2f8
   17a94:	str	r3, [sp, #136]	; 0x88
   17a98:	str	r2, [sp, #140]	; 0x8c
   17a9c:	bne	17ce0 <__assert_fail@plt+0x6910>
   17aa0:	ldr	ip, [sp, #144]	; 0x90
   17aa4:	ldr	r1, [sp, #828]	; 0x33c
   17aa8:	ldr	r7, [sp, #832]	; 0x340
   17aac:	orr	r1, r1, r7
   17ab0:	orrs	r1, r1, r0
   17ab4:	beq	16fa4 <__assert_fail@plt+0x5bd4>
   17ab8:	b	16f9c <__assert_fail@plt+0x5bcc>
   17abc:	movw	r1, #65080	; 0xfe38
   17ac0:	movt	r1, #1
   17ac4:	mov	r0, r7
   17ac8:	b	16e38 <__assert_fail@plt+0x5a68>
   17acc:	movw	r1, #65108	; 0xfe54
   17ad0:	movt	r1, #1
   17ad4:	ldr	r0, [sp, #948]	; 0x3b4
   17ad8:	mov	r2, #5
   17adc:	b	17310 <__assert_fail@plt+0x5f40>
   17ae0:	mov	r2, #5
   17ae4:	movw	r1, #65376	; 0xff60
   17ae8:	movt	r1, #1
   17aec:	mov	r0, #0
   17af0:	bl	11130 <dcgettext@plt>
   17af4:	mov	r2, r8
   17af8:	mov	r3, r9
   17afc:	bl	12c70 <__assert_fail@plt+0x18a0>
   17b00:	b	174d0 <__assert_fail@plt+0x6100>
   17b04:	mov	r2, #5
   17b08:	mov	r0, r7
   17b0c:	movw	r1, #576	; 0x240
   17b10:	movt	r1, #2
   17b14:	bl	11130 <dcgettext@plt>
   17b18:	mov	r7, r0
   17b1c:	add	r1, sp, #572	; 0x23c
   17b20:	add	r0, sp, #672	; 0x2a0
   17b24:	bl	1306c <__assert_fail@plt+0x1c9c>
   17b28:	mov	r9, r0
   17b2c:	add	r2, sp, #372	; 0x174
   17b30:	add	r1, sp, #672	; 0x2a0
   17b34:	add	r0, sp, #136	; 0x88
   17b38:	bl	12fb4 <__assert_fail@plt+0x1be4>
   17b3c:	mov	r2, r0
   17b40:	mov	r1, r9
   17b44:	mov	r0, r7
   17b48:	bl	12c70 <__assert_fail@plt+0x18a0>
   17b4c:	ldrb	r3, [sp, #853]	; 0x355
   17b50:	cmp	r3, #0
   17b54:	str	r3, [sp, #36]	; 0x24
   17b58:	beq	17714 <__assert_fail@plt+0x6344>
   17b5c:	ldr	r3, [sp, #828]	; 0x33c
   17b60:	ldr	r0, [sp, #832]	; 0x340
   17b64:	cmp	r3, #0
   17b68:	bne	1818c <__assert_fail@plt+0x6dbc>
   17b6c:	cmp	r0, #0
   17b70:	beq	18198 <__assert_fail@plt+0x6dc8>
   17b74:	add	r7, sp, #372	; 0x174
   17b78:	mov	r2, #5
   17b7c:	movw	r1, #736	; 0x2e0
   17b80:	movt	r1, #2
   17b84:	mov	r0, #0
   17b88:	bl	11130 <dcgettext@plt>
   17b8c:	mov	r5, r0
   17b90:	mov	r2, r7
   17b94:	add	r1, sp, #672	; 0x2a0
   17b98:	add	r0, sp, #136	; 0x88
   17b9c:	bl	12fb4 <__assert_fail@plt+0x1be4>
   17ba0:	mov	r1, r0
   17ba4:	mov	r0, r5
   17ba8:	bl	12c70 <__assert_fail@plt+0x18a0>
   17bac:	add	r3, sp, #768	; 0x300
   17bb0:	ldrb	r5, [sp, #853]	; 0x355
   17bb4:	ldrd	sl, [r3]
   17bb8:	add	r3, sp, #776	; 0x308
   17bbc:	ldrd	r2, [r3]
   17bc0:	str	r5, [sp, #36]	; 0x24
   17bc4:	strd	r2, [sp, #40]	; 0x28
   17bc8:	add	r3, sp, #784	; 0x310
   17bcc:	ldr	lr, [sp, #40]	; 0x28
   17bd0:	strd	sl, [sp, #56]	; 0x38
   17bd4:	ldrd	r2, [r3]
   17bd8:	orr	r0, sl, lr
   17bdc:	ldr	lr, [sp, #44]	; 0x2c
   17be0:	orr	ip, r0, r2
   17be4:	str	ip, [sp, #48]	; 0x30
   17be8:	orr	r1, fp, lr
   17bec:	orr	ip, r1, r3
   17bf0:	str	ip, [sp, #52]	; 0x34
   17bf4:	ldrd	sl, [sp, #48]	; 0x30
   17bf8:	orrs	ip, sl, fp
   17bfc:	mov	ip, r5
   17c00:	beq	17ff8 <__assert_fail@plt+0x6c28>
   17c04:	cmp	r5, #0
   17c08:	beq	17758 <__assert_fail@plt+0x6388>
   17c0c:	orrs	r1, r0, r1
   17c10:	beq	18230 <__assert_fail@plt+0x6e60>
   17c14:	ldr	r1, [sp, #148]	; 0x94
   17c18:	cmp	r1, #15
   17c1c:	beq	17c40 <__assert_fail@plt+0x6870>
   17c20:	mov	r2, #5
   17c24:	movw	r1, #764	; 0x2fc
   17c28:	movt	r1, #2
   17c2c:	mov	r0, #0
   17c30:	bl	11130 <dcgettext@plt>
   17c34:	bl	12c70 <__assert_fail@plt+0x18a0>
   17c38:	add	r3, sp, #784	; 0x310
   17c3c:	ldrd	r2, [r3]
   17c40:	orrs	r3, r2, r3
   17c44:	bne	18230 <__assert_fail@plt+0x6e60>
   17c48:	add	r3, sp, #768	; 0x300
   17c4c:	ldr	r0, [sp, #156]	; 0x9c
   17c50:	ldrd	r8, [r3]
   17c54:	asr	r1, r0, #31
   17c58:	adds	r2, r0, r8
   17c5c:	adcs	r3, r1, r9
   17c60:	asr	r1, r2, #31
   17c64:	movvs	ip, #1
   17c68:	movvc	ip, #0
   17c6c:	cmp	r3, r1
   17c70:	cmpeq	r2, r2
   17c74:	bne	17e04 <__assert_fail@plt+0x6a34>
   17c78:	cmp	ip, #0
   17c7c:	bne	17e04 <__assert_fail@plt+0x6a34>
   17c80:	add	r1, sp, #776	; 0x308
   17c84:	mov	r5, r2
   17c88:	ldrd	r0, [r1]
   17c8c:	strd	r0, [sp, #40]	; 0x28
   17c90:	b	17790 <__assert_fail@plt+0x63c0>
   17c94:	mov	r3, #0
   17c98:	cmp	ip, r3
   17c9c:	moveq	r2, ip
   17ca0:	str	r3, [sp, #136]	; 0x88
   17ca4:	str	r3, [sp, #140]	; 0x8c
   17ca8:	str	r3, [sp, #144]	; 0x90
   17cac:	str	r3, [sp, #764]	; 0x2fc
   17cb0:	moveq	r3, ip
   17cb4:	beq	17aa4 <__assert_fail@plt+0x66d4>
   17cb8:	movw	r0, #48	; 0x30
   17cbc:	movt	r0, #2
   17cc0:	bl	12c70 <__assert_fail@plt+0x18a0>
   17cc4:	ldr	r3, [sp, #136]	; 0x88
   17cc8:	ldr	r2, [sp, #140]	; 0x8c
   17ccc:	ldr	ip, [sp, #144]	; 0x90
   17cd0:	ldr	fp, [sp, #148]	; 0x94
   17cd4:	ldr	lr, [sp, #152]	; 0x98
   17cd8:	ldr	r0, [sp, #844]	; 0x34c
   17cdc:	b	17aa4 <__assert_fail@plt+0x66d4>
   17ce0:	cmp	r0, #0
   17ce4:	beq	18174 <__assert_fail@plt+0x6da4>
   17ce8:	movw	r1, #65476	; 0xffc4
   17cec:	movt	r1, #1
   17cf0:	mov	r2, #5
   17cf4:	mov	r0, #0
   17cf8:	bl	11130 <dcgettext@plt>
   17cfc:	mov	r8, r0
   17d00:	ldr	lr, [sp, #136]	; 0x88
   17d04:	movw	r2, #32
   17d08:	movt	r2, #2
   17d0c:	add	r7, sp, #372	; 0x174
   17d10:	mov	r3, #100	; 0x64
   17d14:	ldr	ip, [sp, #140]	; 0x8c
   17d18:	mov	r1, r3
   17d1c:	mov	r0, r7
   17d20:	ldr	r9, [sp, #144]	; 0x90
   17d24:	stm	sp, {r2, r9, ip, lr}
   17d28:	mov	r2, #1
   17d2c:	bl	113c4 <__snprintf_chk@plt>
   17d30:	mov	r1, r7
   17d34:	mov	r0, r8
   17d38:	bl	12c70 <__assert_fail@plt+0x18a0>
   17d3c:	b	17cc4 <__assert_fail@plt+0x68f4>
   17d40:	blcc	fe6ca548 <optarg@@GLIBC_2.4+0xfe6993a0>
   17d44:	andeq	r0, r0, r0
   17d48:	subs	r1, r2, #1
   17d4c:	str	r1, [sp, #72]	; 0x48
   17d50:	sbc	r1, r3, #0
   17d54:	str	r1, [sp, #76]	; 0x4c
   17d58:	ldrd	r8, [sp, #72]	; 0x48
   17d5c:	cmp	r9, #0
   17d60:	cmpeq	r8, #10
   17d64:	addls	r2, r2, #12
   17d68:	bls	17a84 <__assert_fail@plt+0x66b4>
   17d6c:	cmp	r3, #0
   17d70:	cmpeq	r2, #12
   17d74:	moveq	r3, #12
   17d78:	streq	r3, [sp, #144]	; 0x90
   17d7c:	beq	17a88 <__assert_fail@plt+0x66b8>
   17d80:	mvn	r3, #0
   17d84:	movw	r5, #64508	; 0xfbfc
   17d88:	movt	r5, #1
   17d8c:	str	r3, [sp, #144]	; 0x90
   17d90:	cmp	ip, #0
   17d94:	beq	16bf0 <__assert_fail@plt+0x5820>
   17d98:	mov	r2, #5
   17d9c:	movw	r1, #65448	; 0xffa8
   17da0:	movt	r1, #1
   17da4:	mov	r0, #0
   17da8:	bl	11130 <dcgettext@plt>
   17dac:	add	r3, sp, #744	; 0x2e8
   17db0:	str	r5, [sp]
   17db4:	ldrd	r2, [r3]
   17db8:	bl	12c70 <__assert_fail@plt+0x18a0>
   17dbc:	b	16bf0 <__assert_fail@plt+0x5820>
   17dc0:	subs	r7, r2, #1
   17dc4:	str	r7, [sp, #64]	; 0x40
   17dc8:	sbc	r7, r3, #0
   17dcc:	str	r7, [sp, #68]	; 0x44
   17dd0:	ldrd	r8, [sp, #64]	; 0x40
   17dd4:	cmp	r9, #0
   17dd8:	cmpeq	r8, #10
   17ddc:	bls	17a84 <__assert_fail@plt+0x66b4>
   17de0:	cmp	r3, #0
   17de4:	cmpeq	r2, #12
   17de8:	streq	r1, [sp, #144]	; 0x90
   17dec:	beq	17a88 <__assert_fail@plt+0x66b8>
   17df0:	mvn	r3, #0
   17df4:	movw	r5, #64852	; 0xfd54
   17df8:	movt	r5, #1
   17dfc:	str	r3, [sp, #144]	; 0x90
   17e00:	b	17d90 <__assert_fail@plt+0x69c0>
   17e04:	ldrb	r3, [sp, #853]	; 0x355
   17e08:	cmp	r3, #0
   17e0c:	beq	16bf0 <__assert_fail@plt+0x5820>
   17e10:	mov	r2, #5
   17e14:	movw	r1, #936	; 0x3a8
   17e18:	movt	r1, #2
   17e1c:	mov	r0, #0
   17e20:	bl	11130 <dcgettext@plt>
   17e24:	movw	r1, #952	; 0x3b8
   17e28:	movt	r1, #2
   17e2c:	movw	r2, #2149	; 0x865
   17e30:	bl	12c70 <__assert_fail@plt+0x18a0>
   17e34:	b	16bf0 <__assert_fail@plt+0x5820>
   17e38:	ldrb	r3, [sp, #853]	; 0x355
   17e3c:	cmp	r3, #0
   17e40:	str	r3, [sp, #36]	; 0x24
   17e44:	beq	17714 <__assert_fail@plt+0x6344>
   17e48:	add	r7, sp, #372	; 0x174
   17e4c:	mov	r2, #5
   17e50:	movw	r1, #676	; 0x2a4
   17e54:	movt	r1, #2
   17e58:	mov	r0, #0
   17e5c:	bl	11130 <dcgettext@plt>
   17e60:	mov	r5, r0
   17e64:	add	r1, sp, #572	; 0x23c
   17e68:	add	r0, sp, #672	; 0x2a0
   17e6c:	bl	1306c <__assert_fail@plt+0x1c9c>
   17e70:	mov	r1, r0
   17e74:	mov	r0, r5
   17e78:	bl	12c70 <__assert_fail@plt+0x18a0>
   17e7c:	b	17b78 <__assert_fail@plt+0x67a8>
   17e80:	mov	r2, #5
   17e84:	movw	r1, #1036	; 0x40c
   17e88:	movt	r1, #2
   17e8c:	mov	r0, r7
   17e90:	bl	11130 <dcgettext@plt>
   17e94:	add	r3, sp, #776	; 0x308
   17e98:	add	r1, sp, #784	; 0x310
   17e9c:	ldrd	r2, [r3]
   17ea0:	strd	r2, [sp]
   17ea4:	add	r3, sp, #768	; 0x300
   17ea8:	ldrd	sl, [r1]
   17eac:	ldrd	r2, [r3]
   17eb0:	strd	sl, [sp, #8]
   17eb4:	bl	12c70 <__assert_fail@plt+0x18a0>
   17eb8:	mov	r2, #5
   17ebc:	movw	r1, #1100	; 0x44c
   17ec0:	movt	r1, #2
   17ec4:	mov	r0, r7
   17ec8:	bl	11130 <dcgettext@plt>
   17ecc:	mov	r9, r0
   17ed0:	add	r2, sp, #372	; 0x174
   17ed4:	add	r1, sp, #672	; 0x2a0
   17ed8:	add	r0, sp, #136	; 0x88
   17edc:	bl	12fb4 <__assert_fail@plt+0x1be4>
   17ee0:	mov	r1, r0
   17ee4:	mov	r0, r9
   17ee8:	bl	12c70 <__assert_fail@plt+0x18a0>
   17eec:	ldr	r3, [sp, #212]	; 0xd4
   17ef0:	cmn	r3, #1
   17ef4:	beq	17f1c <__assert_fail@plt+0x6b4c>
   17ef8:	ldr	r2, [sp, #168]	; 0xa8
   17efc:	cmp	r3, r2
   17f00:	beq	17f1c <__assert_fail@plt+0x6b4c>
   17f04:	movw	r1, #1128	; 0x468
   17f08:	movt	r1, #2
   17f0c:	mov	r2, #5
   17f10:	mov	r0, r7
   17f14:	bl	11130 <dcgettext@plt>
   17f18:	bl	12c70 <__assert_fail@plt+0x18a0>
   17f1c:	add	r3, sp, #784	; 0x310
   17f20:	ldrd	r2, [r3]
   17f24:	orrs	r3, r2, r3
   17f28:	bne	17fec <__assert_fail@plt+0x6c1c>
   17f2c:	ldr	r2, [sp, #48]	; 0x30
   17f30:	ldr	r3, [sp, #148]	; 0x94
   17f34:	cmp	r2, r3
   17f38:	bne	17f5c <__assert_fail@plt+0x6b8c>
   17f3c:	add	r3, sp, #776	; 0x308
   17f40:	ldrd	r2, [r3]
   17f44:	orrs	r3, r2, r3
   17f48:	bne	17fec <__assert_fail@plt+0x6c1c>
   17f4c:	ldr	r2, [sp, #40]	; 0x28
   17f50:	ldr	r3, [sp, #152]	; 0x98
   17f54:	cmp	r2, r3
   17f58:	beq	17fec <__assert_fail@plt+0x6c1c>
   17f5c:	mov	r2, #5
   17f60:	movw	r1, #1192	; 0x4a8
   17f64:	movt	r1, #2
   17f68:	mov	r0, #0
   17f6c:	bl	11130 <dcgettext@plt>
   17f70:	bl	12c70 <__assert_fail@plt+0x18a0>
   17f74:	mov	r2, #5
   17f78:	movw	r1, #1252	; 0x4e4
   17f7c:	movt	r1, #2
   17f80:	mov	r0, #0
   17f84:	bl	11130 <dcgettext@plt>
   17f88:	mov	r7, r0
   17f8c:	add	r1, sp, #268	; 0x10c
   17f90:	mov	r0, r5
   17f94:	bl	12bec <__assert_fail@plt+0x181c>
   17f98:	ldr	r2, [sp, #40]	; 0x28
   17f9c:	mov	r1, r0
   17fa0:	mov	r0, r7
   17fa4:	ldr	r3, [sp, #48]	; 0x30
   17fa8:	add	r2, r2, #1
   17fac:	bl	12c70 <__assert_fail@plt+0x18a0>
   17fb0:	mov	r2, #5
   17fb4:	movw	r1, #1288	; 0x508
   17fb8:	movt	r1, #2
   17fbc:	mov	r0, #0
   17fc0:	bl	11130 <dcgettext@plt>
   17fc4:	mov	r5, r0
   17fc8:	add	r1, sp, #268	; 0x10c
   17fcc:	ldr	r0, [sp, #156]	; 0x9c
   17fd0:	bl	12bec <__assert_fail@plt+0x181c>
   17fd4:	mov	r1, r0
   17fd8:	mov	r0, r5
   17fdc:	ldr	r3, [sp, #148]	; 0x94
   17fe0:	ldr	r2, [sp, #152]	; 0x98
   17fe4:	add	r2, r2, #1
   17fe8:	bl	12c70 <__assert_fail@plt+0x18a0>
   17fec:	ldrb	r3, [sp, #853]	; 0x355
   17ff0:	mov	r5, r3
   17ff4:	str	r3, [sp, #36]	; 0x24
   17ff8:	ldr	r3, [sp, #848]	; 0x350
   17ffc:	cmp	r3, #0
   18000:	beq	18034 <__assert_fail@plt+0x6c64>
   18004:	ldr	r2, [sp, #172]	; 0xac
   18008:	ldr	r1, [sp, #696]	; 0x2b8
   1800c:	asr	fp, r2, #31
   18010:	subs	r2, r1, r2
   18014:	rsc	r3, fp, r1, asr #31
   18018:	subs	sl, r8, r2
   1801c:	asr	r1, sl, #31
   18020:	rsc	fp, r3, r8, asr #31
   18024:	cmp	fp, r1
   18028:	cmpeq	sl, sl
   1802c:	bne	18628 <__assert_fail@plt+0x7258>
   18030:	mov	r8, sl
   18034:	cmp	r5, #0
   18038:	beq	178a4 <__assert_fail@plt+0x64d4>
   1803c:	mov	r2, #5
   18040:	movw	r1, #1368	; 0x558
   18044:	movt	r1, #2
   18048:	mov	r0, #0
   1804c:	bl	11130 <dcgettext@plt>
   18050:	mov	r5, r0
   18054:	add	r1, sp, #672	; 0x2a0
   18058:	add	r2, sp, #372	; 0x174
   1805c:	add	r0, sp, #136	; 0x88
   18060:	bl	12fb4 <__assert_fail@plt+0x1be4>
   18064:	asr	r3, r8, #31
   18068:	mov	r2, r8
   1806c:	mov	r1, r0
   18070:	mov	r0, r5
   18074:	mov	sl, r8
   18078:	mov	fp, r3
   1807c:	bl	12c70 <__assert_fail@plt+0x18a0>
   18080:	ldr	r7, [sp, #792]	; 0x318
   18084:	mov	r2, #0
   18088:	ldr	r5, [sp, #796]	; 0x31c
   1808c:	ldrb	r3, [sp, #853]	; 0x355
   18090:	cmp	r5, r7, asr #31
   18094:	str	r3, [sp, #36]	; 0x24
   18098:	str	r3, [sp, #40]	; 0x28
   1809c:	bne	18450 <__assert_fail@plt+0x7080>
   180a0:	mov	r0, #3600	; 0xe10
   180a4:	smull	r0, r1, r7, r0
   180a8:	mov	r8, r0
   180ac:	mov	r3, r1
   180b0:	cmp	r2, #0
   180b4:	mov	r1, r3
   180b8:	bne	180cc <__assert_fail@plt+0x6cfc>
   180bc:	adds	r8, sl, r8
   180c0:	adcs	r9, fp, r1
   180c4:	strd	r8, [sp, #48]	; 0x30
   180c8:	bvc	178f8 <__assert_fail@plt+0x6528>
   180cc:	ldr	r3, [sp, #40]	; 0x28
   180d0:	cmp	r3, #0
   180d4:	beq	16bf0 <__assert_fail@plt+0x5820>
   180d8:	mov	r2, #5
   180dc:	movw	r1, #1396	; 0x574
   180e0:	movt	r1, #2
   180e4:	mov	r0, #0
   180e8:	bl	11130 <dcgettext@plt>
   180ec:	bl	12c70 <__assert_fail@plt+0x18a0>
   180f0:	b	16bf0 <__assert_fail@plt+0x5820>
   180f4:	ldr	r3, [sp, #848]	; 0x350
   180f8:	cmp	r3, #0
   180fc:	bne	18004 <__assert_fail@plt+0x6c34>
   18100:	b	178a4 <__assert_fail@plt+0x64d4>
   18104:	ldrb	r3, [sp, #853]	; 0x355
   18108:	cmp	r3, #0
   1810c:	beq	16bf0 <__assert_fail@plt+0x5820>
   18110:	mov	r2, #5
   18114:	movw	r1, #496	; 0x1f0
   18118:	movt	r1, #2
   1811c:	mov	r0, #0
   18120:	bl	11130 <dcgettext@plt>
   18124:	mov	r7, r0
   18128:	add	r1, sp, #572	; 0x23c
   1812c:	add	r0, sp, #672	; 0x2a0
   18130:	bl	1306c <__assert_fail@plt+0x1c9c>
   18134:	add	r3, sp, #680	; 0x2a8
   18138:	ldr	r5, [sp, #688]	; 0x2b0
   1813c:	mov	sl, r0
   18140:	add	r1, sp, #672	; 0x2a0
   18144:	add	r2, sp, #372	; 0x174
   18148:	ldrd	r8, [r3]
   1814c:	add	r0, sp, #136	; 0x88
   18150:	bl	12fb4 <__assert_fail@plt+0x1be4>
   18154:	mov	r1, sl
   18158:	str	r5, [sp]
   1815c:	str	r0, [sp, #4]
   18160:	mov	r0, r7
   18164:	mov	r2, r8
   18168:	mov	r3, r9
   1816c:	bl	12c70 <__assert_fail@plt+0x18a0>
   18170:	b	16bf0 <__assert_fail@plt+0x5820>
   18174:	movw	r1, #65524	; 0xfff4
   18178:	movt	r1, #1
   1817c:	mov	r2, #5
   18180:	bl	11130 <dcgettext@plt>
   18184:	mov	r8, r0
   18188:	b	17d00 <__assert_fail@plt+0x6930>
   1818c:	cmp	r0, #0
   18190:	beq	17b74 <__assert_fail@plt+0x67a4>
   18194:	b	17e48 <__assert_fail@plt+0x6a78>
   18198:	mov	r2, #5
   1819c:	movw	r1, #608	; 0x260
   181a0:	movt	r1, #2
   181a4:	add	r7, sp, #372	; 0x174
   181a8:	bl	11130 <dcgettext@plt>
   181ac:	mov	r5, r0
   181b0:	add	r1, sp, #268	; 0x10c
   181b4:	ldr	r0, [sp, #156]	; 0x9c
   181b8:	bl	12bec <__assert_fail@plt+0x181c>
   181bc:	movw	r2, #652	; 0x28c
   181c0:	movt	r2, #2
   181c4:	ldr	lr, [sp, #148]	; 0x94
   181c8:	mov	r3, #100	; 0x64
   181cc:	ldr	ip, [sp, #152]	; 0x98
   181d0:	mov	r1, r3
   181d4:	str	r2, [sp]
   181d8:	mov	r2, #1
   181dc:	str	r0, [sp, #4]
   181e0:	mov	r0, r7
   181e4:	str	lr, [sp, #12]
   181e8:	add	ip, ip, r2
   181ec:	str	ip, [sp, #8]
   181f0:	bl	113c4 <__snprintf_chk@plt>
   181f4:	mov	r1, r7
   181f8:	mov	r0, r5
   181fc:	bl	12c70 <__assert_fail@plt+0x18a0>
   18200:	ldr	r3, [sp, #832]	; 0x340
   18204:	cmp	r3, #0
   18208:	beq	17b78 <__assert_fail@plt+0x67a8>
   1820c:	ldr	r3, [sp, #828]	; 0x33c
   18210:	cmp	r3, #0
   18214:	bne	17e4c <__assert_fail@plt+0x6a7c>
   18218:	b	17b78 <__assert_fail@plt+0x67a8>
   1821c:	mvn	r3, #0
   18220:	movw	r5, #1768	; 0x6e8
   18224:	movt	r5, #2
   18228:	str	r3, [sp, #144]	; 0x90
   1822c:	b	17d90 <__assert_fail@plt+0x69c0>
   18230:	ldr	r3, [sp, #144]	; 0x90
   18234:	cmp	r3, #12
   18238:	beq	17c48 <__assert_fail@plt+0x6878>
   1823c:	mov	r2, #5
   18240:	movw	r1, #864	; 0x360
   18244:	movt	r1, #2
   18248:	mov	r0, #0
   1824c:	bl	11130 <dcgettext@plt>
   18250:	bl	12c70 <__assert_fail@plt+0x18a0>
   18254:	b	17c48 <__assert_fail@plt+0x6878>
   18258:	cmp	r3, #0
   1825c:	beq	16bf0 <__assert_fail@plt+0x5820>
   18260:	mov	r2, #5
   18264:	movw	r1, #132	; 0x84
   18268:	movt	r1, #2
   1826c:	mov	r0, #0
   18270:	bl	11130 <dcgettext@plt>
   18274:	bl	12c70 <__assert_fail@plt+0x18a0>
   18278:	mov	r2, #5
   1827c:	movw	r1, #168	; 0xa8
   18280:	movt	r1, #2
   18284:	mov	r0, #0
   18288:	bl	11130 <dcgettext@plt>
   1828c:	mov	r3, r0
   18290:	add	r5, sp, #572	; 0x23c
   18294:	mov	r2, r5
   18298:	add	r1, sp, #672	; 0x2a0
   1829c:	add	r0, sp, #180	; 0xb4
   182a0:	str	r3, [sp, #92]	; 0x5c
   182a4:	bl	12fb4 <__assert_fail@plt+0x1be4>
   182a8:	ldr	r3, [sp, #92]	; 0x5c
   182ac:	mov	r1, r0
   182b0:	mov	r0, r3
   182b4:	bl	12c70 <__assert_fail@plt+0x18a0>
   182b8:	mov	r2, #5
   182bc:	movw	r1, #200	; 0xc8
   182c0:	movt	r1, #2
   182c4:	mov	r0, #0
   182c8:	bl	11130 <dcgettext@plt>
   182cc:	mov	r3, r0
   182d0:	mov	r2, r5
   182d4:	add	r1, sp, #672	; 0x2a0
   182d8:	add	r0, sp, #136	; 0x88
   182dc:	str	r3, [sp, #92]	; 0x5c
   182e0:	bl	12fb4 <__assert_fail@plt+0x1be4>
   182e4:	ldr	r3, [sp, #92]	; 0x5c
   182e8:	mov	r1, r0
   182ec:	mov	r0, r3
   182f0:	bl	12c70 <__assert_fail@plt+0x18a0>
   182f4:	ldr	r2, [sp, #48]	; 0x30
   182f8:	movw	r3, #1768	; 0x6e8
   182fc:	movt	r3, #2
   18300:	movw	r0, #64856	; 0xfd58
   18304:	movt	r0, #1
   18308:	ldr	ip, [sp, #56]	; 0x38
   1830c:	movw	r1, #64864	; 0xfd60
   18310:	movt	r1, #1
   18314:	cmp	r2, ip
   18318:	ldr	ip, [sp, #40]	; 0x28
   1831c:	mov	r2, fp
   18320:	moveq	r0, r3
   18324:	ldr	fp, [sp, #80]	; 0x50
   18328:	cmp	r2, ip
   1832c:	ldr	ip, [sp, #36]	; 0x24
   18330:	moveq	r2, r3
   18334:	movne	r2, r1
   18338:	cmp	r8, r7
   1833c:	moveq	lr, r3
   18340:	movne	lr, r1
   18344:	cmp	ip, fp
   18348:	movne	r3, r1
   1834c:	b	1716c <__assert_fail@plt+0x5d9c>
   18350:	ldrb	r3, [sp, #853]	; 0x355
   18354:	cmp	r3, #0
   18358:	beq	16bf0 <__assert_fail@plt+0x5820>
   1835c:	mov	r2, #5
   18360:	movw	r1, #100	; 0x64
   18364:	movt	r1, #2
   18368:	bl	11130 <dcgettext@plt>
   1836c:	add	r1, sp, #572	; 0x23c
   18370:	bl	12c70 <__assert_fail@plt+0x18a0>
   18374:	b	16bf0 <__assert_fail@plt+0x5820>
   18378:	mov	r0, r9
   1837c:	movw	r1, #464	; 0x1d0
   18380:	movt	r1, #2
   18384:	mov	r2, #5
   18388:	bl	11130 <dcgettext@plt>
   1838c:	b	17290 <__assert_fail@plt+0x5ec0>
   18390:	mov	r3, #60	; 0x3c
   18394:	cmp	r9, #0
   18398:	umull	r0, r1, r8, r3
   1839c:	mov	sl, r0
   183a0:	mov	fp, r1
   183a4:	umull	r0, r1, r3, r9
   183a8:	bge	183b4 <__assert_fail@plt+0x6fe4>
   183ac:	subs	r0, r0, r2
   183b0:	sbc	r1, r1, r3
   183b4:	adds	r3, r0, fp
   183b8:	mov	ip, #0
   183bc:	adc	ip, r1, ip
   183c0:	cmp	ip, r3, asr #31
   183c4:	bne	185fc <__assert_fail@plt+0x722c>
   183c8:	mov	ip, sl
   183cc:	b	1791c <__assert_fail@plt+0x654c>
   183d0:	mov	r3, #3600	; 0xe10
   183d4:	cmp	r5, #0
   183d8:	umull	r0, r1, r7, r3
   183dc:	mov	sl, r0
   183e0:	mov	fp, r1
   183e4:	umull	r0, r1, r3, r5
   183e8:	bge	183f4 <__assert_fail@plt+0x7024>
   183ec:	subs	r0, r0, ip
   183f0:	sbc	r1, r1, r3
   183f4:	adds	r3, r0, fp
   183f8:	mov	r2, #0
   183fc:	adc	r2, r1, r2
   18400:	cmp	r2, r3, asr #31
   18404:	bne	18650 <__assert_fail@plt+0x7280>
   18408:	mov	r0, sl
   1840c:	mov	r1, r3
   18410:	b	178c8 <__assert_fail@plt+0x64f8>
   18414:	mov	ip, #7
   18418:	cmp	fp, #0
   1841c:	umull	r8, r9, sl, ip
   18420:	umull	r0, r1, ip, fp
   18424:	bge	18430 <__assert_fail@plt+0x7060>
   18428:	subs	r0, r0, lr
   1842c:	sbc	r1, r1, ip
   18430:	adds	ip, r0, r9
   18434:	mov	r7, #0
   18438:	adc	r7, r1, r7
   1843c:	cmp	r7, ip, asr #31
   18440:	bne	1868c <__assert_fail@plt+0x72bc>
   18444:	mov	r1, r8
   18448:	mov	r3, ip
   1844c:	b	1765c <__assert_fail@plt+0x628c>
   18450:	mov	r3, #3600	; 0xe10
   18454:	cmp	r5, #0
   18458:	umull	r8, r9, r7, r3
   1845c:	umull	r0, r1, r3, r5
   18460:	bge	1846c <__assert_fail@plt+0x709c>
   18464:	subs	r0, r0, r2
   18468:	sbc	r1, r1, r3
   1846c:	adds	r3, r0, r9
   18470:	mov	ip, #0
   18474:	adc	ip, r1, ip
   18478:	cmp	ip, r3, asr #31
   1847c:	beq	180b0 <__assert_fail@plt+0x6ce0>
   18480:	lsl	r3, r5, #3
   18484:	mov	r2, #1
   18488:	lsl	r1, r7, #3
   1848c:	orr	r3, r3, r7, lsr #29
   18490:	subs	r1, r1, r7
   18494:	sbc	r3, r3, r5
   18498:	lsl	r0, r1, #5
   1849c:	lsl	r3, r3, #5
   184a0:	adds	r8, r0, r7
   184a4:	orr	r3, r3, r1, lsr #27
   184a8:	lsl	r1, r8, #4
   184ac:	adc	r3, r3, r5
   184b0:	lsl	r3, r3, #4
   184b4:	orr	r3, r3, r8, lsr #28
   184b8:	mov	r8, r1
   184bc:	b	180b0 <__assert_fail@plt+0x6ce0>
   184c0:	mov	r2, #5
   184c4:	movw	r1, #368	; 0x170
   184c8:	movt	r1, #2
   184cc:	mov	r0, #0
   184d0:	bl	11130 <dcgettext@plt>
   184d4:	bl	12c70 <__assert_fail@plt+0x18a0>
   184d8:	b	1725c <__assert_fail@plt+0x5e8c>
   184dc:	mov	r2, #5
   184e0:	movw	r1, #316	; 0x13c
   184e4:	movt	r1, #2
   184e8:	mov	r0, #0
   184ec:	bl	11130 <dcgettext@plt>
   184f0:	bl	12c70 <__assert_fail@plt+0x18a0>
   184f4:	b	17248 <__assert_fail@plt+0x5e78>
   184f8:	cmp	r3, #0
   184fc:	beq	16bf0 <__assert_fail@plt+0x5820>
   18500:	mov	r0, r7
   18504:	mov	r2, #5
   18508:	movw	r1, #972	; 0x3cc
   1850c:	movt	r1, #2
   18510:	bl	11130 <dcgettext@plt>
   18514:	mov	r5, r0
   18518:	add	r1, sp, #672	; 0x2a0
   1851c:	add	r0, sp, #136	; 0x88
   18520:	add	r2, sp, #372	; 0x174
   18524:	bl	12fb4 <__assert_fail@plt+0x1be4>
   18528:	mov	r1, r0
   1852c:	mov	r0, r5
   18530:	bl	12c70 <__assert_fail@plt+0x18a0>
   18534:	b	16bf0 <__assert_fail@plt+0x5820>
   18538:	mov	r3, #52	; 0x34
   1853c:	b	17208 <__assert_fail@plt+0x5e38>
   18540:	mov	r0, lr
   18544:	mov	r2, #5
   18548:	movw	r1, #1444	; 0x5a4
   1854c:	movt	r1, #2
   18550:	mov	r4, lr
   18554:	bl	11130 <dcgettext@plt>
   18558:	add	r3, sp, #808	; 0x328
   1855c:	add	ip, sp, #800	; 0x320
   18560:	ldr	r1, [sp, #816]	; 0x330
   18564:	ldrd	r2, [r3]
   18568:	ldrd	r8, [ip]
   1856c:	strd	r2, [sp, #8]
   18570:	add	r3, sp, #792	; 0x318
   18574:	str	r1, [sp, #16]
   18578:	ldrd	r2, [r3]
   1857c:	strd	r8, [sp]
   18580:	bl	12c70 <__assert_fail@plt+0x18a0>
   18584:	mov	r2, #5
   18588:	mov	r0, r4
   1858c:	movw	r1, #1520	; 0x5f0
   18590:	movt	r1, #2
   18594:	bl	11130 <dcgettext@plt>
   18598:	mov	r3, fp
   1859c:	mov	r2, sl
   185a0:	bl	12c70 <__assert_fail@plt+0x18a0>
   185a4:	ldr	r3, [sp, #168]	; 0xa8
   185a8:	cmn	r3, #1
   185ac:	beq	185f0 <__assert_fail@plt+0x7220>
   185b0:	add	r2, sp, #268	; 0x10c
   185b4:	mov	r0, r6
   185b8:	ldr	r1, [sp, #80]	; 0x50
   185bc:	bl	1b15c <__assert_fail@plt+0x9d8c>
   185c0:	cmp	r0, #0
   185c4:	beq	185f0 <__assert_fail@plt+0x7220>
   185c8:	ldr	r2, [sp, #168]	; 0xa8
   185cc:	ldr	r3, [sp, #300]	; 0x12c
   185d0:	cmp	r2, r3
   185d4:	beq	185f0 <__assert_fail@plt+0x7220>
   185d8:	movw	r1, #1556	; 0x614
   185dc:	movt	r1, #2
   185e0:	mov	r2, #5
   185e4:	mov	r0, #0
   185e8:	bl	11130 <dcgettext@plt>
   185ec:	bl	12c70 <__assert_fail@plt+0x18a0>
   185f0:	ldrb	r3, [sp, #853]	; 0x355
   185f4:	str	r3, [sp, #36]	; 0x24
   185f8:	b	17a54 <__assert_fail@plt+0x6684>
   185fc:	lsl	r3, r9, #4
   18600:	mov	r2, #1
   18604:	lsl	ip, r8, #4
   18608:	orr	r3, r3, r8, lsr #28
   1860c:	subs	ip, ip, r8
   18610:	sbc	r3, r3, r9
   18614:	lsl	r1, ip, #2
   18618:	lsl	r3, r3, #2
   1861c:	orr	r3, r3, ip, lsr #30
   18620:	mov	ip, r1
   18624:	b	1791c <__assert_fail@plt+0x654c>
   18628:	cmp	r5, #0
   1862c:	beq	16bf0 <__assert_fail@plt+0x5820>
   18630:	mov	r2, #5
   18634:	movw	r1, #1324	; 0x52c
   18638:	movt	r1, #2
   1863c:	mov	r0, #0
   18640:	bl	11130 <dcgettext@plt>
   18644:	ldr	r1, [sp, #696]	; 0x2b8
   18648:	bl	12c70 <__assert_fail@plt+0x18a0>
   1864c:	b	16bf0 <__assert_fail@plt+0x5820>
   18650:	lsl	r3, r5, #3
   18654:	mov	ip, #1
   18658:	lsl	r2, r7, #3
   1865c:	orr	r3, r3, r7, lsr #29
   18660:	subs	r2, r2, r7
   18664:	sbc	r3, r3, r5
   18668:	lsl	r1, r2, #5
   1866c:	lsl	r3, r3, #5
   18670:	orr	r3, r3, r2, lsr #27
   18674:	adds	r2, r1, r7
   18678:	lsl	r0, r2, #4
   1867c:	adc	r1, r3, r5
   18680:	lsl	r1, r1, #4
   18684:	orr	r1, r1, r2, lsr #28
   18688:	b	178c8 <__assert_fail@plt+0x64f8>
   1868c:	lsl	r1, fp, #3
   18690:	mov	lr, #1
   18694:	lsl	r0, sl, #3
   18698:	orr	r1, r1, sl, lsr #29
   1869c:	subs	r2, r0, sl
   186a0:	sbc	r3, r1, fp
   186a4:	mov	r1, r2
   186a8:	b	1765c <__assert_fail@plt+0x628c>
   186ac:	b	167a4 <__assert_fail@plt+0x53d4>
   186b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   186b4:	strd	r6, [sp, #8]
   186b8:	mov	r6, r0
   186bc:	movw	r0, #1792	; 0x700
   186c0:	movt	r0, #2
   186c4:	str	r8, [sp, #16]
   186c8:	mov	r7, r1
   186cc:	str	lr, [sp, #20]
   186d0:	sub	sp, sp, #8
   186d4:	mov	r8, r2
   186d8:	bl	111d8 <getenv@plt>
   186dc:	mov	r5, r0
   186e0:	bl	1aec0 <__assert_fail@plt+0x9af0>
   186e4:	subs	r4, r0, #0
   186e8:	moveq	r5, r4
   186ec:	beq	18714 <__assert_fail@plt+0x7344>
   186f0:	mov	r2, r8
   186f4:	mov	r1, r7
   186f8:	strd	r4, [sp]
   186fc:	mov	r0, r6
   18700:	mov	r3, #0
   18704:	bl	167a4 <__assert_fail@plt+0x53d4>
   18708:	mov	r5, r0
   1870c:	mov	r0, r4
   18710:	bl	1b14c <__assert_fail@plt+0x9d7c>
   18714:	mov	r0, r5
   18718:	add	sp, sp, #8
   1871c:	ldrd	r4, [sp]
   18720:	ldrd	r6, [sp, #8]
   18724:	ldr	r8, [sp, #16]
   18728:	add	sp, sp, #20
   1872c:	pop	{pc}		; (ldr pc, [sp], #4)
   18730:	cmp	r2, #1
   18734:	beq	187bc <__assert_fail@plt+0x73ec>
   18738:	cmp	r2, #2
   1873c:	bne	18770 <__assert_fail@plt+0x73a0>
   18740:	tst	r3, #2
   18744:	beq	187e0 <__assert_fail@plt+0x7410>
   18748:	ldr	r3, [r1]
   1874c:	mov	ip, #100	; 0x64
   18750:	mov	r2, #1
   18754:	ldr	r1, [r1, #4]
   18758:	mla	r3, ip, r3, r1
   1875c:	sub	r3, r3, #1888	; 0x760
   18760:	sub	r3, r3, #12
   18764:	str	r3, [r0]
   18768:	mov	r0, r2
   1876c:	bx	lr
   18770:	str	r4, [sp, #-8]!
   18774:	mov	r4, r0
   18778:	mov	r0, #0
   1877c:	str	lr, [sp, #4]
   18780:	sub	sp, sp, #8
   18784:	bl	1110c <time@plt>
   18788:	str	r0, [sp, #4]
   1878c:	add	r0, sp, #4
   18790:	bl	11220 <localtime@plt>
   18794:	subs	r2, r0, #0
   18798:	beq	187a8 <__assert_fail@plt+0x73d8>
   1879c:	ldr	r3, [r2, #20]
   187a0:	mov	r2, #1
   187a4:	str	r3, [r4]
   187a8:	mov	r0, r2
   187ac:	add	sp, sp, #8
   187b0:	ldr	r4, [sp]
   187b4:	add	sp, sp, #4
   187b8:	pop	{pc}		; (ldr pc, [sp], #4)
   187bc:	ldr	ip, [r1]
   187c0:	str	ip, [r0]
   187c4:	ldr	r1, [r1]
   187c8:	cmp	r1, #68	; 0x44
   187cc:	bgt	18768 <__assert_fail@plt+0x7398>
   187d0:	tst	r3, #8
   187d4:	addeq	ip, ip, #100	; 0x64
   187d8:	streq	ip, [r0]
   187dc:	beq	18768 <__assert_fail@plt+0x7398>
   187e0:	mov	r2, #0
   187e4:	mov	r0, r2
   187e8:	bx	lr
   187ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   187f0:	mov	r5, r1
   187f4:	strd	r6, [sp, #8]
   187f8:	mov	r6, r0
   187fc:	mov	r0, r1
   18800:	strd	r8, [sp, #16]
   18804:	mov	r8, r2
   18808:	strd	sl, [sp, #24]
   1880c:	str	lr, [sp, #32]
   18810:	sub	sp, sp, #92	; 0x5c
   18814:	bl	11274 <strlen@plt>
   18818:	ands	r7, r8, #4
   1881c:	mov	r4, r0
   18820:	mov	r9, r0
   18824:	beq	18874 <__assert_fail@plt+0x74a4>
   18828:	mov	r1, #46	; 0x2e
   1882c:	mov	r0, r5
   18830:	bl	11280 <strchr@plt>
   18834:	subs	r7, r0, #0
   18838:	beq	18874 <__assert_fail@plt+0x74a4>
   1883c:	sub	r3, r7, r5
   18840:	sub	r4, r4, r3
   18844:	cmp	r4, #3
   18848:	beq	1886c <__assert_fail@plt+0x749c>
   1884c:	mov	r0, #0
   18850:	add	sp, sp, #92	; 0x5c
   18854:	ldrd	r4, [sp]
   18858:	ldrd	r6, [sp, #8]
   1885c:	ldrd	r8, [sp, #16]
   18860:	ldrd	sl, [sp, #24]
   18864:	add	sp, sp, #32
   18868:	pop	{pc}		; (ldr pc, [sp], #4)
   1886c:	mov	r4, r3
   18870:	mov	r9, r3
   18874:	sub	r3, r4, #8
   18878:	cmp	r3, #4
   1887c:	bhi	1884c <__assert_fail@plt+0x747c>
   18880:	tst	r4, #1
   18884:	bne	1884c <__assert_fail@plt+0x747c>
   18888:	sub	r3, r5, #1
   1888c:	ldrb	r2, [r3, #1]
   18890:	add	r1, r3, #2
   18894:	add	r3, r3, #1
   18898:	sub	r1, r1, r5
   1889c:	sub	r2, r2, #48	; 0x30
   188a0:	cmp	r2, #9
   188a4:	bhi	1884c <__assert_fail@plt+0x747c>
   188a8:	cmp	r9, r1
   188ac:	bgt	1888c <__assert_fail@plt+0x74bc>
   188b0:	asr	r9, r9, #1
   188b4:	mov	r1, #0
   188b8:	add	r0, sp, #44	; 0x2c
   188bc:	add	ip, r5, #1
   188c0:	ldrb	r3, [r5, r1, lsl #1]
   188c4:	ldrb	r2, [ip, r1, lsl #1]
   188c8:	add	r1, r1, #1
   188cc:	cmp	r9, r1
   188d0:	sub	r3, r3, #48	; 0x30
   188d4:	add	r3, r3, r3, lsl #2
   188d8:	add	r3, r2, r3, lsl #1
   188dc:	sub	r3, r3, #48	; 0x30
   188e0:	str	r3, [r0], #4
   188e4:	bne	188c0 <__assert_fail@plt+0x74f0>
   188e8:	tst	r8, #1
   188ec:	sub	r2, r9, #4
   188f0:	beq	18a48 <__assert_fail@plt+0x7678>
   188f4:	ldr	ip, [sp, #44]	; 0x2c
   188f8:	mov	r3, r8
   188fc:	add	r1, sp, #60	; 0x3c
   18900:	add	r0, sp, #20
   18904:	ldr	r5, [sp, #48]	; 0x30
   18908:	ldr	r4, [sp, #52]	; 0x34
   1890c:	sub	ip, ip, #1
   18910:	ldr	lr, [sp, #56]	; 0x38
   18914:	str	ip, [sp, #16]
   18918:	str	lr, [sp, #4]
   1891c:	strd	r4, [sp, #8]
   18920:	bl	18730 <__assert_fail@plt+0x7360>
   18924:	cmp	r0, #0
   18928:	beq	1884c <__assert_fail@plt+0x747c>
   1892c:	cmp	r7, #0
   18930:	beq	18a90 <__assert_fail@plt+0x76c0>
   18934:	ldrb	r3, [r7, #1]
   18938:	sub	r3, r3, #48	; 0x30
   1893c:	cmp	r3, #9
   18940:	bhi	1884c <__assert_fail@plt+0x747c>
   18944:	ldrb	r2, [r7, #2]
   18948:	sub	r1, r2, #48	; 0x30
   1894c:	cmp	r1, #9
   18950:	bhi	1884c <__assert_fail@plt+0x747c>
   18954:	add	r3, r3, r3, lsl #2
   18958:	add	r3, r2, r3, lsl #1
   1895c:	sub	fp, r3, #48	; 0x30
   18960:	str	fp, [sp]
   18964:	mov	r4, #0
   18968:	mvn	r9, #0
   1896c:	ldr	r8, [sp, #4]
   18970:	mov	r5, #59	; 0x3b
   18974:	ldr	r7, [sp, #8]
   18978:	ldr	lr, [sp, #12]
   1897c:	ldr	ip, [sp, #16]
   18980:	ldr	r1, [sp, #20]
   18984:	b	189f8 <__assert_fail@plt+0x7628>
   18988:	ldr	r8, [sp, #4]
   1898c:	ldr	ip, [sp, #16]
   18990:	ldr	r1, [sp, #20]
   18994:	ldr	r3, [sp, #60]	; 0x3c
   18998:	ldr	r7, [sp, #64]	; 0x40
   1899c:	ldr	lr, [sp, #12]
   189a0:	eor	r2, ip, r3
   189a4:	ldr	sl, [sp, #56]	; 0x38
   189a8:	eor	r3, r1, r7
   189ac:	orr	r3, r3, r2
   189b0:	ldr	r7, [sp, #8]
   189b4:	ldr	r2, [sp, #52]	; 0x34
   189b8:	eor	sl, sl, lr
   189bc:	orr	r3, r3, sl
   189c0:	ldr	sl, [sp]
   189c4:	eor	r2, r2, r7
   189c8:	orr	r3, r3, r2
   189cc:	ldr	r2, [sp, #48]	; 0x30
   189d0:	eor	r2, r8, r2
   189d4:	orr	r3, r3, r2
   189d8:	ldr	r2, [sp, #44]	; 0x2c
   189dc:	eor	r2, sl, r2
   189e0:	orrs	r3, r3, r2
   189e4:	beq	18a34 <__assert_fail@plt+0x7664>
   189e8:	cmp	sl, #60	; 0x3c
   189ec:	mov	r4, #1
   189f0:	bne	1884c <__assert_fail@plt+0x747c>
   189f4:	str	r5, [sp]
   189f8:	add	r0, sp, #44	; 0x2c
   189fc:	str	fp, [sp, #44]	; 0x2c
   18a00:	mov	fp, #59	; 0x3b
   18a04:	str	r8, [sp, #48]	; 0x30
   18a08:	str	r7, [sp, #52]	; 0x34
   18a0c:	str	lr, [sp, #56]	; 0x38
   18a10:	str	ip, [sp, #60]	; 0x3c
   18a14:	str	r1, [sp, #64]	; 0x40
   18a18:	str	r9, [sp, #68]	; 0x44
   18a1c:	str	r9, [sp, #76]	; 0x4c
   18a20:	bl	110b8 <mktime@plt>
   18a24:	ldr	r3, [sp, #68]	; 0x44
   18a28:	cmp	r3, #0
   18a2c:	bge	18988 <__assert_fail@plt+0x75b8>
   18a30:	b	1884c <__assert_fail@plt+0x747c>
   18a34:	adds	r4, r0, r4
   18a38:	bvs	1884c <__assert_fail@plt+0x747c>
   18a3c:	mov	r0, #1
   18a40:	str	r4, [r6]
   18a44:	b	18850 <__assert_fail@plt+0x7480>
   18a48:	mov	r3, r8
   18a4c:	add	r1, sp, #44	; 0x2c
   18a50:	add	r0, sp, #20
   18a54:	bl	18730 <__assert_fail@plt+0x7360>
   18a58:	cmp	r0, #0
   18a5c:	beq	1884c <__assert_fail@plt+0x747c>
   18a60:	sub	r9, r9, #-1073741820	; 0xc0000004
   18a64:	add	r3, sp, #44	; 0x2c
   18a68:	add	r2, r3, r9, lsl #2
   18a6c:	ldr	r3, [r3, r9, lsl #2]
   18a70:	ldrd	r0, [r2, #4]
   18a74:	ldr	r2, [r2, #12]
   18a78:	sub	r3, r3, #1
   18a7c:	str	r2, [sp, #4]
   18a80:	str	r1, [sp, #8]
   18a84:	str	r0, [sp, #12]
   18a88:	str	r3, [sp, #16]
   18a8c:	b	1892c <__assert_fail@plt+0x755c>
   18a90:	mov	fp, r7
   18a94:	str	r7, [sp]
   18a98:	b	18964 <__assert_fail@plt+0x7594>
   18a9c:	movw	r0, #2540	; 0x9ec
   18aa0:	movt	r0, #2
   18aa4:	push	{lr}		; (str lr, [sp, #-4]!)
   18aa8:	sub	sp, sp, #12
   18aac:	bl	111d8 <getenv@plt>
   18ab0:	subs	r3, r0, #0
   18ab4:	beq	18ac4 <__assert_fail@plt+0x76f4>
   18ab8:	ldrb	r3, [r3]
   18abc:	cmp	r3, #0
   18ac0:	bne	18ad4 <__assert_fail@plt+0x7704>
   18ac4:	movw	r0, #4201	; 0x1069
   18ac8:	movt	r0, #3
   18acc:	add	sp, sp, #12
   18ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ad4:	mov	r2, #10
   18ad8:	add	r1, sp, #4
   18adc:	bl	110ac <strtol@plt>
   18ae0:	ldr	r2, [sp, #4]
   18ae4:	movw	r3, #4201	; 0x1069
   18ae8:	movt	r3, #3
   18aec:	ldrb	r2, [r2]
   18af0:	cmp	r2, #0
   18af4:	movne	r0, r3
   18af8:	add	sp, sp, #12
   18afc:	pop	{pc}		; (ldr pc, [sp], #4)
   18b00:	strd	r4, [sp, #-16]!
   18b04:	subs	r4, r0, #0
   18b08:	str	r6, [sp, #8]
   18b0c:	str	lr, [sp, #12]
   18b10:	beq	18ba8 <__assert_fail@plt+0x77d8>
   18b14:	mov	r1, #47	; 0x2f
   18b18:	bl	11328 <strrchr@plt>
   18b1c:	subs	r5, r0, #0
   18b20:	beq	18b80 <__assert_fail@plt+0x77b0>
   18b24:	add	r6, r5, #1
   18b28:	sub	r3, r6, r4
   18b2c:	cmp	r3, #6
   18b30:	ble	18b80 <__assert_fail@plt+0x77b0>
   18b34:	movw	r1, #2612	; 0xa34
   18b38:	movt	r1, #2
   18b3c:	mov	r2, #7
   18b40:	sub	r0, r5, #6
   18b44:	bl	11394 <strncmp@plt>
   18b48:	cmp	r0, #0
   18b4c:	bne	18b80 <__assert_fail@plt+0x77b0>
   18b50:	movw	r1, #2620	; 0xa3c
   18b54:	movt	r1, #2
   18b58:	mov	r2, #3
   18b5c:	mov	r0, r6
   18b60:	bl	11394 <strncmp@plt>
   18b64:	cmp	r0, #0
   18b68:	movne	r4, r6
   18b6c:	bne	18b80 <__assert_fail@plt+0x77b0>
   18b70:	add	r4, r5, #4
   18b74:	movw	r3, #4496	; 0x1190
   18b78:	movt	r3, #3
   18b7c:	str	r4, [r3]
   18b80:	movw	r2, #4568	; 0x11d8
   18b84:	movt	r2, #3
   18b88:	ldr	r6, [sp, #8]
   18b8c:	movw	r3, #4500	; 0x1194
   18b90:	movt	r3, #3
   18b94:	str	r4, [r2]
   18b98:	str	r4, [r3]
   18b9c:	ldrd	r4, [sp]
   18ba0:	add	sp, sp, #12
   18ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ba8:	movw	r3, #4512	; 0x11a0
   18bac:	movt	r3, #3
   18bb0:	movw	r0, #2556	; 0x9fc
   18bb4:	movt	r0, #2
   18bb8:	ldr	r3, [r3]
   18bbc:	mov	r2, #55	; 0x37
   18bc0:	mov	r1, #1
   18bc4:	bl	11184 <fwrite@plt>
   18bc8:	bl	113a0 <abort@plt>
   18bcc:	strd	r4, [sp, #-16]!
   18bd0:	mov	r4, #0
   18bd4:	mov	r5, #0
   18bd8:	cmp	r1, #10
   18bdc:	str	r6, [sp, #8]
   18be0:	strd	r4, [r0]
   18be4:	strd	r4, [r0, #8]
   18be8:	str	lr, [sp, #12]
   18bec:	strd	r4, [r0, #16]
   18bf0:	strd	r4, [r0, #24]
   18bf4:	strd	r4, [r0, #32]
   18bf8:	strd	r4, [r0, #40]	; 0x28
   18bfc:	beq	18c14 <__assert_fail@plt+0x7844>
   18c00:	ldrd	r4, [sp]
   18c04:	str	r1, [r0]
   18c08:	ldr	r6, [sp, #8]
   18c0c:	add	sp, sp, #12
   18c10:	pop	{pc}		; (ldr pc, [sp], #4)
   18c14:	bl	113a0 <abort@plt>
   18c18:	mov	r2, #5
   18c1c:	strd	r4, [sp, #-16]!
   18c20:	mov	r5, r0
   18c24:	str	r6, [sp, #8]
   18c28:	mov	r6, r1
   18c2c:	mov	r1, r0
   18c30:	mov	r0, #0
   18c34:	str	lr, [sp, #12]
   18c38:	bl	11130 <dcgettext@plt>
   18c3c:	cmp	r5, r0
   18c40:	mov	r4, r0
   18c44:	beq	18c5c <__assert_fail@plt+0x788c>
   18c48:	mov	r0, r4
   18c4c:	ldrd	r4, [sp]
   18c50:	ldr	r6, [sp, #8]
   18c54:	add	sp, sp, #12
   18c58:	pop	{pc}		; (ldr pc, [sp], #4)
   18c5c:	bl	1c15c <__assert_fail@plt+0xad8c>
   18c60:	ldrb	r3, [r0]
   18c64:	bic	r3, r3, #32
   18c68:	cmp	r3, #85	; 0x55
   18c6c:	bne	18cd4 <__assert_fail@plt+0x7904>
   18c70:	ldrb	r3, [r0, #1]
   18c74:	bic	r3, r3, #32
   18c78:	cmp	r3, #84	; 0x54
   18c7c:	bne	18d54 <__assert_fail@plt+0x7984>
   18c80:	ldrb	r3, [r0, #2]
   18c84:	bic	r3, r3, #32
   18c88:	cmp	r3, #70	; 0x46
   18c8c:	bne	18d54 <__assert_fail@plt+0x7984>
   18c90:	ldrb	r3, [r0, #3]
   18c94:	cmp	r3, #45	; 0x2d
   18c98:	bne	18d54 <__assert_fail@plt+0x7984>
   18c9c:	ldrb	r3, [r0, #4]
   18ca0:	cmp	r3, #56	; 0x38
   18ca4:	bne	18d54 <__assert_fail@plt+0x7984>
   18ca8:	ldrb	r3, [r0, #5]
   18cac:	cmp	r3, #0
   18cb0:	bne	18d54 <__assert_fail@plt+0x7984>
   18cb4:	ldrb	r2, [r4]
   18cb8:	movw	r3, #2712	; 0xa98
   18cbc:	movt	r3, #2
   18cc0:	movw	r4, #2724	; 0xaa4
   18cc4:	movt	r4, #2
   18cc8:	cmp	r2, #96	; 0x60
   18ccc:	movne	r4, r3
   18cd0:	b	18c48 <__assert_fail@plt+0x7878>
   18cd4:	cmp	r3, #71	; 0x47
   18cd8:	bne	18d54 <__assert_fail@plt+0x7984>
   18cdc:	ldrb	r3, [r0, #1]
   18ce0:	bic	r3, r3, #32
   18ce4:	cmp	r3, #66	; 0x42
   18ce8:	bne	18d54 <__assert_fail@plt+0x7984>
   18cec:	ldrb	r3, [r0, #2]
   18cf0:	cmp	r3, #49	; 0x31
   18cf4:	bne	18d54 <__assert_fail@plt+0x7984>
   18cf8:	ldrb	r3, [r0, #3]
   18cfc:	cmp	r3, #56	; 0x38
   18d00:	bne	18d54 <__assert_fail@plt+0x7984>
   18d04:	ldrb	r3, [r0, #4]
   18d08:	cmp	r3, #48	; 0x30
   18d0c:	bne	18d54 <__assert_fail@plt+0x7984>
   18d10:	ldrb	r3, [r0, #5]
   18d14:	cmp	r3, #51	; 0x33
   18d18:	bne	18d54 <__assert_fail@plt+0x7984>
   18d1c:	ldrb	r3, [r0, #6]
   18d20:	cmp	r3, #48	; 0x30
   18d24:	bne	18d54 <__assert_fail@plt+0x7984>
   18d28:	ldrb	r3, [r0, #7]
   18d2c:	cmp	r3, #0
   18d30:	bne	18d54 <__assert_fail@plt+0x7984>
   18d34:	ldrb	r2, [r4]
   18d38:	movw	r3, #2716	; 0xa9c
   18d3c:	movt	r3, #2
   18d40:	movw	r4, #2720	; 0xaa0
   18d44:	movt	r4, #2
   18d48:	cmp	r2, #96	; 0x60
   18d4c:	movne	r4, r3
   18d50:	b	18c48 <__assert_fail@plt+0x7878>
   18d54:	movw	r3, #2728	; 0xaa8
   18d58:	movt	r3, #2
   18d5c:	cmp	r6, #9
   18d60:	movw	r4, #2708	; 0xa94
   18d64:	movt	r4, #2
   18d68:	movne	r4, r3
   18d6c:	b	18c48 <__assert_fail@plt+0x7878>
   18d70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18d74:	strd	r6, [sp, #8]
   18d78:	strd	r8, [sp, #16]
   18d7c:	strd	sl, [sp, #24]
   18d80:	mov	fp, r0
   18d84:	mov	sl, r1
   18d88:	str	lr, [sp, #32]
   18d8c:	sub	sp, sp, #116	; 0x74
   18d90:	ldr	r8, [sp, #152]	; 0x98
   18d94:	str	r3, [sp, #28]
   18d98:	ldr	r3, [sp, #156]	; 0x9c
   18d9c:	str	r2, [sp, #32]
   18da0:	and	r4, r3, #2
   18da4:	ubfx	r3, r3, #1, #1
   18da8:	str	r3, [sp, #44]	; 0x2c
   18dac:	bl	1119c <__ctype_get_mb_cur_max@plt>
   18db0:	str	r0, [sp, #64]	; 0x40
   18db4:	cmp	r8, #10
   18db8:	ldrls	pc, [pc, r8, lsl #2]
   18dbc:	b	1a52c <__assert_fail@plt+0x915c>
   18dc0:	andeq	r9, r1, r4, asr #3
   18dc4:	andeq	r9, r1, r0, ror #4
   18dc8:	andeq	r9, r1, ip, lsr r8
   18dcc:	andeq	r9, r1, r0, lsl #5
   18dd0:	andeq	r9, r1, r8, lsr #2
   18dd4:	andeq	r9, r1, r4, ror r1
   18dd8:	strdeq	r9, [r1], -r4
   18ddc:	andeq	r9, r1, r0, lsr r2
   18de0:	andeq	r8, r1, ip, ror #27
   18de4:	andeq	r8, r1, ip, ror #27
   18de8:	andeq	r8, r1, ip, ror #27
   18dec:	cmp	r8, #10
   18df0:	beq	18e1c <__assert_fail@plt+0x7a4c>
   18df4:	mov	r1, r8
   18df8:	movw	r0, #2732	; 0xaac
   18dfc:	movt	r0, #2
   18e00:	bl	18c18 <__assert_fail@plt+0x7848>
   18e04:	mov	r1, r8
   18e08:	str	r0, [sp, #164]	; 0xa4
   18e0c:	movw	r0, #2728	; 0xaa8
   18e10:	movt	r0, #2
   18e14:	bl	18c18 <__assert_fail@plt+0x7848>
   18e18:	str	r0, [sp, #168]	; 0xa8
   18e1c:	cmp	r4, #0
   18e20:	movne	r4, #0
   18e24:	beq	1a208 <__assert_fail@plt+0x8e38>
   18e28:	mov	r3, #1
   18e2c:	mov	r5, #0
   18e30:	ldr	r0, [sp, #168]	; 0xa8
   18e34:	str	r3, [sp, #36]	; 0x24
   18e38:	str	r3, [sp, #40]	; 0x28
   18e3c:	str	r5, [sp, #68]	; 0x44
   18e40:	bl	11274 <strlen@plt>
   18e44:	ldr	r3, [sp, #168]	; 0xa8
   18e48:	str	r5, [sp, #48]	; 0x30
   18e4c:	str	r0, [sp, #56]	; 0x38
   18e50:	str	r3, [sp, #60]	; 0x3c
   18e54:	str	r5, [sp, #72]	; 0x48
   18e58:	str	r8, [sp, #152]	; 0x98
   18e5c:	mov	r8, fp
   18e60:	mov	r9, #0
   18e64:	ldr	fp, [sp, #152]	; 0x98
   18e68:	ldr	r3, [sp, #28]
   18e6c:	cmn	r3, #1
   18e70:	beq	193d0 <__assert_fail@plt+0x8000>
   18e74:	ldr	r3, [sp, #28]
   18e78:	subs	r6, r3, r9
   18e7c:	movne	r6, #1
   18e80:	cmp	r6, #0
   18e84:	beq	193e8 <__assert_fail@plt+0x8018>
   18e88:	ldr	r0, [sp, #32]
   18e8c:	ldr	r7, [sp, #40]	; 0x28
   18e90:	add	r3, r0, r9
   18e94:	cmp	fp, #2
   18e98:	moveq	r7, #0
   18e9c:	andne	r7, r7, #1
   18ea0:	str	r3, [sp, #52]	; 0x34
   18ea4:	cmp	r7, #0
   18ea8:	beq	19884 <__assert_fail@plt+0x84b4>
   18eac:	ldr	r2, [sp, #56]	; 0x38
   18eb0:	cmp	r2, #0
   18eb4:	beq	19b20 <__assert_fail@plt+0x8750>
   18eb8:	ldr	r1, [sp, #28]
   18ebc:	cmp	r2, #1
   18ec0:	mov	r3, r2
   18ec4:	movls	r3, #0
   18ec8:	movhi	r3, #1
   18ecc:	add	r5, r9, r2
   18ed0:	cmn	r1, #1
   18ed4:	movne	r3, #0
   18ed8:	cmp	r3, #0
   18edc:	beq	18ee8 <__assert_fail@plt+0x7b18>
   18ee0:	bl	11274 <strlen@plt>
   18ee4:	str	r0, [sp, #28]
   18ee8:	ldr	r3, [sp, #28]
   18eec:	cmp	r5, r3
   18ef0:	bhi	19b20 <__assert_fail@plt+0x8750>
   18ef4:	ldr	r0, [sp, #52]	; 0x34
   18ef8:	ldr	r2, [sp, #56]	; 0x38
   18efc:	ldr	r1, [sp, #60]	; 0x3c
   18f00:	bl	11118 <memcmp@plt>
   18f04:	cmp	r0, #0
   18f08:	bne	19b20 <__assert_fail@plt+0x8750>
   18f0c:	ldr	r3, [sp, #44]	; 0x2c
   18f10:	cmp	r3, #0
   18f14:	bne	1a450 <__assert_fail@plt+0x9080>
   18f18:	ldr	r3, [sp, #52]	; 0x34
   18f1c:	ldrb	r5, [r3]
   18f20:	cmp	r5, #126	; 0x7e
   18f24:	ldrls	pc, [pc, r5, lsl #2]
   18f28:	b	197e0 <__assert_fail@plt+0x8410>
   18f2c:	andeq	r9, r1, r4, ror #13
   18f30:	andeq	r9, r1, r0, ror #15
   18f34:	andeq	r9, r1, r0, ror #15
   18f38:	andeq	r9, r1, r0, ror #15
   18f3c:	andeq	r9, r1, r0, ror #15
   18f40:	andeq	r9, r1, r0, ror #15
   18f44:	andeq	r9, r1, r0, ror #15
   18f48:			; <UNDEFINED> instruction: 0x000196b8
   18f4c:			; <UNDEFINED> instruction: 0x000196b0
   18f50:	strdeq	r9, [r1], -r8
   18f54:	andeq	r9, r1, r4, lsr #13
   18f58:	strdeq	r9, [r1], -r0
   18f5c:	andeq	r9, r1, r0, lsl #13
   18f60:	andeq	r9, r1, ip, asr #13
   18f64:	andeq	r9, r1, r0, ror #15
   18f68:	andeq	r9, r1, r0, ror #15
   18f6c:	andeq	r9, r1, r0, ror #15
   18f70:	andeq	r9, r1, r0, ror #15
   18f74:	andeq	r9, r1, r0, ror #15
   18f78:	andeq	r9, r1, r0, ror #15
   18f7c:	andeq	r9, r1, r0, ror #15
   18f80:	andeq	r9, r1, r0, ror #15
   18f84:	andeq	r9, r1, r0, ror #15
   18f88:	andeq	r9, r1, r0, ror #15
   18f8c:	andeq	r9, r1, r0, ror #15
   18f90:	andeq	r9, r1, r0, ror #15
   18f94:	andeq	r9, r1, r0, ror #15
   18f98:	andeq	r9, r1, r0, ror #15
   18f9c:	andeq	r9, r1, r0, ror #15
   18fa0:	andeq	r9, r1, r0, ror #15
   18fa4:	andeq	r9, r1, r0, ror #15
   18fa8:	andeq	r9, r1, r0, ror #15
   18fac:			; <UNDEFINED> instruction: 0x000197bc
   18fb0:	andeq	r9, r1, r4, asr #13
   18fb4:	andeq	r9, r1, r4, asr #13
   18fb8:	andeq	r9, r1, r0, lsr #15
   18fbc:	andeq	r9, r1, r4, asr #13
   18fc0:	ldrdeq	r9, [r1], -r4
   18fc4:	andeq	r9, r1, r4, asr #13
   18fc8:	andeq	r9, r1, r0, lsr #10
   18fcc:	andeq	r9, r1, r4, asr #13
   18fd0:	andeq	r9, r1, r4, asr #13
   18fd4:	andeq	r9, r1, r4, asr #13
   18fd8:	ldrdeq	r9, [r1], -r4
   18fdc:	ldrdeq	r9, [r1], -r4
   18fe0:	ldrdeq	r9, [r1], -r4
   18fe4:	ldrdeq	r9, [r1], -r4
   18fe8:	ldrdeq	r9, [r1], -r4
   18fec:	ldrdeq	r9, [r1], -r4
   18ff0:	ldrdeq	r9, [r1], -r4
   18ff4:	ldrdeq	r9, [r1], -r4
   18ff8:	ldrdeq	r9, [r1], -r4
   18ffc:	ldrdeq	r9, [r1], -r4
   19000:	ldrdeq	r9, [r1], -r4
   19004:	ldrdeq	r9, [r1], -r4
   19008:	ldrdeq	r9, [r1], -r4
   1900c:	ldrdeq	r9, [r1], -r4
   19010:	ldrdeq	r9, [r1], -r4
   19014:	ldrdeq	r9, [r1], -r4
   19018:	andeq	r9, r1, r4, asr #13
   1901c:	andeq	r9, r1, r4, asr #13
   19020:	andeq	r9, r1, r4, asr #13
   19024:	andeq	r9, r1, r4, asr #13
   19028:	strdeq	r9, [r1], -r4
   1902c:	andeq	r9, r1, r0, ror #15
   19030:	ldrdeq	r9, [r1], -r4
   19034:	ldrdeq	r9, [r1], -r4
   19038:	ldrdeq	r9, [r1], -r4
   1903c:	ldrdeq	r9, [r1], -r4
   19040:	ldrdeq	r9, [r1], -r4
   19044:	ldrdeq	r9, [r1], -r4
   19048:	ldrdeq	r9, [r1], -r4
   1904c:	ldrdeq	r9, [r1], -r4
   19050:	ldrdeq	r9, [r1], -r4
   19054:	ldrdeq	r9, [r1], -r4
   19058:	ldrdeq	r9, [r1], -r4
   1905c:	ldrdeq	r9, [r1], -r4
   19060:	ldrdeq	r9, [r1], -r4
   19064:	ldrdeq	r9, [r1], -r4
   19068:	ldrdeq	r9, [r1], -r4
   1906c:	ldrdeq	r9, [r1], -r4
   19070:	ldrdeq	r9, [r1], -r4
   19074:	ldrdeq	r9, [r1], -r4
   19078:	ldrdeq	r9, [r1], -r4
   1907c:	ldrdeq	r9, [r1], -r4
   19080:	ldrdeq	r9, [r1], -r4
   19084:	ldrdeq	r9, [r1], -r4
   19088:	ldrdeq	r9, [r1], -r4
   1908c:	ldrdeq	r9, [r1], -r4
   19090:	ldrdeq	r9, [r1], -r4
   19094:	ldrdeq	r9, [r1], -r4
   19098:	andeq	r9, r1, r4, asr #13
   1909c:	muleq	r1, ip, r4
   190a0:	ldrdeq	r9, [r1], -r4
   190a4:	andeq	r9, r1, r4, asr #13
   190a8:	ldrdeq	r9, [r1], -r4
   190ac:	andeq	r9, r1, r4, asr #13
   190b0:	ldrdeq	r9, [r1], -r4
   190b4:	ldrdeq	r9, [r1], -r4
   190b8:	ldrdeq	r9, [r1], -r4
   190bc:	ldrdeq	r9, [r1], -r4
   190c0:	ldrdeq	r9, [r1], -r4
   190c4:	ldrdeq	r9, [r1], -r4
   190c8:	ldrdeq	r9, [r1], -r4
   190cc:	ldrdeq	r9, [r1], -r4
   190d0:	ldrdeq	r9, [r1], -r4
   190d4:	ldrdeq	r9, [r1], -r4
   190d8:	ldrdeq	r9, [r1], -r4
   190dc:	ldrdeq	r9, [r1], -r4
   190e0:	ldrdeq	r9, [r1], -r4
   190e4:	ldrdeq	r9, [r1], -r4
   190e8:	ldrdeq	r9, [r1], -r4
   190ec:	ldrdeq	r9, [r1], -r4
   190f0:	ldrdeq	r9, [r1], -r4
   190f4:	ldrdeq	r9, [r1], -r4
   190f8:	ldrdeq	r9, [r1], -r4
   190fc:	ldrdeq	r9, [r1], -r4
   19100:	ldrdeq	r9, [r1], -r4
   19104:	ldrdeq	r9, [r1], -r4
   19108:	ldrdeq	r9, [r1], -r4
   1910c:	ldrdeq	r9, [r1], -r4
   19110:	ldrdeq	r9, [r1], -r4
   19114:	ldrdeq	r9, [r1], -r4
   19118:	andeq	r9, r1, r0, asr #5
   1911c:	andeq	r9, r1, r4, asr #13
   19120:	andeq	r9, r1, r0, asr #5
   19124:	andeq	r9, r1, r0, lsr #15
   19128:	cmp	r4, #0
   1912c:	moveq	r3, #1
   19130:	streq	r3, [sp, #40]	; 0x28
   19134:	beq	19848 <__assert_fail@plt+0x8478>
   19138:	mov	r3, #0
   1913c:	mov	r2, #1
   19140:	mov	r4, r3
   19144:	str	r2, [sp, #36]	; 0x24
   19148:	str	r2, [sp, #44]	; 0x2c
   1914c:	str	r2, [sp, #56]	; 0x38
   19150:	str	r3, [sp, #68]	; 0x44
   19154:	movw	r3, #2728	; 0xaa8
   19158:	movt	r3, #2
   1915c:	str	r4, [sp, #40]	; 0x28
   19160:	mov	r8, #2
   19164:	str	r4, [sp, #48]	; 0x30
   19168:	str	r3, [sp, #60]	; 0x3c
   1916c:	str	r4, [sp, #72]	; 0x48
   19170:	b	18e58 <__assert_fail@plt+0x7a88>
   19174:	cmp	r4, #0
   19178:	bne	1a3c4 <__assert_fail@plt+0x8ff4>
   1917c:	cmp	sl, #0
   19180:	beq	1a184 <__assert_fail@plt+0x8db4>
   19184:	mov	r3, #34	; 0x22
   19188:	mov	r1, r4
   1918c:	mov	r2, #1
   19190:	strb	r3, [fp]
   19194:	movw	r3, #2708	; 0xa94
   19198:	movt	r3, #2
   1919c:	mov	r4, r2
   191a0:	str	r2, [sp, #36]	; 0x24
   191a4:	str	r2, [sp, #40]	; 0x28
   191a8:	str	r1, [sp, #44]	; 0x2c
   191ac:	str	r1, [sp, #48]	; 0x30
   191b0:	str	r2, [sp, #56]	; 0x38
   191b4:	str	r3, [sp, #60]	; 0x3c
   191b8:	str	r1, [sp, #68]	; 0x44
   191bc:	str	r1, [sp, #72]	; 0x48
   191c0:	b	18e58 <__assert_fail@plt+0x7a88>
   191c4:	mov	r3, #0
   191c8:	mov	r4, r8
   191cc:	str	r3, [sp, #40]	; 0x28
   191d0:	str	r3, [sp, #44]	; 0x2c
   191d4:	str	r3, [sp, #48]	; 0x30
   191d8:	str	r8, [sp, #56]	; 0x38
   191dc:	str	r3, [sp, #60]	; 0x3c
   191e0:	str	r3, [sp, #68]	; 0x44
   191e4:	mov	r3, #1
   191e8:	str	r3, [sp, #36]	; 0x24
   191ec:	str	r8, [sp, #72]	; 0x48
   191f0:	b	18e58 <__assert_fail@plt+0x7a88>
   191f4:	mov	r3, #1
   191f8:	mov	r2, #0
   191fc:	mov	r4, r2
   19200:	mov	r8, #5
   19204:	str	r3, [sp, #36]	; 0x24
   19208:	str	r3, [sp, #40]	; 0x28
   1920c:	str	r3, [sp, #44]	; 0x2c
   19210:	str	r2, [sp, #48]	; 0x30
   19214:	str	r3, [sp, #56]	; 0x38
   19218:	movw	r3, #2708	; 0xa94
   1921c:	movt	r3, #2
   19220:	str	r3, [sp, #60]	; 0x3c
   19224:	str	r2, [sp, #68]	; 0x44
   19228:	str	r2, [sp, #72]	; 0x48
   1922c:	b	18e58 <__assert_fail@plt+0x7a88>
   19230:	mov	r3, #0
   19234:	mov	r2, #1
   19238:	mov	r4, r3
   1923c:	str	r2, [sp, #36]	; 0x24
   19240:	str	r2, [sp, #40]	; 0x28
   19244:	str	r3, [sp, #44]	; 0x2c
   19248:	str	r3, [sp, #48]	; 0x30
   1924c:	str	r3, [sp, #56]	; 0x38
   19250:	str	r3, [sp, #60]	; 0x3c
   19254:	str	r3, [sp, #68]	; 0x44
   19258:	str	r3, [sp, #72]	; 0x48
   1925c:	b	18e58 <__assert_fail@plt+0x7a88>
   19260:	mov	r2, #1
   19264:	mov	r3, #0
   19268:	mov	r4, r3
   1926c:	str	r2, [sp, #36]	; 0x24
   19270:	str	r2, [sp, #44]	; 0x2c
   19274:	str	r8, [sp, #56]	; 0x38
   19278:	str	r3, [sp, #68]	; 0x44
   1927c:	b	19154 <__assert_fail@plt+0x7d84>
   19280:	mov	r3, #1
   19284:	mov	r2, #0
   19288:	mov	r4, r2
   1928c:	mov	r8, #2
   19290:	str	r3, [sp, #36]	; 0x24
   19294:	str	r3, [sp, #40]	; 0x28
   19298:	str	r3, [sp, #44]	; 0x2c
   1929c:	str	r2, [sp, #48]	; 0x30
   192a0:	str	r3, [sp, #56]	; 0x38
   192a4:	movw	r3, #2728	; 0xaa8
   192a8:	movt	r3, #2
   192ac:	str	r3, [sp, #60]	; 0x3c
   192b0:	str	r2, [sp, #68]	; 0x44
   192b4:	str	r2, [sp, #72]	; 0x48
   192b8:	b	18e58 <__assert_fail@plt+0x7a88>
   192bc:	mov	r7, #0
   192c0:	ldr	r3, [sp, #28]
   192c4:	cmn	r3, #1
   192c8:	beq	19da0 <__assert_fail@plt+0x89d0>
   192cc:	ldr	r3, [sp, #28]
   192d0:	subs	r2, r3, #1
   192d4:	movne	r2, #1
   192d8:	sub	r3, fp, #2
   192dc:	cmp	r2, #0
   192e0:	clz	r3, r3
   192e4:	lsr	r3, r3, #5
   192e8:	bne	192f4 <__assert_fail@plt+0x7f24>
   192ec:	cmp	r9, #0
   192f0:	beq	19b00 <__assert_fail@plt+0x8730>
   192f4:	mov	r6, #0
   192f8:	ldr	r2, [sp, #40]	; 0x28
   192fc:	eor	r2, r2, #1
   19300:	orrs	r3, r3, r2
   19304:	bne	194dc <__assert_fail@plt+0x810c>
   19308:	ldr	r2, [sp, #160]	; 0xa0
   1930c:	cmp	r2, #0
   19310:	beq	19330 <__assert_fail@plt+0x7f60>
   19314:	ldr	r0, [sp, #160]	; 0xa0
   19318:	ubfx	r1, r5, #5, #8
   1931c:	and	r2, r5, #31
   19320:	ldr	r1, [r0, r1, lsl #2]
   19324:	lsr	r2, r1, r2
   19328:	tst	r2, #1
   1932c:	bne	19338 <__assert_fail@plt+0x7f68>
   19330:	cmp	r7, #0
   19334:	beq	195a8 <__assert_fail@plt+0x81d8>
   19338:	ldr	r2, [sp, #44]	; 0x2c
   1933c:	sub	r3, fp, #2
   19340:	clz	r3, r3
   19344:	lsr	r3, r3, #5
   19348:	cmp	r2, #0
   1934c:	bne	1a0f4 <__assert_fail@plt+0x8d24>
   19350:	ldr	r2, [sp, #48]	; 0x30
   19354:	eor	r2, r2, #1
   19358:	ands	r3, r3, r2
   1935c:	beq	19394 <__assert_fail@plt+0x7fc4>
   19360:	cmp	sl, r4
   19364:	str	r3, [sp, #48]	; 0x30
   19368:	movhi	r2, #39	; 0x27
   1936c:	strbhi	r2, [r8, r4]
   19370:	add	r2, r4, #1
   19374:	cmp	sl, r2
   19378:	movhi	r1, #36	; 0x24
   1937c:	strbhi	r1, [r8, r2]
   19380:	add	r2, r4, #2
   19384:	add	r4, r4, #3
   19388:	cmp	sl, r2
   1938c:	movhi	r1, #39	; 0x27
   19390:	strbhi	r1, [r8, r2]
   19394:	cmp	r4, sl
   19398:	add	r9, r9, #1
   1939c:	movcc	r3, #92	; 0x5c
   193a0:	strbcc	r3, [r8, r4]
   193a4:	add	r4, r4, #1
   193a8:	cmp	r4, sl
   193ac:	ldr	r3, [sp, #36]	; 0x24
   193b0:	strbcc	r5, [r8, r4]
   193b4:	cmp	r6, #0
   193b8:	add	r4, r4, #1
   193bc:	moveq	r3, #0
   193c0:	str	r3, [sp, #36]	; 0x24
   193c4:	ldr	r3, [sp, #28]
   193c8:	cmn	r3, #1
   193cc:	bne	18e74 <__assert_fail@plt+0x7aa4>
   193d0:	ldr	r3, [sp, #32]
   193d4:	ldrb	r6, [r3, r9]
   193d8:	adds	r6, r6, #0
   193dc:	movne	r6, #1
   193e0:	cmp	r6, #0
   193e4:	bne	18e88 <__assert_fail@plt+0x7ab8>
   193e8:	str	fp, [sp, #152]	; 0x98
   193ec:	mov	fp, r8
   193f0:	cmp	r4, #0
   193f4:	ldr	r1, [sp, #44]	; 0x2c
   193f8:	movne	r3, #0
   193fc:	ldr	r8, [sp, #152]	; 0x98
   19400:	sub	r2, r8, #2
   19404:	clz	r2, r2
   19408:	lsr	r2, r2, #5
   1940c:	andeq	r3, r2, r1
   19410:	cmp	r3, #0
   19414:	bne	1a4d0 <__assert_fail@plt+0x9100>
   19418:	eor	r3, r1, #1
   1941c:	ands	r2, r2, r3
   19420:	beq	1a3fc <__assert_fail@plt+0x902c>
   19424:	ldr	r3, [sp, #68]	; 0x44
   19428:	cmp	r3, #0
   1942c:	beq	1a400 <__assert_fail@plt+0x9030>
   19430:	ldr	r3, [sp, #36]	; 0x24
   19434:	cmp	r3, #0
   19438:	bne	1a48c <__assert_fail@plt+0x90bc>
   1943c:	ldr	r3, [sp, #72]	; 0x48
   19440:	adds	r3, r3, #0
   19444:	movne	r3, #1
   19448:	cmp	sl, #0
   1944c:	movne	r3, #0
   19450:	cmp	r3, #0
   19454:	ldreq	r2, [sp, #68]	; 0x44
   19458:	beq	1a400 <__assert_fail@plt+0x9030>
   1945c:	ldr	r2, [sp, #72]	; 0x48
   19460:	str	r3, [sp, #68]	; 0x44
   19464:	movw	r3, #2728	; 0xaa8
   19468:	movt	r3, #2
   1946c:	mov	r1, #39	; 0x27
   19470:	mov	r4, #1
   19474:	ldr	sl, [sp, #72]	; 0x48
   19478:	mov	r8, #2
   1947c:	str	r3, [sp, #60]	; 0x3c
   19480:	mov	r3, #0
   19484:	strb	r1, [fp]
   19488:	str	r3, [sp, #44]	; 0x2c
   1948c:	str	r4, [sp, #56]	; 0x38
   19490:	str	r2, [sp, #72]	; 0x48
   19494:	b	18e58 <__assert_fail@plt+0x7a88>
   19498:	mov	r7, #0
   1949c:	cmp	fp, #2
   194a0:	beq	19d80 <__assert_fail@plt+0x89b0>
   194a4:	ldr	r2, [sp, #40]	; 0x28
   194a8:	ldr	r3, [sp, #56]	; 0x38
   194ac:	ldr	r1, [sp, #44]	; 0x2c
   194b0:	cmp	r3, #0
   194b4:	moveq	r3, #0
   194b8:	andne	r3, r2, r1
   194bc:	cmp	r3, #0
   194c0:	moveq	r5, #92	; 0x5c
   194c4:	moveq	r3, r5
   194c8:	bne	19d8c <__assert_fail@plt+0x89bc>
   194cc:	ldr	r2, [sp, #40]	; 0x28
   194d0:	cmp	r2, #0
   194d4:	bne	1a1c8 <__assert_fail@plt+0x8df8>
   194d8:	mov	r6, #0
   194dc:	ldr	r3, [sp, #44]	; 0x2c
   194e0:	cmp	r3, #0
   194e4:	beq	19d78 <__assert_fail@plt+0x89a8>
   194e8:	mov	r3, #0
   194ec:	b	19308 <__assert_fail@plt+0x7f38>
   194f0:	mov	r7, #0
   194f4:	cmp	fp, #2
   194f8:	beq	19df0 <__assert_fail@plt+0x8a20>
   194fc:	cmp	fp, #5
   19500:	beq	19db4 <__assert_fail@plt+0x89e4>
   19504:	sub	r3, fp, #2
   19508:	mov	r6, #0
   1950c:	clz	r3, r3
   19510:	mov	r5, #63	; 0x3f
   19514:	lsr	r3, r3, #5
   19518:	b	192f8 <__assert_fail@plt+0x7f28>
   1951c:	mov	r7, #0
   19520:	cmp	fp, #2
   19524:	movne	r3, #0
   19528:	movne	r5, #39	; 0x27
   1952c:	strne	r6, [sp, #68]	; 0x44
   19530:	bne	192f8 <__assert_fail@plt+0x7f28>
   19534:	ldr	r3, [sp, #44]	; 0x2c
   19538:	cmp	r3, #0
   1953c:	bne	1a1f8 <__assert_fail@plt+0x8e28>
   19540:	ldr	r3, [sp, #72]	; 0x48
   19544:	cmp	sl, #0
   19548:	clz	r3, r3
   1954c:	lsr	r3, r3, #5
   19550:	moveq	r3, #0
   19554:	cmp	r3, #0
   19558:	bne	1a124 <__assert_fail@plt+0x8d54>
   1955c:	cmp	sl, r4
   19560:	movhi	r3, #39	; 0x27
   19564:	strbhi	r3, [r8, r4]
   19568:	add	r3, r4, #1
   1956c:	cmp	sl, r3
   19570:	movhi	r2, #92	; 0x5c
   19574:	strbhi	r2, [r8, r3]
   19578:	add	r3, r4, #2
   1957c:	cmp	sl, r3
   19580:	bls	1958c <__assert_fail@plt+0x81bc>
   19584:	mov	r2, #39	; 0x27
   19588:	strb	r2, [r8, r3]
   1958c:	mov	r3, #0
   19590:	cmp	r7, #0
   19594:	add	r4, r4, #3
   19598:	mov	r5, #39	; 0x27
   1959c:	str	r3, [sp, #48]	; 0x30
   195a0:	str	r6, [sp, #68]	; 0x44
   195a4:	bne	19338 <__assert_fail@plt+0x7f68>
   195a8:	ldr	r2, [sp, #48]	; 0x30
   195ac:	eor	r3, r3, #1
   195b0:	add	r9, r9, #1
   195b4:	and	r3, r3, r2
   195b8:	uxtb	r3, r3
   195bc:	cmp	r3, #0
   195c0:	beq	193a8 <__assert_fail@plt+0x7fd8>
   195c4:	cmp	sl, r4
   195c8:	movhi	r3, #39	; 0x27
   195cc:	strbhi	r3, [r8, r4]
   195d0:	add	r3, r4, #1
   195d4:	add	r4, r4, #2
   195d8:	cmp	sl, r3
   195dc:	movhi	r2, #39	; 0x27
   195e0:	strbhi	r2, [r8, r3]
   195e4:	mov	r3, #0
   195e8:	str	r3, [sp, #48]	; 0x30
   195ec:	b	193a8 <__assert_fail@plt+0x7fd8>
   195f0:	mov	r3, #118	; 0x76
   195f4:	b	194cc <__assert_fail@plt+0x80fc>
   195f8:	mov	r3, #116	; 0x74
   195fc:	ldr	r2, [sp, #44]	; 0x2c
   19600:	cmp	fp, #2
   19604:	movne	r2, #0
   19608:	andeq	r2, r2, #1
   1960c:	cmp	r2, #0
   19610:	beq	194cc <__assert_fail@plt+0x80fc>
   19614:	mov	fp, r8
   19618:	mov	r8, #2
   1961c:	ldr	r3, [sp, #40]	; 0x28
   19620:	cmp	r3, #0
   19624:	movne	r8, #4
   19628:	mov	lr, #0
   1962c:	mov	r0, fp
   19630:	ldr	r2, [sp, #32]
   19634:	ldr	r3, [sp, #156]	; 0x9c
   19638:	ldr	r1, [sp, #164]	; 0xa4
   1963c:	bic	ip, r3, #2
   19640:	ldr	r3, [sp, #28]
   19644:	stm	sp, {r8, ip, lr}
   19648:	ldr	ip, [sp, #168]	; 0xa8
   1964c:	str	r1, [sp, #12]
   19650:	mov	r1, sl
   19654:	str	ip, [sp, #16]
   19658:	bl	18d70 <__assert_fail@plt+0x79a0>
   1965c:	mov	r4, r0
   19660:	mov	r0, r4
   19664:	add	sp, sp, #116	; 0x74
   19668:	ldrd	r4, [sp]
   1966c:	ldrd	r6, [sp, #8]
   19670:	ldrd	r8, [sp, #16]
   19674:	ldrd	sl, [sp, #24]
   19678:	add	sp, sp, #32
   1967c:	pop	{pc}		; (ldr pc, [sp], #4)
   19680:	mov	r5, #102	; 0x66
   19684:	ldr	r2, [sp, #44]	; 0x2c
   19688:	sub	r3, fp, #2
   1968c:	clz	r3, r3
   19690:	lsr	r3, r3, #5
   19694:	cmp	r2, #0
   19698:	bne	1a0f4 <__assert_fail@plt+0x8d24>
   1969c:	mov	r6, r2
   196a0:	b	19394 <__assert_fail@plt+0x7fc4>
   196a4:	mov	r5, #110	; 0x6e
   196a8:	mov	r6, #0
   196ac:	b	19338 <__assert_fail@plt+0x7f68>
   196b0:	mov	r5, #98	; 0x62
   196b4:	b	19684 <__assert_fail@plt+0x82b4>
   196b8:	mov	r5, #97	; 0x61
   196bc:	b	19684 <__assert_fail@plt+0x82b4>
   196c0:	mov	r7, #0
   196c4:	mov	r6, #0
   196c8:	b	194e8 <__assert_fail@plt+0x8118>
   196cc:	mov	r5, #114	; 0x72
   196d0:	b	196a8 <__assert_fail@plt+0x82d8>
   196d4:	ldr	r3, [sp, #44]	; 0x2c
   196d8:	cmp	r3, #0
   196dc:	bne	1a46c <__assert_fail@plt+0x909c>
   196e0:	mov	r7, r3
   196e4:	ldr	r3, [sp, #48]	; 0x30
   196e8:	sub	r2, fp, #2
   196ec:	clz	r2, r2
   196f0:	lsr	r2, r2, #5
   196f4:	eor	r3, r3, #1
   196f8:	ands	r3, r2, r3
   196fc:	beq	1a110 <__assert_fail@plt+0x8d40>
   19700:	cmp	sl, r4
   19704:	movhi	r1, #39	; 0x27
   19708:	strbhi	r1, [r8, r4]
   1970c:	add	r1, r4, #1
   19710:	cmp	sl, r1
   19714:	movhi	r0, #36	; 0x24
   19718:	strbhi	r0, [r8, r1]
   1971c:	add	r1, r4, #2
   19720:	cmp	sl, r1
   19724:	movhi	r0, #39	; 0x27
   19728:	strbhi	r0, [r8, r1]
   1972c:	add	r1, r4, #3
   19730:	cmp	sl, r1
   19734:	bls	1a168 <__assert_fail@plt+0x8d98>
   19738:	mov	r4, r1
   1973c:	mov	r1, #92	; 0x5c
   19740:	mov	r0, r4
   19744:	str	r3, [sp, #48]	; 0x30
   19748:	strb	r1, [r8, r4]
   1974c:	cmp	fp, #2
   19750:	add	r4, r4, #1
   19754:	beq	1a1b8 <__assert_fail@plt+0x8de8>
   19758:	ldr	r1, [sp, #28]
   1975c:	add	r3, r9, #1
   19760:	cmp	r3, r1
   19764:	bcs	1977c <__assert_fail@plt+0x83ac>
   19768:	ldr	r1, [sp, #32]
   1976c:	ldrb	r3, [r1, r3]
   19770:	sub	r3, r3, #48	; 0x30
   19774:	cmp	r3, #9
   19778:	bls	1a1d0 <__assert_fail@plt+0x8e00>
   1977c:	mov	r5, #48	; 0x30
   19780:	ldr	r3, [sp, #40]	; 0x28
   19784:	eor	r3, r3, #1
   19788:	orrs	r2, r2, r3
   1978c:	mov	r3, r6
   19790:	moveq	r6, r2
   19794:	beq	19308 <__assert_fail@plt+0x7f38>
   19798:	mov	r6, #0
   1979c:	b	19330 <__assert_fail@plt+0x7f60>
   197a0:	cmp	r9, #0
   197a4:	mov	r2, r7
   197a8:	bne	19d48 <__assert_fail@plt+0x8978>
   197ac:	mov	r6, r7
   197b0:	mov	r3, r9
   197b4:	mov	r7, r2
   197b8:	b	192f8 <__assert_fail@plt+0x7f28>
   197bc:	mov	r2, r7
   197c0:	mov	r6, r7
   197c4:	mov	r3, #0
   197c8:	mov	r7, r2
   197cc:	mov	r5, #32
   197d0:	b	192f8 <__assert_fail@plt+0x7f28>
   197d4:	mov	r6, r7
   197d8:	b	194e8 <__assert_fail@plt+0x8118>
   197dc:	mov	r7, #0
   197e0:	ldr	r3, [sp, #64]	; 0x40
   197e4:	cmp	r3, #1
   197e8:	bne	19e08 <__assert_fail@plt+0x8a38>
   197ec:	bl	1125c <__ctype_b_loc@plt>
   197f0:	ldr	r2, [r0]
   197f4:	sxth	r3, r5
   197f8:	lsl	r3, r3, #1
   197fc:	ldr	r1, [sp, #64]	; 0x40
   19800:	ldrh	r3, [r2, r3]
   19804:	mov	ip, r1
   19808:	and	r3, r3, #16384	; 0x4000
   1980c:	cmp	r3, #0
   19810:	ldr	r3, [sp, #40]	; 0x28
   19814:	movne	r6, #1
   19818:	moveq	r6, #0
   1981c:	movne	r2, #0
   19820:	andeq	r2, r3, #1
   19824:	cmp	r2, #0
   19828:	bne	1a150 <__assert_fail@plt+0x8d80>
   1982c:	sub	r3, fp, #2
   19830:	clz	r3, r3
   19834:	lsr	r3, r3, #5
   19838:	b	192f8 <__assert_fail@plt+0x7f28>
   1983c:	cmp	r4, #0
   19840:	bne	1a4e0 <__assert_fail@plt+0x9110>
   19844:	str	r4, [sp, #40]	; 0x28
   19848:	cmp	sl, #0
   1984c:	bne	1a510 <__assert_fail@plt+0x9140>
   19850:	mov	r3, #1
   19854:	movw	r2, #2728	; 0xaa8
   19858:	movt	r2, #2
   1985c:	mov	r4, r3
   19860:	mov	r8, #2
   19864:	str	r3, [sp, #36]	; 0x24
   19868:	str	sl, [sp, #44]	; 0x2c
   1986c:	str	sl, [sp, #48]	; 0x30
   19870:	str	r3, [sp, #56]	; 0x38
   19874:	str	r2, [sp, #60]	; 0x3c
   19878:	str	sl, [sp, #68]	; 0x44
   1987c:	str	sl, [sp, #72]	; 0x48
   19880:	b	18e58 <__assert_fail@plt+0x7a88>
   19884:	ldr	r3, [sp, #32]
   19888:	ldrb	r5, [r3, r9]
   1988c:	cmp	r5, #126	; 0x7e
   19890:	ldrls	pc, [pc, r5, lsl #2]
   19894:	b	197e0 <__assert_fail@plt+0x8410>
   19898:			; <UNDEFINED> instruction: 0x00019abc
   1989c:	andeq	r9, r1, r0, ror #15
   198a0:	andeq	r9, r1, r0, ror #15
   198a4:	andeq	r9, r1, r0, ror #15
   198a8:	andeq	r9, r1, r0, ror #15
   198ac:	andeq	r9, r1, r0, ror #15
   198b0:	andeq	r9, r1, r0, ror #15
   198b4:			; <UNDEFINED> instruction: 0x00019ab4
   198b8:	andeq	r9, r1, ip, lsr #21
   198bc:	strdeq	r9, [r1], -r8
   198c0:	andeq	r9, r1, r4, lsr #21
   198c4:	strdeq	r9, [r1], -r0
   198c8:	muleq	r1, ip, sl
   198cc:	muleq	r1, r4, sl
   198d0:	andeq	r9, r1, r0, ror #15
   198d4:	andeq	r9, r1, r0, ror #15
   198d8:	andeq	r9, r1, r0, ror #15
   198dc:	andeq	r9, r1, r0, ror #15
   198e0:	andeq	r9, r1, r0, ror #15
   198e4:	andeq	r9, r1, r0, ror #15
   198e8:	andeq	r9, r1, r0, ror #15
   198ec:	andeq	r9, r1, r0, ror #15
   198f0:	andeq	r9, r1, r0, ror #15
   198f4:	andeq	r9, r1, r0, ror #15
   198f8:	andeq	r9, r1, r0, ror #15
   198fc:	andeq	r9, r1, r0, ror #15
   19900:	andeq	r9, r1, r0, ror #15
   19904:	andeq	r9, r1, r0, ror #15
   19908:	andeq	r9, r1, r0, ror #15
   1990c:	andeq	r9, r1, r0, ror #15
   19910:	andeq	r9, r1, r0, ror #15
   19914:	andeq	r9, r1, r0, ror #15
   19918:	andeq	r9, r1, r0, lsl fp
   1991c:	strdeq	r9, [r1], -r0
   19920:	strdeq	r9, [r1], -r0
   19924:	andeq	r9, r1, r0, ror #21
   19928:	strdeq	r9, [r1], -r0
   1992c:	andeq	r9, r1, ip, lsr #16
   19930:	strdeq	r9, [r1], -r0
   19934:	andeq	r9, r1, r0, lsr #10
   19938:	strdeq	r9, [r1], -r0
   1993c:	strdeq	r9, [r1], -r0
   19940:	strdeq	r9, [r1], -r0
   19944:	andeq	r9, r1, ip, lsr #16
   19948:	andeq	r9, r1, ip, lsr #16
   1994c:	andeq	r9, r1, ip, lsr #16
   19950:	andeq	r9, r1, ip, lsr #16
   19954:	andeq	r9, r1, ip, lsr #16
   19958:	andeq	r9, r1, ip, lsr #16
   1995c:	andeq	r9, r1, ip, lsr #16
   19960:	andeq	r9, r1, ip, lsr #16
   19964:	andeq	r9, r1, ip, lsr #16
   19968:	andeq	r9, r1, ip, lsr #16
   1996c:	andeq	r9, r1, ip, lsr #16
   19970:	andeq	r9, r1, ip, lsr #16
   19974:	andeq	r9, r1, ip, lsr #16
   19978:	andeq	r9, r1, ip, lsr #16
   1997c:	andeq	r9, r1, ip, lsr #16
   19980:	andeq	r9, r1, ip, lsr #16
   19984:	strdeq	r9, [r1], -r0
   19988:	strdeq	r9, [r1], -r0
   1998c:	strdeq	r9, [r1], -r0
   19990:	strdeq	r9, [r1], -r0
   19994:	strdeq	r9, [r1], -r4
   19998:	andeq	r9, r1, r0, ror #15
   1999c:	andeq	r9, r1, ip, lsr #16
   199a0:	andeq	r9, r1, ip, lsr #16
   199a4:	andeq	r9, r1, ip, lsr #16
   199a8:	andeq	r9, r1, ip, lsr #16
   199ac:	andeq	r9, r1, ip, lsr #16
   199b0:	andeq	r9, r1, ip, lsr #16
   199b4:	andeq	r9, r1, ip, lsr #16
   199b8:	andeq	r9, r1, ip, lsr #16
   199bc:	andeq	r9, r1, ip, lsr #16
   199c0:	andeq	r9, r1, ip, lsr #16
   199c4:	andeq	r9, r1, ip, lsr #16
   199c8:	andeq	r9, r1, ip, lsr #16
   199cc:	andeq	r9, r1, ip, lsr #16
   199d0:	andeq	r9, r1, ip, lsr #16
   199d4:	andeq	r9, r1, ip, lsr #16
   199d8:	andeq	r9, r1, ip, lsr #16
   199dc:	andeq	r9, r1, ip, lsr #16
   199e0:	andeq	r9, r1, ip, lsr #16
   199e4:	andeq	r9, r1, ip, lsr #16
   199e8:	andeq	r9, r1, ip, lsr #16
   199ec:	andeq	r9, r1, ip, lsr #16
   199f0:	andeq	r9, r1, ip, lsr #16
   199f4:	andeq	r9, r1, ip, lsr #16
   199f8:	andeq	r9, r1, ip, lsr #16
   199fc:	andeq	r9, r1, ip, lsr #16
   19a00:	andeq	r9, r1, ip, lsr #16
   19a04:	strdeq	r9, [r1], -r0
   19a08:	muleq	r1, ip, r4
   19a0c:	andeq	r9, r1, ip, lsr #16
   19a10:	strdeq	r9, [r1], -r0
   19a14:	andeq	r9, r1, ip, lsr #16
   19a18:	strdeq	r9, [r1], -r0
   19a1c:	andeq	r9, r1, ip, lsr #16
   19a20:	andeq	r9, r1, ip, lsr #16
   19a24:	andeq	r9, r1, ip, lsr #16
   19a28:	andeq	r9, r1, ip, lsr #16
   19a2c:	andeq	r9, r1, ip, lsr #16
   19a30:	andeq	r9, r1, ip, lsr #16
   19a34:	andeq	r9, r1, ip, lsr #16
   19a38:	andeq	r9, r1, ip, lsr #16
   19a3c:	andeq	r9, r1, ip, lsr #16
   19a40:	andeq	r9, r1, ip, lsr #16
   19a44:	andeq	r9, r1, ip, lsr #16
   19a48:	andeq	r9, r1, ip, lsr #16
   19a4c:	andeq	r9, r1, ip, lsr #16
   19a50:	andeq	r9, r1, ip, lsr #16
   19a54:	andeq	r9, r1, ip, lsr #16
   19a58:	andeq	r9, r1, ip, lsr #16
   19a5c:	andeq	r9, r1, ip, lsr #16
   19a60:	andeq	r9, r1, ip, lsr #16
   19a64:	andeq	r9, r1, ip, lsr #16
   19a68:	andeq	r9, r1, ip, lsr #16
   19a6c:	andeq	r9, r1, ip, lsr #16
   19a70:	andeq	r9, r1, ip, lsr #16
   19a74:	andeq	r9, r1, ip, lsr #16
   19a78:	andeq	r9, r1, ip, lsr #16
   19a7c:	andeq	r9, r1, ip, lsr #16
   19a80:	andeq	r9, r1, ip, lsr #16
   19a84:	andeq	r9, r1, r0, asr #5
   19a88:	strdeq	r9, [r1], -r0
   19a8c:	andeq	r9, r1, r0, asr #5
   19a90:	andeq	r9, r1, r0, ror #21
   19a94:	mov	r3, #114	; 0x72
   19a98:	b	195fc <__assert_fail@plt+0x822c>
   19a9c:	mov	r3, #102	; 0x66
   19aa0:	b	194cc <__assert_fail@plt+0x80fc>
   19aa4:	mov	r3, #110	; 0x6e
   19aa8:	b	195fc <__assert_fail@plt+0x822c>
   19aac:	mov	r3, #98	; 0x62
   19ab0:	b	194cc <__assert_fail@plt+0x80fc>
   19ab4:	mov	r3, #97	; 0x61
   19ab8:	b	194cc <__assert_fail@plt+0x80fc>
   19abc:	ldr	r3, [sp, #40]	; 0x28
   19ac0:	cmp	r3, #0
   19ac4:	bne	196d4 <__assert_fail@plt+0x8304>
   19ac8:	ldr	r3, [sp, #156]	; 0x9c
   19acc:	tst	r3, #1
   19ad0:	addne	r9, r9, #1
   19ad4:	bne	18e68 <__assert_fail@plt+0x7a98>
   19ad8:	ldr	r7, [sp, #40]	; 0x28
   19adc:	b	194d8 <__assert_fail@plt+0x8108>
   19ae0:	sub	r3, fp, #2
   19ae4:	clz	r3, r3
   19ae8:	lsr	r3, r3, #5
   19aec:	b	192ec <__assert_fail@plt+0x7f1c>
   19af0:	sub	r3, fp, #2
   19af4:	mov	r6, #0
   19af8:	clz	r3, r3
   19afc:	lsr	r3, r3, #5
   19b00:	ldr	r2, [sp, #44]	; 0x2c
   19b04:	tst	r2, r3
   19b08:	beq	192f8 <__assert_fail@plt+0x7f28>
   19b0c:	b	19614 <__assert_fail@plt+0x8244>
   19b10:	sub	r3, fp, #2
   19b14:	clz	r3, r3
   19b18:	lsr	r3, r3, #5
   19b1c:	b	19b00 <__assert_fail@plt+0x8730>
   19b20:	ldr	r3, [sp, #52]	; 0x34
   19b24:	ldrb	r5, [r3]
   19b28:	cmp	r5, #126	; 0x7e
   19b2c:	ldrls	pc, [pc, r5, lsl #2]
   19b30:	b	197dc <__assert_fail@plt+0x840c>
   19b34:	ldrdeq	r9, [r1], -r4
   19b38:	ldrdeq	r9, [r1], -ip
   19b3c:	ldrdeq	r9, [r1], -ip
   19b40:	ldrdeq	r9, [r1], -ip
   19b44:	ldrdeq	r9, [r1], -ip
   19b48:	ldrdeq	r9, [r1], -ip
   19b4c:	ldrdeq	r9, [r1], -ip
   19b50:			; <UNDEFINED> instruction: 0x000196b8
   19b54:			; <UNDEFINED> instruction: 0x000196b0
   19b58:	andeq	r9, r1, ip, ror #26
   19b5c:	andeq	r9, r1, r4, lsr #13
   19b60:	andeq	r9, r1, r0, ror #26
   19b64:	andeq	r9, r1, r0, lsl #13
   19b68:	andeq	r9, r1, ip, asr #13
   19b6c:	ldrdeq	r9, [r1], -ip
   19b70:	ldrdeq	r9, [r1], -ip
   19b74:	ldrdeq	r9, [r1], -ip
   19b78:	ldrdeq	r9, [r1], -ip
   19b7c:	ldrdeq	r9, [r1], -ip
   19b80:	ldrdeq	r9, [r1], -ip
   19b84:	ldrdeq	r9, [r1], -ip
   19b88:	ldrdeq	r9, [r1], -ip
   19b8c:	ldrdeq	r9, [r1], -ip
   19b90:	ldrdeq	r9, [r1], -ip
   19b94:	ldrdeq	r9, [r1], -ip
   19b98:	ldrdeq	r9, [r1], -ip
   19b9c:	ldrdeq	r9, [r1], -ip
   19ba0:	ldrdeq	r9, [r1], -ip
   19ba4:	ldrdeq	r9, [r1], -ip
   19ba8:	ldrdeq	r9, [r1], -ip
   19bac:	ldrdeq	r9, [r1], -ip
   19bb0:	ldrdeq	r9, [r1], -ip
   19bb4:	andeq	r9, r1, r8, asr sp
   19bb8:	andeq	r9, r1, r0, asr #13
   19bbc:	andeq	r9, r1, r0, asr #13
   19bc0:	andeq	r9, r1, ip, lsr sp
   19bc4:	andeq	r9, r1, r0, asr #13
   19bc8:	andeq	r9, r1, r0, lsr sp
   19bcc:	andeq	r9, r1, r0, asr #13
   19bd0:	andeq	r9, r1, ip, lsl r5
   19bd4:	andeq	r9, r1, r0, asr #13
   19bd8:	andeq	r9, r1, r0, asr #13
   19bdc:	andeq	r9, r1, r0, asr #13
   19be0:	andeq	r9, r1, r0, lsr sp
   19be4:	andeq	r9, r1, r0, lsr sp
   19be8:	andeq	r9, r1, r0, lsr sp
   19bec:	andeq	r9, r1, r0, lsr sp
   19bf0:	andeq	r9, r1, r0, lsr sp
   19bf4:	andeq	r9, r1, r0, lsr sp
   19bf8:	andeq	r9, r1, r0, lsr sp
   19bfc:	andeq	r9, r1, r0, lsr sp
   19c00:	andeq	r9, r1, r0, lsr sp
   19c04:	andeq	r9, r1, r0, lsr sp
   19c08:	andeq	r9, r1, r0, lsr sp
   19c0c:	andeq	r9, r1, r0, lsr sp
   19c10:	andeq	r9, r1, r0, lsr sp
   19c14:	andeq	r9, r1, r0, lsr sp
   19c18:	andeq	r9, r1, r0, lsr sp
   19c1c:	andeq	r9, r1, r0, lsr sp
   19c20:	andeq	r9, r1, r0, asr #13
   19c24:	andeq	r9, r1, r0, asr #13
   19c28:	andeq	r9, r1, r0, asr #13
   19c2c:	andeq	r9, r1, r0, asr #13
   19c30:	strdeq	r9, [r1], -r0
   19c34:	ldrdeq	r9, [r1], -ip
   19c38:	andeq	r9, r1, r0, lsr sp
   19c3c:	andeq	r9, r1, r0, lsr sp
   19c40:	andeq	r9, r1, r0, lsr sp
   19c44:	andeq	r9, r1, r0, lsr sp
   19c48:	andeq	r9, r1, r0, lsr sp
   19c4c:	andeq	r9, r1, r0, lsr sp
   19c50:	andeq	r9, r1, r0, lsr sp
   19c54:	andeq	r9, r1, r0, lsr sp
   19c58:	andeq	r9, r1, r0, lsr sp
   19c5c:	andeq	r9, r1, r0, lsr sp
   19c60:	andeq	r9, r1, r0, lsr sp
   19c64:	andeq	r9, r1, r0, lsr sp
   19c68:	andeq	r9, r1, r0, lsr sp
   19c6c:	andeq	r9, r1, r0, lsr sp
   19c70:	andeq	r9, r1, r0, lsr sp
   19c74:	andeq	r9, r1, r0, lsr sp
   19c78:	andeq	r9, r1, r0, lsr sp
   19c7c:	andeq	r9, r1, r0, lsr sp
   19c80:	andeq	r9, r1, r0, lsr sp
   19c84:	andeq	r9, r1, r0, lsr sp
   19c88:	andeq	r9, r1, r0, lsr sp
   19c8c:	andeq	r9, r1, r0, lsr sp
   19c90:	andeq	r9, r1, r0, lsr sp
   19c94:	andeq	r9, r1, r0, lsr sp
   19c98:	andeq	r9, r1, r0, lsr sp
   19c9c:	andeq	r9, r1, r0, lsr sp
   19ca0:	andeq	r9, r1, r0, asr #13
   19ca4:	muleq	r1, r8, r4
   19ca8:	andeq	r9, r1, r0, lsr sp
   19cac:	andeq	r9, r1, r0, asr #13
   19cb0:	andeq	r9, r1, r0, lsr sp
   19cb4:	andeq	r9, r1, r0, asr #13
   19cb8:	andeq	r9, r1, r0, lsr sp
   19cbc:	andeq	r9, r1, r0, lsr sp
   19cc0:	andeq	r9, r1, r0, lsr sp
   19cc4:	andeq	r9, r1, r0, lsr sp
   19cc8:	andeq	r9, r1, r0, lsr sp
   19ccc:	andeq	r9, r1, r0, lsr sp
   19cd0:	andeq	r9, r1, r0, lsr sp
   19cd4:	andeq	r9, r1, r0, lsr sp
   19cd8:	andeq	r9, r1, r0, lsr sp
   19cdc:	andeq	r9, r1, r0, lsr sp
   19ce0:	andeq	r9, r1, r0, lsr sp
   19ce4:	andeq	r9, r1, r0, lsr sp
   19ce8:	andeq	r9, r1, r0, lsr sp
   19cec:	andeq	r9, r1, r0, lsr sp
   19cf0:	andeq	r9, r1, r0, lsr sp
   19cf4:	andeq	r9, r1, r0, lsr sp
   19cf8:	andeq	r9, r1, r0, lsr sp
   19cfc:	andeq	r9, r1, r0, lsr sp
   19d00:	andeq	r9, r1, r0, lsr sp
   19d04:	andeq	r9, r1, r0, lsr sp
   19d08:	andeq	r9, r1, r0, lsr sp
   19d0c:	andeq	r9, r1, r0, lsr sp
   19d10:	andeq	r9, r1, r0, lsr sp
   19d14:	andeq	r9, r1, r0, lsr sp
   19d18:	andeq	r9, r1, r0, lsr sp
   19d1c:	andeq	r9, r1, r0, lsr sp
   19d20:			; <UNDEFINED> instruction: 0x000192bc
   19d24:	andeq	r9, r1, r0, asr #13
   19d28:			; <UNDEFINED> instruction: 0x000192bc
   19d2c:	andeq	r9, r1, ip, lsr sp
   19d30:	mov	r6, r7
   19d34:	mov	r7, #0
   19d38:	b	194e8 <__assert_fail@plt+0x8118>
   19d3c:	cmp	r9, #0
   19d40:	mov	r2, #0
   19d44:	beq	197ac <__assert_fail@plt+0x83dc>
   19d48:	mov	r6, #0
   19d4c:	mov	r7, r2
   19d50:	mov	r3, r6
   19d54:	b	19308 <__assert_fail@plt+0x7f38>
   19d58:	mov	r2, #0
   19d5c:	b	197c0 <__assert_fail@plt+0x83f0>
   19d60:	mov	r7, #0
   19d64:	mov	r3, #118	; 0x76
   19d68:	b	194cc <__assert_fail@plt+0x80fc>
   19d6c:	mov	r7, #0
   19d70:	mov	r3, #116	; 0x74
   19d74:	b	195fc <__assert_fail@plt+0x822c>
   19d78:	ldr	r3, [sp, #44]	; 0x2c
   19d7c:	b	19330 <__assert_fail@plt+0x7f60>
   19d80:	ldr	r3, [sp, #44]	; 0x2c
   19d84:	cmp	r3, #0
   19d88:	bne	1a1f8 <__assert_fail@plt+0x8e28>
   19d8c:	add	r9, r9, #1
   19d90:	mov	r6, #0
   19d94:	ldr	r3, [sp, #48]	; 0x30
   19d98:	mov	r5, #92	; 0x5c
   19d9c:	b	195bc <__assert_fail@plt+0x81ec>
   19da0:	ldr	r3, [sp, #32]
   19da4:	ldrb	r2, [r3, #1]
   19da8:	adds	r2, r2, #0
   19dac:	movne	r2, #1
   19db0:	b	192d8 <__assert_fail@plt+0x7f08>
   19db4:	ldr	r3, [sp, #156]	; 0x9c
   19db8:	ands	r3, r3, #4
   19dbc:	beq	19de4 <__assert_fail@plt+0x8a14>
   19dc0:	ldr	r2, [sp, #28]
   19dc4:	add	r3, r9, #2
   19dc8:	cmp	r3, r2
   19dcc:	bcs	19de0 <__assert_fail@plt+0x8a10>
   19dd0:	ldr	r2, [sp, #52]	; 0x34
   19dd4:	ldrb	r5, [r2, #1]
   19dd8:	cmp	r5, #63	; 0x3f
   19ddc:	beq	1a25c <__assert_fail@plt+0x8e8c>
   19de0:	mov	r3, #0
   19de4:	mov	r5, #63	; 0x3f
   19de8:	mov	r6, r3
   19dec:	b	192f8 <__assert_fail@plt+0x7f28>
   19df0:	ldr	r3, [sp, #44]	; 0x2c
   19df4:	cmp	r3, #0
   19df8:	bne	1a1f8 <__assert_fail@plt+0x8e28>
   19dfc:	mov	r6, r3
   19e00:	mov	r5, #63	; 0x3f
   19e04:	b	19330 <__assert_fail@plt+0x7f60>
   19e08:	ldr	r1, [sp, #28]
   19e0c:	mov	r2, #0
   19e10:	mov	r3, #0
   19e14:	strd	r2, [sp, #104]	; 0x68
   19e18:	cmn	r1, #1
   19e1c:	bne	19e2c <__assert_fail@plt+0x8a5c>
   19e20:	ldr	r0, [sp, #32]
   19e24:	bl	11274 <strlen@plt>
   19e28:	str	r0, [sp, #28]
   19e2c:	str	r8, [sp, #76]	; 0x4c
   19e30:	mov	r3, #0
   19e34:	str	sl, [sp, #80]	; 0x50
   19e38:	ldr	sl, [sp, #32]
   19e3c:	str	r5, [sp, #84]	; 0x54
   19e40:	mov	r5, r3
   19e44:	ldr	r8, [sp, #44]	; 0x2c
   19e48:	str	r7, [sp, #88]	; 0x58
   19e4c:	str	r4, [sp, #92]	; 0x5c
   19e50:	ldr	r2, [sp, #28]
   19e54:	add	r4, r9, r5
   19e58:	add	r3, sp, #104	; 0x68
   19e5c:	add	r7, sl, r4
   19e60:	add	r0, sp, #100	; 0x64
   19e64:	mov	r1, r7
   19e68:	sub	r2, r2, r4
   19e6c:	bl	1c1a8 <__assert_fail@plt+0xadd8>
   19e70:	subs	r1, r0, #0
   19e74:	beq	19ec0 <__assert_fail@plt+0x8af0>
   19e78:	cmn	r1, #1
   19e7c:	beq	1a238 <__assert_fail@plt+0x8e68>
   19e80:	cmn	r1, #2
   19e84:	beq	1a358 <__assert_fail@plt+0x8f88>
   19e88:	cmp	fp, #2
   19e8c:	movne	r3, #0
   19e90:	andeq	r3, r8, #1
   19e94:	cmp	r3, #0
   19e98:	bne	1a024 <__assert_fail@plt+0x8c54>
   19e9c:	ldr	r0, [sp, #100]	; 0x64
   19ea0:	add	r5, r5, r1
   19ea4:	bl	1116c <iswprint@plt>
   19ea8:	cmp	r0, #0
   19eac:	add	r0, sp, #104	; 0x68
   19eb0:	moveq	r6, #0
   19eb4:	bl	11100 <mbsinit@plt>
   19eb8:	cmp	r0, #0
   19ebc:	beq	19e50 <__assert_fail@plt+0x8a80>
   19ec0:	ldr	r3, [sp, #40]	; 0x28
   19ec4:	mov	ip, r5
   19ec8:	eor	r2, r6, #1
   19ecc:	ldr	r8, [sp, #76]	; 0x4c
   19ed0:	ldr	sl, [sp, #80]	; 0x50
   19ed4:	and	r2, r2, r3
   19ed8:	ldr	r5, [sp, #84]	; 0x54
   19edc:	ldr	r7, [sp, #88]	; 0x58
   19ee0:	ldr	r4, [sp, #92]	; 0x5c
   19ee4:	cmp	ip, #1
   19ee8:	bls	19824 <__assert_fail@plt+0x8454>
   19eec:	add	r1, ip, r9
   19ef0:	mov	r0, #39	; 0x27
   19ef4:	ldr	lr, [sp, #52]	; 0x34
   19ef8:	mov	ip, #0
   19efc:	str	r6, [sp, #52]	; 0x34
   19f00:	ldr	r6, [sp, #48]	; 0x30
   19f04:	b	19fc0 <__assert_fail@plt+0x8bf0>
   19f08:	ldr	ip, [sp, #44]	; 0x2c
   19f0c:	sub	r3, fp, #2
   19f10:	clz	r3, r3
   19f14:	lsr	r3, r3, #5
   19f18:	cmp	ip, #0
   19f1c:	bne	1a130 <__assert_fail@plt+0x8d60>
   19f20:	eor	ip, r6, #1
   19f24:	ands	r3, r3, ip
   19f28:	beq	19f58 <__assert_fail@plt+0x8b88>
   19f2c:	cmp	sl, r4
   19f30:	add	ip, r4, #1
   19f34:	strbhi	r0, [r8, r4]
   19f38:	cmp	sl, ip
   19f3c:	movhi	r6, #36	; 0x24
   19f40:	strbhi	r6, [r8, ip]
   19f44:	add	ip, r4, #2
   19f48:	mov	r6, r3
   19f4c:	cmp	sl, ip
   19f50:	add	r4, r4, #3
   19f54:	strbhi	r0, [r8, ip]
   19f58:	cmp	sl, r4
   19f5c:	movhi	r3, #92	; 0x5c
   19f60:	strbhi	r3, [r8, r4]
   19f64:	add	r3, r4, #1
   19f68:	cmp	sl, r3
   19f6c:	bls	19f7c <__assert_fail@plt+0x8bac>
   19f70:	lsr	ip, r5, #6
   19f74:	add	ip, ip, #48	; 0x30
   19f78:	strb	ip, [r8, r3]
   19f7c:	add	r3, r4, #2
   19f80:	cmp	sl, r3
   19f84:	bls	19f94 <__assert_fail@plt+0x8bc4>
   19f88:	ubfx	ip, r5, #3, #3
   19f8c:	add	ip, ip, #48	; 0x30
   19f90:	strb	ip, [r8, r3]
   19f94:	add	r9, r9, #1
   19f98:	and	r5, r5, #7
   19f9c:	cmp	r9, r1
   19fa0:	add	r5, r5, #48	; 0x30
   19fa4:	add	r4, r4, #3
   19fa8:	bcs	1a15c <__assert_fail@plt+0x8d8c>
   19fac:	mov	ip, r2
   19fb0:	cmp	sl, r4
   19fb4:	strbhi	r5, [r8, r4]
   19fb8:	add	r4, r4, #1
   19fbc:	ldrb	r5, [lr, #1]!
   19fc0:	cmp	r2, #0
   19fc4:	bne	19f08 <__assert_fail@plt+0x8b38>
   19fc8:	eor	r3, ip, #1
   19fcc:	cmp	r7, #0
   19fd0:	and	r3, r3, r6
   19fd4:	uxtb	r3, r3
   19fd8:	beq	19fec <__assert_fail@plt+0x8c1c>
   19fdc:	cmp	sl, r4
   19fe0:	movhi	r7, #92	; 0x5c
   19fe4:	strbhi	r7, [r8, r4]
   19fe8:	add	r4, r4, #1
   19fec:	add	r9, r9, #1
   19ff0:	cmp	r9, r1
   19ff4:	bcs	1a144 <__assert_fail@plt+0x8d74>
   19ff8:	cmp	r3, #0
   19ffc:	beq	1a17c <__assert_fail@plt+0x8dac>
   1a000:	cmp	sl, r4
   1a004:	add	r3, r4, #1
   1a008:	mov	r7, #0
   1a00c:	strbhi	r0, [r8, r4]
   1a010:	cmp	sl, r3
   1a014:	add	r4, r4, #2
   1a018:	mov	r6, r7
   1a01c:	strbhi	r0, [r8, r3]
   1a020:	b	19fb0 <__assert_fail@plt+0x8be0>
   1a024:	cmp	r1, #1
   1a028:	beq	19e9c <__assert_fail@plt+0x8acc>
   1a02c:	add	r2, r4, #1
   1a030:	add	r3, sl, r1
   1a034:	add	r2, sl, r2
   1a038:	add	r4, r3, r4
   1a03c:	ldrb	r3, [r2], #1
   1a040:	sub	r3, r3, #91	; 0x5b
   1a044:	cmp	r3, #33	; 0x21
   1a048:	ldrls	pc, [pc, r3, lsl #2]
   1a04c:	b	1a0d8 <__assert_fail@plt+0x8d08>
   1a050:	andeq	sl, r1, r4, ror #1
   1a054:	andeq	sl, r1, r4, ror #1
   1a058:	ldrdeq	sl, [r1], -r8
   1a05c:	andeq	sl, r1, r4, ror #1
   1a060:	ldrdeq	sl, [r1], -r8
   1a064:	andeq	sl, r1, r4, ror #1
   1a068:	ldrdeq	sl, [r1], -r8
   1a06c:	ldrdeq	sl, [r1], -r8
   1a070:	ldrdeq	sl, [r1], -r8
   1a074:	ldrdeq	sl, [r1], -r8
   1a078:	ldrdeq	sl, [r1], -r8
   1a07c:	ldrdeq	sl, [r1], -r8
   1a080:	ldrdeq	sl, [r1], -r8
   1a084:	ldrdeq	sl, [r1], -r8
   1a088:	ldrdeq	sl, [r1], -r8
   1a08c:	ldrdeq	sl, [r1], -r8
   1a090:	ldrdeq	sl, [r1], -r8
   1a094:	ldrdeq	sl, [r1], -r8
   1a098:	ldrdeq	sl, [r1], -r8
   1a09c:	ldrdeq	sl, [r1], -r8
   1a0a0:	ldrdeq	sl, [r1], -r8
   1a0a4:	ldrdeq	sl, [r1], -r8
   1a0a8:	ldrdeq	sl, [r1], -r8
   1a0ac:	ldrdeq	sl, [r1], -r8
   1a0b0:	ldrdeq	sl, [r1], -r8
   1a0b4:	ldrdeq	sl, [r1], -r8
   1a0b8:	ldrdeq	sl, [r1], -r8
   1a0bc:	ldrdeq	sl, [r1], -r8
   1a0c0:	ldrdeq	sl, [r1], -r8
   1a0c4:	ldrdeq	sl, [r1], -r8
   1a0c8:	ldrdeq	sl, [r1], -r8
   1a0cc:	ldrdeq	sl, [r1], -r8
   1a0d0:	ldrdeq	sl, [r1], -r8
   1a0d4:	andeq	sl, r1, r4, ror #1
   1a0d8:	cmp	r4, r2
   1a0dc:	bne	1a03c <__assert_fail@plt+0x8c6c>
   1a0e0:	b	19e9c <__assert_fail@plt+0x8acc>
   1a0e4:	mov	r8, #2
   1a0e8:	ldr	fp, [sp, #76]	; 0x4c
   1a0ec:	ldr	sl, [sp, #80]	; 0x50
   1a0f0:	b	1961c <__assert_fail@plt+0x824c>
   1a0f4:	ldr	r2, [sp, #40]	; 0x28
   1a0f8:	str	fp, [sp, #152]	; 0x98
   1a0fc:	mov	fp, r8
   1a100:	ldr	r8, [sp, #152]	; 0x98
   1a104:	and	r2, r2, r3
   1a108:	str	r2, [sp, #40]	; 0x28
   1a10c:	b	1961c <__assert_fail@plt+0x824c>
   1a110:	cmp	sl, r4
   1a114:	movls	r0, r4
   1a118:	bls	1974c <__assert_fail@plt+0x837c>
   1a11c:	ldr	r3, [sp, #48]	; 0x30
   1a120:	b	1973c <__assert_fail@plt+0x836c>
   1a124:	str	sl, [sp, #72]	; 0x48
   1a128:	ldr	sl, [sp, #44]	; 0x2c
   1a12c:	b	1958c <__assert_fail@plt+0x81bc>
   1a130:	str	r3, [sp, #40]	; 0x28
   1a134:	str	fp, [sp, #152]	; 0x98
   1a138:	mov	fp, r8
   1a13c:	ldr	r8, [sp, #152]	; 0x98
   1a140:	b	1961c <__assert_fail@plt+0x824c>
   1a144:	str	r6, [sp, #48]	; 0x30
   1a148:	ldr	r6, [sp, #52]	; 0x34
   1a14c:	b	195bc <__assert_fail@plt+0x81ec>
   1a150:	mov	r6, #0
   1a154:	ldr	r2, [sp, #40]	; 0x28
   1a158:	b	19eec <__assert_fail@plt+0x8b1c>
   1a15c:	str	r6, [sp, #48]	; 0x30
   1a160:	ldr	r6, [sp, #52]	; 0x34
   1a164:	b	193a8 <__assert_fail@plt+0x7fd8>
   1a168:	add	r4, r4, #4
   1a16c:	mov	r6, #0
   1a170:	str	r3, [sp, #48]	; 0x30
   1a174:	mov	r5, #48	; 0x30
   1a178:	b	19330 <__assert_fail@plt+0x7f60>
   1a17c:	mov	r7, r3
   1a180:	b	19fb0 <__assert_fail@plt+0x8be0>
   1a184:	mov	r3, #1
   1a188:	movw	r2, #2708	; 0xa94
   1a18c:	movt	r2, #2
   1a190:	mov	r4, r3
   1a194:	str	r3, [sp, #36]	; 0x24
   1a198:	str	r3, [sp, #40]	; 0x28
   1a19c:	str	sl, [sp, #44]	; 0x2c
   1a1a0:	str	sl, [sp, #48]	; 0x30
   1a1a4:	str	r3, [sp, #56]	; 0x38
   1a1a8:	str	r2, [sp, #60]	; 0x3c
   1a1ac:	str	sl, [sp, #68]	; 0x44
   1a1b0:	str	sl, [sp, #72]	; 0x48
   1a1b4:	b	18e58 <__assert_fail@plt+0x7a88>
   1a1b8:	mov	r3, r6
   1a1bc:	mov	r5, #48	; 0x30
   1a1c0:	mov	r6, #0
   1a1c4:	b	19330 <__assert_fail@plt+0x7f60>
   1a1c8:	mov	r5, r3
   1a1cc:	b	196a8 <__assert_fail@plt+0x82d8>
   1a1d0:	cmp	sl, r4
   1a1d4:	mov	r5, #48	; 0x30
   1a1d8:	movhi	r3, #48	; 0x30
   1a1dc:	strbhi	r3, [r8, r4]
   1a1e0:	add	r3, r0, #2
   1a1e4:	add	r4, r0, #3
   1a1e8:	cmp	sl, r3
   1a1ec:	movhi	r1, #48	; 0x30
   1a1f0:	strbhi	r1, [r8, r3]
   1a1f4:	b	19780 <__assert_fail@plt+0x83b0>
   1a1f8:	str	fp, [sp, #152]	; 0x98
   1a1fc:	mov	fp, r8
   1a200:	ldr	r8, [sp, #152]	; 0x98
   1a204:	b	1961c <__assert_fail@plt+0x824c>
   1a208:	ldr	r3, [sp, #164]	; 0xa4
   1a20c:	ldrb	r3, [r3]
   1a210:	cmp	r3, #0
   1a214:	beq	18e28 <__assert_fail@plt+0x7a58>
   1a218:	ldr	r2, [sp, #164]	; 0xa4
   1a21c:	cmp	sl, r4
   1a220:	strbhi	r3, [fp, r4]
   1a224:	add	r4, r4, #1
   1a228:	ldrb	r3, [r2, #1]!
   1a22c:	cmp	r3, #0
   1a230:	bne	1a21c <__assert_fail@plt+0x8e4c>
   1a234:	b	18e28 <__assert_fail@plt+0x7a58>
   1a238:	mov	ip, r5
   1a23c:	mov	r6, #0
   1a240:	ldr	r2, [sp, #40]	; 0x28
   1a244:	ldr	r8, [sp, #76]	; 0x4c
   1a248:	ldr	sl, [sp, #80]	; 0x50
   1a24c:	ldr	r5, [sp, #84]	; 0x54
   1a250:	ldr	r7, [sp, #88]	; 0x58
   1a254:	ldr	r4, [sp, #92]	; 0x5c
   1a258:	b	19ee4 <__assert_fail@plt+0x8b14>
   1a25c:	ldr	r2, [sp, #32]
   1a260:	ldrb	r1, [r2, r3]
   1a264:	sub	r2, r1, #33	; 0x21
   1a268:	cmp	r2, #29
   1a26c:	ldrls	pc, [pc, r2, lsl #2]
   1a270:	b	1a34c <__assert_fail@plt+0x8f7c>
   1a274:	andeq	sl, r1, ip, ror #5
   1a278:	andeq	sl, r1, ip, asr #6
   1a27c:	andeq	sl, r1, ip, asr #6
   1a280:	andeq	sl, r1, ip, asr #6
   1a284:	andeq	sl, r1, ip, asr #6
   1a288:	andeq	sl, r1, ip, asr #6
   1a28c:	andeq	sl, r1, ip, ror #5
   1a290:	andeq	sl, r1, ip, ror #5
   1a294:	andeq	sl, r1, ip, ror #5
   1a298:	andeq	sl, r1, ip, asr #6
   1a29c:	andeq	sl, r1, ip, asr #6
   1a2a0:	andeq	sl, r1, ip, asr #6
   1a2a4:	andeq	sl, r1, ip, ror #5
   1a2a8:	andeq	sl, r1, ip, asr #6
   1a2ac:	andeq	sl, r1, ip, ror #5
   1a2b0:	andeq	sl, r1, ip, asr #6
   1a2b4:	andeq	sl, r1, ip, asr #6
   1a2b8:	andeq	sl, r1, ip, asr #6
   1a2bc:	andeq	sl, r1, ip, asr #6
   1a2c0:	andeq	sl, r1, ip, asr #6
   1a2c4:	andeq	sl, r1, ip, asr #6
   1a2c8:	andeq	sl, r1, ip, asr #6
   1a2cc:	andeq	sl, r1, ip, asr #6
   1a2d0:	andeq	sl, r1, ip, asr #6
   1a2d4:	andeq	sl, r1, ip, asr #6
   1a2d8:	andeq	sl, r1, ip, asr #6
   1a2dc:	andeq	sl, r1, ip, asr #6
   1a2e0:	andeq	sl, r1, ip, ror #5
   1a2e4:	andeq	sl, r1, ip, ror #5
   1a2e8:	andeq	sl, r1, ip, ror #5
   1a2ec:	ldr	r2, [sp, #44]	; 0x2c
   1a2f0:	cmp	r2, #0
   1a2f4:	bne	1a450 <__assert_fail@plt+0x9080>
   1a2f8:	cmp	sl, r4
   1a2fc:	mov	r5, r1
   1a300:	movhi	r2, #63	; 0x3f
   1a304:	mov	r9, r3
   1a308:	strbhi	r2, [r8, r4]
   1a30c:	add	r2, r4, #1
   1a310:	cmp	sl, r2
   1a314:	movhi	r0, #34	; 0x22
   1a318:	strbhi	r0, [r8, r2]
   1a31c:	add	r2, r4, #2
   1a320:	cmp	sl, r2
   1a324:	movhi	r0, #34	; 0x22
   1a328:	strbhi	r0, [r8, r2]
   1a32c:	add	r2, r4, #3
   1a330:	add	r4, r4, #4
   1a334:	cmp	sl, r2
   1a338:	movhi	r0, #63	; 0x3f
   1a33c:	strbhi	r0, [r8, r2]
   1a340:	mov	r2, #0
   1a344:	mov	r6, r2
   1a348:	b	19780 <__assert_fail@plt+0x83b0>
   1a34c:	mov	r3, #0
   1a350:	mov	r6, r3
   1a354:	b	192f8 <__assert_fail@plt+0x7f28>
   1a358:	ldr	r0, [sp, #28]
   1a35c:	mov	r1, r4
   1a360:	mov	r2, r7
   1a364:	mov	r3, r5
   1a368:	mov	ip, r5
   1a36c:	ldr	r8, [sp, #76]	; 0x4c
   1a370:	ldr	sl, [sp, #80]	; 0x50
   1a374:	cmp	r1, r0
   1a378:	ldr	r5, [sp, #84]	; 0x54
   1a37c:	ldr	r7, [sp, #88]	; 0x58
   1a380:	ldr	r4, [sp, #92]	; 0x5c
   1a384:	bcs	1a3b8 <__assert_fail@plt+0x8fe8>
   1a388:	ldrb	r6, [r2]
   1a38c:	cmp	r6, #0
   1a390:	bne	1a3a4 <__assert_fail@plt+0x8fd4>
   1a394:	b	1a4d8 <__assert_fail@plt+0x9108>
   1a398:	ldrb	r6, [r2, #1]!
   1a39c:	cmp	r6, #0
   1a3a0:	beq	1a460 <__assert_fail@plt+0x9090>
   1a3a4:	add	r3, r3, #1
   1a3a8:	add	r1, r9, r3
   1a3ac:	cmp	r1, r0
   1a3b0:	bcc	1a398 <__assert_fail@plt+0x8fc8>
   1a3b4:	mov	ip, r3
   1a3b8:	mov	r6, #0
   1a3bc:	ldr	r2, [sp, #40]	; 0x28
   1a3c0:	b	19ee4 <__assert_fail@plt+0x8b14>
   1a3c4:	mov	r3, #1
   1a3c8:	mov	r2, #0
   1a3cc:	mov	r4, r2
   1a3d0:	str	r3, [sp, #36]	; 0x24
   1a3d4:	str	r3, [sp, #40]	; 0x28
   1a3d8:	str	r3, [sp, #44]	; 0x2c
   1a3dc:	str	r2, [sp, #48]	; 0x30
   1a3e0:	str	r3, [sp, #56]	; 0x38
   1a3e4:	movw	r3, #2708	; 0xa94
   1a3e8:	movt	r3, #2
   1a3ec:	str	r3, [sp, #60]	; 0x3c
   1a3f0:	str	r2, [sp, #68]	; 0x44
   1a3f4:	str	r2, [sp, #72]	; 0x48
   1a3f8:	b	18e58 <__assert_fail@plt+0x7a88>
   1a3fc:	mov	r2, r3
   1a400:	ldr	r3, [sp, #60]	; 0x3c
   1a404:	cmp	r3, #0
   1a408:	moveq	r2, #0
   1a40c:	andne	r2, r2, #1
   1a410:	cmp	r2, #0
   1a414:	beq	1a440 <__assert_fail@plt+0x9070>
   1a418:	mov	r2, r3
   1a41c:	ldrb	r3, [r3]
   1a420:	cmp	r3, #0
   1a424:	beq	1a440 <__assert_fail@plt+0x9070>
   1a428:	cmp	sl, r4
   1a42c:	strbhi	r3, [fp, r4]
   1a430:	add	r4, r4, #1
   1a434:	ldrb	r3, [r2, #1]!
   1a438:	cmp	r3, #0
   1a43c:	bne	1a428 <__assert_fail@plt+0x9058>
   1a440:	cmp	sl, r4
   1a444:	movhi	r3, #0
   1a448:	strbhi	r3, [fp, r4]
   1a44c:	b	19660 <__assert_fail@plt+0x8290>
   1a450:	str	fp, [sp, #152]	; 0x98
   1a454:	mov	fp, r8
   1a458:	ldr	r8, [sp, #152]	; 0x98
   1a45c:	b	19628 <__assert_fail@plt+0x8258>
   1a460:	mov	ip, r3
   1a464:	ldr	r2, [sp, #40]	; 0x28
   1a468:	b	19ee4 <__assert_fail@plt+0x8b14>
   1a46c:	str	fp, [sp, #152]	; 0x98
   1a470:	mov	fp, r8
   1a474:	ldr	r8, [sp, #152]	; 0x98
   1a478:	sub	r3, r8, #2
   1a47c:	clz	r3, r3
   1a480:	lsr	r3, r3, #5
   1a484:	str	r3, [sp, #40]	; 0x28
   1a488:	b	1961c <__assert_fail@plt+0x824c>
   1a48c:	mov	ip, #5
   1a490:	ldr	r3, [sp, #28]
   1a494:	str	ip, [sp]
   1a498:	ldr	r2, [sp, #156]	; 0x9c
   1a49c:	ldr	ip, [sp, #164]	; 0xa4
   1a4a0:	ldr	r0, [sp, #160]	; 0xa0
   1a4a4:	str	r2, [sp, #4]
   1a4a8:	ldr	r2, [sp, #32]
   1a4ac:	ldr	r1, [sp, #72]	; 0x48
   1a4b0:	str	ip, [sp, #12]
   1a4b4:	ldr	ip, [sp, #168]	; 0xa8
   1a4b8:	str	r0, [sp, #8]
   1a4bc:	mov	r0, fp
   1a4c0:	str	ip, [sp, #16]
   1a4c4:	bl	18d70 <__assert_fail@plt+0x79a0>
   1a4c8:	mov	r4, r0
   1a4cc:	b	19660 <__assert_fail@plt+0x8290>
   1a4d0:	mov	r8, #2
   1a4d4:	b	1961c <__assert_fail@plt+0x824c>
   1a4d8:	ldr	r2, [sp, #40]	; 0x28
   1a4dc:	b	19ee4 <__assert_fail@plt+0x8b14>
   1a4e0:	mov	r3, #0
   1a4e4:	mov	r2, #1
   1a4e8:	mov	r4, r3
   1a4ec:	strd	r2, [sp, #36]	; 0x24
   1a4f0:	strd	r2, [sp, #44]	; 0x2c
   1a4f4:	str	r2, [sp, #56]	; 0x38
   1a4f8:	str	r3, [sp, #68]	; 0x44
   1a4fc:	str	r3, [sp, #72]	; 0x48
   1a500:	movw	r3, #2728	; 0xaa8
   1a504:	movt	r3, #2
   1a508:	str	r3, [sp, #60]	; 0x3c
   1a50c:	b	18e58 <__assert_fail@plt+0x7a88>
   1a510:	mov	r3, #0
   1a514:	mov	r1, #1
   1a518:	mov	r2, r3
   1a51c:	str	r1, [sp, #36]	; 0x24
   1a520:	str	r3, [sp, #48]	; 0x30
   1a524:	str	sl, [sp, #72]	; 0x48
   1a528:	b	19460 <__assert_fail@plt+0x8090>
   1a52c:	bl	113a0 <abort@plt>
   1a530:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a534:	mov	r4, r0
   1a538:	mov	r5, r3
   1a53c:	strd	r6, [sp, #8]
   1a540:	movw	r7, #4428	; 0x114c
   1a544:	movt	r7, #3
   1a548:	strd	r8, [sp, #16]
   1a54c:	strd	sl, [sp, #24]
   1a550:	mov	sl, r1
   1a554:	mov	fp, r2
   1a558:	str	lr, [sp, #32]
   1a55c:	sub	sp, sp, #60	; 0x3c
   1a560:	bl	11298 <__errno_location@plt>
   1a564:	mov	r8, r0
   1a568:	cmn	r4, #-2147483647	; 0x80000001
   1a56c:	ldr	r6, [r7]
   1a570:	movne	r0, #0
   1a574:	moveq	r0, #1
   1a578:	ldr	r3, [r8]
   1a57c:	orrs	r0, r0, r4, lsr #31
   1a580:	str	r3, [sp, #28]
   1a584:	bne	1a714 <__assert_fail@plt+0x9344>
   1a588:	ldr	r3, [r7, #4]
   1a58c:	cmp	r3, r4
   1a590:	bgt	1a5f0 <__assert_fail@plt+0x9220>
   1a594:	add	r1, r7, #8
   1a598:	sub	r2, r4, r3
   1a59c:	str	r3, [sp, #52]	; 0x34
   1a5a0:	cmp	r6, r1
   1a5a4:	add	r2, r2, #1
   1a5a8:	beq	1a6ec <__assert_fail@plt+0x931c>
   1a5ac:	mov	r1, #8
   1a5b0:	mov	r0, r6
   1a5b4:	mvn	r3, #-2147483648	; 0x80000000
   1a5b8:	str	r1, [sp]
   1a5bc:	add	r1, sp, #52	; 0x34
   1a5c0:	bl	1bac4 <__assert_fail@plt+0xa6f4>
   1a5c4:	mov	r6, r0
   1a5c8:	str	r0, [r7]
   1a5cc:	ldr	r0, [r7, #4]
   1a5d0:	mov	r1, #0
   1a5d4:	ldr	r2, [sp, #52]	; 0x34
   1a5d8:	sub	r2, r2, r0
   1a5dc:	add	r0, r6, r0, lsl #3
   1a5e0:	lsl	r2, r2, #3
   1a5e4:	bl	112c8 <memset@plt>
   1a5e8:	ldr	r3, [sp, #52]	; 0x34
   1a5ec:	str	r3, [r7, #4]
   1a5f0:	ldr	r1, [r5, #4]
   1a5f4:	add	r0, r6, r4, lsl #3
   1a5f8:	add	ip, r5, #8
   1a5fc:	mov	r3, fp
   1a600:	mov	r2, sl
   1a604:	ldr	r7, [r0, #4]
   1a608:	str	r0, [sp, #36]	; 0x24
   1a60c:	str	ip, [sp, #40]	; 0x28
   1a610:	orr	r0, r1, #1
   1a614:	ldr	r9, [r6, r4, lsl #3]
   1a618:	str	ip, [sp, #8]
   1a61c:	ldr	lr, [r5, #44]	; 0x2c
   1a620:	str	r0, [sp, #4]
   1a624:	ldr	ip, [r5]
   1a628:	mov	r1, r9
   1a62c:	str	ip, [sp, #32]
   1a630:	ldr	ip, [r5, #40]	; 0x28
   1a634:	str	ip, [sp, #12]
   1a638:	ldr	ip, [sp, #32]
   1a63c:	str	lr, [sp, #16]
   1a640:	str	r0, [sp, #44]	; 0x2c
   1a644:	mov	r0, r7
   1a648:	str	ip, [sp]
   1a64c:	bl	18d70 <__assert_fail@plt+0x79a0>
   1a650:	cmp	r9, r0
   1a654:	bhi	1a6c4 <__assert_fail@plt+0x92f4>
   1a658:	add	r9, r0, #1
   1a65c:	movw	r3, #4572	; 0x11dc
   1a660:	movt	r3, #3
   1a664:	cmp	r7, r3
   1a668:	str	r9, [r6, r4, lsl #3]
   1a66c:	beq	1a678 <__assert_fail@plt+0x92a8>
   1a670:	mov	r0, r7
   1a674:	bl	1c02c <__assert_fail@plt+0xac5c>
   1a678:	mov	r0, r9
   1a67c:	bl	1b914 <__assert_fail@plt+0xa544>
   1a680:	ldr	ip, [r5]
   1a684:	mov	r3, fp
   1a688:	mov	r2, sl
   1a68c:	mov	r1, r9
   1a690:	mov	r7, r0
   1a694:	ldr	lr, [sp, #36]	; 0x24
   1a698:	ldr	r4, [r5, #40]	; 0x28
   1a69c:	str	r0, [lr, #4]
   1a6a0:	ldr	lr, [r5, #44]	; 0x2c
   1a6a4:	str	ip, [sp]
   1a6a8:	ldr	ip, [sp, #44]	; 0x2c
   1a6ac:	str	ip, [sp, #4]
   1a6b0:	ldr	ip, [sp, #40]	; 0x28
   1a6b4:	str	r4, [sp, #12]
   1a6b8:	str	lr, [sp, #16]
   1a6bc:	str	ip, [sp, #8]
   1a6c0:	bl	18d70 <__assert_fail@plt+0x79a0>
   1a6c4:	ldr	r3, [sp, #28]
   1a6c8:	mov	r0, r7
   1a6cc:	str	r3, [r8]
   1a6d0:	add	sp, sp, #60	; 0x3c
   1a6d4:	ldrd	r4, [sp]
   1a6d8:	ldrd	r6, [sp, #8]
   1a6dc:	ldrd	r8, [sp, #16]
   1a6e0:	ldrd	sl, [sp, #24]
   1a6e4:	add	sp, sp, #32
   1a6e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6ec:	mov	r1, #8
   1a6f0:	mvn	r3, #-2147483648	; 0x80000000
   1a6f4:	str	r1, [sp]
   1a6f8:	add	r1, sp, #52	; 0x34
   1a6fc:	bl	1bac4 <__assert_fail@plt+0xa6f4>
   1a700:	ldrd	r2, [r7, #8]
   1a704:	mov	r6, r0
   1a708:	str	r0, [r7]
   1a70c:	strd	r2, [r0]
   1a710:	b	1a5cc <__assert_fail@plt+0x91fc>
   1a714:	bl	113a0 <abort@plt>
   1a718:	strd	r4, [sp, #-16]!
   1a71c:	mov	r5, r0
   1a720:	str	r6, [sp, #8]
   1a724:	str	lr, [sp, #12]
   1a728:	bl	11298 <__errno_location@plt>
   1a72c:	mov	r4, r0
   1a730:	cmp	r5, #0
   1a734:	ldr	r0, [pc, #32]	; 1a75c <__assert_fail@plt+0x938c>
   1a738:	mov	r1, #48	; 0x30
   1a73c:	movne	r0, r5
   1a740:	ldr	r6, [r4]
   1a744:	bl	1bc3c <__assert_fail@plt+0xa86c>
   1a748:	str	r6, [r4]
   1a74c:	ldrd	r4, [sp]
   1a750:	ldr	r6, [sp, #8]
   1a754:	add	sp, sp, #12
   1a758:	pop	{pc}		; (ldr pc, [sp], #4)
   1a75c:	ldrdeq	r1, [r3], -ip
   1a760:	ldr	r3, [pc, #12]	; 1a774 <__assert_fail@plt+0x93a4>
   1a764:	cmp	r0, #0
   1a768:	moveq	r0, r3
   1a76c:	ldr	r0, [r0]
   1a770:	bx	lr
   1a774:	ldrdeq	r1, [r3], -ip
   1a778:	ldr	r3, [pc, #12]	; 1a78c <__assert_fail@plt+0x93bc>
   1a77c:	cmp	r0, #0
   1a780:	moveq	r0, r3
   1a784:	str	r1, [r0]
   1a788:	bx	lr
   1a78c:	ldrdeq	r1, [r3], -ip
   1a790:	ldr	r3, [pc, #52]	; 1a7cc <__assert_fail@plt+0x93fc>
   1a794:	cmp	r0, #0
   1a798:	push	{lr}		; (str lr, [sp, #-4]!)
   1a79c:	lsr	lr, r1, #5
   1a7a0:	and	r1, r1, #31
   1a7a4:	moveq	r0, r3
   1a7a8:	add	r3, r0, #8
   1a7ac:	ldr	ip, [r3, lr, lsl #2]
   1a7b0:	lsr	r0, ip, r1
   1a7b4:	eor	r2, r2, r0
   1a7b8:	and	r0, r0, #1
   1a7bc:	and	r2, r2, #1
   1a7c0:	eor	r1, ip, r2, lsl r1
   1a7c4:	str	r1, [r3, lr, lsl #2]
   1a7c8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7cc:	ldrdeq	r1, [r3], -ip
   1a7d0:	ldr	r3, [pc, #16]	; 1a7e8 <__assert_fail@plt+0x9418>
   1a7d4:	cmp	r0, #0
   1a7d8:	movne	r3, r0
   1a7dc:	ldr	r0, [r3, #4]
   1a7e0:	str	r1, [r3, #4]
   1a7e4:	bx	lr
   1a7e8:	ldrdeq	r1, [r3], -ip
   1a7ec:	ldr	r3, [pc, #48]	; 1a824 <__assert_fail@plt+0x9454>
   1a7f0:	cmp	r0, #0
   1a7f4:	mov	ip, #10
   1a7f8:	moveq	r0, r3
   1a7fc:	cmp	r2, #0
   1a800:	cmpne	r1, #0
   1a804:	str	ip, [r0]
   1a808:	beq	1a818 <__assert_fail@plt+0x9448>
   1a80c:	str	r1, [r0, #40]	; 0x28
   1a810:	str	r2, [r0, #44]	; 0x2c
   1a814:	bx	lr
   1a818:	str	r4, [sp, #-8]!
   1a81c:	str	lr, [sp, #4]
   1a820:	bl	113a0 <abort@plt>
   1a824:	ldrdeq	r1, [r3], -ip
   1a828:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a82c:	strd	r6, [sp, #8]
   1a830:	mov	r7, r0
   1a834:	mov	r6, r1
   1a838:	strd	r8, [sp, #16]
   1a83c:	mov	r8, r2
   1a840:	mov	r9, r3
   1a844:	str	lr, [sp, #24]
   1a848:	sub	sp, sp, #28
   1a84c:	ldr	r4, [sp, #56]	; 0x38
   1a850:	ldr	ip, [pc, #104]	; 1a8c0 <__assert_fail@plt+0x94f0>
   1a854:	cmp	r4, #0
   1a858:	moveq	r4, ip
   1a85c:	bl	11298 <__errno_location@plt>
   1a860:	ldr	ip, [r4, #44]	; 0x2c
   1a864:	mov	r5, r0
   1a868:	mov	r1, r6
   1a86c:	add	lr, r4, #8
   1a870:	mov	r3, r9
   1a874:	ldr	r6, [r5]
   1a878:	mov	r2, r8
   1a87c:	mov	r0, r7
   1a880:	str	ip, [sp, #16]
   1a884:	ldr	ip, [r4, #40]	; 0x28
   1a888:	str	lr, [sp, #8]
   1a88c:	str	ip, [sp, #12]
   1a890:	ldr	ip, [r4, #4]
   1a894:	str	ip, [sp, #4]
   1a898:	ldr	ip, [r4]
   1a89c:	str	ip, [sp]
   1a8a0:	bl	18d70 <__assert_fail@plt+0x79a0>
   1a8a4:	str	r6, [r5]
   1a8a8:	add	sp, sp, #28
   1a8ac:	ldrd	r4, [sp]
   1a8b0:	ldrd	r6, [sp, #8]
   1a8b4:	ldrd	r8, [sp, #16]
   1a8b8:	add	sp, sp, #24
   1a8bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a8c0:	ldrdeq	r1, [r3], -ip
   1a8c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a8c8:	cmp	r3, #0
   1a8cc:	ldr	r4, [pc, #220]	; 1a9b0 <__assert_fail@plt+0x95e0>
   1a8d0:	movne	r4, r3
   1a8d4:	strd	r6, [sp, #8]
   1a8d8:	mov	r6, r2
   1a8dc:	strd	r8, [sp, #16]
   1a8e0:	mov	r9, r0
   1a8e4:	strd	sl, [sp, #24]
   1a8e8:	mov	sl, r1
   1a8ec:	str	lr, [sp, #32]
   1a8f0:	sub	sp, sp, #44	; 0x2c
   1a8f4:	bl	11298 <__errno_location@plt>
   1a8f8:	ldr	r5, [r4, #4]
   1a8fc:	mov	r7, r0
   1a900:	mov	r1, #0
   1a904:	add	r8, r4, #8
   1a908:	mov	r3, sl
   1a90c:	ldr	ip, [r4, #44]	; 0x2c
   1a910:	mov	r2, r9
   1a914:	mov	r0, r1
   1a918:	ldr	lr, [r7]
   1a91c:	cmp	r6, r1
   1a920:	orreq	r5, r5, #1
   1a924:	str	ip, [sp, #16]
   1a928:	ldr	ip, [r4, #40]	; 0x28
   1a92c:	stmib	sp, {r5, r8, ip}
   1a930:	ldr	ip, [r4]
   1a934:	str	lr, [sp, #28]
   1a938:	str	ip, [sp]
   1a93c:	bl	18d70 <__assert_fail@plt+0x79a0>
   1a940:	add	r1, r0, #1
   1a944:	mov	fp, r0
   1a948:	mov	r0, r1
   1a94c:	str	r1, [sp, #36]	; 0x24
   1a950:	bl	1b914 <__assert_fail@plt+0xa544>
   1a954:	ldr	ip, [r4, #44]	; 0x2c
   1a958:	mov	r3, sl
   1a95c:	mov	r2, r9
   1a960:	ldr	r1, [sp, #36]	; 0x24
   1a964:	str	ip, [sp, #16]
   1a968:	ldr	ip, [r4, #40]	; 0x28
   1a96c:	str	r0, [sp, #32]
   1a970:	stmib	sp, {r5, r8, ip}
   1a974:	ldr	ip, [r4]
   1a978:	str	ip, [sp]
   1a97c:	bl	18d70 <__assert_fail@plt+0x79a0>
   1a980:	ldr	lr, [sp, #28]
   1a984:	cmp	r6, #0
   1a988:	ldr	r0, [sp, #32]
   1a98c:	str	lr, [r7]
   1a990:	strne	fp, [r6]
   1a994:	add	sp, sp, #44	; 0x2c
   1a998:	ldrd	r4, [sp]
   1a99c:	ldrd	r6, [sp, #8]
   1a9a0:	ldrd	r8, [sp, #16]
   1a9a4:	ldrd	sl, [sp, #24]
   1a9a8:	add	sp, sp, #32
   1a9ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9b0:	ldrdeq	r1, [r3], -ip
   1a9b4:	mov	r3, r2
   1a9b8:	mov	r2, #0
   1a9bc:	b	1a8c4 <__assert_fail@plt+0x94f4>
   1a9c0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1a9c4:	movw	r5, #4428	; 0x114c
   1a9c8:	movt	r5, #3
   1a9cc:	ldr	r3, [r5, #4]
   1a9d0:	strd	r6, [sp, #8]
   1a9d4:	str	r8, [sp, #16]
   1a9d8:	str	lr, [sp, #20]
   1a9dc:	ldr	r7, [r5]
   1a9e0:	cmp	r3, #1
   1a9e4:	ble	1aa08 <__assert_fail@plt+0x9638>
   1a9e8:	mov	r4, #1
   1a9ec:	add	r6, r7, #4
   1a9f0:	ldr	r0, [r6, r4, lsl #3]
   1a9f4:	add	r4, r4, #1
   1a9f8:	bl	1c02c <__assert_fail@plt+0xac5c>
   1a9fc:	ldr	r3, [r5, #4]
   1aa00:	cmp	r3, r4
   1aa04:	bgt	1a9f0 <__assert_fail@plt+0x9620>
   1aa08:	ldr	r0, [r7, #4]
   1aa0c:	movw	r4, #4572	; 0x11dc
   1aa10:	movt	r4, #3
   1aa14:	cmp	r0, r4
   1aa18:	beq	1aa2c <__assert_fail@plt+0x965c>
   1aa1c:	bl	1c02c <__assert_fail@plt+0xac5c>
   1aa20:	mov	r3, #256	; 0x100
   1aa24:	str	r3, [r5, #8]
   1aa28:	str	r4, [r5, #12]
   1aa2c:	ldr	r4, [pc, #44]	; 1aa60 <__assert_fail@plt+0x9690>
   1aa30:	cmp	r7, r4
   1aa34:	beq	1aa44 <__assert_fail@plt+0x9674>
   1aa38:	mov	r0, r7
   1aa3c:	bl	1c02c <__assert_fail@plt+0xac5c>
   1aa40:	str	r4, [r5]
   1aa44:	mov	r3, #1
   1aa48:	ldrd	r6, [sp, #8]
   1aa4c:	str	r3, [r5, #4]
   1aa50:	ldrd	r4, [sp]
   1aa54:	ldr	r8, [sp, #16]
   1aa58:	add	sp, sp, #20
   1aa5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa60:	andeq	r1, r3, r4, asr r1
   1aa64:	ldr	r3, [pc, #4]	; 1aa70 <__assert_fail@plt+0x96a0>
   1aa68:	mvn	r2, #0
   1aa6c:	b	1a530 <__assert_fail@plt+0x9160>
   1aa70:	ldrdeq	r1, [r3], -ip
   1aa74:	ldr	r3, [pc]	; 1aa7c <__assert_fail@plt+0x96ac>
   1aa78:	b	1a530 <__assert_fail@plt+0x9160>
   1aa7c:	ldrdeq	r1, [r3], -ip
   1aa80:	mov	r1, r0
   1aa84:	ldr	r3, [pc, #8]	; 1aa94 <__assert_fail@plt+0x96c4>
   1aa88:	mvn	r2, #0
   1aa8c:	mov	r0, #0
   1aa90:	b	1a530 <__assert_fail@plt+0x9160>
   1aa94:	ldrdeq	r1, [r3], -ip
   1aa98:	mov	r2, r1
   1aa9c:	ldr	r3, [pc, #8]	; 1aaac <__assert_fail@plt+0x96dc>
   1aaa0:	mov	r1, r0
   1aaa4:	mov	r0, #0
   1aaa8:	b	1a530 <__assert_fail@plt+0x9160>
   1aaac:	ldrdeq	r1, [r3], -ip
   1aab0:	strd	r4, [sp, #-12]!
   1aab4:	mov	r5, r2
   1aab8:	mov	r4, r0
   1aabc:	str	lr, [sp, #8]
   1aac0:	sub	sp, sp, #52	; 0x34
   1aac4:	mov	r0, sp
   1aac8:	bl	18bcc <__assert_fail@plt+0x77fc>
   1aacc:	mov	r3, sp
   1aad0:	mov	r1, r5
   1aad4:	mov	r0, r4
   1aad8:	mvn	r2, #0
   1aadc:	bl	1a530 <__assert_fail@plt+0x9160>
   1aae0:	add	sp, sp, #52	; 0x34
   1aae4:	ldrd	r4, [sp]
   1aae8:	add	sp, sp, #8
   1aaec:	pop	{pc}		; (ldr pc, [sp], #4)
   1aaf0:	strd	r4, [sp, #-16]!
   1aaf4:	mov	r5, r2
   1aaf8:	mov	r4, r0
   1aafc:	str	r6, [sp, #8]
   1ab00:	mov	r6, r3
   1ab04:	str	lr, [sp, #12]
   1ab08:	sub	sp, sp, #48	; 0x30
   1ab0c:	mov	r0, sp
   1ab10:	bl	18bcc <__assert_fail@plt+0x77fc>
   1ab14:	mov	r3, sp
   1ab18:	mov	r2, r6
   1ab1c:	mov	r1, r5
   1ab20:	mov	r0, r4
   1ab24:	bl	1a530 <__assert_fail@plt+0x9160>
   1ab28:	add	sp, sp, #48	; 0x30
   1ab2c:	ldrd	r4, [sp]
   1ab30:	ldr	r6, [sp, #8]
   1ab34:	add	sp, sp, #12
   1ab38:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab3c:	mov	r2, r1
   1ab40:	mov	r1, r0
   1ab44:	mov	r0, #0
   1ab48:	b	1aab0 <__assert_fail@plt+0x96e0>
   1ab4c:	mov	r3, r2
   1ab50:	mov	r2, r1
   1ab54:	mov	r1, r0
   1ab58:	mov	r0, #0
   1ab5c:	b	1aaf0 <__assert_fail@plt+0x9720>
   1ab60:	ldr	ip, [pc, #140]	; 1abf4 <__assert_fail@plt+0x9824>
   1ab64:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1ab68:	ldrd	r4, [ip]
   1ab6c:	strd	r6, [sp, #8]
   1ab70:	ldrd	r6, [ip, #8]
   1ab74:	strd	r8, [sp, #16]
   1ab78:	lsr	r9, r2, #5
   1ab7c:	str	lr, [sp, #24]
   1ab80:	sub	sp, sp, #52	; 0x34
   1ab84:	and	lr, r2, #31
   1ab88:	add	r8, sp, #8
   1ab8c:	mov	r2, r1
   1ab90:	strd	r4, [sp]
   1ab94:	mov	r1, r0
   1ab98:	mov	r3, sp
   1ab9c:	strd	r6, [sp, #8]
   1aba0:	mov	r0, #0
   1aba4:	ldrd	r4, [ip, #16]
   1aba8:	ldrd	r6, [ip, #24]
   1abac:	strd	r4, [sp, #16]
   1abb0:	ldrd	r4, [ip, #32]
   1abb4:	strd	r6, [sp, #24]
   1abb8:	ldrd	r6, [ip, #40]	; 0x28
   1abbc:	strd	r4, [sp, #32]
   1abc0:	strd	r6, [sp, #40]	; 0x28
   1abc4:	ldr	ip, [r8, r9, lsl #2]
   1abc8:	mvn	r4, ip, lsr lr
   1abcc:	and	r4, r4, #1
   1abd0:	eor	lr, ip, r4, lsl lr
   1abd4:	str	lr, [r8, r9, lsl #2]
   1abd8:	bl	1a530 <__assert_fail@plt+0x9160>
   1abdc:	add	sp, sp, #52	; 0x34
   1abe0:	ldrd	r4, [sp]
   1abe4:	ldrd	r6, [sp, #8]
   1abe8:	ldrd	r8, [sp, #16]
   1abec:	add	sp, sp, #24
   1abf0:	pop	{pc}		; (ldr pc, [sp], #4)
   1abf4:	ldrdeq	r1, [r3], -ip
   1abf8:	mov	r2, r1
   1abfc:	mvn	r1, #0
   1ac00:	b	1ab60 <__assert_fail@plt+0x9790>
   1ac04:	mov	r2, #58	; 0x3a
   1ac08:	mvn	r1, #0
   1ac0c:	b	1ab60 <__assert_fail@plt+0x9790>
   1ac10:	mov	r2, #58	; 0x3a
   1ac14:	b	1ab60 <__assert_fail@plt+0x9790>
   1ac18:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ac1c:	strd	r6, [sp, #8]
   1ac20:	mov	r6, r0
   1ac24:	mov	r7, r2
   1ac28:	str	lr, [sp, #16]
   1ac2c:	sub	sp, sp, #100	; 0x64
   1ac30:	mov	r0, sp
   1ac34:	bl	18bcc <__assert_fail@plt+0x77fc>
   1ac38:	ldrd	r4, [sp, #8]
   1ac3c:	mov	r1, r7
   1ac40:	mov	r0, r6
   1ac44:	add	r3, sp, #48	; 0x30
   1ac48:	mvn	r2, #0
   1ac4c:	ldrd	r6, [sp]
   1ac50:	strd	r4, [sp, #56]	; 0x38
   1ac54:	ldrd	r4, [sp, #16]
   1ac58:	strd	r6, [sp, #48]	; 0x30
   1ac5c:	ldrd	r6, [sp, #32]
   1ac60:	ldr	lr, [sp, #60]	; 0x3c
   1ac64:	strd	r4, [sp, #64]	; 0x40
   1ac68:	ldrd	r4, [sp, #24]
   1ac6c:	mvn	ip, lr
   1ac70:	and	ip, ip, #67108864	; 0x4000000
   1ac74:	strd	r4, [sp, #72]	; 0x48
   1ac78:	eor	ip, ip, lr
   1ac7c:	ldrd	r4, [sp, #40]	; 0x28
   1ac80:	str	ip, [sp, #60]	; 0x3c
   1ac84:	strd	r6, [sp, #80]	; 0x50
   1ac88:	strd	r4, [sp, #88]	; 0x58
   1ac8c:	bl	1a530 <__assert_fail@plt+0x9160>
   1ac90:	add	sp, sp, #100	; 0x64
   1ac94:	ldrd	r4, [sp]
   1ac98:	ldrd	r6, [sp, #8]
   1ac9c:	add	sp, sp, #16
   1aca0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aca4:	ldr	ip, [pc, #156]	; 1ad48 <__assert_fail@plt+0x9978>
   1aca8:	cmp	r2, #0
   1acac:	cmpne	r1, #0
   1acb0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1acb4:	strd	r6, [sp, #8]
   1acb8:	mov	r6, r2
   1acbc:	str	r8, [sp, #16]
   1acc0:	mov	r8, r3
   1acc4:	strd	sl, [sp, #20]
   1acc8:	ldrd	r4, [ip]
   1accc:	str	lr, [sp, #28]
   1acd0:	sub	sp, sp, #48	; 0x30
   1acd4:	mov	lr, #10
   1acd8:	ldrd	r2, [ip, #8]
   1acdc:	ldrd	sl, [ip, #16]
   1ace0:	strd	r4, [sp]
   1ace4:	ldrd	r4, [ip, #32]
   1ace8:	str	lr, [sp]
   1acec:	strd	r2, [sp, #8]
   1acf0:	strd	sl, [sp, #16]
   1acf4:	ldrd	r2, [ip, #24]
   1acf8:	ldrd	sl, [ip, #40]	; 0x28
   1acfc:	strd	r2, [sp, #24]
   1ad00:	strd	r4, [sp, #32]
   1ad04:	strd	sl, [sp, #40]	; 0x28
   1ad08:	beq	1ad44 <__assert_fail@plt+0x9974>
   1ad0c:	ldr	r2, [sp, #80]	; 0x50
   1ad10:	mov	r7, r1
   1ad14:	mov	r3, sp
   1ad18:	mov	r1, r8
   1ad1c:	str	r7, [sp, #40]	; 0x28
   1ad20:	str	r6, [sp, #44]	; 0x2c
   1ad24:	bl	1a530 <__assert_fail@plt+0x9160>
   1ad28:	add	sp, sp, #48	; 0x30
   1ad2c:	ldrd	r4, [sp]
   1ad30:	ldrd	r6, [sp, #8]
   1ad34:	ldr	r8, [sp, #16]
   1ad38:	ldrd	sl, [sp, #20]
   1ad3c:	add	sp, sp, #28
   1ad40:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad44:	bl	113a0 <abort@plt>
   1ad48:	ldrdeq	r1, [r3], -ip
   1ad4c:	mvn	ip, #0
   1ad50:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad54:	sub	sp, sp, #12
   1ad58:	str	ip, [sp]
   1ad5c:	bl	1aca4 <__assert_fail@plt+0x98d4>
   1ad60:	add	sp, sp, #12
   1ad64:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad68:	mvn	ip, #0
   1ad6c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad70:	sub	sp, sp, #12
   1ad74:	mov	r3, r2
   1ad78:	mov	r2, r1
   1ad7c:	mov	r1, r0
   1ad80:	mov	r0, #0
   1ad84:	str	ip, [sp]
   1ad88:	bl	1aca4 <__assert_fail@plt+0x98d4>
   1ad8c:	add	sp, sp, #12
   1ad90:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad94:	push	{lr}		; (str lr, [sp, #-4]!)
   1ad98:	sub	sp, sp, #12
   1ad9c:	str	r3, [sp]
   1ada0:	mov	r3, r2
   1ada4:	mov	r2, r1
   1ada8:	mov	r1, r0
   1adac:	mov	r0, #0
   1adb0:	bl	1aca4 <__assert_fail@plt+0x98d4>
   1adb4:	add	sp, sp, #12
   1adb8:	pop	{pc}		; (ldr pc, [sp], #4)
   1adbc:	ldr	r3, [pc]	; 1adc4 <__assert_fail@plt+0x99f4>
   1adc0:	b	1a530 <__assert_fail@plt+0x9160>
   1adc4:	andeq	r1, r3, ip, asr r1
   1adc8:	mov	r2, r1
   1adcc:	ldr	r3, [pc, #8]	; 1addc <__assert_fail@plt+0x9a0c>
   1add0:	mov	r1, r0
   1add4:	mov	r0, #0
   1add8:	b	1a530 <__assert_fail@plt+0x9160>
   1addc:	andeq	r1, r3, ip, asr r1
   1ade0:	ldr	r3, [pc, #4]	; 1adec <__assert_fail@plt+0x9a1c>
   1ade4:	mvn	r2, #0
   1ade8:	b	1a530 <__assert_fail@plt+0x9160>
   1adec:	andeq	r1, r3, ip, asr r1
   1adf0:	mov	r1, r0
   1adf4:	ldr	r3, [pc, #8]	; 1ae04 <__assert_fail@plt+0x9a34>
   1adf8:	mvn	r2, #0
   1adfc:	mov	r0, #0
   1ae00:	b	1a530 <__assert_fail@plt+0x9160>
   1ae04:	andeq	r1, r3, ip, asr r1
   1ae08:	subs	r1, r0, #0
   1ae0c:	movw	r0, #1792	; 0x700
   1ae10:	movt	r0, #2
   1ae14:	beq	1ae20 <__assert_fail@plt+0x9a50>
   1ae18:	mov	r2, #1
   1ae1c:	b	1128c <setenv@plt>
   1ae20:	b	1137c <unsetenv@plt>
   1ae24:	cmp	r0, #0
   1ae28:	bxeq	lr
   1ae2c:	str	r4, [sp, #-8]!
   1ae30:	str	lr, [sp, #4]
   1ae34:	ldr	r4, [r0]
   1ae38:	bl	1c02c <__assert_fail@plt+0xac5c>
   1ae3c:	subs	r0, r4, #0
   1ae40:	bne	1ae34 <__assert_fail@plt+0x9a64>
   1ae44:	ldr	r4, [sp]
   1ae48:	add	sp, sp, #4
   1ae4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ae54:	mov	r5, r0
   1ae58:	strd	r6, [sp, #8]
   1ae5c:	str	r8, [sp, #16]
   1ae60:	str	lr, [sp, #20]
   1ae64:	bl	11298 <__errno_location@plt>
   1ae68:	mov	r4, r0
   1ae6c:	ldrb	r0, [r5, #4]
   1ae70:	ldr	r6, [r4]
   1ae74:	cmp	r0, #0
   1ae78:	addne	r0, r5, #5
   1ae7c:	bl	1ae08 <__assert_fail@plt+0x9a38>
   1ae80:	cmp	r0, #0
   1ae84:	beq	1aeb4 <__assert_fail@plt+0x9ae4>
   1ae88:	ldr	r6, [r4]
   1ae8c:	mov	r7, #0
   1ae90:	mov	r0, r5
   1ae94:	bl	1ae24 <__assert_fail@plt+0x9a54>
   1ae98:	mov	r0, r7
   1ae9c:	ldr	r8, [sp, #16]
   1aea0:	str	r6, [r4]
   1aea4:	ldrd	r4, [sp]
   1aea8:	ldrd	r6, [sp, #8]
   1aeac:	add	sp, sp, #20
   1aeb0:	pop	{pc}		; (ldr pc, [sp], #4)
   1aeb4:	mov	r7, #1
   1aeb8:	bl	11178 <tzset@plt>
   1aebc:	b	1ae90 <__assert_fail@plt+0x9ac0>
   1aec0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aec4:	strd	r6, [sp, #8]
   1aec8:	subs	r6, r0, #0
   1aecc:	str	r8, [sp, #16]
   1aed0:	str	lr, [sp, #20]
   1aed4:	beq	1af40 <__assert_fail@plt+0x9b70>
   1aed8:	bl	11274 <strlen@plt>
   1aedc:	add	r5, r0, #1
   1aee0:	cmp	r5, #58	; 0x3a
   1aee4:	movcs	r0, r5
   1aee8:	movcc	r0, #58	; 0x3a
   1aeec:	add	r0, r0, #9
   1aef0:	bic	r0, r0, #3
   1aef4:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1aef8:	subs	r4, r0, #0
   1aefc:	beq	1af28 <__assert_fail@plt+0x9b58>
   1af00:	mov	r7, #0
   1af04:	mov	ip, #1
   1af08:	add	r3, r4, #5
   1af0c:	mov	r1, r6
   1af10:	mov	r0, r3
   1af14:	mov	r2, r5
   1af18:	str	r7, [r4]
   1af1c:	strh	ip, [r4, #4]
   1af20:	bl	110f4 <memcpy@plt>
   1af24:	strb	r7, [r0, r5]
   1af28:	mov	r0, r4
   1af2c:	ldrd	r4, [sp]
   1af30:	ldrd	r6, [sp, #8]
   1af34:	ldr	r8, [sp, #16]
   1af38:	add	sp, sp, #20
   1af3c:	pop	{pc}		; (ldr pc, [sp], #4)
   1af40:	mov	r0, #64	; 0x40
   1af44:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1af48:	subs	r4, r0, #0
   1af4c:	strne	r6, [r4]
   1af50:	strhne	r6, [r4, #4]
   1af54:	b	1af28 <__assert_fail@plt+0x9b58>
   1af58:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1af5c:	strd	r6, [sp, #8]
   1af60:	ldr	r6, [r1, #40]	; 0x28
   1af64:	str	r8, [sp, #16]
   1af68:	str	lr, [sp, #20]
   1af6c:	cmp	r6, #0
   1af70:	beq	1b04c <__assert_fail@plt+0x9c7c>
   1af74:	cmp	r1, r6
   1af78:	mov	r7, r1
   1af7c:	mov	r5, r0
   1af80:	bhi	1af90 <__assert_fail@plt+0x9bc0>
   1af84:	add	r3, r1, #44	; 0x2c
   1af88:	cmp	r6, r3
   1af8c:	bcc	1b04c <__assert_fail@plt+0x9c7c>
   1af90:	ldrb	r3, [r6]
   1af94:	cmp	r3, #0
   1af98:	addne	r4, r5, #5
   1af9c:	beq	1b040 <__assert_fail@plt+0x9c70>
   1afa0:	mov	r1, r6
   1afa4:	mov	r0, r4
   1afa8:	bl	110a0 <strcmp@plt>
   1afac:	cmp	r0, #0
   1afb0:	add	r2, r5, #5
   1afb4:	mov	r0, r4
   1afb8:	beq	1b024 <__assert_fail@plt+0x9c54>
   1afbc:	ldrb	r3, [r4]
   1afc0:	cmp	r3, #0
   1afc4:	bne	1afdc <__assert_fail@plt+0x9c0c>
   1afc8:	cmp	r4, r2
   1afcc:	bne	1b054 <__assert_fail@plt+0x9c84>
   1afd0:	ldrb	r3, [r5, #4]
   1afd4:	cmp	r3, #0
   1afd8:	beq	1b054 <__assert_fail@plt+0x9c84>
   1afdc:	bl	11274 <strlen@plt>
   1afe0:	add	r0, r0, #1
   1afe4:	ldrb	r3, [r4, r0]!
   1afe8:	cmp	r3, #0
   1afec:	bne	1afa0 <__assert_fail@plt+0x9bd0>
   1aff0:	ldr	r3, [r5]
   1aff4:	cmp	r3, #0
   1aff8:	addne	r4, r3, #5
   1affc:	movne	r5, r3
   1b000:	b	1afa0 <__assert_fail@plt+0x9bd0>
   1b004:	mov	r0, r6
   1b008:	bl	1aec0 <__assert_fail@plt+0x9af0>
   1b00c:	cmp	r0, #0
   1b010:	str	r0, [r5]
   1b014:	beq	1b02c <__assert_fail@plt+0x9c5c>
   1b018:	mov	r3, #0
   1b01c:	add	r4, r0, #5
   1b020:	strb	r3, [r0, #4]
   1b024:	mov	r0, #1
   1b028:	str	r4, [r7, #40]	; 0x28
   1b02c:	ldrd	r4, [sp]
   1b030:	ldrd	r6, [sp, #8]
   1b034:	ldr	r8, [sp, #16]
   1b038:	add	sp, sp, #20
   1b03c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b040:	movw	r4, #1768	; 0x6e8
   1b044:	movt	r4, #2
   1b048:	b	1b024 <__assert_fail@plt+0x9c54>
   1b04c:	mov	r0, #1
   1b050:	b	1b02c <__assert_fail@plt+0x9c5c>
   1b054:	mov	r0, r6
   1b058:	bl	11274 <strlen@plt>
   1b05c:	add	r3, r5, #64	; 0x40
   1b060:	add	r8, r0, #1
   1b064:	sub	r3, r3, r4
   1b068:	cmp	r3, r8
   1b06c:	ble	1b004 <__assert_fail@plt+0x9c34>
   1b070:	mov	r1, r6
   1b074:	mov	r2, r8
   1b078:	mov	r0, r4
   1b07c:	bl	110f4 <memcpy@plt>
   1b080:	mov	r3, #0
   1b084:	strb	r3, [r4, r8]
   1b088:	b	1b024 <__assert_fail@plt+0x9c54>
   1b08c:	strd	r4, [sp, #-16]!
   1b090:	mov	r4, r0
   1b094:	movw	r0, #1792	; 0x700
   1b098:	movt	r0, #2
   1b09c:	str	r6, [sp, #8]
   1b0a0:	str	lr, [sp, #12]
   1b0a4:	bl	111d8 <getenv@plt>
   1b0a8:	subs	r5, r0, #0
   1b0ac:	ldrb	r3, [r4, #4]
   1b0b0:	beq	1b138 <__assert_fail@plt+0x9d68>
   1b0b4:	cmp	r3, #0
   1b0b8:	bne	1b10c <__assert_fail@plt+0x9d3c>
   1b0bc:	mov	r0, r5
   1b0c0:	bl	1aec0 <__assert_fail@plt+0x9af0>
   1b0c4:	subs	r5, r0, #0
   1b0c8:	beq	1b124 <__assert_fail@plt+0x9d54>
   1b0cc:	ldrb	r0, [r4, #4]
   1b0d0:	cmp	r0, #0
   1b0d4:	addne	r0, r4, #5
   1b0d8:	bl	1ae08 <__assert_fail@plt+0x9a38>
   1b0dc:	cmp	r0, #0
   1b0e0:	beq	1b144 <__assert_fail@plt+0x9d74>
   1b0e4:	bl	11298 <__errno_location@plt>
   1b0e8:	cmp	r5, #1
   1b0ec:	mov	r4, r0
   1b0f0:	ldr	r6, [r0]
   1b0f4:	beq	1b100 <__assert_fail@plt+0x9d30>
   1b0f8:	mov	r0, r5
   1b0fc:	bl	1ae24 <__assert_fail@plt+0x9a54>
   1b100:	mov	r5, #0
   1b104:	str	r6, [r4]
   1b108:	b	1b124 <__assert_fail@plt+0x9d54>
   1b10c:	mov	r1, r5
   1b110:	add	r0, r4, #5
   1b114:	bl	110a0 <strcmp@plt>
   1b118:	cmp	r0, #0
   1b11c:	bne	1b0bc <__assert_fail@plt+0x9cec>
   1b120:	mov	r5, #1
   1b124:	mov	r0, r5
   1b128:	ldrd	r4, [sp]
   1b12c:	ldr	r6, [sp, #8]
   1b130:	add	sp, sp, #12
   1b134:	pop	{pc}		; (ldr pc, [sp], #4)
   1b138:	cmp	r3, #0
   1b13c:	beq	1b120 <__assert_fail@plt+0x9d50>
   1b140:	b	1b0bc <__assert_fail@plt+0x9cec>
   1b144:	bl	11178 <tzset@plt>
   1b148:	b	1b124 <__assert_fail@plt+0x9d54>
   1b14c:	cmp	r0, #1
   1b150:	beq	1b158 <__assert_fail@plt+0x9d88>
   1b154:	b	1ae24 <__assert_fail@plt+0x9a54>
   1b158:	bx	lr
   1b15c:	subs	ip, r0, #0
   1b160:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1b164:	mov	r5, r1
   1b168:	strd	r6, [sp, #8]
   1b16c:	str	r8, [sp, #16]
   1b170:	str	lr, [sp, #20]
   1b174:	beq	1b200 <__assert_fail@plt+0x9e30>
   1b178:	mov	r4, r2
   1b17c:	mov	r6, ip
   1b180:	bl	1b08c <__assert_fail@plt+0x9cbc>
   1b184:	subs	r7, r0, #0
   1b188:	beq	1b1d4 <__assert_fail@plt+0x9e04>
   1b18c:	mov	r0, r5
   1b190:	mov	r1, r4
   1b194:	bl	11154 <localtime_r@plt>
   1b198:	cmp	r0, #0
   1b19c:	beq	1b1c4 <__assert_fail@plt+0x9df4>
   1b1a0:	mov	r0, r6
   1b1a4:	mov	r1, r4
   1b1a8:	bl	1af58 <__assert_fail@plt+0x9b88>
   1b1ac:	cmp	r0, #0
   1b1b0:	beq	1b1c4 <__assert_fail@plt+0x9df4>
   1b1b4:	cmp	r7, #1
   1b1b8:	bne	1b1ec <__assert_fail@plt+0x9e1c>
   1b1bc:	mov	r0, r4
   1b1c0:	b	1b1d8 <__assert_fail@plt+0x9e08>
   1b1c4:	cmp	r7, #1
   1b1c8:	beq	1b1d4 <__assert_fail@plt+0x9e04>
   1b1cc:	mov	r0, r7
   1b1d0:	bl	1ae50 <__assert_fail@plt+0x9a80>
   1b1d4:	mov	r0, #0
   1b1d8:	ldrd	r4, [sp]
   1b1dc:	ldrd	r6, [sp, #8]
   1b1e0:	ldr	r8, [sp, #16]
   1b1e4:	add	sp, sp, #20
   1b1e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b1ec:	mov	r0, r7
   1b1f0:	bl	1ae50 <__assert_fail@plt+0x9a80>
   1b1f4:	cmp	r0, #0
   1b1f8:	bne	1b1bc <__assert_fail@plt+0x9dec>
   1b1fc:	b	1b1d4 <__assert_fail@plt+0x9e04>
   1b200:	mov	r0, r5
   1b204:	mov	r1, r2
   1b208:	ldrd	r4, [sp]
   1b20c:	ldrd	r6, [sp, #8]
   1b210:	ldr	r8, [sp, #16]
   1b214:	ldr	lr, [sp, #20]
   1b218:	add	sp, sp, #24
   1b21c:	b	11088 <gmtime_r@plt>
   1b220:	strd	r4, [sp, #-20]!	; 0xffffffec
   1b224:	subs	r5, r0, #0
   1b228:	strd	r6, [sp, #8]
   1b22c:	mov	r6, r1
   1b230:	str	lr, [sp, #16]
   1b234:	sub	sp, sp, #52	; 0x34
   1b238:	beq	1b328 <__assert_fail@plt+0x9f58>
   1b23c:	bl	1b08c <__assert_fail@plt+0x9cbc>
   1b240:	subs	r4, r0, #0
   1b244:	beq	1b2a8 <__assert_fail@plt+0x9ed8>
   1b248:	ldr	r3, [r6]
   1b24c:	mvn	r2, #0
   1b250:	add	r0, sp, #4
   1b254:	ldr	r1, [r6, #4]
   1b258:	str	r3, [sp, #4]
   1b25c:	str	r2, [sp, #32]
   1b260:	ldrd	r2, [r6, #8]
   1b264:	str	r1, [sp, #8]
   1b268:	ldr	r1, [r6, #16]
   1b26c:	strd	r2, [sp, #12]
   1b270:	ldr	r2, [r6, #20]
   1b274:	str	r1, [sp, #20]
   1b278:	ldr	r3, [r6, #32]
   1b27c:	str	r2, [sp, #24]
   1b280:	str	r3, [sp, #36]	; 0x24
   1b284:	bl	110b8 <mktime@plt>
   1b288:	ldr	r3, [sp, #32]
   1b28c:	mov	r7, r0
   1b290:	cmp	r3, #0
   1b294:	bge	1b2c4 <__assert_fail@plt+0x9ef4>
   1b298:	cmp	r4, #1
   1b29c:	beq	1b2a8 <__assert_fail@plt+0x9ed8>
   1b2a0:	mov	r0, r4
   1b2a4:	bl	1ae50 <__assert_fail@plt+0x9a80>
   1b2a8:	mvn	r7, #0
   1b2ac:	mov	r0, r7
   1b2b0:	add	sp, sp, #52	; 0x34
   1b2b4:	ldrd	r4, [sp]
   1b2b8:	ldrd	r6, [sp, #8]
   1b2bc:	add	sp, sp, #16
   1b2c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b2c4:	mov	r0, r5
   1b2c8:	add	r1, sp, #4
   1b2cc:	bl	1af58 <__assert_fail@plt+0x9b88>
   1b2d0:	cmp	r0, #0
   1b2d4:	beq	1b298 <__assert_fail@plt+0x9ec8>
   1b2d8:	cmp	r4, #1
   1b2dc:	bne	1b314 <__assert_fail@plt+0x9f44>
   1b2e0:	ldrd	r0, [sp, #4]
   1b2e4:	ldrd	r2, [sp, #12]
   1b2e8:	ldrd	r4, [sp, #20]
   1b2ec:	strd	r0, [r6]
   1b2f0:	ldrd	r0, [sp, #28]
   1b2f4:	strd	r2, [r6, #8]
   1b2f8:	ldrd	r2, [sp, #36]	; 0x24
   1b2fc:	strd	r4, [r6, #16]
   1b300:	ldr	ip, [sp, #44]	; 0x2c
   1b304:	strd	r0, [r6, #24]
   1b308:	strd	r2, [r6, #32]
   1b30c:	str	ip, [r6, #40]	; 0x28
   1b310:	b	1b2ac <__assert_fail@plt+0x9edc>
   1b314:	mov	r0, r4
   1b318:	bl	1ae50 <__assert_fail@plt+0x9a80>
   1b31c:	cmp	r0, #0
   1b320:	bne	1b2e0 <__assert_fail@plt+0x9f10>
   1b324:	b	1b2a8 <__assert_fail@plt+0x9ed8>
   1b328:	mov	r0, r1
   1b32c:	bl	1134c <timegm@plt>
   1b330:	mov	r7, r0
   1b334:	b	1b2ac <__assert_fail@plt+0x9edc>
   1b338:	cmp	r1, #0
   1b33c:	strd	r4, [sp, #-16]!
   1b340:	mov	ip, r3
   1b344:	str	r6, [sp, #8]
   1b348:	mov	r4, r0
   1b34c:	str	lr, [sp, #12]
   1b350:	sub	sp, sp, #32
   1b354:	ldr	r5, [sp, #48]	; 0x30
   1b358:	ldr	r6, [sp, #52]	; 0x34
   1b35c:	beq	1b4a0 <__assert_fail@plt+0xa0d0>
   1b360:	mov	r3, r1
   1b364:	mov	r1, #1
   1b368:	stm	sp, {r2, ip}
   1b36c:	movw	r2, #2840	; 0xb18
   1b370:	movt	r2, #2
   1b374:	bl	112ec <__fprintf_chk@plt>
   1b378:	mov	r2, #5
   1b37c:	movw	r1, #2860	; 0xb2c
   1b380:	movt	r1, #2
   1b384:	mov	r0, #0
   1b388:	bl	11130 <dcgettext@plt>
   1b38c:	movw	ip, #2022	; 0x7e6
   1b390:	mov	r3, r0
   1b394:	mov	r1, #1
   1b398:	movw	r2, #3588	; 0xe04
   1b39c:	movt	r2, #2
   1b3a0:	mov	r0, r4
   1b3a4:	str	ip, [sp]
   1b3a8:	bl	112ec <__fprintf_chk@plt>
   1b3ac:	mov	r1, r4
   1b3b0:	mov	r0, #10
   1b3b4:	bl	11124 <fputc_unlocked@plt>
   1b3b8:	mov	r2, #5
   1b3bc:	movw	r1, #2864	; 0xb30
   1b3c0:	movt	r1, #2
   1b3c4:	mov	r0, #0
   1b3c8:	bl	11130 <dcgettext@plt>
   1b3cc:	mov	r2, r0
   1b3d0:	mov	r1, #1
   1b3d4:	movw	r3, #3036	; 0xbdc
   1b3d8:	movt	r3, #2
   1b3dc:	mov	r0, r4
   1b3e0:	bl	112ec <__fprintf_chk@plt>
   1b3e4:	mov	r1, r4
   1b3e8:	mov	r0, #10
   1b3ec:	bl	11124 <fputc_unlocked@plt>
   1b3f0:	cmp	r6, #9
   1b3f4:	ldrls	pc, [pc, r6, lsl #2]
   1b3f8:	b	1b70c <__assert_fail@plt+0xa33c>
   1b3fc:	andeq	fp, r1, ip, lsl #9
   1b400:			; <UNDEFINED> instruction: 0x0001b4bc
   1b404:	strdeq	fp, [r1], -r8
   1b408:	andeq	fp, r1, r8, lsr r5
   1b40c:	andeq	fp, r1, r0, lsl #11
   1b410:			; <UNDEFINED> instruction: 0x0001b5b8
   1b414:	andeq	fp, r1, r0, lsl #12
   1b418:	andeq	fp, r1, r4, asr r6
   1b41c:	andeq	fp, r1, ip, lsr #13
   1b420:	andeq	fp, r1, r4, lsr #8
   1b424:	movw	r1, #3340	; 0xd0c
   1b428:	movt	r1, #2
   1b42c:	mov	r2, #5
   1b430:	mov	r0, #0
   1b434:	bl	11130 <dcgettext@plt>
   1b438:	ldr	lr, [r5, #4]
   1b43c:	mov	r2, r0
   1b440:	mov	r1, #1
   1b444:	mov	r0, r4
   1b448:	ldr	r3, [r5, #8]
   1b44c:	ldr	ip, [r5, #32]
   1b450:	str	lr, [sp]
   1b454:	ldr	lr, [r5, #12]
   1b458:	str	ip, [sp, #28]
   1b45c:	ldr	ip, [r5, #28]
   1b460:	str	r3, [sp, #4]
   1b464:	ldr	r3, [r5, #16]
   1b468:	str	lr, [sp, #8]
   1b46c:	ldr	lr, [r5, #20]
   1b470:	str	ip, [sp, #24]
   1b474:	ldr	ip, [r5, #24]
   1b478:	str	r3, [sp, #12]
   1b47c:	ldr	r3, [r5]
   1b480:	str	lr, [sp, #16]
   1b484:	str	ip, [sp, #20]
   1b488:	bl	112ec <__fprintf_chk@plt>
   1b48c:	add	sp, sp, #32
   1b490:	ldrd	r4, [sp]
   1b494:	ldr	r6, [sp, #8]
   1b498:	add	sp, sp, #12
   1b49c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b4a0:	mov	r3, r2
   1b4a4:	mov	r1, #1
   1b4a8:	str	ip, [sp]
   1b4ac:	movw	r2, #2852	; 0xb24
   1b4b0:	movt	r2, #2
   1b4b4:	bl	112ec <__fprintf_chk@plt>
   1b4b8:	b	1b378 <__assert_fail@plt+0x9fa8>
   1b4bc:	mov	r2, #5
   1b4c0:	movw	r1, #3072	; 0xc00
   1b4c4:	movt	r1, #2
   1b4c8:	mov	r0, #0
   1b4cc:	bl	11130 <dcgettext@plt>
   1b4d0:	ldr	r3, [r5]
   1b4d4:	mov	r2, r0
   1b4d8:	mov	r1, #1
   1b4dc:	mov	r0, r4
   1b4e0:	add	sp, sp, #32
   1b4e4:	ldrd	r4, [sp]
   1b4e8:	ldr	r6, [sp, #8]
   1b4ec:	ldr	lr, [sp, #12]
   1b4f0:	add	sp, sp, #16
   1b4f4:	b	112ec <__fprintf_chk@plt>
   1b4f8:	mov	r2, #5
   1b4fc:	movw	r1, #3088	; 0xc10
   1b500:	movt	r1, #2
   1b504:	mov	r0, #0
   1b508:	bl	11130 <dcgettext@plt>
   1b50c:	ldm	r5, {r3, ip}
   1b510:	mov	r2, r0
   1b514:	mov	r1, #1
   1b518:	mov	r0, r4
   1b51c:	str	ip, [sp, #48]	; 0x30
   1b520:	add	sp, sp, #32
   1b524:	ldrd	r4, [sp]
   1b528:	ldr	r6, [sp, #8]
   1b52c:	ldr	lr, [sp, #12]
   1b530:	add	sp, sp, #16
   1b534:	b	112ec <__fprintf_chk@plt>
   1b538:	mov	r2, #5
   1b53c:	movw	r1, #3112	; 0xc28
   1b540:	movt	r1, #2
   1b544:	mov	r0, #0
   1b548:	bl	11130 <dcgettext@plt>
   1b54c:	ldm	r5, {r3, lr}
   1b550:	mov	r2, r0
   1b554:	mov	r1, #1
   1b558:	mov	r0, r4
   1b55c:	ldr	ip, [r5, #8]
   1b560:	str	lr, [sp, #48]	; 0x30
   1b564:	str	ip, [sp, #52]	; 0x34
   1b568:	add	sp, sp, #32
   1b56c:	ldrd	r4, [sp]
   1b570:	ldr	r6, [sp, #8]
   1b574:	ldr	lr, [sp, #12]
   1b578:	add	sp, sp, #16
   1b57c:	b	112ec <__fprintf_chk@plt>
   1b580:	mov	r2, #5
   1b584:	movw	r1, #3140	; 0xc44
   1b588:	movt	r1, #2
   1b58c:	mov	r0, #0
   1b590:	bl	11130 <dcgettext@plt>
   1b594:	ldmib	r5, {r3, ip, lr}
   1b598:	mov	r2, r0
   1b59c:	mov	r1, #1
   1b5a0:	mov	r0, r4
   1b5a4:	str	r3, [sp]
   1b5a8:	ldr	r3, [r5]
   1b5ac:	stmib	sp, {ip, lr}
   1b5b0:	bl	112ec <__fprintf_chk@plt>
   1b5b4:	b	1b48c <__assert_fail@plt+0xa0bc>
   1b5b8:	mov	r2, #5
   1b5bc:	movw	r1, #3172	; 0xc64
   1b5c0:	movt	r1, #2
   1b5c4:	mov	r0, #0
   1b5c8:	bl	11130 <dcgettext@plt>
   1b5cc:	ldmib	r5, {ip, lr}
   1b5d0:	mov	r2, r0
   1b5d4:	mov	r1, #1
   1b5d8:	mov	r0, r4
   1b5dc:	ldr	r3, [r5, #16]
   1b5e0:	str	ip, [sp]
   1b5e4:	ldr	ip, [r5, #12]
   1b5e8:	str	r3, [sp, #12]
   1b5ec:	ldr	r3, [r5]
   1b5f0:	str	lr, [sp, #4]
   1b5f4:	str	ip, [sp, #8]
   1b5f8:	bl	112ec <__fprintf_chk@plt>
   1b5fc:	b	1b48c <__assert_fail@plt+0xa0bc>
   1b600:	mov	r2, #5
   1b604:	movw	r1, #3208	; 0xc88
   1b608:	movt	r1, #2
   1b60c:	mov	r0, #0
   1b610:	bl	11130 <dcgettext@plt>
   1b614:	ldr	lr, [r5, #4]
   1b618:	mov	r2, r0
   1b61c:	mov	r1, #1
   1b620:	mov	r0, r4
   1b624:	ldr	r3, [r5, #8]
   1b628:	ldr	ip, [r5, #20]
   1b62c:	str	lr, [sp]
   1b630:	ldr	lr, [r5, #12]
   1b634:	str	ip, [sp, #16]
   1b638:	ldr	ip, [r5, #16]
   1b63c:	str	r3, [sp, #4]
   1b640:	ldr	r3, [r5]
   1b644:	str	lr, [sp, #8]
   1b648:	str	ip, [sp, #12]
   1b64c:	bl	112ec <__fprintf_chk@plt>
   1b650:	b	1b48c <__assert_fail@plt+0xa0bc>
   1b654:	mov	r2, #5
   1b658:	movw	r1, #3248	; 0xcb0
   1b65c:	movt	r1, #2
   1b660:	mov	r0, #0
   1b664:	bl	11130 <dcgettext@plt>
   1b668:	ldmib	r5, {r3, ip}
   1b66c:	mov	r2, r0
   1b670:	mov	r1, #1
   1b674:	mov	r0, r4
   1b678:	ldr	lr, [r5, #24]
   1b67c:	str	r3, [sp]
   1b680:	ldr	r3, [r5, #12]
   1b684:	str	lr, [sp, #20]
   1b688:	ldr	lr, [r5, #20]
   1b68c:	str	ip, [sp, #4]
   1b690:	ldr	ip, [r5, #16]
   1b694:	str	r3, [sp, #8]
   1b698:	ldr	r3, [r5]
   1b69c:	str	ip, [sp, #12]
   1b6a0:	str	lr, [sp, #16]
   1b6a4:	bl	112ec <__fprintf_chk@plt>
   1b6a8:	b	1b48c <__assert_fail@plt+0xa0bc>
   1b6ac:	mov	r2, #5
   1b6b0:	movw	r1, #3292	; 0xcdc
   1b6b4:	movt	r1, #2
   1b6b8:	mov	r0, #0
   1b6bc:	bl	11130 <dcgettext@plt>
   1b6c0:	ldmib	r5, {ip, lr}
   1b6c4:	mov	r2, r0
   1b6c8:	mov	r1, #1
   1b6cc:	mov	r0, r4
   1b6d0:	ldr	r3, [r5, #28]
   1b6d4:	str	ip, [sp]
   1b6d8:	ldr	ip, [r5, #12]
   1b6dc:	str	r3, [sp, #24]
   1b6e0:	ldr	r3, [r5, #24]
   1b6e4:	str	lr, [sp, #4]
   1b6e8:	ldr	lr, [r5, #16]
   1b6ec:	str	ip, [sp, #8]
   1b6f0:	ldr	ip, [r5, #20]
   1b6f4:	str	r3, [sp, #20]
   1b6f8:	ldr	r3, [r5]
   1b6fc:	str	lr, [sp, #12]
   1b700:	str	ip, [sp, #16]
   1b704:	bl	112ec <__fprintf_chk@plt>
   1b708:	b	1b48c <__assert_fail@plt+0xa0bc>
   1b70c:	movw	r1, #3392	; 0xd40
   1b710:	movt	r1, #2
   1b714:	b	1b42c <__assert_fail@plt+0xa05c>
   1b718:	strd	r4, [sp, #-12]!
   1b71c:	str	lr, [sp, #8]
   1b720:	sub	sp, sp, #12
   1b724:	ldr	r5, [sp, #24]
   1b728:	ldr	ip, [r5]
   1b72c:	cmp	ip, #0
   1b730:	beq	1b74c <__assert_fail@plt+0xa37c>
   1b734:	mov	lr, r5
   1b738:	mov	ip, #0
   1b73c:	ldr	r4, [lr, #4]!
   1b740:	add	ip, ip, #1
   1b744:	cmp	r4, #0
   1b748:	bne	1b73c <__assert_fail@plt+0xa36c>
   1b74c:	stm	sp, {r5, ip}
   1b750:	bl	1b338 <__assert_fail@plt+0x9f68>
   1b754:	add	sp, sp, #12
   1b758:	ldrd	r4, [sp]
   1b75c:	add	sp, sp, #8
   1b760:	pop	{pc}		; (ldr pc, [sp], #4)
   1b764:	strd	r4, [sp, #-16]!
   1b768:	mov	ip, #0
   1b76c:	str	r6, [sp, #8]
   1b770:	str	lr, [sp, #12]
   1b774:	sub	sp, sp, #48	; 0x30
   1b778:	ldr	r5, [sp, #64]	; 0x40
   1b77c:	add	r6, sp, #8
   1b780:	mov	r4, r6
   1b784:	ldr	lr, [r5], #4
   1b788:	cmp	lr, #0
   1b78c:	str	lr, [r4], #4
   1b790:	beq	1b7a0 <__assert_fail@plt+0xa3d0>
   1b794:	add	ip, ip, #1
   1b798:	cmp	ip, #10
   1b79c:	bne	1b784 <__assert_fail@plt+0xa3b4>
   1b7a0:	stm	sp, {r6, ip}
   1b7a4:	bl	1b338 <__assert_fail@plt+0x9f68>
   1b7a8:	add	sp, sp, #48	; 0x30
   1b7ac:	ldrd	r4, [sp]
   1b7b0:	ldr	r6, [sp, #8]
   1b7b4:	add	sp, sp, #12
   1b7b8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b7bc:	push	{r3}		; (str r3, [sp, #-4]!)
   1b7c0:	mov	ip, #0
   1b7c4:	strd	r4, [sp, #-12]!
   1b7c8:	str	lr, [sp, #8]
   1b7cc:	sub	sp, sp, #56	; 0x38
   1b7d0:	add	r3, sp, #72	; 0x48
   1b7d4:	add	r5, sp, #16
   1b7d8:	mov	r4, r3
   1b7dc:	mov	lr, r5
   1b7e0:	str	r3, [sp, #12]
   1b7e4:	ldr	r3, [r4], #4
   1b7e8:	cmp	r3, #0
   1b7ec:	str	r3, [lr], #4
   1b7f0:	beq	1b800 <__assert_fail@plt+0xa430>
   1b7f4:	add	ip, ip, #1
   1b7f8:	cmp	ip, #10
   1b7fc:	bne	1b7e4 <__assert_fail@plt+0xa414>
   1b800:	ldr	r3, [sp, #68]	; 0x44
   1b804:	stm	sp, {r5, ip}
   1b808:	bl	1b338 <__assert_fail@plt+0x9f68>
   1b80c:	add	sp, sp, #56	; 0x38
   1b810:	ldrd	r4, [sp]
   1b814:	ldr	lr, [sp, #8]
   1b818:	add	sp, sp, #12
   1b81c:	add	sp, sp, #4
   1b820:	bx	lr
   1b824:	movw	r3, #4516	; 0x11a4
   1b828:	movt	r3, #3
   1b82c:	str	r4, [sp, #-8]!
   1b830:	mov	r0, #10
   1b834:	ldr	r1, [r3]
   1b838:	str	lr, [sp, #4]
   1b83c:	bl	11124 <fputc_unlocked@plt>
   1b840:	mov	r2, #5
   1b844:	movw	r1, #3452	; 0xd7c
   1b848:	movt	r1, #2
   1b84c:	mov	r0, #0
   1b850:	bl	11130 <dcgettext@plt>
   1b854:	mov	r1, r0
   1b858:	movw	r2, #3472	; 0xd90
   1b85c:	movt	r2, #2
   1b860:	mov	r0, #1
   1b864:	bl	112d4 <__printf_chk@plt>
   1b868:	mov	r2, #5
   1b86c:	movw	r1, #3496	; 0xda8
   1b870:	movt	r1, #2
   1b874:	mov	r0, #0
   1b878:	bl	11130 <dcgettext@plt>
   1b87c:	mov	r1, r0
   1b880:	movw	r3, #60416	; 0xec00
   1b884:	movt	r3, #1
   1b888:	movw	r2, #60456	; 0xec28
   1b88c:	movt	r2, #1
   1b890:	mov	r0, #1
   1b894:	bl	112d4 <__printf_chk@plt>
   1b898:	mov	r2, #5
   1b89c:	movw	r1, #3516	; 0xdbc
   1b8a0:	movt	r1, #2
   1b8a4:	mov	r0, #0
   1b8a8:	bl	11130 <dcgettext@plt>
   1b8ac:	mov	r1, r0
   1b8b0:	movw	r2, #3556	; 0xde4
   1b8b4:	movt	r2, #2
   1b8b8:	mov	r0, #1
   1b8bc:	ldr	r4, [sp]
   1b8c0:	ldr	lr, [sp, #4]
   1b8c4:	add	sp, sp, #8
   1b8c8:	b	112d4 <__printf_chk@plt>
   1b8cc:	str	r4, [sp, #-8]!
   1b8d0:	str	lr, [sp, #4]
   1b8d4:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1b8d8:	cmp	r0, #0
   1b8dc:	beq	1b8ec <__assert_fail@plt+0xa51c>
   1b8e0:	ldr	r4, [sp]
   1b8e4:	add	sp, sp, #4
   1b8e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b8ec:	bl	1bd44 <__assert_fail@plt+0xa974>
   1b8f0:	str	r4, [sp, #-8]!
   1b8f4:	str	lr, [sp, #4]
   1b8f8:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1b8fc:	cmp	r0, #0
   1b900:	beq	1b910 <__assert_fail@plt+0xa540>
   1b904:	ldr	r4, [sp]
   1b908:	add	sp, sp, #4
   1b90c:	pop	{pc}		; (ldr pc, [sp], #4)
   1b910:	bl	1bd44 <__assert_fail@plt+0xa974>
   1b914:	str	r4, [sp, #-8]!
   1b918:	str	lr, [sp, #4]
   1b91c:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1b920:	cmp	r0, #0
   1b924:	beq	1b934 <__assert_fail@plt+0xa564>
   1b928:	ldr	r4, [sp]
   1b92c:	add	sp, sp, #4
   1b930:	pop	{pc}		; (ldr pc, [sp], #4)
   1b934:	bl	1bd44 <__assert_fail@plt+0xa974>
   1b938:	strd	r4, [sp, #-16]!
   1b93c:	mov	r5, r0
   1b940:	mov	r4, r1
   1b944:	str	r6, [sp, #8]
   1b948:	str	lr, [sp, #12]
   1b94c:	bl	1be38 <__assert_fail@plt+0xaa68>
   1b950:	cmp	r0, #0
   1b954:	beq	1b968 <__assert_fail@plt+0xa598>
   1b958:	ldrd	r4, [sp]
   1b95c:	ldr	r6, [sp, #8]
   1b960:	add	sp, sp, #12
   1b964:	pop	{pc}		; (ldr pc, [sp], #4)
   1b968:	adds	r4, r4, #0
   1b96c:	movne	r4, #1
   1b970:	cmp	r5, #0
   1b974:	moveq	r4, #1
   1b978:	cmp	r4, #0
   1b97c:	beq	1b958 <__assert_fail@plt+0xa588>
   1b980:	bl	1bd44 <__assert_fail@plt+0xa974>
   1b984:	cmp	r1, #0
   1b988:	orreq	r1, r1, #1
   1b98c:	str	r4, [sp, #-8]!
   1b990:	str	lr, [sp, #4]
   1b994:	bl	1be38 <__assert_fail@plt+0xaa68>
   1b998:	cmp	r0, #0
   1b99c:	beq	1b9ac <__assert_fail@plt+0xa5dc>
   1b9a0:	ldr	r4, [sp]
   1b9a4:	add	sp, sp, #4
   1b9a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9ac:	bl	1bd44 <__assert_fail@plt+0xa974>
   1b9b0:	strd	r4, [sp, #-16]!
   1b9b4:	mov	r4, r0
   1b9b8:	mov	r5, r2
   1b9bc:	str	r6, [sp, #8]
   1b9c0:	mov	r6, r1
   1b9c4:	str	lr, [sp, #12]
   1b9c8:	bl	1e11c <__assert_fail@plt+0xcd4c>
   1b9cc:	cmp	r0, #0
   1b9d0:	beq	1b9e4 <__assert_fail@plt+0xa614>
   1b9d4:	ldrd	r4, [sp]
   1b9d8:	ldr	r6, [sp, #8]
   1b9dc:	add	sp, sp, #12
   1b9e0:	pop	{pc}		; (ldr pc, [sp], #4)
   1b9e4:	cmp	r4, #0
   1b9e8:	beq	1b9f8 <__assert_fail@plt+0xa628>
   1b9ec:	cmp	r6, #0
   1b9f0:	cmpne	r5, #0
   1b9f4:	beq	1b9d4 <__assert_fail@plt+0xa604>
   1b9f8:	bl	1bd44 <__assert_fail@plt+0xa974>
   1b9fc:	b	1b9b0 <__assert_fail@plt+0xa5e0>
   1ba00:	cmp	r2, #0
   1ba04:	cmpne	r1, #0
   1ba08:	str	r4, [sp, #-8]!
   1ba0c:	moveq	r2, #1
   1ba10:	str	lr, [sp, #4]
   1ba14:	moveq	r1, r2
   1ba18:	bl	1e11c <__assert_fail@plt+0xcd4c>
   1ba1c:	cmp	r0, #0
   1ba20:	beq	1ba30 <__assert_fail@plt+0xa660>
   1ba24:	ldr	r4, [sp]
   1ba28:	add	sp, sp, #4
   1ba2c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba30:	bl	1bd44 <__assert_fail@plt+0xa974>
   1ba34:	mov	r2, r1
   1ba38:	mov	r1, r0
   1ba3c:	mov	r0, #0
   1ba40:	b	1b9b0 <__assert_fail@plt+0xa5e0>
   1ba44:	mov	r2, r1
   1ba48:	mov	r1, r0
   1ba4c:	mov	r0, #0
   1ba50:	b	1ba00 <__assert_fail@plt+0xa630>
   1ba54:	cmp	r0, #0
   1ba58:	strd	r4, [sp, #-16]!
   1ba5c:	mov	r5, r1
   1ba60:	ldr	r4, [r1]
   1ba64:	str	r6, [sp, #8]
   1ba68:	str	lr, [sp, #12]
   1ba6c:	beq	1ba9c <__assert_fail@plt+0xa6cc>
   1ba70:	lsr	r3, r4, #1
   1ba74:	add	r3, r3, #1
   1ba78:	adds	r4, r4, r3
   1ba7c:	bcs	1bab8 <__assert_fail@plt+0xa6e8>
   1ba80:	mov	r1, r4
   1ba84:	bl	1b9b0 <__assert_fail@plt+0xa5e0>
   1ba88:	ldr	r6, [sp, #8]
   1ba8c:	str	r4, [r5]
   1ba90:	ldrd	r4, [sp]
   1ba94:	add	sp, sp, #12
   1ba98:	pop	{pc}		; (ldr pc, [sp], #4)
   1ba9c:	cmp	r4, #0
   1baa0:	bne	1ba80 <__assert_fail@plt+0xa6b0>
   1baa4:	mov	r4, #64	; 0x40
   1baa8:	udiv	r4, r4, r2
   1baac:	cmp	r2, #64	; 0x40
   1bab0:	addhi	r4, r4, #1
   1bab4:	b	1ba80 <__assert_fail@plt+0xa6b0>
   1bab8:	bl	1bd44 <__assert_fail@plt+0xa974>
   1babc:	mov	r2, #1
   1bac0:	b	1ba54 <__assert_fail@plt+0xa684>
   1bac4:	ldr	ip, [r1]
   1bac8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1bacc:	mov	r5, r1
   1bad0:	strd	r6, [sp, #8]
   1bad4:	str	lr, [sp, #28]
   1bad8:	strd	r8, [sp, #16]
   1badc:	asr	lr, ip, #1
   1bae0:	ldr	r8, [sp, #32]
   1bae4:	str	sl, [sp, #24]
   1bae8:	adds	r4, ip, lr
   1baec:	mvn	lr, r3
   1baf0:	lsr	lr, lr, #31
   1baf4:	mvnvs	r4, #-2147483648	; 0x80000000
   1baf8:	cmp	r3, r4
   1bafc:	movge	r1, #0
   1bb00:	andlt	r1, lr, #1
   1bb04:	cmp	r1, #0
   1bb08:	movne	r4, r3
   1bb0c:	smull	r6, r7, r4, r8
   1bb10:	cmp	r7, r6, asr #31
   1bb14:	bne	1bb9c <__assert_fail@plt+0xa7cc>
   1bb18:	cmp	r6, #63	; 0x3f
   1bb1c:	mov	r1, r6
   1bb20:	ble	1bb84 <__assert_fail@plt+0xa7b4>
   1bb24:	cmp	r0, #0
   1bb28:	sub	r6, r4, ip
   1bb2c:	streq	r0, [r5]
   1bb30:	cmp	r6, r2
   1bb34:	bge	1bb64 <__assert_fail@plt+0xa794>
   1bb38:	adds	r4, ip, r2
   1bb3c:	bvs	1bb98 <__assert_fail@plt+0xa7c8>
   1bb40:	cmp	r4, r3
   1bb44:	movle	r3, #0
   1bb48:	andgt	r3, lr, #1
   1bb4c:	cmp	r3, #0
   1bb50:	bne	1bb98 <__assert_fail@plt+0xa7c8>
   1bb54:	smull	r8, r9, r4, r8
   1bb58:	cmp	r9, r8, asr #31
   1bb5c:	mov	r1, r8
   1bb60:	bne	1bb98 <__assert_fail@plt+0xa7c8>
   1bb64:	bl	1b938 <__assert_fail@plt+0xa568>
   1bb68:	ldrd	r6, [sp, #8]
   1bb6c:	ldrd	r8, [sp, #16]
   1bb70:	ldr	sl, [sp, #24]
   1bb74:	str	r4, [r5]
   1bb78:	ldrd	r4, [sp]
   1bb7c:	add	sp, sp, #28
   1bb80:	pop	{pc}		; (ldr pc, [sp], #4)
   1bb84:	mov	r6, #64	; 0x40
   1bb88:	sdiv	r4, r6, r8
   1bb8c:	mls	r1, r8, r4, r6
   1bb90:	sub	r1, r6, r1
   1bb94:	b	1bb24 <__assert_fail@plt+0xa754>
   1bb98:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bb9c:	mvn	r6, #-2147483648	; 0x80000000
   1bba0:	b	1bb88 <__assert_fail@plt+0xa7b8>
   1bba4:	mov	r1, #1
   1bba8:	str	r4, [sp, #-8]!
   1bbac:	str	lr, [sp, #4]
   1bbb0:	bl	1bd88 <__assert_fail@plt+0xa9b8>
   1bbb4:	cmp	r0, #0
   1bbb8:	beq	1bbc8 <__assert_fail@plt+0xa7f8>
   1bbbc:	ldr	r4, [sp]
   1bbc0:	add	sp, sp, #4
   1bbc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbc8:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bbcc:	mov	r1, #1
   1bbd0:	str	r4, [sp, #-8]!
   1bbd4:	str	lr, [sp, #4]
   1bbd8:	bl	1bd88 <__assert_fail@plt+0xa9b8>
   1bbdc:	cmp	r0, #0
   1bbe0:	beq	1bbf0 <__assert_fail@plt+0xa820>
   1bbe4:	ldr	r4, [sp]
   1bbe8:	add	sp, sp, #4
   1bbec:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbf0:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bbf4:	str	r4, [sp, #-8]!
   1bbf8:	str	lr, [sp, #4]
   1bbfc:	bl	1bd88 <__assert_fail@plt+0xa9b8>
   1bc00:	cmp	r0, #0
   1bc04:	beq	1bc14 <__assert_fail@plt+0xa844>
   1bc08:	ldr	r4, [sp]
   1bc0c:	add	sp, sp, #4
   1bc10:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc14:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bc18:	str	r4, [sp, #-8]!
   1bc1c:	str	lr, [sp, #4]
   1bc20:	bl	1bd88 <__assert_fail@plt+0xa9b8>
   1bc24:	cmp	r0, #0
   1bc28:	beq	1bc38 <__assert_fail@plt+0xa868>
   1bc2c:	ldr	r4, [sp]
   1bc30:	add	sp, sp, #4
   1bc34:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc38:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bc3c:	strd	r4, [sp, #-16]!
   1bc40:	mov	r4, r1
   1bc44:	str	r6, [sp, #8]
   1bc48:	mov	r6, r0
   1bc4c:	mov	r0, r1
   1bc50:	str	lr, [sp, #12]
   1bc54:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1bc58:	subs	r5, r0, #0
   1bc5c:	beq	1bc80 <__assert_fail@plt+0xa8b0>
   1bc60:	mov	r2, r4
   1bc64:	mov	r1, r6
   1bc68:	bl	110f4 <memcpy@plt>
   1bc6c:	mov	r0, r5
   1bc70:	ldrd	r4, [sp]
   1bc74:	ldr	r6, [sp, #8]
   1bc78:	add	sp, sp, #12
   1bc7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1bc80:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bc84:	strd	r4, [sp, #-16]!
   1bc88:	mov	r4, r1
   1bc8c:	str	r6, [sp, #8]
   1bc90:	mov	r6, r0
   1bc94:	mov	r0, r1
   1bc98:	str	lr, [sp, #12]
   1bc9c:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1bca0:	subs	r5, r0, #0
   1bca4:	beq	1bcc8 <__assert_fail@plt+0xa8f8>
   1bca8:	mov	r2, r4
   1bcac:	mov	r1, r6
   1bcb0:	bl	110f4 <memcpy@plt>
   1bcb4:	mov	r0, r5
   1bcb8:	ldrd	r4, [sp]
   1bcbc:	ldr	r6, [sp, #8]
   1bcc0:	add	sp, sp, #12
   1bcc4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bcc8:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bccc:	strd	r4, [sp, #-16]!
   1bcd0:	mov	r4, r1
   1bcd4:	str	r6, [sp, #8]
   1bcd8:	mov	r6, r0
   1bcdc:	add	r0, r1, #1
   1bce0:	str	lr, [sp, #12]
   1bce4:	bl	1bdfc <__assert_fail@plt+0xaa2c>
   1bce8:	subs	r5, r0, #0
   1bcec:	beq	1bd18 <__assert_fail@plt+0xa948>
   1bcf0:	mov	r3, #0
   1bcf4:	mov	r1, r6
   1bcf8:	mov	r2, r4
   1bcfc:	strb	r3, [r5, r4]
   1bd00:	bl	110f4 <memcpy@plt>
   1bd04:	mov	r0, r5
   1bd08:	ldrd	r4, [sp]
   1bd0c:	ldr	r6, [sp, #8]
   1bd10:	add	sp, sp, #12
   1bd14:	pop	{pc}		; (ldr pc, [sp], #4)
   1bd18:	bl	1bd44 <__assert_fail@plt+0xa974>
   1bd1c:	str	r4, [sp, #-8]!
   1bd20:	mov	r4, r0
   1bd24:	str	lr, [sp, #4]
   1bd28:	bl	11274 <strlen@plt>
   1bd2c:	add	r1, r0, #1
   1bd30:	mov	r0, r4
   1bd34:	ldr	r4, [sp]
   1bd38:	ldr	lr, [sp, #4]
   1bd3c:	add	sp, sp, #8
   1bd40:	b	1bc3c <__assert_fail@plt+0xa86c>
   1bd44:	movw	r3, #4424	; 0x1148
   1bd48:	movt	r3, #3
   1bd4c:	str	r4, [sp, #-8]!
   1bd50:	ldr	r4, [r3]
   1bd54:	mov	r2, #5
   1bd58:	movw	r1, #3636	; 0xe34
   1bd5c:	movt	r1, #2
   1bd60:	mov	r0, #0
   1bd64:	str	lr, [sp, #4]
   1bd68:	bl	11130 <dcgettext@plt>
   1bd6c:	mov	r3, r0
   1bd70:	movw	r2, #61376	; 0xefc0
   1bd74:	movt	r2, #1
   1bd78:	mov	r1, #0
   1bd7c:	mov	r0, r4
   1bd80:	bl	111c0 <error@plt>
   1bd84:	bl	113a0 <abort@plt>
   1bd88:	cmp	r1, #0
   1bd8c:	cmpne	r0, #0
   1bd90:	beq	1bddc <__assert_fail@plt+0xaa0c>
   1bd94:	strd	r4, [sp, #-16]!
   1bd98:	umull	r4, r5, r0, r1
   1bd9c:	str	r6, [sp, #8]
   1bda0:	str	lr, [sp, #12]
   1bda4:	adds	r3, r5, #0
   1bda8:	movne	r3, #1
   1bdac:	cmp	r4, #0
   1bdb0:	blt	1bdbc <__assert_fail@plt+0xa9ec>
   1bdb4:	cmp	r3, #0
   1bdb8:	beq	1bde8 <__assert_fail@plt+0xaa18>
   1bdbc:	bl	11298 <__errno_location@plt>
   1bdc0:	mov	r3, #12
   1bdc4:	ldrd	r4, [sp]
   1bdc8:	ldr	r6, [sp, #8]
   1bdcc:	add	sp, sp, #12
   1bdd0:	str	r3, [r0]
   1bdd4:	mov	r0, #0
   1bdd8:	pop	{pc}		; (ldr pc, [sp], #4)
   1bddc:	mov	r1, #1
   1bde0:	mov	r0, r1
   1bde4:	b	11064 <calloc@plt>
   1bde8:	ldrd	r4, [sp]
   1bdec:	ldr	r6, [sp, #8]
   1bdf0:	ldr	lr, [sp, #12]
   1bdf4:	add	sp, sp, #16
   1bdf8:	b	11064 <calloc@plt>
   1bdfc:	cmp	r0, #0
   1be00:	beq	1be0c <__assert_fail@plt+0xaa3c>
   1be04:	blt	1be14 <__assert_fail@plt+0xaa44>
   1be08:	b	111e4 <malloc@plt>
   1be0c:	mov	r0, #1
   1be10:	b	111e4 <malloc@plt>
   1be14:	str	r4, [sp, #-8]!
   1be18:	str	lr, [sp, #4]
   1be1c:	bl	11298 <__errno_location@plt>
   1be20:	mov	r3, #12
   1be24:	ldr	r4, [sp]
   1be28:	add	sp, sp, #4
   1be2c:	str	r3, [r0]
   1be30:	mov	r0, #0
   1be34:	pop	{pc}		; (ldr pc, [sp], #4)
   1be38:	cmp	r0, #0
   1be3c:	beq	1be64 <__assert_fail@plt+0xaa94>
   1be40:	cmp	r1, #0
   1be44:	str	r4, [sp, #-8]!
   1be48:	str	lr, [sp, #4]
   1be4c:	beq	1be6c <__assert_fail@plt+0xaa9c>
   1be50:	blt	1be80 <__assert_fail@plt+0xaab0>
   1be54:	ldr	r4, [sp]
   1be58:	ldr	lr, [sp, #4]
   1be5c:	add	sp, sp, #8
   1be60:	b	11148 <realloc@plt>
   1be64:	mov	r0, r1
   1be68:	b	1bdfc <__assert_fail@plt+0xaa2c>
   1be6c:	bl	1c02c <__assert_fail@plt+0xac5c>
   1be70:	ldr	r4, [sp]
   1be74:	add	sp, sp, #4
   1be78:	mov	r0, #0
   1be7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1be80:	bl	11298 <__errno_location@plt>
   1be84:	mov	r3, #12
   1be88:	str	r3, [r0]
   1be8c:	b	1be70 <__assert_fail@plt+0xaaa0>
   1be90:	strd	r4, [sp, #-16]!
   1be94:	mov	r4, r0
   1be98:	str	r6, [sp, #8]
   1be9c:	str	lr, [sp, #12]
   1bea0:	bl	111a8 <__fpending@plt>
   1bea4:	ldr	r5, [r4]
   1bea8:	mov	r6, r0
   1beac:	mov	r0, r4
   1beb0:	bl	1bf18 <__assert_fail@plt+0xab48>
   1beb4:	mov	r4, r0
   1beb8:	and	r5, r5, #32
   1bebc:	cmp	r5, #0
   1bec0:	bne	1bef8 <__assert_fail@plt+0xab28>
   1bec4:	cmp	r0, #0
   1bec8:	beq	1bee4 <__assert_fail@plt+0xab14>
   1becc:	cmp	r6, #0
   1bed0:	bne	1bf10 <__assert_fail@plt+0xab40>
   1bed4:	bl	11298 <__errno_location@plt>
   1bed8:	ldr	r4, [r0]
   1bedc:	subs	r4, r4, #9
   1bee0:	mvnne	r4, #0
   1bee4:	mov	r0, r4
   1bee8:	ldrd	r4, [sp]
   1beec:	ldr	r6, [sp, #8]
   1bef0:	add	sp, sp, #12
   1bef4:	pop	{pc}		; (ldr pc, [sp], #4)
   1bef8:	cmp	r0, #0
   1befc:	bne	1bf10 <__assert_fail@plt+0xab40>
   1bf00:	bl	11298 <__errno_location@plt>
   1bf04:	str	r4, [r0]
   1bf08:	mvn	r4, #0
   1bf0c:	b	1bee4 <__assert_fail@plt+0xab14>
   1bf10:	mvn	r4, #0
   1bf14:	b	1bee4 <__assert_fail@plt+0xab14>
   1bf18:	strd	r4, [sp, #-12]!
   1bf1c:	mov	r4, r0
   1bf20:	str	lr, [sp, #8]
   1bf24:	sub	sp, sp, #12
   1bf28:	bl	112e0 <fileno@plt>
   1bf2c:	cmp	r0, #0
   1bf30:	mov	r0, r4
   1bf34:	blt	1bfb8 <__assert_fail@plt+0xabe8>
   1bf38:	bl	11214 <__freading@plt>
   1bf3c:	cmp	r0, #0
   1bf40:	bne	1bf84 <__assert_fail@plt+0xabb4>
   1bf44:	mov	r0, r4
   1bf48:	bl	1bfcc <__assert_fail@plt+0xabfc>
   1bf4c:	cmp	r0, #0
   1bf50:	beq	1bfb4 <__assert_fail@plt+0xabe4>
   1bf54:	bl	11298 <__errno_location@plt>
   1bf58:	mov	r5, r0
   1bf5c:	mov	r0, r4
   1bf60:	ldr	r4, [r5]
   1bf64:	bl	112f8 <fclose@plt>
   1bf68:	cmp	r4, #0
   1bf6c:	mvnne	r0, #0
   1bf70:	strne	r4, [r5]
   1bf74:	add	sp, sp, #12
   1bf78:	ldrd	r4, [sp]
   1bf7c:	add	sp, sp, #8
   1bf80:	pop	{pc}		; (ldr pc, [sp], #4)
   1bf84:	mov	r0, r4
   1bf88:	bl	112e0 <fileno@plt>
   1bf8c:	mov	r1, #1
   1bf90:	mov	r2, #0
   1bf94:	mov	r3, #0
   1bf98:	str	r1, [sp]
   1bf9c:	bl	11190 <lseek64@plt>
   1bfa0:	mvn	r3, #0
   1bfa4:	mvn	r2, #0
   1bfa8:	cmp	r1, r3
   1bfac:	cmpeq	r0, r2
   1bfb0:	bne	1bf44 <__assert_fail@plt+0xab74>
   1bfb4:	mov	r0, r4
   1bfb8:	add	sp, sp, #12
   1bfbc:	ldrd	r4, [sp]
   1bfc0:	ldr	lr, [sp, #8]
   1bfc4:	add	sp, sp, #12
   1bfc8:	b	112f8 <fclose@plt>
   1bfcc:	str	r4, [sp, #-8]!
   1bfd0:	subs	r4, r0, #0
   1bfd4:	str	lr, [sp, #4]
   1bfd8:	sub	sp, sp, #8
   1bfdc:	beq	1bff8 <__assert_fail@plt+0xac28>
   1bfe0:	bl	11214 <__freading@plt>
   1bfe4:	cmp	r0, #0
   1bfe8:	beq	1bff8 <__assert_fail@plt+0xac28>
   1bfec:	ldr	r3, [r4]
   1bff0:	tst	r3, #256	; 0x100
   1bff4:	bne	1c010 <__assert_fail@plt+0xac40>
   1bff8:	mov	r0, r4
   1bffc:	add	sp, sp, #8
   1c000:	ldr	r4, [sp]
   1c004:	ldr	lr, [sp, #4]
   1c008:	add	sp, sp, #8
   1c00c:	b	110c4 <fflush@plt>
   1c010:	mov	r1, #1
   1c014:	mov	r2, #0
   1c018:	mov	r3, #0
   1c01c:	mov	r0, r4
   1c020:	str	r1, [sp]
   1c024:	bl	1c08c <__assert_fail@plt+0xacbc>
   1c028:	b	1bff8 <__assert_fail@plt+0xac28>
   1c02c:	strd	r4, [sp, #-12]!
   1c030:	mov	r5, r0
   1c034:	str	lr, [sp, #8]
   1c038:	sub	sp, sp, #12
   1c03c:	bl	11298 <__errno_location@plt>
   1c040:	mov	r4, r0
   1c044:	mov	r2, #0
   1c048:	ldr	r3, [r4]
   1c04c:	mov	r0, r5
   1c050:	str	r2, [r4]
   1c054:	str	r3, [sp]
   1c058:	str	r3, [sp, #4]
   1c05c:	bl	110d0 <free@plt>
   1c060:	ldr	r3, [r4]
   1c064:	add	r2, sp, #8
   1c068:	clz	r3, r3
   1c06c:	lsr	r3, r3, #5
   1c070:	add	r3, r2, r3, lsl #2
   1c074:	ldr	r3, [r3, #-8]
   1c078:	str	r3, [r4]
   1c07c:	add	sp, sp, #12
   1c080:	ldrd	r4, [sp]
   1c084:	add	sp, sp, #8
   1c088:	pop	{pc}		; (ldr pc, [sp], #4)
   1c08c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1c090:	mov	r4, r0
   1c094:	ldr	ip, [r0, #4]
   1c098:	strd	r6, [sp, #8]
   1c09c:	str	lr, [sp, #20]
   1c0a0:	ldr	lr, [r0, #8]
   1c0a4:	str	r8, [sp, #16]
   1c0a8:	sub	sp, sp, #8
   1c0ac:	ldr	r5, [sp, #32]
   1c0b0:	cmp	lr, ip
   1c0b4:	beq	1c0dc <__assert_fail@plt+0xad0c>
   1c0b8:	mov	r0, r4
   1c0bc:	str	r5, [sp, #32]
   1c0c0:	add	sp, sp, #8
   1c0c4:	ldrd	r4, [sp]
   1c0c8:	ldrd	r6, [sp, #8]
   1c0cc:	ldr	r8, [sp, #16]
   1c0d0:	ldr	lr, [sp, #20]
   1c0d4:	add	sp, sp, #24
   1c0d8:	b	11304 <fseeko64@plt>
   1c0dc:	ldr	ip, [r0, #16]
   1c0e0:	ldr	lr, [r0, #20]
   1c0e4:	cmp	lr, ip
   1c0e8:	bne	1c0b8 <__assert_fail@plt+0xace8>
   1c0ec:	ldr	r8, [r0, #36]	; 0x24
   1c0f0:	cmp	r8, #0
   1c0f4:	bne	1c0b8 <__assert_fail@plt+0xace8>
   1c0f8:	mov	r6, r2
   1c0fc:	mov	r7, r3
   1c100:	bl	112e0 <fileno@plt>
   1c104:	mov	r2, r6
   1c108:	mov	r3, r7
   1c10c:	str	r5, [sp]
   1c110:	bl	11190 <lseek64@plt>
   1c114:	mvn	r3, #0
   1c118:	mvn	r2, #0
   1c11c:	cmp	r1, r3
   1c120:	cmpeq	r0, r2
   1c124:	beq	1c154 <__assert_fail@plt+0xad84>
   1c128:	ldr	r3, [r4]
   1c12c:	strd	r0, [r4, #80]	; 0x50
   1c130:	bic	r3, r3, #16
   1c134:	str	r3, [r4]
   1c138:	mov	r0, r8
   1c13c:	add	sp, sp, #8
   1c140:	ldrd	r4, [sp]
   1c144:	ldrd	r6, [sp, #8]
   1c148:	ldr	r8, [sp, #16]
   1c14c:	add	sp, sp, #20
   1c150:	pop	{pc}		; (ldr pc, [sp], #4)
   1c154:	mvn	r8, #0
   1c158:	b	1c138 <__assert_fail@plt+0xad68>
   1c15c:	mov	r0, #14
   1c160:	str	r4, [sp, #-8]!
   1c164:	str	lr, [sp, #4]
   1c168:	bl	11334 <nl_langinfo@plt>
   1c16c:	cmp	r0, #0
   1c170:	beq	1c194 <__assert_fail@plt+0xadc4>
   1c174:	ldrb	r2, [r0]
   1c178:	movw	r3, #3656	; 0xe48
   1c17c:	movt	r3, #2
   1c180:	ldr	r4, [sp]
   1c184:	add	sp, sp, #4
   1c188:	cmp	r2, #0
   1c18c:	moveq	r0, r3
   1c190:	pop	{pc}		; (ldr pc, [sp], #4)
   1c194:	ldr	r4, [sp]
   1c198:	add	sp, sp, #4
   1c19c:	movw	r0, #3656	; 0xe48
   1c1a0:	movt	r0, #2
   1c1a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1a8:	strd	r4, [sp, #-20]!	; 0xffffffec
   1c1ac:	mov	r5, r2
   1c1b0:	strd	r6, [sp, #8]
   1c1b4:	subs	r6, r0, #0
   1c1b8:	mov	r7, r1
   1c1bc:	str	lr, [sp, #16]
   1c1c0:	sub	sp, sp, #12
   1c1c4:	addeq	r6, sp, #4
   1c1c8:	mov	r0, r6
   1c1cc:	bl	111b4 <mbrtowc@plt>
   1c1d0:	cmp	r5, #0
   1c1d4:	cmnne	r0, #3
   1c1d8:	mov	r4, r0
   1c1dc:	bhi	1c1f8 <__assert_fail@plt+0xae28>
   1c1e0:	mov	r0, r4
   1c1e4:	add	sp, sp, #12
   1c1e8:	ldrd	r4, [sp]
   1c1ec:	ldrd	r6, [sp, #8]
   1c1f0:	add	sp, sp, #16
   1c1f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1c1f8:	mov	r0, #0
   1c1fc:	bl	1e154 <__assert_fail@plt+0xcd84>
   1c200:	cmp	r0, #0
   1c204:	bne	1c1e0 <__assert_fail@plt+0xae10>
   1c208:	ldrb	r3, [r7]
   1c20c:	mov	r4, #1
   1c210:	str	r3, [r6]
   1c214:	b	1c1e0 <__assert_fail@plt+0xae10>
   1c218:	strd	r4, [sp, #-16]!
   1c21c:	subs	r4, r2, #0
   1c220:	str	r6, [sp, #8]
   1c224:	mov	r6, r0
   1c228:	str	lr, [sp, #12]
   1c22c:	beq	1c258 <__assert_fail@plt+0xae88>
   1c230:	mov	r5, r1
   1c234:	bl	1122c <__ctype_tolower_loc@plt>
   1c238:	add	r3, r5, r4
   1c23c:	add	r2, r6, r4
   1c240:	ldrb	lr, [r3, #-1]!
   1c244:	ldr	ip, [r0]
   1c248:	cmp	r5, r3
   1c24c:	ldr	ip, [ip, lr, lsl #2]
   1c250:	strb	ip, [r2, #-1]!
   1c254:	bne	1c240 <__assert_fail@plt+0xae70>
   1c258:	mov	r0, r6
   1c25c:	ldrd	r4, [sp]
   1c260:	ldr	r6, [sp, #8]
   1c264:	add	sp, sp, #12
   1c268:	pop	{pc}		; (ldr pc, [sp], #4)
   1c26c:	strd	r4, [sp, #-16]!
   1c270:	subs	r4, r2, #0
   1c274:	str	r6, [sp, #8]
   1c278:	mov	r6, r0
   1c27c:	str	lr, [sp, #12]
   1c280:	beq	1c2ac <__assert_fail@plt+0xaedc>
   1c284:	mov	r5, r1
   1c288:	bl	11238 <__ctype_toupper_loc@plt>
   1c28c:	add	r3, r5, r4
   1c290:	add	r2, r6, r4
   1c294:	ldrb	lr, [r3, #-1]!
   1c298:	ldr	ip, [r0]
   1c29c:	cmp	r5, r3
   1c2a0:	ldr	ip, [ip, lr, lsl #2]
   1c2a4:	strb	ip, [r2, #-1]!
   1c2a8:	bne	1c294 <__assert_fail@plt+0xaec4>
   1c2ac:	mov	r0, r6
   1c2b0:	ldrd	r4, [sp]
   1c2b4:	ldr	r6, [sp, #8]
   1c2b8:	add	sp, sp, #12
   1c2bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c2c0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1c2c4:	mov	r4, r3
   1c2c8:	strd	r6, [sp, #8]
   1c2cc:	mov	r6, r0
   1c2d0:	strd	r8, [sp, #16]
   1c2d4:	mov	r9, r2
   1c2d8:	strd	sl, [sp, #24]
   1c2dc:	str	lr, [sp, #32]
   1c2e0:	sub	sp, sp, #1136	; 0x470
   1c2e4:	sub	sp, sp, #4
   1c2e8:	str	r1, [sp, #28]
   1c2ec:	str	r3, [sp, #48]	; 0x30
   1c2f0:	ldrb	r3, [sp, #1176]	; 0x498
   1c2f4:	str	r3, [sp, #40]	; 0x28
   1c2f8:	bl	11298 <__errno_location@plt>
   1c2fc:	ldr	r1, [r0]
   1c300:	movw	r3, #1768	; 0x6e8
   1c304:	movt	r3, #2
   1c308:	str	r0, [sp, #36]	; 0x24
   1c30c:	ldr	r2, [r4, #40]	; 0x28
   1c310:	ldr	ip, [r4, #8]
   1c314:	ldr	r5, [sp, #1184]	; 0x4a0
   1c318:	cmp	r2, #0
   1c31c:	str	r1, [sp, #52]	; 0x34
   1c320:	mov	r1, r2
   1c324:	moveq	r1, r3
   1c328:	cmp	ip, #12
   1c32c:	str	ip, [sp, #32]
   1c330:	subgt	r3, ip, #12
   1c334:	str	r1, [sp, #56]	; 0x38
   1c338:	strgt	r3, [sp, #32]
   1c33c:	bgt	1c350 <__assert_fail@plt+0xaf80>
   1c340:	ldr	r3, [sp, #32]
   1c344:	cmp	r3, #0
   1c348:	moveq	r3, #12
   1c34c:	str	r3, [sp, #32]
   1c350:	ldrb	r3, [r9]
   1c354:	cmp	r3, #0
   1c358:	beq	1dd00 <__assert_fail@plt+0xc930>
   1c35c:	movw	r2, #46021	; 0xb3c5
   1c360:	movt	r2, #37282	; 0x91a2
   1c364:	movw	sl, #9363	; 0x2493
   1c368:	movt	sl, #37449	; 0x9249
   1c36c:	movw	r7, #26215	; 0x6667
   1c370:	movt	r7, #26214	; 0x6666
   1c374:	str	r2, [sp, #76]	; 0x4c
   1c378:	movw	r2, #34953	; 0x8889
   1c37c:	movt	r2, #34952	; 0x8888
   1c380:	mov	fp, #0
   1c384:	str	sl, [sp, #64]	; 0x40
   1c388:	str	r7, [sp, #72]	; 0x48
   1c38c:	str	r2, [sp, #80]	; 0x50
   1c390:	movw	r2, #34079	; 0x851f
   1c394:	movt	r2, #20971	; 0x51eb
   1c398:	str	r2, [sp, #68]	; 0x44
   1c39c:	cmp	r3, #37	; 0x25
   1c3a0:	beq	1c484 <__assert_fail@plt+0xb0b4>
   1c3a4:	ldr	r3, [sp, #28]
   1c3a8:	cmp	r5, #0
   1c3ac:	sub	r3, r3, fp
   1c3b0:	blt	1c438 <__assert_fail@plt+0xb068>
   1c3b4:	cmp	r5, #1
   1c3b8:	movcs	r4, r5
   1c3bc:	movcc	r4, #1
   1c3c0:	cmp	r4, r3
   1c3c4:	bcs	1c440 <__assert_fail@plt+0xb070>
   1c3c8:	cmp	r6, #0
   1c3cc:	beq	1c3f8 <__assert_fail@plt+0xb028>
   1c3d0:	cmp	r5, #1
   1c3d4:	ble	1c3f0 <__assert_fail@plt+0xb020>
   1c3d8:	sub	r5, r5, #1
   1c3dc:	mov	r0, r6
   1c3e0:	mov	r1, #32
   1c3e4:	mov	r2, r5
   1c3e8:	add	r6, r6, r5
   1c3ec:	bl	112c8 <memset@plt>
   1c3f0:	ldrb	r3, [r9]
   1c3f4:	strb	r3, [r6], #1
   1c3f8:	add	fp, fp, r4
   1c3fc:	mov	r4, r9
   1c400:	ldrb	r3, [r4, #1]
   1c404:	add	r9, r4, #1
   1c408:	mvn	r5, #0
   1c40c:	cmp	r3, #0
   1c410:	bne	1c39c <__assert_fail@plt+0xafcc>
   1c414:	ldr	r3, [sp, #28]
   1c418:	ldr	r2, [sp, #52]	; 0x34
   1c41c:	cmp	r6, #0
   1c420:	cmpne	r3, #0
   1c424:	movne	r3, #0
   1c428:	strbne	r3, [r6]
   1c42c:	ldr	r3, [sp, #36]	; 0x24
   1c430:	str	r2, [r3]
   1c434:	b	1c450 <__assert_fail@plt+0xb080>
   1c438:	cmp	r3, #1
   1c43c:	bhi	1c474 <__assert_fail@plt+0xb0a4>
   1c440:	ldr	r2, [sp, #36]	; 0x24
   1c444:	mov	r3, #34	; 0x22
   1c448:	str	r3, [r2]
   1c44c:	mov	fp, #0
   1c450:	mov	r0, fp
   1c454:	add	sp, sp, #1136	; 0x470
   1c458:	add	sp, sp, #4
   1c45c:	ldrd	r4, [sp]
   1c460:	ldrd	r6, [sp, #8]
   1c464:	ldrd	r8, [sp, #16]
   1c468:	ldrd	sl, [sp, #24]
   1c46c:	add	sp, sp, #32
   1c470:	pop	{pc}		; (ldr pc, [sp], #4)
   1c474:	cmp	r6, #0
   1c478:	mov	r4, #1
   1c47c:	bne	1c3f0 <__assert_fail@plt+0xb020>
   1c480:	b	1c3f8 <__assert_fail@plt+0xb028>
   1c484:	ldr	r3, [sp, #40]	; 0x28
   1c488:	mov	sl, #0
   1c48c:	mov	r8, r9
   1c490:	str	sl, [sp, #44]	; 0x2c
   1c494:	str	r3, [sp, #60]	; 0x3c
   1c498:	ldrb	r3, [r8, #1]!
   1c49c:	sub	r2, r3, #35	; 0x23
   1c4a0:	mov	r7, r3
   1c4a4:	cmp	r2, #60	; 0x3c
   1c4a8:	ldrls	pc, [pc, r2, lsl #2]
   1c4ac:	b	1c5c0 <__assert_fail@plt+0xb1f0>
   1c4b0:			; <UNDEFINED> instruction: 0x0001c5b8
   1c4b4:	andeq	ip, r1, r0, asr #11
   1c4b8:	andeq	ip, r1, r0, asr #11
   1c4bc:	andeq	ip, r1, r0, asr #11
   1c4c0:	andeq	ip, r1, r0, asr #11
   1c4c4:	andeq	ip, r1, r0, asr #11
   1c4c8:	andeq	ip, r1, r0, asr #11
   1c4cc:	andeq	ip, r1, r0, asr #11
   1c4d0:			; <UNDEFINED> instruction: 0x0001c5b0
   1c4d4:	andeq	ip, r1, r0, asr #11
   1c4d8:			; <UNDEFINED> instruction: 0x0001c5b0
   1c4dc:	andeq	ip, r1, r0, asr #11
   1c4e0:	andeq	ip, r1, r0, asr #11
   1c4e4:			; <UNDEFINED> instruction: 0x0001c5b0
   1c4e8:	andeq	ip, r1, r0, asr #11
   1c4ec:	andeq	ip, r1, r0, asr #11
   1c4f0:	andeq	ip, r1, r0, asr #11
   1c4f4:	andeq	ip, r1, r0, asr #11
   1c4f8:	andeq	ip, r1, r0, asr #11
   1c4fc:	andeq	ip, r1, r0, asr #11
   1c500:	andeq	ip, r1, r0, asr #11
   1c504:	andeq	ip, r1, r0, asr #11
   1c508:	andeq	ip, r1, r0, asr #11
   1c50c:	andeq	ip, r1, r0, asr #11
   1c510:	andeq	ip, r1, r0, asr #11
   1c514:	andeq	ip, r1, r0, asr #11
   1c518:	andeq	ip, r1, r0, asr #11
   1c51c:	andeq	ip, r1, r0, asr #11
   1c520:	andeq	ip, r1, r0, asr #11
   1c524:	andeq	ip, r1, r0, asr #11
   1c528:	andeq	ip, r1, r0, asr #11
   1c52c:	andeq	ip, r1, r0, asr #11
   1c530:	andeq	ip, r1, r0, asr #11
   1c534:	andeq	ip, r1, r0, asr #11
   1c538:	andeq	ip, r1, r0, asr #11
   1c53c:	andeq	ip, r1, r0, asr #11
   1c540:	andeq	ip, r1, r0, asr #11
   1c544:	andeq	ip, r1, r0, asr #11
   1c548:	andeq	ip, r1, r0, asr #11
   1c54c:	andeq	ip, r1, r0, asr #11
   1c550:	andeq	ip, r1, r0, asr #11
   1c554:	andeq	ip, r1, r0, asr #11
   1c558:	andeq	ip, r1, r0, asr #11
   1c55c:	andeq	ip, r1, r0, asr #11
   1c560:	andeq	ip, r1, r0, asr #11
   1c564:	andeq	ip, r1, r0, asr #11
   1c568:	andeq	ip, r1, r0, asr #11
   1c56c:	andeq	ip, r1, r0, asr #11
   1c570:	andeq	ip, r1, r0, asr #11
   1c574:	andeq	ip, r1, r0, asr #11
   1c578:	andeq	ip, r1, r0, asr #11
   1c57c:	andeq	ip, r1, r0, asr #11
   1c580:	andeq	ip, r1, r0, asr #11
   1c584:	andeq	ip, r1, r0, asr #11
   1c588:	andeq	ip, r1, r0, asr #11
   1c58c:	andeq	ip, r1, r0, asr #11
   1c590:	andeq	ip, r1, r0, asr #11
   1c594:	andeq	ip, r1, r0, asr #11
   1c598:	andeq	ip, r1, r0, asr #11
   1c59c:	andeq	ip, r1, r4, lsr #11
   1c5a0:			; <UNDEFINED> instruction: 0x0001c5b0
   1c5a4:	mov	r3, #1
   1c5a8:	str	r3, [sp, #60]	; 0x3c
   1c5ac:	b	1c498 <__assert_fail@plt+0xb0c8>
   1c5b0:	str	r3, [sp, #44]	; 0x2c
   1c5b4:	b	1c498 <__assert_fail@plt+0xb0c8>
   1c5b8:	mov	sl, #1
   1c5bc:	b	1c498 <__assert_fail@plt+0xb0c8>
   1c5c0:	sub	r2, r3, #48	; 0x30
   1c5c4:	cmp	r2, #9
   1c5c8:	bls	1ca84 <__assert_fail@plt+0xb6b4>
   1c5cc:	cmp	r3, #69	; 0x45
   1c5d0:	beq	1c7d4 <__assert_fail@plt+0xb404>
   1c5d4:	cmp	r3, #79	; 0x4f
   1c5d8:	beq	1c7d4 <__assert_fail@plt+0xb404>
   1c5dc:	cmp	r3, #122	; 0x7a
   1c5e0:	ldrls	pc, [pc, r3, lsl #2]
   1c5e4:	b	1dbcc <__assert_fail@plt+0xc7fc>
   1c5e8:	ldrdeq	ip, [r1], -r4
   1c5ec:	andeq	sp, r1, ip, asr #23
   1c5f0:	andeq	sp, r1, ip, asr #23
   1c5f4:	andeq	sp, r1, ip, asr #23
   1c5f8:	andeq	sp, r1, ip, asr #23
   1c5fc:	andeq	sp, r1, ip, asr #23
   1c600:	andeq	sp, r1, ip, asr #23
   1c604:	andeq	sp, r1, ip, asr #23
   1c608:	andeq	sp, r1, ip, asr #23
   1c60c:	andeq	sp, r1, ip, asr #23
   1c610:	andeq	sp, r1, ip, asr #23
   1c614:	andeq	sp, r1, ip, asr #23
   1c618:	andeq	sp, r1, ip, asr #23
   1c61c:	andeq	sp, r1, ip, asr #23
   1c620:	andeq	sp, r1, ip, asr #23
   1c624:	andeq	sp, r1, ip, asr #23
   1c628:	andeq	sp, r1, ip, asr #23
   1c62c:	andeq	sp, r1, ip, asr #23
   1c630:	andeq	sp, r1, ip, asr #23
   1c634:	andeq	sp, r1, ip, asr #23
   1c638:	andeq	sp, r1, ip, asr #23
   1c63c:	andeq	sp, r1, ip, asr #23
   1c640:	andeq	sp, r1, ip, asr #23
   1c644:	andeq	sp, r1, ip, asr #23
   1c648:	andeq	sp, r1, ip, asr #23
   1c64c:	andeq	sp, r1, ip, asr #23
   1c650:	andeq	sp, r1, ip, asr #23
   1c654:	andeq	sp, r1, ip, asr #23
   1c658:	andeq	sp, r1, ip, asr #23
   1c65c:	andeq	sp, r1, ip, asr #23
   1c660:	andeq	sp, r1, ip, asr #23
   1c664:	andeq	sp, r1, ip, asr #23
   1c668:	andeq	sp, r1, ip, asr #23
   1c66c:	andeq	sp, r1, ip, asr #23
   1c670:	andeq	sp, r1, ip, asr #23
   1c674:	andeq	sp, r1, ip, asr #23
   1c678:	andeq	sp, r1, ip, asr #23
   1c67c:			; <UNDEFINED> instruction: 0x0001d2b0
   1c680:	andeq	sp, r1, ip, asr #23
   1c684:	andeq	sp, r1, ip, asr #23
   1c688:	andeq	sp, r1, ip, asr #23
   1c68c:	andeq	sp, r1, ip, asr #23
   1c690:	andeq	sp, r1, ip, asr #23
   1c694:	andeq	sp, r1, ip, asr #23
   1c698:	andeq	sp, r1, ip, asr #23
   1c69c:	andeq	sp, r1, ip, asr #23
   1c6a0:	andeq	sp, r1, ip, asr #23
   1c6a4:	andeq	sp, r1, ip, asr #23
   1c6a8:	andeq	sp, r1, ip, asr #23
   1c6ac:	andeq	sp, r1, ip, asr #23
   1c6b0:	andeq	sp, r1, ip, asr #23
   1c6b4:	andeq	sp, r1, ip, asr #23
   1c6b8:	andeq	sp, r1, ip, asr #23
   1c6bc:	andeq	sp, r1, ip, asr #23
   1c6c0:	andeq	sp, r1, ip, asr #23
   1c6c4:	andeq	sp, r1, ip, asr #23
   1c6c8:	andeq	sp, r1, ip, asr #23
   1c6cc:	andeq	sp, r1, ip, asr #23
   1c6d0:	andeq	sp, r1, r4, ror sl
   1c6d4:	andeq	sp, r1, ip, asr #23
   1c6d8:	andeq	sp, r1, ip, asr #23
   1c6dc:	andeq	sp, r1, ip, asr #23
   1c6e0:	andeq	sp, r1, ip, asr #23
   1c6e4:	andeq	sp, r1, ip, asr #23
   1c6e8:	andeq	sp, r1, ip, asr #23
   1c6ec:	andeq	sp, r1, ip, lsr #21
   1c6f0:	andeq	sp, r1, r8, asr #21
   1c6f4:	andeq	sp, r1, r8, lsr #22
   1c6f8:	strdeq	sp, [r1], -ip
   1c6fc:	andeq	sp, r1, ip, asr #23
   1c700:	andeq	sp, r1, r4, lsr #16
   1c704:	andeq	sp, r1, r4, lsr fp
   1c708:	andeq	sp, r1, r0, asr #22
   1c70c:	andeq	sp, r1, ip, asr #22
   1c710:	andeq	sp, r1, ip, asr #23
   1c714:	andeq	sp, r1, ip, asr #23
   1c718:	andeq	sp, r1, ip, asr #23
   1c71c:	andeq	sp, r1, r8, asr fp
   1c720:	strdeq	sp, [r1], -r8
   1c724:	andeq	sp, r1, ip, asr #23
   1c728:	andeq	sp, r1, r8, lsl #19
   1c72c:	andeq	sp, r1, ip, asr #23
   1c730:	muleq	r1, r8, r9
   1c734:	andeq	sp, r1, r0, asr #23
   1c738:	ldrdeq	sp, [r1], -ip
   1c73c:	andeq	sp, r1, r8, lsl #23
   1c740:	andeq	sp, r1, r4, lsr fp
   1c744:	muleq	r1, r4, fp
   1c748:	andeq	sp, r1, r0, lsr #23
   1c74c:	andeq	sp, r1, ip, lsr #23
   1c750:	andeq	sp, r1, r8, ror #2
   1c754:	andeq	sp, r1, ip, asr #23
   1c758:	andeq	sp, r1, ip, asr #23
   1c75c:	andeq	sp, r1, ip, asr #23
   1c760:	andeq	sp, r1, ip, asr #23
   1c764:	andeq	sp, r1, ip, asr #23
   1c768:	andeq	sp, r1, ip, asr #23
   1c76c:			; <UNDEFINED> instruction: 0x0001dbb8
   1c770:	andeq	sp, r1, ip, lsl #2
   1c774:	andeq	sp, r1, ip, ror #21
   1c778:	strdeq	sp, [r1], -r8
   1c77c:	andeq	sp, r1, r4, lsl #22
   1c780:	andeq	sp, r1, ip, asr #23
   1c784:	andeq	sp, r1, r4, lsr fp
   1c788:	andeq	sp, r1, ip, lsl #2
   1c78c:	andeq	sp, r1, ip, asr #23
   1c790:	andeq	sp, r1, r0, lsl fp
   1c794:	andeq	sp, r1, ip, lsl fp
   1c798:	ldrdeq	sp, [r1], -r4
   1c79c:	andeq	sp, r1, r0, ror #21
   1c7a0:			; <UNDEFINED> instruction: 0x0001cfb8
   1c7a4:	andeq	sp, r1, ip, asr #23
   1c7a8:	andeq	sp, r1, r0, ror #18
   1c7ac:	andeq	ip, r1, r8, lsl #30
   1c7b0:	andeq	sp, r1, ip, asr #18
   1c7b4:	andeq	ip, r1, ip, ror #26
   1c7b8:	strdeq	ip, [r1], -r0
   1c7bc:			; <UNDEFINED> instruction: 0x0001ccb0
   1c7c0:	andeq	sp, r1, ip, asr #23
   1c7c4:	andeq	sp, r1, r0, ror fp
   1c7c8:	andeq	sp, r1, ip, ror fp
   1c7cc:	andeq	sp, r1, r4, ror #22
   1c7d0:			; <UNDEFINED> instruction: 0x0001d9b8
   1c7d4:	ldrb	r3, [r8, #1]
   1c7d8:	add	r4, r8, #1
   1c7dc:	cmp	r3, #122	; 0x7a
   1c7e0:	ldrls	pc, [pc, r3, lsl #2]
   1c7e4:	b	1c9dc <__assert_fail@plt+0xb60c>
   1c7e8:	ldrdeq	ip, [r1], -r8
   1c7ec:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c7f0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c7f4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c7f8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c7fc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c800:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c804:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c808:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c80c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c810:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c814:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c818:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c81c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c820:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c824:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c828:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c82c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c830:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c834:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c838:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c83c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c840:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c844:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c848:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c84c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c850:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c854:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c858:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c85c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c860:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c864:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c868:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c86c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c870:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c874:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c878:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c87c:	andeq	sp, r1, ip, lsr #5
   1c880:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c884:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c888:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c88c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c890:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c894:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c898:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c89c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8a0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8a4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8a8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8ac:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8b0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8b4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8b8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8bc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8c0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8c4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8c8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8cc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8d0:	andeq	sp, r1, ip, ror sl
   1c8d4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8d8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8dc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8e0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8e4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8e8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c8ec:	andeq	sp, r1, r0, lsr #21
   1c8f0:	andeq	sp, r1, r8, lsr #18
   1c8f4:	andeq	sp, r1, r8, ror #16
   1c8f8:	andeq	sp, r1, r4, lsl #18
   1c8fc:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c900:	andeq	sp, r1, ip, lsr #16
   1c904:	muleq	r1, r8, r6
   1c908:	andeq	sp, r1, ip, ror r6
   1c90c:	andeq	sp, r1, r4, ror #12
   1c910:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c914:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c918:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c91c:	andeq	sp, r1, r8, asr #12
   1c920:	andeq	sp, r1, r0, lsl #10
   1c924:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c928:	muleq	r1, r0, r9
   1c92c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c930:	muleq	r1, ip, r9
   1c934:	ldrdeq	sp, [r1], -ip
   1c938:	andeq	sp, r1, r0, ror #7
   1c93c:	andeq	sp, r1, r0, lsr #7
   1c940:	muleq	r1, r8, r6
   1c944:	andeq	sp, r1, r8, asr #6
   1c948:	andeq	sp, r1, r8, lsr r3
   1c94c:	andeq	sp, r1, r0, lsr r2
   1c950:	andeq	sp, r1, ip, ror #2
   1c954:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c958:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c95c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c960:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c964:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c968:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c96c:	andeq	sp, r1, r4, lsr r1
   1c970:	andeq	sp, r1, r4, lsl r1
   1c974:	strdeq	sp, [r1], -r8
   1c978:	ldrdeq	sp, [r1], -ip
   1c97c:	andeq	sp, r1, r8, asr #1
   1c980:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c984:	muleq	r1, r8, r6
   1c988:	andeq	sp, r1, r4, lsl r1
   1c98c:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c990:	andeq	sp, r1, ip, lsr #1
   1c994:	muleq	r1, r8, r0
   1c998:	andeq	sp, r1, r0, ror r0
   1c99c:	andeq	sp, r1, r0, lsr r0
   1c9a0:			; <UNDEFINED> instruction: 0x0001cfbc
   1c9a4:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9a8:	andeq	sp, r1, r8, ror #18
   1c9ac:	andeq	ip, r1, r0, lsl pc
   1c9b0:	andeq	sp, r1, r4, asr r9
   1c9b4:	andeq	ip, r1, r0, ror sp
   1c9b8:	strdeq	ip, [r1], -r4
   1c9bc:			; <UNDEFINED> instruction: 0x0001ccb8
   1c9c0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1c9c4:	andeq	ip, r1, r4, ror ip
   1c9c8:	andeq	ip, r1, r8, asr #24
   1c9cc:	andeq	ip, r1, ip, asr #21
   1c9d0:	andeq	sp, r1, r0, asr #19
   1c9d4:	mov	r4, r8
   1c9d8:	sub	r4, r4, #1
   1c9dc:	ldr	r3, [sp, #28]
   1c9e0:	sub	sl, r3, fp
   1c9e4:	ldr	r2, [sp, #44]	; 0x2c
   1c9e8:	mvn	r3, r5
   1c9ec:	sub	r7, r4, r9
   1c9f0:	lsr	r3, r3, #31
   1c9f4:	add	r7, r7, #1
   1c9f8:	cmp	r2, #45	; 0x2d
   1c9fc:	moveq	r3, #0
   1ca00:	cmp	r3, #0
   1ca04:	moveq	r5, r3
   1ca08:	moveq	r8, r7
   1ca0c:	beq	1ca1c <__assert_fail@plt+0xb64c>
   1ca10:	cmp	r7, r5
   1ca14:	movcs	r8, r7
   1ca18:	movcc	r8, r5
   1ca1c:	cmp	r8, sl
   1ca20:	bcs	1c440 <__assert_fail@plt+0xb070>
   1ca24:	cmp	r6, #0
   1ca28:	beq	1ca7c <__assert_fail@plt+0xb6ac>
   1ca2c:	cmp	r7, r5
   1ca30:	bcs	1ca5c <__assert_fail@plt+0xb68c>
   1ca34:	ldr	r3, [sp, #44]	; 0x2c
   1ca38:	sub	r2, r5, r7
   1ca3c:	mov	r0, r6
   1ca40:	cmp	r3, #43	; 0x2b
   1ca44:	cmpne	r3, #48	; 0x30
   1ca48:	add	r3, r6, r2
   1ca4c:	moveq	r1, #48	; 0x30
   1ca50:	movne	r1, #32
   1ca54:	mov	r6, r3
   1ca58:	bl	112c8 <memset@plt>
   1ca5c:	ldr	r3, [sp, #60]	; 0x3c
   1ca60:	mov	r1, r9
   1ca64:	mov	r2, r7
   1ca68:	mov	r0, r6
   1ca6c:	cmp	r3, #0
   1ca70:	bne	1cac4 <__assert_fail@plt+0xb6f4>
   1ca74:	bl	110f4 <memcpy@plt>
   1ca78:	add	r6, r6, r7
   1ca7c:	add	fp, fp, r8
   1ca80:	b	1c400 <__assert_fail@plt+0xb030>
   1ca84:	mov	r5, #0
   1ca88:	mov	r1, #10
   1ca8c:	smull	r2, r3, r5, r1
   1ca90:	mvn	r5, #-2147483648	; 0x80000000
   1ca94:	cmp	r3, r2, asr #31
   1ca98:	bne	1caac <__assert_fail@plt+0xb6dc>
   1ca9c:	ldrb	r3, [r8]
   1caa0:	sub	r5, r3, #48	; 0x30
   1caa4:	adds	r5, r2, r5
   1caa8:	mvnvs	r5, #-2147483648	; 0x80000000
   1caac:	ldrb	r3, [r8, #1]!
   1cab0:	sub	r2, r3, #48	; 0x30
   1cab4:	cmp	r2, #9
   1cab8:	bls	1ca8c <__assert_fail@plt+0xb6bc>
   1cabc:	mov	r7, r3
   1cac0:	b	1c5cc <__assert_fail@plt+0xb1fc>
   1cac4:	bl	1c26c <__assert_fail@plt+0xae9c>
   1cac8:	b	1ca78 <__assert_fail@plt+0xb6a8>
   1cacc:	cmp	r7, #69	; 0x45
   1cad0:	beq	1de2c <__assert_fail@plt+0xca5c>
   1cad4:	ldr	r2, [sp, #48]	; 0x30
   1cad8:	mov	r1, #100	; 0x64
   1cadc:	ldr	r0, [sp, #68]	; 0x44
   1cae0:	ldr	r2, [r2, #20]
   1cae4:	smull	ip, r0, r0, r2
   1cae8:	asr	ip, r2, #31
   1caec:	rsb	ip, ip, r0, asr #5
   1caf0:	mls	ip, r1, ip, r2
   1caf4:	cmp	ip, #0
   1caf8:	bge	1cb10 <__assert_fail@plt+0xb740>
   1cafc:	movw	r1, #63636	; 0xf894
   1cb00:	movt	r1, #65535	; 0xffff
   1cb04:	cmp	r2, r1
   1cb08:	rsblt	ip, ip, #0
   1cb0c:	addge	ip, ip, #100	; 0x64
   1cb10:	ldr	r2, [sp, #44]	; 0x2c
   1cb14:	cmp	r2, #0
   1cb18:	bne	1d7f8 <__assert_fail@plt+0xc428>
   1cb1c:	ldr	r2, [sp, #1180]	; 0x49c
   1cb20:	cmp	r2, #43	; 0x2b
   1cb24:	beq	1e008 <__assert_fail@plt+0xcc38>
   1cb28:	ldr	r1, [sp, #1180]	; 0x49c
   1cb2c:	mov	r2, #0
   1cb30:	str	r1, [sp, #44]	; 0x2c
   1cb34:	mov	r1, #2
   1cb38:	str	r2, [sp, #84]	; 0x54
   1cb3c:	str	r2, [sp, #92]	; 0x5c
   1cb40:	mov	r2, #1
   1cb44:	str	r1, [sp, #88]	; 0x58
   1cb48:	mov	lr, #0
   1cb4c:	cmp	r7, #79	; 0x4f
   1cb50:	movne	r2, #0
   1cb54:	andeq	r2, r2, #1
   1cb58:	cmp	r2, #0
   1cb5c:	beq	1d29c <__assert_fail@plt+0xbecc>
   1cb60:	add	r2, sp, #96	; 0x60
   1cb64:	movw	r1, #9504	; 0x2520
   1cb68:	mov	r8, #0
   1cb6c:	strh	r1, [r2]
   1cb70:	add	r1, r2, #3
   1cb74:	strb	r7, [sp, #98]	; 0x62
   1cb78:	mov	ip, #0
   1cb7c:	add	r0, sp, #112	; 0x70
   1cb80:	strb	r3, [r1]
   1cb84:	ldr	r3, [sp, #48]	; 0x30
   1cb88:	strb	ip, [r1, #1]
   1cb8c:	mov	r1, #1024	; 0x400
   1cb90:	bl	111fc <strftime@plt>
   1cb94:	cmp	r0, #0
   1cb98:	beq	1c400 <__assert_fail@plt+0xb030>
   1cb9c:	ldr	r2, [sp, #44]	; 0x2c
   1cba0:	mvn	r3, r5
   1cba4:	sub	r7, r0, #1
   1cba8:	lsr	r3, r3, #31
   1cbac:	cmp	r2, #45	; 0x2d
   1cbb0:	moveq	r3, #0
   1cbb4:	cmp	r3, #0
   1cbb8:	moveq	r5, r3
   1cbbc:	moveq	r9, r7
   1cbc0:	beq	1cbd0 <__assert_fail@plt+0xb800>
   1cbc4:	cmp	r7, r5
   1cbc8:	movcs	r9, r7
   1cbcc:	movcc	r9, r5
   1cbd0:	ldr	r3, [sp, #28]
   1cbd4:	sub	r3, r3, fp
   1cbd8:	cmp	r3, r9
   1cbdc:	bls	1c440 <__assert_fail@plt+0xb070>
   1cbe0:	cmp	r6, #0
   1cbe4:	beq	1cc40 <__assert_fail@plt+0xb870>
   1cbe8:	cmp	r7, r5
   1cbec:	bcs	1cc18 <__assert_fail@plt+0xb848>
   1cbf0:	ldr	r3, [sp, #44]	; 0x2c
   1cbf4:	sub	r2, r5, r7
   1cbf8:	mov	r0, r6
   1cbfc:	cmp	r3, #43	; 0x2b
   1cc00:	cmpne	r3, #48	; 0x30
   1cc04:	add	r3, r6, r2
   1cc08:	moveq	r1, #48	; 0x30
   1cc0c:	movne	r1, #32
   1cc10:	mov	r6, r3
   1cc14:	bl	112c8 <memset@plt>
   1cc18:	cmp	r8, #0
   1cc1c:	bne	1dd18 <__assert_fail@plt+0xc948>
   1cc20:	ldr	r3, [sp, #60]	; 0x3c
   1cc24:	add	r1, sp, #113	; 0x71
   1cc28:	mov	r2, r7
   1cc2c:	mov	r0, r6
   1cc30:	cmp	r3, #0
   1cc34:	beq	1dd10 <__assert_fail@plt+0xc940>
   1cc38:	bl	1c26c <__assert_fail@plt+0xae9c>
   1cc3c:	add	r6, r6, r7
   1cc40:	add	fp, fp, r9
   1cc44:	b	1c400 <__assert_fail@plt+0xb030>
   1cc48:	cmp	r7, #79	; 0x4f
   1cc4c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1cc50:	mov	r3, #120	; 0x78
   1cc54:	mov	r8, #0
   1cc58:	add	r2, sp, #96	; 0x60
   1cc5c:	movw	r1, #9504	; 0x2520
   1cc60:	cmp	r7, #0
   1cc64:	strh	r1, [r2]
   1cc68:	addeq	r1, r2, #2
   1cc6c:	beq	1cb78 <__assert_fail@plt+0xb7a8>
   1cc70:	b	1cb70 <__assert_fail@plt+0xb7a0>
   1cc74:	cmp	r7, #69	; 0x45
   1cc78:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1cc7c:	mov	r2, #1
   1cc80:	str	r2, [sp, #88]	; 0x58
   1cc84:	ldr	r2, [sp, #48]	; 0x30
   1cc88:	ldr	r2, [r2, #24]
   1cc8c:	mov	ip, r2
   1cc90:	lsr	r2, r2, #31
   1cc94:	mov	lr, #0
   1cc98:	cmp	ip, lr
   1cc9c:	str	r2, [sp, #84]	; 0x54
   1cca0:	movlt	r2, #0
   1cca4:	movge	r2, #1
   1cca8:	str	lr, [sp, #92]	; 0x5c
   1ccac:	b	1cb4c <__assert_fail@plt+0xb77c>
   1ccb0:	mov	r4, r8
   1ccb4:	mov	r7, #0
   1ccb8:	ldr	r2, [sp, #48]	; 0x30
   1ccbc:	mov	r1, #1
   1ccc0:	ldr	r0, [sp, #64]	; 0x40
   1ccc4:	str	r1, [sp, #88]	; 0x58
   1ccc8:	ldr	r2, [r2, #24]
   1cccc:	add	r2, r2, #6
   1ccd0:	asr	r1, r2, #31
   1ccd4:	smull	ip, r0, r0, r2
   1ccd8:	add	r0, r0, r2
   1ccdc:	rsb	r1, r1, r0, asr #2
   1cce0:	rsb	r1, r1, r1, lsl #3
   1cce4:	sub	r2, r2, r1
   1cce8:	add	r2, r2, #1
   1ccec:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1ccf0:	mov	r4, r8
   1ccf4:	ldr	r3, [sp, #44]	; 0x2c
   1ccf8:	cmp	r3, #45	; 0x2d
   1ccfc:	ldr	r3, [sp, #28]
   1cd00:	sub	r3, r3, fp
   1cd04:	beq	1dd84 <__assert_fail@plt+0xc9b4>
   1cd08:	cmp	r5, #0
   1cd0c:	blt	1dd84 <__assert_fail@plt+0xc9b4>
   1cd10:	cmp	r5, #1
   1cd14:	movcs	r7, r5
   1cd18:	movcc	r7, #1
   1cd1c:	cmp	r7, r3
   1cd20:	bcs	1c440 <__assert_fail@plt+0xb070>
   1cd24:	cmp	r6, #0
   1cd28:	beq	1cd64 <__assert_fail@plt+0xb994>
   1cd2c:	cmp	r5, #1
   1cd30:	ble	1cd5c <__assert_fail@plt+0xb98c>
   1cd34:	ldr	r3, [sp, #44]	; 0x2c
   1cd38:	sub	r2, r5, #1
   1cd3c:	mov	r0, r6
   1cd40:	cmp	r3, #43	; 0x2b
   1cd44:	cmpne	r3, #48	; 0x30
   1cd48:	add	r3, r6, r2
   1cd4c:	moveq	r1, #48	; 0x30
   1cd50:	movne	r1, #32
   1cd54:	mov	r6, r3
   1cd58:	bl	112c8 <memset@plt>
   1cd5c:	mov	r3, #9
   1cd60:	strb	r3, [r6], #1
   1cd64:	add	fp, fp, r7
   1cd68:	b	1c400 <__assert_fail@plt+0xb030>
   1cd6c:	mov	r4, r8
   1cd70:	ldr	lr, [sp, #48]	; 0x30
   1cd74:	mvn	ip, #0
   1cd78:	add	r1, sp, #112	; 0x70
   1cd7c:	ldr	r0, [sp, #1192]	; 0x4a8
   1cd80:	ldrd	r8, [lr]
   1cd84:	ldrd	r2, [lr, #24]
   1cd88:	strd	r8, [sp, #112]	; 0x70
   1cd8c:	ldrd	r8, [lr, #8]
   1cd90:	strd	r2, [sp, #136]	; 0x88
   1cd94:	ldr	r3, [lr, #40]	; 0x28
   1cd98:	strd	r8, [sp, #120]	; 0x78
   1cd9c:	ldrd	r8, [lr, #32]
   1cda0:	str	ip, [sp, #140]	; 0x8c
   1cda4:	str	r3, [sp, #152]	; 0x98
   1cda8:	ldrd	r2, [lr, #16]
   1cdac:	strd	r2, [sp, #128]	; 0x80
   1cdb0:	strd	r8, [sp, #144]	; 0x90
   1cdb4:	bl	1b220 <__assert_fail@plt+0x9e50>
   1cdb8:	ldr	r3, [sp, #140]	; 0x8c
   1cdbc:	cmp	r3, #0
   1cdc0:	blt	1e0b4 <__assert_fail@plt+0xcce4>
   1cdc4:	ldr	ip, [sp, #72]	; 0x48
   1cdc8:	add	r2, sp, #96	; 0x60
   1cdcc:	lsr	r3, r0, #31
   1cdd0:	mov	r1, r0
   1cdd4:	add	r7, r2, #14
   1cdd8:	str	r3, [sp, #84]	; 0x54
   1cddc:	smull	r3, lr, ip, r1
   1cde0:	cmp	r0, #0
   1cde4:	asr	r8, r1, #31
   1cde8:	asr	lr, lr, #2
   1cdec:	sub	r3, lr, r8
   1cdf0:	add	r3, r3, r3, lsl #2
   1cdf4:	sub	r3, r1, r3, lsl #1
   1cdf8:	sub	r1, lr, r8
   1cdfc:	uxtb	r3, r3
   1ce00:	rsblt	r3, r3, #48	; 0x30
   1ce04:	addge	r3, r3, #48	; 0x30
   1ce08:	uxtb	r3, r3
   1ce0c:	cmp	r1, #0
   1ce10:	strb	r3, [r7, #-1]!
   1ce14:	bne	1cddc <__assert_fail@plt+0xba0c>
   1ce18:	mov	r3, #1
   1ce1c:	str	r3, [sp, #88]	; 0x58
   1ce20:	str	r1, [sp, #92]	; 0x5c
   1ce24:	ldr	r3, [sp, #44]	; 0x2c
   1ce28:	cmp	r3, #0
   1ce2c:	beq	1dcf0 <__assert_fail@plt+0xc920>
   1ce30:	subs	r3, r3, #45	; 0x2d
   1ce34:	movne	r3, #1
   1ce38:	ldr	r1, [sp, #88]	; 0x58
   1ce3c:	cmp	r5, #0
   1ce40:	add	r2, r2, #14
   1ce44:	sub	r8, r2, r7
   1ce48:	movlt	r5, r1
   1ce4c:	ldr	r1, [sp, #84]	; 0x54
   1ce50:	cmp	r1, #0
   1ce54:	bne	1dc84 <__assert_fail@plt+0xc8b4>
   1ce58:	ldr	r1, [sp, #92]	; 0x5c
   1ce5c:	cmp	r1, #0
   1ce60:	bne	1dd38 <__assert_fail@plt+0xc968>
   1ce64:	sub	r2, r5, r8
   1ce68:	cmp	r2, #0
   1ce6c:	movle	r3, #0
   1ce70:	andgt	r3, r3, #1
   1ce74:	cmp	r3, #0
   1ce78:	bne	1ce90 <__assert_fail@plt+0xbac0>
   1ce7c:	ldr	r3, [sp, #44]	; 0x2c
   1ce80:	cmp	r3, #45	; 0x2d
   1ce84:	moveq	r5, r1
   1ce88:	moveq	r9, r8
   1ce8c:	beq	1ce9c <__assert_fail@plt+0xbacc>
   1ce90:	cmp	r5, r8
   1ce94:	movcs	r9, r5
   1ce98:	movcc	r9, r8
   1ce9c:	ldr	r3, [sp, #28]
   1cea0:	sub	r3, r3, fp
   1cea4:	cmp	r3, r9
   1cea8:	bls	1c440 <__assert_fail@plt+0xb070>
   1ceac:	cmp	r6, #0
   1ceb0:	beq	1cc40 <__assert_fail@plt+0xb870>
   1ceb4:	cmp	r5, r8
   1ceb8:	bls	1cee4 <__assert_fail@plt+0xbb14>
   1cebc:	ldr	r3, [sp, #44]	; 0x2c
   1cec0:	sub	r2, r5, r8
   1cec4:	mov	r0, r6
   1cec8:	cmp	r3, #43	; 0x2b
   1cecc:	cmpne	r3, #48	; 0x30
   1ced0:	add	r3, r6, r2
   1ced4:	moveq	r1, #48	; 0x30
   1ced8:	movne	r1, #32
   1cedc:	mov	r6, r3
   1cee0:	bl	112c8 <memset@plt>
   1cee4:	ldr	r3, [sp, #60]	; 0x3c
   1cee8:	mov	r1, r7
   1ceec:	mov	r2, r8
   1cef0:	mov	r0, r6
   1cef4:	cmp	r3, #0
   1cef8:	beq	1dd08 <__assert_fail@plt+0xc938>
   1cefc:	bl	1c26c <__assert_fail@plt+0xae9c>
   1cf00:	add	r6, r6, r8
   1cf04:	b	1cc40 <__assert_fail@plt+0xb870>
   1cf08:	mov	r4, r8
   1cf0c:	mov	r7, #0
   1cf10:	ldr	r3, [sp, #48]	; 0x30
   1cf14:	cmp	r7, #79	; 0x4f
   1cf18:	ldr	r3, [r3, #16]
   1cf1c:	moveq	r3, #113	; 0x71
   1cf20:	beq	1cb60 <__assert_fail@plt+0xb790>
   1cf24:	mov	ip, #11
   1cf28:	mov	lr, #0
   1cf2c:	mul	ip, ip, r3
   1cf30:	mov	r3, #1
   1cf34:	str	lr, [sp, #84]	; 0x54
   1cf38:	str	r3, [sp, #88]	; 0x58
   1cf3c:	asr	ip, ip, #5
   1cf40:	str	lr, [sp, #92]	; 0x5c
   1cf44:	add	ip, ip, r3
   1cf48:	add	r2, sp, #96	; 0x60
   1cf4c:	movw	r9, #52429	; 0xcccd
   1cf50:	movt	r9, #52428	; 0xcccc
   1cf54:	add	r0, r2, #14
   1cf58:	mov	sl, #58	; 0x3a
   1cf5c:	tst	lr, #1
   1cf60:	umull	r3, r1, r9, ip
   1cf64:	sub	r7, r0, #1
   1cf68:	sub	r3, r0, #2
   1cf6c:	beq	1cf7c <__assert_fail@plt+0xbbac>
   1cf70:	strb	sl, [r0, #-1]
   1cf74:	mov	r0, r7
   1cf78:	mov	r7, r3
   1cf7c:	lsr	r1, r1, #3
   1cf80:	asrs	lr, lr, #1
   1cf84:	add	r3, r1, r1, lsl #2
   1cf88:	movne	r8, #1
   1cf8c:	moveq	r8, #0
   1cf90:	sub	r3, ip, r3, lsl #1
   1cf94:	cmp	ip, #9
   1cf98:	orrhi	r8, r8, #1
   1cf9c:	mov	ip, r1
   1cfa0:	cmp	r8, #0
   1cfa4:	add	r3, r3, #48	; 0x30
   1cfa8:	strb	r3, [r0, #-1]
   1cfac:	mov	r0, r7
   1cfb0:	bne	1cf5c <__assert_fail@plt+0xbb8c>
   1cfb4:	b	1ce24 <__assert_fail@plt+0xba54>
   1cfb8:	mov	r4, r8
   1cfbc:	ldr	r3, [sp, #44]	; 0x2c
   1cfc0:	cmp	r3, #45	; 0x2d
   1cfc4:	ldr	r3, [sp, #28]
   1cfc8:	sub	r3, r3, fp
   1cfcc:	beq	1dd6c <__assert_fail@plt+0xc99c>
   1cfd0:	cmp	r5, #0
   1cfd4:	blt	1dd6c <__assert_fail@plt+0xc99c>
   1cfd8:	cmp	r5, #1
   1cfdc:	movcs	r7, r5
   1cfe0:	movcc	r7, #1
   1cfe4:	cmp	r7, r3
   1cfe8:	bcs	1c440 <__assert_fail@plt+0xb070>
   1cfec:	cmp	r6, #0
   1cff0:	beq	1cd64 <__assert_fail@plt+0xb994>
   1cff4:	cmp	r5, #1
   1cff8:	ble	1d024 <__assert_fail@plt+0xbc54>
   1cffc:	ldr	r3, [sp, #44]	; 0x2c
   1d000:	sub	r2, r5, #1
   1d004:	mov	r0, r6
   1d008:	cmp	r3, #43	; 0x2b
   1d00c:	cmpne	r3, #48	; 0x30
   1d010:	add	r3, r6, r2
   1d014:	moveq	r1, #48	; 0x30
   1d018:	movne	r1, #32
   1d01c:	mov	r6, r3
   1d020:	bl	112c8 <memset@plt>
   1d024:	mov	r3, #10
   1d028:	strb	r3, [r6], #1
   1d02c:	b	1cd64 <__assert_fail@plt+0xb994>
   1d030:	cmp	r7, #69	; 0x45
   1d034:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d038:	ldr	r2, [sp, #48]	; 0x30
   1d03c:	mov	lr, #0
   1d040:	ldr	ip, [r2, #16]
   1d044:	mov	r2, #2
   1d048:	cmn	ip, #1
   1d04c:	str	r2, [sp, #88]	; 0x58
   1d050:	add	ip, ip, #1
   1d054:	movlt	r2, #1
   1d058:	movge	r2, lr
   1d05c:	str	r2, [sp, #84]	; 0x54
   1d060:	movge	r2, #1
   1d064:	movlt	r2, lr
   1d068:	str	lr, [sp, #92]	; 0x5c
   1d06c:	b	1cb4c <__assert_fail@plt+0xb77c>
   1d070:	cmp	r7, #69	; 0x45
   1d074:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d078:	ldr	r2, [sp, #32]
   1d07c:	ldr	r1, [sp, #44]	; 0x2c
   1d080:	cmp	r1, #0
   1d084:	mov	r1, #2
   1d088:	str	r1, [sp, #88]	; 0x58
   1d08c:	moveq	r1, #95	; 0x5f
   1d090:	streq	r1, [sp, #44]	; 0x2c
   1d094:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d098:	cmp	r7, #69	; 0x45
   1d09c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d0a0:	ldr	r2, [sp, #48]	; 0x30
   1d0a4:	ldr	r2, [r2, #8]
   1d0a8:	b	1d07c <__assert_fail@plt+0xbcac>
   1d0ac:	cmp	r7, #69	; 0x45
   1d0b0:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d0b4:	ldr	r2, [sp, #48]	; 0x30
   1d0b8:	mov	lr, #0
   1d0bc:	ldr	ip, [r2, #28]
   1d0c0:	mov	r2, #3
   1d0c4:	b	1d048 <__assert_fail@plt+0xbc78>
   1d0c8:	cmp	r7, #69	; 0x45
   1d0cc:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d0d0:	ldr	r2, [sp, #48]	; 0x30
   1d0d4:	ldr	r2, [r2, #12]
   1d0d8:	b	1d07c <__assert_fail@plt+0xbcac>
   1d0dc:	cmp	r7, #69	; 0x45
   1d0e0:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d0e4:	mov	r2, #2
   1d0e8:	str	r2, [sp, #88]	; 0x58
   1d0ec:	ldr	r2, [sp, #48]	; 0x30
   1d0f0:	ldr	r2, [r2, #12]
   1d0f4:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d0f8:	cmp	r7, #79	; 0x4f
   1d0fc:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d100:	mov	r3, #99	; 0x63
   1d104:	mov	r8, #0
   1d108:	b	1cc58 <__assert_fail@plt+0xb888>
   1d10c:	mov	r4, r8
   1d110:	mov	r7, #0
   1d114:	ldr	r2, [sp, #60]	; 0x3c
   1d118:	cmp	sl, #0
   1d11c:	movne	r2, sl
   1d120:	cmp	r7, #69	; 0x45
   1d124:	str	r2, [sp, #60]	; 0x3c
   1d128:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d12c:	mov	r8, #0
   1d130:	b	1cc58 <__assert_fail@plt+0xb888>
   1d134:	cmp	r7, #0
   1d138:	bne	1c9dc <__assert_fail@plt+0xb60c>
   1d13c:	ldr	r2, [sp, #60]	; 0x3c
   1d140:	cmp	sl, #0
   1d144:	mov	r3, #97	; 0x61
   1d148:	movne	r2, sl
   1d14c:	str	r2, [sp, #60]	; 0x3c
   1d150:	add	r2, sp, #96	; 0x60
   1d154:	movw	r0, #9504	; 0x2520
   1d158:	mov	r1, r2
   1d15c:	mov	r8, #0
   1d160:	strh	r0, [r1], #2
   1d164:	b	1cb78 <__assert_fail@plt+0xb7a8>
   1d168:	mov	r4, r8
   1d16c:	cmp	sl, #0
   1d170:	ldr	r0, [sp, #56]	; 0x38
   1d174:	ldr	r3, [sp, #60]	; 0x3c
   1d178:	movne	r3, #0
   1d17c:	str	r3, [sp, #60]	; 0x3c
   1d180:	bl	11274 <strlen@plt>
   1d184:	ldr	r3, [sp, #44]	; 0x2c
   1d188:	mov	r7, r0
   1d18c:	subs	r3, r3, #45	; 0x2d
   1d190:	movne	r3, #1
   1d194:	cmp	r5, #0
   1d198:	movlt	r3, #0
   1d19c:	cmp	r3, #0
   1d1a0:	moveq	r5, r0
   1d1a4:	beq	1d1b8 <__assert_fail@plt+0xbde8>
   1d1a8:	mov	r3, r5
   1d1ac:	cmp	r0, r5
   1d1b0:	movcs	r5, r0
   1d1b4:	movcc	r5, r3
   1d1b8:	ldr	r2, [sp, #28]
   1d1bc:	sub	r2, r2, fp
   1d1c0:	cmp	r2, r5
   1d1c4:	bls	1c440 <__assert_fail@plt+0xb070>
   1d1c8:	cmp	r6, #0
   1d1cc:	beq	1d228 <__assert_fail@plt+0xbe58>
   1d1d0:	cmp	r7, r3
   1d1d4:	bcs	1d200 <__assert_fail@plt+0xbe30>
   1d1d8:	sub	r2, r3, r7
   1d1dc:	ldr	r3, [sp, #44]	; 0x2c
   1d1e0:	mov	r0, r6
   1d1e4:	cmp	r3, #43	; 0x2b
   1d1e8:	cmpne	r3, #48	; 0x30
   1d1ec:	add	r3, r6, r2
   1d1f0:	moveq	r1, #48	; 0x30
   1d1f4:	movne	r1, #32
   1d1f8:	mov	r6, r3
   1d1fc:	bl	112c8 <memset@plt>
   1d200:	cmp	sl, #0
   1d204:	bne	1dfcc <__assert_fail@plt+0xcbfc>
   1d208:	mov	r2, r7
   1d20c:	mov	r0, r6
   1d210:	ldr	r1, [sp, #56]	; 0x38
   1d214:	ldr	r3, [sp, #60]	; 0x3c
   1d218:	cmp	r3, #0
   1d21c:	beq	1dfc4 <__assert_fail@plt+0xcbf4>
   1d220:	bl	1c26c <__assert_fail@plt+0xae9c>
   1d224:	add	r6, r6, r7
   1d228:	add	fp, fp, r5
   1d22c:	b	1c400 <__assert_fail@plt+0xb030>
   1d230:	cmp	r7, #69	; 0x45
   1d234:	beq	1dfbc <__assert_fail@plt+0xcbec>
   1d238:	cmp	r7, #79	; 0x4f
   1d23c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d240:	ldr	r1, [sp, #44]	; 0x2c
   1d244:	ldr	r2, [sp, #48]	; 0x30
   1d248:	ldr	ip, [r2, #20]
   1d24c:	movw	r2, #63636	; 0xf894
   1d250:	movt	r2, #65535	; 0xffff
   1d254:	cmp	ip, r2
   1d258:	add	ip, ip, #1888	; 0x760
   1d25c:	movlt	r2, #1
   1d260:	movge	r2, #0
   1d264:	add	ip, ip, #12
   1d268:	str	r2, [sp, #84]	; 0x54
   1d26c:	movge	r2, #1
   1d270:	movlt	r2, #0
   1d274:	cmp	r1, #0
   1d278:	bne	1ddb0 <__assert_fail@plt+0xc9e0>
   1d27c:	ldr	r1, [sp, #1180]	; 0x49c
   1d280:	cmp	r1, #43	; 0x2b
   1d284:	beq	1ddc8 <__assert_fail@plt+0xc9f8>
   1d288:	ldr	lr, [sp, #44]	; 0x2c
   1d28c:	mov	r3, #4
   1d290:	str	r1, [sp, #44]	; 0x2c
   1d294:	str	r3, [sp, #88]	; 0x58
   1d298:	str	lr, [sp, #92]	; 0x5c
   1d29c:	ldr	r3, [sp, #84]	; 0x54
   1d2a0:	cmp	r3, #0
   1d2a4:	rsbne	ip, ip, #0
   1d2a8:	b	1cf48 <__assert_fail@plt+0xbb78>
   1d2ac:	mov	r8, r4
   1d2b0:	ldr	r3, [sp, #28]
   1d2b4:	sub	r4, r8, #1
   1d2b8:	cmp	r4, r9
   1d2bc:	sub	sl, r3, fp
   1d2c0:	bne	1c9e4 <__assert_fail@plt+0xb614>
   1d2c4:	ldr	r3, [sp, #44]	; 0x2c
   1d2c8:	cmp	r3, #45	; 0x2d
   1d2cc:	beq	1df24 <__assert_fail@plt+0xcb54>
   1d2d0:	cmp	r5, #0
   1d2d4:	blt	1df24 <__assert_fail@plt+0xcb54>
   1d2d8:	cmp	r5, #1
   1d2dc:	movcs	r4, r5
   1d2e0:	movcc	r4, #1
   1d2e4:	cmp	r4, sl
   1d2e8:	bcs	1c440 <__assert_fail@plt+0xb070>
   1d2ec:	cmp	r6, #0
   1d2f0:	beq	1d32c <__assert_fail@plt+0xbf5c>
   1d2f4:	cmp	r5, #1
   1d2f8:	ble	1d324 <__assert_fail@plt+0xbf54>
   1d2fc:	ldr	r3, [sp, #44]	; 0x2c
   1d300:	sub	r2, r5, #1
   1d304:	mov	r0, r6
   1d308:	cmp	r3, #43	; 0x2b
   1d30c:	cmpne	r3, #48	; 0x30
   1d310:	add	r3, r6, r2
   1d314:	moveq	r1, #48	; 0x30
   1d318:	movne	r1, #32
   1d31c:	mov	r6, r3
   1d320:	bl	112c8 <memset@plt>
   1d324:	ldrb	r3, [r8]
   1d328:	strb	r3, [r6], #1
   1d32c:	add	fp, fp, r4
   1d330:	mov	r4, r8
   1d334:	b	1c400 <__assert_fail@plt+0xb030>
   1d338:	cmp	r7, #79	; 0x4f
   1d33c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d340:	mov	r3, #88	; 0x58
   1d344:	b	1d12c <__assert_fail@plt+0xbd5c>
   1d348:	cmp	r7, #69	; 0x45
   1d34c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d350:	ldr	r1, [sp, #48]	; 0x30
   1d354:	mov	r0, #2
   1d358:	ldr	lr, [sp, #64]	; 0x40
   1d35c:	str	r0, [sp, #88]	; 0x58
   1d360:	ldr	r2, [r1, #24]
   1d364:	ldr	r1, [r1, #28]
   1d368:	add	r2, r2, #6
   1d36c:	asr	r0, r2, #31
   1d370:	smull	r8, ip, lr, r2
   1d374:	add	ip, ip, r2
   1d378:	rsb	r0, r0, ip, asr #2
   1d37c:	rsb	r0, r0, r0, lsl #3
   1d380:	sub	r2, r2, r0
   1d384:	sub	r1, r1, r2
   1d388:	add	r1, r1, #7
   1d38c:	asr	r2, r1, #31
   1d390:	smull	ip, r0, lr, r1
   1d394:	add	r1, r0, r1
   1d398:	rsb	r2, r2, r1, asr #2
   1d39c:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d3a0:	cmp	r7, #69	; 0x45
   1d3a4:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d3a8:	ldr	r1, [sp, #48]	; 0x30
   1d3ac:	mov	r0, #2
   1d3b0:	str	r0, [sp, #88]	; 0x58
   1d3b4:	ldr	r2, [r1, #24]
   1d3b8:	ldr	r1, [r1, #28]
   1d3bc:	sub	r1, r1, r2
   1d3c0:	ldr	r2, [sp, #64]	; 0x40
   1d3c4:	add	r1, r1, #7
   1d3c8:	smull	r2, r0, r2, r1
   1d3cc:	asr	r2, r1, #31
   1d3d0:	add	r1, r0, r1
   1d3d4:	rsb	r2, r2, r1, asr #2
   1d3d8:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d3dc:	mov	r4, r8
   1d3e0:	ldr	r3, [sp, #28]
   1d3e4:	movw	r9, #3664	; 0xe50
   1d3e8:	movt	r9, #2
   1d3ec:	sub	sl, r3, fp
   1d3f0:	mvn	r3, #0
   1d3f4:	str	r3, [sp, #84]	; 0x54
   1d3f8:	ldr	r7, [sp, #44]	; 0x2c
   1d3fc:	mov	r2, r9
   1d400:	mov	r0, #0
   1d404:	ldr	r3, [sp, #48]	; 0x30
   1d408:	ldr	r1, [sp, #60]	; 0x3c
   1d40c:	ldr	ip, [sp, #84]	; 0x54
   1d410:	stm	sp, {r1, r7, ip}
   1d414:	mvn	r1, #0
   1d418:	ldr	ip, [sp, #1188]	; 0x4a4
   1d41c:	str	ip, [sp, #12]
   1d420:	ldr	ip, [sp, #1192]	; 0x4a8
   1d424:	str	ip, [sp, #16]
   1d428:	ldr	ip, [sp, #1196]	; 0x4ac
   1d42c:	str	ip, [sp, #20]
   1d430:	bl	1c2c0 <__assert_fail@plt+0xaef0>
   1d434:	cmp	r7, #45	; 0x2d
   1d438:	mov	r8, r0
   1d43c:	beq	1dd2c <__assert_fail@plt+0xc95c>
   1d440:	cmp	r5, #0
   1d444:	blt	1dd2c <__assert_fail@plt+0xc95c>
   1d448:	cmp	r0, r5
   1d44c:	movcs	r7, r0
   1d450:	movcc	r7, r5
   1d454:	cmp	r7, sl
   1d458:	bcs	1c440 <__assert_fail@plt+0xb070>
   1d45c:	cmp	r6, #0
   1d460:	beq	1cd64 <__assert_fail@plt+0xb994>
   1d464:	cmp	r5, r8
   1d468:	bls	1d494 <__assert_fail@plt+0xc0c4>
   1d46c:	ldr	r3, [sp, #44]	; 0x2c
   1d470:	sub	r2, r5, r8
   1d474:	mov	r0, r6
   1d478:	cmp	r3, #43	; 0x2b
   1d47c:	cmpne	r3, #48	; 0x30
   1d480:	add	r3, r6, r2
   1d484:	moveq	r1, #48	; 0x30
   1d488:	movne	r1, #32
   1d48c:	mov	r6, r3
   1d490:	bl	112c8 <memset@plt>
   1d494:	ldr	r0, [sp, #44]	; 0x2c
   1d498:	mov	r2, r9
   1d49c:	mov	r1, sl
   1d4a0:	ldr	r3, [sp, #60]	; 0x3c
   1d4a4:	ldr	ip, [sp, #84]	; 0x54
   1d4a8:	str	r3, [sp]
   1d4ac:	ldr	r3, [sp, #48]	; 0x30
   1d4b0:	stmib	sp, {r0, ip}
   1d4b4:	mov	r0, r6
   1d4b8:	add	r6, r6, r8
   1d4bc:	ldr	ip, [sp, #1188]	; 0x4a4
   1d4c0:	str	ip, [sp, #12]
   1d4c4:	ldr	ip, [sp, #1192]	; 0x4a8
   1d4c8:	str	ip, [sp, #16]
   1d4cc:	ldr	ip, [sp, #1196]	; 0x4ac
   1d4d0:	str	ip, [sp, #20]
   1d4d4:	bl	1c2c0 <__assert_fail@plt+0xaef0>
   1d4d8:	b	1cd64 <__assert_fail@plt+0xb994>
   1d4dc:	cmp	r7, #69	; 0x45
   1d4e0:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d4e4:	mov	r2, #2
   1d4e8:	str	r2, [sp, #88]	; 0x58
   1d4ec:	ldr	r2, [sp, #48]	; 0x30
   1d4f0:	ldr	r2, [r2]
   1d4f4:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d4f8:	mov	r4, r8
   1d4fc:	mov	r7, #0
   1d500:	ldr	r3, [sp, #28]
   1d504:	cmp	r7, #69	; 0x45
   1d508:	sub	sl, r3, fp
   1d50c:	beq	1c9e4 <__assert_fail@plt+0xb614>
   1d510:	cmp	r5, #0
   1d514:	mov	r7, #9
   1d518:	ldr	r0, [sp, #72]	; 0x48
   1d51c:	movle	r5, #9
   1d520:	ldr	r3, [sp, #1196]	; 0x4ac
   1d524:	b	1d534 <__assert_fail@plt+0xc164>
   1d528:	smull	r2, r3, r0, r3
   1d52c:	sub	r7, r7, #1
   1d530:	rsb	r3, r1, r3, asr #2
   1d534:	cmp	r7, r5
   1d538:	asr	r1, r3, #31
   1d53c:	bgt	1d528 <__assert_fail@plt+0xc158>
   1d540:	cmp	r7, #1
   1d544:	smull	r1, r2, r0, r3
   1d548:	asr	r1, r3, #31
   1d54c:	ble	1ddf0 <__assert_fail@plt+0xca20>
   1d550:	rsb	r2, r1, r2, asr #2
   1d554:	add	r2, r2, r2, lsl #2
   1d558:	cmp	r3, r2, lsl #1
   1d55c:	beq	1d528 <__assert_fail@plt+0xc158>
   1d560:	ldr	lr, [sp, #72]	; 0x48
   1d564:	add	r2, sp, #96	; 0x60
   1d568:	sub	ip, r7, #1
   1d56c:	add	ip, r2, ip
   1d570:	rsb	r2, r2, #1
   1d574:	smull	r8, r0, lr, r3
   1d578:	rsb	r1, r1, r0, asr #2
   1d57c:	add	r0, r1, r1, lsl #2
   1d580:	sub	r0, r3, r0, lsl #1
   1d584:	mov	r3, r1
   1d588:	asr	r1, r1, #31
   1d58c:	add	r0, r0, #48	; 0x30
   1d590:	strb	r0, [ip], #-1
   1d594:	add	r0, r2, ip
   1d598:	cmp	r0, #0
   1d59c:	bgt	1d574 <__assert_fail@plt+0xc1a4>
   1d5a0:	ldr	r3, [sp, #44]	; 0x2c
   1d5a4:	cmp	r3, #0
   1d5a8:	bne	1deec <__assert_fail@plt+0xcb1c>
   1d5ac:	cmp	sl, r7
   1d5b0:	bls	1c440 <__assert_fail@plt+0xb070>
   1d5b4:	ldr	r3, [sp, #28]
   1d5b8:	cmp	r6, #0
   1d5bc:	add	fp, fp, r7
   1d5c0:	sub	r8, r3, fp
   1d5c4:	movne	r3, #48	; 0x30
   1d5c8:	strne	r3, [sp, #44]	; 0x2c
   1d5cc:	beq	1e030 <__assert_fail@plt+0xcc60>
   1d5d0:	ldr	r3, [sp, #60]	; 0x3c
   1d5d4:	mov	r2, r7
   1d5d8:	add	r1, sp, #96	; 0x60
   1d5dc:	mov	r0, r6
   1d5e0:	cmp	r3, #0
   1d5e4:	beq	1dfe0 <__assert_fail@plt+0xcc10>
   1d5e8:	bl	1c26c <__assert_fail@plt+0xae9c>
   1d5ec:	ldr	r3, [sp, #44]	; 0x2c
   1d5f0:	add	r6, r6, r7
   1d5f4:	cmp	r3, #45	; 0x2d
   1d5f8:	beq	1df14 <__assert_fail@plt+0xcb44>
   1d5fc:	sub	r2, r5, r7
   1d600:	cmp	r2, r8
   1d604:	bcs	1c440 <__assert_fail@plt+0xb070>
   1d608:	cmp	r6, #0
   1d60c:	addeq	fp, fp, r2
   1d610:	beq	1c400 <__assert_fail@plt+0xb030>
   1d614:	cmp	r2, #0
   1d618:	beq	1c400 <__assert_fail@plt+0xb030>
   1d61c:	ldr	r3, [sp, #44]	; 0x2c
   1d620:	mov	r0, r6
   1d624:	add	fp, fp, r2
   1d628:	cmp	r3, #43	; 0x2b
   1d62c:	cmpne	r3, #48	; 0x30
   1d630:	add	r3, r6, r2
   1d634:	moveq	r1, #48	; 0x30
   1d638:	movne	r1, #32
   1d63c:	mov	r6, r3
   1d640:	bl	112c8 <memset@plt>
   1d644:	b	1c400 <__assert_fail@plt+0xb030>
   1d648:	cmp	r7, #69	; 0x45
   1d64c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d650:	mov	r2, #2
   1d654:	str	r2, [sp, #88]	; 0x58
   1d658:	ldr	r2, [sp, #48]	; 0x30
   1d65c:	ldr	r2, [r2, #4]
   1d660:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d664:	cmp	r7, #69	; 0x45
   1d668:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d66c:	mov	r1, #2
   1d670:	ldr	r2, [sp, #32]
   1d674:	str	r1, [sp, #88]	; 0x58
   1d678:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d67c:	cmp	r7, #69	; 0x45
   1d680:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d684:	mov	r2, #2
   1d688:	str	r2, [sp, #88]	; 0x58
   1d68c:	ldr	r2, [sp, #48]	; 0x30
   1d690:	ldr	r2, [r2, #8]
   1d694:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1d698:	cmp	r7, #69	; 0x45
   1d69c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d6a0:	ldr	r2, [sp, #48]	; 0x30
   1d6a4:	ldr	r8, [r2, #20]
   1d6a8:	ldr	r1, [r2, #24]
   1d6ac:	ldr	r9, [r2, #28]
   1d6b0:	cmp	r8, #0
   1d6b4:	ldr	r2, [sp, #64]	; 0x40
   1d6b8:	str	r1, [sp, #84]	; 0x54
   1d6bc:	sub	r1, r9, r1
   1d6c0:	add	r1, r1, #380	; 0x17c
   1d6c4:	add	r1, r1, #2
   1d6c8:	asr	r0, r1, #31
   1d6cc:	smull	r2, ip, r2, r1
   1d6d0:	movlt	r2, #300	; 0x12c
   1d6d4:	mvnge	r2, #99	; 0x63
   1d6d8:	add	ip, ip, r1
   1d6dc:	add	r2, r8, r2
   1d6e0:	rsb	r0, r0, ip, asr #2
   1d6e4:	rsb	r0, r0, r0, lsl #3
   1d6e8:	sub	r0, r1, r0
   1d6ec:	sub	sl, r9, r0
   1d6f0:	adds	sl, sl, #3
   1d6f4:	bmi	1de34 <__assert_fail@plt+0xca64>
   1d6f8:	tst	r2, #3
   1d6fc:	movwne	r2, #365	; 0x16d
   1d700:	bne	1d748 <__assert_fail@plt+0xc378>
   1d704:	ldr	r1, [sp, #68]	; 0x44
   1d708:	mov	ip, #100	; 0x64
   1d70c:	smull	r1, r0, r1, r2
   1d710:	asr	r1, r2, #31
   1d714:	rsb	r1, r1, r0, asr #5
   1d718:	mls	r1, ip, r1, r2
   1d71c:	cmp	r1, #0
   1d720:	movwne	r2, #366	; 0x16e
   1d724:	bne	1d748 <__assert_fail@plt+0xc378>
   1d728:	mov	ip, #400	; 0x190
   1d72c:	movw	r1, #365	; 0x16d
   1d730:	movw	lr, #366	; 0x16e
   1d734:	sdiv	r0, r2, ip
   1d738:	mls	r2, ip, r0, r2
   1d73c:	cmp	r2, #0
   1d740:	movne	r2, r1
   1d744:	moveq	r2, lr
   1d748:	sub	r9, r9, r2
   1d74c:	ldr	r0, [sp, #64]	; 0x40
   1d750:	ldr	r2, [sp, #84]	; 0x54
   1d754:	sub	r2, r9, r2
   1d758:	add	r2, r2, #380	; 0x17c
   1d75c:	add	r2, r2, #2
   1d760:	asr	r1, r2, #31
   1d764:	smull	ip, r0, r0, r2
   1d768:	add	r0, r0, r2
   1d76c:	rsb	r1, r1, r0, asr #2
   1d770:	rsb	r1, r1, r1, lsl #3
   1d774:	sub	r2, r2, r1
   1d778:	sub	r2, r9, r2
   1d77c:	add	r2, r2, #3
   1d780:	cmp	r2, #0
   1d784:	movge	sl, r2
   1d788:	movge	lr, #1
   1d78c:	movlt	lr, #0
   1d790:	cmp	r3, #71	; 0x47
   1d794:	beq	1df60 <__assert_fail@plt+0xcb90>
   1d798:	cmp	r3, #103	; 0x67
   1d79c:	bne	1df3c <__assert_fail@plt+0xcb6c>
   1d7a0:	ldr	ip, [sp, #68]	; 0x44
   1d7a4:	mov	r0, #100	; 0x64
   1d7a8:	smull	r2, r1, ip, r8
   1d7ac:	asr	r2, r8, #31
   1d7b0:	rsb	r2, r2, r1, asr #5
   1d7b4:	mls	r2, r0, r2, r8
   1d7b8:	add	r2, r2, lr
   1d7bc:	asr	r1, r2, #31
   1d7c0:	smull	r9, ip, ip, r2
   1d7c4:	rsb	ip, r1, ip, asr #5
   1d7c8:	mls	ip, r0, ip, r2
   1d7cc:	cmp	ip, #0
   1d7d0:	bge	1cb10 <__assert_fail@plt+0xb740>
   1d7d4:	movw	r2, #63636	; 0xf894
   1d7d8:	movt	r2, #65535	; 0xffff
   1d7dc:	sub	r2, r2, lr
   1d7e0:	cmp	r2, r8
   1d7e4:	ldr	r2, [sp, #44]	; 0x2c
   1d7e8:	ble	1e0a4 <__assert_fail@plt+0xccd4>
   1d7ec:	cmp	r2, #0
   1d7f0:	rsb	ip, ip, #0
   1d7f4:	beq	1cb1c <__assert_fail@plt+0xb74c>
   1d7f8:	ldr	r2, [sp, #44]	; 0x2c
   1d7fc:	cmp	r2, #43	; 0x2b
   1d800:	beq	1ddfc <__assert_fail@plt+0xca2c>
   1d804:	mov	r2, #0
   1d808:	mov	r1, r2
   1d80c:	mov	r2, #1
   1d810:	str	r1, [sp, #84]	; 0x54
   1d814:	str	r1, [sp, #92]	; 0x5c
   1d818:	mov	r1, #2
   1d81c:	str	r1, [sp, #88]	; 0x58
   1d820:	b	1cb48 <__assert_fail@plt+0xb778>
   1d824:	mov	r4, r8
   1d828:	mov	r7, #0
   1d82c:	ldr	r3, [sp, #28]
   1d830:	cmp	r7, #0
   1d834:	sub	sl, r3, fp
   1d838:	bne	1c9e4 <__assert_fail@plt+0xb614>
   1d83c:	ldr	r3, [sp, #44]	; 0x2c
   1d840:	clz	r3, r3
   1d844:	lsr	r3, r3, #5
   1d848:	ands	r3, r3, r5, lsr #31
   1d84c:	bne	1e048 <__assert_fail@plt+0xcc78>
   1d850:	sub	r3, r5, #6
   1d854:	movw	r9, #3676	; 0xe5c
   1d858:	movt	r9, #2
   1d85c:	bic	r3, r3, r3, asr #31
   1d860:	str	r3, [sp, #84]	; 0x54
   1d864:	b	1d3f8 <__assert_fail@plt+0xc028>
   1d868:	cmp	r7, #69	; 0x45
   1d86c:	beq	1dee4 <__assert_fail@plt+0xcb14>
   1d870:	ldr	r2, [sp, #48]	; 0x30
   1d874:	movw	ip, #1899	; 0x76b
   1d878:	ldr	r0, [r2, #20]
   1d87c:	movw	r2, #63636	; 0xf894
   1d880:	movt	r2, #65535	; 0xffff
   1d884:	add	r1, r0, #1888	; 0x760
   1d888:	cmp	r0, r2
   1d88c:	add	r1, r1, #12
   1d890:	movge	lr, #0
   1d894:	movlt	lr, #1
   1d898:	cmp	r1, ip
   1d89c:	mvnls	r1, #98	; 0x62
   1d8a0:	movhi	r1, #0
   1d8a4:	add	r1, r1, r0
   1d8a8:	cmp	r0, r2
   1d8ac:	ldr	r0, [sp, #44]	; 0x2c
   1d8b0:	movlt	r2, #0
   1d8b4:	movge	r2, #1
   1d8b8:	asr	ip, r1, #31
   1d8bc:	str	lr, [sp, #84]	; 0x54
   1d8c0:	cmp	r0, #0
   1d8c4:	ldr	r0, [sp, #68]	; 0x44
   1d8c8:	smull	r0, r1, r0, r1
   1d8cc:	rsb	r1, ip, r1, asr #5
   1d8d0:	add	ip, r1, #19
   1d8d4:	bne	1dec8 <__assert_fail@plt+0xcaf8>
   1d8d8:	ldr	r1, [sp, #1180]	; 0x49c
   1d8dc:	cmp	r1, #43	; 0x2b
   1d8e0:	beq	1e020 <__assert_fail@plt+0xcc50>
   1d8e4:	ldr	r1, [sp, #1180]	; 0x49c
   1d8e8:	mov	r0, #2
   1d8ec:	str	r1, [sp, #44]	; 0x2c
   1d8f0:	mov	r1, #0
   1d8f4:	strd	r0, [sp, #88]	; 0x58
   1d8f8:	b	1cb48 <__assert_fail@plt+0xb778>
   1d8fc:	mov	r4, r8
   1d900:	mov	r7, #0
   1d904:	ldr	r3, [sp, #28]
   1d908:	cmp	r7, #0
   1d90c:	sub	sl, r3, fp
   1d910:	bne	1c9e4 <__assert_fail@plt+0xb614>
   1d914:	mvn	r3, #0
   1d918:	movw	r9, #3696	; 0xe70
   1d91c:	movt	r9, #2
   1d920:	str	r3, [sp, #84]	; 0x54
   1d924:	b	1d3f8 <__assert_fail@plt+0xc028>
   1d928:	cmp	r7, #69	; 0x45
   1d92c:	beq	1c9dc <__assert_fail@plt+0xb60c>
   1d930:	ldr	r2, [sp, #60]	; 0x3c
   1d934:	cmp	sl, #0
   1d938:	mov	r3, #66	; 0x42
   1d93c:	movne	r2, sl
   1d940:	mov	r8, #0
   1d944:	str	r2, [sp, #60]	; 0x3c
   1d948:	b	1cc58 <__assert_fail@plt+0xb888>
   1d94c:	mov	r4, r8
   1d950:	mov	r7, #0
   1d954:	mov	r3, #114	; 0x72
   1d958:	mov	r8, #0
   1d95c:	b	1cc58 <__assert_fail@plt+0xb888>
   1d960:	mov	r4, r8
   1d964:	mov	r7, #0
   1d968:	mov	r8, #0
   1d96c:	ldr	r2, [sp, #60]	; 0x3c
   1d970:	cmp	sl, #0
   1d974:	mov	r3, #112	; 0x70
   1d978:	movne	r2, #0
   1d97c:	movne	r8, sl
   1d980:	str	r2, [sp, #60]	; 0x3c
   1d984:	b	1cc58 <__assert_fail@plt+0xb888>
   1d988:	mov	r4, r8
   1d98c:	mov	r7, #0
   1d990:	mov	r8, #1
   1d994:	b	1d96c <__assert_fail@plt+0xc59c>
   1d998:	mov	r4, r8
   1d99c:	ldr	r3, [sp, #28]
   1d9a0:	movw	r9, #3688	; 0xe68
   1d9a4:	movt	r9, #2
   1d9a8:	sub	sl, r3, fp
   1d9ac:	mvn	r3, #0
   1d9b0:	str	r3, [sp, #84]	; 0x54
   1d9b4:	b	1d3f8 <__assert_fail@plt+0xc028>
   1d9b8:	mov	r4, r8
   1d9bc:	mov	r7, #0
   1d9c0:	mov	sl, #0
   1d9c4:	ldr	r1, [sp, #48]	; 0x30
   1d9c8:	ldr	r2, [r1, #32]
   1d9cc:	cmp	r2, #0
   1d9d0:	blt	1c400 <__assert_fail@plt+0xb030>
   1d9d4:	ldr	r1, [r1, #36]	; 0x24
   1d9d8:	cmp	r1, #0
   1d9dc:	movlt	r2, #1
   1d9e0:	strlt	r2, [sp, #84]	; 0x54
   1d9e4:	blt	1da0c <__assert_fail@plt+0xc63c>
   1d9e8:	movne	r2, #0
   1d9ec:	strne	r2, [sp, #84]	; 0x54
   1d9f0:	bne	1da0c <__assert_fail@plt+0xc63c>
   1d9f4:	ldr	r2, [sp, #56]	; 0x38
   1d9f8:	ldrb	r2, [r2]
   1d9fc:	sub	r2, r2, #45	; 0x2d
   1da00:	clz	r2, r2
   1da04:	lsr	r2, r2, #5
   1da08:	str	r2, [sp, #84]	; 0x54
   1da0c:	ldr	r0, [sp, #80]	; 0x50
   1da10:	asr	r8, r1, #31
   1da14:	smull	ip, r2, r0, r1
   1da18:	ldr	ip, [sp, #76]	; 0x4c
   1da1c:	add	r2, r2, r1
   1da20:	rsb	r2, r8, r2, asr #5
   1da24:	smull	lr, ip, ip, r1
   1da28:	asr	lr, r2, #31
   1da2c:	add	ip, ip, r1
   1da30:	str	ip, [sp, #88]	; 0x58
   1da34:	smull	ip, r0, r0, r2
   1da38:	ldr	ip, [sp, #88]	; 0x58
   1da3c:	add	r0, r0, r2
   1da40:	rsb	lr, lr, r0, asr #5
   1da44:	rsb	r8, r8, ip, asr #11
   1da48:	rsb	lr, lr, lr, lsl #4
   1da4c:	rsb	ip, r2, r2, lsl #4
   1da50:	sub	lr, r2, lr, lsl #2
   1da54:	sub	r1, r1, ip, lsl #2
   1da58:	cmp	sl, #3
   1da5c:	ldrls	pc, [pc, sl, lsl #2]
   1da60:	b	1c9dc <__assert_fail@plt+0xb60c>
   1da64:	andeq	sp, r1, r0, ror #24
   1da68:	andeq	sp, r1, r8, lsl #24
   1da6c:	ldrdeq	sp, [r1], -r4
   1da70:	andeq	sp, r1, r0, lsr ip
   1da74:	mov	r4, r8
   1da78:	mov	r7, #0
   1da7c:	ldrb	r2, [r4, #1]
   1da80:	add	r1, r4, #1
   1da84:	cmp	r2, #58	; 0x3a
   1da88:	movne	sl, #1
   1da8c:	beq	1dfe8 <__assert_fail@plt+0xcc18>
   1da90:	cmp	r2, #122	; 0x7a
   1da94:	bne	1c9dc <__assert_fail@plt+0xb60c>
   1da98:	mov	r4, r1
   1da9c:	b	1d9c4 <__assert_fail@plt+0xc5f4>
   1daa0:	cmp	r7, #0
   1daa4:	bne	1c9dc <__assert_fail@plt+0xb60c>
   1daa8:	mov	r8, r4
   1daac:	ldr	r3, [sp, #60]	; 0x3c
   1dab0:	cmp	sl, #0
   1dab4:	mov	r4, r8
   1dab8:	movne	r3, sl
   1dabc:	str	r3, [sp, #60]	; 0x3c
   1dac0:	mov	r3, #65	; 0x41
   1dac4:	b	1d150 <__assert_fail@plt+0xbd80>
   1dac8:	mov	r4, r8
   1dacc:	mov	r7, #0
   1dad0:	b	1d930 <__assert_fail@plt+0xc560>
   1dad4:	mov	r4, r8
   1dad8:	mov	r7, #0
   1dadc:	b	1d078 <__assert_fail@plt+0xbca8>
   1dae0:	mov	r4, r8
   1dae4:	mov	r7, #0
   1dae8:	b	1d038 <__assert_fail@plt+0xbc68>
   1daec:	mov	r4, r8
   1daf0:	mov	r7, #0
   1daf4:	b	1d100 <__assert_fail@plt+0xbd30>
   1daf8:	mov	r4, r8
   1dafc:	mov	r7, #0
   1db00:	b	1d0e4 <__assert_fail@plt+0xbd14>
   1db04:	mov	r4, r8
   1db08:	mov	r7, #0
   1db0c:	b	1d0d0 <__assert_fail@plt+0xbd00>
   1db10:	mov	r4, r8
   1db14:	mov	r7, #0
   1db18:	b	1d0b4 <__assert_fail@plt+0xbce4>
   1db1c:	mov	r4, r8
   1db20:	mov	r7, #0
   1db24:	b	1d0a0 <__assert_fail@plt+0xbcd0>
   1db28:	mov	r4, r8
   1db2c:	mov	r7, #0
   1db30:	b	1d870 <__assert_fail@plt+0xc4a0>
   1db34:	mov	r4, r8
   1db38:	mov	r7, #0
   1db3c:	b	1d6a0 <__assert_fail@plt+0xc2d0>
   1db40:	mov	r4, r8
   1db44:	mov	r7, #0
   1db48:	b	1d684 <__assert_fail@plt+0xc2b4>
   1db4c:	mov	r4, r8
   1db50:	mov	r7, #0
   1db54:	b	1d66c <__assert_fail@plt+0xc29c>
   1db58:	mov	r4, r8
   1db5c:	mov	r7, #0
   1db60:	b	1d650 <__assert_fail@plt+0xc280>
   1db64:	mov	r4, r8
   1db68:	mov	r7, #0
   1db6c:	b	1cad4 <__assert_fail@plt+0xb704>
   1db70:	mov	r4, r8
   1db74:	mov	r7, #0
   1db78:	b	1cc7c <__assert_fail@plt+0xb8ac>
   1db7c:	mov	r4, r8
   1db80:	mov	r7, #0
   1db84:	b	1cc50 <__assert_fail@plt+0xb880>
   1db88:	mov	r4, r8
   1db8c:	mov	r7, #0
   1db90:	b	1d3a8 <__assert_fail@plt+0xbfd8>
   1db94:	mov	r4, r8
   1db98:	mov	r7, #0
   1db9c:	b	1d350 <__assert_fail@plt+0xbf80>
   1dba0:	mov	r4, r8
   1dba4:	mov	r7, #0
   1dba8:	b	1d340 <__assert_fail@plt+0xbf70>
   1dbac:	mov	r4, r8
   1dbb0:	mov	r7, #0
   1dbb4:	b	1d240 <__assert_fail@plt+0xbe70>
   1dbb8:	mov	r4, r8
   1dbbc:	b	1d13c <__assert_fail@plt+0xbd6c>
   1dbc0:	mov	r4, r8
   1dbc4:	mov	r7, #0
   1dbc8:	b	1d4e4 <__assert_fail@plt+0xc114>
   1dbcc:	mov	r4, r8
   1dbd0:	b	1c9dc <__assert_fail@plt+0xb60c>
   1dbd4:	mov	ip, #100	; 0x64
   1dbd8:	movw	r0, #10000	; 0x2710
   1dbdc:	ldr	r2, [sp, #84]	; 0x54
   1dbe0:	mul	ip, ip, lr
   1dbe4:	mov	lr, #1
   1dbe8:	str	lr, [sp, #92]	; 0x5c
   1dbec:	mov	lr, #20
   1dbf0:	mla	ip, r0, r8, ip
   1dbf4:	mov	r0, #9
   1dbf8:	eor	r2, r2, #1
   1dbfc:	str	r0, [sp, #88]	; 0x58
   1dc00:	add	ip, ip, r1
   1dc04:	b	1cb4c <__assert_fail@plt+0xb77c>
   1dc08:	ldr	r2, [sp, #84]	; 0x54
   1dc0c:	mov	r1, #1
   1dc10:	mov	ip, #100	; 0x64
   1dc14:	str	r1, [sp, #92]	; 0x5c
   1dc18:	mov	r1, #6
   1dc1c:	mla	ip, ip, r8, lr
   1dc20:	mov	lr, #4
   1dc24:	str	r1, [sp, #88]	; 0x58
   1dc28:	eor	r2, r2, #1
   1dc2c:	b	1cb4c <__assert_fail@plt+0xb77c>
   1dc30:	cmp	r1, #0
   1dc34:	bne	1dbd4 <__assert_fail@plt+0xc804>
   1dc38:	cmp	lr, #0
   1dc3c:	bne	1dc08 <__assert_fail@plt+0xc838>
   1dc40:	ldr	r2, [sp, #84]	; 0x54
   1dc44:	mov	r1, #1
   1dc48:	mov	ip, r8
   1dc4c:	str	r1, [sp, #92]	; 0x5c
   1dc50:	mov	r1, #3
   1dc54:	str	r1, [sp, #88]	; 0x58
   1dc58:	eor	r2, r2, #1
   1dc5c:	b	1cb4c <__assert_fail@plt+0xb77c>
   1dc60:	ldr	r2, [sp, #84]	; 0x54
   1dc64:	mov	r1, #1
   1dc68:	mov	ip, #100	; 0x64
   1dc6c:	str	r1, [sp, #92]	; 0x5c
   1dc70:	mov	r1, #5
   1dc74:	mla	ip, ip, r8, lr
   1dc78:	str	r1, [sp, #88]	; 0x58
   1dc7c:	eor	r2, r2, #1
   1dc80:	b	1cb48 <__assert_fail@plt+0xb778>
   1dc84:	mov	r9, #45	; 0x2d
   1dc88:	sub	r2, r5, #1
   1dc8c:	sub	r2, r2, r8
   1dc90:	cmp	r2, #0
   1dc94:	movle	r3, #0
   1dc98:	andgt	r3, r3, #1
   1dc9c:	cmp	r3, #0
   1dca0:	ldr	r3, [sp, #44]	; 0x2c
   1dca4:	moveq	r2, #0
   1dca8:	cmp	r3, #95	; 0x5f
   1dcac:	beq	1dd40 <__assert_fail@plt+0xc970>
   1dcb0:	ldr	r3, [sp, #28]
   1dcb4:	sub	sl, r3, fp
   1dcb8:	cmp	sl, #1
   1dcbc:	bls	1c440 <__assert_fail@plt+0xb070>
   1dcc0:	ldr	r3, [sp, #44]	; 0x2c
   1dcc4:	cmp	r6, #0
   1dcc8:	add	fp, fp, #1
   1dccc:	strbne	r9, [r6], #1
   1dcd0:	cmp	r3, #45	; 0x2d
   1dcd4:	beq	1dce4 <__assert_fail@plt+0xc914>
   1dcd8:	sub	r5, r5, #1
   1dcdc:	cmp	r5, #0
   1dce0:	bge	1ce90 <__assert_fail@plt+0xbac0>
   1dce4:	mov	r9, r8
   1dce8:	mov	r5, #0
   1dcec:	b	1ce9c <__assert_fail@plt+0xbacc>
   1dcf0:	mov	r1, #48	; 0x30
   1dcf4:	mov	r3, #1
   1dcf8:	str	r1, [sp, #44]	; 0x2c
   1dcfc:	b	1ce38 <__assert_fail@plt+0xba68>
   1dd00:	mov	fp, r3
   1dd04:	b	1c414 <__assert_fail@plt+0xb044>
   1dd08:	bl	110f4 <memcpy@plt>
   1dd0c:	b	1cf00 <__assert_fail@plt+0xbb30>
   1dd10:	bl	110f4 <memcpy@plt>
   1dd14:	b	1cc3c <__assert_fail@plt+0xb86c>
   1dd18:	add	r1, sp, #113	; 0x71
   1dd1c:	mov	r2, r7
   1dd20:	mov	r0, r6
   1dd24:	bl	1c218 <__assert_fail@plt+0xae48>
   1dd28:	b	1cc3c <__assert_fail@plt+0xb86c>
   1dd2c:	mov	r7, r8
   1dd30:	mov	r5, #0
   1dd34:	b	1d454 <__assert_fail@plt+0xc084>
   1dd38:	mov	r9, #43	; 0x2b
   1dd3c:	b	1dc88 <__assert_fail@plt+0xc8b8>
   1dd40:	ldr	r3, [sp, #28]
   1dd44:	add	fp, fp, r2
   1dd48:	cmp	r6, #0
   1dd4c:	sub	r5, r5, r2
   1dd50:	sub	sl, r3, fp
   1dd54:	beq	1dd9c <__assert_fail@plt+0xc9cc>
   1dd58:	mov	r1, #32
   1dd5c:	mov	r0, r6
   1dd60:	add	r6, r6, r2
   1dd64:	bl	112c8 <memset@plt>
   1dd68:	b	1dcb8 <__assert_fail@plt+0xc8e8>
   1dd6c:	cmp	r3, #1
   1dd70:	bls	1c440 <__assert_fail@plt+0xb070>
   1dd74:	cmp	r6, #0
   1dd78:	mov	r7, #1
   1dd7c:	bne	1d024 <__assert_fail@plt+0xbc54>
   1dd80:	b	1cd64 <__assert_fail@plt+0xb994>
   1dd84:	cmp	r3, #1
   1dd88:	bls	1c440 <__assert_fail@plt+0xb070>
   1dd8c:	cmp	r6, #0
   1dd90:	mov	r7, #1
   1dd94:	bne	1cd5c <__assert_fail@plt+0xb98c>
   1dd98:	b	1cd64 <__assert_fail@plt+0xb994>
   1dd9c:	cmp	sl, #1
   1dda0:	bls	1c440 <__assert_fail@plt+0xb070>
   1dda4:	add	fp, fp, #1
   1dda8:	sub	r5, r5, #1
   1ddac:	b	1dcdc <__assert_fail@plt+0xc90c>
   1ddb0:	ldr	r1, [sp, #44]	; 0x2c
   1ddb4:	cmp	r1, #43	; 0x2b
   1ddb8:	movne	r0, #4
   1ddbc:	movne	r1, #0
   1ddc0:	strdne	r0, [sp, #88]	; 0x58
   1ddc4:	bne	1cb48 <__assert_fail@plt+0xb778>
   1ddc8:	mov	r1, #4
   1ddcc:	str	r1, [sp, #88]	; 0x58
   1ddd0:	movw	r1, #9999	; 0x270f
   1ddd4:	cmp	r1, ip
   1ddd8:	bcs	1de0c <__assert_fail@plt+0xca3c>
   1dddc:	mov	r1, #1
   1dde0:	str	r1, [sp, #92]	; 0x5c
   1dde4:	mov	r1, #43	; 0x2b
   1dde8:	str	r1, [sp, #44]	; 0x2c
   1ddec:	b	1cb48 <__assert_fail@plt+0xb778>
   1ddf0:	asreq	r1, r3, #31
   1ddf4:	beq	1d560 <__assert_fail@plt+0xc190>
   1ddf8:	b	1d5a0 <__assert_fail@plt+0xc1d0>
   1ddfc:	mov	r0, #0
   1de00:	mov	r1, #2
   1de04:	mov	r2, #1
   1de08:	strd	r0, [sp, #84]	; 0x54
   1de0c:	ldr	r1, [sp, #88]	; 0x58
   1de10:	cmp	r5, r1
   1de14:	movle	r1, #0
   1de18:	movgt	r1, #1
   1de1c:	str	r1, [sp, #92]	; 0x5c
   1de20:	mov	r1, #43	; 0x2b
   1de24:	str	r1, [sp, #44]	; 0x2c
   1de28:	b	1cb48 <__assert_fail@plt+0xb778>
   1de2c:	mov	r3, #121	; 0x79
   1de30:	b	1cb60 <__assert_fail@plt+0xb790>
   1de34:	sub	r2, r2, #1
   1de38:	tst	r2, #3
   1de3c:	movwne	r2, #365	; 0x16d
   1de40:	bne	1de88 <__assert_fail@plt+0xcab8>
   1de44:	ldr	r1, [sp, #68]	; 0x44
   1de48:	mov	ip, #100	; 0x64
   1de4c:	smull	r1, r0, r1, r2
   1de50:	asr	r1, r2, #31
   1de54:	rsb	r1, r1, r0, asr #5
   1de58:	mls	r1, ip, r1, r2
   1de5c:	cmp	r1, #0
   1de60:	movwne	r2, #366	; 0x16e
   1de64:	bne	1de88 <__assert_fail@plt+0xcab8>
   1de68:	mov	ip, #400	; 0x190
   1de6c:	movw	r1, #365	; 0x16d
   1de70:	movw	lr, #366	; 0x16e
   1de74:	sdiv	r0, r2, ip
   1de78:	mls	r2, ip, r0, r2
   1de7c:	cmp	r2, #0
   1de80:	movne	r2, r1
   1de84:	moveq	r2, lr
   1de88:	add	r9, r9, r2
   1de8c:	ldr	r0, [sp, #64]	; 0x40
   1de90:	mvn	lr, #0
   1de94:	ldr	r2, [sp, #84]	; 0x54
   1de98:	sub	r2, r9, r2
   1de9c:	add	r2, r2, #380	; 0x17c
   1dea0:	add	r2, r2, #2
   1dea4:	asr	r1, r2, #31
   1dea8:	smull	ip, r0, r0, r2
   1deac:	add	r0, r0, r2
   1deb0:	rsb	r1, r1, r0, asr #2
   1deb4:	rsb	r1, r1, r1, lsl #3
   1deb8:	sub	r2, r2, r1
   1debc:	sub	r2, r9, r2
   1dec0:	add	sl, r2, #3
   1dec4:	b	1d790 <__assert_fail@plt+0xc3c0>
   1dec8:	ldr	r1, [sp, #44]	; 0x2c
   1decc:	cmp	r1, #43	; 0x2b
   1ded0:	beq	1e020 <__assert_fail@plt+0xcc50>
   1ded4:	mov	r0, #2
   1ded8:	mov	r1, #0
   1dedc:	strd	r0, [sp, #88]	; 0x58
   1dee0:	b	1cb48 <__assert_fail@plt+0xb778>
   1dee4:	mov	r3, #67	; 0x43
   1dee8:	b	1cb60 <__assert_fail@plt+0xb790>
   1deec:	cmp	r7, sl
   1def0:	bcs	1c440 <__assert_fail@plt+0xb070>
   1def4:	ldr	r3, [sp, #28]
   1def8:	add	fp, fp, r7
   1defc:	cmp	r6, #0
   1df00:	sub	r8, r3, fp
   1df04:	bne	1d5d0 <__assert_fail@plt+0xc200>
   1df08:	ldr	r3, [sp, #44]	; 0x2c
   1df0c:	cmp	r3, #45	; 0x2d
   1df10:	bne	1e030 <__assert_fail@plt+0xcc60>
   1df14:	ldr	r3, [sp, #28]
   1df18:	cmp	r3, fp
   1df1c:	bne	1c400 <__assert_fail@plt+0xb030>
   1df20:	b	1c440 <__assert_fail@plt+0xb070>
   1df24:	cmp	sl, #1
   1df28:	bls	1c440 <__assert_fail@plt+0xb070>
   1df2c:	cmp	r6, #0
   1df30:	mov	r4, #1
   1df34:	bne	1d324 <__assert_fail@plt+0xbf54>
   1df38:	b	1d32c <__assert_fail@plt+0xbf5c>
   1df3c:	ldr	r2, [sp, #64]	; 0x40
   1df40:	smull	r2, r1, r2, sl
   1df44:	mov	r2, #2
   1df48:	str	r2, [sp, #88]	; 0x58
   1df4c:	asr	r2, sl, #31
   1df50:	add	sl, r1, sl
   1df54:	rsb	r2, r2, sl, asr #2
   1df58:	add	r2, r2, #1
   1df5c:	b	1cc8c <__assert_fail@plt+0xb8bc>
   1df60:	movw	r2, #63636	; 0xf894
   1df64:	movt	r2, #65535	; 0xffff
   1df68:	ldr	r1, [sp, #44]	; 0x2c
   1df6c:	sub	r2, r2, lr
   1df70:	add	ip, r8, #1888	; 0x760
   1df74:	cmp	r8, r2
   1df78:	add	ip, ip, #12
   1df7c:	movlt	r2, #1
   1df80:	movge	r2, #0
   1df84:	add	ip, ip, lr
   1df88:	str	r2, [sp, #84]	; 0x54
   1df8c:	movge	r2, #1
   1df90:	movlt	r2, #0
   1df94:	cmp	r1, #0
   1df98:	bne	1ddb0 <__assert_fail@plt+0xc9e0>
   1df9c:	ldr	r1, [sp, #1180]	; 0x49c
   1dfa0:	cmp	r1, #43	; 0x2b
   1dfa4:	beq	1ddc8 <__assert_fail@plt+0xc9f8>
   1dfa8:	mov	r0, #4
   1dfac:	str	r1, [sp, #44]	; 0x2c
   1dfb0:	mov	r1, #0
   1dfb4:	strd	r0, [sp, #88]	; 0x58
   1dfb8:	b	1cb48 <__assert_fail@plt+0xb778>
   1dfbc:	mov	r3, #89	; 0x59
   1dfc0:	b	1cb60 <__assert_fail@plt+0xb790>
   1dfc4:	bl	110f4 <memcpy@plt>
   1dfc8:	b	1d224 <__assert_fail@plt+0xbe54>
   1dfcc:	mov	r2, r7
   1dfd0:	mov	r0, r6
   1dfd4:	ldr	r1, [sp, #56]	; 0x38
   1dfd8:	bl	1c218 <__assert_fail@plt+0xae48>
   1dfdc:	b	1d224 <__assert_fail@plt+0xbe54>
   1dfe0:	bl	110f4 <memcpy@plt>
   1dfe4:	b	1d5ec <__assert_fail@plt+0xc21c>
   1dfe8:	add	r0, r4, #2
   1dfec:	mov	sl, #1
   1dff0:	mov	r1, r0
   1dff4:	ldrb	r2, [r0], #1
   1dff8:	add	sl, sl, #1
   1dffc:	cmp	r2, #58	; 0x3a
   1e000:	bne	1da90 <__assert_fail@plt+0xc6c0>
   1e004:	b	1dff0 <__assert_fail@plt+0xcc20>
   1e008:	ldr	r2, [sp, #44]	; 0x2c
   1e00c:	mov	r1, #2
   1e010:	str	r2, [sp, #84]	; 0x54
   1e014:	mov	r2, #1
   1e018:	str	r1, [sp, #88]	; 0x58
   1e01c:	b	1de0c <__assert_fail@plt+0xca3c>
   1e020:	mov	r1, #2
   1e024:	str	r1, [sp, #88]	; 0x58
   1e028:	mov	r1, #99	; 0x63
   1e02c:	b	1ddd4 <__assert_fail@plt+0xca04>
   1e030:	sub	r5, r5, r7
   1e034:	cmp	r8, r5
   1e038:	bls	1c440 <__assert_fail@plt+0xb070>
   1e03c:	add	fp, fp, r5
   1e040:	mov	r6, #0
   1e044:	b	1c400 <__assert_fail@plt+0xb030>
   1e048:	ldr	r3, [sp, #60]	; 0x3c
   1e04c:	mov	lr, #4
   1e050:	mov	ip, #43	; 0x2b
   1e054:	mov	r0, r7
   1e058:	movw	r2, #3676	; 0xe5c
   1e05c:	movt	r2, #2
   1e060:	mvn	r1, #0
   1e064:	mov	r9, r2
   1e068:	mov	r5, r7
   1e06c:	stm	sp, {r3, ip, lr}
   1e070:	str	ip, [sp, #44]	; 0x2c
   1e074:	str	lr, [sp, #84]	; 0x54
   1e078:	ldr	r3, [sp, #1188]	; 0x4a4
   1e07c:	ldr	lr, [sp, #1192]	; 0x4a8
   1e080:	ldr	ip, [sp, #1196]	; 0x4ac
   1e084:	str	r3, [sp, #12]
   1e088:	ldr	r3, [sp, #48]	; 0x30
   1e08c:	str	lr, [sp, #16]
   1e090:	str	ip, [sp, #20]
   1e094:	bl	1c2c0 <__assert_fail@plt+0xaef0>
   1e098:	mov	r8, r0
   1e09c:	mov	r7, r0
   1e0a0:	b	1d454 <__assert_fail@plt+0xc084>
   1e0a4:	cmp	r2, #0
   1e0a8:	add	ip, ip, #100	; 0x64
   1e0ac:	beq	1cb1c <__assert_fail@plt+0xb74c>
   1e0b0:	b	1d7f8 <__assert_fail@plt+0xc428>
   1e0b4:	ldr	r2, [sp, #36]	; 0x24
   1e0b8:	mov	r3, #75	; 0x4b
   1e0bc:	str	r3, [r2]
   1e0c0:	b	1c44c <__assert_fail@plt+0xb07c>
   1e0c4:	strd	r4, [sp, #-16]!
   1e0c8:	mov	ip, #0
   1e0cc:	str	r6, [sp, #8]
   1e0d0:	mvn	r6, #0
   1e0d4:	str	lr, [sp, #12]
   1e0d8:	sub	sp, sp, #32
   1e0dc:	ldr	r4, [sp, #48]	; 0x30
   1e0e0:	add	r5, sp, #31
   1e0e4:	str	ip, [sp]
   1e0e8:	ldr	lr, [sp, #52]	; 0x34
   1e0ec:	str	ip, [sp, #4]
   1e0f0:	str	r6, [sp, #8]
   1e0f4:	str	r5, [sp, #12]
   1e0f8:	str	r4, [sp, #16]
   1e0fc:	str	lr, [sp, #20]
   1e100:	strb	ip, [sp, #31]
   1e104:	bl	1c2c0 <__assert_fail@plt+0xaef0>
   1e108:	add	sp, sp, #32
   1e10c:	ldrd	r4, [sp]
   1e110:	ldr	r6, [sp, #8]
   1e114:	add	sp, sp, #12
   1e118:	pop	{pc}		; (ldr pc, [sp], #4)
   1e11c:	umull	r2, r3, r1, r2
   1e120:	cmp	r3, #0
   1e124:	bne	1e130 <__assert_fail@plt+0xcd60>
   1e128:	mov	r1, r2
   1e12c:	b	1be38 <__assert_fail@plt+0xaa68>
   1e130:	str	r4, [sp, #-8]!
   1e134:	str	lr, [sp, #4]
   1e138:	bl	11298 <__errno_location@plt>
   1e13c:	mov	r3, #12
   1e140:	ldr	r4, [sp]
   1e144:	add	sp, sp, #4
   1e148:	str	r3, [r0]
   1e14c:	mov	r0, #0
   1e150:	pop	{pc}		; (ldr pc, [sp], #4)
   1e154:	push	{lr}		; (str lr, [sp, #-4]!)
   1e158:	sub	sp, sp, #268	; 0x10c
   1e15c:	movw	r2, #257	; 0x101
   1e160:	add	r1, sp, #4
   1e164:	bl	1e1ac <__assert_fail@plt+0xcddc>
   1e168:	cmp	r0, #0
   1e16c:	movne	r0, #0
   1e170:	bne	1e1a4 <__assert_fail@plt+0xcdd4>
   1e174:	movw	r1, #1804	; 0x70c
   1e178:	movt	r1, #2
   1e17c:	add	r0, sp, #4
   1e180:	bl	110a0 <strcmp@plt>
   1e184:	cmp	r0, #0
   1e188:	beq	1e1a4 <__assert_fail@plt+0xcdd4>
   1e18c:	add	r0, sp, #4
   1e190:	movw	r1, #3708	; 0xe7c
   1e194:	movt	r1, #2
   1e198:	bl	110a0 <strcmp@plt>
   1e19c:	adds	r0, r0, #0
   1e1a0:	movne	r0, #1
   1e1a4:	add	sp, sp, #268	; 0x10c
   1e1a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1ac:	strd	r4, [sp, #-16]!
   1e1b0:	mov	r5, r1
   1e1b4:	mov	r1, #0
   1e1b8:	mov	r4, r2
   1e1bc:	str	r6, [sp, #8]
   1e1c0:	str	lr, [sp, #12]
   1e1c4:	bl	1131c <setlocale@plt>
   1e1c8:	subs	r6, r0, #0
   1e1cc:	beq	1e24c <__assert_fail@plt+0xce7c>
   1e1d0:	bl	11274 <strlen@plt>
   1e1d4:	cmp	r4, r0
   1e1d8:	bhi	1e1f8 <__assert_fail@plt+0xce28>
   1e1dc:	cmp	r4, #0
   1e1e0:	moveq	r0, #34	; 0x22
   1e1e4:	bne	1e21c <__assert_fail@plt+0xce4c>
   1e1e8:	ldrd	r4, [sp]
   1e1ec:	ldr	r6, [sp, #8]
   1e1f0:	add	sp, sp, #12
   1e1f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e1f8:	add	r2, r0, #1
   1e1fc:	mov	r1, r6
   1e200:	mov	r0, r5
   1e204:	bl	110f4 <memcpy@plt>
   1e208:	ldrd	r4, [sp]
   1e20c:	mov	r0, #0
   1e210:	ldr	r6, [sp, #8]
   1e214:	add	sp, sp, #12
   1e218:	pop	{pc}		; (ldr pc, [sp], #4)
   1e21c:	sub	r4, r4, #1
   1e220:	mov	r1, r6
   1e224:	mov	r2, r4
   1e228:	mov	r0, r5
   1e22c:	bl	110f4 <memcpy@plt>
   1e230:	mov	r3, #0
   1e234:	mov	r0, #34	; 0x22
   1e238:	strb	r3, [r5, r4]
   1e23c:	ldrd	r4, [sp]
   1e240:	ldr	r6, [sp, #8]
   1e244:	add	sp, sp, #12
   1e248:	pop	{pc}		; (ldr pc, [sp], #4)
   1e24c:	cmp	r4, #0
   1e250:	mov	r0, #22
   1e254:	strbne	r6, [r5]
   1e258:	ldrd	r4, [sp]
   1e25c:	ldr	r6, [sp, #8]
   1e260:	add	sp, sp, #12
   1e264:	pop	{pc}		; (ldr pc, [sp], #4)
   1e268:	mov	r1, #0
   1e26c:	b	1131c <setlocale@plt>
   1e270:	cmp	r3, #0
   1e274:	cmpeq	r2, #0
   1e278:	bne	1e29c <__assert_fail@plt+0xcecc>
   1e27c:	cmp	r1, #0
   1e280:	movlt	r1, #-2147483648	; 0x80000000
   1e284:	movlt	r0, #0
   1e288:	blt	1e298 <__assert_fail@plt+0xcec8>
   1e28c:	cmpeq	r0, #0
   1e290:	mvnne	r1, #-2147483648	; 0x80000000
   1e294:	mvnne	r0, #0
   1e298:	b	1e380 <__assert_fail@plt+0xcfb0>
   1e29c:	sub	sp, sp, #8
   1e2a0:	push	{sp, lr}
   1e2a4:	cmp	r1, #0
   1e2a8:	blt	1e2c8 <__assert_fail@plt+0xcef8>
   1e2ac:	cmp	r3, #0
   1e2b0:	blt	1e2fc <__assert_fail@plt+0xcf2c>
   1e2b4:	bl	1e390 <__assert_fail@plt+0xcfc0>
   1e2b8:	ldr	lr, [sp, #4]
   1e2bc:	add	sp, sp, #8
   1e2c0:	pop	{r2, r3}
   1e2c4:	bx	lr
   1e2c8:	rsbs	r0, r0, #0
   1e2cc:	sbc	r1, r1, r1, lsl #1
   1e2d0:	cmp	r3, #0
   1e2d4:	blt	1e320 <__assert_fail@plt+0xcf50>
   1e2d8:	bl	1e390 <__assert_fail@plt+0xcfc0>
   1e2dc:	ldr	lr, [sp, #4]
   1e2e0:	add	sp, sp, #8
   1e2e4:	pop	{r2, r3}
   1e2e8:	rsbs	r0, r0, #0
   1e2ec:	sbc	r1, r1, r1, lsl #1
   1e2f0:	rsbs	r2, r2, #0
   1e2f4:	sbc	r3, r3, r3, lsl #1
   1e2f8:	bx	lr
   1e2fc:	rsbs	r2, r2, #0
   1e300:	sbc	r3, r3, r3, lsl #1
   1e304:	bl	1e390 <__assert_fail@plt+0xcfc0>
   1e308:	ldr	lr, [sp, #4]
   1e30c:	add	sp, sp, #8
   1e310:	pop	{r2, r3}
   1e314:	rsbs	r0, r0, #0
   1e318:	sbc	r1, r1, r1, lsl #1
   1e31c:	bx	lr
   1e320:	rsbs	r2, r2, #0
   1e324:	sbc	r3, r3, r3, lsl #1
   1e328:	bl	1e390 <__assert_fail@plt+0xcfc0>
   1e32c:	ldr	lr, [sp, #4]
   1e330:	add	sp, sp, #8
   1e334:	pop	{r2, r3}
   1e338:	rsbs	r2, r2, #0
   1e33c:	sbc	r3, r3, r3, lsl #1
   1e340:	bx	lr
   1e344:	cmp	r3, #0
   1e348:	cmpeq	r2, #0
   1e34c:	bne	1e364 <__assert_fail@plt+0xcf94>
   1e350:	cmp	r1, #0
   1e354:	cmpeq	r0, #0
   1e358:	mvnne	r1, #0
   1e35c:	mvnne	r0, #0
   1e360:	b	1e380 <__assert_fail@plt+0xcfb0>
   1e364:	sub	sp, sp, #8
   1e368:	push	{sp, lr}
   1e36c:	bl	1e390 <__assert_fail@plt+0xcfc0>
   1e370:	ldr	lr, [sp, #4]
   1e374:	add	sp, sp, #8
   1e378:	pop	{r2, r3}
   1e37c:	bx	lr
   1e380:	push	{r1, lr}
   1e384:	mov	r0, #8
   1e388:	bl	1107c <raise@plt>
   1e38c:	pop	{r1, pc}
   1e390:	cmp	r1, r3
   1e394:	cmpeq	r0, r2
   1e398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e39c:	mov	r4, r0
   1e3a0:	movcc	r0, #0
   1e3a4:	mov	r5, r1
   1e3a8:	ldr	lr, [sp, #36]	; 0x24
   1e3ac:	movcc	r1, r0
   1e3b0:	bcc	1e4ac <__assert_fail@plt+0xd0dc>
   1e3b4:	cmp	r3, #0
   1e3b8:	clzeq	ip, r2
   1e3bc:	clzne	ip, r3
   1e3c0:	addeq	ip, ip, #32
   1e3c4:	cmp	r5, #0
   1e3c8:	clzeq	r1, r4
   1e3cc:	addeq	r1, r1, #32
   1e3d0:	clzne	r1, r5
   1e3d4:	sub	ip, ip, r1
   1e3d8:	sub	sl, ip, #32
   1e3dc:	lsl	r9, r3, ip
   1e3e0:	rsb	fp, ip, #32
   1e3e4:	orr	r9, r9, r2, lsl sl
   1e3e8:	orr	r9, r9, r2, lsr fp
   1e3ec:	lsl	r8, r2, ip
   1e3f0:	cmp	r5, r9
   1e3f4:	cmpeq	r4, r8
   1e3f8:	movcc	r0, #0
   1e3fc:	movcc	r1, r0
   1e400:	bcc	1e41c <__assert_fail@plt+0xd04c>
   1e404:	mov	r0, #1
   1e408:	subs	r4, r4, r8
   1e40c:	lsl	r1, r0, sl
   1e410:	orr	r1, r1, r0, lsr fp
   1e414:	lsl	r0, r0, ip
   1e418:	sbc	r5, r5, r9
   1e41c:	cmp	ip, #0
   1e420:	beq	1e4ac <__assert_fail@plt+0xd0dc>
   1e424:	lsr	r6, r8, #1
   1e428:	orr	r6, r6, r9, lsl #31
   1e42c:	lsr	r7, r9, #1
   1e430:	mov	r2, ip
   1e434:	b	1e458 <__assert_fail@plt+0xd088>
   1e438:	subs	r3, r4, r6
   1e43c:	sbc	r8, r5, r7
   1e440:	adds	r3, r3, r3
   1e444:	adc	r8, r8, r8
   1e448:	adds	r4, r3, #1
   1e44c:	adc	r5, r8, #0
   1e450:	subs	r2, r2, #1
   1e454:	beq	1e474 <__assert_fail@plt+0xd0a4>
   1e458:	cmp	r5, r7
   1e45c:	cmpeq	r4, r6
   1e460:	bcs	1e438 <__assert_fail@plt+0xd068>
   1e464:	adds	r4, r4, r4
   1e468:	adc	r5, r5, r5
   1e46c:	subs	r2, r2, #1
   1e470:	bne	1e458 <__assert_fail@plt+0xd088>
   1e474:	lsr	r3, r4, ip
   1e478:	orr	r3, r3, r5, lsl fp
   1e47c:	lsr	r2, r5, ip
   1e480:	orr	r3, r3, r5, lsr sl
   1e484:	adds	r0, r0, r4
   1e488:	mov	r4, r3
   1e48c:	lsl	r3, r2, ip
   1e490:	orr	r3, r3, r4, lsl sl
   1e494:	lsl	ip, r4, ip
   1e498:	orr	r3, r3, r4, lsr fp
   1e49c:	adc	r1, r1, r5
   1e4a0:	subs	r0, r0, ip
   1e4a4:	mov	r5, r2
   1e4a8:	sbc	r1, r1, r3
   1e4ac:	cmp	lr, #0
   1e4b0:	strdne	r4, [lr]
   1e4b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e4b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e4bc:	mov	r7, r0
   1e4c0:	ldr	r6, [pc, #72]	; 1e510 <__assert_fail@plt+0xd140>
   1e4c4:	ldr	r5, [pc, #72]	; 1e514 <__assert_fail@plt+0xd144>
   1e4c8:	add	r6, pc, r6
   1e4cc:	add	r5, pc, r5
   1e4d0:	sub	r6, r6, r5
   1e4d4:	mov	r8, r1
   1e4d8:	mov	r9, r2
   1e4dc:	bl	11044 <calloc@plt-0x20>
   1e4e0:	asrs	r6, r6, #2
   1e4e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e4e8:	mov	r4, #0
   1e4ec:	add	r4, r4, #1
   1e4f0:	ldr	r3, [r5], #4
   1e4f4:	mov	r2, r9
   1e4f8:	mov	r1, r8
   1e4fc:	mov	r0, r7
   1e500:	blx	r3
   1e504:	cmp	r6, r4
   1e508:	bne	1e4ec <__assert_fail@plt+0xd11c>
   1e50c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e510:	andeq	r2, r1, r4, asr #20
   1e514:	andeq	r2, r1, ip, lsr sl
   1e518:	bx	lr
   1e51c:	ldr	r3, [pc, #12]	; 1e530 <__assert_fail@plt+0xd160>
   1e520:	mov	r1, #0
   1e524:	add	r3, pc, r3
   1e528:	ldr	r2, [r3]
   1e52c:	b	112bc <__cxa_atexit@plt>
   1e530:	andeq	r2, r1, r0, lsl ip

Disassembly of section .fini:

0001e534 <.fini>:
   1e534:	push	{r3, lr}
   1e538:	pop	{r3, pc}
