
../repos/dvidelabs-flatcc-3b39ef7/test/load_test/load_test:     file format elf32-littlearm


Disassembly of section .init:

00012394 <.init>:
   12394:	push	{r3, lr}
   12398:	bl	124e4 <_start@@Base+0x3c>
   1239c:	pop	{r3, pc}

Disassembly of section .plt:

000123a0 <strcmp@plt-0x14>:
   123a0:	push	{lr}		; (str lr, [sp, #-4]!)
   123a4:	ldr	lr, [pc, #4]	; 123b0 <strcmp@plt-0x4>
   123a8:	add	lr, pc, lr
   123ac:	ldr	pc, [lr, #8]!
   123b0:	andeq	r7, r1, r0, asr ip

000123b4 <strcmp@plt>:
   123b4:	add	ip, pc, #0, 12
   123b8:	add	ip, ip, #94208	; 0x17000
   123bc:	ldr	pc, [ip, #3152]!	; 0xc50

000123c0 <printf@plt>:
   123c0:	add	ip, pc, #0, 12
   123c4:	add	ip, ip, #94208	; 0x17000
   123c8:	ldr	pc, [ip, #3144]!	; 0xc48

000123cc <fopen@plt>:
   123cc:	add	ip, pc, #0, 12
   123d0:	add	ip, ip, #94208	; 0x17000
   123d4:	ldr	pc, [ip, #3136]!	; 0xc40

000123d8 <free@plt>:
   123d8:	add	ip, pc, #0, 12
   123dc:	add	ip, ip, #94208	; 0x17000
   123e0:	ldr	pc, [ip, #3128]!	; 0xc38

000123e4 <memcpy@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #94208	; 0x17000
   123ec:	ldr	pc, [ip, #3120]!	; 0xc30

000123f0 <fwrite_unlocked@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #94208	; 0x17000
   123f8:	ldr	pc, [ip, #3112]!	; 0xc28

000123fc <realloc@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #94208	; 0x17000
   12404:	ldr	pc, [ip, #3104]!	; 0xc20

00012408 <gettimeofday@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #94208	; 0x17000
   12410:	ldr	pc, [ip, #3096]!	; 0xc18

00012414 <puts@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #94208	; 0x17000
   1241c:	ldr	pc, [ip, #3088]!	; 0xc10

00012420 <malloc@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #94208	; 0x17000
   12428:	ldr	pc, [ip, #3080]!	; 0xc08

0001242c <__libc_start_main@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #94208	; 0x17000
   12434:	ldr	pc, [ip, #3072]!	; 0xc00

00012438 <__gmon_start__@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #94208	; 0x17000
   12440:	ldr	pc, [ip, #3064]!	; 0xbf8

00012444 <bcmp@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #94208	; 0x17000
   1244c:	ldr	pc, [ip, #3056]!	; 0xbf0

00012450 <strlen@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #94208	; 0x17000
   12458:	ldr	pc, [ip, #3048]!	; 0xbe8

0001245c <posix_memalign@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #94208	; 0x17000
   12464:	ldr	pc, [ip, #3040]!	; 0xbe0

00012468 <memset@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #94208	; 0x17000
   12470:	ldr	pc, [ip, #3032]!	; 0xbd8

00012474 <memchr@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #94208	; 0x17000
   1247c:	ldr	pc, [ip, #3024]!	; 0xbd0

00012480 <fclose@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #94208	; 0x17000
   12488:	ldr	pc, [ip, #3016]!	; 0xbc8

0001248c <abort@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #94208	; 0x17000
   12494:	ldr	pc, [ip, #3008]!	; 0xbc0

00012498 <__assert_fail@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #94208	; 0x17000
   124a0:	ldr	pc, [ip, #3000]!	; 0xbb8

Disassembly of section .text:

000124a8 <_start@@Base>:
   124a8:	mov	fp, #0
   124ac:	mov	lr, #0
   124b0:	pop	{r1}		; (ldr r1, [sp], #4)
   124b4:	mov	r2, sp
   124b8:	push	{r2}		; (str r2, [sp, #-4]!)
   124bc:	push	{r0}		; (str r0, [sp, #-4]!)
   124c0:	ldr	ip, [pc, #16]	; 124d8 <_start@@Base+0x30>
   124c4:	push	{ip}		; (str ip, [sp, #-4]!)
   124c8:	ldr	r0, [pc, #12]	; 124dc <_start@@Base+0x34>
   124cc:	ldr	r3, [pc, #12]	; 124e0 <_start@@Base+0x38>
   124d0:	bl	1242c <__libc_start_main@plt>
   124d4:	bl	1248c <abort@plt>
   124d8:	andeq	r8, r1, r4, lsl #3
   124dc:	muleq	r1, r8, r5
   124e0:	andeq	r8, r1, r4, lsr #2
   124e4:	ldr	r3, [pc, #20]	; 12500 <_start@@Base+0x58>
   124e8:	ldr	r2, [pc, #20]	; 12504 <_start@@Base+0x5c>
   124ec:	add	r3, pc, r3
   124f0:	ldr	r2, [r3, r2]
   124f4:	cmp	r2, #0
   124f8:	bxeq	lr
   124fc:	b	12438 <__gmon_start__@plt>
   12500:	andeq	r7, r1, ip, lsl #22
   12504:	andeq	r0, r0, ip, asr r0
   12508:	ldr	r0, [pc, #24]	; 12528 <_start@@Base+0x80>
   1250c:	ldr	r3, [pc, #24]	; 1252c <_start@@Base+0x84>
   12510:	cmp	r3, r0
   12514:	bxeq	lr
   12518:	ldr	r3, [pc, #16]	; 12530 <_start@@Base+0x88>
   1251c:	cmp	r3, #0
   12520:	bxeq	lr
   12524:	bx	r3
   12528:	andeq	sl, r2, r8, rrx
   1252c:	andeq	sl, r2, r8, rrx
   12530:	andeq	r0, r0, r0
   12534:	ldr	r0, [pc, #36]	; 12560 <_start@@Base+0xb8>
   12538:	ldr	r1, [pc, #36]	; 12564 <_start@@Base+0xbc>
   1253c:	sub	r1, r1, r0
   12540:	asr	r1, r1, #2
   12544:	add	r1, r1, r1, lsr #31
   12548:	asrs	r1, r1, #1
   1254c:	bxeq	lr
   12550:	ldr	r3, [pc, #16]	; 12568 <_start@@Base+0xc0>
   12554:	cmp	r3, #0
   12558:	bxeq	lr
   1255c:	bx	r3
   12560:	andeq	sl, r2, r8, rrx
   12564:	andeq	sl, r2, r8, rrx
   12568:	andeq	r0, r0, r0
   1256c:	push	{r4, lr}
   12570:	ldr	r4, [pc, #24]	; 12590 <_start@@Base+0xe8>
   12574:	ldrb	r3, [r4]
   12578:	cmp	r3, #0
   1257c:	popne	{r4, pc}
   12580:	bl	12508 <_start@@Base+0x60>
   12584:	mov	r3, #1
   12588:	strb	r3, [r4]
   1258c:	pop	{r4, pc}
   12590:	andeq	sl, r2, r8, rrx
   12594:	b	12534 <_start@@Base+0x8c>

00012598 <main@@Base>:
   12598:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1259c:	add	fp, sp, #28
   125a0:	sub	sp, sp, #4
   125a4:	vpush	{d8-d10}
   125a8:	sub	sp, sp, #280	; 0x118
   125ac:	add	r4, sp, #28
   125b0:	mov	r0, r4
   125b4:	bl	12f8c <flatcc_builder_init@@Base>
   125b8:	mov	r0, r4
   125bc:	bl	12b90 <main@@Base+0x5f8>
   125c0:	sub	r1, fp, #76	; 0x4c
   125c4:	mov	r0, r4
   125c8:	bl	17970 <flatcc_builder_finalize_buffer@@Base>
   125cc:	movw	r1, #33194	; 0x81aa
   125d0:	mov	r7, r0
   125d4:	movw	r0, #33172	; 0x8194
   125d8:	movt	r0, #1
   125dc:	movt	r1, #1
   125e0:	bl	123cc <fopen@plt>
   125e4:	cmp	r0, #0
   125e8:	beq	12668 <main@@Base+0xd0>
   125ec:	ldr	r6, [fp, #-76]	; 0xffffffb4
   125f0:	mov	r5, r0
   125f4:	mov	r0, r7
   125f8:	mov	r1, #1
   125fc:	mov	r4, #1
   12600:	mov	r3, r5
   12604:	mov	r2, r6
   12608:	bl	123f0 <fwrite_unlocked@plt>
   1260c:	mov	r8, r0
   12610:	mov	r0, r5
   12614:	bl	12480 <fclose@plt>
   12618:	cmp	r6, r8
   1261c:	bne	12a0c <main@@Base+0x474>
   12620:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12624:	movw	r0, #33197	; 0x81ad
   12628:	movt	r0, #1
   1262c:	bl	123c0 <printf@plt>
   12630:	movw	r0, #34446	; 0x868e
   12634:	movt	r0, #1
   12638:	bl	12414 <puts@plt>
   1263c:	sub	r0, fp, #72	; 0x48
   12640:	mov	r1, #0
   12644:	bl	12408 <gettimeofday@plt>
   12648:	movw	r2, #42072	; 0xa458
   1264c:	movt	r2, #2
   12650:	ldr	r0, [r2]
   12654:	cmp	r0, #0
   12658:	beq	12670 <main@@Base+0xd8>
   1265c:	ldr	r1, [r2, #4]
   12660:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12664:	b	12680 <main@@Base+0xe8>
   12668:	mvn	r4, #0
   1266c:	b	12a0c <main@@Base+0x474>
   12670:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12674:	ldr	r1, [fp, #-68]	; 0xffffffbc
   12678:	strd	r0, [r2]
   1267c:	mov	r2, r0
   12680:	sub	r0, r2, r0
   12684:	ldr	r2, [fp, #-68]	; 0xffffffbc
   12688:	cmp	r7, #0
   1268c:	vmov	s2, r0
   12690:	sub	r1, r2, r1
   12694:	vmov	s0, r1
   12698:	vcvt.f64.s32	d16, s0
   1269c:	vcvt.f64.s32	d17, s2
   126a0:	beq	12b58 <main@@Base+0x5c0>
   126a4:	vldr	d8, [pc, #996]	; 12a90 <main@@Base+0x4f8>
   126a8:	movw	sl, #33499	; 0x82db
   126ac:	movw	r6, #41072	; 0xa070
   126b0:	add	r0, r7, #8
   126b4:	str	r7, [sp, #4]
   126b8:	movt	sl, #1
   126bc:	movt	r6, #2
   126c0:	str	r0, [sp, #8]
   126c4:	mov	r0, #0
   126c8:	vdiv.f64	d16, d16, d8
   126cc:	vadd.f64	d9, d16, d17
   126d0:	add	r4, sp, #28
   126d4:	str	r0, [sp, #12]
   126d8:	mov	r0, r4
   126dc:	bl	12b90 <main@@Base+0x5f8>
   126e0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   126e4:	mov	r0, r4
   126e8:	mov	r1, r7
   126ec:	bl	17924 <flatcc_builder_copy_buffer@@Base>
   126f0:	ldr	r0, [r7, #4]
   126f4:	movw	r1, #20301	; 0x4f4d
   126f8:	movt	r1, #21326	; 0x534e
   126fc:	cmp	r0, r1
   12700:	bne	12b74 <main@@Base+0x5dc>
   12704:	ldr	r8, [r7]
   12708:	mov	r5, r7
   1270c:	ldr	r0, [r5, r8]!
   12710:	mov	r4, r5
   12714:	ldrh	r9, [r4, -r0]!
   12718:	cmp	r9, #11
   1271c:	bls	12ab8 <main@@Base+0x520>
   12720:	ldrh	r0, [r4, #10]
   12724:	cmp	r0, #0
   12728:	beq	12ab8 <main@@Base+0x520>
   1272c:	mov	r1, r5
   12730:	ldr	r0, [r1, r0]!
   12734:	add	r0, r1, r0
   12738:	movw	r1, #33215	; 0x81bf
   1273c:	movt	r1, #1
   12740:	add	r0, r0, #4
   12744:	bl	123b4 <strcmp@plt>
   12748:	cmp	r0, #0
   1274c:	bne	12b38 <main@@Base+0x5a0>
   12750:	cmp	r9, #28
   12754:	bcc	12b18 <main@@Base+0x580>
   12758:	ldrh	r0, [r4, #26]
   1275c:	cmp	r0, #0
   12760:	beq	12b18 <main@@Base+0x580>
   12764:	ldr	r1, [r5, r0]!
   12768:	ldr	r2, [r5, r1]!
   1276c:	cmp	r2, #1000	; 0x3e8
   12770:	bne	12b18 <main@@Base+0x580>
   12774:	add	r1, r1, r8
   12778:	add	r2, r5, #4
   1277c:	add	r0, r1, r0
   12780:	ldr	r1, [sp, #8]
   12784:	str	r2, [sp, #16]
   12788:	add	r7, r1, r0
   1278c:	mov	r0, #0
   12790:	ldr	r4, [sp, #16]
   12794:	str	r0, [sp, #20]
   12798:	ldr	lr, [r4, r0, lsl #2]!
   1279c:	ldr	r1, [r4, lr]!
   127a0:	mov	r0, r4
   127a4:	ldrh	r2, [r0, -r1]!
   127a8:	cmp	r2, #12
   127ac:	bcc	12ab8 <main@@Base+0x520>
   127b0:	ldrh	r1, [r0, #10]
   127b4:	cmp	r1, #0
   127b8:	beq	12ab8 <main@@Base+0x520>
   127bc:	mov	r3, r4
   127c0:	mov	r5, #0
   127c4:	cmp	r2, #16
   127c8:	ldr	ip, [r3, r1]!
   127cc:	add	r3, r3, ip
   127d0:	add	r3, r3, #4
   127d4:	bcc	127ec <main@@Base+0x254>
   127d8:	ldrh	r2, [r0, #14]
   127dc:	cmp	r2, #0
   127e0:	ldrne	r0, [r4, r2]!
   127e4:	addne	r0, r4, r0
   127e8:	addne	r5, r0, #4
   127ec:	ldr	r0, [r3, #-4]
   127f0:	cmp	r0, #700	; 0x2bc
   127f4:	bne	12af8 <main@@Base+0x560>
   127f8:	cmp	r5, #0
   127fc:	beq	12ad8 <main@@Base+0x540>
   12800:	ldr	r0, [r5, #-4]
   12804:	movw	r2, #34464	; 0x86a0
   12808:	movt	r2, #1
   1280c:	cmp	r0, r2
   12810:	bne	12ad8 <main@@Base+0x540>
   12814:	add	r0, ip, lr
   12818:	mov	r4, r3
   1281c:	mov	r9, #0
   12820:	str	r7, [sp, #24]
   12824:	add	r0, r0, r1
   12828:	add	r8, r7, r0
   1282c:	mov	r0, r8
   12830:	mov	r1, sl
   12834:	mov	r2, #7
   12838:	bl	12444 <bcmp@plt>
   1283c:	cmp	r0, #0
   12840:	bne	12a44 <main@@Base+0x4ac>
   12844:	add	r9, r9, #1
   12848:	add	r8, r8, #7
   1284c:	cmp	r9, #100	; 0x64
   12850:	bne	1282c <main@@Base+0x294>
   12854:	ldr	r7, [sp, #24]
   12858:	mov	r4, #100	; 0x64
   1285c:	mov	r0, r5
   12860:	mov	r1, r6
   12864:	mov	r2, #1000	; 0x3e8
   12868:	bl	12444 <bcmp@plt>
   1286c:	cmp	r0, #0
   12870:	bne	12a98 <main@@Base+0x500>
   12874:	add	r5, r5, #1000	; 0x3e8
   12878:	subs	r4, r4, #1
   1287c:	bne	1285c <main@@Base+0x2c4>
   12880:	ldr	r0, [sp, #20]
   12884:	add	r7, r7, #4
   12888:	add	r0, r0, #1
   1288c:	cmp	r0, #1000	; 0x3e8
   12890:	bne	12790 <main@@Base+0x1f8>
   12894:	ldr	r0, [sp, #12]
   12898:	ldr	r7, [sp, #4]
   1289c:	add	r0, r0, #1
   128a0:	cmp	r0, #10
   128a4:	bne	126d0 <main@@Base+0x138>
   128a8:	sub	r0, fp, #72	; 0x48
   128ac:	mov	r1, #0
   128b0:	bl	12408 <gettimeofday@plt>
   128b4:	movw	r0, #42072	; 0xa458
   128b8:	movt	r0, #2
   128bc:	ldr	r6, [r0]
   128c0:	cmp	r6, #0
   128c4:	beq	128d4 <main@@Base+0x33c>
   128c8:	ldr	r9, [r0, #4]
   128cc:	ldr	r8, [fp, #-72]	; 0xffffffb8
   128d0:	b	128e4 <main@@Base+0x34c>
   128d4:	ldr	r6, [fp, #-72]	; 0xffffffb8
   128d8:	ldr	r9, [fp, #-68]	; 0xffffffbc
   128dc:	mov	r8, r6
   128e0:	stm	r0, {r6, r9}
   128e4:	movw	r0, #34203	; 0x859b
   128e8:	movw	r1, #33335	; 0x8237
   128ec:	ldr	r5, [fp, #-68]	; 0xffffffbc
   128f0:	ldr	r4, [fp, #-76]	; 0xffffffb4
   128f4:	movt	r0, #1
   128f8:	movt	r1, #1
   128fc:	bl	123c0 <printf@plt>
   12900:	sub	r1, r5, r9
   12904:	sub	r0, r8, r6
   12908:	vmov	s0, r1
   1290c:	vmov	s2, r0
   12910:	movw	r0, #34218	; 0x85aa
   12914:	movt	r0, #1
   12918:	vcvt.f64.s32	d16, s0
   1291c:	vcvt.f64.s32	d17, s2
   12920:	vdiv.f64	d16, d16, d8
   12924:	vadd.f64	d16, d16, d17
   12928:	vsub.f64	d9, d16, d9
   1292c:	vmov	r2, r3, d9
   12930:	bl	123c0 <printf@plt>
   12934:	movw	r0, #34242	; 0x85c2
   12938:	mov	r1, #10
   1293c:	movt	r0, #1
   12940:	bl	123c0 <printf@plt>
   12944:	movw	r0, #34258	; 0x85d2
   12948:	mov	r1, r4
   1294c:	movt	r0, #1
   12950:	bl	123c0 <printf@plt>
   12954:	vmov	s0, r4
   12958:	vmov.f64	d10, #36	; 0x41200000  10.0
   1295c:	movw	r0, #34277	; 0x85e5
   12960:	movt	r0, #1
   12964:	vcvt.f64.u32	d16, s0
   12968:	vmul.f64	d16, d16, d10
   1296c:	vdiv.f64	d16, d16, d8
   12970:	vdiv.f64	d16, d16, d9
   12974:	vmov	r2, r3, d16
   12978:	bl	123c0 <printf@plt>
   1297c:	vdiv.f64	d16, d10, d9
   12980:	movw	r0, #34301	; 0x85fd
   12984:	movt	r0, #1
   12988:	vmov	r2, r3, d16
   1298c:	bl	123c0 <printf@plt>
   12990:	vldr	d17, [pc, #488]	; 12b80 <main@@Base+0x5e8>
   12994:	vldr	d18, [pc, #492]	; 12b88 <main@@Base+0x5f0>
   12998:	vmul.f64	d16, d9, d17
   1299c:	vdiv.f64	d16, d16, d10
   129a0:	vcmpe.f64	d16, d18
   129a4:	vmrs	APSR_nzcv, fpscr
   129a8:	bpl	129bc <main@@Base+0x424>
   129ac:	movw	r0, #34334	; 0x861e
   129b0:	vmov	r2, r3, d16
   129b4:	movt	r0, #1
   129b8:	b	12a04 <main@@Base+0x46c>
   129bc:	vcmpe.f64	d16, d8
   129c0:	vmrs	APSR_nzcv, fpscr
   129c4:	bpl	129d8 <main@@Base+0x440>
   129c8:	vdiv.f64	d16, d16, d18
   129cc:	movw	r0, #34358	; 0x8636
   129d0:	movt	r0, #1
   129d4:	b	12a00 <main@@Base+0x468>
   129d8:	vcmpe.f64	d16, d17
   129dc:	vmrs	APSR_nzcv, fpscr
   129e0:	bpl	129f4 <main@@Base+0x45c>
   129e4:	vdiv.f64	d16, d16, d8
   129e8:	movw	r0, #34382	; 0x864e
   129ec:	movt	r0, #1
   129f0:	b	12a00 <main@@Base+0x468>
   129f4:	vdiv.f64	d16, d16, d17
   129f8:	movw	r0, #34406	; 0x8666
   129fc:	movt	r0, #1
   12a00:	vmov	r2, r3, d16
   12a04:	bl	123c0 <printf@plt>
   12a08:	mov	r4, #0
   12a0c:	add	r0, sp, #28
   12a10:	bl	13534 <flatcc_builder_clear@@Base>
   12a14:	mov	r0, r7
   12a18:	bl	123d8 <free@plt>
   12a1c:	cmp	r4, #0
   12a20:	beq	12a30 <main@@Base+0x498>
   12a24:	movw	r0, #34429	; 0x867d
   12a28:	movt	r0, #1
   12a2c:	bl	12414 <puts@plt>
   12a30:	mov	r0, r4
   12a34:	sub	sp, fp, #56	; 0x38
   12a38:	vpop	{d8-d10}
   12a3c:	add	sp, sp, #4
   12a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a44:	movw	r0, #34158	; 0x856e
   12a48:	mov	r1, r9
   12a4c:	mov	r2, r4
   12a50:	movt	r0, #1
   12a54:	bl	123c0 <printf@plt>
   12a58:	ldr	r0, [sp, #4]
   12a5c:	sub	r1, r8, r0
   12a60:	movw	r0, #34190	; 0x858e
   12a64:	movt	r0, #1
   12a68:	bl	123c0 <printf@plt>
   12a6c:	movw	r0, #39516	; 0x9a5c
   12a70:	movw	r1, #33237	; 0x81d5
   12a74:	movw	r3, #34093	; 0x852d
   12a78:	mov	r2, #85	; 0x55
   12a7c:	movt	r0, #1
   12a80:	movt	r1, #1
   12a84:	movt	r3, #1
   12a88:	bl	12498 <__assert_fail@plt>
   12a8c:	nop	{0}
   12a90:	andeq	r0, r0, r0
   12a94:	smlawbmi	lr, r0, r4, r8
   12a98:	movw	r0, #39516	; 0x9a5c
   12a9c:	movw	r1, #33237	; 0x81d5
   12aa0:	movw	r3, #34093	; 0x852d
   12aa4:	mov	r2, #91	; 0x5b
   12aa8:	movt	r0, #1
   12aac:	movt	r1, #1
   12ab0:	movt	r3, #1
   12ab4:	bl	12498 <__assert_fail@plt>
   12ab8:	movw	r0, #34060	; 0x850c
   12abc:	movt	r0, #1
   12ac0:	movw	r1, #33884	; 0x845c
   12ac4:	movw	r3, #33979	; 0x84bb
   12ac8:	movw	r2, #699	; 0x2bb
   12acc:	movt	r1, #1
   12ad0:	movt	r3, #1
   12ad4:	bl	12498 <__assert_fail@plt>
   12ad8:	movw	r0, #39516	; 0x9a5c
   12adc:	movw	r1, #33237	; 0x81d5
   12ae0:	movw	r3, #34093	; 0x852d
   12ae4:	mov	r2, #78	; 0x4e
   12ae8:	movt	r0, #1
   12aec:	movt	r1, #1
   12af0:	movt	r3, #1
   12af4:	bl	12498 <__assert_fail@plt>
   12af8:	movw	r0, #39516	; 0x9a5c
   12afc:	movw	r1, #33237	; 0x81d5
   12b00:	movw	r3, #34093	; 0x852d
   12b04:	mov	r2, #74	; 0x4a
   12b08:	movt	r0, #1
   12b0c:	movt	r1, #1
   12b10:	movt	r3, #1
   12b14:	bl	12498 <__assert_fail@plt>
   12b18:	movw	r0, #33228	; 0x81cc
   12b1c:	movw	r1, #33237	; 0x81d5
   12b20:	movw	r3, #33312	; 0x8220
   12b24:	mov	r2, #143	; 0x8f
   12b28:	movt	r0, #1
   12b2c:	movt	r1, #1
   12b30:	movt	r3, #1
   12b34:	bl	12498 <__assert_fail@plt>
   12b38:	movw	r0, #33228	; 0x81cc
   12b3c:	movw	r1, #33237	; 0x81d5
   12b40:	movw	r3, #33312	; 0x8220
   12b44:	mov	r2, #139	; 0x8b
   12b48:	movt	r0, #1
   12b4c:	movt	r1, #1
   12b50:	movt	r3, #1
   12b54:	bl	12498 <__assert_fail@plt>
   12b58:	add	r4, sp, #28
   12b5c:	mov	r0, r4
   12b60:	bl	12b90 <main@@Base+0x5f8>
   12b64:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12b68:	mov	r0, r4
   12b6c:	mov	r1, #0
   12b70:	bl	17924 <flatcc_builder_copy_buffer@@Base>
   12b74:	movw	r0, #33846	; 0x8436
   12b78:	movt	r0, #1
   12b7c:	b	12ac0 <main@@Base+0x528>
   12b80:	andeq	r0, r0, r0
   12b84:	bicmi	ip, sp, r5, ror #26
   12b88:	andeq	r0, r0, r0
   12b8c:	addmi	r4, pc, r0
   12b90:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12b94:	add	fp, sp, #24
   12b98:	mov	r4, r0
   12b9c:	bl	13528 <flatcc_builder_reset@@Base>
   12ba0:	movw	r1, #33423	; 0x828f
   12ba4:	mov	r0, r4
   12ba8:	mov	r2, #0
   12bac:	mov	r3, #0
   12bb0:	movt	r1, #1
   12bb4:	bl	13ea4 <flatcc_builder_start_buffer@@Base>
   12bb8:	cmp	r0, #0
   12bbc:	bne	12bcc <main@@Base+0x634>
   12bc0:	mov	r0, r4
   12bc4:	mov	r1, #36	; 0x24
   12bc8:	bl	154a0 <flatcc_builder_start_table@@Base>
   12bcc:	movw	r1, #33215	; 0x81bf
   12bd0:	mov	r0, r4
   12bd4:	movt	r1, #1
   12bd8:	bl	175ec <flatcc_builder_create_string_str@@Base>
   12bdc:	cmp	r0, #0
   12be0:	beq	12bfc <main@@Base+0x664>
   12be4:	mov	r5, r0
   12be8:	mov	r0, r4
   12bec:	mov	r1, #3
   12bf0:	bl	16664 <flatcc_builder_table_add_offset@@Base>
   12bf4:	cmp	r0, #0
   12bf8:	strne	r5, [r0]
   12bfc:	mov	r0, r4
   12c00:	bl	14f70 <flatcc_builder_start_offset_vector@@Base>
   12c04:	movw	r5, #33499	; 0x82db
   12c08:	movw	r6, #41072	; 0xa070
   12c0c:	movw	r8, #34464	; 0x86a0
   12c10:	mov	r9, #0
   12c14:	movt	r5, #1
   12c18:	movt	r6, #2
   12c1c:	movt	r8, #1
   12c20:	mov	r0, r4
   12c24:	mov	r1, #36	; 0x24
   12c28:	bl	154a0 <flatcc_builder_start_table@@Base>
   12c2c:	mov	r0, r4
   12c30:	bl	15300 <flatcc_builder_start_string@@Base>
   12c34:	mov	r7, #100	; 0x64
   12c38:	mov	r0, r4
   12c3c:	mov	r1, r5
   12c40:	mov	r2, #7
   12c44:	bl	14b70 <flatcc_builder_append_string@@Base>
   12c48:	subs	r7, r7, #1
   12c4c:	bne	12c38 <main@@Base+0x6a0>
   12c50:	mov	r0, r4
   12c54:	bl	17654 <flatcc_builder_end_string@@Base>
   12c58:	cmp	r0, #0
   12c5c:	beq	12c78 <main@@Base+0x6e0>
   12c60:	mov	r7, r0
   12c64:	mov	r0, r4
   12c68:	mov	r1, #3
   12c6c:	bl	16664 <flatcc_builder_table_add_offset@@Base>
   12c70:	cmp	r0, #0
   12c74:	strne	r7, [r0]
   12c78:	mov	r0, r4
   12c7c:	mov	r1, #1
   12c80:	mov	r2, #1
   12c84:	mvn	r3, #0
   12c88:	bl	14ee4 <flatcc_builder_start_vector@@Base>
   12c8c:	mov	r7, #100	; 0x64
   12c90:	mov	r0, r4
   12c94:	mov	r1, r6
   12c98:	mov	r2, #1000	; 0x3e8
   12c9c:	bl	145d8 <flatcc_builder_append_vector@@Base>
   12ca0:	subs	r7, r7, #1
   12ca4:	bne	12c90 <main@@Base+0x6f8>
   12ca8:	mov	r0, r4
   12cac:	bl	1615c <flatcc_builder_end_vector@@Base>
   12cb0:	cmp	r0, #0
   12cb4:	beq	12cd0 <main@@Base+0x738>
   12cb8:	mov	r7, r0
   12cbc:	mov	r0, r4
   12cc0:	mov	r1, #5
   12cc4:	bl	16664 <flatcc_builder_table_add_offset@@Base>
   12cc8:	cmp	r0, #0
   12ccc:	strne	r7, [r0]
   12cd0:	mov	r0, r4
   12cd4:	mov	r1, r8
   12cd8:	mov	r2, #1
   12cdc:	bl	15dc8 <flatcc_builder_check_required@@Base>
   12ce0:	cmp	r0, #0
   12ce4:	beq	12d6c <main@@Base+0x7d4>
   12ce8:	mov	r0, r4
   12cec:	bl	15e48 <flatcc_builder_end_table@@Base>
   12cf0:	cmp	r0, #0
   12cf4:	beq	12d8c <main@@Base+0x7f4>
   12cf8:	mov	r1, r0
   12cfc:	mov	r0, r4
   12d00:	bl	14818 <flatcc_builder_offset_vector_push@@Base>
   12d04:	add	r9, r9, #1
   12d08:	cmp	r9, #1000	; 0x3e8
   12d0c:	bne	12c20 <main@@Base+0x688>
   12d10:	mov	r0, r4
   12d14:	bl	15228 <flatcc_builder_end_offset_vector@@Base>
   12d18:	cmp	r0, #0
   12d1c:	beq	12dac <main@@Base+0x814>
   12d20:	mov	r5, r0
   12d24:	mov	r0, r4
   12d28:	mov	r1, #11
   12d2c:	bl	16664 <flatcc_builder_table_add_offset@@Base>
   12d30:	movw	r1, #34464	; 0x86a0
   12d34:	cmp	r0, #0
   12d38:	mov	r2, #1
   12d3c:	movt	r1, #1
   12d40:	strne	r5, [r0]
   12d44:	mov	r0, r4
   12d48:	bl	15dc8 <flatcc_builder_check_required@@Base>
   12d4c:	cmp	r0, #0
   12d50:	beq	12d6c <main@@Base+0x7d4>
   12d54:	mov	r0, r4
   12d58:	bl	15e48 <flatcc_builder_end_table@@Base>
   12d5c:	mov	r1, r0
   12d60:	mov	r0, r4
   12d64:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12d68:	b	14094 <flatcc_builder_end_buffer@@Base>
   12d6c:	movw	r0, #33507	; 0x82e3
   12d70:	movw	r1, #33669	; 0x8385
   12d74:	movw	r3, #33765	; 0x83e5
   12d78:	mov	r2, #235	; 0xeb
   12d7c:	movt	r0, #1
   12d80:	movt	r1, #1
   12d84:	movt	r3, #1
   12d88:	bl	12498 <__assert_fail@plt>
   12d8c:	movw	r0, #33428	; 0x8294
   12d90:	movw	r1, #33237	; 0x81d5
   12d94:	movw	r3, #33430	; 0x8296
   12d98:	mov	r2, #42	; 0x2a
   12d9c:	movt	r0, #1
   12da0:	movt	r1, #1
   12da4:	movt	r3, #1
   12da8:	bl	12498 <__assert_fail@plt>
   12dac:	movw	r0, #33376	; 0x8260
   12db0:	movw	r1, #33237	; 0x81d5
   12db4:	movw	r3, #33379	; 0x8263
   12db8:	mov	r2, #56	; 0x38
   12dbc:	movt	r0, #1
   12dc0:	movt	r1, #1
   12dc4:	movt	r3, #1
   12dc8:	bl	12498 <__assert_fail@plt>

00012dcc <flatcc_builder_default_alloc@@Base>:
   12dcc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12dd0:	add	fp, sp, #24
   12dd4:	mov	r4, r1
   12dd8:	cmp	r2, #0
   12ddc:	beq	12e24 <flatcc_builder_default_alloc@@Base+0x58>
   12de0:	ldr	r0, [fp, #8]
   12de4:	mov	r8, r3
   12de8:	sub	r1, r0, #1
   12dec:	cmp	r1, #6
   12df0:	bhi	12e54 <flatcc_builder_default_alloc@@Base+0x88>
   12df4:	add	r3, pc, #4
   12df8:	mov	r0, #256	; 0x100
   12dfc:	ldr	pc, [r3, r1, lsl #2]
   12e00:	andeq	r2, r1, r8, ror #28
   12e04:	andeq	r2, r1, r4, asr lr
   12e08:	andeq	r2, r1, r4, asr lr
   12e0c:	andeq	r2, r1, ip, lsl lr
   12e10:	andeq	r2, r1, ip, asr lr
   12e14:	andeq	r2, r1, r4, asr lr
   12e18:	andeq	r2, r1, r4, ror #28
   12e1c:	mov	r0, #288	; 0x120
   12e20:	b	12e68 <flatcc_builder_default_alloc@@Base+0x9c>
   12e24:	ldr	r0, [r4]
   12e28:	cmp	r0, #0
   12e2c:	beq	12e48 <flatcc_builder_default_alloc@@Base+0x7c>
   12e30:	bl	123d8 <free@plt>
   12e34:	mov	r6, #0
   12e38:	mov	r0, r6
   12e3c:	str	r6, [r4]
   12e40:	str	r6, [r4, #4]
   12e44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e48:	mov	r6, #0
   12e4c:	mov	r0, r6
   12e50:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12e54:	mov	r0, #32
   12e58:	b	12e68 <flatcc_builder_default_alloc@@Base+0x9c>
   12e5c:	mov	r0, r2
   12e60:	b	12e68 <flatcc_builder_default_alloc@@Base+0x9c>
   12e64:	mov	r0, #64	; 0x40
   12e68:	mov	r7, r0
   12e6c:	lsl	r0, r0, #1
   12e70:	cmp	r7, r2
   12e74:	bcc	12e68 <flatcc_builder_default_alloc@@Base+0x9c>
   12e78:	ldr	r0, [r4, #4]
   12e7c:	mov	r6, #0
   12e80:	cmp	r0, r2
   12e84:	lsrcs	r0, r0, #1
   12e88:	cmpcs	r0, r7
   12e8c:	bcs	12ed0 <flatcc_builder_default_alloc@@Base+0x104>
   12e90:	ldr	r0, [r4]
   12e94:	mov	r1, r7
   12e98:	bl	123fc <realloc@plt>
   12e9c:	cmp	r0, #0
   12ea0:	beq	12ed8 <flatcc_builder_default_alloc@@Base+0x10c>
   12ea4:	mov	r5, r0
   12ea8:	cmp	r8, #0
   12eac:	beq	12ecc <flatcc_builder_default_alloc@@Base+0x100>
   12eb0:	ldr	r1, [r4, #4]
   12eb4:	cmp	r7, r1
   12eb8:	bls	12ecc <flatcc_builder_default_alloc@@Base+0x100>
   12ebc:	add	r0, r5, r1
   12ec0:	sub	r2, r7, r1
   12ec4:	mov	r1, #0
   12ec8:	bl	12468 <memset@plt>
   12ecc:	stm	r4, {r5, r7}
   12ed0:	mov	r0, r6
   12ed4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ed8:	mvn	r6, #0
   12edc:	mov	r0, r6
   12ee0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012ee4 <flatcc_builder_flush_vtable_cache@@Base>:
   12ee4:	push	{r4, r5, fp, lr}
   12ee8:	add	fp, sp, #8
   12eec:	mov	r4, r0
   12ef0:	ldr	r0, [r0, #116]	; 0x74
   12ef4:	cmp	r0, #0
   12ef8:	popeq	{r4, r5, fp, pc}
   12efc:	ldr	r0, [r4, #92]	; 0x5c
   12f00:	ldr	r2, [r4, #96]	; 0x60
   12f04:	mov	r1, #0
   12f08:	mov	r5, #0
   12f0c:	bl	12468 <memset@plt>
   12f10:	mov	r0, #16
   12f14:	str	r5, [r4, #120]	; 0x78
   12f18:	str	r0, [r4, #124]	; 0x7c
   12f1c:	pop	{r4, r5, fp, pc}

00012f20 <flatcc_builder_custom_init@@Base>:
   12f20:	push	{r4, r5, r6, r7, fp, lr}
   12f24:	add	fp, sp, #16
   12f28:	mov	r6, r2
   12f2c:	mov	r7, r1
   12f30:	mov	r1, #0
   12f34:	mov	r2, #232	; 0xe8
   12f38:	mov	r5, r3
   12f3c:	mov	r4, r0
   12f40:	bl	12468 <memset@plt>
   12f44:	ldr	r0, [fp, #8]
   12f48:	cmp	r7, #0
   12f4c:	bne	12f64 <flatcc_builder_custom_init@@Base+0x44>
   12f50:	movw	r7, #32004	; 0x7d04
   12f54:	mov	r1, #1
   12f58:	add	r6, r4, #188	; 0xbc
   12f5c:	movt	r7, #1
   12f60:	str	r1, [r4, #184]	; 0xb8
   12f64:	movw	r1, #11724	; 0x2dcc
   12f68:	cmp	r5, #0
   12f6c:	str	r6, [r4, #36]	; 0x24
   12f70:	str	r0, [r4, #40]	; 0x28
   12f74:	mov	r0, #0
   12f78:	str	r7, [r4, #44]	; 0x2c
   12f7c:	movt	r1, #1
   12f80:	movne	r1, r5
   12f84:	str	r1, [r4, #48]	; 0x30
   12f88:	pop	{r4, r5, r6, r7, fp, pc}

00012f8c <flatcc_builder_init@@Base>:
   12f8c:	push	{r4, r5, fp, lr}
   12f90:	add	fp, sp, #8
   12f94:	mov	r1, #0
   12f98:	mov	r2, #232	; 0xe8
   12f9c:	mov	r4, r0
   12fa0:	mov	r5, #0
   12fa4:	bl	12468 <memset@plt>
   12fa8:	mov	r0, #1
   12fac:	movw	r1, #32004	; 0x7d04
   12fb0:	add	r2, r4, #188	; 0xbc
   12fb4:	str	r0, [r4, #184]	; 0xb8
   12fb8:	movw	r0, #11724	; 0x2dcc
   12fbc:	movt	r1, #1
   12fc0:	str	r2, [r4, #36]	; 0x24
   12fc4:	str	r5, [r4, #40]	; 0x28
   12fc8:	movt	r0, #1
   12fcc:	str	r1, [r4, #44]	; 0x2c
   12fd0:	str	r0, [r4, #48]	; 0x30
   12fd4:	mov	r0, #0
   12fd8:	pop	{r4, r5, fp, pc}

00012fdc <flatcc_builder_custom_reset@@Base>:
   12fdc:	push	{r4, r5, r6, sl, fp, lr}
   12fe0:	add	fp, sp, #16
   12fe4:	sub	sp, sp, #8
   12fe8:	mov	r5, r1
   12fec:	mov	r4, r0
   12ff0:	cmp	r2, #0
   12ff4:	beq	13054 <flatcc_builder_custom_reset@@Base+0x78>
   12ff8:	mov	r1, r4
   12ffc:	ldr	r0, [r1, #52]!	; 0x34
   13000:	cmp	r0, #0
   13004:	beq	13080 <flatcc_builder_custom_reset@@Base+0xa4>
   13008:	ldr	r0, [r4, #40]	; 0x28
   1300c:	ldr	r6, [r4, #48]	; 0x30
   13010:	mov	r2, #0
   13014:	mov	r3, #1
   13018:	str	r2, [sp]
   1301c:	mov	r2, #1
   13020:	blx	r6
   13024:	mvn	r6, #0
   13028:	cmp	r0, #0
   1302c:	bne	13334 <flatcc_builder_custom_reset@@Base+0x358>
   13030:	ldr	r0, [r4, #52]	; 0x34
   13034:	ldr	r2, [r4, #56]	; 0x38
   13038:	mov	r1, #0
   1303c:	bl	12468 <memset@plt>
   13040:	mov	r1, r4
   13044:	ldr	r0, [r1, #60]!	; 0x3c
   13048:	cmp	r0, #0
   1304c:	bne	1309c <flatcc_builder_custom_reset@@Base+0xc0>
   13050:	b	130e8 <flatcc_builder_custom_reset@@Base+0x10c>
   13054:	ldr	r0, [r4, #52]	; 0x34
   13058:	ldr	r2, [r4, #56]	; 0x38
   1305c:	cmp	r0, #0
   13060:	beq	13150 <flatcc_builder_custom_reset@@Base+0x174>
   13064:	mov	r1, #0
   13068:	bl	12468 <memset@plt>
   1306c:	ldr	r0, [r4, #60]	; 0x3c
   13070:	ldr	r2, [r4, #64]	; 0x40
   13074:	cmp	r0, #0
   13078:	bne	13168 <flatcc_builder_custom_reset@@Base+0x18c>
   1307c:	b	13184 <flatcc_builder_custom_reset@@Base+0x1a8>
   13080:	ldr	r0, [r4, #56]	; 0x38
   13084:	cmp	r0, #0
   13088:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   1308c:	mov	r1, r4
   13090:	ldr	r0, [r1, #60]!	; 0x3c
   13094:	cmp	r0, #0
   13098:	beq	130e8 <flatcc_builder_custom_reset@@Base+0x10c>
   1309c:	ldr	r0, [r4, #40]	; 0x28
   130a0:	ldr	r6, [r4, #48]	; 0x30
   130a4:	mov	r2, #1
   130a8:	mov	r3, #1
   130ac:	str	r2, [sp]
   130b0:	mov	r2, #1
   130b4:	blx	r6
   130b8:	mvn	r6, #0
   130bc:	cmp	r0, #0
   130c0:	bne	13334 <flatcc_builder_custom_reset@@Base+0x358>
   130c4:	ldr	r0, [r4, #60]	; 0x3c
   130c8:	ldr	r2, [r4, #64]	; 0x40
   130cc:	mov	r1, #0
   130d0:	bl	12468 <memset@plt>
   130d4:	mov	r1, r4
   130d8:	ldr	r0, [r1, #68]!	; 0x44
   130dc:	cmp	r0, #0
   130e0:	bne	13104 <flatcc_builder_custom_reset@@Base+0x128>
   130e4:	b	13340 <flatcc_builder_custom_reset@@Base+0x364>
   130e8:	ldr	r0, [r4, #64]	; 0x40
   130ec:	cmp	r0, #0
   130f0:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   130f4:	mov	r1, r4
   130f8:	ldr	r0, [r1, #68]!	; 0x44
   130fc:	cmp	r0, #0
   13100:	beq	13340 <flatcc_builder_custom_reset@@Base+0x364>
   13104:	ldr	r0, [r4, #40]	; 0x28
   13108:	ldr	r6, [r4, #48]	; 0x30
   1310c:	mov	r2, #2
   13110:	mov	r3, #1
   13114:	str	r2, [sp]
   13118:	mov	r2, #1
   1311c:	blx	r6
   13120:	mvn	r6, #0
   13124:	cmp	r0, #0
   13128:	bne	13334 <flatcc_builder_custom_reset@@Base+0x358>
   1312c:	ldr	r0, [r4, #68]	; 0x44
   13130:	ldr	r2, [r4, #72]	; 0x48
   13134:	mov	r1, #0
   13138:	bl	12468 <memset@plt>
   1313c:	mov	r1, r4
   13140:	ldr	r0, [r1, #76]!	; 0x4c
   13144:	cmp	r0, #0
   13148:	bne	1335c <flatcc_builder_custom_reset@@Base+0x380>
   1314c:	b	133a8 <flatcc_builder_custom_reset@@Base+0x3cc>
   13150:	cmp	r2, #0
   13154:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   13158:	ldr	r0, [r4, #60]	; 0x3c
   1315c:	ldr	r2, [r4, #64]	; 0x40
   13160:	cmp	r0, #0
   13164:	beq	13184 <flatcc_builder_custom_reset@@Base+0x1a8>
   13168:	mov	r1, #0
   1316c:	bl	12468 <memset@plt>
   13170:	ldr	r0, [r4, #68]	; 0x44
   13174:	ldr	r2, [r4, #72]	; 0x48
   13178:	cmp	r0, #0
   1317c:	bne	1319c <flatcc_builder_custom_reset@@Base+0x1c0>
   13180:	b	131b8 <flatcc_builder_custom_reset@@Base+0x1dc>
   13184:	cmp	r2, #0
   13188:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   1318c:	ldr	r0, [r4, #68]	; 0x44
   13190:	ldr	r2, [r4, #72]	; 0x48
   13194:	cmp	r0, #0
   13198:	beq	131b8 <flatcc_builder_custom_reset@@Base+0x1dc>
   1319c:	mov	r1, #0
   131a0:	bl	12468 <memset@plt>
   131a4:	ldr	r0, [r4, #76]	; 0x4c
   131a8:	ldr	r2, [r4, #80]	; 0x50
   131ac:	cmp	r0, #0
   131b0:	bne	131d0 <flatcc_builder_custom_reset@@Base+0x1f4>
   131b4:	b	131ec <flatcc_builder_custom_reset@@Base+0x210>
   131b8:	cmp	r2, #0
   131bc:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   131c0:	ldr	r0, [r4, #76]	; 0x4c
   131c4:	ldr	r2, [r4, #80]	; 0x50
   131c8:	cmp	r0, #0
   131cc:	beq	131ec <flatcc_builder_custom_reset@@Base+0x210>
   131d0:	mov	r1, #0
   131d4:	bl	12468 <memset@plt>
   131d8:	ldr	r0, [r4, #84]	; 0x54
   131dc:	ldr	r2, [r4, #88]	; 0x58
   131e0:	cmp	r0, #0
   131e4:	bne	13204 <flatcc_builder_custom_reset@@Base+0x228>
   131e8:	b	13220 <flatcc_builder_custom_reset@@Base+0x244>
   131ec:	cmp	r2, #0
   131f0:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   131f4:	ldr	r0, [r4, #84]	; 0x54
   131f8:	ldr	r2, [r4, #88]	; 0x58
   131fc:	cmp	r0, #0
   13200:	beq	13220 <flatcc_builder_custom_reset@@Base+0x244>
   13204:	mov	r1, #0
   13208:	bl	12468 <memset@plt>
   1320c:	ldr	r0, [r4, #92]	; 0x5c
   13210:	ldr	r2, [r4, #96]	; 0x60
   13214:	cmp	r0, #0
   13218:	bne	13238 <flatcc_builder_custom_reset@@Base+0x25c>
   1321c:	b	13254 <flatcc_builder_custom_reset@@Base+0x278>
   13220:	cmp	r2, #0
   13224:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   13228:	ldr	r0, [r4, #92]	; 0x5c
   1322c:	ldr	r2, [r4, #96]	; 0x60
   13230:	cmp	r0, #0
   13234:	beq	13254 <flatcc_builder_custom_reset@@Base+0x278>
   13238:	mov	r1, #0
   1323c:	bl	12468 <memset@plt>
   13240:	ldr	r0, [r4, #100]	; 0x64
   13244:	ldr	r2, [r4, #104]	; 0x68
   13248:	cmp	r0, #0
   1324c:	bne	1326c <flatcc_builder_custom_reset@@Base+0x290>
   13250:	b	13288 <flatcc_builder_custom_reset@@Base+0x2ac>
   13254:	cmp	r2, #0
   13258:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   1325c:	ldr	r0, [r4, #100]	; 0x64
   13260:	ldr	r2, [r4, #104]	; 0x68
   13264:	cmp	r0, #0
   13268:	beq	13288 <flatcc_builder_custom_reset@@Base+0x2ac>
   1326c:	mov	r1, #0
   13270:	bl	12468 <memset@plt>
   13274:	ldr	r0, [r4, #108]	; 0x6c
   13278:	ldr	r2, [r4, #112]	; 0x70
   1327c:	cmp	r0, #0
   13280:	bne	132a0 <flatcc_builder_custom_reset@@Base+0x2c4>
   13284:	b	132ac <flatcc_builder_custom_reset@@Base+0x2d0>
   13288:	cmp	r2, #0
   1328c:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   13290:	ldr	r0, [r4, #108]	; 0x6c
   13294:	ldr	r2, [r4, #112]	; 0x70
   13298:	cmp	r0, #0
   1329c:	beq	132ac <flatcc_builder_custom_reset@@Base+0x2d0>
   132a0:	mov	r1, #0
   132a4:	bl	12468 <memset@plt>
   132a8:	b	132b4 <flatcc_builder_custom_reset@@Base+0x2d8>
   132ac:	cmp	r2, #0
   132b0:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   132b4:	mov	r0, #0
   132b8:	vmov.i32	q8, #0	; 0x00000000
   132bc:	mov	r6, #0
   132c0:	str	r0, [r4, #120]	; 0x78
   132c4:	ldr	r1, [r4, #124]	; 0x7c
   132c8:	cmp	r1, #0
   132cc:	movne	r1, #16
   132d0:	strne	r1, [r4, #124]	; 0x7c
   132d4:	add	r1, r4, #148	; 0x94
   132d8:	str	r0, [r4, #136]	; 0x88
   132dc:	str	r0, [r4, #140]	; 0x8c
   132e0:	strh	r0, [r4, #128]	; 0x80
   132e4:	str	r0, [r4, #32]
   132e8:	cmp	r5, #0
   132ec:	vst1.32	{d16-d17}, [r1]
   132f0:	ldr	r2, [r4, #60]	; 0x3c
   132f4:	ldr	r1, [r4, #52]	; 0x34
   132f8:	ldr	r3, [r4, #76]	; 0x4c
   132fc:	str	r2, [r4, #16]
   13300:	str	r0, [r4, #20]
   13304:	str	r0, [r4, #24]
   13308:	movne	r0, #0
   1330c:	str	r3, [r4]
   13310:	str	r1, [r4, #4]
   13314:	strne	r0, [r4, #172]	; 0xac
   13318:	strne	r0, [r4, #176]	; 0xb0
   1331c:	strne	r0, [r4, #180]	; 0xb4
   13320:	ldr	r0, [r4, #184]	; 0xb8
   13324:	cmp	r0, #0
   13328:	beq	13334 <flatcc_builder_custom_reset@@Base+0x358>
   1332c:	add	r0, r4, #188	; 0xbc
   13330:	bl	17bcc <flatcc_emitter_reset@@Base>
   13334:	mov	r0, r6
   13338:	sub	sp, fp, #16
   1333c:	pop	{r4, r5, r6, sl, fp, pc}
   13340:	ldr	r0, [r4, #72]	; 0x48
   13344:	cmp	r0, #0
   13348:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   1334c:	mov	r1, r4
   13350:	ldr	r0, [r1, #76]!	; 0x4c
   13354:	cmp	r0, #0
   13358:	beq	133a8 <flatcc_builder_custom_reset@@Base+0x3cc>
   1335c:	ldr	r0, [r4, #40]	; 0x28
   13360:	ldr	r6, [r4, #48]	; 0x30
   13364:	mov	r2, #3
   13368:	mov	r3, #1
   1336c:	str	r2, [sp]
   13370:	mov	r2, #1
   13374:	blx	r6
   13378:	mvn	r6, #0
   1337c:	cmp	r0, #0
   13380:	bne	13334 <flatcc_builder_custom_reset@@Base+0x358>
   13384:	ldr	r0, [r4, #76]	; 0x4c
   13388:	ldr	r2, [r4, #80]	; 0x50
   1338c:	mov	r1, #0
   13390:	bl	12468 <memset@plt>
   13394:	mov	r1, r4
   13398:	ldr	r0, [r1, #84]!	; 0x54
   1339c:	cmp	r0, #0
   133a0:	bne	133c4 <flatcc_builder_custom_reset@@Base+0x3e8>
   133a4:	b	13410 <flatcc_builder_custom_reset@@Base+0x434>
   133a8:	ldr	r0, [r4, #80]	; 0x50
   133ac:	cmp	r0, #0
   133b0:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   133b4:	mov	r1, r4
   133b8:	ldr	r0, [r1, #84]!	; 0x54
   133bc:	cmp	r0, #0
   133c0:	beq	13410 <flatcc_builder_custom_reset@@Base+0x434>
   133c4:	ldr	r0, [r4, #40]	; 0x28
   133c8:	ldr	r6, [r4, #48]	; 0x30
   133cc:	mov	r2, #4
   133d0:	mov	r3, #1
   133d4:	str	r2, [sp]
   133d8:	mov	r2, #1
   133dc:	blx	r6
   133e0:	mvn	r6, #0
   133e4:	cmp	r0, #0
   133e8:	bne	13334 <flatcc_builder_custom_reset@@Base+0x358>
   133ec:	ldr	r0, [r4, #84]	; 0x54
   133f0:	ldr	r2, [r4, #88]	; 0x58
   133f4:	mov	r1, #0
   133f8:	bl	12468 <memset@plt>
   133fc:	ldr	r0, [r4, #92]	; 0x5c
   13400:	ldr	r2, [r4, #96]	; 0x60
   13404:	cmp	r0, #0
   13408:	bne	1342c <flatcc_builder_custom_reset@@Base+0x450>
   1340c:	b	13448 <flatcc_builder_custom_reset@@Base+0x46c>
   13410:	ldr	r0, [r4, #88]	; 0x58
   13414:	cmp	r0, #0
   13418:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   1341c:	ldr	r0, [r4, #92]	; 0x5c
   13420:	ldr	r2, [r4, #96]	; 0x60
   13424:	cmp	r0, #0
   13428:	beq	13448 <flatcc_builder_custom_reset@@Base+0x46c>
   1342c:	mov	r1, #0
   13430:	bl	12468 <memset@plt>
   13434:	mov	r1, r4
   13438:	ldr	r0, [r1, #100]!	; 0x64
   1343c:	cmp	r0, #0
   13440:	bne	13460 <flatcc_builder_custom_reset@@Base+0x484>
   13444:	b	134ac <flatcc_builder_custom_reset@@Base+0x4d0>
   13448:	cmp	r2, #0
   1344c:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   13450:	mov	r1, r4
   13454:	ldr	r0, [r1, #100]!	; 0x64
   13458:	cmp	r0, #0
   1345c:	beq	134ac <flatcc_builder_custom_reset@@Base+0x4d0>
   13460:	ldr	r0, [r4, #40]	; 0x28
   13464:	ldr	r6, [r4, #48]	; 0x30
   13468:	mov	r2, #6
   1346c:	mov	r3, #1
   13470:	str	r2, [sp]
   13474:	mov	r2, #1
   13478:	blx	r6
   1347c:	mvn	r6, #0
   13480:	cmp	r0, #0
   13484:	bne	13334 <flatcc_builder_custom_reset@@Base+0x358>
   13488:	ldr	r0, [r4, #100]	; 0x64
   1348c:	ldr	r2, [r4, #104]	; 0x68
   13490:	mov	r1, #0
   13494:	bl	12468 <memset@plt>
   13498:	mov	r1, r4
   1349c:	ldr	r0, [r1, #108]!	; 0x6c
   134a0:	cmp	r0, #0
   134a4:	bne	134c8 <flatcc_builder_custom_reset@@Base+0x4ec>
   134a8:	b	134fc <flatcc_builder_custom_reset@@Base+0x520>
   134ac:	ldr	r0, [r4, #104]	; 0x68
   134b0:	cmp	r0, #0
   134b4:	bne	13508 <flatcc_builder_custom_reset@@Base+0x52c>
   134b8:	mov	r1, r4
   134bc:	ldr	r0, [r1, #108]!	; 0x6c
   134c0:	cmp	r0, #0
   134c4:	beq	134fc <flatcc_builder_custom_reset@@Base+0x520>
   134c8:	ldr	r0, [r4, #40]	; 0x28
   134cc:	ldr	r6, [r4, #48]	; 0x30
   134d0:	mov	r2, #7
   134d4:	mov	r3, #1
   134d8:	str	r2, [sp]
   134dc:	mov	r2, #1
   134e0:	blx	r6
   134e4:	mvn	r6, #0
   134e8:	cmp	r0, #0
   134ec:	bne	13334 <flatcc_builder_custom_reset@@Base+0x358>
   134f0:	ldr	r0, [r4, #108]	; 0x6c
   134f4:	ldr	r2, [r4, #112]	; 0x70
   134f8:	b	132a0 <flatcc_builder_custom_reset@@Base+0x2c4>
   134fc:	ldr	r0, [r4, #112]	; 0x70
   13500:	cmp	r0, #0
   13504:	beq	132b4 <flatcc_builder_custom_reset@@Base+0x2d8>
   13508:	movw	r0, #34980	; 0x88a4
   1350c:	movw	r1, #34998	; 0x88b6
   13510:	movw	r3, #35068	; 0x88fc
   13514:	movw	r2, #434	; 0x1b2
   13518:	movt	r0, #1
   1351c:	movt	r1, #1
   13520:	movt	r3, #1
   13524:	bl	12498 <__assert_fail@plt>

00013528 <flatcc_builder_reset@@Base>:
   13528:	mov	r1, #0
   1352c:	mov	r2, #0
   13530:	b	12fdc <flatcc_builder_custom_reset@@Base>

00013534 <flatcc_builder_clear@@Base>:
   13534:	push	{r4, sl, fp, lr}
   13538:	add	fp, sp, #8
   1353c:	sub	sp, sp, #8
   13540:	mov	r4, r0
   13544:	ldr	r0, [r0, #40]	; 0x28
   13548:	mov	r1, #0
   1354c:	mov	r2, #0
   13550:	mov	r3, #0
   13554:	ldr	ip, [r4, #48]	; 0x30
   13558:	str	r1, [sp]
   1355c:	add	r1, r4, #52	; 0x34
   13560:	blx	ip
   13564:	ldr	r0, [r4, #40]	; 0x28
   13568:	ldr	ip, [r4, #48]	; 0x30
   1356c:	mov	r1, #1
   13570:	mov	r2, #0
   13574:	mov	r3, #0
   13578:	str	r1, [sp]
   1357c:	add	r1, r4, #60	; 0x3c
   13580:	blx	ip
   13584:	ldr	r0, [r4, #40]	; 0x28
   13588:	ldr	ip, [r4, #48]	; 0x30
   1358c:	mov	r1, #2
   13590:	mov	r2, #0
   13594:	mov	r3, #0
   13598:	str	r1, [sp]
   1359c:	add	r1, r4, #68	; 0x44
   135a0:	blx	ip
   135a4:	ldr	r0, [r4, #40]	; 0x28
   135a8:	ldr	ip, [r4, #48]	; 0x30
   135ac:	mov	r1, #3
   135b0:	mov	r2, #0
   135b4:	mov	r3, #0
   135b8:	str	r1, [sp]
   135bc:	add	r1, r4, #76	; 0x4c
   135c0:	blx	ip
   135c4:	ldr	r0, [r4, #40]	; 0x28
   135c8:	ldr	ip, [r4, #48]	; 0x30
   135cc:	mov	r1, #4
   135d0:	mov	r2, #0
   135d4:	mov	r3, #0
   135d8:	str	r1, [sp]
   135dc:	add	r1, r4, #84	; 0x54
   135e0:	blx	ip
   135e4:	ldr	r0, [r4, #40]	; 0x28
   135e8:	ldr	ip, [r4, #48]	; 0x30
   135ec:	mov	r1, #5
   135f0:	mov	r2, #0
   135f4:	mov	r3, #0
   135f8:	str	r1, [sp]
   135fc:	add	r1, r4, #92	; 0x5c
   13600:	blx	ip
   13604:	ldr	r0, [r4, #40]	; 0x28
   13608:	ldr	ip, [r4, #48]	; 0x30
   1360c:	mov	r1, #6
   13610:	mov	r2, #0
   13614:	mov	r3, #0
   13618:	str	r1, [sp]
   1361c:	add	r1, r4, #100	; 0x64
   13620:	blx	ip
   13624:	ldr	r0, [r4, #40]	; 0x28
   13628:	ldr	ip, [r4, #48]	; 0x30
   1362c:	mov	r1, #7
   13630:	mov	r2, #0
   13634:	mov	r3, #0
   13638:	str	r1, [sp]
   1363c:	add	r1, r4, #108	; 0x6c
   13640:	blx	ip
   13644:	ldr	r0, [r4, #184]	; 0xb8
   13648:	cmp	r0, #0
   1364c:	beq	13658 <flatcc_builder_clear@@Base+0x124>
   13650:	add	r0, r4, #188	; 0xbc
   13654:	bl	17c98 <flatcc_emitter_clear@@Base>
   13658:	mov	r0, r4
   1365c:	mov	r1, #0
   13660:	mov	r2, #232	; 0xe8
   13664:	sub	sp, fp, #8
   13668:	pop	{r4, sl, fp, lr}
   1366c:	b	12468 <memset@plt>

00013670 <flatcc_builder_enter_user_frame_ptr@@Base>:
   13670:	push	{r4, r5, r6, r7, fp, lr}
   13674:	add	fp, sp, #16
   13678:	sub	sp, sp, #8
   1367c:	mov	r4, r0
   13680:	ldr	r0, [r0, #112]	; 0x70
   13684:	add	r1, r1, #7
   13688:	ldr	r7, [r4, #228]	; 0xe4
   1368c:	bic	r5, r1, #3
   13690:	add	r6, r4, #108	; 0x6c
   13694:	add	r2, r7, r5
   13698:	cmp	r2, r0
   1369c:	bls	136c4 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   136a0:	ldr	r0, [r4, #40]	; 0x28
   136a4:	ldr	ip, [r4, #48]	; 0x30
   136a8:	mov	r1, #7
   136ac:	mov	r3, #0
   136b0:	str	r1, [sp]
   136b4:	mov	r1, r6
   136b8:	blx	ip
   136bc:	cmp	r0, #0
   136c0:	bne	13718 <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   136c4:	ldr	r0, [r6]
   136c8:	adds	r6, r0, r7
   136cc:	beq	13708 <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   136d0:	mov	r0, r6
   136d4:	mov	r1, #0
   136d8:	mov	r2, r5
   136dc:	bl	12468 <memset@plt>
   136e0:	ldr	r0, [r4, #224]	; 0xe0
   136e4:	str	r0, [r6], #4
   136e8:	ldr	r0, [r4, #228]	; 0xe4
   136ec:	add	r1, r0, #4
   136f0:	add	r0, r0, r5
   136f4:	str	r1, [r4, #224]	; 0xe0
   136f8:	str	r0, [r4, #228]	; 0xe4
   136fc:	mov	r0, r6
   13700:	sub	sp, fp, #16
   13704:	pop	{r4, r5, r6, r7, fp, pc}
   13708:	mov	r6, #0
   1370c:	mov	r0, r6
   13710:	sub	sp, fp, #16
   13714:	pop	{r4, r5, r6, r7, fp, pc}
   13718:	movw	r0, #39516	; 0x9a5c
   1371c:	movw	r1, #34998	; 0x88b6
   13720:	movw	r3, #39062	; 0x9896
   13724:	mov	r2, #308	; 0x134
   13728:	movt	r0, #1
   1372c:	movt	r1, #1
   13730:	movt	r3, #1
   13734:	bl	12498 <__assert_fail@plt>

00013738 <flatcc_builder_enter_user_frame@@Base>:
   13738:	push	{r4, r5, r6, r7, fp, lr}
   1373c:	add	fp, sp, #16
   13740:	sub	sp, sp, #8
   13744:	mov	r4, r0
   13748:	ldr	r0, [r0, #112]	; 0x70
   1374c:	add	r1, r1, #7
   13750:	ldr	r7, [r4, #228]	; 0xe4
   13754:	bic	r5, r1, #3
   13758:	add	r6, r4, #108	; 0x6c
   1375c:	add	r2, r7, r5
   13760:	cmp	r2, r0
   13764:	bls	1378c <flatcc_builder_enter_user_frame@@Base+0x54>
   13768:	ldr	r0, [r4, #40]	; 0x28
   1376c:	ldr	ip, [r4, #48]	; 0x30
   13770:	mov	r1, #7
   13774:	mov	r3, #0
   13778:	str	r1, [sp]
   1377c:	mov	r1, r6
   13780:	blx	ip
   13784:	cmp	r0, #0
   13788:	bne	137d8 <flatcc_builder_enter_user_frame@@Base+0xa0>
   1378c:	ldr	r0, [r6]
   13790:	adds	r6, r0, r7
   13794:	beq	137cc <flatcc_builder_enter_user_frame@@Base+0x94>
   13798:	mov	r0, r6
   1379c:	mov	r1, #0
   137a0:	mov	r2, r5
   137a4:	bl	12468 <memset@plt>
   137a8:	ldr	r0, [r4, #224]	; 0xe0
   137ac:	str	r0, [r6]
   137b0:	ldr	r1, [r4, #228]	; 0xe4
   137b4:	add	r0, r1, #4
   137b8:	add	r1, r1, r5
   137bc:	str	r0, [r4, #224]	; 0xe0
   137c0:	str	r1, [r4, #228]	; 0xe4
   137c4:	sub	sp, fp, #16
   137c8:	pop	{r4, r5, r6, r7, fp, pc}
   137cc:	mov	r0, #0
   137d0:	sub	sp, fp, #16
   137d4:	pop	{r4, r5, r6, r7, fp, pc}
   137d8:	movw	r0, #39516	; 0x9a5c
   137dc:	movw	r1, #34998	; 0x88b6
   137e0:	movw	r3, #39062	; 0x9896
   137e4:	mov	r2, #308	; 0x134
   137e8:	movt	r0, #1
   137ec:	movt	r1, #1
   137f0:	movt	r3, #1
   137f4:	bl	12498 <__assert_fail@plt>

000137f8 <flatcc_builder_exit_user_frame@@Base>:
   137f8:	push	{fp, lr}
   137fc:	mov	fp, sp
   13800:	ldr	r1, [r0, #224]	; 0xe0
   13804:	cmp	r1, #0
   13808:	subne	r2, r1, #4
   1380c:	strne	r2, [r0, #228]	; 0xe4
   13810:	ldrne	r2, [r0, #108]	; 0x6c
   13814:	addne	r1, r2, r1
   13818:	ldrne	r1, [r1, #-4]
   1381c:	strne	r1, [r0, #224]	; 0xe0
   13820:	movne	r0, r1
   13824:	popne	{fp, pc}
   13828:	movw	r0, #35130	; 0x893a
   1382c:	movw	r1, #34998	; 0x88b6
   13830:	movw	r3, #35155	; 0x8953
   13834:	movw	r2, #542	; 0x21e
   13838:	movt	r0, #1
   1383c:	movt	r1, #1
   13840:	movt	r3, #1
   13844:	bl	12498 <__assert_fail@plt>

00013848 <flatcc_builder_exit_user_frame_at@@Base>:
   13848:	push	{fp, lr}
   1384c:	mov	fp, sp
   13850:	ldr	r2, [r0, #224]	; 0xe0
   13854:	cmp	r2, r1
   13858:	bcc	138a4 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   1385c:	cmp	r1, #0
   13860:	str	r1, [r0, #224]	; 0xe0
   13864:	subne	r2, r1, #4
   13868:	strne	r2, [r0, #228]	; 0xe4
   1386c:	ldrne	r2, [r0, #108]	; 0x6c
   13870:	addne	r1, r2, r1
   13874:	ldrne	r1, [r1, #-4]
   13878:	strne	r1, [r0, #224]	; 0xe0
   1387c:	movne	r0, r1
   13880:	popne	{fp, pc}
   13884:	movw	r0, #35130	; 0x893a
   13888:	movw	r1, #34998	; 0x88b6
   1388c:	movw	r3, #35155	; 0x8953
   13890:	movw	r2, #542	; 0x21e
   13894:	movt	r0, #1
   13898:	movt	r1, #1
   1389c:	movt	r3, #1
   138a0:	bl	12498 <__assert_fail@plt>
   138a4:	movw	r0, #35213	; 0x898d
   138a8:	movw	r1, #34998	; 0x88b6
   138ac:	movw	r3, #35244	; 0x89ac
   138b0:	movw	r2, #551	; 0x227
   138b4:	movt	r0, #1
   138b8:	movt	r1, #1
   138bc:	movt	r3, #1
   138c0:	bl	12498 <__assert_fail@plt>

000138c4 <flatcc_builder_get_current_user_frame@@Base>:
   138c4:	ldr	r0, [r0, #224]	; 0xe0
   138c8:	bx	lr

000138cc <flatcc_builder_get_user_frame_ptr@@Base>:
   138cc:	ldr	r0, [r0, #108]	; 0x6c
   138d0:	add	r0, r0, r1
   138d4:	bx	lr

000138d8 <flatcc_builder_embed_buffer@@Base>:
   138d8:	push	{r4, r5, r6, r7, fp, lr}
   138dc:	add	fp, sp, #16
   138e0:	sub	sp, sp, #88	; 0x58
   138e4:	mov	r4, r0
   138e8:	ldr	r0, [fp, #8]
   138ec:	mov	r5, r3
   138f0:	mov	r7, r2
   138f4:	mov	r2, r1
   138f8:	sub	r1, fp, #18
   138fc:	strh	r0, [fp, #-18]	; 0xffffffee
   13900:	mov	r0, r4
   13904:	ldr	r3, [r4, #152]	; 0x98
   13908:	cmp	r3, #0
   1390c:	movwne	r3, #1
   13910:	bl	13a48 <flatcc_builder_embed_buffer@@Base+0x170>
   13914:	ldr	r1, [fp, #12]
   13918:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1391c:	ldr	r0, [r4, #136]	; 0x88
   13920:	mov	r2, #0
   13924:	str	r2, [sp, #12]
   13928:	str	r2, [sp, #8]
   1392c:	and	r1, r1, #2
   13930:	sub	r3, r3, #1
   13934:	add	r1, r5, r1, lsl #1
   13938:	sub	r1, r0, r1
   1393c:	and	r3, r3, r1
   13940:	add	r1, r3, r5
   13944:	str	r1, [fp, #-24]	; 0xffffffe8
   13948:	ldr	r1, [r4, #152]	; 0x98
   1394c:	cmp	r1, #0
   13950:	mov	r1, #0
   13954:	beq	13974 <flatcc_builder_embed_buffer@@Base+0x9c>
   13958:	mov	r1, #4
   1395c:	sub	r2, fp, #24
   13960:	str	r1, [sp, #20]
   13964:	str	r2, [sp, #16]
   13968:	mov	r2, #1
   1396c:	str	r1, [sp, #8]
   13970:	str	r2, [sp, #12]
   13974:	cmp	r5, #0
   13978:	beq	1399c <flatcc_builder_embed_buffer@@Base+0xc4>
   1397c:	add	r6, sp, #8
   13980:	add	r1, r1, r5
   13984:	add	r6, r6, r2, lsl #3
   13988:	add	r2, r2, #1
   1398c:	str	r1, [sp, #8]
   13990:	str	r7, [r6, #8]
   13994:	str	r5, [r6, #12]
   13998:	str	r2, [sp, #12]
   1399c:	cmp	r3, #0
   139a0:	beq	139cc <flatcc_builder_embed_buffer@@Base+0xf4>
   139a4:	add	r7, sp, #8
   139a8:	movw	r6, #34468	; 0x86a4
   139ac:	add	r1, r1, r3
   139b0:	add	r7, r7, r2, lsl #3
   139b4:	movt	r6, #1
   139b8:	add	r2, r2, #1
   139bc:	str	r1, [sp, #8]
   139c0:	str	r6, [r7, #8]
   139c4:	str	r3, [r7, #12]
   139c8:	str	r2, [sp, #12]
   139cc:	cmp	r1, #0
   139d0:	ble	13a28 <flatcc_builder_embed_buffer@@Base+0x150>
   139d4:	sub	r5, r0, r1
   139d8:	ldr	r0, [r4, #36]	; 0x24
   139dc:	ldr	r7, [r4, #44]	; 0x2c
   139e0:	str	r1, [sp]
   139e4:	add	r1, sp, #8
   139e8:	add	r1, r1, #8
   139ec:	mov	r3, r5
   139f0:	blx	r7
   139f4:	cmp	r0, #0
   139f8:	streq	r5, [r4, #136]	; 0x88
   139fc:	moveq	r0, r5
   13a00:	subeq	sp, fp, #16
   13a04:	popeq	{r4, r5, r6, r7, fp, pc}
   13a08:	movw	r0, #39516	; 0x9a5c
   13a0c:	movw	r1, #34998	; 0x88b6
   13a10:	movw	r3, #39195	; 0x991b
   13a14:	movw	r2, #651	; 0x28b
   13a18:	movt	r0, #1
   13a1c:	movt	r1, #1
   13a20:	movt	r3, #1
   13a24:	bl	12498 <__assert_fail@plt>
   13a28:	movw	r0, #39516	; 0x9a5c
   13a2c:	movw	r1, #34998	; 0x88b6
   13a30:	movw	r3, #39195	; 0x991b
   13a34:	movw	r2, #647	; 0x287
   13a38:	movt	r0, #1
   13a3c:	movt	r1, #1
   13a40:	movt	r3, #1
   13a44:	bl	12498 <__assert_fail@plt>
   13a48:	push	{r4, sl, fp, lr}
   13a4c:	add	fp, sp, #8
   13a50:	sub	sp, sp, #80	; 0x50
   13a54:	cmp	r2, #0
   13a58:	bne	13a68 <flatcc_builder_embed_buffer@@Base+0x190>
   13a5c:	ldrh	r2, [r0, #132]	; 0x84
   13a60:	cmp	r2, #0
   13a64:	movweq	r2, #1
   13a68:	ldrh	r4, [r1]
   13a6c:	cmp	r4, #4
   13a70:	movwcc	r4, #4
   13a74:	cmpcs	r4, r2
   13a78:	bcs	13a88 <flatcc_builder_embed_buffer@@Base+0x1b0>
   13a7c:	cmp	r4, r2
   13a80:	movcc	r4, r2
   13a84:	strh	r4, [r1]
   13a88:	cmp	r3, #0
   13a8c:	bne	13b00 <flatcc_builder_embed_buffer@@Base+0x228>
   13a90:	ldr	r4, [r0, #140]	; 0x8c
   13a94:	sub	r1, r2, #1
   13a98:	ands	r1, r4, r1
   13a9c:	beq	13b00 <flatcc_builder_embed_buffer@@Base+0x228>
   13aa0:	movw	r2, #34468	; 0x86a4
   13aa4:	str	r1, [sp, #20]
   13aa8:	cmn	r1, #1
   13aac:	movt	r2, #1
   13ab0:	str	r2, [sp, #16]
   13ab4:	mov	r2, #1
   13ab8:	str	r1, [sp, #8]
   13abc:	str	r2, [sp, #12]
   13ac0:	add	r2, r4, r1
   13ac4:	str	r2, [r0, #140]	; 0x8c
   13ac8:	ble	13b08 <flatcc_builder_embed_buffer@@Base+0x230>
   13acc:	ldr	r2, [r0, #36]	; 0x24
   13ad0:	ldr	ip, [r0, #44]	; 0x2c
   13ad4:	add	r0, sp, #8
   13ad8:	str	r1, [sp]
   13adc:	mov	r3, r4
   13ae0:	add	r1, r0, #8
   13ae4:	mov	r0, r2
   13ae8:	mov	r2, #1
   13aec:	blx	ip
   13af0:	cmp	r0, #0
   13af4:	bne	13b28 <flatcc_builder_embed_buffer@@Base+0x250>
   13af8:	cmn	r4, #1
   13afc:	beq	13b48 <flatcc_builder_embed_buffer@@Base+0x270>
   13b00:	sub	sp, fp, #8
   13b04:	pop	{r4, sl, fp, pc}
   13b08:	movw	r0, #39516	; 0x9a5c
   13b0c:	movw	r1, #34998	; 0x88b6
   13b10:	movw	r3, #39383	; 0x99d7
   13b14:	movw	r2, #673	; 0x2a1
   13b18:	movt	r0, #1
   13b1c:	movt	r1, #1
   13b20:	movt	r3, #1
   13b24:	bl	12498 <__assert_fail@plt>
   13b28:	movw	r0, #39516	; 0x9a5c
   13b2c:	movw	r1, #34998	; 0x88b6
   13b30:	movw	r3, #39383	; 0x99d7
   13b34:	movw	r2, #677	; 0x2a5
   13b38:	movt	r0, #1
   13b3c:	movt	r1, #1
   13b40:	movt	r3, #1
   13b44:	bl	12498 <__assert_fail@plt>
   13b48:	movw	r0, #39516	; 0x9a5c
   13b4c:	movw	r1, #34998	; 0x88b6
   13b50:	movw	r3, #39129	; 0x98d9
   13b54:	movw	r2, #702	; 0x2be
   13b58:	movt	r0, #1
   13b5c:	movt	r1, #1
   13b60:	movt	r3, #1
   13b64:	bl	12498 <__assert_fail@plt>

00013b68 <flatcc_builder_create_buffer@@Base>:
   13b68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b6c:	add	fp, sp, #28
   13b70:	sub	sp, sp, #100	; 0x64
   13b74:	ldr	sl, [fp, #12]
   13b78:	mov	r4, r0
   13b7c:	ldr	r0, [fp, #8]
   13b80:	mov	r7, r1
   13b84:	mov	r5, #0
   13b88:	mov	r6, r3
   13b8c:	sub	r1, fp, #30
   13b90:	str	r5, [sp, #12]
   13b94:	and	r9, sl, #1
   13b98:	strh	r0, [fp, #-30]	; 0xffffffe2
   13b9c:	mov	r0, r4
   13ba0:	mov	r3, r9
   13ba4:	bl	13a48 <flatcc_builder_embed_buffer@@Base+0x170>
   13ba8:	ldrh	r0, [r4, #128]	; 0x80
   13bac:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13bb0:	str	r6, [sp, #8]
   13bb4:	cmp	r0, r1
   13bb8:	strhcc	r1, [r4, #128]	; 0x80
   13bbc:	cmp	r7, #0
   13bc0:	beq	13bdc <flatcc_builder_create_buffer@@Base+0x74>
   13bc4:	ldr	r5, [r7]
   13bc8:	cmp	r5, #0
   13bcc:	str	r5, [sp, #12]
   13bd0:	movwne	r5, #1
   13bd4:	lsl	r7, r5, #2
   13bd8:	b	13be0 <flatcc_builder_create_buffer@@Base+0x78>
   13bdc:	mov	r7, #0
   13be0:	ldr	r0, [r4, #136]	; 0x88
   13be4:	and	r2, sl, #2
   13be8:	mov	r3, #0
   13bec:	sub	r6, r1, #1
   13bf0:	ands	ip, sl, #3
   13bf4:	mov	sl, #4
   13bf8:	mov	r1, #4
   13bfc:	str	r3, [sp, #20]
   13c00:	str	r3, [sp, #16]
   13c04:	sub	r2, r0, r2, lsl #1
   13c08:	sub	r2, r2, r7
   13c0c:	sub	r2, r2, #4
   13c10:	beq	13c34 <flatcc_builder_create_buffer@@Base+0xcc>
   13c14:	mov	r1, #4
   13c18:	sub	r3, fp, #40	; 0x28
   13c1c:	str	r1, [sp, #28]
   13c20:	str	r3, [sp, #24]
   13c24:	str	r1, [sp, #16]
   13c28:	mov	r3, #1
   13c2c:	mov	r1, #8
   13c30:	str	r3, [sp, #20]
   13c34:	add	lr, sp, #16
   13c38:	and	r6, r2, r6
   13c3c:	sub	r8, fp, #36	; 0x24
   13c40:	str	r1, [sp, #16]
   13c44:	cmp	r5, #0
   13c48:	add	r2, lr, r3, lsl #3
   13c4c:	str	r8, [r2, #8]
   13c50:	str	sl, [r2, #12]
   13c54:	add	r2, r3, #1
   13c58:	str	r2, [sp, #20]
   13c5c:	beq	13c80 <flatcc_builder_create_buffer@@Base+0x118>
   13c60:	add	r2, lr, r2, lsl #3
   13c64:	add	r1, r1, r7
   13c68:	add	r5, sp, #12
   13c6c:	str	r1, [sp, #16]
   13c70:	str	r5, [r2, #8]
   13c74:	str	r7, [r2, #12]
   13c78:	orr	r2, r3, #2
   13c7c:	str	r2, [sp, #20]
   13c80:	cmp	r6, #0
   13c84:	beq	13cac <flatcc_builder_create_buffer@@Base+0x144>
   13c88:	movw	r5, #34468	; 0x86a4
   13c8c:	add	r3, lr, r2, lsl #3
   13c90:	add	r1, r1, r6
   13c94:	add	r2, r2, #1
   13c98:	movt	r5, #1
   13c9c:	str	r1, [sp, #16]
   13ca0:	str	r5, [r3, #8]
   13ca4:	str	r6, [r3, #12]
   13ca8:	str	r2, [sp, #20]
   13cac:	sub	r7, r0, r1
   13cb0:	cmp	ip, #0
   13cb4:	mov	r6, #144	; 0x90
   13cb8:	ldr	r3, [sp, #8]
   13cbc:	mov	r0, r7
   13cc0:	addne	r0, r0, #4
   13cc4:	cmp	r9, #0
   13cc8:	movweq	r6, #140	; 0x8c
   13ccc:	cmp	r1, #0
   13cd0:	ldr	r6, [r4, r6]
   13cd4:	sub	r3, r3, r0
   13cd8:	str	r3, [fp, #-36]	; 0xffffffdc
   13cdc:	sub	r0, r6, r0
   13ce0:	str	r0, [fp, #-40]	; 0xffffffd8
   13ce4:	ble	13d3c <flatcc_builder_create_buffer@@Base+0x1d4>
   13ce8:	ldr	r0, [r4, #36]	; 0x24
   13cec:	ldr	r6, [r4, #44]	; 0x2c
   13cf0:	str	r1, [sp]
   13cf4:	add	r1, lr, #8
   13cf8:	mov	r3, r7
   13cfc:	blx	r6
   13d00:	cmp	r0, #0
   13d04:	bne	13d5c <flatcc_builder_create_buffer@@Base+0x1f4>
   13d08:	cmp	r7, #0
   13d0c:	str	r7, [r4, #136]	; 0x88
   13d10:	movne	r0, r7
   13d14:	subne	sp, fp, #28
   13d18:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d1c:	movw	r0, #39516	; 0x9a5c
   13d20:	movw	r1, #34998	; 0x88b6
   13d24:	movw	r3, #35313	; 0x89f1
   13d28:	mov	r2, #772	; 0x304
   13d2c:	movt	r0, #1
   13d30:	movt	r1, #1
   13d34:	movt	r3, #1
   13d38:	bl	12498 <__assert_fail@plt>
   13d3c:	movw	r0, #39516	; 0x9a5c
   13d40:	movw	r1, #34998	; 0x88b6
   13d44:	movw	r3, #39195	; 0x991b
   13d48:	movw	r2, #647	; 0x287
   13d4c:	movt	r0, #1
   13d50:	movt	r1, #1
   13d54:	movt	r3, #1
   13d58:	bl	12498 <__assert_fail@plt>
   13d5c:	movw	r0, #39516	; 0x9a5c
   13d60:	movw	r1, #34998	; 0x88b6
   13d64:	movw	r3, #39195	; 0x991b
   13d68:	movw	r2, #651	; 0x28b
   13d6c:	movt	r0, #1
   13d70:	movt	r1, #1
   13d74:	movt	r3, #1
   13d78:	bl	12498 <__assert_fail@plt>

00013d7c <flatcc_builder_create_struct@@Base>:
   13d7c:	push	{r4, r5, r6, sl, fp, lr}
   13d80:	add	fp, sp, #16
   13d84:	sub	sp, sp, #80	; 0x50
   13d88:	cmp	r3, #0
   13d8c:	beq	13e64 <flatcc_builder_create_struct@@Base+0xe8>
   13d90:	mov	r5, r0
   13d94:	ldrh	r0, [r0, #128]	; 0x80
   13d98:	mov	r4, #0
   13d9c:	cmp	r0, r3
   13da0:	strhcc	r3, [r5, #128]	; 0x80
   13da4:	sub	r3, r3, #1
   13da8:	cmp	r2, #0
   13dac:	ldr	r0, [r5, #136]	; 0x88
   13db0:	str	r4, [sp, #12]
   13db4:	str	r4, [sp, #8]
   13db8:	movne	r4, #1
   13dbc:	strne	r2, [sp, #20]
   13dc0:	strne	r1, [sp, #16]
   13dc4:	strne	r2, [sp, #8]
   13dc8:	strne	r4, [sp, #12]
   13dcc:	sub	r6, r0, r2
   13dd0:	and	r3, r6, r3
   13dd4:	cmp	r3, #0
   13dd8:	beq	13e04 <flatcc_builder_create_struct@@Base+0x88>
   13ddc:	add	r1, sp, #8
   13de0:	movw	r6, #34468	; 0x86a4
   13de4:	add	r2, r3, r2
   13de8:	add	r1, r1, r4, lsl #3
   13dec:	movt	r6, #1
   13df0:	add	r4, r4, #1
   13df4:	str	r2, [sp, #8]
   13df8:	str	r6, [r1, #8]
   13dfc:	str	r3, [r1, #12]
   13e00:	str	r4, [sp, #12]
   13e04:	cmp	r2, #0
   13e08:	ble	13e84 <flatcc_builder_create_struct@@Base+0x108>
   13e0c:	sub	r6, r0, r2
   13e10:	ldr	r0, [r5, #36]	; 0x24
   13e14:	ldr	ip, [r5, #44]	; 0x2c
   13e18:	add	r1, sp, #8
   13e1c:	str	r2, [sp]
   13e20:	mov	r2, r4
   13e24:	add	r1, r1, #8
   13e28:	mov	r3, r6
   13e2c:	blx	ip
   13e30:	cmp	r0, #0
   13e34:	streq	r6, [r5, #136]	; 0x88
   13e38:	moveq	r0, r6
   13e3c:	subeq	sp, fp, #16
   13e40:	popeq	{r4, r5, r6, sl, fp, pc}
   13e44:	movw	r0, #39516	; 0x9a5c
   13e48:	movw	r1, #34998	; 0x88b6
   13e4c:	movw	r3, #39195	; 0x991b
   13e50:	movw	r2, #651	; 0x28b
   13e54:	movt	r0, #1
   13e58:	movt	r1, #1
   13e5c:	movt	r3, #1
   13e60:	bl	12498 <__assert_fail@plt>
   13e64:	movw	r0, #35444	; 0x8a74
   13e68:	movw	r1, #34998	; 0x88b6
   13e6c:	movw	r3, #35455	; 0x8a7f
   13e70:	movw	r2, #783	; 0x30f
   13e74:	movt	r0, #1
   13e78:	movt	r1, #1
   13e7c:	movt	r3, #1
   13e80:	bl	12498 <__assert_fail@plt>
   13e84:	movw	r0, #39516	; 0x9a5c
   13e88:	movw	r1, #34998	; 0x88b6
   13e8c:	movw	r3, #39195	; 0x991b
   13e90:	movw	r2, #647	; 0x287
   13e94:	movt	r0, #1
   13e98:	movt	r1, #1
   13e9c:	movt	r3, #1
   13ea0:	bl	12498 <__assert_fail@plt>

00013ea4 <flatcc_builder_start_buffer@@Base>:
   13ea4:	push	{r4, r5, r6, r7, fp, lr}
   13ea8:	add	fp, sp, #16
   13eac:	mov	r5, r1
   13eb0:	ldrh	r1, [r0, #128]	; 0x80
   13eb4:	mov	r6, r3
   13eb8:	mov	r7, r2
   13ebc:	mov	r4, r0
   13ec0:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   13ec4:	mov	r1, r0
   13ec8:	mvn	r0, #0
   13ecc:	cmp	r1, #0
   13ed0:	popne	{r4, r5, r6, r7, fp, pc}
   13ed4:	mov	r0, #1
   13ed8:	cmp	r5, #0
   13edc:	strh	r0, [r4, #128]	; 0x80
   13ee0:	ldrh	r1, [r4, #132]	; 0x84
   13ee4:	ldr	r2, [r4, #32]
   13ee8:	strh	r1, [r2, #34]	; 0x22
   13eec:	strh	r7, [r4, #132]	; 0x84
   13ef0:	ldrh	r1, [r4, #164]	; 0xa4
   13ef4:	ldr	r2, [r4, #32]
   13ef8:	strh	r1, [r2, #32]
   13efc:	strh	r6, [r4, #164]	; 0xa4
   13f00:	ldr	r1, [r4, #32]
   13f04:	ldr	r2, [r4, #144]	; 0x90
   13f08:	str	r2, [r1, #20]
   13f0c:	ldr	r1, [r4, #32]
   13f10:	ldr	r2, [r4, #152]	; 0x98
   13f14:	str	r2, [r1, #28]
   13f18:	ldr	r3, [r4, #148]	; 0x94
   13f1c:	ldr	r1, [r4, #32]
   13f20:	ldr	r2, [r4, #136]	; 0x88
   13f24:	ldr	r7, [r4, #168]	; 0xa8
   13f28:	add	r6, r3, #1
   13f2c:	str	r2, [r4, #144]	; 0x90
   13f30:	str	r6, [r4, #148]	; 0x94
   13f34:	str	r3, [r4, #152]	; 0x98
   13f38:	str	r7, [r1, #16]
   13f3c:	movw	r1, #34468	; 0x86a4
   13f40:	movt	r1, #1
   13f44:	movne	r1, r5
   13f48:	ldr	r1, [r1]
   13f4c:	str	r1, [r4, #168]	; 0xa8
   13f50:	ldr	r1, [r4, #32]
   13f54:	strh	r0, [r1, #14]
   13f58:	mov	r0, #0
   13f5c:	pop	{r4, r5, r6, r7, fp, pc}
   13f60:	push	{r4, r5, r6, r7, fp, lr}
   13f64:	add	fp, sp, #16
   13f68:	sub	sp, sp, #8
   13f6c:	mov	r5, r1
   13f70:	ldr	r1, [r0, #156]	; 0x9c
   13f74:	ldr	r2, [r0, #160]	; 0xa0
   13f78:	mov	r4, r0
   13f7c:	add	r0, r1, #1
   13f80:	cmp	r1, r2
   13f84:	str	r0, [r4, #156]	; 0x9c
   13f88:	bge	13f9c <flatcc_builder_start_buffer@@Base+0xf8>
   13f8c:	ldr	r0, [r4, #32]
   13f90:	add	r0, r0, #36	; 0x24
   13f94:	str	r0, [r4, #32]
   13f98:	b	14030 <flatcc_builder_start_buffer@@Base+0x18c>
   13f9c:	ldr	r2, [r4, #176]	; 0xb0
   13fa0:	mvn	r6, #0
   13fa4:	cmp	r2, #1
   13fa8:	cmpge	r1, r2
   13fac:	bge	14068 <flatcc_builder_start_buffer@@Base+0x1c4>
   13fb0:	add	r7, r0, r0, lsl #3
   13fb4:	ldr	r0, [r4, #88]	; 0x58
   13fb8:	lsl	r2, r7, #2
   13fbc:	cmp	r2, r0
   13fc0:	bls	13fe8 <flatcc_builder_start_buffer@@Base+0x144>
   13fc4:	ldr	r0, [r4, #40]	; 0x28
   13fc8:	ldr	ip, [r4, #48]	; 0x30
   13fcc:	mov	r3, #4
   13fd0:	add	r1, r4, #84	; 0x54
   13fd4:	str	r3, [sp]
   13fd8:	mov	r3, #0
   13fdc:	blx	ip
   13fe0:	cmp	r0, #0
   13fe4:	bne	14074 <flatcc_builder_start_buffer@@Base+0x1d0>
   13fe8:	ldr	r1, [r4, #84]	; 0x54
   13fec:	mvn	r0, #35	; 0x23
   13ff0:	add	r0, r0, r7, lsl #2
   13ff4:	adds	r0, r0, r1
   13ff8:	str	r0, [r4, #32]
   13ffc:	beq	14068 <flatcc_builder_start_buffer@@Base+0x1c4>
   14000:	ldr	r1, [r4, #88]	; 0x58
   14004:	movw	r3, #36409	; 0x8e39
   14008:	ldr	r2, [r4, #176]	; 0xb0
   1400c:	movt	r3, #14563	; 0x38e3
   14010:	umull	r1, r3, r1, r3
   14014:	cmp	r2, r3, lsr #3
   14018:	lsr	r1, r3, #3
   1401c:	mov	r3, r1
   14020:	movlt	r3, r2
   14024:	cmp	r2, #0
   14028:	movle	r3, r1
   1402c:	str	r3, [r4, #160]	; 0xa0
   14030:	ldr	r1, [r4, #20]
   14034:	mvn	r3, #3
   14038:	mov	r6, #0
   1403c:	str	r1, [r0, #8]
   14040:	ldrh	r2, [r4, #130]	; 0x82
   14044:	strh	r2, [r0, #12]
   14048:	strh	r5, [r4, #130]	; 0x82
   1404c:	ldr	r2, [r4, #28]
   14050:	stm	r0, {r2, r3}
   14054:	add	r0, r1, r2
   14058:	str	r6, [r4, #20]
   1405c:	add	r0, r0, #7
   14060:	bic	r0, r0, #7
   14064:	str	r0, [r4, #28]
   14068:	mov	r0, r6
   1406c:	sub	sp, fp, #16
   14070:	pop	{r4, r5, r6, r7, fp, pc}
   14074:	movw	r0, #39516	; 0x9a5c
   14078:	movw	r1, #34998	; 0x88b6
   1407c:	movw	r3, #39062	; 0x9896
   14080:	mov	r2, #308	; 0x134
   14084:	movt	r0, #1
   14088:	movt	r1, #1
   1408c:	movt	r3, #1
   14090:	bl	12498 <__assert_fail@plt>

00014094 <flatcc_builder_end_buffer@@Base>:
   14094:	push	{r4, r5, r6, sl, fp, lr}
   14098:	add	fp, sp, #16
   1409c:	sub	sp, sp, #8
   140a0:	mov	r4, r0
   140a4:	ldr	r0, [r0, #32]
   140a8:	ldrh	r0, [r0, #14]
   140ac:	cmp	r0, #1
   140b0:	bne	141a4 <flatcc_builder_end_buffer@@Base+0x110>
   140b4:	mov	r3, r1
   140b8:	ldr	r1, [r4, #152]	; 0x98
   140bc:	ldrh	r0, [r4, #164]	; 0xa4
   140c0:	ldrh	r2, [r4, #132]	; 0x84
   140c4:	cmp	r1, #0
   140c8:	ldrh	r1, [r4, #128]	; 0x80
   140cc:	and	r0, r0, #2
   140d0:	orrne	r0, r0, #1
   140d4:	cmp	r1, r2
   140d8:	movcc	r1, r2
   140dc:	strhcc	r2, [r4, #128]	; 0x80
   140e0:	str	r0, [sp, #4]
   140e4:	mov	r0, r4
   140e8:	str	r1, [sp]
   140ec:	add	r1, r4, #168	; 0xa8
   140f0:	bl	13b68 <flatcc_builder_create_buffer@@Base>
   140f4:	mov	r6, r0
   140f8:	cmp	r0, #0
   140fc:	beq	14198 <flatcc_builder_end_buffer@@Base+0x104>
   14100:	ldr	r1, [r4, #32]
   14104:	ldr	r0, [r4, #16]
   14108:	ldr	r2, [r4, #20]
   1410c:	ldr	r3, [r1, #20]
   14110:	str	r3, [r4, #144]	; 0x90
   14114:	ldr	r3, [r1, #28]
   14118:	str	r3, [r4, #152]	; 0x98
   1411c:	ldr	r3, [r1, #16]
   14120:	str	r3, [r4, #168]	; 0xa8
   14124:	ldrh	r1, [r1, #32]
   14128:	strh	r1, [r4, #164]	; 0xa4
   1412c:	mov	r1, #0
   14130:	bl	12468 <memset@plt>
   14134:	ldr	r0, [r4, #32]
   14138:	ldr	r1, [r4, #60]	; 0x3c
   1413c:	ldr	r2, [r4, #64]	; 0x40
   14140:	ldr	r3, [r0, #8]
   14144:	str	r3, [r4, #20]
   14148:	ldr	r3, [r0]
   1414c:	str	r3, [r4, #28]
   14150:	add	r1, r1, r3
   14154:	ldr	r5, [r0, #4]
   14158:	str	r1, [r4, #16]
   1415c:	sub	r1, r2, r3
   14160:	cmp	r1, r5
   14164:	movhi	r1, r5
   14168:	str	r1, [r4, #24]
   1416c:	ldrh	r1, [r4, #130]	; 0x82
   14170:	ldrh	r2, [r4, #128]	; 0x80
   14174:	cmp	r2, r1
   14178:	strhcc	r1, [r4, #128]	; 0x80
   1417c:	ldrh	r1, [r0, #12]
   14180:	sub	r0, r0, #36	; 0x24
   14184:	str	r0, [r4, #32]
   14188:	strh	r1, [r4, #130]	; 0x82
   1418c:	ldr	r0, [r4, #156]	; 0x9c
   14190:	sub	r0, r0, #1
   14194:	str	r0, [r4, #156]	; 0x9c
   14198:	mov	r0, r6
   1419c:	sub	sp, fp, #16
   141a0:	pop	{r4, r5, r6, sl, fp, pc}
   141a4:	movw	r0, #35557	; 0x8ae5
   141a8:	movw	r1, #34998	; 0x88b6
   141ac:	movw	r3, #35601	; 0x8b11
   141b0:	movw	r2, #838	; 0x346
   141b4:	movt	r0, #1
   141b8:	movt	r1, #1
   141bc:	movt	r3, #1
   141c0:	bl	12498 <__assert_fail@plt>

000141c4 <flatcc_builder_start_struct@@Base>:
   141c4:	push	{r4, r5, r6, r7, fp, lr}
   141c8:	add	fp, sp, #16
   141cc:	sub	sp, sp, #8
   141d0:	mov	r6, r1
   141d4:	mov	r1, r2
   141d8:	mov	r4, r0
   141dc:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   141e0:	mov	r5, #0
   141e4:	cmp	r0, #0
   141e8:	bne	14264 <flatcc_builder_start_struct@@Base+0xa0>
   141ec:	ldr	r2, [r4, #32]
   141f0:	mov	r0, #2
   141f4:	mvn	r7, #3
   141f8:	strh	r0, [r2, #14]
   141fc:	ldr	r1, [r4, #28]
   14200:	ldr	r3, [r4, #64]	; 0x40
   14204:	ldr	r0, [r4, #60]	; 0x3c
   14208:	sub	r3, r3, r1
   1420c:	add	r0, r0, r1
   14210:	cmn	r3, #4
   14214:	str	r0, [r4, #16]
   14218:	movcs	r3, r7
   1421c:	str	r3, [r4, #24]
   14220:	str	r7, [r2, #4]
   14224:	ldr	r7, [r4, #20]
   14228:	add	r2, r7, r6
   1422c:	cmp	r2, r3
   14230:	str	r2, [r4, #20]
   14234:	bcc	142a0 <flatcc_builder_start_struct@@Base+0xdc>
   14238:	ldr	r0, [r4, #40]	; 0x28
   1423c:	ldr	r6, [r4, #48]	; 0x30
   14240:	add	r1, r1, r2
   14244:	mov	r3, #1
   14248:	str	r3, [sp]
   1424c:	add	r2, r1, #1
   14250:	add	r1, r4, #60	; 0x3c
   14254:	mov	r3, #1
   14258:	blx	r6
   1425c:	cmp	r0, #0
   14260:	beq	14270 <flatcc_builder_start_struct@@Base+0xac>
   14264:	mov	r0, r5
   14268:	sub	sp, fp, #16
   1426c:	pop	{r4, r5, r6, r7, fp, pc}
   14270:	ldr	r1, [r4, #28]
   14274:	ldr	r0, [r4, #60]	; 0x3c
   14278:	ldr	r3, [r4, #64]	; 0x40
   1427c:	ldr	r2, [r4, #32]
   14280:	add	r0, r0, r1
   14284:	sub	r1, r3, r1
   14288:	mvn	r3, #3
   1428c:	cmn	r1, #4
   14290:	str	r0, [r4, #16]
   14294:	movcs	r1, r3
   14298:	str	r1, [r4, #24]
   1429c:	str	r3, [r2, #4]
   142a0:	add	r5, r0, r7
   142a4:	mov	r0, r5
   142a8:	sub	sp, fp, #16
   142ac:	pop	{r4, r5, r6, r7, fp, pc}

000142b0 <flatcc_builder_struct_edit@@Base>:
   142b0:	ldr	r0, [r0, #16]
   142b4:	bx	lr

000142b8 <flatcc_builder_end_struct@@Base>:
   142b8:	push	{r4, r5, fp, lr}
   142bc:	add	fp, sp, #8
   142c0:	mov	r4, r0
   142c4:	ldr	r0, [r0, #32]
   142c8:	ldrh	r0, [r0, #14]
   142cc:	cmp	r0, #2
   142d0:	bne	14370 <flatcc_builder_end_struct@@Base+0xb8>
   142d4:	ldrh	r3, [r4, #130]	; 0x82
   142d8:	ldr	r1, [r4, #16]
   142dc:	ldr	r2, [r4, #20]
   142e0:	mov	r0, r4
   142e4:	bl	13d7c <flatcc_builder_create_struct@@Base>
   142e8:	mov	r5, r0
   142ec:	cmp	r0, #0
   142f0:	beq	14368 <flatcc_builder_end_struct@@Base+0xb0>
   142f4:	ldr	r0, [r4, #16]
   142f8:	ldr	r2, [r4, #20]
   142fc:	mov	r1, #0
   14300:	bl	12468 <memset@plt>
   14304:	ldr	r0, [r4, #32]
   14308:	ldr	r1, [r4, #60]	; 0x3c
   1430c:	ldr	ip, [r4, #64]	; 0x40
   14310:	ldr	r3, [r0, #8]
   14314:	str	r3, [r4, #20]
   14318:	ldr	r3, [r0]
   1431c:	str	r3, [r4, #28]
   14320:	add	r1, r1, r3
   14324:	ldr	r2, [r0, #4]
   14328:	str	r1, [r4, #16]
   1432c:	sub	r1, ip, r3
   14330:	cmp	r1, r2
   14334:	movhi	r1, r2
   14338:	str	r1, [r4, #24]
   1433c:	ldrh	r1, [r4, #130]	; 0x82
   14340:	ldrh	r2, [r4, #128]	; 0x80
   14344:	cmp	r2, r1
   14348:	strhcc	r1, [r4, #128]	; 0x80
   1434c:	ldrh	r1, [r0, #12]
   14350:	sub	r0, r0, #36	; 0x24
   14354:	str	r0, [r4, #32]
   14358:	strh	r1, [r4, #130]	; 0x82
   1435c:	ldr	r0, [r4, #156]	; 0x9c
   14360:	sub	r0, r0, #1
   14364:	str	r0, [r4, #156]	; 0x9c
   14368:	mov	r0, r5
   1436c:	pop	{r4, r5, fp, pc}
   14370:	movw	r0, #35690	; 0x8b6a
   14374:	movw	r1, #34998	; 0x88b6
   14378:	movw	r3, #35734	; 0x8b96
   1437c:	mov	r2, #872	; 0x368
   14380:	movt	r0, #1
   14384:	movt	r1, #1
   14388:	movt	r3, #1
   1438c:	bl	12498 <__assert_fail@plt>

00014390 <flatcc_builder_extend_vector@@Base>:
   14390:	push	{r4, r5, fp, lr}
   14394:	add	fp, sp, #8
   14398:	sub	sp, sp, #8
   1439c:	mov	r4, r0
   143a0:	ldr	r0, [r0, #32]
   143a4:	ldr	r2, [r0, #20]
   143a8:	adds	r2, r2, r1
   143ac:	bcs	1446c <flatcc_builder_extend_vector@@Base+0xdc>
   143b0:	ldr	r3, [r0, #24]
   143b4:	cmp	r2, r3
   143b8:	bhi	1446c <flatcc_builder_extend_vector@@Base+0xdc>
   143bc:	str	r2, [r0, #20]
   143c0:	ldr	r2, [r4, #32]
   143c4:	ldr	r5, [r4, #20]
   143c8:	ldr	r0, [r4, #24]
   143cc:	ldr	r2, [r2, #16]
   143d0:	mla	r1, r2, r1, r5
   143d4:	cmp	r1, r0
   143d8:	str	r1, [r4, #20]
   143dc:	bcs	143f0 <flatcc_builder_extend_vector@@Base+0x60>
   143e0:	ldr	r0, [r4, #16]
   143e4:	add	r0, r0, r5
   143e8:	sub	sp, fp, #8
   143ec:	pop	{r4, r5, fp, pc}
   143f0:	ldr	r2, [r4, #28]
   143f4:	ldr	r0, [r4, #40]	; 0x28
   143f8:	ldr	ip, [r4, #48]	; 0x30
   143fc:	mov	r3, #1
   14400:	str	r3, [sp]
   14404:	mov	r3, #1
   14408:	add	r1, r1, r2
   1440c:	add	r2, r1, #1
   14410:	add	r1, r4, #60	; 0x3c
   14414:	blx	ip
   14418:	mov	r1, r0
   1441c:	mov	r0, #0
   14420:	cmp	r1, #0
   14424:	beq	14430 <flatcc_builder_extend_vector@@Base+0xa0>
   14428:	sub	sp, fp, #8
   1442c:	pop	{r4, r5, fp, pc}
   14430:	ldr	r1, [r4, #28]
   14434:	ldr	r0, [r4, #60]	; 0x3c
   14438:	ldr	r3, [r4, #64]	; 0x40
   1443c:	ldr	r2, [r4, #32]
   14440:	add	r0, r0, r1
   14444:	sub	r1, r3, r1
   14448:	mvn	r3, #3
   1444c:	cmn	r1, #4
   14450:	str	r0, [r4, #16]
   14454:	movcs	r1, r3
   14458:	str	r1, [r4, #24]
   1445c:	str	r3, [r2, #4]
   14460:	add	r0, r0, r5
   14464:	sub	sp, fp, #8
   14468:	pop	{r4, r5, fp, pc}
   1446c:	movw	r0, #39269	; 0x9965
   14470:	movw	r1, #34998	; 0x88b6
   14474:	movw	r3, #39296	; 0x9980
   14478:	mov	r2, #892	; 0x37c
   1447c:	movt	r0, #1
   14480:	movt	r1, #1
   14484:	movt	r3, #1
   14488:	bl	12498 <__assert_fail@plt>

0001448c <flatcc_builder_vector_push@@Base>:
   1448c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14490:	add	fp, sp, #24
   14494:	sub	sp, sp, #8
   14498:	mov	r5, r0
   1449c:	ldr	r0, [r0, #32]
   144a0:	mov	r8, r1
   144a4:	ldrh	r1, [r0, #14]
   144a8:	cmp	r1, #4
   144ac:	bne	14598 <flatcc_builder_vector_push@@Base+0x10c>
   144b0:	ldr	r1, [r0, #20]
   144b4:	ldr	r2, [r0, #24]
   144b8:	cmp	r1, r2
   144bc:	bhi	145b8 <flatcc_builder_vector_push@@Base+0x12c>
   144c0:	add	r1, r1, #1
   144c4:	str	r1, [r0, #20]
   144c8:	ldr	r1, [r5, #32]
   144cc:	ldr	r4, [r5, #20]
   144d0:	ldr	r0, [r5, #24]
   144d4:	ldr	r6, [r1, #16]
   144d8:	add	r1, r4, r6
   144dc:	cmp	r1, r0
   144e0:	str	r1, [r5, #20]
   144e4:	bcs	14510 <flatcc_builder_vector_push@@Base+0x84>
   144e8:	ldr	r0, [r5, #16]
   144ec:	adds	r7, r0, r4
   144f0:	beq	14588 <flatcc_builder_vector_push@@Base+0xfc>
   144f4:	mov	r0, r7
   144f8:	mov	r1, r8
   144fc:	mov	r2, r6
   14500:	bl	123e4 <memcpy@plt>
   14504:	mov	r0, r7
   14508:	sub	sp, fp, #24
   1450c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14510:	ldr	r2, [r5, #28]
   14514:	ldr	r0, [r5, #40]	; 0x28
   14518:	ldr	r7, [r5, #48]	; 0x30
   1451c:	mov	r3, #1
   14520:	str	r3, [sp]
   14524:	mov	r3, #1
   14528:	add	r1, r1, r2
   1452c:	add	r2, r1, #1
   14530:	add	r1, r5, #60	; 0x3c
   14534:	blx	r7
   14538:	mov	r7, #0
   1453c:	cmp	r0, #0
   14540:	beq	14550 <flatcc_builder_vector_push@@Base+0xc4>
   14544:	mov	r0, r7
   14548:	sub	sp, fp, #24
   1454c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14550:	ldr	r1, [r5, #28]
   14554:	ldr	r0, [r5, #60]	; 0x3c
   14558:	ldr	r3, [r5, #64]	; 0x40
   1455c:	ldr	r2, [r5, #32]
   14560:	add	r0, r0, r1
   14564:	sub	r1, r3, r1
   14568:	mvn	r3, #3
   1456c:	cmn	r1, #4
   14570:	str	r0, [r5, #16]
   14574:	movcs	r1, r3
   14578:	str	r1, [r5, #24]
   1457c:	str	r3, [r2, #4]
   14580:	adds	r7, r0, r4
   14584:	bne	144f4 <flatcc_builder_vector_push@@Base+0x68>
   14588:	mov	r7, #0
   1458c:	mov	r0, r7
   14590:	sub	sp, fp, #24
   14594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14598:	movw	r0, #35801	; 0x8bd9
   1459c:	movw	r1, #34998	; 0x88b6
   145a0:	movw	r3, #35845	; 0x8c05
   145a4:	movw	r2, #907	; 0x38b
   145a8:	movt	r0, #1
   145ac:	movt	r1, #1
   145b0:	movt	r3, #1
   145b4:	bl	12498 <__assert_fail@plt>
   145b8:	movw	r0, #35912	; 0x8c48
   145bc:	movw	r1, #34998	; 0x88b6
   145c0:	movw	r3, #35845	; 0x8c05
   145c4:	mov	r2, #908	; 0x38c
   145c8:	movt	r0, #1
   145cc:	movt	r1, #1
   145d0:	movt	r3, #1
   145d4:	bl	12498 <__assert_fail@plt>

000145d8 <flatcc_builder_append_vector@@Base>:
   145d8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   145dc:	add	fp, sp, #24
   145e0:	sub	sp, sp, #8
   145e4:	mov	r6, r0
   145e8:	ldr	r0, [r0, #32]
   145ec:	mov	r8, r1
   145f0:	ldrh	r1, [r0, #14]
   145f4:	cmp	r1, #4
   145f8:	bne	1470c <flatcc_builder_append_vector@@Base+0x134>
   145fc:	ldr	r1, [r0, #20]
   14600:	mov	r5, r2
   14604:	adds	r1, r1, r2
   14608:	bcs	146ec <flatcc_builder_append_vector@@Base+0x114>
   1460c:	ldr	r2, [r0, #24]
   14610:	cmp	r1, r2
   14614:	bhi	146ec <flatcc_builder_append_vector@@Base+0x114>
   14618:	str	r1, [r0, #20]
   1461c:	ldr	r1, [r6, #32]
   14620:	ldr	r4, [r6, #20]
   14624:	ldr	r0, [r6, #24]
   14628:	ldr	r9, [r1, #16]
   1462c:	mla	r1, r9, r5, r4
   14630:	cmp	r1, r0
   14634:	str	r1, [r6, #20]
   14638:	bcs	14664 <flatcc_builder_append_vector@@Base+0x8c>
   1463c:	ldr	r0, [r6, #16]
   14640:	adds	r7, r0, r4
   14644:	beq	146dc <flatcc_builder_append_vector@@Base+0x104>
   14648:	mul	r2, r9, r5
   1464c:	mov	r0, r7
   14650:	mov	r1, r8
   14654:	bl	123e4 <memcpy@plt>
   14658:	mov	r0, r7
   1465c:	sub	sp, fp, #24
   14660:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14664:	ldr	r2, [r6, #28]
   14668:	ldr	r0, [r6, #40]	; 0x28
   1466c:	ldr	r7, [r6, #48]	; 0x30
   14670:	mov	r3, #1
   14674:	str	r3, [sp]
   14678:	mov	r3, #1
   1467c:	add	r1, r1, r2
   14680:	add	r2, r1, #1
   14684:	add	r1, r6, #60	; 0x3c
   14688:	blx	r7
   1468c:	mov	r7, #0
   14690:	cmp	r0, #0
   14694:	beq	146a4 <flatcc_builder_append_vector@@Base+0xcc>
   14698:	mov	r0, r7
   1469c:	sub	sp, fp, #24
   146a0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146a4:	ldr	r1, [r6, #28]
   146a8:	ldr	r0, [r6, #60]	; 0x3c
   146ac:	ldr	r3, [r6, #64]	; 0x40
   146b0:	ldr	r2, [r6, #32]
   146b4:	add	r0, r0, r1
   146b8:	sub	r1, r3, r1
   146bc:	mvn	r3, #3
   146c0:	cmn	r1, #4
   146c4:	str	r0, [r6, #16]
   146c8:	movcs	r1, r3
   146cc:	str	r1, [r6, #24]
   146d0:	str	r3, [r2, #4]
   146d4:	adds	r7, r0, r4
   146d8:	bne	14648 <flatcc_builder_append_vector@@Base+0x70>
   146dc:	mov	r7, #0
   146e0:	mov	r0, r7
   146e4:	sub	sp, fp, #24
   146e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   146ec:	movw	r0, #39269	; 0x9965
   146f0:	movw	r1, #34998	; 0x88b6
   146f4:	movw	r3, #39296	; 0x9980
   146f8:	mov	r2, #892	; 0x37c
   146fc:	movt	r0, #1
   14700:	movt	r1, #1
   14704:	movt	r3, #1
   14708:	bl	12498 <__assert_fail@plt>
   1470c:	movw	r0, #35801	; 0x8bd9
   14710:	movw	r1, #34998	; 0x88b6
   14714:	movw	r3, #35973	; 0x8c85
   14718:	movw	r2, #915	; 0x393
   1471c:	movt	r0, #1
   14720:	movt	r1, #1
   14724:	movt	r3, #1
   14728:	bl	12498 <__assert_fail@plt>

0001472c <flatcc_builder_extend_offset_vector@@Base>:
   1472c:	push	{r4, r5, fp, lr}
   14730:	add	fp, sp, #8
   14734:	sub	sp, sp, #8
   14738:	mov	r4, r0
   1473c:	ldr	r0, [r0, #32]
   14740:	ldr	r2, [r0, #20]
   14744:	adds	r2, r2, r1
   14748:	cmpcc	r2, #1073741824	; 0x40000000
   1474c:	bcc	14770 <flatcc_builder_extend_offset_vector@@Base+0x44>
   14750:	movw	r0, #39269	; 0x9965
   14754:	movw	r1, #34998	; 0x88b6
   14758:	movw	r3, #39296	; 0x9980
   1475c:	mov	r2, #892	; 0x37c
   14760:	movt	r0, #1
   14764:	movt	r1, #1
   14768:	movt	r3, #1
   1476c:	bl	12498 <__assert_fail@plt>
   14770:	str	r2, [r0, #20]
   14774:	ldr	r5, [r4, #20]
   14778:	ldr	r0, [r4, #24]
   1477c:	add	r1, r5, r1, lsl #2
   14780:	cmp	r1, r0
   14784:	str	r1, [r4, #20]
   14788:	bcs	1479c <flatcc_builder_extend_offset_vector@@Base+0x70>
   1478c:	ldr	r0, [r4, #16]
   14790:	add	r0, r0, r5
   14794:	sub	sp, fp, #8
   14798:	pop	{r4, r5, fp, pc}
   1479c:	ldr	r2, [r4, #28]
   147a0:	ldr	r0, [r4, #40]	; 0x28
   147a4:	ldr	ip, [r4, #48]	; 0x30
   147a8:	mov	r3, #1
   147ac:	str	r3, [sp]
   147b0:	mov	r3, #1
   147b4:	add	r1, r1, r2
   147b8:	add	r2, r1, #1
   147bc:	add	r1, r4, #60	; 0x3c
   147c0:	blx	ip
   147c4:	mov	r1, r0
   147c8:	mov	r0, #0
   147cc:	cmp	r1, #0
   147d0:	beq	147dc <flatcc_builder_extend_offset_vector@@Base+0xb0>
   147d4:	sub	sp, fp, #8
   147d8:	pop	{r4, r5, fp, pc}
   147dc:	ldr	r1, [r4, #28]
   147e0:	ldr	r0, [r4, #60]	; 0x3c
   147e4:	ldr	r3, [r4, #64]	; 0x40
   147e8:	ldr	r2, [r4, #32]
   147ec:	add	r0, r0, r1
   147f0:	sub	r1, r3, r1
   147f4:	mvn	r3, #3
   147f8:	cmn	r1, #4
   147fc:	str	r0, [r4, #16]
   14800:	movcs	r1, r3
   14804:	str	r1, [r4, #24]
   14808:	str	r3, [r2, #4]
   1480c:	add	r0, r0, r5
   14810:	sub	sp, fp, #8
   14814:	pop	{r4, r5, fp, pc}

00014818 <flatcc_builder_offset_vector_push@@Base>:
   14818:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1481c:	add	fp, sp, #24
   14820:	sub	sp, sp, #8
   14824:	mov	r6, r0
   14828:	ldr	r0, [r0, #32]
   1482c:	mov	r8, r1
   14830:	ldrh	r1, [r0, #14]
   14834:	cmp	r1, #5
   14838:	bne	148f8 <flatcc_builder_offset_vector_push@@Base+0xe0>
   1483c:	ldr	r1, [r0, #20]
   14840:	mov	r5, #0
   14844:	cmn	r1, #-1073741823	; 0xc0000001
   14848:	beq	148a4 <flatcc_builder_offset_vector_push@@Base+0x8c>
   1484c:	add	r1, r1, #1
   14850:	str	r1, [r0, #20]
   14854:	ldr	r7, [r6, #20]
   14858:	ldr	r0, [r6, #24]
   1485c:	add	r1, r7, #4
   14860:	cmp	r1, r0
   14864:	str	r1, [r6, #20]
   14868:	bcs	14874 <flatcc_builder_offset_vector_push@@Base+0x5c>
   1486c:	ldr	r0, [r6, #16]
   14870:	b	148e0 <flatcc_builder_offset_vector_push@@Base+0xc8>
   14874:	ldr	r1, [r6, #28]
   14878:	ldr	r0, [r6, #40]	; 0x28
   1487c:	ldr	r4, [r6, #48]	; 0x30
   14880:	mov	r2, #1
   14884:	mov	r3, #1
   14888:	str	r2, [sp]
   1488c:	add	r1, r7, r1
   14890:	add	r2, r1, #5
   14894:	add	r1, r6, #60	; 0x3c
   14898:	blx	r4
   1489c:	cmp	r0, #0
   148a0:	beq	148b0 <flatcc_builder_offset_vector_push@@Base+0x98>
   148a4:	mov	r0, r5
   148a8:	sub	sp, fp, #24
   148ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148b0:	ldr	r1, [r6, #28]
   148b4:	ldr	r0, [r6, #60]	; 0x3c
   148b8:	ldr	r3, [r6, #64]	; 0x40
   148bc:	ldr	r2, [r6, #32]
   148c0:	add	r0, r0, r1
   148c4:	sub	r1, r3, r1
   148c8:	mvn	r3, #3
   148cc:	cmn	r1, #4
   148d0:	str	r0, [r6, #16]
   148d4:	movcs	r1, r3
   148d8:	str	r1, [r6, #24]
   148dc:	str	r3, [r2, #4]
   148e0:	adds	r0, r0, r7
   148e4:	movne	r5, r0
   148e8:	strne	r8, [r0]
   148ec:	mov	r0, r5
   148f0:	sub	sp, fp, #24
   148f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148f8:	movw	r0, #36050	; 0x8cd2
   148fc:	movw	r1, #34998	; 0x88b6
   14900:	movw	r3, #36101	; 0x8d05
   14904:	movw	r2, #934	; 0x3a6
   14908:	movt	r0, #1
   1490c:	movt	r1, #1
   14910:	movt	r3, #1
   14914:	bl	12498 <__assert_fail@plt>

00014918 <flatcc_builder_append_offset_vector@@Base>:
   14918:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1491c:	add	fp, sp, #24
   14920:	sub	sp, sp, #8
   14924:	mov	r6, r0
   14928:	ldr	r0, [r0, #32]
   1492c:	mov	r8, r1
   14930:	ldrh	r1, [r0, #14]
   14934:	cmp	r1, #5
   14938:	bne	14a3c <flatcc_builder_append_offset_vector@@Base+0x124>
   1493c:	ldr	r1, [r0, #20]
   14940:	mov	r5, r2
   14944:	adds	r1, r1, r2
   14948:	cmpcc	r1, #1073741824	; 0x40000000
   1494c:	bcc	14970 <flatcc_builder_append_offset_vector@@Base+0x58>
   14950:	movw	r0, #39269	; 0x9965
   14954:	movw	r1, #34998	; 0x88b6
   14958:	movw	r3, #39296	; 0x9980
   1495c:	mov	r2, #892	; 0x37c
   14960:	movt	r0, #1
   14964:	movt	r1, #1
   14968:	movt	r3, #1
   1496c:	bl	12498 <__assert_fail@plt>
   14970:	str	r1, [r0, #20]
   14974:	ldr	r4, [r6, #20]
   14978:	ldr	r0, [r6, #24]
   1497c:	add	r1, r4, r5, lsl #2
   14980:	cmp	r1, r0
   14984:	str	r1, [r6, #20]
   14988:	bcs	149b4 <flatcc_builder_append_offset_vector@@Base+0x9c>
   1498c:	ldr	r0, [r6, #16]
   14990:	adds	r7, r0, r4
   14994:	beq	14a2c <flatcc_builder_append_offset_vector@@Base+0x114>
   14998:	lsl	r2, r5, #2
   1499c:	mov	r0, r7
   149a0:	mov	r1, r8
   149a4:	bl	123e4 <memcpy@plt>
   149a8:	mov	r0, r7
   149ac:	sub	sp, fp, #24
   149b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149b4:	ldr	r2, [r6, #28]
   149b8:	ldr	r0, [r6, #40]	; 0x28
   149bc:	ldr	r7, [r6, #48]	; 0x30
   149c0:	mov	r3, #1
   149c4:	str	r3, [sp]
   149c8:	mov	r3, #1
   149cc:	add	r1, r1, r2
   149d0:	add	r2, r1, #1
   149d4:	add	r1, r6, #60	; 0x3c
   149d8:	blx	r7
   149dc:	mov	r7, #0
   149e0:	cmp	r0, #0
   149e4:	beq	149f4 <flatcc_builder_append_offset_vector@@Base+0xdc>
   149e8:	mov	r0, r7
   149ec:	sub	sp, fp, #24
   149f0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   149f4:	ldr	r1, [r6, #28]
   149f8:	ldr	r0, [r6, #60]	; 0x3c
   149fc:	ldr	r3, [r6, #64]	; 0x40
   14a00:	ldr	r2, [r6, #32]
   14a04:	add	r0, r0, r1
   14a08:	sub	r1, r3, r1
   14a0c:	mvn	r3, #3
   14a10:	cmn	r1, #4
   14a14:	str	r0, [r6, #16]
   14a18:	movcs	r1, r3
   14a1c:	str	r1, [r6, #24]
   14a20:	str	r3, [r2, #4]
   14a24:	adds	r7, r0, r4
   14a28:	bne	14998 <flatcc_builder_append_offset_vector@@Base+0x80>
   14a2c:	mov	r7, #0
   14a30:	mov	r0, r7
   14a34:	sub	sp, fp, #24
   14a38:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a3c:	movw	r0, #36050	; 0x8cd2
   14a40:	movw	r1, #34998	; 0x88b6
   14a44:	movw	r3, #36199	; 0x8d67
   14a48:	mov	r2, #948	; 0x3b4
   14a4c:	movt	r0, #1
   14a50:	movt	r1, #1
   14a54:	movt	r3, #1
   14a58:	bl	12498 <__assert_fail@plt>

00014a5c <flatcc_builder_extend_string@@Base>:
   14a5c:	push	{r4, r5, fp, lr}
   14a60:	add	fp, sp, #8
   14a64:	sub	sp, sp, #8
   14a68:	mov	r4, r0
   14a6c:	ldr	r0, [r0, #32]
   14a70:	ldrh	r2, [r0, #14]
   14a74:	cmp	r2, #6
   14a78:	bne	14b30 <flatcc_builder_extend_string@@Base+0xd4>
   14a7c:	ldr	r2, [r0, #20]
   14a80:	adds	r2, r2, r1
   14a84:	bcs	14b50 <flatcc_builder_extend_string@@Base+0xf4>
   14a88:	str	r2, [r0, #20]
   14a8c:	ldr	r5, [r4, #20]
   14a90:	ldr	r0, [r4, #24]
   14a94:	add	r1, r5, r1
   14a98:	cmp	r1, r0
   14a9c:	str	r1, [r4, #20]
   14aa0:	bcs	14ab4 <flatcc_builder_extend_string@@Base+0x58>
   14aa4:	ldr	r0, [r4, #16]
   14aa8:	add	r0, r0, r5
   14aac:	sub	sp, fp, #8
   14ab0:	pop	{r4, r5, fp, pc}
   14ab4:	ldr	r2, [r4, #28]
   14ab8:	ldr	r0, [r4, #40]	; 0x28
   14abc:	ldr	ip, [r4, #48]	; 0x30
   14ac0:	mov	r3, #1
   14ac4:	str	r3, [sp]
   14ac8:	mov	r3, #1
   14acc:	add	r1, r1, r2
   14ad0:	add	r2, r1, #1
   14ad4:	add	r1, r4, #60	; 0x3c
   14ad8:	blx	ip
   14adc:	mov	r1, r0
   14ae0:	mov	r0, #0
   14ae4:	cmp	r1, #0
   14ae8:	beq	14af4 <flatcc_builder_extend_string@@Base+0x98>
   14aec:	sub	sp, fp, #8
   14af0:	pop	{r4, r5, fp, pc}
   14af4:	ldr	r1, [r4, #28]
   14af8:	ldr	r0, [r4, #60]	; 0x3c
   14afc:	ldr	r3, [r4, #64]	; 0x40
   14b00:	ldr	r2, [r4, #32]
   14b04:	add	r0, r0, r1
   14b08:	sub	r1, r3, r1
   14b0c:	mvn	r3, #3
   14b10:	cmn	r1, #4
   14b14:	str	r0, [r4, #16]
   14b18:	movcs	r1, r3
   14b1c:	str	r1, [r4, #24]
   14b20:	str	r3, [r2, #4]
   14b24:	add	r0, r0, r5
   14b28:	sub	sp, fp, #8
   14b2c:	pop	{r4, r5, fp, pc}
   14b30:	movw	r0, #36315	; 0x8ddb
   14b34:	movw	r1, #34998	; 0x88b6
   14b38:	movw	r3, #36359	; 0x8e07
   14b3c:	movw	r2, #957	; 0x3bd
   14b40:	movt	r0, #1
   14b44:	movt	r1, #1
   14b48:	movt	r3, #1
   14b4c:	bl	12498 <__assert_fail@plt>
   14b50:	movw	r0, #39269	; 0x9965
   14b54:	movw	r1, #34998	; 0x88b6
   14b58:	movw	r3, #39296	; 0x9980
   14b5c:	mov	r2, #892	; 0x37c
   14b60:	movt	r0, #1
   14b64:	movt	r1, #1
   14b68:	movt	r3, #1
   14b6c:	bl	12498 <__assert_fail@plt>

00014b70 <flatcc_builder_append_string@@Base>:
   14b70:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b74:	add	fp, sp, #24
   14b78:	sub	sp, sp, #8
   14b7c:	mov	r6, r0
   14b80:	ldr	r0, [r0, #32]
   14b84:	mov	r8, r1
   14b88:	ldrh	r1, [r0, #14]
   14b8c:	cmp	r1, #6
   14b90:	bne	14c70 <flatcc_builder_append_string@@Base+0x100>
   14b94:	ldr	r1, [r0, #20]
   14b98:	mov	r4, r2
   14b9c:	adds	r1, r1, r2
   14ba0:	bcs	14c90 <flatcc_builder_append_string@@Base+0x120>
   14ba4:	str	r1, [r0, #20]
   14ba8:	ldr	r5, [r6, #20]
   14bac:	ldr	r0, [r6, #24]
   14bb0:	add	r1, r5, r4
   14bb4:	cmp	r1, r0
   14bb8:	str	r1, [r6, #20]
   14bbc:	bcs	14be8 <flatcc_builder_append_string@@Base+0x78>
   14bc0:	ldr	r0, [r6, #16]
   14bc4:	adds	r7, r0, r5
   14bc8:	beq	14c60 <flatcc_builder_append_string@@Base+0xf0>
   14bcc:	mov	r0, r7
   14bd0:	mov	r1, r8
   14bd4:	mov	r2, r4
   14bd8:	bl	123e4 <memcpy@plt>
   14bdc:	mov	r0, r7
   14be0:	sub	sp, fp, #24
   14be4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14be8:	ldr	r2, [r6, #28]
   14bec:	ldr	r0, [r6, #40]	; 0x28
   14bf0:	ldr	r7, [r6, #48]	; 0x30
   14bf4:	mov	r3, #1
   14bf8:	str	r3, [sp]
   14bfc:	mov	r3, #1
   14c00:	add	r1, r1, r2
   14c04:	add	r2, r1, #1
   14c08:	add	r1, r6, #60	; 0x3c
   14c0c:	blx	r7
   14c10:	mov	r7, #0
   14c14:	cmp	r0, #0
   14c18:	beq	14c28 <flatcc_builder_append_string@@Base+0xb8>
   14c1c:	mov	r0, r7
   14c20:	sub	sp, fp, #24
   14c24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c28:	ldr	r1, [r6, #28]
   14c2c:	ldr	r0, [r6, #60]	; 0x3c
   14c30:	ldr	r3, [r6, #64]	; 0x40
   14c34:	ldr	r2, [r6, #32]
   14c38:	add	r0, r0, r1
   14c3c:	sub	r1, r3, r1
   14c40:	mvn	r3, #3
   14c44:	cmn	r1, #4
   14c48:	str	r0, [r6, #16]
   14c4c:	movcs	r1, r3
   14c50:	str	r1, [r6, #24]
   14c54:	str	r3, [r2, #4]
   14c58:	adds	r7, r0, r5
   14c5c:	bne	14bcc <flatcc_builder_append_string@@Base+0x5c>
   14c60:	mov	r7, #0
   14c64:	mov	r0, r7
   14c68:	sub	sp, fp, #24
   14c6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14c70:	movw	r0, #36315	; 0x8ddb
   14c74:	movw	r1, #34998	; 0x88b6
   14c78:	movw	r3, #36422	; 0x8e46
   14c7c:	movw	r2, #966	; 0x3c6
   14c80:	movt	r0, #1
   14c84:	movt	r1, #1
   14c88:	movt	r3, #1
   14c8c:	bl	12498 <__assert_fail@plt>
   14c90:	movw	r0, #39269	; 0x9965
   14c94:	movw	r1, #34998	; 0x88b6
   14c98:	movw	r3, #39296	; 0x9980
   14c9c:	mov	r2, #892	; 0x37c
   14ca0:	movt	r0, #1
   14ca4:	movt	r1, #1
   14ca8:	movt	r3, #1
   14cac:	bl	12498 <__assert_fail@plt>

00014cb0 <flatcc_builder_append_string_str@@Base>:
   14cb0:	push	{r4, r5, fp, lr}
   14cb4:	add	fp, sp, #8
   14cb8:	mov	r5, r0
   14cbc:	mov	r0, r1
   14cc0:	mov	r4, r1
   14cc4:	bl	12450 <strlen@plt>
   14cc8:	mov	r2, r0
   14ccc:	mov	r0, r5
   14cd0:	mov	r1, r4
   14cd4:	pop	{r4, r5, fp, lr}
   14cd8:	b	14b70 <flatcc_builder_append_string@@Base>

00014cdc <flatcc_builder_append_string_strn@@Base>:
   14cdc:	push	{r4, r5, r6, sl, fp, lr}
   14ce0:	add	fp, sp, #16
   14ce4:	mov	r6, r0
   14ce8:	mov	r5, r1
   14cec:	mov	r0, r1
   14cf0:	mov	r1, #0
   14cf4:	mov	r4, r2
   14cf8:	bl	12474 <memchr@plt>
   14cfc:	cmp	r0, #0
   14d00:	mov	r1, r5
   14d04:	subne	r4, r0, r5
   14d08:	mov	r0, r6
   14d0c:	mov	r2, r4
   14d10:	pop	{r4, r5, r6, sl, fp, lr}
   14d14:	b	14b70 <flatcc_builder_append_string@@Base>

00014d18 <flatcc_builder_truncate_vector@@Base>:
   14d18:	push	{fp, lr}
   14d1c:	mov	fp, sp
   14d20:	ldr	r2, [r0, #32]
   14d24:	ldrh	r3, [r2, #14]
   14d28:	cmp	r3, #4
   14d2c:	bne	14d74 <flatcc_builder_truncate_vector@@Base+0x5c>
   14d30:	ldr	r3, [r2, #20]
   14d34:	cmp	r3, r1
   14d38:	bcc	14d94 <flatcc_builder_truncate_vector@@Base+0x7c>
   14d3c:	sub	r3, r3, r1
   14d40:	str	r3, [r2, #20]
   14d44:	ldr	r2, [r0, #32]
   14d48:	ldr	r3, [r0, #20]
   14d4c:	ldr	ip, [r0, #16]
   14d50:	ldr	r2, [r2, #16]
   14d54:	mls	r3, r2, r1, r3
   14d58:	mul	r2, r2, r1
   14d5c:	mov	r1, #0
   14d60:	str	r3, [r0, #20]
   14d64:	add	r0, ip, r3
   14d68:	bl	12468 <memset@plt>
   14d6c:	mov	r0, #0
   14d70:	pop	{fp, pc}
   14d74:	movw	r0, #35801	; 0x8bd9
   14d78:	movw	r1, #34998	; 0x88b6
   14d7c:	movw	r3, #36499	; 0x8e93
   14d80:	movw	r2, #985	; 0x3d9
   14d84:	movt	r0, #1
   14d88:	movt	r1, #1
   14d8c:	movt	r3, #1
   14d90:	bl	12498 <__assert_fail@plt>
   14d94:	movw	r0, #36562	; 0x8ed2
   14d98:	movw	r1, #34998	; 0x88b6
   14d9c:	movw	r3, #36499	; 0x8e93
   14da0:	movw	r2, #986	; 0x3da
   14da4:	movt	r0, #1
   14da8:	movt	r1, #1
   14dac:	movt	r3, #1
   14db0:	bl	12498 <__assert_fail@plt>

00014db4 <flatcc_builder_truncate_offset_vector@@Base>:
   14db4:	push	{fp, lr}
   14db8:	mov	fp, sp
   14dbc:	ldr	r2, [r0, #32]
   14dc0:	ldrh	r3, [r2, #14]
   14dc4:	cmp	r3, #5
   14dc8:	bne	14e10 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14dcc:	ldr	r3, [r2, #20]
   14dd0:	cmp	r3, r1
   14dd4:	bcc	14e30 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14dd8:	sub	r3, r3, r1
   14ddc:	str	r3, [r2, #20]
   14de0:	ldr	r2, [r0, #32]
   14de4:	ldr	r3, [r0, #20]
   14de8:	ldr	ip, [r0, #16]
   14dec:	ldr	r2, [r2, #16]
   14df0:	mls	r3, r2, r1, r3
   14df4:	mul	r2, r2, r1
   14df8:	mov	r1, #0
   14dfc:	str	r3, [r0, #20]
   14e00:	add	r0, ip, r3
   14e04:	bl	12468 <memset@plt>
   14e08:	mov	r0, #0
   14e0c:	pop	{fp, pc}
   14e10:	movw	r0, #36050	; 0x8cd2
   14e14:	movw	r1, #34998	; 0x88b6
   14e18:	movw	r3, #36598	; 0x8ef6
   14e1c:	movw	r2, #994	; 0x3e2
   14e20:	movt	r0, #1
   14e24:	movt	r1, #1
   14e28:	movt	r3, #1
   14e2c:	bl	12498 <__assert_fail@plt>
   14e30:	movw	r0, #36668	; 0x8f3c
   14e34:	movw	r1, #34998	; 0x88b6
   14e38:	movw	r3, #36598	; 0x8ef6
   14e3c:	movw	r2, #995	; 0x3e3
   14e40:	movt	r0, #1
   14e44:	movt	r1, #1
   14e48:	movt	r3, #1
   14e4c:	bl	12498 <__assert_fail@plt>

00014e50 <flatcc_builder_truncate_string@@Base>:
   14e50:	push	{fp, lr}
   14e54:	mov	fp, sp
   14e58:	mov	r2, r1
   14e5c:	ldr	r1, [r0, #32]
   14e60:	ldrh	r3, [r1, #14]
   14e64:	cmp	r3, #6
   14e68:	bne	14ea4 <flatcc_builder_truncate_string@@Base+0x54>
   14e6c:	ldr	r3, [r1, #20]
   14e70:	cmp	r3, r2
   14e74:	bcc	14ec4 <flatcc_builder_truncate_string@@Base+0x74>
   14e78:	sub	r3, r3, r2
   14e7c:	str	r3, [r1, #20]
   14e80:	ldr	r3, [r0, #20]
   14e84:	ldr	r1, [r0, #16]
   14e88:	sub	r3, r3, r2
   14e8c:	str	r3, [r0, #20]
   14e90:	add	r0, r1, r3
   14e94:	mov	r1, #0
   14e98:	bl	12468 <memset@plt>
   14e9c:	mov	r0, #0
   14ea0:	pop	{fp, pc}
   14ea4:	movw	r0, #36315	; 0x8ddb
   14ea8:	movw	r1, #34998	; 0x88b6
   14eac:	movw	r3, #36727	; 0x8f77
   14eb0:	movw	r2, #1003	; 0x3eb
   14eb4:	movt	r0, #1
   14eb8:	movt	r1, #1
   14ebc:	movt	r3, #1
   14ec0:	bl	12498 <__assert_fail@plt>
   14ec4:	movw	r0, #36790	; 0x8fb6
   14ec8:	movw	r1, #34998	; 0x88b6
   14ecc:	movw	r3, #36727	; 0x8f77
   14ed0:	mov	r2, #1004	; 0x3ec
   14ed4:	movt	r0, #1
   14ed8:	movt	r1, #1
   14edc:	movt	r3, #1
   14ee0:	bl	12498 <__assert_fail@plt>

00014ee4 <flatcc_builder_start_vector@@Base>:
   14ee4:	push	{r4, r5, r6, r7, fp, lr}
   14ee8:	add	fp, sp, #16
   14eec:	mov	r7, #4
   14ef0:	cmp	r2, #4
   14ef4:	mov	r6, r1
   14ef8:	mov	r5, r3
   14efc:	mov	r4, r0
   14f00:	movls	r2, r7
   14f04:	mov	r1, r2
   14f08:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   14f0c:	mov	r1, r0
   14f10:	mvn	r0, #0
   14f14:	cmp	r1, #0
   14f18:	popne	{r4, r5, r6, r7, fp, pc}
   14f1c:	ldr	r0, [r4, #32]
   14f20:	str	r6, [r0, #16]
   14f24:	mov	r0, #0
   14f28:	ldr	r1, [r4, #32]
   14f2c:	str	r0, [r1, #20]
   14f30:	ldr	r1, [r4, #32]
   14f34:	str	r5, [r1, #24]
   14f38:	ldr	r1, [r4, #32]
   14f3c:	strh	r7, [r1, #14]
   14f40:	ldr	r2, [r4, #28]
   14f44:	ldr	r3, [r4, #60]	; 0x3c
   14f48:	ldr	r7, [r4, #64]	; 0x40
   14f4c:	add	r3, r3, r2
   14f50:	sub	r2, r7, r2
   14f54:	str	r3, [r4, #16]
   14f58:	mvn	r3, #3
   14f5c:	cmn	r2, #4
   14f60:	movcs	r2, r3
   14f64:	str	r2, [r4, #24]
   14f68:	str	r3, [r1, #4]
   14f6c:	pop	{r4, r5, r6, r7, fp, pc}

00014f70 <flatcc_builder_start_offset_vector@@Base>:
   14f70:	push	{r4, r5, fp, lr}
   14f74:	add	fp, sp, #8
   14f78:	mov	r1, #4
   14f7c:	mov	r4, r0
   14f80:	mov	r5, #4
   14f84:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   14f88:	mov	r1, r0
   14f8c:	mvn	r0, #0
   14f90:	cmp	r1, #0
   14f94:	popne	{r4, r5, fp, pc}
   14f98:	ldr	r0, [r4, #32]
   14f9c:	mov	r2, #5
   14fa0:	str	r5, [r0, #16]
   14fa4:	mov	r0, #0
   14fa8:	ldr	r1, [r4, #32]
   14fac:	str	r0, [r1, #20]
   14fb0:	ldr	r1, [r4, #32]
   14fb4:	strh	r2, [r1, #14]
   14fb8:	ldr	r2, [r4, #28]
   14fbc:	ldr	r3, [r4, #60]	; 0x3c
   14fc0:	ldr	r5, [r4, #64]	; 0x40
   14fc4:	add	r3, r3, r2
   14fc8:	sub	r2, r5, r2
   14fcc:	str	r3, [r4, #16]
   14fd0:	mvn	r3, #3
   14fd4:	cmn	r2, #4
   14fd8:	movcs	r2, r3
   14fdc:	str	r2, [r4, #24]
   14fe0:	str	r3, [r1, #4]
   14fe4:	pop	{r4, r5, fp, pc}

00014fe8 <flatcc_builder_create_offset_vector@@Base>:
   14fe8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14fec:	add	fp, sp, #24
   14ff0:	sub	sp, sp, #8
   14ff4:	mov	r8, r1
   14ff8:	mov	r1, #4
   14ffc:	mov	r6, r2
   15000:	mov	r4, r0
   15004:	mov	r5, #4
   15008:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   1500c:	mov	r7, #0
   15010:	cmp	r0, #0
   15014:	beq	15024 <flatcc_builder_create_offset_vector@@Base+0x3c>
   15018:	mov	r0, r7
   1501c:	sub	sp, fp, #24
   15020:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15024:	ldr	r0, [r4, #32]
   15028:	mov	r1, #0
   1502c:	str	r5, [r0, #16]
   15030:	ldr	r0, [r4, #32]
   15034:	str	r1, [r0, #20]
   15038:	mov	r1, #5
   1503c:	ldr	r0, [r4, #32]
   15040:	strh	r1, [r0, #14]
   15044:	ldr	r1, [r4, #28]
   15048:	ldr	r2, [r4, #60]	; 0x3c
   1504c:	ldr	r3, [r4, #64]	; 0x40
   15050:	add	r2, r2, r1
   15054:	sub	r1, r3, r1
   15058:	str	r2, [r4, #16]
   1505c:	mvn	r2, #3
   15060:	cmn	r1, #4
   15064:	movcs	r1, r2
   15068:	str	r1, [r4, #24]
   1506c:	str	r2, [r0, #4]
   15070:	ldr	r1, [r0, #20]
   15074:	adds	r1, r1, r6
   15078:	cmpcc	r1, #1073741824	; 0x40000000
   1507c:	bcc	150a0 <flatcc_builder_create_offset_vector@@Base+0xb8>
   15080:	movw	r0, #39269	; 0x9965
   15084:	movw	r1, #34998	; 0x88b6
   15088:	movw	r3, #39296	; 0x9980
   1508c:	mov	r2, #892	; 0x37c
   15090:	movt	r0, #1
   15094:	movt	r1, #1
   15098:	movt	r3, #1
   1509c:	bl	12498 <__assert_fail@plt>
   150a0:	str	r1, [r0, #20]
   150a4:	ldr	r5, [r4, #20]
   150a8:	ldr	r0, [r4, #24]
   150ac:	add	r1, r5, r6, lsl #2
   150b0:	cmp	r1, r0
   150b4:	str	r1, [r4, #20]
   150b8:	bcs	1518c <flatcc_builder_create_offset_vector@@Base+0x1a4>
   150bc:	ldr	r0, [r4, #16]
   150c0:	adds	r0, r0, r5
   150c4:	beq	151f8 <flatcc_builder_create_offset_vector@@Base+0x210>
   150c8:	lsl	r2, r6, #2
   150cc:	mov	r1, r8
   150d0:	bl	123e4 <memcpy@plt>
   150d4:	ldr	r0, [r4, #32]
   150d8:	ldrh	r1, [r0, #14]
   150dc:	cmp	r1, #5
   150e0:	bne	15208 <flatcc_builder_create_offset_vector@@Base+0x220>
   150e4:	ldr	r2, [r0, #20]
   150e8:	ldr	r1, [r4, #16]
   150ec:	mov	r0, r4
   150f0:	mov	r3, #0
   150f4:	mov	r7, #0
   150f8:	bl	16268 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   150fc:	cmp	r0, #0
   15100:	beq	15018 <flatcc_builder_create_offset_vector@@Base+0x30>
   15104:	mov	r5, r0
   15108:	ldr	r0, [r4, #16]
   1510c:	ldr	r2, [r4, #20]
   15110:	mov	r1, #0
   15114:	bl	12468 <memset@plt>
   15118:	ldr	r0, [r4, #32]
   1511c:	ldr	r1, [r4, #60]	; 0x3c
   15120:	ldr	r2, [r4, #64]	; 0x40
   15124:	ldr	r3, [r0, #8]
   15128:	str	r3, [r4, #20]
   1512c:	ldr	r3, [r0]
   15130:	str	r3, [r4, #28]
   15134:	add	r1, r1, r3
   15138:	ldr	r7, [r0, #4]
   1513c:	str	r1, [r4, #16]
   15140:	sub	r1, r2, r3
   15144:	cmp	r1, r7
   15148:	movhi	r1, r7
   1514c:	mov	r7, r5
   15150:	str	r1, [r4, #24]
   15154:	ldrh	r1, [r4, #130]	; 0x82
   15158:	ldrh	r2, [r4, #128]	; 0x80
   1515c:	cmp	r2, r1
   15160:	strhcc	r1, [r4, #128]	; 0x80
   15164:	ldrh	r1, [r0, #12]
   15168:	sub	r0, r0, #36	; 0x24
   1516c:	str	r0, [r4, #32]
   15170:	strh	r1, [r4, #130]	; 0x82
   15174:	ldr	r0, [r4, #156]	; 0x9c
   15178:	sub	r0, r0, #1
   1517c:	str	r0, [r4, #156]	; 0x9c
   15180:	mov	r0, r7
   15184:	sub	sp, fp, #24
   15188:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1518c:	ldr	r2, [r4, #28]
   15190:	ldr	r0, [r4, #40]	; 0x28
   15194:	ldr	r7, [r4, #48]	; 0x30
   15198:	mov	r3, #1
   1519c:	str	r3, [sp]
   151a0:	mov	r3, #1
   151a4:	add	r1, r1, r2
   151a8:	add	r2, r1, #1
   151ac:	add	r1, r4, #60	; 0x3c
   151b0:	blx	r7
   151b4:	mov	r7, #0
   151b8:	cmp	r0, #0
   151bc:	bne	15018 <flatcc_builder_create_offset_vector@@Base+0x30>
   151c0:	ldr	r1, [r4, #28]
   151c4:	ldr	r0, [r4, #60]	; 0x3c
   151c8:	ldr	r3, [r4, #64]	; 0x40
   151cc:	ldr	r2, [r4, #32]
   151d0:	add	r0, r0, r1
   151d4:	sub	r1, r3, r1
   151d8:	mvn	r3, #3
   151dc:	cmn	r1, #4
   151e0:	str	r0, [r4, #16]
   151e4:	movcs	r1, r3
   151e8:	str	r1, [r4, #24]
   151ec:	str	r3, [r2, #4]
   151f0:	adds	r0, r0, r5
   151f4:	bne	150c8 <flatcc_builder_create_offset_vector@@Base+0xe0>
   151f8:	mov	r7, #0
   151fc:	mov	r0, r7
   15200:	sub	sp, fp, #24
   15204:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15208:	movw	r0, #36050	; 0x8cd2
   1520c:	movw	r1, #34998	; 0x88b6
   15210:	movw	r3, #37633	; 0x9301
   15214:	movw	r2, #1480	; 0x5c8
   15218:	movt	r0, #1
   1521c:	movt	r1, #1
   15220:	movt	r3, #1
   15224:	bl	12498 <__assert_fail@plt>

00015228 <flatcc_builder_end_offset_vector@@Base>:
   15228:	push	{r4, r5, fp, lr}
   1522c:	add	fp, sp, #8
   15230:	mov	r4, r0
   15234:	ldr	r0, [r0, #32]
   15238:	ldrh	r1, [r0, #14]
   1523c:	cmp	r1, #5
   15240:	bne	152e0 <flatcc_builder_end_offset_vector@@Base+0xb8>
   15244:	ldr	r2, [r0, #20]
   15248:	ldr	r1, [r4, #16]
   1524c:	mov	r0, r4
   15250:	mov	r3, #0
   15254:	bl	16268 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   15258:	mov	r5, r0
   1525c:	cmp	r0, #0
   15260:	beq	152d8 <flatcc_builder_end_offset_vector@@Base+0xb0>
   15264:	ldr	r0, [r4, #16]
   15268:	ldr	r2, [r4, #20]
   1526c:	mov	r1, #0
   15270:	bl	12468 <memset@plt>
   15274:	ldr	r0, [r4, #32]
   15278:	ldr	r1, [r4, #60]	; 0x3c
   1527c:	ldr	ip, [r4, #64]	; 0x40
   15280:	ldr	r3, [r0, #8]
   15284:	str	r3, [r4, #20]
   15288:	ldr	r3, [r0]
   1528c:	str	r3, [r4, #28]
   15290:	add	r1, r1, r3
   15294:	ldr	r2, [r0, #4]
   15298:	str	r1, [r4, #16]
   1529c:	sub	r1, ip, r3
   152a0:	cmp	r1, r2
   152a4:	movhi	r1, r2
   152a8:	str	r1, [r4, #24]
   152ac:	ldrh	r1, [r4, #130]	; 0x82
   152b0:	ldrh	r2, [r4, #128]	; 0x80
   152b4:	cmp	r2, r1
   152b8:	strhcc	r1, [r4, #128]	; 0x80
   152bc:	ldrh	r1, [r0, #12]
   152c0:	sub	r0, r0, #36	; 0x24
   152c4:	str	r0, [r4, #32]
   152c8:	strh	r1, [r4, #130]	; 0x82
   152cc:	ldr	r0, [r4, #156]	; 0x9c
   152d0:	sub	r0, r0, #1
   152d4:	str	r0, [r4, #156]	; 0x9c
   152d8:	mov	r0, r5
   152dc:	pop	{r4, r5, fp, pc}
   152e0:	movw	r0, #36050	; 0x8cd2
   152e4:	movw	r1, #34998	; 0x88b6
   152e8:	movw	r3, #37633	; 0x9301
   152ec:	movw	r2, #1480	; 0x5c8
   152f0:	movt	r0, #1
   152f4:	movt	r1, #1
   152f8:	movt	r3, #1
   152fc:	bl	12498 <__assert_fail@plt>

00015300 <flatcc_builder_start_string@@Base>:
   15300:	push	{r4, r5, fp, lr}
   15304:	add	fp, sp, #8
   15308:	mov	r1, #1
   1530c:	mov	r4, r0
   15310:	mov	r5, #1
   15314:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   15318:	mov	r1, r0
   1531c:	mvn	r0, #0
   15320:	cmp	r1, #0
   15324:	popne	{r4, r5, fp, pc}
   15328:	ldr	r0, [r4, #32]
   1532c:	mov	r2, #6
   15330:	str	r5, [r0, #16]
   15334:	mov	r0, #0
   15338:	ldr	r1, [r4, #32]
   1533c:	str	r0, [r1, #20]
   15340:	ldr	r1, [r4, #32]
   15344:	strh	r2, [r1, #14]
   15348:	ldr	r2, [r4, #28]
   1534c:	ldr	r3, [r4, #60]	; 0x3c
   15350:	ldr	r5, [r4, #64]	; 0x40
   15354:	add	r3, r3, r2
   15358:	sub	r2, r5, r2
   1535c:	str	r3, [r4, #16]
   15360:	mvn	r3, #3
   15364:	cmn	r2, #4
   15368:	movcs	r2, r3
   1536c:	str	r2, [r4, #24]
   15370:	str	r3, [r1, #4]
   15374:	pop	{r4, r5, fp, pc}

00015378 <flatcc_builder_reserve_table@@Base>:
   15378:	push	{r4, r5, r6, sl, fp, lr}
   1537c:	add	fp, sp, #16
   15380:	sub	sp, sp, #8
   15384:	cmn	r1, #1
   15388:	ble	15460 <flatcc_builder_reserve_table@@Base+0xe8>
   1538c:	mov	r4, r0
   15390:	ldr	r0, [r0, #32]
   15394:	mov	r5, r1
   15398:	ldr	r1, [r4, #56]	; 0x38
   1539c:	ldrh	r2, [r0, #28]
   153a0:	ldr	r0, [r0, #16]
   153a4:	add	r6, r0, r2, lsl #1
   153a8:	add	r0, r6, r5, lsl #1
   153ac:	add	r2, r0, #4
   153b0:	cmp	r2, r1
   153b4:	bls	153dc <flatcc_builder_reserve_table@@Base+0x64>
   153b8:	ldr	r0, [r4, #40]	; 0x28
   153bc:	ldr	ip, [r4, #48]	; 0x30
   153c0:	mov	r3, #0
   153c4:	add	r1, r4, #52	; 0x34
   153c8:	str	r3, [sp]
   153cc:	mov	r3, #1
   153d0:	blx	ip
   153d4:	cmp	r0, #0
   153d8:	bne	15480 <flatcc_builder_reserve_table@@Base+0x108>
   153dc:	ldr	r0, [r4, #52]	; 0x34
   153e0:	adds	r0, r0, r6
   153e4:	str	r0, [r4, #4]
   153e8:	beq	15454 <flatcc_builder_reserve_table@@Base+0xdc>
   153ec:	add	r0, r0, #4
   153f0:	lsl	r1, r5, #1
   153f4:	str	r0, [r4, #4]
   153f8:	ldr	r0, [r4, #32]
   153fc:	ldr	r3, [r4, #80]	; 0x50
   15400:	ldr	r5, [r0, #20]
   15404:	orr	r0, r1, #1
   15408:	add	r2, r5, r0
   1540c:	cmp	r2, r3
   15410:	bls	15438 <flatcc_builder_reserve_table@@Base+0xc0>
   15414:	ldr	r0, [r4, #40]	; 0x28
   15418:	ldr	r6, [r4, #48]	; 0x30
   1541c:	mov	r3, #3
   15420:	add	r1, r4, #76	; 0x4c
   15424:	str	r3, [sp]
   15428:	mov	r3, #0
   1542c:	blx	r6
   15430:	cmp	r0, #0
   15434:	bne	15480 <flatcc_builder_reserve_table@@Base+0x108>
   15438:	ldr	r0, [r4, #76]	; 0x4c
   1543c:	adds	r0, r0, r5
   15440:	str	r0, [r4]
   15444:	mov	r0, #0
   15448:	mvneq	r0, #0
   1544c:	sub	sp, fp, #16
   15450:	pop	{r4, r5, r6, sl, fp, pc}
   15454:	mvn	r0, #0
   15458:	sub	sp, fp, #16
   1545c:	pop	{r4, r5, r6, sl, fp, pc}
   15460:	movw	r0, #36889	; 0x9019
   15464:	movw	r1, #34998	; 0x88b6
   15468:	movw	r3, #36824	; 0x8fd8
   1546c:	movw	r2, #1065	; 0x429
   15470:	movt	r0, #1
   15474:	movt	r1, #1
   15478:	movt	r3, #1
   1547c:	bl	12498 <__assert_fail@plt>
   15480:	movw	r0, #39516	; 0x9a5c
   15484:	movw	r1, #34998	; 0x88b6
   15488:	movw	r3, #39062	; 0x9896
   1548c:	mov	r2, #308	; 0x134
   15490:	movt	r0, #1
   15494:	movt	r1, #1
   15498:	movt	r3, #1
   1549c:	bl	12498 <__assert_fail@plt>

000154a0 <flatcc_builder_start_table@@Base>:
   154a0:	push	{r4, r5, r6, r7, fp, lr}
   154a4:	add	fp, sp, #16
   154a8:	sub	sp, sp, #8
   154ac:	mov	r6, r1
   154b0:	mov	r1, #4
   154b4:	mov	r4, r0
   154b8:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   154bc:	mvn	r5, #0
   154c0:	cmp	r0, #0
   154c4:	beq	154d4 <flatcc_builder_start_table@@Base+0x34>
   154c8:	mov	r0, r5
   154cc:	sub	sp, fp, #16
   154d0:	pop	{r4, r5, r6, r7, fp, pc}
   154d4:	mov	r1, r4
   154d8:	ldr	r2, [r4, #4]
   154dc:	ldr	r3, [r4, #32]
   154e0:	ldr	r0, [r1, #52]!	; 0x34
   154e4:	sub	r0, r2, r0
   154e8:	str	r0, [r3, #16]
   154ec:	ldr	r0, [r4]
   154f0:	ldr	r3, [r4, #76]	; 0x4c
   154f4:	ldr	r2, [r4, #32]
   154f8:	sub	r0, r0, r3
   154fc:	mov	r3, #0
   15500:	str	r0, [r2, #20]
   15504:	ldr	r0, [r4, #12]
   15508:	ldr	r2, [r4, #32]
   1550c:	str	r0, [r2, #24]
   15510:	ldr	r0, [r4, #32]
   15514:	ldrh	r2, [r4, #8]
   15518:	strh	r2, [r0, #28]
   1551c:	movw	r0, #15186	; 0x3b52
   15520:	strh	r3, [r4, #8]
   15524:	mov	r2, #3
   15528:	movt	r0, #12137	; 0x2f69
   1552c:	str	r0, [r4, #12]
   15530:	ldr	r0, [r4, #32]
   15534:	strh	r2, [r0, #14]
   15538:	ldrh	r2, [r0, #28]
   1553c:	ldr	r0, [r0, #16]
   15540:	add	r7, r0, r2, lsl #1
   15544:	add	r0, r7, r6, lsl #1
   15548:	add	r2, r0, #4
   1554c:	ldr	r0, [r4, #56]	; 0x38
   15550:	cmp	r2, r0
   15554:	bls	15574 <flatcc_builder_start_table@@Base+0xd4>
   15558:	ldr	r0, [r4, #40]	; 0x28
   1555c:	ldr	ip, [r4, #48]	; 0x30
   15560:	str	r3, [sp]
   15564:	mov	r3, #1
   15568:	blx	ip
   1556c:	cmp	r0, #0
   15570:	bne	15620 <flatcc_builder_start_table@@Base+0x180>
   15574:	ldr	r0, [r4, #52]	; 0x34
   15578:	adds	r0, r0, r7
   1557c:	str	r0, [r4, #4]
   15580:	beq	154c8 <flatcc_builder_start_table@@Base+0x28>
   15584:	add	r0, r0, #4
   15588:	lsl	r1, r6, #1
   1558c:	str	r0, [r4, #4]
   15590:	ldr	r0, [r4, #32]
   15594:	ldr	r3, [r4, #80]	; 0x50
   15598:	ldr	r6, [r0, #20]
   1559c:	orr	r0, r1, #1
   155a0:	add	r2, r6, r0
   155a4:	cmp	r2, r3
   155a8:	bls	155d0 <flatcc_builder_start_table@@Base+0x130>
   155ac:	ldr	r0, [r4, #40]	; 0x28
   155b0:	ldr	r7, [r4, #48]	; 0x30
   155b4:	mov	r3, #3
   155b8:	add	r1, r4, #76	; 0x4c
   155bc:	str	r3, [sp]
   155c0:	mov	r3, #0
   155c4:	blx	r7
   155c8:	cmp	r0, #0
   155cc:	bne	15620 <flatcc_builder_start_table@@Base+0x180>
   155d0:	ldr	r0, [r4, #76]	; 0x4c
   155d4:	adds	r0, r0, r6
   155d8:	str	r0, [r4]
   155dc:	beq	154c8 <flatcc_builder_start_table@@Base+0x28>
   155e0:	ldr	r0, [r4, #28]
   155e4:	ldr	r2, [r4, #60]	; 0x3c
   155e8:	ldr	r3, [r4, #64]	; 0x40
   155ec:	ldr	r1, [r4, #32]
   155f0:	mov	r5, #0
   155f4:	add	r2, r2, r0
   155f8:	sub	r0, r3, r0
   155fc:	str	r2, [r4, #16]
   15600:	movw	r2, #65532	; 0xfffc
   15604:	cmp	r0, r2
   15608:	movcs	r0, r2
   1560c:	str	r0, [r4, #24]
   15610:	str	r2, [r1, #4]
   15614:	mov	r0, r5
   15618:	sub	sp, fp, #16
   1561c:	pop	{r4, r5, r6, r7, fp, pc}
   15620:	movw	r0, #39516	; 0x9a5c
   15624:	movw	r1, #34998	; 0x88b6
   15628:	movw	r3, #39062	; 0x9896
   1562c:	mov	r2, #308	; 0x134
   15630:	movt	r0, #1
   15634:	movt	r1, #1
   15638:	movt	r3, #1
   1563c:	bl	12498 <__assert_fail@plt>

00015640 <flatcc_builder_create_vtable@@Base>:
   15640:	push	{r4, r5, fp, lr}
   15644:	add	fp, sp, #8
   15648:	sub	sp, sp, #80	; 0x50
   1564c:	mov	r3, r2
   15650:	mov	r2, #0
   15654:	mov	r4, r0
   15658:	cmp	r3, #0
   1565c:	str	r2, [sp, #12]
   15660:	str	r2, [sp, #8]
   15664:	movne	r2, #1
   15668:	strne	r3, [sp, #20]
   1566c:	strne	r1, [sp, #16]
   15670:	strne	r3, [sp, #8]
   15674:	strne	r2, [sp, #12]
   15678:	ldr	r0, [r4, #152]	; 0x98
   1567c:	cmp	r0, #0
   15680:	bne	15690 <flatcc_builder_create_vtable@@Base+0x50>
   15684:	ldr	r0, [r4, #180]	; 0xb4
   15688:	cmp	r0, #0
   1568c:	beq	156ec <flatcc_builder_create_vtable@@Base+0xac>
   15690:	cmp	r3, #0
   15694:	beq	15730 <flatcc_builder_create_vtable@@Base+0xf0>
   15698:	ldr	r0, [r4, #136]	; 0x88
   1569c:	ldr	ip, [r4, #44]	; 0x2c
   156a0:	add	r1, sp, #8
   156a4:	add	r1, r1, #8
   156a8:	sub	r5, r0, r3
   156ac:	ldr	r0, [r4, #36]	; 0x24
   156b0:	str	r3, [sp]
   156b4:	mov	r3, r5
   156b8:	blx	ip
   156bc:	cmp	r0, #0
   156c0:	bne	15750 <flatcc_builder_create_vtable@@Base+0x110>
   156c4:	cmp	r5, #0
   156c8:	str	r5, [r4, #136]	; 0x88
   156cc:	beq	156e0 <flatcc_builder_create_vtable@@Base+0xa0>
   156d0:	add	r1, r5, #1
   156d4:	mov	r0, r1
   156d8:	sub	sp, fp, #8
   156dc:	pop	{r4, r5, fp, pc}
   156e0:	mov	r0, #0
   156e4:	sub	sp, fp, #8
   156e8:	pop	{r4, r5, fp, pc}
   156ec:	ldr	r5, [r4, #140]	; 0x8c
   156f0:	ldr	r0, [r4, #36]	; 0x24
   156f4:	ldr	ip, [r4, #44]	; 0x2c
   156f8:	add	r1, r5, r3
   156fc:	str	r1, [r4, #140]	; 0x8c
   15700:	add	r1, sp, #8
   15704:	str	r3, [sp]
   15708:	mov	r3, r5
   1570c:	add	r1, r1, #8
   15710:	blx	ip
   15714:	cmp	r0, #0
   15718:	bne	15770 <flatcc_builder_create_vtable@@Base+0x130>
   1571c:	adds	r1, r5, #1
   15720:	mov	r0, #0
   15724:	movcc	r0, r1
   15728:	sub	sp, fp, #8
   1572c:	pop	{r4, r5, fp, pc}
   15730:	movw	r0, #39516	; 0x9a5c
   15734:	movw	r1, #34998	; 0x88b6
   15738:	movw	r3, #39195	; 0x991b
   1573c:	movw	r2, #647	; 0x287
   15740:	movt	r0, #1
   15744:	movt	r1, #1
   15748:	movt	r3, #1
   1574c:	bl	12498 <__assert_fail@plt>
   15750:	movw	r0, #39516	; 0x9a5c
   15754:	movw	r1, #34998	; 0x88b6
   15758:	movw	r3, #39195	; 0x991b
   1575c:	movw	r2, #651	; 0x28b
   15760:	movt	r0, #1
   15764:	movt	r1, #1
   15768:	movt	r3, #1
   1576c:	bl	12498 <__assert_fail@plt>
   15770:	movw	r0, #39516	; 0x9a5c
   15774:	movw	r1, #34998	; 0x88b6
   15778:	movw	r3, #39383	; 0x99d7
   1577c:	movw	r2, #677	; 0x2a5
   15780:	movt	r0, #1
   15784:	movt	r1, #1
   15788:	movt	r3, #1
   1578c:	bl	12498 <__assert_fail@plt>

00015790 <flatcc_builder_create_cached_vtable@@Base>:
   15790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15794:	add	fp, sp, #28
   15798:	sub	sp, sp, #20
   1579c:	mov	sl, r0
   157a0:	ldr	r0, [r0, #116]	; 0x74
   157a4:	mov	r8, r3
   157a8:	mov	r5, r2
   157ac:	str	r1, [sp, #16]
   157b0:	cmp	r0, #0
   157b4:	beq	15858 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   157b8:	ldr	r1, [sl, #92]	; 0x5c
   157bc:	rsb	r0, r0, #32
   157c0:	lsr	r0, r8, r0
   157c4:	add	r6, r1, r0, lsl #2
   157c8:	cmp	r6, #0
   157cc:	beq	1591c <flatcc_builder_create_cached_vtable@@Base+0x18c>
   157d0:	ldr	r7, [r6]
   157d4:	str	r6, [sp, #12]
   157d8:	cmp	r7, #0
   157dc:	beq	1592c <flatcc_builder_create_cached_vtable@@Base+0x19c>
   157e0:	ldr	r4, [sl, #68]	; 0x44
   157e4:	ldr	r8, [sl, #100]	; 0x64
   157e8:	mov	r0, #0
   157ec:	str	r0, [sp, #8]
   157f0:	b	15804 <flatcc_builder_create_cached_vtable@@Base+0x74>
   157f4:	ldr	r7, [r9, #12]!
   157f8:	mov	r6, r9
   157fc:	cmp	r7, #0
   15800:	beq	15914 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15804:	add	r9, r8, r7
   15808:	mov	r1, r4
   1580c:	ldr	r0, [r9, #8]
   15810:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15814:	cmp	r0, r5
   15818:	bne	157f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   1581c:	ldr	r0, [sp, #16]
   15820:	mov	r2, r5
   15824:	bl	12444 <bcmp@plt>
   15828:	cmp	r0, #0
   1582c:	bne	157f4 <flatcc_builder_create_cached_vtable@@Base+0x64>
   15830:	ldr	r0, [sl, #152]	; 0x98
   15834:	ldr	r1, [r9, #4]
   15838:	cmp	r1, r0
   1583c:	beq	15a98 <flatcc_builder_create_cached_vtable@@Base+0x308>
   15840:	mov	r6, r9
   15844:	mov	r0, r9
   15848:	ldr	r7, [r6, #12]!
   1584c:	cmp	r7, #0
   15850:	bne	157ec <flatcc_builder_create_cached_vtable@@Base+0x5c>
   15854:	b	15930 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   15858:	ldr	r0, [sl, #124]	; 0x7c
   1585c:	cmp	r0, #0
   15860:	bne	15aec <flatcc_builder_create_cached_vtable@@Base+0x35c>
   15864:	ldr	r0, [sl, #104]	; 0x68
   15868:	add	r7, sl, #100	; 0x64
   1586c:	cmp	r0, #15
   15870:	bhi	1589c <flatcc_builder_create_cached_vtable@@Base+0x10c>
   15874:	ldr	r0, [sl, #40]	; 0x28
   15878:	ldr	r6, [sl, #48]	; 0x30
   1587c:	mov	r1, #6
   15880:	mov	r2, #16
   15884:	mov	r3, #0
   15888:	str	r1, [sp]
   1588c:	mov	r1, r7
   15890:	blx	r6
   15894:	cmp	r0, #0
   15898:	bne	15acc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   1589c:	ldr	r0, [r7]
   158a0:	mov	r7, #0
   158a4:	cmp	r0, #0
   158a8:	beq	159d0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   158ac:	mov	r0, #16
   158b0:	mov	r2, #5
   158b4:	add	r1, sl, #92	; 0x5c
   158b8:	mov	r3, #1
   158bc:	mov	r4, #256	; 0x100
   158c0:	str	r0, [sl, #124]	; 0x7c
   158c4:	ldr	r0, [sl, #40]	; 0x28
   158c8:	ldr	r6, [sl, #48]	; 0x30
   158cc:	str	r2, [sp]
   158d0:	mov	r2, #256	; 0x100
   158d4:	blx	r6
   158d8:	cmp	r0, #0
   158dc:	bne	159d0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   158e0:	ldr	r0, [sl, #96]	; 0x60
   158e4:	mov	r1, r4
   158e8:	lsl	r4, r4, #1
   158ec:	cmp	r0, r1, lsl #1
   158f0:	bcs	158e4 <flatcc_builder_create_cached_vtable@@Base+0x154>
   158f4:	lsr	r1, r1, #2
   158f8:	mvn	r0, #0
   158fc:	mov	r2, #1
   15900:	add	r0, r0, #1
   15904:	cmp	r1, r2, lsl r0
   15908:	bhi	15900 <flatcc_builder_create_cached_vtable@@Base+0x170>
   1590c:	str	r0, [sl, #116]	; 0x74
   15910:	b	157b8 <flatcc_builder_create_cached_vtable@@Base+0x28>
   15914:	ldr	r9, [sp, #8]
   15918:	b	15930 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   1591c:	mov	r7, #0
   15920:	mov	r0, r7
   15924:	sub	sp, fp, #28
   15928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1592c:	mov	r9, #0
   15930:	ldr	r4, [sl, #124]	; 0x7c
   15934:	ldr	r0, [sl, #104]	; 0x68
   15938:	add	r7, sl, #100	; 0x64
   1593c:	add	r2, r4, #16
   15940:	cmp	r2, r0
   15944:	bls	1596c <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   15948:	ldr	r0, [sl, #40]	; 0x28
   1594c:	ldr	r6, [sl, #48]	; 0x30
   15950:	mov	r1, #6
   15954:	mov	r3, #0
   15958:	str	r1, [sp]
   1595c:	mov	r1, r7
   15960:	blx	r6
   15964:	cmp	r0, #0
   15968:	bne	15acc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   1596c:	ldr	r0, [r7]
   15970:	mov	r7, #0
   15974:	adds	r4, r0, r4
   15978:	beq	159d0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   1597c:	ldr	r0, [sl, #124]	; 0x7c
   15980:	ldr	r1, [sl, #152]	; 0x98
   15984:	add	r2, r0, #16
   15988:	str	r2, [sl, #124]	; 0x7c
   1598c:	ldr	r2, [sp, #12]
   15990:	str	r1, [r4, #4]
   15994:	ldr	r1, [r2]
   15998:	str	r1, [r4, #12]
   1599c:	ldr	r1, [sp, #16]
   159a0:	str	r0, [r2]
   159a4:	mov	r0, sl
   159a8:	mov	r2, r5
   159ac:	bl	15640 <flatcc_builder_create_vtable@@Base>
   159b0:	cmp	r0, #0
   159b4:	str	r0, [r4]
   159b8:	beq	159d0 <flatcc_builder_create_cached_vtable@@Base+0x240>
   159bc:	cmp	r9, #0
   159c0:	beq	159dc <flatcc_builder_create_cached_vtable@@Base+0x24c>
   159c4:	ldr	r0, [r9, #8]
   159c8:	str	r0, [r4, #8]
   159cc:	ldr	r7, [r4]
   159d0:	mov	r0, r7
   159d4:	sub	sp, fp, #28
   159d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159dc:	ldr	r6, [sl, #120]	; 0x78
   159e0:	ldr	r0, [sl, #172]	; 0xac
   159e4:	add	r2, r6, r5
   159e8:	cmp	r0, #0
   159ec:	beq	15a28 <flatcc_builder_create_cached_vtable@@Base+0x298>
   159f0:	cmp	r0, r2
   159f4:	bcs	15a28 <flatcc_builder_create_cached_vtable@@Base+0x298>
   159f8:	ldr	r0, [sl, #116]	; 0x74
   159fc:	cmp	r0, #0
   15a00:	beq	159cc <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15a04:	ldr	r0, [sl, #92]	; 0x5c
   15a08:	ldr	r2, [sl, #96]	; 0x60
   15a0c:	mov	r1, #0
   15a10:	mov	r5, #0
   15a14:	bl	12468 <memset@plt>
   15a18:	mov	r0, #16
   15a1c:	str	r5, [sl, #120]	; 0x78
   15a20:	str	r0, [sl, #124]	; 0x7c
   15a24:	b	159cc <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15a28:	ldr	r0, [sl, #72]	; 0x48
   15a2c:	add	r7, sl, #68	; 0x44
   15a30:	cmp	r2, r0
   15a34:	bls	15a5c <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   15a38:	ldr	r0, [sl, #40]	; 0x28
   15a3c:	ldr	ip, [sl, #48]	; 0x30
   15a40:	mov	r1, #2
   15a44:	mov	r3, #0
   15a48:	str	r1, [sp]
   15a4c:	mov	r1, r7
   15a50:	blx	ip
   15a54:	cmp	r0, #0
   15a58:	bne	15acc <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15a5c:	ldr	r0, [r7]
   15a60:	adds	r0, r0, r6
   15a64:	beq	15a88 <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   15a68:	ldr	r1, [sl, #120]	; 0x78
   15a6c:	mov	r2, r5
   15a70:	str	r1, [r4, #8]
   15a74:	add	r1, r1, r5
   15a78:	str	r1, [sl, #120]	; 0x78
   15a7c:	ldr	r1, [sp, #16]
   15a80:	bl	123e4 <memcpy@plt>
   15a84:	b	159cc <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15a88:	mvn	r7, #0
   15a8c:	mov	r0, r7
   15a90:	sub	sp, fp, #28
   15a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a98:	ldr	r0, [sp, #12]
   15a9c:	cmp	r6, r0
   15aa0:	beq	15abc <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15aa4:	mov	r1, r0
   15aa8:	ldr	r0, [r9, #12]
   15aac:	str	r0, [r6]
   15ab0:	ldr	r0, [r1]
   15ab4:	str	r0, [r9, #12]
   15ab8:	str	r7, [r1]
   15abc:	ldr	r7, [r9]
   15ac0:	mov	r0, r7
   15ac4:	sub	sp, fp, #28
   15ac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15acc:	movw	r0, #39516	; 0x9a5c
   15ad0:	movw	r1, #34998	; 0x88b6
   15ad4:	movw	r3, #39062	; 0x9896
   15ad8:	mov	r2, #308	; 0x134
   15adc:	movt	r0, #1
   15ae0:	movt	r1, #1
   15ae4:	movt	r3, #1
   15ae8:	bl	12498 <__assert_fail@plt>
   15aec:	movw	r0, #39456	; 0x9a20
   15af0:	movw	r1, #34998	; 0x88b6
   15af4:	movw	r3, #39471	; 0x9a2f
   15af8:	movw	r2, #342	; 0x156
   15afc:	movt	r0, #1
   15b00:	movt	r1, #1
   15b04:	movt	r3, #1
   15b08:	bl	12498 <__assert_fail@plt>

00015b0c <flatcc_builder_create_table@@Base>:
   15b0c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b10:	add	fp, sp, #24
   15b14:	sub	sp, sp, #80	; 0x50
   15b18:	ldr	r5, [fp, #12]
   15b1c:	cmn	r5, #1
   15b20:	ble	15c6c <flatcc_builder_create_table@@Base+0x160>
   15b24:	ldr	ip, [fp, #16]
   15b28:	tst	ip, #1
   15b2c:	beq	15c8c <flatcc_builder_create_table@@Base+0x180>
   15b30:	mov	r8, r0
   15b34:	ldrh	r0, [r0, #128]	; 0x80
   15b38:	cmp	r3, #4
   15b3c:	movls	r3, #4
   15b40:	cmp	r0, r3
   15b44:	strhcc	r3, [r8, #128]	; 0x80
   15b48:	cmp	r5, #1
   15b4c:	ldr	r0, [r8, #136]	; 0x88
   15b50:	sub	r4, r0, r2
   15b54:	sub	r0, r3, #1
   15b58:	and	r0, r4, r0
   15b5c:	sub	r4, r4, #4
   15b60:	add	r3, ip, r0
   15b64:	sub	r3, r4, r3
   15b68:	add	r3, r3, #1
   15b6c:	str	r3, [fp, #-28]	; 0xffffffe4
   15b70:	blt	15ba0 <flatcc_builder_create_table@@Base+0x94>
   15b74:	ldr	r3, [fp, #8]
   15b78:	sub	ip, r4, r0
   15b7c:	mvn	r4, #3
   15b80:	sub	r4, r4, ip
   15b84:	ldrh	r6, [r3], #2
   15b88:	subs	r5, r5, #1
   15b8c:	ldr	r7, [r6, r1]
   15b90:	add	r7, r4, r7
   15b94:	sub	r7, r7, r6
   15b98:	str	r7, [r6, r1]
   15b9c:	bne	15b84 <flatcc_builder_create_table@@Base+0x78>
   15ba0:	mov	r4, #4
   15ba4:	sub	r3, fp, #28
   15ba8:	cmp	r2, #0
   15bac:	str	r4, [sp, #16]
   15bb0:	str	r3, [sp, #12]
   15bb4:	mov	r3, #1
   15bb8:	str	r4, [sp, #4]
   15bbc:	addne	r4, r2, #4
   15bc0:	str	r3, [sp, #8]
   15bc4:	movne	r3, #2
   15bc8:	strne	r2, [sp, #24]
   15bcc:	strne	r1, [sp, #20]
   15bd0:	strne	r3, [sp, #8]
   15bd4:	strne	r4, [sp, #4]
   15bd8:	cmp	r0, #0
   15bdc:	beq	15c08 <flatcc_builder_create_table@@Base+0xfc>
   15be0:	add	r1, sp, #4
   15be4:	movw	r2, #34468	; 0x86a4
   15be8:	add	r4, r4, r0
   15bec:	add	r1, r1, r3, lsl #3
   15bf0:	movt	r2, #1
   15bf4:	add	r3, r3, #1
   15bf8:	str	r4, [sp, #4]
   15bfc:	str	r2, [r1, #8]
   15c00:	str	r0, [r1, #12]
   15c04:	str	r3, [sp, #8]
   15c08:	cmp	r4, #0
   15c0c:	ble	15cac <flatcc_builder_create_table@@Base+0x1a0>
   15c10:	ldr	r0, [r8, #136]	; 0x88
   15c14:	ldr	r7, [r8, #44]	; 0x2c
   15c18:	add	r1, sp, #4
   15c1c:	mov	r2, r3
   15c20:	add	r1, r1, #8
   15c24:	sub	r5, r0, r4
   15c28:	ldr	r0, [r8, #36]	; 0x24
   15c2c:	str	r4, [sp]
   15c30:	mov	r3, r5
   15c34:	blx	r7
   15c38:	cmp	r0, #0
   15c3c:	streq	r5, [r8, #136]	; 0x88
   15c40:	moveq	r0, r5
   15c44:	subeq	sp, fp, #24
   15c48:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15c4c:	movw	r0, #39516	; 0x9a5c
   15c50:	movw	r1, #34998	; 0x88b6
   15c54:	movw	r3, #39195	; 0x991b
   15c58:	movw	r2, #651	; 0x28b
   15c5c:	movt	r0, #1
   15c60:	movt	r1, #1
   15c64:	movt	r3, #1
   15c68:	bl	12498 <__assert_fail@plt>
   15c6c:	movw	r0, #36882	; 0x9012
   15c70:	movw	r1, #34998	; 0x88b6
   15c74:	movw	r3, #36900	; 0x9024
   15c78:	movw	r2, #1237	; 0x4d5
   15c7c:	movt	r0, #1
   15c80:	movt	r1, #1
   15c84:	movt	r3, #1
   15c88:	bl	12498 <__assert_fail@plt>
   15c8c:	movw	r0, #37056	; 0x90c0
   15c90:	movw	r1, #34998	; 0x88b6
   15c94:	movw	r3, #36900	; 0x9024
   15c98:	movw	r2, #1243	; 0x4db
   15c9c:	movt	r0, #1
   15ca0:	movt	r1, #1
   15ca4:	movt	r3, #1
   15ca8:	bl	12498 <__assert_fail@plt>
   15cac:	movw	r0, #39516	; 0x9a5c
   15cb0:	movw	r1, #34998	; 0x88b6
   15cb4:	movw	r3, #39195	; 0x991b
   15cb8:	movw	r2, #647	; 0x287
   15cbc:	movt	r0, #1
   15cc0:	movt	r1, #1
   15cc4:	movt	r3, #1
   15cc8:	bl	12498 <__assert_fail@plt>

00015ccc <flatcc_builder_check_required_field@@Base>:
   15ccc:	push	{fp, lr}
   15cd0:	mov	fp, sp
   15cd4:	ldr	r2, [r0, #32]
   15cd8:	ldrh	r2, [r2, #14]
   15cdc:	cmp	r2, #3
   15ce0:	bne	15d10 <flatcc_builder_check_required_field@@Base+0x44>
   15ce4:	ldrh	r3, [r0, #8]
   15ce8:	mov	r2, #0
   15cec:	cmp	r3, r1
   15cf0:	bls	15d08 <flatcc_builder_check_required_field@@Base+0x3c>
   15cf4:	ldr	r0, [r0, #4]
   15cf8:	add	r0, r0, r1, lsl #1
   15cfc:	ldrh	r2, [r0]
   15d00:	cmp	r2, #0
   15d04:	movwne	r2, #1
   15d08:	mov	r0, r2
   15d0c:	pop	{fp, pc}
   15d10:	movw	r0, #37067	; 0x90cb
   15d14:	movw	r1, #34998	; 0x88b6
   15d18:	movw	r3, #37110	; 0x90f6
   15d1c:	movw	r2, #1272	; 0x4f8
   15d20:	movt	r0, #1
   15d24:	movt	r1, #1
   15d28:	movt	r3, #1
   15d2c:	bl	12498 <__assert_fail@plt>

00015d30 <flatcc_builder_check_union_field@@Base>:
   15d30:	push	{fp, lr}
   15d34:	mov	fp, sp
   15d38:	mov	r2, r0
   15d3c:	ldr	r0, [r0, #32]
   15d40:	ldrh	r0, [r0, #14]
   15d44:	cmp	r0, #3
   15d48:	bne	15da8 <flatcc_builder_check_union_field@@Base+0x78>
   15d4c:	mov	r0, #0
   15d50:	cmp	r1, #0
   15d54:	beq	15d94 <flatcc_builder_check_union_field@@Base+0x64>
   15d58:	ldrh	r3, [r2, #8]
   15d5c:	cmp	r3, r1
   15d60:	popls	{fp, pc}
   15d64:	ldr	r0, [r2, #4]
   15d68:	add	r0, r0, r1, lsl #1
   15d6c:	ldrh	r1, [r0, #-2]
   15d70:	cmp	r1, #0
   15d74:	beq	15d98 <flatcc_builder_check_union_field@@Base+0x68>
   15d78:	ldr	r2, [r2, #16]
   15d7c:	ldrh	r0, [r0]
   15d80:	ldrb	r1, [r2, r1]
   15d84:	cmp	r1, #0
   15d88:	beq	15d9c <flatcc_builder_check_union_field@@Base+0x6c>
   15d8c:	cmp	r0, #0
   15d90:	movwne	r0, #1
   15d94:	pop	{fp, pc}
   15d98:	ldrh	r0, [r0]
   15d9c:	clz	r0, r0
   15da0:	lsr	r0, r0, #5
   15da4:	pop	{fp, pc}
   15da8:	movw	r0, #37067	; 0x90cb
   15dac:	movw	r1, #34998	; 0x88b6
   15db0:	movw	r3, #37193	; 0x9149
   15db4:	movw	r2, #1279	; 0x4ff
   15db8:	movt	r0, #1
   15dbc:	movt	r1, #1
   15dc0:	movt	r3, #1
   15dc4:	bl	12498 <__assert_fail@plt>

00015dc8 <flatcc_builder_check_required@@Base>:
   15dc8:	push	{fp, lr}
   15dcc:	mov	fp, sp
   15dd0:	mov	r3, r0
   15dd4:	ldr	r0, [r0, #32]
   15dd8:	ldrh	r0, [r0, #14]
   15ddc:	cmp	r0, #3
   15de0:	bne	15e28 <flatcc_builder_check_required@@Base+0x60>
   15de4:	ldrh	ip, [r3, #8]
   15de8:	mov	r0, #0
   15dec:	cmp	ip, r2
   15df0:	poplt	{fp, pc}
   15df4:	cmp	r2, #1
   15df8:	blt	15e20 <flatcc_builder_check_required@@Base+0x58>
   15dfc:	ldr	ip, [r3, #4]
   15e00:	ldrh	r3, [r1]
   15e04:	add	r3, ip, r3, lsl #1
   15e08:	ldrh	r3, [r3]
   15e0c:	cmp	r3, #0
   15e10:	beq	15e24 <flatcc_builder_check_required@@Base+0x5c>
   15e14:	add	r1, r1, #2
   15e18:	subs	r2, r2, #1
   15e1c:	bne	15e00 <flatcc_builder_check_required@@Base+0x38>
   15e20:	mov	r0, #1
   15e24:	pop	{fp, pc}
   15e28:	movw	r0, #37067	; 0x90cb
   15e2c:	movw	r1, #34998	; 0x88b6
   15e30:	movw	r3, #37273	; 0x9199
   15e34:	movw	r2, #1297	; 0x511
   15e38:	movt	r0, #1
   15e3c:	movt	r1, #1
   15e40:	movt	r3, #1
   15e44:	bl	12498 <__assert_fail@plt>

00015e48 <flatcc_builder_end_table@@Base>:
   15e48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e4c:	add	fp, sp, #24
   15e50:	sub	sp, sp, #16
   15e54:	mov	r4, r0
   15e58:	ldr	r0, [r0, #32]
   15e5c:	ldrh	r0, [r0, #14]
   15e60:	cmp	r0, #3
   15e64:	bne	15fe8 <flatcc_builder_end_table@@Base+0x1a0>
   15e68:	ldrh	r0, [r4, #8]
   15e6c:	ldr	r5, [r4, #4]
   15e70:	mov	r1, #4
   15e74:	movw	r2, #31153	; 0x79b1
   15e78:	movt	r2, #40503	; 0x9e37
   15e7c:	add	r0, r1, r0, lsl #1
   15e80:	strh	r0, [r5, #-4]!
   15e84:	ldrh	r1, [r4, #20]
   15e88:	uxth	r6, r0
   15e8c:	add	r1, r1, #4
   15e90:	strh	r1, [r5, #2]
   15e94:	uxth	r1, r1
   15e98:	ldr	r0, [r4, #12]
   15e9c:	eor	r0, r0, r6
   15ea0:	mul	r0, r0, r2
   15ea4:	eor	r0, r0, r1
   15ea8:	mov	r1, r5
   15eac:	mul	r3, r0, r2
   15eb0:	mov	r0, r4
   15eb4:	mov	r2, r6
   15eb8:	str	r3, [r4, #12]
   15ebc:	bl	15790 <flatcc_builder_create_cached_vtable@@Base>
   15ec0:	cmp	r0, #0
   15ec4:	beq	15fd8 <flatcc_builder_end_table@@Base+0x190>
   15ec8:	mov	r7, r0
   15ecc:	mov	r0, r5
   15ed0:	mov	r1, #0
   15ed4:	mov	r2, r6
   15ed8:	mov	r8, #0
   15edc:	bl	12468 <memset@plt>
   15ee0:	ldr	r5, [r4, #32]
   15ee4:	ldr	r0, [r4, #76]	; 0x4c
   15ee8:	ldr	r6, [r4]
   15eec:	ldrh	r3, [r4, #130]	; 0x82
   15ef0:	ldr	r1, [r4, #16]
   15ef4:	ldr	r2, [r4, #20]
   15ef8:	ldr	r5, [r5, #20]
   15efc:	add	r0, r0, r5
   15f00:	sub	r6, r6, r0
   15f04:	asr	r6, r6, #1
   15f08:	stm	sp, {r0, r6, r7}
   15f0c:	mov	r0, r4
   15f10:	bl	15b0c <flatcc_builder_create_table@@Base>
   15f14:	cmp	r0, #0
   15f18:	beq	15fcc <flatcc_builder_end_table@@Base+0x184>
   15f1c:	ldr	r1, [r4, #32]
   15f20:	mov	r5, r0
   15f24:	ldr	r0, [r4, #16]
   15f28:	ldr	r2, [r4, #20]
   15f2c:	ldr	r3, [r4, #52]	; 0x34
   15f30:	ldr	r7, [r1, #24]
   15f34:	str	r7, [r4, #12]
   15f38:	ldrh	r7, [r1, #28]
   15f3c:	strh	r7, [r4, #8]
   15f40:	ldr	r7, [r1, #16]
   15f44:	add	r3, r3, r7
   15f48:	str	r3, [r4, #4]
   15f4c:	ldr	r3, [r4, #76]	; 0x4c
   15f50:	ldr	r1, [r1, #20]
   15f54:	add	r1, r3, r1
   15f58:	str	r1, [r4]
   15f5c:	mov	r1, #0
   15f60:	bl	12468 <memset@plt>
   15f64:	ldr	r0, [r4, #32]
   15f68:	ldr	r1, [r4, #60]	; 0x3c
   15f6c:	ldr	r2, [r4, #64]	; 0x40
   15f70:	mov	r8, r5
   15f74:	ldr	r3, [r0, #8]
   15f78:	str	r3, [r4, #20]
   15f7c:	ldr	r3, [r0]
   15f80:	str	r3, [r4, #28]
   15f84:	add	r1, r1, r3
   15f88:	ldr	r7, [r0, #4]
   15f8c:	str	r1, [r4, #16]
   15f90:	sub	r1, r2, r3
   15f94:	cmp	r1, r7
   15f98:	movhi	r1, r7
   15f9c:	str	r1, [r4, #24]
   15fa0:	ldrh	r1, [r4, #130]	; 0x82
   15fa4:	ldrh	r2, [r4, #128]	; 0x80
   15fa8:	cmp	r2, r1
   15fac:	strhcc	r1, [r4, #128]	; 0x80
   15fb0:	ldrh	r1, [r0, #12]
   15fb4:	sub	r0, r0, #36	; 0x24
   15fb8:	str	r0, [r4, #32]
   15fbc:	strh	r1, [r4, #130]	; 0x82
   15fc0:	ldr	r0, [r4, #156]	; 0x9c
   15fc4:	sub	r0, r0, #1
   15fc8:	str	r0, [r4, #156]	; 0x9c
   15fcc:	mov	r0, r8
   15fd0:	sub	sp, fp, #24
   15fd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fd8:	mov	r8, #0
   15fdc:	mov	r0, r8
   15fe0:	sub	sp, fp, #24
   15fe4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fe8:	movw	r0, #37067	; 0x90cb
   15fec:	movw	r1, #34998	; 0x88b6
   15ff0:	movw	r3, #37363	; 0x91f3
   15ff4:	movw	r2, #1317	; 0x525
   15ff8:	movt	r0, #1
   15ffc:	movt	r1, #1
   16000:	movt	r3, #1
   16004:	bl	12498 <__assert_fail@plt>

00016008 <flatcc_builder_create_vector@@Base>:
   16008:	push	{r4, r5, r6, r7, fp, lr}
   1600c:	add	fp, sp, #16
   16010:	sub	sp, sp, #80	; 0x50
   16014:	mov	r7, r0
   16018:	ldr	r0, [fp, #12]
   1601c:	cmp	r2, r0
   16020:	bhi	1611c <flatcc_builder_create_vector@@Base+0x114>
   16024:	ldr	r0, [fp, #8]
   16028:	mov	r4, r2
   1602c:	ldrh	r2, [r7, #128]	; 0x80
   16030:	mov	r5, #4
   16034:	cmp	r0, #4
   16038:	movls	r0, r5
   1603c:	cmp	r2, r0
   16040:	sub	r2, fp, #20
   16044:	strhcc	r0, [r7, #128]	; 0x80
   16048:	str	r4, [fp, #-20]	; 0xffffffec
   1604c:	sub	r0, r0, #1
   16050:	ldr	ip, [r7, #136]	; 0x88
   16054:	str	r5, [sp, #16]
   16058:	str	r2, [sp, #12]
   1605c:	mov	r2, #1
   16060:	str	r5, [sp, #4]
   16064:	str	r2, [sp, #8]
   16068:	mls	r6, r3, r4, ip
   1606c:	mul	r3, r3, r4
   16070:	cmp	r3, #0
   16074:	and	r0, r6, r0
   16078:	movne	r2, #2
   1607c:	addne	r5, r3, #4
   16080:	strne	r3, [sp, #24]
   16084:	strne	r1, [sp, #20]
   16088:	strne	r2, [sp, #8]
   1608c:	strne	r5, [sp, #4]
   16090:	cmp	r0, #0
   16094:	beq	160c0 <flatcc_builder_create_vector@@Base+0xb8>
   16098:	add	r1, sp, #4
   1609c:	movw	r3, #34468	; 0x86a4
   160a0:	add	r5, r5, r0
   160a4:	add	r1, r1, r2, lsl #3
   160a8:	movt	r3, #1
   160ac:	add	r2, r2, #1
   160b0:	str	r5, [sp, #4]
   160b4:	str	r3, [r1, #8]
   160b8:	str	r0, [r1, #12]
   160bc:	str	r2, [sp, #8]
   160c0:	cmp	r5, #0
   160c4:	ble	1613c <flatcc_builder_create_vector@@Base+0x134>
   160c8:	ldr	r0, [r7, #36]	; 0x24
   160cc:	ldr	r6, [r7, #44]	; 0x2c
   160d0:	add	r1, sp, #4
   160d4:	sub	r4, ip, r5
   160d8:	str	r5, [sp]
   160dc:	add	r1, r1, #8
   160e0:	mov	r3, r4
   160e4:	blx	r6
   160e8:	cmp	r0, #0
   160ec:	streq	r4, [r7, #136]	; 0x88
   160f0:	moveq	r0, r4
   160f4:	subeq	sp, fp, #16
   160f8:	popeq	{r4, r5, r6, r7, fp, pc}
   160fc:	movw	r0, #39516	; 0x9a5c
   16100:	movw	r1, #34998	; 0x88b6
   16104:	movw	r3, #39195	; 0x991b
   16108:	movw	r2, #651	; 0x28b
   1610c:	movt	r0, #1
   16110:	movt	r1, #1
   16114:	movt	r3, #1
   16118:	bl	12498 <__assert_fail@plt>
   1611c:	movw	r0, #37429	; 0x9235
   16120:	movw	r1, #34998	; 0x88b6
   16124:	movw	r3, #37448	; 0x9248
   16128:	movw	r2, #1365	; 0x555
   1612c:	movt	r0, #1
   16130:	movt	r1, #1
   16134:	movt	r3, #1
   16138:	bl	12498 <__assert_fail@plt>
   1613c:	movw	r0, #39516	; 0x9a5c
   16140:	movw	r1, #34998	; 0x88b6
   16144:	movw	r3, #39195	; 0x991b
   16148:	movw	r2, #647	; 0x287
   1614c:	movt	r0, #1
   16150:	movt	r1, #1
   16154:	movt	r3, #1
   16158:	bl	12498 <__assert_fail@plt>

0001615c <flatcc_builder_end_vector@@Base>:
   1615c:	push	{r4, r5, fp, lr}
   16160:	add	fp, sp, #8
   16164:	sub	sp, sp, #8
   16168:	mov	r4, r0
   1616c:	ldr	r0, [r0, #32]
   16170:	ldrh	r1, [r0, #14]
   16174:	cmp	r1, #4
   16178:	bne	1622c <flatcc_builder_end_vector@@Base+0xd0>
   1617c:	ldr	r3, [r0, #16]
   16180:	ldr	r2, [r0, #20]
   16184:	ldr	r0, [r0, #24]
   16188:	ldr	r1, [r4, #16]
   1618c:	ldrh	r5, [r4, #130]	; 0x82
   16190:	str	r0, [sp, #4]
   16194:	mov	r0, r4
   16198:	str	r5, [sp]
   1619c:	bl	16008 <flatcc_builder_create_vector@@Base>
   161a0:	mov	r5, r0
   161a4:	cmp	r0, #0
   161a8:	beq	16220 <flatcc_builder_end_vector@@Base+0xc4>
   161ac:	ldr	r0, [r4, #16]
   161b0:	ldr	r2, [r4, #20]
   161b4:	mov	r1, #0
   161b8:	bl	12468 <memset@plt>
   161bc:	ldr	r0, [r4, #32]
   161c0:	ldr	r1, [r4, #60]	; 0x3c
   161c4:	ldr	ip, [r4, #64]	; 0x40
   161c8:	ldr	r3, [r0, #8]
   161cc:	str	r3, [r4, #20]
   161d0:	ldr	r3, [r0]
   161d4:	str	r3, [r4, #28]
   161d8:	add	r1, r1, r3
   161dc:	ldr	r2, [r0, #4]
   161e0:	str	r1, [r4, #16]
   161e4:	sub	r1, ip, r3
   161e8:	cmp	r1, r2
   161ec:	movhi	r1, r2
   161f0:	str	r1, [r4, #24]
   161f4:	ldrh	r1, [r4, #130]	; 0x82
   161f8:	ldrh	r2, [r4, #128]	; 0x80
   161fc:	cmp	r2, r1
   16200:	strhcc	r1, [r4, #128]	; 0x80
   16204:	ldrh	r1, [r0, #12]
   16208:	sub	r0, r0, #36	; 0x24
   1620c:	str	r0, [r4, #32]
   16210:	strh	r1, [r4, #130]	; 0x82
   16214:	ldr	r0, [r4, #156]	; 0x9c
   16218:	sub	r0, r0, #1
   1621c:	str	r0, [r4, #156]	; 0x9c
   16220:	mov	r0, r5
   16224:	sub	sp, fp, #8
   16228:	pop	{r4, r5, fp, pc}
   1622c:	movw	r0, #35801	; 0x8bd9
   16230:	movw	r1, #34998	; 0x88b6
   16234:	movw	r3, #37566	; 0x92be
   16238:	movw	r2, #1400	; 0x578
   1623c:	movt	r0, #1
   16240:	movt	r1, #1
   16244:	movt	r3, #1
   16248:	bl	12498 <__assert_fail@plt>

0001624c <flatcc_builder_vector_count@@Base>:
   1624c:	ldr	r0, [r0, #32]
   16250:	ldr	r0, [r0, #20]
   16254:	bx	lr

00016258 <flatcc_builder_vector_edit@@Base>:
   16258:	ldr	r0, [r0, #16]
   1625c:	bx	lr

00016260 <flatcc_builder_create_offset_vector_direct@@Base>:
   16260:	mov	r3, #0
   16264:	b	16268 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16268:	push	{r4, r5, r6, r7, fp, lr}
   1626c:	add	fp, sp, #16
   16270:	sub	sp, sp, #80	; 0x50
   16274:	mov	r5, #0
   16278:	cmn	r2, #-1073741823	; 0xc0000001
   1627c:	bhi	163ec <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   16280:	mov	r6, r0
   16284:	ldrh	r0, [r0, #128]	; 0x80
   16288:	mov	r4, #4
   1628c:	sub	r5, fp, #20
   16290:	mov	ip, #1
   16294:	cmp	r0, #3
   16298:	movls	r0, #4
   1629c:	strhls	r0, [r6, #128]	; 0x80
   162a0:	str	r2, [fp, #-20]	; 0xffffffec
   162a4:	mov	r0, #0
   162a8:	ldr	lr, [r6, #136]	; 0x88
   162ac:	cmp	r0, r2, lsl #2
   162b0:	str	r4, [sp, #16]
   162b4:	str	r5, [sp, #12]
   162b8:	str	r4, [sp, #4]
   162bc:	str	ip, [sp, #8]
   162c0:	and	r5, lr, #3
   162c4:	beq	162e4 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   162c8:	lsl	r0, r2, #2
   162cc:	mov	ip, #2
   162d0:	add	r4, r0, #4
   162d4:	str	r0, [sp, #24]
   162d8:	str	r1, [sp, #20]
   162dc:	str	ip, [sp, #8]
   162e0:	str	r4, [sp, #4]
   162e4:	cmp	r5, #0
   162e8:	beq	16314 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   162ec:	add	r0, sp, #4
   162f0:	movw	r7, #34468	; 0x86a4
   162f4:	add	r4, r4, r5
   162f8:	add	r0, r0, ip, lsl #3
   162fc:	movt	r7, #1
   16300:	add	ip, ip, #1
   16304:	str	r4, [sp, #4]
   16308:	str	r7, [r0, #8]
   1630c:	str	r5, [r0, #12]
   16310:	str	ip, [sp, #8]
   16314:	cmp	r2, #0
   16318:	beq	163b0 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   1631c:	sub	r0, r4, lr
   16320:	cmp	r3, #0
   16324:	sub	r0, r0, #4
   16328:	bne	16370 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
   1632c:	ldr	r3, [r1]
   16330:	cmp	r3, #0
   16334:	beq	163f8 <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   16338:	add	r3, r0, r3
   1633c:	sub	r0, r0, #4
   16340:	subs	r2, r2, #1
   16344:	str	r3, [r1], #4
   16348:	bne	1632c <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   1634c:	b	163b0 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   16350:	ldrb	r7, [r3]
   16354:	cmp	r7, #0
   16358:	bne	16418 <flatcc_builder_create_offset_vector_direct@@Base+0x1b8>
   1635c:	sub	r0, r0, #4
   16360:	add	r1, r1, #4
   16364:	add	r3, r3, #1
   16368:	subs	r2, r2, #1
   1636c:	beq	163b0 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   16370:	ldr	r5, [r1]
   16374:	cmp	r5, #0
   16378:	beq	16350 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   1637c:	add	r7, r0, r5
   16380:	str	r7, [r1]
   16384:	ldrb	r7, [r3]
   16388:	cmp	r7, #0
   1638c:	bne	1635c <flatcc_builder_create_offset_vector_direct@@Base+0xfc>
   16390:	movw	r0, #39504	; 0x9a50
   16394:	movw	r1, #34998	; 0x88b6
   16398:	movw	r3, #39518	; 0x9a5e
   1639c:	movw	r2, #1457	; 0x5b1
   163a0:	movt	r0, #1
   163a4:	movt	r1, #1
   163a8:	movt	r3, #1
   163ac:	bl	12498 <__assert_fail@plt>
   163b0:	cmp	r4, #0
   163b4:	ble	16438 <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   163b8:	ldr	r0, [r6, #136]	; 0x88
   163bc:	ldr	r7, [r6, #44]	; 0x2c
   163c0:	add	r1, sp, #4
   163c4:	mov	r2, ip
   163c8:	add	r1, r1, #8
   163cc:	sub	r5, r0, r4
   163d0:	ldr	r0, [r6, #36]	; 0x24
   163d4:	str	r4, [sp]
   163d8:	mov	r3, r5
   163dc:	blx	r7
   163e0:	cmp	r0, #0
   163e4:	bne	16458 <flatcc_builder_create_offset_vector_direct@@Base+0x1f8>
   163e8:	str	r5, [r6, #136]	; 0x88
   163ec:	mov	r0, r5
   163f0:	sub	sp, fp, #16
   163f4:	pop	{r4, r5, r6, r7, fp, pc}
   163f8:	movw	r0, #39516	; 0x9a5c
   163fc:	movw	r1, #34998	; 0x88b6
   16400:	movw	r3, #39518	; 0x9a5e
   16404:	movw	r2, #1463	; 0x5b7
   16408:	movt	r0, #1
   1640c:	movt	r1, #1
   16410:	movt	r3, #1
   16414:	bl	12498 <__assert_fail@plt>
   16418:	movw	r0, #39649	; 0x9ae1
   1641c:	movw	r1, #34998	; 0x88b6
   16420:	movw	r3, #39518	; 0x9a5e
   16424:	movw	r2, #1461	; 0x5b5
   16428:	movt	r0, #1
   1642c:	movt	r1, #1
   16430:	movt	r3, #1
   16434:	bl	12498 <__assert_fail@plt>
   16438:	movw	r0, #39516	; 0x9a5c
   1643c:	movw	r1, #34998	; 0x88b6
   16440:	movw	r3, #39195	; 0x991b
   16444:	movw	r2, #647	; 0x287
   16448:	movt	r0, #1
   1644c:	movt	r1, #1
   16450:	movt	r3, #1
   16454:	bl	12498 <__assert_fail@plt>
   16458:	movw	r0, #39516	; 0x9a5c
   1645c:	movw	r1, #34998	; 0x88b6
   16460:	movw	r3, #39195	; 0x991b
   16464:	movw	r2, #651	; 0x28b
   16468:	movt	r0, #1
   1646c:	movt	r1, #1
   16470:	movt	r3, #1
   16474:	bl	12498 <__assert_fail@plt>

00016478 <flatcc_builder_end_offset_vector_for_unions@@Base>:
   16478:	push	{r4, r5, fp, lr}
   1647c:	add	fp, sp, #8
   16480:	mov	r4, r0
   16484:	ldr	r0, [r0, #32]
   16488:	mov	r3, r1
   1648c:	ldrh	r1, [r0, #14]
   16490:	cmp	r1, #5
   16494:	bne	16530 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   16498:	ldr	r2, [r0, #20]
   1649c:	ldr	r1, [r4, #16]
   164a0:	mov	r0, r4
   164a4:	bl	16268 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   164a8:	mov	r5, r0
   164ac:	cmp	r0, #0
   164b0:	beq	16528 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   164b4:	ldr	r0, [r4, #16]
   164b8:	ldr	r2, [r4, #20]
   164bc:	mov	r1, #0
   164c0:	bl	12468 <memset@plt>
   164c4:	ldr	r0, [r4, #32]
   164c8:	ldr	r1, [r4, #60]	; 0x3c
   164cc:	ldr	ip, [r4, #64]	; 0x40
   164d0:	ldr	r3, [r0, #8]
   164d4:	str	r3, [r4, #20]
   164d8:	ldr	r3, [r0]
   164dc:	str	r3, [r4, #28]
   164e0:	add	r1, r1, r3
   164e4:	ldr	r2, [r0, #4]
   164e8:	str	r1, [r4, #16]
   164ec:	sub	r1, ip, r3
   164f0:	cmp	r1, r2
   164f4:	movhi	r1, r2
   164f8:	str	r1, [r4, #24]
   164fc:	ldrh	r1, [r4, #130]	; 0x82
   16500:	ldrh	r2, [r4, #128]	; 0x80
   16504:	cmp	r2, r1
   16508:	strhcc	r1, [r4, #128]	; 0x80
   1650c:	ldrh	r1, [r0, #12]
   16510:	sub	r0, r0, #36	; 0x24
   16514:	str	r0, [r4, #32]
   16518:	strh	r1, [r4, #130]	; 0x82
   1651c:	ldr	r0, [r4, #156]	; 0x9c
   16520:	sub	r0, r0, #1
   16524:	str	r0, [r4, #156]	; 0x9c
   16528:	mov	r0, r5
   1652c:	pop	{r4, r5, fp, pc}
   16530:	movw	r0, #36050	; 0x8cd2
   16534:	movw	r1, #34998	; 0x88b6
   16538:	movw	r3, #37707	; 0x934b
   1653c:	movw	r2, #1493	; 0x5d5
   16540:	movt	r0, #1
   16544:	movt	r1, #1
   16548:	movt	r3, #1
   1654c:	bl	12498 <__assert_fail@plt>

00016550 <flatcc_builder_offset_vector_edit@@Base>:
   16550:	ldr	r0, [r0, #16]
   16554:	bx	lr

00016558 <flatcc_builder_offset_vector_count@@Base>:
   16558:	ldr	r0, [r0, #32]
   1655c:	ldr	r0, [r0, #20]
   16560:	bx	lr

00016564 <flatcc_builder_table_add_union@@Base>:
   16564:	push	{r4, r5, r6, r7, fp, lr}
   16568:	add	fp, sp, #16
   1656c:	mov	r5, r0
   16570:	ldr	r0, [r0, #32]
   16574:	ldrh	r0, [r0, #14]
   16578:	cmp	r0, #3
   1657c:	bne	16604 <flatcc_builder_table_add_union@@Base+0xa0>
   16580:	mov	r7, r3
   16584:	mov	r4, r2
   16588:	mov	r6, r1
   1658c:	cmp	r3, #0
   16590:	beq	165a0 <flatcc_builder_table_add_union@@Base+0x3c>
   16594:	uxtb	r0, r4
   16598:	cmp	r0, #0
   1659c:	beq	16624 <flatcc_builder_table_add_union@@Base+0xc0>
   165a0:	cmp	r7, #0
   165a4:	beq	165c0 <flatcc_builder_table_add_union@@Base+0x5c>
   165a8:	mov	r0, r5
   165ac:	mov	r1, r6
   165b0:	bl	16664 <flatcc_builder_table_add_offset@@Base>
   165b4:	cmp	r0, #0
   165b8:	beq	16644 <flatcc_builder_table_add_union@@Base+0xe0>
   165bc:	str	r7, [r0]
   165c0:	sub	r1, r6, #1
   165c4:	mov	r0, r5
   165c8:	mov	r2, #1
   165cc:	mov	r3, #1
   165d0:	bl	167f4 <flatcc_builder_table_add@@Base>
   165d4:	cmp	r0, #0
   165d8:	strbne	r4, [r0]
   165dc:	movne	r0, #0
   165e0:	popne	{r4, r5, r6, r7, fp, pc}
   165e4:	movw	r0, #37953	; 0x9441
   165e8:	movw	r1, #34998	; 0x88b6
   165ec:	movw	r3, #37821	; 0x93bd
   165f0:	movw	r2, #1526	; 0x5f6
   165f4:	movt	r0, #1
   165f8:	movt	r1, #1
   165fc:	movt	r3, #1
   16600:	bl	12498 <__assert_fail@plt>
   16604:	movw	r0, #37067	; 0x90cb
   16608:	movw	r1, #34998	; 0x88b6
   1660c:	movw	r3, #37821	; 0x93bd
   16610:	movw	r2, #1518	; 0x5ee
   16614:	movt	r0, #1
   16618:	movt	r1, #1
   1661c:	movt	r3, #1
   16620:	bl	12498 <__assert_fail@plt>
   16624:	movw	r0, #37909	; 0x9415
   16628:	movw	r1, #34998	; 0x88b6
   1662c:	movw	r3, #37821	; 0x93bd
   16630:	movw	r2, #1519	; 0x5ef
   16634:	movt	r0, #1
   16638:	movt	r1, #1
   1663c:	movt	r3, #1
   16640:	bl	12498 <__assert_fail@plt>
   16644:	movw	r0, #37943	; 0x9437
   16648:	movw	r1, #34998	; 0x88b6
   1664c:	movw	r3, #37821	; 0x93bd
   16650:	movw	r2, #1522	; 0x5f2
   16654:	movt	r0, #1
   16658:	movt	r1, #1
   1665c:	movt	r3, #1
   16660:	bl	12498 <__assert_fail@plt>

00016664 <flatcc_builder_table_add_offset@@Base>:
   16664:	push	{r4, r5, r6, r7, fp, lr}
   16668:	add	fp, sp, #16
   1666c:	sub	sp, sp, #8
   16670:	mov	r4, r0
   16674:	ldr	r0, [r0, #32]
   16678:	ldrh	r0, [r0, #14]
   1667c:	cmp	r0, #3
   16680:	bne	16794 <flatcc_builder_table_add_offset@@Base+0x130>
   16684:	movw	r0, #32765	; 0x7ffd
   16688:	mov	r5, r1
   1668c:	cmp	r1, r0
   16690:	bcs	167b4 <flatcc_builder_table_add_offset@@Base+0x150>
   16694:	ldr	r0, [r4, #4]
   16698:	add	r1, r0, r5, lsl #1
   1669c:	ldrh	r1, [r1]
   166a0:	cmp	r1, #0
   166a4:	bne	167d4 <flatcc_builder_table_add_offset@@Base+0x170>
   166a8:	ldr	r2, [r4, #20]
   166ac:	ldr	r1, [r4, #12]
   166b0:	ldr	r3, [r4, #24]
   166b4:	add	r2, r2, #3
   166b8:	eor	r1, r1, r5
   166bc:	bic	r6, r2, #3
   166c0:	movw	r2, #31153	; 0x79b1
   166c4:	movt	r2, #40503	; 0x9e37
   166c8:	add	r7, r6, #4
   166cc:	cmp	r7, r3
   166d0:	str	r7, [r4, #20]
   166d4:	mul	r1, r1, r2
   166d8:	eor	r1, r1, #4
   166dc:	mul	r1, r1, r2
   166e0:	str	r1, [r4, #12]
   166e4:	bls	16758 <flatcc_builder_table_add_offset@@Base+0xf4>
   166e8:	ldr	r1, [r4, #28]
   166ec:	ldr	r0, [r4, #40]	; 0x28
   166f0:	ldr	ip, [r4, #48]	; 0x30
   166f4:	mov	r2, #1
   166f8:	mov	r3, #1
   166fc:	str	r2, [sp]
   16700:	add	r2, r1, r7
   16704:	add	r1, r4, #60	; 0x3c
   16708:	blx	ip
   1670c:	mov	r1, r0
   16710:	mov	r0, #0
   16714:	cmp	r1, #0
   16718:	beq	16724 <flatcc_builder_table_add_offset@@Base+0xc0>
   1671c:	sub	sp, fp, #16
   16720:	pop	{r4, r5, r6, r7, fp, pc}
   16724:	ldr	r0, [r4, #28]
   16728:	ldr	r2, [r4, #60]	; 0x3c
   1672c:	ldr	r3, [r4, #64]	; 0x40
   16730:	ldr	r1, [r4, #32]
   16734:	add	r2, r2, r0
   16738:	sub	r0, r3, r0
   1673c:	str	r2, [r4, #16]
   16740:	movw	r2, #65532	; 0xfffc
   16744:	cmp	r0, r2
   16748:	movcs	r0, r2
   1674c:	str	r0, [r4, #24]
   16750:	str	r2, [r1, #4]
   16754:	ldr	r0, [r4, #4]
   16758:	uxth	r1, r5
   1675c:	add	r0, r0, r1, lsl #1
   16760:	strh	r7, [r0]
   16764:	ldrh	r0, [r4, #8]
   16768:	cmp	r0, r1
   1676c:	addls	r0, r5, #1
   16770:	strhls	r0, [r4, #8]
   16774:	ldr	r0, [r4]
   16778:	add	r1, r0, #2
   1677c:	str	r1, [r4]
   16780:	strh	r6, [r0]
   16784:	ldr	r0, [r4, #16]
   16788:	add	r0, r0, r6
   1678c:	sub	sp, fp, #16
   16790:	pop	{r4, r5, r6, r7, fp, pc}
   16794:	movw	r0, #37067	; 0x90cb
   16798:	movw	r1, #34998	; 0x88b6
   1679c:	movw	r3, #38847	; 0x97bf
   167a0:	movw	r2, #1811	; 0x713
   167a4:	movt	r0, #1
   167a8:	movt	r1, #1
   167ac:	movt	r3, #1
   167b0:	bl	12498 <__assert_fail@plt>
   167b4:	movw	r0, #38719	; 0x973f
   167b8:	movw	r1, #34998	; 0x88b6
   167bc:	movw	r3, #38847	; 0x97bf
   167c0:	movw	r2, #1812	; 0x714
   167c4:	movt	r0, #1
   167c8:	movt	r1, #1
   167cc:	movt	r3, #1
   167d0:	bl	12498 <__assert_fail@plt>
   167d4:	movw	r0, #39516	; 0x9a5c
   167d8:	movw	r1, #34998	; 0x88b6
   167dc:	movw	r3, #38847	; 0x97bf
   167e0:	movw	r2, #1819	; 0x71b
   167e4:	movt	r0, #1
   167e8:	movt	r1, #1
   167ec:	movt	r3, #1
   167f0:	bl	12498 <__assert_fail@plt>

000167f4 <flatcc_builder_table_add@@Base>:
   167f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167f8:	add	fp, sp, #24
   167fc:	sub	sp, sp, #8
   16800:	mov	r4, r0
   16804:	ldr	r0, [r0, #32]
   16808:	ldrh	r0, [r0, #14]
   1680c:	cmp	r0, #3
   16810:	bne	16930 <flatcc_builder_table_add@@Base+0x13c>
   16814:	movw	r0, #32765	; 0x7ffd
   16818:	mov	r8, r1
   1681c:	cmp	r1, r0
   16820:	bcs	16950 <flatcc_builder_table_add@@Base+0x15c>
   16824:	ldrh	r0, [r4, #130]	; 0x82
   16828:	cmp	r0, r3
   1682c:	strhcc	r3, [r4, #130]	; 0x82
   16830:	ldr	r0, [r4, #4]
   16834:	add	r1, r0, r8, lsl #1
   16838:	ldrh	r1, [r1]
   1683c:	cmp	r1, #0
   16840:	bne	16970 <flatcc_builder_table_add@@Base+0x17c>
   16844:	ldr	r1, [r4, #12]
   16848:	movw	r7, #31153	; 0x79b1
   1684c:	ldr	r6, [r4, #20]
   16850:	ldr	r5, [r4, #24]
   16854:	movt	r7, #40503	; 0x9e37
   16858:	eor	r1, r1, r8
   1685c:	mul	r1, r1, r7
   16860:	eor	r1, r1, r2
   16864:	mul	r1, r1, r7
   16868:	str	r1, [r4, #12]
   1686c:	add	r1, r3, r6
   16870:	rsb	r3, r3, #0
   16874:	sub	r1, r1, #1
   16878:	and	r6, r1, r3
   1687c:	add	r1, r6, r2
   16880:	cmp	r1, r5
   16884:	str	r1, [r4, #20]
   16888:	bcc	16900 <flatcc_builder_table_add@@Base+0x10c>
   1688c:	ldr	r2, [r4, #28]
   16890:	ldr	r0, [r4, #40]	; 0x28
   16894:	ldr	r7, [r4, #48]	; 0x30
   16898:	mov	r3, #1
   1689c:	str	r3, [sp]
   168a0:	mov	r3, #1
   168a4:	add	r1, r1, r2
   168a8:	add	r2, r1, #1
   168ac:	add	r1, r4, #60	; 0x3c
   168b0:	blx	r7
   168b4:	mov	r1, r0
   168b8:	mov	r0, #0
   168bc:	cmp	r1, #0
   168c0:	beq	168cc <flatcc_builder_table_add@@Base+0xd8>
   168c4:	sub	sp, fp, #24
   168c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168cc:	ldr	r0, [r4, #28]
   168d0:	ldr	r2, [r4, #60]	; 0x3c
   168d4:	ldr	r3, [r4, #64]	; 0x40
   168d8:	ldr	r1, [r4, #32]
   168dc:	add	r2, r2, r0
   168e0:	sub	r0, r3, r0
   168e4:	str	r2, [r4, #16]
   168e8:	movw	r2, #65532	; 0xfffc
   168ec:	cmp	r0, r2
   168f0:	movcs	r0, r2
   168f4:	str	r0, [r4, #24]
   168f8:	str	r2, [r1, #4]
   168fc:	ldr	r0, [r4, #4]
   16900:	uxth	r1, r8
   16904:	add	r2, r6, #4
   16908:	add	r0, r0, r1, lsl #1
   1690c:	strh	r2, [r0]
   16910:	ldrh	r0, [r4, #8]
   16914:	cmp	r0, r1
   16918:	addls	r0, r8, #1
   1691c:	strhls	r0, [r4, #8]
   16920:	ldr	r0, [r4, #16]
   16924:	add	r0, r0, r6
   16928:	sub	sp, fp, #24
   1692c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16930:	movw	r0, #37067	; 0x90cb
   16934:	movw	r1, #34998	; 0x88b6
   16938:	movw	r3, #38645	; 0x96f5
   1693c:	movw	r2, #1773	; 0x6ed
   16940:	movt	r0, #1
   16944:	movt	r1, #1
   16948:	movt	r3, #1
   1694c:	bl	12498 <__assert_fail@plt>
   16950:	movw	r0, #38719	; 0x973f
   16954:	movw	r1, #34998	; 0x88b6
   16958:	movw	r3, #38645	; 0x96f5
   1695c:	movw	r2, #1774	; 0x6ee
   16960:	movt	r0, #1
   16964:	movt	r1, #1
   16968:	movt	r3, #1
   1696c:	bl	12498 <__assert_fail@plt>
   16970:	movw	r0, #39516	; 0x9a5c
   16974:	movw	r1, #34998	; 0x88b6
   16978:	movw	r3, #38645	; 0x96f5
   1697c:	movw	r2, #1784	; 0x6f8
   16980:	movt	r0, #1
   16984:	movt	r1, #1
   16988:	movt	r3, #1
   1698c:	bl	12498 <__assert_fail@plt>

00016990 <flatcc_builder_table_add_union_vector@@Base>:
   16990:	push	{r4, r5, r6, r7, fp, lr}
   16994:	add	fp, sp, #16
   16998:	mov	r6, r0
   1699c:	ldr	r0, [r0, #32]
   169a0:	ldrh	r0, [r0, #14]
   169a4:	cmp	r0, #3
   169a8:	bne	16a14 <flatcc_builder_table_add_union_vector@@Base+0x84>
   169ac:	mov	r5, r1
   169b0:	clz	r1, r3
   169b4:	cmp	r2, #0
   169b8:	mov	r0, r2
   169bc:	mov	r4, r3
   169c0:	mov	r7, r2
   169c4:	movwne	r0, #1
   169c8:	lsr	r1, r1, #5
   169cc:	teq	r1, r0
   169d0:	beq	16a34 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   169d4:	cmp	r7, #0
   169d8:	beq	16a0c <flatcc_builder_table_add_union_vector@@Base+0x7c>
   169dc:	sub	r1, r5, #1
   169e0:	mov	r0, r6
   169e4:	bl	16664 <flatcc_builder_table_add_offset@@Base>
   169e8:	cmp	r0, #0
   169ec:	beq	16a54 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   169f0:	str	r7, [r0]
   169f4:	mov	r0, r6
   169f8:	mov	r1, r5
   169fc:	bl	16664 <flatcc_builder_table_add_offset@@Base>
   16a00:	cmp	r0, #0
   16a04:	beq	16a74 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   16a08:	str	r4, [r0]
   16a0c:	mov	r0, #0
   16a10:	pop	{r4, r5, r6, r7, fp, pc}
   16a14:	movw	r0, #37067	; 0x90cb
   16a18:	movw	r1, #34998	; 0x88b6
   16a1c:	movw	r3, #37965	; 0x944d
   16a20:	mov	r2, #1536	; 0x600
   16a24:	movt	r0, #1
   16a28:	movt	r1, #1
   16a2c:	movt	r3, #1
   16a30:	bl	12498 <__assert_fail@plt>
   16a34:	movw	r0, #38064	; 0x94b0
   16a38:	movw	r1, #34998	; 0x88b6
   16a3c:	movw	r3, #37965	; 0x944d
   16a40:	movw	r2, #1537	; 0x601
   16a44:	movt	r0, #1
   16a48:	movt	r1, #1
   16a4c:	movt	r3, #1
   16a50:	bl	12498 <__assert_fail@plt>
   16a54:	movw	r0, #37943	; 0x9437
   16a58:	movw	r1, #34998	; 0x88b6
   16a5c:	movw	r3, #37965	; 0x944d
   16a60:	movw	r2, #1540	; 0x604
   16a64:	movt	r0, #1
   16a68:	movt	r1, #1
   16a6c:	movt	r3, #1
   16a70:	bl	12498 <__assert_fail@plt>
   16a74:	movw	r0, #37943	; 0x9437
   16a78:	movw	r1, #34998	; 0x88b6
   16a7c:	movw	r3, #37965	; 0x944d
   16a80:	movw	r2, #1544	; 0x608
   16a84:	movt	r0, #1
   16a88:	movt	r1, #1
   16a8c:	movt	r3, #1
   16a90:	bl	12498 <__assert_fail@plt>

00016a94 <flatcc_builder_create_union_vector@@Base>:
   16a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a98:	add	fp, sp, #28
   16a9c:	sub	sp, sp, #12
   16aa0:	mov	r6, #0
   16aa4:	mov	r4, r1
   16aa8:	mov	r8, r0
   16aac:	mov	sl, r3
   16ab0:	mov	r9, r2
   16ab4:	mov	r7, #4
   16ab8:	str	r6, [r0]
   16abc:	str	r6, [r0, #4]
   16ac0:	mov	r0, r1
   16ac4:	mov	r1, #4
   16ac8:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   16acc:	cmp	r0, #0
   16ad0:	beq	16adc <flatcc_builder_create_union_vector@@Base+0x48>
   16ad4:	sub	sp, fp, #28
   16ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16adc:	ldr	r0, [r4, #32]
   16ae0:	mov	r1, #5
   16ae4:	str	r7, [r0, #16]
   16ae8:	ldr	r0, [r4, #32]
   16aec:	str	r6, [r0, #20]
   16af0:	ldr	r0, [r4, #32]
   16af4:	strh	r1, [r0, #14]
   16af8:	ldr	r1, [r4, #28]
   16afc:	ldr	r2, [r4, #60]	; 0x3c
   16b00:	ldr	r3, [r4, #64]	; 0x40
   16b04:	add	r2, r2, r1
   16b08:	sub	r1, r3, r1
   16b0c:	str	r2, [r4, #16]
   16b10:	mvn	r2, #3
   16b14:	cmn	r1, #4
   16b18:	movcs	r1, r2
   16b1c:	str	r1, [r4, #24]
   16b20:	str	r2, [r0, #4]
   16b24:	ldr	r1, [r0, #20]
   16b28:	adds	r1, r1, sl
   16b2c:	cmpcc	r1, #1073741824	; 0x40000000
   16b30:	bcc	16b54 <flatcc_builder_create_union_vector@@Base+0xc0>
   16b34:	movw	r0, #39269	; 0x9965
   16b38:	movw	r1, #34998	; 0x88b6
   16b3c:	movw	r3, #39296	; 0x9980
   16b40:	mov	r2, #892	; 0x37c
   16b44:	movt	r0, #1
   16b48:	movt	r1, #1
   16b4c:	movt	r3, #1
   16b50:	bl	12498 <__assert_fail@plt>
   16b54:	str	r1, [r0, #20]
   16b58:	ldr	r7, [r4, #20]
   16b5c:	ldr	r0, [r4, #24]
   16b60:	add	r1, r7, sl, lsl #2
   16b64:	cmp	r1, r0
   16b68:	str	r1, [r4, #20]
   16b6c:	bcs	16b80 <flatcc_builder_create_union_vector@@Base+0xec>
   16b70:	ldr	r1, [r4, #16]
   16b74:	adds	r2, r1, r7
   16b78:	bne	16be8 <flatcc_builder_create_union_vector@@Base+0x154>
   16b7c:	b	16ad4 <flatcc_builder_create_union_vector@@Base+0x40>
   16b80:	ldr	r2, [r4, #28]
   16b84:	ldr	r0, [r4, #40]	; 0x28
   16b88:	ldr	r6, [r4, #48]	; 0x30
   16b8c:	mov	r3, #1
   16b90:	str	r3, [sp]
   16b94:	mov	r3, #1
   16b98:	add	r1, r1, r2
   16b9c:	add	r2, r1, #1
   16ba0:	add	r1, r4, #60	; 0x3c
   16ba4:	blx	r6
   16ba8:	cmp	r0, #0
   16bac:	bne	16ad4 <flatcc_builder_create_union_vector@@Base+0x40>
   16bb0:	ldr	r0, [r4, #28]
   16bb4:	ldr	r1, [r4, #60]	; 0x3c
   16bb8:	ldr	r3, [r4, #64]	; 0x40
   16bbc:	ldr	r2, [r4, #32]
   16bc0:	add	r1, r1, r0
   16bc4:	sub	r0, r3, r0
   16bc8:	mvn	r3, #3
   16bcc:	cmn	r0, #4
   16bd0:	str	r1, [r4, #16]
   16bd4:	movcs	r0, r3
   16bd8:	str	r0, [r4, #24]
   16bdc:	str	r3, [r2, #4]
   16be0:	adds	r2, r1, r7
   16be4:	beq	16ad4 <flatcc_builder_create_union_vector@@Base+0x40>
   16be8:	ldr	r7, [r4, #20]
   16bec:	add	r2, r7, sl
   16bf0:	cmp	r2, r0
   16bf4:	str	r2, [r4, #20]
   16bf8:	bcc	16c5c <flatcc_builder_create_union_vector@@Base+0x1c8>
   16bfc:	ldr	r1, [r4, #28]
   16c00:	ldr	r0, [r4, #40]	; 0x28
   16c04:	ldr	r6, [r4, #48]	; 0x30
   16c08:	mov	r3, #1
   16c0c:	str	r3, [sp]
   16c10:	mov	r3, #1
   16c14:	add	r1, r2, r1
   16c18:	add	r2, r1, #1
   16c1c:	add	r1, r4, #60	; 0x3c
   16c20:	blx	r6
   16c24:	cmp	r0, #0
   16c28:	bne	16ad4 <flatcc_builder_create_union_vector@@Base+0x40>
   16c2c:	ldr	r0, [r4, #28]
   16c30:	ldr	r1, [r4, #60]	; 0x3c
   16c34:	ldr	r3, [r4, #64]	; 0x40
   16c38:	ldr	r2, [r4, #32]
   16c3c:	add	r1, r1, r0
   16c40:	sub	r0, r3, r0
   16c44:	mvn	r3, #3
   16c48:	cmn	r0, #4
   16c4c:	str	r1, [r4, #16]
   16c50:	movcs	r0, r3
   16c54:	str	r0, [r4, #24]
   16c58:	str	r3, [r2, #4]
   16c5c:	adds	r5, r1, r7
   16c60:	beq	16ad4 <flatcc_builder_create_union_vector@@Base+0x40>
   16c64:	cmp	sl, #0
   16c68:	beq	16cf0 <flatcc_builder_create_union_vector@@Base+0x25c>
   16c6c:	and	ip, sl, #1
   16c70:	mov	r0, #0
   16c74:	cmp	sl, #1
   16c78:	str	r5, [sp, #8]
   16c7c:	beq	16cd4 <flatcc_builder_create_union_vector@@Base+0x240>
   16c80:	ldr	r0, [sp, #8]
   16c84:	sub	lr, sl, ip
   16c88:	add	r2, r1, #4
   16c8c:	add	r6, r9, #8
   16c90:	add	r7, r0, #1
   16c94:	mov	r0, #0
   16c98:	ldrb	r3, [r6, #-8]
   16c9c:	add	r5, r7, r0
   16ca0:	strb	r3, [r5, #-1]
   16ca4:	add	r3, r9, r0, lsl #3
   16ca8:	ldr	r5, [r3, #4]
   16cac:	str	r5, [r2, #-4]
   16cb0:	ldrb	r5, [r6]
   16cb4:	add	r6, r6, #16
   16cb8:	strb	r5, [r7, r0]
   16cbc:	add	r0, r0, #2
   16cc0:	ldr	r3, [r3, #12]
   16cc4:	cmp	lr, r0
   16cc8:	str	r3, [r2]
   16ccc:	add	r2, r2, #8
   16cd0:	bne	16c98 <flatcc_builder_create_union_vector@@Base+0x204>
   16cd4:	ldr	r5, [sp, #8]
   16cd8:	cmp	ip, #0
   16cdc:	beq	16cf0 <flatcc_builder_create_union_vector@@Base+0x25c>
   16ce0:	ldrb	r2, [r9, r0, lsl #3]!
   16ce4:	strb	r2, [r5, r0]
   16ce8:	ldr	r2, [r9, #4]
   16cec:	str	r2, [r1, r0, lsl #2]
   16cf0:	mov	r0, r4
   16cf4:	mov	r2, sl
   16cf8:	mov	r3, r5
   16cfc:	bl	16268 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16d00:	mov	r7, r0
   16d04:	mov	r6, #0
   16d08:	cmp	r0, #0
   16d0c:	beq	16d38 <flatcc_builder_create_union_vector@@Base+0x2a4>
   16d10:	mvn	r0, #0
   16d14:	mov	r1, #1
   16d18:	mov	r2, sl
   16d1c:	mov	r3, #1
   16d20:	str	r1, [sp]
   16d24:	str	r0, [sp, #4]
   16d28:	mov	r0, r4
   16d2c:	mov	r1, r5
   16d30:	bl	16008 <flatcc_builder_create_vector@@Base>
   16d34:	b	16d3c <flatcc_builder_create_union_vector@@Base+0x2a8>
   16d38:	mov	r0, #0
   16d3c:	orr	r1, r6, r7
   16d40:	stm	r8, {r0, r1}
   16d44:	mov	r1, #0
   16d48:	ldr	r0, [r4, #16]
   16d4c:	ldr	r2, [r4, #20]
   16d50:	bl	12468 <memset@plt>
   16d54:	ldr	r0, [r4, #32]
   16d58:	ldr	r1, [r4, #60]	; 0x3c
   16d5c:	ldr	r2, [r4, #64]	; 0x40
   16d60:	ldr	r3, [r0, #8]
   16d64:	str	r3, [r4, #20]
   16d68:	ldr	r3, [r0]
   16d6c:	str	r3, [r4, #28]
   16d70:	add	r1, r1, r3
   16d74:	ldr	r7, [r0, #4]
   16d78:	str	r1, [r4, #16]
   16d7c:	sub	r1, r2, r3
   16d80:	cmp	r1, r7
   16d84:	movhi	r1, r7
   16d88:	str	r1, [r4, #24]
   16d8c:	ldrh	r1, [r4, #130]	; 0x82
   16d90:	ldrh	r2, [r4, #128]	; 0x80
   16d94:	cmp	r2, r1
   16d98:	strhcc	r1, [r4, #128]	; 0x80
   16d9c:	ldrh	r1, [r0, #12]
   16da0:	sub	r0, r0, #36	; 0x24
   16da4:	str	r0, [r4, #32]
   16da8:	strh	r1, [r4, #130]	; 0x82
   16dac:	ldr	r0, [r4, #156]	; 0x9c
   16db0:	sub	r0, r0, #1
   16db4:	str	r0, [r4, #156]	; 0x9c
   16db8:	sub	sp, fp, #28
   16dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016dc0 <flatcc_builder_create_union_vector_direct@@Base>:
   16dc0:	push	{r4, r5, r6, r7, fp, lr}
   16dc4:	add	fp, sp, #16
   16dc8:	sub	sp, sp, #8
   16dcc:	ldr	r7, [fp, #8]
   16dd0:	mov	r5, r2
   16dd4:	mov	r4, r0
   16dd8:	mov	r0, #0
   16ddc:	mov	r6, r1
   16de0:	str	r0, [r4]
   16de4:	str	r0, [r4, #4]
   16de8:	mov	r0, r1
   16dec:	mov	r1, r3
   16df0:	mov	r3, r5
   16df4:	mov	r2, r7
   16df8:	bl	16268 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16dfc:	cmp	r0, #0
   16e00:	str	r0, [r4, #4]
   16e04:	beq	16e30 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16e08:	mvn	r0, #0
   16e0c:	mov	r1, #1
   16e10:	mov	r2, r7
   16e14:	mov	r3, #1
   16e18:	str	r1, [sp]
   16e1c:	str	r0, [sp, #4]
   16e20:	mov	r0, r6
   16e24:	mov	r1, r5
   16e28:	bl	16008 <flatcc_builder_create_vector@@Base>
   16e2c:	str	r0, [r4]
   16e30:	sub	sp, fp, #16
   16e34:	pop	{r4, r5, r6, r7, fp, pc}

00016e38 <flatcc_builder_start_union_vector@@Base>:
   16e38:	push	{r4, sl, fp, lr}
   16e3c:	add	fp, sp, #8
   16e40:	mov	r1, #4
   16e44:	mov	r4, r0
   16e48:	bl	13f60 <flatcc_builder_start_buffer@@Base+0xbc>
   16e4c:	mov	r1, r0
   16e50:	mvn	r0, #0
   16e54:	cmp	r1, #0
   16e58:	popne	{r4, sl, fp, pc}
   16e5c:	ldr	r0, [r4, #32]
   16e60:	mov	r1, #8
   16e64:	mov	r2, #7
   16e68:	str	r1, [r0, #16]
   16e6c:	mov	r0, #0
   16e70:	ldr	r1, [r4, #32]
   16e74:	str	r0, [r1, #20]
   16e78:	ldr	r1, [r4, #32]
   16e7c:	strh	r2, [r1, #14]
   16e80:	ldr	r2, [r4, #28]
   16e84:	ldr	r3, [r4, #60]	; 0x3c
   16e88:	ldr	ip, [r4, #64]	; 0x40
   16e8c:	add	r3, r3, r2
   16e90:	sub	r2, ip, r2
   16e94:	str	r3, [r4, #16]
   16e98:	mvn	r3, #3
   16e9c:	cmn	r2, #4
   16ea0:	movcs	r2, r3
   16ea4:	str	r2, [r4, #24]
   16ea8:	str	r3, [r1, #4]
   16eac:	pop	{r4, sl, fp, pc}

00016eb0 <flatcc_builder_end_union_vector@@Base>:
   16eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eb4:	add	fp, sp, #28
   16eb8:	sub	sp, sp, #20
   16ebc:	mov	r4, r0
   16ec0:	mov	r0, #0
   16ec4:	mov	r8, r1
   16ec8:	str	r0, [r4]
   16ecc:	str	r0, [r4, #4]
   16ed0:	ldr	r0, [r1, #32]
   16ed4:	ldrh	r1, [r0, #14]
   16ed8:	cmp	r1, #7
   16edc:	bne	170e4 <flatcc_builder_end_union_vector@@Base+0x234>
   16ee0:	ldr	r9, [r0, #20]
   16ee4:	ldr	r5, [r8, #20]
   16ee8:	ldr	r2, [r8, #24]
   16eec:	add	r0, r9, r9, lsl #2
   16ef0:	add	r1, r5, r0
   16ef4:	cmp	r1, r2
   16ef8:	str	r1, [r8, #20]
   16efc:	bcs	16fec <flatcc_builder_end_union_vector@@Base+0x13c>
   16f00:	ldr	r0, [r8, #16]
   16f04:	adds	r1, r0, r5
   16f08:	beq	17054 <flatcc_builder_end_union_vector@@Base+0x1a4>
   16f0c:	add	sl, r1, r9, lsl #2
   16f10:	cmp	r9, #0
   16f14:	beq	16fa4 <flatcc_builder_end_union_vector@@Base+0xf4>
   16f18:	and	r2, r9, #1
   16f1c:	cmp	r9, #1
   16f20:	str	r4, [sp, #12]
   16f24:	str	r2, [sp, #16]
   16f28:	mov	r2, #0
   16f2c:	beq	16f84 <flatcc_builder_end_union_vector@@Base+0xd4>
   16f30:	ldr	r2, [sp, #16]
   16f34:	add	r5, r5, #4
   16f38:	add	r6, r0, #8
   16f3c:	sub	lr, r9, r2
   16f40:	mov	r2, #0
   16f44:	ldrb	r7, [r6, #-8]
   16f48:	mov	r4, sl
   16f4c:	add	r3, r0, r2, lsl #3
   16f50:	strb	r7, [r4, r2]!
   16f54:	add	r7, r0, r5
   16f58:	add	r2, r2, #2
   16f5c:	ldr	ip, [r3, #4]
   16f60:	cmp	lr, r2
   16f64:	str	ip, [r7, #-4]
   16f68:	ldrb	r7, [r6]
   16f6c:	add	r6, r6, #16
   16f70:	strb	r7, [r4, #1]
   16f74:	ldr	r3, [r3, #12]
   16f78:	str	r3, [r0, r5]
   16f7c:	add	r5, r5, #8
   16f80:	bne	16f44 <flatcc_builder_end_union_vector@@Base+0x94>
   16f84:	ldr	r3, [sp, #16]
   16f88:	ldr	r4, [sp, #12]
   16f8c:	cmp	r3, #0
   16f90:	beq	16fa4 <flatcc_builder_end_union_vector@@Base+0xf4>
   16f94:	ldrb	r3, [r0, r2, lsl #3]!
   16f98:	strb	r3, [sl, r2]
   16f9c:	ldr	r0, [r0, #4]
   16fa0:	str	r0, [r1, r2, lsl #2]
   16fa4:	mov	r0, r8
   16fa8:	mov	r2, r9
   16fac:	mov	r3, sl
   16fb0:	bl	16268 <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16fb4:	mov	r5, r0
   16fb8:	mov	r6, #0
   16fbc:	cmp	r0, #0
   16fc0:	beq	1705c <flatcc_builder_end_union_vector@@Base+0x1ac>
   16fc4:	mvn	r0, #0
   16fc8:	mov	r1, #1
   16fcc:	mov	r2, r9
   16fd0:	mov	r3, #1
   16fd4:	str	r1, [sp]
   16fd8:	str	r0, [sp, #4]
   16fdc:	mov	r0, r8
   16fe0:	mov	r1, sl
   16fe4:	bl	16008 <flatcc_builder_create_vector@@Base>
   16fe8:	b	17060 <flatcc_builder_end_union_vector@@Base+0x1b0>
   16fec:	ldr	r2, [r8, #28]
   16ff0:	ldr	r0, [r8, #40]	; 0x28
   16ff4:	ldr	r7, [r8, #48]	; 0x30
   16ff8:	mov	r3, #1
   16ffc:	str	r3, [sp]
   17000:	mov	r3, #1
   17004:	add	r1, r1, r2
   17008:	add	r2, r1, #1
   1700c:	add	r1, r8, #60	; 0x3c
   17010:	blx	r7
   17014:	cmp	r0, #0
   17018:	bne	17054 <flatcc_builder_end_union_vector@@Base+0x1a4>
   1701c:	ldr	r1, [r8, #28]
   17020:	ldr	r0, [r8, #60]	; 0x3c
   17024:	ldr	r3, [r8, #64]	; 0x40
   17028:	ldr	r2, [r8, #32]
   1702c:	add	r0, r0, r1
   17030:	sub	r1, r3, r1
   17034:	mvn	r3, #3
   17038:	cmn	r1, #4
   1703c:	str	r0, [r8, #16]
   17040:	movcs	r1, r3
   17044:	str	r1, [r8, #24]
   17048:	str	r3, [r2, #4]
   1704c:	adds	r1, r0, r5
   17050:	bne	16f0c <flatcc_builder_end_union_vector@@Base+0x5c>
   17054:	sub	sp, fp, #28
   17058:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1705c:	mov	r0, #0
   17060:	orr	r1, r6, r5
   17064:	stm	r4, {r0, r1}
   17068:	mov	r1, #0
   1706c:	ldr	r0, [r8, #16]
   17070:	ldr	r2, [r8, #20]
   17074:	bl	12468 <memset@plt>
   17078:	ldr	r0, [r8, #32]
   1707c:	ldr	r1, [r8, #60]	; 0x3c
   17080:	ldr	r2, [r8, #64]	; 0x40
   17084:	ldr	r3, [r0, #8]
   17088:	str	r3, [r8, #20]
   1708c:	ldr	r3, [r0]
   17090:	str	r3, [r8, #28]
   17094:	add	r1, r1, r3
   17098:	ldr	r7, [r0, #4]
   1709c:	str	r1, [r8, #16]
   170a0:	sub	r1, r2, r3
   170a4:	cmp	r1, r7
   170a8:	movhi	r1, r7
   170ac:	str	r1, [r8, #24]
   170b0:	ldrh	r1, [r8, #130]	; 0x82
   170b4:	ldrh	r2, [r8, #128]	; 0x80
   170b8:	cmp	r2, r1
   170bc:	strhcc	r1, [r8, #128]	; 0x80
   170c0:	ldrh	r1, [r0, #12]
   170c4:	sub	r0, r0, #36	; 0x24
   170c8:	str	r0, [r8, #32]
   170cc:	strh	r1, [r8, #130]	; 0x82
   170d0:	ldr	r0, [r8, #156]	; 0x9c
   170d4:	sub	r0, r0, #1
   170d8:	str	r0, [r8, #156]	; 0x9c
   170dc:	sub	sp, fp, #28
   170e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170e4:	movw	r0, #38104	; 0x94d8
   170e8:	movw	r1, #34998	; 0x88b6
   170ec:	movw	r3, #38154	; 0x950a
   170f0:	movw	r2, #1617	; 0x651
   170f4:	movt	r0, #1
   170f8:	movt	r1, #1
   170fc:	movt	r3, #1
   17100:	bl	12498 <__assert_fail@plt>

00017104 <flatcc_builder_union_vector_count@@Base>:
   17104:	ldr	r0, [r0, #32]
   17108:	ldr	r0, [r0, #20]
   1710c:	bx	lr

00017110 <flatcc_builder_union_vector_edit@@Base>:
   17110:	ldr	r0, [r0, #16]
   17114:	bx	lr

00017118 <flatcc_builder_extend_union_vector@@Base>:
   17118:	push	{r4, r5, fp, lr}
   1711c:	add	fp, sp, #8
   17120:	sub	sp, sp, #8
   17124:	mov	r4, r0
   17128:	ldr	r0, [r0, #32]
   1712c:	ldr	r2, [r0, #20]
   17130:	adds	r2, r2, r1
   17134:	cmpcc	r2, #536870912	; 0x20000000
   17138:	bcc	1715c <flatcc_builder_extend_union_vector@@Base+0x44>
   1713c:	movw	r0, #39269	; 0x9965
   17140:	movw	r1, #34998	; 0x88b6
   17144:	movw	r3, #39296	; 0x9980
   17148:	mov	r2, #892	; 0x37c
   1714c:	movt	r0, #1
   17150:	movt	r1, #1
   17154:	movt	r3, #1
   17158:	bl	12498 <__assert_fail@plt>
   1715c:	str	r2, [r0, #20]
   17160:	ldr	r5, [r4, #20]
   17164:	ldr	r0, [r4, #24]
   17168:	add	r1, r5, r1, lsl #3
   1716c:	cmp	r1, r0
   17170:	str	r1, [r4, #20]
   17174:	bcs	17188 <flatcc_builder_extend_union_vector@@Base+0x70>
   17178:	ldr	r0, [r4, #16]
   1717c:	add	r0, r0, r5
   17180:	sub	sp, fp, #8
   17184:	pop	{r4, r5, fp, pc}
   17188:	ldr	r2, [r4, #28]
   1718c:	ldr	r0, [r4, #40]	; 0x28
   17190:	ldr	ip, [r4, #48]	; 0x30
   17194:	mov	r3, #1
   17198:	str	r3, [sp]
   1719c:	mov	r3, #1
   171a0:	add	r1, r1, r2
   171a4:	add	r2, r1, #1
   171a8:	add	r1, r4, #60	; 0x3c
   171ac:	blx	ip
   171b0:	mov	r1, r0
   171b4:	mov	r0, #0
   171b8:	cmp	r1, #0
   171bc:	beq	171c8 <flatcc_builder_extend_union_vector@@Base+0xb0>
   171c0:	sub	sp, fp, #8
   171c4:	pop	{r4, r5, fp, pc}
   171c8:	ldr	r1, [r4, #28]
   171cc:	ldr	r0, [r4, #60]	; 0x3c
   171d0:	ldr	r3, [r4, #64]	; 0x40
   171d4:	ldr	r2, [r4, #32]
   171d8:	add	r0, r0, r1
   171dc:	sub	r1, r3, r1
   171e0:	mvn	r3, #3
   171e4:	cmn	r1, #4
   171e8:	str	r0, [r4, #16]
   171ec:	movcs	r1, r3
   171f0:	str	r1, [r4, #24]
   171f4:	str	r3, [r2, #4]
   171f8:	add	r0, r0, r5
   171fc:	sub	sp, fp, #8
   17200:	pop	{r4, r5, fp, pc}

00017204 <flatcc_builder_truncate_union_vector@@Base>:
   17204:	push	{fp, lr}
   17208:	mov	fp, sp
   1720c:	ldr	r2, [r0, #32]
   17210:	ldrh	r3, [r2, #14]
   17214:	cmp	r3, #7
   17218:	bne	17260 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   1721c:	ldr	r3, [r2, #20]
   17220:	cmp	r3, r1
   17224:	bcc	17280 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   17228:	sub	r3, r3, r1
   1722c:	str	r3, [r2, #20]
   17230:	ldr	r2, [r0, #32]
   17234:	ldr	r3, [r0, #20]
   17238:	ldr	ip, [r0, #16]
   1723c:	ldr	r2, [r2, #16]
   17240:	mls	r3, r2, r1, r3
   17244:	mul	r2, r2, r1
   17248:	mov	r1, #0
   1724c:	str	r3, [r0, #20]
   17250:	add	r0, ip, r3
   17254:	bl	12468 <memset@plt>
   17258:	mov	r0, #0
   1725c:	pop	{fp, pc}
   17260:	movw	r0, #38104	; 0x94d8
   17264:	movw	r1, #34998	; 0x88b6
   17268:	movw	r3, #38237	; 0x955d
   1726c:	movw	r2, #1665	; 0x681
   17270:	movt	r0, #1
   17274:	movt	r1, #1
   17278:	movt	r3, #1
   1727c:	bl	12498 <__assert_fail@plt>
   17280:	movw	r0, #36668	; 0x8f3c
   17284:	movw	r1, #34998	; 0x88b6
   17288:	movw	r3, #38237	; 0x955d
   1728c:	movw	r2, #1666	; 0x682
   17290:	movt	r0, #1
   17294:	movt	r1, #1
   17298:	movt	r3, #1
   1729c:	bl	12498 <__assert_fail@plt>

000172a0 <flatcc_builder_union_vector_push@@Base>:
   172a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   172a4:	add	fp, sp, #24
   172a8:	sub	sp, sp, #8
   172ac:	mov	r7, r0
   172b0:	ldr	r0, [r0, #32]
   172b4:	mov	r9, r1
   172b8:	ldrh	r1, [r0, #14]
   172bc:	cmp	r1, #7
   172c0:	bne	17388 <flatcc_builder_union_vector_push@@Base+0xe8>
   172c4:	ldr	r1, [r0, #20]
   172c8:	mov	r6, #0
   172cc:	cmn	r1, #-536870911	; 0xe0000001
   172d0:	beq	17330 <flatcc_builder_union_vector_push@@Base+0x90>
   172d4:	add	r1, r1, #1
   172d8:	mov	r8, r2
   172dc:	str	r1, [r0, #20]
   172e0:	ldr	r4, [r7, #20]
   172e4:	ldr	r0, [r7, #24]
   172e8:	add	r1, r4, #8
   172ec:	cmp	r1, r0
   172f0:	str	r1, [r7, #20]
   172f4:	bcs	17300 <flatcc_builder_union_vector_push@@Base+0x60>
   172f8:	ldr	r0, [r7, #16]
   172fc:	b	1736c <flatcc_builder_union_vector_push@@Base+0xcc>
   17300:	ldr	r1, [r7, #28]
   17304:	ldr	r0, [r7, #40]	; 0x28
   17308:	ldr	r5, [r7, #48]	; 0x30
   1730c:	mov	r2, #1
   17310:	mov	r3, #1
   17314:	str	r2, [sp]
   17318:	add	r1, r4, r1
   1731c:	add	r2, r1, #9
   17320:	add	r1, r7, #60	; 0x3c
   17324:	blx	r5
   17328:	cmp	r0, #0
   1732c:	beq	1733c <flatcc_builder_union_vector_push@@Base+0x9c>
   17330:	mov	r0, r6
   17334:	sub	sp, fp, #24
   17338:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1733c:	ldr	r1, [r7, #28]
   17340:	ldr	r0, [r7, #60]	; 0x3c
   17344:	ldr	r3, [r7, #64]	; 0x40
   17348:	ldr	r2, [r7, #32]
   1734c:	add	r0, r0, r1
   17350:	sub	r1, r3, r1
   17354:	mvn	r3, #3
   17358:	cmn	r1, #4
   1735c:	str	r0, [r7, #16]
   17360:	movcs	r1, r3
   17364:	str	r1, [r7, #24]
   17368:	str	r3, [r2, #4]
   1736c:	adds	r0, r0, r4
   17370:	movne	r6, r0
   17374:	strne	r9, [r0]
   17378:	strne	r8, [r0, #4]
   1737c:	mov	r0, r6
   17380:	sub	sp, fp, #24
   17384:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17388:	movw	r0, #38104	; 0x94d8
   1738c:	movw	r1, #34998	; 0x88b6
   17390:	movw	r3, #38306	; 0x95a2
   17394:	movw	r2, #1677	; 0x68d
   17398:	movt	r0, #1
   1739c:	movt	r1, #1
   173a0:	movt	r3, #1
   173a4:	bl	12498 <__assert_fail@plt>

000173a8 <flatcc_builder_append_union_vector@@Base>:
   173a8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   173ac:	add	fp, sp, #24
   173b0:	sub	sp, sp, #8
   173b4:	mov	r6, r0
   173b8:	ldr	r0, [r0, #32]
   173bc:	mov	r8, r1
   173c0:	ldrh	r1, [r0, #14]
   173c4:	cmp	r1, #7
   173c8:	bne	174cc <flatcc_builder_append_union_vector@@Base+0x124>
   173cc:	ldr	r1, [r0, #20]
   173d0:	mov	r5, r2
   173d4:	adds	r1, r1, r2
   173d8:	cmpcc	r1, #536870912	; 0x20000000
   173dc:	bcc	17400 <flatcc_builder_append_union_vector@@Base+0x58>
   173e0:	movw	r0, #39269	; 0x9965
   173e4:	movw	r1, #34998	; 0x88b6
   173e8:	movw	r3, #39296	; 0x9980
   173ec:	mov	r2, #892	; 0x37c
   173f0:	movt	r0, #1
   173f4:	movt	r1, #1
   173f8:	movt	r3, #1
   173fc:	bl	12498 <__assert_fail@plt>
   17400:	str	r1, [r0, #20]
   17404:	ldr	r4, [r6, #20]
   17408:	ldr	r0, [r6, #24]
   1740c:	add	r1, r4, r5, lsl #3
   17410:	cmp	r1, r0
   17414:	str	r1, [r6, #20]
   17418:	bcs	17444 <flatcc_builder_append_union_vector@@Base+0x9c>
   1741c:	ldr	r0, [r6, #16]
   17420:	adds	r7, r0, r4
   17424:	beq	174bc <flatcc_builder_append_union_vector@@Base+0x114>
   17428:	lsl	r2, r5, #3
   1742c:	mov	r0, r7
   17430:	mov	r1, r8
   17434:	bl	123e4 <memcpy@plt>
   17438:	mov	r0, r7
   1743c:	sub	sp, fp, #24
   17440:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17444:	ldr	r2, [r6, #28]
   17448:	ldr	r0, [r6, #40]	; 0x28
   1744c:	ldr	r7, [r6, #48]	; 0x30
   17450:	mov	r3, #1
   17454:	str	r3, [sp]
   17458:	mov	r3, #1
   1745c:	add	r1, r1, r2
   17460:	add	r2, r1, #1
   17464:	add	r1, r6, #60	; 0x3c
   17468:	blx	r7
   1746c:	mov	r7, #0
   17470:	cmp	r0, #0
   17474:	beq	17484 <flatcc_builder_append_union_vector@@Base+0xdc>
   17478:	mov	r0, r7
   1747c:	sub	sp, fp, #24
   17480:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17484:	ldr	r1, [r6, #28]
   17488:	ldr	r0, [r6, #60]	; 0x3c
   1748c:	ldr	r3, [r6, #64]	; 0x40
   17490:	ldr	r2, [r6, #32]
   17494:	add	r0, r0, r1
   17498:	sub	r1, r3, r1
   1749c:	mvn	r3, #3
   174a0:	cmn	r1, #4
   174a4:	str	r0, [r6, #16]
   174a8:	movcs	r1, r3
   174ac:	str	r1, [r6, #24]
   174b0:	str	r3, [r2, #4]
   174b4:	adds	r7, r0, r4
   174b8:	bne	17428 <flatcc_builder_append_union_vector@@Base+0x80>
   174bc:	mov	r7, #0
   174c0:	mov	r0, r7
   174c4:	sub	sp, fp, #24
   174c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   174cc:	movw	r0, #38104	; 0x94d8
   174d0:	movw	r1, #34998	; 0x88b6
   174d4:	movw	r3, #38415	; 0x960f
   174d8:	movw	r2, #1692	; 0x69c
   174dc:	movt	r0, #1
   174e0:	movt	r1, #1
   174e4:	movt	r3, #1
   174e8:	bl	12498 <__assert_fail@plt>

000174ec <flatcc_builder_create_string@@Base>:
   174ec:	push	{r4, r5, r6, sl, fp, lr}
   174f0:	add	fp, sp, #16
   174f4:	sub	sp, sp, #80	; 0x50
   174f8:	str	r2, [fp, #-20]	; 0xffffffec
   174fc:	mvn	r5, r2
   17500:	mov	r6, r0
   17504:	sub	r3, fp, #20
   17508:	cmp	r2, #0
   1750c:	add	lr, sp, #4
   17510:	ldr	ip, [r0, #136]	; 0x88
   17514:	mov	r0, #4
   17518:	str	r0, [sp, #16]
   1751c:	str	r3, [sp, #12]
   17520:	mov	r3, #1
   17524:	str	r0, [sp, #4]
   17528:	addne	r0, r2, #4
   1752c:	str	r3, [sp, #8]
   17530:	strne	r2, [sp, #24]
   17534:	movw	r2, #34468	; 0x86a4
   17538:	movne	r3, #2
   1753c:	strne	r1, [sp, #20]
   17540:	strne	r3, [sp, #8]
   17544:	strne	r0, [sp, #4]
   17548:	movt	r2, #1
   1754c:	add	r5, ip, r5
   17550:	and	r5, r5, #3
   17554:	add	r5, r5, #1
   17558:	add	r1, r0, r5
   1755c:	add	r0, lr, r3, lsl #3
   17560:	str	r1, [sp, #4]
   17564:	cmp	r1, #0
   17568:	str	r2, [r0, #8]
   1756c:	add	r2, r3, #1
   17570:	str	r5, [r0, #12]
   17574:	str	r2, [sp, #8]
   17578:	ble	175cc <flatcc_builder_create_string@@Base+0xe0>
   1757c:	ldr	r0, [r6, #36]	; 0x24
   17580:	ldr	r4, [r6, #44]	; 0x2c
   17584:	sub	r5, ip, r1
   17588:	str	r1, [sp]
   1758c:	add	r1, lr, #8
   17590:	mov	r3, r5
   17594:	blx	r4
   17598:	cmp	r0, #0
   1759c:	streq	r5, [r6, #136]	; 0x88
   175a0:	moveq	r0, r5
   175a4:	subeq	sp, fp, #16
   175a8:	popeq	{r4, r5, r6, sl, fp, pc}
   175ac:	movw	r0, #39516	; 0x9a5c
   175b0:	movw	r1, #34998	; 0x88b6
   175b4:	movw	r3, #39195	; 0x991b
   175b8:	movw	r2, #651	; 0x28b
   175bc:	movt	r0, #1
   175c0:	movt	r1, #1
   175c4:	movt	r3, #1
   175c8:	bl	12498 <__assert_fail@plt>
   175cc:	movw	r0, #39516	; 0x9a5c
   175d0:	movw	r1, #34998	; 0x88b6
   175d4:	movw	r3, #39195	; 0x991b
   175d8:	movw	r2, #647	; 0x287
   175dc:	movt	r0, #1
   175e0:	movt	r1, #1
   175e4:	movt	r3, #1
   175e8:	bl	12498 <__assert_fail@plt>

000175ec <flatcc_builder_create_string_str@@Base>:
   175ec:	push	{r4, r5, fp, lr}
   175f0:	add	fp, sp, #8
   175f4:	mov	r5, r0
   175f8:	mov	r0, r1
   175fc:	mov	r4, r1
   17600:	bl	12450 <strlen@plt>
   17604:	mov	r2, r0
   17608:	mov	r0, r5
   1760c:	mov	r1, r4
   17610:	pop	{r4, r5, fp, lr}
   17614:	b	174ec <flatcc_builder_create_string@@Base>

00017618 <flatcc_builder_create_string_strn@@Base>:
   17618:	push	{r4, r5, r6, sl, fp, lr}
   1761c:	add	fp, sp, #16
   17620:	mov	r6, r0
   17624:	mov	r5, r1
   17628:	mov	r0, r1
   1762c:	mov	r1, #0
   17630:	mov	r4, r2
   17634:	bl	12474 <memchr@plt>
   17638:	cmp	r0, #0
   1763c:	mov	r1, r5
   17640:	subne	r4, r0, r5
   17644:	mov	r0, r6
   17648:	mov	r2, r4
   1764c:	pop	{r4, r5, r6, sl, fp, lr}
   17650:	b	174ec <flatcc_builder_create_string@@Base>

00017654 <flatcc_builder_end_string@@Base>:
   17654:	push	{r4, r5, fp, lr}
   17658:	add	fp, sp, #8
   1765c:	mov	r4, r0
   17660:	ldr	r0, [r0, #32]
   17664:	ldrh	r1, [r0, #14]
   17668:	cmp	r1, #6
   1766c:	bne	17714 <flatcc_builder_end_string@@Base+0xc0>
   17670:	ldr	r2, [r0, #20]
   17674:	ldr	r0, [r4, #20]
   17678:	cmp	r2, r0
   1767c:	bne	17734 <flatcc_builder_end_string@@Base+0xe0>
   17680:	ldr	r1, [r4, #16]
   17684:	mov	r0, r4
   17688:	bl	174ec <flatcc_builder_create_string@@Base>
   1768c:	mov	r5, r0
   17690:	cmp	r0, #0
   17694:	beq	1770c <flatcc_builder_end_string@@Base+0xb8>
   17698:	ldr	r0, [r4, #16]
   1769c:	ldr	r2, [r4, #20]
   176a0:	mov	r1, #0
   176a4:	bl	12468 <memset@plt>
   176a8:	ldr	r0, [r4, #32]
   176ac:	ldr	r1, [r4, #60]	; 0x3c
   176b0:	ldr	ip, [r4, #64]	; 0x40
   176b4:	ldr	r3, [r0, #8]
   176b8:	str	r3, [r4, #20]
   176bc:	ldr	r3, [r0]
   176c0:	str	r3, [r4, #28]
   176c4:	add	r1, r1, r3
   176c8:	ldr	r2, [r0, #4]
   176cc:	str	r1, [r4, #16]
   176d0:	sub	r1, ip, r3
   176d4:	cmp	r1, r2
   176d8:	movhi	r1, r2
   176dc:	str	r1, [r4, #24]
   176e0:	ldrh	r1, [r4, #130]	; 0x82
   176e4:	ldrh	r2, [r4, #128]	; 0x80
   176e8:	cmp	r2, r1
   176ec:	strhcc	r1, [r4, #128]	; 0x80
   176f0:	ldrh	r1, [r0, #12]
   176f4:	sub	r0, r0, #36	; 0x24
   176f8:	str	r0, [r4, #32]
   176fc:	strh	r1, [r4, #130]	; 0x82
   17700:	ldr	r0, [r4, #156]	; 0x9c
   17704:	sub	r0, r0, #1
   17708:	str	r0, [r4, #156]	; 0x9c
   1770c:	mov	r0, r5
   17710:	pop	{r4, r5, fp, pc}
   17714:	movw	r0, #36315	; 0x8ddb
   17718:	movw	r1, #34998	; 0x88b6
   1771c:	movw	r3, #38542	; 0x968e
   17720:	movw	r2, #1732	; 0x6c4
   17724:	movt	r0, #1
   17728:	movt	r1, #1
   1772c:	movt	r3, #1
   17730:	bl	12498 <__assert_fail@plt>
   17734:	movw	r0, #38609	; 0x96d1
   17738:	movw	r1, #34998	; 0x88b6
   1773c:	movw	r3, #38542	; 0x968e
   17740:	movw	r2, #1733	; 0x6c5
   17744:	movt	r0, #1
   17748:	movt	r1, #1
   1774c:	movt	r3, #1
   17750:	bl	12498 <__assert_fail@plt>

00017754 <flatcc_builder_string_edit@@Base>:
   17754:	ldr	r0, [r0, #16]
   17758:	bx	lr

0001775c <flatcc_builder_string_len@@Base>:
   1775c:	ldr	r0, [r0, #32]
   17760:	ldr	r0, [r0, #20]
   17764:	bx	lr

00017768 <flatcc_builder_table_edit@@Base>:
   17768:	push	{fp, lr}
   1776c:	mov	fp, sp
   17770:	ldr	r2, [r0, #32]
   17774:	ldrh	r2, [r2, #14]
   17778:	cmp	r2, #3
   1777c:	ldreq	r2, [r0, #16]
   17780:	ldreq	r0, [r0, #20]
   17784:	addeq	r0, r2, r0
   17788:	subeq	r0, r0, r1
   1778c:	popeq	{fp, pc}
   17790:	movw	r0, #37067	; 0x90cb
   17794:	movw	r1, #34998	; 0x88b6
   17798:	movw	r3, #38787	; 0x9783
   1779c:	movw	r2, #1794	; 0x702
   177a0:	movt	r0, #1
   177a4:	movt	r1, #1
   177a8:	movt	r3, #1
   177ac:	bl	12498 <__assert_fail@plt>

000177b0 <flatcc_builder_table_add_copy@@Base>:
   177b0:	push	{r4, r5, r6, sl, fp, lr}
   177b4:	add	fp, sp, #16
   177b8:	mov	r4, r3
   177bc:	ldr	r3, [fp, #8]
   177c0:	mov	r5, r2
   177c4:	mov	r2, r4
   177c8:	bl	167f4 <flatcc_builder_table_add@@Base>
   177cc:	mov	r6, r0
   177d0:	cmp	r0, #0
   177d4:	beq	177e8 <flatcc_builder_table_add_copy@@Base+0x38>
   177d8:	mov	r0, r6
   177dc:	mov	r1, r5
   177e0:	mov	r2, r4
   177e4:	bl	123e4 <memcpy@plt>
   177e8:	mov	r0, r6
   177ec:	pop	{r4, r5, r6, sl, fp, pc}

000177f0 <flatcc_builder_push_buffer_alignment@@Base>:
   177f0:	ldrh	r1, [r0, #128]	; 0x80
   177f4:	mov	r2, #4
   177f8:	strh	r2, [r0, #128]	; 0x80
   177fc:	mov	r0, r1
   17800:	bx	lr

00017804 <flatcc_builder_pop_buffer_alignment@@Base>:
   17804:	ldrh	r2, [r0, #128]	; 0x80
   17808:	cmp	r2, r1
   1780c:	strhcc	r1, [r0, #128]	; 0x80
   17810:	bx	lr

00017814 <flatcc_builder_get_buffer_alignment@@Base>:
   17814:	ldrh	r0, [r0, #128]	; 0x80
   17818:	bx	lr

0001781c <flatcc_builder_set_vtable_clustering@@Base>:
   1781c:	clz	r1, r1
   17820:	lsr	r1, r1, #5
   17824:	str	r1, [r0, #180]	; 0xb4
   17828:	bx	lr

0001782c <flatcc_builder_set_block_align@@Base>:
   1782c:	strh	r1, [r0, #132]	; 0x84
   17830:	bx	lr

00017834 <flatcc_builder_get_level@@Base>:
   17834:	ldr	r0, [r0, #156]	; 0x9c
   17838:	bx	lr

0001783c <flatcc_builder_set_max_level@@Base>:
   1783c:	str	r1, [r0, #176]	; 0xb0
   17840:	ldr	r2, [r0, #160]	; 0xa0
   17844:	cmp	r2, r1
   17848:	strlt	r1, [r0, #160]	; 0xa0
   1784c:	bx	lr

00017850 <flatcc_builder_get_buffer_size@@Base>:
   17850:	ldr	r1, [r0, #136]	; 0x88
   17854:	ldr	r0, [r0, #140]	; 0x8c
   17858:	sub	r0, r0, r1
   1785c:	bx	lr

00017860 <flatcc_builder_get_buffer_start@@Base>:
   17860:	ldr	r0, [r0, #136]	; 0x88
   17864:	bx	lr

00017868 <flatcc_builder_get_buffer_end@@Base>:
   17868:	ldr	r0, [r0, #140]	; 0x8c
   1786c:	bx	lr

00017870 <flatcc_builder_set_vtable_cache_limit@@Base>:
   17870:	str	r1, [r0, #172]	; 0xac
   17874:	bx	lr

00017878 <flatcc_builder_set_identifier@@Base>:
   17878:	movw	r2, #34468	; 0x86a4
   1787c:	cmp	r1, #0
   17880:	movt	r2, #1
   17884:	movne	r2, r1
   17888:	ldr	r1, [r2]
   1788c:	str	r1, [r0, #168]	; 0xa8
   17890:	bx	lr

00017894 <flatcc_builder_get_type@@Base>:
   17894:	ldr	r0, [r0, #32]
   17898:	cmp	r0, #0
   1789c:	ldrhne	r0, [r0, #14]
   178a0:	moveq	r0, #0
   178a4:	bx	lr

000178a8 <flatcc_builder_get_type_at@@Base>:
   178a8:	mov	r2, r0
   178ac:	mov	r0, #0
   178b0:	cmp	r1, #1
   178b4:	blt	178d8 <flatcc_builder_get_type_at@@Base+0x30>
   178b8:	ldr	r3, [r2, #156]	; 0x9c
   178bc:	cmp	r3, r1
   178c0:	bxlt	lr
   178c4:	sub	r0, r1, r3
   178c8:	ldr	r1, [r2, #32]
   178cc:	add	r0, r0, r0, lsl #3
   178d0:	add	r0, r1, r0, lsl #2
   178d4:	ldrh	r0, [r0, #14]
   178d8:	bx	lr

000178dc <flatcc_builder_get_direct_buffer@@Base>:
   178dc:	ldr	r2, [r0, #184]	; 0xb8
   178e0:	cmp	r2, #0
   178e4:	beq	178f8 <flatcc_builder_get_direct_buffer@@Base+0x1c>
   178e8:	ldr	r2, [r0, #188]	; 0xbc
   178ec:	ldr	r3, [r0, #192]	; 0xc0
   178f0:	cmp	r2, r3
   178f4:	beq	17910 <flatcc_builder_get_direct_buffer@@Base+0x34>
   178f8:	cmp	r1, #0
   178fc:	moveq	r0, #0
   17900:	bxeq	lr
   17904:	mov	r0, #0
   17908:	str	r0, [r1]
   1790c:	bx	lr
   17910:	cmp	r1, #0
   17914:	ldrne	r2, [r0, #212]	; 0xd4
   17918:	strne	r2, [r1]
   1791c:	ldr	r0, [r0, #196]	; 0xc4
   17920:	bx	lr

00017924 <flatcc_builder_copy_buffer@@Base>:
   17924:	push	{fp, lr}
   17928:	mov	fp, sp
   1792c:	ldr	r3, [r0, #184]	; 0xb8
   17930:	cmp	r3, #0
   17934:	beq	17968 <flatcc_builder_copy_buffer@@Base+0x44>
   17938:	add	r0, r0, #188	; 0xbc
   1793c:	bl	18068 <flatcc_emitter_copy_buffer@@Base>
   17940:	cmp	r0, #0
   17944:	popne	{fp, pc}
   17948:	movw	r0, #33369	; 0x8259
   1794c:	movw	r1, #34998	; 0x88b6
   17950:	movw	r3, #38926	; 0x980e
   17954:	movw	r2, #1926	; 0x786
   17958:	movt	r0, #1
   1795c:	movt	r1, #1
   17960:	movt	r3, #1
   17964:	bl	12498 <__assert_fail@plt>
   17968:	mov	r0, #0
   1796c:	pop	{fp, pc}

00017970 <flatcc_builder_finalize_buffer@@Base>:
   17970:	push	{r4, r5, r6, sl, fp, lr}
   17974:	add	fp, sp, #16
   17978:	mov	r5, r0
   1797c:	ldr	r0, [r0, #136]	; 0x88
   17980:	cmp	r1, #0
   17984:	ldr	r2, [r5, #140]	; 0x8c
   17988:	sub	r4, r2, r0
   1798c:	mov	r0, r4
   17990:	strne	r4, [r1]
   17994:	bl	12420 <malloc@plt>
   17998:	cmp	r0, #0
   1799c:	beq	179ec <flatcc_builder_finalize_buffer@@Base+0x7c>
   179a0:	mov	r6, r0
   179a4:	ldr	r0, [r5, #184]	; 0xb8
   179a8:	cmp	r0, #0
   179ac:	beq	17a0c <flatcc_builder_finalize_buffer@@Base+0x9c>
   179b0:	add	r0, r5, #188	; 0xbc
   179b4:	mov	r1, r6
   179b8:	mov	r2, r4
   179bc:	bl	18068 <flatcc_emitter_copy_buffer@@Base>
   179c0:	cmp	r0, #0
   179c4:	movne	r0, r6
   179c8:	popne	{r4, r5, r6, sl, fp, pc}
   179cc:	movw	r0, #33369	; 0x8259
   179d0:	movw	r1, #34998	; 0x88b6
   179d4:	movw	r3, #38926	; 0x980e
   179d8:	movw	r2, #1926	; 0x786
   179dc:	movt	r0, #1
   179e0:	movt	r1, #1
   179e4:	movt	r3, #1
   179e8:	bl	12498 <__assert_fail@plt>
   179ec:	movw	r0, #39516	; 0x9a5c
   179f0:	movw	r1, #34998	; 0x88b6
   179f4:	movw	r3, #38995	; 0x9853
   179f8:	movw	r2, #1944	; 0x798
   179fc:	movt	r0, #1
   17a00:	movt	r1, #1
   17a04:	movt	r3, #1
   17a08:	bl	12498 <__assert_fail@plt>
   17a0c:	movw	r0, #39516	; 0x9a5c
   17a10:	movw	r1, #34998	; 0x88b6
   17a14:	movw	r3, #38995	; 0x9853
   17a18:	movw	r2, #1948	; 0x79c
   17a1c:	movt	r0, #1
   17a20:	movt	r1, #1
   17a24:	movt	r3, #1
   17a28:	bl	12498 <__assert_fail@plt>

00017a2c <flatcc_builder_finalize_aligned_buffer@@Base>:
   17a2c:	push	{r4, r5, r6, r7, fp, lr}
   17a30:	add	fp, sp, #16
   17a34:	sub	sp, sp, #8
   17a38:	mov	r5, r0
   17a3c:	mov	r4, r1
   17a40:	ldr	r0, [r0, #136]	; 0x88
   17a44:	ldr	r1, [r5, #140]	; 0x8c
   17a48:	cmp	r4, #0
   17a4c:	sub	r0, r1, r0
   17a50:	mov	r1, #0
   17a54:	strne	r0, [r4]
   17a58:	ldrh	r2, [r5, #128]	; 0x80
   17a5c:	str	r1, [sp, #4]
   17a60:	add	r0, r0, r2
   17a64:	cmp	r2, #4
   17a68:	mov	r1, r2
   17a6c:	rsb	r2, r2, #0
   17a70:	sub	r0, r0, #1
   17a74:	movls	r1, #4
   17a78:	and	r7, r0, r2
   17a7c:	add	r0, sp, #4
   17a80:	mov	r2, r7
   17a84:	bl	1245c <posix_memalign@plt>
   17a88:	ldr	r6, [sp, #4]
   17a8c:	cmp	r0, #0
   17a90:	cmpne	r6, #0
   17a94:	bne	17ad0 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17a98:	cmp	r6, #0
   17a9c:	beq	17ad8 <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   17aa0:	ldr	r0, [r5, #184]	; 0xb8
   17aa4:	cmp	r0, #0
   17aa8:	beq	17ad0 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17aac:	add	r0, r5, #188	; 0xbc
   17ab0:	mov	r1, r6
   17ab4:	mov	r2, r7
   17ab8:	bl	18068 <flatcc_emitter_copy_buffer@@Base>
   17abc:	cmp	r0, #0
   17ac0:	beq	17af0 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   17ac4:	mov	r0, r6
   17ac8:	sub	sp, fp, #16
   17acc:	pop	{r4, r5, r6, r7, fp, pc}
   17ad0:	mov	r0, r6
   17ad4:	bl	123d8 <free@plt>
   17ad8:	mov	r6, #0
   17adc:	cmp	r4, #0
   17ae0:	strne	r6, [r4]
   17ae4:	mov	r0, r6
   17ae8:	sub	sp, fp, #16
   17aec:	pop	{r4, r5, r6, r7, fp, pc}
   17af0:	movw	r0, #33369	; 0x8259
   17af4:	movw	r1, #34998	; 0x88b6
   17af8:	movw	r3, #38926	; 0x980e
   17afc:	movw	r2, #1926	; 0x786
   17b00:	movt	r0, #1
   17b04:	movt	r1, #1
   17b08:	movt	r3, #1
   17b0c:	bl	12498 <__assert_fail@plt>

00017b10 <flatcc_builder_aligned_alloc@@Base>:
   17b10:	push	{fp, lr}
   17b14:	mov	fp, sp
   17b18:	sub	sp, sp, #8
   17b1c:	mov	r2, r1
   17b20:	mov	r1, r0
   17b24:	mov	r0, #0
   17b28:	cmp	r1, #4
   17b2c:	str	r0, [sp, #4]
   17b30:	add	r0, sp, #4
   17b34:	movls	r1, #4
   17b38:	bl	1245c <posix_memalign@plt>
   17b3c:	mov	r1, r0
   17b40:	ldr	r0, [sp, #4]
   17b44:	cmp	r1, #0
   17b48:	cmpne	r0, #0
   17b4c:	bne	17b58 <flatcc_builder_aligned_alloc@@Base+0x48>
   17b50:	mov	sp, fp
   17b54:	pop	{fp, pc}
   17b58:	bl	123d8 <free@plt>
   17b5c:	mov	r0, #0
   17b60:	str	r0, [sp, #4]
   17b64:	mov	sp, fp
   17b68:	pop	{fp, pc}

00017b6c <flatcc_builder_aligned_free@@Base>:
   17b6c:	b	123d8 <free@plt>

00017b70 <flatcc_builder_get_emit_context@@Base>:
   17b70:	ldr	r0, [r0, #36]	; 0x24
   17b74:	bx	lr

00017b78 <flatcc_emitter_recycle_page@@Base>:
   17b78:	ldr	r3, [r0]
   17b7c:	mov	r2, r0
   17b80:	mvn	r0, #0
   17b84:	cmp	r3, r1
   17b88:	beq	17bc8 <flatcc_emitter_recycle_page@@Base+0x50>
   17b8c:	ldr	r2, [r2, #4]
   17b90:	cmp	r2, r1
   17b94:	bxeq	lr
   17b98:	ldr	r0, [r1, #2944]	; 0xb80
   17b9c:	ldr	r2, [r1, #2948]	; 0xb84
   17ba0:	str	r2, [r0, #2948]	; 0xb84
   17ba4:	ldr	r2, [r1, #2948]	; 0xb84
   17ba8:	str	r0, [r2, #2944]	; 0xb80
   17bac:	ldr	r0, [r3, #2948]	; 0xb84
   17bb0:	str	r3, [r1, #2944]	; 0xb80
   17bb4:	str	r0, [r1, #2948]	; 0xb84
   17bb8:	str	r1, [r0, #2944]	; 0xb80
   17bbc:	ldr	r0, [r1, #2944]	; 0xb80
   17bc0:	str	r1, [r0, #2948]	; 0xb84
   17bc4:	mov	r0, #0
   17bc8:	bx	lr

00017bcc <flatcc_emitter_reset@@Base>:
   17bcc:	push	{r4, sl, fp, lr}
   17bd0:	add	fp, sp, #8
   17bd4:	ldr	r1, [r0]
   17bd8:	cmp	r1, #0
   17bdc:	beq	17c94 <flatcc_emitter_reset@@Base+0xc8>
   17be0:	mov	r4, r0
   17be4:	add	r2, r1, #1472	; 0x5c0
   17be8:	mov	r0, #1472	; 0x5c0
   17bec:	mov	r3, #0
   17bf0:	stmib	r4, {r1, r2}
   17bf4:	str	r0, [r4, #12]
   17bf8:	str	r2, [r4, #16]
   17bfc:	str	r0, [r4, #20]
   17c00:	movw	r0, #64064	; 0xfa40
   17c04:	movt	r0, #65535	; 0xffff
   17c08:	str	r0, [r1, #2952]	; 0xb88
   17c0c:	ldr	r2, [r4, #32]
   17c10:	ldr	r0, [r4, #24]
   17c14:	cmp	r2, #0
   17c18:	moveq	r2, r0
   17c1c:	streq	r0, [r4, #32]
   17c20:	str	r3, [r4, #24]
   17c24:	add	r2, r2, r2, lsl #1
   17c28:	lsr	r2, r2, #2
   17c2c:	add	r0, r2, r0, lsr #2
   17c30:	str	r0, [r4, #32]
   17c34:	ldr	r2, [r4, #28]
   17c38:	cmp	r2, r0, lsl #1
   17c3c:	bls	17c94 <flatcc_emitter_reset@@Base+0xc8>
   17c40:	mov	r2, r1
   17c44:	ldr	r0, [r2, #2944]!	; 0xb80
   17c48:	cmp	r0, r1
   17c4c:	popeq	{r4, sl, fp, pc}
   17c50:	ldr	r3, [r0, #2944]	; 0xb80
   17c54:	str	r3, [r2]
   17c58:	ldr	r2, [r0, #2944]	; 0xb80
   17c5c:	str	r1, [r2, #2948]	; 0xb84
   17c60:	bl	123d8 <free@plt>
   17c64:	ldr	r0, [r4, #28]
   17c68:	ldr	r1, [r4, #32]
   17c6c:	sub	r0, r0, #2944	; 0xb80
   17c70:	cmp	r0, r1, lsl #1
   17c74:	str	r0, [r4, #28]
   17c78:	bls	17c94 <flatcc_emitter_reset@@Base+0xc8>
   17c7c:	ldr	r1, [r4, #4]
   17c80:	ldr	r3, [r4]
   17c84:	mov	r2, r1
   17c88:	ldr	r0, [r2, #2944]!	; 0xb80
   17c8c:	cmp	r0, r3
   17c90:	bne	17c50 <flatcc_emitter_reset@@Base+0x84>
   17c94:	pop	{r4, sl, fp, pc}

00017c98 <flatcc_emitter_clear@@Base>:
   17c98:	push	{r4, r5, r6, sl, fp, lr}
   17c9c:	add	fp, sp, #16
   17ca0:	ldr	r5, [r0]
   17ca4:	cmp	r5, #0
   17ca8:	beq	17d00 <flatcc_emitter_clear@@Base+0x68>
   17cac:	mov	r4, r0
   17cb0:	ldr	r0, [r5, #2948]	; 0xb84
   17cb4:	mov	r6, #0
   17cb8:	str	r6, [r0, #2944]	; 0xb80
   17cbc:	ldr	r0, [r5, #2944]	; 0xb80
   17cc0:	cmp	r0, #0
   17cc4:	beq	17ce0 <flatcc_emitter_clear@@Base+0x48>
   17cc8:	mov	r5, r0
   17ccc:	ldr	r0, [r0, #2948]	; 0xb84
   17cd0:	bl	123d8 <free@plt>
   17cd4:	ldr	r0, [r5, #2944]	; 0xb80
   17cd8:	cmp	r0, #0
   17cdc:	bne	17cc8 <flatcc_emitter_clear@@Base+0x30>
   17ce0:	mov	r0, r5
   17ce4:	bl	123d8 <free@plt>
   17ce8:	vmov.i32	q8, #0	; 0x00000000
   17cec:	add	r0, r4, #16
   17cf0:	vst1.32	{d16-d17}, [r0]
   17cf4:	mov	r0, #32
   17cf8:	vst1.32	{d16-d17}, [r4], r0
   17cfc:	str	r6, [r4]
   17d00:	pop	{r4, r5, r6, sl, fp, pc}

00017d04 <flatcc_emitter@@Base>:
   17d04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d08:	add	fp, sp, #28
   17d0c:	sub	sp, sp, #4
   17d10:	mov	r6, r0
   17d14:	mov	r7, r1
   17d18:	ldr	r0, [r0, #24]
   17d1c:	ldr	r1, [fp, #8]
   17d20:	mov	r4, r2
   17d24:	cmn	r3, #1
   17d28:	mov	r9, r6
   17d2c:	add	r0, r0, r1
   17d30:	str	r0, [r6, #24]
   17d34:	ble	17e9c <flatcc_emitter@@Base+0x198>
   17d38:	ldr	r0, [r9, #20]!
   17d3c:	cmp	r0, r1
   17d40:	bcs	17ffc <flatcc_emitter@@Base+0x2f8>
   17d44:	mov	r8, #0
   17d48:	cmp	r4, #0
   17d4c:	beq	1805c <flatcc_emitter@@Base+0x358>
   17d50:	movw	sl, #64064	; 0xfa40
   17d54:	movt	sl, #65535	; 0xffff
   17d58:	ldr	r8, [r7, #4]
   17d5c:	cmp	r8, #0
   17d60:	beq	17e80 <flatcc_emitter@@Base+0x17c>
   17d64:	ldr	r9, [r7]
   17d68:	cmp	r8, r0
   17d6c:	mov	r5, r8
   17d70:	bls	17d7c <flatcc_emitter@@Base+0x78>
   17d74:	b	17dbc <flatcc_emitter@@Base+0xb8>
   17d78:	mov	r5, r8
   17d7c:	ldr	r0, [r6, #16]
   17d80:	mov	r1, r9
   17d84:	mov	r2, r5
   17d88:	bl	123e4 <memcpy@plt>
   17d8c:	ldr	r0, [r6, #16]
   17d90:	ldr	r1, [r6, #20]
   17d94:	add	r9, r9, r5
   17d98:	subs	r8, r8, r5
   17d9c:	add	r2, r0, r5
   17da0:	sub	r0, r1, r5
   17da4:	str	r2, [r6, #16]
   17da8:	str	r0, [r6, #20]
   17dac:	beq	17e80 <flatcc_emitter@@Base+0x17c>
   17db0:	cmp	r8, r0
   17db4:	mov	r5, r8
   17db8:	bls	17d7c <flatcc_emitter@@Base+0x78>
   17dbc:	mov	r5, r0
   17dc0:	cmp	r5, #0
   17dc4:	beq	17e10 <flatcc_emitter@@Base+0x10c>
   17dc8:	b	17d7c <flatcc_emitter@@Base+0x78>
   17dcc:	ldr	r1, [r6]
   17dd0:	str	r1, [r0, #2944]	; 0xb80
   17dd4:	str	r5, [r0, #2948]	; 0xb84
   17dd8:	str	r0, [r1, #2948]	; 0xb84
   17ddc:	str	r0, [r5, #2944]	; 0xb80
   17de0:	mov	r5, #2944	; 0xb80
   17de4:	str	r0, [r6, #4]
   17de8:	str	r0, [r6, #16]
   17dec:	str	r5, [r6, #20]
   17df0:	ldr	r1, [r0, #2948]	; 0xb84
   17df4:	ldr	r1, [r1, #2952]	; 0xb88
   17df8:	add	r1, r1, #2944	; 0xb80
   17dfc:	str	r1, [r0, #2952]	; 0xb88
   17e00:	cmp	r8, r5
   17e04:	bls	17d78 <flatcc_emitter@@Base+0x74>
   17e08:	cmp	r5, #0
   17e0c:	bne	17d7c <flatcc_emitter@@Base+0x78>
   17e10:	ldr	r5, [r6, #4]
   17e14:	cmp	r5, #0
   17e18:	beq	17e2c <flatcc_emitter@@Base+0x128>
   17e1c:	ldr	r0, [r5, #2944]	; 0xb80
   17e20:	ldr	r1, [r6]
   17e24:	cmp	r0, r1
   17e28:	bne	17de0 <flatcc_emitter@@Base+0xdc>
   17e2c:	movw	r0, #2956	; 0xb8c
   17e30:	bl	12420 <malloc@plt>
   17e34:	cmp	r0, #0
   17e38:	beq	1800c <flatcc_emitter@@Base+0x308>
   17e3c:	ldr	r1, [r6, #28]
   17e40:	cmp	r5, #0
   17e44:	add	r1, r1, #2944	; 0xb80
   17e48:	str	r1, [r6, #28]
   17e4c:	bne	17dcc <flatcc_emitter@@Base+0xc8>
   17e50:	add	r1, r0, #1472	; 0x5c0
   17e54:	mov	r5, #1472	; 0x5c0
   17e58:	str	r0, [r6]
   17e5c:	stmib	r6, {r0, r1, r5}
   17e60:	str	r1, [r6, #16]
   17e64:	str	r5, [r6, #20]
   17e68:	str	r0, [r0, #2944]	; 0xb80
   17e6c:	str	r0, [r0, #2948]	; 0xb84
   17e70:	str	sl, [r0, #2952]	; 0xb88
   17e74:	cmp	r8, r5
   17e78:	bhi	17e08 <flatcc_emitter@@Base+0x104>
   17e7c:	b	17d78 <flatcc_emitter@@Base+0x74>
   17e80:	subs	r4, r4, #1
   17e84:	add	r7, r7, #8
   17e88:	bne	17d58 <flatcc_emitter@@Base+0x54>
   17e8c:	mov	r8, #0
   17e90:	mov	r0, r8
   17e94:	sub	sp, fp, #28
   17e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e9c:	ldr	r0, [r9, #12]!
   17ea0:	cmp	r0, r1
   17ea4:	bcs	1801c <flatcc_emitter@@Base+0x318>
   17ea8:	mov	r8, #0
   17eac:	cmp	r4, #0
   17eb0:	beq	1805c <flatcc_emitter@@Base+0x358>
   17eb4:	add	r0, r7, r4, lsl #3
   17eb8:	ldr	sl, [r0, #-4]
   17ebc:	sub	r1, r0, #8
   17ec0:	str	r1, [sp]
   17ec4:	cmp	sl, #0
   17ec8:	beq	17fec <flatcc_emitter@@Base+0x2e8>
   17ecc:	ldr	r0, [sp]
   17ed0:	ldr	r0, [r0]
   17ed4:	add	r7, r0, sl
   17ed8:	ldr	r1, [r9]
   17edc:	cmp	sl, r1
   17ee0:	bhi	17f20 <flatcc_emitter@@Base+0x21c>
   17ee4:	b	17fbc <flatcc_emitter@@Base+0x2b8>
   17ee8:	ldr	r1, [r5, #2952]	; 0xb88
   17eec:	sub	r1, r1, #2944	; 0xb80
   17ef0:	str	r1, [r0, #2952]	; 0xb88
   17ef4:	mov	r1, #2944	; 0xb80
   17ef8:	add	r2, r0, #2944	; 0xb80
   17efc:	str	r0, [r6]
   17f00:	str	r2, [r6, #8]
   17f04:	str	r1, [r6, #12]
   17f08:	ldr	r2, [r0, #2944]	; 0xb80
   17f0c:	ldr	r2, [r2, #2952]	; 0xb88
   17f10:	sub	r2, r2, #2944	; 0xb80
   17f14:	str	r2, [r0, #2952]	; 0xb88
   17f18:	cmp	sl, r1
   17f1c:	bls	17fbc <flatcc_emitter@@Base+0x2b8>
   17f20:	cmp	r1, #0
   17f24:	mov	r5, r1
   17f28:	bne	17fc0 <flatcc_emitter@@Base+0x2bc>
   17f2c:	ldr	r5, [r6]
   17f30:	cmp	r5, #0
   17f34:	beq	17f48 <flatcc_emitter@@Base+0x244>
   17f38:	ldr	r0, [r5, #2948]	; 0xb84
   17f3c:	ldr	r1, [r6, #4]
   17f40:	cmp	r0, r1
   17f44:	bne	17ee8 <flatcc_emitter@@Base+0x1e4>
   17f48:	movw	r0, #2956	; 0xb8c
   17f4c:	bl	12420 <malloc@plt>
   17f50:	cmp	r0, #0
   17f54:	beq	1800c <flatcc_emitter@@Base+0x308>
   17f58:	ldr	r1, [r6, #28]
   17f5c:	cmp	r5, #0
   17f60:	add	r1, r1, #2944	; 0xb80
   17f64:	str	r1, [r6, #28]
   17f68:	beq	17f84 <flatcc_emitter@@Base+0x280>
   17f6c:	ldr	r1, [r6, #4]
   17f70:	str	r5, [r0, #2944]	; 0xb80
   17f74:	str	r1, [r0, #2948]	; 0xb84
   17f78:	str	r0, [r5, #2948]	; 0xb84
   17f7c:	str	r0, [r1, #2944]	; 0xb80
   17f80:	b	17ef4 <flatcc_emitter@@Base+0x1f0>
   17f84:	add	r2, r0, #1472	; 0x5c0
   17f88:	mov	r1, #1472	; 0x5c0
   17f8c:	str	r0, [r6]
   17f90:	stmib	r6, {r0, r2}
   17f94:	str	r1, [r6, #12]
   17f98:	str	r2, [r6, #16]
   17f9c:	movw	r2, #64064	; 0xfa40
   17fa0:	str	r1, [r6, #20]
   17fa4:	str	r0, [r0, #2944]	; 0xb80
   17fa8:	str	r0, [r0, #2948]	; 0xb84
   17fac:	movt	r2, #65535	; 0xffff
   17fb0:	str	r2, [r0, #2952]	; 0xb88
   17fb4:	cmp	sl, r1
   17fb8:	bhi	17f20 <flatcc_emitter@@Base+0x21c>
   17fbc:	mov	r5, sl
   17fc0:	sub	r0, r1, r5
   17fc4:	sub	r7, r7, r5
   17fc8:	mov	r2, r5
   17fcc:	str	r0, [r6, #12]
   17fd0:	mov	r1, r7
   17fd4:	ldr	r0, [r6, #8]
   17fd8:	sub	r0, r0, r5
   17fdc:	str	r0, [r6, #8]
   17fe0:	bl	123e4 <memcpy@plt>
   17fe4:	subs	sl, sl, r5
   17fe8:	bne	17ed8 <flatcc_emitter@@Base+0x1d4>
   17fec:	ldr	r0, [sp]
   17ff0:	subs	r4, r4, #1
   17ff4:	bne	17eb8 <flatcc_emitter@@Base+0x1b4>
   17ff8:	b	1805c <flatcc_emitter@@Base+0x358>
   17ffc:	ldr	r5, [r6, #16]
   18000:	add	r2, r5, r1
   18004:	str	r2, [r6, #16]
   18008:	b	18028 <flatcc_emitter@@Base+0x324>
   1800c:	mvn	r8, #0
   18010:	mov	r0, r8
   18014:	sub	sp, fp, #28
   18018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1801c:	ldr	r2, [r6, #8]
   18020:	sub	r5, r2, r1
   18024:	str	r5, [r6, #8]
   18028:	sub	r0, r0, r1
   1802c:	mov	r8, #0
   18030:	cmp	r4, #0
   18034:	str	r0, [r9]
   18038:	beq	1805c <flatcc_emitter@@Base+0x358>
   1803c:	ldm	r7, {r1, r2}
   18040:	mov	r0, r5
   18044:	bl	123e4 <memcpy@plt>
   18048:	ldr	r0, [r7, #4]
   1804c:	add	r7, r7, #8
   18050:	subs	r4, r4, #1
   18054:	add	r5, r5, r0
   18058:	bne	1803c <flatcc_emitter@@Base+0x338>
   1805c:	mov	r0, r8
   18060:	sub	sp, fp, #28
   18064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018068 <flatcc_emitter_copy_buffer@@Base>:
   18068:	push	{r4, r5, r6, sl, fp, lr}
   1806c:	add	fp, sp, #16
   18070:	mov	r3, r2
   18074:	ldr	r2, [r0, #24]
   18078:	mov	r5, #0
   1807c:	cmp	r2, r3
   18080:	bhi	18108 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18084:	mov	r4, r0
   18088:	ldr	r0, [r0]
   1808c:	cmp	r0, #0
   18090:	beq	18108 <flatcc_emitter_copy_buffer@@Base+0xa0>
   18094:	mov	r6, r1
   18098:	ldr	r1, [r4, #4]
   1809c:	cmp	r0, r1
   180a0:	beq	18110 <flatcc_emitter_copy_buffer@@Base+0xa8>
   180a4:	ldr	r0, [r4, #12]
   180a8:	ldr	r1, [r4, #8]
   180ac:	rsb	r5, r0, #2944	; 0xb80
   180b0:	mov	r0, r6
   180b4:	mov	r2, r5
   180b8:	bl	123e4 <memcpy@plt>
   180bc:	ldm	r4, {r0, r1}
   180c0:	add	r5, r6, r5
   180c4:	ldr	r6, [r0, #2944]	; 0xb80
   180c8:	cmp	r6, r1
   180cc:	beq	180f4 <flatcc_emitter_copy_buffer@@Base+0x8c>
   180d0:	mov	r0, r5
   180d4:	mov	r1, r6
   180d8:	mov	r2, #2944	; 0xb80
   180dc:	bl	123e4 <memcpy@plt>
   180e0:	ldr	r6, [r6, #2944]	; 0xb80
   180e4:	ldr	r0, [r4, #4]
   180e8:	add	r5, r5, #2944	; 0xb80
   180ec:	cmp	r6, r0
   180f0:	bne	180d0 <flatcc_emitter_copy_buffer@@Base+0x68>
   180f4:	ldr	r0, [r4, #20]
   180f8:	mov	r1, r6
   180fc:	rsb	r2, r0, #2944	; 0xb80
   18100:	mov	r0, r5
   18104:	bl	123e4 <memcpy@plt>
   18108:	mov	r0, r5
   1810c:	pop	{r4, r5, r6, sl, fp, pc}
   18110:	ldr	r1, [r4, #8]
   18114:	mov	r0, r6
   18118:	bl	123e4 <memcpy@plt>
   1811c:	mov	r0, r6
   18120:	pop	{r4, r5, r6, sl, fp, pc}

00018124 <__libc_csu_init@@Base>:
   18124:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18128:	mov	r7, r0
   1812c:	ldr	r6, [pc, #72]	; 1817c <__libc_csu_init@@Base+0x58>
   18130:	ldr	r5, [pc, #72]	; 18180 <__libc_csu_init@@Base+0x5c>
   18134:	add	r6, pc, r6
   18138:	add	r5, pc, r5
   1813c:	sub	r6, r6, r5
   18140:	mov	r8, r1
   18144:	mov	r9, r2
   18148:	bl	12394 <strcmp@plt-0x20>
   1814c:	asrs	r6, r6, #2
   18150:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18154:	mov	r4, #0
   18158:	add	r4, r4, #1
   1815c:	ldr	r3, [r5], #4
   18160:	mov	r2, r9
   18164:	mov	r1, r8
   18168:	mov	r0, r7
   1816c:	blx	r3
   18170:	cmp	r6, r4
   18174:	bne	18158 <__libc_csu_init@@Base+0x34>
   18178:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1817c:	ldrdeq	r1, [r1], -r0
   18180:	andeq	r1, r1, r8, asr #27

00018184 <__libc_csu_fini@@Base>:
   18184:	bx	lr

Disassembly of section .fini:

00018188 <.fini>:
   18188:	push	{r3, lr}
   1818c:	pop	{r3, pc}
