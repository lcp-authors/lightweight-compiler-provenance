
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011140 <.init>:
   11140:	push	{r3, lr}
   11144:	bl	13188 <__assert_fail@plt+0x1c74>
   11148:	pop	{r3, pc}

Disassembly of section .plt:

0001114c <fdopen@plt-0x14>:
   1114c:	push	{lr}		; (str lr, [sp, #-4]!)
   11150:	ldr	lr, [pc, #4]	; 1115c <fdopen@plt-0x4>
   11154:	add	lr, pc, lr
   11158:	ldr	pc, [lr, #8]!
   1115c:	andeq	r8, r1, r4, lsr #29

00011160 <fdopen@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #24, 20	; 0x18000
   11168:	ldr	pc, [ip, #3748]!	; 0xea4

0001116c <calloc@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #24, 20	; 0x18000
   11174:	ldr	pc, [ip, #3740]!	; 0xe9c

00011178 <fputs_unlocked@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #24, 20	; 0x18000
   11180:	ldr	pc, [ip, #3732]!	; 0xe94

00011184 <raise@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #24, 20	; 0x18000
   1118c:	ldr	pc, [ip, #3724]!	; 0xe8c

00011190 <strcmp@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #24, 20	; 0x18000
   11198:	ldr	pc, [ip, #3716]!	; 0xe84

0001119c <strtol@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #24, 20	; 0x18000
   111a4:	ldr	pc, [ip, #3708]!	; 0xe7c

000111a8 <read@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #24, 20	; 0x18000
   111b0:	ldr	pc, [ip, #3700]!	; 0xe74

000111b4 <fflush@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #24, 20	; 0x18000
   111bc:	ldr	pc, [ip, #3692]!	; 0xe6c

000111c0 <sigprocmask@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #24, 20	; 0x18000
   111c8:	ldr	pc, [ip, #3684]!	; 0xe64

000111cc <memmove@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #24, 20	; 0x18000
   111d4:	ldr	pc, [ip, #3676]!	; 0xe5c

000111d8 <free@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #24, 20	; 0x18000
   111e0:	ldr	pc, [ip, #3668]!	; 0xe54

000111e4 <_exit@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #24, 20	; 0x18000
   111ec:	ldr	pc, [ip, #3660]!	; 0xe4c

000111f0 <memcpy@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #24, 20	; 0x18000
   111f8:	ldr	pc, [ip, #3652]!	; 0xe44

000111fc <mbsinit@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #24, 20	; 0x18000
   11204:	ldr	pc, [ip, #3644]!	; 0xe3c

00011208 <ftruncate64@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #24, 20	; 0x18000
   11210:	ldr	pc, [ip, #3636]!	; 0xe34

00011214 <fwrite_unlocked@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #24, 20	; 0x18000
   1121c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011220 <memcmp@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #24, 20	; 0x18000
   11228:	ldr	pc, [ip, #3620]!	; 0xe24

0001122c <fputc_unlocked@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #24, 20	; 0x18000
   11234:	ldr	pc, [ip, #3612]!	; 0xe1c

00011238 <dcgettext@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #24, 20	; 0x18000
   11240:	ldr	pc, [ip, #3604]!	; 0xe14

00011244 <dup2@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #24, 20	; 0x18000
   1124c:	ldr	pc, [ip, #3596]!	; 0xe0c

00011250 <realloc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #24, 20	; 0x18000
   11258:	ldr	pc, [ip, #3588]!	; 0xe04

0001125c <textdomain@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #24, 20	; 0x18000
   11264:	ldr	pc, [ip, #3580]!	; 0xdfc

00011268 <rawmemchr@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #24, 20	; 0x18000
   11270:	ldr	pc, [ip, #3572]!	; 0xdf4

00011274 <iswprint@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #24, 20	; 0x18000
   1127c:	ldr	pc, [ip, #3564]!	; 0xdec

00011280 <__fxstat64@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #24, 20	; 0x18000
   11288:	ldr	pc, [ip, #3556]!	; 0xde4

0001128c <sigaction@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #24, 20	; 0x18000
   11294:	ldr	pc, [ip, #3548]!	; 0xddc

00011298 <lseek64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #24, 20	; 0x18000
   112a0:	ldr	pc, [ip, #3540]!	; 0xdd4

000112a4 <waitpid@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #24, 20	; 0x18000
   112ac:	ldr	pc, [ip, #3532]!	; 0xdcc

000112b0 <__ctype_get_mb_cur_max@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #24, 20	; 0x18000
   112b8:	ldr	pc, [ip, #3524]!	; 0xdc4

000112bc <strcpy@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #24, 20	; 0x18000
   112c4:	ldr	pc, [ip, #3516]!	; 0xdbc

000112c8 <__fpending@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #24, 20	; 0x18000
   112d0:	ldr	pc, [ip, #3508]!	; 0xdb4

000112d4 <ferror_unlocked@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #24, 20	; 0x18000
   112dc:	ldr	pc, [ip, #3500]!	; 0xdac

000112e0 <mbrtowc@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #24, 20	; 0x18000
   112e8:	ldr	pc, [ip, #3492]!	; 0xda4

000112ec <error@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #24, 20	; 0x18000
   112f4:	ldr	pc, [ip, #3484]!	; 0xd9c

000112f8 <open64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #24, 20	; 0x18000
   11300:	ldr	pc, [ip, #3476]!	; 0xd94

00011304 <getenv@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #24, 20	; 0x18000
   1130c:	ldr	pc, [ip, #3468]!	; 0xd8c

00011310 <malloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #24, 20	; 0x18000
   11318:	ldr	pc, [ip, #3460]!	; 0xd84

0001131c <sigaddset@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #24, 20	; 0x18000
   11324:	ldr	pc, [ip, #3452]!	; 0xd7c

00011328 <__libc_start_main@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #24, 20	; 0x18000
   11330:	ldr	pc, [ip, #3444]!	; 0xd74

00011334 <__freading@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #24, 20	; 0x18000
   1133c:	ldr	pc, [ip, #3436]!	; 0xd6c

00011340 <__gmon_start__@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #24, 20	; 0x18000
   11348:	ldr	pc, [ip, #3428]!	; 0xd64

0001134c <getopt_long@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #24, 20	; 0x18000
   11354:	ldr	pc, [ip, #3420]!	; 0xd5c

00011358 <__ctype_b_loc@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #24, 20	; 0x18000
   11360:	ldr	pc, [ip, #3412]!	; 0xd54

00011364 <exit@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #24, 20	; 0x18000
   1136c:	ldr	pc, [ip, #3404]!	; 0xd4c

00011370 <strlen@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #24, 20	; 0x18000
   11378:	ldr	pc, [ip, #3396]!	; 0xd44

0001137c <__libc_current_sigrtmax@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #24, 20	; 0x18000
   11384:	ldr	pc, [ip, #3388]!	; 0xd3c

00011388 <strchr@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #24, 20	; 0x18000
   11390:	ldr	pc, [ip, #3380]!	; 0xd34

00011394 <setenv@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #24, 20	; 0x18000
   1139c:	ldr	pc, [ip, #3372]!	; 0xd2c

000113a0 <memrchr@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #24, 20	; 0x18000
   113a8:	ldr	pc, [ip, #3364]!	; 0xd24

000113ac <getpagesize@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #24, 20	; 0x18000
   113b4:	ldr	pc, [ip, #3356]!	; 0xd1c

000113b8 <__errno_location@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #24, 20	; 0x18000
   113c0:	ldr	pc, [ip, #3348]!	; 0xd14

000113c4 <__sprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #24, 20	; 0x18000
   113cc:	ldr	pc, [ip, #3340]!	; 0xd0c

000113d0 <__cxa_atexit@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #24, 20	; 0x18000
   113d8:	ldr	pc, [ip, #3332]!	; 0xd04

000113dc <memset@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #24, 20	; 0x18000
   113e4:	ldr	pc, [ip, #3324]!	; 0xcfc

000113e8 <__printf_chk@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #24, 20	; 0x18000
   113f0:	ldr	pc, [ip, #3316]!	; 0xcf4

000113f4 <write@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #24, 20	; 0x18000
   113fc:	ldr	pc, [ip, #3308]!	; 0xcec

00011400 <fileno@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #24, 20	; 0x18000
   11408:	ldr	pc, [ip, #3300]!	; 0xce4

0001140c <strtoumax@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #24, 20	; 0x18000
   11414:	ldr	pc, [ip, #3292]!	; 0xcdc

00011418 <__fprintf_chk@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #24, 20	; 0x18000
   11420:	ldr	pc, [ip, #3284]!	; 0xcd4

00011424 <memchr@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #24, 20	; 0x18000
   1142c:	ldr	pc, [ip, #3276]!	; 0xccc

00011430 <fclose@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #24, 20	; 0x18000
   11438:	ldr	pc, [ip, #3268]!	; 0xcc4

0001143c <pipe@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #24, 20	; 0x18000
   11444:	ldr	pc, [ip, #3260]!	; 0xcbc

00011448 <fseeko64@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #24, 20	; 0x18000
   11450:	ldr	pc, [ip, #3252]!	; 0xcb4

00011454 <fcntl64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #24, 20	; 0x18000
   1145c:	ldr	pc, [ip, #3244]!	; 0xcac

00011460 <setlocale@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #24, 20	; 0x18000
   11468:	ldr	pc, [ip, #3236]!	; 0xca4

0001146c <sigemptyset@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #24, 20	; 0x18000
   11474:	ldr	pc, [ip, #3228]!	; 0xc9c

00011478 <fork@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #24, 20	; 0x18000
   11480:	ldr	pc, [ip, #3220]!	; 0xc94

00011484 <execl@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #24, 20	; 0x18000
   1148c:	ldr	pc, [ip, #3212]!	; 0xc8c

00011490 <strrchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #24, 20	; 0x18000
   11498:	ldr	pc, [ip, #3204]!	; 0xc84

0001149c <nl_langinfo@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #24, 20	; 0x18000
   114a4:	ldr	pc, [ip, #3196]!	; 0xc7c

000114a8 <clearerr_unlocked@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #24, 20	; 0x18000
   114b0:	ldr	pc, [ip, #3188]!	; 0xc74

000114b4 <bindtextdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #24, 20	; 0x18000
   114bc:	ldr	pc, [ip, #3180]!	; 0xc6c

000114c0 <aligned_alloc@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #24, 20	; 0x18000
   114c8:	ldr	pc, [ip, #3172]!	; 0xc64

000114cc <__libc_current_sigrtmin@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #24, 20	; 0x18000
   114d4:	ldr	pc, [ip, #3164]!	; 0xc5c

000114d8 <fputs@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #24, 20	; 0x18000
   114e0:	ldr	pc, [ip, #3156]!	; 0xc54

000114e4 <strncmp@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #24, 20	; 0x18000
   114ec:	ldr	pc, [ip, #3148]!	; 0xc4c

000114f0 <abort@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #24, 20	; 0x18000
   114f8:	ldr	pc, [ip, #3140]!	; 0xc44

000114fc <close@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #24, 20	; 0x18000
   11504:	ldr	pc, [ip, #3132]!	; 0xc3c

00011508 <strspn@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #24, 20	; 0x18000
   11510:	ldr	pc, [ip, #3124]!	; 0xc34

00011514 <__assert_fail@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #24, 20	; 0x18000
   1151c:	ldr	pc, [ip, #3116]!	; 0xc2c

Disassembly of section .text:

00011520 <.text>:
   11520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11524:	sub	sp, sp, #236	; 0xec
   11528:	mov	r9, #0
   1152c:	str	r1, [sp, #40]	; 0x28
   11530:	str	r0, [sp, #48]	; 0x30
   11534:	bl	113ac <getpagesize@plt>
   11538:	ldr	r3, [sp, #40]	; 0x28
   1153c:	ldr	r6, [pc, #2292]	; 11e38 <__assert_fail@plt+0x924>
   11540:	mov	r4, r9
   11544:	mvn	sl, #0
   11548:	mvn	fp, #-2147483648	; 0x80000000
   1154c:	str	r0, [sp, #56]	; 0x38
   11550:	ldr	r0, [r3]
   11554:	bl	1483c <__assert_fail@plt+0x3328>
   11558:	ldr	r1, [pc, #2268]	; 11e3c <__assert_fail@plt+0x928>
   1155c:	mov	r0, #6
   11560:	bl	11460 <setlocale@plt>
   11564:	ldr	r1, [pc, #2260]	; 11e40 <__assert_fail@plt+0x92c>
   11568:	ldr	r0, [pc, #2260]	; 11e44 <__assert_fail@plt+0x930>
   1156c:	bl	114b4 <bindtextdomain@plt>
   11570:	ldr	r0, [pc, #2252]	; 11e44 <__assert_fail@plt+0x930>
   11574:	bl	1125c <textdomain@plt>
   11578:	ldr	r0, [pc, #2248]	; 11e48 <__assert_fail@plt+0x934>
   1157c:	bl	17bf8 <__assert_fail@plt+0x66e4>
   11580:	ldr	r3, [pc, #2424]	; 11f00 <__assert_fail@plt+0x9ec>
   11584:	ldr	r2, [pc, #2424]	; 11f04 <__assert_fail@plt+0x9f0>
   11588:	str	r9, [sp, #44]	; 0x2c
   1158c:	str	r2, [r3, #300]	; 0x12c
   11590:	ldr	r2, [pc, #2228]	; 11e4c <__assert_fail@plt+0x938>
   11594:	str	r2, [r3, #12]
   11598:	mov	r2, #0
   1159c:	mov	r3, #0
   115a0:	strd	r2, [sp, #24]
   115a4:	strd	r2, [sp, #32]
   115a8:	ldr	r3, [pc, #2336]	; 11ed0 <__assert_fail@plt+0x9bc>
   115ac:	mov	r8, #0
   115b0:	ldr	r2, [pc, #2200]	; 11e50 <__assert_fail@plt+0x93c>
   115b4:	ldr	r7, [r3]
   115b8:	ldr	r1, [sp, #40]	; 0x28
   115bc:	cmp	r7, #0
   115c0:	str	r8, [sp]
   115c4:	ldr	r3, [pc, #2184]	; 11e54 <__assert_fail@plt+0x940>
   115c8:	ldr	r0, [sp, #48]	; 0x30
   115cc:	moveq	r7, #1
   115d0:	bl	1134c <getopt_long@plt>
   115d4:	cmn	r0, #1
   115d8:	mov	r5, r0
   115dc:	beq	11c64 <__assert_fail@plt+0x750>
   115e0:	cmp	r0, #101	; 0x65
   115e4:	beq	11bc4 <__assert_fail@plt+0x6b0>
   115e8:	bgt	116a4 <__assert_fail@plt+0x190>
   115ec:	cmp	r0, #57	; 0x39
   115f0:	bgt	11624 <__assert_fail@plt+0x110>
   115f4:	cmp	r0, #48	; 0x30
   115f8:	bge	11a8c <__assert_fail@plt+0x578>
   115fc:	cmn	r0, #3
   11600:	beq	11c2c <__assert_fail@plt+0x718>
   11604:	cmn	r0, #2
   11608:	moveq	r0, r8
   1160c:	beq	11614 <__assert_fail@plt+0x100>
   11610:	mov	r0, #1
   11614:	bl	14090 <__assert_fail@plt+0x2b7c>
   11618:	mov	r9, r7
   1161c:	mov	r4, #4
   11620:	b	115a8 <__assert_fail@plt+0x94>
   11624:	cmp	r0, #97	; 0x61
   11628:	beq	117c0 <__assert_fail@plt+0x2ac>
   1162c:	bgt	1168c <__assert_fail@plt+0x178>
   11630:	cmp	r0, #67	; 0x43
   11634:	bne	11610 <__assert_fail@plt+0xfc>
   11638:	cmp	r4, #0
   1163c:	bne	11820 <__assert_fail@plt+0x30c>
   11640:	mov	r2, #5
   11644:	ldr	r1, [pc, #2060]	; 11e58 <__assert_fail@plt+0x944>
   11648:	mov	r0, r4
   1164c:	ldr	r5, [r6]
   11650:	bl	11238 <dcgettext@plt>
   11654:	ldr	r3, [pc, #2048]	; 11e5c <__assert_fail@plt+0x948>
   11658:	mvn	r2, #0
   1165c:	str	r3, [sp, #8]
   11660:	mov	r3, #0
   11664:	str	r4, [sp, #16]
   11668:	strd	r2, [sp]
   1166c:	mov	r2, #1
   11670:	mov	r3, #0
   11674:	mov	r4, #2
   11678:	str	r0, [sp, #12]
   1167c:	mov	r0, r5
   11680:	bl	16cf4 <__assert_fail@plt+0x57e0>
   11684:	strd	r0, [sp, #24]
   11688:	b	115a8 <__assert_fail@plt+0x94>
   1168c:	cmp	r0, #98	; 0x62
   11690:	beq	11818 <__assert_fail@plt+0x304>
   11694:	cmp	r0, #100	; 0x64
   11698:	bne	11610 <__assert_fail@plt+0xfc>
   1169c:	ldr	r2, [pc, #1980]	; 11e60 <__assert_fail@plt+0x94c>
   116a0:	b	11b48 <__assert_fail@plt+0x634>
   116a4:	cmp	r0, #120	; 0x78
   116a8:	beq	11b44 <__assert_fail@plt+0x630>
   116ac:	bgt	11738 <__assert_fail@plt+0x224>
   116b0:	cmp	r0, #110	; 0x6e
   116b4:	beq	11888 <__assert_fail@plt+0x374>
   116b8:	bgt	11718 <__assert_fail@plt+0x204>
   116bc:	cmp	r0, #108	; 0x6c
   116c0:	bne	11610 <__assert_fail@plt+0xfc>
   116c4:	cmp	r4, #0
   116c8:	bne	11820 <__assert_fail@plt+0x30c>
   116cc:	mov	r2, #5
   116d0:	ldr	r1, [pc, #1932]	; 11e64 <__assert_fail@plt+0x950>
   116d4:	mov	r0, r4
   116d8:	ldr	r5, [r6]
   116dc:	bl	11238 <dcgettext@plt>
   116e0:	ldr	r3, [pc, #1876]	; 11e3c <__assert_fail@plt+0x928>
   116e4:	mvn	r2, #0
   116e8:	str	r3, [sp, #8]
   116ec:	mvn	r3, #0
   116f0:	str	r4, [sp, #16]
   116f4:	strd	r2, [sp]
   116f8:	mov	r2, #1
   116fc:	mov	r3, #0
   11700:	mov	r4, #3
   11704:	str	r0, [sp, #12]
   11708:	mov	r0, r5
   1170c:	bl	16cf4 <__assert_fail@plt+0x57e0>
   11710:	strd	r0, [sp, #24]
   11714:	b	115a8 <__assert_fail@plt+0x94>
   11718:	cmp	r0, #116	; 0x74
   1171c:	beq	119e8 <__assert_fail@plt+0x4d4>
   11720:	cmp	r0, #117	; 0x75
   11724:	bne	11610 <__assert_fail@plt+0xfc>
   11728:	ldr	r3, [pc, #2000]	; 11f00 <__assert_fail@plt+0x9ec>
   1172c:	mov	r2, #1
   11730:	strb	r2, [r3, #304]	; 0x130
   11734:	b	115a8 <__assert_fail@plt+0x94>
   11738:	ldr	r3, [pc, #1832]	; 11e68 <__assert_fail@plt+0x954>
   1173c:	cmp	r0, r3
   11740:	beq	11bd4 <__assert_fail@plt+0x6c0>
   11744:	bgt	11760 <__assert_fail@plt+0x24c>
   11748:	cmp	r0, #256	; 0x100
   1174c:	bne	11610 <__assert_fail@plt+0xfc>
   11750:	ldr	r3, [pc, #1960]	; 11f00 <__assert_fail@plt+0x9ec>
   11754:	mov	r2, #1
   11758:	strb	r2, [r3, #44]	; 0x2c
   1175c:	b	115a8 <__assert_fail@plt+0x94>
   11760:	ldr	r3, [pc, #1796]	; 11e6c <__assert_fail@plt+0x958>
   11764:	cmp	r0, r3
   11768:	beq	11be4 <__assert_fail@plt+0x6d0>
   1176c:	add	r3, r3, #1
   11770:	cmp	r0, r3
   11774:	bne	11610 <__assert_fail@plt+0xfc>
   11778:	ldr	r5, [r6]
   1177c:	mov	r0, r5
   11780:	bl	1436c <__assert_fail@plt+0x2e58>
   11784:	cmp	r5, r0
   11788:	beq	1180c <__assert_fail@plt+0x2f8>
   1178c:	ldr	r1, [pc, #1756]	; 11e70 <__assert_fail@plt+0x95c>
   11790:	mov	r2, #5
   11794:	mov	r0, #0
   11798:	bl	11238 <dcgettext@plt>
   1179c:	mov	r4, r0
   117a0:	ldr	r0, [r6]
   117a4:	bl	15e6c <__assert_fail@plt+0x4958>
   117a8:	mov	r1, #0
   117ac:	mov	r2, r4
   117b0:	mov	r3, r0
   117b4:	mov	r0, r1
   117b8:	bl	112ec <error@plt>
   117bc:	b	11610 <__assert_fail@plt+0xfc>
   117c0:	mov	r2, #5
   117c4:	ldr	r1, [pc, #1704]	; 11e74 <__assert_fail@plt+0x960>
   117c8:	mov	r0, r8
   117cc:	ldr	r5, [r6]
   117d0:	bl	11238 <dcgettext@plt>
   117d4:	ldr	r3, [pc, #1632]	; 11e3c <__assert_fail@plt+0x928>
   117d8:	mvn	r2, #-1073741824	; 0xc0000000
   117dc:	str	r3, [sp, #8]
   117e0:	mov	r3, #0
   117e4:	str	r8, [sp, #16]
   117e8:	strd	r2, [sp]
   117ec:	mov	r3, #0
   117f0:	mov	r2, #0
   117f4:	str	r0, [sp, #12]
   117f8:	mov	r0, r5
   117fc:	bl	16cf4 <__assert_fail@plt+0x57e0>
   11800:	ldr	r3, [pc, #1784]	; 11f00 <__assert_fail@plt+0x9ec>
   11804:	str	r0, [r3, #28]
   11808:	b	115a8 <__assert_fail@plt+0x94>
   1180c:	ldr	r3, [pc, #1772]	; 11f00 <__assert_fail@plt+0x9ec>
   11810:	str	r5, [r3, #20]
   11814:	b	115a8 <__assert_fail@plt+0x94>
   11818:	cmp	r4, #0
   1181c:	beq	11844 <__assert_fail@plt+0x330>
   11820:	ldr	r1, [pc, #1616]	; 11e78 <__assert_fail@plt+0x964>
   11824:	mov	r2, #5
   11828:	mov	r0, #0
   1182c:	bl	11238 <dcgettext@plt>
   11830:	mov	r1, #0
   11834:	mov	r2, r0
   11838:	mov	r0, r1
   1183c:	bl	112ec <error@plt>
   11840:	b	11610 <__assert_fail@plt+0xfc>
   11844:	mov	r2, #5
   11848:	ldr	r1, [pc, #1544]	; 11e58 <__assert_fail@plt+0x944>
   1184c:	mov	r0, r4
   11850:	ldr	r5, [r6]
   11854:	bl	11238 <dcgettext@plt>
   11858:	ldr	r3, [pc, #1532]	; 11e5c <__assert_fail@plt+0x948>
   1185c:	str	r4, [sp, #16]
   11860:	str	r3, [sp, #8]
   11864:	strd	sl, [sp]
   11868:	mov	r2, #1
   1186c:	mov	r3, #0
   11870:	mov	r4, #1
   11874:	str	r0, [sp, #12]
   11878:	mov	r0, r5
   1187c:	bl	16cf4 <__assert_fail@plt+0x57e0>
   11880:	strd	r0, [sp, #24]
   11884:	b	115a8 <__assert_fail@plt+0x94>
   11888:	cmp	r4, #0
   1188c:	bne	11820 <__assert_fail@plt+0x30c>
   11890:	bl	11358 <__ctype_b_loc@plt>
   11894:	ldr	r2, [r0]
   11898:	ldr	r4, [r6]
   1189c:	ldrb	r3, [r4]
   118a0:	lsl	r3, r3, #1
   118a4:	ldrh	r3, [r2, r3]
   118a8:	tst	r3, #8192	; 0x2000
   118ac:	bne	119a4 <__assert_fail@plt+0x490>
   118b0:	mov	r0, r4
   118b4:	mov	r2, #2
   118b8:	ldr	r1, [pc, #1468]	; 11e7c <__assert_fail@plt+0x968>
   118bc:	bl	114e4 <strncmp@plt>
   118c0:	cmp	r0, #0
   118c4:	addeq	r4, r4, #2
   118c8:	streq	r4, [r6]
   118cc:	moveq	r4, #7
   118d0:	beq	118f8 <__assert_fail@plt+0x3e4>
   118d4:	mov	r0, r4
   118d8:	mov	r2, #2
   118dc:	ldr	r1, [pc, #1436]	; 11e80 <__assert_fail@plt+0x96c>
   118e0:	bl	114e4 <strncmp@plt>
   118e4:	cmp	r0, #0
   118e8:	addeq	r4, r4, #2
   118ec:	streq	r4, [r6]
   118f0:	movne	r4, #5
   118f4:	moveq	r4, #6
   118f8:	ldr	r7, [r6]
   118fc:	mov	r1, #47	; 0x2f
   11900:	mov	r0, r7
   11904:	bl	11388 <strchr@plt>
   11908:	mov	r2, #5
   1190c:	ldr	r1, [pc, #1496]	; 11eec <__assert_fail@plt+0x9d8>
   11910:	subs	r5, r0, #0
   11914:	beq	119b0 <__assert_fail@plt+0x49c>
   11918:	mov	r0, #0
   1191c:	bl	11238 <dcgettext@plt>
   11920:	ldr	r8, [pc, #1300]	; 11e3c <__assert_fail@plt+0x928>
   11924:	mvn	r2, #0
   11928:	mvn	r3, #0
   1192c:	mov	r7, #0
   11930:	strd	r2, [sp]
   11934:	str	r7, [sp, #16]
   11938:	mov	r3, #0
   1193c:	str	r8, [sp, #8]
   11940:	mov	r2, #1
   11944:	str	r0, [sp, #12]
   11948:	add	r0, r5, #1
   1194c:	bl	16cf4 <__assert_fail@plt+0x57e0>
   11950:	ldr	r3, [r6]
   11954:	cmp	r5, r3
   11958:	strd	r0, [sp, #24]
   1195c:	beq	115a8 <__assert_fail@plt+0x94>
   11960:	strb	r7, [r5]
   11964:	mov	r2, #5
   11968:	ldr	r1, [pc, #1300]	; 11e84 <__assert_fail@plt+0x970>
   1196c:	mov	r0, r7
   11970:	ldr	r5, [r6]
   11974:	bl	11238 <dcgettext@plt>
   11978:	ldrd	r2, [sp, #24]
   1197c:	str	r7, [sp, #16]
   11980:	str	r8, [sp, #8]
   11984:	strd	r2, [sp]
   11988:	mov	r2, #1
   1198c:	mov	r3, #0
   11990:	str	r0, [sp, #12]
   11994:	mov	r0, r5
   11998:	bl	16cf4 <__assert_fail@plt+0x57e0>
   1199c:	strd	r0, [sp, #32]
   119a0:	b	115a8 <__assert_fail@plt+0x94>
   119a4:	add	r4, r4, #1
   119a8:	str	r4, [r6]
   119ac:	b	11898 <__assert_fail@plt+0x384>
   119b0:	bl	11238 <dcgettext@plt>
   119b4:	ldr	r3, [pc, #1152]	; 11e3c <__assert_fail@plt+0x928>
   119b8:	mvn	r2, #0
   119bc:	str	r3, [sp, #8]
   119c0:	mvn	r3, #0
   119c4:	str	r5, [sp, #16]
   119c8:	strd	r2, [sp]
   119cc:	mov	r2, #1
   119d0:	mov	r3, #0
   119d4:	str	r0, [sp, #12]
   119d8:	mov	r0, r7
   119dc:	bl	16cf4 <__assert_fail@plt+0x57e0>
   119e0:	strd	r0, [sp, #24]
   119e4:	b	115a8 <__assert_fail@plt+0x94>
   119e8:	ldr	r0, [r6]
   119ec:	ldrb	r5, [r0]
   119f0:	cmp	r5, #0
   119f4:	bne	11a18 <__assert_fail@plt+0x504>
   119f8:	ldr	r1, [pc, #1160]	; 11e88 <__assert_fail@plt+0x974>
   119fc:	mov	r2, #5
   11a00:	mov	r0, #0
   11a04:	bl	11238 <dcgettext@plt>
   11a08:	mov	r1, #0
   11a0c:	mov	r2, r0
   11a10:	mov	r0, #1
   11a14:	bl	112ec <error@plt>
   11a18:	ldrb	r3, [r0, #1]
   11a1c:	cmp	r3, #0
   11a20:	beq	11a64 <__assert_fail@plt+0x550>
   11a24:	ldr	r1, [pc, #1120]	; 11e8c <__assert_fail@plt+0x978>
   11a28:	bl	11190 <strcmp@plt>
   11a2c:	subs	r5, r0, #0
   11a30:	beq	11a64 <__assert_fail@plt+0x550>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #1104]	; 11e90 <__assert_fail@plt+0x97c>
   11a3c:	mov	r0, #0
   11a40:	bl	11238 <dcgettext@plt>
   11a44:	mov	r4, r0
   11a48:	ldr	r0, [r6]
   11a4c:	bl	15e6c <__assert_fail@plt+0x4958>
   11a50:	mov	r2, r4
   11a54:	mov	r1, #0
   11a58:	mov	r3, r0
   11a5c:	mov	r0, #1
   11a60:	bl	112ec <error@plt>
   11a64:	ldr	r3, [pc, #1196]	; 11f18 <__assert_fail@plt+0xa04>
   11a68:	ldr	r2, [r3, #12]
   11a6c:	cmp	r2, #0
   11a70:	blt	11a84 <__assert_fail@plt+0x570>
   11a74:	cmp	r2, r5
   11a78:	movne	r2, #5
   11a7c:	ldrne	r1, [pc, #1040]	; 11e94 <__assert_fail@plt+0x980>
   11a80:	bne	11a00 <__assert_fail@plt+0x4ec>
   11a84:	str	r5, [r3, #12]
   11a88:	b	115a8 <__assert_fail@plt+0x94>
   11a8c:	cmp	r4, #0
   11a90:	beq	11b28 <__assert_fail@plt+0x614>
   11a94:	cmp	r4, #4
   11a98:	bne	11820 <__assert_fail@plt+0x30c>
   11a9c:	cmp	r9, #0
   11aa0:	cmpne	r9, r7
   11aa4:	bne	11b38 <__assert_fail@plt+0x624>
   11aa8:	add	r3, pc, #896	; 0x380
   11aac:	ldrd	r2, [r3]
   11ab0:	ldrd	r0, [sp, #24]
   11ab4:	cmp	r1, r3
   11ab8:	cmpeq	r0, r2
   11abc:	bhi	11af4 <__assert_fail@plt+0x5e0>
   11ac0:	mov	r2, r0
   11ac4:	mov	r3, r1
   11ac8:	mov	ip, #10
   11acc:	umull	r0, r1, r2, ip
   11ad0:	mla	r1, ip, r3, r1
   11ad4:	sub	ip, r5, #48	; 0x30
   11ad8:	adds	r8, r0, ip
   11adc:	adc	r9, r1, ip, asr #31
   11ae0:	cmp	r9, r3
   11ae4:	cmpeq	r8, r2
   11ae8:	strd	r8, [sp, #24]
   11aec:	bcs	11618 <__assert_fail@plt+0x104>
   11af0:	strd	r2, [sp, #24]
   11af4:	mov	r2, #5
   11af8:	ldr	r1, [pc, #920]	; 11e98 <__assert_fail@plt+0x984>
   11afc:	mov	r0, #0
   11b00:	bl	11238 <dcgettext@plt>
   11b04:	add	r2, sp, #88	; 0x58
   11b08:	mov	r4, r0
   11b0c:	ldrd	r0, [sp, #24]
   11b10:	bl	147d4 <__assert_fail@plt+0x32c0>
   11b14:	str	r5, [sp]
   11b18:	mov	r2, r4
   11b1c:	mov	r1, #0
   11b20:	mov	r3, r0
   11b24:	b	122d8 <__assert_fail@plt+0xdc4>
   11b28:	mov	r2, #0
   11b2c:	mov	r3, #0
   11b30:	strd	r2, [sp, #24]
   11b34:	b	11a9c <__assert_fail@plt+0x588>
   11b38:	mov	r2, #0
   11b3c:	mov	r3, #0
   11b40:	b	11ac8 <__assert_fail@plt+0x5b4>
   11b44:	ldr	r2, [pc, #848]	; 11e9c <__assert_fail@plt+0x988>
   11b48:	ldr	r3, [pc, #968]	; 11f18 <__assert_fail@plt+0xa04>
   11b4c:	ldr	r7, [r6]
   11b50:	cmp	r7, #0
   11b54:	str	r2, [r3]
   11b58:	beq	115a8 <__assert_fail@plt+0x94>
   11b5c:	mov	r0, r7
   11b60:	bl	11370 <strlen@plt>
   11b64:	ldr	r3, [pc, #940]	; 11f18 <__assert_fail@plt+0xa04>
   11b68:	ldr	r1, [r3]
   11b6c:	mov	r8, r0
   11b70:	mov	r0, r7
   11b74:	bl	11508 <strspn@plt>
   11b78:	cmp	r8, r0
   11b7c:	beq	11ba8 <__assert_fail@plt+0x694>
   11b80:	cmp	r5, #100	; 0x64
   11b84:	mov	r2, #5
   11b88:	ldreq	r1, [pc, #784]	; 11ea0 <__assert_fail@plt+0x98c>
   11b8c:	ldrne	r1, [pc, #784]	; 11ea4 <__assert_fail@plt+0x990>
   11b90:	b	11794 <__assert_fail@plt+0x280>
   11b94:	ldrb	r2, [r3, #1]
   11b98:	cmp	r2, #0
   11b9c:	beq	11bb8 <__assert_fail@plt+0x6a4>
   11ba0:	add	r3, r3, #1
   11ba4:	str	r3, [r6]
   11ba8:	ldr	r3, [r6]
   11bac:	ldrb	r2, [r3]
   11bb0:	cmp	r2, #48	; 0x30
   11bb4:	beq	11b94 <__assert_fail@plt+0x680>
   11bb8:	ldr	r2, [pc, #832]	; 11f00 <__assert_fail@plt+0x9ec>
   11bbc:	str	r3, [r2, #40]	; 0x28
   11bc0:	b	115a8 <__assert_fail@plt+0x94>
   11bc4:	ldr	r3, [pc, #820]	; 11f00 <__assert_fail@plt+0x9ec>
   11bc8:	mov	r2, #1
   11bcc:	strb	r2, [r3, #296]	; 0x128
   11bd0:	b	115a8 <__assert_fail@plt+0x94>
   11bd4:	ldr	r3, [pc, #804]	; 11f00 <__assert_fail@plt+0x9ec>
   11bd8:	ldr	r2, [r6]
   11bdc:	str	r2, [r3]
   11be0:	b	115a8 <__assert_fail@plt+0x94>
   11be4:	mov	r2, #5
   11be8:	ldr	r1, [pc, #696]	; 11ea8 <__assert_fail@plt+0x994>
   11bec:	mov	r0, r8
   11bf0:	ldr	r5, [r6]
   11bf4:	bl	11238 <dcgettext@plt>
   11bf8:	ldr	r3, [pc, #604]	; 11e5c <__assert_fail@plt+0x948>
   11bfc:	mvn	r2, #-2147483647	; 0x80000001
   11c00:	str	r3, [sp, #8]
   11c04:	mov	r3, #0
   11c08:	str	r8, [sp, #16]
   11c0c:	strd	r2, [sp]
   11c10:	mov	r2, #1
   11c14:	mov	r3, #0
   11c18:	str	r0, [sp, #12]
   11c1c:	mov	r0, r5
   11c20:	bl	16cf4 <__assert_fail@plt+0x57e0>
   11c24:	str	r0, [sp, #44]	; 0x2c
   11c28:	b	115a8 <__assert_fail@plt+0x94>
   11c2c:	ldr	r3, [pc, #632]	; 11eac <__assert_fail@plt+0x998>
   11c30:	ldr	r0, [pc, #632]	; 11eb0 <__assert_fail@plt+0x99c>
   11c34:	str	r3, [sp, #4]
   11c38:	ldr	r3, [pc, #628]	; 11eb4 <__assert_fail@plt+0x9a0>
   11c3c:	str	r8, [sp, #8]
   11c40:	str	r3, [sp]
   11c44:	ldr	r3, [pc, #620]	; 11eb8 <__assert_fail@plt+0x9a4>
   11c48:	ldr	r0, [r0]
   11c4c:	ldr	r2, [pc, #616]	; 11ebc <__assert_fail@plt+0x9a8>
   11c50:	ldr	r3, [r3]
   11c54:	ldr	r1, [pc, #612]	; 11ec0 <__assert_fail@plt+0x9ac>
   11c58:	bl	16618 <__assert_fail@plt+0x5104>
   11c5c:	mov	r0, r8
   11c60:	bl	11364 <exit@plt>
   11c64:	ldrd	r2, [sp, #32]
   11c68:	orrs	r3, r2, r3
   11c6c:	ldr	r2, [pc, #652]	; 11f00 <__assert_fail@plt+0x9ec>
   11c70:	beq	11c88 <__assert_fail@plt+0x774>
   11c74:	ldr	r3, [r2]
   11c78:	cmp	r3, #0
   11c7c:	movne	r2, #5
   11c80:	ldrne	r1, [pc, #572]	; 11ec4 <__assert_fail@plt+0x9b0>
   11c84:	bne	11828 <__assert_fail@plt+0x314>
   11c88:	cmp	r4, #0
   11c8c:	beq	11cd4 <__assert_fail@plt+0x7c0>
   11c90:	ldrd	r0, [sp, #24]
   11c94:	orrs	r3, r0, r1
   11c98:	bne	11ce4 <__assert_fail@plt+0x7d0>
   11c9c:	mov	r2, #5
   11ca0:	ldr	r1, [pc, #444]	; 11e64 <__assert_fail@plt+0x950>
   11ca4:	mov	r0, #0
   11ca8:	bl	11238 <dcgettext@plt>
   11cac:	mov	r4, r0
   11cb0:	ldr	r0, [pc, #528]	; 11ec8 <__assert_fail@plt+0x9b4>
   11cb4:	bl	15e6c <__assert_fail@plt+0x4958>
   11cb8:	mov	r1, #0
   11cbc:	mov	r3, r4
   11cc0:	ldr	r2, [pc, #552]	; 11ef0 <__assert_fail@plt+0x9dc>
   11cc4:	str	r0, [sp]
   11cc8:	mov	r0, r1
   11ccc:	bl	112ec <error@plt>
   11cd0:	b	11610 <__assert_fail@plt+0xfc>
   11cd4:	mov	r0, #1000	; 0x3e8
   11cd8:	mov	r1, #0
   11cdc:	mov	r4, #3
   11ce0:	strd	r0, [sp, #24]
   11ce4:	ldr	r3, [pc, #556]	; 11f18 <__assert_fail@plt+0xa04>
   11ce8:	ldr	r0, [r2, #40]	; 0x28
   11cec:	sub	r5, r4, #5
   11cf0:	ldr	r1, [r3, #12]
   11cf4:	cmp	r1, #0
   11cf8:	movlt	r1, #10
   11cfc:	strlt	r1, [r3, #12]
   11d00:	cmp	r0, #0
   11d04:	movne	r2, #0
   11d08:	strbne	r2, [r3, #4]
   11d0c:	cmp	r5, #2
   11d10:	movhi	r6, #0
   11d14:	movhi	r7, #0
   11d18:	bhi	11de8 <__assert_fail@plt+0x8d4>
   11d1c:	ldrd	sl, [sp, #24]
   11d20:	subs	sl, sl, #1
   11d24:	sbc	fp, fp, #0
   11d28:	cmp	r0, #0
   11d2c:	beq	11d94 <__assert_fail@plt+0x880>
   11d30:	ldr	r3, [pc, #260]	; 11e3c <__assert_fail@plt+0x928>
   11d34:	mov	r2, #10
   11d38:	str	r3, [sp]
   11d3c:	mov	r1, #0
   11d40:	add	r3, sp, #88	; 0x58
   11d44:	bl	16dd4 <__assert_fail@plt+0x58c0>
   11d48:	cmp	r0, #0
   11d4c:	bne	11d94 <__assert_fail@plt+0x880>
   11d50:	ldrd	r0, [sp, #24]
   11d54:	ldrd	r2, [sp, #88]	; 0x58
   11d58:	ldrd	r6, [sp, #24]
   11d5c:	mvn	r1, r1
   11d60:	cmp	r1, r3
   11d64:	mvn	r0, r0
   11d68:	cmpeq	r0, r2
   11d6c:	movcs	r1, #1
   11d70:	movcc	r1, #0
   11d74:	cmp	r3, r7
   11d78:	cmpeq	r2, r6
   11d7c:	movcs	r1, #0
   11d80:	andcc	r1, r1, #1
   11d84:	cmp	r1, #0
   11d88:	beq	11d94 <__assert_fail@plt+0x880>
   11d8c:	adds	sl, sl, r2
   11d90:	adc	fp, fp, r3
   11d94:	ldr	r3, [pc, #380]	; 11f18 <__assert_fail@plt+0xa04>
   11d98:	mov	r6, #0
   11d9c:	mov	r7, #0
   11da0:	ldr	r0, [r3]
   11da4:	bl	11370 <strlen@plt>
   11da8:	mov	r9, #0
   11dac:	mov	r8, r0
   11db0:	adds	r6, r6, #1
   11db4:	mov	r3, r9
   11db8:	mov	r0, sl
   11dbc:	mov	r1, fp
   11dc0:	mov	r2, r8
   11dc4:	adc	r7, r7, #0
   11dc8:	bl	17a20 <__assert_fail@plt+0x650c>
   11dcc:	mov	sl, r0
   11dd0:	mov	fp, r1
   11dd4:	orrs	r3, sl, fp
   11dd8:	bne	11db0 <__assert_fail@plt+0x89c>
   11ddc:	ldr	r3, [pc, #308]	; 11f18 <__assert_fail@plt+0xa04>
   11de0:	mov	r2, #0
   11de4:	strb	r2, [r3, #4]
   11de8:	ldr	r3, [pc, #272]	; 11f00 <__assert_fail@plt+0x9ec>
   11dec:	mov	fp, r3
   11df0:	ldr	r2, [r3, #28]
   11df4:	cmp	r2, #0
   11df8:	beq	11fa8 <__assert_fail@plt+0xa94>
   11dfc:	mov	r3, #0
   11e00:	cmp	r3, r7
   11e04:	cmpeq	r2, r6
   11e08:	bcs	11f24 <__assert_fail@plt+0xa10>
   11e0c:	mov	r2, #5
   11e10:	ldr	r1, [pc, #180]	; 11ecc <__assert_fail@plt+0x9b8>
   11e14:	mov	r0, #0
   11e18:	bl	11238 <dcgettext@plt>
   11e1c:	strd	r6, [sp]
   11e20:	mov	r1, #0
   11e24:	mov	r2, r0
   11e28:	mov	r0, #1
   11e2c:	bl	112ec <error@plt>
   11e30:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e34:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   11e38:	andeq	sl, r2, r0, ror r3
   11e3c:	andeq	r8, r1, r7, ror #10
   11e40:	andeq	r8, r1, sl, asr #18
   11e44:	andeq	r8, r1, r7, lsr #17
   11e48:	andeq	r4, r1, ip, lsl r4
   11e4c:	andeq	r8, r1, pc, ror #21
   11e50:	andeq	r8, r1, r2, ror #18
   11e54:	andeq	r7, r1, r4, ror ip
   11e58:	andeq	r8, r1, r5, ror #19
   11e5c:	andeq	r7, r1, r4, lsl #27
   11e60:	andeq	r8, r1, r8, lsr #21
   11e64:	strdeq	r8, [r1], -sp
   11e68:	andeq	r0, r0, r1, lsl #2
   11e6c:	andeq	r0, r0, r2, lsl #2
   11e70:	muleq	r1, r3, r9
   11e74:	andeq	r8, r1, sp, ror r9
   11e78:	andeq	r8, r1, r3, asr #19
   11e7c:	andeq	r8, r1, r5, lsl sl
   11e80:	andeq	r8, r1, r8, lsl sl
   11e84:	andeq	r8, r1, r4, lsr sl
   11e88:	andeq	r8, r1, r9, asr #20
   11e8c:	andeq	r8, r1, r0, ror #20
   11e90:	andeq	r8, r1, r3, ror #20
   11e94:	andeq	r8, r1, r0, lsl #21
   11e98:	andeq	r8, r1, pc, ror ip
   11e9c:			; <UNDEFINED> instruction: 0x00018ab3
   11ea0:	andeq	r8, r1, r4, asr #21
   11ea4:	strdeq	r8, [r1], -r1
   11ea8:	andeq	r8, r1, r0, lsr #22
   11eac:	andeq	r8, r1, r6, lsr fp
   11eb0:	andeq	sl, r2, ip, ror #6
   11eb4:	andeq	r8, r1, sl, asr #22
   11eb8:	andeq	sl, r2, r8, ror #2
   11ebc:	andeq	r8, r1, r3, lsr #17
   11ec0:	andeq	r7, r1, r5, ror #31
   11ec4:	andeq	r8, r1, ip, asr fp
   11ec8:	andeq	r8, r1, r1, ror #20
   11ecc:	muleq	r1, r9, fp
   11ed0:	andeq	sl, r2, r0, ror #6
   11ed4:	andeq	r8, r1, r5, asr #23
   11ed8:	ldrdeq	r8, [r1], -r6
   11edc:	andeq	r8, r1, r6, lsl ip
   11ee0:	andeq	sl, r2, r8, lsr #7
   11ee4:	svcne	0x00fe0000
   11ee8:	andeq	r8, r1, r1, lsr ip
   11eec:	andeq	r8, r1, fp, lsl sl
   11ef0:	muleq	r1, r2, fp
   11ef4:	andeq	sl, r2, r8, lsl r4
   11ef8:	muleq	r1, r1, sp
   11efc:	andeq	r8, r1, r0, asr ip
   11f00:	andeq	sl, r2, r8, ror r3
   11f04:	andeq	r8, r1, r0, lsl #28
   11f08:	andeq	r7, r1, r5, lsr #27
   11f0c:	andeq	r0, r0, r3, ror #6
   11f10:	andeq	r8, r1, r5, asr ip
   11f14:			; <UNDEFINED> instruction: 0x00017db7
   11f18:	andeq	sl, r2, r8, asr r1
   11f1c:	andeq	r8, r1, r3, ror ip
   11f20:			; <UNDEFINED> instruction: 0x00017fbf
   11f24:	ldr	r3, [pc, #-20]	; 11f18 <__assert_fail@plt+0xa04>
   11f28:	mov	r2, #0
   11f2c:	strb	r2, [r3, #4]
   11f30:	ldr	r6, [pc, #-104]	; 11ed0 <__assert_fail@plt+0x9bc>
   11f34:	ldr	r2, [sp, #48]	; 0x30
   11f38:	ldr	r3, [r6]
   11f3c:	cmp	r2, r3
   11f40:	addgt	r2, r3, #1
   11f44:	strgt	r2, [r6]
   11f48:	ldrgt	r2, [sp, #40]	; 0x28
   11f4c:	ldrgt	r3, [r2, r3, lsl #2]
   11f50:	ldr	r2, [sp, #48]	; 0x30
   11f54:	strgt	r3, [fp, #300]	; 0x12c
   11f58:	ldr	r3, [r6]
   11f5c:	cmp	r2, r3
   11f60:	addgt	r2, r3, #1
   11f64:	strgt	r2, [r6]
   11f68:	ldrgt	r2, [sp, #40]	; 0x28
   11f6c:	ldrgt	r3, [r2, r3, lsl #2]
   11f70:	ldr	r2, [sp, #48]	; 0x30
   11f74:	strgt	r3, [fp, #12]
   11f78:	ldr	r3, [r6]
   11f7c:	cmp	r2, r3
   11f80:	ble	11fbc <__assert_fail@plt+0xaa8>
   11f84:	mov	r2, #5
   11f88:	ldr	r1, [pc, #-188]	; 11ed4 <__assert_fail@plt+0x9c0>
   11f8c:	mov	r0, #0
   11f90:	bl	11238 <dcgettext@plt>
   11f94:	ldr	r3, [r6]
   11f98:	ldr	r2, [sp, #40]	; 0x28
   11f9c:	mov	r4, r0
   11fa0:	ldr	r0, [r2, r3, lsl #2]
   11fa4:	b	117a4 <__assert_fail@plt+0x290>
   11fa8:	cmp	r7, #0
   11fac:	cmpeq	r6, #2
   11fb0:	movcc	r6, #2
   11fb4:	str	r6, [r3, #28]
   11fb8:	b	11f30 <__assert_fail@plt+0xa1c>
   11fbc:	ldr	r0, [fp, #40]	; 0x28
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fe0 <__assert_fail@plt+0xacc>
   11fc8:	bl	11370 <strlen@plt>
   11fcc:	ldr	r3, [fp, #28]
   11fd0:	cmp	r0, r3
   11fd4:	movhi	r2, #5
   11fd8:	ldrhi	r1, [pc, #-264]	; 11ed8 <__assert_fail@plt+0x9c4>
   11fdc:	bhi	11828 <__assert_fail@plt+0x314>
   11fe0:	ldr	r6, [fp, #300]	; 0x12c
   11fe4:	ldr	r1, [pc, #-232]	; 11f04 <__assert_fail@plt+0x9f0>
   11fe8:	mov	r0, r6
   11fec:	bl	11190 <strcmp@plt>
   11ff0:	cmp	r0, #0
   11ff4:	beq	1204c <__assert_fail@plt+0xb38>
   11ff8:	mov	r3, #0
   11ffc:	mov	r2, r3
   12000:	mov	r1, r6
   12004:	mov	r0, r3
   12008:	bl	145dc <__assert_fail@plt+0x30c8>
   1200c:	cmp	r0, #0
   12010:	bge	1204c <__assert_fail@plt+0xb38>
   12014:	bl	113b8 <__errno_location@plt>
   12018:	ldr	r1, [pc, #-324]	; 11edc <__assert_fail@plt+0x9c8>
   1201c:	mov	r2, #5
   12020:	ldr	r4, [r0]
   12024:	mov	r0, #0
   12028:	bl	11238 <dcgettext@plt>
   1202c:	ldr	r1, [fp, #300]	; 0x12c
   12030:	mov	r5, r0
   12034:	mov	r0, #4
   12038:	bl	15c88 <__assert_fail@plt+0x4774>
   1203c:	mov	r3, r0
   12040:	mov	r2, r5
   12044:	mov	r1, r4
   12048:	b	11a5c <__assert_fail@plt+0x548>
   1204c:	ldr	r1, [pc, #-372]	; 11ee0 <__assert_fail@plt+0x9cc>
   12050:	mov	r0, #0
   12054:	bl	17c10 <__assert_fail@plt+0x66fc>
   12058:	cmp	r0, #0
   1205c:	beq	1207c <__assert_fail@plt+0xb68>
   12060:	bl	113b8 <__errno_location@plt>
   12064:	ldr	r2, [fp, #300]	; 0x12c
   12068:	ldr	r4, [r0]
   1206c:	mov	r1, #3
   12070:	mov	r0, #0
   12074:	bl	15d2c <__assert_fail@plt+0x4818>
   12078:	b	12c3c <__assert_fail@plt+0x1728>
   1207c:	ldr	r3, [sp, #44]	; 0x2c
   12080:	cmp	r3, #0
   12084:	bne	120a0 <__assert_fail@plt+0xb8c>
   12088:	ldr	r3, [fp, #104]	; 0x68
   1208c:	ldr	r2, [pc, #-432]	; 11ee4 <__assert_fail@plt+0x9d0>
   12090:	sub	r1, r3, #131072	; 0x20000
   12094:	cmp	r1, r2
   12098:	movhi	r3, #131072	; 0x20000
   1209c:	str	r3, [sp, #44]	; 0x2c
   120a0:	ldr	r3, [sp, #44]	; 0x2c
   120a4:	ldr	r0, [sp, #56]	; 0x38
   120a8:	add	r1, r3, #1
   120ac:	bl	166e0 <__assert_fail@plt+0x51cc>
   120b0:	cmp	r5, #1
   120b4:	mvnhi	r5, #0
   120b8:	mvnhi	r2, #0
   120bc:	mvnhi	r3, #-2147483648	; 0x80000000
   120c0:	str	r0, [sp, #40]	; 0x28
   120c4:	bhi	1237c <__assert_fail@plt+0xe68>
   120c8:	mov	r3, #1
   120cc:	str	r3, [sp]
   120d0:	mov	r2, #0
   120d4:	mov	r3, #0
   120d8:	mov	r0, #0
   120dc:	bl	11298 <lseek64@plt>
   120e0:	mov	r3, r1
   120e4:	cmp	r0, #0
   120e8:	sbcs	r3, r3, #0
   120ec:	strd	r0, [sp, #48]	; 0x30
   120f0:	bge	12138 <__assert_fail@plt+0xc24>
   120f4:	bl	113b8 <__errno_location@plt>
   120f8:	ldr	r3, [r0]
   120fc:	cmp	r3, #29
   12100:	moveq	r3, #0
   12104:	beq	121a0 <__assert_fail@plt+0xc8c>
   12108:	bl	113b8 <__errno_location@plt>
   1210c:	mov	r2, #5
   12110:	ldr	r1, [pc, #-560]	; 11ee8 <__assert_fail@plt+0x9d4>
   12114:	ldr	r4, [r0]
   12118:	mov	r0, #0
   1211c:	bl	11238 <dcgettext@plt>
   12120:	ldr	r2, [fp, #300]	; 0x12c
   12124:	mov	r1, #3
   12128:	mov	r5, r0
   1212c:	mov	r0, #0
   12130:	bl	15d2c <__assert_fail@plt+0x4818>
   12134:	b	1203c <__assert_fail@plt+0xb28>
   12138:	ldr	r6, [sp, #44]	; 0x2c
   1213c:	mov	r8, #0
   12140:	mov	r9, #0
   12144:	mov	r5, #0
   12148:	mov	r7, #0
   1214c:	ldr	r3, [sp, #44]	; 0x2c
   12150:	mov	r0, r5
   12154:	sub	r2, r3, r8
   12158:	ldr	r3, [sp, #40]	; 0x28
   1215c:	add	r1, r3, r8
   12160:	bl	15e78 <__assert_fail@plt+0x4964>
   12164:	cmp	r0, #0
   12168:	beq	1227c <__assert_fail@plt+0xd68>
   1216c:	cmn	r0, #1
   12170:	beq	12108 <__assert_fail@plt+0xbf4>
   12174:	adds	r8, r8, r0
   12178:	adc	r9, r9, #0
   1217c:	cmp	r8, r6
   12180:	sbcs	r3, r9, r7
   12184:	blt	1214c <__assert_fail@plt+0xc38>
   12188:	ldr	r3, [pc, #-656]	; 11f00 <__assert_fail@plt+0x9ec>
   1218c:	ldrd	r6, [r3, #96]	; 0x60
   12190:	orrs	r2, r6, r7
   12194:	bne	121a8 <__assert_fail@plt+0xc94>
   12198:	bl	113b8 <__errno_location@plt>
   1219c:	mov	r3, #75	; 0x4b
   121a0:	str	r3, [r0]
   121a4:	b	12108 <__assert_fail@plt+0xbf4>
   121a8:	ldrd	r0, [sp, #48]	; 0x30
   121ac:	ldr	r5, [r3, #64]	; 0x40
   121b0:	adds	r0, r0, r8
   121b4:	adc	r1, r1, r9
   121b8:	cmp	r6, r0
   121bc:	sbcs	r2, r7, r1
   121c0:	and	r3, r5, #53248	; 0xd000
   121c4:	movge	r5, #1
   121c8:	movlt	r5, #0
   121cc:	cmp	r3, #32768	; 0x8000
   121d0:	movne	r5, #0
   121d4:	andeq	r5, r5, #1
   121d8:	cmp	r5, #0
   121dc:	strd	r0, [sp, #48]	; 0x30
   121e0:	bne	12248 <__assert_fail@plt+0xd34>
   121e4:	mov	r3, #2
   121e8:	str	r3, [sp]
   121ec:	mov	r2, #0
   121f0:	mov	r3, #0
   121f4:	mov	r0, r5
   121f8:	bl	11298 <lseek64@plt>
   121fc:	cmp	r0, #0
   12200:	sbcs	r3, r1, #0
   12204:	mov	r6, r0
   12208:	mov	r7, r1
   1220c:	blt	12108 <__assert_fail@plt+0xbf4>
   12210:	ldrd	r2, [sp, #48]	; 0x30
   12214:	cmp	r3, r1
   12218:	cmpeq	r2, r0
   1221c:	beq	12248 <__assert_fail@plt+0xd34>
   12220:	str	r5, [sp]
   12224:	mov	r0, r5
   12228:	bl	11298 <lseek64@plt>
   1222c:	cmp	r0, #0
   12230:	sbcs	r3, r1, #0
   12234:	blt	12108 <__assert_fail@plt+0xbf4>
   12238:	ldrd	r2, [sp, #48]	; 0x30
   1223c:	cmp	r6, r2
   12240:	sbcs	r3, r7, r3
   12244:	ldrdlt	r6, [sp, #48]	; 0x30
   12248:	ldrd	r2, [sp, #48]	; 0x30
   1224c:	subs	r2, r6, r2
   12250:	sbc	r3, r7, r3
   12254:	adds	r8, r8, r2
   12258:	adc	r9, r9, r3
   1225c:	mvn	r3, #-2147483648	; 0x80000000
   12260:	mvn	r2, #0
   12264:	cmp	r9, r3
   12268:	cmpeq	r8, r2
   1226c:	beq	12198 <__assert_fail@plt+0xc84>
   12270:	cmp	r8, #0
   12274:	sbcs	r3, r9, #0
   12278:	blt	12108 <__assert_fail@plt+0xbf4>
   1227c:	ldr	r2, [sp, #44]	; 0x2c
   12280:	cmp	r8, r2
   12284:	asr	r3, r2, #31
   12288:	sbcs	r1, r9, r3
   1228c:	movlt	r2, r8
   12290:	mov	r5, r2
   12294:	ldrd	r2, [sp, #24]
   12298:	cmp	r2, #0
   1229c:	sbcs	r3, r3, #0
   122a0:	bge	122e0 <__assert_fail@plt+0xdcc>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #-964]	; 11eec <__assert_fail@plt+0x9d8>
   122ac:	mov	r0, #0
   122b0:	bl	11238 <dcgettext@plt>
   122b4:	add	r2, sp, #88	; 0x58
   122b8:	mov	r4, r0
   122bc:	ldrd	r0, [sp, #24]
   122c0:	bl	147d4 <__assert_fail@plt+0x32c0>
   122c4:	bl	15e6c <__assert_fail@plt+0x4958>
   122c8:	ldr	r2, [pc, #-992]	; 11ef0 <__assert_fail@plt+0x9dc>
   122cc:	mov	r3, r4
   122d0:	mov	r1, #75	; 0x4b
   122d4:	str	r0, [sp]
   122d8:	mov	r0, #1
   122dc:	bl	112ec <error@plt>
   122e0:	ldrd	r0, [sp, #24]
   122e4:	mov	r2, r8
   122e8:	mov	r3, r9
   122ec:	cmp	r9, r1
   122f0:	cmpeq	r8, r0
   122f4:	strd	r8, [sp, #48]	; 0x30
   122f8:	movcc	r2, r0
   122fc:	movcc	r3, r1
   12300:	bcc	1237c <__assert_fail@plt+0xe68>
   12304:	ldr	r6, [pc, #-1036]	; 11f00 <__assert_fail@plt+0x9ec>
   12308:	ldr	r3, [r6]
   1230c:	cmp	r3, #0
   12310:	beq	12354 <__assert_fail@plt+0xe40>
   12314:	add	r0, r6, #308	; 0x134
   12318:	bl	1146c <sigemptyset@plt>
   1231c:	add	r2, sp, #88	; 0x58
   12320:	mov	r1, #0
   12324:	mov	r0, #13
   12328:	bl	1128c <sigaction@plt>
   1232c:	ldr	r3, [sp, #88]	; 0x58
   12330:	cmp	r3, #1
   12334:	beq	12344 <__assert_fail@plt+0xe30>
   12338:	mov	r1, #13
   1233c:	add	r0, r6, #308	; 0x134
   12340:	bl	1131c <sigaddset@plt>
   12344:	ldr	r2, [pc, #-1112]	; 11ef4 <__assert_fail@plt+0x9e0>
   12348:	mov	r0, #0
   1234c:	add	r1, r2, #148	; 0x94
   12350:	bl	111c0 <sigprocmask@plt>
   12354:	sub	r4, r4, #2
   12358:	cmp	r4, #5
   1235c:	ldrls	pc, [pc, r4, lsl #2]
   12360:	b	12478 <__assert_fail@plt+0xf64>
   12364:	andeq	r2, r1, r0, lsr #9
   12368:	andeq	r2, r1, r4, lsl #7
   1236c:	andeq	r2, r1, r4, lsl #7
   12370:	muleq	r1, ip, r7
   12374:	ldrdeq	r2, [r1], -r4
   12378:			; <UNDEFINED> instruction: 0x00012db0
   1237c:	strd	r2, [sp, #48]	; 0x30
   12380:	b	12304 <__assert_fail@plt+0xdf0>
   12384:	ldr	sl, [pc, #-1140]	; 11f18 <__assert_fail@plt+0xa04>
   12388:	mov	r8, #0
   1238c:	mov	r9, #0
   12390:	mov	r6, #1
   12394:	ldr	r2, [sp, #44]	; 0x2c
   12398:	ldr	r1, [sp, #40]	; 0x28
   1239c:	mov	r0, #0
   123a0:	bl	15e78 <__assert_fail@plt+0x4964>
   123a4:	cmn	r0, #1
   123a8:	mov	r7, r0
   123ac:	beq	12060 <__assert_fail@plt+0xb4c>
   123b0:	ldr	r1, [sp, #40]	; 0x28
   123b4:	ldr	r3, [sp, #40]	; 0x28
   123b8:	ldr	r2, [sl, #12]
   123bc:	add	r3, r3, r0
   123c0:	mov	r5, r1
   123c4:	mov	r4, r1
   123c8:	strb	r2, [r1, r0]
   123cc:	ldr	r1, [sl, #12]
   123d0:	mov	r0, r4
   123d4:	str	r3, [sp, #32]
   123d8:	bl	11268 <rawmemchr@plt>
   123dc:	ldr	r3, [sp, #32]
   123e0:	cmp	r3, r0
   123e4:	bne	12430 <__assert_fail@plt+0xf1c>
   123e8:	cmp	r3, r5
   123ec:	beq	12404 <__assert_fail@plt+0xef0>
   123f0:	mov	r0, r6
   123f4:	sub	r2, r3, r5
   123f8:	mov	r1, r5
   123fc:	bl	13d70 <__assert_fail@plt+0x285c>
   12400:	mov	r6, #0
   12404:	cmp	r7, #0
   12408:	bne	12394 <__assert_fail@plt+0xe80>
   1240c:	mov	r0, #0
   12410:	bl	114fc <close@plt>
   12414:	ldr	r4, [pc, #-1308]	; 11f00 <__assert_fail@plt+0x9ec>
   12418:	subs	r5, r0, #0
   1241c:	beq	13120 <__assert_fail@plt+0x1c0c>
   12420:	bl	113b8 <__errno_location@plt>
   12424:	ldr	r2, [r4, #300]	; 0x12c
   12428:	ldr	r5, [r0]
   1242c:	b	12934 <__assert_fail@plt+0x1420>
   12430:	add	r4, r0, #1
   12434:	ldrd	r0, [sp, #24]
   12438:	adds	r8, r8, #1
   1243c:	adc	r9, r9, #0
   12440:	cmp	r9, r1
   12444:	cmpeq	r8, r0
   12448:	bcc	123cc <__assert_fail@plt+0xeb8>
   1244c:	sub	r2, r4, r5
   12450:	mov	r1, r5
   12454:	mov	r0, r6
   12458:	str	r3, [sp, #32]
   1245c:	mov	r5, r4
   12460:	bl	13d70 <__assert_fail@plt+0x285c>
   12464:	mov	r8, #0
   12468:	mov	r9, #0
   1246c:	mov	r6, #1
   12470:	ldr	r3, [sp, #32]
   12474:	b	123cc <__assert_fail@plt+0xeb8>
   12478:	mov	r2, #0
   1247c:	mov	r3, #0
   12480:	ldrd	r0, [sp, #24]
   12484:	strd	r2, [sp, #8]
   12488:	mvn	r3, #0
   1248c:	str	r3, [sp]
   12490:	ldr	r2, [sp, #40]	; 0x28
   12494:	ldr	r3, [sp, #44]	; 0x2c
   12498:	bl	13e6c <__assert_fail@plt+0x2958>
   1249c:	b	1240c <__assert_fail@plt+0xef8>
   124a0:	mov	r7, #0
   124a4:	mov	r2, #0
   124a8:	mov	r3, #0
   124ac:	mov	r9, r7
   124b0:	mov	r6, r7
   124b4:	mov	r8, r7
   124b8:	strd	r2, [sp, #32]
   124bc:	ldr	r2, [sp, #44]	; 0x2c
   124c0:	ldr	r1, [sp, #40]	; 0x28
   124c4:	mov	r0, #0
   124c8:	bl	15e78 <__assert_fail@plt+0x4964>
   124cc:	cmn	r0, #1
   124d0:	str	r0, [sp, #48]	; 0x30
   124d4:	beq	128e8 <__assert_fail@plt+0x13d4>
   124d8:	ldr	r5, [sp, #40]	; 0x28
   124dc:	mov	r4, r0
   124e0:	cmp	r4, #0
   124e4:	bne	12528 <__assert_fail@plt+0x1014>
   124e8:	ldr	r3, [sp, #48]	; 0x30
   124ec:	cmp	r3, #0
   124f0:	bne	124bc <__assert_fail@plt+0xfa8>
   124f4:	cmp	r8, #0
   124f8:	beq	1251c <__assert_fail@plt+0x1008>
   124fc:	ldr	r2, [sp, #36]	; 0x24
   12500:	ldr	r3, [sp, #32]
   12504:	mov	r1, r6
   12508:	orrs	r3, r3, r2
   1250c:	moveq	r0, #1
   12510:	mov	r2, r8
   12514:	movne	r0, #0
   12518:	bl	13d70 <__assert_fail@plt+0x285c>
   1251c:	mov	r0, r6
   12520:	bl	1468c <__assert_fail@plt+0x3178>
   12524:	b	1240c <__assert_fail@plt+0xef8>
   12528:	mov	r2, r8
   1252c:	mov	r3, #0
   12530:	ldrd	r0, [sp, #32]
   12534:	strd	r2, [sp, #56]	; 0x38
   12538:	ldrd	r2, [sp, #24]
   1253c:	subs	r2, r2, r0
   12540:	sbc	r3, r3, r1
   12544:	subs	r0, r2, r8
   12548:	mov	r1, #0
   1254c:	sbc	r1, r3, r1
   12550:	mov	r3, r1
   12554:	mov	r1, #0
   12558:	mov	r2, r0
   1255c:	cmp	r3, r1
   12560:	cmpeq	r2, r4
   12564:	bhi	12774 <__assert_fail@plt+0x1260>
   12568:	ldr	r3, [sp, #24]
   1256c:	ldr	r2, [sp, #32]
   12570:	mov	r0, r5
   12574:	sub	sl, r3, r2
   12578:	ldr	r3, [pc, #-1640]	; 11f18 <__assert_fail@plt+0xa04>
   1257c:	sub	sl, sl, r8
   12580:	mov	r2, sl
   12584:	ldr	r1, [r3, #12]
   12588:	bl	113a0 <memrchr@plt>
   1258c:	sub	fp, sl, #1
   12590:	add	fp, r5, fp
   12594:	mov	r3, r0
   12598:	cmp	r8, #0
   1259c:	beq	12618 <__assert_fail@plt+0x1104>
   125a0:	ldr	r2, [sp, #32]
   125a4:	ldr	r1, [sp, #36]	; 0x24
   125a8:	orrs	r2, r2, r1
   125ac:	moveq	r0, #1
   125b0:	movne	r0, #0
   125b4:	cmp	r3, #0
   125b8:	moveq	r2, r0
   125bc:	orrne	r2, r0, #1
   125c0:	cmp	r2, #0
   125c4:	beq	12678 <__assert_fail@plt+0x1164>
   125c8:	mov	r2, r8
   125cc:	mov	r1, r6
   125d0:	str	r3, [sp, #56]	; 0x38
   125d4:	bl	13d70 <__assert_fail@plt+0x285c>
   125d8:	ldrd	r0, [sp, #32]
   125dc:	mov	r3, #0
   125e0:	adds	r2, r8, r0
   125e4:	adc	r3, r3, r1
   125e8:	strd	r2, [sp, #32]
   125ec:	ldr	r3, [sp, #44]	; 0x2c
   125f0:	cmp	r3, r8
   125f4:	ldr	r3, [sp, #56]	; 0x38
   125f8:	ldrcs	r9, [sp, #44]	; 0x2c
   125fc:	bcs	12618 <__assert_fail@plt+0x1104>
   12600:	mov	r0, r6
   12604:	ldr	r1, [sp, #44]	; 0x2c
   12608:	bl	16720 <__assert_fail@plt+0x520c>
   1260c:	ldr	r9, [sp, #44]	; 0x2c
   12610:	ldr	r3, [sp, #56]	; 0x38
   12614:	mov	r6, r0
   12618:	cmp	r3, #0
   1261c:	moveq	r8, r3
   12620:	beq	12678 <__assert_fail@plt+0x1164>
   12624:	sub	r3, r3, r5
   12628:	add	r7, r3, #1
   1262c:	ldr	r2, [sp, #36]	; 0x24
   12630:	ldr	r3, [sp, #32]
   12634:	mov	r1, r5
   12638:	orrs	r3, r3, r2
   1263c:	moveq	r0, #1
   12640:	mov	r2, r7
   12644:	movne	r0, #0
   12648:	bl	13d70 <__assert_fail@plt+0x285c>
   1264c:	ldrd	r2, [sp, #32]
   12650:	sub	r4, r4, r7
   12654:	add	r5, r5, r7
   12658:	adds	r2, r2, r7
   1265c:	adc	r3, r3, #0
   12660:	cmp	fp, #0
   12664:	subne	sl, sl, r7
   12668:	movne	r8, #0
   1266c:	moveq	r8, fp
   12670:	mov	r7, #1
   12674:	strd	r2, [sp, #32]
   12678:	eor	r3, r7, #1
   1267c:	cmp	r4, #0
   12680:	moveq	r3, #0
   12684:	andne	r3, r3, #1
   12688:	cmp	r3, #0
   1268c:	beq	126e4 <__assert_fail@plt+0x11d0>
   12690:	ldr	r2, [sp, #32]
   12694:	ldr	r1, [sp, #36]	; 0x24
   12698:	cmp	fp, #0
   1269c:	movne	r3, sl
   126a0:	moveq	r3, r4
   126a4:	orrs	r2, r2, r1
   126a8:	moveq	r0, #1
   126ac:	mov	r1, r5
   126b0:	mov	r2, r3
   126b4:	movne	r0, #0
   126b8:	str	r3, [sp, #56]	; 0x38
   126bc:	bl	13d70 <__assert_fail@plt+0x285c>
   126c0:	ldrd	r0, [sp, #32]
   126c4:	ldr	r3, [sp, #56]	; 0x38
   126c8:	adds	r0, r0, r3
   126cc:	adc	r1, r1, #0
   126d0:	cmp	fp, #0
   126d4:	sub	r4, r4, r3
   126d8:	add	r5, r5, r3
   126dc:	subne	sl, sl, r3
   126e0:	strd	r0, [sp, #32]
   126e4:	cmp	fp, #0
   126e8:	cmpne	sl, #0
   126ec:	bne	1270c <__assert_fail@plt+0x11f8>
   126f0:	cmp	r4, #0
   126f4:	clz	r3, fp
   126f8:	lsr	r3, r3, #5
   126fc:	moveq	r3, #0
   12700:	cmp	r3, #0
   12704:	beq	1275c <__assert_fail@plt+0x1248>
   12708:	mov	sl, r4
   1270c:	sub	r3, r9, r8
   12710:	cmp	r3, sl
   12714:	bcs	12740 <__assert_fail@plt+0x122c>
   12718:	ldr	r3, [sp, #44]	; 0x2c
   1271c:	mvn	r3, r3
   12720:	cmp	r3, r9
   12724:	bcc	12798 <__assert_fail@plt+0x1284>
   12728:	ldr	r3, [sp, #44]	; 0x2c
   1272c:	mov	r0, r6
   12730:	add	r9, r9, r3
   12734:	mov	r1, r9
   12738:	bl	16720 <__assert_fail@plt+0x520c>
   1273c:	mov	r6, r0
   12740:	mov	r1, r5
   12744:	add	r0, r6, r8
   12748:	mov	r2, sl
   1274c:	bl	111f0 <memcpy@plt>
   12750:	add	r8, r8, sl
   12754:	sub	r4, r4, sl
   12758:	add	r5, r5, sl
   1275c:	cmp	fp, #0
   12760:	movne	r2, #0
   12764:	movne	r3, #0
   12768:	movne	r7, #0
   1276c:	strdne	r2, [sp, #32]
   12770:	b	124e0 <__assert_fail@plt+0xfcc>
   12774:	ldr	r3, [pc, #-2148]	; 11f18 <__assert_fail@plt+0xa04>
   12778:	mov	r2, r4
   1277c:	mov	r0, r5
   12780:	ldr	r1, [r3, #12]
   12784:	bl	113a0 <memrchr@plt>
   12788:	mov	fp, #0
   1278c:	mov	sl, fp
   12790:	mov	r3, r0
   12794:	b	12598 <__assert_fail@plt+0x1084>
   12798:	bl	16b88 <__assert_fail@plt+0x5674>
   1279c:	ldrd	r2, [sp, #32]
   127a0:	orrs	r3, r2, r3
   127a4:	bne	127cc <__assert_fail@plt+0x12b8>
   127a8:	ldrd	r2, [sp, #24]
   127ac:	ldrd	r0, [sp, #48]	; 0x30
   127b0:	bl	17a20 <__assert_fail@plt+0x650c>
   127b4:	ldrd	r2, [sp, #24]
   127b8:	str	r5, [sp]
   127bc:	strd	r2, [sp, #8]
   127c0:	ldr	r3, [sp, #44]	; 0x2c
   127c4:	ldr	r2, [sp, #40]	; 0x28
   127c8:	b	12498 <__assert_fail@plt+0xf84>
   127cc:	ldrd	r2, [sp, #32]
   127d0:	ldrd	r0, [sp, #24]
   127d4:	ldrd	r6, [sp, #24]
   127d8:	cmp	r3, r1
   127dc:	cmpeq	r2, r0
   127e0:	ldrd	r0, [sp, #48]	; 0x30
   127e4:	movls	r3, #1
   127e8:	movhi	r3, #0
   127ec:	cmp	r1, r7
   127f0:	cmpeq	r0, r6
   127f4:	movcc	r3, #0
   127f8:	andcs	r3, r3, #1
   127fc:	cmp	r3, #0
   12800:	bne	12818 <__assert_fail@plt+0x1304>
   12804:	ldr	r3, [pc, #-2324]	; 11ef8 <__assert_fail@plt+0x9e4>
   12808:	ldr	r1, [pc, #-2300]	; 11f14 <__assert_fail@plt+0xa00>
   1280c:	ldr	r0, [pc, #-2328]	; 11efc <__assert_fail@plt+0x9e8>
   12810:	mov	r2, #996	; 0x3e4
   12814:	bl	11514 <__assert_fail@plt>
   12818:	ldrd	r2, [sp, #24]
   1281c:	ldrd	r0, [sp, #48]	; 0x30
   12820:	bl	17a20 <__assert_fail@plt+0x650c>
   12824:	ldrd	r8, [sp, #32]
   12828:	ldrd	sl, [sp, #24]
   1282c:	subs	r8, r8, #1
   12830:	sbc	r9, r9, #0
   12834:	mul	r3, r8, r1
   12838:	mla	r3, r0, r9, r3
   1283c:	umull	r8, r9, r8, r0
   12840:	add	r9, r3, r9
   12844:	ldrd	r2, [sp, #32]
   12848:	mov	r6, r8
   1284c:	mov	r7, r9
   12850:	cmp	r3, fp
   12854:	cmpeq	r2, sl
   12858:	beq	12880 <__assert_fail@plt+0x136c>
   1285c:	ldr	r3, [sp, #36]	; 0x24
   12860:	ldr	r2, [sp, #32]
   12864:	mul	r3, r0, r3
   12868:	mla	r1, r2, r1, r3
   1286c:	umull	r2, r3, r0, r2
   12870:	strd	r2, [sp, #48]	; 0x30
   12874:	ldr	r3, [sp, #52]	; 0x34
   12878:	add	r3, r1, r3
   1287c:	str	r3, [sp, #52]	; 0x34
   12880:	mov	r3, #0
   12884:	cmp	r8, r5
   12888:	sbcs	r1, r9, r3
   1288c:	bge	128fc <__assert_fail@plt+0x13e8>
   12890:	ldr	r3, [sp, #40]	; 0x28
   12894:	sub	r5, r5, r8
   12898:	mov	r2, r5
   1289c:	add	r1, r3, r8
   128a0:	mov	r0, r3
   128a4:	bl	111cc <memmove@plt>
   128a8:	mov	r9, #0
   128ac:	mov	sl, #1
   128b0:	mvn	fp, #0
   128b4:	ldrd	r2, [sp, #48]	; 0x30
   128b8:	cmp	r6, r2
   128bc:	sbcs	r3, r7, r3
   128c0:	bge	1240c <__assert_fail@plt+0xef8>
   128c4:	cmn	r5, #1
   128c8:	bne	12950 <__assert_fail@plt+0x143c>
   128cc:	ldr	r2, [sp, #44]	; 0x2c
   128d0:	ldr	r1, [sp, #40]	; 0x28
   128d4:	mov	r0, r9
   128d8:	bl	15e78 <__assert_fail@plt+0x4964>
   128dc:	cmn	r0, #1
   128e0:	mov	r5, r0
   128e4:	bne	12950 <__assert_fail@plt+0x143c>
   128e8:	bl	113b8 <__errno_location@plt>
   128ec:	ldr	r3, [pc, #-2548]	; 11f00 <__assert_fail@plt+0x9ec>
   128f0:	ldr	r2, [r3, #300]	; 0x12c
   128f4:	ldr	r4, [r0]
   128f8:	b	1206c <__assert_fail@plt+0xb58>
   128fc:	subs	r2, r8, r5
   12900:	mov	r4, #1
   12904:	sbc	r3, r9, r3
   12908:	str	r4, [sp]
   1290c:	mov	r0, #0
   12910:	bl	11298 <lseek64@plt>
   12914:	cmp	r0, #0
   12918:	sbcs	r3, r1, #0
   1291c:	mvnge	r5, #0
   12920:	bge	128a8 <__assert_fail@plt+0x1394>
   12924:	bl	113b8 <__errno_location@plt>
   12928:	ldr	r3, [pc, #-2608]	; 11f00 <__assert_fail@plt+0x9ec>
   1292c:	ldr	r2, [r3, #300]	; 0x12c
   12930:	ldr	r5, [r0]
   12934:	mov	r1, #3
   12938:	mov	r0, #0
   1293c:	bl	15d2c <__assert_fail@plt+0x4818>
   12940:	ldr	r2, [pc, #-2600]	; 11f20 <__assert_fail@plt+0xa0c>
   12944:	mov	r1, r5
   12948:	mov	r3, r0
   1294c:	b	11a5c <__assert_fail@plt+0x548>
   12950:	cmp	r5, #0
   12954:	beq	1240c <__assert_fail@plt+0xef8>
   12958:	mov	r2, r5
   1295c:	ldrd	r4, [sp, #48]	; 0x30
   12960:	mov	r3, #0
   12964:	mov	r0, sl
   12968:	subs	r4, r4, r6
   1296c:	sbc	r5, r5, r7
   12970:	cmp	r2, r4
   12974:	sbcs	r1, r3, r5
   12978:	movlt	r4, r2
   1297c:	mov	r2, r4
   12980:	ldr	r1, [sp, #40]	; 0x28
   12984:	bl	14774 <__assert_fail@plt+0x3260>
   12988:	cmp	r0, r4
   1298c:	beq	129c4 <__assert_fail@plt+0x14b0>
   12990:	bl	113b8 <__errno_location@plt>
   12994:	ldr	r8, [r0]
   12998:	mov	r0, r8
   1299c:	bl	13274 <__assert_fail@plt+0x1d60>
   129a0:	cmp	r0, #0
   129a4:	bne	129c4 <__assert_fail@plt+0x14b0>
   129a8:	ldr	r2, [pc, #-2732]	; 11f04 <__assert_fail@plt+0x9f0>
   129ac:	mov	r1, #3
   129b0:	bl	15d2c <__assert_fail@plt+0x4818>
   129b4:	ldr	r2, [pc, #-2716]	; 11f20 <__assert_fail@plt+0xa0c>
   129b8:	mov	r1, r8
   129bc:	mov	r3, r0
   129c0:	b	11a5c <__assert_fail@plt+0x548>
   129c4:	adds	r6, r6, r4
   129c8:	adc	r7, r7, #0
   129cc:	mov	r5, fp
   129d0:	b	128b4 <__assert_fail@plt+0x13a0>
   129d4:	ldrd	r2, [sp, #32]
   129d8:	ldrd	r0, [sp, #24]
   129dc:	cmp	r3, r1
   129e0:	cmpeq	r2, r0
   129e4:	bhi	129f8 <__assert_fail@plt+0x14e4>
   129e8:	ldrd	r2, [sp, #48]	; 0x30
   129ec:	cmp	r3, r1
   129f0:	cmpeq	r2, r0
   129f4:	bcs	12a0c <__assert_fail@plt+0x14f8>
   129f8:	ldr	r3, [pc, #-2808]	; 11f08 <__assert_fail@plt+0x9f4>
   129fc:	ldr	r2, [pc, #-2808]	; 11f0c <__assert_fail@plt+0x9f8>
   12a00:	ldr	r1, [pc, #-2804]	; 11f14 <__assert_fail@plt+0xa00>
   12a04:	ldr	r0, [pc, #-2812]	; 11f10 <__assert_fail@plt+0x9fc>
   12a08:	b	12814 <__assert_fail@plt+0x1300>
   12a0c:	ldrd	r2, [sp, #24]
   12a10:	ldrd	r0, [sp, #48]	; 0x30
   12a14:	bl	17a20 <__assert_fail@plt+0x650c>
   12a18:	ldrd	r2, [sp, #32]
   12a1c:	cmp	r3, #0
   12a20:	cmpeq	r2, #1
   12a24:	str	r0, [sp, #64]	; 0x40
   12a28:	str	r1, [sp, #68]	; 0x44
   12a2c:	bls	12d80 <__assert_fail@plt+0x186c>
   12a30:	subs	sl, r2, #1
   12a34:	sbc	fp, r3, #0
   12a38:	mul	r3, r0, fp
   12a3c:	mla	r3, sl, r1, r3
   12a40:	umull	r0, r1, r0, sl
   12a44:	subs	r0, r0, #1
   12a48:	add	r1, r3, r1
   12a4c:	sbc	r1, r1, #0
   12a50:	mov	r3, #0
   12a54:	cmp	r0, r5
   12a58:	sbcs	ip, r1, r3
   12a5c:	mov	r6, r0
   12a60:	mov	r7, r1
   12a64:	bge	12a94 <__assert_fail@plt+0x1580>
   12a68:	ldr	r3, [sp, #40]	; 0x28
   12a6c:	sub	r5, r5, r0
   12a70:	add	r1, r3, r0
   12a74:	mov	r2, r5
   12a78:	mov	r0, r3
   12a7c:	bl	111cc <memmove@plt>
   12a80:	strd	r6, [sp, #56]	; 0x38
   12a84:	mov	r3, #1
   12a88:	mov	r8, #0
   12a8c:	str	r3, [sp, #84]	; 0x54
   12a90:	b	12b10 <__assert_fail@plt+0x15fc>
   12a94:	subs	r2, r0, r5
   12a98:	mov	r4, #1
   12a9c:	sbc	r3, r1, r3
   12aa0:	str	r4, [sp]
   12aa4:	mov	r0, #0
   12aa8:	bl	11298 <lseek64@plt>
   12aac:	cmp	r0, #0
   12ab0:	sbcs	r3, r1, #0
   12ab4:	blt	12924 <__assert_fail@plt+0x1410>
   12ab8:	strd	r6, [sp, #56]	; 0x38
   12abc:	mvn	r5, #0
   12ac0:	b	12a84 <__assert_fail@plt+0x1570>
   12ac4:	mov	r0, r5
   12ac8:	ldrd	r2, [sp, #48]	; 0x30
   12acc:	ldrd	r4, [sp, #56]	; 0x38
   12ad0:	mov	r1, #0
   12ad4:	mov	r8, #0
   12ad8:	subs	r2, r2, r4
   12adc:	sbc	r3, r3, r5
   12ae0:	cmp	r0, r2
   12ae4:	sbcs	ip, r1, r3
   12ae8:	ldr	r1, [sp, #40]	; 0x28
   12aec:	movlt	r2, r0
   12af0:	mov	r4, r1
   12af4:	add	r3, r1, r2
   12af8:	str	r2, [sp, #72]	; 0x48
   12afc:	str	r3, [sp, #80]	; 0x50
   12b00:	ldr	r3, [sp, #80]	; 0x50
   12b04:	mvn	r5, #0
   12b08:	cmp	r3, r4
   12b0c:	bne	12b98 <__assert_fail@plt+0x1684>
   12b10:	ldrd	r2, [sp, #56]	; 0x38
   12b14:	ldrd	r0, [sp, #48]	; 0x30
   12b18:	cmp	r2, r0
   12b1c:	sbcs	r3, r3, r1
   12b20:	bge	12b50 <__assert_fail@plt+0x163c>
   12b24:	cmn	r5, #1
   12b28:	bne	12b48 <__assert_fail@plt+0x1634>
   12b2c:	ldr	r2, [sp, #44]	; 0x2c
   12b30:	ldr	r1, [sp, #40]	; 0x28
   12b34:	mov	r0, #0
   12b38:	bl	15e78 <__assert_fail@plt+0x4964>
   12b3c:	cmn	r0, #1
   12b40:	mov	r5, r0
   12b44:	beq	128e8 <__assert_fail@plt+0x13d4>
   12b48:	cmp	r5, #0
   12b4c:	bne	12ac4 <__assert_fail@plt+0x15b0>
   12b50:	cmp	r8, #0
   12b54:	bne	12da4 <__assert_fail@plt+0x1890>
   12b58:	mov	r4, #0
   12b5c:	mov	r5, #1
   12b60:	ldrd	r2, [sp, #32]
   12b64:	orrs	r3, r2, r3
   12b68:	bne	1240c <__assert_fail@plt+0xef8>
   12b6c:	ldrd	r2, [sp, #24]
   12b70:	cmp	fp, r3
   12b74:	cmpeq	sl, r2
   12b78:	bhi	1240c <__assert_fail@plt+0xef8>
   12b7c:	mov	r2, r4
   12b80:	mov	r1, #0
   12b84:	mov	r0, r5
   12b88:	bl	13d70 <__assert_fail@plt+0x285c>
   12b8c:	adds	sl, sl, #1
   12b90:	adc	fp, fp, #0
   12b94:	b	12b60 <__assert_fail@plt+0x164c>
   12b98:	ldrd	r0, [sp, #56]	; 0x38
   12b9c:	ldr	r2, [sp, #72]	; 0x48
   12ba0:	subs	r0, r6, r0
   12ba4:	sbc	r1, r7, r1
   12ba8:	cmp	r0, #0
   12bac:	sbcs	r3, r1, #0
   12bb0:	movlt	r0, #0
   12bb4:	movlt	r1, r0
   12bb8:	mov	r3, #0
   12bbc:	cmp	r2, r0
   12bc0:	sbcs	ip, r3, r1
   12bc4:	ldr	r3, [sp, #72]	; 0x48
   12bc8:	movlt	r0, r2
   12bcc:	sub	r2, r3, r0
   12bd0:	ldr	r3, [pc, #-3264]	; 11f18 <__assert_fail@plt+0xa04>
   12bd4:	add	r0, r4, r0
   12bd8:	ldr	r1, [r3, #12]
   12bdc:	bl	11424 <memchr@plt>
   12be0:	cmp	r0, #0
   12be4:	movne	r3, #1
   12be8:	moveq	r3, #0
   12bec:	str	r3, [sp, #76]	; 0x4c
   12bf0:	ldrd	r2, [sp, #32]
   12bf4:	addne	r5, r0, #1
   12bf8:	ldreq	r5, [sp, #80]	; 0x50
   12bfc:	cmp	fp, r3
   12c00:	cmpeq	sl, r2
   12c04:	sub	r9, r5, r4
   12c08:	bne	12c48 <__assert_fail@plt+0x1734>
   12c0c:	mov	r2, r9
   12c10:	mov	r1, r4
   12c14:	mov	r0, #1
   12c18:	bl	14774 <__assert_fail@plt+0x3260>
   12c1c:	cmp	r9, r0
   12c20:	beq	12c64 <__assert_fail@plt+0x1750>
   12c24:	bl	113b8 <__errno_location@plt>
   12c28:	mov	r2, #5
   12c2c:	ldr	r1, [pc, #-3352]	; 11f1c <__assert_fail@plt+0xa08>
   12c30:	ldr	r4, [r0]
   12c34:	mov	r0, #0
   12c38:	bl	11238 <dcgettext@plt>
   12c3c:	mov	r3, r0
   12c40:	ldr	r2, [pc, #-3368]	; 11f20 <__assert_fail@plt+0xa0c>
   12c44:	b	12044 <__assert_fail@plt+0xb30>
   12c48:	ldrd	r2, [sp, #32]
   12c4c:	orrs	r3, r2, r3
   12c50:	bne	12c64 <__assert_fail@plt+0x1750>
   12c54:	mov	r2, r9
   12c58:	mov	r1, r4
   12c5c:	ldr	r0, [sp, #84]	; 0x54
   12c60:	bl	13d70 <__assert_fail@plt+0x285c>
   12c64:	ldrd	r2, [sp, #56]	; 0x38
   12c68:	ldr	r4, [sp, #76]	; 0x4c
   12c6c:	adds	r2, r2, r9
   12c70:	adc	r3, r3, #0
   12c74:	strd	r2, [sp, #56]	; 0x38
   12c78:	ldr	r3, [sp, #32]
   12c7c:	ldr	r2, [sp, #36]	; 0x24
   12c80:	orr	r3, r3, r2
   12c84:	str	r3, [sp, #84]	; 0x54
   12c88:	ldrd	r2, [sp, #56]	; 0x38
   12c8c:	cmp	r6, r2
   12c90:	sbcs	r3, r7, r3
   12c94:	movge	r3, r4
   12c98:	orrlt	r3, r4, #1
   12c9c:	tst	r3, #255	; 0xff
   12ca0:	bne	12cc0 <__assert_fail@plt+0x17ac>
   12ca4:	ldr	r3, [sp, #72]	; 0x48
   12ca8:	mov	r4, r5
   12cac:	sub	r3, r3, r9
   12cb0:	str	r3, [sp, #72]	; 0x48
   12cb4:	ldr	r3, [sp, #76]	; 0x4c
   12cb8:	str	r3, [sp, #84]	; 0x54
   12cbc:	b	12b00 <__assert_fail@plt+0x15ec>
   12cc0:	ldr	r2, [sp, #80]	; 0x50
   12cc4:	eor	r3, r4, #1
   12cc8:	cmp	r2, r5
   12ccc:	movne	r3, #0
   12cd0:	andeq	r3, r3, #1
   12cd4:	cmp	r3, #0
   12cd8:	bne	12d78 <__assert_fail@plt+0x1864>
   12cdc:	ldrd	r2, [sp, #32]
   12ce0:	adds	sl, sl, #1
   12ce4:	adc	fp, fp, #0
   12ce8:	cmp	fp, r3
   12cec:	cmpeq	sl, r2
   12cf0:	ldr	r2, [sp, #84]	; 0x54
   12cf4:	movhi	r3, #1
   12cf8:	movls	r3, #0
   12cfc:	cmp	r2, #0
   12d00:	moveq	r3, #0
   12d04:	andne	r3, r3, #1
   12d08:	cmp	r3, #0
   12d0c:	bne	1240c <__assert_fail@plt+0xef8>
   12d10:	ldrd	r0, [sp, #24]
   12d14:	cmp	fp, r1
   12d18:	cmpeq	sl, r0
   12d1c:	bne	12d60 <__assert_fail@plt+0x184c>
   12d20:	ldrd	r6, [sp, #48]	; 0x30
   12d24:	subs	r6, r6, #1
   12d28:	sbc	r7, r7, #0
   12d2c:	ldrd	r0, [sp, #56]	; 0x38
   12d30:	cmp	r6, r0
   12d34:	sbcs	r2, r7, r1
   12d38:	movge	r4, r3
   12d3c:	bge	12c88 <__assert_fail@plt+0x1774>
   12d40:	ldrd	r2, [sp, #32]
   12d44:	orrs	r3, r2, r3
   12d48:	bne	12c88 <__assert_fail@plt+0x1774>
   12d4c:	mov	r2, #0
   12d50:	mov	r1, r2
   12d54:	mov	r0, #1
   12d58:	bl	13d70 <__assert_fail@plt+0x285c>
   12d5c:	b	12c88 <__assert_fail@plt+0x1774>
   12d60:	ldrd	r0, [sp, #64]	; 0x40
   12d64:	adds	r0, r0, r6
   12d68:	adc	r1, r1, r7
   12d6c:	mov	r6, r0
   12d70:	mov	r7, r1
   12d74:	b	12d2c <__assert_fail@plt+0x1818>
   12d78:	mov	r8, r3
   12d7c:	b	12ca4 <__assert_fail@plt+0x1790>
   12d80:	ldrd	r6, [sp, #64]	; 0x40
   12d84:	mov	r2, #0
   12d88:	mov	r3, #0
   12d8c:	subs	r6, r6, #1
   12d90:	sbc	r7, r7, #0
   12d94:	strd	r2, [sp, #56]	; 0x38
   12d98:	mov	sl, #1
   12d9c:	mov	fp, #0
   12da0:	b	12a84 <__assert_fail@plt+0x1570>
   12da4:	adds	sl, sl, #1
   12da8:	adc	fp, fp, #0
   12dac:	b	12b58 <__assert_fail@plt+0x1644>
   12db0:	ldrd	r2, [sp, #32]
   12db4:	orrs	r3, r2, r3
   12db8:	bne	12f2c <__assert_fail@plt+0x1a18>
   12dbc:	ldrd	r0, [sp, #24]
   12dc0:	mov	r3, #0
   12dc4:	mvn	r2, #0
   12dc8:	cmp	r1, r3
   12dcc:	cmpeq	r0, r2
   12dd0:	bhi	12798 <__assert_fail@plt+0x1284>
   12dd4:	ldr	r7, [sp, #24]
   12dd8:	mov	r1, #16
   12ddc:	mov	r0, r7
   12de0:	bl	167cc <__assert_fail@plt+0x52b8>
   12de4:	mov	r6, #0
   12de8:	mvn	r9, #0
   12dec:	mov	r8, r6
   12df0:	mov	r5, r0
   12df4:	mov	r4, r0
   12df8:	cmp	r7, r6
   12dfc:	add	r4, r4, #16
   12e00:	bne	12f08 <__assert_fail@plt+0x19f4>
   12e04:	mov	r4, #0
   12e08:	mov	r2, #1
   12e0c:	mov	r3, #0
   12e10:	mov	r8, r4
   12e14:	strd	r2, [sp, #48]	; 0x30
   12e18:	str	r4, [sp, #64]	; 0x40
   12e1c:	str	r4, [sp, #72]	; 0x48
   12e20:	ldr	r2, [sp, #44]	; 0x2c
   12e24:	ldr	r1, [sp, #40]	; 0x28
   12e28:	mov	r0, #0
   12e2c:	bl	15e78 <__assert_fail@plt+0x4964>
   12e30:	cmn	r0, #1
   12e34:	beq	128e8 <__assert_fail@plt+0x13d4>
   12e38:	cmp	r0, #0
   12e3c:	beq	13104 <__assert_fail@plt+0x1bf0>
   12e40:	ldr	r3, [sp, #40]	; 0x28
   12e44:	ldr	r6, [sp, #40]	; 0x28
   12e48:	add	r3, r3, r0
   12e4c:	str	r3, [sp, #56]	; 0x38
   12e50:	ldr	r3, [sp, #56]	; 0x38
   12e54:	cmp	r3, r6
   12e58:	beq	12e20 <__assert_fail@plt+0x190c>
   12e5c:	ldr	r3, [sp, #56]	; 0x38
   12e60:	mov	r0, r6
   12e64:	sub	r2, r3, r6
   12e68:	ldr	r3, [pc, #716]	; 1313c <__assert_fail@plt+0x1c28>
   12e6c:	ldr	r1, [r3, #12]
   12e70:	bl	11424 <memchr@plt>
   12e74:	ldrd	r2, [sp, #32]
   12e78:	subs	r9, r0, #0
   12e7c:	addne	fp, r9, #1
   12e80:	ldreq	fp, [sp, #56]	; 0x38
   12e84:	movne	r9, #1
   12e88:	orrs	r3, r2, r3
   12e8c:	sub	sl, fp, r6
   12e90:	beq	12f64 <__assert_fail@plt+0x1a50>
   12e94:	ldrd	r2, [sp, #48]	; 0x30
   12e98:	ldrd	r0, [sp, #32]
   12e9c:	cmp	r3, r1
   12ea0:	cmpeq	r2, r0
   12ea4:	bne	12ed0 <__assert_fail@plt+0x19bc>
   12ea8:	ldr	r3, [pc, #656]	; 13140 <__assert_fail@plt+0x1c2c>
   12eac:	ldrb	r7, [r3, #304]	; 0x130
   12eb0:	cmp	r7, #0
   12eb4:	beq	12f34 <__assert_fail@plt+0x1a20>
   12eb8:	mov	r2, sl
   12ebc:	mov	r1, r6
   12ec0:	mov	r0, #1
   12ec4:	bl	14774 <__assert_fail@plt+0x3260>
   12ec8:	cmp	sl, r0
   12ecc:	bne	12c24 <__assert_fail@plt+0x1710>
   12ed0:	cmp	r9, #0
   12ed4:	beq	12f00 <__assert_fail@plt+0x19ec>
   12ed8:	ldrd	r2, [sp, #48]	; 0x30
   12edc:	ldrd	r0, [sp, #24]
   12ee0:	cmp	r3, r1
   12ee4:	cmpeq	r2, r0
   12ee8:	moveq	r2, #1
   12eec:	moveq	r3, #0
   12ef0:	beq	12efc <__assert_fail@plt+0x19e8>
   12ef4:	adds	r2, r2, #1
   12ef8:	adc	r3, r3, #0
   12efc:	strd	r2, [sp, #48]	; 0x30
   12f00:	mov	r6, fp
   12f04:	b	12e50 <__assert_fail@plt+0x193c>
   12f08:	bl	13298 <__assert_fail@plt+0x1d84>
   12f0c:	ldr	r0, [fp, #4]
   12f10:	bl	16b6c <__assert_fail@plt+0x5658>
   12f14:	add	r6, r6, #1
   12f18:	str	r9, [r4, #-12]
   12f1c:	str	r8, [r4, #-8]
   12f20:	str	r8, [r4, #-4]
   12f24:	str	r0, [r4, #-16]
   12f28:	b	12df8 <__assert_fail@plt+0x18e4>
   12f2c:	mov	r5, #0
   12f30:	b	12e04 <__assert_fail@plt+0x18f0>
   12f34:	ldr	r3, [pc, #520]	; 13144 <__assert_fail@plt+0x1c30>
   12f38:	mov	r2, #1
   12f3c:	mov	r1, sl
   12f40:	ldr	r3, [r3]
   12f44:	mov	r0, r6
   12f48:	bl	11214 <fwrite_unlocked@plt>
   12f4c:	cmp	r0, #1
   12f50:	beq	12ed0 <__assert_fail@plt+0x19bc>
   12f54:	ldr	r3, [pc, #488]	; 13144 <__assert_fail@plt+0x1c30>
   12f58:	ldr	r0, [r3]
   12f5c:	bl	114a8 <clearerr_unlocked@plt>
   12f60:	b	12c24 <__assert_fail@plt+0x1710>
   12f64:	ldr	r2, [sp, #24]
   12f68:	mov	r1, r4
   12f6c:	mov	r0, r5
   12f70:	bl	13950 <__assert_fail@plt+0x243c>
   12f74:	ldr	r3, [sp, #64]	; 0x40
   12f78:	lsl	r7, r4, #4
   12f7c:	add	r7, r5, r7
   12f80:	orr	r0, r0, r3
   12f84:	uxtb	r3, r0
   12f88:	str	r3, [sp, #64]	; 0x40
   12f8c:	ldr	r3, [pc, #428]	; 13140 <__assert_fail@plt+0x1c2c>
   12f90:	ldrb	r3, [r3, #304]	; 0x130
   12f94:	cmp	r3, #0
   12f98:	beq	12fe8 <__assert_fail@plt+0x1ad4>
   12f9c:	mov	r2, sl
   12fa0:	mov	r1, r6
   12fa4:	ldr	r0, [r7, #4]
   12fa8:	bl	14774 <__assert_fail@plt+0x3260>
   12fac:	cmp	sl, r0
   12fb0:	beq	13004 <__assert_fail@plt+0x1af0>
   12fb4:	bl	113b8 <__errno_location@plt>
   12fb8:	ldr	r6, [r0]
   12fbc:	mov	r0, r6
   12fc0:	bl	13274 <__assert_fail@plt+0x1d60>
   12fc4:	cmp	r0, #0
   12fc8:	bne	13004 <__assert_fail@plt+0x1af0>
   12fcc:	ldr	r2, [r7]
   12fd0:	mov	r1, #3
   12fd4:	bl	15d2c <__assert_fail@plt+0x4818>
   12fd8:	ldr	r2, [pc, #360]	; 13148 <__assert_fail@plt+0x1c34>
   12fdc:	mov	r1, r6
   12fe0:	mov	r3, r0
   12fe4:	b	11a5c <__assert_fail@plt+0x548>
   12fe8:	ldr	r3, [r7, #8]
   12fec:	mov	r2, #1
   12ff0:	mov	r1, sl
   12ff4:	mov	r0, r6
   12ff8:	bl	11214 <fwrite_unlocked@plt>
   12ffc:	cmp	r0, #1
   13000:	b	12fb0 <__assert_fail@plt+0x1a9c>
   13004:	bl	113b8 <__errno_location@plt>
   13008:	mov	r6, r0
   1300c:	ldr	r0, [r0]
   13010:	bl	13274 <__assert_fail@plt+0x1d60>
   13014:	ldr	r3, [sp, #64]	; 0x40
   13018:	cmp	r0, #0
   1301c:	moveq	r8, #1
   13020:	cmp	r3, #0
   13024:	beq	13050 <__assert_fail@plt+0x1b3c>
   13028:	add	r7, r5, r4, lsl #4
   1302c:	ldr	r0, [r7, #8]
   13030:	bl	14500 <__assert_fail@plt+0x2fec>
   13034:	cmp	r0, #0
   13038:	ldrne	r4, [r6]
   1303c:	ldrne	r2, [r7]
   13040:	bne	1206c <__assert_fail@plt+0xb58>
   13044:	mvn	r3, #1
   13048:	str	r0, [r7, #8]
   1304c:	str	r3, [r7, #4]
   13050:	cmp	r9, #0
   13054:	beq	12f00 <__assert_fail@plt+0x19ec>
   13058:	ldrd	r0, [sp, #24]
   1305c:	mov	r3, #0
   13060:	add	r4, r4, #1
   13064:	cmp	r3, r1
   13068:	cmpeq	r4, r0
   1306c:	bne	12f00 <__assert_fail@plt+0x19ec>
   13070:	cmp	r8, #0
   13074:	bne	130f4 <__assert_fail@plt+0x1be0>
   13078:	ldr	r4, [sp, #24]
   1307c:	ldr	r7, [pc, #188]	; 13140 <__assert_fail@plt+0x1c2c>
   13080:	mov	r6, r5
   13084:	mov	r8, #0
   13088:	mov	r9, #0
   1308c:	mvn	sl, #1
   13090:	ldrd	r2, [sp, #24]
   13094:	cmp	r9, r3
   13098:	cmpeq	r8, r2
   1309c:	beq	1240c <__assert_fail@plt+0xef8>
   130a0:	cmp	r4, r8
   130a4:	bhi	130c4 <__assert_fail@plt+0x1bb0>
   130a8:	ldrb	r3, [r7, #296]	; 0x128
   130ac:	cmp	r3, #0
   130b0:	bne	130c4 <__assert_fail@plt+0x1bb0>
   130b4:	ldr	r2, [sp, #24]
   130b8:	mov	r1, r8
   130bc:	mov	r0, r5
   130c0:	bl	13950 <__assert_fail@plt+0x243c>
   130c4:	ldr	r1, [r6, #4]
   130c8:	cmp	r1, #0
   130cc:	blt	130e0 <__assert_fail@plt+0x1bcc>
   130d0:	ldr	r3, [r6]
   130d4:	ldr	r2, [r6, #12]
   130d8:	ldr	r0, [r6, #8]
   130dc:	bl	13af0 <__assert_fail@plt+0x25dc>
   130e0:	adds	r8, r8, #1
   130e4:	str	sl, [r6, #4]
   130e8:	adc	r9, r9, #0
   130ec:	add	r6, r6, #16
   130f0:	b	13090 <__assert_fail@plt+0x1b7c>
   130f4:	str	r8, [sp, #72]	; 0x48
   130f8:	mov	r8, #0
   130fc:	mov	r4, r8
   13100:	b	12f00 <__assert_fail@plt+0x19ec>
   13104:	ldrd	r2, [sp, #32]
   13108:	orrs	r3, r2, r3
   1310c:	bne	1240c <__assert_fail@plt+0xef8>
   13110:	ldr	r3, [sp, #72]	; 0x48
   13114:	cmp	r3, #0
   13118:	beq	1307c <__assert_fail@plt+0x1b68>
   1311c:	b	13078 <__assert_fail@plt+0x1b64>
   13120:	ldr	r1, [pc, #20]	; 1313c <__assert_fail@plt+0x1c28>
   13124:	ldr	r3, [r4, #4]
   13128:	ldr	r2, [r4, #288]	; 0x120
   1312c:	ldr	r1, [r1, #8]
   13130:	bl	13af0 <__assert_fail@plt+0x25dc>
   13134:	mov	r0, r5
   13138:	b	11c60 <__assert_fail@plt+0x74c>
   1313c:	andeq	sl, r2, r8, asr r1
   13140:	andeq	sl, r2, r8, ror r3
   13144:	andeq	sl, r2, ip, ror #6
   13148:			; <UNDEFINED> instruction: 0x00017fbf
   1314c:	mov	fp, #0
   13150:	mov	lr, #0
   13154:	pop	{r1}		; (ldr r1, [sp], #4)
   13158:	mov	r2, sp
   1315c:	push	{r2}		; (str r2, [sp, #-4]!)
   13160:	push	{r0}		; (str r0, [sp, #-4]!)
   13164:	ldr	ip, [pc, #16]	; 1317c <__assert_fail@plt+0x1c68>
   13168:	push	{ip}		; (str ip, [sp, #-4]!)
   1316c:	ldr	r0, [pc, #12]	; 13180 <__assert_fail@plt+0x1c6c>
   13170:	ldr	r3, [pc, #12]	; 13184 <__assert_fail@plt+0x1c70>
   13174:	bl	11328 <__libc_start_main@plt>
   13178:	bl	114f0 <abort@plt>
   1317c:	strdeq	r7, [r1], -r4
   13180:	andeq	r1, r1, r0, lsr #10
   13184:	muleq	r1, r4, fp
   13188:	ldr	r3, [pc, #20]	; 131a4 <__assert_fail@plt+0x1c90>
   1318c:	ldr	r2, [pc, #20]	; 131a8 <__assert_fail@plt+0x1c94>
   13190:	add	r3, pc, r3
   13194:	ldr	r2, [r3, r2]
   13198:	cmp	r2, #0
   1319c:	bxeq	lr
   131a0:	b	11340 <__gmon_start__@plt>
   131a4:	andeq	r6, r1, r8, ror #28
   131a8:	andeq	r0, r0, ip, asr #2
   131ac:	ldr	r3, [pc, #28]	; 131d0 <__assert_fail@plt+0x1cbc>
   131b0:	ldr	r0, [pc, #28]	; 131d4 <__assert_fail@plt+0x1cc0>
   131b4:	sub	r3, r3, r0
   131b8:	cmp	r3, #6
   131bc:	bxls	lr
   131c0:	ldr	r3, [pc, #16]	; 131d8 <__assert_fail@plt+0x1cc4>
   131c4:	cmp	r3, #0
   131c8:	bxeq	lr
   131cc:	bx	r3
   131d0:	andeq	sl, r2, r7, asr r3
   131d4:	andeq	sl, r2, r4, asr r3
   131d8:	andeq	r0, r0, r0
   131dc:	ldr	r1, [pc, #36]	; 13208 <__assert_fail@plt+0x1cf4>
   131e0:	ldr	r0, [pc, #36]	; 1320c <__assert_fail@plt+0x1cf8>
   131e4:	sub	r1, r1, r0
   131e8:	asr	r1, r1, #2
   131ec:	add	r1, r1, r1, lsr #31
   131f0:	asrs	r1, r1, #1
   131f4:	bxeq	lr
   131f8:	ldr	r3, [pc, #16]	; 13210 <__assert_fail@plt+0x1cfc>
   131fc:	cmp	r3, #0
   13200:	bxeq	lr
   13204:	bx	r3
   13208:	andeq	sl, r2, r4, asr r3
   1320c:	andeq	sl, r2, r4, asr r3
   13210:	andeq	r0, r0, r0
   13214:	push	{r4, lr}
   13218:	ldr	r4, [pc, #24]	; 13238 <__assert_fail@plt+0x1d24>
   1321c:	ldrb	r3, [r4]
   13220:	cmp	r3, #0
   13224:	popne	{r4, pc}
   13228:	bl	131ac <__assert_fail@plt+0x1c98>
   1322c:	mov	r3, #1
   13230:	strb	r3, [r4]
   13234:	pop	{r4, pc}
   13238:	andeq	sl, r2, r4, ror r3
   1323c:	ldr	r0, [pc, #40]	; 1326c <__assert_fail@plt+0x1d58>
   13240:	ldr	r3, [r0]
   13244:	cmp	r3, #0
   13248:	bne	13250 <__assert_fail@plt+0x1d3c>
   1324c:	b	131dc <__assert_fail@plt+0x1cc8>
   13250:	ldr	r3, [pc, #24]	; 13270 <__assert_fail@plt+0x1d5c>
   13254:	cmp	r3, #0
   13258:	beq	1324c <__assert_fail@plt+0x1d38>
   1325c:	push	{r4, lr}
   13260:	blx	r3
   13264:	pop	{r4, lr}
   13268:	b	131dc <__assert_fail@plt+0x1cc8>
   1326c:	andeq	r9, r2, r4, lsl pc
   13270:	andeq	r0, r0, r0
   13274:	ldr	r3, [pc, #24]	; 13294 <__assert_fail@plt+0x1d80>
   13278:	mov	r2, r0
   1327c:	ldr	r3, [r3]
   13280:	adds	r0, r3, #0
   13284:	movne	r0, #1
   13288:	cmp	r2, #32
   1328c:	movne	r0, #0
   13290:	bx	lr
   13294:	andeq	sl, r2, r8, ror r3
   13298:	push	{r4, r5, r6, r7, r8, lr}
   1329c:	ldr	r4, [pc, #572]	; 134e0 <__assert_fail@plt+0x1fcc>
   132a0:	ldr	r6, [pc, #572]	; 134e4 <__assert_fail@plt+0x1fd0>
   132a4:	ldr	r3, [r4, #4]
   132a8:	cmp	r3, #0
   132ac:	bne	13444 <__assert_fail@plt+0x1f30>
   132b0:	ldr	r8, [r4, #8]
   132b4:	cmp	r8, #0
   132b8:	bne	1330c <__assert_fail@plt+0x1df8>
   132bc:	ldr	r0, [r4, #12]
   132c0:	bl	11370 <strlen@plt>
   132c4:	mov	r5, r0
   132c8:	str	r0, [r4, #16]
   132cc:	ldr	r0, [r4, #20]
   132d0:	cmp	r0, #0
   132d4:	moveq	r0, r8
   132d8:	beq	132e0 <__assert_fail@plt+0x1dcc>
   132dc:	bl	11370 <strlen@plt>
   132e0:	ldr	r3, [r4, #28]
   132e4:	str	r0, [r4, #24]
   132e8:	add	r5, r5, r3
   132ec:	add	r0, r5, r0
   132f0:	str	r0, [r4, #8]
   132f4:	ldr	r1, [r4, #8]
   132f8:	ldr	r3, [r4, #16]
   132fc:	add	r1, r1, #1
   13300:	cmp	r1, r3
   13304:	bcs	13324 <__assert_fail@plt+0x1e10>
   13308:	bl	16b88 <__assert_fail@plt+0x5674>
   1330c:	add	r3, r8, #2
   13310:	str	r3, [r4, #8]
   13314:	ldr	r3, [r4, #28]
   13318:	add	r3, r3, #1
   1331c:	str	r3, [r4, #28]
   13320:	b	132f4 <__assert_fail@plt+0x1de0>
   13324:	ldr	r0, [r4, #4]
   13328:	bl	16720 <__assert_fail@plt+0x520c>
   1332c:	cmp	r8, #0
   13330:	mov	r5, r0
   13334:	str	r0, [r4, #4]
   13338:	bne	133d4 <__assert_fail@plt+0x1ec0>
   1333c:	ldr	r2, [r4, #16]
   13340:	ldr	r1, [r4, #12]
   13344:	bl	111f0 <memcpy@plt>
   13348:	ldr	r3, [r4, #16]
   1334c:	ldr	r1, [r6]
   13350:	ldr	r7, [r4, #28]
   13354:	add	r3, r5, r3
   13358:	ldrb	r1, [r1]
   1335c:	mov	r2, r7
   13360:	mov	r0, r3
   13364:	str	r3, [r4, #36]	; 0x24
   13368:	bl	113dc <memset@plt>
   1336c:	ldr	r1, [r4, #20]
   13370:	cmp	r1, #0
   13374:	beq	13384 <__assert_fail@plt+0x1e70>
   13378:	ldr	r2, [r4, #24]
   1337c:	add	r0, r0, r7
   13380:	bl	111f0 <memcpy@plt>
   13384:	ldr	r3, [r4, #8]
   13388:	mov	r2, #0
   1338c:	ldr	r0, [r4, #32]
   13390:	strb	r2, [r5, r3]
   13394:	bl	1468c <__assert_fail@plt+0x3178>
   13398:	mov	r1, #4
   1339c:	ldr	r0, [r4, #28]
   133a0:	bl	16ac0 <__assert_fail@plt+0x55ac>
   133a4:	ldr	r6, [r4, #40]	; 0x28
   133a8:	cmp	r6, #0
   133ac:	mov	r7, r0
   133b0:	str	r0, [r4, #32]
   133b4:	popeq	{r4, r5, r6, r7, r8, pc}
   133b8:	cmp	r8, #0
   133bc:	beq	133f8 <__assert_fail@plt+0x1ee4>
   133c0:	ldr	r3, [pc, #288]	; 134e8 <__assert_fail@plt+0x1fd4>
   133c4:	ldr	r2, [pc, #288]	; 134ec <__assert_fail@plt+0x1fd8>
   133c8:	ldr	r1, [pc, #288]	; 134f0 <__assert_fail@plt+0x1fdc>
   133cc:	ldr	r0, [pc, #288]	; 134f4 <__assert_fail@plt+0x1fe0>
   133d0:	bl	11514 <__assert_fail@plt>
   133d4:	ldr	r2, [r4, #32]
   133d8:	ldr	r1, [r6]
   133dc:	ldr	r3, [r4, #16]
   133e0:	ldr	r2, [r2]
   133e4:	ldrb	r2, [r1, r2]
   133e8:	strb	r2, [r0, r3]
   133ec:	add	r3, r3, #1
   133f0:	str	r3, [r4, #16]
   133f4:	b	13348 <__assert_fail@plt+0x1e34>
   133f8:	mov	r0, r6
   133fc:	bl	11370 <strlen@plt>
   13400:	ldr	r8, [r4, #28]
   13404:	mov	r1, r6
   13408:	add	r7, r7, r8, lsl #2
   1340c:	mov	r5, r0
   13410:	sub	r3, r8, r0
   13414:	ldr	r0, [r4, #36]	; 0x24
   13418:	mov	r2, r5
   1341c:	add	r0, r0, r3
   13420:	bl	111f0 <memcpy@plt>
   13424:	add	r5, r6, r5
   13428:	cmp	r5, r6
   1342c:	bne	13434 <__assert_fail@plt+0x1f20>
   13430:	pop	{r4, r5, r6, r7, r8, pc}
   13434:	ldrb	r3, [r5, #-1]!
   13438:	sub	r3, r3, #48	; 0x30
   1343c:	str	r3, [r7, #-4]!
   13440:	b	13428 <__assert_fail@plt+0x1f14>
   13444:	ldr	r3, [r4, #28]
   13448:	ldr	r7, [r4, #32]
   1344c:	ldr	r5, [r4, #36]	; 0x24
   13450:	ldrb	r8, [r6, #4]
   13454:	ldr	ip, [r6]
   13458:	add	r1, r7, r3, lsl #2
   1345c:	add	r2, r5, r3
   13460:	cmp	r2, r5
   13464:	sub	r3, r3, #1
   13468:	bne	1348c <__assert_fail@plt+0x1f78>
   1346c:	mov	r2, #5
   13470:	ldr	r1, [pc, #128]	; 134f8 <__assert_fail@plt+0x1fe4>
   13474:	mov	r0, #0
   13478:	bl	11238 <dcgettext@plt>
   1347c:	mov	r1, #0
   13480:	mov	r2, r0
   13484:	mov	r0, #1
   13488:	bl	112ec <error@plt>
   1348c:	ldr	r0, [r1, #-4]
   13490:	cmp	r3, #0
   13494:	movne	lr, #0
   13498:	andeq	lr, r8, #1
   1349c:	add	r0, r0, #1
   134a0:	cmp	lr, #0
   134a4:	str	r0, [r1, #-4]!
   134a8:	beq	134c0 <__assert_fail@plt+0x1fac>
   134ac:	ldr	lr, [r7]
   134b0:	add	lr, ip, lr
   134b4:	ldrb	lr, [lr, #1]
   134b8:	cmp	lr, #0
   134bc:	beq	132b0 <__assert_fail@plt+0x1d9c>
   134c0:	ldrb	r0, [ip, r0]
   134c4:	cmp	r0, #0
   134c8:	strb	r0, [r2, #-1]!
   134cc:	popne	{r4, r5, r6, r7, r8, pc}
   134d0:	str	r0, [r1]
   134d4:	ldrb	r0, [ip]
   134d8:	strb	r0, [r2]
   134dc:	b	13460 <__assert_fail@plt+0x1f4c>
   134e0:	andeq	sl, r2, r8, ror r3
   134e4:	andeq	sl, r2, r8, asr r1
   134e8:	andeq	r7, r1, ip, lsr #24
   134ec:	muleq	r0, r9, r1
   134f0:			; <UNDEFINED> instruction: 0x00017db7
   134f4:	andeq	r7, r1, r3, asr #27
   134f8:	andeq	r7, r1, fp, asr #27
   134fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   13500:	mov	r7, r0
   13504:	ldr	r6, [pc, #1000]	; 138f4 <__assert_fail@plt+0x23e0>
   13508:	sub	sp, sp, #116	; 0x74
   1350c:	ldr	r0, [r6]
   13510:	cmp	r0, #0
   13514:	bne	1366c <__assert_fail@plt+0x2158>
   13518:	ldrb	r3, [r6, #44]	; 0x2c
   1351c:	cmp	r3, #0
   13520:	beq	1355c <__assert_fail@plt+0x2048>
   13524:	ldr	r3, [pc, #972]	; 138f8 <__assert_fail@plt+0x23e4>
   13528:	mov	r2, #5
   1352c:	ldr	r1, [pc, #968]	; 138fc <__assert_fail@plt+0x23e8>
   13530:	ldr	r4, [r3]
   13534:	bl	11238 <dcgettext@plt>
   13538:	mov	r1, r7
   1353c:	mov	r5, r0
   13540:	mov	r0, #4
   13544:	bl	15c88 <__assert_fail@plt+0x4774>
   13548:	mov	r2, r5
   1354c:	mov	r1, #1
   13550:	mov	r3, r0
   13554:	mov	r0, r4
   13558:	bl	11418 <__fprintf_chk@plt>
   1355c:	ldr	r2, [pc, #924]	; 13900 <__assert_fail@plt+0x23ec>
   13560:	mov	r1, #65	; 0x41
   13564:	mov	r0, r7
   13568:	bl	145a8 <__assert_fail@plt+0x3094>
   1356c:	subs	r8, r0, #0
   13570:	blt	138e8 <__assert_fail@plt+0x23d4>
   13574:	add	r1, sp, #8
   13578:	bl	17c10 <__assert_fail@plt+0x66fc>
   1357c:	subs	r9, r0, #0
   13580:	beq	135bc <__assert_fail@plt+0x20a8>
   13584:	bl	113b8 <__errno_location@plt>
   13588:	ldr	r1, [pc, #884]	; 13904 <__assert_fail@plt+0x23f0>
   1358c:	mov	r2, #5
   13590:	ldr	r4, [r0]
   13594:	mov	r0, #0
   13598:	bl	11238 <dcgettext@plt>
   1359c:	mov	r1, r7
   135a0:	mov	r5, r0
   135a4:	mov	r0, #4
   135a8:	bl	15c88 <__assert_fail@plt+0x4774>
   135ac:	mov	r3, r0
   135b0:	mov	r2, r5
   135b4:	mov	r1, r4
   135b8:	b	1360c <__assert_fail@plt+0x20f8>
   135bc:	ldrd	r4, [r6, #144]	; 0x90
   135c0:	ldrd	r2, [sp, #104]	; 0x68
   135c4:	cmp	r5, r3
   135c8:	cmpeq	r4, r2
   135cc:	bne	13614 <__assert_fail@plt+0x2100>
   135d0:	ldrd	r4, [r6, #48]	; 0x30
   135d4:	ldrd	r2, [sp, #8]
   135d8:	cmp	r5, r3
   135dc:	cmpeq	r4, r2
   135e0:	bne	13614 <__assert_fail@plt+0x2100>
   135e4:	mov	r2, #5
   135e8:	ldr	r1, [pc, #792]	; 13908 <__assert_fail@plt+0x23f4>
   135ec:	bl	11238 <dcgettext@plt>
   135f0:	mov	r1, r7
   135f4:	mov	r4, r0
   135f8:	mov	r0, #4
   135fc:	bl	15c88 <__assert_fail@plt+0x4774>
   13600:	mov	r2, r4
   13604:	mov	r1, r9
   13608:	mov	r3, r0
   1360c:	mov	r0, #1
   13610:	bl	112ec <error@plt>
   13614:	mov	r2, #0
   13618:	mov	r3, #0
   1361c:	mov	r0, r8
   13620:	bl	11208 <ftruncate64@plt>
   13624:	cmp	r0, #0
   13628:	beq	138e8 <__assert_fail@plt+0x23d4>
   1362c:	ldr	r3, [sp, #24]
   13630:	and	r3, r3, #61440	; 0xf000
   13634:	cmp	r3, #32768	; 0x8000
   13638:	bne	138e8 <__assert_fail@plt+0x23d4>
   1363c:	bl	113b8 <__errno_location@plt>
   13640:	mov	r2, #5
   13644:	ldr	r1, [pc, #704]	; 1390c <__assert_fail@plt+0x23f8>
   13648:	ldr	r4, [r0]
   1364c:	mov	r0, #0
   13650:	bl	11238 <dcgettext@plt>
   13654:	mov	r2, r7
   13658:	mov	r1, #3
   1365c:	mov	r5, r0
   13660:	mov	r0, #0
   13664:	bl	15d2c <__assert_fail@plt+0x4818>
   13668:	b	135ac <__assert_fail@plt+0x2098>
   1366c:	ldr	r0, [pc, #668]	; 13910 <__assert_fail@plt+0x23fc>
   13670:	bl	11304 <getenv@plt>
   13674:	ldr	r5, [pc, #664]	; 13914 <__assert_fail@plt+0x2400>
   13678:	mov	r2, #1
   1367c:	mov	r1, r7
   13680:	cmp	r0, #0
   13684:	movne	r5, r0
   13688:	ldr	r0, [pc, #648]	; 13918 <__assert_fail@plt+0x2404>
   1368c:	bl	11394 <setenv@plt>
   13690:	subs	r9, r0, #0
   13694:	beq	136c0 <__assert_fail@plt+0x21ac>
   13698:	bl	113b8 <__errno_location@plt>
   1369c:	ldr	r1, [pc, #632]	; 1391c <__assert_fail@plt+0x2408>
   136a0:	mov	r2, #5
   136a4:	ldr	r4, [r0]
   136a8:	mov	r0, #0
   136ac:	bl	11238 <dcgettext@plt>
   136b0:	mov	r1, r4
   136b4:	mov	r2, r0
   136b8:	mov	r0, #1
   136bc:	bl	112ec <error@plt>
   136c0:	ldrb	r3, [r6, #44]	; 0x2c
   136c4:	cmp	r3, #0
   136c8:	beq	13708 <__assert_fail@plt+0x21f4>
   136cc:	ldr	r3, [pc, #548]	; 138f8 <__assert_fail@plt+0x23e4>
   136d0:	mov	r2, #5
   136d4:	ldr	r1, [pc, #580]	; 13920 <__assert_fail@plt+0x240c>
   136d8:	ldr	r4, [r3]
   136dc:	bl	11238 <dcgettext@plt>
   136e0:	mov	r2, r7
   136e4:	mov	r1, #3
   136e8:	mov	r8, r0
   136ec:	mov	r0, r9
   136f0:	bl	15d2c <__assert_fail@plt+0x4818>
   136f4:	mov	r2, r8
   136f8:	mov	r1, #1
   136fc:	mov	r3, r0
   13700:	mov	r0, r4
   13704:	bl	11418 <__fprintf_chk@plt>
   13708:	add	r0, sp, #8
   1370c:	bl	1143c <pipe@plt>
   13710:	subs	r4, r0, #0
   13714:	beq	1372c <__assert_fail@plt+0x2218>
   13718:	bl	113b8 <__errno_location@plt>
   1371c:	mov	r2, #5
   13720:	ldr	r1, [pc, #508]	; 13924 <__assert_fail@plt+0x2410>
   13724:	ldr	r4, [r0]
   13728:	b	136a8 <__assert_fail@plt+0x2194>
   1372c:	bl	11478 <fork@plt>
   13730:	subs	r7, r0, #0
   13734:	bne	13864 <__assert_fail@plt+0x2350>
   13738:	ldr	r3, [r6, #156]	; 0x9c
   1373c:	cmp	r4, r3
   13740:	bcc	13768 <__assert_fail@plt+0x2254>
   13744:	ldr	r0, [sp, #12]
   13748:	bl	114fc <close@plt>
   1374c:	subs	r4, r0, #0
   13750:	beq	13798 <__assert_fail@plt+0x2284>
   13754:	bl	113b8 <__errno_location@plt>
   13758:	mov	r2, #5
   1375c:	ldr	r1, [pc, #452]	; 13928 <__assert_fail@plt+0x2414>
   13760:	ldr	r4, [r0]
   13764:	b	136a8 <__assert_fail@plt+0x2194>
   13768:	ldr	r3, [r6, #152]	; 0x98
   1376c:	ldr	r0, [r3, r4, lsl #2]
   13770:	bl	114fc <close@plt>
   13774:	cmp	r0, #0
   13778:	beq	13790 <__assert_fail@plt+0x227c>
   1377c:	bl	113b8 <__errno_location@plt>
   13780:	mov	r2, #5
   13784:	ldr	r1, [pc, #416]	; 1392c <__assert_fail@plt+0x2418>
   13788:	ldr	r4, [r0]
   1378c:	b	136a8 <__assert_fail@plt+0x2194>
   13790:	add	r4, r4, #1
   13794:	b	13738 <__assert_fail@plt+0x2224>
   13798:	ldr	r0, [sp, #8]
   1379c:	cmp	r0, #0
   137a0:	beq	137fc <__assert_fail@plt+0x22e8>
   137a4:	mov	r1, r4
   137a8:	bl	11244 <dup2@plt>
   137ac:	subs	r7, r0, #0
   137b0:	beq	137d8 <__assert_fail@plt+0x22c4>
   137b4:	bl	113b8 <__errno_location@plt>
   137b8:	ldr	r1, [pc, #368]	; 13930 <__assert_fail@plt+0x241c>
   137bc:	mov	r2, #5
   137c0:	ldr	r5, [r0]
   137c4:	mov	r0, r4
   137c8:	bl	11238 <dcgettext@plt>
   137cc:	mov	r1, r5
   137d0:	mov	r2, r0
   137d4:	b	136b8 <__assert_fail@plt+0x21a4>
   137d8:	ldr	r0, [sp, #8]
   137dc:	bl	114fc <close@plt>
   137e0:	cmp	r0, #0
   137e4:	beq	137fc <__assert_fail@plt+0x22e8>
   137e8:	bl	113b8 <__errno_location@plt>
   137ec:	mov	r2, #5
   137f0:	ldr	r1, [pc, #316]	; 13934 <__assert_fail@plt+0x2420>
   137f4:	ldr	r4, [r0]
   137f8:	b	136a8 <__assert_fail@plt+0x2194>
   137fc:	mov	r2, #0
   13800:	ldr	r1, [pc, #304]	; 13938 <__assert_fail@plt+0x2424>
   13804:	mov	r0, #2
   13808:	bl	111c0 <sigprocmask@plt>
   1380c:	mov	r0, r5
   13810:	bl	1436c <__assert_fail@plt+0x2e58>
   13814:	ldr	r4, [r6]
   13818:	mov	r6, #0
   1381c:	mov	r3, r4
   13820:	ldr	r2, [pc, #276]	; 1393c <__assert_fail@plt+0x2428>
   13824:	str	r6, [sp]
   13828:	mov	r1, r0
   1382c:	mov	r0, r5
   13830:	bl	11484 <execl@plt>
   13834:	bl	113b8 <__errno_location@plt>
   13838:	mov	r2, #5
   1383c:	ldr	r1, [pc, #252]	; 13940 <__assert_fail@plt+0x242c>
   13840:	ldr	r7, [r0]
   13844:	mov	r0, r6
   13848:	bl	11238 <dcgettext@plt>
   1384c:	str	r4, [sp]
   13850:	mov	r3, r5
   13854:	mov	r1, r7
   13858:	mov	r2, r0
   1385c:	mov	r0, #1
   13860:	bl	112ec <error@plt>
   13864:	cmn	r7, #1
   13868:	bne	13880 <__assert_fail@plt+0x236c>
   1386c:	bl	113b8 <__errno_location@plt>
   13870:	mov	r2, #5
   13874:	ldr	r1, [pc, #200]	; 13944 <__assert_fail@plt+0x2430>
   13878:	ldr	r5, [r0]
   1387c:	b	137c4 <__assert_fail@plt+0x22b0>
   13880:	ldr	r0, [sp, #8]
   13884:	bl	114fc <close@plt>
   13888:	cmp	r0, #0
   1388c:	beq	138a4 <__assert_fail@plt+0x2390>
   13890:	bl	113b8 <__errno_location@plt>
   13894:	mov	r2, #5
   13898:	ldr	r1, [pc, #168]	; 13948 <__assert_fail@plt+0x2434>
   1389c:	ldr	r5, [r0]
   138a0:	b	137c4 <__assert_fail@plt+0x22b0>
   138a4:	ldr	r2, [r6, #156]	; 0x9c
   138a8:	ldr	r3, [r6, #292]	; 0x124
   138ac:	str	r7, [r6, #288]	; 0x120
   138b0:	cmp	r2, r3
   138b4:	bne	138cc <__assert_fail@plt+0x23b8>
   138b8:	mov	r2, #4
   138bc:	ldr	r1, [pc, #136]	; 1394c <__assert_fail@plt+0x2438>
   138c0:	ldr	r0, [r6, #152]	; 0x98
   138c4:	bl	167ec <__assert_fail@plt+0x52d8>
   138c8:	str	r0, [r6, #152]	; 0x98
   138cc:	ldr	r3, [r6, #156]	; 0x9c
   138d0:	ldr	r2, [r6, #152]	; 0x98
   138d4:	add	r1, r3, #1
   138d8:	str	r1, [r6, #156]	; 0x9c
   138dc:	ldr	r1, [sp, #12]
   138e0:	str	r1, [r2, r3, lsl #2]
   138e4:	ldr	r8, [sp, #12]
   138e8:	mov	r0, r8
   138ec:	add	sp, sp, #116	; 0x74
   138f0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   138f4:	andeq	sl, r2, r8, ror r3
   138f8:	andeq	sl, r2, ip, ror #6
   138fc:	strdeq	r7, [r1], -r2
   13900:			; <UNDEFINED> instruction: 0x000001b6
   13904:	andeq	r7, r1, r4, lsl #28
   13908:	andeq	r7, r1, r6, lsl lr
   1390c:	andeq	r7, r1, r9, lsr lr
   13910:	andeq	r7, r1, lr, asr #28
   13914:	andeq	r7, r1, sl, ror #27
   13918:	andeq	r7, r1, r4, asr lr
   1391c:	andeq	r7, r1, r9, asr lr
   13920:	andeq	r7, r1, r1, lsl #29
   13924:	muleq	r1, r9, lr
   13928:	andeq	r7, r1, r2, asr #29
   1392c:	andeq	r7, r1, pc, lsr #29
   13930:	ldrdeq	r7, [r1], -r6
   13934:	andeq	r7, r1, r8, ror #29
   13938:	andeq	sl, r2, r8, lsl r4
   1393c:	strdeq	r7, [r1], -fp
   13940:	strdeq	r7, [r1], -lr
   13944:	andeq	r7, r1, r0, lsr #30
   13948:	andeq	r7, r1, r8, lsr pc
   1394c:	muleq	r2, ip, r4
   13950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13954:	add	r7, r0, r1, lsl #4
   13958:	sub	sp, sp, #20
   1395c:	ldr	ip, [r7, #4]
   13960:	cmp	ip, #0
   13964:	movge	r8, #0
   13968:	bge	13ad4 <__assert_fail@plt+0x25c0>
   1396c:	cmp	r1, #0
   13970:	ldr	fp, [pc, #360]	; 13ae0 <__assert_fail@plt+0x25cc>
   13974:	subeq	r5, r2, #1
   13978:	subne	r5, r1, #1
   1397c:	mov	r4, r1
   13980:	mov	r6, r0
   13984:	mov	r8, #0
   13988:	mvn	sl, #1
   1398c:	mov	r9, #1
   13990:	str	r2, [sp, #4]
   13994:	ldr	r2, [r7, #4]
   13998:	cmn	r2, #1
   1399c:	bne	139ec <__assert_fail@plt+0x24d8>
   139a0:	ldr	r0, [r7]
   139a4:	bl	134fc <__assert_fail@plt+0x1fe8>
   139a8:	cmp	r0, #0
   139ac:	bge	13a7c <__assert_fail@plt+0x2568>
   139b0:	bl	113b8 <__errno_location@plt>
   139b4:	ldr	r8, [r0]
   139b8:	mov	r1, r0
   139bc:	sub	r2, r8, #23
   139c0:	cmp	r2, #1
   139c4:	bls	13a18 <__assert_fail@plt+0x2504>
   139c8:	ldr	r2, [r6, r4, lsl #4]
   139cc:	mov	r1, #3
   139d0:	mov	r0, #0
   139d4:	bl	15d2c <__assert_fail@plt+0x4818>
   139d8:	ldr	r2, [pc, #260]	; 13ae4 <__assert_fail@plt+0x25d0>
   139dc:	mov	r1, r8
   139e0:	mov	r3, r0
   139e4:	mov	r0, #1
   139e8:	bl	112ec <error@plt>
   139ec:	mov	r1, fp
   139f0:	ldr	r0, [r7]
   139f4:	bl	145a8 <__assert_fail@plt+0x3094>
   139f8:	b	139a8 <__assert_fail@plt+0x2494>
   139fc:	cmp	r5, #0
   13a00:	subne	r5, r5, #1
   13a04:	ldreq	r3, [sp, #4]
   13a08:	subeq	r5, r3, #1
   13a0c:	cmp	r5, r4
   13a10:	ldreq	r2, [r6, r5, lsl #4]
   13a14:	beq	139cc <__assert_fail@plt+0x24b8>
   13a18:	add	r2, r6, r5, lsl #4
   13a1c:	ldr	r0, [r2, #4]
   13a20:	cmp	r0, #0
   13a24:	blt	139fc <__assert_fail@plt+0x24e8>
   13a28:	ldr	r0, [r2, #8]
   13a2c:	str	r1, [sp, #12]
   13a30:	str	r2, [sp, #8]
   13a34:	bl	14500 <__assert_fail@plt+0x2fec>
   13a38:	ldr	r2, [sp, #8]
   13a3c:	ldr	r1, [sp, #12]
   13a40:	cmp	r0, #0
   13a44:	beq	13a6c <__assert_fail@plt+0x2558>
   13a48:	ldr	r4, [r1]
   13a4c:	ldr	r2, [r2]
   13a50:	mov	r1, #3
   13a54:	mov	r0, #0
   13a58:	bl	15d2c <__assert_fail@plt+0x4818>
   13a5c:	ldr	r2, [pc, #128]	; 13ae4 <__assert_fail@plt+0x25d0>
   13a60:	mov	r1, r4
   13a64:	mov	r3, r0
   13a68:	b	139e4 <__assert_fail@plt+0x24d0>
   13a6c:	str	r0, [r2, #8]
   13a70:	str	sl, [r2, #4]
   13a74:	mov	r8, r9
   13a78:	b	13994 <__assert_fail@plt+0x2480>
   13a7c:	str	r0, [r7, #4]
   13a80:	ldr	r1, [pc, #96]	; 13ae8 <__assert_fail@plt+0x25d4>
   13a84:	bl	11160 <fdopen@plt>
   13a88:	cmp	r0, #0
   13a8c:	mov	r5, r0
   13a90:	str	r0, [r7, #8]
   13a94:	bne	13ac0 <__assert_fail@plt+0x25ac>
   13a98:	bl	113b8 <__errno_location@plt>
   13a9c:	ldr	r2, [r6, r4, lsl #4]
   13aa0:	mov	r1, #3
   13aa4:	ldr	r7, [r0]
   13aa8:	mov	r0, r5
   13aac:	bl	15d2c <__assert_fail@plt+0x4818>
   13ab0:	ldr	r2, [pc, #44]	; 13ae4 <__assert_fail@plt+0x25d0>
   13ab4:	mov	r1, r7
   13ab8:	mov	r3, r0
   13abc:	b	139e4 <__assert_fail@plt+0x24d0>
   13ac0:	ldr	r2, [pc, #36]	; 13aec <__assert_fail@plt+0x25d8>
   13ac4:	mov	r3, #0
   13ac8:	ldr	r1, [r2, #288]	; 0x120
   13acc:	str	r3, [r2, #288]	; 0x120
   13ad0:	str	r1, [r7, #12]
   13ad4:	mov	r0, r8
   13ad8:	add	sp, sp, #20
   13adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ae0:	andeq	r0, r0, r1, lsl #24
   13ae4:			; <UNDEFINED> instruction: 0x00017fbf
   13ae8:	andeq	r7, r1, r3, asr pc
   13aec:	andeq	sl, r2, r8, ror r3
   13af0:	push	{r4, r5, r6, r7, lr}
   13af4:	subs	r7, r0, #0
   13af8:	sub	sp, sp, #36	; 0x24
   13afc:	mov	r4, r1
   13b00:	mov	r5, r2
   13b04:	mov	r6, r3
   13b08:	beq	13c74 <__assert_fail@plt+0x2760>
   13b0c:	bl	14500 <__assert_fail@plt+0x2fec>
   13b10:	cmp	r0, #0
   13b14:	beq	13cb4 <__assert_fail@plt+0x27a0>
   13b18:	bl	113b8 <__errno_location@plt>
   13b1c:	ldr	r7, [r0]
   13b20:	mov	r0, r7
   13b24:	bl	13274 <__assert_fail@plt+0x1d60>
   13b28:	cmp	r0, #0
   13b2c:	bne	13cb4 <__assert_fail@plt+0x27a0>
   13b30:	mov	r2, r6
   13b34:	mov	r1, #3
   13b38:	bl	15d2c <__assert_fail@plt+0x4818>
   13b3c:	ldr	r2, [pc, #528]	; 13d54 <__assert_fail@plt+0x2840>
   13b40:	mov	r1, r7
   13b44:	mov	r3, r0
   13b48:	mov	r0, #1
   13b4c:	bl	112ec <error@plt>
   13b50:	add	r1, r1, #1
   13b54:	b	13cd0 <__assert_fail@plt+0x27bc>
   13b58:	ldr	r5, [sp, #8]
   13b5c:	and	r4, r5, #127	; 0x7f
   13b60:	add	r3, r4, #1
   13b64:	sxtb	r3, r3
   13b68:	cmp	r3, #1
   13b6c:	ble	13bf8 <__assert_fail@plt+0x26e4>
   13b70:	cmp	r4, #13
   13b74:	beq	13bf0 <__assert_fail@plt+0x26dc>
   13b78:	add	r5, sp, #12
   13b7c:	mov	r1, r5
   13b80:	mov	r0, r4
   13b84:	bl	160b4 <__assert_fail@plt+0x4ba0>
   13b88:	cmp	r0, #0
   13b8c:	beq	13ba8 <__assert_fail@plt+0x2694>
   13b90:	str	r4, [sp]
   13b94:	ldr	r3, [pc, #444]	; 13d58 <__assert_fail@plt+0x2844>
   13b98:	mov	r2, #19
   13b9c:	mov	r1, #1
   13ba0:	mov	r0, r5
   13ba4:	bl	113c4 <__sprintf_chk@plt>
   13ba8:	mov	r2, #5
   13bac:	ldr	r1, [pc, #424]	; 13d5c <__assert_fail@plt+0x2848>
   13bb0:	mov	r0, #0
   13bb4:	bl	11238 <dcgettext@plt>
   13bb8:	mov	r2, r6
   13bbc:	mov	r1, #3
   13bc0:	mov	r7, r0
   13bc4:	mov	r0, #0
   13bc8:	bl	15d2c <__assert_fail@plt+0x4818>
   13bcc:	ldr	r3, [pc, #396]	; 13d60 <__assert_fail@plt+0x284c>
   13bd0:	mov	r2, r7
   13bd4:	mov	r1, #0
   13bd8:	ldr	r3, [r3]
   13bdc:	str	r5, [sp]
   13be0:	str	r3, [sp, #4]
   13be4:	mov	r3, r0
   13be8:	add	r0, r4, #128	; 0x80
   13bec:	bl	112ec <error@plt>
   13bf0:	add	sp, sp, #36	; 0x24
   13bf4:	pop	{r4, r5, r6, r7, pc}
   13bf8:	cmp	r4, #0
   13bfc:	bne	13c54 <__assert_fail@plt+0x2740>
   13c00:	asr	r5, r5, #8
   13c04:	ands	r5, r5, #255	; 0xff
   13c08:	beq	13bf0 <__assert_fail@plt+0x26dc>
   13c0c:	mov	r2, #5
   13c10:	ldr	r1, [pc, #332]	; 13d64 <__assert_fail@plt+0x2850>
   13c14:	mov	r0, r4
   13c18:	bl	11238 <dcgettext@plt>
   13c1c:	mov	r2, r6
   13c20:	mov	r1, #3
   13c24:	mov	r7, r0
   13c28:	mov	r0, r4
   13c2c:	bl	15d2c <__assert_fail@plt+0x4818>
   13c30:	ldr	r3, [pc, #296]	; 13d60 <__assert_fail@plt+0x284c>
   13c34:	mov	r2, r7
   13c38:	mov	r1, r4
   13c3c:	ldr	r3, [r3]
   13c40:	str	r5, [sp]
   13c44:	str	r3, [sp, #4]
   13c48:	mov	r3, r0
   13c4c:	mov	r0, r5
   13c50:	b	13bec <__assert_fail@plt+0x26d8>
   13c54:	mov	r2, #5
   13c58:	ldr	r1, [pc, #264]	; 13d68 <__assert_fail@plt+0x2854>
   13c5c:	mov	r0, #0
   13c60:	bl	11238 <dcgettext@plt>
   13c64:	ldr	r3, [sp, #8]
   13c68:	mov	r1, #0
   13c6c:	mov	r2, r0
   13c70:	b	13b48 <__assert_fail@plt+0x2634>
   13c74:	cmp	r1, #0
   13c78:	blt	13cfc <__assert_fail@plt+0x27e8>
   13c7c:	mov	r0, r4
   13c80:	bl	114fc <close@plt>
   13c84:	cmp	r0, #0
   13c88:	bge	13cbc <__assert_fail@plt+0x27a8>
   13c8c:	bl	113b8 <__errno_location@plt>
   13c90:	mov	r2, r6
   13c94:	mov	r1, #3
   13c98:	ldr	r4, [r0]
   13c9c:	mov	r0, r7
   13ca0:	bl	15d2c <__assert_fail@plt+0x4818>
   13ca4:	ldr	r2, [pc, #168]	; 13d54 <__assert_fail@plt+0x2840>
   13ca8:	mov	r1, r4
   13cac:	mov	r3, r0
   13cb0:	b	13b48 <__assert_fail@plt+0x2634>
   13cb4:	cmp	r4, #0
   13cb8:	blt	13cfc <__assert_fail@plt+0x27e8>
   13cbc:	ldr	r2, [pc, #156]	; 13d60 <__assert_fail@plt+0x284c>
   13cc0:	mov	r1, #0
   13cc4:	ldr	ip, [r2, #152]	; 0x98
   13cc8:	ldr	r3, [r2, #156]	; 0x9c
   13ccc:	mov	r0, ip
   13cd0:	cmp	r1, r3
   13cd4:	beq	13cfc <__assert_fail@plt+0x27e8>
   13cd8:	mov	lr, r0
   13cdc:	add	r0, r0, #4
   13ce0:	ldr	r7, [lr]
   13ce4:	cmp	r4, r7
   13ce8:	bne	13b50 <__assert_fail@plt+0x263c>
   13cec:	sub	r3, r3, #1
   13cf0:	str	r3, [r2, #156]	; 0x9c
   13cf4:	ldr	r3, [ip, r3, lsl #2]
   13cf8:	str	r3, [lr]
   13cfc:	cmp	r5, #0
   13d00:	ble	13bf0 <__assert_fail@plt+0x26dc>
   13d04:	add	r1, sp, #32
   13d08:	mov	r4, #0
   13d0c:	str	r4, [r1, #-24]!	; 0xffffffe8
   13d10:	mov	r2, r4
   13d14:	mov	r0, r5
   13d18:	bl	112a4 <waitpid@plt>
   13d1c:	cmn	r0, #1
   13d20:	bne	13b58 <__assert_fail@plt+0x2644>
   13d24:	bl	113b8 <__errno_location@plt>
   13d28:	ldr	r5, [r0]
   13d2c:	cmp	r5, #10
   13d30:	beq	13b58 <__assert_fail@plt+0x2644>
   13d34:	mov	r2, #5
   13d38:	ldr	r1, [pc, #44]	; 13d6c <__assert_fail@plt+0x2858>
   13d3c:	mov	r0, r4
   13d40:	bl	11238 <dcgettext@plt>
   13d44:	mov	r1, r5
   13d48:	mov	r2, r0
   13d4c:	mov	r0, #1
   13d50:	bl	112ec <error@plt>
   13d54:			; <UNDEFINED> instruction: 0x00017fbf
   13d58:	andeq	r7, r1, pc, ror #30
   13d5c:	andeq	r7, r1, r2, ror pc
   13d60:	andeq	sl, r2, r8, ror r3
   13d64:	muleq	r1, fp, pc	; <UNPREDICTABLE>
   13d68:	andeq	r7, r1, r2, asr #31
   13d6c:	andeq	r7, r1, r5, asr pc
   13d70:	cmp	r0, #0
   13d74:	push	{r4, r5, r6, r7, r8, lr}
   13d78:	mov	r6, r1
   13d7c:	mov	r5, r2
   13d80:	beq	13dfc <__assert_fail@plt+0x28e8>
   13d84:	cmp	r1, #0
   13d88:	cmpeq	r2, #0
   13d8c:	ldr	r4, [pc, #204]	; 13e60 <__assert_fail@plt+0x294c>
   13d90:	bne	13da0 <__assert_fail@plt+0x288c>
   13d94:	ldrb	r3, [r4, #296]	; 0x128
   13d98:	cmp	r3, #0
   13d9c:	bne	13e50 <__assert_fail@plt+0x293c>
   13da0:	ldr	r7, [pc, #188]	; 13e64 <__assert_fail@plt+0x2950>
   13da4:	ldr	r3, [r4, #4]
   13da8:	ldr	r2, [r4, #288]	; 0x120
   13dac:	ldr	r1, [r7, #8]
   13db0:	mov	r0, #0
   13db4:	bl	13af0 <__assert_fail@plt+0x25dc>
   13db8:	bl	13298 <__assert_fail@plt+0x1d84>
   13dbc:	ldr	r0, [r4, #4]
   13dc0:	bl	134fc <__assert_fail@plt+0x1fe8>
   13dc4:	cmp	r0, #0
   13dc8:	str	r0, [r7, #8]
   13dcc:	bge	13dfc <__assert_fail@plt+0x28e8>
   13dd0:	bl	113b8 <__errno_location@plt>
   13dd4:	ldr	r2, [r4, #4]
   13dd8:	mov	r1, #3
   13ddc:	ldr	r5, [r0]
   13de0:	mov	r0, #0
   13de4:	bl	15d2c <__assert_fail@plt+0x4818>
   13de8:	ldr	r2, [pc, #120]	; 13e68 <__assert_fail@plt+0x2954>
   13dec:	mov	r1, r5
   13df0:	mov	r3, r0
   13df4:	mov	r0, #1
   13df8:	bl	112ec <error@plt>
   13dfc:	ldr	r3, [pc, #96]	; 13e64 <__assert_fail@plt+0x2950>
   13e00:	mov	r2, r5
   13e04:	mov	r1, r6
   13e08:	ldr	r0, [r3, #8]
   13e0c:	bl	14774 <__assert_fail@plt+0x3260>
   13e10:	cmp	r5, r0
   13e14:	beq	13e50 <__assert_fail@plt+0x293c>
   13e18:	bl	113b8 <__errno_location@plt>
   13e1c:	ldr	r4, [r0]
   13e20:	mov	r0, r4
   13e24:	bl	13274 <__assert_fail@plt+0x1d60>
   13e28:	cmp	r0, #0
   13e2c:	bne	13e58 <__assert_fail@plt+0x2944>
   13e30:	ldr	r3, [pc, #40]	; 13e60 <__assert_fail@plt+0x294c>
   13e34:	mov	r1, #3
   13e38:	ldr	r2, [r3, #4]
   13e3c:	bl	15d2c <__assert_fail@plt+0x4818>
   13e40:	ldr	r2, [pc, #32]	; 13e68 <__assert_fail@plt+0x2954>
   13e44:	mov	r1, r4
   13e48:	mov	r3, r0
   13e4c:	b	13df4 <__assert_fail@plt+0x28e0>
   13e50:	mov	r0, #1
   13e54:	pop	{r4, r5, r6, r7, r8, pc}
   13e58:	mov	r0, #0
   13e5c:	pop	{r4, r5, r6, r7, r8, pc}
   13e60:	andeq	sl, r2, r8, ror r3
   13e64:	andeq	sl, r2, r8, asr r1
   13e68:			; <UNDEFINED> instruction: 0x00017fbf
   13e6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e70:	sub	sp, sp, #44	; 0x2c
   13e74:	mov	r5, #1
   13e78:	str	r2, [sp, #20]
   13e7c:	str	r3, [sp, #32]
   13e80:	ldr	r6, [sp, #80]	; 0x50
   13e84:	ldr	r3, [sp, #88]	; 0x58
   13e88:	ldr	r2, [sp, #92]	; 0x5c
   13e8c:	cmn	r6, #1
   13e90:	orr	r3, r3, r2
   13e94:	str	r0, [sp, #12]
   13e98:	str	r1, [sp, #16]
   13e9c:	mov	r8, r0
   13ea0:	mov	r9, r1
   13ea4:	mov	sl, #0
   13ea8:	mov	fp, #0
   13eac:	mov	r4, r5
   13eb0:	str	r3, [sp, #36]	; 0x24
   13eb4:	beq	13f58 <__assert_fail@plt+0x2a44>
   13eb8:	ldr	r3, [sp, #32]
   13ebc:	cmp	r6, r3
   13ec0:	movcs	r7, #0
   13ec4:	movcc	r7, #1
   13ec8:	ldr	r3, [sp, #20]
   13ecc:	mov	r1, #0
   13ed0:	mov	r0, r6
   13ed4:	cmp	r9, r1
   13ed8:	cmpeq	r8, r6
   13edc:	strd	r0, [sp, #24]
   13ee0:	bls	13fe8 <__assert_fail@plt+0x2ad4>
   13ee4:	cmp	r6, #0
   13ee8:	beq	13f48 <__assert_fail@plt+0x2a34>
   13eec:	orr	r5, r4, r5
   13ef0:	ands	r5, r5, #255	; 0xff
   13ef4:	beq	13f0c <__assert_fail@plt+0x29f8>
   13ef8:	mov	r2, r6
   13efc:	mov	r1, r3
   13f00:	mov	r0, r4
   13f04:	bl	13d70 <__assert_fail@plt+0x285c>
   13f08:	mov	r5, r0
   13f0c:	ldrd	r2, [sp, #88]	; 0x58
   13f10:	adds	sl, sl, r4
   13f14:	adc	fp, fp, #0
   13f18:	cmp	r3, fp
   13f1c:	eor	r4, r5, #1
   13f20:	cmpeq	r2, sl
   13f24:	movne	r4, #0
   13f28:	andeq	r4, r4, #1
   13f2c:	cmp	r4, #0
   13f30:	bne	14080 <__assert_fail@plt+0x2b6c>
   13f34:	ldrd	r2, [sp, #24]
   13f38:	subs	r2, r8, r2
   13f3c:	sbc	r3, r9, r3
   13f40:	mov	r8, r2
   13f44:	mov	r9, r3
   13f48:	cmp	r7, #0
   13f4c:	movne	r4, #0
   13f50:	movne	r5, #1
   13f54:	bne	14070 <__assert_fail@plt+0x2b5c>
   13f58:	cmp	r5, #0
   13f5c:	bne	13f94 <__assert_fail@plt+0x2a80>
   13f60:	mov	r6, #1
   13f64:	mov	r2, r8
   13f68:	mov	r3, r9
   13f6c:	str	r6, [sp]
   13f70:	mov	r0, r5
   13f74:	bl	11298 <lseek64@plt>
   13f78:	mvn	r3, #0
   13f7c:	mvn	r2, #0
   13f80:	cmp	r1, r3
   13f84:	cmpeq	r0, r2
   13f88:	movne	r4, r6
   13f8c:	ldrne	r8, [sp, #12]
   13f90:	ldrne	r9, [sp, #16]
   13f94:	ldr	r2, [sp, #32]
   13f98:	ldr	r1, [sp, #20]
   13f9c:	mov	r0, #0
   13fa0:	bl	15e78 <__assert_fail@plt+0x4964>
   13fa4:	cmn	r0, #1
   13fa8:	mov	r6, r0
   13fac:	clzne	r7, r0
   13fb0:	lsrne	r7, r7, #5
   13fb4:	bne	13ec8 <__assert_fail@plt+0x29b4>
   13fb8:	bl	113b8 <__errno_location@plt>
   13fbc:	ldr	r3, [pc, #196]	; 14088 <__assert_fail@plt+0x2b74>
   13fc0:	mov	r1, #3
   13fc4:	ldr	r2, [r3, #300]	; 0x12c
   13fc8:	ldr	r4, [r0]
   13fcc:	mov	r0, #0
   13fd0:	bl	15d2c <__assert_fail@plt+0x4818>
   13fd4:	ldr	r2, [pc, #176]	; 1408c <__assert_fail@plt+0x2b78>
   13fd8:	mov	r1, r4
   13fdc:	mov	r3, r0
   13fe0:	mov	r0, #1
   13fe4:	bl	112ec <error@plt>
   13fe8:	orr	r5, r4, r5
   13fec:	ands	r5, r5, #255	; 0xff
   13ff0:	beq	14010 <__assert_fail@plt+0x2afc>
   13ff4:	mov	r1, r3
   13ff8:	mov	r2, r8
   13ffc:	mov	r0, r4
   14000:	str	r3, [sp, #24]
   14004:	bl	13d70 <__assert_fail@plt+0x285c>
   14008:	ldr	r3, [sp, #24]
   1400c:	mov	r5, r0
   14010:	ldrd	r0, [sp, #88]	; 0x58
   14014:	adds	sl, sl, r4
   14018:	adc	fp, fp, #0
   1401c:	cmp	fp, r1
   14020:	cmpeq	sl, r0
   14024:	ldr	r2, [sp, #36]	; 0x24
   14028:	movcc	r4, #1
   1402c:	movcs	r4, #0
   14030:	cmp	r2, #0
   14034:	orreq	r4, r4, #1
   14038:	orr	r2, r5, r4
   1403c:	tst	r2, #255	; 0xff
   14040:	beq	14080 <__assert_fail@plt+0x2b6c>
   14044:	add	r3, r3, r8
   14048:	sub	r6, r6, r8
   1404c:	ldr	r9, [sp, #16]
   14050:	ldr	r8, [sp, #12]
   14054:	b	13ecc <__assert_fail@plt+0x29b8>
   14058:	mov	r2, r4
   1405c:	mov	r1, #0
   14060:	mov	r0, r5
   14064:	bl	13d70 <__assert_fail@plt+0x285c>
   14068:	adds	sl, sl, #1
   1406c:	adc	fp, fp, #0
   14070:	ldrd	r2, [sp, #88]	; 0x58
   14074:	cmp	fp, r3
   14078:	cmpeq	sl, r2
   1407c:	bcc	14058 <__assert_fail@plt+0x2b44>
   14080:	add	sp, sp, #44	; 0x2c
   14084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14088:	andeq	sl, r2, r8, ror r3
   1408c:			; <UNDEFINED> instruction: 0x00017fbf
   14090:	subs	r5, r0, #0
   14094:	push	{r7, lr}
   14098:	sub	sp, sp, #56	; 0x38
   1409c:	ldr	r4, [pc, #612]	; 14308 <__assert_fail@plt+0x2df4>
   140a0:	beq	140d8 <__assert_fail@plt+0x2bc4>
   140a4:	ldr	r3, [pc, #608]	; 1430c <__assert_fail@plt+0x2df8>
   140a8:	mov	r2, #5
   140ac:	ldr	r1, [pc, #604]	; 14310 <__assert_fail@plt+0x2dfc>
   140b0:	mov	r0, #0
   140b4:	ldr	r6, [r3]
   140b8:	bl	11238 <dcgettext@plt>
   140bc:	ldr	r3, [r4]
   140c0:	mov	r1, #1
   140c4:	mov	r2, r0
   140c8:	mov	r0, r6
   140cc:	bl	11418 <__fprintf_chk@plt>
   140d0:	mov	r0, r5
   140d4:	bl	11364 <exit@plt>
   140d8:	mov	r2, #5
   140dc:	ldr	r1, [pc, #560]	; 14314 <__assert_fail@plt+0x2e00>
   140e0:	bl	11238 <dcgettext@plt>
   140e4:	ldr	r2, [r4]
   140e8:	ldr	r4, [pc, #552]	; 14318 <__assert_fail@plt+0x2e04>
   140ec:	ldr	r8, [pc, #552]	; 1431c <__assert_fail@plt+0x2e08>
   140f0:	mov	r1, r0
   140f4:	mov	r0, #1
   140f8:	bl	113e8 <__printf_chk@plt>
   140fc:	mov	r2, #5
   14100:	ldr	r1, [pc, #536]	; 14320 <__assert_fail@plt+0x2e0c>
   14104:	mov	r0, r5
   14108:	bl	11238 <dcgettext@plt>
   1410c:	ldr	r1, [r4]
   14110:	bl	11178 <fputs_unlocked@plt>
   14114:	mov	r2, #5
   14118:	ldr	r1, [pc, #516]	; 14324 <__assert_fail@plt+0x2e10>
   1411c:	mov	r0, r5
   14120:	bl	11238 <dcgettext@plt>
   14124:	ldr	r1, [r4]
   14128:	bl	11178 <fputs_unlocked@plt>
   1412c:	mov	r2, #5
   14130:	ldr	r1, [pc, #496]	; 14328 <__assert_fail@plt+0x2e14>
   14134:	mov	r0, r5
   14138:	bl	11238 <dcgettext@plt>
   1413c:	ldr	r1, [r4]
   14140:	bl	11178 <fputs_unlocked@plt>
   14144:	mov	r2, #5
   14148:	ldr	r1, [pc, #476]	; 1432c <__assert_fail@plt+0x2e18>
   1414c:	mov	r0, r5
   14150:	ldr	r6, [r4]
   14154:	bl	11238 <dcgettext@plt>
   14158:	mov	r3, #2
   1415c:	mov	r1, #1
   14160:	mov	r2, r0
   14164:	mov	r0, r6
   14168:	bl	11418 <__fprintf_chk@plt>
   1416c:	mov	r2, #5
   14170:	ldr	r1, [pc, #440]	; 14330 <__assert_fail@plt+0x2e1c>
   14174:	mov	r0, r5
   14178:	bl	11238 <dcgettext@plt>
   1417c:	ldr	r1, [r4]
   14180:	bl	11178 <fputs_unlocked@plt>
   14184:	mov	r2, #5
   14188:	ldr	r1, [pc, #420]	; 14334 <__assert_fail@plt+0x2e20>
   1418c:	mov	r0, r5
   14190:	bl	11238 <dcgettext@plt>
   14194:	ldr	r1, [r4]
   14198:	bl	11178 <fputs_unlocked@plt>
   1419c:	mov	r2, #5
   141a0:	ldr	r1, [pc, #400]	; 14338 <__assert_fail@plt+0x2e24>
   141a4:	mov	r0, r5
   141a8:	bl	11238 <dcgettext@plt>
   141ac:	ldr	r1, [r4]
   141b0:	bl	11178 <fputs_unlocked@plt>
   141b4:	mov	r2, #5
   141b8:	ldr	r1, [pc, #380]	; 1433c <__assert_fail@plt+0x2e28>
   141bc:	mov	r0, r5
   141c0:	bl	11238 <dcgettext@plt>
   141c4:	ldr	r1, [r4]
   141c8:	bl	11178 <fputs_unlocked@plt>
   141cc:	mov	r2, #5
   141d0:	ldr	r1, [pc, #360]	; 14340 <__assert_fail@plt+0x2e2c>
   141d4:	mov	r0, r5
   141d8:	bl	11238 <dcgettext@plt>
   141dc:	ldr	r1, [r4]
   141e0:	bl	11178 <fputs_unlocked@plt>
   141e4:	ldr	lr, [pc, #344]	; 14344 <__assert_fail@plt+0x2e30>
   141e8:	mov	ip, sp
   141ec:	mov	r6, r5
   141f0:	ldm	lr!, {r0, r1, r2, r3}
   141f4:	stmia	ip!, {r0, r1, r2, r3}
   141f8:	ldm	lr!, {r0, r1, r2, r3}
   141fc:	stmia	ip!, {r0, r1, r2, r3}
   14200:	ldm	lr!, {r0, r1, r2, r3}
   14204:	stmia	ip!, {r0, r1, r2, r3}
   14208:	ldm	lr, {r0, r1}
   1420c:	stm	ip, {r0, r1}
   14210:	ldr	r1, [sp, r6]
   14214:	add	r7, sp, r6
   14218:	cmp	r1, #0
   1421c:	bne	142c0 <__assert_fail@plt+0x2dac>
   14220:	ldr	r6, [r7, #4]
   14224:	ldr	r7, [pc, #240]	; 1431c <__assert_fail@plt+0x2e08>
   14228:	cmp	r6, #0
   1422c:	mov	r2, #5
   14230:	ldr	r1, [pc, #272]	; 14348 <__assert_fail@plt+0x2e34>
   14234:	mov	r0, #0
   14238:	moveq	r6, r7
   1423c:	bl	11238 <dcgettext@plt>
   14240:	ldr	r3, [pc, #260]	; 1434c <__assert_fail@plt+0x2e38>
   14244:	ldr	r2, [pc, #260]	; 14350 <__assert_fail@plt+0x2e3c>
   14248:	mov	r1, r0
   1424c:	mov	r0, #1
   14250:	bl	113e8 <__printf_chk@plt>
   14254:	mov	r1, #0
   14258:	mov	r0, #5
   1425c:	bl	11460 <setlocale@plt>
   14260:	cmp	r0, #0
   14264:	bne	142d8 <__assert_fail@plt+0x2dc4>
   14268:	mov	r2, #5
   1426c:	ldr	r1, [pc, #224]	; 14354 <__assert_fail@plt+0x2e40>
   14270:	mov	r0, #0
   14274:	bl	11238 <dcgettext@plt>
   14278:	ldr	r3, [pc, #156]	; 1431c <__assert_fail@plt+0x2e08>
   1427c:	ldr	r2, [pc, #200]	; 1434c <__assert_fail@plt+0x2e38>
   14280:	mov	r1, r0
   14284:	mov	r0, #1
   14288:	bl	113e8 <__printf_chk@plt>
   1428c:	mov	r2, #5
   14290:	ldr	r1, [pc, #192]	; 14358 <__assert_fail@plt+0x2e44>
   14294:	mov	r0, #0
   14298:	bl	11238 <dcgettext@plt>
   1429c:	ldr	r2, [pc, #184]	; 1435c <__assert_fail@plt+0x2e48>
   142a0:	cmp	r6, r7
   142a4:	ldr	r3, [pc, #180]	; 14360 <__assert_fail@plt+0x2e4c>
   142a8:	moveq	r3, r2
   142ac:	mov	r2, r6
   142b0:	mov	r1, r0
   142b4:	mov	r0, #1
   142b8:	bl	113e8 <__printf_chk@plt>
   142bc:	b	140d0 <__assert_fail@plt+0x2bbc>
   142c0:	mov	r0, r8
   142c4:	bl	11190 <strcmp@plt>
   142c8:	add	r6, r6, #8
   142cc:	cmp	r0, #0
   142d0:	bne	14210 <__assert_fail@plt+0x2cfc>
   142d4:	b	14220 <__assert_fail@plt+0x2d0c>
   142d8:	mov	r2, #3
   142dc:	ldr	r1, [pc, #128]	; 14364 <__assert_fail@plt+0x2e50>
   142e0:	bl	114e4 <strncmp@plt>
   142e4:	cmp	r0, #0
   142e8:	beq	14268 <__assert_fail@plt+0x2d54>
   142ec:	mov	r2, #5
   142f0:	ldr	r1, [pc, #112]	; 14368 <__assert_fail@plt+0x2e54>
   142f4:	mov	r0, #0
   142f8:	bl	11238 <dcgettext@plt>
   142fc:	ldr	r1, [r4]
   14300:	bl	11178 <fputs_unlocked@plt>
   14304:	b	14268 <__assert_fail@plt+0x2d54>
   14308:	andeq	sl, r2, r4, lsr r5
   1430c:	andeq	sl, r2, r8, ror #6
   14310:	andeq	r7, r1, fp, ror #31
   14314:	andeq	r8, r1, r2, lsl r0
   14318:	andeq	sl, r2, ip, ror #6
   1431c:	andeq	r7, r1, r5, ror #31
   14320:	andeq	r8, r1, r9, lsr r0
   14324:	andeq	r8, r1, r3, lsr #1
   14328:	ldrdeq	r8, [r1], -fp
   1432c:	andeq	r8, r1, r6, lsr #2
   14330:	andeq	r8, r1, r8, ror #10
   14334:	ldrdeq	r8, [r1], -r9
   14338:	andeq	r8, r1, r6, lsl #12
   1433c:	andeq	r8, r1, ip, lsr r6
   14340:	andeq	r8, r1, r0, lsl r7
   14344:	andeq	r7, r1, ip, lsr ip
   14348:	andeq	r8, r1, r4, ror #16
   1434c:	andeq	r8, r1, fp, ror r8
   14350:	andeq	r8, r1, r3, lsr #17
   14354:	strdeq	r8, [r1], -ip
   14358:	andeq	r8, r1, r7, lsl r9
   1435c:	andeq	r8, r1, r3, asr #25
   14360:	andeq	r8, r1, r7, ror #10
   14364:			; <UNDEFINED> instruction: 0x000188b1
   14368:			; <UNDEFINED> instruction: 0x000188b5
   1436c:	mov	r2, r0
   14370:	push	{r4, lr}
   14374:	mov	r0, r2
   14378:	ldrb	r3, [r2]
   1437c:	add	r1, r2, #1
   14380:	cmp	r3, #47	; 0x2f
   14384:	beq	143a8 <__assert_fail@plt+0x2e94>
   14388:	mov	r3, #0
   1438c:	mov	lr, #1
   14390:	mov	r4, r3
   14394:	mov	ip, r2
   14398:	ldrb	r1, [r2], #1
   1439c:	cmp	r1, #0
   143a0:	bne	143b0 <__assert_fail@plt+0x2e9c>
   143a4:	pop	{r4, pc}
   143a8:	mov	r2, r1
   143ac:	b	14374 <__assert_fail@plt+0x2e60>
   143b0:	cmp	r1, #47	; 0x2f
   143b4:	moveq	r3, lr
   143b8:	beq	14394 <__assert_fail@plt+0x2e80>
   143bc:	cmp	r3, #0
   143c0:	movne	r0, ip
   143c4:	movne	r3, r4
   143c8:	b	14394 <__assert_fail@plt+0x2e80>
   143cc:	push	{r4, lr}
   143d0:	mov	r4, r0
   143d4:	bl	11370 <strlen@plt>
   143d8:	cmp	r0, #1
   143dc:	popls	{r4, pc}
   143e0:	sub	r3, r0, #1
   143e4:	ldrb	r2, [r4, r3]
   143e8:	cmp	r2, #47	; 0x2f
   143ec:	beq	143f4 <__assert_fail@plt+0x2ee0>
   143f0:	pop	{r4, pc}
   143f4:	mov	r0, r3
   143f8:	b	143d8 <__assert_fail@plt+0x2ec4>
   143fc:	ldr	r3, [pc, #4]	; 14408 <__assert_fail@plt+0x2ef4>
   14400:	str	r0, [r3]
   14404:	bx	lr
   14408:	andeq	sl, r2, ip, lsr #10
   1440c:	ldr	r3, [pc, #4]	; 14418 <__assert_fail@plt+0x2f04>
   14410:	strb	r0, [r3, #4]
   14414:	bx	lr
   14418:	andeq	sl, r2, ip, lsr #10
   1441c:	ldr	r3, [pc, #192]	; 144e4 <__assert_fail@plt+0x2fd0>
   14420:	push	{r0, r1, r4, r5, r6, lr}
   14424:	ldr	r0, [r3]
   14428:	bl	171e4 <__assert_fail@plt+0x5cd0>
   1442c:	cmp	r0, #0
   14430:	beq	144c8 <__assert_fail@plt+0x2fb4>
   14434:	ldr	r3, [pc, #172]	; 144e8 <__assert_fail@plt+0x2fd4>
   14438:	mov	r4, r3
   1443c:	ldrb	r2, [r3, #4]
   14440:	cmp	r2, #0
   14444:	beq	14458 <__assert_fail@plt+0x2f44>
   14448:	bl	113b8 <__errno_location@plt>
   1444c:	ldr	r3, [r0]
   14450:	cmp	r3, #32
   14454:	beq	144c8 <__assert_fail@plt+0x2fb4>
   14458:	mov	r2, #5
   1445c:	ldr	r1, [pc, #136]	; 144ec <__assert_fail@plt+0x2fd8>
   14460:	mov	r0, #0
   14464:	bl	11238 <dcgettext@plt>
   14468:	ldr	r4, [r4]
   1446c:	cmp	r4, #0
   14470:	mov	r5, r0
   14474:	beq	144ac <__assert_fail@plt+0x2f98>
   14478:	bl	113b8 <__errno_location@plt>
   1447c:	ldr	r6, [r0]
   14480:	mov	r0, r4
   14484:	bl	15d1c <__assert_fail@plt+0x4808>
   14488:	str	r5, [sp]
   1448c:	ldr	r2, [pc, #92]	; 144f0 <__assert_fail@plt+0x2fdc>
   14490:	mov	r1, r6
   14494:	mov	r3, r0
   14498:	mov	r0, #0
   1449c:	bl	112ec <error@plt>
   144a0:	ldr	r3, [pc, #76]	; 144f4 <__assert_fail@plt+0x2fe0>
   144a4:	ldr	r0, [r3]
   144a8:	bl	111e4 <_exit@plt>
   144ac:	bl	113b8 <__errno_location@plt>
   144b0:	mov	r3, r5
   144b4:	ldr	r2, [pc, #60]	; 144f8 <__assert_fail@plt+0x2fe4>
   144b8:	ldr	r1, [r0]
   144bc:	mov	r0, r4
   144c0:	bl	112ec <error@plt>
   144c4:	b	144a0 <__assert_fail@plt+0x2f8c>
   144c8:	ldr	r3, [pc, #44]	; 144fc <__assert_fail@plt+0x2fe8>
   144cc:	ldr	r0, [r3]
   144d0:	bl	171e4 <__assert_fail@plt+0x5cd0>
   144d4:	cmp	r0, #0
   144d8:	bne	144a0 <__assert_fail@plt+0x2f8c>
   144dc:	add	sp, sp, #8
   144e0:	pop	{r4, r5, r6, pc}
   144e4:	andeq	sl, r2, ip, ror #6
   144e8:	andeq	sl, r2, ip, lsr #10
   144ec:	andeq	r8, r1, r3, ror ip
   144f0:	muleq	r1, r2, fp
   144f4:	andeq	sl, r2, ip, ror #2
   144f8:			; <UNDEFINED> instruction: 0x00017fbf
   144fc:	andeq	sl, r2, r8, ror #6
   14500:	push	{r0, r1, r2, r4, r5, lr}
   14504:	mov	r4, r0
   14508:	bl	11400 <fileno@plt>
   1450c:	cmp	r0, #0
   14510:	mov	r0, r4
   14514:	bge	14524 <__assert_fail@plt+0x3010>
   14518:	add	sp, sp, #12
   1451c:	pop	{r4, r5, lr}
   14520:	b	11430 <fclose@plt>
   14524:	bl	11334 <__freading@plt>
   14528:	cmp	r0, #0
   1452c:	bne	14568 <__assert_fail@plt+0x3054>
   14530:	mov	r0, r4
   14534:	bl	1463c <__assert_fail@plt+0x3128>
   14538:	cmp	r0, #0
   1453c:	bne	1459c <__assert_fail@plt+0x3088>
   14540:	mov	r5, #0
   14544:	mov	r0, r4
   14548:	bl	11430 <fclose@plt>
   1454c:	cmp	r5, #0
   14550:	beq	14560 <__assert_fail@plt+0x304c>
   14554:	bl	113b8 <__errno_location@plt>
   14558:	str	r5, [r0]
   1455c:	mvn	r0, #0
   14560:	add	sp, sp, #12
   14564:	pop	{r4, r5, pc}
   14568:	mov	r0, r4
   1456c:	bl	11400 <fileno@plt>
   14570:	mov	r3, #1
   14574:	str	r3, [sp]
   14578:	mov	r2, #0
   1457c:	mov	r3, #0
   14580:	bl	11298 <lseek64@plt>
   14584:	mvn	r3, #0
   14588:	mvn	r2, #0
   1458c:	cmp	r1, r3
   14590:	cmpeq	r0, r2
   14594:	bne	14530 <__assert_fail@plt+0x301c>
   14598:	b	14540 <__assert_fail@plt+0x302c>
   1459c:	bl	113b8 <__errno_location@plt>
   145a0:	ldr	r5, [r0]
   145a4:	b	14544 <__assert_fail@plt+0x3030>
   145a8:	push	{r1, r2, r3}
   145ac:	push	{r0, r1, lr}
   145b0:	ldr	r1, [sp, #12]
   145b4:	ands	r2, r1, #64	; 0x40
   145b8:	addne	r3, sp, #16
   145bc:	ldrne	r2, [sp, #16]
   145c0:	strne	r3, [sp, #4]
   145c4:	bl	112f8 <open64@plt>
   145c8:	bl	16198 <__assert_fail@plt+0x4c84>
   145cc:	add	sp, sp, #8
   145d0:	pop	{lr}		; (ldr lr, [sp], #4)
   145d4:	add	sp, sp, #12
   145d8:	bx	lr
   145dc:	push	{r4, r5, r6, r7, r8, lr}
   145e0:	mov	r5, r0
   145e4:	mov	r0, r1
   145e8:	mov	r1, r2
   145ec:	mov	r2, r3
   145f0:	bl	112f8 <open64@plt>
   145f4:	sub	r3, r5, r0
   145f8:	clz	r3, r3
   145fc:	lsr	r3, r3, #5
   14600:	orrs	r3, r3, r0, lsr #31
   14604:	mov	r4, r0
   14608:	bne	14634 <__assert_fail@plt+0x3120>
   1460c:	mov	r1, r5
   14610:	bl	11244 <dup2@plt>
   14614:	mov	r6, r0
   14618:	bl	113b8 <__errno_location@plt>
   1461c:	ldr	r7, [r0]
   14620:	mov	r5, r0
   14624:	mov	r0, r4
   14628:	mov	r4, r6
   1462c:	bl	114fc <close@plt>
   14630:	str	r7, [r5]
   14634:	mov	r0, r4
   14638:	pop	{r4, r5, r6, r7, r8, pc}
   1463c:	push	{r0, r1, r4, lr}
   14640:	subs	r4, r0, #0
   14644:	bne	14658 <__assert_fail@plt+0x3144>
   14648:	mov	r0, r4
   1464c:	add	sp, sp, #8
   14650:	pop	{r4, lr}
   14654:	b	111b4 <fflush@plt>
   14658:	bl	11334 <__freading@plt>
   1465c:	cmp	r0, #0
   14660:	beq	14648 <__assert_fail@plt+0x3134>
   14664:	ldr	r3, [r4]
   14668:	tst	r3, #256	; 0x100
   1466c:	beq	14648 <__assert_fail@plt+0x3134>
   14670:	mov	r3, #1
   14674:	str	r3, [sp]
   14678:	mov	r2, #0
   1467c:	mov	r3, #0
   14680:	mov	r0, r4
   14684:	bl	146e0 <__assert_fail@plt+0x31cc>
   14688:	b	14648 <__assert_fail@plt+0x3134>
   1468c:	push	{r0, r1, r2, r4, r5, lr}
   14690:	mov	r5, r0
   14694:	bl	113b8 <__errno_location@plt>
   14698:	ldr	r3, [r0]
   1469c:	mov	r4, r0
   146a0:	str	r3, [sp]
   146a4:	str	r3, [sp, #4]
   146a8:	mov	r3, #0
   146ac:	str	r3, [r0]
   146b0:	mov	r0, r5
   146b4:	bl	111d8 <free@plt>
   146b8:	ldr	r3, [r4]
   146bc:	add	r2, sp, #8
   146c0:	cmp	r3, #0
   146c4:	moveq	r3, #4
   146c8:	movne	r3, #0
   146cc:	add	r3, r2, r3
   146d0:	ldr	r3, [r3, #-8]
   146d4:	str	r3, [r4]
   146d8:	add	sp, sp, #12
   146dc:	pop	{r4, r5, pc}
   146e0:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   146e4:	mov	r4, r0
   146e8:	ldmib	r0, {ip, lr}
   146ec:	ldr	r8, [sp, #32]
   146f0:	cmp	lr, ip
   146f4:	bne	14760 <__assert_fail@plt+0x324c>
   146f8:	ldr	lr, [r0, #20]
   146fc:	ldr	ip, [r0, #16]
   14700:	cmp	lr, ip
   14704:	bne	14760 <__assert_fail@plt+0x324c>
   14708:	ldr	r5, [r0, #36]	; 0x24
   1470c:	cmp	r5, #0
   14710:	bne	14760 <__assert_fail@plt+0x324c>
   14714:	mov	r6, r2
   14718:	mov	r7, r3
   1471c:	bl	11400 <fileno@plt>
   14720:	mov	r2, r6
   14724:	mov	r3, r7
   14728:	str	r8, [sp]
   1472c:	bl	11298 <lseek64@plt>
   14730:	mvn	r3, #0
   14734:	mvn	r2, #0
   14738:	cmp	r1, r3
   1473c:	cmpeq	r0, r2
   14740:	mvneq	r0, #0
   14744:	ldrne	r3, [r4]
   14748:	strdne	r0, [r4, #80]	; 0x50
   1474c:	movne	r0, r5
   14750:	bicne	r3, r3, #16
   14754:	strne	r3, [r4]
   14758:	add	sp, sp, #8
   1475c:	pop	{r4, r5, r6, r7, r8, pc}
   14760:	str	r8, [sp, #32]
   14764:	mov	r0, r4
   14768:	add	sp, sp, #8
   1476c:	pop	{r4, r5, r6, r7, r8, lr}
   14770:	b	11448 <fseeko64@plt>
   14774:	push	{r4, r5, r6, r7, r8, lr}
   14778:	mov	r7, r0
   1477c:	mov	r4, r2
   14780:	mov	r6, r1
   14784:	mov	r5, #0
   14788:	cmp	r4, #0
   1478c:	beq	147bc <__assert_fail@plt+0x32a8>
   14790:	mov	r2, r4
   14794:	mov	r1, r6
   14798:	mov	r0, r7
   1479c:	bl	15ee4 <__assert_fail@plt+0x49d0>
   147a0:	cmn	r0, #1
   147a4:	beq	147bc <__assert_fail@plt+0x32a8>
   147a8:	cmp	r0, #0
   147ac:	bne	147c4 <__assert_fail@plt+0x32b0>
   147b0:	bl	113b8 <__errno_location@plt>
   147b4:	mov	r3, #28
   147b8:	str	r3, [r0]
   147bc:	mov	r0, r5
   147c0:	pop	{r4, r5, r6, r7, r8, pc}
   147c4:	add	r5, r5, r0
   147c8:	add	r6, r6, r0
   147cc:	sub	r4, r4, r0
   147d0:	b	14788 <__assert_fail@plt+0x3274>
   147d4:	push	{r4, r5, r6, r8, r9, lr}
   147d8:	mov	r4, r0
   147dc:	mov	r5, r1
   147e0:	add	r6, r2, #20
   147e4:	mov	r8, #10
   147e8:	mov	r9, #0
   147ec:	mov	r3, #0
   147f0:	strb	r3, [r2, #20]
   147f4:	mov	r0, r4
   147f8:	mov	r1, r5
   147fc:	mov	r2, r8
   14800:	mov	r3, r9
   14804:	bl	17a20 <__assert_fail@plt+0x650c>
   14808:	mov	r3, r9
   1480c:	mov	r0, r4
   14810:	mov	r1, r5
   14814:	add	r2, r2, #48	; 0x30
   14818:	strb	r2, [r6, #-1]!
   1481c:	mov	r2, r8
   14820:	bl	17a20 <__assert_fail@plt+0x650c>
   14824:	mov	r4, r0
   14828:	mov	r5, r1
   1482c:	orrs	r3, r4, r5
   14830:	bne	147f4 <__assert_fail@plt+0x32e0>
   14834:	mov	r0, r6
   14838:	pop	{r4, r5, r6, r8, r9, pc}
   1483c:	push	{r4, r5, r6, lr}
   14840:	subs	r5, r0, #0
   14844:	bne	1485c <__assert_fail@plt+0x3348>
   14848:	ldr	r3, [pc, #124]	; 148cc <__assert_fail@plt+0x33b8>
   1484c:	ldr	r0, [pc, #124]	; 148d0 <__assert_fail@plt+0x33bc>
   14850:	ldr	r1, [r3]
   14854:	bl	114d8 <fputs@plt>
   14858:	bl	114f0 <abort@plt>
   1485c:	mov	r1, #47	; 0x2f
   14860:	bl	11490 <strrchr@plt>
   14864:	cmp	r0, #0
   14868:	addne	r4, r0, #1
   1486c:	moveq	r4, r5
   14870:	sub	r3, r4, r5
   14874:	cmp	r3, #6
   14878:	ble	148b8 <__assert_fail@plt+0x33a4>
   1487c:	mov	r2, #7
   14880:	ldr	r1, [pc, #76]	; 148d4 <__assert_fail@plt+0x33c0>
   14884:	sub	r0, r4, #7
   14888:	bl	114e4 <strncmp@plt>
   1488c:	cmp	r0, #0
   14890:	bne	148b8 <__assert_fail@plt+0x33a4>
   14894:	mov	r2, #3
   14898:	ldr	r1, [pc, #56]	; 148d8 <__assert_fail@plt+0x33c4>
   1489c:	mov	r0, r4
   148a0:	bl	114e4 <strncmp@plt>
   148a4:	cmp	r0, #0
   148a8:	movne	r5, r4
   148ac:	ldreq	r3, [pc, #40]	; 148dc <__assert_fail@plt+0x33c8>
   148b0:	addeq	r5, r4, #3
   148b4:	streq	r5, [r3]
   148b8:	ldr	r3, [pc, #32]	; 148e0 <__assert_fail@plt+0x33cc>
   148bc:	str	r5, [r3]
   148c0:	ldr	r3, [pc, #28]	; 148e4 <__assert_fail@plt+0x33d0>
   148c4:	str	r5, [r3]
   148c8:	pop	{r4, r5, r6, pc}
   148cc:	andeq	sl, r2, r8, ror #6
   148d0:			; <UNDEFINED> instruction: 0x00018dbe
   148d4:	strdeq	r8, [r1], -r6
   148d8:	strdeq	r8, [r1], -lr
   148dc:	andeq	sl, r2, r8, asr r3
   148e0:	andeq	sl, r2, r4, lsr r5
   148e4:	andeq	sl, r2, ip, asr r3
   148e8:	push	{r4, r5, r6, lr}
   148ec:	mov	r2, #48	; 0x30
   148f0:	mov	r5, r1
   148f4:	mov	r1, #0
   148f8:	mov	r4, r0
   148fc:	bl	113dc <memset@plt>
   14900:	cmp	r5, #10
   14904:	bne	1490c <__assert_fail@plt+0x33f8>
   14908:	bl	114f0 <abort@plt>
   1490c:	str	r5, [r4]
   14910:	mov	r0, r4
   14914:	pop	{r4, r5, r6, pc}
   14918:	push	{r4, r5, r6, lr}
   1491c:	mov	r4, r0
   14920:	mov	r5, r1
   14924:	bl	17254 <__assert_fail@plt+0x5d40>
   14928:	ldrb	r3, [r0]
   1492c:	bic	r3, r3, #32
   14930:	cmp	r3, #85	; 0x55
   14934:	bne	149a4 <__assert_fail@plt+0x3490>
   14938:	ldrb	r3, [r0, #1]
   1493c:	bic	r3, r3, #32
   14940:	cmp	r3, #84	; 0x54
   14944:	bne	1497c <__assert_fail@plt+0x3468>
   14948:	ldrb	r3, [r0, #2]
   1494c:	bic	r3, r3, #32
   14950:	cmp	r3, #70	; 0x46
   14954:	bne	1497c <__assert_fail@plt+0x3468>
   14958:	ldrb	r3, [r0, #3]
   1495c:	cmp	r3, #45	; 0x2d
   14960:	bne	1497c <__assert_fail@plt+0x3468>
   14964:	ldrb	r3, [r0, #4]
   14968:	cmp	r3, #56	; 0x38
   1496c:	bne	1497c <__assert_fail@plt+0x3468>
   14970:	ldrb	r3, [r0, #5]
   14974:	cmp	r3, #0
   14978:	beq	14990 <__assert_fail@plt+0x347c>
   1497c:	ldr	r1, [pc, #144]	; 14a14 <__assert_fail@plt+0x3500>
   14980:	ldr	r0, [pc, #144]	; 14a18 <__assert_fail@plt+0x3504>
   14984:	cmp	r5, #9
   14988:	movne	r0, r1
   1498c:	pop	{r4, r5, r6, pc}
   14990:	ldrb	r3, [r4]
   14994:	ldr	r1, [pc, #128]	; 14a1c <__assert_fail@plt+0x3508>
   14998:	ldr	r0, [pc, #128]	; 14a20 <__assert_fail@plt+0x350c>
   1499c:	cmp	r3, #96	; 0x60
   149a0:	b	14988 <__assert_fail@plt+0x3474>
   149a4:	cmp	r3, #71	; 0x47
   149a8:	bne	1497c <__assert_fail@plt+0x3468>
   149ac:	ldrb	r3, [r0, #1]
   149b0:	bic	r3, r3, #32
   149b4:	cmp	r3, #66	; 0x42
   149b8:	bne	1497c <__assert_fail@plt+0x3468>
   149bc:	ldrb	r3, [r0, #2]
   149c0:	cmp	r3, #49	; 0x31
   149c4:	bne	1497c <__assert_fail@plt+0x3468>
   149c8:	ldrb	r3, [r0, #3]
   149cc:	cmp	r3, #56	; 0x38
   149d0:	bne	1497c <__assert_fail@plt+0x3468>
   149d4:	ldrb	r3, [r0, #4]
   149d8:	cmp	r3, #48	; 0x30
   149dc:	bne	1497c <__assert_fail@plt+0x3468>
   149e0:	ldrb	r3, [r0, #5]
   149e4:	cmp	r3, #51	; 0x33
   149e8:	bne	1497c <__assert_fail@plt+0x3468>
   149ec:	ldrb	r3, [r0, #6]
   149f0:	cmp	r3, #48	; 0x30
   149f4:	bne	1497c <__assert_fail@plt+0x3468>
   149f8:	ldrb	r3, [r0, #7]
   149fc:	cmp	r3, #0
   14a00:	bne	1497c <__assert_fail@plt+0x3468>
   14a04:	ldrb	r3, [r4]
   14a08:	ldr	r1, [pc, #20]	; 14a24 <__assert_fail@plt+0x3510>
   14a0c:	ldr	r0, [pc, #20]	; 14a28 <__assert_fail@plt+0x3514>
   14a10:	b	1499c <__assert_fail@plt+0x3488>
   14a14:	andeq	r8, r1, r7, ror #28
   14a18:	andeq	r7, r1, lr, lsl pc
   14a1c:	andeq	r8, r1, ip, asr lr
   14a20:	andeq	r8, r1, r8, asr lr
   14a24:	andeq	r8, r1, r4, ror #28
   14a28:	andeq	r8, r1, r0, ror #28
   14a2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a30:	sub	sp, sp, #108	; 0x6c
   14a34:	mov	r8, r0
   14a38:	str	r3, [sp, #36]	; 0x24
   14a3c:	mov	r5, r1
   14a40:	str	r2, [sp, #44]	; 0x2c
   14a44:	ldr	sl, [sp, #144]	; 0x90
   14a48:	bl	112b0 <__ctype_get_mb_cur_max@plt>
   14a4c:	ldr	r3, [sp, #148]	; 0x94
   14a50:	mov	r7, #0
   14a54:	str	r7, [sp, #48]	; 0x30
   14a58:	lsr	r6, r3, #1
   14a5c:	and	r6, r6, #1
   14a60:	mov	r3, #1
   14a64:	str	r3, [sp, #72]	; 0x48
   14a68:	str	r7, [sp, #24]
   14a6c:	str	r7, [sp, #32]
   14a70:	str	r7, [sp, #40]	; 0x28
   14a74:	str	r7, [sp, #60]	; 0x3c
   14a78:	str	r0, [sp, #76]	; 0x4c
   14a7c:	cmp	sl, #10
   14a80:	ldrls	pc, [pc, sl, lsl #2]
   14a84:	b	14cc0 <__assert_fail@plt+0x37ac>
   14a88:			; <UNDEFINED> instruction: 0x00014ab4
   14a8c:	andeq	r5, r1, r8, asr #14
   14a90:	andeq	r4, r1, ip, lsl #25
   14a94:	ldrdeq	r4, [r1], -r8
   14a98:	andeq	r4, r1, r8, ror #24
   14a9c:	andeq	r4, r1, r0, asr #21
   14aa0:	andeq	r5, r1, r8, lsr #14
   14aa4:	andeq	r4, r1, r4, asr #25
   14aa8:			; <UNDEFINED> instruction: 0x00014bb8
   14aac:			; <UNDEFINED> instruction: 0x00014bb8
   14ab0:			; <UNDEFINED> instruction: 0x00014bb8
   14ab4:	mov	r6, #0
   14ab8:	mov	r4, #0
   14abc:	b	14aec <__assert_fail@plt+0x35d8>
   14ac0:	cmp	r6, #0
   14ac4:	bne	14ce8 <__assert_fail@plt+0x37d4>
   14ac8:	cmp	r5, #0
   14acc:	movne	r3, #34	; 0x22
   14ad0:	strbne	r3, [r8]
   14ad4:	mov	r3, #1
   14ad8:	str	r3, [sp, #24]
   14adc:	str	r3, [sp, #32]
   14ae0:	mov	r4, #1
   14ae4:	ldr	r3, [pc, #3172]	; 15750 <__assert_fail@plt+0x423c>
   14ae8:	str	r3, [sp, #40]	; 0x28
   14aec:	mov	r9, r5
   14af0:	mov	r3, #0
   14af4:	str	r7, [sp, #68]	; 0x44
   14af8:	str	r3, [sp, #28]
   14afc:	ldr	r3, [sp, #36]	; 0x24
   14b00:	cmn	r3, #1
   14b04:	bne	15694 <__assert_fail@plt+0x4180>
   14b08:	ldr	r3, [sp, #44]	; 0x2c
   14b0c:	ldr	r2, [sp, #28]
   14b10:	ldrb	r3, [r3, r2]
   14b14:	adds	r3, r3, #0
   14b18:	movne	r3, #1
   14b1c:	str	r3, [sp, #52]	; 0x34
   14b20:	ldr	r3, [sp, #52]	; 0x34
   14b24:	cmp	r3, #0
   14b28:	bne	14d10 <__assert_fail@plt+0x37fc>
   14b2c:	sub	r2, sl, #2
   14b30:	clz	r2, r2
   14b34:	lsr	r2, r2, #5
   14b38:	and	r3, r6, r2
   14b3c:	cmp	r4, #0
   14b40:	movne	r3, #0
   14b44:	andeq	r3, r3, #1
   14b48:	cmp	r3, #0
   14b4c:	bne	14ed8 <__assert_fail@plt+0x39c4>
   14b50:	eor	r3, r6, #1
   14b54:	ands	r2, r2, r3
   14b58:	beq	156cc <__assert_fail@plt+0x41b8>
   14b5c:	ldr	r3, [sp, #68]	; 0x44
   14b60:	cmp	r3, #0
   14b64:	beq	15704 <__assert_fail@plt+0x41f0>
   14b68:	ldr	r3, [sp, #72]	; 0x48
   14b6c:	cmp	r3, #0
   14b70:	beq	156a8 <__assert_fail@plt+0x4194>
   14b74:	ldr	r3, [sp, #160]	; 0xa0
   14b78:	ldr	r2, [sp, #44]	; 0x2c
   14b7c:	str	r3, [sp, #16]
   14b80:	ldr	r3, [sp, #156]	; 0x9c
   14b84:	ldr	r1, [sp, #60]	; 0x3c
   14b88:	str	r3, [sp, #12]
   14b8c:	ldr	r3, [sp, #152]	; 0x98
   14b90:	str	r3, [sp, #8]
   14b94:	ldr	r3, [sp, #148]	; 0x94
   14b98:	str	r3, [sp, #4]
   14b9c:	mov	r3, #5
   14ba0:	str	r3, [sp]
   14ba4:	ldr	r3, [sp, #36]	; 0x24
   14ba8:	mov	r0, r8
   14bac:	bl	14a2c <__assert_fail@plt+0x3518>
   14bb0:	mov	r4, r0
   14bb4:	b	156f8 <__assert_fail@plt+0x41e4>
   14bb8:	cmp	sl, #10
   14bbc:	beq	14c18 <__assert_fail@plt+0x3704>
   14bc0:	ldr	r4, [pc, #2956]	; 15754 <__assert_fail@plt+0x4240>
   14bc4:	mov	r2, #5
   14bc8:	mov	r1, r4
   14bcc:	mov	r0, #0
   14bd0:	bl	11238 <dcgettext@plt>
   14bd4:	cmp	r0, r4
   14bd8:	str	r0, [sp, #156]	; 0x9c
   14bdc:	bne	14bec <__assert_fail@plt+0x36d8>
   14be0:	mov	r1, sl
   14be4:	bl	14918 <__assert_fail@plt+0x3404>
   14be8:	str	r0, [sp, #156]	; 0x9c
   14bec:	ldr	r4, [pc, #2916]	; 15758 <__assert_fail@plt+0x4244>
   14bf0:	mov	r2, #5
   14bf4:	mov	r1, r4
   14bf8:	mov	r0, #0
   14bfc:	bl	11238 <dcgettext@plt>
   14c00:	cmp	r0, r4
   14c04:	str	r0, [sp, #160]	; 0xa0
   14c08:	bne	14c18 <__assert_fail@plt+0x3704>
   14c0c:	mov	r1, sl
   14c10:	bl	14918 <__assert_fail@plt+0x3404>
   14c14:	str	r0, [sp, #160]	; 0xa0
   14c18:	cmp	r6, #0
   14c1c:	moveq	r4, r6
   14c20:	beq	14c38 <__assert_fail@plt+0x3724>
   14c24:	mov	r4, #0
   14c28:	b	14c48 <__assert_fail@plt+0x3734>
   14c2c:	cmp	r5, r4
   14c30:	strbhi	r3, [r8, r4]
   14c34:	add	r4, r4, #1
   14c38:	ldr	r3, [sp, #156]	; 0x9c
   14c3c:	ldrb	r3, [r3, r4]
   14c40:	cmp	r3, #0
   14c44:	bne	14c2c <__assert_fail@plt+0x3718>
   14c48:	ldr	r0, [sp, #160]	; 0xa0
   14c4c:	bl	11370 <strlen@plt>
   14c50:	ldr	r3, [sp, #160]	; 0xa0
   14c54:	str	r3, [sp, #40]	; 0x28
   14c58:	mov	r3, #1
   14c5c:	str	r3, [sp, #24]
   14c60:	str	r0, [sp, #32]
   14c64:	b	14aec <__assert_fail@plt+0x35d8>
   14c68:	mov	r3, #1
   14c6c:	cmp	r6, #0
   14c70:	streq	r3, [sp, #24]
   14c74:	beq	14c94 <__assert_fail@plt+0x3780>
   14c78:	str	r3, [sp, #32]
   14c7c:	ldr	r3, [pc, #2772]	; 15758 <__assert_fail@plt+0x4244>
   14c80:	mov	r4, #0
   14c84:	str	r3, [sp, #40]	; 0x28
   14c88:	b	14cb8 <__assert_fail@plt+0x37a4>
   14c8c:	cmp	r6, #0
   14c90:	bne	14d00 <__assert_fail@plt+0x37ec>
   14c94:	cmp	r5, #0
   14c98:	movne	r3, #39	; 0x27
   14c9c:	strbne	r3, [r8]
   14ca0:	mov	r3, #1
   14ca4:	str	r3, [sp, #32]
   14ca8:	mov	r6, #0
   14cac:	ldr	r3, [pc, #2724]	; 15758 <__assert_fail@plt+0x4244>
   14cb0:	mov	r4, #1
   14cb4:	str	r3, [sp, #40]	; 0x28
   14cb8:	mov	sl, #2
   14cbc:	b	14aec <__assert_fail@plt+0x35d8>
   14cc0:	bl	114f0 <abort@plt>
   14cc4:	mov	r6, #0
   14cc8:	mov	r3, #1
   14ccc:	str	r3, [sp, #24]
   14cd0:	mov	r4, r6
   14cd4:	b	14aec <__assert_fail@plt+0x35d8>
   14cd8:	mov	r6, #1
   14cdc:	str	r6, [sp, #24]
   14ce0:	str	r6, [sp, #32]
   14ce4:	b	14c7c <__assert_fail@plt+0x3768>
   14ce8:	mov	r3, #1
   14cec:	str	r3, [sp, #32]
   14cf0:	ldr	r3, [pc, #2648]	; 15750 <__assert_fail@plt+0x423c>
   14cf4:	str	r6, [sp, #24]
   14cf8:	str	r3, [sp, #40]	; 0x28
   14cfc:	b	14ab8 <__assert_fail@plt+0x35a4>
   14d00:	mov	r3, #1
   14d04:	str	r3, [sp, #32]
   14d08:	ldr	r3, [pc, #2632]	; 15758 <__assert_fail@plt+0x4244>
   14d0c:	b	14cf8 <__assert_fail@plt+0x37e4>
   14d10:	ldr	r3, [sp, #32]
   14d14:	ldr	fp, [sp, #24]
   14d18:	cmp	sl, #2
   14d1c:	moveq	fp, #0
   14d20:	andne	fp, fp, #1
   14d24:	adds	r5, r3, #0
   14d28:	movne	r5, #1
   14d2c:	ands	r3, r5, fp
   14d30:	str	r3, [sp, #64]	; 0x40
   14d34:	beq	14e04 <__assert_fail@plt+0x38f0>
   14d38:	ldr	r2, [sp, #32]
   14d3c:	ldr	r3, [sp, #28]
   14d40:	add	r7, r3, r2
   14d44:	mov	r3, r2
   14d48:	ldr	r2, [sp, #36]	; 0x24
   14d4c:	cmp	r3, #1
   14d50:	movls	r3, #0
   14d54:	movhi	r3, #1
   14d58:	cmn	r2, #1
   14d5c:	movne	r3, #0
   14d60:	cmp	r3, #0
   14d64:	beq	14d74 <__assert_fail@plt+0x3860>
   14d68:	ldr	r0, [sp, #44]	; 0x2c
   14d6c:	bl	11370 <strlen@plt>
   14d70:	str	r0, [sp, #36]	; 0x24
   14d74:	ldr	r3, [sp, #36]	; 0x24
   14d78:	cmp	r3, r7
   14d7c:	bcc	14dfc <__assert_fail@plt+0x38e8>
   14d80:	ldr	r3, [sp, #44]	; 0x2c
   14d84:	ldr	r0, [sp, #28]
   14d88:	ldr	r2, [sp, #32]
   14d8c:	ldr	r1, [sp, #40]	; 0x28
   14d90:	add	r0, r3, r0
   14d94:	bl	11220 <memcmp@plt>
   14d98:	cmp	r0, #0
   14d9c:	bne	14dfc <__assert_fail@plt+0x38e8>
   14da0:	cmp	r6, #0
   14da4:	beq	14e04 <__assert_fail@plt+0x38f0>
   14da8:	str	r6, [sp, #24]
   14dac:	ldr	r3, [sp, #24]
   14db0:	ldr	r2, [sp, #44]	; 0x2c
   14db4:	cmp	sl, #2
   14db8:	movne	r3, #0
   14dbc:	andeq	r3, r3, #1
   14dc0:	cmp	r3, #0
   14dc4:	ldr	r3, [sp, #160]	; 0xa0
   14dc8:	movne	sl, #4
   14dcc:	str	r3, [sp, #16]
   14dd0:	ldr	r3, [sp, #156]	; 0x9c
   14dd4:	str	sl, [sp]
   14dd8:	str	r3, [sp, #12]
   14ddc:	mov	r3, #0
   14de0:	str	r3, [sp, #8]
   14de4:	ldr	r3, [sp, #148]	; 0x94
   14de8:	mov	r1, r9
   14dec:	bic	r3, r3, #2
   14df0:	str	r3, [sp, #4]
   14df4:	ldr	r3, [sp, #36]	; 0x24
   14df8:	b	14ba8 <__assert_fail@plt+0x3694>
   14dfc:	mov	r3, #0
   14e00:	str	r3, [sp, #64]	; 0x40
   14e04:	ldr	r2, [sp, #28]
   14e08:	ldr	r3, [sp, #44]	; 0x2c
   14e0c:	add	r3, r3, r2
   14e10:	str	r3, [sp, #80]	; 0x50
   14e14:	ldr	r3, [sp, #44]	; 0x2c
   14e18:	ldrb	r7, [r3, r2]
   14e1c:	cmp	r7, #58	; 0x3a
   14e20:	bhi	14f88 <__assert_fail@plt+0x3a74>
   14e24:	cmp	r7, #43	; 0x2b
   14e28:	bcs	14fdc <__assert_fail@plt+0x3ac8>
   14e2c:	cmp	r7, #32
   14e30:	beq	15034 <__assert_fail@plt+0x3b20>
   14e34:	bhi	14ee0 <__assert_fail@plt+0x39cc>
   14e38:	cmp	r7, #9
   14e3c:	beq	152e8 <__assert_fail@plt+0x3dd4>
   14e40:	bhi	14ea4 <__assert_fail@plt+0x3990>
   14e44:	cmp	r7, #7
   14e48:	beq	15394 <__assert_fail@plt+0x3e80>
   14e4c:	bhi	15050 <__assert_fail@plt+0x3b3c>
   14e50:	cmp	r7, #0
   14e54:	beq	1506c <__assert_fail@plt+0x3b58>
   14e58:	ldr	r3, [sp, #76]	; 0x4c
   14e5c:	cmp	r3, #1
   14e60:	bne	153d8 <__assert_fail@plt+0x3ec4>
   14e64:	bl	11358 <__ctype_b_loc@plt>
   14e68:	sxth	r3, r7
   14e6c:	lsl	r3, r3, #1
   14e70:	ldr	r2, [r0]
   14e74:	ldrh	r5, [r2, r3]
   14e78:	ldr	r3, [sp, #76]	; 0x4c
   14e7c:	str	r3, [sp, #56]	; 0x38
   14e80:	lsr	r5, r5, #14
   14e84:	and	r5, r5, #1
   14e88:	ldr	r3, [sp, #24]
   14e8c:	eor	fp, r5, #1
   14e90:	and	fp, fp, r3
   14e94:	ands	fp, fp, #255	; 0xff
   14e98:	beq	15220 <__assert_fail@plt+0x3d0c>
   14e9c:	mov	r5, #0
   14ea0:	b	15484 <__assert_fail@plt+0x3f70>
   14ea4:	cmp	r7, #11
   14ea8:	beq	152f0 <__assert_fail@plt+0x3ddc>
   14eac:	bcc	1538c <__assert_fail@plt+0x3e78>
   14eb0:	cmp	r7, #12
   14eb4:	beq	1539c <__assert_fail@plt+0x3e88>
   14eb8:	cmp	r7, #13
   14ebc:	moveq	r3, #114	; 0x72
   14ec0:	bne	14e58 <__assert_fail@plt+0x3944>
   14ec4:	cmp	sl, #2
   14ec8:	movne	r2, #0
   14ecc:	andeq	r2, r6, #1
   14ed0:	cmp	r2, #0
   14ed4:	beq	15054 <__assert_fail@plt+0x3b40>
   14ed8:	mov	sl, #2
   14edc:	b	14dac <__assert_fail@plt+0x3898>
   14ee0:	cmp	r7, #37	; 0x25
   14ee4:	beq	14fdc <__assert_fail@plt+0x3ac8>
   14ee8:	bhi	14efc <__assert_fail@plt+0x39e8>
   14eec:	cmp	r7, #35	; 0x23
   14ef0:	beq	15028 <__assert_fail@plt+0x3b14>
   14ef4:	mov	r5, #0
   14ef8:	b	15038 <__assert_fail@plt+0x3b24>
   14efc:	cmp	r7, #39	; 0x27
   14f00:	bne	14ef4 <__assert_fail@plt+0x39e0>
   14f04:	cmp	sl, #2
   14f08:	ldrne	r5, [sp, #52]	; 0x34
   14f0c:	movne	r3, r5
   14f10:	strne	r3, [sp, #68]	; 0x44
   14f14:	bne	14fe0 <__assert_fail@plt+0x3acc>
   14f18:	cmp	r6, #0
   14f1c:	bne	14dac <__assert_fail@plt+0x3898>
   14f20:	ldr	r2, [sp, #60]	; 0x3c
   14f24:	adds	r3, r9, #0
   14f28:	movne	r3, #1
   14f2c:	cmp	r2, #0
   14f30:	movne	r3, #0
   14f34:	cmp	r3, #0
   14f38:	strne	r9, [sp, #60]	; 0x3c
   14f3c:	movne	r9, #0
   14f40:	bne	14f50 <__assert_fail@plt+0x3a3c>
   14f44:	cmp	r9, r4
   14f48:	movhi	r3, #39	; 0x27
   14f4c:	strbhi	r3, [r8, r4]
   14f50:	add	r3, r4, #1
   14f54:	cmp	r3, r9
   14f58:	movcc	r2, #92	; 0x5c
   14f5c:	strbcc	r2, [r8, r3]
   14f60:	add	r3, r4, #2
   14f64:	cmp	r3, r9
   14f68:	ldr	r5, [sp, #52]	; 0x34
   14f6c:	movcc	r2, #39	; 0x27
   14f70:	strbcc	r2, [r8, r3]
   14f74:	add	r4, r4, #3
   14f78:	mov	fp, r6
   14f7c:	str	r5, [sp, #68]	; 0x44
   14f80:	str	r6, [sp, #48]	; 0x30
   14f84:	b	15220 <__assert_fail@plt+0x3d0c>
   14f88:	cmp	r7, #94	; 0x5e
   14f8c:	beq	14ef4 <__assert_fail@plt+0x39e0>
   14f90:	bhi	14fe8 <__assert_fail@plt+0x3ad4>
   14f94:	cmp	r7, #90	; 0x5a
   14f98:	bhi	14fd0 <__assert_fail@plt+0x3abc>
   14f9c:	cmp	r7, #65	; 0x41
   14fa0:	bcs	14fdc <__assert_fail@plt+0x3ac8>
   14fa4:	cmp	r7, #62	; 0x3e
   14fa8:	bls	14ef4 <__assert_fail@plt+0x39e0>
   14fac:	cmp	r7, #63	; 0x3f
   14fb0:	bne	14e58 <__assert_fail@plt+0x3944>
   14fb4:	cmp	sl, #2
   14fb8:	beq	1515c <__assert_fail@plt+0x3c48>
   14fbc:	cmp	sl, #5
   14fc0:	beq	1516c <__assert_fail@plt+0x3c58>
   14fc4:	mov	fp, #0
   14fc8:	mov	r5, fp
   14fcc:	b	15220 <__assert_fail@plt+0x3d0c>
   14fd0:	cmp	r7, #92	; 0x5c
   14fd4:	beq	152f8 <__assert_fail@plt+0x3de4>
   14fd8:	bls	14ef4 <__assert_fail@plt+0x39e0>
   14fdc:	ldr	r5, [sp, #52]	; 0x34
   14fe0:	mov	fp, #0
   14fe4:	b	15220 <__assert_fail@plt+0x3d0c>
   14fe8:	cmp	r7, #122	; 0x7a
   14fec:	bhi	1500c <__assert_fail@plt+0x3af8>
   14ff0:	cmp	r7, #97	; 0x61
   14ff4:	bcs	14fdc <__assert_fail@plt+0x3ac8>
   14ff8:	cmp	r7, #95	; 0x5f
   14ffc:	beq	14fdc <__assert_fail@plt+0x3ac8>
   15000:	cmp	r7, #96	; 0x60
   15004:	bne	14e58 <__assert_fail@plt+0x3944>
   15008:	b	14ef4 <__assert_fail@plt+0x39e0>
   1500c:	cmp	r7, #124	; 0x7c
   15010:	beq	14ef4 <__assert_fail@plt+0x39e0>
   15014:	bcc	153a4 <__assert_fail@plt+0x3e90>
   15018:	cmp	r7, #125	; 0x7d
   1501c:	beq	153a4 <__assert_fail@plt+0x3e90>
   15020:	cmp	r7, #126	; 0x7e
   15024:	bne	14e58 <__assert_fail@plt+0x3944>
   15028:	ldr	r3, [sp, #28]
   1502c:	cmp	r3, #0
   15030:	bne	15164 <__assert_fail@plt+0x3c50>
   15034:	ldr	r5, [sp, #52]	; 0x34
   15038:	cmp	sl, #2
   1503c:	movne	fp, #0
   15040:	andeq	fp, r6, #1
   15044:	cmp	fp, #0
   15048:	beq	15220 <__assert_fail@plt+0x3d0c>
   1504c:	b	14ed8 <__assert_fail@plt+0x39c4>
   15050:	mov	r3, #98	; 0x62
   15054:	ldr	r2, [sp, #24]
   15058:	cmp	r2, #0
   1505c:	beq	15164 <__assert_fail@plt+0x3c50>
   15060:	mov	r7, r3
   15064:	mov	r5, #0
   15068:	b	15278 <__assert_fail@plt+0x3d64>
   1506c:	ldr	r3, [sp, #24]
   15070:	cmp	r3, #0
   15074:	beq	15140 <__assert_fail@plt+0x3c2c>
   15078:	cmp	r6, #0
   1507c:	bne	14da8 <__assert_fail@plt+0x3894>
   15080:	ldr	r3, [sp, #48]	; 0x30
   15084:	eor	r2, r3, #1
   15088:	cmp	sl, #2
   1508c:	movne	r2, #0
   15090:	andeq	r2, r2, #1
   15094:	cmp	r2, #0
   15098:	moveq	r3, r4
   1509c:	beq	150d4 <__assert_fail@plt+0x3bc0>
   150a0:	cmp	r9, r4
   150a4:	movhi	r3, #39	; 0x27
   150a8:	strbhi	r3, [r8, r4]
   150ac:	add	r3, r4, #1
   150b0:	cmp	r9, r3
   150b4:	movhi	r1, #36	; 0x24
   150b8:	strbhi	r1, [r8, r3]
   150bc:	add	r3, r4, #2
   150c0:	cmp	r9, r3
   150c4:	movhi	r1, #39	; 0x27
   150c8:	strbhi	r1, [r8, r3]
   150cc:	add	r3, r4, #3
   150d0:	str	r2, [sp, #48]	; 0x30
   150d4:	cmp	r9, r3
   150d8:	movhi	r2, #92	; 0x5c
   150dc:	strbhi	r2, [r8, r3]
   150e0:	cmp	fp, #0
   150e4:	add	r4, r3, #1
   150e8:	beq	15678 <__assert_fail@plt+0x4164>
   150ec:	ldr	r2, [sp, #28]
   150f0:	ldr	r1, [sp, #36]	; 0x24
   150f4:	add	r2, r2, #1
   150f8:	cmp	r1, r2
   150fc:	bls	15138 <__assert_fail@plt+0x3c24>
   15100:	ldr	r1, [sp, #44]	; 0x2c
   15104:	mov	r7, #48	; 0x30
   15108:	ldrb	r2, [r1, r2]
   1510c:	sub	r2, r2, #48	; 0x30
   15110:	cmp	r2, #9
   15114:	movhi	r5, r6
   15118:	bhi	15220 <__assert_fail@plt+0x3d0c>
   1511c:	cmp	r9, r4
   15120:	add	r2, r3, #2
   15124:	strbhi	r7, [r8, r4]
   15128:	cmp	r9, r2
   1512c:	add	r4, r3, #3
   15130:	movhi	r1, #48	; 0x30
   15134:	strbhi	r1, [r8, r2]
   15138:	mov	r5, r6
   1513c:	b	15680 <__assert_fail@plt+0x416c>
   15140:	ldr	r3, [sp, #148]	; 0x94
   15144:	tst	r3, #1
   15148:	ldreq	r5, [sp, #24]
   1514c:	beq	1568c <__assert_fail@plt+0x4178>
   15150:	ldr	r3, [sp, #28]
   15154:	add	r3, r3, #1
   15158:	b	14af8 <__assert_fail@plt+0x35e4>
   1515c:	cmp	r6, #0
   15160:	bne	14dac <__assert_fail@plt+0x3898>
   15164:	mov	r5, #0
   15168:	b	14fe0 <__assert_fail@plt+0x3acc>
   1516c:	ldr	r3, [sp, #148]	; 0x94
   15170:	tst	r3, #4
   15174:	beq	15164 <__assert_fail@plt+0x3c50>
   15178:	ldr	r3, [sp, #28]
   1517c:	add	r2, r3, #2
   15180:	ldr	r3, [sp, #36]	; 0x24
   15184:	cmp	r3, r2
   15188:	bls	15164 <__assert_fail@plt+0x3c50>
   1518c:	ldr	r3, [sp, #44]	; 0x2c
   15190:	ldr	r1, [sp, #28]
   15194:	add	r3, r3, r1
   15198:	ldrb	r0, [r3, #1]
   1519c:	cmp	r0, #63	; 0x3f
   151a0:	bne	15164 <__assert_fail@plt+0x3c50>
   151a4:	ldr	r3, [sp, #44]	; 0x2c
   151a8:	ldrb	r1, [r3, r2]
   151ac:	sub	r3, r1, #33	; 0x21
   151b0:	uxtb	r3, r3
   151b4:	cmp	r3, #29
   151b8:	bhi	15688 <__assert_fail@plt+0x4174>
   151bc:	mov	ip, #1
   151c0:	ldr	r5, [pc, #1428]	; 1575c <__assert_fail@plt+0x4248>
   151c4:	ands	r5, r5, ip, lsl r3
   151c8:	beq	14fe0 <__assert_fail@plt+0x3acc>
   151cc:	cmp	r6, #0
   151d0:	bne	14dac <__assert_fail@plt+0x3898>
   151d4:	add	r3, r4, #1
   151d8:	cmp	r9, r4
   151dc:	strbhi	r0, [r8, r4]
   151e0:	cmp	r9, r3
   151e4:	movhi	r0, #34	; 0x22
   151e8:	strbhi	r0, [r8, r3]
   151ec:	add	r3, r4, #2
   151f0:	cmp	r9, r3
   151f4:	movhi	r0, #34	; 0x22
   151f8:	strbhi	r0, [r8, r3]
   151fc:	add	r3, r4, #3
   15200:	cmp	r9, r3
   15204:	add	r4, r4, #4
   15208:	mov	r5, r6
   1520c:	mov	fp, r6
   15210:	mov	r7, r1
   15214:	movhi	r0, #63	; 0x3f
   15218:	strbhi	r0, [r8, r3]
   1521c:	str	r2, [sp, #28]
   15220:	ldr	r3, [sp, #24]
   15224:	eor	r3, r3, #1
   15228:	cmp	sl, #2
   1522c:	orreq	r3, r3, #1
   15230:	eor	r3, r3, #1
   15234:	orr	r3, r6, r3
   15238:	tst	r3, #255	; 0xff
   1523c:	beq	1526c <__assert_fail@plt+0x3d58>
   15240:	ldr	r3, [sp, #152]	; 0x98
   15244:	cmp	r3, #0
   15248:	beq	1526c <__assert_fail@plt+0x3d58>
   1524c:	lsr	r2, r7, #5
   15250:	ldr	r1, [sp, #152]	; 0x98
   15254:	uxtb	r2, r2
   15258:	and	r3, r7, #31
   1525c:	ldr	r2, [r1, r2, lsl #2]
   15260:	lsr	r3, r2, r3
   15264:	tst	r3, #1
   15268:	bne	15278 <__assert_fail@plt+0x3d64>
   1526c:	ldr	r3, [sp, #64]	; 0x40
   15270:	cmp	r3, #0
   15274:	beq	15310 <__assert_fail@plt+0x3dfc>
   15278:	cmp	r6, #0
   1527c:	bne	14dac <__assert_fail@plt+0x3898>
   15280:	ldr	r3, [sp, #48]	; 0x30
   15284:	eor	r3, r3, #1
   15288:	cmp	sl, #2
   1528c:	movne	r3, #0
   15290:	andeq	r3, r3, #1
   15294:	cmp	r3, #0
   15298:	beq	152d0 <__assert_fail@plt+0x3dbc>
   1529c:	cmp	r9, r4
   152a0:	movhi	r2, #39	; 0x27
   152a4:	strbhi	r2, [r8, r4]
   152a8:	add	r2, r4, #1
   152ac:	cmp	r9, r2
   152b0:	movhi	r1, #36	; 0x24
   152b4:	strbhi	r1, [r8, r2]
   152b8:	add	r2, r4, #2
   152bc:	cmp	r9, r2
   152c0:	add	r4, r4, #3
   152c4:	movhi	r1, #39	; 0x27
   152c8:	strbhi	r1, [r8, r2]
   152cc:	str	r3, [sp, #48]	; 0x30
   152d0:	cmp	r9, r4
   152d4:	movhi	r3, #92	; 0x5c
   152d8:	strbhi	r3, [r8, r4]
   152dc:	ldr	fp, [sp, #52]	; 0x34
   152e0:	add	r4, r4, #1
   152e4:	b	15310 <__assert_fail@plt+0x3dfc>
   152e8:	mov	r3, #116	; 0x74
   152ec:	b	14ec4 <__assert_fail@plt+0x39b0>
   152f0:	mov	r3, #118	; 0x76
   152f4:	b	15054 <__assert_fail@plt+0x3b40>
   152f8:	cmp	sl, #2
   152fc:	bne	1536c <__assert_fail@plt+0x3e58>
   15300:	cmp	r6, #0
   15304:	bne	14dac <__assert_fail@plt+0x3898>
   15308:	mov	r5, r6
   1530c:	mov	fp, r6
   15310:	ldr	r3, [sp, #48]	; 0x30
   15314:	eor	fp, fp, #1
   15318:	and	fp, fp, r3
   1531c:	tst	fp, #255	; 0xff
   15320:	beq	1534c <__assert_fail@plt+0x3e38>
   15324:	cmp	r9, r4
   15328:	movhi	r3, #39	; 0x27
   1532c:	strbhi	r3, [r8, r4]
   15330:	add	r3, r4, #1
   15334:	cmp	r9, r3
   15338:	movhi	r2, #39	; 0x27
   1533c:	add	r4, r4, #2
   15340:	strbhi	r2, [r8, r3]
   15344:	mov	r3, #0
   15348:	str	r3, [sp, #48]	; 0x30
   1534c:	cmp	r9, r4
   15350:	strbhi	r7, [r8, r4]
   15354:	ldr	r3, [sp, #72]	; 0x48
   15358:	cmp	r5, #0
   1535c:	moveq	r3, #0
   15360:	add	r4, r4, #1
   15364:	str	r3, [sp, #72]	; 0x48
   15368:	b	15150 <__assert_fail@plt+0x3c3c>
   1536c:	ldr	r3, [sp, #24]
   15370:	and	r3, r3, r6
   15374:	tst	r5, r3
   15378:	moveq	r3, r7
   1537c:	beq	14ec4 <__assert_fail@plt+0x39b0>
   15380:	mov	fp, #0
   15384:	mov	r5, fp
   15388:	b	15310 <__assert_fail@plt+0x3dfc>
   1538c:	mov	r3, #110	; 0x6e
   15390:	b	14ec4 <__assert_fail@plt+0x39b0>
   15394:	mov	r3, #97	; 0x61
   15398:	b	15054 <__assert_fail@plt+0x3b40>
   1539c:	mov	r3, #102	; 0x66
   153a0:	b	15054 <__assert_fail@plt+0x3b40>
   153a4:	ldr	r3, [sp, #36]	; 0x24
   153a8:	cmn	r3, #1
   153ac:	bne	153cc <__assert_fail@plt+0x3eb8>
   153b0:	ldr	r3, [sp, #44]	; 0x2c
   153b4:	ldrb	r3, [r3, #1]
   153b8:	adds	r3, r3, #0
   153bc:	movne	r3, #1
   153c0:	cmp	r3, #0
   153c4:	bne	15164 <__assert_fail@plt+0x3c50>
   153c8:	b	15028 <__assert_fail@plt+0x3b14>
   153cc:	ldr	r3, [sp, #36]	; 0x24
   153d0:	subs	r3, r3, #1
   153d4:	b	153bc <__assert_fail@plt+0x3ea8>
   153d8:	mov	r3, #0
   153dc:	str	r3, [sp, #96]	; 0x60
   153e0:	str	r3, [sp, #100]	; 0x64
   153e4:	ldr	r3, [sp, #36]	; 0x24
   153e8:	cmn	r3, #1
   153ec:	bne	153fc <__assert_fail@plt+0x3ee8>
   153f0:	ldr	r0, [sp, #44]	; 0x2c
   153f4:	bl	11370 <strlen@plt>
   153f8:	str	r0, [sp, #36]	; 0x24
   153fc:	ldr	r5, [sp, #52]	; 0x34
   15400:	mov	r3, #0
   15404:	str	r3, [sp, #56]	; 0x38
   15408:	ldr	r3, [sp, #28]
   1540c:	ldr	r2, [sp, #56]	; 0x38
   15410:	ldr	r1, [sp, #36]	; 0x24
   15414:	add	r2, r3, r2
   15418:	ldr	r3, [sp, #44]	; 0x2c
   1541c:	add	r0, sp, #92	; 0x5c
   15420:	add	fp, r3, r2
   15424:	sub	r2, r1, r2
   15428:	add	r3, sp, #96	; 0x60
   1542c:	mov	r1, fp
   15430:	bl	17288 <__assert_fail@plt+0x5d74>
   15434:	subs	r2, r0, #0
   15438:	beq	15478 <__assert_fail@plt+0x3f64>
   1543c:	cmn	r2, #1
   15440:	beq	15650 <__assert_fail@plt+0x413c>
   15444:	cmn	r2, #2
   15448:	bne	155c0 <__assert_fail@plt+0x40ac>
   1544c:	ldr	r2, [sp, #56]	; 0x38
   15450:	ldr	r3, [sp, #28]
   15454:	add	r3, r3, r2
   15458:	ldr	r2, [sp, #36]	; 0x24
   1545c:	cmp	r2, r3
   15460:	bls	15650 <__assert_fail@plt+0x413c>
   15464:	ldr	r3, [sp, #80]	; 0x50
   15468:	ldr	r2, [sp, #56]	; 0x38
   1546c:	ldrb	r5, [r3, r2]
   15470:	cmp	r5, #0
   15474:	bne	155b0 <__assert_fail@plt+0x409c>
   15478:	ldr	r3, [sp, #56]	; 0x38
   1547c:	cmp	r3, #1
   15480:	bls	14e88 <__assert_fail@plt+0x3974>
   15484:	ldr	r2, [sp, #56]	; 0x38
   15488:	ldr	r3, [sp, #28]
   1548c:	mov	fp, #0
   15490:	add	r3, r3, r2
   15494:	ldr	r2, [sp, #24]
   15498:	str	r3, [sp, #52]	; 0x34
   1549c:	eor	r3, r5, #1
   154a0:	and	r3, r3, r2
   154a4:	mov	ip, #92	; 0x5c
   154a8:	uxtb	r3, r3
   154ac:	mov	r2, #39	; 0x27
   154b0:	cmp	r3, #0
   154b4:	beq	15658 <__assert_fail@plt+0x4144>
   154b8:	cmp	r6, #0
   154bc:	bne	14da8 <__assert_fail@plt+0x3894>
   154c0:	ldr	r1, [sp, #48]	; 0x30
   154c4:	eor	r1, r1, #1
   154c8:	cmp	sl, #2
   154cc:	movne	r1, #0
   154d0:	andeq	r1, r1, #1
   154d4:	cmp	r1, #0
   154d8:	beq	15508 <__assert_fail@plt+0x3ff4>
   154dc:	add	r0, r4, #1
   154e0:	cmp	r9, r4
   154e4:	strbhi	r2, [r8, r4]
   154e8:	cmp	r9, r0
   154ec:	movhi	lr, #36	; 0x24
   154f0:	strbhi	lr, [r8, r0]
   154f4:	add	r0, r4, #2
   154f8:	add	r4, r4, #3
   154fc:	cmp	r9, r0
   15500:	strbhi	r2, [r8, r0]
   15504:	str	r1, [sp, #48]	; 0x30
   15508:	add	r0, r4, #1
   1550c:	cmp	r9, r4
   15510:	strbhi	ip, [r8, r4]
   15514:	cmp	r9, r0
   15518:	lsrhi	r1, r7, #6
   1551c:	addhi	r1, r1, #48	; 0x30
   15520:	strbhi	r1, [r8, r0]
   15524:	add	r0, r4, #2
   15528:	cmp	r9, r0
   1552c:	lsrhi	r1, r7, #3
   15530:	and	r7, r7, #7
   15534:	andhi	r1, r1, #7
   15538:	add	r4, r4, #3
   1553c:	add	r7, r7, #48	; 0x30
   15540:	mov	fp, r3
   15544:	addhi	r1, r1, #48	; 0x30
   15548:	strbhi	r1, [r8, r0]
   1554c:	ldr	r1, [sp, #28]
   15550:	ldr	r0, [sp, #52]	; 0x34
   15554:	add	r1, r1, #1
   15558:	cmp	r0, r1
   1555c:	bls	15310 <__assert_fail@plt+0x3dfc>
   15560:	ldr	lr, [sp, #48]	; 0x30
   15564:	eor	r0, fp, #1
   15568:	and	r0, r0, lr
   1556c:	tst	r0, #255	; 0xff
   15570:	beq	15594 <__assert_fail@plt+0x4080>
   15574:	add	r0, r4, #1
   15578:	cmp	r9, r4
   1557c:	strbhi	r2, [r8, r4]
   15580:	cmp	r9, r0
   15584:	add	r4, r4, #2
   15588:	strbhi	r2, [r8, r0]
   1558c:	mov	r0, #0
   15590:	str	r0, [sp, #48]	; 0x30
   15594:	ldr	r0, [sp, #44]	; 0x2c
   15598:	cmp	r9, r4
   1559c:	strbhi	r7, [r8, r4]
   155a0:	str	r1, [sp, #28]
   155a4:	add	r4, r4, #1
   155a8:	ldrb	r7, [r0, r1]
   155ac:	b	154b0 <__assert_fail@plt+0x3f9c>
   155b0:	ldr	r3, [sp, #56]	; 0x38
   155b4:	add	r3, r3, #1
   155b8:	str	r3, [sp, #56]	; 0x38
   155bc:	b	1544c <__assert_fail@plt+0x3f38>
   155c0:	cmp	sl, #2
   155c4:	movne	r3, #0
   155c8:	andeq	r3, r6, #1
   155cc:	cmp	r3, #0
   155d0:	movne	r1, #1
   155d4:	bne	15630 <__assert_fail@plt+0x411c>
   155d8:	ldr	r0, [sp, #92]	; 0x5c
   155dc:	str	r2, [sp, #84]	; 0x54
   155e0:	bl	11274 <iswprint@plt>
   155e4:	ldr	r3, [sp, #56]	; 0x38
   155e8:	ldr	r2, [sp, #84]	; 0x54
   155ec:	add	r3, r3, r2
   155f0:	str	r3, [sp, #56]	; 0x38
   155f4:	cmp	r0, #0
   155f8:	add	r0, sp, #96	; 0x60
   155fc:	moveq	r5, #0
   15600:	bl	111fc <mbsinit@plt>
   15604:	cmp	r0, #0
   15608:	beq	15408 <__assert_fail@plt+0x3ef4>
   1560c:	b	15478 <__assert_fail@plt+0x3f64>
   15610:	ldrb	r3, [fp, r1]
   15614:	cmp	r3, #94	; 0x5e
   15618:	beq	14ed8 <__assert_fail@plt+0x39c4>
   1561c:	bhi	1563c <__assert_fail@plt+0x4128>
   15620:	sub	r3, r3, #91	; 0x5b
   15624:	cmp	r3, #1
   15628:	bls	14ed8 <__assert_fail@plt+0x39c4>
   1562c:	add	r1, r1, #1
   15630:	cmp	r1, r2
   15634:	bne	15610 <__assert_fail@plt+0x40fc>
   15638:	b	155d8 <__assert_fail@plt+0x40c4>
   1563c:	cmp	r3, #96	; 0x60
   15640:	beq	14ed8 <__assert_fail@plt+0x39c4>
   15644:	cmp	r3, #124	; 0x7c
   15648:	bne	1562c <__assert_fail@plt+0x4118>
   1564c:	b	14ed8 <__assert_fail@plt+0x39c4>
   15650:	mov	r5, #0
   15654:	b	15478 <__assert_fail@plt+0x3f64>
   15658:	ldr	r1, [sp, #64]	; 0x40
   1565c:	cmp	r1, #0
   15660:	beq	1554c <__assert_fail@plt+0x4038>
   15664:	cmp	r9, r4
   15668:	strbhi	ip, [r8, r4]
   1566c:	str	r3, [sp, #64]	; 0x40
   15670:	add	r4, r4, #1
   15674:	b	1554c <__assert_fail@plt+0x4038>
   15678:	mov	r5, fp
   1567c:	ldr	fp, [sp, #24]
   15680:	mov	r7, #48	; 0x30
   15684:	b	15220 <__assert_fail@plt+0x3d0c>
   15688:	mov	r5, #0
   1568c:	mov	fp, r5
   15690:	b	15220 <__assert_fail@plt+0x3d0c>
   15694:	ldr	r3, [sp, #36]	; 0x24
   15698:	ldr	r2, [sp, #28]
   1569c:	subs	r3, r3, r2
   156a0:	movne	r3, #1
   156a4:	b	14b1c <__assert_fail@plt+0x3608>
   156a8:	ldr	r3, [sp, #60]	; 0x3c
   156ac:	clz	r7, r9
   156b0:	cmp	r3, #0
   156b4:	lsr	r7, r7, #5
   156b8:	moveq	r7, #0
   156bc:	cmp	r7, #0
   156c0:	mov	r5, r3
   156c4:	bne	14a7c <__assert_fail@plt+0x3568>
   156c8:	ldr	r3, [sp, #68]	; 0x44
   156cc:	ldr	r2, [sp, #40]	; 0x28
   156d0:	cmp	r2, #0
   156d4:	moveq	r3, #0
   156d8:	andne	r3, r3, #1
   156dc:	cmp	r3, #0
   156e0:	movne	r3, r2
   156e4:	subne	r2, r3, #1
   156e8:	bne	15718 <__assert_fail@plt+0x4204>
   156ec:	cmp	r9, r4
   156f0:	movhi	r3, #0
   156f4:	strbhi	r3, [r8, r4]
   156f8:	mov	r0, r4
   156fc:	add	sp, sp, #108	; 0x6c
   15700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15704:	mov	r3, r2
   15708:	b	156cc <__assert_fail@plt+0x41b8>
   1570c:	cmp	r9, r4
   15710:	strbhi	r3, [r8, r4]
   15714:	add	r4, r4, #1
   15718:	ldrb	r3, [r2, #1]!
   1571c:	cmp	r3, #0
   15720:	bne	1570c <__assert_fail@plt+0x41f8>
   15724:	b	156ec <__assert_fail@plt+0x41d8>
   15728:	ldr	r3, [pc, #32]	; 15750 <__assert_fail@plt+0x423c>
   1572c:	mov	r6, #1
   15730:	str	r6, [sp, #24]
   15734:	str	r6, [sp, #32]
   15738:	str	r3, [sp, #40]	; 0x28
   1573c:	mov	r4, #0
   15740:	mov	sl, #5
   15744:	b	14aec <__assert_fail@plt+0x35d8>
   15748:	mov	r6, #1
   1574c:	b	14ce0 <__assert_fail@plt+0x37cc>
   15750:	andeq	r7, r1, lr, lsl pc
   15754:	andeq	r8, r1, r9, ror #28
   15758:	andeq	r8, r1, r7, ror #28
   1575c:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   15760:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15764:	sub	sp, sp, #52	; 0x34
   15768:	mov	r6, r0
   1576c:	mov	r5, r3
   15770:	mov	r8, r1
   15774:	mov	r9, r2
   15778:	bl	113b8 <__errno_location@plt>
   1577c:	ldr	r7, [pc, #380]	; 15900 <__assert_fail@plt+0x43ec>
   15780:	cmn	r6, #-2147483647	; 0x80000001
   15784:	ldr	r4, [r7]
   15788:	ldr	r3, [r0]
   1578c:	str	r0, [sp, #24]
   15790:	str	r3, [sp, #32]
   15794:	movne	r3, #0
   15798:	moveq	r3, #1
   1579c:	orrs	r3, r3, r6, lsr #31
   157a0:	beq	157a8 <__assert_fail@plt+0x4294>
   157a4:	bl	114f0 <abort@plt>
   157a8:	ldr	r2, [r7, #4]
   157ac:	cmp	r6, r2
   157b0:	blt	15820 <__assert_fail@plt+0x430c>
   157b4:	add	r1, sp, #48	; 0x30
   157b8:	add	sl, r7, #8
   157bc:	str	r2, [r1, #-4]!
   157c0:	cmp	r4, sl
   157c4:	mov	r3, #8
   157c8:	sub	r2, r6, r2
   157cc:	movne	r0, r4
   157d0:	str	r3, [sp]
   157d4:	add	r2, r2, #1
   157d8:	mvn	r3, #-2147483648	; 0x80000000
   157dc:	moveq	r0, #0
   157e0:	bl	16864 <__assert_fail@plt+0x5350>
   157e4:	cmp	r4, sl
   157e8:	ldr	r2, [sp, #44]	; 0x2c
   157ec:	mov	fp, r0
   157f0:	str	r0, [r7]
   157f4:	ldmeq	r4, {r0, r1}
   157f8:	mov	r4, fp
   157fc:	stmeq	fp, {r0, r1}
   15800:	ldr	r0, [r7, #4]
   15804:	mov	r1, #0
   15808:	sub	r2, r2, r0
   1580c:	add	r0, fp, r0, lsl #3
   15810:	lsl	r2, r2, #3
   15814:	bl	113dc <memset@plt>
   15818:	ldr	r3, [sp, #44]	; 0x2c
   1581c:	str	r3, [r7, #4]
   15820:	ldr	r3, [r5, #4]
   15824:	add	sl, r4, r6, lsl #3
   15828:	orr	r3, r3, #1
   1582c:	str	r3, [sp, #28]
   15830:	add	r3, r5, #8
   15834:	str	r3, [sp, #36]	; 0x24
   15838:	ldr	r3, [r5, #44]	; 0x2c
   1583c:	ldr	fp, [r4, r6, lsl #3]
   15840:	ldr	r7, [sl, #4]
   15844:	str	r3, [sp, #16]
   15848:	ldr	r3, [r5, #40]	; 0x28
   1584c:	mov	r2, r8
   15850:	str	r3, [sp, #12]
   15854:	add	r3, r5, #8
   15858:	str	r3, [sp, #8]
   1585c:	ldr	r3, [sp, #28]
   15860:	mov	r1, fp
   15864:	str	r3, [sp, #4]
   15868:	ldr	r3, [r5]
   1586c:	mov	r0, r7
   15870:	str	r3, [sp]
   15874:	mov	r3, r9
   15878:	bl	14a2c <__assert_fail@plt+0x3518>
   1587c:	cmp	fp, r0
   15880:	bhi	158e8 <__assert_fail@plt+0x43d4>
   15884:	ldr	r3, [pc, #120]	; 15904 <__assert_fail@plt+0x43f0>
   15888:	add	fp, r0, #1
   1588c:	cmp	r7, r3
   15890:	str	fp, [r4, r6, lsl #3]
   15894:	beq	158a0 <__assert_fail@plt+0x438c>
   15898:	mov	r0, r7
   1589c:	bl	1468c <__assert_fail@plt+0x3178>
   158a0:	mov	r0, fp
   158a4:	bl	1671c <__assert_fail@plt+0x5208>
   158a8:	ldr	r3, [r5, #44]	; 0x2c
   158ac:	mov	r2, r8
   158b0:	mov	r1, fp
   158b4:	str	r0, [sl, #4]
   158b8:	str	r3, [sp, #16]
   158bc:	ldr	r3, [r5, #40]	; 0x28
   158c0:	mov	r7, r0
   158c4:	str	r3, [sp, #12]
   158c8:	add	r3, r5, #8
   158cc:	str	r3, [sp, #8]
   158d0:	ldr	r3, [sp, #28]
   158d4:	str	r3, [sp, #4]
   158d8:	ldr	r3, [r5]
   158dc:	str	r3, [sp]
   158e0:	mov	r3, r9
   158e4:	bl	14a2c <__assert_fail@plt+0x3518>
   158e8:	ldr	r3, [sp, #24]
   158ec:	ldr	r2, [sp, #32]
   158f0:	mov	r0, r7
   158f4:	str	r2, [r3]
   158f8:	add	sp, sp, #52	; 0x34
   158fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15900:	andeq	sl, r2, r0, ror r1
   15904:	andeq	sl, r2, r8, lsr r5
   15908:	push	{r4, r5, r6, lr}
   1590c:	mov	r5, r0
   15910:	bl	113b8 <__errno_location@plt>
   15914:	cmp	r5, #0
   15918:	mov	r1, #48	; 0x30
   1591c:	ldr	r6, [r0]
   15920:	mov	r4, r0
   15924:	ldr	r0, [pc, #12]	; 15938 <__assert_fail@plt+0x4424>
   15928:	movne	r0, r5
   1592c:	bl	16af8 <__assert_fail@plt+0x55e4>
   15930:	str	r6, [r4]
   15934:	pop	{r4, r5, r6, pc}
   15938:	andeq	sl, r2, r8, lsr r6
   1593c:	ldr	r3, [pc, #12]	; 15950 <__assert_fail@plt+0x443c>
   15940:	cmp	r0, #0
   15944:	moveq	r0, r3
   15948:	ldr	r0, [r0]
   1594c:	bx	lr
   15950:	andeq	sl, r2, r8, lsr r6
   15954:	ldr	r3, [pc, #12]	; 15968 <__assert_fail@plt+0x4454>
   15958:	cmp	r0, #0
   1595c:	moveq	r0, r3
   15960:	str	r1, [r0]
   15964:	bx	lr
   15968:	andeq	sl, r2, r8, lsr r6
   1596c:	ldr	r3, [pc, #52]	; 159a8 <__assert_fail@plt+0x4494>
   15970:	cmp	r0, #0
   15974:	moveq	r0, r3
   15978:	add	r3, r0, #8
   1597c:	push	{lr}		; (str lr, [sp, #-4]!)
   15980:	lsr	lr, r1, #5
   15984:	and	r1, r1, #31
   15988:	ldr	ip, [r3, lr, lsl #2]
   1598c:	lsr	r0, ip, r1
   15990:	eor	r2, r2, r0
   15994:	and	r2, r2, #1
   15998:	and	r0, r0, #1
   1599c:	eor	r1, ip, r2, lsl r1
   159a0:	str	r1, [r3, lr, lsl #2]
   159a4:	pop	{pc}		; (ldr pc, [sp], #4)
   159a8:	andeq	sl, r2, r8, lsr r6
   159ac:	ldr	r3, [pc, #16]	; 159c4 <__assert_fail@plt+0x44b0>
   159b0:	cmp	r0, #0
   159b4:	movne	r3, r0
   159b8:	ldr	r0, [r3, #4]
   159bc:	str	r1, [r3, #4]
   159c0:	bx	lr
   159c4:	andeq	sl, r2, r8, lsr r6
   159c8:	ldr	r3, [pc, #44]	; 159fc <__assert_fail@plt+0x44e8>
   159cc:	cmp	r0, #0
   159d0:	moveq	r0, r3
   159d4:	mov	r3, #10
   159d8:	cmp	r2, #0
   159dc:	cmpne	r1, #0
   159e0:	str	r3, [r0]
   159e4:	bne	159f0 <__assert_fail@plt+0x44dc>
   159e8:	push	{r4, lr}
   159ec:	bl	114f0 <abort@plt>
   159f0:	str	r1, [r0, #40]	; 0x28
   159f4:	str	r2, [r0, #44]	; 0x2c
   159f8:	bx	lr
   159fc:	andeq	sl, r2, r8, lsr r6
   15a00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a04:	sub	sp, sp, #24
   15a08:	mov	sl, r3
   15a0c:	ldr	r4, [sp, #56]	; 0x38
   15a10:	ldr	r3, [pc, #100]	; 15a7c <__assert_fail@plt+0x4568>
   15a14:	cmp	r4, #0
   15a18:	moveq	r4, r3
   15a1c:	mov	r7, r0
   15a20:	mov	r8, r1
   15a24:	mov	r9, r2
   15a28:	bl	113b8 <__errno_location@plt>
   15a2c:	ldr	r3, [r4, #44]	; 0x2c
   15a30:	mov	r2, r9
   15a34:	mov	r1, r8
   15a38:	ldr	r6, [r0]
   15a3c:	str	r3, [sp, #16]
   15a40:	ldr	r3, [r4, #40]	; 0x28
   15a44:	mov	r5, r0
   15a48:	str	r3, [sp, #12]
   15a4c:	add	r3, r4, #8
   15a50:	str	r3, [sp, #8]
   15a54:	ldr	r3, [r4, #4]
   15a58:	mov	r0, r7
   15a5c:	str	r3, [sp, #4]
   15a60:	ldr	r3, [r4]
   15a64:	str	r3, [sp]
   15a68:	mov	r3, sl
   15a6c:	bl	14a2c <__assert_fail@plt+0x3518>
   15a70:	str	r6, [r5]
   15a74:	add	sp, sp, #24
   15a78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a7c:	andeq	sl, r2, r8, lsr r6
   15a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a84:	cmp	r3, #0
   15a88:	sub	sp, sp, #44	; 0x2c
   15a8c:	ldr	r4, [pc, #188]	; 15b50 <__assert_fail@plt+0x463c>
   15a90:	mov	r6, r2
   15a94:	movne	r4, r3
   15a98:	mov	sl, r1
   15a9c:	mov	r9, r0
   15aa0:	bl	113b8 <__errno_location@plt>
   15aa4:	ldr	r5, [r4, #4]
   15aa8:	add	fp, r4, #8
   15aac:	cmp	r6, #0
   15ab0:	orreq	r5, r5, #1
   15ab4:	mov	r1, #0
   15ab8:	mov	r2, r9
   15abc:	ldr	r3, [r0]
   15ac0:	mov	r8, r0
   15ac4:	str	r3, [sp, #28]
   15ac8:	ldr	r3, [r4, #44]	; 0x2c
   15acc:	mov	r0, r1
   15ad0:	str	r3, [sp, #16]
   15ad4:	ldr	r3, [r4, #40]	; 0x28
   15ad8:	stmib	sp, {r5, fp}
   15adc:	str	r3, [sp, #12]
   15ae0:	ldr	r3, [r4]
   15ae4:	str	r3, [sp]
   15ae8:	mov	r3, sl
   15aec:	bl	14a2c <__assert_fail@plt+0x3518>
   15af0:	add	r1, r0, #1
   15af4:	mov	r7, r0
   15af8:	mov	r0, r1
   15afc:	str	r1, [sp, #36]	; 0x24
   15b00:	bl	1671c <__assert_fail@plt+0x5208>
   15b04:	ldr	r3, [r4, #44]	; 0x2c
   15b08:	mov	r2, r9
   15b0c:	str	r3, [sp, #16]
   15b10:	ldr	r3, [r4, #40]	; 0x28
   15b14:	stmib	sp, {r5, fp}
   15b18:	str	r3, [sp, #12]
   15b1c:	ldr	r3, [r4]
   15b20:	ldr	r1, [sp, #36]	; 0x24
   15b24:	str	r3, [sp]
   15b28:	mov	r3, sl
   15b2c:	str	r0, [sp, #32]
   15b30:	bl	14a2c <__assert_fail@plt+0x3518>
   15b34:	ldr	r3, [sp, #28]
   15b38:	cmp	r6, #0
   15b3c:	str	r3, [r8]
   15b40:	ldr	r0, [sp, #32]
   15b44:	strne	r7, [r6]
   15b48:	add	sp, sp, #44	; 0x2c
   15b4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b50:	andeq	sl, r2, r8, lsr r6
   15b54:	mov	r3, r2
   15b58:	mov	r2, #0
   15b5c:	b	15a80 <__assert_fail@plt+0x456c>
   15b60:	push	{r4, r5, r6, r7, r8, lr}
   15b64:	mov	r6, #1
   15b68:	ldr	r4, [pc, #104]	; 15bd8 <__assert_fail@plt+0x46c4>
   15b6c:	ldr	r5, [r4]
   15b70:	add	r7, r5, #12
   15b74:	ldr	r3, [r4, #4]
   15b78:	add	r7, r7, #8
   15b7c:	cmp	r6, r3
   15b80:	blt	15bc8 <__assert_fail@plt+0x46b4>
   15b84:	ldr	r0, [r5, #4]
   15b88:	ldr	r6, [pc, #76]	; 15bdc <__assert_fail@plt+0x46c8>
   15b8c:	cmp	r0, r6
   15b90:	beq	15ba4 <__assert_fail@plt+0x4690>
   15b94:	bl	1468c <__assert_fail@plt+0x3178>
   15b98:	mov	r3, #256	; 0x100
   15b9c:	str	r3, [r4, #8]
   15ba0:	str	r6, [r4, #12]
   15ba4:	ldr	r6, [pc, #52]	; 15be0 <__assert_fail@plt+0x46cc>
   15ba8:	cmp	r5, r6
   15bac:	beq	15bbc <__assert_fail@plt+0x46a8>
   15bb0:	mov	r0, r5
   15bb4:	bl	1468c <__assert_fail@plt+0x3178>
   15bb8:	str	r6, [r4]
   15bbc:	mov	r3, #1
   15bc0:	str	r3, [r4, #4]
   15bc4:	pop	{r4, r5, r6, r7, r8, pc}
   15bc8:	ldr	r0, [r7, #-8]
   15bcc:	bl	1468c <__assert_fail@plt+0x3178>
   15bd0:	add	r6, r6, #1
   15bd4:	b	15b74 <__assert_fail@plt+0x4660>
   15bd8:	andeq	sl, r2, r0, ror r1
   15bdc:	andeq	sl, r2, r8, lsr r5
   15be0:	andeq	sl, r2, r8, ror r1
   15be4:	ldr	r3, [pc, #4]	; 15bf0 <__assert_fail@plt+0x46dc>
   15be8:	mvn	r2, #0
   15bec:	b	15760 <__assert_fail@plt+0x424c>
   15bf0:	andeq	sl, r2, r8, lsr r6
   15bf4:	ldr	r3, [pc]	; 15bfc <__assert_fail@plt+0x46e8>
   15bf8:	b	15760 <__assert_fail@plt+0x424c>
   15bfc:	andeq	sl, r2, r8, lsr r6
   15c00:	mov	r1, r0
   15c04:	mov	r0, #0
   15c08:	b	15be4 <__assert_fail@plt+0x46d0>
   15c0c:	mov	r2, r1
   15c10:	mov	r1, r0
   15c14:	mov	r0, #0
   15c18:	b	15bf4 <__assert_fail@plt+0x46e0>
   15c1c:	push	{r4, r5, lr}
   15c20:	sub	sp, sp, #52	; 0x34
   15c24:	mov	r5, r2
   15c28:	mov	r4, r0
   15c2c:	mov	r0, sp
   15c30:	bl	148e8 <__assert_fail@plt+0x33d4>
   15c34:	mov	r3, sp
   15c38:	mvn	r2, #0
   15c3c:	mov	r1, r5
   15c40:	mov	r0, r4
   15c44:	bl	15760 <__assert_fail@plt+0x424c>
   15c48:	add	sp, sp, #52	; 0x34
   15c4c:	pop	{r4, r5, pc}
   15c50:	push	{r4, r5, r6, lr}
   15c54:	sub	sp, sp, #48	; 0x30
   15c58:	mov	r5, r2
   15c5c:	mov	r6, r3
   15c60:	mov	r4, r0
   15c64:	mov	r0, sp
   15c68:	bl	148e8 <__assert_fail@plt+0x33d4>
   15c6c:	mov	r3, sp
   15c70:	mov	r2, r6
   15c74:	mov	r1, r5
   15c78:	mov	r0, r4
   15c7c:	bl	15760 <__assert_fail@plt+0x424c>
   15c80:	add	sp, sp, #48	; 0x30
   15c84:	pop	{r4, r5, r6, pc}
   15c88:	mov	r2, r1
   15c8c:	mov	r1, r0
   15c90:	mov	r0, #0
   15c94:	b	15c1c <__assert_fail@plt+0x4708>
   15c98:	mov	r3, r2
   15c9c:	mov	r2, r1
   15ca0:	mov	r1, r0
   15ca4:	mov	r0, #0
   15ca8:	b	15c50 <__assert_fail@plt+0x473c>
   15cac:	push	{r4, r5, r6, lr}
   15cb0:	mov	r4, r0
   15cb4:	ldr	lr, [pc, #80]	; 15d0c <__assert_fail@plt+0x47f8>
   15cb8:	mov	r5, r1
   15cbc:	mov	r6, r2
   15cc0:	ldm	lr!, {r0, r1, r2, r3}
   15cc4:	sub	sp, sp, #48	; 0x30
   15cc8:	mov	ip, sp
   15ccc:	stmia	ip!, {r0, r1, r2, r3}
   15cd0:	ldm	lr!, {r0, r1, r2, r3}
   15cd4:	stmia	ip!, {r0, r1, r2, r3}
   15cd8:	ldm	lr, {r0, r1, r2, r3}
   15cdc:	stm	ip, {r0, r1, r2, r3}
   15ce0:	mov	r1, r6
   15ce4:	mov	r2, #1
   15ce8:	mov	r0, sp
   15cec:	bl	1596c <__assert_fail@plt+0x4458>
   15cf0:	mov	r3, sp
   15cf4:	mov	r2, r5
   15cf8:	mov	r1, r4
   15cfc:	mov	r0, #0
   15d00:	bl	15760 <__assert_fail@plt+0x424c>
   15d04:	add	sp, sp, #48	; 0x30
   15d08:	pop	{r4, r5, r6, pc}
   15d0c:	andeq	sl, r2, r8, lsr r6
   15d10:	mov	r2, r1
   15d14:	mvn	r1, #0
   15d18:	b	15cac <__assert_fail@plt+0x4798>
   15d1c:	mov	r1, #58	; 0x3a
   15d20:	b	15d10 <__assert_fail@plt+0x47fc>
   15d24:	mov	r2, #58	; 0x3a
   15d28:	b	15cac <__assert_fail@plt+0x4798>
   15d2c:	push	{r4, r5, lr}
   15d30:	sub	sp, sp, #100	; 0x64
   15d34:	mov	r4, r0
   15d38:	mov	r0, sp
   15d3c:	mov	r5, r2
   15d40:	bl	148e8 <__assert_fail@plt+0x33d4>
   15d44:	mov	ip, sp
   15d48:	add	lr, sp, #48	; 0x30
   15d4c:	ldm	ip!, {r0, r1, r2, r3}
   15d50:	stmia	lr!, {r0, r1, r2, r3}
   15d54:	ldm	ip!, {r0, r1, r2, r3}
   15d58:	stmia	lr!, {r0, r1, r2, r3}
   15d5c:	ldm	ip, {r0, r1, r2, r3}
   15d60:	stm	lr, {r0, r1, r2, r3}
   15d64:	mov	r2, #1
   15d68:	mov	r1, #58	; 0x3a
   15d6c:	add	r0, sp, #48	; 0x30
   15d70:	bl	1596c <__assert_fail@plt+0x4458>
   15d74:	add	r3, sp, #48	; 0x30
   15d78:	mvn	r2, #0
   15d7c:	mov	r1, r5
   15d80:	mov	r0, r4
   15d84:	bl	15760 <__assert_fail@plt+0x424c>
   15d88:	add	sp, sp, #100	; 0x64
   15d8c:	pop	{r4, r5, pc}
   15d90:	push	{r4, r5, r6, r7, lr}
   15d94:	mov	r4, r0
   15d98:	ldr	lr, [pc, #84]	; 15df4 <__assert_fail@plt+0x48e0>
   15d9c:	mov	r6, r1
   15da0:	mov	r7, r2
   15da4:	mov	r5, r3
   15da8:	ldm	lr!, {r0, r1, r2, r3}
   15dac:	sub	sp, sp, #52	; 0x34
   15db0:	mov	ip, sp
   15db4:	stmia	ip!, {r0, r1, r2, r3}
   15db8:	ldm	lr!, {r0, r1, r2, r3}
   15dbc:	stmia	ip!, {r0, r1, r2, r3}
   15dc0:	ldm	lr, {r0, r1, r2, r3}
   15dc4:	stm	ip, {r0, r1, r2, r3}
   15dc8:	mov	r2, r7
   15dcc:	mov	r1, r6
   15dd0:	mov	r0, sp
   15dd4:	bl	159c8 <__assert_fail@plt+0x44b4>
   15dd8:	mov	r3, sp
   15ddc:	ldr	r2, [sp, #72]	; 0x48
   15de0:	mov	r1, r5
   15de4:	mov	r0, r4
   15de8:	bl	15760 <__assert_fail@plt+0x424c>
   15dec:	add	sp, sp, #52	; 0x34
   15df0:	pop	{r4, r5, r6, r7, pc}
   15df4:	andeq	sl, r2, r8, lsr r6
   15df8:	mvn	ip, #0
   15dfc:	push	{r0, r1, r2, lr}
   15e00:	str	ip, [sp]
   15e04:	bl	15d90 <__assert_fail@plt+0x487c>
   15e08:	add	sp, sp, #12
   15e0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e10:	mov	r3, r2
   15e14:	mov	r2, r1
   15e18:	mov	r1, r0
   15e1c:	mov	r0, #0
   15e20:	b	15df8 <__assert_fail@plt+0x48e4>
   15e24:	push	{r0, r1, r2, lr}
   15e28:	str	r3, [sp]
   15e2c:	mov	r3, r2
   15e30:	mov	r2, r1
   15e34:	mov	r1, r0
   15e38:	mov	r0, #0
   15e3c:	bl	15d90 <__assert_fail@plt+0x487c>
   15e40:	add	sp, sp, #12
   15e44:	pop	{pc}		; (ldr pc, [sp], #4)
   15e48:	ldr	r3, [pc]	; 15e50 <__assert_fail@plt+0x493c>
   15e4c:	b	15760 <__assert_fail@plt+0x424c>
   15e50:	andeq	sl, r2, r0, lsl #3
   15e54:	mov	r2, r1
   15e58:	mov	r1, r0
   15e5c:	mov	r0, #0
   15e60:	b	15e48 <__assert_fail@plt+0x4934>
   15e64:	mvn	r2, #0
   15e68:	b	15e48 <__assert_fail@plt+0x4934>
   15e6c:	mov	r1, r0
   15e70:	mov	r0, #0
   15e74:	b	15e64 <__assert_fail@plt+0x4950>
   15e78:	push	{r4, r5, r6, r7, r8, lr}
   15e7c:	mov	r7, r0
   15e80:	ldr	r5, [pc, #88]	; 15ee0 <__assert_fail@plt+0x49cc>
   15e84:	mov	r8, r1
   15e88:	mov	r4, r2
   15e8c:	mov	r2, r4
   15e90:	mov	r1, r8
   15e94:	mov	r0, r7
   15e98:	bl	111a8 <read@plt>
   15e9c:	subs	r6, r0, #0
   15ea0:	bge	15ed0 <__assert_fail@plt+0x49bc>
   15ea4:	bl	113b8 <__errno_location@plt>
   15ea8:	ldr	r3, [r0]
   15eac:	cmp	r3, #4
   15eb0:	beq	15e8c <__assert_fail@plt+0x4978>
   15eb4:	cmp	r4, r5
   15eb8:	movls	r4, #0
   15ebc:	movhi	r4, #1
   15ec0:	cmp	r3, #22
   15ec4:	movne	r4, #0
   15ec8:	cmp	r4, #0
   15ecc:	bne	15ed8 <__assert_fail@plt+0x49c4>
   15ed0:	mov	r0, r6
   15ed4:	pop	{r4, r5, r6, r7, r8, pc}
   15ed8:	mov	r4, r5
   15edc:	b	15e8c <__assert_fail@plt+0x4978>
   15ee0:	svcvc	0x00f00000	; IMB
   15ee4:	push	{r4, r5, r6, r7, r8, lr}
   15ee8:	mov	r7, r0
   15eec:	ldr	r5, [pc, #88]	; 15f4c <__assert_fail@plt+0x4a38>
   15ef0:	mov	r8, r1
   15ef4:	mov	r4, r2
   15ef8:	mov	r2, r4
   15efc:	mov	r1, r8
   15f00:	mov	r0, r7
   15f04:	bl	113f4 <write@plt>
   15f08:	subs	r6, r0, #0
   15f0c:	bge	15f3c <__assert_fail@plt+0x4a28>
   15f10:	bl	113b8 <__errno_location@plt>
   15f14:	ldr	r3, [r0]
   15f18:	cmp	r3, #4
   15f1c:	beq	15ef8 <__assert_fail@plt+0x49e4>
   15f20:	cmp	r4, r5
   15f24:	sub	r3, r3, #22
   15f28:	clz	r3, r3
   15f2c:	lsr	r3, r3, #5
   15f30:	movls	r3, #0
   15f34:	cmp	r3, #0
   15f38:	bne	15f44 <__assert_fail@plt+0x4a30>
   15f3c:	mov	r0, r6
   15f40:	pop	{r4, r5, r6, r7, r8, pc}
   15f44:	mov	r4, r5
   15f48:	b	15ef8 <__assert_fail@plt+0x49e4>
   15f4c:	svcvc	0x00f00000	; IMB
   15f50:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   15f54:	mov	r7, r1
   15f58:	ldrb	r3, [r0]
   15f5c:	sub	r3, r3, #48	; 0x30
   15f60:	cmp	r3, #9
   15f64:	bhi	15f98 <__assert_fail@plt+0x4a84>
   15f68:	mov	r2, #10
   15f6c:	add	r1, sp, #4
   15f70:	bl	1119c <strtol@plt>
   15f74:	ldr	r3, [sp, #4]
   15f78:	ldrb	r3, [r3]
   15f7c:	cmp	r0, #64	; 0x40
   15f80:	cmple	r3, #0
   15f84:	mvnne	r0, #0
   15f88:	str	r0, [r7]
   15f8c:	asr	r0, r0, #31
   15f90:	add	sp, sp, #12
   15f94:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15f98:	ldr	r5, [pc, #264]	; 160a8 <__assert_fail@plt+0x4b94>
   15f9c:	mov	r6, r0
   15fa0:	mov	r4, #0
   15fa4:	mov	r9, #12
   15fa8:	mul	r8, r9, r4
   15fac:	mov	r1, r6
   15fb0:	add	r0, r8, #4
   15fb4:	add	r0, r5, r0
   15fb8:	bl	11190 <strcmp@plt>
   15fbc:	cmp	r0, #0
   15fc0:	ldreq	r0, [r5, r8]
   15fc4:	beq	15f88 <__assert_fail@plt+0x4a74>
   15fc8:	add	r4, r4, #1
   15fcc:	cmp	r4, #35	; 0x23
   15fd0:	bne	15fa8 <__assert_fail@plt+0x4a94>
   15fd4:	bl	114cc <__libc_current_sigrtmin@plt>
   15fd8:	mov	r5, r0
   15fdc:	bl	1137c <__libc_current_sigrtmax@plt>
   15fe0:	cmp	r5, #0
   15fe4:	mov	r4, r0
   15fe8:	ble	16040 <__assert_fail@plt+0x4b2c>
   15fec:	mov	r2, #5
   15ff0:	ldr	r1, [pc, #180]	; 160ac <__assert_fail@plt+0x4b98>
   15ff4:	mov	r0, r6
   15ff8:	bl	114e4 <strncmp@plt>
   15ffc:	cmp	r0, #0
   16000:	bne	16040 <__assert_fail@plt+0x4b2c>
   16004:	mov	r2, #10
   16008:	add	r1, sp, #4
   1600c:	add	r0, r6, #5
   16010:	bl	1119c <strtol@plt>
   16014:	ldr	r3, [sp, #4]
   16018:	ldrb	r3, [r3]
   1601c:	cmp	r0, #0
   16020:	cmpge	r3, #0
   16024:	bne	16038 <__assert_fail@plt+0x4b24>
   16028:	sub	r4, r4, r5
   1602c:	cmp	r0, r4
   16030:	addle	r0, r5, r0
   16034:	ble	15f88 <__assert_fail@plt+0x4a74>
   16038:	mvn	r0, #0
   1603c:	b	15f88 <__assert_fail@plt+0x4a74>
   16040:	cmp	r4, #0
   16044:	ble	16038 <__assert_fail@plt+0x4b24>
   16048:	mov	r2, #5
   1604c:	ldr	r1, [pc, #92]	; 160b0 <__assert_fail@plt+0x4b9c>
   16050:	mov	r0, r6
   16054:	bl	114e4 <strncmp@plt>
   16058:	cmp	r0, #0
   1605c:	bne	16038 <__assert_fail@plt+0x4b24>
   16060:	mov	r2, #10
   16064:	add	r1, sp, #4
   16068:	add	r0, r6, #5
   1606c:	bl	1119c <strtol@plt>
   16070:	ldr	r3, [sp, #4]
   16074:	ldrb	r3, [r3]
   16078:	cmp	r3, #0
   1607c:	bne	16038 <__assert_fail@plt+0x4b24>
   16080:	sub	r5, r5, r4
   16084:	cmp	r0, r5
   16088:	movlt	r5, #0
   1608c:	movge	r5, #1
   16090:	cmp	r0, #0
   16094:	movgt	r5, #0
   16098:	cmp	r5, #0
   1609c:	addne	r0, r4, r0
   160a0:	bne	15f88 <__assert_fail@plt+0x4a74>
   160a4:	b	16038 <__assert_fail@plt+0x4b24>
   160a8:			; <UNDEFINED> instruction: 0x0002a1b0
   160ac:			; <UNDEFINED> instruction: 0x00018eb7
   160b0:			; <UNDEFINED> instruction: 0x00018ebd
   160b4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   160b8:	mov	r6, r1
   160bc:	ldr	r1, [pc, #196]	; 16188 <__assert_fail@plt+0x4c74>
   160c0:	mov	r4, r0
   160c4:	mov	r3, #0
   160c8:	mov	r0, #12
   160cc:	mul	r2, r0, r3
   160d0:	ldr	ip, [r2, r1]
   160d4:	cmp	ip, r4
   160d8:	bne	160f8 <__assert_fail@plt+0x4be4>
   160dc:	add	r2, r2, #4
   160e0:	add	r1, r1, r2
   160e4:	mov	r0, r6
   160e8:	bl	112bc <strcpy@plt>
   160ec:	mov	r0, #0
   160f0:	add	sp, sp, #12
   160f4:	pop	{r4, r5, r6, r7, pc}
   160f8:	add	r3, r3, #1
   160fc:	cmp	r3, #35	; 0x23
   16100:	bne	160cc <__assert_fail@plt+0x4bb8>
   16104:	bl	114cc <__libc_current_sigrtmin@plt>
   16108:	mov	r5, r0
   1610c:	bl	1137c <__libc_current_sigrtmax@plt>
   16110:	cmp	r4, r0
   16114:	movle	r3, #0
   16118:	movgt	r3, #1
   1611c:	cmp	r4, r5
   16120:	orrlt	r3, r3, #1
   16124:	cmp	r3, #0
   16128:	mov	r7, r0
   1612c:	mvnne	r0, #0
   16130:	bne	160f0 <__assert_fail@plt+0x4bdc>
   16134:	sub	r3, r7, r5
   16138:	add	r3, r5, r3, asr #1
   1613c:	cmp	r4, r3
   16140:	bgt	16174 <__assert_fail@plt+0x4c60>
   16144:	ldr	r1, [pc, #64]	; 1618c <__assert_fail@plt+0x4c78>
   16148:	mov	r0, r6
   1614c:	bl	112bc <strcpy@plt>
   16150:	subs	r0, r4, r5
   16154:	beq	160f0 <__assert_fail@plt+0x4bdc>
   16158:	str	r0, [sp]
   1615c:	ldr	r3, [pc, #44]	; 16190 <__assert_fail@plt+0x4c7c>
   16160:	mvn	r2, #0
   16164:	mov	r1, #1
   16168:	add	r0, r6, #5
   1616c:	bl	113c4 <__sprintf_chk@plt>
   16170:	b	160ec <__assert_fail@plt+0x4bd8>
   16174:	ldr	r1, [pc, #24]	; 16194 <__assert_fail@plt+0x4c80>
   16178:	mov	r0, r6
   1617c:	bl	112bc <strcpy@plt>
   16180:	mov	r5, r7
   16184:	b	16150 <__assert_fail@plt+0x4c3c>
   16188:			; <UNDEFINED> instruction: 0x0002a1b0
   1618c:			; <UNDEFINED> instruction: 0x00018eb7
   16190:	andeq	r8, r1, r3, asr #29
   16194:			; <UNDEFINED> instruction: 0x00018ebd
   16198:	cmp	r0, #2
   1619c:	push	{r4, r5, r6, r7, r8, lr}
   161a0:	mov	r4, r0
   161a4:	bhi	161cc <__assert_fail@plt+0x4cb8>
   161a8:	bl	17324 <__assert_fail@plt+0x5e10>
   161ac:	mov	r6, r0
   161b0:	bl	113b8 <__errno_location@plt>
   161b4:	ldr	r7, [r0]
   161b8:	mov	r5, r0
   161bc:	mov	r0, r4
   161c0:	mov	r4, r6
   161c4:	bl	114fc <close@plt>
   161c8:	str	r7, [r5]
   161cc:	mov	r0, r4
   161d0:	pop	{r4, r5, r6, r7, r8, pc}
   161d4:	push	{r4, r5, r6, lr}
   161d8:	sub	sp, sp, #32
   161dc:	cmp	r1, #0
   161e0:	mov	r5, r0
   161e4:	ldr	r4, [sp, #48]	; 0x30
   161e8:	ldr	r6, [sp, #52]	; 0x34
   161ec:	beq	162a0 <__assert_fail@plt+0x4d8c>
   161f0:	stm	sp, {r2, r3}
   161f4:	mov	r3, r1
   161f8:	ldr	r2, [pc, #860]	; 1655c <__assert_fail@plt+0x5048>
   161fc:	mov	r1, #1
   16200:	bl	11418 <__fprintf_chk@plt>
   16204:	mov	r2, #5
   16208:	ldr	r1, [pc, #848]	; 16560 <__assert_fail@plt+0x504c>
   1620c:	mov	r0, #0
   16210:	bl	11238 <dcgettext@plt>
   16214:	ldr	r3, [pc, #840]	; 16564 <__assert_fail@plt+0x5050>
   16218:	ldr	r2, [pc, #840]	; 16568 <__assert_fail@plt+0x5054>
   1621c:	str	r3, [sp]
   16220:	mov	r1, #1
   16224:	mov	r3, r0
   16228:	mov	r0, r5
   1622c:	bl	11418 <__fprintf_chk@plt>
   16230:	mov	r1, r5
   16234:	mov	r0, #10
   16238:	bl	1122c <fputc_unlocked@plt>
   1623c:	mov	r2, #5
   16240:	ldr	r1, [pc, #804]	; 1656c <__assert_fail@plt+0x5058>
   16244:	mov	r0, #0
   16248:	bl	11238 <dcgettext@plt>
   1624c:	mov	r1, #1
   16250:	ldr	r3, [pc, #792]	; 16570 <__assert_fail@plt+0x505c>
   16254:	mov	r2, r0
   16258:	mov	r0, r5
   1625c:	bl	11418 <__fprintf_chk@plt>
   16260:	mov	r1, r5
   16264:	mov	r0, #10
   16268:	bl	1122c <fputc_unlocked@plt>
   1626c:	cmp	r6, #9
   16270:	ldrls	pc, [pc, r6, lsl #2]
   16274:	b	16550 <__assert_fail@plt+0x503c>
   16278:	muleq	r1, r0, r3
   1627c:			; <UNDEFINED> instruction: 0x000162b8
   16280:	andeq	r6, r1, r4, ror #5
   16284:	andeq	r6, r1, r8, lsl r3
   16288:	andeq	r6, r1, r4, asr r3
   1628c:	muleq	r1, r8, r3
   16290:	andeq	r6, r1, r0, ror #7
   16294:	andeq	r6, r1, r0, lsr r4
   16298:	andeq	r6, r1, r8, lsl #9
   1629c:	andeq	r6, r1, r8, ror #9
   162a0:	str	r3, [sp]
   162a4:	mov	r1, #1
   162a8:	mov	r3, r2
   162ac:	ldr	r2, [pc, #704]	; 16574 <__assert_fail@plt+0x5060>
   162b0:	bl	11418 <__fprintf_chk@plt>
   162b4:	b	16204 <__assert_fail@plt+0x4cf0>
   162b8:	mov	r2, #5
   162bc:	ldr	r1, [pc, #692]	; 16578 <__assert_fail@plt+0x5064>
   162c0:	mov	r0, #0
   162c4:	bl	11238 <dcgettext@plt>
   162c8:	ldr	r3, [r4]
   162cc:	mov	r1, #1
   162d0:	mov	r2, r0
   162d4:	mov	r0, r5
   162d8:	add	sp, sp, #32
   162dc:	pop	{r4, r5, r6, lr}
   162e0:	b	11418 <__fprintf_chk@plt>
   162e4:	mov	r2, #5
   162e8:	ldr	r1, [pc, #652]	; 1657c <__assert_fail@plt+0x5068>
   162ec:	mov	r0, #0
   162f0:	bl	11238 <dcgettext@plt>
   162f4:	ldr	r3, [r4, #4]
   162f8:	mov	r1, #1
   162fc:	str	r3, [sp, #48]	; 0x30
   16300:	ldr	r3, [r4]
   16304:	mov	r2, r0
   16308:	mov	r0, r5
   1630c:	add	sp, sp, #32
   16310:	pop	{r4, r5, r6, lr}
   16314:	b	11418 <__fprintf_chk@plt>
   16318:	mov	r2, #5
   1631c:	ldr	r1, [pc, #604]	; 16580 <__assert_fail@plt+0x506c>
   16320:	mov	r0, #0
   16324:	bl	11238 <dcgettext@plt>
   16328:	ldr	r3, [r4, #8]
   1632c:	mov	r1, #1
   16330:	str	r3, [sp, #52]	; 0x34
   16334:	ldr	r3, [r4, #4]
   16338:	str	r3, [sp, #48]	; 0x30
   1633c:	ldr	r3, [r4]
   16340:	mov	r2, r0
   16344:	mov	r0, r5
   16348:	add	sp, sp, #32
   1634c:	pop	{r4, r5, r6, lr}
   16350:	b	11418 <__fprintf_chk@plt>
   16354:	mov	r2, #5
   16358:	ldr	r1, [pc, #548]	; 16584 <__assert_fail@plt+0x5070>
   1635c:	mov	r0, #0
   16360:	bl	11238 <dcgettext@plt>
   16364:	ldr	r3, [r4, #12]
   16368:	mov	r1, #1
   1636c:	str	r3, [sp, #8]
   16370:	ldr	r3, [r4, #8]
   16374:	str	r3, [sp, #4]
   16378:	ldr	r3, [r4, #4]
   1637c:	str	r3, [sp]
   16380:	ldr	r3, [r4]
   16384:	mov	r2, r0
   16388:	mov	r0, r5
   1638c:	bl	11418 <__fprintf_chk@plt>
   16390:	add	sp, sp, #32
   16394:	pop	{r4, r5, r6, pc}
   16398:	mov	r2, #5
   1639c:	ldr	r1, [pc, #484]	; 16588 <__assert_fail@plt+0x5074>
   163a0:	mov	r0, #0
   163a4:	bl	11238 <dcgettext@plt>
   163a8:	ldr	r3, [r4, #16]
   163ac:	mov	r1, #1
   163b0:	str	r3, [sp, #12]
   163b4:	ldr	r3, [r4, #12]
   163b8:	str	r3, [sp, #8]
   163bc:	ldr	r3, [r4, #8]
   163c0:	str	r3, [sp, #4]
   163c4:	ldr	r3, [r4, #4]
   163c8:	str	r3, [sp]
   163cc:	ldr	r3, [r4]
   163d0:	mov	r2, r0
   163d4:	mov	r0, r5
   163d8:	bl	11418 <__fprintf_chk@plt>
   163dc:	b	16390 <__assert_fail@plt+0x4e7c>
   163e0:	mov	r2, #5
   163e4:	ldr	r1, [pc, #416]	; 1658c <__assert_fail@plt+0x5078>
   163e8:	mov	r0, #0
   163ec:	bl	11238 <dcgettext@plt>
   163f0:	ldr	r3, [r4, #20]
   163f4:	mov	r1, #1
   163f8:	str	r3, [sp, #16]
   163fc:	ldr	r3, [r4, #16]
   16400:	str	r3, [sp, #12]
   16404:	ldr	r3, [r4, #12]
   16408:	str	r3, [sp, #8]
   1640c:	ldr	r3, [r4, #8]
   16410:	str	r3, [sp, #4]
   16414:	ldr	r3, [r4, #4]
   16418:	str	r3, [sp]
   1641c:	ldr	r3, [r4]
   16420:	mov	r2, r0
   16424:	mov	r0, r5
   16428:	bl	11418 <__fprintf_chk@plt>
   1642c:	b	16390 <__assert_fail@plt+0x4e7c>
   16430:	mov	r2, #5
   16434:	ldr	r1, [pc, #340]	; 16590 <__assert_fail@plt+0x507c>
   16438:	mov	r0, #0
   1643c:	bl	11238 <dcgettext@plt>
   16440:	ldr	r3, [r4, #24]
   16444:	mov	r1, #1
   16448:	str	r3, [sp, #20]
   1644c:	ldr	r3, [r4, #20]
   16450:	str	r3, [sp, #16]
   16454:	ldr	r3, [r4, #16]
   16458:	str	r3, [sp, #12]
   1645c:	ldr	r3, [r4, #12]
   16460:	str	r3, [sp, #8]
   16464:	ldr	r3, [r4, #8]
   16468:	str	r3, [sp, #4]
   1646c:	ldr	r3, [r4, #4]
   16470:	str	r3, [sp]
   16474:	ldr	r3, [r4]
   16478:	mov	r2, r0
   1647c:	mov	r0, r5
   16480:	bl	11418 <__fprintf_chk@plt>
   16484:	b	16390 <__assert_fail@plt+0x4e7c>
   16488:	mov	r2, #5
   1648c:	ldr	r1, [pc, #256]	; 16594 <__assert_fail@plt+0x5080>
   16490:	mov	r0, #0
   16494:	bl	11238 <dcgettext@plt>
   16498:	ldr	r3, [r4, #28]
   1649c:	mov	r1, #1
   164a0:	str	r3, [sp, #24]
   164a4:	ldr	r3, [r4, #24]
   164a8:	str	r3, [sp, #20]
   164ac:	ldr	r3, [r4, #20]
   164b0:	str	r3, [sp, #16]
   164b4:	ldr	r3, [r4, #16]
   164b8:	str	r3, [sp, #12]
   164bc:	ldr	r3, [r4, #12]
   164c0:	str	r3, [sp, #8]
   164c4:	ldr	r3, [r4, #8]
   164c8:	str	r3, [sp, #4]
   164cc:	ldr	r3, [r4, #4]
   164d0:	str	r3, [sp]
   164d4:	ldr	r3, [r4]
   164d8:	mov	r2, r0
   164dc:	mov	r0, r5
   164e0:	bl	11418 <__fprintf_chk@plt>
   164e4:	b	16390 <__assert_fail@plt+0x4e7c>
   164e8:	ldr	r1, [pc, #168]	; 16598 <__assert_fail@plt+0x5084>
   164ec:	mov	r2, #5
   164f0:	mov	r0, #0
   164f4:	bl	11238 <dcgettext@plt>
   164f8:	ldr	r3, [r4, #32]
   164fc:	mov	r1, #1
   16500:	str	r3, [sp, #28]
   16504:	ldr	r3, [r4, #28]
   16508:	str	r3, [sp, #24]
   1650c:	ldr	r3, [r4, #24]
   16510:	str	r3, [sp, #20]
   16514:	ldr	r3, [r4, #20]
   16518:	str	r3, [sp, #16]
   1651c:	ldr	r3, [r4, #16]
   16520:	str	r3, [sp, #12]
   16524:	ldr	r3, [r4, #12]
   16528:	str	r3, [sp, #8]
   1652c:	ldr	r3, [r4, #8]
   16530:	str	r3, [sp, #4]
   16534:	ldr	r3, [r4, #4]
   16538:	str	r3, [sp]
   1653c:	ldr	r3, [r4]
   16540:	mov	r2, r0
   16544:	mov	r0, r5
   16548:	bl	11418 <__fprintf_chk@plt>
   1654c:	b	16390 <__assert_fail@plt+0x4e7c>
   16550:	mov	r2, #5
   16554:	ldr	r1, [pc, #64]	; 1659c <__assert_fail@plt+0x5088>
   16558:	b	164f0 <__assert_fail@plt+0x4fdc>
   1655c:	andeq	r8, r1, r7, asr #29
   16560:	ldrdeq	r8, [r1], -sl
   16564:	andeq	r0, r0, r6, ror #15
   16568:	andeq	r9, r1, r8, lsr #3
   1656c:	ldrdeq	r8, [r1], -lr
   16570:	andeq	r8, r1, r9, lsl #31
   16574:	ldrdeq	r8, [r1], -r3
   16578:	andeq	r8, r1, fp, lsr #31
   1657c:			; <UNDEFINED> instruction: 0x00018fbb
   16580:	ldrdeq	r8, [r1], -r2
   16584:	andeq	r8, r1, lr, ror #31
   16588:	andeq	r9, r1, lr
   1658c:	andeq	r9, r1, r2, lsr r0
   16590:	andeq	r9, r1, sl, asr r0
   16594:	andeq	r9, r1, r6, lsl #1
   16598:	strheq	r9, [r1], -r6
   1659c:	andeq	r9, r1, sl, ror #1
   165a0:	push	{r0, r1, r4, lr}
   165a4:	mov	ip, #0
   165a8:	ldr	lr, [sp, #16]
   165ac:	ldr	r4, [lr, ip, lsl #2]
   165b0:	cmp	r4, #0
   165b4:	bne	165cc <__assert_fail@plt+0x50b8>
   165b8:	str	ip, [sp, #4]
   165bc:	str	lr, [sp]
   165c0:	bl	161d4 <__assert_fail@plt+0x4cc0>
   165c4:	add	sp, sp, #8
   165c8:	pop	{r4, pc}
   165cc:	add	ip, ip, #1
   165d0:	b	165ac <__assert_fail@plt+0x5098>
   165d4:	push	{r4, r5, lr}
   165d8:	sub	sp, sp, #52	; 0x34
   165dc:	mov	ip, #0
   165e0:	ldr	r5, [sp, #64]	; 0x40
   165e4:	add	lr, sp, #8
   165e8:	ldr	r4, [r5, ip, lsl #2]
   165ec:	cmp	r4, #0
   165f0:	str	r4, [lr, ip, lsl #2]
   165f4:	beq	16604 <__assert_fail@plt+0x50f0>
   165f8:	add	ip, ip, #1
   165fc:	cmp	ip, #10
   16600:	bne	165e8 <__assert_fail@plt+0x50d4>
   16604:	str	ip, [sp, #4]
   16608:	str	lr, [sp]
   1660c:	bl	161d4 <__assert_fail@plt+0x4cc0>
   16610:	add	sp, sp, #52	; 0x34
   16614:	pop	{r4, r5, pc}
   16618:	push	{r3}		; (str r3, [sp, #-4]!)
   1661c:	push	{r0, r1, r2, r3, lr}
   16620:	add	r3, sp, #24
   16624:	str	r3, [sp, #12]
   16628:	str	r3, [sp]
   1662c:	ldr	r3, [sp, #20]
   16630:	bl	165d4 <__assert_fail@plt+0x50c0>
   16634:	add	sp, sp, #16
   16638:	pop	{lr}		; (ldr lr, [sp], #4)
   1663c:	add	sp, sp, #4
   16640:	bx	lr
   16644:	ldr	r3, [pc, #116]	; 166c0 <__assert_fail@plt+0x51ac>
   16648:	push	{r4, lr}
   1664c:	mov	r0, #10
   16650:	ldr	r1, [r3]
   16654:	bl	1122c <fputc_unlocked@plt>
   16658:	mov	r2, #5
   1665c:	ldr	r1, [pc, #96]	; 166c4 <__assert_fail@plt+0x51b0>
   16660:	mov	r0, #0
   16664:	bl	11238 <dcgettext@plt>
   16668:	ldr	r2, [pc, #88]	; 166c8 <__assert_fail@plt+0x51b4>
   1666c:	mov	r1, r0
   16670:	mov	r0, #1
   16674:	bl	113e8 <__printf_chk@plt>
   16678:	mov	r2, #5
   1667c:	ldr	r1, [pc, #72]	; 166cc <__assert_fail@plt+0x51b8>
   16680:	mov	r0, #0
   16684:	bl	11238 <dcgettext@plt>
   16688:	ldr	r3, [pc, #64]	; 166d0 <__assert_fail@plt+0x51bc>
   1668c:	ldr	r2, [pc, #64]	; 166d4 <__assert_fail@plt+0x51c0>
   16690:	mov	r1, r0
   16694:	mov	r0, #1
   16698:	bl	113e8 <__printf_chk@plt>
   1669c:	mov	r2, #5
   166a0:	ldr	r1, [pc, #48]	; 166d8 <__assert_fail@plt+0x51c4>
   166a4:	mov	r0, #0
   166a8:	bl	11238 <dcgettext@plt>
   166ac:	ldr	r2, [pc, #40]	; 166dc <__assert_fail@plt+0x51c8>
   166b0:	pop	{r4, lr}
   166b4:	mov	r1, r0
   166b8:	mov	r0, #1
   166bc:	b	113e8 <__printf_chk@plt>
   166c0:	andeq	sl, r2, ip, ror #6
   166c4:	andeq	r9, r1, r6, lsr #2
   166c8:	andeq	r9, r1, sl, lsr r1
   166cc:	andeq	r9, r1, r0, asr r1
   166d0:	andeq	r8, r1, fp, ror r8
   166d4:	andeq	r8, r1, r3, lsr #17
   166d8:	andeq	r9, r1, r4, ror #2
   166dc:	andeq	r9, r1, fp, lsl #3
   166e0:	push	{r4, lr}
   166e4:	bl	114c0 <aligned_alloc@plt>
   166e8:	cmp	r0, #0
   166ec:	popne	{r4, pc}
   166f0:	bl	16b88 <__assert_fail@plt+0x5674>
   166f4:	push	{r4, lr}
   166f8:	bl	17148 <__assert_fail@plt+0x5c34>
   166fc:	cmp	r0, #0
   16700:	popne	{r4, pc}
   16704:	bl	16b88 <__assert_fail@plt+0x5674>
   16708:	push	{r4, lr}
   1670c:	bl	17148 <__assert_fail@plt+0x5c34>
   16710:	cmp	r0, #0
   16714:	popne	{r4, pc}
   16718:	bl	16b88 <__assert_fail@plt+0x5674>
   1671c:	b	166f4 <__assert_fail@plt+0x51e0>
   16720:	push	{r4, r5, r6, lr}
   16724:	mov	r5, r0
   16728:	mov	r4, r1
   1672c:	bl	17188 <__assert_fail@plt+0x5c74>
   16730:	cmp	r0, #0
   16734:	popne	{r4, r5, r6, pc}
   16738:	adds	r4, r4, #0
   1673c:	movne	r4, #1
   16740:	cmp	r5, #0
   16744:	orreq	r4, r4, #1
   16748:	cmp	r4, #0
   1674c:	popeq	{r4, r5, r6, pc}
   16750:	bl	16b88 <__assert_fail@plt+0x5674>
   16754:	push	{r4, lr}
   16758:	cmp	r1, #0
   1675c:	orreq	r1, r1, #1
   16760:	bl	17188 <__assert_fail@plt+0x5c74>
   16764:	cmp	r0, #0
   16768:	popne	{r4, pc}
   1676c:	bl	16b88 <__assert_fail@plt+0x5674>
   16770:	push	{r4, r5, r6, lr}
   16774:	mov	r6, r0
   16778:	mov	r5, r1
   1677c:	mov	r4, r2
   16780:	bl	172d8 <__assert_fail@plt+0x5dc4>
   16784:	cmp	r0, #0
   16788:	popne	{r4, r5, r6, pc}
   1678c:	cmp	r6, #0
   16790:	beq	167a0 <__assert_fail@plt+0x528c>
   16794:	cmp	r5, #0
   16798:	cmpne	r4, #0
   1679c:	popeq	{r4, r5, r6, pc}
   167a0:	bl	16b88 <__assert_fail@plt+0x5674>
   167a4:	b	16770 <__assert_fail@plt+0x525c>
   167a8:	cmp	r2, #0
   167ac:	cmpne	r1, #0
   167b0:	moveq	r2, #1
   167b4:	moveq	r1, r2
   167b8:	push	{r4, lr}
   167bc:	bl	172d8 <__assert_fail@plt+0x5dc4>
   167c0:	cmp	r0, #0
   167c4:	popne	{r4, pc}
   167c8:	bl	16b88 <__assert_fail@plt+0x5674>
   167cc:	mov	r2, r1
   167d0:	mov	r1, r0
   167d4:	mov	r0, #0
   167d8:	b	16770 <__assert_fail@plt+0x525c>
   167dc:	mov	r2, r1
   167e0:	mov	r1, r0
   167e4:	mov	r0, #0
   167e8:	b	167a8 <__assert_fail@plt+0x5294>
   167ec:	push	{r4, r5, r6, r7, r8, lr}
   167f0:	subs	r7, r0, #0
   167f4:	mov	r5, r1
   167f8:	mov	r6, r2
   167fc:	ldr	r4, [r1]
   16800:	bne	1683c <__assert_fail@plt+0x5328>
   16804:	cmp	r4, #0
   16808:	bne	16824 <__assert_fail@plt+0x5310>
   1680c:	mov	r1, r2
   16810:	mov	r0, #64	; 0x40
   16814:	bl	175d4 <__assert_fail@plt+0x60c0>
   16818:	cmp	r0, #0
   1681c:	movne	r4, r0
   16820:	addeq	r4, r0, #1
   16824:	mov	r2, r6
   16828:	mov	r1, r4
   1682c:	mov	r0, r7
   16830:	bl	16770 <__assert_fail@plt+0x525c>
   16834:	str	r4, [r5]
   16838:	pop	{r4, r5, r6, r7, r8, pc}
   1683c:	lsr	r2, r4, #1
   16840:	add	r3, r2, #1
   16844:	mvn	r3, r3
   16848:	cmp	r4, r3
   1684c:	addls	r4, r4, #1
   16850:	addls	r4, r4, r2
   16854:	bls	16824 <__assert_fail@plt+0x5310>
   16858:	bl	16b88 <__assert_fail@plt+0x5674>
   1685c:	mov	r2, #1
   16860:	b	167ec <__assert_fail@plt+0x52d8>
   16864:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16868:	mov	sl, r0
   1686c:	ldr	r8, [r1]
   16870:	mov	fp, r1
   16874:	mov	r5, r2
   16878:	asrs	r4, r8, #1
   1687c:	mov	r9, r3
   16880:	ldr	r7, [sp, #48]	; 0x30
   16884:	bpl	16920 <__assert_fail@plt+0x540c>
   16888:	rsb	r2, r4, #-2147483648	; 0x80000000
   1688c:	cmp	r8, r2
   16890:	movge	r2, #0
   16894:	movlt	r2, #1
   16898:	mvn	r3, r9
   1689c:	cmp	r2, #0
   168a0:	lsr	r3, r3, #31
   168a4:	addeq	r4, r4, r8
   168a8:	mvnne	r4, #-2147483648	; 0x80000000
   168ac:	mov	r0, r3
   168b0:	cmp	r9, r4
   168b4:	movge	r0, #0
   168b8:	andlt	r0, r0, #1
   168bc:	cmp	r0, #0
   168c0:	str	r3, [sp, #4]
   168c4:	bne	16a94 <__assert_fail@plt+0x5580>
   168c8:	cmp	r7, #0
   168cc:	bge	169e0 <__assert_fail@plt+0x54cc>
   168d0:	cmp	r4, #0
   168d4:	bge	16938 <__assert_fail@plt+0x5424>
   168d8:	mov	r1, r7
   168dc:	mvn	r0, #-2147483648	; 0x80000000
   168e0:	bl	177e0 <__assert_fail@plt+0x62cc>
   168e4:	cmp	r0, r4
   168e8:	movle	r0, #0
   168ec:	movgt	r0, #1
   168f0:	cmp	r0, #0
   168f4:	mvnne	r6, #-2147483648	; 0x80000000
   168f8:	beq	16948 <__assert_fail@plt+0x5434>
   168fc:	mov	r1, r7
   16900:	mov	r0, r6
   16904:	bl	177e0 <__assert_fail@plt+0x62cc>
   16908:	mov	r1, r7
   1690c:	mov	r4, r0
   16910:	mov	r0, r6
   16914:	bl	17a00 <__assert_fail@plt+0x64ec>
   16918:	sub	r1, r6, r1
   1691c:	b	16958 <__assert_fail@plt+0x5444>
   16920:	mvn	r2, #-2147483648	; 0x80000000
   16924:	sub	r2, r2, r4
   16928:	cmp	r8, r2
   1692c:	movle	r2, #0
   16930:	movgt	r2, #1
   16934:	b	16898 <__assert_fail@plt+0x5384>
   16938:	cmn	r7, #1
   1693c:	movne	r1, r7
   16940:	movne	r0, #-2147483648	; 0x80000000
   16944:	bne	16aac <__assert_fail@plt+0x5598>
   16948:	mul	r1, r7, r4
   1694c:	cmp	r1, #63	; 0x3f
   16950:	movle	r6, #64	; 0x40
   16954:	ble	168fc <__assert_fail@plt+0x53e8>
   16958:	cmp	sl, #0
   1695c:	sub	r2, r4, r8
   16960:	streq	sl, [fp]
   16964:	cmp	r2, r5
   16968:	bge	16a3c <__assert_fail@plt+0x5528>
   1696c:	cmp	r5, #0
   16970:	bge	16a08 <__assert_fail@plt+0x54f4>
   16974:	rsb	r2, r5, #-2147483648	; 0x80000000
   16978:	cmp	r8, r2
   1697c:	movge	r2, #0
   16980:	movlt	r2, #1
   16984:	cmp	r2, #0
   16988:	bne	169dc <__assert_fail@plt+0x54c8>
   1698c:	ldr	r0, [sp, #4]
   16990:	add	r5, r8, r5
   16994:	cmp	r9, r5
   16998:	movge	r0, #0
   1699c:	andlt	r0, r0, #1
   169a0:	cmp	r0, #0
   169a4:	mov	r4, r5
   169a8:	bne	169dc <__assert_fail@plt+0x54c8>
   169ac:	cmp	r7, #0
   169b0:	bge	16a50 <__assert_fail@plt+0x553c>
   169b4:	cmp	r5, #0
   169b8:	bge	16a28 <__assert_fail@plt+0x5514>
   169bc:	mov	r1, r7
   169c0:	mvn	r0, #-2147483648	; 0x80000000
   169c4:	bl	177e0 <__assert_fail@plt+0x62cc>
   169c8:	cmp	r5, r0
   169cc:	movge	r0, #0
   169d0:	movlt	r0, #1
   169d4:	cmp	r0, #0
   169d8:	beq	16a38 <__assert_fail@plt+0x5524>
   169dc:	bl	16b88 <__assert_fail@plt+0x5674>
   169e0:	beq	16948 <__assert_fail@plt+0x5434>
   169e4:	cmp	r4, #0
   169e8:	bge	16aa4 <__assert_fail@plt+0x5590>
   169ec:	cmn	r4, #1
   169f0:	beq	16948 <__assert_fail@plt+0x5434>
   169f4:	mov	r1, r4
   169f8:	mov	r0, #-2147483648	; 0x80000000
   169fc:	bl	177e0 <__assert_fail@plt+0x62cc>
   16a00:	cmp	r7, r0
   16a04:	b	168e8 <__assert_fail@plt+0x53d4>
   16a08:	cmp	r8, #0
   16a0c:	blt	1698c <__assert_fail@plt+0x5478>
   16a10:	mvn	r2, #-2147483648	; 0x80000000
   16a14:	sub	r2, r2, r5
   16a18:	cmp	r8, r2
   16a1c:	movle	r2, #0
   16a20:	movgt	r2, #1
   16a24:	b	16984 <__assert_fail@plt+0x5470>
   16a28:	cmn	r7, #1
   16a2c:	movne	r1, r7
   16a30:	movne	r0, #-2147483648	; 0x80000000
   16a34:	bne	16a88 <__assert_fail@plt+0x5574>
   16a38:	mul	r1, r5, r7
   16a3c:	mov	r0, sl
   16a40:	bl	16720 <__assert_fail@plt+0x520c>
   16a44:	str	r4, [fp]
   16a48:	add	sp, sp, #12
   16a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a50:	beq	16a38 <__assert_fail@plt+0x5524>
   16a54:	cmp	r5, #0
   16a58:	movge	r1, r7
   16a5c:	mvnge	r0, #-2147483648	; 0x80000000
   16a60:	bge	16a88 <__assert_fail@plt+0x5574>
   16a64:	cmn	r5, #1
   16a68:	beq	16a38 <__assert_fail@plt+0x5524>
   16a6c:	mov	r1, r5
   16a70:	mov	r0, #-2147483648	; 0x80000000
   16a74:	bl	177e0 <__assert_fail@plt+0x62cc>
   16a78:	cmp	r7, r0
   16a7c:	movle	r0, #0
   16a80:	movgt	r0, #1
   16a84:	b	169d4 <__assert_fail@plt+0x54c0>
   16a88:	bl	177e0 <__assert_fail@plt+0x62cc>
   16a8c:	cmp	r5, r0
   16a90:	b	16a7c <__assert_fail@plt+0x5568>
   16a94:	cmp	r7, #0
   16a98:	mov	r4, r9
   16a9c:	blt	16938 <__assert_fail@plt+0x5424>
   16aa0:	beq	16948 <__assert_fail@plt+0x5434>
   16aa4:	mov	r1, r7
   16aa8:	mvn	r0, #-2147483648	; 0x80000000
   16aac:	bl	177e0 <__assert_fail@plt+0x62cc>
   16ab0:	cmp	r0, r4
   16ab4:	movge	r0, #0
   16ab8:	movlt	r0, #1
   16abc:	b	168f0 <__assert_fail@plt+0x53dc>
   16ac0:	push	{r4, lr}
   16ac4:	bl	17100 <__assert_fail@plt+0x5bec>
   16ac8:	cmp	r0, #0
   16acc:	popne	{r4, pc}
   16ad0:	bl	16b88 <__assert_fail@plt+0x5674>
   16ad4:	mov	r1, #1
   16ad8:	b	16ac0 <__assert_fail@plt+0x55ac>
   16adc:	push	{r4, lr}
   16ae0:	bl	17100 <__assert_fail@plt+0x5bec>
   16ae4:	cmp	r0, #0
   16ae8:	popne	{r4, pc}
   16aec:	bl	16b88 <__assert_fail@plt+0x5674>
   16af0:	mov	r1, #1
   16af4:	b	16adc <__assert_fail@plt+0x55c8>
   16af8:	push	{r4, r5, r6, lr}
   16afc:	mov	r4, r1
   16b00:	mov	r5, r0
   16b04:	mov	r0, r1
   16b08:	bl	166f4 <__assert_fail@plt+0x51e0>
   16b0c:	mov	r2, r4
   16b10:	mov	r1, r5
   16b14:	pop	{r4, r5, r6, lr}
   16b18:	b	111f0 <memcpy@plt>
   16b1c:	push	{r4, r5, r6, lr}
   16b20:	mov	r4, r1
   16b24:	mov	r5, r0
   16b28:	mov	r0, r1
   16b2c:	bl	16708 <__assert_fail@plt+0x51f4>
   16b30:	mov	r2, r4
   16b34:	mov	r1, r5
   16b38:	pop	{r4, r5, r6, lr}
   16b3c:	b	111f0 <memcpy@plt>
   16b40:	push	{r4, r5, r6, lr}
   16b44:	mov	r5, r0
   16b48:	add	r0, r1, #1
   16b4c:	mov	r4, r1
   16b50:	bl	16708 <__assert_fail@plt+0x51f4>
   16b54:	mov	r2, #0
   16b58:	mov	r1, r5
   16b5c:	strb	r2, [r0, r4]
   16b60:	mov	r2, r4
   16b64:	pop	{r4, r5, r6, lr}
   16b68:	b	111f0 <memcpy@plt>
   16b6c:	push	{r4, lr}
   16b70:	mov	r4, r0
   16b74:	bl	11370 <strlen@plt>
   16b78:	add	r1, r0, #1
   16b7c:	mov	r0, r4
   16b80:	pop	{r4, lr}
   16b84:	b	16af8 <__assert_fail@plt+0x55e4>
   16b88:	ldr	r3, [pc, #44]	; 16bbc <__assert_fail@plt+0x56a8>
   16b8c:	push	{r4, lr}
   16b90:	mov	r2, #5
   16b94:	ldr	r1, [pc, #36]	; 16bc0 <__assert_fail@plt+0x56ac>
   16b98:	mov	r0, #0
   16b9c:	ldr	r4, [r3]
   16ba0:	bl	11238 <dcgettext@plt>
   16ba4:	ldr	r2, [pc, #24]	; 16bc4 <__assert_fail@plt+0x56b0>
   16ba8:	mov	r1, #0
   16bac:	mov	r3, r0
   16bb0:	mov	r0, r4
   16bb4:	bl	112ec <error@plt>
   16bb8:	bl	114f0 <abort@plt>
   16bbc:	andeq	sl, r2, ip, ror #2
   16bc0:	ldrdeq	r9, [r1], -r7
   16bc4:			; <UNDEFINED> instruction: 0x00017fbf
   16bc8:	push	{r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
   16bcc:	mov	r9, r3
   16bd0:	ldr	r3, [sp, #48]	; 0x30
   16bd4:	mov	r8, r2
   16bd8:	str	r3, [sp]
   16bdc:	mov	r2, r1
   16be0:	add	r3, sp, #8
   16be4:	mov	r1, #0
   16be8:	mov	r6, r0
   16bec:	ldr	r4, [sp, #56]	; 0x38
   16bf0:	bl	16dd4 <__assert_fail@plt+0x58c0>
   16bf4:	cmp	r0, #0
   16bf8:	bne	16c6c <__assert_fail@plt+0x5758>
   16bfc:	ldrd	r0, [sp, #8]
   16c00:	ldrd	r2, [sp, #40]	; 0x28
   16c04:	cmp	r1, r9
   16c08:	cmpeq	r0, r8
   16c0c:	movcc	ip, #1
   16c10:	movcs	ip, #0
   16c14:	cmp	r1, r3
   16c18:	cmpeq	r0, r2
   16c1c:	movls	r3, ip
   16c20:	orrhi	r3, ip, #1
   16c24:	cmp	r3, #0
   16c28:	beq	16ce8 <__assert_fail@plt+0x57d4>
   16c2c:	mov	r3, #0
   16c30:	mvn	r2, #-1073741824	; 0xc0000000
   16c34:	cmp	r1, r3
   16c38:	cmpeq	r0, r2
   16c3c:	bls	16c60 <__assert_fail@plt+0x574c>
   16c40:	bl	113b8 <__errno_location@plt>
   16c44:	mov	r3, #75	; 0x4b
   16c48:	cmp	r4, #0
   16c4c:	str	r3, [r0]
   16c50:	beq	16cb4 <__assert_fail@plt+0x57a0>
   16c54:	bl	113b8 <__errno_location@plt>
   16c58:	ldr	r5, [r0]
   16c5c:	b	16cc8 <__assert_fail@plt+0x57b4>
   16c60:	bl	113b8 <__errno_location@plt>
   16c64:	mov	r3, #34	; 0x22
   16c68:	b	16c48 <__assert_fail@plt+0x5734>
   16c6c:	cmp	r0, #1
   16c70:	bne	16c98 <__assert_fail@plt+0x5784>
   16c74:	bl	113b8 <__errno_location@plt>
   16c78:	mov	r3, #75	; 0x4b
   16c7c:	cmp	r4, #0
   16c80:	str	r3, [r0]
   16c84:	bne	16cb8 <__assert_fail@plt+0x57a4>
   16c88:	bl	113b8 <__errno_location@plt>
   16c8c:	mov	r4, #1
   16c90:	ldr	r5, [r0]
   16c94:	b	16cc8 <__assert_fail@plt+0x57b4>
   16c98:	cmp	r0, #3
   16c9c:	bne	16cac <__assert_fail@plt+0x5798>
   16ca0:	bl	113b8 <__errno_location@plt>
   16ca4:	mov	r3, #0
   16ca8:	b	16c7c <__assert_fail@plt+0x5768>
   16cac:	cmp	r4, #0
   16cb0:	bne	16cb8 <__assert_fail@plt+0x57a4>
   16cb4:	mov	r4, #1
   16cb8:	bl	113b8 <__errno_location@plt>
   16cbc:	ldr	r5, [r0]
   16cc0:	cmp	r5, #22
   16cc4:	moveq	r5, #0
   16cc8:	mov	r0, r6
   16ccc:	bl	15e6c <__assert_fail@plt+0x4958>
   16cd0:	ldr	r3, [sp, #52]	; 0x34
   16cd4:	ldr	r2, [pc, #20]	; 16cf0 <__assert_fail@plt+0x57dc>
   16cd8:	mov	r1, r5
   16cdc:	str	r0, [sp]
   16ce0:	mov	r0, r4
   16ce4:	bl	112ec <error@plt>
   16ce8:	add	sp, sp, #16
   16cec:	pop	{r4, r5, r6, r8, r9, pc}
   16cf0:	muleq	r1, r2, fp
   16cf4:	push	{r4, r5}
   16cf8:	mov	r1, #10
   16cfc:	pop	{r4, r5}
   16d00:	b	16bc8 <__assert_fail@plt+0x56b4>
   16d04:	push	{r4, r5, r6, lr}
   16d08:	subs	r5, r1, #0
   16d0c:	mov	r4, r0
   16d10:	bge	16d50 <__assert_fail@plt+0x583c>
   16d14:	ldm	r0, {r0, r3}
   16d18:	orr	r0, r0, r3
   16d1c:	adds	r0, r0, #0
   16d20:	movne	r0, #1
   16d24:	cmp	r0, #0
   16d28:	bne	16d84 <__assert_fail@plt+0x5870>
   16d2c:	ldr	r2, [r4]
   16d30:	asr	r3, r5, #31
   16d34:	ldr	r1, [r4, #4]
   16d38:	mul	r3, r3, r2
   16d3c:	mla	r1, r5, r1, r3
   16d40:	umull	r2, r3, r2, r5
   16d44:	add	r3, r1, r3
   16d48:	strd	r2, [r4]
   16d4c:	pop	{r4, r5, r6, pc}
   16d50:	moveq	r0, r5
   16d54:	beq	16d24 <__assert_fail@plt+0x5810>
   16d58:	mov	r2, r5
   16d5c:	asr	r3, r5, #31
   16d60:	mvn	r0, #0
   16d64:	mvn	r1, #0
   16d68:	bl	17a20 <__assert_fail@plt+0x650c>
   16d6c:	ldrd	r2, [r4]
   16d70:	cmp	r1, r3
   16d74:	cmpeq	r0, r2
   16d78:	movcc	r0, #1
   16d7c:	movcs	r0, #0
   16d80:	b	16d24 <__assert_fail@plt+0x5810>
   16d84:	mvn	r2, #0
   16d88:	mvn	r3, #0
   16d8c:	mov	r0, #1
   16d90:	strd	r2, [r4]
   16d94:	pop	{r4, r5, r6, pc}
   16d98:	push	{r4, r5, r6, r7, r8, lr}
   16d9c:	mov	r6, r0
   16da0:	mov	r7, r1
   16da4:	mov	r5, r2
   16da8:	mov	r4, #0
   16dac:	cmp	r5, #0
   16db0:	bne	16dbc <__assert_fail@plt+0x58a8>
   16db4:	mov	r0, r4
   16db8:	pop	{r4, r5, r6, r7, r8, pc}
   16dbc:	mov	r1, r7
   16dc0:	mov	r0, r6
   16dc4:	bl	16d04 <__assert_fail@plt+0x57f0>
   16dc8:	sub	r5, r5, #1
   16dcc:	orr	r4, r4, r0
   16dd0:	b	16dac <__assert_fail@plt+0x5898>
   16dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd8:	sub	sp, sp, #20
   16ddc:	cmp	r2, #36	; 0x24
   16de0:	ldr	r9, [sp, #56]	; 0x38
   16de4:	bls	16dfc <__assert_fail@plt+0x58e8>
   16de8:	ldr	r3, [pc, #772]	; 170f4 <__assert_fail@plt+0x5be0>
   16dec:	mov	r2, #85	; 0x55
   16df0:	ldr	r1, [pc, #768]	; 170f8 <__assert_fail@plt+0x5be4>
   16df4:	ldr	r0, [pc, #768]	; 170fc <__assert_fail@plt+0x5be8>
   16df8:	bl	11514 <__assert_fail@plt>
   16dfc:	cmp	r1, #0
   16e00:	mov	r7, r1
   16e04:	mov	r4, r0
   16e08:	mov	fp, r2
   16e0c:	mov	r8, r3
   16e10:	addeq	r7, sp, #4
   16e14:	bl	113b8 <__errno_location@plt>
   16e18:	mov	r3, #0
   16e1c:	str	r3, [r0]
   16e20:	mov	sl, r0
   16e24:	bl	11358 <__ctype_b_loc@plt>
   16e28:	ldrb	r6, [r4]
   16e2c:	mov	r3, r4
   16e30:	ldr	r1, [r0]
   16e34:	lsl	r2, r6, #1
   16e38:	ldrh	r5, [r1, r2]
   16e3c:	ands	r5, r5, #8192	; 0x2000
   16e40:	bne	16e5c <__assert_fail@plt+0x5948>
   16e44:	cmp	r6, #45	; 0x2d
   16e48:	bne	16e64 <__assert_fail@plt+0x5950>
   16e4c:	mov	r5, #4
   16e50:	mov	r0, r5
   16e54:	add	sp, sp, #20
   16e58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e5c:	ldrb	r6, [r3, #1]!
   16e60:	b	16e34 <__assert_fail@plt+0x5920>
   16e64:	mov	r2, fp
   16e68:	mov	r1, r7
   16e6c:	mov	r0, r4
   16e70:	bl	1140c <strtoumax@plt>
   16e74:	ldr	r6, [r7]
   16e78:	cmp	r4, r6
   16e7c:	strd	r0, [sp, #8]
   16e80:	bne	16ee4 <__assert_fail@plt+0x59d0>
   16e84:	cmp	r9, #0
   16e88:	beq	16e4c <__assert_fail@plt+0x5938>
   16e8c:	ldrb	r1, [r6]
   16e90:	cmp	r1, #0
   16e94:	beq	16e4c <__assert_fail@plt+0x5938>
   16e98:	mov	r0, r9
   16e9c:	bl	11388 <strchr@plt>
   16ea0:	cmp	r0, #0
   16ea4:	beq	16e4c <__assert_fail@plt+0x5938>
   16ea8:	mov	r2, #1
   16eac:	mov	r3, #0
   16eb0:	strd	r2, [sp, #8]
   16eb4:	ldrb	r4, [r6]
   16eb8:	cmp	r4, #0
   16ebc:	beq	16ff4 <__assert_fail@plt+0x5ae0>
   16ec0:	mov	r1, r4
   16ec4:	mov	r0, r9
   16ec8:	bl	11388 <strchr@plt>
   16ecc:	cmp	r0, #0
   16ed0:	bne	16f0c <__assert_fail@plt+0x59f8>
   16ed4:	ldrd	r2, [sp, #8]
   16ed8:	orr	r5, r5, #2
   16edc:	strd	r2, [r8]
   16ee0:	b	16e50 <__assert_fail@plt+0x593c>
   16ee4:	ldr	r5, [sl]
   16ee8:	cmp	r5, #0
   16eec:	beq	16efc <__assert_fail@plt+0x59e8>
   16ef0:	cmp	r5, #34	; 0x22
   16ef4:	bne	16e4c <__assert_fail@plt+0x5938>
   16ef8:	mov	r5, #1
   16efc:	cmp	r9, #0
   16f00:	bne	16eb4 <__assert_fail@plt+0x59a0>
   16f04:	strd	r0, [r8]
   16f08:	b	16e50 <__assert_fail@plt+0x593c>
   16f0c:	cmp	r4, #84	; 0x54
   16f10:	beq	16f64 <__assert_fail@plt+0x5a50>
   16f14:	bhi	16f4c <__assert_fail@plt+0x5a38>
   16f18:	cmp	r4, #75	; 0x4b
   16f1c:	beq	16f64 <__assert_fail@plt+0x5a50>
   16f20:	bhi	16f3c <__assert_fail@plt+0x5a28>
   16f24:	cmp	r4, #69	; 0x45
   16f28:	beq	16f64 <__assert_fail@plt+0x5a50>
   16f2c:	cmp	r4, #71	; 0x47
   16f30:	beq	16f64 <__assert_fail@plt+0x5a50>
   16f34:	mov	r6, #1
   16f38:	b	17028 <__assert_fail@plt+0x5b14>
   16f3c:	cmp	r4, #77	; 0x4d
   16f40:	beq	16f64 <__assert_fail@plt+0x5a50>
   16f44:	cmp	r4, #80	; 0x50
   16f48:	b	16f30 <__assert_fail@plt+0x5a1c>
   16f4c:	cmp	r4, #103	; 0x67
   16f50:	beq	16f64 <__assert_fail@plt+0x5a50>
   16f54:	bhi	17000 <__assert_fail@plt+0x5aec>
   16f58:	sub	r3, r4, #89	; 0x59
   16f5c:	cmp	r3, #1
   16f60:	bhi	16f34 <__assert_fail@plt+0x5a20>
   16f64:	mov	r1, #48	; 0x30
   16f68:	mov	r0, r9
   16f6c:	bl	11388 <strchr@plt>
   16f70:	cmp	r0, #0
   16f74:	beq	16f34 <__assert_fail@plt+0x5a20>
   16f78:	ldrb	r3, [r6, #1]
   16f7c:	cmp	r3, #68	; 0x44
   16f80:	beq	16f94 <__assert_fail@plt+0x5a80>
   16f84:	cmp	r3, #105	; 0x69
   16f88:	beq	17018 <__assert_fail@plt+0x5b04>
   16f8c:	cmp	r3, #66	; 0x42
   16f90:	bne	16f34 <__assert_fail@plt+0x5a20>
   16f94:	mov	r6, #2
   16f98:	mov	r1, #1000	; 0x3e8
   16f9c:	cmp	r4, #89	; 0x59
   16fa0:	beq	170dc <__assert_fail@plt+0x5bc8>
   16fa4:	bhi	17050 <__assert_fail@plt+0x5b3c>
   16fa8:	cmp	r4, #75	; 0x4b
   16fac:	beq	17090 <__assert_fail@plt+0x5b7c>
   16fb0:	bhi	17030 <__assert_fail@plt+0x5b1c>
   16fb4:	cmp	r4, #69	; 0x45
   16fb8:	beq	170b8 <__assert_fail@plt+0x5ba4>
   16fbc:	cmp	r4, #71	; 0x47
   16fc0:	beq	170c4 <__assert_fail@plt+0x5bb0>
   16fc4:	cmp	r4, #66	; 0x42
   16fc8:	moveq	r1, #1024	; 0x400
   16fcc:	bne	16ed4 <__assert_fail@plt+0x59c0>
   16fd0:	add	r0, sp, #8
   16fd4:	bl	16d04 <__assert_fail@plt+0x57f0>
   16fd8:	ldr	r3, [r7]
   16fdc:	orr	r5, r5, r0
   16fe0:	add	r2, r3, r6
   16fe4:	str	r2, [r7]
   16fe8:	ldrb	r3, [r3, r6]
   16fec:	cmp	r3, #0
   16ff0:	orrne	r5, r5, #2
   16ff4:	ldrd	r2, [sp, #8]
   16ff8:	strd	r2, [r8]
   16ffc:	b	16e50 <__assert_fail@plt+0x593c>
   17000:	cmp	r4, #109	; 0x6d
   17004:	beq	16f64 <__assert_fail@plt+0x5a50>
   17008:	cmp	r4, #116	; 0x74
   1700c:	beq	16f64 <__assert_fail@plt+0x5a50>
   17010:	cmp	r4, #107	; 0x6b
   17014:	b	16f30 <__assert_fail@plt+0x5a1c>
   17018:	ldrb	r6, [r6, #2]
   1701c:	cmp	r6, #66	; 0x42
   17020:	movne	r6, #1
   17024:	moveq	r6, #3
   17028:	mov	r1, #1024	; 0x400
   1702c:	b	16f9c <__assert_fail@plt+0x5a88>
   17030:	cmp	r4, #80	; 0x50
   17034:	beq	170cc <__assert_fail@plt+0x5bb8>
   17038:	cmp	r4, #84	; 0x54
   1703c:	beq	170d4 <__assert_fail@plt+0x5bc0>
   17040:	cmp	r4, #77	; 0x4d
   17044:	bne	16ed4 <__assert_fail@plt+0x59c0>
   17048:	mov	r2, #2
   1704c:	b	170bc <__assert_fail@plt+0x5ba8>
   17050:	cmp	r4, #103	; 0x67
   17054:	beq	170c4 <__assert_fail@plt+0x5bb0>
   17058:	bhi	1707c <__assert_fail@plt+0x5b68>
   1705c:	cmp	r4, #98	; 0x62
   17060:	beq	170b0 <__assert_fail@plt+0x5b9c>
   17064:	cmp	r4, #99	; 0x63
   17068:	beq	170ec <__assert_fail@plt+0x5bd8>
   1706c:	cmp	r4, #90	; 0x5a
   17070:	bne	16ed4 <__assert_fail@plt+0x59c0>
   17074:	mov	r2, #7
   17078:	b	170bc <__assert_fail@plt+0x5ba8>
   1707c:	cmp	r4, #109	; 0x6d
   17080:	beq	17048 <__assert_fail@plt+0x5b34>
   17084:	bhi	17098 <__assert_fail@plt+0x5b84>
   17088:	cmp	r4, #107	; 0x6b
   1708c:	bne	16ed4 <__assert_fail@plt+0x59c0>
   17090:	mov	r2, #1
   17094:	b	170bc <__assert_fail@plt+0x5ba8>
   17098:	cmp	r4, #116	; 0x74
   1709c:	beq	170d4 <__assert_fail@plt+0x5bc0>
   170a0:	cmp	r4, #119	; 0x77
   170a4:	moveq	r1, #2
   170a8:	beq	16fd0 <__assert_fail@plt+0x5abc>
   170ac:	b	16ed4 <__assert_fail@plt+0x59c0>
   170b0:	mov	r1, #512	; 0x200
   170b4:	b	16fd0 <__assert_fail@plt+0x5abc>
   170b8:	mov	r2, #6
   170bc:	add	r0, sp, #8
   170c0:	b	170e4 <__assert_fail@plt+0x5bd0>
   170c4:	mov	r2, #3
   170c8:	b	170bc <__assert_fail@plt+0x5ba8>
   170cc:	mov	r2, #5
   170d0:	b	170bc <__assert_fail@plt+0x5ba8>
   170d4:	mov	r2, #4
   170d8:	b	170bc <__assert_fail@plt+0x5ba8>
   170dc:	mov	r2, #8
   170e0:	add	r0, sp, r2
   170e4:	bl	16d98 <__assert_fail@plt+0x5884>
   170e8:	b	16fd8 <__assert_fail@plt+0x5ac4>
   170ec:	mov	r0, #0
   170f0:	b	16fd8 <__assert_fail@plt+0x5ac4>
   170f4:	andeq	r9, r1, r8, ror #3
   170f8:	strdeq	r9, [r1], -r3
   170fc:	andeq	r9, r1, r1, lsl #4
   17100:	cmp	r1, #0
   17104:	cmpne	r0, #0
   17108:	moveq	r1, #1
   1710c:	moveq	r0, r1
   17110:	umull	r2, r3, r0, r1
   17114:	adds	r3, r3, #0
   17118:	movne	r3, #1
   1711c:	cmp	r2, #0
   17120:	blt	17130 <__assert_fail@plt+0x5c1c>
   17124:	cmp	r3, #0
   17128:	bne	17130 <__assert_fail@plt+0x5c1c>
   1712c:	b	1116c <calloc@plt>
   17130:	push	{r4, lr}
   17134:	bl	113b8 <__errno_location@plt>
   17138:	mov	r3, #12
   1713c:	str	r3, [r0]
   17140:	mov	r0, #0
   17144:	pop	{r4, pc}
   17148:	cmp	r0, #0
   1714c:	mov	r3, #0
   17150:	moveq	r0, #1
   17154:	adds	r3, r3, #0
   17158:	movne	r3, #1
   1715c:	cmp	r0, #0
   17160:	blt	17170 <__assert_fail@plt+0x5c5c>
   17164:	cmp	r3, #0
   17168:	bne	17170 <__assert_fail@plt+0x5c5c>
   1716c:	b	11310 <malloc@plt>
   17170:	push	{r4, lr}
   17174:	bl	113b8 <__errno_location@plt>
   17178:	mov	r3, #12
   1717c:	str	r3, [r0]
   17180:	mov	r0, #0
   17184:	pop	{r4, pc}
   17188:	cmp	r0, #0
   1718c:	push	{r4, lr}
   17190:	mov	r4, r1
   17194:	bne	171a4 <__assert_fail@plt+0x5c90>
   17198:	mov	r0, r1
   1719c:	pop	{r4, lr}
   171a0:	b	17148 <__assert_fail@plt+0x5c34>
   171a4:	cmp	r1, #0
   171a8:	bne	171b8 <__assert_fail@plt+0x5ca4>
   171ac:	bl	1468c <__assert_fail@plt+0x3178>
   171b0:	mov	r0, #0
   171b4:	pop	{r4, pc}
   171b8:	cmp	r1, #0
   171bc:	blt	171cc <__assert_fail@plt+0x5cb8>
   171c0:	mov	r3, #0
   171c4:	cmp	r3, r3
   171c8:	beq	171dc <__assert_fail@plt+0x5cc8>
   171cc:	bl	113b8 <__errno_location@plt>
   171d0:	mov	r3, #12
   171d4:	str	r3, [r0]
   171d8:	b	171b0 <__assert_fail@plt+0x5c9c>
   171dc:	pop	{r4, lr}
   171e0:	b	11250 <realloc@plt>
   171e4:	push	{r4, r5, r6, lr}
   171e8:	mov	r4, r0
   171ec:	bl	112c8 <__fpending@plt>
   171f0:	mov	r5, r0
   171f4:	mov	r0, r4
   171f8:	bl	112d4 <ferror_unlocked@plt>
   171fc:	mov	r6, r0
   17200:	mov	r0, r4
   17204:	bl	14500 <__assert_fail@plt+0x2fec>
   17208:	cmp	r6, #0
   1720c:	mov	r4, r0
   17210:	bne	1723c <__assert_fail@plt+0x5d28>
   17214:	cmp	r0, #0
   17218:	beq	17234 <__assert_fail@plt+0x5d20>
   1721c:	cmp	r5, #0
   17220:	bne	1724c <__assert_fail@plt+0x5d38>
   17224:	bl	113b8 <__errno_location@plt>
   17228:	ldr	r4, [r0]
   1722c:	subs	r4, r4, #9
   17230:	mvnne	r4, #0
   17234:	mov	r0, r4
   17238:	pop	{r4, r5, r6, pc}
   1723c:	cmp	r0, #0
   17240:	bne	1724c <__assert_fail@plt+0x5d38>
   17244:	bl	113b8 <__errno_location@plt>
   17248:	str	r4, [r0]
   1724c:	mvn	r4, #0
   17250:	b	17234 <__assert_fail@plt+0x5d20>
   17254:	push	{r4, lr}
   17258:	mov	r0, #14
   1725c:	bl	1149c <nl_langinfo@plt>
   17260:	ldr	r3, [pc, #24]	; 17280 <__assert_fail@plt+0x5d6c>
   17264:	cmp	r0, #0
   17268:	moveq	r0, r3
   1726c:	ldr	r3, [pc, #16]	; 17284 <__assert_fail@plt+0x5d70>
   17270:	ldrb	r2, [r0]
   17274:	cmp	r2, #0
   17278:	moveq	r0, r3
   1727c:	pop	{r4, pc}
   17280:	andeq	r8, r1, r7, ror #10
   17284:	andeq	r9, r1, r7, lsr #4
   17288:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1728c:	subs	r5, r0, #0
   17290:	addeq	r5, sp, #4
   17294:	mov	r0, r5
   17298:	mov	r7, r2
   1729c:	mov	r6, r1
   172a0:	bl	112e0 <mbrtowc@plt>
   172a4:	cmp	r7, #0
   172a8:	cmnne	r0, #3
   172ac:	mov	r4, r0
   172b0:	bls	172cc <__assert_fail@plt+0x5db8>
   172b4:	mov	r0, #0
   172b8:	bl	174f4 <__assert_fail@plt+0x5fe0>
   172bc:	cmp	r0, #0
   172c0:	moveq	r4, #1
   172c4:	ldrbeq	r3, [r6]
   172c8:	streq	r3, [r5]
   172cc:	mov	r0, r4
   172d0:	add	sp, sp, #12
   172d4:	pop	{r4, r5, r6, r7, pc}
   172d8:	push	{r4, r5, r6, lr}
   172dc:	subs	r4, r2, #0
   172e0:	mov	r6, r0
   172e4:	mov	r5, r1
   172e8:	beq	17300 <__assert_fail@plt+0x5dec>
   172ec:	mov	r1, r4
   172f0:	mvn	r0, #0
   172f4:	bl	175d4 <__assert_fail@plt+0x60c0>
   172f8:	cmp	r0, r5
   172fc:	bcc	17310 <__assert_fail@plt+0x5dfc>
   17300:	mul	r1, r5, r4
   17304:	mov	r0, r6
   17308:	pop	{r4, r5, r6, lr}
   1730c:	b	17188 <__assert_fail@plt+0x5c74>
   17310:	bl	113b8 <__errno_location@plt>
   17314:	mov	r3, #12
   17318:	str	r3, [r0]
   1731c:	mov	r0, #0
   17320:	pop	{r4, r5, r6, pc}
   17324:	mov	r2, #3
   17328:	mov	r1, #0
   1732c:	b	17330 <__assert_fail@plt+0x5e1c>
   17330:	push	{r1, r2, r3}
   17334:	push	{r0, r1, r4, r5, r6, r7, lr}
   17338:	add	r2, sp, #32
   1733c:	ldr	r1, [sp, #28]
   17340:	str	r2, [sp, #4]
   17344:	cmp	r1, #0
   17348:	beq	1738c <__assert_fail@plt+0x5e78>
   1734c:	ldr	r3, [pc, #396]	; 174e0 <__assert_fail@plt+0x5fcc>
   17350:	mov	r6, r0
   17354:	cmp	r1, r3
   17358:	beq	17398 <__assert_fail@plt+0x5e84>
   1735c:	cmp	r1, #11
   17360:	beq	1737c <__assert_fail@plt+0x5e68>
   17364:	bgt	174a8 <__assert_fail@plt+0x5f94>
   17368:	cmp	r1, #3
   1736c:	beq	1737c <__assert_fail@plt+0x5e68>
   17370:	bgt	17484 <__assert_fail@plt+0x5f70>
   17374:	cmp	r1, #1
   17378:	bne	17490 <__assert_fail@plt+0x5f7c>
   1737c:	mov	r0, r6
   17380:	bl	11454 <fcntl64@plt>
   17384:	mov	r4, r0
   17388:	b	17444 <__assert_fail@plt+0x5f30>
   1738c:	ldr	r2, [sp, #32]
   17390:	bl	11454 <fcntl64@plt>
   17394:	b	17384 <__assert_fail@plt+0x5e70>
   17398:	ldr	r5, [pc, #324]	; 174e4 <__assert_fail@plt+0x5fd0>
   1739c:	add	r3, sp, #36	; 0x24
   173a0:	str	r3, [sp, #4]
   173a4:	ldr	r3, [r5]
   173a8:	ldr	r7, [r2]
   173ac:	cmp	r3, #0
   173b0:	mov	r2, r7
   173b4:	blt	17458 <__assert_fail@plt+0x5f44>
   173b8:	bl	11454 <fcntl64@plt>
   173bc:	subs	r4, r0, #0
   173c0:	bge	173d4 <__assert_fail@plt+0x5ec0>
   173c4:	bl	113b8 <__errno_location@plt>
   173c8:	ldr	r3, [r0]
   173cc:	cmp	r3, #22
   173d0:	beq	17424 <__assert_fail@plt+0x5f10>
   173d4:	mov	r3, #1
   173d8:	str	r3, [r5]
   173dc:	cmp	r4, #0
   173e0:	blt	17444 <__assert_fail@plt+0x5f30>
   173e4:	ldr	r5, [r5]
   173e8:	cmn	r5, #1
   173ec:	bne	17444 <__assert_fail@plt+0x5f30>
   173f0:	mov	r1, #1
   173f4:	mov	r0, r4
   173f8:	bl	11454 <fcntl64@plt>
   173fc:	subs	r2, r0, #0
   17400:	bge	17468 <__assert_fail@plt+0x5f54>
   17404:	bl	113b8 <__errno_location@plt>
   17408:	ldr	r7, [r0]
   1740c:	mov	r6, r0
   17410:	mov	r0, r4
   17414:	bl	114fc <close@plt>
   17418:	mov	r4, r5
   1741c:	str	r7, [r6]
   17420:	b	17444 <__assert_fail@plt+0x5f30>
   17424:	mov	r2, r7
   17428:	mov	r1, #0
   1742c:	mov	r0, r6
   17430:	bl	11454 <fcntl64@plt>
   17434:	subs	r4, r0, #0
   17438:	mvnge	r3, #0
   1743c:	strge	r3, [r5]
   17440:	bge	173e4 <__assert_fail@plt+0x5ed0>
   17444:	mov	r0, r4
   17448:	add	sp, sp, #8
   1744c:	pop	{r4, r5, r6, r7, lr}
   17450:	add	sp, sp, #12
   17454:	bx	lr
   17458:	mov	r1, #0
   1745c:	bl	11454 <fcntl64@plt>
   17460:	mov	r4, r0
   17464:	b	173dc <__assert_fail@plt+0x5ec8>
   17468:	orr	r2, r2, #1
   1746c:	mov	r1, #2
   17470:	mov	r0, r4
   17474:	bl	11454 <fcntl64@plt>
   17478:	cmn	r0, #1
   1747c:	bne	17444 <__assert_fail@plt+0x5f30>
   17480:	b	17404 <__assert_fail@plt+0x5ef0>
   17484:	cmp	r1, #8
   17488:	beq	17490 <__assert_fail@plt+0x5f7c>
   1748c:	bgt	174a0 <__assert_fail@plt+0x5f8c>
   17490:	ldr	r3, [sp, #4]
   17494:	mov	r0, r6
   17498:	ldr	r2, [r3]
   1749c:	b	17390 <__assert_fail@plt+0x5e7c>
   174a0:	cmp	r1, #9
   174a4:	b	17378 <__assert_fail@plt+0x5e64>
   174a8:	ldr	r2, [pc, #56]	; 174e8 <__assert_fail@plt+0x5fd4>
   174ac:	cmp	r1, r2
   174b0:	bgt	174c8 <__assert_fail@plt+0x5fb4>
   174b4:	cmp	r1, r3
   174b8:	ldrlt	r3, [pc, #44]	; 174ec <__assert_fail@plt+0x5fd8>
   174bc:	bge	17490 <__assert_fail@plt+0x5f7c>
   174c0:	cmp	r1, r3
   174c4:	b	17378 <__assert_fail@plt+0x5e64>
   174c8:	ldr	r3, [pc, #32]	; 174f0 <__assert_fail@plt+0x5fdc>
   174cc:	cmp	r1, r3
   174d0:	beq	17490 <__assert_fail@plt+0x5f7c>
   174d4:	blt	1737c <__assert_fail@plt+0x5e68>
   174d8:	add	r3, r3, #1
   174dc:	b	174c0 <__assert_fail@plt+0x5fac>
   174e0:	andeq	r0, r0, r6, lsl #8
   174e4:	andeq	sl, r2, r8, ror #12
   174e8:	andeq	r0, r0, r7, lsl #8
   174ec:	andeq	r0, r0, r1, lsl #8
   174f0:	andeq	r0, r0, r9, lsl #8
   174f4:	push	{lr}		; (str lr, [sp, #-4]!)
   174f8:	sub	sp, sp, #268	; 0x10c
   174fc:	ldr	r2, [pc, #64]	; 17544 <__assert_fail@plt+0x6030>
   17500:	add	r1, sp, #4
   17504:	bl	17550 <__assert_fail@plt+0x603c>
   17508:	cmp	r0, #0
   1750c:	movne	r0, #0
   17510:	bne	1753c <__assert_fail@plt+0x6028>
   17514:	ldr	r1, [pc, #44]	; 17548 <__assert_fail@plt+0x6034>
   17518:	add	r0, sp, #4
   1751c:	bl	11190 <strcmp@plt>
   17520:	cmp	r0, #0
   17524:	beq	1753c <__assert_fail@plt+0x6028>
   17528:	ldr	r1, [pc, #28]	; 1754c <__assert_fail@plt+0x6038>
   1752c:	add	r0, sp, #4
   17530:	bl	11190 <strcmp@plt>
   17534:	adds	r0, r0, #0
   17538:	movne	r0, #1
   1753c:	add	sp, sp, #268	; 0x10c
   17540:	pop	{pc}		; (ldr pc, [sp], #4)
   17544:	andeq	r0, r0, r1, lsl #2
   17548:	andeq	r9, r1, sp, lsr #4
   1754c:	andeq	r9, r1, pc, lsr #4
   17550:	push	{r4, r5, r6, lr}
   17554:	mov	r5, r1
   17558:	mov	r1, #0
   1755c:	mov	r4, r2
   17560:	bl	11460 <setlocale@plt>
   17564:	subs	r6, r0, #0
   17568:	bne	1757c <__assert_fail@plt+0x6068>
   1756c:	cmp	r4, #0
   17570:	strbne	r6, [r5]
   17574:	mov	r0, #22
   17578:	pop	{r4, r5, r6, pc}
   1757c:	bl	11370 <strlen@plt>
   17580:	cmp	r4, r0
   17584:	bls	175a0 <__assert_fail@plt+0x608c>
   17588:	add	r2, r0, #1
   1758c:	mov	r1, r6
   17590:	mov	r0, r5
   17594:	bl	111f0 <memcpy@plt>
   17598:	mov	r0, #0
   1759c:	pop	{r4, r5, r6, pc}
   175a0:	cmp	r4, #0
   175a4:	beq	175c4 <__assert_fail@plt+0x60b0>
   175a8:	sub	r4, r4, #1
   175ac:	mov	r2, r4
   175b0:	mov	r1, r6
   175b4:	mov	r0, r5
   175b8:	bl	111f0 <memcpy@plt>
   175bc:	mov	r3, #0
   175c0:	strb	r3, [r5, r4]
   175c4:	mov	r0, #34	; 0x22
   175c8:	pop	{r4, r5, r6, pc}
   175cc:	mov	r1, #0
   175d0:	b	11460 <setlocale@plt>
   175d4:	subs	r2, r1, #1
   175d8:	bxeq	lr
   175dc:	bcc	177b4 <__assert_fail@plt+0x62a0>
   175e0:	cmp	r0, r1
   175e4:	bls	17798 <__assert_fail@plt+0x6284>
   175e8:	tst	r1, r2
   175ec:	beq	177a4 <__assert_fail@plt+0x6290>
   175f0:	clz	r3, r0
   175f4:	clz	r2, r1
   175f8:	sub	r3, r2, r3
   175fc:	rsbs	r3, r3, #31
   17600:	addne	r3, r3, r3, lsl #1
   17604:	mov	r2, #0
   17608:	addne	pc, pc, r3, lsl #2
   1760c:	nop			; (mov r0, r0)
   17610:	cmp	r0, r1, lsl #31
   17614:	adc	r2, r2, r2
   17618:	subcs	r0, r0, r1, lsl #31
   1761c:	cmp	r0, r1, lsl #30
   17620:	adc	r2, r2, r2
   17624:	subcs	r0, r0, r1, lsl #30
   17628:	cmp	r0, r1, lsl #29
   1762c:	adc	r2, r2, r2
   17630:	subcs	r0, r0, r1, lsl #29
   17634:	cmp	r0, r1, lsl #28
   17638:	adc	r2, r2, r2
   1763c:	subcs	r0, r0, r1, lsl #28
   17640:	cmp	r0, r1, lsl #27
   17644:	adc	r2, r2, r2
   17648:	subcs	r0, r0, r1, lsl #27
   1764c:	cmp	r0, r1, lsl #26
   17650:	adc	r2, r2, r2
   17654:	subcs	r0, r0, r1, lsl #26
   17658:	cmp	r0, r1, lsl #25
   1765c:	adc	r2, r2, r2
   17660:	subcs	r0, r0, r1, lsl #25
   17664:	cmp	r0, r1, lsl #24
   17668:	adc	r2, r2, r2
   1766c:	subcs	r0, r0, r1, lsl #24
   17670:	cmp	r0, r1, lsl #23
   17674:	adc	r2, r2, r2
   17678:	subcs	r0, r0, r1, lsl #23
   1767c:	cmp	r0, r1, lsl #22
   17680:	adc	r2, r2, r2
   17684:	subcs	r0, r0, r1, lsl #22
   17688:	cmp	r0, r1, lsl #21
   1768c:	adc	r2, r2, r2
   17690:	subcs	r0, r0, r1, lsl #21
   17694:	cmp	r0, r1, lsl #20
   17698:	adc	r2, r2, r2
   1769c:	subcs	r0, r0, r1, lsl #20
   176a0:	cmp	r0, r1, lsl #19
   176a4:	adc	r2, r2, r2
   176a8:	subcs	r0, r0, r1, lsl #19
   176ac:	cmp	r0, r1, lsl #18
   176b0:	adc	r2, r2, r2
   176b4:	subcs	r0, r0, r1, lsl #18
   176b8:	cmp	r0, r1, lsl #17
   176bc:	adc	r2, r2, r2
   176c0:	subcs	r0, r0, r1, lsl #17
   176c4:	cmp	r0, r1, lsl #16
   176c8:	adc	r2, r2, r2
   176cc:	subcs	r0, r0, r1, lsl #16
   176d0:	cmp	r0, r1, lsl #15
   176d4:	adc	r2, r2, r2
   176d8:	subcs	r0, r0, r1, lsl #15
   176dc:	cmp	r0, r1, lsl #14
   176e0:	adc	r2, r2, r2
   176e4:	subcs	r0, r0, r1, lsl #14
   176e8:	cmp	r0, r1, lsl #13
   176ec:	adc	r2, r2, r2
   176f0:	subcs	r0, r0, r1, lsl #13
   176f4:	cmp	r0, r1, lsl #12
   176f8:	adc	r2, r2, r2
   176fc:	subcs	r0, r0, r1, lsl #12
   17700:	cmp	r0, r1, lsl #11
   17704:	adc	r2, r2, r2
   17708:	subcs	r0, r0, r1, lsl #11
   1770c:	cmp	r0, r1, lsl #10
   17710:	adc	r2, r2, r2
   17714:	subcs	r0, r0, r1, lsl #10
   17718:	cmp	r0, r1, lsl #9
   1771c:	adc	r2, r2, r2
   17720:	subcs	r0, r0, r1, lsl #9
   17724:	cmp	r0, r1, lsl #8
   17728:	adc	r2, r2, r2
   1772c:	subcs	r0, r0, r1, lsl #8
   17730:	cmp	r0, r1, lsl #7
   17734:	adc	r2, r2, r2
   17738:	subcs	r0, r0, r1, lsl #7
   1773c:	cmp	r0, r1, lsl #6
   17740:	adc	r2, r2, r2
   17744:	subcs	r0, r0, r1, lsl #6
   17748:	cmp	r0, r1, lsl #5
   1774c:	adc	r2, r2, r2
   17750:	subcs	r0, r0, r1, lsl #5
   17754:	cmp	r0, r1, lsl #4
   17758:	adc	r2, r2, r2
   1775c:	subcs	r0, r0, r1, lsl #4
   17760:	cmp	r0, r1, lsl #3
   17764:	adc	r2, r2, r2
   17768:	subcs	r0, r0, r1, lsl #3
   1776c:	cmp	r0, r1, lsl #2
   17770:	adc	r2, r2, r2
   17774:	subcs	r0, r0, r1, lsl #2
   17778:	cmp	r0, r1, lsl #1
   1777c:	adc	r2, r2, r2
   17780:	subcs	r0, r0, r1, lsl #1
   17784:	cmp	r0, r1
   17788:	adc	r2, r2, r2
   1778c:	subcs	r0, r0, r1
   17790:	mov	r0, r2
   17794:	bx	lr
   17798:	moveq	r0, #1
   1779c:	movne	r0, #0
   177a0:	bx	lr
   177a4:	clz	r2, r1
   177a8:	rsb	r2, r2, #31
   177ac:	lsr	r0, r0, r2
   177b0:	bx	lr
   177b4:	cmp	r0, #0
   177b8:	mvnne	r0, #0
   177bc:	b	17a5c <__assert_fail@plt+0x6548>
   177c0:	cmp	r1, #0
   177c4:	beq	177b4 <__assert_fail@plt+0x62a0>
   177c8:	push	{r0, r1, lr}
   177cc:	bl	175d4 <__assert_fail@plt+0x60c0>
   177d0:	pop	{r1, r2, lr}
   177d4:	mul	r3, r2, r0
   177d8:	sub	r1, r1, r3
   177dc:	bx	lr
   177e0:	cmp	r1, #0
   177e4:	beq	179f0 <__assert_fail@plt+0x64dc>
   177e8:	eor	ip, r0, r1
   177ec:	rsbmi	r1, r1, #0
   177f0:	subs	r2, r1, #1
   177f4:	beq	179bc <__assert_fail@plt+0x64a8>
   177f8:	movs	r3, r0
   177fc:	rsbmi	r3, r0, #0
   17800:	cmp	r3, r1
   17804:	bls	179c8 <__assert_fail@plt+0x64b4>
   17808:	tst	r1, r2
   1780c:	beq	179d8 <__assert_fail@plt+0x64c4>
   17810:	clz	r2, r3
   17814:	clz	r0, r1
   17818:	sub	r2, r0, r2
   1781c:	rsbs	r2, r2, #31
   17820:	addne	r2, r2, r2, lsl #1
   17824:	mov	r0, #0
   17828:	addne	pc, pc, r2, lsl #2
   1782c:	nop			; (mov r0, r0)
   17830:	cmp	r3, r1, lsl #31
   17834:	adc	r0, r0, r0
   17838:	subcs	r3, r3, r1, lsl #31
   1783c:	cmp	r3, r1, lsl #30
   17840:	adc	r0, r0, r0
   17844:	subcs	r3, r3, r1, lsl #30
   17848:	cmp	r3, r1, lsl #29
   1784c:	adc	r0, r0, r0
   17850:	subcs	r3, r3, r1, lsl #29
   17854:	cmp	r3, r1, lsl #28
   17858:	adc	r0, r0, r0
   1785c:	subcs	r3, r3, r1, lsl #28
   17860:	cmp	r3, r1, lsl #27
   17864:	adc	r0, r0, r0
   17868:	subcs	r3, r3, r1, lsl #27
   1786c:	cmp	r3, r1, lsl #26
   17870:	adc	r0, r0, r0
   17874:	subcs	r3, r3, r1, lsl #26
   17878:	cmp	r3, r1, lsl #25
   1787c:	adc	r0, r0, r0
   17880:	subcs	r3, r3, r1, lsl #25
   17884:	cmp	r3, r1, lsl #24
   17888:	adc	r0, r0, r0
   1788c:	subcs	r3, r3, r1, lsl #24
   17890:	cmp	r3, r1, lsl #23
   17894:	adc	r0, r0, r0
   17898:	subcs	r3, r3, r1, lsl #23
   1789c:	cmp	r3, r1, lsl #22
   178a0:	adc	r0, r0, r0
   178a4:	subcs	r3, r3, r1, lsl #22
   178a8:	cmp	r3, r1, lsl #21
   178ac:	adc	r0, r0, r0
   178b0:	subcs	r3, r3, r1, lsl #21
   178b4:	cmp	r3, r1, lsl #20
   178b8:	adc	r0, r0, r0
   178bc:	subcs	r3, r3, r1, lsl #20
   178c0:	cmp	r3, r1, lsl #19
   178c4:	adc	r0, r0, r0
   178c8:	subcs	r3, r3, r1, lsl #19
   178cc:	cmp	r3, r1, lsl #18
   178d0:	adc	r0, r0, r0
   178d4:	subcs	r3, r3, r1, lsl #18
   178d8:	cmp	r3, r1, lsl #17
   178dc:	adc	r0, r0, r0
   178e0:	subcs	r3, r3, r1, lsl #17
   178e4:	cmp	r3, r1, lsl #16
   178e8:	adc	r0, r0, r0
   178ec:	subcs	r3, r3, r1, lsl #16
   178f0:	cmp	r3, r1, lsl #15
   178f4:	adc	r0, r0, r0
   178f8:	subcs	r3, r3, r1, lsl #15
   178fc:	cmp	r3, r1, lsl #14
   17900:	adc	r0, r0, r0
   17904:	subcs	r3, r3, r1, lsl #14
   17908:	cmp	r3, r1, lsl #13
   1790c:	adc	r0, r0, r0
   17910:	subcs	r3, r3, r1, lsl #13
   17914:	cmp	r3, r1, lsl #12
   17918:	adc	r0, r0, r0
   1791c:	subcs	r3, r3, r1, lsl #12
   17920:	cmp	r3, r1, lsl #11
   17924:	adc	r0, r0, r0
   17928:	subcs	r3, r3, r1, lsl #11
   1792c:	cmp	r3, r1, lsl #10
   17930:	adc	r0, r0, r0
   17934:	subcs	r3, r3, r1, lsl #10
   17938:	cmp	r3, r1, lsl #9
   1793c:	adc	r0, r0, r0
   17940:	subcs	r3, r3, r1, lsl #9
   17944:	cmp	r3, r1, lsl #8
   17948:	adc	r0, r0, r0
   1794c:	subcs	r3, r3, r1, lsl #8
   17950:	cmp	r3, r1, lsl #7
   17954:	adc	r0, r0, r0
   17958:	subcs	r3, r3, r1, lsl #7
   1795c:	cmp	r3, r1, lsl #6
   17960:	adc	r0, r0, r0
   17964:	subcs	r3, r3, r1, lsl #6
   17968:	cmp	r3, r1, lsl #5
   1796c:	adc	r0, r0, r0
   17970:	subcs	r3, r3, r1, lsl #5
   17974:	cmp	r3, r1, lsl #4
   17978:	adc	r0, r0, r0
   1797c:	subcs	r3, r3, r1, lsl #4
   17980:	cmp	r3, r1, lsl #3
   17984:	adc	r0, r0, r0
   17988:	subcs	r3, r3, r1, lsl #3
   1798c:	cmp	r3, r1, lsl #2
   17990:	adc	r0, r0, r0
   17994:	subcs	r3, r3, r1, lsl #2
   17998:	cmp	r3, r1, lsl #1
   1799c:	adc	r0, r0, r0
   179a0:	subcs	r3, r3, r1, lsl #1
   179a4:	cmp	r3, r1
   179a8:	adc	r0, r0, r0
   179ac:	subcs	r3, r3, r1
   179b0:	cmp	ip, #0
   179b4:	rsbmi	r0, r0, #0
   179b8:	bx	lr
   179bc:	teq	ip, r0
   179c0:	rsbmi	r0, r0, #0
   179c4:	bx	lr
   179c8:	movcc	r0, #0
   179cc:	asreq	r0, ip, #31
   179d0:	orreq	r0, r0, #1
   179d4:	bx	lr
   179d8:	clz	r2, r1
   179dc:	rsb	r2, r2, #31
   179e0:	cmp	ip, #0
   179e4:	lsr	r0, r3, r2
   179e8:	rsbmi	r0, r0, #0
   179ec:	bx	lr
   179f0:	cmp	r0, #0
   179f4:	mvngt	r0, #-2147483648	; 0x80000000
   179f8:	movlt	r0, #-2147483648	; 0x80000000
   179fc:	b	17a5c <__assert_fail@plt+0x6548>
   17a00:	cmp	r1, #0
   17a04:	beq	179f0 <__assert_fail@plt+0x64dc>
   17a08:	push	{r0, r1, lr}
   17a0c:	bl	177e8 <__assert_fail@plt+0x62d4>
   17a10:	pop	{r1, r2, lr}
   17a14:	mul	r3, r2, r0
   17a18:	sub	r1, r1, r3
   17a1c:	bx	lr
   17a20:	cmp	r3, #0
   17a24:	cmpeq	r2, #0
   17a28:	bne	17a40 <__assert_fail@plt+0x652c>
   17a2c:	cmp	r1, #0
   17a30:	cmpeq	r0, #0
   17a34:	mvnne	r1, #0
   17a38:	mvnne	r0, #0
   17a3c:	b	17a5c <__assert_fail@plt+0x6548>
   17a40:	sub	sp, sp, #8
   17a44:	push	{sp, lr}
   17a48:	bl	17a6c <__assert_fail@plt+0x6558>
   17a4c:	ldr	lr, [sp, #4]
   17a50:	add	sp, sp, #8
   17a54:	pop	{r2, r3}
   17a58:	bx	lr
   17a5c:	push	{r1, lr}
   17a60:	mov	r0, #8
   17a64:	bl	11184 <raise@plt>
   17a68:	pop	{r1, pc}
   17a6c:	cmp	r1, r3
   17a70:	push	{r4, r5, r6, r7, r8, r9, lr}
   17a74:	cmpeq	r0, r2
   17a78:	mov	r4, r0
   17a7c:	mov	r5, r1
   17a80:	ldr	r9, [sp, #28]
   17a84:	movcc	r0, #0
   17a88:	movcc	r1, #0
   17a8c:	bcc	17b84 <__assert_fail@plt+0x6670>
   17a90:	cmp	r3, #0
   17a94:	clzeq	ip, r2
   17a98:	clzne	ip, r3
   17a9c:	addeq	ip, ip, #32
   17aa0:	cmp	r5, #0
   17aa4:	clzeq	r1, r4
   17aa8:	addeq	r1, r1, #32
   17aac:	clzne	r1, r5
   17ab0:	sub	ip, ip, r1
   17ab4:	sub	lr, ip, #32
   17ab8:	lsl	r7, r3, ip
   17abc:	rsb	r8, ip, #32
   17ac0:	orr	r7, r7, r2, lsl lr
   17ac4:	orr	r7, r7, r2, lsr r8
   17ac8:	lsl	r6, r2, ip
   17acc:	cmp	r5, r7
   17ad0:	cmpeq	r4, r6
   17ad4:	movcc	r0, #0
   17ad8:	movcc	r1, #0
   17adc:	bcc	17af8 <__assert_fail@plt+0x65e4>
   17ae0:	mov	r3, #1
   17ae4:	subs	r4, r4, r6
   17ae8:	lsl	r1, r3, lr
   17aec:	lsl	r0, r3, ip
   17af0:	orr	r1, r1, r3, lsr r8
   17af4:	sbc	r5, r5, r7
   17af8:	cmp	ip, #0
   17afc:	beq	17b84 <__assert_fail@plt+0x6670>
   17b00:	lsrs	r3, r7, #1
   17b04:	rrx	r2, r6
   17b08:	mov	r6, ip
   17b0c:	b	17b30 <__assert_fail@plt+0x661c>
   17b10:	subs	r4, r4, r2
   17b14:	sbc	r5, r5, r3
   17b18:	adds	r4, r4, r4
   17b1c:	adc	r5, r5, r5
   17b20:	adds	r4, r4, #1
   17b24:	adc	r5, r5, #0
   17b28:	subs	r6, r6, #1
   17b2c:	beq	17b4c <__assert_fail@plt+0x6638>
   17b30:	cmp	r5, r3
   17b34:	cmpeq	r4, r2
   17b38:	bcs	17b10 <__assert_fail@plt+0x65fc>
   17b3c:	adds	r4, r4, r4
   17b40:	adc	r5, r5, r5
   17b44:	subs	r6, r6, #1
   17b48:	bne	17b30 <__assert_fail@plt+0x661c>
   17b4c:	lsr	r6, r4, ip
   17b50:	lsr	r7, r5, ip
   17b54:	orr	r6, r6, r5, lsl r8
   17b58:	adds	r2, r0, r4
   17b5c:	orr	r6, r6, r5, lsr lr
   17b60:	adc	r3, r1, r5
   17b64:	lsl	r1, r7, ip
   17b68:	orr	r1, r1, r6, lsl lr
   17b6c:	lsl	r0, r6, ip
   17b70:	orr	r1, r1, r6, lsr r8
   17b74:	subs	r0, r2, r0
   17b78:	mov	r4, r6
   17b7c:	mov	r5, r7
   17b80:	sbc	r1, r3, r1
   17b84:	cmp	r9, #0
   17b88:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   17b8c:	strd	r4, [r9]
   17b90:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17b94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17b98:	mov	r7, r0
   17b9c:	ldr	r6, [pc, #72]	; 17bec <__assert_fail@plt+0x66d8>
   17ba0:	ldr	r5, [pc, #72]	; 17bf0 <__assert_fail@plt+0x66dc>
   17ba4:	add	r6, pc, r6
   17ba8:	add	r5, pc, r5
   17bac:	sub	r6, r6, r5
   17bb0:	mov	r8, r1
   17bb4:	mov	r9, r2
   17bb8:	bl	11140 <fdopen@plt-0x20>
   17bbc:	asrs	r6, r6, #2
   17bc0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bc4:	mov	r4, #0
   17bc8:	add	r4, r4, #1
   17bcc:	ldr	r3, [r5], #4
   17bd0:	mov	r2, r9
   17bd4:	mov	r1, r8
   17bd8:	mov	r0, r7
   17bdc:	blx	r3
   17be0:	cmp	r6, r4
   17be4:	bne	17bc8 <__assert_fail@plt+0x66b4>
   17be8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17bec:	andeq	r2, r1, r4, ror #6
   17bf0:	andeq	r2, r1, ip, asr r3
   17bf4:	bx	lr
   17bf8:	ldr	r3, [pc, #12]	; 17c0c <__assert_fail@plt+0x66f8>
   17bfc:	mov	r1, #0
   17c00:	add	r3, pc, r3
   17c04:	ldr	r2, [r3]
   17c08:	b	113d0 <__cxa_atexit@plt>
   17c0c:	andeq	r2, r1, ip, asr #10
   17c10:	mov	r2, r1
   17c14:	mov	r1, r0
   17c18:	mov	r0, #3
   17c1c:	b	11280 <__fxstat64@plt>

Disassembly of section .fini:

00017c20 <.fini>:
   17c20:	push	{r3, lr}
   17c24:	pop	{r3, pc}
