
../repos/charybdis/modules/.libs/m_certfp.so:     file format elf32-littlearm


Disassembly of section .init:

0000043c <_init>:
 43c:	push	{r3, lr}
 440:	bl	4b0 <call_weak_fn>
 444:	pop	{r3, pc}

Disassembly of section .plt:

00000448 <.plt>:
 448:	push	{lr}		; (str lr, [sp, #-4]!)
 44c:	ldr	lr, [pc, #4]	; 458 <.plt+0x10>
 450:	add	lr, pc, lr
 454:	ldr	pc, [lr, #8]!
 458:	.word	0x00010ba8

0000045c <__cxa_finalize@plt>:
 45c:	add	ip, pc, #0, 12
 460:	add	ip, ip, #16, 20	; 0x10000
 464:	ldr	pc, [ip, #2984]!	; 0xba8

00000468 <free@plt>:
 468:	add	ip, pc, #0, 12
 46c:	add	ip, ip, #16, 20	; 0x10000
 470:	ldr	pc, [ip, #2976]!	; 0xba0

00000474 <rb_outofmemory@plt>:
 474:	add	ip, pc, #0, 12
 478:	add	ip, ip, #16, 20	; 0x10000
 47c:	ldr	pc, [ip, #2968]!	; 0xb98

00000480 <strcpy@plt>:
 480:	add	ip, pc, #0, 12
 484:	add	ip, ip, #16, 20	; 0x10000
 488:	ldr	pc, [ip, #2960]!	; 0xb90

0000048c <malloc@plt>:
 48c:	add	ip, pc, #0, 12
 490:	add	ip, ip, #16, 20	; 0x10000
 494:	ldr	pc, [ip, #2952]!	; 0xb88

00000498 <__gmon_start__@plt>:
 498:	add	ip, pc, #0, 12
 49c:	add	ip, ip, #16, 20	; 0x10000
 4a0:	ldr	pc, [ip, #2944]!	; 0xb80

000004a4 <strlen@plt>:
 4a4:	add	ip, pc, #0, 12
 4a8:	add	ip, ip, #16, 20	; 0x10000
 4ac:	ldr	pc, [ip, #2936]!	; 0xb78

Disassembly of section .text:

000004b0 <call_weak_fn>:
 4b0:	ldr	r3, [pc, #20]	; 4cc <call_weak_fn+0x1c>
 4b4:	ldr	r2, [pc, #20]	; 4d0 <call_weak_fn+0x20>
 4b8:	add	r3, pc, r3
 4bc:	ldr	r2, [r3, r2]
 4c0:	cmp	r2, #0
 4c4:	bxeq	lr
 4c8:	b	498 <__gmon_start__@plt>
 4cc:	.word	0x00010b40
 4d0:	.word	0x00000030

000004d4 <deregister_tm_clones>:
 4d4:	ldr	r0, [pc, #44]	; 508 <deregister_tm_clones+0x34>
 4d8:	ldr	r3, [pc, #44]	; 50c <deregister_tm_clones+0x38>
 4dc:	add	r0, pc, r0
 4e0:	add	r3, pc, r3
 4e4:	cmp	r3, r0
 4e8:	ldr	r3, [pc, #32]	; 510 <deregister_tm_clones+0x3c>
 4ec:	add	r3, pc, r3
 4f0:	bxeq	lr
 4f4:	ldr	r2, [pc, #24]	; 514 <deregister_tm_clones+0x40>
 4f8:	ldr	r3, [r3, r2]
 4fc:	cmp	r3, #0
 500:	bxeq	lr
 504:	bx	r3
 508:	.word	0x00010bcc
 50c:	.word	0x00010bc8
 510:	.word	0x00010b0c
 514:	.word	0x0000002c

00000518 <register_tm_clones>:
 518:	ldr	r0, [pc, #56]	; 558 <register_tm_clones+0x40>
 51c:	ldr	r3, [pc, #56]	; 55c <register_tm_clones+0x44>
 520:	add	r0, pc, r0
 524:	add	r3, pc, r3
 528:	sub	r1, r3, r0
 52c:	ldr	r3, [pc, #44]	; 560 <register_tm_clones+0x48>
 530:	asr	r1, r1, #2
 534:	add	r3, pc, r3
 538:	add	r1, r1, r1, lsr #31
 53c:	asrs	r1, r1, #1
 540:	bxeq	lr
 544:	ldr	r2, [pc, #24]	; 564 <register_tm_clones+0x4c>
 548:	ldr	r3, [r3, r2]
 54c:	cmp	r3, #0
 550:	bxeq	lr
 554:	bx	r3
 558:	.word	0x00010b88
 55c:	.word	0x00010b84
 560:	.word	0x00010ac4
 564:	.word	0x00000034

00000568 <__do_global_dtors_aux>:
 568:	ldr	r3, [pc, #76]	; 5bc <__do_global_dtors_aux+0x54>
 56c:	ldr	r2, [pc, #76]	; 5c0 <__do_global_dtors_aux+0x58>
 570:	add	r3, pc, r3
 574:	add	r2, pc, r2
 578:	ldrb	r3, [r3]
 57c:	cmp	r3, #0
 580:	bxne	lr
 584:	ldr	r3, [pc, #56]	; 5c4 <__do_global_dtors_aux+0x5c>
 588:	push	{r4, lr}
 58c:	ldr	r3, [r2, r3]
 590:	cmp	r3, #0
 594:	beq	5a4 <__do_global_dtors_aux+0x3c>
 598:	ldr	r3, [pc, #40]	; 5c8 <__do_global_dtors_aux+0x60>
 59c:	ldr	r0, [pc, r3]
 5a0:	bl	45c <__cxa_finalize@plt>
 5a4:	bl	4d4 <deregister_tm_clones>
 5a8:	ldr	r3, [pc, #28]	; 5cc <__do_global_dtors_aux+0x64>
 5ac:	mov	r2, #1
 5b0:	add	r3, pc, r3
 5b4:	strb	r2, [r3]
 5b8:	pop	{r4, pc}
 5bc:	.word	0x00010b38
 5c0:	.word	0x00010a84
 5c4:	.word	0x00000028
 5c8:	.word	0x00010a94
 5cc:	.word	0x00010af8

000005d0 <frame_dummy>:
 5d0:	b	518 <register_tm_clones>

000005d4 <rb_strdup>:
 5d4:	str	fp, [sp, #-8]!
 5d8:	str	lr, [sp, #4]
 5dc:	add	fp, sp, #4
 5e0:	sub	sp, sp, #16
 5e4:	str	r0, [fp, #-16]
 5e8:	ldr	r0, [fp, #-16]
 5ec:	bl	4a4 <strlen@plt>
 5f0:	mov	r3, r0
 5f4:	add	r3, r3, #1
 5f8:	mov	r0, r3
 5fc:	bl	48c <malloc@plt>
 600:	mov	r3, r0
 604:	str	r3, [fp, #-8]
 608:	ldr	r3, [fp, #-8]
 60c:	cmp	r3, #0
 610:	moveq	r3, #1
 614:	movne	r3, #0
 618:	uxtb	r3, r3
 61c:	cmp	r3, #0
 620:	beq	628 <rb_strdup+0x54>
 624:	bl	474 <rb_outofmemory@plt>
 628:	ldr	r1, [fp, #-16]
 62c:	ldr	r0, [fp, #-8]
 630:	bl	480 <strcpy@plt>
 634:	ldr	r3, [fp, #-8]
 638:	mov	r0, r3
 63c:	sub	sp, fp, #4
 640:	ldr	fp, [sp]
 644:	add	sp, sp, #4
 648:	pop	{pc}		; (ldr pc, [sp], #4)

0000064c <rb_free>:
 64c:	str	fp, [sp, #-8]!
 650:	str	lr, [sp, #4]
 654:	add	fp, sp, #4
 658:	sub	sp, sp, #8
 65c:	str	r0, [fp, #-8]
 660:	ldr	r3, [fp, #-8]
 664:	cmp	r3, #0
 668:	movne	r3, #1
 66c:	moveq	r3, #0
 670:	uxtb	r3, r3
 674:	cmp	r3, #0
 678:	beq	684 <rb_free+0x38>
 67c:	ldr	r0, [fp, #-8]
 680:	bl	468 <free@plt>
 684:	nop	{0}
 688:	sub	sp, fp, #4
 68c:	ldr	fp, [sp]
 690:	add	sp, sp, #4
 694:	pop	{pc}		; (ldr pc, [sp], #4)

00000698 <me_certfp>:
 698:	str	fp, [sp, #-8]!
 69c:	str	lr, [sp, #4]
 6a0:	add	fp, sp, #4
 6a4:	sub	sp, sp, #16
 6a8:	str	r0, [fp, #-8]
 6ac:	str	r1, [fp, #-12]
 6b0:	str	r2, [fp, #-16]
 6b4:	str	r3, [fp, #-20]	; 0xffffffec
 6b8:	ldr	r3, [fp, #-16]
 6bc:	ldrh	r3, [r3, #80]	; 0x50
 6c0:	cmp	r3, #64	; 0x40
 6c4:	bne	744 <me_certfp+0xac>
 6c8:	ldr	r3, [fp, #-16]
 6cc:	ldr	r3, [r3, #24]
 6d0:	cmp	r3, #0
 6d4:	beq	744 <me_certfp+0xac>
 6d8:	ldr	r3, [fp, #-16]
 6dc:	ldr	r3, [r3, #444]	; 0x1bc
 6e0:	mov	r0, r3
 6e4:	bl	64c <rb_free>
 6e8:	ldr	r3, [fp, #-16]
 6ec:	mov	r2, #0
 6f0:	str	r2, [r3, #444]	; 0x1bc
 6f4:	ldr	r3, [fp, #4]
 6f8:	add	r3, r3, #4
 6fc:	ldr	r3, [r3]
 700:	cmp	r3, #0
 704:	beq	748 <me_certfp+0xb0>
 708:	ldr	r3, [fp, #4]
 70c:	add	r3, r3, #4
 710:	ldr	r3, [r3]
 714:	ldrb	r3, [r3]
 718:	cmp	r3, #0
 71c:	beq	748 <me_certfp+0xb0>
 720:	ldr	r3, [fp, #4]
 724:	add	r3, r3, #4
 728:	ldr	r3, [r3]
 72c:	mov	r0, r3
 730:	bl	5d4 <rb_strdup>
 734:	mov	r2, r0
 738:	ldr	r3, [fp, #-16]
 73c:	str	r2, [r3, #444]	; 0x1bc
 740:	b	748 <me_certfp+0xb0>
 744:	nop	{0}
 748:	sub	sp, fp, #4
 74c:	ldr	fp, [sp]
 750:	add	sp, sp, #4
 754:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00000758 <_fini>:
 758:	push	{r3, lr}
 75c:	pop	{r3, pc}
