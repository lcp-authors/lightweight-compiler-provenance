
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

00011674 <.init>:
   11674:	push	{r3, lr}
   11678:	bl	13694 <__assert_fail@plt+0x1af0>
   1167c:	pop	{r3, pc}

Disassembly of section .plt:

00011680 <pthread_mutex_unlock@plt-0x14>:
   11680:	push	{lr}		; (str lr, [sp, #-4]!)
   11684:	ldr	lr, [pc, #4]	; 11690 <pthread_mutex_unlock@plt-0x4>
   11688:	add	lr, pc, lr
   1168c:	ldr	pc, [lr, #8]!
   11690:	andeq	r9, r3, r0, ror r9

00011694 <pthread_mutex_unlock@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #233472	; 0x39000
   1169c:	ldr	pc, [ip, #2416]!	; 0x970

000116a0 <fstatfs64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #233472	; 0x39000
   116a8:	ldr	pc, [ip, #2408]!	; 0x968

000116ac <calloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #233472	; 0x39000
   116b4:	ldr	pc, [ip, #2400]!	; 0x960

000116b8 <fputs_unlocked@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #233472	; 0x39000
   116c0:	ldr	pc, [ip, #2392]!	; 0x958

000116c4 <wctype@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #233472	; 0x39000
   116cc:	ldr	pc, [ip, #2384]!	; 0x950

000116d0 <raise@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #233472	; 0x39000
   116d8:	ldr	pc, [ip, #2376]!	; 0x948

000116dc <wcrtomb@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #233472	; 0x39000
   116e4:	ldr	pc, [ip, #2368]!	; 0x940

000116e8 <gmtime_r@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #233472	; 0x39000
   116f0:	ldr	pc, [ip, #2360]!	; 0x938

000116f4 <__getdelim@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #233472	; 0x39000
   116fc:	ldr	pc, [ip, #2352]!	; 0x930

00011700 <iswctype@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #233472	; 0x39000
   11708:	ldr	pc, [ip, #2344]!	; 0x928

0001170c <strcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #233472	; 0x39000
   11714:	ldr	pc, [ip, #2336]!	; 0x920

00011718 <pthread_mutex_destroy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #233472	; 0x39000
   11720:	ldr	pc, [ip, #2328]!	; 0x918

00011724 <mktime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #233472	; 0x39000
   1172c:	ldr	pc, [ip, #2320]!	; 0x910

00011730 <fflush@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #233472	; 0x39000
   11738:	ldr	pc, [ip, #2312]!	; 0x908

0001173c <wcwidth@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #233472	; 0x39000
   11744:	ldr	pc, [ip, #2304]!	; 0x900

00011748 <memmove@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #233472	; 0x39000
   11750:	ldr	pc, [ip, #2296]!	; 0x8f8

00011754 <free@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #233472	; 0x39000
   1175c:	ldr	pc, [ip, #2288]!	; 0x8f0

00011760 <pthread_mutex_lock@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #233472	; 0x39000
   11768:	ldr	pc, [ip, #2280]!	; 0x8e8

0001176c <ferror@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #233472	; 0x39000
   11774:	ldr	pc, [ip, #2272]!	; 0x8e0

00011778 <_exit@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #233472	; 0x39000
   11780:	ldr	pc, [ip, #2264]!	; 0x8d8

00011784 <memcpy@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #233472	; 0x39000
   1178c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011790 <pthread_mutex_init@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #233472	; 0x39000
   11798:	ldr	pc, [ip, #2248]!	; 0x8c8

0001179c <__strtoull_internal@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #233472	; 0x39000
   117a4:	ldr	pc, [ip, #2240]!	; 0x8c0

000117a8 <towlower@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #233472	; 0x39000
   117b0:	ldr	pc, [ip, #2232]!	; 0x8b8

000117b4 <mbsinit@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #233472	; 0x39000
   117bc:	ldr	pc, [ip, #2224]!	; 0x8b0

000117c0 <memcmp@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #233472	; 0x39000
   117c8:	ldr	pc, [ip, #2216]!	; 0x8a8

000117cc <fputc_unlocked@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #233472	; 0x39000
   117d4:	ldr	pc, [ip, #2208]!	; 0x8a0

000117d8 <dcgettext@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #233472	; 0x39000
   117e0:	ldr	pc, [ip, #2200]!	; 0x898

000117e4 <dup2@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #233472	; 0x39000
   117ec:	ldr	pc, [ip, #2192]!	; 0x890

000117f0 <realloc@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #233472	; 0x39000
   117f8:	ldr	pc, [ip, #2184]!	; 0x888

000117fc <localtime_r@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #233472	; 0x39000
   11804:	ldr	pc, [ip, #2176]!	; 0x880

00011808 <textdomain@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #233472	; 0x39000
   11810:	ldr	pc, [ip, #2168]!	; 0x878

00011814 <iswcntrl@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #233472	; 0x39000
   1181c:	ldr	pc, [ip, #2160]!	; 0x870

00011820 <__fxstatat64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #233472	; 0x39000
   11828:	ldr	pc, [ip, #2152]!	; 0x868

0001182c <fflush_unlocked@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #233472	; 0x39000
   11834:	ldr	pc, [ip, #2144]!	; 0x860

00011838 <iswprint@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #233472	; 0x39000
   11840:	ldr	pc, [ip, #2136]!	; 0x858

00011844 <tzset@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #233472	; 0x39000
   1184c:	ldr	pc, [ip, #2128]!	; 0x850

00011850 <__fxstat64@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #233472	; 0x39000
   11858:	ldr	pc, [ip, #2120]!	; 0x848

0001185c <__memcpy_chk@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #233472	; 0x39000
   11864:	ldr	pc, [ip, #2112]!	; 0x840

00011868 <fwrite@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #233472	; 0x39000
   11870:	ldr	pc, [ip, #2104]!	; 0x838

00011874 <lseek64@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #233472	; 0x39000
   1187c:	ldr	pc, [ip, #2096]!	; 0x830

00011880 <__ctype_get_mb_cur_max@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #233472	; 0x39000
   11888:	ldr	pc, [ip, #2088]!	; 0x828

0001188c <hasmntopt@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #233472	; 0x39000
   11894:	ldr	pc, [ip, #2080]!	; 0x820

00011898 <strcpy@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #233472	; 0x39000
   118a0:	ldr	pc, [ip, #2072]!	; 0x818

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #233472	; 0x39000
   118ac:	ldr	pc, [ip, #2064]!	; 0x810

000118b0 <mbrtowc@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #233472	; 0x39000
   118b8:	ldr	pc, [ip, #2056]!	; 0x808

000118bc <error@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #233472	; 0x39000
   118c4:	ldr	pc, [ip, #2048]!	; 0x800

000118c8 <getmntent@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #233472	; 0x39000
   118d0:	ldr	pc, [ip, #2040]!	; 0x7f8

000118d4 <fnmatch@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #233472	; 0x39000
   118dc:	ldr	pc, [ip, #2032]!	; 0x7f0

000118e0 <open64@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #233472	; 0x39000
   118e8:	ldr	pc, [ip, #2024]!	; 0x7e8

000118ec <getenv@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #233472	; 0x39000
   118f4:	ldr	pc, [ip, #2016]!	; 0x7e0

000118f8 <malloc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #233472	; 0x39000
   11900:	ldr	pc, [ip, #2008]!	; 0x7d8

00011904 <__libc_start_main@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #233472	; 0x39000
   1190c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011910 <strftime@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #233472	; 0x39000
   11918:	ldr	pc, [ip, #1992]!	; 0x7c8

0001191c <__freading@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #233472	; 0x39000
   11924:	ldr	pc, [ip, #1984]!	; 0x7c0

00011928 <__ctype_tolower_loc@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #233472	; 0x39000
   11930:	ldr	pc, [ip, #1976]!	; 0x7b8

00011934 <__ctype_toupper_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #233472	; 0x39000
   1193c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011940 <__gmon_start__@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #233472	; 0x39000
   11948:	ldr	pc, [ip, #1960]!	; 0x7a8

0001194c <freopen64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #233472	; 0x39000
   11954:	ldr	pc, [ip, #1952]!	; 0x7a0

00011958 <getopt_long@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #233472	; 0x39000
   11960:	ldr	pc, [ip, #1944]!	; 0x798

00011964 <__ctype_b_loc@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #233472	; 0x39000
   1196c:	ldr	pc, [ip, #1936]!	; 0x790

00011970 <exit@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #233472	; 0x39000
   11978:	ldr	pc, [ip, #1928]!	; 0x788

0001197c <feof@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #233472	; 0x39000
   11984:	ldr	pc, [ip, #1920]!	; 0x780

00011988 <strlen@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #233472	; 0x39000
   11990:	ldr	pc, [ip, #1912]!	; 0x778

00011994 <strchr@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #233472	; 0x39000
   1199c:	ldr	pc, [ip, #1904]!	; 0x770

000119a0 <setenv@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #233472	; 0x39000
   119a8:	ldr	pc, [ip, #1896]!	; 0x768

000119ac <openat64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #233472	; 0x39000
   119b4:	ldr	pc, [ip, #1888]!	; 0x760

000119b8 <__errno_location@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #233472	; 0x39000
   119c0:	ldr	pc, [ip, #1880]!	; 0x758

000119c4 <iswalnum@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #233472	; 0x39000
   119cc:	ldr	pc, [ip, #1872]!	; 0x750

000119d0 <__sprintf_chk@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #233472	; 0x39000
   119d8:	ldr	pc, [ip, #1864]!	; 0x748

000119dc <__cxa_atexit@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #233472	; 0x39000
   119e4:	ldr	pc, [ip, #1856]!	; 0x740

000119e8 <memset@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #233472	; 0x39000
   119f0:	ldr	pc, [ip, #1848]!	; 0x738

000119f4 <btowc@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #233472	; 0x39000
   119fc:	ldr	pc, [ip, #1840]!	; 0x730

00011a00 <__printf_chk@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #233472	; 0x39000
   11a08:	ldr	pc, [ip, #1832]!	; 0x728

00011a0c <fileno@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #233472	; 0x39000
   11a14:	ldr	pc, [ip, #1824]!	; 0x720

00011a18 <__fprintf_chk@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #233472	; 0x39000
   11a20:	ldr	pc, [ip, #1816]!	; 0x718

00011a24 <memchr@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #233472	; 0x39000
   11a2c:	ldr	pc, [ip, #1808]!	; 0x710

00011a30 <fclose@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #233472	; 0x39000
   11a38:	ldr	pc, [ip, #1800]!	; 0x708

00011a3c <fseeko64@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #233472	; 0x39000
   11a44:	ldr	pc, [ip, #1792]!	; 0x700

00011a48 <endmntent@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #233472	; 0x39000
   11a50:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a54 <fcntl64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #233472	; 0x39000
   11a5c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a60 <__overflow@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #233472	; 0x39000
   11a68:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a6c <setlocale@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #233472	; 0x39000
   11a74:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a78 <strrchr@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #233472	; 0x39000
   11a80:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a84 <nl_langinfo@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #233472	; 0x39000
   11a8c:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a90 <fputc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #233472	; 0x39000
   11a98:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a9c <sscanf@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #233472	; 0x39000
   11aa4:	ldr	pc, [ip, #1728]!	; 0x6c0

00011aa8 <localeconv@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #233472	; 0x39000
   11ab0:	ldr	pc, [ip, #1720]!	; 0x6b8

00011ab4 <readdir64@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #233472	; 0x39000
   11abc:	ldr	pc, [ip, #1712]!	; 0x6b0

00011ac0 <fdopendir@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #233472	; 0x39000
   11ac8:	ldr	pc, [ip, #1704]!	; 0x6a8

00011acc <timegm@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #233472	; 0x39000
   11ad4:	ldr	pc, [ip, #1696]!	; 0x6a0

00011ad8 <dirfd@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #233472	; 0x39000
   11ae0:	ldr	pc, [ip, #1688]!	; 0x698

00011ae4 <fchdir@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #233472	; 0x39000
   11aec:	ldr	pc, [ip, #1680]!	; 0x690

00011af0 <__strtoll_internal@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #233472	; 0x39000
   11af8:	ldr	pc, [ip, #1672]!	; 0x688

00011afc <fopen64@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #233472	; 0x39000
   11b04:	ldr	pc, [ip, #1664]!	; 0x680

00011b08 <qsort@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #233472	; 0x39000
   11b10:	ldr	pc, [ip, #1656]!	; 0x678

00011b14 <setmntent@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #233472	; 0x39000
   11b1c:	ldr	pc, [ip, #1648]!	; 0x670

00011b20 <bindtextdomain@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #233472	; 0x39000
   11b28:	ldr	pc, [ip, #1640]!	; 0x668

00011b2c <getdelim@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #233472	; 0x39000
   11b34:	ldr	pc, [ip, #1632]!	; 0x660

00011b38 <__xstat64@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #233472	; 0x39000
   11b40:	ldr	pc, [ip, #1624]!	; 0x658

00011b44 <unsetenv@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #233472	; 0x39000
   11b4c:	ldr	pc, [ip, #1616]!	; 0x650

00011b50 <towupper@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #233472	; 0x39000
   11b58:	ldr	pc, [ip, #1608]!	; 0x648

00011b5c <strncmp@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #233472	; 0x39000
   11b64:	ldr	pc, [ip, #1600]!	; 0x640

00011b68 <abort@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #233472	; 0x39000
   11b70:	ldr	pc, [ip, #1592]!	; 0x638

00011b74 <getc@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #233472	; 0x39000
   11b7c:	ldr	pc, [ip, #1584]!	; 0x630

00011b80 <close@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #233472	; 0x39000
   11b88:	ldr	pc, [ip, #1576]!	; 0x628

00011b8c <__lxstat64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #233472	; 0x39000
   11b94:	ldr	pc, [ip, #1568]!	; 0x620

00011b98 <closedir@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #233472	; 0x39000
   11ba0:	ldr	pc, [ip, #1560]!	; 0x618

00011ba4 <__assert_fail@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #233472	; 0x39000
   11bac:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00011bb0 <.text>:
   11bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bb4:	sub	sp, sp, #228	; 0xe4
   11bb8:	ldr	r3, [pc, #3840]	; 12ac0 <__assert_fail@plt+0xf1c>
   11bbc:	mov	r8, #0
   11bc0:	mov	r6, r0
   11bc4:	ldr	r0, [r1]
   11bc8:	str	r3, [sp, #112]	; 0x70
   11bcc:	mov	r5, r1
   11bd0:	str	r8, [sp, #116]	; 0x74
   11bd4:	bl	1ec50 <__assert_fail@plt+0xd0ac>
   11bd8:	ldr	r1, [pc, #3812]	; 12ac4 <__assert_fail@plt+0xf20>
   11bdc:	mov	r0, #6
   11be0:	bl	11a6c <setlocale@plt>
   11be4:	ldr	r1, [pc, #3804]	; 12ac8 <__assert_fail@plt+0xf24>
   11be8:	ldr	r0, [pc, #3804]	; 12acc <__assert_fail@plt+0xf28>
   11bec:	bl	11b20 <bindtextdomain@plt>
   11bf0:	ldr	r0, [pc, #3796]	; 12acc <__assert_fail@plt+0xf28>
   11bf4:	bl	11808 <textdomain@plt>
   11bf8:	ldr	r0, [pc, #3792]	; 12ad0 <__assert_fail@plt+0xf2c>
   11bfc:	bl	383dc <__assert_fail@plt+0x26838>
   11c00:	bl	15688 <__assert_fail@plt+0x3ae4>
   11c04:	ldr	r4, [pc, #3784]	; 12ad4 <__assert_fail@plt+0xf30>
   11c08:	ldr	sl, [pc, #3784]	; 12ad8 <__assert_fail@plt+0xf34>
   11c0c:	add	r3, r4, #416	; 0x1a0
   11c10:	str	r3, [sp, #40]	; 0x28
   11c14:	mov	r3, #16
   11c18:	str	r3, [sp, #32]
   11c1c:	mov	r3, #8
   11c20:	str	r3, [sp, #36]	; 0x24
   11c24:	mov	r3, #1
   11c28:	str	r8, [sp, #64]	; 0x40
   11c2c:	str	r8, [sp, #56]	; 0x38
   11c30:	str	r3, [sp, #68]	; 0x44
   11c34:	ldr	r7, [pc, #3744]	; 12adc <__assert_fail@plt+0xf38>
   11c38:	ldr	r9, [pc, #3744]	; 12ae0 <__assert_fail@plt+0xf3c>
   11c3c:	add	fp, sp, #108	; 0x6c
   11c40:	str	r0, [sl, #32]
   11c44:	ldr	r0, [pc, #3736]	; 12ae4 <__assert_fail@plt+0xf40>
   11c48:	bl	118ec <getenv@plt>
   11c4c:	add	r2, sl, #8
   11c50:	mov	r1, sl
   11c54:	bl	1d5a0 <__assert_fail@plt+0xb9fc>
   11c58:	mvn	ip, #0
   11c5c:	str	fp, [sp]
   11c60:	mov	r3, r4
   11c64:	mov	r2, r7
   11c68:	mov	r1, r5
   11c6c:	mov	r0, r6
   11c70:	str	ip, [sp, #108]	; 0x6c
   11c74:	bl	11958 <getopt_long@plt>
   11c78:	cmn	r0, #1
   11c7c:	beq	12430 <__assert_fail@plt+0x88c>
   11c80:	ldr	r3, [pc, #3680]	; 12ae8 <__assert_fail@plt+0xf44>
   11c84:	add	r0, r0, #3
   11c88:	cmp	r0, r3
   11c8c:	ldrls	pc, [pc, r0, lsl #2]
   11c90:	b	123e8 <__assert_fail@plt+0x844>
   11c94:	andeq	r2, r1, ip, ror #5
   11c98:	andeq	r2, r1, r4, ror #5
   11c9c:	andeq	r2, r1, r8, ror #7
   11ca0:	andeq	r2, r1, r8, ror #7
   11ca4:	andeq	r2, r1, r8, ror #7
   11ca8:	andeq	r2, r1, r8, ror #7
   11cac:	andeq	r2, r1, r8, ror #7
   11cb0:	andeq	r2, r1, r8, ror #7
   11cb4:	andeq	r2, r1, r8, ror #7
   11cb8:	andeq	r2, r1, r8, ror #7
   11cbc:	andeq	r2, r1, r8, ror #7
   11cc0:	andeq	r2, r1, r8, ror #7
   11cc4:	andeq	r2, r1, r8, ror #7
   11cc8:	andeq	r2, r1, r8, ror #7
   11ccc:	andeq	r2, r1, r8, ror #7
   11cd0:	andeq	r2, r1, r8, ror #7
   11cd4:	andeq	r2, r1, r8, ror #7
   11cd8:	andeq	r2, r1, r8, ror #7
   11cdc:	andeq	r2, r1, r8, ror #7
   11ce0:	andeq	r2, r1, r8, ror #7
   11ce4:	andeq	r2, r1, r8, ror #7
   11ce8:	andeq	r2, r1, r8, ror #7
   11cec:	andeq	r2, r1, r8, ror #7
   11cf0:	andeq	r2, r1, r8, ror #7
   11cf4:	andeq	r2, r1, r8, ror #7
   11cf8:	andeq	r2, r1, r8, ror #7
   11cfc:	andeq	r2, r1, r8, ror #7
   11d00:	andeq	r2, r1, r8, ror #7
   11d04:	andeq	r2, r1, r8, ror #7
   11d08:	andeq	r2, r1, r8, ror #7
   11d0c:	andeq	r2, r1, r8, ror #7
   11d10:	andeq	r2, r1, r8, ror #7
   11d14:	andeq	r2, r1, r8, ror #7
   11d18:	andeq	r2, r1, r8, ror #7
   11d1c:	andeq	r2, r1, r8, ror #7
   11d20:	andeq	r2, r1, r8, ror #7
   11d24:	andeq	r2, r1, r8, ror #7
   11d28:	andeq	r2, r1, r8, ror #7
   11d2c:	andeq	r2, r1, r8, ror #7
   11d30:	andeq	r2, r1, r8, ror #7
   11d34:	andeq	r2, r1, r8, ror #7
   11d38:	andeq	r2, r1, r8, ror #7
   11d3c:	andeq	r2, r1, r8, ror #7
   11d40:	andeq	r2, r1, r8, ror #7
   11d44:	andeq	r2, r1, r8, ror #7
   11d48:	andeq	r2, r1, r8, ror #7
   11d4c:	andeq	r2, r1, r8, ror #7
   11d50:	andeq	r2, r1, r8, ror #7
   11d54:	andeq	r2, r1, r8, ror #7
   11d58:	andeq	r2, r1, r8, ror #7
   11d5c:	andeq	r2, r1, r8, ror #7
   11d60:	ldrdeq	r2, [r1], -r8
   11d64:	andeq	r2, r1, r8, ror #7
   11d68:	andeq	r2, r1, r8, ror #7
   11d6c:	andeq	r2, r1, r8, ror #7
   11d70:	andeq	r2, r1, r8, ror #7
   11d74:	andeq	r2, r1, r8, ror #7
   11d78:	andeq	r2, r1, r8, ror #7
   11d7c:	andeq	r2, r1, r8, ror #7
   11d80:	andeq	r2, r1, r8, ror #7
   11d84:	andeq	r2, r1, r8, ror #7
   11d88:	andeq	r2, r1, r8, ror #7
   11d8c:	andeq	r2, r1, r8, ror #7
   11d90:	andeq	r2, r1, r8, ror #7
   11d94:	andeq	r2, r1, r8, ror #7
   11d98:	andeq	r2, r1, r8, ror #7
   11d9c:	andeq	r2, r1, r8, ror #7
   11da0:	andeq	r2, r1, r8, ror #7
   11da4:	andeq	r2, r1, r8, ror #7
   11da8:	andeq	r2, r1, r8, lsr #5
   11dac:	andeq	r2, r1, r8, ror #7
   11db0:	muleq	r1, ip, r2
   11db4:	andeq	r2, r1, r8, ror #7
   11db8:	andeq	r2, r1, r8, ror #7
   11dbc:	andeq	r2, r1, r8, ror #7
   11dc0:	muleq	r1, ip, r2
   11dc4:	andeq	r2, r1, r8, ror #7
   11dc8:	andeq	r2, r1, r8, ror #7
   11dcc:	andeq	r2, r1, r8, ror #7
   11dd0:	muleq	r1, r0, r2
   11dd4:	andeq	r2, r1, r8, ror #7
   11dd8:	andeq	r2, r1, r8, ror #7
   11ddc:	andeq	r2, r1, r8, ror #7
   11de0:	andeq	r2, r1, r4, lsl #5
   11de4:	andeq	r2, r1, r8, ror #7
   11de8:	andeq	r2, r1, r8, ror #7
   11dec:	andeq	r2, r1, r8, ror r2
   11df0:	andeq	r2, r1, r8, ror #7
   11df4:	andeq	r2, r1, r8, ror #7
   11df8:	andeq	r2, r1, r8, ror #7
   11dfc:	andeq	r2, r1, r8, ror #7
   11e00:	andeq	r2, r1, r8, lsl r2
   11e04:	andeq	r2, r1, r8, ror #7
   11e08:	andeq	r2, r1, r8, ror #7
   11e0c:	andeq	r2, r1, r8, ror #7
   11e10:	andeq	r2, r1, r8, ror #7
   11e14:	andeq	r2, r1, r8, ror #7
   11e18:	andeq	r2, r1, r8, ror #7
   11e1c:	andeq	r2, r1, r8, ror #7
   11e20:	andeq	r2, r1, r8, ror #7
   11e24:	andeq	r2, r1, ip, lsl #4
   11e28:	andeq	r2, r1, ip, ror #3
   11e2c:	andeq	r2, r1, r0, ror #3
   11e30:	andeq	r2, r1, r8, lsl #3
   11e34:	andeq	r2, r1, r8, ror #7
   11e38:	andeq	r2, r1, r8, ror #7
   11e3c:	andeq	r2, r1, r8, ror #7
   11e40:	andeq	r2, r1, r0, ror r1
   11e44:	andeq	r2, r1, r8, ror #7
   11e48:	andeq	r2, r1, r8, ror #7
   11e4c:	andeq	r2, r1, r8, asr r1
   11e50:	andeq	r2, r1, ip, asr #2
   11e54:	andeq	r2, r1, r4, lsr r1
   11e58:	andeq	r2, r1, r8, ror #7
   11e5c:	andeq	r2, r1, r8, ror #7
   11e60:	andeq	r2, r1, r8, ror #7
   11e64:	andeq	r2, r1, r8, ror #7
   11e68:	andeq	r2, r1, r8, ror #7
   11e6c:	andeq	r2, r1, ip, lsr #2
   11e70:	andeq	r2, r1, ip, asr #1
   11e74:	andeq	r2, r1, r8, ror #7
   11e78:	andeq	r2, r1, r8, ror #7
   11e7c:	andeq	r2, r1, r8, ror #7
   11e80:	andeq	r2, r1, r0, asr #1
   11e84:	andeq	r2, r1, r8, ror #7
   11e88:	andeq	r2, r1, r8, ror #7
   11e8c:	andeq	r2, r1, r8, ror #7
   11e90:	andeq	r2, r1, r8, ror #7
   11e94:	andeq	r2, r1, r8, ror #7
   11e98:	andeq	r2, r1, r8, ror #7
   11e9c:	andeq	r2, r1, r8, ror #7
   11ea0:	andeq	r2, r1, r8, ror #7
   11ea4:	andeq	r2, r1, r8, ror #7
   11ea8:	andeq	r2, r1, r8, ror #7
   11eac:	andeq	r2, r1, r8, ror #7
   11eb0:	andeq	r2, r1, r8, ror #7
   11eb4:	andeq	r2, r1, r8, ror #7
   11eb8:	andeq	r2, r1, r8, ror #7
   11ebc:	andeq	r2, r1, r8, ror #7
   11ec0:	andeq	r2, r1, r8, ror #7
   11ec4:	andeq	r2, r1, r8, ror #7
   11ec8:	andeq	r2, r1, r8, ror #7
   11ecc:	andeq	r2, r1, r8, ror #7
   11ed0:	andeq	r2, r1, r8, ror #7
   11ed4:	andeq	r2, r1, r8, ror #7
   11ed8:	andeq	r2, r1, r8, ror #7
   11edc:	andeq	r2, r1, r8, ror #7
   11ee0:	andeq	r2, r1, r8, ror #7
   11ee4:	andeq	r2, r1, r8, ror #7
   11ee8:	andeq	r2, r1, r8, ror #7
   11eec:	andeq	r2, r1, r8, ror #7
   11ef0:	andeq	r2, r1, r8, ror #7
   11ef4:	andeq	r2, r1, r8, ror #7
   11ef8:	andeq	r2, r1, r8, ror #7
   11efc:	andeq	r2, r1, r8, ror #7
   11f00:	andeq	r2, r1, r8, ror #7
   11f04:	andeq	r2, r1, r8, ror #7
   11f08:	andeq	r2, r1, r8, ror #7
   11f0c:	andeq	r2, r1, r8, ror #7
   11f10:	andeq	r2, r1, r8, ror #7
   11f14:	andeq	r2, r1, r8, ror #7
   11f18:	andeq	r2, r1, r8, ror #7
   11f1c:	andeq	r2, r1, r8, ror #7
   11f20:	andeq	r2, r1, r8, ror #7
   11f24:	andeq	r2, r1, r8, ror #7
   11f28:	andeq	r2, r1, r8, ror #7
   11f2c:	andeq	r2, r1, r8, ror #7
   11f30:	andeq	r2, r1, r8, ror #7
   11f34:	andeq	r2, r1, r8, ror #7
   11f38:	andeq	r2, r1, r8, ror #7
   11f3c:	andeq	r2, r1, r8, ror #7
   11f40:	andeq	r2, r1, r8, ror #7
   11f44:	andeq	r2, r1, r8, ror #7
   11f48:	andeq	r2, r1, r8, ror #7
   11f4c:	andeq	r2, r1, r8, ror #7
   11f50:	andeq	r2, r1, r8, ror #7
   11f54:	andeq	r2, r1, r8, ror #7
   11f58:	andeq	r2, r1, r8, ror #7
   11f5c:	andeq	r2, r1, r8, ror #7
   11f60:	andeq	r2, r1, r8, ror #7
   11f64:	andeq	r2, r1, r8, ror #7
   11f68:	andeq	r2, r1, r8, ror #7
   11f6c:	andeq	r2, r1, r8, ror #7
   11f70:	andeq	r2, r1, r8, ror #7
   11f74:	andeq	r2, r1, r8, ror #7
   11f78:	andeq	r2, r1, r8, ror #7
   11f7c:	andeq	r2, r1, r8, ror #7
   11f80:	andeq	r2, r1, r8, ror #7
   11f84:	andeq	r2, r1, r8, ror #7
   11f88:	andeq	r2, r1, r8, ror #7
   11f8c:	andeq	r2, r1, r8, ror #7
   11f90:	andeq	r2, r1, r8, ror #7
   11f94:	andeq	r2, r1, r8, ror #7
   11f98:	andeq	r2, r1, r8, ror #7
   11f9c:	andeq	r2, r1, r8, ror #7
   11fa0:	andeq	r2, r1, r8, ror #7
   11fa4:	andeq	r2, r1, r8, ror #7
   11fa8:	andeq	r2, r1, r8, ror #7
   11fac:	andeq	r2, r1, r8, ror #7
   11fb0:	andeq	r2, r1, r8, ror #7
   11fb4:	andeq	r2, r1, r8, ror #7
   11fb8:	andeq	r2, r1, r8, ror #7
   11fbc:	andeq	r2, r1, r8, ror #7
   11fc0:	andeq	r2, r1, r8, ror #7
   11fc4:	andeq	r2, r1, r8, ror #7
   11fc8:	andeq	r2, r1, r8, ror #7
   11fcc:	andeq	r2, r1, r8, ror #7
   11fd0:	andeq	r2, r1, r8, ror #7
   11fd4:	andeq	r2, r1, r8, ror #7
   11fd8:	andeq	r2, r1, r8, ror #7
   11fdc:	andeq	r2, r1, r8, ror #7
   11fe0:	andeq	r2, r1, r8, ror #7
   11fe4:	andeq	r2, r1, r8, ror #7
   11fe8:	andeq	r2, r1, r8, ror #7
   11fec:	andeq	r2, r1, r8, ror #7
   11ff0:	andeq	r2, r1, r8, ror #7
   11ff4:	andeq	r2, r1, r8, ror #7
   11ff8:	andeq	r2, r1, r8, ror #7
   11ffc:	andeq	r2, r1, r8, ror #7
   12000:	andeq	r2, r1, r8, ror #7
   12004:	andeq	r2, r1, r8, ror #7
   12008:	andeq	r2, r1, r8, ror #7
   1200c:	andeq	r2, r1, r8, ror #7
   12010:	andeq	r2, r1, r8, ror #7
   12014:	andeq	r2, r1, r8, ror #7
   12018:	andeq	r2, r1, r8, ror #7
   1201c:	andeq	r2, r1, r8, ror #7
   12020:	andeq	r2, r1, r8, ror #7
   12024:	andeq	r2, r1, r8, ror #7
   12028:	andeq	r2, r1, r8, ror #7
   1202c:	andeq	r2, r1, r8, ror #7
   12030:	andeq	r2, r1, r8, ror #7
   12034:	andeq	r2, r1, r8, ror #7
   12038:	andeq	r2, r1, r8, ror #7
   1203c:	andeq	r2, r1, r8, ror #7
   12040:	andeq	r2, r1, r8, ror #7
   12044:	andeq	r2, r1, r8, ror #7
   12048:	andeq	r2, r1, r8, ror #7
   1204c:	andeq	r2, r1, r8, ror #7
   12050:	andeq	r2, r1, r8, ror #7
   12054:	andeq	r2, r1, r8, ror #7
   12058:	andeq	r2, r1, r8, ror #7
   1205c:	andeq	r2, r1, r8, ror #7
   12060:	andeq	r2, r1, r8, ror #7
   12064:	andeq	r2, r1, r8, ror #7
   12068:	andeq	r2, r1, r8, ror #7
   1206c:	andeq	r2, r1, r8, ror #7
   12070:	andeq	r2, r1, r8, ror #7
   12074:	andeq	r2, r1, r8, ror #7
   12078:	andeq	r2, r1, r8, ror #7
   1207c:	andeq	r2, r1, r8, ror #7
   12080:	andeq	r2, r1, r8, ror #7
   12084:	andeq	r2, r1, r8, ror #7
   12088:	andeq	r2, r1, r8, ror #7
   1208c:	andeq	r2, r1, r8, ror #7
   12090:	andeq	r2, r1, r8, ror #7
   12094:	andeq	r2, r1, r8, ror #7
   12098:	andeq	r2, r1, r8, ror #7
   1209c:	andeq	r2, r1, r8, ror #7
   120a0:	ldrdeq	r2, [r1], -ip
   120a4:	andeq	r2, r1, r8, asr #7
   120a8:			; <UNDEFINED> instruction: 0x000123bc
   120ac:	andeq	r2, r1, r4, lsr #7
   120b0:	andeq	r2, r1, r8, ror #7
   120b4:	andeq	r2, r1, r8, asr #6
   120b8:	andeq	r2, r1, ip, lsr r3
   120bc:	andeq	r2, r1, r0, lsr r3
   120c0:	mov	r3, #72	; 0x48
   120c4:	str	r3, [sp, #36]	; 0x24
   120c8:	b	11c58 <__assert_fail@plt+0xb4>
   120cc:	ldr	r3, [pc, #2584]	; 12aec <__assert_fail@plt+0xf48>
   120d0:	mov	r2, #0
   120d4:	str	r3, [sp]
   120d8:	mov	r1, r2
   120dc:	ldr	r3, [pc, #2572]	; 12af0 <__assert_fail@plt+0xf4c>
   120e0:	ldr	r0, [r9]
   120e4:	bl	34ee8 <__assert_fail@plt+0x23344>
   120e8:	subs	r1, r0, #0
   120ec:	bne	13640 <__assert_fail@plt+0x1a9c>
   120f0:	ldrd	r2, [sl, #40]	; 0x28
   120f4:	orrs	r3, r2, r3
   120f8:	bne	11c58 <__assert_fail@plt+0xb4>
   120fc:	ldr	r3, [r9]
   12100:	ldrb	r3, [r3]
   12104:	cmp	r3, #45	; 0x2d
   12108:	bne	11c58 <__assert_fail@plt+0xb4>
   1210c:	mov	r4, r1
   12110:	mov	r2, #5
   12114:	ldr	r1, [pc, #2520]	; 12af4 <__assert_fail@plt+0xf50>
   12118:	bl	117d8 <dcgettext@plt>
   1211c:	mov	r1, r4
   12120:	mov	r2, r0
   12124:	mov	r0, #1
   12128:	bl	118bc <error@plt>
   1212c:	mov	r8, #1
   12130:	b	11c58 <__assert_fail@plt+0xb4>
   12134:	mov	r0, #1048576	; 0x100000
   12138:	mov	r1, #0
   1213c:	mov	r3, #0
   12140:	strd	r0, [sl, #8]
   12144:	str	r3, [sl]
   12148:	b	11c58 <__assert_fail@plt+0xb4>
   1214c:	mov	r3, #1
   12150:	strb	r3, [sl, #39]	; 0x27
   12154:	b	11c58 <__assert_fail@plt+0xb4>
   12158:	mov	r0, #1024	; 0x400
   1215c:	mov	r1, #0
   12160:	mov	r3, #0
   12164:	strd	r0, [sl, #8]
   12168:	str	r3, [sl]
   1216c:	b	11c58 <__assert_fail@plt+0xb4>
   12170:	mov	r0, #1
   12174:	mov	r1, #0
   12178:	mov	r3, #176	; 0xb0
   1217c:	strd	r0, [sl, #8]
   12180:	str	r3, [sl]
   12184:	b	11c58 <__assert_fail@plt+0xb4>
   12188:	ldr	r3, [pc, #2356]	; 12ac4 <__assert_fail@plt+0xf20>
   1218c:	mov	r2, #0
   12190:	str	r3, [sp]
   12194:	mov	r1, r2
   12198:	add	r3, sp, #120	; 0x78
   1219c:	ldr	r0, [r9]
   121a0:	bl	35b30 <__assert_fail@plt+0x23f8c>
   121a4:	cmp	r0, #0
   121a8:	bne	123f4 <__assert_fail@plt+0x850>
   121ac:	ldrd	r2, [sp, #120]	; 0x78
   121b0:	mov	r1, #0
   121b4:	mvn	r0, #0
   121b8:	cmp	r3, r1
   121bc:	cmpeq	r2, r0
   121c0:	strd	r2, [sp, #48]	; 0x30
   121c4:	bhi	123f4 <__assert_fail@plt+0x850>
   121c8:	mov	r2, #1
   121cc:	ldr	r3, [pc, #2340]	; 12af8 <__assert_fail@plt+0xf54>
   121d0:	str	r2, [sp, #56]	; 0x38
   121d4:	ldr	r2, [sp, #48]	; 0x30
   121d8:	str	r2, [r3]
   121dc:	b	11c58 <__assert_fail@plt+0xb4>
   121e0:	mov	r3, #1
   121e4:	strb	r3, [sl, #38]	; 0x26
   121e8:	b	11c58 <__assert_fail@plt+0xb4>
   121ec:	mov	r0, #1
   121f0:	mov	r1, #0
   121f4:	mov	r2, #1
   121f8:	mov	r3, #0
   121fc:	strd	r0, [sl, #8]
   12200:	strb	r2, [sl, #37]	; 0x25
   12204:	str	r3, [sl]
   12208:	b	11c58 <__assert_fail@plt+0xb4>
   1220c:	mov	r3, #1
   12210:	strb	r3, [sl, #36]	; 0x24
   12214:	b	11c58 <__assert_fail@plt+0xb4>
   12218:	mov	r3, #10
   1221c:	str	r3, [sp]
   12220:	ldr	r1, [sl, #32]
   12224:	mov	r3, #268435456	; 0x10000000
   12228:	ldr	r2, [r9]
   1222c:	ldr	r0, [pc, #2248]	; 12afc <__assert_fail@plt+0xf58>
   12230:	bl	15ff0 <__assert_fail@plt+0x444c>
   12234:	cmp	r0, #0
   12238:	beq	11c58 <__assert_fail@plt+0xb4>
   1223c:	bl	119b8 <__errno_location@plt>
   12240:	mov	r3, #0
   12244:	str	r3, [sp, #68]	; 0x44
   12248:	ldr	r2, [r9]
   1224c:	mov	r1, #3
   12250:	ldr	r3, [r0]
   12254:	mov	r0, #0
   12258:	str	r3, [sp, #48]	; 0x30
   1225c:	bl	21c28 <__assert_fail@plt+0x10084>
   12260:	ldr	r1, [sp, #48]	; 0x30
   12264:	ldr	r2, [pc, #2304]	; 12b6c <__assert_fail@plt+0xfc8>
   12268:	mov	r3, r0
   1226c:	mov	r0, #0
   12270:	bl	118bc <error@plt>
   12274:	b	11c58 <__assert_fail@plt+0xb4>
   12278:	mov	r3, #1
   1227c:	strb	r3, [sl, #48]	; 0x30
   12280:	b	11c58 <__assert_fail@plt+0xb4>
   12284:	mov	r3, #16
   12288:	str	r3, [sp, #32]
   1228c:	b	11c58 <__assert_fail@plt+0xb4>
   12290:	mov	r3, #2
   12294:	str	r3, [sp, #32]
   12298:	b	11c58 <__assert_fail@plt+0xb4>
   1229c:	mov	r3, #17
   122a0:	str	r3, [sp, #32]
   122a4:	b	11c58 <__assert_fail@plt+0xb4>
   122a8:	ldr	r2, [pc, #2128]	; 12b00 <__assert_fail@plt+0xf5c>
   122ac:	ldr	r0, [r9]
   122b0:	sub	r1, r2, #8
   122b4:	bl	1d5a0 <__assert_fail@plt+0xb9fc>
   122b8:	cmp	r0, #0
   122bc:	beq	11c58 <__assert_fail@plt+0xb4>
   122c0:	ldr	r2, [r9]
   122c4:	ldr	r3, [pc, #2056]	; 12ad4 <__assert_fail@plt+0xf30>
   122c8:	str	r2, [sp]
   122cc:	ldr	r1, [sp, #108]	; 0x6c
   122d0:	mov	r2, #66	; 0x42
   122d4:	bl	35a7c <__assert_fail@plt+0x23ed8>
   122d8:	mov	r3, #1
   122dc:	strb	r3, [sl, #28]
   122e0:	b	11c58 <__assert_fail@plt+0xb4>
   122e4:	mov	r0, #0
   122e8:	bl	13944 <__assert_fail@plt+0x1da0>
   122ec:	ldr	lr, [pc, #2064]	; 12b04 <__assert_fail@plt+0xf60>
   122f0:	ldr	ip, [pc, #2064]	; 12b08 <__assert_fail@plt+0xf64>
   122f4:	ldr	r1, [pc, #2064]	; 12b0c <__assert_fail@plt+0xf68>
   122f8:	ldr	r3, [pc, #2064]	; 12b10 <__assert_fail@plt+0xf6c>
   122fc:	ldr	r0, [pc, #2064]	; 12b14 <__assert_fail@plt+0xf70>
   12300:	ldr	r2, [pc, #2064]	; 12b18 <__assert_fail@plt+0xf74>
   12304:	mov	r4, #0
   12308:	ldr	r0, [r0]
   1230c:	ldr	r3, [r3]
   12310:	stmib	sp, {r1, ip, lr}
   12314:	str	r2, [sp]
   12318:	str	r4, [sp, #16]
   1231c:	ldr	r2, [pc, #2040]	; 12b1c <__assert_fail@plt+0xf78>
   12320:	ldr	r1, [pc, #2040]	; 12b20 <__assert_fail@plt+0xf7c>
   12324:	bl	345f8 <__assert_fail@plt+0x22a54>
   12328:	mov	r0, r4
   1232c:	bl	11970 <exit@plt>
   12330:	mov	r3, #1
   12334:	strb	r3, [sl, #16]
   12338:	b	11c58 <__assert_fail@plt+0xb4>
   1233c:	ldr	r3, [r9]
   12340:	str	r3, [sl, #56]	; 0x38
   12344:	b	11c58 <__assert_fail@plt+0xb4>
   12348:	ldr	r1, [r9]
   1234c:	mov	r3, #1
   12350:	cmp	r1, #0
   12354:	strb	r3, [sl, #17]
   12358:	beq	1238c <__assert_fail@plt+0x7e8>
   1235c:	ldr	r2, [pc, #2092]	; 12b90 <__assert_fail@plt+0xfec>
   12360:	ldr	r0, [r2]
   12364:	mov	r2, #4
   12368:	str	r2, [sp]
   1236c:	stmib	sp, {r0, r3}
   12370:	ldr	r2, [pc, #1964]	; 12b24 <__assert_fail@plt+0xf80>
   12374:	ldr	r3, [sp, #40]	; 0x28
   12378:	ldr	r0, [pc, #1960]	; 12b28 <__assert_fail@plt+0xf84>
   1237c:	bl	1404c <__assert_fail@plt+0x24a8>
   12380:	ldr	r3, [pc, #2060]	; 12b94 <__assert_fail@plt+0xff0>
   12384:	add	r0, r3, r0, lsl #2
   12388:	ldr	r1, [r0, #472]	; 0x1d8
   1238c:	ldr	r0, [pc, #1944]	; 12b2c <__assert_fail@plt+0xf88>
   12390:	str	r1, [sl, #52]	; 0x34
   12394:	bl	118ec <getenv@plt>
   12398:	bl	33a5c <__assert_fail@plt+0x21eb8>
   1239c:	str	r0, [sl, #24]
   123a0:	b	11c58 <__assert_fail@plt+0xb4>
   123a4:	mov	r0, #1
   123a8:	mov	r1, #0
   123ac:	mov	r3, #144	; 0x90
   123b0:	strd	r0, [sl, #8]
   123b4:	str	r3, [sl]
   123b8:	b	11c58 <__assert_fail@plt+0xb4>
   123bc:	ldr	r3, [r9]
   123c0:	str	r3, [sp, #64]	; 0x40
   123c4:	b	11c58 <__assert_fail@plt+0xb4>
   123c8:	mov	r2, #268435456	; 0x10000000
   123cc:	ldr	r1, [r9]
   123d0:	ldr	r0, [sl, #32]
   123d4:	bl	15ab8 <__assert_fail@plt+0x3f14>
   123d8:	b	11c58 <__assert_fail@plt+0xb4>
   123dc:	mov	r3, #1
   123e0:	strb	r3, [sl, #37]	; 0x25
   123e4:	b	11c58 <__assert_fail@plt+0xb4>
   123e8:	mov	r3, #0
   123ec:	str	r3, [sp, #68]	; 0x44
   123f0:	b	11c58 <__assert_fail@plt+0xb4>
   123f4:	mov	r2, #5
   123f8:	ldr	r1, [pc, #1840]	; 12b30 <__assert_fail@plt+0xf8c>
   123fc:	mov	r0, #0
   12400:	bl	117d8 <dcgettext@plt>
   12404:	str	r0, [sp, #48]	; 0x30
   12408:	ldr	r0, [r9]
   1240c:	bl	22b1c <__assert_fail@plt+0x10f78>
   12410:	mov	r1, #0
   12414:	ldr	r2, [sp, #48]	; 0x30
   12418:	mov	r3, r0
   1241c:	mov	r0, r1
   12420:	bl	118bc <error@plt>
   12424:	mov	r3, #0
   12428:	str	r3, [sp, #68]	; 0x44
   1242c:	b	11c58 <__assert_fail@plt+0xb4>
   12430:	ldr	r3, [sp, #68]	; 0x44
   12434:	cmp	r3, #0
   12438:	beq	13638 <__assert_fail@plt+0x1a94>
   1243c:	ldrb	r3, [sl, #36]	; 0x24
   12440:	ands	r3, r8, r3
   12444:	str	r3, [sp, #96]	; 0x60
   12448:	bne	13618 <__assert_fail@plt+0x1a74>
   1244c:	ldr	r3, [sp, #56]	; 0x38
   12450:	tst	r3, r8
   12454:	bne	12908 <__assert_fail@plt+0xd64>
   12458:	cmp	r8, #0
   1245c:	ldrne	r4, [pc, #1684]	; 12af8 <__assert_fail@plt+0xf54>
   12460:	bne	13324 <__assert_fail@plt+0x1780>
   12464:	ldrb	r3, [sl, #16]
   12468:	cmp	r3, #0
   1246c:	beq	12488 <__assert_fail@plt+0x8e4>
   12470:	ldrb	r3, [sl, #37]	; 0x25
   12474:	cmp	r3, #0
   12478:	bne	13450 <__assert_fail@plt+0x18ac>
   1247c:	mov	r2, #1
   12480:	mov	r3, #0
   12484:	strd	r2, [sl, #8]
   12488:	ldrb	r3, [sl, #17]
   1248c:	cmp	r3, #0
   12490:	beq	124b8 <__assert_fail@plt+0x914>
   12494:	ldr	r7, [sl, #56]	; 0x38
   12498:	cmp	r7, #0
   1249c:	beq	13490 <__assert_fail@plt+0x18ec>
   124a0:	ldr	r1, [sl, #56]	; 0x38
   124a4:	ldrb	r3, [r1]
   124a8:	cmp	r3, #43	; 0x2b
   124ac:	bne	13338 <__assert_fail@plt+0x1794>
   124b0:	add	r1, r1, #1
   124b4:	str	r1, [sl, #20]
   124b8:	ldr	r3, [sp, #64]	; 0x40
   124bc:	ldr	r4, [pc, #1648]	; 12b34 <__assert_fail@plt+0xf90>
   124c0:	cmp	r3, #0
   124c4:	ldr	r3, [r4]
   124c8:	beq	13410 <__assert_fail@plt+0x186c>
   124cc:	cmp	r6, r3
   124d0:	bgt	13554 <__assert_fail@plt+0x19b0>
   124d4:	ldr	r1, [pc, #1628]	; 12b38 <__assert_fail@plt+0xf94>
   124d8:	ldr	r0, [sp, #64]	; 0x40
   124dc:	bl	1170c <strcmp@plt>
   124e0:	ldr	r4, [pc, #1684]	; 12b7c <__assert_fail@plt+0xfd8>
   124e4:	cmp	r0, #0
   124e8:	beq	12504 <__assert_fail@plt+0x960>
   124ec:	ldr	r1, [pc, #1608]	; 12b3c <__assert_fail@plt+0xf98>
   124f0:	ldr	r0, [sp, #64]	; 0x40
   124f4:	ldr	r2, [r4]
   124f8:	bl	18544 <__assert_fail@plt+0x69a0>
   124fc:	subs	r5, r0, #0
   12500:	beq	13518 <__assert_fail@plt+0x1974>
   12504:	ldr	r0, [r4]
   12508:	bl	1431c <__assert_fail@plt+0x2778>
   1250c:	mov	r3, #1
   12510:	strb	r3, [sl, #60]	; 0x3c
   12514:	str	r0, [sp, #72]	; 0x48
   12518:	ldr	r3, [sp, #72]	; 0x48
   1251c:	cmp	r3, #0
   12520:	beq	13400 <__assert_fail@plt+0x185c>
   12524:	bl	145a0 <__assert_fail@plt+0x29fc>
   12528:	cmp	r0, #0
   1252c:	str	r0, [sl, #64]	; 0x40
   12530:	beq	13400 <__assert_fail@plt+0x185c>
   12534:	ldrb	r3, [sl, #39]	; 0x27
   12538:	cmp	r3, #0
   1253c:	bne	1254c <__assert_fail@plt+0x9a8>
   12540:	ldrb	r3, [sl, #60]	; 0x3c
   12544:	cmp	r3, #0
   12548:	bne	12558 <__assert_fail@plt+0x9b4>
   1254c:	ldr	r3, [sp, #36]	; 0x24
   12550:	orr	r3, r3, #256	; 0x100
   12554:	str	r3, [sp, #36]	; 0x24
   12558:	ldr	r3, [sp, #36]	; 0x24
   1255c:	ldr	r2, [sp, #32]
   12560:	orr	r3, r3, r2
   12564:	str	r3, [sp, #100]	; 0x64
   12568:	ldr	r3, [sp, #68]	; 0x44
   1256c:	str	r3, [sp, #76]	; 0x4c
   12570:	mov	r1, fp
   12574:	ldr	r0, [sp, #72]	; 0x48
   12578:	bl	14350 <__assert_fail@plt+0x27ac>
   1257c:	subs	r4, r0, #0
   12580:	beq	130c8 <__assert_fail@plt+0x1524>
   12584:	ldr	r3, [sp, #64]	; 0x40
   12588:	cmp	r3, #0
   1258c:	beq	12f34 <__assert_fail@plt+0x1390>
   12590:	mov	r0, r3
   12594:	ldr	r1, [pc, #1436]	; 12b38 <__assert_fail@plt+0xf94>
   12598:	bl	1170c <strcmp@plt>
   1259c:	cmp	r0, #0
   125a0:	bne	125b8 <__assert_fail@plt+0xa14>
   125a4:	ldr	r1, [pc, #1420]	; 12b38 <__assert_fail@plt+0xf94>
   125a8:	mov	r0, r4
   125ac:	bl	1170c <strcmp@plt>
   125b0:	subs	r5, r0, #0
   125b4:	beq	12a2c <__assert_fail@plt+0xe88>
   125b8:	ldrb	r3, [r4]
   125bc:	cmp	r3, #0
   125c0:	beq	12a68 <__assert_fail@plt+0xec4>
   125c4:	mov	r2, #0
   125c8:	ldr	r1, [sp, #100]	; 0x64
   125cc:	ldr	r0, [pc, #1388]	; 12b40 <__assert_fail@plt+0xf9c>
   125d0:	str	r4, [sl, #68]	; 0x44
   125d4:	bl	34e68 <__assert_fail@plt+0x232c4>
   125d8:	ldr	r9, [sp, #68]	; 0x44
   125dc:	str	r9, [sp, #32]
   125e0:	str	r0, [sp, #48]	; 0x30
   125e4:	b	12674 <__assert_fail@plt+0xad0>
   125e8:	mov	r1, r3
   125ec:	ldr	r0, [sl, #32]
   125f0:	bl	1582c <__assert_fail@plt+0x3c88>
   125f4:	subs	r5, r0, #0
   125f8:	bne	1264c <__assert_fail@plt+0xaa8>
   125fc:	cmp	r9, #11
   12600:	beq	131b8 <__assert_fail@plt+0x1614>
   12604:	cmp	r9, #13
   12608:	cmpne	r9, #10
   1260c:	moveq	r3, #1
   12610:	movne	r3, #0
   12614:	str	r3, [sp, #36]	; 0x24
   12618:	beq	13088 <__assert_fail@plt+0x14e4>
   1261c:	ldr	r2, [sp, #48]	; 0x30
   12620:	ldr	r3, [r2, #48]	; 0x30
   12624:	tst	r3, #64	; 0x40
   12628:	beq	129a0 <__assert_fail@plt+0xdfc>
   1262c:	ldr	r3, [r4, #48]	; 0x30
   12630:	cmp	r3, #0
   12634:	ble	129a0 <__assert_fail@plt+0xdfc>
   12638:	ldrd	r0, [r2, #16]
   1263c:	ldrd	r2, [r4, #64]	; 0x40
   12640:	cmp	r1, r3
   12644:	cmpeq	r0, r2
   12648:	beq	129a0 <__assert_fail@plt+0xdfc>
   1264c:	cmp	r9, #1
   12650:	beq	13050 <__assert_fail@plt+0x14ac>
   12654:	ldr	r3, [sp, #68]	; 0x44
   12658:	str	r3, [sp, #36]	; 0x24
   1265c:	ldr	r3, [sp, #32]
   12660:	ldr	r2, [sp, #36]	; 0x24
   12664:	ldr	r0, [sp, #48]	; 0x30
   12668:	and	r3, r3, r2
   1266c:	uxtb	r3, r3
   12670:	str	r3, [sp, #32]
   12674:	bl	1a360 <__assert_fail@plt+0x87bc>
   12678:	subs	r4, r0, #0
   1267c:	beq	12eb8 <__assert_fail@plt+0x1314>
   12680:	ldrh	r9, [r4, #56]	; 0x38
   12684:	ldr	r3, [r4, #28]
   12688:	cmp	r9, #4
   1268c:	str	r3, [sp, #56]	; 0x38
   12690:	beq	12e58 <__assert_fail@plt+0x12b4>
   12694:	cmp	r9, #6
   12698:	bne	125e8 <__assert_fail@plt+0xa44>
   1269c:	ldr	r3, [sp, #68]	; 0x44
   126a0:	str	r3, [sp, #36]	; 0x24
   126a4:	ldrb	r3, [sl, #37]	; 0x25
   126a8:	cmp	r3, #0
   126ac:	beq	12980 <__assert_fail@plt+0xddc>
   126b0:	ldrd	r2, [r4, #112]	; 0x70
   126b4:	cmp	r2, #0
   126b8:	strd	r2, [sp, #24]
   126bc:	sbcs	r3, r3, #0
   126c0:	blt	12f24 <__assert_fail@plt+0x1380>
   126c4:	ldr	r3, [sl, #52]	; 0x34
   126c8:	cmp	r3, #0
   126cc:	bne	12968 <__assert_fail@plt+0xdc4>
   126d0:	ldr	r7, [r4, #144]	; 0x90
   126d4:	ldr	r8, [r4, #148]	; 0x94
   126d8:	ldr	r6, [r4, #48]	; 0x30
   126dc:	ldr	r3, [sl, #84]	; 0x54
   126e0:	ldrd	r4, [sp, #24]
   126e4:	mov	r0, #1
   126e8:	mov	r1, #0
   126ec:	cmp	r3, #0
   126f0:	strd	r4, [sp, #120]	; 0x78
   126f4:	str	r7, [sp, #136]	; 0x88
   126f8:	str	r8, [sp, #140]	; 0x8c
   126fc:	strd	r0, [sp, #128]	; 0x80
   12700:	beq	12a10 <__assert_fail@plt+0xe6c>
   12704:	ldr	lr, [sl, #76]	; 0x4c
   12708:	cmp	r6, lr
   1270c:	beq	12778 <__assert_fail@plt+0xbd4>
   12710:	bls	12bf0 <__assert_fail@plt+0x104c>
   12714:	cmp	r6, r3
   12718:	bcs	12f74 <__assert_fail@plt+0x13d0>
   1271c:	ldr	r3, [sl, #76]	; 0x4c
   12720:	add	r2, r3, #1
   12724:	cmp	r6, r2
   12728:	bcc	12778 <__assert_fail@plt+0xbd4>
   1272c:	ldr	ip, [sl, #88]	; 0x58
   12730:	add	r3, r3, r3, lsl #1
   12734:	mov	r0, #0
   12738:	add	r3, ip, r3, lsl #4
   1273c:	mov	r1, #0
   12740:	mov	lr, #-2147483648	; 0x80000000
   12744:	mvn	ip, #0
   12748:	add	r2, r2, #1
   1274c:	cmp	r6, r2
   12750:	strd	r0, [r3, #48]	; 0x30
   12754:	strd	r0, [r3, #56]	; 0x38
   12758:	str	lr, [r3, #64]	; 0x40
   1275c:	str	ip, [r3, #68]	; 0x44
   12760:	strd	r0, [r3, #72]	; 0x48
   12764:	strd	r0, [r3, #80]	; 0x50
   12768:	str	lr, [r3, #88]	; 0x58
   1276c:	str	ip, [r3, #92]	; 0x5c
   12770:	add	r3, r3, #48	; 0x30
   12774:	bcs	12748 <__assert_fail@plt+0xba4>
   12778:	ldrb	r3, [sl, #48]	; 0x30
   1277c:	str	r6, [sl, #76]	; 0x4c
   12780:	bic	r9, r9, #2
   12784:	cmp	r3, #0
   12788:	beq	12794 <__assert_fail@plt+0xbf0>
   1278c:	cmp	r9, #4
   12790:	beq	12824 <__assert_fail@plt+0xc80>
   12794:	add	lr, r6, r6, lsl #1
   12798:	ldr	r4, [sl, #88]	; 0x58
   1279c:	lsl	lr, lr, #4
   127a0:	ldrd	r2, [sp, #24]
   127a4:	ldrd	r0, [r4, lr]
   127a8:	add	ip, r4, lr
   127ac:	adds	r2, r2, r0
   127b0:	adc	r3, r3, r1
   127b4:	cmp	r1, r3
   127b8:	cmpeq	r0, r2
   127bc:	mvnhi	r2, #0
   127c0:	mvnhi	r3, #0
   127c4:	strd	r2, [r4, lr]
   127c8:	ldr	r2, [ip, #16]
   127cc:	ldr	r3, [ip, #20]
   127d0:	cmp	r7, r2
   127d4:	ldrd	r4, [ip, #8]
   127d8:	movle	r0, #0
   127dc:	movgt	r0, #1
   127e0:	cmp	r7, r2
   127e4:	rsbge	r0, r0, #0
   127e8:	rsblt	r0, r0, #1
   127ec:	cmp	r8, r3
   127f0:	movle	r1, #0
   127f4:	movgt	r1, #1
   127f8:	cmp	r8, r3
   127fc:	rsbge	r1, r1, #0
   12800:	rsblt	r1, r1, #1
   12804:	adds	r2, r4, #1
   12808:	adc	r3, r5, #0
   1280c:	mov	r5, r3
   12810:	adds	r3, r1, r0, lsl #1
   12814:	mov	r3, r5
   12818:	strmi	r7, [ip, #16]
   1281c:	strd	r2, [ip, #8]
   12820:	strmi	r8, [ip, #20]
   12824:	ldrd	r0, [sl, #96]	; 0x60
   12828:	ldrd	r2, [sp, #24]
   1282c:	ldrd	r4, [sl, #104]	; 0x68
   12830:	adds	r2, r2, r0
   12834:	adc	r3, r3, r1
   12838:	cmp	r1, r3
   1283c:	cmpeq	r0, r2
   12840:	ldr	r0, [sl, #112]	; 0x70
   12844:	mvnhi	r3, #0
   12848:	mvnhi	r2, #0
   1284c:	ldr	r1, [sl, #116]	; 0x74
   12850:	cmp	r7, r0
   12854:	strd	r2, [sl, #96]	; 0x60
   12858:	movle	r3, #0
   1285c:	movgt	r3, #1
   12860:	cmp	r7, r0
   12864:	rsbge	r0, r3, #0
   12868:	rsblt	r0, r3, #1
   1286c:	cmp	r8, r1
   12870:	movle	r3, #0
   12874:	movgt	r3, #1
   12878:	cmp	r8, r1
   1287c:	rsbge	r1, r3, #0
   12880:	rsblt	r1, r3, #1
   12884:	adds	r2, r4, #1
   12888:	adc	r3, r5, #0
   1288c:	mov	r5, r3
   12890:	adds	r3, r1, r0, lsl #1
   12894:	mov	r3, r5
   12898:	strmi	r7, [sl, #112]	; 0x70
   1289c:	strmi	r8, [sl, #116]	; 0x74
   128a0:	cmp	r9, #4
   128a4:	strd	r2, [sl, #104]	; 0x68
   128a8:	beq	12944 <__assert_fail@plt+0xda0>
   128ac:	ldrb	r3, [sl, #36]	; 0x24
   128b0:	cmp	r3, #0
   128b4:	bne	12944 <__assert_fail@plt+0xda0>
   128b8:	cmp	r6, #0
   128bc:	bne	1265c <__assert_fail@plt+0xab8>
   128c0:	ldrb	r3, [sl, #16]
   128c4:	cmp	r3, #0
   128c8:	beq	12960 <__assert_fail@plt+0xdbc>
   128cc:	ldrd	r0, [sp, #128]	; 0x80
   128d0:	ldrd	r4, [sl, #40]	; 0x28
   128d4:	cmp	r4, #0
   128d8:	sbcs	r3, r5, #0
   128dc:	blt	12e9c <__assert_fail@plt+0x12f8>
   128e0:	cmp	r1, r5
   128e4:	cmpeq	r0, r4
   128e8:	movcs	r3, #1
   128ec:	movcc	r3, #0
   128f0:	cmp	r3, #0
   128f4:	beq	1265c <__assert_fail@plt+0xab8>
   128f8:	ldr	r1, [sp, #56]	; 0x38
   128fc:	add	r0, sp, #120	; 0x78
   12900:	bl	137f4 <__assert_fail@plt+0x1c50>
   12904:	b	1265c <__assert_fail@plt+0xab8>
   12908:	ldr	r4, [pc, #488]	; 12af8 <__assert_fail@plt+0xf54>
   1290c:	ldr	r7, [r4]
   12910:	cmp	r7, #0
   12914:	beq	132f8 <__assert_fail@plt+0x1754>
   12918:	mov	r2, #5
   1291c:	ldr	r1, [pc, #544]	; 12b44 <__assert_fail@plt+0xfa0>
   12920:	mov	r0, #0
   12924:	bl	117d8 <dcgettext@plt>
   12928:	mov	r1, #0
   1292c:	mov	r3, r7
   12930:	mov	r2, r0
   12934:	mov	r0, r1
   12938:	bl	118bc <error@plt>
   1293c:	mov	r0, #1
   12940:	bl	13944 <__assert_fail@plt+0x1da0>
   12944:	ldr	r3, [pc, #428]	; 12af8 <__assert_fail@plt+0xf54>
   12948:	ldr	r3, [r3]
   1294c:	cmp	r6, r3
   12950:	bhi	128b8 <__assert_fail@plt+0xd14>
   12954:	ldrb	r3, [sl, #16]
   12958:	cmp	r3, #0
   1295c:	bne	128cc <__assert_fail@plt+0xd28>
   12960:	ldrd	r0, [sp, #120]	; 0x78
   12964:	b	128d0 <__assert_fail@plt+0xd2c>
   12968:	cmp	r3, #2
   1296c:	ldreq	r7, [r4, #136]	; 0x88
   12970:	ldreq	r8, [r4, #140]	; 0x8c
   12974:	ldrne	r7, [r4, #152]	; 0x98
   12978:	ldrne	r8, [r4, #156]	; 0x9c
   1297c:	b	126d8 <__assert_fail@plt+0xb34>
   12980:	ldr	r2, [r4, #132]	; 0x84
   12984:	ldr	r3, [r4, #128]	; 0x80
   12988:	lsl	r2, r2, #9
   1298c:	orr	r2, r2, r3, lsr #23
   12990:	lsl	r3, r3, #9
   12994:	str	r2, [sp, #28]
   12998:	str	r3, [sp, #24]
   1299c:	b	126c4 <__assert_fail@plt+0xb20>
   129a0:	ldrb	r3, [sl, #39]	; 0x27
   129a4:	cmp	r3, #0
   129a8:	bne	129f4 <__assert_fail@plt+0xe50>
   129ac:	ldrb	r3, [sl, #60]	; 0x3c
   129b0:	cmp	r3, #0
   129b4:	bne	129d4 <__assert_fail@plt+0xe30>
   129b8:	ldr	r3, [r4, #80]	; 0x50
   129bc:	and	r3, r3, #61440	; 0xf000
   129c0:	cmp	r3, #16384	; 0x4000
   129c4:	beq	129f4 <__assert_fail@plt+0xe50>
   129c8:	ldr	r3, [r4, #84]	; 0x54
   129cc:	cmp	r3, #1
   129d0:	bls	129f4 <__assert_fail@plt+0xe50>
   129d4:	ldrd	r6, [r4, #160]	; 0xa0
   129d8:	ldrd	r2, [r4, #64]	; 0x40
   129dc:	ldr	r0, [sl, #64]	; 0x40
   129e0:	strd	r6, [sp]
   129e4:	bl	1464c <__assert_fail@plt+0x2aa8>
   129e8:	cmp	r0, #0
   129ec:	blt	13400 <__assert_fail@plt+0x185c>
   129f0:	beq	1264c <__assert_fail@plt+0xaa8>
   129f4:	cmp	r9, #2
   129f8:	beq	13124 <__assert_fail@plt+0x1580>
   129fc:	cmp	r9, #7
   12a00:	beq	130f8 <__assert_fail@plt+0x1554>
   12a04:	cmp	r9, #1
   12a08:	bne	1269c <__assert_fail@plt+0xaf8>
   12a0c:	b	12654 <__assert_fail@plt+0xab0>
   12a10:	add	r3, r6, #10
   12a14:	mov	r0, r3
   12a18:	mov	r1, #48	; 0x30
   12a1c:	str	r3, [sl, #84]	; 0x54
   12a20:	bl	34d24 <__assert_fail@plt+0x23180>
   12a24:	str	r0, [sl, #88]	; 0x58
   12a28:	b	12778 <__assert_fail@plt+0xbd4>
   12a2c:	mov	r2, #5
   12a30:	ldr	r1, [pc, #272]	; 12b48 <__assert_fail@plt+0xfa4>
   12a34:	bl	117d8 <dcgettext@plt>
   12a38:	mov	r1, r4
   12a3c:	mov	r6, r0
   12a40:	mov	r0, #4
   12a44:	bl	211ac <__assert_fail@plt+0xf608>
   12a48:	mov	r2, r6
   12a4c:	mov	r1, r5
   12a50:	mov	r3, r0
   12a54:	mov	r0, r5
   12a58:	bl	118bc <error@plt>
   12a5c:	ldrb	r3, [r4]
   12a60:	cmp	r3, #0
   12a64:	bne	12f68 <__assert_fail@plt+0x13c4>
   12a68:	ldr	r0, [sp, #72]	; 0x48
   12a6c:	bl	143ec <__assert_fail@plt+0x2848>
   12a70:	ldr	r2, [sp, #64]	; 0x40
   12a74:	mov	r1, #3
   12a78:	mov	r5, r0
   12a7c:	mov	r0, #0
   12a80:	bl	21c28 <__assert_fail@plt+0x10084>
   12a84:	mov	r2, #5
   12a88:	ldr	r1, [pc, #200]	; 12b58 <__assert_fail@plt+0xfb4>
   12a8c:	mov	r4, r0
   12a90:	mov	r0, #0
   12a94:	bl	117d8 <dcgettext@plt>
   12a98:	mov	r1, #0
   12a9c:	ldr	ip, [sp, #96]	; 0x60
   12aa0:	str	r5, [sp]
   12aa4:	mov	r3, r4
   12aa8:	ldr	r2, [pc, #156]	; 12b4c <__assert_fail@plt+0xfa8>
   12aac:	str	ip, [sp, #76]	; 0x4c
   12ab0:	str	r0, [sp, #4]
   12ab4:	mov	r0, r1
   12ab8:	bl	118bc <error@plt>
   12abc:	b	12570 <__assert_fail@plt+0x9cc>
   12ac0:	andeq	r9, r3, r4, asr #11
   12ac4:	andeq	r9, r3, r4, lsr #27
   12ac8:	andeq	r9, r3, r8, asr #11
   12acc:	andeq	r9, r3, r0, lsl r5
   12ad0:	andeq	r4, r1, r4, asr r4
   12ad4:	andeq	r8, r3, r8, lsr r4
   12ad8:	andeq	fp, r4, r8, asr #4
   12adc:	strdeq	r9, [r3], -r0
   12ae0:	andeq	fp, r4, r0, asr #4
   12ae4:	andeq	r9, r3, r0, ror #11
   12ae8:	andeq	r0, r0, sl, lsl #2
   12aec:	andeq	r9, r3, r4, lsr #12
   12af0:	andeq	fp, r4, r0, ror r2
   12af4:	andeq	r9, r3, r0, lsr r6
   12af8:	andeq	fp, r4, ip, asr #3
   12afc:			; <UNDEFINED> instruction: 0x00015ab8
   12b00:	andeq	fp, r4, r0, asr r2
   12b04:	andeq	r9, r3, r0, ror #12
   12b08:	andeq	r9, r3, r0, ror r6
   12b0c:	andeq	r9, r3, ip, ror r6
   12b10:	ldrdeq	fp, [r4], -r0
   12b14:	andeq	fp, r4, ip, lsr r2
   12b18:	andeq	r9, r3, ip, lsl #13
   12b1c:	andeq	r9, r3, ip, lsl #10
   12b20:	andeq	r8, r3, ip, ror #12
   12b24:	andeq	r8, r3, ip, ror #11
   12b28:	andeq	r9, r3, r4, asr r6
   12b2c:	andeq	r9, r3, ip, asr r6
   12b30:	andeq	r9, r3, r8, lsl #12
   12b34:	andeq	fp, r4, r8, lsr #4
   12b38:	andeq	r9, r3, ip, lsl r8
   12b3c:	andeq	sl, r3, r0, lsl #5
   12b40:	andeq	fp, r4, ip, lsl #5
   12b44:	andeq	r9, r3, r4, lsl #14
   12b48:	andeq	r9, r3, r0, lsl #17
   12b4c:	andeq	r9, r3, r4, lsr sl
   12b50:	ldrdeq	r9, [r3], -r4
   12b54:	andeq	r9, r3, r8, lsr #18
   12b58:	andeq	r9, r3, r4, lsl sl
   12b5c:	strdeq	r9, [r3], -ip
   12b60:	andeq	r8, r3, r8, lsr #12
   12b64:	andeq	r0, r0, r9, lsr r4
   12b68:	andeq	r9, r3, r8, asr r8
   12b6c:	andeq	r9, r3, ip, ror #24
   12b70:	andeq	r9, r3, r8, asr r9
   12b74:	andeq	r9, r3, r0, asr #17
   12b78:	andeq	r9, r3, ip, lsr r8
   12b7c:	andeq	fp, r4, r8, lsr r2
   12b80:	andeq	r9, r3, r0, asr r9
   12b84:	andeq	fp, r4, r8, lsr #5
   12b88:	andeq	r9, r3, ip, asr #13
   12b8c:			; <UNDEFINED> instruction: 0x000395b8
   12b90:	ldrdeq	fp, [r4], -r4
   12b94:	andeq	r8, r3, r0, lsl #8
   12b98:	muleq	r3, r4, r7
   12b9c:	andeq	r9, r3, r8, asr #15
   12ba0:			; <UNDEFINED> instruction: 0x000397b8
   12ba4:	andeq	r9, r3, r8, lsr r7
   12ba8:	andeq	r9, r3, r0, lsr #15
   12bac:	andeq	r9, r3, r0, lsl #15
   12bb0:	andeq	r9, r3, ip, lsl #15
   12bb4:	andeq	r8, r3, r4, lsl #12
   12bb8:	andeq	r9, r3, r0, lsr #16
   12bbc:	ldrdeq	r9, [r3], -r4
   12bc0:	andeq	fp, r4, r0, lsr r2
   12bc4:	andeq	r9, r3, r8, ror #15
   12bc8:	andeq	sl, r3, r4, ror #5
   12bcc:	andeq	r0, r0, pc, lsl #4
   12bd0:	strdeq	r9, [r3], -r0
   12bd4:	andeq	r0, r0, lr, ror r2
   12bd8:	andeq	r9, r3, r0, lsl r9
   12bdc:	andeq	r8, r3, r0, lsr r6
   12be0:	andeq	r9, r3, ip, asr #16
   12be4:	andeq	r9, r3, ip, lsr r9
   12be8:	andeq	r9, r3, r0, lsr #13
   12bec:	andeq	r8, r3, r8, lsr r4
   12bf0:	sub	r3, lr, #1
   12bf4:	cmp	r6, r3
   12bf8:	bne	135d0 <__assert_fail@plt+0x1a2c>
   12bfc:	add	lr, lr, lr, lsl #1
   12c00:	ldr	ip, [sl, #88]	; 0x58
   12c04:	lsl	lr, lr, #4
   12c08:	mov	r0, r4
   12c0c:	mov	r1, r5
   12c10:	ldrd	r4, [ip, lr]
   12c14:	add	r3, ip, lr
   12c18:	str	r3, [sp, #60]	; 0x3c
   12c1c:	adds	r0, r0, r4
   12c20:	adc	r1, r1, r5
   12c24:	mov	r2, r0
   12c28:	mov	r3, r1
   12c2c:	ldrd	r0, [sp, #24]
   12c30:	strd	r2, [sp, #40]	; 0x28
   12c34:	cmp	r1, r3
   12c38:	cmpeq	r0, r2
   12c3c:	mvnhi	r2, #0
   12c40:	mvnhi	r3, #0
   12c44:	strdhi	r2, [sp, #40]	; 0x28
   12c48:	add	r3, ip, lr
   12c4c:	ldrd	r0, [r3, #8]
   12c50:	ldrd	r2, [sp, #40]	; 0x28
   12c54:	adds	r4, r0, #1
   12c58:	adc	r5, r1, #0
   12c5c:	strd	r2, [sp, #120]	; 0x78
   12c60:	add	r3, ip, lr
   12c64:	strd	r4, [sp, #128]	; 0x80
   12c68:	add	r2, ip, lr
   12c6c:	ldr	r3, [r3, #16]
   12c70:	ldr	r0, [r2, #20]
   12c74:	cmp	r7, r3
   12c78:	movge	r1, #0
   12c7c:	movlt	r1, #1
   12c80:	cmp	r7, r3
   12c84:	rsble	r1, r1, #0
   12c88:	rsbgt	r1, r1, #1
   12c8c:	cmp	r8, r0
   12c90:	movge	r3, #0
   12c94:	movlt	r3, #1
   12c98:	cmp	r8, r0
   12c9c:	rsble	r3, r3, #0
   12ca0:	rsbgt	r3, r3, #1
   12ca4:	adds	r3, r3, r1, lsl #1
   12ca8:	movmi	r3, r2
   12cac:	addmi	r3, r3, #16
   12cb0:	strd	r4, [sp, #80]	; 0x50
   12cb4:	ldmmi	r3, {r0, r1}
   12cb8:	addmi	r3, sp, #136	; 0x88
   12cbc:	stmmi	r3, {r0, r1}
   12cc0:	ldrb	r3, [sl, #48]	; 0x30
   12cc4:	cmp	r3, #0
   12cc8:	beq	12f94 <__assert_fail@plt+0x13f0>
   12ccc:	add	r3, r6, r6, lsl #1
   12cd0:	ldrd	r4, [ip, lr]
   12cd4:	add	r3, ip, r3, lsl #4
   12cd8:	str	r3, [sp, #40]	; 0x28
   12cdc:	ldrd	r0, [r3, #24]
   12ce0:	adds	r2, r4, r0
   12ce4:	adc	r3, r5, r1
   12ce8:	cmp	r1, r3
   12cec:	cmpeq	r0, r2
   12cf0:	strd	r2, [sp, #80]	; 0x50
   12cf4:	mvnhi	r2, #0
   12cf8:	mvnhi	r3, #0
   12cfc:	strdhi	r2, [sp, #80]	; 0x50
   12d00:	ldr	ip, [sp, #40]	; 0x28
   12d04:	ldr	r3, [sp, #60]	; 0x3c
   12d08:	ldrd	r4, [ip, #32]
   12d0c:	ldrd	r0, [r3, #8]
   12d10:	ldrd	r2, [sp, #80]	; 0x50
   12d14:	ldr	lr, [ip, #40]	; 0x28
   12d18:	adds	r4, r4, r0
   12d1c:	strd	r2, [ip, #24]
   12d20:	adc	r5, r5, r1
   12d24:	mov	r3, ip
   12d28:	ldr	ip, [ip, #44]	; 0x2c
   12d2c:	strd	r4, [r3, #32]
   12d30:	ldr	r3, [sp, #60]	; 0x3c
   12d34:	strd	r4, [sp, #88]	; 0x58
   12d38:	ldr	r1, [r3, #16]
   12d3c:	ldr	r4, [r3, #20]
   12d40:	cmp	lr, r1
   12d44:	movge	r0, #0
   12d48:	movlt	r0, #1
   12d4c:	cmp	lr, r1
   12d50:	rsble	r0, r0, #0
   12d54:	rsbgt	r0, r0, #1
   12d58:	ldr	r1, [r3, #20]
   12d5c:	cmp	ip, r1
   12d60:	movge	r1, #0
   12d64:	movlt	r1, #1
   12d68:	cmp	ip, r4
   12d6c:	rsble	r1, r1, #0
   12d70:	rsbgt	r1, r1, #1
   12d74:	adds	r1, r1, r0, lsl #1
   12d78:	bpl	12d9c <__assert_fail@plt+0x11f8>
   12d7c:	add	r1, r3, #16
   12d80:	ldr	r3, [sp, #40]	; 0x28
   12d84:	ldm	r1, {r0, r1}
   12d88:	add	ip, r3, #40	; 0x28
   12d8c:	stm	ip, {r0, r1}
   12d90:	ldr	ip, [r3, #44]	; 0x2c
   12d94:	ldr	r3, [sp, #60]	; 0x3c
   12d98:	mov	lr, r0
   12d9c:	ldrd	r0, [r3, #24]
   12da0:	ldrd	r2, [sp, #80]	; 0x50
   12da4:	adds	r4, r2, r0
   12da8:	adc	r5, r3, r1
   12dac:	mov	r1, r5
   12db0:	cmp	r1, r3
   12db4:	mov	r0, r4
   12db8:	cmpeq	r0, r2
   12dbc:	mvncc	r3, #0
   12dc0:	movcc	r1, r3
   12dc4:	ldr	r3, [sp, #60]	; 0x3c
   12dc8:	mvncc	r2, #0
   12dcc:	movcc	r0, r2
   12dd0:	ldrd	r4, [r3, #32]
   12dd4:	mov	r3, r1
   12dd8:	ldr	r1, [sp, #40]	; 0x28
   12ddc:	mov	r2, r0
   12de0:	strd	r2, [r1, #24]
   12de4:	ldrd	r0, [sp, #88]	; 0x58
   12de8:	ldr	r3, [sp, #40]	; 0x28
   12dec:	adds	r0, r0, r4
   12df0:	adc	r1, r1, r5
   12df4:	mov	r5, r1
   12df8:	mov	r4, r0
   12dfc:	strd	r4, [r3, #32]
   12e00:	ldr	r3, [sp, #60]	; 0x3c
   12e04:	ldr	r4, [r3, #40]	; 0x28
   12e08:	ldr	r0, [r3, #44]	; 0x2c
   12e0c:	cmp	lr, r4
   12e10:	movge	r1, #0
   12e14:	movlt	r1, #1
   12e18:	cmp	lr, r4
   12e1c:	rsble	lr, r1, #0
   12e20:	rsbgt	lr, r1, #1
   12e24:	cmp	ip, r0
   12e28:	movge	r5, #0
   12e2c:	movlt	r5, #1
   12e30:	cmp	ip, r0
   12e34:	rsble	ip, r5, #0
   12e38:	rsbgt	ip, r5, #1
   12e3c:	adds	r1, ip, lr, lsl #1
   12e40:	addmi	r2, r3, #40	; 0x28
   12e44:	ldrmi	r3, [sp, #40]	; 0x28
   12e48:	ldmmi	r2, {r0, r1}
   12e4c:	addmi	r3, r3, #40	; 0x28
   12e50:	stmmi	r3, {r0, r1}
   12e54:	b	12778 <__assert_fail@plt+0xbd4>
   12e58:	mov	r2, #5
   12e5c:	ldr	r1, [pc, #-788]	; 12b50 <__assert_fail@plt+0xfac>
   12e60:	mov	r0, #0
   12e64:	ldr	r5, [r4, #32]
   12e68:	bl	117d8 <dcgettext@plt>
   12e6c:	ldr	r1, [sp, #56]	; 0x38
   12e70:	mov	r6, r0
   12e74:	mov	r0, r9
   12e78:	bl	211ac <__assert_fail@plt+0xf608>
   12e7c:	mov	r2, r6
   12e80:	mov	r1, r5
   12e84:	mov	r3, r0
   12e88:	mov	r0, #0
   12e8c:	bl	118bc <error@plt>
   12e90:	ldr	r3, [sp, #96]	; 0x60
   12e94:	str	r3, [sp, #36]	; 0x24
   12e98:	b	126a4 <__assert_fail@plt+0xb00>
   12e9c:	rsbs	r2, r4, #0
   12ea0:	rsc	r3, r5, #0
   12ea4:	cmp	r3, r1
   12ea8:	cmpeq	r2, r0
   12eac:	movcs	r3, #1
   12eb0:	movcc	r3, #0
   12eb4:	b	128f0 <__assert_fail@plt+0xd4c>
   12eb8:	bl	119b8 <__errno_location@plt>
   12ebc:	ldr	r9, [sp, #32]
   12ec0:	ldr	r6, [r0]
   12ec4:	mov	r5, r0
   12ec8:	cmp	r6, #0
   12ecc:	bne	131e4 <__assert_fail@plt+0x1640>
   12ed0:	mov	r4, #0
   12ed4:	ldr	r0, [sp, #48]	; 0x30
   12ed8:	str	r4, [sl, #76]	; 0x4c
   12edc:	bl	1a198 <__assert_fail@plt+0x85f4>
   12ee0:	cmp	r0, r4
   12ee4:	beq	12f10 <__assert_fail@plt+0x136c>
   12ee8:	mov	r2, #5
   12eec:	ldr	r1, [pc, #-928]	; 12b54 <__assert_fail@plt+0xfb0>
   12ef0:	mov	r0, r4
   12ef4:	ldr	r5, [r5]
   12ef8:	bl	117d8 <dcgettext@plt>
   12efc:	mov	r1, r5
   12f00:	mov	r2, r0
   12f04:	mov	r0, r4
   12f08:	bl	118bc <error@plt>
   12f0c:	ldr	r9, [sp, #96]	; 0x60
   12f10:	ldr	r8, [sp, #76]	; 0x4c
   12f14:	and	r8, r8, r9
   12f18:	uxtb	r3, r8
   12f1c:	str	r3, [sp, #76]	; 0x4c
   12f20:	b	12570 <__assert_fail@plt+0x9cc>
   12f24:	mov	r2, #0
   12f28:	mov	r3, #0
   12f2c:	strd	r2, [sp, #24]
   12f30:	b	126c4 <__assert_fail@plt+0xb20>
   12f34:	ldrb	r3, [r4]
   12f38:	cmp	r3, #0
   12f3c:	bne	125c4 <__assert_fail@plt+0xa20>
   12f40:	ldr	r4, [sp, #64]	; 0x40
   12f44:	mov	r2, #5
   12f48:	ldr	r1, [pc, #-1016]	; 12b58 <__assert_fail@plt+0xfb4>
   12f4c:	mov	r0, r4
   12f50:	bl	117d8 <dcgettext@plt>
   12f54:	ldr	r2, [pc, #-1008]	; 12b6c <__assert_fail@plt+0xfc8>
   12f58:	mov	r1, r4
   12f5c:	mov	r3, r0
   12f60:	mov	r0, r4
   12f64:	bl	118bc <error@plt>
   12f68:	ldr	r3, [sp, #96]	; 0x60
   12f6c:	str	r3, [sp, #76]	; 0x4c
   12f70:	b	12570 <__assert_fail@plt+0x9cc>
   12f74:	mov	r2, #96	; 0x60
   12f78:	mov	r1, r6
   12f7c:	ldr	r0, [sl, #88]	; 0x58
   12f80:	bl	3486c <__assert_fail@plt+0x22cc8>
   12f84:	lsl	r3, r6, #1
   12f88:	str	r3, [sl, #84]	; 0x54
   12f8c:	str	r0, [sl, #88]	; 0x58
   12f90:	b	1271c <__assert_fail@plt+0xb78>
   12f94:	add	r3, ip, lr
   12f98:	ldrd	r0, [r3, #24]
   12f9c:	ldrd	r2, [sp, #40]	; 0x28
   12fa0:	adds	r4, r2, r0
   12fa4:	adc	r5, r3, r1
   12fa8:	cmp	r3, r5
   12fac:	cmpeq	r2, r4
   12fb0:	mvnhi	r3, #0
   12fb4:	mov	r1, r5
   12fb8:	mvnhi	r2, #0
   12fbc:	movhi	r1, r3
   12fc0:	add	r3, ip, lr
   12fc4:	mov	r0, r4
   12fc8:	movhi	r0, r2
   12fcc:	ldrd	r4, [r3, #32]
   12fd0:	mov	r2, r0
   12fd4:	mov	r3, r1
   12fd8:	ldrd	r0, [sp, #80]	; 0x50
   12fdc:	strd	r2, [sp, #120]	; 0x78
   12fe0:	add	r3, ip, lr
   12fe4:	adds	r0, r0, r4
   12fe8:	adc	r1, r1, r5
   12fec:	ldr	r4, [sp, #140]	; 0x8c
   12ff0:	strd	r0, [sp, #128]	; 0x80
   12ff4:	ldr	r0, [r3, #40]	; 0x28
   12ff8:	ldr	r1, [r3, #44]	; 0x2c
   12ffc:	ldr	r3, [sp, #136]	; 0x88
   13000:	ldr	r5, [sp, #136]	; 0x88
   13004:	cmp	r3, r0
   13008:	movge	r3, #0
   1300c:	movlt	r3, #1
   13010:	cmp	r5, r0
   13014:	rsble	r3, r3, #0
   13018:	rsbgt	r3, r3, #1
   1301c:	cmp	r4, r1
   13020:	movge	r0, #0
   13024:	movlt	r0, #1
   13028:	cmp	r4, r1
   1302c:	rsble	r4, r0, #0
   13030:	rsbgt	r4, r0, #1
   13034:	adds	r3, r4, r3, lsl #1
   13038:	addmi	r3, ip, lr
   1303c:	addmi	r3, r3, #40	; 0x28
   13040:	ldmmi	r3, {r0, r1}
   13044:	addmi	r3, sp, #136	; 0x88
   13048:	stmmi	r3, {r0, r1}
   1304c:	b	12ccc <__assert_fail@plt+0x1128>
   13050:	ldr	r5, [sp, #48]	; 0x30
   13054:	mov	r2, #4
   13058:	mov	r1, r4
   1305c:	mov	r0, r5
   13060:	bl	1acb8 <__assert_fail@plt+0x9114>
   13064:	mov	r0, r5
   13068:	bl	1a360 <__assert_fail@plt+0x87bc>
   1306c:	cmp	r4, r0
   13070:	beq	12654 <__assert_fail@plt+0xab0>
   13074:	ldr	r3, [pc, #-1184]	; 12bdc <__assert_fail@plt+0x1038>
   13078:	mov	r2, #560	; 0x230
   1307c:	ldr	r1, [pc, #-1188]	; 12be0 <__assert_fail@plt+0x103c>
   13080:	ldr	r0, [pc, #-1208]	; 12bd0 <__assert_fail@plt+0x102c>
   13084:	bl	11ba4 <__assert_fail@plt>
   13088:	mov	r2, #5
   1308c:	ldr	r1, [pc, #-1336]	; 12b5c <__assert_fail@plt+0xfb8>
   13090:	mov	r0, #0
   13094:	ldr	r4, [r4, #32]
   13098:	bl	117d8 <dcgettext@plt>
   1309c:	ldr	r1, [sp, #56]	; 0x38
   130a0:	mov	r6, r0
   130a4:	mov	r0, #4
   130a8:	bl	211ac <__assert_fail@plt+0xf608>
   130ac:	mov	r2, r6
   130b0:	mov	r1, r4
   130b4:	str	r5, [sp, #36]	; 0x24
   130b8:	mov	r3, r0
   130bc:	mov	r0, #0
   130c0:	bl	118bc <error@plt>
   130c4:	b	1265c <__assert_fail@plt+0xab8>
   130c8:	ldr	r3, [sp, #108]	; 0x6c
   130cc:	cmp	r3, #3
   130d0:	beq	13400 <__assert_fail@plt+0x185c>
   130d4:	cmp	r3, #4
   130d8:	beq	13228 <__assert_fail@plt+0x1684>
   130dc:	cmp	r3, #2
   130e0:	beq	13270 <__assert_fail@plt+0x16cc>
   130e4:	ldr	r3, [pc, #-1420]	; 12b60 <__assert_fail@plt+0xfbc>
   130e8:	ldr	r2, [pc, #-1420]	; 12b64 <__assert_fail@plt+0xfc0>
   130ec:	ldr	r1, [pc, #-1300]	; 12be0 <__assert_fail@plt+0x103c>
   130f0:	ldr	r0, [pc, #-1424]	; 12b68 <__assert_fail@plt+0xfc4>
   130f4:	bl	11ba4 <__assert_fail@plt>
   130f8:	ldr	r2, [sp, #56]	; 0x38
   130fc:	mov	r1, #3
   13100:	mov	r0, #0
   13104:	ldr	r5, [r4, #32]
   13108:	bl	21c28 <__assert_fail@plt+0x10084>
   1310c:	ldr	r2, [pc, #-1448]	; 12b6c <__assert_fail@plt+0xfc8>
   13110:	mov	r1, r5
   13114:	mov	r3, r0
   13118:	mov	r0, #0
   1311c:	bl	118bc <error@plt>
   13120:	b	126a4 <__assert_fail@plt+0xb00>
   13124:	mov	r1, r4
   13128:	ldr	r0, [sp, #48]	; 0x30
   1312c:	bl	34eb0 <__assert_fail@plt+0x2330c>
   13130:	cmp	r0, #0
   13134:	beq	12654 <__assert_fail@plt+0xab0>
   13138:	ldr	r6, [sl, #80]	; 0x50
   1313c:	ldr	r5, [r4]
   13140:	cmp	r6, #0
   13144:	beq	1338c <__assert_fail@plt+0x17e8>
   13148:	cmp	r4, r5
   1314c:	beq	1317c <__assert_fail@plt+0x15d8>
   13150:	ldrd	r6, [r4, #160]	; 0xa0
   13154:	ldrd	r2, [r4, #64]	; 0x40
   13158:	ldr	r0, [sl, #80]	; 0x50
   1315c:	strd	r6, [sp]
   13160:	bl	14778 <__assert_fail@plt+0x2bd4>
   13164:	cmp	r0, #0
   13168:	bgt	12654 <__assert_fail@plt+0xab0>
   1316c:	ldr	r4, [r4, #4]
   13170:	cmp	r4, #0
   13174:	cmpne	r5, r4
   13178:	bne	13150 <__assert_fail@plt+0x15ac>
   1317c:	mov	r2, #5
   13180:	ldr	r1, [pc, #-1560]	; 12b70 <__assert_fail@plt+0xfcc>
   13184:	mov	r0, #0
   13188:	bl	117d8 <dcgettext@plt>
   1318c:	ldr	r2, [sp, #56]	; 0x38
   13190:	mov	r1, #3
   13194:	mov	r4, r0
   13198:	mov	r0, #0
   1319c:	bl	21c28 <__assert_fail@plt+0x10084>
   131a0:	mov	r1, #0
   131a4:	mov	r2, r4
   131a8:	mov	r3, r0
   131ac:	mov	r0, r1
   131b0:	bl	118bc <error@plt>
   131b4:	b	1265c <__assert_fail@plt+0xab8>
   131b8:	ldr	r6, [sp, #48]	; 0x30
   131bc:	mov	r2, #1
   131c0:	mov	r1, r4
   131c4:	mov	r0, r6
   131c8:	bl	1acb8 <__assert_fail@plt+0x9114>
   131cc:	mov	r0, r6
   131d0:	bl	1a360 <__assert_fail@plt+0x87bc>
   131d4:	cmp	r4, r0
   131d8:	bne	135bc <__assert_fail@plt+0x1a18>
   131dc:	ldrh	r9, [r4, #56]	; 0x38
   131e0:	b	12604 <__assert_fail@plt+0xa60>
   131e4:	mov	r2, #5
   131e8:	ldr	r1, [pc, #-1660]	; 12b74 <__assert_fail@plt+0xfd0>
   131ec:	mov	r0, r4
   131f0:	bl	117d8 <dcgettext@plt>
   131f4:	ldr	r3, [sp, #48]	; 0x30
   131f8:	mov	r1, #3
   131fc:	ldr	r2, [r3, #24]
   13200:	mov	r7, r0
   13204:	mov	r0, r4
   13208:	bl	21c28 <__assert_fail@plt+0x10084>
   1320c:	mov	r2, r7
   13210:	mov	r1, r6
   13214:	mov	r3, r0
   13218:	mov	r0, r4
   1321c:	bl	118bc <error@plt>
   13220:	ldr	r9, [sp, #96]	; 0x60
   13224:	b	12ed0 <__assert_fail@plt+0x132c>
   13228:	bl	119b8 <__errno_location@plt>
   1322c:	ldr	r3, [sp, #96]	; 0x60
   13230:	mov	r2, #5
   13234:	ldr	r1, [pc, #-1732]	; 12b78 <__assert_fail@plt+0xfd4>
   13238:	str	r3, [sp, #76]	; 0x4c
   1323c:	ldr	r5, [r0]
   13240:	mov	r0, r4
   13244:	bl	117d8 <dcgettext@plt>
   13248:	ldr	r2, [sp, #64]	; 0x40
   1324c:	mov	r1, #3
   13250:	mov	r6, r0
   13254:	mov	r0, r4
   13258:	bl	21c28 <__assert_fail@plt+0x10084>
   1325c:	mov	r2, r6
   13260:	mov	r1, r5
   13264:	mov	r3, r0
   13268:	mov	r0, r4
   1326c:	bl	118bc <error@plt>
   13270:	ldr	r0, [sp, #72]	; 0x48
   13274:	bl	1440c <__assert_fail@plt+0x2868>
   13278:	ldr	r0, [sl, #64]	; 0x40
   1327c:	bl	14618 <__assert_fail@plt+0x2a74>
   13280:	ldr	r0, [sl, #80]	; 0x50
   13284:	cmp	r0, #0
   13288:	beq	13290 <__assert_fail@plt+0x16ec>
   1328c:	bl	14618 <__assert_fail@plt+0x2a74>
   13290:	ldr	r3, [sp, #64]	; 0x40
   13294:	cmp	r3, #0
   13298:	beq	132bc <__assert_fail@plt+0x1718>
   1329c:	ldr	r3, [pc, #-1832]	; 12b7c <__assert_fail@plt+0xfd8>
   132a0:	ldr	r0, [r3]
   132a4:	ldr	r3, [r0]
   132a8:	tst	r3, #32
   132ac:	beq	13474 <__assert_fail@plt+0x18d0>
   132b0:	ldr	r3, [sp, #76]	; 0x4c
   132b4:	cmp	r3, #0
   132b8:	bne	135e4 <__assert_fail@plt+0x1a40>
   132bc:	ldrb	r3, [sl, #38]	; 0x26
   132c0:	cmp	r3, #0
   132c4:	beq	132e4 <__assert_fail@plt+0x1740>
   132c8:	ldr	r1, [pc, #-1872]	; 12b80 <__assert_fail@plt+0xfdc>
   132cc:	mov	r2, #5
   132d0:	mov	r0, #0
   132d4:	bl	117d8 <dcgettext@plt>
   132d8:	mov	r1, r0
   132dc:	ldr	r0, [pc, #-1888]	; 12b84 <__assert_fail@plt+0xfe0>
   132e0:	bl	137f4 <__assert_fail@plt+0x1c50>
   132e4:	ldr	r3, [sp, #76]	; 0x4c
   132e8:	eor	r0, r3, #1
   132ec:	uxtb	r0, r0
   132f0:	add	sp, sp, #228	; 0xe4
   132f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132f8:	mov	r2, #5
   132fc:	ldr	r1, [pc, #-1916]	; 12b88 <__assert_fail@plt+0xfe4>
   13300:	mov	r0, r7
   13304:	bl	117d8 <dcgettext@plt>
   13308:	mov	r1, r7
   1330c:	mov	r2, r0
   13310:	mov	r0, r7
   13314:	bl	118bc <error@plt>
   13318:	ldr	r7, [r4]
   1331c:	cmp	r7, #0
   13320:	bne	12918 <__assert_fail@plt+0xd74>
   13324:	mov	r3, #0
   13328:	str	r3, [r4]
   1332c:	b	12464 <__assert_fail@plt+0x8c0>
   13330:	ldr	r1, [pc, #-1964]	; 12b8c <__assert_fail@plt+0xfe8>
   13334:	str	r1, [sl, #56]	; 0x38
   13338:	ldr	r3, [pc, #-1968]	; 12b90 <__assert_fail@plt+0xfec>
   1333c:	ldr	r4, [pc, #-1968]	; 12b94 <__assert_fail@plt+0xff0>
   13340:	mov	ip, #1
   13344:	ldr	r3, [r3]
   13348:	mov	r0, #4
   1334c:	str	r3, [sp, #4]
   13350:	str	r0, [sp]
   13354:	add	r3, r4, #524	; 0x20c
   13358:	add	r2, r4, #536	; 0x218
   1335c:	str	ip, [sp, #8]
   13360:	ldr	r0, [pc, #-2000]	; 12b98 <__assert_fail@plt+0xff4>
   13364:	bl	1404c <__assert_fail@plt+0x24a8>
   13368:	add	r0, r4, r0, lsl #2
   1336c:	ldr	r3, [r0, #524]	; 0x20c
   13370:	cmp	r3, #1
   13374:	beq	13404 <__assert_fail@plt+0x1860>
   13378:	bcc	13484 <__assert_fail@plt+0x18e0>
   1337c:	cmp	r3, #2
   13380:	ldreq	r3, [pc, #-2028]	; 12b9c <__assert_fail@plt+0xff8>
   13384:	streq	r3, [sl, #20]
   13388:	b	124b8 <__assert_fail@plt+0x914>
   1338c:	bl	145a0 <__assert_fail@plt+0x29fc>
   13390:	cmp	r0, #0
   13394:	str	r0, [sl, #80]	; 0x50
   13398:	beq	13400 <__assert_fail@plt+0x185c>
   1339c:	mov	r0, r6
   133a0:	bl	1e230 <__assert_fail@plt+0xc68c>
   133a4:	mov	r6, r0
   133a8:	b	133b8 <__assert_fail@plt+0x1814>
   133ac:	mov	r0, r6
   133b0:	ldr	r6, [r6, #28]
   133b4:	bl	1eb84 <__assert_fail@plt+0xcfe0>
   133b8:	cmp	r6, #0
   133bc:	beq	13148 <__assert_fail@plt+0x15a4>
   133c0:	ldrb	r3, [r6, #24]
   133c4:	tst	r3, #3
   133c8:	bne	133ac <__assert_fail@plt+0x1808>
   133cc:	add	r2, sp, #120	; 0x78
   133d0:	ldr	r1, [r6, #4]
   133d4:	mov	r0, #3
   133d8:	bl	11b38 <__xstat64@plt>
   133dc:	cmp	r0, #0
   133e0:	bne	133ac <__assert_fail@plt+0x1808>
   133e4:	ldrd	r8, [sp, #216]	; 0xd8
   133e8:	ldrd	r2, [sp, #120]	; 0x78
   133ec:	ldr	r0, [sl, #80]	; 0x50
   133f0:	strd	r8, [sp]
   133f4:	bl	1464c <__assert_fail@plt+0x2aa8>
   133f8:	cmp	r0, #0
   133fc:	bge	133ac <__assert_fail@plt+0x1808>
   13400:	bl	34e28 <__assert_fail@plt+0x23284>
   13404:	ldr	r3, [pc, #-2156]	; 12ba0 <__assert_fail@plt+0xffc>
   13408:	str	r3, [sl, #20]
   1340c:	b	124b8 <__assert_fail@plt+0x914>
   13410:	cmp	r6, r3
   13414:	addgt	r0, r5, r3, lsl #2
   13418:	addle	r0, sp, #112	; 0x70
   1341c:	bl	142f4 <__assert_fail@plt+0x2750>
   13420:	ldr	r2, [r4]
   13424:	ldr	r3, [sp, #32]
   13428:	add	r2, r2, #1
   1342c:	sub	r3, r3, #2
   13430:	clz	r3, r3
   13434:	lsr	r3, r3, #5
   13438:	cmp	r6, r2
   1343c:	movle	r6, r3
   13440:	orrgt	r6, r3, #1
   13444:	strb	r6, [sl, #60]	; 0x3c
   13448:	str	r0, [sp, #72]	; 0x48
   1344c:	b	12518 <__assert_fail@plt+0x974>
   13450:	mov	r2, #5
   13454:	ldr	r1, [pc, #-2232]	; 12ba4 <__assert_fail@plt+0x1000>
   13458:	mov	r0, #0
   1345c:	bl	117d8 <dcgettext@plt>
   13460:	mov	r1, #0
   13464:	mov	r2, r0
   13468:	mov	r0, r1
   1346c:	bl	118bc <error@plt>
   13470:	b	1247c <__assert_fail@plt+0x8d8>
   13474:	bl	16448 <__assert_fail@plt+0x48a4>
   13478:	cmp	r0, #0
   1347c:	bne	132b0 <__assert_fail@plt+0x170c>
   13480:	b	132bc <__assert_fail@plt+0x1718>
   13484:	ldr	r3, [pc, #-2276]	; 12ba8 <__assert_fail@plt+0x1004>
   13488:	str	r3, [sl, #20]
   1348c:	b	124b8 <__assert_fail@plt+0x914>
   13490:	ldr	r0, [pc, #-2284]	; 12bac <__assert_fail@plt+0x1008>
   13494:	bl	118ec <getenv@plt>
   13498:	cmp	r0, #0
   1349c:	mov	r4, r0
   134a0:	str	r0, [sl, #56]	; 0x38
   134a4:	beq	13330 <__assert_fail@plt+0x178c>
   134a8:	ldr	r1, [pc, #-2304]	; 12bb0 <__assert_fail@plt+0x100c>
   134ac:	bl	1170c <strcmp@plt>
   134b0:	cmp	r0, #0
   134b4:	beq	13330 <__assert_fail@plt+0x178c>
   134b8:	ldrb	r3, [r4]
   134bc:	cmp	r3, #43	; 0x2b
   134c0:	movne	r7, #6
   134c4:	ldrne	r4, [pc, #-2328]	; 12bb4 <__assert_fail@plt+0x1010>
   134c8:	bne	134d8 <__assert_fail@plt+0x1934>
   134cc:	b	134f8 <__assert_fail@plt+0x1954>
   134d0:	add	r8, r8, #6
   134d4:	str	r8, [sl, #56]	; 0x38
   134d8:	ldr	r8, [sl, #56]	; 0x38
   134dc:	mov	r2, r7
   134e0:	mov	r0, r8
   134e4:	mov	r1, r4
   134e8:	bl	11b5c <strncmp@plt>
   134ec:	cmp	r0, #0
   134f0:	beq	134d0 <__assert_fail@plt+0x192c>
   134f4:	b	124a0 <__assert_fail@plt+0x8fc>
   134f8:	mov	r1, #10
   134fc:	mov	r0, r4
   13500:	bl	11994 <strchr@plt>
   13504:	cmp	r0, #0
   13508:	strbne	r7, [r0]
   1350c:	bne	124a0 <__assert_fail@plt+0x8fc>
   13510:	mov	r1, r4
   13514:	b	124b0 <__assert_fail@plt+0x90c>
   13518:	bl	119b8 <__errno_location@plt>
   1351c:	mov	r2, #5
   13520:	ldr	r1, [pc, #-2416]	; 12bb8 <__assert_fail@plt+0x1014>
   13524:	ldr	r4, [r0]
   13528:	mov	r0, r5
   1352c:	bl	117d8 <dcgettext@plt>
   13530:	ldr	r1, [sp, #64]	; 0x40
   13534:	mov	r5, r0
   13538:	mov	r0, #4
   1353c:	bl	211ac <__assert_fail@plt+0xf608>
   13540:	mov	r2, r5
   13544:	mov	r1, r4
   13548:	mov	r3, r0
   1354c:	mov	r0, #1
   13550:	bl	118bc <error@plt>
   13554:	mov	r2, #5
   13558:	ldr	r1, [pc, #-2468]	; 12bbc <__assert_fail@plt+0x1018>
   1355c:	mov	r0, #0
   13560:	bl	117d8 <dcgettext@plt>
   13564:	ldr	r3, [r4]
   13568:	mov	r6, r0
   1356c:	ldr	r0, [r5, r3, lsl #2]
   13570:	bl	22b1c <__assert_fail@plt+0x10f78>
   13574:	mov	r1, #0
   13578:	mov	r2, r6
   1357c:	mov	r3, r0
   13580:	mov	r0, r1
   13584:	bl	118bc <error@plt>
   13588:	ldr	r3, [pc, #-2512]	; 12bc0 <__assert_fail@plt+0x101c>
   1358c:	mov	r2, #5
   13590:	ldr	r1, [pc, #-2516]	; 12bc4 <__assert_fail@plt+0x1020>
   13594:	mov	r0, #0
   13598:	ldr	r4, [r3]
   1359c:	bl	117d8 <dcgettext@plt>
   135a0:	ldr	r2, [pc, #-2528]	; 12bc8 <__assert_fail@plt+0x1024>
   135a4:	mov	r1, #1
   135a8:	mov	r3, r0
   135ac:	mov	r0, r4
   135b0:	bl	11a18 <__fprintf_chk@plt>
   135b4:	mov	r0, #1
   135b8:	bl	13944 <__assert_fail@plt+0x1da0>
   135bc:	ldr	r3, [pc, #-2536]	; 12bdc <__assert_fail@plt+0x1038>
   135c0:	ldr	r2, [pc, #-2556]	; 12bcc <__assert_fail@plt+0x1028>
   135c4:	ldr	r1, [pc, #-2540]	; 12be0 <__assert_fail@plt+0x103c>
   135c8:	ldr	r0, [pc, #-2560]	; 12bd0 <__assert_fail@plt+0x102c>
   135cc:	bl	11ba4 <__assert_fail@plt>
   135d0:	ldr	r3, [pc, #-2556]	; 12bdc <__assert_fail@plt+0x1038>
   135d4:	ldr	r2, [pc, #-2568]	; 12bd4 <__assert_fail@plt+0x1030>
   135d8:	ldr	r1, [pc, #-2560]	; 12be0 <__assert_fail@plt+0x103c>
   135dc:	ldr	r0, [pc, #-2572]	; 12bd8 <__assert_fail@plt+0x1034>
   135e0:	bl	11ba4 <__assert_fail@plt>
   135e4:	mov	r2, #5
   135e8:	ldr	r1, [pc, #-2572]	; 12be4 <__assert_fail@plt+0x1040>
   135ec:	mov	r0, #0
   135f0:	bl	117d8 <dcgettext@plt>
   135f4:	ldr	r1, [sp, #64]	; 0x40
   135f8:	mov	r4, r0
   135fc:	mov	r0, #4
   13600:	bl	211ac <__assert_fail@plt+0xf608>
   13604:	mov	r2, r4
   13608:	mov	r1, #0
   1360c:	mov	r3, r0
   13610:	mov	r0, #1
   13614:	bl	118bc <error@plt>
   13618:	mov	r2, #5
   1361c:	ldr	r1, [pc, #-2620]	; 12be8 <__assert_fail@plt+0x1044>
   13620:	mov	r0, #0
   13624:	bl	117d8 <dcgettext@plt>
   13628:	mov	r1, #0
   1362c:	mov	r2, r0
   13630:	mov	r0, r1
   13634:	bl	118bc <error@plt>
   13638:	mov	r0, #1
   1363c:	bl	13944 <__assert_fail@plt+0x1da0>
   13640:	ldr	r2, [r9]
   13644:	ldr	r3, [pc, #-2656]	; 12bec <__assert_fail@plt+0x1048>
   13648:	str	r2, [sp]
   1364c:	ldr	r1, [sp, #108]	; 0x6c
   13650:	mov	r2, #116	; 0x74
   13654:	bl	35a7c <__assert_fail@plt+0x23ed8>
   13658:	mov	fp, #0
   1365c:	mov	lr, #0
   13660:	pop	{r1}		; (ldr r1, [sp], #4)
   13664:	mov	r2, sp
   13668:	push	{r2}		; (str r2, [sp, #-4]!)
   1366c:	push	{r0}		; (str r0, [sp, #-4]!)
   13670:	ldr	ip, [pc, #16]	; 13688 <__assert_fail@plt+0x1ae4>
   13674:	push	{ip}		; (str ip, [sp, #-4]!)
   13678:	ldr	r0, [pc, #12]	; 1368c <__assert_fail@plt+0x1ae8>
   1367c:	ldr	r3, [pc, #12]	; 13690 <__assert_fail@plt+0x1aec>
   13680:	bl	11904 <__libc_start_main@plt>
   13684:	bl	11b68 <abort@plt>
   13688:	ldrdeq	r8, [r3], -r8	; <UNPREDICTABLE>
   1368c:			; <UNDEFINED> instruction: 0x00011bb0
   13690:	andeq	r8, r3, r8, ror r3
   13694:	ldr	r3, [pc, #20]	; 136b0 <__assert_fail@plt+0x1b0c>
   13698:	ldr	r2, [pc, #20]	; 136b4 <__assert_fail@plt+0x1b10>
   1369c:	add	r3, pc, r3
   136a0:	ldr	r2, [r3, r2]
   136a4:	cmp	r2, #0
   136a8:	bxeq	lr
   136ac:	b	11940 <__gmon_start__@plt>
   136b0:	andeq	r7, r3, ip, asr r9
   136b4:	andeq	r0, r0, r0, asr #3
   136b8:	ldr	r3, [pc, #28]	; 136dc <__assert_fail@plt+0x1b38>
   136bc:	ldr	r0, [pc, #28]	; 136e0 <__assert_fail@plt+0x1b3c>
   136c0:	sub	r3, r3, r0
   136c4:	cmp	r3, #6
   136c8:	bxls	lr
   136cc:	ldr	r3, [pc, #16]	; 136e4 <__assert_fail@plt+0x1b40>
   136d0:	cmp	r3, #0
   136d4:	bxeq	lr
   136d8:	bx	r3
   136dc:	andeq	fp, r4, pc, lsl r2
   136e0:	andeq	fp, r4, ip, lsl r2
   136e4:	andeq	r0, r0, r0
   136e8:	ldr	r1, [pc, #36]	; 13714 <__assert_fail@plt+0x1b70>
   136ec:	ldr	r0, [pc, #36]	; 13718 <__assert_fail@plt+0x1b74>
   136f0:	sub	r1, r1, r0
   136f4:	asr	r1, r1, #2
   136f8:	add	r1, r1, r1, lsr #31
   136fc:	asrs	r1, r1, #1
   13700:	bxeq	lr
   13704:	ldr	r3, [pc, #16]	; 1371c <__assert_fail@plt+0x1b78>
   13708:	cmp	r3, #0
   1370c:	bxeq	lr
   13710:	bx	r3
   13714:	andeq	fp, r4, ip, lsl r2
   13718:	andeq	fp, r4, ip, lsl r2
   1371c:	andeq	r0, r0, r0
   13720:	push	{r4, lr}
   13724:	ldr	r4, [pc, #24]	; 13744 <__assert_fail@plt+0x1ba0>
   13728:	ldrb	r3, [r4]
   1372c:	cmp	r3, #0
   13730:	popne	{r4, pc}
   13734:	bl	136b8 <__assert_fail@plt+0x1b14>
   13738:	mov	r3, #1
   1373c:	strb	r3, [r4]
   13740:	pop	{r4, pc}
   13744:	andeq	fp, r4, r4, asr #4
   13748:	ldr	r0, [pc, #40]	; 13778 <__assert_fail@plt+0x1bd4>
   1374c:	ldr	r3, [r0]
   13750:	cmp	r3, #0
   13754:	bne	1375c <__assert_fail@plt+0x1bb8>
   13758:	b	136e8 <__assert_fail@plt+0x1b44>
   1375c:	ldr	r3, [pc, #24]	; 1377c <__assert_fail@plt+0x1bd8>
   13760:	cmp	r3, #0
   13764:	beq	13758 <__assert_fail@plt+0x1bb4>
   13768:	push	{r4, lr}
   1376c:	blx	r3
   13770:	pop	{r4, lr}
   13774:	b	136e8 <__assert_fail@plt+0x1b44>
   13778:	andeq	sl, r4, r4, lsl pc
   1377c:	andeq	r0, r0, r0
   13780:	mvn	r3, #0
   13784:	mvn	r2, #0
   13788:	cmp	r1, r3
   1378c:	cmpeq	r0, r2
   13790:	push	{r4, r5, r6, r7, lr}
   13794:	sub	sp, sp, #676	; 0x2a4
   13798:	beq	137d4 <__assert_fail@plt+0x1c30>
   1379c:	ldr	r3, [pc, #68]	; 137e8 <__assert_fail@plt+0x1c44>
   137a0:	mov	r6, #1
   137a4:	mov	r7, #0
   137a8:	ldrd	r4, [r3, #8]
   137ac:	add	r2, sp, #20
   137b0:	ldr	r3, [r3]
   137b4:	strd	r6, [sp]
   137b8:	strd	r4, [sp, #8]
   137bc:	bl	1c778 <__assert_fail@plt+0xabd4>
   137c0:	ldr	r3, [pc, #36]	; 137ec <__assert_fail@plt+0x1c48>
   137c4:	ldr	r1, [r3]
   137c8:	bl	116b8 <fputs_unlocked@plt>
   137cc:	add	sp, sp, #676	; 0x2a4
   137d0:	pop	{r4, r5, r6, r7, pc}
   137d4:	mov	r2, #5
   137d8:	ldr	r1, [pc, #16]	; 137f0 <__assert_fail@plt+0x1c4c>
   137dc:	mov	r0, #0
   137e0:	bl	117d8 <dcgettext@plt>
   137e4:	b	137c0 <__assert_fail@plt+0x1c1c>
   137e8:	andeq	fp, r4, r8, asr #4
   137ec:	andeq	fp, r4, ip, lsr r2
   137f0:	andeq	r8, r3, r0, asr #12
   137f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   137f8:	mov	r5, r0
   137fc:	ldr	r4, [pc, #304]	; 13934 <__assert_fail@plt+0x1d90>
   13800:	sub	sp, sp, #92	; 0x5c
   13804:	mov	r7, r1
   13808:	ldrb	r3, [r4, #16]
   1380c:	cmp	r3, #0
   13810:	beq	138cc <__assert_fail@plt+0x1d28>
   13814:	ldrd	r0, [r0, #8]
   13818:	bl	13780 <__assert_fail@plt+0x1bdc>
   1381c:	ldrb	r3, [r4, #17]
   13820:	ldr	r6, [pc, #272]	; 13938 <__assert_fail@plt+0x1d94>
   13824:	cmp	r3, #0
   13828:	beq	1389c <__assert_fail@plt+0x1cf8>
   1382c:	ldr	r0, [r6]
   13830:	ldr	r3, [r0, #20]
   13834:	ldr	r2, [r0, #24]
   13838:	cmp	r3, r2
   1383c:	addcc	r1, r3, #1
   13840:	movcc	r2, #9
   13844:	strcc	r1, [r0, #20]
   13848:	strbcc	r2, [r3]
   1384c:	bcs	13928 <__assert_fail@plt+0x1d84>
   13850:	add	r5, r5, #16
   13854:	add	ip, sp, #12
   13858:	ldm	r5, {r0, r1}
   1385c:	ldr	r5, [r4, #24]
   13860:	add	r2, sp, #44	; 0x2c
   13864:	stm	ip, {r0, r1}
   13868:	mov	r1, ip
   1386c:	mov	r0, r5
   13870:	ldr	r8, [r4, #20]
   13874:	bl	33b10 <__assert_fail@plt+0x21f6c>
   13878:	subs	r9, r0, #0
   1387c:	beq	138d4 <__assert_fail@plt+0x1d30>
   13880:	ldr	ip, [sp, #16]
   13884:	ldr	r0, [r6]
   13888:	mov	r3, r5
   1388c:	add	r2, sp, #44	; 0x2c
   13890:	mov	r1, r8
   13894:	str	ip, [sp]
   13898:	bl	184ac <__assert_fail@plt+0x6908>
   1389c:	ldrb	r3, [r4, #28]
   138a0:	mov	r2, r7
   138a4:	ldr	r1, [pc, #144]	; 1393c <__assert_fail@plt+0x1d98>
   138a8:	cmp	r3, #0
   138ac:	moveq	r3, #10
   138b0:	movne	r3, #0
   138b4:	mov	r0, #1
   138b8:	bl	11a00 <__printf_chk@plt>
   138bc:	ldr	r0, [r6]
   138c0:	bl	1182c <fflush_unlocked@plt>
   138c4:	add	sp, sp, #92	; 0x5c
   138c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   138cc:	ldrd	r0, [r0]
   138d0:	b	13818 <__assert_fail@plt+0x1c74>
   138d4:	ldr	r0, [sp, #12]
   138d8:	add	r2, sp, #20
   138dc:	asr	r1, r0, #31
   138e0:	bl	1d994 <__assert_fail@plt+0xbdf0>
   138e4:	mov	r2, #5
   138e8:	ldr	r1, [pc, #80]	; 13940 <__assert_fail@plt+0x1d9c>
   138ec:	mov	r5, r0
   138f0:	mov	r0, r9
   138f4:	bl	117d8 <dcgettext@plt>
   138f8:	mov	r8, r0
   138fc:	mov	r0, r5
   13900:	bl	22b1c <__assert_fail@plt+0x10f78>
   13904:	mov	r1, r9
   13908:	mov	r2, r8
   1390c:	mov	r3, r0
   13910:	mov	r0, r9
   13914:	bl	118bc <error@plt>
   13918:	mov	r0, r5
   1391c:	ldr	r1, [r6]
   13920:	bl	116b8 <fputs_unlocked@plt>
   13924:	b	1389c <__assert_fail@plt+0x1cf8>
   13928:	mov	r1, #9
   1392c:	bl	11a60 <__overflow@plt>
   13930:	b	13850 <__assert_fail@plt+0x1cac>
   13934:	andeq	fp, r4, r8, asr #4
   13938:	andeq	fp, r4, ip, lsr r2
   1393c:	andeq	r8, r3, r4, ror #12
   13940:	andeq	r8, r3, ip, asr #12
   13944:	subs	r5, r0, #0
   13948:	push	{r7, lr}
   1394c:	sub	sp, sp, #56	; 0x38
   13950:	beq	1398c <__assert_fail@plt+0x1de8>
   13954:	ldr	r3, [pc, #864]	; 13cbc <__assert_fail@plt+0x2118>
   13958:	mov	r2, #5
   1395c:	ldr	r1, [pc, #860]	; 13cc0 <__assert_fail@plt+0x211c>
   13960:	mov	r0, #0
   13964:	ldr	r4, [r3]
   13968:	bl	117d8 <dcgettext@plt>
   1396c:	ldr	r3, [pc, #848]	; 13cc4 <__assert_fail@plt+0x2120>
   13970:	mov	r1, #1
   13974:	ldr	r3, [r3]
   13978:	mov	r2, r0
   1397c:	mov	r0, r4
   13980:	bl	11a18 <__fprintf_chk@plt>
   13984:	mov	r0, r5
   13988:	bl	11970 <exit@plt>
   1398c:	mov	r2, #5
   13990:	ldr	r1, [pc, #816]	; 13cc8 <__assert_fail@plt+0x2124>
   13994:	bl	117d8 <dcgettext@plt>
   13998:	ldr	r3, [pc, #804]	; 13cc4 <__assert_fail@plt+0x2120>
   1399c:	ldr	r6, [pc, #808]	; 13ccc <__assert_fail@plt+0x2128>
   139a0:	ldr	r4, [pc, #808]	; 13cd0 <__assert_fail@plt+0x212c>
   139a4:	ldr	r3, [r3]
   139a8:	mov	r2, r3
   139ac:	mov	r1, r0
   139b0:	mov	r0, #1
   139b4:	bl	11a00 <__printf_chk@plt>
   139b8:	mov	r2, #5
   139bc:	ldr	r1, [pc, #784]	; 13cd4 <__assert_fail@plt+0x2130>
   139c0:	mov	r0, r5
   139c4:	bl	117d8 <dcgettext@plt>
   139c8:	ldr	r1, [r6]
   139cc:	bl	116b8 <fputs_unlocked@plt>
   139d0:	mov	r2, #5
   139d4:	ldr	r1, [pc, #764]	; 13cd8 <__assert_fail@plt+0x2134>
   139d8:	mov	r0, r5
   139dc:	bl	117d8 <dcgettext@plt>
   139e0:	ldr	r1, [r6]
   139e4:	bl	116b8 <fputs_unlocked@plt>
   139e8:	mov	r2, #5
   139ec:	ldr	r1, [pc, #744]	; 13cdc <__assert_fail@plt+0x2138>
   139f0:	mov	r0, r5
   139f4:	bl	117d8 <dcgettext@plt>
   139f8:	ldr	r1, [r6]
   139fc:	bl	116b8 <fputs_unlocked@plt>
   13a00:	mov	r2, #5
   13a04:	ldr	r1, [pc, #724]	; 13ce0 <__assert_fail@plt+0x213c>
   13a08:	mov	r0, r5
   13a0c:	bl	117d8 <dcgettext@plt>
   13a10:	ldr	r1, [r6]
   13a14:	bl	116b8 <fputs_unlocked@plt>
   13a18:	mov	r2, #5
   13a1c:	ldr	r1, [pc, #704]	; 13ce4 <__assert_fail@plt+0x2140>
   13a20:	mov	r0, r5
   13a24:	bl	117d8 <dcgettext@plt>
   13a28:	ldr	r1, [r6]
   13a2c:	bl	116b8 <fputs_unlocked@plt>
   13a30:	mov	r2, #5
   13a34:	ldr	r1, [pc, #684]	; 13ce8 <__assert_fail@plt+0x2144>
   13a38:	mov	r0, r5
   13a3c:	bl	117d8 <dcgettext@plt>
   13a40:	ldr	r1, [r6]
   13a44:	bl	116b8 <fputs_unlocked@plt>
   13a48:	mov	r2, #5
   13a4c:	ldr	r1, [pc, #664]	; 13cec <__assert_fail@plt+0x2148>
   13a50:	mov	r0, r5
   13a54:	bl	117d8 <dcgettext@plt>
   13a58:	ldr	r1, [r6]
   13a5c:	bl	116b8 <fputs_unlocked@plt>
   13a60:	mov	r2, #5
   13a64:	ldr	r1, [pc, #644]	; 13cf0 <__assert_fail@plt+0x214c>
   13a68:	mov	r0, r5
   13a6c:	bl	117d8 <dcgettext@plt>
   13a70:	ldr	r1, [r6]
   13a74:	bl	116b8 <fputs_unlocked@plt>
   13a78:	mov	r2, #5
   13a7c:	ldr	r1, [pc, #624]	; 13cf4 <__assert_fail@plt+0x2150>
   13a80:	mov	r0, r5
   13a84:	bl	117d8 <dcgettext@plt>
   13a88:	ldr	r1, [r6]
   13a8c:	bl	116b8 <fputs_unlocked@plt>
   13a90:	mov	r2, #5
   13a94:	ldr	r1, [pc, #604]	; 13cf8 <__assert_fail@plt+0x2154>
   13a98:	mov	r0, r5
   13a9c:	bl	117d8 <dcgettext@plt>
   13aa0:	ldr	r1, [r6]
   13aa4:	bl	116b8 <fputs_unlocked@plt>
   13aa8:	mov	r2, #5
   13aac:	ldr	r1, [pc, #584]	; 13cfc <__assert_fail@plt+0x2158>
   13ab0:	mov	r0, r5
   13ab4:	bl	117d8 <dcgettext@plt>
   13ab8:	ldr	r1, [r6]
   13abc:	bl	116b8 <fputs_unlocked@plt>
   13ac0:	mov	r2, #5
   13ac4:	ldr	r1, [pc, #564]	; 13d00 <__assert_fail@plt+0x215c>
   13ac8:	mov	r0, r5
   13acc:	bl	117d8 <dcgettext@plt>
   13ad0:	ldr	r2, [pc, #556]	; 13d04 <__assert_fail@plt+0x2160>
   13ad4:	mov	r1, r0
   13ad8:	mov	r0, #1
   13adc:	bl	11a00 <__printf_chk@plt>
   13ae0:	mov	r2, #5
   13ae4:	ldr	r1, [pc, #540]	; 13d08 <__assert_fail@plt+0x2164>
   13ae8:	mov	r0, r5
   13aec:	bl	117d8 <dcgettext@plt>
   13af0:	ldr	r1, [r6]
   13af4:	bl	116b8 <fputs_unlocked@plt>
   13af8:	ldm	r4!, {r0, r1, r2, r3}
   13afc:	mov	lr, sp
   13b00:	stmia	lr!, {r0, r1, r2, r3}
   13b04:	ldm	r4!, {r0, r1, r2, r3}
   13b08:	ldr	ip, [sp]
   13b0c:	stmia	lr!, {r0, r1, r2, r3}
   13b10:	cmp	ip, #0
   13b14:	ldm	r4!, {r0, r1, r2, r3}
   13b18:	stmia	lr!, {r0, r1, r2, r3}
   13b1c:	ldm	r4, {r0, r1}
   13b20:	moveq	r4, sp
   13b24:	stm	lr, {r0, r1}
   13b28:	beq	13b58 <__assert_fail@plt+0x1fb4>
   13b2c:	ldr	r7, [pc, #472]	; 13d0c <__assert_fail@plt+0x2168>
   13b30:	mov	r4, sp
   13b34:	b	13b44 <__assert_fail@plt+0x1fa0>
   13b38:	ldr	ip, [r4, #8]!
   13b3c:	cmp	ip, #0
   13b40:	beq	13b58 <__assert_fail@plt+0x1fb4>
   13b44:	mov	r1, ip
   13b48:	mov	r0, r7
   13b4c:	bl	1170c <strcmp@plt>
   13b50:	cmp	r0, #0
   13b54:	bne	13b38 <__assert_fail@plt+0x1f94>
   13b58:	ldr	r4, [r4, #4]
   13b5c:	mov	r2, #5
   13b60:	cmp	r4, #0
   13b64:	ldr	r1, [pc, #420]	; 13d10 <__assert_fail@plt+0x216c>
   13b68:	beq	13c10 <__assert_fail@plt+0x206c>
   13b6c:	mov	r0, #0
   13b70:	bl	117d8 <dcgettext@plt>
   13b74:	ldr	r3, [pc, #408]	; 13d14 <__assert_fail@plt+0x2170>
   13b78:	ldr	r2, [pc, #408]	; 13d18 <__assert_fail@plt+0x2174>
   13b7c:	mov	r1, r0
   13b80:	mov	r0, #1
   13b84:	bl	11a00 <__printf_chk@plt>
   13b88:	mov	r1, #0
   13b8c:	mov	r0, #5
   13b90:	bl	11a6c <setlocale@plt>
   13b94:	cmp	r0, #0
   13b98:	ldreq	r7, [pc, #364]	; 13d0c <__assert_fail@plt+0x2168>
   13b9c:	beq	13bb8 <__assert_fail@plt+0x2014>
   13ba0:	mov	r2, #3
   13ba4:	ldr	r1, [pc, #368]	; 13d1c <__assert_fail@plt+0x2178>
   13ba8:	bl	11b5c <strncmp@plt>
   13bac:	ldr	r7, [pc, #344]	; 13d0c <__assert_fail@plt+0x2168>
   13bb0:	cmp	r0, #0
   13bb4:	bne	13ca0 <__assert_fail@plt+0x20fc>
   13bb8:	mov	r2, #5
   13bbc:	ldr	r1, [pc, #348]	; 13d20 <__assert_fail@plt+0x217c>
   13bc0:	mov	r0, #0
   13bc4:	bl	117d8 <dcgettext@plt>
   13bc8:	ldr	r3, [pc, #316]	; 13d0c <__assert_fail@plt+0x2168>
   13bcc:	ldr	r2, [pc, #320]	; 13d14 <__assert_fail@plt+0x2170>
   13bd0:	mov	r1, r0
   13bd4:	mov	r0, #1
   13bd8:	bl	11a00 <__printf_chk@plt>
   13bdc:	mov	r2, #5
   13be0:	ldr	r1, [pc, #316]	; 13d24 <__assert_fail@plt+0x2180>
   13be4:	mov	r0, #0
   13be8:	bl	117d8 <dcgettext@plt>
   13bec:	ldr	r2, [pc, #308]	; 13d28 <__assert_fail@plt+0x2184>
   13bf0:	cmp	r4, r7
   13bf4:	ldr	r3, [pc, #304]	; 13d2c <__assert_fail@plt+0x2188>
   13bf8:	movne	r3, r2
   13bfc:	mov	r1, r0
   13c00:	mov	r2, r4
   13c04:	mov	r0, #1
   13c08:	bl	11a00 <__printf_chk@plt>
   13c0c:	b	13984 <__assert_fail@plt+0x1de0>
   13c10:	mov	r0, r4
   13c14:	bl	117d8 <dcgettext@plt>
   13c18:	ldr	r3, [pc, #244]	; 13d14 <__assert_fail@plt+0x2170>
   13c1c:	ldr	r2, [pc, #244]	; 13d18 <__assert_fail@plt+0x2174>
   13c20:	mov	r1, r0
   13c24:	mov	r0, #1
   13c28:	bl	11a00 <__printf_chk@plt>
   13c2c:	mov	r1, r4
   13c30:	mov	r0, #5
   13c34:	bl	11a6c <setlocale@plt>
   13c38:	cmp	r0, #0
   13c3c:	beq	13c54 <__assert_fail@plt+0x20b0>
   13c40:	mov	r2, #3
   13c44:	ldr	r1, [pc, #208]	; 13d1c <__assert_fail@plt+0x2178>
   13c48:	bl	11b5c <strncmp@plt>
   13c4c:	cmp	r0, #0
   13c50:	bne	13c98 <__assert_fail@plt+0x20f4>
   13c54:	mov	r2, #5
   13c58:	ldr	r1, [pc, #192]	; 13d20 <__assert_fail@plt+0x217c>
   13c5c:	mov	r0, #0
   13c60:	bl	117d8 <dcgettext@plt>
   13c64:	ldr	r3, [pc, #160]	; 13d0c <__assert_fail@plt+0x2168>
   13c68:	ldr	r2, [pc, #164]	; 13d14 <__assert_fail@plt+0x2170>
   13c6c:	mov	r4, r3
   13c70:	mov	r1, r0
   13c74:	mov	r0, #1
   13c78:	bl	11a00 <__printf_chk@plt>
   13c7c:	ldr	r1, [pc, #160]	; 13d24 <__assert_fail@plt+0x2180>
   13c80:	mov	r2, #5
   13c84:	mov	r0, #0
   13c88:	bl	117d8 <dcgettext@plt>
   13c8c:	ldr	r3, [pc, #152]	; 13d2c <__assert_fail@plt+0x2188>
   13c90:	mov	r1, r0
   13c94:	b	13c00 <__assert_fail@plt+0x205c>
   13c98:	ldr	r7, [pc, #108]	; 13d0c <__assert_fail@plt+0x2168>
   13c9c:	mov	r4, r7
   13ca0:	mov	r2, #5
   13ca4:	ldr	r1, [pc, #132]	; 13d30 <__assert_fail@plt+0x218c>
   13ca8:	mov	r0, #0
   13cac:	bl	117d8 <dcgettext@plt>
   13cb0:	ldr	r1, [r6]
   13cb4:	bl	116b8 <fputs_unlocked@plt>
   13cb8:	b	13bb8 <__assert_fail@plt+0x2014>
   13cbc:	andeq	fp, r4, r0, lsr r2
   13cc0:	andeq	r8, r3, r0, ror r6
   13cc4:	andeq	fp, r4, r8, asr #5
   13cc8:	muleq	r3, r8, r6
   13ccc:	andeq	fp, r4, ip, lsr r2
   13cd0:	andeq	r8, r3, r0, lsl #8
   13cd4:	andeq	r8, r3, r0, ror #13
   13cd8:	andeq	r8, r3, ip, lsr #14
   13cdc:	andeq	r8, r3, r8, ror r7
   13ce0:	andeq	r8, r3, r4, lsr r9
   13ce4:	andeq	r8, r3, r8, ror #23
   13ce8:	andeq	r8, r3, ip, lsl #27
   13cec:	andeq	r8, r3, ip, asr lr
   13cf0:	andeq	r8, r3, ip, ror pc
   13cf4:	andeq	r9, r3, r0, ror #3
   13cf8:	andeq	r9, r3, ip, lsr #5
   13cfc:	ldrdeq	r9, [r3], -ip
   13d00:	andeq	r9, r3, r4, lsl r3
   13d04:	strdeq	r9, [r3], -r4
   13d08:	strdeq	r9, [r3], -r8
   13d0c:	andeq	r8, r3, ip, ror #12
   13d10:	andeq	r9, r3, ip, asr #9
   13d14:	andeq	r9, r3, r4, ror #9
   13d18:	andeq	r9, r3, ip, lsl #10
   13d1c:	andeq	r9, r3, ip, lsl r5
   13d20:	andeq	r9, r3, r8, ror #10
   13d24:	andeq	r9, r3, r4, lsl #11
   13d28:	andeq	r9, r3, r4, lsr #27
   13d2c:	andeq	r9, r3, r8, asr #20
   13d30:	andeq	r9, r3, r0, lsr #10
   13d34:	mov	r0, #1
   13d38:	b	13944 <__assert_fail@plt+0x1da0>
   13d3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d40:	mov	r4, r1
   13d44:	sub	sp, sp, #12
   13d48:	mov	r5, r2
   13d4c:	str	r2, [sp, #4]
   13d50:	mov	r7, r3
   13d54:	mov	sl, r0
   13d58:	bl	11988 <strlen@plt>
   13d5c:	ldr	fp, [r4]
   13d60:	cmp	fp, #0
   13d64:	beq	13e78 <__assert_fail@plt+0x22d4>
   13d68:	cmp	r5, #0
   13d6c:	mov	r8, r0
   13d70:	mov	r3, r5
   13d74:	beq	13e20 <__assert_fail@plt+0x227c>
   13d78:	mov	r2, #0
   13d7c:	mov	r5, r2
   13d80:	mov	r6, r3
   13d84:	mvn	r9, #0
   13d88:	str	r2, [sp]
   13d8c:	mov	r2, r8
   13d90:	mov	r1, sl
   13d94:	mov	r0, fp
   13d98:	bl	11b5c <strncmp@plt>
   13d9c:	cmp	r0, #0
   13da0:	mov	r0, fp
   13da4:	bne	13de4 <__assert_fail@plt+0x2240>
   13da8:	bl	11988 <strlen@plt>
   13dac:	ldr	r3, [sp, #4]
   13db0:	mov	r2, r7
   13db4:	mov	r1, r6
   13db8:	cmp	r8, r0
   13dbc:	mla	r0, r7, r9, r3
   13dc0:	beq	13e10 <__assert_fail@plt+0x226c>
   13dc4:	cmn	r9, #1
   13dc8:	moveq	r9, r5
   13dcc:	beq	13de4 <__assert_fail@plt+0x2240>
   13dd0:	bl	117c0 <memcmp@plt>
   13dd4:	ldr	r3, [sp]
   13dd8:	cmp	r0, #0
   13ddc:	movne	r3, #1
   13de0:	str	r3, [sp]
   13de4:	ldr	fp, [r4, #4]!
   13de8:	add	r5, r5, #1
   13dec:	cmp	fp, #0
   13df0:	add	r6, r6, r7
   13df4:	bne	13d8c <__assert_fail@plt+0x21e8>
   13df8:	ldr	r3, [sp]
   13dfc:	cmp	r3, #0
   13e00:	mvnne	r9, #1
   13e04:	mov	r0, r9
   13e08:	add	sp, sp, #12
   13e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e10:	mov	r9, r5
   13e14:	mov	r0, r9
   13e18:	add	sp, sp, #12
   13e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e20:	mov	r6, r5
   13e24:	mvn	r9, #0
   13e28:	mov	r2, r8
   13e2c:	mov	r1, sl
   13e30:	mov	r0, fp
   13e34:	bl	11b5c <strncmp@plt>
   13e38:	cmp	r0, #0
   13e3c:	mov	r0, fp
   13e40:	bne	13e5c <__assert_fail@plt+0x22b8>
   13e44:	bl	11988 <strlen@plt>
   13e48:	cmp	r8, r0
   13e4c:	beq	13e10 <__assert_fail@plt+0x226c>
   13e50:	cmn	r9, #1
   13e54:	moveq	r9, r5
   13e58:	movne	r6, #1
   13e5c:	ldr	fp, [r4, #4]!
   13e60:	add	r5, r5, #1
   13e64:	cmp	fp, #0
   13e68:	bne	13e28 <__assert_fail@plt+0x2284>
   13e6c:	str	r6, [sp]
   13e70:	mov	r3, r6
   13e74:	b	13dfc <__assert_fail@plt+0x2258>
   13e78:	mvn	r9, #0
   13e7c:	b	13e04 <__assert_fail@plt+0x2260>
   13e80:	push	{r4, r5, r6, lr}
   13e84:	mov	r6, r0
   13e88:	ldr	r0, [r1]
   13e8c:	cmp	r0, #0
   13e90:	beq	13ec8 <__assert_fail@plt+0x2324>
   13e94:	mov	r4, r1
   13e98:	mov	r5, #0
   13e9c:	b	13eb0 <__assert_fail@plt+0x230c>
   13ea0:	ldr	r0, [r4, #4]!
   13ea4:	add	r5, r5, #1
   13ea8:	cmp	r0, #0
   13eac:	beq	13ec8 <__assert_fail@plt+0x2324>
   13eb0:	mov	r1, r6
   13eb4:	bl	1170c <strcmp@plt>
   13eb8:	cmp	r0, #0
   13ebc:	bne	13ea0 <__assert_fail@plt+0x22fc>
   13ec0:	mov	r0, r5
   13ec4:	pop	{r4, r5, r6, pc}
   13ec8:	mvn	r0, #0
   13ecc:	pop	{r4, r5, r6, pc}
   13ed0:	cmn	r2, #1
   13ed4:	push	{r4, r5, r6, lr}
   13ed8:	mov	r2, #5
   13edc:	sub	sp, sp, #8
   13ee0:	mov	r4, r1
   13ee4:	mov	r5, r0
   13ee8:	ldreq	r1, [pc, #76]	; 13f3c <__assert_fail@plt+0x2398>
   13eec:	ldrne	r1, [pc, #76]	; 13f40 <__assert_fail@plt+0x239c>
   13ef0:	mov	r0, #0
   13ef4:	bl	117d8 <dcgettext@plt>
   13ef8:	mov	r2, r4
   13efc:	mov	r1, #8
   13f00:	mov	r6, r0
   13f04:	mov	r0, #0
   13f08:	bl	20dcc <__assert_fail@plt+0xf228>
   13f0c:	mov	r1, r5
   13f10:	mov	r4, r0
   13f14:	mov	r0, #1
   13f18:	bl	22968 <__assert_fail@plt+0x10dc4>
   13f1c:	mov	r1, #0
   13f20:	mov	r3, r4
   13f24:	mov	r2, r6
   13f28:	str	r0, [sp]
   13f2c:	mov	r0, r1
   13f30:	bl	118bc <error@plt>
   13f34:	add	sp, sp, #8
   13f38:	pop	{r4, r5, r6, pc}
   13f3c:	strdeq	r9, [r3], -r8
   13f40:	andeq	r9, r3, r4, lsl ip
   13f44:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f48:	mov	r6, r0
   13f4c:	ldr	r9, [pc, #232]	; 1403c <__assert_fail@plt+0x2498>
   13f50:	mov	r4, r1
   13f54:	mov	r7, r2
   13f58:	ldr	r1, [pc, #224]	; 14040 <__assert_fail@plt+0x249c>
   13f5c:	mov	r2, #5
   13f60:	mov	r0, #0
   13f64:	bl	117d8 <dcgettext@plt>
   13f68:	ldr	r1, [r9]
   13f6c:	bl	116b8 <fputs_unlocked@plt>
   13f70:	ldr	fp, [r6]
   13f74:	cmp	fp, #0
   13f78:	movne	r8, #0
   13f7c:	movne	r5, r8
   13f80:	movne	sl, #1
   13f84:	bne	13fc4 <__assert_fail@plt+0x2420>
   13f88:	b	14008 <__assert_fail@plt+0x2464>
   13f8c:	mov	r0, fp
   13f90:	ldr	r8, [r9]
   13f94:	bl	22b1c <__assert_fail@plt+0x10f78>
   13f98:	ldr	r2, [pc, #164]	; 14044 <__assert_fail@plt+0x24a0>
   13f9c:	mov	r1, sl
   13fa0:	mov	r3, r0
   13fa4:	mov	r0, r8
   13fa8:	bl	11a18 <__fprintf_chk@plt>
   13fac:	mov	r8, r4
   13fb0:	ldr	fp, [r6, #4]!
   13fb4:	add	r5, r5, #1
   13fb8:	cmp	fp, #0
   13fbc:	add	r4, r4, r7
   13fc0:	beq	14008 <__assert_fail@plt+0x2464>
   13fc4:	cmp	r5, #0
   13fc8:	mov	r1, r4
   13fcc:	mov	r2, r7
   13fd0:	mov	r0, r8
   13fd4:	beq	13f8c <__assert_fail@plt+0x23e8>
   13fd8:	bl	117c0 <memcmp@plt>
   13fdc:	cmp	r0, #0
   13fe0:	bne	13f8c <__assert_fail@plt+0x23e8>
   13fe4:	mov	r0, fp
   13fe8:	ldr	fp, [r9]
   13fec:	bl	22b1c <__assert_fail@plt+0x10f78>
   13ff0:	ldr	r2, [pc, #80]	; 14048 <__assert_fail@plt+0x24a4>
   13ff4:	mov	r1, sl
   13ff8:	mov	r3, r0
   13ffc:	mov	r0, fp
   14000:	bl	11a18 <__fprintf_chk@plt>
   14004:	b	13fb0 <__assert_fail@plt+0x240c>
   14008:	ldr	r0, [r9]
   1400c:	ldr	r3, [r0, #20]
   14010:	ldr	r2, [r0, #24]
   14014:	cmp	r3, r2
   14018:	bcs	14030 <__assert_fail@plt+0x248c>
   1401c:	add	r1, r3, #1
   14020:	mov	r2, #10
   14024:	str	r1, [r0, #20]
   14028:	strb	r2, [r3]
   1402c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14030:	mov	r1, #10
   14034:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14038:	b	11a60 <__overflow@plt>
   1403c:	andeq	fp, r4, r0, lsr r2
   14040:	andeq	r9, r3, r4, lsr ip
   14044:	andeq	r9, r3, ip, asr #24
   14048:	andeq	r9, r3, r4, asr ip
   1404c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14050:	sub	sp, sp, #36	; 0x24
   14054:	mov	r6, r1
   14058:	ldrb	ip, [sp, #80]	; 0x50
   1405c:	str	r0, [sp, #28]
   14060:	str	r2, [sp, #24]
   14064:	cmp	ip, #0
   14068:	str	ip, [sp, #20]
   1406c:	str	r3, [sp, #12]
   14070:	ldr	r7, [sp, #72]	; 0x48
   14074:	bne	1412c <__assert_fail@plt+0x2588>
   14078:	ldr	r0, [r2]
   1407c:	cmp	r0, #0
   14080:	movne	sl, ip
   14084:	movne	r4, r2
   14088:	bne	14110 <__assert_fail@plt+0x256c>
   1408c:	mov	r2, #5
   14090:	ldr	r1, [pc, #512]	; 14298 <__assert_fail@plt+0x26f4>
   14094:	mov	r0, #0
   14098:	bl	117d8 <dcgettext@plt>
   1409c:	mov	r4, r0
   140a0:	mov	r2, r6
   140a4:	mov	r1, #8
   140a8:	mov	r0, #0
   140ac:	bl	20dcc <__assert_fail@plt+0xf228>
   140b0:	ldr	r1, [sp, #28]
   140b4:	mvn	sl, #0
   140b8:	mov	r5, r0
   140bc:	mov	r0, #1
   140c0:	bl	22968 <__assert_fail@plt+0x10dc4>
   140c4:	mov	r1, #0
   140c8:	mov	r3, r5
   140cc:	mov	r2, r4
   140d0:	str	r0, [sp]
   140d4:	mov	r0, r1
   140d8:	bl	118bc <error@plt>
   140dc:	ldr	r0, [sp, #24]
   140e0:	mov	r2, r7
   140e4:	ldr	r1, [sp, #12]
   140e8:	bl	13f44 <__assert_fail@plt+0x23a0>
   140ec:	ldr	r3, [sp, #76]	; 0x4c
   140f0:	blx	r3
   140f4:	mov	r0, sl
   140f8:	add	sp, sp, #36	; 0x24
   140fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14100:	ldr	r0, [r4, #4]!
   14104:	add	sl, sl, #1
   14108:	cmp	r0, #0
   1410c:	beq	1408c <__assert_fail@plt+0x24e8>
   14110:	mov	r1, r6
   14114:	bl	1170c <strcmp@plt>
   14118:	cmp	r0, #0
   1411c:	bne	14100 <__assert_fail@plt+0x255c>
   14120:	mov	r0, sl
   14124:	add	sp, sp, #36	; 0x24
   14128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1412c:	mov	r0, r1
   14130:	bl	11988 <strlen@plt>
   14134:	ldr	r3, [sp, #24]
   14138:	ldr	fp, [r3]
   1413c:	cmp	fp, #0
   14140:	mov	r9, r0
   14144:	beq	1408c <__assert_fail@plt+0x24e8>
   14148:	ldr	r2, [sp, #12]
   1414c:	cmp	r2, #0
   14150:	beq	1420c <__assert_fail@plt+0x2668>
   14154:	mov	r1, #0
   14158:	mov	r4, r1
   1415c:	mov	r8, r3
   14160:	mov	r5, r2
   14164:	mvn	sl, #0
   14168:	str	r1, [sp, #16]
   1416c:	mov	r2, r9
   14170:	mov	r1, r6
   14174:	mov	r0, fp
   14178:	bl	11b5c <strncmp@plt>
   1417c:	cmp	r0, #0
   14180:	mov	r0, fp
   14184:	bne	141c8 <__assert_fail@plt+0x2624>
   14188:	bl	11988 <strlen@plt>
   1418c:	ldr	r3, [sp, #12]
   14190:	mov	r2, r7
   14194:	mov	r1, r5
   14198:	cmp	r9, r0
   1419c:	mla	r0, r7, sl, r3
   141a0:	beq	141fc <__assert_fail@plt+0x2658>
   141a4:	cmn	sl, #1
   141a8:	moveq	sl, r4
   141ac:	beq	141c8 <__assert_fail@plt+0x2624>
   141b0:	bl	117c0 <memcmp@plt>
   141b4:	ldr	r2, [sp, #20]
   141b8:	ldr	r3, [sp, #16]
   141bc:	cmp	r0, #0
   141c0:	movne	r3, r2
   141c4:	str	r3, [sp, #16]
   141c8:	ldr	fp, [r8, #4]!
   141cc:	add	r4, r4, #1
   141d0:	cmp	fp, #0
   141d4:	add	r5, r5, r7
   141d8:	bne	1416c <__assert_fail@plt+0x25c8>
   141dc:	ldr	r3, [sp, #16]
   141e0:	cmp	r3, #0
   141e4:	bne	14280 <__assert_fail@plt+0x26dc>
   141e8:	cmn	sl, #1
   141ec:	beq	1408c <__assert_fail@plt+0x24e8>
   141f0:	mov	r0, sl
   141f4:	add	sp, sp, #36	; 0x24
   141f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141fc:	mov	sl, r4
   14200:	mov	r0, sl
   14204:	add	sp, sp, #36	; 0x24
   14208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1420c:	mov	r5, r3
   14210:	ldr	r3, [sp, #12]
   14214:	str	r7, [sp, #72]	; 0x48
   14218:	mov	r7, fp
   1421c:	ldr	fp, [sp, #20]
   14220:	mov	r8, r3
   14224:	mvn	sl, #0
   14228:	mov	r4, r3
   1422c:	mov	r2, r9
   14230:	mov	r1, r6
   14234:	mov	r0, r7
   14238:	bl	11b5c <strncmp@plt>
   1423c:	cmp	r0, #0
   14240:	mov	r0, r7
   14244:	bne	14260 <__assert_fail@plt+0x26bc>
   14248:	bl	11988 <strlen@plt>
   1424c:	cmp	r9, r0
   14250:	beq	141fc <__assert_fail@plt+0x2658>
   14254:	cmn	sl, #1
   14258:	moveq	sl, r4
   1425c:	movne	r8, fp
   14260:	ldr	r7, [r5, #4]!
   14264:	add	r4, r4, #1
   14268:	cmp	r7, #0
   1426c:	bne	1422c <__assert_fail@plt+0x2688>
   14270:	str	r8, [sp, #16]
   14274:	ldr	r7, [sp, #72]	; 0x48
   14278:	mov	r3, r8
   1427c:	b	141e0 <__assert_fail@plt+0x263c>
   14280:	mov	r2, #5
   14284:	ldr	r1, [pc, #16]	; 1429c <__assert_fail@plt+0x26f8>
   14288:	mov	r0, #0
   1428c:	bl	117d8 <dcgettext@plt>
   14290:	mov	r4, r0
   14294:	b	140a0 <__assert_fail@plt+0x24fc>
   14298:	strdeq	r9, [r3], -r8
   1429c:	andeq	r9, r3, r4, lsl ip
   142a0:	push	{r4, r5, r6, r7, r8, lr}
   142a4:	ldr	r7, [r1]
   142a8:	cmp	r7, #0
   142ac:	beq	142ec <__assert_fail@plt+0x2748>
   142b0:	mov	r6, r3
   142b4:	mov	r8, r0
   142b8:	mov	r4, r2
   142bc:	mov	r5, r1
   142c0:	b	142d0 <__assert_fail@plt+0x272c>
   142c4:	ldr	r7, [r5, #4]!
   142c8:	cmp	r7, #0
   142cc:	beq	142ec <__assert_fail@plt+0x2748>
   142d0:	mov	r1, r4
   142d4:	mov	r2, r6
   142d8:	mov	r0, r8
   142dc:	bl	117c0 <memcmp@plt>
   142e0:	add	r4, r4, r6
   142e4:	cmp	r0, #0
   142e8:	bne	142c4 <__assert_fail@plt+0x2720>
   142ec:	mov	r0, r7
   142f0:	pop	{r4, r5, r6, r7, r8, pc}
   142f4:	push	{r4, lr}
   142f8:	mov	r4, r0
   142fc:	mov	r0, #24
   14300:	bl	36944 <__assert_fail@plt+0x24da0>
   14304:	cmp	r0, #0
   14308:	movne	r3, #0
   1430c:	strne	r4, [r0, #16]
   14310:	strne	r4, [r0, #20]
   14314:	strne	r3, [r0]
   14318:	pop	{r4, pc}
   1431c:	push	{r4, lr}
   14320:	mov	r4, r0
   14324:	mov	r0, #24
   14328:	bl	36944 <__assert_fail@plt+0x24da0>
   1432c:	cmp	r0, #0
   14330:	popeq	{r4, pc}
   14334:	mov	r3, #0
   14338:	str	r4, [r0]
   1433c:	str	r3, [r0, #8]
   14340:	str	r3, [r0, #12]
   14344:	str	r3, [r0, #4]
   14348:	str	r3, [r0, #16]
   1434c:	pop	{r4, pc}
   14350:	ldr	r3, [r0]
   14354:	cmp	r3, #0
   14358:	beq	143a0 <__assert_fail@plt+0x27fc>
   1435c:	push	{r4, r5, r6, lr}
   14360:	mov	r2, #0
   14364:	mov	r5, r1
   14368:	mov	r4, r0
   1436c:	add	r1, r0, #12
   14370:	add	r0, r0, #8
   14374:	bl	11b2c <getdelim@plt>
   14378:	cmp	r0, #0
   1437c:	blt	143cc <__assert_fail@plt+0x2828>
   14380:	ldr	r3, [r4, #4]
   14384:	mov	r2, #1
   14388:	add	r3, r3, r2
   1438c:	str	r2, [r5]
   14390:	ldr	r2, [r4, #8]
   14394:	str	r3, [r4, #4]
   14398:	mov	r0, r2
   1439c:	pop	{r4, r5, r6, pc}
   143a0:	ldr	r3, [r0, #20]
   143a4:	ldr	r2, [r3]
   143a8:	cmp	r2, #0
   143ac:	moveq	r3, #2
   143b0:	addne	r3, r3, #4
   143b4:	movne	ip, #1
   143b8:	strne	ip, [r1]
   143bc:	streq	r3, [r1]
   143c0:	strne	r3, [r0, #20]
   143c4:	mov	r0, r2
   143c8:	bx	lr
   143cc:	ldr	r0, [r4]
   143d0:	bl	1197c <feof@plt>
   143d4:	mov	r2, #0
   143d8:	cmp	r0, r2
   143dc:	movne	r0, #2
   143e0:	moveq	r0, #4
   143e4:	str	r0, [r5]
   143e8:	b	14398 <__assert_fail@plt+0x27f4>
   143ec:	ldr	r3, [r0]
   143f0:	cmp	r3, #0
   143f4:	ldreq	r3, [r0, #20]
   143f8:	ldrne	r0, [r0, #4]
   143fc:	ldreq	r0, [r0, #16]
   14400:	subeq	r0, r3, r0
   14404:	asreq	r0, r0, #2
   14408:	bx	lr
   1440c:	ldr	r3, [r0]
   14410:	push	{r4, lr}
   14414:	cmp	r3, #0
   14418:	mov	r4, r0
   1441c:	beq	14428 <__assert_fail@plt+0x2884>
   14420:	ldr	r0, [r0, #8]
   14424:	bl	184ec <__assert_fail@plt+0x6948>
   14428:	mov	r0, r4
   1442c:	pop	{r4, lr}
   14430:	b	184ec <__assert_fail@plt+0x6948>
   14434:	ldr	r3, [pc, #4]	; 14440 <__assert_fail@plt+0x289c>
   14438:	str	r0, [r3]
   1443c:	bx	lr
   14440:	andeq	fp, r4, r0, asr #5
   14444:	ldr	r3, [pc, #4]	; 14450 <__assert_fail@plt+0x28ac>
   14448:	strb	r0, [r3, #4]
   1444c:	bx	lr
   14450:	andeq	fp, r4, r0, asr #5
   14454:	ldr	r3, [pc, #192]	; 1451c <__assert_fail@plt+0x2978>
   14458:	push	{r4, r5, r6, lr}
   1445c:	sub	sp, sp, #8
   14460:	ldr	r0, [r3]
   14464:	bl	37324 <__assert_fail@plt+0x25780>
   14468:	cmp	r0, #0
   1446c:	beq	14490 <__assert_fail@plt+0x28ec>
   14470:	ldr	r4, [pc, #168]	; 14520 <__assert_fail@plt+0x297c>
   14474:	ldrb	r3, [r4, #4]
   14478:	cmp	r3, #0
   1447c:	beq	144ac <__assert_fail@plt+0x2908>
   14480:	bl	119b8 <__errno_location@plt>
   14484:	ldr	r3, [r0]
   14488:	cmp	r3, #32
   1448c:	bne	144ac <__assert_fail@plt+0x2908>
   14490:	ldr	r3, [pc, #140]	; 14524 <__assert_fail@plt+0x2980>
   14494:	ldr	r0, [r3]
   14498:	bl	37324 <__assert_fail@plt+0x25780>
   1449c:	cmp	r0, #0
   144a0:	bne	144f4 <__assert_fail@plt+0x2950>
   144a4:	add	sp, sp, #8
   144a8:	pop	{r4, r5, r6, pc}
   144ac:	mov	r2, #5
   144b0:	ldr	r1, [pc, #112]	; 14528 <__assert_fail@plt+0x2984>
   144b4:	mov	r0, #0
   144b8:	bl	117d8 <dcgettext@plt>
   144bc:	ldr	r4, [r4]
   144c0:	cmp	r4, #0
   144c4:	mov	r5, r0
   144c8:	beq	14500 <__assert_fail@plt+0x295c>
   144cc:	bl	119b8 <__errno_location@plt>
   144d0:	ldr	r6, [r0]
   144d4:	mov	r0, r4
   144d8:	bl	218bc <__assert_fail@plt+0xfd18>
   144dc:	mov	r1, r6
   144e0:	str	r5, [sp]
   144e4:	ldr	r2, [pc, #64]	; 1452c <__assert_fail@plt+0x2988>
   144e8:	mov	r3, r0
   144ec:	mov	r0, #0
   144f0:	bl	118bc <error@plt>
   144f4:	ldr	r3, [pc, #52]	; 14530 <__assert_fail@plt+0x298c>
   144f8:	ldr	r0, [r3]
   144fc:	bl	11778 <_exit@plt>
   14500:	bl	119b8 <__errno_location@plt>
   14504:	mov	r3, r5
   14508:	ldr	r2, [pc, #36]	; 14534 <__assert_fail@plt+0x2990>
   1450c:	ldr	r1, [r0]
   14510:	mov	r0, r4
   14514:	bl	118bc <error@plt>
   14518:	b	144f4 <__assert_fail@plt+0x2950>
   1451c:	andeq	fp, r4, ip, lsr r2
   14520:	andeq	fp, r4, r0, asr #5
   14524:	andeq	fp, r4, r0, lsr r2
   14528:	andeq	r9, r3, ip, asr ip
   1452c:	andeq	r9, r3, r8, ror #24
   14530:	ldrdeq	fp, [r4], -r8
   14534:	andeq	r9, r3, ip, ror #24
   14538:	ldm	r0, {r0, r2}
   1453c:	push	{r4, lr}
   14540:	eor	r0, r0, r2
   14544:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   14548:	mov	r0, r1
   1454c:	pop	{r4, pc}
   14550:	push	{r4, r5}
   14554:	ldrd	r2, [r1]
   14558:	ldrd	r4, [r0]
   1455c:	cmp	r5, r3
   14560:	cmpeq	r4, r2
   14564:	moveq	r0, #1
   14568:	movne	r0, #0
   1456c:	pop	{r4, r5}
   14570:	bx	lr
   14574:	push	{r4, lr}
   14578:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1457c:	mov	r0, r1
   14580:	pop	{r4, pc}
   14584:	push	{r4, lr}
   14588:	mov	r4, r0
   1458c:	ldr	r0, [r0, #8]
   14590:	bl	1b958 <__assert_fail@plt+0x9db4>
   14594:	mov	r0, r4
   14598:	pop	{r4, lr}
   1459c:	b	184ec <__assert_fail@plt+0x6948>
   145a0:	push	{r4, r5, lr}
   145a4:	mov	r0, #12
   145a8:	sub	sp, sp, #12
   145ac:	bl	36944 <__assert_fail@plt+0x24da0>
   145b0:	subs	r4, r0, #0
   145b4:	beq	145f0 <__assert_fail@plt+0x2a4c>
   145b8:	ldr	r2, [pc, #76]	; 1460c <__assert_fail@plt+0x2a68>
   145bc:	ldr	r3, [pc, #76]	; 14610 <__assert_fail@plt+0x2a6c>
   145c0:	str	r2, [sp]
   145c4:	mov	r1, #0
   145c8:	ldr	r2, [pc, #68]	; 14614 <__assert_fail@plt+0x2a70>
   145cc:	mov	r0, #11
   145d0:	bl	1b668 <__assert_fail@plt+0x9ac4>
   145d4:	cmp	r0, #0
   145d8:	movne	r3, #0
   145dc:	mov	r5, r0
   145e0:	str	r0, [r4]
   145e4:	strne	r3, [r4, #4]
   145e8:	strne	r3, [r4, #8]
   145ec:	beq	145fc <__assert_fail@plt+0x2a58>
   145f0:	mov	r0, r4
   145f4:	add	sp, sp, #12
   145f8:	pop	{r4, r5, pc}
   145fc:	mov	r0, r4
   14600:	bl	184ec <__assert_fail@plt+0x6948>
   14604:	mov	r4, r5
   14608:	b	145f0 <__assert_fail@plt+0x2a4c>
   1460c:	andeq	r4, r1, r4, lsl #11
   14610:	andeq	r4, r1, r0, asr r5
   14614:	andeq	r4, r1, r8, lsr r5
   14618:	push	{r4, lr}
   1461c:	mov	r4, r0
   14620:	ldr	r0, [r0]
   14624:	bl	1b958 <__assert_fail@plt+0x9db4>
   14628:	ldr	r0, [r4, #4]
   1462c:	cmp	r0, #0
   14630:	beq	14638 <__assert_fail@plt+0x2a94>
   14634:	bl	1d8d4 <__assert_fail@plt+0xbd30>
   14638:	ldr	r0, [r4, #8]
   1463c:	bl	184ec <__assert_fail@plt+0x6948>
   14640:	mov	r0, r4
   14644:	pop	{r4, lr}
   14648:	b	184ec <__assert_fail@plt+0x6948>
   1464c:	push	{r4, r5, r6, r7, r8, lr}
   14650:	sub	sp, sp, #16
   14654:	ldr	r4, [r0, #8]
   14658:	mov	r8, r0
   1465c:	cmp	r4, #0
   14660:	ldrd	r6, [sp, #40]	; 0x28
   14664:	beq	14724 <__assert_fail@plt+0x2b80>
   14668:	ldrd	r0, [r4]
   1466c:	cmp	r3, r1
   14670:	cmpeq	r2, r0
   14674:	ldreq	r5, [r4, #8]
   14678:	beq	146a4 <__assert_fail@plt+0x2b00>
   1467c:	strd	r2, [r4]
   14680:	mov	r1, r4
   14684:	ldr	r0, [r8]
   14688:	bl	1bfd0 <__assert_fail@plt+0xa42c>
   1468c:	cmp	r0, #0
   14690:	beq	14718 <__assert_fail@plt+0x2b74>
   14694:	cmp	r4, r0
   14698:	beq	14748 <__assert_fail@plt+0x2ba4>
   1469c:	ldr	r5, [r0, #8]
   146a0:	str	r5, [r4, #8]
   146a4:	cmp	r5, #0
   146a8:	beq	14718 <__assert_fail@plt+0x2b74>
   146ac:	subs	r0, r6, #1
   146b0:	sbc	r1, r7, #0
   146b4:	mov	r3, #0
   146b8:	cmp	r1, r3
   146bc:	mvn	r2, #-2147483646	; 0x80000002
   146c0:	cmpeq	r0, r2
   146c4:	movls	r1, r6
   146c8:	bls	146f0 <__assert_fail@plt+0x2b4c>
   146cc:	ldr	r0, [r8, #4]
   146d0:	cmp	r0, #0
   146d4:	beq	14704 <__assert_fail@plt+0x2b60>
   146d8:	mov	r2, r6
   146dc:	mov	r3, r7
   146e0:	bl	1d8f8 <__assert_fail@plt+0xbd54>
   146e4:	cmn	r0, #1
   146e8:	mov	r1, r0
   146ec:	beq	14718 <__assert_fail@plt+0x2b74>
   146f0:	mov	r0, r5
   146f4:	mov	r2, #0
   146f8:	add	sp, sp, #16
   146fc:	pop	{r4, r5, r6, r7, r8, lr}
   14700:	b	1bcf0 <__assert_fail@plt+0xa14c>
   14704:	mvn	r0, #-2147483648	; 0x80000000
   14708:	bl	1d854 <__assert_fail@plt+0xbcb0>
   1470c:	cmp	r0, #0
   14710:	str	r0, [r8, #4]
   14714:	bne	146d8 <__assert_fail@plt+0x2b34>
   14718:	mvn	r0, #0
   1471c:	add	sp, sp, #16
   14720:	pop	{r4, r5, r6, r7, r8, pc}
   14724:	mov	r0, #16
   14728:	strd	r2, [sp, #8]
   1472c:	bl	36944 <__assert_fail@plt+0x24da0>
   14730:	ldrd	r2, [sp, #8]
   14734:	cmp	r0, #0
   14738:	mov	r4, r0
   1473c:	str	r0, [r8, #8]
   14740:	bne	1467c <__assert_fail@plt+0x2ad8>
   14744:	b	14718 <__assert_fail@plt+0x2b74>
   14748:	mov	r3, #0
   1474c:	str	r3, [r8, #8]
   14750:	mov	r1, r3
   14754:	str	r3, [sp]
   14758:	ldr	r2, [pc, #16]	; 14770 <__assert_fail@plt+0x2bcc>
   1475c:	ldr	r0, [pc, #16]	; 14774 <__assert_fail@plt+0x2bd0>
   14760:	bl	1b668 <__assert_fail@plt+0x9ac4>
   14764:	mov	r5, r0
   14768:	str	r0, [r4, #8]
   1476c:	b	146a4 <__assert_fail@plt+0x2b00>
   14770:	andeq	r4, r1, r4, ror r5
   14774:	strdeq	r0, [r0], -sp
   14778:	push	{r4, r5, r6, r7, r8, lr}
   1477c:	sub	sp, sp, #16
   14780:	ldr	r4, [r0, #8]
   14784:	mov	r8, r0
   14788:	cmp	r4, #0
   1478c:	ldrd	r6, [sp, #40]	; 0x28
   14790:	beq	14850 <__assert_fail@plt+0x2cac>
   14794:	ldrd	r0, [r4]
   14798:	cmp	r3, r1
   1479c:	cmpeq	r2, r0
   147a0:	ldreq	r5, [r4, #8]
   147a4:	beq	147d0 <__assert_fail@plt+0x2c2c>
   147a8:	strd	r2, [r4]
   147ac:	mov	r1, r4
   147b0:	ldr	r0, [r8]
   147b4:	bl	1bfd0 <__assert_fail@plt+0xa42c>
   147b8:	cmp	r0, #0
   147bc:	beq	14848 <__assert_fail@plt+0x2ca4>
   147c0:	cmp	r4, r0
   147c4:	beq	14874 <__assert_fail@plt+0x2cd0>
   147c8:	ldr	r5, [r0, #8]
   147cc:	str	r5, [r4, #8]
   147d0:	cmp	r5, #0
   147d4:	beq	14848 <__assert_fail@plt+0x2ca4>
   147d8:	subs	r0, r6, #1
   147dc:	sbc	r1, r7, #0
   147e0:	mov	r3, #0
   147e4:	cmp	r1, r3
   147e8:	mvn	r2, #-2147483646	; 0x80000002
   147ec:	cmpeq	r0, r2
   147f0:	movls	r1, r6
   147f4:	bls	1481c <__assert_fail@plt+0x2c78>
   147f8:	ldr	r0, [r8, #4]
   147fc:	cmp	r0, #0
   14800:	beq	14834 <__assert_fail@plt+0x2c90>
   14804:	mov	r2, r6
   14808:	mov	r3, r7
   1480c:	bl	1d8f8 <__assert_fail@plt+0xbd54>
   14810:	cmn	r0, #1
   14814:	mov	r1, r0
   14818:	beq	14848 <__assert_fail@plt+0x2ca4>
   1481c:	mov	r0, r5
   14820:	bl	1b388 <__assert_fail@plt+0x97e4>
   14824:	adds	r0, r0, #0
   14828:	movne	r0, #1
   1482c:	add	sp, sp, #16
   14830:	pop	{r4, r5, r6, r7, r8, pc}
   14834:	mvn	r0, #-2147483648	; 0x80000000
   14838:	bl	1d854 <__assert_fail@plt+0xbcb0>
   1483c:	cmp	r0, #0
   14840:	str	r0, [r8, #4]
   14844:	bne	14804 <__assert_fail@plt+0x2c60>
   14848:	mvn	r0, #0
   1484c:	b	1482c <__assert_fail@plt+0x2c88>
   14850:	mov	r0, #16
   14854:	strd	r2, [sp, #8]
   14858:	bl	36944 <__assert_fail@plt+0x24da0>
   1485c:	ldrd	r2, [sp, #8]
   14860:	cmp	r0, #0
   14864:	mov	r4, r0
   14868:	str	r0, [r8, #8]
   1486c:	bne	147a8 <__assert_fail@plt+0x2c04>
   14870:	b	14848 <__assert_fail@plt+0x2ca4>
   14874:	mov	r3, #0
   14878:	str	r3, [r8, #8]
   1487c:	mov	r1, r3
   14880:	str	r3, [sp]
   14884:	ldr	r2, [pc, #16]	; 1489c <__assert_fail@plt+0x2cf8>
   14888:	ldr	r0, [pc, #16]	; 148a0 <__assert_fail@plt+0x2cfc>
   1488c:	bl	1b668 <__assert_fail@plt+0x9ac4>
   14890:	mov	r5, r0
   14894:	str	r0, [r4, #8]
   14898:	b	147d0 <__assert_fail@plt+0x2c2c>
   1489c:	andeq	r4, r1, r4, ror r5
   148a0:	strdeq	r0, [r0], -sp
   148a4:	b	184ec <__assert_fail@plt+0x6948>
   148a8:	push	{r4, lr}
   148ac:	bl	1db58 <__assert_fail@plt+0xbfb4>
   148b0:	clz	r0, r0
   148b4:	lsr	r0, r0, #5
   148b8:	pop	{r4, pc}
   148bc:	push	{r4, lr}
   148c0:	bl	1170c <strcmp@plt>
   148c4:	clz	r0, r0
   148c8:	lsr	r0, r0, #5
   148cc:	pop	{r4, pc}
   148d0:	b	1b5fc <__assert_fail@plt+0x9a58>
   148d4:	tst	r2, #8
   148d8:	bne	148e8 <__assert_fail@plt+0x2d44>
   148dc:	tst	r2, #16
   148e0:	beq	14930 <__assert_fail@plt+0x2d8c>
   148e4:	b	1db58 <__assert_fail@plt+0xbfb4>
   148e8:	tst	r2, #16
   148ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   148f0:	mov	r5, r0
   148f4:	mov	r4, r1
   148f8:	bne	14934 <__assert_fail@plt+0x2d90>
   148fc:	bl	11988 <strlen@plt>
   14900:	mov	r1, r4
   14904:	mov	r2, r0
   14908:	mov	r6, r0
   1490c:	mov	r0, r5
   14910:	bl	11b5c <strncmp@plt>
   14914:	subs	r7, r0, #0
   14918:	bne	14928 <__assert_fail@plt+0x2d84>
   1491c:	ldrb	r3, [r4, r6]
   14920:	cmp	r3, #47	; 0x2f
   14924:	movne	r7, r3
   14928:	mov	r0, r7
   1492c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14930:	b	1170c <strcmp@plt>
   14934:	mov	r0, r1
   14938:	bl	34df0 <__assert_fail@plt+0x2324c>
   1493c:	mov	r6, #47	; 0x2f
   14940:	mov	r9, #0
   14944:	mov	r8, r0
   14948:	mov	r3, r0
   1494c:	b	14968 <__assert_fail@plt+0x2dc4>
   14950:	strb	r9, [r4]
   14954:	bl	1db58 <__assert_fail@plt+0xbfb4>
   14958:	add	r3, r4, #1
   1495c:	subs	r7, r0, #0
   14960:	ble	14994 <__assert_fail@plt+0x2df0>
   14964:	strb	r6, [r4]
   14968:	mov	r1, r6
   1496c:	mov	r0, r3
   14970:	bl	11994 <strchr@plt>
   14974:	mov	r1, r8
   14978:	subs	r4, r0, #0
   1497c:	mov	r0, r5
   14980:	bne	14950 <__assert_fail@plt+0x2dac>
   14984:	mov	r0, r5
   14988:	mov	r1, r8
   1498c:	bl	1db58 <__assert_fail@plt+0xbfb4>
   14990:	mov	r7, r0
   14994:	mov	r0, r8
   14998:	bl	184ec <__assert_fail@plt+0x6948>
   1499c:	mov	r0, r7
   149a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   149a8:	sub	sp, sp, #56	; 0x38
   149ac:	mov	r3, #0
   149b0:	mov	r5, r3
   149b4:	str	r0, [sp, #16]
   149b8:	mov	r4, r0
   149bc:	mov	r9, r1
   149c0:	strb	r3, [sp]
   149c4:	str	r3, [sp, #4]
   149c8:	strb	r3, [sp, #12]
   149cc:	str	r3, [sp, #8]
   149d0:	mov	r7, r3
   149d4:	mov	r6, #1
   149d8:	ldr	r8, [pc, #420]	; 14b84 <__assert_fail@plt+0x2fe0>
   149dc:	b	14a00 <__assert_fail@plt+0x2e5c>
   149e0:	mov	r0, sl
   149e4:	bl	117a8 <towlower@plt>
   149e8:	rsb	r5, r5, r5, lsl #5
   149ec:	ldr	r3, [sp, #20]
   149f0:	add	r5, r0, r5
   149f4:	add	r4, r4, r3
   149f8:	strb	r7, [sp, #12]
   149fc:	str	r4, [sp, #16]
   14a00:	ldrb	r3, [sp]
   14a04:	cmp	r3, #0
   14a08:	bne	14a70 <__assert_fail@plt+0x2ecc>
   14a0c:	ldrb	r3, [r4]
   14a10:	and	r2, r3, #31
   14a14:	lsr	r3, r3, #5
   14a18:	ldr	r3, [r8, r3, lsl #2]
   14a1c:	lsr	r3, r3, r2
   14a20:	tst	r3, #1
   14a24:	beq	14a5c <__assert_fail@plt+0x2eb8>
   14a28:	str	r6, [sp, #20]
   14a2c:	ldrb	sl, [r4]
   14a30:	strb	r6, [sp, #24]
   14a34:	str	sl, [sp, #28]
   14a38:	cmp	sl, #0
   14a3c:	strb	r6, [sp, #12]
   14a40:	beq	14ae4 <__assert_fail@plt+0x2f40>
   14a44:	ldrb	r3, [sp, #24]
   14a48:	ldr	r4, [sp, #16]
   14a4c:	cmp	r3, #0
   14a50:	bne	149e0 <__assert_fail@plt+0x2e3c>
   14a54:	ldrb	r0, [r4]
   14a58:	b	149e8 <__assert_fail@plt+0x2e44>
   14a5c:	add	r0, sp, #4
   14a60:	bl	117b4 <mbsinit@plt>
   14a64:	cmp	r0, #0
   14a68:	beq	14b48 <__assert_fail@plt+0x2fa4>
   14a6c:	strb	r6, [sp]
   14a70:	bl	11880 <__ctype_get_mb_cur_max@plt>
   14a74:	mov	r1, r0
   14a78:	mov	r0, r4
   14a7c:	bl	3379c <__assert_fail@plt+0x21bf8>
   14a80:	add	r3, sp, #4
   14a84:	mov	r1, r4
   14a88:	mov	r2, r0
   14a8c:	add	r0, sp, #28
   14a90:	bl	1db04 <__assert_fail@plt+0xbf60>
   14a94:	cmn	r0, #1
   14a98:	str	r0, [sp, #20]
   14a9c:	beq	14afc <__assert_fail@plt+0x2f58>
   14aa0:	cmn	r0, #2
   14aa4:	beq	14b30 <__assert_fail@plt+0x2f8c>
   14aa8:	cmp	r0, #0
   14aac:	bne	14b10 <__assert_fail@plt+0x2f6c>
   14ab0:	ldr	r3, [sp, #16]
   14ab4:	str	r6, [sp, #20]
   14ab8:	ldrb	r3, [r3]
   14abc:	cmp	r3, #0
   14ac0:	bne	14b70 <__assert_fail@plt+0x2fcc>
   14ac4:	ldr	sl, [sp, #28]
   14ac8:	cmp	sl, #0
   14acc:	bne	14b5c <__assert_fail@plt+0x2fb8>
   14ad0:	add	r0, sp, #4
   14ad4:	strb	r6, [sp, #24]
   14ad8:	bl	117b4 <mbsinit@plt>
   14adc:	cmp	r0, #0
   14ae0:	bne	14b28 <__assert_fail@plt+0x2f84>
   14ae4:	mov	r1, r9
   14ae8:	mov	r0, r5
   14aec:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   14af0:	mov	r0, r1
   14af4:	add	sp, sp, #56	; 0x38
   14af8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14afc:	ldr	sl, [sp, #28]
   14b00:	str	r6, [sp, #20]
   14b04:	strb	r7, [sp, #24]
   14b08:	strb	r6, [sp, #12]
   14b0c:	b	14a44 <__assert_fail@plt+0x2ea0>
   14b10:	add	r0, sp, #4
   14b14:	strb	r6, [sp, #24]
   14b18:	bl	117b4 <mbsinit@plt>
   14b1c:	ldr	sl, [sp, #28]
   14b20:	cmp	r0, #0
   14b24:	beq	14a38 <__assert_fail@plt+0x2e94>
   14b28:	strb	r7, [sp]
   14b2c:	b	14a38 <__assert_fail@plt+0x2e94>
   14b30:	ldr	r0, [sp, #16]
   14b34:	bl	11988 <strlen@plt>
   14b38:	strb	r7, [sp, #24]
   14b3c:	ldr	sl, [sp, #28]
   14b40:	str	r0, [sp, #20]
   14b44:	b	14b08 <__assert_fail@plt+0x2f64>
   14b48:	ldr	r3, [pc, #56]	; 14b88 <__assert_fail@plt+0x2fe4>
   14b4c:	mov	r2, #143	; 0x8f
   14b50:	ldr	r1, [pc, #52]	; 14b8c <__assert_fail@plt+0x2fe8>
   14b54:	ldr	r0, [pc, #52]	; 14b90 <__assert_fail@plt+0x2fec>
   14b58:	bl	11ba4 <__assert_fail@plt>
   14b5c:	ldr	r3, [pc, #36]	; 14b88 <__assert_fail@plt+0x2fe4>
   14b60:	mov	r2, #172	; 0xac
   14b64:	ldr	r1, [pc, #32]	; 14b8c <__assert_fail@plt+0x2fe8>
   14b68:	ldr	r0, [pc, #36]	; 14b94 <__assert_fail@plt+0x2ff0>
   14b6c:	bl	11ba4 <__assert_fail@plt>
   14b70:	ldr	r3, [pc, #16]	; 14b88 <__assert_fail@plt+0x2fe4>
   14b74:	mov	r2, #171	; 0xab
   14b78:	ldr	r1, [pc, #12]	; 14b8c <__assert_fail@plt+0x2fe8>
   14b7c:	ldr	r0, [pc, #20]	; 14b98 <__assert_fail@plt+0x2ff4>
   14b80:	bl	11ba4 <__assert_fail@plt>
   14b84:	andeq	r9, r3, ip, lsr #28
   14b88:	andeq	r9, r3, r0, ror ip
   14b8c:	andeq	r9, r3, r4, lsl #25
   14b90:	muleq	r3, r4, ip
   14b94:	andeq	r9, r3, r4, asr #25
   14b98:	andeq	r9, r3, ip, lsr #25
   14b9c:	push	{r4, r5, r6, lr}
   14ba0:	mov	r4, r0
   14ba4:	mov	r0, #8
   14ba8:	mov	r5, r1
   14bac:	bl	347e0 <__assert_fail@plt+0x22c3c>
   14bb0:	ldr	r3, [r4, #4]
   14bb4:	str	r0, [r4, #4]
   14bb8:	stm	r0, {r3, r5}
   14bbc:	pop	{r4, r5, r6, pc}
   14bc0:	tst	r1, #2
   14bc4:	and	r2, r1, #134217728	; 0x8000000
   14bc8:	ldrb	r3, [r0]
   14bcc:	and	r1, r1, #32
   14bd0:	bne	14dec <__assert_fail@plt+0x3248>
   14bd4:	cmp	r2, #0
   14bd8:	bne	15004 <__assert_fail@plt+0x3460>
   14bdc:	cmp	r1, #0
   14be0:	bne	15264 <__assert_fail@plt+0x36c0>
   14be4:	add	r2, r0, #1
   14be8:	cmp	r3, #125	; 0x7d
   14bec:	ldrls	pc, [pc, r3, lsl #2]
   14bf0:	b	15494 <__assert_fail@plt+0x38f0>
   14bf4:	andeq	r5, r1, r4, lsl #9
   14bf8:	muleq	r1, r4, r4
   14bfc:	muleq	r1, r4, r4
   14c00:	muleq	r1, r4, r4
   14c04:	muleq	r1, r4, r4
   14c08:	muleq	r1, r4, r4
   14c0c:	muleq	r1, r4, r4
   14c10:	muleq	r1, r4, r4
   14c14:	muleq	r1, r4, r4
   14c18:	muleq	r1, r4, r4
   14c1c:	muleq	r1, r4, r4
   14c20:	muleq	r1, r4, r4
   14c24:	muleq	r1, r4, r4
   14c28:	muleq	r1, r4, r4
   14c2c:	muleq	r1, r4, r4
   14c30:	muleq	r1, r4, r4
   14c34:	muleq	r1, r4, r4
   14c38:	muleq	r1, r4, r4
   14c3c:	muleq	r1, r4, r4
   14c40:	muleq	r1, r4, r4
   14c44:	muleq	r1, r4, r4
   14c48:	muleq	r1, r4, r4
   14c4c:	muleq	r1, r4, r4
   14c50:	muleq	r1, r4, r4
   14c54:	muleq	r1, r4, r4
   14c58:	muleq	r1, r4, r4
   14c5c:	muleq	r1, r4, r4
   14c60:	muleq	r1, r4, r4
   14c64:	muleq	r1, r4, r4
   14c68:	muleq	r1, r4, r4
   14c6c:	muleq	r1, r4, r4
   14c70:	muleq	r1, r4, r4
   14c74:	muleq	r1, r4, r4
   14c78:	muleq	r1, r4, r4
   14c7c:	muleq	r1, r4, r4
   14c80:	muleq	r1, r4, r4
   14c84:	muleq	r1, r4, r4
   14c88:	muleq	r1, r4, r4
   14c8c:	muleq	r1, r4, r4
   14c90:	muleq	r1, r4, r4
   14c94:	muleq	r1, r4, r4
   14c98:	muleq	r1, r4, r4
   14c9c:	andeq	r5, r1, r8, asr #32
   14ca0:	muleq	r1, r4, r4
   14ca4:	muleq	r1, r4, r4
   14ca8:	muleq	r1, r4, r4
   14cac:	muleq	r1, r4, r4
   14cb0:	muleq	r1, r4, r4
   14cb4:	muleq	r1, r4, r4
   14cb8:	muleq	r1, r4, r4
   14cbc:	muleq	r1, r4, r4
   14cc0:	muleq	r1, r4, r4
   14cc4:	muleq	r1, r4, r4
   14cc8:	muleq	r1, r4, r4
   14ccc:	muleq	r1, r4, r4
   14cd0:	muleq	r1, r4, r4
   14cd4:	muleq	r1, r4, r4
   14cd8:	muleq	r1, r4, r4
   14cdc:	muleq	r1, r4, r4
   14ce0:	muleq	r1, r4, r4
   14ce4:	muleq	r1, r4, r4
   14ce8:	muleq	r1, r4, r4
   14cec:	muleq	r1, r4, r4
   14cf0:	andeq	r5, r1, r8, asr #32
   14cf4:	muleq	r1, r4, r4
   14cf8:	muleq	r1, r4, r4
   14cfc:	muleq	r1, r4, r4
   14d00:	muleq	r1, r4, r4
   14d04:	muleq	r1, r4, r4
   14d08:	muleq	r1, r4, r4
   14d0c:	muleq	r1, r4, r4
   14d10:	muleq	r1, r4, r4
   14d14:	muleq	r1, r4, r4
   14d18:	muleq	r1, r4, r4
   14d1c:	muleq	r1, r4, r4
   14d20:	muleq	r1, r4, r4
   14d24:	muleq	r1, r4, r4
   14d28:	muleq	r1, r4, r4
   14d2c:	muleq	r1, r4, r4
   14d30:	muleq	r1, r4, r4
   14d34:	muleq	r1, r4, r4
   14d38:	muleq	r1, r4, r4
   14d3c:	muleq	r1, r4, r4
   14d40:	muleq	r1, r4, r4
   14d44:	muleq	r1, r4, r4
   14d48:	muleq	r1, r4, r4
   14d4c:	muleq	r1, r4, r4
   14d50:	muleq	r1, r4, r4
   14d54:	muleq	r1, r4, r4
   14d58:	muleq	r1, r4, r4
   14d5c:	muleq	r1, r4, r4
   14d60:	andeq	r5, r1, r8, asr #32
   14d64:	andeq	r5, r1, ip, lsl #10
   14d68:	muleq	r1, r4, r4
   14d6c:	muleq	r1, r4, r4
   14d70:	muleq	r1, r4, r4
   14d74:	muleq	r1, r4, r4
   14d78:	muleq	r1, r4, r4
   14d7c:	muleq	r1, r4, r4
   14d80:	muleq	r1, r4, r4
   14d84:	muleq	r1, r4, r4
   14d88:	muleq	r1, r4, r4
   14d8c:	muleq	r1, r4, r4
   14d90:	muleq	r1, r4, r4
   14d94:	muleq	r1, r4, r4
   14d98:	muleq	r1, r4, r4
   14d9c:	muleq	r1, r4, r4
   14da0:	muleq	r1, r4, r4
   14da4:	muleq	r1, r4, r4
   14da8:	muleq	r1, r4, r4
   14dac:	muleq	r1, r4, r4
   14db0:	muleq	r1, r4, r4
   14db4:	muleq	r1, r4, r4
   14db8:	muleq	r1, r4, r4
   14dbc:	muleq	r1, r4, r4
   14dc0:	muleq	r1, r4, r4
   14dc4:	muleq	r1, r4, r4
   14dc8:	muleq	r1, r4, r4
   14dcc:	muleq	r1, r4, r4
   14dd0:	muleq	r1, r4, r4
   14dd4:	muleq	r1, r4, r4
   14dd8:	muleq	r1, r4, r4
   14ddc:	muleq	r1, r4, r4
   14de0:	muleq	r1, r4, r4
   14de4:	muleq	r1, r4, r4
   14de8:	muleq	r1, r4, r4
   14dec:	cmp	r2, #0
   14df0:	bne	15560 <__assert_fail@plt+0x39bc>
   14df4:	cmp	r1, #0
   14df8:	bne	15054 <__assert_fail@plt+0x34b0>
   14dfc:	add	r0, r0, #1
   14e00:	cmp	r3, #125	; 0x7d
   14e04:	ldrls	pc, [pc, r3, lsl #2]
   14e08:	b	1548c <__assert_fail@plt+0x38e8>
   14e0c:	andeq	r5, r1, r4, lsl #9
   14e10:	andeq	r5, r1, ip, lsl #9
   14e14:	andeq	r5, r1, ip, lsl #9
   14e18:	andeq	r5, r1, ip, lsl #9
   14e1c:	andeq	r5, r1, ip, lsl #9
   14e20:	andeq	r5, r1, ip, lsl #9
   14e24:	andeq	r5, r1, ip, lsl #9
   14e28:	andeq	r5, r1, ip, lsl #9
   14e2c:	andeq	r5, r1, ip, lsl #9
   14e30:	andeq	r5, r1, ip, lsl #9
   14e34:	andeq	r5, r1, ip, lsl #9
   14e38:	andeq	r5, r1, ip, lsl #9
   14e3c:	andeq	r5, r1, ip, lsl #9
   14e40:	andeq	r5, r1, ip, lsl #9
   14e44:	andeq	r5, r1, ip, lsl #9
   14e48:	andeq	r5, r1, ip, lsl #9
   14e4c:	andeq	r5, r1, ip, lsl #9
   14e50:	andeq	r5, r1, ip, lsl #9
   14e54:	andeq	r5, r1, ip, lsl #9
   14e58:	andeq	r5, r1, ip, lsl #9
   14e5c:	andeq	r5, r1, ip, lsl #9
   14e60:	andeq	r5, r1, ip, lsl #9
   14e64:	andeq	r5, r1, ip, lsl #9
   14e68:	andeq	r5, r1, ip, lsl #9
   14e6c:	andeq	r5, r1, ip, lsl #9
   14e70:	andeq	r5, r1, ip, lsl #9
   14e74:	andeq	r5, r1, ip, lsl #9
   14e78:	andeq	r5, r1, ip, lsl #9
   14e7c:	andeq	r5, r1, ip, lsl #9
   14e80:	andeq	r5, r1, ip, lsl #9
   14e84:	andeq	r5, r1, ip, lsl #9
   14e88:	andeq	r5, r1, ip, lsl #9
   14e8c:	andeq	r5, r1, ip, lsl #9
   14e90:	andeq	r5, r1, ip, lsl #9
   14e94:	andeq	r5, r1, ip, lsl #9
   14e98:	andeq	r5, r1, ip, lsl #9
   14e9c:	andeq	r5, r1, ip, lsl #9
   14ea0:	andeq	r5, r1, ip, lsl #9
   14ea4:	andeq	r5, r1, ip, lsl #9
   14ea8:	andeq	r5, r1, ip, lsl #9
   14eac:	andeq	r5, r1, ip, lsl #9
   14eb0:	andeq	r5, r1, ip, lsl #9
   14eb4:	andeq	r5, r1, r8, asr #32
   14eb8:	andeq	r5, r1, ip, lsl #9
   14ebc:	andeq	r5, r1, ip, lsl #9
   14ec0:	andeq	r5, r1, ip, lsl #9
   14ec4:	andeq	r5, r1, ip, lsl #9
   14ec8:	andeq	r5, r1, ip, lsl #9
   14ecc:	andeq	r5, r1, ip, lsl #9
   14ed0:	andeq	r5, r1, ip, lsl #9
   14ed4:	andeq	r5, r1, ip, lsl #9
   14ed8:	andeq	r5, r1, ip, lsl #9
   14edc:	andeq	r5, r1, ip, lsl #9
   14ee0:	andeq	r5, r1, ip, lsl #9
   14ee4:	andeq	r5, r1, ip, lsl #9
   14ee8:	andeq	r5, r1, ip, lsl #9
   14eec:	andeq	r5, r1, ip, lsl #9
   14ef0:	andeq	r5, r1, ip, lsl #9
   14ef4:	andeq	r5, r1, ip, lsl #9
   14ef8:	andeq	r5, r1, ip, lsl #9
   14efc:	andeq	r5, r1, ip, lsl #9
   14f00:	andeq	r5, r1, ip, lsl #9
   14f04:	andeq	r5, r1, ip, lsl #9
   14f08:	andeq	r5, r1, r8, asr #32
   14f0c:	andeq	r5, r1, ip, lsl #9
   14f10:	andeq	r5, r1, ip, lsl #9
   14f14:	andeq	r5, r1, ip, lsl #9
   14f18:	andeq	r5, r1, ip, lsl #9
   14f1c:	andeq	r5, r1, ip, lsl #9
   14f20:	andeq	r5, r1, ip, lsl #9
   14f24:	andeq	r5, r1, ip, lsl #9
   14f28:	andeq	r5, r1, ip, lsl #9
   14f2c:	andeq	r5, r1, ip, lsl #9
   14f30:	andeq	r5, r1, ip, lsl #9
   14f34:	andeq	r5, r1, ip, lsl #9
   14f38:	andeq	r5, r1, ip, lsl #9
   14f3c:	andeq	r5, r1, ip, lsl #9
   14f40:	andeq	r5, r1, ip, lsl #9
   14f44:	andeq	r5, r1, ip, lsl #9
   14f48:	andeq	r5, r1, ip, lsl #9
   14f4c:	andeq	r5, r1, ip, lsl #9
   14f50:	andeq	r5, r1, ip, lsl #9
   14f54:	andeq	r5, r1, ip, lsl #9
   14f58:	andeq	r5, r1, ip, lsl #9
   14f5c:	andeq	r5, r1, ip, lsl #9
   14f60:	andeq	r5, r1, ip, lsl #9
   14f64:	andeq	r5, r1, ip, lsl #9
   14f68:	andeq	r5, r1, ip, lsl #9
   14f6c:	andeq	r5, r1, ip, lsl #9
   14f70:	andeq	r5, r1, ip, lsl #9
   14f74:	andeq	r5, r1, ip, lsl #9
   14f78:	andeq	r5, r1, r8, asr #32
   14f7c:	andeq	r5, r1, ip, lsl #9
   14f80:	andeq	r5, r1, ip, lsl #9
   14f84:	andeq	r5, r1, ip, lsl #9
   14f88:	andeq	r5, r1, ip, lsl #9
   14f8c:	andeq	r5, r1, ip, lsl #9
   14f90:	andeq	r5, r1, ip, lsl #9
   14f94:	andeq	r5, r1, ip, lsl #9
   14f98:	andeq	r5, r1, ip, lsl #9
   14f9c:	andeq	r5, r1, ip, lsl #9
   14fa0:	andeq	r5, r1, ip, lsl #9
   14fa4:	andeq	r5, r1, ip, lsl #9
   14fa8:	andeq	r5, r1, ip, lsl #9
   14fac:	andeq	r5, r1, ip, lsl #9
   14fb0:	andeq	r5, r1, ip, lsl #9
   14fb4:	andeq	r5, r1, ip, lsl #9
   14fb8:	andeq	r5, r1, ip, lsl #9
   14fbc:	andeq	r5, r1, ip, lsl #9
   14fc0:	andeq	r5, r1, ip, lsl #9
   14fc4:	andeq	r5, r1, ip, lsl #9
   14fc8:	andeq	r5, r1, ip, lsl #9
   14fcc:	andeq	r5, r1, ip, lsl #9
   14fd0:	andeq	r5, r1, ip, lsl #9
   14fd4:	andeq	r5, r1, ip, lsl #9
   14fd8:	andeq	r5, r1, ip, lsl #9
   14fdc:	andeq	r5, r1, ip, lsl #9
   14fe0:	andeq	r5, r1, ip, lsl #9
   14fe4:	andeq	r5, r1, ip, lsl #9
   14fe8:	andeq	r5, r1, ip, lsl #9
   14fec:	andeq	r5, r1, ip, lsl #9
   14ff0:	andeq	r5, r1, ip, lsl #9
   14ff4:	andeq	r5, r1, ip, lsl #9
   14ff8:	andeq	r5, r1, ip, lsl #9
   14ffc:	andeq	r5, r1, ip, lsl #9
   15000:	andeq	r5, r1, ip, lsl #9
   15004:	cmp	r1, #0
   15008:	bne	154cc <__assert_fail@plt+0x3928>
   1500c:	cmp	r3, #46	; 0x2e
   15010:	add	r0, r0, #1
   15014:	beq	15048 <__assert_fail@plt+0x34a4>
   15018:	bls	15614 <__assert_fail@plt+0x3a70>
   1501c:	cmp	r3, #91	; 0x5b
   15020:	beq	15048 <__assert_fail@plt+0x34a4>
   15024:	bls	15664 <__assert_fail@plt+0x3ac0>
   15028:	cmp	r3, #123	; 0x7b
   1502c:	beq	15048 <__assert_fail@plt+0x34a4>
   15030:	cmp	r3, #125	; 0x7d
   15034:	beq	15048 <__assert_fail@plt+0x34a4>
   15038:	ldrb	r3, [r0]
   1503c:	add	r0, r0, #1
   15040:	cmp	r3, #46	; 0x2e
   15044:	bne	15018 <__assert_fail@plt+0x3474>
   15048:	mov	r0, #1
   1504c:	bx	lr
   15050:	ldrb	r3, [r0]
   15054:	add	r0, r0, #1
   15058:	cmp	r3, #125	; 0x7d
   1505c:	ldrls	pc, [pc, r3, lsl #2]
   15060:	b	15050 <__assert_fail@plt+0x34ac>
   15064:	andeq	r5, r1, r4, lsl #9
   15068:	andeq	r5, r1, r0, asr r0
   1506c:	andeq	r5, r1, r0, asr r0
   15070:	andeq	r5, r1, r0, asr r0
   15074:	andeq	r5, r1, r0, asr r0
   15078:	andeq	r5, r1, r0, asr r0
   1507c:	andeq	r5, r1, r0, asr r0
   15080:	andeq	r5, r1, r0, asr r0
   15084:	andeq	r5, r1, r0, asr r0
   15088:	andeq	r5, r1, r0, asr r0
   1508c:	andeq	r5, r1, r0, asr r0
   15090:	andeq	r5, r1, r0, asr r0
   15094:	andeq	r5, r1, r0, asr r0
   15098:	andeq	r5, r1, r0, asr r0
   1509c:	andeq	r5, r1, r0, asr r0
   150a0:	andeq	r5, r1, r0, asr r0
   150a4:	andeq	r5, r1, r0, asr r0
   150a8:	andeq	r5, r1, r0, asr r0
   150ac:	andeq	r5, r1, r0, asr r0
   150b0:	andeq	r5, r1, r0, asr r0
   150b4:	andeq	r5, r1, r0, asr r0
   150b8:	andeq	r5, r1, r0, asr r0
   150bc:	andeq	r5, r1, r0, asr r0
   150c0:	andeq	r5, r1, r0, asr r0
   150c4:	andeq	r5, r1, r0, asr r0
   150c8:	andeq	r5, r1, r0, asr r0
   150cc:	andeq	r5, r1, r0, asr r0
   150d0:	andeq	r5, r1, r0, asr r0
   150d4:	andeq	r5, r1, r0, asr r0
   150d8:	andeq	r5, r1, r0, asr r0
   150dc:	andeq	r5, r1, r0, asr r0
   150e0:	andeq	r5, r1, r0, asr r0
   150e4:	andeq	r5, r1, r0, asr r0
   150e8:	andeq	r5, r1, r0, asr r5
   150ec:	andeq	r5, r1, r0, asr r0
   150f0:	andeq	r5, r1, r0, asr r0
   150f4:	andeq	r5, r1, r0, asr r0
   150f8:	andeq	r5, r1, r0, asr r0
   150fc:	andeq	r5, r1, r0, asr r0
   15100:	andeq	r5, r1, r0, asr r0
   15104:	andeq	r5, r1, r0, asr r0
   15108:	andeq	r5, r1, r0, asr r0
   1510c:	andeq	r5, r1, r8, asr #32
   15110:	andeq	r5, r1, r0, asr r5
   15114:	andeq	r5, r1, r0, asr r0
   15118:	andeq	r5, r1, r0, asr r0
   1511c:	andeq	r5, r1, r0, asr r0
   15120:	andeq	r5, r1, r0, asr r0
   15124:	andeq	r5, r1, r0, asr r0
   15128:	andeq	r5, r1, r0, asr r0
   1512c:	andeq	r5, r1, r0, asr r0
   15130:	andeq	r5, r1, r0, asr r0
   15134:	andeq	r5, r1, r0, asr r0
   15138:	andeq	r5, r1, r0, asr r0
   1513c:	andeq	r5, r1, r0, asr r0
   15140:	andeq	r5, r1, r0, asr r0
   15144:	andeq	r5, r1, r0, asr r0
   15148:	andeq	r5, r1, r0, asr r0
   1514c:	andeq	r5, r1, r0, asr r0
   15150:	andeq	r5, r1, r0, asr r0
   15154:	andeq	r5, r1, r0, asr r0
   15158:	andeq	r5, r1, r0, asr r0
   1515c:	andeq	r5, r1, r0, asr r0
   15160:	andeq	r5, r1, r8, asr #32
   15164:	andeq	r5, r1, r0, asr r5
   15168:	andeq	r5, r1, r0, asr r0
   1516c:	andeq	r5, r1, r0, asr r0
   15170:	andeq	r5, r1, r0, asr r0
   15174:	andeq	r5, r1, r0, asr r0
   15178:	andeq	r5, r1, r0, asr r0
   1517c:	andeq	r5, r1, r0, asr r0
   15180:	andeq	r5, r1, r0, asr r0
   15184:	andeq	r5, r1, r0, asr r0
   15188:	andeq	r5, r1, r0, asr r0
   1518c:	andeq	r5, r1, r0, asr r0
   15190:	andeq	r5, r1, r0, asr r0
   15194:	andeq	r5, r1, r0, asr r0
   15198:	andeq	r5, r1, r0, asr r0
   1519c:	andeq	r5, r1, r0, asr r0
   151a0:	andeq	r5, r1, r0, asr r0
   151a4:	andeq	r5, r1, r0, asr r0
   151a8:	andeq	r5, r1, r0, asr r0
   151ac:	andeq	r5, r1, r0, asr r0
   151b0:	andeq	r5, r1, r0, asr r0
   151b4:	andeq	r5, r1, r0, asr r0
   151b8:	andeq	r5, r1, r0, asr r0
   151bc:	andeq	r5, r1, r0, asr r0
   151c0:	andeq	r5, r1, r0, asr r0
   151c4:	andeq	r5, r1, r0, asr r0
   151c8:	andeq	r5, r1, r0, asr r0
   151cc:	andeq	r5, r1, r0, asr r0
   151d0:	andeq	r5, r1, r8, asr #32
   151d4:	andeq	r5, r1, r0, asr r0
   151d8:	andeq	r5, r1, r0, asr r0
   151dc:	andeq	r5, r1, r0, asr r0
   151e0:	andeq	r5, r1, r0, asr r0
   151e4:	andeq	r5, r1, r0, asr r0
   151e8:	andeq	r5, r1, r0, asr r0
   151ec:	andeq	r5, r1, r0, asr r0
   151f0:	andeq	r5, r1, r0, asr r0
   151f4:	andeq	r5, r1, r0, asr r0
   151f8:	andeq	r5, r1, r0, asr r0
   151fc:	andeq	r5, r1, r0, asr r0
   15200:	andeq	r5, r1, r0, asr r0
   15204:	andeq	r5, r1, r0, asr r0
   15208:	andeq	r5, r1, r0, asr r0
   1520c:	andeq	r5, r1, r0, asr r0
   15210:	andeq	r5, r1, r0, asr r0
   15214:	andeq	r5, r1, r0, asr r0
   15218:	andeq	r5, r1, r0, asr r0
   1521c:	andeq	r5, r1, r0, asr r0
   15220:	andeq	r5, r1, r0, asr r0
   15224:	andeq	r5, r1, r0, asr r0
   15228:	andeq	r5, r1, r0, asr r0
   1522c:	andeq	r5, r1, r0, asr r0
   15230:	andeq	r5, r1, r0, asr r0
   15234:	andeq	r5, r1, r0, asr r0
   15238:	andeq	r5, r1, r0, asr r0
   1523c:	andeq	r5, r1, r0, asr r0
   15240:	andeq	r5, r1, r0, asr r0
   15244:	andeq	r5, r1, r0, asr r0
   15248:	andeq	r5, r1, r0, asr r0
   1524c:	andeq	r5, r1, r0, asr r0
   15250:	andeq	r5, r1, r0, asr r0
   15254:	andeq	r5, r1, r0, asr r0
   15258:	andeq	r5, r1, r0, asr r0
   1525c:	ldrb	r3, [r0, #1]
   15260:	mov	r0, r2
   15264:	add	r2, r0, #1
   15268:	cmp	r3, #125	; 0x7d
   1526c:	ldrls	pc, [pc, r3, lsl #2]
   15270:	b	1525c <__assert_fail@plt+0x36b8>
   15274:	andeq	r5, r1, r4, lsl #9
   15278:	andeq	r5, r1, ip, asr r2
   1527c:	andeq	r5, r1, ip, asr r2
   15280:	andeq	r5, r1, ip, asr r2
   15284:	andeq	r5, r1, ip, asr r2
   15288:	andeq	r5, r1, ip, asr r2
   1528c:	andeq	r5, r1, ip, asr r2
   15290:	andeq	r5, r1, ip, asr r2
   15294:	andeq	r5, r1, ip, asr r2
   15298:	andeq	r5, r1, ip, asr r2
   1529c:	andeq	r5, r1, ip, asr r2
   152a0:	andeq	r5, r1, ip, asr r2
   152a4:	andeq	r5, r1, ip, asr r2
   152a8:	andeq	r5, r1, ip, asr r2
   152ac:	andeq	r5, r1, ip, asr r2
   152b0:	andeq	r5, r1, ip, asr r2
   152b4:	andeq	r5, r1, ip, asr r2
   152b8:	andeq	r5, r1, ip, asr r2
   152bc:	andeq	r5, r1, ip, asr r2
   152c0:	andeq	r5, r1, ip, asr r2
   152c4:	andeq	r5, r1, ip, asr r2
   152c8:	andeq	r5, r1, ip, asr r2
   152cc:	andeq	r5, r1, ip, asr r2
   152d0:	andeq	r5, r1, ip, asr r2
   152d4:	andeq	r5, r1, ip, asr r2
   152d8:	andeq	r5, r1, ip, asr r2
   152dc:	andeq	r5, r1, ip, asr r2
   152e0:	andeq	r5, r1, ip, asr r2
   152e4:	andeq	r5, r1, ip, asr r2
   152e8:	andeq	r5, r1, ip, asr r2
   152ec:	andeq	r5, r1, ip, asr r2
   152f0:	andeq	r5, r1, ip, asr r2
   152f4:	andeq	r5, r1, ip, asr r2
   152f8:	andeq	r5, r1, ip, lsr r5
   152fc:	andeq	r5, r1, ip, asr r2
   15300:	andeq	r5, r1, ip, asr r2
   15304:	andeq	r5, r1, ip, asr r2
   15308:	andeq	r5, r1, ip, asr r2
   1530c:	andeq	r5, r1, ip, asr r2
   15310:	andeq	r5, r1, ip, asr r2
   15314:	andeq	r5, r1, ip, asr r2
   15318:	andeq	r5, r1, ip, asr r2
   1531c:	andeq	r5, r1, r8, asr #32
   15320:	andeq	r5, r1, ip, lsr r5
   15324:	andeq	r5, r1, ip, asr r2
   15328:	andeq	r5, r1, ip, asr r2
   1532c:	andeq	r5, r1, ip, asr r2
   15330:	andeq	r5, r1, ip, asr r2
   15334:	andeq	r5, r1, ip, asr r2
   15338:	andeq	r5, r1, ip, asr r2
   1533c:	andeq	r5, r1, ip, asr r2
   15340:	andeq	r5, r1, ip, asr r2
   15344:	andeq	r5, r1, ip, asr r2
   15348:	andeq	r5, r1, ip, asr r2
   1534c:	andeq	r5, r1, ip, asr r2
   15350:	andeq	r5, r1, ip, asr r2
   15354:	andeq	r5, r1, ip, asr r2
   15358:	andeq	r5, r1, ip, asr r2
   1535c:	andeq	r5, r1, ip, asr r2
   15360:	andeq	r5, r1, ip, asr r2
   15364:	andeq	r5, r1, ip, asr r2
   15368:	andeq	r5, r1, ip, asr r2
   1536c:	andeq	r5, r1, ip, asr r2
   15370:	andeq	r5, r1, r8, asr #32
   15374:	andeq	r5, r1, ip, lsr r5
   15378:	andeq	r5, r1, ip, asr r2
   1537c:	andeq	r5, r1, ip, asr r2
   15380:	andeq	r5, r1, ip, asr r2
   15384:	andeq	r5, r1, ip, asr r2
   15388:	andeq	r5, r1, ip, asr r2
   1538c:	andeq	r5, r1, ip, asr r2
   15390:	andeq	r5, r1, ip, asr r2
   15394:	andeq	r5, r1, ip, asr r2
   15398:	andeq	r5, r1, ip, asr r2
   1539c:	andeq	r5, r1, ip, asr r2
   153a0:	andeq	r5, r1, ip, asr r2
   153a4:	andeq	r5, r1, ip, asr r2
   153a8:	andeq	r5, r1, ip, asr r2
   153ac:	andeq	r5, r1, ip, asr r2
   153b0:	andeq	r5, r1, ip, asr r2
   153b4:	andeq	r5, r1, ip, asr r2
   153b8:	andeq	r5, r1, ip, asr r2
   153bc:	andeq	r5, r1, ip, asr r2
   153c0:	andeq	r5, r1, ip, asr r2
   153c4:	andeq	r5, r1, ip, asr r2
   153c8:	andeq	r5, r1, ip, asr r2
   153cc:	andeq	r5, r1, ip, asr r2
   153d0:	andeq	r5, r1, ip, asr r2
   153d4:	andeq	r5, r1, ip, asr r2
   153d8:	andeq	r5, r1, ip, asr r2
   153dc:	andeq	r5, r1, ip, asr r2
   153e0:	andeq	r5, r1, r8, asr #32
   153e4:	andeq	r5, r1, r4, lsr #10
   153e8:	andeq	r5, r1, ip, asr r2
   153ec:	andeq	r5, r1, ip, asr r2
   153f0:	andeq	r5, r1, ip, asr r2
   153f4:	andeq	r5, r1, ip, asr r2
   153f8:	andeq	r5, r1, ip, asr r2
   153fc:	andeq	r5, r1, ip, asr r2
   15400:	andeq	r5, r1, ip, asr r2
   15404:	andeq	r5, r1, ip, asr r2
   15408:	andeq	r5, r1, ip, asr r2
   1540c:	andeq	r5, r1, ip, asr r2
   15410:	andeq	r5, r1, ip, asr r2
   15414:	andeq	r5, r1, ip, asr r2
   15418:	andeq	r5, r1, ip, asr r2
   1541c:	andeq	r5, r1, ip, asr r2
   15420:	andeq	r5, r1, ip, asr r2
   15424:	andeq	r5, r1, ip, asr r2
   15428:	andeq	r5, r1, ip, asr r2
   1542c:	andeq	r5, r1, ip, asr r2
   15430:	andeq	r5, r1, ip, asr r2
   15434:	andeq	r5, r1, ip, asr r2
   15438:	andeq	r5, r1, ip, asr r2
   1543c:	andeq	r5, r1, ip, asr r2
   15440:	andeq	r5, r1, ip, asr r2
   15444:	andeq	r5, r1, ip, asr r2
   15448:	andeq	r5, r1, ip, asr r2
   1544c:	andeq	r5, r1, ip, asr r2
   15450:	andeq	r5, r1, ip, asr r2
   15454:	andeq	r5, r1, ip, asr r2
   15458:	andeq	r5, r1, ip, asr r2
   1545c:	andeq	r5, r1, ip, asr r2
   15460:	andeq	r5, r1, ip, asr r2
   15464:	andeq	r5, r1, ip, asr r2
   15468:	andeq	r5, r1, ip, asr r2
   1546c:	cmp	r3, #42	; 0x2a
   15470:	bhi	15594 <__assert_fail@plt+0x39f0>
   15474:	cmp	r3, #40	; 0x28
   15478:	bcs	15048 <__assert_fail@plt+0x34a4>
   1547c:	cmp	r3, #0
   15480:	bne	15594 <__assert_fail@plt+0x39f0>
   15484:	mov	r0, #0
   15488:	bx	lr
   1548c:	ldrb	r3, [r0]
   15490:	b	14dfc <__assert_fail@plt+0x3258>
   15494:	ldrb	r3, [r0, #1]
   15498:	mov	r0, r2
   1549c:	b	14be4 <__assert_fail@plt+0x3040>
   154a0:	cmp	r3, #42	; 0x2a
   154a4:	bhi	15670 <__assert_fail@plt+0x3acc>
   154a8:	cmp	r3, #40	; 0x28
   154ac:	bcs	15048 <__assert_fail@plt+0x34a4>
   154b0:	cmp	r3, #0
   154b4:	beq	15484 <__assert_fail@plt+0x38e0>
   154b8:	cmp	r3, #33	; 0x21
   154bc:	bne	154f8 <__assert_fail@plt+0x3954>
   154c0:	ldrb	r3, [r0]
   154c4:	cmp	r3, #40	; 0x28
   154c8:	beq	15048 <__assert_fail@plt+0x34a4>
   154cc:	cmp	r3, #46	; 0x2e
   154d0:	add	r0, r0, #1
   154d4:	beq	15048 <__assert_fail@plt+0x34a4>
   154d8:	bls	154a0 <__assert_fail@plt+0x38fc>
   154dc:	cmp	r3, #91	; 0x5b
   154e0:	beq	15048 <__assert_fail@plt+0x34a4>
   154e4:	bls	15630 <__assert_fail@plt+0x3a8c>
   154e8:	cmp	r3, #123	; 0x7b
   154ec:	beq	15048 <__assert_fail@plt+0x34a4>
   154f0:	cmp	r3, #125	; 0x7d
   154f4:	beq	15048 <__assert_fail@plt+0x34a4>
   154f8:	ldrb	r3, [r0]
   154fc:	add	r0, r0, #1
   15500:	cmp	r3, #46	; 0x2e
   15504:	bne	154d8 <__assert_fail@plt+0x3934>
   15508:	b	15048 <__assert_fail@plt+0x34a4>
   1550c:	ldrb	r3, [r0, #1]
   15510:	adds	r3, r3, #0
   15514:	movne	r3, #1
   15518:	add	r0, r2, r3
   1551c:	ldrb	r3, [r2, r3]
   15520:	b	14be4 <__assert_fail@plt+0x3040>
   15524:	ldrb	r3, [r0, #1]
   15528:	adds	r3, r3, #0
   1552c:	movne	r3, #1
   15530:	add	r0, r2, r3
   15534:	ldrb	r3, [r2, r3]
   15538:	b	15264 <__assert_fail@plt+0x36c0>
   1553c:	ldrb	r3, [r0, #1]
   15540:	mov	r0, r2
   15544:	cmp	r3, #40	; 0x28
   15548:	bne	15264 <__assert_fail@plt+0x36c0>
   1554c:	b	15048 <__assert_fail@plt+0x34a4>
   15550:	ldrb	r3, [r0]
   15554:	cmp	r3, #40	; 0x28
   15558:	bne	15054 <__assert_fail@plt+0x34b0>
   1555c:	b	15048 <__assert_fail@plt+0x34a4>
   15560:	cmp	r1, #0
   15564:	bne	155d4 <__assert_fail@plt+0x3a30>
   15568:	cmp	r3, #46	; 0x2e
   1556c:	add	r0, r0, #1
   15570:	beq	15048 <__assert_fail@plt+0x34a4>
   15574:	bls	1546c <__assert_fail@plt+0x38c8>
   15578:	cmp	r3, #91	; 0x5b
   1557c:	beq	15048 <__assert_fail@plt+0x34a4>
   15580:	bls	15644 <__assert_fail@plt+0x3aa0>
   15584:	cmp	r3, #123	; 0x7b
   15588:	beq	15048 <__assert_fail@plt+0x34a4>
   1558c:	cmp	r3, #125	; 0x7d
   15590:	beq	15048 <__assert_fail@plt+0x34a4>
   15594:	ldrb	r3, [r0]
   15598:	add	r0, r0, #1
   1559c:	cmp	r3, #46	; 0x2e
   155a0:	bne	15574 <__assert_fail@plt+0x39d0>
   155a4:	b	15048 <__assert_fail@plt+0x34a4>
   155a8:	cmp	r3, #42	; 0x2a
   155ac:	bhi	1567c <__assert_fail@plt+0x3ad8>
   155b0:	cmp	r3, #40	; 0x28
   155b4:	bcs	15048 <__assert_fail@plt+0x34a4>
   155b8:	cmp	r3, #0
   155bc:	beq	15484 <__assert_fail@plt+0x38e0>
   155c0:	cmp	r3, #33	; 0x21
   155c4:	bne	15600 <__assert_fail@plt+0x3a5c>
   155c8:	ldrb	r3, [r0]
   155cc:	cmp	r3, #40	; 0x28
   155d0:	beq	15048 <__assert_fail@plt+0x34a4>
   155d4:	cmp	r3, #46	; 0x2e
   155d8:	add	r0, r0, #1
   155dc:	beq	15048 <__assert_fail@plt+0x34a4>
   155e0:	bls	155a8 <__assert_fail@plt+0x3a04>
   155e4:	cmp	r3, #91	; 0x5b
   155e8:	beq	15048 <__assert_fail@plt+0x34a4>
   155ec:	bls	15650 <__assert_fail@plt+0x3aac>
   155f0:	cmp	r3, #123	; 0x7b
   155f4:	beq	15048 <__assert_fail@plt+0x34a4>
   155f8:	cmp	r3, #125	; 0x7d
   155fc:	beq	15048 <__assert_fail@plt+0x34a4>
   15600:	ldrb	r3, [r0]
   15604:	add	r0, r0, #1
   15608:	cmp	r3, #46	; 0x2e
   1560c:	bne	155e0 <__assert_fail@plt+0x3a3c>
   15610:	b	15048 <__assert_fail@plt+0x34a4>
   15614:	cmp	r3, #42	; 0x2a
   15618:	bhi	15038 <__assert_fail@plt+0x3494>
   1561c:	cmp	r3, #40	; 0x28
   15620:	bcs	15048 <__assert_fail@plt+0x34a4>
   15624:	cmp	r3, #0
   15628:	beq	15484 <__assert_fail@plt+0x38e0>
   1562c:	b	15038 <__assert_fail@plt+0x3494>
   15630:	cmp	r3, #63	; 0x3f
   15634:	beq	15048 <__assert_fail@plt+0x34a4>
   15638:	cmp	r3, #64	; 0x40
   1563c:	beq	154c0 <__assert_fail@plt+0x391c>
   15640:	b	154f8 <__assert_fail@plt+0x3954>
   15644:	cmp	r3, #63	; 0x3f
   15648:	bne	15594 <__assert_fail@plt+0x39f0>
   1564c:	b	15048 <__assert_fail@plt+0x34a4>
   15650:	cmp	r3, #63	; 0x3f
   15654:	beq	15048 <__assert_fail@plt+0x34a4>
   15658:	cmp	r3, #64	; 0x40
   1565c:	beq	155c8 <__assert_fail@plt+0x3a24>
   15660:	b	15600 <__assert_fail@plt+0x3a5c>
   15664:	cmp	r3, #63	; 0x3f
   15668:	bne	15038 <__assert_fail@plt+0x3494>
   1566c:	b	15048 <__assert_fail@plt+0x34a4>
   15670:	cmp	r3, #43	; 0x2b
   15674:	beq	154c0 <__assert_fail@plt+0x391c>
   15678:	b	154f8 <__assert_fail@plt+0x3954>
   1567c:	cmp	r3, #43	; 0x2b
   15680:	beq	155c8 <__assert_fail@plt+0x3a24>
   15684:	b	15600 <__assert_fail@plt+0x3a5c>
   15688:	mov	r0, #8
   1568c:	b	34cf4 <__assert_fail@plt+0x23150>
   15690:	push	{r4, r5, r6, r7, r8, lr}
   15694:	mov	r8, r0
   15698:	ldr	r6, [r0]
   1569c:	cmp	r6, #0
   156a0:	beq	1572c <__assert_fail@plt+0x3b88>
   156a4:	ldr	r3, [r6, #4]
   156a8:	ldr	r7, [r6]
   156ac:	cmp	r3, #0
   156b0:	beq	15760 <__assert_fail@plt+0x3bbc>
   156b4:	cmp	r3, #1
   156b8:	bne	1571c <__assert_fail@plt+0x3b78>
   156bc:	ldr	r2, [r6, #20]
   156c0:	cmp	r2, #0
   156c4:	ldrle	r0, [r6, #12]
   156c8:	ble	15718 <__assert_fail@plt+0x3b74>
   156cc:	mov	r4, #0
   156d0:	ldr	r0, [r6, #12]
   156d4:	mov	r5, r4
   156d8:	b	156e8 <__assert_fail@plt+0x3b44>
   156dc:	cmp	r5, r2
   156e0:	add	r4, r4, #36	; 0x24
   156e4:	bge	15718 <__assert_fail@plt+0x3b74>
   156e8:	ldr	r3, [r0, r4]
   156ec:	add	r5, r5, #1
   156f0:	tst	r3, #134217728	; 0x8000000
   156f4:	add	r3, r0, r4
   156f8:	beq	156dc <__assert_fail@plt+0x3b38>
   156fc:	add	r0, r3, #4
   15700:	bl	33378 <__assert_fail@plt+0x217d4>
   15704:	ldr	r2, [r6, #20]
   15708:	ldr	r0, [r6, #12]
   1570c:	cmp	r5, r2
   15710:	add	r4, r4, #36	; 0x24
   15714:	blt	156e8 <__assert_fail@plt+0x3b44>
   15718:	bl	184ec <__assert_fail@plt+0x6948>
   1571c:	mov	r0, r6
   15720:	bl	184ec <__assert_fail@plt+0x6948>
   15724:	subs	r6, r7, #0
   15728:	bne	156a4 <__assert_fail@plt+0x3b00>
   1572c:	ldr	r4, [r8, #4]
   15730:	cmp	r4, #0
   15734:	beq	15754 <__assert_fail@plt+0x3bb0>
   15738:	ldr	r0, [r4, #4]
   1573c:	ldr	r5, [r4]
   15740:	bl	184ec <__assert_fail@plt+0x6948>
   15744:	mov	r0, r4
   15748:	bl	184ec <__assert_fail@plt+0x6948>
   1574c:	subs	r4, r5, #0
   15750:	bne	15738 <__assert_fail@plt+0x3b94>
   15754:	mov	r0, r8
   15758:	pop	{r4, r5, r6, r7, r8, lr}
   1575c:	b	184ec <__assert_fail@plt+0x6948>
   15760:	ldr	r0, [r6, #12]
   15764:	bl	1b958 <__assert_fail@plt+0x9db4>
   15768:	mov	r0, r6
   1576c:	bl	184ec <__assert_fail@plt+0x6948>
   15770:	subs	r6, r7, #0
   15774:	bne	156a4 <__assert_fail@plt+0x3b00>
   15778:	b	1572c <__assert_fail@plt+0x3b88>
   1577c:	ldr	r3, [pc, #160]	; 15824 <__assert_fail@plt+0x3c80>
   15780:	tst	r2, #268435456	; 0x10000000
   15784:	push	{r4, r5, r6, r7, r8, lr}
   15788:	mov	r8, r2
   1578c:	ldr	r6, [pc, #148]	; 15828 <__assert_fail@plt+0x3c84>
   15790:	movne	r6, r3
   15794:	mov	r7, r0
   15798:	mov	r4, r1
   1579c:	blx	r6
   157a0:	tst	r8, #1073741824	; 0x40000000
   157a4:	clz	r3, r0
   157a8:	lsr	r3, r3, #5
   157ac:	bne	157e4 <__assert_fail@plt+0x3c40>
   157b0:	ldrb	r2, [r4]
   157b4:	cmp	r2, #0
   157b8:	beq	157e4 <__assert_fail@plt+0x3c40>
   157bc:	cmp	r0, #0
   157c0:	beq	1581c <__assert_fail@plt+0x3c78>
   157c4:	add	r4, r4, #1
   157c8:	cmp	r2, #47	; 0x2f
   157cc:	sub	r5, r4, #1
   157d0:	ldrb	r2, [r4]
   157d4:	beq	157ec <__assert_fail@plt+0x3c48>
   157d8:	cmp	r2, #0
   157dc:	bne	157c4 <__assert_fail@plt+0x3c20>
   157e0:	mov	r3, r2
   157e4:	mov	r0, r3
   157e8:	pop	{r4, r5, r6, r7, r8, pc}
   157ec:	cmp	r2, #47	; 0x2f
   157f0:	beq	157c4 <__assert_fail@plt+0x3c20>
   157f4:	mov	r2, r8
   157f8:	mov	r1, r4
   157fc:	mov	r0, r7
   15800:	blx	r6
   15804:	ldrb	r2, [r5, #1]
   15808:	cmp	r2, #0
   1580c:	bne	157bc <__assert_fail@plt+0x3c18>
   15810:	clz	r3, r0
   15814:	lsr	r3, r3, #5
   15818:	b	157e4 <__assert_fail@plt+0x3c40>
   1581c:	mov	r3, #1
   15820:	b	157e4 <__assert_fail@plt+0x3c40>
   15824:	ldrdeq	r1, [r1], -r4
   15828:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   1582c:	ldr	r3, [r0]
   15830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15834:	sub	sp, sp, #28
   15838:	cmp	r3, #0
   1583c:	str	r3, [sp, #16]
   15840:	beq	15aa4 <__assert_fail@plt+0x3f00>
   15844:	ldr	r3, [r3, #4]
   15848:	mov	sl, r1
   1584c:	cmp	r3, #0
   15850:	mov	r5, #0
   15854:	mov	fp, #47	; 0x2f
   15858:	bne	15918 <__assert_fail@plt+0x3d74>
   1585c:	cmp	r5, #0
   15860:	beq	15a8c <__assert_fail@plt+0x3ee8>
   15864:	ldr	r3, [sp, #16]
   15868:	mov	r7, sl
   1586c:	ldr	r8, [r3, #8]
   15870:	ldr	r6, [r3, #12]
   15874:	and	r9, r8, #8
   15878:	and	r8, r8, #1073741824	; 0x40000000
   1587c:	mov	r1, r7
   15880:	mov	r0, r5
   15884:	bl	11898 <strcpy@plt>
   15888:	cmp	r9, #0
   1588c:	beq	158c0 <__assert_fail@plt+0x3d1c>
   15890:	mov	r1, r5
   15894:	mov	r0, r6
   15898:	bl	1b388 <__assert_fail@plt+0x97e4>
   1589c:	mov	r1, fp
   158a0:	subs	r4, r0, #0
   158a4:	mov	r0, r5
   158a8:	bne	15a70 <__assert_fail@plt+0x3ecc>
   158ac:	bl	11a78 <strrchr@plt>
   158b0:	cmp	r0, #0
   158b4:	beq	158d4 <__assert_fail@plt+0x3d30>
   158b8:	strb	r4, [r0]
   158bc:	b	15890 <__assert_fail@plt+0x3cec>
   158c0:	mov	r1, r5
   158c4:	mov	r0, r6
   158c8:	bl	1b388 <__assert_fail@plt+0x97e4>
   158cc:	cmp	r0, #0
   158d0:	bne	15a70 <__assert_fail@plt+0x3ecc>
   158d4:	cmp	r8, #0
   158d8:	bne	158f8 <__assert_fail@plt+0x3d54>
   158dc:	mov	r0, r7
   158e0:	mov	r1, fp
   158e4:	bl	11994 <strchr@plt>
   158e8:	cmp	r0, #0
   158ec:	beq	158f8 <__assert_fail@plt+0x3d54>
   158f0:	adds	r7, r0, #1
   158f4:	bne	1587c <__assert_fail@plt+0x3cd8>
   158f8:	ldr	r3, [sp, #16]
   158fc:	ldr	r3, [r3]
   15900:	cmp	r3, #0
   15904:	beq	159e0 <__assert_fail@plt+0x3e3c>
   15908:	str	r3, [sp, #16]
   1590c:	ldr	r3, [r3, #4]
   15910:	cmp	r3, #0
   15914:	beq	1585c <__assert_fail@plt+0x3cb8>
   15918:	ldr	r3, [sp, #16]
   1591c:	ldr	r2, [r3, #20]
   15920:	ldr	r7, [r3, #12]
   15924:	cmp	r2, #0
   15928:	str	r2, [sp, #12]
   1592c:	ble	158f8 <__assert_fail@plt+0x3d54>
   15930:	add	r7, r7, #4
   15934:	mov	r8, #0
   15938:	str	r5, [sp, #20]
   1593c:	ldr	r6, [r7, #-4]
   15940:	tst	r6, #134217728	; 0x8000000
   15944:	bne	15a44 <__assert_fail@plt+0x3ea0>
   15948:	ldr	r3, [r7]
   1594c:	ldr	r2, [pc, #348]	; 15ab0 <__assert_fail@plt+0x3f0c>
   15950:	ldr	r1, [pc, #348]	; 15ab4 <__assert_fail@plt+0x3f10>
   15954:	tst	r6, #268435456	; 0x10000000
   15958:	moveq	r9, r2
   1595c:	movne	r9, r1
   15960:	mov	r0, r3
   15964:	mov	r1, sl
   15968:	mov	r2, r6
   1596c:	str	r3, [sp, #8]
   15970:	blx	r9
   15974:	tst	r6, #1073741824	; 0x40000000
   15978:	clz	r1, r0
   1597c:	lsr	r1, r1, #5
   15980:	bne	15a64 <__assert_fail@plt+0x3ec0>
   15984:	ldrb	r2, [sl]
   15988:	cmp	r2, #0
   1598c:	beq	15a64 <__assert_fail@plt+0x3ec0>
   15990:	cmp	r0, #0
   15994:	beq	15a14 <__assert_fail@plt+0x3e70>
   15998:	mov	r4, sl
   1599c:	add	r4, r4, #1
   159a0:	cmp	r2, #47	; 0x2f
   159a4:	sub	r5, r4, #1
   159a8:	ldrb	r2, [r4]
   159ac:	beq	159e8 <__assert_fail@plt+0x3e44>
   159b0:	cmp	r2, #0
   159b4:	bne	1599c <__assert_fail@plt+0x3df8>
   159b8:	ldr	r3, [sp, #12]
   159bc:	add	r8, r8, #1
   159c0:	cmp	r3, r8
   159c4:	add	r7, r7, #36	; 0x24
   159c8:	bne	1593c <__assert_fail@plt+0x3d98>
   159cc:	ldr	r3, [sp, #16]
   159d0:	ldr	r5, [sp, #20]
   159d4:	ldr	r3, [r3]
   159d8:	cmp	r3, #0
   159dc:	bne	15908 <__assert_fail@plt+0x3d64>
   159e0:	mov	r4, #1
   159e4:	b	15a1c <__assert_fail@plt+0x3e78>
   159e8:	cmp	r2, #47	; 0x2f
   159ec:	beq	1599c <__assert_fail@plt+0x3df8>
   159f0:	mov	r2, r6
   159f4:	mov	r1, r4
   159f8:	ldr	r0, [sp, #8]
   159fc:	blx	r9
   15a00:	ldrb	r2, [r5, #1]
   15a04:	cmp	r2, #0
   15a08:	beq	15a78 <__assert_fail@plt+0x3ed4>
   15a0c:	cmp	r0, #0
   15a10:	bne	1599c <__assert_fail@plt+0x3df8>
   15a14:	ldr	r5, [sp, #20]
   15a18:	mov	r4, #0
   15a1c:	mov	r0, r5
   15a20:	bl	184ec <__assert_fail@plt+0x6948>
   15a24:	ldr	r3, [sp, #16]
   15a28:	ldr	r0, [r3, #8]
   15a2c:	lsr	r0, r0, #29
   15a30:	eor	r0, r0, #1
   15a34:	and	r0, r0, #1
   15a38:	eor	r0, r0, r4
   15a3c:	add	sp, sp, #28
   15a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a44:	mov	r3, #0
   15a48:	mov	r1, sl
   15a4c:	mov	r2, r3
   15a50:	str	r3, [sp]
   15a54:	mov	r0, r7
   15a58:	bl	333f8 <__assert_fail@plt+0x21854>
   15a5c:	clz	r1, r0
   15a60:	lsr	r1, r1, #5
   15a64:	cmp	r1, #0
   15a68:	beq	159b8 <__assert_fail@plt+0x3e14>
   15a6c:	b	15a14 <__assert_fail@plt+0x3e70>
   15a70:	mov	r4, #0
   15a74:	b	15a1c <__assert_fail@plt+0x3e78>
   15a78:	clz	r1, r0
   15a7c:	lsr	r1, r1, #5
   15a80:	cmp	r1, #0
   15a84:	beq	159b8 <__assert_fail@plt+0x3e14>
   15a88:	b	15a14 <__assert_fail@plt+0x3e70>
   15a8c:	mov	r0, sl
   15a90:	bl	11988 <strlen@plt>
   15a94:	add	r0, r0, #1
   15a98:	bl	347e0 <__assert_fail@plt+0x22c3c>
   15a9c:	mov	r5, r0
   15aa0:	b	15864 <__assert_fail@plt+0x3cc0>
   15aa4:	mov	r0, r3
   15aa8:	add	sp, sp, #28
   15aac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ab0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   15ab4:	ldrdeq	r1, [r1], -r4
   15ab8:	tst	r2, #402653184	; 0x18000000
   15abc:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ac0:	mov	r4, r2
   15ac4:	sub	sp, sp, #12
   15ac8:	mov	r6, r0
   15acc:	mov	r7, r1
   15ad0:	ldr	r5, [r0]
   15ad4:	beq	15bb8 <__assert_fail@plt+0x4014>
   15ad8:	mov	r1, r2
   15adc:	mov	r0, r7
   15ae0:	bl	14bc0 <__assert_fail@plt+0x301c>
   15ae4:	cmp	r0, #0
   15ae8:	beq	15bb8 <__assert_fail@plt+0x4014>
   15aec:	cmp	r5, #0
   15af0:	beq	15b00 <__assert_fail@plt+0x3f5c>
   15af4:	ldr	r3, [r5, #4]
   15af8:	cmp	r3, #1
   15afc:	beq	15d14 <__assert_fail@plt+0x4170>
   15b00:	mov	r0, #24
   15b04:	bl	34cf4 <__assert_fail@plt+0x23150>
   15b08:	ldr	r3, [r6]
   15b0c:	mov	r2, #1
   15b10:	mov	r5, r0
   15b14:	stmib	r0, {r2, r4}
   15b18:	str	r3, [r0]
   15b1c:	str	r0, [r6]
   15b20:	ldr	r3, [r5, #20]
   15b24:	ldr	r2, [r5, #16]
   15b28:	cmp	r3, r2
   15b2c:	beq	15da8 <__assert_fail@plt+0x4204>
   15b30:	ldr	r8, [r5, #12]
   15b34:	add	r2, r3, r3, lsl #3
   15b38:	add	r9, r3, #1
   15b3c:	lsl	r2, r2, #2
   15b40:	tst	r4, #134217728	; 0x8000000
   15b44:	str	r9, [r5, #20]
   15b48:	str	r4, [r8, r2]
   15b4c:	add	r8, r8, r2
   15b50:	beq	15ce0 <__assert_fail@plt+0x413c>
   15b54:	tst	r4, #16
   15b58:	moveq	r6, #9
   15b5c:	movne	r6, #11
   15b60:	tst	r4, #8
   15b64:	beq	15d90 <__assert_fail@plt+0x41ec>
   15b68:	mov	r0, r7
   15b6c:	bl	11988 <strlen@plt>
   15b70:	cmp	r0, #0
   15b74:	mov	r4, r0
   15b78:	ble	15dd4 <__assert_fail@plt+0x4230>
   15b7c:	sub	r2, r0, #1
   15b80:	add	r3, r7, r2
   15b84:	ldrb	r2, [r7, r2]
   15b88:	cmp	r2, #47	; 0x2f
   15b8c:	beq	15ba0 <__assert_fail@plt+0x3ffc>
   15b90:	b	15d2c <__assert_fail@plt+0x4188>
   15b94:	ldrb	r2, [r3, #-1]!
   15b98:	cmp	r2, #47	; 0x2f
   15b9c:	bne	15d28 <__assert_fail@plt+0x4184>
   15ba0:	subs	r0, r0, #1
   15ba4:	bne	15b94 <__assert_fail@plt+0x3ff0>
   15ba8:	sub	r3, r9, #1
   15bac:	str	r3, [r5, #20]
   15bb0:	add	sp, sp, #12
   15bb4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15bb8:	cmp	r5, #0
   15bbc:	beq	15bcc <__assert_fail@plt+0x4028>
   15bc0:	ldr	r3, [r5, #4]
   15bc4:	cmp	r3, #0
   15bc8:	beq	15c5c <__assert_fail@plt+0x40b8>
   15bcc:	mov	r0, #24
   15bd0:	bl	34cf4 <__assert_fail@plt+0x23150>
   15bd4:	ldr	r8, [pc, #512]	; 15ddc <__assert_fail@plt+0x4238>
   15bd8:	mov	r1, #0
   15bdc:	ldr	lr, [pc, #508]	; 15de0 <__assert_fail@plt+0x423c>
   15be0:	ldr	ip, [pc, #508]	; 15de4 <__assert_fail@plt+0x4240>
   15be4:	ldr	r3, [pc, #508]	; 15de8 <__assert_fail@plt+0x4244>
   15be8:	ldr	r2, [pc, #508]	; 15dec <__assert_fail@plt+0x4248>
   15bec:	mov	r5, r0
   15bf0:	and	r0, r4, #16
   15bf4:	cmp	r0, r1
   15bf8:	stmib	r5, {r1, r4}
   15bfc:	movne	r3, r8
   15c00:	movne	r2, lr
   15c04:	mov	r0, r1
   15c08:	str	ip, [sp]
   15c0c:	bl	1b668 <__assert_fail@plt+0x9ac4>
   15c10:	ldr	r3, [r6]
   15c14:	str	r5, [r6]
   15c18:	str	r3, [r5]
   15c1c:	str	r0, [r5, #12]
   15c20:	mov	r0, r7
   15c24:	bl	34df0 <__assert_fail@plt+0x2324c>
   15c28:	and	r4, r4, #268435458	; 0x10000002
   15c2c:	cmp	r4, #268435456	; 0x10000000
   15c30:	mov	r6, r0
   15c34:	beq	15c78 <__assert_fail@plt+0x40d4>
   15c38:	ldr	r0, [r5, #12]
   15c3c:	mov	r1, r6
   15c40:	bl	1bfd0 <__assert_fail@plt+0xa42c>
   15c44:	cmp	r6, r0
   15c48:	beq	15bb0 <__assert_fail@plt+0x400c>
   15c4c:	mov	r0, r6
   15c50:	add	sp, sp, #12
   15c54:	pop	{r4, r5, r6, r7, r8, r9, lr}
   15c58:	b	184ec <__assert_fail@plt+0x6948>
   15c5c:	ldr	r2, [r5, #8]
   15c60:	ldr	r3, [pc, #392]	; 15df0 <__assert_fail@plt+0x424c>
   15c64:	eor	r2, r2, r4
   15c68:	and	r3, r3, r2
   15c6c:	cmp	r3, #0
   15c70:	beq	15c20 <__assert_fail@plt+0x407c>
   15c74:	b	15bcc <__assert_fail@plt+0x4028>
   15c78:	mov	r2, r0
   15c7c:	mov	r1, r0
   15c80:	mov	ip, #0
   15c84:	mov	r4, #1
   15c88:	ldrb	r0, [r2]
   15c8c:	mov	r3, ip
   15c90:	cmp	r0, #92	; 0x5c
   15c94:	beq	15cc0 <__assert_fail@plt+0x411c>
   15c98:	add	r3, r2, r3
   15c9c:	add	r2, r3, #1
   15ca0:	ldrb	r3, [r3]
   15ca4:	cmp	r3, #0
   15ca8:	strb	r3, [r1], #1
   15cac:	beq	15c38 <__assert_fail@plt+0x4094>
   15cb0:	ldrb	r0, [r2]
   15cb4:	mov	r3, ip
   15cb8:	cmp	r0, #92	; 0x5c
   15cbc:	bne	15c98 <__assert_fail@plt+0x40f4>
   15cc0:	ldrb	r0, [r2, #1]
   15cc4:	mov	r3, r4
   15cc8:	cmp	r0, #0
   15ccc:	bne	15c98 <__assert_fail@plt+0x40f4>
   15cd0:	ldrb	r3, [r2]
   15cd4:	add	r2, r2, #1
   15cd8:	strb	r3, [r1], #1
   15cdc:	b	15c88 <__assert_fail@plt+0x40e4>
   15ce0:	tst	r4, #67108864	; 0x4000000
   15ce4:	beq	15d08 <__assert_fail@plt+0x4164>
   15ce8:	mov	r0, r7
   15cec:	bl	34df0 <__assert_fail@plt+0x2324c>
   15cf0:	mov	r7, r0
   15cf4:	mov	r0, #8
   15cf8:	bl	347e0 <__assert_fail@plt+0x22c3c>
   15cfc:	ldr	r3, [r6, #4]
   15d00:	str	r0, [r6, #4]
   15d04:	stm	r0, {r3, r7}
   15d08:	str	r7, [r8, #4]
   15d0c:	add	sp, sp, #12
   15d10:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15d14:	ldr	r3, [r5, #8]
   15d18:	eor	r3, r3, r4
   15d1c:	tst	r3, #536870912	; 0x20000000
   15d20:	beq	15b20 <__assert_fail@plt+0x3f7c>
   15d24:	b	15b00 <__assert_fail@plt+0x3f5c>
   15d28:	mov	r4, r0
   15d2c:	add	r0, r0, #7
   15d30:	bl	347f4 <__assert_fail@plt+0x22c50>
   15d34:	mov	r2, r4
   15d38:	mov	r1, r7
   15d3c:	mov	r9, r0
   15d40:	bl	11784 <memcpy@plt>
   15d44:	ldr	r3, [pc, #168]	; 15df4 <__assert_fail@plt+0x4250>
   15d48:	add	ip, r9, r4
   15d4c:	mov	r2, r6
   15d50:	ldr	r0, [r3]
   15d54:	ldrh	lr, [r3, #4]
   15d58:	ldrb	r3, [r3, #6]
   15d5c:	str	r0, [r9, r4]
   15d60:	mov	r1, r9
   15d64:	add	r0, r8, #4
   15d68:	strh	lr, [ip, #4]
   15d6c:	strb	r3, [ip, #6]
   15d70:	bl	33144 <__assert_fail@plt+0x215a0>
   15d74:	mov	r4, r0
   15d78:	mov	r0, r9
   15d7c:	bl	184ec <__assert_fail@plt+0x6948>
   15d80:	cmp	r4, #0
   15d84:	beq	15bb0 <__assert_fail@plt+0x400c>
   15d88:	ldr	r9, [r5, #20]
   15d8c:	b	15ba8 <__assert_fail@plt+0x4004>
   15d90:	mov	r2, r6
   15d94:	mov	r1, r7
   15d98:	add	r0, r8, #4
   15d9c:	bl	33144 <__assert_fail@plt+0x215a0>
   15da0:	mov	r4, r0
   15da4:	b	15d80 <__assert_fail@plt+0x41dc>
   15da8:	mov	r3, #36	; 0x24
   15dac:	ldr	r0, [r5, #12]
   15db0:	mov	r2, #1
   15db4:	str	r3, [sp]
   15db8:	add	r1, r5, #16
   15dbc:	mvn	r3, #0
   15dc0:	bl	34a24 <__assert_fail@plt+0x22e80>
   15dc4:	ldr	r3, [r5, #20]
   15dc8:	mov	r8, r0
   15dcc:	str	r0, [r5, #12]
   15dd0:	b	15b34 <__assert_fail@plt+0x3f90>
   15dd4:	beq	15ba8 <__assert_fail@plt+0x4004>
   15dd8:	b	15d2c <__assert_fail@plt+0x4188>
   15ddc:	andeq	r4, r1, r8, lsr #17
   15de0:	andeq	r4, r1, r4, lsr #19
   15de4:	andeq	r4, r1, r4, lsr #17
   15de8:			; <UNDEFINED> instruction: 0x000148bc
   15dec:	ldrdeq	r4, [r1], -r0
   15df0:	andvs	r0, r0, r8, lsl r0
   15df4:	ldrdeq	r9, [r3], -r8
   15df8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15dfc:	sub	sp, sp, #44	; 0x2c
   15e00:	add	r9, sp, #40	; 0x28
   15e04:	mov	ip, #0
   15e08:	mov	r4, ip
   15e0c:	str	r0, [sp, #12]
   15e10:	mov	sl, r1
   15e14:	mov	r7, r2
   15e18:	str	r3, [sp, #16]
   15e1c:	str	ip, [r9, #-4]!
   15e20:	mov	r6, ip
   15e24:	ldrb	r8, [sp, #80]	; 0x50
   15e28:	mov	fp, #1
   15e2c:	b	15e38 <__assert_fail@plt+0x4294>
   15e30:	strb	r5, [r6, r4]
   15e34:	add	r4, r4, #1
   15e38:	mov	r0, r7
   15e3c:	bl	11b74 <getc@plt>
   15e40:	cmn	r0, #1
   15e44:	mov	r5, r0
   15e48:	beq	15e78 <__assert_fail@plt+0x42d4>
   15e4c:	ldr	r3, [sp, #36]	; 0x24
   15e50:	cmp	r4, r3
   15e54:	bne	15e30 <__assert_fail@plt+0x428c>
   15e58:	mov	r0, r6
   15e5c:	str	fp, [sp]
   15e60:	mvn	r3, #0
   15e64:	mov	r2, #1
   15e68:	mov	r1, r9
   15e6c:	bl	34a24 <__assert_fail@plt+0x22e80>
   15e70:	mov	r6, r0
   15e74:	b	15e30 <__assert_fail@plt+0x428c>
   15e78:	mov	r0, r7
   15e7c:	bl	1176c <ferror@plt>
   15e80:	subs	r5, r0, #0
   15e84:	bne	15fd4 <__assert_fail@plt+0x4430>
   15e88:	bl	119b8 <__errno_location@plt>
   15e8c:	str	r5, [sp, #24]
   15e90:	str	r0, [sp, #20]
   15e94:	mov	r0, r6
   15e98:	add	r1, r4, #1
   15e9c:	bl	34850 <__assert_fail@plt+0x22cac>
   15ea0:	cmp	r4, #0
   15ea4:	mov	fp, r0
   15ea8:	strb	r8, [r0, r4]
   15eac:	beq	15fbc <__assert_fail@plt+0x4418>
   15eb0:	add	r3, r0, r4
   15eb4:	mov	r0, #8
   15eb8:	ldrb	r3, [r3, #-1]
   15ebc:	cmp	r3, r8
   15ec0:	addne	r4, r4, #1
   15ec4:	bl	347e0 <__assert_fail@plt+0x22c3c>
   15ec8:	ldr	r3, [sl, #4]
   15ecc:	add	r4, fp, r4
   15ed0:	cmp	fp, r4
   15ed4:	stm	r0, {r3, fp}
   15ed8:	str	r0, [sl, #4]
   15edc:	bcs	15f80 <__assert_fail@plt+0x43dc>
   15ee0:	lsl	r3, r8, #1
   15ee4:	mov	r7, fp
   15ee8:	str	r5, [sp, #28]
   15eec:	mov	r9, r3
   15ef0:	b	15f00 <__assert_fail@plt+0x435c>
   15ef4:	cmp	r4, r6
   15ef8:	mov	fp, r6
   15efc:	bls	15f7c <__assert_fail@plt+0x43d8>
   15f00:	ldrb	r0, [fp]
   15f04:	mov	r5, fp
   15f08:	add	r6, fp, #1
   15f0c:	cmp	r0, r8
   15f10:	bne	15ef4 <__assert_fail@plt+0x4350>
   15f14:	bl	11964 <__ctype_b_loc@plt>
   15f18:	ldr	ip, [r0]
   15f1c:	ldrh	r0, [ip, r9]
   15f20:	tst	r0, #8192	; 0x2000
   15f24:	beq	15f94 <__assert_fail@plt+0x43f0>
   15f28:	cmp	r7, fp
   15f2c:	beq	15f6c <__assert_fail@plt+0x43c8>
   15f30:	ldrb	r0, [r6, #-2]
   15f34:	lsl	r0, r0, #1
   15f38:	ldrh	r0, [ip, r0]
   15f3c:	tst	r0, #8192	; 0x2000
   15f40:	subne	r3, fp, #1
   15f44:	bne	15f60 <__assert_fail@plt+0x43bc>
   15f48:	b	15f94 <__assert_fail@plt+0x43f0>
   15f4c:	ldrb	r2, [r3, #-1]!
   15f50:	lsl	r2, r2, #1
   15f54:	ldrh	r2, [ip, r2]
   15f58:	tst	r2, #8192	; 0x2000
   15f5c:	beq	15f94 <__assert_fail@plt+0x43f0>
   15f60:	cmp	r7, r3
   15f64:	mov	r5, r3
   15f68:	bne	15f4c <__assert_fail@plt+0x43a8>
   15f6c:	mov	r7, r6
   15f70:	cmp	r4, r6
   15f74:	mov	fp, r6
   15f78:	bhi	15f00 <__assert_fail@plt+0x435c>
   15f7c:	ldr	r5, [sp, #28]
   15f80:	ldr	r3, [sp, #20]
   15f84:	ldr	r0, [sp, #24]
   15f88:	str	r5, [r3]
   15f8c:	add	sp, sp, #44	; 0x2c
   15f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f94:	mov	r3, #0
   15f98:	strb	r3, [r5]
   15f9c:	mov	r1, r7
   15fa0:	ldr	r3, [sp, #84]	; 0x54
   15fa4:	ldr	r2, [sp, #16]
   15fa8:	mov	r0, sl
   15fac:	ldr	ip, [sp, #12]
   15fb0:	blx	ip
   15fb4:	mov	r7, r6
   15fb8:	b	15f70 <__assert_fail@plt+0x43cc>
   15fbc:	mov	r0, #8
   15fc0:	bl	347e0 <__assert_fail@plt+0x22c3c>
   15fc4:	ldr	r3, [sl, #4]
   15fc8:	str	r0, [sl, #4]
   15fcc:	stm	r0, {r3, fp}
   15fd0:	b	15f80 <__assert_fail@plt+0x43dc>
   15fd4:	bl	119b8 <__errno_location@plt>
   15fd8:	ldr	r5, [r0]
   15fdc:	str	r0, [sp, #20]
   15fe0:	adds	r3, r5, #0
   15fe4:	mvnne	r3, #0
   15fe8:	str	r3, [sp, #24]
   15fec:	b	15e94 <__assert_fail@plt+0x42f0>
   15ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff4:	sub	sp, sp, #44	; 0x2c
   15ff8:	mov	r4, r2
   15ffc:	str	r0, [sp, #12]
   16000:	str	r1, [sp, #8]
   16004:	mov	r0, r2
   16008:	ldr	r1, [pc, #1068]	; 1643c <__assert_fail@plt+0x4898>
   1600c:	str	r3, [sp, #16]
   16010:	bl	1170c <strcmp@plt>
   16014:	ldrb	r6, [sp, #80]	; 0x50
   16018:	cmp	r0, #0
   1601c:	beq	1621c <__assert_fail@plt+0x4678>
   16020:	mov	r0, r4
   16024:	ldr	r1, [pc, #1044]	; 16440 <__assert_fail@plt+0x489c>
   16028:	bl	11afc <fopen64@plt>
   1602c:	subs	r8, r0, #0
   16030:	beq	1642c <__assert_fail@plt+0x4888>
   16034:	add	r9, sp, #40	; 0x28
   16038:	mov	r3, #0
   1603c:	mov	r4, r3
   16040:	str	r3, [r9, #-4]!
   16044:	mov	r7, r3
   16048:	mov	fp, #1
   1604c:	mvn	sl, #0
   16050:	b	1605c <__assert_fail@plt+0x44b8>
   16054:	strb	r5, [r7, r4]
   16058:	add	r4, r4, #1
   1605c:	mov	r0, r8
   16060:	bl	11b74 <getc@plt>
   16064:	cmn	r0, #1
   16068:	mov	r5, r0
   1606c:	beq	1609c <__assert_fail@plt+0x44f8>
   16070:	ldr	r3, [sp, #36]	; 0x24
   16074:	cmp	r3, r4
   16078:	bne	16054 <__assert_fail@plt+0x44b0>
   1607c:	mov	r0, r7
   16080:	str	fp, [sp]
   16084:	mov	r3, sl
   16088:	mov	r2, #1
   1608c:	mov	r1, r9
   16090:	bl	34a24 <__assert_fail@plt+0x22e80>
   16094:	mov	r7, r0
   16098:	b	16054 <__assert_fail@plt+0x44b0>
   1609c:	mov	r0, r8
   160a0:	bl	1176c <ferror@plt>
   160a4:	subs	r9, r0, #0
   160a8:	bne	161dc <__assert_fail@plt+0x4638>
   160ac:	bl	119b8 <__errno_location@plt>
   160b0:	str	r9, [sp, #20]
   160b4:	str	r0, [sp, #24]
   160b8:	mov	r0, r7
   160bc:	add	r1, r4, #1
   160c0:	bl	34850 <__assert_fail@plt+0x22cac>
   160c4:	cmp	r4, #0
   160c8:	mov	r7, r0
   160cc:	strb	r6, [r0, r4]
   160d0:	beq	163a8 <__assert_fail@plt+0x4804>
   160d4:	add	r3, r0, r4
   160d8:	mov	r0, #8
   160dc:	ldrb	r3, [r3, #-1]
   160e0:	cmp	r3, r6
   160e4:	addne	r4, r4, #1
   160e8:	bl	347e0 <__assert_fail@plt+0x22c3c>
   160ec:	ldr	r2, [sp, #8]
   160f0:	add	r4, r7, r4
   160f4:	cmp	r7, r4
   160f8:	ldr	r3, [r2, #4]
   160fc:	str	r0, [r2, #4]
   16100:	stm	r0, {r3, r7}
   16104:	bcs	161b4 <__assert_fail@plt+0x4610>
   16108:	lsl	r3, r6, #1
   1610c:	mov	fp, r3
   16110:	mov	r3, r6
   16114:	mov	r5, r7
   16118:	mov	r6, r7
   1611c:	str	r8, [sp, #28]
   16120:	mov	r7, r3
   16124:	b	16134 <__assert_fail@plt+0x4590>
   16128:	cmp	r4, sl
   1612c:	mov	r5, sl
   16130:	bls	161b0 <__assert_fail@plt+0x460c>
   16134:	ldrb	r0, [r5]
   16138:	mov	r8, r5
   1613c:	add	sl, r5, #1
   16140:	cmp	r0, r7
   16144:	bne	16128 <__assert_fail@plt+0x4584>
   16148:	bl	11964 <__ctype_b_loc@plt>
   1614c:	ldr	ip, [r0]
   16150:	ldrh	r0, [ip, fp]
   16154:	tst	r0, #8192	; 0x2000
   16158:	beq	161f8 <__assert_fail@plt+0x4654>
   1615c:	cmp	r5, r6
   16160:	beq	161a0 <__assert_fail@plt+0x45fc>
   16164:	ldrb	r0, [sl, #-2]
   16168:	lsl	r0, r0, #1
   1616c:	ldrh	r0, [ip, r0]
   16170:	tst	r0, #8192	; 0x2000
   16174:	subne	r5, r5, #1
   16178:	bne	16194 <__assert_fail@plt+0x45f0>
   1617c:	b	161f8 <__assert_fail@plt+0x4654>
   16180:	ldrb	r3, [r5, #-1]!
   16184:	lsl	r3, r3, #1
   16188:	ldrh	r3, [ip, r3]
   1618c:	tst	r3, #8192	; 0x2000
   16190:	beq	161f8 <__assert_fail@plt+0x4654>
   16194:	cmp	r5, r6
   16198:	mov	r8, r5
   1619c:	bne	16180 <__assert_fail@plt+0x45dc>
   161a0:	mov	r6, sl
   161a4:	cmp	r4, sl
   161a8:	mov	r5, sl
   161ac:	bhi	16134 <__assert_fail@plt+0x4590>
   161b0:	ldr	r8, [sp, #28]
   161b4:	ldr	r4, [sp, #24]
   161b8:	mov	r0, r8
   161bc:	str	r9, [r4]
   161c0:	bl	16448 <__assert_fail@plt+0x48a4>
   161c4:	cmp	r0, #0
   161c8:	bne	1642c <__assert_fail@plt+0x4888>
   161cc:	ldr	r0, [sp, #20]
   161d0:	str	r9, [r4]
   161d4:	add	sp, sp, #44	; 0x2c
   161d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   161dc:	bl	119b8 <__errno_location@plt>
   161e0:	ldr	r9, [r0]
   161e4:	str	r0, [sp, #24]
   161e8:	adds	r3, r9, #0
   161ec:	mvnne	r3, #0
   161f0:	str	r3, [sp, #20]
   161f4:	b	160b8 <__assert_fail@plt+0x4514>
   161f8:	mov	r3, #0
   161fc:	strb	r3, [r8]
   16200:	mov	r1, r6
   16204:	ldr	r2, [sp, #16]
   16208:	ldr	r0, [sp, #8]
   1620c:	ldr	r3, [sp, #12]
   16210:	blx	r3
   16214:	mov	r6, sl
   16218:	b	161a4 <__assert_fail@plt+0x4600>
   1621c:	ldr	r3, [pc, #544]	; 16444 <__assert_fail@plt+0x48a0>
   16220:	add	r9, sp, #40	; 0x28
   16224:	mov	r4, r0
   16228:	ldr	r8, [r3]
   1622c:	str	r0, [r9, #-4]!
   16230:	mov	r7, r0
   16234:	mov	fp, #1
   16238:	mvn	sl, #0
   1623c:	b	16248 <__assert_fail@plt+0x46a4>
   16240:	strb	r5, [r7, r4]
   16244:	add	r4, r4, #1
   16248:	mov	r0, r8
   1624c:	bl	11b74 <getc@plt>
   16250:	cmn	r0, #1
   16254:	mov	r5, r0
   16258:	beq	16288 <__assert_fail@plt+0x46e4>
   1625c:	ldr	r3, [sp, #36]	; 0x24
   16260:	cmp	r3, r4
   16264:	bne	16240 <__assert_fail@plt+0x469c>
   16268:	mov	r0, r7
   1626c:	str	fp, [sp]
   16270:	mov	r3, sl
   16274:	mov	r2, #1
   16278:	mov	r1, r9
   1627c:	bl	34a24 <__assert_fail@plt+0x22e80>
   16280:	mov	r7, r0
   16284:	b	16240 <__assert_fail@plt+0x469c>
   16288:	mov	r0, r8
   1628c:	bl	1176c <ferror@plt>
   16290:	subs	r5, r0, #0
   16294:	bne	163c4 <__assert_fail@plt+0x4820>
   16298:	bl	119b8 <__errno_location@plt>
   1629c:	str	r5, [sp, #20]
   162a0:	str	r0, [sp, #24]
   162a4:	mov	r0, r7
   162a8:	add	r1, r4, #1
   162ac:	bl	34850 <__assert_fail@plt+0x22cac>
   162b0:	cmp	r4, #0
   162b4:	mov	sl, r0
   162b8:	strb	r6, [r0, r4]
   162bc:	beq	16404 <__assert_fail@plt+0x4860>
   162c0:	add	r3, r0, r4
   162c4:	mov	r0, #8
   162c8:	ldrb	r7, [r3, #-1]
   162cc:	bl	347e0 <__assert_fail@plt+0x22c3c>
   162d0:	ldr	r2, [sp, #8]
   162d4:	cmp	r7, r6
   162d8:	addne	r4, r4, #1
   162dc:	add	r7, sl, r4
   162e0:	ldr	r3, [r2, #4]
   162e4:	cmp	sl, r7
   162e8:	stm	r0, {r3, sl}
   162ec:	str	r0, [r2, #4]
   162f0:	bcs	16394 <__assert_fail@plt+0x47f0>
   162f4:	mov	r3, r6
   162f8:	lsl	r8, r6, #1
   162fc:	mov	r4, sl
   16300:	mov	r6, sl
   16304:	mov	sl, r3
   16308:	b	16318 <__assert_fail@plt+0x4774>
   1630c:	cmp	r7, r9
   16310:	mov	r4, r9
   16314:	bls	16394 <__assert_fail@plt+0x47f0>
   16318:	ldrb	r0, [r4]
   1631c:	mov	fp, r4
   16320:	add	r9, r4, #1
   16324:	cmp	r0, sl
   16328:	bne	1630c <__assert_fail@plt+0x4768>
   1632c:	bl	11964 <__ctype_b_loc@plt>
   16330:	ldr	ip, [r0]
   16334:	ldrh	r0, [ip, r8]
   16338:	tst	r0, #8192	; 0x2000
   1633c:	beq	163e0 <__assert_fail@plt+0x483c>
   16340:	cmp	r4, r6
   16344:	beq	16384 <__assert_fail@plt+0x47e0>
   16348:	ldrb	r0, [r9, #-2]
   1634c:	lsl	r0, r0, #1
   16350:	ldrh	r0, [ip, r0]
   16354:	tst	r0, #8192	; 0x2000
   16358:	subne	r3, r4, #1
   1635c:	bne	16378 <__assert_fail@plt+0x47d4>
   16360:	b	163e0 <__assert_fail@plt+0x483c>
   16364:	ldrb	r2, [r3, #-1]!
   16368:	lsl	r2, r2, #1
   1636c:	ldrh	r2, [ip, r2]
   16370:	tst	r2, #8192	; 0x2000
   16374:	beq	163e0 <__assert_fail@plt+0x483c>
   16378:	cmp	r3, r6
   1637c:	mov	fp, r3
   16380:	bne	16364 <__assert_fail@plt+0x47c0>
   16384:	mov	r6, r9
   16388:	cmp	r7, r9
   1638c:	mov	r4, r9
   16390:	bhi	16318 <__assert_fail@plt+0x4774>
   16394:	ldr	r3, [sp, #24]
   16398:	ldr	r0, [sp, #20]
   1639c:	str	r5, [r3]
   163a0:	add	sp, sp, #44	; 0x2c
   163a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163a8:	mov	r0, #8
   163ac:	bl	347e0 <__assert_fail@plt+0x22c3c>
   163b0:	ldr	r2, [sp, #8]
   163b4:	ldr	r3, [r2, #4]
   163b8:	str	r0, [r2, #4]
   163bc:	stm	r0, {r3, r7}
   163c0:	b	161b4 <__assert_fail@plt+0x4610>
   163c4:	bl	119b8 <__errno_location@plt>
   163c8:	ldr	r5, [r0]
   163cc:	str	r0, [sp, #24]
   163d0:	adds	r3, r5, #0
   163d4:	mvnne	r3, #0
   163d8:	str	r3, [sp, #20]
   163dc:	b	162a4 <__assert_fail@plt+0x4700>
   163e0:	mov	r3, #0
   163e4:	strb	r3, [fp]
   163e8:	mov	r1, r6
   163ec:	ldr	r2, [sp, #16]
   163f0:	ldr	r0, [sp, #8]
   163f4:	ldr	r3, [sp, #12]
   163f8:	blx	r3
   163fc:	mov	r6, r9
   16400:	b	16388 <__assert_fail@plt+0x47e4>
   16404:	mov	r0, #8
   16408:	bl	347e0 <__assert_fail@plt+0x22c3c>
   1640c:	ldr	r2, [sp, #8]
   16410:	ldr	r3, [r2, #4]
   16414:	stm	r0, {r3, sl}
   16418:	ldr	r3, [sp, #24]
   1641c:	str	r0, [r2, #4]
   16420:	ldr	r0, [sp, #20]
   16424:	str	r5, [r3]
   16428:	b	163a0 <__assert_fail@plt+0x47fc>
   1642c:	mvn	r3, #0
   16430:	str	r3, [sp, #20]
   16434:	mov	r0, r3
   16438:	b	161d4 <__assert_fail@plt+0x4630>
   1643c:	andeq	r9, r3, ip, lsl r8
   16440:	strdeq	r9, [r3], -ip
   16444:	andeq	fp, r4, r8, lsr r2
   16448:	push	{r4, r5, lr}
   1644c:	sub	sp, sp, #12
   16450:	mov	r4, r0
   16454:	bl	11a0c <fileno@plt>
   16458:	cmp	r0, #0
   1645c:	mov	r0, r4
   16460:	blt	164dc <__assert_fail@plt+0x4938>
   16464:	bl	1191c <__freading@plt>
   16468:	cmp	r0, #0
   1646c:	bne	164a8 <__assert_fail@plt+0x4904>
   16470:	mov	r0, r4
   16474:	bl	164e8 <__assert_fail@plt+0x4944>
   16478:	cmp	r0, #0
   1647c:	beq	164d8 <__assert_fail@plt+0x4934>
   16480:	bl	119b8 <__errno_location@plt>
   16484:	mov	r5, r0
   16488:	mov	r0, r4
   1648c:	ldr	r4, [r5]
   16490:	bl	11a30 <fclose@plt>
   16494:	cmp	r4, #0
   16498:	mvnne	r0, #0
   1649c:	strne	r4, [r5]
   164a0:	add	sp, sp, #12
   164a4:	pop	{r4, r5, pc}
   164a8:	mov	r0, r4
   164ac:	bl	11a0c <fileno@plt>
   164b0:	mov	r3, #1
   164b4:	str	r3, [sp]
   164b8:	mov	r2, #0
   164bc:	mov	r3, #0
   164c0:	bl	11874 <lseek64@plt>
   164c4:	mvn	r3, #0
   164c8:	mvn	r2, #0
   164cc:	cmp	r1, r3
   164d0:	cmpeq	r0, r2
   164d4:	bne	16470 <__assert_fail@plt+0x48cc>
   164d8:	mov	r0, r4
   164dc:	add	sp, sp, #12
   164e0:	pop	{r4, r5, lr}
   164e4:	b	11a30 <fclose@plt>
   164e8:	push	{r4, lr}
   164ec:	subs	r4, r0, #0
   164f0:	sub	sp, sp, #8
   164f4:	beq	16510 <__assert_fail@plt+0x496c>
   164f8:	bl	1191c <__freading@plt>
   164fc:	cmp	r0, #0
   16500:	beq	16510 <__assert_fail@plt+0x496c>
   16504:	ldr	r3, [r4]
   16508:	tst	r3, #256	; 0x100
   1650c:	bne	16520 <__assert_fail@plt+0x497c>
   16510:	mov	r0, r4
   16514:	add	sp, sp, #8
   16518:	pop	{r4, lr}
   1651c:	b	11730 <fflush@plt>
   16520:	mov	r3, #1
   16524:	str	r3, [sp]
   16528:	mov	r2, #0
   1652c:	mov	r3, #0
   16530:	mov	r0, r4
   16534:	bl	18758 <__assert_fail@plt+0x6bb4>
   16538:	mov	r0, r4
   1653c:	add	sp, sp, #8
   16540:	pop	{r4, lr}
   16544:	b	11730 <fflush@plt>
   16548:	cmp	r2, #0
   1654c:	bxeq	lr
   16550:	push	{r4, r5, r6, r7, r8, lr}
   16554:	mov	r6, r0
   16558:	mov	r4, r1
   1655c:	add	r5, r1, r2
   16560:	bl	11934 <__ctype_toupper_loc@plt>
   16564:	mov	r7, r0
   16568:	ldrb	r2, [r4], #1
   1656c:	ldr	r3, [r7]
   16570:	mov	r1, r6
   16574:	ldr	r0, [r3, r2, lsl #2]
   16578:	bl	11a90 <fputc@plt>
   1657c:	cmp	r4, r5
   16580:	bne	16568 <__assert_fail@plt+0x49c4>
   16584:	pop	{r4, r5, r6, r7, r8, pc}
   16588:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1658c:	sub	sp, sp, #1104	; 0x450
   16590:	sub	sp, sp, #12
   16594:	mov	r4, r2
   16598:	str	r2, [sp, #32]
   1659c:	mov	r9, r1
   165a0:	str	r3, [sp, #52]	; 0x34
   165a4:	mov	sl, r0
   165a8:	bl	119b8 <__errno_location@plt>
   165ac:	ldr	r3, [r4, #40]	; 0x28
   165b0:	ldr	r2, [r4, #8]
   165b4:	mov	r1, r3
   165b8:	ldr	r3, [pc, #3800]	; 17498 <__assert_fail@plt+0x58f4>
   165bc:	mov	ip, r2
   165c0:	str	r2, [sp, #48]	; 0x30
   165c4:	subs	r2, r1, #0
   165c8:	moveq	r2, r3
   165cc:	cmp	ip, #12
   165d0:	str	r2, [sp, #56]	; 0x38
   165d4:	ldr	r7, [sp, #1156]	; 0x484
   165d8:	mov	r2, ip
   165dc:	ldr	r3, [r0]
   165e0:	str	r0, [sp, #40]	; 0x28
   165e4:	str	r3, [sp, #60]	; 0x3c
   165e8:	subgt	r3, ip, #12
   165ec:	strgt	r3, [sp, #48]	; 0x30
   165f0:	bgt	16600 <__assert_fail@plt+0x4a5c>
   165f4:	subs	r3, ip, #0
   165f8:	moveq	r3, #12
   165fc:	str	r3, [sp, #48]	; 0x30
   16600:	ldrb	r0, [r9]
   16604:	cmp	r0, #0
   16608:	beq	17fb8 <__assert_fail@plt+0x6414>
   1660c:	ldr	fp, [pc, #3720]	; 1749c <__assert_fail@plt+0x58f8>
   16610:	mov	r3, #0
   16614:	str	r3, [sp, #24]
   16618:	cmp	r0, #37	; 0x25
   1661c:	beq	166dc <__assert_fail@plt+0x4b38>
   16620:	bic	r4, r7, r7, asr #31
   16624:	ldr	r3, [sp, #24]
   16628:	cmp	r4, #1
   1662c:	movcs	r6, r4
   16630:	movcc	r6, #1
   16634:	mvn	r3, r3
   16638:	cmp	r6, r3
   1663c:	bcs	166b8 <__assert_fail@plt+0x4b14>
   16640:	cmp	sl, #0
   16644:	beq	16680 <__assert_fail@plt+0x4adc>
   16648:	cmp	r4, #1
   1664c:	ble	16678 <__assert_fail@plt+0x4ad4>
   16650:	sub	r4, r4, #1
   16654:	mov	r7, #0
   16658:	mov	r5, #32
   1665c:	add	r7, r7, #1
   16660:	mov	r1, sl
   16664:	mov	r0, r5
   16668:	bl	11a90 <fputc@plt>
   1666c:	cmp	r4, r7
   16670:	bne	1665c <__assert_fail@plt+0x4ab8>
   16674:	ldrb	r0, [r9]
   16678:	mov	r1, sl
   1667c:	bl	11a90 <fputc@plt>
   16680:	ldr	r3, [sp, #24]
   16684:	mov	r4, r9
   16688:	add	r3, r3, r6
   1668c:	str	r3, [sp, #24]
   16690:	ldrb	r0, [r4, #1]
   16694:	add	r9, r4, #1
   16698:	mvn	r7, #0
   1669c:	cmp	r0, #0
   166a0:	bne	16618 <__assert_fail@plt+0x4a74>
   166a4:	ldr	r3, [sp, #40]	; 0x28
   166a8:	ldr	r2, [sp, #60]	; 0x3c
   166ac:	ldr	r0, [sp, #24]
   166b0:	str	r2, [r3]
   166b4:	b	166d0 <__assert_fail@plt+0x4b2c>
   166b8:	ldr	r2, [sp, #40]	; 0x28
   166bc:	mov	r3, #34	; 0x22
   166c0:	str	r3, [r2]
   166c4:	mov	r3, #0
   166c8:	mov	r0, r3
   166cc:	str	r3, [sp, #24]
   166d0:	add	sp, sp, #1104	; 0x450
   166d4:	add	sp, sp, #12
   166d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166dc:	ldr	r3, [sp, #52]	; 0x34
   166e0:	mov	r4, r9
   166e4:	mov	r5, #0
   166e8:	str	r5, [sp, #28]
   166ec:	str	r3, [sp, #36]	; 0x24
   166f0:	ldrb	r1, [r4, #1]!
   166f4:	sub	r3, r1, #35	; 0x23
   166f8:	mov	r0, r1
   166fc:	cmp	r3, #60	; 0x3c
   16700:	ldrls	pc, [pc, r3, lsl #2]
   16704:	b	16818 <__assert_fail@plt+0x4c74>
   16708:	andeq	r6, r1, r0, lsl r8
   1670c:	andeq	r6, r1, r8, lsl r8
   16710:	andeq	r6, r1, r8, lsl r8
   16714:	andeq	r6, r1, r8, lsl r8
   16718:	andeq	r6, r1, r8, lsl r8
   1671c:	andeq	r6, r1, r8, lsl r8
   16720:	andeq	r6, r1, r8, lsl r8
   16724:	andeq	r6, r1, r8, lsl r8
   16728:	andeq	r6, r1, r8, lsl #16
   1672c:	andeq	r6, r1, r8, lsl r8
   16730:	andeq	r6, r1, r8, lsl #16
   16734:	andeq	r6, r1, r8, lsl r8
   16738:	andeq	r6, r1, r8, lsl r8
   1673c:	andeq	r6, r1, r8, lsl #16
   16740:	andeq	r6, r1, r8, lsl r8
   16744:	andeq	r6, r1, r8, lsl r8
   16748:	andeq	r6, r1, r8, lsl r8
   1674c:	andeq	r6, r1, r8, lsl r8
   16750:	andeq	r6, r1, r8, lsl r8
   16754:	andeq	r6, r1, r8, lsl r8
   16758:	andeq	r6, r1, r8, lsl r8
   1675c:	andeq	r6, r1, r8, lsl r8
   16760:	andeq	r6, r1, r8, lsl r8
   16764:	andeq	r6, r1, r8, lsl r8
   16768:	andeq	r6, r1, r8, lsl r8
   1676c:	andeq	r6, r1, r8, lsl r8
   16770:	andeq	r6, r1, r8, lsl r8
   16774:	andeq	r6, r1, r8, lsl r8
   16778:	andeq	r6, r1, r8, lsl r8
   1677c:	andeq	r6, r1, r8, lsl r8
   16780:	andeq	r6, r1, r8, lsl r8
   16784:	andeq	r6, r1, r8, lsl r8
   16788:	andeq	r6, r1, r8, lsl r8
   1678c:	andeq	r6, r1, r8, lsl r8
   16790:	andeq	r6, r1, r8, lsl r8
   16794:	andeq	r6, r1, r8, lsl r8
   16798:	andeq	r6, r1, r8, lsl r8
   1679c:	andeq	r6, r1, r8, lsl r8
   167a0:	andeq	r6, r1, r8, lsl r8
   167a4:	andeq	r6, r1, r8, lsl r8
   167a8:	andeq	r6, r1, r8, lsl r8
   167ac:	andeq	r6, r1, r8, lsl r8
   167b0:	andeq	r6, r1, r8, lsl r8
   167b4:	andeq	r6, r1, r8, lsl r8
   167b8:	andeq	r6, r1, r8, lsl r8
   167bc:	andeq	r6, r1, r8, lsl r8
   167c0:	andeq	r6, r1, r8, lsl r8
   167c4:	andeq	r6, r1, r8, lsl r8
   167c8:	andeq	r6, r1, r8, lsl r8
   167cc:	andeq	r6, r1, r8, lsl r8
   167d0:	andeq	r6, r1, r8, lsl r8
   167d4:	andeq	r6, r1, r8, lsl r8
   167d8:	andeq	r6, r1, r8, lsl r8
   167dc:	andeq	r6, r1, r8, lsl r8
   167e0:	andeq	r6, r1, r8, lsl r8
   167e4:	andeq	r6, r1, r8, lsl r8
   167e8:	andeq	r6, r1, r8, lsl r8
   167ec:	andeq	r6, r1, r8, lsl r8
   167f0:	andeq	r6, r1, r8, lsl r8
   167f4:	strdeq	r6, [r1], -ip
   167f8:	andeq	r6, r1, r8, lsl #16
   167fc:	mov	r3, #1
   16800:	str	r3, [sp, #36]	; 0x24
   16804:	b	166f0 <__assert_fail@plt+0x4b4c>
   16808:	str	r1, [sp, #28]
   1680c:	b	166f0 <__assert_fail@plt+0x4b4c>
   16810:	mov	r5, #1
   16814:	b	166f0 <__assert_fail@plt+0x4b4c>
   16818:	sub	r3, r1, #48	; 0x30
   1681c:	cmp	r3, #9
   16820:	bhi	16864 <__assert_fail@plt+0x4cc0>
   16824:	ldr	r8, [pc, #3188]	; 174a0 <__assert_fail@plt+0x58fc>
   16828:	mov	r7, #0
   1682c:	mvn	r6, #-2147483648	; 0x80000000
   16830:	cmp	r7, #0
   16834:	blt	16b78 <__assert_fail@plt+0x4fd4>
   16838:	cmp	r7, r8
   1683c:	ble	16b94 <__assert_fail@plt+0x4ff0>
   16840:	mov	r3, r4
   16844:	ldrb	r1, [r3, #1]
   16848:	add	r4, r3, #1
   1684c:	mov	r3, r4
   16850:	sub	r2, r1, #48	; 0x30
   16854:	cmp	r2, #9
   16858:	bls	16844 <__assert_fail@plt+0x4ca0>
   1685c:	mov	r0, r1
   16860:	mvn	r7, #-2147483648	; 0x80000000
   16864:	cmp	r1, #69	; 0x45
   16868:	beq	16a70 <__assert_fail@plt+0x4ecc>
   1686c:	cmp	r1, #79	; 0x4f
   16870:	movne	r8, #0
   16874:	beq	16a70 <__assert_fail@plt+0x4ecc>
   16878:	cmp	r1, #122	; 0x7a
   1687c:	ldrls	pc, [pc, r1, lsl #2]
   16880:	b	16a88 <__assert_fail@plt+0x4ee4>
   16884:	andeq	r6, r1, r4, lsl #21
   16888:	andeq	r6, r1, r8, lsl #21
   1688c:	andeq	r6, r1, r8, lsl #21
   16890:	andeq	r6, r1, r8, lsl #21
   16894:	andeq	r6, r1, r8, lsl #21
   16898:	andeq	r6, r1, r8, lsl #21
   1689c:	andeq	r6, r1, r8, lsl #21
   168a0:	andeq	r6, r1, r8, lsl #21
   168a4:	andeq	r6, r1, r8, lsl #21
   168a8:	andeq	r6, r1, r8, lsl #21
   168ac:	andeq	r6, r1, r8, lsl #21
   168b0:	andeq	r6, r1, r8, lsl #21
   168b4:	andeq	r6, r1, r8, lsl #21
   168b8:	andeq	r6, r1, r8, lsl #21
   168bc:	andeq	r6, r1, r8, lsl #21
   168c0:	andeq	r6, r1, r8, lsl #21
   168c4:	andeq	r6, r1, r8, lsl #21
   168c8:	andeq	r6, r1, r8, lsl #21
   168cc:	andeq	r6, r1, r8, lsl #21
   168d0:	andeq	r6, r1, r8, lsl #21
   168d4:	andeq	r6, r1, r8, lsl #21
   168d8:	andeq	r6, r1, r8, lsl #21
   168dc:	andeq	r6, r1, r8, lsl #21
   168e0:	andeq	r6, r1, r8, lsl #21
   168e4:	andeq	r6, r1, r8, lsl #21
   168e8:	andeq	r6, r1, r8, lsl #21
   168ec:	andeq	r6, r1, r8, lsl #21
   168f0:	andeq	r6, r1, r8, lsl #21
   168f4:	andeq	r6, r1, r8, lsl #21
   168f8:	andeq	r6, r1, r8, lsl #21
   168fc:	andeq	r6, r1, r8, lsl #21
   16900:	andeq	r6, r1, r8, lsl #21
   16904:	andeq	r6, r1, r8, lsl #21
   16908:	andeq	r6, r1, r8, lsl #21
   1690c:	andeq	r6, r1, r8, lsl #21
   16910:	andeq	r6, r1, r8, lsl #21
   16914:	andeq	r6, r1, r8, lsl #21
   16918:	andeq	r7, r1, r8, lsr fp
   1691c:	andeq	r6, r1, r8, lsl #21
   16920:	andeq	r6, r1, r8, lsl #21
   16924:	andeq	r6, r1, r8, lsl #21
   16928:	andeq	r6, r1, r8, lsl #21
   1692c:	andeq	r6, r1, r8, lsl #21
   16930:	andeq	r6, r1, r8, lsl #21
   16934:	andeq	r6, r1, r8, lsl #21
   16938:	andeq	r6, r1, r8, lsl #21
   1693c:	andeq	r6, r1, r8, lsl #21
   16940:	andeq	r6, r1, r8, lsl #21
   16944:	andeq	r6, r1, r8, lsl #21
   16948:	andeq	r6, r1, r8, lsl #21
   1694c:	andeq	r6, r1, r8, lsl #21
   16950:	andeq	r6, r1, r8, lsl #21
   16954:	andeq	r6, r1, r8, lsl #21
   16958:	andeq	r6, r1, r8, lsl #21
   1695c:	andeq	r6, r1, r8, lsl #21
   16960:	andeq	r6, r1, r8, lsl #21
   16964:	andeq	r6, r1, r8, lsl #21
   16968:	andeq	r6, r1, r8, lsl #21
   1696c:	andeq	r7, r1, r0, ror #24
   16970:	andeq	r6, r1, r8, lsl #21
   16974:	andeq	r6, r1, r8, lsl #21
   16978:	andeq	r6, r1, r8, lsl #21
   1697c:	andeq	r6, r1, r8, lsl #21
   16980:	andeq	r6, r1, r8, lsl #21
   16984:	andeq	r6, r1, r8, lsl #21
   16988:	andeq	r6, r1, r0, lsr lr
   1698c:	andeq	r6, r1, ip, lsr ip
   16990:	andeq	r7, r1, r0, ror sp
   16994:	andeq	r7, r1, r8, lsr r6
   16998:	andeq	r6, r1, r8, lsl #21
   1699c:	andeq	r7, r1, r0, lsl #10
   169a0:	andeq	r7, r1, r8, lsl r3
   169a4:	andeq	r7, r1, r0, lsl #6
   169a8:	andeq	r7, r1, ip, ror #5
   169ac:	andeq	r6, r1, r8, lsl #21
   169b0:	andeq	r6, r1, r8, lsl #21
   169b4:	andeq	r6, r1, r8, lsl #21
   169b8:	ldrdeq	r7, [r1], -r4
   169bc:	andeq	r7, r1, r8, ror #12
   169c0:	andeq	r6, r1, r8, lsl #21
   169c4:	muleq	r1, r0, lr
   169c8:	andeq	r6, r1, r8, lsl #21
   169cc:	ldrdeq	r7, [r1], -r8
   169d0:	andeq	r7, r1, r0, asr #25
   169d4:	andeq	r7, r1, r4, lsl ip
   169d8:	ldrdeq	r7, [r1], -ip
   169dc:	andeq	r7, r1, r8, lsl r3
   169e0:	andeq	r7, r1, r4, lsl #25
   169e4:	strdeq	r6, [r1], -ip
   169e8:	andeq	r7, r1, ip, lsl #26
   169ec:	strdeq	r7, [r1], -ip
   169f0:	andeq	r6, r1, r8, lsl #21
   169f4:	andeq	r6, r1, r8, lsl #21
   169f8:	andeq	r6, r1, r8, lsl #21
   169fc:	andeq	r6, r1, r8, lsl #21
   16a00:	andeq	r6, r1, r8, lsl #21
   16a04:	andeq	r6, r1, r8, lsl #21
   16a08:	andeq	r6, r1, r0, lsr lr
   16a0c:	andeq	r7, r1, r8, lsl #21
   16a10:	strdeq	r6, [r1], -ip
   16a14:			; <UNDEFINED> instruction: 0x000179b8
   16a18:	muleq	r1, r0, r9
   16a1c:	andeq	r6, r1, r8, lsl #21
   16a20:	andeq	r7, r1, r8, lsl r3
   16a24:	andeq	r7, r1, r8, lsl #21
   16a28:	andeq	r6, r1, r8, lsl #21
   16a2c:	andeq	r7, r1, r4, lsr #24
   16a30:	strdeq	r7, [r1], -r8
   16a34:	andeq	r7, r1, r8, ror #25
   16a38:	muleq	r1, r8, r2
   16a3c:	andeq	r7, r1, r0, lsl #1
   16a40:	andeq	r6, r1, r8, lsl #21
   16a44:	andeq	r7, r1, r8, lsl fp
   16a48:	andeq	r7, r1, r4, ror #21
   16a4c:	andeq	r6, r1, r0, asr ip
   16a50:	andeq	r6, r1, r8, ror #28
   16a54:	andeq	r7, r1, r4, lsl #4
   16a58:	andeq	r7, r1, r0, lsr #2
   16a5c:	andeq	r6, r1, r8, lsl #21
   16a60:	andeq	r7, r1, r0, asr r6
   16a64:	strdeq	r6, [r1], -ip
   16a68:	andeq	r7, r1, ip, lsr #21
   16a6c:	ldrdeq	r7, [r1], -r0
   16a70:	ldrb	r1, [r4, #1]
   16a74:	mov	r8, r0
   16a78:	add	r4, r4, #1
   16a7c:	mov	r0, r1
   16a80:	b	16878 <__assert_fail@plt+0x4cd4>
   16a84:	sub	r4, r4, #1
   16a88:	ldr	r3, [sp, #28]
   16a8c:	sub	r5, r4, r9
   16a90:	subs	r3, r3, #45	; 0x2d
   16a94:	movne	r3, #1
   16a98:	cmp	r7, #0
   16a9c:	movlt	r3, #0
   16aa0:	cmp	r3, #0
   16aa4:	add	r5, r5, #1
   16aa8:	moveq	r7, #0
   16aac:	cmp	r5, r7
   16ab0:	movcs	r3, r5
   16ab4:	movcc	r3, r7
   16ab8:	mov	r2, r3
   16abc:	str	r3, [sp, #44]	; 0x2c
   16ac0:	ldr	r3, [sp, #24]
   16ac4:	mvn	r3, r3
   16ac8:	cmp	r2, r3
   16acc:	bcs	166b8 <__assert_fail@plt+0x4b14>
   16ad0:	cmp	sl, #0
   16ad4:	beq	16b64 <__assert_fail@plt+0x4fc0>
   16ad8:	cmp	r5, r7
   16adc:	bcs	16b24 <__assert_fail@plt+0x4f80>
   16ae0:	ldr	r3, [sp, #28]
   16ae4:	sub	r7, r7, r5
   16ae8:	cmp	r3, #43	; 0x2b
   16aec:	cmpne	r3, #48	; 0x30
   16af0:	moveq	r3, #1
   16af4:	movne	r3, #0
   16af8:	beq	16dd0 <__assert_fail@plt+0x522c>
   16afc:	cmp	r7, #0
   16b00:	movne	r8, r3
   16b04:	movne	r6, #32
   16b08:	beq	16b24 <__assert_fail@plt+0x4f80>
   16b0c:	add	r8, r8, #1
   16b10:	mov	r1, sl
   16b14:	mov	r0, r6
   16b18:	bl	11a90 <fputc@plt>
   16b1c:	cmp	r7, r8
   16b20:	bne	16b0c <__assert_fail@plt+0x4f68>
   16b24:	ldr	r3, [sp, #36]	; 0x24
   16b28:	cmp	r3, #0
   16b2c:	beq	16d7c <__assert_fail@plt+0x51d8>
   16b30:	cmp	r5, #0
   16b34:	beq	16b64 <__assert_fail@plt+0x4fc0>
   16b38:	bl	11934 <__ctype_toupper_loc@plt>
   16b3c:	mov	r6, r9
   16b40:	mov	r7, r0
   16b44:	ldrb	r2, [r6], #1
   16b48:	ldr	r3, [r7]
   16b4c:	mov	r1, sl
   16b50:	ldr	r0, [r3, r2, lsl #2]
   16b54:	bl	11a90 <fputc@plt>
   16b58:	sub	r3, r5, r6
   16b5c:	cmn	r9, r3
   16b60:	bne	16b44 <__assert_fail@plt+0x4fa0>
   16b64:	ldr	r3, [sp, #24]
   16b68:	ldr	r2, [sp, #44]	; 0x2c
   16b6c:	add	r3, r3, r2
   16b70:	str	r3, [sp, #24]
   16b74:	b	16690 <__assert_fail@plt+0x4aec>
   16b78:	cmn	r7, #1
   16b7c:	beq	16c10 <__assert_fail@plt+0x506c>
   16b80:	mov	r1, r7
   16b84:	mov	r0, #-2147483648	; 0x80000000
   16b88:	bl	37af0 <__assert_fail@plt+0x25f4c>
   16b8c:	cmp	r0, #9
   16b90:	ble	16840 <__assert_fail@plt+0x4c9c>
   16b94:	ldrb	r0, [r4]
   16b98:	add	r7, r7, r7, lsl #2
   16b9c:	cmp	r0, #47	; 0x2f
   16ba0:	lsl	r3, r7, #1
   16ba4:	mov	r1, r3
   16ba8:	ble	16c28 <__assert_fail@plt+0x5084>
   16bac:	cmp	r3, #0
   16bb0:	blt	16bec <__assert_fail@plt+0x5048>
   16bb4:	sub	r2, r0, #48	; 0x30
   16bb8:	sub	r2, r6, r2
   16bbc:	cmp	r3, r2
   16bc0:	movle	r2, #0
   16bc4:	movgt	r2, #1
   16bc8:	cmp	r2, #0
   16bcc:	beq	16bec <__assert_fail@plt+0x5048>
   16bd0:	ldrb	r1, [r4, #1]
   16bd4:	add	r3, r4, #1
   16bd8:	sub	r2, r1, #48	; 0x30
   16bdc:	cmp	r2, #9
   16be0:	bls	16844 <__assert_fail@plt+0x4ca0>
   16be4:	mov	r4, r3
   16be8:	b	1685c <__assert_fail@plt+0x4cb8>
   16bec:	ldrb	r1, [r4, #1]
   16bf0:	add	r3, r0, r3
   16bf4:	sub	r7, r3, #48	; 0x30
   16bf8:	sub	r3, r1, #48	; 0x30
   16bfc:	cmp	r3, #9
   16c00:	add	r4, r4, #1
   16c04:	bls	16830 <__assert_fail@plt+0x4c8c>
   16c08:	mov	r0, r1
   16c0c:	b	16864 <__assert_fail@plt+0x4cc0>
   16c10:	ldrb	r0, [r4]
   16c14:	cmp	r0, #47	; 0x2f
   16c18:	mvngt	r3, #9
   16c1c:	bgt	16bec <__assert_fail@plt+0x5048>
   16c20:	mvn	r1, #9
   16c24:	mov	r3, r1
   16c28:	rsb	r2, r0, #-2147483600	; 0x80000030
   16c2c:	cmp	r2, r1
   16c30:	movle	r2, #0
   16c34:	movgt	r2, #1
   16c38:	b	16bc8 <__assert_fail@plt+0x5024>
   16c3c:	cmp	r8, #69	; 0x45
   16c40:	beq	16a88 <__assert_fail@plt+0x4ee4>
   16c44:	cmp	r5, #0
   16c48:	beq	16c54 <__assert_fail@plt+0x50b0>
   16c4c:	str	r5, [sp, #36]	; 0x24
   16c50:	mov	r5, #0
   16c54:	cmp	r8, #0
   16c58:	mov	r2, #32
   16c5c:	mov	r3, #37	; 0x25
   16c60:	strb	r2, [sp, #72]	; 0x48
   16c64:	strb	r3, [sp, #73]	; 0x49
   16c68:	addeq	r9, sp, #72	; 0x48
   16c6c:	addeq	ip, sp, #74	; 0x4a
   16c70:	bne	16d6c <__assert_fail@plt+0x51c8>
   16c74:	mov	r6, #0
   16c78:	strb	r1, [ip]
   16c7c:	mov	r2, r9
   16c80:	add	r0, sp, #88	; 0x58
   16c84:	ldr	r3, [sp, #32]
   16c88:	mov	r1, #1024	; 0x400
   16c8c:	strb	r6, [ip, #1]
   16c90:	bl	11910 <strftime@plt>
   16c94:	subs	r8, r0, #0
   16c98:	beq	16690 <__assert_fail@plt+0x4aec>
   16c9c:	ldr	r3, [sp, #28]
   16ca0:	sub	r9, r8, #1
   16ca4:	subs	r3, r3, #45	; 0x2d
   16ca8:	movne	r3, #1
   16cac:	cmp	r7, r6
   16cb0:	movlt	r3, #0
   16cb4:	cmp	r3, r6
   16cb8:	moveq	r7, r6
   16cbc:	cmp	r9, r7
   16cc0:	movcs	r3, r9
   16cc4:	movcc	r3, r7
   16cc8:	mov	r2, r3
   16ccc:	str	r3, [sp, #44]	; 0x2c
   16cd0:	ldr	r3, [sp, #24]
   16cd4:	mvn	r3, r3
   16cd8:	cmp	r2, r3
   16cdc:	bcs	166b8 <__assert_fail@plt+0x4b14>
   16ce0:	cmp	sl, #0
   16ce4:	beq	16b64 <__assert_fail@plt+0x4fc0>
   16ce8:	cmp	r9, r7
   16cec:	bcs	16d2c <__assert_fail@plt+0x5188>
   16cf0:	ldr	r3, [sp, #28]
   16cf4:	sub	r7, r7, r9
   16cf8:	cmp	r3, #43	; 0x2b
   16cfc:	cmpne	r3, #48	; 0x30
   16d00:	moveq	r3, #1
   16d04:	movne	r3, #0
   16d08:	bne	16e08 <__assert_fail@plt+0x5264>
   16d0c:	cmp	r7, #0
   16d10:	beq	16d2c <__assert_fail@plt+0x5188>
   16d14:	add	r6, r6, #1
   16d18:	mov	r1, sl
   16d1c:	mov	r0, #48	; 0x30
   16d20:	bl	11a90 <fputc@plt>
   16d24:	cmp	r7, r6
   16d28:	bne	16d14 <__assert_fail@plt+0x5170>
   16d2c:	cmp	r5, #0
   16d30:	bne	17ef8 <__assert_fail@plt+0x6354>
   16d34:	ldr	r3, [sp, #36]	; 0x24
   16d38:	cmp	r3, #0
   16d3c:	bne	16d94 <__assert_fail@plt+0x51f0>
   16d40:	mov	r1, r9
   16d44:	add	r0, sp, #89	; 0x59
   16d48:	mov	r3, sl
   16d4c:	mov	r2, #1
   16d50:	bl	11868 <fwrite@plt>
   16d54:	b	16b64 <__assert_fail@plt+0x4fc0>
   16d58:	mov	r5, #0
   16d5c:	mov	r2, #32
   16d60:	mov	r3, #37	; 0x25
   16d64:	strb	r2, [sp, #72]	; 0x48
   16d68:	strb	r3, [sp, #73]	; 0x49
   16d6c:	add	r9, sp, #72	; 0x48
   16d70:	strb	r8, [sp, #74]	; 0x4a
   16d74:	add	ip, r9, #3
   16d78:	b	16c74 <__assert_fail@plt+0x50d0>
   16d7c:	mov	r1, r5
   16d80:	mov	r0, r9
   16d84:	mov	r3, sl
   16d88:	mov	r2, #1
   16d8c:	bl	11868 <fwrite@plt>
   16d90:	b	16b64 <__assert_fail@plt+0x4fc0>
   16d94:	cmp	r9, #0
   16d98:	sub	r8, r8, #2
   16d9c:	beq	16b64 <__assert_fail@plt+0x4fc0>
   16da0:	bl	11934 <__ctype_toupper_loc@plt>
   16da4:	add	r5, sp, #89	; 0x59
   16da8:	mov	r6, r0
   16dac:	ldrb	r2, [r5], #1
   16db0:	ldr	r3, [r6]
   16db4:	mov	r1, sl
   16db8:	ldr	r0, [r3, r2, lsl #2]
   16dbc:	bl	11a90 <fputc@plt>
   16dc0:	cmp	r8, #0
   16dc4:	sub	r8, r8, #1
   16dc8:	bne	16dac <__assert_fail@plt+0x5208>
   16dcc:	b	16b64 <__assert_fail@plt+0x4fc0>
   16dd0:	cmp	r7, #0
   16dd4:	beq	16b24 <__assert_fail@plt+0x4f80>
   16dd8:	mov	r8, #0
   16ddc:	mov	r6, #48	; 0x30
   16de0:	add	r8, r8, #1
   16de4:	mov	r1, sl
   16de8:	mov	r0, r6
   16dec:	bl	11a90 <fputc@plt>
   16df0:	cmp	r7, r8
   16df4:	bne	16de0 <__assert_fail@plt+0x523c>
   16df8:	b	16b24 <__assert_fail@plt+0x4f80>
   16dfc:	cmp	r8, #79	; 0x4f
   16e00:	bne	16c50 <__assert_fail@plt+0x50ac>
   16e04:	b	16a88 <__assert_fail@plt+0x4ee4>
   16e08:	cmp	r7, #0
   16e0c:	movne	r6, r3
   16e10:	beq	16d2c <__assert_fail@plt+0x5188>
   16e14:	add	r6, r6, #1
   16e18:	mov	r1, sl
   16e1c:	mov	r0, #32
   16e20:	bl	11a90 <fputc@plt>
   16e24:	cmp	r7, r6
   16e28:	bne	16e14 <__assert_fail@plt+0x5270>
   16e2c:	b	16d2c <__assert_fail@plt+0x5188>
   16e30:	cmp	r8, #0
   16e34:	bne	16a88 <__assert_fail@plt+0x4ee4>
   16e38:	ldr	r3, [sp, #36]	; 0x24
   16e3c:	cmp	r5, #0
   16e40:	moveq	r5, r3
   16e44:	mov	r2, #32
   16e48:	mov	r3, #37	; 0x25
   16e4c:	add	r9, sp, #72	; 0x48
   16e50:	str	r5, [sp, #36]	; 0x24
   16e54:	strb	r2, [sp, #72]	; 0x48
   16e58:	strb	r3, [sp, #73]	; 0x49
   16e5c:	add	ip, r9, #2
   16e60:	mov	r5, #0
   16e64:	b	16c74 <__assert_fail@plt+0x50d0>
   16e68:	ldr	lr, [sp, #32]
   16e6c:	add	ip, sp, #88	; 0x58
   16e70:	mvn	r5, #0
   16e74:	ldm	lr!, {r0, r1, r2, r3}
   16e78:	stmia	ip!, {r0, r1, r2, r3}
   16e7c:	ldm	lr!, {r0, r1, r2, r3}
   16e80:	stmia	ip!, {r0, r1, r2, r3}
   16e84:	ldm	lr, {r0, r1, r2}
   16e88:	str	r5, [sp, #116]	; 0x74
   16e8c:	stm	ip, {r0, r1, r2}
   16e90:	add	r1, sp, #88	; 0x58
   16e94:	ldr	r0, [sp, #1164]	; 0x48c
   16e98:	bl	33c04 <__assert_fail@plt+0x22060>
   16e9c:	ldr	r3, [sp, #116]	; 0x74
   16ea0:	cmp	r3, #0
   16ea4:	blt	18404 <__assert_fail@plt+0x6860>
   16ea8:	add	r9, sp, #72	; 0x48
   16eac:	lsr	r3, r0, #31
   16eb0:	cmp	r0, #0
   16eb4:	add	r5, r9, #14
   16eb8:	str	r3, [sp, #44]	; 0x2c
   16ebc:	blt	17054 <__assert_fail@plt+0x54b0>
   16ec0:	smull	r3, r2, fp, r0
   16ec4:	asr	r3, r0, #31
   16ec8:	rsb	r3, r3, r2, asr #2
   16ecc:	mov	r2, r3
   16ed0:	add	r3, r3, r3, lsl #2
   16ed4:	sub	r3, r0, r3, lsl #1
   16ed8:	add	r3, r3, #48	; 0x30
   16edc:	subs	r0, r2, #0
   16ee0:	strb	r3, [r5, #-1]!
   16ee4:	bne	16ec0 <__assert_fail@plt+0x531c>
   16ee8:	mov	lr, #0
   16eec:	mov	ip, #1
   16ef0:	ldr	r3, [sp, #28]
   16ef4:	cmp	r3, #0
   16ef8:	beq	17ed0 <__assert_fail@plt+0x632c>
   16efc:	subs	r3, r3, #45	; 0x2d
   16f00:	movne	r3, #1
   16f04:	ldr	r2, [sp, #44]	; 0x2c
   16f08:	cmp	r7, #0
   16f0c:	movlt	r7, ip
   16f10:	cmp	r2, #0
   16f14:	bne	17ec8 <__assert_fail@plt+0x6324>
   16f18:	cmp	lr, #0
   16f1c:	beq	17e98 <__assert_fail@plt+0x62f4>
   16f20:	mov	r2, #43	; 0x2b
   16f24:	add	r9, r9, #14
   16f28:	sub	r9, r9, r5
   16f2c:	sub	r6, r7, #1
   16f30:	sub	r6, r6, r9
   16f34:	cmp	r6, #0
   16f38:	movle	r1, #0
   16f3c:	andgt	r1, r3, #1
   16f40:	cmp	r1, #0
   16f44:	ldr	r1, [sp, #28]
   16f48:	moveq	r6, #0
   16f4c:	cmp	r1, #95	; 0x5f
   16f50:	beq	17f60 <__assert_fail@plt+0x63bc>
   16f54:	ldr	r1, [sp, #24]
   16f58:	cmn	r1, #3
   16f5c:	bhi	166b8 <__assert_fail@plt+0x4b14>
   16f60:	cmp	sl, #0
   16f64:	beq	16f7c <__assert_fail@plt+0x53d8>
   16f68:	mov	r0, r2
   16f6c:	mov	r1, sl
   16f70:	str	r3, [sp, #44]	; 0x2c
   16f74:	bl	11a90 <fputc@plt>
   16f78:	ldr	r3, [sp, #44]	; 0x2c
   16f7c:	ldr	r2, [sp, #24]
   16f80:	sub	r7, r7, #1
   16f84:	cmp	r7, #0
   16f88:	movlt	r3, #0
   16f8c:	andge	r3, r3, #1
   16f90:	add	r2, r2, #1
   16f94:	cmp	r3, #0
   16f98:	str	r2, [sp, #24]
   16f9c:	bne	17ec0 <__assert_fail@plt+0x631c>
   16fa0:	cmp	r3, r9
   16fa4:	movcs	r2, r3
   16fa8:	movcc	r2, r9
   16fac:	mov	r1, r2
   16fb0:	str	r2, [sp, #44]	; 0x2c
   16fb4:	ldr	r2, [sp, #24]
   16fb8:	mvn	r2, r2
   16fbc:	cmp	r1, r2
   16fc0:	bcs	166b8 <__assert_fail@plt+0x4b14>
   16fc4:	cmp	sl, #0
   16fc8:	beq	16b64 <__assert_fail@plt+0x4fc0>
   16fcc:	cmp	r3, r9
   16fd0:	bls	17014 <__assert_fail@plt+0x5470>
   16fd4:	ldr	r2, [sp, #28]
   16fd8:	sub	r6, r3, r9
   16fdc:	cmp	r2, #43	; 0x2b
   16fe0:	cmpne	r2, #48	; 0x30
   16fe4:	moveq	r8, #1
   16fe8:	movne	r8, #0
   16fec:	beq	17f34 <__assert_fail@plt+0x6390>
   16ff0:	cmp	r6, #0
   16ff4:	movne	r7, #32
   16ff8:	beq	17014 <__assert_fail@plt+0x5470>
   16ffc:	add	r8, r8, #1
   17000:	mov	r1, sl
   17004:	mov	r0, r7
   17008:	bl	11a90 <fputc@plt>
   1700c:	cmp	r6, r8
   17010:	bne	16ffc <__assert_fail@plt+0x5458>
   17014:	ldr	r3, [sp, #36]	; 0x24
   17018:	cmp	r3, #0
   1701c:	beq	17ee0 <__assert_fail@plt+0x633c>
   17020:	cmp	r9, #0
   17024:	beq	16b64 <__assert_fail@plt+0x4fc0>
   17028:	bl	11934 <__ctype_toupper_loc@plt>
   1702c:	add	r9, r5, r9
   17030:	mov	r6, r0
   17034:	ldrb	r2, [r5], #1
   17038:	ldr	r3, [r6]
   1703c:	mov	r1, sl
   17040:	ldr	r0, [r3, r2, lsl #2]
   17044:	bl	11a90 <fputc@plt>
   17048:	cmp	r5, r9
   1704c:	bne	17034 <__assert_fail@plt+0x5490>
   17050:	b	16b64 <__assert_fail@plt+0x4fc0>
   17054:	smull	r3, r2, fp, r0
   17058:	asr	r3, r0, #31
   1705c:	rsb	r3, r3, r2, asr #2
   17060:	mov	r2, r3
   17064:	add	r3, r3, r3, lsl #2
   17068:	sub	r3, r0, r3, lsl #1
   1706c:	rsb	r3, r3, #48	; 0x30
   17070:	subs	r0, r2, #0
   17074:	strb	r3, [r5, #-1]!
   17078:	bne	17054 <__assert_fail@plt+0x54b0>
   1707c:	b	16ee8 <__assert_fail@plt+0x5344>
   17080:	ldr	r2, [sp, #28]
   17084:	mvn	r3, r7
   17088:	cmp	r2, #45	; 0x2d
   1708c:	lsr	r3, r3, #31
   17090:	moveq	r3, #0
   17094:	cmp	r3, #0
   17098:	beq	1829c <__assert_fail@plt+0x66f8>
   1709c:	cmp	r7, #1
   170a0:	movcs	r5, r7
   170a4:	movcc	r5, #1
   170a8:	ldr	r3, [sp, #24]
   170ac:	mvn	r3, r3
   170b0:	cmp	r3, r5
   170b4:	bls	166b8 <__assert_fail@plt+0x4b14>
   170b8:	cmp	sl, #0
   170bc:	beq	17110 <__assert_fail@plt+0x556c>
   170c0:	cmp	r7, #1
   170c4:	bls	17104 <__assert_fail@plt+0x5560>
   170c8:	ldr	r3, [sp, #28]
   170cc:	sub	r7, r7, #1
   170d0:	cmp	r3, #43	; 0x2b
   170d4:	cmpne	r3, #48	; 0x30
   170d8:	moveq	r6, #1
   170dc:	movne	r6, #0
   170e0:	bne	17fe0 <__assert_fail@plt+0x643c>
   170e4:	mov	r6, #0
   170e8:	mov	r8, #48	; 0x30
   170ec:	add	r6, r6, #1
   170f0:	mov	r1, sl
   170f4:	mov	r0, r8
   170f8:	bl	11a90 <fputc@plt>
   170fc:	cmp	r7, r6
   17100:	bne	170ec <__assert_fail@plt+0x5548>
   17104:	mov	r1, sl
   17108:	mov	r0, #10
   1710c:	bl	11a90 <fputc@plt>
   17110:	ldr	r3, [sp, #24]
   17114:	add	r3, r3, r5
   17118:	str	r3, [sp, #24]
   1711c:	b	16690 <__assert_fail@plt+0x4aec>
   17120:	ldr	r3, [sp, #32]
   17124:	ldr	r2, [pc, #964]	; 174f0 <__assert_fail@plt+0x594c>
   17128:	mov	ip, #1
   1712c:	ldr	r3, [r3, #24]
   17130:	add	r3, r3, #6
   17134:	smull	r0, r2, r2, r3
   17138:	add	r0, r2, r3
   1713c:	asr	r2, r3, #31
   17140:	rsb	r2, r2, r0, asr #2
   17144:	rsb	r2, r2, r2, lsl #3
   17148:	sub	r3, r3, r2
   1714c:	add	r2, r3, ip
   17150:	mov	r3, r2
   17154:	mov	r0, #0
   17158:	lsr	r2, r2, #31
   1715c:	cmp	r3, r0
   17160:	str	r2, [sp, #44]	; 0x2c
   17164:	mov	lr, r0
   17168:	movlt	r2, #0
   1716c:	movge	r2, #1
   17170:	cmp	r8, #79	; 0x4f
   17174:	movne	r2, #0
   17178:	andeq	r2, r2, #1
   1717c:	cmp	r2, #0
   17180:	uxtbne	r1, r1
   17184:	bne	16d58 <__assert_fail@plt+0x51b4>
   17188:	ldr	r2, [sp, #44]	; 0x2c
   1718c:	cmp	r2, #0
   17190:	rsbne	r3, r3, #0
   17194:	add	r9, sp, #72	; 0x48
   17198:	add	r5, r9, #14
   1719c:	mov	r2, r5
   171a0:	ldr	r8, [pc, #764]	; 174a4 <__assert_fail@plt+0x5900>
   171a4:	mov	r5, r3
   171a8:	mov	r3, r2
   171ac:	tst	r0, #1
   171b0:	movne	r2, #58	; 0x3a
   171b4:	mov	r6, r3
   171b8:	strbne	r2, [r3, #-1]
   171bc:	subne	r6, r3, #1
   171c0:	umull	r3, r2, r8, r5
   171c4:	asrs	r0, r0, #1
   171c8:	lsr	r2, r2, #3
   171cc:	movne	r1, #1
   171d0:	add	r3, r2, r2, lsl #2
   171d4:	moveq	r1, #0
   171d8:	sub	r3, r5, r3, lsl #1
   171dc:	cmp	r2, #0
   171e0:	orrne	r1, r1, #1
   171e4:	add	r3, r3, #48	; 0x30
   171e8:	cmp	r1, #0
   171ec:	strb	r3, [r6, #-1]
   171f0:	mov	r5, r2
   171f4:	sub	r3, r6, #1
   171f8:	bne	171ac <__assert_fail@plt+0x5608>
   171fc:	mov	r5, r3
   17200:	b	16ef0 <__assert_fail@plt+0x534c>
   17204:	ldr	r3, [sp, #28]
   17208:	subs	r3, r3, #45	; 0x2d
   1720c:	movne	r3, #1
   17210:	cmp	r7, #0
   17214:	movlt	r3, #0
   17218:	cmp	r3, #0
   1721c:	beq	18414 <__assert_fail@plt+0x6870>
   17220:	cmp	r7, #1
   17224:	movcs	r5, r7
   17228:	movcc	r5, #1
   1722c:	ldr	r3, [sp, #24]
   17230:	mvn	r3, r3
   17234:	cmp	r3, r5
   17238:	bls	166b8 <__assert_fail@plt+0x4b14>
   1723c:	cmp	sl, #0
   17240:	beq	17110 <__assert_fail@plt+0x556c>
   17244:	cmp	r7, #1
   17248:	bls	17288 <__assert_fail@plt+0x56e4>
   1724c:	ldr	r3, [sp, #28]
   17250:	sub	r7, r7, #1
   17254:	cmp	r3, #43	; 0x2b
   17258:	cmpne	r3, #48	; 0x30
   1725c:	moveq	r6, #1
   17260:	movne	r6, #0
   17264:	bne	17fc0 <__assert_fail@plt+0x641c>
   17268:	mov	r6, #0
   1726c:	mov	r8, #48	; 0x30
   17270:	add	r6, r6, #1
   17274:	mov	r1, sl
   17278:	mov	r0, r8
   1727c:	bl	11a90 <fputc@plt>
   17280:	cmp	r7, r6
   17284:	bne	17270 <__assert_fail@plt+0x56cc>
   17288:	mov	r1, sl
   1728c:	mov	r0, #9
   17290:	bl	11a90 <fputc@plt>
   17294:	b	17110 <__assert_fail@plt+0x556c>
   17298:	cmp	r8, #69	; 0x45
   1729c:	beq	16a88 <__assert_fail@plt+0x4ee4>
   172a0:	ldr	r3, [sp, #32]
   172a4:	mov	r0, #0
   172a8:	mov	lr, r0
   172ac:	ldr	r3, [r3, #16]
   172b0:	mov	ip, #2
   172b4:	cmn	r3, #1
   172b8:	movlt	r2, #1
   172bc:	movge	r2, r0
   172c0:	str	r2, [sp, #44]	; 0x2c
   172c4:	add	r3, r3, #1
   172c8:	movge	r2, #1
   172cc:	movlt	r2, r0
   172d0:	b	17170 <__assert_fail@plt+0x55cc>
   172d4:	cmp	r8, #69	; 0x45
   172d8:	beq	16a88 <__assert_fail@plt+0x4ee4>
   172dc:	ldr	r3, [sp, #32]
   172e0:	mov	ip, #2
   172e4:	ldr	r2, [r3, #4]
   172e8:	b	17150 <__assert_fail@plt+0x55ac>
   172ec:	cmp	r8, #69	; 0x45
   172f0:	beq	16a88 <__assert_fail@plt+0x4ee4>
   172f4:	ldr	r2, [sp, #48]	; 0x30
   172f8:	mov	ip, #2
   172fc:	b	17150 <__assert_fail@plt+0x55ac>
   17300:	cmp	r8, #69	; 0x45
   17304:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17308:	ldr	r3, [sp, #32]
   1730c:	mov	ip, #2
   17310:	ldr	r2, [r3, #8]
   17314:	b	17150 <__assert_fail@plt+0x55ac>
   17318:	cmp	r8, #69	; 0x45
   1731c:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17320:	ldr	r3, [sp, #32]
   17324:	ldr	r6, [r3, #28]
   17328:	ldr	r9, [r3, #24]
   1732c:	ldr	r5, [r3, #20]
   17330:	sub	r2, r6, r9
   17334:	add	r2, r2, #380	; 0x17c
   17338:	ldr	r3, [pc, #432]	; 174f0 <__assert_fail@plt+0x594c>
   1733c:	add	r2, r2, #2
   17340:	cmp	r5, #0
   17344:	smull	r0, r3, r3, r2
   17348:	add	r3, r3, r2
   1734c:	asr	r0, r2, #31
   17350:	rsb	r0, r0, r3, asr #2
   17354:	mvnge	r3, #99	; 0x63
   17358:	rsb	r0, r0, r0, lsl #3
   1735c:	sub	r2, r2, r0
   17360:	sub	r2, r6, r2
   17364:	movlt	r3, #300	; 0x12c
   17368:	adds	r2, r2, #3
   1736c:	str	r2, [sp, #44]	; 0x2c
   17370:	add	r3, r3, r5
   17374:	bmi	18168 <__assert_fail@plt+0x65c4>
   17378:	tst	r3, #3
   1737c:	ldrne	r3, [pc, #356]	; 174e8 <__assert_fail@plt+0x5944>
   17380:	bne	173c8 <__assert_fail@plt+0x5824>
   17384:	ldr	r2, [pc, #340]	; 174e0 <__assert_fail@plt+0x593c>
   17388:	mov	r0, #100	; 0x64
   1738c:	smull	r2, ip, r2, r3
   17390:	asr	r2, r3, #31
   17394:	rsb	lr, r2, ip, asr #5
   17398:	mul	r0, r0, lr
   1739c:	cmp	r3, r0
   173a0:	ldrne	r3, [pc, #316]	; 174e4 <__assert_fail@plt+0x5940>
   173a4:	bne	173c8 <__assert_fail@plt+0x5824>
   173a8:	rsb	r2, r2, ip, asr #7
   173ac:	mov	ip, #400	; 0x190
   173b0:	ldr	r0, [pc, #304]	; 174e8 <__assert_fail@plt+0x5944>
   173b4:	mul	r2, ip, r2
   173b8:	sub	ip, ip, #34	; 0x22
   173bc:	cmp	r3, r2
   173c0:	movne	r3, r0
   173c4:	moveq	r3, ip
   173c8:	sub	r3, r6, r3
   173cc:	sub	r2, r3, r9
   173d0:	ldr	r0, [pc, #280]	; 174f0 <__assert_fail@plt+0x594c>
   173d4:	add	r2, r2, #380	; 0x17c
   173d8:	add	r2, r2, #2
   173dc:	smull	r0, ip, r0, r2
   173e0:	add	ip, ip, r2
   173e4:	asr	r0, r2, #31
   173e8:	rsb	r0, r0, ip, asr #2
   173ec:	rsb	r0, r0, r0, lsl #3
   173f0:	sub	r2, r2, r0
   173f4:	sub	r3, r3, r2
   173f8:	adds	r3, r3, #3
   173fc:	movmi	r0, #0
   17400:	movpl	r0, #1
   17404:	ldrmi	r3, [sp, #44]	; 0x2c
   17408:	ldrmi	lr, [pc, #204]	; 174dc <__assert_fail@plt+0x5938>
   1740c:	ldrpl	lr, [pc, #148]	; 174a8 <__assert_fail@plt+0x5904>
   17410:	movmi	r6, r0
   17414:	movpl	r6, r0
   17418:	cmp	r1, #71	; 0x47
   1741c:	beq	18220 <__assert_fail@plt+0x667c>
   17420:	cmp	r1, #103	; 0x67
   17424:	bne	18200 <__assert_fail@plt+0x665c>
   17428:	ldr	r3, [pc, #176]	; 174e0 <__assert_fail@plt+0x593c>
   1742c:	mov	r0, #100	; 0x64
   17430:	smull	r2, r3, r3, r5
   17434:	asr	r2, r5, #31
   17438:	rsb	r2, r2, r3, asr #5
   1743c:	ldr	r3, [pc, #156]	; 174e0 <__assert_fail@plt+0x593c>
   17440:	mul	r2, r0, r2
   17444:	sub	r2, r5, r2
   17448:	add	r2, r2, r6
   1744c:	smull	r3, ip, r3, r2
   17450:	asr	r3, r2, #31
   17454:	rsb	r3, r3, ip, asr #5
   17458:	mul	r3, r0, r3
   1745c:	subs	r3, r2, r3
   17460:	ldr	r2, [sp, #28]
   17464:	bmi	180d4 <__assert_fail@plt+0x6530>
   17468:	cmp	r2, #0
   1746c:	beq	180e8 <__assert_fail@plt+0x6544>
   17470:	mov	r2, #1
   17474:	mov	r0, #0
   17478:	str	r0, [sp, #44]	; 0x2c
   1747c:	ldr	r0, [sp, #28]
   17480:	cmp	r0, #43	; 0x2b
   17484:	beq	180a8 <__assert_fail@plt+0x6504>
   17488:	mov	lr, #0
   1748c:	mov	ip, #2
   17490:	mov	r0, #0
   17494:	b	17170 <__assert_fail@plt+0x55cc>
   17498:	andeq	r9, r3, r4, lsr #27
   1749c:	strbtvs	r6, [r6], -r7, ror #12
   174a0:	stcleq	12, cr12, [ip], {204}	; 0xcc
   174a4:	stclgt	12, cr12, [ip], {205}	; 0xcd
   174a8:			; <UNDEFINED> instruction: 0xfffff893
   174ac:	andeq	r9, r3, r8, ror #25
   174b0:	ldrdne	r4, [r2], #-211	; 0xffffff2d	; <UNPREDICTABLE>
   174b4:	ldmvs	fp, {r0, r2, r3, r5, r7, r8, r9, fp, pc}^
   174b8:	ldrbtne	fp, [r8], #1417	; 0x589
   174bc:	tstmi	fp, #2096	; 0x830
   174c0:	blvs	1809e74 <optarg@@GLIBC_2.4+0x17bec34>
   174c4:	strbpl	r3, [r6, #2953]!	; 0xb89
   174c8:	stmhi	r8, {r0, r3, r7, fp, pc}
   174cc:			; <UNDEFINED> instruction: 0x91a2b3c5
   174d0:	strdeq	r9, [r3], -r4
   174d4:	andeq	r9, r3, r0, ror #25
   174d8:	andeq	r0, r0, fp, ror #14
   174dc:			; <UNDEFINED> instruction: 0xfffff894
   174e0:	mvnpl	r8, pc, lsl r5
   174e4:	andeq	r0, r0, lr, ror #2
   174e8:	andeq	r0, r0, sp, ror #2
   174ec:			; <UNDEFINED> instruction: 0xfffff895
   174f0:	subls	r2, r9, #-1828716544	; 0x93000000
   174f4:	andeq	r2, r0, pc, lsl #14
   174f8:	andeq	r9, r3, r8, asr #15
   174fc:	andeq	r2, r0, r0, lsl r7
   17500:	cmp	r8, #0
   17504:	bne	16a88 <__assert_fail@plt+0x4ee4>
   17508:	ldr	r2, [sp, #28]
   1750c:	lsr	r3, r7, #31
   17510:	cmp	r2, #0
   17514:	movne	r3, #0
   17518:	andeq	r3, r3, #1
   1751c:	cmp	r3, #0
   17520:	bne	1835c <__assert_fail@plt+0x67b8>
   17524:	sub	r9, r7, #6
   17528:	ldr	r8, [pc, #-56]	; 174f8 <__assert_fail@plt+0x5954>
   1752c:	bic	r9, r9, r9, asr #31
   17530:	mov	r5, r2
   17534:	ldr	r3, [sp, #1168]	; 0x490
   17538:	str	r5, [sp]
   1753c:	str	r3, [sp, #16]
   17540:	ldr	r3, [sp, #1164]	; 0x48c
   17544:	str	r9, [sp, #4]
   17548:	str	r3, [sp, #12]
   1754c:	ldr	r3, [sp, #1160]	; 0x488
   17550:	ldr	r2, [sp, #32]
   17554:	str	r3, [sp, #8]
   17558:	mov	r1, r8
   1755c:	ldr	r3, [sp, #36]	; 0x24
   17560:	mov	r0, #0
   17564:	bl	16588 <__assert_fail@plt+0x49e4>
   17568:	cmp	r5, #45	; 0x2d
   1756c:	mov	r3, r5
   17570:	bicne	r5, r7, r7, asr #31
   17574:	moveq	r5, #0
   17578:	cmp	r5, r0
   1757c:	movcs	r3, r5
   17580:	movcc	r3, r0
   17584:	mov	r2, r3
   17588:	str	r3, [sp, #44]	; 0x2c
   1758c:	ldr	r3, [sp, #24]
   17590:	mvn	r3, r3
   17594:	cmp	r2, r3
   17598:	bcs	166b8 <__assert_fail@plt+0x4b14>
   1759c:	cmp	sl, #0
   175a0:	beq	17628 <__assert_fail@plt+0x5a84>
   175a4:	cmp	r5, r0
   175a8:	bls	175ec <__assert_fail@plt+0x5a48>
   175ac:	ldr	r3, [sp, #28]
   175b0:	sub	r5, r5, r0
   175b4:	cmp	r3, #43	; 0x2b
   175b8:	cmpne	r3, #48	; 0x30
   175bc:	moveq	r6, #1
   175c0:	movne	r6, #0
   175c4:	beq	1807c <__assert_fail@plt+0x64d8>
   175c8:	cmp	r5, #0
   175cc:	movne	r7, #32
   175d0:	beq	175ec <__assert_fail@plt+0x5a48>
   175d4:	add	r6, r6, #1
   175d8:	mov	r1, sl
   175dc:	mov	r0, r7
   175e0:	bl	11a90 <fputc@plt>
   175e4:	cmp	r5, r6
   175e8:	bne	175d4 <__assert_fail@plt+0x5a30>
   175ec:	ldr	r3, [sp, #1168]	; 0x490
   175f0:	ldr	r2, [sp, #32]
   175f4:	str	r3, [sp, #16]
   175f8:	ldr	r3, [sp, #1164]	; 0x48c
   175fc:	str	r9, [sp, #4]
   17600:	str	r3, [sp, #12]
   17604:	ldr	r3, [sp, #1160]	; 0x488
   17608:	mov	r1, r8
   1760c:	str	r3, [sp, #8]
   17610:	ldr	r3, [sp, #28]
   17614:	mov	r0, sl
   17618:	str	r3, [sp]
   1761c:	ldr	r3, [sp, #36]	; 0x24
   17620:	bl	16588 <__assert_fail@plt+0x49e4>
   17624:	ldr	r2, [sp, #44]	; 0x2c
   17628:	ldr	r3, [sp, #24]
   1762c:	add	r3, r3, r2
   17630:	str	r3, [sp, #24]
   17634:	b	16690 <__assert_fail@plt+0x4aec>
   17638:	cmp	r8, #0
   1763c:	bne	16a88 <__assert_fail@plt+0x4ee4>
   17640:	mvn	r9, #0
   17644:	ldr	r8, [pc, #-416]	; 174ac <__assert_fail@plt+0x5908>
   17648:	ldr	r5, [sp, #28]
   1764c:	b	17534 <__assert_fail@plt+0x5990>
   17650:	cmp	r8, #69	; 0x45
   17654:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17658:	ldr	r3, [sp, #32]
   1765c:	mov	ip, #1
   17660:	ldr	r2, [r3, #24]
   17664:	b	17150 <__assert_fail@plt+0x55ac>
   17668:	cmp	r8, #69	; 0x45
   1766c:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17670:	cmp	r7, #0
   17674:	movle	r7, #9
   17678:	ldr	r3, [sp, #1168]	; 0x490
   1767c:	mov	r5, #9
   17680:	b	17694 <__assert_fail@plt+0x5af0>
   17684:	asr	r2, r3, #31
   17688:	smull	r1, r3, fp, r3
   1768c:	sub	r5, r5, #1
   17690:	rsb	r3, r2, r3, asr #2
   17694:	cmp	r5, r7
   17698:	bgt	17684 <__assert_fail@plt+0x5ae0>
   1769c:	smull	r2, r1, fp, r3
   176a0:	asr	r2, r3, #31
   176a4:	rsb	r1, r2, r1, asr #2
   176a8:	cmp	r5, #1
   176ac:	add	r0, r1, r1, lsl #2
   176b0:	mov	lr, r1
   176b4:	ble	182d8 <__assert_fail@plt+0x6734>
   176b8:	subs	r1, r3, r0, lsl #1
   176bc:	beq	17688 <__assert_fail@plt+0x5ae4>
   176c0:	add	ip, sp, #1104	; 0x450
   176c4:	sub	r0, r5, #1
   176c8:	add	ip, ip, #8
   176cc:	add	ip, ip, r0
   176d0:	add	r1, r1, #48	; 0x30
   176d4:	cmp	r0, #0
   176d8:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   176dc:	beq	182b8 <__assert_fail@plt+0x6714>
   176e0:	smull	r1, ip, fp, lr
   176e4:	ldr	r1, [pc, #-524]	; 174e0 <__assert_fail@plt+0x593c>
   176e8:	smull	r1, r0, r1, r3
   176ec:	asr	r1, lr, #31
   176f0:	rsb	r1, r1, ip, asr #2
   176f4:	sub	ip, r5, #2
   176f8:	add	r1, r1, r1, lsl #2
   176fc:	cmp	ip, #0
   17700:	sub	r1, lr, r1, lsl #1
   17704:	add	lr, sp, #1104	; 0x450
   17708:	add	lr, lr, #8
   1770c:	add	lr, lr, ip
   17710:	add	r1, r1, #48	; 0x30
   17714:	rsb	r0, r2, r0, asr #5
   17718:	strb	r1, [lr, #-1040]	; 0xfffffbf0
   1771c:	beq	178c4 <__assert_fail@plt+0x5d20>
   17720:	smull	r1, ip, fp, r0
   17724:	ldr	r1, [pc, #-636]	; 174b0 <__assert_fail@plt+0x590c>
   17728:	smull	r1, lr, r1, r3
   1772c:	asr	r1, r0, #31
   17730:	rsb	r1, r1, ip, asr #2
   17734:	sub	ip, r5, #3
   17738:	add	r1, r1, r1, lsl #2
   1773c:	cmp	ip, #0
   17740:	sub	r1, r0, r1, lsl #1
   17744:	add	r0, sp, #1104	; 0x450
   17748:	add	r0, r0, #8
   1774c:	add	r0, r0, ip
   17750:	add	r1, r1, #48	; 0x30
   17754:	rsb	lr, r2, lr, asr #6
   17758:	strb	r1, [r0, #-1040]	; 0xfffffbf0
   1775c:	ble	178c4 <__assert_fail@plt+0x5d20>
   17760:	smull	r1, ip, fp, lr
   17764:	ldr	r0, [pc, #-696]	; 174b4 <__assert_fail@plt+0x5910>
   17768:	asr	r1, lr, #31
   1776c:	rsb	r1, r1, ip, asr #2
   17770:	smull	ip, r0, r0, r3
   17774:	add	r1, r1, r1, lsl #2
   17778:	sub	ip, r5, #4
   1777c:	sub	r1, lr, r1, lsl #1
   17780:	add	lr, sp, #1104	; 0x450
   17784:	add	lr, lr, #8
   17788:	add	lr, lr, ip
   1778c:	add	r1, r1, #48	; 0x30
   17790:	cmp	ip, #0
   17794:	strb	r1, [lr, #-1040]	; 0xfffffbf0
   17798:	rsb	ip, r2, r0, asr #12
   1779c:	ble	178c4 <__assert_fail@plt+0x5d20>
   177a0:	smull	r1, lr, fp, ip
   177a4:	ldr	r1, [pc, #-756]	; 174b8 <__assert_fail@plt+0x5914>
   177a8:	asr	r0, ip, #31
   177ac:	rsb	r0, r0, lr, asr #2
   177b0:	smull	lr, r1, r1, r3
   177b4:	add	r0, r0, r0, lsl #2
   177b8:	sub	lr, r5, #5
   177bc:	sub	r0, ip, r0, lsl #1
   177c0:	add	ip, sp, #1104	; 0x450
   177c4:	add	ip, ip, #8
   177c8:	add	ip, ip, lr
   177cc:	add	r0, r0, #48	; 0x30
   177d0:	cmp	lr, #0
   177d4:	strb	r0, [ip, #-1040]	; 0xfffffbf0
   177d8:	rsb	lr, r2, r1, asr #13
   177dc:	ble	178c4 <__assert_fail@plt+0x5d20>
   177e0:	smull	r1, ip, fp, lr
   177e4:	ldr	r0, [pc, #-816]	; 174bc <__assert_fail@plt+0x5918>
   177e8:	asr	r1, lr, #31
   177ec:	rsb	r1, r1, ip, asr #2
   177f0:	smull	ip, r0, r0, r3
   177f4:	add	r1, r1, r1, lsl #2
   177f8:	sub	ip, r5, #6
   177fc:	sub	r1, lr, r1, lsl #1
   17800:	add	lr, sp, #1104	; 0x450
   17804:	add	lr, lr, #8
   17808:	add	lr, lr, ip
   1780c:	add	r1, r1, #48	; 0x30
   17810:	cmp	ip, #0
   17814:	strb	r1, [lr, #-1040]	; 0xfffffbf0
   17818:	rsb	ip, r2, r0, asr #18
   1781c:	ble	178c4 <__assert_fail@plt+0x5d20>
   17820:	smull	r1, lr, fp, ip
   17824:	ldr	r1, [pc, #-876]	; 174c0 <__assert_fail@plt+0x591c>
   17828:	asr	r0, ip, #31
   1782c:	rsb	r0, r0, lr, asr #2
   17830:	smull	lr, r1, r1, r3
   17834:	add	r0, r0, r0, lsl #2
   17838:	sub	lr, r5, #7
   1783c:	sub	r0, ip, r0, lsl #1
   17840:	add	ip, sp, #1104	; 0x450
   17844:	add	ip, ip, #8
   17848:	add	ip, ip, lr
   1784c:	add	r0, r0, #48	; 0x30
   17850:	cmp	lr, #0
   17854:	strb	r0, [ip, #-1040]	; 0xfffffbf0
   17858:	rsb	r1, r2, r1, asr #22
   1785c:	ble	178c4 <__assert_fail@plt+0x5d20>
   17860:	smull	r0, lr, fp, r1
   17864:	ldr	ip, [pc, #-936]	; 174c4 <__assert_fail@plt+0x5920>
   17868:	asr	r0, r1, #31
   1786c:	rsb	r0, r0, lr, asr #2
   17870:	smull	ip, r3, ip, r3
   17874:	add	r0, r0, r0, lsl #2
   17878:	sub	ip, r5, #8
   1787c:	sub	r1, r1, r0, lsl #1
   17880:	mov	r0, ip
   17884:	add	ip, sp, #1104	; 0x450
   17888:	add	ip, ip, #8
   1788c:	add	ip, ip, r0
   17890:	add	r1, r1, #48	; 0x30
   17894:	cmp	r0, #1
   17898:	strb	r1, [ip, #-1040]	; 0xfffffbf0
   1789c:	rsb	r2, r2, r3, asr #25
   178a0:	bne	178c4 <__assert_fail@plt+0x5d20>
   178a4:	smull	r3, r1, fp, r2
   178a8:	asr	r3, r2, #31
   178ac:	rsb	r3, r3, r1, asr #2
   178b0:	mov	r5, #9
   178b4:	add	r3, r3, r3, lsl #2
   178b8:	sub	r2, r2, r3, lsl #1
   178bc:	add	r3, r2, #48	; 0x30
   178c0:	strb	r3, [sp, #72]	; 0x48
   178c4:	ldr	r2, [sp, #28]
   178c8:	subs	r3, r2, #0
   178cc:	moveq	r3, #48	; 0x30
   178d0:	str	r3, [sp, #28]
   178d4:	ldr	r3, [sp, #24]
   178d8:	cmp	r5, #0
   178dc:	movcs	r6, r5
   178e0:	movcc	r6, #0
   178e4:	mvn	r3, r3
   178e8:	cmp	r6, r3
   178ec:	bcs	166b8 <__assert_fail@plt+0x4b14>
   178f0:	cmp	sl, #0
   178f4:	beq	17914 <__assert_fail@plt+0x5d70>
   178f8:	ldr	r3, [sp, #36]	; 0x24
   178fc:	cmp	r3, #0
   17900:	beq	182c0 <__assert_fail@plt+0x671c>
   17904:	mov	r2, r5
   17908:	add	r1, sp, #72	; 0x48
   1790c:	mov	r0, sl
   17910:	bl	16548 <__assert_fail@plt+0x49a4>
   17914:	ldr	r3, [sp, #28]
   17918:	cmp	r3, #45	; 0x2d
   1791c:	ldr	r3, [sp, #24]
   17920:	add	r6, r3, r6
   17924:	beq	18308 <__assert_fail@plt+0x6764>
   17928:	subs	r5, r7, r5
   1792c:	bmi	18308 <__assert_fail@plt+0x6764>
   17930:	mvn	r3, r6
   17934:	cmp	r5, r3
   17938:	mov	r8, r5
   1793c:	bcs	166b8 <__assert_fail@plt+0x4b14>
   17940:	cmp	r5, #0
   17944:	cmpne	sl, #0
   17948:	beq	17984 <__assert_fail@plt+0x5de0>
   1794c:	ldr	r3, [sp, #28]
   17950:	cmp	r3, #43	; 0x2b
   17954:	cmpne	r3, #48	; 0x30
   17958:	moveq	r7, #1
   1795c:	movne	r7, #0
   17960:	bne	182e8 <__assert_fail@plt+0x6744>
   17964:	mov	r7, #0
   17968:	mov	r9, #48	; 0x30
   1796c:	add	r7, r7, #1
   17970:	mov	r1, sl
   17974:	mov	r0, r9
   17978:	bl	11a90 <fputc@plt>
   1797c:	cmp	r5, r7
   17980:	bhi	1796c <__assert_fail@plt+0x5dc8>
   17984:	add	r3, r8, r6
   17988:	str	r3, [sp, #24]
   1798c:	b	16690 <__assert_fail@plt+0x4aec>
   17990:	cmp	r8, #69	; 0x45
   17994:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17998:	ldr	r3, [sp, #32]
   1799c:	ldr	r2, [r3, #12]
   179a0:	ldr	r3, [sp, #28]
   179a4:	mov	ip, #2
   179a8:	cmp	r3, #0
   179ac:	moveq	r3, #95	; 0x5f
   179b0:	streq	r3, [sp, #28]
   179b4:	b	17150 <__assert_fail@plt+0x55ac>
   179b8:	cmp	r8, #69	; 0x45
   179bc:	beq	16a88 <__assert_fail@plt+0x4ee4>
   179c0:	ldr	r3, [sp, #32]
   179c4:	mov	ip, #2
   179c8:	ldr	r2, [r3, #12]
   179cc:	b	17150 <__assert_fail@plt+0x55ac>
   179d0:	mov	r6, #0
   179d4:	ldr	r2, [sp, #32]
   179d8:	ldr	r3, [r2, #32]
   179dc:	cmp	r3, #0
   179e0:	blt	16690 <__assert_fail@plt+0x4aec>
   179e4:	ldr	lr, [r2, #36]	; 0x24
   179e8:	cmp	lr, #0
   179ec:	blt	18484 <__assert_fail@plt+0x68e0>
   179f0:	bne	1810c <__assert_fail@plt+0x6568>
   179f4:	ldr	r3, [sp, #56]	; 0x38
   179f8:	ldrb	r3, [r3]
   179fc:	cmp	r3, #45	; 0x2d
   17a00:	moveq	r2, lr
   17a04:	movne	r2, #1
   17a08:	movne	r3, lr
   17a0c:	moveq	r3, #1
   17a10:	str	r3, [sp, #44]	; 0x2c
   17a14:	ldr	r3, [pc, #-1364]	; 174c8 <__assert_fail@plt+0x5924>
   17a18:	ldr	r5, [pc, #-1368]	; 174c8 <__assert_fail@plt+0x5924>
   17a1c:	smull	r3, ip, r3, lr
   17a20:	ldr	r3, [pc, #-1372]	; 174cc <__assert_fail@plt+0x5928>
   17a24:	add	ip, ip, lr
   17a28:	smull	r0, r3, r3, lr
   17a2c:	asr	r0, lr, #31
   17a30:	rsb	ip, r0, ip, asr #5
   17a34:	str	r0, [sp, #64]	; 0x40
   17a38:	smull	r5, r0, r5, ip
   17a3c:	add	r0, r0, ip
   17a40:	asr	r5, ip, #31
   17a44:	rsb	r0, r5, r0, asr #5
   17a48:	add	r3, r3, lr
   17a4c:	rsb	r0, r0, r0, lsl #4
   17a50:	str	r0, [sp, #68]	; 0x44
   17a54:	ldr	r0, [sp, #64]	; 0x40
   17a58:	rsb	r5, ip, ip, lsl #4
   17a5c:	rsb	r3, r0, r3, asr #11
   17a60:	ldr	r0, [sp, #68]	; 0x44
   17a64:	sub	r5, lr, r5, lsl #2
   17a68:	sub	r0, ip, r0, lsl #2
   17a6c:	cmp	r6, #3
   17a70:	ldrls	pc, [pc, r6, lsl #2]
   17a74:	b	16a88 <__assert_fail@plt+0x4ee4>
   17a78:	andeq	r8, r1, r0, ror r4
   17a7c:	andeq	r8, r1, r0, asr #7
   17a80:	andeq	r8, r1, ip, asr #8
   17a84:	andeq	r8, r1, r8, lsr #7
   17a88:	ldr	r3, [sp, #36]	; 0x24
   17a8c:	cmp	r5, #0
   17a90:	movne	r3, r5
   17a94:	cmp	r8, #69	; 0x45
   17a98:	str	r3, [sp, #36]	; 0x24
   17a9c:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17aa0:	uxtb	r1, r1
   17aa4:	mov	r5, #0
   17aa8:	b	16c54 <__assert_fail@plt+0x50b0>
   17aac:	cmp	r8, #69	; 0x45
   17ab0:	beq	16d58 <__assert_fail@plt+0x51b4>
   17ab4:	ldr	r3, [sp, #32]
   17ab8:	mov	r0, #100	; 0x64
   17abc:	ldr	r2, [r3, #20]
   17ac0:	ldr	r3, [pc, #-1512]	; 174e0 <__assert_fail@plt+0x593c>
   17ac4:	smull	r3, ip, r3, r2
   17ac8:	asr	r3, r2, #31
   17acc:	rsb	r3, r3, ip, asr #5
   17ad0:	mul	r3, r0, r3
   17ad4:	subs	r3, r2, r3
   17ad8:	bmi	18420 <__assert_fail@plt+0x687c>
   17adc:	ldr	r2, [sp, #28]
   17ae0:	b	17468 <__assert_fail@plt+0x58c4>
   17ae4:	ldr	r3, [sp, #32]
   17ae8:	cmp	r8, #79	; 0x4f
   17aec:	ldr	r3, [r3, #16]
   17af0:	beq	16d58 <__assert_fail@plt+0x51b4>
   17af4:	add	r2, r3, r3, lsl #2
   17af8:	mov	lr, #0
   17afc:	add	r3, r3, r2, lsl #1
   17b00:	str	lr, [sp, #44]	; 0x2c
   17b04:	asr	r3, r3, #5
   17b08:	add	r3, r3, #1
   17b0c:	mov	r0, lr
   17b10:	mov	ip, #1
   17b14:	b	17194 <__assert_fail@plt+0x55f0>
   17b18:	mov	r3, #0
   17b1c:	cmp	r5, #0
   17b20:	moveq	r5, r3
   17b24:	moveq	r1, #112	; 0x70
   17b28:	movne	r3, #0
   17b2c:	movne	r1, #112	; 0x70
   17b30:	strne	r3, [sp, #36]	; 0x24
   17b34:	b	16c54 <__assert_fail@plt+0x50b0>
   17b38:	sub	r3, r4, #1
   17b3c:	cmp	r3, r9
   17b40:	movne	r4, r3
   17b44:	bne	16a88 <__assert_fail@plt+0x4ee4>
   17b48:	ldr	r3, [sp, #28]
   17b4c:	subs	r3, r3, #45	; 0x2d
   17b50:	movne	r3, #1
   17b54:	cmp	r7, #0
   17b58:	movlt	r3, #0
   17b5c:	cmp	r3, #0
   17b60:	beq	183f8 <__assert_fail@plt+0x6854>
   17b64:	cmp	r7, #1
   17b68:	movcs	r5, r7
   17b6c:	movcc	r5, #1
   17b70:	ldr	r3, [sp, #24]
   17b74:	mvn	r3, r3
   17b78:	cmp	r3, r5
   17b7c:	bls	166b8 <__assert_fail@plt+0x4b14>
   17b80:	cmp	sl, #0
   17b84:	beq	17110 <__assert_fail@plt+0x556c>
   17b88:	cmp	r7, #1
   17b8c:	bls	17bd0 <__assert_fail@plt+0x602c>
   17b90:	ldr	r3, [sp, #28]
   17b94:	sub	r7, r7, #1
   17b98:	cmp	r3, #43	; 0x2b
   17b9c:	cmpne	r3, #48	; 0x30
   17ba0:	moveq	r6, #1
   17ba4:	movne	r6, #0
   17ba8:	bne	183d8 <__assert_fail@plt+0x6834>
   17bac:	mov	r6, #0
   17bb0:	mov	r8, #48	; 0x30
   17bb4:	add	r6, r6, #1
   17bb8:	mov	r1, sl
   17bbc:	mov	r0, r8
   17bc0:	bl	11a90 <fputc@plt>
   17bc4:	cmp	r7, r6
   17bc8:	bne	17bb4 <__assert_fail@plt+0x6010>
   17bcc:	ldrb	r0, [r4]
   17bd0:	mov	r1, sl
   17bd4:	bl	11a90 <fputc@plt>
   17bd8:	b	17110 <__assert_fail@plt+0x556c>
   17bdc:	cmp	r8, #69	; 0x45
   17be0:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17be4:	ldr	r2, [sp, #32]
   17be8:	mov	ip, #2
   17bec:	ldr	r3, [r2, #28]
   17bf0:	ldr	r2, [r2, #24]
   17bf4:	sub	r3, r3, r2
   17bf8:	ldr	r2, [pc, #-1808]	; 174f0 <__assert_fail@plt+0x594c>
   17bfc:	add	r3, r3, #7
   17c00:	smull	r0, r2, r2, r3
   17c04:	add	r2, r2, r3
   17c08:	asr	r3, r3, #31
   17c0c:	rsb	r2, r3, r2, asr ip
   17c10:	b	17150 <__assert_fail@plt+0x55ac>
   17c14:	ldr	r8, [pc, #-1868]	; 174d0 <__assert_fail@plt+0x592c>
   17c18:	mvn	r9, #0
   17c1c:	ldr	r5, [sp, #28]
   17c20:	b	17534 <__assert_fail@plt+0x5990>
   17c24:	cmp	r8, #69	; 0x45
   17c28:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17c2c:	ldr	r3, [sp, #32]
   17c30:	mov	r0, #0
   17c34:	mov	lr, r0
   17c38:	ldr	r3, [r3, #28]
   17c3c:	mov	ip, #3
   17c40:	cmn	r3, #1
   17c44:	movlt	r2, #1
   17c48:	movge	r2, r0
   17c4c:	str	r2, [sp, #44]	; 0x2c
   17c50:	add	r3, r3, #1
   17c54:	movge	r2, #1
   17c58:	movlt	r2, r0
   17c5c:	b	17170 <__assert_fail@plt+0x55cc>
   17c60:	ldrb	r3, [r4, #1]
   17c64:	add	r0, r4, #1
   17c68:	cmp	r3, #58	; 0x3a
   17c6c:	movne	r6, #1
   17c70:	beq	18148 <__assert_fail@plt+0x65a4>
   17c74:	cmp	r3, #122	; 0x7a
   17c78:	moveq	r4, r0
   17c7c:	bne	16a88 <__assert_fail@plt+0x4ee4>
   17c80:	b	179d4 <__assert_fail@plt+0x5e30>
   17c84:	cmp	r8, #69	; 0x45
   17c88:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17c8c:	ldr	r3, [sp, #32]
   17c90:	ldr	r0, [pc, #-1960]	; 174f0 <__assert_fail@plt+0x594c>
   17c94:	ldr	r2, [r3, #24]
   17c98:	ldr	r3, [r3, #28]
   17c9c:	add	r2, r2, #6
   17ca0:	smull	ip, r0, r0, r2
   17ca4:	add	ip, r0, r2
   17ca8:	asr	r0, r2, #31
   17cac:	rsb	r0, r0, ip, asr #2
   17cb0:	mov	ip, #2
   17cb4:	rsb	r0, r0, r0, lsl #3
   17cb8:	sub	r2, r2, r0
   17cbc:	b	17bf4 <__assert_fail@plt+0x6050>
   17cc0:	cmp	r8, #69	; 0x45
   17cc4:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17cc8:	ldr	r3, [sp, #32]
   17ccc:	mov	ip, #2
   17cd0:	ldr	r2, [r3]
   17cd4:	b	17150 <__assert_fail@plt+0x55ac>
   17cd8:	mvn	r9, #0
   17cdc:	ldr	r8, [pc, #-2064]	; 174d4 <__assert_fail@plt+0x5930>
   17ce0:	ldr	r5, [sp, #28]
   17ce4:	b	17534 <__assert_fail@plt+0x5990>
   17ce8:	cmp	r8, #69	; 0x45
   17cec:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17cf0:	ldr	r2, [sp, #48]	; 0x30
   17cf4:	b	179a0 <__assert_fail@plt+0x5dfc>
   17cf8:	cmp	r8, #69	; 0x45
   17cfc:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17d00:	ldr	r3, [sp, #32]
   17d04:	ldr	r2, [r3, #8]
   17d08:	b	179a0 <__assert_fail@plt+0x5dfc>
   17d0c:	cmp	r8, #69	; 0x45
   17d10:	beq	16d58 <__assert_fail@plt+0x51b4>
   17d14:	cmp	r8, #79	; 0x4f
   17d18:	beq	16a88 <__assert_fail@plt+0x4ee4>
   17d1c:	ldr	r3, [sp, #32]
   17d20:	ldr	r0, [pc, #-2124]	; 174dc <__assert_fail@plt+0x5938>
   17d24:	ldr	r2, [r3, #20]
   17d28:	cmp	r2, r0
   17d2c:	movge	ip, #0
   17d30:	movlt	ip, #1
   17d34:	str	ip, [sp, #44]	; 0x2c
   17d38:	ldr	ip, [sp, #28]
   17d3c:	add	r3, r2, #1888	; 0x760
   17d40:	cmp	ip, #0
   17d44:	add	r3, r3, #12
   17d48:	movne	r2, ip
   17d4c:	beq	18000 <__assert_fail@plt+0x645c>
   17d50:	cmp	r2, #43	; 0x2b
   17d54:	ldr	r2, [sp, #44]	; 0x2c
   17d58:	eor	r2, r2, #1
   17d5c:	beq	182a8 <__assert_fail@plt+0x6704>
   17d60:	mov	lr, #0
   17d64:	uxtb	r2, r2
   17d68:	mov	ip, #4
   17d6c:	b	17490 <__assert_fail@plt+0x58ec>
   17d70:	cmp	r8, #69	; 0x45
   17d74:	beq	16d58 <__assert_fail@plt+0x51b4>
   17d78:	ldr	r3, [sp, #32]
   17d7c:	ldr	r0, [pc, #-2220]	; 174d8 <__assert_fail@plt+0x5934>
   17d80:	mvn	ip, #98	; 0x62
   17d84:	ldr	r2, [r3, #20]
   17d88:	add	r3, r2, #1888	; 0x760
   17d8c:	add	r3, r3, #12
   17d90:	cmp	r3, r0
   17d94:	ldr	r0, [pc, #-2240]	; 174dc <__assert_fail@plt+0x5938>
   17d98:	movhi	r3, #0
   17d9c:	movls	r3, #1
   17da0:	cmp	r2, r0
   17da4:	mla	r3, ip, r3, r2
   17da8:	movge	ip, #0
   17dac:	movlt	ip, #1
   17db0:	str	ip, [sp, #44]	; 0x2c
   17db4:	ldr	ip, [sp, #28]
   17db8:	cmp	ip, #0
   17dbc:	ldr	ip, [pc, #-2276]	; 174e0 <__assert_fail@plt+0x593c>
   17dc0:	smull	lr, ip, ip, r3
   17dc4:	asr	r3, r3, #31
   17dc8:	rsb	r3, r3, ip, asr #5
   17dcc:	add	r3, r3, #19
   17dd0:	bne	1806c <__assert_fail@plt+0x64c8>
   17dd4:	ldr	ip, [sp, #1152]	; 0x480
   17dd8:	cmp	r2, r0
   17ddc:	movlt	r2, #0
   17de0:	movge	r2, #1
   17de4:	cmp	ip, #43	; 0x2b
   17de8:	beq	180a8 <__assert_fail@plt+0x6504>
   17dec:	str	ip, [sp, #28]
   17df0:	mov	lr, #0
   17df4:	mov	ip, #2
   17df8:	b	17490 <__assert_fail@plt+0x58ec>
   17dfc:	ldr	r0, [sp, #56]	; 0x38
   17e00:	bl	11988 <strlen@plt>
   17e04:	ldr	r2, [sp, #28]
   17e08:	mvn	r3, r7
   17e0c:	cmp	r2, #45	; 0x2d
   17e10:	lsr	r3, r3, #31
   17e14:	moveq	r3, #0
   17e18:	cmp	r3, #0
   17e1c:	moveq	r7, #0
   17e20:	ldr	r3, [sp, #36]	; 0x24
   17e24:	cmp	r5, #0
   17e28:	movne	r3, #0
   17e2c:	str	r3, [sp, #36]	; 0x24
   17e30:	cmp	r0, r7
   17e34:	movcs	r3, r0
   17e38:	movcc	r3, r7
   17e3c:	mov	r2, r3
   17e40:	str	r3, [sp, #44]	; 0x2c
   17e44:	ldr	r3, [sp, #24]
   17e48:	mov	r9, r0
   17e4c:	mvn	r3, r3
   17e50:	cmp	r2, r3
   17e54:	bcs	166b8 <__assert_fail@plt+0x4b14>
   17e58:	cmp	sl, #0
   17e5c:	beq	16b64 <__assert_fail@plt+0x4fc0>
   17e60:	cmp	r0, r7
   17e64:	bcc	18028 <__assert_fail@plt+0x6484>
   17e68:	cmp	r5, #0
   17e6c:	bne	18324 <__assert_fail@plt+0x6780>
   17e70:	ldr	r3, [sp, #36]	; 0x24
   17e74:	cmp	r3, #0
   17e78:	beq	18434 <__assert_fail@plt+0x6890>
   17e7c:	mov	r2, r9
   17e80:	ldr	r1, [sp, #56]	; 0x38
   17e84:	mov	r0, sl
   17e88:	bl	16548 <__assert_fail@plt+0x49a4>
   17e8c:	b	16b64 <__assert_fail@plt+0x4fc0>
   17e90:	mov	r3, #1
   17e94:	b	17b1c <__assert_fail@plt+0x5f78>
   17e98:	add	r9, r9, #14
   17e9c:	sub	r9, r9, r5
   17ea0:	sub	r2, r7, r9
   17ea4:	cmp	r2, #0
   17ea8:	movle	r2, #0
   17eac:	andgt	r2, r3, #1
   17eb0:	cmp	r2, #0
   17eb4:	bne	17ec0 <__assert_fail@plt+0x631c>
   17eb8:	cmp	r3, #0
   17ebc:	beq	16fa0 <__assert_fail@plt+0x53fc>
   17ec0:	mov	r3, r7
   17ec4:	b	16fa0 <__assert_fail@plt+0x53fc>
   17ec8:	mov	r2, #45	; 0x2d
   17ecc:	b	16f24 <__assert_fail@plt+0x5380>
   17ed0:	mov	r2, #48	; 0x30
   17ed4:	mov	r3, #1
   17ed8:	str	r2, [sp, #28]
   17edc:	b	16f04 <__assert_fail@plt+0x5360>
   17ee0:	mov	r1, r9
   17ee4:	mov	r0, r5
   17ee8:	mov	r3, sl
   17eec:	mov	r2, #1
   17ef0:	bl	11868 <fwrite@plt>
   17ef4:	b	16b64 <__assert_fail@plt+0x4fc0>
   17ef8:	cmp	r9, #0
   17efc:	sub	r8, r8, #2
   17f00:	beq	16b64 <__assert_fail@plt+0x4fc0>
   17f04:	bl	11928 <__ctype_tolower_loc@plt>
   17f08:	add	r5, sp, #89	; 0x59
   17f0c:	mov	r6, r0
   17f10:	ldrb	r2, [r5], #1
   17f14:	ldr	r3, [r6]
   17f18:	mov	r1, sl
   17f1c:	ldr	r0, [r3, r2, lsl #2]
   17f20:	bl	11a90 <fputc@plt>
   17f24:	cmp	r8, #0
   17f28:	sub	r8, r8, #1
   17f2c:	bne	17f10 <__assert_fail@plt+0x636c>
   17f30:	b	16b64 <__assert_fail@plt+0x4fc0>
   17f34:	cmp	r6, #0
   17f38:	beq	17014 <__assert_fail@plt+0x5470>
   17f3c:	mov	r8, #0
   17f40:	mov	r7, #48	; 0x30
   17f44:	add	r8, r8, #1
   17f48:	mov	r1, sl
   17f4c:	mov	r0, r7
   17f50:	bl	11a90 <fputc@plt>
   17f54:	cmp	r6, r8
   17f58:	bne	17f44 <__assert_fail@plt+0x63a0>
   17f5c:	b	17014 <__assert_fail@plt+0x5470>
   17f60:	cmp	sl, #0
   17f64:	beq	17fa4 <__assert_fail@plt+0x6400>
   17f68:	cmp	r6, #0
   17f6c:	beq	17fa4 <__assert_fail@plt+0x6400>
   17f70:	str	r7, [sp, #1156]	; 0x484
   17f74:	mov	r8, #0
   17f78:	mov	r7, r3
   17f7c:	add	r8, r8, #1
   17f80:	mov	r1, sl
   17f84:	mov	r0, #32
   17f88:	str	r2, [sp, #44]	; 0x2c
   17f8c:	bl	11a90 <fputc@plt>
   17f90:	cmp	r8, r6
   17f94:	ldr	r2, [sp, #44]	; 0x2c
   17f98:	bne	17f7c <__assert_fail@plt+0x63d8>
   17f9c:	mov	r3, r7
   17fa0:	ldr	r7, [sp, #1156]	; 0x484
   17fa4:	ldr	r1, [sp, #24]
   17fa8:	sub	r7, r7, r6
   17fac:	add	r1, r1, r6
   17fb0:	str	r1, [sp, #24]
   17fb4:	b	16f54 <__assert_fail@plt+0x53b0>
   17fb8:	str	r0, [sp, #24]
   17fbc:	b	166a4 <__assert_fail@plt+0x4b00>
   17fc0:	mov	r8, #32
   17fc4:	add	r6, r6, #1
   17fc8:	mov	r1, sl
   17fcc:	mov	r0, r8
   17fd0:	bl	11a90 <fputc@plt>
   17fd4:	cmp	r7, r6
   17fd8:	bne	17fc4 <__assert_fail@plt+0x6420>
   17fdc:	b	17288 <__assert_fail@plt+0x56e4>
   17fe0:	mov	r8, #32
   17fe4:	add	r6, r6, #1
   17fe8:	mov	r1, sl
   17fec:	mov	r0, r8
   17ff0:	bl	11a90 <fputc@plt>
   17ff4:	cmp	r7, r6
   17ff8:	bne	17fe4 <__assert_fail@plt+0x6440>
   17ffc:	b	17104 <__assert_fail@plt+0x5560>
   18000:	ldr	ip, [sp, #1152]	; 0x480
   18004:	cmp	r2, r0
   18008:	movlt	r2, #0
   1800c:	movge	r2, #1
   18010:	cmp	ip, #43	; 0x2b
   18014:	beq	18318 <__assert_fail@plt+0x6774>
   18018:	str	ip, [sp, #28]
   1801c:	mov	lr, #0
   18020:	mov	ip, #4
   18024:	b	17490 <__assert_fail@plt+0x58ec>
   18028:	ldr	r3, [sp, #28]
   1802c:	sub	r7, r7, r0
   18030:	cmp	r3, #43	; 0x2b
   18034:	cmpne	r3, #48	; 0x30
   18038:	moveq	r6, #1
   1803c:	movne	r6, #0
   18040:	beq	1811c <__assert_fail@plt+0x6578>
   18044:	cmp	r7, #0
   18048:	movne	r8, #32
   1804c:	beq	17e68 <__assert_fail@plt+0x62c4>
   18050:	add	r6, r6, #1
   18054:	mov	r1, sl
   18058:	mov	r0, r8
   1805c:	bl	11a90 <fputc@plt>
   18060:	cmp	r7, r6
   18064:	bne	18050 <__assert_fail@plt+0x64ac>
   18068:	b	17e68 <__assert_fail@plt+0x62c4>
   1806c:	cmp	r2, r0
   18070:	movlt	r2, #0
   18074:	movge	r2, #1
   18078:	b	1747c <__assert_fail@plt+0x58d8>
   1807c:	cmp	r5, #0
   18080:	beq	175ec <__assert_fail@plt+0x5a48>
   18084:	mov	r6, #0
   18088:	mov	r7, #48	; 0x30
   1808c:	add	r6, r6, #1
   18090:	mov	r1, sl
   18094:	mov	r0, r7
   18098:	bl	11a90 <fputc@plt>
   1809c:	cmp	r5, r6
   180a0:	bne	1808c <__assert_fail@plt+0x64e8>
   180a4:	b	175ec <__assert_fail@plt+0x5a48>
   180a8:	mov	ip, #2
   180ac:	mov	r0, #99	; 0x63
   180b0:	cmp	r0, r3
   180b4:	movcs	r0, #0
   180b8:	movcc	r0, #1
   180bc:	cmp	r7, ip
   180c0:	movle	lr, r0
   180c4:	orrgt	lr, r0, #1
   180c8:	mov	r0, #43	; 0x2b
   180cc:	str	r0, [sp, #28]
   180d0:	b	17490 <__assert_fail@plt+0x58ec>
   180d4:	cmp	r5, lr
   180d8:	bge	18274 <__assert_fail@plt+0x66d0>
   180dc:	cmp	r2, #0
   180e0:	rsb	r3, r3, #0
   180e4:	bne	17470 <__assert_fail@plt+0x58cc>
   180e8:	ldr	r2, [sp, #1152]	; 0x480
   180ec:	cmp	r2, #43	; 0x2b
   180f0:	beq	18494 <__assert_fail@plt+0x68f0>
   180f4:	mov	lr, #0
   180f8:	str	r2, [sp, #28]
   180fc:	str	lr, [sp, #44]	; 0x2c
   18100:	mov	r2, #1
   18104:	mov	ip, #2
   18108:	b	17490 <__assert_fail@plt+0x58ec>
   1810c:	mov	r3, #0
   18110:	mov	r2, #1
   18114:	str	r3, [sp, #44]	; 0x2c
   18118:	b	17a14 <__assert_fail@plt+0x5e70>
   1811c:	cmp	r7, #0
   18120:	beq	17e68 <__assert_fail@plt+0x62c4>
   18124:	mov	r6, #0
   18128:	mov	r8, #48	; 0x30
   1812c:	add	r6, r6, #1
   18130:	mov	r1, sl
   18134:	mov	r0, r8
   18138:	bl	11a90 <fputc@plt>
   1813c:	cmp	r7, r6
   18140:	bne	1812c <__assert_fail@plt+0x6588>
   18144:	b	17e68 <__assert_fail@plt+0x62c4>
   18148:	add	r2, r4, #2
   1814c:	mov	r6, #1
   18150:	mov	r0, r2
   18154:	ldrb	r3, [r2], #1
   18158:	add	r6, r6, #1
   1815c:	cmp	r3, #58	; 0x3a
   18160:	bne	17c74 <__assert_fail@plt+0x60d0>
   18164:	b	18150 <__assert_fail@plt+0x65ac>
   18168:	sub	r3, r3, #1
   1816c:	tst	r3, #3
   18170:	ldrne	r3, [pc, #-3216]	; 174e8 <__assert_fail@plt+0x5944>
   18174:	bne	181bc <__assert_fail@plt+0x6618>
   18178:	ldr	r2, [pc, #-3232]	; 174e0 <__assert_fail@plt+0x593c>
   1817c:	mov	r0, #100	; 0x64
   18180:	smull	r2, ip, r2, r3
   18184:	asr	r2, r3, #31
   18188:	rsb	lr, r2, ip, asr #5
   1818c:	mul	r0, r0, lr
   18190:	cmp	r3, r0
   18194:	ldrne	r3, [pc, #-3256]	; 174e4 <__assert_fail@plt+0x5940>
   18198:	bne	181bc <__assert_fail@plt+0x6618>
   1819c:	rsb	r2, r2, ip, asr #7
   181a0:	mov	ip, #400	; 0x190
   181a4:	ldr	r0, [pc, #-3268]	; 174e8 <__assert_fail@plt+0x5944>
   181a8:	mul	r2, ip, r2
   181ac:	sub	ip, ip, #34	; 0x22
   181b0:	cmp	r3, r2
   181b4:	movne	r3, r0
   181b8:	moveq	r3, ip
   181bc:	add	r3, r6, r3
   181c0:	sub	r2, r3, r9
   181c4:	ldr	ip, [pc, #-3292]	; 174f0 <__assert_fail@plt+0x594c>
   181c8:	add	r2, r2, #380	; 0x17c
   181cc:	add	r2, r2, #2
   181d0:	mvn	r0, #0
   181d4:	smull	ip, lr, ip, r2
   181d8:	add	lr, lr, r2
   181dc:	asr	ip, r2, #31
   181e0:	rsb	ip, ip, lr, asr #2
   181e4:	mov	r6, r0
   181e8:	rsb	ip, ip, ip, lsl #3
   181ec:	sub	ip, r2, ip
   181f0:	sub	r3, r3, ip
   181f4:	add	r3, r3, #3
   181f8:	ldr	lr, [pc, #-3348]	; 174ec <__assert_fail@plt+0x5948>
   181fc:	b	17418 <__assert_fail@plt+0x5874>
   18200:	ldr	r2, [pc, #-3352]	; 174f0 <__assert_fail@plt+0x594c>
   18204:	mov	ip, #2
   18208:	smull	r0, r2, r2, r3
   1820c:	add	r0, r2, r3
   18210:	asr	r2, r3, #31
   18214:	rsb	r2, r2, r0, asr #2
   18218:	add	r2, r2, #1
   1821c:	b	17150 <__assert_fail@plt+0x55ac>
   18220:	cmp	r5, lr
   18224:	movge	r2, #0
   18228:	movlt	r2, #1
   1822c:	str	r2, [sp, #44]	; 0x2c
   18230:	ldr	r2, [sp, #28]
   18234:	add	r3, r5, #1888	; 0x760
   18238:	add	r3, r3, #12
   1823c:	cmp	r2, #0
   18240:	add	r3, r3, r0
   18244:	bne	17d50 <__assert_fail@plt+0x61ac>
   18248:	ldr	r2, [sp, #1152]	; 0x480
   1824c:	cmp	r2, #43	; 0x2b
   18250:	beq	18284 <__assert_fail@plt+0x66e0>
   18254:	mov	r0, r2
   18258:	cmp	r5, lr
   1825c:	movlt	r2, #0
   18260:	movge	r2, #1
   18264:	str	r0, [sp, #28]
   18268:	mov	lr, #0
   1826c:	mov	ip, #4
   18270:	b	17490 <__assert_fail@plt+0x58ec>
   18274:	cmp	r2, #0
   18278:	add	r3, r3, #100	; 0x64
   1827c:	beq	180e8 <__assert_fail@plt+0x6544>
   18280:	b	17470 <__assert_fail@plt+0x58cc>
   18284:	cmp	r5, lr
   18288:	movlt	r2, #0
   1828c:	movge	r2, #1
   18290:	mov	ip, #4
   18294:	ldr	r0, [pc, #-3496]	; 174f4 <__assert_fail@plt+0x5950>
   18298:	b	180b0 <__assert_fail@plt+0x650c>
   1829c:	mov	r7, r3
   182a0:	mov	r5, #1
   182a4:	b	170a8 <__assert_fail@plt+0x5504>
   182a8:	mov	ip, #4
   182ac:	uxtb	r2, r2
   182b0:	ldr	r0, [pc, #-3524]	; 174f4 <__assert_fail@plt+0x5950>
   182b4:	b	180b0 <__assert_fail@plt+0x650c>
   182b8:	mov	r5, #1
   182bc:	b	178c4 <__assert_fail@plt+0x5d20>
   182c0:	mov	r3, sl
   182c4:	mov	r2, #1
   182c8:	mov	r1, r5
   182cc:	add	r0, sp, #72	; 0x48
   182d0:	bl	11868 <fwrite@plt>
   182d4:	b	17914 <__assert_fail@plt+0x5d70>
   182d8:	subeq	r3, r3, r0, lsl #1
   182dc:	addeq	r3, r3, #48	; 0x30
   182e0:	strbeq	r3, [sp, #72]	; 0x48
   182e4:	b	178c4 <__assert_fail@plt+0x5d20>
   182e8:	mov	r9, #32
   182ec:	add	r7, r7, #1
   182f0:	mov	r1, sl
   182f4:	mov	r0, r9
   182f8:	bl	11a90 <fputc@plt>
   182fc:	cmp	r5, r7
   18300:	bhi	182ec <__assert_fail@plt+0x6748>
   18304:	b	17984 <__assert_fail@plt+0x5de0>
   18308:	cmn	r6, #1
   1830c:	beq	166b8 <__assert_fail@plt+0x4b14>
   18310:	mov	r8, #0
   18314:	b	17984 <__assert_fail@plt+0x5de0>
   18318:	mov	ip, #4
   1831c:	ldr	r0, [pc, #-3632]	; 174f4 <__assert_fail@plt+0x5950>
   18320:	b	180b0 <__assert_fail@plt+0x650c>
   18324:	cmp	r9, #0
   18328:	beq	16b64 <__assert_fail@plt+0x4fc0>
   1832c:	bl	11928 <__ctype_tolower_loc@plt>
   18330:	ldr	r5, [sp, #56]	; 0x38
   18334:	add	r9, r5, r9
   18338:	mov	r6, r0
   1833c:	ldrb	r2, [r5], #1
   18340:	ldr	r3, [r6]
   18344:	mov	r1, sl
   18348:	ldr	r0, [r3, r2, lsl #2]
   1834c:	bl	11a90 <fputc@plt>
   18350:	cmp	r9, r5
   18354:	bne	1833c <__assert_fail@plt+0x6798>
   18358:	b	16b64 <__assert_fail@plt+0x4fc0>
   1835c:	ldr	r3, [sp, #1168]	; 0x490
   18360:	mov	ip, #43	; 0x2b
   18364:	str	r3, [sp, #16]
   18368:	ldr	r3, [sp, #1164]	; 0x48c
   1836c:	mov	r9, #4
   18370:	str	r3, [sp, #12]
   18374:	ldr	r3, [sp, #1160]	; 0x488
   18378:	mov	r0, r8
   1837c:	str	r3, [sp, #8]
   18380:	str	r9, [sp, #4]
   18384:	str	ip, [sp]
   18388:	ldr	r3, [sp, #36]	; 0x24
   1838c:	ldr	r2, [sp, #32]
   18390:	ldr	r1, [pc, #-3744]	; 174f8 <__assert_fail@plt+0x5954>
   18394:	str	ip, [sp, #28]
   18398:	mov	r5, r8
   1839c:	bl	16588 <__assert_fail@plt+0x49e4>
   183a0:	ldr	r8, [pc, #-3760]	; 174f8 <__assert_fail@plt+0x5954>
   183a4:	b	17578 <__assert_fail@plt+0x59d4>
   183a8:	cmp	r5, #0
   183ac:	bne	1844c <__assert_fail@plt+0x68a8>
   183b0:	cmp	r0, #0
   183b4:	moveq	lr, #1
   183b8:	moveq	ip, #3
   183bc:	beq	17170 <__assert_fail@plt+0x55cc>
   183c0:	mov	ip, #100	; 0x64
   183c4:	mov	lr, #1
   183c8:	mla	r3, ip, r3, r0
   183cc:	mov	ip, #6
   183d0:	mov	r0, #4
   183d4:	b	17170 <__assert_fail@plt+0x55cc>
   183d8:	mov	r8, #32
   183dc:	add	r6, r6, #1
   183e0:	mov	r1, sl
   183e4:	mov	r0, r8
   183e8:	bl	11a90 <fputc@plt>
   183ec:	cmp	r7, r6
   183f0:	bne	183dc <__assert_fail@plt+0x6838>
   183f4:	b	17bcc <__assert_fail@plt+0x6028>
   183f8:	mov	r7, r3
   183fc:	mov	r5, #1
   18400:	b	17b70 <__assert_fail@plt+0x5fcc>
   18404:	ldr	r2, [sp, #40]	; 0x28
   18408:	mov	r3, #75	; 0x4b
   1840c:	str	r3, [r2]
   18410:	b	166c4 <__assert_fail@plt+0x4b20>
   18414:	mov	r7, r3
   18418:	mov	r5, #1
   1841c:	b	1722c <__assert_fail@plt+0x5688>
   18420:	sub	r0, r0, #2000	; 0x7d0
   18424:	cmp	r2, r0
   18428:	rsblt	r3, r3, #0
   1842c:	addge	r3, r3, #100	; 0x64
   18430:	b	17adc <__assert_fail@plt+0x5f38>
   18434:	mov	r1, r9
   18438:	mov	r3, sl
   1843c:	mov	r2, #1
   18440:	ldr	r0, [sp, #56]	; 0x38
   18444:	bl	11868 <fwrite@plt>
   18448:	b	16b64 <__assert_fail@plt+0x4fc0>
   1844c:	mov	lr, #100	; 0x64
   18450:	ldr	ip, [pc, #-3932]	; 174fc <__assert_fail@plt+0x5958>
   18454:	mul	r0, lr, r0
   18458:	mov	lr, #1
   1845c:	mla	r3, ip, r3, r0
   18460:	mov	r0, #20
   18464:	add	r3, r3, r5
   18468:	mov	ip, #9
   1846c:	b	17170 <__assert_fail@plt+0x55cc>
   18470:	mov	ip, #100	; 0x64
   18474:	mov	lr, #1
   18478:	mla	r3, ip, r3, r0
   1847c:	mov	ip, #5
   18480:	b	17490 <__assert_fail@plt+0x58ec>
   18484:	mov	r3, #1
   18488:	mov	r2, #0
   1848c:	str	r3, [sp, #44]	; 0x2c
   18490:	b	17a14 <__assert_fail@plt+0x5e70>
   18494:	ldr	r2, [sp, #28]
   18498:	mov	ip, #2
   1849c:	str	r2, [sp, #44]	; 0x2c
   184a0:	mov	r0, #99	; 0x63
   184a4:	mov	r2, #1
   184a8:	b	180b0 <__assert_fail@plt+0x650c>
   184ac:	push	{r4, r5, lr}
   184b0:	sub	sp, sp, #36	; 0x24
   184b4:	add	lr, sp, #32
   184b8:	ldr	r5, [sp, #48]	; 0x30
   184bc:	mov	ip, #0
   184c0:	mvn	r4, #0
   184c4:	str	r3, [sp, #12]
   184c8:	strb	ip, [lr, #-1]!
   184cc:	mov	r3, ip
   184d0:	str	ip, [sp]
   184d4:	str	lr, [sp, #8]
   184d8:	str	r5, [sp, #16]
   184dc:	str	r4, [sp, #4]
   184e0:	bl	16588 <__assert_fail@plt+0x49e4>
   184e4:	add	sp, sp, #36	; 0x24
   184e8:	pop	{r4, r5, pc}
   184ec:	push	{r4, r5, lr}
   184f0:	sub	sp, sp, #12
   184f4:	mov	r5, r0
   184f8:	bl	119b8 <__errno_location@plt>
   184fc:	mov	r2, #0
   18500:	mov	r4, r0
   18504:	ldr	r3, [r0]
   18508:	str	r2, [r4]
   1850c:	mov	r0, r5
   18510:	str	r3, [sp]
   18514:	str	r3, [sp, #4]
   18518:	bl	11754 <free@plt>
   1851c:	ldr	r3, [r4]
   18520:	add	r2, sp, #8
   18524:	cmp	r3, #0
   18528:	moveq	r3, #4
   1852c:	movne	r3, #0
   18530:	add	r3, r2, r3
   18534:	ldr	r3, [r3, #-8]
   18538:	str	r3, [r4]
   1853c:	add	sp, sp, #12
   18540:	pop	{r4, r5, pc}
   18544:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18548:	mov	r6, r0
   1854c:	mov	r0, r2
   18550:	mov	r5, r2
   18554:	mov	r7, r1
   18558:	bl	11a0c <fileno@plt>
   1855c:	cmp	r0, #1
   18560:	beq	186ec <__assert_fail@plt+0x6b48>
   18564:	cmp	r0, #2
   18568:	beq	186e4 <__assert_fail@plt+0x6b40>
   1856c:	cmp	r0, #0
   18570:	beq	185ec <__assert_fail@plt+0x6a48>
   18574:	mov	r1, #2
   18578:	mov	r0, r1
   1857c:	bl	117e4 <dup2@plt>
   18580:	subs	r4, r0, #2
   18584:	movne	r4, #1
   18588:	mov	r1, #1
   1858c:	mov	r0, r1
   18590:	bl	117e4 <dup2@plt>
   18594:	mov	r1, #0
   18598:	subs	r9, r0, #1
   1859c:	mov	r0, r1
   185a0:	movne	r9, #1
   185a4:	bl	117e4 <dup2@plt>
   185a8:	subs	r8, r0, #0
   185ac:	beq	18640 <__assert_fail@plt+0x6a9c>
   185b0:	mov	r1, #0
   185b4:	ldr	r0, [pc, #408]	; 18754 <__assert_fail@plt+0x6bb0>
   185b8:	bl	118e0 <open64@plt>
   185bc:	cmp	r0, #0
   185c0:	moveq	r8, #1
   185c4:	beq	18640 <__assert_fail@plt+0x6a9c>
   185c8:	blt	18714 <__assert_fail@plt+0x6b70>
   185cc:	bl	11b80 <close@plt>
   185d0:	bl	119b8 <__errno_location@plt>
   185d4:	mov	r7, #9
   185d8:	mov	r8, #1
   185dc:	mov	r5, #0
   185e0:	mov	r6, r0
   185e4:	str	r7, [r0]
   185e8:	b	18618 <__assert_fail@plt+0x6a74>
   185ec:	mov	r4, r0
   185f0:	mov	r9, r0
   185f4:	mov	r8, r0
   185f8:	mov	r2, r5
   185fc:	mov	r1, r7
   18600:	mov	r0, r6
   18604:	bl	1194c <freopen64@plt>
   18608:	mov	r5, r0
   1860c:	bl	119b8 <__errno_location@plt>
   18610:	ldr	r7, [r0]
   18614:	mov	r6, r0
   18618:	cmp	r4, #0
   1861c:	bne	18684 <__assert_fail@plt+0x6ae0>
   18620:	cmp	r9, #0
   18624:	bne	186d8 <__assert_fail@plt+0x6b34>
   18628:	cmp	r8, #0
   1862c:	bne	18690 <__assert_fail@plt+0x6aec>
   18630:	cmp	r5, #0
   18634:	streq	r7, [r6]
   18638:	mov	r0, r5
   1863c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18640:	cmp	r9, #0
   18644:	bne	1869c <__assert_fail@plt+0x6af8>
   18648:	cmp	r4, #0
   1864c:	beq	185f8 <__assert_fail@plt+0x6a54>
   18650:	mov	r1, #0
   18654:	ldr	r0, [pc, #248]	; 18754 <__assert_fail@plt+0x6bb0>
   18658:	bl	118e0 <open64@plt>
   1865c:	cmp	r0, #2
   18660:	beq	185f8 <__assert_fail@plt+0x6a54>
   18664:	cmp	r0, #0
   18668:	blt	1873c <__assert_fail@plt+0x6b98>
   1866c:	bl	11b80 <close@plt>
   18670:	bl	119b8 <__errno_location@plt>
   18674:	mov	r7, #9
   18678:	mov	r6, r0
   1867c:	str	r7, [r0]
   18680:	mov	r5, #0
   18684:	mov	r0, #2
   18688:	bl	11b80 <close@plt>
   1868c:	b	18620 <__assert_fail@plt+0x6a7c>
   18690:	mov	r0, #0
   18694:	bl	11b80 <close@plt>
   18698:	b	18630 <__assert_fail@plt+0x6a8c>
   1869c:	mov	r1, #0
   186a0:	ldr	r0, [pc, #172]	; 18754 <__assert_fail@plt+0x6bb0>
   186a4:	bl	118e0 <open64@plt>
   186a8:	cmp	r0, #1
   186ac:	beq	18648 <__assert_fail@plt+0x6aa4>
   186b0:	cmp	r0, #0
   186b4:	blt	1872c <__assert_fail@plt+0x6b88>
   186b8:	bl	11b80 <close@plt>
   186bc:	bl	119b8 <__errno_location@plt>
   186c0:	mov	r7, #9
   186c4:	mov	r6, r0
   186c8:	str	r7, [r0]
   186cc:	cmp	r4, #0
   186d0:	bne	1874c <__assert_fail@plt+0x6ba8>
   186d4:	mov	r5, r4
   186d8:	mov	r0, #1
   186dc:	bl	11b80 <close@plt>
   186e0:	b	18628 <__assert_fail@plt+0x6a84>
   186e4:	mov	r4, #0
   186e8:	b	18588 <__assert_fail@plt+0x69e4>
   186ec:	mov	r1, #0
   186f0:	mov	r0, r1
   186f4:	bl	117e4 <dup2@plt>
   186f8:	subs	r4, r0, #0
   186fc:	moveq	r9, r4
   18700:	moveq	r8, r4
   18704:	beq	185f8 <__assert_fail@plt+0x6a54>
   18708:	mov	r4, #0
   1870c:	mov	r9, r4
   18710:	b	185b0 <__assert_fail@plt+0x6a0c>
   18714:	bl	119b8 <__errno_location@plt>
   18718:	mov	r8, #1
   1871c:	mov	r5, #0
   18720:	mov	r6, r0
   18724:	ldr	r7, [r0]
   18728:	b	18618 <__assert_fail@plt+0x6a74>
   1872c:	bl	119b8 <__errno_location@plt>
   18730:	mov	r6, r0
   18734:	ldr	r7, [r0]
   18738:	b	186cc <__assert_fail@plt+0x6b28>
   1873c:	bl	119b8 <__errno_location@plt>
   18740:	mov	r6, r0
   18744:	ldr	r7, [r0]
   18748:	b	18680 <__assert_fail@plt+0x6adc>
   1874c:	mov	r9, r4
   18750:	b	18680 <__assert_fail@plt+0x6adc>
   18754:	andeq	r9, r3, r0, lsl #26
   18758:	push	{r4, r5, r6, r7, r8, lr}
   1875c:	sub	sp, sp, #8
   18760:	ldmib	r0, {ip, lr}
   18764:	mov	r4, r0
   18768:	ldr	r5, [sp, #32]
   1876c:	cmp	lr, ip
   18770:	beq	18788 <__assert_fail@plt+0x6be4>
   18774:	str	r5, [sp, #32]
   18778:	mov	r0, r4
   1877c:	add	sp, sp, #8
   18780:	pop	{r4, r5, r6, r7, r8, lr}
   18784:	b	11a3c <fseeko64@plt>
   18788:	ldr	lr, [r0, #20]
   1878c:	ldr	ip, [r0, #16]
   18790:	cmp	lr, ip
   18794:	bne	18774 <__assert_fail@plt+0x6bd0>
   18798:	ldr	r8, [r0, #36]	; 0x24
   1879c:	cmp	r8, #0
   187a0:	bne	18774 <__assert_fail@plt+0x6bd0>
   187a4:	mov	r6, r2
   187a8:	mov	r7, r3
   187ac:	bl	11a0c <fileno@plt>
   187b0:	mov	r2, r6
   187b4:	mov	r3, r7
   187b8:	str	r5, [sp]
   187bc:	bl	11874 <lseek64@plt>
   187c0:	mvn	r3, #0
   187c4:	mvn	r2, #0
   187c8:	cmp	r1, r3
   187cc:	cmpeq	r0, r2
   187d0:	beq	187f0 <__assert_fail@plt+0x6c4c>
   187d4:	ldr	r3, [r4]
   187d8:	strd	r0, [r4, #80]	; 0x50
   187dc:	mov	r0, r8
   187e0:	bic	r3, r3, #16
   187e4:	str	r3, [r4]
   187e8:	add	sp, sp, #8
   187ec:	pop	{r4, r5, r6, r7, r8, pc}
   187f0:	mvn	r0, #0
   187f4:	b	187e8 <__assert_fail@plt+0x6c44>
   187f8:	ldrd	r2, [r1, #8]
   187fc:	push	{r4, r5}
   18800:	ldrd	r4, [r0, #8]
   18804:	cmp	r5, r3
   18808:	cmpeq	r4, r2
   1880c:	movne	r0, #0
   18810:	beq	1881c <__assert_fail@plt+0x6c78>
   18814:	pop	{r4, r5}
   18818:	bx	lr
   1881c:	ldrd	r4, [r0]
   18820:	ldrd	r2, [r1]
   18824:	cmp	r5, r3
   18828:	cmpeq	r4, r2
   1882c:	moveq	r0, #1
   18830:	movne	r0, #0
   18834:	pop	{r4, r5}
   18838:	bx	lr
   1883c:	push	{r4, lr}
   18840:	mov	r2, r1
   18844:	mov	r3, #0
   18848:	ldrd	r0, [r0, #8]
   1884c:	bl	381bc <__assert_fail@plt+0x26618>
   18850:	mov	r0, r2
   18854:	pop	{r4, pc}
   18858:	push	{r4, lr}
   1885c:	mov	r2, r1
   18860:	mov	r3, #0
   18864:	ldrd	r0, [r0]
   18868:	bl	381bc <__assert_fail@plt+0x26618>
   1886c:	mov	r0, r2
   18870:	pop	{r4, pc}
   18874:	push	{r4, r5}
   18878:	ldrd	r2, [r1]
   1887c:	ldrd	r4, [r0]
   18880:	cmp	r5, r3
   18884:	cmpeq	r4, r2
   18888:	moveq	r0, #1
   1888c:	movne	r0, #0
   18890:	pop	{r4, r5}
   18894:	bx	lr
   18898:	ldr	r2, [r0]
   1889c:	ldr	r3, [r1]
   188a0:	ldrd	r0, [r2, #160]	; 0xa0
   188a4:	ldrd	r2, [r3, #160]	; 0xa0
   188a8:	cmp	r1, r3
   188ac:	cmpeq	r0, r2
   188b0:	movhi	r0, #1
   188b4:	movls	r0, #0
   188b8:	movcc	r3, #1
   188bc:	movcs	r3, #0
   188c0:	sub	r0, r0, r3
   188c4:	bx	lr
   188c8:	push	{r4, r5, r6, r7, lr}
   188cc:	sub	sp, sp, #100	; 0x64
   188d0:	ldr	r4, [r0, #44]	; 0x2c
   188d4:	ldr	r3, [r4, #48]	; 0x30
   188d8:	tst	r3, #512	; 0x200
   188dc:	beq	18950 <__assert_fail@plt+0x6dac>
   188e0:	ldr	r6, [r4, #52]	; 0x34
   188e4:	mov	r7, r1
   188e8:	cmp	r6, #0
   188ec:	mov	r5, r0
   188f0:	beq	1891c <__assert_fail@plt+0x6d78>
   188f4:	ldrd	r2, [r5, #64]	; 0x40
   188f8:	add	r1, sp, #96	; 0x60
   188fc:	mov	r0, r6
   18900:	strd	r2, [r1, #-88]!	; 0xffffffa8
   18904:	bl	1b388 <__assert_fail@plt+0x97e4>
   18908:	cmp	r0, #0
   1890c:	beq	18948 <__assert_fail@plt+0x6da4>
   18910:	ldr	r0, [r0, #8]
   18914:	add	sp, sp, #100	; 0x64
   18918:	pop	{r4, r5, r6, r7, pc}
   1891c:	ldr	r3, [pc, #168]	; 189cc <__assert_fail@plt+0x6e28>
   18920:	mov	r1, r6
   18924:	str	r3, [sp]
   18928:	ldr	r2, [pc, #160]	; 189d0 <__assert_fail@plt+0x6e2c>
   1892c:	ldr	r3, [pc, #160]	; 189d4 <__assert_fail@plt+0x6e30>
   18930:	mov	r0, #13
   18934:	bl	1b668 <__assert_fail@plt+0x9ac4>
   18938:	cmp	r0, #0
   1893c:	mov	r6, r0
   18940:	str	r0, [r4, #52]	; 0x34
   18944:	bne	188f4 <__assert_fail@plt+0x6d50>
   18948:	cmp	r7, #0
   1894c:	bge	1895c <__assert_fail@plt+0x6db8>
   18950:	mov	r0, #0
   18954:	add	sp, sp, #100	; 0x64
   18958:	pop	{r4, r5, r6, r7, pc}
   1895c:	mov	r0, r7
   18960:	add	r1, sp, #8
   18964:	bl	116a0 <fstatfs64@plt>
   18968:	cmp	r0, #0
   1896c:	bne	18950 <__assert_fail@plt+0x6dac>
   18970:	cmp	r6, #0
   18974:	beq	189c0 <__assert_fail@plt+0x6e1c>
   18978:	mov	r0, #16
   1897c:	bl	36944 <__assert_fail@plt+0x24da0>
   18980:	subs	r4, r0, #0
   18984:	beq	189c0 <__assert_fail@plt+0x6e1c>
   18988:	ldrd	r2, [r5, #64]	; 0x40
   1898c:	ldr	r1, [sp, #8]
   18990:	mov	r0, r6
   18994:	str	r1, [r4, #8]
   18998:	strd	r2, [r4]
   1899c:	mov	r1, r4
   189a0:	bl	1bfd0 <__assert_fail@plt+0xa42c>
   189a4:	cmp	r0, #0
   189a8:	beq	189b8 <__assert_fail@plt+0x6e14>
   189ac:	cmp	r4, r0
   189b0:	beq	189c0 <__assert_fail@plt+0x6e1c>
   189b4:	bl	11b68 <abort@plt>
   189b8:	mov	r0, r4
   189bc:	bl	184ec <__assert_fail@plt+0x6948>
   189c0:	ldr	r0, [sp, #8]
   189c4:	add	sp, sp, #100	; 0x64
   189c8:	pop	{r4, r5, r6, r7, pc}
   189cc:	andeq	r8, r1, ip, ror #9
   189d0:	andeq	r8, r1, r8, asr r8
   189d4:	andeq	r8, r1, r4, ror r8
   189d8:	push	{r4, r5, r6, lr}
   189dc:	mov	r4, r2
   189e0:	ldr	r2, [r2, #48]	; 0x30
   189e4:	sub	sp, sp, #8
   189e8:	cmp	r2, #0
   189ec:	add	r5, r4, #64	; 0x40
   189f0:	bne	18a48 <__assert_fail@plt+0x6ea4>
   189f4:	tst	r1, #1
   189f8:	beq	18a48 <__assert_fail@plt+0x6ea4>
   189fc:	mov	r2, r5
   18a00:	ldr	r1, [r4, #24]
   18a04:	mov	r0, #3
   18a08:	bl	11b38 <__xstat64@plt>
   18a0c:	cmp	r0, #0
   18a10:	beq	18a84 <__assert_fail@plt+0x6ee0>
   18a14:	bl	119b8 <__errno_location@plt>
   18a18:	ldr	r3, [r0]
   18a1c:	mov	r6, r0
   18a20:	cmp	r3, #2
   18a24:	beq	18afc <__assert_fail@plt+0x6f58>
   18a28:	str	r3, [r4, #32]
   18a2c:	mov	r0, r5
   18a30:	mov	r2, #104	; 0x68
   18a34:	mov	r1, #0
   18a38:	bl	119e8 <memset@plt>
   18a3c:	mov	r0, #10
   18a40:	add	sp, sp, #8
   18a44:	pop	{r4, r5, r6, pc}
   18a48:	lsl	r1, r1, #30
   18a4c:	orrs	r3, r3, r1, lsr #31
   18a50:	bne	189fc <__assert_fail@plt+0x6e58>
   18a54:	mov	r3, #256	; 0x100
   18a58:	ldr	r2, [r4, #24]
   18a5c:	mov	r1, r0
   18a60:	str	r3, [sp]
   18a64:	mov	r0, #3
   18a68:	mov	r3, r5
   18a6c:	bl	11820 <__fxstatat64@plt>
   18a70:	cmp	r0, #0
   18a74:	beq	18a84 <__assert_fail@plt+0x6ee0>
   18a78:	bl	119b8 <__errno_location@plt>
   18a7c:	ldr	r3, [r0]
   18a80:	b	18a28 <__assert_fail@plt+0x6e84>
   18a84:	ldr	r0, [r4, #80]	; 0x50
   18a88:	and	r0, r0, #61440	; 0xf000
   18a8c:	cmp	r0, #16384	; 0x4000
   18a90:	beq	18ab4 <__assert_fail@plt+0x6f10>
   18a94:	cmp	r0, #40960	; 0xa000
   18a98:	moveq	r0, #12
   18a9c:	beq	18a40 <__assert_fail@plt+0x6e9c>
   18aa0:	cmp	r0, #32768	; 0x8000
   18aa4:	movne	r0, #3
   18aa8:	moveq	r0, #8
   18aac:	add	sp, sp, #8
   18ab0:	pop	{r4, r5, r6, pc}
   18ab4:	ldrb	r3, [r4, #168]	; 0xa8
   18ab8:	cmp	r3, #46	; 0x2e
   18abc:	beq	18ac8 <__assert_fail@plt+0x6f24>
   18ac0:	mov	r0, #1
   18ac4:	b	18a40 <__assert_fail@plt+0x6e9c>
   18ac8:	ldrb	r3, [r4, #169]	; 0xa9
   18acc:	cmp	r3, #0
   18ad0:	beq	18ae8 <__assert_fail@plt+0x6f44>
   18ad4:	ldr	r3, [r4, #168]	; 0xa8
   18ad8:	bic	r3, r3, #-16777216	; 0xff000000
   18adc:	bic	r3, r3, #255	; 0xff
   18ae0:	cmp	r3, #11776	; 0x2e00
   18ae4:	bne	18ac0 <__assert_fail@plt+0x6f1c>
   18ae8:	ldr	r0, [r4, #48]	; 0x30
   18aec:	cmp	r0, #0
   18af0:	movne	r0, #5
   18af4:	moveq	r0, #1
   18af8:	b	18a40 <__assert_fail@plt+0x6e9c>
   18afc:	mov	r2, r5
   18b00:	ldr	r1, [r4, #24]
   18b04:	mov	r0, #3
   18b08:	bl	11b8c <__lxstat64@plt>
   18b0c:	cmp	r0, #0
   18b10:	streq	r0, [r6]
   18b14:	moveq	r0, #13
   18b18:	beq	18a40 <__assert_fail@plt+0x6e9c>
   18b1c:	ldr	r3, [r6]
   18b20:	b	18a28 <__assert_fail@plt+0x6e84>
   18b24:	ldr	r3, [pc, #172]	; 18bd8 <__assert_fail@plt+0x7034>
   18b28:	push	{r4, r5, lr}
   18b2c:	and	r3, r3, r0
   18b30:	cmp	r3, #0
   18b34:	sub	sp, sp, #28
   18b38:	bne	18b80 <__assert_fail@plt+0x6fdc>
   18b3c:	ldr	r3, [r2, #4]
   18b40:	cmp	r3, #0
   18b44:	beq	18b78 <__assert_fail@plt+0x6fd4>
   18b48:	ldr	r0, [r3, #48]	; 0x30
   18b4c:	cmp	r0, #0
   18b50:	blt	18b78 <__assert_fail@plt+0x6fd4>
   18b54:	ldr	ip, [r1]
   18b58:	ldrd	r0, [ip, #16]
   18b5c:	orrs	r1, r0, r1
   18b60:	beq	18bd4 <__assert_fail@plt+0x7030>
   18b64:	ldrd	r4, [ip]
   18b68:	ldrd	r0, [r2, #160]	; 0xa0
   18b6c:	cmp	r5, r1
   18b70:	cmpeq	r4, r0
   18b74:	beq	18bb0 <__assert_fail@plt+0x700c>
   18b78:	add	sp, sp, #28
   18b7c:	pop	{r4, r5, pc}
   18b80:	ldrd	r4, [r2, #64]	; 0x40
   18b84:	ldrd	r2, [r2, #160]	; 0xa0
   18b88:	ldr	r0, [r1]
   18b8c:	mov	r1, sp
   18b90:	strd	r4, [sp]
   18b94:	strd	r2, [sp, #8]
   18b98:	bl	1c294 <__assert_fail@plt+0xa6f0>
   18b9c:	cmp	r0, #0
   18ba0:	beq	18bd4 <__assert_fail@plt+0x7030>
   18ba4:	bl	184ec <__assert_fail@plt+0x6948>
   18ba8:	add	sp, sp, #28
   18bac:	pop	{r4, r5, pc}
   18bb0:	ldrd	r0, [ip, #8]
   18bb4:	ldrd	r4, [r2, #64]	; 0x40
   18bb8:	cmp	r1, r5
   18bbc:	cmpeq	r0, r4
   18bc0:	ldrdeq	r0, [r3, #64]	; 0x40
   18bc4:	ldrdeq	r2, [r3, #160]	; 0xa0
   18bc8:	strdeq	r0, [ip, #8]
   18bcc:	strdeq	r2, [ip]
   18bd0:	b	18b78 <__assert_fail@plt+0x6fd4>
   18bd4:	bl	11b68 <abort@plt>
   18bd8:	andeq	r0, r0, r2, lsl #2
   18bdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18be0:	subs	sl, r3, #0
   18be4:	sub	sp, sp, #104	; 0x68
   18be8:	mov	r5, r0
   18bec:	mov	r6, r1
   18bf0:	mov	r4, r2
   18bf4:	ldr	r9, [r0, #48]	; 0x30
   18bf8:	beq	18c74 <__assert_fail@plt+0x70d0>
   18bfc:	ldr	r1, [pc, #612]	; 18e68 <__assert_fail@plt+0x72c4>
   18c00:	mov	r0, sl
   18c04:	bl	1170c <strcmp@plt>
   18c08:	cmp	r0, #0
   18c0c:	bne	18c74 <__assert_fail@plt+0x70d0>
   18c10:	tst	r9, #4
   18c14:	bne	18c7c <__assert_fail@plt+0x70d8>
   18c18:	cmp	r4, #0
   18c1c:	bge	18e54 <__assert_fail@plt+0x72b0>
   18c20:	tst	r9, #512	; 0x200
   18c24:	beq	18d68 <__assert_fail@plt+0x71c4>
   18c28:	add	r7, r5, #60	; 0x3c
   18c2c:	mov	r0, r7
   18c30:	bl	1d784 <__assert_fail@plt+0xbbe0>
   18c34:	cmp	r0, #0
   18c38:	beq	18de4 <__assert_fail@plt+0x7240>
   18c3c:	ldr	r2, [pc, #552]	; 18e6c <__assert_fail@plt+0x72c8>
   18c40:	tst	r9, #16
   18c44:	ldr	r1, [pc, #548]	; 18e70 <__assert_fail@plt+0x72cc>
   18c48:	mov	r8, #1
   18c4c:	movne	r1, r2
   18c50:	mov	r2, r1
   18c54:	ldr	r0, [r5, #32]
   18c58:	mov	r1, sl
   18c5c:	bl	1ebc4 <__assert_fail@plt+0xd020>
   18c60:	mov	r7, r0
   18c64:	cmp	r7, #0
   18c68:	blt	18e28 <__assert_fail@plt+0x7284>
   18c6c:	ldr	r9, [r5, #48]	; 0x30
   18c70:	b	18cb0 <__assert_fail@plt+0x710c>
   18c74:	ands	r8, r9, #4
   18c78:	beq	18ca4 <__assert_fail@plt+0x7100>
   18c7c:	mvn	r3, r4
   18c80:	lsr	r3, r3, #31
   18c84:	ands	r9, r3, r9, lsr #9
   18c88:	beq	18c98 <__assert_fail@plt+0x70f4>
   18c8c:	mov	r0, r4
   18c90:	bl	11b80 <close@plt>
   18c94:	mov	r9, #0
   18c98:	mov	r0, r9
   18c9c:	add	sp, sp, #104	; 0x68
   18ca0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ca4:	cmp	r4, #0
   18ca8:	movge	r7, r4
   18cac:	blt	18e34 <__assert_fail@plt+0x7290>
   18cb0:	tst	r9, #2
   18cb4:	bne	18cd4 <__assert_fail@plt+0x7130>
   18cb8:	cmp	sl, #0
   18cbc:	beq	18d2c <__assert_fail@plt+0x7188>
   18cc0:	mov	r0, sl
   18cc4:	ldr	r1, [pc, #412]	; 18e68 <__assert_fail@plt+0x72c4>
   18cc8:	bl	1170c <strcmp@plt>
   18ccc:	cmp	r0, #0
   18cd0:	bne	18d2c <__assert_fail@plt+0x7188>
   18cd4:	mov	r2, sp
   18cd8:	mov	r1, r7
   18cdc:	mov	r0, #3
   18ce0:	bl	11850 <__fxstat64@plt>
   18ce4:	cmp	r0, #0
   18ce8:	beq	18d44 <__assert_fail@plt+0x71a0>
   18cec:	mvn	r9, #0
   18cf0:	cmp	r4, #0
   18cf4:	bge	18c98 <__assert_fail@plt+0x70f4>
   18cf8:	bl	119b8 <__errno_location@plt>
   18cfc:	mov	r4, r0
   18d00:	mov	r0, r7
   18d04:	ldr	r5, [r4]
   18d08:	bl	11b80 <close@plt>
   18d0c:	str	r5, [r4]
   18d10:	b	18c98 <__assert_fail@plt+0x70f4>
   18d14:	ldrd	r0, [r6, #160]	; 0xa0
   18d18:	ldrd	r2, [sp, #96]	; 0x60
   18d1c:	cmp	r1, r3
   18d20:	cmpeq	r0, r2
   18d24:	bne	18d58 <__assert_fail@plt+0x71b4>
   18d28:	ldr	r9, [r5, #48]	; 0x30
   18d2c:	tst	r9, #512	; 0x200
   18d30:	bne	18d8c <__assert_fail@plt+0x71e8>
   18d34:	mov	r0, r7
   18d38:	bl	11ae4 <fchdir@plt>
   18d3c:	mov	r9, r0
   18d40:	b	18cf0 <__assert_fail@plt+0x714c>
   18d44:	ldrd	r0, [r6, #64]	; 0x40
   18d48:	ldrd	r2, [sp]
   18d4c:	cmp	r1, r3
   18d50:	cmpeq	r0, r2
   18d54:	beq	18d14 <__assert_fail@plt+0x7170>
   18d58:	bl	119b8 <__errno_location@plt>
   18d5c:	mov	r3, #2
   18d60:	str	r3, [r0]
   18d64:	b	18cec <__assert_fail@plt+0x7148>
   18d68:	ldr	r2, [pc, #252]	; 18e6c <__assert_fail@plt+0x72c8>
   18d6c:	tst	r9, #16
   18d70:	ldr	r1, [pc, #248]	; 18e70 <__assert_fail@plt+0x72cc>
   18d74:	mov	r8, #1
   18d78:	movne	r1, r2
   18d7c:	mov	r0, sl
   18d80:	bl	3772c <__assert_fail@plt+0x25b88>
   18d84:	mov	r7, r0
   18d88:	b	18c64 <__assert_fail@plt+0x70c0>
   18d8c:	ldr	r1, [r5, #32]
   18d90:	cmn	r1, #100	; 0x64
   18d94:	sub	r3, r7, r1
   18d98:	clz	r3, r3
   18d9c:	lsr	r3, r3, #5
   18da0:	moveq	r3, #0
   18da4:	cmp	r3, #0
   18da8:	bne	18e30 <__assert_fail@plt+0x728c>
   18dac:	cmp	r8, #0
   18db0:	beq	18e14 <__assert_fail@plt+0x7270>
   18db4:	lsr	r3, r9, #2
   18db8:	eor	r3, r3, #1
   18dbc:	cmp	r1, #0
   18dc0:	movlt	r3, #0
   18dc4:	andge	r3, r3, #1
   18dc8:	cmp	r3, #0
   18dcc:	beq	18dd8 <__assert_fail@plt+0x7234>
   18dd0:	mov	r0, r1
   18dd4:	bl	11b80 <close@plt>
   18dd8:	str	r7, [r5, #32]
   18ddc:	mov	r9, #0
   18de0:	b	18c98 <__assert_fail@plt+0x70f4>
   18de4:	mov	r0, r7
   18de8:	bl	1d7d0 <__assert_fail@plt+0xbc2c>
   18dec:	ldr	r9, [r5, #48]	; 0x30
   18df0:	subs	r7, r0, #0
   18df4:	movlt	r8, #1
   18df8:	andlt	r3, r9, #512	; 0x200
   18dfc:	blt	18e38 <__assert_fail@plt+0x7294>
   18e00:	tst	r9, #2
   18e04:	mov	r4, r7
   18e08:	mov	r8, #1
   18e0c:	beq	18d2c <__assert_fail@plt+0x7188>
   18e10:	b	18cd4 <__assert_fail@plt+0x7130>
   18e14:	add	r0, r5, #60	; 0x3c
   18e18:	bl	1d78c <__assert_fail@plt+0xbbe8>
   18e1c:	cmp	r0, #0
   18e20:	bge	18dd4 <__assert_fail@plt+0x7230>
   18e24:	b	18dd8 <__assert_fail@plt+0x7234>
   18e28:	mvn	r9, #0
   18e2c:	b	18c98 <__assert_fail@plt+0x70f4>
   18e30:	bl	11b68 <abort@plt>
   18e34:	and	r3, r9, #512	; 0x200
   18e38:	ldr	r2, [pc, #48]	; 18e70 <__assert_fail@plt+0x72cc>
   18e3c:	tst	r9, #16
   18e40:	ldr	r1, [pc, #36]	; 18e6c <__assert_fail@plt+0x72c8>
   18e44:	moveq	r1, r2
   18e48:	cmp	r3, #0
   18e4c:	bne	18c50 <__assert_fail@plt+0x70ac>
   18e50:	b	18d7c <__assert_fail@plt+0x71d8>
   18e54:	tst	r9, #2
   18e58:	mov	r7, r4
   18e5c:	mov	r8, #1
   18e60:	beq	18cc0 <__assert_fail@plt+0x711c>
   18e64:	b	18cd4 <__assert_fail@plt+0x7130>
   18e68:	andeq	r9, r3, ip, lsr sp
   18e6c:	andeq	ip, r8, r0, lsl #18
   18e70:	andeq	r4, r8, r0, lsl #18
   18e74:	ldr	r3, [r0]
   18e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e7c:	sub	sp, sp, #68	; 0x44
   18e80:	mov	r6, r0
   18e84:	str	r3, [sp, #8]
   18e88:	ldr	r3, [r3, #12]
   18e8c:	str	r1, [sp, #40]	; 0x28
   18e90:	cmp	r3, #0
   18e94:	str	r3, [sp, #44]	; 0x2c
   18e98:	beq	19480 <__assert_fail@plt+0x78dc>
   18e9c:	mov	r0, r3
   18ea0:	bl	11ad8 <dirfd@plt>
   18ea4:	cmp	r0, #0
   18ea8:	str	r0, [sp, #60]	; 0x3c
   18eac:	blt	198bc <__assert_fail@plt+0x7d18>
   18eb0:	ldr	r3, [r6, #44]	; 0x2c
   18eb4:	cmp	r3, #0
   18eb8:	beq	19b40 <__assert_fail@plt+0x7f9c>
   18ebc:	mvn	r3, #0
   18ec0:	str	r3, [sp, #24]
   18ec4:	ldr	r0, [r6, #48]	; 0x30
   18ec8:	ldr	r2, [sp, #8]
   18ecc:	mov	r3, #1
   18ed0:	str	r3, [sp, #52]	; 0x34
   18ed4:	ldr	r3, [r2, #40]	; 0x28
   18ed8:	ldr	r1, [r2, #28]
   18edc:	sub	r2, r3, #1
   18ee0:	ldrb	r1, [r1, r2]
   18ee4:	cmp	r1, #47	; 0x2f
   18ee8:	moveq	r3, r2
   18eec:	ands	r0, r0, #4
   18ef0:	movne	r0, #47	; 0x2f
   18ef4:	ldrne	r2, [r6, #24]
   18ef8:	streq	r0, [sp, #32]
   18efc:	addne	r1, r2, r3
   18f00:	strbne	r0, [r2, r3]
   18f04:	addne	r2, r1, #1
   18f08:	strne	r2, [sp, #32]
   18f0c:	ldr	r2, [sp, #8]
   18f10:	add	r3, r3, #1
   18f14:	ldr	r1, [r6, #36]	; 0x24
   18f18:	ldr	r2, [r2, #48]	; 0x30
   18f1c:	mov	r0, r3
   18f20:	str	r3, [sp, #12]
   18f24:	sub	r1, r1, r0
   18f28:	mov	r3, #0
   18f2c:	add	r2, r2, #1
   18f30:	mov	r7, r3
   18f34:	str	r3, [sp, #48]	; 0x30
   18f38:	str	r1, [sp, #20]
   18f3c:	str	r2, [sp, #28]
   18f40:	str	r3, [sp, #36]	; 0x24
   18f44:	str	r3, [sp]
   18f48:	mov	sl, r3
   18f4c:	str	r3, [sp, #16]
   18f50:	b	18fd4 <__assert_fail@plt+0x7430>
   18f54:	tst	r3, #251	; 0xfb
   18f58:	beq	190e8 <__assert_fail@plt+0x7544>
   18f5c:	lsr	r2, r1, #4
   18f60:	cmp	r3, #10
   18f64:	orrne	r2, r2, #1
   18f68:	tst	r2, #1
   18f6c:	beq	195ac <__assert_fail@plt+0x7a08>
   18f70:	sub	r3, r3, #1
   18f74:	mov	r2, #11
   18f78:	cmp	r3, #11
   18f7c:	strh	r2, [r4, #56]	; 0x38
   18f80:	bhi	19b5c <__assert_fail@plt+0x7fb8>
   18f84:	ldr	r2, [pc, #3040]	; 19b6c <__assert_fail@plt+0x7fc8>
   18f88:	ldr	r1, [r2, r3, lsl #2]
   18f8c:	mov	r2, #1
   18f90:	mov	r3, #0
   18f94:	str	r1, [r4, #80]	; 0x50
   18f98:	strd	r2, [r4, #112]	; 0x70
   18f9c:	ldr	r3, [sp, #16]
   18fa0:	str	r7, [r4, #8]
   18fa4:	cmp	r3, #0
   18fa8:	streq	r4, [sp, #16]
   18fac:	ldrne	r3, [sp]
   18fb0:	strne	r4, [r3, #8]
   18fb4:	ldr	r3, [pc, #2996]	; 19b70 <__assert_fail@plt+0x7fcc>
   18fb8:	cmp	sl, r3
   18fbc:	beq	19238 <__assert_fail@plt+0x7694>
   18fc0:	ldr	r3, [sp, #24]
   18fc4:	add	sl, sl, #1
   18fc8:	cmp	r3, sl
   18fcc:	bls	19350 <__assert_fail@plt+0x77ac>
   18fd0:	str	r4, [sp]
   18fd4:	ldr	r3, [sp, #8]
   18fd8:	ldr	r4, [r3, #12]
   18fdc:	cmp	r4, #0
   18fe0:	beq	19350 <__assert_fail@plt+0x77ac>
   18fe4:	bl	119b8 <__errno_location@plt>
   18fe8:	mov	fp, r0
   18fec:	mov	r0, r4
   18ff0:	str	r7, [fp]
   18ff4:	bl	11ab4 <readdir64@plt>
   18ff8:	subs	r8, r0, #0
   18ffc:	beq	1974c <__assert_fail@plt+0x7ba8>
   19000:	ldr	r3, [r6, #48]	; 0x30
   19004:	tst	r3, #32
   19008:	bne	19018 <__assert_fail@plt+0x7474>
   1900c:	ldrb	r3, [r8, #19]
   19010:	cmp	r3, #46	; 0x2e
   19014:	beq	1929c <__assert_fail@plt+0x76f8>
   19018:	add	r1, r8, #19
   1901c:	mov	r0, r1
   19020:	str	r1, [sp, #4]
   19024:	bl	11988 <strlen@plt>
   19028:	mov	r5, r0
   1902c:	add	r0, r0, #176	; 0xb0
   19030:	bic	r0, r0, #7
   19034:	bl	36944 <__assert_fail@plt+0x24da0>
   19038:	subs	r4, r0, #0
   1903c:	beq	19344 <__assert_fail@plt+0x77a0>
   19040:	add	r9, r4, #168	; 0xa8
   19044:	ldr	r1, [sp, #4]
   19048:	mov	r2, r5
   1904c:	mov	r0, r9
   19050:	bl	11784 <memcpy@plt>
   19054:	ldr	r3, [sp, #20]
   19058:	add	r1, r4, r5
   1905c:	ldr	r2, [r6, #24]
   19060:	mov	r0, #196608	; 0x30000
   19064:	cmp	r3, r5
   19068:	strb	r7, [r1, #168]	; 0xa8
   1906c:	str	r5, [r4, #52]	; 0x34
   19070:	str	r6, [r4, #44]	; 0x2c
   19074:	str	r7, [r4, #32]
   19078:	str	r7, [r4, #12]
   1907c:	str	r7, [r4, #16]
   19080:	str	r7, [r4, #20]
   19084:	str	r2, [r4, #28]
   19088:	str	r0, [r4, #58]	; 0x3a
   1908c:	bls	19120 <__assert_fail@plt+0x757c>
   19090:	ldr	r3, [sp, #12]
   19094:	adds	r5, r3, r5
   19098:	bcs	191a0 <__assert_fail@plt+0x75fc>
   1909c:	ldrd	r2, [r8]
   190a0:	ldr	r1, [r6, #48]	; 0x30
   190a4:	ldr	r0, [sp, #28]
   190a8:	strd	r2, [r4, #160]	; 0xa0
   190ac:	ldr	r3, [r6]
   190b0:	tst	r1, #4
   190b4:	str	r0, [r4, #48]	; 0x30
   190b8:	str	r5, [r4, #40]	; 0x28
   190bc:	str	r3, [r4, #4]
   190c0:	streq	r9, [r4, #24]
   190c4:	bne	19214 <__assert_fail@plt+0x7670>
   190c8:	ldr	r3, [r6, #44]	; 0x2c
   190cc:	cmp	r3, #0
   190d0:	beq	190dc <__assert_fail@plt+0x7538>
   190d4:	tst	r1, #1024	; 0x400
   190d8:	beq	19284 <__assert_fail@plt+0x76e0>
   190dc:	tst	r1, #8
   190e0:	ldrb	r3, [r8, #18]
   190e4:	bne	18f54 <__assert_fail@plt+0x73b0>
   190e8:	sub	r3, r3, #1
   190ec:	cmp	r3, #11
   190f0:	mov	r2, #11
   190f4:	strh	r2, [r4, #56]	; 0x38
   190f8:	strhi	r7, [r4, #80]	; 0x50
   190fc:	movhi	r2, #2
   19100:	movhi	r3, #0
   19104:	bhi	18f98 <__assert_fail@plt+0x73f4>
   19108:	ldr	r2, [pc, #2652]	; 19b6c <__assert_fail@plt+0x7fc8>
   1910c:	ldr	r1, [r2, r3, lsl #2]
   19110:	mov	r2, #2
   19114:	mov	r3, #0
   19118:	str	r1, [r4, #80]	; 0x50
   1911c:	b	18f98 <__assert_fail@plt+0x73f4>
   19120:	ldr	r0, [r6, #36]	; 0x24
   19124:	ldr	r3, [sp, #12]
   19128:	add	r1, r0, #256	; 0x100
   1912c:	add	r1, r1, #1
   19130:	add	r1, r1, r3
   19134:	add	r1, r1, r5
   19138:	cmp	r0, r1
   1913c:	bhi	192bc <__assert_fail@plt+0x7718>
   19140:	mov	r0, r2
   19144:	str	r1, [r6, #36]	; 0x24
   19148:	str	r2, [sp, #4]
   1914c:	bl	36970 <__assert_fail@plt+0x24dcc>
   19150:	ldr	r2, [sp, #4]
   19154:	cmp	r0, #0
   19158:	beq	19938 <__assert_fail@plt+0x7d94>
   1915c:	cmp	r2, r0
   19160:	str	r0, [r6, #24]
   19164:	beq	19184 <__assert_fail@plt+0x75e0>
   19168:	ldr	r2, [r6, #48]	; 0x30
   1916c:	tst	r2, #4
   19170:	ldrne	r3, [sp, #12]
   19174:	addne	r3, r0, r3
   19178:	strne	r3, [sp, #32]
   1917c:	mov	r3, #1
   19180:	str	r3, [sp, #36]	; 0x24
   19184:	ldr	r2, [r6, #36]	; 0x24
   19188:	ldr	r3, [sp, #12]
   1918c:	sub	r3, r2, r3
   19190:	str	r3, [sp, #20]
   19194:	ldr	r3, [sp, #12]
   19198:	adds	r5, r3, r5
   1919c:	bcc	1909c <__assert_fail@plt+0x74f8>
   191a0:	ldr	r8, [sp, #16]
   191a4:	mov	r0, r4
   191a8:	bl	184ec <__assert_fail@plt+0x6948>
   191ac:	cmp	r8, #0
   191b0:	beq	191d8 <__assert_fail@plt+0x7634>
   191b4:	ldr	r3, [r8, #12]
   191b8:	ldr	r4, [r8, #8]
   191bc:	subs	r0, r3, #0
   191c0:	beq	191c8 <__assert_fail@plt+0x7624>
   191c4:	bl	11b98 <closedir@plt>
   191c8:	mov	r0, r8
   191cc:	bl	184ec <__assert_fail@plt+0x6948>
   191d0:	subs	r8, r4, #0
   191d4:	bne	191b4 <__assert_fail@plt+0x7610>
   191d8:	ldr	r4, [sp, #8]
   191dc:	mov	r8, #0
   191e0:	ldr	r0, [r4, #12]
   191e4:	bl	11b98 <closedir@plt>
   191e8:	ldr	r3, [r6, #48]	; 0x30
   191ec:	mov	r1, #7
   191f0:	orr	r3, r3, #8192	; 0x2000
   191f4:	mov	r2, #36	; 0x24
   191f8:	str	r8, [r4, #12]
   191fc:	strh	r1, [r4, #56]	; 0x38
   19200:	str	r3, [r6, #48]	; 0x30
   19204:	str	r2, [fp]
   19208:	mov	r0, r8
   1920c:	add	sp, sp, #68	; 0x44
   19210:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19214:	ldr	r0, [r4, #28]
   19218:	ldr	r2, [r4, #52]	; 0x34
   1921c:	mov	r1, r9
   19220:	str	r0, [r4, #24]
   19224:	add	r2, r2, #1
   19228:	ldr	r0, [sp, #32]
   1922c:	bl	11748 <memmove@plt>
   19230:	ldr	r1, [r6, #48]	; 0x30
   19234:	b	190c8 <__assert_fail@plt+0x7524>
   19238:	ldr	r3, [r6, #44]	; 0x2c
   1923c:	cmp	r3, #0
   19240:	bne	18fc0 <__assert_fail@plt+0x741c>
   19244:	ldr	r1, [sp, #60]	; 0x3c
   19248:	ldr	r0, [sp, #8]
   1924c:	bl	188c8 <__assert_fail@plt+0x6d24>
   19250:	ldr	r3, [pc, #2332]	; 19b74 <__assert_fail@plt+0x7fd0>
   19254:	cmp	r0, r3
   19258:	beq	1927c <__assert_fail@plt+0x76d8>
   1925c:	ldr	r3, [pc, #2324]	; 19b78 <__assert_fail@plt+0x7fd4>
   19260:	cmp	r0, r3
   19264:	beq	1927c <__assert_fail@plt+0x76d8>
   19268:	ldr	r3, [pc, #2316]	; 19b7c <__assert_fail@plt+0x7fd8>
   1926c:	cmp	r0, r3
   19270:	movne	r3, #1
   19274:	strne	r3, [sp, #48]	; 0x30
   19278:	bne	18fc0 <__assert_fail@plt+0x741c>
   1927c:	str	r7, [sp, #48]	; 0x30
   19280:	b	18fc0 <__assert_fail@plt+0x741c>
   19284:	mov	r3, r7
   19288:	mov	r2, r4
   1928c:	ldr	r0, [r6, #32]
   19290:	bl	189d8 <__assert_fail@plt+0x6e34>
   19294:	strh	r0, [r4, #56]	; 0x38
   19298:	b	18f9c <__assert_fail@plt+0x73f8>
   1929c:	ldrb	r3, [r8, #20]
   192a0:	cmp	r3, #0
   192a4:	beq	192b4 <__assert_fail@plt+0x7710>
   192a8:	ldrh	r3, [r8, #20]
   192ac:	cmp	r3, #46	; 0x2e
   192b0:	bne	19018 <__assert_fail@plt+0x7474>
   192b4:	ldr	r4, [sp]
   192b8:	b	18fd0 <__assert_fail@plt+0x742c>
   192bc:	mov	r0, r2
   192c0:	ldr	r8, [sp, #16]
   192c4:	bl	184ec <__assert_fail@plt+0x6948>
   192c8:	mov	r3, #36	; 0x24
   192cc:	mov	r5, r3
   192d0:	str	r7, [r6, #24]
   192d4:	str	r3, [fp]
   192d8:	mov	r0, r4
   192dc:	bl	184ec <__assert_fail@plt+0x6948>
   192e0:	cmp	r8, #0
   192e4:	beq	1930c <__assert_fail@plt+0x7768>
   192e8:	ldr	r3, [r8, #12]
   192ec:	ldr	r4, [r8, #8]
   192f0:	subs	r0, r3, #0
   192f4:	beq	192fc <__assert_fail@plt+0x7758>
   192f8:	bl	11b98 <closedir@plt>
   192fc:	mov	r0, r8
   19300:	bl	184ec <__assert_fail@plt+0x6948>
   19304:	subs	r8, r4, #0
   19308:	bne	192e8 <__assert_fail@plt+0x7744>
   1930c:	ldr	r4, [sp, #8]
   19310:	mov	r8, #0
   19314:	ldr	r0, [r4, #12]
   19318:	bl	11b98 <closedir@plt>
   1931c:	ldr	r3, [r6, #48]	; 0x30
   19320:	mov	r2, #7
   19324:	orr	r3, r3, #8192	; 0x2000
   19328:	str	r8, [r4, #12]
   1932c:	strh	r2, [r4, #56]	; 0x38
   19330:	mov	r0, r8
   19334:	str	r3, [r6, #48]	; 0x30
   19338:	str	r5, [fp]
   1933c:	add	sp, sp, #68	; 0x44
   19340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19344:	ldr	r8, [sp, #16]
   19348:	ldr	r5, [fp]
   1934c:	b	192d8 <__assert_fail@plt+0x7734>
   19350:	ldr	r8, [sp, #16]
   19354:	ldr	r3, [sp, #36]	; 0x24
   19358:	cmp	r3, #0
   1935c:	bne	197a4 <__assert_fail@plt+0x7c00>
   19360:	ldr	r3, [r6, #48]	; 0x30
   19364:	tst	r3, #4
   19368:	beq	19394 <__assert_fail@plt+0x77f0>
   1936c:	ldr	r3, [r6, #36]	; 0x24
   19370:	ldr	r2, [sp, #12]
   19374:	cmp	sl, #0
   19378:	cmpne	r3, r2
   1937c:	ldreq	r3, [sp, #32]
   19380:	subeq	r3, r3, #1
   19384:	streq	r3, [sp, #32]
   19388:	ldr	r2, [sp, #32]
   1938c:	mov	r3, #0
   19390:	strb	r3, [r2]
   19394:	ldr	r3, [sp, #52]	; 0x34
   19398:	ldr	r2, [sp, #44]	; 0x2c
   1939c:	cmp	r2, #0
   193a0:	movne	r3, #0
   193a4:	andeq	r3, r3, #1
   193a8:	cmp	r3, #0
   193ac:	beq	1943c <__assert_fail@plt+0x7898>
   193b0:	ldr	r3, [sp, #40]	; 0x28
   193b4:	cmp	sl, #0
   193b8:	cmpne	r3, #1
   193bc:	beq	19648 <__assert_fail@plt+0x7aa4>
   193c0:	ldr	r3, [sp, #48]	; 0x30
   193c4:	cmp	r3, #0
   193c8:	bne	19828 <__assert_fail@plt+0x7c84>
   193cc:	ldr	r4, [r6, #44]	; 0x2c
   193d0:	cmp	r4, #0
   193d4:	cmpne	sl, #1
   193d8:	bls	19208 <__assert_fail@plt+0x7664>
   193dc:	ldr	r3, [r6, #40]	; 0x28
   193e0:	cmp	sl, r3
   193e4:	bls	195dc <__assert_fail@plt+0x7a38>
   193e8:	add	r1, sl, #40	; 0x28
   193ec:	cmn	r1, #-1073741823	; 0xc0000001
   193f0:	str	r1, [r6, #40]	; 0x28
   193f4:	bhi	19920 <__assert_fail@plt+0x7d7c>
   193f8:	lsl	r1, r1, #2
   193fc:	ldr	r0, [r6, #8]
   19400:	bl	36970 <__assert_fail@plt+0x24dcc>
   19404:	cmp	r0, #0
   19408:	beq	19920 <__assert_fail@plt+0x7d7c>
   1940c:	str	r0, [r6, #8]
   19410:	b	195e0 <__assert_fail@plt+0x7a3c>
   19414:	ldr	r1, [sp, #8]
   19418:	ldr	r3, [pc, #1888]	; 19b80 <__assert_fail@plt+0x7fdc>
   1941c:	mvn	r2, #0
   19420:	ldr	r1, [r1, #4]
   19424:	mov	r0, r6
   19428:	bl	18bdc <__assert_fail@plt+0x7038>
   1942c:	adds	r5, r0, #0
   19430:	movne	r5, #1
   19434:	cmp	r5, #0
   19438:	bne	199e4 <__assert_fail@plt+0x7e40>
   1943c:	cmp	sl, #0
   19440:	bne	193c0 <__assert_fail@plt+0x781c>
   19444:	ldr	r3, [sp, #40]	; 0x28
   19448:	cmp	r3, #3
   1944c:	beq	199ac <__assert_fail@plt+0x7e08>
   19450:	cmp	r8, #0
   19454:	beq	198dc <__assert_fail@plt+0x7d38>
   19458:	ldr	r3, [r8, #12]
   1945c:	ldr	r4, [r8, #8]
   19460:	subs	r0, r3, #0
   19464:	beq	1946c <__assert_fail@plt+0x78c8>
   19468:	bl	11b98 <closedir@plt>
   1946c:	mov	r0, r8
   19470:	bl	184ec <__assert_fail@plt+0x6948>
   19474:	subs	r8, r4, #0
   19478:	bne	19458 <__assert_fail@plt+0x78b4>
   1947c:	b	198dc <__assert_fail@plt+0x7d38>
   19480:	ldr	r3, [r0, #48]	; 0x30
   19484:	ldr	ip, [sp, #8]
   19488:	and	r2, r3, #516	; 0x204
   1948c:	cmp	r2, #512	; 0x200
   19490:	mvnne	r0, #99	; 0x63
   19494:	ldreq	r0, [r0, #32]
   19498:	ands	r2, r3, #16
   1949c:	ldr	r1, [ip, #24]
   194a0:	bne	195bc <__assert_fail@plt+0x7a18>
   194a4:	add	r3, sp, #60	; 0x3c
   194a8:	bl	1ebfc <__assert_fail@plt+0xd058>
   194ac:	ldr	r3, [sp, #8]
   194b0:	cmp	r0, #0
   194b4:	mov	r8, r0
   194b8:	str	r0, [r3, #12]
   194bc:	beq	19a2c <__assert_fail@plt+0x7e88>
   194c0:	ldrh	r3, [r3, #56]	; 0x38
   194c4:	cmp	r3, #11
   194c8:	beq	19a54 <__assert_fail@plt+0x7eb0>
   194cc:	ldr	r0, [r6, #48]	; 0x30
   194d0:	tst	r0, #256	; 0x100
   194d4:	bne	196b0 <__assert_fail@plt+0x7b0c>
   194d8:	ldr	r2, [r6, #44]	; 0x2c
   194dc:	ldr	r3, [pc, #1696]	; 19b84 <__assert_fail@plt+0x7fe0>
   194e0:	cmp	r2, #0
   194e4:	mvnne	r3, #0
   194e8:	str	r3, [sp, #24]
   194ec:	ldr	r3, [sp, #40]	; 0x28
   194f0:	cmp	r3, #2
   194f4:	beq	19958 <__assert_fail@plt+0x7db4>
   194f8:	ldr	r3, [r6, #48]	; 0x30
   194fc:	and	r3, r3, #56	; 0x38
   19500:	cmp	r3, #24
   19504:	beq	19a74 <__assert_fail@plt+0x7ed0>
   19508:	ldr	r3, [sp, #40]	; 0x28
   1950c:	mov	r4, #1
   19510:	sub	r5, r3, #3
   19514:	clz	r5, r5
   19518:	lsr	r5, r5, #5
   1951c:	ldr	r3, [r6, #48]	; 0x30
   19520:	tst	r3, #512	; 0x200
   19524:	bne	199c8 <__assert_fail@plt+0x7e24>
   19528:	ldr	r2, [sp, #60]	; 0x3c
   1952c:	cmp	r2, #0
   19530:	blt	1954c <__assert_fail@plt+0x79a8>
   19534:	mov	r3, #0
   19538:	ldr	r1, [sp, #8]
   1953c:	mov	r0, r6
   19540:	bl	18bdc <__assert_fail@plt+0x7038>
   19544:	cmp	r0, #0
   19548:	beq	18ec4 <__assert_fail@plt+0x7320>
   1954c:	tst	r4, r5
   19550:	bne	19acc <__assert_fail@plt+0x7f28>
   19554:	ldr	r4, [sp, #8]
   19558:	ldrh	r3, [r4, #58]	; 0x3a
   1955c:	ldr	r0, [r4, #12]
   19560:	orr	r3, r3, #1
   19564:	strh	r3, [r4, #58]	; 0x3a
   19568:	bl	11b98 <closedir@plt>
   1956c:	ldr	r0, [r6, #48]	; 0x30
   19570:	mov	r3, #0
   19574:	tst	r0, #512	; 0x200
   19578:	str	r3, [r4, #12]
   1957c:	beq	19598 <__assert_fail@plt+0x79f4>
   19580:	ldr	r3, [sp, #60]	; 0x3c
   19584:	cmp	r3, #0
   19588:	blt	19598 <__assert_fail@plt+0x79f4>
   1958c:	mov	r0, r3
   19590:	bl	11b80 <close@plt>
   19594:	ldr	r0, [r6, #48]	; 0x30
   19598:	ldr	r2, [sp, #8]
   1959c:	mov	r3, #0
   195a0:	str	r3, [sp, #52]	; 0x34
   195a4:	str	r3, [r2, #12]
   195a8:	b	18ed4 <__assert_fail@plt+0x7330>
   195ac:	mov	r3, #11
   195b0:	strh	r3, [r4, #56]	; 0x38
   195b4:	mov	r3, #9
   195b8:	b	19108 <__assert_fail@plt+0x7564>
   195bc:	tst	r3, #1
   195c0:	moveq	r2, #32768	; 0x8000
   195c4:	beq	194a4 <__assert_fail@plt+0x7900>
   195c8:	ldr	r2, [ip, #48]	; 0x30
   195cc:	cmp	r2, #0
   195d0:	movne	r2, #32768	; 0x8000
   195d4:	moveq	r2, #0
   195d8:	b	194a4 <__assert_fail@plt+0x7900>
   195dc:	ldr	r0, [r6, #8]
   195e0:	cmp	r8, #0
   195e4:	movne	r2, r0
   195e8:	beq	195fc <__assert_fail@plt+0x7a58>
   195ec:	str	r8, [r2], #4
   195f0:	ldr	r8, [r8, #8]
   195f4:	cmp	r8, #0
   195f8:	bne	195ec <__assert_fail@plt+0x7a48>
   195fc:	mov	r3, r4
   19600:	mov	r2, #4
   19604:	mov	r1, sl
   19608:	bl	11b08 <qsort@plt>
   1960c:	ldr	ip, [r6, #8]
   19610:	sub	r3, sl, #1
   19614:	mov	r2, ip
   19618:	ldr	r8, [ip]
   1961c:	ldr	r1, [r2]
   19620:	ldr	r0, [r2, #4]!
   19624:	subs	r3, r3, #1
   19628:	str	r0, [r1, #8]
   1962c:	bne	1961c <__assert_fail@plt+0x7a78>
   19630:	add	sl, ip, sl, lsl #2
   19634:	mov	r0, r8
   19638:	ldr	r2, [sl, #-4]
   1963c:	str	r3, [r2, #8]
   19640:	add	sp, sp, #68	; 0x44
   19644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19648:	ldr	r3, [sp, #8]
   1964c:	ldr	r3, [r3, #48]	; 0x30
   19650:	cmp	r3, #0
   19654:	bne	19414 <__assert_fail@plt+0x7870>
   19658:	ldr	r2, [r6, #48]	; 0x30
   1965c:	tst	r2, #4
   19660:	movne	r5, r3
   19664:	addne	r4, r6, #60	; 0x3c
   19668:	bne	19698 <__assert_fail@plt+0x7af4>
   1966c:	tst	r2, #512	; 0x200
   19670:	bne	19ae4 <__assert_fail@plt+0x7f40>
   19674:	ldr	r0, [r6, #28]
   19678:	bl	11ae4 <fchdir@plt>
   1967c:	add	r4, r6, #60	; 0x3c
   19680:	adds	r5, r0, #0
   19684:	movne	r5, #1
   19688:	b	19698 <__assert_fail@plt+0x7af4>
   1968c:	bl	1d7d0 <__assert_fail@plt+0xbc2c>
   19690:	cmp	r0, #0
   19694:	bge	19918 <__assert_fail@plt+0x7d74>
   19698:	mov	r0, r4
   1969c:	bl	1d784 <__assert_fail@plt+0xbbe0>
   196a0:	cmp	r0, #0
   196a4:	mov	r0, r4
   196a8:	beq	1968c <__assert_fail@plt+0x7ae8>
   196ac:	b	19434 <__assert_fail@plt+0x7890>
   196b0:	ldr	r5, [sp, #8]
   196b4:	add	r1, r6, #56	; 0x38
   196b8:	mov	r2, r5
   196bc:	bl	18b24 <__assert_fail@plt+0x6f80>
   196c0:	mov	r3, #0
   196c4:	mov	r2, r5
   196c8:	ldr	r1, [r6, #48]	; 0x30
   196cc:	ldr	r0, [r6, #32]
   196d0:	bl	189d8 <__assert_fail@plt+0x6e34>
   196d4:	ldr	r2, [r6, #48]	; 0x30
   196d8:	ldr	r3, [pc, #1192]	; 19b88 <__assert_fail@plt+0x7fe4>
   196dc:	mov	r7, r5
   196e0:	and	r3, r3, r2
   196e4:	cmp	r3, #0
   196e8:	beq	1996c <__assert_fail@plt+0x7dc8>
   196ec:	mov	r0, #24
   196f0:	bl	36944 <__assert_fail@plt+0x24da0>
   196f4:	subs	r4, r0, #0
   196f8:	beq	19b10 <__assert_fail@plt+0x7f6c>
   196fc:	ldrd	r0, [r5, #160]	; 0xa0
   19700:	ldrd	r2, [r5, #64]	; 0x40
   19704:	str	r5, [r4, #16]
   19708:	strd	r0, [r4, #8]
   1970c:	strd	r2, [r4]
   19710:	mov	r1, r4
   19714:	ldr	r0, [r6, #56]	; 0x38
   19718:	bl	1bfd0 <__assert_fail@plt+0xa42c>
   1971c:	cmp	r4, r0
   19720:	mov	r5, r0
   19724:	beq	194d8 <__assert_fail@plt+0x7934>
   19728:	mov	r0, r4
   1972c:	bl	184ec <__assert_fail@plt+0x6948>
   19730:	cmp	r5, #0
   19734:	beq	19b10 <__assert_fail@plt+0x7f6c>
   19738:	ldr	r2, [r5, #16]
   1973c:	mov	r3, #2
   19740:	str	r2, [r7]
   19744:	strh	r3, [r7, #56]	; 0x38
   19748:	b	194d8 <__assert_fail@plt+0x7934>
   1974c:	ldr	r3, [fp]
   19750:	ldr	r8, [sp, #16]
   19754:	cmp	r3, #0
   19758:	beq	1977c <__assert_fail@plt+0x7bd8>
   1975c:	ldr	r2, [sp, #44]	; 0x2c
   19760:	ldr	r1, [sp, #8]
   19764:	cmp	sl, #0
   19768:	cmpeq	r2, #0
   1976c:	moveq	r2, #4
   19770:	movne	r2, #7
   19774:	str	r3, [r1, #32]
   19778:	strh	r2, [r1, #56]	; 0x38
   1977c:	ldr	r4, [sp, #8]
   19780:	ldr	r0, [r4, #12]
   19784:	cmp	r0, #0
   19788:	beq	19354 <__assert_fail@plt+0x77b0>
   1978c:	bl	11b98 <closedir@plt>
   19790:	mov	r3, #0
   19794:	str	r3, [r4, #12]
   19798:	ldr	r3, [sp, #36]	; 0x24
   1979c:	cmp	r3, #0
   197a0:	beq	19360 <__assert_fail@plt+0x77bc>
   197a4:	ldr	r1, [r6, #4]
   197a8:	ldr	r0, [r6, #24]
   197ac:	cmp	r1, #0
   197b0:	beq	197e0 <__assert_fail@plt+0x7c3c>
   197b4:	ldr	r3, [r1, #24]
   197b8:	add	r2, r1, #168	; 0xa8
   197bc:	cmp	r3, r2
   197c0:	ldrne	r2, [r1, #28]
   197c4:	str	r0, [r1, #28]
   197c8:	subne	r3, r3, r2
   197cc:	addne	r3, r0, r3
   197d0:	strne	r3, [r1, #24]
   197d4:	ldr	r1, [r1, #8]
   197d8:	cmp	r1, #0
   197dc:	bne	197b4 <__assert_fail@plt+0x7c10>
   197e0:	mov	r3, r8
   197e4:	b	19814 <__assert_fail@plt+0x7c70>
   197e8:	ldr	r2, [r3, #24]
   197ec:	cmp	r2, r1
   197f0:	ldrne	r1, [r3, #28]
   197f4:	str	r0, [r3, #28]
   197f8:	subne	r2, r2, r1
   197fc:	addne	r2, r0, r2
   19800:	strne	r2, [r3, #24]
   19804:	ldr	r2, [r3, #8]
   19808:	cmp	r2, #0
   1980c:	ldreq	r2, [r3, #4]
   19810:	mov	r3, r2
   19814:	ldr	r2, [r3, #48]	; 0x30
   19818:	add	r1, r3, #168	; 0xa8
   1981c:	cmp	r2, #0
   19820:	bge	197e8 <__assert_fail@plt+0x7c44>
   19824:	b	19360 <__assert_fail@plt+0x77bc>
   19828:	ldr	r2, [r6, #40]	; 0x28
   1982c:	ldr	r3, [pc, #856]	; 19b8c <__assert_fail@plt+0x7fe8>
   19830:	cmp	sl, r2
   19834:	str	r3, [r6, #44]	; 0x2c
   19838:	bhi	198ec <__assert_fail@plt+0x7d48>
   1983c:	ldr	r0, [r6, #8]
   19840:	cmp	r8, #0
   19844:	movne	r3, r0
   19848:	beq	1985c <__assert_fail@plt+0x7cb8>
   1984c:	str	r8, [r3], #4
   19850:	ldr	r8, [r8, #8]
   19854:	cmp	r8, #0
   19858:	bne	1984c <__assert_fail@plt+0x7ca8>
   1985c:	ldr	r3, [pc, #808]	; 19b8c <__assert_fail@plt+0x7fe8>
   19860:	mov	r2, #4
   19864:	mov	r1, sl
   19868:	bl	11b08 <qsort@plt>
   1986c:	ldr	ip, [r6, #8]
   19870:	subs	r3, sl, #1
   19874:	ldr	r8, [ip]
   19878:	moveq	r3, r8
   1987c:	beq	198a0 <__assert_fail@plt+0x7cfc>
   19880:	mov	r2, ip
   19884:	ldr	r1, [r2]
   19888:	ldr	r0, [r2, #4]!
   1988c:	subs	r3, r3, #1
   19890:	str	r0, [r1, #8]
   19894:	bne	19884 <__assert_fail@plt+0x7ce0>
   19898:	add	ip, ip, sl, lsl #2
   1989c:	ldr	r3, [ip, #-4]
   198a0:	mov	r2, #0
   198a4:	str	r2, [r3, #8]
   198a8:	mov	r3, #0
   198ac:	mov	r0, r8
   198b0:	str	r3, [r6, #44]	; 0x2c
   198b4:	add	sp, sp, #68	; 0x44
   198b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198bc:	ldr	r4, [sp, #8]
   198c0:	mov	r8, #0
   198c4:	ldr	r0, [r4, #12]
   198c8:	bl	11b98 <closedir@plt>
   198cc:	ldr	r3, [sp, #40]	; 0x28
   198d0:	str	r8, [r4, #12]
   198d4:	cmp	r3, #3
   198d8:	beq	19a38 <__assert_fail@plt+0x7e94>
   198dc:	mov	r8, #0
   198e0:	mov	r0, r8
   198e4:	add	sp, sp, #68	; 0x44
   198e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198ec:	add	r1, sl, #40	; 0x28
   198f0:	cmn	r1, #-1073741823	; 0xc0000001
   198f4:	str	r1, [r6, #40]	; 0x28
   198f8:	bhi	19994 <__assert_fail@plt+0x7df0>
   198fc:	lsl	r1, r1, #2
   19900:	ldr	r0, [r6, #8]
   19904:	bl	36970 <__assert_fail@plt+0x24dcc>
   19908:	cmp	r0, #0
   1990c:	beq	19994 <__assert_fail@plt+0x7df0>
   19910:	str	r0, [r6, #8]
   19914:	b	19840 <__assert_fail@plt+0x7c9c>
   19918:	bl	11b80 <close@plt>
   1991c:	b	19698 <__assert_fail@plt+0x7af4>
   19920:	ldr	r0, [r6, #8]
   19924:	bl	184ec <__assert_fail@plt+0x6948>
   19928:	mov	r3, #0
   1992c:	str	r3, [r6, #8]
   19930:	str	r3, [r6, #40]	; 0x28
   19934:	b	19208 <__assert_fail@plt+0x7664>
   19938:	str	r0, [sp]
   1993c:	ldr	r0, [r6, #24]
   19940:	ldr	r8, [sp, #16]
   19944:	bl	184ec <__assert_fail@plt+0x6948>
   19948:	ldr	r1, [sp]
   1994c:	ldr	r5, [fp]
   19950:	str	r1, [r6, #24]
   19954:	b	192d8 <__assert_fail@plt+0x7734>
   19958:	mov	r3, #0
   1995c:	str	r3, [sp, #52]	; 0x34
   19960:	ldr	r0, [r6, #48]	; 0x30
   19964:	ldr	r2, [sp, #8]
   19968:	b	18ed4 <__assert_fail@plt+0x7330>
   1996c:	ldr	r4, [sp, #8]
   19970:	ldr	r0, [r6, #56]	; 0x38
   19974:	add	r1, r4, #64	; 0x40
   19978:	bl	373c4 <__assert_fail@plt+0x25820>
   1997c:	cmp	r0, #0
   19980:	movne	r2, r4
   19984:	movne	r3, #2
   19988:	strne	r4, [r2]
   1998c:	strhne	r3, [r4, #56]	; 0x38
   19990:	b	194d8 <__assert_fail@plt+0x7934>
   19994:	ldr	r0, [r6, #8]
   19998:	bl	184ec <__assert_fail@plt+0x6948>
   1999c:	mov	r3, #0
   199a0:	str	r3, [r6, #8]
   199a4:	str	r3, [r6, #40]	; 0x28
   199a8:	b	198a8 <__assert_fail@plt+0x7d04>
   199ac:	ldr	r2, [sp, #8]
   199b0:	ldrh	r3, [r2, #56]	; 0x38
   199b4:	cmp	r3, #7
   199b8:	cmpne	r3, #4
   199bc:	movne	r3, #6
   199c0:	strhne	r3, [r2, #56]	; 0x38
   199c4:	b	19450 <__assert_fail@plt+0x78ac>
   199c8:	mov	r2, #3
   199cc:	ldr	r1, [pc, #444]	; 19b90 <__assert_fail@plt+0x7fec>
   199d0:	ldr	r0, [sp, #60]	; 0x3c
   199d4:	bl	37558 <__assert_fail@plt+0x259b4>
   199d8:	mov	r2, r0
   199dc:	str	r0, [sp, #60]	; 0x3c
   199e0:	b	1952c <__assert_fail@plt+0x7988>
   199e4:	ldr	r3, [r6, #48]	; 0x30
   199e8:	ldr	r1, [sp, #8]
   199ec:	orr	r3, r3, #8192	; 0x2000
   199f0:	mov	r2, #7
   199f4:	cmp	r8, #0
   199f8:	strh	r2, [r1, #56]	; 0x38
   199fc:	str	r3, [r6, #48]	; 0x30
   19a00:	beq	198dc <__assert_fail@plt+0x7d38>
   19a04:	ldr	r3, [r8, #12]
   19a08:	ldr	r4, [r8, #8]
   19a0c:	subs	r0, r3, #0
   19a10:	beq	19a18 <__assert_fail@plt+0x7e74>
   19a14:	bl	11b98 <closedir@plt>
   19a18:	mov	r0, r8
   19a1c:	bl	184ec <__assert_fail@plt+0x6948>
   19a20:	subs	r8, r4, #0
   19a24:	bne	19a04 <__assert_fail@plt+0x7e60>
   19a28:	b	198dc <__assert_fail@plt+0x7d38>
   19a2c:	ldr	r3, [sp, #40]	; 0x28
   19a30:	cmp	r3, #3
   19a34:	bne	198dc <__assert_fail@plt+0x7d38>
   19a38:	ldr	r4, [sp, #8]
   19a3c:	mov	r3, #4
   19a40:	strh	r3, [r4, #56]	; 0x38
   19a44:	bl	119b8 <__errno_location@plt>
   19a48:	ldr	r3, [r0]
   19a4c:	str	r3, [r4, #32]
   19a50:	b	19208 <__assert_fail@plt+0x7664>
   19a54:	ldr	r4, [sp, #8]
   19a58:	mov	r3, #0
   19a5c:	mov	r2, r4
   19a60:	ldr	r1, [r6, #48]	; 0x30
   19a64:	ldr	r0, [r6, #32]
   19a68:	bl	189d8 <__assert_fail@plt+0x6e34>
   19a6c:	strh	r0, [r4, #56]	; 0x38
   19a70:	b	194d8 <__assert_fail@plt+0x7934>
   19a74:	ldr	r3, [sp, #8]
   19a78:	ldr	r3, [r3, #84]	; 0x54
   19a7c:	cmp	r3, #2
   19a80:	bne	19508 <__assert_fail@plt+0x7964>
   19a84:	ldr	r1, [sp, #60]	; 0x3c
   19a88:	ldr	r0, [sp, #8]
   19a8c:	bl	188c8 <__assert_fail@plt+0x6d24>
   19a90:	ldr	r3, [pc, #220]	; 19b74 <__assert_fail@plt+0x7fd0>
   19a94:	cmp	r0, r3
   19a98:	beq	19508 <__assert_fail@plt+0x7964>
   19a9c:	bgt	19b24 <__assert_fail@plt+0x7f80>
   19aa0:	ldr	r3, [pc, #212]	; 19b7c <__assert_fail@plt+0x7fd8>
   19aa4:	cmp	r0, r3
   19aa8:	beq	19508 <__assert_fail@plt+0x7964>
   19aac:	cmp	r0, #0
   19ab0:	beq	19508 <__assert_fail@plt+0x7964>
   19ab4:	ldr	r3, [sp, #40]	; 0x28
   19ab8:	cmp	r3, #3
   19abc:	bne	19958 <__assert_fail@plt+0x7db4>
   19ac0:	mov	r5, #1
   19ac4:	mov	r4, #0
   19ac8:	b	1951c <__assert_fail@plt+0x7978>
   19acc:	bl	119b8 <__errno_location@plt>
   19ad0:	ldr	r2, [sp, #8]
   19ad4:	mov	r4, r2
   19ad8:	ldr	r3, [r0]
   19adc:	str	r3, [r2, #32]
   19ae0:	b	19558 <__assert_fail@plt+0x79b4>
   19ae4:	add	r4, r6, #60	; 0x3c
   19ae8:	mov	r0, r4
   19aec:	ldr	r1, [r6, #32]
   19af0:	bl	1d78c <__assert_fail@plt+0xbbe8>
   19af4:	cmp	r0, #0
   19af8:	blt	19b00 <__assert_fail@plt+0x7f5c>
   19afc:	bl	11b80 <close@plt>
   19b00:	mvn	r3, #99	; 0x63
   19b04:	str	r3, [r6, #32]
   19b08:	mov	r5, #0
   19b0c:	b	19698 <__assert_fail@plt+0x7af4>
   19b10:	bl	119b8 <__errno_location@plt>
   19b14:	mov	r3, #12
   19b18:	mov	r8, #0
   19b1c:	str	r3, [r0]
   19b20:	b	19208 <__assert_fail@plt+0x7664>
   19b24:	ldr	r3, [pc, #104]	; 19b94 <__assert_fail@plt+0x7ff0>
   19b28:	cmp	r0, r3
   19b2c:	beq	19508 <__assert_fail@plt+0x7964>
   19b30:	ldr	r3, [pc, #96]	; 19b98 <__assert_fail@plt+0x7ff4>
   19b34:	cmp	r0, r3
   19b38:	bne	19ab4 <__assert_fail@plt+0x7f10>
   19b3c:	b	19508 <__assert_fail@plt+0x7964>
   19b40:	ldr	r3, [pc, #60]	; 19b84 <__assert_fail@plt+0x7fe0>
   19b44:	ldr	r0, [r6, #48]	; 0x30
   19b48:	str	r3, [sp, #24]
   19b4c:	mov	r3, #1
   19b50:	str	r3, [sp, #52]	; 0x34
   19b54:	ldr	r2, [sp, #8]
   19b58:	b	18ed4 <__assert_fail@plt+0x7330>
   19b5c:	str	r7, [r4, #80]	; 0x50
   19b60:	mov	r2, #1
   19b64:	mov	r3, #0
   19b68:	b	18f98 <__assert_fail@plt+0x73f4>
   19b6c:	andeq	r9, r3, ip, lsl #26
   19b70:	andeq	r2, r0, r0, lsl r7
   19b74:	andeq	r6, r0, r9, ror #18
   19b78:			; <UNDEFINED> instruction: 0x01021994
   19b7c:			; <UNDEFINED> instruction: 0xff534d42
   19b80:	andeq	r9, r3, ip, lsr sp
   19b84:	andeq	r8, r1, r0, lsr #13
   19b88:	andeq	r0, r0, r2, lsl #2
   19b8c:	muleq	r1, r8, r8
   19b90:	andeq	r0, r0, r6, lsl #8
   19b94:	andeq	r9, r0, r0, lsr #31
   19b98:	movtpl	r4, #24911	; 0x614f
   19b9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ba0:	bic	r8, r1, #4080	; 0xff0
   19ba4:	sub	sp, sp, #36	; 0x24
   19ba8:	bic	r8, r8, #15
   19bac:	cmp	r8, #0
   19bb0:	str	r2, [sp, #12]
   19bb4:	bne	1a05c <__assert_fail@plt+0x84b8>
   19bb8:	and	r3, r1, #516	; 0x204
   19bbc:	cmp	r3, #516	; 0x204
   19bc0:	mov	r5, r1
   19bc4:	beq	19fc0 <__assert_fail@plt+0x841c>
   19bc8:	ands	r8, r1, #18
   19bcc:	beq	19fc0 <__assert_fail@plt+0x841c>
   19bd0:	mov	r9, r0
   19bd4:	mov	r1, #96	; 0x60
   19bd8:	mov	r0, #1
   19bdc:	bl	368fc <__assert_fail@plt+0x24d58>
   19be0:	subs	r8, r0, #0
   19be4:	beq	19f18 <__assert_fail@plt+0x8374>
   19be8:	ldr	r3, [sp, #12]
   19bec:	tst	r5, #2
   19bf0:	str	r3, [r8, #44]	; 0x2c
   19bf4:	bicne	r3, r5, #512	; 0x200
   19bf8:	orrne	r3, r3, #4
   19bfc:	strne	r3, [r8, #48]	; 0x30
   19c00:	ldr	r3, [r9]
   19c04:	streq	r5, [r8, #48]	; 0x30
   19c08:	mvn	r2, #99	; 0x63
   19c0c:	cmp	r3, #0
   19c10:	str	r2, [r8, #32]
   19c14:	beq	1a0c0 <__assert_fail@plt+0x851c>
   19c18:	mov	r6, r9
   19c1c:	mov	r4, #0
   19c20:	mov	r0, r3
   19c24:	bl	11988 <strlen@plt>
   19c28:	ldr	r3, [r6, #4]!
   19c2c:	cmp	r4, r0
   19c30:	movcc	r4, r0
   19c34:	cmp	r3, #0
   19c38:	bne	19c20 <__assert_fail@plt+0x807c>
   19c3c:	add	r4, r4, #1
   19c40:	cmp	r4, #4096	; 0x1000
   19c44:	movcc	r4, #4096	; 0x1000
   19c48:	ldr	r3, [r8, #36]	; 0x24
   19c4c:	add	r1, r3, #256	; 0x100
   19c50:	add	r1, r1, r4
   19c54:	cmp	r3, r1
   19c58:	bhi	19f8c <__assert_fail@plt+0x83e8>
   19c5c:	str	r1, [r8, #36]	; 0x24
   19c60:	ldr	r0, [r8, #24]
   19c64:	bl	36970 <__assert_fail@plt+0x24dcc>
   19c68:	subs	r4, r0, #0
   19c6c:	beq	1a15c <__assert_fail@plt+0x85b8>
   19c70:	ldr	fp, [r9]
   19c74:	str	r4, [r8, #24]
   19c78:	cmp	fp, #0
   19c7c:	beq	1a040 <__assert_fail@plt+0x849c>
   19c80:	mov	r0, #176	; 0xb0
   19c84:	bl	36944 <__assert_fail@plt+0x24da0>
   19c88:	subs	r3, r0, #0
   19c8c:	mov	r0, r3
   19c90:	str	r3, [sp, #16]
   19c94:	beq	19f80 <__assert_fail@plt+0x83dc>
   19c98:	ldr	r2, [r8, #24]
   19c9c:	ldr	r3, [sp, #12]
   19ca0:	mov	r1, #196608	; 0x30000
   19ca4:	cmp	r3, #0
   19ca8:	str	r2, [r0, #28]
   19cac:	mov	r3, #0
   19cb0:	mvn	r2, #0
   19cb4:	str	r8, [r0, #44]	; 0x2c
   19cb8:	strb	r3, [r0, #168]	; 0xa8
   19cbc:	str	r3, [r0, #52]	; 0x34
   19cc0:	str	r3, [r0, #32]
   19cc4:	str	r3, [r0, #12]
   19cc8:	str	r3, [r0, #16]
   19ccc:	str	r3, [r0, #20]
   19cd0:	str	r1, [r0, #58]	; 0x3a
   19cd4:	str	r2, [r0, #48]	; 0x30
   19cd8:	ldr	fp, [r9]
   19cdc:	beq	1a0b4 <__assert_fail@plt+0x8510>
   19ce0:	ldr	r3, [r8, #48]	; 0x30
   19ce4:	lsr	r3, r3, #10
   19ce8:	and	r3, r3, #1
   19cec:	str	r3, [sp, #24]
   19cf0:	cmp	fp, #0
   19cf4:	beq	1a174 <__assert_fail@plt+0x85d0>
   19cf8:	lsr	r5, r5, #11
   19cfc:	mov	r3, #0
   19d00:	eor	r5, r5, #1
   19d04:	mov	r6, r3
   19d08:	str	r3, [sp, #28]
   19d0c:	and	r3, r5, #1
   19d10:	str	r3, [sp, #20]
   19d14:	mov	sl, r6
   19d18:	mov	r7, r6
   19d1c:	b	19d5c <__assert_fail@plt+0x81b8>
   19d20:	mov	r3, #11
   19d24:	strh	r3, [r4, #56]	; 0x38
   19d28:	mov	r2, #2
   19d2c:	mov	r3, #0
   19d30:	strd	r2, [r4, #112]	; 0x70
   19d34:	ldr	r3, [sp, #12]
   19d38:	cmp	r3, #0
   19d3c:	beq	19e3c <__assert_fail@plt+0x8298>
   19d40:	ldr	fp, [r9, #4]!
   19d44:	str	r7, [r4, #8]
   19d48:	cmp	fp, #0
   19d4c:	mov	r7, r4
   19d50:	add	r4, sl, #1
   19d54:	beq	19e68 <__assert_fail@plt+0x82c4>
   19d58:	mov	sl, r4
   19d5c:	mov	r0, fp
   19d60:	bl	11988 <strlen@plt>
   19d64:	ldr	r3, [sp, #20]
   19d68:	cmp	r0, #2
   19d6c:	movls	r3, #0
   19d70:	andhi	r3, r3, #1
   19d74:	cmp	r3, #0
   19d78:	mov	r5, r0
   19d7c:	beq	19d94 <__assert_fail@plt+0x81f0>
   19d80:	sub	r2, r0, #1
   19d84:	add	r3, fp, r2
   19d88:	ldrb	r2, [fp, r2]
   19d8c:	cmp	r2, #47	; 0x2f
   19d90:	beq	19f24 <__assert_fail@plt+0x8380>
   19d94:	add	r0, r5, #176	; 0xb0
   19d98:	bic	r0, r0, #7
   19d9c:	bl	36944 <__assert_fail@plt+0x24da0>
   19da0:	subs	r4, r0, #0
   19da4:	beq	19f4c <__assert_fail@plt+0x83a8>
   19da8:	add	r3, r4, #168	; 0xa8
   19dac:	mov	r1, fp
   19db0:	mov	r0, r3
   19db4:	mov	r2, r5
   19db8:	bl	11784 <memcpy@plt>
   19dbc:	add	r1, r4, r5
   19dc0:	ldr	r2, [r8, #24]
   19dc4:	strb	r6, [r1, #168]	; 0xa8
   19dc8:	str	r5, [r4, #52]	; 0x34
   19dcc:	str	r8, [r4, #44]	; 0x2c
   19dd0:	str	r6, [r4, #32]
   19dd4:	str	r6, [r4, #12]
   19dd8:	str	r6, [r4, #16]
   19ddc:	str	r6, [r4, #20]
   19de0:	str	r6, [r4, #48]	; 0x30
   19de4:	str	r2, [r4, #28]
   19de8:	mov	r3, r0
   19dec:	ldr	r0, [sp, #24]
   19df0:	str	r3, [r4, #24]
   19df4:	mov	r3, #196608	; 0x30000
   19df8:	cmp	r7, #0
   19dfc:	moveq	r0, #0
   19e00:	andne	r0, r0, #1
   19e04:	str	r3, [r4, #58]	; 0x3a
   19e08:	ldr	r3, [sp, #16]
   19e0c:	cmp	r0, #0
   19e10:	str	r3, [r4, #4]
   19e14:	bne	19d20 <__assert_fail@plt+0x817c>
   19e18:	mov	r3, r6
   19e1c:	mov	r2, r4
   19e20:	ldr	r1, [r8, #48]	; 0x30
   19e24:	ldr	r0, [r8, #32]
   19e28:	bl	189d8 <__assert_fail@plt+0x6e34>
   19e2c:	ldr	r3, [sp, #12]
   19e30:	cmp	r3, #0
   19e34:	strh	r0, [r4, #56]	; 0x38
   19e38:	bne	19d40 <__assert_fail@plt+0x819c>
   19e3c:	cmp	r7, #0
   19e40:	str	r3, [r4, #8]
   19e44:	ldrne	r3, [sp, #28]
   19e48:	ldr	fp, [r9, #4]!
   19e4c:	strne	r4, [sp, #28]
   19e50:	strne	r4, [r3, #8]
   19e54:	streq	r4, [sp, #28]
   19e58:	moveq	r7, r4
   19e5c:	cmp	fp, #0
   19e60:	add	r4, sl, #1
   19e64:	bne	19d58 <__assert_fail@plt+0x81b4>
   19e68:	ldr	r3, [sp, #12]
   19e6c:	cmp	r3, #0
   19e70:	cmpne	r4, #1
   19e74:	bhi	1a078 <__assert_fail@plt+0x84d4>
   19e78:	mov	r0, #176	; 0xb0
   19e7c:	bl	36944 <__assert_fail@plt+0x24da0>
   19e80:	cmp	r0, #0
   19e84:	beq	1a16c <__assert_fail@plt+0x85c8>
   19e88:	ldr	r2, [r8, #48]	; 0x30
   19e8c:	ldr	r3, [pc, #744]	; 1a17c <__assert_fail@plt+0x85d8>
   19e90:	ldr	lr, [r8, #24]
   19e94:	and	r3, r3, r2
   19e98:	mov	r1, #0
   19e9c:	cmp	r3, #0
   19ea0:	mov	ip, #3
   19ea4:	mov	r2, #9
   19ea8:	mov	r3, #1
   19eac:	str	r8, [r0, #44]	; 0x2c
   19eb0:	str	r0, [r8]
   19eb4:	str	r7, [r0, #8]
   19eb8:	str	lr, [r0, #28]
   19ebc:	strb	r1, [r0, #168]	; 0xa8
   19ec0:	str	r1, [r0, #52]	; 0x34
   19ec4:	str	r1, [r0, #32]
   19ec8:	str	r1, [r0, #12]
   19ecc:	strh	r1, [r0, #58]	; 0x3a
   19ed0:	str	r1, [r0, #16]
   19ed4:	str	r1, [r0, #20]
   19ed8:	strh	ip, [r0, #60]	; 0x3c
   19edc:	strh	r2, [r0, #56]	; 0x38
   19ee0:	str	r3, [r0, #48]	; 0x30
   19ee4:	bne	19fd8 <__assert_fail@plt+0x8434>
   19ee8:	mov	r0, #32
   19eec:	bl	36944 <__assert_fail@plt+0x24da0>
   19ef0:	cmp	r0, #0
   19ef4:	str	r0, [r8, #56]	; 0x38
   19ef8:	beq	19f4c <__assert_fail@plt+0x83a8>
   19efc:	bl	373a0 <__assert_fail@plt+0x257fc>
   19f00:	ldr	r3, [r8, #48]	; 0x30
   19f04:	tst	r3, #516	; 0x204
   19f08:	beq	1a008 <__assert_fail@plt+0x8464>
   19f0c:	mvn	r1, #0
   19f10:	add	r0, r8, #60	; 0x3c
   19f14:	bl	1d758 <__assert_fail@plt+0xbbb4>
   19f18:	mov	r0, r8
   19f1c:	add	sp, sp, #36	; 0x24
   19f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f24:	ldrb	r2, [r3, #-1]!
   19f28:	cmp	r2, #47	; 0x2f
   19f2c:	bne	19d94 <__assert_fail@plt+0x81f0>
   19f30:	sub	r5, r5, #1
   19f34:	cmp	r5, #1
   19f38:	bne	19f24 <__assert_fail@plt+0x8380>
   19f3c:	mov	r0, #176	; 0xb0
   19f40:	bl	36944 <__assert_fail@plt+0x24da0>
   19f44:	subs	r4, r0, #0
   19f48:	bne	19da8 <__assert_fail@plt+0x8204>
   19f4c:	cmp	r7, #0
   19f50:	beq	19f78 <__assert_fail@plt+0x83d4>
   19f54:	ldr	r3, [r7, #12]
   19f58:	ldr	r4, [r7, #8]
   19f5c:	subs	r0, r3, #0
   19f60:	beq	19f68 <__assert_fail@plt+0x83c4>
   19f64:	bl	11b98 <closedir@plt>
   19f68:	mov	r0, r7
   19f6c:	bl	184ec <__assert_fail@plt+0x6948>
   19f70:	subs	r7, r4, #0
   19f74:	bne	19f54 <__assert_fail@plt+0x83b0>
   19f78:	ldr	r0, [sp, #16]
   19f7c:	bl	184ec <__assert_fail@plt+0x6948>
   19f80:	ldr	r0, [r8, #24]
   19f84:	bl	184ec <__assert_fail@plt+0x6948>
   19f88:	b	19fa8 <__assert_fail@plt+0x8404>
   19f8c:	ldr	r0, [r8, #24]
   19f90:	bl	184ec <__assert_fail@plt+0x6948>
   19f94:	mov	r3, #0
   19f98:	str	r3, [r8, #24]
   19f9c:	bl	119b8 <__errno_location@plt>
   19fa0:	mov	r3, #36	; 0x24
   19fa4:	str	r3, [r0]
   19fa8:	mov	r0, r8
   19fac:	bl	184ec <__assert_fail@plt+0x6948>
   19fb0:	mov	r8, #0
   19fb4:	mov	r0, r8
   19fb8:	add	sp, sp, #36	; 0x24
   19fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc0:	bl	119b8 <__errno_location@plt>
   19fc4:	mov	r3, #22
   19fc8:	str	r3, [r0]
   19fcc:	mov	r0, r8
   19fd0:	add	sp, sp, #36	; 0x24
   19fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fd8:	ldr	r3, [pc, #416]	; 1a180 <__assert_fail@plt+0x85dc>
   19fdc:	ldr	r2, [pc, #416]	; 1a184 <__assert_fail@plt+0x85e0>
   19fe0:	str	r3, [sp]
   19fe4:	mov	r0, #31
   19fe8:	ldr	r3, [pc, #408]	; 1a188 <__assert_fail@plt+0x85e4>
   19fec:	bl	1b668 <__assert_fail@plt+0x9ac4>
   19ff0:	cmp	r0, #0
   19ff4:	str	r0, [r8, #56]	; 0x38
   19ff8:	beq	19f4c <__assert_fail@plt+0x83a8>
   19ffc:	ldr	r3, [r8, #48]	; 0x30
   1a000:	tst	r3, #516	; 0x204
   1a004:	bne	19f0c <__assert_fail@plt+0x8368>
   1a008:	ldr	r2, [pc, #380]	; 1a18c <__assert_fail@plt+0x85e8>
   1a00c:	tst	r3, #16
   1a010:	ldr	r1, [pc, #376]	; 1a190 <__assert_fail@plt+0x85ec>
   1a014:	moveq	r1, r2
   1a018:	tst	r3, #512	; 0x200
   1a01c:	bne	1a130 <__assert_fail@plt+0x858c>
   1a020:	ldr	r0, [pc, #364]	; 1a194 <__assert_fail@plt+0x85f0>
   1a024:	bl	3772c <__assert_fail@plt+0x25b88>
   1a028:	cmp	r0, #0
   1a02c:	str	r0, [r8, #28]
   1a030:	ldrlt	r3, [r8, #48]	; 0x30
   1a034:	orrlt	r3, r3, #4
   1a038:	strlt	r3, [r8, #48]	; 0x30
   1a03c:	b	19f0c <__assert_fail@plt+0x8368>
   1a040:	ldr	r3, [sp, #12]
   1a044:	cmp	r3, #0
   1a048:	strne	fp, [sp, #16]
   1a04c:	bne	19ce0 <__assert_fail@plt+0x813c>
   1a050:	str	r3, [sp, #16]
   1a054:	mov	r7, r3
   1a058:	b	19e78 <__assert_fail@plt+0x82d4>
   1a05c:	bl	119b8 <__errno_location@plt>
   1a060:	mov	r8, #0
   1a064:	mov	r3, #22
   1a068:	str	r3, [r0]
   1a06c:	mov	r0, r8
   1a070:	add	sp, sp, #36	; 0x24
   1a074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a078:	ldr	r2, [r8, #40]	; 0x28
   1a07c:	ldr	r5, [r8, #44]	; 0x2c
   1a080:	cmp	r4, r2
   1a084:	bls	1a0c8 <__assert_fail@plt+0x8524>
   1a088:	add	r1, sl, #41	; 0x29
   1a08c:	cmn	r1, #-1073741823	; 0xc0000001
   1a090:	str	r1, [r8, #40]	; 0x28
   1a094:	bhi	1a144 <__assert_fail@plt+0x85a0>
   1a098:	lsl	r1, r1, #2
   1a09c:	ldr	r0, [r8, #8]
   1a0a0:	bl	36970 <__assert_fail@plt+0x24dcc>
   1a0a4:	cmp	r0, #0
   1a0a8:	beq	1a144 <__assert_fail@plt+0x85a0>
   1a0ac:	str	r0, [r8, #8]
   1a0b0:	b	1a0cc <__assert_fail@plt+0x8528>
   1a0b4:	mov	r3, #1
   1a0b8:	str	r3, [sp, #24]
   1a0bc:	b	19cf0 <__assert_fail@plt+0x814c>
   1a0c0:	mov	r4, #4096	; 0x1000
   1a0c4:	b	19c48 <__assert_fail@plt+0x80a4>
   1a0c8:	ldr	r0, [r8, #8]
   1a0cc:	mov	r2, r0
   1a0d0:	str	r7, [r2], #4
   1a0d4:	ldr	r7, [r7, #8]
   1a0d8:	cmp	r7, #0
   1a0dc:	bne	1a0d0 <__assert_fail@plt+0x852c>
   1a0e0:	mov	r3, r5
   1a0e4:	mov	r1, r4
   1a0e8:	mov	r2, #4
   1a0ec:	bl	11b08 <qsort@plt>
   1a0f0:	ldr	ip, [r8, #8]
   1a0f4:	cmp	sl, #0
   1a0f8:	ldr	r7, [ip]
   1a0fc:	moveq	r3, r7
   1a100:	beq	1a124 <__assert_fail@plt+0x8580>
   1a104:	mov	r2, sl
   1a108:	mov	r3, ip
   1a10c:	ldr	r1, [r3]
   1a110:	ldr	r0, [r3, #4]!
   1a114:	subs	r2, r2, #1
   1a118:	str	r0, [r1, #8]
   1a11c:	bne	1a10c <__assert_fail@plt+0x8568>
   1a120:	ldr	r3, [ip, sl, lsl #2]
   1a124:	mov	r2, #0
   1a128:	str	r2, [r3, #8]
   1a12c:	b	19e78 <__assert_fail@plt+0x82d4>
   1a130:	mov	r2, r1
   1a134:	ldr	r0, [r8, #32]
   1a138:	ldr	r1, [pc, #84]	; 1a194 <__assert_fail@plt+0x85f0>
   1a13c:	bl	1ebc4 <__assert_fail@plt+0xd020>
   1a140:	b	1a028 <__assert_fail@plt+0x8484>
   1a144:	ldr	r0, [r8, #8]
   1a148:	bl	184ec <__assert_fail@plt+0x6948>
   1a14c:	mov	r3, #0
   1a150:	str	r3, [r8, #8]
   1a154:	str	r3, [r8, #40]	; 0x28
   1a158:	b	19e78 <__assert_fail@plt+0x82d4>
   1a15c:	ldr	r0, [r8, #24]
   1a160:	bl	184ec <__assert_fail@plt+0x6948>
   1a164:	str	r4, [r8, #24]
   1a168:	b	19fa8 <__assert_fail@plt+0x8404>
   1a16c:	str	r0, [r8]
   1a170:	b	19f4c <__assert_fail@plt+0x83a8>
   1a174:	mov	r7, fp
   1a178:	b	19e78 <__assert_fail@plt+0x82d4>
   1a17c:	andeq	r0, r0, r2, lsl #2
   1a180:	andeq	r8, r1, ip, ror #9
   1a184:	andeq	r8, r1, ip, lsr r8
   1a188:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1a18c:	andeq	r4, r8, r0, lsl #18
   1a190:	andeq	ip, r8, r0, lsl #18
   1a194:	andeq	r9, r3, r4, asr #11
   1a198:	ldr	r3, [r0]
   1a19c:	push	{r4, r5, r6, lr}
   1a1a0:	cmp	r3, #0
   1a1a4:	mov	r6, r0
   1a1a8:	beq	1a1e4 <__assert_fail@plt+0x8640>
   1a1ac:	ldr	r2, [r3, #48]	; 0x30
   1a1b0:	cmp	r2, #0
   1a1b4:	blt	1a324 <__assert_fail@plt+0x8780>
   1a1b8:	ldr	r4, [r3, #8]
   1a1bc:	mov	r0, r3
   1a1c0:	cmp	r4, #0
   1a1c4:	ldreq	r4, [r3, #4]
   1a1c8:	bl	184ec <__assert_fail@plt+0x6948>
   1a1cc:	mov	r3, r4
   1a1d0:	ldr	r2, [r4, #48]	; 0x30
   1a1d4:	cmp	r2, #0
   1a1d8:	bge	1a1b8 <__assert_fail@plt+0x8614>
   1a1dc:	mov	r0, r4
   1a1e0:	bl	184ec <__assert_fail@plt+0x6948>
   1a1e4:	ldr	r4, [r6, #4]
   1a1e8:	cmp	r4, #0
   1a1ec:	beq	1a214 <__assert_fail@plt+0x8670>
   1a1f0:	ldr	r3, [r4, #12]
   1a1f4:	ldr	r5, [r4, #8]
   1a1f8:	subs	r0, r3, #0
   1a1fc:	beq	1a204 <__assert_fail@plt+0x8660>
   1a200:	bl	11b98 <closedir@plt>
   1a204:	mov	r0, r4
   1a208:	bl	184ec <__assert_fail@plt+0x6948>
   1a20c:	subs	r4, r5, #0
   1a210:	bne	1a1f0 <__assert_fail@plt+0x864c>
   1a214:	ldr	r0, [r6, #8]
   1a218:	bl	184ec <__assert_fail@plt+0x6948>
   1a21c:	ldr	r0, [r6, #24]
   1a220:	bl	184ec <__assert_fail@plt+0x6948>
   1a224:	ldr	r3, [r6, #48]	; 0x30
   1a228:	tst	r3, #512	; 0x200
   1a22c:	beq	1a2c8 <__assert_fail@plt+0x8724>
   1a230:	ldr	r0, [r6, #32]
   1a234:	cmp	r0, #0
   1a238:	blt	1a248 <__assert_fail@plt+0x86a4>
   1a23c:	bl	11b80 <close@plt>
   1a240:	cmp	r0, #0
   1a244:	bne	1a318 <__assert_fail@plt+0x8774>
   1a248:	mov	r5, #0
   1a24c:	add	r4, r6, #60	; 0x3c
   1a250:	b	1a260 <__assert_fail@plt+0x86bc>
   1a254:	bl	1d7d0 <__assert_fail@plt+0xbc2c>
   1a258:	cmp	r0, #0
   1a25c:	bge	1a2c0 <__assert_fail@plt+0x871c>
   1a260:	mov	r0, r4
   1a264:	bl	1d784 <__assert_fail@plt+0xbbe0>
   1a268:	cmp	r0, #0
   1a26c:	mov	r0, r4
   1a270:	beq	1a254 <__assert_fail@plt+0x86b0>
   1a274:	ldr	r0, [r6, #52]	; 0x34
   1a278:	cmp	r0, #0
   1a27c:	beq	1a284 <__assert_fail@plt+0x86e0>
   1a280:	bl	1b958 <__assert_fail@plt+0x9db4>
   1a284:	ldr	r2, [r6, #48]	; 0x30
   1a288:	ldr	r3, [pc, #204]	; 1a35c <__assert_fail@plt+0x87b8>
   1a28c:	ldr	r0, [r6, #56]	; 0x38
   1a290:	and	r3, r3, r2
   1a294:	cmp	r3, #0
   1a298:	beq	1a310 <__assert_fail@plt+0x876c>
   1a29c:	cmp	r0, #0
   1a2a0:	beq	1a2a8 <__assert_fail@plt+0x8704>
   1a2a4:	bl	1b958 <__assert_fail@plt+0x9db4>
   1a2a8:	mov	r0, r6
   1a2ac:	bl	184ec <__assert_fail@plt+0x6948>
   1a2b0:	cmp	r5, #0
   1a2b4:	bne	1a34c <__assert_fail@plt+0x87a8>
   1a2b8:	mov	r0, r5
   1a2bc:	pop	{r4, r5, r6, pc}
   1a2c0:	bl	11b80 <close@plt>
   1a2c4:	b	1a260 <__assert_fail@plt+0x86bc>
   1a2c8:	tst	r3, #4
   1a2cc:	bne	1a248 <__assert_fail@plt+0x86a4>
   1a2d0:	ldr	r0, [r6, #28]
   1a2d4:	bl	11ae4 <fchdir@plt>
   1a2d8:	cmp	r0, #0
   1a2dc:	beq	1a32c <__assert_fail@plt+0x8788>
   1a2e0:	bl	119b8 <__errno_location@plt>
   1a2e4:	mov	r4, r0
   1a2e8:	ldr	r0, [r6, #28]
   1a2ec:	ldr	r5, [r4]
   1a2f0:	bl	11b80 <close@plt>
   1a2f4:	adds	r0, r0, #0
   1a2f8:	movne	r0, #1
   1a2fc:	cmp	r5, #0
   1a300:	movne	r0, #0
   1a304:	cmp	r0, #0
   1a308:	beq	1a24c <__assert_fail@plt+0x86a8>
   1a30c:	b	1a344 <__assert_fail@plt+0x87a0>
   1a310:	bl	184ec <__assert_fail@plt+0x6948>
   1a314:	b	1a2a8 <__assert_fail@plt+0x8704>
   1a318:	bl	119b8 <__errno_location@plt>
   1a31c:	ldr	r5, [r0]
   1a320:	b	1a24c <__assert_fail@plt+0x86a8>
   1a324:	mov	r4, r3
   1a328:	b	1a1dc <__assert_fail@plt+0x8638>
   1a32c:	ldr	r0, [r6, #28]
   1a330:	bl	11b80 <close@plt>
   1a334:	cmp	r0, #0
   1a338:	beq	1a248 <__assert_fail@plt+0x86a4>
   1a33c:	bl	119b8 <__errno_location@plt>
   1a340:	mov	r4, r0
   1a344:	ldr	r5, [r4]
   1a348:	b	1a24c <__assert_fail@plt+0x86a8>
   1a34c:	bl	119b8 <__errno_location@plt>
   1a350:	str	r5, [r0]
   1a354:	mvn	r5, #0
   1a358:	b	1a2b8 <__assert_fail@plt+0x8714>
   1a35c:	andeq	r0, r0, r2, lsl #2
   1a360:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a364:	sub	sp, sp, #12
   1a368:	ldr	r4, [r0]
   1a36c:	cmp	r4, #0
   1a370:	beq	1a4a4 <__assert_fail@plt+0x8900>
   1a374:	ldr	r1, [r0, #48]	; 0x30
   1a378:	ands	r5, r1, #8192	; 0x2000
   1a37c:	bne	1a4a4 <__assert_fail@plt+0x8900>
   1a380:	ldrh	r3, [r4, #60]	; 0x3c
   1a384:	mov	r2, #3
   1a388:	mov	r7, r0
   1a38c:	cmp	r3, #1
   1a390:	strh	r2, [r4, #60]	; 0x3c
   1a394:	beq	1a81c <__assert_fail@plt+0x8c78>
   1a398:	cmp	r3, #2
   1a39c:	beq	1a4b4 <__assert_fail@plt+0x8910>
   1a3a0:	ldrh	r2, [r4, #56]	; 0x38
   1a3a4:	cmp	r2, #1
   1a3a8:	bne	1a3e0 <__assert_fail@plt+0x883c>
   1a3ac:	cmp	r3, #4
   1a3b0:	bne	1a4cc <__assert_fail@plt+0x8928>
   1a3b4:	b	1a4e8 <__assert_fail@plt+0x8944>
   1a3b8:	str	r6, [r7]
   1a3bc:	mov	r0, r4
   1a3c0:	bl	184ec <__assert_fail@plt+0x6948>
   1a3c4:	ldr	r3, [r6, #48]	; 0x30
   1a3c8:	cmp	r3, #0
   1a3cc:	beq	1a554 <__assert_fail@plt+0x89b0>
   1a3d0:	ldrh	r3, [r6, #60]	; 0x3c
   1a3d4:	mov	r4, r6
   1a3d8:	cmp	r3, #4
   1a3dc:	bne	1a708 <__assert_fail@plt+0x8b64>
   1a3e0:	ldr	r6, [r4, #8]
   1a3e4:	cmp	r6, #0
   1a3e8:	bne	1a3b8 <__assert_fail@plt+0x8814>
   1a3ec:	ldr	r6, [r4, #4]
   1a3f0:	ldr	r3, [r6, #12]
   1a3f4:	cmp	r3, #0
   1a3f8:	bne	1aaac <__assert_fail@plt+0x8f08>
   1a3fc:	str	r6, [r7]
   1a400:	mov	r0, r4
   1a404:	bl	184ec <__assert_fail@plt+0x6948>
   1a408:	ldr	r3, [r6, #48]	; 0x30
   1a40c:	cmn	r3, #1
   1a410:	beq	1a99c <__assert_fail@plt+0x8df8>
   1a414:	ldrh	r3, [r6, #56]	; 0x38
   1a418:	cmp	r3, #11
   1a41c:	beq	1a77c <__assert_fail@plt+0x8bd8>
   1a420:	ldr	r3, [r6, #40]	; 0x28
   1a424:	ldr	r2, [r7, #24]
   1a428:	mov	r1, #0
   1a42c:	strb	r1, [r2, r3]
   1a430:	ldr	r3, [r6, #48]	; 0x30
   1a434:	cmp	r3, r1
   1a438:	beq	1a898 <__assert_fail@plt+0x8cf4>
   1a43c:	ldrh	r3, [r6, #58]	; 0x3a
   1a440:	tst	r3, #2
   1a444:	beq	1a858 <__assert_fail@plt+0x8cb4>
   1a448:	ldr	r3, [r7, #48]	; 0x30
   1a44c:	tst	r3, #4
   1a450:	beq	1a90c <__assert_fail@plt+0x8d68>
   1a454:	ldr	r0, [r6, #36]	; 0x24
   1a458:	bl	11b80 <close@plt>
   1a45c:	ldr	r3, [r7, #48]	; 0x30
   1a460:	ldrh	r2, [r6, #56]	; 0x38
   1a464:	cmp	r2, #2
   1a468:	beq	1a49c <__assert_fail@plt+0x88f8>
   1a46c:	ldr	r2, [r6, #32]
   1a470:	cmp	r2, #0
   1a474:	movne	r2, #7
   1a478:	strhne	r2, [r6, #56]	; 0x38
   1a47c:	bne	1a49c <__assert_fail@plt+0x88f8>
   1a480:	mov	r2, #6
   1a484:	mov	r0, r3
   1a488:	strh	r2, [r6, #56]	; 0x38
   1a48c:	add	r1, r7, #56	; 0x38
   1a490:	mov	r2, r6
   1a494:	bl	18b24 <__assert_fail@plt+0x6f80>
   1a498:	ldr	r3, [r7, #48]	; 0x30
   1a49c:	tst	r3, #8192	; 0x2000
   1a4a0:	beq	1a548 <__assert_fail@plt+0x89a4>
   1a4a4:	mov	r6, #0
   1a4a8:	mov	r0, r6
   1a4ac:	add	sp, sp, #12
   1a4b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a4b4:	ldrh	r3, [r4, #56]	; 0x38
   1a4b8:	sub	r2, r3, #12
   1a4bc:	cmp	r2, #1
   1a4c0:	bls	1a954 <__assert_fail@plt+0x8db0>
   1a4c4:	cmp	r3, #1
   1a4c8:	bne	1a3e0 <__assert_fail@plt+0x883c>
   1a4cc:	tst	r1, #64	; 0x40
   1a4d0:	beq	1a788 <__assert_fail@plt+0x8be4>
   1a4d4:	ldrd	r8, [r4, #64]	; 0x40
   1a4d8:	ldrd	r2, [r7, #16]
   1a4dc:	cmp	r9, r3
   1a4e0:	cmpeq	r8, r2
   1a4e4:	beq	1a788 <__assert_fail@plt+0x8be4>
   1a4e8:	ldrh	r3, [r4, #58]	; 0x3a
   1a4ec:	tst	r3, #2
   1a4f0:	bne	1aaa0 <__assert_fail@plt+0x8efc>
   1a4f4:	ldr	r5, [r7, #4]
   1a4f8:	cmp	r5, #0
   1a4fc:	beq	1a52c <__assert_fail@plt+0x8988>
   1a500:	ldr	r0, [r5, #12]
   1a504:	ldr	r6, [r5, #8]
   1a508:	cmp	r0, #0
   1a50c:	beq	1a514 <__assert_fail@plt+0x8970>
   1a510:	bl	11b98 <closedir@plt>
   1a514:	mov	r0, r5
   1a518:	bl	184ec <__assert_fail@plt+0x6948>
   1a51c:	cmp	r6, #0
   1a520:	mov	r5, r6
   1a524:	bne	1a500 <__assert_fail@plt+0x895c>
   1a528:	str	r6, [r7, #4]
   1a52c:	mov	r3, #6
   1a530:	strh	r3, [r4, #56]	; 0x38
   1a534:	mov	r2, r4
   1a538:	add	r1, r7, #56	; 0x38
   1a53c:	ldr	r0, [r7, #48]	; 0x30
   1a540:	mov	r6, r4
   1a544:	bl	18b24 <__assert_fail@plt+0x6f80>
   1a548:	mov	r0, r6
   1a54c:	add	sp, sp, #12
   1a550:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a554:	ldr	r3, [r7, #48]	; 0x30
   1a558:	ands	r8, r3, #4
   1a55c:	addne	r4, r7, #60	; 0x3c
   1a560:	bne	1a594 <__assert_fail@plt+0x89f0>
   1a564:	tst	r3, #512	; 0x200
   1a568:	bne	1a9bc <__assert_fail@plt+0x8e18>
   1a56c:	ldr	r0, [r7, #28]
   1a570:	bl	11ae4 <fchdir@plt>
   1a574:	add	r4, r7, #60	; 0x3c
   1a578:	adds	r5, r0, #0
   1a57c:	movne	r5, #1
   1a580:	b	1a594 <__assert_fail@plt+0x89f0>
   1a584:	mov	r0, r4
   1a588:	bl	1d7d0 <__assert_fail@plt+0xbc2c>
   1a58c:	cmp	r0, #0
   1a590:	bge	1a780 <__assert_fail@plt+0x8bdc>
   1a594:	mov	r0, r4
   1a598:	bl	1d784 <__assert_fail@plt+0xbbe0>
   1a59c:	cmp	r0, #0
   1a5a0:	beq	1a584 <__assert_fail@plt+0x89e0>
   1a5a4:	cmp	r5, #0
   1a5a8:	bne	1aa7c <__assert_fail@plt+0x8ed8>
   1a5ac:	ldr	r2, [r7, #48]	; 0x30
   1a5b0:	ldr	r3, [pc, #1760]	; 1ac98 <__assert_fail@plt+0x90f4>
   1a5b4:	ldr	r0, [r7, #56]	; 0x38
   1a5b8:	and	r3, r3, r2
   1a5bc:	cmp	r3, #0
   1a5c0:	beq	1aa74 <__assert_fail@plt+0x8ed0>
   1a5c4:	cmp	r0, #0
   1a5c8:	beq	1a5d0 <__assert_fail@plt+0x8a2c>
   1a5cc:	bl	1b958 <__assert_fail@plt+0x9db4>
   1a5d0:	ldr	r2, [r6, #52]	; 0x34
   1a5d4:	add	r5, r6, #168	; 0xa8
   1a5d8:	str	r2, [r6, #40]	; 0x28
   1a5dc:	mov	r1, r5
   1a5e0:	add	r2, r2, #1
   1a5e4:	ldr	r0, [r7, #24]
   1a5e8:	bl	11748 <memmove@plt>
   1a5ec:	mov	r0, r5
   1a5f0:	mov	r1, #47	; 0x2f
   1a5f4:	bl	11a78 <strrchr@plt>
   1a5f8:	cmp	r0, #0
   1a5fc:	beq	1a62c <__assert_fail@plt+0x8a88>
   1a600:	cmp	r5, r0
   1a604:	beq	1aa90 <__assert_fail@plt+0x8eec>
   1a608:	add	r4, r0, #1
   1a60c:	mov	r0, r4
   1a610:	bl	11988 <strlen@plt>
   1a614:	mov	r1, r4
   1a618:	mov	r8, r0
   1a61c:	add	r2, r8, #1
   1a620:	mov	r0, r5
   1a624:	bl	11748 <memmove@plt>
   1a628:	str	r8, [r6, #52]	; 0x34
   1a62c:	ldr	r1, [r7, #48]	; 0x30
   1a630:	ldr	r3, [pc, #1632]	; 1ac98 <__assert_fail@plt+0x90f4>
   1a634:	ldr	r2, [r7, #24]
   1a638:	and	r3, r3, r1
   1a63c:	cmp	r3, #0
   1a640:	str	r2, [r6, #28]
   1a644:	str	r2, [r6, #24]
   1a648:	beq	1a838 <__assert_fail@plt+0x8c94>
   1a64c:	ldr	r2, [pc, #1608]	; 1ac9c <__assert_fail@plt+0x90f8>
   1a650:	ldr	r3, [pc, #1608]	; 1aca0 <__assert_fail@plt+0x90fc>
   1a654:	str	r2, [sp]
   1a658:	mov	r1, #0
   1a65c:	ldr	r2, [pc, #1600]	; 1aca4 <__assert_fail@plt+0x9100>
   1a660:	mov	r0, #31
   1a664:	bl	1b668 <__assert_fail@plt+0x9ac4>
   1a668:	ldrh	r3, [r6, #56]	; 0x38
   1a66c:	str	r0, [r7, #56]	; 0x38
   1a670:	cmp	r3, #11
   1a674:	str	r6, [r7]
   1a678:	beq	1a760 <__assert_fail@plt+0x8bbc>
   1a67c:	cmp	r3, #1
   1a680:	bne	1a548 <__assert_fail@plt+0x89a4>
   1a684:	ldr	r3, [r6, #48]	; 0x30
   1a688:	cmp	r3, #0
   1a68c:	ldrdeq	r2, [r6, #64]	; 0x40
   1a690:	strdeq	r2, [r7, #16]
   1a694:	ldr	r2, [r7, #48]	; 0x30
   1a698:	ldr	r3, [pc, #1528]	; 1ac98 <__assert_fail@plt+0x90f4>
   1a69c:	and	r3, r3, r2
   1a6a0:	cmp	r3, #0
   1a6a4:	beq	1a7fc <__assert_fail@plt+0x8c58>
   1a6a8:	mov	r0, #24
   1a6ac:	bl	36944 <__assert_fail@plt+0x24da0>
   1a6b0:	subs	r8, r0, #0
   1a6b4:	beq	1a988 <__assert_fail@plt+0x8de4>
   1a6b8:	ldrd	r4, [r6, #64]	; 0x40
   1a6bc:	ldrd	r2, [r6, #160]	; 0xa0
   1a6c0:	ldr	r0, [r7, #56]	; 0x38
   1a6c4:	strd	r4, [r8]
   1a6c8:	strd	r2, [r8, #8]
   1a6cc:	str	r6, [r8, #16]
   1a6d0:	mov	r1, r8
   1a6d4:	bl	1bfd0 <__assert_fail@plt+0xa42c>
   1a6d8:	cmp	r8, r0
   1a6dc:	mov	r4, r0
   1a6e0:	beq	1a548 <__assert_fail@plt+0x89a4>
   1a6e4:	mov	r0, r8
   1a6e8:	bl	184ec <__assert_fail@plt+0x6948>
   1a6ec:	cmp	r4, #0
   1a6f0:	beq	1a988 <__assert_fail@plt+0x8de4>
   1a6f4:	ldr	r2, [r4, #16]
   1a6f8:	mov	r3, #2
   1a6fc:	str	r2, [r6]
   1a700:	strh	r3, [r6, #56]	; 0x38
   1a704:	b	1a548 <__assert_fail@plt+0x89a4>
   1a708:	cmp	r3, #2
   1a70c:	beq	1aae0 <__assert_fail@plt+0x8f3c>
   1a710:	ldr	r3, [r6, #4]
   1a714:	mov	ip, #47	; 0x2f
   1a718:	ldr	r2, [r7, #24]
   1a71c:	ldr	r0, [r3, #40]	; 0x28
   1a720:	ldr	lr, [r3, #28]
   1a724:	sub	r3, r0, #1
   1a728:	add	r1, r6, #168	; 0xa8
   1a72c:	ldrb	lr, [lr, r3]
   1a730:	cmp	lr, ip
   1a734:	movne	r3, r0
   1a738:	add	r0, r2, r3
   1a73c:	strb	ip, [r2, r3]
   1a740:	ldr	r2, [r6, #52]	; 0x34
   1a744:	add	r0, r0, #1
   1a748:	add	r2, r2, #1
   1a74c:	bl	11748 <memmove@plt>
   1a750:	ldrh	r3, [r6, #56]	; 0x38
   1a754:	str	r6, [r7]
   1a758:	cmp	r3, #11
   1a75c:	bne	1a67c <__assert_fail@plt+0x8ad8>
   1a760:	ldrd	r2, [r6, #112]	; 0x70
   1a764:	cmp	r3, #0
   1a768:	cmpeq	r2, #2
   1a76c:	beq	1ab0c <__assert_fail@plt+0x8f68>
   1a770:	cmp	r3, #0
   1a774:	cmpeq	r2, #1
   1a778:	beq	1a548 <__assert_fail@plt+0x89a4>
   1a77c:	bl	11b68 <abort@plt>
   1a780:	bl	11b80 <close@plt>
   1a784:	b	1a594 <__assert_fail@plt+0x89f0>
   1a788:	ldr	r5, [r7, #4]
   1a78c:	cmp	r5, #0
   1a790:	beq	1aa1c <__assert_fail@plt+0x8e78>
   1a794:	tst	r1, #4096	; 0x1000
   1a798:	bne	1a9e8 <__assert_fail@plt+0x8e44>
   1a79c:	ldr	r3, [r4, #24]
   1a7a0:	mvn	r2, #0
   1a7a4:	mov	r1, r4
   1a7a8:	mov	r0, r7
   1a7ac:	bl	18bdc <__assert_fail@plt+0x7038>
   1a7b0:	cmp	r0, #0
   1a7b4:	beq	1a8fc <__assert_fail@plt+0x8d58>
   1a7b8:	bl	119b8 <__errno_location@plt>
   1a7bc:	ldrh	r3, [r4, #58]	; 0x3a
   1a7c0:	ldr	r6, [r7, #4]
   1a7c4:	orr	r3, r3, #1
   1a7c8:	cmp	r6, #0
   1a7cc:	ldr	r2, [r0]
   1a7d0:	strh	r3, [r4, #58]	; 0x3a
   1a7d4:	str	r2, [r4, #32]
   1a7d8:	beq	1a900 <__assert_fail@plt+0x8d5c>
   1a7dc:	mov	r3, r6
   1a7e0:	ldr	r2, [r3, #4]
   1a7e4:	ldr	r2, [r2, #24]
   1a7e8:	str	r2, [r3, #24]
   1a7ec:	ldr	r3, [r3, #8]
   1a7f0:	cmp	r3, #0
   1a7f4:	bne	1a7e0 <__assert_fail@plt+0x8c3c>
   1a7f8:	b	1a900 <__assert_fail@plt+0x8d5c>
   1a7fc:	ldr	r0, [r7, #56]	; 0x38
   1a800:	add	r1, r6, #64	; 0x40
   1a804:	bl	373c4 <__assert_fail@plt+0x25820>
   1a808:	cmp	r0, #0
   1a80c:	movne	r3, #2
   1a810:	strne	r6, [r6]
   1a814:	strhne	r3, [r6, #56]	; 0x38
   1a818:	b	1a548 <__assert_fail@plt+0x89a4>
   1a81c:	mov	r3, r5
   1a820:	ldr	r0, [r0, #32]
   1a824:	mov	r2, r4
   1a828:	bl	189d8 <__assert_fail@plt+0x6e34>
   1a82c:	mov	r6, r4
   1a830:	strh	r0, [r4, #56]	; 0x38
   1a834:	b	1a548 <__assert_fail@plt+0x89a4>
   1a838:	mov	r0, #32
   1a83c:	bl	36944 <__assert_fail@plt+0x24da0>
   1a840:	cmp	r0, #0
   1a844:	str	r0, [r7, #56]	; 0x38
   1a848:	beq	1a750 <__assert_fail@plt+0x8bac>
   1a84c:	bl	373a0 <__assert_fail@plt+0x257fc>
   1a850:	ldrh	r3, [r6, #56]	; 0x38
   1a854:	b	1a670 <__assert_fail@plt+0x8acc>
   1a858:	tst	r3, #1
   1a85c:	bne	1a45c <__assert_fail@plt+0x88b8>
   1a860:	ldr	r3, [pc, #1088]	; 1aca8 <__assert_fail@plt+0x9104>
   1a864:	mvn	r2, #0
   1a868:	ldr	r1, [r6, #4]
   1a86c:	mov	r0, r7
   1a870:	bl	18bdc <__assert_fail@plt+0x7038>
   1a874:	cmp	r0, #0
   1a878:	beq	1a45c <__assert_fail@plt+0x88b8>
   1a87c:	bl	119b8 <__errno_location@plt>
   1a880:	ldr	r3, [r7, #48]	; 0x30
   1a884:	orr	r3, r3, #8192	; 0x2000
   1a888:	ldr	r2, [r0]
   1a88c:	str	r2, [r6, #32]
   1a890:	str	r3, [r7, #48]	; 0x30
   1a894:	b	1a460 <__assert_fail@plt+0x88bc>
   1a898:	ldr	r3, [r7, #48]	; 0x30
   1a89c:	ands	r8, r3, #4
   1a8a0:	addne	r4, r7, #60	; 0x3c
   1a8a4:	bne	1a8d8 <__assert_fail@plt+0x8d34>
   1a8a8:	tst	r3, #512	; 0x200
   1a8ac:	bne	1ab58 <__assert_fail@plt+0x8fb4>
   1a8b0:	ldr	r0, [r7, #28]
   1a8b4:	bl	11ae4 <fchdir@plt>
   1a8b8:	add	r4, r7, #60	; 0x3c
   1a8bc:	adds	r5, r0, #0
   1a8c0:	movne	r5, #1
   1a8c4:	b	1a8d8 <__assert_fail@plt+0x8d34>
   1a8c8:	mov	r0, r4
   1a8cc:	bl	1d7d0 <__assert_fail@plt+0xbc2c>
   1a8d0:	cmp	r0, #0
   1a8d4:	bge	1a8f4 <__assert_fail@plt+0x8d50>
   1a8d8:	mov	r0, r4
   1a8dc:	bl	1d784 <__assert_fail@plt+0xbbe0>
   1a8e0:	cmp	r0, #0
   1a8e4:	beq	1a8c8 <__assert_fail@plt+0x8d24>
   1a8e8:	cmp	r5, #0
   1a8ec:	bne	1a87c <__assert_fail@plt+0x8cd8>
   1a8f0:	b	1a45c <__assert_fail@plt+0x88b8>
   1a8f4:	bl	11b80 <close@plt>
   1a8f8:	b	1a8d8 <__assert_fail@plt+0x8d34>
   1a8fc:	ldr	r6, [r7, #4]
   1a900:	mov	r3, #0
   1a904:	str	r3, [r7, #4]
   1a908:	b	1a710 <__assert_fail@plt+0x8b6c>
   1a90c:	tst	r3, #512	; 0x200
   1a910:	beq	1ab2c <__assert_fail@plt+0x8f88>
   1a914:	ldr	r1, [r7, #32]
   1a918:	ldr	r4, [r6, #36]	; 0x24
   1a91c:	cmn	r1, #100	; 0x64
   1a920:	sub	r3, r4, r1
   1a924:	clz	r3, r3
   1a928:	lsr	r3, r3, #5
   1a92c:	moveq	r3, #0
   1a930:	cmp	r3, #0
   1a934:	bne	1a77c <__assert_fail@plt+0x8bd8>
   1a938:	add	r0, r7, #60	; 0x3c
   1a93c:	bl	1d78c <__assert_fail@plt+0xbbe8>
   1a940:	cmp	r0, #0
   1a944:	blt	1a94c <__assert_fail@plt+0x8da8>
   1a948:	bl	11b80 <close@plt>
   1a94c:	str	r4, [r7, #32]
   1a950:	b	1a454 <__assert_fail@plt+0x88b0>
   1a954:	mov	r3, #1
   1a958:	mov	r2, r4
   1a95c:	ldr	r0, [r0, #32]
   1a960:	bl	189d8 <__assert_fail@plt+0x6e34>
   1a964:	cmp	r0, #1
   1a968:	strh	r0, [r4, #56]	; 0x38
   1a96c:	mov	r3, r0
   1a970:	beq	1ab98 <__assert_fail@plt+0x8ff4>
   1a974:	cmp	r0, #11
   1a978:	mov	r6, r4
   1a97c:	str	r4, [r7]
   1a980:	bne	1a548 <__assert_fail@plt+0x89a4>
   1a984:	b	1a760 <__assert_fail@plt+0x8bbc>
   1a988:	bl	119b8 <__errno_location@plt>
   1a98c:	mov	r3, #12
   1a990:	mov	r6, #0
   1a994:	str	r3, [r0]
   1a998:	b	1a548 <__assert_fail@plt+0x89a4>
   1a99c:	mov	r0, r6
   1a9a0:	bl	184ec <__assert_fail@plt+0x6948>
   1a9a4:	bl	119b8 <__errno_location@plt>
   1a9a8:	mov	r3, #0
   1a9ac:	mov	r6, r3
   1a9b0:	str	r3, [r0]
   1a9b4:	str	r3, [r7]
   1a9b8:	b	1a548 <__assert_fail@plt+0x89a4>
   1a9bc:	add	r4, r7, #60	; 0x3c
   1a9c0:	mov	r0, r4
   1a9c4:	ldr	r1, [r7, #32]
   1a9c8:	bl	1d78c <__assert_fail@plt+0xbbe8>
   1a9cc:	cmp	r0, #0
   1a9d0:	blt	1a9d8 <__assert_fail@plt+0x8e34>
   1a9d4:	bl	11b80 <close@plt>
   1a9d8:	mvn	r3, #99	; 0x63
   1a9dc:	mov	r5, r8
   1a9e0:	str	r3, [r7, #32]
   1a9e4:	b	1a594 <__assert_fail@plt+0x89f0>
   1a9e8:	bic	ip, r1, #4096	; 0x1000
   1a9ec:	str	ip, [r7, #48]	; 0x30
   1a9f0:	ldr	r0, [r5, #12]
   1a9f4:	ldr	r6, [r5, #8]
   1a9f8:	cmp	r0, #0
   1a9fc:	beq	1aa04 <__assert_fail@plt+0x8e60>
   1aa00:	bl	11b98 <closedir@plt>
   1aa04:	mov	r0, r5
   1aa08:	bl	184ec <__assert_fail@plt+0x6948>
   1aa0c:	cmp	r6, #0
   1aa10:	mov	r5, r6
   1aa14:	bne	1a9f0 <__assert_fail@plt+0x8e4c>
   1aa18:	str	r6, [r7, #4]
   1aa1c:	mov	r1, #3
   1aa20:	mov	r0, r7
   1aa24:	bl	18e74 <__assert_fail@plt+0x72d0>
   1aa28:	cmp	r0, #0
   1aa2c:	mov	r6, r0
   1aa30:	str	r0, [r7, #4]
   1aa34:	bne	1a900 <__assert_fail@plt+0x8d5c>
   1aa38:	ldr	r0, [r7, #48]	; 0x30
   1aa3c:	tst	r0, #8192	; 0x2000
   1aa40:	bne	1a4a4 <__assert_fail@plt+0x8900>
   1aa44:	ldr	r3, [r4, #32]
   1aa48:	cmp	r3, #0
   1aa4c:	beq	1aa60 <__assert_fail@plt+0x8ebc>
   1aa50:	ldrh	r3, [r4, #56]	; 0x38
   1aa54:	cmp	r3, #4
   1aa58:	movne	r3, #7
   1aa5c:	strhne	r3, [r4, #56]	; 0x38
   1aa60:	add	r1, r7, #56	; 0x38
   1aa64:	mov	r2, r4
   1aa68:	bl	18b24 <__assert_fail@plt+0x6f80>
   1aa6c:	mov	r6, r4
   1aa70:	b	1a548 <__assert_fail@plt+0x89a4>
   1aa74:	bl	184ec <__assert_fail@plt+0x6948>
   1aa78:	b	1a5d0 <__assert_fail@plt+0x8a2c>
   1aa7c:	ldr	r3, [r7, #48]	; 0x30
   1aa80:	mov	r6, #0
   1aa84:	orr	r3, r3, #8192	; 0x2000
   1aa88:	str	r3, [r7, #48]	; 0x30
   1aa8c:	b	1a548 <__assert_fail@plt+0x89a4>
   1aa90:	ldrb	r3, [r6, #169]	; 0xa9
   1aa94:	cmp	r3, #0
   1aa98:	bne	1a608 <__assert_fail@plt+0x8a64>
   1aa9c:	b	1a62c <__assert_fail@plt+0x8a88>
   1aaa0:	ldr	r0, [r4, #36]	; 0x24
   1aaa4:	bl	11b80 <close@plt>
   1aaa8:	b	1a4f4 <__assert_fail@plt+0x8950>
   1aaac:	ldr	r3, [r6, #40]	; 0x28
   1aab0:	ldr	r2, [r7, #24]
   1aab4:	mov	r0, #0
   1aab8:	str	r6, [r7]
   1aabc:	mov	r1, #3
   1aac0:	strb	r0, [r2, r3]
   1aac4:	mov	r0, r7
   1aac8:	bl	18e74 <__assert_fail@plt+0x72d0>
   1aacc:	subs	r6, r0, #0
   1aad0:	beq	1ab84 <__assert_fail@plt+0x8fe0>
   1aad4:	mov	r0, r4
   1aad8:	bl	184ec <__assert_fail@plt+0x6948>
   1aadc:	b	1a710 <__assert_fail@plt+0x8b6c>
   1aae0:	mov	r3, #1
   1aae4:	mov	r2, r6
   1aae8:	ldr	r1, [r7, #48]	; 0x30
   1aaec:	ldr	r0, [r7, #32]
   1aaf0:	bl	189d8 <__assert_fail@plt+0x6e34>
   1aaf4:	cmp	r0, #1
   1aaf8:	strh	r0, [r6, #56]	; 0x38
   1aafc:	beq	1abb0 <__assert_fail@plt+0x900c>
   1ab00:	mov	r3, #3
   1ab04:	strh	r3, [r6, #60]	; 0x3c
   1ab08:	b	1a710 <__assert_fail@plt+0x8b6c>
   1ab0c:	mov	r3, #0
   1ab10:	mov	r2, r6
   1ab14:	ldr	r1, [r7, #48]	; 0x30
   1ab18:	ldr	r0, [r7, #32]
   1ab1c:	bl	189d8 <__assert_fail@plt+0x6e34>
   1ab20:	mov	r3, r0
   1ab24:	strh	r0, [r6, #56]	; 0x38
   1ab28:	b	1a67c <__assert_fail@plt+0x8ad8>
   1ab2c:	ldr	r0, [r6, #36]	; 0x24
   1ab30:	bl	11ae4 <fchdir@plt>
   1ab34:	cmp	r0, #0
   1ab38:	beq	1a454 <__assert_fail@plt+0x88b0>
   1ab3c:	bl	119b8 <__errno_location@plt>
   1ab40:	ldr	r3, [r7, #48]	; 0x30
   1ab44:	orr	r3, r3, #8192	; 0x2000
   1ab48:	ldr	r2, [r0]
   1ab4c:	str	r2, [r6, #32]
   1ab50:	str	r3, [r7, #48]	; 0x30
   1ab54:	b	1a454 <__assert_fail@plt+0x88b0>
   1ab58:	add	r4, r7, #60	; 0x3c
   1ab5c:	mov	r0, r4
   1ab60:	ldr	r1, [r7, #32]
   1ab64:	bl	1d78c <__assert_fail@plt+0xbbe8>
   1ab68:	cmp	r0, #0
   1ab6c:	blt	1ab74 <__assert_fail@plt+0x8fd0>
   1ab70:	bl	11b80 <close@plt>
   1ab74:	mvn	r3, #99	; 0x63
   1ab78:	mov	r5, r8
   1ab7c:	str	r3, [r7, #32]
   1ab80:	b	1a8d8 <__assert_fail@plt+0x8d34>
   1ab84:	ldr	r3, [r7, #48]	; 0x30
   1ab88:	tst	r3, #8192	; 0x2000
   1ab8c:	bne	1a4a4 <__assert_fail@plt+0x8900>
   1ab90:	ldr	r6, [r4, #4]
   1ab94:	b	1a3fc <__assert_fail@plt+0x8858>
   1ab98:	ldr	r1, [r7, #48]	; 0x30
   1ab9c:	tst	r1, #4
   1aba0:	beq	1abfc <__assert_fail@plt+0x9058>
   1aba4:	str	r4, [r7]
   1aba8:	mov	r6, r4
   1abac:	b	1a67c <__assert_fail@plt+0x8ad8>
   1abb0:	ldr	r3, [r7, #48]	; 0x30
   1abb4:	tst	r3, #4
   1abb8:	bne	1ab00 <__assert_fail@plt+0x8f5c>
   1abbc:	ldr	r1, [pc, #232]	; 1acac <__assert_fail@plt+0x9108>
   1abc0:	tst	r3, #16
   1abc4:	ldr	r2, [pc, #228]	; 1acb0 <__assert_fail@plt+0x910c>
   1abc8:	movne	r2, r1
   1abcc:	tst	r3, #512	; 0x200
   1abd0:	bne	1ac5c <__assert_fail@plt+0x90b8>
   1abd4:	mov	r1, r2
   1abd8:	ldr	r0, [pc, #212]	; 1acb4 <__assert_fail@plt+0x9110>
   1abdc:	bl	3772c <__assert_fail@plt+0x25b88>
   1abe0:	cmp	r0, #0
   1abe4:	str	r0, [r6, #36]	; 0x24
   1abe8:	blt	1ac44 <__assert_fail@plt+0x90a0>
   1abec:	ldrh	r3, [r6, #58]	; 0x3a
   1abf0:	orr	r3, r3, #2
   1abf4:	strh	r3, [r6, #58]	; 0x3a
   1abf8:	b	1ab00 <__assert_fail@plt+0x8f5c>
   1abfc:	ldr	r3, [pc, #168]	; 1acac <__assert_fail@plt+0x9108>
   1ac00:	tst	r1, #16
   1ac04:	ldr	r2, [pc, #164]	; 1acb0 <__assert_fail@plt+0x910c>
   1ac08:	movne	r2, r3
   1ac0c:	tst	r1, #512	; 0x200
   1ac10:	bne	1ac88 <__assert_fail@plt+0x90e4>
   1ac14:	mov	r1, r2
   1ac18:	ldr	r0, [pc, #148]	; 1acb4 <__assert_fail@plt+0x9110>
   1ac1c:	bl	3772c <__assert_fail@plt+0x25b88>
   1ac20:	cmp	r0, #0
   1ac24:	str	r0, [r4, #36]	; 0x24
   1ac28:	blt	1ac6c <__assert_fail@plt+0x90c8>
   1ac2c:	ldrh	r2, [r4, #58]	; 0x3a
   1ac30:	ldrh	r3, [r4, #56]	; 0x38
   1ac34:	mov	r6, r4
   1ac38:	orr	r2, r2, #2
   1ac3c:	strh	r2, [r4, #58]	; 0x3a
   1ac40:	b	1a670 <__assert_fail@plt+0x8acc>
   1ac44:	bl	119b8 <__errno_location@plt>
   1ac48:	mov	r2, #7
   1ac4c:	ldr	r3, [r0]
   1ac50:	strh	r2, [r6, #56]	; 0x38
   1ac54:	str	r3, [r6, #32]
   1ac58:	b	1ab00 <__assert_fail@plt+0x8f5c>
   1ac5c:	ldr	r1, [pc, #80]	; 1acb4 <__assert_fail@plt+0x9110>
   1ac60:	ldr	r0, [r7, #32]
   1ac64:	bl	1ebc4 <__assert_fail@plt+0xd020>
   1ac68:	b	1abe0 <__assert_fail@plt+0x903c>
   1ac6c:	bl	119b8 <__errno_location@plt>
   1ac70:	mov	r2, #7
   1ac74:	mov	r3, r2
   1ac78:	ldr	r1, [r0]
   1ac7c:	strh	r2, [r4, #56]	; 0x38
   1ac80:	str	r1, [r4, #32]
   1ac84:	b	1aba4 <__assert_fail@plt+0x9000>
   1ac88:	ldr	r1, [pc, #36]	; 1acb4 <__assert_fail@plt+0x9110>
   1ac8c:	ldr	r0, [r7, #32]
   1ac90:	bl	1ebc4 <__assert_fail@plt+0xd020>
   1ac94:	b	1ac20 <__assert_fail@plt+0x907c>
   1ac98:	andeq	r0, r0, r2, lsl #2
   1ac9c:	andeq	r8, r1, ip, ror #9
   1aca0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1aca4:	andeq	r8, r1, ip, lsr r8
   1aca8:	andeq	r9, r3, ip, lsr sp
   1acac:	andeq	ip, r8, r0, lsl #18
   1acb0:	andeq	r4, r8, r0, lsl #18
   1acb4:	andeq	r9, r3, r4, asr #11
   1acb8:	cmp	r2, #4
   1acbc:	bhi	1acd0 <__assert_fail@plt+0x912c>
   1acc0:	mov	r3, #0
   1acc4:	strh	r2, [r1, #60]	; 0x3c
   1acc8:	mov	r0, r3
   1accc:	bx	lr
   1acd0:	push	{r4, lr}
   1acd4:	bl	119b8 <__errno_location@plt>
   1acd8:	mov	r2, #22
   1acdc:	mov	r3, #1
   1ace0:	str	r2, [r0]
   1ace4:	mov	r0, r3
   1ace8:	pop	{r4, pc}
   1acec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1acf0:	bics	r4, r1, #4096	; 0x1000
   1acf4:	bne	1ae68 <__assert_fail@plt+0x92c4>
   1acf8:	mov	r6, r0
   1acfc:	mov	r7, r1
   1ad00:	bl	119b8 <__errno_location@plt>
   1ad04:	ldr	r8, [r6]
   1ad08:	str	r4, [r0]
   1ad0c:	ldr	r3, [r6, #48]	; 0x30
   1ad10:	mov	r9, r0
   1ad14:	ands	r3, r3, #8192	; 0x2000
   1ad18:	bne	1ae80 <__assert_fail@plt+0x92dc>
   1ad1c:	ldrh	r2, [r8, #56]	; 0x38
   1ad20:	cmp	r2, #9
   1ad24:	ldreq	r3, [r8, #8]
   1ad28:	beq	1adac <__assert_fail@plt+0x9208>
   1ad2c:	cmp	r2, #1
   1ad30:	bne	1adac <__assert_fail@plt+0x9208>
   1ad34:	ldr	r4, [r6, #4]
   1ad38:	cmp	r4, #0
   1ad3c:	beq	1ad64 <__assert_fail@plt+0x91c0>
   1ad40:	ldr	r0, [r4, #12]
   1ad44:	ldr	r5, [r4, #8]
   1ad48:	cmp	r0, #0
   1ad4c:	beq	1ad54 <__assert_fail@plt+0x91b0>
   1ad50:	bl	11b98 <closedir@plt>
   1ad54:	mov	r0, r4
   1ad58:	bl	184ec <__assert_fail@plt+0x6948>
   1ad5c:	subs	r4, r5, #0
   1ad60:	bne	1ad40 <__assert_fail@plt+0x919c>
   1ad64:	cmp	r7, #4096	; 0x1000
   1ad68:	movne	r4, #1
   1ad6c:	beq	1adb4 <__assert_fail@plt+0x9210>
   1ad70:	ldr	r3, [r8, #48]	; 0x30
   1ad74:	cmp	r3, #0
   1ad78:	bne	1ad98 <__assert_fail@plt+0x91f4>
   1ad7c:	ldr	r3, [r8, #24]
   1ad80:	ldrb	r3, [r3]
   1ad84:	cmp	r3, #47	; 0x2f
   1ad88:	beq	1ad98 <__assert_fail@plt+0x91f4>
   1ad8c:	ldr	r3, [r6, #48]	; 0x30
   1ad90:	tst	r3, #4
   1ad94:	beq	1add4 <__assert_fail@plt+0x9230>
   1ad98:	mov	r1, r4
   1ad9c:	mov	r0, r6
   1ada0:	bl	18e74 <__assert_fail@plt+0x72d0>
   1ada4:	mov	r3, r0
   1ada8:	str	r0, [r6, #4]
   1adac:	mov	r0, r3
   1adb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1adb4:	ldr	r3, [r6, #48]	; 0x30
   1adb8:	mov	r4, #2
   1adbc:	orr	r3, r3, #4096	; 0x1000
   1adc0:	str	r3, [r6, #48]	; 0x30
   1adc4:	ldr	r3, [r8, #48]	; 0x30
   1adc8:	cmp	r3, #0
   1adcc:	beq	1ad7c <__assert_fail@plt+0x91d8>
   1add0:	b	1ad98 <__assert_fail@plt+0x91f4>
   1add4:	ldr	r2, [pc, #252]	; 1aed8 <__assert_fail@plt+0x9334>
   1add8:	tst	r3, #16
   1addc:	ldr	r1, [pc, #248]	; 1aedc <__assert_fail@plt+0x9338>
   1ade0:	moveq	r1, r2
   1ade4:	tst	r3, #512	; 0x200
   1ade8:	bne	1aea4 <__assert_fail@plt+0x9300>
   1adec:	ldr	r0, [pc, #236]	; 1aee0 <__assert_fail@plt+0x933c>
   1adf0:	bl	3772c <__assert_fail@plt+0x25b88>
   1adf4:	mov	r5, r0
   1adf8:	cmp	r5, #0
   1adfc:	movlt	r3, #0
   1ae00:	strlt	r3, [r6, #4]
   1ae04:	blt	1adac <__assert_fail@plt+0x9208>
   1ae08:	mov	r1, r4
   1ae0c:	mov	r0, r6
   1ae10:	bl	18e74 <__assert_fail@plt+0x72d0>
   1ae14:	ldr	r3, [r6, #48]	; 0x30
   1ae18:	ands	r4, r3, #512	; 0x200
   1ae1c:	str	r0, [r6, #4]
   1ae20:	beq	1ae88 <__assert_fail@plt+0x92e4>
   1ae24:	ldr	r1, [r6, #32]
   1ae28:	cmn	r1, #100	; 0x64
   1ae2c:	sub	r3, r5, r1
   1ae30:	clz	r3, r3
   1ae34:	lsr	r3, r3, #5
   1ae38:	moveq	r3, #0
   1ae3c:	cmp	r3, #0
   1ae40:	bne	1aed4 <__assert_fail@plt+0x9330>
   1ae44:	add	r0, r6, #60	; 0x3c
   1ae48:	bl	1d78c <__assert_fail@plt+0xbbe8>
   1ae4c:	cmp	r0, #0
   1ae50:	blt	1ae58 <__assert_fail@plt+0x92b4>
   1ae54:	bl	11b80 <close@plt>
   1ae58:	str	r5, [r6, #32]
   1ae5c:	ldr	r3, [r6, #4]
   1ae60:	mov	r0, r3
   1ae64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae68:	bl	119b8 <__errno_location@plt>
   1ae6c:	mov	r2, #22
   1ae70:	mov	r3, #0
   1ae74:	str	r2, [r0]
   1ae78:	mov	r0, r3
   1ae7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae80:	mov	r3, r4
   1ae84:	b	1adac <__assert_fail@plt+0x9208>
   1ae88:	mov	r0, r5
   1ae8c:	bl	11ae4 <fchdir@plt>
   1ae90:	cmp	r0, #0
   1ae94:	bne	1aebc <__assert_fail@plt+0x9318>
   1ae98:	mov	r0, r5
   1ae9c:	bl	11b80 <close@plt>
   1aea0:	b	1ae5c <__assert_fail@plt+0x92b8>
   1aea4:	mov	r2, r1
   1aea8:	ldr	r0, [r6, #32]
   1aeac:	ldr	r1, [pc, #44]	; 1aee0 <__assert_fail@plt+0x933c>
   1aeb0:	bl	1ebc4 <__assert_fail@plt+0xd020>
   1aeb4:	mov	r5, r0
   1aeb8:	b	1adf8 <__assert_fail@plt+0x9254>
   1aebc:	ldr	r6, [r9]
   1aec0:	mov	r0, r5
   1aec4:	bl	11b80 <close@plt>
   1aec8:	str	r6, [r9]
   1aecc:	mov	r3, r4
   1aed0:	b	1adac <__assert_fail@plt+0x9208>
   1aed4:	bl	11b68 <abort@plt>
   1aed8:	andeq	r4, r8, r0, lsl #18
   1aedc:	andeq	ip, r8, r0, lsl #18
   1aee0:	andeq	r9, r3, r4, asr #11
   1aee4:	andeq	r0, r0, r0
   1aee8:	push	{r4, lr}
   1aeec:	ror	r0, r0, #3
   1aef0:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1aef4:	mov	r0, r1
   1aef8:	pop	{r4, pc}
   1aefc:	sub	r0, r1, r0
   1af00:	clz	r0, r0
   1af04:	lsr	r0, r0, #5
   1af08:	bx	lr
   1af0c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1af10:	mov	r5, r1
   1af14:	mov	r6, r0
   1af18:	ldr	r4, [r0, #24]
   1af1c:	ldr	r1, [r0, #8]
   1af20:	mov	r0, r5
   1af24:	mov	r8, r3
   1af28:	mov	sl, r2
   1af2c:	blx	r4
   1af30:	ldr	r3, [r6, #8]
   1af34:	cmp	r0, r3
   1af38:	bcs	1b028 <__assert_fail@plt+0x9484>
   1af3c:	ldr	r9, [r6]
   1af40:	mov	r7, r0
   1af44:	add	r4, r9, r0, lsl #3
   1af48:	str	r4, [sl]
   1af4c:	ldr	r3, [r9, r0, lsl #3]
   1af50:	cmp	r3, #0
   1af54:	beq	1afe8 <__assert_fail@plt+0x9444>
   1af58:	cmp	r5, r3
   1af5c:	beq	1af7c <__assert_fail@plt+0x93d8>
   1af60:	mov	r1, r3
   1af64:	mov	r0, r5
   1af68:	ldr	r3, [r6, #28]
   1af6c:	blx	r3
   1af70:	cmp	r0, #0
   1af74:	beq	1afdc <__assert_fail@plt+0x9438>
   1af78:	ldr	r3, [r9, r7, lsl #3]
   1af7c:	cmp	r8, #0
   1af80:	beq	1afac <__assert_fail@plt+0x9408>
   1af84:	ldr	r2, [r4, #4]
   1af88:	cmp	r2, #0
   1af8c:	movne	ip, #0
   1af90:	ldmne	r2, {r0, r1}
   1af94:	streq	r2, [r9, r7, lsl #3]
   1af98:	stmne	r4, {r0, r1}
   1af9c:	strne	ip, [r2]
   1afa0:	ldrne	r1, [r6, #36]	; 0x24
   1afa4:	strne	r1, [r2, #4]
   1afa8:	strne	r2, [r6, #36]	; 0x24
   1afac:	mov	r0, r3
   1afb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1afb4:	ldr	r3, [r2]
   1afb8:	cmp	r5, r3
   1afbc:	beq	1affc <__assert_fail@plt+0x9458>
   1afc0:	mov	r1, r3
   1afc4:	mov	r0, r5
   1afc8:	ldr	r3, [r6, #28]
   1afcc:	blx	r3
   1afd0:	cmp	r0, #0
   1afd4:	bne	1aff4 <__assert_fail@plt+0x9450>
   1afd8:	ldr	r4, [r4, #4]
   1afdc:	ldr	r2, [r4, #4]
   1afe0:	cmp	r2, #0
   1afe4:	bne	1afb4 <__assert_fail@plt+0x9410>
   1afe8:	mov	r3, #0
   1afec:	mov	r0, r3
   1aff0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aff4:	ldr	r2, [r4, #4]
   1aff8:	ldr	r3, [r2]
   1affc:	cmp	r8, #0
   1b000:	beq	1afac <__assert_fail@plt+0x9408>
   1b004:	ldr	r0, [r2, #4]
   1b008:	mov	r1, #0
   1b00c:	str	r0, [r4, #4]
   1b010:	str	r1, [r2]
   1b014:	ldr	r1, [r6, #36]	; 0x24
   1b018:	mov	r0, r3
   1b01c:	str	r1, [r2, #4]
   1b020:	str	r2, [r6, #36]	; 0x24
   1b024:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b028:	bl	11b68 <abort@plt>
   1b02c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b030:	ldr	r6, [r1]
   1b034:	ldr	r3, [r1, #4]
   1b038:	cmp	r6, r3
   1b03c:	bcs	1b10c <__assert_fail@plt+0x9568>
   1b040:	mov	r9, r2
   1b044:	mov	r5, r0
   1b048:	mov	r8, r1
   1b04c:	add	r6, r6, #8
   1b050:	mov	sl, #0
   1b054:	ldr	fp, [r6, #-8]
   1b058:	mov	r7, r6
   1b05c:	cmp	fp, #0
   1b060:	beq	1b100 <__assert_fail@plt+0x955c>
   1b064:	ldr	r4, [r6, #-4]
   1b068:	cmp	r4, #0
   1b06c:	beq	1b0f0 <__assert_fail@plt+0x954c>
   1b070:	ldr	r1, [r5, #8]
   1b074:	b	1b090 <__assert_fail@plt+0x94ec>
   1b078:	ldr	r3, [ip, #4]
   1b07c:	cmp	r2, #0
   1b080:	str	r3, [r4, #4]
   1b084:	str	r4, [ip, #4]
   1b088:	beq	1b0ec <__assert_fail@plt+0x9548>
   1b08c:	mov	r4, r2
   1b090:	ldr	fp, [r4]
   1b094:	ldr	r3, [r5, #24]
   1b098:	mov	r0, fp
   1b09c:	blx	r3
   1b0a0:	ldr	r1, [r5, #8]
   1b0a4:	cmp	r0, r1
   1b0a8:	bcs	1b1ac <__assert_fail@plt+0x9608>
   1b0ac:	ldr	r3, [r5]
   1b0b0:	ldr	r2, [r4, #4]
   1b0b4:	add	ip, r3, r0, lsl #3
   1b0b8:	ldr	lr, [r3, r0, lsl #3]
   1b0bc:	cmp	lr, #0
   1b0c0:	bne	1b078 <__assert_fail@plt+0x94d4>
   1b0c4:	ldr	ip, [r5, #12]
   1b0c8:	str	fp, [r3, r0, lsl #3]
   1b0cc:	add	r3, ip, #1
   1b0d0:	str	r3, [r5, #12]
   1b0d4:	str	lr, [r4]
   1b0d8:	ldr	r3, [r5, #36]	; 0x24
   1b0dc:	cmp	r2, #0
   1b0e0:	str	r3, [r4, #4]
   1b0e4:	str	r4, [r5, #36]	; 0x24
   1b0e8:	bne	1b08c <__assert_fail@plt+0x94e8>
   1b0ec:	ldr	fp, [r6, #-8]
   1b0f0:	cmp	r9, #0
   1b0f4:	str	sl, [r6, #-4]
   1b0f8:	beq	1b114 <__assert_fail@plt+0x9570>
   1b0fc:	ldr	r3, [r8, #4]
   1b100:	cmp	r3, r7
   1b104:	add	r6, r6, #8
   1b108:	bhi	1b054 <__assert_fail@plt+0x94b0>
   1b10c:	mov	r0, #1
   1b110:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b114:	ldr	r3, [r5, #24]
   1b118:	ldr	r1, [r5, #8]
   1b11c:	mov	r0, fp
   1b120:	blx	r3
   1b124:	ldr	r3, [r5, #8]
   1b128:	cmp	r0, r3
   1b12c:	bcs	1b1ac <__assert_fail@plt+0x9608>
   1b130:	ldr	r3, [r5]
   1b134:	add	r4, r3, r0, lsl #3
   1b138:	ldr	r2, [r3, r0, lsl #3]
   1b13c:	cmp	r2, #0
   1b140:	beq	1b180 <__assert_fail@plt+0x95dc>
   1b144:	ldr	r0, [r5, #36]	; 0x24
   1b148:	cmp	r0, #0
   1b14c:	beq	1b194 <__assert_fail@plt+0x95f0>
   1b150:	ldr	r3, [r0, #4]
   1b154:	str	r3, [r5, #36]	; 0x24
   1b158:	ldr	r3, [r4, #4]
   1b15c:	str	fp, [r0]
   1b160:	str	r3, [r0, #4]
   1b164:	str	r0, [r4, #4]
   1b168:	ldr	r2, [r8, #12]
   1b16c:	str	sl, [r6, #-8]
   1b170:	sub	r2, r2, #1
   1b174:	ldr	r3, [r8, #4]
   1b178:	str	r2, [r8, #12]
   1b17c:	b	1b100 <__assert_fail@plt+0x955c>
   1b180:	ldr	r2, [r5, #12]
   1b184:	str	fp, [r3, r0, lsl #3]
   1b188:	add	r3, r2, #1
   1b18c:	str	r3, [r5, #12]
   1b190:	b	1b168 <__assert_fail@plt+0x95c4>
   1b194:	mov	r0, #8
   1b198:	bl	36944 <__assert_fail@plt+0x24da0>
   1b19c:	cmp	r0, #0
   1b1a0:	bne	1b158 <__assert_fail@plt+0x95b4>
   1b1a4:	mov	r0, r9
   1b1a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1ac:	bl	11b68 <abort@plt>
   1b1b0:	ldr	r0, [r0, #8]
   1b1b4:	bx	lr
   1b1b8:	ldr	r0, [r0, #12]
   1b1bc:	bx	lr
   1b1c0:	ldr	r0, [r0, #16]
   1b1c4:	bx	lr
   1b1c8:	ldm	r0, {r1, ip}
   1b1cc:	mov	r0, #0
   1b1d0:	cmp	r1, ip
   1b1d4:	bcs	1b21c <__assert_fail@plt+0x9678>
   1b1d8:	ldr	r3, [r1]
   1b1dc:	cmp	r3, #0
   1b1e0:	beq	1b20c <__assert_fail@plt+0x9668>
   1b1e4:	ldr	r3, [r1, #4]
   1b1e8:	mov	r2, #1
   1b1ec:	cmp	r3, #0
   1b1f0:	beq	1b204 <__assert_fail@plt+0x9660>
   1b1f4:	ldr	r3, [r3, #4]
   1b1f8:	add	r2, r2, #1
   1b1fc:	cmp	r3, #0
   1b200:	bne	1b1f4 <__assert_fail@plt+0x9650>
   1b204:	cmp	r0, r2
   1b208:	movcc	r0, r2
   1b20c:	add	r1, r1, #8
   1b210:	cmp	r1, ip
   1b214:	bcc	1b1d8 <__assert_fail@plt+0x9634>
   1b218:	bx	lr
   1b21c:	bx	lr
   1b220:	push	{lr}		; (str lr, [sp, #-4]!)
   1b224:	mov	r2, #0
   1b228:	ldm	r0, {r1, lr}
   1b22c:	mov	ip, r2
   1b230:	cmp	r1, lr
   1b234:	bcs	1b274 <__assert_fail@plt+0x96d0>
   1b238:	ldr	r3, [r1]
   1b23c:	cmp	r3, #0
   1b240:	beq	1b268 <__assert_fail@plt+0x96c4>
   1b244:	ldr	r3, [r1, #4]
   1b248:	add	ip, ip, #1
   1b24c:	cmp	r3, #0
   1b250:	add	r2, r2, #1
   1b254:	beq	1b268 <__assert_fail@plt+0x96c4>
   1b258:	ldr	r3, [r3, #4]
   1b25c:	add	r2, r2, #1
   1b260:	cmp	r3, #0
   1b264:	bne	1b258 <__assert_fail@plt+0x96b4>
   1b268:	add	r1, r1, #8
   1b26c:	cmp	r1, lr
   1b270:	bcc	1b238 <__assert_fail@plt+0x9694>
   1b274:	ldr	r3, [r0, #12]
   1b278:	cmp	r3, ip
   1b27c:	ldreq	r0, [r0, #16]
   1b280:	subeq	r0, r0, r2
   1b284:	clzeq	r0, r0
   1b288:	lsreq	r0, r0, #5
   1b28c:	movne	r0, #0
   1b290:	pop	{pc}		; (ldr pc, [sp], #4)
   1b294:	push	{r4, r5, r6, r7, lr}
   1b298:	mov	r5, r1
   1b29c:	ldm	r0, {ip, lr}
   1b2a0:	sub	sp, sp, #12
   1b2a4:	ldr	r3, [r0, #16]
   1b2a8:	cmp	ip, lr
   1b2ac:	mov	r4, #0
   1b2b0:	ldr	r6, [r0, #8]
   1b2b4:	ldr	r7, [r0, #12]
   1b2b8:	bcs	1b2fc <__assert_fail@plt+0x9758>
   1b2bc:	ldr	r2, [ip]
   1b2c0:	cmp	r2, #0
   1b2c4:	beq	1b2f0 <__assert_fail@plt+0x974c>
   1b2c8:	ldr	r2, [ip, #4]
   1b2cc:	mov	r1, #1
   1b2d0:	cmp	r2, #0
   1b2d4:	beq	1b2e8 <__assert_fail@plt+0x9744>
   1b2d8:	ldr	r2, [r2, #4]
   1b2dc:	add	r1, r1, #1
   1b2e0:	cmp	r2, #0
   1b2e4:	bne	1b2d8 <__assert_fail@plt+0x9734>
   1b2e8:	cmp	r4, r1
   1b2ec:	movcc	r4, r1
   1b2f0:	add	ip, ip, #8
   1b2f4:	cmp	ip, lr
   1b2f8:	bcc	1b2bc <__assert_fail@plt+0x9718>
   1b2fc:	ldr	r2, [pc, #116]	; 1b378 <__assert_fail@plt+0x97d4>
   1b300:	mov	r1, #1
   1b304:	mov	r0, r5
   1b308:	bl	11a18 <__fprintf_chk@plt>
   1b30c:	mov	r3, r6
   1b310:	ldr	r2, [pc, #100]	; 1b37c <__assert_fail@plt+0x97d8>
   1b314:	mov	r1, #1
   1b318:	mov	r0, r5
   1b31c:	bl	11a18 <__fprintf_chk@plt>
   1b320:	vmov	s15, r7
   1b324:	vldr	d5, [pc, #68]	; 1b370 <__assert_fail@plt+0x97cc>
   1b328:	mov	r3, r7
   1b32c:	ldr	r2, [pc, #76]	; 1b380 <__assert_fail@plt+0x97dc>
   1b330:	vcvt.f64.u32	d6, s15
   1b334:	vmov	s15, r6
   1b338:	mov	r1, #1
   1b33c:	mov	r0, r5
   1b340:	vcvt.f64.u32	d7, s15
   1b344:	vmul.f64	d6, d6, d5
   1b348:	vdiv.f64	d5, d6, d7
   1b34c:	vstr	d5, [sp]
   1b350:	bl	11a18 <__fprintf_chk@plt>
   1b354:	mov	r3, r4
   1b358:	mov	r0, r5
   1b35c:	ldr	r2, [pc, #32]	; 1b384 <__assert_fail@plt+0x97e0>
   1b360:	mov	r1, #1
   1b364:	add	sp, sp, #12
   1b368:	pop	{r4, r5, r6, r7, lr}
   1b36c:	b	11a18 <__fprintf_chk@plt>
   1b370:	andeq	r0, r0, r0
   1b374:	subsmi	r0, r9, r0
   1b378:	andeq	r9, r3, r4, asr sp
   1b37c:	andeq	r9, r3, ip, ror #26
   1b380:	andeq	r9, r3, r4, lsl #27
   1b384:	andeq	r9, r3, r8, lsr #27
   1b388:	push	{r4, r5, r6, lr}
   1b38c:	mov	r5, r1
   1b390:	ldr	r3, [r0, #24]
   1b394:	mov	r6, r0
   1b398:	ldr	r1, [r0, #8]
   1b39c:	mov	r0, r5
   1b3a0:	blx	r3
   1b3a4:	ldr	r3, [r6, #8]
   1b3a8:	cmp	r0, r3
   1b3ac:	bcs	1b40c <__assert_fail@plt+0x9868>
   1b3b0:	ldr	r3, [r6]
   1b3b4:	add	r4, r3, r0, lsl #3
   1b3b8:	ldr	r1, [r3, r0, lsl #3]
   1b3bc:	cmp	r1, #0
   1b3c0:	bne	1b3cc <__assert_fail@plt+0x9828>
   1b3c4:	b	1b3f4 <__assert_fail@plt+0x9850>
   1b3c8:	ldr	r1, [r4]
   1b3cc:	cmp	r5, r1
   1b3d0:	beq	1b3fc <__assert_fail@plt+0x9858>
   1b3d4:	ldr	r3, [r6, #28]
   1b3d8:	mov	r0, r5
   1b3dc:	blx	r3
   1b3e0:	cmp	r0, #0
   1b3e4:	bne	1b404 <__assert_fail@plt+0x9860>
   1b3e8:	ldr	r4, [r4, #4]
   1b3ec:	cmp	r4, #0
   1b3f0:	bne	1b3c8 <__assert_fail@plt+0x9824>
   1b3f4:	mov	r0, #0
   1b3f8:	pop	{r4, r5, r6, pc}
   1b3fc:	mov	r0, r5
   1b400:	pop	{r4, r5, r6, pc}
   1b404:	ldr	r0, [r4]
   1b408:	pop	{r4, r5, r6, pc}
   1b40c:	bl	11b68 <abort@plt>
   1b410:	ldr	r3, [r0, #16]
   1b414:	cmp	r3, #0
   1b418:	beq	1b44c <__assert_fail@plt+0x98a8>
   1b41c:	ldr	r3, [r0]
   1b420:	ldr	r2, [r0, #4]
   1b424:	cmp	r3, r2
   1b428:	bcc	1b43c <__assert_fail@plt+0x9898>
   1b42c:	b	1b454 <__assert_fail@plt+0x98b0>
   1b430:	add	r3, r3, #8
   1b434:	cmp	r3, r2
   1b438:	bcs	1b454 <__assert_fail@plt+0x98b0>
   1b43c:	ldr	r0, [r3]
   1b440:	cmp	r0, #0
   1b444:	beq	1b430 <__assert_fail@plt+0x988c>
   1b448:	bx	lr
   1b44c:	mov	r0, r3
   1b450:	bx	lr
   1b454:	push	{r4, lr}
   1b458:	bl	11b68 <abort@plt>
   1b45c:	push	{r4, r5, r6, lr}
   1b460:	mov	r4, r1
   1b464:	ldr	r3, [r0, #24]
   1b468:	mov	r5, r0
   1b46c:	ldr	r1, [r0, #8]
   1b470:	mov	r0, r4
   1b474:	blx	r3
   1b478:	ldr	r3, [r5, #8]
   1b47c:	cmp	r0, r3
   1b480:	bcs	1b4e4 <__assert_fail@plt+0x9940>
   1b484:	ldr	r3, [r5]
   1b488:	add	r0, r3, r0, lsl #3
   1b48c:	mov	r3, r0
   1b490:	b	1b49c <__assert_fail@plt+0x98f8>
   1b494:	cmp	r3, #0
   1b498:	beq	1b4b0 <__assert_fail@plt+0x990c>
   1b49c:	ldm	r3, {r2, r3}
   1b4a0:	cmp	r4, r2
   1b4a4:	bne	1b494 <__assert_fail@plt+0x98f0>
   1b4a8:	cmp	r3, #0
   1b4ac:	bne	1b4dc <__assert_fail@plt+0x9938>
   1b4b0:	ldr	r2, [r5, #4]
   1b4b4:	mov	r3, r0
   1b4b8:	b	1b4c8 <__assert_fail@plt+0x9924>
   1b4bc:	ldr	r0, [r3]
   1b4c0:	cmp	r0, #0
   1b4c4:	popne	{r4, r5, r6, pc}
   1b4c8:	add	r3, r3, #8
   1b4cc:	cmp	r3, r2
   1b4d0:	bcc	1b4bc <__assert_fail@plt+0x9918>
   1b4d4:	mov	r0, #0
   1b4d8:	pop	{r4, r5, r6, pc}
   1b4dc:	ldr	r0, [r3]
   1b4e0:	pop	{r4, r5, r6, pc}
   1b4e4:	bl	11b68 <abort@plt>
   1b4e8:	push	{r4, r5, r6, lr}
   1b4ec:	mov	r5, r0
   1b4f0:	ldr	r4, [r0]
   1b4f4:	ldr	r0, [r0, #4]
   1b4f8:	cmp	r4, r0
   1b4fc:	bcs	1b578 <__assert_fail@plt+0x99d4>
   1b500:	add	r4, r4, #8
   1b504:	mov	ip, #0
   1b508:	ldr	r3, [r4, #-8]
   1b50c:	mov	r6, r4
   1b510:	cmp	r3, #0
   1b514:	beq	1b560 <__assert_fail@plt+0x99bc>
   1b518:	cmp	r2, ip
   1b51c:	bls	1b56c <__assert_fail@plt+0x99c8>
   1b520:	str	r3, [r1, ip, lsl #2]
   1b524:	ldr	r3, [r4, #-4]
   1b528:	add	r0, ip, #1
   1b52c:	cmp	r3, #0
   1b530:	add	ip, r1, ip, lsl #2
   1b534:	beq	1b558 <__assert_fail@plt+0x99b4>
   1b538:	cmp	r2, r0
   1b53c:	beq	1b574 <__assert_fail@plt+0x99d0>
   1b540:	ldr	lr, [r3]
   1b544:	add	r0, r0, #1
   1b548:	str	lr, [ip, #4]!
   1b54c:	ldr	r3, [r3, #4]
   1b550:	cmp	r3, #0
   1b554:	bne	1b538 <__assert_fail@plt+0x9994>
   1b558:	mov	ip, r0
   1b55c:	ldr	r0, [r5, #4]
   1b560:	cmp	r0, r6
   1b564:	add	r4, r4, #8
   1b568:	bhi	1b508 <__assert_fail@plt+0x9964>
   1b56c:	mov	r0, ip
   1b570:	pop	{r4, r5, r6, pc}
   1b574:	pop	{r4, r5, r6, pc}
   1b578:	mov	r0, #0
   1b57c:	pop	{r4, r5, r6, pc}
   1b580:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b584:	ldr	r3, [r0, #4]
   1b588:	ldr	r8, [r0]
   1b58c:	cmp	r8, r3
   1b590:	bcs	1b5f4 <__assert_fail@plt+0x9a50>
   1b594:	mov	r7, r2
   1b598:	mov	r6, r1
   1b59c:	mov	r9, r0
   1b5a0:	mov	r5, #0
   1b5a4:	ldr	r0, [r8]
   1b5a8:	cmp	r0, #0
   1b5ac:	beq	1b5e0 <__assert_fail@plt+0x9a3c>
   1b5b0:	mov	r4, r8
   1b5b4:	b	1b5bc <__assert_fail@plt+0x9a18>
   1b5b8:	ldr	r0, [r4]
   1b5bc:	mov	r1, r7
   1b5c0:	blx	r6
   1b5c4:	cmp	r0, #0
   1b5c8:	beq	1b5ec <__assert_fail@plt+0x9a48>
   1b5cc:	ldr	r4, [r4, #4]
   1b5d0:	add	r5, r5, #1
   1b5d4:	cmp	r4, #0
   1b5d8:	bne	1b5b8 <__assert_fail@plt+0x9a14>
   1b5dc:	ldr	r3, [r9, #4]
   1b5e0:	add	r8, r8, #8
   1b5e4:	cmp	r3, r8
   1b5e8:	bhi	1b5a4 <__assert_fail@plt+0x9a00>
   1b5ec:	mov	r0, r5
   1b5f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b5f4:	mov	r5, #0
   1b5f8:	b	1b5ec <__assert_fail@plt+0x9a48>
   1b5fc:	push	{r4, r5, r6, lr}
   1b600:	mov	r4, r0
   1b604:	ldrb	r0, [r0]
   1b608:	cmp	r0, #0
   1b60c:	beq	1b63c <__assert_fail@plt+0x9a98>
   1b610:	mov	r5, r1
   1b614:	mov	r1, #0
   1b618:	rsb	r1, r1, r1, lsl #5
   1b61c:	add	r0, r1, r0
   1b620:	mov	r1, r5
   1b624:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1b628:	ldrb	r0, [r4, #1]!
   1b62c:	cmp	r0, #0
   1b630:	bne	1b618 <__assert_fail@plt+0x9a74>
   1b634:	mov	r0, r1
   1b638:	pop	{r4, r5, r6, pc}
   1b63c:	mov	r1, r0
   1b640:	b	1b634 <__assert_fail@plt+0x9a90>
   1b644:	push	{lr}		; (str lr, [sp, #-4]!)
   1b648:	mov	ip, r0
   1b64c:	ldr	lr, [pc, #16]	; 1b664 <__assert_fail@plt+0x9ac0>
   1b650:	ldm	lr!, {r0, r1, r2, r3}
   1b654:	ldr	lr, [lr]
   1b658:	stmia	ip!, {r0, r1, r2, r3}
   1b65c:	str	lr, [ip]
   1b660:	pop	{pc}		; (ldr pc, [sp], #4)
   1b664:	andeq	r9, r3, r0, asr #26
   1b668:	cmp	r2, #0
   1b66c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b670:	mov	r4, r0
   1b674:	ldr	sl, [pc, #548]	; 1b8a0 <__assert_fail@plt+0x9cfc>
   1b678:	mov	r0, #40	; 0x28
   1b67c:	movne	sl, r2
   1b680:	cmp	r3, #0
   1b684:	ldr	fp, [pc, #536]	; 1b8a4 <__assert_fail@plt+0x9d00>
   1b688:	mov	r5, r1
   1b68c:	movne	fp, r3
   1b690:	bl	36944 <__assert_fail@plt+0x24da0>
   1b694:	subs	r8, r0, #0
   1b698:	beq	1b730 <__assert_fail@plt+0x9b8c>
   1b69c:	cmp	r5, #0
   1b6a0:	ldr	r3, [pc, #512]	; 1b8a8 <__assert_fail@plt+0x9d04>
   1b6a4:	beq	1b738 <__assert_fail@plt+0x9b94>
   1b6a8:	cmp	r5, r3
   1b6ac:	str	r5, [r8, #20]
   1b6b0:	beq	1b73c <__assert_fail@plt+0x9b98>
   1b6b4:	vldr	s15, [r5, #8]
   1b6b8:	vldr	s14, [pc, #456]	; 1b888 <__assert_fail@plt+0x9ce4>
   1b6bc:	vcmpe.f32	s15, s14
   1b6c0:	vmrs	APSR_nzcv, fpscr
   1b6c4:	ble	1b720 <__assert_fail@plt+0x9b7c>
   1b6c8:	vldr	s13, [pc, #444]	; 1b88c <__assert_fail@plt+0x9ce8>
   1b6cc:	vcmpe.f32	s15, s13
   1b6d0:	vmrs	APSR_nzcv, fpscr
   1b6d4:	bpl	1b720 <__assert_fail@plt+0x9b7c>
   1b6d8:	vldr	s13, [pc, #432]	; 1b890 <__assert_fail@plt+0x9cec>
   1b6dc:	vldr	s12, [r5, #12]
   1b6e0:	vcmpe.f32	s12, s13
   1b6e4:	vmrs	APSR_nzcv, fpscr
   1b6e8:	ble	1b720 <__assert_fail@plt+0x9b7c>
   1b6ec:	vldr	s13, [r5]
   1b6f0:	vcmpe.f32	s13, #0.0
   1b6f4:	vmrs	APSR_nzcv, fpscr
   1b6f8:	blt	1b720 <__assert_fail@plt+0x9b7c>
   1b6fc:	vadd.f32	s14, s13, s14
   1b700:	vldr	s13, [r5, #4]
   1b704:	vcmpe.f32	s14, s13
   1b708:	vmrs	APSR_nzcv, fpscr
   1b70c:	bpl	1b720 <__assert_fail@plt+0x9b7c>
   1b710:	vldr	s12, [pc, #380]	; 1b894 <__assert_fail@plt+0x9cf0>
   1b714:	vcmpe.f32	s13, s12
   1b718:	vmrs	APSR_nzcv, fpscr
   1b71c:	bls	1b86c <__assert_fail@plt+0x9cc8>
   1b720:	str	r3, [r8, #20]
   1b724:	mov	r0, r8
   1b728:	bl	184ec <__assert_fail@plt+0x6948>
   1b72c:	mov	r8, #0
   1b730:	mov	r0, r8
   1b734:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b738:	str	r3, [r8, #20]
   1b73c:	vldr	s15, [pc, #340]	; 1b898 <__assert_fail@plt+0x9cf4>
   1b740:	vmov	s14, r4
   1b744:	vldr	s13, [pc, #336]	; 1b89c <__assert_fail@plt+0x9cf8>
   1b748:	vcvt.f32.u32	s12, s14
   1b74c:	vdiv.f32	s14, s12, s15
   1b750:	vcmpe.f32	s14, s13
   1b754:	vmrs	APSR_nzcv, fpscr
   1b758:	bge	1b858 <__assert_fail@plt+0x9cb4>
   1b75c:	vcvt.u32.f32	s15, s14
   1b760:	vmov	r4, s15
   1b764:	cmp	r4, #10
   1b768:	movcc	r4, #10
   1b76c:	orr	r7, r4, #1
   1b770:	cmn	r7, #1
   1b774:	ldrne	r9, [pc, #304]	; 1b8ac <__assert_fail@plt+0x9d08>
   1b778:	beq	1b7f0 <__assert_fail@plt+0x9c4c>
   1b77c:	cmp	r7, #9
   1b780:	bls	1b864 <__assert_fail@plt+0x9cc0>
   1b784:	umull	r2, r3, r9, r7
   1b788:	lsr	r3, r3, #1
   1b78c:	add	r3, r3, r3, lsl #1
   1b790:	cmp	r7, r3
   1b794:	beq	1b7e4 <__assert_fail@plt+0x9c40>
   1b798:	mov	r6, #16
   1b79c:	mov	r5, #9
   1b7a0:	mov	r4, #3
   1b7a4:	b	1b7b8 <__assert_fail@plt+0x9c14>
   1b7a8:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1b7ac:	add	r6, r6, #8
   1b7b0:	cmp	r1, #0
   1b7b4:	beq	1b7e4 <__assert_fail@plt+0x9c40>
   1b7b8:	add	r5, r5, r6
   1b7bc:	add	r4, r4, #2
   1b7c0:	cmp	r5, r7
   1b7c4:	mov	r0, r7
   1b7c8:	mov	r1, r4
   1b7cc:	bcc	1b7a8 <__assert_fail@plt+0x9c04>
   1b7d0:	mov	r1, r4
   1b7d4:	mov	r0, r7
   1b7d8:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1b7dc:	cmp	r1, #0
   1b7e0:	bne	1b7f0 <__assert_fail@plt+0x9c4c>
   1b7e4:	add	r7, r7, #2
   1b7e8:	cmn	r7, #1
   1b7ec:	bne	1b77c <__assert_fail@plt+0x9bd8>
   1b7f0:	lsrs	r3, r7, #30
   1b7f4:	movne	r4, #1
   1b7f8:	moveq	r4, #0
   1b7fc:	tst	r7, #536870912	; 0x20000000
   1b800:	bne	1b858 <__assert_fail@plt+0x9cb4>
   1b804:	cmp	r4, #0
   1b808:	bne	1b858 <__assert_fail@plt+0x9cb4>
   1b80c:	str	r7, [r8, #8]
   1b810:	mov	r0, r7
   1b814:	mov	r1, #8
   1b818:	bl	368fc <__assert_fail@plt+0x24d58>
   1b81c:	cmp	r0, #0
   1b820:	str	r0, [r8]
   1b824:	beq	1b724 <__assert_fail@plt+0x9b80>
   1b828:	ldr	r3, [r8, #8]
   1b82c:	str	r4, [r8, #12]
   1b830:	str	r4, [r8, #16]
   1b834:	add	r0, r0, r3, lsl #3
   1b838:	ldr	r3, [sp, #40]	; 0x28
   1b83c:	str	r0, [r8, #4]
   1b840:	str	sl, [r8, #24]
   1b844:	str	fp, [r8, #28]
   1b848:	str	r3, [r8, #32]
   1b84c:	str	r4, [r8, #36]	; 0x24
   1b850:	mov	r0, r8
   1b854:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b858:	mov	r3, #0
   1b85c:	str	r3, [r8, #8]
   1b860:	b	1b724 <__assert_fail@plt+0x9b80>
   1b864:	mov	r4, #3
   1b868:	b	1b7d0 <__assert_fail@plt+0x9c2c>
   1b86c:	vcmpe.f32	s15, s14
   1b870:	vmrs	APSR_nzcv, fpscr
   1b874:	ble	1b720 <__assert_fail@plt+0x9b7c>
   1b878:	ldrb	r3, [r5, #16]
   1b87c:	cmp	r3, #0
   1b880:	bne	1b764 <__assert_fail@plt+0x9bc0>
   1b884:	b	1b740 <__assert_fail@plt+0x9b9c>
   1b888:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b88c:	svccc	0x00666666
   1b890:	svccc	0x008ccccd
   1b894:	svccc	0x00800000
   1b898:	svccc	0x004ccccd
   1b89c:	svcmi	0x00800000
   1b8a0:	andeq	sl, r1, r8, ror #29
   1b8a4:	strdeq	sl, [r1], -ip
   1b8a8:	andeq	r9, r3, r0, asr #26
   1b8ac:	bge	feac6360 <optarg@@GLIBC_2.4+0xfea7b120>
   1b8b0:	push	{r4, r5, r6, r7, r8, lr}
   1b8b4:	mov	r5, r0
   1b8b8:	ldr	r7, [r0]
   1b8bc:	ldr	r3, [r0, #4]
   1b8c0:	cmp	r7, r3
   1b8c4:	addcc	r7, r7, #8
   1b8c8:	movcc	r6, #0
   1b8cc:	bcs	1b948 <__assert_fail@plt+0x9da4>
   1b8d0:	ldr	r2, [r7, #-8]
   1b8d4:	mov	r8, r7
   1b8d8:	cmp	r2, #0
   1b8dc:	beq	1b93c <__assert_fail@plt+0x9d98>
   1b8e0:	ldr	r4, [r7, #-4]
   1b8e4:	ldr	r2, [r5, #32]
   1b8e8:	cmp	r4, #0
   1b8ec:	beq	1b920 <__assert_fail@plt+0x9d7c>
   1b8f0:	cmp	r2, #0
   1b8f4:	beq	1b904 <__assert_fail@plt+0x9d60>
   1b8f8:	ldr	r0, [r4]
   1b8fc:	blx	r2
   1b900:	ldr	r2, [r5, #32]
   1b904:	ldr	r3, [r4, #4]
   1b908:	ldr	r1, [r5, #36]	; 0x24
   1b90c:	str	r6, [r4]
   1b910:	str	r1, [r4, #4]
   1b914:	str	r4, [r5, #36]	; 0x24
   1b918:	subs	r4, r3, #0
   1b91c:	bne	1b8f0 <__assert_fail@plt+0x9d4c>
   1b920:	cmp	r2, #0
   1b924:	beq	1b930 <__assert_fail@plt+0x9d8c>
   1b928:	ldr	r0, [r7, #-8]
   1b92c:	blx	r2
   1b930:	str	r6, [r7, #-8]
   1b934:	str	r6, [r7, #-4]
   1b938:	ldr	r3, [r5, #4]
   1b93c:	cmp	r3, r8
   1b940:	add	r7, r7, #8
   1b944:	bhi	1b8d0 <__assert_fail@plt+0x9d2c>
   1b948:	mov	r3, #0
   1b94c:	str	r3, [r5, #12]
   1b950:	str	r3, [r5, #16]
   1b954:	pop	{r4, r5, r6, r7, r8, pc}
   1b958:	ldr	r3, [r0, #32]
   1b95c:	push	{r4, r5, r6, lr}
   1b960:	cmp	r3, #0
   1b964:	mov	r5, r0
   1b968:	beq	1b9c8 <__assert_fail@plt+0x9e24>
   1b96c:	ldr	r3, [r0, #16]
   1b970:	cmp	r3, #0
   1b974:	beq	1b9c8 <__assert_fail@plt+0x9e24>
   1b978:	ldr	r6, [r0]
   1b97c:	ldr	r3, [r0, #4]
   1b980:	cmp	r6, r3
   1b984:	bcs	1ba04 <__assert_fail@plt+0x9e60>
   1b988:	ldr	r0, [r6]
   1b98c:	cmp	r0, #0
   1b990:	beq	1b9b8 <__assert_fail@plt+0x9e14>
   1b994:	mov	r4, r6
   1b998:	b	1b9a0 <__assert_fail@plt+0x9dfc>
   1b99c:	ldr	r0, [r4]
   1b9a0:	ldr	r3, [r5, #32]
   1b9a4:	blx	r3
   1b9a8:	ldr	r4, [r4, #4]
   1b9ac:	cmp	r4, #0
   1b9b0:	bne	1b99c <__assert_fail@plt+0x9df8>
   1b9b4:	ldr	r3, [r5, #4]
   1b9b8:	add	r6, r6, #8
   1b9bc:	cmp	r3, r6
   1b9c0:	bhi	1b988 <__assert_fail@plt+0x9de4>
   1b9c4:	b	1b9cc <__assert_fail@plt+0x9e28>
   1b9c8:	ldr	r3, [r5, #4]
   1b9cc:	ldr	r6, [r5]
   1b9d0:	cmp	r6, r3
   1b9d4:	bcs	1ba04 <__assert_fail@plt+0x9e60>
   1b9d8:	ldr	r0, [r6, #4]
   1b9dc:	cmp	r0, #0
   1b9e0:	beq	1b9f8 <__assert_fail@plt+0x9e54>
   1b9e4:	ldr	r4, [r0, #4]
   1b9e8:	bl	184ec <__assert_fail@plt+0x6948>
   1b9ec:	subs	r0, r4, #0
   1b9f0:	bne	1b9e4 <__assert_fail@plt+0x9e40>
   1b9f4:	ldr	r3, [r5, #4]
   1b9f8:	add	r6, r6, #8
   1b9fc:	cmp	r3, r6
   1ba00:	bhi	1b9d8 <__assert_fail@plt+0x9e34>
   1ba04:	ldr	r0, [r5, #36]	; 0x24
   1ba08:	cmp	r0, #0
   1ba0c:	beq	1ba20 <__assert_fail@plt+0x9e7c>
   1ba10:	ldr	r4, [r0, #4]
   1ba14:	bl	184ec <__assert_fail@plt+0x6948>
   1ba18:	subs	r0, r4, #0
   1ba1c:	bne	1ba10 <__assert_fail@plt+0x9e6c>
   1ba20:	ldr	r0, [r5]
   1ba24:	bl	184ec <__assert_fail@plt+0x6948>
   1ba28:	mov	r0, r5
   1ba2c:	pop	{r4, r5, r6, lr}
   1ba30:	b	184ec <__assert_fail@plt+0x6948>
   1ba34:	ldr	r3, [r0, #20]
   1ba38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ba3c:	mov	r8, r0
   1ba40:	ldrb	r2, [r3, #16]
   1ba44:	sub	sp, sp, #40	; 0x28
   1ba48:	cmp	r2, #0
   1ba4c:	bne	1ba78 <__assert_fail@plt+0x9ed4>
   1ba50:	vmov	s15, r1
   1ba54:	vldr	s13, [r3, #8]
   1ba58:	vldr	s14, [pc, #648]	; 1bce8 <__assert_fail@plt+0xa144>
   1ba5c:	vcvt.f32.u32	s12, s15
   1ba60:	vdiv.f32	s15, s12, s13
   1ba64:	vcmpe.f32	s15, s14
   1ba68:	vmrs	APSR_nzcv, fpscr
   1ba6c:	bge	1bca0 <__assert_fail@plt+0xa0fc>
   1ba70:	vcvt.u32.f32	s15, s15
   1ba74:	vmov	r1, s15
   1ba78:	cmp	r1, #10
   1ba7c:	movcc	r1, #10
   1ba80:	orr	r7, r1, #1
   1ba84:	cmn	r7, #1
   1ba88:	ldrne	r9, [pc, #604]	; 1bcec <__assert_fail@plt+0xa148>
   1ba8c:	beq	1bb04 <__assert_fail@plt+0x9f60>
   1ba90:	cmp	r7, #9
   1ba94:	bls	1bcb0 <__assert_fail@plt+0xa10c>
   1ba98:	umull	r2, r3, r9, r7
   1ba9c:	lsr	r3, r3, #1
   1baa0:	add	r3, r3, r3, lsl #1
   1baa4:	cmp	r7, r3
   1baa8:	beq	1baf8 <__assert_fail@plt+0x9f54>
   1baac:	mov	r6, #16
   1bab0:	mov	r5, #9
   1bab4:	mov	r4, #3
   1bab8:	b	1bad4 <__assert_fail@plt+0x9f30>
   1babc:	mov	r1, r4
   1bac0:	mov	r0, r7
   1bac4:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1bac8:	add	r6, r6, #8
   1bacc:	cmp	r1, #0
   1bad0:	beq	1baf8 <__assert_fail@plt+0x9f54>
   1bad4:	add	r5, r5, r6
   1bad8:	cmp	r5, r7
   1badc:	add	r4, r4, #2
   1bae0:	bcc	1babc <__assert_fail@plt+0x9f18>
   1bae4:	mov	r1, r4
   1bae8:	mov	r0, r7
   1baec:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1baf0:	cmp	r1, #0
   1baf4:	bne	1bb04 <__assert_fail@plt+0x9f60>
   1baf8:	add	r7, r7, #2
   1bafc:	cmn	r7, #1
   1bb00:	bne	1ba90 <__assert_fail@plt+0x9eec>
   1bb04:	lsrs	r3, r7, #30
   1bb08:	movne	r4, #1
   1bb0c:	moveq	r4, #0
   1bb10:	tst	r7, #536870912	; 0x20000000
   1bb14:	bne	1bca0 <__assert_fail@plt+0xa0fc>
   1bb18:	cmp	r4, #0
   1bb1c:	bne	1bca0 <__assert_fail@plt+0xa0fc>
   1bb20:	ldr	r3, [r8, #8]
   1bb24:	cmp	r3, r7
   1bb28:	beq	1bc90 <__assert_fail@plt+0xa0ec>
   1bb2c:	mov	r1, #8
   1bb30:	mov	r0, r7
   1bb34:	bl	368fc <__assert_fail@plt+0x24d58>
   1bb38:	cmp	r0, #0
   1bb3c:	str	r0, [sp]
   1bb40:	beq	1bca0 <__assert_fail@plt+0xa0fc>
   1bb44:	ldr	r1, [r8, #24]
   1bb48:	ldr	r5, [r8, #20]
   1bb4c:	ldr	lr, [r8, #28]
   1bb50:	ldr	ip, [r8, #32]
   1bb54:	add	r0, r0, r7, lsl #3
   1bb58:	ldr	r3, [r8, #36]	; 0x24
   1bb5c:	str	r0, [sp, #4]
   1bb60:	str	r1, [sp, #24]
   1bb64:	mov	r2, r4
   1bb68:	mov	r0, sp
   1bb6c:	mov	r1, r8
   1bb70:	str	r7, [sp, #8]
   1bb74:	str	r4, [sp, #12]
   1bb78:	str	r4, [sp, #16]
   1bb7c:	str	r5, [sp, #20]
   1bb80:	str	lr, [sp, #28]
   1bb84:	str	ip, [sp, #32]
   1bb88:	str	r3, [sp, #36]	; 0x24
   1bb8c:	bl	1b02c <__assert_fail@plt+0x9488>
   1bb90:	subs	r9, r0, #0
   1bb94:	bne	1bcb8 <__assert_fail@plt+0xa114>
   1bb98:	ldr	r5, [sp]
   1bb9c:	ldr	r2, [sp, #4]
   1bba0:	ldr	r3, [sp, #36]	; 0x24
   1bba4:	cmp	r5, r2
   1bba8:	str	r3, [r8, #36]	; 0x24
   1bbac:	addcc	r5, r5, #8
   1bbb0:	movcc	r7, r9
   1bbb4:	bcs	1bc64 <__assert_fail@plt+0xa0c0>
   1bbb8:	ldr	r3, [r5, #-8]
   1bbbc:	mov	r6, r5
   1bbc0:	cmp	r3, #0
   1bbc4:	beq	1bc58 <__assert_fail@plt+0xa0b4>
   1bbc8:	ldr	r4, [r5, #-4]
   1bbcc:	cmp	r4, #0
   1bbd0:	beq	1bc54 <__assert_fail@plt+0xa0b0>
   1bbd4:	ldr	r1, [r8, #8]
   1bbd8:	b	1bbf4 <__assert_fail@plt+0xa050>
   1bbdc:	ldr	r3, [ip, #4]
   1bbe0:	cmp	r2, #0
   1bbe4:	str	r3, [r4, #4]
   1bbe8:	str	r4, [ip, #4]
   1bbec:	beq	1bc50 <__assert_fail@plt+0xa0ac>
   1bbf0:	mov	r4, r2
   1bbf4:	ldr	sl, [r4]
   1bbf8:	ldr	r3, [r8, #24]
   1bbfc:	mov	r0, sl
   1bc00:	blx	r3
   1bc04:	ldr	r1, [r8, #8]
   1bc08:	cmp	r0, r1
   1bc0c:	bcs	1bce4 <__assert_fail@plt+0xa140>
   1bc10:	ldr	r3, [r8]
   1bc14:	ldr	r2, [r4, #4]
   1bc18:	add	ip, r3, r0, lsl #3
   1bc1c:	ldr	lr, [r3, r0, lsl #3]
   1bc20:	cmp	lr, #0
   1bc24:	bne	1bbdc <__assert_fail@plt+0xa038>
   1bc28:	ldr	ip, [r8, #12]
   1bc2c:	str	sl, [r3, r0, lsl #3]
   1bc30:	add	r3, ip, #1
   1bc34:	str	r3, [r8, #12]
   1bc38:	str	lr, [r4]
   1bc3c:	ldr	r3, [r8, #36]	; 0x24
   1bc40:	cmp	r2, #0
   1bc44:	str	r3, [r4, #4]
   1bc48:	str	r4, [r8, #36]	; 0x24
   1bc4c:	bne	1bbf0 <__assert_fail@plt+0xa04c>
   1bc50:	ldr	r2, [sp, #4]
   1bc54:	str	r7, [r5, #-4]
   1bc58:	cmp	r6, r2
   1bc5c:	add	r5, r5, #8
   1bc60:	bcc	1bbb8 <__assert_fail@plt+0xa014>
   1bc64:	mov	r1, sp
   1bc68:	mov	r0, r8
   1bc6c:	mov	r2, #0
   1bc70:	bl	1b02c <__assert_fail@plt+0x9488>
   1bc74:	cmp	r0, #0
   1bc78:	beq	1bce4 <__assert_fail@plt+0xa140>
   1bc7c:	ldr	r0, [sp]
   1bc80:	bl	184ec <__assert_fail@plt+0x6948>
   1bc84:	mov	r0, r9
   1bc88:	add	sp, sp, #40	; 0x28
   1bc8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bc90:	mov	r9, #1
   1bc94:	mov	r0, r9
   1bc98:	add	sp, sp, #40	; 0x28
   1bc9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bca0:	mov	r9, #0
   1bca4:	mov	r0, r9
   1bca8:	add	sp, sp, #40	; 0x28
   1bcac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bcb0:	mov	r4, #3
   1bcb4:	b	1bae4 <__assert_fail@plt+0x9f40>
   1bcb8:	ldr	r0, [r8]
   1bcbc:	bl	184ec <__assert_fail@plt+0x6948>
   1bcc0:	ldmib	sp, {r0, r1, r2}
   1bcc4:	ldr	ip, [sp]
   1bcc8:	ldr	r3, [sp, #36]	; 0x24
   1bccc:	stmib	r8, {r0, r1, r2}
   1bcd0:	mov	r0, r9
   1bcd4:	str	ip, [r8]
   1bcd8:	str	r3, [r8, #36]	; 0x24
   1bcdc:	add	sp, sp, #40	; 0x28
   1bce0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bce4:	bl	11b68 <abort@plt>
   1bce8:	svcmi	0x00800000
   1bcec:	bge	feac67a0 <optarg@@GLIBC_2.4+0xfea7b560>
   1bcf0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bcf4:	subs	r5, r1, #0
   1bcf8:	sub	sp, sp, #12
   1bcfc:	beq	1bf18 <__assert_fail@plt+0xa374>
   1bd00:	ldr	r3, [r0, #24]
   1bd04:	mov	r6, r0
   1bd08:	ldr	r1, [r0, #8]
   1bd0c:	mov	r0, r5
   1bd10:	mov	r7, r2
   1bd14:	blx	r3
   1bd18:	ldr	r3, [r6, #8]
   1bd1c:	cmp	r0, r3
   1bd20:	mov	r8, r0
   1bd24:	bcs	1bf18 <__assert_fail@plt+0xa374>
   1bd28:	ldr	r9, [r6]
   1bd2c:	add	r4, r9, r0, lsl #3
   1bd30:	ldr	r1, [r9, r0, lsl #3]
   1bd34:	str	r4, [sp, #4]
   1bd38:	cmp	r1, #0
   1bd3c:	beq	1bf1c <__assert_fail@plt+0xa378>
   1bd40:	cmp	r5, r1
   1bd44:	beq	1bd9c <__assert_fail@plt+0xa1f8>
   1bd48:	ldr	r3, [r6, #28]
   1bd4c:	mov	r0, r5
   1bd50:	blx	r3
   1bd54:	cmp	r0, #0
   1bd58:	bne	1bdb0 <__assert_fail@plt+0xa20c>
   1bd5c:	ldr	r3, [r4, #4]
   1bd60:	cmp	r3, #0
   1bd64:	bne	1bd90 <__assert_fail@plt+0xa1ec>
   1bd68:	b	1bdbc <__assert_fail@plt+0xa218>
   1bd6c:	ldr	r3, [r6, #28]
   1bd70:	mov	r0, r5
   1bd74:	blx	r3
   1bd78:	cmp	r0, #0
   1bd7c:	bne	1be30 <__assert_fail@plt+0xa28c>
   1bd80:	ldr	r4, [r4, #4]
   1bd84:	ldr	r3, [r4, #4]
   1bd88:	cmp	r3, #0
   1bd8c:	beq	1bdbc <__assert_fail@plt+0xa218>
   1bd90:	ldr	r1, [r3]
   1bd94:	cmp	r5, r1
   1bd98:	bne	1bd6c <__assert_fail@plt+0xa1c8>
   1bd9c:	mov	r0, #0
   1bda0:	cmp	r7, #0
   1bda4:	strne	r1, [r7]
   1bda8:	add	sp, sp, #12
   1bdac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bdb0:	ldr	r1, [r9, r8, lsl #3]
   1bdb4:	cmp	r1, #0
   1bdb8:	bne	1bd9c <__assert_fail@plt+0xa1f8>
   1bdbc:	vldr	s15, [r6, #8]
   1bdc0:	ldr	r3, [r6, #20]
   1bdc4:	vldr	s14, [r6, #12]
   1bdc8:	vcvt.f32.u32	s15, s15
   1bdcc:	vldr	s13, [r3, #8]
   1bdd0:	vcvt.f32.u32	s14, s14
   1bdd4:	vmul.f32	s12, s13, s15
   1bdd8:	vcmpe.f32	s14, s12
   1bddc:	vmrs	APSR_nzcv, fpscr
   1bde0:	bgt	1be3c <__assert_fail@plt+0xa298>
   1bde4:	ldr	r4, [sp, #4]
   1bde8:	ldr	r3, [r4]
   1bdec:	cmp	r3, #0
   1bdf0:	beq	1bf80 <__assert_fail@plt+0xa3dc>
   1bdf4:	ldr	r3, [r6, #36]	; 0x24
   1bdf8:	cmp	r3, #0
   1bdfc:	beq	1bf68 <__assert_fail@plt+0xa3c4>
   1be00:	ldr	r2, [r3, #4]
   1be04:	str	r2, [r6, #36]	; 0x24
   1be08:	ldr	r2, [r6, #16]
   1be0c:	ldr	r1, [r4, #4]
   1be10:	add	r2, r2, #1
   1be14:	str	r5, [r3]
   1be18:	str	r1, [r3, #4]
   1be1c:	mov	r0, #1
   1be20:	str	r3, [r4, #4]
   1be24:	str	r2, [r6, #16]
   1be28:	add	sp, sp, #12
   1be2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1be30:	ldr	r3, [r4, #4]
   1be34:	ldr	r1, [r3]
   1be38:	b	1bdb4 <__assert_fail@plt+0xa210>
   1be3c:	ldr	r2, [pc, #392]	; 1bfcc <__assert_fail@plt+0xa428>
   1be40:	cmp	r3, r2
   1be44:	beq	1bec8 <__assert_fail@plt+0xa324>
   1be48:	vldr	s12, [pc, #352]	; 1bfb0 <__assert_fail@plt+0xa40c>
   1be4c:	vcmpe.f32	s13, s12
   1be50:	vmrs	APSR_nzcv, fpscr
   1be54:	ble	1beb0 <__assert_fail@plt+0xa30c>
   1be58:	vldr	s11, [pc, #340]	; 1bfb4 <__assert_fail@plt+0xa410>
   1be5c:	vcmpe.f32	s13, s11
   1be60:	vmrs	APSR_nzcv, fpscr
   1be64:	bpl	1beb0 <__assert_fail@plt+0xa30c>
   1be68:	vldr	s11, [r3, #12]
   1be6c:	vldr	s10, [pc, #324]	; 1bfb8 <__assert_fail@plt+0xa414>
   1be70:	vcmpe.f32	s11, s10
   1be74:	vmrs	APSR_nzcv, fpscr
   1be78:	ble	1beb0 <__assert_fail@plt+0xa30c>
   1be7c:	vldr	s10, [r3]
   1be80:	vcmpe.f32	s10, #0.0
   1be84:	vmrs	APSR_nzcv, fpscr
   1be88:	blt	1beb0 <__assert_fail@plt+0xa30c>
   1be8c:	vadd.f32	s12, s10, s12
   1be90:	vldr	s10, [r3, #4]
   1be94:	vcmpe.f32	s12, s10
   1be98:	vmrs	APSR_nzcv, fpscr
   1be9c:	bpl	1beb0 <__assert_fail@plt+0xa30c>
   1bea0:	vldr	s9, [pc, #276]	; 1bfbc <__assert_fail@plt+0xa418>
   1bea4:	vcmpe.f32	s10, s9
   1bea8:	vmrs	APSR_nzcv, fpscr
   1beac:	bls	1bf90 <__assert_fail@plt+0xa3ec>
   1beb0:	vldr	s13, [pc, #264]	; 1bfc0 <__assert_fail@plt+0xa41c>
   1beb4:	str	r2, [r6, #20]
   1beb8:	vmul.f32	s12, s15, s13
   1bebc:	vcmpe.f32	s12, s14
   1bec0:	vmrs	APSR_nzcv, fpscr
   1bec4:	bpl	1bde4 <__assert_fail@plt+0xa240>
   1bec8:	vldr	s11, [pc, #244]	; 1bfc4 <__assert_fail@plt+0xa420>
   1becc:	vmul.f32	s15, s15, s11
   1bed0:	vmul.f32	s15, s15, s13
   1bed4:	vldr	s14, [pc, #236]	; 1bfc8 <__assert_fail@plt+0xa424>
   1bed8:	vcmpe.f32	s15, s14
   1bedc:	vmrs	APSR_nzcv, fpscr
   1bee0:	bge	1bf88 <__assert_fail@plt+0xa3e4>
   1bee4:	vcvt.u32.f32	s15, s15
   1bee8:	mov	r0, r6
   1beec:	vmov	r1, s15
   1bef0:	bl	1ba34 <__assert_fail@plt+0x9e90>
   1bef4:	cmp	r0, #0
   1bef8:	beq	1bf88 <__assert_fail@plt+0xa3e4>
   1befc:	mov	r3, #0
   1bf00:	add	r2, sp, #4
   1bf04:	mov	r1, r5
   1bf08:	mov	r0, r6
   1bf0c:	bl	1af0c <__assert_fail@plt+0x9368>
   1bf10:	cmp	r0, #0
   1bf14:	beq	1bde4 <__assert_fail@plt+0xa240>
   1bf18:	bl	11b68 <abort@plt>
   1bf1c:	vmov	s15, r3
   1bf20:	ldr	r2, [r6, #12]
   1bf24:	ldr	r3, [r6, #20]
   1bf28:	vcvt.f32.u32	s15, s15
   1bf2c:	vldr	s13, [r3, #8]
   1bf30:	vmov	s14, r2
   1bf34:	vcvt.f32.u32	s14, s14
   1bf38:	vmul.f32	s12, s13, s15
   1bf3c:	vcmpe.f32	s14, s12
   1bf40:	vmrs	APSR_nzcv, fpscr
   1bf44:	bgt	1be3c <__assert_fail@plt+0xa298>
   1bf48:	ldr	r3, [r6, #16]
   1bf4c:	add	r2, r2, #1
   1bf50:	add	r3, r3, #1
   1bf54:	str	r5, [r4]
   1bf58:	mov	r0, #1
   1bf5c:	str	r2, [r6, #12]
   1bf60:	str	r3, [r6, #16]
   1bf64:	b	1bda8 <__assert_fail@plt+0xa204>
   1bf68:	mov	r0, #8
   1bf6c:	bl	36944 <__assert_fail@plt+0x24da0>
   1bf70:	subs	r3, r0, #0
   1bf74:	beq	1bf88 <__assert_fail@plt+0xa3e4>
   1bf78:	ldr	r4, [sp, #4]
   1bf7c:	b	1be08 <__assert_fail@plt+0xa264>
   1bf80:	ldr	r2, [r6, #12]
   1bf84:	b	1bf48 <__assert_fail@plt+0xa3a4>
   1bf88:	mvn	r0, #0
   1bf8c:	b	1bda8 <__assert_fail@plt+0xa204>
   1bf90:	vcmpe.f32	s12, s13
   1bf94:	vmrs	APSR_nzcv, fpscr
   1bf98:	bpl	1beb0 <__assert_fail@plt+0xa30c>
   1bf9c:	ldrb	r3, [r3, #16]
   1bfa0:	cmp	r3, #0
   1bfa4:	vmulne.f32	s15, s11, s15
   1bfa8:	bne	1bed4 <__assert_fail@plt+0xa330>
   1bfac:	b	1becc <__assert_fail@plt+0xa328>
   1bfb0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bfb4:	svccc	0x00666666
   1bfb8:	svccc	0x008ccccd
   1bfbc:	svccc	0x00800000
   1bfc0:	svccc	0x004ccccd
   1bfc4:	svccc	0x00b4fdf4
   1bfc8:	svcmi	0x00800000
   1bfcc:	andeq	r9, r3, r0, asr #26
   1bfd0:	push	{r4, r5, r6, r7, r8, lr}
   1bfd4:	subs	r5, r1, #0
   1bfd8:	sub	sp, sp, #8
   1bfdc:	beq	1c1e0 <__assert_fail@plt+0xa63c>
   1bfe0:	ldr	r3, [r0, #24]
   1bfe4:	mov	r6, r0
   1bfe8:	ldr	r1, [r0, #8]
   1bfec:	mov	r0, r5
   1bff0:	blx	r3
   1bff4:	ldr	r3, [r6, #8]
   1bff8:	cmp	r0, r3
   1bffc:	mov	r7, r0
   1c000:	bcs	1c1e0 <__assert_fail@plt+0xa63c>
   1c004:	ldr	r8, [r6]
   1c008:	add	r4, r8, r0, lsl #3
   1c00c:	ldr	r1, [r8, r0, lsl #3]
   1c010:	str	r4, [sp, #4]
   1c014:	cmp	r1, #0
   1c018:	beq	1c1e4 <__assert_fail@plt+0xa640>
   1c01c:	cmp	r5, r1
   1c020:	beq	1c044 <__assert_fail@plt+0xa4a0>
   1c024:	ldr	r3, [r6, #28]
   1c028:	mov	r0, r5
   1c02c:	blx	r3
   1c030:	cmp	r0, #0
   1c034:	beq	1c074 <__assert_fail@plt+0xa4d0>
   1c038:	ldr	r1, [r8, r7, lsl #3]
   1c03c:	cmp	r1, #0
   1c040:	beq	1c080 <__assert_fail@plt+0xa4dc>
   1c044:	mov	r0, r1
   1c048:	add	sp, sp, #8
   1c04c:	pop	{r4, r5, r6, r7, r8, pc}
   1c050:	ldr	r1, [r3]
   1c054:	cmp	r5, r1
   1c058:	beq	1c044 <__assert_fail@plt+0xa4a0>
   1c05c:	ldr	r3, [r6, #28]
   1c060:	mov	r0, r5
   1c064:	blx	r3
   1c068:	cmp	r0, #0
   1c06c:	bne	1c0f8 <__assert_fail@plt+0xa554>
   1c070:	ldr	r4, [r4, #4]
   1c074:	ldr	r3, [r4, #4]
   1c078:	cmp	r3, #0
   1c07c:	bne	1c050 <__assert_fail@plt+0xa4ac>
   1c080:	vldr	s15, [r6, #8]
   1c084:	ldr	r3, [r6, #20]
   1c088:	vldr	s14, [r6, #12]
   1c08c:	vcvt.f32.u32	s15, s15
   1c090:	vldr	s13, [r3, #8]
   1c094:	vcvt.f32.u32	s14, s14
   1c098:	vmul.f32	s12, s13, s15
   1c09c:	vcmpe.f32	s14, s12
   1c0a0:	vmrs	APSR_nzcv, fpscr
   1c0a4:	bgt	1c104 <__assert_fail@plt+0xa560>
   1c0a8:	ldr	r4, [sp, #4]
   1c0ac:	ldr	r3, [r4]
   1c0b0:	cmp	r3, #0
   1c0b4:	beq	1c244 <__assert_fail@plt+0xa6a0>
   1c0b8:	ldr	r0, [r6, #36]	; 0x24
   1c0bc:	cmp	r0, #0
   1c0c0:	beq	1c22c <__assert_fail@plt+0xa688>
   1c0c4:	ldr	r3, [r0, #4]
   1c0c8:	str	r3, [r6, #36]	; 0x24
   1c0cc:	ldr	r3, [r6, #16]
   1c0d0:	ldr	r2, [r4, #4]
   1c0d4:	add	r3, r3, #1
   1c0d8:	str	r5, [r0]
   1c0dc:	str	r2, [r0, #4]
   1c0e0:	str	r0, [r4, #4]
   1c0e4:	str	r3, [r6, #16]
   1c0e8:	mov	r1, r5
   1c0ec:	mov	r0, r1
   1c0f0:	add	sp, sp, #8
   1c0f4:	pop	{r4, r5, r6, r7, r8, pc}
   1c0f8:	ldr	r3, [r4, #4]
   1c0fc:	ldr	r1, [r3]
   1c100:	b	1c03c <__assert_fail@plt+0xa498>
   1c104:	ldr	r2, [pc, #388]	; 1c290 <__assert_fail@plt+0xa6ec>
   1c108:	cmp	r3, r2
   1c10c:	beq	1c190 <__assert_fail@plt+0xa5ec>
   1c110:	vldr	s12, [pc, #348]	; 1c274 <__assert_fail@plt+0xa6d0>
   1c114:	vcmpe.f32	s13, s12
   1c118:	vmrs	APSR_nzcv, fpscr
   1c11c:	ble	1c178 <__assert_fail@plt+0xa5d4>
   1c120:	vldr	s11, [pc, #336]	; 1c278 <__assert_fail@plt+0xa6d4>
   1c124:	vcmpe.f32	s13, s11
   1c128:	vmrs	APSR_nzcv, fpscr
   1c12c:	bpl	1c178 <__assert_fail@plt+0xa5d4>
   1c130:	vldr	s11, [r3, #12]
   1c134:	vldr	s10, [pc, #320]	; 1c27c <__assert_fail@plt+0xa6d8>
   1c138:	vcmpe.f32	s11, s10
   1c13c:	vmrs	APSR_nzcv, fpscr
   1c140:	ble	1c178 <__assert_fail@plt+0xa5d4>
   1c144:	vldr	s10, [r3]
   1c148:	vcmpe.f32	s10, #0.0
   1c14c:	vmrs	APSR_nzcv, fpscr
   1c150:	blt	1c178 <__assert_fail@plt+0xa5d4>
   1c154:	vadd.f32	s12, s10, s12
   1c158:	vldr	s10, [r3, #4]
   1c15c:	vcmpe.f32	s12, s10
   1c160:	vmrs	APSR_nzcv, fpscr
   1c164:	bpl	1c178 <__assert_fail@plt+0xa5d4>
   1c168:	vldr	s9, [pc, #272]	; 1c280 <__assert_fail@plt+0xa6dc>
   1c16c:	vcmpe.f32	s10, s9
   1c170:	vmrs	APSR_nzcv, fpscr
   1c174:	bls	1c254 <__assert_fail@plt+0xa6b0>
   1c178:	vldr	s13, [pc, #260]	; 1c284 <__assert_fail@plt+0xa6e0>
   1c17c:	str	r2, [r6, #20]
   1c180:	vmul.f32	s12, s15, s13
   1c184:	vcmpe.f32	s12, s14
   1c188:	vmrs	APSR_nzcv, fpscr
   1c18c:	bpl	1c0a8 <__assert_fail@plt+0xa504>
   1c190:	vldr	s11, [pc, #240]	; 1c288 <__assert_fail@plt+0xa6e4>
   1c194:	vmul.f32	s15, s15, s11
   1c198:	vmul.f32	s15, s15, s13
   1c19c:	vldr	s14, [pc, #232]	; 1c28c <__assert_fail@plt+0xa6e8>
   1c1a0:	vcmpe.f32	s15, s14
   1c1a4:	vmrs	APSR_nzcv, fpscr
   1c1a8:	bge	1c24c <__assert_fail@plt+0xa6a8>
   1c1ac:	vcvt.u32.f32	s15, s15
   1c1b0:	mov	r0, r6
   1c1b4:	vmov	r1, s15
   1c1b8:	bl	1ba34 <__assert_fail@plt+0x9e90>
   1c1bc:	cmp	r0, #0
   1c1c0:	beq	1c24c <__assert_fail@plt+0xa6a8>
   1c1c4:	mov	r3, #0
   1c1c8:	add	r2, sp, #4
   1c1cc:	mov	r1, r5
   1c1d0:	mov	r0, r6
   1c1d4:	bl	1af0c <__assert_fail@plt+0x9368>
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c0a8 <__assert_fail@plt+0xa504>
   1c1e0:	bl	11b68 <abort@plt>
   1c1e4:	vmov	s15, r3
   1c1e8:	ldr	r2, [r6, #12]
   1c1ec:	ldr	r3, [r6, #20]
   1c1f0:	vcvt.f32.u32	s15, s15
   1c1f4:	vldr	s13, [r3, #8]
   1c1f8:	vmov	s14, r2
   1c1fc:	vcvt.f32.u32	s14, s14
   1c200:	vmul.f32	s12, s15, s13
   1c204:	vcmpe.f32	s12, s14
   1c208:	vmrs	APSR_nzcv, fpscr
   1c20c:	bmi	1c104 <__assert_fail@plt+0xa560>
   1c210:	ldr	r3, [r6, #16]
   1c214:	add	r2, r2, #1
   1c218:	add	r3, r3, #1
   1c21c:	str	r5, [r4]
   1c220:	str	r2, [r6, #12]
   1c224:	str	r3, [r6, #16]
   1c228:	b	1c0e8 <__assert_fail@plt+0xa544>
   1c22c:	mov	r0, #8
   1c230:	bl	36944 <__assert_fail@plt+0x24da0>
   1c234:	cmp	r0, #0
   1c238:	beq	1c24c <__assert_fail@plt+0xa6a8>
   1c23c:	ldr	r4, [sp, #4]
   1c240:	b	1c0cc <__assert_fail@plt+0xa528>
   1c244:	ldr	r2, [r6, #12]
   1c248:	b	1c210 <__assert_fail@plt+0xa66c>
   1c24c:	mov	r1, #0
   1c250:	b	1c044 <__assert_fail@plt+0xa4a0>
   1c254:	vcmpe.f32	s12, s13
   1c258:	vmrs	APSR_nzcv, fpscr
   1c25c:	bpl	1c178 <__assert_fail@plt+0xa5d4>
   1c260:	ldrb	r3, [r3, #16]
   1c264:	cmp	r3, #0
   1c268:	vmulne.f32	s15, s11, s15
   1c26c:	bne	1c19c <__assert_fail@plt+0xa5f8>
   1c270:	b	1c194 <__assert_fail@plt+0xa5f0>
   1c274:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c278:	svccc	0x00666666
   1c27c:	svccc	0x008ccccd
   1c280:	svccc	0x00800000
   1c284:	svccc	0x004ccccd
   1c288:	svccc	0x00b4fdf4
   1c28c:	svcmi	0x00800000
   1c290:	andeq	r9, r3, r0, asr #26
   1c294:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c298:	mov	r7, r1
   1c29c:	ldr	r3, [r0, #24]
   1c2a0:	mov	r6, r0
   1c2a4:	ldr	r1, [r0, #8]
   1c2a8:	mov	r0, r7
   1c2ac:	blx	r3
   1c2b0:	ldr	r3, [r6, #8]
   1c2b4:	cmp	r0, r3
   1c2b8:	bcs	1c4e4 <__assert_fail@plt+0xa940>
   1c2bc:	ldr	r9, [r6]
   1c2c0:	mov	r8, r0
   1c2c4:	add	r5, r9, r0, lsl #3
   1c2c8:	ldr	r4, [r9, r0, lsl #3]
   1c2cc:	cmp	r4, #0
   1c2d0:	beq	1c37c <__assert_fail@plt+0xa7d8>
   1c2d4:	cmp	r7, r4
   1c2d8:	beq	1c2f8 <__assert_fail@plt+0xa754>
   1c2dc:	mov	r1, r4
   1c2e0:	ldr	r3, [r6, #28]
   1c2e4:	mov	r0, r7
   1c2e8:	blx	r3
   1c2ec:	cmp	r0, #0
   1c2f0:	beq	1c370 <__assert_fail@plt+0xa7cc>
   1c2f4:	ldr	r4, [r9, r8, lsl #3]
   1c2f8:	ldr	r3, [r5, #4]
   1c2fc:	cmp	r3, #0
   1c300:	movne	r2, #0
   1c304:	ldmne	r3, {r0, r1}
   1c308:	streq	r3, [r9, r8, lsl #3]
   1c30c:	stmne	r5, {r0, r1}
   1c310:	strne	r2, [r3]
   1c314:	ldrne	r2, [r6, #36]	; 0x24
   1c318:	strne	r2, [r3, #4]
   1c31c:	strne	r3, [r6, #36]	; 0x24
   1c320:	cmp	r4, #0
   1c324:	beq	1c37c <__assert_fail@plt+0xa7d8>
   1c328:	ldr	r2, [r9, r8, lsl #3]
   1c32c:	ldr	r3, [r6, #16]
   1c330:	cmp	r2, #0
   1c334:	sub	r3, r3, #1
   1c338:	str	r3, [r6, #16]
   1c33c:	beq	1c3b0 <__assert_fail@plt+0xa80c>
   1c340:	mov	r0, r4
   1c344:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c348:	ldr	r4, [r3]
   1c34c:	cmp	r7, r4
   1c350:	beq	1c390 <__assert_fail@plt+0xa7ec>
   1c354:	mov	r1, r4
   1c358:	ldr	r3, [r6, #28]
   1c35c:	mov	r0, r7
   1c360:	blx	r3
   1c364:	cmp	r0, #0
   1c368:	bne	1c388 <__assert_fail@plt+0xa7e4>
   1c36c:	ldr	r5, [r5, #4]
   1c370:	ldr	r3, [r5, #4]
   1c374:	cmp	r3, #0
   1c378:	bne	1c348 <__assert_fail@plt+0xa7a4>
   1c37c:	mov	r4, #0
   1c380:	mov	r0, r4
   1c384:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c388:	ldr	r3, [r5, #4]
   1c38c:	ldr	r4, [r3]
   1c390:	ldr	r1, [r3, #4]
   1c394:	mov	r2, #0
   1c398:	str	r1, [r5, #4]
   1c39c:	str	r2, [r3]
   1c3a0:	ldr	r2, [r6, #36]	; 0x24
   1c3a4:	str	r2, [r3, #4]
   1c3a8:	str	r3, [r6, #36]	; 0x24
   1c3ac:	b	1c320 <__assert_fail@plt+0xa77c>
   1c3b0:	vldr	s15, [r6, #8]
   1c3b4:	ldr	r3, [r6, #12]
   1c3b8:	ldr	r2, [r6, #20]
   1c3bc:	sub	r3, r3, #1
   1c3c0:	vcvt.f32.u32	s14, s15
   1c3c4:	vldr	s13, [r2]
   1c3c8:	vmov	s15, r3
   1c3cc:	str	r3, [r6, #12]
   1c3d0:	vcvt.f32.u32	s15, s15
   1c3d4:	vmul.f32	s12, s13, s14
   1c3d8:	vcmpe.f32	s15, s12
   1c3dc:	vmrs	APSR_nzcv, fpscr
   1c3e0:	bpl	1c340 <__assert_fail@plt+0xa79c>
   1c3e4:	ldr	r3, [pc, #276]	; 1c500 <__assert_fail@plt+0xa95c>
   1c3e8:	cmp	r2, r3
   1c3ec:	beq	1c4cc <__assert_fail@plt+0xa928>
   1c3f0:	vldr	s12, [r2, #8]
   1c3f4:	vldr	s11, [pc, #236]	; 1c4e8 <__assert_fail@plt+0xa944>
   1c3f8:	vcmpe.f32	s12, s11
   1c3fc:	vmrs	APSR_nzcv, fpscr
   1c400:	ble	1c4b4 <__assert_fail@plt+0xa910>
   1c404:	vldr	s10, [pc, #224]	; 1c4ec <__assert_fail@plt+0xa948>
   1c408:	vcmpe.f32	s12, s10
   1c40c:	vmrs	APSR_nzcv, fpscr
   1c410:	bpl	1c4b4 <__assert_fail@plt+0xa910>
   1c414:	vldr	s10, [pc, #212]	; 1c4f0 <__assert_fail@plt+0xa94c>
   1c418:	vldr	s9, [r2, #12]
   1c41c:	vcmpe.f32	s9, s10
   1c420:	vmrs	APSR_nzcv, fpscr
   1c424:	ble	1c4b4 <__assert_fail@plt+0xa910>
   1c428:	vcmpe.f32	s13, #0.0
   1c42c:	vmrs	APSR_nzcv, fpscr
   1c430:	blt	1c4b4 <__assert_fail@plt+0xa910>
   1c434:	vadd.f32	s13, s13, s11
   1c438:	vldr	s11, [r2, #4]
   1c43c:	vcmpe.f32	s13, s11
   1c440:	vmrs	APSR_nzcv, fpscr
   1c444:	bpl	1c4b4 <__assert_fail@plt+0xa910>
   1c448:	vldr	s10, [pc, #164]	; 1c4f4 <__assert_fail@plt+0xa950>
   1c44c:	vcmpe.f32	s11, s10
   1c450:	vmrs	APSR_nzcv, fpscr
   1c454:	bhi	1c4b4 <__assert_fail@plt+0xa910>
   1c458:	vcmpe.f32	s12, s13
   1c45c:	vmrs	APSR_nzcv, fpscr
   1c460:	ble	1c4b4 <__assert_fail@plt+0xa910>
   1c464:	ldrb	r3, [r2, #16]
   1c468:	cmp	r3, #0
   1c46c:	beq	1c4d4 <__assert_fail@plt+0xa930>
   1c470:	vmul.f32	s15, s14, s11
   1c474:	vcvt.u32.f32	s15, s15
   1c478:	vmov	r1, s15
   1c47c:	mov	r0, r6
   1c480:	bl	1ba34 <__assert_fail@plt+0x9e90>
   1c484:	cmp	r0, #0
   1c488:	bne	1c340 <__assert_fail@plt+0xa79c>
   1c48c:	ldr	r0, [r6, #36]	; 0x24
   1c490:	cmp	r0, #0
   1c494:	beq	1c4a8 <__assert_fail@plt+0xa904>
   1c498:	ldr	r5, [r0, #4]
   1c49c:	bl	184ec <__assert_fail@plt+0x6948>
   1c4a0:	subs	r0, r5, #0
   1c4a4:	bne	1c498 <__assert_fail@plt+0xa8f4>
   1c4a8:	mov	r3, #0
   1c4ac:	str	r3, [r6, #36]	; 0x24
   1c4b0:	b	1c340 <__assert_fail@plt+0xa79c>
   1c4b4:	vldr	s13, [pc, #60]	; 1c4f8 <__assert_fail@plt+0xa954>
   1c4b8:	str	r3, [r6, #20]
   1c4bc:	vmul.f32	s13, s14, s13
   1c4c0:	vcmpe.f32	s15, s13
   1c4c4:	vmrs	APSR_nzcv, fpscr
   1c4c8:	bpl	1c340 <__assert_fail@plt+0xa79c>
   1c4cc:	vldr	s12, [pc, #40]	; 1c4fc <__assert_fail@plt+0xa958>
   1c4d0:	vldr	s11, [pc, #28]	; 1c4f4 <__assert_fail@plt+0xa950>
   1c4d4:	vmul.f32	s15, s14, s11
   1c4d8:	vmul.f32	s15, s15, s12
   1c4dc:	vcvt.u32.f32	s15, s15
   1c4e0:	b	1c478 <__assert_fail@plt+0xa8d4>
   1c4e4:	bl	11b68 <abort@plt>
   1c4e8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c4ec:	svccc	0x00666666
   1c4f0:	svccc	0x008ccccd
   1c4f4:	svccc	0x00800000
   1c4f8:	andeq	r0, r0, r0
   1c4fc:	svccc	0x004ccccd
   1c500:	andeq	r9, r3, r0, asr #26
   1c504:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c508:	mov	r7, r1
   1c50c:	ldr	r3, [r0, #24]
   1c510:	mov	r6, r0
   1c514:	ldr	r1, [r0, #8]
   1c518:	mov	r0, r7
   1c51c:	blx	r3
   1c520:	ldr	r3, [r6, #8]
   1c524:	cmp	r0, r3
   1c528:	bcs	1c754 <__assert_fail@plt+0xabb0>
   1c52c:	ldr	r9, [r6]
   1c530:	mov	r8, r0
   1c534:	add	r5, r9, r0, lsl #3
   1c538:	ldr	r4, [r9, r0, lsl #3]
   1c53c:	cmp	r4, #0
   1c540:	beq	1c5ec <__assert_fail@plt+0xaa48>
   1c544:	cmp	r7, r4
   1c548:	beq	1c568 <__assert_fail@plt+0xa9c4>
   1c54c:	mov	r1, r4
   1c550:	ldr	r3, [r6, #28]
   1c554:	mov	r0, r7
   1c558:	blx	r3
   1c55c:	cmp	r0, #0
   1c560:	beq	1c5e0 <__assert_fail@plt+0xaa3c>
   1c564:	ldr	r4, [r9, r8, lsl #3]
   1c568:	ldr	r3, [r5, #4]
   1c56c:	cmp	r3, #0
   1c570:	movne	r2, #0
   1c574:	ldmne	r3, {r0, r1}
   1c578:	streq	r3, [r9, r8, lsl #3]
   1c57c:	stmne	r5, {r0, r1}
   1c580:	strne	r2, [r3]
   1c584:	ldrne	r2, [r6, #36]	; 0x24
   1c588:	strne	r2, [r3, #4]
   1c58c:	strne	r3, [r6, #36]	; 0x24
   1c590:	cmp	r4, #0
   1c594:	beq	1c5ec <__assert_fail@plt+0xaa48>
   1c598:	ldr	r2, [r9, r8, lsl #3]
   1c59c:	ldr	r3, [r6, #16]
   1c5a0:	cmp	r2, #0
   1c5a4:	sub	r3, r3, #1
   1c5a8:	str	r3, [r6, #16]
   1c5ac:	beq	1c620 <__assert_fail@plt+0xaa7c>
   1c5b0:	mov	r0, r4
   1c5b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c5b8:	ldr	r4, [r3]
   1c5bc:	cmp	r7, r4
   1c5c0:	beq	1c600 <__assert_fail@plt+0xaa5c>
   1c5c4:	mov	r1, r4
   1c5c8:	ldr	r3, [r6, #28]
   1c5cc:	mov	r0, r7
   1c5d0:	blx	r3
   1c5d4:	cmp	r0, #0
   1c5d8:	bne	1c5f8 <__assert_fail@plt+0xaa54>
   1c5dc:	ldr	r5, [r5, #4]
   1c5e0:	ldr	r3, [r5, #4]
   1c5e4:	cmp	r3, #0
   1c5e8:	bne	1c5b8 <__assert_fail@plt+0xaa14>
   1c5ec:	mov	r4, #0
   1c5f0:	mov	r0, r4
   1c5f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c5f8:	ldr	r3, [r5, #4]
   1c5fc:	ldr	r4, [r3]
   1c600:	ldr	r1, [r3, #4]
   1c604:	mov	r2, #0
   1c608:	str	r1, [r5, #4]
   1c60c:	str	r2, [r3]
   1c610:	ldr	r2, [r6, #36]	; 0x24
   1c614:	str	r2, [r3, #4]
   1c618:	str	r3, [r6, #36]	; 0x24
   1c61c:	b	1c590 <__assert_fail@plt+0xa9ec>
   1c620:	vldr	s15, [r6, #8]
   1c624:	ldr	r3, [r6, #12]
   1c628:	ldr	r2, [r6, #20]
   1c62c:	sub	r3, r3, #1
   1c630:	vcvt.f32.u32	s14, s15
   1c634:	vldr	s13, [r2]
   1c638:	vmov	s15, r3
   1c63c:	str	r3, [r6, #12]
   1c640:	vcvt.f32.u32	s15, s15
   1c644:	vmul.f32	s12, s13, s14
   1c648:	vcmpe.f32	s15, s12
   1c64c:	vmrs	APSR_nzcv, fpscr
   1c650:	bpl	1c5b0 <__assert_fail@plt+0xaa0c>
   1c654:	ldr	r3, [pc, #276]	; 1c770 <__assert_fail@plt+0xabcc>
   1c658:	cmp	r2, r3
   1c65c:	beq	1c73c <__assert_fail@plt+0xab98>
   1c660:	vldr	s12, [r2, #8]
   1c664:	vldr	s11, [pc, #236]	; 1c758 <__assert_fail@plt+0xabb4>
   1c668:	vcmpe.f32	s12, s11
   1c66c:	vmrs	APSR_nzcv, fpscr
   1c670:	ble	1c724 <__assert_fail@plt+0xab80>
   1c674:	vldr	s10, [pc, #224]	; 1c75c <__assert_fail@plt+0xabb8>
   1c678:	vcmpe.f32	s12, s10
   1c67c:	vmrs	APSR_nzcv, fpscr
   1c680:	bpl	1c724 <__assert_fail@plt+0xab80>
   1c684:	vldr	s10, [pc, #212]	; 1c760 <__assert_fail@plt+0xabbc>
   1c688:	vldr	s9, [r2, #12]
   1c68c:	vcmpe.f32	s9, s10
   1c690:	vmrs	APSR_nzcv, fpscr
   1c694:	ble	1c724 <__assert_fail@plt+0xab80>
   1c698:	vcmpe.f32	s13, #0.0
   1c69c:	vmrs	APSR_nzcv, fpscr
   1c6a0:	blt	1c724 <__assert_fail@plt+0xab80>
   1c6a4:	vadd.f32	s13, s13, s11
   1c6a8:	vldr	s11, [r2, #4]
   1c6ac:	vcmpe.f32	s13, s11
   1c6b0:	vmrs	APSR_nzcv, fpscr
   1c6b4:	bpl	1c724 <__assert_fail@plt+0xab80>
   1c6b8:	vldr	s10, [pc, #164]	; 1c764 <__assert_fail@plt+0xabc0>
   1c6bc:	vcmpe.f32	s11, s10
   1c6c0:	vmrs	APSR_nzcv, fpscr
   1c6c4:	bhi	1c724 <__assert_fail@plt+0xab80>
   1c6c8:	vcmpe.f32	s12, s13
   1c6cc:	vmrs	APSR_nzcv, fpscr
   1c6d0:	ble	1c724 <__assert_fail@plt+0xab80>
   1c6d4:	ldrb	r3, [r2, #16]
   1c6d8:	cmp	r3, #0
   1c6dc:	beq	1c744 <__assert_fail@plt+0xaba0>
   1c6e0:	vmul.f32	s15, s14, s11
   1c6e4:	vcvt.u32.f32	s15, s15
   1c6e8:	vmov	r1, s15
   1c6ec:	mov	r0, r6
   1c6f0:	bl	1ba34 <__assert_fail@plt+0x9e90>
   1c6f4:	cmp	r0, #0
   1c6f8:	bne	1c5b0 <__assert_fail@plt+0xaa0c>
   1c6fc:	ldr	r0, [r6, #36]	; 0x24
   1c700:	cmp	r0, #0
   1c704:	beq	1c718 <__assert_fail@plt+0xab74>
   1c708:	ldr	r5, [r0, #4]
   1c70c:	bl	184ec <__assert_fail@plt+0x6948>
   1c710:	subs	r0, r5, #0
   1c714:	bne	1c708 <__assert_fail@plt+0xab64>
   1c718:	mov	r3, #0
   1c71c:	str	r3, [r6, #36]	; 0x24
   1c720:	b	1c5b0 <__assert_fail@plt+0xaa0c>
   1c724:	vldr	s13, [pc, #60]	; 1c768 <__assert_fail@plt+0xabc4>
   1c728:	str	r3, [r6, #20]
   1c72c:	vmul.f32	s13, s14, s13
   1c730:	vcmpe.f32	s15, s13
   1c734:	vmrs	APSR_nzcv, fpscr
   1c738:	bpl	1c5b0 <__assert_fail@plt+0xaa0c>
   1c73c:	vldr	s12, [pc, #40]	; 1c76c <__assert_fail@plt+0xabc8>
   1c740:	vldr	s11, [pc, #28]	; 1c764 <__assert_fail@plt+0xabc0>
   1c744:	vmul.f32	s15, s14, s11
   1c748:	vmul.f32	s15, s15, s12
   1c74c:	vcvt.u32.f32	s15, s15
   1c750:	b	1c6e8 <__assert_fail@plt+0xab44>
   1c754:	bl	11b68 <abort@plt>
   1c758:	stclcc	12, cr12, [ip, #820]	; 0x334
   1c75c:	svccc	0x00666666
   1c760:	svccc	0x008ccccd
   1c764:	svccc	0x00800000
   1c768:	andeq	r0, r0, r0
   1c76c:	svccc	0x004ccccd
   1c770:	andeq	r9, r3, r0, asr #26
   1c774:	andeq	r0, r0, r0
   1c778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c77c:	vpush	{d8-d9}
   1c780:	mov	r4, r3
   1c784:	ands	r3, r3, #32
   1c788:	mov	r9, r1
   1c78c:	sub	sp, sp, #108	; 0x6c
   1c790:	mov	r8, r0
   1c794:	str	r3, [sp, #36]	; 0x24
   1c798:	and	r3, r4, #3
   1c79c:	str	r3, [sp, #8]
   1c7a0:	movne	r3, #1024	; 0x400
   1c7a4:	moveq	r3, #1000	; 0x3e8
   1c7a8:	str	r2, [sp, #12]
   1c7ac:	strne	r3, [sp, #40]	; 0x28
   1c7b0:	movne	r2, #1024	; 0x400
   1c7b4:	moveq	r2, #1000	; 0x3e8
   1c7b8:	strne	r3, [sp, #28]
   1c7bc:	streq	r3, [sp, #40]	; 0x28
   1c7c0:	streq	r3, [sp, #28]
   1c7c4:	mov	r3, #0
   1c7c8:	ldrd	r6, [sp, #160]	; 0xa0
   1c7cc:	strd	r2, [sp, #16]
   1c7d0:	bl	11aa8 <localeconv@plt>
   1c7d4:	ldr	r3, [sp, #12]
   1c7d8:	add	r3, r3, #644	; 0x284
   1c7dc:	str	r3, [sp, #24]
   1c7e0:	ldr	fp, [r0]
   1c7e4:	mov	r5, r0
   1c7e8:	mov	r0, fp
   1c7ec:	bl	11988 <strlen@plt>
   1c7f0:	ldr	sl, [r5, #4]
   1c7f4:	ldr	r1, [pc, #684]	; 1caa8 <__assert_fail@plt+0xaf04>
   1c7f8:	mov	r2, r0
   1c7fc:	sub	r0, r0, #1
   1c800:	cmp	r0, #16
   1c804:	movcs	r2, #1
   1c808:	str	r2, [sp, #48]	; 0x30
   1c80c:	mov	r0, sl
   1c810:	movcc	r2, fp
   1c814:	movcs	r2, r1
   1c818:	str	r2, [sp, #52]	; 0x34
   1c81c:	bl	11988 <strlen@plt>
   1c820:	ldr	r3, [sp, #24]
   1c824:	ldr	r2, [pc, #640]	; 1caac <__assert_fail@plt+0xaf08>
   1c828:	add	r3, r3, #3
   1c82c:	str	r3, [sp, #8]
   1c830:	ldr	r5, [r5, #8]
   1c834:	cmp	r0, #16
   1c838:	movhi	sl, r2
   1c83c:	ldrd	r2, [sp, #168]	; 0xa8
   1c840:	str	sl, [sp, #32]
   1c844:	cmp	r3, r7
   1c848:	cmpeq	r2, r6
   1c84c:	bhi	1cab8 <__assert_fail@plt+0xaf14>
   1c850:	mov	r0, r6
   1c854:	mov	r1, r7
   1c858:	bl	381bc <__assert_fail@plt+0x26618>
   1c85c:	orrs	r3, r2, r3
   1c860:	bne	1c8a4 <__assert_fail@plt+0xad00>
   1c864:	ldrd	r2, [sp, #168]	; 0xa8
   1c868:	mov	r0, r6
   1c86c:	mov	r1, r7
   1c870:	bl	381bc <__assert_fail@plt+0x26618>
   1c874:	mov	r2, r0
   1c878:	mul	r0, r0, r9
   1c87c:	umull	sl, fp, r2, r8
   1c880:	mla	r0, r8, r1, r0
   1c884:	mov	r3, r1
   1c888:	add	fp, r0, fp
   1c88c:	mov	r1, fp
   1c890:	mov	r0, sl
   1c894:	bl	381bc <__assert_fail@plt+0x26618>
   1c898:	cmp	r9, r1
   1c89c:	cmpeq	r8, r0
   1c8a0:	beq	1d170 <__assert_fail@plt+0xb5cc>
   1c8a4:	mov	r0, r6
   1c8a8:	mov	r1, r7
   1c8ac:	bl	38074 <__assert_fail@plt+0x264d0>
   1c8b0:	vmov	d9, r0, r1
   1c8b4:	ldrd	r0, [sp, #168]	; 0xa8
   1c8b8:	bl	38074 <__assert_fail@plt+0x264d0>
   1c8bc:	vmov	d7, r0, r1
   1c8c0:	mov	r0, r8
   1c8c4:	mov	r1, r9
   1c8c8:	vdiv.f64	d8, d9, d7
   1c8cc:	bl	38074 <__assert_fail@plt+0x264d0>
   1c8d0:	ands	r8, r4, #16
   1c8d4:	vmov	d7, r0, r1
   1c8d8:	vmul.f64	d8, d8, d7
   1c8dc:	beq	1cee8 <__assert_fail@plt+0xb344>
   1c8e0:	vldr	s15, [sp, #40]	; 0x28
   1c8e4:	vcvt.f64.s32	d7, s15
   1c8e8:	vmul.f64	d6, d7, d7
   1c8ec:	vcmpe.f64	d8, d6
   1c8f0:	vmrs	APSR_nzcv, fpscr
   1c8f4:	blt	1d448 <__assert_fail@plt+0xb8a4>
   1c8f8:	vmul.f64	d5, d7, d6
   1c8fc:	vcmpe.f64	d8, d5
   1c900:	vmrs	APSR_nzcv, fpscr
   1c904:	blt	1d454 <__assert_fail@plt+0xb8b0>
   1c908:	vmul.f64	d6, d7, d5
   1c90c:	vcmpe.f64	d8, d6
   1c910:	vmrs	APSR_nzcv, fpscr
   1c914:	blt	1d45c <__assert_fail@plt+0xb8b8>
   1c918:	vmul.f64	d5, d7, d6
   1c91c:	vcmpe.f64	d8, d5
   1c920:	vmrs	APSR_nzcv, fpscr
   1c924:	blt	1d468 <__assert_fail@plt+0xb8c4>
   1c928:	vmul.f64	d6, d7, d5
   1c92c:	vcmpe.f64	d8, d6
   1c930:	vmrs	APSR_nzcv, fpscr
   1c934:	blt	1d470 <__assert_fail@plt+0xb8cc>
   1c938:	vmul.f64	d5, d7, d6
   1c93c:	vcmpe.f64	d8, d5
   1c940:	vmrs	APSR_nzcv, fpscr
   1c944:	blt	1d47c <__assert_fail@plt+0xb8d8>
   1c948:	vmul.f64	d6, d7, d5
   1c94c:	vcmpe.f64	d8, d6
   1c950:	vmrs	APSR_nzcv, fpscr
   1c954:	blt	1d484 <__assert_fail@plt+0xb8e0>
   1c958:	mov	r9, #8
   1c95c:	and	r8, r4, #3
   1c960:	cmp	r8, #1
   1c964:	vdiv.f64	d9, d8, d6
   1c968:	beq	1d014 <__assert_fail@plt+0xb470>
   1c96c:	vldr	d7, [pc, #292]	; 1ca98 <__assert_fail@plt+0xaef4>
   1c970:	vmov	r0, r1, d9
   1c974:	vcmpe.f64	d9, d7
   1c978:	vmrs	APSR_nzcv, fpscr
   1c97c:	bpl	1c9c4 <__assert_fail@plt+0xae20>
   1c980:	bl	38208 <__assert_fail@plt+0x26664>
   1c984:	cmp	r8, #0
   1c988:	mov	r6, r0
   1c98c:	mov	r7, r1
   1c990:	movne	r0, #0
   1c994:	bne	1c9b0 <__assert_fail@plt+0xae0c>
   1c998:	bl	38074 <__assert_fail@plt+0x264d0>
   1c99c:	vmov	d7, r0, r1
   1c9a0:	vcmp.f64	d7, d9
   1c9a4:	vmrs	APSR_nzcv, fpscr
   1c9a8:	movne	r0, #1
   1c9ac:	moveq	r0, #0
   1c9b0:	adds	r2, r6, r0
   1c9b4:	adc	r3, r7, #0
   1c9b8:	mov	r0, r2
   1c9bc:	mov	r1, r3
   1c9c0:	bl	38074 <__assert_fail@plt+0x264d0>
   1c9c4:	ldr	r6, [sp, #12]
   1c9c8:	strd	r0, [sp]
   1c9cc:	ldr	r3, [pc, #220]	; 1cab0 <__assert_fail@plt+0xaf0c>
   1c9d0:	mvn	r2, #0
   1c9d4:	mov	r1, #1
   1c9d8:	mov	r0, r6
   1c9dc:	bl	119d0 <__sprintf_chk@plt>
   1c9e0:	ldr	r3, [sp, #48]	; 0x30
   1c9e4:	mov	r0, r6
   1c9e8:	add	r6, r3, #1
   1c9ec:	bl	11988 <strlen@plt>
   1c9f0:	ands	r3, r4, #32
   1c9f4:	cmp	r3, #0
   1c9f8:	movne	r3, #1
   1c9fc:	moveq	r3, #2
   1ca00:	add	r3, r3, r6
   1ca04:	cmp	r0, r3
   1ca08:	mov	r7, r0
   1ca0c:	bls	1d060 <__assert_fail@plt+0xb4bc>
   1ca10:	vldr	d7, [pc, #136]	; 1caa0 <__assert_fail@plt+0xaefc>
   1ca14:	vmul.f64	d9, d9, d7
   1ca18:	vldr	d7, [pc, #120]	; 1ca98 <__assert_fail@plt+0xaef4>
   1ca1c:	vcmpe.f64	d9, d7
   1ca20:	vmrs	APSR_nzcv, fpscr
   1ca24:	bpl	1ca60 <__assert_fail@plt+0xaebc>
   1ca28:	vmov	r0, r1, d9
   1ca2c:	bl	38208 <__assert_fail@plt+0x26664>
   1ca30:	and	r3, r4, #3
   1ca34:	cmp	r3, #0
   1ca38:	mov	r6, r0
   1ca3c:	mov	r7, r1
   1ca40:	movne	r0, #0
   1ca44:	beq	1d394 <__assert_fail@plt+0xb7f0>
   1ca48:	adds	r2, r6, r0
   1ca4c:	adc	r3, r7, #0
   1ca50:	mov	r0, r2
   1ca54:	mov	r1, r3
   1ca58:	bl	38074 <__assert_fail@plt+0x264d0>
   1ca5c:	vmov	d9, r0, r1
   1ca60:	vldr	d6, [pc, #56]	; 1caa0 <__assert_fail@plt+0xaefc>
   1ca64:	ldr	r7, [sp, #12]
   1ca68:	ldr	r3, [pc, #68]	; 1cab4 <__assert_fail@plt+0xaf10>
   1ca6c:	mvn	r2, #0
   1ca70:	vdiv.f64	d7, d9, d6
   1ca74:	mov	r1, #1
   1ca78:	mov	r0, r7
   1ca7c:	mov	r6, #0
   1ca80:	vstr	d7, [sp]
   1ca84:	bl	119d0 <__sprintf_chk@plt>
   1ca88:	mov	r0, r7
   1ca8c:	bl	11988 <strlen@plt>
   1ca90:	mov	r7, r0
   1ca94:	b	1cf34 <__assert_fail@plt+0xb390>
   1ca98:	andeq	r0, r0, r0
   1ca9c:	mvnsmi	r0, #0
   1caa0:	andeq	r0, r0, r0
   1caa4:	eormi	r0, r4, r0
   1caa8:	andeq	r9, r3, r4, asr #11
   1caac:	andeq	r9, r3, r4, lsr #27
   1cab0:	andeq	r9, r3, r8, ror #27
   1cab4:	andeq	r9, r3, r0, ror #27
   1cab8:	orrs	r3, r6, r7
   1cabc:	beq	1c8a4 <__assert_fail@plt+0xad00>
   1cac0:	mov	r2, r6
   1cac4:	mov	r3, r7
   1cac8:	ldrd	r0, [sp, #168]	; 0xa8
   1cacc:	bl	381bc <__assert_fail@plt+0x26618>
   1cad0:	orrs	r3, r2, r3
   1cad4:	bne	1c8a4 <__assert_fail@plt+0xad00>
   1cad8:	mov	r2, r6
   1cadc:	mov	r3, r7
   1cae0:	ldrd	r0, [sp, #168]	; 0xa8
   1cae4:	bl	381bc <__assert_fail@plt+0x26618>
   1cae8:	mov	sl, r0
   1caec:	mov	fp, r1
   1caf0:	mov	r2, r0
   1caf4:	mov	r3, r1
   1caf8:	mov	r0, r8
   1cafc:	mov	r1, r9
   1cb00:	bl	381bc <__assert_fail@plt+0x26618>
   1cb04:	mov	r1, #10
   1cb08:	umull	r6, r7, r2, r1
   1cb0c:	mla	r7, r1, r3, r7
   1cb10:	mov	r2, sl
   1cb14:	mov	r3, fp
   1cb18:	mov	r0, r6
   1cb1c:	mov	r1, r7
   1cb20:	bl	381bc <__assert_fail@plt+0x26618>
   1cb24:	mov	r0, r8
   1cb28:	mov	r1, r9
   1cb2c:	strd	sl, [sp, #40]	; 0x28
   1cb30:	lsls	r8, r2, #1
   1cb34:	adc	r9, r3, r3
   1cb38:	mov	r2, sl
   1cb3c:	mov	r3, fp
   1cb40:	bl	381bc <__assert_fail@plt+0x26618>
   1cb44:	ldrd	r2, [sp, #40]	; 0x28
   1cb48:	mov	sl, r0
   1cb4c:	mov	fp, r1
   1cb50:	mov	r0, r6
   1cb54:	mov	r1, r7
   1cb58:	bl	381bc <__assert_fail@plt+0x26618>
   1cb5c:	ldrd	r2, [sp, #40]	; 0x28
   1cb60:	cmp	r3, r9
   1cb64:	cmpeq	r2, r8
   1cb68:	mov	r6, r0
   1cb6c:	bls	1d378 <__assert_fail@plt+0xb7d4>
   1cb70:	orrs	r3, r8, r9
   1cb74:	movne	r8, #1
   1cb78:	moveq	r8, #0
   1cb7c:	ands	r3, r4, #16
   1cb80:	str	r3, [sp, #40]	; 0x28
   1cb84:	beq	1d284 <__assert_fail@plt+0xb6e0>
   1cb88:	ldrd	r2, [sp, #16]
   1cb8c:	cmp	fp, r3
   1cb90:	cmpeq	sl, r2
   1cb94:	bcc	1d384 <__assert_fail@plt+0xb7e0>
   1cb98:	mov	r0, sl
   1cb9c:	mov	r1, fp
   1cba0:	bl	381bc <__assert_fail@plt+0x26618>
   1cba4:	ldr	r1, [sp, #28]
   1cba8:	add	r2, r2, r2, lsl #2
   1cbac:	add	r7, r6, r2, lsl #1
   1cbb0:	mov	r0, r7
   1cbb4:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1cbb8:	asr	r6, r8, #1
   1cbbc:	ldrd	r2, [sp, #16]
   1cbc0:	mov	r0, sl
   1cbc4:	add	r9, r6, r1, lsl #1
   1cbc8:	mov	r1, fp
   1cbcc:	bl	381bc <__assert_fail@plt+0x26618>
   1cbd0:	mov	sl, r0
   1cbd4:	mov	fp, r1
   1cbd8:	mov	r0, r7
   1cbdc:	ldr	r1, [sp, #28]
   1cbe0:	bl	378e4 <__assert_fail@plt+0x25d40>
   1cbe4:	ldr	r3, [sp, #28]
   1cbe8:	cmp	r3, r9
   1cbec:	mov	r6, r0
   1cbf0:	bls	1d3bc <__assert_fail@plt+0xb818>
   1cbf4:	cmn	r8, r9
   1cbf8:	movne	r8, #1
   1cbfc:	moveq	r8, #0
   1cc00:	ldrd	r2, [sp, #16]
   1cc04:	cmp	r3, fp
   1cc08:	cmpeq	r2, sl
   1cc0c:	bhi	1d530 <__assert_fail@plt+0xb98c>
   1cc10:	mov	r0, sl
   1cc14:	mov	r1, fp
   1cc18:	bl	381bc <__assert_fail@plt+0x26618>
   1cc1c:	ldr	r1, [sp, #28]
   1cc20:	add	r2, r2, r2, lsl #2
   1cc24:	add	r7, r6, r2, lsl #1
   1cc28:	mov	r0, r7
   1cc2c:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1cc30:	asr	r6, r8, #1
   1cc34:	ldrd	r2, [sp, #16]
   1cc38:	mov	r0, sl
   1cc3c:	add	r9, r6, r1, lsl #1
   1cc40:	mov	r1, fp
   1cc44:	bl	381bc <__assert_fail@plt+0x26618>
   1cc48:	mov	sl, r0
   1cc4c:	mov	fp, r1
   1cc50:	mov	r0, r7
   1cc54:	ldr	r1, [sp, #28]
   1cc58:	bl	378e4 <__assert_fail@plt+0x25d40>
   1cc5c:	ldr	r3, [sp, #28]
   1cc60:	cmp	r3, r9
   1cc64:	mov	r6, r0
   1cc68:	mov	r7, r0
   1cc6c:	bls	1d3d4 <__assert_fail@plt+0xb830>
   1cc70:	cmn	r8, r9
   1cc74:	movne	r8, #1
   1cc78:	moveq	r8, #0
   1cc7c:	ldrd	r2, [sp, #16]
   1cc80:	cmp	fp, r3
   1cc84:	cmpeq	sl, r2
   1cc88:	bcc	1d538 <__assert_fail@plt+0xb994>
   1cc8c:	mov	r0, sl
   1cc90:	mov	r1, fp
   1cc94:	bl	381bc <__assert_fail@plt+0x26618>
   1cc98:	ldr	r9, [sp, #28]
   1cc9c:	mov	r1, r9
   1cca0:	add	r2, r2, r2, lsl #2
   1cca4:	add	r6, r7, r2, lsl #1
   1cca8:	mov	r0, r6
   1ccac:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1ccb0:	asr	r7, r8, #1
   1ccb4:	ldrd	r2, [sp, #16]
   1ccb8:	mov	r0, sl
   1ccbc:	add	r7, r7, r1, lsl #1
   1ccc0:	mov	r1, fp
   1ccc4:	bl	381bc <__assert_fail@plt+0x26618>
   1ccc8:	mov	sl, r0
   1cccc:	mov	fp, r1
   1ccd0:	mov	r0, r6
   1ccd4:	mov	r1, r9
   1ccd8:	bl	378e4 <__assert_fail@plt+0x25d40>
   1ccdc:	cmp	r9, r7
   1cce0:	mov	r6, r0
   1cce4:	mov	r9, r0
   1cce8:	bls	1d3ec <__assert_fail@plt+0xb848>
   1ccec:	cmn	r8, r7
   1ccf0:	movne	r8, #1
   1ccf4:	moveq	r8, #0
   1ccf8:	ldrd	r2, [sp, #16]
   1ccfc:	cmp	fp, r3
   1cd00:	cmpeq	sl, r2
   1cd04:	bcc	1d540 <__assert_fail@plt+0xb99c>
   1cd08:	mov	r0, sl
   1cd0c:	mov	r1, fp
   1cd10:	bl	381bc <__assert_fail@plt+0x26618>
   1cd14:	ldr	r1, [sp, #28]
   1cd18:	asr	r7, r8, #1
   1cd1c:	add	r2, r2, r2, lsl #2
   1cd20:	add	r6, r9, r2, lsl #1
   1cd24:	mov	r0, r6
   1cd28:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1cd2c:	ldrd	r2, [sp, #16]
   1cd30:	mov	r0, sl
   1cd34:	add	r7, r7, r1, lsl #1
   1cd38:	mov	r1, fp
   1cd3c:	bl	381bc <__assert_fail@plt+0x26618>
   1cd40:	ldr	r9, [sp, #28]
   1cd44:	mov	sl, r0
   1cd48:	mov	fp, r1
   1cd4c:	mov	r0, r6
   1cd50:	mov	r1, r9
   1cd54:	bl	378e4 <__assert_fail@plt+0x25d40>
   1cd58:	cmp	r9, r7
   1cd5c:	mov	r6, r0
   1cd60:	mov	r9, r0
   1cd64:	bls	1d404 <__assert_fail@plt+0xb860>
   1cd68:	cmn	r8, r7
   1cd6c:	movne	r8, #1
   1cd70:	moveq	r8, #0
   1cd74:	ldrd	r2, [sp, #16]
   1cd78:	cmp	fp, r3
   1cd7c:	cmpeq	sl, r2
   1cd80:	bcc	1d578 <__assert_fail@plt+0xb9d4>
   1cd84:	mov	r0, sl
   1cd88:	mov	r1, fp
   1cd8c:	bl	381bc <__assert_fail@plt+0x26618>
   1cd90:	ldr	r1, [sp, #28]
   1cd94:	asr	r7, r8, #1
   1cd98:	add	r2, r2, r2, lsl #2
   1cd9c:	add	r6, r9, r2, lsl #1
   1cda0:	mov	r0, r6
   1cda4:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1cda8:	ldrd	r2, [sp, #16]
   1cdac:	mov	r0, sl
   1cdb0:	add	r7, r7, r1, lsl #1
   1cdb4:	mov	r1, fp
   1cdb8:	bl	381bc <__assert_fail@plt+0x26618>
   1cdbc:	ldr	r9, [sp, #28]
   1cdc0:	mov	sl, r0
   1cdc4:	mov	fp, r1
   1cdc8:	mov	r0, r6
   1cdcc:	mov	r1, r9
   1cdd0:	bl	378e4 <__assert_fail@plt+0x25d40>
   1cdd4:	cmp	r9, r7
   1cdd8:	mov	r6, r0
   1cddc:	mov	r9, r0
   1cde0:	bls	1d41c <__assert_fail@plt+0xb878>
   1cde4:	cmn	r8, r7
   1cde8:	movne	r8, #1
   1cdec:	moveq	r8, #0
   1cdf0:	ldrd	r2, [sp, #16]
   1cdf4:	cmp	r3, fp
   1cdf8:	cmpeq	r2, sl
   1cdfc:	bhi	1d580 <__assert_fail@plt+0xb9dc>
   1ce00:	mov	r0, sl
   1ce04:	mov	r1, fp
   1ce08:	bl	381bc <__assert_fail@plt+0x26618>
   1ce0c:	ldr	r1, [sp, #28]
   1ce10:	asr	r7, r8, #1
   1ce14:	add	r2, r2, r2, lsl #2
   1ce18:	add	r6, r9, r2, lsl #1
   1ce1c:	mov	r0, r6
   1ce20:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1ce24:	ldrd	r2, [sp, #16]
   1ce28:	mov	r0, sl
   1ce2c:	add	r7, r7, r1, lsl #1
   1ce30:	mov	r1, fp
   1ce34:	bl	381bc <__assert_fail@plt+0x26618>
   1ce38:	ldr	r9, [sp, #28]
   1ce3c:	mov	sl, r0
   1ce40:	mov	fp, r1
   1ce44:	mov	r0, r6
   1ce48:	mov	r1, r9
   1ce4c:	bl	378e4 <__assert_fail@plt+0x25d40>
   1ce50:	cmp	r9, r7
   1ce54:	mov	r6, r0
   1ce58:	bls	1d434 <__assert_fail@plt+0xb890>
   1ce5c:	cmn	r8, r7
   1ce60:	movne	r8, #1
   1ce64:	moveq	r8, #0
   1ce68:	mov	r9, #6
   1ce6c:	cmp	fp, #0
   1ce70:	cmpeq	sl, #9
   1ce74:	bhi	1d524 <__assert_fail@plt+0xb980>
   1ce78:	and	r3, r4, #3
   1ce7c:	cmp	r3, #1
   1ce80:	beq	1d4b8 <__assert_fail@plt+0xb914>
   1ce84:	cmp	r8, #0
   1ce88:	and	r3, r4, #3
   1ce8c:	clz	r3, r3
   1ce90:	lsr	r3, r3, #5
   1ce94:	moveq	r3, #0
   1ce98:	cmp	r3, #0
   1ce9c:	beq	1d490 <__assert_fail@plt+0xb8ec>
   1cea0:	add	r6, r6, #1
   1cea4:	cmp	r6, #10
   1cea8:	beq	1d508 <__assert_fail@plt+0xb964>
   1ceac:	add	r7, r6, #48	; 0x30
   1ceb0:	uxtb	r3, r7
   1ceb4:	ldr	r2, [sp, #24]
   1ceb8:	ldr	r0, [sp, #12]
   1cebc:	add	r7, r2, #2
   1cec0:	ldr	r2, [sp, #48]	; 0x30
   1cec4:	strb	r3, [r0, #646]	; 0x286
   1cec8:	sub	r1, r7, r2
   1cecc:	str	r1, [sp, #24]
   1ced0:	mov	r0, r1
   1ced4:	mov	r8, #0
   1ced8:	ldr	r1, [sp, #52]	; 0x34
   1cedc:	bl	11784 <memcpy@plt>
   1cee0:	mov	r6, r8
   1cee4:	b	1d290 <__assert_fail@plt+0xb6ec>
   1cee8:	and	r9, r4, #3
   1ceec:	cmp	r9, #1
   1cef0:	beq	1cf04 <__assert_fail@plt+0xb360>
   1cef4:	vldr	d7, [pc, #876]	; 1d268 <__assert_fail@plt+0xb6c4>
   1cef8:	vcmpe.f64	d8, d7
   1cefc:	vmrs	APSR_nzcv, fpscr
   1cf00:	bmi	1d12c <__assert_fail@plt+0xb588>
   1cf04:	ldr	r6, [sp, #12]
   1cf08:	ldr	r3, [pc, #872]	; 1d278 <__assert_fail@plt+0xb6d4>
   1cf0c:	mvn	r2, #0
   1cf10:	mov	r1, #1
   1cf14:	mov	r0, r6
   1cf18:	vstr	d8, [sp]
   1cf1c:	bl	119d0 <__sprintf_chk@plt>
   1cf20:	mov	r0, r6
   1cf24:	bl	11988 <strlen@plt>
   1cf28:	mov	r6, #0
   1cf2c:	mvn	r9, #0
   1cf30:	mov	r7, r0
   1cf34:	ldr	r3, [sp, #8]
   1cf38:	mov	r2, r7
   1cf3c:	sub	r8, r3, r7
   1cf40:	mov	r0, r8
   1cf44:	ldr	r1, [sp, #12]
   1cf48:	bl	11748 <memmove@plt>
   1cf4c:	sub	r7, r7, r6
   1cf50:	add	r7, r8, r7
   1cf54:	tst	r4, #4
   1cf58:	bne	1d094 <__assert_fail@plt+0xb4f0>
   1cf5c:	tst	r4, #128	; 0x80
   1cf60:	beq	1cff8 <__assert_fail@plt+0xb454>
   1cf64:	cmn	r9, #1
   1cf68:	beq	1d17c <__assert_fail@plt+0xb5d8>
   1cf6c:	and	r3, r4, #256	; 0x100
   1cf70:	orrs	r2, r9, r3
   1cf74:	beq	1cff8 <__assert_fail@plt+0xb454>
   1cf78:	tst	r4, #64	; 0x40
   1cf7c:	ldrne	r1, [sp, #12]
   1cf80:	addne	r2, r1, #648	; 0x288
   1cf84:	strne	r2, [sp, #8]
   1cf88:	movne	r2, #32
   1cf8c:	strbne	r2, [r1, #647]	; 0x287
   1cf90:	cmp	r9, #0
   1cf94:	beq	1d588 <__assert_fail@plt+0xb9e4>
   1cf98:	ldr	r2, [sp, #36]	; 0x24
   1cf9c:	ldr	r0, [sp, #8]
   1cfa0:	cmp	r2, #0
   1cfa4:	cmpeq	r9, #1
   1cfa8:	ldr	r2, [sp, #8]
   1cfac:	ldrne	r1, [pc, #712]	; 1d27c <__assert_fail@plt+0xb6d8>
   1cfb0:	moveq	r1, #107	; 0x6b
   1cfb4:	add	r2, r2, #1
   1cfb8:	ldrbne	r1, [r1, r9]
   1cfbc:	cmp	r3, #0
   1cfc0:	streq	r2, [sp, #8]
   1cfc4:	strb	r1, [r0]
   1cfc8:	beq	1cff8 <__assert_fail@plt+0xb454>
   1cfcc:	ldr	r3, [sp, #36]	; 0x24
   1cfd0:	cmp	r9, #0
   1cfd4:	cmpne	r3, #0
   1cfd8:	movne	r2, r0
   1cfdc:	movne	r3, #105	; 0x69
   1cfe0:	strbne	r3, [r2, #1]
   1cfe4:	addne	r2, r2, #2
   1cfe8:	mov	r3, #66	; 0x42
   1cfec:	strb	r3, [r2]
   1cff0:	add	r3, r2, #1
   1cff4:	str	r3, [sp, #8]
   1cff8:	ldr	r2, [sp, #8]
   1cffc:	mov	r3, #0
   1d000:	mov	r0, r8
   1d004:	strb	r3, [r2]
   1d008:	add	sp, sp, #108	; 0x6c
   1d00c:	vpop	{d8-d9}
   1d010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d014:	ldr	r6, [sp, #12]
   1d018:	ldr	r3, [pc, #608]	; 1d280 <__assert_fail@plt+0xb6dc>
   1d01c:	mvn	r2, #0
   1d020:	and	r1, r4, #3
   1d024:	mov	r0, r6
   1d028:	vstr	d9, [sp]
   1d02c:	bl	119d0 <__sprintf_chk@plt>
   1d030:	ldr	r3, [sp, #48]	; 0x30
   1d034:	mov	r0, r6
   1d038:	add	r6, r3, #1
   1d03c:	bl	11988 <strlen@plt>
   1d040:	ands	r3, r4, #32
   1d044:	cmp	r3, #0
   1d048:	movne	r3, #1
   1d04c:	moveq	r3, #2
   1d050:	add	r3, r3, r6
   1d054:	cmp	r3, r0
   1d058:	mov	r7, r0
   1d05c:	bcc	1d3b0 <__assert_fail@plt+0xb80c>
   1d060:	tst	r4, #8
   1d064:	beq	1cf34 <__assert_fail@plt+0xb390>
   1d068:	ldr	r3, [sp, #12]
   1d06c:	add	r3, r3, r7
   1d070:	ldrb	r3, [r3, #-1]
   1d074:	cmp	r3, #48	; 0x30
   1d078:	bne	1cf34 <__assert_fail@plt+0xb390>
   1d07c:	vldr	d7, [pc, #492]	; 1d270 <__assert_fail@plt+0xb6cc>
   1d080:	and	r3, r4, #3
   1d084:	cmp	r3, #1
   1d088:	vmul.f64	d9, d9, d7
   1d08c:	beq	1ca60 <__assert_fail@plt+0xaebc>
   1d090:	b	1ca18 <__assert_fail@plt+0xae74>
   1d094:	ldr	r0, [sp, #32]
   1d098:	bl	11988 <strlen@plt>
   1d09c:	sub	r6, r7, r8
   1d0a0:	mov	r1, r8
   1d0a4:	mov	r2, r6
   1d0a8:	mov	r3, #41	; 0x29
   1d0ac:	mvn	sl, #0
   1d0b0:	mov	fp, r0
   1d0b4:	add	r0, sp, #60	; 0x3c
   1d0b8:	bl	1185c <__memcpy_chk@plt>
   1d0bc:	ldr	r8, [sp, #32]
   1d0c0:	b	1d0c8 <__assert_fail@plt+0xb524>
   1d0c4:	bl	11784 <memcpy@plt>
   1d0c8:	ldrb	r3, [r5]
   1d0cc:	cmp	r3, #0
   1d0d0:	beq	1d0e4 <__assert_fail@plt+0xb540>
   1d0d4:	cmp	r3, #255	; 0xff
   1d0d8:	movne	sl, r3
   1d0dc:	moveq	sl, r6
   1d0e0:	add	r5, r5, #1
   1d0e4:	cmp	sl, r6
   1d0e8:	movcs	sl, r6
   1d0ec:	sub	r3, r7, sl
   1d0f0:	sub	r6, r6, sl
   1d0f4:	add	r2, sp, #60	; 0x3c
   1d0f8:	add	r1, r2, r6
   1d0fc:	mov	r0, r3
   1d100:	mov	r2, sl
   1d104:	sub	r7, r3, fp
   1d108:	bl	11784 <memcpy@plt>
   1d10c:	cmp	r6, #0
   1d110:	mov	r2, fp
   1d114:	mov	r1, r8
   1d118:	mov	r3, r0
   1d11c:	mov	r0, r7
   1d120:	bne	1d0c4 <__assert_fail@plt+0xb520>
   1d124:	mov	r8, r3
   1d128:	b	1cf5c <__assert_fail@plt+0xb3b8>
   1d12c:	vmov	r0, r1, d8
   1d130:	bl	38208 <__assert_fail@plt+0x26664>
   1d134:	cmp	r9, #0
   1d138:	mov	r6, r0
   1d13c:	mov	r7, r1
   1d140:	bne	1d15c <__assert_fail@plt+0xb5b8>
   1d144:	bl	38074 <__assert_fail@plt+0x264d0>
   1d148:	vmov	d7, r0, r1
   1d14c:	vcmp.f64	d7, d8
   1d150:	vmrs	APSR_nzcv, fpscr
   1d154:	movne	r8, #1
   1d158:	moveq	r8, #0
   1d15c:	adds	r0, r6, r8
   1d160:	adc	r1, r7, #0
   1d164:	bl	38074 <__assert_fail@plt+0x264d0>
   1d168:	vmov	d8, r0, r1
   1d16c:	b	1cf04 <__assert_fail@plt+0xb360>
   1d170:	mov	r8, #0
   1d174:	mov	r6, r8
   1d178:	b	1cb7c <__assert_fail@plt+0xafd8>
   1d17c:	ldrd	r2, [sp, #168]	; 0xa8
   1d180:	cmp	r3, #0
   1d184:	cmpeq	r2, #1
   1d188:	bls	1d4a8 <__assert_fail@plt+0xb904>
   1d18c:	ldrd	r6, [sp, #16]
   1d190:	mov	r1, r3
   1d194:	mov	r0, r2
   1d198:	cmp	r1, r7
   1d19c:	cmpeq	r0, r6
   1d1a0:	bls	1d4b0 <__assert_fail@plt+0xb90c>
   1d1a4:	mul	r1, r6, r7
   1d1a8:	umull	r2, r3, r6, r6
   1d1ac:	add	r3, r3, r1, lsl #1
   1d1b0:	ldrd	r0, [sp, #168]	; 0xa8
   1d1b4:	cmp	r1, r3
   1d1b8:	cmpeq	r0, r2
   1d1bc:	bls	1d4d0 <__assert_fail@plt+0xb92c>
   1d1c0:	mul	r3, r6, r3
   1d1c4:	umull	r0, r1, r6, r2
   1d1c8:	mla	r2, r2, r7, r3
   1d1cc:	add	r1, r2, r1
   1d1d0:	ldrd	r2, [sp, #168]	; 0xa8
   1d1d4:	cmp	r3, r1
   1d1d8:	cmpeq	r2, r0
   1d1dc:	bls	1d4d8 <__assert_fail@plt+0xb934>
   1d1e0:	mul	r1, r6, r1
   1d1e4:	umull	r2, r3, r6, r0
   1d1e8:	mla	r0, r0, r7, r1
   1d1ec:	add	r3, r0, r3
   1d1f0:	ldrd	r0, [sp, #168]	; 0xa8
   1d1f4:	cmp	r1, r3
   1d1f8:	cmpeq	r0, r2
   1d1fc:	bls	1d4e0 <__assert_fail@plt+0xb93c>
   1d200:	mul	r3, r6, r3
   1d204:	umull	r0, r1, r6, r2
   1d208:	mla	r2, r2, r7, r3
   1d20c:	add	r1, r2, r1
   1d210:	ldrd	r2, [sp, #168]	; 0xa8
   1d214:	cmp	r3, r1
   1d218:	cmpeq	r2, r0
   1d21c:	bls	1d4e8 <__assert_fail@plt+0xb944>
   1d220:	mul	r1, r6, r1
   1d224:	umull	r2, r3, r6, r0
   1d228:	mla	r0, r0, r7, r1
   1d22c:	add	r3, r0, r3
   1d230:	ldrd	r0, [sp, #168]	; 0xa8
   1d234:	cmp	r1, r3
   1d238:	cmpeq	r0, r2
   1d23c:	bls	1d4f0 <__assert_fail@plt+0xb94c>
   1d240:	mul	r3, r6, r3
   1d244:	umull	r0, r1, r6, r2
   1d248:	mla	r2, r2, r7, r3
   1d24c:	add	r1, r2, r1
   1d250:	ldrd	r2, [sp, #168]	; 0xa8
   1d254:	cmp	r3, r1
   1d258:	cmpeq	r2, r0
   1d25c:	movhi	r9, #8
   1d260:	movls	r9, #7
   1d264:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d268:	andeq	r0, r0, r0
   1d26c:	mvnsmi	r0, #0
   1d270:	andeq	r0, r0, r0
   1d274:	eormi	r0, r4, r0
   1d278:	andeq	r9, r3, r0, ror #27
   1d27c:	andeq	r9, r3, r0, asr #27
   1d280:	andeq	r9, r3, r8, ror #27
   1d284:	ldr	r3, [sp, #8]
   1d288:	mvn	r9, #0
   1d28c:	str	r3, [sp, #24]
   1d290:	and	r3, r4, #3
   1d294:	cmp	r3, #1
   1d298:	beq	1d2fc <__assert_fail@plt+0xb758>
   1d29c:	and	r3, r4, #3
   1d2a0:	cmp	r3, #0
   1d2a4:	bne	1d324 <__assert_fail@plt+0xb780>
   1d2a8:	add	r7, r6, r8
   1d2ac:	cmp	r7, #0
   1d2b0:	ble	1d324 <__assert_fail@plt+0xb780>
   1d2b4:	adds	sl, sl, #1
   1d2b8:	adc	fp, fp, #0
   1d2bc:	ands	r3, r4, #16
   1d2c0:	cmp	r3, #0
   1d2c4:	beq	1d324 <__assert_fail@plt+0xb780>
   1d2c8:	ldrd	r2, [sp, #16]
   1d2cc:	cmp	fp, r3
   1d2d0:	cmpeq	sl, r2
   1d2d4:	bne	1d324 <__assert_fail@plt+0xb780>
   1d2d8:	tst	r4, #8
   1d2dc:	add	r9, r9, #1
   1d2e0:	beq	1d548 <__assert_fail@plt+0xb9a4>
   1d2e4:	ldr	r2, [sp, #24]
   1d2e8:	mov	r3, #49	; 0x31
   1d2ec:	sub	r8, r2, #1
   1d2f0:	strb	r3, [r2, #-1]
   1d2f4:	mov	r7, r2
   1d2f8:	b	1cf54 <__assert_fail@plt+0xb3b0>
   1d2fc:	and	r2, sl, #1
   1d300:	adds	r2, r2, r8
   1d304:	mov	r3, #0
   1d308:	adc	r3, r3, r8, asr #31
   1d30c:	orr	r7, r2, r3
   1d310:	cmp	r7, #0
   1d314:	moveq	r7, r6
   1d318:	addne	r7, r6, #1
   1d31c:	cmp	r7, #5
   1d320:	bgt	1d2b4 <__assert_fail@plt+0xb710>
   1d324:	ldr	r8, [sp, #24]
   1d328:	mov	r6, #10
   1d32c:	mov	r7, #0
   1d330:	mov	r0, sl
   1d334:	mov	r1, fp
   1d338:	mov	r2, r6
   1d33c:	mov	r3, r7
   1d340:	bl	381bc <__assert_fail@plt+0x26618>
   1d344:	mov	r0, sl
   1d348:	mov	r1, fp
   1d34c:	mov	r3, r7
   1d350:	add	r2, r2, #48	; 0x30
   1d354:	strb	r2, [r8, #-1]!
   1d358:	mov	r2, r6
   1d35c:	bl	381bc <__assert_fail@plt+0x26618>
   1d360:	mov	sl, r0
   1d364:	mov	fp, r1
   1d368:	orrs	r3, sl, fp
   1d36c:	bne	1d330 <__assert_fail@plt+0xb78c>
   1d370:	ldr	r7, [sp, #24]
   1d374:	b	1cf54 <__assert_fail@plt+0xb3b0>
   1d378:	movcc	r8, #3
   1d37c:	movcs	r8, #2
   1d380:	b	1cb7c <__assert_fail@plt+0xafd8>
   1d384:	ldr	r3, [sp, #8]
   1d388:	mov	r9, #0
   1d38c:	str	r3, [sp, #24]
   1d390:	b	1d290 <__assert_fail@plt+0xb6ec>
   1d394:	bl	38074 <__assert_fail@plt+0x264d0>
   1d398:	vmov	d7, r0, r1
   1d39c:	vcmp.f64	d7, d9
   1d3a0:	vmrs	APSR_nzcv, fpscr
   1d3a4:	movne	r0, #1
   1d3a8:	moveq	r0, #0
   1d3ac:	b	1ca48 <__assert_fail@plt+0xaea4>
   1d3b0:	vldr	d7, [pc, #480]	; 1d598 <__assert_fail@plt+0xb9f4>
   1d3b4:	vmul.f64	d9, d9, d7
   1d3b8:	b	1ca60 <__assert_fail@plt+0xaebc>
   1d3bc:	mov	r2, r3
   1d3c0:	add	r3, r8, r9
   1d3c4:	cmp	r2, r3
   1d3c8:	movcs	r8, #2
   1d3cc:	movcc	r8, #3
   1d3d0:	b	1cc00 <__assert_fail@plt+0xb05c>
   1d3d4:	mov	r2, r3
   1d3d8:	add	r3, r8, r9
   1d3dc:	cmp	r2, r3
   1d3e0:	movcs	r8, #2
   1d3e4:	movcc	r8, #3
   1d3e8:	b	1cc7c <__assert_fail@plt+0xb0d8>
   1d3ec:	ldr	r3, [sp, #28]
   1d3f0:	add	r7, r8, r7
   1d3f4:	cmp	r3, r7
   1d3f8:	movcs	r8, #2
   1d3fc:	movcc	r8, #3
   1d400:	b	1ccf8 <__assert_fail@plt+0xb154>
   1d404:	ldr	r3, [sp, #28]
   1d408:	add	r7, r8, r7
   1d40c:	cmp	r3, r7
   1d410:	movcs	r8, #2
   1d414:	movcc	r8, #3
   1d418:	b	1cd74 <__assert_fail@plt+0xb1d0>
   1d41c:	ldr	r3, [sp, #28]
   1d420:	add	r7, r8, r7
   1d424:	cmp	r3, r7
   1d428:	movcs	r8, #2
   1d42c:	movcc	r8, #3
   1d430:	b	1cdf0 <__assert_fail@plt+0xb24c>
   1d434:	add	r7, r8, r7
   1d438:	cmp	r9, r7
   1d43c:	movcs	r8, #2
   1d440:	movcc	r8, #3
   1d444:	b	1ce68 <__assert_fail@plt+0xb2c4>
   1d448:	vmov.f64	d6, d7
   1d44c:	mov	r9, #1
   1d450:	b	1c95c <__assert_fail@plt+0xadb8>
   1d454:	mov	r9, #2
   1d458:	b	1c95c <__assert_fail@plt+0xadb8>
   1d45c:	vmov.f64	d6, d5
   1d460:	mov	r9, #3
   1d464:	b	1c95c <__assert_fail@plt+0xadb8>
   1d468:	mov	r9, #4
   1d46c:	b	1c95c <__assert_fail@plt+0xadb8>
   1d470:	vmov.f64	d6, d5
   1d474:	mov	r9, #5
   1d478:	b	1c95c <__assert_fail@plt+0xadb8>
   1d47c:	mov	r9, #6
   1d480:	b	1c95c <__assert_fail@plt+0xadb8>
   1d484:	vmov.f64	d6, d5
   1d488:	mov	r9, #7
   1d48c:	b	1c95c <__assert_fail@plt+0xadb8>
   1d490:	cmp	r6, #0
   1d494:	bne	1ceac <__assert_fail@plt+0xb308>
   1d498:	tst	r4, #8
   1d49c:	bne	1d4f8 <__assert_fail@plt+0xb954>
   1d4a0:	mov	r3, #48	; 0x30
   1d4a4:	b	1ceb4 <__assert_fail@plt+0xb310>
   1d4a8:	mov	r9, #0
   1d4ac:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d4b0:	mov	r9, #1
   1d4b4:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d4b8:	and	r3, r6, #1
   1d4bc:	add	r3, r3, r8
   1d4c0:	cmp	r3, #2
   1d4c4:	movle	r3, #0
   1d4c8:	movgt	r3, #1
   1d4cc:	b	1ce98 <__assert_fail@plt+0xb2f4>
   1d4d0:	mov	r9, #2
   1d4d4:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d4d8:	mov	r9, #3
   1d4dc:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d4e0:	mov	r9, #4
   1d4e4:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d4e8:	mov	r9, #5
   1d4ec:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d4f0:	mov	r9, #6
   1d4f4:	b	1cf6c <__assert_fail@plt+0xb3c8>
   1d4f8:	ldr	r3, [sp, #8]
   1d4fc:	mov	r6, #0
   1d500:	str	r3, [sp, #24]
   1d504:	b	1d290 <__assert_fail@plt+0xb6ec>
   1d508:	adds	sl, sl, #1
   1d50c:	adc	fp, fp, #0
   1d510:	cmp	fp, #0
   1d514:	cmpeq	sl, #10
   1d518:	mov	r8, #0
   1d51c:	moveq	r6, r8
   1d520:	bne	1d498 <__assert_fail@plt+0xb8f4>
   1d524:	ldr	r3, [sp, #8]
   1d528:	str	r3, [sp, #24]
   1d52c:	b	1d290 <__assert_fail@plt+0xb6ec>
   1d530:	mov	r9, #1
   1d534:	b	1ce6c <__assert_fail@plt+0xb2c8>
   1d538:	mov	r9, #2
   1d53c:	b	1ce6c <__assert_fail@plt+0xb2c8>
   1d540:	mov	r9, #3
   1d544:	b	1ce6c <__assert_fail@plt+0xb2c8>
   1d548:	ldr	ip, [sp, #48]	; 0x30
   1d54c:	ldr	r1, [sp, #24]
   1d550:	mvn	r3, ip
   1d554:	add	r3, r1, r3
   1d558:	mov	r2, #48	; 0x30
   1d55c:	strb	r2, [r1, #-1]
   1d560:	mov	r0, r3
   1d564:	ldr	r1, [sp, #52]	; 0x34
   1d568:	mov	r2, ip
   1d56c:	str	r3, [sp, #24]
   1d570:	bl	11784 <memcpy@plt>
   1d574:	b	1d2e4 <__assert_fail@plt+0xb740>
   1d578:	mov	r9, #4
   1d57c:	b	1ce6c <__assert_fail@plt+0xb2c8>
   1d580:	mov	r9, #5
   1d584:	b	1ce6c <__assert_fail@plt+0xb2c8>
   1d588:	cmp	r3, #0
   1d58c:	ldrne	r2, [sp, #8]
   1d590:	bne	1cfe8 <__assert_fail@plt+0xb444>
   1d594:	b	1cff8 <__assert_fail@plt+0xb454>
   1d598:	andeq	r0, r0, r0
   1d59c:	eormi	r0, r4, r0
   1d5a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d5a4:	subs	r4, r0, #0
   1d5a8:	sub	sp, sp, #20
   1d5ac:	mov	r8, r1
   1d5b0:	mov	r7, r2
   1d5b4:	beq	1d6c4 <__assert_fail@plt+0xbb20>
   1d5b8:	ldrb	r3, [r4]
   1d5bc:	ldr	r5, [pc, #384]	; 1d744 <__assert_fail@plt+0xbba0>
   1d5c0:	cmp	r3, #39	; 0x27
   1d5c4:	addeq	r4, r4, #1
   1d5c8:	mov	r3, #4
   1d5cc:	add	r2, r5, #12
   1d5d0:	add	r1, r5, #20
   1d5d4:	mov	r0, r4
   1d5d8:	moveq	r9, #164	; 0xa4
   1d5dc:	moveq	fp, #420	; 0x1a4
   1d5e0:	moveq	sl, #388	; 0x184
   1d5e4:	moveq	r6, #4
   1d5e8:	movne	r9, #160	; 0xa0
   1d5ec:	movne	fp, #416	; 0x1a0
   1d5f0:	movne	sl, #384	; 0x180
   1d5f4:	movne	r6, #0
   1d5f8:	bl	13d3c <__assert_fail@plt+0x2198>
   1d5fc:	cmp	r0, #0
   1d600:	blt	1d660 <__assert_fail@plt+0xbabc>
   1d604:	add	r5, r5, r0, lsl #2
   1d608:	mov	r1, #0
   1d60c:	ldr	ip, [r5, #12]
   1d610:	mov	r0, #1
   1d614:	mov	r2, r0
   1d618:	orr	r6, r6, ip
   1d61c:	mov	r3, r1
   1d620:	str	r0, [r7]
   1d624:	str	r1, [r7, #4]
   1d628:	mov	r0, #0
   1d62c:	str	r6, [r8]
   1d630:	orrs	r3, r2, r3
   1d634:	bne	1d658 <__assert_fail@plt+0xbab4>
   1d638:	ldr	r0, [pc, #264]	; 1d748 <__assert_fail@plt+0xbba4>
   1d63c:	bl	118ec <getenv@plt>
   1d640:	mov	r3, #0
   1d644:	cmp	r0, #0
   1d648:	movne	r2, #512	; 0x200
   1d64c:	moveq	r2, #1024	; 0x400
   1d650:	mov	r0, #4
   1d654:	strd	r2, [r7]
   1d658:	add	sp, sp, #20
   1d65c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d660:	ldr	r2, [pc, #228]	; 1d74c <__assert_fail@plt+0xbba8>
   1d664:	mov	r3, r7
   1d668:	str	r2, [sp]
   1d66c:	add	r1, sp, #12
   1d670:	mov	r2, #0
   1d674:	mov	r0, r4
   1d678:	bl	35b30 <__assert_fail@plt+0x23f8c>
   1d67c:	cmp	r0, #0
   1d680:	bne	1d708 <__assert_fail@plt+0xbb64>
   1d684:	ldrb	r3, [r4]
   1d688:	sub	r3, r3, #48	; 0x30
   1d68c:	cmp	r3, #9
   1d690:	bls	1d6bc <__assert_fail@plt+0xbb18>
   1d694:	ldr	r2, [sp, #12]
   1d698:	cmp	r4, r2
   1d69c:	bne	1d6ac <__assert_fail@plt+0xbb08>
   1d6a0:	b	1d718 <__assert_fail@plt+0xbb74>
   1d6a4:	cmp	r2, r4
   1d6a8:	beq	1d718 <__assert_fail@plt+0xbb74>
   1d6ac:	ldrb	r3, [r4, #1]!
   1d6b0:	sub	r3, r3, #48	; 0x30
   1d6b4:	cmp	r3, #9
   1d6b8:	bhi	1d6a4 <__assert_fail@plt+0xbb00>
   1d6bc:	ldrd	r2, [r7]
   1d6c0:	b	1d628 <__assert_fail@plt+0xba84>
   1d6c4:	ldr	r0, [pc, #132]	; 1d750 <__assert_fail@plt+0xbbac>
   1d6c8:	bl	118ec <getenv@plt>
   1d6cc:	subs	r4, r0, #0
   1d6d0:	bne	1d5b8 <__assert_fail@plt+0xba14>
   1d6d4:	ldr	r0, [pc, #120]	; 1d754 <__assert_fail@plt+0xbbb0>
   1d6d8:	bl	118ec <getenv@plt>
   1d6dc:	subs	r4, r0, #0
   1d6e0:	bne	1d5b8 <__assert_fail@plt+0xba14>
   1d6e4:	ldr	r0, [pc, #92]	; 1d748 <__assert_fail@plt+0xbba4>
   1d6e8:	bl	118ec <getenv@plt>
   1d6ec:	mov	r3, #0
   1d6f0:	mov	r6, #0
   1d6f4:	cmp	r0, #0
   1d6f8:	movne	r2, #512	; 0x200
   1d6fc:	moveq	r2, #1024	; 0x400
   1d700:	strd	r2, [r7]
   1d704:	b	1d628 <__assert_fail@plt+0xba84>
   1d708:	mov	r3, #0
   1d70c:	str	r3, [r8]
   1d710:	ldrd	r2, [r7]
   1d714:	b	1d630 <__assert_fail@plt+0xba8c>
   1d718:	ldrb	r3, [r2, #-1]
   1d71c:	cmp	r3, #66	; 0x42
   1d720:	beq	1d72c <__assert_fail@plt+0xbb88>
   1d724:	mov	r6, r9
   1d728:	b	1d6bc <__assert_fail@plt+0xbb18>
   1d72c:	ldrb	r3, [r2, #-2]
   1d730:	cmp	r3, #105	; 0x69
   1d734:	movne	r6, sl
   1d738:	bne	1d6bc <__assert_fail@plt+0xbb18>
   1d73c:	mov	r9, fp
   1d740:	b	1d724 <__assert_fail@plt+0xbb80>
   1d744:	andeq	r9, r3, r0, asr #27
   1d748:	andeq	r9, r3, r8, lsl #28
   1d74c:	andeq	r9, r3, r8, lsl lr
   1d750:	strdeq	r9, [r3], -r0
   1d754:	strdeq	r9, [r3], -ip
   1d758:	mov	r3, #0
   1d75c:	mov	r2, #1
   1d760:	str	r1, [r0]
   1d764:	str	r1, [r0, #4]
   1d768:	str	r1, [r0, #8]
   1d76c:	str	r1, [r0, #12]
   1d770:	str	r1, [r0, #16]
   1d774:	strb	r2, [r0, #28]
   1d778:	str	r3, [r0, #20]
   1d77c:	str	r3, [r0, #24]
   1d780:	bx	lr
   1d784:	ldrb	r0, [r0, #28]
   1d788:	bx	lr
   1d78c:	ldrb	ip, [r0, #28]
   1d790:	ldr	r3, [r0, #20]
   1d794:	mov	r2, r0
   1d798:	eor	ip, ip, #1
   1d79c:	add	r3, ip, r3
   1d7a0:	and	r3, r3, #3
   1d7a4:	ldr	r0, [r0, r3, lsl #2]
   1d7a8:	str	r1, [r2, r3, lsl #2]
   1d7ac:	ldr	r1, [r2, #24]
   1d7b0:	str	r3, [r2, #20]
   1d7b4:	cmp	r3, r1
   1d7b8:	addeq	r3, ip, r3
   1d7bc:	andeq	r3, r3, #3
   1d7c0:	streq	r3, [r2, #24]
   1d7c4:	mov	r3, #0
   1d7c8:	strb	r3, [r2, #28]
   1d7cc:	bx	lr
   1d7d0:	ldrb	r3, [r0, #28]
   1d7d4:	cmp	r3, #0
   1d7d8:	bne	1d810 <__assert_fail@plt+0xbc6c>
   1d7dc:	ldr	r3, [r0, #20]
   1d7e0:	ldr	r1, [r0, #16]
   1d7e4:	ldr	r2, [r0, r3, lsl #2]
   1d7e8:	str	r1, [r0, r3, lsl #2]
   1d7ec:	ldr	r1, [r0, #24]
   1d7f0:	cmp	r3, r1
   1d7f4:	addne	r3, r3, #3
   1d7f8:	moveq	r3, #1
   1d7fc:	andne	r3, r3, #3
   1d800:	strbeq	r3, [r0, #28]
   1d804:	strne	r3, [r0, #20]
   1d808:	mov	r0, r2
   1d80c:	bx	lr
   1d810:	push	{r4, lr}
   1d814:	bl	11b68 <abort@plt>
   1d818:	ldm	r0, {r0, r2}
   1d81c:	push	{r4, lr}
   1d820:	eor	r0, r0, r2
   1d824:	bl	37ad0 <__assert_fail@plt+0x25f2c>
   1d828:	mov	r0, r1
   1d82c:	pop	{r4, pc}
   1d830:	push	{r4, r5}
   1d834:	ldrd	r2, [r1]
   1d838:	ldrd	r4, [r0]
   1d83c:	cmp	r5, r3
   1d840:	cmpeq	r4, r2
   1d844:	moveq	r0, #1
   1d848:	movne	r0, #0
   1d84c:	pop	{r4, r5}
   1d850:	bx	lr
   1d854:	push	{r4, r5, r6, lr}
   1d858:	mov	r6, r0
   1d85c:	sub	sp, sp, #8
   1d860:	mov	r0, #12
   1d864:	bl	36944 <__assert_fail@plt+0x24da0>
   1d868:	subs	r4, r0, #0
   1d86c:	beq	1d8a8 <__assert_fail@plt+0xbd04>
   1d870:	ldr	r2, [pc, #76]	; 1d8c4 <__assert_fail@plt+0xbd20>
   1d874:	ldr	r3, [pc, #76]	; 1d8c8 <__assert_fail@plt+0xbd24>
   1d878:	str	r2, [sp]
   1d87c:	mov	r1, #0
   1d880:	ldr	r2, [pc, #68]	; 1d8cc <__assert_fail@plt+0xbd28>
   1d884:	ldr	r0, [pc, #68]	; 1d8d0 <__assert_fail@plt+0xbd2c>
   1d888:	bl	1b668 <__assert_fail@plt+0x9ac4>
   1d88c:	cmp	r0, #0
   1d890:	movne	r3, #0
   1d894:	mov	r5, r0
   1d898:	str	r0, [r4]
   1d89c:	strne	r6, [r4, #4]
   1d8a0:	strne	r3, [r4, #8]
   1d8a4:	beq	1d8b4 <__assert_fail@plt+0xbd10>
   1d8a8:	mov	r0, r4
   1d8ac:	add	sp, sp, #8
   1d8b0:	pop	{r4, r5, r6, pc}
   1d8b4:	mov	r0, r4
   1d8b8:	bl	184ec <__assert_fail@plt+0x6948>
   1d8bc:	mov	r4, r5
   1d8c0:	b	1d8a8 <__assert_fail@plt+0xbd04>
   1d8c4:	andeq	r8, r1, ip, ror #9
   1d8c8:	andeq	sp, r1, r0, lsr r8
   1d8cc:	andeq	sp, r1, r8, lsl r8
   1d8d0:	strdeq	r0, [r0], -sp
   1d8d4:	push	{r4, lr}
   1d8d8:	mov	r4, r0
   1d8dc:	ldr	r0, [r0]
   1d8e0:	bl	1b958 <__assert_fail@plt+0x9db4>
   1d8e4:	ldr	r0, [r4, #8]
   1d8e8:	bl	184ec <__assert_fail@plt+0x6948>
   1d8ec:	mov	r0, r4
   1d8f0:	pop	{r4, lr}
   1d8f4:	b	184ec <__assert_fail@plt+0x6948>
   1d8f8:	push	{r4, r5, lr}
   1d8fc:	mov	r5, r0
   1d900:	ldr	r4, [r0, #8]
   1d904:	sub	sp, sp, #12
   1d908:	cmp	r4, #0
   1d90c:	beq	1d968 <__assert_fail@plt+0xbdc4>
   1d910:	ldrd	r0, [r4]
   1d914:	cmp	r1, r3
   1d918:	cmpeq	r0, r2
   1d91c:	ldreq	r0, [r4, #8]
   1d920:	beq	1d960 <__assert_fail@plt+0xbdbc>
   1d924:	strd	r2, [r4]
   1d928:	mov	r1, r4
   1d92c:	ldr	r0, [r5]
   1d930:	bl	1bfd0 <__assert_fail@plt+0xa42c>
   1d934:	cmp	r0, #0
   1d938:	beq	1d988 <__assert_fail@plt+0xbde4>
   1d93c:	cmp	r4, r0
   1d940:	moveq	r2, #0
   1d944:	ldreq	r3, [r5, #4]
   1d948:	ldrne	r0, [r0, #8]
   1d94c:	addeq	r1, r3, #1
   1d950:	moveq	r0, r3
   1d954:	stmibeq	r5, {r1, r2}
   1d958:	strne	r0, [r4, #8]
   1d95c:	streq	r3, [r4, #8]
   1d960:	add	sp, sp, #12
   1d964:	pop	{r4, r5, pc}
   1d968:	mov	r0, #16
   1d96c:	strd	r2, [sp]
   1d970:	bl	36944 <__assert_fail@plt+0x24da0>
   1d974:	ldrd	r2, [sp]
   1d978:	cmp	r0, #0
   1d97c:	mov	r4, r0
   1d980:	str	r0, [r5, #8]
   1d984:	bne	1d924 <__assert_fail@plt+0xbd80>
   1d988:	mvn	r0, #0
   1d98c:	add	sp, sp, #12
   1d990:	pop	{r4, r5, pc}
   1d994:	cmp	r0, #0
   1d998:	sbcs	r3, r1, #0
   1d99c:	mov	r3, #0
   1d9a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1d9a4:	mov	r4, r0
   1d9a8:	mov	r5, r1
   1d9ac:	strb	r3, [r2, #20]
   1d9b0:	add	r6, r2, #20
   1d9b4:	mov	r8, #10
   1d9b8:	mov	r9, #0
   1d9bc:	blt	1da0c <__assert_fail@plt+0xbe68>
   1d9c0:	mov	r0, r4
   1d9c4:	mov	r1, r5
   1d9c8:	mov	r2, r8
   1d9cc:	mov	r3, r9
   1d9d0:	bl	380e8 <__assert_fail@plt+0x26544>
   1d9d4:	mov	r0, r4
   1d9d8:	mov	r1, r5
   1d9dc:	mov	r3, r9
   1d9e0:	add	r2, r2, #48	; 0x30
   1d9e4:	strb	r2, [r6, #-1]!
   1d9e8:	mov	r2, r8
   1d9ec:	bl	380e8 <__assert_fail@plt+0x26544>
   1d9f0:	mov	r4, r0
   1d9f4:	mov	r5, r1
   1d9f8:	orrs	r3, r4, r5
   1d9fc:	bne	1d9c0 <__assert_fail@plt+0xbe1c>
   1da00:	mov	r0, r6
   1da04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da08:	mov	r6, r7
   1da0c:	mov	r0, r4
   1da10:	mov	r1, r5
   1da14:	mov	r2, r8
   1da18:	mov	r3, r9
   1da1c:	bl	380e8 <__assert_fail@plt+0x26544>
   1da20:	mov	r0, r4
   1da24:	mov	r1, r5
   1da28:	mov	r3, r9
   1da2c:	sub	r7, r6, #1
   1da30:	rsb	r2, r2, #48	; 0x30
   1da34:	strb	r2, [r6, #-1]
   1da38:	mov	r2, r8
   1da3c:	bl	380e8 <__assert_fail@plt+0x26544>
   1da40:	mov	r4, r0
   1da44:	mov	r5, r1
   1da48:	orrs	r3, r4, r5
   1da4c:	bne	1da08 <__assert_fail@plt+0xbe64>
   1da50:	mov	r3, #45	; 0x2d
   1da54:	sub	r6, r6, #2
   1da58:	strb	r3, [r7, #-1]
   1da5c:	mov	r0, r6
   1da60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1da64:	push	{r4, lr}
   1da68:	mov	r4, r0
   1da6c:	bl	1173c <wcwidth@plt>
   1da70:	cmp	r0, #0
   1da74:	popge	{r4, pc}
   1da78:	mov	r0, r4
   1da7c:	bl	11814 <iswcntrl@plt>
   1da80:	clz	r0, r0
   1da84:	lsr	r0, r0, #5
   1da88:	pop	{r4, pc}
   1da8c:	mov	r3, r1
   1da90:	push	{r4, r5, r6, lr}
   1da94:	mov	r4, r1
   1da98:	ldr	r1, [r3], #16
   1da9c:	mov	r5, r0
   1daa0:	cmp	r1, r3
   1daa4:	strne	r1, [r0]
   1daa8:	beq	1dacc <__assert_fail@plt+0xbf28>
   1daac:	ldrb	r3, [r4, #8]
   1dab0:	ldr	r2, [r4, #4]
   1dab4:	cmp	r3, #0
   1dab8:	strb	r3, [r5, #8]
   1dabc:	ldrne	r3, [r4, #12]
   1dac0:	str	r2, [r5, #4]
   1dac4:	strne	r3, [r5, #12]
   1dac8:	pop	{r4, r5, r6, pc}
   1dacc:	add	r3, r0, #16
   1dad0:	mov	r0, r3
   1dad4:	ldr	r2, [r4, #4]
   1dad8:	bl	11784 <memcpy@plt>
   1dadc:	str	r0, [r5]
   1dae0:	b	1daac <__assert_fail@plt+0xbf08>
   1dae4:	ldr	r3, [pc, #20]	; 1db00 <__assert_fail@plt+0xbf5c>
   1dae8:	lsr	r2, r0, #5
   1daec:	and	r0, r0, #31
   1daf0:	ldr	r3, [r3, r2, lsl #2]
   1daf4:	lsr	r0, r3, r0
   1daf8:	and	r0, r0, #1
   1dafc:	bx	lr
   1db00:	andeq	r9, r3, ip, lsr #28
   1db04:	push	{r4, r5, r6, r7, lr}
   1db08:	subs	r6, r0, #0
   1db0c:	sub	sp, sp, #12
   1db10:	addeq	r6, sp, #4
   1db14:	mov	r0, r6
   1db18:	mov	r5, r2
   1db1c:	mov	r7, r1
   1db20:	bl	118b0 <mbrtowc@plt>
   1db24:	cmp	r5, #0
   1db28:	cmnne	r0, #3
   1db2c:	mov	r4, r0
   1db30:	bls	1db4c <__assert_fail@plt+0xbfa8>
   1db34:	mov	r0, #0
   1db38:	bl	37764 <__assert_fail@plt+0x25bc0>
   1db3c:	cmp	r0, #0
   1db40:	moveq	r4, #1
   1db44:	ldrbeq	r3, [r7]
   1db48:	streq	r3, [r6]
   1db4c:	mov	r0, r4
   1db50:	add	sp, sp, #12
   1db54:	pop	{r4, r5, r6, r7, pc}
   1db58:	cmp	r0, r1
   1db5c:	beq	1e044 <__assert_fail@plt+0xc4a0>
   1db60:	push	{r4, r5, r6, r7, r8, lr}
   1db64:	sub	sp, sp, #112	; 0x70
   1db68:	mov	r4, r0
   1db6c:	mov	r5, r1
   1db70:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1db74:	cmp	r0, #1
   1db78:	bls	1dcb0 <__assert_fail@plt+0xc10c>
   1db7c:	ldr	r7, [pc, #1516]	; 1e170 <__assert_fail@plt+0xc5cc>
   1db80:	str	r5, [sp, #72]	; 0x48
   1db84:	mov	r5, #1
   1db88:	mov	r6, #0
   1db8c:	str	r4, [sp, #16]
   1db90:	str	r6, [sp, #8]
   1db94:	strb	r6, [sp]
   1db98:	str	r6, [sp, #4]
   1db9c:	strb	r6, [sp, #12]
   1dba0:	strb	r6, [sp, #56]	; 0x38
   1dba4:	str	r6, [sp, #60]	; 0x3c
   1dba8:	strb	r6, [sp, #68]	; 0x44
   1dbac:	str	r6, [sp, #64]	; 0x40
   1dbb0:	ldrb	r3, [sp]
   1dbb4:	cmp	r3, #0
   1dbb8:	bne	1df14 <__assert_fail@plt+0xc370>
   1dbbc:	ldrb	r3, [r4]
   1dbc0:	and	r2, r3, #31
   1dbc4:	lsr	r3, r3, #5
   1dbc8:	ldr	r3, [r7, r3, lsl #2]
   1dbcc:	lsr	r3, r3, r2
   1dbd0:	tst	r3, #1
   1dbd4:	beq	1df00 <__assert_fail@plt+0xc35c>
   1dbd8:	str	r5, [sp, #20]
   1dbdc:	ldrb	r4, [r4]
   1dbe0:	strb	r5, [sp, #24]
   1dbe4:	str	r4, [sp, #28]
   1dbe8:	cmp	r4, #0
   1dbec:	strb	r5, [sp, #12]
   1dbf0:	bne	1dd3c <__assert_fail@plt+0xc198>
   1dbf4:	ldrb	r3, [sp, #68]	; 0x44
   1dbf8:	cmp	r3, #0
   1dbfc:	bne	1e04c <__assert_fail@plt+0xc4a8>
   1dc00:	ldrb	r3, [sp, #56]	; 0x38
   1dc04:	ldr	r4, [sp, #72]	; 0x48
   1dc08:	cmp	r3, #0
   1dc0c:	bne	1dc48 <__assert_fail@plt+0xc0a4>
   1dc10:	ldrb	r3, [r4]
   1dc14:	ldr	r1, [pc, #1364]	; 1e170 <__assert_fail@plt+0xc5cc>
   1dc18:	and	r2, r3, #31
   1dc1c:	lsr	r3, r3, #5
   1dc20:	ldr	r3, [r1, r3, lsl #2]
   1dc24:	lsr	r3, r3, r2
   1dc28:	tst	r3, #1
   1dc2c:	bne	1e0fc <__assert_fail@plt+0xc558>
   1dc30:	add	r0, sp, #60	; 0x3c
   1dc34:	bl	117b4 <mbsinit@plt>
   1dc38:	cmp	r0, #0
   1dc3c:	beq	1e138 <__assert_fail@plt+0xc594>
   1dc40:	mov	r3, #1
   1dc44:	strb	r3, [sp, #56]	; 0x38
   1dc48:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1dc4c:	mov	r1, r0
   1dc50:	mov	r0, r4
   1dc54:	bl	3379c <__assert_fail@plt+0x21bf8>
   1dc58:	add	r3, sp, #60	; 0x3c
   1dc5c:	mov	r1, r4
   1dc60:	mov	r2, r0
   1dc64:	add	r0, sp, #84	; 0x54
   1dc68:	bl	1db04 <__assert_fail@plt+0xbf60>
   1dc6c:	add	r3, r0, #2
   1dc70:	cmp	r3, #1
   1dc74:	bls	1dd8c <__assert_fail@plt+0xc1e8>
   1dc78:	cmp	r0, #0
   1dc7c:	bne	1e058 <__assert_fail@plt+0xc4b4>
   1dc80:	ldr	r3, [sp, #72]	; 0x48
   1dc84:	mov	r2, #1
   1dc88:	str	r2, [sp, #76]	; 0x4c
   1dc8c:	ldrb	r3, [r3]
   1dc90:	cmp	r3, #0
   1dc94:	bne	1e14c <__assert_fail@plt+0xc5a8>
   1dc98:	ldr	r0, [sp, #84]	; 0x54
   1dc9c:	cmp	r0, #0
   1dca0:	bne	1e00c <__assert_fail@plt+0xc468>
   1dca4:	adds	r0, r0, #0
   1dca8:	mvnne	r0, #0
   1dcac:	b	1dd20 <__assert_fail@plt+0xc17c>
   1dcb0:	bl	11964 <__ctype_b_loc@plt>
   1dcb4:	sub	r8, r4, #1
   1dcb8:	sub	r5, r5, #1
   1dcbc:	ldr	r7, [r0]
   1dcc0:	b	1dccc <__assert_fail@plt+0xc128>
   1dcc4:	cmp	r4, r0
   1dcc8:	bne	1dd1c <__assert_fail@plt+0xc178>
   1dccc:	ldrb	r4, [r8, #1]!
   1dcd0:	sxth	r6, r4
   1dcd4:	lsl	r3, r6, #1
   1dcd8:	ldrh	r3, [r7, r3]
   1dcdc:	tst	r3, #256	; 0x100
   1dce0:	beq	1dcf0 <__assert_fail@plt+0xc14c>
   1dce4:	bl	11928 <__ctype_tolower_loc@plt>
   1dce8:	ldr	r3, [r0]
   1dcec:	ldrb	r4, [r3, r6, lsl #2]
   1dcf0:	ldrb	r0, [r5, #1]!
   1dcf4:	sxth	r6, r0
   1dcf8:	lsl	r3, r6, #1
   1dcfc:	ldrh	r3, [r7, r3]
   1dd00:	tst	r3, #256	; 0x100
   1dd04:	beq	1dd14 <__assert_fail@plt+0xc170>
   1dd08:	bl	11928 <__ctype_tolower_loc@plt>
   1dd0c:	ldr	r3, [r0]
   1dd10:	ldrb	r0, [r3, r6, lsl #2]
   1dd14:	cmp	r4, #0
   1dd18:	bne	1dcc4 <__assert_fail@plt+0xc120>
   1dd1c:	sub	r0, r4, r0
   1dd20:	add	sp, sp, #112	; 0x70
   1dd24:	pop	{r4, r5, r6, r7, r8, pc}
   1dd28:	ldr	r0, [sp, #16]
   1dd2c:	bl	11988 <strlen@plt>
   1dd30:	strb	r6, [sp, #24]
   1dd34:	str	r0, [sp, #20]
   1dd38:	strb	r5, [sp, #12]
   1dd3c:	ldrb	r3, [sp, #68]	; 0x44
   1dd40:	cmp	r3, #0
   1dd44:	beq	1dd98 <__assert_fail@plt+0xc1f4>
   1dd48:	ldrb	r3, [sp, #80]	; 0x50
   1dd4c:	cmp	r3, #0
   1dd50:	ldrne	r8, [sp, #84]	; 0x54
   1dd54:	bne	1de40 <__assert_fail@plt+0xc29c>
   1dd58:	ldrb	r3, [sp, #24]
   1dd5c:	cmp	r3, #0
   1dd60:	bne	1dd8c <__assert_fail@plt+0xc1e8>
   1dd64:	ldr	r2, [sp, #20]
   1dd68:	ldr	r3, [sp, #76]	; 0x4c
   1dd6c:	cmp	r2, r3
   1dd70:	beq	1dfac <__assert_fail@plt+0xc408>
   1dd74:	bcs	1df78 <__assert_fail@plt+0xc3d4>
   1dd78:	ldr	r1, [sp, #72]	; 0x48
   1dd7c:	ldr	r0, [sp, #16]
   1dd80:	bl	117c0 <memcmp@plt>
   1dd84:	cmp	r0, #0
   1dd88:	bgt	1deb0 <__assert_fail@plt+0xc30c>
   1dd8c:	mvn	r0, #0
   1dd90:	add	sp, sp, #112	; 0x70
   1dd94:	pop	{r4, r5, r6, r7, r8, pc}
   1dd98:	ldrb	r3, [sp, #56]	; 0x38
   1dd9c:	ldr	r4, [sp, #72]	; 0x48
   1dda0:	cmp	r3, #0
   1dda4:	bne	1ddd8 <__assert_fail@plt+0xc234>
   1dda8:	ldrb	r3, [r4]
   1ddac:	and	r2, r3, #31
   1ddb0:	lsr	r3, r3, #5
   1ddb4:	ldr	r3, [r7, r3, lsl #2]
   1ddb8:	lsr	r3, r3, r2
   1ddbc:	tst	r3, #1
   1ddc0:	bne	1deb8 <__assert_fail@plt+0xc314>
   1ddc4:	add	r0, sp, #60	; 0x3c
   1ddc8:	bl	117b4 <mbsinit@plt>
   1ddcc:	cmp	r0, #0
   1ddd0:	beq	1e138 <__assert_fail@plt+0xc594>
   1ddd4:	strb	r5, [sp, #56]	; 0x38
   1ddd8:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1dddc:	mov	r1, r0
   1dde0:	mov	r0, r4
   1dde4:	bl	3379c <__assert_fail@plt+0x21bf8>
   1dde8:	add	r3, sp, #60	; 0x3c
   1ddec:	mov	r1, r4
   1ddf0:	mov	r2, r0
   1ddf4:	add	r0, sp, #84	; 0x54
   1ddf8:	bl	1db04 <__assert_fail@plt+0xbf60>
   1ddfc:	cmn	r0, #1
   1de00:	str	r0, [sp, #76]	; 0x4c
   1de04:	strbeq	r6, [sp, #80]	; 0x50
   1de08:	streq	r5, [sp, #76]	; 0x4c
   1de0c:	strbeq	r5, [sp, #68]	; 0x44
   1de10:	beq	1dd58 <__assert_fail@plt+0xc1b4>
   1de14:	cmn	r0, #2
   1de18:	beq	1df94 <__assert_fail@plt+0xc3f0>
   1de1c:	cmp	r0, #0
   1de20:	beq	1e020 <__assert_fail@plt+0xc47c>
   1de24:	ldr	r8, [sp, #84]	; 0x54
   1de28:	add	r0, sp, #60	; 0x3c
   1de2c:	strb	r5, [sp, #80]	; 0x50
   1de30:	bl	117b4 <mbsinit@plt>
   1de34:	strb	r5, [sp, #68]	; 0x44
   1de38:	cmp	r0, #0
   1de3c:	strbne	r6, [sp, #56]	; 0x38
   1de40:	cmp	r8, #0
   1de44:	bne	1ded8 <__assert_fail@plt+0xc334>
   1de48:	ldrb	r5, [sp, #12]
   1de4c:	cmp	r5, #0
   1de50:	ldrbne	r5, [sp, #24]
   1de54:	bne	1dea8 <__assert_fail@plt+0xc304>
   1de58:	ldrb	r3, [sp]
   1de5c:	ldr	r4, [sp, #16]
   1de60:	cmp	r3, #0
   1de64:	bne	1e078 <__assert_fail@plt+0xc4d4>
   1de68:	ldrb	r3, [r4]
   1de6c:	ldr	r1, [pc, #764]	; 1e170 <__assert_fail@plt+0xc5cc>
   1de70:	and	r2, r3, #31
   1de74:	lsr	r3, r3, #5
   1de78:	ldr	r3, [r1, r3, lsl #2]
   1de7c:	lsr	r3, r3, r2
   1de80:	tst	r3, #1
   1de84:	beq	1e060 <__assert_fail@plt+0xc4bc>
   1de88:	mov	r3, #1
   1de8c:	str	r3, [sp, #20]
   1de90:	ldrb	r2, [r4]
   1de94:	mov	r5, r3
   1de98:	strb	r3, [sp, #24]
   1de9c:	str	r2, [sp, #28]
   1dea0:	mov	r3, #1
   1dea4:	strb	r3, [sp, #12]
   1dea8:	cmp	r5, #0
   1deac:	bne	1e160 <__assert_fail@plt+0xc5bc>
   1deb0:	mov	r0, #1
   1deb4:	b	1dd20 <__assert_fail@plt+0xc17c>
   1deb8:	str	r5, [sp, #76]	; 0x4c
   1debc:	ldrb	r0, [r4]
   1dec0:	strb	r5, [sp, #80]	; 0x50
   1dec4:	strb	r5, [sp, #68]	; 0x44
   1dec8:	mov	r8, r0
   1decc:	cmp	r8, #0
   1ded0:	str	r0, [sp, #84]	; 0x54
   1ded4:	beq	1de48 <__assert_fail@plt+0xc2a4>
   1ded8:	ldrb	r3, [sp, #24]
   1dedc:	cmp	r3, #0
   1dee0:	beq	1deb0 <__assert_fail@plt+0xc30c>
   1dee4:	ldr	r0, [sp, #28]
   1dee8:	bl	117a8 <towlower@plt>
   1deec:	mov	r4, r0
   1def0:	mov	r0, r8
   1def4:	bl	117a8 <towlower@plt>
   1def8:	sub	r0, r4, r0
   1defc:	b	1dfb8 <__assert_fail@plt+0xc414>
   1df00:	add	r0, sp, #4
   1df04:	bl	117b4 <mbsinit@plt>
   1df08:	cmp	r0, #0
   1df0c:	beq	1e138 <__assert_fail@plt+0xc594>
   1df10:	strb	r5, [sp]
   1df14:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1df18:	mov	r1, r0
   1df1c:	mov	r0, r4
   1df20:	bl	3379c <__assert_fail@plt+0x21bf8>
   1df24:	add	r3, sp, #4
   1df28:	mov	r1, r4
   1df2c:	mov	r2, r0
   1df30:	add	r0, sp, #28
   1df34:	bl	1db04 <__assert_fail@plt+0xbf60>
   1df38:	cmn	r0, #1
   1df3c:	str	r0, [sp, #20]
   1df40:	strbeq	r6, [sp, #24]
   1df44:	streq	r5, [sp, #20]
   1df48:	beq	1dd38 <__assert_fail@plt+0xc194>
   1df4c:	cmn	r0, #2
   1df50:	beq	1dd28 <__assert_fail@plt+0xc184>
   1df54:	cmp	r0, #0
   1df58:	beq	1dfec <__assert_fail@plt+0xc448>
   1df5c:	ldr	r4, [sp, #28]
   1df60:	add	r0, sp, #4
   1df64:	strb	r5, [sp, #24]
   1df68:	bl	117b4 <mbsinit@plt>
   1df6c:	cmp	r0, #0
   1df70:	strbne	r6, [sp]
   1df74:	b	1dbe8 <__assert_fail@plt+0xc044>
   1df78:	mov	r2, r3
   1df7c:	ldr	r1, [sp, #72]	; 0x48
   1df80:	ldr	r0, [sp, #16]
   1df84:	bl	117c0 <memcmp@plt>
   1df88:	cmp	r0, #0
   1df8c:	blt	1dd8c <__assert_fail@plt+0xc1e8>
   1df90:	b	1deb0 <__assert_fail@plt+0xc30c>
   1df94:	ldr	r0, [sp, #72]	; 0x48
   1df98:	bl	11988 <strlen@plt>
   1df9c:	strb	r6, [sp, #80]	; 0x50
   1dfa0:	strb	r5, [sp, #68]	; 0x44
   1dfa4:	str	r0, [sp, #76]	; 0x4c
   1dfa8:	b	1dd58 <__assert_fail@plt+0xc1b4>
   1dfac:	ldr	r1, [sp, #72]	; 0x48
   1dfb0:	ldr	r0, [sp, #16]
   1dfb4:	bl	117c0 <memcmp@plt>
   1dfb8:	cmp	r0, #0
   1dfbc:	bne	1dd20 <__assert_fail@plt+0xc17c>
   1dfc0:	ldr	r4, [sp, #16]
   1dfc4:	ldr	r3, [sp, #72]	; 0x48
   1dfc8:	ldr	r1, [sp, #20]
   1dfcc:	ldr	r2, [sp, #76]	; 0x4c
   1dfd0:	add	r4, r4, r1
   1dfd4:	add	r3, r3, r2
   1dfd8:	strb	r0, [sp, #12]
   1dfdc:	strb	r0, [sp, #68]	; 0x44
   1dfe0:	str	r4, [sp, #16]
   1dfe4:	str	r3, [sp, #72]	; 0x48
   1dfe8:	b	1dbb0 <__assert_fail@plt+0xc00c>
   1dfec:	ldr	r3, [sp, #16]
   1dff0:	str	r5, [sp, #20]
   1dff4:	ldrb	r3, [r3]
   1dff8:	cmp	r3, #0
   1dffc:	bne	1e14c <__assert_fail@plt+0xc5a8>
   1e000:	ldr	r4, [sp, #28]
   1e004:	cmp	r4, #0
   1e008:	beq	1df60 <__assert_fail@plt+0xc3bc>
   1e00c:	ldr	r3, [pc, #352]	; 1e174 <__assert_fail@plt+0xc5d0>
   1e010:	mov	r2, #172	; 0xac
   1e014:	ldr	r1, [pc, #348]	; 1e178 <__assert_fail@plt+0xc5d4>
   1e018:	ldr	r0, [pc, #348]	; 1e17c <__assert_fail@plt+0xc5d8>
   1e01c:	bl	11ba4 <__assert_fail@plt>
   1e020:	ldr	r3, [sp, #72]	; 0x48
   1e024:	str	r5, [sp, #76]	; 0x4c
   1e028:	ldrb	r3, [r3]
   1e02c:	cmp	r3, #0
   1e030:	bne	1e14c <__assert_fail@plt+0xc5a8>
   1e034:	ldr	r8, [sp, #84]	; 0x54
   1e038:	cmp	r8, #0
   1e03c:	beq	1de28 <__assert_fail@plt+0xc284>
   1e040:	b	1e00c <__assert_fail@plt+0xc468>
   1e044:	mov	r0, #0
   1e048:	bx	lr
   1e04c:	ldrb	r3, [sp, #80]	; 0x50
   1e050:	cmp	r3, #0
   1e054:	beq	1dd8c <__assert_fail@plt+0xc1e8>
   1e058:	ldr	r0, [sp, #84]	; 0x54
   1e05c:	b	1dca4 <__assert_fail@plt+0xc100>
   1e060:	add	r0, sp, #4
   1e064:	bl	117b4 <mbsinit@plt>
   1e068:	cmp	r0, #0
   1e06c:	beq	1e138 <__assert_fail@plt+0xc594>
   1e070:	mov	r3, #1
   1e074:	strb	r3, [sp]
   1e078:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1e07c:	mov	r1, r0
   1e080:	mov	r0, r4
   1e084:	bl	3379c <__assert_fail@plt+0x21bf8>
   1e088:	add	r3, sp, #4
   1e08c:	mov	r1, r4
   1e090:	mov	r2, r0
   1e094:	add	r0, sp, #28
   1e098:	bl	1db04 <__assert_fail@plt+0xbf60>
   1e09c:	cmn	r0, #1
   1e0a0:	str	r0, [sp, #20]
   1e0a4:	beq	1e124 <__assert_fail@plt+0xc580>
   1e0a8:	cmn	r0, #2
   1e0ac:	beq	1e10c <__assert_fail@plt+0xc568>
   1e0b0:	cmp	r0, #0
   1e0b4:	bne	1e0dc <__assert_fail@plt+0xc538>
   1e0b8:	ldr	r3, [sp, #16]
   1e0bc:	mov	r2, #1
   1e0c0:	str	r2, [sp, #20]
   1e0c4:	ldrb	r3, [r3]
   1e0c8:	cmp	r3, #0
   1e0cc:	bne	1e14c <__assert_fail@plt+0xc5a8>
   1e0d0:	ldr	r3, [sp, #28]
   1e0d4:	cmp	r3, #0
   1e0d8:	bne	1e00c <__assert_fail@plt+0xc468>
   1e0dc:	add	r0, sp, #4
   1e0e0:	mov	r5, #1
   1e0e4:	strb	r5, [sp, #24]
   1e0e8:	bl	117b4 <mbsinit@plt>
   1e0ec:	cmp	r0, #0
   1e0f0:	movne	r3, #0
   1e0f4:	strbne	r3, [sp]
   1e0f8:	b	1dea0 <__assert_fail@plt+0xc2fc>
   1e0fc:	mov	r3, #1
   1e100:	str	r3, [sp, #76]	; 0x4c
   1e104:	ldrb	r0, [r4]
   1e108:	b	1dca4 <__assert_fail@plt+0xc100>
   1e10c:	ldr	r0, [sp, #16]
   1e110:	bl	11988 <strlen@plt>
   1e114:	mov	r3, #0
   1e118:	strb	r3, [sp, #24]
   1e11c:	str	r0, [sp, #20]
   1e120:	b	1dea0 <__assert_fail@plt+0xc2fc>
   1e124:	mov	r2, #1
   1e128:	mov	r3, #0
   1e12c:	str	r2, [sp, #20]
   1e130:	strb	r3, [sp, #24]
   1e134:	b	1dea0 <__assert_fail@plt+0xc2fc>
   1e138:	ldr	r3, [pc, #52]	; 1e174 <__assert_fail@plt+0xc5d0>
   1e13c:	mov	r2, #143	; 0x8f
   1e140:	ldr	r1, [pc, #48]	; 1e178 <__assert_fail@plt+0xc5d4>
   1e144:	ldr	r0, [pc, #52]	; 1e180 <__assert_fail@plt+0xc5dc>
   1e148:	bl	11ba4 <__assert_fail@plt>
   1e14c:	ldr	r3, [pc, #32]	; 1e174 <__assert_fail@plt+0xc5d0>
   1e150:	mov	r2, #171	; 0xab
   1e154:	ldr	r1, [pc, #28]	; 1e178 <__assert_fail@plt+0xc5d4>
   1e158:	ldr	r0, [pc, #36]	; 1e184 <__assert_fail@plt+0xc5e0>
   1e15c:	bl	11ba4 <__assert_fail@plt>
   1e160:	ldr	r3, [sp, #28]
   1e164:	cmp	r3, #0
   1e168:	bne	1deb0 <__assert_fail@plt+0xc30c>
   1e16c:	b	1dbf4 <__assert_fail@plt+0xc050>
   1e170:	andeq	r9, r3, ip, lsr #28
   1e174:	andeq	r9, r3, ip, asr #28
   1e178:	andeq	r9, r3, r4, lsl #25
   1e17c:	andeq	r9, r3, r4, asr #25
   1e180:	muleq	r3, r4, ip
   1e184:	andeq	r9, r3, ip, lsr #25
   1e188:	push	{r4, r5, r6, r7, r8, lr}
   1e18c:	mov	r4, r0
   1e190:	bl	11988 <strlen@plt>
   1e194:	adds	r0, r0, #1
   1e198:	popeq	{r4, r5, r6, r7, r8, pc}
   1e19c:	mov	r2, r4
   1e1a0:	mov	r3, #0
   1e1a4:	b	1e1bc <__assert_fail@plt+0xc618>
   1e1a8:	mov	r3, ip
   1e1ac:	strb	r1, [r2]
   1e1b0:	cmp	r0, r3
   1e1b4:	add	r2, r2, #1
   1e1b8:	bls	1e22c <__assert_fail@plt+0xc688>
   1e1bc:	ldrb	r1, [r4, r3]
   1e1c0:	add	ip, r3, #1
   1e1c4:	cmp	r1, #92	; 0x5c
   1e1c8:	bne	1e1a8 <__assert_fail@plt+0xc604>
   1e1cc:	add	lr, r3, #4
   1e1d0:	cmp	r0, lr
   1e1d4:	bls	1e1a8 <__assert_fail@plt+0xc604>
   1e1d8:	ldrb	r5, [r4, ip]
   1e1dc:	add	r3, r4, r3
   1e1e0:	sub	r5, r5, #48	; 0x30
   1e1e4:	uxtb	r6, r5
   1e1e8:	cmp	r6, #3
   1e1ec:	bhi	1e1a8 <__assert_fail@plt+0xc604>
   1e1f0:	ldrb	r6, [r3, #2]
   1e1f4:	sub	r6, r6, #48	; 0x30
   1e1f8:	uxtb	r7, r6
   1e1fc:	cmp	r7, #7
   1e200:	bhi	1e1a8 <__assert_fail@plt+0xc604>
   1e204:	ldrb	r7, [r3, #3]
   1e208:	mov	r3, lr
   1e20c:	add	r5, r6, r5, lsl #3
   1e210:	sub	lr, r7, #48	; 0x30
   1e214:	uxtb	lr, lr
   1e218:	cmp	lr, #7
   1e21c:	add	r5, lr, r5, lsl #3
   1e220:	strbls	r5, [r2]
   1e224:	bls	1e1b0 <__assert_fail@plt+0xc60c>
   1e228:	b	1e1a8 <__assert_fail@plt+0xc604>
   1e22c:	pop	{r4, r5, r6, r7, r8, pc}
   1e230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e234:	sub	sp, sp, #68	; 0x44
   1e238:	ldr	r1, [pc, #1312]	; 1e760 <__assert_fail@plt+0xcbbc>
   1e23c:	ldr	r0, [pc, #1312]	; 1e764 <__assert_fail@plt+0xcbc0>
   1e240:	bl	11afc <fopen64@plt>
   1e244:	subs	r7, r0, #0
   1e248:	beq	1e7f0 <__assert_fail@plt+0xcc4c>
   1e24c:	add	sl, sp, #40	; 0x28
   1e250:	ldr	r9, [pc, #1296]	; 1e768 <__assert_fail@plt+0xcbc4>
   1e254:	mov	r5, sl
   1e258:	mov	r3, #0
   1e25c:	str	r3, [sp, #44]	; 0x2c
   1e260:	str	r3, [sp, #48]	; 0x30
   1e264:	mov	r3, r7
   1e268:	mov	r2, #10
   1e26c:	add	r1, sp, #48	; 0x30
   1e270:	add	r0, sp, #44	; 0x2c
   1e274:	bl	116f4 <__getdelim@plt>
   1e278:	cmn	r0, #1
   1e27c:	beq	1e4cc <__assert_fail@plt+0xc928>
   1e280:	add	r3, sp, #60	; 0x3c
   1e284:	str	r3, [sp]
   1e288:	ldr	r0, [sp, #44]	; 0x2c
   1e28c:	add	r3, sp, #56	; 0x38
   1e290:	add	r2, sp, #52	; 0x34
   1e294:	mov	r1, r9
   1e298:	bl	11a9c <sscanf@plt>
   1e29c:	sub	r0, r0, #2
   1e2a0:	cmp	r0, #1
   1e2a4:	bhi	1e264 <__assert_fail@plt+0xc6c0>
   1e2a8:	ldr	r3, [sp, #60]	; 0x3c
   1e2ac:	ldr	sl, [sp, #44]	; 0x2c
   1e2b0:	mov	r1, #32
   1e2b4:	add	sl, sl, r3
   1e2b8:	mov	r0, sl
   1e2bc:	bl	11994 <strchr@plt>
   1e2c0:	subs	r6, r0, #0
   1e2c4:	beq	1e264 <__assert_fail@plt+0xc6c0>
   1e2c8:	mov	r8, #0
   1e2cc:	strb	r8, [r6], #1
   1e2d0:	mov	r1, #32
   1e2d4:	mov	r0, r6
   1e2d8:	bl	11994 <strchr@plt>
   1e2dc:	cmp	r0, #0
   1e2e0:	beq	1e264 <__assert_fail@plt+0xc6c0>
   1e2e4:	ldr	r1, [pc, #1152]	; 1e76c <__assert_fail@plt+0xcbc8>
   1e2e8:	strb	r8, [r0], #1
   1e2ec:	bl	36e78 <__assert_fail@plt+0x252d4>
   1e2f0:	cmp	r0, #0
   1e2f4:	beq	1e264 <__assert_fail@plt+0xc6c0>
   1e2f8:	add	fp, r0, #3
   1e2fc:	mov	r0, fp
   1e300:	mov	r1, #32
   1e304:	bl	11994 <strchr@plt>
   1e308:	subs	r3, r0, #0
   1e30c:	beq	1e264 <__assert_fail@plt+0xc6c0>
   1e310:	strb	r8, [r3], #1
   1e314:	mov	r1, #32
   1e318:	mov	r0, r3
   1e31c:	str	r3, [sp, #32]
   1e320:	bl	11994 <strchr@plt>
   1e324:	cmp	r0, #0
   1e328:	beq	1e264 <__assert_fail@plt+0xc6c0>
   1e32c:	ldr	r3, [sp, #32]
   1e330:	strb	r8, [r0]
   1e334:	mov	r0, r3
   1e338:	bl	1e188 <__assert_fail@plt+0xc5e4>
   1e33c:	mov	r0, r6
   1e340:	bl	1e188 <__assert_fail@plt+0xc5e4>
   1e344:	mov	r0, sl
   1e348:	bl	1e188 <__assert_fail@plt+0xc5e4>
   1e34c:	mov	r0, fp
   1e350:	bl	1e188 <__assert_fail@plt+0xc5e4>
   1e354:	mov	r0, #32
   1e358:	bl	347e0 <__assert_fail@plt+0x22c3c>
   1e35c:	ldr	r3, [sp, #32]
   1e360:	mov	r4, r0
   1e364:	mov	r0, r3
   1e368:	bl	34df0 <__assert_fail@plt+0x2324c>
   1e36c:	str	r8, [sp, #12]
   1e370:	str	r8, [sp, #20]
   1e374:	str	r0, [r4]
   1e378:	mov	r0, r6
   1e37c:	bl	34df0 <__assert_fail@plt+0x2324c>
   1e380:	str	r0, [r4, #4]
   1e384:	mov	r0, sl
   1e388:	bl	34df0 <__assert_fail@plt+0x2324c>
   1e38c:	ldr	sl, [pc, #988]	; 1e770 <__assert_fail@plt+0xcbcc>
   1e390:	str	r0, [r4, #8]
   1e394:	mov	r0, fp
   1e398:	bl	34df0 <__assert_fail@plt+0x2324c>
   1e39c:	ldr	r3, [sp, #52]	; 0x34
   1e3a0:	mov	fp, #0
   1e3a4:	str	r3, [sp, #28]
   1e3a8:	lsr	r2, r3, #24
   1e3ac:	lsl	r3, r3, #8
   1e3b0:	str	r2, [sp, #12]
   1e3b4:	str	r3, [sp, #8]
   1e3b8:	ldrd	r2, [sp, #8]
   1e3bc:	str	r8, [sp, #24]
   1e3c0:	ldr	r1, [sp, #56]	; 0x38
   1e3c4:	and	r2, r2, sl
   1e3c8:	and	r3, r3, fp
   1e3cc:	ldr	fp, [pc, #928]	; 1e774 <__assert_fail@plt+0xcbd0>
   1e3d0:	strd	r2, [sp, #32]
   1e3d4:	ldrd	r2, [sp, #24]
   1e3d8:	mov	sl, #0
   1e3dc:	lsr	ip, r1, #20
   1e3e0:	and	sl, sl, r2
   1e3e4:	and	fp, fp, r3
   1e3e8:	mov	r2, sl
   1e3ec:	mov	r3, fp
   1e3f0:	ldrd	sl, [sp, #32]
   1e3f4:	str	ip, [sp, #20]
   1e3f8:	ldrb	ip, [r4, #24]
   1e3fc:	orr	sl, sl, r2
   1e400:	orr	fp, fp, r3
   1e404:	lsl	r3, r1, #12
   1e408:	uxtb	r1, r1
   1e40c:	orr	sl, sl, r1
   1e410:	str	r3, [sp, #16]
   1e414:	strd	sl, [sp, #32]
   1e418:	add	r3, pc, #824	; 0x338
   1e41c:	ldrd	r2, [r3]
   1e420:	ldrd	sl, [sp, #16]
   1e424:	orr	ip, ip, #4
   1e428:	strb	ip, [r4, #24]
   1e42c:	and	sl, sl, r2
   1e430:	and	fp, fp, r3
   1e434:	mov	r2, sl
   1e438:	mov	r3, fp
   1e43c:	ldrd	sl, [sp, #32]
   1e440:	ldr	r1, [pc, #828]	; 1e784 <__assert_fail@plt+0xcbe0>
   1e444:	str	r0, [r4, #12]
   1e448:	orr	sl, sl, r2
   1e44c:	orr	fp, fp, r3
   1e450:	mov	r2, sl
   1e454:	mov	r3, fp
   1e458:	mov	r6, r0
   1e45c:	strd	r2, [r4, #16]
   1e460:	bl	1170c <strcmp@plt>
   1e464:	cmp	r0, r8
   1e468:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e46c:	ldr	r1, [pc, #788]	; 1e788 <__assert_fail@plt+0xcbe4>
   1e470:	mov	r0, r6
   1e474:	bl	1170c <strcmp@plt>
   1e478:	cmp	r0, r8
   1e47c:	bne	1e508 <__assert_fail@plt+0xc964>
   1e480:	mov	r0, #1
   1e484:	ldrb	r3, [r4, #24]
   1e488:	ldr	r8, [r4]
   1e48c:	mov	r1, #58	; 0x3a
   1e490:	bic	r3, r3, #1
   1e494:	orr	r3, r0, r3
   1e498:	strb	r3, [r4, #24]
   1e49c:	mov	r0, r8
   1e4a0:	bl	11994 <strchr@plt>
   1e4a4:	cmp	r0, #0
   1e4a8:	beq	1e5fc <__assert_fail@plt+0xca58>
   1e4ac:	mov	r3, #1
   1e4b0:	ldrb	r0, [r4, #24]
   1e4b4:	bic	r0, r0, #2
   1e4b8:	orr	r0, r0, r3, lsl #1
   1e4bc:	strb	r0, [r4, #24]
   1e4c0:	str	r4, [r5]
   1e4c4:	add	r5, r4, #28
   1e4c8:	b	1e264 <__assert_fail@plt+0xc6c0>
   1e4cc:	ldr	r0, [sp, #44]	; 0x2c
   1e4d0:	bl	184ec <__assert_fail@plt+0x6948>
   1e4d4:	ldr	r3, [r7]
   1e4d8:	mov	sl, r5
   1e4dc:	tst	r3, #32
   1e4e0:	bne	1e6d4 <__assert_fail@plt+0xcb30>
   1e4e4:	mov	r0, r7
   1e4e8:	bl	16448 <__assert_fail@plt+0x48a4>
   1e4ec:	cmn	r0, #1
   1e4f0:	beq	1ead4 <__assert_fail@plt+0xcf30>
   1e4f4:	mov	r3, #0
   1e4f8:	str	r3, [sl]
   1e4fc:	ldr	r0, [sp, #40]	; 0x28
   1e500:	add	sp, sp, #68	; 0x44
   1e504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e508:	ldr	r1, [pc, #636]	; 1e78c <__assert_fail@plt+0xcbe8>
   1e50c:	mov	r0, r6
   1e510:	bl	1170c <strcmp@plt>
   1e514:	cmp	r0, r8
   1e518:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e51c:	ldr	r1, [pc, #620]	; 1e790 <__assert_fail@plt+0xcbec>
   1e520:	mov	r0, r6
   1e524:	bl	1170c <strcmp@plt>
   1e528:	cmp	r0, r8
   1e52c:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e530:	ldr	r1, [pc, #604]	; 1e794 <__assert_fail@plt+0xcbf0>
   1e534:	mov	r0, r6
   1e538:	bl	1170c <strcmp@plt>
   1e53c:	cmp	r0, r8
   1e540:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e544:	ldr	r1, [pc, #588]	; 1e798 <__assert_fail@plt+0xcbf4>
   1e548:	mov	r0, r6
   1e54c:	bl	1170c <strcmp@plt>
   1e550:	cmp	r0, r8
   1e554:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e558:	ldr	r1, [pc, #572]	; 1e79c <__assert_fail@plt+0xcbf8>
   1e55c:	mov	r0, r6
   1e560:	bl	1170c <strcmp@plt>
   1e564:	cmp	r0, r8
   1e568:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e56c:	ldr	r1, [pc, #556]	; 1e7a0 <__assert_fail@plt+0xcbfc>
   1e570:	mov	r0, r6
   1e574:	bl	1170c <strcmp@plt>
   1e578:	cmp	r0, r8
   1e57c:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e580:	ldr	r1, [pc, #540]	; 1e7a4 <__assert_fail@plt+0xcc00>
   1e584:	mov	r0, r6
   1e588:	bl	1170c <strcmp@plt>
   1e58c:	cmp	r0, r8
   1e590:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e594:	ldr	r1, [pc, #524]	; 1e7a8 <__assert_fail@plt+0xcc04>
   1e598:	mov	r0, r6
   1e59c:	bl	1170c <strcmp@plt>
   1e5a0:	cmp	r0, r8
   1e5a4:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e5a8:	ldr	r1, [pc, #508]	; 1e7ac <__assert_fail@plt+0xcc08>
   1e5ac:	mov	r0, r6
   1e5b0:	bl	1170c <strcmp@plt>
   1e5b4:	cmp	r0, r8
   1e5b8:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e5bc:	ldr	r1, [pc, #492]	; 1e7b0 <__assert_fail@plt+0xcc0c>
   1e5c0:	mov	r0, r6
   1e5c4:	bl	1170c <strcmp@plt>
   1e5c8:	cmp	r0, r8
   1e5cc:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e5d0:	ldr	r1, [pc, #476]	; 1e7b4 <__assert_fail@plt+0xcc10>
   1e5d4:	mov	r0, r6
   1e5d8:	bl	1170c <strcmp@plt>
   1e5dc:	cmp	r0, r8
   1e5e0:	beq	1e480 <__assert_fail@plt+0xc8dc>
   1e5e4:	ldr	r1, [pc, #460]	; 1e7b8 <__assert_fail@plt+0xcc14>
   1e5e8:	mov	r0, r6
   1e5ec:	bl	1170c <strcmp@plt>
   1e5f0:	clz	r0, r0
   1e5f4:	lsr	r0, r0, #5
   1e5f8:	b	1e484 <__assert_fail@plt+0xc8e0>
   1e5fc:	ldrb	r3, [r8]
   1e600:	cmp	r3, #47	; 0x2f
   1e604:	beq	1eae4 <__assert_fail@plt+0xcf40>
   1e608:	ldr	r1, [pc, #428]	; 1e7bc <__assert_fail@plt+0xcc18>
   1e60c:	mov	r0, r6
   1e610:	bl	1170c <strcmp@plt>
   1e614:	cmp	r0, #0
   1e618:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e61c:	ldr	r1, [pc, #412]	; 1e7c0 <__assert_fail@plt+0xcc1c>
   1e620:	mov	r0, r6
   1e624:	bl	1170c <strcmp@plt>
   1e628:	cmp	r0, #0
   1e62c:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e630:	ldr	r1, [pc, #396]	; 1e7c4 <__assert_fail@plt+0xcc20>
   1e634:	mov	r0, r6
   1e638:	bl	1170c <strcmp@plt>
   1e63c:	cmp	r0, #0
   1e640:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e644:	ldr	r1, [pc, #380]	; 1e7c8 <__assert_fail@plt+0xcc24>
   1e648:	mov	r0, r6
   1e64c:	bl	1170c <strcmp@plt>
   1e650:	cmp	r0, #0
   1e654:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e658:	ldr	r1, [pc, #364]	; 1e7cc <__assert_fail@plt+0xcc28>
   1e65c:	mov	r0, r6
   1e660:	bl	1170c <strcmp@plt>
   1e664:	cmp	r0, #0
   1e668:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e66c:	ldr	r1, [pc, #348]	; 1e7d0 <__assert_fail@plt+0xcc2c>
   1e670:	mov	r0, r6
   1e674:	bl	1170c <strcmp@plt>
   1e678:	cmp	r0, #0
   1e67c:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e680:	ldr	r1, [pc, #332]	; 1e7d4 <__assert_fail@plt+0xcc30>
   1e684:	mov	r0, r6
   1e688:	bl	1170c <strcmp@plt>
   1e68c:	cmp	r0, #0
   1e690:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e694:	ldr	r1, [pc, #316]	; 1e7d8 <__assert_fail@plt+0xcc34>
   1e698:	mov	r0, r6
   1e69c:	bl	1170c <strcmp@plt>
   1e6a0:	cmp	r0, #0
   1e6a4:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e6a8:	mov	r0, r6
   1e6ac:	ldr	r1, [pc, #296]	; 1e7dc <__assert_fail@plt+0xcc38>
   1e6b0:	bl	1170c <strcmp@plt>
   1e6b4:	cmp	r0, #0
   1e6b8:	beq	1e4ac <__assert_fail@plt+0xc908>
   1e6bc:	mov	r1, r8
   1e6c0:	ldr	r0, [pc, #280]	; 1e7e0 <__assert_fail@plt+0xcc3c>
   1e6c4:	bl	1170c <strcmp@plt>
   1e6c8:	clz	r3, r0
   1e6cc:	lsr	r3, r3, #5
   1e6d0:	b	1e4b0 <__assert_fail@plt+0xc90c>
   1e6d4:	bl	119b8 <__errno_location@plt>
   1e6d8:	mov	r6, r0
   1e6dc:	mov	r0, r7
   1e6e0:	ldr	r7, [r6]
   1e6e4:	bl	16448 <__assert_fail@plt+0x48a4>
   1e6e8:	str	r7, [r6]
   1e6ec:	mov	r3, #0
   1e6f0:	str	r3, [sl]
   1e6f4:	ldr	r4, [sp, #40]	; 0x28
   1e6f8:	cmp	r4, r3
   1e6fc:	beq	1e744 <__assert_fail@plt+0xcba0>
   1e700:	ldr	r0, [r4]
   1e704:	ldr	r5, [r4, #28]
   1e708:	bl	184ec <__assert_fail@plt+0x6948>
   1e70c:	ldr	r0, [r4, #4]
   1e710:	bl	184ec <__assert_fail@plt+0x6948>
   1e714:	ldr	r0, [r4, #8]
   1e718:	bl	184ec <__assert_fail@plt+0x6948>
   1e71c:	ldrb	r3, [r4, #24]
   1e720:	tst	r3, #4
   1e724:	beq	1e730 <__assert_fail@plt+0xcb8c>
   1e728:	ldr	r0, [r4, #12]
   1e72c:	bl	184ec <__assert_fail@plt+0x6948>
   1e730:	mov	r0, r4
   1e734:	bl	184ec <__assert_fail@plt+0x6948>
   1e738:	subs	r4, r5, #0
   1e73c:	str	r5, [sp, #40]	; 0x28
   1e740:	bne	1e700 <__assert_fail@plt+0xcb5c>
   1e744:	mov	r0, #0
   1e748:	str	r7, [r6]
   1e74c:	add	sp, sp, #68	; 0x44
   1e750:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e754:	nop			; (mov r0, r0)
   1e758:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1e75c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1e760:	strdeq	r9, [r3], -ip
   1e764:	andeq	r9, r3, r0, ror #28
   1e768:	andeq	r9, r3, r8, ror lr
   1e76c:	andeq	r9, r3, ip, lsl #29
   1e770:	andeq	pc, pc, r0, lsl #30
   1e774:			; <UNDEFINED> instruction: 0xfffff000
   1e778:	andeq	sl, r3, r0, lsl #5
   1e77c:	andeq	r9, r3, r0, ror pc
   1e780:	andeq	r9, r3, ip, ror pc
   1e784:	muleq	r3, r0, lr
   1e788:	muleq	r3, r8, lr
   1e78c:	andeq	r9, r3, r0, lsr #29
   1e790:	andeq	r9, r3, r8, lsr #29
   1e794:			; <UNDEFINED> instruction: 0x00039eb0
   1e798:			; <UNDEFINED> instruction: 0x00039eb8
   1e79c:	andeq	r9, r3, r0, asr #29
   1e7a0:	andeq	r9, r3, ip, asr #29
   1e7a4:	ldrdeq	r9, [r3], -r4
   1e7a8:	andeq	r9, r3, r0, ror #29
   1e7ac:	andeq	r9, r3, r8, ror #29
   1e7b0:	strdeq	r9, [r3], -r0
   1e7b4:	strdeq	r9, [r3], -r8
   1e7b8:	andeq	r9, r3, r0, lsl #30
   1e7bc:	andeq	r9, r3, r0, lsr #30
   1e7c0:	andeq	r9, r3, r8, lsr #30
   1e7c4:	andeq	r9, r3, ip, lsr #30
   1e7c8:	andeq	r9, r3, r4, lsr pc
   1e7cc:	andeq	r9, r3, r0, asr #30
   1e7d0:	andeq	r9, r3, r8, asr #30
   1e7d4:	andeq	r9, r3, r0, asr pc
   1e7d8:	andeq	r9, r3, r8, asr pc
   1e7dc:	andeq	r9, r3, r0, ror #30
   1e7e0:	andeq	r9, r3, r8, ror #30
   1e7e4:	andeq	r9, r3, r8, lsl #30
   1e7e8:	andeq	r9, r3, r0, lsl pc
   1e7ec:	andeq	r9, r3, r8, lsl pc
   1e7f0:	ldr	r1, [pc, #-128]	; 1e778 <__assert_fail@plt+0xcbd4>
   1e7f4:	ldr	r0, [pc, #-128]	; 1e77c <__assert_fail@plt+0xcbd8>
   1e7f8:	bl	11b14 <setmntent@plt>
   1e7fc:	subs	r5, r0, #0
   1e800:	beq	1eb7c <__assert_fail@plt+0xcfd8>
   1e804:	ldr	r8, [pc, #-140]	; 1e780 <__assert_fail@plt+0xcbdc>
   1e808:	ldr	r7, [pc, #-140]	; 1e784 <__assert_fail@plt+0xcbe0>
   1e80c:	ldr	r9, [pc, #-140]	; 1e788 <__assert_fail@plt+0xcbe4>
   1e810:	add	sl, sp, #40	; 0x28
   1e814:	mov	r0, r5
   1e818:	bl	118c8 <getmntent@plt>
   1e81c:	subs	r6, r0, #0
   1e820:	beq	1eac4 <__assert_fail@plt+0xcf20>
   1e824:	mov	r1, r8
   1e828:	bl	1188c <hasmntopt@plt>
   1e82c:	mov	fp, r0
   1e830:	mov	r0, #32
   1e834:	bl	347e0 <__assert_fail@plt+0x22c3c>
   1e838:	mov	r4, r0
   1e83c:	ldr	r0, [r6]
   1e840:	bl	34df0 <__assert_fail@plt+0x2324c>
   1e844:	str	r0, [r4]
   1e848:	ldr	r0, [r6, #4]
   1e84c:	bl	34df0 <__assert_fail@plt+0x2324c>
   1e850:	mov	r3, #0
   1e854:	stmib	r4, {r0, r3}
   1e858:	ldr	r0, [r6, #8]
   1e85c:	bl	34df0 <__assert_fail@plt+0x2324c>
   1e860:	ldrb	r3, [r4, #24]
   1e864:	mov	r1, r7
   1e868:	orr	r3, r3, #4
   1e86c:	strb	r3, [r4, #24]
   1e870:	str	r0, [r4, #12]
   1e874:	mov	r6, r0
   1e878:	bl	1170c <strcmp@plt>
   1e87c:	cmp	r0, #0
   1e880:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e884:	mov	r1, r9
   1e888:	mov	r0, r6
   1e88c:	bl	1170c <strcmp@plt>
   1e890:	cmp	r0, #0
   1e894:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e898:	ldr	r1, [pc, #-276]	; 1e78c <__assert_fail@plt+0xcbe8>
   1e89c:	mov	r0, r6
   1e8a0:	bl	1170c <strcmp@plt>
   1e8a4:	cmp	r0, #0
   1e8a8:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e8ac:	ldr	r1, [pc, #-292]	; 1e790 <__assert_fail@plt+0xcbec>
   1e8b0:	mov	r0, r6
   1e8b4:	bl	1170c <strcmp@plt>
   1e8b8:	cmp	r0, #0
   1e8bc:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e8c0:	ldr	r1, [pc, #-308]	; 1e794 <__assert_fail@plt+0xcbf0>
   1e8c4:	mov	r0, r6
   1e8c8:	bl	1170c <strcmp@plt>
   1e8cc:	cmp	r0, #0
   1e8d0:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e8d4:	ldr	r1, [pc, #-324]	; 1e798 <__assert_fail@plt+0xcbf4>
   1e8d8:	mov	r0, r6
   1e8dc:	bl	1170c <strcmp@plt>
   1e8e0:	cmp	r0, #0
   1e8e4:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e8e8:	ldr	r1, [pc, #-340]	; 1e79c <__assert_fail@plt+0xcbf8>
   1e8ec:	mov	r0, r6
   1e8f0:	bl	1170c <strcmp@plt>
   1e8f4:	cmp	r0, #0
   1e8f8:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e8fc:	ldr	r1, [pc, #-356]	; 1e7a0 <__assert_fail@plt+0xcbfc>
   1e900:	mov	r0, r6
   1e904:	bl	1170c <strcmp@plt>
   1e908:	cmp	r0, #0
   1e90c:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e910:	ldr	r1, [pc, #-372]	; 1e7a4 <__assert_fail@plt+0xcc00>
   1e914:	mov	r0, r6
   1e918:	bl	1170c <strcmp@plt>
   1e91c:	cmp	r0, #0
   1e920:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e924:	ldr	r1, [pc, #-388]	; 1e7a8 <__assert_fail@plt+0xcc04>
   1e928:	mov	r0, r6
   1e92c:	bl	1170c <strcmp@plt>
   1e930:	cmp	r0, #0
   1e934:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e938:	ldr	r1, [pc, #-404]	; 1e7ac <__assert_fail@plt+0xcc08>
   1e93c:	mov	r0, r6
   1e940:	bl	1170c <strcmp@plt>
   1e944:	cmp	r0, #0
   1e948:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e94c:	ldr	r1, [pc, #-420]	; 1e7b0 <__assert_fail@plt+0xcc0c>
   1e950:	mov	r0, r6
   1e954:	bl	1170c <strcmp@plt>
   1e958:	cmp	r0, #0
   1e95c:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e960:	ldr	r1, [pc, #-436]	; 1e7b4 <__assert_fail@plt+0xcc10>
   1e964:	mov	r0, r6
   1e968:	bl	1170c <strcmp@plt>
   1e96c:	cmp	r0, #0
   1e970:	beq	1e994 <__assert_fail@plt+0xcdf0>
   1e974:	ldr	r1, [pc, #-452]	; 1e7b8 <__assert_fail@plt+0xcc14>
   1e978:	mov	r0, r6
   1e97c:	bl	1170c <strcmp@plt>
   1e980:	cmp	r0, #0
   1e984:	cmpeq	fp, #0
   1e988:	moveq	r0, #1
   1e98c:	movne	r0, #0
   1e990:	b	1e998 <__assert_fail@plt+0xcdf4>
   1e994:	mov	r0, #1
   1e998:	ldrb	r3, [r4, #24]
   1e99c:	ldr	fp, [r4]
   1e9a0:	mov	r1, #58	; 0x3a
   1e9a4:	bic	r3, r3, #1
   1e9a8:	orr	r3, r0, r3
   1e9ac:	strb	r3, [r4, #24]
   1e9b0:	mov	r0, fp
   1e9b4:	bl	11994 <strchr@plt>
   1e9b8:	cmp	r0, #0
   1e9bc:	beq	1e9ec <__assert_fail@plt+0xce48>
   1e9c0:	mov	r1, #1
   1e9c4:	ldrb	r0, [r4, #24]
   1e9c8:	mvn	r2, #0
   1e9cc:	mvn	r3, #0
   1e9d0:	bic	r0, r0, #2
   1e9d4:	orr	r0, r0, r1, lsl #1
   1e9d8:	strb	r0, [r4, #24]
   1e9dc:	strd	r2, [r4, #16]
   1e9e0:	str	r4, [sl]
   1e9e4:	add	sl, r4, #28
   1e9e8:	b	1e814 <__assert_fail@plt+0xcc70>
   1e9ec:	ldrb	r3, [fp]
   1e9f0:	cmp	r3, #47	; 0x2f
   1e9f4:	beq	1eb30 <__assert_fail@plt+0xcf8c>
   1e9f8:	ldr	r1, [pc, #-580]	; 1e7bc <__assert_fail@plt+0xcc18>
   1e9fc:	mov	r0, r6
   1ea00:	bl	1170c <strcmp@plt>
   1ea04:	cmp	r0, #0
   1ea08:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea0c:	ldr	r1, [pc, #-596]	; 1e7c0 <__assert_fail@plt+0xcc1c>
   1ea10:	mov	r0, r6
   1ea14:	bl	1170c <strcmp@plt>
   1ea18:	cmp	r0, #0
   1ea1c:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea20:	ldr	r1, [pc, #-612]	; 1e7c4 <__assert_fail@plt+0xcc20>
   1ea24:	mov	r0, r6
   1ea28:	bl	1170c <strcmp@plt>
   1ea2c:	cmp	r0, #0
   1ea30:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea34:	ldr	r1, [pc, #-628]	; 1e7c8 <__assert_fail@plt+0xcc24>
   1ea38:	mov	r0, r6
   1ea3c:	bl	1170c <strcmp@plt>
   1ea40:	cmp	r0, #0
   1ea44:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea48:	ldr	r1, [pc, #-644]	; 1e7cc <__assert_fail@plt+0xcc28>
   1ea4c:	mov	r0, r6
   1ea50:	bl	1170c <strcmp@plt>
   1ea54:	cmp	r0, #0
   1ea58:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea5c:	ldr	r1, [pc, #-660]	; 1e7d0 <__assert_fail@plt+0xcc2c>
   1ea60:	mov	r0, r6
   1ea64:	bl	1170c <strcmp@plt>
   1ea68:	cmp	r0, #0
   1ea6c:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea70:	ldr	r1, [pc, #-676]	; 1e7d4 <__assert_fail@plt+0xcc30>
   1ea74:	mov	r0, r6
   1ea78:	bl	1170c <strcmp@plt>
   1ea7c:	cmp	r0, #0
   1ea80:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea84:	ldr	r1, [pc, #-692]	; 1e7d8 <__assert_fail@plt+0xcc34>
   1ea88:	mov	r0, r6
   1ea8c:	bl	1170c <strcmp@plt>
   1ea90:	cmp	r0, #0
   1ea94:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1ea98:	mov	r0, r6
   1ea9c:	ldr	r1, [pc, #-712]	; 1e7dc <__assert_fail@plt+0xcc38>
   1eaa0:	bl	1170c <strcmp@plt>
   1eaa4:	cmp	r0, #0
   1eaa8:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1eaac:	mov	r1, fp
   1eab0:	ldr	r0, [pc, #-728]	; 1e7e0 <__assert_fail@plt+0xcc3c>
   1eab4:	bl	1170c <strcmp@plt>
   1eab8:	clz	r1, r0
   1eabc:	lsr	r1, r1, #5
   1eac0:	b	1e9c4 <__assert_fail@plt+0xce20>
   1eac4:	mov	r0, r5
   1eac8:	bl	11a48 <endmntent@plt>
   1eacc:	cmp	r0, #0
   1ead0:	bne	1e4f4 <__assert_fail@plt+0xc950>
   1ead4:	bl	119b8 <__errno_location@plt>
   1ead8:	mov	r6, r0
   1eadc:	ldr	r7, [r0]
   1eae0:	b	1e6ec <__assert_fail@plt+0xcb48>
   1eae4:	ldrb	r3, [r8, #1]
   1eae8:	cmp	r3, #47	; 0x2f
   1eaec:	bne	1e608 <__assert_fail@plt+0xca64>
   1eaf0:	ldr	r1, [pc, #-788]	; 1e7e4 <__assert_fail@plt+0xcc40>
   1eaf4:	mov	r0, r6
   1eaf8:	bl	1170c <strcmp@plt>
   1eafc:	cmp	r0, #0
   1eb00:	beq	1e4ac <__assert_fail@plt+0xc908>
   1eb04:	ldr	r1, [pc, #-804]	; 1e7e8 <__assert_fail@plt+0xcc44>
   1eb08:	mov	r0, r6
   1eb0c:	bl	1170c <strcmp@plt>
   1eb10:	cmp	r0, #0
   1eb14:	beq	1e4ac <__assert_fail@plt+0xc908>
   1eb18:	ldr	r1, [pc, #-820]	; 1e7ec <__assert_fail@plt+0xcc48>
   1eb1c:	mov	r0, r6
   1eb20:	bl	1170c <strcmp@plt>
   1eb24:	cmp	r0, #0
   1eb28:	beq	1e4ac <__assert_fail@plt+0xc908>
   1eb2c:	b	1e608 <__assert_fail@plt+0xca64>
   1eb30:	ldrb	r3, [fp, #1]
   1eb34:	cmp	r3, #47	; 0x2f
   1eb38:	bne	1e9f8 <__assert_fail@plt+0xce54>
   1eb3c:	ldr	r1, [pc, #-864]	; 1e7e4 <__assert_fail@plt+0xcc40>
   1eb40:	mov	r0, r6
   1eb44:	bl	1170c <strcmp@plt>
   1eb48:	cmp	r0, #0
   1eb4c:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1eb50:	ldr	r1, [pc, #-880]	; 1e7e8 <__assert_fail@plt+0xcc44>
   1eb54:	mov	r0, r6
   1eb58:	bl	1170c <strcmp@plt>
   1eb5c:	cmp	r0, #0
   1eb60:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1eb64:	ldr	r1, [pc, #-896]	; 1e7ec <__assert_fail@plt+0xcc48>
   1eb68:	mov	r0, r6
   1eb6c:	bl	1170c <strcmp@plt>
   1eb70:	cmp	r0, #0
   1eb74:	beq	1e9c0 <__assert_fail@plt+0xce1c>
   1eb78:	b	1e9f8 <__assert_fail@plt+0xce54>
   1eb7c:	mov	r0, r5
   1eb80:	b	1e500 <__assert_fail@plt+0xc95c>
   1eb84:	push	{r4, lr}
   1eb88:	mov	r4, r0
   1eb8c:	ldr	r0, [r0]
   1eb90:	bl	184ec <__assert_fail@plt+0x6948>
   1eb94:	ldr	r0, [r4, #4]
   1eb98:	bl	184ec <__assert_fail@plt+0x6948>
   1eb9c:	ldr	r0, [r4, #8]
   1eba0:	bl	184ec <__assert_fail@plt+0x6948>
   1eba4:	ldrb	r3, [r4, #24]
   1eba8:	tst	r3, #4
   1ebac:	beq	1ebb8 <__assert_fail@plt+0xd014>
   1ebb0:	ldr	r0, [r4, #12]
   1ebb4:	bl	184ec <__assert_fail@plt+0x6948>
   1ebb8:	mov	r0, r4
   1ebbc:	pop	{r4, lr}
   1ebc0:	b	184ec <__assert_fail@plt+0x6948>
   1ebc4:	push	{r2, r3}
   1ebc8:	push	{lr}		; (str lr, [sp, #-4]!)
   1ebcc:	sub	sp, sp, #12
   1ebd0:	ldr	r2, [sp, #16]
   1ebd4:	ands	r3, r2, #64	; 0x40
   1ebd8:	addne	r3, sp, #20
   1ebdc:	strne	r3, [sp, #4]
   1ebe0:	ldrne	r3, [sp, #20]
   1ebe4:	bl	119ac <openat64@plt>
   1ebe8:	bl	33d68 <__assert_fail@plt+0x221c4>
   1ebec:	add	sp, sp, #12
   1ebf0:	pop	{lr}		; (ldr lr, [sp], #4)
   1ebf4:	add	sp, sp, #8
   1ebf8:	bx	lr
   1ebfc:	orr	r2, r2, #540672	; 0x84000
   1ec00:	push	{r4, r5, r6, lr}
   1ec04:	orr	r2, r2, #2304	; 0x900
   1ec08:	mov	r6, r3
   1ec0c:	bl	1ebc4 <__assert_fail@plt+0xd020>
   1ec10:	subs	r5, r0, #0
   1ec14:	blt	1ec48 <__assert_fail@plt+0xd0a4>
   1ec18:	bl	11ac0 <fdopendir@plt>
   1ec1c:	subs	r4, r0, #0
   1ec20:	beq	1ec30 <__assert_fail@plt+0xd08c>
   1ec24:	str	r5, [r6]
   1ec28:	mov	r0, r4
   1ec2c:	pop	{r4, r5, r6, pc}
   1ec30:	bl	119b8 <__errno_location@plt>
   1ec34:	mov	r6, r0
   1ec38:	mov	r0, r5
   1ec3c:	ldr	r5, [r6]
   1ec40:	bl	11b80 <close@plt>
   1ec44:	b	1ec24 <__assert_fail@plt+0xd080>
   1ec48:	mov	r4, #0
   1ec4c:	b	1ec28 <__assert_fail@plt+0xd084>
   1ec50:	push	{r4, r5, r6, lr}
   1ec54:	subs	r4, r0, #0
   1ec58:	beq	1eccc <__assert_fail@plt+0xd128>
   1ec5c:	mov	r1, #47	; 0x2f
   1ec60:	bl	11a78 <strrchr@plt>
   1ec64:	subs	r5, r0, #0
   1ec68:	beq	1ecb8 <__assert_fail@plt+0xd114>
   1ec6c:	add	r6, r5, #1
   1ec70:	sub	r3, r6, r4
   1ec74:	cmp	r3, #6
   1ec78:	ble	1ecb8 <__assert_fail@plt+0xd114>
   1ec7c:	mov	r2, #7
   1ec80:	ldr	r1, [pc, #96]	; 1ece8 <__assert_fail@plt+0xd144>
   1ec84:	sub	r0, r5, #6
   1ec88:	bl	11b5c <strncmp@plt>
   1ec8c:	cmp	r0, #0
   1ec90:	bne	1ecb8 <__assert_fail@plt+0xd114>
   1ec94:	mov	r2, #3
   1ec98:	ldr	r1, [pc, #76]	; 1ecec <__assert_fail@plt+0xd148>
   1ec9c:	mov	r0, r6
   1eca0:	bl	11b5c <strncmp@plt>
   1eca4:	cmp	r0, #0
   1eca8:	movne	r4, r6
   1ecac:	ldreq	r3, [pc, #60]	; 1ecf0 <__assert_fail@plt+0xd14c>
   1ecb0:	addeq	r4, r5, #4
   1ecb4:	streq	r4, [r3]
   1ecb8:	ldr	r2, [pc, #52]	; 1ecf4 <__assert_fail@plt+0xd150>
   1ecbc:	ldr	r3, [pc, #52]	; 1ecf8 <__assert_fail@plt+0xd154>
   1ecc0:	str	r4, [r2]
   1ecc4:	str	r4, [r3]
   1ecc8:	pop	{r4, r5, r6, pc}
   1eccc:	ldr	r3, [pc, #40]	; 1ecfc <__assert_fail@plt+0xd158>
   1ecd0:	mov	r2, #55	; 0x37
   1ecd4:	mov	r1, #1
   1ecd8:	ldr	r3, [r3]
   1ecdc:	ldr	r0, [pc, #28]	; 1ed00 <__assert_fail@plt+0xd15c>
   1ece0:	bl	11868 <fwrite@plt>
   1ece4:	bl	11b68 <abort@plt>
   1ece8:			; <UNDEFINED> instruction: 0x00039fbc
   1ecec:	andeq	r9, r3, r4, asr #31
   1ecf0:	andeq	fp, r4, r0, lsr #4
   1ecf4:	andeq	fp, r4, r8, asr #5
   1ecf8:	andeq	fp, r4, r4, lsr #4
   1ecfc:	andeq	fp, r4, r0, lsr r2
   1ed00:	andeq	r9, r3, r4, lsl #31
   1ed04:	push	{r4, r5, r6, lr}
   1ed08:	mov	r4, r0
   1ed0c:	mov	r5, r1
   1ed10:	bl	377c0 <__assert_fail@plt+0x25c1c>
   1ed14:	ldrb	r3, [r0]
   1ed18:	bic	r3, r3, #32
   1ed1c:	cmp	r3, #85	; 0x55
   1ed20:	bne	1ed80 <__assert_fail@plt+0xd1dc>
   1ed24:	ldrb	r3, [r0, #1]
   1ed28:	bic	r3, r3, #32
   1ed2c:	cmp	r3, #84	; 0x54
   1ed30:	bne	1edbc <__assert_fail@plt+0xd218>
   1ed34:	ldrb	r3, [r0, #2]
   1ed38:	bic	r3, r3, #32
   1ed3c:	cmp	r3, #70	; 0x46
   1ed40:	bne	1edbc <__assert_fail@plt+0xd218>
   1ed44:	ldrb	r3, [r0, #3]
   1ed48:	cmp	r3, #45	; 0x2d
   1ed4c:	bne	1edbc <__assert_fail@plt+0xd218>
   1ed50:	ldrb	r3, [r0, #4]
   1ed54:	cmp	r3, #56	; 0x38
   1ed58:	bne	1edbc <__assert_fail@plt+0xd218>
   1ed5c:	ldrb	r3, [r0, #5]
   1ed60:	cmp	r3, #0
   1ed64:	bne	1edbc <__assert_fail@plt+0xd218>
   1ed68:	ldrb	r2, [r4]
   1ed6c:	ldr	r3, [pc, #152]	; 1ee0c <__assert_fail@plt+0xd268>
   1ed70:	ldr	r0, [pc, #152]	; 1ee10 <__assert_fail@plt+0xd26c>
   1ed74:	cmp	r2, #96	; 0x60
   1ed78:	movne	r0, r3
   1ed7c:	pop	{r4, r5, r6, pc}
   1ed80:	cmp	r3, #71	; 0x47
   1ed84:	bne	1edbc <__assert_fail@plt+0xd218>
   1ed88:	ldrb	r3, [r0, #1]
   1ed8c:	bic	r3, r3, #32
   1ed90:	cmp	r3, #66	; 0x42
   1ed94:	bne	1edbc <__assert_fail@plt+0xd218>
   1ed98:	ldrb	r3, [r0, #2]
   1ed9c:	cmp	r3, #49	; 0x31
   1eda0:	bne	1edbc <__assert_fail@plt+0xd218>
   1eda4:	ldrb	r3, [r0, #3]
   1eda8:	cmp	r3, #56	; 0x38
   1edac:	bne	1edbc <__assert_fail@plt+0xd218>
   1edb0:	ldrb	r3, [r0, #4]
   1edb4:	cmp	r3, #48	; 0x30
   1edb8:	beq	1edd0 <__assert_fail@plt+0xd22c>
   1edbc:	ldr	r3, [pc, #80]	; 1ee14 <__assert_fail@plt+0xd270>
   1edc0:	cmp	r5, #9
   1edc4:	ldr	r0, [pc, #76]	; 1ee18 <__assert_fail@plt+0xd274>
   1edc8:	movne	r0, r3
   1edcc:	pop	{r4, r5, r6, pc}
   1edd0:	ldrb	r3, [r0, #5]
   1edd4:	cmp	r3, #51	; 0x33
   1edd8:	bne	1edbc <__assert_fail@plt+0xd218>
   1eddc:	ldrb	r3, [r0, #6]
   1ede0:	cmp	r3, #48	; 0x30
   1ede4:	bne	1edbc <__assert_fail@plt+0xd218>
   1ede8:	ldrb	r3, [r0, #7]
   1edec:	cmp	r3, #0
   1edf0:	bne	1edbc <__assert_fail@plt+0xd218>
   1edf4:	ldrb	r2, [r4]
   1edf8:	ldr	r3, [pc, #28]	; 1ee1c <__assert_fail@plt+0xd278>
   1edfc:	ldr	r0, [pc, #28]	; 1ee20 <__assert_fail@plt+0xd27c>
   1ee00:	cmp	r2, #96	; 0x60
   1ee04:	movne	r0, r3
   1ee08:	pop	{r4, r5, r6, pc}
   1ee0c:	andeq	sl, r3, r0, lsr #32
   1ee10:	andeq	sl, r3, ip, lsl r0
   1ee14:	andeq	r9, r3, r0, asr r6
   1ee18:	andeq	sl, r3, ip, lsr #32
   1ee1c:	andeq	sl, r3, r8, lsr #32
   1ee20:	andeq	sl, r3, r4, lsr #32
   1ee24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ee28:	sub	sp, sp, #140	; 0x8c
   1ee2c:	mov	r9, r1
   1ee30:	str	r3, [sp, #24]
   1ee34:	mov	r3, #1
   1ee38:	mov	sl, r0
   1ee3c:	str	r2, [sp, #44]	; 0x2c
   1ee40:	str	r3, [sp, #28]
   1ee44:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1ee48:	ldr	r3, [sp, #180]	; 0xb4
   1ee4c:	mov	fp, r9
   1ee50:	mov	r9, sl
   1ee54:	lsr	r3, r3, #1
   1ee58:	and	r3, r3, #1
   1ee5c:	str	r3, [sp, #40]	; 0x28
   1ee60:	ldr	r3, [sp, #180]	; 0xb4
   1ee64:	mov	r2, #0
   1ee68:	and	r3, r3, #4
   1ee6c:	str	r3, [sp, #100]	; 0x64
   1ee70:	ldr	r3, [sp, #180]	; 0xb4
   1ee74:	str	r2, [sp, #76]	; 0x4c
   1ee78:	and	r3, r3, #1
   1ee7c:	str	r3, [sp, #96]	; 0x60
   1ee80:	str	r2, [sp, #36]	; 0x24
   1ee84:	str	r2, [sp, #56]	; 0x38
   1ee88:	str	r2, [sp, #68]	; 0x44
   1ee8c:	str	r2, [sp, #72]	; 0x48
   1ee90:	str	r2, [sp, #84]	; 0x54
   1ee94:	str	r0, [sp, #80]	; 0x50
   1ee98:	ldr	r3, [sp, #176]	; 0xb0
   1ee9c:	cmp	r3, #10
   1eea0:	ldrls	pc, [pc, r3, lsl #2]
   1eea4:	b	2007c <__assert_fail@plt+0xe4d8>
   1eea8:	ldrdeq	lr, [r1], -r4
   1eeac:	strdeq	pc, [r1], -r4
   1eeb0:	andeq	pc, r1, ip, asr #6
   1eeb4:	andeq	pc, r1, r8, lsr #4
   1eeb8:	andeq	pc, r1, r0, lsr #7
   1eebc:	andeq	pc, r1, r0, lsl #7
   1eec0:	andeq	pc, r1, r8, asr #4
   1eec4:	andeq	pc, r1, ip, ror #4
   1eec8:	muleq	r1, r4, r2
   1eecc:	muleq	r1, r4, r2
   1eed0:	muleq	r1, r4, r2
   1eed4:	mov	r3, #0
   1eed8:	ldr	r1, [sp, #56]	; 0x38
   1eedc:	ldr	r2, [sp, #176]	; 0xb0
   1eee0:	ldr	lr, [sp, #176]	; 0xb0
   1eee4:	mov	r8, r3
   1eee8:	mov	ip, r3
   1eeec:	str	r3, [sp, #40]	; 0x28
   1eef0:	mov	r3, r1
   1eef4:	cmp	r2, #2
   1eef8:	moveq	r3, #0
   1eefc:	andne	r3, r3, #1
   1ef00:	mov	r0, r3
   1ef04:	str	r3, [sp, #92]	; 0x5c
   1ef08:	ldr	r3, [sp, #68]	; 0x44
   1ef0c:	sub	lr, lr, #2
   1ef10:	adds	r2, r3, #0
   1ef14:	movne	r2, #1
   1ef18:	and	r3, r1, ip
   1ef1c:	and	r3, r2, r3
   1ef20:	clz	lr, lr
   1ef24:	str	r3, [sp, #88]	; 0x58
   1ef28:	lsr	lr, lr, #5
   1ef2c:	mov	r3, ip
   1ef30:	and	r3, r3, lr
   1ef34:	mov	sl, #0
   1ef38:	and	r0, r2, r0
   1ef3c:	str	r3, [sp, #64]	; 0x40
   1ef40:	eor	r3, r1, #1
   1ef44:	str	lr, [sp, #52]	; 0x34
   1ef48:	str	r0, [sp, #48]	; 0x30
   1ef4c:	str	r3, [sp, #60]	; 0x3c
   1ef50:	ldr	r3, [sp, #24]
   1ef54:	cmn	r3, #1
   1ef58:	beq	1f488 <__assert_fail@plt+0xd8e4>
   1ef5c:	subs	r7, r3, sl
   1ef60:	movne	r7, #1
   1ef64:	cmp	r7, #0
   1ef68:	beq	1f4a0 <__assert_fail@plt+0xd8fc>
   1ef6c:	ldr	r3, [sp, #48]	; 0x30
   1ef70:	cmp	r3, #0
   1ef74:	beq	1f80c <__assert_fail@plt+0xdc68>
   1ef78:	ldr	r2, [sp, #68]	; 0x44
   1ef7c:	ldr	r1, [sp, #24]
   1ef80:	cmp	r2, #1
   1ef84:	mov	r3, r2
   1ef88:	movls	r3, #0
   1ef8c:	movhi	r3, #1
   1ef90:	cmn	r1, #1
   1ef94:	movne	r3, #0
   1ef98:	cmp	r3, #0
   1ef9c:	add	r4, sl, r2
   1efa0:	beq	1efb0 <__assert_fail@plt+0xd40c>
   1efa4:	ldr	r0, [sp, #44]	; 0x2c
   1efa8:	bl	11988 <strlen@plt>
   1efac:	str	r0, [sp, #24]
   1efb0:	ldr	r3, [sp, #24]
   1efb4:	cmp	r3, r4
   1efb8:	ldr	r3, [sp, #44]	; 0x2c
   1efbc:	add	r5, r3, sl
   1efc0:	bcc	1f814 <__assert_fail@plt+0xdc70>
   1efc4:	mov	r0, r5
   1efc8:	ldr	r2, [sp, #68]	; 0x44
   1efcc:	ldr	r1, [sp, #72]	; 0x48
   1efd0:	bl	117c0 <memcmp@plt>
   1efd4:	cmp	r0, #0
   1efd8:	bne	1f814 <__assert_fail@plt+0xdc70>
   1efdc:	ldr	r3, [sp, #40]	; 0x28
   1efe0:	cmp	r3, #0
   1efe4:	bne	201d0 <__assert_fail@plt+0xe62c>
   1efe8:	ldrb	r4, [r5]
   1efec:	cmp	r4, #126	; 0x7e
   1eff0:	ldrls	pc, [pc, r4, lsl #2]
   1eff4:	b	2010c <__assert_fail@plt+0xe568>
   1eff8:	andeq	pc, r1, ip, asr #13
   1effc:	andeq	r0, r2, ip, lsl #2
   1f000:	andeq	r0, r2, ip, lsl #2
   1f004:	andeq	r0, r2, ip, lsl #2
   1f008:	andeq	r0, r2, ip, lsl #2
   1f00c:	andeq	r0, r2, ip, lsl #2
   1f010:	andeq	r0, r2, ip, lsl #2
   1f014:			; <UNDEFINED> instruction: 0x0001f6b8
   1f018:	andeq	pc, r1, r4, lsr #13
   1f01c:	andeq	pc, r1, r0, lsl #13
   1f020:	andeq	pc, r1, r0, ror #12
   1f024:	muleq	r1, r0, r6
   1f028:	andeq	pc, r1, r8, asr #11
   1f02c:	strdeq	pc, [r1], -ip
   1f030:	andeq	r0, r2, ip, lsl #2
   1f034:	andeq	r0, r2, ip, lsl #2
   1f038:	andeq	r0, r2, ip, lsl #2
   1f03c:	andeq	r0, r2, ip, lsl #2
   1f040:	andeq	r0, r2, ip, lsl #2
   1f044:	andeq	r0, r2, ip, lsl #2
   1f048:	andeq	r0, r2, ip, lsl #2
   1f04c:	andeq	r0, r2, ip, lsl #2
   1f050:	andeq	r0, r2, ip, lsl #2
   1f054:	andeq	r0, r2, ip, lsl #2
   1f058:	andeq	r0, r2, ip, lsl #2
   1f05c:	andeq	r0, r2, ip, lsl #2
   1f060:	andeq	r0, r2, ip, lsl #2
   1f064:	andeq	r0, r2, ip, lsl #2
   1f068:	andeq	r0, r2, ip, lsl #2
   1f06c:	andeq	r0, r2, ip, lsl #2
   1f070:	andeq	r0, r2, ip, lsl #2
   1f074:	andeq	r0, r2, ip, lsl #2
   1f078:	andeq	pc, r1, ip, ror #15
   1f07c:	andeq	pc, r1, ip, asr #15
   1f080:	andeq	pc, r1, ip, asr #15
   1f084:	andeq	pc, r1, ip, lsr #15
   1f088:	andeq	pc, r1, ip, asr #15
   1f08c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f090:	andeq	pc, r1, ip, asr #15
   1f094:	muleq	r1, r4, r5
   1f098:	andeq	pc, r1, ip, asr #15
   1f09c:	andeq	pc, r1, ip, asr #15
   1f0a0:	andeq	pc, r1, ip, asr #15
   1f0a4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0a8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0ac:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0b0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0b4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0b8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0bc:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0c0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0c4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0c8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0cc:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0d0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0d4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0d8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0dc:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0e0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f0e4:	andeq	pc, r1, ip, asr #15
   1f0e8:	andeq	pc, r1, ip, asr #15
   1f0ec:	andeq	pc, r1, ip, asr #15
   1f0f0:	andeq	pc, r1, ip, asr #15
   1f0f4:	andeq	pc, r1, r4, asr #10
   1f0f8:	andeq	r0, r2, ip, lsl #2
   1f0fc:			; <UNDEFINED> instruction: 0x0001f5b8
   1f100:			; <UNDEFINED> instruction: 0x0001f5b8
   1f104:			; <UNDEFINED> instruction: 0x0001f5b8
   1f108:			; <UNDEFINED> instruction: 0x0001f5b8
   1f10c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f110:			; <UNDEFINED> instruction: 0x0001f5b8
   1f114:			; <UNDEFINED> instruction: 0x0001f5b8
   1f118:			; <UNDEFINED> instruction: 0x0001f5b8
   1f11c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f120:			; <UNDEFINED> instruction: 0x0001f5b8
   1f124:			; <UNDEFINED> instruction: 0x0001f5b8
   1f128:			; <UNDEFINED> instruction: 0x0001f5b8
   1f12c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f130:			; <UNDEFINED> instruction: 0x0001f5b8
   1f134:			; <UNDEFINED> instruction: 0x0001f5b8
   1f138:			; <UNDEFINED> instruction: 0x0001f5b8
   1f13c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f140:			; <UNDEFINED> instruction: 0x0001f5b8
   1f144:			; <UNDEFINED> instruction: 0x0001f5b8
   1f148:			; <UNDEFINED> instruction: 0x0001f5b8
   1f14c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f150:			; <UNDEFINED> instruction: 0x0001f5b8
   1f154:			; <UNDEFINED> instruction: 0x0001f5b8
   1f158:			; <UNDEFINED> instruction: 0x0001f5b8
   1f15c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f160:			; <UNDEFINED> instruction: 0x0001f5b8
   1f164:	andeq	pc, r1, ip, asr #15
   1f168:	andeq	pc, r1, r0, lsl r5	; <UNPREDICTABLE>
   1f16c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f170:	andeq	pc, r1, ip, asr #15
   1f174:			; <UNDEFINED> instruction: 0x0001f5b8
   1f178:	andeq	pc, r1, ip, asr #15
   1f17c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f180:			; <UNDEFINED> instruction: 0x0001f5b8
   1f184:			; <UNDEFINED> instruction: 0x0001f5b8
   1f188:			; <UNDEFINED> instruction: 0x0001f5b8
   1f18c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f190:			; <UNDEFINED> instruction: 0x0001f5b8
   1f194:			; <UNDEFINED> instruction: 0x0001f5b8
   1f198:			; <UNDEFINED> instruction: 0x0001f5b8
   1f19c:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1a0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1a4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1a8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1ac:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1b0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1b4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1b8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1bc:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1c0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1c4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1c8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1cc:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1d0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1d4:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1d8:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1dc:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1e0:			; <UNDEFINED> instruction: 0x0001f5b8
   1f1e4:	andeq	pc, r1, r8, asr #7
   1f1e8:	andeq	pc, r1, ip, asr #15
   1f1ec:	andeq	pc, r1, r8, asr #7
   1f1f0:	andeq	pc, r1, ip, lsr #15
   1f1f4:	mov	r3, #1
   1f1f8:	str	r3, [sp, #40]	; 0x28
   1f1fc:	str	r3, [sp, #68]	; 0x44
   1f200:	mov	r8, #0
   1f204:	ldr	r3, [pc, #4056]	; 201e4 <__assert_fail@plt+0xe640>
   1f208:	str	r3, [sp, #72]	; 0x48
   1f20c:	mov	r3, #2
   1f210:	str	r3, [sp, #176]	; 0xb0
   1f214:	ldr	r1, [sp, #56]	; 0x38
   1f218:	mov	r2, r3
   1f21c:	ldr	ip, [sp, #40]	; 0x28
   1f220:	mov	lr, r3
   1f224:	b	1eef0 <__assert_fail@plt+0xd34c>
   1f228:	mov	r3, #1
   1f22c:	str	r3, [sp, #56]	; 0x38
   1f230:	str	r3, [sp, #68]	; 0x44
   1f234:	str	r3, [sp, #40]	; 0x28
   1f238:	ldr	r3, [pc, #4004]	; 201e4 <__assert_fail@plt+0xe640>
   1f23c:	mov	r8, #0
   1f240:	str	r3, [sp, #72]	; 0x48
   1f244:	b	1f20c <__assert_fail@plt+0xd668>
   1f248:	mov	r3, #1
   1f24c:	str	r3, [sp, #56]	; 0x38
   1f250:	str	r3, [sp, #68]	; 0x44
   1f254:	str	r3, [sp, #40]	; 0x28
   1f258:	ldr	r3, [pc, #3976]	; 201e8 <__assert_fail@plt+0xe644>
   1f25c:	mov	r8, #0
   1f260:	str	r3, [sp, #72]	; 0x48
   1f264:	mov	r3, #5
   1f268:	b	1f210 <__assert_fail@plt+0xd66c>
   1f26c:	mov	r3, #0
   1f270:	str	r3, [sp, #40]	; 0x28
   1f274:	mov	r3, #1
   1f278:	str	r3, [sp, #56]	; 0x38
   1f27c:	mov	r8, #0
   1f280:	mov	r1, r3
   1f284:	ldr	r2, [sp, #176]	; 0xb0
   1f288:	ldr	ip, [sp, #40]	; 0x28
   1f28c:	ldr	lr, [sp, #176]	; 0xb0
   1f290:	b	1eef0 <__assert_fail@plt+0xd34c>
   1f294:	ldr	r3, [sp, #176]	; 0xb0
   1f298:	cmp	r3, #10
   1f29c:	beq	1f2e0 <__assert_fail@plt+0xd73c>
   1f2a0:	mov	r2, #5
   1f2a4:	ldr	r1, [pc, #3904]	; 201ec <__assert_fail@plt+0xe648>
   1f2a8:	mov	r0, #0
   1f2ac:	bl	117d8 <dcgettext@plt>
   1f2b0:	ldr	r2, [pc, #3892]	; 201ec <__assert_fail@plt+0xe648>
   1f2b4:	cmp	r0, r2
   1f2b8:	str	r0, [sp, #188]	; 0xbc
   1f2bc:	beq	20378 <__assert_fail@plt+0xe7d4>
   1f2c0:	mov	r2, #5
   1f2c4:	ldr	r1, [pc, #3864]	; 201e4 <__assert_fail@plt+0xe640>
   1f2c8:	mov	r0, #0
   1f2cc:	bl	117d8 <dcgettext@plt>
   1f2d0:	ldr	r2, [pc, #3852]	; 201e4 <__assert_fail@plt+0xe640>
   1f2d4:	cmp	r0, r2
   1f2d8:	str	r0, [sp, #192]	; 0xc0
   1f2dc:	beq	20368 <__assert_fail@plt+0xe7c4>
   1f2e0:	ldr	r8, [sp, #40]	; 0x28
   1f2e4:	cmp	r8, #0
   1f2e8:	movne	r8, #0
   1f2ec:	bne	1f31c <__assert_fail@plt+0xd778>
   1f2f0:	ldr	r3, [sp, #188]	; 0xbc
   1f2f4:	ldrb	r3, [r3]
   1f2f8:	cmp	r3, #0
   1f2fc:	beq	1f31c <__assert_fail@plt+0xd778>
   1f300:	ldr	r2, [sp, #188]	; 0xbc
   1f304:	cmp	fp, r8
   1f308:	strbhi	r3, [r9, r8]
   1f30c:	ldrb	r3, [r2, #1]!
   1f310:	add	r8, r8, #1
   1f314:	cmp	r3, #0
   1f318:	bne	1f304 <__assert_fail@plt+0xd760>
   1f31c:	ldr	r0, [sp, #192]	; 0xc0
   1f320:	bl	11988 <strlen@plt>
   1f324:	ldr	r3, [sp, #192]	; 0xc0
   1f328:	ldr	r2, [sp, #176]	; 0xb0
   1f32c:	str	r3, [sp, #72]	; 0x48
   1f330:	mov	r3, #1
   1f334:	str	r3, [sp, #56]	; 0x38
   1f338:	mov	r1, r3
   1f33c:	ldr	ip, [sp, #40]	; 0x28
   1f340:	ldr	lr, [sp, #176]	; 0xb0
   1f344:	str	r0, [sp, #68]	; 0x44
   1f348:	b	1eef0 <__assert_fail@plt+0xd34c>
   1f34c:	ldr	r3, [sp, #40]	; 0x28
   1f350:	cmp	r3, #0
   1f354:	beq	1fffc <__assert_fail@plt+0xe458>
   1f358:	mov	r3, #1
   1f35c:	str	r3, [sp, #68]	; 0x44
   1f360:	ldr	r3, [pc, #3708]	; 201e4 <__assert_fail@plt+0xe640>
   1f364:	str	r3, [sp, #72]	; 0x48
   1f368:	mov	r8, #0
   1f36c:	ldr	r1, [sp, #56]	; 0x38
   1f370:	ldr	r2, [sp, #176]	; 0xb0
   1f374:	ldr	ip, [sp, #40]	; 0x28
   1f378:	ldr	lr, [sp, #176]	; 0xb0
   1f37c:	b	1eef0 <__assert_fail@plt+0xd34c>
   1f380:	ldr	r3, [sp, #40]	; 0x28
   1f384:	cmp	r3, #0
   1f388:	beq	20080 <__assert_fail@plt+0xe4dc>
   1f38c:	str	r3, [sp, #56]	; 0x38
   1f390:	mov	r3, #1
   1f394:	str	r3, [sp, #68]	; 0x44
   1f398:	ldr	r3, [pc, #3656]	; 201e8 <__assert_fail@plt+0xe644>
   1f39c:	b	1f364 <__assert_fail@plt+0xd7c0>
   1f3a0:	ldr	r3, [sp, #40]	; 0x28
   1f3a4:	cmp	r3, #0
   1f3a8:	mov	r3, #1
   1f3ac:	streq	r3, [sp, #56]	; 0x38
   1f3b0:	beq	1fffc <__assert_fail@plt+0xe458>
   1f3b4:	str	r3, [sp, #68]	; 0x44
   1f3b8:	ldr	r3, [pc, #3620]	; 201e4 <__assert_fail@plt+0xe640>
   1f3bc:	mov	r8, #0
   1f3c0:	str	r3, [sp, #72]	; 0x48
   1f3c4:	b	1f20c <__assert_fail@plt+0xd668>
   1f3c8:	ldr	r3, [sp, #24]
   1f3cc:	ldr	r6, [sp, #48]	; 0x30
   1f3d0:	cmn	r3, #1
   1f3d4:	beq	1fa30 <__assert_fail@plt+0xde8c>
   1f3d8:	subs	r3, r3, #1
   1f3dc:	movne	r3, #1
   1f3e0:	cmp	r3, #0
   1f3e4:	beq	1f7b0 <__assert_fail@plt+0xdc0c>
   1f3e8:	ldr	r1, [sp, #52]	; 0x34
   1f3ec:	mov	r7, r3
   1f3f0:	mov	r3, #0
   1f3f4:	str	r3, [sp, #32]
   1f3f8:	ldr	r3, [sp, #60]	; 0x3c
   1f3fc:	orr	r2, r1, r3
   1f400:	ldr	r3, [sp, #40]	; 0x28
   1f404:	eor	r2, r2, #1
   1f408:	orr	r2, r3, r2
   1f40c:	tst	r2, #255	; 0xff
   1f410:	bne	1fd34 <__assert_fail@plt+0xe190>
   1f414:	cmp	r6, #0
   1f418:	bne	1f5f4 <__assert_fail@plt+0xda50>
   1f41c:	ldr	r3, [sp, #36]	; 0x24
   1f420:	add	sl, sl, #1
   1f424:	and	r3, r3, r7
   1f428:	uxtb	r6, r3
   1f42c:	cmp	r6, #0
   1f430:	beq	1f45c <__assert_fail@plt+0xd8b8>
   1f434:	cmp	fp, r8
   1f438:	movhi	r3, #39	; 0x27
   1f43c:	strbhi	r3, [r9, r8]
   1f440:	add	r3, r8, #1
   1f444:	cmp	fp, r3
   1f448:	movhi	r2, #39	; 0x27
   1f44c:	add	r8, r8, #2
   1f450:	strbhi	r2, [r9, r3]
   1f454:	mov	r3, #0
   1f458:	str	r3, [sp, #36]	; 0x24
   1f45c:	ldr	r2, [sp, #32]
   1f460:	cmp	r8, fp
   1f464:	ldr	r3, [sp, #28]
   1f468:	strbcc	r4, [r9, r8]
   1f46c:	cmp	r2, #0
   1f470:	moveq	r3, #0
   1f474:	str	r3, [sp, #28]
   1f478:	ldr	r3, [sp, #24]
   1f47c:	add	r8, r8, #1
   1f480:	cmn	r3, #1
   1f484:	bne	1ef5c <__assert_fail@plt+0xd3b8>
   1f488:	ldr	r3, [sp, #44]	; 0x2c
   1f48c:	ldrb	r3, [r3, sl]
   1f490:	adds	r7, r3, #0
   1f494:	movne	r7, #1
   1f498:	cmp	r7, #0
   1f49c:	bne	1ef6c <__assert_fail@plt+0xd3c8>
   1f4a0:	ldr	r3, [sp, #64]	; 0x40
   1f4a4:	cmp	r8, #0
   1f4a8:	movne	r3, #0
   1f4ac:	andeq	r3, r3, #1
   1f4b0:	cmp	r3, #0
   1f4b4:	str	r3, [sp, #64]	; 0x40
   1f4b8:	bne	1ff5c <__assert_fail@plt+0xe3b8>
   1f4bc:	ldr	r3, [sp, #40]	; 0x28
   1f4c0:	ldr	r2, [sp, #52]	; 0x34
   1f4c4:	eor	r3, r3, #1
   1f4c8:	ands	r2, r2, r3
   1f4cc:	beq	20388 <__assert_fail@plt+0xe7e4>
   1f4d0:	ldr	r3, [sp, #76]	; 0x4c
   1f4d4:	cmp	r3, #0
   1f4d8:	beq	20358 <__assert_fail@plt+0xe7b4>
   1f4dc:	ldr	r3, [sp, #28]
   1f4e0:	cmp	r3, #0
   1f4e4:	bne	20314 <__assert_fail@plt+0xe770>
   1f4e8:	ldr	r2, [sp, #84]	; 0x54
   1f4ec:	clz	r3, fp
   1f4f0:	cmp	r2, #0
   1f4f4:	lsr	r3, r3, #5
   1f4f8:	moveq	r3, #0
   1f4fc:	cmp	r3, #0
   1f500:	beq	202b4 <__assert_fail@plt+0xe710>
   1f504:	mov	fp, r2
   1f508:	str	r3, [sp, #76]	; 0x4c
   1f50c:	b	1ee98 <__assert_fail@plt+0xd2f4>
   1f510:	ldr	r3, [sp, #176]	; 0xb0
   1f514:	ldr	r6, [sp, #48]	; 0x30
   1f518:	cmp	r3, #2
   1f51c:	beq	1fa54 <__assert_fail@plt+0xdeb0>
   1f520:	ldr	r3, [sp, #88]	; 0x58
   1f524:	cmp	r3, #0
   1f528:	beq	1ffd8 <__assert_fail@plt+0xe434>
   1f52c:	mov	r3, #0
   1f530:	add	sl, sl, #1
   1f534:	ldr	r6, [sp, #36]	; 0x24
   1f538:	str	r3, [sp, #32]
   1f53c:	mov	r4, #92	; 0x5c
   1f540:	b	1f42c <__assert_fail@plt+0xd888>
   1f544:	ldr	r3, [sp, #176]	; 0xb0
   1f548:	ldr	r6, [sp, #48]	; 0x30
   1f54c:	cmp	r3, #2
   1f550:	beq	1fa84 <__assert_fail@plt+0xdee0>
   1f554:	cmp	r3, #5
   1f558:	bne	1ffe8 <__assert_fail@plt+0xe444>
   1f55c:	ldr	r3, [sp, #100]	; 0x64
   1f560:	cmp	r3, #0
   1f564:	beq	2004c <__assert_fail@plt+0xe4a8>
   1f568:	ldr	r2, [sp, #24]
   1f56c:	add	r3, sl, #2
   1f570:	cmp	r2, r3
   1f574:	bls	1f584 <__assert_fail@plt+0xd9e0>
   1f578:	ldrb	r4, [r5, #1]
   1f57c:	cmp	r4, #63	; 0x3f
   1f580:	beq	201f4 <__assert_fail@plt+0xe650>
   1f584:	mov	r1, #0
   1f588:	str	r1, [sp, #32]
   1f58c:	mov	r4, #63	; 0x3f
   1f590:	b	1f3f8 <__assert_fail@plt+0xd854>
   1f594:	ldr	r3, [sp, #176]	; 0xb0
   1f598:	ldr	r6, [sp, #48]	; 0x30
   1f59c:	cmp	r3, #2
   1f5a0:	beq	1fab0 <__assert_fail@plt+0xdf0c>
   1f5a4:	str	r7, [sp, #32]
   1f5a8:	str	r7, [sp, #76]	; 0x4c
   1f5ac:	mov	r1, #0
   1f5b0:	mov	r4, #39	; 0x27
   1f5b4:	b	1f3f8 <__assert_fail@plt+0xd854>
   1f5b8:	ldr	r6, [sp, #48]	; 0x30
   1f5bc:	ldr	r1, [sp, #52]	; 0x34
   1f5c0:	str	r7, [sp, #32]
   1f5c4:	b	1f3f8 <__assert_fail@plt+0xd854>
   1f5c8:	ldr	r6, [sp, #48]	; 0x30
   1f5cc:	ldr	r1, [sp, #52]	; 0x34
   1f5d0:	mov	r4, #12
   1f5d4:	mov	r3, #102	; 0x66
   1f5d8:	ldr	r2, [sp, #56]	; 0x38
   1f5dc:	cmp	r2, #0
   1f5e0:	streq	r2, [sp, #32]
   1f5e4:	beq	1f3f8 <__assert_fail@plt+0xd854>
   1f5e8:	mov	r4, r3
   1f5ec:	mov	r3, #0
   1f5f0:	str	r3, [sp, #32]
   1f5f4:	ldr	r3, [sp, #40]	; 0x28
   1f5f8:	cmp	r3, #0
   1f5fc:	bne	1fd6c <__assert_fail@plt+0xe1c8>
   1f600:	ldr	r3, [sp, #36]	; 0x24
   1f604:	eor	r3, r3, #1
   1f608:	and	r3, r3, r1
   1f60c:	ands	r3, r3, #255	; 0xff
   1f610:	beq	1f648 <__assert_fail@plt+0xdaa4>
   1f614:	cmp	fp, r8
   1f618:	movhi	r2, #39	; 0x27
   1f61c:	strbhi	r2, [r9, r8]
   1f620:	add	r2, r8, #1
   1f624:	cmp	fp, r2
   1f628:	movhi	r1, #36	; 0x24
   1f62c:	strbhi	r1, [r9, r2]
   1f630:	add	r2, r8, #2
   1f634:	cmp	fp, r2
   1f638:	add	r8, r8, #3
   1f63c:	movhi	r1, #39	; 0x27
   1f640:	strbhi	r1, [r9, r2]
   1f644:	str	r3, [sp, #36]	; 0x24
   1f648:	cmp	fp, r8
   1f64c:	movhi	r3, #92	; 0x5c
   1f650:	strbhi	r3, [r9, r8]
   1f654:	add	sl, sl, #1
   1f658:	add	r8, r8, #1
   1f65c:	b	1f45c <__assert_fail@plt+0xd8b8>
   1f660:	ldr	r6, [sp, #48]	; 0x30
   1f664:	mov	r4, #10
   1f668:	mov	r3, #110	; 0x6e
   1f66c:	ldr	r2, [sp, #64]	; 0x40
   1f670:	cmp	r2, #0
   1f674:	bne	200f4 <__assert_fail@plt+0xe550>
   1f678:	ldr	r1, [sp, #52]	; 0x34
   1f67c:	b	1f5d8 <__assert_fail@plt+0xda34>
   1f680:	ldr	r6, [sp, #48]	; 0x30
   1f684:	ldr	r1, [sp, #52]	; 0x34
   1f688:	mov	r3, #116	; 0x74
   1f68c:	b	1f5d8 <__assert_fail@plt+0xda34>
   1f690:	ldr	r6, [sp, #48]	; 0x30
   1f694:	ldr	r1, [sp, #52]	; 0x34
   1f698:	mov	r4, #11
   1f69c:	mov	r3, #118	; 0x76
   1f6a0:	b	1f5d8 <__assert_fail@plt+0xda34>
   1f6a4:	ldr	r6, [sp, #48]	; 0x30
   1f6a8:	ldr	r1, [sp, #52]	; 0x34
   1f6ac:	mov	r4, #8
   1f6b0:	mov	r3, #98	; 0x62
   1f6b4:	b	1f5d8 <__assert_fail@plt+0xda34>
   1f6b8:	ldr	r6, [sp, #48]	; 0x30
   1f6bc:	ldr	r1, [sp, #52]	; 0x34
   1f6c0:	mov	r4, #7
   1f6c4:	mov	r3, #97	; 0x61
   1f6c8:	b	1f5d8 <__assert_fail@plt+0xda34>
   1f6cc:	ldr	r3, [sp, #56]	; 0x38
   1f6d0:	ldr	r6, [sp, #48]	; 0x30
   1f6d4:	cmp	r3, #0
   1f6d8:	beq	1fb9c <__assert_fail@plt+0xdff8>
   1f6dc:	ldr	r3, [sp, #40]	; 0x28
   1f6e0:	cmp	r3, #0
   1f6e4:	bne	201d0 <__assert_fail@plt+0xe62c>
   1f6e8:	ldr	r3, [sp, #36]	; 0x24
   1f6ec:	ldr	r2, [sp, #52]	; 0x34
   1f6f0:	eor	r3, r3, #1
   1f6f4:	ands	r3, r2, r3
   1f6f8:	moveq	r2, r8
   1f6fc:	beq	1f734 <__assert_fail@plt+0xdb90>
   1f700:	cmp	fp, r8
   1f704:	movhi	r2, #39	; 0x27
   1f708:	strbhi	r2, [r9, r8]
   1f70c:	add	r2, r8, #1
   1f710:	cmp	fp, r2
   1f714:	movhi	r1, #36	; 0x24
   1f718:	strbhi	r1, [r9, r2]
   1f71c:	add	r2, r8, #2
   1f720:	cmp	fp, r2
   1f724:	movhi	r1, #39	; 0x27
   1f728:	strbhi	r1, [r9, r2]
   1f72c:	add	r2, r8, #3
   1f730:	str	r3, [sp, #36]	; 0x24
   1f734:	cmp	fp, r2
   1f738:	movhi	r3, #92	; 0x5c
   1f73c:	strbhi	r3, [r9, r2]
   1f740:	ldr	r3, [sp, #92]	; 0x5c
   1f744:	add	r8, r2, #1
   1f748:	cmp	r3, #0
   1f74c:	beq	200d0 <__assert_fail@plt+0xe52c>
   1f750:	ldr	r1, [sp, #24]
   1f754:	add	r3, sl, #1
   1f758:	cmp	r1, r3
   1f75c:	bls	1f794 <__assert_fail@plt+0xdbf0>
   1f760:	ldr	r1, [sp, #44]	; 0x2c
   1f764:	ldrb	r3, [r1, r3]
   1f768:	sub	r3, r3, #48	; 0x30
   1f76c:	cmp	r3, #9
   1f770:	bhi	1f794 <__assert_fail@plt+0xdbf0>
   1f774:	cmp	fp, r8
   1f778:	movhi	r3, #48	; 0x30
   1f77c:	strbhi	r3, [r9, r8]
   1f780:	add	r3, r2, #2
   1f784:	cmp	fp, r3
   1f788:	add	r8, r2, #3
   1f78c:	movhi	r1, #48	; 0x30
   1f790:	strbhi	r1, [r9, r3]
   1f794:	ldr	r3, [sp, #40]	; 0x28
   1f798:	ldr	r1, [sp, #52]	; 0x34
   1f79c:	mov	r7, r3
   1f7a0:	str	r3, [sp, #32]
   1f7a4:	mov	r4, #48	; 0x30
   1f7a8:	b	1f3f8 <__assert_fail@plt+0xd854>
   1f7ac:	ldr	r6, [sp, #48]	; 0x30
   1f7b0:	cmp	sl, #0
   1f7b4:	streq	r7, [sp, #32]
   1f7b8:	beq	1f7d8 <__assert_fail@plt+0xdc34>
   1f7bc:	mov	r3, #0
   1f7c0:	ldr	r1, [sp, #52]	; 0x34
   1f7c4:	str	r3, [sp, #32]
   1f7c8:	b	1f3f8 <__assert_fail@plt+0xd854>
   1f7cc:	ldr	r6, [sp, #48]	; 0x30
   1f7d0:	mov	r3, #0
   1f7d4:	str	r3, [sp, #32]
   1f7d8:	ldr	r3, [sp, #64]	; 0x40
   1f7dc:	cmp	r3, #0
   1f7e0:	bne	1ff5c <__assert_fail@plt+0xe3b8>
   1f7e4:	ldr	r1, [sp, #52]	; 0x34
   1f7e8:	b	1f3f8 <__assert_fail@plt+0xd854>
   1f7ec:	ldr	r3, [sp, #48]	; 0x30
   1f7f0:	mov	r6, r3
   1f7f4:	str	r3, [sp, #32]
   1f7f8:	b	1f7d8 <__assert_fail@plt+0xdc34>
   1f7fc:	ldr	r6, [sp, #48]	; 0x30
   1f800:	mov	r4, #13
   1f804:	mov	r3, #114	; 0x72
   1f808:	b	1f66c <__assert_fail@plt+0xdac8>
   1f80c:	ldr	r3, [sp, #44]	; 0x2c
   1f810:	add	r5, r3, sl
   1f814:	ldrb	r4, [r5]
   1f818:	cmp	r4, #126	; 0x7e
   1f81c:	ldrls	pc, [pc, r4, lsl #2]
   1f820:	b	1fbbc <__assert_fail@plt+0xe018>
   1f824:	andeq	pc, r1, ip, lsl #23
   1f828:			; <UNDEFINED> instruction: 0x0001fbbc
   1f82c:			; <UNDEFINED> instruction: 0x0001fbbc
   1f830:			; <UNDEFINED> instruction: 0x0001fbbc
   1f834:			; <UNDEFINED> instruction: 0x0001fbbc
   1f838:			; <UNDEFINED> instruction: 0x0001fbbc
   1f83c:			; <UNDEFINED> instruction: 0x0001fbbc
   1f840:	andeq	pc, r1, r4, lsl #23
   1f844:	andeq	pc, r1, ip, ror fp	; <UNPREDICTABLE>
   1f848:	andeq	pc, r1, r0, ror fp	; <UNPREDICTABLE>
   1f84c:	andeq	pc, r1, r8, ror #22
   1f850:	andeq	pc, r1, r0, ror #22
   1f854:	andeq	pc, r1, r8, asr fp	; <UNPREDICTABLE>
   1f858:	andeq	pc, r1, r0, asr fp	; <UNPREDICTABLE>
   1f85c:			; <UNDEFINED> instruction: 0x0001fbbc
   1f860:			; <UNDEFINED> instruction: 0x0001fbbc
   1f864:			; <UNDEFINED> instruction: 0x0001fbbc
   1f868:			; <UNDEFINED> instruction: 0x0001fbbc
   1f86c:			; <UNDEFINED> instruction: 0x0001fbbc
   1f870:			; <UNDEFINED> instruction: 0x0001fbbc
   1f874:			; <UNDEFINED> instruction: 0x0001fbbc
   1f878:			; <UNDEFINED> instruction: 0x0001fbbc
   1f87c:			; <UNDEFINED> instruction: 0x0001fbbc
   1f880:			; <UNDEFINED> instruction: 0x0001fbbc
   1f884:			; <UNDEFINED> instruction: 0x0001fbbc
   1f888:			; <UNDEFINED> instruction: 0x0001fbbc
   1f88c:			; <UNDEFINED> instruction: 0x0001fbbc
   1f890:			; <UNDEFINED> instruction: 0x0001fbbc
   1f894:			; <UNDEFINED> instruction: 0x0001fbbc
   1f898:			; <UNDEFINED> instruction: 0x0001fbbc
   1f89c:			; <UNDEFINED> instruction: 0x0001fbbc
   1f8a0:			; <UNDEFINED> instruction: 0x0001fbbc
   1f8a4:	andeq	pc, r1, r4, asr #22
   1f8a8:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f8ac:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f8b0:	andeq	pc, r1, r4, lsr fp	; <UNPREDICTABLE>
   1f8b4:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f8b8:	andeq	pc, r1, ip, lsr #22
   1f8bc:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f8c0:	andeq	pc, r1, r0, lsr #21
   1f8c4:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f8c8:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f8cc:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f8d0:	andeq	pc, r1, ip, lsr #22
   1f8d4:	andeq	pc, r1, ip, lsr #22
   1f8d8:	andeq	pc, r1, ip, lsr #22
   1f8dc:	andeq	pc, r1, ip, lsr #22
   1f8e0:	andeq	pc, r1, ip, lsr #22
   1f8e4:	andeq	pc, r1, ip, lsr #22
   1f8e8:	andeq	pc, r1, ip, lsr #22
   1f8ec:	andeq	pc, r1, ip, lsr #22
   1f8f0:	andeq	pc, r1, ip, lsr #22
   1f8f4:	andeq	pc, r1, ip, lsr #22
   1f8f8:	andeq	pc, r1, ip, lsr #22
   1f8fc:	andeq	pc, r1, ip, lsr #22
   1f900:	andeq	pc, r1, ip, lsr #22
   1f904:	andeq	pc, r1, ip, lsr #22
   1f908:	andeq	pc, r1, ip, lsr #22
   1f90c:	andeq	pc, r1, ip, lsr #22
   1f910:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f914:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f918:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f91c:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f920:	andeq	pc, r1, r4, ror sl	; <UNPREDICTABLE>
   1f924:			; <UNDEFINED> instruction: 0x0001fbbc
   1f928:	andeq	pc, r1, ip, lsr #22
   1f92c:	andeq	pc, r1, ip, lsr #22
   1f930:	andeq	pc, r1, ip, lsr #22
   1f934:	andeq	pc, r1, ip, lsr #22
   1f938:	andeq	pc, r1, ip, lsr #22
   1f93c:	andeq	pc, r1, ip, lsr #22
   1f940:	andeq	pc, r1, ip, lsr #22
   1f944:	andeq	pc, r1, ip, lsr #22
   1f948:	andeq	pc, r1, ip, lsr #22
   1f94c:	andeq	pc, r1, ip, lsr #22
   1f950:	andeq	pc, r1, ip, lsr #22
   1f954:	andeq	pc, r1, ip, lsr #22
   1f958:	andeq	pc, r1, ip, lsr #22
   1f95c:	andeq	pc, r1, ip, lsr #22
   1f960:	andeq	pc, r1, ip, lsr #22
   1f964:	andeq	pc, r1, ip, lsr #22
   1f968:	andeq	pc, r1, ip, lsr #22
   1f96c:	andeq	pc, r1, ip, lsr #22
   1f970:	andeq	pc, r1, ip, lsr #22
   1f974:	andeq	pc, r1, ip, lsr #22
   1f978:	andeq	pc, r1, ip, lsr #22
   1f97c:	andeq	pc, r1, ip, lsr #22
   1f980:	andeq	pc, r1, ip, lsr #22
   1f984:	andeq	pc, r1, ip, lsr #22
   1f988:	andeq	pc, r1, ip, lsr #22
   1f98c:	andeq	pc, r1, ip, lsr #22
   1f990:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f994:	andeq	pc, r1, r4, asr #20
   1f998:	andeq	pc, r1, ip, lsr #22
   1f99c:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f9a0:	andeq	pc, r1, ip, lsr #22
   1f9a4:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1f9a8:	andeq	pc, r1, ip, lsr #22
   1f9ac:	andeq	pc, r1, ip, lsr #22
   1f9b0:	andeq	pc, r1, ip, lsr #22
   1f9b4:	andeq	pc, r1, ip, lsr #22
   1f9b8:	andeq	pc, r1, ip, lsr #22
   1f9bc:	andeq	pc, r1, ip, lsr #22
   1f9c0:	andeq	pc, r1, ip, lsr #22
   1f9c4:	andeq	pc, r1, ip, lsr #22
   1f9c8:	andeq	pc, r1, ip, lsr #22
   1f9cc:	andeq	pc, r1, ip, lsr #22
   1f9d0:	andeq	pc, r1, ip, lsr #22
   1f9d4:	andeq	pc, r1, ip, lsr #22
   1f9d8:	andeq	pc, r1, ip, lsr #22
   1f9dc:	andeq	pc, r1, ip, lsr #22
   1f9e0:	andeq	pc, r1, ip, lsr #22
   1f9e4:	andeq	pc, r1, ip, lsr #22
   1f9e8:	andeq	pc, r1, ip, lsr #22
   1f9ec:	andeq	pc, r1, ip, lsr #22
   1f9f0:	andeq	pc, r1, ip, lsr #22
   1f9f4:	andeq	pc, r1, ip, lsr #22
   1f9f8:	andeq	pc, r1, ip, lsr #22
   1f9fc:	andeq	pc, r1, ip, lsr #22
   1fa00:	andeq	pc, r1, ip, lsr #22
   1fa04:	andeq	pc, r1, ip, lsr #22
   1fa08:	andeq	pc, r1, ip, lsr #22
   1fa0c:	andeq	pc, r1, ip, lsr #22
   1fa10:	andeq	pc, r1, r0, lsr #20
   1fa14:	andeq	pc, r1, ip, lsr fp	; <UNPREDICTABLE>
   1fa18:	andeq	pc, r1, r0, lsr #20
   1fa1c:	andeq	pc, r1, r4, lsr fp	; <UNPREDICTABLE>
   1fa20:	ldr	r3, [sp, #24]
   1fa24:	mov	r6, #0
   1fa28:	cmn	r3, #1
   1fa2c:	bne	1f3d8 <__assert_fail@plt+0xd834>
   1fa30:	ldr	r3, [sp, #44]	; 0x2c
   1fa34:	ldrb	r3, [r3, #1]
   1fa38:	adds	r3, r3, #0
   1fa3c:	movne	r3, #1
   1fa40:	b	1f3e0 <__assert_fail@plt+0xd83c>
   1fa44:	ldr	r3, [sp, #176]	; 0xb0
   1fa48:	mov	r6, #0
   1fa4c:	cmp	r3, #2
   1fa50:	bne	1f520 <__assert_fail@plt+0xd97c>
   1fa54:	ldr	r3, [sp, #64]	; 0x40
   1fa58:	cmp	r3, #0
   1fa5c:	bne	20294 <__assert_fail@plt+0xe6f0>
   1fa60:	add	sl, sl, #1
   1fa64:	ldr	r6, [sp, #36]	; 0x24
   1fa68:	str	r3, [sp, #32]
   1fa6c:	mov	r4, #92	; 0x5c
   1fa70:	b	1f42c <__assert_fail@plt+0xd888>
   1fa74:	ldr	r3, [sp, #176]	; 0xb0
   1fa78:	mov	r6, #0
   1fa7c:	cmp	r3, #2
   1fa80:	bne	1f554 <__assert_fail@plt+0xd9b0>
   1fa84:	ldr	r3, [sp, #40]	; 0x28
   1fa88:	cmp	r3, #0
   1fa8c:	bne	1fd70 <__assert_fail@plt+0xe1cc>
   1fa90:	mov	r1, r7
   1fa94:	str	r3, [sp, #32]
   1fa98:	mov	r4, #63	; 0x3f
   1fa9c:	b	1f3f8 <__assert_fail@plt+0xd854>
   1faa0:	ldr	r3, [sp, #176]	; 0xb0
   1faa4:	mov	r6, #0
   1faa8:	cmp	r3, #2
   1faac:	bne	1f5a4 <__assert_fail@plt+0xda00>
   1fab0:	ldr	r3, [sp, #64]	; 0x40
   1fab4:	cmp	r3, #0
   1fab8:	bne	20294 <__assert_fail@plt+0xe6f0>
   1fabc:	ldr	r2, [sp, #84]	; 0x54
   1fac0:	adds	r3, fp, #0
   1fac4:	movne	r3, #1
   1fac8:	cmp	r2, #0
   1facc:	movne	r3, #0
   1fad0:	cmp	r3, #0
   1fad4:	strne	fp, [sp, #84]	; 0x54
   1fad8:	movne	fp, #0
   1fadc:	bne	1fb0c <__assert_fail@plt+0xdf68>
   1fae0:	cmp	fp, r8
   1fae4:	movhi	r3, #39	; 0x27
   1fae8:	strbhi	r3, [r9, r8]
   1faec:	add	r3, r8, #1
   1faf0:	cmp	fp, r3
   1faf4:	movhi	r2, #92	; 0x5c
   1faf8:	strbhi	r2, [r9, r3]
   1fafc:	add	r3, r8, #2
   1fb00:	cmp	fp, r3
   1fb04:	movhi	r2, #39	; 0x27
   1fb08:	strbhi	r2, [r9, r3]
   1fb0c:	ldr	r3, [sp, #64]	; 0x40
   1fb10:	add	r8, r8, #3
   1fb14:	mov	r1, r7
   1fb18:	str	r7, [sp, #32]
   1fb1c:	str	r7, [sp, #76]	; 0x4c
   1fb20:	str	r3, [sp, #36]	; 0x24
   1fb24:	mov	r4, #39	; 0x27
   1fb28:	b	1f3f8 <__assert_fail@plt+0xd854>
   1fb2c:	mov	r6, #0
   1fb30:	b	1f5bc <__assert_fail@plt+0xda18>
   1fb34:	mov	r6, #0
   1fb38:	b	1f7b0 <__assert_fail@plt+0xdc0c>
   1fb3c:	mov	r6, #0
   1fb40:	b	1f7d0 <__assert_fail@plt+0xdc2c>
   1fb44:	str	r7, [sp, #32]
   1fb48:	mov	r6, #0
   1fb4c:	b	1f7d8 <__assert_fail@plt+0xdc34>
   1fb50:	mov	r6, #0
   1fb54:	b	1f800 <__assert_fail@plt+0xdc5c>
   1fb58:	mov	r6, #0
   1fb5c:	b	1f5cc <__assert_fail@plt+0xda28>
   1fb60:	mov	r6, #0
   1fb64:	b	1f694 <__assert_fail@plt+0xdaf0>
   1fb68:	mov	r6, #0
   1fb6c:	b	1f664 <__assert_fail@plt+0xdac0>
   1fb70:	mov	r6, #0
   1fb74:	mov	r3, #116	; 0x74
   1fb78:	b	1f66c <__assert_fail@plt+0xdac8>
   1fb7c:	mov	r6, #0
   1fb80:	b	1f6a8 <__assert_fail@plt+0xdb04>
   1fb84:	mov	r6, #0
   1fb88:	b	1f6bc <__assert_fail@plt+0xdb18>
   1fb8c:	ldr	r3, [sp, #56]	; 0x38
   1fb90:	mov	r6, #0
   1fb94:	cmp	r3, #0
   1fb98:	bne	1f6dc <__assert_fail@plt+0xdb38>
   1fb9c:	ldr	r3, [sp, #96]	; 0x60
   1fba0:	cmp	r3, #0
   1fba4:	addne	sl, sl, #1
   1fba8:	bne	1ef50 <__assert_fail@plt+0xd3ac>
   1fbac:	ldr	r1, [sp, #52]	; 0x34
   1fbb0:	str	r3, [sp, #32]
   1fbb4:	mov	r4, r3
   1fbb8:	b	1f3f8 <__assert_fail@plt+0xd854>
   1fbbc:	mov	r6, #0
   1fbc0:	ldr	r3, [sp, #80]	; 0x50
   1fbc4:	cmp	r3, #1
   1fbc8:	bne	1fdb8 <__assert_fail@plt+0xe214>
   1fbcc:	bl	11964 <__ctype_b_loc@plt>
   1fbd0:	ldr	r2, [sp, #80]	; 0x50
   1fbd4:	sxth	r3, r4
   1fbd8:	mov	r1, r2
   1fbdc:	lsl	r3, r3, #1
   1fbe0:	ldr	r2, [r0]
   1fbe4:	ldrh	r3, [r2, r3]
   1fbe8:	and	r3, r3, #16384	; 0x4000
   1fbec:	cmp	r3, #0
   1fbf0:	movne	r3, #1
   1fbf4:	moveq	r3, #0
   1fbf8:	str	r3, [sp, #32]
   1fbfc:	moveq	r3, #1
   1fc00:	movne	r3, #0
   1fc04:	ldr	r2, [sp, #56]	; 0x38
   1fc08:	and	r3, r3, r2
   1fc0c:	ands	r3, r3, #255	; 0xff
   1fc10:	beq	1f7e4 <__assert_fail@plt+0xdc40>
   1fc14:	add	r1, sl, r1
   1fc18:	mov	r0, #0
   1fc1c:	ldr	r7, [sp, #40]	; 0x28
   1fc20:	ldr	r2, [sp, #36]	; 0x24
   1fc24:	ldr	lr, [sp, #52]	; 0x34
   1fc28:	b	1fcd8 <__assert_fail@plt+0xe134>
   1fc2c:	cmp	r7, #0
   1fc30:	bne	2002c <__assert_fail@plt+0xe488>
   1fc34:	eor	r0, r2, #1
   1fc38:	ands	r0, lr, r0
   1fc3c:	beq	1fc74 <__assert_fail@plt+0xe0d0>
   1fc40:	cmp	fp, r8
   1fc44:	movhi	r2, #39	; 0x27
   1fc48:	strbhi	r2, [r9, r8]
   1fc4c:	add	r2, r8, #1
   1fc50:	cmp	fp, r2
   1fc54:	movhi	ip, #36	; 0x24
   1fc58:	strbhi	ip, [r9, r2]
   1fc5c:	add	r2, r8, #2
   1fc60:	cmp	fp, r2
   1fc64:	movhi	ip, #39	; 0x27
   1fc68:	strbhi	ip, [r9, r2]
   1fc6c:	add	r8, r8, #3
   1fc70:	mov	r2, r0
   1fc74:	cmp	fp, r8
   1fc78:	movhi	r0, #92	; 0x5c
   1fc7c:	strbhi	r0, [r9, r8]
   1fc80:	add	r0, r8, #1
   1fc84:	cmp	fp, r0
   1fc88:	lsrhi	ip, r4, #6
   1fc8c:	addhi	ip, ip, #48	; 0x30
   1fc90:	strbhi	ip, [r9, r0]
   1fc94:	add	ip, r8, #2
   1fc98:	cmp	fp, ip
   1fc9c:	lsrhi	r0, r4, #3
   1fca0:	andhi	r0, r0, #7
   1fca4:	addhi	r0, r0, #48	; 0x30
   1fca8:	add	sl, sl, #1
   1fcac:	strbhi	r0, [r9, ip]
   1fcb0:	and	r4, r4, #7
   1fcb4:	cmp	sl, r1
   1fcb8:	add	r4, r4, #48	; 0x30
   1fcbc:	add	r8, r8, #3
   1fcc0:	bcs	20044 <__assert_fail@plt+0xe4a0>
   1fcc4:	mov	r0, r3
   1fcc8:	cmp	fp, r8
   1fccc:	strbhi	r4, [r9, r8]
   1fcd0:	ldrb	r4, [r5, #1]!
   1fcd4:	add	r8, r8, #1
   1fcd8:	cmp	r3, #0
   1fcdc:	bne	1fc2c <__assert_fail@plt+0xe088>
   1fce0:	cmp	r6, #0
   1fce4:	bne	1fd88 <__assert_fail@plt+0xe1e4>
   1fce8:	eor	r6, r0, #1
   1fcec:	and	r6, r6, r2
   1fcf0:	add	sl, sl, #1
   1fcf4:	cmp	r1, sl
   1fcf8:	uxtb	r6, r6
   1fcfc:	bls	1fdb0 <__assert_fail@plt+0xe20c>
   1fd00:	cmp	r6, #0
   1fd04:	beq	1fcc8 <__assert_fail@plt+0xe124>
   1fd08:	cmp	fp, r8
   1fd0c:	movhi	r2, #39	; 0x27
   1fd10:	strbhi	r2, [r9, r8]
   1fd14:	add	r2, r8, #1
   1fd18:	cmp	fp, r2
   1fd1c:	movhi	ip, #39	; 0x27
   1fd20:	strbhi	ip, [r9, r2]
   1fd24:	add	r8, r8, #2
   1fd28:	mov	r6, r3
   1fd2c:	mov	r2, r3
   1fd30:	b	1fcc8 <__assert_fail@plt+0xe124>
   1fd34:	ldr	r3, [sp, #184]	; 0xb8
   1fd38:	cmp	r3, #0
   1fd3c:	beq	1f414 <__assert_fail@plt+0xd870>
   1fd40:	lsr	r2, r4, #5
   1fd44:	mov	r0, r3
   1fd48:	uxtb	r2, r2
   1fd4c:	and	r3, r4, #31
   1fd50:	ldr	r2, [r0, r2, lsl #2]
   1fd54:	lsr	r3, r2, r3
   1fd58:	tst	r3, #1
   1fd5c:	beq	1f414 <__assert_fail@plt+0xd870>
   1fd60:	ldr	r3, [sp, #40]	; 0x28
   1fd64:	cmp	r3, #0
   1fd68:	beq	1f600 <__assert_fail@plt+0xda5c>
   1fd6c:	mov	r3, r1
   1fd70:	str	r3, [sp, #64]	; 0x40
   1fd74:	mov	sl, r9
   1fd78:	ldr	r3, [sp, #56]	; 0x38
   1fd7c:	mov	r9, fp
   1fd80:	ldr	r2, [sp, #64]	; 0x40
   1fd84:	b	1ff74 <__assert_fail@plt+0xe3d0>
   1fd88:	cmp	fp, r8
   1fd8c:	eor	r6, r0, #1
   1fd90:	movhi	ip, #92	; 0x5c
   1fd94:	and	r6, r6, r2
   1fd98:	add	sl, sl, #1
   1fd9c:	strbhi	ip, [r9, r8]
   1fda0:	cmp	r1, sl
   1fda4:	add	r8, r8, #1
   1fda8:	uxtb	r6, r6
   1fdac:	bhi	1fd00 <__assert_fail@plt+0xe15c>
   1fdb0:	str	r2, [sp, #36]	; 0x24
   1fdb4:	b	1f42c <__assert_fail@plt+0xd888>
   1fdb8:	ldr	r3, [sp, #24]
   1fdbc:	cmn	r3, #1
   1fdc0:	mov	r3, #0
   1fdc4:	str	r3, [sp, #128]	; 0x80
   1fdc8:	str	r3, [sp, #132]	; 0x84
   1fdcc:	beq	200c0 <__assert_fail@plt+0xe51c>
   1fdd0:	mov	r2, r7
   1fdd4:	mov	r3, #0
   1fdd8:	str	r7, [sp, #104]	; 0x68
   1fddc:	str	r5, [sp, #116]	; 0x74
   1fde0:	mov	r7, r3
   1fde4:	mov	r5, r2
   1fde8:	str	r4, [sp, #32]
   1fdec:	str	r6, [sp, #108]	; 0x6c
   1fdf0:	str	r8, [sp, #112]	; 0x70
   1fdf4:	ldr	r3, [sp, #44]	; 0x2c
   1fdf8:	add	r6, sl, r7
   1fdfc:	add	r4, r3, r6
   1fe00:	ldr	r3, [sp, #24]
   1fe04:	mov	r1, r4
   1fe08:	sub	r2, r3, r6
   1fe0c:	add	r0, sp, #124	; 0x7c
   1fe10:	add	r3, sp, #128	; 0x80
   1fe14:	bl	1db04 <__assert_fail@plt+0xbf60>
   1fe18:	subs	r8, r0, #0
   1fe1c:	beq	201a4 <__assert_fail@plt+0xe600>
   1fe20:	cmn	r8, #1
   1fe24:	beq	2017c <__assert_fail@plt+0xe5d8>
   1fe28:	cmn	r8, #2
   1fe2c:	beq	20114 <__assert_fail@plt+0xe570>
   1fe30:	ldr	r3, [sp, #64]	; 0x40
   1fe34:	cmp	r3, #0
   1fe38:	beq	1fef8 <__assert_fail@plt+0xe354>
   1fe3c:	cmp	r8, #1
   1fe40:	beq	1fef8 <__assert_fail@plt+0xe354>
   1fe44:	sub	r3, r8, #1
   1fe48:	add	r6, r3, r6
   1fe4c:	ldr	r3, [sp, #44]	; 0x2c
   1fe50:	add	r6, r3, r6
   1fe54:	ldrb	r3, [r4, #1]!
   1fe58:	sub	r3, r3, #91	; 0x5b
   1fe5c:	cmp	r3, #33	; 0x21
   1fe60:	ldrls	pc, [pc, r3, lsl #2]
   1fe64:	b	1fef0 <__assert_fail@plt+0xe34c>
   1fe68:	andeq	pc, r1, ip, asr pc	; <UNPREDICTABLE>
   1fe6c:	andeq	pc, r1, ip, asr pc	; <UNPREDICTABLE>
   1fe70:	strdeq	pc, [r1], -r0
   1fe74:	andeq	pc, r1, ip, asr pc	; <UNPREDICTABLE>
   1fe78:	strdeq	pc, [r1], -r0
   1fe7c:	andeq	pc, r1, ip, asr pc	; <UNPREDICTABLE>
   1fe80:	strdeq	pc, [r1], -r0
   1fe84:	strdeq	pc, [r1], -r0
   1fe88:	strdeq	pc, [r1], -r0
   1fe8c:	strdeq	pc, [r1], -r0
   1fe90:	strdeq	pc, [r1], -r0
   1fe94:	strdeq	pc, [r1], -r0
   1fe98:	strdeq	pc, [r1], -r0
   1fe9c:	strdeq	pc, [r1], -r0
   1fea0:	strdeq	pc, [r1], -r0
   1fea4:	strdeq	pc, [r1], -r0
   1fea8:	strdeq	pc, [r1], -r0
   1feac:	strdeq	pc, [r1], -r0
   1feb0:	strdeq	pc, [r1], -r0
   1feb4:	strdeq	pc, [r1], -r0
   1feb8:	strdeq	pc, [r1], -r0
   1febc:	strdeq	pc, [r1], -r0
   1fec0:	strdeq	pc, [r1], -r0
   1fec4:	strdeq	pc, [r1], -r0
   1fec8:	strdeq	pc, [r1], -r0
   1fecc:	strdeq	pc, [r1], -r0
   1fed0:	strdeq	pc, [r1], -r0
   1fed4:	strdeq	pc, [r1], -r0
   1fed8:	strdeq	pc, [r1], -r0
   1fedc:	strdeq	pc, [r1], -r0
   1fee0:	strdeq	pc, [r1], -r0
   1fee4:	strdeq	pc, [r1], -r0
   1fee8:	strdeq	pc, [r1], -r0
   1feec:	andeq	pc, r1, ip, asr pc	; <UNPREDICTABLE>
   1fef0:	cmp	r6, r4
   1fef4:	bne	1fe54 <__assert_fail@plt+0xe2b0>
   1fef8:	ldr	r0, [sp, #124]	; 0x7c
   1fefc:	bl	11838 <iswprint@plt>
   1ff00:	add	r7, r7, r8
   1ff04:	cmp	r0, #0
   1ff08:	add	r0, sp, #128	; 0x80
   1ff0c:	moveq	r5, #0
   1ff10:	bl	117b4 <mbsinit@plt>
   1ff14:	cmp	r0, #0
   1ff18:	beq	1fdf4 <__assert_fail@plt+0xe250>
   1ff1c:	ldr	r4, [sp, #32]
   1ff20:	str	r5, [sp, #32]
   1ff24:	ldr	r3, [sp, #32]
   1ff28:	mov	r1, r7
   1ff2c:	eor	r3, r3, #1
   1ff30:	ldr	r7, [sp, #104]	; 0x68
   1ff34:	ldr	r6, [sp, #108]	; 0x6c
   1ff38:	ldr	r8, [sp, #112]	; 0x70
   1ff3c:	ldr	r5, [sp, #116]	; 0x74
   1ff40:	uxtb	r3, r3
   1ff44:	cmp	r1, #1
   1ff48:	bls	1fc04 <__assert_fail@plt+0xe060>
   1ff4c:	ldr	r2, [sp, #56]	; 0x38
   1ff50:	and	r3, r3, r2
   1ff54:	uxtb	r3, r3
   1ff58:	b	1fc14 <__assert_fail@plt+0xe070>
   1ff5c:	mov	r3, #2
   1ff60:	str	r3, [sp, #176]	; 0xb0
   1ff64:	ldr	r2, [sp, #64]	; 0x40
   1ff68:	ldr	r3, [sp, #56]	; 0x38
   1ff6c:	mov	sl, r9
   1ff70:	mov	r9, fp
   1ff74:	and	r3, r3, r2
   1ff78:	tst	r3, #255	; 0xff
   1ff7c:	ldr	r3, [sp, #176]	; 0xb0
   1ff80:	movne	r3, #4
   1ff84:	str	r3, [sp, #176]	; 0xb0
   1ff88:	ldr	r3, [sp, #180]	; 0xb4
   1ff8c:	mov	ip, #0
   1ff90:	bic	r3, r3, #2
   1ff94:	str	r3, [sp, #4]
   1ff98:	ldr	r3, [sp, #192]	; 0xc0
   1ff9c:	ldr	r2, [sp, #44]	; 0x2c
   1ffa0:	str	r3, [sp, #16]
   1ffa4:	ldr	r3, [sp, #188]	; 0xbc
   1ffa8:	mov	r1, r9
   1ffac:	str	r3, [sp, #12]
   1ffb0:	ldr	r3, [sp, #176]	; 0xb0
   1ffb4:	mov	r0, sl
   1ffb8:	str	r3, [sp]
   1ffbc:	str	ip, [sp, #8]
   1ffc0:	ldr	r3, [sp, #24]
   1ffc4:	bl	1ee24 <__assert_fail@plt+0xd280>
   1ffc8:	mov	fp, r0
   1ffcc:	mov	r0, fp
   1ffd0:	add	sp, sp, #140	; 0x8c
   1ffd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ffd8:	mov	r4, #92	; 0x5c
   1ffdc:	mov	r1, #0
   1ffe0:	mov	r3, r4
   1ffe4:	b	1f5d8 <__assert_fail@plt+0xda34>
   1ffe8:	mov	r3, #0
   1ffec:	ldr	r1, [sp, #52]	; 0x34
   1fff0:	str	r3, [sp, #32]
   1fff4:	mov	r4, #63	; 0x3f
   1fff8:	b	1f3f8 <__assert_fail@plt+0xd854>
   1fffc:	cmp	fp, #0
   20000:	beq	2005c <__assert_fail@plt+0xe4b8>
   20004:	mov	r3, #39	; 0x27
   20008:	strb	r3, [r9]
   2000c:	mov	r3, #0
   20010:	str	r3, [sp, #40]	; 0x28
   20014:	mov	r3, #1
   20018:	str	r3, [sp, #68]	; 0x44
   2001c:	ldr	r3, [pc, #448]	; 201e4 <__assert_fail@plt+0xe640>
   20020:	mov	r8, #1
   20024:	str	r3, [sp, #72]	; 0x48
   20028:	b	1f20c <__assert_fail@plt+0xd668>
   2002c:	ldr	r3, [sp, #40]	; 0x28
   20030:	mov	sl, r9
   20034:	str	r3, [sp, #56]	; 0x38
   20038:	mov	r9, fp
   2003c:	ldr	r2, [sp, #64]	; 0x40
   20040:	b	1ff74 <__assert_fail@plt+0xe3d0>
   20044:	str	r2, [sp, #36]	; 0x24
   20048:	b	1f45c <__assert_fail@plt+0xd8b8>
   2004c:	mov	r1, #0
   20050:	str	r3, [sp, #32]
   20054:	mov	r4, #63	; 0x3f
   20058:	b	1f3f8 <__assert_fail@plt+0xd854>
   2005c:	ldr	r3, [pc, #384]	; 201e4 <__assert_fail@plt+0xe640>
   20060:	str	r3, [sp, #72]	; 0x48
   20064:	mov	r3, #0
   20068:	str	r3, [sp, #40]	; 0x28
   2006c:	mov	r3, #1
   20070:	str	r3, [sp, #68]	; 0x44
   20074:	mov	r8, r3
   20078:	b	1f20c <__assert_fail@plt+0xd668>
   2007c:	bl	11b68 <abort@plt>
   20080:	cmp	fp, #0
   20084:	beq	200e4 <__assert_fail@plt+0xe540>
   20088:	mov	r2, #1
   2008c:	mov	r3, #34	; 0x22
   20090:	strb	r3, [r9]
   20094:	mov	r8, r2
   20098:	mov	r3, r2
   2009c:	str	r2, [sp, #68]	; 0x44
   200a0:	str	r3, [sp, #56]	; 0x38
   200a4:	ldr	r3, [pc, #316]	; 201e8 <__assert_fail@plt+0xe644>
   200a8:	ldr	r1, [sp, #56]	; 0x38
   200ac:	str	r3, [sp, #72]	; 0x48
   200b0:	ldr	r2, [sp, #176]	; 0xb0
   200b4:	ldr	ip, [sp, #40]	; 0x28
   200b8:	ldr	lr, [sp, #176]	; 0xb0
   200bc:	b	1eef0 <__assert_fail@plt+0xd34c>
   200c0:	ldr	r0, [sp, #44]	; 0x2c
   200c4:	bl	11988 <strlen@plt>
   200c8:	str	r0, [sp, #24]
   200cc:	b	1fdd0 <__assert_fail@plt+0xe22c>
   200d0:	mov	r7, #0
   200d4:	ldr	r1, [sp, #52]	; 0x34
   200d8:	str	r3, [sp, #32]
   200dc:	mov	r4, #48	; 0x30
   200e0:	b	1f3f8 <__assert_fail@plt+0xd854>
   200e4:	mov	r3, #1
   200e8:	str	r3, [sp, #68]	; 0x44
   200ec:	mov	r8, r3
   200f0:	b	200a0 <__assert_fail@plt+0xe4fc>
   200f4:	mov	r3, #2
   200f8:	mov	sl, r9
   200fc:	str	r3, [sp, #176]	; 0xb0
   20100:	mov	r9, fp
   20104:	ldr	r3, [sp, #56]	; 0x38
   20108:	b	1ff74 <__assert_fail@plt+0xe3d0>
   2010c:	ldr	r6, [sp, #48]	; 0x30
   20110:	b	1fbc0 <__assert_fail@plt+0xe01c>
   20114:	ldr	r0, [sp, #24]
   20118:	mov	ip, r6
   2011c:	cmp	r0, ip
   20120:	mov	r1, r7
   20124:	mov	r2, r4
   20128:	ldr	r7, [sp, #104]	; 0x68
   2012c:	ldr	r4, [sp, #32]
   20130:	ldr	r6, [sp, #108]	; 0x6c
   20134:	ldr	r8, [sp, #112]	; 0x70
   20138:	ldr	r5, [sp, #116]	; 0x74
   2013c:	bls	2016c <__assert_fail@plt+0xe5c8>
   20140:	ldrb	r3, [r2]
   20144:	cmp	r3, #0
   20148:	bne	2015c <__assert_fail@plt+0xe5b8>
   2014c:	b	2027c <__assert_fail@plt+0xe6d8>
   20150:	ldrb	r3, [r2, #1]!
   20154:	cmp	r3, #0
   20158:	beq	2027c <__assert_fail@plt+0xe6d8>
   2015c:	add	r1, r1, #1
   20160:	add	r3, sl, r1
   20164:	cmp	r0, r3
   20168:	bhi	20150 <__assert_fail@plt+0xe5ac>
   2016c:	mov	r2, #0
   20170:	mov	r3, r7
   20174:	str	r2, [sp, #32]
   20178:	b	1ff44 <__assert_fail@plt+0xe3a0>
   2017c:	mov	r1, r7
   20180:	ldr	r7, [sp, #104]	; 0x68
   20184:	mov	r2, #0
   20188:	ldr	r4, [sp, #32]
   2018c:	ldr	r6, [sp, #108]	; 0x6c
   20190:	ldr	r8, [sp, #112]	; 0x70
   20194:	ldr	r5, [sp, #116]	; 0x74
   20198:	mov	r3, r7
   2019c:	str	r2, [sp, #32]
   201a0:	b	1ff44 <__assert_fail@plt+0xe3a0>
   201a4:	mov	r3, r5
   201a8:	eor	r3, r3, #1
   201ac:	ldr	r4, [sp, #32]
   201b0:	mov	r1, r7
   201b4:	str	r5, [sp, #32]
   201b8:	ldr	r7, [sp, #104]	; 0x68
   201bc:	ldr	r6, [sp, #108]	; 0x6c
   201c0:	ldr	r8, [sp, #112]	; 0x70
   201c4:	ldr	r5, [sp, #116]	; 0x74
   201c8:	uxtb	r3, r3
   201cc:	b	1ff44 <__assert_fail@plt+0xe3a0>
   201d0:	mov	sl, r9
   201d4:	str	r3, [sp, #56]	; 0x38
   201d8:	mov	r9, fp
   201dc:	ldr	r2, [sp, #64]	; 0x40
   201e0:	b	1ff74 <__assert_fail@plt+0xe3d0>
   201e4:	andeq	r9, r3, r0, asr r6
   201e8:	andeq	sl, r3, ip, lsr #32
   201ec:	andeq	sl, r3, r0, lsr r0
   201f0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   201f4:	ldr	r2, [sp, #44]	; 0x2c
   201f8:	ldrb	r1, [r2, r3]
   201fc:	sub	r2, r1, #33	; 0x21
   20200:	uxtb	r2, r2
   20204:	cmp	r2, #29
   20208:	bhi	20288 <__assert_fail@plt+0xe6e4>
   2020c:	ldr	r0, [pc, #-36]	; 201f0 <__assert_fail@plt+0xe64c>
   20210:	mov	ip, #1
   20214:	ands	r2, r0, ip, lsl r2
   20218:	beq	202a8 <__assert_fail@plt+0xe704>
   2021c:	ldr	r2, [sp, #40]	; 0x28
   20220:	cmp	r2, #0
   20224:	bne	2039c <__assert_fail@plt+0xe7f8>
   20228:	add	r2, r8, #1
   2022c:	cmp	fp, r8
   20230:	strbhi	r4, [r9, r8]
   20234:	cmp	fp, r2
   20238:	movhi	r0, #34	; 0x22
   2023c:	strbhi	r0, [r9, r2]
   20240:	add	r2, r8, #2
   20244:	cmp	fp, r2
   20248:	movhi	r0, #34	; 0x22
   2024c:	strbhi	r0, [r9, r2]
   20250:	add	r2, r8, #3
   20254:	cmp	fp, r2
   20258:	mov	sl, r3
   2025c:	ldr	r3, [sp, #40]	; 0x28
   20260:	movhi	r0, #63	; 0x3f
   20264:	mov	r4, r1
   20268:	strbhi	r0, [r9, r2]
   2026c:	add	r8, r8, #4
   20270:	mov	r1, r3
   20274:	str	r3, [sp, #32]
   20278:	b	1f3f8 <__assert_fail@plt+0xd854>
   2027c:	str	r3, [sp, #32]
   20280:	mov	r3, r7
   20284:	b	1ff44 <__assert_fail@plt+0xe3a0>
   20288:	mov	r1, #0
   2028c:	str	r1, [sp, #32]
   20290:	b	1f3f8 <__assert_fail@plt+0xd854>
   20294:	mov	sl, r9
   20298:	ldr	r3, [sp, #56]	; 0x38
   2029c:	mov	r9, fp
   202a0:	ldr	r2, [sp, #64]	; 0x40
   202a4:	b	1ff74 <__assert_fail@plt+0xe3d0>
   202a8:	str	r2, [sp, #32]
   202ac:	mov	r1, #0
   202b0:	b	1f3f8 <__assert_fail@plt+0xd854>
   202b4:	ldr	r2, [sp, #76]	; 0x4c
   202b8:	mov	sl, r9
   202bc:	mov	r9, fp
   202c0:	mov	fp, r8
   202c4:	ldr	r1, [sp, #72]	; 0x48
   202c8:	cmp	r1, #0
   202cc:	moveq	r3, #0
   202d0:	andne	r3, r2, #1
   202d4:	cmp	r3, #0
   202d8:	beq	20304 <__assert_fail@plt+0xe760>
   202dc:	ldrb	r3, [r1]
   202e0:	cmp	r3, #0
   202e4:	beq	20304 <__assert_fail@plt+0xe760>
   202e8:	mov	r2, r1
   202ec:	cmp	r9, fp
   202f0:	strbhi	r3, [sl, fp]
   202f4:	ldrb	r3, [r2, #1]!
   202f8:	add	fp, fp, #1
   202fc:	cmp	r3, #0
   20300:	bne	202ec <__assert_fail@plt+0xe748>
   20304:	cmp	r9, fp
   20308:	movhi	r3, #0
   2030c:	strbhi	r3, [sl, fp]
   20310:	b	1ffcc <__assert_fail@plt+0xe428>
   20314:	ldr	r3, [sp, #192]	; 0xc0
   20318:	mov	ip, #5
   2031c:	str	r3, [sp, #16]
   20320:	ldr	r3, [sp, #188]	; 0xbc
   20324:	ldr	r2, [sp, #44]	; 0x2c
   20328:	str	r3, [sp, #12]
   2032c:	ldr	r3, [sp, #184]	; 0xb8
   20330:	ldr	r1, [sp, #84]	; 0x54
   20334:	str	r3, [sp, #8]
   20338:	ldr	r3, [sp, #180]	; 0xb4
   2033c:	mov	r0, r9
   20340:	str	r3, [sp, #4]
   20344:	str	ip, [sp]
   20348:	ldr	r3, [sp, #24]
   2034c:	bl	1ee24 <__assert_fail@plt+0xd280>
   20350:	mov	fp, r0
   20354:	b	1ffcc <__assert_fail@plt+0xe428>
   20358:	mov	sl, r9
   2035c:	mov	r9, fp
   20360:	mov	fp, r8
   20364:	b	202c4 <__assert_fail@plt+0xe720>
   20368:	ldr	r1, [sp, #176]	; 0xb0
   2036c:	bl	1ed04 <__assert_fail@plt+0xd160>
   20370:	str	r0, [sp, #192]	; 0xc0
   20374:	b	1f2e0 <__assert_fail@plt+0xd73c>
   20378:	ldr	r1, [sp, #176]	; 0xb0
   2037c:	bl	1ed04 <__assert_fail@plt+0xd160>
   20380:	str	r0, [sp, #188]	; 0xbc
   20384:	b	1f2c0 <__assert_fail@plt+0xd71c>
   20388:	mov	sl, r9
   2038c:	mov	r2, r3
   20390:	mov	r9, fp
   20394:	mov	fp, r8
   20398:	b	202c4 <__assert_fail@plt+0xe720>
   2039c:	mov	sl, r9
   203a0:	mov	r9, fp
   203a4:	b	1ff88 <__assert_fail@plt+0xe3e4>
   203a8:	push	{r4, r5, r6, lr}
   203ac:	mov	r5, r0
   203b0:	bl	119b8 <__errno_location@plt>
   203b4:	cmp	r5, #0
   203b8:	mov	r1, #48	; 0x30
   203bc:	mov	r4, r0
   203c0:	ldr	r0, [pc, #16]	; 203d8 <__assert_fail@plt+0xe834>
   203c4:	ldr	r6, [r4]
   203c8:	movne	r0, r5
   203cc:	bl	34d4c <__assert_fail@plt+0x231a8>
   203d0:	str	r6, [r4]
   203d4:	pop	{r4, r5, r6, pc}
   203d8:	andeq	fp, r4, ip, asr #5
   203dc:	ldr	r3, [pc, #12]	; 203f0 <__assert_fail@plt+0xe84c>
   203e0:	cmp	r0, #0
   203e4:	moveq	r0, r3
   203e8:	ldr	r0, [r0]
   203ec:	bx	lr
   203f0:	andeq	fp, r4, ip, asr #5
   203f4:	ldr	r3, [pc, #12]	; 20408 <__assert_fail@plt+0xe864>
   203f8:	cmp	r0, #0
   203fc:	moveq	r0, r3
   20400:	str	r1, [r0]
   20404:	bx	lr
   20408:	andeq	fp, r4, ip, asr #5
   2040c:	ldr	r3, [pc, #52]	; 20448 <__assert_fail@plt+0xe8a4>
   20410:	cmp	r0, #0
   20414:	moveq	r0, r3
   20418:	add	r3, r0, #8
   2041c:	push	{lr}		; (str lr, [sp, #-4]!)
   20420:	lsr	lr, r1, #5
   20424:	and	r1, r1, #31
   20428:	ldr	ip, [r3, lr, lsl #2]
   2042c:	lsr	r0, ip, r1
   20430:	eor	r2, r2, r0
   20434:	and	r2, r2, #1
   20438:	and	r0, r0, #1
   2043c:	eor	r1, ip, r2, lsl r1
   20440:	str	r1, [r3, lr, lsl #2]
   20444:	pop	{pc}		; (ldr pc, [sp], #4)
   20448:	andeq	fp, r4, ip, asr #5
   2044c:	ldr	r3, [pc, #16]	; 20464 <__assert_fail@plt+0xe8c0>
   20450:	cmp	r0, #0
   20454:	movne	r3, r0
   20458:	ldr	r0, [r3, #4]
   2045c:	str	r1, [r3, #4]
   20460:	bx	lr
   20464:	andeq	fp, r4, ip, asr #5
   20468:	ldr	r3, [pc, #44]	; 2049c <__assert_fail@plt+0xe8f8>
   2046c:	cmp	r0, #0
   20470:	moveq	r0, r3
   20474:	mov	ip, #10
   20478:	cmp	r2, #0
   2047c:	cmpne	r1, #0
   20480:	str	ip, [r0]
   20484:	beq	20494 <__assert_fail@plt+0xe8f0>
   20488:	str	r1, [r0, #40]	; 0x28
   2048c:	str	r2, [r0, #44]	; 0x2c
   20490:	bx	lr
   20494:	push	{r4, lr}
   20498:	bl	11b68 <abort@plt>
   2049c:	andeq	fp, r4, ip, asr #5
   204a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   204a4:	sub	sp, sp, #24
   204a8:	ldr	ip, [pc, #108]	; 2051c <__assert_fail@plt+0xe978>
   204ac:	ldr	r4, [sp, #56]	; 0x38
   204b0:	mov	r9, r2
   204b4:	cmp	r4, #0
   204b8:	moveq	r4, ip
   204bc:	mov	sl, r3
   204c0:	mov	r7, r0
   204c4:	mov	r8, r1
   204c8:	bl	119b8 <__errno_location@plt>
   204cc:	ldr	r3, [r4, #44]	; 0x2c
   204d0:	mov	r1, r8
   204d4:	ldr	r6, [r0]
   204d8:	str	r3, [sp, #16]
   204dc:	ldr	r2, [r4, #40]	; 0x28
   204e0:	add	r3, r4, #8
   204e4:	str	r3, [sp, #8]
   204e8:	str	r2, [sp, #12]
   204ec:	ldr	r2, [r4, #4]
   204f0:	mov	r5, r0
   204f4:	str	r2, [sp, #4]
   204f8:	ldr	ip, [r4]
   204fc:	mov	r3, sl
   20500:	mov	r2, r9
   20504:	mov	r0, r7
   20508:	str	ip, [sp]
   2050c:	bl	1ee24 <__assert_fail@plt+0xd280>
   20510:	str	r6, [r5]
   20514:	add	sp, sp, #24
   20518:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2051c:	andeq	fp, r4, ip, asr #5
   20520:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20524:	cmp	r2, #0
   20528:	sub	sp, sp, #36	; 0x24
   2052c:	ldr	r4, [pc, #164]	; 205d8 <__assert_fail@plt+0xea34>
   20530:	mov	r8, r1
   20534:	movne	r4, r2
   20538:	mov	r7, r0
   2053c:	bl	119b8 <__errno_location@plt>
   20540:	ldr	r3, [r4, #44]	; 0x2c
   20544:	ldr	r5, [r4, #4]
   20548:	add	r9, r4, #8
   2054c:	orr	r5, r5, #1
   20550:	mov	r1, #0
   20554:	mov	r2, r7
   20558:	ldr	fp, [r0]
   2055c:	str	r3, [sp, #16]
   20560:	ldr	r3, [r4, #40]	; 0x28
   20564:	stmib	sp, {r5, r9}
   20568:	str	r3, [sp, #12]
   2056c:	ldr	r3, [r4]
   20570:	mov	r6, r0
   20574:	str	r3, [sp]
   20578:	mov	r0, r1
   2057c:	mov	r3, r8
   20580:	bl	1ee24 <__assert_fail@plt+0xd280>
   20584:	add	r1, r0, #1
   20588:	mov	r0, r1
   2058c:	str	r1, [sp, #28]
   20590:	bl	34808 <__assert_fail@plt+0x22c64>
   20594:	ldr	r3, [r4, #44]	; 0x2c
   20598:	ldr	r1, [sp, #28]
   2059c:	str	r3, [sp, #16]
   205a0:	ldr	r3, [r4, #40]	; 0x28
   205a4:	str	r5, [sp, #4]
   205a8:	str	r3, [sp, #12]
   205ac:	str	r9, [sp, #8]
   205b0:	ldr	ip, [r4]
   205b4:	mov	r3, r8
   205b8:	mov	r2, r7
   205bc:	str	ip, [sp]
   205c0:	mov	sl, r0
   205c4:	bl	1ee24 <__assert_fail@plt+0xd280>
   205c8:	mov	r0, sl
   205cc:	str	fp, [r6]
   205d0:	add	sp, sp, #36	; 0x24
   205d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   205d8:	andeq	fp, r4, ip, asr #5
   205dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   205e0:	cmp	r3, #0
   205e4:	sub	sp, sp, #44	; 0x2c
   205e8:	ldr	r4, [pc, #192]	; 206b0 <__assert_fail@plt+0xeb0c>
   205ec:	mov	r6, r2
   205f0:	movne	r4, r3
   205f4:	mov	r9, r1
   205f8:	mov	r8, r0
   205fc:	bl	119b8 <__errno_location@plt>
   20600:	ldr	r3, [r4, #44]	; 0x2c
   20604:	ldr	r5, [r4, #4]
   20608:	add	sl, r4, #8
   2060c:	cmp	r6, #0
   20610:	orreq	r5, r5, #1
   20614:	mov	r1, #0
   20618:	ldr	r2, [r0]
   2061c:	str	r3, [sp, #16]
   20620:	ldr	r3, [r4, #40]	; 0x28
   20624:	stmib	sp, {r5, sl}
   20628:	str	r3, [sp, #12]
   2062c:	ldr	r3, [r4]
   20630:	mov	r7, r0
   20634:	str	r2, [sp, #28]
   20638:	str	r3, [sp]
   2063c:	mov	r2, r8
   20640:	mov	r3, r9
   20644:	mov	r0, r1
   20648:	bl	1ee24 <__assert_fail@plt+0xd280>
   2064c:	add	r1, r0, #1
   20650:	mov	fp, r0
   20654:	mov	r0, r1
   20658:	str	r1, [sp, #36]	; 0x24
   2065c:	bl	34808 <__assert_fail@plt+0x22c64>
   20660:	ldr	r3, [r4, #44]	; 0x2c
   20664:	mov	r2, r8
   20668:	str	r3, [sp, #16]
   2066c:	ldr	r3, [r4, #40]	; 0x28
   20670:	str	r5, [sp, #4]
   20674:	str	r3, [sp, #12]
   20678:	str	sl, [sp, #8]
   2067c:	ldr	ip, [r4]
   20680:	ldr	r1, [sp, #36]	; 0x24
   20684:	mov	r3, r9
   20688:	str	ip, [sp]
   2068c:	str	r0, [sp, #32]
   20690:	bl	1ee24 <__assert_fail@plt+0xd280>
   20694:	ldr	r2, [sp, #28]
   20698:	cmp	r6, #0
   2069c:	str	r2, [r7]
   206a0:	ldr	r0, [sp, #32]
   206a4:	strne	fp, [r6]
   206a8:	add	sp, sp, #44	; 0x2c
   206ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   206b0:	andeq	fp, r4, ip, asr #5
   206b4:	push	{r4, r5, r6, r7, r8, lr}
   206b8:	ldr	r6, [pc, #116]	; 20734 <__assert_fail@plt+0xeb90>
   206bc:	ldr	r3, [r6, #4]
   206c0:	ldr	r7, [r6]
   206c4:	cmp	r3, #1
   206c8:	movgt	r5, r7
   206cc:	movgt	r4, #1
   206d0:	ble	206f0 <__assert_fail@plt+0xeb4c>
   206d4:	ldr	r0, [r5, #12]
   206d8:	bl	184ec <__assert_fail@plt+0x6948>
   206dc:	ldr	r3, [r6, #4]
   206e0:	add	r4, r4, #1
   206e4:	cmp	r3, r4
   206e8:	add	r5, r5, #8
   206ec:	bgt	206d4 <__assert_fail@plt+0xeb30>
   206f0:	ldr	r0, [r7, #4]
   206f4:	ldr	r4, [pc, #60]	; 20738 <__assert_fail@plt+0xeb94>
   206f8:	cmp	r0, r4
   206fc:	beq	20710 <__assert_fail@plt+0xeb6c>
   20700:	bl	184ec <__assert_fail@plt+0x6948>
   20704:	mov	r3, #256	; 0x100
   20708:	str	r4, [r6, #12]
   2070c:	str	r3, [r6, #8]
   20710:	ldr	r4, [pc, #36]	; 2073c <__assert_fail@plt+0xeb98>
   20714:	cmp	r7, r4
   20718:	beq	20728 <__assert_fail@plt+0xeb84>
   2071c:	mov	r0, r7
   20720:	bl	184ec <__assert_fail@plt+0x6948>
   20724:	str	r4, [r6]
   20728:	mov	r3, #1
   2072c:	str	r3, [r6, #4]
   20730:	pop	{r4, r5, r6, r7, r8, pc}
   20734:	ldrdeq	fp, [r4], -ip
   20738:	strdeq	fp, [r4], -ip
   2073c:	andeq	fp, r4, r4, ror #3
   20740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20744:	sub	sp, sp, #44	; 0x2c
   20748:	mov	r5, r0
   2074c:	mov	sl, r1
   20750:	bl	119b8 <__errno_location@plt>
   20754:	ldr	r4, [pc, #400]	; 208ec <__assert_fail@plt+0xed48>
   20758:	cmn	r5, #-2147483647	; 0x80000001
   2075c:	ldr	r6, [r4]
   20760:	mov	r8, r0
   20764:	movne	r0, #0
   20768:	moveq	r0, #1
   2076c:	ldr	r3, [r8]
   20770:	orrs	r0, r0, r5, lsr #31
   20774:	str	r3, [sp, #24]
   20778:	bne	208e8 <__assert_fail@plt+0xed44>
   2077c:	ldr	r2, [r4, #4]
   20780:	cmp	r5, r2
   20784:	blt	207e4 <__assert_fail@plt+0xec40>
   20788:	add	r7, r4, #8
   2078c:	cmp	r6, r7
   20790:	str	r2, [sp, #36]	; 0x24
   20794:	beq	208b8 <__assert_fail@plt+0xed14>
   20798:	mov	r3, #8
   2079c:	sub	r2, r5, r2
   207a0:	mov	r0, r6
   207a4:	str	r3, [sp]
   207a8:	add	r2, r2, #1
   207ac:	mvn	r3, #-2147483648	; 0x80000000
   207b0:	add	r1, sp, #36	; 0x24
   207b4:	bl	34a24 <__assert_fail@plt+0x22e80>
   207b8:	mov	r6, r0
   207bc:	str	r0, [r4]
   207c0:	ldr	r0, [r4, #4]
   207c4:	ldr	r2, [sp, #36]	; 0x24
   207c8:	mov	r1, #0
   207cc:	sub	r2, r2, r0
   207d0:	add	r0, r6, r0, lsl #3
   207d4:	lsl	r2, r2, #3
   207d8:	bl	119e8 <memset@plt>
   207dc:	ldr	r3, [sp, #36]	; 0x24
   207e0:	str	r3, [r4, #4]
   207e4:	ldr	r4, [pc, #260]	; 208f0 <__assert_fail@plt+0xed4c>
   207e8:	add	fp, r6, r5, lsl #3
   207ec:	ldr	r9, [r6, r5, lsl #3]
   207f0:	ldr	r0, [r4, #4]
   207f4:	ldr	r3, [r4]
   207f8:	ldr	r7, [fp, #4]
   207fc:	ldr	r1, [r4, #44]	; 0x2c
   20800:	ldr	r2, [r4, #40]	; 0x28
   20804:	orr	r0, r0, #1
   20808:	str	r3, [sp]
   2080c:	add	r3, r4, #8
   20810:	str	r0, [sp, #28]
   20814:	str	r0, [sp, #4]
   20818:	str	r1, [sp, #16]
   2081c:	str	r2, [sp, #12]
   20820:	str	r3, [sp, #8]
   20824:	mov	r0, r7
   20828:	mov	r1, r9
   2082c:	mvn	r3, #0
   20830:	mov	r2, sl
   20834:	bl	1ee24 <__assert_fail@plt+0xd280>
   20838:	cmp	r9, r0
   2083c:	bhi	208a4 <__assert_fail@plt+0xed00>
   20840:	add	r3, r4, #48	; 0x30
   20844:	add	r9, r0, #1
   20848:	cmp	r7, r3
   2084c:	str	r9, [r6, r5, lsl #3]
   20850:	beq	2085c <__assert_fail@plt+0xecb8>
   20854:	mov	r0, r7
   20858:	bl	184ec <__assert_fail@plt+0x6948>
   2085c:	mov	r0, r9
   20860:	bl	34808 <__assert_fail@plt+0x22c64>
   20864:	ldr	ip, [r4, #44]	; 0x2c
   20868:	ldr	r3, [r4]
   2086c:	ldr	lr, [r4, #40]	; 0x28
   20870:	ldr	r4, [pc, #124]	; 208f4 <__assert_fail@plt+0xed50>
   20874:	mov	r2, sl
   20878:	mov	r1, r9
   2087c:	str	r0, [fp, #4]
   20880:	str	r4, [sp, #8]
   20884:	ldr	r4, [sp, #28]
   20888:	str	r3, [sp]
   2088c:	str	r4, [sp, #4]
   20890:	str	ip, [sp, #16]
   20894:	str	lr, [sp, #12]
   20898:	mvn	r3, #0
   2089c:	mov	r7, r0
   208a0:	bl	1ee24 <__assert_fail@plt+0xd280>
   208a4:	ldr	r3, [sp, #24]
   208a8:	mov	r0, r7
   208ac:	str	r3, [r8]
   208b0:	add	sp, sp, #44	; 0x2c
   208b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208b8:	mov	r3, #8
   208bc:	sub	r2, r5, r2
   208c0:	str	r3, [sp]
   208c4:	add	r1, sp, #36	; 0x24
   208c8:	add	r2, r2, #1
   208cc:	mvn	r3, #-2147483648	; 0x80000000
   208d0:	bl	34a24 <__assert_fail@plt+0x22e80>
   208d4:	mov	r6, r0
   208d8:	ldm	r7, {r0, r1}
   208dc:	str	r6, [r4]
   208e0:	stm	r6, {r0, r1}
   208e4:	b	207c0 <__assert_fail@plt+0xec1c>
   208e8:	bl	11b68 <abort@plt>
   208ec:	ldrdeq	fp, [r4], -ip
   208f0:	andeq	fp, r4, ip, asr #5
   208f4:	ldrdeq	fp, [r4], -r4
   208f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208fc:	sub	sp, sp, #52	; 0x34
   20900:	mov	r5, r0
   20904:	mov	sl, r1
   20908:	mov	fp, r2
   2090c:	bl	119b8 <__errno_location@plt>
   20910:	ldr	r4, [pc, #408]	; 20ab0 <__assert_fail@plt+0xef0c>
   20914:	cmn	r5, #-2147483647	; 0x80000001
   20918:	ldr	r6, [r4]
   2091c:	mov	r8, r0
   20920:	movne	r0, #0
   20924:	moveq	r0, #1
   20928:	ldr	r3, [r8]
   2092c:	orrs	r0, r0, r5, lsr #31
   20930:	str	r3, [sp, #28]
   20934:	bne	20aac <__assert_fail@plt+0xef08>
   20938:	ldr	r2, [r4, #4]
   2093c:	cmp	r5, r2
   20940:	blt	209a0 <__assert_fail@plt+0xedfc>
   20944:	add	r7, r4, #8
   20948:	cmp	r6, r7
   2094c:	str	r2, [sp, #44]	; 0x2c
   20950:	beq	20a7c <__assert_fail@plt+0xeed8>
   20954:	mov	r3, #8
   20958:	sub	r2, r5, r2
   2095c:	mov	r0, r6
   20960:	str	r3, [sp]
   20964:	add	r2, r2, #1
   20968:	mvn	r3, #-2147483648	; 0x80000000
   2096c:	add	r1, sp, #44	; 0x2c
   20970:	bl	34a24 <__assert_fail@plt+0x22e80>
   20974:	mov	r6, r0
   20978:	str	r0, [r4]
   2097c:	ldr	r0, [r4, #4]
   20980:	ldr	r2, [sp, #44]	; 0x2c
   20984:	mov	r1, #0
   20988:	sub	r2, r2, r0
   2098c:	add	r0, r6, r0, lsl #3
   20990:	lsl	r2, r2, #3
   20994:	bl	119e8 <memset@plt>
   20998:	ldr	r3, [sp, #44]	; 0x2c
   2099c:	str	r3, [r4, #4]
   209a0:	ldr	r4, [pc, #268]	; 20ab4 <__assert_fail@plt+0xef10>
   209a4:	add	r3, r6, r5, lsl #3
   209a8:	str	r3, [sp, #32]
   209ac:	ldr	r7, [r3, #4]
   209b0:	ldr	r0, [r4, #4]
   209b4:	ldr	r3, [r4]
   209b8:	ldr	r9, [r6, r5, lsl #3]
   209bc:	ldr	r1, [r4, #44]	; 0x2c
   209c0:	ldr	r2, [r4, #40]	; 0x28
   209c4:	orr	r0, r0, #1
   209c8:	str	r3, [sp]
   209cc:	add	r3, r4, #8
   209d0:	str	r0, [sp, #36]	; 0x24
   209d4:	str	r0, [sp, #4]
   209d8:	str	r1, [sp, #16]
   209dc:	str	r2, [sp, #12]
   209e0:	str	r3, [sp, #8]
   209e4:	mov	r0, r7
   209e8:	mov	r1, r9
   209ec:	mov	r3, fp
   209f0:	mov	r2, sl
   209f4:	bl	1ee24 <__assert_fail@plt+0xd280>
   209f8:	cmp	r9, r0
   209fc:	bhi	20a68 <__assert_fail@plt+0xeec4>
   20a00:	add	r3, r4, #48	; 0x30
   20a04:	add	r9, r0, #1
   20a08:	cmp	r7, r3
   20a0c:	str	r9, [r6, r5, lsl #3]
   20a10:	beq	20a1c <__assert_fail@plt+0xee78>
   20a14:	mov	r0, r7
   20a18:	bl	184ec <__assert_fail@plt+0x6948>
   20a1c:	mov	r0, r9
   20a20:	bl	34808 <__assert_fail@plt+0x22c64>
   20a24:	ldr	ip, [sp, #32]
   20a28:	ldr	lr, [r4, #44]	; 0x2c
   20a2c:	ldr	r5, [r4, #40]	; 0x28
   20a30:	mov	r3, fp
   20a34:	mov	r2, sl
   20a38:	mov	r1, r9
   20a3c:	str	r0, [ip, #4]
   20a40:	ldr	ip, [r4]
   20a44:	ldr	r4, [pc, #108]	; 20ab8 <__assert_fail@plt+0xef14>
   20a48:	str	lr, [sp, #16]
   20a4c:	str	r4, [sp, #8]
   20a50:	ldr	r4, [sp, #36]	; 0x24
   20a54:	str	r5, [sp, #12]
   20a58:	str	r4, [sp, #4]
   20a5c:	str	ip, [sp]
   20a60:	mov	r7, r0
   20a64:	bl	1ee24 <__assert_fail@plt+0xd280>
   20a68:	ldr	r3, [sp, #28]
   20a6c:	mov	r0, r7
   20a70:	str	r3, [r8]
   20a74:	add	sp, sp, #52	; 0x34
   20a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a7c:	mov	r3, #8
   20a80:	sub	r2, r5, r2
   20a84:	str	r3, [sp]
   20a88:	add	r1, sp, #44	; 0x2c
   20a8c:	add	r2, r2, #1
   20a90:	mvn	r3, #-2147483648	; 0x80000000
   20a94:	bl	34a24 <__assert_fail@plt+0x22e80>
   20a98:	mov	r6, r0
   20a9c:	ldm	r7, {r0, r1}
   20aa0:	str	r6, [r4]
   20aa4:	stm	r6, {r0, r1}
   20aa8:	b	2097c <__assert_fail@plt+0xedd8>
   20aac:	bl	11b68 <abort@plt>
   20ab0:	ldrdeq	fp, [r4], -ip
   20ab4:	andeq	fp, r4, ip, asr #5
   20ab8:	ldrdeq	fp, [r4], -r4
   20abc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20ac0:	sub	sp, sp, #44	; 0x2c
   20ac4:	mov	sl, r0
   20ac8:	bl	119b8 <__errno_location@plt>
   20acc:	ldr	r4, [pc, #352]	; 20c34 <__assert_fail@plt+0xf090>
   20ad0:	ldr	r2, [r4, #4]
   20ad4:	ldr	r5, [r4]
   20ad8:	cmp	r2, #0
   20adc:	ldr	r3, [r0]
   20ae0:	mov	r8, r0
   20ae4:	str	r3, [sp, #28]
   20ae8:	bgt	20b44 <__assert_fail@plt+0xefa0>
   20aec:	add	r6, r4, #8
   20af0:	cmp	r5, r6
   20af4:	str	r2, [sp, #36]	; 0x24
   20af8:	beq	20c04 <__assert_fail@plt+0xf060>
   20afc:	mov	r3, #8
   20b00:	mov	r0, r5
   20b04:	str	r3, [sp]
   20b08:	rsb	r2, r2, #1
   20b0c:	mvn	r3, #-2147483648	; 0x80000000
   20b10:	add	r1, sp, #36	; 0x24
   20b14:	bl	34a24 <__assert_fail@plt+0x22e80>
   20b18:	mov	r5, r0
   20b1c:	str	r0, [r4]
   20b20:	ldr	r0, [r4, #4]
   20b24:	ldr	r2, [sp, #36]	; 0x24
   20b28:	mov	r1, #0
   20b2c:	sub	r2, r2, r0
   20b30:	add	r0, r5, r0, lsl #3
   20b34:	lsl	r2, r2, #3
   20b38:	bl	119e8 <memset@plt>
   20b3c:	ldr	r3, [sp, #36]	; 0x24
   20b40:	str	r3, [r4, #4]
   20b44:	ldr	r4, [pc, #236]	; 20c38 <__assert_fail@plt+0xf094>
   20b48:	ldr	r9, [r5]
   20b4c:	ldr	r6, [r5, #4]
   20b50:	ldr	r7, [r4, #4]
   20b54:	ldr	r1, [r4, #44]	; 0x2c
   20b58:	ldr	r2, [r4, #40]	; 0x28
   20b5c:	ldr	r3, [r4]
   20b60:	orr	r7, r7, #1
   20b64:	add	fp, r4, #8
   20b68:	str	r1, [sp, #16]
   20b6c:	str	r2, [sp, #12]
   20b70:	str	r3, [sp]
   20b74:	str	r7, [sp, #4]
   20b78:	str	fp, [sp, #8]
   20b7c:	mov	r1, r9
   20b80:	mov	r0, r6
   20b84:	mvn	r3, #0
   20b88:	mov	r2, sl
   20b8c:	bl	1ee24 <__assert_fail@plt+0xd280>
   20b90:	cmp	r9, r0
   20b94:	bhi	20bf0 <__assert_fail@plt+0xf04c>
   20b98:	add	r3, r4, #48	; 0x30
   20b9c:	add	r9, r0, #1
   20ba0:	cmp	r6, r3
   20ba4:	str	r9, [r5]
   20ba8:	beq	20bb4 <__assert_fail@plt+0xf010>
   20bac:	mov	r0, r6
   20bb0:	bl	184ec <__assert_fail@plt+0x6948>
   20bb4:	mov	r0, r9
   20bb8:	bl	34808 <__assert_fail@plt+0x22c64>
   20bbc:	ldr	ip, [r4, #44]	; 0x2c
   20bc0:	ldr	r3, [r4]
   20bc4:	ldr	lr, [r4, #40]	; 0x28
   20bc8:	mov	r2, sl
   20bcc:	mov	r1, r9
   20bd0:	str	r0, [r5, #4]
   20bd4:	str	r3, [sp]
   20bd8:	stmib	sp, {r7, fp}
   20bdc:	str	ip, [sp, #16]
   20be0:	str	lr, [sp, #12]
   20be4:	mvn	r3, #0
   20be8:	mov	r6, r0
   20bec:	bl	1ee24 <__assert_fail@plt+0xd280>
   20bf0:	ldr	r3, [sp, #28]
   20bf4:	mov	r0, r6
   20bf8:	str	r3, [r8]
   20bfc:	add	sp, sp, #44	; 0x2c
   20c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c04:	mov	r3, #8
   20c08:	str	r3, [sp]
   20c0c:	add	r1, sp, #36	; 0x24
   20c10:	rsb	r2, r2, #1
   20c14:	mvn	r3, #-2147483648	; 0x80000000
   20c18:	mov	r0, #0
   20c1c:	bl	34a24 <__assert_fail@plt+0x22e80>
   20c20:	mov	r5, r0
   20c24:	ldm	r6, {r0, r1}
   20c28:	str	r5, [r4]
   20c2c:	stm	r5, {r0, r1}
   20c30:	b	20b20 <__assert_fail@plt+0xef7c>
   20c34:	ldrdeq	fp, [r4], -ip
   20c38:	andeq	fp, r4, ip, asr #5
   20c3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20c40:	sub	sp, sp, #44	; 0x2c
   20c44:	mov	r9, r0
   20c48:	mov	sl, r1
   20c4c:	bl	119b8 <__errno_location@plt>
   20c50:	ldr	r4, [pc, #364]	; 20dc4 <__assert_fail@plt+0xf220>
   20c54:	ldr	r2, [r4, #4]
   20c58:	ldr	r5, [r4]
   20c5c:	cmp	r2, #0
   20c60:	ldr	r3, [r0]
   20c64:	mov	r7, r0
   20c68:	str	r3, [sp, #24]
   20c6c:	bgt	20cc8 <__assert_fail@plt+0xf124>
   20c70:	add	r6, r4, #8
   20c74:	cmp	r5, r6
   20c78:	str	r2, [sp, #36]	; 0x24
   20c7c:	beq	20d94 <__assert_fail@plt+0xf1f0>
   20c80:	mov	r3, #8
   20c84:	mov	r0, r5
   20c88:	str	r3, [sp]
   20c8c:	rsb	r2, r2, #1
   20c90:	mvn	r3, #-2147483648	; 0x80000000
   20c94:	add	r1, sp, #36	; 0x24
   20c98:	bl	34a24 <__assert_fail@plt+0x22e80>
   20c9c:	mov	r5, r0
   20ca0:	str	r0, [r4]
   20ca4:	ldr	r0, [r4, #4]
   20ca8:	ldr	r2, [sp, #36]	; 0x24
   20cac:	mov	r1, #0
   20cb0:	sub	r2, r2, r0
   20cb4:	add	r0, r5, r0, lsl #3
   20cb8:	lsl	r2, r2, #3
   20cbc:	bl	119e8 <memset@plt>
   20cc0:	ldr	r3, [sp, #36]	; 0x24
   20cc4:	str	r3, [r4, #4]
   20cc8:	ldr	r4, [pc, #248]	; 20dc8 <__assert_fail@plt+0xf224>
   20ccc:	ldr	r8, [r5]
   20cd0:	ldr	r6, [r5, #4]
   20cd4:	ldr	r0, [r4, #4]
   20cd8:	ldr	r1, [r4, #44]	; 0x2c
   20cdc:	ldr	r2, [r4, #40]	; 0x28
   20ce0:	ldr	r3, [r4]
   20ce4:	orr	r0, r0, #1
   20ce8:	add	fp, r4, #8
   20cec:	str	r0, [sp, #28]
   20cf0:	str	r0, [sp, #4]
   20cf4:	str	r1, [sp, #16]
   20cf8:	str	r2, [sp, #12]
   20cfc:	str	r3, [sp]
   20d00:	str	fp, [sp, #8]
   20d04:	mov	r1, r8
   20d08:	mov	r0, r6
   20d0c:	mov	r3, sl
   20d10:	mov	r2, r9
   20d14:	bl	1ee24 <__assert_fail@plt+0xd280>
   20d18:	cmp	r8, r0
   20d1c:	bhi	20d80 <__assert_fail@plt+0xf1dc>
   20d20:	add	r3, r4, #48	; 0x30
   20d24:	add	r8, r0, #1
   20d28:	cmp	r6, r3
   20d2c:	str	r8, [r5]
   20d30:	beq	20d3c <__assert_fail@plt+0xf198>
   20d34:	mov	r0, r6
   20d38:	bl	184ec <__assert_fail@plt+0x6948>
   20d3c:	mov	r0, r8
   20d40:	bl	34808 <__assert_fail@plt+0x22c64>
   20d44:	ldr	lr, [r4, #44]	; 0x2c
   20d48:	ldr	ip, [r4]
   20d4c:	mov	r3, sl
   20d50:	mov	r2, r9
   20d54:	mov	r1, r8
   20d58:	str	r0, [r5, #4]
   20d5c:	ldr	r5, [r4, #40]	; 0x28
   20d60:	ldr	r4, [sp, #28]
   20d64:	str	fp, [sp, #8]
   20d68:	str	r4, [sp, #4]
   20d6c:	str	lr, [sp, #16]
   20d70:	str	r5, [sp, #12]
   20d74:	str	ip, [sp]
   20d78:	mov	r6, r0
   20d7c:	bl	1ee24 <__assert_fail@plt+0xd280>
   20d80:	ldr	r3, [sp, #24]
   20d84:	mov	r0, r6
   20d88:	str	r3, [r7]
   20d8c:	add	sp, sp, #44	; 0x2c
   20d90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20d94:	mov	r3, #8
   20d98:	str	r3, [sp]
   20d9c:	add	r1, sp, #36	; 0x24
   20da0:	rsb	r2, r2, #1
   20da4:	mvn	r3, #-2147483648	; 0x80000000
   20da8:	mov	r0, #0
   20dac:	bl	34a24 <__assert_fail@plt+0x22e80>
   20db0:	mov	r5, r0
   20db4:	ldm	r6, {r0, r1}
   20db8:	str	r5, [r4]
   20dbc:	stm	r5, {r0, r1}
   20dc0:	b	20ca4 <__assert_fail@plt+0xf100>
   20dc4:	ldrdeq	fp, [r4], -ip
   20dc8:	andeq	fp, r4, ip, asr #5
   20dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dd0:	sub	sp, sp, #132	; 0x84
   20dd4:	mov	r5, r1
   20dd8:	mov	r4, r0
   20ddc:	mov	r9, r2
   20de0:	add	r0, sp, #80	; 0x50
   20de4:	mov	r2, #48	; 0x30
   20de8:	mov	r1, #0
   20dec:	bl	119e8 <memset@plt>
   20df0:	cmp	r5, #10
   20df4:	beq	20fac <__assert_fail@plt+0xf408>
   20df8:	add	lr, sp, #80	; 0x50
   20dfc:	str	r5, [sp, #80]	; 0x50
   20e00:	ldm	lr!, {r0, r1, r2, r3}
   20e04:	add	ip, sp, #32
   20e08:	ldr	r6, [pc, #416]	; 20fb0 <__assert_fail@plt+0xf40c>
   20e0c:	stmia	ip!, {r0, r1, r2, r3}
   20e10:	ldm	lr!, {r0, r1, r2, r3}
   20e14:	stmia	ip!, {r0, r1, r2, r3}
   20e18:	ldm	lr, {r0, r1, r2, r3}
   20e1c:	stm	ip, {r0, r1, r2, r3}
   20e20:	bl	119b8 <__errno_location@plt>
   20e24:	cmn	r4, #-2147483647	; 0x80000001
   20e28:	ldr	r5, [r6]
   20e2c:	mov	r7, r0
   20e30:	movne	r0, #0
   20e34:	moveq	r0, #1
   20e38:	ldr	r3, [r7]
   20e3c:	orrs	r0, r0, r4, lsr #31
   20e40:	str	r3, [sp, #24]
   20e44:	bne	20fac <__assert_fail@plt+0xf408>
   20e48:	ldr	r2, [r6, #4]
   20e4c:	cmp	r4, r2
   20e50:	blt	20eb0 <__assert_fail@plt+0xf30c>
   20e54:	add	r8, r6, #8
   20e58:	cmp	r5, r8
   20e5c:	str	r2, [sp, #80]	; 0x50
   20e60:	beq	20f7c <__assert_fail@plt+0xf3d8>
   20e64:	mov	r3, #8
   20e68:	sub	r2, r4, r2
   20e6c:	mov	r0, r5
   20e70:	str	r3, [sp]
   20e74:	add	r2, r2, #1
   20e78:	add	r1, sp, #80	; 0x50
   20e7c:	mvn	r3, #-2147483648	; 0x80000000
   20e80:	bl	34a24 <__assert_fail@plt+0x22e80>
   20e84:	mov	r5, r0
   20e88:	str	r0, [r6]
   20e8c:	ldr	r0, [r6, #4]
   20e90:	ldr	r2, [sp, #80]	; 0x50
   20e94:	mov	r1, #0
   20e98:	sub	r2, r2, r0
   20e9c:	add	r0, r5, r0, lsl #3
   20ea0:	lsl	r2, r2, #3
   20ea4:	bl	119e8 <memset@plt>
   20ea8:	ldr	r3, [sp, #80]	; 0x50
   20eac:	str	r3, [r6, #4]
   20eb0:	add	fp, r5, r4, lsl #3
   20eb4:	ldr	r1, [sp, #36]	; 0x24
   20eb8:	ldr	r8, [r5, r4, lsl #3]
   20ebc:	ldr	r6, [fp, #4]
   20ec0:	ldr	r2, [sp, #72]	; 0x48
   20ec4:	ldr	r3, [sp, #32]
   20ec8:	ldr	ip, [sp, #76]	; 0x4c
   20ecc:	orr	r1, r1, #1
   20ed0:	add	sl, sp, #40	; 0x28
   20ed4:	str	r1, [sp, #28]
   20ed8:	str	r1, [sp, #4]
   20edc:	str	r2, [sp, #12]
   20ee0:	str	r3, [sp]
   20ee4:	mov	r0, r6
   20ee8:	mov	r1, r8
   20eec:	str	ip, [sp, #16]
   20ef0:	str	sl, [sp, #8]
   20ef4:	mvn	r3, #0
   20ef8:	mov	r2, r9
   20efc:	bl	1ee24 <__assert_fail@plt+0xd280>
   20f00:	cmp	r8, r0
   20f04:	bhi	20f68 <__assert_fail@plt+0xf3c4>
   20f08:	ldr	r3, [pc, #164]	; 20fb4 <__assert_fail@plt+0xf410>
   20f0c:	add	r8, r0, #1
   20f10:	cmp	r6, r3
   20f14:	str	r8, [r5, r4, lsl #3]
   20f18:	beq	20f24 <__assert_fail@plt+0xf380>
   20f1c:	mov	r0, r6
   20f20:	bl	184ec <__assert_fail@plt+0x6948>
   20f24:	mov	r0, r8
   20f28:	bl	34808 <__assert_fail@plt+0x22c64>
   20f2c:	ldr	lr, [sp, #76]	; 0x4c
   20f30:	ldr	r3, [sp, #32]
   20f34:	ldr	ip, [sp, #72]	; 0x48
   20f38:	ldr	r4, [sp, #28]
   20f3c:	mov	r2, r9
   20f40:	mov	r1, r8
   20f44:	str	r0, [fp, #4]
   20f48:	str	r3, [sp]
   20f4c:	str	sl, [sp, #8]
   20f50:	str	r4, [sp, #4]
   20f54:	str	lr, [sp, #16]
   20f58:	str	ip, [sp, #12]
   20f5c:	mvn	r3, #0
   20f60:	mov	r6, r0
   20f64:	bl	1ee24 <__assert_fail@plt+0xd280>
   20f68:	ldr	r3, [sp, #24]
   20f6c:	mov	r0, r6
   20f70:	str	r3, [r7]
   20f74:	add	sp, sp, #132	; 0x84
   20f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20f7c:	mov	r3, #8
   20f80:	sub	r2, r4, r2
   20f84:	add	r1, sp, #80	; 0x50
   20f88:	str	r3, [sp]
   20f8c:	add	r2, r2, #1
   20f90:	mvn	r3, #-2147483648	; 0x80000000
   20f94:	bl	34a24 <__assert_fail@plt+0x22e80>
   20f98:	mov	r5, r0
   20f9c:	ldm	r8, {r0, r1}
   20fa0:	str	r5, [r6]
   20fa4:	stm	r5, {r0, r1}
   20fa8:	b	20e8c <__assert_fail@plt+0xf2e8>
   20fac:	bl	11b68 <abort@plt>
   20fb0:	ldrdeq	fp, [r4], -ip
   20fb4:	strdeq	fp, [r4], -ip
   20fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20fbc:	sub	sp, sp, #132	; 0x84
   20fc0:	mov	r5, r1
   20fc4:	mov	r4, r0
   20fc8:	mov	r9, r2
   20fcc:	add	r0, sp, #80	; 0x50
   20fd0:	mov	r2, #48	; 0x30
   20fd4:	mov	r1, #0
   20fd8:	mov	sl, r3
   20fdc:	bl	119e8 <memset@plt>
   20fe0:	cmp	r5, #10
   20fe4:	beq	211a0 <__assert_fail@plt+0xf5fc>
   20fe8:	add	lr, sp, #80	; 0x50
   20fec:	str	r5, [sp, #80]	; 0x50
   20ff0:	ldm	lr!, {r0, r1, r2, r3}
   20ff4:	add	ip, sp, #32
   20ff8:	ldr	r6, [pc, #420]	; 211a4 <__assert_fail@plt+0xf600>
   20ffc:	stmia	ip!, {r0, r1, r2, r3}
   21000:	ldm	lr!, {r0, r1, r2, r3}
   21004:	stmia	ip!, {r0, r1, r2, r3}
   21008:	ldm	lr, {r0, r1, r2, r3}
   2100c:	stm	ip, {r0, r1, r2, r3}
   21010:	bl	119b8 <__errno_location@plt>
   21014:	cmn	r4, #-2147483647	; 0x80000001
   21018:	ldr	r5, [r6]
   2101c:	mov	r7, r0
   21020:	movne	r0, #0
   21024:	moveq	r0, #1
   21028:	ldr	r3, [r7]
   2102c:	orrs	r0, r0, r4, lsr #31
   21030:	str	r3, [sp, #24]
   21034:	bne	211a0 <__assert_fail@plt+0xf5fc>
   21038:	ldr	r2, [r6, #4]
   2103c:	cmp	r4, r2
   21040:	blt	210a0 <__assert_fail@plt+0xf4fc>
   21044:	add	r8, r6, #8
   21048:	cmp	r5, r8
   2104c:	str	r2, [sp, #80]	; 0x50
   21050:	beq	21170 <__assert_fail@plt+0xf5cc>
   21054:	mov	r3, #8
   21058:	sub	r2, r4, r2
   2105c:	mov	r0, r5
   21060:	str	r3, [sp]
   21064:	add	r2, r2, #1
   21068:	add	r1, sp, #80	; 0x50
   2106c:	mvn	r3, #-2147483648	; 0x80000000
   21070:	bl	34a24 <__assert_fail@plt+0x22e80>
   21074:	mov	r5, r0
   21078:	str	r0, [r6]
   2107c:	ldr	r0, [r6, #4]
   21080:	ldr	r2, [sp, #80]	; 0x50
   21084:	mov	r1, #0
   21088:	sub	r2, r2, r0
   2108c:	add	r0, r5, r0, lsl #3
   21090:	lsl	r2, r2, #3
   21094:	bl	119e8 <memset@plt>
   21098:	ldr	r3, [sp, #80]	; 0x50
   2109c:	str	r3, [r6, #4]
   210a0:	add	fp, r5, r4, lsl #3
   210a4:	ldr	r3, [sp, #32]
   210a8:	ldr	r1, [sp, #36]	; 0x24
   210ac:	ldr	r8, [r5, r4, lsl #3]
   210b0:	ldr	r6, [fp, #4]
   210b4:	ldr	r2, [sp, #72]	; 0x48
   210b8:	ldr	ip, [sp, #76]	; 0x4c
   210bc:	orr	r1, r1, #1
   210c0:	str	r3, [sp]
   210c4:	add	r3, sp, #40	; 0x28
   210c8:	str	r1, [sp, #28]
   210cc:	str	r1, [sp, #4]
   210d0:	str	r2, [sp, #12]
   210d4:	str	r3, [sp, #8]
   210d8:	mov	r0, r6
   210dc:	mov	r1, r8
   210e0:	str	ip, [sp, #16]
   210e4:	mov	r3, sl
   210e8:	mov	r2, r9
   210ec:	bl	1ee24 <__assert_fail@plt+0xd280>
   210f0:	cmp	r8, r0
   210f4:	bhi	2115c <__assert_fail@plt+0xf5b8>
   210f8:	ldr	r3, [pc, #168]	; 211a8 <__assert_fail@plt+0xf604>
   210fc:	add	r8, r0, #1
   21100:	cmp	r6, r3
   21104:	str	r8, [r5, r4, lsl #3]
   21108:	beq	21114 <__assert_fail@plt+0xf570>
   2110c:	mov	r0, r6
   21110:	bl	184ec <__assert_fail@plt+0x6948>
   21114:	mov	r0, r8
   21118:	bl	34808 <__assert_fail@plt+0x22c64>
   2111c:	add	lr, sp, #40	; 0x28
   21120:	ldr	ip, [sp, #76]	; 0x4c
   21124:	ldr	r4, [sp, #72]	; 0x48
   21128:	ldr	r5, [sp, #28]
   2112c:	mov	r3, sl
   21130:	mov	r2, r9
   21134:	mov	r1, r8
   21138:	str	r0, [fp, #4]
   2113c:	str	lr, [sp, #8]
   21140:	ldr	lr, [sp, #32]
   21144:	str	r5, [sp, #4]
   21148:	str	ip, [sp, #16]
   2114c:	str	r4, [sp, #12]
   21150:	str	lr, [sp]
   21154:	mov	r6, r0
   21158:	bl	1ee24 <__assert_fail@plt+0xd280>
   2115c:	ldr	r3, [sp, #24]
   21160:	mov	r0, r6
   21164:	str	r3, [r7]
   21168:	add	sp, sp, #132	; 0x84
   2116c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21170:	mov	r3, #8
   21174:	sub	r2, r4, r2
   21178:	add	r1, sp, #80	; 0x50
   2117c:	str	r3, [sp]
   21180:	add	r2, r2, #1
   21184:	mvn	r3, #-2147483648	; 0x80000000
   21188:	bl	34a24 <__assert_fail@plt+0x22e80>
   2118c:	mov	r5, r0
   21190:	ldm	r8, {r0, r1}
   21194:	str	r5, [r6]
   21198:	stm	r5, {r0, r1}
   2119c:	b	2107c <__assert_fail@plt+0xf4d8>
   211a0:	bl	11b68 <abort@plt>
   211a4:	ldrdeq	fp, [r4], -ip
   211a8:	strdeq	fp, [r4], -ip
   211ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211b0:	sub	sp, sp, #124	; 0x7c
   211b4:	mov	r4, r0
   211b8:	mov	r9, r1
   211bc:	add	r0, sp, #72	; 0x48
   211c0:	mov	r2, #48	; 0x30
   211c4:	mov	r1, #0
   211c8:	bl	119e8 <memset@plt>
   211cc:	cmp	r4, #10
   211d0:	beq	2135c <__assert_fail@plt+0xf7b8>
   211d4:	add	lr, sp, #72	; 0x48
   211d8:	str	r4, [sp, #72]	; 0x48
   211dc:	ldm	lr!, {r0, r1, r2, r3}
   211e0:	add	ip, sp, #24
   211e4:	ldr	r5, [pc, #372]	; 21360 <__assert_fail@plt+0xf7bc>
   211e8:	stmia	ip!, {r0, r1, r2, r3}
   211ec:	ldm	lr!, {r0, r1, r2, r3}
   211f0:	stmia	ip!, {r0, r1, r2, r3}
   211f4:	ldm	lr, {r0, r1, r2, r3}
   211f8:	stm	ip, {r0, r1, r2, r3}
   211fc:	bl	119b8 <__errno_location@plt>
   21200:	ldr	r2, [r5, #4]
   21204:	ldr	r4, [r5]
   21208:	cmp	r2, #0
   2120c:	mov	r7, r0
   21210:	ldr	fp, [r0]
   21214:	bgt	21270 <__assert_fail@plt+0xf6cc>
   21218:	add	r6, r5, #8
   2121c:	cmp	r4, r6
   21220:	str	r2, [sp, #72]	; 0x48
   21224:	beq	2132c <__assert_fail@plt+0xf788>
   21228:	mov	r3, #8
   2122c:	mov	r0, r4
   21230:	str	r3, [sp]
   21234:	rsb	r2, r2, #1
   21238:	add	r1, sp, #72	; 0x48
   2123c:	mvn	r3, #-2147483648	; 0x80000000
   21240:	bl	34a24 <__assert_fail@plt+0x22e80>
   21244:	mov	r4, r0
   21248:	str	r0, [r5]
   2124c:	ldr	r0, [r5, #4]
   21250:	ldr	r2, [sp, #72]	; 0x48
   21254:	mov	r1, #0
   21258:	sub	r2, r2, r0
   2125c:	add	r0, r4, r0, lsl #3
   21260:	lsl	r2, r2, #3
   21264:	bl	119e8 <memset@plt>
   21268:	ldr	r3, [sp, #72]	; 0x48
   2126c:	str	r3, [r5, #4]
   21270:	ldr	r6, [sp, #28]
   21274:	ldr	r8, [r4]
   21278:	ldr	r5, [r4, #4]
   2127c:	ldr	r2, [sp, #64]	; 0x40
   21280:	ldr	r3, [sp, #24]
   21284:	ldr	ip, [sp, #68]	; 0x44
   21288:	orr	r6, r6, #1
   2128c:	add	sl, sp, #32
   21290:	str	r2, [sp, #12]
   21294:	str	r3, [sp]
   21298:	str	r6, [sp, #4]
   2129c:	mov	r1, r8
   212a0:	mov	r0, r5
   212a4:	str	ip, [sp, #16]
   212a8:	str	sl, [sp, #8]
   212ac:	mvn	r3, #0
   212b0:	mov	r2, r9
   212b4:	bl	1ee24 <__assert_fail@plt+0xd280>
   212b8:	cmp	r8, r0
   212bc:	bhi	2131c <__assert_fail@plt+0xf778>
   212c0:	ldr	r3, [pc, #156]	; 21364 <__assert_fail@plt+0xf7c0>
   212c4:	add	r8, r0, #1
   212c8:	cmp	r5, r3
   212cc:	str	r8, [r4]
   212d0:	beq	212dc <__assert_fail@plt+0xf738>
   212d4:	mov	r0, r5
   212d8:	bl	184ec <__assert_fail@plt+0x6948>
   212dc:	mov	r0, r8
   212e0:	bl	34808 <__assert_fail@plt+0x22c64>
   212e4:	ldr	lr, [sp, #68]	; 0x44
   212e8:	ldr	r3, [sp, #24]
   212ec:	ldr	ip, [sp, #64]	; 0x40
   212f0:	mov	r2, r9
   212f4:	mov	r1, r8
   212f8:	str	r0, [r4, #4]
   212fc:	str	r3, [sp]
   21300:	str	sl, [sp, #8]
   21304:	str	r6, [sp, #4]
   21308:	str	lr, [sp, #16]
   2130c:	str	ip, [sp, #12]
   21310:	mvn	r3, #0
   21314:	mov	r5, r0
   21318:	bl	1ee24 <__assert_fail@plt+0xd280>
   2131c:	mov	r0, r5
   21320:	str	fp, [r7]
   21324:	add	sp, sp, #124	; 0x7c
   21328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2132c:	mov	r3, #8
   21330:	add	r1, sp, #72	; 0x48
   21334:	str	r3, [sp]
   21338:	rsb	r2, r2, #1
   2133c:	mvn	r3, #-2147483648	; 0x80000000
   21340:	mov	r0, #0
   21344:	bl	34a24 <__assert_fail@plt+0x22e80>
   21348:	mov	r4, r0
   2134c:	ldm	r6, {r0, r1}
   21350:	str	r4, [r5]
   21354:	stm	r4, {r0, r1}
   21358:	b	2124c <__assert_fail@plt+0xf6a8>
   2135c:	bl	11b68 <abort@plt>
   21360:	ldrdeq	fp, [r4], -ip
   21364:	strdeq	fp, [r4], -ip
   21368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2136c:	sub	sp, sp, #132	; 0x84
   21370:	mov	r4, r0
   21374:	mov	r9, r1
   21378:	mov	sl, r2
   2137c:	add	r0, sp, #80	; 0x50
   21380:	mov	r2, #48	; 0x30
   21384:	mov	r1, #0
   21388:	bl	119e8 <memset@plt>
   2138c:	cmp	r4, #10
   21390:	beq	21524 <__assert_fail@plt+0xf980>
   21394:	add	lr, sp, #80	; 0x50
   21398:	str	r4, [sp, #80]	; 0x50
   2139c:	ldm	lr!, {r0, r1, r2, r3}
   213a0:	add	ip, sp, #32
   213a4:	ldr	r5, [pc, #380]	; 21528 <__assert_fail@plt+0xf984>
   213a8:	stmia	ip!, {r0, r1, r2, r3}
   213ac:	ldm	lr!, {r0, r1, r2, r3}
   213b0:	stmia	ip!, {r0, r1, r2, r3}
   213b4:	ldm	lr, {r0, r1, r2, r3}
   213b8:	stm	ip, {r0, r1, r2, r3}
   213bc:	bl	119b8 <__errno_location@plt>
   213c0:	ldr	r2, [r5, #4]
   213c4:	ldr	r4, [r5]
   213c8:	cmp	r2, #0
   213cc:	ldr	r3, [r0]
   213d0:	mov	r7, r0
   213d4:	str	r3, [sp, #28]
   213d8:	bgt	21434 <__assert_fail@plt+0xf890>
   213dc:	add	r6, r5, #8
   213e0:	cmp	r4, r6
   213e4:	str	r2, [sp, #80]	; 0x50
   213e8:	beq	214f4 <__assert_fail@plt+0xf950>
   213ec:	mov	r3, #8
   213f0:	mov	r0, r4
   213f4:	str	r3, [sp]
   213f8:	rsb	r2, r2, #1
   213fc:	add	r1, sp, #80	; 0x50
   21400:	mvn	r3, #-2147483648	; 0x80000000
   21404:	bl	34a24 <__assert_fail@plt+0x22e80>
   21408:	mov	r4, r0
   2140c:	str	r0, [r5]
   21410:	ldr	r0, [r5, #4]
   21414:	ldr	r2, [sp, #80]	; 0x50
   21418:	mov	r1, #0
   2141c:	sub	r2, r2, r0
   21420:	add	r0, r4, r0, lsl #3
   21424:	lsl	r2, r2, #3
   21428:	bl	119e8 <memset@plt>
   2142c:	ldr	r3, [sp, #80]	; 0x50
   21430:	str	r3, [r5, #4]
   21434:	ldr	r6, [sp, #36]	; 0x24
   21438:	ldr	r8, [r4]
   2143c:	ldr	r5, [r4, #4]
   21440:	ldr	r2, [sp, #72]	; 0x48
   21444:	ldr	r3, [sp, #32]
   21448:	ldr	ip, [sp, #76]	; 0x4c
   2144c:	orr	r6, r6, #1
   21450:	add	fp, sp, #40	; 0x28
   21454:	str	r2, [sp, #12]
   21458:	str	r3, [sp]
   2145c:	str	r6, [sp, #4]
   21460:	mov	r1, r8
   21464:	mov	r0, r5
   21468:	str	ip, [sp, #16]
   2146c:	str	fp, [sp, #8]
   21470:	mov	r3, sl
   21474:	mov	r2, r9
   21478:	bl	1ee24 <__assert_fail@plt+0xd280>
   2147c:	cmp	r8, r0
   21480:	bhi	214e0 <__assert_fail@plt+0xf93c>
   21484:	ldr	r3, [pc, #160]	; 2152c <__assert_fail@plt+0xf988>
   21488:	add	r8, r0, #1
   2148c:	cmp	r5, r3
   21490:	str	r8, [r4]
   21494:	beq	214a0 <__assert_fail@plt+0xf8fc>
   21498:	mov	r0, r5
   2149c:	bl	184ec <__assert_fail@plt+0x6948>
   214a0:	mov	r0, r8
   214a4:	bl	34808 <__assert_fail@plt+0x22c64>
   214a8:	ldr	ip, [sp, #76]	; 0x4c
   214ac:	ldr	lr, [sp, #32]
   214b0:	mov	r3, sl
   214b4:	mov	r2, r9
   214b8:	mov	r1, r8
   214bc:	str	r0, [r4, #4]
   214c0:	ldr	r4, [sp, #72]	; 0x48
   214c4:	str	fp, [sp, #8]
   214c8:	str	r6, [sp, #4]
   214cc:	str	ip, [sp, #16]
   214d0:	str	r4, [sp, #12]
   214d4:	str	lr, [sp]
   214d8:	mov	r5, r0
   214dc:	bl	1ee24 <__assert_fail@plt+0xd280>
   214e0:	ldr	r3, [sp, #28]
   214e4:	mov	r0, r5
   214e8:	str	r3, [r7]
   214ec:	add	sp, sp, #132	; 0x84
   214f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   214f4:	mov	r3, #8
   214f8:	add	r1, sp, #80	; 0x50
   214fc:	str	r3, [sp]
   21500:	rsb	r2, r2, #1
   21504:	mvn	r3, #-2147483648	; 0x80000000
   21508:	mov	r0, #0
   2150c:	bl	34a24 <__assert_fail@plt+0x22e80>
   21510:	mov	r4, r0
   21514:	ldm	r6, {r0, r1}
   21518:	str	r4, [r5]
   2151c:	stm	r4, {r0, r1}
   21520:	b	21410 <__assert_fail@plt+0xf86c>
   21524:	bl	11b68 <abort@plt>
   21528:	ldrdeq	fp, [r4], -ip
   2152c:	strdeq	fp, [r4], -ip
   21530:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21534:	mov	r4, r2
   21538:	ldr	lr, [pc, #432]	; 216f0 <__assert_fail@plt+0xfb4c>
   2153c:	mov	sl, r0
   21540:	mov	fp, r1
   21544:	ldm	lr!, {r0, r1, r2, r3}
   21548:	sub	sp, sp, #92	; 0x5c
   2154c:	add	ip, sp, #40	; 0x28
   21550:	lsr	r7, r4, #5
   21554:	stmia	ip!, {r0, r1, r2, r3}
   21558:	add	r6, sp, #48	; 0x30
   2155c:	ldm	lr!, {r0, r1, r2, r3}
   21560:	and	r4, r4, #31
   21564:	ldr	r5, [pc, #392]	; 216f4 <__assert_fail@plt+0xfb50>
   21568:	stmia	ip!, {r0, r1, r2, r3}
   2156c:	ldm	lr, {r0, r1, r2, r3}
   21570:	stm	ip, {r0, r1, r2, r3}
   21574:	ldr	r2, [r6, r7, lsl #2]
   21578:	lsr	r3, r2, r4
   2157c:	eor	r3, r3, #1
   21580:	and	r3, r3, #1
   21584:	eor	r4, r2, r3, lsl r4
   21588:	str	r4, [r6, r7, lsl #2]
   2158c:	bl	119b8 <__errno_location@plt>
   21590:	ldr	r2, [r5, #4]
   21594:	ldr	r4, [r5]
   21598:	cmp	r2, #0
   2159c:	ldr	r3, [r0]
   215a0:	mov	r8, r0
   215a4:	str	r3, [sp, #28]
   215a8:	bgt	21604 <__assert_fail@plt+0xfa60>
   215ac:	add	r7, r5, #8
   215b0:	cmp	r4, r7
   215b4:	str	r2, [sp, #36]	; 0x24
   215b8:	beq	216c0 <__assert_fail@plt+0xfb1c>
   215bc:	mov	r3, #8
   215c0:	mov	r0, r4
   215c4:	str	r3, [sp]
   215c8:	rsb	r2, r2, #1
   215cc:	mvn	r3, #-2147483648	; 0x80000000
   215d0:	add	r1, sp, #36	; 0x24
   215d4:	bl	34a24 <__assert_fail@plt+0x22e80>
   215d8:	mov	r4, r0
   215dc:	str	r0, [r5]
   215e0:	ldr	r0, [r5, #4]
   215e4:	ldr	r2, [sp, #36]	; 0x24
   215e8:	mov	r1, #0
   215ec:	sub	r2, r2, r0
   215f0:	add	r0, r4, r0, lsl #3
   215f4:	lsl	r2, r2, #3
   215f8:	bl	119e8 <memset@plt>
   215fc:	ldr	r3, [sp, #36]	; 0x24
   21600:	str	r3, [r5, #4]
   21604:	ldr	r7, [sp, #44]	; 0x2c
   21608:	ldr	r9, [r4]
   2160c:	ldr	r5, [r4, #4]
   21610:	ldr	r2, [sp, #80]	; 0x50
   21614:	ldr	r3, [sp, #40]	; 0x28
   21618:	ldr	ip, [sp, #84]	; 0x54
   2161c:	orr	r7, r7, #1
   21620:	str	r2, [sp, #12]
   21624:	str	r3, [sp]
   21628:	str	r7, [sp, #4]
   2162c:	str	r6, [sp, #8]
   21630:	mov	r1, r9
   21634:	mov	r0, r5
   21638:	str	ip, [sp, #16]
   2163c:	mov	r3, fp
   21640:	mov	r2, sl
   21644:	bl	1ee24 <__assert_fail@plt+0xd280>
   21648:	cmp	r9, r0
   2164c:	bhi	216ac <__assert_fail@plt+0xfb08>
   21650:	ldr	r3, [pc, #160]	; 216f8 <__assert_fail@plt+0xfb54>
   21654:	add	r9, r0, #1
   21658:	cmp	r5, r3
   2165c:	str	r9, [r4]
   21660:	beq	2166c <__assert_fail@plt+0xfac8>
   21664:	mov	r0, r5
   21668:	bl	184ec <__assert_fail@plt+0x6948>
   2166c:	mov	r0, r9
   21670:	bl	34808 <__assert_fail@plt+0x22c64>
   21674:	ldr	ip, [sp, #84]	; 0x54
   21678:	ldr	lr, [sp, #40]	; 0x28
   2167c:	mov	r3, fp
   21680:	mov	r2, sl
   21684:	mov	r1, r9
   21688:	str	r0, [r4, #4]
   2168c:	ldr	r4, [sp, #80]	; 0x50
   21690:	str	r6, [sp, #8]
   21694:	str	r7, [sp, #4]
   21698:	str	ip, [sp, #16]
   2169c:	str	r4, [sp, #12]
   216a0:	str	lr, [sp]
   216a4:	mov	r5, r0
   216a8:	bl	1ee24 <__assert_fail@plt+0xd280>
   216ac:	ldr	r3, [sp, #28]
   216b0:	mov	r0, r5
   216b4:	str	r3, [r8]
   216b8:	add	sp, sp, #92	; 0x5c
   216bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   216c0:	mov	r3, #8
   216c4:	str	r3, [sp]
   216c8:	add	r1, sp, #36	; 0x24
   216cc:	rsb	r2, r2, #1
   216d0:	mvn	r3, #-2147483648	; 0x80000000
   216d4:	mov	r0, #0
   216d8:	bl	34a24 <__assert_fail@plt+0x22e80>
   216dc:	mov	r4, r0
   216e0:	ldm	r7, {r0, r1}
   216e4:	str	r4, [r5]
   216e8:	stm	r4, {r0, r1}
   216ec:	b	215e0 <__assert_fail@plt+0xfa3c>
   216f0:	andeq	fp, r4, ip, asr #5
   216f4:	ldrdeq	fp, [r4], -ip
   216f8:	strdeq	fp, [r4], -ip
   216fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21700:	mov	r4, r1
   21704:	ldr	lr, [pc, #420]	; 218b0 <__assert_fail@plt+0xfd0c>
   21708:	mov	r6, r0
   2170c:	sub	sp, sp, #84	; 0x54
   21710:	ldm	lr!, {r0, r1, r2, r3}
   21714:	add	ip, sp, #32
   21718:	lsr	r8, r4, #5
   2171c:	add	r5, sp, #40	; 0x28
   21720:	stmia	ip!, {r0, r1, r2, r3}
   21724:	and	r4, r4, #31
   21728:	ldm	lr!, {r0, r1, r2, r3}
   2172c:	ldr	r7, [pc, #384]	; 218b4 <__assert_fail@plt+0xfd10>
   21730:	stmia	ip!, {r0, r1, r2, r3}
   21734:	ldm	lr, {r0, r1, r2, r3}
   21738:	stm	ip, {r0, r1, r2, r3}
   2173c:	ldr	r2, [r5, r8, lsl #2]
   21740:	lsr	r3, r2, r4
   21744:	eor	r3, r3, #1
   21748:	and	r3, r3, #1
   2174c:	eor	r4, r2, r3, lsl r4
   21750:	str	r4, [r5, r8, lsl #2]
   21754:	bl	119b8 <__errno_location@plt>
   21758:	ldr	r2, [r7, #4]
   2175c:	ldr	r4, [r7]
   21760:	cmp	r2, #0
   21764:	mov	r9, r0
   21768:	ldr	sl, [r0]
   2176c:	bgt	217c8 <__assert_fail@plt+0xfc24>
   21770:	add	r8, r7, #8
   21774:	cmp	r4, r8
   21778:	str	r2, [sp, #28]
   2177c:	beq	21880 <__assert_fail@plt+0xfcdc>
   21780:	mov	r3, #8
   21784:	mov	r0, r4
   21788:	str	r3, [sp]
   2178c:	rsb	r2, r2, #1
   21790:	mvn	r3, #-2147483648	; 0x80000000
   21794:	add	r1, sp, #28
   21798:	bl	34a24 <__assert_fail@plt+0x22e80>
   2179c:	mov	r4, r0
   217a0:	str	r0, [r7]
   217a4:	ldr	r0, [r7, #4]
   217a8:	ldr	r2, [sp, #28]
   217ac:	mov	r1, #0
   217b0:	sub	r2, r2, r0
   217b4:	add	r0, r4, r0, lsl #3
   217b8:	lsl	r2, r2, #3
   217bc:	bl	119e8 <memset@plt>
   217c0:	ldr	r3, [sp, #28]
   217c4:	str	r3, [r7, #4]
   217c8:	ldr	r8, [sp, #36]	; 0x24
   217cc:	ldr	fp, [r4]
   217d0:	ldr	r7, [r4, #4]
   217d4:	ldr	r2, [sp, #72]	; 0x48
   217d8:	ldr	r3, [sp, #32]
   217dc:	ldr	ip, [sp, #76]	; 0x4c
   217e0:	orr	r8, r8, #1
   217e4:	str	r2, [sp, #12]
   217e8:	str	r3, [sp]
   217ec:	str	r8, [sp, #4]
   217f0:	str	r5, [sp, #8]
   217f4:	mov	r1, fp
   217f8:	mov	r0, r7
   217fc:	str	ip, [sp, #16]
   21800:	mvn	r3, #0
   21804:	mov	r2, r6
   21808:	bl	1ee24 <__assert_fail@plt+0xd280>
   2180c:	cmp	fp, r0
   21810:	bhi	21870 <__assert_fail@plt+0xfccc>
   21814:	ldr	r3, [pc, #156]	; 218b8 <__assert_fail@plt+0xfd14>
   21818:	add	fp, r0, #1
   2181c:	cmp	r7, r3
   21820:	str	fp, [r4]
   21824:	beq	21830 <__assert_fail@plt+0xfc8c>
   21828:	mov	r0, r7
   2182c:	bl	184ec <__assert_fail@plt+0x6948>
   21830:	mov	r0, fp
   21834:	bl	34808 <__assert_fail@plt+0x22c64>
   21838:	ldr	lr, [sp, #76]	; 0x4c
   2183c:	ldr	r3, [sp, #32]
   21840:	ldr	ip, [sp, #72]	; 0x48
   21844:	mov	r2, r6
   21848:	mov	r1, fp
   2184c:	str	r0, [r4, #4]
   21850:	str	r3, [sp]
   21854:	str	r5, [sp, #8]
   21858:	str	r8, [sp, #4]
   2185c:	str	lr, [sp, #16]
   21860:	str	ip, [sp, #12]
   21864:	mvn	r3, #0
   21868:	mov	r7, r0
   2186c:	bl	1ee24 <__assert_fail@plt+0xd280>
   21870:	mov	r0, r7
   21874:	str	sl, [r9]
   21878:	add	sp, sp, #84	; 0x54
   2187c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21880:	mov	r3, #8
   21884:	str	r3, [sp]
   21888:	add	r1, sp, #28
   2188c:	rsb	r2, r2, #1
   21890:	mvn	r3, #-2147483648	; 0x80000000
   21894:	mov	r0, #0
   21898:	bl	34a24 <__assert_fail@plt+0x22e80>
   2189c:	mov	r4, r0
   218a0:	ldm	r8, {r0, r1}
   218a4:	str	r4, [r7]
   218a8:	stm	r4, {r0, r1}
   218ac:	b	217a4 <__assert_fail@plt+0xfc00>
   218b0:	andeq	fp, r4, ip, asr #5
   218b4:	ldrdeq	fp, [r4], -ip
   218b8:	strdeq	fp, [r4], -ip
   218bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218c0:	mov	r6, r0
   218c4:	ldr	lr, [pc, #404]	; 21a60 <__assert_fail@plt+0xfebc>
   218c8:	sub	sp, sp, #84	; 0x54
   218cc:	add	ip, sp, #32
   218d0:	ldm	lr!, {r0, r1, r2, r3}
   218d4:	ldr	r5, [pc, #392]	; 21a64 <__assert_fail@plt+0xfec0>
   218d8:	stmia	ip!, {r0, r1, r2, r3}
   218dc:	ldm	lr!, {r0, r1, r2, r3}
   218e0:	ldr	r4, [sp, #44]	; 0x2c
   218e4:	stmia	ip!, {r0, r1, r2, r3}
   218e8:	ldm	lr, {r0, r1, r2, r3}
   218ec:	mvn	lr, r4
   218f0:	and	lr, lr, #67108864	; 0x4000000
   218f4:	eor	lr, lr, r4
   218f8:	stm	ip, {r0, r1, r2, r3}
   218fc:	str	lr, [sp, #44]	; 0x2c
   21900:	bl	119b8 <__errno_location@plt>
   21904:	ldr	r2, [r5, #4]
   21908:	ldr	r4, [r5]
   2190c:	cmp	r2, #0
   21910:	mov	r8, r0
   21914:	ldr	sl, [r0]
   21918:	bgt	21974 <__assert_fail@plt+0xfdd0>
   2191c:	add	r7, r5, #8
   21920:	cmp	r4, r7
   21924:	str	r2, [sp, #28]
   21928:	beq	21a30 <__assert_fail@plt+0xfe8c>
   2192c:	mov	r3, #8
   21930:	mov	r0, r4
   21934:	str	r3, [sp]
   21938:	rsb	r2, r2, #1
   2193c:	mvn	r3, #-2147483648	; 0x80000000
   21940:	add	r1, sp, #28
   21944:	bl	34a24 <__assert_fail@plt+0x22e80>
   21948:	mov	r4, r0
   2194c:	str	r0, [r5]
   21950:	ldr	r0, [r5, #4]
   21954:	ldr	r2, [sp, #28]
   21958:	mov	r1, #0
   2195c:	sub	r2, r2, r0
   21960:	add	r0, r4, r0, lsl #3
   21964:	lsl	r2, r2, #3
   21968:	bl	119e8 <memset@plt>
   2196c:	ldr	r3, [sp, #28]
   21970:	str	r3, [r5, #4]
   21974:	ldr	r7, [sp, #36]	; 0x24
   21978:	ldr	r9, [r4]
   2197c:	ldr	r5, [r4, #4]
   21980:	ldr	r2, [sp, #72]	; 0x48
   21984:	ldr	r3, [sp, #32]
   21988:	ldr	ip, [sp, #76]	; 0x4c
   2198c:	orr	r7, r7, #1
   21990:	add	fp, sp, #40	; 0x28
   21994:	str	r2, [sp, #12]
   21998:	str	r3, [sp]
   2199c:	str	r7, [sp, #4]
   219a0:	mov	r1, r9
   219a4:	mov	r0, r5
   219a8:	str	ip, [sp, #16]
   219ac:	str	fp, [sp, #8]
   219b0:	mvn	r3, #0
   219b4:	mov	r2, r6
   219b8:	bl	1ee24 <__assert_fail@plt+0xd280>
   219bc:	cmp	r9, r0
   219c0:	bhi	21a20 <__assert_fail@plt+0xfe7c>
   219c4:	ldr	r3, [pc, #156]	; 21a68 <__assert_fail@plt+0xfec4>
   219c8:	add	r9, r0, #1
   219cc:	cmp	r5, r3
   219d0:	str	r9, [r4]
   219d4:	beq	219e0 <__assert_fail@plt+0xfe3c>
   219d8:	mov	r0, r5
   219dc:	bl	184ec <__assert_fail@plt+0x6948>
   219e0:	mov	r0, r9
   219e4:	bl	34808 <__assert_fail@plt+0x22c64>
   219e8:	ldr	lr, [sp, #76]	; 0x4c
   219ec:	ldr	r3, [sp, #32]
   219f0:	ldr	ip, [sp, #72]	; 0x48
   219f4:	mov	r2, r6
   219f8:	mov	r1, r9
   219fc:	str	r0, [r4, #4]
   21a00:	str	r3, [sp]
   21a04:	str	fp, [sp, #8]
   21a08:	str	r7, [sp, #4]
   21a0c:	str	lr, [sp, #16]
   21a10:	str	ip, [sp, #12]
   21a14:	mvn	r3, #0
   21a18:	mov	r5, r0
   21a1c:	bl	1ee24 <__assert_fail@plt+0xd280>
   21a20:	mov	r0, r5
   21a24:	str	sl, [r8]
   21a28:	add	sp, sp, #84	; 0x54
   21a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a30:	mov	r3, #8
   21a34:	str	r3, [sp]
   21a38:	add	r1, sp, #28
   21a3c:	rsb	r2, r2, #1
   21a40:	mvn	r3, #-2147483648	; 0x80000000
   21a44:	mov	r0, #0
   21a48:	bl	34a24 <__assert_fail@plt+0x22e80>
   21a4c:	mov	r4, r0
   21a50:	ldm	r7, {r0, r1}
   21a54:	str	r4, [r5]
   21a58:	stm	r4, {r0, r1}
   21a5c:	b	21950 <__assert_fail@plt+0xfdac>
   21a60:	andeq	fp, r4, ip, asr #5
   21a64:	ldrdeq	fp, [r4], -ip
   21a68:	strdeq	fp, [r4], -ip
   21a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21a70:	mov	r9, r0
   21a74:	ldr	lr, [pc, #416]	; 21c1c <__assert_fail@plt+0x10078>
   21a78:	mov	sl, r1
   21a7c:	sub	sp, sp, #92	; 0x5c
   21a80:	ldm	lr!, {r0, r1, r2, r3}
   21a84:	add	ip, sp, #40	; 0x28
   21a88:	ldr	r5, [pc, #400]	; 21c20 <__assert_fail@plt+0x1007c>
   21a8c:	stmia	ip!, {r0, r1, r2, r3}
   21a90:	ldm	lr!, {r0, r1, r2, r3}
   21a94:	ldr	r4, [sp, #52]	; 0x34
   21a98:	stmia	ip!, {r0, r1, r2, r3}
   21a9c:	ldm	lr, {r0, r1, r2, r3}
   21aa0:	mvn	lr, r4
   21aa4:	and	lr, lr, #67108864	; 0x4000000
   21aa8:	eor	lr, lr, r4
   21aac:	stm	ip, {r0, r1, r2, r3}
   21ab0:	str	lr, [sp, #52]	; 0x34
   21ab4:	bl	119b8 <__errno_location@plt>
   21ab8:	ldr	r2, [r5, #4]
   21abc:	ldr	r4, [r5]
   21ac0:	cmp	r2, #0
   21ac4:	ldr	r3, [r0]
   21ac8:	mov	r7, r0
   21acc:	str	r3, [sp, #28]
   21ad0:	bgt	21b2c <__assert_fail@plt+0xff88>
   21ad4:	add	r6, r5, #8
   21ad8:	cmp	r4, r6
   21adc:	str	r2, [sp, #36]	; 0x24
   21ae0:	beq	21bec <__assert_fail@plt+0x10048>
   21ae4:	mov	r3, #8
   21ae8:	mov	r0, r4
   21aec:	str	r3, [sp]
   21af0:	rsb	r2, r2, #1
   21af4:	mvn	r3, #-2147483648	; 0x80000000
   21af8:	add	r1, sp, #36	; 0x24
   21afc:	bl	34a24 <__assert_fail@plt+0x22e80>
   21b00:	mov	r4, r0
   21b04:	str	r0, [r5]
   21b08:	ldr	r0, [r5, #4]
   21b0c:	ldr	r2, [sp, #36]	; 0x24
   21b10:	mov	r1, #0
   21b14:	sub	r2, r2, r0
   21b18:	add	r0, r4, r0, lsl #3
   21b1c:	lsl	r2, r2, #3
   21b20:	bl	119e8 <memset@plt>
   21b24:	ldr	r3, [sp, #36]	; 0x24
   21b28:	str	r3, [r5, #4]
   21b2c:	ldr	r6, [sp, #44]	; 0x2c
   21b30:	ldr	r8, [r4]
   21b34:	ldr	r5, [r4, #4]
   21b38:	ldr	r2, [sp, #80]	; 0x50
   21b3c:	ldr	r3, [sp, #40]	; 0x28
   21b40:	ldr	ip, [sp, #84]	; 0x54
   21b44:	orr	r6, r6, #1
   21b48:	add	fp, sp, #48	; 0x30
   21b4c:	str	r2, [sp, #12]
   21b50:	str	r3, [sp]
   21b54:	str	r6, [sp, #4]
   21b58:	mov	r1, r8
   21b5c:	mov	r0, r5
   21b60:	str	ip, [sp, #16]
   21b64:	str	fp, [sp, #8]
   21b68:	mov	r3, sl
   21b6c:	mov	r2, r9
   21b70:	bl	1ee24 <__assert_fail@plt+0xd280>
   21b74:	cmp	r8, r0
   21b78:	bhi	21bd8 <__assert_fail@plt+0x10034>
   21b7c:	ldr	r3, [pc, #160]	; 21c24 <__assert_fail@plt+0x10080>
   21b80:	add	r8, r0, #1
   21b84:	cmp	r5, r3
   21b88:	str	r8, [r4]
   21b8c:	beq	21b98 <__assert_fail@plt+0xfff4>
   21b90:	mov	r0, r5
   21b94:	bl	184ec <__assert_fail@plt+0x6948>
   21b98:	mov	r0, r8
   21b9c:	bl	34808 <__assert_fail@plt+0x22c64>
   21ba0:	ldr	ip, [sp, #84]	; 0x54
   21ba4:	ldr	lr, [sp, #40]	; 0x28
   21ba8:	mov	r3, sl
   21bac:	mov	r2, r9
   21bb0:	mov	r1, r8
   21bb4:	str	r0, [r4, #4]
   21bb8:	ldr	r4, [sp, #80]	; 0x50
   21bbc:	str	fp, [sp, #8]
   21bc0:	str	r6, [sp, #4]
   21bc4:	str	ip, [sp, #16]
   21bc8:	str	r4, [sp, #12]
   21bcc:	str	lr, [sp]
   21bd0:	mov	r5, r0
   21bd4:	bl	1ee24 <__assert_fail@plt+0xd280>
   21bd8:	ldr	r3, [sp, #28]
   21bdc:	mov	r0, r5
   21be0:	str	r3, [r7]
   21be4:	add	sp, sp, #92	; 0x5c
   21be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21bec:	mov	r3, #8
   21bf0:	str	r3, [sp]
   21bf4:	add	r1, sp, #36	; 0x24
   21bf8:	rsb	r2, r2, #1
   21bfc:	mvn	r3, #-2147483648	; 0x80000000
   21c00:	mov	r0, #0
   21c04:	bl	34a24 <__assert_fail@plt+0x22e80>
   21c08:	mov	r4, r0
   21c0c:	ldm	r6, {r0, r1}
   21c10:	str	r4, [r5]
   21c14:	stm	r4, {r0, r1}
   21c18:	b	21b08 <__assert_fail@plt+0xff64>
   21c1c:	andeq	fp, r4, ip, asr #5
   21c20:	ldrdeq	fp, [r4], -ip
   21c24:	strdeq	fp, [r4], -ip
   21c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21c2c:	sub	sp, sp, #180	; 0xb4
   21c30:	mov	r6, r1
   21c34:	mov	r4, r0
   21c38:	mov	r9, r2
   21c3c:	add	r0, sp, #80	; 0x50
   21c40:	mov	r2, #48	; 0x30
   21c44:	mov	r1, #0
   21c48:	bl	119e8 <memset@plt>
   21c4c:	cmp	r6, #10
   21c50:	beq	21e30 <__assert_fail@plt+0x1028c>
   21c54:	add	r5, sp, #80	; 0x50
   21c58:	str	r6, [sp, #80]	; 0x50
   21c5c:	ldm	r5!, {r0, r1, r2, r3}
   21c60:	add	ip, sp, #128	; 0x80
   21c64:	mov	r7, ip
   21c68:	add	lr, sp, #32
   21c6c:	stmia	ip!, {r0, r1, r2, r3}
   21c70:	mov	r8, #67108864	; 0x4000000
   21c74:	ldm	r5!, {r0, r1, r2, r3}
   21c78:	ldr	r6, [pc, #436]	; 21e34 <__assert_fail@plt+0x10290>
   21c7c:	stmia	ip!, {r0, r1, r2, r3}
   21c80:	ldm	r5, {r0, r1, r2, r3}
   21c84:	stm	ip, {r0, r1, r2, r3}
   21c88:	ldm	r7!, {r0, r1, r2, r3}
   21c8c:	stmia	lr!, {r0, r1, r2, r3}
   21c90:	ldm	r7!, {r0, r1, r2, r3}
   21c94:	str	r8, [sp, #44]	; 0x2c
   21c98:	stmia	lr!, {r0, r1, r2, r3}
   21c9c:	ldm	ip, {r0, r1, r2, r3}
   21ca0:	stm	lr, {r0, r1, r2, r3}
   21ca4:	bl	119b8 <__errno_location@plt>
   21ca8:	cmn	r4, #-2147483647	; 0x80000001
   21cac:	ldr	r5, [r6]
   21cb0:	mov	r7, r0
   21cb4:	movne	r0, #0
   21cb8:	moveq	r0, #1
   21cbc:	ldr	r3, [r7]
   21cc0:	orrs	r0, r0, r4, lsr #31
   21cc4:	str	r3, [sp, #24]
   21cc8:	bne	21e30 <__assert_fail@plt+0x1028c>
   21ccc:	ldr	r2, [r6, #4]
   21cd0:	cmp	r4, r2
   21cd4:	blt	21d34 <__assert_fail@plt+0x10190>
   21cd8:	add	r8, r6, #8
   21cdc:	cmp	r5, r8
   21ce0:	str	r2, [sp, #80]	; 0x50
   21ce4:	beq	21e00 <__assert_fail@plt+0x1025c>
   21ce8:	mov	r3, #8
   21cec:	sub	r2, r4, r2
   21cf0:	mov	r0, r5
   21cf4:	str	r3, [sp]
   21cf8:	add	r2, r2, #1
   21cfc:	add	r1, sp, #80	; 0x50
   21d00:	mvn	r3, #-2147483648	; 0x80000000
   21d04:	bl	34a24 <__assert_fail@plt+0x22e80>
   21d08:	mov	r5, r0
   21d0c:	str	r0, [r6]
   21d10:	ldr	r0, [r6, #4]
   21d14:	ldr	r2, [sp, #80]	; 0x50
   21d18:	mov	r1, #0
   21d1c:	sub	r2, r2, r0
   21d20:	add	r0, r5, r0, lsl #3
   21d24:	lsl	r2, r2, #3
   21d28:	bl	119e8 <memset@plt>
   21d2c:	ldr	r3, [sp, #80]	; 0x50
   21d30:	str	r3, [r6, #4]
   21d34:	add	fp, r5, r4, lsl #3
   21d38:	ldr	r1, [sp, #36]	; 0x24
   21d3c:	ldr	r8, [r5, r4, lsl #3]
   21d40:	ldr	r6, [fp, #4]
   21d44:	ldr	r2, [sp, #72]	; 0x48
   21d48:	ldr	r3, [sp, #32]
   21d4c:	ldr	ip, [sp, #76]	; 0x4c
   21d50:	orr	r1, r1, #1
   21d54:	add	sl, sp, #40	; 0x28
   21d58:	str	r1, [sp, #28]
   21d5c:	str	r1, [sp, #4]
   21d60:	str	r2, [sp, #12]
   21d64:	str	r3, [sp]
   21d68:	mov	r0, r6
   21d6c:	mov	r1, r8
   21d70:	str	ip, [sp, #16]
   21d74:	str	sl, [sp, #8]
   21d78:	mvn	r3, #0
   21d7c:	mov	r2, r9
   21d80:	bl	1ee24 <__assert_fail@plt+0xd280>
   21d84:	cmp	r8, r0
   21d88:	bhi	21dec <__assert_fail@plt+0x10248>
   21d8c:	ldr	r3, [pc, #164]	; 21e38 <__assert_fail@plt+0x10294>
   21d90:	add	r8, r0, #1
   21d94:	cmp	r6, r3
   21d98:	str	r8, [r5, r4, lsl #3]
   21d9c:	beq	21da8 <__assert_fail@plt+0x10204>
   21da0:	mov	r0, r6
   21da4:	bl	184ec <__assert_fail@plt+0x6948>
   21da8:	mov	r0, r8
   21dac:	bl	34808 <__assert_fail@plt+0x22c64>
   21db0:	ldr	lr, [sp, #76]	; 0x4c
   21db4:	ldr	r3, [sp, #32]
   21db8:	ldr	ip, [sp, #72]	; 0x48
   21dbc:	ldr	r4, [sp, #28]
   21dc0:	mov	r2, r9
   21dc4:	mov	r1, r8
   21dc8:	str	r0, [fp, #4]
   21dcc:	str	r3, [sp]
   21dd0:	str	sl, [sp, #8]
   21dd4:	str	r4, [sp, #4]
   21dd8:	str	lr, [sp, #16]
   21ddc:	str	ip, [sp, #12]
   21de0:	mvn	r3, #0
   21de4:	mov	r6, r0
   21de8:	bl	1ee24 <__assert_fail@plt+0xd280>
   21dec:	ldr	r3, [sp, #24]
   21df0:	mov	r0, r6
   21df4:	str	r3, [r7]
   21df8:	add	sp, sp, #180	; 0xb4
   21dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e00:	mov	r3, #8
   21e04:	sub	r2, r4, r2
   21e08:	add	r1, sp, #80	; 0x50
   21e0c:	str	r3, [sp]
   21e10:	add	r2, r2, #1
   21e14:	mvn	r3, #-2147483648	; 0x80000000
   21e18:	bl	34a24 <__assert_fail@plt+0x22e80>
   21e1c:	mov	r5, r0
   21e20:	ldm	r8, {r0, r1}
   21e24:	str	r5, [r6]
   21e28:	stm	r5, {r0, r1}
   21e2c:	b	21d10 <__assert_fail@plt+0x1016c>
   21e30:	bl	11b68 <abort@plt>
   21e34:	ldrdeq	fp, [r4], -ip
   21e38:	strdeq	fp, [r4], -ip
   21e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21e40:	mov	r7, r1
   21e44:	ldr	lr, [pc, #492]	; 22038 <__assert_fail@plt+0x10494>
   21e48:	mov	r8, r2
   21e4c:	mov	r4, r0
   21e50:	mov	fp, r3
   21e54:	ldm	lr!, {r0, r1, r2, r3}
   21e58:	sub	sp, sp, #100	; 0x64
   21e5c:	add	ip, sp, #48	; 0x30
   21e60:	mov	sl, #10
   21e64:	stmia	ip!, {r0, r1, r2, r3}
   21e68:	cmp	r8, #0
   21e6c:	cmpne	r7, #0
   21e70:	ldm	lr!, {r0, r1, r2, r3}
   21e74:	str	sl, [sp, #48]	; 0x30
   21e78:	stmia	ip!, {r0, r1, r2, r3}
   21e7c:	ldm	lr, {r0, r1, r2, r3}
   21e80:	stm	ip, {r0, r1, r2, r3}
   21e84:	beq	22034 <__assert_fail@plt+0x10490>
   21e88:	str	r7, [sp, #88]	; 0x58
   21e8c:	str	r8, [sp, #92]	; 0x5c
   21e90:	bl	119b8 <__errno_location@plt>
   21e94:	ldr	r6, [pc, #416]	; 2203c <__assert_fail@plt+0x10498>
   21e98:	cmn	r4, #-2147483647	; 0x80000001
   21e9c:	ldr	r5, [r6]
   21ea0:	mov	r9, r0
   21ea4:	movne	r0, #0
   21ea8:	moveq	r0, #1
   21eac:	ldr	r3, [r9]
   21eb0:	orrs	r0, r0, r4, lsr #31
   21eb4:	str	r3, [sp, #28]
   21eb8:	bne	22034 <__assert_fail@plt+0x10490>
   21ebc:	ldr	r2, [r6, #4]
   21ec0:	cmp	r4, r2
   21ec4:	movlt	r3, sl
   21ec8:	blt	21f34 <__assert_fail@plt+0x10390>
   21ecc:	add	r7, r6, #8
   21ed0:	cmp	r5, r7
   21ed4:	str	r2, [sp, #44]	; 0x2c
   21ed8:	beq	22004 <__assert_fail@plt+0x10460>
   21edc:	mov	r3, #8
   21ee0:	sub	r2, r4, r2
   21ee4:	mov	r0, r5
   21ee8:	str	r3, [sp]
   21eec:	add	r2, r2, #1
   21ef0:	mvn	r3, #-2147483648	; 0x80000000
   21ef4:	add	r1, sp, #44	; 0x2c
   21ef8:	bl	34a24 <__assert_fail@plt+0x22e80>
   21efc:	mov	r5, r0
   21f00:	str	r0, [r6]
   21f04:	ldr	r0, [r6, #4]
   21f08:	ldr	r2, [sp, #44]	; 0x2c
   21f0c:	mov	r1, #0
   21f10:	sub	r2, r2, r0
   21f14:	add	r0, r5, r0, lsl #3
   21f18:	lsl	r2, r2, #3
   21f1c:	bl	119e8 <memset@plt>
   21f20:	ldr	r3, [sp, #48]	; 0x30
   21f24:	ldr	r7, [sp, #88]	; 0x58
   21f28:	ldr	r8, [sp, #92]	; 0x5c
   21f2c:	ldr	r2, [sp, #44]	; 0x2c
   21f30:	str	r2, [r6, #4]
   21f34:	add	r2, r5, r4, lsl #3
   21f38:	mov	r1, r2
   21f3c:	str	r2, [sp, #32]
   21f40:	ldr	r2, [sp, #52]	; 0x34
   21f44:	ldr	r6, [r1, #4]
   21f48:	ldr	sl, [r5, r4, lsl #3]
   21f4c:	orr	r2, r2, #1
   21f50:	str	r3, [sp]
   21f54:	add	r3, sp, #56	; 0x38
   21f58:	str	r2, [sp, #36]	; 0x24
   21f5c:	str	r2, [sp, #4]
   21f60:	str	r3, [sp, #8]
   21f64:	mov	r0, r6
   21f68:	str	r8, [sp, #16]
   21f6c:	str	r7, [sp, #12]
   21f70:	mov	r1, sl
   21f74:	mvn	r3, #0
   21f78:	mov	r2, fp
   21f7c:	bl	1ee24 <__assert_fail@plt+0xd280>
   21f80:	cmp	sl, r0
   21f84:	bhi	21ff0 <__assert_fail@plt+0x1044c>
   21f88:	ldr	r3, [pc, #176]	; 22040 <__assert_fail@plt+0x1049c>
   21f8c:	add	r7, r0, #1
   21f90:	cmp	r6, r3
   21f94:	str	r7, [r5, r4, lsl #3]
   21f98:	beq	21fa4 <__assert_fail@plt+0x10400>
   21f9c:	mov	r0, r6
   21fa0:	bl	184ec <__assert_fail@plt+0x6948>
   21fa4:	mov	r0, r7
   21fa8:	bl	34808 <__assert_fail@plt+0x22c64>
   21fac:	ldr	r3, [sp, #32]
   21fb0:	ldr	lr, [sp, #92]	; 0x5c
   21fb4:	ldr	ip, [sp, #88]	; 0x58
   21fb8:	ldr	r4, [sp, #36]	; 0x24
   21fbc:	mov	r2, fp
   21fc0:	mov	r1, r7
   21fc4:	str	r0, [r3, #4]
   21fc8:	add	r3, sp, #56	; 0x38
   21fcc:	str	r3, [sp, #8]
   21fd0:	ldr	r3, [sp, #48]	; 0x30
   21fd4:	str	r4, [sp, #4]
   21fd8:	str	r3, [sp]
   21fdc:	str	lr, [sp, #16]
   21fe0:	str	ip, [sp, #12]
   21fe4:	mvn	r3, #0
   21fe8:	mov	r6, r0
   21fec:	bl	1ee24 <__assert_fail@plt+0xd280>
   21ff0:	ldr	r3, [sp, #28]
   21ff4:	mov	r0, r6
   21ff8:	str	r3, [r9]
   21ffc:	add	sp, sp, #100	; 0x64
   22000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22004:	mov	r3, #8
   22008:	sub	r2, r4, r2
   2200c:	str	r3, [sp]
   22010:	add	r1, sp, #44	; 0x2c
   22014:	add	r2, r2, #1
   22018:	mvn	r3, #-2147483648	; 0x80000000
   2201c:	bl	34a24 <__assert_fail@plt+0x22e80>
   22020:	mov	r5, r0
   22024:	ldm	r7, {r0, r1}
   22028:	str	r5, [r6]
   2202c:	stm	r5, {r0, r1}
   22030:	b	21f04 <__assert_fail@plt+0x10360>
   22034:	bl	11b68 <abort@plt>
   22038:	andeq	fp, r4, ip, asr #5
   2203c:	ldrdeq	fp, [r4], -ip
   22040:	strdeq	fp, [r4], -ip
   22044:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22048:	mov	r7, r1
   2204c:	ldr	lr, [pc, #492]	; 22240 <__assert_fail@plt+0x1069c>
   22050:	mov	r8, r2
   22054:	mov	r4, r0
   22058:	mov	fp, r3
   2205c:	ldm	lr!, {r0, r1, r2, r3}
   22060:	sub	sp, sp, #100	; 0x64
   22064:	add	ip, sp, #48	; 0x30
   22068:	mov	sl, #10
   2206c:	stmia	ip!, {r0, r1, r2, r3}
   22070:	cmp	r8, #0
   22074:	cmpne	r7, #0
   22078:	ldm	lr!, {r0, r1, r2, r3}
   2207c:	str	sl, [sp, #48]	; 0x30
   22080:	stmia	ip!, {r0, r1, r2, r3}
   22084:	ldm	lr, {r0, r1, r2, r3}
   22088:	stm	ip, {r0, r1, r2, r3}
   2208c:	beq	2223c <__assert_fail@plt+0x10698>
   22090:	str	r7, [sp, #88]	; 0x58
   22094:	str	r8, [sp, #92]	; 0x5c
   22098:	bl	119b8 <__errno_location@plt>
   2209c:	ldr	r6, [pc, #416]	; 22244 <__assert_fail@plt+0x106a0>
   220a0:	cmn	r4, #-2147483647	; 0x80000001
   220a4:	ldr	r5, [r6]
   220a8:	mov	r9, r0
   220ac:	movne	r0, #0
   220b0:	moveq	r0, #1
   220b4:	ldr	r3, [r9]
   220b8:	orrs	r0, r0, r4, lsr #31
   220bc:	str	r3, [sp, #28]
   220c0:	bne	2223c <__assert_fail@plt+0x10698>
   220c4:	ldr	r2, [r6, #4]
   220c8:	cmp	r4, r2
   220cc:	movlt	r3, sl
   220d0:	blt	2213c <__assert_fail@plt+0x10598>
   220d4:	add	r7, r6, #8
   220d8:	cmp	r5, r7
   220dc:	str	r2, [sp, #44]	; 0x2c
   220e0:	beq	2220c <__assert_fail@plt+0x10668>
   220e4:	mov	r3, #8
   220e8:	sub	r2, r4, r2
   220ec:	mov	r0, r5
   220f0:	str	r3, [sp]
   220f4:	add	r2, r2, #1
   220f8:	mvn	r3, #-2147483648	; 0x80000000
   220fc:	add	r1, sp, #44	; 0x2c
   22100:	bl	34a24 <__assert_fail@plt+0x22e80>
   22104:	mov	r5, r0
   22108:	str	r0, [r6]
   2210c:	ldr	r0, [r6, #4]
   22110:	ldr	r2, [sp, #44]	; 0x2c
   22114:	mov	r1, #0
   22118:	sub	r2, r2, r0
   2211c:	add	r0, r5, r0, lsl #3
   22120:	lsl	r2, r2, #3
   22124:	bl	119e8 <memset@plt>
   22128:	ldr	r3, [sp, #48]	; 0x30
   2212c:	ldr	r7, [sp, #88]	; 0x58
   22130:	ldr	r8, [sp, #92]	; 0x5c
   22134:	ldr	r2, [sp, #44]	; 0x2c
   22138:	str	r2, [r6, #4]
   2213c:	add	r2, r5, r4, lsl #3
   22140:	mov	r1, r2
   22144:	str	r2, [sp, #32]
   22148:	ldr	r2, [sp, #52]	; 0x34
   2214c:	ldr	r6, [r1, #4]
   22150:	ldr	sl, [r5, r4, lsl #3]
   22154:	orr	r2, r2, #1
   22158:	str	r3, [sp]
   2215c:	add	r3, sp, #56	; 0x38
   22160:	str	r2, [sp, #36]	; 0x24
   22164:	str	r2, [sp, #4]
   22168:	str	r3, [sp, #8]
   2216c:	mov	r0, r6
   22170:	str	r8, [sp, #16]
   22174:	str	r7, [sp, #12]
   22178:	mov	r1, sl
   2217c:	ldr	r3, [sp, #136]	; 0x88
   22180:	mov	r2, fp
   22184:	bl	1ee24 <__assert_fail@plt+0xd280>
   22188:	cmp	sl, r0
   2218c:	bhi	221f8 <__assert_fail@plt+0x10654>
   22190:	ldr	r3, [pc, #176]	; 22248 <__assert_fail@plt+0x106a4>
   22194:	add	r7, r0, #1
   22198:	cmp	r6, r3
   2219c:	str	r7, [r5, r4, lsl #3]
   221a0:	beq	221ac <__assert_fail@plt+0x10608>
   221a4:	mov	r0, r6
   221a8:	bl	184ec <__assert_fail@plt+0x6948>
   221ac:	mov	r0, r7
   221b0:	bl	34808 <__assert_fail@plt+0x22c64>
   221b4:	ldr	r3, [sp, #32]
   221b8:	ldr	lr, [sp, #92]	; 0x5c
   221bc:	ldr	ip, [sp, #88]	; 0x58
   221c0:	ldr	r4, [sp, #36]	; 0x24
   221c4:	mov	r2, fp
   221c8:	mov	r1, r7
   221cc:	str	r0, [r3, #4]
   221d0:	add	r3, sp, #56	; 0x38
   221d4:	str	r3, [sp, #8]
   221d8:	ldr	r3, [sp, #48]	; 0x30
   221dc:	str	r4, [sp, #4]
   221e0:	str	r3, [sp]
   221e4:	str	lr, [sp, #16]
   221e8:	str	ip, [sp, #12]
   221ec:	ldr	r3, [sp, #136]	; 0x88
   221f0:	mov	r6, r0
   221f4:	bl	1ee24 <__assert_fail@plt+0xd280>
   221f8:	ldr	r3, [sp, #28]
   221fc:	mov	r0, r6
   22200:	str	r3, [r9]
   22204:	add	sp, sp, #100	; 0x64
   22208:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2220c:	mov	r3, #8
   22210:	sub	r2, r4, r2
   22214:	str	r3, [sp]
   22218:	add	r1, sp, #44	; 0x2c
   2221c:	add	r2, r2, #1
   22220:	mvn	r3, #-2147483648	; 0x80000000
   22224:	bl	34a24 <__assert_fail@plt+0x22e80>
   22228:	mov	r5, r0
   2222c:	ldm	r7, {r0, r1}
   22230:	str	r5, [r6]
   22234:	stm	r5, {r0, r1}
   22238:	b	2210c <__assert_fail@plt+0x10568>
   2223c:	bl	11b68 <abort@plt>
   22240:	andeq	fp, r4, ip, asr #5
   22244:	ldrdeq	fp, [r4], -ip
   22248:	strdeq	fp, [r4], -ip
   2224c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22250:	mov	r5, r0
   22254:	ldr	lr, [pc, #452]	; 22420 <__assert_fail@plt+0x1087c>
   22258:	mov	r6, r1
   2225c:	mov	sl, r2
   22260:	ldm	lr!, {r0, r1, r2, r3}
   22264:	sub	sp, sp, #92	; 0x5c
   22268:	add	ip, sp, #40	; 0x28
   2226c:	cmp	r6, #0
   22270:	cmpne	r5, #0
   22274:	stmia	ip!, {r0, r1, r2, r3}
   22278:	mov	r9, #10
   2227c:	ldm	lr!, {r0, r1, r2, r3}
   22280:	moveq	fp, #1
   22284:	movne	fp, #0
   22288:	str	r9, [sp, #40]	; 0x28
   2228c:	stmia	ip!, {r0, r1, r2, r3}
   22290:	ldm	lr, {r0, r1, r2, r3}
   22294:	stm	ip, {r0, r1, r2, r3}
   22298:	beq	2241c <__assert_fail@plt+0x10878>
   2229c:	str	r5, [sp, #80]	; 0x50
   222a0:	str	r6, [sp, #84]	; 0x54
   222a4:	bl	119b8 <__errno_location@plt>
   222a8:	ldr	r7, [pc, #372]	; 22424 <__assert_fail@plt+0x10880>
   222ac:	ldr	r2, [r7, #4]
   222b0:	ldr	r4, [r7]
   222b4:	cmp	r2, #0
   222b8:	ldr	r3, [r0]
   222bc:	mov	r8, r0
   222c0:	str	r3, [sp, #24]
   222c4:	movgt	r3, r9
   222c8:	bgt	22330 <__assert_fail@plt+0x1078c>
   222cc:	add	r5, r7, #8
   222d0:	cmp	r4, r5
   222d4:	str	r2, [sp, #36]	; 0x24
   222d8:	beq	223ec <__assert_fail@plt+0x10848>
   222dc:	mov	r3, #8
   222e0:	mov	r0, r4
   222e4:	str	r3, [sp]
   222e8:	rsb	r2, r2, #1
   222ec:	mvn	r3, #-2147483648	; 0x80000000
   222f0:	add	r1, sp, #36	; 0x24
   222f4:	bl	34a24 <__assert_fail@plt+0x22e80>
   222f8:	mov	r4, r0
   222fc:	str	r0, [r7]
   22300:	ldr	r0, [r7, #4]
   22304:	ldr	r2, [sp, #36]	; 0x24
   22308:	mov	r1, #0
   2230c:	sub	r2, r2, r0
   22310:	add	r0, r4, r0, lsl #3
   22314:	lsl	r2, r2, #3
   22318:	bl	119e8 <memset@plt>
   2231c:	ldr	r3, [sp, #40]	; 0x28
   22320:	ldr	r5, [sp, #80]	; 0x50
   22324:	ldr	r6, [sp, #84]	; 0x54
   22328:	ldr	r2, [sp, #36]	; 0x24
   2232c:	str	r2, [r7, #4]
   22330:	ldr	r2, [sp, #44]	; 0x2c
   22334:	ldr	r9, [r4]
   22338:	ldr	r7, [r4, #4]
   2233c:	orr	r2, r2, #1
   22340:	add	fp, sp, #48	; 0x30
   22344:	str	r2, [sp, #28]
   22348:	str	r2, [sp, #4]
   2234c:	str	r3, [sp]
   22350:	str	r6, [sp, #16]
   22354:	str	r5, [sp, #12]
   22358:	mov	r1, r9
   2235c:	mov	r0, r7
   22360:	str	fp, [sp, #8]
   22364:	mvn	r3, #0
   22368:	mov	r2, sl
   2236c:	bl	1ee24 <__assert_fail@plt+0xd280>
   22370:	cmp	r9, r0
   22374:	bhi	223d8 <__assert_fail@plt+0x10834>
   22378:	ldr	r3, [pc, #168]	; 22428 <__assert_fail@plt+0x10884>
   2237c:	add	r5, r0, #1
   22380:	cmp	r7, r3
   22384:	str	r5, [r4]
   22388:	beq	22394 <__assert_fail@plt+0x107f0>
   2238c:	mov	r0, r7
   22390:	bl	184ec <__assert_fail@plt+0x6948>
   22394:	mov	r0, r5
   22398:	bl	34808 <__assert_fail@plt+0x22c64>
   2239c:	ldr	lr, [sp, #84]	; 0x54
   223a0:	ldr	r3, [sp, #40]	; 0x28
   223a4:	ldr	ip, [sp, #80]	; 0x50
   223a8:	mov	r2, sl
   223ac:	mov	r1, r5
   223b0:	str	r0, [r4, #4]
   223b4:	ldr	r4, [sp, #28]
   223b8:	str	r3, [sp]
   223bc:	str	fp, [sp, #8]
   223c0:	str	r4, [sp, #4]
   223c4:	str	lr, [sp, #16]
   223c8:	str	ip, [sp, #12]
   223cc:	mvn	r3, #0
   223d0:	mov	r7, r0
   223d4:	bl	1ee24 <__assert_fail@plt+0xd280>
   223d8:	ldr	r3, [sp, #24]
   223dc:	mov	r0, r7
   223e0:	str	r3, [r8]
   223e4:	add	sp, sp, #92	; 0x5c
   223e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   223ec:	mov	r3, #8
   223f0:	str	r3, [sp]
   223f4:	add	r1, sp, #36	; 0x24
   223f8:	rsb	r2, r2, #1
   223fc:	mov	r0, fp
   22400:	mvn	r3, #-2147483648	; 0x80000000
   22404:	bl	34a24 <__assert_fail@plt+0x22e80>
   22408:	mov	r4, r0
   2240c:	ldm	r5, {r0, r1}
   22410:	str	r4, [r7]
   22414:	stm	r4, {r0, r1}
   22418:	b	22300 <__assert_fail@plt+0x1075c>
   2241c:	bl	11b68 <abort@plt>
   22420:	andeq	fp, r4, ip, asr #5
   22424:	ldrdeq	fp, [r4], -ip
   22428:	strdeq	fp, [r4], -ip
   2242c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22430:	mov	r5, r0
   22434:	ldr	lr, [pc, #464]	; 2260c <__assert_fail@plt+0x10a68>
   22438:	mov	r6, r1
   2243c:	mov	sl, r2
   22440:	mov	fp, r3
   22444:	ldm	lr!, {r0, r1, r2, r3}
   22448:	sub	sp, sp, #92	; 0x5c
   2244c:	add	ip, sp, #40	; 0x28
   22450:	cmp	r6, #0
   22454:	cmpne	r5, #0
   22458:	stmia	ip!, {r0, r1, r2, r3}
   2245c:	moveq	r4, #1
   22460:	ldm	lr!, {r0, r1, r2, r3}
   22464:	movne	r4, #0
   22468:	mov	r9, #10
   2246c:	str	r4, [sp, #28]
   22470:	stmia	ip!, {r0, r1, r2, r3}
   22474:	ldm	lr, {r0, r1, r2, r3}
   22478:	str	r9, [sp, #40]	; 0x28
   2247c:	stm	ip, {r0, r1, r2, r3}
   22480:	beq	22608 <__assert_fail@plt+0x10a64>
   22484:	str	r5, [sp, #80]	; 0x50
   22488:	str	r6, [sp, #84]	; 0x54
   2248c:	bl	119b8 <__errno_location@plt>
   22490:	ldr	r7, [pc, #376]	; 22610 <__assert_fail@plt+0x10a6c>
   22494:	ldr	r2, [r7, #4]
   22498:	ldr	r4, [r7]
   2249c:	cmp	r2, #0
   224a0:	ldr	r3, [r0]
   224a4:	mov	r8, r0
   224a8:	str	r3, [sp, #24]
   224ac:	movgt	r3, r9
   224b0:	bgt	22518 <__assert_fail@plt+0x10974>
   224b4:	add	r5, r7, #8
   224b8:	cmp	r4, r5
   224bc:	str	r2, [sp, #36]	; 0x24
   224c0:	beq	225d8 <__assert_fail@plt+0x10a34>
   224c4:	mov	r3, #8
   224c8:	mov	r0, r4
   224cc:	str	r3, [sp]
   224d0:	rsb	r2, r2, #1
   224d4:	mvn	r3, #-2147483648	; 0x80000000
   224d8:	add	r1, sp, #36	; 0x24
   224dc:	bl	34a24 <__assert_fail@plt+0x22e80>
   224e0:	mov	r4, r0
   224e4:	str	r0, [r7]
   224e8:	ldr	r0, [r7, #4]
   224ec:	ldr	r2, [sp, #36]	; 0x24
   224f0:	mov	r1, #0
   224f4:	sub	r2, r2, r0
   224f8:	add	r0, r4, r0, lsl #3
   224fc:	lsl	r2, r2, #3
   22500:	bl	119e8 <memset@plt>
   22504:	ldr	r3, [sp, #40]	; 0x28
   22508:	ldr	r5, [sp, #80]	; 0x50
   2250c:	ldr	r6, [sp, #84]	; 0x54
   22510:	ldr	r2, [sp, #36]	; 0x24
   22514:	str	r2, [r7, #4]
   22518:	ldr	r2, [sp, #44]	; 0x2c
   2251c:	ldr	r9, [r4]
   22520:	ldr	r7, [r4, #4]
   22524:	orr	r2, r2, #1
   22528:	str	r3, [sp]
   2252c:	add	r3, sp, #48	; 0x30
   22530:	str	r2, [sp, #28]
   22534:	str	r2, [sp, #4]
   22538:	str	r3, [sp, #8]
   2253c:	str	r6, [sp, #16]
   22540:	str	r5, [sp, #12]
   22544:	mov	r1, r9
   22548:	mov	r0, r7
   2254c:	mov	r3, fp
   22550:	mov	r2, sl
   22554:	bl	1ee24 <__assert_fail@plt+0xd280>
   22558:	cmp	r9, r0
   2255c:	bhi	225c4 <__assert_fail@plt+0x10a20>
   22560:	ldr	r3, [pc, #172]	; 22614 <__assert_fail@plt+0x10a70>
   22564:	add	r5, r0, #1
   22568:	cmp	r7, r3
   2256c:	str	r5, [r4]
   22570:	beq	2257c <__assert_fail@plt+0x109d8>
   22574:	mov	r0, r7
   22578:	bl	184ec <__assert_fail@plt+0x6948>
   2257c:	mov	r0, r5
   22580:	bl	34808 <__assert_fail@plt+0x22c64>
   22584:	add	lr, sp, #48	; 0x30
   22588:	ldr	ip, [sp, #84]	; 0x54
   2258c:	mov	r1, r5
   22590:	ldr	r5, [sp, #28]
   22594:	mov	r3, fp
   22598:	mov	r2, sl
   2259c:	str	r0, [r4, #4]
   225a0:	ldr	r4, [sp, #80]	; 0x50
   225a4:	str	lr, [sp, #8]
   225a8:	ldr	lr, [sp, #40]	; 0x28
   225ac:	str	r5, [sp, #4]
   225b0:	str	ip, [sp, #16]
   225b4:	str	r4, [sp, #12]
   225b8:	str	lr, [sp]
   225bc:	mov	r7, r0
   225c0:	bl	1ee24 <__assert_fail@plt+0xd280>
   225c4:	ldr	r3, [sp, #24]
   225c8:	mov	r0, r7
   225cc:	str	r3, [r8]
   225d0:	add	sp, sp, #92	; 0x5c
   225d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   225d8:	mov	r3, #8
   225dc:	str	r3, [sp]
   225e0:	add	r1, sp, #36	; 0x24
   225e4:	rsb	r2, r2, #1
   225e8:	ldr	r0, [sp, #28]
   225ec:	mvn	r3, #-2147483648	; 0x80000000
   225f0:	bl	34a24 <__assert_fail@plt+0x22e80>
   225f4:	mov	r4, r0
   225f8:	ldm	r5, {r0, r1}
   225fc:	str	r4, [r7]
   22600:	stm	r4, {r0, r1}
   22604:	b	224e8 <__assert_fail@plt+0x10944>
   22608:	bl	11b68 <abort@plt>
   2260c:	andeq	fp, r4, ip, asr #5
   22610:	ldrdeq	fp, [r4], -ip
   22614:	strdeq	fp, [r4], -ip
   22618:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2261c:	sub	sp, sp, #52	; 0x34
   22620:	mov	r5, r0
   22624:	mov	sl, r1
   22628:	mov	fp, r2
   2262c:	bl	119b8 <__errno_location@plt>
   22630:	ldr	r4, [pc, #404]	; 227cc <__assert_fail@plt+0x10c28>
   22634:	cmn	r5, #-2147483647	; 0x80000001
   22638:	ldr	r6, [r4]
   2263c:	mov	r8, r0
   22640:	movne	r0, #0
   22644:	moveq	r0, #1
   22648:	ldr	r3, [r8]
   2264c:	orrs	r0, r0, r5, lsr #31
   22650:	str	r3, [sp, #28]
   22654:	bne	227c8 <__assert_fail@plt+0x10c24>
   22658:	ldr	r2, [r4, #4]
   2265c:	cmp	r5, r2
   22660:	blt	226c0 <__assert_fail@plt+0x10b1c>
   22664:	add	r7, r4, #8
   22668:	cmp	r6, r7
   2266c:	str	r2, [sp, #44]	; 0x2c
   22670:	beq	22798 <__assert_fail@plt+0x10bf4>
   22674:	mov	r3, #8
   22678:	sub	r2, r5, r2
   2267c:	mov	r0, r6
   22680:	str	r3, [sp]
   22684:	add	r2, r2, #1
   22688:	mvn	r3, #-2147483648	; 0x80000000
   2268c:	add	r1, sp, #44	; 0x2c
   22690:	bl	34a24 <__assert_fail@plt+0x22e80>
   22694:	mov	r6, r0
   22698:	str	r0, [r4]
   2269c:	ldr	r0, [r4, #4]
   226a0:	ldr	r2, [sp, #44]	; 0x2c
   226a4:	mov	r1, #0
   226a8:	sub	r2, r2, r0
   226ac:	add	r0, r6, r0, lsl #3
   226b0:	lsl	r2, r2, #3
   226b4:	bl	119e8 <memset@plt>
   226b8:	ldr	r3, [sp, #44]	; 0x2c
   226bc:	str	r3, [r4, #4]
   226c0:	ldr	r2, [r4, #56]	; 0x38
   226c4:	add	r3, r6, r5, lsl #3
   226c8:	ldr	r1, [r4, #20]
   226cc:	ldr	r7, [r3, #4]
   226d0:	ldr	r9, [r6, r5, lsl #3]
   226d4:	ldr	ip, [r4, #60]	; 0x3c
   226d8:	str	r3, [sp, #32]
   226dc:	ldr	r3, [r4, #16]
   226e0:	str	r2, [sp, #12]
   226e4:	ldr	r2, [pc, #228]	; 227d0 <__assert_fail@plt+0x10c2c>
   226e8:	orr	r1, r1, #1
   226ec:	str	r1, [sp, #36]	; 0x24
   226f0:	str	r1, [sp, #4]
   226f4:	str	r2, [sp, #8]
   226f8:	str	r3, [sp]
   226fc:	mov	r0, r7
   22700:	mov	r1, r9
   22704:	str	ip, [sp, #16]
   22708:	mov	r3, fp
   2270c:	mov	r2, sl
   22710:	bl	1ee24 <__assert_fail@plt+0xd280>
   22714:	cmp	r9, r0
   22718:	bhi	22784 <__assert_fail@plt+0x10be0>
   2271c:	ldr	r3, [pc, #176]	; 227d4 <__assert_fail@plt+0x10c30>
   22720:	add	r9, r0, #1
   22724:	cmp	r7, r3
   22728:	str	r9, [r6, r5, lsl #3]
   2272c:	beq	22738 <__assert_fail@plt+0x10b94>
   22730:	mov	r0, r7
   22734:	bl	184ec <__assert_fail@plt+0x6948>
   22738:	mov	r0, r9
   2273c:	bl	34808 <__assert_fail@plt+0x22c64>
   22740:	ldr	ip, [sp, #32]
   22744:	ldr	lr, [r4, #60]	; 0x3c
   22748:	ldr	r5, [r4, #56]	; 0x38
   2274c:	mov	r3, fp
   22750:	mov	r2, sl
   22754:	mov	r1, r9
   22758:	str	r0, [ip, #4]
   2275c:	ldr	ip, [r4, #16]
   22760:	ldr	r4, [pc, #104]	; 227d0 <__assert_fail@plt+0x10c2c>
   22764:	str	lr, [sp, #16]
   22768:	str	r4, [sp, #8]
   2276c:	ldr	r4, [sp, #36]	; 0x24
   22770:	str	r5, [sp, #12]
   22774:	str	r4, [sp, #4]
   22778:	str	ip, [sp]
   2277c:	mov	r7, r0
   22780:	bl	1ee24 <__assert_fail@plt+0xd280>
   22784:	ldr	r3, [sp, #28]
   22788:	mov	r0, r7
   2278c:	str	r3, [r8]
   22790:	add	sp, sp, #52	; 0x34
   22794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22798:	mov	r3, #8
   2279c:	sub	r2, r5, r2
   227a0:	str	r3, [sp]
   227a4:	add	r1, sp, #44	; 0x2c
   227a8:	add	r2, r2, #1
   227ac:	mvn	r3, #-2147483648	; 0x80000000
   227b0:	bl	34a24 <__assert_fail@plt+0x22e80>
   227b4:	mov	r6, r0
   227b8:	ldm	r7, {r0, r1}
   227bc:	str	r6, [r4]
   227c0:	stm	r6, {r0, r1}
   227c4:	b	2269c <__assert_fail@plt+0x10af8>
   227c8:	bl	11b68 <abort@plt>
   227cc:	ldrdeq	fp, [r4], -ip
   227d0:	strdeq	fp, [r4], -r4
   227d4:	strdeq	fp, [r4], -ip
   227d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   227dc:	sub	sp, sp, #44	; 0x2c
   227e0:	mov	r9, r0
   227e4:	mov	sl, r1
   227e8:	bl	119b8 <__errno_location@plt>
   227ec:	ldr	r4, [pc, #360]	; 2295c <__assert_fail@plt+0x10db8>
   227f0:	ldr	r2, [r4, #4]
   227f4:	ldr	r5, [r4]
   227f8:	cmp	r2, #0
   227fc:	ldr	r3, [r0]
   22800:	mov	r7, r0
   22804:	str	r3, [sp, #24]
   22808:	bgt	22864 <__assert_fail@plt+0x10cc0>
   2280c:	add	r6, r4, #8
   22810:	cmp	r5, r6
   22814:	str	r2, [sp, #36]	; 0x24
   22818:	beq	2292c <__assert_fail@plt+0x10d88>
   2281c:	mov	r3, #8
   22820:	mov	r0, r5
   22824:	str	r3, [sp]
   22828:	rsb	r2, r2, #1
   2282c:	mvn	r3, #-2147483648	; 0x80000000
   22830:	add	r1, sp, #36	; 0x24
   22834:	bl	34a24 <__assert_fail@plt+0x22e80>
   22838:	mov	r5, r0
   2283c:	str	r0, [r4]
   22840:	ldr	r0, [r4, #4]
   22844:	ldr	r2, [sp, #36]	; 0x24
   22848:	mov	r1, #0
   2284c:	sub	r2, r2, r0
   22850:	add	r0, r5, r0, lsl #3
   22854:	lsl	r2, r2, #3
   22858:	bl	119e8 <memset@plt>
   2285c:	ldr	r3, [sp, #36]	; 0x24
   22860:	str	r3, [r4, #4]
   22864:	ldr	r1, [r4, #20]
   22868:	ldr	r8, [r5]
   2286c:	ldr	r6, [r5, #4]
   22870:	ldr	r2, [r4, #56]	; 0x38
   22874:	ldr	r3, [r4, #16]
   22878:	ldr	ip, [r4, #60]	; 0x3c
   2287c:	ldr	fp, [pc, #220]	; 22960 <__assert_fail@plt+0x10dbc>
   22880:	orr	r1, r1, #1
   22884:	str	r1, [sp, #28]
   22888:	str	r1, [sp, #4]
   2288c:	str	r2, [sp, #12]
   22890:	str	r3, [sp]
   22894:	mov	r1, r8
   22898:	mov	r0, r6
   2289c:	str	ip, [sp, #16]
   228a0:	str	fp, [sp, #8]
   228a4:	mov	r3, sl
   228a8:	mov	r2, r9
   228ac:	bl	1ee24 <__assert_fail@plt+0xd280>
   228b0:	cmp	r8, r0
   228b4:	bhi	22918 <__assert_fail@plt+0x10d74>
   228b8:	ldr	r3, [pc, #164]	; 22964 <__assert_fail@plt+0x10dc0>
   228bc:	add	r8, r0, #1
   228c0:	cmp	r6, r3
   228c4:	str	r8, [r5]
   228c8:	beq	228d4 <__assert_fail@plt+0x10d30>
   228cc:	mov	r0, r6
   228d0:	bl	184ec <__assert_fail@plt+0x6948>
   228d4:	mov	r0, r8
   228d8:	bl	34808 <__assert_fail@plt+0x22c64>
   228dc:	ldr	lr, [r4, #60]	; 0x3c
   228e0:	ldr	ip, [r4, #16]
   228e4:	mov	r3, sl
   228e8:	mov	r2, r9
   228ec:	mov	r1, r8
   228f0:	str	r0, [r5, #4]
   228f4:	ldr	r5, [r4, #56]	; 0x38
   228f8:	ldr	r4, [sp, #28]
   228fc:	str	fp, [sp, #8]
   22900:	str	r4, [sp, #4]
   22904:	str	lr, [sp, #16]
   22908:	str	r5, [sp, #12]
   2290c:	str	ip, [sp]
   22910:	mov	r6, r0
   22914:	bl	1ee24 <__assert_fail@plt+0xd280>
   22918:	ldr	r3, [sp, #24]
   2291c:	mov	r0, r6
   22920:	str	r3, [r7]
   22924:	add	sp, sp, #44	; 0x2c
   22928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2292c:	mov	r3, #8
   22930:	str	r3, [sp]
   22934:	add	r1, sp, #36	; 0x24
   22938:	rsb	r2, r2, #1
   2293c:	mvn	r3, #-2147483648	; 0x80000000
   22940:	mov	r0, #0
   22944:	bl	34a24 <__assert_fail@plt+0x22e80>
   22948:	mov	r5, r0
   2294c:	ldm	r6, {r0, r1}
   22950:	str	r5, [r4]
   22954:	stm	r5, {r0, r1}
   22958:	b	22840 <__assert_fail@plt+0x10c9c>
   2295c:	ldrdeq	fp, [r4], -ip
   22960:	strdeq	fp, [r4], -r4
   22964:	strdeq	fp, [r4], -ip
   22968:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2296c:	sub	sp, sp, #44	; 0x2c
   22970:	mov	r5, r0
   22974:	mov	sl, r1
   22978:	bl	119b8 <__errno_location@plt>
   2297c:	ldr	r4, [pc, #396]	; 22b10 <__assert_fail@plt+0x10f6c>
   22980:	cmn	r5, #-2147483647	; 0x80000001
   22984:	ldr	r6, [r4]
   22988:	mov	r8, r0
   2298c:	movne	r0, #0
   22990:	moveq	r0, #1
   22994:	ldr	r3, [r8]
   22998:	orrs	r0, r0, r5, lsr #31
   2299c:	str	r3, [sp, #24]
   229a0:	bne	22b0c <__assert_fail@plt+0x10f68>
   229a4:	ldr	r2, [r4, #4]
   229a8:	cmp	r5, r2
   229ac:	blt	22a0c <__assert_fail@plt+0x10e68>
   229b0:	add	r7, r4, #8
   229b4:	cmp	r6, r7
   229b8:	str	r2, [sp, #36]	; 0x24
   229bc:	beq	22adc <__assert_fail@plt+0x10f38>
   229c0:	mov	r3, #8
   229c4:	sub	r2, r5, r2
   229c8:	mov	r0, r6
   229cc:	str	r3, [sp]
   229d0:	add	r2, r2, #1
   229d4:	mvn	r3, #-2147483648	; 0x80000000
   229d8:	add	r1, sp, #36	; 0x24
   229dc:	bl	34a24 <__assert_fail@plt+0x22e80>
   229e0:	mov	r6, r0
   229e4:	str	r0, [r4]
   229e8:	ldr	r0, [r4, #4]
   229ec:	ldr	r2, [sp, #36]	; 0x24
   229f0:	mov	r1, #0
   229f4:	sub	r2, r2, r0
   229f8:	add	r0, r6, r0, lsl #3
   229fc:	lsl	r2, r2, #3
   22a00:	bl	119e8 <memset@plt>
   22a04:	ldr	r3, [sp, #36]	; 0x24
   22a08:	str	r3, [r4, #4]
   22a0c:	ldr	r2, [r4, #56]	; 0x38
   22a10:	add	fp, r6, r5, lsl #3
   22a14:	ldr	r1, [r4, #20]
   22a18:	ldr	r9, [r6, r5, lsl #3]
   22a1c:	ldr	r7, [fp, #4]
   22a20:	ldr	r3, [r4, #16]
   22a24:	ldr	ip, [r4, #60]	; 0x3c
   22a28:	str	r2, [sp, #12]
   22a2c:	ldr	r2, [pc, #224]	; 22b14 <__assert_fail@plt+0x10f70>
   22a30:	orr	r1, r1, #1
   22a34:	str	r1, [sp, #28]
   22a38:	str	r1, [sp, #4]
   22a3c:	str	r2, [sp, #8]
   22a40:	str	r3, [sp]
   22a44:	mov	r0, r7
   22a48:	mov	r1, r9
   22a4c:	str	ip, [sp, #16]
   22a50:	mvn	r3, #0
   22a54:	mov	r2, sl
   22a58:	bl	1ee24 <__assert_fail@plt+0xd280>
   22a5c:	cmp	r9, r0
   22a60:	bhi	22ac8 <__assert_fail@plt+0x10f24>
   22a64:	ldr	r3, [pc, #172]	; 22b18 <__assert_fail@plt+0x10f74>
   22a68:	add	r9, r0, #1
   22a6c:	cmp	r7, r3
   22a70:	str	r9, [r6, r5, lsl #3]
   22a74:	beq	22a80 <__assert_fail@plt+0x10edc>
   22a78:	mov	r0, r7
   22a7c:	bl	184ec <__assert_fail@plt+0x6948>
   22a80:	mov	r0, r9
   22a84:	bl	34808 <__assert_fail@plt+0x22c64>
   22a88:	ldr	ip, [r4, #60]	; 0x3c
   22a8c:	ldr	r3, [r4, #16]
   22a90:	ldr	lr, [r4, #56]	; 0x38
   22a94:	ldr	r4, [pc, #120]	; 22b14 <__assert_fail@plt+0x10f70>
   22a98:	mov	r2, sl
   22a9c:	mov	r1, r9
   22aa0:	str	r0, [fp, #4]
   22aa4:	str	r4, [sp, #8]
   22aa8:	ldr	r4, [sp, #28]
   22aac:	str	r3, [sp]
   22ab0:	str	r4, [sp, #4]
   22ab4:	str	ip, [sp, #16]
   22ab8:	str	lr, [sp, #12]
   22abc:	mvn	r3, #0
   22ac0:	mov	r7, r0
   22ac4:	bl	1ee24 <__assert_fail@plt+0xd280>
   22ac8:	ldr	r3, [sp, #24]
   22acc:	mov	r0, r7
   22ad0:	str	r3, [r8]
   22ad4:	add	sp, sp, #44	; 0x2c
   22ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22adc:	mov	r3, #8
   22ae0:	sub	r2, r5, r2
   22ae4:	str	r3, [sp]
   22ae8:	add	r1, sp, #36	; 0x24
   22aec:	add	r2, r2, #1
   22af0:	mvn	r3, #-2147483648	; 0x80000000
   22af4:	bl	34a24 <__assert_fail@plt+0x22e80>
   22af8:	mov	r6, r0
   22afc:	ldm	r7, {r0, r1}
   22b00:	str	r6, [r4]
   22b04:	stm	r6, {r0, r1}
   22b08:	b	229e8 <__assert_fail@plt+0x10e44>
   22b0c:	bl	11b68 <abort@plt>
   22b10:	ldrdeq	fp, [r4], -ip
   22b14:	strdeq	fp, [r4], -r4
   22b18:	strdeq	fp, [r4], -ip
   22b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b20:	sub	sp, sp, #44	; 0x2c
   22b24:	mov	sl, r0
   22b28:	bl	119b8 <__errno_location@plt>
   22b2c:	ldr	r4, [pc, #348]	; 22c90 <__assert_fail@plt+0x110ec>
   22b30:	ldr	r2, [r4, #4]
   22b34:	ldr	r5, [r4]
   22b38:	cmp	r2, #0
   22b3c:	ldr	r3, [r0]
   22b40:	mov	r8, r0
   22b44:	str	r3, [sp, #28]
   22b48:	bgt	22ba4 <__assert_fail@plt+0x11000>
   22b4c:	add	r6, r4, #8
   22b50:	cmp	r5, r6
   22b54:	str	r2, [sp, #36]	; 0x24
   22b58:	beq	22c60 <__assert_fail@plt+0x110bc>
   22b5c:	mov	r3, #8
   22b60:	mov	r0, r5
   22b64:	str	r3, [sp]
   22b68:	rsb	r2, r2, #1
   22b6c:	mvn	r3, #-2147483648	; 0x80000000
   22b70:	add	r1, sp, #36	; 0x24
   22b74:	bl	34a24 <__assert_fail@plt+0x22e80>
   22b78:	mov	r5, r0
   22b7c:	str	r0, [r4]
   22b80:	ldr	r0, [r4, #4]
   22b84:	ldr	r2, [sp, #36]	; 0x24
   22b88:	mov	r1, #0
   22b8c:	sub	r2, r2, r0
   22b90:	add	r0, r5, r0, lsl #3
   22b94:	lsl	r2, r2, #3
   22b98:	bl	119e8 <memset@plt>
   22b9c:	ldr	r3, [sp, #36]	; 0x24
   22ba0:	str	r3, [r4, #4]
   22ba4:	ldr	r7, [r4, #20]
   22ba8:	ldr	r9, [r5]
   22bac:	ldr	r6, [r5, #4]
   22bb0:	ldr	r2, [r4, #56]	; 0x38
   22bb4:	ldr	r3, [r4, #16]
   22bb8:	ldr	ip, [r4, #60]	; 0x3c
   22bbc:	ldr	fp, [pc, #208]	; 22c94 <__assert_fail@plt+0x110f0>
   22bc0:	orr	r7, r7, #1
   22bc4:	str	r2, [sp, #12]
   22bc8:	str	r3, [sp]
   22bcc:	str	r7, [sp, #4]
   22bd0:	mov	r1, r9
   22bd4:	mov	r0, r6
   22bd8:	str	ip, [sp, #16]
   22bdc:	str	fp, [sp, #8]
   22be0:	mvn	r3, #0
   22be4:	mov	r2, sl
   22be8:	bl	1ee24 <__assert_fail@plt+0xd280>
   22bec:	cmp	r9, r0
   22bf0:	bhi	22c4c <__assert_fail@plt+0x110a8>
   22bf4:	ldr	r3, [pc, #156]	; 22c98 <__assert_fail@plt+0x110f4>
   22bf8:	add	r9, r0, #1
   22bfc:	cmp	r6, r3
   22c00:	str	r9, [r5]
   22c04:	beq	22c10 <__assert_fail@plt+0x1106c>
   22c08:	mov	r0, r6
   22c0c:	bl	184ec <__assert_fail@plt+0x6948>
   22c10:	mov	r0, r9
   22c14:	bl	34808 <__assert_fail@plt+0x22c64>
   22c18:	ldr	ip, [r4, #60]	; 0x3c
   22c1c:	ldr	r3, [r4, #16]
   22c20:	ldr	lr, [r4, #56]	; 0x38
   22c24:	mov	r2, sl
   22c28:	mov	r1, r9
   22c2c:	str	r0, [r5, #4]
   22c30:	str	r3, [sp]
   22c34:	stmib	sp, {r7, fp}
   22c38:	str	ip, [sp, #16]
   22c3c:	str	lr, [sp, #12]
   22c40:	mvn	r3, #0
   22c44:	mov	r6, r0
   22c48:	bl	1ee24 <__assert_fail@plt+0xd280>
   22c4c:	ldr	r3, [sp, #28]
   22c50:	mov	r0, r6
   22c54:	str	r3, [r8]
   22c58:	add	sp, sp, #44	; 0x2c
   22c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22c60:	mov	r3, #8
   22c64:	str	r3, [sp]
   22c68:	add	r1, sp, #36	; 0x24
   22c6c:	rsb	r2, r2, #1
   22c70:	mvn	r3, #-2147483648	; 0x80000000
   22c74:	mov	r0, #0
   22c78:	bl	34a24 <__assert_fail@plt+0x22e80>
   22c7c:	mov	r5, r0
   22c80:	ldm	r6, {r0, r1}
   22c84:	str	r5, [r4]
   22c88:	stm	r5, {r0, r1}
   22c8c:	b	22b80 <__assert_fail@plt+0x10fdc>
   22c90:	ldrdeq	fp, [r4], -ip
   22c94:	strdeq	fp, [r4], -r4
   22c98:	strdeq	fp, [r4], -ip
   22c9c:	mov	ip, r0
   22ca0:	ldr	r3, [r1, #40]	; 0x28
   22ca4:	ldr	r0, [r1, #56]	; 0x38
   22ca8:	cmp	r0, r3
   22cac:	ble	22d20 <__assert_fail@plt+0x1117c>
   22cb0:	push	{r4, lr}
   22cb4:	ldr	lr, [r1, #4]
   22cb8:	ldrb	r0, [lr, r3]
   22cbc:	strb	r0, [ip]
   22cc0:	ldr	r4, [r1, #80]	; 0x50
   22cc4:	cmp	r4, #1
   22cc8:	ble	22ce8 <__assert_fail@plt+0x11144>
   22ccc:	ldr	r4, [r1, #28]
   22cd0:	cmp	r3, r4
   22cd4:	beq	22ce8 <__assert_fail@plt+0x11144>
   22cd8:	ldr	r4, [r1, #8]
   22cdc:	ldr	r4, [r4, r3, lsl #2]
   22ce0:	cmn	r4, #1
   22ce4:	beq	22d68 <__assert_fail@plt+0x111c4>
   22ce8:	cmp	r0, #92	; 0x5c
   22cec:	beq	22d30 <__assert_fail@plt+0x1118c>
   22cf0:	cmp	r0, #91	; 0x5b
   22cf4:	beq	22d74 <__assert_fail@plt+0x111d0>
   22cf8:	cmp	r0, #93	; 0x5d
   22cfc:	beq	22d58 <__assert_fail@plt+0x111b4>
   22d00:	cmp	r0, #94	; 0x5e
   22d04:	beq	22d98 <__assert_fail@plt+0x111f4>
   22d08:	cmp	r0, #45	; 0x2d
   22d0c:	bne	22d48 <__assert_fail@plt+0x111a4>
   22d10:	mov	r3, #22
   22d14:	strb	r3, [ip, #4]
   22d18:	mov	r0, #1
   22d1c:	pop	{r4, pc}
   22d20:	mov	r3, #2
   22d24:	strb	r3, [ip, #4]
   22d28:	mov	r0, #0
   22d2c:	bx	lr
   22d30:	tst	r2, #1
   22d34:	beq	22d48 <__assert_fail@plt+0x111a4>
   22d38:	ldr	r2, [r1, #48]	; 0x30
   22d3c:	add	r3, r3, #1
   22d40:	cmp	r3, r2
   22d44:	blt	22ddc <__assert_fail@plt+0x11238>
   22d48:	mov	r3, #1
   22d4c:	mov	r0, r3
   22d50:	strb	r3, [ip, #4]
   22d54:	pop	{r4, pc}
   22d58:	mov	r3, #21
   22d5c:	strb	r3, [ip, #4]
   22d60:	mov	r0, #1
   22d64:	pop	{r4, pc}
   22d68:	mov	r0, #1
   22d6c:	strb	r0, [ip, #4]
   22d70:	pop	{r4, pc}
   22d74:	ldr	r1, [r1, #48]	; 0x30
   22d78:	add	r0, r3, #1
   22d7c:	cmp	r0, r1
   22d80:	blt	22da8 <__assert_fail@plt+0x11204>
   22d84:	mov	r0, #1
   22d88:	mov	r3, #91	; 0x5b
   22d8c:	strb	r0, [ip, #4]
   22d90:	strb	r3, [ip]
   22d94:	pop	{r4, pc}
   22d98:	mov	r3, #25
   22d9c:	strb	r3, [ip, #4]
   22da0:	mov	r0, #1
   22da4:	pop	{r4, pc}
   22da8:	add	r3, lr, r3
   22dac:	ldrb	r3, [r3, #1]
   22db0:	cmp	r3, #58	; 0x3a
   22db4:	strb	r3, [ip]
   22db8:	beq	22df4 <__assert_fail@plt+0x11250>
   22dbc:	cmp	r3, #61	; 0x3d
   22dc0:	beq	22e0c <__assert_fail@plt+0x11268>
   22dc4:	cmp	r3, #46	; 0x2e
   22dc8:	bne	22d84 <__assert_fail@plt+0x111e0>
   22dcc:	mov	r3, #26
   22dd0:	strb	r3, [ip, #4]
   22dd4:	mov	r0, #2
   22dd8:	pop	{r4, pc}
   22ddc:	str	r3, [r1, #40]	; 0x28
   22de0:	ldrb	r3, [lr, r3]
   22de4:	mov	r0, #1
   22de8:	strb	r0, [ip, #4]
   22dec:	strb	r3, [ip]
   22df0:	pop	{r4, pc}
   22df4:	tst	r2, #4
   22df8:	beq	22d84 <__assert_fail@plt+0x111e0>
   22dfc:	mov	r3, #30
   22e00:	strb	r3, [ip, #4]
   22e04:	mov	r0, #2
   22e08:	pop	{r4, pc}
   22e0c:	mov	r3, #28
   22e10:	strb	r3, [ip, #4]
   22e14:	mov	r0, #2
   22e18:	pop	{r4, pc}
   22e1c:	ldr	r3, [r1, #8]
   22e20:	push	{r4, r5, r6, r7, r8, lr}
   22e24:	mov	r4, #0
   22e28:	str	r2, [r1]
   22e2c:	mov	r8, r0
   22e30:	str	r3, [r1, #16]
   22e34:	lsl	r0, r3, #2
   22e38:	str	r4, [r1, #20]
   22e3c:	mov	r5, r1
   22e40:	mov	r7, r2
   22e44:	bl	36944 <__assert_fail@plt+0x24da0>
   22e48:	cmp	r0, r4
   22e4c:	str	r0, [r5, #24]
   22e50:	beq	22f24 <__assert_fail@plt+0x11380>
   22e54:	ldr	r1, [r5, #8]
   22e58:	cmp	r1, #0
   22e5c:	bgt	22e70 <__assert_fail@plt+0x112cc>
   22e60:	b	22ebc <__assert_fail@plt+0x11318>
   22e64:	add	r4, r4, #1
   22e68:	cmp	r4, r1
   22e6c:	bge	22ebc <__assert_fail@plt+0x11318>
   22e70:	ldr	r2, [r5, #12]
   22e74:	ldr	r3, [r8]
   22e78:	ldr	r6, [r2, r4, lsl #2]
   22e7c:	add	r3, r3, r6, lsl #3
   22e80:	ldrb	r3, [r3, #4]
   22e84:	tst	r3, #8
   22e88:	bne	22e64 <__assert_fail@plt+0x112c0>
   22e8c:	ldr	r1, [r5, #20]
   22e90:	ldr	r3, [r5, #16]
   22e94:	cmp	r3, r1
   22e98:	beq	22efc <__assert_fail@plt+0x11358>
   22e9c:	ldr	r0, [r5, #24]
   22ea0:	add	r3, r1, #1
   22ea4:	str	r3, [r5, #20]
   22ea8:	str	r6, [r0, r1, lsl #2]
   22eac:	ldr	r1, [r5, #8]
   22eb0:	add	r4, r4, #1
   22eb4:	cmp	r4, r1
   22eb8:	blt	22e70 <__assert_fail@plt+0x112cc>
   22ebc:	ldr	r4, [r8, #68]	; 0x44
   22ec0:	ldr	r6, [r8, #32]
   22ec4:	and	r7, r7, r4
   22ec8:	add	r7, r7, r7, lsl #1
   22ecc:	lsl	r4, r7, #2
   22ed0:	add	r7, r6, r4
   22ed4:	ldr	r3, [r6, r4]
   22ed8:	ldr	r2, [r7, #4]
   22edc:	cmp	r2, r3
   22ee0:	ldrgt	r2, [r7, #8]
   22ee4:	ble	22f2c <__assert_fail@plt+0x11388>
   22ee8:	add	r1, r3, #1
   22eec:	str	r1, [r6, r4]
   22ef0:	mov	r0, #0
   22ef4:	str	r5, [r2, r3, lsl #2]
   22ef8:	pop	{r4, r5, r6, r7, r8, pc}
   22efc:	add	r1, r1, #1
   22f00:	ldr	r0, [r5, #24]
   22f04:	lsl	r3, r1, #1
   22f08:	str	r3, [r5, #16]
   22f0c:	lsl	r1, r1, #3
   22f10:	bl	36970 <__assert_fail@plt+0x24dcc>
   22f14:	cmp	r0, #0
   22f18:	ldrne	r1, [r5, #20]
   22f1c:	strne	r0, [r5, #24]
   22f20:	bne	22ea0 <__assert_fail@plt+0x112fc>
   22f24:	mov	r0, #12
   22f28:	pop	{r4, r5, r6, r7, r8, pc}
   22f2c:	add	r3, r3, #1
   22f30:	ldr	r0, [r7, #8]
   22f34:	lsl	r1, r3, #3
   22f38:	lsl	r8, r3, #1
   22f3c:	bl	36970 <__assert_fail@plt+0x24dcc>
   22f40:	subs	r2, r0, #0
   22f44:	beq	22f24 <__assert_fail@plt+0x11380>
   22f48:	ldr	r3, [r6, r4]
   22f4c:	str	r2, [r7, #8]
   22f50:	str	r8, [r7, #4]
   22f54:	b	22ee8 <__assert_fail@plt+0x11344>
   22f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22f5c:	mov	r5, r0
   22f60:	ldr	r8, [r0, #36]	; 0x24
   22f64:	ldr	r3, [r0, #48]	; 0x30
   22f68:	ldr	r4, [r0, #28]
   22f6c:	cmp	r8, r3
   22f70:	movge	r8, r3
   22f74:	cmp	r8, r4
   22f78:	sub	sp, sp, #92	; 0x5c
   22f7c:	ble	230e0 <__assert_fail@plt+0x1153c>
   22f80:	add	r6, r0, #16
   22f84:	add	r7, sp, #16
   22f88:	mov	fp, #1
   22f8c:	mvn	sl, #-1073741824	; 0xc0000000
   22f90:	mov	r9, #255	; 0xff
   22f94:	b	23014 <__assert_fail@plt+0x11470>
   22f98:	ldr	r3, [r5, #24]
   22f9c:	ldr	r1, [r5]
   22fa0:	add	r3, r4, r3
   22fa4:	add	r1, r1, r3
   22fa8:	mov	r3, r6
   22fac:	add	r0, sp, #12
   22fb0:	bl	1db04 <__assert_fail@plt+0xbf60>
   22fb4:	sub	r2, r0, #1
   22fb8:	cmn	r2, #3
   22fbc:	mov	r3, r0
   22fc0:	bhi	23094 <__assert_fail@plt+0x114f0>
   22fc4:	cmn	r0, #2
   22fc8:	ldrne	r2, [sp, #12]
   22fcc:	beq	230c8 <__assert_fail@plt+0x11524>
   22fd0:	ldr	r0, [r5, #8]
   22fd4:	add	r3, r4, r3
   22fd8:	add	ip, r4, #1
   22fdc:	cmp	ip, r3
   22fe0:	str	r2, [r0, r4, lsl #2]
   22fe4:	lsl	r1, r4, #2
   22fe8:	bge	230f0 <__assert_fail@plt+0x1154c>
   22fec:	sub	r2, sl, r4
   22ff0:	add	r2, r2, r3
   22ff4:	add	r1, r1, #4
   22ff8:	add	r0, r0, r1
   22ffc:	lsl	r2, r2, #2
   23000:	mov	r1, r9
   23004:	mov	r4, r3
   23008:	bl	119e8 <memset@plt>
   2300c:	cmp	r8, r4
   23010:	ble	230e0 <__assert_fail@plt+0x1153c>
   23014:	ldm	r6, {r0, r1}
   23018:	ldr	ip, [r5, #64]	; 0x40
   2301c:	sub	r2, r8, r4
   23020:	cmp	ip, #0
   23024:	stm	r7, {r0, r1}
   23028:	beq	22f98 <__assert_fail@plt+0x113f4>
   2302c:	ldr	r3, [r5, #80]	; 0x50
   23030:	cmp	r3, #0
   23034:	ble	2308c <__assert_fail@plt+0x114e8>
   23038:	add	r0, sp, #23
   2303c:	mov	r3, #0
   23040:	str	r6, [sp, #4]
   23044:	b	2304c <__assert_fail@plt+0x114a8>
   23048:	ldr	ip, [r5, #64]	; 0x40
   2304c:	ldr	r1, [r5]
   23050:	ldr	r6, [r5, #24]
   23054:	add	r1, r1, r4
   23058:	add	r1, r1, r3
   2305c:	ldr	lr, [r5, #4]
   23060:	ldrb	r1, [r1, r6]
   23064:	add	lr, lr, r4
   23068:	ldrb	r1, [ip, r1]
   2306c:	strb	r1, [lr, r3]
   23070:	ldr	ip, [r5, #80]	; 0x50
   23074:	add	r3, r3, #1
   23078:	cmp	ip, r3
   2307c:	cmpgt	r2, r3
   23080:	strb	r1, [r0, #1]!
   23084:	bgt	23048 <__assert_fail@plt+0x114a4>
   23088:	ldr	r6, [sp, #4]
   2308c:	add	r1, sp, #24
   23090:	b	22fa8 <__assert_fail@plt+0x11404>
   23094:	ldr	r3, [r5]
   23098:	ldr	r2, [r5, #24]
   2309c:	add	r3, r3, r4
   230a0:	ldr	r1, [r5, #64]	; 0x40
   230a4:	ldrb	r2, [r3, r2]
   230a8:	cmp	r1, #0
   230ac:	mov	r3, fp
   230b0:	str	r2, [sp, #12]
   230b4:	ldrbne	r2, [r1, r2]
   230b8:	ldm	r7, {r0, r1}
   230bc:	strne	r2, [sp, #12]
   230c0:	stm	r6, {r0, r1}
   230c4:	b	22fd0 <__assert_fail@plt+0x1142c>
   230c8:	ldr	r2, [r5, #36]	; 0x24
   230cc:	ldr	r3, [r5, #48]	; 0x30
   230d0:	cmp	r2, r3
   230d4:	bge	23094 <__assert_fail@plt+0x114f0>
   230d8:	ldm	r7, {r0, r1}
   230dc:	stm	r6, {r0, r1}
   230e0:	str	r4, [r5, #28]
   230e4:	str	r4, [r5, #32]
   230e8:	add	sp, sp, #92	; 0x5c
   230ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   230f0:	mov	r4, ip
   230f4:	b	2300c <__assert_fail@plt+0x11468>
   230f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   230fc:	mov	r4, r0
   23100:	ldr	r6, [r0, #36]	; 0x24
   23104:	ldr	r3, [r0, #48]	; 0x30
   23108:	ldrb	r2, [r0, #74]	; 0x4a
   2310c:	cmp	r6, r3
   23110:	movge	r6, r3
   23114:	cmp	r2, #0
   23118:	sub	sp, sp, #100	; 0x64
   2311c:	ldr	r5, [r0, #28]
   23120:	bne	23130 <__assert_fail@plt+0x1158c>
   23124:	ldr	r3, [r0, #64]	; 0x40
   23128:	cmp	r3, #0
   2312c:	beq	23260 <__assert_fail@plt+0x116bc>
   23130:	ldr	r7, [r4, #32]
   23134:	cmp	r5, r6
   23138:	bge	2324c <__assert_fail@plt+0x116a8>
   2313c:	add	r3, sp, #24
   23140:	add	r9, r4, #16
   23144:	sub	sl, r6, r5
   23148:	str	r3, [sp, #4]
   2314c:	add	r3, sp, #20
   23150:	str	r3, [sp, #8]
   23154:	ldm	r9, {r0, r1}
   23158:	ldr	r2, [r4, #64]	; 0x40
   2315c:	ldr	r3, [sp, #4]
   23160:	cmp	r2, #0
   23164:	stm	r3, {r0, r1}
   23168:	bne	233b0 <__assert_fail@plt+0x1180c>
   2316c:	ldr	r3, [r4, #24]
   23170:	ldr	r2, [r4]
   23174:	add	r3, r7, r3
   23178:	add	r3, r2, r3
   2317c:	mov	r1, r3
   23180:	str	r3, [sp, #12]
   23184:	mov	r3, r9
   23188:	mov	r2, sl
   2318c:	ldr	r0, [sp, #8]
   23190:	bl	1db04 <__assert_fail@plt+0xbf60>
   23194:	sub	r3, r0, #1
   23198:	cmn	r3, #4
   2319c:	mov	r8, r0
   231a0:	str	r3, [sp, #8]
   231a4:	bhi	234c0 <__assert_fail@plt+0x1191c>
   231a8:	ldr	fp, [sp, #20]
   231ac:	mov	r0, fp
   231b0:	bl	11b50 <towupper@plt>
   231b4:	cmp	fp, r0
   231b8:	mov	sl, r0
   231bc:	beq	234a8 <__assert_fail@plt+0x11904>
   231c0:	add	r0, sp, #32
   231c4:	ldr	r2, [sp, #4]
   231c8:	mov	r1, sl
   231cc:	bl	116dc <wcrtomb@plt>
   231d0:	cmp	r8, r0
   231d4:	mov	fp, r0
   231d8:	bne	23554 <__assert_fail@plt+0x119b0>
   231dc:	ldr	r0, [r4, #4]
   231e0:	add	r1, sp, #32
   231e4:	add	r0, r0, r5
   231e8:	mov	r2, r8
   231ec:	bl	11784 <memcpy@plt>
   231f0:	ldrb	r3, [r4, #76]	; 0x4c
   231f4:	cmp	r3, #0
   231f8:	bne	23534 <__assert_fail@plt+0x11990>
   231fc:	add	r3, r8, r7
   23200:	ldr	r0, [r4, #8]
   23204:	add	r8, r5, r8
   23208:	add	r2, r5, #1
   2320c:	cmp	r2, r8
   23210:	mov	r7, r3
   23214:	str	sl, [r0, r5, lsl #2]
   23218:	bge	23650 <__assert_fail@plt+0x11aac>
   2321c:	mvn	r3, #-1073741824	; 0xc0000000
   23220:	sub	r3, r3, r5
   23224:	add	r3, r3, r8
   23228:	add	r0, r0, r2, lsl #2
   2322c:	mov	r1, #255	; 0xff
   23230:	lsl	r2, r3, #2
   23234:	mov	r5, r8
   23238:	bl	119e8 <memset@plt>
   2323c:	b	23134 <__assert_fail@plt+0x11590>
   23240:	ldr	r3, [sp, #4]
   23244:	ldm	r3, {r0, r1}
   23248:	stm	r9, {r0, r1}
   2324c:	mov	r0, #0
   23250:	str	r5, [r4, #28]
   23254:	str	r7, [r4, #32]
   23258:	add	sp, sp, #100	; 0x64
   2325c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23260:	ldrb	r3, [r0, #76]	; 0x4c
   23264:	cmp	r3, #0
   23268:	bne	23130 <__assert_fail@plt+0x1158c>
   2326c:	cmp	r5, r6
   23270:	bge	23498 <__assert_fail@plt+0x118f4>
   23274:	add	r9, r0, #16
   23278:	b	232a8 <__assert_fail@plt+0x11704>
   2327c:	mov	r0, fp
   23280:	bl	11b50 <towupper@plt>
   23284:	bics	r3, r0, #127	; 0x7f
   23288:	bne	232d0 <__assert_fail@plt+0x1172c>
   2328c:	ldr	r3, [r4, #4]
   23290:	strb	r0, [r3, r5]
   23294:	ldr	r3, [r4, #8]
   23298:	str	r0, [r3, r5, lsl #2]
   2329c:	add	r5, r5, #1
   232a0:	cmp	r6, r5
   232a4:	ble	23498 <__assert_fail@plt+0x118f4>
   232a8:	ldr	r8, [r4]
   232ac:	ldr	r7, [r4, #24]
   232b0:	add	r3, r8, r7
   232b4:	ldrb	fp, [r3, r5]
   232b8:	tst	fp, #128	; 0x80
   232bc:	bne	232d0 <__assert_fail@plt+0x1172c>
   232c0:	mov	r0, r9
   232c4:	bl	117b4 <mbsinit@plt>
   232c8:	cmp	r0, #0
   232cc:	bne	2327c <__assert_fail@plt+0x116d8>
   232d0:	ldm	r9, {r0, r1}
   232d4:	add	r3, sp, #24
   232d8:	add	r7, r7, r5
   232dc:	sub	sl, r6, r5
   232e0:	stm	r3, {r0, r1}
   232e4:	mov	r2, sl
   232e8:	add	r1, r8, r7
   232ec:	mov	r3, r9
   232f0:	add	r0, sp, #20
   232f4:	bl	1db04 <__assert_fail@plt+0xbf60>
   232f8:	add	r2, sp, #24
   232fc:	str	r2, [sp, #4]
   23300:	add	r2, sp, #20
   23304:	mov	r7, r5
   23308:	str	r2, [sp, #8]
   2330c:	sub	r3, r0, #1
   23310:	cmn	r3, #4
   23314:	mov	r8, r0
   23318:	bhi	2342c <__assert_fail@plt+0x11888>
   2331c:	ldr	r3, [sp, #20]
   23320:	mov	r0, r3
   23324:	str	r3, [sp, #12]
   23328:	bl	11b50 <towupper@plt>
   2332c:	ldr	r3, [sp, #12]
   23330:	cmp	r3, r0
   23334:	mov	fp, r0
   23338:	beq	23408 <__assert_fail@plt+0x11864>
   2333c:	mov	r1, r0
   23340:	add	r2, sp, #24
   23344:	add	r0, sp, #32
   23348:	bl	116dc <wcrtomb@plt>
   2334c:	cmp	r8, r0
   23350:	bne	2345c <__assert_fail@plt+0x118b8>
   23354:	ldr	r0, [r4, #4]
   23358:	mov	r2, r8
   2335c:	add	r0, r0, r5
   23360:	add	r1, sp, #32
   23364:	bl	11784 <memcpy@plt>
   23368:	add	r5, r5, #1
   2336c:	sub	r3, r5, #1
   23370:	ldr	r0, [r4, #8]
   23374:	add	r8, r3, r8
   23378:	cmp	r5, r8
   2337c:	str	fp, [r0, r7, lsl #2]
   23380:	lsl	r3, r7, #2
   23384:	bge	232a0 <__assert_fail@plt+0x116fc>
   23388:	mvn	r2, #-1073741824	; 0xc0000000
   2338c:	sub	r2, r2, r7
   23390:	add	r2, r2, r8
   23394:	add	r3, r3, #4
   23398:	lsl	r2, r2, #2
   2339c:	add	r0, r0, r3
   233a0:	mov	r1, #255	; 0xff
   233a4:	mov	r5, r8
   233a8:	bl	119e8 <memset@plt>
   233ac:	b	232a0 <__assert_fail@plt+0x116fc>
   233b0:	ldr	lr, [r4, #80]	; 0x50
   233b4:	cmp	lr, #0
   233b8:	ble	233f8 <__assert_fail@plt+0x11854>
   233bc:	ldr	r3, [r4, #24]
   233c0:	ldr	r1, [r4]
   233c4:	add	r3, r7, r3
   233c8:	sub	r3, r3, #1
   233cc:	cmp	lr, sl
   233d0:	add	r1, r1, r3
   233d4:	movge	lr, sl
   233d8:	add	r0, sp, #31
   233dc:	mov	r3, #0
   233e0:	ldrb	ip, [r1, #1]!
   233e4:	add	r3, r3, #1
   233e8:	cmp	r3, lr
   233ec:	ldrb	ip, [r2, ip]
   233f0:	strb	ip, [r0, #1]!
   233f4:	blt	233e0 <__assert_fail@plt+0x1183c>
   233f8:	add	r3, sp, #32
   233fc:	str	r3, [sp, #12]
   23400:	mov	r1, r3
   23404:	b	23184 <__assert_fail@plt+0x115e0>
   23408:	ldr	r3, [r4, #24]
   2340c:	ldr	r1, [r4]
   23410:	ldr	r0, [r4, #4]
   23414:	add	r3, r5, r3
   23418:	add	r1, r1, r3
   2341c:	add	r0, r0, r5
   23420:	mov	r2, r8
   23424:	bl	11784 <memcpy@plt>
   23428:	b	23368 <__assert_fail@plt+0x117c4>
   2342c:	cmn	r3, #3
   23430:	bne	23464 <__assert_fail@plt+0x118c0>
   23434:	ldr	r2, [r4, #36]	; 0x24
   23438:	ldr	r3, [r4, #48]	; 0x30
   2343c:	cmp	r2, r3
   23440:	blt	2348c <__assert_fail@plt+0x118e8>
   23444:	ldr	r3, [r4, #4]
   23448:	strb	fp, [r3, r5]
   2344c:	ldr	r3, [r4, #8]
   23450:	add	r5, r5, #1
   23454:	str	fp, [r3, r7, lsl #2]
   23458:	b	232a0 <__assert_fail@plt+0x116fc>
   2345c:	mov	r7, r5
   23460:	b	23154 <__assert_fail@plt+0x115b0>
   23464:	ldr	r3, [r4, #4]
   23468:	cmn	r0, #1
   2346c:	strb	fp, [r3, r5]
   23470:	ldr	r3, [r4, #8]
   23474:	add	r5, r5, #1
   23478:	str	fp, [r3, r7, lsl #2]
   2347c:	addeq	r3, sp, #24
   23480:	ldmeq	r3, {r0, r1}
   23484:	stmeq	r9, {r0, r1}
   23488:	b	232a0 <__assert_fail@plt+0x116fc>
   2348c:	add	r3, sp, #24
   23490:	ldm	r3, {r0, r1}
   23494:	stm	r9, {r0, r1}
   23498:	str	r5, [r4, #28]
   2349c:	str	r5, [r4, #32]
   234a0:	mov	r0, #0
   234a4:	b	23258 <__assert_fail@plt+0x116b4>
   234a8:	ldr	r0, [r4, #4]
   234ac:	ldr	r1, [sp, #12]
   234b0:	add	r0, r0, r5
   234b4:	mov	r2, r8
   234b8:	bl	11784 <memcpy@plt>
   234bc:	b	231f0 <__assert_fail@plt+0x1164c>
   234c0:	cmn	r3, #3
   234c4:	bne	234d8 <__assert_fail@plt+0x11934>
   234c8:	ldr	r2, [r4, #36]	; 0x24
   234cc:	ldr	r3, [r4, #48]	; 0x30
   234d0:	cmp	r2, r3
   234d4:	blt	23240 <__assert_fail@plt+0x1169c>
   234d8:	ldr	r3, [r4]
   234dc:	ldr	r1, [r4, #24]
   234e0:	add	r3, r3, r7
   234e4:	ldr	r2, [r4, #64]	; 0x40
   234e8:	ldrb	r3, [r3, r1]
   234ec:	cmp	r2, #0
   234f0:	mov	r1, r5
   234f4:	ldrbne	r3, [r2, r3]
   234f8:	ldr	r2, [r4, #4]
   234fc:	strb	r3, [r2, r5]
   23500:	ldrb	r2, [r4, #76]	; 0x4c
   23504:	cmp	r2, #0
   23508:	ldrne	r2, [r4, #12]
   2350c:	strne	r7, [r2, r5, lsl #2]
   23510:	ldr	r2, [r4, #8]
   23514:	cmn	r8, #1
   23518:	add	r7, r7, #1
   2351c:	add	r5, r5, #1
   23520:	str	r3, [r2, r1, lsl #2]
   23524:	ldreq	r3, [sp, #4]
   23528:	ldmeq	r3, {r0, r1}
   2352c:	stmeq	r9, {r0, r1}
   23530:	b	23134 <__assert_fail@plt+0x11590>
   23534:	ldr	r2, [r4, #12]
   23538:	add	r3, r8, r7
   2353c:	add	r2, r2, r5, lsl #2
   23540:	str	r7, [r2], #4
   23544:	add	r7, r7, #1
   23548:	cmp	r3, r7
   2354c:	bne	23540 <__assert_fail@plt+0x1199c>
   23550:	b	23200 <__assert_fail@plt+0x1165c>
   23554:	cmn	r0, #1
   23558:	beq	234a8 <__assert_fail@plt+0x11904>
   2355c:	ldr	r0, [r4, #36]	; 0x24
   23560:	add	r6, r5, fp
   23564:	cmp	r6, r0
   23568:	bhi	23240 <__assert_fail@plt+0x1169c>
   2356c:	ldr	r3, [r4, #12]
   23570:	cmp	r3, #0
   23574:	beq	23658 <__assert_fail@plt+0x11ab4>
   23578:	ldrb	r3, [r4, #76]	; 0x4c
   2357c:	cmp	r3, #0
   23580:	bne	235ac <__assert_fail@plt+0x11a08>
   23584:	cmp	r5, #0
   23588:	ldrne	r2, [r4, #12]
   2358c:	subne	r2, r2, #4
   23590:	beq	235a4 <__assert_fail@plt+0x11a00>
   23594:	str	r3, [r2, #4]!
   23598:	add	r3, r3, #1
   2359c:	cmp	r5, r3
   235a0:	bne	23594 <__assert_fail@plt+0x119f0>
   235a4:	mov	r3, #1
   235a8:	strb	r3, [r4, #76]	; 0x4c
   235ac:	ldr	r0, [r4, #4]
   235b0:	add	r1, sp, #32
   235b4:	mov	r2, fp
   235b8:	add	r0, r0, r5
   235bc:	bl	11784 <memcpy@plt>
   235c0:	ldr	r3, [r4, #8]
   235c4:	ldr	r1, [r4, #12]
   235c8:	lsl	r2, r5, #2
   235cc:	cmp	fp, #1
   235d0:	str	sl, [r3, r5, lsl #2]
   235d4:	add	r3, r3, r2
   235d8:	str	r7, [r1, r5, lsl #2]
   235dc:	add	r2, r1, r2
   235e0:	bls	23610 <__assert_fail@plt+0x11a6c>
   235e4:	mov	r1, #1
   235e8:	mvn	ip, #0
   235ec:	cmp	r1, r8
   235f0:	ldr	r0, [sp, #8]
   235f4:	movcc	r0, r1
   235f8:	add	r1, r1, #1
   235fc:	add	r0, r0, r7
   23600:	cmp	r1, fp
   23604:	str	r0, [r2, #4]!
   23608:	str	ip, [r3, #4]!
   2360c:	bne	235ec <__assert_fail@plt+0x11a48>
   23610:	ldr	r2, [r4, #52]	; 0x34
   23614:	ldr	r3, [r4, #48]	; 0x30
   23618:	cmp	r7, r2
   2361c:	sub	fp, fp, r8
   23620:	ldrlt	r2, [r4, #56]	; 0x38
   23624:	add	r3, fp, r3
   23628:	addlt	fp, r2, fp
   2362c:	ldr	r2, [r4, #36]	; 0x24
   23630:	strlt	fp, [r4, #56]	; 0x38
   23634:	cmp	r3, r2
   23638:	mov	r5, r6
   2363c:	str	r3, [r4, #48]	; 0x30
   23640:	add	r7, r8, r7
   23644:	movlt	r6, r3
   23648:	movge	r6, r2
   2364c:	b	23134 <__assert_fail@plt+0x11590>
   23650:	mov	r5, r2
   23654:	b	23134 <__assert_fail@plt+0x11590>
   23658:	lsl	r0, r0, #2
   2365c:	bl	36944 <__assert_fail@plt+0x24da0>
   23660:	cmp	r0, #0
   23664:	str	r0, [r4, #12]
   23668:	moveq	r0, #12
   2366c:	bne	23578 <__assert_fail@plt+0x119d4>
   23670:	b	23258 <__assert_fail@plt+0x116b4>
   23674:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23678:	sub	sp, sp, #12
   2367c:	ldmib	r0, {r5, ip}
   23680:	stm	sp, {r1, r2}
   23684:	mov	r4, r0
   23688:	cmp	ip, r5
   2368c:	mov	r8, sp
   23690:	ldrb	r6, [sp, #4]
   23694:	bcs	23754 <__assert_fail@plt+0x11bb0>
   23698:	ldr	r7, [r0, #12]
   2369c:	ldr	r5, [r0, #20]
   236a0:	ldm	r8, {r0, r1}
   236a4:	ldr	r3, [r4]
   236a8:	cmp	r6, #5
   236ac:	add	r3, r3, ip, lsl #3
   236b0:	bic	r2, r1, #261120	; 0x3fc00
   236b4:	bic	r2, r2, #768	; 0x300
   236b8:	stm	r3, {r0, r1}
   236bc:	str	r2, [r3, #4]
   236c0:	beq	23740 <__assert_fail@plt+0x11b9c>
   236c4:	sub	r6, r6, #6
   236c8:	clz	r6, r6
   236cc:	lsr	r6, r6, #5
   236d0:	ldrb	r2, [r3, #6]
   236d4:	mvn	r1, #0
   236d8:	bic	r2, r2, #16
   236dc:	orr	r2, r2, r6, lsl #4
   236e0:	strb	r2, [r3, #6]
   236e4:	str	r1, [r7, ip, lsl #2]
   236e8:	ldr	r3, [r4, #8]
   236ec:	mov	r2, #0
   236f0:	add	r3, r3, r3, lsl #1
   236f4:	lsl	r3, r3, #2
   236f8:	add	r1, r5, r3
   236fc:	str	r2, [r5, r3]
   23700:	str	r2, [r1, #4]
   23704:	str	r2, [r1, #8]
   23708:	ldr	r3, [r4, #8]
   2370c:	ldr	r0, [r4, #24]
   23710:	add	r3, r3, r3, lsl #1
   23714:	lsl	r3, r3, #2
   23718:	add	r1, r0, r3
   2371c:	str	r2, [r0, r3]
   23720:	str	r2, [r1, #4]
   23724:	str	r2, [r1, #8]
   23728:	ldr	r3, [r4, #8]
   2372c:	mov	r0, r3
   23730:	add	r3, r3, #1
   23734:	str	r3, [r4, #8]
   23738:	add	sp, sp, #12
   2373c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23740:	ldr	r6, [r4, #92]	; 0x5c
   23744:	cmp	r6, #1
   23748:	movle	r6, #0
   2374c:	movgt	r6, #1
   23750:	b	236d0 <__assert_fail@plt+0x11b2c>
   23754:	ldr	r3, [pc, #200]	; 23824 <__assert_fail@plt+0x11c80>
   23758:	lsl	r9, r5, #1
   2375c:	cmp	r9, r3
   23760:	bhi	2381c <__assert_fail@plt+0x11c78>
   23764:	lsl	r1, r5, #4
   23768:	ldr	r0, [r0]
   2376c:	bl	36970 <__assert_fail@plt+0x24dcc>
   23770:	cmp	r0, #0
   23774:	beq	2381c <__assert_fail@plt+0x11c78>
   23778:	lsl	sl, r5, #3
   2377c:	mov	r1, sl
   23780:	str	r0, [r4]
   23784:	ldr	r0, [r4, #12]
   23788:	bl	36970 <__assert_fail@plt+0x24dcc>
   2378c:	mov	r1, sl
   23790:	add	r5, r9, r5, lsl #2
   23794:	lsl	sl, r5, #2
   23798:	mov	r7, r0
   2379c:	ldr	r0, [r4, #16]
   237a0:	bl	36970 <__assert_fail@plt+0x24dcc>
   237a4:	mov	r1, sl
   237a8:	mov	fp, r0
   237ac:	ldr	r0, [r4, #20]
   237b0:	bl	36970 <__assert_fail@plt+0x24dcc>
   237b4:	mov	r1, sl
   237b8:	mov	r5, r0
   237bc:	ldr	r0, [r4, #24]
   237c0:	bl	36970 <__assert_fail@plt+0x24dcc>
   237c4:	cmp	fp, #0
   237c8:	cmpne	r7, #0
   237cc:	mov	sl, r0
   237d0:	beq	237fc <__assert_fail@plt+0x11c58>
   237d4:	cmp	r0, #0
   237d8:	cmpne	r5, #0
   237dc:	beq	237fc <__assert_fail@plt+0x11c58>
   237e0:	ldr	ip, [r4, #8]
   237e4:	str	r7, [r4, #12]
   237e8:	str	fp, [r4, #16]
   237ec:	str	r5, [r4, #20]
   237f0:	str	r0, [r4, #24]
   237f4:	str	r9, [r4, #4]
   237f8:	b	236a0 <__assert_fail@plt+0x11afc>
   237fc:	mov	r0, r7
   23800:	bl	184ec <__assert_fail@plt+0x6948>
   23804:	mov	r0, fp
   23808:	bl	184ec <__assert_fail@plt+0x6948>
   2380c:	mov	r0, r5
   23810:	bl	184ec <__assert_fail@plt+0x6948>
   23814:	mov	r0, sl
   23818:	bl	184ec <__assert_fail@plt+0x6948>
   2381c:	mvn	r0, #0
   23820:	b	23738 <__assert_fail@plt+0x11b94>
   23824:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   23828:	ldr	r3, [r0]
   2382c:	push	{r4, r5, r6, lr}
   23830:	cmp	r3, #0
   23834:	mov	r4, r0
   23838:	mov	r6, r1
   2383c:	beq	23868 <__assert_fail@plt+0x11cc4>
   23840:	ldr	r2, [r0, #4]
   23844:	cmp	r2, #0
   23848:	bne	23898 <__assert_fail@plt+0x11cf4>
   2384c:	ldr	r3, [r0, #8]
   23850:	mov	r0, #1
   23854:	str	r1, [r3]
   23858:	ldr	r3, [r4, #4]
   2385c:	add	r3, r3, r0
   23860:	str	r3, [r4, #4]
   23864:	pop	{r4, r5, r6, pc}
   23868:	mov	r5, #1
   2386c:	str	r5, [r0]
   23870:	str	r5, [r0, #4]
   23874:	mov	r0, #4
   23878:	bl	36944 <__assert_fail@plt+0x24da0>
   2387c:	cmp	r0, #0
   23880:	str	r0, [r4, #8]
   23884:	strne	r6, [r0]
   23888:	streq	r0, [r4, #4]
   2388c:	streq	r0, [r4]
   23890:	movne	r0, r5
   23894:	pop	{r4, r5, r6, pc}
   23898:	cmp	r3, r2
   2389c:	beq	23918 <__assert_fail@plt+0x11d74>
   238a0:	ldr	r5, [r0, #8]
   238a4:	ldr	r3, [r5]
   238a8:	cmp	r6, r3
   238ac:	bge	238e4 <__assert_fail@plt+0x11d40>
   238b0:	cmp	r2, #0
   238b4:	ble	238cc <__assert_fail@plt+0x11d28>
   238b8:	lsl	r2, r2, #2
   238bc:	mov	r1, r5
   238c0:	add	r0, r5, #4
   238c4:	bl	11748 <memmove@plt>
   238c8:	mov	r2, #0
   238cc:	str	r6, [r5, r2, lsl #2]
   238d0:	ldr	r3, [r4, #4]
   238d4:	mov	r0, #1
   238d8:	add	r3, r3, r0
   238dc:	str	r3, [r4, #4]
   238e0:	pop	{r4, r5, r6, pc}
   238e4:	sub	r3, r2, #-1073741823	; 0xc0000001
   238e8:	ldr	r1, [r5, r3, lsl #2]
   238ec:	lsl	r3, r3, #2
   238f0:	cmp	r6, r1
   238f4:	bge	238cc <__assert_fail@plt+0x11d28>
   238f8:	add	r3, r3, #4
   238fc:	add	r3, r5, r3
   23900:	str	r1, [r3], #-4
   23904:	ldr	r1, [r3, #-4]
   23908:	sub	r2, r2, #1
   2390c:	cmp	r6, r1
   23910:	blt	23900 <__assert_fail@plt+0x11d5c>
   23914:	b	238cc <__assert_fail@plt+0x11d28>
   23918:	lsl	r3, r2, #1
   2391c:	str	r3, [r0]
   23920:	lsl	r1, r2, #3
   23924:	ldr	r0, [r0, #8]
   23928:	bl	36970 <__assert_fail@plt+0x24dcc>
   2392c:	subs	r5, r0, #0
   23930:	ldrne	r2, [r4, #4]
   23934:	strne	r5, [r4, #8]
   23938:	bne	238a4 <__assert_fail@plt+0x11d00>
   2393c:	mov	r0, r5
   23940:	pop	{r4, r5, r6, pc}
   23944:	cmp	r0, #0
   23948:	ble	239cc <__assert_fail@plt+0x11e28>
   2394c:	push	{lr}		; (str lr, [sp, #-4]!)
   23950:	sub	ip, r0, #1
   23954:	ldr	lr, [r1]
   23958:	mov	r0, #0
   2395c:	cmp	r0, ip
   23960:	bcs	2399c <__assert_fail@plt+0x11df8>
   23964:	add	r1, r0, ip
   23968:	lsr	r1, r1, #1
   2396c:	ldr	r3, [lr, r1, lsl #2]
   23970:	cmp	r2, r3
   23974:	ble	2398c <__assert_fail@plt+0x11de8>
   23978:	b	239b0 <__assert_fail@plt+0x11e0c>
   2397c:	ldr	ip, [lr, r3, lsl #2]
   23980:	cmp	ip, r2
   23984:	blt	239b8 <__assert_fail@plt+0x11e14>
   23988:	mov	r1, r3
   2398c:	add	r3, r0, r1
   23990:	cmp	r0, r1
   23994:	lsr	r3, r3, #1
   23998:	bcc	2397c <__assert_fail@plt+0x11dd8>
   2399c:	ldr	r3, [lr, r0, lsl #2]
   239a0:	cmp	r2, r3
   239a4:	beq	239c4 <__assert_fail@plt+0x11e20>
   239a8:	mov	r0, #0
   239ac:	pop	{pc}		; (ldr pc, [sp], #4)
   239b0:	mov	r3, r1
   239b4:	mov	r1, ip
   239b8:	add	r0, r3, #1
   239bc:	mov	ip, r1
   239c0:	b	2395c <__assert_fail@plt+0x11db8>
   239c4:	add	r0, r0, #1
   239c8:	pop	{pc}		; (ldr pc, [sp], #4)
   239cc:	mov	r0, #0
   239d0:	bx	lr
   239d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   239d8:	mov	sl, r0
   239dc:	ldr	r7, [r2, #4]
   239e0:	ldr	r0, [r1, #4]
   239e4:	ldr	r3, [sl, #4]
   239e8:	ldr	r9, [r1, #8]
   239ec:	ldr	r8, [r2, #8]
   239f0:	sub	r5, r0, #1
   239f4:	sub	r6, r7, #1
   239f8:	add	r0, r3, r0
   239fc:	add	r7, r0, r7
   23a00:	ldr	ip, [r9, r5, lsl #2]
   23a04:	ldr	r4, [r8, r6, lsl #2]
   23a08:	ldr	r0, [sl, #8]
   23a0c:	sub	r3, r3, #1
   23a10:	cmp	ip, r4
   23a14:	beq	23a30 <__assert_fail@plt+0x11e8c>
   23a18:	bge	23a80 <__assert_fail@plt+0x11edc>
   23a1c:	subs	r6, r6, #1
   23a20:	bmi	23aa0 <__assert_fail@plt+0x11efc>
   23a24:	ldr	r4, [r8, r6, lsl #2]
   23a28:	cmp	ip, r4
   23a2c:	bne	23a18 <__assert_fail@plt+0x11e74>
   23a30:	cmp	r3, #0
   23a34:	blt	23a60 <__assert_fail@plt+0x11ebc>
   23a38:	ldr	lr, [r0, r3, lsl #2]
   23a3c:	add	ip, r0, r3, lsl #2
   23a40:	cmp	lr, r4
   23a44:	bgt	23a58 <__assert_fail@plt+0x11eb4>
   23a48:	b	23a90 <__assert_fail@plt+0x11eec>
   23a4c:	ldr	lr, [ip, #-4]!
   23a50:	cmp	lr, r4
   23a54:	ble	23a90 <__assert_fail@plt+0x11eec>
   23a58:	subs	r3, r3, #1
   23a5c:	bcs	23a4c <__assert_fail@plt+0x11ea8>
   23a60:	sub	r7, r7, #1
   23a64:	subs	r5, r5, #1
   23a68:	str	r4, [r0, r7, lsl #2]
   23a6c:	bmi	23aa0 <__assert_fail@plt+0x11efc>
   23a70:	subs	r6, r6, #1
   23a74:	bmi	23aa0 <__assert_fail@plt+0x11efc>
   23a78:	ldr	ip, [r9, r5, lsl #2]
   23a7c:	b	23a24 <__assert_fail@plt+0x11e80>
   23a80:	subs	r5, r5, #1
   23a84:	bmi	23aa0 <__assert_fail@plt+0x11efc>
   23a88:	ldr	ip, [r9, r5, lsl #2]
   23a8c:	b	23a10 <__assert_fail@plt+0x11e6c>
   23a90:	cmp	lr, r4
   23a94:	bne	23a60 <__assert_fail@plt+0x11ebc>
   23a98:	subs	r5, r5, #1
   23a9c:	bpl	23a70 <__assert_fail@plt+0x11ecc>
   23aa0:	ldr	ip, [sl, #4]
   23aa4:	ldr	r1, [r1, #4]
   23aa8:	ldr	r3, [r2, #4]
   23aac:	add	r1, ip, r1
   23ab0:	add	r1, r1, r3
   23ab4:	sub	r2, r1, r7
   23ab8:	sub	r3, ip, #1
   23abc:	cmp	r3, #0
   23ac0:	cmpge	r2, #0
   23ac4:	add	ip, ip, r2
   23ac8:	sub	r1, r1, #1
   23acc:	str	ip, [sl, #4]
   23ad0:	bgt	23af8 <__assert_fail@plt+0x11f54>
   23ad4:	lsl	r2, r2, #2
   23ad8:	add	r1, r0, r7, lsl #2
   23adc:	bl	11784 <memcpy@plt>
   23ae0:	mov	r0, #0
   23ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23ae8:	sub	r3, r3, #1
   23aec:	cmn	r3, #1
   23af0:	str	ip, [r0, r5, lsl #2]
   23af4:	beq	23ad4 <__assert_fail@plt+0x11f30>
   23af8:	ldr	lr, [r0, r1, lsl #2]
   23afc:	ldr	ip, [r0, r3, lsl #2]
   23b00:	add	r5, r3, r2
   23b04:	cmp	lr, ip
   23b08:	mov	r4, r5
   23b0c:	ble	23ae8 <__assert_fail@plt+0x11f44>
   23b10:	subs	r2, r2, #1
   23b14:	sub	r1, r1, #1
   23b18:	str	lr, [r0, r5, lsl #2]
   23b1c:	bne	23af8 <__assert_fail@plt+0x11f54>
   23b20:	b	23ad8 <__assert_fail@plt+0x11f34>
   23b24:	push	{r4, r5, r6, lr}
   23b28:	mov	r5, r0
   23b2c:	ldr	r0, [r1]
   23b30:	sub	sp, sp, #16
   23b34:	cmp	r0, #31
   23b38:	beq	23bac <__assert_fail@plt+0x12008>
   23b3c:	lsl	ip, r0, #5
   23b40:	ldr	r4, [r5]
   23b44:	add	r0, r0, #1
   23b48:	add	r6, ip, #4
   23b4c:	str	r0, [r1]
   23b50:	ldr	r1, [sp, #32]
   23b54:	add	ip, r4, ip
   23b58:	mov	r5, #0
   23b5c:	str	r2, [ip, #8]
   23b60:	str	r3, [ip, #12]
   23b64:	str	r5, [ip, #4]
   23b68:	ldm	r1, {r0, r1}
   23b6c:	add	lr, ip, #24
   23b70:	cmp	r2, r5
   23b74:	stm	lr, {r0, r1}
   23b78:	ldrb	r1, [ip, #30]
   23b7c:	mvn	lr, #0
   23b80:	add	r0, r4, r6
   23b84:	and	r1, r1, #243	; 0xf3
   23b88:	str	r5, [ip, #16]
   23b8c:	str	r5, [ip, #20]
   23b90:	strb	r1, [ip, #30]
   23b94:	str	lr, [ip, #32]
   23b98:	strne	r0, [r2]
   23b9c:	cmp	r3, #0
   23ba0:	strne	r0, [r3]
   23ba4:	add	sp, sp, #16
   23ba8:	pop	{r4, r5, r6, pc}
   23bac:	mov	r0, #996	; 0x3e4
   23bb0:	stmib	sp, {r1, r2, r3}
   23bb4:	bl	36944 <__assert_fail@plt+0x24da0>
   23bb8:	subs	r4, r0, #0
   23bbc:	beq	23be0 <__assert_fail@plt+0x1203c>
   23bc0:	ldr	ip, [r5]
   23bc4:	mov	r6, #4
   23bc8:	str	ip, [r4]
   23bcc:	mov	r0, #1
   23bd0:	mov	ip, #0
   23bd4:	str	r4, [r5]
   23bd8:	ldmib	sp, {r1, r2, r3}
   23bdc:	b	23b4c <__assert_fail@plt+0x11fa8>
   23be0:	mov	r0, r4
   23be4:	b	23ba4 <__assert_fail@plt+0x12000>
   23be8:	push	{r4, r5, r6, lr}
   23bec:	mov	r4, r0
   23bf0:	ldr	r0, [r1, #4]
   23bf4:	str	r0, [r4, #4]
   23bf8:	ldr	r2, [r1, #4]
   23bfc:	cmp	r2, #0
   23c00:	ble	23c38 <__assert_fail@plt+0x12094>
   23c04:	str	r0, [r4]
   23c08:	lsl	r0, r0, #2
   23c0c:	mov	r5, r1
   23c10:	bl	36944 <__assert_fail@plt+0x24da0>
   23c14:	cmp	r0, #0
   23c18:	str	r0, [r4, #8]
   23c1c:	beq	23c50 <__assert_fail@plt+0x120ac>
   23c20:	ldr	r2, [r5, #4]
   23c24:	ldr	r1, [r5, #8]
   23c28:	lsl	r2, r2, #2
   23c2c:	bl	11784 <memcpy@plt>
   23c30:	mov	r0, #0
   23c34:	pop	{r4, r5, r6, pc}
   23c38:	mov	r2, #0
   23c3c:	mov	r0, r2
   23c40:	str	r2, [r4]
   23c44:	str	r2, [r4, #4]
   23c48:	str	r2, [r4, #8]
   23c4c:	pop	{r4, r5, r6, pc}
   23c50:	str	r0, [r4, #4]
   23c54:	str	r0, [r4]
   23c58:	mov	r0, #12
   23c5c:	pop	{r4, r5, r6, pc}
   23c60:	cmp	r1, #0
   23c64:	beq	23d30 <__assert_fail@plt+0x1218c>
   23c68:	ldr	r3, [r1, #4]
   23c6c:	cmp	r2, #0
   23c70:	cmpne	r3, #0
   23c74:	ble	23d28 <__assert_fail@plt+0x12184>
   23c78:	ldr	ip, [r2, #4]
   23c7c:	cmp	ip, #0
   23c80:	ble	23d48 <__assert_fail@plt+0x121a4>
   23c84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23c88:	mov	r8, r0
   23c8c:	add	r0, r3, ip
   23c90:	str	r0, [r8]
   23c94:	lsl	r0, r0, #2
   23c98:	mov	r5, r2
   23c9c:	mov	r7, r1
   23ca0:	bl	36944 <__assert_fail@plt+0x24da0>
   23ca4:	cmp	r0, #0
   23ca8:	str	r0, [r8, #8]
   23cac:	beq	23da4 <__assert_fail@plt+0x12200>
   23cb0:	mov	r3, #0
   23cb4:	mov	ip, r3
   23cb8:	ldr	r9, [r7, #4]
   23cbc:	ldr	sl, [r5, #4]
   23cc0:	mov	r4, r0
   23cc4:	mov	lr, #1
   23cc8:	b	23d08 <__assert_fail@plt+0x12164>
   23ccc:	cmp	r3, sl
   23cd0:	bge	23d64 <__assert_fail@plt+0x121c0>
   23cd4:	ldr	r2, [r7, #8]
   23cd8:	ldr	r1, [r5, #8]
   23cdc:	ldr	r2, [r2, ip, lsl #2]
   23ce0:	ldr	r6, [r1, r3, lsl #2]
   23ce4:	cmp	r2, r6
   23ce8:	addgt	r3, r3, #1
   23cec:	strgt	r6, [r4]
   23cf0:	bgt	23d00 <__assert_fail@plt+0x1215c>
   23cf4:	add	ip, ip, #1
   23cf8:	addeq	r3, r3, #1
   23cfc:	str	r2, [r4]
   23d00:	add	lr, lr, #1
   23d04:	add	r4, r4, #4
   23d08:	cmp	ip, r9
   23d0c:	sub	r6, lr, #1
   23d10:	blt	23ccc <__assert_fail@plt+0x12128>
   23d14:	cmp	r3, sl
   23d18:	blt	23d84 <__assert_fail@plt+0x121e0>
   23d1c:	str	r6, [r8, #4]
   23d20:	mov	r0, #0
   23d24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23d28:	cmp	r3, #0
   23d2c:	bgt	23d48 <__assert_fail@plt+0x121a4>
   23d30:	cmp	r2, #0
   23d34:	beq	23d4c <__assert_fail@plt+0x121a8>
   23d38:	ldr	r3, [r2, #4]
   23d3c:	cmp	r3, #0
   23d40:	ble	23d4c <__assert_fail@plt+0x121a8>
   23d44:	mov	r1, r2
   23d48:	b	23be8 <__assert_fail@plt+0x12044>
   23d4c:	mov	r3, #0
   23d50:	str	r3, [r0]
   23d54:	str	r3, [r0, #4]
   23d58:	str	r3, [r0, #8]
   23d5c:	mov	r0, r3
   23d60:	bx	lr
   23d64:	sub	r9, r9, ip
   23d68:	ldr	r1, [r7, #8]
   23d6c:	add	r0, r0, r6, lsl #2
   23d70:	add	r1, r1, ip, lsl #2
   23d74:	lsl	r2, r9, #2
   23d78:	add	r6, r6, r9
   23d7c:	bl	11784 <memcpy@plt>
   23d80:	b	23d1c <__assert_fail@plt+0x12178>
   23d84:	sub	sl, sl, r3
   23d88:	ldr	r1, [r5, #8]
   23d8c:	add	r0, r0, r6, lsl #2
   23d90:	add	r1, r1, r3, lsl #2
   23d94:	lsl	r2, sl, #2
   23d98:	bl	11784 <memcpy@plt>
   23d9c:	add	r6, r6, sl
   23da0:	b	23d1c <__assert_fail@plt+0x12178>
   23da4:	mov	r0, #12
   23da8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   23dac:	push	{r4, r5, r6, r7, r8, lr}
   23db0:	mov	r5, r0
   23db4:	ldr	r4, [r0, #4]
   23db8:	mov	r6, r1
   23dbc:	cmp	r4, #0
   23dc0:	beq	23ecc <__assert_fail@plt+0x12328>
   23dc4:	ldr	r1, [r1, #4]
   23dc8:	sub	r3, r4, #1
   23dcc:	sub	r2, r1, #1
   23dd0:	add	r4, r4, r1, lsl #1
   23dd4:	mvn	r7, r2
   23dd8:	mvn	lr, r3
   23ddc:	tst	r7, lr
   23de0:	bpl	23e1c <__assert_fail@plt+0x12278>
   23de4:	ldr	r1, [r5, #8]
   23de8:	ldr	r0, [r6, #8]
   23dec:	ldr	ip, [r1, r3, lsl #2]
   23df0:	ldr	r0, [r0, r2, lsl #2]
   23df4:	cmp	ip, r0
   23df8:	beq	23eb8 <__assert_fail@plt+0x12314>
   23dfc:	sublt	r4, r4, #1
   23e00:	sublt	r2, r2, #1
   23e04:	subge	r3, r3, #1
   23e08:	mvnlt	r7, r2
   23e0c:	mvnge	lr, r3
   23e10:	strlt	r0, [r1, r4, lsl #2]
   23e14:	tst	r7, lr
   23e18:	bmi	23de4 <__assert_fail@plt+0x12240>
   23e1c:	cmp	r2, #0
   23e20:	blt	23e40 <__assert_fail@plt+0x1229c>
   23e24:	add	r2, r2, #1
   23e28:	sub	r4, r4, r2
   23e2c:	ldr	r0, [r5, #8]
   23e30:	lsl	r2, r2, #2
   23e34:	add	r0, r0, r4, lsl #2
   23e38:	ldr	r1, [r6, #8]
   23e3c:	bl	11784 <memcpy@plt>
   23e40:	ldr	r1, [r6, #4]
   23e44:	ldr	ip, [r5, #4]
   23e48:	add	r1, ip, r1, lsl #1
   23e4c:	subs	r2, r1, r4
   23e50:	sub	r1, r1, #1
   23e54:	beq	23e90 <__assert_fail@plt+0x122ec>
   23e58:	ldr	r0, [r5, #8]
   23e5c:	sub	r3, ip, #1
   23e60:	add	ip, ip, r2
   23e64:	str	ip, [r5, #4]
   23e68:	ldr	lr, [r0, r1, lsl #2]
   23e6c:	ldr	ip, [r0, r3, lsl #2]
   23e70:	add	r6, r3, r2
   23e74:	cmp	lr, ip
   23e78:	mov	r5, r6
   23e7c:	ble	23e98 <__assert_fail@plt+0x122f4>
   23e80:	subs	r2, r2, #1
   23e84:	sub	r1, r1, #1
   23e88:	str	lr, [r0, r6, lsl #2]
   23e8c:	bne	23e68 <__assert_fail@plt+0x122c4>
   23e90:	mov	r0, #0
   23e94:	pop	{r4, r5, r6, r7, r8, pc}
   23e98:	subs	r3, r3, #1
   23e9c:	str	ip, [r0, r6, lsl #2]
   23ea0:	bpl	23e68 <__assert_fail@plt+0x122c4>
   23ea4:	lsl	r2, r2, #2
   23ea8:	add	r1, r0, r4, lsl #2
   23eac:	bl	11784 <memcpy@plt>
   23eb0:	mov	r0, #0
   23eb4:	pop	{r4, r5, r6, r7, r8, pc}
   23eb8:	sub	r2, r2, #1
   23ebc:	sub	r3, r3, #1
   23ec0:	mvn	r7, r2
   23ec4:	mvn	lr, r3
   23ec8:	b	23ddc <__assert_fail@plt+0x12238>
   23ecc:	ldr	r3, [r1, #4]
   23ed0:	ldr	r0, [r0, #8]
   23ed4:	str	r3, [r5, #4]
   23ed8:	ldr	r2, [r1, #4]
   23edc:	ldr	r1, [r1, #8]
   23ee0:	lsl	r2, r2, #2
   23ee4:	bl	11784 <memcpy@plt>
   23ee8:	mov	r0, #0
   23eec:	pop	{r4, r5, r6, r7, r8, pc}
   23ef0:	cmp	r1, #0
   23ef4:	push	{r4, r5, r6, lr}
   23ef8:	mov	r5, r0
   23efc:	blt	23f58 <__assert_fail@plt+0x123b4>
   23f00:	ldr	r3, [r0, #48]	; 0x30
   23f04:	cmp	r1, r3
   23f08:	beq	23fcc <__assert_fail@plt+0x12428>
   23f0c:	ldr	r3, [r0, #80]	; 0x50
   23f10:	cmp	r3, #1
   23f14:	ble	23f60 <__assert_fail@plt+0x123bc>
   23f18:	ldr	r3, [r0, #8]
   23f1c:	add	r3, r3, r1, lsl #2
   23f20:	b	23f2c <__assert_fail@plt+0x12388>
   23f24:	cmn	r1, #1
   23f28:	beq	23f58 <__assert_fail@plt+0x123b4>
   23f2c:	ldr	r4, [r3], #-4
   23f30:	sub	r1, r1, #1
   23f34:	cmn	r4, #1
   23f38:	beq	23f24 <__assert_fail@plt+0x12380>
   23f3c:	ldrb	r3, [r5, #78]	; 0x4e
   23f40:	cmp	r3, #0
   23f44:	bne	23fa0 <__assert_fail@plt+0x123fc>
   23f48:	cmp	r4, #10
   23f4c:	beq	23f8c <__assert_fail@plt+0x123e8>
   23f50:	mov	r0, #0
   23f54:	pop	{r4, r5, r6, pc}
   23f58:	ldr	r0, [r5, #60]	; 0x3c
   23f5c:	pop	{r4, r5, r6, pc}
   23f60:	ldr	r3, [r0, #4]
   23f64:	ldr	r0, [r0, #68]	; 0x44
   23f68:	ldrb	r3, [r3, r1]
   23f6c:	and	r2, r3, #31
   23f70:	asr	r1, r3, #5
   23f74:	ldr	r0, [r0, r1, lsl #2]
   23f78:	lsr	r0, r0, r2
   23f7c:	ands	r0, r0, #1
   23f80:	bne	23fc4 <__assert_fail@plt+0x12420>
   23f84:	cmp	r3, #10
   23f88:	popne	{r4, r5, r6, pc}
   23f8c:	ldrb	r0, [r5, #77]	; 0x4d
   23f90:	cmp	r0, #0
   23f94:	movne	r0, #2
   23f98:	moveq	r0, #0
   23f9c:	pop	{r4, r5, r6, pc}
   23fa0:	mov	r0, r4
   23fa4:	bl	119c4 <iswalnum@plt>
   23fa8:	sub	r3, r4, #95	; 0x5f
   23fac:	clz	r3, r3
   23fb0:	lsr	r3, r3, #5
   23fb4:	cmp	r0, #0
   23fb8:	orrne	r3, r3, #1
   23fbc:	cmp	r3, #0
   23fc0:	beq	23f48 <__assert_fail@plt+0x123a4>
   23fc4:	mov	r0, #1
   23fc8:	pop	{r4, r5, r6, pc}
   23fcc:	tst	r2, #2
   23fd0:	moveq	r0, #10
   23fd4:	movne	r0, #8
   23fd8:	pop	{r4, r5, r6, pc}
   23fdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23fe0:	mov	r4, r0
   23fe4:	ldr	r6, [r0, #24]
   23fe8:	sub	sp, sp, #36	; 0x24
   23fec:	cmp	r6, r1
   23ff0:	mov	r7, r1
   23ff4:	mov	r8, r2
   23ff8:	suble	r5, r1, r6
   23ffc:	ble	24060 <__assert_fail@plt+0x124bc>
   24000:	ldr	r3, [r0, #80]	; 0x50
   24004:	ldr	r1, [r0, #44]	; 0x2c
   24008:	cmp	r3, #1
   2400c:	ldrb	r3, [r0, #75]	; 0x4b
   24010:	movgt	r2, #0
   24014:	strgt	r2, [r0, #16]
   24018:	strgt	r2, [r0, #20]
   2401c:	tst	r8, #1
   24020:	ldr	r2, [r0, #52]	; 0x34
   24024:	moveq	r0, #6
   24028:	movne	r0, #4
   2402c:	cmp	r3, #0
   24030:	mov	r6, #0
   24034:	str	r2, [r4, #56]	; 0x38
   24038:	str	r6, [r4, #28]
   2403c:	str	r6, [r4, #24]
   24040:	str	r6, [r4, #32]
   24044:	strb	r6, [r4, #76]	; 0x4c
   24048:	ldreq	r2, [r4]
   2404c:	moveq	r6, r3
   24050:	mov	r5, r7
   24054:	str	r0, [r4, #60]	; 0x3c
   24058:	str	r1, [r4, #48]	; 0x30
   2405c:	streq	r2, [r4, #4]
   24060:	cmp	r5, #0
   24064:	ldreq	r3, [r4, #80]	; 0x50
   24068:	beq	240f8 <__assert_fail@plt+0x12554>
   2406c:	ldr	r2, [r4, #32]
   24070:	ldrb	r3, [r4, #76]	; 0x4c
   24074:	cmp	r5, r2
   24078:	bge	241c8 <__assert_fail@plt+0x12624>
   2407c:	cmp	r3, #0
   24080:	bne	242e4 <__assert_fail@plt+0x12740>
   24084:	mov	r2, r8
   24088:	sub	r1, r5, #1
   2408c:	mov	r0, r4
   24090:	bl	23ef0 <__assert_fail@plt+0x1234c>
   24094:	ldr	r3, [r4, #80]	; 0x50
   24098:	cmp	r3, #1
   2409c:	str	r0, [r4, #60]	; 0x3c
   240a0:	ble	240bc <__assert_fail@plt+0x12518>
   240a4:	ldr	r2, [r4, #28]
   240a8:	ldr	r0, [r4, #8]
   240ac:	sub	r2, r2, r5
   240b0:	add	r1, r0, r5, lsl #2
   240b4:	lsl	r2, r2, #2
   240b8:	bl	11748 <memmove@plt>
   240bc:	ldrb	r3, [r4, #75]	; 0x4b
   240c0:	cmp	r3, #0
   240c4:	bne	24424 <__assert_fail@plt+0x12880>
   240c8:	ldr	r0, [r4, #28]
   240cc:	ldr	r1, [r4, #32]
   240d0:	mov	r2, r3
   240d4:	ldr	r3, [r4, #80]	; 0x50
   240d8:	sub	r0, r0, r5
   240dc:	sub	r1, r1, r5
   240e0:	str	r0, [r4, #28]
   240e4:	str	r1, [r4, #32]
   240e8:	cmp	r2, #0
   240ec:	ldreq	r2, [r4, #4]
   240f0:	addeq	r2, r2, r5
   240f4:	streq	r2, [r4, #4]
   240f8:	ldr	r2, [r4, #48]	; 0x30
   240fc:	ldr	r1, [r4, #56]	; 0x38
   24100:	cmp	r3, #1
   24104:	sub	r3, r2, r5
   24108:	sub	r5, r1, r5
   2410c:	str	r7, [r4, #24]
   24110:	str	r3, [r4, #48]	; 0x30
   24114:	str	r5, [r4, #56]	; 0x38
   24118:	ble	24150 <__assert_fail@plt+0x125ac>
   2411c:	ldrb	r3, [r4, #72]	; 0x48
   24120:	mov	r0, r4
   24124:	cmp	r3, #0
   24128:	bne	24140 <__assert_fail@plt+0x1259c>
   2412c:	bl	22f58 <__assert_fail@plt+0x113b4>
   24130:	mov	r0, #0
   24134:	str	r0, [r4, #40]	; 0x28
   24138:	add	sp, sp, #36	; 0x24
   2413c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24140:	bl	230f8 <__assert_fail@plt+0x11554>
   24144:	cmp	r0, #0
   24148:	beq	24130 <__assert_fail@plt+0x1258c>
   2414c:	b	24138 <__assert_fail@plt+0x12594>
   24150:	ldrb	r2, [r4, #75]	; 0x4b
   24154:	cmp	r2, #0
   24158:	streq	r3, [r4, #28]
   2415c:	beq	24130 <__assert_fail@plt+0x1258c>
   24160:	ldrb	r2, [r4, #72]	; 0x48
   24164:	cmp	r2, #0
   24168:	bne	24698 <__assert_fail@plt+0x12af4>
   2416c:	ldr	r0, [r4, #64]	; 0x40
   24170:	cmp	r0, #0
   24174:	beq	24130 <__assert_fail@plt+0x1258c>
   24178:	ldr	r1, [r4, #36]	; 0x24
   2417c:	ldr	r2, [r4, #28]
   24180:	cmp	r3, r1
   24184:	movge	r3, r1
   24188:	cmp	r3, r2
   2418c:	bgt	2419c <__assert_fail@plt+0x125f8>
   24190:	b	241bc <__assert_fail@plt+0x12618>
   24194:	ldr	r7, [r4, #24]
   24198:	ldr	r0, [r4, #64]	; 0x40
   2419c:	ldm	r4, {r1, ip}
   241a0:	add	r1, r1, r2
   241a4:	ldrb	r1, [r1, r7]
   241a8:	ldrb	r1, [r0, r1]
   241ac:	strb	r1, [ip, r2]
   241b0:	add	r2, r2, #1
   241b4:	cmp	r3, r2
   241b8:	bne	24194 <__assert_fail@plt+0x125f0>
   241bc:	str	r2, [r4, #28]
   241c0:	str	r2, [r4, #32]
   241c4:	b	24130 <__assert_fail@plt+0x1258c>
   241c8:	ldr	r1, [r4, #28]
   241cc:	cmp	r3, #0
   241d0:	str	r1, [sp, #4]
   241d4:	bne	245dc <__assert_fail@plt+0x12a38>
   241d8:	ldr	r3, [r4, #80]	; 0x50
   241dc:	mov	r1, #0
   241e0:	cmp	r3, #1
   241e4:	str	r1, [r4, #28]
   241e8:	ble	24498 <__assert_fail@plt+0x128f4>
   241ec:	ldrb	r1, [r4, #73]	; 0x49
   241f0:	cmp	r1, #0
   241f4:	beq	2425c <__assert_fail@plt+0x126b8>
   241f8:	ldr	ip, [r4]
   241fc:	sub	r3, r5, r3
   24200:	add	r9, ip, r6
   24204:	add	r3, r9, r3
   24208:	cmp	ip, r3
   2420c:	sub	r0, r5, #1
   24210:	movcc	ip, r3
   24214:	add	r1, r9, r0
   24218:	cmp	r1, ip
   2421c:	bcc	2425c <__assert_fail@plt+0x126b8>
   24220:	ldrb	r3, [r9, r0]
   24224:	and	r3, r3, #192	; 0xc0
   24228:	cmp	r3, #128	; 0x80
   2422c:	subeq	r3, r1, #1
   24230:	subeq	ip, ip, #1
   24234:	beq	24250 <__assert_fail@plt+0x126ac>
   24238:	b	244ec <__assert_fail@plt+0x12948>
   2423c:	ldrb	r0, [r1]
   24240:	sub	r3, r3, #1
   24244:	and	r0, r0, #192	; 0xc0
   24248:	cmp	r0, #128	; 0x80
   2424c:	bne	244ec <__assert_fail@plt+0x12948>
   24250:	cmp	ip, r3
   24254:	mov	r1, r3
   24258:	bne	2423c <__assert_fail@plt+0x12698>
   2425c:	add	r6, r6, r2
   24260:	cmp	r7, r6
   24264:	ble	24868 <__assert_fail@plt+0x12cc4>
   24268:	add	sl, r4, #16
   2426c:	add	fp, sp, #24
   24270:	b	24280 <__assert_fail@plt+0x126dc>
   24274:	add	r6, r6, r3
   24278:	cmp	r7, r6
   2427c:	ble	24608 <__assert_fail@plt+0x12a64>
   24280:	ldm	sl, {r0, r1}
   24284:	ldr	r9, [r4, #44]	; 0x2c
   24288:	ldr	ip, [r4]
   2428c:	sub	r9, r9, r6
   24290:	mov	r2, r9
   24294:	stm	fp, {r0, r1}
   24298:	mov	r3, sl
   2429c:	add	r1, ip, r6
   242a0:	add	r0, sp, #16
   242a4:	bl	1db04 <__assert_fail@plt+0xbf60>
   242a8:	sub	r2, r0, #1
   242ac:	cmn	r2, #4
   242b0:	mov	r3, r0
   242b4:	ldrls	r9, [sp, #16]
   242b8:	bls	24274 <__assert_fail@plt+0x126d0>
   242bc:	mov	r2, #0
   242c0:	cmp	r9, r2
   242c4:	cmpne	r0, r2
   242c8:	ldm	fp, {r0, r1}
   242cc:	ldrne	r3, [r4]
   242d0:	ldrbne	r2, [r3, r6]
   242d4:	mov	r3, #1
   242d8:	stm	sl, {r0, r1}
   242dc:	mov	r9, r2
   242e0:	b	24274 <__assert_fail@plt+0x126d0>
   242e4:	ldr	sl, [r4, #28]
   242e8:	ldr	r9, [r4, #12]
   242ec:	mov	r3, sl
   242f0:	mov	r2, #0
   242f4:	b	24308 <__assert_fail@plt+0x12764>
   242f8:	ble	24330 <__assert_fail@plt+0x1278c>
   242fc:	add	r2, r6, #1
   24300:	cmp	r2, r3
   24304:	bge	24328 <__assert_fail@plt+0x12784>
   24308:	add	r1, r2, r3
   2430c:	add	r1, r1, r1, lsr #31
   24310:	asr	r6, r1, #1
   24314:	ldr	r1, [r9, r6, lsl #2]
   24318:	cmp	r5, r1
   2431c:	bge	242f8 <__assert_fail@plt+0x12754>
   24320:	mov	r3, r6
   24324:	b	24300 <__assert_fail@plt+0x1275c>
   24328:	cmp	r5, r1
   2432c:	addgt	r6, r6, #1
   24330:	sub	fp, r6, #1
   24334:	mov	r2, r8
   24338:	mov	r1, fp
   2433c:	mov	r0, r4
   24340:	bl	23ef0 <__assert_fail@plt+0x1234c>
   24344:	cmp	r5, sl
   24348:	movge	r3, #0
   2434c:	movlt	r3, #1
   24350:	cmp	r5, r6
   24354:	movne	r3, #0
   24358:	cmp	r3, #0
   2435c:	str	r0, [r4, #60]	; 0x3c
   24360:	bne	24554 <__assert_fail@plt+0x129b0>
   24364:	ldr	r2, [r4, #44]	; 0x2c
   24368:	ldr	r3, [r4, #52]	; 0x34
   2436c:	sub	r2, r2, r7
   24370:	add	r2, r2, r5
   24374:	sub	r3, r3, r7
   24378:	add	r3, r3, r5
   2437c:	str	r2, [r4, #48]	; 0x30
   24380:	cmp	r6, #0
   24384:	mov	r2, #0
   24388:	str	r3, [r4, #56]	; 0x38
   2438c:	strb	r2, [r4, #76]	; 0x4c
   24390:	ble	243c8 <__assert_fail@plt+0x12824>
   24394:	sub	r3, r6, #-1073741823	; 0xc0000001
   24398:	ldr	r2, [r9, r3, lsl #2]
   2439c:	add	r3, r9, r3, lsl #2
   243a0:	cmp	r5, r2
   243a4:	beq	243bc <__assert_fail@plt+0x12818>
   243a8:	b	243c8 <__assert_fail@plt+0x12824>
   243ac:	ldr	r2, [r3, #-4]!
   243b0:	sub	fp, fp, #1
   243b4:	cmp	r5, r2
   243b8:	bne	243c8 <__assert_fail@plt+0x12824>
   243bc:	cmp	fp, #0
   243c0:	mov	r6, fp
   243c4:	bne	243ac <__assert_fail@plt+0x12808>
   243c8:	cmp	sl, r6
   243cc:	ble	24440 <__assert_fail@plt+0x1289c>
   243d0:	ldr	r1, [r4, #8]
   243d4:	lsl	r0, r6, #2
   243d8:	add	r3, r1, r0
   243dc:	ldr	r2, [r1, r6, lsl #2]
   243e0:	cmn	r2, #1
   243e4:	rsbeq	r1, r1, #4
   243e8:	beq	243fc <__assert_fail@plt+0x12858>
   243ec:	b	24448 <__assert_fail@plt+0x128a4>
   243f0:	ldr	r2, [r3, #4]!
   243f4:	cmn	r2, #1
   243f8:	bne	24448 <__assert_fail@plt+0x128a4>
   243fc:	add	r6, r6, #1
   24400:	cmp	sl, r6
   24404:	add	r0, r1, r3
   24408:	bne	243f0 <__assert_fail@plt+0x1284c>
   2440c:	mov	r2, #0
   24410:	str	r2, [r4, #28]
   24414:	str	r2, [r4, #32]
   24418:	ldrb	r2, [r4, #75]	; 0x4b
   2441c:	ldr	r3, [r4, #80]	; 0x50
   24420:	b	240e8 <__assert_fail@plt+0x12544>
   24424:	ldr	r0, [r4, #4]
   24428:	ldr	r2, [r4, #28]
   2442c:	add	r1, r0, r5
   24430:	sub	r2, r2, r5
   24434:	bl	11748 <memmove@plt>
   24438:	ldrb	r3, [r4, #75]	; 0x4b
   2443c:	b	240c8 <__assert_fail@plt+0x12524>
   24440:	beq	2440c <__assert_fail@plt+0x12868>
   24444:	lsl	r0, r6, #2
   24448:	ldr	r2, [r9, r0]
   2444c:	sub	r2, r2, r5
   24450:	cmp	r2, #0
   24454:	str	r2, [r4, #28]
   24458:	beq	24414 <__assert_fail@plt+0x12870>
   2445c:	ble	24484 <__assert_fail@plt+0x128e0>
   24460:	ldr	r1, [r4, #8]
   24464:	mov	r3, #0
   24468:	sub	r1, r1, #4
   2446c:	mvn	r0, #0
   24470:	str	r0, [r1, #4]!
   24474:	ldr	r2, [r4, #28]
   24478:	add	r3, r3, #1
   2447c:	cmp	r2, r3
   24480:	bgt	24470 <__assert_fail@plt+0x128cc>
   24484:	mov	r1, #255	; 0xff
   24488:	ldr	r0, [r4, #4]
   2448c:	bl	119e8 <memset@plt>
   24490:	ldr	r2, [r4, #28]
   24494:	b	24414 <__assert_fail@plt+0x12870>
   24498:	ldr	r2, [r4]
   2449c:	ldr	ip, [r4, #64]	; 0x40
   244a0:	add	r2, r2, r5
   244a4:	add	r6, r2, r6
   244a8:	cmp	ip, #0
   244ac:	ldrb	r0, [r6, #-1]
   244b0:	str	r1, [r4, #32]
   244b4:	ldrbne	r0, [ip, r0]
   244b8:	ldr	ip, [r4, #68]	; 0x44
   244bc:	and	r2, r0, #31
   244c0:	asr	r1, r0, #5
   244c4:	ldr	r1, [ip, r1, lsl #2]
   244c8:	lsr	r2, r1, r2
   244cc:	ands	r1, r2, #1
   244d0:	movne	r1, #1
   244d4:	bne	244e0 <__assert_fail@plt+0x1293c>
   244d8:	cmp	r0, #10
   244dc:	beq	24794 <__assert_fail@plt+0x12bf0>
   244e0:	ldrb	r2, [r4, #75]	; 0x4b
   244e4:	str	r1, [r4, #60]	; 0x3c
   244e8:	b	240e8 <__assert_fail@plt+0x12544>
   244ec:	ldr	r2, [r4, #48]	; 0x30
   244f0:	ldr	r3, [r4, #64]	; 0x40
   244f4:	add	r2, r9, r2
   244f8:	cmp	r3, #0
   244fc:	mov	r6, r1
   24500:	sub	r2, r2, r1
   24504:	bne	247a8 <__assert_fail@plt+0x12c04>
   24508:	add	fp, sp, #24
   2450c:	mov	r3, fp
   24510:	mov	sl, #0
   24514:	add	r0, sp, #12
   24518:	str	sl, [sp, #24]
   2451c:	str	sl, [sp, #28]
   24520:	bl	1db04 <__assert_fail@plt+0xbf60>
   24524:	add	r9, r9, r5
   24528:	sub	r6, r9, r6
   2452c:	cmp	r0, r6
   24530:	movcc	r3, #0
   24534:	movcs	r3, #1
   24538:	cmn	r0, #3
   2453c:	movhi	r3, #0
   24540:	cmp	r3, sl
   24544:	bne	24648 <__assert_fail@plt+0x12aa4>
   24548:	ldr	r6, [r4, #24]
   2454c:	ldr	r2, [r4, #32]
   24550:	b	2425c <__assert_fail@plt+0x126b8>
   24554:	ldr	r3, [r9, r6, lsl #2]
   24558:	cmp	r5, r3
   2455c:	bne	24364 <__assert_fail@plt+0x127c0>
   24560:	ldr	r0, [r4, #8]
   24564:	sub	r2, sl, r5
   24568:	lsl	r6, r5, #2
   2456c:	lsl	r2, r2, #2
   24570:	add	r1, r0, r6
   24574:	bl	11748 <memmove@plt>
   24578:	ldr	r0, [r4, #4]
   2457c:	ldr	r2, [r4, #28]
   24580:	add	r1, r0, r5
   24584:	sub	r2, r2, r5
   24588:	bl	11748 <memmove@plt>
   2458c:	ldr	r3, [r4, #28]
   24590:	ldr	r2, [r4, #32]
   24594:	sub	r3, r3, r5
   24598:	sub	r2, r2, r5
   2459c:	cmp	r3, #0
   245a0:	str	r3, [r4, #28]
   245a4:	str	r2, [r4, #32]
   245a8:	ble	24418 <__assert_fail@plt+0x12874>
   245ac:	ldr	r1, [r4, #12]
   245b0:	mov	r2, #0
   245b4:	add	r0, r1, r6
   245b8:	sub	r1, r1, #4
   245bc:	ldr	r3, [r0], #4
   245c0:	add	r2, r2, #1
   245c4:	sub	r3, r3, r5
   245c8:	str	r3, [r1, #4]!
   245cc:	ldr	r3, [r4, #28]
   245d0:	cmp	r3, r2
   245d4:	bgt	245bc <__assert_fail@plt+0x12a18>
   245d8:	b	24418 <__assert_fail@plt+0x12874>
   245dc:	ldr	r1, [r4, #44]	; 0x2c
   245e0:	ldr	r3, [r4, #52]	; 0x34
   245e4:	sub	r1, r1, r7
   245e8:	add	r1, r1, r5
   245ec:	sub	r3, r3, r7
   245f0:	add	r3, r3, r5
   245f4:	str	r1, [r4, #48]	; 0x30
   245f8:	mov	r1, #0
   245fc:	str	r3, [r4, #56]	; 0x38
   24600:	strb	r1, [r4, #76]	; 0x4c
   24604:	b	241d8 <__assert_fail@plt+0x12634>
   24608:	sub	r6, r6, r7
   2460c:	cmn	r9, #1
   24610:	str	r6, [r4, #28]
   24614:	bne	24664 <__assert_fail@plt+0x12ac0>
   24618:	ldr	r3, [sp, #4]
   2461c:	mov	r2, r8
   24620:	sub	r1, r3, #1
   24624:	mov	r0, r4
   24628:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2462c:	str	r0, [r4, #60]	; 0x3c
   24630:	cmp	r6, #0
   24634:	bne	2471c <__assert_fail@plt+0x12b78>
   24638:	ldrb	r2, [r4, #75]	; 0x4b
   2463c:	str	r6, [r4, #32]
   24640:	ldr	r3, [r4, #80]	; 0x50
   24644:	b	240e8 <__assert_fail@plt+0x12544>
   24648:	ldr	r9, [sp, #12]
   2464c:	sub	r6, r0, r6
   24650:	cmn	r9, #1
   24654:	str	sl, [r4, #16]
   24658:	str	sl, [r4, #20]
   2465c:	str	r6, [r4, #28]
   24660:	beq	24548 <__assert_fail@plt+0x129a4>
   24664:	ldrb	r3, [r4, #78]	; 0x4e
   24668:	cmp	r3, #0
   2466c:	bne	2476c <__assert_fail@plt+0x12bc8>
   24670:	cmp	r9, #10
   24674:	movne	r3, #0
   24678:	beq	24684 <__assert_fail@plt+0x12ae0>
   2467c:	str	r3, [r4, #60]	; 0x3c
   24680:	b	24630 <__assert_fail@plt+0x12a8c>
   24684:	ldrb	r3, [r4, #77]	; 0x4d
   24688:	cmp	r3, #0
   2468c:	movne	r3, #2
   24690:	moveq	r3, #0
   24694:	b	2467c <__assert_fail@plt+0x12ad8>
   24698:	ldr	r5, [r4, #36]	; 0x24
   2469c:	ldr	r6, [r4, #28]
   246a0:	cmp	r3, r5
   246a4:	movlt	r5, r3
   246a8:	cmp	r5, r6
   246ac:	ble	24874 <__assert_fail@plt+0x12cd0>
   246b0:	bl	11934 <__ctype_toupper_loc@plt>
   246b4:	b	246d8 <__assert_fail@plt+0x12b34>
   246b8:	ldr	r1, [r0]
   246bc:	ldr	r2, [r4, #4]
   246c0:	ldr	r3, [r1, r3, lsl #2]
   246c4:	strb	r3, [r2, r6]
   246c8:	add	r6, r6, #1
   246cc:	cmp	r6, r5
   246d0:	beq	24710 <__assert_fail@plt+0x12b6c>
   246d4:	ldr	r7, [r4, #24]
   246d8:	ldr	r3, [r4]
   246dc:	ldr	r2, [r4, #64]	; 0x40
   246e0:	add	r3, r3, r6
   246e4:	cmp	r2, #0
   246e8:	ldrb	r3, [r3, r7]
   246ec:	beq	246b8 <__assert_fail@plt+0x12b14>
   246f0:	ldrb	r3, [r2, r3]
   246f4:	ldr	ip, [r0]
   246f8:	ldr	r1, [r4, #4]
   246fc:	ldr	r3, [ip, r3, lsl #2]
   24700:	strb	r3, [r1, r6]
   24704:	add	r6, r6, #1
   24708:	cmp	r5, r6
   2470c:	bne	246d4 <__assert_fail@plt+0x12b30>
   24710:	str	r5, [r4, #28]
   24714:	str	r5, [r4, #32]
   24718:	b	24130 <__assert_fail@plt+0x1258c>
   2471c:	ble	24744 <__assert_fail@plt+0x12ba0>
   24720:	ldr	r2, [r4, #8]
   24724:	mov	r3, #0
   24728:	sub	r2, r2, #4
   2472c:	mvn	r1, #0
   24730:	str	r1, [r2, #4]!
   24734:	ldr	r6, [r4, #28]
   24738:	add	r3, r3, #1
   2473c:	cmp	r6, r3
   24740:	bgt	24730 <__assert_fail@plt+0x12b8c>
   24744:	ldrb	r2, [r4, #75]	; 0x4b
   24748:	cmp	r2, #0
   2474c:	beq	2463c <__assert_fail@plt+0x12a98>
   24750:	mov	r2, r6
   24754:	mov	r1, #255	; 0xff
   24758:	ldr	r0, [r4, #4]
   2475c:	bl	119e8 <memset@plt>
   24760:	ldrb	r2, [r4, #75]	; 0x4b
   24764:	ldr	r6, [r4, #28]
   24768:	b	2463c <__assert_fail@plt+0x12a98>
   2476c:	mov	r0, r9
   24770:	bl	119c4 <iswalnum@plt>
   24774:	cmp	r9, #95	; 0x5f
   24778:	clz	r0, r0
   2477c:	lsr	r0, r0, #5
   24780:	moveq	r0, #0
   24784:	cmp	r0, #0
   24788:	moveq	r3, #1
   2478c:	bne	24670 <__assert_fail@plt+0x12acc>
   24790:	b	2467c <__assert_fail@plt+0x12ad8>
   24794:	ldrb	r1, [r4, #77]	; 0x4d
   24798:	cmp	r1, #0
   2479c:	movne	r1, #2
   247a0:	moveq	r1, #0
   247a4:	b	244e0 <__assert_fail@plt+0x1293c>
   247a8:	cmp	r2, #6
   247ac:	movlt	r1, r2
   247b0:	movge	r1, #6
   247b4:	subs	r0, r1, #1
   247b8:	bmi	24860 <__assert_fail@plt+0x12cbc>
   247bc:	ldrb	lr, [r6, r0]
   247c0:	add	ip, sp, #32
   247c4:	add	ip, ip, r0
   247c8:	sub	r0, r1, #2
   247cc:	ldrb	lr, [r3, lr]
   247d0:	cmn	r0, #1
   247d4:	strb	lr, [ip, #-16]
   247d8:	beq	24860 <__assert_fail@plt+0x12cbc>
   247dc:	ldrb	lr, [r6, r0]
   247e0:	add	ip, sp, #32
   247e4:	add	ip, ip, r0
   247e8:	sub	r0, r1, #3
   247ec:	ldrb	lr, [r3, lr]
   247f0:	cmn	r0, #1
   247f4:	strb	lr, [ip, #-16]
   247f8:	beq	24860 <__assert_fail@plt+0x12cbc>
   247fc:	ldrb	lr, [r6, r0]
   24800:	add	ip, sp, #32
   24804:	add	ip, ip, r0
   24808:	sub	r0, r1, #4
   2480c:	ldrb	lr, [r3, lr]
   24810:	cmn	r0, #1
   24814:	strb	lr, [ip, #-16]
   24818:	beq	24860 <__assert_fail@plt+0x12cbc>
   2481c:	ldrb	lr, [r6, r0]
   24820:	add	ip, sp, #32
   24824:	add	ip, ip, r0
   24828:	sub	r0, r1, #5
   2482c:	ldrb	lr, [r3, lr]
   24830:	cmn	r0, #1
   24834:	strb	lr, [ip, #-16]
   24838:	beq	24860 <__assert_fail@plt+0x12cbc>
   2483c:	ldrb	ip, [r6, r0]
   24840:	add	lr, sp, #32
   24844:	cmp	r1, #6
   24848:	add	r0, lr, r0
   2484c:	ldrb	r1, [r3, ip]
   24850:	strb	r1, [r0, #-16]
   24854:	ldrbeq	r1, [r6]
   24858:	ldrbeq	r3, [r3, r1]
   2485c:	strbeq	r3, [sp, #16]
   24860:	add	r1, sp, #16
   24864:	b	24508 <__assert_fail@plt+0x12964>
   24868:	sub	r6, r6, r7
   2486c:	str	r6, [r4, #28]
   24870:	b	24618 <__assert_fail@plt+0x12a74>
   24874:	mov	r5, r6
   24878:	b	24710 <__assert_fail@plt+0x12b6c>
   2487c:	push	{r4, r5, r6, lr}
   24880:	mov	r4, r1
   24884:	mov	r1, r2
   24888:	ldr	r2, [r0, #88]	; 0x58
   2488c:	mov	r5, r0
   24890:	bl	23ef0 <__assert_fail@plt+0x1234c>
   24894:	ldr	r2, [r4, #8]
   24898:	cmp	r2, #0
   2489c:	ble	2495c <__assert_fail@plt+0x12db8>
   248a0:	ldr	r1, [r5, #84]	; 0x54
   248a4:	ands	r3, r0, #1
   248a8:	ldr	lr, [r4, #12]
   248ac:	ldr	ip, [r1]
   248b0:	and	r1, r0, #2
   248b4:	and	r0, r0, #8
   248b8:	bne	24a0c <__assert_fail@plt+0x12e68>
   248bc:	cmp	r1, #0
   248c0:	ldr	r5, [pc, #700]	; 24b84 <__assert_fail@plt+0x12fe0>
   248c4:	sub	lr, lr, #4
   248c8:	beq	24964 <__assert_fail@plt+0x12dc0>
   248cc:	cmp	r0, #0
   248d0:	bne	24938 <__assert_fail@plt+0x12d94>
   248d4:	mov	r3, r0
   248d8:	b	248e4 <__assert_fail@plt+0x12d40>
   248dc:	cmp	r2, r3
   248e0:	beq	2495c <__assert_fail@plt+0x12db8>
   248e4:	ldr	r0, [lr, #4]!
   248e8:	add	r3, r3, #1
   248ec:	add	r1, ip, r0, lsl #3
   248f0:	ldrb	r4, [r1, #4]
   248f4:	ldr	r1, [r1, #4]
   248f8:	cmp	r4, #2
   248fc:	and	r1, r5, r1, lsr #8
   24900:	bne	248dc <__assert_fail@plt+0x12d38>
   24904:	cmp	r1, #0
   24908:	popeq	{r4, r5, r6, pc}
   2490c:	tst	r1, #4
   24910:	bne	248dc <__assert_fail@plt+0x12d38>
   24914:	tst	r1, #128	; 0x80
   24918:	popeq	{r4, r5, r6, pc}
   2491c:	b	248dc <__assert_fail@plt+0x12d38>
   24920:	cmp	r1, #0
   24924:	popeq	{r4, r5, r6, pc}
   24928:	tst	r1, #4
   2492c:	popeq	{r4, r5, r6, pc}
   24930:	cmp	r2, r3
   24934:	beq	2495c <__assert_fail@plt+0x12db8>
   24938:	ldr	r0, [lr, #4]!
   2493c:	add	r3, r3, #1
   24940:	add	r1, ip, r0, lsl #3
   24944:	ldrb	r4, [r1, #4]
   24948:	ldr	r1, [r1, #4]
   2494c:	cmp	r4, #2
   24950:	and	r1, r5, r1, lsr #8
   24954:	bne	24930 <__assert_fail@plt+0x12d8c>
   24958:	b	24920 <__assert_fail@plt+0x12d7c>
   2495c:	mov	r0, #0
   24960:	pop	{r4, r5, r6, pc}
   24964:	cmp	r0, #0
   24968:	beq	249b8 <__assert_fail@plt+0x12e14>
   2496c:	mov	r3, r1
   24970:	b	2497c <__assert_fail@plt+0x12dd8>
   24974:	cmp	r2, r3
   24978:	beq	2495c <__assert_fail@plt+0x12db8>
   2497c:	ldr	r0, [lr, #4]!
   24980:	add	r3, r3, #1
   24984:	add	r1, ip, r0, lsl #3
   24988:	ldrb	r4, [r1, #4]
   2498c:	ldr	r1, [r1, #4]
   24990:	cmp	r4, #2
   24994:	and	r1, r5, r1, lsr #8
   24998:	bne	24974 <__assert_fail@plt+0x12dd0>
   2499c:	cmp	r1, #0
   249a0:	popeq	{r4, r5, r6, pc}
   249a4:	tst	r1, #4
   249a8:	bne	24974 <__assert_fail@plt+0x12dd0>
   249ac:	tst	r1, #32
   249b0:	popeq	{r4, r5, r6, pc}
   249b4:	b	24974 <__assert_fail@plt+0x12dd0>
   249b8:	mov	r3, r0
   249bc:	b	249cc <__assert_fail@plt+0x12e28>
   249c0:	add	r3, r3, #1
   249c4:	cmp	r3, r2
   249c8:	beq	2495c <__assert_fail@plt+0x12db8>
   249cc:	ldr	r0, [lr, #4]!
   249d0:	add	r1, ip, r0, lsl #3
   249d4:	ldrb	r4, [r1, #4]
   249d8:	ldr	r1, [r1, #4]
   249dc:	cmp	r4, #2
   249e0:	and	r1, r5, r1, lsr #8
   249e4:	bne	249c0 <__assert_fail@plt+0x12e1c>
   249e8:	cmp	r1, #0
   249ec:	popeq	{r4, r5, r6, pc}
   249f0:	tst	r1, #4
   249f4:	bne	249c0 <__assert_fail@plt+0x12e1c>
   249f8:	tst	r1, #32
   249fc:	bne	249c0 <__assert_fail@plt+0x12e1c>
   24a00:	tst	r1, #128	; 0x80
   24a04:	bne	249c0 <__assert_fail@plt+0x12e1c>
   24a08:	pop	{r4, r5, r6, pc}
   24a0c:	cmp	r1, #0
   24a10:	beq	24a70 <__assert_fail@plt+0x12ecc>
   24a14:	cmp	r0, #0
   24a18:	ldr	r5, [pc, #356]	; 24b84 <__assert_fail@plt+0x12fe0>
   24a1c:	sub	lr, lr, #4
   24a20:	beq	24b34 <__assert_fail@plt+0x12f90>
   24a24:	mov	r1, #0
   24a28:	b	24a34 <__assert_fail@plt+0x12e90>
   24a2c:	cmp	r2, r1
   24a30:	beq	2495c <__assert_fail@plt+0x12db8>
   24a34:	ldr	r0, [lr, #4]!
   24a38:	add	r1, r1, #1
   24a3c:	add	r3, ip, r0, lsl #3
   24a40:	ldrb	r4, [r3, #4]
   24a44:	ldr	r3, [r3, #4]
   24a48:	cmp	r4, #2
   24a4c:	and	r3, r5, r3, lsr #8
   24a50:	bne	24a2c <__assert_fail@plt+0x12e88>
   24a54:	cmp	r3, #0
   24a58:	popeq	{r4, r5, r6, pc}
   24a5c:	tst	r3, #4
   24a60:	beq	24acc <__assert_fail@plt+0x12f28>
   24a64:	tst	r3, #8
   24a68:	popeq	{r4, r5, r6, pc}
   24a6c:	b	24a2c <__assert_fail@plt+0x12e88>
   24a70:	cmp	r0, #0
   24a74:	beq	24ad8 <__assert_fail@plt+0x12f34>
   24a78:	ldr	r5, [pc, #260]	; 24b84 <__assert_fail@plt+0x12fe0>
   24a7c:	sub	lr, lr, #4
   24a80:	mov	r3, r1
   24a84:	b	24a94 <__assert_fail@plt+0x12ef0>
   24a88:	add	r3, r3, #1
   24a8c:	cmp	r2, r3
   24a90:	beq	2495c <__assert_fail@plt+0x12db8>
   24a94:	ldr	r0, [lr, #4]!
   24a98:	add	r1, ip, r0, lsl #3
   24a9c:	ldrb	r4, [r1, #4]
   24aa0:	ldr	r1, [r1, #4]
   24aa4:	cmp	r4, #2
   24aa8:	and	r1, r5, r1, lsr #8
   24aac:	bne	24a88 <__assert_fail@plt+0x12ee4>
   24ab0:	cmp	r1, #0
   24ab4:	popeq	{r4, r5, r6, pc}
   24ab8:	tst	r1, #8
   24abc:	bne	24a88 <__assert_fail@plt+0x12ee4>
   24ac0:	tst	r1, #32
   24ac4:	popeq	{r4, r5, r6, pc}
   24ac8:	b	24a88 <__assert_fail@plt+0x12ee4>
   24acc:	tst	r3, #8
   24ad0:	bne	24a2c <__assert_fail@plt+0x12e88>
   24ad4:	pop	{r4, r5, r6, pc}
   24ad8:	ldr	r4, [pc, #164]	; 24b84 <__assert_fail@plt+0x12fe0>
   24adc:	sub	lr, lr, #4
   24ae0:	mov	r3, r0
   24ae4:	b	24af4 <__assert_fail@plt+0x12f50>
   24ae8:	add	r3, r3, #1
   24aec:	cmp	r2, r3
   24af0:	beq	2495c <__assert_fail@plt+0x12db8>
   24af4:	ldr	r0, [lr, #4]!
   24af8:	add	r1, ip, r0, lsl #3
   24afc:	ldrb	r5, [r1, #4]
   24b00:	ldr	r1, [r1, #4]
   24b04:	cmp	r5, #2
   24b08:	and	r1, r4, r1, lsr #8
   24b0c:	bne	24ae8 <__assert_fail@plt+0x12f44>
   24b10:	cmp	r1, #0
   24b14:	beq	24b80 <__assert_fail@plt+0x12fdc>
   24b18:	tst	r1, #8
   24b1c:	bne	24ae8 <__assert_fail@plt+0x12f44>
   24b20:	tst	r1, #32
   24b24:	bne	24ae8 <__assert_fail@plt+0x12f44>
   24b28:	tst	r1, #128	; 0x80
   24b2c:	bne	24ae8 <__assert_fail@plt+0x12f44>
   24b30:	pop	{r4, r5, r6, pc}
   24b34:	mov	r3, r0
   24b38:	b	24b48 <__assert_fail@plt+0x12fa4>
   24b3c:	add	r3, r3, #1
   24b40:	cmp	r2, r3
   24b44:	beq	2495c <__assert_fail@plt+0x12db8>
   24b48:	ldr	r0, [lr, #4]!
   24b4c:	add	r1, ip, r0, lsl #3
   24b50:	ldrb	r4, [r1, #4]
   24b54:	ldr	r1, [r1, #4]
   24b58:	cmp	r4, #2
   24b5c:	and	r1, r5, r1, lsr #8
   24b60:	bne	24b3c <__assert_fail@plt+0x12f98>
   24b64:	cmp	r1, #0
   24b68:	popeq	{r4, r5, r6, pc}
   24b6c:	tst	r1, #8
   24b70:	bne	24b3c <__assert_fail@plt+0x12f98>
   24b74:	tst	r1, #128	; 0x80
   24b78:	popeq	{r4, r5, r6, pc}
   24b7c:	b	24b3c <__assert_fail@plt+0x12f98>
   24b80:	pop	{r4, r5, r6, pc}
   24b84:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   24b88:	ldr	ip, [r1]
   24b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24b90:	cmp	ip, #0
   24b94:	sub	sp, sp, #20
   24b98:	ldr	r6, [r0, #84]	; 0x54
   24b9c:	ble	24c68 <__assert_fail@plt+0x130c4>
   24ba0:	mov	r7, r2
   24ba4:	str	r3, [sp, #8]
   24ba8:	mov	r8, r0
   24bac:	str	r1, [sp, #4]
   24bb0:	mov	r4, #0
   24bb4:	mov	r2, #24
   24bb8:	mov	r9, #1
   24bbc:	b	24bc8 <__assert_fail@plt+0x13024>
   24bc0:	cmp	r4, ip
   24bc4:	bge	24c68 <__assert_fail@plt+0x130c4>
   24bc8:	ldr	r1, [r7]
   24bcc:	ldr	r3, [r6]
   24bd0:	ldr	r5, [r1, r4, lsl #2]
   24bd4:	add	r4, r4, #1
   24bd8:	add	r1, r3, r5, lsl #3
   24bdc:	ldrb	r1, [r1, #4]
   24be0:	cmp	r1, #8
   24be4:	bne	24bc0 <__assert_fail@plt+0x1301c>
   24be8:	ldr	r3, [r3, r5, lsl #3]
   24bec:	cmp	r3, #31
   24bf0:	bgt	24bc0 <__assert_fail@plt+0x1301c>
   24bf4:	ldr	r1, [r6, #80]	; 0x50
   24bf8:	lsr	r3, r1, r3
   24bfc:	tst	r3, #1
   24c00:	beq	24bc0 <__assert_fail@plt+0x1301c>
   24c04:	ldr	sl, [r8, #124]	; 0x7c
   24c08:	ldr	r3, [r8, #128]	; 0x80
   24c0c:	ldr	fp, [r8, #132]	; 0x84
   24c10:	cmp	r3, sl
   24c14:	beq	24c7c <__assert_fail@plt+0x130d8>
   24c18:	mov	r1, r2
   24c1c:	mov	r0, r9
   24c20:	str	r2, [sp, #12]
   24c24:	bl	368fc <__assert_fail@plt+0x24d58>
   24c28:	ldr	r3, [r8, #124]	; 0x7c
   24c2c:	ldr	r1, [r8, #132]	; 0x84
   24c30:	add	ip, r3, #1
   24c34:	str	r0, [fp, sl, lsl #2]
   24c38:	ldr	r3, [r1, r3, lsl #2]
   24c3c:	cmp	r3, #0
   24c40:	beq	24c74 <__assert_fail@plt+0x130d0>
   24c44:	ldr	r2, [sp, #8]
   24c48:	str	r5, [r3, #4]
   24c4c:	str	ip, [r8, #124]	; 0x7c
   24c50:	str	r2, [r3]
   24c54:	ldr	r3, [sp, #4]
   24c58:	ldr	r2, [sp, #12]
   24c5c:	ldr	ip, [r3]
   24c60:	cmp	r4, ip
   24c64:	blt	24bc8 <__assert_fail@plt+0x13024>
   24c68:	mov	r0, #0
   24c6c:	add	sp, sp, #20
   24c70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24c74:	mov	r0, #12
   24c78:	b	24c6c <__assert_fail@plt+0x130c8>
   24c7c:	mov	r0, fp
   24c80:	lsl	r1, sl, #3
   24c84:	str	r2, [sp, #12]
   24c88:	bl	36970 <__assert_fail@plt+0x24dcc>
   24c8c:	lsl	r3, sl, #1
   24c90:	ldr	r2, [sp, #12]
   24c94:	subs	fp, r0, #0
   24c98:	beq	24c74 <__assert_fail@plt+0x130d0>
   24c9c:	ldr	sl, [r8, #124]	; 0x7c
   24ca0:	str	fp, [r8, #132]	; 0x84
   24ca4:	str	r3, [r8, #128]	; 0x80
   24ca8:	b	24c18 <__assert_fail@plt+0x13074>
   24cac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   24cb0:	mov	r6, r0
   24cb4:	ldr	ip, [sp, #40]	; 0x28
   24cb8:	mov	r5, r1
   24cbc:	tst	ip, #4194304	; 0x400000
   24cc0:	mov	sl, r2
   24cc4:	mov	r7, r3
   24cc8:	ldr	r9, [sp, #32]
   24ccc:	beq	24cec <__assert_fail@plt+0x13148>
   24cd0:	ldr	r1, [pc, #2196]	; 2556c <__assert_fail@plt+0x139c8>
   24cd4:	ldr	r0, [sp, #36]	; 0x24
   24cd8:	bl	1170c <strcmp@plt>
   24cdc:	cmp	r0, #0
   24ce0:	bne	24dcc <__assert_fail@plt+0x13228>
   24ce4:	ldr	r3, [pc, #2180]	; 25570 <__assert_fail@plt+0x139cc>
   24ce8:	str	r3, [sp, #36]	; 0x24
   24cec:	ldr	r4, [r7]
   24cf0:	ldr	r3, [r9]
   24cf4:	cmp	r3, r4
   24cf8:	beq	24dfc <__assert_fail@plt+0x13258>
   24cfc:	ldr	r8, [sl]
   24d00:	add	r3, r4, #1
   24d04:	str	r3, [r7]
   24d08:	ldr	r0, [sp, #36]	; 0x24
   24d0c:	bl	116c4 <wctype@plt>
   24d10:	ldr	r1, [pc, #2140]	; 25574 <__assert_fail@plt+0x139d0>
   24d14:	str	r0, [r8, r4, lsl #2]
   24d18:	ldr	r0, [sp, #36]	; 0x24
   24d1c:	bl	1170c <strcmp@plt>
   24d20:	subs	r4, r0, #0
   24d24:	beq	24d84 <__assert_fail@plt+0x131e0>
   24d28:	ldr	r1, [pc, #2120]	; 25578 <__assert_fail@plt+0x139d4>
   24d2c:	ldr	r0, [sp, #36]	; 0x24
   24d30:	bl	1170c <strcmp@plt>
   24d34:	subs	r4, r0, #0
   24d38:	bne	24e28 <__assert_fail@plt+0x13284>
   24d3c:	cmp	r6, #0
   24d40:	bne	24fdc <__assert_fail@plt+0x13438>
   24d44:	bl	11964 <__ctype_b_loc@plt>
   24d48:	mov	ip, #1
   24d4c:	ldr	r3, [r0]
   24d50:	sub	r3, r3, #2
   24d54:	ldrh	r2, [r3, #2]!
   24d58:	asr	r1, r4, #5
   24d5c:	and	r0, r4, #31
   24d60:	tst	r2, #2
   24d64:	add	r4, r4, #1
   24d68:	ldrne	r2, [r5, r1, lsl #2]
   24d6c:	orrne	r2, r2, ip, lsl r0
   24d70:	strne	r2, [r5, r1, lsl #2]
   24d74:	cmp	r4, #256	; 0x100
   24d78:	bne	24d54 <__assert_fail@plt+0x131b0>
   24d7c:	mov	r0, #0
   24d80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24d84:	cmp	r6, #0
   24d88:	bne	24f48 <__assert_fail@plt+0x133a4>
   24d8c:	bl	11964 <__ctype_b_loc@plt>
   24d90:	mov	lr, #1
   24d94:	ldr	r3, [r0]
   24d98:	sub	r3, r3, #2
   24d9c:	ldrh	r0, [r3, #2]!
   24da0:	asr	r2, r4, #5
   24da4:	and	ip, r4, #31
   24da8:	tst	r0, #8
   24dac:	add	r4, r4, #1
   24db0:	ldrne	r1, [r5, r2, lsl #2]
   24db4:	orrne	r1, r1, lr, lsl ip
   24db8:	strne	r1, [r5, r2, lsl #2]
   24dbc:	cmp	r4, #256	; 0x100
   24dc0:	bne	24d9c <__assert_fail@plt+0x131f8>
   24dc4:	mov	r0, #0
   24dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24dcc:	ldr	r0, [sp, #36]	; 0x24
   24dd0:	ldr	r1, [pc, #1956]	; 2557c <__assert_fail@plt+0x139d8>
   24dd4:	bl	1170c <strcmp@plt>
   24dd8:	ldr	r3, [pc, #1936]	; 25570 <__assert_fail@plt+0x139cc>
   24ddc:	ldr	r2, [sp, #36]	; 0x24
   24de0:	ldr	r4, [r7]
   24de4:	cmp	r0, #0
   24de8:	moveq	r2, r3
   24dec:	ldr	r3, [r9]
   24df0:	str	r2, [sp, #36]	; 0x24
   24df4:	cmp	r3, r4
   24df8:	bne	24cfc <__assert_fail@plt+0x13158>
   24dfc:	lsl	r4, r4, #1
   24e00:	add	r4, r4, #1
   24e04:	ldr	r0, [sl]
   24e08:	lsl	r1, r4, #2
   24e0c:	bl	36970 <__assert_fail@plt+0x24dcc>
   24e10:	subs	r8, r0, #0
   24e14:	beq	250d4 <__assert_fail@plt+0x13530>
   24e18:	str	r8, [sl]
   24e1c:	str	r4, [r9]
   24e20:	ldr	r4, [r7]
   24e24:	b	24d00 <__assert_fail@plt+0x1315c>
   24e28:	ldr	r1, [pc, #1868]	; 2557c <__assert_fail@plt+0x139d8>
   24e2c:	ldr	r0, [sp, #36]	; 0x24
   24e30:	bl	1170c <strcmp@plt>
   24e34:	subs	r4, r0, #0
   24e38:	beq	24e94 <__assert_fail@plt+0x132f0>
   24e3c:	ldr	r1, [pc, #1852]	; 25580 <__assert_fail@plt+0x139dc>
   24e40:	ldr	r0, [sp, #36]	; 0x24
   24e44:	bl	1170c <strcmp@plt>
   24e48:	subs	r4, r0, #0
   24e4c:	bne	24edc <__assert_fail@plt+0x13338>
   24e50:	cmp	r6, #0
   24e54:	bne	25134 <__assert_fail@plt+0x13590>
   24e58:	bl	11964 <__ctype_b_loc@plt>
   24e5c:	mov	ip, #1
   24e60:	ldr	r3, [r0]
   24e64:	sub	r3, r3, #2
   24e68:	ldrh	r2, [r3, #2]!
   24e6c:	asr	r1, r4, #5
   24e70:	and	r0, r4, #31
   24e74:	tst	r2, #8192	; 0x2000
   24e78:	add	r4, r4, #1
   24e7c:	ldrne	r2, [r5, r1, lsl #2]
   24e80:	orrne	r2, r2, ip, lsl r0
   24e84:	strne	r2, [r5, r1, lsl #2]
   24e88:	cmp	r4, #256	; 0x100
   24e8c:	bne	24e68 <__assert_fail@plt+0x132c4>
   24e90:	b	24d7c <__assert_fail@plt+0x131d8>
   24e94:	cmp	r6, #0
   24e98:	bne	25084 <__assert_fail@plt+0x134e0>
   24e9c:	bl	11964 <__ctype_b_loc@plt>
   24ea0:	mov	ip, #1
   24ea4:	ldr	r3, [r0]
   24ea8:	sub	r3, r3, #2
   24eac:	ldrh	r2, [r3, #2]!
   24eb0:	asr	r1, r4, #5
   24eb4:	and	r0, r4, #31
   24eb8:	tst	r2, #512	; 0x200
   24ebc:	add	r4, r4, #1
   24ec0:	ldrne	r2, [r5, r1, lsl #2]
   24ec4:	orrne	r2, r2, ip, lsl r0
   24ec8:	strne	r2, [r5, r1, lsl #2]
   24ecc:	cmp	r4, #256	; 0x100
   24ed0:	bne	24eac <__assert_fail@plt+0x13308>
   24ed4:	mov	r0, #0
   24ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   24edc:	ldr	r1, [pc, #1676]	; 25570 <__assert_fail@plt+0x139cc>
   24ee0:	ldr	r0, [sp, #36]	; 0x24
   24ee4:	bl	1170c <strcmp@plt>
   24ee8:	subs	r4, r0, #0
   24eec:	beq	24f98 <__assert_fail@plt+0x133f4>
   24ef0:	ldr	r1, [pc, #1676]	; 25584 <__assert_fail@plt+0x139e0>
   24ef4:	ldr	r0, [sp, #36]	; 0x24
   24ef8:	bl	1170c <strcmp@plt>
   24efc:	subs	r4, r0, #0
   24f00:	bne	2502c <__assert_fail@plt+0x13488>
   24f04:	cmp	r6, #0
   24f08:	bne	25324 <__assert_fail@plt+0x13780>
   24f0c:	bl	11964 <__ctype_b_loc@plt>
   24f10:	mov	ip, #1
   24f14:	ldr	r3, [r0]
   24f18:	sub	r3, r3, #2
   24f1c:	ldrh	r1, [r3, #2]!
   24f20:	asr	r2, r4, #5
   24f24:	and	r0, r4, #31
   24f28:	tst	r1, #2048	; 0x800
   24f2c:	add	r4, r4, #1
   24f30:	ldrne	r1, [r5, r2, lsl #2]
   24f34:	orrne	r1, r1, ip, lsl r0
   24f38:	strne	r1, [r5, r2, lsl #2]
   24f3c:	cmp	r4, #256	; 0x100
   24f40:	bne	24f1c <__assert_fail@plt+0x13378>
   24f44:	b	24d7c <__assert_fail@plt+0x131d8>
   24f48:	bl	11964 <__ctype_b_loc@plt>
   24f4c:	mov	r4, #1
   24f50:	mov	r1, r6
   24f54:	ldr	r3, [r0]
   24f58:	add	ip, r3, #508	; 0x1fc
   24f5c:	add	ip, ip, #2
   24f60:	sub	r3, r3, #2
   24f64:	ldrh	r2, [r3, #2]!
   24f68:	tst	r2, #8
   24f6c:	beq	24f88 <__assert_fail@plt+0x133e4>
   24f70:	ldrb	r2, [r1]
   24f74:	and	lr, r2, #31
   24f78:	asr	r2, r2, #5
   24f7c:	ldr	r0, [r5, r2, lsl #2]
   24f80:	orr	r0, r0, r4, lsl lr
   24f84:	str	r0, [r5, r2, lsl #2]
   24f88:	cmp	ip, r3
   24f8c:	add	r1, r1, #1
   24f90:	bne	24f64 <__assert_fail@plt+0x133c0>
   24f94:	b	24d7c <__assert_fail@plt+0x131d8>
   24f98:	cmp	r6, #0
   24f9c:	bne	25184 <__assert_fail@plt+0x135e0>
   24fa0:	bl	11964 <__ctype_b_loc@plt>
   24fa4:	mov	ip, #1
   24fa8:	ldr	r3, [r0]
   24fac:	sub	r3, r3, #2
   24fb0:	ldrh	r2, [r3, #2]!
   24fb4:	asr	r1, r4, #5
   24fb8:	and	r0, r4, #31
   24fbc:	tst	r2, #1024	; 0x400
   24fc0:	add	r4, r4, #1
   24fc4:	ldrne	r2, [r5, r1, lsl #2]
   24fc8:	orrne	r2, r2, ip, lsl r0
   24fcc:	strne	r2, [r5, r1, lsl #2]
   24fd0:	cmp	r4, #256	; 0x100
   24fd4:	bne	24fb0 <__assert_fail@plt+0x1340c>
   24fd8:	b	24d7c <__assert_fail@plt+0x131d8>
   24fdc:	bl	11964 <__ctype_b_loc@plt>
   24fe0:	mov	r4, #1
   24fe4:	mov	r1, r6
   24fe8:	ldr	r3, [r0]
   24fec:	add	ip, r3, #508	; 0x1fc
   24ff0:	add	ip, ip, #2
   24ff4:	sub	r3, r3, #2
   24ff8:	ldrh	r2, [r3, #2]!
   24ffc:	tst	r2, #2
   25000:	beq	2501c <__assert_fail@plt+0x13478>
   25004:	ldrb	r2, [r1]
   25008:	and	lr, r2, #31
   2500c:	asr	r2, r2, #5
   25010:	ldr	r0, [r5, r2, lsl #2]
   25014:	orr	r0, r0, r4, lsl lr
   25018:	str	r0, [r5, r2, lsl #2]
   2501c:	cmp	ip, r3
   25020:	add	r1, r1, #1
   25024:	bne	24ff8 <__assert_fail@plt+0x13454>
   25028:	b	24d7c <__assert_fail@plt+0x131d8>
   2502c:	ldr	r1, [pc, #1364]	; 25588 <__assert_fail@plt+0x139e4>
   25030:	ldr	r0, [sp, #36]	; 0x24
   25034:	bl	1170c <strcmp@plt>
   25038:	subs	r4, r0, #0
   2503c:	bne	250dc <__assert_fail@plt+0x13538>
   25040:	cmp	r6, #0
   25044:	bne	25374 <__assert_fail@plt+0x137d0>
   25048:	bl	11964 <__ctype_b_loc@plt>
   2504c:	mov	ip, #1
   25050:	ldr	r3, [r0]
   25054:	sub	r3, r3, #2
   25058:	ldrh	r2, [r3, #2]!
   2505c:	asr	r1, r4, #5
   25060:	and	r0, r4, #31
   25064:	tst	r2, #16384	; 0x4000
   25068:	add	r4, r4, #1
   2506c:	ldrne	r2, [r5, r1, lsl #2]
   25070:	orrne	r2, r2, ip, lsl r0
   25074:	strne	r2, [r5, r1, lsl #2]
   25078:	cmp	r4, #256	; 0x100
   2507c:	bne	25058 <__assert_fail@plt+0x134b4>
   25080:	b	24d7c <__assert_fail@plt+0x131d8>
   25084:	bl	11964 <__ctype_b_loc@plt>
   25088:	mov	r4, #1
   2508c:	mov	r1, r6
   25090:	ldr	r3, [r0]
   25094:	add	ip, r3, #508	; 0x1fc
   25098:	add	ip, ip, #2
   2509c:	sub	r3, r3, #2
   250a0:	ldrh	r2, [r3, #2]!
   250a4:	tst	r2, #512	; 0x200
   250a8:	beq	250c4 <__assert_fail@plt+0x13520>
   250ac:	ldrb	r2, [r1]
   250b0:	and	lr, r2, #31
   250b4:	asr	r2, r2, #5
   250b8:	ldr	r0, [r5, r2, lsl #2]
   250bc:	orr	r0, r0, r4, lsl lr
   250c0:	str	r0, [r5, r2, lsl #2]
   250c4:	cmp	ip, r3
   250c8:	add	r1, r1, #1
   250cc:	bne	250a0 <__assert_fail@plt+0x134fc>
   250d0:	b	24d7c <__assert_fail@plt+0x131d8>
   250d4:	mov	r0, #12
   250d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   250dc:	ldr	r1, [pc, #1160]	; 2556c <__assert_fail@plt+0x139c8>
   250e0:	ldr	r0, [sp, #36]	; 0x24
   250e4:	bl	1170c <strcmp@plt>
   250e8:	subs	r4, r0, #0
   250ec:	bne	251d4 <__assert_fail@plt+0x13630>
   250f0:	cmp	r6, #0
   250f4:	bne	2522c <__assert_fail@plt+0x13688>
   250f8:	bl	11964 <__ctype_b_loc@plt>
   250fc:	mov	ip, #1
   25100:	ldr	r3, [r0]
   25104:	sub	r3, r3, #2
   25108:	ldrh	r2, [r3, #2]!
   2510c:	asr	r1, r4, #5
   25110:	and	r0, r4, #31
   25114:	tst	r2, #256	; 0x100
   25118:	add	r4, r4, #1
   2511c:	ldrne	r2, [r5, r1, lsl #2]
   25120:	orrne	r2, r2, ip, lsl r0
   25124:	strne	r2, [r5, r1, lsl #2]
   25128:	cmp	r4, #256	; 0x100
   2512c:	bne	25108 <__assert_fail@plt+0x13564>
   25130:	b	24d7c <__assert_fail@plt+0x131d8>
   25134:	bl	11964 <__ctype_b_loc@plt>
   25138:	mov	r4, #1
   2513c:	mov	r1, r6
   25140:	ldr	r3, [r0]
   25144:	add	ip, r3, #508	; 0x1fc
   25148:	add	ip, ip, #2
   2514c:	sub	r3, r3, #2
   25150:	ldrh	r2, [r3, #2]!
   25154:	tst	r2, #8192	; 0x2000
   25158:	beq	25174 <__assert_fail@plt+0x135d0>
   2515c:	ldrb	r2, [r1]
   25160:	and	lr, r2, #31
   25164:	asr	r2, r2, #5
   25168:	ldr	r0, [r5, r2, lsl #2]
   2516c:	orr	r0, r0, r4, lsl lr
   25170:	str	r0, [r5, r2, lsl #2]
   25174:	cmp	ip, r3
   25178:	add	r1, r1, #1
   2517c:	bne	25150 <__assert_fail@plt+0x135ac>
   25180:	b	24d7c <__assert_fail@plt+0x131d8>
   25184:	bl	11964 <__ctype_b_loc@plt>
   25188:	mov	r4, #1
   2518c:	mov	r1, r6
   25190:	ldr	r3, [r0]
   25194:	add	ip, r3, #508	; 0x1fc
   25198:	add	ip, ip, #2
   2519c:	sub	r3, r3, #2
   251a0:	ldrh	r2, [r3, #2]!
   251a4:	tst	r2, #1024	; 0x400
   251a8:	beq	251c4 <__assert_fail@plt+0x13620>
   251ac:	ldrb	r2, [r1]
   251b0:	and	lr, r2, #31
   251b4:	asr	r2, r2, #5
   251b8:	ldr	r0, [r5, r2, lsl #2]
   251bc:	orr	r0, r0, r4, lsl lr
   251c0:	str	r0, [r5, r2, lsl #2]
   251c4:	cmp	ip, r3
   251c8:	add	r1, r1, #1
   251cc:	bne	251a0 <__assert_fail@plt+0x135fc>
   251d0:	b	24d7c <__assert_fail@plt+0x131d8>
   251d4:	ldr	r1, [pc, #944]	; 2558c <__assert_fail@plt+0x139e8>
   251d8:	ldr	r0, [sp, #36]	; 0x24
   251dc:	bl	1170c <strcmp@plt>
   251e0:	subs	r4, r0, #0
   251e4:	bne	252cc <__assert_fail@plt+0x13728>
   251e8:	cmp	r6, #0
   251ec:	bne	2527c <__assert_fail@plt+0x136d8>
   251f0:	bl	11964 <__ctype_b_loc@plt>
   251f4:	mov	ip, #1
   251f8:	ldr	r3, [r0]
   251fc:	sub	r3, r3, #2
   25200:	ldrh	r2, [r3, #2]!
   25204:	asr	r1, r4, #5
   25208:	and	r0, r4, #31
   2520c:	tst	r2, #1
   25210:	add	r4, r4, #1
   25214:	ldrne	r2, [r5, r1, lsl #2]
   25218:	orrne	r2, r2, ip, lsl r0
   2521c:	strne	r2, [r5, r1, lsl #2]
   25220:	cmp	r4, #256	; 0x100
   25224:	bne	25200 <__assert_fail@plt+0x1365c>
   25228:	b	24d7c <__assert_fail@plt+0x131d8>
   2522c:	bl	11964 <__ctype_b_loc@plt>
   25230:	mov	r1, r6
   25234:	mov	lr, #1
   25238:	ldr	r3, [r0]
   2523c:	add	r0, r3, #508	; 0x1fc
   25240:	add	r0, r0, #2
   25244:	sub	r3, r3, #2
   25248:	ldrh	r2, [r3, #2]!
   2524c:	tst	r2, #256	; 0x100
   25250:	beq	2526c <__assert_fail@plt+0x136c8>
   25254:	ldrb	r2, [r1]
   25258:	and	r4, r2, #31
   2525c:	asr	r2, r2, #5
   25260:	ldr	ip, [r5, r2, lsl #2]
   25264:	orr	ip, ip, lr, lsl r4
   25268:	str	ip, [r5, r2, lsl #2]
   2526c:	cmp	r0, r3
   25270:	add	r1, r1, #1
   25274:	bne	25248 <__assert_fail@plt+0x136a4>
   25278:	b	24d7c <__assert_fail@plt+0x131d8>
   2527c:	bl	11964 <__ctype_b_loc@plt>
   25280:	mov	r1, r6
   25284:	mov	lr, #1
   25288:	ldr	r3, [r0]
   2528c:	add	r0, r3, #508	; 0x1fc
   25290:	add	r0, r0, #2
   25294:	sub	r3, r3, #2
   25298:	ldrh	r2, [r3, #2]!
   2529c:	tst	r2, #1
   252a0:	beq	252bc <__assert_fail@plt+0x13718>
   252a4:	ldrb	r2, [r1]
   252a8:	and	r4, r2, #31
   252ac:	asr	r2, r2, #5
   252b0:	ldr	ip, [r5, r2, lsl #2]
   252b4:	orr	ip, ip, lr, lsl r4
   252b8:	str	ip, [r5, r2, lsl #2]
   252bc:	cmp	r0, r3
   252c0:	add	r1, r1, #1
   252c4:	bne	25298 <__assert_fail@plt+0x136f4>
   252c8:	b	24d7c <__assert_fail@plt+0x131d8>
   252cc:	ldr	r1, [pc, #700]	; 25590 <__assert_fail@plt+0x139ec>
   252d0:	ldr	r0, [sp, #36]	; 0x24
   252d4:	bl	1170c <strcmp@plt>
   252d8:	subs	r4, r0, #0
   252dc:	bne	25414 <__assert_fail@plt+0x13870>
   252e0:	cmp	r6, #0
   252e4:	bne	253c4 <__assert_fail@plt+0x13820>
   252e8:	bl	11964 <__ctype_b_loc@plt>
   252ec:	mov	ip, #1
   252f0:	ldr	r3, [r0]
   252f4:	sub	r3, r3, #2
   252f8:	ldrsh	r2, [r3, #2]!
   252fc:	cmp	r2, #0
   25300:	asrlt	r0, r4, #5
   25304:	andlt	r1, r4, #31
   25308:	ldrlt	r2, [r5, r0, lsl #2]
   2530c:	add	r4, r4, #1
   25310:	orrlt	r2, r2, ip, lsl r1
   25314:	strlt	r2, [r5, r0, lsl #2]
   25318:	cmp	r4, #256	; 0x100
   2531c:	bne	252f8 <__assert_fail@plt+0x13754>
   25320:	b	24d7c <__assert_fail@plt+0x131d8>
   25324:	bl	11964 <__ctype_b_loc@plt>
   25328:	mov	r1, r6
   2532c:	mov	lr, #1
   25330:	ldr	r3, [r0]
   25334:	add	r2, r3, #508	; 0x1fc
   25338:	add	r2, r2, #2
   2533c:	sub	r3, r3, #2
   25340:	ldrh	r0, [r3, #2]!
   25344:	tst	r0, #2048	; 0x800
   25348:	beq	25364 <__assert_fail@plt+0x137c0>
   2534c:	ldrb	r0, [r1]
   25350:	and	r4, r0, #31
   25354:	asr	r0, r0, #5
   25358:	ldr	ip, [r5, r0, lsl #2]
   2535c:	orr	ip, ip, lr, lsl r4
   25360:	str	ip, [r5, r0, lsl #2]
   25364:	cmp	r2, r3
   25368:	add	r1, r1, #1
   2536c:	bne	25340 <__assert_fail@plt+0x1379c>
   25370:	b	24d7c <__assert_fail@plt+0x131d8>
   25374:	bl	11964 <__ctype_b_loc@plt>
   25378:	mov	r1, r6
   2537c:	mov	lr, #1
   25380:	ldr	r3, [r0]
   25384:	add	r0, r3, #508	; 0x1fc
   25388:	add	r0, r0, #2
   2538c:	sub	r3, r3, #2
   25390:	ldrh	r2, [r3, #2]!
   25394:	tst	r2, #16384	; 0x4000
   25398:	beq	253b4 <__assert_fail@plt+0x13810>
   2539c:	ldrb	r2, [r1]
   253a0:	and	r4, r2, #31
   253a4:	asr	r2, r2, #5
   253a8:	ldr	ip, [r5, r2, lsl #2]
   253ac:	orr	ip, ip, lr, lsl r4
   253b0:	str	ip, [r5, r2, lsl #2]
   253b4:	cmp	r3, r0
   253b8:	add	r1, r1, #1
   253bc:	bne	25390 <__assert_fail@plt+0x137ec>
   253c0:	b	24d7c <__assert_fail@plt+0x131d8>
   253c4:	bl	11964 <__ctype_b_loc@plt>
   253c8:	mov	r1, r6
   253cc:	mov	lr, #1
   253d0:	ldr	r3, [r0]
   253d4:	add	r0, r3, #508	; 0x1fc
   253d8:	add	r0, r0, #2
   253dc:	sub	r3, r3, #2
   253e0:	ldrsh	r2, [r3, #2]!
   253e4:	cmp	r2, #0
   253e8:	bge	25404 <__assert_fail@plt+0x13860>
   253ec:	ldrb	r2, [r1]
   253f0:	and	r4, r2, #31
   253f4:	asr	r2, r2, #5
   253f8:	ldr	ip, [r5, r2, lsl #2]
   253fc:	orr	ip, ip, lr, lsl r4
   25400:	str	ip, [r5, r2, lsl #2]
   25404:	cmp	r0, r3
   25408:	add	r1, r1, #1
   2540c:	bne	253e0 <__assert_fail@plt+0x1383c>
   25410:	b	24d7c <__assert_fail@plt+0x131d8>
   25414:	ldr	r1, [pc, #376]	; 25594 <__assert_fail@plt+0x139f0>
   25418:	ldr	r0, [sp, #36]	; 0x24
   2541c:	bl	1170c <strcmp@plt>
   25420:	subs	r4, r0, #0
   25424:	bne	2546c <__assert_fail@plt+0x138c8>
   25428:	cmp	r6, #0
   2542c:	bne	25488 <__assert_fail@plt+0x138e4>
   25430:	bl	11964 <__ctype_b_loc@plt>
   25434:	mov	ip, #1
   25438:	ldr	r3, [r0]
   2543c:	sub	r3, r3, #2
   25440:	ldrh	r2, [r3, #2]!
   25444:	asr	r1, r4, #5
   25448:	and	r0, r4, #31
   2544c:	tst	r2, #4
   25450:	add	r4, r4, #1
   25454:	ldrne	r2, [r5, r1, lsl #2]
   25458:	orrne	r2, r2, ip, lsl r0
   2545c:	strne	r2, [r5, r1, lsl #2]
   25460:	cmp	r4, #256	; 0x100
   25464:	bne	25440 <__assert_fail@plt+0x1389c>
   25468:	b	24d7c <__assert_fail@plt+0x131d8>
   2546c:	ldr	r1, [pc, #292]	; 25598 <__assert_fail@plt+0x139f4>
   25470:	ldr	r0, [sp, #36]	; 0x24
   25474:	bl	1170c <strcmp@plt>
   25478:	subs	r4, r0, #0
   2547c:	beq	254d8 <__assert_fail@plt+0x13934>
   25480:	mov	r0, #4
   25484:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25488:	bl	11964 <__ctype_b_loc@plt>
   2548c:	mov	r1, r6
   25490:	mov	lr, #1
   25494:	ldr	r3, [r0]
   25498:	add	r0, r3, #508	; 0x1fc
   2549c:	add	r0, r0, #2
   254a0:	sub	r3, r3, #2
   254a4:	ldrh	r2, [r3, #2]!
   254a8:	tst	r2, #4
   254ac:	beq	254c8 <__assert_fail@plt+0x13924>
   254b0:	ldrb	r2, [r1]
   254b4:	and	r4, r2, #31
   254b8:	asr	r2, r2, #5
   254bc:	ldr	ip, [r5, r2, lsl #2]
   254c0:	orr	ip, ip, lr, lsl r4
   254c4:	str	ip, [r5, r2, lsl #2]
   254c8:	cmp	r0, r3
   254cc:	add	r1, r1, #1
   254d0:	bne	254a4 <__assert_fail@plt+0x13900>
   254d4:	b	24d7c <__assert_fail@plt+0x131d8>
   254d8:	cmp	r6, #0
   254dc:	bne	2551c <__assert_fail@plt+0x13978>
   254e0:	bl	11964 <__ctype_b_loc@plt>
   254e4:	mov	ip, #1
   254e8:	ldr	r3, [r0]
   254ec:	sub	r3, r3, #2
   254f0:	ldrh	r2, [r3, #2]!
   254f4:	asr	r1, r4, #5
   254f8:	and	r0, r4, #31
   254fc:	tst	r2, #4096	; 0x1000
   25500:	add	r4, r4, #1
   25504:	ldrne	r2, [r5, r1, lsl #2]
   25508:	orrne	r2, r2, ip, lsl r0
   2550c:	strne	r2, [r5, r1, lsl #2]
   25510:	cmp	r4, #256	; 0x100
   25514:	bne	254f0 <__assert_fail@plt+0x1394c>
   25518:	b	24d7c <__assert_fail@plt+0x131d8>
   2551c:	bl	11964 <__ctype_b_loc@plt>
   25520:	mov	r1, r6
   25524:	mov	lr, #1
   25528:	ldr	r3, [r0]
   2552c:	add	r0, r3, #508	; 0x1fc
   25530:	add	r0, r0, #2
   25534:	sub	r3, r3, #2
   25538:	ldrh	r2, [r3, #2]!
   2553c:	tst	r2, #4096	; 0x1000
   25540:	beq	2555c <__assert_fail@plt+0x139b8>
   25544:	ldrb	r2, [r1]
   25548:	and	r4, r2, #31
   2554c:	asr	r2, r2, #5
   25550:	ldr	ip, [r5, r2, lsl #2]
   25554:	orr	ip, ip, lr, lsl r4
   25558:	str	ip, [r5, r2, lsl #2]
   2555c:	cmp	r3, r0
   25560:	add	r1, r1, #1
   25564:	bne	25538 <__assert_fail@plt+0x13994>
   25568:	b	24d7c <__assert_fail@plt+0x131d8>
   2556c:	andeq	sl, r3, ip, ror r2
   25570:	andeq	sl, r3, r4, ror r2
   25574:	andeq	sl, r3, ip, lsl #5
   25578:	muleq	r3, r4, r2
   2557c:	andeq	sl, r3, r4, lsl #5
   25580:	muleq	r3, ip, r2
   25584:	andeq	sl, r3, r4, lsr #5
   25588:	andeq	sl, r3, ip, lsr #5
   2558c:			; <UNDEFINED> instruction: 0x0003a2b4
   25590:			; <UNDEFINED> instruction: 0x0003a2bc
   25594:	andeq	sl, r3, r4, asr #5
   25598:	andeq	sl, r3, ip, asr #5
   2559c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   255a0:	sub	sp, sp, #308	; 0x134
   255a4:	ldr	r9, [r0]
   255a8:	ldr	ip, [r9, #92]	; 0x5c
   255ac:	cmp	ip, #1
   255b0:	movne	ip, #0
   255b4:	ldreq	ip, [r0, #12]
   255b8:	lsreq	ip, ip, #22
   255bc:	andeq	ip, ip, #1
   255c0:	str	ip, [sp, #20]
   255c4:	ldr	ip, [r1]
   255c8:	cmp	ip, #0
   255cc:	ble	25970 <__assert_fail@plt+0x13dcc>
   255d0:	mov	r6, r3
   255d4:	mov	r3, #0
   255d8:	str	r2, [sp, #16]
   255dc:	str	r1, [sp, #24]
   255e0:	str	r0, [sp, #28]
   255e4:	str	r3, [sp, #4]
   255e8:	mov	r5, #1
   255ec:	b	25628 <__assert_fail@plt+0x13a84>
   255f0:	cmp	r4, #3
   255f4:	beq	25768 <__assert_fail@plt+0x13bc4>
   255f8:	cmp	r4, #6
   255fc:	beq	2581c <__assert_fail@plt+0x13c78>
   25600:	and	r3, r4, #253	; 0xfd
   25604:	cmp	r3, #5
   25608:	beq	259a8 <__assert_fail@plt+0x13e04>
   2560c:	cmp	r4, #2
   25610:	beq	25950 <__assert_fail@plt+0x13dac>
   25614:	ldr	r3, [sp, #4]
   25618:	add	r3, r3, #1
   2561c:	cmp	r3, ip
   25620:	str	r3, [sp, #4]
   25624:	bge	25970 <__assert_fail@plt+0x13dcc>
   25628:	ldr	r3, [sp, #16]
   2562c:	ldr	r1, [sp, #4]
   25630:	ldr	r2, [r3]
   25634:	ldr	r3, [r9]
   25638:	ldr	r7, [r2, r1, lsl #2]
   2563c:	lsl	r2, r7, #3
   25640:	str	r2, [sp, #8]
   25644:	add	r2, r3, r2
   25648:	ldrb	r4, [r2, #4]
   2564c:	cmp	r4, #1
   25650:	bne	255f0 <__assert_fail@plt+0x13a4c>
   25654:	ldrb	r3, [r3, r7, lsl #3]
   25658:	ldr	r2, [sp, #20]
   2565c:	cmp	r2, #0
   25660:	strb	r4, [r6, r3]
   25664:	str	r3, [sp, #12]
   25668:	beq	25680 <__assert_fail@plt+0x13adc>
   2566c:	bl	11928 <__ctype_tolower_loc@plt>
   25670:	ldr	r3, [sp, #12]
   25674:	ldr	r2, [r0]
   25678:	ldr	r3, [r2, r3, lsl #2]
   2567c:	strb	r4, [r6, r3]
   25680:	ldr	r3, [sp, #28]
   25684:	ldr	r3, [r3, #12]
   25688:	tst	r3, #4194304	; 0x400000
   2568c:	beq	2575c <__assert_fail@plt+0x13bb8>
   25690:	ldr	r3, [r9, #92]	; 0x5c
   25694:	cmp	r3, #1
   25698:	ble	2575c <__assert_fail@plt+0x13bb8>
   2569c:	ldr	r3, [r9]
   256a0:	add	r1, r7, #1
   256a4:	ldrb	r2, [r3, r7, lsl #3]
   256a8:	strb	r2, [sp, #48]	; 0x30
   256ac:	ldr	r2, [r9, #8]
   256b0:	cmp	r2, r1
   256b4:	bls	259a0 <__assert_fail@plt+0x13dfc>
   256b8:	ldr	r0, [sp, #8]
   256bc:	ldr	ip, [pc, #772]	; 259c8 <__assert_fail@plt+0x13e24>
   256c0:	add	r2, r0, #8
   256c4:	add	r3, r3, r2
   256c8:	ldr	r2, [r3, #4]
   256cc:	bic	r2, r2, #-16777216	; 0xff000000
   256d0:	bic	r2, r2, #14614528	; 0xdf0000
   256d4:	bic	r2, r2, #65280	; 0xff00
   256d8:	cmp	r2, ip
   256dc:	bne	259a0 <__assert_fail@plt+0x13dfc>
   256e0:	add	r8, r0, #16
   256e4:	add	r4, sp, #49	; 0x31
   256e8:	b	25714 <__assert_fail@plt+0x13b70>
   256ec:	ldr	r3, [r9]
   256f0:	ldr	r0, [pc, #720]	; 259c8 <__assert_fail@plt+0x13e24>
   256f4:	add	r3, r3, r8
   256f8:	add	r8, r8, #8
   256fc:	ldr	r2, [r3, #4]
   25700:	bic	r2, r2, #-16777216	; 0xff000000
   25704:	bic	r2, r2, #14614528	; 0xdf0000
   25708:	bic	r2, r2, #65280	; 0xff00
   2570c:	cmp	r2, r0
   25710:	bne	2572c <__assert_fail@plt+0x13b88>
   25714:	ldrb	r3, [r3]
   25718:	add	r1, r1, #1
   2571c:	strb	r3, [r4], #1
   25720:	ldr	r3, [r9, #8]
   25724:	cmp	r1, r3
   25728:	bcc	256ec <__assert_fail@plt+0x13b48>
   2572c:	add	r3, sp, #48	; 0x30
   25730:	sub	r4, r4, r3
   25734:	mov	ip, #0
   25738:	mov	r2, r4
   2573c:	add	r3, sp, #40	; 0x28
   25740:	add	r1, sp, #48	; 0x30
   25744:	add	r0, sp, #36	; 0x24
   25748:	str	ip, [sp, #40]	; 0x28
   2574c:	str	ip, [sp, #44]	; 0x2c
   25750:	bl	1db04 <__assert_fail@plt+0xbf60>
   25754:	cmp	r4, r0
   25758:	beq	25978 <__assert_fail@plt+0x13dd4>
   2575c:	ldr	r3, [sp, #24]
   25760:	ldr	ip, [r3]
   25764:	b	25614 <__assert_fail@plt+0x13a70>
   25768:	ldr	r8, [sp, #20]
   2576c:	mov	r7, #0
   25770:	str	r9, [sp, #12]
   25774:	ldr	r2, [sp, #8]
   25778:	cmp	r8, #0
   2577c:	ldr	r3, [r3, r2]
   25780:	ldr	r9, [r3, r7]
   25784:	bne	257c0 <__assert_fail@plt+0x13c1c>
   25788:	add	r0, r6, r7, lsl #3
   2578c:	mov	r3, r8
   25790:	lsr	r2, r9, r3
   25794:	tst	r2, #1
   25798:	strbne	r5, [r0, r3]
   2579c:	add	r3, r3, #1
   257a0:	cmp	r3, #32
   257a4:	bne	25790 <__assert_fail@plt+0x13bec>
   257a8:	add	r7, r7, #4
   257ac:	cmp	r7, #32
   257b0:	beq	2580c <__assert_fail@plt+0x13c68>
   257b4:	ldr	r3, [sp, #12]
   257b8:	ldr	r3, [r3]
   257bc:	b	25774 <__assert_fail@plt+0x13bd0>
   257c0:	add	sl, r6, r7, lsl #3
   257c4:	lsl	fp, r7, #5
   257c8:	mov	r4, #0
   257cc:	lsr	r3, r9, r4
   257d0:	tst	r3, #1
   257d4:	add	r4, r4, #1
   257d8:	beq	257f0 <__assert_fail@plt+0x13c4c>
   257dc:	strb	r5, [sl]
   257e0:	bl	11928 <__ctype_tolower_loc@plt>
   257e4:	ldr	r3, [r0]
   257e8:	ldr	r3, [r3, fp]
   257ec:	strb	r5, [r6, r3]
   257f0:	cmp	r4, #32
   257f4:	add	sl, sl, #1
   257f8:	add	fp, fp, #4
   257fc:	bne	257cc <__assert_fail@plt+0x13c28>
   25800:	add	r7, r7, #4
   25804:	cmp	r7, #32
   25808:	bne	257b4 <__assert_fail@plt+0x13c10>
   2580c:	ldr	r3, [sp, #24]
   25810:	ldr	r9, [sp, #12]
   25814:	ldr	ip, [r3]
   25818:	b	25614 <__assert_fail@plt+0x13a70>
   2581c:	ldr	r3, [r9, #92]	; 0x5c
   25820:	ldr	r7, [r2]
   25824:	cmp	r3, #1
   25828:	ble	25850 <__assert_fail@plt+0x13cac>
   2582c:	ldr	r3, [r7, #36]	; 0x24
   25830:	cmp	r3, #0
   25834:	bne	25908 <__assert_fail@plt+0x13d64>
   25838:	ldrb	r3, [r7, #16]
   2583c:	tst	r3, #1
   25840:	bne	25908 <__assert_fail@plt+0x13d64>
   25844:	ldr	r3, [r7, #32]
   25848:	cmp	r3, #0
   2584c:	bne	25908 <__assert_fail@plt+0x13d64>
   25850:	ldr	r3, [r7, #20]
   25854:	cmp	r3, #0
   25858:	movgt	r4, #0
   2585c:	ldrgt	r8, [sp, #28]
   25860:	ble	25614 <__assert_fail@plt+0x13a70>
   25864:	mov	r3, #0
   25868:	str	r3, [sp, #40]	; 0x28
   2586c:	str	r3, [sp, #44]	; 0x2c
   25870:	ldr	r3, [r7]
   25874:	add	r2, sp, #40	; 0x28
   25878:	add	r0, sp, #48	; 0x30
   2587c:	ldr	r1, [r3, r4, lsl #2]
   25880:	bl	116dc <wcrtomb@plt>
   25884:	lsl	sl, r4, #2
   25888:	add	r4, r4, #1
   2588c:	cmn	r0, #1
   25890:	beq	258b8 <__assert_fail@plt+0x13d14>
   25894:	ldrb	fp, [sp, #48]	; 0x30
   25898:	ldr	r3, [sp, #20]
   2589c:	cmp	r3, #0
   258a0:	strb	r5, [r6, fp]
   258a4:	beq	258b8 <__assert_fail@plt+0x13d14>
   258a8:	bl	11928 <__ctype_tolower_loc@plt>
   258ac:	ldr	r3, [r0]
   258b0:	ldr	r3, [r3, fp, lsl #2]
   258b4:	strb	r5, [r6, r3]
   258b8:	ldr	r3, [r8, #12]
   258bc:	tst	r3, #4194304	; 0x400000
   258c0:	beq	258f8 <__assert_fail@plt+0x13d54>
   258c4:	ldr	r3, [r9, #92]	; 0x5c
   258c8:	cmp	r3, #1
   258cc:	ble	258f8 <__assert_fail@plt+0x13d54>
   258d0:	ldr	r3, [r7]
   258d4:	ldr	r0, [r3, sl]
   258d8:	bl	117a8 <towlower@plt>
   258dc:	add	r2, sp, #40	; 0x28
   258e0:	mov	r1, r0
   258e4:	add	r0, sp, #48	; 0x30
   258e8:	bl	116dc <wcrtomb@plt>
   258ec:	cmn	r0, #1
   258f0:	ldrbne	r3, [sp, #48]	; 0x30
   258f4:	strbne	r5, [r6, r3]
   258f8:	ldr	r3, [r7, #20]
   258fc:	cmp	r4, r3
   25900:	blt	25864 <__assert_fail@plt+0x13cc0>
   25904:	b	2575c <__assert_fail@plt+0x13bb8>
   25908:	mov	r3, #0
   2590c:	strb	r3, [sp, #40]	; 0x28
   25910:	mov	r0, #0
   25914:	add	r3, sp, #48	; 0x30
   25918:	mov	r2, r5
   2591c:	add	r1, sp, #40	; 0x28
   25920:	str	r0, [sp, #48]	; 0x30
   25924:	str	r0, [sp, #52]	; 0x34
   25928:	bl	1db04 <__assert_fail@plt+0xbf60>
   2592c:	ldrb	r3, [sp, #40]	; 0x28
   25930:	cmn	r0, #2
   25934:	strbeq	r5, [r6, r3]
   25938:	add	r3, r3, #1
   2593c:	uxtb	r3, r3
   25940:	cmp	r3, #0
   25944:	strb	r3, [sp, #40]	; 0x28
   25948:	bne	25910 <__assert_fail@plt+0x13d6c>
   2594c:	b	2575c <__assert_fail@plt+0x13bb8>
   25950:	mov	r0, r6
   25954:	mov	r2, #256	; 0x100
   25958:	mov	r1, #1
   2595c:	bl	119e8 <memset@plt>
   25960:	ldr	r2, [sp, #28]
   25964:	ldrb	r3, [r2, #28]
   25968:	orr	r3, r3, #1
   2596c:	strb	r3, [r2, #28]
   25970:	add	sp, sp, #308	; 0x134
   25974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25978:	ldr	r0, [sp, #36]	; 0x24
   2597c:	bl	117a8 <towlower@plt>
   25980:	add	r2, sp, #40	; 0x28
   25984:	mov	r1, r0
   25988:	add	r0, sp, #48	; 0x30
   2598c:	bl	116dc <wcrtomb@plt>
   25990:	cmn	r0, #1
   25994:	ldrbne	r3, [sp, #48]	; 0x30
   25998:	strbne	r5, [r6, r3]
   2599c:	b	2575c <__assert_fail@plt+0x13bb8>
   259a0:	add	r4, sp, #49	; 0x31
   259a4:	b	2572c <__assert_fail@plt+0x13b88>
   259a8:	mov	r0, r6
   259ac:	mov	r2, #256	; 0x100
   259b0:	mov	r1, #1
   259b4:	bl	119e8 <memset@plt>
   259b8:	cmp	r4, #2
   259bc:	beq	25960 <__assert_fail@plt+0x13dbc>
   259c0:	add	sp, sp, #308	; 0x134
   259c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   259c8:	eoreq	r0, r0, r1
   259cc:	add	ip, r0, r2, lsl #3
   259d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   259d4:	ldrb	r6, [ip, #4]
   259d8:	ldr	r7, [sp, #32]
   259dc:	cmp	r6, #7
   259e0:	beq	25ac0 <__assert_fail@plt+0x13f1c>
   259e4:	ldr	ip, [r3, #80]	; 0x50
   259e8:	cmp	ip, #1
   259ec:	beq	25ad0 <__assert_fail@plt+0x13f2c>
   259f0:	ldr	r5, [r3, #28]
   259f4:	add	lr, r7, #1
   259f8:	cmp	r5, lr
   259fc:	ble	25ad0 <__assert_fail@plt+0x13f2c>
   25a00:	ldr	r8, [r3, #8]
   25a04:	add	ip, r8, lr, lsl #2
   25a08:	ldr	lr, [r8, lr, lsl #2]
   25a0c:	cmn	lr, #1
   25a10:	subeq	r5, r5, r7
   25a14:	moveq	r4, #1
   25a18:	beq	25a2c <__assert_fail@plt+0x13e88>
   25a1c:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25a20:	ldr	lr, [ip, #4]!
   25a24:	cmn	lr, #1
   25a28:	bne	25a38 <__assert_fail@plt+0x13e94>
   25a2c:	add	r4, r4, #1
   25a30:	cmp	r4, r5
   25a34:	bne	25a20 <__assert_fail@plt+0x13e7c>
   25a38:	cmp	r6, #5
   25a3c:	beq	25adc <__assert_fail@plt+0x13f38>
   25a40:	cmp	r4, #1
   25a44:	sub	r6, r6, #6
   25a48:	clz	r6, r6
   25a4c:	lsr	r6, r6, #5
   25a50:	moveq	r6, #0
   25a54:	cmp	r6, #0
   25a58:	beq	25ad0 <__assert_fail@plt+0x13f2c>
   25a5c:	ldr	r9, [r0, r2, lsl #3]
   25a60:	ldr	ip, [r9, #32]
   25a64:	cmp	ip, #0
   25a68:	beq	25b18 <__assert_fail@plt+0x13f74>
   25a6c:	ldr	r0, [r9, #20]
   25a70:	cmp	r0, #0
   25a74:	ldr	r5, [r8, r7, lsl #2]
   25a78:	ble	25aac <__assert_fail@plt+0x13f08>
   25a7c:	ldr	r2, [r9]
   25a80:	ldr	r3, [r2]
   25a84:	cmp	r5, r3
   25a88:	movne	r3, #0
   25a8c:	bne	25aa0 <__assert_fail@plt+0x13efc>
   25a90:	b	25b68 <__assert_fail@plt+0x13fc4>
   25a94:	ldr	r1, [r2, #4]!
   25a98:	cmp	r5, r1
   25a9c:	beq	25b68 <__assert_fail@plt+0x13fc4>
   25aa0:	add	r3, r3, #1
   25aa4:	cmp	r3, r0
   25aa8:	bne	25a94 <__assert_fail@plt+0x13ef0>
   25aac:	ldr	r3, [r9, #36]	; 0x24
   25ab0:	cmp	r3, #0
   25ab4:	ble	25bb0 <__assert_fail@plt+0x1400c>
   25ab8:	mov	r6, #0
   25abc:	b	25b4c <__assert_fail@plt+0x13fa8>
   25ac0:	ldr	r1, [r3, #4]
   25ac4:	ldrb	r2, [r1, r7]
   25ac8:	cmp	r2, #193	; 0xc1
   25acc:	bhi	25b78 <__assert_fail@plt+0x13fd4>
   25ad0:	mov	r4, #0
   25ad4:	mov	r0, r4
   25ad8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25adc:	ldr	r2, [r1]
   25ae0:	tst	r2, #64	; 0x40
   25ae4:	beq	25b04 <__assert_fail@plt+0x13f60>
   25ae8:	tst	r2, #128	; 0x80
   25aec:	beq	25ad4 <__assert_fail@plt+0x13f30>
   25af0:	ldr	r3, [r3, #4]
   25af4:	ldrb	r3, [r3, r7]
   25af8:	cmp	r3, #0
   25afc:	beq	25ad0 <__assert_fail@plt+0x13f2c>
   25b00:	b	25ad4 <__assert_fail@plt+0x13f30>
   25b04:	ldr	r1, [r3, #4]
   25b08:	ldrb	r1, [r1, r7]
   25b0c:	cmp	r1, #10
   25b10:	bne	25ae8 <__assert_fail@plt+0x13f44>
   25b14:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25b18:	ldr	r3, [r9, #36]	; 0x24
   25b1c:	ldr	r0, [r9, #20]
   25b20:	cmp	r3, #0
   25b24:	bne	25a70 <__assert_fail@plt+0x13ecc>
   25b28:	cmp	r0, #0
   25b2c:	bne	25a70 <__assert_fail@plt+0x13ecc>
   25b30:	ldrb	r3, [r9, #16]
   25b34:	tst	r3, #1
   25b38:	bne	25ad4 <__assert_fail@plt+0x13f30>
   25b3c:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25b40:	ldr	r3, [r9, #36]	; 0x24
   25b44:	cmp	r6, r3
   25b48:	bge	25bac <__assert_fail@plt+0x14008>
   25b4c:	ldr	r3, [r9, #12]
   25b50:	mov	r0, r5
   25b54:	ldr	r1, [r3, r6, lsl #2]
   25b58:	bl	11700 <iswctype@plt>
   25b5c:	add	r6, r6, #1
   25b60:	cmp	r0, #0
   25b64:	beq	25b40 <__assert_fail@plt+0x13f9c>
   25b68:	ldrb	r3, [r9, #16]
   25b6c:	tst	r3, #1
   25b70:	beq	25ad4 <__assert_fail@plt+0x13f30>
   25b74:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25b78:	ldr	lr, [r3, #48]	; 0x30
   25b7c:	add	ip, r7, #1
   25b80:	cmp	ip, lr
   25b84:	bge	25ad0 <__assert_fail@plt+0x13f2c>
   25b88:	add	r0, r1, r7
   25b8c:	cmp	r2, #223	; 0xdf
   25b90:	ldrb	r3, [r0, #1]
   25b94:	bhi	25bf4 <__assert_fail@plt+0x14050>
   25b98:	eor	r3, r3, #128	; 0x80
   25b9c:	cmp	r3, #63	; 0x3f
   25ba0:	movls	r4, #2
   25ba4:	bls	25ad4 <__assert_fail@plt+0x13f30>
   25ba8:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25bac:	ldr	ip, [r9, #32]
   25bb0:	cmp	ip, #0
   25bb4:	ble	25b30 <__assert_fail@plt+0x13f8c>
   25bb8:	ldr	r2, [r9, #4]
   25bbc:	mov	r3, #0
   25bc0:	sub	r2, r2, #4
   25bc4:	b	25bd4 <__assert_fail@plt+0x14030>
   25bc8:	add	r3, r3, #1
   25bcc:	cmp	r3, ip
   25bd0:	beq	25b30 <__assert_fail@plt+0x13f8c>
   25bd4:	ldr	r1, [r2, #4]!
   25bd8:	cmp	r5, r1
   25bdc:	bcc	25bc8 <__assert_fail@plt+0x14024>
   25be0:	ldr	r1, [r9, #8]
   25be4:	ldr	r1, [r1, r3, lsl #2]
   25be8:	cmp	r5, r1
   25bec:	bhi	25bc8 <__assert_fail@plt+0x14024>
   25bf0:	b	25b68 <__assert_fail@plt+0x13fc4>
   25bf4:	cmp	r2, #239	; 0xef
   25bf8:	bhi	25c84 <__assert_fail@plt+0x140e0>
   25bfc:	cmp	r3, #159	; 0x9f
   25c00:	cmpls	r2, #224	; 0xe0
   25c04:	movne	r4, #3
   25c08:	beq	25ad0 <__assert_fail@plt+0x13f2c>
   25c0c:	add	r7, r7, r4
   25c10:	cmp	lr, r7
   25c14:	blt	25ad0 <__assert_fail@plt+0x13f2c>
   25c18:	ldrb	r3, [r1, ip]
   25c1c:	eor	r3, r3, #128	; 0x80
   25c20:	cmp	r3, #63	; 0x3f
   25c24:	bhi	25ad0 <__assert_fail@plt+0x13f2c>
   25c28:	ldrb	r3, [r0, #2]
   25c2c:	eor	r3, r3, #128	; 0x80
   25c30:	cmp	r3, #63	; 0x3f
   25c34:	bhi	25ad0 <__assert_fail@plt+0x13f2c>
   25c38:	cmp	r4, #3
   25c3c:	beq	25ad4 <__assert_fail@plt+0x13f30>
   25c40:	ldrb	r3, [r0, #3]
   25c44:	eor	r3, r3, #128	; 0x80
   25c48:	cmp	r3, #63	; 0x3f
   25c4c:	bhi	25ad0 <__assert_fail@plt+0x13f2c>
   25c50:	cmp	r4, #4
   25c54:	beq	25ad4 <__assert_fail@plt+0x13f30>
   25c58:	ldrb	r3, [r0, #4]
   25c5c:	eor	r3, r3, #128	; 0x80
   25c60:	cmp	r3, #63	; 0x3f
   25c64:	bhi	25ad0 <__assert_fail@plt+0x13f2c>
   25c68:	cmp	r4, #6
   25c6c:	bne	25cd8 <__assert_fail@plt+0x14134>
   25c70:	ldrb	r3, [r0, #5]
   25c74:	eor	r3, r3, #128	; 0x80
   25c78:	cmp	r3, #63	; 0x3f
   25c7c:	bls	25ad4 <__assert_fail@plt+0x13f30>
   25c80:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25c84:	cmp	r2, #247	; 0xf7
   25c88:	bhi	25ca0 <__assert_fail@plt+0x140fc>
   25c8c:	cmp	r3, #143	; 0x8f
   25c90:	cmpls	r2, #240	; 0xf0
   25c94:	movne	r4, #4
   25c98:	bne	25c0c <__assert_fail@plt+0x14068>
   25c9c:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25ca0:	cmp	r2, #251	; 0xfb
   25ca4:	bhi	25cbc <__assert_fail@plt+0x14118>
   25ca8:	cmp	r3, #135	; 0x87
   25cac:	cmpls	r2, #248	; 0xf8
   25cb0:	movne	r4, #5
   25cb4:	bne	25c0c <__assert_fail@plt+0x14068>
   25cb8:	b	25ad0 <__assert_fail@plt+0x13f2c>
   25cbc:	cmp	r2, #253	; 0xfd
   25cc0:	bhi	25ad0 <__assert_fail@plt+0x13f2c>
   25cc4:	cmp	r3, #131	; 0x83
   25cc8:	cmpls	r2, #252	; 0xfc
   25ccc:	beq	25ad0 <__assert_fail@plt+0x13f2c>
   25cd0:	mov	r4, #6
   25cd4:	b	25c0c <__assert_fail@plt+0x14068>
   25cd8:	mov	r4, #5
   25cdc:	b	25ad4 <__assert_fail@plt+0x13f30>
   25ce0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25ce4:	sub	sp, sp, #8
   25ce8:	ldr	r6, [r1, #40]	; 0x28
   25cec:	ldr	r3, [r1, #56]	; 0x38
   25cf0:	cmp	r3, r6
   25cf4:	ble	25f68 <__assert_fail@plt+0x143c4>
   25cf8:	ldr	sl, [r1, #4]
   25cfc:	ldrb	r3, [r0, #6]
   25d00:	mov	r8, r2
   25d04:	ldrb	r7, [sl, r6]
   25d08:	and	r3, r3, #159	; 0x9f
   25d0c:	strb	r3, [r0, #6]
   25d10:	strb	r7, [r0]
   25d14:	ldr	r3, [r1, #80]	; 0x50
   25d18:	mov	r5, r0
   25d1c:	cmp	r3, #1
   25d20:	mov	r4, r1
   25d24:	ble	25f7c <__assert_fail@plt+0x143d8>
   25d28:	ldr	r2, [r1, #28]
   25d2c:	cmp	r6, r2
   25d30:	beq	25d44 <__assert_fail@plt+0x141a0>
   25d34:	ldr	r2, [r1, #8]
   25d38:	ldr	r2, [r2, r6, lsl #2]
   25d3c:	cmn	r2, #1
   25d40:	beq	261dc <__assert_fail@plt+0x14638>
   25d44:	cmp	r7, #92	; 0x5c
   25d48:	beq	25fe4 <__assert_fail@plt+0x14440>
   25d4c:	ldr	r3, [r4, #8]
   25d50:	mov	r2, #1
   25d54:	strb	r2, [r5, #4]
   25d58:	ldr	r9, [r3, r6, lsl #2]
   25d5c:	mov	r0, r9
   25d60:	bl	119c4 <iswalnum@plt>
   25d64:	ldrb	r3, [r5, #6]
   25d68:	sub	r9, r9, #95	; 0x5f
   25d6c:	clz	r9, r9
   25d70:	lsr	r9, r9, #5
   25d74:	bic	r3, r3, #64	; 0x40
   25d78:	cmp	r0, #0
   25d7c:	orrne	r9, r9, #1
   25d80:	orr	r9, r3, r9, lsl #6
   25d84:	strb	r9, [r5, #6]
   25d88:	sub	r7, r7, #10
   25d8c:	cmp	r7, #115	; 0x73
   25d90:	ldrls	pc, [pc, r7, lsl #2]
   25d94:	b	25fd8 <__assert_fail@plt+0x14434>
   25d98:	andeq	r6, r2, r0, lsr #4
   25d9c:	ldrdeq	r5, [r2], -r8
   25da0:	ldrdeq	r5, [r2], -r8
   25da4:	ldrdeq	r5, [r2], -r8
   25da8:	ldrdeq	r5, [r2], -r8
   25dac:	ldrdeq	r5, [r2], -r8
   25db0:	ldrdeq	r5, [r2], -r8
   25db4:	ldrdeq	r5, [r2], -r8
   25db8:	ldrdeq	r5, [r2], -r8
   25dbc:	ldrdeq	r5, [r2], -r8
   25dc0:	ldrdeq	r5, [r2], -r8
   25dc4:	ldrdeq	r5, [r2], -r8
   25dc8:	ldrdeq	r5, [r2], -r8
   25dcc:	ldrdeq	r5, [r2], -r8
   25dd0:	ldrdeq	r5, [r2], -r8
   25dd4:	ldrdeq	r5, [r2], -r8
   25dd8:	ldrdeq	r5, [r2], -r8
   25ddc:	ldrdeq	r5, [r2], -r8
   25de0:	ldrdeq	r5, [r2], -r8
   25de4:	ldrdeq	r5, [r2], -r8
   25de8:	ldrdeq	r5, [r2], -r8
   25dec:	ldrdeq	r5, [r2], -r8
   25df0:	ldrdeq	r5, [r2], -r8
   25df4:	ldrdeq	r5, [r2], -r8
   25df8:	ldrdeq	r5, [r2], -r8
   25dfc:	ldrdeq	r5, [r2], -r8
   25e00:	andeq	r6, r2, r8, lsr r2
   25e04:	ldrdeq	r5, [r2], -r8
   25e08:	ldrdeq	r5, [r2], -r8
   25e0c:	ldrdeq	r5, [r2], -r8
   25e10:	muleq	r2, r8, r2
   25e14:			; <UNDEFINED> instruction: 0x000262b0
   25e18:	andeq	r6, r2, r8, asr #5
   25e1c:	ldrdeq	r6, [r2], -r8
   25e20:	ldrdeq	r5, [r2], -r8
   25e24:	ldrdeq	r5, [r2], -r8
   25e28:	strdeq	r6, [r2], -r8
   25e2c:	ldrdeq	r5, [r2], -r8
   25e30:	ldrdeq	r5, [r2], -r8
   25e34:	ldrdeq	r5, [r2], -r8
   25e38:	ldrdeq	r5, [r2], -r8
   25e3c:	ldrdeq	r5, [r2], -r8
   25e40:	ldrdeq	r5, [r2], -r8
   25e44:	ldrdeq	r5, [r2], -r8
   25e48:	ldrdeq	r5, [r2], -r8
   25e4c:	ldrdeq	r5, [r2], -r8
   25e50:	ldrdeq	r5, [r2], -r8
   25e54:	ldrdeq	r5, [r2], -r8
   25e58:	ldrdeq	r5, [r2], -r8
   25e5c:	ldrdeq	r5, [r2], -r8
   25e60:	ldrdeq	r5, [r2], -r8
   25e64:	ldrdeq	r5, [r2], -r8
   25e68:	ldrdeq	r5, [r2], -r8
   25e6c:	andeq	r6, r2, r8, lsl #6
   25e70:	ldrdeq	r5, [r2], -r8
   25e74:	ldrdeq	r5, [r2], -r8
   25e78:	ldrdeq	r5, [r2], -r8
   25e7c:	ldrdeq	r5, [r2], -r8
   25e80:	ldrdeq	r5, [r2], -r8
   25e84:	ldrdeq	r5, [r2], -r8
   25e88:	ldrdeq	r5, [r2], -r8
   25e8c:	ldrdeq	r5, [r2], -r8
   25e90:	ldrdeq	r5, [r2], -r8
   25e94:	ldrdeq	r5, [r2], -r8
   25e98:	ldrdeq	r5, [r2], -r8
   25e9c:	ldrdeq	r5, [r2], -r8
   25ea0:	ldrdeq	r5, [r2], -r8
   25ea4:	ldrdeq	r5, [r2], -r8
   25ea8:	ldrdeq	r5, [r2], -r8
   25eac:	ldrdeq	r5, [r2], -r8
   25eb0:	ldrdeq	r5, [r2], -r8
   25eb4:	ldrdeq	r5, [r2], -r8
   25eb8:	ldrdeq	r5, [r2], -r8
   25ebc:	ldrdeq	r5, [r2], -r8
   25ec0:	ldrdeq	r5, [r2], -r8
   25ec4:	ldrdeq	r5, [r2], -r8
   25ec8:	ldrdeq	r5, [r2], -r8
   25ecc:	ldrdeq	r5, [r2], -r8
   25ed0:	ldrdeq	r5, [r2], -r8
   25ed4:	ldrdeq	r5, [r2], -r8
   25ed8:	ldrdeq	r5, [r2], -r8
   25edc:	andeq	r6, r2, r8, lsr #6
   25ee0:	ldrdeq	r5, [r2], -r8
   25ee4:	ldrdeq	r5, [r2], -r8
   25ee8:	andeq	r6, r2, r8, lsr r3
   25eec:	ldrdeq	r5, [r2], -r8
   25ef0:	ldrdeq	r5, [r2], -r8
   25ef4:	ldrdeq	r5, [r2], -r8
   25ef8:	ldrdeq	r5, [r2], -r8
   25efc:	ldrdeq	r5, [r2], -r8
   25f00:	ldrdeq	r5, [r2], -r8
   25f04:	ldrdeq	r5, [r2], -r8
   25f08:	ldrdeq	r5, [r2], -r8
   25f0c:	ldrdeq	r5, [r2], -r8
   25f10:	ldrdeq	r5, [r2], -r8
   25f14:	ldrdeq	r5, [r2], -r8
   25f18:	ldrdeq	r5, [r2], -r8
   25f1c:	ldrdeq	r5, [r2], -r8
   25f20:	ldrdeq	r5, [r2], -r8
   25f24:	ldrdeq	r5, [r2], -r8
   25f28:	ldrdeq	r5, [r2], -r8
   25f2c:	ldrdeq	r5, [r2], -r8
   25f30:	ldrdeq	r5, [r2], -r8
   25f34:	ldrdeq	r5, [r2], -r8
   25f38:	ldrdeq	r5, [r2], -r8
   25f3c:	ldrdeq	r5, [r2], -r8
   25f40:	ldrdeq	r5, [r2], -r8
   25f44:	ldrdeq	r5, [r2], -r8
   25f48:	ldrdeq	r5, [r2], -r8
   25f4c:	ldrdeq	r5, [r2], -r8
   25f50:	ldrdeq	r5, [r2], -r8
   25f54:	ldrdeq	r5, [r2], -r8
   25f58:	ldrdeq	r5, [r2], -r8
   25f5c:	andeq	r5, r2, r0, asr #31
   25f60:	muleq	r2, r0, r3
   25f64:	andeq	r6, r2, r4, lsl #4
   25f68:	mov	r3, #2
   25f6c:	strb	r3, [r0, #4]
   25f70:	mov	r0, #0
   25f74:	add	sp, sp, #8
   25f78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25f7c:	cmp	r7, #92	; 0x5c
   25f80:	beq	25fe4 <__assert_fail@plt+0x14440>
   25f84:	mov	r3, #1
   25f88:	strb	r3, [r5, #4]
   25f8c:	bl	11964 <__ctype_b_loc@plt>
   25f90:	lsl	r1, r7, #1
   25f94:	ldrb	r2, [r5, #6]
   25f98:	bic	r2, r2, #64	; 0x40
   25f9c:	ldr	r3, [r0]
   25fa0:	ldrh	r3, [r3, r1]
   25fa4:	lsr	r3, r3, #3
   25fa8:	and	r3, r3, #1
   25fac:	cmp	r7, #95	; 0x5f
   25fb0:	orreq	r3, r3, #1
   25fb4:	orr	r3, r2, r3, lsl #6
   25fb8:	strb	r3, [r5, #6]
   25fbc:	b	25d88 <__assert_fail@plt+0x141e4>
   25fc0:	and	r8, r8, #4608	; 0x1200
   25fc4:	cmp	r8, #4608	; 0x1200
   25fc8:	moveq	r3, #23
   25fcc:	strbeq	r3, [r5, #4]
   25fd0:	moveq	r0, #1
   25fd4:	beq	25f74 <__assert_fail@plt+0x143d0>
   25fd8:	mov	r0, #1
   25fdc:	add	sp, sp, #8
   25fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25fe4:	ldr	r1, [r4, #48]	; 0x30
   25fe8:	add	r2, r6, #1
   25fec:	cmp	r2, r1
   25ff0:	bge	261f4 <__assert_fail@plt+0x14650>
   25ff4:	ldrb	r1, [r4, #75]	; 0x4b
   25ff8:	cmp	r1, #0
   25ffc:	bne	265b0 <__assert_fail@plt+0x14a0c>
   26000:	ldrb	r6, [sl, r2]
   26004:	cmp	r3, #1
   26008:	mov	r3, #1
   2600c:	strb	r6, [r5]
   26010:	strb	r3, [r5, #4]
   26014:	ble	2657c <__assert_fail@plt+0x149d8>
   26018:	ldr	r1, [r4, #8]
   2601c:	add	r1, r1, r2, lsl #2
   26020:	ldr	r4, [r1]
   26024:	mov	r0, r4
   26028:	bl	119c4 <iswalnum@plt>
   2602c:	ldrb	r3, [r5, #6]
   26030:	sub	r4, r4, #95	; 0x5f
   26034:	clz	r4, r4
   26038:	lsr	r4, r4, #5
   2603c:	bic	r3, r3, #64	; 0x40
   26040:	cmp	r0, #0
   26044:	orrne	r4, r4, #1
   26048:	orr	r4, r3, r4, lsl #6
   2604c:	strb	r4, [r5, #6]
   26050:	sub	r3, r6, #39	; 0x27
   26054:	cmp	r3, #86	; 0x56
   26058:	ldrls	pc, [pc, r3, lsl #2]
   2605c:	b	261d4 <__assert_fail@plt+0x14630>
   26060:			; <UNDEFINED> instruction: 0x000263b8
   26064:	andeq	r6, r2, r0, lsr #7
   26068:	andeq	r6, r2, r4, ror #10
   2606c:	ldrdeq	r6, [r2], -r4
   26070:	andeq	r6, r2, r8, asr #10
   26074:	ldrdeq	r6, [r2], -r4
   26078:	ldrdeq	r6, [r2], -r4
   2607c:	ldrdeq	r6, [r2], -r4
   26080:	ldrdeq	r6, [r2], -r4
   26084:	ldrdeq	r6, [r2], -r4
   26088:	andeq	r6, r2, r8, lsr #10
   2608c:	andeq	r6, r2, r8, lsr #10
   26090:	andeq	r6, r2, r8, lsr #10
   26094:	andeq	r6, r2, r8, lsr #10
   26098:	andeq	r6, r2, r8, lsr #10
   2609c:	andeq	r6, r2, r8, lsr #10
   260a0:	andeq	r6, r2, r8, lsr #10
   260a4:	andeq	r6, r2, r8, lsr #10
   260a8:	andeq	r6, r2, r8, lsr #10
   260ac:	ldrdeq	r6, [r2], -r4
   260b0:	ldrdeq	r6, [r2], -r4
   260b4:	andeq	r6, r2, r8, lsl #10
   260b8:	ldrdeq	r6, [r2], -r4
   260bc:	andeq	r6, r2, r8, ror #9
   260c0:	andeq	r6, r2, ip, asr #9
   260c4:	ldrdeq	r6, [r2], -r4
   260c8:	ldrdeq	r6, [r2], -r4
   260cc:	andeq	r6, r2, ip, lsr #9
   260d0:	ldrdeq	r6, [r2], -r4
   260d4:	ldrdeq	r6, [r2], -r4
   260d8:	ldrdeq	r6, [r2], -r4
   260dc:	ldrdeq	r6, [r2], -r4
   260e0:	ldrdeq	r6, [r2], -r4
   260e4:	ldrdeq	r6, [r2], -r4
   260e8:	ldrdeq	r6, [r2], -r4
   260ec:	ldrdeq	r6, [r2], -r4
   260f0:	ldrdeq	r6, [r2], -r4
   260f4:	ldrdeq	r6, [r2], -r4
   260f8:	ldrdeq	r6, [r2], -r4
   260fc:	ldrdeq	r6, [r2], -r4
   26100:	ldrdeq	r6, [r2], -r4
   26104:	ldrdeq	r6, [r2], -r4
   26108:	ldrdeq	r6, [r2], -r4
   2610c:	ldrdeq	r6, [r2], -r4
   26110:	muleq	r2, r4, r4
   26114:	ldrdeq	r6, [r2], -r4
   26118:	ldrdeq	r6, [r2], -r4
   2611c:	ldrdeq	r6, [r2], -r4
   26120:	andeq	r6, r2, ip, ror r4
   26124:	ldrdeq	r6, [r2], -r4
   26128:	ldrdeq	r6, [r2], -r4
   2612c:	ldrdeq	r6, [r2], -r4
   26130:	ldrdeq	r6, [r2], -r4
   26134:	ldrdeq	r6, [r2], -r4
   26138:	ldrdeq	r6, [r2], -r4
   2613c:	ldrdeq	r6, [r2], -r4
   26140:	ldrdeq	r6, [r2], -r4
   26144:	andeq	r6, r2, ip, asr r4
   26148:	ldrdeq	r6, [r2], -r4
   2614c:	andeq	r6, r2, ip, lsr r4
   26150:	ldrdeq	r6, [r2], -r4
   26154:	ldrdeq	r6, [r2], -r4
   26158:	ldrdeq	r6, [r2], -r4
   2615c:	ldrdeq	r6, [r2], -r4
   26160:	ldrdeq	r6, [r2], -r4
   26164:	ldrdeq	r6, [r2], -r4
   26168:	ldrdeq	r6, [r2], -r4
   2616c:	ldrdeq	r6, [r2], -r4
   26170:	ldrdeq	r6, [r2], -r4
   26174:	ldrdeq	r6, [r2], -r4
   26178:	ldrdeq	r6, [r2], -r4
   2617c:	ldrdeq	r6, [r2], -r4
   26180:	ldrdeq	r6, [r2], -r4
   26184:	ldrdeq	r6, [r2], -r4
   26188:	ldrdeq	r6, [r2], -r4
   2618c:	ldrdeq	r6, [r2], -r4
   26190:	andeq	r6, r2, r4, lsr #8
   26194:	ldrdeq	r6, [r2], -r4
   26198:	ldrdeq	r6, [r2], -r4
   2619c:	ldrdeq	r6, [r2], -r4
   261a0:	andeq	r6, r2, ip, lsl #8
   261a4:	ldrdeq	r6, [r2], -r4
   261a8:	ldrdeq	r6, [r2], -r4
   261ac:	ldrdeq	r6, [r2], -r4
   261b0:			; <UNDEFINED> instruction: 0x000261bc
   261b4:	strdeq	r6, [r2], -r4
   261b8:	ldrdeq	r6, [r2], -r8
   261bc:	and	r8, r8, #4608	; 0x1200
   261c0:	cmp	r8, #512	; 0x200
   261c4:	moveq	r3, #23
   261c8:	strbeq	r3, [r5, #4]
   261cc:	moveq	r0, #2
   261d0:	beq	25f74 <__assert_fail@plt+0x143d0>
   261d4:	mov	r0, #2
   261d8:	b	25f74 <__assert_fail@plt+0x143d0>
   261dc:	ldrb	r3, [r0, #6]
   261e0:	mov	r0, #1
   261e4:	strb	r0, [r5, #4]
   261e8:	orr	r3, r3, #32
   261ec:	strb	r3, [r5, #6]
   261f0:	b	25f74 <__assert_fail@plt+0x143d0>
   261f4:	mov	r3, #36	; 0x24
   261f8:	strb	r3, [r5, #4]
   261fc:	mov	r0, #1
   26200:	b	25f74 <__assert_fail@plt+0x143d0>
   26204:	and	r8, r8, #4608	; 0x1200
   26208:	cmp	r8, #4608	; 0x1200
   2620c:	moveq	r3, #24
   26210:	strbeq	r3, [r5, #4]
   26214:	moveq	r0, #1
   26218:	bne	25fd8 <__assert_fail@plt+0x14434>
   2621c:	b	25f74 <__assert_fail@plt+0x143d0>
   26220:	tst	r8, #2048	; 0x800
   26224:	beq	25fd8 <__assert_fail@plt+0x14434>
   26228:	mov	r3, #10
   2622c:	strb	r3, [r5, #4]
   26230:	mov	r0, #1
   26234:	b	25f74 <__assert_fail@plt+0x143d0>
   26238:	tst	r8, #8
   2623c:	bne	26280 <__assert_fail@plt+0x146dc>
   26240:	ldr	r3, [r4, #48]	; 0x30
   26244:	add	r6, r6, #1
   26248:	cmp	r6, r3
   2624c:	beq	26280 <__assert_fail@plt+0x146dc>
   26250:	mov	r2, r8
   26254:	str	r6, [r4, #40]	; 0x28
   26258:	mov	r1, r4
   2625c:	mov	r0, sp
   26260:	bl	25ce0 <__assert_fail@plt+0x1413c>
   26264:	ldrb	r2, [sp, #4]
   26268:	ldr	r3, [r4, #40]	; 0x28
   2626c:	sub	r2, r2, #9
   26270:	sub	r3, r3, #1
   26274:	cmp	r2, #1
   26278:	str	r3, [r4, #40]	; 0x28
   2627c:	bhi	25fd8 <__assert_fail@plt+0x14434>
   26280:	mov	r2, #12
   26284:	mov	r3, #32
   26288:	strb	r2, [r5, #4]
   2628c:	str	r3, [r5]
   26290:	mov	r0, #1
   26294:	b	25f74 <__assert_fail@plt+0x143d0>
   26298:	tst	r8, #8192	; 0x2000
   2629c:	beq	25fd8 <__assert_fail@plt+0x14434>
   262a0:	mov	r3, #8
   262a4:	strb	r3, [r5, #4]
   262a8:	mov	r0, #1
   262ac:	b	25f74 <__assert_fail@plt+0x143d0>
   262b0:	tst	r8, #8192	; 0x2000
   262b4:	beq	25fd8 <__assert_fail@plt+0x14434>
   262b8:	mov	r3, #9
   262bc:	strb	r3, [r5, #4]
   262c0:	mov	r0, #1
   262c4:	b	25f74 <__assert_fail@plt+0x143d0>
   262c8:	mov	r3, #11
   262cc:	strb	r3, [r5, #4]
   262d0:	mov	r0, #1
   262d4:	b	25f74 <__assert_fail@plt+0x143d0>
   262d8:	ldr	r3, [pc, #864]	; 26640 <__assert_fail@plt+0x14a9c>
   262dc:	and	r3, r3, r8
   262e0:	cmp	r3, #0
   262e4:	bne	25fd8 <__assert_fail@plt+0x14434>
   262e8:	mov	r3, #18
   262ec:	strb	r3, [r5, #4]
   262f0:	mov	r0, #1
   262f4:	b	25f74 <__assert_fail@plt+0x143d0>
   262f8:	mov	r3, #5
   262fc:	strb	r3, [r5, #4]
   26300:	mov	r0, #1
   26304:	b	25f74 <__assert_fail@plt+0x143d0>
   26308:	ldr	r3, [pc, #816]	; 26640 <__assert_fail@plt+0x14a9c>
   2630c:	and	r3, r3, r8
   26310:	cmp	r3, #0
   26314:	bne	25fd8 <__assert_fail@plt+0x14434>
   26318:	mov	r3, #19
   2631c:	strb	r3, [r5, #4]
   26320:	mov	r0, #1
   26324:	b	25f74 <__assert_fail@plt+0x143d0>
   26328:	mov	r3, #20
   2632c:	strb	r3, [r5, #4]
   26330:	mov	r0, #1
   26334:	b	25f74 <__assert_fail@plt+0x143d0>
   26338:	ldr	r3, [pc, #772]	; 26644 <__assert_fail@plt+0x14aa0>
   2633c:	cmp	r6, #0
   26340:	and	r3, r3, r8
   26344:	clz	r3, r3
   26348:	lsr	r3, r3, #5
   2634c:	moveq	r3, #0
   26350:	cmp	r3, #0
   26354:	beq	26378 <__assert_fail@plt+0x147d4>
   26358:	add	r6, sl, r6
   2635c:	lsr	r3, r8, #11
   26360:	ldrb	r2, [r6, #-1]
   26364:	eor	r3, r3, #1
   26368:	cmp	r2, #10
   2636c:	orrne	r3, r3, #1
   26370:	tst	r3, #1
   26374:	bne	25fd8 <__assert_fail@plt+0x14434>
   26378:	mov	r2, #12
   2637c:	mov	r3, #16
   26380:	strb	r2, [r5, #4]
   26384:	str	r3, [r5]
   26388:	mov	r0, #1
   2638c:	b	25f74 <__assert_fail@plt+0x143d0>
   26390:	and	r8, r8, #33792	; 0x8400
   26394:	cmp	r8, #32768	; 0x8000
   26398:	bne	25fd8 <__assert_fail@plt+0x14434>
   2639c:	b	26228 <__assert_fail@plt+0x14684>
   263a0:	tst	r8, #8192	; 0x2000
   263a4:	bne	261d4 <__assert_fail@plt+0x14630>
   263a8:	mov	r3, #8
   263ac:	strb	r3, [r5, #4]
   263b0:	mov	r0, #2
   263b4:	b	25f74 <__assert_fail@plt+0x143d0>
   263b8:	tst	r8, #524288	; 0x80000
   263bc:	bne	261d4 <__assert_fail@plt+0x14630>
   263c0:	mov	r2, #12
   263c4:	mov	r3, #128	; 0x80
   263c8:	strb	r2, [r5, #4]
   263cc:	str	r3, [r5]
   263d0:	mov	r0, #2
   263d4:	b	25f74 <__assert_fail@plt+0x143d0>
   263d8:	and	r8, r8, #4608	; 0x1200
   263dc:	cmp	r8, #512	; 0x200
   263e0:	moveq	r3, #24
   263e4:	strbeq	r3, [r5, #4]
   263e8:	moveq	r0, #2
   263ec:	bne	261d4 <__assert_fail@plt+0x14630>
   263f0:	b	25f74 <__assert_fail@plt+0x143d0>
   263f4:	tst	r8, #33792	; 0x8400
   263f8:	bne	261d4 <__assert_fail@plt+0x14630>
   263fc:	mov	r3, #10
   26400:	strb	r3, [r5, #4]
   26404:	mov	r0, #2
   26408:	b	25f74 <__assert_fail@plt+0x143d0>
   2640c:	tst	r8, #524288	; 0x80000
   26410:	bne	261d4 <__assert_fail@plt+0x14630>
   26414:	mov	r3, #32
   26418:	strb	r3, [r5, #4]
   2641c:	mov	r0, #2
   26420:	b	25f74 <__assert_fail@plt+0x143d0>
   26424:	tst	r8, #524288	; 0x80000
   26428:	bne	261d4 <__assert_fail@plt+0x14630>
   2642c:	mov	r3, #34	; 0x22
   26430:	strb	r3, [r5, #4]
   26434:	mov	r0, #2
   26438:	b	25f74 <__assert_fail@plt+0x143d0>
   2643c:	tst	r8, #524288	; 0x80000
   26440:	bne	261d4 <__assert_fail@plt+0x14630>
   26444:	mov	r2, #12
   26448:	mov	r3, #256	; 0x100
   2644c:	strb	r2, [r5, #4]
   26450:	str	r3, [r5]
   26454:	mov	r0, #2
   26458:	b	25f74 <__assert_fail@plt+0x143d0>
   2645c:	tst	r8, #524288	; 0x80000
   26460:	bne	261d4 <__assert_fail@plt+0x14630>
   26464:	mov	r2, #12
   26468:	mov	r3, #64	; 0x40
   2646c:	strb	r2, [r5, #4]
   26470:	str	r3, [r5]
   26474:	mov	r0, #2
   26478:	b	25f74 <__assert_fail@plt+0x143d0>
   2647c:	tst	r8, #524288	; 0x80000
   26480:	bne	261d4 <__assert_fail@plt+0x14630>
   26484:	mov	r3, #33	; 0x21
   26488:	strb	r3, [r5, #4]
   2648c:	mov	r0, #2
   26490:	b	25f74 <__assert_fail@plt+0x143d0>
   26494:	tst	r8, #524288	; 0x80000
   26498:	bne	261d4 <__assert_fail@plt+0x14630>
   2649c:	mov	r3, #35	; 0x23
   264a0:	strb	r3, [r5, #4]
   264a4:	mov	r0, #2
   264a8:	b	25f74 <__assert_fail@plt+0x143d0>
   264ac:	tst	r8, #524288	; 0x80000
   264b0:	bne	261d4 <__assert_fail@plt+0x14630>
   264b4:	mov	r2, #12
   264b8:	mov	r3, #512	; 0x200
   264bc:	strb	r2, [r5, #4]
   264c0:	str	r3, [r5]
   264c4:	mov	r0, #2
   264c8:	b	25f74 <__assert_fail@plt+0x143d0>
   264cc:	ldr	r0, [pc, #364]	; 26640 <__assert_fail@plt+0x14a9c>
   264d0:	and	r0, r0, r8
   264d4:	cmp	r0, #2
   264d8:	moveq	r3, #19
   264dc:	strbeq	r3, [r5, #4]
   264e0:	bne	261d4 <__assert_fail@plt+0x14630>
   264e4:	b	25f74 <__assert_fail@plt+0x143d0>
   264e8:	tst	r8, #524288	; 0x80000
   264ec:	bne	261d4 <__assert_fail@plt+0x14630>
   264f0:	mov	r2, #12
   264f4:	mov	r3, #9
   264f8:	strb	r2, [r5, #4]
   264fc:	str	r3, [r5]
   26500:	mov	r0, #2
   26504:	b	25f74 <__assert_fail@plt+0x143d0>
   26508:	tst	r8, #524288	; 0x80000
   2650c:	bne	261d4 <__assert_fail@plt+0x14630>
   26510:	mov	r2, #12
   26514:	mov	r3, #6
   26518:	strb	r2, [r5, #4]
   2651c:	str	r3, [r5]
   26520:	mov	r0, #2
   26524:	b	25f74 <__assert_fail@plt+0x143d0>
   26528:	tst	r8, #16384	; 0x4000
   2652c:	bne	261d4 <__assert_fail@plt+0x14630>
   26530:	sub	r6, r6, #49	; 0x31
   26534:	mov	r3, #4
   26538:	str	r6, [r5]
   2653c:	strb	r3, [r5, #4]
   26540:	mov	r0, #2
   26544:	b	25f74 <__assert_fail@plt+0x143d0>
   26548:	ldr	r0, [pc, #240]	; 26640 <__assert_fail@plt+0x14a9c>
   2654c:	and	r0, r0, r8
   26550:	cmp	r0, #2
   26554:	moveq	r3, #18
   26558:	strbeq	r3, [r5, #4]
   2655c:	bne	261d4 <__assert_fail@plt+0x14630>
   26560:	b	25f74 <__assert_fail@plt+0x143d0>
   26564:	tst	r8, #8192	; 0x2000
   26568:	bne	261d4 <__assert_fail@plt+0x14630>
   2656c:	mov	r3, #9
   26570:	strb	r3, [r5, #4]
   26574:	mov	r0, #2
   26578:	b	25f74 <__assert_fail@plt+0x143d0>
   2657c:	bl	11964 <__ctype_b_loc@plt>
   26580:	lsl	r3, r6, #1
   26584:	ldrb	r2, [r5, #6]
   26588:	bic	r2, r2, #64	; 0x40
   2658c:	ldr	r1, [r0]
   26590:	ldrh	r3, [r1, r3]
   26594:	lsr	r3, r3, #3
   26598:	and	r3, r3, #1
   2659c:	cmp	r6, #95	; 0x5f
   265a0:	orreq	r3, r3, #1
   265a4:	orr	r3, r2, r3, lsl #6
   265a8:	strb	r3, [r5, #6]
   265ac:	b	26050 <__assert_fail@plt+0x144ac>
   265b0:	cmp	r3, #1
   265b4:	ble	265e8 <__assert_fail@plt+0x14a44>
   265b8:	ldr	r0, [r4, #8]
   265bc:	add	r1, r0, r2, lsl #2
   265c0:	ldr	r0, [r0, r2, lsl #2]
   265c4:	cmn	r0, #1
   265c8:	beq	2662c <__assert_fail@plt+0x14a88>
   265cc:	ldr	r0, [r4, #28]
   265d0:	add	r6, r6, #2
   265d4:	cmp	r0, r6
   265d8:	beq	265e8 <__assert_fail@plt+0x14a44>
   265dc:	ldr	r0, [r1, #4]
   265e0:	cmn	r0, #1
   265e4:	beq	2662c <__assert_fail@plt+0x14a88>
   265e8:	ldrb	r1, [r4, #76]	; 0x4c
   265ec:	cmp	r1, #0
   265f0:	bne	26608 <__assert_fail@plt+0x14a64>
   265f4:	ldr	r1, [r4]
   265f8:	ldr	r0, [r4, #24]
   265fc:	add	r1, r1, r2
   26600:	ldrb	r6, [r1, r0]
   26604:	b	26004 <__assert_fail@plt+0x14460>
   26608:	ldr	ip, [r4, #12]
   2660c:	ldr	r1, [r4]
   26610:	ldr	r0, [r4, #24]
   26614:	ldr	ip, [ip, r2, lsl #2]
   26618:	add	r1, r1, ip
   2661c:	ldrb	r6, [r1, r0]
   26620:	tst	r6, #128	; 0x80
   26624:	bne	26000 <__assert_fail@plt+0x1445c>
   26628:	b	26004 <__assert_fail@plt+0x14460>
   2662c:	ldrb	r6, [sl, r2]
   26630:	mov	r3, #1
   26634:	strb	r3, [r5, #4]
   26638:	strb	r6, [r5]
   2663c:	b	26020 <__assert_fail@plt+0x1447c>
   26640:	andeq	r0, r0, r2, lsl #8
   26644:	addeq	r0, r0, r8
   26648:	ldr	ip, [r1]
   2664c:	push	{r4, r5, r6, lr}
   26650:	cmp	ip, #31
   26654:	sub	sp, sp, #8
   26658:	mov	r5, r0
   2665c:	beq	266c0 <__assert_fail@plt+0x14b1c>
   26660:	lsl	r3, ip, #5
   26664:	ldr	r4, [r0]
   26668:	add	lr, ip, #1
   2666c:	add	r6, r3, #4
   26670:	add	r3, r4, r3
   26674:	mov	ip, #0
   26678:	str	lr, [r1]
   2667c:	str	ip, [r3, #4]
   26680:	str	ip, [r3, #8]
   26684:	str	ip, [r3, #12]
   26688:	ldm	r2, {r0, r1}
   2668c:	add	r2, r3, #24
   26690:	add	r4, r4, r6
   26694:	stm	r2, {r0, r1}
   26698:	ldrb	r2, [r3, #30]
   2669c:	mvn	r1, #0
   266a0:	str	ip, [r3, #16]
   266a4:	and	r2, r2, #243	; 0xf3
   266a8:	str	ip, [r3, #20]
   266ac:	strb	r2, [r3, #30]
   266b0:	str	r1, [r3, #32]
   266b4:	mov	r0, r4
   266b8:	add	sp, sp, #8
   266bc:	pop	{r4, r5, r6, pc}
   266c0:	mov	r0, #996	; 0x3e4
   266c4:	stm	sp, {r1, r2}
   266c8:	bl	36944 <__assert_fail@plt+0x24da0>
   266cc:	subs	r4, r0, #0
   266d0:	beq	266b4 <__assert_fail@plt+0x14b10>
   266d4:	ldr	r0, [r5]
   266d8:	mov	r6, #4
   266dc:	mov	lr, #1
   266e0:	mov	r3, #0
   266e4:	str	r0, [r4]
   266e8:	str	r4, [r5]
   266ec:	ldm	sp, {r1, r2}
   266f0:	b	26670 <__assert_fail@plt+0x14acc>
   266f4:	push	{r4, r5, r6, lr}
   266f8:	mov	r4, r0
   266fc:	ldr	r5, [pc, #168]	; 267ac <__assert_fail@plt+0x14c08>
   26700:	b	26708 <__assert_fail@plt+0x14b64>
   26704:	mov	r4, r3
   26708:	ldr	r3, [r4, #4]
   2670c:	cmp	r3, #0
   26710:	bne	26704 <__assert_fail@plt+0x14b60>
   26714:	ldr	r3, [r4, #8]
   26718:	cmp	r3, #0
   2671c:	bne	26704 <__assert_fail@plt+0x14b60>
   26720:	ldr	r3, [r4, #24]
   26724:	and	r3, r3, r5
   26728:	cmp	r3, #6
   2672c:	bne	26798 <__assert_fail@plt+0x14bf4>
   26730:	ldr	r6, [r4, #20]
   26734:	ldr	r0, [r6]
   26738:	bl	184ec <__assert_fail@plt+0x6948>
   2673c:	ldr	r0, [r6, #4]
   26740:	bl	184ec <__assert_fail@plt+0x6948>
   26744:	ldr	r0, [r6, #8]
   26748:	bl	184ec <__assert_fail@plt+0x6948>
   2674c:	ldr	r0, [r6, #12]
   26750:	bl	184ec <__assert_fail@plt+0x6948>
   26754:	mov	r0, r6
   26758:	bl	184ec <__assert_fail@plt+0x6948>
   2675c:	ldr	r0, [r4]
   26760:	cmp	r0, #0
   26764:	popeq	{r4, r5, r6, pc}
   26768:	ldr	r3, [r0, #8]
   2676c:	cmp	r4, r3
   26770:	cmpne	r3, #0
   26774:	moveq	r4, #1
   26778:	movne	r4, #0
   2677c:	cmp	r4, #0
   26780:	mov	r4, r0
   26784:	beq	26704 <__assert_fail@plt+0x14b60>
   26788:	ldr	r3, [r4, #24]
   2678c:	and	r3, r3, r5
   26790:	cmp	r3, #6
   26794:	beq	26730 <__assert_fail@plt+0x14b8c>
   26798:	cmp	r3, #3
   2679c:	bne	2675c <__assert_fail@plt+0x14bb8>
   267a0:	ldr	r0, [r4, #20]
   267a4:	bl	184ec <__assert_fail@plt+0x6948>
   267a8:	b	2675c <__assert_fail@plt+0x14bb8>
   267ac:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   267b0:	ldr	r2, [r0]
   267b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   267b8:	cmp	r2, #0
   267bc:	mov	r7, r0
   267c0:	beq	26820 <__assert_fail@plt+0x14c7c>
   267c4:	ldr	r0, [r0, #8]
   267c8:	cmp	r0, #0
   267cc:	beq	26820 <__assert_fail@plt+0x14c7c>
   267d0:	ldr	r5, [pc, #500]	; 269cc <__assert_fail@plt+0x14e28>
   267d4:	mov	r4, #0
   267d8:	b	267ec <__assert_fail@plt+0x14c48>
   267dc:	add	r4, r4, #1
   267e0:	cmp	r4, r0
   267e4:	bcs	26820 <__assert_fail@plt+0x14c7c>
   267e8:	ldr	r2, [r7]
   267ec:	add	r1, r2, r4, lsl #3
   267f0:	ldr	r3, [r1, #4]
   267f4:	and	r3, r3, r5
   267f8:	cmp	r3, #6
   267fc:	beq	26998 <__assert_fail@plt+0x14df4>
   26800:	cmp	r3, #3
   26804:	bne	267dc <__assert_fail@plt+0x14c38>
   26808:	ldr	r0, [r1]
   2680c:	bl	184ec <__assert_fail@plt+0x6948>
   26810:	ldr	r0, [r7, #8]
   26814:	add	r4, r4, #1
   26818:	cmp	r4, r0
   2681c:	bcc	267e8 <__assert_fail@plt+0x14c44>
   26820:	ldr	r0, [r7, #12]
   26824:	bl	184ec <__assert_fail@plt+0x6948>
   26828:	ldr	r3, [r7, #8]
   2682c:	cmp	r3, #0
   26830:	movne	r4, #0
   26834:	movne	r5, r4
   26838:	beq	26898 <__assert_fail@plt+0x14cf4>
   2683c:	ldr	r3, [r7, #24]
   26840:	add	r5, r5, #1
   26844:	cmp	r3, #0
   26848:	add	r2, r3, r4
   2684c:	beq	26858 <__assert_fail@plt+0x14cb4>
   26850:	ldr	r0, [r2, #8]
   26854:	bl	184ec <__assert_fail@plt+0x6948>
   26858:	ldr	r3, [r7, #28]
   2685c:	cmp	r3, #0
   26860:	add	r2, r3, r4
   26864:	beq	26870 <__assert_fail@plt+0x14ccc>
   26868:	ldr	r0, [r2, #8]
   2686c:	bl	184ec <__assert_fail@plt+0x6948>
   26870:	ldr	r3, [r7, #20]
   26874:	cmp	r3, #0
   26878:	add	r2, r3, r4
   2687c:	beq	26888 <__assert_fail@plt+0x14ce4>
   26880:	ldr	r0, [r2, #8]
   26884:	bl	184ec <__assert_fail@plt+0x6948>
   26888:	ldr	r3, [r7, #8]
   2688c:	add	r4, r4, #12
   26890:	cmp	r3, r5
   26894:	bhi	2683c <__assert_fail@plt+0x14c98>
   26898:	ldr	r0, [r7, #20]
   2689c:	bl	184ec <__assert_fail@plt+0x6948>
   268a0:	ldr	r0, [r7, #24]
   268a4:	bl	184ec <__assert_fail@plt+0x6948>
   268a8:	ldr	r0, [r7, #28]
   268ac:	bl	184ec <__assert_fail@plt+0x6948>
   268b0:	ldr	r0, [r7]
   268b4:	bl	184ec <__assert_fail@plt+0x6948>
   268b8:	ldr	r0, [r7, #32]
   268bc:	cmp	r0, #0
   268c0:	beq	2696c <__assert_fail@plt+0x14dc8>
   268c4:	mov	r8, #0
   268c8:	mov	r9, r8
   268cc:	ldr	r3, [r0, r8]
   268d0:	add	r6, r0, r8
   268d4:	cmp	r3, #0
   268d8:	movgt	r5, #0
   268dc:	ble	26948 <__assert_fail@plt+0x14da4>
   268e0:	ldr	r3, [r6, #8]
   268e4:	ldr	r4, [r3, r5, lsl #2]
   268e8:	add	r5, r5, #1
   268ec:	ldr	r0, [r4, #24]
   268f0:	bl	184ec <__assert_fail@plt+0x6948>
   268f4:	ldr	r0, [r4, #36]	; 0x24
   268f8:	bl	184ec <__assert_fail@plt+0x6948>
   268fc:	ldr	r3, [r4, #40]	; 0x28
   26900:	add	r2, r4, #4
   26904:	cmp	r3, r2
   26908:	beq	2691c <__assert_fail@plt+0x14d78>
   2690c:	ldr	r0, [r3, #8]
   26910:	bl	184ec <__assert_fail@plt+0x6948>
   26914:	ldr	r0, [r4, #40]	; 0x28
   26918:	bl	184ec <__assert_fail@plt+0x6948>
   2691c:	ldr	r0, [r4, #12]
   26920:	bl	184ec <__assert_fail@plt+0x6948>
   26924:	ldr	r0, [r4, #48]	; 0x30
   26928:	bl	184ec <__assert_fail@plt+0x6948>
   2692c:	ldr	r0, [r4, #44]	; 0x2c
   26930:	bl	184ec <__assert_fail@plt+0x6948>
   26934:	mov	r0, r4
   26938:	bl	184ec <__assert_fail@plt+0x6948>
   2693c:	ldr	r3, [r6]
   26940:	cmp	r3, r5
   26944:	bgt	268e0 <__assert_fail@plt+0x14d3c>
   26948:	ldr	r0, [r6, #8]
   2694c:	bl	184ec <__assert_fail@plt+0x6948>
   26950:	ldr	r3, [r7, #68]	; 0x44
   26954:	add	r9, r9, #1
   26958:	cmp	r3, r9
   2695c:	add	r8, r8, #12
   26960:	ldrcs	r0, [r7, #32]
   26964:	bcs	268cc <__assert_fail@plt+0x14d28>
   26968:	ldr	r0, [r7, #32]
   2696c:	bl	184ec <__assert_fail@plt+0x6948>
   26970:	ldr	r0, [r7, #60]	; 0x3c
   26974:	ldr	r3, [pc, #84]	; 269d0 <__assert_fail@plt+0x14e2c>
   26978:	cmp	r0, r3
   2697c:	beq	26984 <__assert_fail@plt+0x14de0>
   26980:	bl	184ec <__assert_fail@plt+0x6948>
   26984:	ldr	r0, [r7, #132]	; 0x84
   26988:	bl	184ec <__assert_fail@plt+0x6948>
   2698c:	mov	r0, r7
   26990:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   26994:	b	184ec <__assert_fail@plt+0x6948>
   26998:	ldr	r6, [r2, r4, lsl #3]
   2699c:	ldr	r0, [r6]
   269a0:	bl	184ec <__assert_fail@plt+0x6948>
   269a4:	ldr	r0, [r6, #4]
   269a8:	bl	184ec <__assert_fail@plt+0x6948>
   269ac:	ldr	r0, [r6, #8]
   269b0:	bl	184ec <__assert_fail@plt+0x6948>
   269b4:	ldr	r0, [r6, #12]
   269b8:	bl	184ec <__assert_fail@plt+0x6948>
   269bc:	mov	r0, r6
   269c0:	bl	184ec <__assert_fail@plt+0x6948>
   269c4:	ldr	r0, [r7, #8]
   269c8:	b	267dc <__assert_fail@plt+0x14c38>
   269cc:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   269d0:	muleq	r3, r0, r0
   269d4:	ldr	r3, [pc, #96]	; 26a3c <__assert_fail@plt+0x14e98>
   269d8:	ldr	r2, [r1, #24]
   269dc:	push	{r4, lr}
   269e0:	and	r3, r3, r2
   269e4:	cmp	r3, #6
   269e8:	beq	26a0c <__assert_fail@plt+0x14e68>
   269ec:	cmp	r3, #3
   269f0:	beq	269fc <__assert_fail@plt+0x14e58>
   269f4:	mov	r0, #0
   269f8:	pop	{r4, pc}
   269fc:	ldr	r0, [r1, #20]
   26a00:	bl	184ec <__assert_fail@plt+0x6948>
   26a04:	mov	r0, #0
   26a08:	pop	{r4, pc}
   26a0c:	ldr	r4, [r1, #20]
   26a10:	ldr	r0, [r4]
   26a14:	bl	184ec <__assert_fail@plt+0x6948>
   26a18:	ldr	r0, [r4, #4]
   26a1c:	bl	184ec <__assert_fail@plt+0x6948>
   26a20:	ldr	r0, [r4, #8]
   26a24:	bl	184ec <__assert_fail@plt+0x6948>
   26a28:	ldr	r0, [r4, #12]
   26a2c:	bl	184ec <__assert_fail@plt+0x6948>
   26a30:	mov	r0, r4
   26a34:	bl	184ec <__assert_fail@plt+0x6948>
   26a38:	b	269f4 <__assert_fail@plt+0x14e50>
   26a3c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   26a40:	push	{r4, r5, r6, r7, r8, r9, lr}
   26a44:	sub	sp, sp, #12
   26a48:	mov	r5, r0
   26a4c:	ldr	r6, [sp, #40]	; 0x28
   26a50:	mov	r4, r1
   26a54:	mov	r9, r2
   26a58:	mov	r8, r3
   26a5c:	mov	r7, #0
   26a60:	ldr	r0, [r4, #4]
   26a64:	cmp	r0, #0
   26a68:	ble	26ac4 <__assert_fail@plt+0x14f20>
   26a6c:	ldr	ip, [r4, #8]
   26a70:	sub	r0, r0, #1
   26a74:	mov	r1, r7
   26a78:	cmp	r1, r0
   26a7c:	bcs	26ab8 <__assert_fail@plt+0x14f14>
   26a80:	add	r2, r1, r0
   26a84:	lsr	r2, r2, #1
   26a88:	ldr	r3, [ip, r2, lsl #2]
   26a8c:	cmp	r9, r3
   26a90:	ble	26aa8 <__assert_fail@plt+0x14f04>
   26a94:	b	26b28 <__assert_fail@plt+0x14f84>
   26a98:	ldr	r0, [ip, r3, lsl #2]
   26a9c:	cmp	r9, r0
   26aa0:	bgt	26b30 <__assert_fail@plt+0x14f8c>
   26aa4:	mov	r2, r3
   26aa8:	add	r3, r2, r1
   26aac:	cmp	r2, r1
   26ab0:	lsr	r3, r3, #1
   26ab4:	bhi	26a98 <__assert_fail@plt+0x14ef4>
   26ab8:	ldr	r3, [ip, r1, lsl #2]
   26abc:	cmp	r9, r3
   26ac0:	beq	26b58 <__assert_fail@plt+0x14fb4>
   26ac4:	ldr	r3, [r5]
   26ac8:	add	r2, r3, r9, lsl #3
   26acc:	ldrb	r2, [r2, #4]
   26ad0:	cmp	r2, r6
   26ad4:	bne	26ae4 <__assert_fail@plt+0x14f40>
   26ad8:	ldr	r3, [r3, r9, lsl #3]
   26adc:	cmp	r8, r3
   26ae0:	beq	26b3c <__assert_fail@plt+0x14f98>
   26ae4:	mov	r1, r9
   26ae8:	mov	r0, r4
   26aec:	bl	23828 <__assert_fail@plt+0x11c84>
   26af0:	cmp	r0, #0
   26af4:	beq	26b94 <__assert_fail@plt+0x14ff0>
   26af8:	add	r9, r9, r9, lsl #1
   26afc:	ldr	r3, [r5, #20]
   26b00:	lsl	r9, r9, #2
   26b04:	add	r3, r3, r9
   26b08:	ldr	r2, [r3, #4]
   26b0c:	cmp	r2, #0
   26b10:	beq	26b58 <__assert_fail@plt+0x14fb4>
   26b14:	cmp	r2, #2
   26b18:	beq	26b64 <__assert_fail@plt+0x14fc0>
   26b1c:	ldr	r3, [r3, #8]
   26b20:	ldr	r9, [r3]
   26b24:	b	26a60 <__assert_fail@plt+0x14ebc>
   26b28:	mov	r3, r2
   26b2c:	mov	r2, r0
   26b30:	add	r1, r3, #1
   26b34:	mov	r0, r2
   26b38:	b	26a78 <__assert_fail@plt+0x14ed4>
   26b3c:	cmp	r6, #9
   26b40:	bne	26b58 <__assert_fail@plt+0x14fb4>
   26b44:	mov	r1, r9
   26b48:	mov	r0, r4
   26b4c:	bl	23828 <__assert_fail@plt+0x11c84>
   26b50:	cmp	r0, #0
   26b54:	beq	26b94 <__assert_fail@plt+0x14ff0>
   26b58:	mov	r0, #0
   26b5c:	add	sp, sp, #12
   26b60:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26b64:	ldr	r2, [r3, #8]
   26b68:	mov	r1, r4
   26b6c:	mov	r3, r8
   26b70:	ldr	r2, [r2, #4]
   26b74:	mov	r0, r5
   26b78:	str	r6, [sp]
   26b7c:	bl	26a40 <__assert_fail@plt+0x14e9c>
   26b80:	cmp	r0, #0
   26b84:	bne	26b5c <__assert_fail@plt+0x14fb8>
   26b88:	ldr	r3, [r5, #20]
   26b8c:	add	r3, r3, r9
   26b90:	b	26b1c <__assert_fail@plt+0x14f78>
   26b94:	mov	r0, #12
   26b98:	add	sp, sp, #12
   26b9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   26ba0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ba4:	sub	sp, sp, #20
   26ba8:	ldr	r8, [pc, #940]	; 26f5c <__assert_fail@plt+0x153b8>
   26bac:	ldr	fp, [sp, #56]	; 0x38
   26bb0:	mov	r7, r1
   26bb4:	mov	r5, r0
   26bb8:	mov	r4, r2
   26bbc:	lsl	r6, r1, #3
   26bc0:	str	r3, [sp, #8]
   26bc4:	ldr	lr, [r5]
   26bc8:	add	r6, lr, r6
   26bcc:	ldrb	r3, [r6, #4]
   26bd0:	cmp	r3, #4
   26bd4:	beq	26e68 <__assert_fail@plt+0x152c4>
   26bd8:	add	sl, r7, r7, lsl #1
   26bdc:	ldr	r0, [r5, #20]
   26be0:	lsl	sl, sl, #2
   26be4:	add	ip, r0, sl
   26be8:	ldr	r3, [ip, #4]
   26bec:	cmp	r3, #0
   26bf0:	beq	26f30 <__assert_fail@plt+0x1538c>
   26bf4:	cmp	r3, #1
   26bf8:	beq	26dfc <__assert_fail@plt+0x15258>
   26bfc:	ldr	r2, [r5, #8]
   26c00:	add	r4, r4, r4, lsl #1
   26c04:	sub	r1, r2, #1
   26c08:	cmp	r1, #0
   26c0c:	add	r3, lr, r1, lsl #3
   26c10:	lsl	r9, r4, #2
   26c14:	ldrb	r6, [r3, #6]
   26c18:	ldr	r4, [ip, #8]
   26c1c:	add	r0, r0, r9
   26c20:	movle	ip, #0
   26c24:	movgt	ip, #1
   26c28:	ands	ip, ip, r6, lsr #2
   26c2c:	mov	ip, #0
   26c30:	ldr	r4, [r4]
   26c34:	str	ip, [r0, #4]
   26c38:	beq	26d48 <__assert_fail@plt+0x151a4>
   26c3c:	ldr	ip, [r5, #16]
   26c40:	rsb	r7, r3, r2, lsl #3
   26c44:	sub	r7, r7, #16
   26c48:	add	r2, ip, r2, lsl #2
   26c4c:	b	26c70 <__assert_fail@plt+0x150cc>
   26c50:	add	r3, lr, r6
   26c54:	sub	r1, r1, #1
   26c58:	ldrb	r6, [r3, #6]
   26c5c:	cmp	r1, #0
   26c60:	movle	ip, #0
   26c64:	movgt	ip, #1
   26c68:	ands	ip, ip, r6, lsr #2
   26c6c:	beq	26d48 <__assert_fail@plt+0x151a4>
   26c70:	ldr	ip, [r2, #-4]!
   26c74:	add	r6, r3, r7
   26c78:	cmp	r4, ip
   26c7c:	bne	26c50 <__assert_fail@plt+0x150ac>
   26c80:	ldr	r3, [r3, #4]
   26c84:	and	r3, r8, r3, lsr #8
   26c88:	cmp	fp, r3
   26c8c:	bne	26c50 <__assert_fail@plt+0x150ac>
   26c90:	bl	23828 <__assert_fail@plt+0x11c84>
   26c94:	cmp	r0, #0
   26c98:	beq	26d3c <__assert_fail@plt+0x15198>
   26c9c:	ldr	r2, [r5, #20]
   26ca0:	ldr	r3, [r5]
   26ca4:	add	sl, r2, sl
   26ca8:	mov	r0, r5
   26cac:	ldr	r2, [sl, #8]
   26cb0:	ldr	r7, [r2, #4]
   26cb4:	lsl	r6, r7, #3
   26cb8:	add	r3, r3, r6
   26cbc:	ldm	r3, {r1, r2}
   26cc0:	bl	23674 <__assert_fail@plt+0x11ad0>
   26cc4:	cmn	r0, #1
   26cc8:	mov	r4, r0
   26ccc:	beq	26d3c <__assert_fail@plt+0x15198>
   26cd0:	ldr	r1, [r5]
   26cd4:	ldr	lr, [pc, #644]	; 26f60 <__assert_fail@plt+0x153bc>
   26cd8:	add	r2, r1, r4, lsl #3
   26cdc:	and	r0, fp, r8
   26ce0:	ldr	r3, [r2, #4]
   26ce4:	add	ip, r1, r6
   26ce8:	bic	r3, r3, lr
   26cec:	orr	r3, r3, r0, lsl #8
   26cf0:	str	r3, [r2, #4]
   26cf4:	ldr	ip, [ip, #4]
   26cf8:	bic	r3, r3, lr
   26cfc:	mov	r1, r4
   26d00:	and	ip, r8, ip, lsr #8
   26d04:	orr	r0, r0, ip
   26d08:	orr	r3, r3, r0, lsl #8
   26d0c:	str	r3, [r2, #4]
   26d10:	lsr	r3, r3, #16
   26d14:	uxtb	r3, r3
   26d18:	orr	r3, r3, #4
   26d1c:	strb	r3, [r2, #6]
   26d20:	ldr	r3, [r5, #16]
   26d24:	ldr	r0, [r5, #20]
   26d28:	str	r7, [r3, r4, lsl #2]
   26d2c:	add	r0, r0, r9
   26d30:	bl	23828 <__assert_fail@plt+0x11c84>
   26d34:	cmp	r0, #0
   26d38:	bne	26bc4 <__assert_fail@plt+0x15020>
   26d3c:	mov	r0, #12
   26d40:	add	sp, sp, #20
   26d44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26d48:	lsl	r6, r4, #3
   26d4c:	add	lr, lr, r6
   26d50:	mov	r0, r5
   26d54:	ldm	lr, {r1, r2}
   26d58:	bl	23674 <__assert_fail@plt+0x11ad0>
   26d5c:	cmn	r0, #1
   26d60:	mov	r7, r0
   26d64:	beq	26d3c <__assert_fail@plt+0x15198>
   26d68:	ldr	r3, [r5]
   26d6c:	ldr	ip, [pc, #492]	; 26f60 <__assert_fail@plt+0x153bc>
   26d70:	add	r2, r3, r7, lsl #3
   26d74:	add	r6, r3, r6
   26d78:	ldr	r3, [r2, #4]
   26d7c:	and	r0, fp, r8
   26d80:	bic	r3, r3, ip
   26d84:	orr	r3, r3, r0, lsl #8
   26d88:	str	r3, [r2, #4]
   26d8c:	ldr	ip, [r6, #4]
   26d90:	ldr	lr, [pc, #456]	; 26f60 <__assert_fail@plt+0x153bc>
   26d94:	mov	r1, r7
   26d98:	and	ip, r8, ip, lsr #8
   26d9c:	orr	r0, r0, ip
   26da0:	bic	r3, r3, lr
   26da4:	orr	r3, r3, r0, lsl #8
   26da8:	str	r3, [r2, #4]
   26dac:	lsr	r3, r3, #16
   26db0:	uxtb	r3, r3
   26db4:	orr	r3, r3, #4
   26db8:	strb	r3, [r2, #6]
   26dbc:	ldr	r3, [r5, #16]
   26dc0:	ldr	r0, [r5, #20]
   26dc4:	str	r4, [r3, r7, lsl #2]
   26dc8:	add	r0, r0, r9
   26dcc:	bl	23828 <__assert_fail@plt+0x11c84>
   26dd0:	cmp	r0, #0
   26dd4:	beq	26d3c <__assert_fail@plt+0x15198>
   26dd8:	str	fp, [sp]
   26ddc:	mov	r2, r7
   26de0:	mov	r1, r4
   26de4:	ldr	r3, [sp, #8]
   26de8:	mov	r0, r5
   26dec:	bl	26ba0 <__assert_fail@plt+0x14ffc>
   26df0:	cmp	r0, #0
   26df4:	beq	26c9c <__assert_fail@plt+0x150f8>
   26df8:	b	26d40 <__assert_fail@plt+0x1519c>
   26dfc:	add	r9, r4, r4, lsl #1
   26e00:	ldr	r3, [ip, #8]
   26e04:	ldr	r2, [sp, #8]
   26e08:	cmp	r7, r4
   26e0c:	lsl	r9, r9, #2
   26e10:	sub	r2, r7, r2
   26e14:	add	r0, r0, r9
   26e18:	clz	r2, r2
   26e1c:	lsr	r2, r2, #5
   26e20:	moveq	r2, #0
   26e24:	ldr	r7, [r3]
   26e28:	cmp	r2, #0
   26e2c:	mov	r3, #0
   26e30:	str	r3, [r0, #4]
   26e34:	bne	26f44 <__assert_fail@plt+0x153a0>
   26e38:	ldr	r3, [r6, #4]
   26e3c:	lsl	r6, r7, #3
   26e40:	add	lr, lr, r6
   26e44:	and	r3, r8, r3, lsr #8
   26e48:	ldm	lr, {r1, r2}
   26e4c:	mov	r0, r5
   26e50:	orr	fp, fp, r3
   26e54:	bl	23674 <__assert_fail@plt+0x11ad0>
   26e58:	cmn	r0, #1
   26e5c:	mov	r4, r0
   26e60:	bne	26cd0 <__assert_fail@plt+0x1512c>
   26e64:	b	26d3c <__assert_fail@plt+0x15198>
   26e68:	ldr	r3, [r5, #12]
   26e6c:	lsl	sl, r7, #2
   26e70:	add	r9, r4, r4, lsl #1
   26e74:	ldr	r7, [r3, r7, lsl #2]
   26e78:	ldr	r3, [r5, #20]
   26e7c:	lsl	r9, r9, #2
   26e80:	lsl	r6, r7, #3
   26e84:	add	lr, lr, r6
   26e88:	add	r3, r3, r9
   26e8c:	mov	r0, #0
   26e90:	ldm	lr, {r1, r2}
   26e94:	str	r0, [r3, #4]
   26e98:	mov	r0, r5
   26e9c:	str	r4, [sp, #12]
   26ea0:	bl	23674 <__assert_fail@plt+0x11ad0>
   26ea4:	cmn	r0, #1
   26ea8:	mov	r4, r0
   26eac:	beq	26d3c <__assert_fail@plt+0x15198>
   26eb0:	ldr	ip, [r5]
   26eb4:	ldr	lr, [pc, #164]	; 26f60 <__assert_fail@plt+0x153bc>
   26eb8:	add	r0, ip, r0, lsl #3
   26ebc:	and	r2, fp, r8
   26ec0:	ldr	r3, [r0, #4]
   26ec4:	add	ip, ip, r6
   26ec8:	bic	r3, r3, lr
   26ecc:	orr	r3, r3, r2, lsl #8
   26ed0:	str	r3, [r0, #4]
   26ed4:	ldr	ip, [ip, #4]
   26ed8:	bic	r3, r3, lr
   26edc:	mov	r1, r4
   26ee0:	and	ip, r8, ip, lsr #8
   26ee4:	orr	r2, r2, ip
   26ee8:	orr	r3, r3, r2, lsl #8
   26eec:	str	r3, [r0, #4]
   26ef0:	lsr	r3, r3, #16
   26ef4:	uxtb	r3, r3
   26ef8:	orr	r3, r3, #4
   26efc:	strb	r3, [r0, #6]
   26f00:	ldr	r2, [r5, #16]
   26f04:	ldr	r3, [r5, #12]
   26f08:	ldr	ip, [sp, #12]
   26f0c:	ldr	r0, [r5, #20]
   26f10:	str	r7, [r2, r4, lsl #2]
   26f14:	ldr	r2, [r3, sl]
   26f18:	add	r0, r0, r9
   26f1c:	str	r2, [r3, ip, lsl #2]
   26f20:	bl	23828 <__assert_fail@plt+0x11c84>
   26f24:	cmp	r0, #0
   26f28:	bne	26bc4 <__assert_fail@plt+0x15020>
   26f2c:	b	26d3c <__assert_fail@plt+0x15198>
   26f30:	ldr	r2, [r5, #12]
   26f34:	mov	r0, r3
   26f38:	ldr	r3, [r2, r7, lsl #2]
   26f3c:	str	r3, [r2, r4, lsl #2]
   26f40:	b	26d40 <__assert_fail@plt+0x1519c>
   26f44:	mov	r1, r7
   26f48:	bl	23828 <__assert_fail@plt+0x11c84>
   26f4c:	cmp	r0, #0
   26f50:	movne	r0, #0
   26f54:	bne	26d40 <__assert_fail@plt+0x1519c>
   26f58:	b	26d3c <__assert_fail@plt+0x15198>
   26f5c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   26f60:	andeq	pc, r3, r0, lsl #30
   26f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f68:	add	r8, r2, r2, lsl #1
   26f6c:	mov	r4, r2
   26f70:	ldr	r2, [r1, #20]
   26f74:	lsl	r8, r8, #2
   26f78:	add	r2, r2, r8
   26f7c:	mov	r7, r1
   26f80:	ldr	r1, [r2, #4]
   26f84:	sub	sp, sp, #44	; 0x2c
   26f88:	add	r1, r1, #1
   26f8c:	str	r0, [sp, #8]
   26f90:	mov	r2, #0
   26f94:	lsl	r0, r1, #2
   26f98:	str	r3, [sp, #12]
   26f9c:	str	r1, [sp, #16]
   26fa0:	str	r2, [sp, #20]
   26fa4:	bl	36944 <__assert_fail@plt+0x24da0>
   26fa8:	cmp	r0, #0
   26fac:	str	r0, [sp, #24]
   26fb0:	beq	271d0 <__assert_fail@plt+0x1562c>
   26fb4:	ldr	r6, [r7]
   26fb8:	ldr	r3, [sp, #20]
   26fbc:	lsl	r5, r4, #3
   26fc0:	add	lr, r6, r5
   26fc4:	str	r4, [r0, r3, lsl #2]
   26fc8:	ldr	r1, [r7, #24]
   26fcc:	ldr	r0, [lr, #4]
   26fd0:	ldr	r2, [pc, #520]	; 271e0 <__assert_fail@plt+0x1563c>
   26fd4:	add	ip, r1, r8
   26fd8:	and	r2, r2, r0
   26fdc:	add	r3, r3, #1
   26fe0:	cmp	r2, #0
   26fe4:	mvn	r2, #0
   26fe8:	str	r3, [sp, #20]
   26fec:	str	r2, [ip, #4]
   26ff0:	beq	27020 <__assert_fail@plt+0x1547c>
   26ff4:	ldr	r3, [r7, #20]
   26ff8:	add	r3, r3, r8
   26ffc:	ldr	r2, [r3, #4]
   27000:	cmp	r2, #0
   27004:	beq	27134 <__assert_fail@plt+0x15590>
   27008:	ldr	r3, [r3, #8]
   2700c:	ldr	r3, [r3]
   27010:	add	r6, r6, r3, lsl #3
   27014:	ldrb	r3, [r6, #6]
   27018:	tst	r3, #4
   2701c:	beq	27198 <__assert_fail@plt+0x155f4>
   27020:	ldrb	r3, [lr, #4]
   27024:	tst	r3, #8
   27028:	beq	27130 <__assert_fail@plt+0x1558c>
   2702c:	ldr	ip, [r7, #20]
   27030:	add	r3, ip, r8
   27034:	ldr	r2, [r3, #4]
   27038:	cmp	r2, #0
   2703c:	ble	27130 <__assert_fail@plt+0x1558c>
   27040:	mov	sl, #0
   27044:	mov	r5, sl
   27048:	mov	fp, #1
   2704c:	add	r9, sp, #28
   27050:	b	270bc <__assert_fail@plt+0x15518>
   27054:	ldm	r3, {r0, r1, r2}
   27058:	stm	r9, {r0, r1, r2}
   2705c:	ldr	r3, [sp, #32]
   27060:	cmp	r3, #0
   27064:	beq	27090 <__assert_fail@plt+0x154ec>
   27068:	ldr	r2, [sp, #20]
   2706c:	ldr	r1, [sp, #16]
   27070:	add	r2, r2, r3, lsl #1
   27074:	cmp	r1, r2
   27078:	blt	27170 <__assert_fail@plt+0x155cc>
   2707c:	mov	r1, r9
   27080:	add	r0, sp, #16
   27084:	bl	23dac <__assert_fail@plt+0x12208>
   27088:	cmp	r0, #0
   2708c:	bne	27100 <__assert_fail@plt+0x1555c>
   27090:	ldr	r1, [r7, #24]
   27094:	add	r4, r1, r4
   27098:	ldr	r3, [r4, #4]
   2709c:	cmp	r3, #0
   270a0:	beq	2715c <__assert_fail@plt+0x155b8>
   270a4:	ldr	ip, [r7, #20]
   270a8:	add	r3, ip, r8
   270ac:	add	r5, r5, #1
   270b0:	ldr	r2, [r3, #4]
   270b4:	cmp	r2, r5
   270b8:	ble	27110 <__assert_fail@plt+0x1556c>
   270bc:	ldr	r3, [r3, #8]
   270c0:	ldr	r2, [r3, r5, lsl #2]
   270c4:	add	r4, r2, r2, lsl #1
   270c8:	lsl	r4, r4, #2
   270cc:	add	r3, r1, r4
   270d0:	ldr	r0, [r3, #4]
   270d4:	cmn	r0, #1
   270d8:	moveq	sl, fp
   270dc:	beq	270a8 <__assert_fail@plt+0x15504>
   270e0:	cmp	r0, #0
   270e4:	bne	27054 <__assert_fail@plt+0x154b0>
   270e8:	mov	r3, #0
   270ec:	mov	r1, r7
   270f0:	mov	r0, r9
   270f4:	bl	26f64 <__assert_fail@plt+0x153c0>
   270f8:	cmp	r0, #0
   270fc:	beq	2705c <__assert_fail@plt+0x154b8>
   27100:	mov	r3, r0
   27104:	mov	r0, r3
   27108:	add	sp, sp, #44	; 0x2c
   2710c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27110:	ldr	r3, [sp, #12]
   27114:	eor	r3, r3, #1
   27118:	tst	sl, r3
   2711c:	addne	r8, r1, r8
   27120:	movne	r3, #0
   27124:	strne	r3, [r8, #4]
   27128:	addne	lr, sp, #16
   2712c:	bne	27140 <__assert_fail@plt+0x1559c>
   27130:	add	ip, r1, r8
   27134:	add	lr, sp, #16
   27138:	ldm	lr, {r0, r1, r2}
   2713c:	stm	ip, {r0, r1, r2}
   27140:	mov	r3, #0
   27144:	ldm	lr, {r0, r1, r2}
   27148:	ldr	ip, [sp, #8]
   2714c:	stm	ip, {r0, r1, r2}
   27150:	mov	r0, r3
   27154:	add	sp, sp, #44	; 0x2c
   27158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2715c:	ldr	r0, [sp, #36]	; 0x24
   27160:	bl	184ec <__assert_fail@plt+0x6948>
   27164:	mov	sl, fp
   27168:	ldr	r1, [r7, #24]
   2716c:	b	270a4 <__assert_fail@plt+0x15500>
   27170:	add	r3, r1, r3
   27174:	ldr	r0, [sp, #24]
   27178:	lsl	r1, r3, #3
   2717c:	lsl	r6, r3, #1
   27180:	bl	36970 <__assert_fail@plt+0x24dcc>
   27184:	cmp	r0, #0
   27188:	beq	271d0 <__assert_fail@plt+0x1562c>
   2718c:	str	r0, [sp, #24]
   27190:	str	r6, [sp, #16]
   27194:	b	2707c <__assert_fail@plt+0x154d8>
   27198:	ldr	r2, [pc, #68]	; 271e4 <__assert_fail@plt+0x15640>
   2719c:	mov	r3, r4
   271a0:	and	r0, r2, r0, lsr #8
   271a4:	str	r0, [sp]
   271a8:	mov	r2, r4
   271ac:	mov	r1, r4
   271b0:	mov	r0, r7
   271b4:	bl	26ba0 <__assert_fail@plt+0x14ffc>
   271b8:	subs	r3, r0, #0
   271bc:	bne	27150 <__assert_fail@plt+0x155ac>
   271c0:	ldr	lr, [r7]
   271c4:	ldr	r1, [r7, #24]
   271c8:	add	lr, lr, r5
   271cc:	b	27020 <__assert_fail@plt+0x1547c>
   271d0:	mov	r3, #12
   271d4:	mov	r0, r3
   271d8:	add	sp, sp, #44	; 0x2c
   271dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271e0:	andeq	pc, r3, r0, lsl #30
   271e4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   271e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   271ec:	mov	r8, r1
   271f0:	ldr	r1, [r1, #4]
   271f4:	sub	sp, sp, #24
   271f8:	mov	r6, #0
   271fc:	mov	r7, r0
   27200:	lsl	r0, r1, #2
   27204:	mov	r5, r2
   27208:	mov	r4, r3
   2720c:	str	r1, [sp, #12]
   27210:	str	r6, [sp, #16]
   27214:	bl	36944 <__assert_fail@plt+0x24da0>
   27218:	cmp	r0, r6
   2721c:	str	r0, [sp, #20]
   27220:	beq	27350 <__assert_fail@plt+0x157ac>
   27224:	ldr	r1, [r8, #4]
   27228:	ldr	r0, [r8, #8]
   2722c:	cmp	r1, r6
   27230:	ble	272c8 <__assert_fail@plt+0x15724>
   27234:	ldr	r2, [r0, r6, lsl #2]
   27238:	ldr	r9, [r7, #24]
   2723c:	add	r3, r2, r2, lsl #1
   27240:	add	r9, r9, r3, lsl #2
   27244:	ldr	sl, [r9, #4]
   27248:	cmp	sl, #0
   2724c:	ble	272e8 <__assert_fail@plt+0x15744>
   27250:	ldr	r0, [r9, #8]
   27254:	ldr	lr, [r7]
   27258:	sub	r0, r0, #4
   2725c:	mov	r3, #0
   27260:	b	2726c <__assert_fail@plt+0x156c8>
   27264:	cmp	sl, r3
   27268:	beq	272ec <__assert_fail@plt+0x15748>
   2726c:	ldr	r1, [r0, #4]!
   27270:	add	r3, r3, #1
   27274:	add	ip, lr, r1, lsl #3
   27278:	ldrb	ip, [ip, #4]
   2727c:	cmp	r4, ip
   27280:	bne	27264 <__assert_fail@plt+0x156c0>
   27284:	ldr	ip, [lr, r1, lsl #3]
   27288:	cmp	r5, ip
   2728c:	bne	27264 <__assert_fail@plt+0x156c0>
   27290:	cmn	r1, #1
   27294:	beq	272ec <__assert_fail@plt+0x15748>
   27298:	str	r4, [sp]
   2729c:	mov	r3, r5
   272a0:	add	r1, sp, #12
   272a4:	mov	r0, r7
   272a8:	bl	26a40 <__assert_fail@plt+0x14e9c>
   272ac:	subs	r9, r0, #0
   272b0:	bne	27314 <__assert_fail@plt+0x15770>
   272b4:	ldr	r0, [r8, #8]
   272b8:	ldr	r1, [r8, #4]
   272bc:	add	r6, r6, #1
   272c0:	cmp	r6, r1
   272c4:	blt	27234 <__assert_fail@plt+0x15690>
   272c8:	bl	184ec <__assert_fail@plt+0x6948>
   272cc:	add	r3, sp, #24
   272d0:	mov	r9, #0
   272d4:	ldmdb	r3, {r0, r1, r2}
   272d8:	stm	r8, {r0, r1, r2}
   272dc:	mov	r0, r9
   272e0:	add	sp, sp, #24
   272e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   272e8:	beq	272bc <__assert_fail@plt+0x15718>
   272ec:	ldr	r3, [sp, #16]
   272f0:	ldr	r2, [sp, #12]
   272f4:	add	r3, r3, sl, lsl #1
   272f8:	cmp	r2, r3
   272fc:	blt	27328 <__assert_fail@plt+0x15784>
   27300:	mov	r1, r9
   27304:	add	r0, sp, #12
   27308:	bl	23dac <__assert_fail@plt+0x12208>
   2730c:	subs	r9, r0, #0
   27310:	beq	272b4 <__assert_fail@plt+0x15710>
   27314:	ldr	r0, [sp, #20]
   27318:	bl	184ec <__assert_fail@plt+0x6948>
   2731c:	mov	r0, r9
   27320:	add	sp, sp, #24
   27324:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27328:	add	r2, sl, r2
   2732c:	ldr	r0, [sp, #20]
   27330:	lsl	r1, r2, #3
   27334:	lsl	sl, r2, #1
   27338:	bl	36970 <__assert_fail@plt+0x24dcc>
   2733c:	cmp	r0, #0
   27340:	beq	27360 <__assert_fail@plt+0x157bc>
   27344:	str	r0, [sp, #20]
   27348:	str	sl, [sp, #12]
   2734c:	b	27300 <__assert_fail@plt+0x1575c>
   27350:	mov	r9, #12
   27354:	mov	r0, r9
   27358:	add	sp, sp, #24
   2735c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   27360:	mov	r9, #12
   27364:	b	27314 <__assert_fail@plt+0x15770>
   27368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2736c:	sub	sp, sp, #172	; 0xac
   27370:	mov	ip, r3
   27374:	str	r0, [sp, #64]	; 0x40
   27378:	ldr	r0, [r0, #84]	; 0x54
   2737c:	str	r3, [sp, #152]	; 0x98
   27380:	mov	r3, r0
   27384:	str	r0, [sp, #120]	; 0x78
   27388:	ldr	r3, [r3, #24]
   2738c:	add	r0, ip, ip, lsl #1
   27390:	str	r1, [sp, #20]
   27394:	add	r3, r3, r0, lsl #2
   27398:	str	r3, [sp, #124]	; 0x7c
   2739c:	ldr	r3, [r3, #4]
   273a0:	cmp	r3, #0
   273a4:	ble	27444 <__assert_fail@plt+0x158a0>
   273a8:	mov	fp, r2
   273ac:	ldr	r2, [sp, #208]	; 0xd0
   273b0:	mov	r1, #1
   273b4:	add	r2, r2, r2, lsl r1
   273b8:	lsl	r1, r1, fp
   273bc:	lsl	r2, r2, #3
   273c0:	str	r2, [sp, #44]	; 0x2c
   273c4:	add	r2, r2, #24
   273c8:	str	r2, [sp, #96]	; 0x60
   273cc:	ldr	r2, [sp, #20]
   273d0:	str	r1, [sp, #24]
   273d4:	mvn	r1, r1
   273d8:	str	r1, [sp, #36]	; 0x24
   273dc:	and	r1, r2, #2
   273e0:	and	r2, r2, #1
   273e4:	str	r2, [sp, #32]
   273e8:	mov	r2, #0
   273ec:	str	r1, [sp, #16]
   273f0:	str	r2, [sp, #108]	; 0x6c
   273f4:	ldr	r2, [sp, #124]	; 0x7c
   273f8:	ldr	r0, [sp, #108]	; 0x6c
   273fc:	ldr	r1, [r2, #8]
   27400:	ldr	r2, [sp, #120]	; 0x78
   27404:	ldr	r1, [r1, r0, lsl #2]
   27408:	ldr	r2, [r2]
   2740c:	str	r1, [sp, #100]	; 0x64
   27410:	add	r1, r2, r1, lsl #3
   27414:	ldrb	r1, [r1, #4]
   27418:	cmp	r1, #8
   2741c:	beq	274e4 <__assert_fail@plt+0x15940>
   27420:	cmp	r1, #9
   27424:	beq	274c0 <__assert_fail@plt+0x1591c>
   27428:	cmp	r1, #4
   2742c:	beq	27458 <__assert_fail@plt+0x158b4>
   27430:	ldr	r2, [sp, #108]	; 0x6c
   27434:	add	r2, r2, #1
   27438:	cmp	r2, r3
   2743c:	str	r2, [sp, #108]	; 0x6c
   27440:	blt	273f4 <__assert_fail@plt+0x15850>
   27444:	ldr	r3, [sp, #20]
   27448:	lsr	r0, r3, #1
   2744c:	and	r0, r0, #1
   27450:	add	sp, sp, #172	; 0xac
   27454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27458:	ldr	r2, [sp, #208]	; 0xd0
   2745c:	cmn	r2, #1
   27460:	beq	27430 <__assert_fail@plt+0x1588c>
   27464:	ldr	r3, [sp, #100]	; 0x64
   27468:	ldr	r2, [sp, #64]	; 0x40
   2746c:	add	r3, r3, r3, lsl #1
   27470:	ldr	r2, [r2, #116]	; 0x74
   27474:	lsl	r3, r3, #2
   27478:	str	r3, [sp, #156]	; 0x9c
   2747c:	ldr	r3, [sp, #96]	; 0x60
   27480:	add	r3, r2, r3
   27484:	str	r3, [sp, #88]	; 0x58
   27488:	ldr	r3, [sp, #88]	; 0x58
   2748c:	ldr	r2, [sp, #100]	; 0x64
   27490:	ldr	r3, [r3, #-24]	; 0xffffffe8
   27494:	cmp	r2, r3
   27498:	beq	27508 <__assert_fail@plt+0x15964>
   2749c:	ldr	r3, [sp, #88]	; 0x58
   274a0:	add	r3, r3, #24
   274a4:	str	r3, [sp, #88]	; 0x58
   274a8:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   274ac:	cmp	r3, #0
   274b0:	bne	27488 <__assert_fail@plt+0x158e4>
   274b4:	ldr	r3, [sp, #124]	; 0x7c
   274b8:	ldr	r3, [r3, #4]
   274bc:	b	27430 <__assert_fail@plt+0x1588c>
   274c0:	ldr	r1, [sp, #16]
   274c4:	cmp	r1, #0
   274c8:	beq	27430 <__assert_fail@plt+0x1588c>
   274cc:	ldr	r1, [sp, #100]	; 0x64
   274d0:	ldr	r2, [r2, r1, lsl #3]
   274d4:	cmp	fp, r2
   274d8:	bne	27430 <__assert_fail@plt+0x1588c>
   274dc:	mov	r0, #0
   274e0:	b	27450 <__assert_fail@plt+0x158ac>
   274e4:	ldr	r1, [sp, #32]
   274e8:	cmp	r1, #0
   274ec:	beq	27430 <__assert_fail@plt+0x1588c>
   274f0:	ldr	r1, [sp, #100]	; 0x64
   274f4:	ldr	r2, [r2, r1, lsl #3]
   274f8:	cmp	r2, fp
   274fc:	bne	27430 <__assert_fail@plt+0x1588c>
   27500:	mvn	r0, #0
   27504:	b	27450 <__assert_fail@plt+0x158ac>
   27508:	cmp	fp, #31
   2750c:	bgt	27524 <__assert_fail@plt+0x15980>
   27510:	ldr	r3, [sp, #88]	; 0x58
   27514:	ldr	r2, [sp, #24]
   27518:	ldr	r3, [r3, #-8]
   2751c:	tst	r2, r3
   27520:	beq	2749c <__assert_fail@plt+0x158f8>
   27524:	ldr	r3, [sp, #120]	; 0x78
   27528:	ldr	r2, [sp, #156]	; 0x9c
   2752c:	ldr	r3, [r3, #20]
   27530:	add	r3, r3, r2
   27534:	ldr	r2, [sp, #152]	; 0x98
   27538:	ldr	r3, [r3, #8]
   2753c:	ldr	r3, [r3]
   27540:	cmp	r2, r3
   27544:	str	r3, [sp, #128]	; 0x80
   27548:	beq	275fc <__assert_fail@plt+0x15a58>
   2754c:	ldr	r3, [sp, #64]	; 0x40
   27550:	ldr	r3, [r3, #84]	; 0x54
   27554:	mov	r2, r3
   27558:	str	r3, [sp, #132]	; 0x84
   2755c:	ldr	r3, [sp, #128]	; 0x80
   27560:	ldr	r2, [r2, #24]
   27564:	add	r3, r3, r3, lsl #1
   27568:	add	r3, r2, r3, lsl #2
   2756c:	str	r3, [sp, #136]	; 0x88
   27570:	ldr	r3, [r3, #4]
   27574:	cmp	r3, #0
   27578:	ble	27d2c <__assert_fail@plt+0x16188>
   2757c:	mov	r2, #0
   27580:	str	r2, [sp, #112]	; 0x70
   27584:	b	275ac <__assert_fail@plt+0x15a08>
   27588:	cmp	r1, #9
   2758c:	beq	27d4c <__assert_fail@plt+0x161a8>
   27590:	cmp	r1, #4
   27594:	beq	27608 <__assert_fail@plt+0x15a64>
   27598:	ldr	r2, [sp, #112]	; 0x70
   2759c:	add	r2, r2, #1
   275a0:	cmp	r2, r3
   275a4:	str	r2, [sp, #112]	; 0x70
   275a8:	bge	27d2c <__assert_fail@plt+0x16188>
   275ac:	ldr	r2, [sp, #136]	; 0x88
   275b0:	ldr	r0, [sp, #112]	; 0x70
   275b4:	ldr	r1, [r2, #8]
   275b8:	ldr	r2, [sp, #132]	; 0x84
   275bc:	ldr	r1, [r1, r0, lsl #2]
   275c0:	ldr	r2, [r2]
   275c4:	str	r1, [sp, #104]	; 0x68
   275c8:	add	r1, r2, r1, lsl #3
   275cc:	ldrb	r1, [r1, #4]
   275d0:	cmp	r1, #8
   275d4:	bne	27588 <__assert_fail@plt+0x159e4>
   275d8:	ldr	r1, [sp, #32]
   275dc:	cmp	r1, #0
   275e0:	beq	27598 <__assert_fail@plt+0x159f4>
   275e4:	ldr	r1, [sp, #104]	; 0x68
   275e8:	ldr	r2, [r2, r1, lsl #3]
   275ec:	cmp	fp, r2
   275f0:	bne	27598 <__assert_fail@plt+0x159f4>
   275f4:	mvn	r0, #0
   275f8:	b	27450 <__assert_fail@plt+0x158ac>
   275fc:	ldr	r3, [sp, #32]
   27600:	rsb	r0, r3, #0
   27604:	b	27450 <__assert_fail@plt+0x158ac>
   27608:	ldr	r3, [sp, #104]	; 0x68
   2760c:	ldr	r2, [sp, #64]	; 0x40
   27610:	add	r3, r3, r3, lsl #1
   27614:	ldr	r2, [r2, #116]	; 0x74
   27618:	lsl	r3, r3, #2
   2761c:	str	r3, [sp, #160]	; 0xa0
   27620:	ldr	r3, [sp, #96]	; 0x60
   27624:	add	r3, r2, r3
   27628:	str	r3, [sp, #92]	; 0x5c
   2762c:	b	27648 <__assert_fail@plt+0x15aa4>
   27630:	ldr	r3, [sp, #92]	; 0x5c
   27634:	add	r3, r3, #24
   27638:	str	r3, [sp, #92]	; 0x5c
   2763c:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   27640:	cmp	r3, #0
   27644:	beq	27d6c <__assert_fail@plt+0x161c8>
   27648:	ldr	r3, [sp, #92]	; 0x5c
   2764c:	ldr	r2, [sp, #104]	; 0x68
   27650:	ldr	r3, [r3, #-24]	; 0xffffffe8
   27654:	cmp	r2, r3
   27658:	bne	27630 <__assert_fail@plt+0x15a8c>
   2765c:	cmp	fp, #31
   27660:	bgt	27678 <__assert_fail@plt+0x15ad4>
   27664:	ldr	r3, [sp, #92]	; 0x5c
   27668:	ldr	r2, [sp, #24]
   2766c:	ldr	r3, [r3, #-8]
   27670:	tst	r2, r3
   27674:	beq	27630 <__assert_fail@plt+0x15a8c>
   27678:	ldr	r3, [sp, #132]	; 0x84
   2767c:	ldr	r2, [sp, #160]	; 0xa0
   27680:	ldr	r3, [r3, #20]
   27684:	add	r3, r3, r2
   27688:	ldr	r2, [sp, #128]	; 0x80
   2768c:	ldr	r3, [r3, #8]
   27690:	ldr	r3, [r3]
   27694:	cmp	r2, r3
   27698:	str	r3, [sp, #140]	; 0x8c
   2769c:	beq	27d14 <__assert_fail@plt+0x16170>
   276a0:	ldr	r3, [sp, #64]	; 0x40
   276a4:	ldr	r3, [r3, #84]	; 0x54
   276a8:	mov	r2, r3
   276ac:	str	r3, [sp, #144]	; 0x90
   276b0:	ldr	r3, [sp, #140]	; 0x8c
   276b4:	ldr	r2, [r2, #24]
   276b8:	add	r3, r3, r3, lsl #1
   276bc:	add	r3, r2, r3, lsl #2
   276c0:	str	r3, [sp, #148]	; 0x94
   276c4:	ldr	r3, [r3, #4]
   276c8:	cmp	r3, #0
   276cc:	ble	27ce8 <__assert_fail@plt+0x16144>
   276d0:	mov	r2, #0
   276d4:	str	r2, [sp, #116]	; 0x74
   276d8:	b	27700 <__assert_fail@plt+0x15b5c>
   276dc:	cmp	r1, #9
   276e0:	beq	2774c <__assert_fail@plt+0x15ba8>
   276e4:	cmp	r1, #4
   276e8:	beq	2776c <__assert_fail@plt+0x15bc8>
   276ec:	ldr	r2, [sp, #116]	; 0x74
   276f0:	add	r2, r2, #1
   276f4:	cmp	r2, r3
   276f8:	str	r2, [sp, #116]	; 0x74
   276fc:	bge	27ce8 <__assert_fail@plt+0x16144>
   27700:	ldr	r2, [sp, #148]	; 0x94
   27704:	ldr	r0, [sp, #116]	; 0x74
   27708:	ldr	r1, [r2, #8]
   2770c:	ldr	r2, [sp, #144]	; 0x90
   27710:	ldr	r1, [r1, r0, lsl #2]
   27714:	ldr	r2, [r2]
   27718:	str	r1, [sp, #84]	; 0x54
   2771c:	add	r1, r2, r1, lsl #3
   27720:	ldrb	r1, [r1, #4]
   27724:	cmp	r1, #8
   27728:	bne	276dc <__assert_fail@plt+0x15b38>
   2772c:	ldr	r1, [sp, #32]
   27730:	cmp	r1, #0
   27734:	beq	276ec <__assert_fail@plt+0x15b48>
   27738:	ldr	r1, [sp, #84]	; 0x54
   2773c:	ldr	r2, [r2, r1, lsl #3]
   27740:	cmp	fp, r2
   27744:	bne	276ec <__assert_fail@plt+0x15b48>
   27748:	b	27500 <__assert_fail@plt+0x1595c>
   2774c:	ldr	r1, [sp, #16]
   27750:	cmp	r1, #0
   27754:	beq	276ec <__assert_fail@plt+0x15b48>
   27758:	ldr	r1, [sp, #84]	; 0x54
   2775c:	ldr	r2, [r2, r1, lsl #3]
   27760:	cmp	fp, r2
   27764:	bne	276ec <__assert_fail@plt+0x15b48>
   27768:	b	274dc <__assert_fail@plt+0x15938>
   2776c:	ldr	r3, [sp, #84]	; 0x54
   27770:	ldr	r2, [sp, #64]	; 0x40
   27774:	add	r3, r3, r3, lsl #1
   27778:	ldr	r2, [r2, #116]	; 0x74
   2777c:	lsl	r3, r3, #2
   27780:	str	r3, [sp, #164]	; 0xa4
   27784:	ldr	r3, [sp, #96]	; 0x60
   27788:	add	r3, r2, r3
   2778c:	str	r3, [sp, #68]	; 0x44
   27790:	b	277ac <__assert_fail@plt+0x15c08>
   27794:	ldr	r3, [sp, #68]	; 0x44
   27798:	add	r3, r3, #24
   2779c:	str	r3, [sp, #68]	; 0x44
   277a0:	ldrb	r3, [r3, #-28]	; 0xffffffe4
   277a4:	cmp	r3, #0
   277a8:	beq	27d08 <__assert_fail@plt+0x16164>
   277ac:	ldr	r3, [sp, #68]	; 0x44
   277b0:	ldr	r2, [sp, #84]	; 0x54
   277b4:	ldr	r3, [r3, #-24]	; 0xffffffe8
   277b8:	cmp	r2, r3
   277bc:	bne	27794 <__assert_fail@plt+0x15bf0>
   277c0:	cmp	fp, #31
   277c4:	bgt	277dc <__assert_fail@plt+0x15c38>
   277c8:	ldr	r3, [sp, #68]	; 0x44
   277cc:	ldr	r2, [sp, #24]
   277d0:	ldr	r3, [r3, #-8]
   277d4:	tst	r2, r3
   277d8:	beq	27794 <__assert_fail@plt+0x15bf0>
   277dc:	ldr	r3, [sp, #144]	; 0x90
   277e0:	ldr	r2, [sp, #164]	; 0xa4
   277e4:	ldr	r3, [r3, #20]
   277e8:	add	r3, r3, r2
   277ec:	ldr	r2, [sp, #140]	; 0x8c
   277f0:	ldr	r3, [r3, #8]
   277f4:	ldr	r3, [r3]
   277f8:	cmp	r2, r3
   277fc:	str	r3, [sp, #72]	; 0x48
   27800:	beq	27cd0 <__assert_fail@plt+0x1612c>
   27804:	ldr	r3, [sp, #64]	; 0x40
   27808:	ldr	r3, [r3, #84]	; 0x54
   2780c:	mov	r2, r3
   27810:	str	r3, [sp, #48]	; 0x30
   27814:	ldr	r3, [sp, #72]	; 0x48
   27818:	ldr	r2, [r2, #24]
   2781c:	add	r3, r3, r3, lsl #1
   27820:	add	r3, r2, r3, lsl #2
   27824:	str	r3, [sp, #80]	; 0x50
   27828:	ldr	r1, [r3, #4]
   2782c:	cmp	r1, #0
   27830:	ble	27cb0 <__assert_fail@plt+0x1610c>
   27834:	mov	r3, #0
   27838:	str	r3, [sp, #40]	; 0x28
   2783c:	b	27864 <__assert_fail@plt+0x15cc0>
   27840:	cmp	r3, #9
   27844:	beq	278b0 <__assert_fail@plt+0x15d0c>
   27848:	cmp	r3, #4
   2784c:	beq	278d0 <__assert_fail@plt+0x15d2c>
   27850:	ldr	r3, [sp, #40]	; 0x28
   27854:	add	r3, r3, #1
   27858:	cmp	r3, r1
   2785c:	str	r3, [sp, #40]	; 0x28
   27860:	bge	27cb0 <__assert_fail@plt+0x1610c>
   27864:	ldr	r3, [sp, #80]	; 0x50
   27868:	ldr	r0, [sp, #40]	; 0x28
   2786c:	ldr	r2, [sp, #48]	; 0x30
   27870:	ldr	r3, [r3, #8]
   27874:	ldr	r2, [r2]
   27878:	ldr	r3, [r3, r0, lsl #2]
   2787c:	str	r3, [sp, #12]
   27880:	add	r3, r2, r3, lsl #3
   27884:	ldrb	r3, [r3, #4]
   27888:	cmp	r3, #8
   2788c:	bne	27840 <__assert_fail@plt+0x15c9c>
   27890:	ldr	r3, [sp, #32]
   27894:	cmp	r3, #0
   27898:	beq	27850 <__assert_fail@plt+0x15cac>
   2789c:	ldr	r3, [sp, #12]
   278a0:	ldr	r3, [r2, r3, lsl #3]
   278a4:	cmp	fp, r3
   278a8:	bne	27850 <__assert_fail@plt+0x15cac>
   278ac:	b	27500 <__assert_fail@plt+0x1595c>
   278b0:	ldr	r3, [sp, #16]
   278b4:	cmp	r3, #0
   278b8:	beq	27850 <__assert_fail@plt+0x15cac>
   278bc:	ldr	r3, [sp, #12]
   278c0:	ldr	r3, [r2, r3, lsl #3]
   278c4:	cmp	fp, r3
   278c8:	bne	27850 <__assert_fail@plt+0x15cac>
   278cc:	b	274dc <__assert_fail@plt+0x15938>
   278d0:	ldr	r3, [sp, #12]
   278d4:	ldr	r2, [sp, #64]	; 0x40
   278d8:	add	r3, r3, r3, lsl #1
   278dc:	ldr	r9, [r2, #116]	; 0x74
   278e0:	lsl	r3, r3, #2
   278e4:	str	r3, [sp, #76]	; 0x4c
   278e8:	ldr	r3, [sp, #96]	; 0x60
   278ec:	add	r9, r9, r3
   278f0:	b	27904 <__assert_fail@plt+0x15d60>
   278f4:	add	r9, r9, #24
   278f8:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   278fc:	cmp	r3, #0
   27900:	beq	27b58 <__assert_fail@plt+0x15fb4>
   27904:	ldr	r3, [r9, #-24]	; 0xffffffe8
   27908:	ldr	r2, [sp, #12]
   2790c:	cmp	r2, r3
   27910:	bne	278f4 <__assert_fail@plt+0x15d50>
   27914:	cmp	fp, #31
   27918:	bgt	2792c <__assert_fail@plt+0x15d88>
   2791c:	ldr	r3, [r9, #-8]
   27920:	ldr	r2, [sp, #24]
   27924:	tst	r2, r3
   27928:	beq	278f4 <__assert_fail@plt+0x15d50>
   2792c:	ldr	r3, [sp, #48]	; 0x30
   27930:	ldr	r2, [sp, #76]	; 0x4c
   27934:	ldr	r3, [r3, #20]
   27938:	add	r3, r3, r2
   2793c:	ldr	r2, [sp, #72]	; 0x48
   27940:	ldr	r3, [r3, #8]
   27944:	ldr	r3, [r3]
   27948:	cmp	r2, r3
   2794c:	str	r3, [sp, #28]
   27950:	beq	27c98 <__assert_fail@plt+0x160f4>
   27954:	ldr	r2, [sp, #64]	; 0x40
   27958:	ldr	r3, [sp, #28]
   2795c:	ldr	r7, [r2, #84]	; 0x54
   27960:	add	sl, r3, r3, lsl #1
   27964:	ldr	r3, [r7, #24]
   27968:	add	sl, r3, sl, lsl #2
   2796c:	ldr	r1, [sl, #4]
   27970:	cmp	r1, #0
   27974:	ble	27b30 <__assert_fail@plt+0x15f8c>
   27978:	str	r9, [sp, #52]	; 0x34
   2797c:	mov	r6, #0
   27980:	mov	r9, r2
   27984:	b	279a4 <__assert_fail@plt+0x15e00>
   27988:	cmp	r3, #9
   2798c:	beq	279ec <__assert_fail@plt+0x15e48>
   27990:	cmp	r3, #4
   27994:	beq	27a08 <__assert_fail@plt+0x15e64>
   27998:	add	r6, r6, #1
   2799c:	cmp	r6, r1
   279a0:	bge	279e4 <__assert_fail@plt+0x15e40>
   279a4:	ldr	r3, [sl, #8]
   279a8:	ldr	r2, [r7]
   279ac:	ldr	r5, [r3, r6, lsl #2]
   279b0:	add	r3, r2, r5, lsl #3
   279b4:	ldrb	r3, [r3, #4]
   279b8:	cmp	r3, #8
   279bc:	bne	27988 <__assert_fail@plt+0x15de4>
   279c0:	ldr	r3, [sp, #32]
   279c4:	cmp	r3, #0
   279c8:	beq	27998 <__assert_fail@plt+0x15df4>
   279cc:	ldr	r3, [r2, r5, lsl #3]
   279d0:	cmp	fp, r3
   279d4:	beq	27500 <__assert_fail@plt+0x1595c>
   279d8:	add	r6, r6, #1
   279dc:	cmp	r6, r1
   279e0:	blt	279a4 <__assert_fail@plt+0x15e00>
   279e4:	ldr	r9, [sp, #52]	; 0x34
   279e8:	b	27b30 <__assert_fail@plt+0x15f8c>
   279ec:	ldr	r3, [sp, #16]
   279f0:	cmp	r3, #0
   279f4:	beq	27998 <__assert_fail@plt+0x15df4>
   279f8:	ldr	r3, [r2, r5, lsl #3]
   279fc:	cmp	fp, r3
   27a00:	bne	27998 <__assert_fail@plt+0x15df4>
   27a04:	b	274dc <__assert_fail@plt+0x15938>
   27a08:	ldr	r3, [sp, #44]	; 0x2c
   27a0c:	ldr	r4, [r9, #116]	; 0x74
   27a10:	add	r8, r5, r5, lsl #1
   27a14:	add	r4, r4, r3
   27a18:	cmp	fp, #31
   27a1c:	lsl	r8, r8, #2
   27a20:	ldr	r3, [sp, #16]
   27a24:	add	r4, r4, #24
   27a28:	ble	27b64 <__assert_fail@plt+0x15fc0>
   27a2c:	cmp	r3, #0
   27a30:	bne	27ac8 <__assert_fail@plt+0x15f24>
   27a34:	str	sl, [sp, #56]	; 0x38
   27a38:	str	r6, [sp, #60]	; 0x3c
   27a3c:	ldr	sl, [sp, #20]
   27a40:	ldr	r6, [sp, #28]
   27a44:	b	27a54 <__assert_fail@plt+0x15eb0>
   27a48:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   27a4c:	cmp	r3, #0
   27a50:	beq	27aac <__assert_fail@plt+0x15f08>
   27a54:	ldr	r3, [r4, #-24]	; 0xffffffe8
   27a58:	add	r4, r4, #24
   27a5c:	cmp	r5, r3
   27a60:	bne	27a48 <__assert_fail@plt+0x15ea4>
   27a64:	ldr	r3, [r7, #20]
   27a68:	mov	r2, fp
   27a6c:	add	r3, r3, r8
   27a70:	mov	r1, sl
   27a74:	ldr	r3, [r3, #8]
   27a78:	mov	r0, r9
   27a7c:	ldr	ip, [r3]
   27a80:	cmp	ip, r6
   27a84:	mov	r3, ip
   27a88:	beq	27c80 <__assert_fail@plt+0x160dc>
   27a8c:	ldr	ip, [sp, #208]	; 0xd0
   27a90:	str	ip, [sp]
   27a94:	bl	27368 <__assert_fail@plt+0x157c4>
   27a98:	cmn	r0, #1
   27a9c:	beq	27500 <__assert_fail@plt+0x1595c>
   27aa0:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   27aa4:	cmp	r3, #0
   27aa8:	bne	27a54 <__assert_fail@plt+0x15eb0>
   27aac:	ldr	sl, [sp, #56]	; 0x38
   27ab0:	ldr	r6, [sp, #60]	; 0x3c
   27ab4:	ldr	r1, [sl, #4]
   27ab8:	b	27998 <__assert_fail@plt+0x15df4>
   27abc:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   27ac0:	cmp	r3, #0
   27ac4:	beq	27ab4 <__assert_fail@plt+0x15f10>
   27ac8:	ldr	r3, [r4, #-24]	; 0xffffffe8
   27acc:	add	r4, r4, #24
   27ad0:	cmp	r5, r3
   27ad4:	bne	27abc <__assert_fail@plt+0x15f18>
   27ad8:	ldr	r3, [r7, #20]
   27adc:	ldr	lr, [sp, #28]
   27ae0:	add	r3, r3, r8
   27ae4:	mov	r2, fp
   27ae8:	ldr	r3, [r3, #8]
   27aec:	ldr	r1, [sp, #20]
   27af0:	mov	r0, r9
   27af4:	ldr	ip, [r3]
   27af8:	cmp	ip, lr
   27afc:	mov	r3, ip
   27b00:	beq	27c80 <__assert_fail@plt+0x160dc>
   27b04:	ldr	ip, [sp, #208]	; 0xd0
   27b08:	str	ip, [sp]
   27b0c:	bl	27368 <__assert_fail@plt+0x157c4>
   27b10:	cmn	r0, #1
   27b14:	beq	27500 <__assert_fail@plt+0x1595c>
   27b18:	cmp	r0, #0
   27b1c:	bne	27abc <__assert_fail@plt+0x15f18>
   27b20:	ldr	r9, [sp, #52]	; 0x34
   27b24:	ldr	r3, [sp, #16]
   27b28:	cmp	r3, #0
   27b2c:	bne	274dc <__assert_fail@plt+0x15938>
   27b30:	cmp	fp, #31
   27b34:	bgt	278f4 <__assert_fail@plt+0x15d50>
   27b38:	ldr	r3, [r9, #-8]
   27b3c:	ldr	r2, [sp, #36]	; 0x24
   27b40:	add	r9, r9, #24
   27b44:	and	r3, r3, r2
   27b48:	str	r3, [r9, #-32]	; 0xffffffe0
   27b4c:	ldrb	r3, [r9, #-28]	; 0xffffffe4
   27b50:	cmp	r3, #0
   27b54:	bne	27904 <__assert_fail@plt+0x15d60>
   27b58:	ldr	r3, [sp, #80]	; 0x50
   27b5c:	ldr	r1, [r3, #4]
   27b60:	b	27850 <__assert_fail@plt+0x15cac>
   27b64:	cmp	r3, #0
   27b68:	bne	27c70 <__assert_fail@plt+0x160cc>
   27b6c:	str	sl, [sp, #56]	; 0x38
   27b70:	str	r6, [sp, #60]	; 0x3c
   27b74:	ldr	sl, [sp, #208]	; 0xd0
   27b78:	ldr	r6, [sp, #28]
   27b7c:	b	27b90 <__assert_fail@plt+0x15fec>
   27b80:	add	r4, r4, #24
   27b84:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   27b88:	cmp	r3, #0
   27b8c:	beq	27aac <__assert_fail@plt+0x15f08>
   27b90:	ldr	r3, [r4, #-24]	; 0xffffffe8
   27b94:	cmp	r5, r3
   27b98:	bne	27b80 <__assert_fail@plt+0x15fdc>
   27b9c:	ldr	r3, [r4, #-8]
   27ba0:	ldr	ip, [sp, #24]
   27ba4:	mov	r2, fp
   27ba8:	tst	ip, r3
   27bac:	ldr	r1, [sp, #20]
   27bb0:	mov	r0, r9
   27bb4:	beq	27b80 <__assert_fail@plt+0x15fdc>
   27bb8:	ldr	r3, [r7, #20]
   27bbc:	add	r3, r3, r8
   27bc0:	ldr	r3, [r3, #8]
   27bc4:	ldr	ip, [r3]
   27bc8:	cmp	r6, ip
   27bcc:	mov	r3, ip
   27bd0:	beq	27c80 <__assert_fail@plt+0x160dc>
   27bd4:	str	sl, [sp]
   27bd8:	bl	27368 <__assert_fail@plt+0x157c4>
   27bdc:	cmn	r0, #1
   27be0:	beq	27500 <__assert_fail@plt+0x1595c>
   27be4:	ldr	r3, [r4, #-8]
   27be8:	ldr	r2, [sp, #36]	; 0x24
   27bec:	and	r3, r3, r2
   27bf0:	str	r3, [r4, #-8]
   27bf4:	b	27b80 <__assert_fail@plt+0x15fdc>
   27bf8:	ldr	r3, [r4, #-8]
   27bfc:	ldr	ip, [sp, #24]
   27c00:	mov	r2, fp
   27c04:	tst	ip, r3
   27c08:	ldr	r1, [sp, #20]
   27c0c:	mov	r0, r9
   27c10:	beq	27c60 <__assert_fail@plt+0x160bc>
   27c14:	ldr	r3, [r7, #20]
   27c18:	ldr	lr, [sp, #28]
   27c1c:	add	r3, r3, r8
   27c20:	ldr	r3, [r3, #8]
   27c24:	ldr	ip, [r3]
   27c28:	cmp	lr, ip
   27c2c:	mov	r3, ip
   27c30:	beq	27c80 <__assert_fail@plt+0x160dc>
   27c34:	ldr	ip, [sp, #208]	; 0xd0
   27c38:	str	ip, [sp]
   27c3c:	bl	27368 <__assert_fail@plt+0x157c4>
   27c40:	cmn	r0, #1
   27c44:	beq	27500 <__assert_fail@plt+0x1595c>
   27c48:	cmp	r0, #0
   27c4c:	beq	27b20 <__assert_fail@plt+0x15f7c>
   27c50:	ldr	r3, [r4, #-8]
   27c54:	ldr	r2, [sp, #36]	; 0x24
   27c58:	and	r3, r3, r2
   27c5c:	str	r3, [r4, #-8]
   27c60:	add	r4, r4, #24
   27c64:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   27c68:	cmp	r3, #0
   27c6c:	beq	27ab4 <__assert_fail@plt+0x15f10>
   27c70:	ldr	r3, [r4, #-24]	; 0xffffffe8
   27c74:	cmp	r5, r3
   27c78:	bne	27c60 <__assert_fail@plt+0x160bc>
   27c7c:	b	27bf8 <__assert_fail@plt+0x16054>
   27c80:	ldr	r3, [sp, #32]
   27c84:	ldr	r9, [sp, #52]	; 0x34
   27c88:	cmp	r3, #0
   27c8c:	beq	27b24 <__assert_fail@plt+0x15f80>
   27c90:	mvn	r0, #0
   27c94:	b	27450 <__assert_fail@plt+0x158ac>
   27c98:	ldr	r3, [sp, #32]
   27c9c:	cmp	r3, #0
   27ca0:	bne	27500 <__assert_fail@plt+0x1595c>
   27ca4:	ldr	r3, [sp, #16]
   27ca8:	cmp	r3, #0
   27cac:	bne	274dc <__assert_fail@plt+0x15938>
   27cb0:	cmp	fp, #31
   27cb4:	bgt	27794 <__assert_fail@plt+0x15bf0>
   27cb8:	ldr	r2, [sp, #68]	; 0x44
   27cbc:	ldr	r1, [sp, #36]	; 0x24
   27cc0:	ldr	r3, [r2, #-8]
   27cc4:	and	r3, r3, r1
   27cc8:	str	r3, [r2, #-8]
   27ccc:	b	27794 <__assert_fail@plt+0x15bf0>
   27cd0:	ldr	r3, [sp, #32]
   27cd4:	cmp	r3, #0
   27cd8:	bne	27500 <__assert_fail@plt+0x1595c>
   27cdc:	ldr	r3, [sp, #16]
   27ce0:	cmp	r3, #0
   27ce4:	bne	274dc <__assert_fail@plt+0x15938>
   27ce8:	cmp	fp, #31
   27cec:	bgt	27630 <__assert_fail@plt+0x15a8c>
   27cf0:	ldr	r2, [sp, #92]	; 0x5c
   27cf4:	ldr	r1, [sp, #36]	; 0x24
   27cf8:	ldr	r3, [r2, #-8]
   27cfc:	and	r3, r3, r1
   27d00:	str	r3, [r2, #-8]
   27d04:	b	27630 <__assert_fail@plt+0x15a8c>
   27d08:	ldr	r3, [sp, #148]	; 0x94
   27d0c:	ldr	r3, [r3, #4]
   27d10:	b	276ec <__assert_fail@plt+0x15b48>
   27d14:	ldr	r3, [sp, #32]
   27d18:	cmp	r3, #0
   27d1c:	bne	27500 <__assert_fail@plt+0x1595c>
   27d20:	ldr	r3, [sp, #16]
   27d24:	cmp	r3, #0
   27d28:	bne	274dc <__assert_fail@plt+0x15938>
   27d2c:	cmp	fp, #31
   27d30:	bgt	2749c <__assert_fail@plt+0x158f8>
   27d34:	ldr	r2, [sp, #88]	; 0x58
   27d38:	ldr	r1, [sp, #36]	; 0x24
   27d3c:	ldr	r3, [r2, #-8]
   27d40:	and	r3, r3, r1
   27d44:	str	r3, [r2, #-8]
   27d48:	b	2749c <__assert_fail@plt+0x158f8>
   27d4c:	ldr	r1, [sp, #16]
   27d50:	cmp	r1, #0
   27d54:	beq	27598 <__assert_fail@plt+0x159f4>
   27d58:	ldr	r1, [sp, #104]	; 0x68
   27d5c:	ldr	r2, [r2, r1, lsl #3]
   27d60:	cmp	fp, r2
   27d64:	bne	27598 <__assert_fail@plt+0x159f4>
   27d68:	b	274dc <__assert_fail@plt+0x15938>
   27d6c:	ldr	r3, [sp, #136]	; 0x88
   27d70:	ldr	r3, [r3, #4]
   27d74:	b	27598 <__assert_fail@plt+0x159f4>
   27d78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d7c:	sub	sp, sp, #36	; 0x24
   27d80:	ldr	fp, [r0, #108]	; 0x6c
   27d84:	ldr	r6, [sp, #72]	; 0x48
   27d88:	ldr	r7, [sp, #80]	; 0x50
   27d8c:	ldr	lr, [r0, #84]	; 0x54
   27d90:	mov	ip, fp
   27d94:	mov	r4, #0
   27d98:	str	lr, [sp, #12]
   27d9c:	cmp	r4, ip
   27da0:	bge	27dfc <__assert_fail@plt+0x16258>
   27da4:	add	lr, r4, ip
   27da8:	ldr	r5, [r0, #116]	; 0x74
   27dac:	add	lr, lr, lr, lsr #31
   27db0:	asr	lr, lr, #1
   27db4:	add	r8, lr, lr, lsl #1
   27db8:	add	r8, r5, r8, lsl #3
   27dbc:	ldr	r8, [r8, #4]
   27dc0:	cmp	r6, r8
   27dc4:	ble	27dec <__assert_fail@plt+0x16248>
   27dc8:	b	27f98 <__assert_fail@plt+0x163f4>
   27dcc:	asr	ip, ip, #1
   27dd0:	mov	r9, ip
   27dd4:	add	r8, ip, ip, lsl #1
   27dd8:	add	r8, r5, r8, lsl #3
   27ddc:	ldr	r8, [r8, #4]
   27de0:	cmp	r8, r6
   27de4:	blt	27fa0 <__assert_fail@plt+0x163fc>
   27de8:	mov	lr, ip
   27dec:	add	ip, r4, lr
   27df0:	cmp	r4, lr
   27df4:	add	ip, ip, ip, lsr #31
   27df8:	blt	27dcc <__assert_fail@plt+0x16228>
   27dfc:	cmp	fp, r4
   27e00:	mvnle	r4, #0
   27e04:	ble	27e20 <__assert_fail@plt+0x1627c>
   27e08:	add	lr, r4, r4, lsl #1
   27e0c:	ldr	ip, [r0, #116]	; 0x74
   27e10:	add	ip, ip, lr, lsl #3
   27e14:	ldr	ip, [ip, #4]
   27e18:	cmp	r6, ip
   27e1c:	mvnne	r4, #0
   27e20:	mov	ip, fp
   27e24:	mov	r5, #0
   27e28:	cmp	r5, ip
   27e2c:	bge	27e88 <__assert_fail@plt+0x162e4>
   27e30:	add	lr, r5, ip
   27e34:	ldr	r8, [r0, #116]	; 0x74
   27e38:	add	lr, lr, lr, lsr #31
   27e3c:	asr	lr, lr, #1
   27e40:	add	r9, lr, lr, lsl #1
   27e44:	add	r9, r8, r9, lsl #3
   27e48:	ldr	r9, [r9, #4]
   27e4c:	cmp	r7, r9
   27e50:	ble	27e78 <__assert_fail@plt+0x162d4>
   27e54:	b	27fac <__assert_fail@plt+0x16408>
   27e58:	asr	ip, ip, #1
   27e5c:	mov	sl, ip
   27e60:	add	r9, ip, ip, lsl #1
   27e64:	add	r9, r8, r9, lsl #3
   27e68:	ldr	r9, [r9, #4]
   27e6c:	cmp	r9, r7
   27e70:	blt	27fb4 <__assert_fail@plt+0x16410>
   27e74:	mov	lr, ip
   27e78:	add	ip, r5, lr
   27e7c:	cmp	r5, lr
   27e80:	add	ip, ip, ip, lsr #31
   27e84:	blt	27e58 <__assert_fail@plt+0x162b4>
   27e88:	cmp	fp, r5
   27e8c:	mvnle	r5, #0
   27e90:	ble	27eac <__assert_fail@plt+0x16308>
   27e94:	add	lr, r5, r5, lsl #1
   27e98:	ldr	ip, [r0, #116]	; 0x74
   27e9c:	add	ip, ip, lr, lsl #3
   27ea0:	ldr	ip, [ip, #4]
   27ea4:	cmp	r7, ip
   27ea8:	mvnne	r5, #0
   27eac:	ldr	ip, [r1]
   27eb0:	cmp	ip, #0
   27eb4:	ble	27fd4 <__assert_fail@plt+0x16430>
   27eb8:	ldr	r8, [sp, #12]
   27ebc:	mov	sl, r2
   27ec0:	mov	fp, r0
   27ec4:	mov	r9, #0
   27ec8:	str	r3, [sp, #20]
   27ecc:	str	r1, [sp, #16]
   27ed0:	str	r4, [sp, #24]
   27ed4:	str	r5, [sp, #28]
   27ed8:	ldr	r3, [sl]
   27edc:	ldr	r2, [fp, #116]	; 0x74
   27ee0:	lsl	r1, r9, #2
   27ee4:	ldr	r3, [r3, r9, lsl #2]
   27ee8:	ldr	r0, [r8]
   27eec:	str	r1, [sp, #12]
   27ef0:	add	r3, r3, r3, lsl #1
   27ef4:	add	lr, r2, r3, lsl #3
   27ef8:	ldr	r3, [r2, r3, lsl #3]
   27efc:	ldr	r1, [lr, #8]
   27f00:	cmp	r6, r1
   27f04:	ldr	r5, [r0, r3, lsl #3]
   27f08:	blt	28034 <__assert_fail@plt+0x16490>
   27f0c:	ldr	r3, [lr, #12]
   27f10:	cmp	r6, r3
   27f14:	bgt	27fdc <__assert_fail@plt+0x16438>
   27f18:	cmp	r6, r3
   27f1c:	moveq	r4, #2
   27f20:	movne	r4, #0
   27f24:	cmp	r6, r1
   27f28:	orreq	r4, r4, #1
   27f2c:	cmp	r4, #0
   27f30:	bne	27fe4 <__assert_fail@plt+0x16440>
   27f34:	cmp	r7, r1
   27f38:	blt	27f8c <__assert_fail@plt+0x163e8>
   27f3c:	cmp	r7, r3
   27f40:	movgt	r1, #1
   27f44:	bgt	27f84 <__assert_fail@plt+0x163e0>
   27f48:	cmp	r7, r3
   27f4c:	moveq	r3, #2
   27f50:	movne	r3, #0
   27f54:	cmp	r7, r1
   27f58:	movne	r1, r3
   27f5c:	orreq	r1, r3, #1
   27f60:	cmp	r1, #0
   27f64:	beq	27f84 <__assert_fail@plt+0x163e0>
   27f68:	ldr	r3, [sp, #28]
   27f6c:	mov	r2, r5
   27f70:	str	r3, [sp]
   27f74:	mov	r0, fp
   27f78:	ldr	r3, [sp, #76]	; 0x4c
   27f7c:	bl	27368 <__assert_fail@plt+0x157c4>
   27f80:	mov	r1, r0
   27f84:	cmp	r1, r4
   27f88:	beq	27fc0 <__assert_fail@plt+0x1641c>
   27f8c:	mov	r0, #1
   27f90:	add	sp, sp, #36	; 0x24
   27f94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27f98:	mov	r9, lr
   27f9c:	mov	lr, ip
   27fa0:	add	r4, r9, #1
   27fa4:	mov	ip, lr
   27fa8:	b	27d9c <__assert_fail@plt+0x161f8>
   27fac:	mov	sl, lr
   27fb0:	mov	lr, ip
   27fb4:	add	r5, sl, #1
   27fb8:	mov	ip, lr
   27fbc:	b	27e28 <__assert_fail@plt+0x16284>
   27fc0:	ldr	r3, [sp, #16]
   27fc4:	ldr	ip, [r3]
   27fc8:	add	r9, r9, #1
   27fcc:	cmp	r9, ip
   27fd0:	blt	27ed8 <__assert_fail@plt+0x16334>
   27fd4:	mov	r0, #0
   27fd8:	b	27f90 <__assert_fail@plt+0x163ec>
   27fdc:	mov	r4, #1
   27fe0:	b	27f34 <__assert_fail@plt+0x16390>
   27fe4:	ldr	r3, [sp, #24]
   27fe8:	mov	r1, r4
   27fec:	str	r3, [sp]
   27ff0:	mov	r2, r5
   27ff4:	ldr	r3, [sp, #20]
   27ff8:	mov	r0, fp
   27ffc:	bl	27368 <__assert_fail@plt+0x157c4>
   28000:	ldr	r2, [sl]
   28004:	lsl	r1, r9, #2
   28008:	ldr	r3, [fp, #116]	; 0x74
   2800c:	ldr	r2, [r2, r1]
   28010:	add	r2, r2, r2, lsl #1
   28014:	add	r3, r3, r2, lsl #3
   28018:	ldr	r1, [r3, #8]
   2801c:	cmp	r7, r1
   28020:	mvnlt	r1, #0
   28024:	mov	r4, r0
   28028:	blt	27f84 <__assert_fail@plt+0x163e0>
   2802c:	ldr	r3, [r3, #12]
   28030:	b	27f3c <__assert_fail@plt+0x16398>
   28034:	cmp	r7, r1
   28038:	blt	27fc8 <__assert_fail@plt+0x16424>
   2803c:	ldr	r3, [lr, #12]
   28040:	cmp	r7, r3
   28044:	bgt	27f8c <__assert_fail@plt+0x163e8>
   28048:	mvn	r4, #0
   2804c:	b	27f48 <__assert_fail@plt+0x163a4>
   28050:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28054:	mov	r8, r1
   28058:	mov	r6, r0
   2805c:	ldr	r1, [r0, #28]
   28060:	add	r0, r8, r8, lsl #1
   28064:	sub	sp, sp, #36	; 0x24
   28068:	add	r1, r1, r0, lsl #2
   2806c:	mov	r4, #0
   28070:	str	r4, [sp, #24]
   28074:	str	r4, [sp, #20]
   28078:	str	r4, [sp, #28]
   2807c:	ldr	lr, [r1, #4]
   28080:	str	r1, [sp, #12]
   28084:	cmp	lr, r4
   28088:	str	r3, [sp, #8]
   2808c:	ble	28534 <__assert_fail@plt+0x16990>
   28090:	mov	r5, r1
   28094:	str	r2, [sp]
   28098:	ldr	r2, [r5, #8]
   2809c:	ldr	r3, [r2, r4, lsl #2]
   280a0:	cmp	r8, r3
   280a4:	beq	28280 <__assert_fail@plt+0x166dc>
   280a8:	ldr	r1, [r6]
   280ac:	add	r1, r1, r3, lsl #3
   280b0:	ldrb	r1, [r1, #4]
   280b4:	tst	r1, #8
   280b8:	beq	28280 <__assert_fail@plt+0x166dc>
   280bc:	add	r3, r3, r3, lsl #1
   280c0:	ldr	r1, [r6, #20]
   280c4:	lsl	r3, r3, #2
   280c8:	str	r3, [sp, #4]
   280cc:	add	r3, r1, r3
   280d0:	ldr	r0, [r3, #8]
   280d4:	ldr	r3, [r3, #4]
   280d8:	cmp	r3, #1
   280dc:	ldr	r1, [r0]
   280e0:	ble	284b8 <__assert_fail@plt+0x16914>
   280e4:	cmp	lr, #0
   280e8:	ldr	r7, [r0, #4]
   280ec:	ble	28148 <__assert_fail@plt+0x165a4>
   280f0:	sub	sl, lr, #1
   280f4:	mov	r9, sl
   280f8:	mov	ip, #0
   280fc:	cmp	ip, r9
   28100:	bcs	2813c <__assert_fail@plt+0x16598>
   28104:	add	r0, ip, r9
   28108:	lsr	r0, r0, #1
   2810c:	ldr	r3, [r2, r0, lsl #2]
   28110:	cmp	r1, r3
   28114:	ble	2812c <__assert_fail@plt+0x16588>
   28118:	b	283b8 <__assert_fail@plt+0x16814>
   2811c:	ldr	r9, [r2, r3, lsl #2]
   28120:	cmp	r1, r9
   28124:	bgt	283c0 <__assert_fail@plt+0x1681c>
   28128:	mov	r0, r3
   2812c:	add	r3, ip, r0
   28130:	cmp	ip, r0
   28134:	lsr	r3, r3, #1
   28138:	bcc	2811c <__assert_fail@plt+0x16578>
   2813c:	ldr	r3, [r2, ip, lsl #2]
   28140:	cmp	r1, r3
   28144:	beq	284ac <__assert_fail@plt+0x16908>
   28148:	ldr	r3, [sp]
   2814c:	ldr	fp, [r3, #4]
   28150:	cmp	fp, #0
   28154:	ble	281b0 <__assert_fail@plt+0x1660c>
   28158:	ldr	sl, [r3, #8]
   2815c:	sub	r9, fp, #1
   28160:	mov	ip, #0
   28164:	cmp	ip, r9
   28168:	bcs	281a4 <__assert_fail@plt+0x16600>
   2816c:	add	r0, ip, r9
   28170:	lsr	r0, r0, #1
   28174:	ldr	r3, [sl, r0, lsl #2]
   28178:	cmp	r1, r3
   2817c:	ble	28194 <__assert_fail@plt+0x165f0>
   28180:	b	28498 <__assert_fail@plt+0x168f4>
   28184:	ldr	r9, [sl, r3, lsl #2]
   28188:	cmp	r1, r9
   2818c:	bgt	284a0 <__assert_fail@plt+0x168fc>
   28190:	mov	r0, r3
   28194:	add	r3, ip, r0
   28198:	cmp	ip, r0
   2819c:	lsr	r3, r3, #1
   281a0:	bcc	28184 <__assert_fail@plt+0x165e0>
   281a4:	ldr	r3, [sl, ip, lsl #2]
   281a8:	cmp	r1, r3
   281ac:	beq	2843c <__assert_fail@plt+0x16898>
   281b0:	cmp	r7, #0
   281b4:	ble	28280 <__assert_fail@plt+0x166dc>
   281b8:	cmp	lr, #0
   281bc:	ble	2821c <__assert_fail@plt+0x16678>
   281c0:	sub	sl, lr, #1
   281c4:	mov	r0, #0
   281c8:	cmp	r0, sl
   281cc:	bcs	28208 <__assert_fail@plt+0x16664>
   281d0:	add	r1, r0, sl
   281d4:	lsr	r1, r1, #1
   281d8:	ldr	r3, [r2, r1, lsl #2]
   281dc:	cmp	r3, r7
   281e0:	bge	281f8 <__assert_fail@plt+0x16654>
   281e4:	b	28428 <__assert_fail@plt+0x16884>
   281e8:	ldr	ip, [r2, r3, lsl #2]
   281ec:	cmp	ip, r7
   281f0:	blt	28430 <__assert_fail@plt+0x1688c>
   281f4:	mov	r1, r3
   281f8:	add	r3, r0, r1
   281fc:	cmp	r0, r1
   28200:	lsr	r3, r3, #1
   28204:	bcc	281e8 <__assert_fail@plt+0x16644>
   28208:	ldr	r3, [r2, r0, lsl #2]
   2820c:	cmp	r3, r7
   28210:	beq	28280 <__assert_fail@plt+0x166dc>
   28214:	ldr	r3, [sp]
   28218:	ldr	fp, [r3, #4]
   2821c:	cmp	fp, #0
   28220:	ble	28280 <__assert_fail@plt+0x166dc>
   28224:	ldr	r3, [sp]
   28228:	sub	fp, fp, #1
   2822c:	mov	r1, #0
   28230:	ldr	r0, [r3, #8]
   28234:	cmp	r1, fp
   28238:	bcs	28274 <__assert_fail@plt+0x166d0>
   2823c:	add	r2, r1, fp
   28240:	lsr	r2, r2, #1
   28244:	ldr	r3, [r0, r2, lsl #2]
   28248:	cmp	r7, r3
   2824c:	ble	28264 <__assert_fail@plt+0x166c0>
   28250:	b	284dc <__assert_fail@plt+0x16938>
   28254:	ldr	ip, [r0, r3, lsl #2]
   28258:	cmp	ip, r7
   2825c:	blt	284e4 <__assert_fail@plt+0x16940>
   28260:	mov	r2, r3
   28264:	add	r3, r1, r2
   28268:	cmp	r1, r2
   2826c:	lsr	r3, r3, #1
   28270:	bcc	28254 <__assert_fail@plt+0x166b0>
   28274:	ldr	r3, [r0, r1, lsl #2]
   28278:	cmp	r3, r7
   2827c:	beq	2843c <__assert_fail@plt+0x16898>
   28280:	add	r4, r4, #1
   28284:	cmp	r4, lr
   28288:	blt	28098 <__assert_fail@plt+0x164f4>
   2828c:	cmp	lr, #0
   28290:	ldr	r5, [sp]
   28294:	ldrle	r0, [sp, #28]
   28298:	ble	28390 <__assert_fail@plt+0x167ec>
   2829c:	ldr	r3, [sp, #12]
   282a0:	mov	r7, #0
   282a4:	ldr	r0, [sp, #28]
   282a8:	ldr	r9, [r3, #8]
   282ac:	mov	sl, r7
   282b0:	sub	r9, r9, #4
   282b4:	ldr	r4, [sp, #24]
   282b8:	ldr	r2, [r9, #4]!
   282bc:	cmp	r4, #0
   282c0:	ble	28318 <__assert_fail@plt+0x16774>
   282c4:	sub	r4, r4, #1
   282c8:	mov	ip, sl
   282cc:	cmp	ip, r4
   282d0:	bcs	2830c <__assert_fail@plt+0x16768>
   282d4:	add	r1, ip, r4
   282d8:	lsr	r1, r1, #1
   282dc:	ldr	r3, [r0, r1, lsl #2]
   282e0:	cmp	r2, r3
   282e4:	ble	282fc <__assert_fail@plt+0x16758>
   282e8:	b	283a4 <__assert_fail@plt+0x16800>
   282ec:	ldr	r4, [r0, r3, lsl #2]
   282f0:	cmp	r2, r4
   282f4:	bgt	283ac <__assert_fail@plt+0x16808>
   282f8:	mov	r1, r3
   282fc:	add	r3, r1, ip
   28300:	cmp	r1, ip
   28304:	lsr	r3, r3, #1
   28308:	bhi	282ec <__assert_fail@plt+0x16748>
   2830c:	ldr	r3, [r0, ip, lsl #2]
   28310:	cmp	r2, r3
   28314:	beq	28384 <__assert_fail@plt+0x167e0>
   28318:	ldr	r8, [r5, #4]
   2831c:	cmp	r8, #0
   28320:	ble	28384 <__assert_fail@plt+0x167e0>
   28324:	sub	fp, r8, #1
   28328:	ldr	r6, [r5, #8]
   2832c:	mov	r4, fp
   28330:	mov	ip, sl
   28334:	cmp	ip, r4
   28338:	bcs	28374 <__assert_fail@plt+0x167d0>
   2833c:	add	r1, ip, r4
   28340:	lsr	r1, r1, #1
   28344:	ldr	r3, [r6, r1, lsl #2]
   28348:	cmp	r3, r2
   2834c:	bge	28364 <__assert_fail@plt+0x167c0>
   28350:	b	283cc <__assert_fail@plt+0x16828>
   28354:	ldr	r4, [r6, r3, lsl #2]
   28358:	cmp	r2, r4
   2835c:	bgt	283d4 <__assert_fail@plt+0x16830>
   28360:	mov	r1, r3
   28364:	add	r3, ip, r1
   28368:	cmp	ip, r1
   2836c:	lsr	r3, r3, #1
   28370:	bcc	28354 <__assert_fail@plt+0x167b0>
   28374:	ldr	r3, [r6, ip, lsl #2]
   28378:	add	r6, r6, ip, lsl #2
   2837c:	cmp	r2, r3
   28380:	beq	283e0 <__assert_fail@plt+0x1683c>
   28384:	add	r7, r7, #1
   28388:	cmp	r7, lr
   2838c:	blt	282b4 <__assert_fail@plt+0x16710>
   28390:	bl	184ec <__assert_fail@plt+0x6948>
   28394:	mov	r7, #0
   28398:	mov	r0, r7
   2839c:	add	sp, sp, #36	; 0x24
   283a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   283a4:	mov	r3, r1
   283a8:	mov	r1, r4
   283ac:	add	ip, r3, #1
   283b0:	mov	r4, r1
   283b4:	b	282cc <__assert_fail@plt+0x16728>
   283b8:	mov	r3, r0
   283bc:	mov	r0, r9
   283c0:	add	ip, r3, #1
   283c4:	mov	r9, r0
   283c8:	b	280fc <__assert_fail@plt+0x16558>
   283cc:	mov	r3, r1
   283d0:	mov	r1, r4
   283d4:	add	ip, r3, #1
   283d8:	mov	r4, r1
   283dc:	b	28334 <__assert_fail@plt+0x16790>
   283e0:	cmp	ip, r8
   283e4:	movlt	r8, #0
   283e8:	movge	r8, #1
   283ec:	orrs	r3, r8, ip, lsr #31
   283f0:	mov	r3, ip
   283f4:	bne	28384 <__assert_fail@plt+0x167e0>
   283f8:	cmp	ip, fp
   283fc:	str	fp, [r5, #4]
   28400:	bge	2841c <__assert_fail@plt+0x16878>
   28404:	ldr	r2, [r6, #4]
   28408:	add	r3, r3, #1
   2840c:	str	r2, [r6], #4
   28410:	ldr	r2, [r5, #4]
   28414:	cmp	r3, r2
   28418:	blt	28404 <__assert_fail@plt+0x16860>
   2841c:	ldr	r3, [sp, #12]
   28420:	ldr	lr, [r3, #4]
   28424:	b	28384 <__assert_fail@plt+0x167e0>
   28428:	mov	r3, r1
   2842c:	mov	r1, sl
   28430:	add	r0, r3, #1
   28434:	mov	sl, r1
   28438:	b	281c8 <__assert_fail@plt+0x16624>
   2843c:	ldr	r3, [sp, #8]
   28440:	ldr	r3, [r3, #4]
   28444:	cmp	r3, #0
   28448:	beq	28280 <__assert_fail@plt+0x166dc>
   2844c:	ldr	r2, [r6, #28]
   28450:	ldr	r1, [sp, #4]
   28454:	add	r2, r2, r1
   28458:	ldr	r0, [r2, #4]
   2845c:	cmp	r0, #0
   28460:	beq	28280 <__assert_fail@plt+0x166dc>
   28464:	ldr	r1, [sp, #24]
   28468:	add	r3, r3, r0
   2846c:	ldr	r7, [sp, #20]
   28470:	add	r1, r3, r1
   28474:	cmp	r1, r7
   28478:	bgt	284f0 <__assert_fail@plt+0x1694c>
   2847c:	ldr	r1, [sp, #8]
   28480:	add	r0, sp, #20
   28484:	bl	239d4 <__assert_fail@plt+0x11e30>
   28488:	cmp	r0, #0
   2848c:	bne	2851c <__assert_fail@plt+0x16978>
   28490:	ldr	lr, [r5, #4]
   28494:	b	28280 <__assert_fail@plt+0x166dc>
   28498:	mov	r3, r0
   2849c:	mov	r0, r9
   284a0:	add	ip, r3, #1
   284a4:	mov	r9, r0
   284a8:	b	28164 <__assert_fail@plt+0x165c0>
   284ac:	cmp	r7, #0
   284b0:	bgt	281c4 <__assert_fail@plt+0x16620>
   284b4:	b	28280 <__assert_fail@plt+0x166dc>
   284b8:	cmp	lr, #0
   284bc:	mvngt	r7, #0
   284c0:	bgt	280f0 <__assert_fail@plt+0x1654c>
   284c4:	ldr	r3, [sp]
   284c8:	ldr	fp, [r3, #4]
   284cc:	cmp	fp, #0
   284d0:	ble	2828c <__assert_fail@plt+0x166e8>
   284d4:	mvn	r7, #0
   284d8:	b	28158 <__assert_fail@plt+0x165b4>
   284dc:	mov	r3, r2
   284e0:	mov	r2, fp
   284e4:	add	r1, r3, #1
   284e8:	mov	fp, r2
   284ec:	b	28234 <__assert_fail@plt+0x16690>
   284f0:	add	r7, r3, r7
   284f4:	ldr	r0, [sp, #28]
   284f8:	lsl	r1, r7, #2
   284fc:	str	r2, [sp, #4]
   28500:	bl	36970 <__assert_fail@plt+0x24dcc>
   28504:	cmp	r0, #0
   28508:	beq	2853c <__assert_fail@plt+0x16998>
   2850c:	str	r0, [sp, #28]
   28510:	str	r7, [sp, #20]
   28514:	ldr	r2, [sp, #4]
   28518:	b	2847c <__assert_fail@plt+0x168d8>
   2851c:	mov	r7, r0
   28520:	ldr	r0, [sp, #28]
   28524:	bl	184ec <__assert_fail@plt+0x6948>
   28528:	mov	r0, r7
   2852c:	add	sp, sp, #36	; 0x24
   28530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28534:	mov	r0, r4
   28538:	b	28390 <__assert_fail@plt+0x167ec>
   2853c:	mov	r7, #12
   28540:	b	28520 <__assert_fail@plt+0x1697c>
   28544:	ldr	r3, [r0, #36]	; 0x24
   28548:	cmn	r3, #-536870910	; 0xe0000002
   2854c:	bhi	28748 <__assert_fail@plt+0x16ba4>
   28550:	ldr	r2, [r0, #48]	; 0x30
   28554:	push	{r4, r5, r6, lr}
   28558:	lsl	r5, r3, #1
   2855c:	cmp	r5, r2
   28560:	movge	r5, r2
   28564:	ldr	r3, [r0, #80]	; 0x50
   28568:	cmp	r5, r1
   2856c:	movlt	r5, r1
   28570:	cmp	r3, #1
   28574:	mov	r4, r0
   28578:	ble	285c0 <__assert_fail@plt+0x16a1c>
   2857c:	cmn	r5, #-1073741823	; 0xc0000001
   28580:	bhi	2869c <__assert_fail@plt+0x16af8>
   28584:	lsl	r6, r5, #2
   28588:	mov	r1, r6
   2858c:	ldr	r0, [r0, #8]
   28590:	bl	36970 <__assert_fail@plt+0x24dcc>
   28594:	subs	r3, r0, #0
   28598:	beq	2869c <__assert_fail@plt+0x16af8>
   2859c:	ldr	r0, [r4, #12]
   285a0:	str	r3, [r4, #8]
   285a4:	cmp	r0, #0
   285a8:	beq	285c0 <__assert_fail@plt+0x16a1c>
   285ac:	mov	r1, r6
   285b0:	bl	36970 <__assert_fail@plt+0x24dcc>
   285b4:	cmp	r0, #0
   285b8:	beq	2869c <__assert_fail@plt+0x16af8>
   285bc:	str	r0, [r4, #12]
   285c0:	ldrb	r3, [r4, #75]	; 0x4b
   285c4:	cmp	r3, #0
   285c8:	bne	28688 <__assert_fail@plt+0x16ae4>
   285cc:	ldr	r0, [r4, #100]	; 0x64
   285d0:	str	r5, [r4, #36]	; 0x24
   285d4:	cmp	r0, #0
   285d8:	beq	285f4 <__assert_fail@plt+0x16a50>
   285dc:	add	r1, r5, #1
   285e0:	lsl	r1, r1, #2
   285e4:	bl	36970 <__assert_fail@plt+0x24dcc>
   285e8:	cmp	r0, #0
   285ec:	beq	2869c <__assert_fail@plt+0x16af8>
   285f0:	str	r0, [r4, #100]	; 0x64
   285f4:	ldrb	r5, [r4, #72]	; 0x48
   285f8:	ldr	r3, [r4, #80]	; 0x50
   285fc:	cmp	r5, #0
   28600:	beq	28618 <__assert_fail@plt+0x16a74>
   28604:	cmp	r3, #1
   28608:	ble	286bc <__assert_fail@plt+0x16b18>
   2860c:	mov	r0, r4
   28610:	pop	{r4, r5, r6, lr}
   28614:	b	230f8 <__assert_fail@plt+0x11554>
   28618:	cmp	r3, #1
   2861c:	bgt	286ac <__assert_fail@plt+0x16b08>
   28620:	ldr	r0, [r4, #64]	; 0x40
   28624:	cmp	r0, #0
   28628:	popeq	{r4, r5, r6, pc}
   2862c:	ldr	lr, [r4, #36]	; 0x24
   28630:	ldr	r2, [r4, #48]	; 0x30
   28634:	ldr	r3, [r4, #28]
   28638:	cmp	lr, r2
   2863c:	movge	lr, r2
   28640:	cmp	lr, r3
   28644:	bgt	28650 <__assert_fail@plt+0x16aac>
   28648:	b	28678 <__assert_fail@plt+0x16ad4>
   2864c:	ldr	r0, [r4, #64]	; 0x40
   28650:	ldr	r2, [r4]
   28654:	ldr	ip, [r4, #24]
   28658:	add	r2, r2, r3
   2865c:	ldr	r1, [r4, #4]
   28660:	ldrb	r2, [r2, ip]
   28664:	ldrb	r2, [r0, r2]
   28668:	strb	r2, [r1, r3]
   2866c:	add	r3, r3, #1
   28670:	cmp	lr, r3
   28674:	bne	2864c <__assert_fail@plt+0x16aa8>
   28678:	str	r3, [r4, #28]
   2867c:	str	r3, [r4, #32]
   28680:	mov	r0, #0
   28684:	pop	{r4, r5, r6, pc}
   28688:	mov	r1, r5
   2868c:	ldr	r0, [r4, #4]
   28690:	bl	36970 <__assert_fail@plt+0x24dcc>
   28694:	cmp	r0, #0
   28698:	bne	286a4 <__assert_fail@plt+0x16b00>
   2869c:	mov	r0, #12
   286a0:	pop	{r4, r5, r6, pc}
   286a4:	str	r0, [r4, #4]
   286a8:	b	285cc <__assert_fail@plt+0x16a28>
   286ac:	mov	r0, r4
   286b0:	bl	22f58 <__assert_fail@plt+0x113b4>
   286b4:	mov	r0, r5
   286b8:	pop	{r4, r5, r6, pc}
   286bc:	ldr	r6, [r4, #36]	; 0x24
   286c0:	ldr	r3, [r4, #48]	; 0x30
   286c4:	ldr	r5, [r4, #28]
   286c8:	cmp	r6, r3
   286cc:	movge	r6, r3
   286d0:	cmp	r6, r5
   286d4:	ble	28750 <__assert_fail@plt+0x16bac>
   286d8:	bl	11934 <__ctype_toupper_loc@plt>
   286dc:	b	286fc <__assert_fail@plt+0x16b58>
   286e0:	ldr	r1, [r0]
   286e4:	ldr	r2, [r4, #4]
   286e8:	ldr	r3, [r1, r3, lsl #2]
   286ec:	strb	r3, [r2, r5]
   286f0:	add	r5, r5, #1
   286f4:	cmp	r6, r5
   286f8:	beq	28738 <__assert_fail@plt+0x16b94>
   286fc:	ldr	r3, [r4]
   28700:	ldr	r1, [r4, #24]
   28704:	ldr	r2, [r4, #64]	; 0x40
   28708:	add	r3, r3, r5
   2870c:	cmp	r2, #0
   28710:	ldrb	r3, [r3, r1]
   28714:	beq	286e0 <__assert_fail@plt+0x16b3c>
   28718:	ldrb	r3, [r2, r3]
   2871c:	ldr	ip, [r0]
   28720:	ldr	r1, [r4, #4]
   28724:	ldr	r3, [ip, r3, lsl #2]
   28728:	strb	r3, [r1, r5]
   2872c:	add	r5, r5, #1
   28730:	cmp	r6, r5
   28734:	bne	286fc <__assert_fail@plt+0x16b58>
   28738:	str	r6, [r4, #28]
   2873c:	str	r6, [r4, #32]
   28740:	mov	r0, #0
   28744:	pop	{r4, r5, r6, pc}
   28748:	mov	r0, #12
   2874c:	bx	lr
   28750:	mov	r6, r5
   28754:	b	28738 <__assert_fail@plt+0x16b94>
   28758:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2875c:	mov	r3, #0
   28760:	ldr	r7, [r2, #4]
   28764:	str	r3, [r0]
   28768:	cmp	r7, r3
   2876c:	beq	28a08 <__assert_fail@plt+0x16e64>
   28770:	ble	28a14 <__assert_fail@plt+0x16e70>
   28774:	ldr	r3, [r2, #8]
   28778:	mov	r5, r7
   2877c:	add	lr, r3, r7, lsl #2
   28780:	ldr	ip, [r3], #4
   28784:	cmp	lr, r3
   28788:	add	r5, r5, ip
   2878c:	bne	28780 <__assert_fail@plt+0x16bdc>
   28790:	ldr	r3, [r1, #68]	; 0x44
   28794:	ldr	ip, [r1, #32]
   28798:	and	r3, r3, r5
   2879c:	add	r3, r3, r3, lsl #1
   287a0:	lsl	r3, r3, #2
   287a4:	add	lr, ip, r3
   287a8:	ldr	r6, [ip, r3]
   287ac:	cmp	r6, #0
   287b0:	ble	28808 <__assert_fail@plt+0x16c64>
   287b4:	ldr	lr, [lr, #8]
   287b8:	sub	sl, r7, #1
   287bc:	sub	lr, lr, #4
   287c0:	lsl	sl, sl, #2
   287c4:	mov	r3, #0
   287c8:	b	287d8 <__assert_fail@plt+0x16c34>
   287cc:	add	r3, r3, #1
   287d0:	cmp	r3, r6
   287d4:	beq	28808 <__assert_fail@plt+0x16c64>
   287d8:	ldr	r4, [lr, #4]!
   287dc:	ldr	ip, [r4]
   287e0:	cmp	r5, ip
   287e4:	bne	287cc <__assert_fail@plt+0x16c28>
   287e8:	ldr	ip, [r4, #8]
   287ec:	cmp	r7, ip
   287f0:	moveq	ip, sl
   287f4:	moveq	r8, r7
   287f8:	beq	28970 <__assert_fail@plt+0x16dcc>
   287fc:	add	r3, r3, #1
   28800:	cmp	r3, r6
   28804:	bne	287d8 <__assert_fail@plt+0x16c34>
   28808:	mov	r6, r1
   2880c:	mov	r7, r0
   28810:	mov	r1, #1
   28814:	mov	r0, #56	; 0x38
   28818:	mov	r9, r2
   2881c:	bl	368fc <__assert_fail@plt+0x24d58>
   28820:	subs	r4, r0, #0
   28824:	beq	289f4 <__assert_fail@plt+0x16e50>
   28828:	ldr	r0, [r9, #4]
   2882c:	add	r8, r4, #4
   28830:	cmp	r0, #0
   28834:	str	r0, [r4, #8]
   28838:	ble	28990 <__assert_fail@plt+0x16dec>
   2883c:	str	r0, [r4, #4]
   28840:	lsl	r0, r0, #2
   28844:	bl	36944 <__assert_fail@plt+0x24da0>
   28848:	cmp	r0, #0
   2884c:	str	r0, [r4, #12]
   28850:	beq	28a1c <__assert_fail@plt+0x16e78>
   28854:	ldr	fp, [r9, #4]
   28858:	ldr	r1, [r9, #8]
   2885c:	lsl	sl, fp, #2
   28860:	mov	r2, sl
   28864:	bl	11784 <memcpy@plt>
   28868:	cmp	fp, #0
   2886c:	str	r8, [r4, #40]	; 0x28
   28870:	ble	28934 <__assert_fail@plt+0x16d90>
   28874:	ldr	ip, [r9, #8]
   28878:	ldr	r9, [r6]
   2887c:	add	lr, ip, sl
   28880:	ldr	sl, [pc, #424]	; 28a30 <__assert_fail@plt+0x16e8c>
   28884:	b	288e0 <__assert_fail@plt+0x16d3c>
   28888:	ldrb	r3, [r2, #6]
   2888c:	ldrb	r1, [r4, #52]	; 0x34
   28890:	cmp	r0, #2
   28894:	lsr	r3, r3, #4
   28898:	orr	r3, r3, r1, lsr #5
   2889c:	and	r3, r3, #1
   288a0:	bic	r1, r1, #32
   288a4:	orr	r3, r1, r3, lsl #5
   288a8:	strb	r3, [r4, #52]	; 0x34
   288ac:	uxtbeq	r3, r3
   288b0:	orreq	r3, r3, #16
   288b4:	strbeq	r3, [r4, #52]	; 0x34
   288b8:	beq	288d8 <__assert_fail@plt+0x16d34>
   288bc:	cmp	r0, #4
   288c0:	beq	28980 <__assert_fail@plt+0x16ddc>
   288c4:	cmp	r0, #12
   288c8:	beq	28920 <__assert_fail@plt+0x16d7c>
   288cc:	ldr	r3, [r2, #4]
   288d0:	tst	r3, sl
   288d4:	bne	28920 <__assert_fail@plt+0x16d7c>
   288d8:	cmp	lr, ip
   288dc:	beq	28934 <__assert_fail@plt+0x16d90>
   288e0:	ldr	r2, [ip], #4
   288e4:	add	r2, r9, r2, lsl #3
   288e8:	ldrb	r0, [r2, #4]
   288ec:	cmp	r0, #1
   288f0:	bne	28888 <__assert_fail@plt+0x16ce4>
   288f4:	ldr	r3, [r2, #4]
   288f8:	tst	r3, sl
   288fc:	beq	288d8 <__assert_fail@plt+0x16d34>
   28900:	ldrb	r3, [r2, #6]
   28904:	ldrb	r2, [r4, #52]	; 0x34
   28908:	lsr	r3, r3, #4
   2890c:	orr	r3, r3, r2, lsr #5
   28910:	and	r3, r3, #1
   28914:	bic	r2, r2, #32
   28918:	orr	r3, r2, r3, lsl #5
   2891c:	strb	r3, [r4, #52]	; 0x34
   28920:	ldrb	r3, [r4, #52]	; 0x34
   28924:	cmp	lr, ip
   28928:	orr	r3, r3, #128	; 0x80
   2892c:	strb	r3, [r4, #52]	; 0x34
   28930:	bne	288e0 <__assert_fail@plt+0x16d3c>
   28934:	mov	r2, r5
   28938:	mov	r0, r6
   2893c:	mov	r1, r4
   28940:	bl	22e1c <__assert_fail@plt+0x11278>
   28944:	cmp	r0, #0
   28948:	bne	289a8 <__assert_fail@plt+0x16e04>
   2894c:	mov	r0, r4
   28950:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28954:	ldr	fp, [r4, #12]
   28958:	ldr	r9, [r2, #8]
   2895c:	ldr	fp, [fp, ip]
   28960:	ldr	r9, [r9, ip]
   28964:	sub	ip, ip, #4
   28968:	cmp	fp, r9
   2896c:	bne	287cc <__assert_fail@plt+0x16c28>
   28970:	subs	r8, r8, #1
   28974:	bpl	28954 <__assert_fail@plt+0x16db0>
   28978:	mov	r0, r4
   2897c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28980:	ldrb	r3, [r4, #52]	; 0x34
   28984:	orr	r3, r3, #64	; 0x40
   28988:	strb	r3, [r4, #52]	; 0x34
   2898c:	b	288d8 <__assert_fail@plt+0x16d34>
   28990:	mov	r3, #0
   28994:	str	r3, [r4, #4]
   28998:	str	r3, [r8, #4]
   2899c:	str	r3, [r8, #8]
   289a0:	str	r8, [r4, #40]	; 0x28
   289a4:	b	28934 <__assert_fail@plt+0x16d90>
   289a8:	ldr	r0, [r4, #24]
   289ac:	bl	184ec <__assert_fail@plt+0x6948>
   289b0:	ldr	r0, [r4, #36]	; 0x24
   289b4:	bl	184ec <__assert_fail@plt+0x6948>
   289b8:	ldr	r3, [r4, #40]	; 0x28
   289bc:	cmp	r8, r3
   289c0:	beq	289d4 <__assert_fail@plt+0x16e30>
   289c4:	ldr	r0, [r3, #8]
   289c8:	bl	184ec <__assert_fail@plt+0x6948>
   289cc:	ldr	r0, [r4, #40]	; 0x28
   289d0:	bl	184ec <__assert_fail@plt+0x6948>
   289d4:	ldr	r0, [r4, #12]
   289d8:	bl	184ec <__assert_fail@plt+0x6948>
   289dc:	ldr	r0, [r4, #48]	; 0x30
   289e0:	bl	184ec <__assert_fail@plt+0x6948>
   289e4:	ldr	r0, [r4, #44]	; 0x2c
   289e8:	bl	184ec <__assert_fail@plt+0x6948>
   289ec:	mov	r0, r4
   289f0:	bl	184ec <__assert_fail@plt+0x6948>
   289f4:	mov	r4, #0
   289f8:	mov	r3, #12
   289fc:	str	r3, [r7]
   28a00:	mov	r0, r4
   28a04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a08:	mov	r4, r7
   28a0c:	mov	r0, r4
   28a10:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28a14:	mov	r5, r7
   28a18:	b	28790 <__assert_fail@plt+0x16bec>
   28a1c:	str	r0, [r4, #8]
   28a20:	str	r0, [r4, #4]
   28a24:	mov	r0, r4
   28a28:	bl	184ec <__assert_fail@plt+0x6948>
   28a2c:	b	289f4 <__assert_fail@plt+0x16e50>
   28a30:	andeq	pc, r3, r0, lsl #30
   28a34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a38:	mov	r6, #0
   28a3c:	ldr	r5, [r0, #108]	; 0x6c
   28a40:	sub	sp, sp, #36	; 0x24
   28a44:	mov	r4, r5
   28a48:	cmp	r6, r4
   28a4c:	bge	28aa8 <__assert_fail@plt+0x16f04>
   28a50:	add	lr, r6, r4
   28a54:	ldr	r7, [r0, #116]	; 0x74
   28a58:	add	lr, lr, lr, lsr #31
   28a5c:	asr	lr, lr, #1
   28a60:	add	ip, lr, lr, lsl #1
   28a64:	add	ip, r7, ip, lsl #3
   28a68:	ldr	ip, [ip, #4]
   28a6c:	cmp	r2, ip
   28a70:	ble	28a98 <__assert_fail@plt+0x16ef4>
   28a74:	b	28e08 <__assert_fail@plt+0x17264>
   28a78:	asr	ip, ip, #1
   28a7c:	mov	r8, ip
   28a80:	add	r4, ip, ip, lsl #1
   28a84:	add	r4, r7, r4, lsl #3
   28a88:	ldr	r4, [r4, #4]
   28a8c:	cmp	r2, r4
   28a90:	bgt	28e10 <__assert_fail@plt+0x1726c>
   28a94:	mov	lr, ip
   28a98:	add	ip, lr, r6
   28a9c:	cmp	lr, r6
   28aa0:	add	ip, ip, ip, lsr #31
   28aa4:	bgt	28a78 <__assert_fail@plt+0x16ed4>
   28aa8:	cmp	r5, r6
   28aac:	ble	28b7c <__assert_fail@plt+0x16fd8>
   28ab0:	add	ip, r6, r6, lsl #1
   28ab4:	ldr	r5, [r0, #116]	; 0x74
   28ab8:	lsl	ip, ip, #3
   28abc:	add	lr, r5, ip
   28ac0:	cmn	r6, #1
   28ac4:	ldr	lr, [lr, #4]
   28ac8:	movne	r6, #0
   28acc:	moveq	r6, #1
   28ad0:	cmp	lr, r2
   28ad4:	orrne	r6, r6, #1
   28ad8:	cmp	r6, #0
   28adc:	bne	28b7c <__assert_fail@plt+0x16fd8>
   28ae0:	ldr	r9, [r0, #84]	; 0x54
   28ae4:	mov	r7, r1
   28ae8:	mov	r8, r0
   28aec:	str	r3, [sp, #12]
   28af0:	add	r3, ip, #24
   28af4:	str	r2, [sp, #4]
   28af8:	str	r3, [sp, #8]
   28afc:	add	r5, r5, r3
   28b00:	ldr	ip, [r7, #4]
   28b04:	cmp	ip, #0
   28b08:	ble	28b6c <__assert_fail@plt+0x16fc8>
   28b0c:	sub	ip, ip, #1
   28b10:	ldr	r0, [r5, #-24]	; 0xffffffe8
   28b14:	ldr	r1, [r7, #8]
   28b18:	mov	r4, ip
   28b1c:	mov	lr, r6
   28b20:	cmp	lr, r4
   28b24:	bcs	28b60 <__assert_fail@plt+0x16fbc>
   28b28:	add	r2, lr, r4
   28b2c:	lsr	r2, r2, #1
   28b30:	ldr	r3, [r1, r2, lsl #2]
   28b34:	cmp	r0, r3
   28b38:	ble	28b50 <__assert_fail@plt+0x16fac>
   28b3c:	b	28b8c <__assert_fail@plt+0x16fe8>
   28b40:	ldr	r4, [r1, r3, lsl #2]
   28b44:	cmp	r0, r4
   28b48:	bgt	28b94 <__assert_fail@plt+0x16ff0>
   28b4c:	mov	r2, r3
   28b50:	add	r3, lr, r2
   28b54:	cmp	lr, r2
   28b58:	lsr	r3, r3, #1
   28b5c:	bcc	28b40 <__assert_fail@plt+0x16f9c>
   28b60:	ldr	r3, [r1, lr, lsl #2]
   28b64:	cmp	r0, r3
   28b68:	beq	28ba0 <__assert_fail@plt+0x16ffc>
   28b6c:	add	r5, r5, #24
   28b70:	ldrb	r3, [r5, #-28]	; 0xffffffe4
   28b74:	cmp	r3, #0
   28b78:	bne	28b00 <__assert_fail@plt+0x16f5c>
   28b7c:	mov	sl, #0
   28b80:	mov	r0, sl
   28b84:	add	sp, sp, #36	; 0x24
   28b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b8c:	mov	r3, r2
   28b90:	mov	r2, r4
   28b94:	add	lr, r3, #1
   28b98:	mov	r4, r2
   28b9c:	b	28b20 <__assert_fail@plt+0x16f7c>
   28ba0:	ldr	r2, [sp, #4]
   28ba4:	ldr	sl, [r5, #-12]
   28ba8:	ldr	r3, [r5, #-16]
   28bac:	add	sl, r2, sl
   28bb0:	sub	sl, sl, r3
   28bb4:	cmp	r2, sl
   28bb8:	beq	28ce8 <__assert_fail@plt+0x17144>
   28bbc:	ldr	r2, [r8, #100]	; 0x64
   28bc0:	ldr	r3, [r9, #12]
   28bc4:	ldr	fp, [r2, sl, lsl #2]
   28bc8:	ldr	r4, [r3, r0, lsl #2]
   28bcc:	cmp	fp, #0
   28bd0:	beq	28e1c <__assert_fail@plt+0x17278>
   28bd4:	ldr	ip, [fp, #8]
   28bd8:	cmp	ip, #0
   28bdc:	ble	28df4 <__assert_fail@plt+0x17250>
   28be0:	ldr	lr, [fp, #12]
   28be4:	sub	r0, ip, #1
   28be8:	mov	r1, r6
   28bec:	cmp	r1, r0
   28bf0:	bcs	28c2c <__assert_fail@plt+0x17088>
   28bf4:	add	r2, r1, r0
   28bf8:	lsr	r2, r2, #1
   28bfc:	ldr	r3, [lr, r2, lsl #2]
   28c00:	cmp	r4, r3
   28c04:	ble	28c1c <__assert_fail@plt+0x17078>
   28c08:	b	28cd4 <__assert_fail@plt+0x17130>
   28c0c:	ldr	r0, [lr, r3, lsl #2]
   28c10:	cmp	r4, r0
   28c14:	bgt	28cdc <__assert_fail@plt+0x17138>
   28c18:	mov	r2, r3
   28c1c:	add	r3, r2, r1
   28c20:	cmp	r2, r1
   28c24:	lsr	r3, r3, #1
   28c28:	bhi	28c0c <__assert_fail@plt+0x17068>
   28c2c:	ldr	r3, [lr, r1, lsl #2]
   28c30:	cmp	r4, r3
   28c34:	beq	28b6c <__assert_fail@plt+0x16fc8>
   28c38:	lsl	r0, ip, #2
   28c3c:	str	ip, [sp, #24]
   28c40:	str	ip, [sp, #20]
   28c44:	bl	36944 <__assert_fail@plt+0x24da0>
   28c48:	cmp	r0, #0
   28c4c:	mov	r3, r0
   28c50:	str	r0, [sp, #28]
   28c54:	beq	28e94 <__assert_fail@plt+0x172f0>
   28c58:	ldr	r2, [fp, #8]
   28c5c:	ldr	r1, [fp, #12]
   28c60:	lsl	r2, r2, #2
   28c64:	bl	11784 <memcpy@plt>
   28c68:	mov	r3, r6
   28c6c:	mov	r1, r4
   28c70:	add	r0, sp, #20
   28c74:	str	r3, [sp, #16]
   28c78:	bl	23828 <__assert_fail@plt+0x11c84>
   28c7c:	ldr	r2, [sp, #16]
   28c80:	eor	r3, r0, #1
   28c84:	cmp	r2, #0
   28c88:	orrne	r3, r3, #1
   28c8c:	tst	r3, #255	; 0xff
   28c90:	bne	28e48 <__assert_fail@plt+0x172a4>
   28c94:	add	r2, sp, #20
   28c98:	mov	r1, r9
   28c9c:	add	r0, sp, #16
   28ca0:	ldr	r4, [r8, #100]	; 0x64
   28ca4:	bl	28758 <__assert_fail@plt+0x16bb4>
   28ca8:	str	r0, [r4, sl, lsl #2]
   28cac:	ldr	r0, [sp, #28]
   28cb0:	bl	184ec <__assert_fail@plt+0x6948>
   28cb4:	ldr	r3, [r8, #100]	; 0x64
   28cb8:	ldr	r3, [r3, sl, lsl #2]
   28cbc:	cmp	r3, #0
   28cc0:	bne	28b6c <__assert_fail@plt+0x16fc8>
   28cc4:	ldr	sl, [sp, #16]
   28cc8:	cmp	sl, #0
   28ccc:	beq	28b6c <__assert_fail@plt+0x16fc8>
   28cd0:	b	28b80 <__assert_fail@plt+0x16fdc>
   28cd4:	mov	r3, r2
   28cd8:	mov	r2, r0
   28cdc:	add	r1, r3, #1
   28ce0:	mov	r0, r2
   28ce4:	b	28bec <__assert_fail@plt+0x17048>
   28ce8:	add	r0, r0, r0, lsl #1
   28cec:	ldr	r3, [r9, #20]
   28cf0:	mov	lr, r6
   28cf4:	add	r3, r3, r0, lsl #2
   28cf8:	ldr	r3, [r3, #8]
   28cfc:	ldr	r4, [r3]
   28d00:	cmp	lr, ip
   28d04:	bcs	28d40 <__assert_fail@plt+0x1719c>
   28d08:	add	r2, lr, ip
   28d0c:	lsr	r2, r2, #1
   28d10:	ldr	r3, [r1, r2, lsl #2]
   28d14:	cmp	r4, r3
   28d18:	ble	28d30 <__assert_fail@plt+0x1718c>
   28d1c:	b	28de0 <__assert_fail@plt+0x1723c>
   28d20:	ldr	r0, [r1, r3, lsl #2]
   28d24:	cmp	r4, r0
   28d28:	bgt	28de8 <__assert_fail@plt+0x17244>
   28d2c:	mov	r2, r3
   28d30:	add	r3, lr, r2
   28d34:	cmp	lr, r2
   28d38:	lsr	r3, r3, #1
   28d3c:	bcc	28d20 <__assert_fail@plt+0x1717c>
   28d40:	ldr	r3, [r1, lr, lsl #2]
   28d44:	cmp	r4, r3
   28d48:	beq	28b6c <__assert_fail@plt+0x16fc8>
   28d4c:	mov	r3, #1
   28d50:	mov	r0, #4
   28d54:	str	r3, [sp, #20]
   28d58:	str	r3, [sp, #24]
   28d5c:	bl	36944 <__assert_fail@plt+0x24da0>
   28d60:	cmp	r0, #0
   28d64:	str	r0, [sp, #28]
   28d68:	movne	ip, r6
   28d6c:	strne	r4, [r0]
   28d70:	beq	28ea4 <__assert_fail@plt+0x17300>
   28d74:	ldr	r3, [sp, #72]	; 0x48
   28d78:	ldr	r2, [sp, #12]
   28d7c:	add	r1, sp, #20
   28d80:	mov	r0, r9
   28d84:	str	ip, [sp, #16]
   28d88:	bl	271e8 <__assert_fail@plt+0x15644>
   28d8c:	ldr	sl, [sp, #24]
   28d90:	cmp	sl, #0
   28d94:	mov	r4, r0
   28d98:	beq	28dbc <__assert_fail@plt+0x17218>
   28d9c:	ldm	r7, {r2, r3}
   28da0:	add	r3, r3, sl, lsl #1
   28da4:	cmp	r2, r3
   28da8:	blt	28e6c <__assert_fail@plt+0x172c8>
   28dac:	add	r1, sp, #20
   28db0:	mov	r0, r7
   28db4:	bl	23dac <__assert_fail@plt+0x12208>
   28db8:	mov	sl, r0
   28dbc:	ldr	r0, [sp, #28]
   28dc0:	bl	184ec <__assert_fail@plt+0x6948>
   28dc4:	ldr	r3, [sp, #16]
   28dc8:	orr	r2, r4, r3
   28dcc:	orrs	r2, r2, sl
   28dd0:	bne	28eb4 <__assert_fail@plt+0x17310>
   28dd4:	ldr	r5, [r8, #116]	; 0x74
   28dd8:	ldr	r3, [sp, #8]
   28ddc:	b	28afc <__assert_fail@plt+0x16f58>
   28de0:	mov	r3, r2
   28de4:	mov	r2, ip
   28de8:	add	lr, r3, #1
   28dec:	mov	ip, r2
   28df0:	b	28d00 <__assert_fail@plt+0x1715c>
   28df4:	str	r6, [sp, #20]
   28df8:	str	r6, [sp, #24]
   28dfc:	str	r6, [sp, #28]
   28e00:	mov	r3, #0
   28e04:	b	28c6c <__assert_fail@plt+0x170c8>
   28e08:	mov	r8, lr
   28e0c:	mov	lr, r4
   28e10:	add	r6, r8, #1
   28e14:	mov	r4, lr
   28e18:	b	28a48 <__assert_fail@plt+0x16ea4>
   28e1c:	mov	r3, #1
   28e20:	mov	r0, #4
   28e24:	str	r3, [sp, #20]
   28e28:	str	r3, [sp, #24]
   28e2c:	bl	36944 <__assert_fail@plt+0x24da0>
   28e30:	cmp	r0, #0
   28e34:	str	r0, [sp, #28]
   28e38:	beq	28e5c <__assert_fail@plt+0x172b8>
   28e3c:	str	r4, [r0]
   28e40:	str	fp, [sp, #16]
   28e44:	b	28c94 <__assert_fail@plt+0x170f0>
   28e48:	ldr	r0, [sp, #28]
   28e4c:	bl	184ec <__assert_fail@plt+0x6948>
   28e50:	ldr	sl, [sp, #16]
   28e54:	cmp	sl, #0
   28e58:	bne	28b80 <__assert_fail@plt+0x16fdc>
   28e5c:	mov	sl, #12
   28e60:	mov	r0, sl
   28e64:	add	sp, sp, #36	; 0x24
   28e68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28e6c:	add	sl, sl, r2
   28e70:	ldr	r0, [r7, #8]
   28e74:	lsl	r1, sl, #3
   28e78:	bl	36970 <__assert_fail@plt+0x24dcc>
   28e7c:	lsl	sl, sl, #1
   28e80:	cmp	r0, #0
   28e84:	beq	28ecc <__assert_fail@plt+0x17328>
   28e88:	str	r0, [r7, #8]
   28e8c:	str	sl, [r7]
   28e90:	b	28dac <__assert_fail@plt+0x17208>
   28e94:	str	r3, [sp, #24]
   28e98:	str	r3, [sp, #20]
   28e9c:	mov	r3, #12
   28ea0:	b	28c6c <__assert_fail@plt+0x170c8>
   28ea4:	str	r0, [sp, #24]
   28ea8:	str	r0, [sp, #20]
   28eac:	mov	ip, #12
   28eb0:	b	28d74 <__assert_fail@plt+0x171d0>
   28eb4:	cmp	r3, #0
   28eb8:	movne	sl, r3
   28ebc:	bne	28b80 <__assert_fail@plt+0x16fdc>
   28ec0:	cmp	r4, #0
   28ec4:	movne	sl, r4
   28ec8:	b	28b80 <__assert_fail@plt+0x16fdc>
   28ecc:	mov	sl, #12
   28ed0:	b	28dbc <__assert_fail@plt+0x17218>
   28ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28ed8:	mov	sl, r2
   28edc:	ldr	r2, [r0, #100]	; 0x64
   28ee0:	sub	sp, sp, #116	; 0x74
   28ee4:	mov	ip, #0
   28ee8:	ldr	r8, [r2, sl, lsl #2]
   28eec:	mov	r5, r3
   28ef0:	cmp	r8, ip
   28ef4:	lsl	r3, sl, #2
   28ef8:	str	r3, [sp, #36]	; 0x24
   28efc:	str	r0, [sp, #32]
   28f00:	mov	fp, r1
   28f04:	ldr	r6, [r0, #84]	; 0x54
   28f08:	str	ip, [sp, #64]	; 0x40
   28f0c:	ldr	r3, [r5, #4]
   28f10:	beq	296ec <__assert_fail@plt+0x17b48>
   28f14:	add	r2, r8, #4
   28f18:	cmp	r3, ip
   28f1c:	str	r2, [sp, #20]
   28f20:	bne	28f60 <__assert_fail@plt+0x173bc>
   28f24:	ldr	r3, [fp]
   28f28:	mov	r2, #0
   28f2c:	str	r2, [r3, sl, lsl #2]
   28f30:	ldr	r3, [sp, #20]
   28f34:	cmp	r3, #0
   28f38:	beq	28f54 <__assert_fail@plt+0x173b0>
   28f3c:	ldr	r3, [sp, #32]
   28f40:	ldr	r3, [r3, #100]	; 0x64
   28f44:	ldr	r3, [r3, sl, lsl #2]
   28f48:	ldrb	r3, [r3, #52]	; 0x34
   28f4c:	ands	r3, r3, #64	; 0x40
   28f50:	bne	2904c <__assert_fail@plt+0x174a8>
   28f54:	mov	r0, r3
   28f58:	add	sp, sp, #116	; 0x74
   28f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28f60:	add	r0, sp, #112	; 0x70
   28f64:	mov	r2, r5
   28f68:	str	ip, [r0, #-28]!	; 0xffffffe4
   28f6c:	mov	r1, r6
   28f70:	bl	28758 <__assert_fail@plt+0x16bb4>
   28f74:	ldr	r3, [sp, #84]	; 0x54
   28f78:	cmp	r3, #0
   28f7c:	mov	r9, r0
   28f80:	bne	28f54 <__assert_fail@plt+0x173b0>
   28f84:	ldr	r7, [r0, #28]
   28f88:	cmp	r7, #0
   28f8c:	addne	r3, r0, #28
   28f90:	strne	r3, [sp, #16]
   28f94:	bne	293e4 <__assert_fail@plt+0x17840>
   28f98:	ldr	r0, [r5, #4]
   28f9c:	str	r7, [r9, #32]
   28fa0:	str	r0, [r9, #28]
   28fa4:	lsl	r0, r0, #2
   28fa8:	bl	36944 <__assert_fail@plt+0x24da0>
   28fac:	add	r3, r9, #28
   28fb0:	str	r3, [sp, #16]
   28fb4:	cmp	r0, #0
   28fb8:	str	r0, [r9, #36]	; 0x24
   28fbc:	beq	29560 <__assert_fail@plt+0x179bc>
   28fc0:	ldr	r2, [r5, #4]
   28fc4:	str	r7, [sp, #84]	; 0x54
   28fc8:	cmp	r2, #0
   28fcc:	movgt	r4, r3
   28fd0:	strgt	r8, [sp, #24]
   28fd4:	strgt	sl, [sp, #28]
   28fd8:	bgt	2901c <__assert_fail@plt+0x17478>
   28fdc:	b	293e4 <__assert_fail@plt+0x17840>
   28fe0:	ldr	r2, [r9, #32]
   28fe4:	ldr	r0, [r9, #28]
   28fe8:	add	r2, r2, r1, lsl #1
   28fec:	cmp	r0, r2
   28ff0:	blt	296c4 <__assert_fail@plt+0x17b20>
   28ff4:	mov	r1, r8
   28ff8:	mov	r0, r4
   28ffc:	bl	23dac <__assert_fail@plt+0x12208>
   29000:	cmp	r0, #0
   29004:	str	r0, [sp, #84]	; 0x54
   29008:	bne	29560 <__assert_fail@plt+0x179bc>
   2900c:	ldr	r2, [r5, #4]
   29010:	add	r7, r7, #1
   29014:	cmp	r7, r2
   29018:	bge	293dc <__assert_fail@plt+0x17838>
   2901c:	ldr	r3, [r5, #8]
   29020:	ldr	r1, [r6, #28]
   29024:	ldr	r3, [r3, r7, lsl #2]
   29028:	add	r3, r3, r3, lsl #1
   2902c:	adds	r8, r1, r3, lsl #2
   29030:	beq	29040 <__assert_fail@plt+0x1749c>
   29034:	ldr	r1, [r8, #4]
   29038:	cmp	r1, #0
   2903c:	bne	28fe0 <__assert_fail@plt+0x1743c>
   29040:	mov	r3, #0
   29044:	str	r3, [sp, #84]	; 0x54
   29048:	b	29010 <__assert_fail@plt+0x1746c>
   2904c:	ldr	r4, [sp, #32]
   29050:	mov	r3, #0
   29054:	mov	r0, r3
   29058:	ldr	ip, [r4, #108]	; 0x6c
   2905c:	mov	r3, ip
   29060:	cmp	r0, r3
   29064:	bge	290c0 <__assert_fail@plt+0x1751c>
   29068:	add	r2, r0, r3
   2906c:	ldr	lr, [r4, #116]	; 0x74
   29070:	add	r2, r2, r2, lsr #31
   29074:	asr	r2, r2, #1
   29078:	add	r1, r2, r2, lsl #1
   2907c:	add	r1, lr, r1, lsl #3
   29080:	ldr	r1, [r1, #4]
   29084:	cmp	sl, r1
   29088:	ble	290b0 <__assert_fail@plt+0x1750c>
   2908c:	b	293c8 <__assert_fail@plt+0x17824>
   29090:	asr	r3, r3, #1
   29094:	mov	r5, r3
   29098:	add	r1, r3, r3, lsl #1
   2909c:	add	r1, lr, r1, lsl #3
   290a0:	ldr	r1, [r1, #4]
   290a4:	cmp	sl, r1
   290a8:	bgt	293d0 <__assert_fail@plt+0x1782c>
   290ac:	mov	r2, r3
   290b0:	add	r3, r2, r0
   290b4:	cmp	r2, r0
   290b8:	add	r3, r3, r3, lsr #31
   290bc:	bgt	29090 <__assert_fail@plt+0x174ec>
   290c0:	cmp	ip, r0
   290c4:	str	r0, [sp, #40]	; 0x28
   290c8:	ble	293b8 <__assert_fail@plt+0x17814>
   290cc:	ldr	r3, [sp, #32]
   290d0:	add	r2, r0, r0, lsl #1
   290d4:	ldr	r3, [r3, #116]	; 0x74
   290d8:	lsl	r2, r2, #3
   290dc:	add	r3, r3, r2
   290e0:	str	r2, [sp, #56]	; 0x38
   290e4:	ldr	r3, [r3, #4]
   290e8:	cmp	sl, r3
   290ec:	bne	293b8 <__assert_fail@plt+0x17814>
   290f0:	ldr	r3, [sp, #40]	; 0x28
   290f4:	cmn	r3, #1
   290f8:	beq	293b8 <__assert_fail@plt+0x17814>
   290fc:	ldr	r3, [sp, #20]
   29100:	ldr	r2, [sp, #32]
   29104:	ldr	r0, [r3, #4]
   29108:	mov	r3, #0
   2910c:	cmp	r0, r3
   29110:	str	r3, [sp, #84]	; 0x54
   29114:	ldr	r8, [r2, #84]	; 0x54
   29118:	ble	293b8 <__assert_fail@plt+0x17814>
   2911c:	str	r3, [sp, #16]
   29120:	add	r3, fp, #24
   29124:	str	r3, [sp, #44]	; 0x2c
   29128:	add	r3, fp, #20
   2912c:	str	r3, [sp, #48]	; 0x30
   29130:	b	29150 <__assert_fail@plt+0x175ac>
   29134:	cmp	r3, #4
   29138:	beq	2918c <__assert_fail@plt+0x175e8>
   2913c:	ldr	r3, [sp, #16]
   29140:	add	r3, r3, #1
   29144:	cmp	r3, r0
   29148:	str	r3, [sp, #16]
   2914c:	bge	293a8 <__assert_fail@plt+0x17804>
   29150:	ldr	r3, [sp, #20]
   29154:	ldr	ip, [sp, #16]
   29158:	ldr	r2, [fp, #8]
   2915c:	ldr	r1, [r3, #8]
   29160:	ldr	r3, [r8]
   29164:	ldr	r6, [r1, ip, lsl #2]
   29168:	cmp	r6, r2
   2916c:	add	r3, r3, r6, lsl #3
   29170:	ldrb	r3, [r3, #4]
   29174:	bne	29134 <__assert_fail@plt+0x17590>
   29178:	ldr	r2, [fp, #12]
   2917c:	cmp	sl, r2
   29180:	beq	2913c <__assert_fail@plt+0x17598>
   29184:	cmp	r3, #4
   29188:	bne	2913c <__assert_fail@plt+0x17598>
   2918c:	ldr	r3, [sp, #32]
   29190:	ldr	r2, [sp, #56]	; 0x38
   29194:	ldr	r4, [sp, #40]	; 0x28
   29198:	ldr	r7, [r3, #116]	; 0x74
   2919c:	add	r3, r6, r6, lsl #1
   291a0:	add	r7, r7, r2
   291a4:	lsl	r3, r3, #2
   291a8:	str	r3, [sp, #28]
   291ac:	lsl	r3, r6, #2
   291b0:	str	r3, [sp, #24]
   291b4:	mov	r5, r2
   291b8:	b	291d4 <__assert_fail@plt+0x17630>
   291bc:	ldrb	r3, [r7, #20]
   291c0:	add	r4, r4, #1
   291c4:	add	r5, r5, #24
   291c8:	cmp	r3, #0
   291cc:	add	r7, r7, #24
   291d0:	beq	29584 <__assert_fail@plt+0x179e0>
   291d4:	ldr	r3, [r7]
   291d8:	cmp	r6, r3
   291dc:	bne	291bc <__assert_fail@plt+0x17618>
   291e0:	ldr	r3, [r7, #8]
   291e4:	ldr	r9, [r7, #12]
   291e8:	sub	r9, r9, r3
   291ec:	cmp	r9, #0
   291f0:	add	r9, sl, r9
   291f4:	ldreq	r3, [r8, #20]
   291f8:	ldreq	r2, [sp, #28]
   291fc:	ldrne	r3, [r8, #12]
   29200:	addeq	r3, r3, r2
   29204:	ldrne	r2, [sp, #24]
   29208:	ldreq	r3, [r3, #8]
   2920c:	ldrne	ip, [r3, r2]
   29210:	ldreq	ip, [r3]
   29214:	ldr	r3, [fp, #12]
   29218:	cmp	r9, r3
   2921c:	bgt	291bc <__assert_fail@plt+0x17618>
   29220:	ldr	r3, [fp]
   29224:	ldr	r3, [r3, r9, lsl #2]
   29228:	cmp	r3, #0
   2922c:	beq	291bc <__assert_fail@plt+0x17618>
   29230:	ldr	r0, [r3, #8]
   29234:	cmp	r0, #0
   29238:	ble	291bc <__assert_fail@plt+0x17618>
   2923c:	ldr	lr, [r3, #12]
   29240:	sub	r0, r0, #1
   29244:	mov	r1, #0
   29248:	cmp	r1, r0
   2924c:	bcs	29288 <__assert_fail@plt+0x176e4>
   29250:	add	r2, r1, r0
   29254:	lsr	r2, r2, #1
   29258:	ldr	r3, [lr, r2, lsl #2]
   2925c:	cmp	r3, ip
   29260:	bge	29278 <__assert_fail@plt+0x176d4>
   29264:	b	29570 <__assert_fail@plt+0x179cc>
   29268:	ldr	r0, [lr, r3, lsl #2]
   2926c:	cmp	ip, r0
   29270:	bgt	29578 <__assert_fail@plt+0x179d4>
   29274:	mov	r2, r3
   29278:	add	r3, r1, r2
   2927c:	cmp	r1, r2
   29280:	lsr	r3, r3, #1
   29284:	bcc	29268 <__assert_fail@plt+0x176c4>
   29288:	ldr	r3, [lr, r1, lsl #2]
   2928c:	cmp	ip, r3
   29290:	bne	291bc <__assert_fail@plt+0x17618>
   29294:	str	r9, [sp, #8]
   29298:	stm	sp, {sl, ip}
   2929c:	mov	r3, r6
   292a0:	ldr	r2, [sp, #44]	; 0x2c
   292a4:	ldr	r1, [sp, #48]	; 0x30
   292a8:	ldr	r0, [sp, #32]
   292ac:	bl	27d78 <__assert_fail@plt+0x161d4>
   292b0:	cmp	r0, #0
   292b4:	bne	291bc <__assert_fail@plt+0x17618>
   292b8:	ldr	r3, [sp, #84]	; 0x54
   292bc:	cmp	r3, #0
   292c0:	beq	2966c <__assert_fail@plt+0x17ac8>
   292c4:	mov	r1, r4
   292c8:	add	r0, sp, #100	; 0x64
   292cc:	str	r6, [sp, #92]	; 0x5c
   292d0:	str	sl, [sp, #96]	; 0x60
   292d4:	bl	23828 <__assert_fail@plt+0x11c84>
   292d8:	cmp	r0, #0
   292dc:	beq	2992c <__assert_fail@plt+0x17d88>
   292e0:	ldr	r3, [sp, #84]	; 0x54
   292e4:	ldr	r2, [sp, #36]	; 0x24
   292e8:	add	r1, sp, #84	; 0x54
   292ec:	ldr	r0, [sp, #32]
   292f0:	ldr	r3, [r3, r2]
   292f4:	str	r3, [sp, #52]	; 0x34
   292f8:	bl	29974 <__assert_fail@plt+0x17dd0>
   292fc:	subs	ip, r0, #0
   29300:	bne	29698 <__assert_fail@plt+0x17af4>
   29304:	ldr	r7, [fp, #4]
   29308:	cmp	r7, #0
   2930c:	beq	29590 <__assert_fail@plt+0x179ec>
   29310:	cmp	sl, #0
   29314:	ldr	r9, [sp, #84]	; 0x54
   29318:	blt	29594 <__assert_fail@plt+0x179f0>
   2931c:	str	r4, [sp, #60]	; 0x3c
   29320:	mov	r4, ip
   29324:	b	29388 <__assert_fail@plt+0x177e4>
   29328:	ldr	ip, [r9]
   2932c:	cmp	ip, #0
   29330:	add	r2, ip, #4
   29334:	beq	29374 <__assert_fail@plt+0x177d0>
   29338:	bl	23c60 <__assert_fail@plt+0x120bc>
   2933c:	add	r2, sp, #72	; 0x48
   29340:	mov	r1, r8
   29344:	mov	ip, r0
   29348:	cmp	ip, #0
   2934c:	add	r0, sp, #68	; 0x44
   29350:	str	ip, [sp, #68]	; 0x44
   29354:	bne	29698 <__assert_fail@plt+0x17af4>
   29358:	bl	28758 <__assert_fail@plt+0x16bb4>
   2935c:	str	r0, [r7]
   29360:	ldr	r0, [sp, #80]	; 0x50
   29364:	bl	184ec <__assert_fail@plt+0x6948>
   29368:	ldr	ip, [sp, #68]	; 0x44
   2936c:	cmp	ip, #0
   29370:	bne	29698 <__assert_fail@plt+0x17af4>
   29374:	add	r4, r4, #1
   29378:	cmp	sl, r4
   2937c:	add	r7, r7, #4
   29380:	add	r9, r9, #4
   29384:	blt	29934 <__assert_fail@plt+0x17d90>
   29388:	ldr	r2, [r7]
   2938c:	add	r0, sp, #72	; 0x48
   29390:	cmp	r2, #0
   29394:	add	r1, r2, #4
   29398:	bne	29328 <__assert_fail@plt+0x17784>
   2939c:	ldr	r2, [r9]
   293a0:	str	r2, [r7]
   293a4:	b	29374 <__assert_fail@plt+0x177d0>
   293a8:	ldr	r3, [sp, #84]	; 0x54
   293ac:	cmp	r3, #0
   293b0:	movne	r3, #0
   293b4:	bne	296a8 <__assert_fail@plt+0x17b04>
   293b8:	mov	r3, #0
   293bc:	mov	r0, r3
   293c0:	add	sp, sp, #116	; 0x74
   293c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   293c8:	mov	r5, r2
   293cc:	mov	r2, r3
   293d0:	add	r0, r5, #1
   293d4:	mov	r3, r2
   293d8:	b	29060 <__assert_fail@plt+0x174bc>
   293dc:	ldr	r8, [sp, #24]
   293e0:	ldr	sl, [sp, #28]
   293e4:	ldr	r3, [r8, #8]
   293e8:	cmp	r3, #0
   293ec:	beq	29468 <__assert_fail@plt+0x178c4>
   293f0:	ldr	r4, [r9, #32]
   293f4:	cmp	r4, #0
   293f8:	beq	29468 <__assert_fail@plt+0x178c4>
   293fc:	ldr	r2, [r5, #4]
   29400:	add	r3, r3, r4
   29404:	ldr	r4, [r5]
   29408:	add	r2, r3, r2
   2940c:	cmp	r2, r4
   29410:	bgt	29950 <__assert_fail@plt+0x17dac>
   29414:	ldr	r2, [sp, #16]
   29418:	ldr	r1, [sp, #20]
   2941c:	mov	r0, r5
   29420:	bl	239d4 <__assert_fail@plt+0x11e30>
   29424:	cmp	r0, #0
   29428:	mov	r3, r0
   2942c:	str	r0, [sp, #64]	; 0x40
   29430:	bne	28f54 <__assert_fail@plt+0x173b0>
   29434:	ldr	r1, [fp, #20]
   29438:	cmp	r1, #0
   2943c:	bne	2947c <__assert_fail@plt+0x178d8>
   29440:	mov	r2, r5
   29444:	mov	r1, r6
   29448:	add	r0, sp, #64	; 0x40
   2944c:	ldr	r4, [fp]
   29450:	bl	28758 <__assert_fail@plt+0x16bb4>
   29454:	ldr	r3, [sp, #64]	; 0x40
   29458:	cmp	r3, #0
   2945c:	str	r0, [r4, sl, lsl #2]
   29460:	beq	28f30 <__assert_fail@plt+0x1738c>
   29464:	b	28f54 <__assert_fail@plt+0x173b0>
   29468:	ldr	r1, [fp, #20]
   2946c:	mov	r3, #0
   29470:	cmp	r1, #0
   29474:	str	r3, [sp, #64]	; 0x40
   29478:	beq	29440 <__assert_fail@plt+0x1789c>
   2947c:	ldr	r3, [sp, #32]
   29480:	ldr	r3, [r3, #116]	; 0x74
   29484:	str	r3, [sp, #16]
   29488:	ble	29554 <__assert_fail@plt+0x179b0>
   2948c:	mov	r9, #0
   29490:	ldr	r3, [fp, #24]
   29494:	ldr	ip, [sp, #16]
   29498:	ldr	r3, [r3, r9, lsl #2]
   2949c:	add	r3, r3, r3, lsl #1
   294a0:	add	r2, ip, r3, lsl #3
   294a4:	ldr	r0, [r2, #8]
   294a8:	cmp	sl, r0
   294ac:	ble	29548 <__assert_fail@plt+0x179a4>
   294b0:	ldr	r0, [r2, #4]
   294b4:	cmp	sl, r0
   294b8:	bgt	29548 <__assert_fail@plt+0x179a4>
   294bc:	ldr	r0, [ip, r3, lsl #3]
   294c0:	ldr	r2, [r2, #12]
   294c4:	ldr	r3, [r6]
   294c8:	cmp	sl, r2
   294cc:	ldr	r7, [r3, r0, lsl #3]
   294d0:	beq	29700 <__assert_fail@plt+0x17b5c>
   294d4:	ldr	r0, [r5, #4]
   294d8:	cmp	r0, #0
   294dc:	ble	29548 <__assert_fail@plt+0x179a4>
   294e0:	mov	r4, #0
   294e4:	b	294f4 <__assert_fail@plt+0x17950>
   294e8:	cmp	r4, r0
   294ec:	bge	29544 <__assert_fail@plt+0x179a0>
   294f0:	ldr	r3, [r6]
   294f4:	ldr	r2, [r5, #8]
   294f8:	ldr	r1, [r2, r4, lsl #2]
   294fc:	add	r4, r4, #1
   29500:	add	r2, r3, r1, lsl #3
   29504:	ldrb	r2, [r2, #4]
   29508:	sub	r2, r2, #8
   2950c:	cmp	r2, #1
   29510:	bhi	294e8 <__assert_fail@plt+0x17944>
   29514:	ldr	r3, [r3, r1, lsl #3]
   29518:	cmp	r7, r3
   2951c:	bne	294e8 <__assert_fail@plt+0x17944>
   29520:	ldr	r3, [sp, #20]
   29524:	mov	r2, r5
   29528:	mov	r0, r6
   2952c:	bl	28050 <__assert_fail@plt+0x164ac>
   29530:	cmp	r0, #0
   29534:	bne	2990c <__assert_fail@plt+0x17d68>
   29538:	ldr	r0, [r5, #4]
   2953c:	cmp	r4, r0
   29540:	blt	294f0 <__assert_fail@plt+0x1794c>
   29544:	ldr	r1, [fp, #20]
   29548:	add	r9, r9, #1
   2954c:	cmp	r9, r1
   29550:	blt	29490 <__assert_fail@plt+0x178ec>
   29554:	mov	r3, #0
   29558:	str	r3, [sp, #64]	; 0x40
   2955c:	b	29440 <__assert_fail@plt+0x1789c>
   29560:	mov	r3, #12
   29564:	mov	r0, r3
   29568:	add	sp, sp, #116	; 0x74
   2956c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29570:	mov	r3, r2
   29574:	mov	r2, r0
   29578:	add	r1, r3, #1
   2957c:	mov	r0, r2
   29580:	b	29248 <__assert_fail@plt+0x176a4>
   29584:	ldr	r3, [sp, #20]
   29588:	ldr	r0, [r3, #4]
   2958c:	b	2913c <__assert_fail@plt+0x17598>
   29590:	ldr	r9, [sp, #84]	; 0x54
   29594:	ldr	lr, [sp, #104]	; 0x68
   29598:	ldr	r3, [sp, #36]	; 0x24
   2959c:	ldr	r2, [sp, #52]	; 0x34
   295a0:	cmp	lr, #0
   295a4:	str	r2, [r9, r3]
   295a8:	ble	2960c <__assert_fail@plt+0x17a68>
   295ac:	sub	r7, lr, #1
   295b0:	ldr	ip, [sp, #108]	; 0x6c
   295b4:	mov	r0, r7
   295b8:	mov	r1, #0
   295bc:	cmp	r1, r0
   295c0:	bcs	295fc <__assert_fail@plt+0x17a58>
   295c4:	add	r2, r1, r0
   295c8:	lsr	r2, r2, #1
   295cc:	ldr	r3, [ip, r2, lsl #2]
   295d0:	cmp	r4, r3
   295d4:	ble	295ec <__assert_fail@plt+0x17a48>
   295d8:	b	2961c <__assert_fail@plt+0x17a78>
   295dc:	ldr	r0, [ip, r3, lsl #2]
   295e0:	cmp	r4, r0
   295e4:	bgt	29624 <__assert_fail@plt+0x17a80>
   295e8:	mov	r2, r3
   295ec:	add	r3, r2, r1
   295f0:	cmp	r2, r1
   295f4:	lsr	r3, r3, #1
   295f8:	bhi	295dc <__assert_fail@plt+0x17a38>
   295fc:	ldr	r2, [ip, r1, lsl #2]
   29600:	add	r3, ip, r1, lsl #2
   29604:	cmp	r4, r2
   29608:	beq	29630 <__assert_fail@plt+0x17a8c>
   2960c:	ldr	r3, [sp, #32]
   29610:	ldr	r7, [r3, #116]	; 0x74
   29614:	add	r7, r7, r5
   29618:	b	291bc <__assert_fail@plt+0x17618>
   2961c:	mov	r3, r2
   29620:	mov	r2, r0
   29624:	add	r1, r3, #1
   29628:	mov	r0, r2
   2962c:	b	295bc <__assert_fail@plt+0x17a18>
   29630:	cmp	lr, r1
   29634:	movgt	lr, #0
   29638:	movle	lr, #1
   2963c:	orrs	r2, lr, r1, lsr #31
   29640:	bne	2960c <__assert_fail@plt+0x17a68>
   29644:	cmp	r1, r7
   29648:	str	r7, [sp, #104]	; 0x68
   2964c:	bge	2960c <__assert_fail@plt+0x17a68>
   29650:	ldr	r2, [r3, #4]
   29654:	add	r1, r1, #1
   29658:	str	r2, [r3], #4
   2965c:	ldr	r2, [sp, #104]	; 0x68
   29660:	cmp	r1, r2
   29664:	blt	29650 <__assert_fail@plt+0x17aac>
   29668:	b	2960c <__assert_fail@plt+0x17a68>
   2966c:	mov	ip, fp
   29670:	add	lr, sp, #84	; 0x54
   29674:	ldm	ip!, {r0, r1, r2, r3}
   29678:	stmia	lr!, {r0, r1, r2, r3}
   2967c:	ldm	ip, {r0, r1, r2}
   29680:	stm	lr, {r0, r1, r2}
   29684:	mov	r1, ip
   29688:	add	r0, sp, #100	; 0x64
   2968c:	bl	23be8 <__assert_fail@plt+0x12044>
   29690:	subs	ip, r0, #0
   29694:	beq	292c4 <__assert_fail@plt+0x17720>
   29698:	mov	r3, ip
   2969c:	ldr	r2, [sp, #84]	; 0x54
   296a0:	cmp	r2, #0
   296a4:	beq	28f54 <__assert_fail@plt+0x173b0>
   296a8:	ldr	r0, [sp, #108]	; 0x6c
   296ac:	str	r3, [sp, #16]
   296b0:	bl	184ec <__assert_fail@plt+0x6948>
   296b4:	ldr	r3, [sp, #16]
   296b8:	mov	r0, r3
   296bc:	add	sp, sp, #116	; 0x74
   296c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296c4:	add	r2, r1, r0
   296c8:	ldr	r0, [r9, #36]	; 0x24
   296cc:	lsl	r1, r2, #3
   296d0:	lsl	sl, r2, #1
   296d4:	bl	36970 <__assert_fail@plt+0x24dcc>
   296d8:	cmp	r0, #0
   296dc:	beq	29560 <__assert_fail@plt+0x179bc>
   296e0:	str	r0, [r9, #36]	; 0x24
   296e4:	str	sl, [r9, #28]
   296e8:	b	28ff4 <__assert_fail@plt+0x17450>
   296ec:	cmp	r3, #0
   296f0:	strne	r8, [sp, #20]
   296f4:	bne	29440 <__assert_fail@plt+0x1789c>
   296f8:	str	r3, [sp, #20]
   296fc:	b	28f24 <__assert_fail@plt+0x17380>
   29700:	ldr	r2, [r5, #4]
   29704:	cmp	r2, #0
   29708:	mov	r1, r2
   2970c:	str	r2, [sp, #24]
   29710:	ble	29544 <__assert_fail@plt+0x179a0>
   29714:	ldr	lr, [r5, #8]
   29718:	mvn	r4, #0
   2971c:	mov	r2, lr
   29720:	add	r1, lr, r1, lsl #2
   29724:	mov	r8, r4
   29728:	str	r6, [sp, #28]
   2972c:	b	2974c <__assert_fail@plt+0x17ba8>
   29730:	cmp	ip, #9
   29734:	bne	29744 <__assert_fail@plt+0x17ba0>
   29738:	ldr	ip, [r6]
   2973c:	cmp	r7, ip
   29740:	moveq	r4, r0
   29744:	cmp	r1, r2
   29748:	beq	29774 <__assert_fail@plt+0x17bd0>
   2974c:	ldr	r0, [r2], #4
   29750:	add	r6, r3, r0, lsl #3
   29754:	ldrb	ip, [r6, #4]
   29758:	cmp	ip, #8
   2975c:	bne	29730 <__assert_fail@plt+0x17b8c>
   29760:	ldr	ip, [r3, r0, lsl #3]
   29764:	cmp	r7, ip
   29768:	moveq	r8, r0
   2976c:	cmp	r1, r2
   29770:	bne	2974c <__assert_fail@plt+0x17ba8>
   29774:	cmp	r8, #0
   29778:	ldr	r6, [sp, #28]
   2977c:	mov	r3, r8
   29780:	blt	29940 <__assert_fail@plt+0x17d9c>
   29784:	mov	r1, r8
   29788:	ldr	r3, [sp, #20]
   2978c:	mov	r2, r5
   29790:	mov	r0, r6
   29794:	bl	28050 <__assert_fail@plt+0x164ac>
   29798:	cmp	r0, #0
   2979c:	bne	2990c <__assert_fail@plt+0x17d68>
   297a0:	cmp	r4, #0
   297a4:	blt	29544 <__assert_fail@plt+0x179a0>
   297a8:	ldr	r3, [r5, #4]
   297ac:	cmp	r3, #0
   297b0:	ble	29544 <__assert_fail@plt+0x179a0>
   297b4:	ldr	lr, [r5, #8]
   297b8:	str	sl, [sp, #28]
   297bc:	ldr	sl, [sp, #20]
   297c0:	str	r9, [sp, #24]
   297c4:	mov	r7, #0
   297c8:	mov	r9, r3
   297cc:	ldr	r1, [lr, r7, lsl #2]
   297d0:	ldr	r3, [r6, #28]
   297d4:	add	r8, r1, r1, lsl #1
   297d8:	lsl	r8, r8, #2
   297dc:	add	r3, r3, r8
   297e0:	ldr	ip, [r3, #4]
   297e4:	cmp	ip, #0
   297e8:	ble	29844 <__assert_fail@plt+0x17ca0>
   297ec:	ldr	lr, [r3, #8]
   297f0:	sub	ip, ip, #1
   297f4:	mov	r0, #0
   297f8:	cmp	r0, ip
   297fc:	bcs	29838 <__assert_fail@plt+0x17c94>
   29800:	add	r2, r0, ip
   29804:	lsr	r2, r2, #1
   29808:	ldr	r3, [lr, r2, lsl #2]
   2980c:	cmp	r4, r3
   29810:	ble	29828 <__assert_fail@plt+0x17c84>
   29814:	b	298e4 <__assert_fail@plt+0x17d40>
   29818:	ldr	ip, [lr, r3, lsl #2]
   2981c:	cmp	r4, ip
   29820:	bgt	298ec <__assert_fail@plt+0x17d48>
   29824:	mov	r2, r3
   29828:	add	r3, r2, r0
   2982c:	cmp	r2, r0
   29830:	lsr	r3, r3, #1
   29834:	bhi	29818 <__assert_fail@plt+0x17c74>
   29838:	ldr	r3, [lr, r0, lsl #2]
   2983c:	cmp	r4, r3
   29840:	beq	298d0 <__assert_fail@plt+0x17d2c>
   29844:	ldr	r3, [r6, #24]
   29848:	add	r8, r3, r8
   2984c:	ldr	ip, [r8, #4]
   29850:	cmp	ip, #0
   29854:	ble	298b0 <__assert_fail@plt+0x17d0c>
   29858:	ldr	lr, [r8, #8]
   2985c:	sub	ip, ip, #1
   29860:	mov	r0, #0
   29864:	cmp	r0, ip
   29868:	bcs	298a4 <__assert_fail@plt+0x17d00>
   2986c:	add	r2, r0, ip
   29870:	lsr	r2, r2, #1
   29874:	ldr	r3, [lr, r2, lsl #2]
   29878:	cmp	r3, r4
   2987c:	bge	29894 <__assert_fail@plt+0x17cf0>
   29880:	b	298f8 <__assert_fail@plt+0x17d54>
   29884:	ldr	ip, [lr, r3, lsl #2]
   29888:	cmp	r4, ip
   2988c:	bgt	29900 <__assert_fail@plt+0x17d5c>
   29890:	mov	r2, r3
   29894:	add	r3, r0, r2
   29898:	cmp	r0, r2
   2989c:	lsr	r3, r3, #1
   298a0:	bcc	29884 <__assert_fail@plt+0x17ce0>
   298a4:	ldr	r3, [lr, r0, lsl #2]
   298a8:	cmp	r4, r3
   298ac:	beq	298d0 <__assert_fail@plt+0x17d2c>
   298b0:	mov	r3, sl
   298b4:	mov	r2, r5
   298b8:	mov	r0, r6
   298bc:	bl	28050 <__assert_fail@plt+0x164ac>
   298c0:	cmp	r0, #0
   298c4:	bne	2990c <__assert_fail@plt+0x17d68>
   298c8:	ldr	r9, [r5, #4]
   298cc:	sub	r7, r7, #1
   298d0:	add	r7, r7, #1
   298d4:	cmp	r7, r9
   298d8:	bge	2991c <__assert_fail@plt+0x17d78>
   298dc:	ldr	lr, [r5, #8]
   298e0:	b	297cc <__assert_fail@plt+0x17c28>
   298e4:	mov	r3, r2
   298e8:	mov	r2, ip
   298ec:	add	r0, r3, #1
   298f0:	mov	ip, r2
   298f4:	b	297f8 <__assert_fail@plt+0x17c54>
   298f8:	mov	r3, r2
   298fc:	mov	r2, ip
   29900:	add	r0, r3, #1
   29904:	mov	ip, r2
   29908:	b	29864 <__assert_fail@plt+0x17cc0>
   2990c:	mov	r3, r0
   29910:	mov	r0, r3
   29914:	add	sp, sp, #116	; 0x74
   29918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2991c:	ldr	r9, [sp, #24]
   29920:	ldr	sl, [sp, #28]
   29924:	ldr	r1, [fp, #20]
   29928:	b	29548 <__assert_fail@plt+0x179a4>
   2992c:	mov	r3, #12
   29930:	b	2969c <__assert_fail@plt+0x17af8>
   29934:	ldr	r4, [sp, #60]	; 0x3c
   29938:	ldr	r9, [sp, #84]	; 0x54
   2993c:	b	29594 <__assert_fail@plt+0x179f0>
   29940:	cmp	r4, #0
   29944:	ldrge	r3, [sp, #24]
   29948:	bge	297b8 <__assert_fail@plt+0x17c14>
   2994c:	b	29544 <__assert_fail@plt+0x179a0>
   29950:	add	r4, r3, r4
   29954:	ldr	r0, [r5, #8]
   29958:	lsl	r1, r4, #2
   2995c:	bl	36970 <__assert_fail@plt+0x24dcc>
   29960:	cmp	r0, #0
   29964:	beq	29560 <__assert_fail@plt+0x179bc>
   29968:	str	r0, [r5, #8]
   2996c:	str	r4, [r5]
   29970:	b	29414 <__assert_fail@plt+0x17870>
   29974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29978:	sub	sp, sp, #68	; 0x44
   2997c:	mov	r4, #1
   29980:	mov	r7, r0
   29984:	mov	r0, #4
   29988:	ldr	fp, [r1, #12]
   2998c:	mov	r9, r1
   29990:	ldr	r5, [r1, #8]
   29994:	str	r4, [sp, #52]	; 0x34
   29998:	str	r4, [sp, #56]	; 0x38
   2999c:	bl	36944 <__assert_fail@plt+0x24da0>
   299a0:	lsl	r3, fp, #2
   299a4:	str	r3, [sp, #20]
   299a8:	cmp	r0, #0
   299ac:	str	r0, [sp, #60]	; 0x3c
   299b0:	beq	29e0c <__assert_fail@plt+0x18268>
   299b4:	add	r3, sp, #52	; 0x34
   299b8:	str	r5, [r0]
   299bc:	mov	r2, fp
   299c0:	mov	r1, r9
   299c4:	mov	r0, r7
   299c8:	bl	28ed4 <__assert_fail@plt+0x17330>
   299cc:	subs	r3, r0, #0
   299d0:	str	r3, [sp, #40]	; 0x28
   299d4:	bne	29e1c <__assert_fail@plt+0x18278>
   299d8:	cmp	fp, #0
   299dc:	ble	29c94 <__assert_fail@plt+0x180f0>
   299e0:	str	r3, [sp, #36]	; 0x24
   299e4:	add	r3, r9, #24
   299e8:	str	r3, [sp, #28]
   299ec:	add	r3, r9, #20
   299f0:	str	r3, [sp, #32]
   299f4:	ldr	r3, [sp, #20]
   299f8:	mov	sl, r9
   299fc:	str	r4, [sp, #44]	; 0x2c
   29a00:	ldr	r0, [sl]
   29a04:	ldr	r3, [r0, r3]
   29a08:	cmp	r3, #0
   29a0c:	movne	r3, #0
   29a10:	ldreq	r3, [sp, #36]	; 0x24
   29a14:	addeq	r3, r3, #1
   29a18:	mov	r2, r3
   29a1c:	str	r3, [sp, #36]	; 0x24
   29a20:	ldr	r3, [r7, #120]	; 0x78
   29a24:	cmp	r2, r3
   29a28:	bgt	29e24 <__assert_fail@plt+0x18280>
   29a2c:	mov	r2, #0
   29a30:	ldr	r3, [r7, #100]	; 0x64
   29a34:	str	r2, [sp, #56]	; 0x38
   29a38:	ldr	r2, [sp, #20]
   29a3c:	sub	fp, fp, #1
   29a40:	add	r3, r3, r2
   29a44:	ldr	r6, [r3, #-4]
   29a48:	cmp	r6, #0
   29a4c:	beq	29c64 <__assert_fail@plt+0x180c0>
   29a50:	ldr	r3, [r6, #20]
   29a54:	ldr	r2, [r7, #84]	; 0x54
   29a58:	cmp	r3, #0
   29a5c:	mov	r1, r2
   29a60:	str	r2, [sp, #16]
   29a64:	ble	29c64 <__assert_fail@plt+0x180c0>
   29a68:	ldr	r2, [r6, #24]
   29a6c:	ldr	r3, [r1]
   29a70:	mov	r4, #0
   29a74:	ldr	r5, [r2]
   29a78:	lsl	r8, r5, #3
   29a7c:	add	r3, r3, r8
   29a80:	ldrb	r1, [r3, #6]
   29a84:	ldrb	r2, [r3, #4]
   29a88:	tst	r1, #16
   29a8c:	bne	29ce0 <__assert_fail@plt+0x1813c>
   29a90:	ldr	r1, [r7, #4]
   29a94:	sub	r2, r2, #1
   29a98:	ldrb	r1, [r1, fp]
   29a9c:	cmp	r2, #6
   29aa0:	ldrls	pc, [pc, r2, lsl #2]
   29aa4:	b	29ca8 <__assert_fail@plt+0x18104>
   29aa8:	muleq	r2, ip, ip
   29aac:	andeq	r9, r2, r8, lsr #25
   29ab0:	andeq	r9, r2, r8, lsr ip
   29ab4:	andeq	r9, r2, r8, lsr #25
   29ab8:	andeq	r9, r2, ip, asr #21
   29abc:	andeq	r9, r2, r8, lsr #25
   29ac0:	andeq	r9, r2, r4, asr #21
   29ac4:	tst	r1, #128	; 0x80
   29ac8:	bne	29ca8 <__assert_fail@plt+0x18104>
   29acc:	cmp	r1, #10
   29ad0:	beq	29df0 <__assert_fail@plt+0x1824c>
   29ad4:	cmp	r1, #0
   29ad8:	bne	29aec <__assert_fail@plt+0x17f48>
   29adc:	ldr	r2, [r7, #84]	; 0x54
   29ae0:	ldr	r2, [r2, #128]	; 0x80
   29ae4:	tst	r2, #128	; 0x80
   29ae8:	bne	29ca8 <__assert_fail@plt+0x18104>
   29aec:	ldr	r8, [r3, #4]
   29af0:	ldr	r3, [pc, #848]	; 29e48 <__assert_fail@plt+0x182a4>
   29af4:	tst	r8, r3
   29af8:	beq	29b4c <__assert_fail@plt+0x17fa8>
   29afc:	ldr	r2, [r7, #88]	; 0x58
   29b00:	mov	r1, fp
   29b04:	mov	r0, r7
   29b08:	bl	23ef0 <__assert_fail@plt+0x1234c>
   29b0c:	ldr	r3, [pc, #824]	; 29e4c <__assert_fail@plt+0x182a8>
   29b10:	and	r8, r3, r8, lsr #8
   29b14:	tst	r8, #4
   29b18:	beq	29ddc <__assert_fail@plt+0x18238>
   29b1c:	tst	r0, #1
   29b20:	beq	29ca8 <__assert_fail@plt+0x18104>
   29b24:	tst	r8, #8
   29b28:	bne	29ca8 <__assert_fail@plt+0x18104>
   29b2c:	tst	r8, #32
   29b30:	beq	29b3c <__assert_fail@plt+0x17f98>
   29b34:	tst	r0, #2
   29b38:	beq	29ca8 <__assert_fail@plt+0x18104>
   29b3c:	tst	r8, #128	; 0x80
   29b40:	beq	29b4c <__assert_fail@plt+0x17fa8>
   29b44:	tst	r0, #8
   29b48:	beq	29ca8 <__assert_fail@plt+0x18104>
   29b4c:	ldr	r3, [sl]
   29b50:	ldr	r2, [sp, #20]
   29b54:	ldr	r3, [r3, r2]
   29b58:	cmp	r3, #0
   29b5c:	beq	29ca8 <__assert_fail@plt+0x18104>
   29b60:	ldr	lr, [r3, #8]
   29b64:	ldr	r2, [sp, #16]
   29b68:	cmp	lr, #0
   29b6c:	ldr	r2, [r2, #12]
   29b70:	ble	29ca8 <__assert_fail@plt+0x18104>
   29b74:	ldr	r0, [r2, r5, lsl #2]
   29b78:	ldr	ip, [r3, #12]
   29b7c:	sub	lr, lr, #1
   29b80:	mov	r1, #0
   29b84:	cmp	r1, lr
   29b88:	bcs	29bc4 <__assert_fail@plt+0x18020>
   29b8c:	add	r2, r1, lr
   29b90:	lsr	r2, r2, #1
   29b94:	ldr	r3, [ip, r2, lsl #2]
   29b98:	cmp	r3, r0
   29b9c:	bge	29bb4 <__assert_fail@plt+0x18010>
   29ba0:	b	29dac <__assert_fail@plt+0x18208>
   29ba4:	ldr	lr, [ip, r3, lsl #2]
   29ba8:	cmp	r0, lr
   29bac:	bgt	29db4 <__assert_fail@plt+0x18210>
   29bb0:	mov	r2, r3
   29bb4:	add	r3, r2, r1
   29bb8:	cmp	r2, r1
   29bbc:	lsr	r3, r3, #1
   29bc0:	bhi	29ba4 <__assert_fail@plt+0x18000>
   29bc4:	ldr	r3, [ip, r1, lsl #2]
   29bc8:	cmp	r0, r3
   29bcc:	bne	29ca8 <__assert_fail@plt+0x18104>
   29bd0:	ldr	r0, [sp, #44]	; 0x2c
   29bd4:	ldr	r3, [sl, #20]
   29bd8:	cmp	r3, #0
   29bdc:	beq	29c0c <__assert_fail@plt+0x18068>
   29be0:	ldr	r3, [sp, #16]
   29be4:	add	r0, fp, r0
   29be8:	ldr	r2, [sp, #28]
   29bec:	ldr	r3, [r3, #12]
   29bf0:	ldr	r1, [sp, #32]
   29bf4:	ldr	r3, [r3, r5, lsl #2]
   29bf8:	stm	sp, {r0, r5, fp}
   29bfc:	mov	r0, r7
   29c00:	bl	27d78 <__assert_fail@plt+0x161d4>
   29c04:	cmp	r0, #0
   29c08:	bne	29ca8 <__assert_fail@plt+0x18104>
   29c0c:	mov	r1, r5
   29c10:	add	r0, sp, #52	; 0x34
   29c14:	bl	23828 <__assert_fail@plt+0x11c84>
   29c18:	cmp	r0, #0
   29c1c:	bne	29ca8 <__assert_fail@plt+0x18104>
   29c20:	mov	r4, #12
   29c24:	ldr	r0, [sp, #60]	; 0x3c
   29c28:	bl	184ec <__assert_fail@plt+0x6948>
   29c2c:	mov	r0, r4
   29c30:	add	sp, sp, #68	; 0x44
   29c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29c38:	ldr	r2, [r3]
   29c3c:	asr	r0, r1, #5
   29c40:	and	r1, r1, #31
   29c44:	ldr	r2, [r2, r0, lsl #2]
   29c48:	lsr	r1, r2, r1
   29c4c:	tst	r1, #1
   29c50:	bne	29aec <__assert_fail@plt+0x17f48>
   29c54:	ldr	r3, [r6, #20]
   29c58:	add	r4, r4, #1
   29c5c:	cmp	r4, r3
   29c60:	blt	29cb8 <__assert_fail@plt+0x18114>
   29c64:	add	r3, sp, #52	; 0x34
   29c68:	mov	r2, fp
   29c6c:	mov	r1, sl
   29c70:	mov	r0, r7
   29c74:	bl	28ed4 <__assert_fail@plt+0x17330>
   29c78:	cmp	r0, #0
   29c7c:	bne	29e04 <__assert_fail@plt+0x18260>
   29c80:	ldr	r3, [sp, #20]
   29c84:	cmp	fp, #0
   29c88:	sub	r3, r3, #4
   29c8c:	str	r3, [sp, #20]
   29c90:	bne	29a00 <__assert_fail@plt+0x17e5c>
   29c94:	ldr	r4, [sp, #40]	; 0x28
   29c98:	b	29c24 <__assert_fail@plt+0x18080>
   29c9c:	ldrb	r2, [r3]
   29ca0:	cmp	r2, r1
   29ca4:	beq	29aec <__assert_fail@plt+0x17f48>
   29ca8:	ldr	r3, [r6, #20]
   29cac:	add	r4, r4, #1
   29cb0:	cmp	r4, r3
   29cb4:	bge	29c64 <__assert_fail@plt+0x180c0>
   29cb8:	ldr	r2, [r6, #24]
   29cbc:	ldr	r3, [sp, #16]
   29cc0:	ldr	r5, [r2, r4, lsl #2]
   29cc4:	ldr	r3, [r3]
   29cc8:	lsl	r8, r5, #3
   29ccc:	add	r3, r3, r8
   29cd0:	ldrb	r1, [r3, #6]
   29cd4:	ldrb	r2, [r3, #4]
   29cd8:	tst	r1, #16
   29cdc:	beq	29a90 <__assert_fail@plt+0x17eec>
   29ce0:	ldr	r9, [r7, #84]	; 0x54
   29ce4:	mov	r3, r7
   29ce8:	add	r1, r9, #128	; 0x80
   29cec:	ldr	r0, [r9]
   29cf0:	str	fp, [sp]
   29cf4:	ldr	ip, [sl, #12]
   29cf8:	mov	r2, r5
   29cfc:	str	ip, [sp, #24]
   29d00:	bl	259cc <__assert_fail@plt+0x13e28>
   29d04:	cmp	r0, #0
   29d08:	ble	29dd4 <__assert_fail@plt+0x18230>
   29d0c:	ldr	ip, [sp, #24]
   29d10:	add	r3, fp, r0
   29d14:	cmp	ip, r3
   29d18:	blt	29bd4 <__assert_fail@plt+0x18030>
   29d1c:	ldr	r2, [sl]
   29d20:	ldr	r3, [r2, r3, lsl #2]
   29d24:	cmp	r3, #0
   29d28:	beq	29d98 <__assert_fail@plt+0x181f4>
   29d2c:	ldr	ip, [r3, #8]
   29d30:	ldr	r2, [r9, #12]
   29d34:	cmp	ip, #0
   29d38:	ble	29d98 <__assert_fail@plt+0x181f4>
   29d3c:	ldr	lr, [r2, r5, lsl #2]
   29d40:	ldr	r9, [r3, #12]
   29d44:	sub	ip, ip, #1
   29d48:	mov	r1, #0
   29d4c:	cmp	r1, ip
   29d50:	bcs	29d8c <__assert_fail@plt+0x181e8>
   29d54:	add	r2, r1, ip
   29d58:	lsr	r2, r2, #1
   29d5c:	ldr	r3, [r9, r2, lsl #2]
   29d60:	cmp	r3, lr
   29d64:	bge	29d7c <__assert_fail@plt+0x181d8>
   29d68:	b	29dc0 <__assert_fail@plt+0x1821c>
   29d6c:	ldr	ip, [r9, r3, lsl #2]
   29d70:	cmp	lr, ip
   29d74:	bgt	29dc8 <__assert_fail@plt+0x18224>
   29d78:	mov	r2, r3
   29d7c:	add	r3, r1, r2
   29d80:	cmp	r1, r2
   29d84:	lsr	r3, r3, #1
   29d88:	bcc	29d6c <__assert_fail@plt+0x181c8>
   29d8c:	ldr	r3, [r9, r1, lsl #2]
   29d90:	cmp	lr, r3
   29d94:	beq	29bd4 <__assert_fail@plt+0x18030>
   29d98:	ldr	r3, [sp, #16]
   29d9c:	ldr	r3, [r3]
   29da0:	add	r3, r3, r8
   29da4:	ldrb	r2, [r3, #4]
   29da8:	b	29a90 <__assert_fail@plt+0x17eec>
   29dac:	mov	r3, r2
   29db0:	mov	r2, lr
   29db4:	add	r1, r3, #1
   29db8:	mov	lr, r2
   29dbc:	b	29b84 <__assert_fail@plt+0x17fe0>
   29dc0:	mov	r3, r2
   29dc4:	mov	r2, ip
   29dc8:	add	r1, r3, #1
   29dcc:	mov	ip, r2
   29dd0:	b	29d4c <__assert_fail@plt+0x181a8>
   29dd4:	beq	29d98 <__assert_fail@plt+0x181f4>
   29dd8:	b	29bd4 <__assert_fail@plt+0x18030>
   29ddc:	tst	r8, #8
   29de0:	beq	29b2c <__assert_fail@plt+0x17f88>
   29de4:	tst	r0, #1
   29de8:	beq	29b2c <__assert_fail@plt+0x17f88>
   29dec:	b	29ca8 <__assert_fail@plt+0x18104>
   29df0:	ldr	r2, [r7, #84]	; 0x54
   29df4:	ldr	r2, [r2, #128]	; 0x80
   29df8:	tst	r2, #64	; 0x40
   29dfc:	bne	29aec <__assert_fail@plt+0x17f48>
   29e00:	b	29ca8 <__assert_fail@plt+0x18104>
   29e04:	mov	r4, r0
   29e08:	b	29c24 <__assert_fail@plt+0x18080>
   29e0c:	mov	r4, #12
   29e10:	mov	r0, r4
   29e14:	add	sp, sp, #68	; 0x44
   29e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e1c:	mov	r4, r3
   29e20:	b	29c24 <__assert_fail@plt+0x18080>
   29e24:	ldr	r2, [sp, #20]
   29e28:	mov	r1, #0
   29e2c:	bl	119e8 <memset@plt>
   29e30:	ldr	r0, [sp, #60]	; 0x3c
   29e34:	ldr	r4, [sp, #40]	; 0x28
   29e38:	bl	184ec <__assert_fail@plt+0x6948>
   29e3c:	mov	r0, r4
   29e40:	add	sp, sp, #68	; 0x44
   29e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29e48:	andeq	pc, r3, r0, lsl #30
   29e4c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   29e50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e54:	sub	sp, sp, #44	; 0x2c
   29e58:	mov	r6, r0
   29e5c:	mov	fp, r1
   29e60:	mov	r9, #0
   29e64:	mov	r1, #1
   29e68:	mov	r0, #32
   29e6c:	mov	sl, r2
   29e70:	mov	r5, r3
   29e74:	str	r9, [sp, #20]
   29e78:	ldrb	r8, [sp, #80]	; 0x50
   29e7c:	bl	368fc <__assert_fail@plt+0x24d58>
   29e80:	subs	r4, r0, #0
   29e84:	beq	2a1dc <__assert_fail@plt+0x18638>
   29e88:	mov	r1, #1
   29e8c:	mov	r0, #40	; 0x28
   29e90:	bl	368fc <__assert_fail@plt+0x24d58>
   29e94:	subs	r7, r0, #0
   29e98:	beq	2a1f8 <__assert_fail@plt+0x18654>
   29e9c:	ldrb	r2, [r7, #16]
   29ea0:	and	r3, r8, #1
   29ea4:	mov	r0, fp
   29ea8:	bic	r2, r2, #1
   29eac:	orr	r3, r3, r2
   29eb0:	add	r2, sp, #20
   29eb4:	strb	r3, [r7, #16]
   29eb8:	mov	r1, r4
   29ebc:	stm	sp, {r2, sl}
   29ec0:	add	r3, r7, #36	; 0x24
   29ec4:	str	r9, [sp, #8]
   29ec8:	add	r2, r7, #12
   29ecc:	bl	24cac <__assert_fail@plt+0x13108>
   29ed0:	subs	sl, r0, #0
   29ed4:	bne	2a214 <__assert_fail@plt+0x18670>
   29ed8:	ldrb	r3, [r5]
   29edc:	cmp	r3, #0
   29ee0:	movne	ip, #1
   29ee4:	beq	29f08 <__assert_fail@plt+0x18364>
   29ee8:	asr	r1, r3, #5
   29eec:	and	r0, r3, #31
   29ef0:	ldr	r2, [r4, r1, lsl #2]
   29ef4:	ldrb	r3, [r5, #1]!
   29ef8:	orr	r2, r2, ip, lsl r0
   29efc:	cmp	r3, #0
   29f00:	str	r2, [r4, r1, lsl #2]
   29f04:	bne	29ee8 <__assert_fail@plt+0x18344>
   29f08:	cmp	r8, #0
   29f0c:	bne	2a0d4 <__assert_fail@plt+0x18530>
   29f10:	ldr	r3, [r6, #92]	; 0x5c
   29f14:	cmp	r3, #1
   29f18:	ble	29f9c <__assert_fail@plt+0x183f8>
   29f1c:	ldr	r3, [r6, #60]	; 0x3c
   29f20:	ldm	r4, {r1, r2}
   29f24:	ldr	r0, [r4, #8]
   29f28:	ldr	ip, [r3]
   29f2c:	and	r1, r1, ip
   29f30:	str	r1, [r4]
   29f34:	ldr	ip, [r3, #4]
   29f38:	ldr	r1, [r4, #12]
   29f3c:	and	r2, r2, ip
   29f40:	str	r2, [r4, #4]
   29f44:	ldr	ip, [r3, #8]
   29f48:	ldr	r2, [r4, #16]
   29f4c:	and	r0, r0, ip
   29f50:	str	r0, [r4, #8]
   29f54:	ldr	ip, [r3, #12]
   29f58:	ldr	r0, [r4, #20]
   29f5c:	and	r1, r1, ip
   29f60:	str	r1, [r4, #12]
   29f64:	ldr	ip, [r3, #16]
   29f68:	ldr	r1, [r4, #24]
   29f6c:	and	r2, r2, ip
   29f70:	str	r2, [r4, #16]
   29f74:	ldr	ip, [r3, #20]
   29f78:	ldr	r2, [r4, #28]
   29f7c:	and	r0, r0, ip
   29f80:	str	r0, [r4, #20]
   29f84:	ldr	r0, [r3, #24]
   29f88:	and	r1, r1, r0
   29f8c:	str	r1, [r4, #24]
   29f90:	ldr	r3, [r3, #28]
   29f94:	and	r3, r3, r2
   29f98:	str	r3, [r4, #28]
   29f9c:	ldr	r3, [r6, #64]	; 0x40
   29fa0:	add	r8, sp, #24
   29fa4:	mov	r5, #0
   29fa8:	cmp	r3, #31
   29fac:	str	r5, [r8, #4]
   29fb0:	beq	2a250 <__assert_fail@plt+0x186ac>
   29fb4:	lsl	ip, r3, #5
   29fb8:	add	lr, r3, #1
   29fbc:	ldr	r3, [r6, #56]	; 0x38
   29fc0:	add	r9, ip, #4
   29fc4:	mov	r2, #3
   29fc8:	add	ip, r3, ip
   29fcc:	str	r4, [sp, #24]
   29fd0:	strb	r2, [sp, #28]
   29fd4:	ldm	r8, {r0, r1}
   29fd8:	add	sl, ip, #24
   29fdc:	mov	r5, #0
   29fe0:	str	lr, [r6, #64]	; 0x40
   29fe4:	str	r5, [ip, #4]
   29fe8:	str	r5, [ip, #8]
   29fec:	str	r5, [ip, #12]
   29ff0:	stm	sl, {r0, r1}
   29ff4:	ldrb	r2, [ip, #30]
   29ff8:	mvn	r1, #0
   29ffc:	adds	r9, r3, r9
   2a000:	and	r2, r2, #243	; 0xf3
   2a004:	str	r5, [ip, #16]
   2a008:	str	r5, [ip, #20]
   2a00c:	strb	r2, [ip, #30]
   2a010:	str	r1, [ip, #32]
   2a014:	beq	2a15c <__assert_fail@plt+0x185b8>
   2a018:	ldr	r2, [r6, #92]	; 0x5c
   2a01c:	cmp	r2, #1
   2a020:	ble	2a1a8 <__assert_fail@plt+0x18604>
   2a024:	ldrb	r2, [r6, #88]	; 0x58
   2a028:	ldr	r1, [r6, #64]	; 0x40
   2a02c:	orr	r2, r2, #2
   2a030:	cmp	r1, #31
   2a034:	strb	r2, [r6, #88]	; 0x58
   2a038:	beq	2a130 <__assert_fail@plt+0x1858c>
   2a03c:	lsl	ip, r1, #5
   2a040:	add	r2, r1, #1
   2a044:	add	r5, ip, #4
   2a048:	mov	r1, #6
   2a04c:	add	ip, r3, ip
   2a050:	str	r7, [sp, #24]
   2a054:	strb	r1, [sp, #28]
   2a058:	ldm	r8, {r0, r1}
   2a05c:	add	r8, ip, #24
   2a060:	mov	lr, #0
   2a064:	str	r2, [r6, #64]	; 0x40
   2a068:	str	lr, [ip, #4]
   2a06c:	str	lr, [ip, #8]
   2a070:	str	lr, [ip, #12]
   2a074:	stm	r8, {r0, r1}
   2a078:	ldrb	r2, [ip, #30]
   2a07c:	mvn	r1, #0
   2a080:	adds	r3, r3, r5
   2a084:	and	r2, r2, #243	; 0xf3
   2a088:	str	lr, [ip, #16]
   2a08c:	str	lr, [ip, #20]
   2a090:	strb	r2, [ip, #30]
   2a094:	str	r1, [ip, #32]
   2a098:	beq	2a15c <__assert_fail@plt+0x185b8>
   2a09c:	add	ip, sp, #32
   2a0a0:	mov	r2, r9
   2a0a4:	str	ip, [sp]
   2a0a8:	mov	r4, #10
   2a0ac:	add	r1, r6, #64	; 0x40
   2a0b0:	add	r0, r6, #56	; 0x38
   2a0b4:	str	lr, [sp, #36]	; 0x24
   2a0b8:	str	lr, [sp, #32]
   2a0bc:	strb	r4, [sp, #36]	; 0x24
   2a0c0:	bl	23b24 <__assert_fail@plt+0x11f80>
   2a0c4:	mov	r9, r0
   2a0c8:	mov	r0, r9
   2a0cc:	add	sp, sp, #44	; 0x2c
   2a0d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0d4:	ldm	r4, {r2, r3, lr}
   2a0d8:	ldr	ip, [r4, #12]
   2a0dc:	ldr	r0, [r4, #16]
   2a0e0:	mvn	r2, r2
   2a0e4:	mvn	r3, r3
   2a0e8:	ldr	r1, [r4, #20]
   2a0ec:	str	r2, [r4]
   2a0f0:	str	r3, [r4, #4]
   2a0f4:	ldr	r2, [r4, #24]
   2a0f8:	ldr	r3, [r4, #28]
   2a0fc:	mvn	lr, lr
   2a100:	mvn	ip, ip
   2a104:	mvn	r0, r0
   2a108:	mvn	r1, r1
   2a10c:	mvn	r2, r2
   2a110:	mvn	r3, r3
   2a114:	str	lr, [r4, #8]
   2a118:	str	ip, [r4, #12]
   2a11c:	str	r0, [r4, #16]
   2a120:	str	r1, [r4, #20]
   2a124:	str	r2, [r4, #24]
   2a128:	str	r3, [r4, #28]
   2a12c:	b	29f10 <__assert_fail@plt+0x1836c>
   2a130:	mov	r0, #996	; 0x3e4
   2a134:	bl	36944 <__assert_fail@plt+0x24da0>
   2a138:	subs	r3, r0, #0
   2a13c:	beq	2a15c <__assert_fail@plt+0x185b8>
   2a140:	ldr	r1, [r6, #56]	; 0x38
   2a144:	mov	ip, r5
   2a148:	mov	r2, #1
   2a14c:	mov	r5, #4
   2a150:	str	r1, [r3]
   2a154:	str	r3, [r6, #56]	; 0x38
   2a158:	b	2a048 <__assert_fail@plt+0x184a4>
   2a15c:	mov	r0, r4
   2a160:	bl	184ec <__assert_fail@plt+0x6948>
   2a164:	ldr	r0, [r7]
   2a168:	bl	184ec <__assert_fail@plt+0x6948>
   2a16c:	ldr	r0, [r7, #4]
   2a170:	bl	184ec <__assert_fail@plt+0x6948>
   2a174:	ldr	r0, [r7, #8]
   2a178:	bl	184ec <__assert_fail@plt+0x6948>
   2a17c:	ldr	r0, [r7, #12]
   2a180:	bl	184ec <__assert_fail@plt+0x6948>
   2a184:	mov	r0, r7
   2a188:	bl	184ec <__assert_fail@plt+0x6948>
   2a18c:	ldr	r2, [sp, #84]	; 0x54
   2a190:	mov	r9, #0
   2a194:	mov	r3, #12
   2a198:	mov	r0, r9
   2a19c:	str	r3, [r2]
   2a1a0:	add	sp, sp, #44	; 0x2c
   2a1a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1a8:	ldr	r0, [r7]
   2a1ac:	bl	184ec <__assert_fail@plt+0x6948>
   2a1b0:	ldr	r0, [r7, #4]
   2a1b4:	bl	184ec <__assert_fail@plt+0x6948>
   2a1b8:	ldr	r0, [r7, #8]
   2a1bc:	bl	184ec <__assert_fail@plt+0x6948>
   2a1c0:	ldr	r0, [r7, #12]
   2a1c4:	bl	184ec <__assert_fail@plt+0x6948>
   2a1c8:	mov	r0, r7
   2a1cc:	bl	184ec <__assert_fail@plt+0x6948>
   2a1d0:	mov	r0, r9
   2a1d4:	add	sp, sp, #44	; 0x2c
   2a1d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1dc:	ldr	r2, [sp, #84]	; 0x54
   2a1e0:	mov	r3, #12
   2a1e4:	mov	r9, r4
   2a1e8:	mov	r0, r9
   2a1ec:	str	r3, [r2]
   2a1f0:	add	sp, sp, #44	; 0x2c
   2a1f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1f8:	mov	r0, r4
   2a1fc:	bl	184ec <__assert_fail@plt+0x6948>
   2a200:	ldr	r2, [sp, #84]	; 0x54
   2a204:	mov	r3, #12
   2a208:	mov	r9, r7
   2a20c:	str	r3, [r2]
   2a210:	b	2a0c8 <__assert_fail@plt+0x18524>
   2a214:	mov	r0, r4
   2a218:	bl	184ec <__assert_fail@plt+0x6948>
   2a21c:	ldr	r0, [r7]
   2a220:	bl	184ec <__assert_fail@plt+0x6948>
   2a224:	ldr	r0, [r7, #4]
   2a228:	bl	184ec <__assert_fail@plt+0x6948>
   2a22c:	ldr	r0, [r7, #8]
   2a230:	bl	184ec <__assert_fail@plt+0x6948>
   2a234:	ldr	r0, [r7, #12]
   2a238:	bl	184ec <__assert_fail@plt+0x6948>
   2a23c:	mov	r0, r7
   2a240:	bl	184ec <__assert_fail@plt+0x6948>
   2a244:	ldr	r3, [sp, #84]	; 0x54
   2a248:	str	sl, [r3]
   2a24c:	b	2a0c8 <__assert_fail@plt+0x18524>
   2a250:	mov	r0, #996	; 0x3e4
   2a254:	bl	36944 <__assert_fail@plt+0x24da0>
   2a258:	subs	r3, r0, #0
   2a25c:	beq	2a15c <__assert_fail@plt+0x185b8>
   2a260:	ldr	r2, [r6, #56]	; 0x38
   2a264:	mov	ip, r5
   2a268:	mov	lr, #1
   2a26c:	mov	r9, #4
   2a270:	str	r2, [r3]
   2a274:	str	r3, [r6, #56]	; 0x38
   2a278:	b	29fc4 <__assert_fail@plt+0x18420>
   2a27c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a280:	sub	sp, sp, #172	; 0xac
   2a284:	mov	r4, r1
   2a288:	str	r2, [sp, #32]
   2a28c:	ldrb	r2, [r2, #4]
   2a290:	str	r3, [sp, #40]	; 0x28
   2a294:	str	r0, [sp, #44]	; 0x2c
   2a298:	sub	r3, r2, #1
   2a29c:	ldr	sl, [r1]
   2a2a0:	ldr	r6, [sp, #208]	; 0xd0
   2a2a4:	cmp	r3, #35	; 0x23
   2a2a8:	ldrls	pc, [pc, r3, lsl #2]
   2a2ac:	b	2b618 <__assert_fail@plt+0x19a74>
   2a2b0:	andeq	fp, r2, r4, lsl #3
   2a2b4:	andeq	sl, r2, r8, lsr r4
   2a2b8:	andeq	fp, r2, r8, lsl r6
   2a2bc:	andeq	fp, r2, ip, rrx
   2a2c0:	andeq	fp, r2, r4, lsr #2
   2a2c4:	andeq	fp, r2, r8, lsl r6
   2a2c8:	andeq	fp, r2, r8, lsl r6
   2a2cc:	andeq	fp, r2, r4, asr r5
   2a2d0:	strdeq	fp, [r2], -r8
   2a2d4:	andeq	sl, r2, r8, lsr r4
   2a2d8:	andeq	sl, r2, ip, asr #6
   2a2dc:	andeq	fp, r2, r0, ror r2
   2a2e0:	andeq	fp, r2, r8, lsl r6
   2a2e4:	andeq	fp, r2, r8, lsl r6
   2a2e8:	andeq	fp, r2, r8, lsl r6
   2a2ec:	andeq	fp, r2, r8, lsl r6
   2a2f0:	andeq	fp, r2, r8, lsl r6
   2a2f4:	andeq	sl, r2, ip, asr #6
   2a2f8:	andeq	sl, r2, ip, asr #6
   2a2fc:	muleq	r2, r0, r3
   2a300:	andeq	fp, r2, r8, lsl r6
   2a304:	andeq	fp, r2, r8, lsl r6
   2a308:	andeq	sl, r2, r0, asr #6
   2a30c:	andeq	sl, r2, r8, ror #6
   2a310:	andeq	fp, r2, r8, lsl r6
   2a314:	andeq	fp, r2, r8, lsl r6
   2a318:	andeq	fp, r2, r8, lsl r6
   2a31c:	andeq	fp, r2, r8, lsl r6
   2a320:	andeq	fp, r2, r8, lsl r6
   2a324:	andeq	fp, r2, r8, lsl r6
   2a328:	andeq	fp, r2, r8, lsl r6
   2a32c:	andeq	fp, r2, ip, asr #1
   2a330:	andeq	fp, r2, ip, asr #1
   2a334:	andeq	fp, r2, r8, asr r1
   2a338:	andeq	fp, r2, r8, asr r1
   2a33c:	andeq	fp, r2, r4, lsr r5
   2a340:	ldr	r3, [sp, #40]	; 0x28
   2a344:	tst	r3, #16777216	; 0x1000000
   2a348:	bne	2a95c <__assert_fail@plt+0x18db8>
   2a34c:	ldr	r3, [sp, #40]	; 0x28
   2a350:	tst	r3, #32
   2a354:	bne	2a95c <__assert_fail@plt+0x18db8>
   2a358:	tst	r3, #16
   2a35c:	bne	2c008 <__assert_fail@plt+0x1a464>
   2a360:	cmp	r2, #9
   2a364:	beq	2b5f8 <__assert_fail@plt+0x19a54>
   2a368:	ldr	r2, [sp, #32]
   2a36c:	mov	r3, #1
   2a370:	add	r1, sl, #64	; 0x40
   2a374:	strb	r3, [r2, #4]
   2a378:	add	r0, sl, #56	; 0x38
   2a37c:	bl	26648 <__assert_fail@plt+0x14aa4>
   2a380:	subs	r3, r0, #0
   2a384:	str	r3, [sp, #36]	; 0x24
   2a388:	beq	2b258 <__assert_fail@plt+0x196b4>
   2a38c:	ldr	r5, [sp, #40]	; 0x28
   2a390:	ldr	r4, [sp, #44]	; 0x2c
   2a394:	ldr	r6, [sp, #32]
   2a398:	mov	r2, r5
   2a39c:	mov	r1, r4
   2a3a0:	mov	r0, r6
   2a3a4:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2a3a8:	ldr	r3, [r4, #40]	; 0x28
   2a3ac:	mov	fp, #0
   2a3b0:	and	lr, r5, #2097152	; 0x200000
   2a3b4:	and	ip, r5, #16777216	; 0x1000000
   2a3b8:	ldrb	r2, [r6, #4]
   2a3bc:	str	lr, [sp, #60]	; 0x3c
   2a3c0:	str	ip, [sp, #52]	; 0x34
   2a3c4:	add	r3, r3, r0
   2a3c8:	str	r3, [r4, #40]	; 0x28
   2a3cc:	cmp	r2, #23
   2a3d0:	bls	2a44c <__assert_fail@plt+0x188a8>
   2a3d4:	ldr	r0, [sp, #36]	; 0x24
   2a3d8:	add	sp, sp, #172	; 0xac
   2a3dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a3e0:	ldr	r3, [sp, #212]	; 0xd4
   2a3e4:	mov	r2, r8
   2a3e8:	str	r3, [sp, #4]
   2a3ec:	str	r6, [sp]
   2a3f0:	mov	r3, r9
   2a3f4:	mov	r1, r4
   2a3f8:	bl	2c68c <__assert_fail@plt+0x1aae8>
   2a3fc:	ldr	r3, [sp, #212]	; 0xd4
   2a400:	ldr	r3, [r3]
   2a404:	cmp	r3, #0
   2a408:	mov	r2, r0
   2a40c:	bne	2a438 <__assert_fail@plt+0x18894>
   2a410:	ldr	r3, [sp, #32]
   2a414:	ldrb	r3, [r3, #4]
   2a418:	cmp	r3, #9
   2a41c:	beq	2b5a4 <__assert_fail@plt+0x19a00>
   2a420:	cmp	r0, #0
   2a424:	beq	2a42c <__assert_fail@plt+0x18888>
   2a428:	bl	266f4 <__assert_fail@plt+0x14b50>
   2a42c:	ldr	r2, [sp, #212]	; 0xd4
   2a430:	mov	r3, #8
   2a434:	str	r3, [r2]
   2a438:	mov	r3, #0
   2a43c:	str	r3, [sp, #36]	; 0x24
   2a440:	ldr	r0, [sp, #36]	; 0x24
   2a444:	add	sp, sp, #172	; 0xac
   2a448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a44c:	ldr	r3, [pc, #3864]	; 2b36c <__assert_fail@plt+0x197c8>
   2a450:	sub	r9, r2, #18
   2a454:	clz	r9, r9
   2a458:	mvn	r4, r3, lsr r2
   2a45c:	ands	r4, r4, #1
   2a460:	lsr	r9, r9, #5
   2a464:	bne	2a3d4 <__assert_fail@plt+0x18830>
   2a468:	ldr	r3, [sp, #32]
   2a46c:	cmp	r2, #23
   2a470:	ldm	r3, {r0, r1}
   2a474:	ldr	r3, [sp, #44]	; 0x2c
   2a478:	ldr	r5, [r3, #40]	; 0x28
   2a47c:	add	r3, sp, #104	; 0x68
   2a480:	stm	r3, {r0, r1}
   2a484:	beq	2a858 <__assert_fail@plt+0x18cb4>
   2a488:	ldr	r4, [sp, #44]	; 0x2c
   2a48c:	cmp	r2, #19
   2a490:	moveq	r3, #1
   2a494:	mvnne	r3, #0
   2a498:	mov	r1, r4
   2a49c:	ldr	r2, [sp, #40]	; 0x28
   2a4a0:	ldr	r0, [sp, #32]
   2a4a4:	str	r3, [sp, #24]
   2a4a8:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2a4ac:	ldr	r3, [r4, #40]	; 0x28
   2a4b0:	ldr	r1, [sp, #36]	; 0x24
   2a4b4:	cmp	r1, #0
   2a4b8:	add	r0, r3, r0
   2a4bc:	str	r0, [r4, #40]	; 0x28
   2a4c0:	beq	2a914 <__assert_fail@plt+0x18d70>
   2a4c4:	cmp	r9, #0
   2a4c8:	bgt	2aa8c <__assert_fail@plt+0x18ee8>
   2a4cc:	ldr	r5, [sp, #36]	; 0x24
   2a4d0:	mov	r8, #0
   2a4d4:	add	r3, sp, #136	; 0x88
   2a4d8:	str	r3, [sp, #48]	; 0x30
   2a4dc:	ldrb	r3, [r5, #24]
   2a4e0:	cmp	r3, #17
   2a4e4:	beq	2a97c <__assert_fail@plt+0x18dd8>
   2a4e8:	ldr	r3, [sp, #48]	; 0x30
   2a4ec:	str	fp, [r3]
   2a4f0:	str	fp, [r3, #4]
   2a4f4:	ldr	r3, [sp, #24]
   2a4f8:	ldr	r1, [sl, #64]	; 0x40
   2a4fc:	cmn	r3, #1
   2a500:	movne	r4, #10
   2a504:	moveq	r4, #11
   2a508:	cmp	r1, #31
   2a50c:	beq	2ada0 <__assert_fail@plt+0x191fc>
   2a510:	lsl	r2, r1, #5
   2a514:	ldr	r3, [sl, #56]	; 0x38
   2a518:	add	r1, r1, #1
   2a51c:	add	lr, r2, #4
   2a520:	add	r2, r3, r2
   2a524:	str	r1, [sl, #64]	; 0x40
   2a528:	str	fp, [r2, #4]
   2a52c:	str	r5, [r2, #8]
   2a530:	str	fp, [r2, #12]
   2a534:	strb	r4, [sp, #140]	; 0x8c
   2a538:	ldr	r4, [sp, #48]	; 0x30
   2a53c:	add	ip, r2, #24
   2a540:	add	r3, r3, lr
   2a544:	ldm	r4, {r0, r1}
   2a548:	cmp	r3, #0
   2a54c:	stm	ip, {r0, r1}
   2a550:	ldrb	r1, [r2, #30]
   2a554:	mvn	r0, #0
   2a558:	str	fp, [r2, #16]
   2a55c:	and	r1, r1, #243	; 0xf3
   2a560:	str	fp, [r2, #20]
   2a564:	strb	r1, [r2, #30]
   2a568:	str	r0, [r2, #32]
   2a56c:	str	r3, [r5]
   2a570:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2a574:	ldr	r1, [sp, #24]
   2a578:	add	r2, r9, #2
   2a57c:	cmp	r2, r1
   2a580:	str	r2, [sp, #20]
   2a584:	bgt	2aa34 <__assert_fail@plt+0x18e90>
   2a588:	str	r8, [sp, #56]	; 0x38
   2a58c:	mov	r9, r0
   2a590:	mov	r6, r3
   2a594:	mov	r8, r4
   2a598:	mov	r4, r5
   2a59c:	mov	r7, r8
   2a5a0:	b	2a5ac <__assert_fail@plt+0x18a08>
   2a5a4:	mov	r4, r2
   2a5a8:	add	r7, r6, #4
   2a5ac:	ldr	r1, [sl, #64]	; 0x40
   2a5b0:	cmp	r1, #31
   2a5b4:	beq	2a678 <__assert_fail@plt+0x18ad4>
   2a5b8:	lsl	r2, r1, #5
   2a5bc:	ldr	ip, [sl, #56]	; 0x38
   2a5c0:	add	r0, r1, #1
   2a5c4:	add	lr, r2, #4
   2a5c8:	add	r2, ip, r2
   2a5cc:	add	r1, r4, #20
   2a5d0:	str	r0, [sl, #64]	; 0x40
   2a5d4:	str	fp, [r2, #4]
   2a5d8:	str	fp, [r2, #8]
   2a5dc:	str	fp, [r2, #12]
   2a5e0:	ldm	r1, {r0, r1}
   2a5e4:	add	r5, r2, #24
   2a5e8:	add	ip, ip, lr
   2a5ec:	stm	r5, {r0, r1}
   2a5f0:	ldrb	r1, [r2, #30]
   2a5f4:	cmp	ip, #0
   2a5f8:	str	fp, [r2, #16]
   2a5fc:	and	r1, r1, #243	; 0xf3
   2a600:	str	fp, [r2, #20]
   2a604:	str	r9, [r2, #32]
   2a608:	strb	r1, [r2, #30]
   2a60c:	str	ip, [r7]
   2a610:	beq	2a7c0 <__assert_fail@plt+0x18c1c>
   2a614:	str	r6, [r2, #4]
   2a618:	ldr	r6, [r7]
   2a61c:	ldrb	r2, [r6, #26]
   2a620:	orr	r2, r2, #4
   2a624:	strb	r2, [r6, #26]
   2a628:	ldr	r2, [r4, #4]
   2a62c:	cmp	r2, #0
   2a630:	bne	2a5a4 <__assert_fail@plt+0x18a00>
   2a634:	mov	r1, fp
   2a638:	b	2a654 <__assert_fail@plt+0x18ab0>
   2a63c:	ldr	r2, [r4]
   2a640:	ldr	r6, [r6]
   2a644:	cmp	r2, #0
   2a648:	mov	r1, r4
   2a64c:	beq	2a6ac <__assert_fail@plt+0x18b08>
   2a650:	mov	r4, r2
   2a654:	ldr	r2, [r4, #8]
   2a658:	cmp	r2, r1
   2a65c:	cmpne	r2, #0
   2a660:	beq	2a63c <__assert_fail@plt+0x18a98>
   2a664:	ldr	r1, [sl, #64]	; 0x40
   2a668:	mov	r4, r2
   2a66c:	cmp	r1, #31
   2a670:	add	r7, r6, #8
   2a674:	bne	2a5b8 <__assert_fail@plt+0x18a14>
   2a678:	mov	r0, #996	; 0x3e4
   2a67c:	str	r3, [sp, #28]
   2a680:	bl	36944 <__assert_fail@plt+0x24da0>
   2a684:	ldr	r3, [sp, #28]
   2a688:	subs	ip, r0, #0
   2a68c:	beq	2ae00 <__assert_fail@plt+0x1925c>
   2a690:	ldr	r1, [sl, #56]	; 0x38
   2a694:	mov	lr, #4
   2a698:	str	r1, [ip]
   2a69c:	mov	r0, #1
   2a6a0:	mov	r2, fp
   2a6a4:	str	ip, [sl, #56]	; 0x38
   2a6a8:	b	2a5c8 <__assert_fail@plt+0x18a24>
   2a6ac:	ldr	r5, [sp, #136]	; 0x88
   2a6b0:	str	fp, [r8]
   2a6b4:	str	fp, [r8, #4]
   2a6b8:	ldr	r2, [sl, #64]	; 0x40
   2a6bc:	cmp	r2, #31
   2a6c0:	beq	2a7f8 <__assert_fail@plt+0x18c54>
   2a6c4:	lsl	r4, r2, #5
   2a6c8:	ldr	ip, [sl, #56]	; 0x38
   2a6cc:	add	r2, r2, #1
   2a6d0:	add	r6, r4, #4
   2a6d4:	add	r4, ip, r4
   2a6d8:	str	r2, [sl, #64]	; 0x40
   2a6dc:	mov	r2, #16
   2a6e0:	str	fp, [r4, #4]
   2a6e4:	str	r3, [r4, #8]
   2a6e8:	str	r5, [r4, #12]
   2a6ec:	strb	r2, [sp, #140]	; 0x8c
   2a6f0:	ldm	r8, {r0, r1}
   2a6f4:	add	r2, r4, #24
   2a6f8:	add	r6, ip, r6
   2a6fc:	stm	r2, {r0, r1}
   2a700:	ldrb	r2, [r4, #30]
   2a704:	cmp	r5, #0
   2a708:	str	fp, [r4, #16]
   2a70c:	and	r2, r2, #243	; 0xf3
   2a710:	str	fp, [r4, #20]
   2a714:	str	r9, [r4, #32]
   2a718:	strb	r2, [r4, #30]
   2a71c:	str	r6, [r3]
   2a720:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2a724:	cmp	r6, #0
   2a728:	str	r6, [r5]
   2a72c:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2a730:	str	fp, [r8]
   2a734:	str	fp, [r8, #4]
   2a738:	ldr	r1, [sl, #64]	; 0x40
   2a73c:	cmp	r1, #31
   2a740:	beq	2a82c <__assert_fail@plt+0x18c88>
   2a744:	lsl	r2, r1, #5
   2a748:	add	r3, r2, #4
   2a74c:	add	r1, r1, #1
   2a750:	add	r2, ip, r2
   2a754:	mov	r0, #10
   2a758:	str	r1, [sl, #64]	; 0x40
   2a75c:	str	fp, [r2, #4]
   2a760:	str	r6, [r2, #8]
   2a764:	str	fp, [r2, #12]
   2a768:	strb	r0, [sp, #140]	; 0x8c
   2a76c:	ldm	r8, {r0, r1}
   2a770:	add	lr, r2, #24
   2a774:	add	r3, ip, r3
   2a778:	stm	lr, {r0, r1}
   2a77c:	ldrb	r1, [r2, #30]
   2a780:	cmp	r3, #0
   2a784:	str	fp, [r2, #16]
   2a788:	and	r1, r1, #243	; 0xf3
   2a78c:	str	fp, [r2, #20]
   2a790:	str	r9, [r2, #32]
   2a794:	strb	r1, [r2, #30]
   2a798:	str	r3, [r4, #4]
   2a79c:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2a7a0:	ldr	r2, [sp, #20]
   2a7a4:	ldr	r1, [sp, #24]
   2a7a8:	add	r2, r2, #1
   2a7ac:	cmp	r2, r1
   2a7b0:	str	r2, [sp, #20]
   2a7b4:	bgt	2aa30 <__assert_fail@plt+0x18e8c>
   2a7b8:	ldr	r6, [r5]
   2a7bc:	b	2a598 <__assert_fail@plt+0x189f4>
   2a7c0:	mov	r5, ip
   2a7c4:	b	2a6b0 <__assert_fail@plt+0x18b0c>
   2a7c8:	str	lr, [r6]
   2a7cc:	ldr	r2, [sp, #212]	; 0xd4
   2a7d0:	mov	r3, #12
   2a7d4:	str	r3, [r2]
   2a7d8:	ldr	r3, [sp, #36]	; 0x24
   2a7dc:	cmp	r3, #0
   2a7e0:	beq	2a438 <__assert_fail@plt+0x18894>
   2a7e4:	mov	r0, r3
   2a7e8:	bl	266f4 <__assert_fail@plt+0x14b50>
   2a7ec:	mov	r3, #0
   2a7f0:	str	r3, [sp, #36]	; 0x24
   2a7f4:	b	2a440 <__assert_fail@plt+0x1889c>
   2a7f8:	mov	r0, #996	; 0x3e4
   2a7fc:	str	r3, [sp, #28]
   2a800:	bl	36944 <__assert_fail@plt+0x24da0>
   2a804:	subs	ip, r0, #0
   2a808:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2a80c:	ldr	r1, [sl, #56]	; 0x38
   2a810:	mov	r6, #4
   2a814:	str	r1, [ip]
   2a818:	mov	r2, #1
   2a81c:	mov	r4, fp
   2a820:	str	ip, [sl, #56]	; 0x38
   2a824:	ldr	r3, [sp, #28]
   2a828:	b	2a6d4 <__assert_fail@plt+0x18b30>
   2a82c:	mov	r0, #996	; 0x3e4
   2a830:	bl	36944 <__assert_fail@plt+0x24da0>
   2a834:	subs	ip, r0, #0
   2a838:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2a83c:	ldr	r0, [sl, #56]	; 0x38
   2a840:	mov	r1, #1
   2a844:	str	r0, [ip]
   2a848:	mov	r3, #4
   2a84c:	mov	r2, fp
   2a850:	str	ip, [sl, #56]	; 0x38
   2a854:	b	2a750 <__assert_fail@plt+0x18bac>
   2a858:	str	r4, [sp, #20]
   2a85c:	ldr	r8, [sp, #44]	; 0x2c
   2a860:	ldr	r4, [sp, #32]
   2a864:	mvn	r9, #0
   2a868:	mov	r7, #32768	; 0x8000
   2a86c:	mvn	r6, #1
   2a870:	mov	r1, r8
   2a874:	ldr	r2, [sp, #40]	; 0x28
   2a878:	mov	r0, r4
   2a87c:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2a880:	ldrb	ip, [r4, #4]
   2a884:	ldr	r2, [r8, #40]	; 0x28
   2a888:	cmn	r9, #2
   2a88c:	movne	r1, #0
   2a890:	moveq	r1, #1
   2a894:	cmp	ip, #2
   2a898:	add	r0, r2, r0
   2a89c:	str	r0, [r8, #40]	; 0x28
   2a8a0:	ldrb	r2, [r4]
   2a8a4:	beq	2a9f8 <__assert_fail@plt+0x18e54>
   2a8a8:	cmp	ip, #24
   2a8ac:	beq	2ae18 <__assert_fail@plt+0x19274>
   2a8b0:	cmp	r2, #44	; 0x2c
   2a8b4:	beq	2af38 <__assert_fail@plt+0x19394>
   2a8b8:	cmp	ip, #1
   2a8bc:	beq	2a8c8 <__assert_fail@plt+0x18d24>
   2a8c0:	mov	r9, r6
   2a8c4:	b	2a870 <__assert_fail@plt+0x18ccc>
   2a8c8:	sub	r0, r2, #48	; 0x30
   2a8cc:	uxtb	r1, r0
   2a8d0:	cmp	r1, #9
   2a8d4:	movhi	r1, #0
   2a8d8:	movls	r1, #1
   2a8dc:	cmn	r9, #2
   2a8e0:	moveq	r1, #0
   2a8e4:	cmp	r1, #0
   2a8e8:	beq	2a8c0 <__assert_fail@plt+0x18d1c>
   2a8ec:	cmn	r9, #1
   2a8f0:	moveq	r9, r0
   2a8f4:	beq	2a870 <__assert_fail@plt+0x18ccc>
   2a8f8:	add	r3, r9, r9, lsl #2
   2a8fc:	add	r3, r2, r3, lsl #1
   2a900:	ldr	r2, [pc, #2664]	; 2b370 <__assert_fail@plt+0x197cc>
   2a904:	cmp	r3, r2
   2a908:	suble	r9, r3, #48	; 0x30
   2a90c:	movgt	r9, r7
   2a910:	b	2a870 <__assert_fail@plt+0x18ccc>
   2a914:	ldr	r3, [sp, #212]	; 0xd4
   2a918:	ldr	r3, [r3]
   2a91c:	cmp	r3, #0
   2a920:	bne	2a7d8 <__assert_fail@plt+0x18c34>
   2a924:	str	fp, [sp, #36]	; 0x24
   2a928:	ldr	r3, [sp, #52]	; 0x34
   2a92c:	cmp	r3, #0
   2a930:	ldr	r3, [sp, #32]
   2a934:	ldrb	r2, [r3, #4]
   2a938:	beq	2a3cc <__assert_fail@plt+0x18828>
   2a93c:	cmp	r2, #23
   2a940:	cmpne	r2, #11
   2a944:	bne	2a3cc <__assert_fail@plt+0x18828>
   2a948:	ldr	r3, [sp, #36]	; 0x24
   2a94c:	cmp	r3, #0
   2a950:	beq	2a95c <__assert_fail@plt+0x18db8>
   2a954:	mov	r0, r3
   2a958:	bl	266f4 <__assert_fail@plt+0x14b50>
   2a95c:	ldr	r2, [sp, #212]	; 0xd4
   2a960:	mov	r3, #13
   2a964:	str	r3, [r2]
   2a968:	mov	r3, #0
   2a96c:	str	r3, [sp, #36]	; 0x24
   2a970:	ldr	r0, [sp, #36]	; 0x24
   2a974:	add	sp, sp, #172	; 0xac
   2a978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a97c:	ldr	r1, [r5, #20]
   2a980:	mov	r3, r5
   2a984:	b	2a98c <__assert_fail@plt+0x18de8>
   2a988:	mov	r3, r2
   2a98c:	ldr	r2, [r3, #4]
   2a990:	cmp	r2, #0
   2a994:	bne	2a988 <__assert_fail@plt+0x18de4>
   2a998:	ldr	r2, [r3, #8]
   2a99c:	cmp	r2, #0
   2a9a0:	bne	2a988 <__assert_fail@plt+0x18de4>
   2a9a4:	b	2a9c8 <__assert_fail@plt+0x18e24>
   2a9a8:	ldr	r2, [r0, #8]
   2a9ac:	cmp	r3, r2
   2a9b0:	cmpne	r2, #0
   2a9b4:	moveq	r3, #1
   2a9b8:	movne	r3, #0
   2a9bc:	cmp	r3, #0
   2a9c0:	mov	r3, r0
   2a9c4:	beq	2a988 <__assert_fail@plt+0x18de4>
   2a9c8:	ldrb	r2, [r3, #24]
   2a9cc:	cmp	r2, #17
   2a9d0:	bne	2a9e8 <__assert_fail@plt+0x18e44>
   2a9d4:	ldr	r2, [r3, #20]
   2a9d8:	cmp	r1, r2
   2a9dc:	ldrbeq	r2, [r3, #26]
   2a9e0:	orreq	r2, r2, #8
   2a9e4:	strbeq	r2, [r3, #26]
   2a9e8:	ldr	r0, [r3]
   2a9ec:	cmp	r0, #0
   2a9f0:	bne	2a9a8 <__assert_fail@plt+0x18e04>
   2a9f4:	b	2a4e8 <__assert_fail@plt+0x18944>
   2a9f8:	mov	r3, ip
   2a9fc:	ldr	r2, [sp, #60]	; 0x3c
   2aa00:	cmp	r2, #0
   2aa04:	beq	2b6d0 <__assert_fail@plt+0x19b2c>
   2aa08:	add	r3, sp, #104	; 0x68
   2aa0c:	ldr	r2, [sp, #32]
   2aa10:	ldm	r3, {r0, r1}
   2aa14:	ldr	r3, [sp, #44]	; 0x2c
   2aa18:	str	r5, [r3, #40]	; 0x28
   2aa1c:	mov	r3, #1
   2aa20:	stm	r2, {r0, r1}
   2aa24:	ldr	r0, [sp, #36]	; 0x24
   2aa28:	strb	r3, [r2, #4]
   2aa2c:	b	2aa64 <__assert_fail@plt+0x18ec0>
   2aa30:	ldr	r8, [sp, #56]	; 0x38
   2aa34:	cmp	r8, #0
   2aa38:	beq	2ae10 <__assert_fail@plt+0x1926c>
   2aa3c:	ldr	r0, [sp, #48]	; 0x30
   2aa40:	mov	ip, #16
   2aa44:	str	r0, [sp]
   2aa48:	mov	r2, r8
   2aa4c:	str	fp, [r0, #4]
   2aa50:	str	fp, [r0]
   2aa54:	add	r1, sl, #64	; 0x40
   2aa58:	add	r0, sl, #56	; 0x38
   2aa5c:	strb	ip, [sp, #140]	; 0x8c
   2aa60:	bl	23b24 <__assert_fail@plt+0x11f80>
   2aa64:	ldr	r3, [sp, #212]	; 0xd4
   2aa68:	ldr	r3, [r3]
   2aa6c:	adds	r3, r3, #0
   2aa70:	movne	r3, #1
   2aa74:	cmp	r0, #0
   2aa78:	movne	r3, #0
   2aa7c:	cmp	r3, #0
   2aa80:	bne	2a7d8 <__assert_fail@plt+0x18c34>
   2aa84:	str	r0, [sp, #36]	; 0x24
   2aa88:	b	2a928 <__assert_fail@plt+0x18d84>
   2aa8c:	cmp	r9, #1
   2aa90:	beq	2b624 <__assert_fail@plt+0x19a80>
   2aa94:	ldr	r3, [sp, #36]	; 0x24
   2aa98:	str	r9, [sp, #48]	; 0x30
   2aa9c:	mov	r2, r3
   2aaa0:	ldr	r8, [r3]
   2aaa4:	mov	r5, r3
   2aaa8:	mov	r3, #2
   2aaac:	str	r3, [sp, #20]
   2aab0:	add	r3, sp, #136	; 0x88
   2aab4:	mvn	r7, #0
   2aab8:	mov	r9, r3
   2aabc:	mov	r4, r5
   2aac0:	mov	r6, r9
   2aac4:	b	2aad0 <__assert_fail@plt+0x18f2c>
   2aac8:	mov	r4, r3
   2aacc:	add	r6, r8, #4
   2aad0:	ldr	r1, [sl, #64]	; 0x40
   2aad4:	cmp	r1, #31
   2aad8:	beq	2ab9c <__assert_fail@plt+0x18ff8>
   2aadc:	lsl	r3, r1, #5
   2aae0:	ldr	ip, [sl, #56]	; 0x38
   2aae4:	add	r0, r1, #1
   2aae8:	add	lr, r3, #4
   2aaec:	add	r3, ip, r3
   2aaf0:	add	r1, r4, #20
   2aaf4:	str	r0, [sl, #64]	; 0x40
   2aaf8:	str	fp, [r3, #4]
   2aafc:	str	fp, [r3, #8]
   2ab00:	str	fp, [r3, #12]
   2ab04:	ldm	r1, {r0, r1}
   2ab08:	add	r5, r3, #24
   2ab0c:	add	ip, ip, lr
   2ab10:	stm	r5, {r0, r1}
   2ab14:	ldrb	r1, [r3, #30]
   2ab18:	cmp	ip, #0
   2ab1c:	str	fp, [r3, #16]
   2ab20:	and	r1, r1, #243	; 0xf3
   2ab24:	str	fp, [r3, #20]
   2ab28:	str	r7, [r3, #32]
   2ab2c:	strb	r1, [r3, #30]
   2ab30:	str	ip, [r6]
   2ab34:	beq	2ad98 <__assert_fail@plt+0x191f4>
   2ab38:	str	r8, [r3, #4]
   2ab3c:	ldr	r8, [r6]
   2ab40:	ldrb	r3, [r8, #26]
   2ab44:	orr	r3, r3, #4
   2ab48:	strb	r3, [r8, #26]
   2ab4c:	ldr	r3, [r4, #4]
   2ab50:	cmp	r3, #0
   2ab54:	bne	2aac8 <__assert_fail@plt+0x18f24>
   2ab58:	mov	r1, fp
   2ab5c:	b	2ab78 <__assert_fail@plt+0x18fd4>
   2ab60:	ldr	r3, [r4]
   2ab64:	ldr	r8, [r8]
   2ab68:	cmp	r3, #0
   2ab6c:	mov	r1, r4
   2ab70:	beq	2abd0 <__assert_fail@plt+0x1902c>
   2ab74:	mov	r4, r3
   2ab78:	ldr	r3, [r4, #8]
   2ab7c:	cmp	r3, #0
   2ab80:	cmpne	r3, r1
   2ab84:	beq	2ab60 <__assert_fail@plt+0x18fbc>
   2ab88:	ldr	r1, [sl, #64]	; 0x40
   2ab8c:	mov	r4, r3
   2ab90:	cmp	r1, #31
   2ab94:	add	r6, r8, #8
   2ab98:	bne	2aadc <__assert_fail@plt+0x18f38>
   2ab9c:	mov	r0, #996	; 0x3e4
   2aba0:	str	r2, [sp, #28]
   2aba4:	bl	36944 <__assert_fail@plt+0x24da0>
   2aba8:	ldr	r2, [sp, #28]
   2abac:	subs	ip, r0, #0
   2abb0:	beq	2b618 <__assert_fail@plt+0x19a74>
   2abb4:	ldr	r1, [sl, #56]	; 0x38
   2abb8:	mov	lr, #4
   2abbc:	str	r1, [ip]
   2abc0:	mov	r0, #1
   2abc4:	mov	r3, fp
   2abc8:	str	ip, [sl, #56]	; 0x38
   2abcc:	b	2aaec <__assert_fail@plt+0x18f48>
   2abd0:	ldr	r5, [sp, #136]	; 0x88
   2abd4:	str	fp, [r9]
   2abd8:	str	fp, [r9, #4]
   2abdc:	ldr	r1, [sl, #64]	; 0x40
   2abe0:	cmp	r1, #31
   2abe4:	beq	2adcc <__assert_fail@plt+0x19228>
   2abe8:	lsl	r3, r1, #5
   2abec:	ldr	r8, [sl, #56]	; 0x38
   2abf0:	add	r1, r1, #1
   2abf4:	add	lr, r3, #4
   2abf8:	add	r3, r8, r3
   2abfc:	str	r1, [sl, #64]	; 0x40
   2ac00:	mov	r1, #16
   2ac04:	str	fp, [r3, #4]
   2ac08:	str	r2, [r3, #8]
   2ac0c:	str	r5, [r3, #12]
   2ac10:	strb	r1, [sp, #140]	; 0x8c
   2ac14:	ldm	r9, {r0, r1}
   2ac18:	add	ip, r3, #24
   2ac1c:	add	r8, r8, lr
   2ac20:	stm	ip, {r0, r1}
   2ac24:	ldrb	r1, [r3, #30]
   2ac28:	cmp	r5, #0
   2ac2c:	str	fp, [r3, #16]
   2ac30:	and	r1, r1, #243	; 0xf3
   2ac34:	str	fp, [r3, #20]
   2ac38:	str	r7, [r3, #32]
   2ac3c:	strb	r1, [r3, #30]
   2ac40:	str	r8, [r2]
   2ac44:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2ac48:	cmp	r8, #0
   2ac4c:	str	r8, [r5]
   2ac50:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2ac54:	ldr	r3, [sp, #20]
   2ac58:	ldr	r2, [sp, #48]	; 0x30
   2ac5c:	add	r3, r3, #1
   2ac60:	cmp	r3, r2
   2ac64:	str	r3, [sp, #20]
   2ac68:	mov	r2, r8
   2ac6c:	ble	2aabc <__assert_fail@plt+0x18f18>
   2ac70:	ldr	r9, [sp, #48]	; 0x30
   2ac74:	ldr	r3, [sp, #24]
   2ac78:	cmp	r9, r3
   2ac7c:	beq	2ae0c <__assert_fail@plt+0x19268>
   2ac80:	add	r3, sp, #136	; 0x88
   2ac84:	str	r3, [sp, #48]	; 0x30
   2ac88:	ldr	r4, [r5]
   2ac8c:	mov	r6, r3
   2ac90:	mvn	r7, #0
   2ac94:	b	2aca0 <__assert_fail@plt+0x190fc>
   2ac98:	mov	r5, r3
   2ac9c:	add	r6, r4, #4
   2aca0:	ldr	r2, [sl, #64]	; 0x40
   2aca4:	cmp	r2, #31
   2aca8:	beq	2ad6c <__assert_fail@plt+0x191c8>
   2acac:	lsl	r3, r2, #5
   2acb0:	ldr	lr, [sl, #56]	; 0x38
   2acb4:	add	r1, r2, #1
   2acb8:	add	ip, r3, #4
   2acbc:	add	r3, lr, r3
   2acc0:	add	r2, r5, #20
   2acc4:	str	r1, [sl, #64]	; 0x40
   2acc8:	str	fp, [r3, #4]
   2accc:	str	fp, [r3, #8]
   2acd0:	str	fp, [r3, #12]
   2acd4:	ldm	r2, {r0, r1}
   2acd8:	add	r2, r3, #24
   2acdc:	add	ip, lr, ip
   2ace0:	stm	r2, {r0, r1}
   2ace4:	ldrb	r2, [r3, #30]
   2ace8:	cmp	ip, #0
   2acec:	str	fp, [r3, #16]
   2acf0:	and	r2, r2, #243	; 0xf3
   2acf4:	str	fp, [r3, #20]
   2acf8:	str	r7, [r3, #32]
   2acfc:	strb	r2, [r3, #30]
   2ad00:	str	ip, [r6]
   2ad04:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2ad08:	str	r4, [r3, #4]
   2ad0c:	ldr	r4, [r6]
   2ad10:	ldrb	r3, [r4, #26]
   2ad14:	orr	r3, r3, #4
   2ad18:	strb	r3, [r4, #26]
   2ad1c:	ldr	r3, [r5, #4]
   2ad20:	cmp	r3, #0
   2ad24:	bne	2ac98 <__assert_fail@plt+0x190f4>
   2ad28:	mov	r2, fp
   2ad2c:	b	2ad48 <__assert_fail@plt+0x191a4>
   2ad30:	ldr	r3, [r5]
   2ad34:	ldr	r4, [r4]
   2ad38:	cmp	r3, #0
   2ad3c:	mov	r2, r5
   2ad40:	beq	2b05c <__assert_fail@plt+0x194b8>
   2ad44:	mov	r5, r3
   2ad48:	ldr	r3, [r5, #8]
   2ad4c:	cmp	r3, r2
   2ad50:	cmpne	r3, #0
   2ad54:	beq	2ad30 <__assert_fail@plt+0x1918c>
   2ad58:	ldr	r2, [sl, #64]	; 0x40
   2ad5c:	mov	r5, r3
   2ad60:	cmp	r2, #31
   2ad64:	add	r6, r4, #8
   2ad68:	bne	2acac <__assert_fail@plt+0x19108>
   2ad6c:	mov	r0, #996	; 0x3e4
   2ad70:	bl	36944 <__assert_fail@plt+0x24da0>
   2ad74:	subs	lr, r0, #0
   2ad78:	beq	2a7c8 <__assert_fail@plt+0x18c24>
   2ad7c:	ldr	r2, [sl, #56]	; 0x38
   2ad80:	mov	r1, #1
   2ad84:	str	r2, [lr]
   2ad88:	mov	ip, #4
   2ad8c:	mov	r3, fp
   2ad90:	str	lr, [sl, #56]	; 0x38
   2ad94:	b	2acbc <__assert_fail@plt+0x19118>
   2ad98:	mov	r5, ip
   2ad9c:	b	2abd4 <__assert_fail@plt+0x19030>
   2ada0:	mov	r0, #996	; 0x3e4
   2ada4:	bl	36944 <__assert_fail@plt+0x24da0>
   2ada8:	subs	r3, r0, #0
   2adac:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2adb0:	ldr	r0, [sl, #56]	; 0x38
   2adb4:	mov	lr, #4
   2adb8:	str	r0, [r3]
   2adbc:	mov	r1, #1
   2adc0:	mov	r2, fp
   2adc4:	str	r3, [sl, #56]	; 0x38
   2adc8:	b	2a520 <__assert_fail@plt+0x1897c>
   2adcc:	mov	r0, #996	; 0x3e4
   2add0:	str	r2, [sp, #28]
   2add4:	bl	36944 <__assert_fail@plt+0x24da0>
   2add8:	subs	r8, r0, #0
   2addc:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2ade0:	ldr	r0, [sl, #56]	; 0x38
   2ade4:	mov	lr, #4
   2ade8:	str	r0, [r8]
   2adec:	mov	r1, #1
   2adf0:	mov	r3, fp
   2adf4:	str	r8, [sl, #56]	; 0x38
   2adf8:	ldr	r2, [sp, #28]
   2adfc:	b	2abf8 <__assert_fail@plt+0x19054>
   2ae00:	str	ip, [r7]
   2ae04:	mov	r5, fp
   2ae08:	b	2a6b0 <__assert_fail@plt+0x18b0c>
   2ae0c:	mov	r3, r8
   2ae10:	str	r3, [sp, #36]	; 0x24
   2ae14:	b	2a928 <__assert_fail@plt+0x18d84>
   2ae18:	cmn	r9, #1
   2ae1c:	beq	2af64 <__assert_fail@plt+0x193c0>
   2ae20:	cmn	r9, #2
   2ae24:	strne	r9, [sp, #24]
   2ae28:	beq	2af58 <__assert_fail@plt+0x193b4>
   2ae2c:	ldr	r3, [sp, #24]
   2ae30:	cmn	r3, #1
   2ae34:	beq	2af74 <__assert_fail@plt+0x193d0>
   2ae38:	ldr	r2, [pc, #1332]	; 2b374 <__assert_fail@plt+0x197d0>
   2ae3c:	cmp	r3, r2
   2ae40:	movle	r3, #0
   2ae44:	movgt	r3, #1
   2ae48:	cmp	r3, #0
   2ae4c:	bne	2af8c <__assert_fail@plt+0x193e8>
   2ae50:	ldr	r4, [sp, #44]	; 0x2c
   2ae54:	ldr	r2, [sp, #40]	; 0x28
   2ae58:	mov	r1, r4
   2ae5c:	ldr	r0, [sp, #32]
   2ae60:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2ae64:	ldr	r3, [r4, #40]	; 0x28
   2ae68:	mov	r2, r4
   2ae6c:	ldr	r4, [sp, #36]	; 0x24
   2ae70:	cmp	r4, #0
   2ae74:	add	r3, r3, r0
   2ae78:	str	r3, [r2, #40]	; 0x28
   2ae7c:	beq	2a914 <__assert_fail@plt+0x18d70>
   2ae80:	ldr	r3, [sp, #24]
   2ae84:	orrs	r3, r9, r3
   2ae88:	beq	2ae94 <__assert_fail@plt+0x192f0>
   2ae8c:	b	2a4c4 <__assert_fail@plt+0x18920>
   2ae90:	mov	r4, r3
   2ae94:	ldr	r3, [r4, #4]
   2ae98:	cmp	r3, #0
   2ae9c:	bne	2ae90 <__assert_fail@plt+0x192ec>
   2aea0:	ldr	r3, [r4, #8]
   2aea4:	cmp	r3, #0
   2aea8:	bne	2ae90 <__assert_fail@plt+0x192ec>
   2aeac:	b	2aee4 <__assert_fail@plt+0x19340>
   2aeb0:	ldr	r0, [r4, #20]
   2aeb4:	bl	184ec <__assert_fail@plt+0x6948>
   2aeb8:	ldr	r2, [r4]
   2aebc:	cmp	r2, #0
   2aec0:	beq	2a914 <__assert_fail@plt+0x18d70>
   2aec4:	ldr	r3, [r2, #8]
   2aec8:	cmp	r3, #0
   2aecc:	cmpne	r4, r3
   2aed0:	moveq	r4, #1
   2aed4:	movne	r4, #0
   2aed8:	cmp	r4, #0
   2aedc:	mov	r4, r2
   2aee0:	beq	2ae90 <__assert_fail@plt+0x192ec>
   2aee4:	ldr	r3, [r4, #24]
   2aee8:	bic	r3, r3, #-16777216	; 0xff000000
   2aeec:	bic	r3, r3, #16449536	; 0xfb0000
   2aef0:	bic	r3, r3, #65280	; 0xff00
   2aef4:	cmp	r3, #6
   2aef8:	beq	2af08 <__assert_fail@plt+0x19364>
   2aefc:	cmp	r3, #3
   2af00:	bne	2aeb8 <__assert_fail@plt+0x19314>
   2af04:	b	2aeb0 <__assert_fail@plt+0x1930c>
   2af08:	ldr	r5, [r4, #20]
   2af0c:	ldr	r0, [r5]
   2af10:	bl	184ec <__assert_fail@plt+0x6948>
   2af14:	ldr	r0, [r5, #4]
   2af18:	bl	184ec <__assert_fail@plt+0x6948>
   2af1c:	ldr	r0, [r5, #8]
   2af20:	bl	184ec <__assert_fail@plt+0x6948>
   2af24:	ldr	r0, [r5, #12]
   2af28:	bl	184ec <__assert_fail@plt+0x6948>
   2af2c:	mov	r0, r5
   2af30:	bl	184ec <__assert_fail@plt+0x6948>
   2af34:	b	2aeb8 <__assert_fail@plt+0x19314>
   2af38:	cmn	r9, #1
   2af3c:	ldr	r4, [sp, #20]
   2af40:	beq	2af9c <__assert_fail@plt+0x193f8>
   2af44:	cmn	r9, #2
   2af48:	beq	2af58 <__assert_fail@plt+0x193b4>
   2af4c:	cmp	ip, #1
   2af50:	moveq	r4, r1
   2af54:	beq	2afa8 <__assert_fail@plt+0x19404>
   2af58:	ldr	r3, [sp, #60]	; 0x3c
   2af5c:	cmp	r3, #0
   2af60:	bne	2aa08 <__assert_fail@plt+0x18e64>
   2af64:	ldr	r2, [sp, #212]	; 0xd4
   2af68:	mov	r3, #10
   2af6c:	str	r3, [r2]
   2af70:	b	2a7d8 <__assert_fail@plt+0x18c34>
   2af74:	add	r3, r3, #32768	; 0x8000
   2af78:	cmp	r9, r3
   2af7c:	movle	r3, #0
   2af80:	movgt	r3, #1
   2af84:	cmp	r3, #0
   2af88:	beq	2ae50 <__assert_fail@plt+0x192ac>
   2af8c:	ldr	r2, [sp, #212]	; 0xd4
   2af90:	mov	r3, #15
   2af94:	str	r3, [r2]
   2af98:	b	2a7d8 <__assert_fail@plt+0x18c34>
   2af9c:	cmp	ip, #1
   2afa0:	bne	2af64 <__assert_fail@plt+0x193c0>
   2afa4:	mov	r9, fp
   2afa8:	mvn	r3, #0
   2afac:	str	r5, [sp, #20]
   2afb0:	ldr	r0, [sp, #32]
   2afb4:	mov	r5, r4
   2afb8:	ldr	r4, [sp, #44]	; 0x2c
   2afbc:	mov	r7, #32768	; 0x8000
   2afc0:	mvn	r6, #1
   2afc4:	mov	r8, r3
   2afc8:	ldr	r2, [sp, #40]	; 0x28
   2afcc:	mov	r1, r4
   2afd0:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2afd4:	ldr	r1, [sp, #32]
   2afd8:	ldr	r2, [r4, #40]	; 0x28
   2afdc:	ldrb	r3, [r1, #4]
   2afe0:	cmp	r3, #2
   2afe4:	add	r2, r2, r0
   2afe8:	str	r2, [r4, #40]	; 0x28
   2afec:	beq	2b630 <__assert_fail@plt+0x19a8c>
   2aff0:	ldrb	r2, [r1]
   2aff4:	cmp	r2, #44	; 0x2c
   2aff8:	cmpne	r3, #24
   2affc:	beq	2b684 <__assert_fail@plt+0x19ae0>
   2b000:	cmp	r3, #1
   2b004:	movne	r8, r6
   2b008:	movne	r0, r1
   2b00c:	bne	2afc8 <__assert_fail@plt+0x19424>
   2b010:	sub	r1, r2, #48	; 0x30
   2b014:	uxtb	r3, r1
   2b018:	cmp	r3, #9
   2b01c:	movhi	r3, #0
   2b020:	movls	r3, #1
   2b024:	cmn	r8, #2
   2b028:	moveq	r3, #0
   2b02c:	cmp	r3, #0
   2b030:	beq	2c078 <__assert_fail@plt+0x1a4d4>
   2b034:	cmn	r8, #1
   2b038:	beq	2c06c <__assert_fail@plt+0x1a4c8>
   2b03c:	add	r8, r8, r8, lsl #2
   2b040:	ldr	r3, [pc, #808]	; 2b370 <__assert_fail@plt+0x197cc>
   2b044:	add	r2, r2, r8, lsl #1
   2b048:	cmp	r2, r3
   2b04c:	bgt	2b6e8 <__assert_fail@plt+0x19b44>
   2b050:	sub	r8, r2, #48	; 0x30
   2b054:	ldr	r0, [sp, #32]
   2b058:	b	2afc8 <__assert_fail@plt+0x19424>
   2b05c:	ldr	r5, [sp, #136]	; 0x88
   2b060:	cmp	r5, #0
   2b064:	bne	2a4dc <__assert_fail@plt+0x18938>
   2b068:	b	2a7cc <__assert_fail@plt+0x18c28>
   2b06c:	ldr	r3, [sp, #32]
   2b070:	ldr	r2, [sl, #84]	; 0x54
   2b074:	ldr	r1, [r3]
   2b078:	mov	r3, #1
   2b07c:	lsl	r3, r3, r1
   2b080:	ands	r2, r3, r2
   2b084:	beq	2c058 <__assert_fail@plt+0x1a4b4>
   2b088:	ldr	r1, [sl, #80]	; 0x50
   2b08c:	ldr	r2, [sp, #32]
   2b090:	orr	r3, r1, r3
   2b094:	str	r3, [sl, #80]	; 0x50
   2b098:	add	r1, sl, #64	; 0x40
   2b09c:	add	r0, sl, #56	; 0x38
   2b0a0:	bl	26648 <__assert_fail@plt+0x14aa4>
   2b0a4:	subs	r3, r0, #0
   2b0a8:	str	r3, [sp, #36]	; 0x24
   2b0ac:	beq	2b258 <__assert_fail@plt+0x196b4>
   2b0b0:	ldrb	r2, [sl, #88]	; 0x58
   2b0b4:	ldr	r3, [sl, #76]	; 0x4c
   2b0b8:	orr	r2, r2, #2
   2b0bc:	add	r3, r3, #1
   2b0c0:	strb	r2, [sl, #88]	; 0x58
   2b0c4:	str	r3, [sl, #76]	; 0x4c
   2b0c8:	b	2a38c <__assert_fail@plt+0x187e8>
   2b0cc:	ldr	r3, [sp, #44]	; 0x2c
   2b0d0:	sub	r2, r2, #33	; 0x21
   2b0d4:	clz	r2, r2
   2b0d8:	ldr	r1, [r3, #64]	; 0x40
   2b0dc:	ldr	r3, [sp, #212]	; 0xd4
   2b0e0:	lsr	r2, r2, #5
   2b0e4:	str	r2, [sp]
   2b0e8:	str	r3, [sp, #4]
   2b0ec:	ldr	r2, [pc, #644]	; 2b378 <__assert_fail@plt+0x197d4>
   2b0f0:	ldr	r3, [pc, #644]	; 2b37c <__assert_fail@plt+0x197d8>
   2b0f4:	mov	r0, sl
   2b0f8:	bl	29e50 <__assert_fail@plt+0x182ac>
   2b0fc:	ldr	r3, [sp, #212]	; 0xd4
   2b100:	ldr	r3, [r3]
   2b104:	adds	r3, r3, #0
   2b108:	movne	r3, #1
   2b10c:	cmp	r0, #0
   2b110:	movne	r3, #0
   2b114:	cmp	r3, #0
   2b118:	str	r0, [sp, #36]	; 0x24
   2b11c:	beq	2a38c <__assert_fail@plt+0x187e8>
   2b120:	b	2a438 <__assert_fail@plt+0x18894>
   2b124:	ldr	r2, [sp, #32]
   2b128:	add	r1, sl, #64	; 0x40
   2b12c:	add	r0, sl, #56	; 0x38
   2b130:	bl	26648 <__assert_fail@plt+0x14aa4>
   2b134:	subs	r3, r0, #0
   2b138:	str	r3, [sp, #36]	; 0x24
   2b13c:	beq	2b258 <__assert_fail@plt+0x196b4>
   2b140:	ldr	r3, [sl, #92]	; 0x5c
   2b144:	cmp	r3, #1
   2b148:	ldrbgt	r3, [sl, #88]	; 0x58
   2b14c:	orrgt	r3, r3, #2
   2b150:	strbgt	r3, [sl, #88]	; 0x58
   2b154:	b	2a38c <__assert_fail@plt+0x187e8>
   2b158:	ldr	r3, [sp, #44]	; 0x2c
   2b15c:	sub	r2, r2, #35	; 0x23
   2b160:	clz	r2, r2
   2b164:	ldr	r1, [r3, #64]	; 0x40
   2b168:	ldr	r3, [sp, #212]	; 0xd4
   2b16c:	lsr	r2, r2, #5
   2b170:	str	r2, [sp]
   2b174:	str	r3, [sp, #4]
   2b178:	ldr	r2, [pc, #512]	; 2b380 <__assert_fail@plt+0x197dc>
   2b17c:	ldr	r3, [pc, #512]	; 2b384 <__assert_fail@plt+0x197e0>
   2b180:	b	2b0f4 <__assert_fail@plt+0x19550>
   2b184:	add	r5, sl, #56	; 0x38
   2b188:	add	r6, sl, #64	; 0x40
   2b18c:	mov	r0, r5
   2b190:	mov	r1, r6
   2b194:	ldr	r2, [sp, #32]
   2b198:	bl	26648 <__assert_fail@plt+0x14aa4>
   2b19c:	subs	r3, r0, #0
   2b1a0:	str	r3, [sp, #36]	; 0x24
   2b1a4:	beq	2b258 <__assert_fail@plt+0x196b4>
   2b1a8:	ldr	r3, [sl, #92]	; 0x5c
   2b1ac:	cmp	r3, #1
   2b1b0:	ble	2a38c <__assert_fail@plt+0x187e8>
   2b1b4:	ldr	r8, [sp, #44]	; 0x2c
   2b1b8:	add	r4, sp, #136	; 0x88
   2b1bc:	mov	r7, #0
   2b1c0:	mov	r9, #16
   2b1c4:	ldr	r3, [r8, #40]	; 0x28
   2b1c8:	ldr	r2, [r8, #56]	; 0x38
   2b1cc:	cmp	r2, r3
   2b1d0:	ble	2a38c <__assert_fail@plt+0x187e8>
   2b1d4:	ldr	r2, [r8, #28]
   2b1d8:	cmp	r3, r2
   2b1dc:	beq	2a38c <__assert_fail@plt+0x187e8>
   2b1e0:	ldr	r2, [r8, #8]
   2b1e4:	ldr	r3, [r2, r3, lsl #2]
   2b1e8:	cmn	r3, #1
   2b1ec:	bne	2a38c <__assert_fail@plt+0x187e8>
   2b1f0:	ldr	fp, [sp, #32]
   2b1f4:	ldr	r2, [sp, #40]	; 0x28
   2b1f8:	mov	r1, r8
   2b1fc:	mov	r0, fp
   2b200:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2b204:	ldr	r3, [r8, #40]	; 0x28
   2b208:	mov	r2, fp
   2b20c:	mov	r1, r6
   2b210:	add	r3, r3, r0
   2b214:	str	r3, [r8, #40]	; 0x28
   2b218:	mov	r0, r5
   2b21c:	bl	26648 <__assert_fail@plt+0x14aa4>
   2b220:	str	r4, [sp]
   2b224:	ldr	r2, [sp, #36]	; 0x24
   2b228:	str	r7, [r4, #4]
   2b22c:	mov	r1, r6
   2b230:	str	r7, [r4]
   2b234:	strb	r9, [sp, #140]	; 0x8c
   2b238:	mov	fp, r0
   2b23c:	mov	r3, r0
   2b240:	mov	r0, r5
   2b244:	bl	23b24 <__assert_fail@plt+0x11f80>
   2b248:	cmp	r0, #0
   2b24c:	cmpne	fp, #0
   2b250:	str	r0, [sp, #36]	; 0x24
   2b254:	bne	2b1c4 <__assert_fail@plt+0x19620>
   2b258:	ldr	r2, [sp, #212]	; 0xd4
   2b25c:	mov	r3, #12
   2b260:	str	r3, [r2]
   2b264:	mov	r3, #0
   2b268:	str	r3, [sp, #36]	; 0x24
   2b26c:	b	2a3d4 <__assert_fail@plt+0x18830>
   2b270:	ldr	r3, [sp, #32]
   2b274:	ldr	r2, [r3]
   2b278:	ldr	r3, [pc, #264]	; 2b388 <__assert_fail@plt+0x197e4>
   2b27c:	and	r3, r3, r2
   2b280:	cmp	r3, #0
   2b284:	beq	2b294 <__assert_fail@plt+0x196f0>
   2b288:	ldrb	r3, [sl, #88]	; 0x58
   2b28c:	ands	r4, r3, #16
   2b290:	beq	2b7bc <__assert_fail@plt+0x19c18>
   2b294:	sub	r3, r2, #256	; 0x100
   2b298:	bics	r3, r3, #256	; 0x100
   2b29c:	bne	2c1fc <__assert_fail@plt+0x1a658>
   2b2a0:	cmp	r2, #256	; 0x100
   2b2a4:	beq	2c1c8 <__assert_fail@plt+0x1a624>
   2b2a8:	ldr	r6, [sp, #32]
   2b2ac:	mov	r3, #5
   2b2b0:	add	r5, sl, #56	; 0x38
   2b2b4:	add	sl, sl, #64	; 0x40
   2b2b8:	str	r3, [r6]
   2b2bc:	mov	r2, r6
   2b2c0:	mov	r1, sl
   2b2c4:	mov	r0, r5
   2b2c8:	bl	26648 <__assert_fail@plt+0x14aa4>
   2b2cc:	mov	r3, #10
   2b2d0:	str	r3, [r6]
   2b2d4:	mov	r4, r0
   2b2d8:	ldr	r2, [sp, #32]
   2b2dc:	mov	r1, sl
   2b2e0:	mov	r0, r5
   2b2e4:	bl	26648 <__assert_fail@plt+0x14aa4>
   2b2e8:	mov	r2, #0
   2b2ec:	add	ip, sp, #136	; 0x88
   2b2f0:	str	r2, [sp, #140]	; 0x8c
   2b2f4:	str	ip, [sp]
   2b2f8:	str	r2, [sp, #136]	; 0x88
   2b2fc:	mov	ip, #10
   2b300:	mov	r1, sl
   2b304:	mov	r2, r4
   2b308:	strb	ip, [sp, #140]	; 0x8c
   2b30c:	mov	r7, r0
   2b310:	mov	r3, r7
   2b314:	mov	r0, r5
   2b318:	bl	23b24 <__assert_fail@plt+0x11f80>
   2b31c:	cmp	r7, #0
   2b320:	cmpne	r4, #0
   2b324:	moveq	r3, #1
   2b328:	movne	r3, #0
   2b32c:	cmp	r0, #0
   2b330:	orreq	r3, r3, #1
   2b334:	cmp	r3, #0
   2b338:	str	r0, [sp, #36]	; 0x24
   2b33c:	bne	2b258 <__assert_fail@plt+0x196b4>
   2b340:	ldr	r4, [sp, #44]	; 0x2c
   2b344:	ldr	r2, [sp, #40]	; 0x28
   2b348:	ldr	r0, [sp, #32]
   2b34c:	mov	r1, r4
   2b350:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2b354:	ldr	r3, [r4, #40]	; 0x28
   2b358:	add	r3, r3, r0
   2b35c:	str	r3, [r4, #40]	; 0x28
   2b360:	ldr	r0, [sp, #36]	; 0x24
   2b364:	add	sp, sp, #172	; 0xac
   2b368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b36c:	addeq	r0, ip, r0, lsl #16
   2b370:	andeq	r8, r0, r0, lsr r0
   2b374:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   2b378:	andeq	sl, r3, ip, lsl #5
   2b37c:	ldrdeq	sl, [r3], -r4
   2b380:	muleq	r3, ip, r2
   2b384:	andeq	r9, r3, r4, lsr #27
   2b388:	andeq	r0, r0, pc, lsl #6
   2b38c:	mvnseq	r0, #0
   2b390:	mov	r3, #0
   2b394:	mov	r1, #1
   2b398:	mov	r0, #32
   2b39c:	str	r3, [sp, #76]	; 0x4c
   2b3a0:	bl	368fc <__assert_fail@plt+0x24d58>
   2b3a4:	mov	r1, #1
   2b3a8:	mov	fp, r0
   2b3ac:	mov	r0, #40	; 0x28
   2b3b0:	bl	368fc <__assert_fail@plt+0x24d58>
   2b3b4:	cmp	r0, #0
   2b3b8:	cmpne	fp, #0
   2b3bc:	moveq	r3, #1
   2b3c0:	movne	r3, #0
   2b3c4:	mov	r9, r0
   2b3c8:	str	r3, [sp, #24]
   2b3cc:	beq	2b79c <__assert_fail@plt+0x19bf8>
   2b3d0:	ldr	r4, [sp, #32]
   2b3d4:	ldr	r2, [sp, #40]	; 0x28
   2b3d8:	ldr	r1, [sp, #44]	; 0x2c
   2b3dc:	mov	r0, r4
   2b3e0:	bl	22c9c <__assert_fail@plt+0x110f8>
   2b3e4:	ldrb	r3, [r4, #4]
   2b3e8:	cmp	r3, #2
   2b3ec:	mov	r8, r0
   2b3f0:	beq	2b748 <__assert_fail@plt+0x19ba4>
   2b3f4:	cmp	r3, #25
   2b3f8:	beq	2b6f4 <__assert_fail@plt+0x19b50>
   2b3fc:	ldr	r2, [sp, #24]
   2b400:	str	r2, [sp, #48]	; 0x30
   2b404:	cmp	r3, #21
   2b408:	moveq	r3, #1
   2b40c:	ldreq	r2, [sp, #32]
   2b410:	ldr	r6, [sp, #44]	; 0x2c
   2b414:	ldr	r4, [sp, #32]
   2b418:	strbeq	r3, [r2, #4]
   2b41c:	mov	r3, #0
   2b420:	mov	r2, r3
   2b424:	str	r3, [sp, #36]	; 0x24
   2b428:	ldr	r3, [sp, #40]	; 0x28
   2b42c:	mov	lr, #1
   2b430:	str	r2, [sp, #28]
   2b434:	lsr	r3, r3, #16
   2b438:	and	r3, r3, lr
   2b43c:	str	r3, [sp, #68]	; 0x44
   2b440:	ldr	r3, [r6, #80]	; 0x50
   2b444:	add	r2, sp, #104	; 0x68
   2b448:	cmp	r3, #1
   2b44c:	str	r3, [sp, #52]	; 0x34
   2b450:	str	r2, [sp, #84]	; 0x54
   2b454:	ldr	r3, [r6, #40]	; 0x28
   2b458:	beq	2b644 <__assert_fail@plt+0x19aa0>
   2b45c:	ldr	r2, [r6, #28]
   2b460:	add	r1, r3, #1
   2b464:	cmp	r1, r2
   2b468:	bge	2b644 <__assert_fail@plt+0x19aa0>
   2b46c:	ldr	ip, [r6, #8]
   2b470:	add	r0, ip, r1, lsl #2
   2b474:	ldr	r1, [ip, r1, lsl #2]
   2b478:	cmn	r1, #1
   2b47c:	subeq	r2, r2, r3
   2b480:	moveq	ip, r0
   2b484:	moveq	r1, #1
   2b488:	beq	2b49c <__assert_fail@plt+0x198f8>
   2b48c:	b	2b644 <__assert_fail@plt+0x19aa0>
   2b490:	ldr	r5, [ip, #4]!
   2b494:	cmn	r5, #1
   2b498:	bne	2b4ac <__assert_fail@plt+0x19908>
   2b49c:	add	r1, r1, #1
   2b4a0:	cmp	r1, r2
   2b4a4:	add	lr, r1, r3
   2b4a8:	bne	2b490 <__assert_fail@plt+0x198ec>
   2b4ac:	ldr	r3, [r0, #-4]
   2b4b0:	mov	r5, #1
   2b4b4:	str	lr, [r6, #40]	; 0x28
   2b4b8:	str	r3, [sp, #84]	; 0x54
   2b4bc:	ldr	r2, [sp, #40]	; 0x28
   2b4c0:	mov	r1, r6
   2b4c4:	mov	r0, r4
   2b4c8:	bl	22c9c <__assert_fail@plt+0x110f8>
   2b4cc:	mov	r8, r0
   2b4d0:	ldrb	r3, [r4, #4]
   2b4d4:	cmp	r3, #2
   2b4d8:	beq	2bdb0 <__assert_fail@plt+0x1a20c>
   2b4dc:	cmp	r3, #22
   2b4e0:	beq	2bb7c <__assert_fail@plt+0x19fd8>
   2b4e4:	cmp	r5, #2
   2b4e8:	beq	2bd04 <__assert_fail@plt+0x1a160>
   2b4ec:	cmp	r5, #3
   2b4f0:	beq	2bd04 <__assert_fail@plt+0x1a160>
   2b4f4:	cmp	r5, #1
   2b4f8:	beq	2bb54 <__assert_fail@plt+0x19fb0>
   2b4fc:	ldrb	r3, [sp, #84]	; 0x54
   2b500:	mov	r0, #1
   2b504:	and	r1, r3, #31
   2b508:	asr	r3, r3, #5
   2b50c:	ldr	r2, [fp, r3, lsl #2]
   2b510:	orr	r2, r2, r0, lsl r1
   2b514:	str	r2, [fp, r3, lsl #2]
   2b518:	ldrb	r3, [r4, #4]
   2b51c:	cmp	r3, #2
   2b520:	beq	2bdb0 <__assert_fail@plt+0x1a20c>
   2b524:	cmp	r3, #21
   2b528:	beq	2b810 <__assert_fail@plt+0x19c6c>
   2b52c:	ldr	lr, [sp, #24]
   2b530:	b	2b440 <__assert_fail@plt+0x1989c>
   2b534:	ldr	r2, [sp, #212]	; 0xd4
   2b538:	mov	r3, #5
   2b53c:	str	r3, [r2]
   2b540:	mov	r3, #0
   2b544:	str	r3, [sp, #36]	; 0x24
   2b548:	ldr	r0, [sp, #36]	; 0x24
   2b54c:	add	sp, sp, #172	; 0xac
   2b550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b554:	ldr	r5, [r1, #24]
   2b558:	ldr	r7, [sp, #44]	; 0x2c
   2b55c:	ldr	r8, [sp, #32]
   2b560:	ldr	r9, [sp, #40]	; 0x28
   2b564:	add	r3, r5, #1
   2b568:	str	r3, [r1, #24]
   2b56c:	orr	r2, r9, #8388608	; 0x800000
   2b570:	mov	r1, r7
   2b574:	mov	r0, r8
   2b578:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2b57c:	ldrb	r2, [r8, #4]
   2b580:	ldr	r3, [r7, #40]	; 0x28
   2b584:	mov	r1, r7
   2b588:	cmp	r2, #9
   2b58c:	add	r6, r6, #1
   2b590:	add	r3, r3, r0
   2b594:	str	r3, [r7, #40]	; 0x28
   2b598:	mov	r0, r7
   2b59c:	bne	2a3e0 <__assert_fail@plt+0x1883c>
   2b5a0:	mov	r2, #0
   2b5a4:	cmp	r5, #8
   2b5a8:	movls	r1, #1
   2b5ac:	ldrls	r3, [sl, #84]	; 0x54
   2b5b0:	mov	r0, #0
   2b5b4:	orrls	r3, r3, r1, lsl r5
   2b5b8:	add	ip, sp, #136	; 0x88
   2b5bc:	strls	r3, [sl, #84]	; 0x54
   2b5c0:	mov	lr, #17
   2b5c4:	mov	r3, r0
   2b5c8:	str	r0, [sp, #140]	; 0x8c
   2b5cc:	str	r0, [sp, #136]	; 0x88
   2b5d0:	str	ip, [sp]
   2b5d4:	add	r1, sl, #64	; 0x40
   2b5d8:	add	r0, sl, #56	; 0x38
   2b5dc:	strb	lr, [sp, #140]	; 0x8c
   2b5e0:	bl	23b24 <__assert_fail@plt+0x11f80>
   2b5e4:	subs	r3, r0, #0
   2b5e8:	str	r3, [sp, #36]	; 0x24
   2b5ec:	beq	2b258 <__assert_fail@plt+0x196b4>
   2b5f0:	str	r5, [r3, #20]
   2b5f4:	b	2a38c <__assert_fail@plt+0x187e8>
   2b5f8:	ldr	r3, [sp, #40]	; 0x28
   2b5fc:	ands	r2, r3, #131072	; 0x20000
   2b600:	bne	2a368 <__assert_fail@plt+0x187c4>
   2b604:	str	r2, [sp, #36]	; 0x24
   2b608:	ldr	r2, [sp, #212]	; 0xd4
   2b60c:	mov	r3, #16
   2b610:	str	r3, [r2]
   2b614:	b	2a3d4 <__assert_fail@plt+0x18830>
   2b618:	str	ip, [r6]
   2b61c:	mov	r5, fp
   2b620:	b	2abd4 <__assert_fail@plt+0x19030>
   2b624:	ldr	r5, [sp, #36]	; 0x24
   2b628:	mov	r8, r5
   2b62c:	b	2ac74 <__assert_fail@plt+0x190d0>
   2b630:	ldr	r3, [sp, #60]	; 0x3c
   2b634:	ldr	r5, [sp, #20]
   2b638:	cmp	r3, #0
   2b63c:	bne	2aa08 <__assert_fail@plt+0x18e64>
   2b640:	b	2b6d8 <__assert_fail@plt+0x19b34>
   2b644:	ldrb	r2, [r4, #4]
   2b648:	add	r8, r8, r3
   2b64c:	str	r8, [r6, #40]	; 0x28
   2b650:	and	r3, r2, #251	; 0xfb
   2b654:	cmp	r2, #28
   2b658:	cmpne	r3, #26
   2b65c:	beq	2c0a4 <__assert_fail@plt+0x1a500>
   2b660:	cmp	r2, #22
   2b664:	moveq	r2, lr
   2b668:	orrne	r2, lr, #1
   2b66c:	cmp	r2, #0
   2b670:	beq	2c084 <__assert_fail@plt+0x1a4e0>
   2b674:	ldrb	r3, [r4]
   2b678:	mov	r5, #0
   2b67c:	strb	r3, [sp, #84]	; 0x54
   2b680:	b	2b4bc <__assert_fail@plt+0x19918>
   2b684:	cmn	r8, #2
   2b688:	mov	r2, r8
   2b68c:	mov	r4, r5
   2b690:	movne	r2, #0
   2b694:	moveq	r2, #1
   2b698:	orrs	r2, r4, r2
   2b69c:	ldr	r5, [sp, #20]
   2b6a0:	str	r8, [sp, #24]
   2b6a4:	bne	2a9fc <__assert_fail@plt+0x18e58>
   2b6a8:	ldr	r2, [sp, #24]
   2b6ac:	cmn	r2, #1
   2b6b0:	cmpne	r9, r2
   2b6b4:	bgt	2af64 <__assert_fail@plt+0x193c0>
   2b6b8:	cmp	r3, #24
   2b6bc:	beq	2ae2c <__assert_fail@plt+0x19288>
   2b6c0:	ldr	r2, [sp, #212]	; 0xd4
   2b6c4:	mov	r3, #10
   2b6c8:	str	r3, [r2]
   2b6cc:	b	2a7d8 <__assert_fail@plt+0x18c34>
   2b6d0:	cmp	r3, #2
   2b6d4:	bne	2af64 <__assert_fail@plt+0x193c0>
   2b6d8:	ldr	r2, [sp, #212]	; 0xd4
   2b6dc:	mov	r3, #9
   2b6e0:	str	r3, [r2]
   2b6e4:	b	2a7d8 <__assert_fail@plt+0x18c34>
   2b6e8:	mov	r8, r7
   2b6ec:	ldr	r0, [sp, #32]
   2b6f0:	b	2afc8 <__assert_fail@plt+0x19424>
   2b6f4:	ldrb	r3, [r9, #16]
   2b6f8:	ldr	r2, [sp, #40]	; 0x28
   2b6fc:	ldr	r1, [sp, #44]	; 0x2c
   2b700:	tst	r2, #256	; 0x100
   2b704:	orr	r3, r3, #1
   2b708:	strb	r3, [r9, #16]
   2b70c:	ldrne	r3, [fp]
   2b710:	ldr	r4, [sp, #32]
   2b714:	orrne	r3, r3, #1024	; 0x400
   2b718:	strne	r3, [fp]
   2b71c:	ldr	r3, [r1, #40]	; 0x28
   2b720:	add	r3, r3, r0
   2b724:	str	r3, [r1, #40]	; 0x28
   2b728:	mov	r0, r4
   2b72c:	bl	22c9c <__assert_fail@plt+0x110f8>
   2b730:	ldrb	r3, [r4, #4]
   2b734:	cmp	r3, #2
   2b738:	mov	r8, r0
   2b73c:	movne	r2, #1
   2b740:	strne	r2, [sp, #48]	; 0x30
   2b744:	bne	2b404 <__assert_fail@plt+0x19860>
   2b748:	ldr	r2, [sp, #212]	; 0xd4
   2b74c:	mov	r3, #2
   2b750:	str	r3, [r2]
   2b754:	mov	r0, fp
   2b758:	bl	184ec <__assert_fail@plt+0x6948>
   2b75c:	ldr	r0, [r9]
   2b760:	bl	184ec <__assert_fail@plt+0x6948>
   2b764:	ldr	r0, [r9, #4]
   2b768:	bl	184ec <__assert_fail@plt+0x6948>
   2b76c:	ldr	r0, [r9, #8]
   2b770:	bl	184ec <__assert_fail@plt+0x6948>
   2b774:	ldr	r0, [r9, #12]
   2b778:	bl	184ec <__assert_fail@plt+0x6948>
   2b77c:	mov	r0, r9
   2b780:	bl	184ec <__assert_fail@plt+0x6948>
   2b784:	ldr	r3, [sp, #212]	; 0xd4
   2b788:	ldr	r3, [r3]
   2b78c:	cmp	r3, #0
   2b790:	bne	2a438 <__assert_fail@plt+0x18894>
   2b794:	str	r3, [sp, #36]	; 0x24
   2b798:	b	2a38c <__assert_fail@plt+0x187e8>
   2b79c:	mov	r0, fp
   2b7a0:	bl	184ec <__assert_fail@plt+0x6948>
   2b7a4:	mov	r0, r9
   2b7a8:	bl	184ec <__assert_fail@plt+0x6948>
   2b7ac:	ldr	r2, [sp, #212]	; 0xd4
   2b7b0:	mov	r3, #12
   2b7b4:	str	r3, [r2]
   2b7b8:	b	2a438 <__assert_fail@plt+0x18894>
   2b7bc:	orr	r3, r3, #16
   2b7c0:	ands	r2, r3, #8
   2b7c4:	mov	r1, r3
   2b7c8:	strb	r3, [sl, #88]	; 0x58
   2b7cc:	bne	2bb4c <__assert_fail@plt+0x19fa8>
   2b7d0:	ldr	r3, [pc, #-1100]	; 2b38c <__assert_fail@plt+0x197e8>
   2b7d4:	tst	r1, #4
   2b7d8:	str	r3, [sl, #100]	; 0x64
   2b7dc:	mvn	r1, #2013265921	; 0x78000001
   2b7e0:	mvn	r3, #-134217727	; 0xf8000001
   2b7e4:	str	r2, [sl, #96]	; 0x60
   2b7e8:	str	r1, [sl, #104]	; 0x68
   2b7ec:	str	r3, [sl, #108]	; 0x6c
   2b7f0:	beq	2bacc <__assert_fail@plt+0x19f28>
   2b7f4:	ldr	r3, [sp, #32]
   2b7f8:	str	r2, [sl, #112]	; 0x70
   2b7fc:	str	r2, [sl, #116]	; 0x74
   2b800:	str	r2, [sl, #120]	; 0x78
   2b804:	str	r2, [sl, #124]	; 0x7c
   2b808:	ldr	r2, [r3]
   2b80c:	b	2b294 <__assert_fail@plt+0x196f0>
   2b810:	ldr	r2, [sp, #44]	; 0x2c
   2b814:	ldr	r1, [sp, #48]	; 0x30
   2b818:	ldr	r3, [r2, #40]	; 0x28
   2b81c:	cmp	r1, #0
   2b820:	add	r3, r3, r8
   2b824:	str	r3, [r2, #40]	; 0x28
   2b828:	beq	2b888 <__assert_fail@plt+0x19ce4>
   2b82c:	ldm	fp, {r2, r3}
   2b830:	ldr	r1, [fp, #8]
   2b834:	mvn	r2, r2
   2b838:	mvn	r3, r3
   2b83c:	str	r2, [fp]
   2b840:	str	r3, [fp, #4]
   2b844:	ldr	r2, [fp, #12]
   2b848:	ldr	r3, [fp, #16]
   2b84c:	mvn	r1, r1
   2b850:	mvn	r2, r2
   2b854:	mvn	r3, r3
   2b858:	str	r1, [fp, #8]
   2b85c:	str	r2, [fp, #12]
   2b860:	ldr	r1, [fp, #20]
   2b864:	ldr	r2, [fp, #24]
   2b868:	str	r3, [fp, #16]
   2b86c:	ldr	r3, [fp, #28]
   2b870:	mvn	r1, r1
   2b874:	mvn	r2, r2
   2b878:	mvn	r3, r3
   2b87c:	str	r1, [fp, #20]
   2b880:	str	r2, [fp, #24]
   2b884:	str	r3, [fp, #28]
   2b888:	ldr	r0, [sl, #92]	; 0x5c
   2b88c:	cmp	r0, #1
   2b890:	ble	2b914 <__assert_fail@plt+0x19d70>
   2b894:	ldr	r3, [sl, #60]	; 0x3c
   2b898:	ldm	fp, {r1, r2}
   2b89c:	ldr	ip, [r3]
   2b8a0:	and	r1, r1, ip
   2b8a4:	str	r1, [fp]
   2b8a8:	ldr	ip, [r3, #4]
   2b8ac:	ldr	r1, [fp, #8]
   2b8b0:	and	r2, r2, ip
   2b8b4:	str	r2, [fp, #4]
   2b8b8:	ldr	ip, [r3, #8]
   2b8bc:	ldr	r2, [fp, #12]
   2b8c0:	and	r1, r1, ip
   2b8c4:	str	r1, [fp, #8]
   2b8c8:	ldr	ip, [r3, #12]
   2b8cc:	ldr	r1, [fp, #16]
   2b8d0:	and	r2, r2, ip
   2b8d4:	str	r2, [fp, #12]
   2b8d8:	ldr	ip, [r3, #16]
   2b8dc:	ldr	r2, [fp, #20]
   2b8e0:	and	r1, r1, ip
   2b8e4:	str	r1, [fp, #16]
   2b8e8:	ldr	ip, [r3, #20]
   2b8ec:	ldr	r1, [fp, #24]
   2b8f0:	and	r2, r2, ip
   2b8f4:	str	r2, [fp, #20]
   2b8f8:	ldr	ip, [r3, #24]
   2b8fc:	ldr	r2, [fp, #28]
   2b900:	and	r1, r1, ip
   2b904:	str	r1, [fp, #24]
   2b908:	ldr	r3, [r3, #28]
   2b90c:	and	r3, r3, r2
   2b910:	str	r3, [fp, #28]
   2b914:	ldr	r3, [r9, #20]
   2b918:	cmp	r3, #0
   2b91c:	bne	2b964 <__assert_fail@plt+0x19dc0>
   2b920:	ldr	r3, [r9, #24]
   2b924:	cmp	r3, #0
   2b928:	bne	2b964 <__assert_fail@plt+0x19dc0>
   2b92c:	ldr	r3, [r9, #28]
   2b930:	cmp	r3, #0
   2b934:	bne	2b964 <__assert_fail@plt+0x19dc0>
   2b938:	ldr	r3, [r9, #32]
   2b93c:	cmp	r3, #0
   2b940:	bne	2b964 <__assert_fail@plt+0x19dc0>
   2b944:	cmp	r0, #1
   2b948:	ble	2ba0c <__assert_fail@plt+0x19e68>
   2b94c:	ldr	r3, [r9, #36]	; 0x24
   2b950:	cmp	r3, #0
   2b954:	bne	2b964 <__assert_fail@plt+0x19dc0>
   2b958:	ldrb	r3, [r9, #16]
   2b95c:	tst	r3, #1
   2b960:	beq	2ba0c <__assert_fail@plt+0x19e68>
   2b964:	ldrb	r3, [sl, #88]	; 0x58
   2b968:	add	r4, sl, #56	; 0x38
   2b96c:	add	r5, sl, #64	; 0x40
   2b970:	orr	r3, r3, #2
   2b974:	strb	r3, [sl, #88]	; 0x58
   2b978:	mov	r0, r4
   2b97c:	mov	r3, #6
   2b980:	mov	r1, r5
   2b984:	add	r2, sp, #104	; 0x68
   2b988:	strb	r3, [sp, #108]	; 0x6c
   2b98c:	str	r9, [sp, #104]	; 0x68
   2b990:	bl	26648 <__assert_fail@plt+0x14aa4>
   2b994:	subs	r3, r0, #0
   2b998:	str	r3, [sp, #36]	; 0x24
   2b99c:	beq	2ba5c <__assert_fail@plt+0x19eb8>
   2b9a0:	ldr	r3, [fp]
   2b9a4:	cmp	r3, #0
   2b9a8:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2b9ac:	ldr	r3, [fp, #4]
   2b9b0:	cmp	r3, #0
   2b9b4:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2b9b8:	ldr	r3, [fp, #8]
   2b9bc:	cmp	r3, #0
   2b9c0:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2b9c4:	ldr	r3, [fp, #12]
   2b9c8:	cmp	r3, #0
   2b9cc:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2b9d0:	ldr	r3, [fp, #16]
   2b9d4:	cmp	r3, #0
   2b9d8:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2b9dc:	ldr	r3, [fp, #20]
   2b9e0:	cmp	r3, #0
   2b9e4:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2b9e8:	ldr	r3, [fp, #24]
   2b9ec:	cmp	r3, #0
   2b9f0:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2b9f4:	ldr	r3, [fp, #28]
   2b9f8:	cmp	r3, #0
   2b9fc:	bne	2ba6c <__assert_fail@plt+0x19ec8>
   2ba00:	mov	r0, fp
   2ba04:	bl	184ec <__assert_fail@plt+0x6948>
   2ba08:	b	2a38c <__assert_fail@plt+0x187e8>
   2ba0c:	ldr	r0, [r9]
   2ba10:	bl	184ec <__assert_fail@plt+0x6948>
   2ba14:	ldr	r0, [r9, #4]
   2ba18:	bl	184ec <__assert_fail@plt+0x6948>
   2ba1c:	ldr	r0, [r9, #8]
   2ba20:	bl	184ec <__assert_fail@plt+0x6948>
   2ba24:	ldr	r0, [r9, #12]
   2ba28:	bl	184ec <__assert_fail@plt+0x6948>
   2ba2c:	mov	r0, r9
   2ba30:	bl	184ec <__assert_fail@plt+0x6948>
   2ba34:	mov	r3, #3
   2ba38:	add	r2, sp, #104	; 0x68
   2ba3c:	add	r1, sl, #64	; 0x40
   2ba40:	add	r0, sl, #56	; 0x38
   2ba44:	strb	r3, [sp, #108]	; 0x6c
   2ba48:	str	fp, [sp, #104]	; 0x68
   2ba4c:	bl	26648 <__assert_fail@plt+0x14aa4>
   2ba50:	subs	r3, r0, #0
   2ba54:	str	r3, [sp, #36]	; 0x24
   2ba58:	bne	2a38c <__assert_fail@plt+0x187e8>
   2ba5c:	mov	r3, #12
   2ba60:	ldr	r2, [sp, #212]	; 0xd4
   2ba64:	str	r3, [r2]
   2ba68:	b	2b754 <__assert_fail@plt+0x19bb0>
   2ba6c:	add	r2, sp, #104	; 0x68
   2ba70:	mov	r3, #3
   2ba74:	mov	r1, r5
   2ba78:	mov	r0, r4
   2ba7c:	str	fp, [sp, #104]	; 0x68
   2ba80:	strb	r3, [sp, #108]	; 0x6c
   2ba84:	bl	26648 <__assert_fail@plt+0x14aa4>
   2ba88:	subs	r2, r0, #0
   2ba8c:	beq	2ba5c <__assert_fail@plt+0x19eb8>
   2ba90:	add	ip, sp, #136	; 0x88
   2ba94:	mov	lr, #0
   2ba98:	ldr	r3, [sp, #36]	; 0x24
   2ba9c:	mov	r0, r4
   2baa0:	mov	r1, r5
   2baa4:	str	ip, [sp]
   2baa8:	mov	r4, #10
   2baac:	str	lr, [sp, #140]	; 0x8c
   2bab0:	str	lr, [sp, #136]	; 0x88
   2bab4:	strb	r4, [sp, #140]	; 0x8c
   2bab8:	bl	23b24 <__assert_fail@plt+0x11f80>
   2babc:	subs	r3, r0, #0
   2bac0:	str	r3, [sp, #36]	; 0x24
   2bac4:	bne	2a38c <__assert_fail@plt+0x187e8>
   2bac8:	b	2ba5c <__assert_fail@plt+0x19eb8>
   2bacc:	mov	r4, #128	; 0x80
   2bad0:	mov	r5, #4
   2bad4:	bl	11964 <__ctype_b_loc@plt>
   2bad8:	sub	r3, r4, #-2147483647	; 0x80000001
   2badc:	mov	ip, #1
   2bae0:	add	r2, r5, #24
   2bae4:	add	r2, sl, r2, lsl #2
   2bae8:	ldr	r1, [r0]
   2baec:	add	r1, r1, r3, lsl ip
   2baf0:	mov	r6, r1
   2baf4:	mov	r3, #0
   2baf8:	ldrh	r0, [r6, #2]!
   2bafc:	add	lr, r3, r4
   2bb00:	lsr	r0, r0, #3
   2bb04:	cmp	lr, #95	; 0x5f
   2bb08:	orreq	r0, r0, #1
   2bb0c:	tst	r0, #1
   2bb10:	ldrne	r0, [r2]
   2bb14:	orrne	r0, r0, ip, lsl r3
   2bb18:	add	r3, r3, #1
   2bb1c:	strne	r0, [r2]
   2bb20:	cmp	r3, #32
   2bb24:	bne	2baf8 <__assert_fail@plt+0x19f54>
   2bb28:	add	r5, r5, #1
   2bb2c:	cmp	r5, #8
   2bb30:	add	r4, r4, #32
   2bb34:	add	r1, r1, #64	; 0x40
   2bb38:	add	r2, r2, #4
   2bb3c:	bne	2baf0 <__assert_fail@plt+0x19f4c>
   2bb40:	ldr	r3, [sp, #32]
   2bb44:	ldr	r2, [r3]
   2bb48:	b	2b294 <__assert_fail@plt+0x196f0>
   2bb4c:	mov	r5, r4
   2bb50:	b	2bad4 <__assert_fail@plt+0x19f30>
   2bb54:	ldr	r3, [r9, #20]
   2bb58:	ldr	r2, [sp, #28]
   2bb5c:	cmp	r3, r2
   2bb60:	beq	2bdb8 <__assert_fail@plt+0x1a214>
   2bb64:	ldr	r0, [r9]
   2bb68:	ldr	r2, [sp, #84]	; 0x54
   2bb6c:	add	r1, r3, #1
   2bb70:	str	r1, [r9, #20]
   2bb74:	str	r2, [r0, r3, lsl #2]
   2bb78:	b	2b518 <__assert_fail@plt+0x19974>
   2bb7c:	ldr	r3, [r6, #40]	; 0x28
   2bb80:	mov	r1, r6
   2bb84:	add	r3, r3, r8
   2bb88:	ldr	r2, [sp, #40]	; 0x28
   2bb8c:	str	r3, [r6, #40]	; 0x28
   2bb90:	add	r0, sp, #96	; 0x60
   2bb94:	bl	22c9c <__assert_fail@plt+0x110f8>
   2bb98:	ldrb	r1, [sp, #100]	; 0x64
   2bb9c:	cmp	r1, #2
   2bba0:	mov	r7, r0
   2bba4:	beq	2bdb0 <__assert_fail@plt+0x1a20c>
   2bba8:	cmp	r1, #21
   2bbac:	beq	2bff0 <__assert_fail@plt+0x1a44c>
   2bbb0:	ldr	r3, [r6, #80]	; 0x50
   2bbb4:	add	r2, sp, #136	; 0x88
   2bbb8:	cmp	r3, #1
   2bbbc:	str	r3, [sp, #56]	; 0x38
   2bbc0:	str	r2, [sp, #92]	; 0x5c
   2bbc4:	ldr	r3, [r6, #40]	; 0x28
   2bbc8:	beq	2bfb4 <__assert_fail@plt+0x1a410>
   2bbcc:	ldr	r2, [r6, #28]
   2bbd0:	add	r0, r3, #1
   2bbd4:	cmp	r2, r0
   2bbd8:	ble	2bfb4 <__assert_fail@plt+0x1a410>
   2bbdc:	ldr	lr, [r6, #8]
   2bbe0:	add	ip, lr, r0, lsl #2
   2bbe4:	ldr	r0, [lr, r0, lsl #2]
   2bbe8:	cmn	r0, #1
   2bbec:	subeq	r2, r2, r3
   2bbf0:	moveq	r0, ip
   2bbf4:	moveq	r1, #1
   2bbf8:	bne	2bfb4 <__assert_fail@plt+0x1a410>
   2bbfc:	add	r1, r1, #1
   2bc00:	cmp	r1, r2
   2bc04:	add	lr, r1, r3
   2bc08:	beq	2bc18 <__assert_fail@plt+0x1a074>
   2bc0c:	ldr	r7, [r0, #4]!
   2bc10:	cmn	r7, #1
   2bc14:	beq	2bbfc <__assert_fail@plt+0x1a058>
   2bc18:	ldr	r3, [ip, #-4]
   2bc1c:	mov	r7, #1
   2bc20:	str	r3, [sp, #92]	; 0x5c
   2bc24:	ldr	r3, [sp, #24]
   2bc28:	str	lr, [r6, #40]	; 0x28
   2bc2c:	str	r3, [sp, #20]
   2bc30:	ldr	r2, [sp, #40]	; 0x28
   2bc34:	mov	r1, r6
   2bc38:	mov	r0, r4
   2bc3c:	bl	22c9c <__assert_fail@plt+0x110f8>
   2bc40:	sub	r3, r5, #2
   2bc44:	bics	r3, r3, #2
   2bc48:	mov	r8, r0
   2bc4c:	beq	2bfac <__assert_fail@plt+0x1a408>
   2bc50:	cmp	r5, #3
   2bc54:	moveq	r3, #1
   2bc58:	movne	r3, #0
   2bc5c:	str	r3, [sp, #52]	; 0x34
   2bc60:	beq	2bf94 <__assert_fail@plt+0x1a3f0>
   2bc64:	cmp	r7, #3
   2bc68:	beq	2bf78 <__assert_fail@plt+0x1a3d4>
   2bc6c:	cmp	r5, #0
   2bc70:	bne	2bf64 <__assert_fail@plt+0x1a3c0>
   2bc74:	ldrb	r3, [sp, #84]	; 0x54
   2bc78:	cmp	r7, #0
   2bc7c:	bne	2bf50 <__assert_fail@plt+0x1a3ac>
   2bc80:	ldrb	r7, [sp, #92]	; 0x5c
   2bc84:	ldr	r2, [sp, #52]	; 0x34
   2bc88:	cmp	r5, #0
   2bc8c:	orreq	r2, r2, #1
   2bc90:	cmp	r2, #0
   2bc94:	beq	2bf48 <__assert_fail@plt+0x1a3a4>
   2bc98:	ldr	r2, [sl, #92]	; 0x5c
   2bc9c:	cmp	r2, #1
   2bca0:	ble	2bdfc <__assert_fail@plt+0x1a258>
   2bca4:	mov	r0, r3
   2bca8:	bl	119f4 <btowc@plt>
   2bcac:	mov	r3, r0
   2bcb0:	ldr	r2, [sp, #20]
   2bcb4:	cmp	r2, #0
   2bcb8:	beq	2bdf4 <__assert_fail@plt+0x1a250>
   2bcbc:	ldr	r2, [sl, #92]	; 0x5c
   2bcc0:	cmp	r2, #1
   2bcc4:	ble	2bcdc <__assert_fail@plt+0x1a138>
   2bcc8:	mov	r0, r7
   2bccc:	str	r3, [sp, #20]
   2bcd0:	bl	119f4 <btowc@plt>
   2bcd4:	ldr	r3, [sp, #20]
   2bcd8:	mov	r7, r0
   2bcdc:	cmn	r3, #1
   2bce0:	cmnne	r7, #1
   2bce4:	bne	2be08 <__assert_fail@plt+0x1a264>
   2bce8:	mov	r3, #3
   2bcec:	b	2ba60 <__assert_fail@plt+0x19ebc>
   2bcf0:	ldr	r2, [sp, #40]	; 0x28
   2bcf4:	mov	r1, r6
   2bcf8:	mov	r0, r4
   2bcfc:	bl	22c9c <__assert_fail@plt+0x110f8>
   2bd00:	mov	r8, r0
   2bd04:	ldr	r5, [sp, #84]	; 0x54
   2bd08:	mov	r0, r5
   2bd0c:	bl	11988 <strlen@plt>
   2bd10:	cmp	r0, #1
   2bd14:	bne	2bde4 <__assert_fail@plt+0x1a240>
   2bd18:	ldrb	r3, [r5]
   2bd1c:	ldr	r2, [sp, #212]	; 0xd4
   2bd20:	mov	r1, #0
   2bd24:	str	r1, [r2]
   2bd28:	and	r1, r3, #31
   2bd2c:	asr	r3, r3, #5
   2bd30:	ldr	r2, [fp, r3, lsl #2]
   2bd34:	orr	r2, r2, r0, lsl r1
   2bd38:	str	r2, [fp, r3, lsl #2]
   2bd3c:	b	2b518 <__assert_fail@plt+0x19974>
   2bd40:	ldr	r2, [r6, #56]	; 0x38
   2bd44:	ldrb	r0, [sp, #96]	; 0x60
   2bd48:	cmp	r3, r2
   2bd4c:	str	r2, [sp, #64]	; 0x40
   2bd50:	str	r0, [sp, #60]	; 0x3c
   2bd54:	bge	2bdb0 <__assert_fail@plt+0x1a20c>
   2bd58:	mov	lr, #0
   2bd5c:	add	r2, sp, #136	; 0x88
   2bd60:	str	r2, [sp, #52]	; 0x34
   2bd64:	cmp	r1, #30
   2bd68:	beq	2c25c <__assert_fail@plt+0x1a6b8>
   2bd6c:	ldr	r2, [r6, #4]
   2bd70:	add	r0, r3, #1
   2bd74:	str	r0, [r6, #40]	; 0x28
   2bd78:	ldrb	r2, [r2, r3]
   2bd7c:	mov	r3, r0
   2bd80:	ldr	r0, [sp, #64]	; 0x40
   2bd84:	cmp	r0, r3
   2bd88:	ble	2bdb0 <__assert_fail@plt+0x1a20c>
   2bd8c:	ldr	r0, [sp, #60]	; 0x3c
   2bd90:	cmp	r0, r2
   2bd94:	beq	2c21c <__assert_fail@plt+0x1a678>
   2bd98:	ldr	r0, [sp, #52]	; 0x34
   2bd9c:	add	lr, lr, #1
   2bda0:	cmp	lr, #32
   2bda4:	strb	r2, [r0], #1
   2bda8:	str	r0, [sp, #52]	; 0x34
   2bdac:	bne	2bd64 <__assert_fail@plt+0x1a1c0>
   2bdb0:	mov	r3, #7
   2bdb4:	b	2ba60 <__assert_fail@plt+0x19ebc>
   2bdb8:	lsl	r3, r2, #1
   2bdbc:	add	r3, r3, #1
   2bdc0:	ldr	r0, [r9]
   2bdc4:	lsl	r1, r3, #2
   2bdc8:	str	r3, [sp, #28]
   2bdcc:	bl	36970 <__assert_fail@plt+0x24dcc>
   2bdd0:	cmp	r0, #0
   2bdd4:	beq	2ba5c <__assert_fail@plt+0x19eb8>
   2bdd8:	ldr	r3, [r9, #20]
   2bddc:	str	r0, [r9]
   2bde0:	b	2bb68 <__assert_fail@plt+0x19fc4>
   2bde4:	ldr	r2, [sp, #212]	; 0xd4
   2bde8:	mov	r3, #3
   2bdec:	str	r3, [r2]
   2bdf0:	b	2b754 <__assert_fail@plt+0x19bb0>
   2bdf4:	ldr	r7, [sp, #92]	; 0x5c
   2bdf8:	b	2bcdc <__assert_fail@plt+0x1a138>
   2bdfc:	ldr	r2, [sp, #20]
   2be00:	cmp	r2, #0
   2be04:	beq	2bdf4 <__assert_fail@plt+0x1a250>
   2be08:	ldr	r2, [sp, #68]	; 0x44
   2be0c:	cmp	r7, r3
   2be10:	movcs	r2, #0
   2be14:	andcc	r2, r2, #1
   2be18:	cmp	r2, #0
   2be1c:	bne	2bec8 <__assert_fail@plt+0x1a324>
   2be20:	ldr	r2, [sl, #92]	; 0x5c
   2be24:	cmp	r2, #1
   2be28:	ble	2be58 <__assert_fail@plt+0x1a2b4>
   2be2c:	ldr	r2, [r9, #32]
   2be30:	ldr	r1, [sp, #36]	; 0x24
   2be34:	cmp	r2, r1
   2be38:	beq	2bed0 <__assert_fail@plt+0x1a32c>
   2be3c:	ldr	r5, [r9, #4]
   2be40:	ldr	r0, [r9, #8]
   2be44:	str	r3, [r5, r2, lsl #2]
   2be48:	ldr	r2, [r9, #32]
   2be4c:	add	r1, r2, #1
   2be50:	str	r1, [r9, #32]
   2be54:	str	r7, [r0, r2, lsl #2]
   2be58:	mov	r2, #0
   2be5c:	cmp	r2, r3
   2be60:	movcc	r1, #0
   2be64:	movcs	r1, #1
   2be68:	cmp	r2, r7
   2be6c:	movhi	r1, #0
   2be70:	cmp	r1, #0
   2be74:	beq	2be90 <__assert_fail@plt+0x1a2ec>
   2be78:	asr	ip, r2, #5
   2be7c:	and	r0, r2, #31
   2be80:	ldr	r1, [fp, ip, lsl #2]
   2be84:	mov	lr, #1
   2be88:	orr	r1, r1, lr, lsl r0
   2be8c:	str	r1, [fp, ip, lsl #2]
   2be90:	add	r2, r2, #1
   2be94:	cmp	r2, #256	; 0x100
   2be98:	bne	2be5c <__assert_fail@plt+0x1a2b8>
   2be9c:	ldr	r3, [sp, #212]	; 0xd4
   2bea0:	mov	r2, #0
   2bea4:	str	r2, [r3]
   2bea8:	b	2b518 <__assert_fail@plt+0x19974>
   2beac:	ldr	r2, [sp, #40]	; 0x28
   2beb0:	ldr	r1, [sp, #44]	; 0x2c
   2beb4:	ldr	r0, [sp, #32]
   2beb8:	bl	22c9c <__assert_fail@plt+0x110f8>
   2bebc:	sub	r3, r5, #2
   2bec0:	bics	r3, r3, #2
   2bec4:	beq	2bfac <__assert_fail@plt+0x1a408>
   2bec8:	mov	r3, #11
   2becc:	b	2ba60 <__assert_fail@plt+0x19ebc>
   2bed0:	str	r3, [sp, #52]	; 0x34
   2bed4:	ldr	r3, [sp, #36]	; 0x24
   2bed8:	ldr	r0, [r9, #4]
   2bedc:	lsl	r2, r3, #1
   2bee0:	add	r3, r2, #1
   2bee4:	str	r3, [sp, #36]	; 0x24
   2bee8:	lsl	r2, r3, #2
   2beec:	mov	r1, r2
   2bef0:	str	r2, [sp, #20]
   2bef4:	bl	36970 <__assert_fail@plt+0x24dcc>
   2bef8:	ldr	r2, [sp, #20]
   2befc:	mov	r1, r2
   2bf00:	mov	r5, r0
   2bf04:	ldr	r0, [r9, #8]
   2bf08:	bl	36970 <__assert_fail@plt+0x24dcc>
   2bf0c:	ldr	r3, [sp, #52]	; 0x34
   2bf10:	cmp	r0, #0
   2bf14:	cmpne	r5, #0
   2bf18:	ldrne	r2, [r9, #32]
   2bf1c:	strne	r5, [r9, #4]
   2bf20:	strne	r0, [r9, #8]
   2bf24:	bne	2be44 <__assert_fail@plt+0x1a2a0>
   2bf28:	mov	r4, r5
   2bf2c:	mov	r5, r0
   2bf30:	mov	r0, r4
   2bf34:	bl	184ec <__assert_fail@plt+0x6948>
   2bf38:	mov	r0, r5
   2bf3c:	bl	184ec <__assert_fail@plt+0x6948>
   2bf40:	mov	r3, #12
   2bf44:	b	2ba60 <__assert_fail@plt+0x19ebc>
   2bf48:	ldr	r3, [sp, #84]	; 0x54
   2bf4c:	b	2bcb0 <__assert_fail@plt+0x1a10c>
   2bf50:	cmp	r7, #3
   2bf54:	movne	r7, #0
   2bf58:	ldreq	r2, [sp, #92]	; 0x5c
   2bf5c:	ldrbeq	r7, [r2]
   2bf60:	b	2bc84 <__assert_fail@plt+0x1a0e0>
   2bf64:	cmp	r5, #3
   2bf68:	movne	r3, #0
   2bf6c:	ldreq	r3, [sp, #84]	; 0x54
   2bf70:	ldrbeq	r3, [r3]
   2bf74:	b	2bc78 <__assert_fail@plt+0x1a0d4>
   2bf78:	ldr	r0, [sp, #92]	; 0x5c
   2bf7c:	bl	11988 <strlen@plt>
   2bf80:	cmp	r0, #1
   2bf84:	bls	2bc6c <__assert_fail@plt+0x1a0c8>
   2bf88:	ldr	r3, [sp, #212]	; 0xd4
   2bf8c:	str	r7, [r3]
   2bf90:	b	2b754 <__assert_fail@plt+0x19bb0>
   2bf94:	ldr	r0, [sp, #84]	; 0x54
   2bf98:	bl	11988 <strlen@plt>
   2bf9c:	cmp	r0, #1
   2bfa0:	bls	2bc64 <__assert_fail@plt+0x1a0c0>
   2bfa4:	mov	r7, r5
   2bfa8:	b	2bf88 <__assert_fail@plt+0x1a3e4>
   2bfac:	mov	r7, #11
   2bfb0:	b	2bf88 <__assert_fail@plt+0x1a3e4>
   2bfb4:	and	r2, r1, #251	; 0xfb
   2bfb8:	cmp	r1, #28
   2bfbc:	cmpne	r2, #26
   2bfc0:	add	r3, r7, r3
   2bfc4:	moveq	r2, #1
   2bfc8:	movne	r2, #0
   2bfcc:	str	r2, [sp, #20]
   2bfd0:	str	r3, [r6, #40]	; 0x28
   2bfd4:	beq	2bd40 <__assert_fail@plt+0x1a19c>
   2bfd8:	ldrb	r3, [sp, #96]	; 0x60
   2bfdc:	mov	r2, #1
   2bfe0:	str	r2, [sp, #20]
   2bfe4:	mov	r7, #0
   2bfe8:	strb	r3, [sp, #92]	; 0x5c
   2bfec:	b	2bc30 <__assert_fail@plt+0x1a08c>
   2bff0:	ldr	r3, [r6, #40]	; 0x28
   2bff4:	sub	r3, r3, r8
   2bff8:	str	r3, [r6, #40]	; 0x28
   2bffc:	mov	r3, #1
   2c000:	strb	r3, [r4, #4]
   2c004:	b	2b4e4 <__assert_fail@plt+0x19940>
   2c008:	ldr	r5, [sp, #44]	; 0x2c
   2c00c:	ldr	r7, [sp, #32]
   2c010:	mov	r2, r3
   2c014:	mov	r1, r5
   2c018:	mov	r0, r7
   2c01c:	mov	r8, r3
   2c020:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2c024:	ldr	ip, [r5, #40]	; 0x28
   2c028:	ldr	r3, [sp, #212]	; 0xd4
   2c02c:	str	r6, [sp]
   2c030:	str	r3, [sp, #4]
   2c034:	mov	r2, r7
   2c038:	mov	r3, r8
   2c03c:	mov	r1, r4
   2c040:	add	r0, ip, r0
   2c044:	str	r0, [r5, #40]	; 0x28
   2c048:	mov	r0, r5
   2c04c:	bl	2a27c <__assert_fail@plt+0x186d8>
   2c050:	str	r0, [sp, #36]	; 0x24
   2c054:	b	2a3d4 <__assert_fail@plt+0x18830>
   2c058:	str	r2, [sp, #36]	; 0x24
   2c05c:	ldr	r2, [sp, #212]	; 0xd4
   2c060:	mov	r3, #6
   2c064:	str	r3, [r2]
   2c068:	b	2a3d4 <__assert_fail@plt+0x18830>
   2c06c:	mov	r8, r1
   2c070:	ldr	r0, [sp, #32]
   2c074:	b	2afc8 <__assert_fail@plt+0x19424>
   2c078:	mov	r8, r6
   2c07c:	ldr	r0, [sp, #32]
   2c080:	b	2afc8 <__assert_fail@plt+0x19424>
   2c084:	ldr	r2, [sp, #40]	; 0x28
   2c088:	mov	r1, r6
   2c08c:	add	r0, sp, #136	; 0x88
   2c090:	bl	22c9c <__assert_fail@plt+0x110f8>
   2c094:	ldrb	r3, [sp, #140]	; 0x8c
   2c098:	cmp	r3, #21
   2c09c:	bne	2bec8 <__assert_fail@plt+0x1a324>
   2c0a0:	b	2b674 <__assert_fail@plt+0x19ad0>
   2c0a4:	ldr	r7, [r6, #56]	; 0x38
   2c0a8:	ldrb	r3, [r4]
   2c0ac:	cmp	r8, r7
   2c0b0:	str	r3, [sp, #56]	; 0x38
   2c0b4:	bge	2bdb0 <__assert_fail@plt+0x1a20c>
   2c0b8:	add	r3, sp, #104	; 0x68
   2c0bc:	str	r3, [sp, #20]
   2c0c0:	mov	ip, #0
   2c0c4:	b	2c108 <__assert_fail@plt+0x1a564>
   2c0c8:	ldr	r3, [r6, #4]
   2c0cc:	add	r1, r8, #1
   2c0d0:	str	r1, [r6, #40]	; 0x28
   2c0d4:	ldrb	r3, [r3, r8]
   2c0d8:	mov	r8, r1
   2c0dc:	cmp	r7, r8
   2c0e0:	ble	2bdb0 <__assert_fail@plt+0x1a20c>
   2c0e4:	ldr	r1, [sp, #56]	; 0x38
   2c0e8:	cmp	r1, r3
   2c0ec:	beq	2c380 <__assert_fail@plt+0x1a7dc>
   2c0f0:	ldr	r1, [sp, #20]
   2c0f4:	add	ip, ip, #1
   2c0f8:	cmp	ip, #32
   2c0fc:	strb	r3, [r1], #1
   2c100:	str	r1, [sp, #20]
   2c104:	beq	2bdb0 <__assert_fail@plt+0x1a20c>
   2c108:	cmp	r2, #30
   2c10c:	bne	2c0c8 <__assert_fail@plt+0x1a524>
   2c110:	ldrb	r3, [r6, #75]	; 0x4b
   2c114:	cmp	r3, #0
   2c118:	beq	2c0c8 <__assert_fail@plt+0x1a524>
   2c11c:	ldrb	r3, [r6, #76]	; 0x4c
   2c120:	cmp	r3, #0
   2c124:	beq	2c46c <__assert_fail@plt+0x1a8c8>
   2c128:	ldr	lr, [r6, #28]
   2c12c:	cmp	lr, r8
   2c130:	beq	2c460 <__assert_fail@plt+0x1a8bc>
   2c134:	ldr	r1, [r6, #8]
   2c138:	mov	r3, r8
   2c13c:	lsl	r0, r8, #2
   2c140:	ldr	r1, [r1, r8, lsl #2]
   2c144:	cmn	r1, #1
   2c148:	movne	r1, r8
   2c14c:	beq	2c44c <__assert_fail@plt+0x1a8a8>
   2c150:	ldr	r5, [r6, #12]
   2c154:	ldr	r3, [r6]
   2c158:	ldr	r5, [r5, r0]
   2c15c:	ldr	r0, [r6, #24]
   2c160:	add	r3, r3, r5
   2c164:	ldrb	r3, [r3, r0]
   2c168:	tst	r3, #128	; 0x80
   2c16c:	bne	2c438 <__assert_fail@plt+0x1a894>
   2c170:	ldr	r1, [sp, #52]	; 0x34
   2c174:	cmp	r1, #1
   2c178:	add	r1, r8, #1
   2c17c:	beq	2c1bc <__assert_fail@plt+0x1a618>
   2c180:	cmp	lr, r1
   2c184:	ble	2c1bc <__assert_fail@plt+0x1a618>
   2c188:	ldr	r5, [r6, #8]
   2c18c:	add	r0, r5, r1, lsl #2
   2c190:	ldr	r5, [r5, r1, lsl #2]
   2c194:	cmn	r5, #1
   2c198:	addeq	r8, r8, #2
   2c19c:	bne	2c1bc <__assert_fail@plt+0x1a618>
   2c1a0:	cmp	lr, r8
   2c1a4:	mov	r1, r8
   2c1a8:	beq	2c1bc <__assert_fail@plt+0x1a618>
   2c1ac:	ldr	r5, [r0, #4]!
   2c1b0:	add	r8, r8, #1
   2c1b4:	cmn	r5, #1
   2c1b8:	beq	2c1a0 <__assert_fail@plt+0x1a5fc>
   2c1bc:	str	r1, [r6, #40]	; 0x28
   2c1c0:	mov	r8, r1
   2c1c4:	b	2c0dc <__assert_fail@plt+0x1a538>
   2c1c8:	ldr	r6, [sp, #32]
   2c1cc:	mov	r3, #6
   2c1d0:	add	r5, sl, #56	; 0x38
   2c1d4:	add	sl, sl, #64	; 0x40
   2c1d8:	str	r3, [r6]
   2c1dc:	mov	r2, r6
   2c1e0:	mov	r1, sl
   2c1e4:	mov	r0, r5
   2c1e8:	bl	26648 <__assert_fail@plt+0x14aa4>
   2c1ec:	mov	r3, #9
   2c1f0:	str	r3, [r6]
   2c1f4:	mov	r4, r0
   2c1f8:	b	2b2d8 <__assert_fail@plt+0x19734>
   2c1fc:	ldr	r2, [sp, #32]
   2c200:	add	r1, sl, #64	; 0x40
   2c204:	add	r0, sl, #56	; 0x38
   2c208:	bl	26648 <__assert_fail@plt+0x14aa4>
   2c20c:	subs	r3, r0, #0
   2c210:	str	r3, [sp, #36]	; 0x24
   2c214:	bne	2b340 <__assert_fail@plt+0x1979c>
   2c218:	b	2b258 <__assert_fail@plt+0x196b4>
   2c21c:	ldr	r0, [r6, #4]
   2c220:	ldrb	r0, [r0, r3]
   2c224:	cmp	r0, #93	; 0x5d
   2c228:	bne	2bd98 <__assert_fail@plt+0x1a1f4>
   2c22c:	add	r2, sp, #168	; 0xa8
   2c230:	add	lr, r2, lr
   2c234:	add	r3, r3, #1
   2c238:	mov	r2, #0
   2c23c:	cmp	r1, #28
   2c240:	strb	r2, [lr, #-32]	; 0xffffffe0
   2c244:	str	r3, [r6, #40]	; 0x28
   2c248:	beq	2c314 <__assert_fail@plt+0x1a770>
   2c24c:	cmp	r1, #30
   2c250:	beq	2beac <__assert_fail@plt+0x1a308>
   2c254:	mov	r7, #3
   2c258:	b	2bc30 <__assert_fail@plt+0x1a08c>
   2c25c:	ldrb	r2, [r6, #75]	; 0x4b
   2c260:	cmp	r2, #0
   2c264:	beq	2bd6c <__assert_fail@plt+0x1a1c8>
   2c268:	ldrb	r2, [r6, #76]	; 0x4c
   2c26c:	cmp	r2, #0
   2c270:	beq	2c360 <__assert_fail@plt+0x1a7bc>
   2c274:	ldr	r7, [r6, #28]
   2c278:	cmp	r7, r3
   2c27c:	beq	2c354 <__assert_fail@plt+0x1a7b0>
   2c280:	ldr	r0, [r6, #8]
   2c284:	mov	r2, r3
   2c288:	lsl	ip, r3, #2
   2c28c:	ldr	r0, [r0, r3, lsl #2]
   2c290:	cmn	r0, #1
   2c294:	movne	r0, r3
   2c298:	beq	2c340 <__assert_fail@plt+0x1a79c>
   2c29c:	ldr	r8, [r6, #12]
   2c2a0:	ldr	r2, [r6]
   2c2a4:	ldr	r8, [r8, ip]
   2c2a8:	ldr	ip, [r6, #24]
   2c2ac:	add	r2, r2, r8
   2c2b0:	ldrb	r2, [r2, ip]
   2c2b4:	tst	r2, #128	; 0x80
   2c2b8:	bne	2c32c <__assert_fail@plt+0x1a788>
   2c2bc:	ldr	r0, [sp, #56]	; 0x38
   2c2c0:	cmp	r0, #1
   2c2c4:	add	r0, r3, #1
   2c2c8:	beq	2c308 <__assert_fail@plt+0x1a764>
   2c2cc:	cmp	r7, r0
   2c2d0:	ble	2c308 <__assert_fail@plt+0x1a764>
   2c2d4:	ldr	r8, [r6, #8]
   2c2d8:	add	ip, r8, r0, lsl #2
   2c2dc:	ldr	r8, [r8, r0, lsl #2]
   2c2e0:	cmn	r8, #1
   2c2e4:	addeq	r3, r3, #2
   2c2e8:	bne	2c308 <__assert_fail@plt+0x1a764>
   2c2ec:	cmp	r7, r3
   2c2f0:	mov	r0, r3
   2c2f4:	beq	2c308 <__assert_fail@plt+0x1a764>
   2c2f8:	ldr	r8, [ip, #4]!
   2c2fc:	add	r3, r3, #1
   2c300:	cmn	r8, #1
   2c304:	beq	2c2ec <__assert_fail@plt+0x1a748>
   2c308:	str	r0, [r6, #40]	; 0x28
   2c30c:	mov	r3, r0
   2c310:	b	2bd80 <__assert_fail@plt+0x1a1dc>
   2c314:	ldr	r2, [sp, #40]	; 0x28
   2c318:	ldr	r1, [sp, #44]	; 0x2c
   2c31c:	ldr	r0, [sp, #32]
   2c320:	bl	22c9c <__assert_fail@plt+0x110f8>
   2c324:	mov	r7, #11
   2c328:	b	2bf88 <__assert_fail@plt+0x1a3e4>
   2c32c:	ldr	r2, [r6, #4]
   2c330:	add	r3, r3, #1
   2c334:	str	r3, [r6, #40]	; 0x28
   2c338:	ldrb	r2, [r2, r0]
   2c33c:	b	2bd80 <__assert_fail@plt+0x1a1dc>
   2c340:	ldr	r0, [r6, #4]
   2c344:	add	r3, r3, #1
   2c348:	str	r3, [r6, #40]	; 0x28
   2c34c:	ldrb	r2, [r0, r2]
   2c350:	b	2bd80 <__assert_fail@plt+0x1a1dc>
   2c354:	mov	r0, r3
   2c358:	lsl	ip, r3, #2
   2c35c:	b	2c29c <__assert_fail@plt+0x1a6f8>
   2c360:	ldr	r2, [r6]
   2c364:	ldr	ip, [r6, #24]
   2c368:	add	r0, r3, #1
   2c36c:	add	r2, r2, ip
   2c370:	str	r0, [r6, #40]	; 0x28
   2c374:	ldrb	r2, [r2, r3]
   2c378:	mov	r3, r0
   2c37c:	b	2bd80 <__assert_fail@plt+0x1a1dc>
   2c380:	ldr	r1, [r6, #4]
   2c384:	ldrb	r1, [r1, r8]
   2c388:	cmp	r1, #93	; 0x5d
   2c38c:	bne	2c0f0 <__assert_fail@plt+0x1a54c>
   2c390:	add	r3, sp, #168	; 0xa8
   2c394:	add	ip, r3, ip
   2c398:	add	r8, r8, #1
   2c39c:	mov	r3, #0
   2c3a0:	cmp	r2, #28
   2c3a4:	strb	r3, [ip, #-64]	; 0xffffffc0
   2c3a8:	str	r8, [r6, #40]	; 0x28
   2c3ac:	beq	2bcf0 <__assert_fail@plt+0x1a14c>
   2c3b0:	cmp	r2, #30
   2c3b4:	beq	2c3e4 <__assert_fail@plt+0x1a840>
   2c3b8:	cmp	r2, #26
   2c3bc:	beq	2c3dc <__assert_fail@plt+0x1a838>
   2c3c0:	ldr	r2, [sp, #40]	; 0x28
   2c3c4:	mov	r1, r6
   2c3c8:	mov	r0, r4
   2c3cc:	bl	22c9c <__assert_fail@plt+0x110f8>
   2c3d0:	mov	r5, #3
   2c3d4:	mov	r8, r0
   2c3d8:	b	2b4d0 <__assert_fail@plt+0x1992c>
   2c3dc:	mov	r5, #3
   2c3e0:	b	2b4bc <__assert_fail@plt+0x19918>
   2c3e4:	ldr	r5, [sp, #40]	; 0x28
   2c3e8:	mov	r1, r6
   2c3ec:	mov	r2, r5
   2c3f0:	mov	r0, r4
   2c3f4:	bl	22c9c <__assert_fail@plt+0x110f8>
   2c3f8:	ldr	r2, [sp, #84]	; 0x54
   2c3fc:	add	r3, sp, #76	; 0x4c
   2c400:	mov	r1, fp
   2c404:	mov	r8, r0
   2c408:	ldr	r0, [r6, #64]	; 0x40
   2c40c:	str	r2, [sp, #4]
   2c410:	str	r3, [sp]
   2c414:	str	r5, [sp, #8]
   2c418:	add	r3, r9, #36	; 0x24
   2c41c:	add	r2, r9, #12
   2c420:	bl	24cac <__assert_fail@plt+0x13108>
   2c424:	ldr	r3, [sp, #212]	; 0xd4
   2c428:	cmp	r0, #0
   2c42c:	str	r0, [r3]
   2c430:	beq	2b518 <__assert_fail@plt+0x19974>
   2c434:	b	2b754 <__assert_fail@plt+0x19bb0>
   2c438:	ldr	r3, [r6, #4]
   2c43c:	add	r8, r8, #1
   2c440:	str	r8, [r6, #40]	; 0x28
   2c444:	ldrb	r3, [r3, r1]
   2c448:	b	2c0dc <__assert_fail@plt+0x1a538>
   2c44c:	ldr	r1, [r6, #4]
   2c450:	add	r8, r8, #1
   2c454:	str	r8, [r6, #40]	; 0x28
   2c458:	ldrb	r3, [r1, r3]
   2c45c:	b	2c0dc <__assert_fail@plt+0x1a538>
   2c460:	mov	r1, r8
   2c464:	lsl	r0, r8, #2
   2c468:	b	2c150 <__assert_fail@plt+0x1a5ac>
   2c46c:	ldr	r3, [r6]
   2c470:	ldr	r0, [r6, #24]
   2c474:	add	r1, r8, #1
   2c478:	add	r3, r3, r0
   2c47c:	str	r1, [r6, #40]	; 0x28
   2c480:	ldrb	r3, [r3, r8]
   2c484:	mov	r8, r1
   2c488:	b	2c0dc <__assert_fail@plt+0x1a538>
   2c48c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c490:	sub	sp, sp, #36	; 0x24
   2c494:	mov	sl, r3
   2c498:	ldr	r5, [sp, #76]	; 0x4c
   2c49c:	ldr	r7, [sp, #72]	; 0x48
   2c4a0:	str	r5, [sp, #4]
   2c4a4:	str	r7, [sp]
   2c4a8:	ldr	ip, [r1]
   2c4ac:	mov	r8, r1
   2c4b0:	str	ip, [sp, #16]
   2c4b4:	mov	r9, r0
   2c4b8:	mov	r6, r2
   2c4bc:	bl	2a27c <__assert_fail@plt+0x186d8>
   2c4c0:	ldr	r3, [r5]
   2c4c4:	adds	r3, r3, #0
   2c4c8:	movne	r3, #1
   2c4cc:	cmp	r0, #0
   2c4d0:	movne	r3, #0
   2c4d4:	cmp	r3, #0
   2c4d8:	bne	2c65c <__assert_fail@plt+0x1aab8>
   2c4dc:	mov	r4, r0
   2c4e0:	str	r3, [sp, #20]
   2c4e4:	str	r8, [sp, #12]
   2c4e8:	ldrb	r3, [r6, #4]
   2c4ec:	and	r2, r3, #247	; 0xf7
   2c4f0:	cmp	r2, #2
   2c4f4:	beq	2c570 <__assert_fail@plt+0x1a9cc>
   2c4f8:	subs	r3, r3, #9
   2c4fc:	movne	r3, #1
   2c500:	cmp	r7, #0
   2c504:	orreq	r3, r3, #1
   2c508:	cmp	r3, #0
   2c50c:	beq	2c570 <__assert_fail@plt+0x1a9cc>
   2c510:	mov	r3, sl
   2c514:	str	r5, [sp, #4]
   2c518:	str	r7, [sp]
   2c51c:	mov	r2, r6
   2c520:	ldr	r1, [sp, #12]
   2c524:	mov	r0, r9
   2c528:	bl	2a27c <__assert_fail@plt+0x186d8>
   2c52c:	ldr	r3, [r5]
   2c530:	adds	r3, r3, #0
   2c534:	movne	r3, #1
   2c538:	cmp	r0, #0
   2c53c:	movne	r3, #0
   2c540:	cmp	r3, #0
   2c544:	mov	fp, r0
   2c548:	bne	2c66c <__assert_fail@plt+0x1aac8>
   2c54c:	cmp	r4, #0
   2c550:	cmpne	r0, #0
   2c554:	bne	2c57c <__assert_fail@plt+0x1a9d8>
   2c558:	ldrb	r3, [r6, #4]
   2c55c:	cmp	r4, #0
   2c560:	moveq	r4, r0
   2c564:	and	r2, r3, #247	; 0xf7
   2c568:	cmp	r2, #2
   2c56c:	bne	2c4f8 <__assert_fail@plt+0x1a954>
   2c570:	mov	r0, r4
   2c574:	add	sp, sp, #36	; 0x24
   2c578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c57c:	ldr	r1, [sp, #16]
   2c580:	str	r3, [sp, #24]
   2c584:	str	r3, [sp, #28]
   2c588:	ldr	r2, [r1, #64]	; 0x40
   2c58c:	cmp	r2, #31
   2c590:	beq	2c610 <__assert_fail@plt+0x1aa6c>
   2c594:	lsl	r3, r2, #5
   2c598:	add	lr, r2, #1
   2c59c:	ldr	r2, [r1, #56]	; 0x38
   2c5a0:	add	ip, r3, #4
   2c5a4:	mov	r8, r1
   2c5a8:	mov	r1, #16
   2c5ac:	strb	r1, [sp, #28]
   2c5b0:	add	r1, sp, #24
   2c5b4:	add	r3, r2, r3
   2c5b8:	ldm	r1, {r0, r1}
   2c5bc:	str	lr, [r8, #64]	; 0x40
   2c5c0:	ldr	r8, [sp, #20]
   2c5c4:	add	lr, r3, #24
   2c5c8:	str	r8, [r3, #4]
   2c5cc:	str	r4, [r3, #8]
   2c5d0:	str	fp, [r3, #12]
   2c5d4:	stm	lr, {r0, r1}
   2c5d8:	ldrb	r1, [r3, #30]
   2c5dc:	add	r2, r2, ip
   2c5e0:	mvn	r0, #0
   2c5e4:	and	r1, r1, #243	; 0xf3
   2c5e8:	cmp	r2, #0
   2c5ec:	str	r8, [r3, #16]
   2c5f0:	str	r8, [r3, #20]
   2c5f4:	str	r0, [r3, #32]
   2c5f8:	strb	r1, [r3, #30]
   2c5fc:	str	r2, [r4]
   2c600:	str	r2, [fp]
   2c604:	beq	2c644 <__assert_fail@plt+0x1aaa0>
   2c608:	mov	r4, r2
   2c60c:	b	2c4e8 <__assert_fail@plt+0x1a944>
   2c610:	mov	r0, #996	; 0x3e4
   2c614:	bl	36944 <__assert_fail@plt+0x24da0>
   2c618:	subs	r2, r0, #0
   2c61c:	beq	2c644 <__assert_fail@plt+0x1aaa0>
   2c620:	ldr	r0, [sp, #16]
   2c624:	mov	lr, #1
   2c628:	mov	ip, #4
   2c62c:	ldr	r1, [r0, #56]	; 0x38
   2c630:	ldr	r3, [sp, #20]
   2c634:	str	r1, [r2]
   2c638:	mov	r8, r0
   2c63c:	str	r2, [r0, #56]	; 0x38
   2c640:	b	2c5a8 <__assert_fail@plt+0x1aa04>
   2c644:	mov	r0, fp
   2c648:	bl	266f4 <__assert_fail@plt+0x14b50>
   2c64c:	mov	r0, r4
   2c650:	bl	266f4 <__assert_fail@plt+0x14b50>
   2c654:	mov	r3, #12
   2c658:	str	r3, [r5]
   2c65c:	mov	r4, #0
   2c660:	mov	r0, r4
   2c664:	add	sp, sp, #36	; 0x24
   2c668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c66c:	cmp	r4, #0
   2c670:	beq	2c65c <__assert_fail@plt+0x1aab8>
   2c674:	mov	r0, r4
   2c678:	bl	266f4 <__assert_fail@plt+0x14b50>
   2c67c:	mov	r4, #0
   2c680:	mov	r0, r4
   2c684:	add	sp, sp, #36	; 0x24
   2c688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c68c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c690:	sub	sp, sp, #44	; 0x2c
   2c694:	ldr	r5, [r1]
   2c698:	ldr	sl, [sp, #84]	; 0x54
   2c69c:	str	r1, [sp, #24]
   2c6a0:	ldr	ip, [r5, #84]	; 0x54
   2c6a4:	str	sl, [sp, #4]
   2c6a8:	str	ip, [sp, #20]
   2c6ac:	ldr	ip, [sp, #80]	; 0x50
   2c6b0:	mov	r9, r0
   2c6b4:	str	ip, [sp]
   2c6b8:	mov	r8, r2
   2c6bc:	str	r3, [sp, #16]
   2c6c0:	bl	2c48c <__assert_fail@plt+0x1a8e8>
   2c6c4:	ldr	r4, [sl]
   2c6c8:	adds	r4, r4, #0
   2c6cc:	movne	r4, #1
   2c6d0:	cmp	r0, #0
   2c6d4:	movne	r4, #0
   2c6d8:	cmp	r4, #0
   2c6dc:	bne	2c83c <__assert_fail@plt+0x1ac98>
   2c6e0:	ldr	r3, [sp, #16]
   2c6e4:	mov	r6, r0
   2c6e8:	orr	r3, r3, #8388608	; 0x800000
   2c6ec:	str	r3, [sp, #12]
   2c6f0:	add	r7, sp, #32
   2c6f4:	b	2c7ec <__assert_fail@plt+0x1ac48>
   2c6f8:	ldr	r3, [sp, #80]	; 0x50
   2c6fc:	clz	r3, r3
   2c700:	lsr	r3, r3, #5
   2c704:	cmp	r2, #9
   2c708:	orrne	r3, r3, #1
   2c70c:	cmp	r3, #0
   2c710:	beq	2c824 <__assert_fail@plt+0x1ac80>
   2c714:	ldr	r2, [sp, #20]
   2c718:	ldr	r1, [sp, #80]	; 0x50
   2c71c:	ldr	fp, [r5, #84]	; 0x54
   2c720:	ldr	r3, [sp, #16]
   2c724:	str	r2, [r5, #84]	; 0x54
   2c728:	mov	r0, r9
   2c72c:	mov	r2, r8
   2c730:	str	r1, [sp]
   2c734:	str	sl, [sp, #4]
   2c738:	ldr	r1, [sp, #24]
   2c73c:	bl	2c48c <__assert_fail@plt+0x1a8e8>
   2c740:	ldr	r3, [sl]
   2c744:	adds	r3, r3, #0
   2c748:	movne	r3, #1
   2c74c:	cmp	r0, #0
   2c750:	movne	r3, #0
   2c754:	cmp	r3, #0
   2c758:	mov	r2, r0
   2c75c:	bne	2c82c <__assert_fail@plt+0x1ac88>
   2c760:	ldr	r3, [r5, #84]	; 0x54
   2c764:	orr	fp, r3, fp
   2c768:	str	fp, [r5, #84]	; 0x54
   2c76c:	ldr	lr, [r5, #64]	; 0x40
   2c770:	str	r4, [r7]
   2c774:	cmp	lr, #31
   2c778:	str	r4, [r7, #4]
   2c77c:	beq	2c864 <__assert_fail@plt+0x1acc0>
   2c780:	lsl	r3, lr, #5
   2c784:	ldr	ip, [r5, #56]	; 0x38
   2c788:	add	lr, lr, #1
   2c78c:	add	fp, r3, #4
   2c790:	mov	r1, #10
   2c794:	add	r3, ip, r3
   2c798:	strb	r1, [sp, #36]	; 0x24
   2c79c:	ldm	r7, {r0, r1}
   2c7a0:	str	lr, [r5, #64]	; 0x40
   2c7a4:	add	lr, r3, #24
   2c7a8:	stmib	r3, {r4, r6}
   2c7ac:	str	r2, [r3, #12]
   2c7b0:	stm	lr, {r0, r1}
   2c7b4:	ldrb	r1, [r3, #30]
   2c7b8:	cmp	r6, #0
   2c7bc:	add	ip, ip, fp
   2c7c0:	mvn	r0, #0
   2c7c4:	and	r1, r1, #243	; 0xf3
   2c7c8:	str	r4, [r3, #16]
   2c7cc:	str	r4, [r3, #20]
   2c7d0:	strb	r1, [r3, #30]
   2c7d4:	str	r0, [r3, #32]
   2c7d8:	strne	ip, [r6]
   2c7dc:	cmp	r2, #0
   2c7e0:	strne	ip, [r2]
   2c7e4:	subs	r6, ip, #0
   2c7e8:	beq	2c84c <__assert_fail@plt+0x1aca8>
   2c7ec:	ldrb	r3, [r8, #4]
   2c7f0:	cmp	r3, #10
   2c7f4:	bne	2c840 <__assert_fail@plt+0x1ac9c>
   2c7f8:	ldr	r2, [sp, #12]
   2c7fc:	mov	r1, r9
   2c800:	mov	r0, r8
   2c804:	bl	25ce0 <__assert_fail@plt+0x1413c>
   2c808:	ldrb	r2, [r8, #4]
   2c80c:	ldr	r3, [r9, #40]	; 0x28
   2c810:	and	r1, r2, #247	; 0xf7
   2c814:	cmp	r1, #2
   2c818:	add	r0, r3, r0
   2c81c:	str	r0, [r9, #40]	; 0x28
   2c820:	bne	2c6f8 <__assert_fail@plt+0x1ab54>
   2c824:	mov	r2, r4
   2c828:	b	2c76c <__assert_fail@plt+0x1abc8>
   2c82c:	cmp	r6, #0
   2c830:	beq	2c83c <__assert_fail@plt+0x1ac98>
   2c834:	mov	r0, r6
   2c838:	bl	266f4 <__assert_fail@plt+0x14b50>
   2c83c:	mov	r6, #0
   2c840:	mov	r0, r6
   2c844:	add	sp, sp, #44	; 0x2c
   2c848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c84c:	mov	r3, #12
   2c850:	mov	r6, #0
   2c854:	mov	r0, r6
   2c858:	str	r3, [sl]
   2c85c:	add	sp, sp, #44	; 0x2c
   2c860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c864:	mov	r0, #996	; 0x3e4
   2c868:	str	r2, [sp, #28]
   2c86c:	bl	36944 <__assert_fail@plt+0x24da0>
   2c870:	subs	ip, r0, #0
   2c874:	beq	2c84c <__assert_fail@plt+0x1aca8>
   2c878:	ldr	r1, [r5, #56]	; 0x38
   2c87c:	mov	lr, #1
   2c880:	str	r1, [ip]
   2c884:	mov	fp, #4
   2c888:	mov	r3, r4
   2c88c:	str	ip, [r5, #56]	; 0x38
   2c890:	ldr	r2, [sp, #28]
   2c894:	b	2c790 <__assert_fail@plt+0x1abec>
   2c898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c89c:	mov	ip, #0
   2c8a0:	ldr	r9, [r2, #4]
   2c8a4:	sub	sp, sp, #28
   2c8a8:	cmp	r9, ip
   2c8ac:	str	r0, [sp]
   2c8b0:	str	ip, [r0]
   2c8b4:	beq	2cc0c <__assert_fail@plt+0x1b068>
   2c8b8:	add	fp, r3, r9
   2c8bc:	ble	2c8d8 <__assert_fail@plt+0x1ad34>
   2c8c0:	ldr	ip, [r2, #8]
   2c8c4:	add	r4, ip, r9, lsl #2
   2c8c8:	ldr	r0, [ip], #4
   2c8cc:	cmp	r4, ip
   2c8d0:	add	fp, fp, r0
   2c8d4:	bne	2c8c8 <__assert_fail@plt+0x1ad24>
   2c8d8:	ldr	ip, [r1, #68]	; 0x44
   2c8dc:	ldr	lr, [r1, #32]
   2c8e0:	and	ip, ip, fp
   2c8e4:	add	ip, ip, ip, lsl #1
   2c8e8:	lsl	ip, ip, #2
   2c8ec:	add	r4, lr, ip
   2c8f0:	ldr	r5, [lr, ip]
   2c8f4:	cmp	r5, #0
   2c8f8:	ble	2c998 <__assert_fail@plt+0x1adf4>
   2c8fc:	sub	ip, r9, #1
   2c900:	ldr	lr, [r4, #8]
   2c904:	lsl	r0, ip, #2
   2c908:	sub	lr, lr, #4
   2c90c:	str	r0, [sp, #4]
   2c910:	mov	ip, #0
   2c914:	b	2c924 <__assert_fail@plt+0x1ad80>
   2c918:	add	ip, ip, #1
   2c91c:	cmp	ip, r5
   2c920:	beq	2c998 <__assert_fail@plt+0x1adf4>
   2c924:	ldr	r4, [lr, #4]!
   2c928:	ldr	r0, [r4]
   2c92c:	cmp	r0, fp
   2c930:	bne	2c918 <__assert_fail@plt+0x1ad74>
   2c934:	ldrb	r0, [r4, #52]	; 0x34
   2c938:	and	r0, r0, #15
   2c93c:	cmp	r3, r0
   2c940:	bne	2c918 <__assert_fail@plt+0x1ad74>
   2c944:	ldr	r7, [r4, #40]	; 0x28
   2c948:	cmp	r7, #0
   2c94c:	beq	2c918 <__assert_fail@plt+0x1ad74>
   2c950:	ldr	r0, [r7, #4]
   2c954:	cmp	r9, r0
   2c958:	bne	2c918 <__assert_fail@plt+0x1ad74>
   2c95c:	ldr	r0, [sp, #4]
   2c960:	mov	r6, r9
   2c964:	b	2c984 <__assert_fail@plt+0x1ade0>
   2c968:	ldr	sl, [r7, #8]
   2c96c:	ldr	r8, [r2, #8]
   2c970:	ldr	sl, [sl, r0]
   2c974:	ldr	r8, [r8, r0]
   2c978:	sub	r0, r0, #4
   2c97c:	cmp	sl, r8
   2c980:	bne	2c918 <__assert_fail@plt+0x1ad74>
   2c984:	subs	r6, r6, #1
   2c988:	bpl	2c968 <__assert_fail@plt+0x1adc4>
   2c98c:	mov	r0, r4
   2c990:	add	sp, sp, #28
   2c994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c998:	mov	r7, r3
   2c99c:	ldr	r3, [sp]
   2c9a0:	mov	r9, r1
   2c9a4:	mov	r0, #56	; 0x38
   2c9a8:	mov	r1, #1
   2c9ac:	str	r3, [sp, #12]
   2c9b0:	mov	r8, r2
   2c9b4:	bl	368fc <__assert_fail@plt+0x24d58>
   2c9b8:	subs	r4, r0, #0
   2c9bc:	beq	2cc00 <__assert_fail@plt+0x1b05c>
   2c9c0:	ldr	r0, [r8, #4]
   2c9c4:	add	r3, r4, #4
   2c9c8:	cmp	r0, #0
   2c9cc:	str	r3, [sp, #16]
   2c9d0:	str	r0, [r4, #8]
   2c9d4:	ble	2cc84 <__assert_fail@plt+0x1b0e0>
   2c9d8:	str	r0, [r4, #4]
   2c9dc:	lsl	r0, r0, #2
   2c9e0:	bl	36944 <__assert_fail@plt+0x24da0>
   2c9e4:	cmp	r0, #0
   2c9e8:	str	r0, [r4, #12]
   2c9ec:	beq	2ccb4 <__assert_fail@plt+0x1b110>
   2c9f0:	ldr	sl, [r8, #4]
   2c9f4:	ldr	r1, [r8, #8]
   2c9f8:	lsl	r2, sl, #2
   2c9fc:	bl	11784 <memcpy@plt>
   2ca00:	ldrb	r2, [r4, #52]	; 0x34
   2ca04:	and	r3, r7, #15
   2ca08:	cmp	sl, #0
   2ca0c:	bic	r2, r2, #15
   2ca10:	orr	r3, r3, r2
   2ca14:	add	r2, r4, #4
   2ca18:	str	r2, [r4, #40]	; 0x28
   2ca1c:	strb	r3, [r4, #52]	; 0x34
   2ca20:	ble	2cb98 <__assert_fail@plt+0x1aff4>
   2ca24:	and	r2, r7, #2
   2ca28:	str	r2, [sp]
   2ca2c:	and	r2, r7, #4
   2ca30:	mov	r0, #0
   2ca34:	and	r3, r7, #1
   2ca38:	stmib	sp, {r2, fp}
   2ca3c:	mov	ip, sl
   2ca40:	ldr	r6, [pc, #676]	; 2ccec <__assert_fail@plt+0x1b148>
   2ca44:	mov	r5, r0
   2ca48:	mov	fp, r3
   2ca4c:	add	sl, r4, #4
   2ca50:	b	2cab4 <__assert_fail@plt+0x1af10>
   2ca54:	cmp	fp, #0
   2ca58:	beq	2ca8c <__assert_fail@plt+0x1aee8>
   2ca5c:	tst	r7, #2
   2ca60:	bne	2ca8c <__assert_fail@plt+0x1aee8>
   2ca64:	tst	r7, #16
   2ca68:	beq	2ca78 <__assert_fail@plt+0x1aed4>
   2ca6c:	ldr	r3, [sp]
   2ca70:	cmp	r3, #0
   2ca74:	beq	2ca8c <__assert_fail@plt+0x1aee8>
   2ca78:	tst	r7, #64	; 0x40
   2ca7c:	beq	2caa4 <__assert_fail@plt+0x1af00>
   2ca80:	ldr	r3, [sp, #4]
   2ca84:	cmp	r3, #0
   2ca88:	bne	2caa4 <__assert_fail@plt+0x1af00>
   2ca8c:	subs	r2, r5, r0
   2ca90:	bmi	2caa0 <__assert_fail@plt+0x1aefc>
   2ca94:	ldr	r1, [r4, #8]
   2ca98:	cmp	r2, r1
   2ca9c:	blt	2cb60 <__assert_fail@plt+0x1afbc>
   2caa0:	add	r0, r0, #1
   2caa4:	ldr	ip, [r8, #4]
   2caa8:	add	r5, r5, #1
   2caac:	cmp	r5, ip
   2cab0:	bge	2cb94 <__assert_fail@plt+0x1aff0>
   2cab4:	ldr	r1, [r8, #8]
   2cab8:	ldr	r2, [r9]
   2cabc:	ldr	r1, [r1, r5, lsl #2]
   2cac0:	add	r2, r2, r1, lsl #3
   2cac4:	ldr	r7, [r2, #4]
   2cac8:	ldrb	r1, [r2, #4]
   2cacc:	ands	r7, r6, r7, lsr #8
   2cad0:	moveq	lr, #1
   2cad4:	movne	lr, #0
   2cad8:	cmp	r1, #1
   2cadc:	movne	lr, #0
   2cae0:	andeq	lr, lr, #1
   2cae4:	cmp	lr, #0
   2cae8:	bne	2caa8 <__assert_fail@plt+0x1af04>
   2caec:	ldrb	r2, [r2, #6]
   2caf0:	ldrb	lr, [r4, #52]	; 0x34
   2caf4:	cmp	r1, #2
   2caf8:	lsr	r2, r2, #4
   2cafc:	orr	r2, r2, lr, lsr #5
   2cb00:	and	r2, r2, #1
   2cb04:	bic	lr, lr, #32
   2cb08:	orr	r2, lr, r2, lsl #5
   2cb0c:	strb	r2, [r4, #52]	; 0x34
   2cb10:	uxtbeq	r2, r2
   2cb14:	orreq	r2, r2, #16
   2cb18:	strbeq	r2, [r4, #52]	; 0x34
   2cb1c:	beq	2cb30 <__assert_fail@plt+0x1af8c>
   2cb20:	cmp	r1, #4
   2cb24:	ldrbeq	r2, [r4, #52]	; 0x34
   2cb28:	orreq	r2, r2, #64	; 0x40
   2cb2c:	strbeq	r2, [r4, #52]	; 0x34
   2cb30:	cmp	r7, #0
   2cb34:	beq	2caa8 <__assert_fail@plt+0x1af04>
   2cb38:	ldr	r2, [r4, #40]	; 0x28
   2cb3c:	cmp	sl, r2
   2cb40:	beq	2cc1c <__assert_fail@plt+0x1b078>
   2cb44:	tst	r7, #1
   2cb48:	bne	2ca54 <__assert_fail@plt+0x1aeb0>
   2cb4c:	tst	r7, #2
   2cb50:	beq	2ca64 <__assert_fail@plt+0x1aec0>
   2cb54:	cmp	fp, #0
   2cb58:	beq	2ca64 <__assert_fail@plt+0x1aec0>
   2cb5c:	b	2ca8c <__assert_fail@plt+0x1aee8>
   2cb60:	sub	r1, r1, #1
   2cb64:	cmp	r2, r1
   2cb68:	str	r1, [r4, #8]
   2cb6c:	bge	2caa0 <__assert_fail@plt+0x1aefc>
   2cb70:	ldr	r1, [r4, #12]
   2cb74:	add	r1, r1, r2, lsl #2
   2cb78:	ldr	r3, [r1, #4]
   2cb7c:	add	r2, r2, #1
   2cb80:	str	r3, [r1], #4
   2cb84:	ldr	r3, [r4, #8]
   2cb88:	cmp	r2, r3
   2cb8c:	blt	2cb78 <__assert_fail@plt+0x1afd4>
   2cb90:	b	2caa0 <__assert_fail@plt+0x1aefc>
   2cb94:	ldr	fp, [sp, #8]
   2cb98:	mov	r2, fp
   2cb9c:	mov	r0, r9
   2cba0:	mov	r1, r4
   2cba4:	bl	22e1c <__assert_fail@plt+0x11278>
   2cba8:	cmp	r0, #0
   2cbac:	beq	2c98c <__assert_fail@plt+0x1ade8>
   2cbb0:	ldr	r0, [r4, #24]
   2cbb4:	bl	184ec <__assert_fail@plt+0x6948>
   2cbb8:	ldr	r0, [r4, #36]	; 0x24
   2cbbc:	bl	184ec <__assert_fail@plt+0x6948>
   2cbc0:	ldr	r3, [r4, #40]	; 0x28
   2cbc4:	ldr	r2, [sp, #16]
   2cbc8:	cmp	r2, r3
   2cbcc:	beq	2cbe0 <__assert_fail@plt+0x1b03c>
   2cbd0:	ldr	r0, [r3, #8]
   2cbd4:	bl	184ec <__assert_fail@plt+0x6948>
   2cbd8:	ldr	r0, [r4, #40]	; 0x28
   2cbdc:	bl	184ec <__assert_fail@plt+0x6948>
   2cbe0:	ldr	r0, [r4, #12]
   2cbe4:	bl	184ec <__assert_fail@plt+0x6948>
   2cbe8:	ldr	r0, [r4, #48]	; 0x30
   2cbec:	bl	184ec <__assert_fail@plt+0x6948>
   2cbf0:	ldr	r0, [r4, #44]	; 0x2c
   2cbf4:	bl	184ec <__assert_fail@plt+0x6948>
   2cbf8:	mov	r0, r4
   2cbfc:	bl	184ec <__assert_fail@plt+0x6948>
   2cc00:	ldr	r2, [sp, #12]
   2cc04:	mov	r3, #12
   2cc08:	str	r3, [r2]
   2cc0c:	mov	r4, #0
   2cc10:	mov	r0, r4
   2cc14:	add	sp, sp, #28
   2cc18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc1c:	mov	r0, #12
   2cc20:	bl	36944 <__assert_fail@plt+0x24da0>
   2cc24:	subs	r1, r0, #0
   2cc28:	beq	2cbb0 <__assert_fail@plt+0x1b00c>
   2cc2c:	ldr	r0, [r8, #4]
   2cc30:	str	r1, [r4, #40]	; 0x28
   2cc34:	cmp	r0, #0
   2cc38:	str	r0, [r1, #4]
   2cc3c:	ble	2ccc8 <__assert_fail@plt+0x1b124>
   2cc40:	str	r0, [r1]
   2cc44:	lsl	r0, r0, #2
   2cc48:	str	r1, [sp, #20]
   2cc4c:	bl	36944 <__assert_fail@plt+0x24da0>
   2cc50:	ldr	r1, [sp, #20]
   2cc54:	cmp	r0, #0
   2cc58:	str	r0, [r1, #8]
   2cc5c:	beq	2ccdc <__assert_fail@plt+0x1b138>
   2cc60:	ldr	r2, [r8, #4]
   2cc64:	ldr	r1, [r8, #8]
   2cc68:	lsl	r2, r2, #2
   2cc6c:	bl	11784 <memcpy@plt>
   2cc70:	ldrb	r2, [r4, #52]	; 0x34
   2cc74:	mov	r0, #0
   2cc78:	orr	r2, r2, #128	; 0x80
   2cc7c:	strb	r2, [r4, #52]	; 0x34
   2cc80:	b	2cb44 <__assert_fail@plt+0x1afa0>
   2cc84:	add	r1, r4, #4
   2cc88:	mov	r3, #0
   2cc8c:	str	r3, [r4, #4]
   2cc90:	str	r3, [r1, #4]
   2cc94:	str	r3, [r1, #8]
   2cc98:	ldrb	r2, [r4, #52]	; 0x34
   2cc9c:	and	r3, r7, #15
   2cca0:	str	r1, [r4, #40]	; 0x28
   2cca4:	bic	r2, r2, #15
   2cca8:	orr	r3, r3, r2
   2ccac:	strb	r3, [r4, #52]	; 0x34
   2ccb0:	b	2cb98 <__assert_fail@plt+0x1aff4>
   2ccb4:	str	r0, [r4, #8]
   2ccb8:	str	r0, [r4, #4]
   2ccbc:	mov	r0, r4
   2ccc0:	bl	184ec <__assert_fail@plt+0x6948>
   2ccc4:	b	2cc00 <__assert_fail@plt+0x1b05c>
   2ccc8:	mov	r3, #0
   2cccc:	str	r3, [r1]
   2ccd0:	str	r3, [r1, #4]
   2ccd4:	str	r3, [r1, #8]
   2ccd8:	b	2cc70 <__assert_fail@plt+0x1b0cc>
   2ccdc:	mov	sl, r1
   2cce0:	str	r0, [sl, #4]
   2cce4:	str	r0, [sl]
   2cce8:	b	2cbb0 <__assert_fail@plt+0x1b00c>
   2ccec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2ccf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ccf4:	sub	sp, sp, #14464	; 0x3880
   2ccf8:	sub	sp, sp, #36	; 0x24
   2ccfc:	mov	r4, #0
   2cd00:	mov	r5, r1
   2cd04:	add	r9, sp, #2208	; 0x8a0
   2cd08:	str	r1, [sp, #72]	; 0x48
   2cd0c:	str	r0, [sp, #104]	; 0x68
   2cd10:	str	r4, [r1, #44]	; 0x2c
   2cd14:	str	r4, [r1, #48]	; 0x30
   2cd18:	mov	r0, r9
   2cd1c:	mov	r1, r4
   2cd20:	mov	r2, #32
   2cd24:	bl	119e8 <memset@plt>
   2cd28:	ldr	r1, [r5, #8]
   2cd2c:	cmp	r1, r4
   2cd30:	ble	2dc0c <__assert_fail@plt+0x1c068>
   2cd34:	str	r4, [sp, #20]
   2cd38:	str	r4, [sp, #96]	; 0x60
   2cd3c:	ldr	r3, [sp, #72]	; 0x48
   2cd40:	ldr	r0, [sp, #96]	; 0x60
   2cd44:	ldr	r2, [r3, #12]
   2cd48:	ldr	r3, [sp, #104]	; 0x68
   2cd4c:	lsl	ip, r0, #2
   2cd50:	ldr	r2, [r2, r0, lsl #2]
   2cd54:	ldr	r3, [r3]
   2cd58:	str	ip, [sp, #92]	; 0x5c
   2cd5c:	add	r0, r3, r2, lsl #3
   2cd60:	str	r0, [sp, #100]	; 0x64
   2cd64:	ldrb	ip, [r0, #4]
   2cd68:	ldr	r4, [r0, #4]
   2cd6c:	ldr	r0, [pc, #3984]	; 2dd04 <__assert_fail@plt+0x1c160>
   2cd70:	cmp	ip, #1
   2cd74:	str	ip, [sp, #28]
   2cd78:	and	r4, r0, r4, lsr #8
   2cd7c:	beq	2cf00 <__assert_fail@plt+0x1b35c>
   2cd80:	cmp	ip, #3
   2cd84:	beq	2d528 <__assert_fail@plt+0x1b984>
   2cd88:	cmp	ip, #5
   2cd8c:	beq	2d680 <__assert_fail@plt+0x1badc>
   2cd90:	cmp	ip, #7
   2cd94:	beq	2da74 <__assert_fail@plt+0x1bed0>
   2cd98:	ldr	r3, [sp, #96]	; 0x60
   2cd9c:	add	r3, r3, #1
   2cda0:	cmp	r3, r1
   2cda4:	str	r3, [sp, #96]	; 0x60
   2cda8:	blt	2cd3c <__assert_fail@plt+0x1b198>
   2cdac:	ldr	r3, [sp, #20]
   2cdb0:	cmp	r3, #0
   2cdb4:	ble	2dc08 <__assert_fail@plt+0x1c064>
   2cdb8:	add	r3, r3, #1
   2cdbc:	mov	r4, #0
   2cdc0:	lsl	r0, r3, #2
   2cdc4:	str	r3, [r9, #-2092]	; 0xfffff7d4
   2cdc8:	str	r4, [r9, #-2088]	; 0xfffff7d8
   2cdcc:	bl	36944 <__assert_fail@plt+0x24da0>
   2cdd0:	cmp	r0, r4
   2cdd4:	str	r0, [r9, #-2084]	; 0xfffff7dc
   2cdd8:	beq	2dacc <__assert_fail@plt+0x1bf28>
   2cddc:	add	r3, sp, #3232	; 0xca0
   2cde0:	str	r3, [sp, #12]
   2cde4:	mov	r6, r3
   2cde8:	add	r3, sp, #6272	; 0x1880
   2cdec:	add	r3, r3, #32
   2cdf0:	mov	r7, r3
   2cdf4:	str	r3, [sp, #28]
   2cdf8:	add	r0, sp, #128	; 0x80
   2cdfc:	add	r3, sp, #156	; 0x9c
   2ce00:	mov	r2, #32
   2ce04:	mov	r1, r4
   2ce08:	str	r3, [sp, #4]
   2ce0c:	str	r4, [sp, #24]
   2ce10:	str	r4, [r9, #-2096]	; 0xfffff7d0
   2ce14:	bl	119e8 <memset@plt>
   2ce18:	add	r3, sp, #160	; 0xa0
   2ce1c:	ldr	fp, [sp, #104]	; 0x68
   2ce20:	sub	r3, r3, #48	; 0x30
   2ce24:	mov	sl, r4
   2ce28:	add	r8, sp, #116	; 0x74
   2ce2c:	mov	r5, r7
   2ce30:	str	r3, [sp, #16]
   2ce34:	add	r3, sp, #1184	; 0x4a0
   2ce38:	str	r3, [sp]
   2ce3c:	str	r7, [sp, #32]
   2ce40:	ldr	r0, [r6, #4]
   2ce44:	mov	r3, #0
   2ce48:	cmp	r0, r3
   2ce4c:	str	r3, [r9, #-2088]	; 0xfffff7d8
   2ce50:	movgt	r5, #0
   2ce54:	strgt	r7, [sp, #8]
   2ce58:	bgt	2ce88 <__assert_fail@plt+0x1b2e4>
   2ce5c:	b	2d810 <__assert_fail@plt+0x1bc6c>
   2ce60:	mov	r1, r7
   2ce64:	mov	r0, r8
   2ce68:	bl	23dac <__assert_fail@plt+0x12208>
   2ce6c:	cmp	r0, #0
   2ce70:	str	r0, [r9, #-2096]	; 0xfffff7d0
   2ce74:	bne	2da44 <__assert_fail@plt+0x1bea0>
   2ce78:	ldr	r0, [r6, #4]
   2ce7c:	add	r5, r5, #1
   2ce80:	cmp	r5, r0
   2ce84:	bge	2d80c <__assert_fail@plt+0x1bc68>
   2ce88:	ldr	r2, [r6, #8]
   2ce8c:	ldr	r3, [fp, #12]
   2ce90:	ldr	r2, [r2, r5, lsl #2]
   2ce94:	ldr	r3, [r3, r2, lsl #2]
   2ce98:	cmn	r3, #1
   2ce9c:	beq	2ce7c <__assert_fail@plt+0x1b2d8>
   2cea0:	add	r3, r3, r3, lsl #1
   2cea4:	ldr	r2, [fp, #24]
   2cea8:	adds	r7, r2, r3, lsl #2
   2ceac:	streq	r7, [r9, #-2096]	; 0xfffff7d0
   2ceb0:	beq	2ce7c <__assert_fail@plt+0x1b2d8>
   2ceb4:	ldr	r2, [r7, #4]
   2ceb8:	cmp	r2, #0
   2cebc:	streq	r2, [r9, #-2096]	; 0xfffff7d0
   2cec0:	beq	2ce7c <__assert_fail@plt+0x1b2d8>
   2cec4:	ldr	r1, [r9, #-2088]	; 0xfffff7d8
   2cec8:	ldr	r4, [r9, #-2092]	; 0xfffff7d4
   2cecc:	add	r1, r1, r2, lsl #1
   2ced0:	cmp	r4, r1
   2ced4:	bge	2ce60 <__assert_fail@plt+0x1b2bc>
   2ced8:	add	r2, r2, r4
   2cedc:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2cee0:	lsl	r1, r2, #3
   2cee4:	lsl	r4, r2, #1
   2cee8:	bl	36970 <__assert_fail@plt+0x24dcc>
   2ceec:	cmp	r0, #0
   2cef0:	beq	2daa8 <__assert_fail@plt+0x1bf04>
   2cef4:	str	r0, [r9, #-2084]	; 0xfffff7dc
   2cef8:	str	r4, [r9, #-2092]	; 0xfffff7d4
   2cefc:	b	2ce60 <__assert_fail@plt+0x1b2bc>
   2cf00:	ldrb	r3, [r3, r2, lsl #3]
   2cf04:	and	r1, r3, #31
   2cf08:	asr	r3, r3, #5
   2cf0c:	ldr	r2, [r9, r3, lsl #2]
   2cf10:	orr	r2, r2, ip, lsl r1
   2cf14:	str	r2, [r9, r3, lsl #2]
   2cf18:	cmp	r4, #0
   2cf1c:	beq	2d170 <__assert_fail@plt+0x1b5cc>
   2cf20:	tst	r4, #32
   2cf24:	bne	2d740 <__assert_fail@plt+0x1bb9c>
   2cf28:	tst	r4, #128	; 0x80
   2cf2c:	bne	2d5c0 <__assert_fail@plt+0x1ba1c>
   2cf30:	tst	r4, #4
   2cf34:	beq	2d060 <__assert_fail@plt+0x1b4bc>
   2cf38:	ldr	r3, [sp, #28]
   2cf3c:	cmp	r3, #1
   2cf40:	beq	2dab8 <__assert_fail@plt+0x1bf14>
   2cf44:	ldr	r3, [sp, #104]	; 0x68
   2cf48:	ldr	r3, [r3, #92]	; 0x5c
   2cf4c:	cmp	r3, #1
   2cf50:	ble	2db50 <__assert_fail@plt+0x1bfac>
   2cf54:	ldr	r6, [sp, #104]	; 0x68
   2cf58:	ldr	r3, [r6, #60]	; 0x3c
   2cf5c:	ldr	r0, [r6, #96]	; 0x60
   2cf60:	ldr	r2, [r6, #100]	; 0x64
   2cf64:	ldr	lr, [r3]
   2cf68:	ldr	r1, [r3, #4]
   2cf6c:	mvn	lr, lr
   2cf70:	orr	lr, lr, r0
   2cf74:	ldr	r0, [r9]
   2cf78:	mvn	r1, r1
   2cf7c:	and	lr, lr, r0
   2cf80:	ldr	r0, [r9, #4]
   2cf84:	orr	r1, r1, r2
   2cf88:	ldr	r2, [r3, #8]
   2cf8c:	and	r1, r1, r0
   2cf90:	ldr	ip, [r3, #12]
   2cf94:	ldr	r0, [r6, #104]	; 0x68
   2cf98:	mvn	r2, r2
   2cf9c:	orr	r2, r2, r0
   2cfa0:	mvn	r0, ip
   2cfa4:	ldr	ip, [r9, #8]
   2cfa8:	str	lr, [r9]
   2cfac:	and	r2, r2, ip
   2cfb0:	ldr	ip, [r6, #108]	; 0x6c
   2cfb4:	orr	lr, lr, r1
   2cfb8:	str	r1, [r9, #4]
   2cfbc:	ldr	r1, [r9, #12]
   2cfc0:	orr	r0, r0, ip
   2cfc4:	ldr	ip, [r3, #16]
   2cfc8:	and	r1, r1, r0
   2cfcc:	orr	lr, lr, r2
   2cfd0:	ldr	r0, [r3, #20]
   2cfd4:	str	r2, [r9, #8]
   2cfd8:	ldr	r2, [r6, #112]	; 0x70
   2cfdc:	mvn	ip, ip
   2cfe0:	orr	ip, ip, r2
   2cfe4:	mvn	r2, r0
   2cfe8:	ldr	r0, [r9, #16]
   2cfec:	orr	lr, lr, r1
   2cff0:	and	ip, ip, r0
   2cff4:	ldr	r0, [r6, #116]	; 0x74
   2cff8:	str	r1, [r9, #12]
   2cffc:	orr	r2, r2, r0
   2d000:	ldr	r0, [r3, #24]
   2d004:	ldr	r3, [r3, #28]
   2d008:	mvn	r0, r0
   2d00c:	mvn	r5, r3
   2d010:	ldr	r3, [r9, #20]
   2d014:	ldr	r1, [r9, #28]
   2d018:	and	r2, r2, r3
   2d01c:	ldr	r3, [r6, #120]	; 0x78
   2d020:	orr	lr, lr, ip
   2d024:	orr	r0, r0, r3
   2d028:	ldr	r3, [r9, #24]
   2d02c:	orr	lr, lr, r2
   2d030:	and	r0, r0, r3
   2d034:	ldr	r3, [r6, #124]	; 0x7c
   2d038:	orr	lr, lr, r0
   2d03c:	orr	r3, r5, r3
   2d040:	and	r3, r3, r1
   2d044:	str	r2, [r9, #20]
   2d048:	orr	r2, lr, r3
   2d04c:	str	ip, [r9, #16]
   2d050:	str	r0, [r9, #24]
   2d054:	str	r3, [r9, #28]
   2d058:	cmp	r2, #0
   2d05c:	beq	2d5d0 <__assert_fail@plt+0x1ba2c>
   2d060:	tst	r4, #8
   2d064:	beq	2d170 <__assert_fail@plt+0x1b5cc>
   2d068:	ldr	r3, [sp, #28]
   2d06c:	cmp	r3, #1
   2d070:	beq	2d5b0 <__assert_fail@plt+0x1ba0c>
   2d074:	ldr	r3, [sp, #104]	; 0x68
   2d078:	ldr	r4, [sp, #104]	; 0x68
   2d07c:	ldr	r3, [r3, #92]	; 0x5c
   2d080:	cmp	r3, #1
   2d084:	ble	2d76c <__assert_fail@plt+0x1bbc8>
   2d088:	ldr	r1, [r4, #60]	; 0x3c
   2d08c:	ldr	r0, [r4, #96]	; 0x60
   2d090:	ldr	ip, [r4, #100]	; 0x64
   2d094:	ldr	r3, [r1]
   2d098:	ldr	r2, [r1, #4]
   2d09c:	and	r3, r3, r0
   2d0a0:	and	r2, r2, ip
   2d0a4:	ldr	r0, [r9]
   2d0a8:	ldr	ip, [r9, #4]
   2d0ac:	bic	r3, r0, r3
   2d0b0:	bic	r2, ip, r2
   2d0b4:	ldr	r0, [r1, #8]
   2d0b8:	ldr	ip, [r4, #104]	; 0x68
   2d0bc:	ldr	lr, [r1, #12]
   2d0c0:	and	r0, r0, ip
   2d0c4:	ldr	ip, [r9, #8]
   2d0c8:	str	r3, [r9]
   2d0cc:	bic	r0, ip, r0
   2d0d0:	ldr	ip, [r4, #108]	; 0x6c
   2d0d4:	orr	r3, r3, r2
   2d0d8:	and	ip, ip, lr
   2d0dc:	ldr	lr, [r9, #12]
   2d0e0:	str	r2, [r9, #4]
   2d0e4:	bic	ip, lr, ip
   2d0e8:	ldr	r2, [r4, #112]	; 0x70
   2d0ec:	ldr	lr, [r1, #16]
   2d0f0:	orr	r3, r3, r0
   2d0f4:	and	r2, r2, lr
   2d0f8:	ldr	lr, [r9, #16]
   2d0fc:	str	r0, [r9, #8]
   2d100:	bic	r2, lr, r2
   2d104:	ldr	r0, [r4, #116]	; 0x74
   2d108:	ldr	lr, [r1, #20]
   2d10c:	orr	r3, r3, ip
   2d110:	and	r0, r0, lr
   2d114:	ldr	lr, [r9, #20]
   2d118:	str	ip, [r9, #12]
   2d11c:	bic	r0, lr, r0
   2d120:	ldr	ip, [r1, #28]
   2d124:	ldr	lr, [r1, #24]
   2d128:	ldr	r1, [r4, #120]	; 0x78
   2d12c:	orr	r3, r3, r2
   2d130:	str	r2, [r9, #16]
   2d134:	ldr	r2, [r4, #124]	; 0x7c
   2d138:	and	r1, r1, lr
   2d13c:	ldr	lr, [r9, #24]
   2d140:	and	ip, ip, r2
   2d144:	ldr	r2, [r9, #28]
   2d148:	bic	r1, lr, r1
   2d14c:	orr	r3, r3, r0
   2d150:	bic	r2, r2, ip
   2d154:	orr	r3, r3, r1
   2d158:	orr	r3, r3, r2
   2d15c:	str	r0, [r9, #20]
   2d160:	str	r1, [r9, #24]
   2d164:	str	r2, [r9, #28]
   2d168:	cmp	r3, #0
   2d16c:	beq	2d5d0 <__assert_fail@plt+0x1ba2c>
   2d170:	ldr	r3, [sp, #20]
   2d174:	cmp	r3, #0
   2d178:	movle	r3, #0
   2d17c:	strle	r3, [sp, #4]
   2d180:	ble	2d5dc <__assert_fail@plt+0x1ba38>
   2d184:	add	r3, sp, #6272	; 0x1880
   2d188:	add	r3, r3, #32
   2d18c:	str	r3, [sp, #108]	; 0x6c
   2d190:	mov	r4, r3
   2d194:	add	r3, sp, #3232	; 0xca0
   2d198:	str	r3, [sp]
   2d19c:	mov	r3, #0
   2d1a0:	str	r3, [sp, #4]
   2d1a4:	b	2d480 <__assert_fail@plt+0x1b8dc>
   2d1a8:	ldr	sl, [r9]
   2d1ac:	ldr	fp, [r4]
   2d1b0:	ldr	r7, [r9, #4]
   2d1b4:	ldr	r8, [r4, #4]
   2d1b8:	ldr	r1, [r9, #12]
   2d1bc:	ldr	r5, [r9, #8]
   2d1c0:	ldr	r6, [r4, #8]
   2d1c4:	and	r2, r7, r8
   2d1c8:	and	r3, sl, fp
   2d1cc:	mov	r0, r1
   2d1d0:	ldr	lr, [r4, #12]
   2d1d4:	and	r1, r5, r6
   2d1d8:	str	r3, [sp, #44]	; 0x2c
   2d1dc:	orr	r3, r3, r2
   2d1e0:	ldr	ip, [r4, #16]
   2d1e4:	str	r1, [sp, #52]	; 0x34
   2d1e8:	orr	r3, r3, r1
   2d1ec:	ldr	r1, [r9, #20]
   2d1f0:	str	r0, [sp, #32]
   2d1f4:	and	r0, r0, lr
   2d1f8:	str	ip, [sp, #8]
   2d1fc:	mov	ip, r0
   2d200:	mov	r0, r1
   2d204:	ldr	r1, [r4, #20]
   2d208:	str	r0, [sp, #40]	; 0x28
   2d20c:	and	r0, r0, r1
   2d210:	str	r0, [sp, #24]
   2d214:	ldr	r0, [r9, #28]
   2d218:	str	r2, [sp, #48]	; 0x30
   2d21c:	str	ip, [sp, #56]	; 0x38
   2d220:	ldr	r2, [r9, #16]
   2d224:	orr	r3, r3, ip
   2d228:	ldr	ip, [sp, #8]
   2d22c:	str	r0, [sp, #16]
   2d230:	ldr	r0, [r4, #28]
   2d234:	and	ip, r2, ip
   2d238:	str	r2, [sp, #36]	; 0x24
   2d23c:	ldr	r2, [r9, #24]
   2d240:	str	ip, [sp, #60]	; 0x3c
   2d244:	orr	r3, r3, ip
   2d248:	mov	ip, r0
   2d24c:	ldr	r0, [sp, #24]
   2d250:	str	r2, [sp, #12]
   2d254:	orr	r3, r3, r0
   2d258:	ldr	r2, [r4, #24]
   2d25c:	ldr	r0, [sp, #12]
   2d260:	and	r0, r0, r2
   2d264:	orr	r3, r3, r0
   2d268:	str	r0, [sp, #64]	; 0x40
   2d26c:	ldr	r0, [sp, #16]
   2d270:	and	r0, r0, ip
   2d274:	orrs	r3, r3, r0
   2d278:	str	r0, [sp, #68]	; 0x44
   2d27c:	beq	2d458 <__assert_fail@plt+0x1b8b4>
   2d280:	bic	r0, r8, r7
   2d284:	bic	r3, fp, sl
   2d288:	bic	r7, r7, r8
   2d28c:	str	r3, [sp, #76]	; 0x4c
   2d290:	bic	r8, r6, r5
   2d294:	orr	r3, r3, r0
   2d298:	bic	sl, sl, fp
   2d29c:	orr	r3, r3, r8
   2d2a0:	str	r8, [sp, #84]	; 0x54
   2d2a4:	ldr	r8, [sp, #32]
   2d2a8:	bic	r6, r5, r6
   2d2ac:	orr	r5, sl, r7
   2d2b0:	bic	fp, lr, r8
   2d2b4:	orr	r5, r5, r6
   2d2b8:	bic	lr, r8, lr
   2d2bc:	str	lr, [sp, #32]
   2d2c0:	orr	r5, r5, lr
   2d2c4:	str	r0, [sp, #80]	; 0x50
   2d2c8:	ldr	lr, [sp, #36]	; 0x24
   2d2cc:	ldr	r0, [sp, #8]
   2d2d0:	orr	r3, r3, fp
   2d2d4:	bic	r8, r0, lr
   2d2d8:	bic	r0, lr, r0
   2d2dc:	ldr	lr, [sp, #40]	; 0x28
   2d2e0:	orr	r3, r3, r8
   2d2e4:	str	r8, [sp, #8]
   2d2e8:	ldr	r8, [sp, #12]
   2d2ec:	str	fp, [sp, #88]	; 0x58
   2d2f0:	str	sl, [r9]
   2d2f4:	bic	fp, r1, lr
   2d2f8:	ldr	sl, [sp, #16]
   2d2fc:	bic	r1, lr, r1
   2d300:	orr	r3, r3, fp
   2d304:	bic	lr, r2, r8
   2d308:	orr	r3, r3, lr
   2d30c:	bic	r2, r8, r2
   2d310:	orr	r5, r5, r0
   2d314:	bic	r8, ip, sl
   2d318:	orr	r5, r5, r1
   2d31c:	orrs	r3, r3, r8
   2d320:	bic	r3, sl, ip
   2d324:	ldr	ip, [sp, #32]
   2d328:	orr	r5, r5, r2
   2d32c:	str	r7, [r9, #4]
   2d330:	str	r6, [r9, #8]
   2d334:	str	ip, [r9, #12]
   2d338:	str	r0, [r9, #16]
   2d33c:	str	r1, [r9, #20]
   2d340:	str	r2, [r9, #24]
   2d344:	orr	r5, r5, r3
   2d348:	str	r3, [r9, #28]
   2d34c:	beq	2d430 <__assert_fail@plt+0x1b88c>
   2d350:	ldr	sl, [sp, #20]
   2d354:	ldr	r3, [sp, #108]	; 0x6c
   2d358:	ldr	r6, [sp, #76]	; 0x4c
   2d35c:	ldr	r1, [sp]
   2d360:	str	r6, [r3, sl, lsl #5]
   2d364:	add	r3, r3, sl, lsl #5
   2d368:	ldr	r6, [sp, #80]	; 0x50
   2d36c:	add	ip, sl, sl, lsl #1
   2d370:	str	r6, [r3, #4]
   2d374:	ldr	r6, [sp, #84]	; 0x54
   2d378:	add	r7, sp, #3232	; 0xca0
   2d37c:	str	r6, [r3, #8]
   2d380:	ldr	r6, [sp, #88]	; 0x58
   2d384:	str	fp, [r3, #20]
   2d388:	str	r6, [r3, #12]
   2d38c:	ldr	r6, [sp, #8]
   2d390:	str	lr, [r3, #24]
   2d394:	str	r6, [r3, #16]
   2d398:	str	r8, [r3, #28]
   2d39c:	ldr	r2, [r1, #4]
   2d3a0:	ldr	r3, [sp, #44]	; 0x2c
   2d3a4:	ldr	r0, [sp, #56]	; 0x38
   2d3a8:	add	r7, r7, ip, lsl #2
   2d3ac:	str	r3, [r4]
   2d3b0:	str	r2, [r7, #4]
   2d3b4:	ldr	r3, [sp, #48]	; 0x30
   2d3b8:	ldr	r1, [r1, #4]
   2d3bc:	str	r0, [r4, #12]
   2d3c0:	ldr	r0, [sp, #24]
   2d3c4:	str	r3, [r4, #4]
   2d3c8:	str	r0, [r4, #20]
   2d3cc:	ldr	r3, [sp, #60]	; 0x3c
   2d3d0:	ldr	r0, [sp, #64]	; 0x40
   2d3d4:	cmp	r1, #0
   2d3d8:	ldr	r1, [sp, #52]	; 0x34
   2d3dc:	str	r3, [r4, #16]
   2d3e0:	str	r1, [r4, #8]
   2d3e4:	str	r0, [r4, #24]
   2d3e8:	ldr	r0, [sp, #68]	; 0x44
   2d3ec:	str	r0, [r4, #28]
   2d3f0:	ble	2d4cc <__assert_fail@plt+0x1b928>
   2d3f4:	add	r3, sp, #3232	; 0xca0
   2d3f8:	lsl	r0, r2, #2
   2d3fc:	str	r2, [r3, ip, lsl #2]
   2d400:	bl	36944 <__assert_fail@plt+0x24da0>
   2d404:	cmp	r0, #0
   2d408:	str	r0, [r7, #8]
   2d40c:	beq	2d4e8 <__assert_fail@plt+0x1b944>
   2d410:	ldr	r3, [sp]
   2d414:	ldr	r2, [r3, #4]
   2d418:	ldr	r1, [r3, #8]
   2d41c:	lsl	r2, r2, #2
   2d420:	bl	11784 <memcpy@plt>
   2d424:	ldr	r3, [sp, #20]
   2d428:	add	r3, r3, #1
   2d42c:	str	r3, [sp, #20]
   2d430:	ldr	r3, [sp, #72]	; 0x48
   2d434:	ldr	r2, [sp, #92]	; 0x5c
   2d438:	ldr	r0, [sp]
   2d43c:	ldr	r3, [r3, #12]
   2d440:	ldr	r1, [r3, r2]
   2d444:	bl	23828 <__assert_fail@plt+0x11c84>
   2d448:	cmp	r0, #0
   2d44c:	beq	2d4f4 <__assert_fail@plt+0x1b950>
   2d450:	cmp	r5, #0
   2d454:	beq	2d5dc <__assert_fail@plt+0x1ba38>
   2d458:	ldr	r3, [sp, #4]
   2d45c:	ldr	r2, [sp, #20]
   2d460:	add	r3, r3, #1
   2d464:	str	r3, [sp, #4]
   2d468:	cmp	r3, r2
   2d46c:	ldr	r3, [sp]
   2d470:	add	r4, r4, #32
   2d474:	add	r3, r3, #12
   2d478:	str	r3, [sp]
   2d47c:	bge	2d5dc <__assert_fail@plt+0x1ba38>
   2d480:	ldr	r3, [sp, #28]
   2d484:	cmp	r3, #1
   2d488:	bne	2d1a8 <__assert_fail@plt+0x1b604>
   2d48c:	ldr	r3, [sp, #100]	; 0x64
   2d490:	ldrb	r1, [r3]
   2d494:	ldr	r3, [sp, #4]
   2d498:	and	r2, r1, #31
   2d49c:	asr	r1, r1, #5
   2d4a0:	lsl	r3, r3, #5
   2d4a4:	add	r3, r3, r1, lsl #2
   2d4a8:	add	r1, sp, #14464	; 0x3880
   2d4ac:	add	r1, r1, #32
   2d4b0:	add	r3, r1, r3
   2d4b4:	sub	r3, r3, #8192	; 0x2000
   2d4b8:	ldr	r3, [r3]
   2d4bc:	lsr	r2, r3, r2
   2d4c0:	tst	r2, #1
   2d4c4:	beq	2d458 <__assert_fail@plt+0x1b8b4>
   2d4c8:	b	2d1a8 <__assert_fail@plt+0x1b604>
   2d4cc:	add	r3, sp, #3232	; 0xca0
   2d4d0:	mov	r2, #0
   2d4d4:	str	r2, [r3, ip, lsl #2]
   2d4d8:	str	r2, [r7, #4]
   2d4dc:	str	r2, [r7, #8]
   2d4e0:	mov	r3, sl
   2d4e4:	b	2d428 <__assert_fail@plt+0x1b884>
   2d4e8:	mov	r2, r7
   2d4ec:	str	r0, [r2, #4]
   2d4f0:	str	r0, [r2]
   2d4f4:	ldr	r6, [sp, #20]
   2d4f8:	add	r4, sp, #3232	; 0xca0
   2d4fc:	mov	r5, #0
   2d500:	ldr	r0, [r4, #8]
   2d504:	add	r5, r5, #1
   2d508:	bl	184ec <__assert_fail@plt+0x6948>
   2d50c:	cmp	r5, r6
   2d510:	add	r4, r4, #12
   2d514:	bne	2d500 <__assert_fail@plt+0x1b95c>
   2d518:	mov	r0, #0
   2d51c:	add	sp, sp, #14464	; 0x3880
   2d520:	add	sp, sp, #36	; 0x24
   2d524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d528:	ldr	r3, [r3, r2, lsl #3]
   2d52c:	ldr	ip, [r9]
   2d530:	ldr	r0, [r9, #4]
   2d534:	ldr	r1, [r3, #4]
   2d538:	ldr	r2, [r3]
   2d53c:	orr	r0, r0, r1
   2d540:	orr	r2, ip, r2
   2d544:	ldr	r1, [r3, #8]
   2d548:	ldr	ip, [r9, #8]
   2d54c:	str	r2, [r9]
   2d550:	orr	r1, ip, r1
   2d554:	ldr	r2, [r3, #12]
   2d558:	ldr	ip, [r9, #12]
   2d55c:	str	r0, [r9, #4]
   2d560:	orr	r2, ip, r2
   2d564:	ldr	r0, [r3, #16]
   2d568:	ldr	ip, [r9, #16]
   2d56c:	str	r1, [r9, #8]
   2d570:	orr	r0, ip, r0
   2d574:	ldr	r1, [r3, #20]
   2d578:	ldr	ip, [r9, #20]
   2d57c:	str	r2, [r9, #12]
   2d580:	orr	r1, ip, r1
   2d584:	ldr	r2, [r3, #24]
   2d588:	ldr	ip, [r3, #28]
   2d58c:	ldr	r3, [r9, #24]
   2d590:	str	r0, [r9, #16]
   2d594:	orr	r2, r3, r2
   2d598:	ldr	r3, [r9, #28]
   2d59c:	str	r1, [r9, #20]
   2d5a0:	orr	r3, r3, ip
   2d5a4:	str	r2, [r9, #24]
   2d5a8:	str	r3, [r9, #28]
   2d5ac:	b	2cf18 <__assert_fail@plt+0x1b374>
   2d5b0:	ldr	r3, [sp, #100]	; 0x64
   2d5b4:	ldrb	r3, [r3, #6]
   2d5b8:	tst	r3, #64	; 0x40
   2d5bc:	beq	2d074 <__assert_fail@plt+0x1b4d0>
   2d5c0:	mov	r2, #32
   2d5c4:	mov	r1, #0
   2d5c8:	mov	r0, r9
   2d5cc:	bl	119e8 <memset@plt>
   2d5d0:	ldr	r3, [sp, #72]	; 0x48
   2d5d4:	ldr	r1, [r3, #8]
   2d5d8:	b	2cd98 <__assert_fail@plt+0x1b1f4>
   2d5dc:	ldr	r3, [sp, #20]
   2d5e0:	ldr	r2, [sp, #4]
   2d5e4:	cmp	r3, r2
   2d5e8:	bne	2d5d0 <__assert_fail@plt+0x1ba2c>
   2d5ec:	mov	lr, r9
   2d5f0:	mov	r4, r3
   2d5f4:	add	r5, sp, #14464	; 0x3880
   2d5f8:	ldm	lr!, {r0, r1, r2, r3}
   2d5fc:	add	r5, r5, #32
   2d600:	add	ip, r5, r4, lsl #5
   2d604:	sub	ip, ip, #8192	; 0x2000
   2d608:	add	r5, r4, r4, lsl #1
   2d60c:	stmia	ip!, {r0, r1, r2, r3}
   2d610:	add	r3, sp, #3232	; 0xca0
   2d614:	add	r4, r3, r5, lsl #2
   2d618:	ldm	lr, {r0, r1, r2, r3}
   2d61c:	ldr	lr, [sp, #72]	; 0x48
   2d620:	stm	ip, {r0, r1, r2, r3}
   2d624:	mov	r2, #1
   2d628:	ldr	r3, [sp, #92]	; 0x5c
   2d62c:	ldr	lr, [lr, #12]
   2d630:	mov	r0, #4
   2d634:	ldr	r6, [lr, r3]
   2d638:	add	r3, sp, #3232	; 0xca0
   2d63c:	str	r2, [r3, r5, lsl #2]
   2d640:	str	r2, [r4, #4]
   2d644:	bl	36944 <__assert_fail@plt+0x24da0>
   2d648:	cmp	r0, #0
   2d64c:	str	r0, [r4, #8]
   2d650:	beq	2dc2c <__assert_fail@plt+0x1c088>
   2d654:	mov	r1, #0
   2d658:	str	r6, [r0]
   2d65c:	mov	r2, #32
   2d660:	mov	r0, r9
   2d664:	bl	119e8 <memset@plt>
   2d668:	ldr	r3, [sp, #72]	; 0x48
   2d66c:	ldr	r1, [r3, #8]
   2d670:	ldr	r3, [sp, #20]
   2d674:	add	r3, r3, #1
   2d678:	str	r3, [sp, #20]
   2d67c:	b	2cd98 <__assert_fail@plt+0x1b1f4>
   2d680:	ldr	r2, [sp, #104]	; 0x68
   2d684:	ldr	r3, [r2, #92]	; 0x5c
   2d688:	cmp	r3, #1
   2d68c:	ble	2dbf4 <__assert_fail@plt+0x1c050>
   2d690:	ldr	r2, [r2, #60]	; 0x3c
   2d694:	ldr	ip, [r9]
   2d698:	ldr	r1, [r9, #4]
   2d69c:	ldm	r2, {r0, r3}
   2d6a0:	orr	r0, ip, r0
   2d6a4:	orr	r3, r1, r3
   2d6a8:	ldr	ip, [r9, #8]
   2d6ac:	ldr	r1, [r2, #8]
   2d6b0:	str	r0, [r9]
   2d6b4:	orr	r1, ip, r1
   2d6b8:	ldr	r0, [r2, #12]
   2d6bc:	ldr	ip, [r9, #12]
   2d6c0:	str	r3, [r9, #4]
   2d6c4:	orr	r0, ip, r0
   2d6c8:	ldr	r3, [r2, #16]
   2d6cc:	ldr	ip, [r9, #16]
   2d6d0:	str	r1, [r9, #8]
   2d6d4:	orr	r3, ip, r3
   2d6d8:	ldr	r1, [r2, #20]
   2d6dc:	ldr	ip, [r9, #20]
   2d6e0:	str	r0, [r9, #12]
   2d6e4:	orr	r1, ip, r1
   2d6e8:	ldr	r0, [r2, #28]
   2d6ec:	ldr	ip, [r2, #24]
   2d6f0:	str	r3, [r9, #16]
   2d6f4:	ldr	r2, [r9, #24]
   2d6f8:	ldr	r3, [r9, #28]
   2d6fc:	orr	r2, r2, ip
   2d700:	orr	r3, r3, r0
   2d704:	str	r1, [r9, #20]
   2d708:	str	r2, [r9, #24]
   2d70c:	str	r3, [r9, #28]
   2d710:	ldr	r3, [sp, #104]	; 0x68
   2d714:	ldr	r3, [r3, #128]	; 0x80
   2d718:	tst	r3, #64	; 0x40
   2d71c:	ldreq	r2, [r9]
   2d720:	biceq	r2, r2, #1024	; 0x400
   2d724:	streq	r2, [r9]
   2d728:	tst	r3, #128	; 0x80
   2d72c:	beq	2cf18 <__assert_fail@plt+0x1b374>
   2d730:	ldr	r3, [r9]
   2d734:	bic	r3, r3, #1
   2d738:	str	r3, [r9]
   2d73c:	b	2cf18 <__assert_fail@plt+0x1b374>
   2d740:	ldr	r5, [r9]
   2d744:	mov	r2, #32
   2d748:	and	r5, r5, #1024	; 0x400
   2d74c:	mov	r1, #0
   2d750:	mov	r0, r9
   2d754:	bl	119e8 <memset@plt>
   2d758:	cmp	r5, #0
   2d75c:	beq	2d5d0 <__assert_fail@plt+0x1ba2c>
   2d760:	mov	r3, #1024	; 0x400
   2d764:	str	r3, [r9]
   2d768:	b	2cf28 <__assert_fail@plt+0x1b384>
   2d76c:	ldr	r2, [r4, #96]	; 0x60
   2d770:	ldr	r3, [r9]
   2d774:	ldr	r1, [r4, #100]	; 0x64
   2d778:	ldr	r0, [r9, #4]
   2d77c:	bic	r3, r3, r2
   2d780:	bic	r0, r0, r1
   2d784:	ldr	r2, [r4, #104]	; 0x68
   2d788:	ldr	r1, [r9, #8]
   2d78c:	ldr	ip, [r9, #12]
   2d790:	bic	r1, r1, r2
   2d794:	ldr	r2, [r4, #108]	; 0x6c
   2d798:	ldr	lr, [r9, #16]
   2d79c:	bic	ip, ip, r2
   2d7a0:	ldr	r2, [r4, #112]	; 0x70
   2d7a4:	str	r3, [r9]
   2d7a8:	bic	r2, lr, r2
   2d7ac:	orr	r3, r3, r0
   2d7b0:	ldr	lr, [r9, #20]
   2d7b4:	str	r0, [r9, #4]
   2d7b8:	ldr	r0, [r4, #116]	; 0x74
   2d7bc:	orr	r3, r3, r1
   2d7c0:	bic	r0, lr, r0
   2d7c4:	orr	r3, r3, ip
   2d7c8:	ldr	lr, [r9, #24]
   2d7cc:	str	r1, [r9, #8]
   2d7d0:	ldr	r1, [r4, #120]	; 0x78
   2d7d4:	orr	r3, r3, r2
   2d7d8:	str	ip, [r9, #12]
   2d7dc:	str	r2, [r9, #16]
   2d7e0:	ldr	ip, [r4, #124]	; 0x7c
   2d7e4:	ldr	r2, [r9, #28]
   2d7e8:	bic	r1, lr, r1
   2d7ec:	orr	r3, r3, r0
   2d7f0:	bic	r2, r2, ip
   2d7f4:	orr	r3, r3, r1
   2d7f8:	str	r0, [r9, #20]
   2d7fc:	str	r1, [r9, #24]
   2d800:	orr	r3, r3, r2
   2d804:	str	r2, [r9, #28]
   2d808:	b	2d168 <__assert_fail@plt+0x1b5c4>
   2d80c:	ldr	r7, [sp, #8]
   2d810:	mov	r3, #0
   2d814:	mov	r2, r8
   2d818:	mov	r1, fp
   2d81c:	ldr	r0, [sp, #16]
   2d820:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2d824:	ldr	r3, [sp, #4]
   2d828:	cmp	r0, #0
   2d82c:	str	r0, [r3, #4]!
   2d830:	mov	r4, r0
   2d834:	str	r3, [sp, #4]
   2d838:	beq	2da38 <__assert_fail@plt+0x1be94>
   2d83c:	ldrsb	r3, [r4, #52]	; 0x34
   2d840:	cmp	r3, #0
   2d844:	blt	2dae0 <__assert_fail@plt+0x1bf3c>
   2d848:	ldr	r3, [sp]
   2d84c:	str	r4, [r9, sl, lsl #2]
   2d850:	str	r4, [r3]
   2d854:	ldr	r3, [r7, #4]
   2d858:	ldr	r0, [r9, #-2076]	; 0xfffff7e4
   2d85c:	ldr	r1, [sp, #20]
   2d860:	add	sl, sl, #1
   2d864:	ldr	r2, [r7]
   2d868:	orr	r0, r0, r3
   2d86c:	ldr	r4, [r9, #-2080]	; 0xfffff7e0
   2d870:	ldr	r3, [r7, #8]
   2d874:	cmp	sl, r1
   2d878:	ldr	r1, [r9, #-2072]	; 0xfffff7e8
   2d87c:	orr	r4, r4, r2
   2d880:	orr	r1, r1, r3
   2d884:	ldr	r2, [r9, #-2068]	; 0xfffff7ec
   2d888:	ldr	r3, [r7, #12]
   2d88c:	str	r0, [r9, #-2076]	; 0xfffff7e4
   2d890:	orr	r2, r2, r3
   2d894:	ldr	r3, [sp]
   2d898:	ldr	r0, [r9, #-2060]	; 0xfffff7f4
   2d89c:	add	r3, r3, #4
   2d8a0:	str	r1, [r9, #-2072]	; 0xfffff7e8
   2d8a4:	ldr	r1, [r7, #20]
   2d8a8:	ldr	ip, [r9, #-2064]	; 0xfffff7f0
   2d8ac:	str	r3, [sp]
   2d8b0:	ldr	r3, [r7, #16]
   2d8b4:	orr	r1, r0, r1
   2d8b8:	str	r2, [r9, #-2068]	; 0xfffff7ec
   2d8bc:	ldr	r0, [r7, #24]
   2d8c0:	ldr	r2, [r9, #-2056]	; 0xfffff7f8
   2d8c4:	orr	r3, ip, r3
   2d8c8:	orr	r2, r2, r0
   2d8cc:	str	r3, [r9, #-2064]	; 0xfffff7f0
   2d8d0:	ldr	r0, [r7, #28]
   2d8d4:	ldr	r3, [r9, #-2052]	; 0xfffff7fc
   2d8d8:	add	r6, r6, #12
   2d8dc:	orr	r3, r3, r0
   2d8e0:	str	r4, [r9, #-2080]	; 0xfffff7e0
   2d8e4:	str	r1, [r9, #-2060]	; 0xfffff7f4
   2d8e8:	str	r2, [r9, #-2056]	; 0xfffff7f8
   2d8ec:	str	r3, [r9, #-2052]	; 0xfffff7fc
   2d8f0:	add	r7, r7, #32
   2d8f4:	bne	2ce40 <__assert_fail@plt+0x1b29c>
   2d8f8:	ldr	r3, [sp, #24]
   2d8fc:	ldr	r5, [sp, #32]
   2d900:	cmp	r3, #0
   2d904:	bne	2dc5c <__assert_fail@plt+0x1c0b8>
   2d908:	mov	r1, #256	; 0x100
   2d90c:	mov	r0, #4
   2d910:	bl	368fc <__assert_fail@plt+0x24d58>
   2d914:	ldr	r3, [sp, #72]	; 0x48
   2d918:	cmp	r0, #0
   2d91c:	str	r0, [r3, #44]	; 0x2c
   2d920:	beq	2da44 <__assert_fail@plt+0x1bea0>
   2d924:	ldr	r3, [sp, #104]	; 0x68
   2d928:	add	r8, sp, #128	; 0x80
   2d92c:	add	r6, r3, #96	; 0x60
   2d930:	mov	r7, r0
   2d934:	add	fp, r0, #1024	; 0x400
   2d938:	ldr	r1, [r8], #4
   2d93c:	cmp	r1, #0
   2d940:	movne	ip, r7
   2d944:	movne	r2, #1
   2d948:	bne	2d960 <__assert_fail@plt+0x1bdbc>
   2d94c:	b	2d9ac <__assert_fail@plt+0x1be08>
   2d950:	lsrs	r1, r1, #1
   2d954:	lsl	r2, r2, #1
   2d958:	add	ip, ip, #4
   2d95c:	beq	2d9ac <__assert_fail@plt+0x1be08>
   2d960:	tst	r1, #1
   2d964:	beq	2d950 <__assert_fail@plt+0x1bdac>
   2d968:	ldr	r3, [r5]
   2d96c:	ands	r3, r2, r3
   2d970:	bne	2dc54 <__assert_fail@plt+0x1c0b0>
   2d974:	add	r3, r3, #1
   2d978:	ldr	lr, [r5, r3, lsl #5]
   2d97c:	tst	r2, lr
   2d980:	beq	2d974 <__assert_fail@plt+0x1bdd0>
   2d984:	ldr	lr, [r6]
   2d988:	add	r3, r9, r3, lsl #2
   2d98c:	tst	r2, lr
   2d990:	add	ip, ip, #4
   2d994:	ldrne	r3, [r3, #-1024]	; 0xfffffc00
   2d998:	ldreq	r3, [r3, #-2048]	; 0xfffff800
   2d99c:	lsrs	r1, r1, #1
   2d9a0:	str	r3, [ip, #-4]
   2d9a4:	lsl	r2, r2, #1
   2d9a8:	bne	2d960 <__assert_fail@plt+0x1bdbc>
   2d9ac:	add	r7, r7, #128	; 0x80
   2d9b0:	cmp	fp, r7
   2d9b4:	add	r6, r6, #4
   2d9b8:	add	r5, r5, #4
   2d9bc:	bne	2d938 <__assert_fail@plt+0x1bd94>
   2d9c0:	tst	r4, #1024	; 0x400
   2d9c4:	beq	2da00 <__assert_fail@plt+0x1be5c>
   2d9c8:	mov	r3, #0
   2d9cc:	ldr	r1, [sp, #28]
   2d9d0:	b	2d9e0 <__assert_fail@plt+0x1be3c>
   2d9d4:	add	r3, r3, #1
   2d9d8:	cmp	sl, r3
   2d9dc:	beq	2da00 <__assert_fail@plt+0x1be5c>
   2d9e0:	ldr	r2, [r1, r3, lsl #5]
   2d9e4:	tst	r2, #1024	; 0x400
   2d9e8:	beq	2d9d4 <__assert_fail@plt+0x1be30>
   2d9ec:	ldr	r2, [sp, #24]
   2d9f0:	ldr	r3, [r9, r3, lsl #2]
   2d9f4:	cmp	r2, #0
   2d9f8:	str	r3, [r0, #40]	; 0x28
   2d9fc:	strne	r3, [r0, #1064]	; 0x428
   2da00:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2da04:	add	r9, sl, sl, lsl #1
   2da08:	bl	184ec <__assert_fail@plt+0x6948>
   2da0c:	ldr	r5, [sp, #12]
   2da10:	mov	r4, #0
   2da14:	lsl	r9, r9, #2
   2da18:	add	r3, r5, r4
   2da1c:	add	r4, r4, #12
   2da20:	ldr	r0, [r3, #8]
   2da24:	bl	184ec <__assert_fail@plt+0x6948>
   2da28:	cmp	r4, r9
   2da2c:	bne	2da18 <__assert_fail@plt+0x1be74>
   2da30:	mov	r0, #1
   2da34:	b	2d51c <__assert_fail@plt+0x1b978>
   2da38:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   2da3c:	cmp	r3, #0
   2da40:	beq	2d83c <__assert_fail@plt+0x1bc98>
   2da44:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2da48:	bl	184ec <__assert_fail@plt+0x6948>
   2da4c:	ldr	r5, [sp, #12]
   2da50:	ldr	r6, [sp, #20]
   2da54:	mov	r4, #0
   2da58:	ldr	r0, [r5, #8]
   2da5c:	add	r4, r4, #1
   2da60:	bl	184ec <__assert_fail@plt+0x6948>
   2da64:	cmp	r4, r6
   2da68:	add	r5, r5, #12
   2da6c:	bne	2da58 <__assert_fail@plt+0x1beb4>
   2da70:	b	2d518 <__assert_fail@plt+0x1b974>
   2da74:	ldr	r3, [sp, #104]	; 0x68
   2da78:	ldr	r2, [r3, #128]	; 0x80
   2da7c:	mvn	r3, #0
   2da80:	tst	r2, #64	; 0x40
   2da84:	str	r3, [r9]
   2da88:	str	r3, [r9, #4]
   2da8c:	str	r3, [r9, #8]
   2da90:	str	r3, [r9, #12]
   2da94:	mvneq	r3, #1024	; 0x400
   2da98:	streq	r3, [r9]
   2da9c:	tst	r2, #128	; 0x80
   2daa0:	beq	2cf18 <__assert_fail@plt+0x1b374>
   2daa4:	b	2d730 <__assert_fail@plt+0x1bb8c>
   2daa8:	mov	r3, #12
   2daac:	str	r3, [r9, #-2096]	; 0xfffff7d0
   2dab0:	ldr	r0, [r9, #-2084]	; 0xfffff7dc
   2dab4:	b	2da48 <__assert_fail@plt+0x1bea4>
   2dab8:	ldr	r3, [sp, #100]	; 0x64
   2dabc:	ldrb	r3, [r3, #6]
   2dac0:	tst	r3, #64	; 0x40
   2dac4:	bne	2cf44 <__assert_fail@plt+0x1b3a0>
   2dac8:	b	2d5c0 <__assert_fail@plt+0x1ba1c>
   2dacc:	mov	r3, #12
   2dad0:	str	r3, [r9, #-2096]	; 0xfffff7d0
   2dad4:	add	r3, sp, #3232	; 0xca0
   2dad8:	str	r3, [sp, #12]
   2dadc:	b	2da48 <__assert_fail@plt+0x1bea4>
   2dae0:	mov	r3, #1
   2dae4:	mov	r2, r8
   2dae8:	mov	r1, fp
   2daec:	ldr	r0, [sp, #16]
   2daf0:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2daf4:	ldr	r3, [sp]
   2daf8:	cmp	r0, #0
   2dafc:	str	r0, [r3]
   2db00:	beq	2dc44 <__assert_fail@plt+0x1c0a0>
   2db04:	cmp	r4, r0
   2db08:	beq	2db20 <__assert_fail@plt+0x1bf7c>
   2db0c:	ldr	r3, [fp, #92]	; 0x5c
   2db10:	ldr	r2, [sp, #24]
   2db14:	cmp	r3, #1
   2db18:	movgt	r2, #1
   2db1c:	str	r2, [sp, #24]
   2db20:	mov	r3, #2
   2db24:	mov	r2, r8
   2db28:	mov	r1, fp
   2db2c:	ldr	r0, [sp, #16]
   2db30:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2db34:	cmp	r0, #0
   2db38:	str	r0, [r9, sl, lsl #2]
   2db3c:	bne	2d854 <__assert_fail@plt+0x1bcb0>
   2db40:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   2db44:	cmp	r3, #0
   2db48:	beq	2d854 <__assert_fail@plt+0x1bcb0>
   2db4c:	b	2da44 <__assert_fail@plt+0x1bea0>
   2db50:	ldr	r5, [sp, #104]	; 0x68
   2db54:	ldr	ip, [r9, #4]
   2db58:	ldr	r1, [r9]
   2db5c:	ldr	r2, [r5, #100]	; 0x64
   2db60:	ldr	r0, [r9, #8]
   2db64:	and	ip, ip, r2
   2db68:	ldr	r3, [r5, #96]	; 0x60
   2db6c:	ldr	r2, [r5, #104]	; 0x68
   2db70:	and	r3, r3, r1
   2db74:	and	r0, r0, r2
   2db78:	ldr	r1, [r9, #12]
   2db7c:	ldr	r2, [r5, #108]	; 0x6c
   2db80:	ldr	lr, [r9, #16]
   2db84:	and	r1, r1, r2
   2db88:	ldr	r2, [r5, #112]	; 0x70
   2db8c:	str	r3, [r9]
   2db90:	and	r2, r2, lr
   2db94:	orr	r3, r3, ip
   2db98:	ldr	lr, [r9, #20]
   2db9c:	str	ip, [r9, #4]
   2dba0:	ldr	ip, [r5, #116]	; 0x74
   2dba4:	orr	r3, r3, r0
   2dba8:	and	ip, ip, lr
   2dbac:	orr	r3, r3, r1
   2dbb0:	ldr	lr, [r9, #24]
   2dbb4:	str	r0, [r9, #8]
   2dbb8:	ldr	r0, [r5, #120]	; 0x78
   2dbbc:	orr	r3, r3, r2
   2dbc0:	str	r1, [r9, #12]
   2dbc4:	str	r2, [r9, #16]
   2dbc8:	ldr	r1, [r9, #28]
   2dbcc:	ldr	r2, [r5, #124]	; 0x7c
   2dbd0:	and	r0, r0, lr
   2dbd4:	orr	r3, r3, ip
   2dbd8:	and	r1, r1, r2
   2dbdc:	orr	r3, r3, r0
   2dbe0:	str	ip, [r9, #20]
   2dbe4:	str	r0, [r9, #24]
   2dbe8:	orr	r2, r3, r1
   2dbec:	str	r1, [r9, #28]
   2dbf0:	b	2d058 <__assert_fail@plt+0x1b4b4>
   2dbf4:	mov	r2, #32
   2dbf8:	mvn	r1, #0
   2dbfc:	mov	r0, r9
   2dc00:	bl	119e8 <memset@plt>
   2dc04:	b	2d710 <__assert_fail@plt+0x1bb6c>
   2dc08:	bne	2d518 <__assert_fail@plt+0x1b974>
   2dc0c:	mov	r1, #256	; 0x100
   2dc10:	mov	r0, #4
   2dc14:	bl	368fc <__assert_fail@plt+0x24d58>
   2dc18:	ldr	r3, [sp, #72]	; 0x48
   2dc1c:	str	r0, [r3, #44]	; 0x2c
   2dc20:	adds	r0, r0, #0
   2dc24:	movne	r0, #1
   2dc28:	b	2d51c <__assert_fail@plt+0x1b978>
   2dc2c:	ldr	r3, [sp, #20]
   2dc30:	str	r0, [r4, #4]
   2dc34:	cmp	r3, #0
   2dc38:	str	r0, [r4]
   2dc3c:	beq	2d518 <__assert_fail@plt+0x1b974>
   2dc40:	b	2d4f4 <__assert_fail@plt+0x1b950>
   2dc44:	ldr	r3, [r9, #-2096]	; 0xfffff7d0
   2dc48:	cmp	r3, #0
   2dc4c:	beq	2db0c <__assert_fail@plt+0x1bf68>
   2dc50:	b	2da44 <__assert_fail@plt+0x1bea0>
   2dc54:	mov	r3, #0
   2dc58:	b	2d984 <__assert_fail@plt+0x1bde0>
   2dc5c:	mov	r1, #512	; 0x200
   2dc60:	mov	r0, #4
   2dc64:	bl	368fc <__assert_fail@plt+0x24d58>
   2dc68:	ldr	r3, [sp, #72]	; 0x48
   2dc6c:	cmp	r0, #0
   2dc70:	str	r0, [r3, #48]	; 0x30
   2dc74:	beq	2da44 <__assert_fail@plt+0x1bea0>
   2dc78:	add	r7, sp, #128	; 0x80
   2dc7c:	mov	lr, r0
   2dc80:	add	r8, r0, #1024	; 0x400
   2dc84:	ldr	r1, [r7], #4
   2dc88:	cmp	r1, #0
   2dc8c:	movne	ip, lr
   2dc90:	movne	r2, #1
   2dc94:	bne	2dcac <__assert_fail@plt+0x1c108>
   2dc98:	b	2dce8 <__assert_fail@plt+0x1c144>
   2dc9c:	lsrs	r1, r1, #1
   2dca0:	lsl	r2, r2, #1
   2dca4:	add	ip, ip, #4
   2dca8:	beq	2dce8 <__assert_fail@plt+0x1c144>
   2dcac:	tst	r1, #1
   2dcb0:	beq	2dc9c <__assert_fail@plt+0x1c0f8>
   2dcb4:	ldr	r3, [r5]
   2dcb8:	ands	r3, r2, r3
   2dcbc:	bne	2dcfc <__assert_fail@plt+0x1c158>
   2dcc0:	add	r3, r3, #1
   2dcc4:	ldr	r6, [r5, r3, lsl #5]
   2dcc8:	tst	r2, r6
   2dccc:	beq	2dcc0 <__assert_fail@plt+0x1c11c>
   2dcd0:	add	r3, r9, r3, lsl #2
   2dcd4:	ldr	r6, [r3, #-2048]	; 0xfffff800
   2dcd8:	ldr	r3, [r3, #-1024]	; 0xfffffc00
   2dcdc:	str	r6, [ip]
   2dce0:	str	r3, [ip, #1024]	; 0x400
   2dce4:	b	2dc9c <__assert_fail@plt+0x1c0f8>
   2dce8:	add	lr, lr, #128	; 0x80
   2dcec:	cmp	r8, lr
   2dcf0:	add	r5, r5, #4
   2dcf4:	bne	2dc84 <__assert_fail@plt+0x1c0e0>
   2dcf8:	b	2d9c0 <__assert_fail@plt+0x1be1c>
   2dcfc:	mov	r3, #0
   2dd00:	b	2dcd0 <__assert_fail@plt+0x1c12c>
   2dd04:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2dd08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd0c:	mov	r5, r0
   2dd10:	ldr	r0, [r0, #84]	; 0x54
   2dd14:	sub	sp, sp, #92	; 0x5c
   2dd18:	mov	ip, r1
   2dd1c:	str	r0, [sp, #28]
   2dd20:	ldr	r0, [r0]
   2dd24:	mov	r7, r2
   2dd28:	str	r1, [sp, #40]	; 0x28
   2dd2c:	ldr	r2, [sp, #132]	; 0x84
   2dd30:	ldr	r1, [r5, #120]	; 0x78
   2dd34:	ldr	r6, [ip, #4]
   2dd38:	mov	r8, #0
   2dd3c:	add	r2, r2, r1
   2dd40:	mov	r4, r3
   2dd44:	str	r8, [sp, #56]	; 0x38
   2dd48:	ldr	r3, [r0, r7, lsl #3]
   2dd4c:	cmp	r2, r6
   2dd50:	str	r3, [sp, #32]
   2dd54:	bge	2e504 <__assert_fail@plt+0x1c960>
   2dd58:	ldr	r3, [sp, #40]	; 0x28
   2dd5c:	ldr	r6, [r3]
   2dd60:	cmp	r6, #0
   2dd64:	beq	2df3c <__assert_fail@plt+0x1c398>
   2dd68:	ldr	r9, [r3, #8]
   2dd6c:	ldr	r3, [r5, #100]	; 0x64
   2dd70:	ldr	r2, [r5, #88]	; 0x58
   2dd74:	str	r3, [sp, #44]	; 0x2c
   2dd78:	ldr	r3, [r5, #40]	; 0x28
   2dd7c:	str	r9, [r5, #100]	; 0x64
   2dd80:	str	r6, [r5, #40]	; 0x28
   2dd84:	sub	r1, r6, #1
   2dd88:	mov	r0, r5
   2dd8c:	str	r3, [sp, #48]	; 0x30
   2dd90:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2dd94:	cmp	r6, r4
   2dd98:	mov	r8, r0
   2dd9c:	beq	2df6c <__assert_fail@plt+0x1c3c8>
   2dda0:	ldr	r7, [r9, r6, lsl #2]
   2dda4:	cmp	r7, #0
   2dda8:	beq	2e558 <__assert_fail@plt+0x1c9b4>
   2ddac:	ldrb	r3, [r7, #52]	; 0x34
   2ddb0:	ands	r2, r3, #64	; 0x40
   2ddb4:	bne	2e4b4 <__assert_fail@plt+0x1c910>
   2ddb8:	add	r1, sp, #64	; 0x40
   2ddbc:	str	r1, [sp, #16]
   2ddc0:	str	r2, [sp, #64]	; 0x40
   2ddc4:	str	r2, [sp, #68]	; 0x44
   2ddc8:	str	r2, [sp, #72]	; 0x48
   2ddcc:	tst	r3, #64	; 0x40
   2ddd0:	beq	2de2c <__assert_fail@plt+0x1c288>
   2ddd4:	ldr	r3, [sp, #68]	; 0x44
   2ddd8:	cmp	r3, #0
   2dddc:	beq	2de08 <__assert_fail@plt+0x1c264>
   2dde0:	ldr	r3, [sp, #136]	; 0x88
   2dde4:	mov	r2, r6
   2dde8:	str	r3, [sp]
   2ddec:	ldr	r1, [sp, #16]
   2ddf0:	ldr	r3, [sp, #32]
   2ddf4:	mov	r0, r5
   2ddf8:	bl	28a34 <__assert_fail@plt+0x16e90>
   2ddfc:	cmp	r0, #0
   2de00:	str	r0, [sp, #56]	; 0x38
   2de04:	bne	2e35c <__assert_fail@plt+0x1c7b8>
   2de08:	mov	r3, r8
   2de0c:	ldr	r2, [sp, #16]
   2de10:	ldr	r1, [sp, #28]
   2de14:	add	r0, sp, #56	; 0x38
   2de18:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2de1c:	subs	r7, r0, #0
   2de20:	beq	2e570 <__assert_fail@plt+0x1c9cc>
   2de24:	ldr	r3, [r5, #100]	; 0x64
   2de28:	str	r7, [r3, r6, lsl #2]
   2de2c:	ldr	r3, [sp, #132]	; 0x84
   2de30:	cmp	r3, r6
   2de34:	ble	2e264 <__assert_fail@plt+0x1c6c0>
   2de38:	ldr	r3, [r5, #120]	; 0x78
   2de3c:	cmp	r3, #0
   2de40:	blt	2e264 <__assert_fail@plt+0x1c6c0>
   2de44:	mov	r3, #0
   2de48:	add	r2, r6, #1
   2de4c:	str	r3, [sp, #24]
   2de50:	ldr	r3, [r5, #100]	; 0x64
   2de54:	mov	fp, r6
   2de58:	lsl	r2, r2, #2
   2de5c:	str	r2, [sp, #12]
   2de60:	ldr	r2, [sp, #12]
   2de64:	ldr	r6, [r3, r2]
   2de68:	mov	r3, #0
   2de6c:	cmp	r6, r3
   2de70:	str	r3, [sp, #68]	; 0x44
   2de74:	beq	2e330 <__assert_fail@plt+0x1c78c>
   2de78:	ldr	r4, [r6, #8]
   2de7c:	cmp	r4, r3
   2de80:	streq	r4, [sp, #56]	; 0x38
   2de84:	beq	2e330 <__assert_fail@plt+0x1c78c>
   2de88:	ldr	r3, [sp, #64]	; 0x40
   2de8c:	cmp	r3, r4, lsl #1
   2de90:	blt	2e464 <__assert_fail@plt+0x1c8c0>
   2de94:	add	r1, r6, #4
   2de98:	ldr	r0, [sp, #16]
   2de9c:	bl	23dac <__assert_fail@plt+0x12208>
   2dea0:	cmp	r0, #0
   2dea4:	str	r0, [sp, #56]	; 0x38
   2dea8:	bne	2e35c <__assert_fail@plt+0x1c7b8>
   2deac:	cmp	r7, #0
   2deb0:	beq	2e19c <__assert_fail@plt+0x1c5f8>
   2deb4:	ldr	r3, [r7, #20]
   2deb8:	mov	r2, #0
   2debc:	cmp	r3, r2
   2dec0:	str	r2, [sp, #60]	; 0x3c
   2dec4:	str	r2, [sp, #76]	; 0x4c
   2dec8:	str	r2, [sp, #80]	; 0x50
   2decc:	str	r2, [sp, #84]	; 0x54
   2ded0:	ldr	r8, [r5, #84]	; 0x54
   2ded4:	ble	2e594 <__assert_fail@plt+0x1c9f0>
   2ded8:	ldr	r3, [r7, #24]
   2dedc:	mov	r4, #0
   2dee0:	ldr	r6, [r3]
   2dee4:	mov	r3, r8
   2dee8:	ldr	r0, [r3], #128	; 0x80
   2deec:	lsl	sl, r6, #3
   2def0:	str	r3, [sp, #20]
   2def4:	add	r3, r0, sl
   2def8:	ldrb	r1, [r3, #6]
   2defc:	ldrb	r2, [r3, #4]
   2df00:	tst	r1, #16
   2df04:	bne	2e0bc <__assert_fail@plt+0x1c518>
   2df08:	ldr	r1, [r5, #4]
   2df0c:	sub	r2, r2, #1
   2df10:	ldrb	r1, [r1, fp]
   2df14:	cmp	r2, #6
   2df18:	ldrls	pc, [pc, r2, lsl #2]
   2df1c:	b	2e088 <__assert_fail@plt+0x1c4e4>
   2df20:	strdeq	lr, [r2], -r8
   2df24:	andeq	lr, r2, r8, lsl #1
   2df28:			; <UNDEFINED> instruction: 0x0002e2b8
   2df2c:	andeq	lr, r2, r8, lsl #1
   2df30:	ldrdeq	sp, [r2], -r0
   2df34:	andeq	lr, r2, r8, lsl #1
   2df38:	andeq	sp, r2, r8, asr #31
   2df3c:	ldr	r2, [r5, #100]	; 0x64
   2df40:	ldr	r3, [r3, #8]
   2df44:	str	r2, [sp, #44]	; 0x2c
   2df48:	ldr	r2, [r5, #40]	; 0x28
   2df4c:	str	r3, [r5, #100]	; 0x64
   2df50:	str	r2, [sp, #48]	; 0x30
   2df54:	str	r4, [r5, #40]	; 0x28
   2df58:	ldr	r2, [r5, #88]	; 0x58
   2df5c:	sub	r1, r4, #1
   2df60:	mov	r0, r5
   2df64:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2df68:	mov	r8, r0
   2df6c:	mov	r3, #1
   2df70:	mov	r0, #4
   2df74:	str	r3, [sp, #64]	; 0x40
   2df78:	str	r3, [sp, #68]	; 0x44
   2df7c:	bl	36944 <__assert_fail@plt+0x24da0>
   2df80:	cmp	r0, #0
   2df84:	str	r0, [sp, #72]	; 0x48
   2df88:	beq	2e58c <__assert_fail@plt+0x1c9e8>
   2df8c:	add	r3, sp, #64	; 0x40
   2df90:	str	r3, [sp, #16]
   2df94:	mov	r1, r3
   2df98:	mov	ip, #0
   2df9c:	str	r7, [r0]
   2dfa0:	ldr	r3, [sp, #136]	; 0x88
   2dfa4:	ldr	r2, [sp, #32]
   2dfa8:	ldr	r0, [sp, #28]
   2dfac:	str	ip, [sp, #56]	; 0x38
   2dfb0:	bl	271e8 <__assert_fail@plt+0x15644>
   2dfb4:	cmp	r0, #0
   2dfb8:	str	r0, [sp, #56]	; 0x38
   2dfbc:	moveq	r6, r4
   2dfc0:	beq	2ddd4 <__assert_fail@plt+0x1c230>
   2dfc4:	b	2e35c <__assert_fail@plt+0x1c7b8>
   2dfc8:	tst	r1, #128	; 0x80
   2dfcc:	bne	2e088 <__assert_fail@plt+0x1c4e4>
   2dfd0:	cmp	r1, #10
   2dfd4:	beq	2e39c <__assert_fail@plt+0x1c7f8>
   2dfd8:	cmp	r1, #0
   2dfdc:	bne	2dff0 <__assert_fail@plt+0x1c44c>
   2dfe0:	ldr	r2, [r5, #84]	; 0x54
   2dfe4:	ldr	r2, [r2, #128]	; 0x80
   2dfe8:	tst	r2, #128	; 0x80
   2dfec:	bne	2e088 <__assert_fail@plt+0x1c4e4>
   2dff0:	ldr	r9, [r3, #4]
   2dff4:	ldr	r3, [pc, #1472]	; 2e5bc <__assert_fail@plt+0x1ca18>
   2dff8:	tst	r9, r3
   2dffc:	beq	2e050 <__assert_fail@plt+0x1c4ac>
   2e000:	ldr	r2, [r5, #88]	; 0x58
   2e004:	mov	r1, fp
   2e008:	mov	r0, r5
   2e00c:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2e010:	ldr	r3, [pc, #1448]	; 2e5c0 <__assert_fail@plt+0x1ca1c>
   2e014:	and	r9, r3, r9, lsr #8
   2e018:	tst	r9, #4
   2e01c:	beq	2e388 <__assert_fail@plt+0x1c7e4>
   2e020:	tst	r0, #1
   2e024:	beq	2e088 <__assert_fail@plt+0x1c4e4>
   2e028:	tst	r9, #8
   2e02c:	bne	2e088 <__assert_fail@plt+0x1c4e4>
   2e030:	tst	r9, #32
   2e034:	beq	2e040 <__assert_fail@plt+0x1c49c>
   2e038:	tst	r0, #2
   2e03c:	beq	2e088 <__assert_fail@plt+0x1c4e4>
   2e040:	tst	r9, #128	; 0x80
   2e044:	beq	2e050 <__assert_fail@plt+0x1c4ac>
   2e048:	tst	r0, #8
   2e04c:	beq	2e088 <__assert_fail@plt+0x1c4e4>
   2e050:	lsl	sl, r6, #2
   2e054:	ldr	r2, [r8, #12]
   2e058:	ldr	r3, [sp, #64]	; 0x40
   2e05c:	cmp	r3, #0
   2e060:	ldr	r6, [r2, sl]
   2e064:	beq	2e308 <__assert_fail@plt+0x1c764>
   2e068:	ldr	r2, [sp, #68]	; 0x44
   2e06c:	cmp	r2, #0
   2e070:	bne	2e3b0 <__assert_fail@plt+0x1c80c>
   2e074:	ldr	r3, [sp, #72]	; 0x48
   2e078:	str	r6, [r3]
   2e07c:	ldr	r3, [sp, #68]	; 0x44
   2e080:	add	r3, r3, #1
   2e084:	str	r3, [sp, #68]	; 0x44
   2e088:	ldr	r3, [r7, #20]
   2e08c:	add	r4, r4, #1
   2e090:	cmp	r4, r3
   2e094:	bge	2e2e4 <__assert_fail@plt+0x1c740>
   2e098:	ldr	r3, [r7, #24]
   2e09c:	ldr	r0, [r8]
   2e0a0:	ldr	r6, [r3, r4, lsl #2]
   2e0a4:	lsl	sl, r6, #3
   2e0a8:	add	r3, r0, sl
   2e0ac:	ldrb	r1, [r3, #6]
   2e0b0:	ldrb	r2, [r3, #4]
   2e0b4:	tst	r1, #16
   2e0b8:	beq	2df08 <__assert_fail@plt+0x1c364>
   2e0bc:	str	fp, [sp]
   2e0c0:	mov	r3, r5
   2e0c4:	mov	r2, r6
   2e0c8:	ldr	r1, [sp, #20]
   2e0cc:	bl	259cc <__assert_fail@plt+0x13e28>
   2e0d0:	cmp	r0, #1
   2e0d4:	ble	2e370 <__assert_fail@plt+0x1c7cc>
   2e0d8:	ldr	r3, [r5, #100]	; 0x64
   2e0dc:	add	r9, r0, fp
   2e0e0:	ldr	r2, [r8, #12]
   2e0e4:	ldr	r3, [r3, r9, lsl #2]
   2e0e8:	mov	r1, #0
   2e0ec:	cmp	r3, #0
   2e0f0:	ldr	r2, [r2, r6, lsl #2]
   2e0f4:	lsl	sl, r6, #2
   2e0f8:	str	r1, [sp, #80]	; 0x50
   2e0fc:	beq	2e13c <__assert_fail@plt+0x1c598>
   2e100:	ldr	r6, [r3, #8]
   2e104:	cmp	r6, r1
   2e108:	streq	r6, [sp, #60]	; 0x3c
   2e10c:	beq	2e13c <__assert_fail@plt+0x1c598>
   2e110:	ldr	r1, [sp, #76]	; 0x4c
   2e114:	cmp	r1, r6, lsl #1
   2e118:	blt	2e3f8 <__assert_fail@plt+0x1c854>
   2e11c:	add	r1, r3, #4
   2e120:	add	r0, sp, #76	; 0x4c
   2e124:	str	r2, [sp, #36]	; 0x24
   2e128:	bl	23dac <__assert_fail@plt+0x12208>
   2e12c:	ldr	r2, [sp, #36]	; 0x24
   2e130:	cmp	r0, #0
   2e134:	str	r0, [sp, #60]	; 0x3c
   2e138:	bne	2e184 <__assert_fail@plt+0x1c5e0>
   2e13c:	mov	r1, r2
   2e140:	add	r0, sp, #76	; 0x4c
   2e144:	bl	23828 <__assert_fail@plt+0x11c84>
   2e148:	cmp	r0, #0
   2e14c:	beq	2e34c <__assert_fail@plt+0x1c7a8>
   2e150:	add	r2, sp, #76	; 0x4c
   2e154:	mov	r1, r8
   2e158:	add	r0, sp, #60	; 0x3c
   2e15c:	ldr	r6, [r5, #100]	; 0x64
   2e160:	bl	28758 <__assert_fail@plt+0x16bb4>
   2e164:	ldr	r3, [r5, #100]	; 0x64
   2e168:	str	r0, [r6, r9, lsl #2]
   2e16c:	ldr	r3, [r3, r9, lsl #2]
   2e170:	cmp	r3, #0
   2e174:	bne	2e054 <__assert_fail@plt+0x1c4b0>
   2e178:	ldr	r3, [sp, #60]	; 0x3c
   2e17c:	cmp	r3, #0
   2e180:	beq	2e054 <__assert_fail@plt+0x1c4b0>
   2e184:	ldr	r0, [sp, #84]	; 0x54
   2e188:	bl	184ec <__assert_fail@plt+0x6948>
   2e18c:	ldr	r3, [sp, #60]	; 0x3c
   2e190:	cmp	r3, #0
   2e194:	str	r3, [sp, #56]	; 0x38
   2e198:	bne	2e35c <__assert_fail@plt+0x1c7b8>
   2e19c:	ldr	r3, [sp, #68]	; 0x44
   2e1a0:	add	r4, fp, #1
   2e1a4:	cmp	r3, #0
   2e1a8:	mov	r6, r4
   2e1ac:	beq	2e1f8 <__assert_fail@plt+0x1c654>
   2e1b0:	ldr	r3, [sp, #136]	; 0x88
   2e1b4:	ldr	r2, [sp, #32]
   2e1b8:	ldr	r1, [sp, #16]
   2e1bc:	ldr	r0, [sp, #28]
   2e1c0:	bl	271e8 <__assert_fail@plt+0x15644>
   2e1c4:	cmp	r0, #0
   2e1c8:	str	r0, [sp, #56]	; 0x38
   2e1cc:	bne	2e35c <__assert_fail@plt+0x1c7b8>
   2e1d0:	ldr	r3, [sp, #136]	; 0x88
   2e1d4:	mov	r2, r4
   2e1d8:	str	r3, [sp]
   2e1dc:	ldr	r1, [sp, #16]
   2e1e0:	ldr	r3, [sp, #32]
   2e1e4:	mov	r0, r5
   2e1e8:	bl	28a34 <__assert_fail@plt+0x16e90>
   2e1ec:	cmp	r0, #0
   2e1f0:	str	r0, [sp, #56]	; 0x38
   2e1f4:	bne	2e35c <__assert_fail@plt+0x1c7b8>
   2e1f8:	ldr	r2, [r5, #88]	; 0x58
   2e1fc:	mov	r1, fp
   2e200:	mov	r0, r5
   2e204:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2e208:	ldr	r2, [sp, #16]
   2e20c:	ldr	r1, [sp, #28]
   2e210:	mov	r3, r0
   2e214:	add	r0, sp, #56	; 0x38
   2e218:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2e21c:	subs	r7, r0, #0
   2e220:	beq	2e48c <__assert_fail@plt+0x1c8e8>
   2e224:	mov	r2, #0
   2e228:	str	r2, [sp, #24]
   2e22c:	ldr	r3, [r5, #100]	; 0x64
   2e230:	ldr	r2, [sp, #12]
   2e234:	str	r7, [r3, r2]
   2e238:	ldr	r2, [sp, #132]	; 0x84
   2e23c:	cmp	r2, r4
   2e240:	ble	2e264 <__assert_fail@plt+0x1c6c0>
   2e244:	ldr	r1, [sp, #12]
   2e248:	ldr	r2, [r5, #120]	; 0x78
   2e24c:	add	r1, r1, #4
   2e250:	str	r1, [sp, #12]
   2e254:	ldr	r1, [sp, #24]
   2e258:	mov	fp, r4
   2e25c:	cmp	r1, r2
   2e260:	ble	2de60 <__assert_fail@plt+0x1c2bc>
   2e264:	ldr	r0, [sp, #72]	; 0x48
   2e268:	bl	184ec <__assert_fail@plt+0x6948>
   2e26c:	ldr	r3, [r5, #100]	; 0x64
   2e270:	ldr	r2, [sp, #132]	; 0x84
   2e274:	ldr	r3, [r3, r2, lsl #2]
   2e278:	cmp	r3, #0
   2e27c:	beq	2e59c <__assert_fail@plt+0x1c9f8>
   2e280:	ldr	r2, [sp, #40]	; 0x28
   2e284:	add	r1, r3, #12
   2e288:	str	r6, [r2]
   2e28c:	ldr	r2, [sp, #48]	; 0x30
   2e290:	str	r2, [r5, #40]	; 0x28
   2e294:	ldr	r2, [sp, #44]	; 0x2c
   2e298:	ldr	r0, [r3, #8]
   2e29c:	str	r2, [r5, #100]	; 0x64
   2e2a0:	ldr	r2, [sp, #128]	; 0x80
   2e2a4:	bl	23944 <__assert_fail@plt+0x11da0>
   2e2a8:	clz	r0, r0
   2e2ac:	lsr	r0, r0, #5
   2e2b0:	add	sp, sp, #92	; 0x5c
   2e2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e2b8:	ldr	r2, [r3]
   2e2bc:	asr	r0, r1, #5
   2e2c0:	and	r1, r1, #31
   2e2c4:	ldr	r2, [r2, r0, lsl #2]
   2e2c8:	lsr	r1, r2, r1
   2e2cc:	tst	r1, #1
   2e2d0:	bne	2dff0 <__assert_fail@plt+0x1c44c>
   2e2d4:	ldr	r3, [r7, #20]
   2e2d8:	add	r4, r4, #1
   2e2dc:	cmp	r4, r3
   2e2e0:	blt	2e098 <__assert_fail@plt+0x1c4f4>
   2e2e4:	ldr	r0, [sp, #84]	; 0x54
   2e2e8:	bl	184ec <__assert_fail@plt+0x6948>
   2e2ec:	mov	r3, #0
   2e2f0:	str	r3, [sp, #56]	; 0x38
   2e2f4:	b	2e19c <__assert_fail@plt+0x1c5f8>
   2e2f8:	ldrb	r2, [r3]
   2e2fc:	cmp	r2, r1
   2e300:	bne	2e088 <__assert_fail@plt+0x1c4e4>
   2e304:	b	2dff0 <__assert_fail@plt+0x1c44c>
   2e308:	mov	r3, #1
   2e30c:	mov	r0, #4
   2e310:	str	r3, [sp, #64]	; 0x40
   2e314:	str	r3, [sp, #68]	; 0x44
   2e318:	bl	36944 <__assert_fail@plt+0x24da0>
   2e31c:	cmp	r0, #0
   2e320:	str	r0, [sp, #72]	; 0x48
   2e324:	beq	2e344 <__assert_fail@plt+0x1c7a0>
   2e328:	str	r6, [r0]
   2e32c:	b	2e088 <__assert_fail@plt+0x1c4e4>
   2e330:	cmp	r7, #0
   2e334:	bne	2deb4 <__assert_fail@plt+0x1c310>
   2e338:	add	r4, fp, #1
   2e33c:	mov	r6, r4
   2e340:	b	2e1f8 <__assert_fail@plt+0x1c654>
   2e344:	str	r0, [sp, #68]	; 0x44
   2e348:	str	r0, [sp, #64]	; 0x40
   2e34c:	ldr	r0, [sp, #84]	; 0x54
   2e350:	bl	184ec <__assert_fail@plt+0x6948>
   2e354:	mov	r3, #12
   2e358:	str	r3, [sp, #56]	; 0x38
   2e35c:	ldr	r0, [sp, #72]	; 0x48
   2e360:	bl	184ec <__assert_fail@plt+0x6948>
   2e364:	ldr	r0, [sp, #56]	; 0x38
   2e368:	add	sp, sp, #92	; 0x5c
   2e36c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e370:	cmp	r0, #0
   2e374:	bne	2e050 <__assert_fail@plt+0x1c4ac>
   2e378:	ldr	r3, [r8]
   2e37c:	add	r3, r3, sl
   2e380:	ldrb	r2, [r3, #4]
   2e384:	b	2df08 <__assert_fail@plt+0x1c364>
   2e388:	tst	r9, #8
   2e38c:	beq	2e030 <__assert_fail@plt+0x1c48c>
   2e390:	tst	r0, #1
   2e394:	beq	2e030 <__assert_fail@plt+0x1c48c>
   2e398:	b	2e088 <__assert_fail@plt+0x1c4e4>
   2e39c:	ldr	r2, [r5, #84]	; 0x54
   2e3a0:	ldr	r2, [r2, #128]	; 0x80
   2e3a4:	tst	r2, #64	; 0x40
   2e3a8:	bne	2dff0 <__assert_fail@plt+0x1c44c>
   2e3ac:	b	2e088 <__assert_fail@plt+0x1c4e4>
   2e3b0:	cmp	r3, r2
   2e3b4:	beq	2e4dc <__assert_fail@plt+0x1c938>
   2e3b8:	ldr	r9, [sp, #72]	; 0x48
   2e3bc:	ldr	r3, [r9]
   2e3c0:	cmp	r6, r3
   2e3c4:	bge	2e430 <__assert_fail@plt+0x1c88c>
   2e3c8:	cmp	r2, #0
   2e3cc:	ble	2e3e4 <__assert_fail@plt+0x1c840>
   2e3d0:	lsl	r2, r2, #2
   2e3d4:	mov	r1, r9
   2e3d8:	add	r0, r9, #4
   2e3dc:	bl	11748 <memmove@plt>
   2e3e0:	mov	r2, #0
   2e3e4:	str	r6, [r9, r2, lsl #2]
   2e3e8:	ldr	r3, [sp, #68]	; 0x44
   2e3ec:	add	r3, r3, #1
   2e3f0:	str	r3, [sp, #68]	; 0x44
   2e3f4:	b	2e088 <__assert_fail@plt+0x1c4e4>
   2e3f8:	add	r6, r6, r1
   2e3fc:	ldr	r0, [sp, #84]	; 0x54
   2e400:	lsl	r1, r6, #3
   2e404:	str	r3, [sp, #52]	; 0x34
   2e408:	str	r2, [sp, #36]	; 0x24
   2e40c:	bl	36970 <__assert_fail@plt+0x24dcc>
   2e410:	lsl	r6, r6, #1
   2e414:	ldr	r2, [sp, #36]	; 0x24
   2e418:	ldr	r3, [sp, #52]	; 0x34
   2e41c:	cmp	r0, #0
   2e420:	beq	2e580 <__assert_fail@plt+0x1c9dc>
   2e424:	str	r0, [sp, #84]	; 0x54
   2e428:	str	r6, [sp, #76]	; 0x4c
   2e42c:	b	2e11c <__assert_fail@plt+0x1c578>
   2e430:	sub	r3, r2, #-1073741823	; 0xc0000001
   2e434:	ldr	r1, [r9, r3, lsl #2]
   2e438:	lsl	r3, r3, #2
   2e43c:	cmp	r6, r1
   2e440:	bge	2e3e4 <__assert_fail@plt+0x1c840>
   2e444:	add	r3, r3, #4
   2e448:	add	r3, r9, r3
   2e44c:	str	r1, [r3], #-4
   2e450:	ldr	r1, [r3, #-4]
   2e454:	sub	r2, r2, #1
   2e458:	cmp	r6, r1
   2e45c:	blt	2e44c <__assert_fail@plt+0x1c8a8>
   2e460:	b	2e3e4 <__assert_fail@plt+0x1c840>
   2e464:	add	r4, r4, r3
   2e468:	ldr	r0, [sp, #72]	; 0x48
   2e46c:	lsl	r1, r4, #3
   2e470:	bl	36970 <__assert_fail@plt+0x24dcc>
   2e474:	lsl	r4, r4, #1
   2e478:	cmp	r0, #0
   2e47c:	beq	2e354 <__assert_fail@plt+0x1c7b0>
   2e480:	str	r0, [sp, #72]	; 0x48
   2e484:	str	r4, [sp, #64]	; 0x40
   2e488:	b	2de94 <__assert_fail@plt+0x1c2f0>
   2e48c:	ldr	r3, [sp, #56]	; 0x38
   2e490:	cmp	r3, #0
   2e494:	bne	2e35c <__assert_fail@plt+0x1c7b8>
   2e498:	ldr	r2, [sp, #24]
   2e49c:	ldr	r3, [r5, #100]	; 0x64
   2e4a0:	add	r2, r2, #1
   2e4a4:	str	r2, [sp, #24]
   2e4a8:	ldr	r2, [sp, #12]
   2e4ac:	str	r7, [r3, r2]
   2e4b0:	b	2e238 <__assert_fail@plt+0x1c694>
   2e4b4:	add	r3, sp, #64	; 0x40
   2e4b8:	mov	r0, r3
   2e4bc:	add	r1, r7, #4
   2e4c0:	str	r3, [sp, #16]
   2e4c4:	bl	23be8 <__assert_fail@plt+0x12044>
   2e4c8:	cmp	r0, #0
   2e4cc:	str	r0, [sp, #56]	; 0x38
   2e4d0:	bne	2e368 <__assert_fail@plt+0x1c7c4>
   2e4d4:	ldrb	r3, [r7, #52]	; 0x34
   2e4d8:	b	2ddcc <__assert_fail@plt+0x1c228>
   2e4dc:	lsl	r3, r2, #1
   2e4e0:	lsl	r1, r2, #3
   2e4e4:	ldr	r0, [sp, #72]	; 0x48
   2e4e8:	str	r3, [sp, #64]	; 0x40
   2e4ec:	bl	36970 <__assert_fail@plt+0x24dcc>
   2e4f0:	subs	r9, r0, #0
   2e4f4:	beq	2e34c <__assert_fail@plt+0x1c7a8>
   2e4f8:	ldr	r2, [sp, #68]	; 0x44
   2e4fc:	str	r9, [sp, #72]	; 0x48
   2e500:	b	2e3bc <__assert_fail@plt+0x1c818>
   2e504:	mvn	r3, #-2147483648	; 0x80000000
   2e508:	add	r9, r2, #1
   2e50c:	sub	r3, r3, r6
   2e510:	cmp	r9, r3
   2e514:	bgt	2e58c <__assert_fail@plt+0x1c9e8>
   2e518:	add	sl, r6, r9
   2e51c:	cmn	sl, #-1073741823	; 0xc0000001
   2e520:	bhi	2e58c <__assert_fail@plt+0x1c9e8>
   2e524:	lsl	r1, sl, #2
   2e528:	ldr	r0, [ip, #8]
   2e52c:	mov	fp, ip
   2e530:	bl	36970 <__assert_fail@plt+0x24dcc>
   2e534:	cmp	r0, #0
   2e538:	beq	2e58c <__assert_fail@plt+0x1c9e8>
   2e53c:	str	r0, [fp, #8]
   2e540:	str	sl, [fp, #4]
   2e544:	lsl	r2, r9, #2
   2e548:	mov	r1, r8
   2e54c:	add	r0, r0, r6, lsl #2
   2e550:	bl	119e8 <memset@plt>
   2e554:	b	2dd58 <__assert_fail@plt+0x1c1b4>
   2e558:	add	r3, sp, #64	; 0x40
   2e55c:	str	r3, [sp, #16]
   2e560:	str	r7, [sp, #64]	; 0x40
   2e564:	str	r7, [sp, #68]	; 0x44
   2e568:	str	r7, [sp, #72]	; 0x48
   2e56c:	b	2de2c <__assert_fail@plt+0x1c288>
   2e570:	ldr	r3, [sp, #56]	; 0x38
   2e574:	cmp	r3, #0
   2e578:	beq	2de24 <__assert_fail@plt+0x1c280>
   2e57c:	b	2e35c <__assert_fail@plt+0x1c7b8>
   2e580:	mov	r3, #12
   2e584:	str	r3, [sp, #60]	; 0x3c
   2e588:	b	2e184 <__assert_fail@plt+0x1c5e0>
   2e58c:	mov	r0, #12
   2e590:	b	2e368 <__assert_fail@plt+0x1c7c4>
   2e594:	mov	r0, #0
   2e598:	b	2e2e8 <__assert_fail@plt+0x1c744>
   2e59c:	ldr	r3, [sp, #40]	; 0x28
   2e5a0:	mov	r0, #1
   2e5a4:	str	r6, [r3]
   2e5a8:	ldr	r3, [sp, #44]	; 0x2c
   2e5ac:	str	r3, [r5, #100]	; 0x64
   2e5b0:	ldr	r3, [sp, #48]	; 0x30
   2e5b4:	str	r3, [r5, #40]	; 0x28
   2e5b8:	b	2e368 <__assert_fail@plt+0x1c7c4>
   2e5bc:	andeq	pc, r3, r0, lsl #30
   2e5c0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2e5c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e5c8:	sub	sp, sp, #20
   2e5cc:	mov	ip, r2
   2e5d0:	ldr	r5, [sp, #56]	; 0x38
   2e5d4:	ldr	r4, [r2, #4]
   2e5d8:	mov	lr, #8
   2e5dc:	mov	r6, r2
   2e5e0:	ldr	r2, [ip], #8
   2e5e4:	mov	r7, r3
   2e5e8:	str	r3, [sp]
   2e5ec:	mov	r9, r1
   2e5f0:	mov	r3, r4
   2e5f4:	mov	r1, ip
   2e5f8:	stmib	sp, {r5, lr}
   2e5fc:	mov	r4, r0
   2e600:	bl	2dd08 <__assert_fail@plt+0x1c164>
   2e604:	subs	r8, r0, #0
   2e608:	beq	2e618 <__assert_fail@plt+0x1ca74>
   2e60c:	mov	r0, r8
   2e610:	add	sp, sp, #20
   2e614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e618:	ldr	r3, [r4, #108]	; 0x6c
   2e61c:	ldr	r1, [r4, #112]	; 0x70
   2e620:	ldr	sl, [r6, #4]
   2e624:	cmp	r3, r1
   2e628:	ldr	fp, [r9]
   2e62c:	movlt	ip, sl
   2e630:	bge	2e72c <__assert_fail@plt+0x1cb88>
   2e634:	add	r2, r3, r3, lsl #1
   2e638:	cmp	r3, #0
   2e63c:	ldr	r0, [r4, #116]	; 0x74
   2e640:	lsl	r2, r2, #3
   2e644:	ble	2e660 <__assert_fail@plt+0x1cabc>
   2e648:	sub	r1, r2, #24
   2e64c:	add	r1, r0, r1
   2e650:	ldr	lr, [r1, #4]
   2e654:	cmp	r5, lr
   2e658:	moveq	lr, #1
   2e65c:	strbeq	lr, [r1, #20]
   2e660:	add	r1, r0, r2
   2e664:	cmp	fp, sl
   2e668:	str	r7, [r0, r2]
   2e66c:	add	r3, r3, #1
   2e670:	movne	r0, #0
   2e674:	mvneq	r0, #0
   2e678:	mov	r2, #0
   2e67c:	stmib	r1, {r5, fp}
   2e680:	str	sl, [r1, #12]
   2e684:	str	r0, [r1, #16]
   2e688:	str	r3, [r4, #108]	; 0x6c
   2e68c:	strb	r2, [r1, #20]
   2e690:	ldr	r3, [r4, #120]	; 0x78
   2e694:	sub	sl, sl, fp
   2e698:	cmp	r3, sl
   2e69c:	strlt	sl, [r4, #120]	; 0x78
   2e6a0:	ldr	r2, [r9]
   2e6a4:	add	r5, r5, ip
   2e6a8:	ldr	r3, [r4, #36]	; 0x24
   2e6ac:	sub	r5, r5, r2
   2e6b0:	cmp	r5, r3
   2e6b4:	ldr	r6, [r4, #104]	; 0x68
   2e6b8:	blt	2e710 <__assert_fail@plt+0x1cb6c>
   2e6bc:	ldr	r2, [r4, #48]	; 0x30
   2e6c0:	cmp	r3, r2
   2e6c4:	bge	2e710 <__assert_fail@plt+0x1cb6c>
   2e6c8:	add	r1, r5, #1
   2e6cc:	mov	r0, r4
   2e6d0:	bl	28544 <__assert_fail@plt+0x169a0>
   2e6d4:	cmp	r0, #0
   2e6d8:	bne	2e780 <__assert_fail@plt+0x1cbdc>
   2e6dc:	cmp	r5, r6
   2e6e0:	ble	2e60c <__assert_fail@plt+0x1ca68>
   2e6e4:	sub	r2, r5, r6
   2e6e8:	ldr	r0, [r4, #100]	; 0x64
   2e6ec:	add	r6, r6, #1
   2e6f0:	lsl	r2, r2, #2
   2e6f4:	add	r0, r0, r6, lsl #2
   2e6f8:	mov	r1, #0
   2e6fc:	bl	119e8 <memset@plt>
   2e700:	mov	r0, r8
   2e704:	str	r5, [r4, #104]	; 0x68
   2e708:	add	sp, sp, #20
   2e70c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e710:	ldr	r3, [r4, #28]
   2e714:	cmp	r5, r3
   2e718:	blt	2e6dc <__assert_fail@plt+0x1cb38>
   2e71c:	ldr	r2, [r4, #48]	; 0x30
   2e720:	cmp	r3, r2
   2e724:	bge	2e6dc <__assert_fail@plt+0x1cb38>
   2e728:	b	2e6c8 <__assert_fail@plt+0x1cb24>
   2e72c:	add	r1, r1, r1, lsl #1
   2e730:	ldr	r0, [r4, #116]	; 0x74
   2e734:	lsl	r1, r1, #4
   2e738:	bl	36970 <__assert_fail@plt+0x24dcc>
   2e73c:	cmp	r0, #0
   2e740:	beq	2e788 <__assert_fail@plt+0x1cbe4>
   2e744:	ldr	r2, [r4, #112]	; 0x70
   2e748:	ldr	r3, [r4, #108]	; 0x6c
   2e74c:	str	r0, [r4, #116]	; 0x74
   2e750:	add	r2, r2, r2, lsl #1
   2e754:	add	r3, r3, r3, lsl #1
   2e758:	lsl	r2, r2, #3
   2e75c:	add	r0, r0, r3, lsl #3
   2e760:	mov	r1, r8
   2e764:	bl	119e8 <memset@plt>
   2e768:	ldr	r2, [r4, #112]	; 0x70
   2e76c:	ldr	ip, [r6, #4]
   2e770:	ldr	r3, [r4, #108]	; 0x6c
   2e774:	lsl	r2, r2, #1
   2e778:	str	r2, [r4, #112]	; 0x70
   2e77c:	b	2e634 <__assert_fail@plt+0x1ca90>
   2e780:	mov	r8, r0
   2e784:	b	2e60c <__assert_fail@plt+0x1ca68>
   2e788:	ldr	r0, [r4, #116]	; 0x74
   2e78c:	bl	184ec <__assert_fail@plt+0x6948>
   2e790:	mov	r8, #12
   2e794:	b	2e60c <__assert_fail@plt+0x1ca68>
   2e798:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e79c:	sub	sp, sp, #92	; 0x5c
   2e7a0:	ldr	r6, [r1]
   2e7a4:	ldr	r3, [r0, #84]	; 0x54
   2e7a8:	cmp	r6, #0
   2e7ac:	str	r3, [sp, #36]	; 0x24
   2e7b0:	ldr	fp, [r0, #40]	; 0x28
   2e7b4:	ble	2ed40 <__assert_fail@plt+0x1d19c>
   2e7b8:	mov	r3, #0
   2e7bc:	str	r3, [sp, #20]
   2e7c0:	lsl	r3, fp, #2
   2e7c4:	str	r2, [sp, #40]	; 0x28
   2e7c8:	mov	sl, r0
   2e7cc:	str	r1, [sp, #64]	; 0x40
   2e7d0:	str	r3, [sp, #52]	; 0x34
   2e7d4:	mov	r9, fp
   2e7d8:	b	2e7f0 <__assert_fail@plt+0x1cc4c>
   2e7dc:	ldr	r3, [sp, #20]
   2e7e0:	add	r3, r3, #1
   2e7e4:	cmp	r3, r6
   2e7e8:	str	r3, [sp, #20]
   2e7ec:	bge	2ed40 <__assert_fail@plt+0x1d19c>
   2e7f0:	ldr	r3, [sp, #40]	; 0x28
   2e7f4:	ldr	r1, [sp, #20]
   2e7f8:	ldr	r2, [r3]
   2e7fc:	ldr	r3, [sp, #36]	; 0x24
   2e800:	ldr	fp, [r2, r1, lsl #2]
   2e804:	ldr	r3, [r3]
   2e808:	add	r3, r3, fp, lsl #3
   2e80c:	ldrb	r2, [r3, #4]
   2e810:	cmp	r2, #4
   2e814:	bne	2e7dc <__assert_fail@plt+0x1cc38>
   2e818:	ldr	r4, [r3, #4]
   2e81c:	ldr	r3, [pc, #1928]	; 2efac <__assert_fail@plt+0x1d408>
   2e820:	tst	r4, r3
   2e824:	beq	2e878 <__assert_fail@plt+0x1ccd4>
   2e828:	ldr	r2, [sl, #88]	; 0x58
   2e82c:	mov	r1, r9
   2e830:	mov	r0, sl
   2e834:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2e838:	ldr	r3, [pc, #1904]	; 2efb0 <__assert_fail@plt+0x1d40c>
   2e83c:	and	r4, r3, r4, lsr #8
   2e840:	tst	r4, #4
   2e844:	beq	2ead8 <__assert_fail@plt+0x1cf34>
   2e848:	tst	r0, #1
   2e84c:	beq	2e7dc <__assert_fail@plt+0x1cc38>
   2e850:	tst	r4, #8
   2e854:	bne	2e7dc <__assert_fail@plt+0x1cc38>
   2e858:	tst	r4, #32
   2e85c:	beq	2e868 <__assert_fail@plt+0x1ccc4>
   2e860:	tst	r0, #2
   2e864:	beq	2e7dc <__assert_fail@plt+0x1cc38>
   2e868:	tst	r4, #128	; 0x80
   2e86c:	beq	2e878 <__assert_fail@plt+0x1ccd4>
   2e870:	tst	r0, #8
   2e874:	beq	2e7dc <__assert_fail@plt+0x1cc38>
   2e878:	ldr	ip, [sl, #108]	; 0x6c
   2e87c:	mov	r0, #0
   2e880:	mov	r8, ip
   2e884:	mov	r3, ip
   2e888:	cmp	r0, r3
   2e88c:	bge	2e8e8 <__assert_fail@plt+0x1cd44>
   2e890:	add	r2, r0, r3
   2e894:	ldr	lr, [sl, #116]	; 0x74
   2e898:	add	r2, r2, r2, lsr #31
   2e89c:	asr	r2, r2, #1
   2e8a0:	add	r1, r2, r2, lsl #1
   2e8a4:	add	r1, lr, r1, lsl #3
   2e8a8:	ldr	r1, [r1, #4]
   2e8ac:	cmp	r9, r1
   2e8b0:	ble	2e8d8 <__assert_fail@plt+0x1cd34>
   2e8b4:	b	2eac4 <__assert_fail@plt+0x1cf20>
   2e8b8:	asr	r3, r3, #1
   2e8bc:	mov	r4, r3
   2e8c0:	add	r1, r3, r3, lsl #1
   2e8c4:	add	r1, lr, r1, lsl #3
   2e8c8:	ldr	r1, [r1, #4]
   2e8cc:	cmp	r9, r1
   2e8d0:	bgt	2eacc <__assert_fail@plt+0x1cf28>
   2e8d4:	mov	r2, r3
   2e8d8:	add	r3, r0, r2
   2e8dc:	cmp	r0, r2
   2e8e0:	add	r3, r3, r3, lsr #31
   2e8e4:	blt	2e8b8 <__assert_fail@plt+0x1cd14>
   2e8e8:	cmp	ip, r0
   2e8ec:	ble	2eaec <__assert_fail@plt+0x1cf48>
   2e8f0:	add	r2, r0, r0, lsl #1
   2e8f4:	ldr	r3, [sl, #116]	; 0x74
   2e8f8:	cmn	r0, #1
   2e8fc:	add	r3, r3, r2, lsl #3
   2e900:	ldr	r2, [r3, #4]
   2e904:	sub	r2, r2, r9
   2e908:	clz	r2, r2
   2e90c:	lsr	r2, r2, #5
   2e910:	moveq	r2, #0
   2e914:	cmp	r2, #0
   2e918:	beq	2eaec <__assert_fail@plt+0x1cf48>
   2e91c:	add	r3, r3, #24
   2e920:	b	2e930 <__assert_fail@plt+0x1cd8c>
   2e924:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   2e928:	cmp	r2, #0
   2e92c:	beq	2eaec <__assert_fail@plt+0x1cf48>
   2e930:	ldr	r2, [r3, #-24]	; 0xffffffe8
   2e934:	add	r3, r3, #24
   2e938:	cmp	fp, r2
   2e93c:	bne	2e924 <__assert_fail@plt+0x1cd80>
   2e940:	mov	r3, #0
   2e944:	str	r3, [sp, #72]	; 0x48
   2e948:	cmp	r8, ip
   2e94c:	lsl	r3, fp, #2
   2e950:	str	r3, [sp, #48]	; 0x30
   2e954:	bge	2eab8 <__assert_fail@plt+0x1cf14>
   2e958:	add	r3, fp, fp, lsl #1
   2e95c:	add	r4, r8, r8, lsl #1
   2e960:	lsl	r3, r3, #2
   2e964:	str	r3, [sp, #56]	; 0x38
   2e968:	lsl	r4, r4, #3
   2e96c:	ldr	r6, [sp, #36]	; 0x24
   2e970:	b	2e984 <__assert_fail@plt+0x1cde0>
   2e974:	add	r8, r8, #1
   2e978:	cmp	r8, ip
   2e97c:	add	r4, r4, #24
   2e980:	bge	2eab8 <__assert_fail@plt+0x1cf14>
   2e984:	ldr	r3, [sl, #116]	; 0x74
   2e988:	add	r2, r3, r4
   2e98c:	ldr	r3, [r3, r4]
   2e990:	cmp	fp, r3
   2e994:	bne	2e974 <__assert_fail@plt+0x1cdd0>
   2e998:	ldr	r3, [r2, #4]
   2e99c:	cmp	r9, r3
   2e9a0:	bne	2e974 <__assert_fail@plt+0x1cdd0>
   2e9a4:	ldr	r3, [r2, #12]
   2e9a8:	ldr	r5, [r2, #8]
   2e9ac:	subs	r2, r3, r5
   2e9b0:	str	r2, [sp, #28]
   2e9b4:	ldreq	r0, [sp, #56]	; 0x38
   2e9b8:	ldreq	r2, [r6, #20]
   2e9bc:	ldrne	r2, [r6, #12]
   2e9c0:	addeq	r2, r2, r0
   2e9c4:	ldrne	r0, [sp, #48]	; 0x30
   2e9c8:	ldreq	r2, [r2, #8]
   2e9cc:	ldreq	r1, [r6, #24]
   2e9d0:	ldrne	r2, [r2, r0]
   2e9d4:	ldreq	r2, [r2]
   2e9d8:	ldrne	r1, [r6, #24]
   2e9dc:	add	r3, r9, r3
   2e9e0:	add	r2, r2, r2, lsl #1
   2e9e4:	sub	r5, r3, r5
   2e9e8:	add	r2, r1, r2, lsl #2
   2e9ec:	str	r2, [sp, #24]
   2e9f0:	sub	r1, r5, #1
   2e9f4:	ldr	r2, [sl, #88]	; 0x58
   2e9f8:	mov	r0, sl
   2e9fc:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2ea00:	ldr	r7, [sl, #100]	; 0x64
   2ea04:	ldr	r2, [sp, #52]	; 0x34
   2ea08:	ldr	r1, [r7, r2]
   2ea0c:	ldr	r2, [r7, r5, lsl #2]
   2ea10:	cmp	r1, #0
   2ea14:	moveq	r1, #0
   2ea18:	ldrne	r1, [r1, #8]
   2ea1c:	cmp	r2, #0
   2ea20:	str	r1, [sp, #44]	; 0x2c
   2ea24:	mov	r3, r0
   2ea28:	beq	2ec8c <__assert_fail@plt+0x1d0e8>
   2ea2c:	str	r0, [sp, #32]
   2ea30:	ldr	r1, [r2, #40]	; 0x28
   2ea34:	add	r0, sp, #76	; 0x4c
   2ea38:	ldr	r2, [sp, #24]
   2ea3c:	bl	23c60 <__assert_fail@plt+0x120bc>
   2ea40:	ldr	r3, [sp, #32]
   2ea44:	cmp	r0, #0
   2ea48:	str	r0, [sp, #72]	; 0x48
   2ea4c:	bne	2ed2c <__assert_fail@plt+0x1d188>
   2ea50:	add	r2, sp, #76	; 0x4c
   2ea54:	mov	r1, r6
   2ea58:	add	r0, sp, #72	; 0x48
   2ea5c:	ldr	r7, [sl, #100]	; 0x64
   2ea60:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2ea64:	str	r0, [r7, r5, lsl #2]
   2ea68:	ldr	r0, [sp, #84]	; 0x54
   2ea6c:	bl	184ec <__assert_fail@plt+0x6948>
   2ea70:	ldr	r3, [sl, #100]	; 0x64
   2ea74:	ldr	r2, [r3, r5, lsl #2]
   2ea78:	cmp	r2, #0
   2ea7c:	beq	2ecb0 <__assert_fail@plt+0x1d10c>
   2ea80:	ldr	r2, [sp, #28]
   2ea84:	cmp	r2, #0
   2ea88:	bne	2eaa4 <__assert_fail@plt+0x1cf00>
   2ea8c:	ldr	r2, [sp, #52]	; 0x34
   2ea90:	ldr	r3, [r3, r2]
   2ea94:	ldr	r2, [sp, #44]	; 0x2c
   2ea98:	ldr	r3, [r3, #8]
   2ea9c:	cmp	r3, r2
   2eaa0:	bgt	2ecc0 <__assert_fail@plt+0x1d11c>
   2eaa4:	ldr	ip, [sl, #108]	; 0x6c
   2eaa8:	add	r8, r8, #1
   2eaac:	cmp	r8, ip
   2eab0:	add	r4, r4, #24
   2eab4:	blt	2e984 <__assert_fail@plt+0x1cde0>
   2eab8:	ldr	r3, [sp, #64]	; 0x40
   2eabc:	ldr	r6, [r3]
   2eac0:	b	2e7dc <__assert_fail@plt+0x1cc38>
   2eac4:	mov	r4, r2
   2eac8:	mov	r2, r3
   2eacc:	add	r0, r4, #1
   2ead0:	mov	r3, r2
   2ead4:	b	2e888 <__assert_fail@plt+0x1cce4>
   2ead8:	tst	r4, #8
   2eadc:	beq	2e858 <__assert_fail@plt+0x1ccb4>
   2eae0:	tst	r0, #1
   2eae4:	beq	2e858 <__assert_fail@plt+0x1ccb4>
   2eae8:	b	2e7dc <__assert_fail@plt+0x1cc38>
   2eaec:	ldr	r3, [sl, #84]	; 0x54
   2eaf0:	ldr	r1, [sl, #124]	; 0x7c
   2eaf4:	str	r3, [sp, #60]	; 0x3c
   2eaf8:	ldr	r3, [r3]
   2eafc:	cmp	r1, #0
   2eb00:	ldr	r2, [r3, fp, lsl #3]
   2eb04:	str	r2, [sp, #56]	; 0x38
   2eb08:	ble	2e940 <__assert_fail@plt+0x1cd9c>
   2eb0c:	ldr	r2, [sl, #4]
   2eb10:	str	r9, [sp, #32]
   2eb14:	mov	ip, r2
   2eb18:	mov	r2, #0
   2eb1c:	mov	r0, r2
   2eb20:	str	r2, [sp, #44]	; 0x2c
   2eb24:	str	fp, [sp, #48]	; 0x30
   2eb28:	str	r8, [sp, #68]	; 0x44
   2eb2c:	ldr	r2, [sl, #132]	; 0x84
   2eb30:	ldr	r4, [r2, r0, lsl #2]
   2eb34:	ldr	r2, [r4, #4]
   2eb38:	ldr	r3, [r3, r2, lsl #3]
   2eb3c:	ldr	r2, [sp, #56]	; 0x38
   2eb40:	cmp	r2, r3
   2eb44:	beq	2eb6c <__assert_fail@plt+0x1cfc8>
   2eb48:	ldr	r3, [sp, #44]	; 0x2c
   2eb4c:	add	r3, r3, #1
   2eb50:	cmp	r3, r1
   2eb54:	str	r3, [sp, #44]	; 0x2c
   2eb58:	bge	2ef50 <__assert_fail@plt+0x1d3ac>
   2eb5c:	ldr	r3, [sp, #60]	; 0x3c
   2eb60:	ldr	r0, [sp, #44]	; 0x2c
   2eb64:	ldr	r3, [r3]
   2eb68:	b	2eb2c <__assert_fail@plt+0x1cf88>
   2eb6c:	ldr	r2, [r4, #16]
   2eb70:	ldr	r7, [r4]
   2eb74:	cmp	r2, #0
   2eb78:	ble	2ef94 <__assert_fail@plt+0x1d3f0>
   2eb7c:	ldr	r3, [sp, #32]
   2eb80:	mov	r6, #0
   2eb84:	str	r7, [sp, #24]
   2eb88:	mov	fp, ip
   2eb8c:	b	2eba8 <__assert_fail@plt+0x1d004>
   2eb90:	ldr	r2, [r4, #16]
   2eb94:	add	r6, r6, #1
   2eb98:	cmp	r6, r2
   2eb9c:	str	r7, [sp, #24]
   2eba0:	mov	r3, r8
   2eba4:	bge	2ed4c <__assert_fail@plt+0x1d1a8>
   2eba8:	ldr	r1, [r4, #20]
   2ebac:	ldr	r9, [r1, r6, lsl #2]
   2ebb0:	ldr	r1, [sp, #24]
   2ebb4:	ldr	r7, [r9, #4]
   2ebb8:	sub	r5, r7, r1
   2ebbc:	cmp	r5, #0
   2ebc0:	addle	r8, r5, r3
   2ebc4:	ble	2ebfc <__assert_fail@plt+0x1d058>
   2ebc8:	ldr	r1, [sl, #28]
   2ebcc:	add	r8, r5, r3
   2ebd0:	cmp	r8, r1
   2ebd4:	bgt	2ec2c <__assert_fail@plt+0x1d088>
   2ebd8:	ldr	r1, [sp, #24]
   2ebdc:	add	r0, fp, r3
   2ebe0:	mov	r2, r5
   2ebe4:	add	r1, fp, r1
   2ebe8:	str	r3, [sp, #28]
   2ebec:	bl	117c0 <memcmp@plt>
   2ebf0:	ldr	r3, [sp, #28]
   2ebf4:	cmp	r0, #0
   2ebf8:	bne	2eecc <__assert_fail@plt+0x1d328>
   2ebfc:	ldr	r3, [sp, #32]
   2ec00:	mov	r2, r9
   2ec04:	str	r3, [sp]
   2ec08:	mov	r1, r4
   2ec0c:	ldr	r3, [sp, #48]	; 0x30
   2ec10:	mov	r0, sl
   2ec14:	bl	2e5c4 <__assert_fail@plt+0x1ca20>
   2ec18:	ldr	fp, [sl, #4]
   2ec1c:	cmp	r0, #1
   2ec20:	bls	2eb90 <__assert_fail@plt+0x1cfec>
   2ec24:	add	sp, sp, #92	; 0x5c
   2ec28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec2c:	ldr	r0, [sl, #48]	; 0x30
   2ec30:	cmp	r8, r0
   2ec34:	bgt	2efa0 <__assert_fail@plt+0x1d3fc>
   2ec38:	ldr	r2, [sl, #36]	; 0x24
   2ec3c:	ldr	fp, [sl, #104]	; 0x68
   2ec40:	cmp	r8, r2
   2ec44:	cmpge	r0, r2
   2ec48:	bgt	2ed0c <__assert_fail@plt+0x1d168>
   2ec4c:	cmp	r1, r0
   2ec50:	blt	2ed0c <__assert_fail@plt+0x1d168>
   2ec54:	cmp	r8, fp
   2ec58:	ble	2ec84 <__assert_fail@plt+0x1d0e0>
   2ec5c:	sub	r2, r8, fp
   2ec60:	ldr	r0, [sl, #100]	; 0x64
   2ec64:	add	fp, fp, #1
   2ec68:	lsl	r2, r2, #2
   2ec6c:	add	r0, r0, fp, lsl #2
   2ec70:	mov	r1, #0
   2ec74:	str	r3, [sp, #28]
   2ec78:	bl	119e8 <memset@plt>
   2ec7c:	ldr	r3, [sp, #28]
   2ec80:	str	r8, [sl, #104]	; 0x68
   2ec84:	ldr	fp, [sl, #4]
   2ec88:	b	2ebd8 <__assert_fail@plt+0x1d034>
   2ec8c:	ldr	r2, [sp, #24]
   2ec90:	mov	r1, r6
   2ec94:	add	r0, sp, #72	; 0x48
   2ec98:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2ec9c:	ldr	r3, [sl, #100]	; 0x64
   2eca0:	str	r0, [r7, r5, lsl #2]
   2eca4:	ldr	r2, [r3, r5, lsl #2]
   2eca8:	cmp	r2, #0
   2ecac:	bne	2ea80 <__assert_fail@plt+0x1cedc>
   2ecb0:	ldr	r0, [sp, #72]	; 0x48
   2ecb4:	cmp	r0, #0
   2ecb8:	beq	2ea80 <__assert_fail@plt+0x1cedc>
   2ecbc:	b	2ec24 <__assert_fail@plt+0x1d080>
   2ecc0:	ldr	r3, [sp, #24]
   2ecc4:	mov	r0, sl
   2ecc8:	add	r5, r3, #4
   2eccc:	add	r7, r3, #8
   2ecd0:	mov	r2, r7
   2ecd4:	mov	r1, r5
   2ecd8:	mov	r3, r9
   2ecdc:	bl	24b88 <__assert_fail@plt+0x12fe4>
   2ece0:	cmp	r0, #0
   2ece4:	str	r0, [sp, #72]	; 0x48
   2ece8:	bne	2ec24 <__assert_fail@plt+0x1d080>
   2ecec:	mov	r2, r7
   2ecf0:	mov	r1, r5
   2ecf4:	mov	r0, sl
   2ecf8:	bl	2e798 <__assert_fail@plt+0x1cbf4>
   2ecfc:	cmp	r0, #0
   2ed00:	str	r0, [sp, #72]	; 0x48
   2ed04:	beq	2eaa4 <__assert_fail@plt+0x1cf00>
   2ed08:	b	2ec24 <__assert_fail@plt+0x1d080>
   2ed0c:	add	r1, r8, #1
   2ed10:	mov	r0, sl
   2ed14:	str	r3, [sp, #28]
   2ed18:	bl	28544 <__assert_fail@plt+0x169a0>
   2ed1c:	ldr	r3, [sp, #28]
   2ed20:	cmp	r0, #0
   2ed24:	beq	2ec54 <__assert_fail@plt+0x1d0b0>
   2ed28:	b	2ec24 <__assert_fail@plt+0x1d080>
   2ed2c:	ldr	r0, [sp, #84]	; 0x54
   2ed30:	bl	184ec <__assert_fail@plt+0x6948>
   2ed34:	ldr	r0, [sp, #72]	; 0x48
   2ed38:	add	sp, sp, #92	; 0x5c
   2ed3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed40:	mov	r0, #0
   2ed44:	add	sp, sp, #92	; 0x5c
   2ed48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed4c:	mov	ip, fp
   2ed50:	mov	fp, r7
   2ed54:	ldr	r3, [sp, #32]
   2ed58:	add	r7, fp, #1
   2ed5c:	cmp	r3, r7
   2ed60:	blt	2eec4 <__assert_fail@plt+0x1d320>
   2ed64:	ldr	r9, [sp, #56]	; 0x38
   2ed68:	lsl	r6, r7, #2
   2ed6c:	mov	fp, ip
   2ed70:	ldr	r3, [r4]
   2ed74:	sub	r3, r7, r3
   2ed78:	cmp	r3, #0
   2ed7c:	ble	2eda8 <__assert_fail@plt+0x1d204>
   2ed80:	ldr	r3, [sl, #28]
   2ed84:	cmp	r3, r8
   2ed88:	ble	2ef24 <__assert_fail@plt+0x1d380>
   2ed8c:	add	r5, r8, #1
   2ed90:	add	r3, fp, r7
   2ed94:	ldrb	r2, [fp, r8]
   2ed98:	ldrb	r3, [r3, #-1]
   2ed9c:	cmp	r2, r3
   2eda0:	bne	2eec0 <__assert_fail@plt+0x1d31c>
   2eda4:	mov	r8, r5
   2eda8:	ldr	r3, [sl, #100]	; 0x64
   2edac:	ldr	r3, [r3, r6]
   2edb0:	cmp	r3, #0
   2edb4:	beq	2eeac <__assert_fail@plt+0x1d308>
   2edb8:	ldr	ip, [r3, #8]
   2edbc:	cmp	ip, #0
   2edc0:	ble	2eeac <__assert_fail@plt+0x1d308>
   2edc4:	ldr	r2, [r3, #12]
   2edc8:	ldr	r3, [sp, #60]	; 0x3c
   2edcc:	sub	r2, r2, #4
   2edd0:	ldr	r0, [r3]
   2edd4:	mov	r3, #0
   2edd8:	b	2ede4 <__assert_fail@plt+0x1d240>
   2eddc:	cmp	ip, r3
   2ede0:	beq	2eeac <__assert_fail@plt+0x1d308>
   2ede4:	ldr	r5, [r2, #4]!
   2ede8:	add	r3, r3, #1
   2edec:	add	r1, r0, r5, lsl #3
   2edf0:	ldrb	r1, [r1, #4]
   2edf4:	cmp	r1, #9
   2edf8:	bne	2eddc <__assert_fail@plt+0x1d238>
   2edfc:	ldr	r1, [r0, r5, lsl #3]
   2ee00:	cmp	r9, r1
   2ee04:	bne	2eddc <__assert_fail@plt+0x1d238>
   2ee08:	cmn	r5, #1
   2ee0c:	beq	2eeac <__assert_fail@plt+0x1d308>
   2ee10:	ldr	r1, [r4, #8]
   2ee14:	cmp	r1, #0
   2ee18:	beq	2eefc <__assert_fail@plt+0x1d358>
   2ee1c:	mov	r0, #9
   2ee20:	ldr	r3, [r4]
   2ee24:	ldr	r2, [r4, #4]
   2ee28:	str	r0, [sp, #8]
   2ee2c:	stm	sp, {r5, r7}
   2ee30:	mov	r0, sl
   2ee34:	bl	2dd08 <__assert_fail@plt+0x1c164>
   2ee38:	cmp	r0, #1
   2ee3c:	beq	2eeac <__assert_fail@plt+0x1d308>
   2ee40:	cmp	r0, #0
   2ee44:	bne	2ec24 <__assert_fail@plt+0x1d080>
   2ee48:	ldr	r3, [r4, #16]
   2ee4c:	ldr	r2, [r4, #12]
   2ee50:	cmp	r3, r2
   2ee54:	beq	2ef6c <__assert_fail@plt+0x1d3c8>
   2ee58:	mov	r1, #20
   2ee5c:	mov	r0, #1
   2ee60:	bl	368fc <__assert_fail@plt+0x24d58>
   2ee64:	cmp	r0, #0
   2ee68:	beq	2ef64 <__assert_fail@plt+0x1d3c0>
   2ee6c:	ldr	r3, [r4, #16]
   2ee70:	ldr	r2, [r4, #20]
   2ee74:	add	r1, r3, #1
   2ee78:	str	r0, [r2, r3, lsl #2]
   2ee7c:	stm	r0, {r5, r7}
   2ee80:	mov	r2, r0
   2ee84:	ldr	r0, [sp, #32]
   2ee88:	str	r1, [r4, #16]
   2ee8c:	ldr	r3, [sp, #48]	; 0x30
   2ee90:	str	r0, [sp]
   2ee94:	mov	r1, r4
   2ee98:	mov	r0, sl
   2ee9c:	bl	2e5c4 <__assert_fail@plt+0x1ca20>
   2eea0:	ldr	fp, [sl, #4]
   2eea4:	cmp	r0, #1
   2eea8:	bhi	2ec24 <__assert_fail@plt+0x1d080>
   2eeac:	ldr	r3, [sp, #32]
   2eeb0:	add	r7, r7, #1
   2eeb4:	cmp	r3, r7
   2eeb8:	add	r6, r6, #4
   2eebc:	bge	2ed70 <__assert_fail@plt+0x1d1cc>
   2eec0:	mov	ip, fp
   2eec4:	ldr	r1, [sl, #124]	; 0x7c
   2eec8:	b	2eb48 <__assert_fail@plt+0x1cfa4>
   2eecc:	ldr	r7, [sp, #24]
   2eed0:	ldr	r2, [r4, #16]
   2eed4:	mov	ip, fp
   2eed8:	cmp	r6, r2
   2eedc:	blt	2eec4 <__assert_fail@plt+0x1d320>
   2eee0:	cmp	r6, #0
   2eee4:	movle	r8, r3
   2eee8:	ldrle	r3, [sp, #32]
   2eeec:	ble	2ed5c <__assert_fail@plt+0x1d1b8>
   2eef0:	mov	fp, r7
   2eef4:	mov	r8, r3
   2eef8:	b	2ed54 <__assert_fail@plt+0x1d1b0>
   2eefc:	ldr	r1, [r4]
   2ef00:	mov	r0, #12
   2ef04:	sub	r1, r7, r1
   2ef08:	add	r1, r1, #1
   2ef0c:	bl	368fc <__assert_fail@plt+0x24d58>
   2ef10:	cmp	r0, #0
   2ef14:	str	r0, [r4, #8]
   2ef18:	beq	2ef64 <__assert_fail@plt+0x1d3c0>
   2ef1c:	mov	r1, r0
   2ef20:	b	2ee1c <__assert_fail@plt+0x1d278>
   2ef24:	ldr	r3, [sl, #48]	; 0x30
   2ef28:	cmp	r3, r8
   2ef2c:	ble	2eec0 <__assert_fail@plt+0x1d31c>
   2ef30:	add	r5, r8, #1
   2ef34:	mov	r1, r5
   2ef38:	mov	r0, sl
   2ef3c:	bl	28544 <__assert_fail@plt+0x169a0>
   2ef40:	cmp	r0, #0
   2ef44:	bne	2ec24 <__assert_fail@plt+0x1d080>
   2ef48:	ldr	fp, [sl, #4]
   2ef4c:	b	2ed90 <__assert_fail@plt+0x1d1ec>
   2ef50:	ldr	r9, [sp, #32]
   2ef54:	ldr	fp, [sp, #48]	; 0x30
   2ef58:	ldr	r8, [sp, #68]	; 0x44
   2ef5c:	ldr	ip, [sl, #108]	; 0x6c
   2ef60:	b	2e940 <__assert_fail@plt+0x1cd9c>
   2ef64:	mov	r0, #12
   2ef68:	b	2ec24 <__assert_fail@plt+0x1d080>
   2ef6c:	lsl	r3, r3, #1
   2ef70:	add	fp, r3, #1
   2ef74:	ldr	r0, [r4, #20]
   2ef78:	lsl	r1, fp, #2
   2ef7c:	bl	36970 <__assert_fail@plt+0x24dcc>
   2ef80:	cmp	r0, #0
   2ef84:	beq	2ef64 <__assert_fail@plt+0x1d3c0>
   2ef88:	str	r0, [r4, #20]
   2ef8c:	str	fp, [r4, #12]
   2ef90:	b	2ee58 <__assert_fail@plt+0x1d2b4>
   2ef94:	ldr	r8, [sp, #32]
   2ef98:	mov	r3, r8
   2ef9c:	b	2ed5c <__assert_fail@plt+0x1d1b8>
   2efa0:	ldr	r7, [sp, #24]
   2efa4:	mov	ip, fp
   2efa8:	b	2eed8 <__assert_fail@plt+0x1d334>
   2efac:	andeq	pc, r3, r0, lsl #30
   2efb0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2efb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2efb8:	mov	r4, r1
   2efbc:	ldr	r3, [r1, #104]	; 0x68
   2efc0:	ldr	r5, [r1, #40]	; 0x28
   2efc4:	sub	sp, sp, #20
   2efc8:	cmp	r5, r3
   2efcc:	mov	r8, r0
   2efd0:	ldr	r7, [r1, #84]	; 0x54
   2efd4:	ldr	r3, [r1, #100]	; 0x64
   2efd8:	ble	2f004 <__assert_fail@plt+0x1d460>
   2efdc:	mov	r6, r2
   2efe0:	lsl	r9, r5, #2
   2efe4:	str	r2, [r3, r5, lsl #2]
   2efe8:	str	r5, [r1, #104]	; 0x68
   2efec:	ldr	r3, [r7, #76]	; 0x4c
   2eff0:	cmp	r3, #0
   2eff4:	bne	2f0d0 <__assert_fail@plt+0x1d52c>
   2eff8:	mov	r0, r6
   2effc:	add	sp, sp, #20
   2f000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f004:	ldr	r1, [r3, r5, lsl #2]
   2f008:	lsl	r9, r5, #2
   2f00c:	cmp	r1, #0
   2f010:	add	sl, r3, r9
   2f014:	streq	r2, [r3, r5, lsl #2]
   2f018:	moveq	r6, r2
   2f01c:	beq	2efec <__assert_fail@plt+0x1d448>
   2f020:	cmp	r2, #0
   2f024:	ldr	r3, [r1, #40]	; 0x28
   2f028:	beq	2f094 <__assert_fail@plt+0x1d4f0>
   2f02c:	ldr	sl, [r2, #40]	; 0x28
   2f030:	add	r0, sp, #4
   2f034:	mov	r2, r3
   2f038:	mov	r1, sl
   2f03c:	bl	23c60 <__assert_fail@plt+0x120bc>
   2f040:	cmp	r0, #0
   2f044:	str	r0, [r8]
   2f048:	bne	2f130 <__assert_fail@plt+0x1d58c>
   2f04c:	ldr	r1, [r4, #40]	; 0x28
   2f050:	ldr	r2, [r4, #88]	; 0x58
   2f054:	sub	r1, r1, #1
   2f058:	mov	r0, r4
   2f05c:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2f060:	add	r2, sp, #4
   2f064:	mov	r1, r7
   2f068:	ldr	fp, [r4, #100]	; 0x64
   2f06c:	mov	r3, r0
   2f070:	mov	r0, r8
   2f074:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2f078:	cmp	sl, #0
   2f07c:	mov	r6, r0
   2f080:	str	r0, [fp, r5, lsl #2]
   2f084:	beq	2efec <__assert_fail@plt+0x1d448>
   2f088:	ldr	r0, [sp, #12]
   2f08c:	bl	184ec <__assert_fail@plt+0x6948>
   2f090:	b	2efec <__assert_fail@plt+0x1d448>
   2f094:	ldm	r3, {r0, r1, r2}
   2f098:	add	r6, sp, #4
   2f09c:	stm	r6, {r0, r1, r2}
   2f0a0:	sub	r1, r5, #1
   2f0a4:	ldr	r2, [r4, #88]	; 0x58
   2f0a8:	mov	r0, r4
   2f0ac:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2f0b0:	mov	r2, r6
   2f0b4:	mov	r1, r7
   2f0b8:	mov	r3, r0
   2f0bc:	mov	r0, r8
   2f0c0:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2f0c4:	mov	r6, r0
   2f0c8:	str	r0, [sl]
   2f0cc:	b	2efec <__assert_fail@plt+0x1d448>
   2f0d0:	cmp	r6, #0
   2f0d4:	beq	2f130 <__assert_fail@plt+0x1d58c>
   2f0d8:	add	r7, r6, #8
   2f0dc:	add	sl, r6, #12
   2f0e0:	mov	r3, r5
   2f0e4:	mov	r1, r7
   2f0e8:	mov	r2, sl
   2f0ec:	mov	r0, r4
   2f0f0:	bl	24b88 <__assert_fail@plt+0x12fe4>
   2f0f4:	cmp	r0, #0
   2f0f8:	str	r0, [r8]
   2f0fc:	bne	2f130 <__assert_fail@plt+0x1d58c>
   2f100:	ldrb	r3, [r6, #52]	; 0x34
   2f104:	tst	r3, #64	; 0x40
   2f108:	beq	2eff8 <__assert_fail@plt+0x1d454>
   2f10c:	mov	r2, sl
   2f110:	mov	r1, r7
   2f114:	mov	r0, r4
   2f118:	bl	2e798 <__assert_fail@plt+0x1cbf4>
   2f11c:	cmp	r0, #0
   2f120:	str	r0, [r8]
   2f124:	ldreq	r3, [r4, #100]	; 0x64
   2f128:	ldreq	r6, [r3, r9]
   2f12c:	beq	2eff8 <__assert_fail@plt+0x1d454>
   2f130:	mov	r6, #0
   2f134:	b	2eff8 <__assert_fail@plt+0x1d454>
   2f138:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f13c:	mov	r7, r0
   2f140:	sub	sp, sp, #420	; 0x1a4
   2f144:	mov	r5, r3
   2f148:	ldr	r3, [r7]
   2f14c:	str	r0, [sp, #44]	; 0x2c
   2f150:	str	r1, [sp, #60]	; 0x3c
   2f154:	str	r2, [sp, #72]	; 0x48
   2f158:	mov	r1, #0
   2f15c:	add	r0, sp, #140	; 0x8c
   2f160:	mov	r2, #136	; 0x88
   2f164:	mov	r8, r3
   2f168:	str	r3, [sp, #28]
   2f16c:	ldr	r4, [sp, #456]	; 0x1c8
   2f170:	ldr	r6, [sp, #464]	; 0x1d0
   2f174:	bl	119e8 <memset@plt>
   2f178:	ldr	r1, [r7, #16]
   2f17c:	str	r8, [sp, #224]	; 0xe0
   2f180:	cmp	r1, #0
   2f184:	streq	r1, [sp, #64]	; 0x40
   2f188:	beq	2f1b4 <__assert_fail@plt+0x1d610>
   2f18c:	ldrb	r2, [r7, #28]
   2f190:	subs	r3, r5, r4
   2f194:	movne	r3, #1
   2f198:	ands	r3, r3, r2, lsr #3
   2f19c:	streq	r3, [sp, #64]	; 0x40
   2f1a0:	beq	2f1b4 <__assert_fail@plt+0x1d610>
   2f1a4:	tst	r2, #1
   2f1a8:	moveq	r3, r1
   2f1ac:	movne	r3, #0
   2f1b0:	str	r3, [sp, #64]	; 0x40
   2f1b4:	ldr	r3, [sp, #44]	; 0x2c
   2f1b8:	ldr	r3, [r3, #24]
   2f1bc:	cmp	r3, r6
   2f1c0:	subcc	r2, r6, #1
   2f1c4:	subcc	r3, r2, r3
   2f1c8:	ldr	r2, [sp, #44]	; 0x2c
   2f1cc:	movcs	r3, #0
   2f1d0:	str	r3, [sp, #96]	; 0x60
   2f1d4:	ldr	r2, [r2, #8]
   2f1d8:	cmp	r2, #0
   2f1dc:	beq	2f8cc <__assert_fail@plt+0x1dd28>
   2f1e0:	ldr	r2, [sp, #28]
   2f1e4:	ldr	r2, [r2, #36]	; 0x24
   2f1e8:	cmp	r2, #0
   2f1ec:	beq	2f8cc <__assert_fail@plt+0x1dd28>
   2f1f0:	ldr	r1, [sp, #28]
   2f1f4:	ldr	r1, [r1, #40]	; 0x28
   2f1f8:	cmp	r1, #0
   2f1fc:	beq	2f8cc <__assert_fail@plt+0x1dd28>
   2f200:	ldr	r0, [sp, #28]
   2f204:	ldr	ip, [r0, #44]	; 0x2c
   2f208:	cmp	ip, #0
   2f20c:	beq	2f8cc <__assert_fail@plt+0x1dd28>
   2f210:	ldr	r0, [r0, #48]	; 0x30
   2f214:	cmp	r0, #0
   2f218:	beq	2f8cc <__assert_fail@plt+0x1dd28>
   2f21c:	ldr	r2, [r2, #8]
   2f220:	cmp	r2, #0
   2f224:	bne	2f268 <__assert_fail@plt+0x1d6c4>
   2f228:	ldr	r2, [r1, #8]
   2f22c:	cmp	r2, #0
   2f230:	bne	2f268 <__assert_fail@plt+0x1d6c4>
   2f234:	ldr	r2, [ip, #8]
   2f238:	cmp	r2, #0
   2f23c:	beq	2f250 <__assert_fail@plt+0x1d6ac>
   2f240:	ldr	r2, [sp, #44]	; 0x2c
   2f244:	ldrsb	r2, [r2, #28]
   2f248:	cmp	r2, #0
   2f24c:	blt	2f268 <__assert_fail@plt+0x1d6c4>
   2f250:	cmp	r5, #0
   2f254:	cmpne	r4, #0
   2f258:	movne	r4, #1
   2f25c:	moveq	r4, #0
   2f260:	bne	2f8cc <__assert_fail@plt+0x1dd28>
   2f264:	mov	r5, r4
   2f268:	subs	r3, r6, r3
   2f26c:	str	r3, [sp, #56]	; 0x38
   2f270:	movne	r3, #1
   2f274:	strne	r3, [sp, #36]	; 0x24
   2f278:	beq	2f574 <__assert_fail@plt+0x1d9d0>
   2f27c:	ldr	r2, [sp, #28]
   2f280:	ldr	lr, [sp, #44]	; 0x2c
   2f284:	ldr	ip, [sp, #72]	; 0x48
   2f288:	ldr	r3, [r2, #8]
   2f28c:	ldr	r0, [r2, #92]	; 0x5c
   2f290:	add	r3, r3, #1
   2f294:	cmp	r3, r0
   2f298:	ldr	r1, [lr, #12]
   2f29c:	ldrb	r2, [r2, #88]	; 0x58
   2f2a0:	movlt	r3, r0
   2f2a4:	add	r6, ip, #1
   2f2a8:	ldr	lr, [lr, #20]
   2f2ac:	cmp	r3, r6
   2f2b0:	movlt	r6, r3
   2f2b4:	lsr	r1, r1, #22
   2f2b8:	adds	r8, lr, #0
   2f2bc:	and	r1, r1, #1
   2f2c0:	movne	r8, #1
   2f2c4:	lsr	r3, r2, #2
   2f2c8:	ldr	r7, [sp, #60]	; 0x3c
   2f2cc:	lsr	r2, r2, #3
   2f2d0:	and	r3, r3, #1
   2f2d4:	and	r2, r2, #1
   2f2d8:	str	ip, [sp, #188]	; 0xbc
   2f2dc:	str	ip, [sp, #184]	; 0xb8
   2f2e0:	str	ip, [sp, #196]	; 0xc4
   2f2e4:	str	ip, [sp, #192]	; 0xc0
   2f2e8:	cmp	r0, #1
   2f2ec:	orr	ip, r1, r8
   2f2f0:	str	lr, [sp, #80]	; 0x50
   2f2f4:	str	r7, [sp, #140]	; 0x8c
   2f2f8:	str	r0, [sp, #220]	; 0xdc
   2f2fc:	str	lr, [sp, #204]	; 0xcc
   2f300:	strb	r1, [sp, #212]	; 0xd4
   2f304:	strb	ip, [sp, #215]	; 0xd7
   2f308:	strb	r3, [sp, #213]	; 0xd5
   2f30c:	strb	r2, [sp, #214]	; 0xd6
   2f310:	ble	2f360 <__assert_fail@plt+0x1d7bc>
   2f314:	cmn	r6, #-1073741823	; 0xc0000001
   2f318:	bhi	3067c <__assert_fail@plt+0x1ead8>
   2f31c:	lsl	r7, r6, #2
   2f320:	mov	r1, r7
   2f324:	mov	r0, #0
   2f328:	bl	36970 <__assert_fail@plt+0x24dcc>
   2f32c:	subs	r3, r0, #0
   2f330:	beq	2f904 <__assert_fail@plt+0x1dd60>
   2f334:	ldr	r0, [sp, #152]	; 0x98
   2f338:	str	r3, [sp, #148]	; 0x94
   2f33c:	cmp	r0, #0
   2f340:	ldrbeq	ip, [sp, #215]	; 0xd7
   2f344:	beq	2f360 <__assert_fail@plt+0x1d7bc>
   2f348:	mov	r1, r7
   2f34c:	bl	36970 <__assert_fail@plt+0x24dcc>
   2f350:	cmp	r0, #0
   2f354:	beq	2f904 <__assert_fail@plt+0x1dd60>
   2f358:	ldrb	ip, [sp, #215]	; 0xd7
   2f35c:	str	r0, [sp, #152]	; 0x98
   2f360:	cmp	ip, #0
   2f364:	bne	3046c <__assert_fail@plt+0x1e8c8>
   2f368:	ldr	r2, [sp, #28]
   2f36c:	str	r6, [sp, #176]	; 0xb0
   2f370:	add	r2, r2, #96	; 0x60
   2f374:	ldrb	r3, [r2, #-8]
   2f378:	str	r2, [sp, #208]	; 0xd0
   2f37c:	lsr	r3, r3, #4
   2f380:	and	r3, r3, #1
   2f384:	strb	r3, [sp, #218]	; 0xda
   2f388:	ldr	r3, [sp, #28]
   2f38c:	ldr	r2, [sp, #60]	; 0x3c
   2f390:	ldr	r3, [r3, #92]	; 0x5c
   2f394:	str	r2, [sp, #144]	; 0x90
   2f398:	cmp	r3, #1
   2f39c:	ble	302c8 <__assert_fail@plt+0x1e724>
   2f3a0:	mov	r1, #0
   2f3a4:	ldr	r3, [sp, #44]	; 0x2c
   2f3a8:	mvn	r2, #0
   2f3ac:	str	r1, [sp, #168]	; 0xa8
   2f3b0:	ldrb	r3, [r3, #28]
   2f3b4:	str	r1, [sp, #172]	; 0xac
   2f3b8:	lsr	r3, r3, #7
   2f3bc:	strb	r3, [sp, #217]	; 0xd9
   2f3c0:	ldr	r3, [sp, #28]
   2f3c4:	ldr	r7, [r3, #76]	; 0x4c
   2f3c8:	ldr	r3, [sp, #460]	; 0x1cc
   2f3cc:	str	r2, [sp, #232]	; 0xe8
   2f3d0:	str	r3, [sp, #196]	; 0xc4
   2f3d4:	str	r3, [sp, #192]	; 0xc0
   2f3d8:	lsl	r6, r7, #1
   2f3dc:	ldr	r3, [sp, #472]	; 0x1d8
   2f3e0:	cmp	r6, #0
   2f3e4:	str	r3, [sp, #228]	; 0xe4
   2f3e8:	ble	2f424 <__assert_fail@plt+0x1d880>
   2f3ec:	ldr	r3, [pc, #4032]	; 303b4 <__assert_fail@plt+0x1e810>
   2f3f0:	cmp	r6, r3
   2f3f4:	bgt	2f904 <__assert_fail@plt+0x1dd60>
   2f3f8:	add	r0, r6, r7, lsl #2
   2f3fc:	lsl	r0, r0, #3
   2f400:	bl	36944 <__assert_fail@plt+0x24da0>
   2f404:	str	r0, [sp, #256]	; 0x100
   2f408:	lsl	r0, r7, #3
   2f40c:	bl	36944 <__assert_fail@plt+0x24da0>
   2f410:	ldr	r3, [sp, #256]	; 0x100
   2f414:	cmp	r0, #0
   2f418:	cmpne	r3, #0
   2f41c:	str	r0, [sp, #272]	; 0x110
   2f420:	beq	2f904 <__assert_fail@plt+0x1dd60>
   2f424:	ldr	r3, [sp, #56]	; 0x38
   2f428:	str	r6, [sp, #252]	; 0xfc
   2f42c:	cmp	r3, #1
   2f430:	mov	r3, #1
   2f434:	str	r6, [sp, #268]	; 0x10c
   2f438:	str	r3, [sp, #260]	; 0x104
   2f43c:	bls	304b4 <__assert_fail@plt+0x1e910>
   2f440:	ldr	r3, [sp, #176]	; 0xb0
   2f444:	cmn	r3, #-1073741822	; 0xc0000002
   2f448:	bhi	2f904 <__assert_fail@plt+0x1dd60>
   2f44c:	add	r3, r3, #1
   2f450:	lsl	r0, r3, #2
   2f454:	bl	36944 <__assert_fail@plt+0x24da0>
   2f458:	cmp	r0, #0
   2f45c:	str	r0, [sp, #240]	; 0xf0
   2f460:	beq	2fecc <__assert_fail@plt+0x1e328>
   2f464:	ldr	r3, [sp, #472]	; 0x1d8
   2f468:	str	r5, [sp, #112]	; 0x70
   2f46c:	tst	r3, #1
   2f470:	moveq	r3, #6
   2f474:	movne	r3, #4
   2f478:	cmp	r5, r4
   2f47c:	movle	r2, #1
   2f480:	mvngt	r2, #0
   2f484:	str	r2, [sp, #92]	; 0x5c
   2f488:	str	r3, [sp, #200]	; 0xc8
   2f48c:	movlt	r2, r5
   2f490:	movge	r2, r4
   2f494:	ldr	r3, [sp, #28]
   2f498:	str	r2, [sp, #68]	; 0x44
   2f49c:	movge	r2, r5
   2f4a0:	movlt	r2, r4
   2f4a4:	str	r2, [sp, #52]	; 0x34
   2f4a8:	ldr	r2, [sp, #64]	; 0x40
   2f4ac:	ldr	r3, [r3, #92]	; 0x5c
   2f4b0:	cmp	r2, #0
   2f4b4:	str	r3, [sp, #84]	; 0x54
   2f4b8:	beq	305fc <__assert_fail@plt+0x1ea58>
   2f4bc:	cmp	r3, #1
   2f4c0:	moveq	r3, #4
   2f4c4:	beq	2f4ec <__assert_fail@plt+0x1d948>
   2f4c8:	ldr	r3, [sp, #44]	; 0x2c
   2f4cc:	ldr	r2, [sp, #80]	; 0x50
   2f4d0:	ldr	r3, [r3, #12]
   2f4d4:	lsr	r3, r3, #22
   2f4d8:	eor	r3, r3, #1
   2f4dc:	cmp	r2, #0
   2f4e0:	movne	r3, #0
   2f4e4:	andeq	r3, r3, #1
   2f4e8:	lsl	r3, r3, #2
   2f4ec:	cmp	r5, r4
   2f4f0:	orr	r3, r8, r3
   2f4f4:	movle	r2, #2
   2f4f8:	movgt	r2, #0
   2f4fc:	orr	r3, r3, r2
   2f500:	ldr	r2, [sp, #68]	; 0x44
   2f504:	ldr	r1, [sp, #52]	; 0x34
   2f508:	cmp	r5, r2
   2f50c:	movge	r2, #0
   2f510:	movlt	r2, #1
   2f514:	cmp	r5, r1
   2f518:	orrgt	r2, r2, #1
   2f51c:	cmp	r2, #0
   2f520:	str	r2, [sp, #108]	; 0x6c
   2f524:	bne	2f8bc <__assert_fail@plt+0x1dd18>
   2f528:	sub	r3, r3, #4
   2f52c:	cmp	r5, r4
   2f530:	str	r3, [sp, #88]	; 0x58
   2f534:	add	r3, sp, #416	; 0x1a0
   2f538:	suble	r3, r3, #304	; 0x130
   2f53c:	movgt	r3, #0
   2f540:	str	r3, [sp, #100]	; 0x64
   2f544:	movle	r3, #1
   2f548:	movgt	r3, #0
   2f54c:	str	r3, [sp, #104]	; 0x68
   2f550:	ldr	r3, [sp, #88]	; 0x58
   2f554:	cmp	r3, #4
   2f558:	ldrls	pc, [pc, r3, lsl #2]
   2f55c:	b	302f8 <__assert_fail@plt+0x1e754>
   2f560:	andeq	r0, r3, r0, asr #4
   2f564:	andeq	r0, r3, r0, asr #4
   2f568:	andeq	pc, r2, ip, lsl #11
   2f56c:	ldrdeq	r0, [r3], -r4
   2f570:	andeq	pc, r2, r0, lsr r6	; <UNPREDICTABLE>
   2f574:	ldr	r3, [sp, #28]
   2f578:	ldr	r3, [r3, #76]	; 0x4c
   2f57c:	adds	r3, r3, #0
   2f580:	movne	r3, #1
   2f584:	str	r3, [sp, #36]	; 0x24
   2f588:	b	2f27c <__assert_fail@plt+0x1d6d8>
   2f58c:	ldr	r3, [sp, #52]	; 0x34
   2f590:	cmp	r3, r5
   2f594:	ble	2f5ec <__assert_fail@plt+0x1da48>
   2f598:	ldr	r3, [sp, #60]	; 0x3c
   2f59c:	ldr	r1, [sp, #64]	; 0x40
   2f5a0:	ldrb	r2, [r3, r5]
   2f5a4:	add	r3, r3, r5
   2f5a8:	ldrb	r2, [r1, r2]
   2f5ac:	cmp	r2, #0
   2f5b0:	bne	2f630 <__assert_fail@plt+0x1da8c>
   2f5b4:	mov	ip, r1
   2f5b8:	add	r2, r5, #1
   2f5bc:	ldr	r0, [sp, #52]	; 0x34
   2f5c0:	b	2f5d8 <__assert_fail@plt+0x1da34>
   2f5c4:	ldrb	r1, [r3, #1]!
   2f5c8:	add	r2, r2, #1
   2f5cc:	ldrb	r1, [ip, r1]
   2f5d0:	cmp	r1, #0
   2f5d4:	bne	304c8 <__assert_fail@plt+0x1e924>
   2f5d8:	cmp	r0, r2
   2f5dc:	mov	r5, r2
   2f5e0:	bne	2f5c4 <__assert_fail@plt+0x1da20>
   2f5e4:	ldr	r3, [sp, #52]	; 0x34
   2f5e8:	str	r3, [sp, #112]	; 0x70
   2f5ec:	cmp	r3, r5
   2f5f0:	bne	2f630 <__assert_fail@plt+0x1da8c>
   2f5f4:	ldr	r2, [sp, #72]	; 0x48
   2f5f8:	ldr	r1, [sp, #80]	; 0x50
   2f5fc:	cmp	r2, r3
   2f600:	movle	r3, #0
   2f604:	ldrgt	r2, [sp, #60]	; 0x3c
   2f608:	ldrbgt	r3, [r2, r3]
   2f60c:	cmp	r1, #0
   2f610:	mov	r2, r3
   2f614:	movne	r2, r1
   2f618:	ldrbne	r2, [r2, r3]
   2f61c:	ldr	r3, [sp, #64]	; 0x40
   2f620:	ldrb	r3, [r3, r2]
   2f624:	cmp	r3, #0
   2f628:	beq	2f8bc <__assert_fail@plt+0x1dd18>
   2f62c:	ldr	r5, [sp, #52]	; 0x34
   2f630:	ldr	r2, [sp, #472]	; 0x1d8
   2f634:	mov	r1, r5
   2f638:	add	r0, sp, #140	; 0x8c
   2f63c:	bl	23fdc <__assert_fail@plt+0x12438>
   2f640:	subs	r3, r0, #0
   2f644:	str	r3, [sp, #48]	; 0x30
   2f648:	bne	30558 <__assert_fail@plt+0x1e9b4>
   2f64c:	ldr	r3, [sp, #84]	; 0x54
   2f650:	cmp	r3, #1
   2f654:	beq	2f674 <__assert_fail@plt+0x1dad0>
   2f658:	ldr	r3, [sp, #168]	; 0xa8
   2f65c:	cmp	r3, #0
   2f660:	beq	2f674 <__assert_fail@plt+0x1dad0>
   2f664:	ldr	r3, [sp, #148]	; 0x94
   2f668:	ldr	r3, [r3]
   2f66c:	cmn	r3, #1
   2f670:	beq	2f88c <__assert_fail@plt+0x1dce8>
   2f674:	ldr	r4, [sp, #224]	; 0xe0
   2f678:	mov	r3, #0
   2f67c:	str	r3, [sp, #260]	; 0x104
   2f680:	ldr	fp, [r4, #36]	; 0x24
   2f684:	str	r3, [sp, #248]	; 0xf8
   2f688:	str	r3, [sp, #244]	; 0xf4
   2f68c:	str	r3, [sp, #116]	; 0x74
   2f690:	ldrsb	r3, [fp, #52]	; 0x34
   2f694:	ldr	r2, [sp, #180]	; 0xb4
   2f698:	cmp	r3, #0
   2f69c:	str	r2, [sp, #12]
   2f6a0:	blt	30388 <__assert_fail@plt+0x1e7e4>
   2f6a4:	ldr	r3, [sp, #240]	; 0xf0
   2f6a8:	cmp	r3, #0
   2f6ac:	beq	304fc <__assert_fail@plt+0x1e958>
   2f6b0:	ldr	r2, [r4, #76]	; 0x4c
   2f6b4:	ldr	r1, [sp, #12]
   2f6b8:	cmp	r2, #0
   2f6bc:	str	fp, [r3, r1, lsl #2]
   2f6c0:	bne	3059c <__assert_fail@plt+0x1e9f8>
   2f6c4:	ldrb	r3, [fp, #52]	; 0x34
   2f6c8:	ldr	r2, [sp, #104]	; 0x68
   2f6cc:	str	r2, [sp, #16]
   2f6d0:	tst	r3, #16
   2f6d4:	bne	30568 <__assert_fail@plt+0x1e9c4>
   2f6d8:	mvn	r3, #0
   2f6dc:	str	r3, [sp, #20]
   2f6e0:	mov	r3, #0
   2f6e4:	str	r3, [sp, #40]	; 0x28
   2f6e8:	ldr	r3, [sp, #100]	; 0x64
   2f6ec:	ldr	r5, [sp, #180]	; 0xb4
   2f6f0:	str	r3, [sp, #32]
   2f6f4:	b	2f700 <__assert_fail@plt+0x1db5c>
   2f6f8:	ldr	r5, [sp, #180]	; 0xb4
   2f6fc:	mov	fp, r4
   2f700:	ldr	r3, [sp, #196]	; 0xc4
   2f704:	cmp	r3, r5
   2f708:	ble	2f9c4 <__assert_fail@plt+0x1de20>
   2f70c:	ldr	r3, [sp, #176]	; 0xb0
   2f710:	add	r9, r5, #1
   2f714:	cmp	r9, r3
   2f718:	bge	2fddc <__assert_fail@plt+0x1e238>
   2f71c:	ldr	r3, [sp, #168]	; 0xa8
   2f720:	cmp	r9, r3
   2f724:	bge	2fe38 <__assert_fail@plt+0x1e294>
   2f728:	ldrb	r3, [fp, #52]	; 0x34
   2f72c:	tst	r3, #32
   2f730:	bne	2fbb0 <__assert_fail@plt+0x1e00c>
   2f734:	ldr	r3, [sp, #144]	; 0x90
   2f738:	add	r2, r5, #1
   2f73c:	str	r2, [sp, #180]	; 0xb4
   2f740:	ldrb	r4, [r3, r5]
   2f744:	ldr	r3, [fp, #44]	; 0x2c
   2f748:	cmp	r3, #0
   2f74c:	beq	2fe08 <__assert_fail@plt+0x1e264>
   2f750:	ldr	r4, [r3, r4, lsl #2]
   2f754:	ldr	r3, [sp, #240]	; 0xf0
   2f758:	cmp	r3, #0
   2f75c:	beq	2f774 <__assert_fail@plt+0x1dbd0>
   2f760:	mov	r2, r4
   2f764:	add	r1, sp, #140	; 0x8c
   2f768:	add	r0, sp, #116	; 0x74
   2f76c:	bl	2efb4 <__assert_fail@plt+0x1d410>
   2f770:	mov	r4, r0
   2f774:	cmp	r4, #0
   2f778:	beq	2f958 <__assert_fail@plt+0x1ddb4>
   2f77c:	ldr	r2, [sp, #16]
   2f780:	ldrb	r3, [r4, #52]	; 0x34
   2f784:	cmp	fp, r4
   2f788:	movne	r2, #0
   2f78c:	andeq	r2, r2, #1
   2f790:	ldr	r1, [sp, #12]
   2f794:	cmp	r2, #0
   2f798:	movne	r1, r9
   2f79c:	tst	r3, #16
   2f7a0:	str	r2, [sp, #16]
   2f7a4:	str	r1, [sp, #12]
   2f7a8:	beq	2f6f8 <__assert_fail@plt+0x1db54>
   2f7ac:	tst	r3, #128	; 0x80
   2f7b0:	bne	2fb5c <__assert_fail@plt+0x1dfb8>
   2f7b4:	ldr	r3, [sp, #180]	; 0xb4
   2f7b8:	str	r3, [sp, #20]
   2f7bc:	ldr	r3, [sp, #36]	; 0x24
   2f7c0:	cmp	r3, #0
   2f7c4:	beq	2f9e4 <__assert_fail@plt+0x1de40>
   2f7c8:	mov	r3, #1
   2f7cc:	str	r3, [sp, #40]	; 0x28
   2f7d0:	mov	r3, #0
   2f7d4:	ldr	r5, [sp, #20]
   2f7d8:	str	r3, [sp, #32]
   2f7dc:	b	2f6fc <__assert_fail@plt+0x1db58>
   2f7e0:	ldr	r0, [sp, #12]
   2f7e4:	bl	184ec <__assert_fail@plt+0x6948>
   2f7e8:	mov	r0, #0
   2f7ec:	bl	184ec <__assert_fail@plt+0x6948>
   2f7f0:	ldr	r3, [sp, #264]	; 0x108
   2f7f4:	cmp	r3, #0
   2f7f8:	movgt	r4, #0
   2f7fc:	ble	2f87c <__assert_fail@plt+0x1dcd8>
   2f800:	ldr	r3, [sp, #272]	; 0x110
   2f804:	ldr	r7, [r3, r4, lsl #2]
   2f808:	ldr	r3, [r7, #16]
   2f80c:	cmp	r3, #0
   2f810:	movgt	r5, #0
   2f814:	ble	2f840 <__assert_fail@plt+0x1dc9c>
   2f818:	ldr	r3, [r7, #20]
   2f81c:	ldr	r6, [r3, r5, lsl #2]
   2f820:	add	r5, r5, #1
   2f824:	ldr	r0, [r6, #16]
   2f828:	bl	184ec <__assert_fail@plt+0x6948>
   2f82c:	mov	r0, r6
   2f830:	bl	184ec <__assert_fail@plt+0x6948>
   2f834:	ldr	r3, [r7, #16]
   2f838:	cmp	r5, r3
   2f83c:	blt	2f818 <__assert_fail@plt+0x1dc74>
   2f840:	ldr	r0, [r7, #20]
   2f844:	bl	184ec <__assert_fail@plt+0x6948>
   2f848:	ldr	r3, [r7, #8]
   2f84c:	cmp	r3, #0
   2f850:	beq	2f864 <__assert_fail@plt+0x1dcc0>
   2f854:	ldr	r0, [r3, #8]
   2f858:	bl	184ec <__assert_fail@plt+0x6948>
   2f85c:	ldr	r0, [r7, #8]
   2f860:	bl	184ec <__assert_fail@plt+0x6948>
   2f864:	mov	r0, r7
   2f868:	bl	184ec <__assert_fail@plt+0x6948>
   2f86c:	ldr	r3, [sp, #264]	; 0x108
   2f870:	add	r4, r4, #1
   2f874:	cmp	r4, r3
   2f878:	blt	2f800 <__assert_fail@plt+0x1dc5c>
   2f87c:	ldr	r5, [sp, #112]	; 0x70
   2f880:	mov	r3, #0
   2f884:	str	r3, [sp, #264]	; 0x108
   2f888:	str	r3, [sp, #248]	; 0xf8
   2f88c:	ldr	r3, [sp, #92]	; 0x5c
   2f890:	ldr	r2, [sp, #68]	; 0x44
   2f894:	add	r5, r5, r3
   2f898:	ldr	r3, [sp, #52]	; 0x34
   2f89c:	str	r5, [sp, #112]	; 0x70
   2f8a0:	cmp	r3, r5
   2f8a4:	movge	r3, #0
   2f8a8:	movlt	r3, #1
   2f8ac:	cmp	r2, r5
   2f8b0:	orrgt	r3, r3, #1
   2f8b4:	cmp	r3, #0
   2f8b8:	beq	2f550 <__assert_fail@plt+0x1d9ac>
   2f8bc:	mov	r3, #1
   2f8c0:	ldr	r7, [sp, #240]	; 0xf0
   2f8c4:	str	r3, [sp, #48]	; 0x30
   2f8c8:	b	2f910 <__assert_fail@plt+0x1dd6c>
   2f8cc:	mov	r3, #1
   2f8d0:	str	r3, [sp, #48]	; 0x30
   2f8d4:	ldr	r0, [sp, #48]	; 0x30
   2f8d8:	add	sp, sp, #420	; 0x1a4
   2f8dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f8e0:	tst	r0, #4
   2f8e4:	beq	2f6a4 <__assert_fail@plt+0x1db00>
   2f8e8:	mov	r3, r0
   2f8ec:	ldr	r2, [fp, #40]	; 0x28
   2f8f0:	mov	r1, r4
   2f8f4:	add	r0, sp, #116	; 0x74
   2f8f8:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2f8fc:	subs	fp, r0, #0
   2f900:	bne	2f6a4 <__assert_fail@plt+0x1db00>
   2f904:	ldr	r7, [sp, #240]	; 0xf0
   2f908:	mov	r3, #12
   2f90c:	str	r3, [sp, #48]	; 0x30
   2f910:	mov	r0, r7
   2f914:	bl	184ec <__assert_fail@plt+0x6948>
   2f918:	ldr	r3, [sp, #28]
   2f91c:	ldr	r3, [r3, #76]	; 0x4c
   2f920:	cmp	r3, #0
   2f924:	bne	303c0 <__assert_fail@plt+0x1e81c>
   2f928:	ldr	r0, [sp, #148]	; 0x94
   2f92c:	bl	184ec <__assert_fail@plt+0x6948>
   2f930:	ldr	r0, [sp, #152]	; 0x98
   2f934:	bl	184ec <__assert_fail@plt+0x6948>
   2f938:	ldrb	r3, [sp, #215]	; 0xd7
   2f93c:	cmp	r3, #0
   2f940:	beq	2f8d4 <__assert_fail@plt+0x1dd30>
   2f944:	ldr	r0, [sp, #144]	; 0x90
   2f948:	bl	184ec <__assert_fail@plt+0x6948>
   2f94c:	ldr	r0, [sp, #48]	; 0x30
   2f950:	add	sp, sp, #420	; 0x1a4
   2f954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f958:	ldr	r3, [sp, #116]	; 0x74
   2f95c:	cmp	r3, #0
   2f960:	bne	30594 <__assert_fail@plt+0x1e9f0>
   2f964:	ldr	r2, [sp, #240]	; 0xf0
   2f968:	cmp	r2, #0
   2f96c:	beq	2f9c4 <__assert_fail@plt+0x1de20>
   2f970:	ldr	r3, [sp, #36]	; 0x24
   2f974:	eor	r5, r3, #1
   2f978:	ldr	r3, [sp, #40]	; 0x28
   2f97c:	ands	r5, r5, r3
   2f980:	bne	2f9c4 <__assert_fail@plt+0x1de20>
   2f984:	ldr	r3, [sp, #180]	; 0xb4
   2f988:	ldr	lr, [sp, #244]	; 0xf4
   2f98c:	mov	r0, r3
   2f990:	add	r2, r2, r3, lsl #2
   2f994:	mov	ip, r5
   2f998:	b	2f9b0 <__assert_fail@plt+0x1de0c>
   2f99c:	ldr	r1, [r2, #4]!
   2f9a0:	mov	r0, r3
   2f9a4:	cmp	r1, #0
   2f9a8:	mov	ip, #1
   2f9ac:	bne	2fb80 <__assert_fail@plt+0x1dfdc>
   2f9b0:	add	r3, r3, #1
   2f9b4:	cmp	lr, r3
   2f9b8:	bge	2f99c <__assert_fail@plt+0x1ddf8>
   2f9bc:	cmp	ip, #0
   2f9c0:	strne	r0, [sp, #180]	; 0xb4
   2f9c4:	ldr	r3, [sp, #32]
   2f9c8:	cmp	r3, #0
   2f9cc:	beq	2f9e4 <__assert_fail@plt+0x1de40>
   2f9d0:	mov	r2, r3
   2f9d4:	ldr	r1, [sp, #12]
   2f9d8:	ldr	r3, [r3]
   2f9dc:	add	r3, r3, r1
   2f9e0:	str	r3, [r2]
   2f9e4:	ldr	r3, [sp, #20]
   2f9e8:	cmn	r3, #1
   2f9ec:	beq	2f7f0 <__assert_fail@plt+0x1dc4c>
   2f9f0:	cmn	r3, #2
   2f9f4:	beq	2f904 <__assert_fail@plt+0x1dd60>
   2f9f8:	mov	r2, r3
   2f9fc:	ldr	r3, [sp, #44]	; 0x2c
   2fa00:	str	r2, [sp, #232]	; 0xe8
   2fa04:	ldr	r2, [sp, #56]	; 0x38
   2fa08:	ldrb	r3, [r3, #28]
   2fa0c:	lsr	r3, r3, #4
   2fa10:	eor	r3, r3, #1
   2fa14:	cmp	r2, #1
   2fa18:	movls	r3, #0
   2fa1c:	andhi	r3, r3, #1
   2fa20:	cmp	r3, #0
   2fa24:	beq	2fe80 <__assert_fail@plt+0x1e2dc>
   2fa28:	ldr	r3, [sp, #20]
   2fa2c:	ldr	r7, [sp, #240]	; 0xf0
   2fa30:	mov	r2, r3
   2fa34:	add	r0, sp, #140	; 0x8c
   2fa38:	ldr	r1, [r7, r3, lsl #2]
   2fa3c:	bl	2487c <__assert_fail@plt+0x12cd8>
   2fa40:	ldr	r3, [sp, #28]
   2fa44:	ldrb	r3, [r3, #88]	; 0x58
   2fa48:	tst	r3, #1
   2fa4c:	str	r0, [sp, #236]	; 0xec
   2fa50:	beq	302b4 <__assert_fail@plt+0x1e710>
   2fa54:	ldr	r3, [sp, #20]
   2fa58:	ldr	r8, [sp, #224]	; 0xe0
   2fa5c:	cmn	r3, #-1073741822	; 0xc0000002
   2fa60:	ldr	r9, [sp, #236]	; 0xec
   2fa64:	bhi	2fed0 <__assert_fail@plt+0x1e32c>
   2fa68:	add	r4, r3, #1
   2fa6c:	lsl	r5, r4, #2
   2fa70:	mov	r0, r5
   2fa74:	bl	36944 <__assert_fail@plt+0x24da0>
   2fa78:	subs	r3, r0, #0
   2fa7c:	str	r3, [sp, #12]
   2fa80:	beq	305dc <__assert_fail@plt+0x1ea38>
   2fa84:	ldr	r3, [r8, #76]	; 0x4c
   2fa88:	cmp	r3, #0
   2fa8c:	beq	2fedc <__assert_fail@plt+0x1e338>
   2fa90:	mov	r0, r5
   2fa94:	bl	36944 <__assert_fail@plt+0x24da0>
   2fa98:	subs	sl, r0, #0
   2fa9c:	beq	30604 <__assert_fail@plt+0x1ea60>
   2faa0:	ldr	r6, [sp, #20]
   2faa4:	ldr	fp, [sp, #12]
   2faa8:	add	r5, sp, #292	; 0x124
   2faac:	lsl	r4, r4, #2
   2fab0:	mov	r2, r4
   2fab4:	mov	r1, #0
   2fab8:	mov	r0, sl
   2fabc:	bl	119e8 <memset@plt>
   2fac0:	mov	r3, #0
   2fac4:	str	fp, [sp, #276]	; 0x114
   2fac8:	str	sl, [sp, #280]	; 0x118
   2facc:	str	r9, [sp, #284]	; 0x11c
   2fad0:	str	r6, [sp, #288]	; 0x120
   2fad4:	add	r1, sp, #276	; 0x114
   2fad8:	str	r3, [r5]
   2fadc:	str	r3, [r5, #4]
   2fae0:	str	r3, [r5, #8]
   2fae4:	add	r0, sp, #140	; 0x8c
   2fae8:	bl	29974 <__assert_fail@plt+0x17dd0>
   2faec:	mov	r7, r0
   2faf0:	ldr	r0, [sp, #300]	; 0x12c
   2faf4:	bl	184ec <__assert_fail@plt+0x6948>
   2faf8:	cmp	r7, #0
   2fafc:	bne	302d4 <__assert_fail@plt+0x1e730>
   2fb00:	ldr	r3, [fp]
   2fb04:	cmp	r3, #0
   2fb08:	bne	306e8 <__assert_fail@plt+0x1eb44>
   2fb0c:	ldr	r3, [sl]
   2fb10:	cmp	r3, #0
   2fb14:	bne	306e8 <__assert_fail@plt+0x1eb44>
   2fb18:	ldr	r3, [sp, #240]	; 0xf0
   2fb1c:	sub	r4, r4, #4
   2fb20:	add	r3, r3, r4
   2fb24:	subs	r6, r6, #1
   2fb28:	bcc	303ac <__assert_fail@plt+0x1e808>
   2fb2c:	ldr	r1, [r3, #-4]!
   2fb30:	cmp	r1, #0
   2fb34:	beq	2fb24 <__assert_fail@plt+0x1df80>
   2fb38:	ldrb	r2, [r1, #52]	; 0x34
   2fb3c:	tst	r2, #16
   2fb40:	beq	2fb24 <__assert_fail@plt+0x1df80>
   2fb44:	mov	r2, r6
   2fb48:	add	r0, sp, #140	; 0x8c
   2fb4c:	bl	2487c <__assert_fail@plt+0x12cd8>
   2fb50:	add	r4, r6, #1
   2fb54:	mov	r9, r0
   2fb58:	b	2faac <__assert_fail@plt+0x1df08>
   2fb5c:	ldr	r5, [sp, #180]	; 0xb4
   2fb60:	mov	r1, r4
   2fb64:	mov	r2, r5
   2fb68:	add	r0, sp, #140	; 0x8c
   2fb6c:	bl	2487c <__assert_fail@plt+0x12cd8>
   2fb70:	cmp	r0, #0
   2fb74:	beq	2f6fc <__assert_fail@plt+0x1db58>
   2fb78:	str	r5, [sp, #20]
   2fb7c:	b	2f7bc <__assert_fail@plt+0x1dc18>
   2fb80:	mov	r2, #0
   2fb84:	add	r1, sp, #140	; 0x8c
   2fb88:	add	r0, sp, #116	; 0x74
   2fb8c:	str	r3, [sp, #180]	; 0xb4
   2fb90:	bl	2efb4 <__assert_fail@plt+0x1d410>
   2fb94:	ldr	r3, [sp, #116]	; 0x74
   2fb98:	cmp	r3, #0
   2fb9c:	bne	3066c <__assert_fail@plt+0x1eac8>
   2fba0:	cmp	r0, #0
   2fba4:	bne	306d4 <__assert_fail@plt+0x1eb30>
   2fba8:	ldr	r2, [sp, #240]	; 0xf0
   2fbac:	b	2f984 <__assert_fail@plt+0x1dde0>
   2fbb0:	ldr	r3, [fp, #8]
   2fbb4:	ldr	sl, [sp, #224]	; 0xe0
   2fbb8:	cmp	r3, #0
   2fbbc:	ble	2fca8 <__assert_fail@plt+0x1e104>
   2fbc0:	add	r2, sl, #128	; 0x80
   2fbc4:	str	r9, [sp, #76]	; 0x4c
   2fbc8:	mov	r4, #0
   2fbcc:	str	r2, [sp, #24]
   2fbd0:	mov	r9, r3
   2fbd4:	b	2fc3c <__assert_fail@plt+0x1e098>
   2fbd8:	tst	r0, #1
   2fbdc:	beq	2fc30 <__assert_fail@plt+0x1e08c>
   2fbe0:	tst	r6, #8
   2fbe4:	bne	2fc30 <__assert_fail@plt+0x1e08c>
   2fbe8:	tst	r6, #32
   2fbec:	beq	2fbf8 <__assert_fail@plt+0x1e054>
   2fbf0:	tst	r0, #2
   2fbf4:	beq	2fc30 <__assert_fail@plt+0x1e08c>
   2fbf8:	tst	r6, #128	; 0x80
   2fbfc:	beq	2fc08 <__assert_fail@plt+0x1e064>
   2fc00:	tst	r0, #8
   2fc04:	beq	2fc30 <__assert_fail@plt+0x1e08c>
   2fc08:	str	r5, [sp]
   2fc0c:	mov	r0, r8
   2fc10:	add	r3, sp, #140	; 0x8c
   2fc14:	mov	r2, r7
   2fc18:	ldr	r1, [sp, #24]
   2fc1c:	bl	259cc <__assert_fail@plt+0x13e28>
   2fc20:	cmp	r0, #0
   2fc24:	bne	2fcb4 <__assert_fail@plt+0x1e110>
   2fc28:	ldr	r5, [sp, #180]	; 0xb4
   2fc2c:	ldr	r9, [fp, #8]
   2fc30:	add	r4, r4, #1
   2fc34:	cmp	r4, r9
   2fc38:	bge	2fca4 <__assert_fail@plt+0x1e100>
   2fc3c:	ldr	r2, [fp, #12]
   2fc40:	ldr	r8, [sl]
   2fc44:	ldr	r7, [r2, r4, lsl #2]
   2fc48:	add	r2, r8, r7, lsl #3
   2fc4c:	ldrb	r1, [r2, #6]
   2fc50:	tst	r1, #16
   2fc54:	beq	2fc30 <__assert_fail@plt+0x1e08c>
   2fc58:	ldr	r6, [r2, #4]
   2fc5c:	ldr	r3, [pc, #1876]	; 303b8 <__assert_fail@plt+0x1e814>
   2fc60:	tst	r6, r3
   2fc64:	beq	2fc08 <__assert_fail@plt+0x1e064>
   2fc68:	ldr	r2, [sp, #228]	; 0xe4
   2fc6c:	mov	r1, r5
   2fc70:	add	r0, sp, #140	; 0x8c
   2fc74:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2fc78:	ldr	r3, [pc, #1852]	; 303bc <__assert_fail@plt+0x1e818>
   2fc7c:	and	r6, r3, r6, lsr #8
   2fc80:	tst	r6, #4
   2fc84:	bne	2fbd8 <__assert_fail@plt+0x1e034>
   2fc88:	tst	r6, #8
   2fc8c:	beq	2fbe8 <__assert_fail@plt+0x1e044>
   2fc90:	tst	r0, #1
   2fc94:	beq	2fbe8 <__assert_fail@plt+0x1e044>
   2fc98:	add	r4, r4, #1
   2fc9c:	cmp	r4, r9
   2fca0:	blt	2fc3c <__assert_fail@plt+0x1e098>
   2fca4:	ldr	r9, [sp, #76]	; 0x4c
   2fca8:	mov	r3, #0
   2fcac:	str	r3, [sp, #116]	; 0x74
   2fcb0:	b	2f734 <__assert_fail@plt+0x1db90>
   2fcb4:	ldr	r3, [sp, #260]	; 0x104
   2fcb8:	ldr	r6, [sp, #180]	; 0xb4
   2fcbc:	ldr	r2, [sp, #176]	; 0xb0
   2fcc0:	cmp	r3, r0
   2fcc4:	add	r6, r0, r6
   2fcc8:	movge	r0, r3
   2fccc:	cmp	r6, r2
   2fcd0:	str	r0, [sp, #260]	; 0x104
   2fcd4:	ldr	r8, [sp, #244]	; 0xf4
   2fcd8:	blt	2fdc0 <__assert_fail@plt+0x1e21c>
   2fcdc:	ldr	r3, [sp, #188]	; 0xbc
   2fce0:	cmp	r2, r3
   2fce4:	bge	2fdc0 <__assert_fail@plt+0x1e21c>
   2fce8:	add	r1, r6, #1
   2fcec:	add	r0, sp, #140	; 0x8c
   2fcf0:	bl	28544 <__assert_fail@plt+0x169a0>
   2fcf4:	cmp	r0, #0
   2fcf8:	bne	2feb0 <__assert_fail@plt+0x1e30c>
   2fcfc:	cmp	r6, r8
   2fd00:	ble	2fd24 <__assert_fail@plt+0x1e180>
   2fd04:	sub	r2, r6, r8
   2fd08:	ldr	r0, [sp, #240]	; 0xf0
   2fd0c:	add	r8, r8, #1
   2fd10:	lsl	r2, r2, #2
   2fd14:	add	r0, r0, r8, lsl #2
   2fd18:	mov	r1, #0
   2fd1c:	bl	119e8 <memset@plt>
   2fd20:	str	r6, [sp, #244]	; 0xf4
   2fd24:	ldr	r3, [sl, #12]
   2fd28:	ldr	r8, [sp, #240]	; 0xf0
   2fd2c:	mov	r2, #0
   2fd30:	ldr	r3, [r3, r7, lsl #2]
   2fd34:	ldr	r1, [r8, r6, lsl #2]
   2fd38:	str	r2, [sp, #128]	; 0x80
   2fd3c:	add	r3, r3, r3, lsl #1
   2fd40:	ldr	r2, [sl, #24]
   2fd44:	cmp	r1, #0
   2fd48:	add	r2, r2, r3, lsl #2
   2fd4c:	beq	2fe48 <__assert_fail@plt+0x1e2a4>
   2fd50:	ldr	r1, [r1, #40]	; 0x28
   2fd54:	add	r0, sp, #276	; 0x114
   2fd58:	bl	23c60 <__assert_fail@plt+0x120bc>
   2fd5c:	cmp	r0, #0
   2fd60:	str	r0, [sp, #128]	; 0x80
   2fd64:	bne	2feb0 <__assert_fail@plt+0x1e30c>
   2fd68:	ldr	r2, [sp, #228]	; 0xe4
   2fd6c:	sub	r1, r6, #1
   2fd70:	add	r0, sp, #140	; 0x8c
   2fd74:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2fd78:	add	r2, sp, #276	; 0x114
   2fd7c:	mov	r1, sl
   2fd80:	ldr	r7, [sp, #240]	; 0xf0
   2fd84:	mov	r3, r0
   2fd88:	add	r0, sp, #128	; 0x80
   2fd8c:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2fd90:	str	r0, [r7, r6, lsl #2]
   2fd94:	ldr	r0, [sp, #284]	; 0x11c
   2fd98:	bl	184ec <__assert_fail@plt+0x6948>
   2fd9c:	ldr	r7, [sp, #240]	; 0xf0
   2fda0:	ldr	r3, [r7, r6, lsl #2]
   2fda4:	cmp	r3, #0
   2fda8:	bne	2fc28 <__assert_fail@plt+0x1e084>
   2fdac:	ldr	r0, [sp, #128]	; 0x80
   2fdb0:	cmp	r0, #0
   2fdb4:	beq	2fc28 <__assert_fail@plt+0x1e084>
   2fdb8:	ldr	r9, [sp, #76]	; 0x4c
   2fdbc:	b	2feb8 <__assert_fail@plt+0x1e314>
   2fdc0:	ldr	r3, [sp, #168]	; 0xa8
   2fdc4:	cmp	r6, r3
   2fdc8:	blt	2fcfc <__assert_fail@plt+0x1e158>
   2fdcc:	ldr	r2, [sp, #188]	; 0xbc
   2fdd0:	cmp	r3, r2
   2fdd4:	bge	2fcfc <__assert_fail@plt+0x1e158>
   2fdd8:	b	2fce8 <__assert_fail@plt+0x1e144>
   2fddc:	ldr	r2, [sp, #188]	; 0xbc
   2fde0:	cmp	r3, r2
   2fde4:	bge	2f71c <__assert_fail@plt+0x1db78>
   2fde8:	add	r1, r5, #2
   2fdec:	add	r0, sp, #140	; 0x8c
   2fdf0:	bl	28544 <__assert_fail@plt+0x169a0>
   2fdf4:	cmp	r0, #0
   2fdf8:	str	r0, [sp, #116]	; 0x74
   2fdfc:	bne	2f904 <__assert_fail@plt+0x1dd60>
   2fe00:	ldr	r5, [sp, #180]	; 0xb4
   2fe04:	b	2f728 <__assert_fail@plt+0x1db84>
   2fe08:	ldr	r5, [fp, #48]	; 0x30
   2fe0c:	cmp	r5, #0
   2fe10:	beq	304d0 <__assert_fail@plt+0x1e92c>
   2fe14:	ldr	r1, [sp, #180]	; 0xb4
   2fe18:	ldr	r2, [sp, #228]	; 0xe4
   2fe1c:	sub	r1, r1, #1
   2fe20:	add	r0, sp, #140	; 0x8c
   2fe24:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2fe28:	tst	r0, #1
   2fe2c:	addne	r4, r4, #256	; 0x100
   2fe30:	ldr	r4, [r5, r4, lsl #2]
   2fe34:	b	2f754 <__assert_fail@plt+0x1dbb0>
   2fe38:	ldr	r2, [sp, #188]	; 0xbc
   2fe3c:	cmp	r3, r2
   2fe40:	bge	2f728 <__assert_fail@plt+0x1db84>
   2fe44:	b	2fde8 <__assert_fail@plt+0x1e244>
   2fe48:	ldm	r2, {r0, r1, r2}
   2fe4c:	add	r3, sp, #276	; 0x114
   2fe50:	stm	r3, {r0, r1, r2}
   2fe54:	sub	r1, r6, #1
   2fe58:	ldr	r2, [sp, #228]	; 0xe4
   2fe5c:	add	r0, sp, #140	; 0x8c
   2fe60:	bl	23ef0 <__assert_fail@plt+0x1234c>
   2fe64:	add	r2, sp, #276	; 0x114
   2fe68:	mov	r1, sl
   2fe6c:	mov	r3, r0
   2fe70:	add	r0, sp, #128	; 0x80
   2fe74:	bl	2c898 <__assert_fail@plt+0x1acf4>
   2fe78:	str	r0, [r8, r6, lsl #2]
   2fe7c:	b	2fd9c <__assert_fail@plt+0x1e1f8>
   2fe80:	ldr	r3, [sp, #28]
   2fe84:	ldr	r7, [sp, #240]	; 0xf0
   2fe88:	ldr	r4, [r3, #76]	; 0x4c
   2fe8c:	cmp	r4, #0
   2fe90:	beq	2ff5c <__assert_fail@plt+0x1e3b8>
   2fe94:	ldr	r3, [sp, #20]
   2fe98:	add	r0, sp, #140	; 0x8c
   2fe9c:	mov	r2, r3
   2fea0:	ldr	r1, [r7, r3, lsl #2]
   2fea4:	bl	2487c <__assert_fail@plt+0x12cd8>
   2fea8:	str	r0, [sp, #236]	; 0xec
   2feac:	b	302bc <__assert_fail@plt+0x1e718>
   2feb0:	ldr	r9, [sp, #76]	; 0x4c
   2feb4:	ldr	r7, [sp, #240]	; 0xf0
   2feb8:	cmp	r7, #0
   2febc:	str	r0, [sp, #116]	; 0x74
   2fec0:	beq	2fed0 <__assert_fail@plt+0x1e32c>
   2fec4:	mov	r4, #0
   2fec8:	b	2f760 <__assert_fail@plt+0x1dbbc>
   2fecc:	mov	r7, r0
   2fed0:	mov	r3, #12
   2fed4:	str	r3, [sp, #48]	; 0x30
   2fed8:	b	2f910 <__assert_fail@plt+0x1dd6c>
   2fedc:	ldr	r2, [sp, #20]
   2fee0:	ldr	r4, [sp, #12]
   2fee4:	add	r1, sp, #276	; 0x114
   2fee8:	add	r0, sp, #140	; 0x8c
   2feec:	str	r3, [sp, #280]	; 0x118
   2fef0:	str	r2, [sp, #288]	; 0x120
   2fef4:	str	r3, [sp, #292]	; 0x124
   2fef8:	str	r3, [sp, #296]	; 0x128
   2fefc:	str	r3, [sp, #300]	; 0x12c
   2ff00:	str	r4, [sp, #276]	; 0x114
   2ff04:	str	r9, [sp, #284]	; 0x11c
   2ff08:	bl	29974 <__assert_fail@plt+0x17dd0>
   2ff0c:	mov	r7, r0
   2ff10:	ldr	r0, [sp, #300]	; 0x12c
   2ff14:	bl	184ec <__assert_fail@plt+0x6948>
   2ff18:	cmp	r7, #0
   2ff1c:	bne	302d0 <__assert_fail@plt+0x1e72c>
   2ff20:	ldr	r3, [r4]
   2ff24:	cmp	r3, #0
   2ff28:	beq	2f7e0 <__assert_fail@plt+0x1dc3c>
   2ff2c:	ldr	fp, [sp, #12]
   2ff30:	ldr	r0, [sp, #240]	; 0xf0
   2ff34:	bl	184ec <__assert_fail@plt+0x6948>
   2ff38:	ldr	r3, [sp, #20]
   2ff3c:	mov	r0, #0
   2ff40:	str	r3, [sp, #232]	; 0xe8
   2ff44:	str	fp, [sp, #240]	; 0xf0
   2ff48:	str	r9, [sp, #236]	; 0xec
   2ff4c:	bl	184ec <__assert_fail@plt+0x6948>
   2ff50:	mov	r0, #0
   2ff54:	bl	184ec <__assert_fail@plt+0x6948>
   2ff58:	ldr	r7, [sp, #240]	; 0xf0
   2ff5c:	ldr	r3, [sp, #56]	; 0x38
   2ff60:	cmp	r3, #0
   2ff64:	beq	2f910 <__assert_fail@plt+0x1dd6c>
   2ff68:	cmp	r3, #1
   2ff6c:	bls	2ff90 <__assert_fail@plt+0x1e3ec>
   2ff70:	sub	r3, r3, #-536870911	; 0xe0000001
   2ff74:	ldr	r2, [sp, #468]	; 0x1d4
   2ff78:	mvn	r1, #0
   2ff7c:	add	r3, r2, r3, lsl #3
   2ff80:	str	r1, [r2, #12]
   2ff84:	str	r1, [r2, #8]!
   2ff88:	cmp	r3, r2
   2ff8c:	bne	2ff80 <__assert_fail@plt+0x1e3dc>
   2ff90:	ldr	r3, [sp, #44]	; 0x2c
   2ff94:	ldr	r1, [sp, #468]	; 0x1d4
   2ff98:	ldr	r2, [sp, #232]	; 0xe8
   2ff9c:	ldrb	r3, [r3, #28]
   2ffa0:	str	r2, [r1, #4]
   2ffa4:	ldr	r2, [sp, #56]	; 0x38
   2ffa8:	mov	r4, #0
   2ffac:	lsr	r3, r3, #4
   2ffb0:	eor	r3, r3, #1
   2ffb4:	cmp	r2, #1
   2ffb8:	moveq	r3, #0
   2ffbc:	andne	r3, r3, #1
   2ffc0:	cmp	r3, #0
   2ffc4:	mov	r3, r1
   2ffc8:	moveq	r3, r2
   2ffcc:	str	r4, [r1]
   2ffd0:	lsleq	r9, r3, #3
   2ffd4:	beq	30b1c <__assert_fail@plt+0x1ef78>
   2ffd8:	ldr	r2, [sp, #28]
   2ffdc:	ldrb	r3, [r2, #88]	; 0x58
   2ffe0:	tst	r3, #1
   2ffe4:	beq	31204 <__assert_fail@plt+0x1f660>
   2ffe8:	ldr	r3, [r2, #76]	; 0x4c
   2ffec:	cmp	r3, #0
   2fff0:	ble	31204 <__assert_fail@plt+0x1f660>
   2fff4:	ldr	r1, [sp, #44]	; 0x2c
   2fff8:	mov	r2, #2
   2fffc:	mov	r3, #16
   30000:	ldr	r1, [r1]
   30004:	add	r8, sp, #288	; 0x120
   30008:	mov	r0, #48	; 0x30
   3000c:	str	r1, [sp, #20]
   30010:	str	r4, [sp, #128]	; 0x80
   30014:	str	r4, [sp, #276]	; 0x114
   30018:	str	r2, [sp, #132]	; 0x84
   3001c:	str	r3, [sp, #280]	; 0x118
   30020:	str	r8, [sp, #284]	; 0x11c
   30024:	bl	36944 <__assert_fail@plt+0x24da0>
   30028:	cmp	r0, #0
   3002c:	str	r0, [sp, #136]	; 0x88
   30030:	beq	311f8 <__assert_fail@plt+0x1f654>
   30034:	ldr	r3, [sp, #276]	; 0x114
   30038:	ldr	r1, [sp, #56]	; 0x38
   3003c:	add	r2, sp, #116	; 0x74
   30040:	cmp	r1, r3
   30044:	ldr	r3, [sp, #20]
   30048:	str	r2, [sp, #16]
   3004c:	addls	sl, sp, #128	; 0x80
   30050:	ldr	fp, [r3, #72]	; 0x48
   30054:	movls	r3, r1
   30058:	str	r4, [sp, #116]	; 0x74
   3005c:	str	r4, [sp, #120]	; 0x78
   30060:	str	r4, [sp, #124]	; 0x7c
   30064:	strls	r3, [sp, #276]	; 0x114
   30068:	bhi	313f0 <__assert_fail@plt+0x1f84c>
   3006c:	ldr	r5, [sp, #56]	; 0x38
   30070:	ldr	r3, [sp, #284]	; 0x11c
   30074:	ldr	r1, [sp, #468]	; 0x1d4
   30078:	lsl	r9, r5, #3
   3007c:	mov	r0, r3
   30080:	mov	r2, r9
   30084:	mov	r4, r3
   30088:	bl	11784 <memcpy@plt>
   3008c:	lsl	r3, r5, #4
   30090:	str	r3, [sp, #32]
   30094:	ldr	r3, [sp, #468]	; 0x1d4
   30098:	str	r8, [sp, #12]
   3009c:	mov	r5, r3
   300a0:	ldr	r7, [r3]
   300a4:	mov	r8, r4
   300a8:	ldr	r2, [r5, #4]
   300ac:	cmp	r2, r7
   300b0:	blt	31380 <__assert_fail@plt+0x1f7dc>
   300b4:	ldr	r3, [sp, #20]
   300b8:	lsl	r6, fp, #3
   300bc:	str	fp, [sp, #24]
   300c0:	ldr	r0, [r3]
   300c4:	add	r1, r0, r6
   300c8:	ldrb	r3, [r1, #4]
   300cc:	cmp	r3, #8
   300d0:	beq	313f8 <__assert_fail@plt+0x1f854>
   300d4:	cmp	r3, #9
   300d8:	beq	31144 <__assert_fail@plt+0x1f5a0>
   300dc:	cmp	r7, r2
   300e0:	beq	30a90 <__assert_fail@plt+0x1eeec>
   300e4:	cmp	sl, #0
   300e8:	beq	30150 <__assert_fail@plt+0x1e5ac>
   300ec:	ldr	r3, [sp, #120]	; 0x78
   300f0:	cmp	r3, #0
   300f4:	ble	30150 <__assert_fail@plt+0x1e5ac>
   300f8:	ldr	r0, [sp, #124]	; 0x7c
   300fc:	sub	ip, r3, #1
   30100:	mov	r1, #0
   30104:	cmp	r1, ip
   30108:	bcs	30144 <__assert_fail@plt+0x1e5a0>
   3010c:	add	r3, r1, ip
   30110:	lsr	r3, r3, #1
   30114:	ldr	r2, [r0, r3, lsl #2]
   30118:	cmp	fp, r2
   3011c:	ble	30134 <__assert_fail@plt+0x1e590>
   30120:	b	308bc <__assert_fail@plt+0x1ed18>
   30124:	ldr	ip, [r0, r2, lsl #2]
   30128:	cmp	fp, ip
   3012c:	bgt	308c4 <__assert_fail@plt+0x1ed20>
   30130:	mov	r3, r2
   30134:	add	r2, r1, r3
   30138:	cmp	r1, r3
   3013c:	lsr	r2, r2, #1
   30140:	bcc	30124 <__assert_fail@plt+0x1e580>
   30144:	ldr	r3, [r0, r1, lsl #2]
   30148:	cmp	fp, r3
   3014c:	beq	30c74 <__assert_fail@plt+0x1f0d0>
   30150:	ldr	r4, [sp, #224]	; 0xe0
   30154:	ldr	r0, [r4]
   30158:	add	r3, r0, r6
   3015c:	ldrb	r2, [r3, #4]
   30160:	tst	r2, #8
   30164:	beq	30d24 <__assert_fail@plt+0x1f180>
   30168:	ldr	r1, [sp, #240]	; 0xf0
   3016c:	add	r3, fp, fp, lsl #1
   30170:	ldr	r4, [r4, #20]
   30174:	ldr	r2, [sp, #120]	; 0x78
   30178:	add	r4, r4, r3, lsl #2
   3017c:	ldr	r3, [r1, r7, lsl #2]
   30180:	cmp	r2, #0
   30184:	str	r3, [sp, #24]
   30188:	ble	30924 <__assert_fail@plt+0x1ed80>
   3018c:	ldr	r0, [sp, #124]	; 0x7c
   30190:	sub	r2, r2, #1
   30194:	mov	r1, #0
   30198:	cmp	r1, r2
   3019c:	bcs	30918 <__assert_fail@plt+0x1ed74>
   301a0:	add	r3, r1, r2
   301a4:	lsr	r3, r3, #1
   301a8:	b	301c0 <__assert_fail@plt+0x1e61c>
   301ac:	add	ip, r1, r3
   301b0:	cmp	r1, r3
   301b4:	mov	r2, r3
   301b8:	lsr	r3, ip, #1
   301bc:	bcs	30918 <__assert_fail@plt+0x1ed74>
   301c0:	ldr	ip, [r0, r3, lsl #2]
   301c4:	cmp	fp, ip
   301c8:	ble	301ac <__assert_fail@plt+0x1e608>
   301cc:	add	r1, r3, #1
   301d0:	b	30198 <__assert_fail@plt+0x1e5f4>
   301d4:	ldr	r3, [sp, #52]	; 0x34
   301d8:	cmp	r3, r5
   301dc:	ble	2f5ec <__assert_fail@plt+0x1da48>
   301e0:	ldr	r3, [sp, #60]	; 0x3c
   301e4:	ldr	r1, [sp, #80]	; 0x50
   301e8:	ldrb	r2, [r3, r5]
   301ec:	add	r3, r3, r5
   301f0:	ldrb	r2, [r1, r2]
   301f4:	ldr	r1, [sp, #64]	; 0x40
   301f8:	ldrb	r2, [r1, r2]
   301fc:	cmp	r2, #0
   30200:	bne	2f630 <__assert_fail@plt+0x1da8c>
   30204:	mov	ip, r1
   30208:	add	r2, r5, #1
   3020c:	ldr	lr, [sp, #80]	; 0x50
   30210:	ldr	r0, [sp, #52]	; 0x34
   30214:	b	30230 <__assert_fail@plt+0x1e68c>
   30218:	ldrb	r1, [r3, #1]!
   3021c:	add	r2, r2, #1
   30220:	ldrb	r1, [lr, r1]
   30224:	ldrb	r1, [ip, r1]
   30228:	cmp	r1, #0
   3022c:	bne	304c8 <__assert_fail@plt+0x1e924>
   30230:	cmp	r0, r2
   30234:	mov	r5, r2
   30238:	bne	30218 <__assert_fail@plt+0x1e674>
   3023c:	b	2f5e4 <__assert_fail@plt+0x1da40>
   30240:	ldr	r3, [sp, #68]	; 0x44
   30244:	cmp	r3, r5
   30248:	bgt	2f8bc <__assert_fail@plt+0x1dd18>
   3024c:	ldr	r3, [sp, #80]	; 0x50
   30250:	ldr	r2, [sp, #112]	; 0x70
   30254:	cmp	r3, #0
   30258:	beq	3068c <__assert_fail@plt+0x1eae8>
   3025c:	mov	ip, r3
   30260:	ldr	r1, [sp, #108]	; 0x6c
   30264:	ldr	r0, [sp, #64]	; 0x40
   30268:	ldr	r4, [sp, #68]	; 0x44
   3026c:	ldr	r6, [sp, #60]	; 0x3c
   30270:	ldr	lr, [sp, #72]	; 0x48
   30274:	b	3028c <__assert_fail@plt+0x1e6e8>
   30278:	sub	r5, r5, #1
   3027c:	cmp	r4, r5
   30280:	mov	r2, r5
   30284:	mov	r1, #1
   30288:	bgt	30560 <__assert_fail@plt+0x1e9bc>
   3028c:	cmp	lr, r5
   30290:	mov	r3, #0
   30294:	ldrbgt	r3, [r6, r5]
   30298:	ldrb	r3, [ip, r3]
   3029c:	ldrb	r3, [r0, r3]
   302a0:	cmp	r3, #0
   302a4:	beq	30278 <__assert_fail@plt+0x1e6d4>
   302a8:	cmp	r1, #0
   302ac:	strne	r2, [sp, #112]	; 0x70
   302b0:	b	2f630 <__assert_fail@plt+0x1da8c>
   302b4:	ldr	r3, [sp, #28]
   302b8:	ldr	r4, [r3, #76]	; 0x4c
   302bc:	cmp	r4, #0
   302c0:	bne	2fa54 <__assert_fail@plt+0x1deb0>
   302c4:	b	2ff5c <__assert_fail@plt+0x1e3b8>
   302c8:	ldr	r1, [sp, #72]	; 0x48
   302cc:	b	2f3a4 <__assert_fail@plt+0x1d800>
   302d0:	mov	sl, #0
   302d4:	ldr	r0, [sp, #12]
   302d8:	bl	184ec <__assert_fail@plt+0x6948>
   302dc:	mov	r0, sl
   302e0:	bl	184ec <__assert_fail@plt+0x6948>
   302e4:	cmp	r7, #1
   302e8:	beq	2f7f0 <__assert_fail@plt+0x1dc4c>
   302ec:	str	r7, [sp, #48]	; 0x30
   302f0:	ldr	r7, [sp, #240]	; 0xf0
   302f4:	b	2f910 <__assert_fail@plt+0x1dd6c>
   302f8:	ldr	r1, [sp, #164]	; 0xa4
   302fc:	ldr	r4, [sp, #64]	; 0x40
   30300:	ldr	r6, [sp, #92]	; 0x5c
   30304:	ldr	r7, [sp, #68]	; 0x44
   30308:	ldr	r8, [sp, #52]	; 0x34
   3030c:	b	30354 <__assert_fail@plt+0x1e7b0>
   30310:	ldr	r0, [sp, #168]	; 0xa8
   30314:	mov	r2, #0
   30318:	cmp	r3, r0
   3031c:	ldrcc	r2, [sp, #144]	; 0x90
   30320:	ldrbcc	r2, [r2, r3]
   30324:	ldrb	r3, [r4, r2]
   30328:	cmp	r3, #0
   3032c:	bne	2f630 <__assert_fail@plt+0x1da8c>
   30330:	add	r5, r5, r6
   30334:	cmp	r8, r5
   30338:	movge	r3, #0
   3033c:	movlt	r3, #1
   30340:	cmp	r7, r5
   30344:	orrgt	r3, r3, #1
   30348:	cmp	r3, #0
   3034c:	str	r5, [sp, #112]	; 0x70
   30350:	bne	2f8bc <__assert_fail@plt+0x1dd18>
   30354:	ldr	r2, [sp, #172]	; 0xac
   30358:	sub	r3, r5, r1
   3035c:	cmp	r3, r2
   30360:	bcc	30310 <__assert_fail@plt+0x1e76c>
   30364:	ldr	r2, [sp, #472]	; 0x1d8
   30368:	mov	r1, r5
   3036c:	add	r0, sp, #140	; 0x8c
   30370:	bl	23fdc <__assert_fail@plt+0x12438>
   30374:	cmp	r0, #0
   30378:	bne	306dc <__assert_fail@plt+0x1eb38>
   3037c:	ldr	r1, [sp, #164]	; 0xa4
   30380:	sub	r3, r5, r1
   30384:	b	30310 <__assert_fail@plt+0x1e76c>
   30388:	mov	r3, r2
   3038c:	sub	r1, r3, #1
   30390:	ldr	r2, [sp, #228]	; 0xe4
   30394:	add	r0, sp, #140	; 0x8c
   30398:	bl	23ef0 <__assert_fail@plt+0x1234c>
   3039c:	tst	r0, #1
   303a0:	beq	3050c <__assert_fail@plt+0x1e968>
   303a4:	ldr	fp, [r4, #40]	; 0x28
   303a8:	b	2f6a4 <__assert_fail@plt+0x1db00>
   303ac:	mov	r7, #1
   303b0:	b	302d4 <__assert_fail@plt+0x1e730>
   303b4:	beq	feadae64 <optarg@@GLIBC_2.4+0xfea8fc24>
   303b8:	andeq	pc, r3, r0, lsl #30
   303bc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   303c0:	ldr	r3, [sp, #264]	; 0x108
   303c4:	cmp	r3, #0
   303c8:	movgt	r7, #0
   303cc:	ble	3044c <__assert_fail@plt+0x1e8a8>
   303d0:	ldr	r3, [sp, #272]	; 0x110
   303d4:	ldr	r6, [r3, r7, lsl #2]
   303d8:	ldr	r3, [r6, #16]
   303dc:	cmp	r3, #0
   303e0:	movgt	r4, #0
   303e4:	ble	30410 <__assert_fail@plt+0x1e86c>
   303e8:	ldr	r3, [r6, #20]
   303ec:	ldr	r5, [r3, r4, lsl #2]
   303f0:	add	r4, r4, #1
   303f4:	ldr	r0, [r5, #16]
   303f8:	bl	184ec <__assert_fail@plt+0x6948>
   303fc:	mov	r0, r5
   30400:	bl	184ec <__assert_fail@plt+0x6948>
   30404:	ldr	r3, [r6, #16]
   30408:	cmp	r4, r3
   3040c:	blt	303e8 <__assert_fail@plt+0x1e844>
   30410:	ldr	r0, [r6, #20]
   30414:	bl	184ec <__assert_fail@plt+0x6948>
   30418:	ldr	r3, [r6, #8]
   3041c:	cmp	r3, #0
   30420:	beq	30434 <__assert_fail@plt+0x1e890>
   30424:	ldr	r0, [r3, #8]
   30428:	bl	184ec <__assert_fail@plt+0x6948>
   3042c:	ldr	r0, [r6, #8]
   30430:	bl	184ec <__assert_fail@plt+0x6948>
   30434:	mov	r0, r6
   30438:	bl	184ec <__assert_fail@plt+0x6948>
   3043c:	ldr	r3, [sp, #264]	; 0x108
   30440:	add	r7, r7, #1
   30444:	cmp	r7, r3
   30448:	blt	303d0 <__assert_fail@plt+0x1e82c>
   3044c:	mov	r3, #0
   30450:	ldr	r0, [sp, #272]	; 0x110
   30454:	str	r3, [sp, #264]	; 0x108
   30458:	str	r3, [sp, #248]	; 0xf8
   3045c:	bl	184ec <__assert_fail@plt+0x6948>
   30460:	ldr	r0, [sp, #256]	; 0x100
   30464:	bl	184ec <__assert_fail@plt+0x6948>
   30468:	b	2f928 <__assert_fail@plt+0x1dd84>
   3046c:	mov	r1, r6
   30470:	ldr	r0, [sp, #144]	; 0x90
   30474:	bl	36970 <__assert_fail@plt+0x24dcc>
   30478:	cmp	r0, #0
   3047c:	beq	2f904 <__assert_fail@plt+0x1dd60>
   30480:	ldr	r1, [sp, #28]
   30484:	ldrb	r2, [sp, #215]	; 0xd7
   30488:	str	r0, [sp, #144]	; 0x90
   3048c:	ldrb	r3, [r1, #88]	; 0x58
   30490:	cmp	r2, #0
   30494:	add	r2, r1, #96	; 0x60
   30498:	str	r6, [sp, #176]	; 0xb0
   3049c:	lsr	r3, r3, #4
   304a0:	and	r3, r3, #1
   304a4:	strb	r3, [sp, #218]	; 0xda
   304a8:	str	r2, [sp, #208]	; 0xd0
   304ac:	bne	2f3a0 <__assert_fail@plt+0x1d7fc>
   304b0:	b	2f388 <__assert_fail@plt+0x1d7e4>
   304b4:	ldr	r3, [sp, #28]
   304b8:	ldrb	r3, [r3, #88]	; 0x58
   304bc:	tst	r3, #2
   304c0:	bne	2f440 <__assert_fail@plt+0x1d89c>
   304c4:	b	2f464 <__assert_fail@plt+0x1d8c0>
   304c8:	str	r5, [sp, #112]	; 0x70
   304cc:	b	2f630 <__assert_fail@plt+0x1da8c>
   304d0:	mov	r1, fp
   304d4:	ldr	r0, [sp, #224]	; 0xe0
   304d8:	bl	2ccf0 <__assert_fail@plt+0x1b14c>
   304dc:	cmp	r0, #0
   304e0:	bne	2f744 <__assert_fail@plt+0x1dba0>
   304e4:	ldr	r7, [sp, #240]	; 0xf0
   304e8:	mov	r3, #12
   304ec:	cmp	r7, #0
   304f0:	str	r3, [sp, #116]	; 0x74
   304f4:	bne	2fec4 <__assert_fail@plt+0x1e320>
   304f8:	b	2fed0 <__assert_fail@plt+0x1e32c>
   304fc:	ldr	r3, [sp, #104]	; 0x68
   30500:	str	r3, [sp, #16]
   30504:	ldrb	r3, [fp, #52]	; 0x34
   30508:	b	2f6d0 <__assert_fail@plt+0x1db2c>
   3050c:	cmp	r0, #0
   30510:	beq	2f6a4 <__assert_fail@plt+0x1db00>
   30514:	and	r3, r0, #6
   30518:	cmp	r3, #6
   3051c:	ldreq	fp, [r4, #48]	; 0x30
   30520:	beq	2f6a4 <__assert_fail@plt+0x1db00>
   30524:	tst	r0, #2
   30528:	beq	2f8e0 <__assert_fail@plt+0x1dd3c>
   3052c:	ldr	fp, [r4, #44]	; 0x2c
   30530:	b	2f6a4 <__assert_fail@plt+0x1db00>
   30534:	ldr	r0, [sp, #124]	; 0x7c
   30538:	ldr	r8, [sp, #12]
   3053c:	bl	184ec <__assert_fail@plt+0x6948>
   30540:	ldr	r0, [sp, #284]	; 0x11c
   30544:	cmp	r0, r8
   30548:	beq	30550 <__assert_fail@plt+0x1e9ac>
   3054c:	bl	184ec <__assert_fail@plt+0x6948>
   30550:	mov	r3, #1
   30554:	str	r3, [sp, #48]	; 0x30
   30558:	ldr	r7, [sp, #240]	; 0xf0
   3055c:	b	2f910 <__assert_fail@plt+0x1dd6c>
   30560:	str	r5, [sp, #112]	; 0x70
   30564:	b	2f8bc <__assert_fail@plt+0x1dd18>
   30568:	ldrsb	r3, [fp, #52]	; 0x34
   3056c:	cmp	r3, #0
   30570:	blt	30628 <__assert_fail@plt+0x1ea84>
   30574:	ldr	r3, [sp, #36]	; 0x24
   30578:	cmp	r3, #0
   3057c:	ldr	r3, [sp, #12]
   30580:	str	r3, [sp, #20]
   30584:	movne	r3, #1
   30588:	strne	r3, [sp, #40]	; 0x28
   3058c:	bne	2f6e8 <__assert_fail@plt+0x1db44>
   30590:	b	2f9e4 <__assert_fail@plt+0x1de40>
   30594:	ldr	r7, [sp, #240]	; 0xf0
   30598:	b	2fed0 <__assert_fail@plt+0x1e32c>
   3059c:	add	r4, fp, #8
   305a0:	add	r5, fp, #12
   305a4:	mov	r1, r4
   305a8:	mov	r2, r5
   305ac:	mov	r3, #0
   305b0:	add	r0, sp, #140	; 0x8c
   305b4:	bl	24b88 <__assert_fail@plt+0x12fe4>
   305b8:	cmp	r0, #0
   305bc:	str	r0, [sp, #116]	; 0x74
   305c0:	bne	30664 <__assert_fail@plt+0x1eac0>
   305c4:	ldrb	r3, [fp, #52]	; 0x34
   305c8:	tst	r3, #64	; 0x40
   305cc:	bne	30644 <__assert_fail@plt+0x1eaa0>
   305d0:	ldr	r2, [sp, #108]	; 0x6c
   305d4:	str	r2, [sp, #16]
   305d8:	b	2f6d0 <__assert_fail@plt+0x1db2c>
   305dc:	mov	fp, r3
   305e0:	bl	184ec <__assert_fail@plt+0x6948>
   305e4:	mov	r0, fp
   305e8:	bl	184ec <__assert_fail@plt+0x6948>
   305ec:	mov	r3, #12
   305f0:	str	r3, [sp, #48]	; 0x30
   305f4:	ldr	r7, [sp, #240]	; 0xf0
   305f8:	b	2f910 <__assert_fail@plt+0x1dd6c>
   305fc:	mov	r3, #8
   30600:	b	2f500 <__assert_fail@plt+0x1d95c>
   30604:	ldr	fp, [sp, #12]
   30608:	mov	r0, fp
   3060c:	bl	184ec <__assert_fail@plt+0x6948>
   30610:	mov	r0, sl
   30614:	bl	184ec <__assert_fail@plt+0x6948>
   30618:	mov	r3, #12
   3061c:	str	r3, [sp, #48]	; 0x30
   30620:	ldr	r7, [sp, #240]	; 0xf0
   30624:	b	2f910 <__assert_fail@plt+0x1dd6c>
   30628:	ldr	r2, [sp, #12]
   3062c:	mov	r1, fp
   30630:	add	r0, sp, #140	; 0x8c
   30634:	bl	2487c <__assert_fail@plt+0x12cd8>
   30638:	cmp	r0, #0
   3063c:	beq	2f6d8 <__assert_fail@plt+0x1db34>
   30640:	b	30574 <__assert_fail@plt+0x1e9d0>
   30644:	mov	r2, r5
   30648:	mov	r1, r4
   3064c:	add	r0, sp, #140	; 0x8c
   30650:	bl	2e798 <__assert_fail@plt+0x1cbf4>
   30654:	cmp	r0, #0
   30658:	str	r0, [sp, #116]	; 0x74
   3065c:	ldrbeq	r3, [fp, #52]	; 0x34
   30660:	beq	305d0 <__assert_fail@plt+0x1ea2c>
   30664:	str	r0, [sp, #20]
   30668:	b	2f9e4 <__assert_fail@plt+0x1de40>
   3066c:	cmp	r0, #0
   30670:	mov	r4, r0
   30674:	bne	2f77c <__assert_fail@plt+0x1dbd8>
   30678:	b	2f9c4 <__assert_fail@plt+0x1de20>
   3067c:	mov	r3, #12
   30680:	mov	r7, #0
   30684:	str	r3, [sp, #48]	; 0x30
   30688:	b	2f910 <__assert_fail@plt+0x1dd6c>
   3068c:	ldr	r1, [sp, #108]	; 0x6c
   30690:	ldr	r0, [sp, #64]	; 0x40
   30694:	ldr	lr, [sp, #68]	; 0x44
   30698:	ldr	r4, [sp, #60]	; 0x3c
   3069c:	ldr	ip, [sp, #72]	; 0x48
   306a0:	b	306b8 <__assert_fail@plt+0x1eb14>
   306a4:	sub	r5, r5, #1
   306a8:	cmp	lr, r5
   306ac:	mov	r2, r5
   306b0:	mov	r1, #1
   306b4:	bgt	30560 <__assert_fail@plt+0x1e9bc>
   306b8:	cmp	ip, r5
   306bc:	mov	r3, #0
   306c0:	ldrbgt	r3, [r4, r5]
   306c4:	ldrb	r3, [r0, r3]
   306c8:	cmp	r3, #0
   306cc:	beq	306a4 <__assert_fail@plt+0x1eb00>
   306d0:	b	302a8 <__assert_fail@plt+0x1e704>
   306d4:	mov	r4, r0
   306d8:	b	2f77c <__assert_fail@plt+0x1dbd8>
   306dc:	str	r0, [sp, #48]	; 0x30
   306e0:	ldr	r7, [sp, #240]	; 0xf0
   306e4:	b	2f910 <__assert_fail@plt+0x1dd6c>
   306e8:	ldr	r3, [sp, #12]
   306ec:	str	r9, [sp, #32]
   306f0:	mov	fp, r3
   306f4:	mov	r9, sl
   306f8:	add	r2, r3, r4
   306fc:	str	r6, [sp, #20]
   30700:	str	r2, [sp, #24]
   30704:	str	sl, [sp, #16]
   30708:	ldr	r6, [fp]
   3070c:	cmp	r6, #0
   30710:	beq	308b0 <__assert_fail@plt+0x1ed0c>
   30714:	ldr	r5, [r9]
   30718:	cmp	r5, #0
   3071c:	beq	307f8 <__assert_fail@plt+0x1ec54>
   30720:	ldr	r3, [r6, #8]
   30724:	cmp	r3, #0
   30728:	ble	30824 <__assert_fail@plt+0x1ec80>
   3072c:	ldr	r2, [r5, #8]
   30730:	cmp	r2, #0
   30734:	ble	30864 <__assert_fail@plt+0x1ecc0>
   30738:	add	r3, r3, r2
   3073c:	str	r3, [sp, #128]	; 0x80
   30740:	lsl	r0, r3, #2
   30744:	bl	36944 <__assert_fail@plt+0x24da0>
   30748:	cmp	r0, #0
   3074c:	str	r0, [sp, #136]	; 0x88
   30750:	beq	311a8 <__assert_fail@plt+0x1f604>
   30754:	mov	r4, #0
   30758:	mov	r7, r4
   3075c:	mov	ip, r0
   30760:	mov	r1, #1
   30764:	b	307a8 <__assert_fail@plt+0x1ec04>
   30768:	ldr	r3, [r5, #8]
   3076c:	cmp	r4, r3
   30770:	bge	308d0 <__assert_fail@plt+0x1ed2c>
   30774:	ldr	r3, [r6, #12]
   30778:	ldr	r2, [r5, #12]
   3077c:	ldr	r3, [r3, r7, lsl #2]
   30780:	ldr	r2, [r2, r4, lsl #2]
   30784:	cmp	r3, r2
   30788:	addgt	r4, r4, #1
   3078c:	strgt	r2, [ip]
   30790:	bgt	307a0 <__assert_fail@plt+0x1ebfc>
   30794:	add	r7, r7, #1
   30798:	addeq	r4, r4, #1
   3079c:	str	r3, [ip]
   307a0:	add	r1, r1, #1
   307a4:	add	ip, ip, #4
   307a8:	ldr	r2, [r6, #8]
   307ac:	sub	sl, r1, #1
   307b0:	cmp	r7, r2
   307b4:	blt	30768 <__assert_fail@plt+0x1ebc4>
   307b8:	ldr	r2, [r5, #8]
   307bc:	cmp	r4, r2
   307c0:	blt	311d0 <__assert_fail@plt+0x1f62c>
   307c4:	add	r2, sp, #128	; 0x80
   307c8:	str	sl, [sp, #132]	; 0x84
   307cc:	mov	r3, #0
   307d0:	mov	r1, r8
   307d4:	add	r0, sp, #116	; 0x74
   307d8:	str	r3, [sp, #116]	; 0x74
   307dc:	bl	28758 <__assert_fail@plt+0x16bb4>
   307e0:	str	r0, [fp]
   307e4:	ldr	r0, [sp, #136]	; 0x88
   307e8:	bl	184ec <__assert_fail@plt+0x6948>
   307ec:	ldr	r7, [sp, #116]	; 0x74
   307f0:	cmp	r7, #0
   307f4:	bne	308f8 <__assert_fail@plt+0x1ed54>
   307f8:	ldr	r3, [sp, #24]
   307fc:	add	fp, fp, #4
   30800:	cmp	r3, fp
   30804:	add	r9, r9, #4
   30808:	bne	30708 <__assert_fail@plt+0x1eb64>
   3080c:	ldr	sl, [sp, #16]
   30810:	ldr	r9, [sp, #32]
   30814:	mov	r0, sl
   30818:	ldr	fp, [sp, #12]
   3081c:	bl	184ec <__assert_fail@plt+0x6948>
   30820:	b	2ff30 <__assert_fail@plt+0x1e38c>
   30824:	ldr	r3, [r5, #8]
   30828:	cmp	r3, #0
   3082c:	ble	30898 <__assert_fail@plt+0x1ecf4>
   30830:	lsl	r0, r3, #2
   30834:	str	r3, [sp, #132]	; 0x84
   30838:	str	r3, [sp, #128]	; 0x80
   3083c:	bl	36944 <__assert_fail@plt+0x24da0>
   30840:	cmp	r0, #0
   30844:	str	r0, [sp, #136]	; 0x88
   30848:	beq	311a8 <__assert_fail@plt+0x1f604>
   3084c:	ldr	r2, [r5, #8]
   30850:	ldr	r1, [r5, #12]
   30854:	lsl	r2, r2, #2
   30858:	bl	11784 <memcpy@plt>
   3085c:	add	r2, sp, #128	; 0x80
   30860:	b	307cc <__assert_fail@plt+0x1ec28>
   30864:	lsl	r0, r3, #2
   30868:	str	r3, [sp, #132]	; 0x84
   3086c:	str	r3, [sp, #128]	; 0x80
   30870:	bl	36944 <__assert_fail@plt+0x24da0>
   30874:	cmp	r0, #0
   30878:	str	r0, [sp, #136]	; 0x88
   3087c:	beq	311a8 <__assert_fail@plt+0x1f604>
   30880:	ldr	r2, [r6, #8]
   30884:	ldr	r1, [r6, #12]
   30888:	lsl	r2, r2, #2
   3088c:	bl	11784 <memcpy@plt>
   30890:	add	r2, sp, #128	; 0x80
   30894:	b	307cc <__assert_fail@plt+0x1ec28>
   30898:	add	r2, sp, #128	; 0x80
   3089c:	mov	r3, #0
   308a0:	str	r3, [sp, #128]	; 0x80
   308a4:	str	r3, [r2, #4]
   308a8:	str	r3, [r2, #8]
   308ac:	b	307cc <__assert_fail@plt+0x1ec28>
   308b0:	ldr	r3, [r9]
   308b4:	str	r3, [fp]
   308b8:	b	307f8 <__assert_fail@plt+0x1ec54>
   308bc:	mov	r2, r3
   308c0:	mov	r3, ip
   308c4:	add	r1, r2, #1
   308c8:	mov	ip, r3
   308cc:	b	30104 <__assert_fail@plt+0x1e560>
   308d0:	sub	r2, r2, r7
   308d4:	ldr	r1, [r6, #12]
   308d8:	lsl	r2, r2, #2
   308dc:	add	r0, r0, sl, lsl #2
   308e0:	add	r1, r1, r7, lsl #2
   308e4:	bl	11784 <memcpy@plt>
   308e8:	ldr	r2, [r6, #8]
   308ec:	sub	r7, r2, r7
   308f0:	add	sl, sl, r7
   308f4:	b	307c4 <__assert_fail@plt+0x1ec20>
   308f8:	ldr	sl, [sp, #16]
   308fc:	mov	r0, sl
   30900:	bl	184ec <__assert_fail@plt+0x6948>
   30904:	ldr	r0, [sp, #12]
   30908:	bl	184ec <__assert_fail@plt+0x6948>
   3090c:	mov	r0, #0
   30910:	bl	184ec <__assert_fail@plt+0x6948>
   30914:	b	302e4 <__assert_fail@plt+0x1e740>
   30918:	ldr	r3, [r0, r1, lsl #2]
   3091c:	cmp	fp, r3
   30920:	beq	30938 <__assert_fail@plt+0x1ed94>
   30924:	mov	r1, fp
   30928:	ldr	r0, [sp, #16]
   3092c:	bl	23828 <__assert_fail@plt+0x11c84>
   30930:	cmp	r0, #0
   30934:	beq	31094 <__assert_fail@plt+0x1f4f0>
   30938:	ldr	r6, [r4, #4]
   3093c:	cmp	r6, #0
   30940:	ble	309f4 <__assert_fail@plt+0x1ee50>
   30944:	ldr	r3, [sp, #24]
   30948:	ldr	r2, [r4, #8]
   3094c:	mvn	fp, #0
   30950:	ldr	r3, [r3, #8]
   30954:	mov	lr, #0
   30958:	str	r3, [sp, #40]	; 0x28
   3095c:	sub	r3, r3, #1
   30960:	str	r2, [sp, #36]	; 0x24
   30964:	str	r3, [sp, #44]	; 0x2c
   30968:	ldr	r3, [sp, #40]	; 0x28
   3096c:	cmp	r3, #0
   30970:	ble	309d8 <__assert_fail@plt+0x1ee34>
   30974:	ldr	r3, [sp, #36]	; 0x24
   30978:	ldr	ip, [sp, #44]	; 0x2c
   3097c:	mov	r1, #0
   30980:	ldr	r4, [r3, lr, lsl #2]
   30984:	ldr	r3, [sp, #24]
   30988:	ldr	r0, [r3, #12]
   3098c:	cmp	r1, ip
   30990:	bcs	309cc <__assert_fail@plt+0x1ee28>
   30994:	add	r2, r1, ip
   30998:	lsr	r2, r2, #1
   3099c:	ldr	r3, [r0, r2, lsl #2]
   309a0:	cmp	r4, r3
   309a4:	ble	309bc <__assert_fail@plt+0x1ee18>
   309a8:	b	30a6c <__assert_fail@plt+0x1eec8>
   309ac:	ldr	ip, [r0, r3, lsl #2]
   309b0:	cmp	r4, ip
   309b4:	bgt	30a74 <__assert_fail@plt+0x1eed0>
   309b8:	mov	r2, r3
   309bc:	add	r3, r1, r2
   309c0:	cmp	r1, r2
   309c4:	lsr	r3, r3, #1
   309c8:	bcc	309ac <__assert_fail@plt+0x1ee08>
   309cc:	ldr	r3, [r0, r1, lsl #2]
   309d0:	cmp	r4, r3
   309d4:	beq	30a80 <__assert_fail@plt+0x1eedc>
   309d8:	add	lr, lr, #1
   309dc:	cmp	r6, lr
   309e0:	bne	30968 <__assert_fail@plt+0x1edc4>
   309e4:	cmp	fp, #0
   309e8:	bge	300a8 <__assert_fail@plt+0x1e504>
   309ec:	cmn	fp, #2
   309f0:	beq	31094 <__assert_fail@plt+0x1f4f0>
   309f4:	cmp	sl, #0
   309f8:	beq	30534 <__assert_fail@plt+0x1e990>
   309fc:	ldr	r4, [sl]
   30a00:	cmp	r4, #0
   30a04:	beq	312e4 <__assert_fail@plt+0x1f740>
   30a08:	sub	r3, r4, #1
   30a0c:	ldr	ip, [sl, #8]
   30a10:	add	lr, r3, r3, lsl #1
   30a14:	str	r3, [sl]
   30a18:	add	r4, ip, lr, lsl #3
   30a1c:	mov	r2, r9
   30a20:	ldr	r1, [r4, #8]
   30a24:	mov	r0, r5
   30a28:	ldr	r7, [ip, lr, lsl #3]
   30a2c:	bl	11784 <memcpy@plt>
   30a30:	ldr	r1, [r4, #8]
   30a34:	mov	r2, r9
   30a38:	add	r1, r1, r9
   30a3c:	mov	r0, r8
   30a40:	bl	11784 <memcpy@plt>
   30a44:	ldr	r0, [sp, #124]	; 0x7c
   30a48:	bl	184ec <__assert_fail@plt+0x6948>
   30a4c:	ldr	r0, [r4, #8]
   30a50:	bl	184ec <__assert_fail@plt+0x6948>
   30a54:	add	r3, r4, #12
   30a58:	ldr	fp, [r4, #4]
   30a5c:	ldm	r3, {r0, r1, r2}
   30a60:	ldr	r3, [sp, #16]
   30a64:	stm	r3, {r0, r1, r2}
   30a68:	b	300a8 <__assert_fail@plt+0x1e504>
   30a6c:	mov	r3, r2
   30a70:	mov	r2, ip
   30a74:	add	r1, r3, #1
   30a78:	mov	ip, r2
   30a7c:	b	3098c <__assert_fail@plt+0x1ede8>
   30a80:	cmn	fp, #1
   30a84:	bne	31000 <__assert_fail@plt+0x1f45c>
   30a88:	mov	fp, r4
   30a8c:	b	309d8 <__assert_fail@plt+0x1ee34>
   30a90:	ldr	r3, [sp, #236]	; 0xec
   30a94:	cmp	fp, r3
   30a98:	bne	300e4 <__assert_fail@plt+0x1e540>
   30a9c:	cmp	sl, #0
   30aa0:	bne	30c74 <__assert_fail@plt+0x1f0d0>
   30aa4:	ldr	r0, [sp, #124]	; 0x7c
   30aa8:	ldr	r8, [sp, #12]
   30aac:	bl	184ec <__assert_fail@plt+0x6948>
   30ab0:	ldr	r0, [sp, #284]	; 0x11c
   30ab4:	cmp	r0, r8
   30ab8:	beq	30b18 <__assert_fail@plt+0x1ef74>
   30abc:	bl	184ec <__assert_fail@plt+0x6948>
   30ac0:	mov	r4, #0
   30ac4:	mov	r3, #16
   30ac8:	cmp	sl, #0
   30acc:	str	r8, [sp, #284]	; 0x11c
   30ad0:	str	r4, [sp, #276]	; 0x114
   30ad4:	str	r3, [sp, #280]	; 0x118
   30ad8:	beq	30b18 <__assert_fail@plt+0x1ef74>
   30adc:	ldr	r6, [sl]
   30ae0:	ldr	r7, [sl, #8]
   30ae4:	cmp	r6, r4
   30ae8:	ble	30b10 <__assert_fail@plt+0x1ef6c>
   30aec:	mov	r5, r7
   30af0:	ldr	r0, [r5, #20]
   30af4:	bl	184ec <__assert_fail@plt+0x6948>
   30af8:	add	r4, r4, #1
   30afc:	ldr	r0, [r5, #8]
   30b00:	bl	184ec <__assert_fail@plt+0x6948>
   30b04:	cmp	r6, r4
   30b08:	add	r5, r5, #24
   30b0c:	bne	30af0 <__assert_fail@plt+0x1ef4c>
   30b10:	mov	r0, r7
   30b14:	bl	184ec <__assert_fail@plt+0x6948>
   30b18:	ldr	r7, [sp, #240]	; 0xf0
   30b1c:	ldrb	r3, [sp, #216]	; 0xd8
   30b20:	ldr	r2, [sp, #468]	; 0x1d4
   30b24:	ldr	r5, [sp, #168]	; 0xa8
   30b28:	cmp	r3, #0
   30b2c:	movne	r1, r2
   30b30:	mov	r3, r2
   30b34:	ldr	r4, [sp, #152]	; 0x98
   30b38:	ldr	lr, [sp, #172]	; 0xac
   30b3c:	ldr	r0, [sp, #112]	; 0x70
   30b40:	addne	r3, r2, #4
   30b44:	addne	r6, r1, r9
   30b48:	bne	30c24 <__assert_fail@plt+0x1f080>
   30b4c:	add	r1, r3, #4
   30b50:	add	ip, r3, r9
   30b54:	ldr	r3, [r1, #-4]
   30b58:	add	r2, r2, #8
   30b5c:	cmn	r3, #1
   30b60:	add	r3, r0, r3
   30b64:	ldrne	lr, [r2, #-4]
   30b68:	strne	r3, [r1, #-4]
   30b6c:	addne	r3, r0, lr
   30b70:	strne	r3, [r2, #-4]
   30b74:	cmp	ip, r2
   30b78:	add	r1, r1, #8
   30b7c:	bne	30b54 <__assert_fail@plt+0x1efb0>
   30b80:	ldr	r3, [sp, #96]	; 0x60
   30b84:	cmp	r3, #0
   30b88:	ble	30bbc <__assert_fail@plt+0x1f018>
   30b8c:	ldr	r2, [sp, #56]	; 0x38
   30b90:	ldr	r1, [sp, #468]	; 0x1d4
   30b94:	add	r2, r3, r2
   30b98:	ldr	r3, [sp, #468]	; 0x1d4
   30b9c:	add	r2, r1, r2, lsl #3
   30ba0:	add	r3, r3, r9
   30ba4:	mvn	r1, #0
   30ba8:	str	r1, [r3]
   30bac:	str	r1, [r3, #4]
   30bb0:	add	r3, r3, #8
   30bb4:	cmp	r3, r2
   30bb8:	bne	30ba8 <__assert_fail@plt+0x1f004>
   30bbc:	ldr	r3, [sp, #28]
   30bc0:	ldr	r3, [r3, #132]	; 0x84
   30bc4:	cmp	r3, #0
   30bc8:	beq	2f910 <__assert_fail@plt+0x1dd6c>
   30bcc:	ldr	r0, [sp, #468]	; 0x1d4
   30bd0:	mov	ip, #0
   30bd4:	mov	lr, r0
   30bd8:	b	30c10 <__assert_fail@plt+0x1f06c>
   30bdc:	ldr	r1, [r3]
   30be0:	cmp	ip, r1
   30be4:	add	r4, r1, #1
   30be8:	mov	ip, r2
   30bec:	beq	30c08 <__assert_fail@plt+0x1f064>
   30bf0:	ldr	r2, [lr, r4, lsl #3]
   30bf4:	str	r2, [r0, #8]
   30bf8:	ldr	r2, [r3]
   30bfc:	add	r2, lr, r2, lsl #3
   30c00:	ldr	r2, [r2, #12]
   30c04:	str	r2, [r0, #12]
   30c08:	add	r3, r3, #4
   30c0c:	add	r0, r0, #8
   30c10:	ldr	r1, [sp, #56]	; 0x38
   30c14:	add	r2, ip, #1
   30c18:	cmp	r2, r1
   30c1c:	bne	30bdc <__assert_fail@plt+0x1f038>
   30c20:	b	2f910 <__assert_fail@plt+0x1dd6c>
   30c24:	ldr	r1, [r3, #-4]
   30c28:	cmn	r1, #1
   30c2c:	beq	30c60 <__assert_fail@plt+0x1f0bc>
   30c30:	cmp	r1, r5
   30c34:	moveq	r1, lr
   30c38:	ldrne	r1, [r4, r1, lsl #2]
   30c3c:	str	r1, [r3, #-4]
   30c40:	ldr	ip, [r2, #4]
   30c44:	add	r1, r1, r0
   30c48:	cmp	r5, ip
   30c4c:	moveq	ip, lr
   30c50:	ldrne	ip, [r4, ip, lsl #2]
   30c54:	str	r1, [r3, #-4]
   30c58:	add	ip, ip, r0
   30c5c:	str	ip, [r2, #4]
   30c60:	add	r2, r2, #8
   30c64:	cmp	r2, r6
   30c68:	add	r3, r3, #8
   30c6c:	bne	30c24 <__assert_fail@plt+0x1f080>
   30c70:	b	30b80 <__assert_fail@plt+0x1efdc>
   30c74:	mov	r2, r5
   30c78:	mov	r3, #0
   30c7c:	b	30c90 <__assert_fail@plt+0x1f0ec>
   30c80:	ldr	r1, [sp, #56]	; 0x38
   30c84:	add	r2, r2, #8
   30c88:	cmp	r1, r3
   30c8c:	beq	31364 <__assert_fail@plt+0x1f7c0>
   30c90:	ldr	r1, [r5, r3, lsl #3]
   30c94:	add	r3, r3, #1
   30c98:	cmp	r1, #0
   30c9c:	blt	30c80 <__assert_fail@plt+0x1f0dc>
   30ca0:	ldr	r1, [r2, #4]
   30ca4:	cmn	r1, #1
   30ca8:	bne	30c80 <__assert_fail@plt+0x1f0dc>
   30cac:	ldr	r3, [sl]
   30cb0:	cmp	r3, #0
   30cb4:	beq	31364 <__assert_fail@plt+0x1f7c0>
   30cb8:	sub	r3, r3, #1
   30cbc:	ldr	ip, [sl, #8]
   30cc0:	add	lr, r3, r3, lsl #1
   30cc4:	str	r3, [sl]
   30cc8:	add	r4, ip, lr, lsl #3
   30ccc:	mov	r2, r9
   30cd0:	ldr	r1, [r4, #8]
   30cd4:	mov	r0, r5
   30cd8:	ldr	r7, [ip, lr, lsl #3]
   30cdc:	bl	11784 <memcpy@plt>
   30ce0:	ldr	r1, [r4, #8]
   30ce4:	mov	r2, r9
   30ce8:	add	r1, r1, r9
   30cec:	mov	r0, r8
   30cf0:	bl	11784 <memcpy@plt>
   30cf4:	ldr	r0, [sp, #124]	; 0x7c
   30cf8:	bl	184ec <__assert_fail@plt+0x6948>
   30cfc:	ldr	r0, [r4, #8]
   30d00:	bl	184ec <__assert_fail@plt+0x6948>
   30d04:	add	r3, r4, #12
   30d08:	ldr	fp, [r4, #4]
   30d0c:	ldm	r3, {r0, r1, r2}
   30d10:	ldr	r3, [sp, #16]
   30d14:	str	fp, [sp, #24]
   30d18:	lsl	r6, fp, #3
   30d1c:	stm	r3, {r0, r1, r2}
   30d20:	b	30150 <__assert_fail@plt+0x1e5ac>
   30d24:	ldrb	r1, [r3, #6]
   30d28:	tst	r1, #16
   30d2c:	bne	30f4c <__assert_fail@plt+0x1f3a8>
   30d30:	cmp	r2, #4
   30d34:	beq	30ec4 <__assert_fail@plt+0x1f320>
   30d38:	ldr	r0, [sp, #144]	; 0x90
   30d3c:	sub	r1, r2, #1
   30d40:	ldrb	r2, [r0, r7]
   30d44:	cmp	r1, #6
   30d48:	ldrls	pc, [pc, r1, lsl #2]
   30d4c:	b	309f4 <__assert_fail@plt+0x1ee50>
   30d50:			; <UNDEFINED> instruction: 0x00030eb4
   30d54:	strdeq	r0, [r3], -r4
   30d58:	muleq	r3, r4, lr
   30d5c:	strdeq	r0, [r3], -r4
   30d60:	andeq	r0, r3, r4, ror sp
   30d64:	strdeq	r0, [r3], -r4
   30d68:	andeq	r0, r3, ip, ror #26
   30d6c:	tst	r2, #128	; 0x80
   30d70:	bne	309f4 <__assert_fail@plt+0x1ee50>
   30d74:	cmp	r2, #10
   30d78:	beq	30fec <__assert_fail@plt+0x1f448>
   30d7c:	cmp	r2, #0
   30d80:	bne	30d94 <__assert_fail@plt+0x1f1f0>
   30d84:	ldr	r2, [sp, #224]	; 0xe0
   30d88:	ldr	r2, [r2, #128]	; 0x80
   30d8c:	tst	r2, #128	; 0x80
   30d90:	bne	309f4 <__assert_fail@plt+0x1ee50>
   30d94:	ldr	r6, [r3, #4]
   30d98:	ldr	r3, [pc, #-2536]	; 303b8 <__assert_fail@plt+0x1e814>
   30d9c:	tst	r6, r3
   30da0:	beq	30df4 <__assert_fail@plt+0x1f250>
   30da4:	ldr	r2, [sp, #228]	; 0xe4
   30da8:	mov	r1, r7
   30dac:	add	r0, sp, #140	; 0x8c
   30db0:	bl	23ef0 <__assert_fail@plt+0x1234c>
   30db4:	ldr	r3, [pc, #-2560]	; 303bc <__assert_fail@plt+0x1e818>
   30db8:	and	r3, r3, r6, lsr #8
   30dbc:	tst	r3, #4
   30dc0:	beq	30fd8 <__assert_fail@plt+0x1f434>
   30dc4:	tst	r0, #1
   30dc8:	beq	309f4 <__assert_fail@plt+0x1ee50>
   30dcc:	tst	r3, #8
   30dd0:	bne	309f4 <__assert_fail@plt+0x1ee50>
   30dd4:	tst	r3, #32
   30dd8:	beq	30de4 <__assert_fail@plt+0x1f240>
   30ddc:	tst	r0, #2
   30de0:	beq	309f4 <__assert_fail@plt+0x1ee50>
   30de4:	tst	r3, #128	; 0x80
   30de8:	beq	30df4 <__assert_fail@plt+0x1f250>
   30dec:	tst	r0, #8
   30df0:	beq	309f4 <__assert_fail@plt+0x1ee50>
   30df4:	ldr	r3, [r4, #12]
   30df8:	ldr	r2, [sp, #24]
   30dfc:	add	r7, r7, #1
   30e00:	ldr	fp, [r3, r2, lsl #2]
   30e04:	cmp	sl, #0
   30e08:	beq	30e88 <__assert_fail@plt+0x1f2e4>
   30e0c:	ldr	r3, [sp, #232]	; 0xe8
   30e10:	cmp	r7, r3
   30e14:	bgt	309fc <__assert_fail@plt+0x1ee58>
   30e18:	ldr	r3, [sp, #240]	; 0xf0
   30e1c:	ldr	r3, [r3, r7, lsl #2]
   30e20:	cmp	r3, #0
   30e24:	beq	309fc <__assert_fail@plt+0x1ee58>
   30e28:	ldr	r2, [r3, #8]
   30e2c:	cmp	r2, #0
   30e30:	ble	309fc <__assert_fail@plt+0x1ee58>
   30e34:	ldr	ip, [r3, #12]
   30e38:	sub	r2, r2, #1
   30e3c:	mov	r0, #0
   30e40:	cmp	r0, r2
   30e44:	bcs	30e7c <__assert_fail@plt+0x1f2d8>
   30e48:	add	r3, r0, r2
   30e4c:	lsr	r3, r3, #1
   30e50:	b	30e68 <__assert_fail@plt+0x1f2c4>
   30e54:	add	r1, r3, r0
   30e58:	cmp	r3, r0
   30e5c:	mov	r2, r3
   30e60:	lsr	r3, r1, #1
   30e64:	bls	30e7c <__assert_fail@plt+0x1f2d8>
   30e68:	ldr	r1, [ip, r3, lsl #2]
   30e6c:	cmp	r1, fp
   30e70:	bge	30e54 <__assert_fail@plt+0x1f2b0>
   30e74:	add	r0, r3, #1
   30e78:	b	30e40 <__assert_fail@plt+0x1f29c>
   30e7c:	ldr	r3, [ip, r0, lsl #2]
   30e80:	cmp	r3, fp
   30e84:	bne	309fc <__assert_fail@plt+0x1ee58>
   30e88:	mov	r3, #0
   30e8c:	str	r3, [sp, #120]	; 0x78
   30e90:	b	309e4 <__assert_fail@plt+0x1ee40>
   30e94:	ldr	r1, [r3]
   30e98:	asr	r0, r2, #5
   30e9c:	and	r2, r2, #31
   30ea0:	ldr	r1, [r1, r0, lsl #2]
   30ea4:	lsr	r2, r1, r2
   30ea8:	tst	r2, #1
   30eac:	bne	30d94 <__assert_fail@plt+0x1f1f0>
   30eb0:	b	309f4 <__assert_fail@plt+0x1ee50>
   30eb4:	ldrb	r1, [r3]
   30eb8:	cmp	r1, r2
   30ebc:	bne	309f4 <__assert_fail@plt+0x1ee50>
   30ec0:	b	30d94 <__assert_fail@plt+0x1f1f0>
   30ec4:	ldr	r3, [r3]
   30ec8:	ldr	r2, [sp, #56]	; 0x38
   30ecc:	add	r3, r3, #1
   30ed0:	cmp	r2, r3
   30ed4:	ble	30fcc <__assert_fail@plt+0x1f428>
   30ed8:	add	r2, r5, r3, lsl #3
   30edc:	ldr	r0, [r5, r3, lsl #3]
   30ee0:	ldr	r2, [r2, #4]
   30ee4:	cmp	sl, #0
   30ee8:	sub	r3, r2, r0
   30eec:	beq	30f78 <__assert_fail@plt+0x1f3d4>
   30ef0:	cmn	r0, #1
   30ef4:	beq	309fc <__assert_fail@plt+0x1ee58>
   30ef8:	cmn	r2, #1
   30efc:	beq	309fc <__assert_fail@plt+0x1ee58>
   30f00:	cmp	r3, #0
   30f04:	beq	30f80 <__assert_fail@plt+0x1f3dc>
   30f08:	ldr	r2, [sp, #168]	; 0xa8
   30f0c:	ldr	r1, [sp, #144]	; 0x90
   30f10:	sub	r2, r2, r7
   30f14:	cmp	r3, r2
   30f18:	bgt	309fc <__assert_fail@plt+0x1ee58>
   30f1c:	add	r0, r1, r0
   30f20:	mov	r2, r3
   30f24:	add	r1, r1, r7
   30f28:	str	r3, [sp, #24]
   30f2c:	bl	117c0 <memcmp@plt>
   30f30:	ldr	r3, [sp, #24]
   30f34:	cmp	r0, #0
   30f38:	bne	309fc <__assert_fail@plt+0x1ee58>
   30f3c:	ldr	r2, [r4, #12]
   30f40:	add	r7, r7, r3
   30f44:	ldr	fp, [r2, fp, lsl #2]
   30f48:	b	30e04 <__assert_fail@plt+0x1f260>
   30f4c:	add	r3, sp, #140	; 0x8c
   30f50:	str	r7, [sp]
   30f54:	mov	r2, fp
   30f58:	add	r1, r4, #128	; 0x80
   30f5c:	bl	259cc <__assert_fail@plt+0x13e28>
   30f60:	subs	r3, r0, #0
   30f64:	bne	30f3c <__assert_fail@plt+0x1f398>
   30f68:	ldr	r3, [r4]
   30f6c:	add	r3, r3, r6
   30f70:	ldrb	r2, [r3, #4]
   30f74:	b	30d38 <__assert_fail@plt+0x1f194>
   30f78:	cmp	r3, #0
   30f7c:	bne	30f3c <__assert_fail@plt+0x1f398>
   30f80:	mov	r1, fp
   30f84:	ldr	r0, [sp, #16]
   30f88:	bl	23828 <__assert_fail@plt+0x11c84>
   30f8c:	cmp	r0, #0
   30f90:	beq	31094 <__assert_fail@plt+0x1f4f0>
   30f94:	add	fp, fp, fp, lsl #1
   30f98:	ldr	r3, [r4, #20]
   30f9c:	ldr	r1, [sp, #240]	; 0xf0
   30fa0:	add	r3, r3, fp, lsl #2
   30fa4:	ldr	r2, [r3, #8]
   30fa8:	ldr	r3, [r1, r7, lsl #2]
   30fac:	ldr	fp, [r2]
   30fb0:	add	r1, r3, #12
   30fb4:	mov	r2, fp
   30fb8:	ldr	r0, [r3, #8]
   30fbc:	bl	23944 <__assert_fail@plt+0x11da0>
   30fc0:	cmp	r0, #0
   30fc4:	beq	30f68 <__assert_fail@plt+0x1f3c4>
   30fc8:	b	309e4 <__assert_fail@plt+0x1ee40>
   30fcc:	cmp	sl, #0
   30fd0:	bne	309fc <__assert_fail@plt+0x1ee58>
   30fd4:	b	30f80 <__assert_fail@plt+0x1f3dc>
   30fd8:	tst	r3, #8
   30fdc:	beq	30dd4 <__assert_fail@plt+0x1f230>
   30fe0:	tst	r0, #1
   30fe4:	beq	30dd4 <__assert_fail@plt+0x1f230>
   30fe8:	b	309f4 <__assert_fail@plt+0x1ee50>
   30fec:	ldr	r2, [sp, #224]	; 0xe0
   30ff0:	ldr	r2, [r2, #128]	; 0x80
   30ff4:	tst	r2, #64	; 0x40
   30ff8:	bne	30d94 <__assert_fail@plt+0x1f1f0>
   30ffc:	b	309f4 <__assert_fail@plt+0x1ee50>
   31000:	mov	r2, fp
   31004:	add	r1, sp, #124	; 0x7c
   31008:	ldr	r0, [sp, #120]	; 0x78
   3100c:	bl	23944 <__assert_fail@plt+0x11da0>
   31010:	cmp	r0, #0
   31014:	bne	312dc <__assert_fail@plt+0x1f738>
   31018:	cmp	sl, #0
   3101c:	beq	309e4 <__assert_fail@plt+0x1ee40>
   31020:	ldr	r6, [sl]
   31024:	ldr	r3, [sl, #4]
   31028:	add	r2, r6, #1
   3102c:	cmp	r2, r3
   31030:	str	r2, [sl]
   31034:	ldrne	r2, [sl, #8]
   31038:	beq	31114 <__assert_fail@plt+0x1f570>
   3103c:	add	r3, r6, r6, lsl #1
   31040:	ldr	r0, [sp, #32]
   31044:	add	r6, r2, r3, lsl #3
   31048:	str	r7, [r2, r3, lsl #3]
   3104c:	str	r4, [r6, #4]
   31050:	bl	36944 <__assert_fail@plt+0x24da0>
   31054:	cmp	r0, #0
   31058:	str	r0, [r6, #8]
   3105c:	beq	31094 <__assert_fail@plt+0x1f4f0>
   31060:	mov	r2, r9
   31064:	mov	r1, r5
   31068:	bl	11784 <memcpy@plt>
   3106c:	ldr	r0, [r6, #8]
   31070:	mov	r2, r9
   31074:	mov	r1, r8
   31078:	add	r0, r0, r9
   3107c:	bl	11784 <memcpy@plt>
   31080:	ldr	r1, [sp, #16]
   31084:	add	r0, r6, #12
   31088:	bl	23be8 <__assert_fail@plt+0x12044>
   3108c:	cmp	r0, #0
   31090:	beq	309e4 <__assert_fail@plt+0x1ee40>
   31094:	ldr	r0, [sp, #124]	; 0x7c
   31098:	ldr	r8, [sp, #12]
   3109c:	bl	184ec <__assert_fail@plt+0x6948>
   310a0:	ldr	r0, [sp, #284]	; 0x11c
   310a4:	cmp	r0, r8
   310a8:	beq	310b0 <__assert_fail@plt+0x1f50c>
   310ac:	bl	184ec <__assert_fail@plt+0x6948>
   310b0:	mov	r4, #0
   310b4:	mov	r3, #16
   310b8:	cmp	sl, #0
   310bc:	str	r8, [sp, #284]	; 0x11c
   310c0:	str	r4, [sp, #276]	; 0x114
   310c4:	str	r3, [sp, #280]	; 0x118
   310c8:	beq	311f8 <__assert_fail@plt+0x1f654>
   310cc:	ldr	r7, [sl]
   310d0:	ldr	r6, [sl, #8]
   310d4:	cmp	r7, r4
   310d8:	ble	31100 <__assert_fail@plt+0x1f55c>
   310dc:	mov	r5, r6
   310e0:	ldr	r0, [r5, #20]
   310e4:	bl	184ec <__assert_fail@plt+0x6948>
   310e8:	add	r4, r4, #1
   310ec:	ldr	r0, [r5, #8]
   310f0:	bl	184ec <__assert_fail@plt+0x6948>
   310f4:	cmp	r7, r4
   310f8:	add	r5, r5, #24
   310fc:	bne	310e0 <__assert_fail@plt+0x1f53c>
   31100:	mov	r0, r6
   31104:	bl	184ec <__assert_fail@plt+0x6948>
   31108:	mov	r3, #12
   3110c:	str	r3, [sp, #48]	; 0x30
   31110:	b	30558 <__assert_fail@plt+0x1e9b4>
   31114:	lsl	r3, r2, #1
   31118:	add	r2, r3, r2
   3111c:	ldr	r0, [sl, #8]
   31120:	lsl	r1, r2, #4
   31124:	str	r3, [sp, #24]
   31128:	bl	36970 <__assert_fail@plt+0x24dcc>
   3112c:	subs	r2, r0, #0
   31130:	beq	31094 <__assert_fail@plt+0x1f4f0>
   31134:	ldr	r3, [sp, #24]
   31138:	str	r2, [sl, #8]
   3113c:	str	r3, [sl, #4]
   31140:	b	3103c <__assert_fail@plt+0x1f498>
   31144:	ldr	r3, [r1]
   31148:	ldr	r0, [sp, #56]	; 0x38
   3114c:	add	r3, r3, #1
   31150:	cmp	r0, r3
   31154:	ble	300dc <__assert_fail@plt+0x1e538>
   31158:	ldr	r0, [r5, r3, lsl #3]
   3115c:	add	r2, r5, r3, lsl #3
   31160:	cmp	r0, r7
   31164:	blt	3118c <__assert_fail@plt+0x1f5e8>
   31168:	ldrb	r1, [r1, #6]
   3116c:	tst	r1, #8
   31170:	beq	31180 <__assert_fail@plt+0x1f5dc>
   31174:	ldr	r3, [r8, r3, lsl #3]
   31178:	cmn	r3, #1
   3117c:	bne	31424 <__assert_fail@plt+0x1f880>
   31180:	str	r7, [r2, #4]
   31184:	ldr	r2, [r5, #4]
   31188:	b	300dc <__assert_fail@plt+0x1e538>
   3118c:	str	r7, [r2, #4]
   31190:	mov	r1, r5
   31194:	mov	r2, r9
   31198:	mov	r0, r8
   3119c:	bl	11784 <memcpy@plt>
   311a0:	ldr	r2, [r5, #4]
   311a4:	b	300dc <__assert_fail@plt+0x1e538>
   311a8:	ldr	sl, [sp, #16]
   311ac:	ldr	fp, [sp, #12]
   311b0:	mov	r0, sl
   311b4:	bl	184ec <__assert_fail@plt+0x6948>
   311b8:	mov	r0, fp
   311bc:	bl	184ec <__assert_fail@plt+0x6948>
   311c0:	mov	r0, #0
   311c4:	bl	184ec <__assert_fail@plt+0x6948>
   311c8:	mov	r7, #12
   311cc:	b	302ec <__assert_fail@plt+0x1e748>
   311d0:	sub	r2, r2, r4
   311d4:	ldr	r1, [r5, #12]
   311d8:	lsl	r2, r2, #2
   311dc:	add	r0, r0, sl, lsl #2
   311e0:	add	r1, r1, r4, lsl #2
   311e4:	bl	11784 <memcpy@plt>
   311e8:	ldr	r2, [r5, #8]
   311ec:	sub	r4, r2, r4
   311f0:	add	sl, sl, r4
   311f4:	b	307c4 <__assert_fail@plt+0x1ec20>
   311f8:	mov	r3, #12
   311fc:	str	r3, [sp, #48]	; 0x30
   31200:	b	30558 <__assert_fail@plt+0x1e9b4>
   31204:	ldr	r3, [sp, #44]	; 0x2c
   31208:	mov	r1, #16
   3120c:	str	r1, [sp, #280]	; 0x118
   31210:	ldr	r3, [r3]
   31214:	ldr	r1, [sp, #56]	; 0x38
   31218:	mov	ip, r3
   3121c:	str	r3, [sp, #20]
   31220:	add	r3, sp, #116	; 0x74
   31224:	mov	r0, r3
   31228:	str	r3, [sp, #16]
   3122c:	mov	r3, #0
   31230:	mov	sl, r3
   31234:	add	r8, sp, #288	; 0x120
   31238:	mov	r2, #2
   3123c:	str	r3, [sp, #276]	; 0x114
   31240:	str	r8, [sp, #284]	; 0x11c
   31244:	str	r3, [sp, #128]	; 0x80
   31248:	ldr	fp, [ip, #72]	; 0x48
   3124c:	str	r3, [sp, #136]	; 0x88
   31250:	str	r3, [sp, #116]	; 0x74
   31254:	str	r2, [sp, #132]	; 0x84
   31258:	str	r3, [r0, #4]
   3125c:	str	r3, [r0, #8]
   31260:	mov	r3, #8
   31264:	mov	r2, r8
   31268:	add	r0, sp, #276	; 0x114
   3126c:	bl	37490 <__assert_fail@plt+0x258ec>
   31270:	cmp	r0, #0
   31274:	bne	3006c <__assert_fail@plt+0x1e4c8>
   31278:	ldr	r0, [sp, #284]	; 0x11c
   3127c:	cmp	r0, r8
   31280:	beq	31288 <__assert_fail@plt+0x1f6e4>
   31284:	bl	184ec <__assert_fail@plt+0x6948>
   31288:	mov	r4, #0
   3128c:	mov	r3, #16
   31290:	cmp	sl, #0
   31294:	str	r8, [sp, #284]	; 0x11c
   31298:	str	r4, [sp, #276]	; 0x114
   3129c:	str	r3, [sp, #280]	; 0x118
   312a0:	beq	311f8 <__assert_fail@plt+0x1f654>
   312a4:	ldr	r7, [sl]
   312a8:	ldr	r6, [sl, #8]
   312ac:	cmp	r7, #0
   312b0:	ble	31100 <__assert_fail@plt+0x1f55c>
   312b4:	mov	r5, r6
   312b8:	ldr	r0, [r5, #20]
   312bc:	bl	184ec <__assert_fail@plt+0x6948>
   312c0:	add	r4, r4, #1
   312c4:	ldr	r0, [r5, #8]
   312c8:	bl	184ec <__assert_fail@plt+0x6948>
   312cc:	cmp	r7, r4
   312d0:	add	r5, r5, #24
   312d4:	bne	312b8 <__assert_fail@plt+0x1f714>
   312d8:	b	31100 <__assert_fail@plt+0x1f55c>
   312dc:	mov	fp, r4
   312e0:	b	309e4 <__assert_fail@plt+0x1ee40>
   312e4:	ldr	r0, [sp, #124]	; 0x7c
   312e8:	ldr	r8, [sp, #12]
   312ec:	bl	184ec <__assert_fail@plt+0x6948>
   312f0:	ldr	r0, [sp, #284]	; 0x11c
   312f4:	cmp	r0, r8
   312f8:	beq	3134c <__assert_fail@plt+0x1f7a8>
   312fc:	bl	184ec <__assert_fail@plt+0x6948>
   31300:	ldr	r7, [sl]
   31304:	mov	r3, #16
   31308:	cmp	r7, #0
   3130c:	str	r4, [sp, #276]	; 0x114
   31310:	ldrgt	r6, [sl, #8]
   31314:	str	r8, [sp, #284]	; 0x11c
   31318:	str	r3, [sp, #280]	; 0x118
   3131c:	movgt	r5, r6
   31320:	ble	3135c <__assert_fail@plt+0x1f7b8>
   31324:	ldr	r0, [r5, #20]
   31328:	bl	184ec <__assert_fail@plt+0x6948>
   3132c:	add	r4, r4, #1
   31330:	ldr	r0, [r5, #8]
   31334:	bl	184ec <__assert_fail@plt+0x6948>
   31338:	cmp	r4, r7
   3133c:	add	r5, r5, #24
   31340:	bne	31324 <__assert_fail@plt+0x1f780>
   31344:	mov	r0, r6
   31348:	b	3054c <__assert_fail@plt+0x1e9a8>
   3134c:	mov	r3, #16
   31350:	str	r4, [sp, #276]	; 0x114
   31354:	str	r8, [sp, #284]	; 0x11c
   31358:	str	r3, [sp, #280]	; 0x118
   3135c:	ldr	r6, [sl, #8]
   31360:	b	31344 <__assert_fail@plt+0x1f7a0>
   31364:	ldr	r0, [sp, #124]	; 0x7c
   31368:	ldr	r8, [sp, #12]
   3136c:	bl	184ec <__assert_fail@plt+0x6948>
   31370:	ldr	r0, [sp, #284]	; 0x11c
   31374:	cmp	r0, r8
   31378:	bne	30abc <__assert_fail@plt+0x1ef18>
   3137c:	b	30ac0 <__assert_fail@plt+0x1ef1c>
   31380:	ldr	r0, [sp, #124]	; 0x7c
   31384:	ldr	r8, [sp, #12]
   31388:	bl	184ec <__assert_fail@plt+0x6948>
   3138c:	ldr	r0, [sp, #284]	; 0x11c
   31390:	cmp	r0, r8
   31394:	beq	3139c <__assert_fail@plt+0x1f7f8>
   31398:	bl	184ec <__assert_fail@plt+0x6948>
   3139c:	mov	r4, #0
   313a0:	mov	r3, #16
   313a4:	cmp	sl, #0
   313a8:	str	r8, [sp, #284]	; 0x11c
   313ac:	str	r4, [sp, #276]	; 0x114
   313b0:	str	r3, [sp, #280]	; 0x118
   313b4:	beq	30b18 <__assert_fail@plt+0x1ef74>
   313b8:	ldr	r6, [sl]
   313bc:	ldr	r7, [sl, #8]
   313c0:	cmp	r6, r4
   313c4:	ble	30b10 <__assert_fail@plt+0x1ef6c>
   313c8:	mov	r5, r7
   313cc:	ldr	r0, [r5, #20]
   313d0:	bl	184ec <__assert_fail@plt+0x6948>
   313d4:	add	r4, r4, #1
   313d8:	ldr	r0, [r5, #8]
   313dc:	bl	184ec <__assert_fail@plt+0x6948>
   313e0:	cmp	r4, r6
   313e4:	add	r5, r5, #24
   313e8:	bne	313cc <__assert_fail@plt+0x1f828>
   313ec:	b	30b10 <__assert_fail@plt+0x1ef6c>
   313f0:	add	sl, sp, #128	; 0x80
   313f4:	b	31260 <__assert_fail@plt+0x1f6bc>
   313f8:	ldr	r3, [r0, fp, lsl #3]
   313fc:	ldr	r1, [sp, #56]	; 0x38
   31400:	add	r3, r3, #1
   31404:	cmp	r1, r3
   31408:	ble	300dc <__assert_fail@plt+0x1e538>
   3140c:	add	r2, r5, r3, lsl #3
   31410:	str	r7, [r5, r3, lsl #3]
   31414:	mvn	r3, #0
   31418:	str	r3, [r2, #4]
   3141c:	ldr	r2, [r5, #4]
   31420:	b	300dc <__assert_fail@plt+0x1e538>
   31424:	mov	r2, r9
   31428:	mov	r1, r8
   3142c:	mov	r0, r5
   31430:	bl	11784 <memcpy@plt>
   31434:	ldr	r2, [r5, #4]
   31438:	b	300dc <__assert_fail@plt+0x1e538>
   3143c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31440:	sub	sp, sp, #12
   31444:	ldrb	ip, [r1, #28]
   31448:	ldr	r4, [r2, #4]
   3144c:	ldr	r5, [r1]
   31450:	adds	r3, r4, #0
   31454:	movne	r3, #1
   31458:	ands	r3, r3, ip, lsr #4
   3145c:	beq	3147c <__assert_fail@plt+0x1f8d8>
   31460:	ldr	r3, [r2, #20]
   31464:	cmp	r3, #31
   31468:	bgt	316c4 <__assert_fail@plt+0x1fb20>
   3146c:	ldr	r1, [r5, #80]	; 0x50
   31470:	lsr	r3, r1, r3
   31474:	tst	r3, #1
   31478:	beq	316c4 <__assert_fail@plt+0x1fb20>
   3147c:	mov	r8, r2
   31480:	ldr	r2, [r5, #64]	; 0x40
   31484:	mov	sl, #0
   31488:	cmp	r2, #31
   3148c:	mov	r9, r0
   31490:	mov	r6, sp
   31494:	str	sl, [sp, #4]
   31498:	str	sl, [sp]
   3149c:	beq	316e8 <__assert_fail@plt+0x1fb44>
   314a0:	lsl	r3, r2, #5
   314a4:	ldr	r7, [r5, #56]	; 0x38
   314a8:	add	r2, r2, #1
   314ac:	add	ip, r3, #4
   314b0:	mov	r1, #8
   314b4:	add	r3, r7, r3
   314b8:	strb	r1, [sp, #4]
   314bc:	ldm	r6, {r0, r1}
   314c0:	add	lr, r3, #24
   314c4:	str	r2, [r5, #64]	; 0x40
   314c8:	mov	r2, #0
   314cc:	str	r2, [r3, #4]
   314d0:	str	r2, [r3, #8]
   314d4:	str	r2, [r3, #12]
   314d8:	stm	lr, {r0, r1}
   314dc:	ldrb	r1, [r3, #30]
   314e0:	add	r7, r7, ip
   314e4:	mvn	r0, #0
   314e8:	and	r1, r1, #243	; 0xf3
   314ec:	str	r2, [r3, #16]
   314f0:	str	r2, [r3, #20]
   314f4:	strb	r1, [r3, #30]
   314f8:	str	r0, [r3, #32]
   314fc:	ldr	r2, [r5, #64]	; 0x40
   31500:	mov	fp, #0
   31504:	cmp	r2, #31
   31508:	str	fp, [sp]
   3150c:	str	fp, [r6, #4]
   31510:	beq	31714 <__assert_fail@plt+0x1fb70>
   31514:	lsl	r3, r2, #5
   31518:	ldr	sl, [r5, #56]	; 0x38
   3151c:	add	r2, r2, #1
   31520:	add	ip, r3, #4
   31524:	mov	r1, #9
   31528:	add	r3, sl, r3
   3152c:	strb	r1, [sp, #4]
   31530:	ldm	r6, {r0, r1}
   31534:	add	lr, r3, #24
   31538:	str	r2, [r5, #64]	; 0x40
   3153c:	mov	r2, #0
   31540:	str	r2, [r3, #4]
   31544:	str	r2, [r3, #8]
   31548:	str	r2, [r3, #12]
   3154c:	stm	lr, {r0, r1}
   31550:	ldrb	r1, [r3, #30]
   31554:	add	sl, sl, ip
   31558:	mvn	r0, #0
   3155c:	and	r1, r1, #243	; 0xf3
   31560:	str	r2, [r3, #16]
   31564:	str	r2, [r3, #20]
   31568:	strb	r1, [r3, #30]
   3156c:	str	r0, [r3, #32]
   31570:	cmp	r4, #0
   31574:	moveq	fp, sl
   31578:	beq	315f4 <__assert_fail@plt+0x1fa50>
   3157c:	ldr	r2, [r5, #64]	; 0x40
   31580:	mov	fp, #0
   31584:	cmp	r2, #31
   31588:	str	fp, [sp]
   3158c:	str	fp, [r6, #4]
   31590:	beq	3176c <__assert_fail@plt+0x1fbc8>
   31594:	lsl	r3, r2, #5
   31598:	ldr	ip, [r5, #56]	; 0x38
   3159c:	add	r2, r2, #1
   315a0:	add	fp, r3, #4
   315a4:	mov	r1, #16
   315a8:	add	r3, ip, r3
   315ac:	strb	r1, [sp, #4]
   315b0:	ldm	r6, {r0, r1}
   315b4:	str	r2, [r5, #64]	; 0x40
   315b8:	add	lr, r3, #24
   315bc:	mov	r2, #0
   315c0:	add	fp, ip, fp
   315c4:	stmib	r3, {r2, r4, sl}
   315c8:	cmp	sl, r2
   315cc:	stm	lr, {r0, r1}
   315d0:	ldrb	r1, [r3, #30]
   315d4:	mvn	r0, #0
   315d8:	str	r2, [r3, #16]
   315dc:	and	r1, r1, #243	; 0xf3
   315e0:	str	r2, [r3, #20]
   315e4:	strb	r1, [r3, #30]
   315e8:	str	r0, [r3, #32]
   315ec:	str	fp, [r4]
   315f0:	strne	fp, [sl]
   315f4:	ldr	r2, [r5, #64]	; 0x40
   315f8:	mov	r4, #0
   315fc:	cmp	r2, #31
   31600:	str	r4, [sp]
   31604:	str	r4, [r6, #4]
   31608:	beq	31740 <__assert_fail@plt+0x1fb9c>
   3160c:	lsl	r3, r2, #5
   31610:	ldr	ip, [r5, #56]	; 0x38
   31614:	add	r2, r2, #1
   31618:	add	r4, r3, #4
   3161c:	mov	r1, #16
   31620:	add	r3, ip, r3
   31624:	strb	r1, [sp, #4]
   31628:	ldm	r6, {r0, r1}
   3162c:	str	r2, [r5, #64]	; 0x40
   31630:	add	r2, r3, #24
   31634:	mov	lr, #0
   31638:	str	r7, [r3, #8]
   3163c:	str	fp, [r3, #12]
   31640:	str	lr, [r3, #4]
   31644:	stm	r2, {r0, r1}
   31648:	ldrb	r2, [r3, #30]
   3164c:	cmp	r7, lr
   31650:	mvn	r1, #0
   31654:	and	r2, r2, #243	; 0xf3
   31658:	add	r4, ip, r4
   3165c:	str	lr, [r3, #16]
   31660:	str	lr, [r3, #20]
   31664:	strb	r2, [r3, #30]
   31668:	str	r1, [r3, #32]
   3166c:	strne	r4, [r7]
   31670:	cmp	fp, #0
   31674:	beq	316d0 <__assert_fail@plt+0x1fb2c>
   31678:	cmp	r4, #0
   3167c:	str	r4, [fp]
   31680:	beq	316d0 <__assert_fail@plt+0x1fb2c>
   31684:	cmp	sl, #0
   31688:	cmpne	r7, #0
   3168c:	beq	316d0 <__assert_fail@plt+0x1fb2c>
   31690:	ldr	r3, [r8, #20]
   31694:	str	r3, [sl, #20]
   31698:	str	r3, [r7, #20]
   3169c:	ldrb	r3, [r8, #26]
   316a0:	ldrb	r2, [sl, #26]
   316a4:	and	r3, r3, #8
   316a8:	bic	r2, r2, #8
   316ac:	orr	r2, r3, r2
   316b0:	strb	r2, [sl, #26]
   316b4:	ldrb	r2, [r7, #26]
   316b8:	bic	r2, r2, #8
   316bc:	orr	r3, r3, r2
   316c0:	strb	r3, [r7, #26]
   316c4:	mov	r0, r4
   316c8:	add	sp, sp, #12
   316cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   316d0:	mov	r3, #12
   316d4:	mov	r4, #0
   316d8:	mov	r0, r4
   316dc:	str	r3, [r9]
   316e0:	add	sp, sp, #12
   316e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   316e8:	mov	r0, #996	; 0x3e4
   316ec:	bl	36944 <__assert_fail@plt+0x24da0>
   316f0:	subs	r7, r0, #0
   316f4:	beq	314fc <__assert_fail@plt+0x1f958>
   316f8:	ldr	r1, [r5, #56]	; 0x38
   316fc:	mov	r3, sl
   31700:	str	r1, [r7]
   31704:	mov	r2, #1
   31708:	mov	ip, #4
   3170c:	str	r7, [r5, #56]	; 0x38
   31710:	b	314b0 <__assert_fail@plt+0x1f90c>
   31714:	mov	r0, #996	; 0x3e4
   31718:	bl	36944 <__assert_fail@plt+0x24da0>
   3171c:	subs	sl, r0, #0
   31720:	beq	31570 <__assert_fail@plt+0x1f9cc>
   31724:	ldr	r1, [r5, #56]	; 0x38
   31728:	mov	r3, fp
   3172c:	str	r1, [sl]
   31730:	mov	ip, #4
   31734:	mov	r2, #1
   31738:	str	sl, [r5, #56]	; 0x38
   3173c:	b	31524 <__assert_fail@plt+0x1f980>
   31740:	mov	r0, #996	; 0x3e4
   31744:	bl	36944 <__assert_fail@plt+0x24da0>
   31748:	subs	ip, r0, #0
   3174c:	beq	316d0 <__assert_fail@plt+0x1fb2c>
   31750:	ldr	r1, [r5, #56]	; 0x38
   31754:	mov	r3, r4
   31758:	str	r1, [ip]
   3175c:	mov	r4, #4
   31760:	mov	r2, #1
   31764:	str	ip, [r5, #56]	; 0x38
   31768:	b	3161c <__assert_fail@plt+0x1fa78>
   3176c:	mov	r0, #996	; 0x3e4
   31770:	bl	36944 <__assert_fail@plt+0x24da0>
   31774:	subs	ip, r0, #0
   31778:	beq	31798 <__assert_fail@plt+0x1fbf4>
   3177c:	ldr	r1, [r5, #56]	; 0x38
   31780:	mov	r3, fp
   31784:	str	r1, [ip]
   31788:	mov	r2, #1
   3178c:	mov	fp, #4
   31790:	str	ip, [r5, #56]	; 0x38
   31794:	b	315a4 <__assert_fail@plt+0x1fa00>
   31798:	mov	fp, ip
   3179c:	b	315f4 <__assert_fail@plt+0x1fa50>
   317a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   317a4:	mov	r8, r0
   317a8:	ldrb	r0, [r0, #28]
   317ac:	ldr	ip, [r8, #4]
   317b0:	sub	sp, sp, #148	; 0x94
   317b4:	mov	r7, r3
   317b8:	and	r0, r0, #144	; 0x90
   317bc:	mov	r3, #0
   317c0:	cmp	ip, #159	; 0x9f
   317c4:	str	r7, [r8, #12]
   317c8:	str	r1, [sp, #12]
   317cc:	mov	r5, r2
   317d0:	strb	r0, [r8, #28]
   317d4:	str	r3, [r8, #8]
   317d8:	str	r3, [sp, #36]	; 0x24
   317dc:	str	r3, [r8, #24]
   317e0:	ldr	r4, [r8]
   317e4:	bls	32284 <__assert_fail@plt+0x206e0>
   317e8:	mov	r2, #160	; 0xa0
   317ec:	str	r2, [r8, #8]
   317f0:	mov	r1, #0
   317f4:	mov	r0, r4
   317f8:	bl	119e8 <memset@plt>
   317fc:	ldr	r2, [pc, #4084]	; 327f8 <__assert_fail@plt+0x20c54>
   31800:	mov	r3, #31
   31804:	cmp	r5, r2
   31808:	str	r3, [r4, #64]	; 0x40
   3180c:	bhi	31ba8 <__assert_fail@plt+0x20004>
   31810:	add	r3, r5, #1
   31814:	str	r3, [r4, #4]
   31818:	lsl	r0, r3, #3
   3181c:	str	r3, [sp, #16]
   31820:	bl	36944 <__assert_fail@plt+0x24da0>
   31824:	cmp	r5, #0
   31828:	str	r0, [r4]
   3182c:	beq	32300 <__assert_fail@plt+0x2075c>
   31830:	mov	r1, #1
   31834:	lsl	r1, r1, #1
   31838:	cmp	r5, r1
   3183c:	bcs	31834 <__assert_fail@plt+0x1fc90>
   31840:	sub	sl, r1, #1
   31844:	mov	r0, #12
   31848:	bl	368fc <__assert_fail@plt+0x24d58>
   3184c:	str	sl, [r4, #68]	; 0x44
   31850:	str	r0, [r4, #32]
   31854:	bl	11880 <__ctype_get_mb_cur_max@plt>
   31858:	str	r0, [r4, #92]	; 0x5c
   3185c:	mov	r0, #14
   31860:	bl	11a84 <nl_langinfo@plt>
   31864:	ldrb	r3, [r0]
   31868:	and	r3, r3, #223	; 0xdf
   3186c:	cmp	r3, #85	; 0x55
   31870:	bne	31894 <__assert_fail@plt+0x1fcf0>
   31874:	ldrb	r3, [r0, #1]
   31878:	and	r3, r3, #223	; 0xdf
   3187c:	cmp	r3, #84	; 0x54
   31880:	bne	31894 <__assert_fail@plt+0x1fcf0>
   31884:	ldrb	r3, [r0, #2]
   31888:	and	r3, r3, #223	; 0xdf
   3188c:	cmp	r3, #70	; 0x46
   31890:	beq	32014 <__assert_fail@plt+0x20470>
   31894:	ldrb	r3, [r4, #88]	; 0x58
   31898:	ldr	r2, [r4, #92]	; 0x5c
   3189c:	bic	r3, r3, #8
   318a0:	cmp	r2, #1
   318a4:	strb	r3, [r4, #88]	; 0x58
   318a8:	ble	318c0 <__assert_fail@plt+0x1fd1c>
   318ac:	uxtb	r3, r3
   318b0:	ands	r6, r3, #4
   318b4:	beq	31f9c <__assert_fail@plt+0x203f8>
   318b8:	ldr	r3, [pc, #3900]	; 327fc <__assert_fail@plt+0x20c58>
   318bc:	str	r3, [r4, #60]	; 0x3c
   318c0:	ldr	r3, [r4]
   318c4:	cmp	r3, #0
   318c8:	beq	31ba8 <__assert_fail@plt+0x20004>
   318cc:	ldr	r3, [r4, #32]
   318d0:	cmp	r3, #0
   318d4:	beq	31ba8 <__assert_fail@plt+0x20004>
   318d8:	ldr	r2, [pc, #3872]	; 32800 <__assert_fail@plt+0x20c5c>
   318dc:	mov	r3, #0
   318e0:	ldr	r1, [pc, #3868]	; 32804 <__assert_fail@plt+0x20c60>
   318e4:	cmp	r2, r3
   318e8:	str	r3, [sp, #36]	; 0x24
   318ec:	mov	r3, #1
   318f0:	moveq	r3, r2
   318f4:	cmp	r1, #0
   318f8:	mov	r2, #1
   318fc:	moveq	r2, r1
   31900:	orr	r3, r3, r2
   31904:	ands	r3, r3, #255	; 0xff
   31908:	str	r3, [sp, #24]
   3190c:	beq	31930 <__assert_fail@plt+0x1fd8c>
   31910:	mov	r1, #0
   31914:	add	r0, r4, #136	; 0x88
   31918:	bl	11790 <pthread_mutex_init@plt>
   3191c:	cmp	r0, #0
   31920:	bne	31ba8 <__assert_fail@plt+0x20004>
   31924:	ldr	r3, [sp, #36]	; 0x24
   31928:	cmp	r3, #0
   3192c:	bne	31ab4 <__assert_fail@plt+0x1ff10>
   31930:	ands	r3, r7, #4194304	; 0x400000
   31934:	mov	r1, #0
   31938:	mov	r2, #84	; 0x54
   3193c:	add	r0, sp, #60	; 0x3c
   31940:	moveq	fp, r1
   31944:	movne	fp, #1
   31948:	ldr	sl, [r8, #20]
   3194c:	str	r3, [sp, #20]
   31950:	bl	119e8 <memset@plt>
   31954:	ldrb	r2, [r4, #88]	; 0x58
   31958:	ldr	ip, [sp, #12]
   3195c:	ldr	r1, [r4, #92]	; 0x5c
   31960:	cmp	sl, #0
   31964:	moveq	r3, fp
   31968:	orrne	r3, fp, #1
   3196c:	lsr	r0, r2, #2
   31970:	lsr	r2, r2, #3
   31974:	and	r0, r0, #1
   31978:	and	r2, r2, #1
   3197c:	cmp	r5, #0
   31980:	str	ip, [sp, #60]	; 0x3c
   31984:	strb	fp, [sp, #132]	; 0x84
   31988:	strb	r3, [sp, #135]	; 0x87
   3198c:	str	sl, [sp, #124]	; 0x7c
   31990:	str	r5, [sp, #108]	; 0x6c
   31994:	str	r5, [sp, #104]	; 0x68
   31998:	str	r5, [sp, #116]	; 0x74
   3199c:	str	r5, [sp, #112]	; 0x70
   319a0:	mov	ip, r3
   319a4:	strb	r0, [sp, #133]	; 0x85
   319a8:	strb	r2, [sp, #134]	; 0x86
   319ac:	str	r1, [sp, #140]	; 0x8c
   319b0:	beq	31ad4 <__assert_fail@plt+0x1ff30>
   319b4:	ldr	r2, [sp, #16]
   319b8:	cmp	r1, #1
   319bc:	mov	sl, r2
   319c0:	ble	31a18 <__assert_fail@plt+0x1fe74>
   319c4:	lsl	fp, r2, #2
   319c8:	mov	r1, fp
   319cc:	mov	r0, #0
   319d0:	str	r3, [sp, #28]
   319d4:	bl	36970 <__assert_fail@plt+0x24dcc>
   319d8:	subs	r2, r0, #0
   319dc:	beq	31a34 <__assert_fail@plt+0x1fe90>
   319e0:	ldr	r0, [sp, #72]	; 0x48
   319e4:	str	r2, [sp, #68]	; 0x44
   319e8:	cmp	r0, #0
   319ec:	ldr	r3, [sp, #28]
   319f0:	ldrbeq	ip, [sp, #135]	; 0x87
   319f4:	beq	31a18 <__assert_fail@plt+0x1fe74>
   319f8:	mov	r1, fp
   319fc:	str	r3, [sp, #28]
   31a00:	bl	36970 <__assert_fail@plt+0x24dcc>
   31a04:	cmp	r0, #0
   31a08:	beq	31a34 <__assert_fail@plt+0x1fe90>
   31a0c:	ldrb	ip, [sp, #135]	; 0x87
   31a10:	ldr	r3, [sp, #28]
   31a14:	str	r0, [sp, #72]	; 0x48
   31a18:	cmp	ip, #0
   31a1c:	bne	3225c <__assert_fail@plt+0x206b8>
   31a20:	ldr	r2, [sp, #16]
   31a24:	ldr	r1, [r4, #92]	; 0x5c
   31a28:	str	r2, [sp, #96]	; 0x60
   31a2c:	b	31ad8 <__assert_fail@plt+0x1ff34>
   31a30:	ldr	r4, [sp, #16]
   31a34:	mov	r0, #12
   31a38:	str	r0, [sp, #36]	; 0x24
   31a3c:	ldr	r6, [r8]
   31a40:	ldr	r0, [r6, #56]	; 0x38
   31a44:	cmp	r0, #0
   31a48:	beq	31a5c <__assert_fail@plt+0x1feb8>
   31a4c:	ldr	r5, [r0]
   31a50:	bl	184ec <__assert_fail@plt+0x6948>
   31a54:	subs	r0, r5, #0
   31a58:	bne	31a4c <__assert_fail@plt+0x1fea8>
   31a5c:	mov	r3, #31
   31a60:	mov	r5, #0
   31a64:	str	r3, [r6, #64]	; 0x40
   31a68:	ldr	r0, [r6, #16]
   31a6c:	str	r5, [r6, #56]	; 0x38
   31a70:	str	r5, [r6, #52]	; 0x34
   31a74:	bl	184ec <__assert_fail@plt+0x6948>
   31a78:	ldr	r0, [sp, #68]	; 0x44
   31a7c:	str	r5, [r6, #16]
   31a80:	bl	184ec <__assert_fail@plt+0x6948>
   31a84:	ldr	r0, [sp, #72]	; 0x48
   31a88:	bl	184ec <__assert_fail@plt+0x6948>
   31a8c:	ldrb	r3, [sp, #135]	; 0x87
   31a90:	cmp	r3, r5
   31a94:	beq	31aa0 <__assert_fail@plt+0x1fefc>
   31a98:	ldr	r0, [sp, #64]	; 0x40
   31a9c:	bl	184ec <__assert_fail@plt+0x6948>
   31aa0:	ldr	r3, [sp, #24]
   31aa4:	cmp	r3, #0
   31aa8:	beq	31ab4 <__assert_fail@plt+0x1ff10>
   31aac:	add	r0, r4, #136	; 0x88
   31ab0:	bl	11718 <pthread_mutex_destroy@plt>
   31ab4:	mov	r0, r4
   31ab8:	bl	267b0 <__assert_fail@plt+0x14c0c>
   31abc:	ldr	r0, [sp, #36]	; 0x24
   31ac0:	mov	r3, #0
   31ac4:	str	r3, [r8]
   31ac8:	str	r3, [r8, #4]
   31acc:	add	sp, sp, #148	; 0x94
   31ad0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31ad4:	mov	sl, r5
   31ad8:	cmp	ip, #0
   31adc:	ldrne	r6, [sp, #64]	; 0x40
   31ae0:	ldreq	r6, [sp, #12]
   31ae4:	ands	r2, r7, #4194304	; 0x400000
   31ae8:	cmp	r2, #0
   31aec:	str	r6, [sp, #64]	; 0x40
   31af0:	beq	31f14 <__assert_fail@plt+0x20370>
   31af4:	cmp	r1, #1
   31af8:	ble	32a60 <__assert_fail@plt+0x20ebc>
   31afc:	add	r0, sp, #60	; 0x3c
   31b00:	bl	230f8 <__assert_fail@plt+0x11554>
   31b04:	cmp	r0, #0
   31b08:	bne	31a38 <__assert_fail@plt+0x1fe94>
   31b0c:	ldr	r3, [sp, #92]	; 0x5c
   31b10:	cmp	r5, r3
   31b14:	ble	31bbc <__assert_fail@plt+0x20018>
   31b18:	ldr	r2, [sp, #88]	; 0x58
   31b1c:	ldr	r1, [r4, #92]	; 0x5c
   31b20:	ldr	r3, [sp, #96]	; 0x60
   31b24:	add	r2, r2, r1
   31b28:	cmp	r3, r2
   31b2c:	bgt	31bbc <__assert_fail@plt+0x20018>
   31b30:	ldr	r2, [sp, #140]	; 0x8c
   31b34:	lsl	r9, r3, #1
   31b38:	cmp	r2, #1
   31b3c:	ble	31b84 <__assert_fail@plt+0x1ffe0>
   31b40:	cmn	r9, #-1073741823	; 0xc0000001
   31b44:	bhi	31a34 <__assert_fail@plt+0x1fe90>
   31b48:	lsl	r6, r3, #3
   31b4c:	mov	r1, r6
   31b50:	ldr	r0, [sp, #68]	; 0x44
   31b54:	bl	36970 <__assert_fail@plt+0x24dcc>
   31b58:	subs	r3, r0, #0
   31b5c:	beq	31a34 <__assert_fail@plt+0x1fe90>
   31b60:	ldr	r0, [sp, #72]	; 0x48
   31b64:	str	r3, [sp, #68]	; 0x44
   31b68:	cmp	r0, #0
   31b6c:	beq	31b84 <__assert_fail@plt+0x1ffe0>
   31b70:	mov	r1, r6
   31b74:	bl	36970 <__assert_fail@plt+0x24dcc>
   31b78:	cmp	r0, #0
   31b7c:	beq	31a34 <__assert_fail@plt+0x1fe90>
   31b80:	str	r0, [sp, #72]	; 0x48
   31b84:	ldrb	r3, [sp, #135]	; 0x87
   31b88:	cmp	r3, #0
   31b8c:	bne	31f80 <__assert_fail@plt+0x203dc>
   31b90:	add	r0, sp, #60	; 0x3c
   31b94:	str	r9, [sp, #96]	; 0x60
   31b98:	bl	230f8 <__assert_fail@plt+0x11554>
   31b9c:	cmp	r0, #0
   31ba0:	beq	31b0c <__assert_fail@plt+0x1ff68>
   31ba4:	b	31a38 <__assert_fail@plt+0x1fe94>
   31ba8:	mov	r3, #12
   31bac:	str	r3, [sp, #36]	; 0x24
   31bb0:	b	31ab4 <__assert_fail@plt+0x1ff10>
   31bb4:	add	r0, sp, #60	; 0x3c
   31bb8:	bl	22f58 <__assert_fail@plt+0x113b4>
   31bbc:	ldr	r5, [r8]
   31bc0:	mov	r6, #0
   31bc4:	str	r6, [r8, #24]
   31bc8:	orr	r2, r7, #8388608	; 0x800000
   31bcc:	add	r1, sp, #60	; 0x3c
   31bd0:	add	r0, sp, #40	; 0x28
   31bd4:	str	r7, [r5, #128]	; 0x80
   31bd8:	str	r6, [sp, #36]	; 0x24
   31bdc:	bl	25ce0 <__assert_fail@plt+0x1413c>
   31be0:	ldr	ip, [sp, #100]	; 0x64
   31be4:	add	r1, sp, #36	; 0x24
   31be8:	str	r6, [sp]
   31bec:	add	r2, sp, #40	; 0x28
   31bf0:	str	r1, [sp, #4]
   31bf4:	mov	r3, r7
   31bf8:	mov	r1, r8
   31bfc:	add	ip, ip, r0
   31c00:	add	r0, sp, #60	; 0x3c
   31c04:	str	ip, [sp, #100]	; 0x64
   31c08:	bl	2c68c <__assert_fail@plt+0x1aae8>
   31c0c:	ldr	r6, [sp, #36]	; 0x24
   31c10:	adds	r6, r6, #0
   31c14:	movne	r6, #1
   31c18:	cmp	r0, #0
   31c1c:	movne	r6, #0
   31c20:	cmp	r6, #0
   31c24:	mov	r2, r0
   31c28:	bne	322c0 <__assert_fail@plt+0x2071c>
   31c2c:	add	fp, sp, #48	; 0x30
   31c30:	str	r6, [sp, #48]	; 0x30
   31c34:	str	r6, [fp, #4]
   31c38:	ldr	r3, [r5, #64]	; 0x40
   31c3c:	cmp	r3, #31
   31c40:	beq	322cc <__assert_fail@plt+0x20728>
   31c44:	lsl	ip, r3, #5
   31c48:	ldr	lr, [r5, #56]	; 0x38
   31c4c:	add	r1, r3, #1
   31c50:	add	r3, ip, #4
   31c54:	add	ip, lr, ip
   31c58:	mov	r6, #0
   31c5c:	mov	r0, #2
   31c60:	str	r1, [r5, #64]	; 0x40
   31c64:	str	r6, [ip, #4]
   31c68:	str	r6, [ip, #8]
   31c6c:	str	r6, [ip, #12]
   31c70:	strb	r0, [sp, #52]	; 0x34
   31c74:	ldm	fp, {r0, r1}
   31c78:	add	r7, ip, #24
   31c7c:	cmp	r2, r6
   31c80:	stm	r7, {r0, r1}
   31c84:	ldrb	r1, [ip, #30]
   31c88:	mvn	r0, #0
   31c8c:	add	r3, lr, r3
   31c90:	and	r1, r1, #243	; 0xf3
   31c94:	str	r6, [ip, #16]
   31c98:	str	r6, [ip, #20]
   31c9c:	clz	r6, r3
   31ca0:	lsr	r6, r6, #5
   31ca4:	strb	r1, [ip, #30]
   31ca8:	str	r0, [ip, #32]
   31cac:	moveq	r2, r6
   31cb0:	beq	31ce4 <__assert_fail@plt+0x20140>
   31cb4:	mov	r1, #0
   31cb8:	str	fp, [sp]
   31cbc:	mov	ip, #16
   31cc0:	str	r1, [fp, #4]
   31cc4:	str	r1, [sp, #48]	; 0x30
   31cc8:	add	r0, r5, #56	; 0x38
   31ccc:	add	r1, r5, #64	; 0x40
   31cd0:	strb	ip, [sp, #52]	; 0x34
   31cd4:	bl	23b24 <__assert_fail@plt+0x11f80>
   31cd8:	clz	r2, r0
   31cdc:	mov	r3, r0
   31ce0:	lsr	r2, r2, #5
   31ce4:	orrs	r2, r6, r2
   31ce8:	str	r2, [sp, #12]
   31cec:	bne	322b8 <__assert_fail@plt+0x20714>
   31cf0:	ldr	r6, [r8]
   31cf4:	str	r3, [r4, #52]	; 0x34
   31cf8:	ldr	r0, [r6, #4]
   31cfc:	lsl	r0, r0, #2
   31d00:	bl	36944 <__assert_fail@plt+0x24da0>
   31d04:	ldr	r3, [r6, #4]
   31d08:	str	r0, [r6, #12]
   31d0c:	lsl	r0, r3, #2
   31d10:	bl	36944 <__assert_fail@plt+0x24da0>
   31d14:	ldr	r3, [r6, #4]
   31d18:	add	r3, r3, r3, lsl #1
   31d1c:	str	r0, [r6, #16]
   31d20:	lsl	r0, r3, #2
   31d24:	bl	36944 <__assert_fail@plt+0x24da0>
   31d28:	ldr	r3, [r6, #4]
   31d2c:	add	r3, r3, r3, lsl #1
   31d30:	str	r0, [r6, #20]
   31d34:	lsl	r0, r3, #2
   31d38:	bl	36944 <__assert_fail@plt+0x24da0>
   31d3c:	ldr	r3, [r6, #12]
   31d40:	cmp	r3, #0
   31d44:	str	r0, [r6, #24]
   31d48:	beq	31a34 <__assert_fail@plt+0x1fe90>
   31d4c:	ldr	r3, [r6, #16]
   31d50:	cmp	r3, #0
   31d54:	beq	31a34 <__assert_fail@plt+0x1fe90>
   31d58:	ldr	r3, [r6, #20]
   31d5c:	cmp	r3, #0
   31d60:	beq	32194 <__assert_fail@plt+0x205f0>
   31d64:	cmp	r0, #0
   31d68:	beq	31a34 <__assert_fail@plt+0x1fe90>
   31d6c:	ldr	r0, [r8, #24]
   31d70:	lsl	r0, r0, #2
   31d74:	bl	36944 <__assert_fail@plt+0x24da0>
   31d78:	cmp	r0, #0
   31d7c:	str	r0, [r6, #132]	; 0x84
   31d80:	ldreq	r5, [r6, #52]	; 0x34
   31d84:	beq	31e70 <__assert_fail@plt+0x202cc>
   31d88:	ldr	r2, [r8, #24]
   31d8c:	cmp	r2, #0
   31d90:	subne	r1, r0, #4
   31d94:	ldrne	r3, [sp, #12]
   31d98:	beq	31dac <__assert_fail@plt+0x20208>
   31d9c:	str	r3, [r1, #4]!
   31da0:	add	r3, r3, #1
   31da4:	cmp	r3, r2
   31da8:	bne	31d9c <__assert_fail@plt+0x201f8>
   31dac:	ldr	r5, [r6, #52]	; 0x34
   31db0:	mov	r9, #0
   31db4:	mov	r3, r5
   31db8:	ldrb	ip, [r5, #24]
   31dbc:	mov	lr, #1
   31dc0:	cmp	ip, #4
   31dc4:	beq	31dec <__assert_fail@plt+0x20248>
   31dc8:	cmp	ip, #17
   31dcc:	beq	32044 <__assert_fail@plt+0x204a0>
   31dd0:	ldr	r1, [r3, #4]
   31dd4:	cmp	r1, #0
   31dd8:	beq	31e10 <__assert_fail@plt+0x2026c>
   31ddc:	ldrb	ip, [r1, #24]
   31de0:	mov	r3, r1
   31de4:	cmp	ip, #4
   31de8:	bne	31dc8 <__assert_fail@plt+0x20224>
   31dec:	ldr	ip, [r3, #20]
   31df0:	ldr	r1, [r3, #4]
   31df4:	ldr	r7, [r0, ip, lsl #2]
   31df8:	cmp	r1, #0
   31dfc:	str	r7, [r3, #20]
   31e00:	ldr	ip, [r6, #80]	; 0x50
   31e04:	orr	ip, ip, lr, lsl r7
   31e08:	str	ip, [r6, #80]	; 0x50
   31e0c:	bne	31ddc <__assert_fail@plt+0x20238>
   31e10:	mov	ip, r9
   31e14:	b	31e1c <__assert_fail@plt+0x20278>
   31e18:	mov	r3, r1
   31e1c:	ldr	r1, [r3, #8]
   31e20:	cmp	r1, #0
   31e24:	cmpne	r1, ip
   31e28:	bne	31ddc <__assert_fail@plt+0x20238>
   31e2c:	ldr	r1, [r3]
   31e30:	mov	ip, r3
   31e34:	cmp	r1, #0
   31e38:	bne	31e18 <__assert_fail@plt+0x20274>
   31e3c:	cmp	r2, #0
   31e40:	beq	32a38 <__assert_fail@plt+0x20e94>
   31e44:	ldr	r3, [r0]
   31e48:	cmp	r3, #0
   31e4c:	beq	31e60 <__assert_fail@plt+0x202bc>
   31e50:	b	31e70 <__assert_fail@plt+0x202cc>
   31e54:	ldr	r1, [r0, r3, lsl #2]
   31e58:	cmp	r1, r3
   31e5c:	bne	31e70 <__assert_fail@plt+0x202cc>
   31e60:	add	r3, r3, #1
   31e64:	cmp	r3, r2
   31e68:	bcc	31e54 <__assert_fail@plt+0x202b0>
   31e6c:	beq	32a38 <__assert_fail@plt+0x20e94>
   31e70:	mov	r7, #0
   31e74:	b	31e7c <__assert_fail@plt+0x202d8>
   31e78:	mov	r5, r3
   31e7c:	ldr	r3, [r5, #4]
   31e80:	cmp	r3, #0
   31e84:	bne	31e78 <__assert_fail@plt+0x202d4>
   31e88:	ldr	r3, [r5, #8]
   31e8c:	cmp	r3, #0
   31e90:	bne	31e78 <__assert_fail@plt+0x202d4>
   31e94:	mov	r2, r7
   31e98:	b	31ecc <__assert_fail@plt+0x20328>
   31e9c:	ldr	r0, [sp, #48]	; 0x30
   31ea0:	cmp	r0, #0
   31ea4:	bne	31a38 <__assert_fail@plt+0x1fe94>
   31ea8:	ldr	r1, [r5]
   31eac:	cmp	r1, #0
   31eb0:	beq	320c0 <__assert_fail@plt+0x2051c>
   31eb4:	ldr	r2, [r1, #8]
   31eb8:	cmp	r5, r2
   31ebc:	cmpne	r2, #0
   31ec0:	bne	32a4c <__assert_fail@plt+0x20ea8>
   31ec4:	ldr	r3, [r1, #4]
   31ec8:	mov	r5, r1
   31ecc:	cmp	r3, #0
   31ed0:	str	r7, [sp, #48]	; 0x30
   31ed4:	beq	31ee4 <__assert_fail@plt+0x20340>
   31ed8:	ldrb	r1, [r3, #24]
   31edc:	cmp	r1, #17
   31ee0:	beq	32094 <__assert_fail@plt+0x204f0>
   31ee4:	cmp	r2, #0
   31ee8:	beq	31ea8 <__assert_fail@plt+0x20304>
   31eec:	ldrb	r3, [r2, #24]
   31ef0:	cmp	r3, #17
   31ef4:	bne	31e9c <__assert_fail@plt+0x202f8>
   31ef8:	mov	r1, r8
   31efc:	mov	r0, fp
   31f00:	bl	3143c <__assert_fail@plt+0x1f898>
   31f04:	cmp	r0, #0
   31f08:	str	r0, [r5, #8]
   31f0c:	strne	r5, [r0]
   31f10:	b	31e9c <__assert_fail@plt+0x202f8>
   31f14:	cmp	r1, #1
   31f18:	bgt	31bb4 <__assert_fail@plt+0x20010>
   31f1c:	cmp	r3, #0
   31f20:	beq	32a54 <__assert_fail@plt+0x20eb0>
   31f24:	ldr	r2, [sp, #108]	; 0x6c
   31f28:	ldr	r3, [sp, #88]	; 0x58
   31f2c:	cmp	sl, r2
   31f30:	movge	sl, r2
   31f34:	cmp	sl, r3
   31f38:	bgt	31f4c <__assert_fail@plt+0x203a8>
   31f3c:	str	r3, [sp, #88]	; 0x58
   31f40:	str	r3, [sp, #92]	; 0x5c
   31f44:	b	31bbc <__assert_fail@plt+0x20018>
   31f48:	ldr	r6, [sp, #64]	; 0x40
   31f4c:	ldr	r2, [sp, #60]	; 0x3c
   31f50:	ldr	r0, [sp, #84]	; 0x54
   31f54:	add	r2, r2, r3
   31f58:	ldr	r1, [sp, #124]	; 0x7c
   31f5c:	ldrb	r2, [r2, r0]
   31f60:	ldrb	r2, [r1, r2]
   31f64:	strb	r2, [r6, r3]
   31f68:	add	r3, r3, #1
   31f6c:	cmp	sl, r3
   31f70:	bne	31f48 <__assert_fail@plt+0x203a4>
   31f74:	str	r3, [sp, #88]	; 0x58
   31f78:	str	r3, [sp, #92]	; 0x5c
   31f7c:	b	31bbc <__assert_fail@plt+0x20018>
   31f80:	mov	r1, r9
   31f84:	ldr	r0, [sp, #64]	; 0x40
   31f88:	bl	36970 <__assert_fail@plt+0x24dcc>
   31f8c:	cmp	r0, #0
   31f90:	beq	31a34 <__assert_fail@plt+0x1fe90>
   31f94:	str	r0, [sp, #64]	; 0x40
   31f98:	b	31b90 <__assert_fail@plt+0x1ffec>
   31f9c:	mov	r1, #1
   31fa0:	mov	r0, #32
   31fa4:	bl	368fc <__assert_fail@plt+0x24d58>
   31fa8:	cmp	r0, #0
   31fac:	str	r0, [r4, #60]	; 0x3c
   31fb0:	beq	31ba8 <__assert_fail@plt+0x20004>
   31fb4:	mov	fp, #1
   31fb8:	lsl	r9, r6, #3
   31fbc:	mov	sl, #0
   31fc0:	mov	r0, r9
   31fc4:	bl	119f4 <btowc@plt>
   31fc8:	cmn	r0, #1
   31fcc:	ldrne	r2, [r4, #60]	; 0x3c
   31fd0:	ldrne	r3, [r2, r6]
   31fd4:	orrne	r3, r3, fp, lsl sl
   31fd8:	strne	r3, [r2, r6]
   31fdc:	bics	r3, r9, #127	; 0x7f
   31fe0:	bne	31ff4 <__assert_fail@plt+0x20450>
   31fe4:	cmp	r0, r9
   31fe8:	ldrbne	r3, [r4, #88]	; 0x58
   31fec:	orrne	r3, r3, #8
   31ff0:	strbne	r3, [r4, #88]	; 0x58
   31ff4:	add	sl, sl, #1
   31ff8:	cmp	sl, #32
   31ffc:	add	r9, r9, #1
   32000:	bne	31fc0 <__assert_fail@plt+0x2041c>
   32004:	add	r6, r6, #4
   32008:	cmp	r6, #32
   3200c:	bne	31fb8 <__assert_fail@plt+0x20414>
   32010:	b	318c0 <__assert_fail@plt+0x1fd1c>
   32014:	ldrb	r3, [r0, #3]
   32018:	ldr	r1, [pc, #2024]	; 32808 <__assert_fail@plt+0x20c64>
   3201c:	cmp	r3, #45	; 0x2d
   32020:	moveq	r3, #4
   32024:	movne	r3, #3
   32028:	add	r0, r0, r3
   3202c:	bl	1170c <strcmp@plt>
   32030:	cmp	r0, #0
   32034:	ldrbeq	r3, [r4, #88]	; 0x58
   32038:	orreq	r3, r3, #4
   3203c:	strbeq	r3, [r4, #88]	; 0x58
   32040:	b	31894 <__assert_fail@plt+0x1fcf0>
   32044:	ldr	r7, [r3, #4]
   32048:	cmp	r7, #0
   3204c:	beq	31e10 <__assert_fail@plt+0x2026c>
   32050:	ldrb	ip, [r7, #24]
   32054:	cmp	ip, #17
   32058:	movne	r3, r7
   3205c:	bne	31dc0 <__assert_fail@plt+0x2021c>
   32060:	ldr	r1, [r7, #4]
   32064:	ldr	ip, [r7, #20]
   32068:	cmp	r1, #0
   3206c:	str	r1, [r3, #4]
   32070:	strne	r3, [r1]
   32074:	ldr	r7, [r3, #20]
   32078:	cmp	ip, #31
   3207c:	ldr	r7, [r0, r7, lsl #2]
   32080:	str	r7, [r0, ip, lsl #2]
   32084:	ldrle	r7, [r6, #80]	; 0x50
   32088:	bicle	ip, r7, lr, lsl ip
   3208c:	strle	ip, [r6, #80]	; 0x50
   32090:	b	31dd4 <__assert_fail@plt+0x20230>
   32094:	mov	r2, r3
   32098:	mov	r1, r8
   3209c:	mov	r0, fp
   320a0:	bl	3143c <__assert_fail@plt+0x1f898>
   320a4:	ldr	r2, [r5, #8]
   320a8:	cmp	r0, #0
   320ac:	str	r0, [r5, #4]
   320b0:	strne	r5, [r0]
   320b4:	cmp	r2, #0
   320b8:	bne	31eec <__assert_fail@plt+0x20348>
   320bc:	b	31e9c <__assert_fail@plt+0x202f8>
   320c0:	ldr	r9, [r6, #52]	; 0x34
   320c4:	ldr	r7, [pc, #1856]	; 3280c <__assert_fail@plt+0x20c68>
   320c8:	ldr	r5, [pc, #1856]	; 32810 <__assert_fail@plt+0x20c6c>
   320cc:	b	320d4 <__assert_fail@plt+0x20530>
   320d0:	mov	r9, r3
   320d4:	ldr	r3, [r9, #4]
   320d8:	cmp	r3, #0
   320dc:	bne	320d0 <__assert_fail@plt+0x2052c>
   320e0:	ldr	r3, [r9, #8]
   320e4:	cmp	r3, #0
   320e8:	bne	320d0 <__assert_fail@plt+0x2052c>
   320ec:	b	32168 <__assert_fail@plt+0x205c4>
   320f0:	add	r3, r9, #20
   320f4:	str	r9, [r9, #12]
   320f8:	ldm	r3, {r1, r2}
   320fc:	mov	r0, r6
   32100:	bl	23674 <__assert_fail@plt+0x11ad0>
   32104:	cmn	r0, #1
   32108:	str	r0, [r9, #28]
   3210c:	beq	31a34 <__assert_fail@plt+0x1fe90>
   32110:	ldrb	r3, [r9, #24]
   32114:	cmp	r3, #12
   32118:	bne	3213c <__assert_fail@plt+0x20598>
   3211c:	ldr	r3, [r6]
   32120:	ldr	r2, [r9, #20]
   32124:	add	r0, r3, r0, lsl #3
   32128:	and	r2, r2, r7
   3212c:	ldr	r3, [r0, #4]
   32130:	bic	r3, r3, r5
   32134:	orr	r3, r3, r2, lsl #8
   32138:	str	r3, [r0, #4]
   3213c:	ldr	r2, [r9]
   32140:	cmp	r2, #0
   32144:	beq	321a0 <__assert_fail@plt+0x205fc>
   32148:	ldr	r3, [r2, #8]
   3214c:	cmp	r3, #0
   32150:	cmpne	r9, r3
   32154:	moveq	r9, #1
   32158:	movne	r9, #0
   3215c:	cmp	r9, #0
   32160:	mov	r9, r2
   32164:	beq	320d0 <__assert_fail@plt+0x2052c>
   32168:	ldrb	r3, [r9, #24]
   3216c:	cmp	r3, #16
   32170:	bne	320f0 <__assert_fail@plt+0x2054c>
   32174:	ldr	r3, [r9, #4]
   32178:	ldr	r2, [r3, #12]
   3217c:	ldr	r3, [r3, #28]
   32180:	str	r2, [r9, #12]
   32184:	str	r3, [r9, #28]
   32188:	b	3213c <__assert_fail@plt+0x20598>
   3218c:	ldr	r4, [sp, #12]
   32190:	ldr	r8, [sp, #16]
   32194:	mov	r3, #12
   32198:	str	r3, [sp, #36]	; 0x24
   3219c:	b	31a3c <__assert_fail@plt+0x1fe98>
   321a0:	ldr	r7, [r6, #52]	; 0x34
   321a4:	mov	r3, r7
   321a8:	ldrb	r1, [r3, #24]
   321ac:	cmp	r1, #11
   321b0:	beq	321e0 <__assert_fail@plt+0x2063c>
   321b4:	cmp	r1, #16
   321b8:	bne	321f0 <__assert_fail@plt+0x2064c>
   321bc:	ldmib	r3, {r0, r1}
   321c0:	ldr	ip, [r1, #12]
   321c4:	str	ip, [r0, #16]
   321c8:	ldr	ip, [r3, #16]
   321cc:	mov	r3, r0
   321d0:	str	ip, [r1, #16]
   321d4:	ldrb	r1, [r3, #24]
   321d8:	cmp	r1, #11
   321dc:	bne	321b4 <__assert_fail@plt+0x20610>
   321e0:	ldr	r1, [r3, #4]
   321e4:	str	r3, [r1, #16]
   321e8:	mov	r3, r1
   321ec:	b	321a8 <__assert_fail@plt+0x20604>
   321f0:	ldmib	r3, {r0, ip}
   321f4:	cmp	r0, #0
   321f8:	beq	32a18 <__assert_fail@plt+0x20e74>
   321fc:	ldr	r1, [r3, #16]
   32200:	cmp	ip, #0
   32204:	str	r1, [r0, #16]
   32208:	beq	3221c <__assert_fail@plt+0x20678>
   3220c:	ldr	r1, [r3, #16]
   32210:	cmp	r0, #0
   32214:	str	r1, [ip, #16]
   32218:	beq	32224 <__assert_fail@plt+0x20680>
   3221c:	mov	r3, r0
   32220:	b	321a8 <__assert_fail@plt+0x20604>
   32224:	mov	r1, ip
   32228:	mov	r0, r2
   3222c:	b	32248 <__assert_fail@plt+0x206a4>
   32230:	ldr	r9, [r3]
   32234:	cmp	r9, #0
   32238:	beq	3230c <__assert_fail@plt+0x20768>
   3223c:	ldr	r1, [r9, #8]
   32240:	mov	r0, r3
   32244:	mov	r3, r9
   32248:	cmp	r0, r1
   3224c:	cmpne	r1, #0
   32250:	beq	32230 <__assert_fail@plt+0x2068c>
   32254:	mov	r3, r1
   32258:	b	321a8 <__assert_fail@plt+0x20604>
   3225c:	ldr	r1, [sp, #16]
   32260:	ldr	r0, [sp, #64]	; 0x40
   32264:	str	r3, [sp, #28]
   32268:	bl	36970 <__assert_fail@plt+0x24dcc>
   3226c:	cmp	r0, #0
   32270:	beq	31a34 <__assert_fail@plt+0x1fe90>
   32274:	ldrb	ip, [sp, #135]	; 0x87
   32278:	str	r0, [sp, #64]	; 0x40
   3227c:	ldr	r3, [sp, #28]
   32280:	b	31a20 <__assert_fail@plt+0x1fe7c>
   32284:	mov	r0, r4
   32288:	mov	r1, #160	; 0xa0
   3228c:	bl	36970 <__assert_fail@plt+0x24dcc>
   32290:	subs	r4, r0, #0
   32294:	beq	32ac4 <__assert_fail@plt+0x20f20>
   32298:	mov	r3, #160	; 0xa0
   3229c:	str	r4, [r8]
   322a0:	str	r3, [r8, #4]
   322a4:	b	317e8 <__assert_fail@plt+0x1fc44>
   322a8:	cmp	r2, #0
   322ac:	movne	r3, lr
   322b0:	movne	r6, #1
   322b4:	bne	31cb4 <__assert_fail@plt+0x20110>
   322b8:	mov	r3, #12
   322bc:	str	r3, [sp, #36]	; 0x24
   322c0:	mov	r3, #0
   322c4:	str	r3, [r4, #52]	; 0x34
   322c8:	b	31a3c <__assert_fail@plt+0x1fe98>
   322cc:	mov	r0, #996	; 0x3e4
   322d0:	str	r2, [sp, #12]
   322d4:	bl	36944 <__assert_fail@plt+0x24da0>
   322d8:	ldr	r2, [sp, #12]
   322dc:	subs	lr, r0, #0
   322e0:	beq	322a8 <__assert_fail@plt+0x20704>
   322e4:	ldr	r0, [r5, #56]	; 0x38
   322e8:	mov	ip, r6
   322ec:	str	r0, [lr]
   322f0:	mov	r1, #1
   322f4:	mov	r3, #4
   322f8:	str	lr, [r5, #56]	; 0x38
   322fc:	b	31c54 <__assert_fail@plt+0x200b0>
   32300:	mov	sl, r5
   32304:	mov	r1, #1
   32308:	b	31844 <__assert_fail@plt+0x1fca0>
   3230c:	str	r4, [sp, #16]
   32310:	ldrb	r3, [r7, #24]
   32314:	ldr	r2, [r7, #28]
   32318:	sub	r3, r3, #2
   3231c:	cmp	r3, #14
   32320:	ldrls	pc, [pc, r3, lsl #2]
   32324:	b	324e0 <__assert_fail@plt+0x2093c>
   32328:	andeq	r2, r3, r8, ror #7
   3232c:	andeq	r2, r3, r0, ror #9
   32330:			; <UNDEFINED> instruction: 0x000324b0
   32334:	andeq	r2, r3, r0, ror #9
   32338:	andeq	r2, r3, r0, ror #9
   3233c:	andeq	r2, r3, r0, ror #9
   32340:	andeq	r2, r3, r4, ror r4
   32344:	andeq	r2, r3, r4, ror r4
   32348:	andeq	r2, r3, r4, ror #6
   3234c:	andeq	r2, r3, r4, ror #6
   32350:	andeq	r2, r3, r4, ror r4
   32354:	andeq	r2, r3, r0, ror #9
   32358:	andeq	r2, r3, r0, ror #9
   3235c:	andeq	r2, r3, r0, ror #9
   32360:	andeq	r2, r3, r8, ror #7
   32364:	ldrb	r3, [r6, #88]	; 0x58
   32368:	ldr	r5, [r6, #20]
   3236c:	add	r2, r2, r2, lsl #1
   32370:	orr	r3, r3, #1
   32374:	strb	r3, [r6, #88]	; 0x58
   32378:	ldr	r3, [r7, #4]
   3237c:	mov	r0, #8
   32380:	cmp	r3, #0
   32384:	ldrne	r3, [r3, #12]
   32388:	ldreq	r3, [r7, #16]
   3238c:	ldr	sl, [r3, #28]
   32390:	ldr	r3, [r7, #8]
   32394:	cmp	r3, #0
   32398:	ldrne	r3, [r3, #12]
   3239c:	ldreq	r3, [r7, #16]
   323a0:	ldr	r4, [r3, #28]
   323a4:	mov	r3, #2
   323a8:	str	r3, [r5, r2, lsl #2]
   323ac:	add	r5, r5, r2, lsl r3
   323b0:	bl	36944 <__assert_fail@plt+0x24da0>
   323b4:	cmp	r0, #0
   323b8:	str	r0, [r5, #8]
   323bc:	beq	31a30 <__assert_fail@plt+0x1fe8c>
   323c0:	cmp	sl, r4
   323c4:	moveq	r3, #1
   323c8:	streq	r3, [r5, #4]
   323cc:	streq	sl, [r0]
   323d0:	beq	323e8 <__assert_fail@plt+0x20844>
   323d4:	mov	r3, #2
   323d8:	str	r3, [r5, #4]
   323dc:	strlt	sl, [r0]
   323e0:	strlt	r4, [r0, #4]
   323e4:	stmge	r0, {r4, sl}
   323e8:	ldr	r3, [r7, #4]
   323ec:	cmp	r3, #0
   323f0:	moveq	r2, r9
   323f4:	beq	32404 <__assert_fail@plt+0x20860>
   323f8:	mov	r7, r3
   323fc:	b	32310 <__assert_fail@plt+0x2076c>
   32400:	mov	r7, r5
   32404:	ldr	r3, [r7, #8]
   32408:	cmp	r3, #0
   3240c:	cmpne	r3, r2
   32410:	moveq	sl, #1
   32414:	movne	sl, #0
   32418:	bne	323f8 <__assert_fail@plt+0x20854>
   3241c:	ldr	r5, [r7]
   32420:	mov	r2, r7
   32424:	cmp	r5, #0
   32428:	bne	32400 <__assert_fail@plt+0x2085c>
   3242c:	ldr	r4, [sp, #16]
   32430:	ldr	r2, [r6, #24]
   32434:	ldr	r9, [sp, #12]
   32438:	add	r7, r5, r5, lsl #1
   3243c:	lsl	r7, r7, #2
   32440:	add	r3, r2, r7
   32444:	ldr	r3, [r3, #4]
   32448:	cmp	r3, #0
   3244c:	beq	324f4 <__assert_fail@plt+0x20950>
   32450:	ldr	r0, [r6, #8]
   32454:	add	r5, r5, #1
   32458:	cmp	r0, r5
   3245c:	bne	32438 <__assert_fail@plt+0x20894>
   32460:	cmp	r9, #0
   32464:	beq	32554 <__assert_fail@plt+0x209b0>
   32468:	ldr	r9, [sp, #12]
   3246c:	mov	r5, #0
   32470:	b	32438 <__assert_fail@plt+0x20894>
   32474:	ldr	r1, [r7, #16]
   32478:	add	r2, r2, r2, lsl #1
   3247c:	ldr	r3, [r6, #20]
   32480:	ldr	sl, [r1, #28]
   32484:	add	r5, r3, r2, lsl #2
   32488:	mov	r0, #4
   3248c:	mov	r1, #1
   32490:	str	r1, [r3, r2, lsl #2]
   32494:	str	r1, [r5, #4]
   32498:	bl	36944 <__assert_fail@plt+0x24da0>
   3249c:	cmp	r0, #0
   324a0:	str	r0, [r5, #8]
   324a4:	beq	32acc <__assert_fail@plt+0x20f28>
   324a8:	str	sl, [r0]
   324ac:	b	323e8 <__assert_fail@plt+0x20844>
   324b0:	ldr	r1, [r7, #16]
   324b4:	ldr	r3, [r6, #12]
   324b8:	ldr	sl, [r1, #28]
   324bc:	str	sl, [r3, r2, lsl #2]
   324c0:	ldrb	r3, [r7, #24]
   324c4:	cmp	r3, #4
   324c8:	bne	323e8 <__assert_fail@plt+0x20844>
   324cc:	add	r2, r2, r2, lsl #1
   324d0:	ldr	r3, [r6, #20]
   324d4:	mov	r0, #4
   324d8:	add	r5, r3, r2, lsl #2
   324dc:	b	3248c <__assert_fail@plt+0x208e8>
   324e0:	ldr	r1, [r7, #16]
   324e4:	ldr	r3, [r6, #12]
   324e8:	ldr	r1, [r1, #28]
   324ec:	str	r1, [r3, r2, lsl #2]
   324f0:	b	323e8 <__assert_fail@plt+0x20844>
   324f4:	mov	r3, #1
   324f8:	mov	r2, r5
   324fc:	mov	r1, r6
   32500:	mov	r0, fp
   32504:	bl	26f64 <__assert_fail@plt+0x153c0>
   32508:	cmp	r0, #0
   3250c:	bne	31a38 <__assert_fail@plt+0x1fe94>
   32510:	ldr	r2, [r6, #24]
   32514:	add	r7, r2, r7
   32518:	ldr	r7, [r7, #4]
   3251c:	cmp	r7, #0
   32520:	bne	32450 <__assert_fail@plt+0x208ac>
   32524:	ldr	r0, [sp, #56]	; 0x38
   32528:	bl	184ec <__assert_fail@plt+0x6948>
   3252c:	ldr	r3, [r6, #8]
   32530:	add	r5, r5, #1
   32534:	cmp	r3, r5
   32538:	movne	r9, sl
   3253c:	beq	32548 <__assert_fail@plt+0x209a4>
   32540:	ldr	r2, [r6, #24]
   32544:	b	32438 <__assert_fail@plt+0x20894>
   32548:	mov	r5, r7
   3254c:	ldr	r9, [sp, #12]
   32550:	b	32540 <__assert_fail@plt+0x2099c>
   32554:	ldrb	r3, [r8, #28]
   32558:	tst	r3, #16
   3255c:	bne	3256c <__assert_fail@plt+0x209c8>
   32560:	ldr	r3, [r8, #24]
   32564:	cmp	r3, #0
   32568:	bne	32a28 <__assert_fail@plt+0x20e84>
   3256c:	ldr	r3, [r6, #76]	; 0x4c
   32570:	cmp	r3, #0
   32574:	beq	326a4 <__assert_fail@plt+0x20b00>
   32578:	add	r0, r0, r0, lsl #1
   3257c:	lsl	r0, r0, #2
   32580:	bl	36944 <__assert_fail@plt+0x24da0>
   32584:	cmp	r0, #0
   32588:	str	r0, [r6, #28]
   3258c:	beq	31a34 <__assert_fail@plt+0x1fe90>
   32590:	ldr	r3, [r6, #8]
   32594:	cmp	r3, #0
   32598:	beq	326a4 <__assert_fail@plt+0x20b00>
   3259c:	mov	r3, #0
   325a0:	mov	r2, r0
   325a4:	mov	r1, r3
   325a8:	mov	r0, r3
   325ac:	b	325b4 <__assert_fail@plt+0x20a10>
   325b0:	ldr	r2, [r6, #28]
   325b4:	add	ip, r2, r3
   325b8:	str	r1, [r2, r3]
   325bc:	str	r1, [ip, #4]
   325c0:	str	r1, [ip, #8]
   325c4:	ldr	r2, [r6, #8]
   325c8:	add	r0, r0, #1
   325cc:	cmp	r0, r2
   325d0:	add	r3, r3, #12
   325d4:	bcc	325b0 <__assert_fail@plt+0x20a0c>
   325d8:	cmp	r2, #0
   325dc:	beq	326a4 <__assert_fail@plt+0x20b00>
   325e0:	mov	r3, #0
   325e4:	ldr	lr, [r6, #24]
   325e8:	str	r8, [sp, #16]
   325ec:	mov	sl, r3
   325f0:	mov	r8, r3
   325f4:	str	r4, [sp, #12]
   325f8:	add	r0, lr, r8
   325fc:	ldmib	r0, {r3, r7}
   32600:	cmp	r3, #0
   32604:	ble	3268c <__assert_fail@plt+0x20ae8>
   32608:	sub	r7, r7, #4
   3260c:	mov	r5, #0
   32610:	b	32634 <__assert_fail@plt+0x20a90>
   32614:	ldr	r3, [r4, #8]
   32618:	add	r1, r2, #1
   3261c:	str	r1, [r4, #4]
   32620:	str	sl, [r3, r2, lsl #2]
   32624:	ldr	r3, [r0, #4]
   32628:	add	r5, r5, #1
   3262c:	cmp	r5, r3
   32630:	bge	32688 <__assert_fail@plt+0x20ae4>
   32634:	ldr	r3, [r7, #4]!
   32638:	ldr	ip, [r6, #28]
   3263c:	add	r3, r3, r3, lsl #1
   32640:	add	r4, ip, r3, lsl #2
   32644:	ldr	r1, [ip, r3, lsl #2]
   32648:	ldr	r2, [r4, #4]
   3264c:	cmp	r1, r2
   32650:	bne	32614 <__assert_fail@plt+0x20a70>
   32654:	add	r2, r2, #1
   32658:	ldr	r0, [r4, #8]
   3265c:	lsl	r1, r2, #1
   32660:	str	r1, [ip, r3, lsl #2]
   32664:	lsl	r1, r2, #3
   32668:	bl	36970 <__assert_fail@plt+0x24dcc>
   3266c:	subs	r3, r0, #0
   32670:	beq	3218c <__assert_fail@plt+0x205e8>
   32674:	ldr	lr, [r6, #24]
   32678:	ldr	r2, [r4, #4]
   3267c:	add	r0, lr, r8
   32680:	str	r3, [r4, #8]
   32684:	b	32618 <__assert_fail@plt+0x20a74>
   32688:	ldr	r2, [r6, #8]
   3268c:	add	sl, sl, #1
   32690:	cmp	sl, r2
   32694:	add	r8, r8, #12
   32698:	bcc	325f8 <__assert_fail@plt+0x20a54>
   3269c:	ldr	r4, [sp, #12]
   326a0:	ldr	r8, [sp, #16]
   326a4:	ldrb	r2, [r4, #88]	; 0x58
   326a8:	ldr	r3, [sp, #20]
   326ac:	clz	r3, r3
   326b0:	lsr	r3, r3, #5
   326b4:	mov	r1, #0
   326b8:	ands	r3, r3, r2, lsr #2
   326bc:	str	r1, [sp, #36]	; 0x24
   326c0:	beq	326d0 <__assert_fail@plt+0x20b2c>
   326c4:	ldr	r1, [r8, #20]
   326c8:	cmp	r1, #0
   326cc:	beq	32ae0 <__assert_fail@plt+0x20f3c>
   326d0:	ldr	r3, [r4, #52]	; 0x34
   326d4:	ldr	r5, [r4, #24]
   326d8:	ldr	r3, [r3, #12]
   326dc:	ldr	r3, [r3, #28]
   326e0:	str	r3, [r4, #72]	; 0x48
   326e4:	add	r3, r3, r3, lsl #1
   326e8:	add	r5, r5, r3, lsl #2
   326ec:	ldr	r3, [r5, #4]
   326f0:	str	r3, [sp, #52]	; 0x34
   326f4:	ldr	r2, [r5, #4]
   326f8:	cmp	r2, #0
   326fc:	ble	3296c <__assert_fail@plt+0x20dc8>
   32700:	lsl	r0, r3, #2
   32704:	str	r3, [sp, #48]	; 0x30
   32708:	bl	36944 <__assert_fail@plt+0x24da0>
   3270c:	cmp	r0, #0
   32710:	mov	r6, r0
   32714:	str	r0, [sp, #56]	; 0x38
   32718:	beq	32a10 <__assert_fail@plt+0x20e6c>
   3271c:	ldr	r2, [r5, #4]
   32720:	ldr	r1, [r5, #8]
   32724:	lsl	r2, r2, #2
   32728:	bl	11784 <memcpy@plt>
   3272c:	mov	r0, r6
   32730:	ldr	r3, [r4, #76]	; 0x4c
   32734:	mov	r7, #0
   32738:	cmp	r3, r7
   3273c:	str	r7, [sp, #40]	; 0x28
   32740:	ble	32890 <__assert_fail@plt+0x20cec>
   32744:	ldr	r6, [sp, #52]	; 0x34
   32748:	cmp	r6, r7
   3274c:	ble	32890 <__assert_fail@plt+0x20cec>
   32750:	mov	r5, r7
   32754:	b	32768 <__assert_fail@plt+0x20bc4>
   32758:	add	r7, r7, #1
   3275c:	cmp	r6, r7
   32760:	ble	32890 <__assert_fail@plt+0x20cec>
   32764:	ldr	r0, [sp, #56]	; 0x38
   32768:	ldr	sl, [r0, r7, lsl #2]
   3276c:	ldr	lr, [r4]
   32770:	add	r9, lr, sl, lsl #3
   32774:	ldrb	r3, [r9, #4]
   32778:	cmp	r3, #4
   3277c:	bne	32758 <__assert_fail@plt+0x20bb4>
   32780:	sub	r1, r0, #4
   32784:	mov	r3, #0
   32788:	b	32798 <__assert_fail@plt+0x20bf4>
   3278c:	add	r3, r3, #1
   32790:	cmp	r6, r3
   32794:	beq	32758 <__assert_fail@plt+0x20bb4>
   32798:	ldr	r2, [r1, #4]!
   3279c:	add	ip, lr, r2, lsl #3
   327a0:	ldrb	ip, [ip, #4]
   327a4:	cmp	ip, #9
   327a8:	bne	3278c <__assert_fail@plt+0x20be8>
   327ac:	ldr	ip, [lr, r2, lsl #3]
   327b0:	ldr	r2, [r9]
   327b4:	cmp	ip, r2
   327b8:	bne	3278c <__assert_fail@plt+0x20be8>
   327bc:	ldr	r3, [r4, #20]
   327c0:	add	sl, sl, sl, lsl #1
   327c4:	sub	ip, r6, #1
   327c8:	add	sl, r3, sl, lsl #2
   327cc:	mov	r1, r5
   327d0:	ldr	r3, [sl, #8]
   327d4:	ldr	lr, [r3]
   327d8:	cmp	r1, ip
   327dc:	bcs	32834 <__assert_fail@plt+0x20c90>
   327e0:	add	r2, r1, ip
   327e4:	lsr	r2, r2, #1
   327e8:	ldr	r3, [r0, r2, lsl #2]
   327ec:	cmp	lr, r3
   327f0:	ble	3282c <__assert_fail@plt+0x20c88>
   327f4:	b	32950 <__assert_fail@plt+0x20dac>
   327f8:	beq	feadd2a4 <optarg@@GLIBC_2.4+0xfea92064>
   327fc:	muleq	r3, r0, r0
	...
   32808:	ldrdeq	sl, [r3], -r8
   3280c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   32810:	andeq	pc, r3, r0, lsl #30
   32814:	add	r3, r2, r1
   32818:	lsr	r3, r3, #1
   3281c:	ldr	ip, [r0, r3, lsl #2]
   32820:	cmp	lr, ip
   32824:	bgt	32958 <__assert_fail@plt+0x20db4>
   32828:	mov	r2, r3
   3282c:	cmp	r2, r1
   32830:	bhi	32814 <__assert_fail@plt+0x20c70>
   32834:	ldr	r3, [r0, r1, lsl #2]
   32838:	cmp	lr, r3
   3283c:	beq	32758 <__assert_fail@plt+0x20bb4>
   32840:	add	lr, lr, lr, lsl #1
   32844:	ldr	r3, [r4, #24]
   32848:	adds	r7, r3, lr, lsl #2
   3284c:	beq	32964 <__assert_fail@plt+0x20dc0>
   32850:	ldr	r3, [r7, #4]
   32854:	cmp	r3, #0
   32858:	beq	32964 <__assert_fail@plt+0x20dc0>
   3285c:	ldr	r2, [sp, #48]	; 0x30
   32860:	add	r6, r6, r3, lsl #1
   32864:	cmp	r2, r6
   32868:	blt	32980 <__assert_fail@plt+0x20ddc>
   3286c:	mov	r1, r7
   32870:	mov	r0, fp
   32874:	bl	23dac <__assert_fail@plt+0x12208>
   32878:	cmp	r0, #0
   3287c:	bne	328d4 <__assert_fail@plt+0x20d30>
   32880:	ldr	r6, [sp, #52]	; 0x34
   32884:	mov	r7, #1
   32888:	cmp	r6, r7
   3288c:	bgt	32764 <__assert_fail@plt+0x20bc0>
   32890:	mov	r3, #0
   32894:	mov	r2, fp
   32898:	mov	r1, r4
   3289c:	add	r0, sp, #40	; 0x28
   328a0:	bl	2c898 <__assert_fail@plt+0x1acf4>
   328a4:	cmp	r0, #0
   328a8:	str	r0, [r4, #36]	; 0x24
   328ac:	beq	32a08 <__assert_fail@plt+0x20e64>
   328b0:	ldrsb	r3, [r0, #52]	; 0x34
   328b4:	cmp	r3, #0
   328b8:	strge	r0, [r4, #48]	; 0x30
   328bc:	strge	r0, [r4, #44]	; 0x2c
   328c0:	strge	r0, [r4, #40]	; 0x28
   328c4:	blt	329a4 <__assert_fail@plt+0x20e00>
   328c8:	ldr	r0, [sp, #56]	; 0x38
   328cc:	bl	184ec <__assert_fail@plt+0x6948>
   328d0:	mov	r0, #0
   328d4:	ldr	r6, [r8]
   328d8:	str	r0, [sp, #36]	; 0x24
   328dc:	ldr	r0, [r6, #56]	; 0x38
   328e0:	cmp	r0, #0
   328e4:	beq	328f8 <__assert_fail@plt+0x20d54>
   328e8:	ldr	r5, [r0]
   328ec:	bl	184ec <__assert_fail@plt+0x6948>
   328f0:	subs	r0, r5, #0
   328f4:	bne	328e8 <__assert_fail@plt+0x20d44>
   328f8:	mov	r3, #31
   328fc:	mov	r5, #0
   32900:	str	r3, [r6, #64]	; 0x40
   32904:	ldr	r0, [r6, #16]
   32908:	str	r5, [r6, #56]	; 0x38
   3290c:	str	r5, [r6, #52]	; 0x34
   32910:	bl	184ec <__assert_fail@plt+0x6948>
   32914:	ldr	r0, [sp, #68]	; 0x44
   32918:	str	r5, [r6, #16]
   3291c:	bl	184ec <__assert_fail@plt+0x6948>
   32920:	ldr	r0, [sp, #72]	; 0x48
   32924:	bl	184ec <__assert_fail@plt+0x6948>
   32928:	ldrb	r3, [sp, #135]	; 0x87
   3292c:	cmp	r3, r5
   32930:	beq	3293c <__assert_fail@plt+0x20d98>
   32934:	ldr	r0, [sp, #64]	; 0x40
   32938:	bl	184ec <__assert_fail@plt+0x6948>
   3293c:	ldr	r0, [sp, #36]	; 0x24
   32940:	cmp	r0, #0
   32944:	bne	31aa0 <__assert_fail@plt+0x1fefc>
   32948:	add	sp, sp, #148	; 0x94
   3294c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32950:	mov	r3, r2
   32954:	mov	r2, ip
   32958:	add	r1, r3, #1
   3295c:	mov	ip, r2
   32960:	b	327d8 <__assert_fail@plt+0x20c34>
   32964:	mov	r7, #1
   32968:	b	3275c <__assert_fail@plt+0x20bb8>
   3296c:	mov	r0, #0
   32970:	str	r0, [sp, #48]	; 0x30
   32974:	str	r0, [fp, #4]
   32978:	str	r0, [fp, #8]
   3297c:	b	32730 <__assert_fail@plt+0x20b8c>
   32980:	add	r3, r3, r2
   32984:	lsl	r1, r3, #3
   32988:	lsl	r6, r3, #1
   3298c:	bl	36970 <__assert_fail@plt+0x24dcc>
   32990:	cmp	r0, #0
   32994:	beq	32a10 <__assert_fail@plt+0x20e6c>
   32998:	str	r0, [sp, #56]	; 0x38
   3299c:	str	r6, [sp, #48]	; 0x30
   329a0:	b	3286c <__assert_fail@plt+0x20cc8>
   329a4:	mov	r3, #1
   329a8:	mov	r2, fp
   329ac:	mov	r1, r4
   329b0:	add	r0, sp, #40	; 0x28
   329b4:	bl	2c898 <__assert_fail@plt+0x1acf4>
   329b8:	mov	r3, #2
   329bc:	mov	r2, fp
   329c0:	mov	r1, r4
   329c4:	str	r0, [r4, #40]	; 0x28
   329c8:	add	r0, sp, #40	; 0x28
   329cc:	bl	2c898 <__assert_fail@plt+0x1acf4>
   329d0:	mov	r3, #6
   329d4:	mov	r2, fp
   329d8:	mov	r1, r4
   329dc:	str	r0, [r4, #44]	; 0x2c
   329e0:	add	r0, sp, #40	; 0x28
   329e4:	bl	2c898 <__assert_fail@plt+0x1acf4>
   329e8:	ldr	r3, [r4, #40]	; 0x28
   329ec:	cmp	r3, #0
   329f0:	str	r0, [r4, #48]	; 0x30
   329f4:	beq	32a08 <__assert_fail@plt+0x20e64>
   329f8:	ldr	r3, [r4, #44]	; 0x2c
   329fc:	cmp	r0, #0
   32a00:	cmpne	r3, #0
   32a04:	bne	328c8 <__assert_fail@plt+0x20d24>
   32a08:	ldr	r0, [sp, #40]	; 0x28
   32a0c:	b	328d4 <__assert_fail@plt+0x20d30>
   32a10:	mov	r0, #12
   32a14:	b	328d4 <__assert_fail@plt+0x20d30>
   32a18:	cmp	ip, #0
   32a1c:	mov	r1, ip
   32a20:	beq	32228 <__assert_fail@plt+0x20684>
   32a24:	b	3220c <__assert_fail@plt+0x20668>
   32a28:	ldrb	r3, [r6, #88]	; 0x58
   32a2c:	tst	r3, #1
   32a30:	bne	32578 <__assert_fail@plt+0x209d4>
   32a34:	b	3256c <__assert_fail@plt+0x209c8>
   32a38:	bl	184ec <__assert_fail@plt+0x6948>
   32a3c:	mov	r3, #0
   32a40:	ldr	r5, [r6, #52]	; 0x34
   32a44:	str	r3, [r6, #132]	; 0x84
   32a48:	b	31e70 <__assert_fail@plt+0x202cc>
   32a4c:	mov	r3, r2
   32a50:	b	31e78 <__assert_fail@plt+0x202d4>
   32a54:	str	sl, [sp, #88]	; 0x58
   32a58:	str	sl, [sp, #92]	; 0x5c
   32a5c:	b	31bbc <__assert_fail@plt+0x20018>
   32a60:	ldr	r3, [sp, #108]	; 0x6c
   32a64:	ldr	r5, [sp, #88]	; 0x58
   32a68:	cmp	sl, r3
   32a6c:	movge	sl, r3
   32a70:	cmp	sl, r5
   32a74:	ble	32ab8 <__assert_fail@plt+0x20f14>
   32a78:	bl	11934 <__ctype_toupper_loc@plt>
   32a7c:	b	32a84 <__assert_fail@plt+0x20ee0>
   32a80:	ldr	r6, [sp, #64]	; 0x40
   32a84:	ldr	r3, [sp, #60]	; 0x3c
   32a88:	ldr	r1, [sp, #84]	; 0x54
   32a8c:	add	r3, r3, r5
   32a90:	ldr	r2, [sp, #124]	; 0x7c
   32a94:	ldrb	r3, [r3, r1]
   32a98:	cmp	r2, #0
   32a9c:	ldrbne	r3, [r2, r3]
   32aa0:	ldr	r2, [r0]
   32aa4:	ldr	r3, [r2, r3, lsl #2]
   32aa8:	strb	r3, [r6, r5]
   32aac:	add	r5, r5, #1
   32ab0:	cmp	sl, r5
   32ab4:	bne	32a80 <__assert_fail@plt+0x20edc>
   32ab8:	str	r5, [sp, #88]	; 0x58
   32abc:	str	r5, [sp, #92]	; 0x5c
   32ac0:	b	31bbc <__assert_fail@plt+0x20018>
   32ac4:	mov	r0, #12
   32ac8:	b	31acc <__assert_fail@plt+0x1ff28>
   32acc:	ldr	r4, [sp, #16]
   32ad0:	str	r0, [r5, #4]
   32ad4:	str	r0, [r5]
   32ad8:	mov	r0, #12
   32adc:	b	31a38 <__assert_fail@plt+0x1fe94>
   32ae0:	ldr	r5, [r4, #8]
   32ae4:	cmp	r5, #0
   32ae8:	beq	32c1c <__assert_fail@plt+0x21078>
   32aec:	ldr	r0, [r4]
   32af0:	mov	r2, r1
   32af4:	mov	r6, r0
   32af8:	mov	r1, r0
   32afc:	mov	lr, r9
   32b00:	ldrb	ip, [r6, #4]
   32b04:	sub	ip, ip, #1
   32b08:	cmp	ip, #11
   32b0c:	ldrls	pc, [pc, ip, lsl #2]
   32b10:	b	32bb8 <__assert_fail@plt+0x21014>
   32b14:	andeq	r2, r3, r8, lsr #23
   32b18:	andeq	r2, r3, r8, asr #22
   32b1c:			; <UNDEFINED> instruction: 0x00032bbc
   32b20:	andeq	r2, r3, r8, asr #22
   32b24:	andeq	r2, r3, r4, asr #22
   32b28:	ldrdeq	r2, [r3], -r0
   32b2c:			; <UNDEFINED> instruction: 0x00032bb8
   32b30:	andeq	r2, r3, r8, asr #22
   32b34:	andeq	r2, r3, r8, asr #22
   32b38:	andeq	r2, r3, r8, asr #22
   32b3c:	andeq	r2, r3, r8, asr #22
   32b40:	strdeq	r2, [r3], -r4
   32b44:	mov	lr, r3
   32b48:	add	r2, r2, #1
   32b4c:	cmp	r2, r5
   32b50:	add	r6, r6, #8
   32b54:	bne	32b00 <__assert_fail@plt+0x20f5c>
   32b58:	orr	r9, r9, lr
   32b5c:	ands	r9, r9, #255	; 0xff
   32b60:	beq	32c1c <__assert_fail@plt+0x21078>
   32b64:	add	r2, r0, r2, lsl #3
   32b68:	mov	r0, #7
   32b6c:	b	32b84 <__assert_fail@plt+0x20fe0>
   32b70:	cmp	r3, #5
   32b74:	strbeq	r0, [r1, #4]
   32b78:	add	r1, r1, #8
   32b7c:	cmp	r1, r2
   32b80:	beq	32c18 <__assert_fail@plt+0x21074>
   32b84:	ldrb	r3, [r1, #4]
   32b88:	cmp	r3, #1
   32b8c:	bne	32b70 <__assert_fail@plt+0x20fcc>
   32b90:	ldrsb	r3, [r1]
   32b94:	cmp	r3, #0
   32b98:	ldrblt	r3, [r1, #6]
   32b9c:	biclt	r3, r3, #32
   32ba0:	strblt	r3, [r1, #6]
   32ba4:	b	32b78 <__assert_fail@plt+0x20fd4>
   32ba8:	ldrb	ip, [r0, r2, lsl #3]
   32bac:	lsrs	ip, ip, #7
   32bb0:	movne	r9, r3
   32bb4:	b	32b48 <__assert_fail@plt+0x20fa4>
   32bb8:	bl	11b68 <abort@plt>
   32bbc:	ldr	ip, [r0, r2, lsl #3]
   32bc0:	ldr	r7, [ip, #16]
   32bc4:	cmp	r7, #0
   32bc8:	bne	326d0 <__assert_fail@plt+0x20b2c>
   32bcc:	ldr	r7, [ip, #20]
   32bd0:	cmp	r7, #0
   32bd4:	bne	326d0 <__assert_fail@plt+0x20b2c>
   32bd8:	ldr	r7, [ip, #24]
   32bdc:	cmp	r7, #0
   32be0:	bne	326d0 <__assert_fail@plt+0x20b2c>
   32be4:	ldr	ip, [ip, #28]
   32be8:	cmp	ip, #0
   32bec:	beq	32b48 <__assert_fail@plt+0x20fa4>
   32bf0:	b	326d0 <__assert_fail@plt+0x20b2c>
   32bf4:	ldr	ip, [r0, r2, lsl #3]
   32bf8:	cmp	ip, #32
   32bfc:	beq	32b48 <__assert_fail@plt+0x20fa4>
   32c00:	bls	32c4c <__assert_fail@plt+0x210a8>
   32c04:	cmp	ip, #64	; 0x40
   32c08:	beq	32b48 <__assert_fail@plt+0x20fa4>
   32c0c:	cmp	ip, #128	; 0x80
   32c10:	beq	32b48 <__assert_fail@plt+0x20fa4>
   32c14:	b	326d0 <__assert_fail@plt+0x20b2c>
   32c18:	mov	r9, lr
   32c1c:	ldr	r2, [r4, #76]	; 0x4c
   32c20:	ldrb	r3, [r4, #88]	; 0x58
   32c24:	cmp	r2, #0
   32c28:	movle	r2, r9
   32c2c:	orrgt	r2, r9, #1
   32c30:	and	r2, r2, #1
   32c34:	and	r3, r3, #249	; 0xf9
   32c38:	orr	r3, r3, r2, lsl #1
   32c3c:	mov	r2, #1
   32c40:	strb	r3, [r4, #88]	; 0x58
   32c44:	str	r2, [r4, #92]	; 0x5c
   32c48:	b	326d0 <__assert_fail@plt+0x20b2c>
   32c4c:	cmp	ip, #16
   32c50:	beq	32b48 <__assert_fail@plt+0x20fa4>
   32c54:	b	326d0 <__assert_fail@plt+0x20b2c>
   32c58:	ldr	r3, [pc, #96]	; 32cc0 <__assert_fail@plt+0x2111c>
   32c5c:	push	{r4, lr}
   32c60:	mov	lr, r2
   32c64:	ldr	r3, [r3]
   32c68:	ldrb	ip, [lr, #28]
   32c6c:	mov	r2, r1
   32c70:	mov	r1, r0
   32c74:	lsr	r0, r3, #21
   32c78:	and	r4, r0, #16
   32c7c:	and	r0, ip, #239	; 0xef
   32c80:	orr	r0, r0, r4
   32c84:	orr	r0, r0, #128	; 0x80
   32c88:	strb	r0, [lr, #28]
   32c8c:	mov	r0, lr
   32c90:	bl	317a0 <__assert_fail@plt+0x1fbfc>
   32c94:	subs	r3, r0, #0
   32c98:	popeq	{r4, pc}
   32c9c:	ldr	r1, [pc, #32]	; 32cc4 <__assert_fail@plt+0x21120>
   32ca0:	mov	r2, #5
   32ca4:	add	r3, r1, r3, lsl #2
   32ca8:	add	r1, r1, #32
   32cac:	ldr	r3, [r3, #416]	; 0x1a0
   32cb0:	mov	r0, #0
   32cb4:	add	r1, r1, r3
   32cb8:	pop	{r4, lr}
   32cbc:	b	117d8 <dcgettext@plt>
   32cc0:	strdeq	fp, [r4], -ip
   32cc4:	muleq	r3, r0, r0
   32cc8:	ldr	r3, [pc, #12]	; 32cdc <__assert_fail@plt+0x21138>
   32ccc:	ldr	r2, [r3]
   32cd0:	str	r0, [r3]
   32cd4:	mov	r0, r2
   32cd8:	bx	lr
   32cdc:	strdeq	fp, [r4], -ip
   32ce0:	push	{r4, r5, r6, lr}
   32ce4:	mov	r2, #256	; 0x100
   32ce8:	ldr	r5, [r0]
   32cec:	ldr	r6, [r0, #16]
   32cf0:	mov	r4, r0
   32cf4:	mov	r1, #0
   32cf8:	mov	r0, r6
   32cfc:	bl	119e8 <memset@plt>
   32d00:	ldr	r1, [r5, #36]	; 0x24
   32d04:	mov	r3, r6
   32d08:	add	r2, r1, #12
   32d0c:	mov	r0, r4
   32d10:	add	r1, r1, #8
   32d14:	bl	2559c <__assert_fail@plt+0x139f8>
   32d18:	ldr	r0, [r5, #40]	; 0x28
   32d1c:	ldr	r3, [r5, #36]	; 0x24
   32d20:	cmp	r3, r0
   32d24:	beq	32d40 <__assert_fail@plt+0x2119c>
   32d28:	add	r2, r0, #12
   32d2c:	add	r1, r0, #8
   32d30:	mov	r3, r6
   32d34:	mov	r0, r4
   32d38:	bl	2559c <__assert_fail@plt+0x139f8>
   32d3c:	ldr	r0, [r5, #36]	; 0x24
   32d40:	ldr	r1, [r5, #44]	; 0x2c
   32d44:	cmp	r1, r0
   32d48:	beq	32d64 <__assert_fail@plt+0x211c0>
   32d4c:	add	r2, r1, #12
   32d50:	mov	r0, r4
   32d54:	mov	r3, r6
   32d58:	add	r1, r1, #8
   32d5c:	bl	2559c <__assert_fail@plt+0x139f8>
   32d60:	ldr	r0, [r5, #36]	; 0x24
   32d64:	ldr	r1, [r5, #48]	; 0x30
   32d68:	cmp	r1, r0
   32d6c:	beq	32d84 <__assert_fail@plt+0x211e0>
   32d70:	add	r2, r1, #12
   32d74:	mov	r3, r6
   32d78:	add	r1, r1, #8
   32d7c:	mov	r0, r4
   32d80:	bl	2559c <__assert_fail@plt+0x139f8>
   32d84:	ldrb	r3, [r4, #28]
   32d88:	mov	r0, #0
   32d8c:	orr	r3, r3, #8
   32d90:	strb	r3, [r4, #28]
   32d94:	pop	{r4, r5, r6, pc}
   32d98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32d9c:	cmp	r3, r2
   32da0:	mov	r5, r3
   32da4:	sub	sp, sp, #52	; 0x34
   32da8:	movle	r3, #0
   32dac:	movgt	r3, #1
   32db0:	orrs	r3, r3, r5, lsr #31
   32db4:	ldrb	r3, [sp, #100]	; 0x64
   32db8:	ldr	ip, [sp, #88]	; 0x58
   32dbc:	ldr	sl, [r0]
   32dc0:	add	r8, r5, ip
   32dc4:	ldr	r7, [sp, #96]	; 0x60
   32dc8:	str	r3, [sp, #32]
   32dcc:	bne	33078 <__assert_fail@plt+0x214d4>
   32dd0:	cmp	r8, r2
   32dd4:	bgt	33070 <__assert_fail@plt+0x214cc>
   32dd8:	cmp	ip, #0
   32ddc:	cmpge	r5, r8
   32de0:	movgt	lr, #1
   32de4:	movle	lr, #0
   32de8:	bgt	33070 <__assert_fail@plt+0x214cc>
   32dec:	cmp	r8, #0
   32df0:	blt	3310c <__assert_fail@plt+0x21568>
   32df4:	cmp	r5, r8
   32df8:	movgt	lr, #0
   32dfc:	movle	lr, #1
   32e00:	ands	r3, lr, ip, lsr #31
   32e04:	movne	r8, #0
   32e08:	ldr	lr, [pc, #812]	; 3313c <__assert_fail@plt+0x21598>
   32e0c:	ldr	r4, [pc, #812]	; 33140 <__assert_fail@plt+0x2159c>
   32e10:	cmp	lr, #0
   32e14:	mov	ip, #1
   32e18:	moveq	ip, lr
   32e1c:	cmp	r4, #0
   32e20:	mov	lr, #1
   32e24:	moveq	lr, r4
   32e28:	str	r2, [sp, #40]	; 0x28
   32e2c:	orr	r2, ip, lr
   32e30:	ands	r3, r2, #255	; 0xff
   32e34:	str	r1, [sp, #44]	; 0x2c
   32e38:	mov	r6, r0
   32e3c:	str	r3, [sp, #28]
   32e40:	beq	32e4c <__assert_fail@plt+0x212a8>
   32e44:	add	r0, sl, #136	; 0x88
   32e48:	bl	11760 <pthread_mutex_lock@plt>
   32e4c:	ldrb	r2, [r6, #28]
   32e50:	cmp	r8, r5
   32e54:	lsr	fp, r2, #5
   32e58:	and	r3, fp, #3
   32e5c:	str	r3, [sp, #36]	; 0x24
   32e60:	bgt	32f14 <__assert_fail@plt+0x21370>
   32e64:	lsr	r1, r2, #4
   32e68:	and	r1, r1, #1
   32e6c:	cmp	r7, #0
   32e70:	orreq	r1, r1, #1
   32e74:	cmp	r1, #0
   32e78:	bne	33114 <__assert_fail@plt+0x21570>
   32e7c:	and	r2, r2, #6
   32e80:	cmp	r2, #4
   32e84:	ldrne	r0, [r6, #24]
   32e88:	beq	330dc <__assert_fail@plt+0x21538>
   32e8c:	add	fp, r0, #1
   32e90:	mov	r4, fp
   32e94:	lsl	r0, fp, #3
   32e98:	bl	36944 <__assert_fail@plt+0x24da0>
   32e9c:	subs	r9, r0, #0
   32ea0:	beq	33088 <__assert_fail@plt+0x214e4>
   32ea4:	ldr	r3, [sp, #36]	; 0x24
   32ea8:	str	r9, [sp, #12]
   32eac:	str	r3, [sp, #16]
   32eb0:	ldr	r3, [sp, #92]	; 0x5c
   32eb4:	str	fp, [sp, #8]
   32eb8:	str	r3, [sp, #4]
   32ebc:	str	r8, [sp]
   32ec0:	ldr	r2, [sp, #40]	; 0x28
   32ec4:	ldr	r1, [sp, #44]	; 0x2c
   32ec8:	mov	r3, r5
   32ecc:	mov	r0, r6
   32ed0:	bl	2f138 <__assert_fail@plt+0x1d594>
   32ed4:	cmp	r0, #0
   32ed8:	beq	32f38 <__assert_fail@plt+0x21394>
   32edc:	cmp	r0, #1
   32ee0:	mvneq	r5, #0
   32ee4:	beq	32eec <__assert_fail@plt+0x21348>
   32ee8:	mvn	r5, #1
   32eec:	mov	r0, r9
   32ef0:	bl	184ec <__assert_fail@plt+0x6948>
   32ef4:	ldr	r3, [sp, #28]
   32ef8:	cmp	r3, #0
   32efc:	beq	32f08 <__assert_fail@plt+0x21364>
   32f00:	add	r0, sl, #136	; 0x88
   32f04:	bl	11694 <pthread_mutex_unlock@plt>
   32f08:	mov	r0, r5
   32f0c:	add	sp, sp, #52	; 0x34
   32f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32f14:	ldr	r1, [r6, #16]
   32f18:	cmp	r1, #0
   32f1c:	beq	32e64 <__assert_fail@plt+0x212c0>
   32f20:	tst	r2, #8
   32f24:	bne	32e64 <__assert_fail@plt+0x212c0>
   32f28:	mov	r0, r6
   32f2c:	bl	32ce0 <__assert_fail@plt+0x2113c>
   32f30:	ldrb	r2, [r6, #28]
   32f34:	b	32e64 <__assert_fail@plt+0x212c0>
   32f38:	cmp	r7, #0
   32f3c:	beq	32fe8 <__assert_fail@plt+0x21444>
   32f40:	ldrb	r8, [r6, #28]
   32f44:	add	fp, r4, #1
   32f48:	lsr	r8, r8, #1
   32f4c:	ands	r8, r8, #3
   32f50:	beq	33090 <__assert_fail@plt+0x214ec>
   32f54:	cmp	r8, #1
   32f58:	ldr	r2, [r7]
   32f5c:	movne	r8, #2
   32f60:	beq	33004 <__assert_fail@plt+0x21460>
   32f64:	cmp	r4, #0
   32f68:	ble	33128 <__assert_fail@plt+0x21584>
   32f6c:	ldmib	r7, {r1, r2}
   32f70:	mov	r3, r9
   32f74:	add	ip, r9, r4, lsl #3
   32f78:	sub	r1, r1, #4
   32f7c:	sub	r2, r2, #4
   32f80:	ldr	r0, [r3]
   32f84:	add	r3, r3, #8
   32f88:	str	r0, [r1, #4]!
   32f8c:	ldr	r0, [r3, #-4]
   32f90:	cmp	ip, r3
   32f94:	str	r0, [r2, #4]!
   32f98:	bne	32f80 <__assert_fail@plt+0x213dc>
   32f9c:	ldr	r2, [r7]
   32fa0:	mov	r3, r4
   32fa4:	cmp	r3, r2
   32fa8:	bcs	32fd0 <__assert_fail@plt+0x2142c>
   32fac:	ldmib	r7, {r0, r1}
   32fb0:	mvn	r2, #0
   32fb4:	str	r2, [r1, r3, lsl #2]
   32fb8:	str	r2, [r0, r3, lsl #2]
   32fbc:	ldr	r3, [r7]
   32fc0:	add	r4, r4, #1
   32fc4:	cmp	r4, r3
   32fc8:	mov	r3, r4
   32fcc:	bcc	32fb4 <__assert_fail@plt+0x21410>
   32fd0:	ldrb	r3, [r6, #28]
   32fd4:	bic	r3, r3, #6
   32fd8:	orr	r8, r3, r8, lsl #1
   32fdc:	tst	r8, #6
   32fe0:	strb	r8, [r6, #28]
   32fe4:	beq	32ee8 <__assert_fail@plt+0x21344>
   32fe8:	ldr	r3, [sp, #32]
   32fec:	cmp	r3, #0
   32ff0:	ldrne	r3, [r9, #4]
   32ff4:	subne	r5, r3, r5
   32ff8:	bne	32eec <__assert_fail@plt+0x21348>
   32ffc:	ldr	r5, [r9]
   33000:	b	32eec <__assert_fail@plt+0x21348>
   33004:	cmp	r2, fp
   33008:	bcs	32f64 <__assert_fail@plt+0x213c0>
   3300c:	lsl	r2, fp, #2
   33010:	mov	r1, r2
   33014:	ldr	r0, [r7, #4]
   33018:	str	r2, [sp, #40]	; 0x28
   3301c:	bl	36970 <__assert_fail@plt+0x24dcc>
   33020:	subs	r3, r0, #0
   33024:	str	r3, [sp, #36]	; 0x24
   33028:	beq	33134 <__assert_fail@plt+0x21590>
   3302c:	ldr	r2, [sp, #40]	; 0x28
   33030:	ldr	r0, [r7, #8]
   33034:	mov	r1, r2
   33038:	bl	36970 <__assert_fail@plt+0x24dcc>
   3303c:	ldr	r3, [sp, #36]	; 0x24
   33040:	subs	r2, r0, #0
   33044:	strne	r2, [r7, #8]
   33048:	strne	r3, [r7, #4]
   3304c:	strne	fp, [r7]
   33050:	movne	r2, fp
   33054:	bne	32f64 <__assert_fail@plt+0x213c0>
   33058:	mov	r0, r3
   3305c:	str	r2, [sp, #36]	; 0x24
   33060:	bl	184ec <__assert_fail@plt+0x6948>
   33064:	ldr	r2, [sp, #36]	; 0x24
   33068:	mov	r8, r2
   3306c:	b	32fd0 <__assert_fail@plt+0x2142c>
   33070:	mov	r8, r2
   33074:	b	32e08 <__assert_fail@plt+0x21264>
   33078:	mvn	r5, #0
   3307c:	mov	r0, r5
   33080:	add	sp, sp, #52	; 0x34
   33084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33088:	mvn	r5, #1
   3308c:	b	32ef4 <__assert_fail@plt+0x21350>
   33090:	lsl	r8, fp, #2
   33094:	mov	r0, r8
   33098:	bl	36944 <__assert_fail@plt+0x24da0>
   3309c:	cmp	r0, #0
   330a0:	str	r0, [r7, #4]
   330a4:	beq	33134 <__assert_fail@plt+0x21590>
   330a8:	mov	r0, r8
   330ac:	str	fp, [sp, #36]	; 0x24
   330b0:	bl	36944 <__assert_fail@plt+0x24da0>
   330b4:	ldr	r2, [sp, #36]	; 0x24
   330b8:	cmp	r0, #0
   330bc:	mov	r8, r0
   330c0:	str	r0, [r7, #8]
   330c4:	strne	r2, [r7]
   330c8:	movne	r8, #1
   330cc:	bne	32f64 <__assert_fail@plt+0x213c0>
   330d0:	ldr	r0, [r7, #4]
   330d4:	bl	184ec <__assert_fail@plt+0x6948>
   330d8:	b	32fd0 <__assert_fail@plt+0x2142c>
   330dc:	ldr	fp, [r7]
   330e0:	ldr	r0, [r6, #24]
   330e4:	cmp	fp, r0
   330e8:	bhi	32e8c <__assert_fail@plt+0x212e8>
   330ec:	cmp	fp, #0
   330f0:	mov	r4, fp
   330f4:	bgt	32e94 <__assert_fail@plt+0x212f0>
   330f8:	mov	fp, #1
   330fc:	mov	r7, r1
   33100:	mov	r4, fp
   33104:	mov	r0, #8
   33108:	b	32e98 <__assert_fail@plt+0x212f4>
   3310c:	mov	r8, lr
   33110:	b	32e08 <__assert_fail@plt+0x21264>
   33114:	mov	fp, #1
   33118:	mov	r4, fp
   3311c:	mov	r0, #8
   33120:	mov	r7, #0
   33124:	b	32e98 <__assert_fail@plt+0x212f4>
   33128:	mov	r4, #0
   3312c:	mov	r3, r4
   33130:	b	32fa4 <__assert_fail@plt+0x21400>
   33134:	mov	r8, #0
   33138:	b	32fd0 <__assert_fail@plt+0x2142c>
	...
   33144:	push	{r4, r5, r6, r7, r8, lr}
   33148:	mov	r5, r2
   3314c:	and	r2, r2, #1
   33150:	cmp	r2, #0
   33154:	ldr	ip, [pc, #404]	; 332f0 <__assert_fail@plt+0x2174c>
   33158:	mov	r2, #0
   3315c:	ldr	r3, [pc, #400]	; 332f4 <__assert_fail@plt+0x21750>
   33160:	mov	r4, r0
   33164:	str	r2, [r0]
   33168:	str	r2, [r0, #4]
   3316c:	str	r2, [r0, #8]
   33170:	sub	sp, sp, #8
   33174:	mov	r0, #256	; 0x100
   33178:	ldr	r8, [pc, #376]	; 332f8 <__assert_fail@plt+0x21754>
   3317c:	ldr	r6, [pc, #376]	; 332fc <__assert_fail@plt+0x21758>
   33180:	moveq	r8, ip
   33184:	movne	r6, r3
   33188:	mov	r7, r1
   3318c:	bl	36944 <__assert_fail@plt+0x24da0>
   33190:	cmp	r0, #0
   33194:	str	r0, [r4, #16]
   33198:	beq	332e4 <__assert_fail@plt+0x21740>
   3319c:	tst	r5, #2
   331a0:	movne	r6, r8
   331a4:	ands	r2, r5, #4
   331a8:	moveq	r3, r2
   331ac:	ldrb	r2, [r4, #28]
   331b0:	movne	r3, #1
   331b4:	lsl	r5, r5, #1
   331b8:	bic	r2, r2, #128	; 0x80
   331bc:	orr	r2, r2, r3, lsl #7
   331c0:	bic	r2, r2, #16
   331c4:	and	r5, r5, #16
   331c8:	orr	r5, r5, r2
   331cc:	mov	r3, #0
   331d0:	bicne	r6, r6, #64	; 0x40
   331d4:	str	r3, [r4, #20]
   331d8:	strb	r5, [r4, #28]
   331dc:	mov	r0, r7
   331e0:	orrne	r6, r6, #256	; 0x100
   331e4:	bl	11988 <strlen@plt>
   331e8:	mov	r1, r7
   331ec:	mov	r3, r6
   331f0:	mov	r2, r0
   331f4:	mov	r0, r4
   331f8:	bl	317a0 <__assert_fail@plt+0x1fbfc>
   331fc:	cmp	r0, #16
   33200:	mov	r1, r0
   33204:	beq	332c0 <__assert_fail@plt+0x2171c>
   33208:	cmp	r0, #0
   3320c:	bne	332c4 <__assert_fail@plt+0x21720>
   33210:	ldr	r5, [r4]
   33214:	ldr	r6, [r4, #16]
   33218:	mov	r2, #256	; 0x100
   3321c:	mov	r0, r6
   33220:	bl	119e8 <memset@plt>
   33224:	ldr	r1, [r5, #36]	; 0x24
   33228:	mov	r3, r6
   3322c:	add	r2, r1, #12
   33230:	mov	r0, r4
   33234:	add	r1, r1, #8
   33238:	bl	2559c <__assert_fail@plt+0x139f8>
   3323c:	ldr	r1, [r5, #40]	; 0x28
   33240:	ldr	r3, [r5, #36]	; 0x24
   33244:	cmp	r3, r1
   33248:	beq	33264 <__assert_fail@plt+0x216c0>
   3324c:	add	r2, r1, #12
   33250:	mov	r3, r6
   33254:	add	r1, r1, #8
   33258:	mov	r0, r4
   3325c:	bl	2559c <__assert_fail@plt+0x139f8>
   33260:	ldr	r1, [r5, #36]	; 0x24
   33264:	ldr	r0, [r5, #44]	; 0x2c
   33268:	cmp	r1, r0
   3326c:	beq	33288 <__assert_fail@plt+0x216e4>
   33270:	add	r2, r0, #12
   33274:	add	r1, r0, #8
   33278:	mov	r3, r6
   3327c:	mov	r0, r4
   33280:	bl	2559c <__assert_fail@plt+0x139f8>
   33284:	ldr	r0, [r5, #36]	; 0x24
   33288:	ldr	r1, [r5, #48]	; 0x30
   3328c:	cmp	r0, r1
   33290:	beq	332a8 <__assert_fail@plt+0x21704>
   33294:	add	r2, r1, #12
   33298:	mov	r3, r6
   3329c:	add	r1, r1, #8
   332a0:	mov	r0, r4
   332a4:	bl	2559c <__assert_fail@plt+0x139f8>
   332a8:	ldrb	r3, [r4, #28]
   332ac:	mov	r0, #0
   332b0:	orr	r3, r3, #8
   332b4:	strb	r3, [r4, #28]
   332b8:	add	sp, sp, #8
   332bc:	pop	{r4, r5, r6, r7, r8, pc}
   332c0:	mov	r1, #8
   332c4:	ldr	r0, [r4, #16]
   332c8:	str	r1, [sp, #4]
   332cc:	bl	184ec <__assert_fail@plt+0x6948>
   332d0:	ldr	r1, [sp, #4]
   332d4:	mov	r3, #0
   332d8:	mov	r0, r1
   332dc:	str	r3, [r4, #16]
   332e0:	b	332b8 <__assert_fail@plt+0x21714>
   332e4:	mov	r0, #12
   332e8:	add	sp, sp, #8
   332ec:	pop	{r4, r5, r6, r7, r8, pc}
   332f0:	smlalbteq	r0, r1, r6, r2
   332f4:	strdeq	fp, [r3], -ip
   332f8:	strdeq	fp, [r3], #-44	; 0xffffffd4
   332fc:	smlabteq	r1, r6, r2, r0
   33300:	cmp	r0, #16
   33304:	push	{r4, r5, r6, r7, r8, lr}
   33308:	bhi	33370 <__assert_fail@plt+0x217cc>
   3330c:	ldr	r1, [pc, #96]	; 33374 <__assert_fail@plt+0x217d0>
   33310:	mov	r4, r3
   33314:	add	r0, r1, r0, lsl #2
   33318:	add	r1, r1, #32
   3331c:	ldr	r3, [r0, #416]	; 0x1a0
   33320:	mov	r6, r2
   33324:	add	r1, r1, r3
   33328:	mov	r2, #5
   3332c:	mov	r0, #0
   33330:	bl	117d8 <dcgettext@plt>
   33334:	mov	r7, r0
   33338:	bl	11988 <strlen@plt>
   3333c:	cmp	r4, #0
   33340:	add	r5, r0, #1
   33344:	beq	33368 <__assert_fail@plt+0x217c4>
   33348:	cmp	r5, r4
   3334c:	subhi	r2, r4, #1
   33350:	movhi	r3, #0
   33354:	strbhi	r3, [r6, r2]
   33358:	movls	r2, r5
   3335c:	mov	r1, r7
   33360:	mov	r0, r6
   33364:	bl	11784 <memcpy@plt>
   33368:	mov	r0, r5
   3336c:	pop	{r4, r5, r6, r7, r8, pc}
   33370:	bl	11b68 <abort@plt>
   33374:	muleq	r3, r0, r0
   33378:	push	{r4, r5, r6, lr}
   3337c:	mov	r4, r0
   33380:	ldr	r5, [r0]
   33384:	cmp	r5, #0
   33388:	beq	333c8 <__assert_fail@plt+0x21824>
   3338c:	ldr	r2, [pc, #92]	; 333f0 <__assert_fail@plt+0x2184c>
   33390:	ldr	r1, [pc, #92]	; 333f4 <__assert_fail@plt+0x21850>
   33394:	cmp	r2, #0
   33398:	mov	r3, #1
   3339c:	moveq	r3, r2
   333a0:	cmp	r1, #0
   333a4:	mov	r2, #1
   333a8:	moveq	r2, r1
   333ac:	orr	r3, r3, r2
   333b0:	tst	r3, #1
   333b4:	beq	333c0 <__assert_fail@plt+0x2181c>
   333b8:	add	r0, r5, #136	; 0x88
   333bc:	bl	11718 <pthread_mutex_destroy@plt>
   333c0:	mov	r0, r5
   333c4:	bl	267b0 <__assert_fail@plt+0x14c0c>
   333c8:	mov	r5, #0
   333cc:	ldr	r0, [r4, #16]
   333d0:	str	r5, [r4]
   333d4:	str	r5, [r4, #4]
   333d8:	bl	184ec <__assert_fail@plt+0x6948>
   333dc:	str	r5, [r4, #16]
   333e0:	ldr	r0, [r4, #20]
   333e4:	bl	184ec <__assert_fail@plt+0x6948>
   333e8:	str	r5, [r4, #20]
   333ec:	pop	{r4, r5, r6, pc}
	...
   333f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   333fc:	sub	sp, sp, #36	; 0x24
   33400:	ldr	r4, [sp, #72]	; 0x48
   33404:	bics	ip, r4, #7
   33408:	movne	r0, #2
   3340c:	beq	33418 <__assert_fail@plt+0x21874>
   33410:	add	sp, sp, #36	; 0x24
   33414:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33418:	ands	fp, r4, #4
   3341c:	mov	r8, r3
   33420:	str	r2, [sp, #28]
   33424:	mov	r7, r1
   33428:	mov	r5, r0
   3342c:	bne	334d0 <__assert_fail@plt+0x2192c>
   33430:	mov	r0, r1
   33434:	bl	11988 <strlen@plt>
   33438:	mov	r9, r0
   3343c:	ldr	r3, [pc, #204]	; 33510 <__assert_fail@plt+0x2196c>
   33440:	ldr	r1, [pc, #204]	; 33514 <__assert_fail@plt+0x21970>
   33444:	cmp	r3, #0
   33448:	mov	r6, #1
   3344c:	moveq	r6, r3
   33450:	cmp	r1, #0
   33454:	mov	r3, #1
   33458:	moveq	r3, r1
   3345c:	orr	r6, r6, r3
   33460:	ands	r6, r6, #255	; 0xff
   33464:	ldr	sl, [r5]
   33468:	beq	33474 <__assert_fail@plt+0x218d0>
   3346c:	add	r0, sl, #136	; 0x88
   33470:	bl	11760 <pthread_mutex_lock@plt>
   33474:	ldrb	r3, [r5, #28]
   33478:	tst	r3, #16
   3347c:	beq	334dc <__assert_fail@plt+0x21938>
   33480:	mov	ip, #0
   33484:	str	r4, [sp, #16]
   33488:	str	r9, [sp, #4]
   3348c:	str	r9, [sp]
   33490:	mov	r3, fp
   33494:	mov	r2, r9
   33498:	mov	r1, r7
   3349c:	mov	r0, r5
   334a0:	str	ip, [sp, #12]
   334a4:	str	ip, [sp, #8]
   334a8:	bl	2f138 <__assert_fail@plt+0x1d594>
   334ac:	mov	r4, r0
   334b0:	cmp	r6, #0
   334b4:	beq	334c0 <__assert_fail@plt+0x2191c>
   334b8:	add	r0, sl, #136	; 0x88
   334bc:	bl	11694 <pthread_mutex_unlock@plt>
   334c0:	adds	r0, r4, #0
   334c4:	movne	r0, #1
   334c8:	add	sp, sp, #36	; 0x24
   334cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   334d0:	ldr	fp, [r3]
   334d4:	ldr	r9, [r3, #4]
   334d8:	b	3343c <__assert_fail@plt+0x21898>
   334dc:	ldr	r3, [sp, #28]
   334e0:	str	r4, [sp, #16]
   334e4:	str	r3, [sp, #8]
   334e8:	str	r8, [sp, #12]
   334ec:	str	r9, [sp, #4]
   334f0:	str	r9, [sp]
   334f4:	mov	r3, fp
   334f8:	mov	r2, r9
   334fc:	mov	r1, r7
   33500:	mov	r0, r5
   33504:	bl	2f138 <__assert_fail@plt+0x1d594>
   33508:	mov	r4, r0
   3350c:	b	334b0 <__assert_fail@plt+0x2190c>
	...
   33518:	push	{r4, lr}
   3351c:	sub	sp, sp, #16
   33520:	mov	lr, #1
   33524:	ldr	r4, [sp, #24]
   33528:	mov	ip, #0
   3352c:	str	ip, [sp]
   33530:	stmib	sp, {r2, r4, lr}
   33534:	bl	32d98 <__assert_fail@plt+0x211f4>
   33538:	add	sp, sp, #16
   3353c:	pop	{r4, pc}
   33540:	push	{r4, lr}
   33544:	sub	sp, sp, #16
   33548:	mov	ip, #0
   3354c:	ldr	r4, [sp, #24]
   33550:	ldr	lr, [sp, #28]
   33554:	str	r2, [sp, #4]
   33558:	str	r4, [sp]
   3355c:	str	lr, [sp, #8]
   33560:	str	ip, [sp, #12]
   33564:	bl	32d98 <__assert_fail@plt+0x211f4>
   33568:	add	sp, sp, #16
   3356c:	pop	{r4, pc}
   33570:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33574:	sub	sp, sp, #20
   33578:	mov	r5, r2
   3357c:	ldr	r6, [sp, #68]	; 0x44
   33580:	ldr	r4, [sp, #56]	; 0x38
   33584:	orr	r2, r2, r6
   33588:	orrs	r2, r2, r4
   3358c:	bmi	335b4 <__assert_fail@plt+0x21a10>
   33590:	cmp	r4, #0
   33594:	mov	sl, r0
   33598:	mov	fp, r1
   3359c:	mov	r7, r3
   335a0:	blt	335c4 <__assert_fail@plt+0x21a20>
   335a4:	mvn	r3, #-2147483648	; 0x80000000
   335a8:	sub	r3, r3, r4
   335ac:	cmp	r5, r3
   335b0:	ble	335c4 <__assert_fail@plt+0x21a20>
   335b4:	mvn	r4, #1
   335b8:	mov	r0, r4
   335bc:	add	sp, sp, #20
   335c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   335c4:	cmp	r4, #0
   335c8:	add	r9, r5, r4
   335cc:	ble	33658 <__assert_fail@plt+0x21ab4>
   335d0:	cmp	r5, #0
   335d4:	beq	33650 <__assert_fail@plt+0x21aac>
   335d8:	mov	r0, r9
   335dc:	bl	36944 <__assert_fail@plt+0x24da0>
   335e0:	subs	r8, r0, #0
   335e4:	beq	335b4 <__assert_fail@plt+0x21a10>
   335e8:	mov	r1, fp
   335ec:	mov	r2, r5
   335f0:	bl	11784 <memcpy@plt>
   335f4:	mov	r1, r7
   335f8:	mov	r2, r4
   335fc:	add	r0, r8, r5
   33600:	bl	11784 <memcpy@plt>
   33604:	mov	r7, r8
   33608:	ldr	r2, [sp, #64]	; 0x40
   3360c:	mov	ip, #1
   33610:	mov	r3, #0
   33614:	str	r2, [sp, #8]
   33618:	mov	r1, r7
   3361c:	mov	r2, r9
   33620:	str	ip, [sp, #12]
   33624:	str	r3, [sp]
   33628:	str	r6, [sp, #4]
   3362c:	ldr	r3, [sp, #60]	; 0x3c
   33630:	mov	r0, sl
   33634:	bl	32d98 <__assert_fail@plt+0x211f4>
   33638:	mov	r4, r0
   3363c:	mov	r0, r8
   33640:	bl	184ec <__assert_fail@plt+0x6948>
   33644:	mov	r0, r4
   33648:	add	sp, sp, #20
   3364c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33650:	mov	r8, r5
   33654:	b	33608 <__assert_fail@plt+0x21a64>
   33658:	mov	r7, fp
   3365c:	mov	r8, #0
   33660:	b	33608 <__assert_fail@plt+0x21a64>
   33664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33668:	sub	sp, sp, #20
   3366c:	mov	r5, r2
   33670:	ldr	r6, [sp, #72]	; 0x48
   33674:	ldr	r4, [sp, #56]	; 0x38
   33678:	orr	r2, r2, r6
   3367c:	orrs	r2, r2, r4
   33680:	bmi	336a8 <__assert_fail@plt+0x21b04>
   33684:	cmp	r4, #0
   33688:	mov	sl, r0
   3368c:	mov	fp, r1
   33690:	mov	r7, r3
   33694:	blt	336b8 <__assert_fail@plt+0x21b14>
   33698:	mvn	r3, #-2147483648	; 0x80000000
   3369c:	sub	r3, r3, r4
   336a0:	cmp	r5, r3
   336a4:	ble	336b8 <__assert_fail@plt+0x21b14>
   336a8:	mvn	r4, #1
   336ac:	mov	r0, r4
   336b0:	add	sp, sp, #20
   336b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   336b8:	cmp	r4, #0
   336bc:	add	r9, r5, r4
   336c0:	ble	3374c <__assert_fail@plt+0x21ba8>
   336c4:	cmp	r5, #0
   336c8:	beq	33744 <__assert_fail@plt+0x21ba0>
   336cc:	mov	r0, r9
   336d0:	bl	36944 <__assert_fail@plt+0x24da0>
   336d4:	subs	r8, r0, #0
   336d8:	beq	336a8 <__assert_fail@plt+0x21b04>
   336dc:	mov	r1, fp
   336e0:	mov	r2, r5
   336e4:	bl	11784 <memcpy@plt>
   336e8:	mov	r1, r7
   336ec:	mov	r2, r4
   336f0:	add	r0, r8, r5
   336f4:	bl	11784 <memcpy@plt>
   336f8:	mov	r7, r8
   336fc:	ldr	r2, [sp, #68]	; 0x44
   33700:	mov	r3, #0
   33704:	str	r2, [sp, #8]
   33708:	ldr	r2, [sp, #64]	; 0x40
   3370c:	mov	r1, r7
   33710:	str	r2, [sp]
   33714:	str	r3, [sp, #12]
   33718:	mov	r2, r9
   3371c:	ldr	r3, [sp, #60]	; 0x3c
   33720:	str	r6, [sp, #4]
   33724:	mov	r0, sl
   33728:	bl	32d98 <__assert_fail@plt+0x211f4>
   3372c:	mov	r4, r0
   33730:	mov	r0, r8
   33734:	bl	184ec <__assert_fail@plt+0x6948>
   33738:	mov	r0, r4
   3373c:	add	sp, sp, #20
   33740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33744:	mov	r8, r5
   33748:	b	336fc <__assert_fail@plt+0x21b58>
   3374c:	mov	r7, fp
   33750:	mov	r8, #0
   33754:	b	336fc <__assert_fail@plt+0x21b58>
   33758:	cmp	r2, #0
   3375c:	bne	3377c <__assert_fail@plt+0x21bd8>
   33760:	ldrb	r3, [r0, #28]
   33764:	bic	r3, r3, #6
   33768:	strb	r3, [r0, #28]
   3376c:	str	r2, [r1]
   33770:	str	r2, [r1, #8]
   33774:	str	r2, [r1, #4]
   33778:	bx	lr
   3377c:	ldrb	ip, [r0, #28]
   33780:	bic	ip, ip, #4
   33784:	orr	ip, ip, #2
   33788:	strb	ip, [r0, #28]
   3378c:	stm	r1, {r2, r3}
   33790:	ldr	r3, [sp]
   33794:	str	r3, [r1, #8]
   33798:	bx	lr
   3379c:	push	{r4, r5, r6, lr}
   337a0:	mov	r2, r1
   337a4:	mov	r4, r1
   337a8:	mov	r1, #0
   337ac:	mov	r5, r0
   337b0:	bl	11a24 <memchr@plt>
   337b4:	cmp	r0, #0
   337b8:	subne	r0, r0, r5
   337bc:	addne	r0, r0, #1
   337c0:	moveq	r0, r4
   337c4:	pop	{r4, r5, r6, pc}
   337c8:	push	{r4, r5, r6, r7, r8, lr}
   337cc:	mov	r5, r0
   337d0:	ldr	r0, [pc, #296]	; 33900 <__assert_fail@plt+0x21d5c>
   337d4:	bl	118ec <getenv@plt>
   337d8:	ldrb	r3, [r5, #4]
   337dc:	subs	r6, r0, #0
   337e0:	beq	338d4 <__assert_fail@plt+0x21d30>
   337e4:	cmp	r3, #0
   337e8:	beq	3380c <__assert_fail@plt+0x21c68>
   337ec:	mov	r1, r6
   337f0:	add	r0, r5, #5
   337f4:	bl	1170c <strcmp@plt>
   337f8:	cmp	r0, #0
   337fc:	bne	3380c <__assert_fail@plt+0x21c68>
   33800:	mov	r4, #1
   33804:	mov	r0, r4
   33808:	pop	{r4, r5, r6, r7, r8, pc}
   3380c:	mov	r0, r6
   33810:	bl	11988 <strlen@plt>
   33814:	add	r7, r0, #1
   33818:	cmp	r7, #58	; 0x3a
   3381c:	movls	r0, #64	; 0x40
   33820:	addhi	r0, r0, #10
   33824:	bichi	r0, r0, #3
   33828:	bl	36944 <__assert_fail@plt+0x24da0>
   3382c:	subs	r4, r0, #0
   33830:	beq	338f8 <__assert_fail@plt+0x21d54>
   33834:	mov	r3, r4
   33838:	mov	r8, #0
   3383c:	mov	r2, #1
   33840:	strb	r2, [r4, #4]
   33844:	str	r8, [r4]
   33848:	mov	r1, r6
   3384c:	strb	r8, [r3, #5]!
   33850:	mov	r2, r7
   33854:	mov	r0, r3
   33858:	bl	11784 <memcpy@plt>
   3385c:	strb	r8, [r0, r7]
   33860:	ldrb	r3, [r5, #4]
   33864:	cmp	r3, #0
   33868:	beq	338b8 <__assert_fail@plt+0x21d14>
   3386c:	add	r1, r5, #5
   33870:	mov	r2, #1
   33874:	ldr	r0, [pc, #132]	; 33900 <__assert_fail@plt+0x21d5c>
   33878:	bl	119a0 <setenv@plt>
   3387c:	cmp	r0, #0
   33880:	beq	338c8 <__assert_fail@plt+0x21d24>
   33884:	bl	119b8 <__errno_location@plt>
   33888:	cmp	r4, #1
   3388c:	mov	r6, r0
   33890:	ldr	r7, [r0]
   33894:	beq	338ac <__assert_fail@plt+0x21d08>
   33898:	ldr	r5, [r4]
   3389c:	mov	r0, r4
   338a0:	bl	184ec <__assert_fail@plt+0x6948>
   338a4:	subs	r4, r5, #0
   338a8:	bne	33898 <__assert_fail@plt+0x21cf4>
   338ac:	str	r7, [r6]
   338b0:	mov	r4, #0
   338b4:	b	33804 <__assert_fail@plt+0x21c60>
   338b8:	ldr	r0, [pc, #64]	; 33900 <__assert_fail@plt+0x21d5c>
   338bc:	bl	11b44 <unsetenv@plt>
   338c0:	cmp	r0, #0
   338c4:	bne	33884 <__assert_fail@plt+0x21ce0>
   338c8:	bl	11844 <tzset@plt>
   338cc:	mov	r0, r4
   338d0:	pop	{r4, r5, r6, r7, r8, pc}
   338d4:	cmp	r3, #0
   338d8:	beq	33800 <__assert_fail@plt+0x21c5c>
   338dc:	mov	r0, #64	; 0x40
   338e0:	bl	36944 <__assert_fail@plt+0x24da0>
   338e4:	subs	r4, r0, #0
   338e8:	strne	r6, [r4]
   338ec:	strbne	r6, [r4, #4]
   338f0:	strbne	r6, [r4, #5]
   338f4:	bne	33860 <__assert_fail@plt+0x21cbc>
   338f8:	mov	r4, #0
   338fc:	b	33804 <__assert_fail@plt+0x21c60>
   33900:	andeq	r9, r3, ip, asr r6
   33904:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33908:	ldr	r6, [r1, #40]	; 0x28
   3390c:	cmp	r6, #0
   33910:	beq	33a0c <__assert_fail@plt+0x21e68>
   33914:	cmp	r1, r6
   33918:	mov	r7, r1
   3391c:	mov	r5, r0
   33920:	bhi	33930 <__assert_fail@plt+0x21d8c>
   33924:	add	r3, r1, #44	; 0x2c
   33928:	cmp	r6, r3
   3392c:	bcc	33a0c <__assert_fail@plt+0x21e68>
   33930:	ldrb	r3, [r6]
   33934:	cmp	r3, #0
   33938:	addne	r4, r5, #5
   3393c:	beq	33a04 <__assert_fail@plt+0x21e60>
   33940:	mov	r1, r6
   33944:	mov	r0, r4
   33948:	bl	1170c <strcmp@plt>
   3394c:	add	r2, r5, #5
   33950:	cmp	r0, #0
   33954:	mov	r0, r4
   33958:	beq	339f8 <__assert_fail@plt+0x21e54>
   3395c:	ldrb	r3, [r4]
   33960:	cmp	r3, #0
   33964:	bne	3397c <__assert_fail@plt+0x21dd8>
   33968:	cmp	r4, r2
   3396c:	bne	33a14 <__assert_fail@plt+0x21e70>
   33970:	ldrb	r3, [r5, #4]
   33974:	cmp	r3, #0
   33978:	beq	33a14 <__assert_fail@plt+0x21e70>
   3397c:	bl	11988 <strlen@plt>
   33980:	add	r0, r0, #1
   33984:	ldrb	r3, [r4, r0]!
   33988:	cmp	r3, #0
   3398c:	bne	33940 <__assert_fail@plt+0x21d9c>
   33990:	ldr	r3, [r5]
   33994:	cmp	r3, #0
   33998:	addne	r4, r3, #5
   3399c:	movne	r5, r3
   339a0:	b	33940 <__assert_fail@plt+0x21d9c>
   339a4:	cmp	r8, #58	; 0x3a
   339a8:	addhi	r0, r0, #10
   339ac:	bichi	r0, r0, #3
   339b0:	movls	r0, #64	; 0x40
   339b4:	bl	36944 <__assert_fail@plt+0x24da0>
   339b8:	subs	r9, r0, #0
   339bc:	beq	33a4c <__assert_fail@plt+0x21ea8>
   339c0:	mov	r3, r9
   339c4:	mov	sl, #0
   339c8:	mov	r2, #1
   339cc:	strb	r2, [r9, #4]
   339d0:	str	sl, [r9]
   339d4:	mov	r1, r6
   339d8:	strb	sl, [r3, #5]!
   339dc:	mov	r2, r8
   339e0:	mov	r0, r3
   339e4:	bl	11784 <memcpy@plt>
   339e8:	mov	r4, r0
   339ec:	strb	sl, [r0, r8]
   339f0:	str	r9, [r5]
   339f4:	strb	sl, [r9, #4]
   339f8:	str	r4, [r7, #40]	; 0x28
   339fc:	mov	r0, #1
   33a00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33a04:	ldr	r4, [pc, #76]	; 33a58 <__assert_fail@plt+0x21eb4>
   33a08:	b	339f8 <__assert_fail@plt+0x21e54>
   33a0c:	mov	r0, #1
   33a10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33a14:	mov	r0, r6
   33a18:	bl	11988 <strlen@plt>
   33a1c:	add	r3, r5, #64	; 0x40
   33a20:	sub	r3, r3, r4
   33a24:	add	r8, r0, #1
   33a28:	cmp	r8, r3
   33a2c:	bge	339a4 <__assert_fail@plt+0x21e00>
   33a30:	mov	r1, r6
   33a34:	mov	r2, r8
   33a38:	mov	r0, r4
   33a3c:	bl	11784 <memcpy@plt>
   33a40:	mov	r3, #0
   33a44:	strb	r3, [r4, r8]
   33a48:	b	339f8 <__assert_fail@plt+0x21e54>
   33a4c:	mov	r0, r9
   33a50:	str	r9, [r5]
   33a54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33a58:	andeq	r9, r3, r4, lsr #27
   33a5c:	push	{r4, r5, r6, r7, r8, lr}
   33a60:	subs	r7, r0, #0
   33a64:	beq	33ac0 <__assert_fail@plt+0x21f1c>
   33a68:	bl	11988 <strlen@plt>
   33a6c:	add	r5, r0, #1
   33a70:	cmp	r5, #58	; 0x3a
   33a74:	addhi	r0, r0, #10
   33a78:	bichi	r0, r0, #3
   33a7c:	movls	r0, #64	; 0x40
   33a80:	bl	36944 <__assert_fail@plt+0x24da0>
   33a84:	subs	r4, r0, #0
   33a88:	beq	33ab8 <__assert_fail@plt+0x21f14>
   33a8c:	mov	r3, r4
   33a90:	mov	r6, #0
   33a94:	mov	r2, #1
   33a98:	strb	r2, [r4, #4]
   33a9c:	str	r6, [r4]
   33aa0:	mov	r1, r7
   33aa4:	strb	r6, [r3, #5]!
   33aa8:	mov	r2, r5
   33aac:	mov	r0, r3
   33ab0:	bl	11784 <memcpy@plt>
   33ab4:	strb	r6, [r0, r5]
   33ab8:	mov	r0, r4
   33abc:	pop	{r4, r5, r6, r7, r8, pc}
   33ac0:	mov	r0, #64	; 0x40
   33ac4:	bl	36944 <__assert_fail@plt+0x24da0>
   33ac8:	subs	r4, r0, #0
   33acc:	beq	33ab8 <__assert_fail@plt+0x21f14>
   33ad0:	str	r7, [r4]
   33ad4:	strb	r7, [r4, #4]
   33ad8:	strb	r7, [r4, #5]
   33adc:	mov	r0, r4
   33ae0:	pop	{r4, r5, r6, r7, r8, pc}
   33ae4:	cmp	r0, #1
   33ae8:	bxeq	lr
   33aec:	cmp	r0, #0
   33af0:	beq	33b0c <__assert_fail@plt+0x21f68>
   33af4:	push	{r4, lr}
   33af8:	ldr	r4, [r0]
   33afc:	bl	184ec <__assert_fail@plt+0x6948>
   33b00:	subs	r0, r4, #0
   33b04:	bne	33af8 <__assert_fail@plt+0x21f54>
   33b08:	pop	{r4, pc}
   33b0c:	bx	lr
   33b10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33b14:	subs	r8, r0, #0
   33b18:	mov	r5, r1
   33b1c:	mov	r6, r2
   33b20:	beq	33bf0 <__assert_fail@plt+0x2204c>
   33b24:	bl	337c8 <__assert_fail@plt+0x21c24>
   33b28:	subs	r4, r0, #0
   33b2c:	beq	33bd8 <__assert_fail@plt+0x22034>
   33b30:	mov	r0, r5
   33b34:	mov	r1, r6
   33b38:	bl	117fc <localtime_r@plt>
   33b3c:	subs	r7, r0, #0
   33b40:	beq	33bd0 <__assert_fail@plt+0x2202c>
   33b44:	mov	r0, r8
   33b48:	mov	r1, r6
   33b4c:	bl	33904 <__assert_fail@plt+0x21d60>
   33b50:	cmp	r4, #1
   33b54:	mov	r7, r0
   33b58:	beq	33bb4 <__assert_fail@plt+0x22010>
   33b5c:	bl	119b8 <__errno_location@plt>
   33b60:	ldrb	r3, [r4, #4]
   33b64:	cmp	r3, #0
   33b68:	mov	r8, r0
   33b6c:	ldr	r9, [r0]
   33b70:	beq	33be4 <__assert_fail@plt+0x22040>
   33b74:	mov	r2, #1
   33b78:	add	r1, r4, #5
   33b7c:	ldr	r0, [pc, #124]	; 33c00 <__assert_fail@plt+0x2205c>
   33b80:	bl	119a0 <setenv@plt>
   33b84:	cmp	r0, #0
   33b88:	beq	33bc4 <__assert_fail@plt+0x22020>
   33b8c:	ldr	r9, [r8]
   33b90:	mov	sl, #0
   33b94:	ldr	r5, [r4]
   33b98:	mov	r0, r4
   33b9c:	bl	184ec <__assert_fail@plt+0x6948>
   33ba0:	subs	r4, r5, #0
   33ba4:	bne	33b94 <__assert_fail@plt+0x21ff0>
   33ba8:	cmp	sl, #0
   33bac:	str	r9, [r8]
   33bb0:	beq	33bd8 <__assert_fail@plt+0x22034>
   33bb4:	cmp	r7, #0
   33bb8:	beq	33bd8 <__assert_fail@plt+0x22034>
   33bbc:	mov	r0, r6
   33bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33bc4:	bl	11844 <tzset@plt>
   33bc8:	mov	sl, #1
   33bcc:	b	33b94 <__assert_fail@plt+0x21ff0>
   33bd0:	cmp	r4, #1
   33bd4:	bne	33b5c <__assert_fail@plt+0x21fb8>
   33bd8:	mov	r6, #0
   33bdc:	mov	r0, r6
   33be0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33be4:	ldr	r0, [pc, #20]	; 33c00 <__assert_fail@plt+0x2205c>
   33be8:	bl	11b44 <unsetenv@plt>
   33bec:	b	33b84 <__assert_fail@plt+0x21fe0>
   33bf0:	mov	r0, r5
   33bf4:	mov	r1, r2
   33bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   33bfc:	b	116e8 <gmtime_r@plt>
   33c00:	andeq	r9, r3, ip, asr r6
   33c04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33c08:	subs	r5, r0, #0
   33c0c:	sub	sp, sp, #52	; 0x34
   33c10:	mov	r6, r1
   33c14:	beq	33d44 <__assert_fail@plt+0x221a0>
   33c18:	bl	337c8 <__assert_fail@plt+0x21c24>
   33c1c:	subs	r4, r0, #0
   33c20:	beq	33d5c <__assert_fail@plt+0x221b8>
   33c24:	ldm	r6, {r1, r2, ip}
   33c28:	ldr	r0, [r6, #12]
   33c2c:	ldr	r3, [r6, #16]
   33c30:	str	r1, [sp, #4]
   33c34:	str	r2, [sp, #8]
   33c38:	ldr	r1, [r6, #20]
   33c3c:	ldr	r2, [r6, #32]
   33c40:	str	r0, [sp, #16]
   33c44:	str	r3, [sp, #20]
   33c48:	add	r0, sp, #4
   33c4c:	mvn	r3, #0
   33c50:	str	r3, [sp, #32]
   33c54:	str	ip, [sp, #12]
   33c58:	str	r1, [sp, #24]
   33c5c:	str	r2, [sp, #36]	; 0x24
   33c60:	bl	11724 <mktime@plt>
   33c64:	ldr	r3, [sp, #32]
   33c68:	cmp	r3, #0
   33c6c:	mov	r8, r0
   33c70:	blt	33d10 <__assert_fail@plt+0x2216c>
   33c74:	mov	r0, r5
   33c78:	add	r1, sp, #4
   33c7c:	bl	33904 <__assert_fail@plt+0x21d60>
   33c80:	cmp	r4, #1
   33c84:	mov	sl, r0
   33c88:	beq	33cdc <__assert_fail@plt+0x22138>
   33c8c:	bl	119b8 <__errno_location@plt>
   33c90:	ldrb	r3, [r4, #4]
   33c94:	cmp	r3, #0
   33c98:	mov	r7, r0
   33c9c:	ldr	r9, [r0]
   33ca0:	bne	33d20 <__assert_fail@plt+0x2217c>
   33ca4:	ldr	r0, [pc, #184]	; 33d64 <__assert_fail@plt+0x221c0>
   33ca8:	bl	11b44 <unsetenv@plt>
   33cac:	cmp	r0, #0
   33cb0:	beq	33d38 <__assert_fail@plt+0x22194>
   33cb4:	ldr	r9, [r7]
   33cb8:	mov	fp, #0
   33cbc:	ldr	r5, [r4]
   33cc0:	mov	r0, r4
   33cc4:	bl	184ec <__assert_fail@plt+0x6948>
   33cc8:	subs	r4, r5, #0
   33ccc:	bne	33cbc <__assert_fail@plt+0x22118>
   33cd0:	cmp	fp, #0
   33cd4:	str	r9, [r7]
   33cd8:	beq	33d5c <__assert_fail@plt+0x221b8>
   33cdc:	cmp	sl, #0
   33ce0:	beq	33d5c <__assert_fail@plt+0x221b8>
   33ce4:	add	lr, sp, #4
   33ce8:	mov	ip, r6
   33cec:	ldm	lr!, {r0, r1, r2, r3}
   33cf0:	stmia	ip!, {r0, r1, r2, r3}
   33cf4:	ldm	lr!, {r0, r1, r2, r3}
   33cf8:	stmia	ip!, {r0, r1, r2, r3}
   33cfc:	ldm	lr, {r0, r1, r2}
   33d00:	stm	ip, {r0, r1, r2}
   33d04:	mov	r0, r8
   33d08:	add	sp, sp, #52	; 0x34
   33d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d10:	cmp	r4, #1
   33d14:	beq	33d5c <__assert_fail@plt+0x221b8>
   33d18:	mov	sl, #0
   33d1c:	b	33c8c <__assert_fail@plt+0x220e8>
   33d20:	mov	r2, #1
   33d24:	add	r1, r4, #5
   33d28:	ldr	r0, [pc, #52]	; 33d64 <__assert_fail@plt+0x221c0>
   33d2c:	bl	119a0 <setenv@plt>
   33d30:	cmp	r0, #0
   33d34:	bne	33cb4 <__assert_fail@plt+0x22110>
   33d38:	bl	11844 <tzset@plt>
   33d3c:	mov	fp, #1
   33d40:	b	33cbc <__assert_fail@plt+0x22118>
   33d44:	mov	r0, r1
   33d48:	bl	11acc <timegm@plt>
   33d4c:	mov	r8, r0
   33d50:	mov	r0, r8
   33d54:	add	sp, sp, #52	; 0x34
   33d58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33d5c:	mvn	r8, #0
   33d60:	b	33d04 <__assert_fail@plt+0x22160>
   33d64:	andeq	r9, r3, ip, asr r6
   33d68:	cmp	r0, #2
   33d6c:	push	{r4, r5, r6, r7, r8, lr}
   33d70:	mov	r4, r0
   33d74:	bhi	33d9c <__assert_fail@plt+0x221f8>
   33d78:	bl	378d8 <__assert_fail@plt+0x25d34>
   33d7c:	mov	r7, r0
   33d80:	bl	119b8 <__errno_location@plt>
   33d84:	mov	r5, r0
   33d88:	mov	r0, r4
   33d8c:	ldr	r6, [r5]
   33d90:	mov	r4, r7
   33d94:	bl	11b80 <close@plt>
   33d98:	str	r6, [r5]
   33d9c:	mov	r0, r4
   33da0:	pop	{r4, r5, r6, r7, r8, pc}
   33da4:	push	{r4, r5, r6, lr}
   33da8:	sub	sp, sp, #32
   33dac:	cmp	r1, #0
   33db0:	mov	r4, r0
   33db4:	ldr	r5, [sp, #48]	; 0x30
   33db8:	ldr	r6, [sp, #52]	; 0x34
   33dbc:	beq	340d4 <__assert_fail@plt+0x22530>
   33dc0:	stm	sp, {r2, r3}
   33dc4:	mov	r3, r1
   33dc8:	ldr	r2, [pc, #808]	; 340f8 <__assert_fail@plt+0x22554>
   33dcc:	mov	r1, #1
   33dd0:	bl	11a18 <__fprintf_chk@plt>
   33dd4:	mov	r2, #5
   33dd8:	ldr	r1, [pc, #796]	; 340fc <__assert_fail@plt+0x22558>
   33ddc:	mov	r0, #0
   33de0:	bl	117d8 <dcgettext@plt>
   33de4:	ldr	r3, [pc, #788]	; 34100 <__assert_fail@plt+0x2255c>
   33de8:	ldr	r2, [pc, #788]	; 34104 <__assert_fail@plt+0x22560>
   33dec:	str	r3, [sp]
   33df0:	mov	r1, #1
   33df4:	mov	r3, r0
   33df8:	mov	r0, r4
   33dfc:	bl	11a18 <__fprintf_chk@plt>
   33e00:	mov	r1, r4
   33e04:	mov	r0, #10
   33e08:	bl	117cc <fputc_unlocked@plt>
   33e0c:	mov	r2, #5
   33e10:	ldr	r1, [pc, #752]	; 34108 <__assert_fail@plt+0x22564>
   33e14:	mov	r0, #0
   33e18:	bl	117d8 <dcgettext@plt>
   33e1c:	mov	r1, #1
   33e20:	ldr	r3, [pc, #740]	; 3410c <__assert_fail@plt+0x22568>
   33e24:	mov	r2, r0
   33e28:	mov	r0, r4
   33e2c:	bl	11a18 <__fprintf_chk@plt>
   33e30:	mov	r1, r4
   33e34:	mov	r0, #10
   33e38:	bl	117cc <fputc_unlocked@plt>
   33e3c:	cmp	r6, #9
   33e40:	ldrls	pc, [pc, r6, lsl #2]
   33e44:	b	340ec <__assert_fail@plt+0x22548>
   33e48:	andeq	r3, r3, ip, asr #29
   33e4c:	ldrdeq	r3, [r3], -r4
   33e50:	andeq	r3, r3, r0, lsl #30
   33e54:	andeq	r3, r3, r4, lsr pc
   33e58:	andeq	r3, r3, r0, ror pc
   33e5c:	andeq	r3, r3, ip, lsr #31
   33e60:	andeq	r3, r3, r8, ror #31
   33e64:	andeq	r4, r3, ip, lsr #32
   33e68:	andeq	r4, r3, ip, ror r0
   33e6c:	andeq	r3, r3, r0, ror lr
   33e70:	ldr	r1, [pc, #664]	; 34110 <__assert_fail@plt+0x2256c>
   33e74:	mov	r2, #5
   33e78:	mov	r0, #0
   33e7c:	bl	117d8 <dcgettext@plt>
   33e80:	ldr	ip, [r5, #32]
   33e84:	ldr	r1, [r5, #28]
   33e88:	ldr	r2, [r5, #24]
   33e8c:	ldr	r3, [r5]
   33e90:	ldr	r6, [r5, #20]
   33e94:	str	ip, [sp, #28]
   33e98:	ldr	lr, [r5, #16]
   33e9c:	str	r1, [sp, #24]
   33ea0:	ldr	ip, [r5, #12]
   33ea4:	str	r2, [sp, #20]
   33ea8:	ldr	r1, [r5, #8]
   33eac:	ldr	r2, [r5, #4]
   33eb0:	str	r6, [sp, #16]
   33eb4:	stmib	sp, {r1, ip, lr}
   33eb8:	mov	r1, #1
   33ebc:	str	r2, [sp]
   33ec0:	mov	r2, r0
   33ec4:	mov	r0, r4
   33ec8:	bl	11a18 <__fprintf_chk@plt>
   33ecc:	add	sp, sp, #32
   33ed0:	pop	{r4, r5, r6, pc}
   33ed4:	mov	r2, #5
   33ed8:	ldr	r1, [pc, #564]	; 34114 <__assert_fail@plt+0x22570>
   33edc:	mov	r0, #0
   33ee0:	bl	117d8 <dcgettext@plt>
   33ee4:	ldr	r3, [r5]
   33ee8:	mov	r1, #1
   33eec:	mov	r2, r0
   33ef0:	mov	r0, r4
   33ef4:	add	sp, sp, #32
   33ef8:	pop	{r4, r5, r6, lr}
   33efc:	b	11a18 <__fprintf_chk@plt>
   33f00:	mov	r2, #5
   33f04:	ldr	r1, [pc, #524]	; 34118 <__assert_fail@plt+0x22574>
   33f08:	mov	r0, #0
   33f0c:	bl	117d8 <dcgettext@plt>
   33f10:	ldr	r2, [r5, #4]
   33f14:	ldr	r3, [r5]
   33f18:	mov	r1, #1
   33f1c:	str	r2, [sp, #48]	; 0x30
   33f20:	mov	r2, r0
   33f24:	mov	r0, r4
   33f28:	add	sp, sp, #32
   33f2c:	pop	{r4, r5, r6, lr}
   33f30:	b	11a18 <__fprintf_chk@plt>
   33f34:	mov	r2, #5
   33f38:	ldr	r1, [pc, #476]	; 3411c <__assert_fail@plt+0x22578>
   33f3c:	mov	r0, #0
   33f40:	bl	117d8 <dcgettext@plt>
   33f44:	ldr	r1, [r5, #8]
   33f48:	ldr	r2, [r5, #4]
   33f4c:	ldr	r3, [r5]
   33f50:	str	r1, [sp, #52]	; 0x34
   33f54:	str	r2, [sp, #48]	; 0x30
   33f58:	mov	r1, #1
   33f5c:	mov	r2, r0
   33f60:	mov	r0, r4
   33f64:	add	sp, sp, #32
   33f68:	pop	{r4, r5, r6, lr}
   33f6c:	b	11a18 <__fprintf_chk@plt>
   33f70:	mov	r2, #5
   33f74:	ldr	r1, [pc, #420]	; 34120 <__assert_fail@plt+0x2257c>
   33f78:	mov	r0, #0
   33f7c:	bl	117d8 <dcgettext@plt>
   33f80:	ldr	r1, [r5, #8]
   33f84:	ldr	ip, [r5, #12]
   33f88:	ldr	r2, [r5, #4]
   33f8c:	ldr	r3, [r5]
   33f90:	stmib	sp, {r1, ip}
   33f94:	str	r2, [sp]
   33f98:	mov	r1, #1
   33f9c:	mov	r2, r0
   33fa0:	mov	r0, r4
   33fa4:	bl	11a18 <__fprintf_chk@plt>
   33fa8:	b	33ecc <__assert_fail@plt+0x22328>
   33fac:	mov	r2, #5
   33fb0:	ldr	r1, [pc, #364]	; 34124 <__assert_fail@plt+0x22580>
   33fb4:	mov	r0, #0
   33fb8:	bl	117d8 <dcgettext@plt>
   33fbc:	add	r1, r5, #8
   33fc0:	ldr	r2, [r5, #4]
   33fc4:	ldm	r1, {r1, ip, lr}
   33fc8:	ldr	r3, [r5]
   33fcc:	str	r2, [sp]
   33fd0:	stmib	sp, {r1, ip, lr}
   33fd4:	mov	r1, #1
   33fd8:	mov	r2, r0
   33fdc:	mov	r0, r4
   33fe0:	bl	11a18 <__fprintf_chk@plt>
   33fe4:	b	33ecc <__assert_fail@plt+0x22328>
   33fe8:	mov	r2, #5
   33fec:	ldr	r1, [pc, #308]	; 34128 <__assert_fail@plt+0x22584>
   33ff0:	mov	r0, #0
   33ff4:	bl	117d8 <dcgettext@plt>
   33ff8:	add	r1, r5, #8
   33ffc:	ldr	r2, [r5, #4]
   34000:	ldm	r1, {r1, ip, lr}
   34004:	ldr	r6, [r5, #20]
   34008:	ldr	r3, [r5]
   3400c:	stmib	sp, {r1, ip, lr}
   34010:	mov	r1, #1
   34014:	str	r2, [sp]
   34018:	str	r6, [sp, #16]
   3401c:	mov	r2, r0
   34020:	mov	r0, r4
   34024:	bl	11a18 <__fprintf_chk@plt>
   34028:	b	33ecc <__assert_fail@plt+0x22328>
   3402c:	mov	r2, #5
   34030:	ldr	r1, [pc, #244]	; 3412c <__assert_fail@plt+0x22588>
   34034:	mov	r0, #0
   34038:	bl	117d8 <dcgettext@plt>
   3403c:	ldr	r2, [r5, #24]
   34040:	ldr	r3, [r5]
   34044:	ldr	r6, [r5, #20]
   34048:	ldr	lr, [r5, #16]
   3404c:	ldr	ip, [r5, #12]
   34050:	str	r2, [sp, #20]
   34054:	ldr	r1, [r5, #8]
   34058:	ldr	r2, [r5, #4]
   3405c:	str	r6, [sp, #16]
   34060:	stmib	sp, {r1, ip, lr}
   34064:	mov	r1, #1
   34068:	str	r2, [sp]
   3406c:	mov	r2, r0
   34070:	mov	r0, r4
   34074:	bl	11a18 <__fprintf_chk@plt>
   34078:	b	33ecc <__assert_fail@plt+0x22328>
   3407c:	mov	r2, #5
   34080:	ldr	r1, [pc, #168]	; 34130 <__assert_fail@plt+0x2258c>
   34084:	mov	r0, #0
   34088:	bl	117d8 <dcgettext@plt>
   3408c:	ldr	r1, [r5, #28]
   34090:	ldr	r2, [r5, #24]
   34094:	ldr	r3, [r5]
   34098:	ldr	r6, [r5, #20]
   3409c:	ldr	lr, [r5, #16]
   340a0:	str	r1, [sp, #24]
   340a4:	ldr	ip, [r5, #12]
   340a8:	str	r2, [sp, #20]
   340ac:	ldr	r1, [r5, #8]
   340b0:	ldr	r2, [r5, #4]
   340b4:	str	r6, [sp, #16]
   340b8:	stmib	sp, {r1, ip, lr}
   340bc:	mov	r1, #1
   340c0:	str	r2, [sp]
   340c4:	mov	r2, r0
   340c8:	mov	r0, r4
   340cc:	bl	11a18 <__fprintf_chk@plt>
   340d0:	b	33ecc <__assert_fail@plt+0x22328>
   340d4:	str	r3, [sp]
   340d8:	mov	r1, #1
   340dc:	mov	r3, r2
   340e0:	ldr	r2, [pc, #76]	; 34134 <__assert_fail@plt+0x22590>
   340e4:	bl	11a18 <__fprintf_chk@plt>
   340e8:	b	33dd4 <__assert_fail@plt+0x22230>
   340ec:	mov	r2, #5
   340f0:	ldr	r1, [pc, #64]	; 34138 <__assert_fail@plt+0x22594>
   340f4:	b	33e78 <__assert_fail@plt+0x222d4>
   340f8:	ldrdeq	sl, [r3], -ip
   340fc:	strdeq	sl, [r3], -r0
   34100:	andeq	r0, r0, r6, ror #15
   34104:	andeq	sl, r3, r8, asr #11
   34108:	strdeq	sl, [r3], -r4
   3410c:	andeq	sl, r3, r0, lsr #7
   34110:	ldrdeq	sl, [r3], -r0
   34114:	andeq	sl, r3, r4, asr #7
   34118:	ldrdeq	sl, [r3], -r4
   3411c:	andeq	sl, r3, ip, ror #7
   34120:	andeq	sl, r3, r8, lsl #8
   34124:	andeq	sl, r3, r8, lsr #8
   34128:	andeq	sl, r3, ip, asr #8
   3412c:	andeq	sl, r3, r4, ror r4
   34130:	andeq	sl, r3, r0, lsr #9
   34134:	andeq	sl, r3, r8, ror #5
   34138:	andeq	sl, r3, r4, lsl #10
   3413c:	push	{r4, r5, lr}
   34140:	sub	sp, sp, #12
   34144:	ldr	r5, [sp, #24]
   34148:	ldr	ip, [r5]
   3414c:	cmp	ip, #0
   34150:	beq	3416c <__assert_fail@plt+0x225c8>
   34154:	mov	lr, r5
   34158:	mov	ip, #0
   3415c:	ldr	r4, [lr, #4]!
   34160:	add	ip, ip, #1
   34164:	cmp	r4, #0
   34168:	bne	3415c <__assert_fail@plt+0x225b8>
   3416c:	stm	sp, {r5, ip}
   34170:	bl	33da4 <__assert_fail@plt+0x22200>
   34174:	add	sp, sp, #12
   34178:	pop	{r4, r5, pc}
   3417c:	push	{r4, r5, lr}
   34180:	sub	sp, sp, #76	; 0x4c
   34184:	mov	r5, r0
   34188:	ldr	ip, [sp, #88]	; 0x58
   3418c:	ldr	r0, [ip]
   34190:	cmp	r0, #0
   34194:	str	r0, [sp, #32]
   34198:	beq	3456c <__assert_fail@plt+0x229c8>
   3419c:	ldr	r0, [ip, #4]
   341a0:	cmp	r0, #0
   341a4:	str	r0, [sp, #36]	; 0x24
   341a8:	beq	34574 <__assert_fail@plt+0x229d0>
   341ac:	ldr	r0, [ip, #8]
   341b0:	cmp	r0, #0
   341b4:	str	r0, [sp, #40]	; 0x28
   341b8:	beq	3457c <__assert_fail@plt+0x229d8>
   341bc:	ldr	r0, [ip, #12]
   341c0:	cmp	r0, #0
   341c4:	str	r0, [sp, #44]	; 0x2c
   341c8:	beq	34584 <__assert_fail@plt+0x229e0>
   341cc:	ldr	r0, [ip, #16]
   341d0:	cmp	r0, #0
   341d4:	str	r0, [sp, #48]	; 0x30
   341d8:	beq	3458c <__assert_fail@plt+0x229e8>
   341dc:	ldr	r0, [ip, #20]
   341e0:	cmp	r0, #0
   341e4:	str	r0, [sp, #52]	; 0x34
   341e8:	beq	34594 <__assert_fail@plt+0x229f0>
   341ec:	ldr	r0, [ip, #24]
   341f0:	cmp	r0, #0
   341f4:	str	r0, [sp, #56]	; 0x38
   341f8:	beq	3459c <__assert_fail@plt+0x229f8>
   341fc:	ldr	r0, [ip, #28]
   34200:	cmp	r0, #0
   34204:	str	r0, [sp, #60]	; 0x3c
   34208:	beq	345a4 <__assert_fail@plt+0x22a00>
   3420c:	ldr	r0, [ip, #32]
   34210:	cmp	r0, #0
   34214:	str	r0, [sp, #64]	; 0x40
   34218:	beq	345ac <__assert_fail@plt+0x22a08>
   3421c:	ldr	r0, [ip, #36]	; 0x24
   34220:	cmp	r0, #0
   34224:	movne	r4, #10
   34228:	moveq	r4, #9
   3422c:	cmp	r1, #0
   34230:	beq	34544 <__assert_fail@plt+0x229a0>
   34234:	stm	sp, {r2, r3}
   34238:	mov	r0, r5
   3423c:	mov	r3, r1
   34240:	ldr	r2, [pc, #876]	; 345b4 <__assert_fail@plt+0x22a10>
   34244:	mov	r1, #1
   34248:	bl	11a18 <__fprintf_chk@plt>
   3424c:	mov	r2, #5
   34250:	ldr	r1, [pc, #864]	; 345b8 <__assert_fail@plt+0x22a14>
   34254:	mov	r0, #0
   34258:	bl	117d8 <dcgettext@plt>
   3425c:	ldr	r3, [pc, #856]	; 345bc <__assert_fail@plt+0x22a18>
   34260:	ldr	r2, [pc, #856]	; 345c0 <__assert_fail@plt+0x22a1c>
   34264:	str	r3, [sp]
   34268:	mov	r1, #1
   3426c:	mov	r3, r0
   34270:	mov	r0, r5
   34274:	bl	11a18 <__fprintf_chk@plt>
   34278:	mov	r1, r5
   3427c:	mov	r0, #10
   34280:	bl	117cc <fputc_unlocked@plt>
   34284:	mov	r2, #5
   34288:	ldr	r1, [pc, #820]	; 345c4 <__assert_fail@plt+0x22a20>
   3428c:	mov	r0, #0
   34290:	bl	117d8 <dcgettext@plt>
   34294:	mov	r1, #1
   34298:	ldr	r3, [pc, #808]	; 345c8 <__assert_fail@plt+0x22a24>
   3429c:	mov	r2, r0
   342a0:	mov	r0, r5
   342a4:	bl	11a18 <__fprintf_chk@plt>
   342a8:	mov	r1, r5
   342ac:	mov	r0, #10
   342b0:	bl	117cc <fputc_unlocked@plt>
   342b4:	cmp	r4, #9
   342b8:	ldrls	pc, [pc, r4, lsl #2]
   342bc:	b	34560 <__assert_fail@plt+0x229bc>
   342c0:	andeq	r4, r3, r4, asr #6
   342c4:	andeq	r4, r3, ip, asr #6
   342c8:	andeq	r4, r3, r8, ror r3
   342cc:	andeq	r4, r3, ip, lsr #7
   342d0:	andeq	r4, r3, r4, ror #7
   342d4:	andeq	r4, r3, r0, lsr #8
   342d8:	andeq	r4, r3, ip, asr r4
   342dc:	andeq	r4, r3, r0, lsr #9
   342e0:	andeq	r4, r3, ip, ror #9
   342e4:	andeq	r4, r3, r8, ror #5
   342e8:	ldr	r1, [pc, #732]	; 345cc <__assert_fail@plt+0x22a28>
   342ec:	mov	r2, #5
   342f0:	mov	r0, #0
   342f4:	bl	117d8 <dcgettext@plt>
   342f8:	ldr	ip, [sp, #64]	; 0x40
   342fc:	ldr	r1, [sp, #60]	; 0x3c
   34300:	ldr	r2, [sp, #56]	; 0x38
   34304:	ldr	lr, [sp, #48]	; 0x30
   34308:	str	ip, [sp, #28]
   3430c:	str	r1, [sp, #24]
   34310:	ldr	ip, [sp, #44]	; 0x2c
   34314:	ldr	r1, [sp, #40]	; 0x28
   34318:	ldr	r4, [sp, #52]	; 0x34
   3431c:	str	r2, [sp, #20]
   34320:	ldr	r2, [sp, #36]	; 0x24
   34324:	stmib	sp, {r1, ip, lr}
   34328:	mov	r1, #1
   3432c:	str	r2, [sp]
   34330:	ldr	r3, [sp, #32]
   34334:	str	r4, [sp, #16]
   34338:	mov	r2, r0
   3433c:	mov	r0, r5
   34340:	bl	11a18 <__fprintf_chk@plt>
   34344:	add	sp, sp, #76	; 0x4c
   34348:	pop	{r4, r5, pc}
   3434c:	mov	r2, #5
   34350:	ldr	r1, [pc, #632]	; 345d0 <__assert_fail@plt+0x22a2c>
   34354:	mov	r0, #0
   34358:	bl	117d8 <dcgettext@plt>
   3435c:	ldr	r3, [sp, #32]
   34360:	mov	r1, #1
   34364:	mov	r2, r0
   34368:	mov	r0, r5
   3436c:	add	sp, sp, #76	; 0x4c
   34370:	pop	{r4, r5, lr}
   34374:	b	11a18 <__fprintf_chk@plt>
   34378:	mov	r2, #5
   3437c:	ldr	r1, [pc, #592]	; 345d4 <__assert_fail@plt+0x22a30>
   34380:	mov	r0, #0
   34384:	bl	117d8 <dcgettext@plt>
   34388:	ldr	r2, [sp, #36]	; 0x24
   3438c:	ldr	r3, [sp, #32]
   34390:	str	r2, [sp, #88]	; 0x58
   34394:	mov	r1, #1
   34398:	mov	r2, r0
   3439c:	mov	r0, r5
   343a0:	add	sp, sp, #76	; 0x4c
   343a4:	pop	{r4, r5, lr}
   343a8:	b	11a18 <__fprintf_chk@plt>
   343ac:	mov	r2, #5
   343b0:	ldr	r1, [pc, #544]	; 345d8 <__assert_fail@plt+0x22a34>
   343b4:	mov	r0, #0
   343b8:	bl	117d8 <dcgettext@plt>
   343bc:	ldr	r1, [sp, #40]	; 0x28
   343c0:	ldr	r2, [sp, #36]	; 0x24
   343c4:	str	r1, [sp, #4]
   343c8:	str	r2, [sp]
   343cc:	ldr	r3, [sp, #32]
   343d0:	mov	r1, #1
   343d4:	mov	r2, r0
   343d8:	mov	r0, r5
   343dc:	bl	11a18 <__fprintf_chk@plt>
   343e0:	b	34344 <__assert_fail@plt+0x227a0>
   343e4:	mov	r2, #5
   343e8:	ldr	r1, [pc, #492]	; 345dc <__assert_fail@plt+0x22a38>
   343ec:	mov	r0, #0
   343f0:	bl	117d8 <dcgettext@plt>
   343f4:	ldr	r1, [sp, #40]	; 0x28
   343f8:	ldr	ip, [sp, #44]	; 0x2c
   343fc:	ldr	r2, [sp, #36]	; 0x24
   34400:	ldr	r3, [sp, #32]
   34404:	stmib	sp, {r1, ip}
   34408:	str	r2, [sp]
   3440c:	mov	r1, #1
   34410:	mov	r2, r0
   34414:	mov	r0, r5
   34418:	bl	11a18 <__fprintf_chk@plt>
   3441c:	b	34344 <__assert_fail@plt+0x227a0>
   34420:	mov	r2, #5
   34424:	ldr	r1, [pc, #436]	; 345e0 <__assert_fail@plt+0x22a3c>
   34428:	mov	r0, #0
   3442c:	bl	117d8 <dcgettext@plt>
   34430:	add	r1, sp, #40	; 0x28
   34434:	ldr	r2, [sp, #36]	; 0x24
   34438:	ldm	r1, {r1, ip, lr}
   3443c:	ldr	r3, [sp, #32]
   34440:	str	r2, [sp]
   34444:	stmib	sp, {r1, ip, lr}
   34448:	mov	r1, #1
   3444c:	mov	r2, r0
   34450:	mov	r0, r5
   34454:	bl	11a18 <__fprintf_chk@plt>
   34458:	b	34344 <__assert_fail@plt+0x227a0>
   3445c:	mov	r2, #5
   34460:	ldr	r1, [pc, #380]	; 345e4 <__assert_fail@plt+0x22a40>
   34464:	mov	r0, #0
   34468:	bl	117d8 <dcgettext@plt>
   3446c:	add	r1, sp, #40	; 0x28
   34470:	ldr	r2, [sp, #36]	; 0x24
   34474:	ldm	r1, {r1, ip, lr}
   34478:	ldr	r4, [sp, #52]	; 0x34
   3447c:	str	r2, [sp]
   34480:	stmib	sp, {r1, ip, lr}
   34484:	mov	r1, #1
   34488:	ldr	r3, [sp, #32]
   3448c:	str	r4, [sp, #16]
   34490:	mov	r2, r0
   34494:	mov	r0, r5
   34498:	bl	11a18 <__fprintf_chk@plt>
   3449c:	b	34344 <__assert_fail@plt+0x227a0>
   344a0:	mov	r2, #5
   344a4:	ldr	r1, [pc, #316]	; 345e8 <__assert_fail@plt+0x22a44>
   344a8:	mov	r0, #0
   344ac:	bl	117d8 <dcgettext@plt>
   344b0:	add	r1, sp, #40	; 0x28
   344b4:	ldr	r2, [sp, #56]	; 0x38
   344b8:	ldm	r1, {r1, ip, lr}
   344bc:	ldr	r4, [sp, #52]	; 0x34
   344c0:	str	r2, [sp, #20]
   344c4:	ldr	r2, [sp, #36]	; 0x24
   344c8:	stmib	sp, {r1, ip, lr}
   344cc:	mov	r1, #1
   344d0:	str	r2, [sp]
   344d4:	ldr	r3, [sp, #32]
   344d8:	str	r4, [sp, #16]
   344dc:	mov	r2, r0
   344e0:	mov	r0, r5
   344e4:	bl	11a18 <__fprintf_chk@plt>
   344e8:	b	34344 <__assert_fail@plt+0x227a0>
   344ec:	mov	r2, #5
   344f0:	ldr	r1, [pc, #244]	; 345ec <__assert_fail@plt+0x22a48>
   344f4:	mov	r0, #0
   344f8:	bl	117d8 <dcgettext@plt>
   344fc:	ldr	r1, [sp, #60]	; 0x3c
   34500:	ldr	r2, [sp, #56]	; 0x38
   34504:	ldr	lr, [sp, #48]	; 0x30
   34508:	ldr	ip, [sp, #44]	; 0x2c
   3450c:	str	r1, [sp, #24]
   34510:	ldr	r1, [sp, #40]	; 0x28
   34514:	ldr	r4, [sp, #52]	; 0x34
   34518:	str	r2, [sp, #20]
   3451c:	ldr	r2, [sp, #36]	; 0x24
   34520:	stmib	sp, {r1, ip, lr}
   34524:	mov	r1, #1
   34528:	str	r2, [sp]
   3452c:	ldr	r3, [sp, #32]
   34530:	str	r4, [sp, #16]
   34534:	mov	r2, r0
   34538:	mov	r0, r5
   3453c:	bl	11a18 <__fprintf_chk@plt>
   34540:	b	34344 <__assert_fail@plt+0x227a0>
   34544:	str	r3, [sp]
   34548:	mov	r1, #1
   3454c:	mov	r3, r2
   34550:	mov	r0, r5
   34554:	ldr	r2, [pc, #148]	; 345f0 <__assert_fail@plt+0x22a4c>
   34558:	bl	11a18 <__fprintf_chk@plt>
   3455c:	b	3424c <__assert_fail@plt+0x226a8>
   34560:	mov	r2, #5
   34564:	ldr	r1, [pc, #136]	; 345f4 <__assert_fail@plt+0x22a50>
   34568:	b	342f0 <__assert_fail@plt+0x2274c>
   3456c:	mov	r4, r0
   34570:	b	3422c <__assert_fail@plt+0x22688>
   34574:	mov	r4, #1
   34578:	b	3422c <__assert_fail@plt+0x22688>
   3457c:	mov	r4, #2
   34580:	b	3422c <__assert_fail@plt+0x22688>
   34584:	mov	r4, #3
   34588:	b	3422c <__assert_fail@plt+0x22688>
   3458c:	mov	r4, #4
   34590:	b	3422c <__assert_fail@plt+0x22688>
   34594:	mov	r4, #5
   34598:	b	3422c <__assert_fail@plt+0x22688>
   3459c:	mov	r4, #6
   345a0:	b	3422c <__assert_fail@plt+0x22688>
   345a4:	mov	r4, #7
   345a8:	b	3422c <__assert_fail@plt+0x22688>
   345ac:	mov	r4, #8
   345b0:	b	3422c <__assert_fail@plt+0x22688>
   345b4:	ldrdeq	sl, [r3], -ip
   345b8:	strdeq	sl, [r3], -r0
   345bc:	andeq	r0, r0, r6, ror #15
   345c0:	andeq	sl, r3, r8, asr #11
   345c4:	strdeq	sl, [r3], -r4
   345c8:	andeq	sl, r3, r0, lsr #7
   345cc:	ldrdeq	sl, [r3], -r0
   345d0:	andeq	sl, r3, r4, asr #7
   345d4:	ldrdeq	sl, [r3], -r4
   345d8:	andeq	sl, r3, ip, ror #7
   345dc:	andeq	sl, r3, r8, lsl #8
   345e0:	andeq	sl, r3, r8, lsr #8
   345e4:	andeq	sl, r3, ip, asr #8
   345e8:	andeq	sl, r3, r4, ror r4
   345ec:	andeq	sl, r3, r0, lsr #9
   345f0:	andeq	sl, r3, r8, ror #5
   345f4:	andeq	sl, r3, r4, lsl #10
   345f8:	push	{r3}		; (str r3, [sp, #-4]!)
   345fc:	push	{lr}		; (str lr, [sp, #-4]!)
   34600:	sub	sp, sp, #56	; 0x38
   34604:	add	r3, sp, #64	; 0x40
   34608:	ldr	ip, [sp, #64]	; 0x40
   3460c:	str	r3, [sp, #12]
   34610:	cmp	ip, #0
   34614:	str	ip, [sp, #16]
   34618:	beq	346b0 <__assert_fail@plt+0x22b0c>
   3461c:	ldr	ip, [sp, #68]	; 0x44
   34620:	cmp	ip, #0
   34624:	str	ip, [sp, #20]
   34628:	beq	346d0 <__assert_fail@plt+0x22b2c>
   3462c:	ldr	ip, [sp, #72]	; 0x48
   34630:	cmp	ip, #0
   34634:	str	ip, [sp, #24]
   34638:	beq	346d8 <__assert_fail@plt+0x22b34>
   3463c:	ldr	ip, [sp, #76]	; 0x4c
   34640:	cmp	ip, #0
   34644:	str	ip, [sp, #28]
   34648:	beq	346e0 <__assert_fail@plt+0x22b3c>
   3464c:	ldr	ip, [sp, #80]	; 0x50
   34650:	cmp	ip, #0
   34654:	str	ip, [sp, #32]
   34658:	beq	346e8 <__assert_fail@plt+0x22b44>
   3465c:	ldr	ip, [sp, #84]	; 0x54
   34660:	cmp	ip, #0
   34664:	str	ip, [sp, #36]	; 0x24
   34668:	beq	346f0 <__assert_fail@plt+0x22b4c>
   3466c:	ldr	ip, [sp, #88]	; 0x58
   34670:	cmp	ip, #0
   34674:	str	ip, [sp, #40]	; 0x28
   34678:	beq	346f8 <__assert_fail@plt+0x22b54>
   3467c:	ldr	ip, [sp, #92]	; 0x5c
   34680:	cmp	ip, #0
   34684:	str	ip, [sp, #44]	; 0x2c
   34688:	beq	34700 <__assert_fail@plt+0x22b5c>
   3468c:	ldr	ip, [sp, #96]	; 0x60
   34690:	cmp	ip, #0
   34694:	str	ip, [sp, #48]	; 0x30
   34698:	beq	34708 <__assert_fail@plt+0x22b64>
   3469c:	ldr	ip, [sp, #100]	; 0x64
   346a0:	cmp	ip, #0
   346a4:	str	ip, [sp, #52]	; 0x34
   346a8:	movne	ip, #10
   346ac:	moveq	ip, #9
   346b0:	add	r3, sp, #16
   346b4:	stm	sp, {r3, ip}
   346b8:	ldr	r3, [sp, #60]	; 0x3c
   346bc:	bl	33da4 <__assert_fail@plt+0x22200>
   346c0:	add	sp, sp, #56	; 0x38
   346c4:	pop	{lr}		; (ldr lr, [sp], #4)
   346c8:	add	sp, sp, #4
   346cc:	bx	lr
   346d0:	mov	ip, #1
   346d4:	b	346b0 <__assert_fail@plt+0x22b0c>
   346d8:	mov	ip, #2
   346dc:	b	346b0 <__assert_fail@plt+0x22b0c>
   346e0:	mov	ip, #3
   346e4:	b	346b0 <__assert_fail@plt+0x22b0c>
   346e8:	mov	ip, #4
   346ec:	b	346b0 <__assert_fail@plt+0x22b0c>
   346f0:	mov	ip, #5
   346f4:	b	346b0 <__assert_fail@plt+0x22b0c>
   346f8:	mov	ip, #6
   346fc:	b	346b0 <__assert_fail@plt+0x22b0c>
   34700:	mov	ip, #7
   34704:	b	346b0 <__assert_fail@plt+0x22b0c>
   34708:	mov	ip, #8
   3470c:	b	346b0 <__assert_fail@plt+0x22b0c>
   34710:	ldr	r3, [pc, #116]	; 3478c <__assert_fail@plt+0x22be8>
   34714:	push	{r4, lr}
   34718:	mov	r0, #10
   3471c:	ldr	r1, [r3]
   34720:	bl	117cc <fputc_unlocked@plt>
   34724:	mov	r2, #5
   34728:	ldr	r1, [pc, #96]	; 34790 <__assert_fail@plt+0x22bec>
   3472c:	mov	r0, #0
   34730:	bl	117d8 <dcgettext@plt>
   34734:	ldr	r2, [pc, #88]	; 34794 <__assert_fail@plt+0x22bf0>
   34738:	mov	r1, r0
   3473c:	mov	r0, #1
   34740:	bl	11a00 <__printf_chk@plt>
   34744:	mov	r2, #5
   34748:	ldr	r1, [pc, #72]	; 34798 <__assert_fail@plt+0x22bf4>
   3474c:	mov	r0, #0
   34750:	bl	117d8 <dcgettext@plt>
   34754:	ldr	r3, [pc, #64]	; 3479c <__assert_fail@plt+0x22bf8>
   34758:	ldr	r2, [pc, #64]	; 347a0 <__assert_fail@plt+0x22bfc>
   3475c:	mov	r1, r0
   34760:	mov	r0, #1
   34764:	bl	11a00 <__printf_chk@plt>
   34768:	mov	r2, #5
   3476c:	ldr	r1, [pc, #48]	; 347a4 <__assert_fail@plt+0x22c00>
   34770:	mov	r0, #0
   34774:	bl	117d8 <dcgettext@plt>
   34778:	ldr	r2, [pc, #40]	; 347a8 <__assert_fail@plt+0x22c04>
   3477c:	pop	{r4, lr}
   34780:	mov	r1, r0
   34784:	mov	r0, #1
   34788:	b	11a00 <__printf_chk@plt>
   3478c:	andeq	fp, r4, ip, lsr r2
   34790:	andeq	sl, r3, r0, asr #10
   34794:	andeq	sl, r3, r4, asr r5
   34798:	andeq	sl, r3, ip, ror #10
   3479c:	andeq	r9, r3, r4, ror #9
   347a0:	andeq	r9, r3, ip, lsl #10
   347a4:	andeq	sl, r3, r0, lsl #11
   347a8:	andeq	sl, r3, r8, lsr #11
   347ac:	push	{r4, r5, r6, lr}
   347b0:	mov	r6, r0
   347b4:	mov	r5, r1
   347b8:	mov	r4, r2
   347bc:	bl	377f4 <__assert_fail@plt+0x25c50>
   347c0:	cmp	r0, #0
   347c4:	popne	{r4, r5, r6, pc}
   347c8:	cmp	r6, #0
   347cc:	beq	347dc <__assert_fail@plt+0x22c38>
   347d0:	cmp	r5, #0
   347d4:	cmpne	r4, #0
   347d8:	popeq	{r4, r5, r6, pc}
   347dc:	bl	34e28 <__assert_fail@plt+0x23284>
   347e0:	push	{r4, lr}
   347e4:	bl	36944 <__assert_fail@plt+0x24da0>
   347e8:	cmp	r0, #0
   347ec:	popne	{r4, pc}
   347f0:	bl	34e28 <__assert_fail@plt+0x23284>
   347f4:	push	{r4, lr}
   347f8:	bl	36944 <__assert_fail@plt+0x24da0>
   347fc:	cmp	r0, #0
   34800:	popne	{r4, pc}
   34804:	bl	34e28 <__assert_fail@plt+0x23284>
   34808:	push	{r4, lr}
   3480c:	bl	36944 <__assert_fail@plt+0x24da0>
   34810:	cmp	r0, #0
   34814:	popne	{r4, pc}
   34818:	bl	34e28 <__assert_fail@plt+0x23284>
   3481c:	push	{r4, r5, r6, lr}
   34820:	mov	r5, r0
   34824:	mov	r4, r1
   34828:	bl	36970 <__assert_fail@plt+0x24dcc>
   3482c:	cmp	r0, #0
   34830:	popne	{r4, r5, r6, pc}
   34834:	adds	r4, r4, #0
   34838:	movne	r4, #1
   3483c:	cmp	r5, #0
   34840:	orreq	r4, r4, #1
   34844:	cmp	r4, #0
   34848:	popeq	{r4, r5, r6, pc}
   3484c:	bl	34e28 <__assert_fail@plt+0x23284>
   34850:	push	{r4, lr}
   34854:	cmp	r1, #0
   34858:	orreq	r1, r1, #1
   3485c:	bl	36970 <__assert_fail@plt+0x24dcc>
   34860:	cmp	r0, #0
   34864:	popne	{r4, pc}
   34868:	bl	34e28 <__assert_fail@plt+0x23284>
   3486c:	push	{r4, r5, r6, lr}
   34870:	mov	r6, r0
   34874:	mov	r5, r1
   34878:	mov	r4, r2
   3487c:	bl	377f4 <__assert_fail@plt+0x25c50>
   34880:	cmp	r0, #0
   34884:	popne	{r4, r5, r6, pc}
   34888:	cmp	r6, #0
   3488c:	beq	3489c <__assert_fail@plt+0x22cf8>
   34890:	cmp	r5, #0
   34894:	cmpne	r4, #0
   34898:	popeq	{r4, r5, r6, pc}
   3489c:	bl	34e28 <__assert_fail@plt+0x23284>
   348a0:	cmp	r2, #0
   348a4:	cmpne	r1, #0
   348a8:	moveq	r2, #1
   348ac:	moveq	r1, r2
   348b0:	push	{r4, lr}
   348b4:	bl	377f4 <__assert_fail@plt+0x25c50>
   348b8:	cmp	r0, #0
   348bc:	popne	{r4, pc}
   348c0:	bl	34e28 <__assert_fail@plt+0x23284>
   348c4:	push	{r4, lr}
   348c8:	mov	r2, r1
   348cc:	mov	r1, r0
   348d0:	mov	r0, #0
   348d4:	bl	377f4 <__assert_fail@plt+0x25c50>
   348d8:	cmp	r0, #0
   348dc:	popne	{r4, pc}
   348e0:	bl	34e28 <__assert_fail@plt+0x23284>
   348e4:	cmp	r1, #0
   348e8:	cmpne	r0, #0
   348ec:	moveq	r2, #1
   348f0:	movne	r2, r1
   348f4:	moveq	r1, r2
   348f8:	movne	r1, r0
   348fc:	push	{r4, lr}
   34900:	mov	r0, #0
   34904:	bl	377f4 <__assert_fail@plt+0x25c50>
   34908:	cmp	r0, #0
   3490c:	popne	{r4, pc}
   34910:	bl	34e28 <__assert_fail@plt+0x23284>
   34914:	cmp	r0, #0
   34918:	push	{r4, r5, r6, lr}
   3491c:	mov	r5, r1
   34920:	ldr	r4, [r1]
   34924:	beq	34960 <__assert_fail@plt+0x22dbc>
   34928:	lsr	r2, r4, #1
   3492c:	add	r3, r2, #1
   34930:	mvn	r3, r3
   34934:	cmp	r4, r3
   34938:	bhi	3497c <__assert_fail@plt+0x22dd8>
   3493c:	add	r4, r4, #1
   34940:	add	r4, r4, r2
   34944:	mov	r1, r4
   34948:	mov	r2, #1
   3494c:	bl	377f4 <__assert_fail@plt+0x25c50>
   34950:	cmp	r0, #0
   34954:	beq	34980 <__assert_fail@plt+0x22ddc>
   34958:	str	r4, [r5]
   3495c:	pop	{r4, r5, r6, pc}
   34960:	cmp	r4, #0
   34964:	moveq	r4, #64	; 0x40
   34968:	mov	r1, r4
   3496c:	mov	r2, #1
   34970:	bl	377f4 <__assert_fail@plt+0x25c50>
   34974:	cmp	r0, #0
   34978:	bne	34958 <__assert_fail@plt+0x22db4>
   3497c:	bl	34e28 <__assert_fail@plt+0x23284>
   34980:	cmp	r4, #0
   34984:	bne	3497c <__assert_fail@plt+0x22dd8>
   34988:	str	r4, [r5]
   3498c:	pop	{r4, r5, r6, pc}
   34990:	cmp	r0, #0
   34994:	push	{r4, r5, r6, lr}
   34998:	mov	r5, r1
   3499c:	ldr	r4, [r1]
   349a0:	mov	r6, r2
   349a4:	beq	349e8 <__assert_fail@plt+0x22e44>
   349a8:	lsr	r1, r4, #1
   349ac:	add	r3, r1, #1
   349b0:	mvn	r3, r3
   349b4:	cmp	r4, r3
   349b8:	bhi	34a20 <__assert_fail@plt+0x22e7c>
   349bc:	add	r4, r4, #1
   349c0:	add	r4, r4, r1
   349c4:	mov	r1, r4
   349c8:	bl	377f4 <__assert_fail@plt+0x25c50>
   349cc:	cmp	r0, #0
   349d0:	bne	349e0 <__assert_fail@plt+0x22e3c>
   349d4:	cmp	r4, #0
   349d8:	cmpne	r6, #0
   349dc:	bne	34a20 <__assert_fail@plt+0x22e7c>
   349e0:	str	r4, [r5]
   349e4:	pop	{r4, r5, r6, pc}
   349e8:	cmp	r4, #0
   349ec:	bne	34a08 <__assert_fail@plt+0x22e64>
   349f0:	mov	r1, r2
   349f4:	mov	r0, #64	; 0x40
   349f8:	bl	378e4 <__assert_fail@plt+0x25d40>
   349fc:	cmp	r0, #0
   34a00:	movne	r4, r0
   34a04:	addeq	r4, r0, #1
   34a08:	mov	r2, r6
   34a0c:	mov	r1, r4
   34a10:	mov	r0, #0
   34a14:	bl	377f4 <__assert_fail@plt+0x25c50>
   34a18:	cmp	r0, #0
   34a1c:	bne	349e0 <__assert_fail@plt+0x22e3c>
   34a20:	bl	34e28 <__assert_fail@plt+0x23284>
   34a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34a28:	sub	sp, sp, #12
   34a2c:	ldr	r6, [r1]
   34a30:	mov	r8, r1
   34a34:	mov	r9, r0
   34a38:	asrs	r4, r6, #1
   34a3c:	mov	sl, r2
   34a40:	mov	fp, r3
   34a44:	ldr	r7, [sp, #48]	; 0x30
   34a48:	bmi	34bc4 <__assert_fail@plt+0x23020>
   34a4c:	mvn	r1, #-2147483648	; 0x80000000
   34a50:	sub	r1, r1, r4
   34a54:	cmp	r6, r1
   34a58:	movle	r1, #0
   34a5c:	movgt	r1, #1
   34a60:	mvn	r3, fp
   34a64:	cmp	r1, #0
   34a68:	addeq	r4, r4, r6
   34a6c:	mvnne	r4, #-2147483648	; 0x80000000
   34a70:	lsr	r3, r3, #31
   34a74:	cmp	fp, r4
   34a78:	movge	r2, #0
   34a7c:	andlt	r2, r3, #1
   34a80:	cmp	r2, #0
   34a84:	beq	34b74 <__assert_fail@plt+0x22fd0>
   34a88:	cmp	r7, #0
   34a8c:	blt	34c5c <__assert_fail@plt+0x230b8>
   34a90:	bne	34c54 <__assert_fail@plt+0x230b0>
   34a94:	mov	r5, #64	; 0x40
   34a98:	mov	r1, r7
   34a9c:	mov	r0, r5
   34aa0:	str	r3, [sp, #4]
   34aa4:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34aa8:	mov	r1, r7
   34aac:	mov	r4, r0
   34ab0:	mov	r0, r5
   34ab4:	bl	37d10 <__assert_fail@plt+0x2616c>
   34ab8:	ldr	r3, [sp, #4]
   34abc:	sub	r5, r5, r1
   34ac0:	cmp	r9, #0
   34ac4:	sub	r2, r4, r6
   34ac8:	streq	r9, [r8]
   34acc:	cmp	r2, sl
   34ad0:	bge	34b54 <__assert_fail@plt+0x22fb0>
   34ad4:	cmp	sl, #0
   34ad8:	blt	34bf4 <__assert_fail@plt+0x23050>
   34adc:	cmp	r6, #0
   34ae0:	blt	34b00 <__assert_fail@plt+0x22f5c>
   34ae4:	mvn	r2, #-2147483648	; 0x80000000
   34ae8:	sub	r2, r2, sl
   34aec:	cmp	r6, r2
   34af0:	movle	r2, #0
   34af4:	movgt	r2, #1
   34af8:	cmp	r2, #0
   34afc:	bne	34bf0 <__assert_fail@plt+0x2304c>
   34b00:	add	r6, r6, sl
   34b04:	cmp	fp, r6
   34b08:	movge	r3, #0
   34b0c:	andlt	r3, r3, #1
   34b10:	cmp	r3, #0
   34b14:	mov	r4, r6
   34b18:	bne	34bf0 <__assert_fail@plt+0x2304c>
   34b1c:	cmp	r7, #0
   34b20:	blt	34c08 <__assert_fail@plt+0x23064>
   34b24:	beq	34b50 <__assert_fail@plt+0x22fac>
   34b28:	cmp	r6, #0
   34b2c:	blt	34cac <__assert_fail@plt+0x23108>
   34b30:	mov	r1, r7
   34b34:	mvn	r0, #-2147483648	; 0x80000000
   34b38:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34b3c:	cmp	r6, r0
   34b40:	movle	r0, #0
   34b44:	movgt	r0, #1
   34b48:	cmp	r0, #0
   34b4c:	bne	34bf0 <__assert_fail@plt+0x2304c>
   34b50:	mul	r5, r6, r7
   34b54:	mov	r1, r5
   34b58:	mov	r0, r9
   34b5c:	bl	36970 <__assert_fail@plt+0x24dcc>
   34b60:	cmp	r0, #0
   34b64:	beq	34bd8 <__assert_fail@plt+0x23034>
   34b68:	str	r4, [r8]
   34b6c:	add	sp, sp, #12
   34b70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34b74:	cmp	r7, #0
   34b78:	blt	34c34 <__assert_fail@plt+0x23090>
   34b7c:	beq	34a94 <__assert_fail@plt+0x22ef0>
   34b80:	cmp	r4, #0
   34b84:	blt	34c64 <__assert_fail@plt+0x230c0>
   34b88:	mov	r1, r7
   34b8c:	mvn	r0, #-2147483648	; 0x80000000
   34b90:	str	r3, [sp, #4]
   34b94:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34b98:	ldr	r3, [sp, #4]
   34b9c:	cmp	r0, r4
   34ba0:	movge	r0, #0
   34ba4:	movlt	r0, #1
   34ba8:	cmp	r0, #0
   34bac:	mvnne	r5, #-2147483648	; 0x80000000
   34bb0:	bne	34a98 <__assert_fail@plt+0x22ef4>
   34bb4:	mul	r5, r7, r4
   34bb8:	cmp	r5, #63	; 0x3f
   34bbc:	bgt	34ac0 <__assert_fail@plt+0x22f1c>
   34bc0:	b	34a94 <__assert_fail@plt+0x22ef0>
   34bc4:	rsb	r1, r4, #-2147483648	; 0x80000000
   34bc8:	cmp	r6, r1
   34bcc:	movge	r1, #0
   34bd0:	movlt	r1, #1
   34bd4:	b	34a60 <__assert_fail@plt+0x22ebc>
   34bd8:	adds	r5, r5, #0
   34bdc:	movne	r5, #1
   34be0:	cmp	r9, #0
   34be4:	orreq	r5, r5, #1
   34be8:	cmp	r5, #0
   34bec:	beq	34b68 <__assert_fail@plt+0x22fc4>
   34bf0:	bl	34e28 <__assert_fail@plt+0x23284>
   34bf4:	rsb	r2, sl, #-2147483648	; 0x80000000
   34bf8:	cmp	r6, r2
   34bfc:	movge	r2, #0
   34c00:	movlt	r2, #1
   34c04:	b	34af8 <__assert_fail@plt+0x22f54>
   34c08:	cmp	r6, #0
   34c0c:	blt	34c90 <__assert_fail@plt+0x230ec>
   34c10:	cmn	r7, #1
   34c14:	beq	34b50 <__assert_fail@plt+0x22fac>
   34c18:	mov	r1, r7
   34c1c:	mov	r0, #-2147483648	; 0x80000000
   34c20:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34c24:	cmp	r6, r0
   34c28:	movle	r0, #0
   34c2c:	movgt	r0, #1
   34c30:	b	34b48 <__assert_fail@plt+0x22fa4>
   34c34:	cmp	r4, #0
   34c38:	blt	34cd0 <__assert_fail@plt+0x2312c>
   34c3c:	cmn	r7, #1
   34c40:	beq	34bb4 <__assert_fail@plt+0x23010>
   34c44:	str	r3, [sp, #4]
   34c48:	mov	r1, r7
   34c4c:	mov	r0, #-2147483648	; 0x80000000
   34c50:	b	34b94 <__assert_fail@plt+0x22ff0>
   34c54:	mov	r4, fp
   34c58:	b	34b88 <__assert_fail@plt+0x22fe4>
   34c5c:	mov	r4, fp
   34c60:	b	34c3c <__assert_fail@plt+0x23098>
   34c64:	cmn	r4, #1
   34c68:	beq	34bb4 <__assert_fail@plt+0x23010>
   34c6c:	mov	r1, r4
   34c70:	mov	r0, #-2147483648	; 0x80000000
   34c74:	str	r3, [sp, #4]
   34c78:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34c7c:	ldr	r3, [sp, #4]
   34c80:	cmp	r7, r0
   34c84:	movle	r0, #0
   34c88:	movgt	r0, #1
   34c8c:	b	34ba8 <__assert_fail@plt+0x23004>
   34c90:	mov	r1, r7
   34c94:	mvn	r0, #-2147483648	; 0x80000000
   34c98:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34c9c:	cmp	r6, r0
   34ca0:	movge	r0, #0
   34ca4:	movlt	r0, #1
   34ca8:	b	34b48 <__assert_fail@plt+0x22fa4>
   34cac:	cmn	r6, #1
   34cb0:	beq	34b50 <__assert_fail@plt+0x22fac>
   34cb4:	mov	r1, r6
   34cb8:	mov	r0, #-2147483648	; 0x80000000
   34cbc:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34cc0:	cmp	r7, r0
   34cc4:	movle	r0, #0
   34cc8:	movgt	r0, #1
   34ccc:	b	34b48 <__assert_fail@plt+0x22fa4>
   34cd0:	mov	r1, r7
   34cd4:	mvn	r0, #-2147483648	; 0x80000000
   34cd8:	str	r3, [sp, #4]
   34cdc:	bl	37af0 <__assert_fail@plt+0x25f4c>
   34ce0:	ldr	r3, [sp, #4]
   34ce4:	cmp	r0, r4
   34ce8:	movle	r0, #0
   34cec:	movgt	r0, #1
   34cf0:	b	34ba8 <__assert_fail@plt+0x23004>
   34cf4:	push	{r4, lr}
   34cf8:	mov	r1, #1
   34cfc:	bl	368fc <__assert_fail@plt+0x24d58>
   34d00:	cmp	r0, #0
   34d04:	popne	{r4, pc}
   34d08:	bl	34e28 <__assert_fail@plt+0x23284>
   34d0c:	push	{r4, lr}
   34d10:	mov	r1, #1
   34d14:	bl	368fc <__assert_fail@plt+0x24d58>
   34d18:	cmp	r0, #0
   34d1c:	popne	{r4, pc}
   34d20:	bl	34e28 <__assert_fail@plt+0x23284>
   34d24:	push	{r4, lr}
   34d28:	bl	368fc <__assert_fail@plt+0x24d58>
   34d2c:	cmp	r0, #0
   34d30:	popne	{r4, pc}
   34d34:	bl	34e28 <__assert_fail@plt+0x23284>
   34d38:	push	{r4, lr}
   34d3c:	bl	368fc <__assert_fail@plt+0x24d58>
   34d40:	cmp	r0, #0
   34d44:	popne	{r4, pc}
   34d48:	bl	34e28 <__assert_fail@plt+0x23284>
   34d4c:	push	{r4, r5, r6, lr}
   34d50:	mov	r6, r0
   34d54:	mov	r0, r1
   34d58:	mov	r4, r1
   34d5c:	bl	36944 <__assert_fail@plt+0x24da0>
   34d60:	subs	r5, r0, #0
   34d64:	beq	34d7c <__assert_fail@plt+0x231d8>
   34d68:	mov	r2, r4
   34d6c:	mov	r1, r6
   34d70:	bl	11784 <memcpy@plt>
   34d74:	mov	r0, r5
   34d78:	pop	{r4, r5, r6, pc}
   34d7c:	bl	34e28 <__assert_fail@plt+0x23284>
   34d80:	push	{r4, r5, r6, lr}
   34d84:	mov	r6, r0
   34d88:	mov	r0, r1
   34d8c:	mov	r4, r1
   34d90:	bl	36944 <__assert_fail@plt+0x24da0>
   34d94:	subs	r5, r0, #0
   34d98:	beq	34db0 <__assert_fail@plt+0x2320c>
   34d9c:	mov	r2, r4
   34da0:	mov	r1, r6
   34da4:	bl	11784 <memcpy@plt>
   34da8:	mov	r0, r5
   34dac:	pop	{r4, r5, r6, pc}
   34db0:	bl	34e28 <__assert_fail@plt+0x23284>
   34db4:	push	{r4, r5, r6, lr}
   34db8:	mov	r6, r0
   34dbc:	add	r0, r1, #1
   34dc0:	mov	r4, r1
   34dc4:	bl	36944 <__assert_fail@plt+0x24da0>
   34dc8:	subs	r5, r0, #0
   34dcc:	beq	34dec <__assert_fail@plt+0x23248>
   34dd0:	mov	r3, #0
   34dd4:	mov	r1, r6
   34dd8:	strb	r3, [r5, r4]
   34ddc:	mov	r2, r4
   34de0:	bl	11784 <memcpy@plt>
   34de4:	mov	r0, r5
   34de8:	pop	{r4, r5, r6, pc}
   34dec:	bl	34e28 <__assert_fail@plt+0x23284>
   34df0:	push	{r4, r5, r6, lr}
   34df4:	mov	r6, r0
   34df8:	bl	11988 <strlen@plt>
   34dfc:	add	r4, r0, #1
   34e00:	mov	r0, r4
   34e04:	bl	36944 <__assert_fail@plt+0x24da0>
   34e08:	subs	r5, r0, #0
   34e0c:	beq	34e24 <__assert_fail@plt+0x23280>
   34e10:	mov	r2, r4
   34e14:	mov	r1, r6
   34e18:	bl	11784 <memcpy@plt>
   34e1c:	mov	r0, r5
   34e20:	pop	{r4, r5, r6, pc}
   34e24:	bl	34e28 <__assert_fail@plt+0x23284>
   34e28:	ldr	r3, [pc, #44]	; 34e5c <__assert_fail@plt+0x232b8>
   34e2c:	push	{r4, lr}
   34e30:	mov	r2, #5
   34e34:	ldr	r1, [pc, #36]	; 34e60 <__assert_fail@plt+0x232bc>
   34e38:	mov	r0, #0
   34e3c:	ldr	r4, [r3]
   34e40:	bl	117d8 <dcgettext@plt>
   34e44:	ldr	r2, [pc, #24]	; 34e64 <__assert_fail@plt+0x232c0>
   34e48:	mov	r1, #0
   34e4c:	mov	r3, r0
   34e50:	mov	r0, r4
   34e54:	bl	118bc <error@plt>
   34e58:	bl	11b68 <abort@plt>
   34e5c:	ldrdeq	fp, [r4], -r8
   34e60:	strdeq	sl, [r3], -r8
   34e64:	andeq	r9, r3, ip, ror #24
   34e68:	push	{r4, lr}
   34e6c:	orr	r1, r1, #512	; 0x200
   34e70:	bl	19b9c <__assert_fail@plt+0x7ff8>
   34e74:	cmp	r0, #0
   34e78:	popne	{r4, pc}
   34e7c:	bl	119b8 <__errno_location@plt>
   34e80:	ldr	r3, [r0]
   34e84:	cmp	r3, #22
   34e88:	beq	34e90 <__assert_fail@plt+0x232ec>
   34e8c:	bl	34e28 <__assert_fail@plt+0x23284>
   34e90:	ldr	r3, [pc, #12]	; 34ea4 <__assert_fail@plt+0x23300>
   34e94:	mov	r2, #41	; 0x29
   34e98:	ldr	r1, [pc, #8]	; 34ea8 <__assert_fail@plt+0x23304>
   34e9c:	ldr	r0, [pc, #8]	; 34eac <__assert_fail@plt+0x23308>
   34ea0:	bl	11ba4 <__assert_fail@plt>
   34ea4:	andeq	sl, r3, ip, lsl #12
   34ea8:	andeq	sl, r3, r8, lsl r6
   34eac:	andeq	sl, r3, r4, lsr #12
   34eb0:	ldr	r3, [r0, #48]	; 0x30
   34eb4:	and	r3, r3, #17
   34eb8:	cmp	r3, #16
   34ebc:	beq	34ee0 <__assert_fail@plt+0x2333c>
   34ec0:	cmp	r3, #17
   34ec4:	beq	34ed0 <__assert_fail@plt+0x2332c>
   34ec8:	mov	r0, #0
   34ecc:	bx	lr
   34ed0:	ldr	r0, [r1, #48]	; 0x30
   34ed4:	adds	r0, r0, #0
   34ed8:	movne	r0, #1
   34edc:	bx	lr
   34ee0:	mov	r0, #1
   34ee4:	bx	lr
   34ee8:	cmp	r2, #36	; 0x24
   34eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ef0:	sub	sp, sp, #52	; 0x34
   34ef4:	bhi	35a68 <__assert_fail@plt+0x23ec4>
   34ef8:	cmp	r1, #0
   34efc:	mov	r5, r1
   34f00:	mov	r6, r2
   34f04:	addeq	r5, sp, #44	; 0x2c
   34f08:	mov	sl, r0
   34f0c:	mov	r9, r3
   34f10:	bl	119b8 <__errno_location@plt>
   34f14:	mov	r4, #0
   34f18:	mov	r2, r6
   34f1c:	mov	r3, r4
   34f20:	mov	r1, r5
   34f24:	str	r4, [r0]
   34f28:	mov	fp, r0
   34f2c:	mov	r0, sl
   34f30:	bl	11af0 <__strtoll_internal@plt>
   34f34:	ldr	r8, [r5]
   34f38:	cmp	sl, r8
   34f3c:	mov	r6, r0
   34f40:	mov	r7, r1
   34f44:	beq	34f94 <__assert_fail@plt+0x233f0>
   34f48:	ldr	r4, [fp]
   34f4c:	cmp	r4, #0
   34f50:	bne	34f7c <__assert_fail@plt+0x233d8>
   34f54:	ldr	r3, [sp, #88]	; 0x58
   34f58:	cmp	r3, #0
   34f5c:	beq	34f6c <__assert_fail@plt+0x233c8>
   34f60:	ldrb	sl, [r8]
   34f64:	cmp	sl, #0
   34f68:	bne	34fc8 <__assert_fail@plt+0x23424>
   34f6c:	strd	r6, [r9]
   34f70:	mov	r0, r4
   34f74:	add	sp, sp, #52	; 0x34
   34f78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f7c:	cmp	r4, #34	; 0x22
   34f80:	beq	35228 <__assert_fail@plt+0x23684>
   34f84:	mov	r4, #4
   34f88:	mov	r0, r4
   34f8c:	add	sp, sp, #52	; 0x34
   34f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34f94:	ldr	r3, [sp, #88]	; 0x58
   34f98:	cmp	r3, r4
   34f9c:	beq	34f84 <__assert_fail@plt+0x233e0>
   34fa0:	ldrb	sl, [sl]
   34fa4:	cmp	sl, r4
   34fa8:	beq	34f84 <__assert_fail@plt+0x233e0>
   34fac:	mov	r1, sl
   34fb0:	mov	r0, r3
   34fb4:	bl	11994 <strchr@plt>
   34fb8:	cmp	r0, r4
   34fbc:	movne	r6, #1
   34fc0:	movne	r7, #0
   34fc4:	beq	34f84 <__assert_fail@plt+0x233e0>
   34fc8:	mov	r1, sl
   34fcc:	ldr	r0, [sp, #88]	; 0x58
   34fd0:	bl	11994 <strchr@plt>
   34fd4:	cmp	r0, #0
   34fd8:	beq	355e0 <__assert_fail@plt+0x23a3c>
   34fdc:	sub	r3, sl, #69	; 0x45
   34fe0:	cmp	r3, #47	; 0x2f
   34fe4:	ldrls	pc, [pc, r3, lsl #2]
   34fe8:	b	350ac <__assert_fail@plt+0x23508>
   34fec:	andeq	r5, r3, r4, asr #3
   34ff0:	andeq	r5, r3, ip, lsr #1
   34ff4:	andeq	r5, r3, r4, asr #3
   34ff8:	andeq	r5, r3, ip, lsr #1
   34ffc:	andeq	r5, r3, ip, lsr #1
   35000:	andeq	r5, r3, ip, lsr #1
   35004:	andeq	r5, r3, r4, asr #3
   35008:	andeq	r5, r3, ip, lsr #1
   3500c:	andeq	r5, r3, r4, asr #3
   35010:	andeq	r5, r3, ip, lsr #1
   35014:	andeq	r5, r3, ip, lsr #1
   35018:	andeq	r5, r3, r4, asr #3
   3501c:	andeq	r5, r3, ip, lsr #1
   35020:	andeq	r5, r3, ip, lsr #1
   35024:	andeq	r5, r3, ip, lsr #1
   35028:	andeq	r5, r3, r4, asr #3
   3502c:	andeq	r5, r3, ip, lsr #1
   35030:	andeq	r5, r3, ip, lsr #1
   35034:	andeq	r5, r3, ip, lsr #1
   35038:	andeq	r5, r3, ip, lsr #1
   3503c:	andeq	r5, r3, r4, asr #3
   35040:	andeq	r5, r3, r4, asr #3
   35044:	andeq	r5, r3, ip, lsr #1
   35048:	andeq	r5, r3, ip, lsr #1
   3504c:	andeq	r5, r3, ip, lsr #1
   35050:	andeq	r5, r3, ip, lsr #1
   35054:	andeq	r5, r3, ip, lsr #1
   35058:	andeq	r5, r3, ip, lsr #1
   3505c:	andeq	r5, r3, ip, lsr #1
   35060:	andeq	r5, r3, ip, lsr #1
   35064:	andeq	r5, r3, ip, lsr #1
   35068:	andeq	r5, r3, ip, lsr #1
   3506c:	andeq	r5, r3, ip, lsr #1
   35070:	andeq	r5, r3, ip, lsr #1
   35074:	andeq	r5, r3, r4, asr #3
   35078:	andeq	r5, r3, ip, lsr #1
   3507c:	andeq	r5, r3, ip, lsr #1
   35080:	andeq	r5, r3, ip, lsr #1
   35084:	andeq	r5, r3, r4, asr #3
   35088:	andeq	r5, r3, ip, lsr #1
   3508c:	andeq	r5, r3, r4, asr #3
   35090:	andeq	r5, r3, ip, lsr #1
   35094:	andeq	r5, r3, ip, lsr #1
   35098:	andeq	r5, r3, ip, lsr #1
   3509c:	andeq	r5, r3, ip, lsr #1
   350a0:	andeq	r5, r3, ip, lsr #1
   350a4:	andeq	r5, r3, ip, lsr #1
   350a8:	andeq	r5, r3, r4, asr #3
   350ac:	mov	r3, #1024	; 0x400
   350b0:	str	r3, [sp, #12]
   350b4:	mov	r3, #0
   350b8:	str	r3, [sp, #8]
   350bc:	ldr	r3, [pc, #1292]	; 355d0 <__assert_fail@plt+0x23a2c>
   350c0:	mvn	r2, #0
   350c4:	strd	r2, [sp, #16]
   350c8:	mov	r3, #0
   350cc:	mov	r2, #1024	; 0x400
   350d0:	strd	r2, [sp, #24]
   350d4:	mov	r3, #1
   350d8:	str	r3, [sp, #4]
   350dc:	sub	sl, sl, #66	; 0x42
   350e0:	cmp	sl, #53	; 0x35
   350e4:	ldrls	pc, [pc, sl, lsl #2]
   350e8:	b	355e0 <__assert_fail@plt+0x23a3c>
   350ec:	andeq	r5, r3, r4, asr #10
   350f0:	andeq	r5, r3, r0, ror #11
   350f4:	andeq	r5, r3, r0, ror #11
   350f8:	andeq	r5, r3, r8, asr r3
   350fc:	andeq	r5, r3, r0, ror #11
   35100:	strdeq	r5, [r3], -r8
   35104:	andeq	r5, r3, r0, ror #11
   35108:	andeq	r5, r3, r0, ror #11
   3510c:	andeq	r5, r3, r0, ror #11
   35110:	andeq	r5, r3, ip, ror #11
   35114:	andeq	r5, r3, r0, ror #11
   35118:	muleq	r3, r8, r2
   3511c:	andeq	r5, r3, r0, ror #11
   35120:	andeq	r5, r3, r0, ror #11
   35124:	andeq	r5, r3, r8, ror #8
   35128:	andeq	r5, r3, r0, ror #11
   3512c:	andeq	r5, r3, r0, ror #11
   35130:	andeq	r5, r3, r0, ror #11
   35134:	andeq	r5, r3, r4, lsl r4
   35138:	andeq	r5, r3, r0, ror #11
   3513c:	andeq	r5, r3, r0, ror #11
   35140:	andeq	r5, r3, r0, ror #11
   35144:	andeq	r5, r3, r0, ror #11
   35148:			; <UNDEFINED> instruction: 0x000354bc
   3514c:			; <UNDEFINED> instruction: 0x000353bc
   35150:	andeq	r5, r3, r0, ror #11
   35154:	andeq	r5, r3, r0, ror #11
   35158:	andeq	r5, r3, r0, ror #11
   3515c:	andeq	r5, r3, r0, ror #11
   35160:	andeq	r5, r3, r0, ror #11
   35164:	andeq	r5, r3, r0, ror #11
   35168:	andeq	r5, r3, r0, ror #11
   3516c:	andeq	r5, r3, ip, ror #10
   35170:	andeq	r5, r3, r4, ror r2
   35174:	andeq	r5, r3, r0, ror #11
   35178:	andeq	r5, r3, r0, ror #11
   3517c:	andeq	r5, r3, r0, ror #11
   35180:	strdeq	r5, [r3], -r8
   35184:	andeq	r5, r3, r0, ror #11
   35188:	andeq	r5, r3, r0, ror #11
   3518c:	andeq	r5, r3, r0, ror #11
   35190:	andeq	r5, r3, ip, ror #11
   35194:	andeq	r5, r3, r0, ror #11
   35198:	muleq	r3, r8, r2
   3519c:	andeq	r5, r3, r0, ror #11
   351a0:	andeq	r5, r3, r0, ror #11
   351a4:	andeq	r5, r3, r0, ror #11
   351a8:	andeq	r5, r3, r0, ror #11
   351ac:	andeq	r5, r3, r0, ror #11
   351b0:	andeq	r5, r3, r0, ror #11
   351b4:	andeq	r5, r3, r4, lsl r4
   351b8:	andeq	r5, r3, r0, ror #11
   351bc:	andeq	r5, r3, r0, ror #11
   351c0:	andeq	r5, r3, r0, lsr #11
   351c4:	mov	r1, #48	; 0x30
   351c8:	ldr	r0, [sp, #88]	; 0x58
   351cc:	bl	11994 <strchr@plt>
   351d0:	cmp	r0, #0
   351d4:	beq	35628 <__assert_fail@plt+0x23a84>
   351d8:	ldrb	r3, [r8, #1]
   351dc:	cmp	r3, #68	; 0x44
   351e0:	beq	351f4 <__assert_fail@plt+0x23650>
   351e4:	cmp	r3, #105	; 0x69
   351e8:	beq	35230 <__assert_fail@plt+0x2368c>
   351ec:	cmp	r3, #66	; 0x42
   351f0:	bne	350ac <__assert_fail@plt+0x23508>
   351f4:	mov	r3, #1000	; 0x3e8
   351f8:	str	r3, [sp, #12]
   351fc:	mov	r3, #0
   35200:	str	r3, [sp, #8]
   35204:	add	r3, pc, #956	; 0x3bc
   35208:	ldrd	r2, [r3]
   3520c:	strd	r2, [sp, #16]
   35210:	mov	r3, #0
   35214:	mov	r2, #1000	; 0x3e8
   35218:	strd	r2, [sp, #24]
   3521c:	mov	r3, #2
   35220:	str	r3, [sp, #4]
   35224:	b	350dc <__assert_fail@plt+0x23538>
   35228:	mov	r4, #1
   3522c:	b	34f54 <__assert_fail@plt+0x233b0>
   35230:	ldrb	r3, [r8, #2]
   35234:	mvn	r2, #0
   35238:	cmp	r3, #66	; 0x42
   3523c:	mov	r3, #1024	; 0x400
   35240:	str	r3, [sp, #12]
   35244:	mov	r3, #0
   35248:	str	r3, [sp, #8]
   3524c:	ldr	r3, [pc, #892]	; 355d0 <__assert_fail@plt+0x23a2c>
   35250:	strd	r2, [sp, #16]
   35254:	mov	r3, #0
   35258:	mov	r2, #1024	; 0x400
   3525c:	strd	r2, [sp, #24]
   35260:	moveq	r3, #3
   35264:	streq	r3, [sp, #4]
   35268:	movne	r3, #1
   3526c:	strne	r3, [sp, #4]
   35270:	b	350dc <__assert_fail@plt+0x23538>
   35274:	mov	sl, #0
   35278:	ldr	r2, [sp, #4]
   3527c:	orr	r4, r4, sl
   35280:	add	r3, r8, r2
   35284:	str	r3, [r5]
   35288:	ldrb	r3, [r8, r2]
   3528c:	cmp	r3, #0
   35290:	orrne	r4, r4, #2
   35294:	b	34f6c <__assert_fail@plt+0x233c8>
   35298:	mov	sl, #0
   3529c:	mov	r3, r9
   352a0:	mov	fp, #1
   352a4:	mov	r9, r5
   352a8:	mov	r5, r4
   352ac:	mov	r4, sl
   352b0:	mov	sl, r3
   352b4:	cmp	r6, #0
   352b8:	sbcs	r3, r7, #0
   352bc:	blt	359e4 <__assert_fail@plt+0x23e40>
   352c0:	ldrd	r2, [sp, #16]
   352c4:	cmp	r2, r6
   352c8:	sbcs	r1, r3, r7
   352cc:	bge	358f4 <__assert_fail@plt+0x23d50>
   352d0:	sub	fp, fp, #1
   352d4:	cmn	fp, #1
   352d8:	mov	r4, #1
   352dc:	mvn	r6, #0
   352e0:	mvn	r7, #-2147483648	; 0x80000000
   352e4:	bne	352c4 <__assert_fail@plt+0x23720>
   352e8:	mov	r4, r5
   352ec:	mov	r5, r9
   352f0:	mov	r9, sl
   352f4:	b	3555c <__assert_fail@plt+0x239b8>
   352f8:	mov	sl, #0
   352fc:	str	r9, [sp, #32]
   35300:	mov	r9, r5
   35304:	mov	r5, r4
   35308:	mov	r4, sl
   3530c:	ldr	sl, [sp, #12]
   35310:	mov	fp, #2
   35314:	cmp	r6, #0
   35318:	sbcs	r3, r7, #0
   3531c:	blt	35930 <__assert_fail@plt+0x23d8c>
   35320:	ldrd	r2, [sp, #16]
   35324:	cmp	r2, r6
   35328:	sbcs	r1, r3, r7
   3532c:	bge	35998 <__assert_fail@plt+0x23df4>
   35330:	sub	fp, fp, #1
   35334:	cmn	fp, #1
   35338:	mvn	r6, #0
   3533c:	mvn	r7, #-2147483648	; 0x80000000
   35340:	mov	r4, #1
   35344:	bne	35324 <__assert_fail@plt+0x23780>
   35348:	mov	r4, r5
   3534c:	mov	r5, r9
   35350:	ldr	r9, [sp, #32]
   35354:	b	3555c <__assert_fail@plt+0x239b8>
   35358:	mov	sl, #0
   3535c:	str	r4, [sp, #32]
   35360:	str	r9, [sp, #36]	; 0x24
   35364:	mov	r4, sl
   35368:	mov	r9, r5
   3536c:	ldr	sl, [sp, #12]
   35370:	ldr	r5, [sp, #8]
   35374:	mov	fp, #5
   35378:	cmp	r6, #0
   3537c:	sbcs	r3, r7, #0
   35380:	blt	357a4 <__assert_fail@plt+0x23c00>
   35384:	ldrd	r2, [sp, #16]
   35388:	cmp	r2, r6
   3538c:	sbcs	r1, r3, r7
   35390:	bge	357dc <__assert_fail@plt+0x23c38>
   35394:	sub	fp, fp, #1
   35398:	cmn	fp, #1
   3539c:	mvn	r6, #0
   353a0:	mvn	r7, #-2147483648	; 0x80000000
   353a4:	mov	r4, #1
   353a8:	bne	35388 <__assert_fail@plt+0x237e4>
   353ac:	mov	r5, r9
   353b0:	ldr	r4, [sp, #32]
   353b4:	ldr	r9, [sp, #36]	; 0x24
   353b8:	b	3555c <__assert_fail@plt+0x239b8>
   353bc:	mov	sl, #0
   353c0:	str	r4, [sp, #32]
   353c4:	str	r9, [sp, #36]	; 0x24
   353c8:	mov	r4, sl
   353cc:	mov	r9, r5
   353d0:	ldr	sl, [sp, #12]
   353d4:	ldr	r5, [sp, #8]
   353d8:	mov	fp, #6
   353dc:	cmp	r6, #0
   353e0:	sbcs	r3, r7, #0
   353e4:	blt	35658 <__assert_fail@plt+0x23ab4>
   353e8:	ldrd	r2, [sp, #16]
   353ec:	cmp	r2, r6
   353f0:	sbcs	r1, r3, r7
   353f4:	bge	35638 <__assert_fail@plt+0x23a94>
   353f8:	sub	fp, fp, #1
   353fc:	cmn	fp, #1
   35400:	mov	r4, #1
   35404:	mvn	r6, #0
   35408:	mvn	r7, #-2147483648	; 0x80000000
   3540c:	bne	353ec <__assert_fail@plt+0x23848>
   35410:	b	353ac <__assert_fail@plt+0x23808>
   35414:	mov	sl, #0
   35418:	str	r9, [sp, #32]
   3541c:	mov	r9, r5
   35420:	mov	r5, r4
   35424:	mov	r4, sl
   35428:	ldr	sl, [sp, #12]
   3542c:	mov	fp, #3
   35430:	cmp	r6, #0
   35434:	sbcs	r3, r7, #0
   35438:	blt	35738 <__assert_fail@plt+0x23b94>
   3543c:	ldrd	r2, [sp, #16]
   35440:	cmp	r2, r6
   35444:	sbcs	r1, r3, r7
   35448:	bge	35770 <__assert_fail@plt+0x23bcc>
   3544c:	sub	fp, fp, #1
   35450:	cmn	fp, #1
   35454:	mov	r4, #1
   35458:	mvn	r6, #0
   3545c:	mvn	r7, #-2147483648	; 0x80000000
   35460:	bne	35440 <__assert_fail@plt+0x2389c>
   35464:	b	35348 <__assert_fail@plt+0x237a4>
   35468:	mov	sl, #0
   3546c:	str	r9, [sp, #32]
   35470:	mov	r9, r5
   35474:	mov	r5, r4
   35478:	mov	r4, sl
   3547c:	ldr	sl, [sp, #12]
   35480:	mov	fp, #4
   35484:	cmp	r6, #0
   35488:	sbcs	r3, r7, #0
   3548c:	blt	358ac <__assert_fail@plt+0x23d08>
   35490:	ldrd	r2, [sp, #16]
   35494:	cmp	r2, r6
   35498:	sbcs	r1, r3, r7
   3549c:	bge	35888 <__assert_fail@plt+0x23ce4>
   354a0:	sub	fp, fp, #1
   354a4:	cmn	fp, #1
   354a8:	mvn	r6, #0
   354ac:	mvn	r7, #-2147483648	; 0x80000000
   354b0:	mov	r4, #1
   354b4:	bne	35494 <__assert_fail@plt+0x238f0>
   354b8:	b	35348 <__assert_fail@plt+0x237a4>
   354bc:	mov	sl, #0
   354c0:	str	r4, [sp, #32]
   354c4:	str	r9, [sp, #36]	; 0x24
   354c8:	mov	r4, sl
   354cc:	mov	r9, r5
   354d0:	ldr	sl, [sp, #12]
   354d4:	ldr	r5, [sp, #8]
   354d8:	mov	fp, #7
   354dc:	cmp	r6, #0
   354e0:	sbcs	r3, r7, #0
   354e4:	blt	356fc <__assert_fail@plt+0x23b58>
   354e8:	ldrd	r2, [sp, #16]
   354ec:	b	35508 <__assert_fail@plt+0x23964>
   354f0:	sub	fp, fp, #1
   354f4:	cmn	fp, #1
   354f8:	mvn	r6, #0
   354fc:	mvn	r7, #-2147483648	; 0x80000000
   35500:	mov	r4, #1
   35504:	beq	353ac <__assert_fail@plt+0x23808>
   35508:	cmp	r2, r6
   3550c:	sbcs	r1, r3, r7
   35510:	blt	354f0 <__assert_fail@plt+0x2394c>
   35514:	mul	r3, r6, r5
   35518:	cmp	fp, #0
   3551c:	mla	r3, sl, r7, r3
   35520:	umull	r6, r7, r6, sl
   35524:	sub	fp, fp, #1
   35528:	add	r7, r3, r7
   3552c:	bne	354dc <__assert_fail@plt+0x23938>
   35530:	mov	sl, r4
   35534:	mov	r5, r9
   35538:	ldr	r4, [sp, #32]
   3553c:	ldr	r9, [sp, #36]	; 0x24
   35540:	b	35278 <__assert_fail@plt+0x236d4>
   35544:	cmp	r6, #0
   35548:	sbcs	r3, r7, #0
   3554c:	blt	356ac <__assert_fail@plt+0x23b08>
   35550:	cmp	r6, #0
   35554:	sbcs	r3, r7, #2097152	; 0x200000
   35558:	blt	356e0 <__assert_fail@plt+0x23b3c>
   3555c:	mvn	r6, #0
   35560:	mvn	r7, #-2147483648	; 0x80000000
   35564:	mov	sl, #1
   35568:	b	35278 <__assert_fail@plt+0x236d4>
   3556c:	cmp	r6, #0
   35570:	sbcs	r3, r7, #0
   35574:	blt	35850 <__assert_fail@plt+0x23cac>
   35578:	cmp	r6, #0
   3557c:	sbcs	r3, r7, #4194304	; 0x400000
   35580:	bge	3555c <__assert_fail@plt+0x239b8>
   35584:	lsl	r3, r7, #9
   35588:	orr	r3, r3, r6, lsr #23
   3558c:	lsl	r2, r6, #9
   35590:	mov	r6, r2
   35594:	mov	r7, r3
   35598:	mov	sl, #0
   3559c:	b	35278 <__assert_fail@plt+0x236d4>
   355a0:	cmp	r6, #0
   355a4:	sbcs	r3, r7, #0
   355a8:	blt	35818 <__assert_fail@plt+0x23c74>
   355ac:	cmp	r6, #0
   355b0:	sbcs	r3, r7, #1073741824	; 0x40000000
   355b4:	bge	3555c <__assert_fail@plt+0x239b8>
   355b8:	adds	r6, r6, r6
   355bc:	adc	r7, r7, r7
   355c0:	mov	sl, #0
   355c4:	b	35278 <__assert_fail@plt+0x236d4>
   355c8:	strbge	r5, [r3, #1015]!	; 0x3f7
   355cc:	mlaeq	r0, fp, r4, ip
   355d0:			; <UNDEFINED> instruction: 0x001fffff
   355d4:	andeq	sl, r3, r4, lsr r6
   355d8:	andeq	sl, r3, r0, asr #12
   355dc:	andeq	sl, r3, r0, asr r6
   355e0:	strd	r6, [r9]
   355e4:	orr	r4, r4, #2
   355e8:	b	34f70 <__assert_fail@plt+0x233cc>
   355ec:	cmp	r6, #0
   355f0:	sbcs	r3, r7, #0
   355f4:	blt	35a2c <__assert_fail@plt+0x23e88>
   355f8:	ldrd	r2, [sp, #16]
   355fc:	cmp	r2, r6
   35600:	sbcs	r3, r3, r7
   35604:	blt	3555c <__assert_fail@plt+0x239b8>
   35608:	ldr	r3, [sp, #8]
   3560c:	ldr	r2, [sp, #12]
   35610:	mov	sl, #0
   35614:	mul	r3, r6, r3
   35618:	mla	r3, r2, r7, r3
   3561c:	umull	r6, r7, r6, r2
   35620:	add	r7, r3, r7
   35624:	b	35278 <__assert_fail@plt+0x236d4>
   35628:	mov	r3, #1024	; 0x400
   3562c:	str	r0, [sp, #8]
   35630:	str	r3, [sp, #12]
   35634:	b	350bc <__assert_fail@plt+0x23518>
   35638:	mul	r3, r6, r5
   3563c:	cmp	fp, #0
   35640:	mla	r3, sl, r7, r3
   35644:	umull	r6, r7, r6, sl
   35648:	sub	fp, fp, #1
   3564c:	add	r7, r3, r7
   35650:	bne	353dc <__assert_fail@plt+0x23838>
   35654:	b	35530 <__assert_fail@plt+0x2398c>
   35658:	mvn	r3, #0
   3565c:	mvn	r2, #0
   35660:	cmp	r7, r3
   35664:	cmpeq	r6, r2
   35668:	beq	35638 <__assert_fail@plt+0x23a94>
   3566c:	mov	r2, r6
   35670:	mov	r3, r7
   35674:	mov	r0, #0
   35678:	mov	r1, #-2147483648	; 0x80000000
   3567c:	bl	380e8 <__assert_fail@plt+0x26544>
   35680:	ldrd	r2, [sp, #24]
   35684:	cmp	r0, r2
   35688:	sbcs	r3, r1, r3
   3568c:	bge	35638 <__assert_fail@plt+0x23a94>
   35690:	mov	r5, r9
   35694:	ldr	r4, [sp, #32]
   35698:	ldr	r9, [sp, #36]	; 0x24
   3569c:	mov	r6, #0
   356a0:	mov	r7, #-2147483648	; 0x80000000
   356a4:	mov	sl, #1
   356a8:	b	35278 <__assert_fail@plt+0x236d4>
   356ac:	mvn	r3, #0
   356b0:	mvn	r2, #0
   356b4:	cmp	r7, r3
   356b8:	cmpeq	r6, r2
   356bc:	beq	356e0 <__assert_fail@plt+0x23b3c>
   356c0:	mov	r3, r7
   356c4:	mov	r2, r6
   356c8:	mov	r0, #0
   356cc:	mov	r1, #-2147483648	; 0x80000000
   356d0:	bl	380e8 <__assert_fail@plt+0x26544>
   356d4:	cmp	r0, #1024	; 0x400
   356d8:	sbcs	r3, r1, #0
   356dc:	blt	3569c <__assert_fail@plt+0x23af8>
   356e0:	lsl	r3, r7, #10
   356e4:	orr	r3, r3, r6, lsr #22
   356e8:	lsl	r2, r6, #10
   356ec:	mov	r6, r2
   356f0:	mov	r7, r3
   356f4:	mov	sl, #0
   356f8:	b	35278 <__assert_fail@plt+0x236d4>
   356fc:	mvn	r3, #0
   35700:	mvn	r2, #0
   35704:	cmp	r7, r3
   35708:	cmpeq	r6, r2
   3570c:	beq	35514 <__assert_fail@plt+0x23970>
   35710:	mov	r2, r6
   35714:	mov	r3, r7
   35718:	mov	r0, #0
   3571c:	mov	r1, #-2147483648	; 0x80000000
   35720:	bl	380e8 <__assert_fail@plt+0x26544>
   35724:	ldrd	r2, [sp, #24]
   35728:	cmp	r0, r2
   3572c:	sbcs	r3, r1, r3
   35730:	bge	35514 <__assert_fail@plt+0x23970>
   35734:	b	35690 <__assert_fail@plt+0x23aec>
   35738:	mvn	r3, #0
   3573c:	mvn	r2, #0
   35740:	cmp	r7, r3
   35744:	cmpeq	r6, r2
   35748:	beq	35770 <__assert_fail@plt+0x23bcc>
   3574c:	mov	r2, r6
   35750:	mov	r3, r7
   35754:	mov	r0, #0
   35758:	mov	r1, #-2147483648	; 0x80000000
   3575c:	bl	380e8 <__assert_fail@plt+0x26544>
   35760:	ldrd	r2, [sp, #24]
   35764:	cmp	r0, r2
   35768:	sbcs	r3, r1, r3
   3576c:	blt	358e4 <__assert_fail@plt+0x23d40>
   35770:	ldr	r3, [sp, #8]
   35774:	cmp	fp, #0
   35778:	sub	fp, fp, #1
   3577c:	mul	r3, r6, r3
   35780:	mla	r3, sl, r7, r3
   35784:	umull	r6, r7, r6, sl
   35788:	add	r7, r3, r7
   3578c:	bne	35430 <__assert_fail@plt+0x2388c>
   35790:	mov	sl, r4
   35794:	mov	r4, r5
   35798:	mov	r5, r9
   3579c:	ldr	r9, [sp, #32]
   357a0:	b	35278 <__assert_fail@plt+0x236d4>
   357a4:	mvn	r3, #0
   357a8:	mvn	r2, #0
   357ac:	cmp	r7, r3
   357b0:	cmpeq	r6, r2
   357b4:	beq	357dc <__assert_fail@plt+0x23c38>
   357b8:	mov	r2, r6
   357bc:	mov	r3, r7
   357c0:	mov	r0, #0
   357c4:	mov	r1, #-2147483648	; 0x80000000
   357c8:	bl	380e8 <__assert_fail@plt+0x26544>
   357cc:	ldrd	r2, [sp, #24]
   357d0:	cmp	r0, r2
   357d4:	sbcs	r3, r1, r3
   357d8:	blt	357fc <__assert_fail@plt+0x23c58>
   357dc:	mul	r3, r6, r5
   357e0:	cmp	fp, #0
   357e4:	mla	r3, sl, r7, r3
   357e8:	umull	r6, r7, r6, sl
   357ec:	sub	fp, fp, #1
   357f0:	add	r7, r3, r7
   357f4:	bne	35378 <__assert_fail@plt+0x237d4>
   357f8:	b	35530 <__assert_fail@plt+0x2398c>
   357fc:	sub	fp, fp, #1
   35800:	cmn	fp, #1
   35804:	mov	r6, #0
   35808:	mov	r7, #-2147483648	; 0x80000000
   3580c:	mov	r4, #1
   35810:	bne	357b8 <__assert_fail@plt+0x23c14>
   35814:	b	35690 <__assert_fail@plt+0x23aec>
   35818:	mvn	r3, #0
   3581c:	mvn	r2, #0
   35820:	cmp	r7, r3
   35824:	cmpeq	r6, r2
   35828:	beq	355b8 <__assert_fail@plt+0x23a14>
   3582c:	mov	r2, r6
   35830:	mov	r3, r7
   35834:	mov	r0, #0
   35838:	mov	r1, #-2147483648	; 0x80000000
   3583c:	bl	380e8 <__assert_fail@plt+0x26544>
   35840:	cmp	r1, #0
   35844:	cmpeq	r0, #1
   35848:	beq	3569c <__assert_fail@plt+0x23af8>
   3584c:	b	355b8 <__assert_fail@plt+0x23a14>
   35850:	mvn	r3, #0
   35854:	mvn	r2, #0
   35858:	cmp	r7, r3
   3585c:	cmpeq	r6, r2
   35860:	beq	35584 <__assert_fail@plt+0x239e0>
   35864:	mov	r3, r7
   35868:	mov	r2, r6
   3586c:	mov	r0, #0
   35870:	mov	r1, #-2147483648	; 0x80000000
   35874:	bl	380e8 <__assert_fail@plt+0x26544>
   35878:	cmp	r0, #512	; 0x200
   3587c:	sbcs	r3, r1, #0
   35880:	blt	3569c <__assert_fail@plt+0x23af8>
   35884:	b	35584 <__assert_fail@plt+0x239e0>
   35888:	ldr	r3, [sp, #8]
   3588c:	cmp	fp, #0
   35890:	sub	fp, fp, #1
   35894:	mul	r3, r6, r3
   35898:	mla	r3, sl, r7, r3
   3589c:	umull	r6, r7, r6, sl
   358a0:	add	r7, r3, r7
   358a4:	bne	35484 <__assert_fail@plt+0x238e0>
   358a8:	b	35790 <__assert_fail@plt+0x23bec>
   358ac:	mvn	r3, #0
   358b0:	mvn	r2, #0
   358b4:	cmp	r7, r3
   358b8:	cmpeq	r6, r2
   358bc:	beq	35888 <__assert_fail@plt+0x23ce4>
   358c0:	mov	r2, r6
   358c4:	mov	r3, r7
   358c8:	mov	r0, #0
   358cc:	mov	r1, #-2147483648	; 0x80000000
   358d0:	bl	380e8 <__assert_fail@plt+0x26544>
   358d4:	ldrd	r2, [sp, #24]
   358d8:	cmp	r0, r2
   358dc:	sbcs	r3, r1, r3
   358e0:	bge	35888 <__assert_fail@plt+0x23ce4>
   358e4:	mov	r4, r5
   358e8:	mov	r5, r9
   358ec:	ldr	r9, [sp, #32]
   358f0:	b	3569c <__assert_fail@plt+0x23af8>
   358f4:	ldr	r3, [sp, #8]
   358f8:	ldr	r2, [sp, #12]
   358fc:	cmp	fp, #0
   35900:	mul	r3, r6, r3
   35904:	sub	fp, fp, #1
   35908:	mla	r3, r2, r7, r3
   3590c:	umull	r6, r7, r6, r2
   35910:	add	r7, r3, r7
   35914:	bne	352b4 <__assert_fail@plt+0x23710>
   35918:	mov	r3, sl
   3591c:	mov	sl, r4
   35920:	mov	r4, r5
   35924:	mov	r5, r9
   35928:	mov	r9, r3
   3592c:	b	35278 <__assert_fail@plt+0x236d4>
   35930:	mvn	r3, #0
   35934:	mvn	r2, #0
   35938:	cmp	r7, r3
   3593c:	cmpeq	r6, r2
   35940:	beq	35998 <__assert_fail@plt+0x23df4>
   35944:	mov	r3, sl
   35948:	mov	sl, r9
   3594c:	mov	r9, r5
   35950:	mov	r5, r4
   35954:	mov	r4, fp
   35958:	mov	fp, r3
   3595c:	mov	r2, r6
   35960:	mov	r3, r7
   35964:	mov	r0, #0
   35968:	mov	r1, #-2147483648	; 0x80000000
   3596c:	bl	380e8 <__assert_fail@plt+0x26544>
   35970:	ldrd	r2, [sp, #24]
   35974:	cmp	r0, r2
   35978:	sbcs	r3, r1, r3
   3597c:	blt	359bc <__assert_fail@plt+0x23e18>
   35980:	mov	r3, fp
   35984:	mov	fp, r4
   35988:	mov	r4, r5
   3598c:	mov	r5, r9
   35990:	mov	r9, sl
   35994:	mov	sl, r3
   35998:	ldr	r3, [sp, #8]
   3599c:	cmp	fp, #0
   359a0:	sub	fp, fp, #1
   359a4:	mul	r3, r6, r3
   359a8:	mla	r3, sl, r7, r3
   359ac:	umull	r6, r7, r6, sl
   359b0:	add	r7, r3, r7
   359b4:	bne	35314 <__assert_fail@plt+0x23770>
   359b8:	b	35790 <__assert_fail@plt+0x23bec>
   359bc:	sub	r4, r4, #1
   359c0:	cmn	r4, #1
   359c4:	mov	r6, #0
   359c8:	mov	r7, #-2147483648	; 0x80000000
   359cc:	mov	r5, #1
   359d0:	bne	3595c <__assert_fail@plt+0x23db8>
   359d4:	mov	r4, r9
   359d8:	mov	r5, sl
   359dc:	ldr	r9, [sp, #32]
   359e0:	b	3569c <__assert_fail@plt+0x23af8>
   359e4:	mvn	r3, #0
   359e8:	mvn	r2, #0
   359ec:	cmp	r7, r3
   359f0:	cmpeq	r6, r2
   359f4:	beq	358f4 <__assert_fail@plt+0x23d50>
   359f8:	mov	r2, r6
   359fc:	mov	r3, r7
   35a00:	mov	r0, #0
   35a04:	mov	r1, #-2147483648	; 0x80000000
   35a08:	bl	380e8 <__assert_fail@plt+0x26544>
   35a0c:	ldrd	r2, [sp, #24]
   35a10:	cmp	r0, r2
   35a14:	sbcs	r3, r1, r3
   35a18:	bge	358f4 <__assert_fail@plt+0x23d50>
   35a1c:	mov	r4, r5
   35a20:	mov	r5, r9
   35a24:	mov	r9, sl
   35a28:	b	3569c <__assert_fail@plt+0x23af8>
   35a2c:	mvn	r3, #0
   35a30:	mvn	r2, #0
   35a34:	cmp	r7, r3
   35a38:	cmpeq	r6, r2
   35a3c:	beq	35608 <__assert_fail@plt+0x23a64>
   35a40:	mov	r2, r6
   35a44:	mov	r3, r7
   35a48:	mov	r0, #0
   35a4c:	mov	r1, #-2147483648	; 0x80000000
   35a50:	bl	380e8 <__assert_fail@plt+0x26544>
   35a54:	ldrd	r2, [sp, #24]
   35a58:	cmp	r0, r2
   35a5c:	sbcs	r3, r1, r3
   35a60:	blt	3569c <__assert_fail@plt+0x23af8>
   35a64:	b	35608 <__assert_fail@plt+0x23a64>
   35a68:	ldr	r3, [pc, #-1180]	; 355d4 <__assert_fail@plt+0x23a30>
   35a6c:	mov	r2, #85	; 0x55
   35a70:	ldr	r1, [pc, #-1184]	; 355d8 <__assert_fail@plt+0x23a34>
   35a74:	ldr	r0, [pc, #-1184]	; 355dc <__assert_fail@plt+0x23a38>
   35a78:	bl	11ba4 <__assert_fail@plt>
   35a7c:	ldr	ip, [pc, #148]	; 35b18 <__assert_fail@plt+0x23f74>
   35a80:	sub	r0, r0, #1
   35a84:	push	{lr}		; (str lr, [sp, #-4]!)
   35a88:	sub	sp, sp, #20
   35a8c:	ldr	r5, [ip]
   35a90:	cmp	r0, #3
   35a94:	ldrls	pc, [pc, r0, lsl #2]
   35a98:	b	35b04 <__assert_fail@plt+0x23f60>
   35a9c:	andeq	r5, r3, r0, lsl fp
   35aa0:	andeq	r5, r3, r8, lsl #22
   35aa4:	andeq	r5, r3, r8, lsl #22
   35aa8:	andeq	r5, r3, ip, lsr #21
   35aac:	ldr	r0, [pc, #104]	; 35b1c <__assert_fail@plt+0x23f78>
   35ab0:	cmp	r1, #0
   35ab4:	movlt	r3, #0
   35ab8:	ldrlt	r4, [pc, #96]	; 35b20 <__assert_fail@plt+0x23f7c>
   35abc:	ldrge	r6, [r3, r1, lsl #4]
   35ac0:	sublt	r4, r4, r1
   35ac4:	strblt	r2, [sp, #12]
   35ac8:	mov	r1, r0
   35acc:	mov	r2, #5
   35ad0:	mov	r0, #0
   35ad4:	strblt	r3, [sp, #13]
   35ad8:	addlt	r6, sp, #12
   35adc:	ldrge	r4, [pc, #60]	; 35b20 <__assert_fail@plt+0x23f7c>
   35ae0:	bl	117d8 <dcgettext@plt>
   35ae4:	ldr	r3, [sp, #24]
   35ae8:	str	r6, [sp]
   35aec:	str	r3, [sp, #4]
   35af0:	mov	r1, #0
   35af4:	mov	r3, r4
   35af8:	mov	r2, r0
   35afc:	mov	r0, r5
   35b00:	bl	118bc <error@plt>
   35b04:	bl	11b68 <abort@plt>
   35b08:	ldr	r0, [pc, #20]	; 35b24 <__assert_fail@plt+0x23f80>
   35b0c:	b	35ab0 <__assert_fail@plt+0x23f0c>
   35b10:	ldr	r0, [pc, #16]	; 35b28 <__assert_fail@plt+0x23f84>
   35b14:	b	35ab0 <__assert_fail@plt+0x23f0c>
   35b18:	ldrdeq	fp, [r4], -r8
   35b1c:	andeq	sl, r3, r8, ror r6
   35b20:	ldrdeq	sl, [r3], -ip
   35b24:	muleq	r3, r4, r6
   35b28:			; <UNDEFINED> instruction: 0x0003a6bc
   35b2c:	andeq	r0, r0, r0
   35b30:	cmp	r2, #36	; 0x24
   35b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35b38:	sub	sp, sp, #52	; 0x34
   35b3c:	bhi	368cc <__assert_fail@plt+0x24d28>
   35b40:	cmp	r1, #0
   35b44:	mov	r6, r2
   35b48:	mov	sl, r0
   35b4c:	mov	r5, r1
   35b50:	mov	r8, r3
   35b54:	addeq	r5, sp, #44	; 0x2c
   35b58:	bl	119b8 <__errno_location@plt>
   35b5c:	mov	r3, #0
   35b60:	str	r3, [r0]
   35b64:	mov	fp, r0
   35b68:	bl	11964 <__ctype_b_loc@plt>
   35b6c:	ldrb	r3, [sl]
   35b70:	mov	r2, sl
   35b74:	ldr	r0, [r0]
   35b78:	b	35b80 <__assert_fail@plt+0x23fdc>
   35b7c:	ldrb	r3, [r2, #1]!
   35b80:	lsl	r1, r3, #1
   35b84:	ldrh	r4, [r0, r1]
   35b88:	ands	r4, r4, #8192	; 0x2000
   35b8c:	bne	35b7c <__assert_fail@plt+0x23fd8>
   35b90:	cmp	r3, #45	; 0x2d
   35b94:	bne	35ba8 <__assert_fail@plt+0x24004>
   35b98:	mov	r4, #4
   35b9c:	mov	r0, r4
   35ba0:	add	sp, sp, #52	; 0x34
   35ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35ba8:	mov	r2, r6
   35bac:	mov	r3, r4
   35bb0:	mov	r1, r5
   35bb4:	mov	r0, sl
   35bb8:	bl	1179c <__strtoull_internal@plt>
   35bbc:	ldr	r9, [r5]
   35bc0:	cmp	sl, r9
   35bc4:	mov	r6, r0
   35bc8:	mov	r7, r1
   35bcc:	beq	35c14 <__assert_fail@plt+0x24070>
   35bd0:	ldr	r4, [fp]
   35bd4:	cmp	r4, #0
   35bd8:	bne	35c04 <__assert_fail@plt+0x24060>
   35bdc:	ldr	r3, [sp, #88]	; 0x58
   35be0:	cmp	r3, #0
   35be4:	beq	35bf4 <__assert_fail@plt+0x24050>
   35be8:	ldrb	sl, [r9]
   35bec:	cmp	sl, #0
   35bf0:	bne	35c48 <__assert_fail@plt+0x240a4>
   35bf4:	mov	r0, r4
   35bf8:	strd	r6, [r8]
   35bfc:	add	sp, sp, #52	; 0x34
   35c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35c04:	cmp	r4, #34	; 0x22
   35c08:	bne	35b98 <__assert_fail@plt+0x23ff4>
   35c0c:	mov	r4, #1
   35c10:	b	35bdc <__assert_fail@plt+0x24038>
   35c14:	ldr	r3, [sp, #88]	; 0x58
   35c18:	cmp	r3, #0
   35c1c:	beq	35b98 <__assert_fail@plt+0x23ff4>
   35c20:	ldrb	sl, [r9]
   35c24:	cmp	sl, #0
   35c28:	beq	35b98 <__assert_fail@plt+0x23ff4>
   35c2c:	mov	r1, sl
   35c30:	mov	r0, r3
   35c34:	bl	11994 <strchr@plt>
   35c38:	cmp	r0, #0
   35c3c:	movne	r6, #1
   35c40:	movne	r7, #0
   35c44:	beq	35b98 <__assert_fail@plt+0x23ff4>
   35c48:	mov	r1, sl
   35c4c:	ldr	r0, [sp, #88]	; 0x58
   35c50:	bl	11994 <strchr@plt>
   35c54:	cmp	r0, #0
   35c58:	beq	367b8 <__assert_fail@plt+0x24c14>
   35c5c:	sub	r3, sl, #69	; 0x45
   35c60:	cmp	r3, #47	; 0x2f
   35c64:	ldrls	pc, [pc, r3, lsl #2]
   35c68:	b	35d5c <__assert_fail@plt+0x241b8>
   35c6c:	andeq	r5, r3, ip, lsr #26
   35c70:	andeq	r5, r3, ip, asr sp
   35c74:	andeq	r5, r3, ip, lsr #26
   35c78:	andeq	r5, r3, ip, asr sp
   35c7c:	andeq	r5, r3, ip, asr sp
   35c80:	andeq	r5, r3, ip, asr sp
   35c84:	andeq	r5, r3, ip, lsr #26
   35c88:	andeq	r5, r3, ip, asr sp
   35c8c:	andeq	r5, r3, ip, lsr #26
   35c90:	andeq	r5, r3, ip, asr sp
   35c94:	andeq	r5, r3, ip, asr sp
   35c98:	andeq	r5, r3, ip, lsr #26
   35c9c:	andeq	r5, r3, ip, asr sp
   35ca0:	andeq	r5, r3, ip, asr sp
   35ca4:	andeq	r5, r3, ip, asr sp
   35ca8:	andeq	r5, r3, ip, lsr #26
   35cac:	andeq	r5, r3, ip, asr sp
   35cb0:	andeq	r5, r3, ip, asr sp
   35cb4:	andeq	r5, r3, ip, asr sp
   35cb8:	andeq	r5, r3, ip, asr sp
   35cbc:	andeq	r5, r3, ip, lsr #26
   35cc0:	andeq	r5, r3, ip, lsr #26
   35cc4:	andeq	r5, r3, ip, asr sp
   35cc8:	andeq	r5, r3, ip, asr sp
   35ccc:	andeq	r5, r3, ip, asr sp
   35cd0:	andeq	r5, r3, ip, asr sp
   35cd4:	andeq	r5, r3, ip, asr sp
   35cd8:	andeq	r5, r3, ip, asr sp
   35cdc:	andeq	r5, r3, ip, asr sp
   35ce0:	andeq	r5, r3, ip, asr sp
   35ce4:	andeq	r5, r3, ip, asr sp
   35ce8:	andeq	r5, r3, ip, asr sp
   35cec:	andeq	r5, r3, ip, asr sp
   35cf0:	andeq	r5, r3, ip, asr sp
   35cf4:	andeq	r5, r3, ip, lsr #26
   35cf8:	andeq	r5, r3, ip, asr sp
   35cfc:	andeq	r5, r3, ip, asr sp
   35d00:	andeq	r5, r3, ip, asr sp
   35d04:	andeq	r5, r3, ip, lsr #26
   35d08:	andeq	r5, r3, ip, asr sp
   35d0c:	andeq	r5, r3, ip, lsr #26
   35d10:	andeq	r5, r3, ip, asr sp
   35d14:	andeq	r5, r3, ip, asr sp
   35d18:	andeq	r5, r3, ip, asr sp
   35d1c:	andeq	r5, r3, ip, asr sp
   35d20:	andeq	r5, r3, ip, asr sp
   35d24:	andeq	r5, r3, ip, asr sp
   35d28:	andeq	r5, r3, ip, lsr #26
   35d2c:	mov	r1, #48	; 0x30
   35d30:	ldr	r0, [sp, #88]	; 0x58
   35d34:	bl	11994 <strchr@plt>
   35d38:	cmp	r0, #0
   35d3c:	beq	3684c <__assert_fail@plt+0x24ca8>
   35d40:	ldrb	r3, [r9, #1]
   35d44:	cmp	r3, #68	; 0x44
   35d48:	beq	3682c <__assert_fail@plt+0x24c88>
   35d4c:	cmp	r3, #105	; 0x69
   35d50:	beq	367fc <__assert_fail@plt+0x24c58>
   35d54:	cmp	r3, #66	; 0x42
   35d58:	beq	3682c <__assert_fail@plt+0x24c88>
   35d5c:	ldr	r3, [pc, #2948]	; 368e8 <__assert_fail@plt+0x24d44>
   35d60:	mvn	r2, #0
   35d64:	mov	r1, #1024	; 0x400
   35d68:	mov	lr, #0
   35d6c:	strd	r2, [sp]
   35d70:	mov	r3, #1
   35d74:	str	r3, [sp, #12]
   35d78:	sub	sl, sl, #66	; 0x42
   35d7c:	cmp	sl, #53	; 0x35
   35d80:	ldrls	pc, [pc, sl, lsl #2]
   35d84:	b	367b8 <__assert_fail@plt+0x24c14>
   35d88:	andeq	r6, r3, r8, lsl #15
   35d8c:			; <UNDEFINED> instruction: 0x000367b8
   35d90:			; <UNDEFINED> instruction: 0x000367b8
   35d94:	andeq	r6, r3, r4, lsl #12
   35d98:			; <UNDEFINED> instruction: 0x000367b8
   35d9c:	andeq	r6, r3, r0, asr #10
   35da0:			; <UNDEFINED> instruction: 0x000367b8
   35da4:			; <UNDEFINED> instruction: 0x000367b8
   35da8:			; <UNDEFINED> instruction: 0x000367b8
   35dac:	andeq	r6, r3, r4, asr #15
   35db0:			; <UNDEFINED> instruction: 0x000367b8
   35db4:	andeq	r5, r3, r0, ror #28
   35db8:			; <UNDEFINED> instruction: 0x000367b8
   35dbc:			; <UNDEFINED> instruction: 0x000367b8
   35dc0:	andeq	r5, r3, ip, ror #29
   35dc4:			; <UNDEFINED> instruction: 0x000367b8
   35dc8:			; <UNDEFINED> instruction: 0x000367b8
   35dcc:			; <UNDEFINED> instruction: 0x000367b8
   35dd0:	andeq	r6, r3, ip, ror #4
   35dd4:			; <UNDEFINED> instruction: 0x000367b8
   35dd8:			; <UNDEFINED> instruction: 0x000367b8
   35ddc:			; <UNDEFINED> instruction: 0x000367b8
   35de0:			; <UNDEFINED> instruction: 0x000367b8
   35de4:	andeq	r6, r3, r4, asr #32
   35de8:	andeq	r6, r3, r0, lsr #7
   35dec:			; <UNDEFINED> instruction: 0x000367b8
   35df0:			; <UNDEFINED> instruction: 0x000367b8
   35df4:			; <UNDEFINED> instruction: 0x000367b8
   35df8:			; <UNDEFINED> instruction: 0x000367b8
   35dfc:			; <UNDEFINED> instruction: 0x000367b8
   35e00:			; <UNDEFINED> instruction: 0x000367b8
   35e04:			; <UNDEFINED> instruction: 0x000367b8
   35e08:	andeq	r6, r3, r0, ror r3
   35e0c:	andeq	r6, r3, r8, ror #6
   35e10:			; <UNDEFINED> instruction: 0x000367b8
   35e14:			; <UNDEFINED> instruction: 0x000367b8
   35e18:			; <UNDEFINED> instruction: 0x000367b8
   35e1c:	andeq	r6, r3, r0, asr #10
   35e20:			; <UNDEFINED> instruction: 0x000367b8
   35e24:			; <UNDEFINED> instruction: 0x000367b8
   35e28:			; <UNDEFINED> instruction: 0x000367b8
   35e2c:	andeq	r6, r3, r4, asr #15
   35e30:			; <UNDEFINED> instruction: 0x000367b8
   35e34:	andeq	r5, r3, r0, ror #28
   35e38:			; <UNDEFINED> instruction: 0x000367b8
   35e3c:			; <UNDEFINED> instruction: 0x000367b8
   35e40:			; <UNDEFINED> instruction: 0x000367b8
   35e44:			; <UNDEFINED> instruction: 0x000367b8
   35e48:			; <UNDEFINED> instruction: 0x000367b8
   35e4c:			; <UNDEFINED> instruction: 0x000367b8
   35e50:	andeq	r6, r3, ip, ror #4
   35e54:			; <UNDEFINED> instruction: 0x000367b8
   35e58:			; <UNDEFINED> instruction: 0x000367b8
   35e5c:	andeq	r6, r3, ip, asr #6
   35e60:	mul	r0, r6, lr
   35e64:	ldrd	sl, [sp]
   35e68:	umull	r2, r3, r6, r1
   35e6c:	mla	r0, r1, r7, r0
   35e70:	cmp	r7, fp
   35e74:	cmpeq	r6, sl
   35e78:	add	r3, r0, r3
   35e7c:	mvnhi	r3, #0
   35e80:	mvnhi	r2, #0
   35e84:	mul	r6, r1, r3
   35e88:	umull	r0, r1, r1, r2
   35e8c:	mla	lr, lr, r2, r6
   35e90:	ldrd	r6, [sp]
   35e94:	movhi	ip, #1
   35e98:	movls	ip, #0
   35e9c:	cmp	r7, r3
   35ea0:	cmpeq	r6, r2
   35ea4:	mvncc	r0, #0
   35ea8:	add	r1, lr, r1
   35eac:	mov	sl, r6
   35eb0:	movcc	r1, r0
   35eb4:	mov	fp, r7
   35eb8:	cmp	fp, r3
   35ebc:	cmpeq	sl, r2
   35ec0:	mov	r6, r0
   35ec4:	mov	r7, r1
   35ec8:	orrcc	ip, ip, #1
   35ecc:	ldr	r2, [sp, #12]
   35ed0:	orr	r4, r4, ip
   35ed4:	add	r3, r9, r2
   35ed8:	str	r3, [r5]
   35edc:	ldrb	r3, [r9, r2]
   35ee0:	cmp	r3, #0
   35ee4:	orrne	r4, r4, #2
   35ee8:	b	35bf4 <__assert_fail@plt+0x24050>
   35eec:	ldrd	sl, [sp]
   35ef0:	umull	r2, r3, r6, r1
   35ef4:	mul	r0, r6, lr
   35ef8:	cmp	r7, fp
   35efc:	cmpeq	r6, sl
   35f00:	mvnhi	r2, #0
   35f04:	mla	r0, r1, r7, r0
   35f08:	umull	sl, fp, r2, r1
   35f0c:	add	r3, r0, r3
   35f10:	mul	r0, lr, r2
   35f14:	mvnhi	r3, #0
   35f18:	strd	sl, [sp, #16]
   35f1c:	ldrd	sl, [sp]
   35f20:	mla	r0, r1, r3, r0
   35f24:	ldr	ip, [sp, #20]
   35f28:	cmp	r3, fp
   35f2c:	add	r0, r0, ip
   35f30:	cmpeq	r2, sl
   35f34:	str	r0, [sp, #20]
   35f38:	bls	35f50 <__assert_fail@plt+0x243ac>
   35f3c:	mvn	sl, #0
   35f40:	mvn	fp, #0
   35f44:	strd	sl, [sp, #16]
   35f48:	ldr	r0, [sp, #20]
   35f4c:	ldrd	sl, [sp]
   35f50:	cmp	r7, fp
   35f54:	cmpeq	r6, sl
   35f58:	mul	r0, r1, r0
   35f5c:	ldrd	r6, [sp, #16]
   35f60:	mla	ip, lr, r6, r0
   35f64:	mov	r0, r6
   35f68:	movhi	r0, #1
   35f6c:	movls	r0, #0
   35f70:	cmp	r3, fp
   35f74:	cmpeq	r2, sl
   35f78:	ldrd	r2, [sp, #16]
   35f7c:	umull	r6, r7, r1, r6
   35f80:	orrhi	r0, r0, #1
   35f84:	cmp	fp, r3
   35f88:	cmpeq	sl, r2
   35f8c:	add	r7, ip, r7
   35f90:	bcc	3689c <__assert_fail@plt+0x24cf8>
   35f94:	mov	sl, r6
   35f98:	mov	fp, r7
   35f9c:	strd	r6, [sp, #24]
   35fa0:	mul	r3, r1, fp
   35fa4:	umull	r6, r7, r1, sl
   35fa8:	mla	ip, lr, sl, r3
   35fac:	ldrd	sl, [sp]
   35fb0:	ldrd	r2, [sp, #16]
   35fb4:	add	r7, ip, r7
   35fb8:	cmp	fp, r3
   35fbc:	cmpeq	sl, r2
   35fc0:	mov	r3, fp
   35fc4:	mov	r2, sl
   35fc8:	ldrd	sl, [sp, #24]
   35fcc:	orrcc	r0, r0, #1
   35fd0:	str	r0, [sp, #16]
   35fd4:	cmp	r3, fp
   35fd8:	cmpeq	r2, sl
   35fdc:	bcs	36534 <__assert_fail@plt+0x24990>
   35fe0:	mvn	r2, #0
   35fe4:	mvn	r3, #0
   35fe8:	mul	ip, lr, r2
   35fec:	ldrd	sl, [sp]
   35ff0:	mla	ip, r1, r3, ip
   35ff4:	umull	r6, r7, r2, r1
   35ff8:	ldrd	r0, [sp, #24]
   35ffc:	add	r7, ip, r7
   36000:	cmp	fp, r1
   36004:	ldr	r1, [sp, #16]
   36008:	cmpeq	sl, r0
   3600c:	orrcc	r1, r1, #1
   36010:	cmp	r3, fp
   36014:	cmpeq	r2, sl
   36018:	mvnhi	r0, #0
   3601c:	movls	ip, r7
   36020:	movhi	ip, r0
   36024:	movls	r0, r6
   36028:	cmp	r3, fp
   3602c:	cmpeq	r2, sl
   36030:	mov	r7, ip
   36034:	mov	r6, r0
   36038:	movls	ip, r1
   3603c:	orrhi	ip, r1, #1
   36040:	b	35ecc <__assert_fail@plt+0x24328>
   36044:	ldrd	sl, [sp]
   36048:	umull	r2, r3, r6, r1
   3604c:	mul	r0, r6, lr
   36050:	cmp	r7, fp
   36054:	cmpeq	r6, sl
   36058:	mvnhi	r2, #0
   3605c:	mla	r0, r1, r7, r0
   36060:	umull	sl, fp, r2, r1
   36064:	add	r3, r0, r3
   36068:	mul	r0, lr, r2
   3606c:	mvnhi	r3, #0
   36070:	strd	sl, [sp, #16]
   36074:	ldrd	sl, [sp]
   36078:	mla	r0, r1, r3, r0
   3607c:	ldr	ip, [sp, #20]
   36080:	cmp	r3, fp
   36084:	add	r0, r0, ip
   36088:	cmpeq	r2, sl
   3608c:	str	r0, [sp, #20]
   36090:	mvnhi	sl, #0
   36094:	mvnhi	fp, #0
   36098:	strdhi	sl, [sp, #16]
   3609c:	ldrdhi	sl, [sp]
   360a0:	ldr	r0, [sp, #16]
   360a4:	cmp	r3, fp
   360a8:	ldr	r3, [sp, #20]
   360ac:	mul	r0, lr, r0
   360b0:	cmpeq	r2, sl
   360b4:	mla	r0, r1, r3, r0
   360b8:	ldr	r3, [sp, #16]
   360bc:	umull	r2, r3, r3, r1
   360c0:	strd	r2, [sp, #24]
   360c4:	movhi	r3, #1
   360c8:	movls	r3, #0
   360cc:	cmp	r7, fp
   360d0:	cmpeq	r6, sl
   360d4:	ldrd	r6, [sp, #16]
   360d8:	ldr	r2, [sp, #28]
   360dc:	movls	ip, r3
   360e0:	orrhi	ip, r3, #1
   360e4:	cmp	r7, fp
   360e8:	add	r2, r0, r2
   360ec:	cmpeq	r6, sl
   360f0:	str	r2, [sp, #28]
   360f4:	mvnhi	r2, #0
   360f8:	mvnhi	r3, #0
   360fc:	strdhi	r2, [sp, #24]
   36100:	ldrd	r6, [sp, #24]
   36104:	mul	r2, r1, r7
   36108:	umull	sl, fp, r1, r6
   3610c:	mla	r3, lr, r6, r2
   36110:	ldrd	r6, [sp]
   36114:	str	r3, [sp, #32]
   36118:	ldrd	r2, [sp, #16]
   3611c:	cmp	r3, r7
   36120:	cmpeq	r2, r6
   36124:	ldrd	r2, [sp, #24]
   36128:	orrhi	ip, ip, #1
   3612c:	cmp	r3, r7
   36130:	ldr	r3, [sp, #32]
   36134:	cmpeq	r2, r6
   36138:	add	r2, r3, fp
   3613c:	mov	fp, r2
   36140:	bhi	36884 <__assert_fail@plt+0x24ce0>
   36144:	strd	sl, [sp, #16]
   36148:	mul	r2, r1, fp
   3614c:	umull	r6, r7, r1, sl
   36150:	mla	r3, lr, sl, r2
   36154:	ldrd	sl, [sp]
   36158:	str	r3, [sp, #32]
   3615c:	ldrd	r2, [sp, #24]
   36160:	cmp	r3, fp
   36164:	cmpeq	r2, sl
   36168:	ldrd	r2, [sp, #16]
   3616c:	orrhi	ip, ip, #1
   36170:	cmp	fp, r3
   36174:	ldr	r3, [sp, #32]
   36178:	cmpeq	sl, r2
   3617c:	add	r2, r3, r7
   36180:	mov	r7, r2
   36184:	mvncc	r7, #0
   36188:	mvncc	r6, #0
   3618c:	mul	r2, r1, r7
   36190:	mov	sl, r6
   36194:	strd	r6, [sp, #24]
   36198:	mla	r0, lr, sl, r2
   3619c:	ldrd	r2, [sp, #16]
   361a0:	ldrd	sl, [sp]
   361a4:	umull	r6, r7, r1, r6
   361a8:	cmp	fp, r3
   361ac:	cmpeq	sl, r2
   361b0:	mov	r3, fp
   361b4:	mov	r2, sl
   361b8:	ldrd	sl, [sp, #24]
   361bc:	orrcc	ip, ip, #1
   361c0:	add	r7, r0, r7
   361c4:	cmp	r3, fp
   361c8:	cmpeq	r2, sl
   361cc:	mvncc	r6, #0
   361d0:	mvncc	r7, #0
   361d4:	umull	sl, fp, r1, r6
   361d8:	mul	r3, r1, r7
   361dc:	strd	sl, [sp, #16]
   361e0:	mla	r0, lr, r6, r3
   361e4:	ldrd	sl, [sp, #24]
   361e8:	ldrd	r2, [sp]
   361ec:	cmp	r3, fp
   361f0:	cmpeq	r2, sl
   361f4:	orrcc	ip, ip, #1
   361f8:	cmp	r3, r7
   361fc:	ldr	r3, [sp, #20]
   36200:	cmpeq	r2, r6
   36204:	add	r3, r0, r3
   36208:	str	r3, [sp, #20]
   3620c:	mvncc	r2, #0
   36210:	mvncc	r3, #0
   36214:	ldrdcs	r2, [sp, #16]
   36218:	ldrd	sl, [sp]
   3621c:	mul	r0, r1, r3
   36220:	cmp	fp, r7
   36224:	str	r0, [sp, #16]
   36228:	cmpeq	sl, r6
   3622c:	ldr	r6, [sp, #16]
   36230:	umull	r0, r1, r1, r2
   36234:	mla	lr, lr, r2, r6
   36238:	orrcc	ip, ip, #1
   3623c:	cmp	r3, fp
   36240:	cmpeq	r2, sl
   36244:	add	r1, lr, r1
   36248:	bls	36254 <__assert_fail@plt+0x246b0>
   3624c:	mvn	r0, #0
   36250:	mov	r1, r0
   36254:	cmp	r3, fp
   36258:	cmpeq	r2, sl
   3625c:	mov	r6, r0
   36260:	mov	r7, r1
   36264:	orrhi	ip, ip, #1
   36268:	b	35ecc <__assert_fail@plt+0x24328>
   3626c:	ldrd	sl, [sp]
   36270:	umull	r2, r3, r6, r1
   36274:	mul	r0, r6, lr
   36278:	cmp	r7, fp
   3627c:	cmpeq	r6, sl
   36280:	mvnhi	r2, #0
   36284:	mla	r0, r1, r7, r0
   36288:	umull	sl, fp, r1, r2
   3628c:	add	r3, r0, r3
   36290:	mvnhi	r3, #0
   36294:	strd	sl, [sp, #16]
   36298:	mul	r0, r1, r3
   3629c:	ldrd	sl, [sp]
   362a0:	mla	r0, lr, r2, r0
   362a4:	ldr	ip, [sp, #20]
   362a8:	cmp	fp, r3
   362ac:	add	r0, r0, ip
   362b0:	cmpeq	sl, r2
   362b4:	str	r0, [sp, #20]
   362b8:	mvncc	sl, #0
   362bc:	mvncc	fp, #0
   362c0:	strdcc	sl, [sp, #16]
   362c4:	ldrdcc	sl, [sp]
   362c8:	ldr	r0, [sp, #16]
   362cc:	cmp	fp, r3
   362d0:	cmpeq	sl, r2
   362d4:	mul	r0, lr, r0
   362d8:	ldr	r2, [sp, #20]
   362dc:	ldr	r3, [sp, #16]
   362e0:	movcc	ip, #1
   362e4:	movcs	ip, #0
   362e8:	cmp	r7, fp
   362ec:	cmpeq	r6, sl
   362f0:	ldrd	r6, [sp, #16]
   362f4:	mla	r0, r1, r2, r0
   362f8:	umull	r2, r3, r3, r1
   362fc:	orrhi	ip, ip, #1
   36300:	cmp	r7, fp
   36304:	cmpeq	r6, sl
   36308:	add	r3, r0, r3
   3630c:	mvnhi	r3, #0
   36310:	mvnhi	r2, #0
   36314:	mul	r0, r1, r3
   36318:	cmp	r7, fp
   3631c:	str	r0, [sp, #24]
   36320:	cmpeq	r6, sl
   36324:	ldr	r6, [sp, #24]
   36328:	umull	r0, r1, r1, r2
   3632c:	mla	lr, lr, r2, r6
   36330:	orrhi	ip, ip, #1
   36334:	cmp	fp, r3
   36338:	cmpeq	sl, r2
   3633c:	mvncc	r0, #0
   36340:	add	r1, lr, r1
   36344:	movcc	r1, r0
   36348:	b	35eb8 <__assert_fail@plt+0x24314>
   3634c:	cmp	r6, #0
   36350:	sbcs	r3, r7, #0
   36354:	blt	367ec <__assert_fail@plt+0x24c48>
   36358:	adds	r6, r6, r6
   3635c:	adc	r7, r7, r7
   36360:	mov	ip, #0
   36364:	b	35ecc <__assert_fail@plt+0x24328>
   36368:	mov	ip, #0
   3636c:	b	35ecc <__assert_fail@plt+0x24328>
   36370:	ldr	r3, [pc, #1396]	; 368ec <__assert_fail@plt+0x24d48>
   36374:	mvn	r2, #0
   36378:	cmp	r7, r3
   3637c:	cmpeq	r6, r2
   36380:	bhi	367ec <__assert_fail@plt+0x24c48>
   36384:	lsl	r3, r7, #9
   36388:	orr	r3, r3, r6, lsr #23
   3638c:	lsl	r2, r6, #9
   36390:	mov	r6, r2
   36394:	mov	r7, r3
   36398:	mov	ip, #0
   3639c:	b	35ecc <__assert_fail@plt+0x24328>
   363a0:	ldrd	sl, [sp]
   363a4:	umull	r2, r3, r6, r1
   363a8:	mul	r0, r6, lr
   363ac:	cmp	r7, fp
   363b0:	cmpeq	r6, sl
   363b4:	mvnhi	r2, #0
   363b8:	mla	r0, r1, r7, r0
   363bc:	umull	sl, fp, r2, r1
   363c0:	add	r3, r0, r3
   363c4:	mul	r0, lr, r2
   363c8:	mvnhi	r3, #0
   363cc:	strd	sl, [sp, #16]
   363d0:	ldrd	sl, [sp]
   363d4:	mla	r0, r1, r3, r0
   363d8:	ldr	ip, [sp, #20]
   363dc:	cmp	r3, fp
   363e0:	add	r0, r0, ip
   363e4:	cmpeq	r2, sl
   363e8:	str	r0, [sp, #20]
   363ec:	mvnhi	sl, #0
   363f0:	mvnhi	fp, #0
   363f4:	strdhi	sl, [sp, #16]
   363f8:	ldrdhi	sl, [sp]
   363fc:	ldr	r0, [sp, #16]
   36400:	cmp	r3, fp
   36404:	ldr	r3, [sp, #20]
   36408:	mul	r0, lr, r0
   3640c:	cmpeq	r2, sl
   36410:	mla	r0, r1, r3, r0
   36414:	ldr	r3, [sp, #16]
   36418:	umull	r2, r3, r3, r1
   3641c:	strd	r2, [sp, #24]
   36420:	movhi	r3, #1
   36424:	movls	r3, #0
   36428:	cmp	r7, fp
   3642c:	cmpeq	r6, sl
   36430:	ldrd	r6, [sp, #16]
   36434:	ldr	r2, [sp, #28]
   36438:	movls	ip, r3
   3643c:	orrhi	ip, r3, #1
   36440:	cmp	r7, fp
   36444:	add	r2, r0, r2
   36448:	cmpeq	r6, sl
   3644c:	str	r2, [sp, #28]
   36450:	mvnhi	r2, #0
   36454:	mvnhi	r3, #0
   36458:	strdhi	r2, [sp, #24]
   3645c:	ldrd	r6, [sp, #24]
   36460:	mul	r2, lr, r6
   36464:	umull	sl, fp, r6, r1
   36468:	mla	r3, r1, r7, r2
   3646c:	ldrd	r6, [sp]
   36470:	str	r3, [sp, #32]
   36474:	ldrd	r2, [sp, #16]
   36478:	cmp	r3, r7
   3647c:	cmpeq	r2, r6
   36480:	ldrd	r2, [sp, #24]
   36484:	orrhi	ip, ip, #1
   36488:	cmp	r3, r7
   3648c:	ldr	r3, [sp, #32]
   36490:	cmpeq	r2, r6
   36494:	add	r2, r3, fp
   36498:	mov	fp, r2
   3649c:	bhi	368b4 <__assert_fail@plt+0x24d10>
   364a0:	strd	sl, [sp, #16]
   364a4:	mul	r2, lr, sl
   364a8:	umull	r6, r7, sl, r1
   364ac:	mla	r3, r1, fp, r2
   364b0:	ldrd	sl, [sp]
   364b4:	str	r3, [sp, #32]
   364b8:	ldrd	r2, [sp, #24]
   364bc:	cmp	r3, fp
   364c0:	cmpeq	r2, sl
   364c4:	ldrd	r2, [sp, #16]
   364c8:	orrhi	ip, ip, #1
   364cc:	cmp	r3, fp
   364d0:	ldr	r3, [sp, #32]
   364d4:	cmpeq	r2, sl
   364d8:	add	r2, r3, r7
   364dc:	mov	r7, r2
   364e0:	mvnhi	r7, #0
   364e4:	mvnhi	r6, #0
   364e8:	mul	r2, r1, r7
   364ec:	mov	sl, r6
   364f0:	strd	r6, [sp, #24]
   364f4:	mla	r0, lr, sl, r2
   364f8:	ldrd	sl, [sp]
   364fc:	ldrd	r2, [sp, #16]
   36500:	umull	r6, r7, r1, r6
   36504:	cmp	r3, fp
   36508:	cmpeq	r2, sl
   3650c:	mov	r3, ip
   36510:	orrhi	r3, r3, #1
   36514:	mov	r2, sl
   36518:	str	r3, [sp, #16]
   3651c:	mov	r3, fp
   36520:	ldrd	sl, [sp, #24]
   36524:	add	r7, r0, r7
   36528:	cmp	r3, fp
   3652c:	cmpeq	r2, sl
   36530:	bcc	35fe0 <__assert_fail@plt+0x2443c>
   36534:	mov	r2, r6
   36538:	mov	r3, r7
   3653c:	b	35fe8 <__assert_fail@plt+0x24444>
   36540:	ldrd	sl, [sp]
   36544:	umull	r2, r3, r6, r1
   36548:	mul	r0, r6, lr
   3654c:	cmp	r7, fp
   36550:	cmpeq	r6, sl
   36554:	mvnhi	r2, #0
   36558:	mla	r0, r1, r7, r0
   3655c:	umull	sl, fp, r2, r1
   36560:	add	r3, r0, r3
   36564:	mul	r0, lr, r2
   36568:	mvnhi	r3, #0
   3656c:	strd	sl, [sp, #16]
   36570:	ldrd	sl, [sp]
   36574:	mla	r0, r1, r3, r0
   36578:	ldr	ip, [sp, #20]
   3657c:	cmp	r3, fp
   36580:	add	r0, r0, ip
   36584:	cmpeq	r2, sl
   36588:	str	r0, [sp, #20]
   3658c:	mvnhi	sl, #0
   36590:	mvnhi	fp, #0
   36594:	strdhi	sl, [sp, #16]
   36598:	ldrdhi	sl, [sp]
   3659c:	ldr	r0, [sp, #16]
   365a0:	cmp	r3, fp
   365a4:	ldr	ip, [sp, #20]
   365a8:	mul	r0, lr, r0
   365ac:	ldr	r3, [sp, #16]
   365b0:	cmpeq	r2, sl
   365b4:	mla	r0, r1, ip, r0
   365b8:	umull	r2, r3, r3, r1
   365bc:	movhi	r1, #1
   365c0:	movls	r1, #0
   365c4:	cmp	r7, fp
   365c8:	cmpeq	r6, sl
   365cc:	ldrd	r6, [sp, #16]
   365d0:	movls	ip, r1
   365d4:	orrhi	ip, r1, #1
   365d8:	cmp	r7, fp
   365dc:	cmpeq	r6, sl
   365e0:	mvnhi	r2, #0
   365e4:	add	r3, r0, r3
   365e8:	movhi	r3, r2
   365ec:	cmp	r7, fp
   365f0:	cmpeq	r6, sl
   365f4:	mov	r7, r3
   365f8:	mov	r6, r2
   365fc:	orrhi	ip, ip, #1
   36600:	b	35ecc <__assert_fail@plt+0x24328>
   36604:	ldrd	sl, [sp]
   36608:	umull	r2, r3, r6, r1
   3660c:	mul	r0, r6, lr
   36610:	cmp	r7, fp
   36614:	cmpeq	r6, sl
   36618:	mvnhi	r2, #0
   3661c:	mla	r0, r1, r7, r0
   36620:	umull	sl, fp, r1, r2
   36624:	add	r3, r0, r3
   36628:	mvnhi	r3, #0
   3662c:	strd	sl, [sp, #16]
   36630:	mul	r0, r1, r3
   36634:	ldrd	sl, [sp]
   36638:	mla	r0, lr, r2, r0
   3663c:	ldr	ip, [sp, #20]
   36640:	cmp	fp, r3
   36644:	add	r0, r0, ip
   36648:	cmpeq	sl, r2
   3664c:	str	r0, [sp, #20]
   36650:	mvncc	sl, #0
   36654:	mvncc	fp, #0
   36658:	strdcc	sl, [sp, #16]
   3665c:	ldrdcc	sl, [sp]
   36660:	ldr	r0, [sp, #16]
   36664:	cmp	fp, r3
   36668:	ldr	r3, [sp, #20]
   3666c:	mul	r0, lr, r0
   36670:	cmpeq	sl, r2
   36674:	mla	r0, r1, r3, r0
   36678:	ldr	r3, [sp, #16]
   3667c:	umull	r2, r3, r3, r1
   36680:	strd	r2, [sp, #24]
   36684:	movcc	r3, #1
   36688:	movcs	r3, #0
   3668c:	cmp	r7, fp
   36690:	cmpeq	r6, sl
   36694:	movls	ip, r3
   36698:	orrhi	ip, r3, #1
   3669c:	ldrd	r2, [sp, #16]
   366a0:	cmp	r3, fp
   366a4:	ldr	r3, [sp, #28]
   366a8:	cmpeq	r2, sl
   366ac:	add	r3, r0, r3
   366b0:	str	r3, [sp, #28]
   366b4:	bhi	3686c <__assert_fail@plt+0x24cc8>
   366b8:	ldrd	r2, [sp, #24]
   366bc:	mov	sl, r2
   366c0:	mov	fp, r3
   366c4:	mul	r2, lr, sl
   366c8:	umull	r6, r7, sl, r1
   366cc:	mla	r0, r1, fp, r2
   366d0:	ldrd	r2, [sp]
   366d4:	add	r7, r0, r7
   366d8:	mov	sl, r2
   366dc:	mov	fp, r3
   366e0:	strd	r2, [sp, #32]
   366e4:	ldrd	r2, [sp, #16]
   366e8:	cmp	r3, fp
   366ec:	cmpeq	r2, sl
   366f0:	ldrd	r2, [sp, #32]
   366f4:	ldrd	sl, [sp, #24]
   366f8:	orrhi	ip, ip, #1
   366fc:	cmp	fp, r3
   36700:	cmpeq	sl, r2
   36704:	mvnhi	r6, #0
   36708:	mvnhi	r7, #0
   3670c:	umull	sl, fp, r6, r1
   36710:	mul	r3, lr, r6
   36714:	strd	sl, [sp, #16]
   36718:	mla	r0, r1, r7, r3
   3671c:	ldrd	sl, [sp, #24]
   36720:	ldrd	r2, [sp]
   36724:	cmp	fp, r3
   36728:	cmpeq	sl, r2
   3672c:	orrhi	ip, ip, #1
   36730:	cmp	r7, r3
   36734:	ldr	r3, [sp, #20]
   36738:	cmpeq	r6, r2
   3673c:	add	r3, r0, r3
   36740:	str	r3, [sp, #20]
   36744:	mvnhi	r2, #0
   36748:	mvnhi	r3, #0
   3674c:	ldrdls	r2, [sp, #16]
   36750:	ldrd	sl, [sp]
   36754:	mul	r0, r1, r3
   36758:	cmp	r7, fp
   3675c:	str	r0, [sp, #16]
   36760:	cmpeq	r6, sl
   36764:	ldr	r6, [sp, #16]
   36768:	umull	r0, r1, r1, r2
   3676c:	mla	lr, lr, r2, r6
   36770:	orrhi	ip, ip, #1
   36774:	cmp	r3, fp
   36778:	cmpeq	r2, sl
   3677c:	add	r1, lr, r1
   36780:	bls	36254 <__assert_fail@plt+0x246b0>
   36784:	b	3624c <__assert_fail@plt+0x246a8>
   36788:	ldr	r3, [pc, #344]	; 368e8 <__assert_fail@plt+0x24d44>
   3678c:	mvn	r2, #0
   36790:	cmp	r7, r3
   36794:	cmpeq	r6, r2
   36798:	bhi	367ec <__assert_fail@plt+0x24c48>
   3679c:	lsl	r3, r7, #10
   367a0:	orr	r3, r3, r6, lsr #22
   367a4:	lsl	r2, r6, #10
   367a8:	mov	r6, r2
   367ac:	mov	r7, r3
   367b0:	mov	ip, #0
   367b4:	b	35ecc <__assert_fail@plt+0x24328>
   367b8:	strd	r6, [r8]
   367bc:	orr	r4, r4, #2
   367c0:	b	35b9c <__assert_fail@plt+0x23ff8>
   367c4:	ldrd	r2, [sp]
   367c8:	cmp	r7, r3
   367cc:	cmpeq	r6, r2
   367d0:	bhi	367ec <__assert_fail@plt+0x24c48>
   367d4:	mul	r3, r6, lr
   367d8:	mov	ip, #0
   367dc:	mla	r3, r1, r7, r3
   367e0:	umull	r6, r7, r6, r1
   367e4:	add	r7, r3, r7
   367e8:	b	35ecc <__assert_fail@plt+0x24328>
   367ec:	mvn	r6, #0
   367f0:	mvn	r7, #0
   367f4:	mov	ip, #1
   367f8:	b	35ecc <__assert_fail@plt+0x24328>
   367fc:	ldrb	r3, [r9, #2]
   36800:	mvn	r2, #0
   36804:	mov	r1, #1024	; 0x400
   36808:	cmp	r3, #66	; 0x42
   3680c:	ldr	r3, [pc, #212]	; 368e8 <__assert_fail@plt+0x24d44>
   36810:	mov	lr, #0
   36814:	strd	r2, [sp]
   36818:	moveq	r3, #3
   3681c:	streq	r3, [sp, #12]
   36820:	movne	r3, #1
   36824:	strne	r3, [sp, #12]
   36828:	b	35d78 <__assert_fail@plt+0x241d4>
   3682c:	add	r3, pc, #172	; 0xac
   36830:	ldrd	r2, [r3]
   36834:	mov	r1, #1000	; 0x3e8
   36838:	mov	lr, #0
   3683c:	strd	r2, [sp]
   36840:	mov	r3, #2
   36844:	str	r3, [sp, #12]
   36848:	b	35d78 <__assert_fail@plt+0x241d4>
   3684c:	ldr	r3, [pc, #148]	; 368e8 <__assert_fail@plt+0x24d44>
   36850:	mvn	r2, #0
   36854:	mov	lr, r0
   36858:	strd	r2, [sp]
   3685c:	mov	r3, #1
   36860:	mov	r1, #1024	; 0x400
   36864:	str	r3, [sp, #12]
   36868:	b	35d78 <__assert_fail@plt+0x241d4>
   3686c:	mvn	r2, #0
   36870:	mvn	r3, #0
   36874:	mov	sl, r2
   36878:	strd	r2, [sp, #24]
   3687c:	mov	fp, r3
   36880:	b	366c4 <__assert_fail@plt+0x24b20>
   36884:	mvn	r2, #0
   36888:	mvn	r3, #0
   3688c:	mov	sl, r2
   36890:	strd	r2, [sp, #16]
   36894:	mov	fp, r3
   36898:	b	36148 <__assert_fail@plt+0x245a4>
   3689c:	mvn	r2, #0
   368a0:	mvn	r3, #0
   368a4:	mov	sl, r2
   368a8:	strd	r2, [sp, #24]
   368ac:	mov	fp, r3
   368b0:	b	35fa0 <__assert_fail@plt+0x243fc>
   368b4:	mvn	r2, #0
   368b8:	mvn	r3, #0
   368bc:	mov	sl, r2
   368c0:	strd	r2, [sp, #16]
   368c4:	mov	fp, r3
   368c8:	b	364a4 <__assert_fail@plt+0x24900>
   368cc:	ldr	r3, [pc, #28]	; 368f0 <__assert_fail@plt+0x24d4c>
   368d0:	mov	r2, #85	; 0x55
   368d4:	ldr	r1, [pc, #24]	; 368f4 <__assert_fail@plt+0x24d50>
   368d8:	ldr	r0, [pc, #24]	; 368f8 <__assert_fail@plt+0x24d54>
   368dc:	bl	11ba4 <__assert_fail@plt>
   368e0:	blmi	ff1e08a4 <optarg@@GLIBC_2.4+0xff195664>
   368e4:	subeq	r8, r1, r7, lsr r9
   368e8:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   368ec:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   368f0:	andeq	sl, r3, r0, ror #13
   368f4:	andeq	sl, r3, r0, asr #12
   368f8:	andeq	sl, r3, r0, asr r6
   368fc:	cmp	r1, #0
   36900:	cmpne	r0, #0
   36904:	moveq	r1, #1
   36908:	moveq	r0, r1
   3690c:	umull	r2, r3, r0, r1
   36910:	adds	r3, r3, #0
   36914:	movne	r3, #1
   36918:	cmp	r2, #0
   3691c:	blt	3692c <__assert_fail@plt+0x24d88>
   36920:	cmp	r3, #0
   36924:	bne	3692c <__assert_fail@plt+0x24d88>
   36928:	b	116ac <calloc@plt>
   3692c:	push	{r4, lr}
   36930:	bl	119b8 <__errno_location@plt>
   36934:	mov	r3, #12
   36938:	str	r3, [r0]
   3693c:	mov	r0, #0
   36940:	pop	{r4, pc}
   36944:	cmp	r0, #0
   36948:	moveq	r0, #1
   3694c:	cmp	r0, #0
   36950:	blt	36958 <__assert_fail@plt+0x24db4>
   36954:	b	118f8 <malloc@plt>
   36958:	push	{r4, lr}
   3695c:	bl	119b8 <__errno_location@plt>
   36960:	mov	r3, #12
   36964:	str	r3, [r0]
   36968:	mov	r0, #0
   3696c:	pop	{r4, pc}
   36970:	cmp	r0, #0
   36974:	beq	36998 <__assert_fail@plt+0x24df4>
   36978:	cmp	r1, #0
   3697c:	push	{lr}		; (str lr, [sp, #-4]!)
   36980:	sub	sp, sp, #12
   36984:	beq	369a0 <__assert_fail@plt+0x24dfc>
   36988:	blt	369b8 <__assert_fail@plt+0x24e14>
   3698c:	add	sp, sp, #12
   36990:	pop	{lr}		; (ldr lr, [sp], #4)
   36994:	b	117f0 <realloc@plt>
   36998:	mov	r0, r1
   3699c:	b	36944 <__assert_fail@plt+0x24da0>
   369a0:	str	r1, [sp, #4]
   369a4:	bl	184ec <__assert_fail@plt+0x6948>
   369a8:	ldr	r3, [sp, #4]
   369ac:	mov	r0, r3
   369b0:	add	sp, sp, #12
   369b4:	pop	{pc}		; (ldr pc, [sp], #4)
   369b8:	bl	119b8 <__errno_location@plt>
   369bc:	mov	r2, #12
   369c0:	mov	r3, #0
   369c4:	str	r2, [r0]
   369c8:	b	369ac <__assert_fail@plt+0x24e08>
   369cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   369d0:	cmp	r3, #2
   369d4:	sub	sp, sp, #1040	; 0x410
   369d8:	sub	sp, sp, #12
   369dc:	mov	r4, r3
   369e0:	mov	r5, r0
   369e4:	mov	fp, r1
   369e8:	mov	r6, r2
   369ec:	bhi	36d48 <__assert_fail@plt+0x251a4>
   369f0:	sub	r3, r3, #1
   369f4:	mov	r7, r3
   369f8:	mov	r3, #1
   369fc:	str	r3, [sp]
   36a00:	add	r2, sp, #1040	; 0x410
   36a04:	add	r3, sp, #20
   36a08:	add	r2, r2, #4
   36a0c:	str	r4, [r3, #4]!
   36a10:	cmp	r2, r3
   36a14:	bne	36a0c <__assert_fail@plt+0x24e68>
   36a18:	cmp	r4, #0
   36a1c:	subne	r3, r4, #1
   36a20:	subne	r1, r6, #1
   36a24:	beq	36a44 <__assert_fail@plt+0x24ea0>
   36a28:	ldrb	r2, [r1, #1]!
   36a2c:	add	r0, sp, #1040	; 0x410
   36a30:	add	r0, r0, #8
   36a34:	add	r2, r0, r2, lsl #2
   36a38:	str	r3, [r2, #-1024]	; 0xfffffc00
   36a3c:	subs	r3, r3, #1
   36a40:	bcs	36a28 <__assert_fail@plt+0x24e84>
   36a44:	ldr	r8, [sp]
   36a48:	mov	r2, r7
   36a4c:	add	r1, r6, r8
   36a50:	mov	r0, r6
   36a54:	bl	117c0 <memcmp@plt>
   36a58:	subs	sl, r0, #0
   36a5c:	bne	36bdc <__assert_fail@plt+0x25038>
   36a60:	sub	r2, r7, #1
   36a64:	str	r2, [sp, #4]
   36a68:	add	r2, r6, r2
   36a6c:	mov	r3, r7
   36a70:	str	r2, [sp, #16]
   36a74:	sub	r2, r4, r8
   36a78:	str	r2, [sp, #12]
   36a7c:	rsb	r2, r3, #1
   36a80:	str	r6, [sp, #8]
   36a84:	mov	r9, sl
   36a88:	sub	r7, r4, #1
   36a8c:	str	r2, [sp, #20]
   36a90:	mov	r0, fp
   36a94:	mov	r6, r3
   36a98:	b	36ab8 <__assert_fail@plt+0x24f14>
   36a9c:	ldr	r3, [sp]
   36aa0:	cmp	sl, #0
   36aa4:	cmpne	ip, r3
   36aa8:	mov	sl, #0
   36aac:	ldrcc	ip, [sp, #12]
   36ab0:	add	r9, r9, ip
   36ab4:	mov	r0, r8
   36ab8:	add	r8, r9, r4
   36abc:	sub	r2, r8, r0
   36ac0:	mov	r1, #0
   36ac4:	add	r0, r5, r0
   36ac8:	bl	11a24 <memchr@plt>
   36acc:	cmp	r8, #0
   36ad0:	clz	r0, r0
   36ad4:	lsr	r0, r0, #5
   36ad8:	moveq	r0, #0
   36adc:	cmp	r0, #0
   36ae0:	beq	36d1c <__assert_fail@plt+0x25178>
   36ae4:	add	r3, r5, r8
   36ae8:	add	r2, sp, #1040	; 0x410
   36aec:	ldrb	r3, [r3, #-1]
   36af0:	add	r2, r2, #8
   36af4:	add	r3, r2, r3, lsl #2
   36af8:	ldr	ip, [r3, #-1024]	; 0xfffffc00
   36afc:	cmp	ip, #0
   36b00:	bne	36a9c <__assert_fail@plt+0x24ef8>
   36b04:	cmp	sl, r6
   36b08:	movcs	r3, sl
   36b0c:	movcc	r3, r6
   36b10:	cmp	r7, r3
   36b14:	bls	36b58 <__assert_fail@plt+0x24fb4>
   36b18:	ldr	r1, [sp, #8]
   36b1c:	add	r2, r9, r3
   36b20:	ldrb	lr, [r1, r3]
   36b24:	ldrb	r0, [r5, r2]
   36b28:	add	r1, r1, r3
   36b2c:	add	r2, r5, r2
   36b30:	cmp	lr, r0
   36b34:	beq	36b4c <__assert_fail@plt+0x24fa8>
   36b38:	b	36bc8 <__assert_fail@plt+0x25024>
   36b3c:	ldrb	lr, [r1, #1]!
   36b40:	ldrb	r0, [r2, #1]!
   36b44:	cmp	lr, r0
   36b48:	bne	36bc8 <__assert_fail@plt+0x25024>
   36b4c:	add	r3, r3, #1
   36b50:	cmp	r7, r3
   36b54:	bhi	36b3c <__assert_fail@plt+0x24f98>
   36b58:	cmp	sl, r6
   36b5c:	ldr	r1, [sp, #4]
   36b60:	bcs	36e70 <__assert_fail@plt+0x252cc>
   36b64:	ldr	ip, [sp, #16]
   36b68:	add	r2, r9, r1
   36b6c:	ldrb	r3, [ip]
   36b70:	ldrb	r0, [r5, r2]
   36b74:	add	r2, r5, r2
   36b78:	cmp	r0, r3
   36b7c:	bne	36e70 <__assert_fail@plt+0x252cc>
   36b80:	mov	r0, ip
   36b84:	sub	fp, sl, #1
   36b88:	b	36ba0 <__assert_fail@plt+0x24ffc>
   36b8c:	ldrb	lr, [r0, #-1]!
   36b90:	ldrb	ip, [r2, #-1]!
   36b94:	cmp	lr, ip
   36b98:	bne	36bac <__assert_fail@plt+0x25008>
   36b9c:	mov	r1, r3
   36ba0:	sub	r3, r1, #1
   36ba4:	cmp	r3, fp
   36ba8:	bne	36b8c <__assert_fail@plt+0x24fe8>
   36bac:	add	sl, sl, #1
   36bb0:	cmp	sl, r1
   36bb4:	bhi	36d18 <__assert_fail@plt+0x25174>
   36bb8:	ldr	r3, [sp]
   36bbc:	ldr	sl, [sp, #12]
   36bc0:	add	r9, r9, r3
   36bc4:	b	36ab4 <__assert_fail@plt+0x24f10>
   36bc8:	ldr	r2, [sp, #20]
   36bcc:	mov	sl, ip
   36bd0:	add	r9, r2, r9
   36bd4:	add	r9, r3, r9
   36bd8:	b	36ab4 <__assert_fail@plt+0x24f10>
   36bdc:	sub	r3, r4, r7
   36be0:	cmp	r3, r7
   36be4:	movcc	r3, r7
   36be8:	sub	r1, r7, #1
   36bec:	add	r3, r3, #1
   36bf0:	mov	r2, r7
   36bf4:	mov	r9, #0
   36bf8:	str	r3, [sp, #8]
   36bfc:	add	r3, r6, r1
   36c00:	str	r3, [sp, #12]
   36c04:	sub	r7, r4, #1
   36c08:	add	r3, r6, r2
   36c0c:	mov	r0, fp
   36c10:	mov	sl, r9
   36c14:	mov	fp, r6
   36c18:	mov	r6, r4
   36c1c:	mov	r4, r2
   36c20:	str	r3, [sp]
   36c24:	rsb	r3, r2, #1
   36c28:	str	r1, [sp, #4]
   36c2c:	str	r3, [sp, #16]
   36c30:	add	r8, r9, r6
   36c34:	sub	r2, r8, r0
   36c38:	mov	r1, sl
   36c3c:	add	r0, r5, r0
   36c40:	bl	11a24 <memchr@plt>
   36c44:	adds	r3, r8, #0
   36c48:	movne	r3, #1
   36c4c:	cmp	r0, #0
   36c50:	movne	r3, #0
   36c54:	cmp	r3, #0
   36c58:	mov	r0, r3
   36c5c:	beq	36d1c <__assert_fail@plt+0x25178>
   36c60:	add	r2, r5, r8
   36c64:	add	r3, sp, #1040	; 0x410
   36c68:	ldrb	r2, [r2, #-1]
   36c6c:	add	r3, r3, #8
   36c70:	add	r2, r3, r2, lsl #2
   36c74:	ldr	r2, [r2, #-1024]	; 0xfffffc00
   36c78:	cmp	r2, #0
   36c7c:	bne	36d30 <__assert_fail@plt+0x2518c>
   36c80:	cmp	r4, r7
   36c84:	bcs	36cd0 <__assert_fail@plt+0x2512c>
   36c88:	ldr	r3, [sp]
   36c8c:	add	r1, r9, r4
   36c90:	ldrb	r0, [r3]
   36c94:	ldrb	r2, [r5, r1]
   36c98:	add	r1, r5, r1
   36c9c:	cmp	r0, r2
   36ca0:	movne	r2, r4
   36ca4:	bne	36d28 <__assert_fail@plt+0x25184>
   36ca8:	mov	r0, r3
   36cac:	mov	r2, r4
   36cb0:	b	36cc4 <__assert_fail@plt+0x25120>
   36cb4:	ldrb	ip, [r0, #1]!
   36cb8:	ldrb	r3, [r1, #1]!
   36cbc:	cmp	ip, r3
   36cc0:	bne	36d28 <__assert_fail@plt+0x25184>
   36cc4:	add	r2, r2, #1
   36cc8:	cmp	r2, r7
   36ccc:	bcc	36cb4 <__assert_fail@plt+0x25110>
   36cd0:	ldr	r3, [sp, #4]
   36cd4:	cmn	r3, #1
   36cd8:	beq	36d18 <__assert_fail@plt+0x25174>
   36cdc:	add	r1, r9, r3
   36ce0:	ldr	r3, [sp, #12]
   36ce4:	ldrb	r2, [r5, r1]
   36ce8:	add	r1, r5, r1
   36cec:	ldrb	r0, [r3]
   36cf0:	cmp	r0, r2
   36cf4:	bne	36d3c <__assert_fail@plt+0x25198>
   36cf8:	mov	r2, r3
   36cfc:	b	36d10 <__assert_fail@plt+0x2516c>
   36d00:	ldrb	r0, [r2, #-1]!
   36d04:	ldrb	r3, [r1, #-1]!
   36d08:	cmp	r0, r3
   36d0c:	bne	36d3c <__assert_fail@plt+0x25198>
   36d10:	cmp	fp, r2
   36d14:	bne	36d00 <__assert_fail@plt+0x2515c>
   36d18:	add	r0, r5, r9
   36d1c:	add	sp, sp, #1040	; 0x410
   36d20:	add	sp, sp, #12
   36d24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36d28:	ldr	r3, [sp, #16]
   36d2c:	add	r9, r3, r9
   36d30:	add	r9, r2, r9
   36d34:	mov	r0, r8
   36d38:	b	36c30 <__assert_fail@plt+0x2508c>
   36d3c:	ldr	r3, [sp, #8]
   36d40:	add	r9, r9, r3
   36d44:	b	36d34 <__assert_fail@plt+0x25190>
   36d48:	mov	ip, #1
   36d4c:	mov	r2, ip
   36d50:	mov	r8, ip
   36d54:	mov	r1, #0
   36d58:	mvn	r0, #0
   36d5c:	add	r3, r2, r1
   36d60:	cmp	r4, r3
   36d64:	add	lr, r6, r0
   36d68:	bls	36d98 <__assert_fail@plt+0x251f4>
   36d6c:	ldrb	lr, [lr, r2]
   36d70:	ldrb	r7, [r6, r3]
   36d74:	cmp	r7, lr
   36d78:	bcs	36e2c <__assert_fail@plt+0x25288>
   36d7c:	mov	r1, r3
   36d80:	mov	r2, #1
   36d84:	sub	ip, r3, r0
   36d88:	add	r3, r2, r1
   36d8c:	cmp	r4, r3
   36d90:	add	lr, r6, r0
   36d94:	bhi	36d6c <__assert_fail@plt+0x251c8>
   36d98:	mov	r3, #1
   36d9c:	mov	r8, r3
   36da0:	mov	r2, r3
   36da4:	mov	r1, #0
   36da8:	mvn	r7, #0
   36dac:	str	r3, [sp]
   36db0:	add	r3, r2, r1
   36db4:	cmp	r4, r3
   36db8:	add	lr, r6, r7
   36dbc:	bls	36df0 <__assert_fail@plt+0x2524c>
   36dc0:	ldrb	lr, [lr, r2]
   36dc4:	ldrb	r9, [r6, r3]
   36dc8:	cmp	r9, lr
   36dcc:	bls	36e14 <__assert_fail@plt+0x25270>
   36dd0:	sub	r2, r3, r7
   36dd4:	str	r2, [sp]
   36dd8:	mov	r1, r3
   36ddc:	mov	r2, #1
   36de0:	add	r3, r2, r1
   36de4:	cmp	r4, r3
   36de8:	add	lr, r6, r7
   36dec:	bhi	36dc0 <__assert_fail@plt+0x2521c>
   36df0:	add	r3, r7, #1
   36df4:	add	r0, r0, #1
   36df8:	cmp	r3, r0
   36dfc:	ldr	r2, [sp]
   36e00:	movcc	r3, r0
   36e04:	movcc	r2, ip
   36e08:	str	r2, [sp]
   36e0c:	mov	r7, r3
   36e10:	b	36a00 <__assert_fail@plt+0x24e5c>
   36e14:	beq	36e44 <__assert_fail@plt+0x252a0>
   36e18:	mov	r7, r1
   36e1c:	str	r8, [sp]
   36e20:	add	r1, r1, #1
   36e24:	mov	r2, #1
   36e28:	b	36db0 <__assert_fail@plt+0x2520c>
   36e2c:	beq	36e5c <__assert_fail@plt+0x252b8>
   36e30:	mov	r0, r1
   36e34:	mov	ip, r8
   36e38:	add	r1, r1, #1
   36e3c:	mov	r2, #1
   36e40:	b	36d5c <__assert_fail@plt+0x251b8>
   36e44:	ldr	lr, [sp]
   36e48:	cmp	r2, lr
   36e4c:	addne	r2, r2, #1
   36e50:	moveq	r1, r3
   36e54:	moveq	r2, #1
   36e58:	b	36db0 <__assert_fail@plt+0x2520c>
   36e5c:	cmp	r2, ip
   36e60:	addne	r2, r2, #1
   36e64:	moveq	r1, r3
   36e68:	moveq	r2, #1
   36e6c:	b	36d5c <__assert_fail@plt+0x251b8>
   36e70:	mov	r1, r6
   36e74:	b	36bac <__assert_fail@plt+0x25008>
   36e78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36e7c:	sub	sp, sp, #28
   36e80:	ldrb	r2, [r0]
   36e84:	cmp	r2, #0
   36e88:	beq	37310 <__assert_fail@plt+0x2576c>
   36e8c:	ldrb	ip, [r1]
   36e90:	cmp	ip, #0
   36e94:	beq	36f48 <__assert_fail@plt+0x253a4>
   36e98:	mov	r8, r0
   36e9c:	add	lr, r1, #1
   36ea0:	mov	sl, #1
   36ea4:	b	36eb4 <__assert_fail@plt+0x25310>
   36ea8:	ldrb	ip, [lr], #1
   36eac:	cmp	ip, #0
   36eb0:	beq	36edc <__assert_fail@plt+0x25338>
   36eb4:	cmp	ip, r2
   36eb8:	movne	sl, #0
   36ebc:	andeq	sl, sl, #1
   36ec0:	ldrb	r2, [r8, #1]!
   36ec4:	mov	r6, lr
   36ec8:	cmp	r2, #0
   36ecc:	bne	36ea8 <__assert_fail@plt+0x25304>
   36ed0:	ldrb	r3, [r6]
   36ed4:	cmp	r3, #0
   36ed8:	bne	36f44 <__assert_fail@plt+0x253a0>
   36edc:	cmp	sl, #0
   36ee0:	bne	36f48 <__assert_fail@plt+0x253a4>
   36ee4:	mov	r4, r1
   36ee8:	mov	r5, r0
   36eec:	ldrb	r1, [r1]
   36ef0:	add	r0, r0, #1
   36ef4:	bl	11994 <strchr@plt>
   36ef8:	sub	r4, r6, r4
   36efc:	subs	r7, r0, #0
   36f00:	beq	36f44 <__assert_fail@plt+0x253a0>
   36f04:	cmp	r4, #1
   36f08:	beq	37308 <__assert_fail@plt+0x25764>
   36f0c:	add	r0, r5, r4
   36f10:	cmp	r7, r0
   36f14:	subls	r1, r0, r7
   36f18:	movhi	r1, #1
   36f1c:	cmp	r4, #31
   36f20:	sub	r6, r6, r4
   36f24:	mov	r9, r1
   36f28:	bls	36f50 <__assert_fail@plt+0x253ac>
   36f2c:	mov	r3, r4
   36f30:	mov	r2, r6
   36f34:	mov	r0, r7
   36f38:	add	sp, sp, #28
   36f3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36f40:	b	369cc <__assert_fail@plt+0x24e28>
   36f44:	mov	r0, #0
   36f48:	add	sp, sp, #28
   36f4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36f50:	cmp	r4, #2
   36f54:	bhi	371d8 <__assert_fail@plt+0x25634>
   36f58:	mov	r3, #1
   36f5c:	sub	r8, r4, #1
   36f60:	mov	r5, r3
   36f64:	str	r3, [sp, #4]
   36f68:	mov	r2, r8
   36f6c:	add	r1, r6, r5
   36f70:	mov	r0, r6
   36f74:	bl	117c0 <memcmp@plt>
   36f78:	subs	fp, r0, #0
   36f7c:	bne	370b4 <__assert_fail@plt+0x25510>
   36f80:	sub	r3, r8, #1
   36f84:	str	r3, [sp, #8]
   36f88:	add	r3, r6, r3
   36f8c:	str	r3, [sp, #20]
   36f90:	mov	sl, fp
   36f94:	sub	r3, r4, r5
   36f98:	mov	r0, r9
   36f9c:	str	r3, [sp, #16]
   36fa0:	rsb	r3, r8, #1
   36fa4:	str	r3, [sp, #12]
   36fa8:	add	r5, r4, sl
   36fac:	sub	r2, r5, r0
   36fb0:	mov	r1, #0
   36fb4:	add	r0, r7, r0
   36fb8:	bl	11a24 <memchr@plt>
   36fbc:	adds	r3, r5, #0
   36fc0:	movne	r3, #1
   36fc4:	cmp	r0, #0
   36fc8:	movne	r3, #0
   36fcc:	cmp	r3, #0
   36fd0:	mov	r0, r3
   36fd4:	beq	36f48 <__assert_fail@plt+0x253a4>
   36fd8:	cmp	r8, fp
   36fdc:	movcs	r3, r8
   36fe0:	movcc	r3, fp
   36fe4:	cmp	r4, r3
   36fe8:	bls	37028 <__assert_fail@plt+0x25484>
   36fec:	add	r2, r3, sl
   36ff0:	ldrb	r1, [r6, r3]
   36ff4:	ldrb	r0, [r7, r2]
   36ff8:	add	ip, r6, r3
   36ffc:	add	r2, r7, r2
   37000:	cmp	r1, r0
   37004:	beq	3701c <__assert_fail@plt+0x25478>
   37008:	b	370a0 <__assert_fail@plt+0x254fc>
   3700c:	ldrb	r0, [ip, #1]!
   37010:	ldrb	r1, [r2, #1]!
   37014:	cmp	r0, r1
   37018:	bne	370a0 <__assert_fail@plt+0x254fc>
   3701c:	add	r3, r3, #1
   37020:	cmp	r4, r3
   37024:	bne	3700c <__assert_fail@plt+0x25468>
   37028:	ldr	r3, [sp, #8]
   3702c:	cmp	r8, fp
   37030:	mov	r1, r3
   37034:	bls	37300 <__assert_fail@plt+0x2575c>
   37038:	ldr	ip, [sp, #20]
   3703c:	add	r2, sl, r3
   37040:	ldrb	r3, [ip]
   37044:	ldrb	r0, [r7, r2]
   37048:	add	r2, r7, r2
   3704c:	cmp	r0, r3
   37050:	bne	37300 <__assert_fail@plt+0x2575c>
   37054:	mov	r0, ip
   37058:	sub	r9, fp, #1
   3705c:	b	37074 <__assert_fail@plt+0x254d0>
   37060:	ldrb	lr, [r0, #-1]!
   37064:	ldrb	ip, [r2, #-1]!
   37068:	cmp	lr, ip
   3706c:	bne	37080 <__assert_fail@plt+0x254dc>
   37070:	mov	r1, r3
   37074:	sub	r3, r1, #1
   37078:	cmp	r3, r9
   3707c:	bne	37060 <__assert_fail@plt+0x254bc>
   37080:	add	fp, fp, #1
   37084:	cmp	fp, r1
   37088:	bhi	3731c <__assert_fail@plt+0x25778>
   3708c:	ldr	r3, [sp, #4]
   37090:	ldr	fp, [sp, #16]
   37094:	add	sl, sl, r3
   37098:	mov	r0, r5
   3709c:	b	36fa8 <__assert_fail@plt+0x25404>
   370a0:	ldr	r2, [sp, #12]
   370a4:	mov	fp, #0
   370a8:	add	sl, r2, sl
   370ac:	add	sl, sl, r3
   370b0:	b	37098 <__assert_fail@plt+0x254f4>
   370b4:	sub	r3, r4, r8
   370b8:	cmp	r3, r8
   370bc:	movcc	r3, r8
   370c0:	sub	r2, r8, #1
   370c4:	add	r3, r3, #1
   370c8:	str	r3, [sp, #8]
   370cc:	add	r3, r6, r2
   370d0:	str	r3, [sp, #12]
   370d4:	add	sl, r6, r8
   370d8:	rsb	r3, r8, #1
   370dc:	mov	r0, r9
   370e0:	mov	r5, #0
   370e4:	mov	r9, r8
   370e8:	mov	r8, r2
   370ec:	str	r3, [sp, #4]
   370f0:	add	fp, r4, r5
   370f4:	sub	r2, fp, r0
   370f8:	mov	r1, #0
   370fc:	add	r0, r7, r0
   37100:	bl	11a24 <memchr@plt>
   37104:	cmp	fp, #0
   37108:	clz	r0, r0
   3710c:	lsr	r0, r0, #5
   37110:	moveq	r0, #0
   37114:	cmp	r0, #0
   37118:	beq	36f48 <__assert_fail@plt+0x253a4>
   3711c:	cmp	r4, r9
   37120:	bls	37168 <__assert_fail@plt+0x255c4>
   37124:	add	r1, r9, r5
   37128:	ldrb	r0, [sl]
   3712c:	ldrb	r2, [r7, r1]
   37130:	add	r1, r7, r1
   37134:	cmp	r0, r2
   37138:	movne	r2, r9
   3713c:	bne	371b8 <__assert_fail@plt+0x25614>
   37140:	mov	r0, sl
   37144:	mov	r2, r9
   37148:	b	3715c <__assert_fail@plt+0x255b8>
   3714c:	ldrb	ip, [r0, #1]!
   37150:	ldrb	r3, [r1, #1]!
   37154:	cmp	ip, r3
   37158:	bne	371b8 <__assert_fail@plt+0x25614>
   3715c:	add	r2, r2, #1
   37160:	cmp	r4, r2
   37164:	bhi	3714c <__assert_fail@plt+0x255a8>
   37168:	cmn	r8, #1
   3716c:	beq	371ac <__assert_fail@plt+0x25608>
   37170:	ldr	r3, [sp, #12]
   37174:	add	r1, r5, r8
   37178:	ldrb	r2, [r3]
   3717c:	ldrb	r0, [r7, r1]
   37180:	add	r1, r7, r1
   37184:	cmp	r0, r2
   37188:	bne	371cc <__assert_fail@plt+0x25628>
   3718c:	mov	r2, r3
   37190:	b	371a4 <__assert_fail@plt+0x25600>
   37194:	ldrb	r0, [r2, #-1]!
   37198:	ldrb	r3, [r1, #-1]!
   3719c:	cmp	r0, r3
   371a0:	bne	371cc <__assert_fail@plt+0x25628>
   371a4:	cmp	r6, r2
   371a8:	bne	37194 <__assert_fail@plt+0x255f0>
   371ac:	add	r0, r7, r5
   371b0:	add	sp, sp, #28
   371b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   371b8:	ldr	r3, [sp, #4]
   371bc:	add	r5, r3, r5
   371c0:	add	r5, r5, r2
   371c4:	mov	r0, fp
   371c8:	b	370f0 <__assert_fail@plt+0x2554c>
   371cc:	ldr	r3, [sp, #8]
   371d0:	add	r5, r5, r3
   371d4:	b	371c4 <__assert_fail@plt+0x25620>
   371d8:	mov	ip, #1
   371dc:	mov	r2, ip
   371e0:	mov	r8, ip
   371e4:	mov	r1, #0
   371e8:	mvn	r0, #0
   371ec:	add	r3, r2, r1
   371f0:	cmp	r4, r3
   371f4:	add	lr, r6, r2
   371f8:	bls	37228 <__assert_fail@plt+0x25684>
   371fc:	ldrb	lr, [lr, r0]
   37200:	ldrb	r5, [r6, r3]
   37204:	cmp	r5, lr
   37208:	bcs	372bc <__assert_fail@plt+0x25718>
   3720c:	mov	r2, #1
   37210:	mov	r1, r3
   37214:	sub	ip, r3, r0
   37218:	add	r3, r2, r1
   3721c:	cmp	r4, r3
   37220:	add	lr, r6, r2
   37224:	bhi	371fc <__assert_fail@plt+0x25658>
   37228:	mov	r3, #1
   3722c:	mov	r5, r3
   37230:	mov	r2, r3
   37234:	mov	r1, #0
   37238:	mvn	r8, #0
   3723c:	str	r3, [sp, #4]
   37240:	add	r3, r2, r1
   37244:	cmp	r4, r3
   37248:	add	lr, r6, r8
   3724c:	bls	37280 <__assert_fail@plt+0x256dc>
   37250:	ldrb	lr, [lr, r2]
   37254:	ldrb	sl, [r6, r3]
   37258:	cmp	sl, lr
   3725c:	bls	372a4 <__assert_fail@plt+0x25700>
   37260:	sub	r2, r3, r8
   37264:	str	r2, [sp, #4]
   37268:	mov	r1, r3
   3726c:	mov	r2, #1
   37270:	add	r3, r2, r1
   37274:	cmp	r4, r3
   37278:	add	lr, r6, r8
   3727c:	bhi	37250 <__assert_fail@plt+0x256ac>
   37280:	add	r8, r8, #1
   37284:	add	r0, r0, #1
   37288:	ldr	r3, [sp, #4]
   3728c:	cmp	r8, r0
   37290:	movcc	r3, ip
   37294:	str	r3, [sp, #4]
   37298:	movcc	r8, r0
   3729c:	mov	r5, r3
   372a0:	b	36f68 <__assert_fail@plt+0x253c4>
   372a4:	beq	372d4 <__assert_fail@plt+0x25730>
   372a8:	mov	r8, r1
   372ac:	str	r5, [sp, #4]
   372b0:	add	r1, r1, #1
   372b4:	mov	r2, #1
   372b8:	b	37240 <__assert_fail@plt+0x2569c>
   372bc:	beq	372ec <__assert_fail@plt+0x25748>
   372c0:	mov	r0, r1
   372c4:	mov	ip, r8
   372c8:	add	r1, r1, #1
   372cc:	mov	r2, #1
   372d0:	b	371ec <__assert_fail@plt+0x25648>
   372d4:	ldr	lr, [sp, #4]
   372d8:	cmp	r2, lr
   372dc:	addne	r2, r2, #1
   372e0:	moveq	r1, r3
   372e4:	moveq	r2, #1
   372e8:	b	37240 <__assert_fail@plt+0x2569c>
   372ec:	cmp	r2, ip
   372f0:	addne	r2, r2, #1
   372f4:	moveq	r1, r3
   372f8:	moveq	r2, #1
   372fc:	b	371ec <__assert_fail@plt+0x25648>
   37300:	mov	r1, r8
   37304:	b	37080 <__assert_fail@plt+0x254dc>
   37308:	mov	r0, r7
   3730c:	b	36f48 <__assert_fail@plt+0x253a4>
   37310:	mov	r6, r1
   37314:	mov	sl, #1
   37318:	b	36ed0 <__assert_fail@plt+0x2532c>
   3731c:	add	r0, r7, sl
   37320:	b	36f48 <__assert_fail@plt+0x253a4>
   37324:	push	{r4, r5, r6, lr}
   37328:	mov	r4, r0
   3732c:	bl	118a4 <__fpending@plt>
   37330:	ldr	r5, [r4]
   37334:	and	r5, r5, #32
   37338:	mov	r6, r0
   3733c:	mov	r0, r4
   37340:	bl	16448 <__assert_fail@plt+0x48a4>
   37344:	cmp	r5, #0
   37348:	mov	r4, r0
   3734c:	bne	3736c <__assert_fail@plt+0x257c8>
   37350:	cmp	r0, #0
   37354:	beq	37364 <__assert_fail@plt+0x257c0>
   37358:	cmp	r6, #0
   3735c:	beq	37388 <__assert_fail@plt+0x257e4>
   37360:	mvn	r4, #0
   37364:	mov	r0, r4
   37368:	pop	{r4, r5, r6, pc}
   3736c:	cmp	r0, #0
   37370:	bne	37360 <__assert_fail@plt+0x257bc>
   37374:	bl	119b8 <__errno_location@plt>
   37378:	str	r4, [r0]
   3737c:	mvn	r4, #0
   37380:	mov	r0, r4
   37384:	pop	{r4, r5, r6, pc}
   37388:	bl	119b8 <__errno_location@plt>
   3738c:	ldr	r4, [r0]
   37390:	subs	r4, r4, #9
   37394:	mvnne	r4, #0
   37398:	mov	r0, r4
   3739c:	pop	{r4, r5, r6, pc}
   373a0:	push	{r4, r5}
   373a4:	mov	r4, #0
   373a8:	mov	r5, #0
   373ac:	ldr	r3, [pc, #12]	; 373c0 <__assert_fail@plt+0x2581c>
   373b0:	strd	r4, [r0, #16]
   373b4:	str	r3, [r0, #24]
   373b8:	pop	{r4, r5}
   373bc:	bx	lr
   373c0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   373c4:	ldr	r3, [pc, #180]	; 37480 <__assert_fail@plt+0x258dc>
   373c8:	ldr	r2, [r0, #24]
   373cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   373d0:	cmp	r2, r3
   373d4:	bne	3746c <__assert_fail@plt+0x258c8>
   373d8:	ldrd	r6, [r0, #16]
   373dc:	orrs	r3, r6, r7
   373e0:	bne	3740c <__assert_fail@plt+0x25868>
   373e4:	mov	r2, #1
   373e8:	mov	r3, #0
   373ec:	ldrd	r8, [r1, #96]	; 0x60
   373f0:	strd	r2, [r0, #16]
   373f4:	ldrd	r2, [r1]
   373f8:	mov	r1, #0
   373fc:	strd	r8, [r0]
   37400:	strd	r2, [r0, #8]
   37404:	mov	r0, r1
   37408:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3740c:	ldrd	r8, [r1, #96]	; 0x60
   37410:	ldrd	r2, [r0]
   37414:	cmp	r9, r3
   37418:	cmpeq	r8, r2
   3741c:	beq	37454 <__assert_fail@plt+0x258b0>
   37420:	adds	r2, r6, #1
   37424:	adc	r3, r7, #0
   37428:	and	r6, r6, r2
   3742c:	and	r7, r7, r3
   37430:	orrs	ip, r6, r7
   37434:	strd	r2, [r0, #16]
   37438:	movne	r1, #0
   3743c:	bne	37404 <__assert_fail@plt+0x25860>
   37440:	orrs	r3, r2, r3
   37444:	bne	373f4 <__assert_fail@plt+0x25850>
   37448:	mov	r1, #1
   3744c:	mov	r0, r1
   37450:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37454:	ldrd	r4, [r1]
   37458:	ldrd	r2, [r0, #8]
   3745c:	cmp	r5, r3
   37460:	cmpeq	r4, r2
   37464:	bne	37420 <__assert_fail@plt+0x2587c>
   37468:	b	37448 <__assert_fail@plt+0x258a4>
   3746c:	ldr	r3, [pc, #16]	; 37484 <__assert_fail@plt+0x258e0>
   37470:	mov	r2, #60	; 0x3c
   37474:	ldr	r1, [pc, #12]	; 37488 <__assert_fail@plt+0x258e4>
   37478:	ldr	r0, [pc, #12]	; 3748c <__assert_fail@plt+0x258e8>
   3747c:	bl	11ba4 <__assert_fail@plt>
   37480:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   37484:	andeq	sl, r3, ip, ror #13
   37488:	strdeq	sl, [r3], -r8
   3748c:	andeq	sl, r3, ip, lsl #14
   37490:	ldr	ip, [r0, #4]
   37494:	cmp	ip, r1
   37498:	bcs	37514 <__assert_fail@plt+0x25970>
   3749c:	cmp	r3, #0
   374a0:	push	{r4, r5, r6, r7, r8, lr}
   374a4:	mov	r6, r3
   374a8:	mov	r7, r2
   374ac:	mov	r5, r1
   374b0:	mov	r4, r0
   374b4:	bne	374e8 <__assert_fail@plt+0x25944>
   374b8:	ldr	r0, [r4, #8]
   374bc:	mul	r1, r6, r5
   374c0:	cmp	r0, r7
   374c4:	beq	37524 <__assert_fail@plt+0x25980>
   374c8:	bl	36970 <__assert_fail@plt+0x24dcc>
   374cc:	subs	r7, r0, #0
   374d0:	beq	37550 <__assert_fail@plt+0x259ac>
   374d4:	mov	r3, #1
   374d8:	stmib	r4, {r5, r7}
   374dc:	str	r5, [r4]
   374e0:	mov	r0, r3
   374e4:	pop	{r4, r5, r6, r7, r8, pc}
   374e8:	mov	r1, r3
   374ec:	mvn	r0, #0
   374f0:	bl	378e4 <__assert_fail@plt+0x25d40>
   374f4:	cmp	r5, r0
   374f8:	bls	374b8 <__assert_fail@plt+0x25914>
   374fc:	bl	119b8 <__errno_location@plt>
   37500:	mov	r3, #0
   37504:	mov	r2, #12
   37508:	str	r2, [r0]
   3750c:	mov	r0, r3
   37510:	pop	{r4, r5, r6, r7, r8, pc}
   37514:	mov	r3, #1
   37518:	str	r1, [r0]
   3751c:	mov	r0, r3
   37520:	bx	lr
   37524:	mov	r0, r1
   37528:	bl	36944 <__assert_fail@plt+0x24da0>
   3752c:	subs	r7, r0, #0
   37530:	beq	37550 <__assert_fail@plt+0x259ac>
   37534:	ldr	r1, [r4, #8]
   37538:	cmp	r1, #0
   3753c:	beq	374d4 <__assert_fail@plt+0x25930>
   37540:	ldr	r2, [r4]
   37544:	mul	r2, r2, r6
   37548:	bl	11784 <memcpy@plt>
   3754c:	b	374d4 <__assert_fail@plt+0x25930>
   37550:	mov	r3, #0
   37554:	b	374e0 <__assert_fail@plt+0x2593c>
   37558:	push	{r1, r2, r3}
   3755c:	push	{r4, r5, r6, r7, lr}
   37560:	sub	sp, sp, #8
   37564:	add	r3, sp, #32
   37568:	ldr	r1, [sp, #28]
   3756c:	str	r3, [sp, #4]
   37570:	cmp	r1, #0
   37574:	beq	3760c <__assert_fail@plt+0x25a68>
   37578:	ldr	r2, [pc, #412]	; 3771c <__assert_fail@plt+0x25b78>
   3757c:	mov	r5, r0
   37580:	cmp	r1, r2
   37584:	bne	375d0 <__assert_fail@plt+0x25a2c>
   37588:	ldr	r6, [pc, #400]	; 37720 <__assert_fail@plt+0x25b7c>
   3758c:	ldr	r7, [r3]
   37590:	add	r2, sp, #36	; 0x24
   37594:	ldr	r3, [r6]
   37598:	str	r2, [sp, #4]
   3759c:	cmp	r3, #0
   375a0:	mov	r2, r7
   375a4:	blt	376d0 <__assert_fail@plt+0x25b2c>
   375a8:	bl	11a54 <fcntl64@plt>
   375ac:	subs	r4, r0, #0
   375b0:	blt	37654 <__assert_fail@plt+0x25ab0>
   375b4:	mov	r3, #1
   375b8:	str	r3, [r6]
   375bc:	mov	r0, r4
   375c0:	add	sp, sp, #8
   375c4:	pop	{r4, r5, r6, r7, lr}
   375c8:	add	sp, sp, #12
   375cc:	bx	lr
   375d0:	cmp	r1, #11
   375d4:	beq	375fc <__assert_fail@plt+0x25a58>
   375d8:	bgt	3761c <__assert_fail@plt+0x25a78>
   375dc:	cmp	r1, #3
   375e0:	beq	375fc <__assert_fail@plt+0x25a58>
   375e4:	ble	37710 <__assert_fail@plt+0x25b6c>
   375e8:	cmp	r1, #8
   375ec:	beq	3763c <__assert_fail@plt+0x25a98>
   375f0:	ble	3763c <__assert_fail@plt+0x25a98>
   375f4:	cmp	r1, #9
   375f8:	bne	3763c <__assert_fail@plt+0x25a98>
   375fc:	mov	r0, r5
   37600:	bl	11a54 <fcntl64@plt>
   37604:	mov	r4, r0
   37608:	b	375bc <__assert_fail@plt+0x25a18>
   3760c:	ldr	r2, [sp, #32]
   37610:	bl	11a54 <fcntl64@plt>
   37614:	mov	r4, r0
   37618:	b	375bc <__assert_fail@plt+0x25a18>
   3761c:	ldr	r3, [pc, #256]	; 37724 <__assert_fail@plt+0x25b80>
   37620:	cmp	r1, r3
   37624:	bgt	376f0 <__assert_fail@plt+0x25b4c>
   37628:	cmp	r1, r2
   3762c:	bge	3763c <__assert_fail@plt+0x25a98>
   37630:	sub	r3, r3, #6
   37634:	cmp	r1, r3
   37638:	beq	375fc <__assert_fail@plt+0x25a58>
   3763c:	ldr	r3, [sp, #4]
   37640:	mov	r0, r5
   37644:	ldr	r2, [r3]
   37648:	bl	11a54 <fcntl64@plt>
   3764c:	mov	r4, r0
   37650:	b	375bc <__assert_fail@plt+0x25a18>
   37654:	bl	119b8 <__errno_location@plt>
   37658:	ldr	r3, [r0]
   3765c:	cmp	r3, #22
   37660:	bne	375b4 <__assert_fail@plt+0x25a10>
   37664:	mov	r2, r7
   37668:	mov	r0, r5
   3766c:	mov	r1, #0
   37670:	bl	11a54 <fcntl64@plt>
   37674:	subs	r4, r0, #0
   37678:	blt	375bc <__assert_fail@plt+0x25a18>
   3767c:	mvn	r3, #0
   37680:	str	r3, [r6]
   37684:	mov	r1, #1
   37688:	mov	r0, r4
   3768c:	bl	11a54 <fcntl64@plt>
   37690:	subs	r2, r0, #0
   37694:	blt	376b0 <__assert_fail@plt+0x25b0c>
   37698:	orr	r2, r2, #1
   3769c:	mov	r1, #2
   376a0:	mov	r0, r4
   376a4:	bl	11a54 <fcntl64@plt>
   376a8:	cmn	r0, #1
   376ac:	bne	375bc <__assert_fail@plt+0x25a18>
   376b0:	bl	119b8 <__errno_location@plt>
   376b4:	mov	r5, r0
   376b8:	mov	r0, r4
   376bc:	ldr	r6, [r5]
   376c0:	mvn	r4, #0
   376c4:	bl	11b80 <close@plt>
   376c8:	str	r6, [r5]
   376cc:	b	375bc <__assert_fail@plt+0x25a18>
   376d0:	mov	r1, #0
   376d4:	bl	11a54 <fcntl64@plt>
   376d8:	subs	r4, r0, #0
   376dc:	blt	375bc <__assert_fail@plt+0x25a18>
   376e0:	ldr	r3, [r6]
   376e4:	cmn	r3, #1
   376e8:	beq	37684 <__assert_fail@plt+0x25ae0>
   376ec:	b	375bc <__assert_fail@plt+0x25a18>
   376f0:	ldr	r3, [pc, #48]	; 37728 <__assert_fail@plt+0x25b84>
   376f4:	cmp	r1, r3
   376f8:	beq	3763c <__assert_fail@plt+0x25a98>
   376fc:	blt	375fc <__assert_fail@plt+0x25a58>
   37700:	add	r3, r3, #1
   37704:	cmp	r1, r3
   37708:	bne	3763c <__assert_fail@plt+0x25a98>
   3770c:	b	375fc <__assert_fail@plt+0x25a58>
   37710:	cmp	r1, #1
   37714:	bne	3763c <__assert_fail@plt+0x25a98>
   37718:	b	375fc <__assert_fail@plt+0x25a58>
   3771c:	andeq	r0, r0, r6, lsl #8
   37720:	andeq	fp, r4, r0, lsl #8
   37724:	andeq	r0, r0, r7, lsl #8
   37728:	andeq	r0, r0, r9, lsl #8
   3772c:	push	{r1, r2, r3}
   37730:	push	{lr}		; (str lr, [sp, #-4]!)
   37734:	sub	sp, sp, #8
   37738:	ldr	r1, [sp, #12]
   3773c:	ands	r2, r1, #64	; 0x40
   37740:	addne	r3, sp, #16
   37744:	ldrne	r2, [sp, #16]
   37748:	strne	r3, [sp, #4]
   3774c:	bl	118e0 <open64@plt>
   37750:	bl	33d68 <__assert_fail@plt+0x221c4>
   37754:	add	sp, sp, #8
   37758:	pop	{lr}		; (ldr lr, [sp], #4)
   3775c:	add	sp, sp, #12
   37760:	bx	lr
   37764:	push	{lr}		; (str lr, [sp, #-4]!)
   37768:	sub	sp, sp, #268	; 0x10c
   3776c:	add	r1, sp, #4
   37770:	ldr	r2, [pc, #60]	; 377b4 <__assert_fail@plt+0x25c10>
   37774:	bl	37840 <__assert_fail@plt+0x25c9c>
   37778:	cmp	r0, #0
   3777c:	movne	r0, #0
   37780:	bne	377ac <__assert_fail@plt+0x25c08>
   37784:	ldr	r1, [pc, #44]	; 377b8 <__assert_fail@plt+0x25c14>
   37788:	add	r0, sp, #4
   3778c:	bl	1170c <strcmp@plt>
   37790:	cmp	r0, #0
   37794:	beq	377ac <__assert_fail@plt+0x25c08>
   37798:	add	r0, sp, #4
   3779c:	ldr	r1, [pc, #24]	; 377bc <__assert_fail@plt+0x25c18>
   377a0:	bl	1170c <strcmp@plt>
   377a4:	adds	r0, r0, #0
   377a8:	movne	r0, #1
   377ac:	add	sp, sp, #268	; 0x10c
   377b0:	pop	{pc}		; (ldr pc, [sp], #4)
   377b4:	andeq	r0, r0, r1, lsl #2
   377b8:	andeq	sl, r3, r4, lsr #14
   377bc:	andeq	sl, r3, r8, lsr #14
   377c0:	push	{r4, lr}
   377c4:	mov	r0, #14
   377c8:	bl	11a84 <nl_langinfo@plt>
   377cc:	cmp	r0, #0
   377d0:	beq	377e8 <__assert_fail@plt+0x25c44>
   377d4:	ldrb	r2, [r0]
   377d8:	ldr	r3, [pc, #16]	; 377f0 <__assert_fail@plt+0x25c4c>
   377dc:	cmp	r2, #0
   377e0:	moveq	r0, r3
   377e4:	pop	{r4, pc}
   377e8:	ldr	r0, [pc]	; 377f0 <__assert_fail@plt+0x25c4c>
   377ec:	pop	{r4, pc}
   377f0:	andeq	sl, r3, r0, lsr r7
   377f4:	push	{r4, r5, r6, lr}
   377f8:	subs	r4, r2, #0
   377fc:	mov	r6, r0
   37800:	mov	r5, r1
   37804:	beq	37830 <__assert_fail@plt+0x25c8c>
   37808:	mov	r1, r4
   3780c:	mvn	r0, #0
   37810:	bl	378e4 <__assert_fail@plt+0x25d40>
   37814:	cmp	r0, r5
   37818:	bcs	37830 <__assert_fail@plt+0x25c8c>
   3781c:	bl	119b8 <__errno_location@plt>
   37820:	mov	r3, #12
   37824:	str	r3, [r0]
   37828:	mov	r0, #0
   3782c:	pop	{r4, r5, r6, pc}
   37830:	mul	r1, r5, r4
   37834:	mov	r0, r6
   37838:	pop	{r4, r5, r6, lr}
   3783c:	b	36970 <__assert_fail@plt+0x24dcc>
   37840:	push	{r4, r5, r6, lr}
   37844:	mov	r5, r1
   37848:	mov	r1, #0
   3784c:	mov	r4, r2
   37850:	bl	11a6c <setlocale@plt>
   37854:	subs	r6, r0, #0
   37858:	beq	378b4 <__assert_fail@plt+0x25d10>
   3785c:	bl	11988 <strlen@plt>
   37860:	cmp	r4, r0
   37864:	bhi	3789c <__assert_fail@plt+0x25cf8>
   37868:	cmp	r4, #0
   3786c:	bne	37878 <__assert_fail@plt+0x25cd4>
   37870:	mov	r0, #34	; 0x22
   37874:	pop	{r4, r5, r6, pc}
   37878:	sub	r4, r4, #1
   3787c:	mov	r1, r6
   37880:	mov	r2, r4
   37884:	mov	r0, r5
   37888:	bl	11784 <memcpy@plt>
   3788c:	mov	r3, #0
   37890:	strb	r3, [r5, r4]
   37894:	mov	r0, #34	; 0x22
   37898:	pop	{r4, r5, r6, pc}
   3789c:	add	r2, r0, #1
   378a0:	mov	r1, r6
   378a4:	mov	r0, r5
   378a8:	bl	11784 <memcpy@plt>
   378ac:	mov	r0, #0
   378b0:	pop	{r4, r5, r6, pc}
   378b4:	cmp	r4, #0
   378b8:	beq	378c8 <__assert_fail@plt+0x25d24>
   378bc:	strb	r6, [r5]
   378c0:	mov	r0, #22
   378c4:	pop	{r4, r5, r6, pc}
   378c8:	mov	r0, #22
   378cc:	pop	{r4, r5, r6, pc}
   378d0:	mov	r1, #0
   378d4:	b	11a6c <setlocale@plt>
   378d8:	mov	r2, #3
   378dc:	mov	r1, #0
   378e0:	b	37558 <__assert_fail@plt+0x259b4>
   378e4:	subs	r2, r1, #1
   378e8:	bxeq	lr
   378ec:	bcc	37ac4 <__assert_fail@plt+0x25f20>
   378f0:	cmp	r0, r1
   378f4:	bls	37aa8 <__assert_fail@plt+0x25f04>
   378f8:	tst	r1, r2
   378fc:	beq	37ab4 <__assert_fail@plt+0x25f10>
   37900:	clz	r3, r0
   37904:	clz	r2, r1
   37908:	sub	r3, r2, r3
   3790c:	rsbs	r3, r3, #31
   37910:	addne	r3, r3, r3, lsl #1
   37914:	mov	r2, #0
   37918:	addne	pc, pc, r3, lsl #2
   3791c:	nop			; (mov r0, r0)
   37920:	cmp	r0, r1, lsl #31
   37924:	adc	r2, r2, r2
   37928:	subcs	r0, r0, r1, lsl #31
   3792c:	cmp	r0, r1, lsl #30
   37930:	adc	r2, r2, r2
   37934:	subcs	r0, r0, r1, lsl #30
   37938:	cmp	r0, r1, lsl #29
   3793c:	adc	r2, r2, r2
   37940:	subcs	r0, r0, r1, lsl #29
   37944:	cmp	r0, r1, lsl #28
   37948:	adc	r2, r2, r2
   3794c:	subcs	r0, r0, r1, lsl #28
   37950:	cmp	r0, r1, lsl #27
   37954:	adc	r2, r2, r2
   37958:	subcs	r0, r0, r1, lsl #27
   3795c:	cmp	r0, r1, lsl #26
   37960:	adc	r2, r2, r2
   37964:	subcs	r0, r0, r1, lsl #26
   37968:	cmp	r0, r1, lsl #25
   3796c:	adc	r2, r2, r2
   37970:	subcs	r0, r0, r1, lsl #25
   37974:	cmp	r0, r1, lsl #24
   37978:	adc	r2, r2, r2
   3797c:	subcs	r0, r0, r1, lsl #24
   37980:	cmp	r0, r1, lsl #23
   37984:	adc	r2, r2, r2
   37988:	subcs	r0, r0, r1, lsl #23
   3798c:	cmp	r0, r1, lsl #22
   37990:	adc	r2, r2, r2
   37994:	subcs	r0, r0, r1, lsl #22
   37998:	cmp	r0, r1, lsl #21
   3799c:	adc	r2, r2, r2
   379a0:	subcs	r0, r0, r1, lsl #21
   379a4:	cmp	r0, r1, lsl #20
   379a8:	adc	r2, r2, r2
   379ac:	subcs	r0, r0, r1, lsl #20
   379b0:	cmp	r0, r1, lsl #19
   379b4:	adc	r2, r2, r2
   379b8:	subcs	r0, r0, r1, lsl #19
   379bc:	cmp	r0, r1, lsl #18
   379c0:	adc	r2, r2, r2
   379c4:	subcs	r0, r0, r1, lsl #18
   379c8:	cmp	r0, r1, lsl #17
   379cc:	adc	r2, r2, r2
   379d0:	subcs	r0, r0, r1, lsl #17
   379d4:	cmp	r0, r1, lsl #16
   379d8:	adc	r2, r2, r2
   379dc:	subcs	r0, r0, r1, lsl #16
   379e0:	cmp	r0, r1, lsl #15
   379e4:	adc	r2, r2, r2
   379e8:	subcs	r0, r0, r1, lsl #15
   379ec:	cmp	r0, r1, lsl #14
   379f0:	adc	r2, r2, r2
   379f4:	subcs	r0, r0, r1, lsl #14
   379f8:	cmp	r0, r1, lsl #13
   379fc:	adc	r2, r2, r2
   37a00:	subcs	r0, r0, r1, lsl #13
   37a04:	cmp	r0, r1, lsl #12
   37a08:	adc	r2, r2, r2
   37a0c:	subcs	r0, r0, r1, lsl #12
   37a10:	cmp	r0, r1, lsl #11
   37a14:	adc	r2, r2, r2
   37a18:	subcs	r0, r0, r1, lsl #11
   37a1c:	cmp	r0, r1, lsl #10
   37a20:	adc	r2, r2, r2
   37a24:	subcs	r0, r0, r1, lsl #10
   37a28:	cmp	r0, r1, lsl #9
   37a2c:	adc	r2, r2, r2
   37a30:	subcs	r0, r0, r1, lsl #9
   37a34:	cmp	r0, r1, lsl #8
   37a38:	adc	r2, r2, r2
   37a3c:	subcs	r0, r0, r1, lsl #8
   37a40:	cmp	r0, r1, lsl #7
   37a44:	adc	r2, r2, r2
   37a48:	subcs	r0, r0, r1, lsl #7
   37a4c:	cmp	r0, r1, lsl #6
   37a50:	adc	r2, r2, r2
   37a54:	subcs	r0, r0, r1, lsl #6
   37a58:	cmp	r0, r1, lsl #5
   37a5c:	adc	r2, r2, r2
   37a60:	subcs	r0, r0, r1, lsl #5
   37a64:	cmp	r0, r1, lsl #4
   37a68:	adc	r2, r2, r2
   37a6c:	subcs	r0, r0, r1, lsl #4
   37a70:	cmp	r0, r1, lsl #3
   37a74:	adc	r2, r2, r2
   37a78:	subcs	r0, r0, r1, lsl #3
   37a7c:	cmp	r0, r1, lsl #2
   37a80:	adc	r2, r2, r2
   37a84:	subcs	r0, r0, r1, lsl #2
   37a88:	cmp	r0, r1, lsl #1
   37a8c:	adc	r2, r2, r2
   37a90:	subcs	r0, r0, r1, lsl #1
   37a94:	cmp	r0, r1
   37a98:	adc	r2, r2, r2
   37a9c:	subcs	r0, r0, r1
   37aa0:	mov	r0, r2
   37aa4:	bx	lr
   37aa8:	moveq	r0, #1
   37aac:	movne	r0, #0
   37ab0:	bx	lr
   37ab4:	clz	r2, r1
   37ab8:	rsb	r2, r2, #31
   37abc:	lsr	r0, r0, r2
   37ac0:	bx	lr
   37ac4:	cmp	r0, #0
   37ac8:	mvnne	r0, #0
   37acc:	b	381f8 <__assert_fail@plt+0x26654>
   37ad0:	cmp	r1, #0
   37ad4:	beq	37ac4 <__assert_fail@plt+0x25f20>
   37ad8:	push	{r0, r1, lr}
   37adc:	bl	378e4 <__assert_fail@plt+0x25d40>
   37ae0:	pop	{r1, r2, lr}
   37ae4:	mul	r3, r2, r0
   37ae8:	sub	r1, r1, r3
   37aec:	bx	lr
   37af0:	cmp	r1, #0
   37af4:	beq	37d00 <__assert_fail@plt+0x2615c>
   37af8:	eor	ip, r0, r1
   37afc:	rsbmi	r1, r1, #0
   37b00:	subs	r2, r1, #1
   37b04:	beq	37ccc <__assert_fail@plt+0x26128>
   37b08:	movs	r3, r0
   37b0c:	rsbmi	r3, r0, #0
   37b10:	cmp	r3, r1
   37b14:	bls	37cd8 <__assert_fail@plt+0x26134>
   37b18:	tst	r1, r2
   37b1c:	beq	37ce8 <__assert_fail@plt+0x26144>
   37b20:	clz	r2, r3
   37b24:	clz	r0, r1
   37b28:	sub	r2, r0, r2
   37b2c:	rsbs	r2, r2, #31
   37b30:	addne	r2, r2, r2, lsl #1
   37b34:	mov	r0, #0
   37b38:	addne	pc, pc, r2, lsl #2
   37b3c:	nop			; (mov r0, r0)
   37b40:	cmp	r3, r1, lsl #31
   37b44:	adc	r0, r0, r0
   37b48:	subcs	r3, r3, r1, lsl #31
   37b4c:	cmp	r3, r1, lsl #30
   37b50:	adc	r0, r0, r0
   37b54:	subcs	r3, r3, r1, lsl #30
   37b58:	cmp	r3, r1, lsl #29
   37b5c:	adc	r0, r0, r0
   37b60:	subcs	r3, r3, r1, lsl #29
   37b64:	cmp	r3, r1, lsl #28
   37b68:	adc	r0, r0, r0
   37b6c:	subcs	r3, r3, r1, lsl #28
   37b70:	cmp	r3, r1, lsl #27
   37b74:	adc	r0, r0, r0
   37b78:	subcs	r3, r3, r1, lsl #27
   37b7c:	cmp	r3, r1, lsl #26
   37b80:	adc	r0, r0, r0
   37b84:	subcs	r3, r3, r1, lsl #26
   37b88:	cmp	r3, r1, lsl #25
   37b8c:	adc	r0, r0, r0
   37b90:	subcs	r3, r3, r1, lsl #25
   37b94:	cmp	r3, r1, lsl #24
   37b98:	adc	r0, r0, r0
   37b9c:	subcs	r3, r3, r1, lsl #24
   37ba0:	cmp	r3, r1, lsl #23
   37ba4:	adc	r0, r0, r0
   37ba8:	subcs	r3, r3, r1, lsl #23
   37bac:	cmp	r3, r1, lsl #22
   37bb0:	adc	r0, r0, r0
   37bb4:	subcs	r3, r3, r1, lsl #22
   37bb8:	cmp	r3, r1, lsl #21
   37bbc:	adc	r0, r0, r0
   37bc0:	subcs	r3, r3, r1, lsl #21
   37bc4:	cmp	r3, r1, lsl #20
   37bc8:	adc	r0, r0, r0
   37bcc:	subcs	r3, r3, r1, lsl #20
   37bd0:	cmp	r3, r1, lsl #19
   37bd4:	adc	r0, r0, r0
   37bd8:	subcs	r3, r3, r1, lsl #19
   37bdc:	cmp	r3, r1, lsl #18
   37be0:	adc	r0, r0, r0
   37be4:	subcs	r3, r3, r1, lsl #18
   37be8:	cmp	r3, r1, lsl #17
   37bec:	adc	r0, r0, r0
   37bf0:	subcs	r3, r3, r1, lsl #17
   37bf4:	cmp	r3, r1, lsl #16
   37bf8:	adc	r0, r0, r0
   37bfc:	subcs	r3, r3, r1, lsl #16
   37c00:	cmp	r3, r1, lsl #15
   37c04:	adc	r0, r0, r0
   37c08:	subcs	r3, r3, r1, lsl #15
   37c0c:	cmp	r3, r1, lsl #14
   37c10:	adc	r0, r0, r0
   37c14:	subcs	r3, r3, r1, lsl #14
   37c18:	cmp	r3, r1, lsl #13
   37c1c:	adc	r0, r0, r0
   37c20:	subcs	r3, r3, r1, lsl #13
   37c24:	cmp	r3, r1, lsl #12
   37c28:	adc	r0, r0, r0
   37c2c:	subcs	r3, r3, r1, lsl #12
   37c30:	cmp	r3, r1, lsl #11
   37c34:	adc	r0, r0, r0
   37c38:	subcs	r3, r3, r1, lsl #11
   37c3c:	cmp	r3, r1, lsl #10
   37c40:	adc	r0, r0, r0
   37c44:	subcs	r3, r3, r1, lsl #10
   37c48:	cmp	r3, r1, lsl #9
   37c4c:	adc	r0, r0, r0
   37c50:	subcs	r3, r3, r1, lsl #9
   37c54:	cmp	r3, r1, lsl #8
   37c58:	adc	r0, r0, r0
   37c5c:	subcs	r3, r3, r1, lsl #8
   37c60:	cmp	r3, r1, lsl #7
   37c64:	adc	r0, r0, r0
   37c68:	subcs	r3, r3, r1, lsl #7
   37c6c:	cmp	r3, r1, lsl #6
   37c70:	adc	r0, r0, r0
   37c74:	subcs	r3, r3, r1, lsl #6
   37c78:	cmp	r3, r1, lsl #5
   37c7c:	adc	r0, r0, r0
   37c80:	subcs	r3, r3, r1, lsl #5
   37c84:	cmp	r3, r1, lsl #4
   37c88:	adc	r0, r0, r0
   37c8c:	subcs	r3, r3, r1, lsl #4
   37c90:	cmp	r3, r1, lsl #3
   37c94:	adc	r0, r0, r0
   37c98:	subcs	r3, r3, r1, lsl #3
   37c9c:	cmp	r3, r1, lsl #2
   37ca0:	adc	r0, r0, r0
   37ca4:	subcs	r3, r3, r1, lsl #2
   37ca8:	cmp	r3, r1, lsl #1
   37cac:	adc	r0, r0, r0
   37cb0:	subcs	r3, r3, r1, lsl #1
   37cb4:	cmp	r3, r1
   37cb8:	adc	r0, r0, r0
   37cbc:	subcs	r3, r3, r1
   37cc0:	cmp	ip, #0
   37cc4:	rsbmi	r0, r0, #0
   37cc8:	bx	lr
   37ccc:	teq	ip, r0
   37cd0:	rsbmi	r0, r0, #0
   37cd4:	bx	lr
   37cd8:	movcc	r0, #0
   37cdc:	asreq	r0, ip, #31
   37ce0:	orreq	r0, r0, #1
   37ce4:	bx	lr
   37ce8:	clz	r2, r1
   37cec:	rsb	r2, r2, #31
   37cf0:	cmp	ip, #0
   37cf4:	lsr	r0, r3, r2
   37cf8:	rsbmi	r0, r0, #0
   37cfc:	bx	lr
   37d00:	cmp	r0, #0
   37d04:	mvngt	r0, #-2147483648	; 0x80000000
   37d08:	movlt	r0, #-2147483648	; 0x80000000
   37d0c:	b	381f8 <__assert_fail@plt+0x26654>
   37d10:	cmp	r1, #0
   37d14:	beq	37d00 <__assert_fail@plt+0x2615c>
   37d18:	push	{r0, r1, lr}
   37d1c:	bl	37af8 <__assert_fail@plt+0x25f54>
   37d20:	pop	{r1, r2, lr}
   37d24:	mul	r3, r2, r0
   37d28:	sub	r1, r1, r3
   37d2c:	bx	lr
   37d30:	eor	r1, r1, #-2147483648	; 0x80000000
   37d34:	b	37d3c <__assert_fail@plt+0x26198>
   37d38:	eor	r3, r3, #-2147483648	; 0x80000000
   37d3c:	push	{r4, r5, lr}
   37d40:	lsl	r4, r1, #1
   37d44:	lsl	r5, r3, #1
   37d48:	teq	r4, r5
   37d4c:	teqeq	r0, r2
   37d50:	orrsne	ip, r4, r0
   37d54:	orrsne	ip, r5, r2
   37d58:	mvnsne	ip, r4, asr #21
   37d5c:	mvnsne	ip, r5, asr #21
   37d60:	beq	37f4c <__assert_fail@plt+0x263a8>
   37d64:	lsr	r4, r4, #21
   37d68:	rsbs	r5, r4, r5, lsr #21
   37d6c:	rsblt	r5, r5, #0
   37d70:	ble	37d90 <__assert_fail@plt+0x261ec>
   37d74:	add	r4, r4, r5
   37d78:	eor	r2, r0, r2
   37d7c:	eor	r3, r1, r3
   37d80:	eor	r0, r2, r0
   37d84:	eor	r1, r3, r1
   37d88:	eor	r2, r0, r2
   37d8c:	eor	r3, r1, r3
   37d90:	cmp	r5, #54	; 0x36
   37d94:	pophi	{r4, r5, pc}
   37d98:	tst	r1, #-2147483648	; 0x80000000
   37d9c:	lsl	r1, r1, #12
   37da0:	mov	ip, #1048576	; 0x100000
   37da4:	orr	r1, ip, r1, lsr #12
   37da8:	beq	37db4 <__assert_fail@plt+0x26210>
   37dac:	rsbs	r0, r0, #0
   37db0:	rsc	r1, r1, #0
   37db4:	tst	r3, #-2147483648	; 0x80000000
   37db8:	lsl	r3, r3, #12
   37dbc:	orr	r3, ip, r3, lsr #12
   37dc0:	beq	37dcc <__assert_fail@plt+0x26228>
   37dc4:	rsbs	r2, r2, #0
   37dc8:	rsc	r3, r3, #0
   37dcc:	teq	r4, r5
   37dd0:	beq	37f34 <__assert_fail@plt+0x26390>
   37dd4:	sub	r4, r4, #1
   37dd8:	rsbs	lr, r5, #32
   37ddc:	blt	37df8 <__assert_fail@plt+0x26254>
   37de0:	lsl	ip, r2, lr
   37de4:	adds	r0, r0, r2, lsr r5
   37de8:	adc	r1, r1, #0
   37dec:	adds	r0, r0, r3, lsl lr
   37df0:	adcs	r1, r1, r3, asr r5
   37df4:	b	37e14 <__assert_fail@plt+0x26270>
   37df8:	sub	r5, r5, #32
   37dfc:	add	lr, lr, #32
   37e00:	cmp	r2, #1
   37e04:	lsl	ip, r3, lr
   37e08:	orrcs	ip, ip, #2
   37e0c:	adds	r0, r0, r3, asr r5
   37e10:	adcs	r1, r1, r3, asr #31
   37e14:	and	r5, r1, #-2147483648	; 0x80000000
   37e18:	bpl	37e28 <__assert_fail@plt+0x26284>
   37e1c:	rsbs	ip, ip, #0
   37e20:	rscs	r0, r0, #0
   37e24:	rsc	r1, r1, #0
   37e28:	cmp	r1, #1048576	; 0x100000
   37e2c:	bcc	37e6c <__assert_fail@plt+0x262c8>
   37e30:	cmp	r1, #2097152	; 0x200000
   37e34:	bcc	37e54 <__assert_fail@plt+0x262b0>
   37e38:	lsrs	r1, r1, #1
   37e3c:	rrxs	r0, r0
   37e40:	rrx	ip, ip
   37e44:	add	r4, r4, #1
   37e48:	lsl	r2, r4, #21
   37e4c:	cmn	r2, #4194304	; 0x400000
   37e50:	bcs	37fac <__assert_fail@plt+0x26408>
   37e54:	cmp	ip, #-2147483648	; 0x80000000
   37e58:	lsrseq	ip, r0, #1
   37e5c:	adcs	r0, r0, #0
   37e60:	adc	r1, r1, r4, lsl #20
   37e64:	orr	r1, r1, r5
   37e68:	pop	{r4, r5, pc}
   37e6c:	lsls	ip, ip, #1
   37e70:	adcs	r0, r0, r0
   37e74:	adc	r1, r1, r1
   37e78:	tst	r1, #1048576	; 0x100000
   37e7c:	sub	r4, r4, #1
   37e80:	bne	37e54 <__assert_fail@plt+0x262b0>
   37e84:	teq	r1, #0
   37e88:	moveq	r1, r0
   37e8c:	moveq	r0, #0
   37e90:	clz	r3, r1
   37e94:	addeq	r3, r3, #32
   37e98:	sub	r3, r3, #11
   37e9c:	subs	r2, r3, #32
   37ea0:	bge	37ec4 <__assert_fail@plt+0x26320>
   37ea4:	adds	r2, r2, #12
   37ea8:	ble	37ec0 <__assert_fail@plt+0x2631c>
   37eac:	add	ip, r2, #20
   37eb0:	rsb	r2, r2, #12
   37eb4:	lsl	r0, r1, ip
   37eb8:	lsr	r1, r1, r2
   37ebc:	b	37ed4 <__assert_fail@plt+0x26330>
   37ec0:	add	r2, r2, #20
   37ec4:	rsble	ip, r2, #32
   37ec8:	lsl	r1, r1, r2
   37ecc:	orrle	r1, r1, r0, lsr ip
   37ed0:	lslle	r0, r0, r2
   37ed4:	subs	r4, r4, r3
   37ed8:	addge	r1, r1, r4, lsl #20
   37edc:	orrge	r1, r1, r5
   37ee0:	popge	{r4, r5, pc}
   37ee4:	mvn	r4, r4
   37ee8:	subs	r4, r4, #31
   37eec:	bge	37f28 <__assert_fail@plt+0x26384>
   37ef0:	adds	r4, r4, #12
   37ef4:	bgt	37f10 <__assert_fail@plt+0x2636c>
   37ef8:	add	r4, r4, #20
   37efc:	rsb	r2, r4, #32
   37f00:	lsr	r0, r0, r4
   37f04:	orr	r0, r0, r1, lsl r2
   37f08:	orr	r1, r5, r1, lsr r4
   37f0c:	pop	{r4, r5, pc}
   37f10:	rsb	r4, r4, #12
   37f14:	rsb	r2, r4, #32
   37f18:	lsr	r0, r0, r2
   37f1c:	orr	r0, r0, r1, lsl r4
   37f20:	mov	r1, r5
   37f24:	pop	{r4, r5, pc}
   37f28:	lsr	r0, r1, r4
   37f2c:	mov	r1, r5
   37f30:	pop	{r4, r5, pc}
   37f34:	teq	r4, #0
   37f38:	eor	r3, r3, #1048576	; 0x100000
   37f3c:	eoreq	r1, r1, #1048576	; 0x100000
   37f40:	addeq	r4, r4, #1
   37f44:	subne	r5, r5, #1
   37f48:	b	37dd4 <__assert_fail@plt+0x26230>
   37f4c:	mvns	ip, r4, asr #21
   37f50:	mvnsne	ip, r5, asr #21
   37f54:	beq	37fbc <__assert_fail@plt+0x26418>
   37f58:	teq	r4, r5
   37f5c:	teqeq	r0, r2
   37f60:	beq	37f74 <__assert_fail@plt+0x263d0>
   37f64:	orrs	ip, r4, r0
   37f68:	moveq	r1, r3
   37f6c:	moveq	r0, r2
   37f70:	pop	{r4, r5, pc}
   37f74:	teq	r1, r3
   37f78:	movne	r1, #0
   37f7c:	movne	r0, #0
   37f80:	popne	{r4, r5, pc}
   37f84:	lsrs	ip, r4, #21
   37f88:	bne	37f9c <__assert_fail@plt+0x263f8>
   37f8c:	lsls	r0, r0, #1
   37f90:	adcs	r1, r1, r1
   37f94:	orrcs	r1, r1, #-2147483648	; 0x80000000
   37f98:	pop	{r4, r5, pc}
   37f9c:	adds	r4, r4, #4194304	; 0x400000
   37fa0:	addcc	r1, r1, #1048576	; 0x100000
   37fa4:	popcc	{r4, r5, pc}
   37fa8:	and	r5, r1, #-2147483648	; 0x80000000
   37fac:	orr	r1, r5, #2130706432	; 0x7f000000
   37fb0:	orr	r1, r1, #15728640	; 0xf00000
   37fb4:	mov	r0, #0
   37fb8:	pop	{r4, r5, pc}
   37fbc:	mvns	ip, r4, asr #21
   37fc0:	movne	r1, r3
   37fc4:	movne	r0, r2
   37fc8:	mvnseq	ip, r5, asr #21
   37fcc:	movne	r3, r1
   37fd0:	movne	r2, r0
   37fd4:	orrs	r4, r0, r1, lsl #12
   37fd8:	orrseq	r5, r2, r3, lsl #12
   37fdc:	teqeq	r1, r3
   37fe0:	orrne	r1, r1, #524288	; 0x80000
   37fe4:	pop	{r4, r5, pc}
   37fe8:	teq	r0, #0
   37fec:	moveq	r1, #0
   37ff0:	bxeq	lr
   37ff4:	push	{r4, r5, lr}
   37ff8:	mov	r4, #1024	; 0x400
   37ffc:	add	r4, r4, #50	; 0x32
   38000:	mov	r5, #0
   38004:	mov	r1, #0
   38008:	b	37e84 <__assert_fail@plt+0x262e0>
   3800c:	teq	r0, #0
   38010:	moveq	r1, #0
   38014:	bxeq	lr
   38018:	push	{r4, r5, lr}
   3801c:	mov	r4, #1024	; 0x400
   38020:	add	r4, r4, #50	; 0x32
   38024:	ands	r5, r0, #-2147483648	; 0x80000000
   38028:	rsbmi	r0, r0, #0
   3802c:	mov	r1, #0
   38030:	b	37e84 <__assert_fail@plt+0x262e0>
   38034:	lsls	r2, r0, #1
   38038:	asr	r1, r2, #3
   3803c:	rrx	r1, r1
   38040:	lsl	r0, r2, #28
   38044:	andsne	r3, r2, #-16777216	; 0xff000000
   38048:	teqne	r3, #-16777216	; 0xff000000
   3804c:	eorne	r1, r1, #939524096	; 0x38000000
   38050:	bxne	lr
   38054:	teq	r2, #0
   38058:	teqne	r3, #-16777216	; 0xff000000
   3805c:	bxeq	lr
   38060:	push	{r4, r5, lr}
   38064:	mov	r4, #896	; 0x380
   38068:	and	r5, r1, #-2147483648	; 0x80000000
   3806c:	bic	r1, r1, #-2147483648	; 0x80000000
   38070:	b	37e84 <__assert_fail@plt+0x262e0>
   38074:	orrs	r2, r0, r1
   38078:	bxeq	lr
   3807c:	push	{r4, r5, lr}
   38080:	mov	r5, #0
   38084:	b	380a4 <__assert_fail@plt+0x26500>
   38088:	orrs	r2, r0, r1
   3808c:	bxeq	lr
   38090:	push	{r4, r5, lr}
   38094:	ands	r5, r1, #-2147483648	; 0x80000000
   38098:	bpl	380a4 <__assert_fail@plt+0x26500>
   3809c:	rsbs	r0, r0, #0
   380a0:	rsc	r1, r1, #0
   380a4:	mov	r4, #1024	; 0x400
   380a8:	add	r4, r4, #50	; 0x32
   380ac:	lsrs	ip, r1, #22
   380b0:	beq	37e28 <__assert_fail@plt+0x26284>
   380b4:	mov	r2, #3
   380b8:	lsrs	ip, ip, #3
   380bc:	addne	r2, r2, #3
   380c0:	lsrs	ip, ip, #3
   380c4:	addne	r2, r2, #3
   380c8:	add	r2, r2, ip, lsr #3
   380cc:	rsb	r3, r2, #32
   380d0:	lsl	ip, r0, r3
   380d4:	lsr	r0, r0, r2
   380d8:	orr	r0, r0, r1, lsl r3
   380dc:	lsr	r1, r1, r2
   380e0:	add	r4, r4, r2
   380e4:	b	37e28 <__assert_fail@plt+0x26284>
   380e8:	cmp	r3, #0
   380ec:	cmpeq	r2, #0
   380f0:	bne	38114 <__assert_fail@plt+0x26570>
   380f4:	cmp	r1, #0
   380f8:	movlt	r1, #-2147483648	; 0x80000000
   380fc:	movlt	r0, #0
   38100:	blt	38110 <__assert_fail@plt+0x2656c>
   38104:	cmpeq	r0, #0
   38108:	mvnne	r1, #-2147483648	; 0x80000000
   3810c:	mvnne	r0, #0
   38110:	b	381f8 <__assert_fail@plt+0x26654>
   38114:	sub	sp, sp, #8
   38118:	push	{sp, lr}
   3811c:	cmp	r1, #0
   38120:	blt	38140 <__assert_fail@plt+0x2659c>
   38124:	cmp	r3, #0
   38128:	blt	38174 <__assert_fail@plt+0x265d0>
   3812c:	bl	38250 <__assert_fail@plt+0x266ac>
   38130:	ldr	lr, [sp, #4]
   38134:	add	sp, sp, #8
   38138:	pop	{r2, r3}
   3813c:	bx	lr
   38140:	rsbs	r0, r0, #0
   38144:	sbc	r1, r1, r1, lsl #1
   38148:	cmp	r3, #0
   3814c:	blt	38198 <__assert_fail@plt+0x265f4>
   38150:	bl	38250 <__assert_fail@plt+0x266ac>
   38154:	ldr	lr, [sp, #4]
   38158:	add	sp, sp, #8
   3815c:	pop	{r2, r3}
   38160:	rsbs	r0, r0, #0
   38164:	sbc	r1, r1, r1, lsl #1
   38168:	rsbs	r2, r2, #0
   3816c:	sbc	r3, r3, r3, lsl #1
   38170:	bx	lr
   38174:	rsbs	r2, r2, #0
   38178:	sbc	r3, r3, r3, lsl #1
   3817c:	bl	38250 <__assert_fail@plt+0x266ac>
   38180:	ldr	lr, [sp, #4]
   38184:	add	sp, sp, #8
   38188:	pop	{r2, r3}
   3818c:	rsbs	r0, r0, #0
   38190:	sbc	r1, r1, r1, lsl #1
   38194:	bx	lr
   38198:	rsbs	r2, r2, #0
   3819c:	sbc	r3, r3, r3, lsl #1
   381a0:	bl	38250 <__assert_fail@plt+0x266ac>
   381a4:	ldr	lr, [sp, #4]
   381a8:	add	sp, sp, #8
   381ac:	pop	{r2, r3}
   381b0:	rsbs	r2, r2, #0
   381b4:	sbc	r3, r3, r3, lsl #1
   381b8:	bx	lr
   381bc:	cmp	r3, #0
   381c0:	cmpeq	r2, #0
   381c4:	bne	381dc <__assert_fail@plt+0x26638>
   381c8:	cmp	r1, #0
   381cc:	cmpeq	r0, #0
   381d0:	mvnne	r1, #0
   381d4:	mvnne	r0, #0
   381d8:	b	381f8 <__assert_fail@plt+0x26654>
   381dc:	sub	sp, sp, #8
   381e0:	push	{sp, lr}
   381e4:	bl	38250 <__assert_fail@plt+0x266ac>
   381e8:	ldr	lr, [sp, #4]
   381ec:	add	sp, sp, #8
   381f0:	pop	{r2, r3}
   381f4:	bx	lr
   381f8:	push	{r1, lr}
   381fc:	mov	r0, #8
   38200:	bl	116d0 <raise@plt>
   38204:	pop	{r1, pc}
   38208:	vmov	d7, r0, r1
   3820c:	vldr	d6, [pc, #44]	; 38240 <__assert_fail@plt+0x2669c>
   38210:	vldr	d5, [pc, #48]	; 38248 <__assert_fail@plt+0x266a4>
   38214:	mov	r0, #0
   38218:	vmul.f64	d6, d7, d6
   3821c:	vcvt.u32.f64	s12, d6
   38220:	vcvt.f64.u32	d4, s12
   38224:	vmov	r1, s12
   38228:	vmls.f64	d7, d4, d5
   3822c:	vcvt.u32.f64	s14, d7
   38230:	vmov	r3, s14
   38234:	orr	r0, r0, r3
   38238:	bx	lr
   3823c:	nop			; (mov r0, r0)
   38240:	andeq	r0, r0, r0
   38244:	ldclcc	0, cr0, [r0]
   38248:	andeq	r0, r0, r0
   3824c:	mvnsmi	r0, r0
   38250:	cmp	r1, r3
   38254:	push	{r4, r5, r6, r7, r8, r9, lr}
   38258:	cmpeq	r0, r2
   3825c:	mov	r4, r0
   38260:	mov	r5, r1
   38264:	ldr	r9, [sp, #28]
   38268:	movcc	r0, #0
   3826c:	movcc	r1, #0
   38270:	bcc	38368 <__assert_fail@plt+0x267c4>
   38274:	cmp	r3, #0
   38278:	clzeq	ip, r2
   3827c:	clzne	ip, r3
   38280:	addeq	ip, ip, #32
   38284:	cmp	r5, #0
   38288:	clzeq	r1, r4
   3828c:	addeq	r1, r1, #32
   38290:	clzne	r1, r5
   38294:	sub	ip, ip, r1
   38298:	sub	lr, ip, #32
   3829c:	lsl	r7, r3, ip
   382a0:	rsb	r8, ip, #32
   382a4:	orr	r7, r7, r2, lsl lr
   382a8:	orr	r7, r7, r2, lsr r8
   382ac:	lsl	r6, r2, ip
   382b0:	cmp	r5, r7
   382b4:	cmpeq	r4, r6
   382b8:	movcc	r0, #0
   382bc:	movcc	r1, #0
   382c0:	bcc	382dc <__assert_fail@plt+0x26738>
   382c4:	mov	r3, #1
   382c8:	subs	r4, r4, r6
   382cc:	lsl	r1, r3, lr
   382d0:	lsl	r0, r3, ip
   382d4:	orr	r1, r1, r3, lsr r8
   382d8:	sbc	r5, r5, r7
   382dc:	cmp	ip, #0
   382e0:	beq	38368 <__assert_fail@plt+0x267c4>
   382e4:	lsrs	r3, r7, #1
   382e8:	rrx	r2, r6
   382ec:	mov	r6, ip
   382f0:	b	38314 <__assert_fail@plt+0x26770>
   382f4:	subs	r4, r4, r2
   382f8:	sbc	r5, r5, r3
   382fc:	adds	r4, r4, r4
   38300:	adc	r5, r5, r5
   38304:	adds	r4, r4, #1
   38308:	adc	r5, r5, #0
   3830c:	subs	r6, r6, #1
   38310:	beq	38330 <__assert_fail@plt+0x2678c>
   38314:	cmp	r5, r3
   38318:	cmpeq	r4, r2
   3831c:	bcs	382f4 <__assert_fail@plt+0x26750>
   38320:	adds	r4, r4, r4
   38324:	adc	r5, r5, r5
   38328:	subs	r6, r6, #1
   3832c:	bne	38314 <__assert_fail@plt+0x26770>
   38330:	lsr	r6, r4, ip
   38334:	lsr	r7, r5, ip
   38338:	orr	r6, r6, r5, lsl r8
   3833c:	adds	r2, r0, r4
   38340:	orr	r6, r6, r5, lsr lr
   38344:	adc	r3, r1, r5
   38348:	lsl	r1, r7, ip
   3834c:	orr	r1, r1, r6, lsl lr
   38350:	lsl	r0, r6, ip
   38354:	orr	r1, r1, r6, lsr r8
   38358:	subs	r0, r2, r0
   3835c:	mov	r4, r6
   38360:	mov	r5, r7
   38364:	sbc	r1, r3, r1
   38368:	cmp	r9, #0
   3836c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   38370:	strd	r4, [r9]
   38374:	pop	{r4, r5, r6, r7, r8, r9, pc}
   38378:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3837c:	mov	r7, r0
   38380:	ldr	r6, [pc, #72]	; 383d0 <__assert_fail@plt+0x2682c>
   38384:	ldr	r5, [pc, #72]	; 383d4 <__assert_fail@plt+0x26830>
   38388:	add	r6, pc, r6
   3838c:	add	r5, pc, r5
   38390:	sub	r6, r6, r5
   38394:	mov	r8, r1
   38398:	mov	r9, r2
   3839c:	bl	11674 <pthread_mutex_unlock@plt-0x20>
   383a0:	asrs	r6, r6, #2
   383a4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   383a8:	mov	r4, #0
   383ac:	add	r4, r4, #1
   383b0:	ldr	r3, [r5], #4
   383b4:	mov	r2, r9
   383b8:	mov	r1, r8
   383bc:	mov	r0, r7
   383c0:	blx	r3
   383c4:	cmp	r6, r4
   383c8:	bne	383ac <__assert_fail@plt+0x26808>
   383cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   383d0:	andeq	r2, r1, r0, lsl #23
   383d4:	andeq	r2, r1, r8, ror fp
   383d8:	bx	lr
   383dc:	ldr	r3, [pc, #12]	; 383f0 <__assert_fail@plt+0x2684c>
   383e0:	mov	r1, #0
   383e4:	add	r3, pc, r3
   383e8:	ldr	r2, [r3]
   383ec:	b	119dc <__cxa_atexit@plt>
   383f0:	ldrdeq	r2, [r1], -ip

Disassembly of section .fini:

000383f4 <.fini>:
   383f4:	push	{r3, lr}
   383f8:	pop	{r3, pc}
