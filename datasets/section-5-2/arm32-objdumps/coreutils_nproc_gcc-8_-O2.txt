
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c20 <.init>:
   10c20:	push	{r3, lr}
   10c24:	bl	110d8 <__assert_fail@plt+0x24c>
   10c28:	pop	{r3, pc}

Disassembly of section .plt:

00010c2c <calloc@plt-0x14>:
   10c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c30:	ldr	lr, [pc, #4]	; 10c3c <calloc@plt-0x4>
   10c34:	add	lr, pc, lr
   10c38:	ldr	pc, [lr, #8]!
   10c3c:	andeq	r6, r1, r4, asr #7

00010c40 <calloc@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #964]!	; 0x3c4

00010c4c <fputs_unlocked@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #956]!	; 0x3bc

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #948]!	; 0x3b4

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #940]!	; 0x3ac

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #932]!	; 0x3a4

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #924]!	; 0x39c

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #916]!	; 0x394

00010c94 <__strtoull_internal@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #908]!	; 0x38c

00010ca0 <mbsinit@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #900]!	; 0x384

00010cac <__sched_cpucount@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #892]!	; 0x37c

00010cb8 <memcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #884]!	; 0x374

00010cc4 <fputc_unlocked@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #876]!	; 0x36c

00010cd0 <dcgettext@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #868]!	; 0x364

00010cdc <sysconf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #860]!	; 0x35c

00010ce8 <realloc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #852]!	; 0x354

00010cf4 <textdomain@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #844]!	; 0x34c

00010d00 <iswprint@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #836]!	; 0x344

00010d0c <fwrite@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #828]!	; 0x33c

00010d18 <lseek64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #820]!	; 0x334

00010d24 <__ctype_get_mb_cur_max@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #812]!	; 0x32c

00010d30 <__fpending@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #804]!	; 0x324

00010d3c <mbrtowc@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #796]!	; 0x31c

00010d48 <error@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #788]!	; 0x314

00010d54 <getenv@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #780]!	; 0x30c

00010d60 <malloc@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #772]!	; 0x304

00010d6c <__libc_start_main@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #764]!	; 0x2fc

00010d78 <__freading@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #756]!	; 0x2f4

00010d84 <__gmon_start__@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d90 <getopt_long@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #740]!	; 0x2e4

00010d9c <__ctype_b_loc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #732]!	; 0x2dc

00010da8 <exit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #724]!	; 0x2d4

00010db4 <strtoul@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #716]!	; 0x2cc

00010dc0 <strlen@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #708]!	; 0x2c4

00010dcc <strchr@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #700]!	; 0x2bc

00010dd8 <__errno_location@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #692]!	; 0x2b4

00010de4 <__cxa_atexit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #684]!	; 0x2ac

00010df0 <memset@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dfc <__printf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #668]!	; 0x29c

00010e08 <fileno@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #660]!	; 0x294

00010e14 <__fprintf_chk@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #652]!	; 0x28c

00010e20 <fclose@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #644]!	; 0x284

00010e2c <fseeko64@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #636]!	; 0x27c

00010e38 <setlocale@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #628]!	; 0x274

00010e44 <strrchr@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #620]!	; 0x26c

00010e50 <nl_langinfo@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #612]!	; 0x264

00010e5c <sched_getaffinity@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #604]!	; 0x25c

00010e68 <bindtextdomain@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #596]!	; 0x254

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #588]!	; 0x24c

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #580]!	; 0x244

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #572]!	; 0x23c

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	r3, #2
   10e9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10ea0:	movw	r5, #22628	; 0x5864
   10ea4:	movt	r5, #1
   10ea8:	strd	r6, [sp, #8]
   10eac:	mov	r7, r0
   10eb0:	strd	r8, [sp, #16]
   10eb4:	mov	r6, r1
   10eb8:	movw	r8, #28992	; 0x7140
   10ebc:	movt	r8, #2
   10ec0:	strd	sl, [sp, #24]
   10ec4:	mov	r9, r5
   10ec8:	str	lr, [sp, #32]
   10ecc:	sub	sp, sp, #36	; 0x24
   10ed0:	mov	fp, #0
   10ed4:	ldr	r0, [r1]
   10ed8:	str	r3, [sp, #28]
   10edc:	bl	117e8 <__assert_fail@plt+0x95c>
   10ee0:	mov	r1, r5
   10ee4:	mov	r0, #6
   10ee8:	bl	10e38 <setlocale@plt>
   10eec:	movw	r1, #22972	; 0x59bc
   10ef0:	movt	r1, #1
   10ef4:	movw	r0, #22804	; 0x5914
   10ef8:	movt	r0, #1
   10efc:	bl	10e68 <bindtextdomain@plt>
   10f00:	movw	r0, #22804	; 0x5914
   10f04:	movt	r0, #1
   10f08:	bl	10cf4 <textdomain@plt>
   10f0c:	movw	r0, #5344	; 0x14e0
   10f10:	movt	r0, #1
   10f14:	bl	1567c <__assert_fail@plt+0x47f0>
   10f18:	mov	r4, #0
   10f1c:	ldr	r3, [pc, #372]	; 11098 <__assert_fail@plt+0x20c>
   10f20:	mov	r2, r9
   10f24:	mov	r1, r6
   10f28:	mov	r0, r7
   10f2c:	str	r4, [sp]
   10f30:	bl	10d90 <getopt_long@plt>
   10f34:	cmn	r0, #1
   10f38:	beq	10ff8 <__assert_fail@plt+0x16c>
   10f3c:	cmn	r0, #2
   10f40:	beq	11050 <__assert_fail@plt+0x1c4>
   10f44:	ble	10f5c <__assert_fail@plt+0xd0>
   10f48:	cmp	r0, #256	; 0x100
   10f4c:	bne	10fa4 <__assert_fail@plt+0x118>
   10f50:	mov	r3, #0
   10f54:	str	r3, [sp, #28]
   10f58:	b	10f1c <__assert_fail@plt+0x90>
   10f5c:	cmn	r0, #3
   10f60:	bne	11090 <__assert_fail@plt+0x204>
   10f64:	movw	r2, #22996	; 0x59d4
   10f68:	movt	r2, #1
   10f6c:	movw	r3, #28896	; 0x70e0
   10f70:	movt	r3, #2
   10f74:	movw	r0, #28988	; 0x713c
   10f78:	movt	r0, #2
   10f7c:	stm	sp, {r2, r4}
   10f80:	movw	r1, #22312	; 0x5728
   10f84:	movt	r1, #1
   10f88:	ldr	r0, [r0]
   10f8c:	movw	r2, #22800	; 0x5910
   10f90:	movt	r2, #1
   10f94:	ldr	r3, [r3]
   10f98:	bl	13f74 <__assert_fail@plt+0x30e8>
   10f9c:	mov	r0, #0
   10fa0:	bl	10da8 <exit@plt>
   10fa4:	movw	r3, #257	; 0x101
   10fa8:	cmp	r0, r3
   10fac:	bne	11090 <__assert_fail@plt+0x204>
   10fb0:	ldr	fp, [r8]
   10fb4:	mov	r2, #5
   10fb8:	movw	r1, #23016	; 0x59e8
   10fbc:	movt	r1, #1
   10fc0:	mov	r0, #0
   10fc4:	bl	10cd0 <dcgettext@plt>
   10fc8:	mvn	sl, #0
   10fcc:	mov	r2, #0
   10fd0:	str	r5, [sp, #8]
   10fd4:	str	r0, [sp, #12]
   10fd8:	mov	r3, #0
   10fdc:	mov	r0, fp
   10fe0:	mov	fp, #0
   10fe4:	strd	sl, [sp]
   10fe8:	str	r4, [sp, #16]
   10fec:	bl	14684 <__assert_fail@plt+0x37f8>
   10ff0:	mov	fp, r0
   10ff4:	b	10f18 <__assert_fail@plt+0x8c>
   10ff8:	movw	r4, #28976	; 0x7130
   10ffc:	movt	r4, #2
   11000:	ldr	r3, [r4]
   11004:	cmp	r3, r7
   11008:	bne	11058 <__assert_fail@plt+0x1cc>
   1100c:	ldr	r0, [sp, #28]
   11010:	bl	116d0 <__assert_fail@plt+0x844>
   11014:	cmp	fp, r0
   11018:	movw	r1, #23052	; 0x5a0c
   1101c:	movt	r1, #1
   11020:	subcc	r2, r0, fp
   11024:	movcs	r2, #1
   11028:	mov	r0, #1
   1102c:	bl	10dfc <__printf_chk@plt>
   11030:	mov	r0, #0
   11034:	add	sp, sp, #36	; 0x24
   11038:	ldrd	r4, [sp]
   1103c:	ldrd	r6, [sp, #8]
   11040:	ldrd	r8, [sp, #16]
   11044:	ldrd	sl, [sp, #24]
   11048:	add	sp, sp, #32
   1104c:	pop	{pc}		; (ldr pc, [sp], #4)
   11050:	mov	r0, #0
   11054:	bl	1118c <__assert_fail@plt+0x300>
   11058:	mov	r2, #5
   1105c:	movw	r1, #23032	; 0x59f8
   11060:	movt	r1, #1
   11064:	mov	r0, #0
   11068:	bl	10cd0 <dcgettext@plt>
   1106c:	ldr	r3, [r4]
   11070:	mov	r5, r0
   11074:	ldr	r0, [r6, r3, lsl #2]
   11078:	bl	13ad8 <__assert_fail@plt+0x2c4c>
   1107c:	mov	r1, #0
   11080:	mov	r3, r0
   11084:	mov	r2, r5
   11088:	mov	r0, r1
   1108c:	bl	10d48 <error@plt>
   11090:	mov	r0, #1
   11094:	bl	1118c <__assert_fail@plt+0x300>
   11098:	ldrdeq	r5, [r1], -r8
   1109c:	mov	fp, #0
   110a0:	mov	lr, #0
   110a4:	pop	{r1}		; (ldr r1, [sp], #4)
   110a8:	mov	r2, sp
   110ac:	push	{r2}		; (str r2, [sp, #-4]!)
   110b0:	push	{r0}		; (str r0, [sp, #-4]!)
   110b4:	ldr	ip, [pc, #16]	; 110cc <__assert_fail@plt+0x240>
   110b8:	push	{ip}		; (str ip, [sp, #-4]!)
   110bc:	ldr	r0, [pc, #12]	; 110d0 <__assert_fail@plt+0x244>
   110c0:	ldr	r3, [pc, #12]	; 110d4 <__assert_fail@plt+0x248>
   110c4:	bl	10d6c <__libc_start_main@plt>
   110c8:	bl	10e80 <abort@plt>
   110cc:	andeq	r5, r1, r8, ror r6
   110d0:	muleq	r1, r8, lr
   110d4:	andeq	r5, r1, r8, lsl r6
   110d8:	ldr	r3, [pc, #20]	; 110f4 <__assert_fail@plt+0x268>
   110dc:	ldr	r2, [pc, #20]	; 110f8 <__assert_fail@plt+0x26c>
   110e0:	add	r3, pc, r3
   110e4:	ldr	r2, [r3, r2]
   110e8:	cmp	r2, #0
   110ec:	bxeq	lr
   110f0:	b	10d84 <__gmon_start__@plt>
   110f4:	andeq	r5, r1, r8, lsl pc
   110f8:	ldrdeq	r0, [r0], -r4
   110fc:	ldr	r0, [pc, #24]	; 1111c <__assert_fail@plt+0x290>
   11100:	ldr	r3, [pc, #24]	; 11120 <__assert_fail@plt+0x294>
   11104:	cmp	r3, r0
   11108:	bxeq	lr
   1110c:	ldr	r3, [pc, #16]	; 11124 <__assert_fail@plt+0x298>
   11110:	cmp	r3, #0
   11114:	bxeq	lr
   11118:	bx	r3
   1111c:	andeq	r7, r2, r8, lsr #2
   11120:	andeq	r7, r2, r8, lsr #2
   11124:	andeq	r0, r0, r0
   11128:	ldr	r0, [pc, #36]	; 11154 <__assert_fail@plt+0x2c8>
   1112c:	ldr	r1, [pc, #36]	; 11158 <__assert_fail@plt+0x2cc>
   11130:	sub	r1, r1, r0
   11134:	asr	r1, r1, #2
   11138:	add	r1, r1, r1, lsr #31
   1113c:	asrs	r1, r1, #1
   11140:	bxeq	lr
   11144:	ldr	r3, [pc, #16]	; 1115c <__assert_fail@plt+0x2d0>
   11148:	cmp	r3, #0
   1114c:	bxeq	lr
   11150:	bx	r3
   11154:	andeq	r7, r2, r8, lsr #2
   11158:	andeq	r7, r2, r8, lsr #2
   1115c:	andeq	r0, r0, r0
   11160:	push	{r4, lr}
   11164:	ldr	r4, [pc, #24]	; 11184 <__assert_fail@plt+0x2f8>
   11168:	ldrb	r3, [r4]
   1116c:	cmp	r3, #0
   11170:	popne	{r4, pc}
   11174:	bl	110fc <__assert_fail@plt+0x270>
   11178:	mov	r3, #1
   1117c:	strb	r3, [r4]
   11180:	pop	{r4, pc}
   11184:	andeq	r7, r2, r4, asr #2
   11188:	b	11128 <__assert_fail@plt+0x29c>
   1118c:	subs	r6, r0, #0
   11190:	str	r7, [sp, #-8]!
   11194:	str	lr, [sp, #4]
   11198:	sub	sp, sp, #56	; 0x38
   1119c:	beq	111e4 <__assert_fail@plt+0x358>
   111a0:	movw	r3, #28984	; 0x7138
   111a4:	movt	r3, #2
   111a8:	ldr	r4, [r3]
   111ac:	mov	r2, #5
   111b0:	movw	r1, #22320	; 0x5730
   111b4:	movt	r1, #1
   111b8:	mov	r0, #0
   111bc:	bl	10cd0 <dcgettext@plt>
   111c0:	movw	r3, #29008	; 0x7150
   111c4:	movt	r3, #2
   111c8:	mov	r2, r0
   111cc:	mov	r1, #1
   111d0:	ldr	r3, [r3]
   111d4:	mov	r0, r4
   111d8:	bl	10e14 <__fprintf_chk@plt>
   111dc:	mov	r0, r6
   111e0:	bl	10da8 <exit@plt>
   111e4:	mov	r2, #5
   111e8:	movw	r1, #22360	; 0x5758
   111ec:	movt	r1, #1
   111f0:	movw	r7, #28988	; 0x713c
   111f4:	movt	r7, #2
   111f8:	bl	10cd0 <dcgettext@plt>
   111fc:	movw	r3, #29008	; 0x7150
   11200:	movt	r3, #2
   11204:	mov	r1, r0
   11208:	mov	r0, #1
   1120c:	ldr	r2, [r3]
   11210:	bl	10dfc <__printf_chk@plt>
   11214:	mov	r2, #5
   11218:	movw	r1, #22384	; 0x5770
   1121c:	movt	r1, #1
   11220:	mov	r0, r6
   11224:	bl	10cd0 <dcgettext@plt>
   11228:	ldr	r1, [r7]
   1122c:	bl	10c4c <fputs_unlocked@plt>
   11230:	mov	r2, #5
   11234:	movw	r1, #22512	; 0x57f0
   11238:	movt	r1, #1
   1123c:	mov	r0, r6
   11240:	bl	10cd0 <dcgettext@plt>
   11244:	ldr	r1, [r7]
   11248:	bl	10c4c <fputs_unlocked@plt>
   1124c:	mov	r2, #5
   11250:	movw	r1, #22632	; 0x5868
   11254:	movt	r1, #1
   11258:	mov	r0, r6
   1125c:	bl	10cd0 <dcgettext@plt>
   11260:	ldr	r1, [r7]
   11264:	bl	10c4c <fputs_unlocked@plt>
   11268:	mov	r2, #5
   1126c:	movw	r1, #22680	; 0x5898
   11270:	movt	r1, #1
   11274:	mov	r0, r6
   11278:	bl	10cd0 <dcgettext@plt>
   1127c:	ldr	r1, [r7]
   11280:	bl	10c4c <fputs_unlocked@plt>
   11284:	movw	lr, #22176	; 0x56a0
   11288:	movt	lr, #1
   1128c:	ldr	ip, [lr]
   11290:	ldr	r4, [lr, #4]
   11294:	ldrd	r8, [lr, #8]
   11298:	subs	r1, ip, #0
   1129c:	str	ip, [sp]
   112a0:	ldrd	r2, [lr, #16]
   112a4:	str	r4, [sp, #4]
   112a8:	ldrd	r4, [lr, #24]
   112ac:	strd	r8, [sp, #8]
   112b0:	ldrd	r8, [lr, #32]
   112b4:	strd	r2, [sp, #16]
   112b8:	ldrd	r2, [lr, #40]	; 0x28
   112bc:	strd	r4, [sp, #24]
   112c0:	ldrd	r4, [lr, #48]	; 0x30
   112c4:	strd	r8, [sp, #32]
   112c8:	strd	r2, [sp, #40]	; 0x28
   112cc:	strd	r4, [sp, #48]	; 0x30
   112d0:	movwne	r5, #22312	; 0x5728
   112d4:	mov	r4, sp
   112d8:	movtne	r5, #1
   112dc:	bne	113d4 <__assert_fail@plt+0x548>
   112e0:	ldr	r4, [r4, #4]
   112e4:	movw	r1, #22736	; 0x58d0
   112e8:	movt	r1, #1
   112ec:	mov	r2, #5
   112f0:	cmp	r4, #0
   112f4:	beq	113e8 <__assert_fail@plt+0x55c>
   112f8:	mov	r0, #0
   112fc:	bl	10cd0 <dcgettext@plt>
   11300:	mov	r1, r0
   11304:	movw	r3, #22760	; 0x58e8
   11308:	movt	r3, #1
   1130c:	movw	r2, #22800	; 0x5910
   11310:	movt	r2, #1
   11314:	mov	r0, #1
   11318:	bl	10dfc <__printf_chk@plt>
   1131c:	mov	r1, #0
   11320:	mov	r0, #5
   11324:	bl	10e38 <setlocale@plt>
   11328:	cmp	r0, #0
   1132c:	movweq	r5, #22312	; 0x5728
   11330:	movteq	r5, #1
   11334:	beq	11358 <__assert_fail@plt+0x4cc>
   11338:	movw	r1, #22816	; 0x5920
   1133c:	movt	r1, #1
   11340:	mov	r2, #3
   11344:	movw	r5, #22312	; 0x5728
   11348:	movt	r5, #1
   1134c:	bl	10e74 <strncmp@plt>
   11350:	cmp	r0, #0
   11354:	bne	114a0 <__assert_fail@plt+0x614>
   11358:	mov	r2, #5
   1135c:	movw	r1, #22892	; 0x596c
   11360:	movt	r1, #1
   11364:	mov	r0, #0
   11368:	bl	10cd0 <dcgettext@plt>
   1136c:	mov	r1, r0
   11370:	movw	r3, #22312	; 0x5728
   11374:	movt	r3, #1
   11378:	movw	r2, #22760	; 0x58e8
   1137c:	movt	r2, #1
   11380:	mov	r0, #1
   11384:	bl	10dfc <__printf_chk@plt>
   11388:	mov	r2, #5
   1138c:	movw	r1, #22920	; 0x5988
   11390:	movt	r1, #1
   11394:	mov	r0, #0
   11398:	bl	10cd0 <dcgettext@plt>
   1139c:	movw	r2, #23068	; 0x5a1c
   113a0:	movt	r2, #1
   113a4:	cmp	r4, r5
   113a8:	movw	r3, #22628	; 0x5864
   113ac:	movt	r3, #1
   113b0:	mov	r1, r0
   113b4:	moveq	r3, r2
   113b8:	mov	r2, r4
   113bc:	mov	r0, #1
   113c0:	bl	10dfc <__printf_chk@plt>
   113c4:	b	111dc <__assert_fail@plt+0x350>
   113c8:	ldr	r1, [r4, #8]!
   113cc:	cmp	r1, #0
   113d0:	beq	112e0 <__assert_fail@plt+0x454>
   113d4:	mov	r0, r5
   113d8:	bl	10c58 <strcmp@plt>
   113dc:	cmp	r0, #0
   113e0:	bne	113c8 <__assert_fail@plt+0x53c>
   113e4:	b	112e0 <__assert_fail@plt+0x454>
   113e8:	mov	r0, r4
   113ec:	bl	10cd0 <dcgettext@plt>
   113f0:	mov	r1, r0
   113f4:	movw	r3, #22760	; 0x58e8
   113f8:	movt	r3, #1
   113fc:	movw	r2, #22800	; 0x5910
   11400:	movt	r2, #1
   11404:	mov	r0, #1
   11408:	bl	10dfc <__printf_chk@plt>
   1140c:	mov	r1, r4
   11410:	mov	r0, #5
   11414:	bl	10e38 <setlocale@plt>
   11418:	cmp	r0, #0
   1141c:	beq	11438 <__assert_fail@plt+0x5ac>
   11420:	movw	r1, #22816	; 0x5920
   11424:	movt	r1, #1
   11428:	mov	r2, #3
   1142c:	bl	10e74 <strncmp@plt>
   11430:	cmp	r0, #0
   11434:	bne	11494 <__assert_fail@plt+0x608>
   11438:	mov	r2, #5
   1143c:	movw	r1, #22892	; 0x596c
   11440:	movt	r1, #1
   11444:	mov	r0, #0
   11448:	bl	10cd0 <dcgettext@plt>
   1144c:	mov	r1, r0
   11450:	movw	r3, #22312	; 0x5728
   11454:	movt	r3, #1
   11458:	movw	r2, #22760	; 0x58e8
   1145c:	movt	r2, #1
   11460:	mov	r0, #1
   11464:	bl	10dfc <__printf_chk@plt>
   11468:	movw	r1, #22920	; 0x5988
   1146c:	movt	r1, #1
   11470:	mov	r2, #5
   11474:	mov	r0, #0
   11478:	bl	10cd0 <dcgettext@plt>
   1147c:	movw	r4, #22312	; 0x5728
   11480:	movt	r4, #1
   11484:	movw	r3, #23068	; 0x5a1c
   11488:	movt	r3, #1
   1148c:	mov	r1, r0
   11490:	b	113b8 <__assert_fail@plt+0x52c>
   11494:	movw	r5, #22312	; 0x5728
   11498:	movt	r5, #1
   1149c:	mov	r4, r5
   114a0:	mov	r2, #5
   114a4:	movw	r1, #22820	; 0x5924
   114a8:	movt	r1, #1
   114ac:	mov	r0, #0
   114b0:	bl	10cd0 <dcgettext@plt>
   114b4:	ldr	r1, [r7]
   114b8:	bl	10c4c <fputs_unlocked@plt>
   114bc:	b	11358 <__assert_fail@plt+0x4cc>
   114c0:	movw	r3, #29000	; 0x7148
   114c4:	movt	r3, #2
   114c8:	str	r0, [r3]
   114cc:	bx	lr
   114d0:	movw	r3, #29000	; 0x7148
   114d4:	movt	r3, #2
   114d8:	strb	r0, [r3, #4]
   114dc:	bx	lr
   114e0:	movw	r3, #28988	; 0x713c
   114e4:	movt	r3, #2
   114e8:	strd	r4, [sp, #-16]!
   114ec:	ldr	r0, [r3]
   114f0:	str	r6, [sp, #8]
   114f4:	str	lr, [sp, #12]
   114f8:	sub	sp, sp, #8
   114fc:	bl	1513c <__assert_fail@plt+0x42b0>
   11500:	cmp	r0, #0
   11504:	beq	11530 <__assert_fail@plt+0x6a4>
   11508:	movw	r4, #29000	; 0x7148
   1150c:	movt	r4, #2
   11510:	ldrb	r6, [r4, #4]
   11514:	bl	10dd8 <__errno_location@plt>
   11518:	mov	r5, r0
   1151c:	cmp	r6, #0
   11520:	beq	1155c <__assert_fail@plt+0x6d0>
   11524:	ldr	r3, [r0]
   11528:	cmp	r3, #32
   1152c:	bne	1155c <__assert_fail@plt+0x6d0>
   11530:	movw	r3, #28984	; 0x7138
   11534:	movt	r3, #2
   11538:	ldr	r0, [r3]
   1153c:	bl	1513c <__assert_fail@plt+0x42b0>
   11540:	cmp	r0, #0
   11544:	bne	115a4 <__assert_fail@plt+0x718>
   11548:	add	sp, sp, #8
   1154c:	ldrd	r4, [sp]
   11550:	ldr	r6, [sp, #8]
   11554:	add	sp, sp, #12
   11558:	pop	{pc}		; (ldr pc, [sp], #4)
   1155c:	movw	r1, #23212	; 0x5aac
   11560:	movt	r1, #1
   11564:	mov	r2, #5
   11568:	mov	r0, #0
   1156c:	bl	10cd0 <dcgettext@plt>
   11570:	mov	r6, r0
   11574:	ldr	r0, [r4]
   11578:	cmp	r0, #0
   1157c:	beq	115b4 <__assert_fail@plt+0x728>
   11580:	ldr	r4, [r5]
   11584:	bl	138ec <__assert_fail@plt+0x2a60>
   11588:	mov	r3, r0
   1158c:	movw	r2, #23224	; 0x5ab8
   11590:	movt	r2, #1
   11594:	mov	r0, #0
   11598:	str	r6, [sp]
   1159c:	mov	r1, r4
   115a0:	bl	10d48 <error@plt>
   115a4:	movw	r3, #28900	; 0x70e4
   115a8:	movt	r3, #2
   115ac:	ldr	r0, [r3]
   115b0:	bl	10c7c <_exit@plt>
   115b4:	mov	r3, r6
   115b8:	movw	r2, #23228	; 0x5abc
   115bc:	movt	r2, #1
   115c0:	ldr	r1, [r5]
   115c4:	bl	10d48 <error@plt>
   115c8:	b	115a4 <__assert_fail@plt+0x718>
   115cc:	push	{lr}		; (str lr, [sp, #-4]!)
   115d0:	sub	sp, sp, #132	; 0x84
   115d4:	mov	r1, #128	; 0x80
   115d8:	mov	r2, sp
   115dc:	mov	r0, #0
   115e0:	bl	10e5c <sched_getaffinity@plt>
   115e4:	cmp	r0, #0
   115e8:	beq	115f8 <__assert_fail@plt+0x76c>
   115ec:	mov	r0, #0
   115f0:	add	sp, sp, #132	; 0x84
   115f4:	pop	{pc}		; (ldr pc, [sp], #4)
   115f8:	mov	r1, sp
   115fc:	mov	r0, #128	; 0x80
   11600:	bl	10cac <__sched_cpucount@plt>
   11604:	cmp	r0, #0
   11608:	beq	115ec <__assert_fail@plt+0x760>
   1160c:	add	sp, sp, #132	; 0x84
   11610:	pop	{pc}		; (ldr pc, [sp], #4)
   11614:	ldrb	r3, [r0]
   11618:	cmp	r3, #0
   1161c:	beq	11644 <__assert_fail@plt+0x7b8>
   11620:	cmp	r3, #9
   11624:	bcc	1164c <__assert_fail@plt+0x7c0>
   11628:	cmp	r3, #13
   1162c:	bls	11638 <__assert_fail@plt+0x7ac>
   11630:	cmp	r3, #32
   11634:	bne	1164c <__assert_fail@plt+0x7c0>
   11638:	ldrb	r3, [r0, #1]!
   1163c:	cmp	r3, #0
   11640:	bne	11620 <__assert_fail@plt+0x794>
   11644:	mov	r0, #0
   11648:	bx	lr
   1164c:	sub	r3, r3, #48	; 0x30
   11650:	cmp	r3, #9
   11654:	bhi	11644 <__assert_fail@plt+0x7b8>
   11658:	mov	r3, #0
   1165c:	push	{lr}		; (str lr, [sp, #-4]!)
   11660:	sub	sp, sp, #12
   11664:	mov	r2, #10
   11668:	add	r1, sp, #4
   1166c:	str	r3, [sp, #4]
   11670:	bl	10db4 <strtoul@plt>
   11674:	ldr	r2, [sp, #4]
   11678:	cmp	r2, #0
   1167c:	beq	116b0 <__assert_fail@plt+0x824>
   11680:	ldrb	r3, [r2]
   11684:	cmp	r3, #0
   11688:	beq	116b4 <__assert_fail@plt+0x828>
   1168c:	cmp	r3, #9
   11690:	add	r2, r2, #1
   11694:	bcc	116a8 <__assert_fail@plt+0x81c>
   11698:	cmp	r3, #13
   1169c:	bls	116bc <__assert_fail@plt+0x830>
   116a0:	cmp	r3, #32
   116a4:	beq	116bc <__assert_fail@plt+0x830>
   116a8:	cmp	r3, #44	; 0x2c
   116ac:	beq	116b4 <__assert_fail@plt+0x828>
   116b0:	mov	r0, #0
   116b4:	add	sp, sp, #12
   116b8:	pop	{pc}		; (ldr pc, [sp], #4)
   116bc:	str	r2, [sp, #4]
   116c0:	ldrb	r3, [r2]
   116c4:	cmp	r3, #0
   116c8:	bne	1168c <__assert_fail@plt+0x800>
   116cc:	b	116b4 <__assert_fail@plt+0x828>
   116d0:	cmp	r0, #2
   116d4:	strd	r4, [sp, #-16]!
   116d8:	str	r6, [sp, #8]
   116dc:	str	lr, [sp, #12]
   116e0:	beq	11728 <__assert_fail@plt+0x89c>
   116e4:	cmp	r0, #1
   116e8:	beq	117e0 <__assert_fail@plt+0x954>
   116ec:	mov	r0, #83	; 0x53
   116f0:	bl	10cdc <sysconf@plt>
   116f4:	sub	r3, r0, #1
   116f8:	mov	r5, r0
   116fc:	cmp	r3, #1
   11700:	mov	r4, r0
   11704:	bls	11788 <__assert_fail@plt+0x8fc>
   11708:	cmp	r5, #1
   1170c:	movge	r4, r5
   11710:	movlt	r4, #1
   11714:	mov	r0, r4
   11718:	ldrd	r4, [sp]
   1171c:	ldr	r6, [sp, #8]
   11720:	add	sp, sp, #12
   11724:	pop	{pc}		; (ldr pc, [sp], #4)
   11728:	movw	r0, #23232	; 0x5ac0
   1172c:	movt	r0, #1
   11730:	bl	10d54 <getenv@plt>
   11734:	cmp	r0, #0
   11738:	beq	117c0 <__assert_fail@plt+0x934>
   1173c:	bl	11614 <__assert_fail@plt+0x788>
   11740:	mov	r5, r0
   11744:	movw	r0, #23248	; 0x5ad0
   11748:	movt	r0, #1
   1174c:	bl	10d54 <getenv@plt>
   11750:	cmp	r0, #0
   11754:	mvneq	r4, #0
   11758:	beq	11768 <__assert_fail@plt+0x8dc>
   1175c:	bl	11614 <__assert_fail@plt+0x788>
   11760:	subs	r4, r0, #0
   11764:	mvneq	r4, #0
   11768:	cmp	r5, #0
   1176c:	bne	117b4 <__assert_fail@plt+0x928>
   11770:	bl	115cc <__assert_fail@plt+0x740>
   11774:	cmp	r0, #0
   11778:	beq	1179c <__assert_fail@plt+0x910>
   1177c:	cmp	r0, r4
   11780:	movcc	r4, r0
   11784:	b	11714 <__assert_fail@plt+0x888>
   11788:	bl	115cc <__assert_fail@plt+0x740>
   1178c:	cmp	r5, r0
   11790:	bcs	11714 <__assert_fail@plt+0x888>
   11794:	mov	r5, r0
   11798:	b	11708 <__assert_fail@plt+0x87c>
   1179c:	mov	r0, #84	; 0x54
   117a0:	bl	10cdc <sysconf@plt>
   117a4:	cmp	r0, #0
   117a8:	movle	r4, #1
   117ac:	ble	11714 <__assert_fail@plt+0x888>
   117b0:	b	1177c <__assert_fail@plt+0x8f0>
   117b4:	cmp	r4, r5
   117b8:	movcs	r4, r5
   117bc:	b	11714 <__assert_fail@plt+0x888>
   117c0:	movw	r0, #23248	; 0x5ad0
   117c4:	movt	r0, #1
   117c8:	bl	10d54 <getenv@plt>
   117cc:	cmp	r0, #0
   117d0:	beq	117e0 <__assert_fail@plt+0x954>
   117d4:	bl	11614 <__assert_fail@plt+0x788>
   117d8:	subs	r4, r0, #0
   117dc:	bne	11770 <__assert_fail@plt+0x8e4>
   117e0:	mvn	r4, #0
   117e4:	b	11770 <__assert_fail@plt+0x8e4>
   117e8:	strd	r4, [sp, #-16]!
   117ec:	subs	r4, r0, #0
   117f0:	str	r6, [sp, #8]
   117f4:	str	lr, [sp, #12]
   117f8:	beq	11890 <__assert_fail@plt+0xa04>
   117fc:	mov	r1, #47	; 0x2f
   11800:	bl	10e44 <strrchr@plt>
   11804:	subs	r5, r0, #0
   11808:	beq	11868 <__assert_fail@plt+0x9dc>
   1180c:	add	r6, r5, #1
   11810:	sub	r3, r6, r4
   11814:	cmp	r3, #6
   11818:	ble	11868 <__assert_fail@plt+0x9dc>
   1181c:	movw	r1, #23324	; 0x5b1c
   11820:	movt	r1, #1
   11824:	mov	r2, #7
   11828:	sub	r0, r5, #6
   1182c:	bl	10e74 <strncmp@plt>
   11830:	cmp	r0, #0
   11834:	bne	11868 <__assert_fail@plt+0x9dc>
   11838:	movw	r1, #23332	; 0x5b24
   1183c:	movt	r1, #1
   11840:	mov	r2, #3
   11844:	mov	r0, r6
   11848:	bl	10e74 <strncmp@plt>
   1184c:	cmp	r0, #0
   11850:	movne	r4, r6
   11854:	bne	11868 <__assert_fail@plt+0x9dc>
   11858:	add	r4, r5, #4
   1185c:	movw	r3, #28968	; 0x7128
   11860:	movt	r3, #2
   11864:	str	r4, [r3]
   11868:	movw	r2, #29008	; 0x7150
   1186c:	movt	r2, #2
   11870:	ldr	r6, [sp, #8]
   11874:	movw	r3, #28972	; 0x712c
   11878:	movt	r3, #2
   1187c:	str	r4, [r2]
   11880:	str	r4, [r3]
   11884:	ldrd	r4, [sp]
   11888:	add	sp, sp, #12
   1188c:	pop	{pc}		; (ldr pc, [sp], #4)
   11890:	movw	r3, #28984	; 0x7138
   11894:	movt	r3, #2
   11898:	movw	r0, #23268	; 0x5ae4
   1189c:	movt	r0, #1
   118a0:	ldr	r3, [r3]
   118a4:	mov	r2, #55	; 0x37
   118a8:	mov	r1, #1
   118ac:	bl	10d0c <fwrite@plt>
   118b0:	bl	10e80 <abort@plt>
   118b4:	strd	r4, [sp, #-16]!
   118b8:	mov	r4, #0
   118bc:	mov	r5, #0
   118c0:	cmp	r1, #10
   118c4:	str	r6, [sp, #8]
   118c8:	strd	r4, [r0]
   118cc:	strd	r4, [r0, #8]
   118d0:	str	lr, [sp, #12]
   118d4:	strd	r4, [r0, #16]
   118d8:	strd	r4, [r0, #24]
   118dc:	strd	r4, [r0, #32]
   118e0:	strd	r4, [r0, #40]	; 0x28
   118e4:	beq	118fc <__assert_fail@plt+0xa70>
   118e8:	ldrd	r4, [sp]
   118ec:	str	r1, [r0]
   118f0:	ldr	r6, [sp, #8]
   118f4:	add	sp, sp, #12
   118f8:	pop	{pc}		; (ldr pc, [sp], #4)
   118fc:	bl	10e80 <abort@plt>
   11900:	mov	r2, #5
   11904:	strd	r4, [sp, #-16]!
   11908:	mov	r5, r0
   1190c:	str	r6, [sp, #8]
   11910:	mov	r6, r1
   11914:	mov	r1, r0
   11918:	mov	r0, #0
   1191c:	str	lr, [sp, #12]
   11920:	bl	10cd0 <dcgettext@plt>
   11924:	cmp	r5, r0
   11928:	mov	r4, r0
   1192c:	beq	11944 <__assert_fail@plt+0xab8>
   11930:	mov	r0, r4
   11934:	ldrd	r4, [sp]
   11938:	ldr	r6, [sp, #8]
   1193c:	add	sp, sp, #12
   11940:	pop	{pc}		; (ldr pc, [sp], #4)
   11944:	bl	15408 <__assert_fail@plt+0x457c>
   11948:	ldrb	r3, [r0]
   1194c:	bic	r3, r3, #32
   11950:	cmp	r3, #85	; 0x55
   11954:	bne	119bc <__assert_fail@plt+0xb30>
   11958:	ldrb	r3, [r0, #1]
   1195c:	bic	r3, r3, #32
   11960:	cmp	r3, #84	; 0x54
   11964:	bne	11a3c <__assert_fail@plt+0xbb0>
   11968:	ldrb	r3, [r0, #2]
   1196c:	bic	r3, r3, #32
   11970:	cmp	r3, #70	; 0x46
   11974:	bne	11a3c <__assert_fail@plt+0xbb0>
   11978:	ldrb	r3, [r0, #3]
   1197c:	cmp	r3, #45	; 0x2d
   11980:	bne	11a3c <__assert_fail@plt+0xbb0>
   11984:	ldrb	r3, [r0, #4]
   11988:	cmp	r3, #56	; 0x38
   1198c:	bne	11a3c <__assert_fail@plt+0xbb0>
   11990:	ldrb	r3, [r0, #5]
   11994:	cmp	r3, #0
   11998:	bne	11a3c <__assert_fail@plt+0xbb0>
   1199c:	ldrb	r2, [r4]
   119a0:	movw	r3, #23424	; 0x5b80
   119a4:	movt	r3, #1
   119a8:	movw	r4, #23436	; 0x5b8c
   119ac:	movt	r4, #1
   119b0:	cmp	r2, #96	; 0x60
   119b4:	movne	r4, r3
   119b8:	b	11930 <__assert_fail@plt+0xaa4>
   119bc:	cmp	r3, #71	; 0x47
   119c0:	bne	11a3c <__assert_fail@plt+0xbb0>
   119c4:	ldrb	r3, [r0, #1]
   119c8:	bic	r3, r3, #32
   119cc:	cmp	r3, #66	; 0x42
   119d0:	bne	11a3c <__assert_fail@plt+0xbb0>
   119d4:	ldrb	r3, [r0, #2]
   119d8:	cmp	r3, #49	; 0x31
   119dc:	bne	11a3c <__assert_fail@plt+0xbb0>
   119e0:	ldrb	r3, [r0, #3]
   119e4:	cmp	r3, #56	; 0x38
   119e8:	bne	11a3c <__assert_fail@plt+0xbb0>
   119ec:	ldrb	r3, [r0, #4]
   119f0:	cmp	r3, #48	; 0x30
   119f4:	bne	11a3c <__assert_fail@plt+0xbb0>
   119f8:	ldrb	r3, [r0, #5]
   119fc:	cmp	r3, #51	; 0x33
   11a00:	bne	11a3c <__assert_fail@plt+0xbb0>
   11a04:	ldrb	r3, [r0, #6]
   11a08:	cmp	r3, #48	; 0x30
   11a0c:	bne	11a3c <__assert_fail@plt+0xbb0>
   11a10:	ldrb	r3, [r0, #7]
   11a14:	cmp	r3, #0
   11a18:	bne	11a3c <__assert_fail@plt+0xbb0>
   11a1c:	ldrb	r2, [r4]
   11a20:	movw	r3, #23428	; 0x5b84
   11a24:	movt	r3, #1
   11a28:	movw	r4, #23432	; 0x5b88
   11a2c:	movt	r4, #1
   11a30:	cmp	r2, #96	; 0x60
   11a34:	movne	r4, r3
   11a38:	b	11930 <__assert_fail@plt+0xaa4>
   11a3c:	movw	r3, #23440	; 0x5b90
   11a40:	movt	r3, #1
   11a44:	cmp	r6, #9
   11a48:	movw	r4, #23420	; 0x5b7c
   11a4c:	movt	r4, #1
   11a50:	movne	r4, r3
   11a54:	b	11930 <__assert_fail@plt+0xaa4>
   11a58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11a5c:	strd	r6, [sp, #8]
   11a60:	strd	r8, [sp, #16]
   11a64:	strd	sl, [sp, #24]
   11a68:	mov	fp, r0
   11a6c:	mov	sl, r1
   11a70:	str	lr, [sp, #32]
   11a74:	sub	sp, sp, #116	; 0x74
   11a78:	ldr	r8, [sp, #152]	; 0x98
   11a7c:	str	r3, [sp, #28]
   11a80:	ldr	r3, [sp, #156]	; 0x9c
   11a84:	str	r2, [sp, #32]
   11a88:	and	r4, r3, #2
   11a8c:	ubfx	r3, r3, #1, #1
   11a90:	str	r3, [sp, #44]	; 0x2c
   11a94:	bl	10d24 <__ctype_get_mb_cur_max@plt>
   11a98:	str	r0, [sp, #64]	; 0x40
   11a9c:	cmp	r8, #10
   11aa0:	ldrls	pc, [pc, r8, lsl #2]
   11aa4:	b	13214 <__assert_fail@plt+0x2388>
   11aa8:	andeq	r1, r1, ip, lsr #29
   11aac:	andeq	r1, r1, r8, asr #30
   11ab0:	andeq	r2, r1, r4, lsr #10
   11ab4:	andeq	r1, r1, r8, ror #30
   11ab8:	andeq	r1, r1, r0, lsl lr
   11abc:	andeq	r1, r1, ip, asr lr
   11ac0:	ldrdeq	r1, [r1], -ip
   11ac4:	andeq	r1, r1, r8, lsl pc
   11ac8:	ldrdeq	r1, [r1], -r4
   11acc:	ldrdeq	r1, [r1], -r4
   11ad0:	ldrdeq	r1, [r1], -r4
   11ad4:	cmp	r8, #10
   11ad8:	beq	11b04 <__assert_fail@plt+0xc78>
   11adc:	mov	r1, r8
   11ae0:	movw	r0, #23444	; 0x5b94
   11ae4:	movt	r0, #1
   11ae8:	bl	11900 <__assert_fail@plt+0xa74>
   11aec:	mov	r1, r8
   11af0:	str	r0, [sp, #164]	; 0xa4
   11af4:	movw	r0, #23440	; 0x5b90
   11af8:	movt	r0, #1
   11afc:	bl	11900 <__assert_fail@plt+0xa74>
   11b00:	str	r0, [sp, #168]	; 0xa8
   11b04:	cmp	r4, #0
   11b08:	movne	r4, #0
   11b0c:	beq	12ef0 <__assert_fail@plt+0x2064>
   11b10:	mov	r3, #1
   11b14:	mov	r5, #0
   11b18:	ldr	r0, [sp, #168]	; 0xa8
   11b1c:	str	r3, [sp, #36]	; 0x24
   11b20:	str	r3, [sp, #40]	; 0x28
   11b24:	str	r5, [sp, #68]	; 0x44
   11b28:	bl	10dc0 <strlen@plt>
   11b2c:	ldr	r3, [sp, #168]	; 0xa8
   11b30:	str	r5, [sp, #48]	; 0x30
   11b34:	str	r0, [sp, #56]	; 0x38
   11b38:	str	r3, [sp, #60]	; 0x3c
   11b3c:	str	r5, [sp, #72]	; 0x48
   11b40:	str	r8, [sp, #152]	; 0x98
   11b44:	mov	r8, fp
   11b48:	mov	r9, #0
   11b4c:	ldr	fp, [sp, #152]	; 0x98
   11b50:	ldr	r3, [sp, #28]
   11b54:	cmn	r3, #1
   11b58:	beq	120b8 <__assert_fail@plt+0x122c>
   11b5c:	ldr	r3, [sp, #28]
   11b60:	subs	r6, r3, r9
   11b64:	movne	r6, #1
   11b68:	cmp	r6, #0
   11b6c:	beq	120d0 <__assert_fail@plt+0x1244>
   11b70:	ldr	r0, [sp, #32]
   11b74:	ldr	r7, [sp, #40]	; 0x28
   11b78:	add	r3, r0, r9
   11b7c:	cmp	fp, #2
   11b80:	moveq	r7, #0
   11b84:	andne	r7, r7, #1
   11b88:	str	r3, [sp, #52]	; 0x34
   11b8c:	cmp	r7, #0
   11b90:	beq	1256c <__assert_fail@plt+0x16e0>
   11b94:	ldr	r2, [sp, #56]	; 0x38
   11b98:	cmp	r2, #0
   11b9c:	beq	12808 <__assert_fail@plt+0x197c>
   11ba0:	ldr	r1, [sp, #28]
   11ba4:	cmp	r2, #1
   11ba8:	mov	r3, r2
   11bac:	movls	r3, #0
   11bb0:	movhi	r3, #1
   11bb4:	add	r5, r9, r2
   11bb8:	cmn	r1, #1
   11bbc:	movne	r3, #0
   11bc0:	cmp	r3, #0
   11bc4:	beq	11bd0 <__assert_fail@plt+0xd44>
   11bc8:	bl	10dc0 <strlen@plt>
   11bcc:	str	r0, [sp, #28]
   11bd0:	ldr	r3, [sp, #28]
   11bd4:	cmp	r5, r3
   11bd8:	bhi	12808 <__assert_fail@plt+0x197c>
   11bdc:	ldr	r0, [sp, #52]	; 0x34
   11be0:	ldr	r2, [sp, #56]	; 0x38
   11be4:	ldr	r1, [sp, #60]	; 0x3c
   11be8:	bl	10cb8 <memcmp@plt>
   11bec:	cmp	r0, #0
   11bf0:	bne	12808 <__assert_fail@plt+0x197c>
   11bf4:	ldr	r3, [sp, #44]	; 0x2c
   11bf8:	cmp	r3, #0
   11bfc:	bne	13138 <__assert_fail@plt+0x22ac>
   11c00:	ldr	r3, [sp, #52]	; 0x34
   11c04:	ldrb	r5, [r3]
   11c08:	cmp	r5, #126	; 0x7e
   11c0c:	ldrls	pc, [pc, r5, lsl #2]
   11c10:	b	124c8 <__assert_fail@plt+0x163c>
   11c14:	andeq	r2, r1, ip, asr #7
   11c18:	andeq	r2, r1, r8, asr #9
   11c1c:	andeq	r2, r1, r8, asr #9
   11c20:	andeq	r2, r1, r8, asr #9
   11c24:	andeq	r2, r1, r8, asr #9
   11c28:	andeq	r2, r1, r8, asr #9
   11c2c:	andeq	r2, r1, r8, asr #9
   11c30:	andeq	r2, r1, r0, lsr #7
   11c34:	muleq	r1, r8, r3
   11c38:	andeq	r2, r1, r0, ror #5
   11c3c:	andeq	r2, r1, ip, lsl #7
   11c40:	ldrdeq	r2, [r1], -r8
   11c44:	andeq	r2, r1, r8, ror #6
   11c48:			; <UNDEFINED> instruction: 0x000123b4
   11c4c:	andeq	r2, r1, r8, asr #9
   11c50:	andeq	r2, r1, r8, asr #9
   11c54:	andeq	r2, r1, r8, asr #9
   11c58:	andeq	r2, r1, r8, asr #9
   11c5c:	andeq	r2, r1, r8, asr #9
   11c60:	andeq	r2, r1, r8, asr #9
   11c64:	andeq	r2, r1, r8, asr #9
   11c68:	andeq	r2, r1, r8, asr #9
   11c6c:	andeq	r2, r1, r8, asr #9
   11c70:	andeq	r2, r1, r8, asr #9
   11c74:	andeq	r2, r1, r8, asr #9
   11c78:	andeq	r2, r1, r8, asr #9
   11c7c:	andeq	r2, r1, r8, asr #9
   11c80:	andeq	r2, r1, r8, asr #9
   11c84:	andeq	r2, r1, r8, asr #9
   11c88:	andeq	r2, r1, r8, asr #9
   11c8c:	andeq	r2, r1, r8, asr #9
   11c90:	andeq	r2, r1, r8, asr #9
   11c94:	andeq	r2, r1, r4, lsr #9
   11c98:	andeq	r2, r1, ip, lsr #7
   11c9c:	andeq	r2, r1, ip, lsr #7
   11ca0:	andeq	r2, r1, r8, lsl #9
   11ca4:	andeq	r2, r1, ip, lsr #7
   11ca8:			; <UNDEFINED> instruction: 0x000124bc
   11cac:	andeq	r2, r1, ip, lsr #7
   11cb0:	andeq	r2, r1, r8, lsl #4
   11cb4:	andeq	r2, r1, ip, lsr #7
   11cb8:	andeq	r2, r1, ip, lsr #7
   11cbc:	andeq	r2, r1, ip, lsr #7
   11cc0:			; <UNDEFINED> instruction: 0x000124bc
   11cc4:			; <UNDEFINED> instruction: 0x000124bc
   11cc8:			; <UNDEFINED> instruction: 0x000124bc
   11ccc:			; <UNDEFINED> instruction: 0x000124bc
   11cd0:			; <UNDEFINED> instruction: 0x000124bc
   11cd4:			; <UNDEFINED> instruction: 0x000124bc
   11cd8:			; <UNDEFINED> instruction: 0x000124bc
   11cdc:			; <UNDEFINED> instruction: 0x000124bc
   11ce0:			; <UNDEFINED> instruction: 0x000124bc
   11ce4:			; <UNDEFINED> instruction: 0x000124bc
   11ce8:			; <UNDEFINED> instruction: 0x000124bc
   11cec:			; <UNDEFINED> instruction: 0x000124bc
   11cf0:			; <UNDEFINED> instruction: 0x000124bc
   11cf4:			; <UNDEFINED> instruction: 0x000124bc
   11cf8:			; <UNDEFINED> instruction: 0x000124bc
   11cfc:			; <UNDEFINED> instruction: 0x000124bc
   11d00:	andeq	r2, r1, ip, lsr #7
   11d04:	andeq	r2, r1, ip, lsr #7
   11d08:	andeq	r2, r1, ip, lsr #7
   11d0c:	andeq	r2, r1, ip, lsr #7
   11d10:	ldrdeq	r2, [r1], -ip
   11d14:	andeq	r2, r1, r8, asr #9
   11d18:			; <UNDEFINED> instruction: 0x000124bc
   11d1c:			; <UNDEFINED> instruction: 0x000124bc
   11d20:			; <UNDEFINED> instruction: 0x000124bc
   11d24:			; <UNDEFINED> instruction: 0x000124bc
   11d28:			; <UNDEFINED> instruction: 0x000124bc
   11d2c:			; <UNDEFINED> instruction: 0x000124bc
   11d30:			; <UNDEFINED> instruction: 0x000124bc
   11d34:			; <UNDEFINED> instruction: 0x000124bc
   11d38:			; <UNDEFINED> instruction: 0x000124bc
   11d3c:			; <UNDEFINED> instruction: 0x000124bc
   11d40:			; <UNDEFINED> instruction: 0x000124bc
   11d44:			; <UNDEFINED> instruction: 0x000124bc
   11d48:			; <UNDEFINED> instruction: 0x000124bc
   11d4c:			; <UNDEFINED> instruction: 0x000124bc
   11d50:			; <UNDEFINED> instruction: 0x000124bc
   11d54:			; <UNDEFINED> instruction: 0x000124bc
   11d58:			; <UNDEFINED> instruction: 0x000124bc
   11d5c:			; <UNDEFINED> instruction: 0x000124bc
   11d60:			; <UNDEFINED> instruction: 0x000124bc
   11d64:			; <UNDEFINED> instruction: 0x000124bc
   11d68:			; <UNDEFINED> instruction: 0x000124bc
   11d6c:			; <UNDEFINED> instruction: 0x000124bc
   11d70:			; <UNDEFINED> instruction: 0x000124bc
   11d74:			; <UNDEFINED> instruction: 0x000124bc
   11d78:			; <UNDEFINED> instruction: 0x000124bc
   11d7c:			; <UNDEFINED> instruction: 0x000124bc
   11d80:	andeq	r2, r1, ip, lsr #7
   11d84:	andeq	r2, r1, r4, lsl #3
   11d88:			; <UNDEFINED> instruction: 0x000124bc
   11d8c:	andeq	r2, r1, ip, lsr #7
   11d90:			; <UNDEFINED> instruction: 0x000124bc
   11d94:	andeq	r2, r1, ip, lsr #7
   11d98:			; <UNDEFINED> instruction: 0x000124bc
   11d9c:			; <UNDEFINED> instruction: 0x000124bc
   11da0:			; <UNDEFINED> instruction: 0x000124bc
   11da4:			; <UNDEFINED> instruction: 0x000124bc
   11da8:			; <UNDEFINED> instruction: 0x000124bc
   11dac:			; <UNDEFINED> instruction: 0x000124bc
   11db0:			; <UNDEFINED> instruction: 0x000124bc
   11db4:			; <UNDEFINED> instruction: 0x000124bc
   11db8:			; <UNDEFINED> instruction: 0x000124bc
   11dbc:			; <UNDEFINED> instruction: 0x000124bc
   11dc0:			; <UNDEFINED> instruction: 0x000124bc
   11dc4:			; <UNDEFINED> instruction: 0x000124bc
   11dc8:			; <UNDEFINED> instruction: 0x000124bc
   11dcc:			; <UNDEFINED> instruction: 0x000124bc
   11dd0:			; <UNDEFINED> instruction: 0x000124bc
   11dd4:			; <UNDEFINED> instruction: 0x000124bc
   11dd8:			; <UNDEFINED> instruction: 0x000124bc
   11ddc:			; <UNDEFINED> instruction: 0x000124bc
   11de0:			; <UNDEFINED> instruction: 0x000124bc
   11de4:			; <UNDEFINED> instruction: 0x000124bc
   11de8:			; <UNDEFINED> instruction: 0x000124bc
   11dec:			; <UNDEFINED> instruction: 0x000124bc
   11df0:			; <UNDEFINED> instruction: 0x000124bc
   11df4:			; <UNDEFINED> instruction: 0x000124bc
   11df8:			; <UNDEFINED> instruction: 0x000124bc
   11dfc:			; <UNDEFINED> instruction: 0x000124bc
   11e00:	andeq	r1, r1, r8, lsr #31
   11e04:	andeq	r2, r1, ip, lsr #7
   11e08:	andeq	r1, r1, r8, lsr #31
   11e0c:	andeq	r2, r1, r8, lsl #9
   11e10:	cmp	r4, #0
   11e14:	moveq	r3, #1
   11e18:	streq	r3, [sp, #40]	; 0x28
   11e1c:	beq	12530 <__assert_fail@plt+0x16a4>
   11e20:	mov	r3, #0
   11e24:	mov	r2, #1
   11e28:	mov	r4, r3
   11e2c:	str	r2, [sp, #36]	; 0x24
   11e30:	str	r2, [sp, #44]	; 0x2c
   11e34:	str	r2, [sp, #56]	; 0x38
   11e38:	str	r3, [sp, #68]	; 0x44
   11e3c:	movw	r3, #23440	; 0x5b90
   11e40:	movt	r3, #1
   11e44:	str	r4, [sp, #40]	; 0x28
   11e48:	mov	r8, #2
   11e4c:	str	r4, [sp, #48]	; 0x30
   11e50:	str	r3, [sp, #60]	; 0x3c
   11e54:	str	r4, [sp, #72]	; 0x48
   11e58:	b	11b40 <__assert_fail@plt+0xcb4>
   11e5c:	cmp	r4, #0
   11e60:	bne	130ac <__assert_fail@plt+0x2220>
   11e64:	cmp	sl, #0
   11e68:	beq	12e6c <__assert_fail@plt+0x1fe0>
   11e6c:	mov	r3, #34	; 0x22
   11e70:	mov	r1, r4
   11e74:	mov	r2, #1
   11e78:	strb	r3, [fp]
   11e7c:	movw	r3, #23420	; 0x5b7c
   11e80:	movt	r3, #1
   11e84:	mov	r4, r2
   11e88:	str	r2, [sp, #36]	; 0x24
   11e8c:	str	r2, [sp, #40]	; 0x28
   11e90:	str	r1, [sp, #44]	; 0x2c
   11e94:	str	r1, [sp, #48]	; 0x30
   11e98:	str	r2, [sp, #56]	; 0x38
   11e9c:	str	r3, [sp, #60]	; 0x3c
   11ea0:	str	r1, [sp, #68]	; 0x44
   11ea4:	str	r1, [sp, #72]	; 0x48
   11ea8:	b	11b40 <__assert_fail@plt+0xcb4>
   11eac:	mov	r3, #0
   11eb0:	mov	r4, r8
   11eb4:	str	r3, [sp, #40]	; 0x28
   11eb8:	str	r3, [sp, #44]	; 0x2c
   11ebc:	str	r3, [sp, #48]	; 0x30
   11ec0:	str	r8, [sp, #56]	; 0x38
   11ec4:	str	r3, [sp, #60]	; 0x3c
   11ec8:	str	r3, [sp, #68]	; 0x44
   11ecc:	mov	r3, #1
   11ed0:	str	r3, [sp, #36]	; 0x24
   11ed4:	str	r8, [sp, #72]	; 0x48
   11ed8:	b	11b40 <__assert_fail@plt+0xcb4>
   11edc:	mov	r3, #1
   11ee0:	mov	r2, #0
   11ee4:	mov	r4, r2
   11ee8:	mov	r8, #5
   11eec:	str	r3, [sp, #36]	; 0x24
   11ef0:	str	r3, [sp, #40]	; 0x28
   11ef4:	str	r3, [sp, #44]	; 0x2c
   11ef8:	str	r2, [sp, #48]	; 0x30
   11efc:	str	r3, [sp, #56]	; 0x38
   11f00:	movw	r3, #23420	; 0x5b7c
   11f04:	movt	r3, #1
   11f08:	str	r3, [sp, #60]	; 0x3c
   11f0c:	str	r2, [sp, #68]	; 0x44
   11f10:	str	r2, [sp, #72]	; 0x48
   11f14:	b	11b40 <__assert_fail@plt+0xcb4>
   11f18:	mov	r3, #0
   11f1c:	mov	r2, #1
   11f20:	mov	r4, r3
   11f24:	str	r2, [sp, #36]	; 0x24
   11f28:	str	r2, [sp, #40]	; 0x28
   11f2c:	str	r3, [sp, #44]	; 0x2c
   11f30:	str	r3, [sp, #48]	; 0x30
   11f34:	str	r3, [sp, #56]	; 0x38
   11f38:	str	r3, [sp, #60]	; 0x3c
   11f3c:	str	r3, [sp, #68]	; 0x44
   11f40:	str	r3, [sp, #72]	; 0x48
   11f44:	b	11b40 <__assert_fail@plt+0xcb4>
   11f48:	mov	r2, #1
   11f4c:	mov	r3, #0
   11f50:	mov	r4, r3
   11f54:	str	r2, [sp, #36]	; 0x24
   11f58:	str	r2, [sp, #44]	; 0x2c
   11f5c:	str	r8, [sp, #56]	; 0x38
   11f60:	str	r3, [sp, #68]	; 0x44
   11f64:	b	11e3c <__assert_fail@plt+0xfb0>
   11f68:	mov	r3, #1
   11f6c:	mov	r2, #0
   11f70:	mov	r4, r2
   11f74:	mov	r8, #2
   11f78:	str	r3, [sp, #36]	; 0x24
   11f7c:	str	r3, [sp, #40]	; 0x28
   11f80:	str	r3, [sp, #44]	; 0x2c
   11f84:	str	r2, [sp, #48]	; 0x30
   11f88:	str	r3, [sp, #56]	; 0x38
   11f8c:	movw	r3, #23440	; 0x5b90
   11f90:	movt	r3, #1
   11f94:	str	r3, [sp, #60]	; 0x3c
   11f98:	str	r2, [sp, #68]	; 0x44
   11f9c:	str	r2, [sp, #72]	; 0x48
   11fa0:	b	11b40 <__assert_fail@plt+0xcb4>
   11fa4:	mov	r7, #0
   11fa8:	ldr	r3, [sp, #28]
   11fac:	cmn	r3, #1
   11fb0:	beq	12a88 <__assert_fail@plt+0x1bfc>
   11fb4:	ldr	r3, [sp, #28]
   11fb8:	subs	r2, r3, #1
   11fbc:	movne	r2, #1
   11fc0:	sub	r3, fp, #2
   11fc4:	cmp	r2, #0
   11fc8:	clz	r3, r3
   11fcc:	lsr	r3, r3, #5
   11fd0:	bne	11fdc <__assert_fail@plt+0x1150>
   11fd4:	cmp	r9, #0
   11fd8:	beq	127e8 <__assert_fail@plt+0x195c>
   11fdc:	mov	r6, #0
   11fe0:	ldr	r2, [sp, #40]	; 0x28
   11fe4:	eor	r2, r2, #1
   11fe8:	orrs	r3, r3, r2
   11fec:	bne	121c4 <__assert_fail@plt+0x1338>
   11ff0:	ldr	r2, [sp, #160]	; 0xa0
   11ff4:	cmp	r2, #0
   11ff8:	beq	12018 <__assert_fail@plt+0x118c>
   11ffc:	ldr	r0, [sp, #160]	; 0xa0
   12000:	ubfx	r1, r5, #5, #8
   12004:	and	r2, r5, #31
   12008:	ldr	r1, [r0, r1, lsl #2]
   1200c:	lsr	r2, r1, r2
   12010:	tst	r2, #1
   12014:	bne	12020 <__assert_fail@plt+0x1194>
   12018:	cmp	r7, #0
   1201c:	beq	12290 <__assert_fail@plt+0x1404>
   12020:	ldr	r2, [sp, #44]	; 0x2c
   12024:	sub	r3, fp, #2
   12028:	clz	r3, r3
   1202c:	lsr	r3, r3, #5
   12030:	cmp	r2, #0
   12034:	bne	12ddc <__assert_fail@plt+0x1f50>
   12038:	ldr	r2, [sp, #48]	; 0x30
   1203c:	eor	r2, r2, #1
   12040:	ands	r3, r3, r2
   12044:	beq	1207c <__assert_fail@plt+0x11f0>
   12048:	cmp	sl, r4
   1204c:	str	r3, [sp, #48]	; 0x30
   12050:	movhi	r2, #39	; 0x27
   12054:	strbhi	r2, [r8, r4]
   12058:	add	r2, r4, #1
   1205c:	cmp	sl, r2
   12060:	movhi	r1, #36	; 0x24
   12064:	strbhi	r1, [r8, r2]
   12068:	add	r2, r4, #2
   1206c:	add	r4, r4, #3
   12070:	cmp	sl, r2
   12074:	movhi	r1, #39	; 0x27
   12078:	strbhi	r1, [r8, r2]
   1207c:	cmp	r4, sl
   12080:	add	r9, r9, #1
   12084:	movcc	r3, #92	; 0x5c
   12088:	strbcc	r3, [r8, r4]
   1208c:	add	r4, r4, #1
   12090:	cmp	r4, sl
   12094:	ldr	r3, [sp, #36]	; 0x24
   12098:	strbcc	r5, [r8, r4]
   1209c:	cmp	r6, #0
   120a0:	add	r4, r4, #1
   120a4:	moveq	r3, #0
   120a8:	str	r3, [sp, #36]	; 0x24
   120ac:	ldr	r3, [sp, #28]
   120b0:	cmn	r3, #1
   120b4:	bne	11b5c <__assert_fail@plt+0xcd0>
   120b8:	ldr	r3, [sp, #32]
   120bc:	ldrb	r6, [r3, r9]
   120c0:	adds	r6, r6, #0
   120c4:	movne	r6, #1
   120c8:	cmp	r6, #0
   120cc:	bne	11b70 <__assert_fail@plt+0xce4>
   120d0:	str	fp, [sp, #152]	; 0x98
   120d4:	mov	fp, r8
   120d8:	cmp	r4, #0
   120dc:	ldr	r1, [sp, #44]	; 0x2c
   120e0:	movne	r3, #0
   120e4:	ldr	r8, [sp, #152]	; 0x98
   120e8:	sub	r2, r8, #2
   120ec:	clz	r2, r2
   120f0:	lsr	r2, r2, #5
   120f4:	andeq	r3, r2, r1
   120f8:	cmp	r3, #0
   120fc:	bne	131b8 <__assert_fail@plt+0x232c>
   12100:	eor	r3, r1, #1
   12104:	ands	r2, r2, r3
   12108:	beq	130e4 <__assert_fail@plt+0x2258>
   1210c:	ldr	r3, [sp, #68]	; 0x44
   12110:	cmp	r3, #0
   12114:	beq	130e8 <__assert_fail@plt+0x225c>
   12118:	ldr	r3, [sp, #36]	; 0x24
   1211c:	cmp	r3, #0
   12120:	bne	13174 <__assert_fail@plt+0x22e8>
   12124:	ldr	r3, [sp, #72]	; 0x48
   12128:	adds	r3, r3, #0
   1212c:	movne	r3, #1
   12130:	cmp	sl, #0
   12134:	movne	r3, #0
   12138:	cmp	r3, #0
   1213c:	ldreq	r2, [sp, #68]	; 0x44
   12140:	beq	130e8 <__assert_fail@plt+0x225c>
   12144:	ldr	r2, [sp, #72]	; 0x48
   12148:	str	r3, [sp, #68]	; 0x44
   1214c:	movw	r3, #23440	; 0x5b90
   12150:	movt	r3, #1
   12154:	mov	r1, #39	; 0x27
   12158:	mov	r4, #1
   1215c:	ldr	sl, [sp, #72]	; 0x48
   12160:	mov	r8, #2
   12164:	str	r3, [sp, #60]	; 0x3c
   12168:	mov	r3, #0
   1216c:	strb	r1, [fp]
   12170:	str	r3, [sp, #44]	; 0x2c
   12174:	str	r4, [sp, #56]	; 0x38
   12178:	str	r2, [sp, #72]	; 0x48
   1217c:	b	11b40 <__assert_fail@plt+0xcb4>
   12180:	mov	r7, #0
   12184:	cmp	fp, #2
   12188:	beq	12a68 <__assert_fail@plt+0x1bdc>
   1218c:	ldr	r2, [sp, #40]	; 0x28
   12190:	ldr	r3, [sp, #56]	; 0x38
   12194:	ldr	r1, [sp, #44]	; 0x2c
   12198:	cmp	r3, #0
   1219c:	moveq	r3, #0
   121a0:	andne	r3, r2, r1
   121a4:	cmp	r3, #0
   121a8:	moveq	r5, #92	; 0x5c
   121ac:	moveq	r3, r5
   121b0:	bne	12a74 <__assert_fail@plt+0x1be8>
   121b4:	ldr	r2, [sp, #40]	; 0x28
   121b8:	cmp	r2, #0
   121bc:	bne	12eb0 <__assert_fail@plt+0x2024>
   121c0:	mov	r6, #0
   121c4:	ldr	r3, [sp, #44]	; 0x2c
   121c8:	cmp	r3, #0
   121cc:	beq	12a60 <__assert_fail@plt+0x1bd4>
   121d0:	mov	r3, #0
   121d4:	b	11ff0 <__assert_fail@plt+0x1164>
   121d8:	mov	r7, #0
   121dc:	cmp	fp, #2
   121e0:	beq	12ad8 <__assert_fail@plt+0x1c4c>
   121e4:	cmp	fp, #5
   121e8:	beq	12a9c <__assert_fail@plt+0x1c10>
   121ec:	sub	r3, fp, #2
   121f0:	mov	r6, #0
   121f4:	clz	r3, r3
   121f8:	mov	r5, #63	; 0x3f
   121fc:	lsr	r3, r3, #5
   12200:	b	11fe0 <__assert_fail@plt+0x1154>
   12204:	mov	r7, #0
   12208:	cmp	fp, #2
   1220c:	movne	r3, #0
   12210:	movne	r5, #39	; 0x27
   12214:	strne	r6, [sp, #68]	; 0x44
   12218:	bne	11fe0 <__assert_fail@plt+0x1154>
   1221c:	ldr	r3, [sp, #44]	; 0x2c
   12220:	cmp	r3, #0
   12224:	bne	12ee0 <__assert_fail@plt+0x2054>
   12228:	ldr	r3, [sp, #72]	; 0x48
   1222c:	cmp	sl, #0
   12230:	clz	r3, r3
   12234:	lsr	r3, r3, #5
   12238:	moveq	r3, #0
   1223c:	cmp	r3, #0
   12240:	bne	12e0c <__assert_fail@plt+0x1f80>
   12244:	cmp	sl, r4
   12248:	movhi	r3, #39	; 0x27
   1224c:	strbhi	r3, [r8, r4]
   12250:	add	r3, r4, #1
   12254:	cmp	sl, r3
   12258:	movhi	r2, #92	; 0x5c
   1225c:	strbhi	r2, [r8, r3]
   12260:	add	r3, r4, #2
   12264:	cmp	sl, r3
   12268:	bls	12274 <__assert_fail@plt+0x13e8>
   1226c:	mov	r2, #39	; 0x27
   12270:	strb	r2, [r8, r3]
   12274:	mov	r3, #0
   12278:	cmp	r7, #0
   1227c:	add	r4, r4, #3
   12280:	mov	r5, #39	; 0x27
   12284:	str	r3, [sp, #48]	; 0x30
   12288:	str	r6, [sp, #68]	; 0x44
   1228c:	bne	12020 <__assert_fail@plt+0x1194>
   12290:	ldr	r2, [sp, #48]	; 0x30
   12294:	eor	r3, r3, #1
   12298:	add	r9, r9, #1
   1229c:	and	r3, r3, r2
   122a0:	uxtb	r3, r3
   122a4:	cmp	r3, #0
   122a8:	beq	12090 <__assert_fail@plt+0x1204>
   122ac:	cmp	sl, r4
   122b0:	movhi	r3, #39	; 0x27
   122b4:	strbhi	r3, [r8, r4]
   122b8:	add	r3, r4, #1
   122bc:	add	r4, r4, #2
   122c0:	cmp	sl, r3
   122c4:	movhi	r2, #39	; 0x27
   122c8:	strbhi	r2, [r8, r3]
   122cc:	mov	r3, #0
   122d0:	str	r3, [sp, #48]	; 0x30
   122d4:	b	12090 <__assert_fail@plt+0x1204>
   122d8:	mov	r3, #118	; 0x76
   122dc:	b	121b4 <__assert_fail@plt+0x1328>
   122e0:	mov	r3, #116	; 0x74
   122e4:	ldr	r2, [sp, #44]	; 0x2c
   122e8:	cmp	fp, #2
   122ec:	movne	r2, #0
   122f0:	andeq	r2, r2, #1
   122f4:	cmp	r2, #0
   122f8:	beq	121b4 <__assert_fail@plt+0x1328>
   122fc:	mov	fp, r8
   12300:	mov	r8, #2
   12304:	ldr	r3, [sp, #40]	; 0x28
   12308:	cmp	r3, #0
   1230c:	movne	r8, #4
   12310:	mov	lr, #0
   12314:	mov	r0, fp
   12318:	ldr	r2, [sp, #32]
   1231c:	ldr	r3, [sp, #156]	; 0x9c
   12320:	ldr	r1, [sp, #164]	; 0xa4
   12324:	bic	ip, r3, #2
   12328:	ldr	r3, [sp, #28]
   1232c:	stm	sp, {r8, ip, lr}
   12330:	ldr	ip, [sp, #168]	; 0xa8
   12334:	str	r1, [sp, #12]
   12338:	mov	r1, sl
   1233c:	str	ip, [sp, #16]
   12340:	bl	11a58 <__assert_fail@plt+0xbcc>
   12344:	mov	r4, r0
   12348:	mov	r0, r4
   1234c:	add	sp, sp, #116	; 0x74
   12350:	ldrd	r4, [sp]
   12354:	ldrd	r6, [sp, #8]
   12358:	ldrd	r8, [sp, #16]
   1235c:	ldrd	sl, [sp, #24]
   12360:	add	sp, sp, #32
   12364:	pop	{pc}		; (ldr pc, [sp], #4)
   12368:	mov	r5, #102	; 0x66
   1236c:	ldr	r2, [sp, #44]	; 0x2c
   12370:	sub	r3, fp, #2
   12374:	clz	r3, r3
   12378:	lsr	r3, r3, #5
   1237c:	cmp	r2, #0
   12380:	bne	12ddc <__assert_fail@plt+0x1f50>
   12384:	mov	r6, r2
   12388:	b	1207c <__assert_fail@plt+0x11f0>
   1238c:	mov	r5, #110	; 0x6e
   12390:	mov	r6, #0
   12394:	b	12020 <__assert_fail@plt+0x1194>
   12398:	mov	r5, #98	; 0x62
   1239c:	b	1236c <__assert_fail@plt+0x14e0>
   123a0:	mov	r5, #97	; 0x61
   123a4:	b	1236c <__assert_fail@plt+0x14e0>
   123a8:	mov	r7, #0
   123ac:	mov	r6, #0
   123b0:	b	121d0 <__assert_fail@plt+0x1344>
   123b4:	mov	r5, #114	; 0x72
   123b8:	b	12390 <__assert_fail@plt+0x1504>
   123bc:	ldr	r3, [sp, #44]	; 0x2c
   123c0:	cmp	r3, #0
   123c4:	bne	13154 <__assert_fail@plt+0x22c8>
   123c8:	mov	r7, r3
   123cc:	ldr	r3, [sp, #48]	; 0x30
   123d0:	sub	r2, fp, #2
   123d4:	clz	r2, r2
   123d8:	lsr	r2, r2, #5
   123dc:	eor	r3, r3, #1
   123e0:	ands	r3, r2, r3
   123e4:	beq	12df8 <__assert_fail@plt+0x1f6c>
   123e8:	cmp	sl, r4
   123ec:	movhi	r1, #39	; 0x27
   123f0:	strbhi	r1, [r8, r4]
   123f4:	add	r1, r4, #1
   123f8:	cmp	sl, r1
   123fc:	movhi	r0, #36	; 0x24
   12400:	strbhi	r0, [r8, r1]
   12404:	add	r1, r4, #2
   12408:	cmp	sl, r1
   1240c:	movhi	r0, #39	; 0x27
   12410:	strbhi	r0, [r8, r1]
   12414:	add	r1, r4, #3
   12418:	cmp	sl, r1
   1241c:	bls	12e50 <__assert_fail@plt+0x1fc4>
   12420:	mov	r4, r1
   12424:	mov	r1, #92	; 0x5c
   12428:	mov	r0, r4
   1242c:	str	r3, [sp, #48]	; 0x30
   12430:	strb	r1, [r8, r4]
   12434:	cmp	fp, #2
   12438:	add	r4, r4, #1
   1243c:	beq	12ea0 <__assert_fail@plt+0x2014>
   12440:	ldr	r1, [sp, #28]
   12444:	add	r3, r9, #1
   12448:	cmp	r3, r1
   1244c:	bcs	12464 <__assert_fail@plt+0x15d8>
   12450:	ldr	r1, [sp, #32]
   12454:	ldrb	r3, [r1, r3]
   12458:	sub	r3, r3, #48	; 0x30
   1245c:	cmp	r3, #9
   12460:	bls	12eb8 <__assert_fail@plt+0x202c>
   12464:	mov	r5, #48	; 0x30
   12468:	ldr	r3, [sp, #40]	; 0x28
   1246c:	eor	r3, r3, #1
   12470:	orrs	r2, r2, r3
   12474:	mov	r3, r6
   12478:	moveq	r6, r2
   1247c:	beq	11ff0 <__assert_fail@plt+0x1164>
   12480:	mov	r6, #0
   12484:	b	12018 <__assert_fail@plt+0x118c>
   12488:	cmp	r9, #0
   1248c:	mov	r2, r7
   12490:	bne	12a30 <__assert_fail@plt+0x1ba4>
   12494:	mov	r6, r7
   12498:	mov	r3, r9
   1249c:	mov	r7, r2
   124a0:	b	11fe0 <__assert_fail@plt+0x1154>
   124a4:	mov	r2, r7
   124a8:	mov	r6, r7
   124ac:	mov	r3, #0
   124b0:	mov	r7, r2
   124b4:	mov	r5, #32
   124b8:	b	11fe0 <__assert_fail@plt+0x1154>
   124bc:	mov	r6, r7
   124c0:	b	121d0 <__assert_fail@plt+0x1344>
   124c4:	mov	r7, #0
   124c8:	ldr	r3, [sp, #64]	; 0x40
   124cc:	cmp	r3, #1
   124d0:	bne	12af0 <__assert_fail@plt+0x1c64>
   124d4:	bl	10d9c <__ctype_b_loc@plt>
   124d8:	ldr	r2, [r0]
   124dc:	sxth	r3, r5
   124e0:	lsl	r3, r3, #1
   124e4:	ldr	r1, [sp, #64]	; 0x40
   124e8:	ldrh	r3, [r2, r3]
   124ec:	mov	ip, r1
   124f0:	and	r3, r3, #16384	; 0x4000
   124f4:	cmp	r3, #0
   124f8:	ldr	r3, [sp, #40]	; 0x28
   124fc:	movne	r6, #1
   12500:	moveq	r6, #0
   12504:	movne	r2, #0
   12508:	andeq	r2, r3, #1
   1250c:	cmp	r2, #0
   12510:	bne	12e38 <__assert_fail@plt+0x1fac>
   12514:	sub	r3, fp, #2
   12518:	clz	r3, r3
   1251c:	lsr	r3, r3, #5
   12520:	b	11fe0 <__assert_fail@plt+0x1154>
   12524:	cmp	r4, #0
   12528:	bne	131c8 <__assert_fail@plt+0x233c>
   1252c:	str	r4, [sp, #40]	; 0x28
   12530:	cmp	sl, #0
   12534:	bne	131f8 <__assert_fail@plt+0x236c>
   12538:	mov	r3, #1
   1253c:	movw	r2, #23440	; 0x5b90
   12540:	movt	r2, #1
   12544:	mov	r4, r3
   12548:	mov	r8, #2
   1254c:	str	r3, [sp, #36]	; 0x24
   12550:	str	sl, [sp, #44]	; 0x2c
   12554:	str	sl, [sp, #48]	; 0x30
   12558:	str	r3, [sp, #56]	; 0x38
   1255c:	str	r2, [sp, #60]	; 0x3c
   12560:	str	sl, [sp, #68]	; 0x44
   12564:	str	sl, [sp, #72]	; 0x48
   12568:	b	11b40 <__assert_fail@plt+0xcb4>
   1256c:	ldr	r3, [sp, #32]
   12570:	ldrb	r5, [r3, r9]
   12574:	cmp	r5, #126	; 0x7e
   12578:	ldrls	pc, [pc, r5, lsl #2]
   1257c:	b	124c8 <__assert_fail@plt+0x163c>
   12580:	andeq	r2, r1, r4, lsr #15
   12584:	andeq	r2, r1, r8, asr #9
   12588:	andeq	r2, r1, r8, asr #9
   1258c:	andeq	r2, r1, r8, asr #9
   12590:	andeq	r2, r1, r8, asr #9
   12594:	andeq	r2, r1, r8, asr #9
   12598:	andeq	r2, r1, r8, asr #9
   1259c:	muleq	r1, ip, r7
   125a0:	muleq	r1, r4, r7
   125a4:	andeq	r2, r1, r0, ror #5
   125a8:	andeq	r2, r1, ip, lsl #15
   125ac:	ldrdeq	r2, [r1], -r8
   125b0:	andeq	r2, r1, r4, lsl #15
   125b4:	andeq	r2, r1, ip, ror r7
   125b8:	andeq	r2, r1, r8, asr #9
   125bc:	andeq	r2, r1, r8, asr #9
   125c0:	andeq	r2, r1, r8, asr #9
   125c4:	andeq	r2, r1, r8, asr #9
   125c8:	andeq	r2, r1, r8, asr #9
   125cc:	andeq	r2, r1, r8, asr #9
   125d0:	andeq	r2, r1, r8, asr #9
   125d4:	andeq	r2, r1, r8, asr #9
   125d8:	andeq	r2, r1, r8, asr #9
   125dc:	andeq	r2, r1, r8, asr #9
   125e0:	andeq	r2, r1, r8, asr #9
   125e4:	andeq	r2, r1, r8, asr #9
   125e8:	andeq	r2, r1, r8, asr #9
   125ec:	andeq	r2, r1, r8, asr #9
   125f0:	andeq	r2, r1, r8, asr #9
   125f4:	andeq	r2, r1, r8, asr #9
   125f8:	andeq	r2, r1, r8, asr #9
   125fc:	andeq	r2, r1, r8, asr #9
   12600:	strdeq	r2, [r1], -r8
   12604:	ldrdeq	r2, [r1], -r8
   12608:	ldrdeq	r2, [r1], -r8
   1260c:	andeq	r2, r1, r8, asr #15
   12610:	ldrdeq	r2, [r1], -r8
   12614:	andeq	r2, r1, r4, lsl r5
   12618:	ldrdeq	r2, [r1], -r8
   1261c:	andeq	r2, r1, r8, lsl #4
   12620:	ldrdeq	r2, [r1], -r8
   12624:	ldrdeq	r2, [r1], -r8
   12628:	ldrdeq	r2, [r1], -r8
   1262c:	andeq	r2, r1, r4, lsl r5
   12630:	andeq	r2, r1, r4, lsl r5
   12634:	andeq	r2, r1, r4, lsl r5
   12638:	andeq	r2, r1, r4, lsl r5
   1263c:	andeq	r2, r1, r4, lsl r5
   12640:	andeq	r2, r1, r4, lsl r5
   12644:	andeq	r2, r1, r4, lsl r5
   12648:	andeq	r2, r1, r4, lsl r5
   1264c:	andeq	r2, r1, r4, lsl r5
   12650:	andeq	r2, r1, r4, lsl r5
   12654:	andeq	r2, r1, r4, lsl r5
   12658:	andeq	r2, r1, r4, lsl r5
   1265c:	andeq	r2, r1, r4, lsl r5
   12660:	andeq	r2, r1, r4, lsl r5
   12664:	andeq	r2, r1, r4, lsl r5
   12668:	andeq	r2, r1, r4, lsl r5
   1266c:	ldrdeq	r2, [r1], -r8
   12670:	ldrdeq	r2, [r1], -r8
   12674:	ldrdeq	r2, [r1], -r8
   12678:	ldrdeq	r2, [r1], -r8
   1267c:	ldrdeq	r2, [r1], -ip
   12680:	andeq	r2, r1, r8, asr #9
   12684:	andeq	r2, r1, r4, lsl r5
   12688:	andeq	r2, r1, r4, lsl r5
   1268c:	andeq	r2, r1, r4, lsl r5
   12690:	andeq	r2, r1, r4, lsl r5
   12694:	andeq	r2, r1, r4, lsl r5
   12698:	andeq	r2, r1, r4, lsl r5
   1269c:	andeq	r2, r1, r4, lsl r5
   126a0:	andeq	r2, r1, r4, lsl r5
   126a4:	andeq	r2, r1, r4, lsl r5
   126a8:	andeq	r2, r1, r4, lsl r5
   126ac:	andeq	r2, r1, r4, lsl r5
   126b0:	andeq	r2, r1, r4, lsl r5
   126b4:	andeq	r2, r1, r4, lsl r5
   126b8:	andeq	r2, r1, r4, lsl r5
   126bc:	andeq	r2, r1, r4, lsl r5
   126c0:	andeq	r2, r1, r4, lsl r5
   126c4:	andeq	r2, r1, r4, lsl r5
   126c8:	andeq	r2, r1, r4, lsl r5
   126cc:	andeq	r2, r1, r4, lsl r5
   126d0:	andeq	r2, r1, r4, lsl r5
   126d4:	andeq	r2, r1, r4, lsl r5
   126d8:	andeq	r2, r1, r4, lsl r5
   126dc:	andeq	r2, r1, r4, lsl r5
   126e0:	andeq	r2, r1, r4, lsl r5
   126e4:	andeq	r2, r1, r4, lsl r5
   126e8:	andeq	r2, r1, r4, lsl r5
   126ec:	ldrdeq	r2, [r1], -r8
   126f0:	andeq	r2, r1, r4, lsl #3
   126f4:	andeq	r2, r1, r4, lsl r5
   126f8:	ldrdeq	r2, [r1], -r8
   126fc:	andeq	r2, r1, r4, lsl r5
   12700:	ldrdeq	r2, [r1], -r8
   12704:	andeq	r2, r1, r4, lsl r5
   12708:	andeq	r2, r1, r4, lsl r5
   1270c:	andeq	r2, r1, r4, lsl r5
   12710:	andeq	r2, r1, r4, lsl r5
   12714:	andeq	r2, r1, r4, lsl r5
   12718:	andeq	r2, r1, r4, lsl r5
   1271c:	andeq	r2, r1, r4, lsl r5
   12720:	andeq	r2, r1, r4, lsl r5
   12724:	andeq	r2, r1, r4, lsl r5
   12728:	andeq	r2, r1, r4, lsl r5
   1272c:	andeq	r2, r1, r4, lsl r5
   12730:	andeq	r2, r1, r4, lsl r5
   12734:	andeq	r2, r1, r4, lsl r5
   12738:	andeq	r2, r1, r4, lsl r5
   1273c:	andeq	r2, r1, r4, lsl r5
   12740:	andeq	r2, r1, r4, lsl r5
   12744:	andeq	r2, r1, r4, lsl r5
   12748:	andeq	r2, r1, r4, lsl r5
   1274c:	andeq	r2, r1, r4, lsl r5
   12750:	andeq	r2, r1, r4, lsl r5
   12754:	andeq	r2, r1, r4, lsl r5
   12758:	andeq	r2, r1, r4, lsl r5
   1275c:	andeq	r2, r1, r4, lsl r5
   12760:	andeq	r2, r1, r4, lsl r5
   12764:	andeq	r2, r1, r4, lsl r5
   12768:	andeq	r2, r1, r4, lsl r5
   1276c:	andeq	r1, r1, r8, lsr #31
   12770:	ldrdeq	r2, [r1], -r8
   12774:	andeq	r1, r1, r8, lsr #31
   12778:	andeq	r2, r1, r8, asr #15
   1277c:	mov	r3, #114	; 0x72
   12780:	b	122e4 <__assert_fail@plt+0x1458>
   12784:	mov	r3, #102	; 0x66
   12788:	b	121b4 <__assert_fail@plt+0x1328>
   1278c:	mov	r3, #110	; 0x6e
   12790:	b	122e4 <__assert_fail@plt+0x1458>
   12794:	mov	r3, #98	; 0x62
   12798:	b	121b4 <__assert_fail@plt+0x1328>
   1279c:	mov	r3, #97	; 0x61
   127a0:	b	121b4 <__assert_fail@plt+0x1328>
   127a4:	ldr	r3, [sp, #40]	; 0x28
   127a8:	cmp	r3, #0
   127ac:	bne	123bc <__assert_fail@plt+0x1530>
   127b0:	ldr	r3, [sp, #156]	; 0x9c
   127b4:	tst	r3, #1
   127b8:	addne	r9, r9, #1
   127bc:	bne	11b50 <__assert_fail@plt+0xcc4>
   127c0:	ldr	r7, [sp, #40]	; 0x28
   127c4:	b	121c0 <__assert_fail@plt+0x1334>
   127c8:	sub	r3, fp, #2
   127cc:	clz	r3, r3
   127d0:	lsr	r3, r3, #5
   127d4:	b	11fd4 <__assert_fail@plt+0x1148>
   127d8:	sub	r3, fp, #2
   127dc:	mov	r6, #0
   127e0:	clz	r3, r3
   127e4:	lsr	r3, r3, #5
   127e8:	ldr	r2, [sp, #44]	; 0x2c
   127ec:	tst	r2, r3
   127f0:	beq	11fe0 <__assert_fail@plt+0x1154>
   127f4:	b	122fc <__assert_fail@plt+0x1470>
   127f8:	sub	r3, fp, #2
   127fc:	clz	r3, r3
   12800:	lsr	r3, r3, #5
   12804:	b	127e8 <__assert_fail@plt+0x195c>
   12808:	ldr	r3, [sp, #52]	; 0x34
   1280c:	ldrb	r5, [r3]
   12810:	cmp	r5, #126	; 0x7e
   12814:	ldrls	pc, [pc, r5, lsl #2]
   12818:	b	124c4 <__assert_fail@plt+0x1638>
   1281c:			; <UNDEFINED> instruction: 0x000123bc
   12820:	andeq	r2, r1, r4, asr #9
   12824:	andeq	r2, r1, r4, asr #9
   12828:	andeq	r2, r1, r4, asr #9
   1282c:	andeq	r2, r1, r4, asr #9
   12830:	andeq	r2, r1, r4, asr #9
   12834:	andeq	r2, r1, r4, asr #9
   12838:	andeq	r2, r1, r0, lsr #7
   1283c:	muleq	r1, r8, r3
   12840:	andeq	r2, r1, r4, asr sl
   12844:	andeq	r2, r1, ip, lsl #7
   12848:	andeq	r2, r1, r8, asr #20
   1284c:	andeq	r2, r1, r8, ror #6
   12850:			; <UNDEFINED> instruction: 0x000123b4
   12854:	andeq	r2, r1, r4, asr #9
   12858:	andeq	r2, r1, r4, asr #9
   1285c:	andeq	r2, r1, r4, asr #9
   12860:	andeq	r2, r1, r4, asr #9
   12864:	andeq	r2, r1, r4, asr #9
   12868:	andeq	r2, r1, r4, asr #9
   1286c:	andeq	r2, r1, r4, asr #9
   12870:	andeq	r2, r1, r4, asr #9
   12874:	andeq	r2, r1, r4, asr #9
   12878:	andeq	r2, r1, r4, asr #9
   1287c:	andeq	r2, r1, r4, asr #9
   12880:	andeq	r2, r1, r4, asr #9
   12884:	andeq	r2, r1, r4, asr #9
   12888:	andeq	r2, r1, r4, asr #9
   1288c:	andeq	r2, r1, r4, asr #9
   12890:	andeq	r2, r1, r4, asr #9
   12894:	andeq	r2, r1, r4, asr #9
   12898:	andeq	r2, r1, r4, asr #9
   1289c:	andeq	r2, r1, r0, asr #20
   128a0:	andeq	r2, r1, r8, lsr #7
   128a4:	andeq	r2, r1, r8, lsr #7
   128a8:	andeq	r2, r1, r4, lsr #20
   128ac:	andeq	r2, r1, r8, lsr #7
   128b0:	andeq	r2, r1, r8, lsl sl
   128b4:	andeq	r2, r1, r8, lsr #7
   128b8:	andeq	r2, r1, r4, lsl #4
   128bc:	andeq	r2, r1, r8, lsr #7
   128c0:	andeq	r2, r1, r8, lsr #7
   128c4:	andeq	r2, r1, r8, lsr #7
   128c8:	andeq	r2, r1, r8, lsl sl
   128cc:	andeq	r2, r1, r8, lsl sl
   128d0:	andeq	r2, r1, r8, lsl sl
   128d4:	andeq	r2, r1, r8, lsl sl
   128d8:	andeq	r2, r1, r8, lsl sl
   128dc:	andeq	r2, r1, r8, lsl sl
   128e0:	andeq	r2, r1, r8, lsl sl
   128e4:	andeq	r2, r1, r8, lsl sl
   128e8:	andeq	r2, r1, r8, lsl sl
   128ec:	andeq	r2, r1, r8, lsl sl
   128f0:	andeq	r2, r1, r8, lsl sl
   128f4:	andeq	r2, r1, r8, lsl sl
   128f8:	andeq	r2, r1, r8, lsl sl
   128fc:	andeq	r2, r1, r8, lsl sl
   12900:	andeq	r2, r1, r8, lsl sl
   12904:	andeq	r2, r1, r8, lsl sl
   12908:	andeq	r2, r1, r8, lsr #7
   1290c:	andeq	r2, r1, r8, lsr #7
   12910:	andeq	r2, r1, r8, lsr #7
   12914:	andeq	r2, r1, r8, lsr #7
   12918:	ldrdeq	r2, [r1], -r8
   1291c:	andeq	r2, r1, r4, asr #9
   12920:	andeq	r2, r1, r8, lsl sl
   12924:	andeq	r2, r1, r8, lsl sl
   12928:	andeq	r2, r1, r8, lsl sl
   1292c:	andeq	r2, r1, r8, lsl sl
   12930:	andeq	r2, r1, r8, lsl sl
   12934:	andeq	r2, r1, r8, lsl sl
   12938:	andeq	r2, r1, r8, lsl sl
   1293c:	andeq	r2, r1, r8, lsl sl
   12940:	andeq	r2, r1, r8, lsl sl
   12944:	andeq	r2, r1, r8, lsl sl
   12948:	andeq	r2, r1, r8, lsl sl
   1294c:	andeq	r2, r1, r8, lsl sl
   12950:	andeq	r2, r1, r8, lsl sl
   12954:	andeq	r2, r1, r8, lsl sl
   12958:	andeq	r2, r1, r8, lsl sl
   1295c:	andeq	r2, r1, r8, lsl sl
   12960:	andeq	r2, r1, r8, lsl sl
   12964:	andeq	r2, r1, r8, lsl sl
   12968:	andeq	r2, r1, r8, lsl sl
   1296c:	andeq	r2, r1, r8, lsl sl
   12970:	andeq	r2, r1, r8, lsl sl
   12974:	andeq	r2, r1, r8, lsl sl
   12978:	andeq	r2, r1, r8, lsl sl
   1297c:	andeq	r2, r1, r8, lsl sl
   12980:	andeq	r2, r1, r8, lsl sl
   12984:	andeq	r2, r1, r8, lsl sl
   12988:	andeq	r2, r1, r8, lsr #7
   1298c:	andeq	r2, r1, r0, lsl #3
   12990:	andeq	r2, r1, r8, lsl sl
   12994:	andeq	r2, r1, r8, lsr #7
   12998:	andeq	r2, r1, r8, lsl sl
   1299c:	andeq	r2, r1, r8, lsr #7
   129a0:	andeq	r2, r1, r8, lsl sl
   129a4:	andeq	r2, r1, r8, lsl sl
   129a8:	andeq	r2, r1, r8, lsl sl
   129ac:	andeq	r2, r1, r8, lsl sl
   129b0:	andeq	r2, r1, r8, lsl sl
   129b4:	andeq	r2, r1, r8, lsl sl
   129b8:	andeq	r2, r1, r8, lsl sl
   129bc:	andeq	r2, r1, r8, lsl sl
   129c0:	andeq	r2, r1, r8, lsl sl
   129c4:	andeq	r2, r1, r8, lsl sl
   129c8:	andeq	r2, r1, r8, lsl sl
   129cc:	andeq	r2, r1, r8, lsl sl
   129d0:	andeq	r2, r1, r8, lsl sl
   129d4:	andeq	r2, r1, r8, lsl sl
   129d8:	andeq	r2, r1, r8, lsl sl
   129dc:	andeq	r2, r1, r8, lsl sl
   129e0:	andeq	r2, r1, r8, lsl sl
   129e4:	andeq	r2, r1, r8, lsl sl
   129e8:	andeq	r2, r1, r8, lsl sl
   129ec:	andeq	r2, r1, r8, lsl sl
   129f0:	andeq	r2, r1, r8, lsl sl
   129f4:	andeq	r2, r1, r8, lsl sl
   129f8:	andeq	r2, r1, r8, lsl sl
   129fc:	andeq	r2, r1, r8, lsl sl
   12a00:	andeq	r2, r1, r8, lsl sl
   12a04:	andeq	r2, r1, r8, lsl sl
   12a08:	andeq	r1, r1, r4, lsr #31
   12a0c:	andeq	r2, r1, r8, lsr #7
   12a10:	andeq	r1, r1, r4, lsr #31
   12a14:	andeq	r2, r1, r4, lsr #20
   12a18:	mov	r6, r7
   12a1c:	mov	r7, #0
   12a20:	b	121d0 <__assert_fail@plt+0x1344>
   12a24:	cmp	r9, #0
   12a28:	mov	r2, #0
   12a2c:	beq	12494 <__assert_fail@plt+0x1608>
   12a30:	mov	r6, #0
   12a34:	mov	r7, r2
   12a38:	mov	r3, r6
   12a3c:	b	11ff0 <__assert_fail@plt+0x1164>
   12a40:	mov	r2, #0
   12a44:	b	124a8 <__assert_fail@plt+0x161c>
   12a48:	mov	r7, #0
   12a4c:	mov	r3, #118	; 0x76
   12a50:	b	121b4 <__assert_fail@plt+0x1328>
   12a54:	mov	r7, #0
   12a58:	mov	r3, #116	; 0x74
   12a5c:	b	122e4 <__assert_fail@plt+0x1458>
   12a60:	ldr	r3, [sp, #44]	; 0x2c
   12a64:	b	12018 <__assert_fail@plt+0x118c>
   12a68:	ldr	r3, [sp, #44]	; 0x2c
   12a6c:	cmp	r3, #0
   12a70:	bne	12ee0 <__assert_fail@plt+0x2054>
   12a74:	add	r9, r9, #1
   12a78:	mov	r6, #0
   12a7c:	ldr	r3, [sp, #48]	; 0x30
   12a80:	mov	r5, #92	; 0x5c
   12a84:	b	122a4 <__assert_fail@plt+0x1418>
   12a88:	ldr	r3, [sp, #32]
   12a8c:	ldrb	r2, [r3, #1]
   12a90:	adds	r2, r2, #0
   12a94:	movne	r2, #1
   12a98:	b	11fc0 <__assert_fail@plt+0x1134>
   12a9c:	ldr	r3, [sp, #156]	; 0x9c
   12aa0:	ands	r3, r3, #4
   12aa4:	beq	12acc <__assert_fail@plt+0x1c40>
   12aa8:	ldr	r2, [sp, #28]
   12aac:	add	r3, r9, #2
   12ab0:	cmp	r3, r2
   12ab4:	bcs	12ac8 <__assert_fail@plt+0x1c3c>
   12ab8:	ldr	r2, [sp, #52]	; 0x34
   12abc:	ldrb	r5, [r2, #1]
   12ac0:	cmp	r5, #63	; 0x3f
   12ac4:	beq	12f44 <__assert_fail@plt+0x20b8>
   12ac8:	mov	r3, #0
   12acc:	mov	r5, #63	; 0x3f
   12ad0:	mov	r6, r3
   12ad4:	b	11fe0 <__assert_fail@plt+0x1154>
   12ad8:	ldr	r3, [sp, #44]	; 0x2c
   12adc:	cmp	r3, #0
   12ae0:	bne	12ee0 <__assert_fail@plt+0x2054>
   12ae4:	mov	r6, r3
   12ae8:	mov	r5, #63	; 0x3f
   12aec:	b	12018 <__assert_fail@plt+0x118c>
   12af0:	ldr	r1, [sp, #28]
   12af4:	mov	r2, #0
   12af8:	mov	r3, #0
   12afc:	strd	r2, [sp, #104]	; 0x68
   12b00:	cmn	r1, #1
   12b04:	bne	12b14 <__assert_fail@plt+0x1c88>
   12b08:	ldr	r0, [sp, #32]
   12b0c:	bl	10dc0 <strlen@plt>
   12b10:	str	r0, [sp, #28]
   12b14:	str	r8, [sp, #76]	; 0x4c
   12b18:	mov	r3, #0
   12b1c:	str	sl, [sp, #80]	; 0x50
   12b20:	ldr	sl, [sp, #32]
   12b24:	str	r5, [sp, #84]	; 0x54
   12b28:	mov	r5, r3
   12b2c:	ldr	r8, [sp, #44]	; 0x2c
   12b30:	str	r7, [sp, #88]	; 0x58
   12b34:	str	r4, [sp, #92]	; 0x5c
   12b38:	ldr	r2, [sp, #28]
   12b3c:	add	r4, r9, r5
   12b40:	add	r3, sp, #104	; 0x68
   12b44:	add	r7, sl, r4
   12b48:	add	r0, sp, #100	; 0x64
   12b4c:	mov	r1, r7
   12b50:	sub	r2, r2, r4
   12b54:	bl	15454 <__assert_fail@plt+0x45c8>
   12b58:	subs	r1, r0, #0
   12b5c:	beq	12ba8 <__assert_fail@plt+0x1d1c>
   12b60:	cmn	r1, #1
   12b64:	beq	12f20 <__assert_fail@plt+0x2094>
   12b68:	cmn	r1, #2
   12b6c:	beq	13040 <__assert_fail@plt+0x21b4>
   12b70:	cmp	fp, #2
   12b74:	movne	r3, #0
   12b78:	andeq	r3, r8, #1
   12b7c:	cmp	r3, #0
   12b80:	bne	12d0c <__assert_fail@plt+0x1e80>
   12b84:	ldr	r0, [sp, #100]	; 0x64
   12b88:	add	r5, r5, r1
   12b8c:	bl	10d00 <iswprint@plt>
   12b90:	cmp	r0, #0
   12b94:	add	r0, sp, #104	; 0x68
   12b98:	moveq	r6, #0
   12b9c:	bl	10ca0 <mbsinit@plt>
   12ba0:	cmp	r0, #0
   12ba4:	beq	12b38 <__assert_fail@plt+0x1cac>
   12ba8:	ldr	r3, [sp, #40]	; 0x28
   12bac:	mov	ip, r5
   12bb0:	eor	r2, r6, #1
   12bb4:	ldr	r8, [sp, #76]	; 0x4c
   12bb8:	ldr	sl, [sp, #80]	; 0x50
   12bbc:	and	r2, r2, r3
   12bc0:	ldr	r5, [sp, #84]	; 0x54
   12bc4:	ldr	r7, [sp, #88]	; 0x58
   12bc8:	ldr	r4, [sp, #92]	; 0x5c
   12bcc:	cmp	ip, #1
   12bd0:	bls	1250c <__assert_fail@plt+0x1680>
   12bd4:	add	r1, ip, r9
   12bd8:	mov	r0, #39	; 0x27
   12bdc:	ldr	lr, [sp, #52]	; 0x34
   12be0:	mov	ip, #0
   12be4:	str	r6, [sp, #52]	; 0x34
   12be8:	ldr	r6, [sp, #48]	; 0x30
   12bec:	b	12ca8 <__assert_fail@plt+0x1e1c>
   12bf0:	ldr	ip, [sp, #44]	; 0x2c
   12bf4:	sub	r3, fp, #2
   12bf8:	clz	r3, r3
   12bfc:	lsr	r3, r3, #5
   12c00:	cmp	ip, #0
   12c04:	bne	12e18 <__assert_fail@plt+0x1f8c>
   12c08:	eor	ip, r6, #1
   12c0c:	ands	r3, r3, ip
   12c10:	beq	12c40 <__assert_fail@plt+0x1db4>
   12c14:	cmp	sl, r4
   12c18:	add	ip, r4, #1
   12c1c:	strbhi	r0, [r8, r4]
   12c20:	cmp	sl, ip
   12c24:	movhi	r6, #36	; 0x24
   12c28:	strbhi	r6, [r8, ip]
   12c2c:	add	ip, r4, #2
   12c30:	mov	r6, r3
   12c34:	cmp	sl, ip
   12c38:	add	r4, r4, #3
   12c3c:	strbhi	r0, [r8, ip]
   12c40:	cmp	sl, r4
   12c44:	movhi	r3, #92	; 0x5c
   12c48:	strbhi	r3, [r8, r4]
   12c4c:	add	r3, r4, #1
   12c50:	cmp	sl, r3
   12c54:	bls	12c64 <__assert_fail@plt+0x1dd8>
   12c58:	lsr	ip, r5, #6
   12c5c:	add	ip, ip, #48	; 0x30
   12c60:	strb	ip, [r8, r3]
   12c64:	add	r3, r4, #2
   12c68:	cmp	sl, r3
   12c6c:	bls	12c7c <__assert_fail@plt+0x1df0>
   12c70:	ubfx	ip, r5, #3, #3
   12c74:	add	ip, ip, #48	; 0x30
   12c78:	strb	ip, [r8, r3]
   12c7c:	add	r9, r9, #1
   12c80:	and	r5, r5, #7
   12c84:	cmp	r9, r1
   12c88:	add	r5, r5, #48	; 0x30
   12c8c:	add	r4, r4, #3
   12c90:	bcs	12e44 <__assert_fail@plt+0x1fb8>
   12c94:	mov	ip, r2
   12c98:	cmp	sl, r4
   12c9c:	strbhi	r5, [r8, r4]
   12ca0:	add	r4, r4, #1
   12ca4:	ldrb	r5, [lr, #1]!
   12ca8:	cmp	r2, #0
   12cac:	bne	12bf0 <__assert_fail@plt+0x1d64>
   12cb0:	eor	r3, ip, #1
   12cb4:	cmp	r7, #0
   12cb8:	and	r3, r3, r6
   12cbc:	uxtb	r3, r3
   12cc0:	beq	12cd4 <__assert_fail@plt+0x1e48>
   12cc4:	cmp	sl, r4
   12cc8:	movhi	r7, #92	; 0x5c
   12ccc:	strbhi	r7, [r8, r4]
   12cd0:	add	r4, r4, #1
   12cd4:	add	r9, r9, #1
   12cd8:	cmp	r9, r1
   12cdc:	bcs	12e2c <__assert_fail@plt+0x1fa0>
   12ce0:	cmp	r3, #0
   12ce4:	beq	12e64 <__assert_fail@plt+0x1fd8>
   12ce8:	cmp	sl, r4
   12cec:	add	r3, r4, #1
   12cf0:	mov	r7, #0
   12cf4:	strbhi	r0, [r8, r4]
   12cf8:	cmp	sl, r3
   12cfc:	add	r4, r4, #2
   12d00:	mov	r6, r7
   12d04:	strbhi	r0, [r8, r3]
   12d08:	b	12c98 <__assert_fail@plt+0x1e0c>
   12d0c:	cmp	r1, #1
   12d10:	beq	12b84 <__assert_fail@plt+0x1cf8>
   12d14:	add	r2, r4, #1
   12d18:	add	r3, sl, r1
   12d1c:	add	r2, sl, r2
   12d20:	add	r4, r3, r4
   12d24:	ldrb	r3, [r2], #1
   12d28:	sub	r3, r3, #91	; 0x5b
   12d2c:	cmp	r3, #33	; 0x21
   12d30:	ldrls	pc, [pc, r3, lsl #2]
   12d34:	b	12dc0 <__assert_fail@plt+0x1f34>
   12d38:	andeq	r2, r1, ip, asr #27
   12d3c:	andeq	r2, r1, ip, asr #27
   12d40:	andeq	r2, r1, r0, asr #27
   12d44:	andeq	r2, r1, ip, asr #27
   12d48:	andeq	r2, r1, r0, asr #27
   12d4c:	andeq	r2, r1, ip, asr #27
   12d50:	andeq	r2, r1, r0, asr #27
   12d54:	andeq	r2, r1, r0, asr #27
   12d58:	andeq	r2, r1, r0, asr #27
   12d5c:	andeq	r2, r1, r0, asr #27
   12d60:	andeq	r2, r1, r0, asr #27
   12d64:	andeq	r2, r1, r0, asr #27
   12d68:	andeq	r2, r1, r0, asr #27
   12d6c:	andeq	r2, r1, r0, asr #27
   12d70:	andeq	r2, r1, r0, asr #27
   12d74:	andeq	r2, r1, r0, asr #27
   12d78:	andeq	r2, r1, r0, asr #27
   12d7c:	andeq	r2, r1, r0, asr #27
   12d80:	andeq	r2, r1, r0, asr #27
   12d84:	andeq	r2, r1, r0, asr #27
   12d88:	andeq	r2, r1, r0, asr #27
   12d8c:	andeq	r2, r1, r0, asr #27
   12d90:	andeq	r2, r1, r0, asr #27
   12d94:	andeq	r2, r1, r0, asr #27
   12d98:	andeq	r2, r1, r0, asr #27
   12d9c:	andeq	r2, r1, r0, asr #27
   12da0:	andeq	r2, r1, r0, asr #27
   12da4:	andeq	r2, r1, r0, asr #27
   12da8:	andeq	r2, r1, r0, asr #27
   12dac:	andeq	r2, r1, r0, asr #27
   12db0:	andeq	r2, r1, r0, asr #27
   12db4:	andeq	r2, r1, r0, asr #27
   12db8:	andeq	r2, r1, r0, asr #27
   12dbc:	andeq	r2, r1, ip, asr #27
   12dc0:	cmp	r4, r2
   12dc4:	bne	12d24 <__assert_fail@plt+0x1e98>
   12dc8:	b	12b84 <__assert_fail@plt+0x1cf8>
   12dcc:	mov	r8, #2
   12dd0:	ldr	fp, [sp, #76]	; 0x4c
   12dd4:	ldr	sl, [sp, #80]	; 0x50
   12dd8:	b	12304 <__assert_fail@plt+0x1478>
   12ddc:	ldr	r2, [sp, #40]	; 0x28
   12de0:	str	fp, [sp, #152]	; 0x98
   12de4:	mov	fp, r8
   12de8:	ldr	r8, [sp, #152]	; 0x98
   12dec:	and	r2, r2, r3
   12df0:	str	r2, [sp, #40]	; 0x28
   12df4:	b	12304 <__assert_fail@plt+0x1478>
   12df8:	cmp	sl, r4
   12dfc:	movls	r0, r4
   12e00:	bls	12434 <__assert_fail@plt+0x15a8>
   12e04:	ldr	r3, [sp, #48]	; 0x30
   12e08:	b	12424 <__assert_fail@plt+0x1598>
   12e0c:	str	sl, [sp, #72]	; 0x48
   12e10:	ldr	sl, [sp, #44]	; 0x2c
   12e14:	b	12274 <__assert_fail@plt+0x13e8>
   12e18:	str	r3, [sp, #40]	; 0x28
   12e1c:	str	fp, [sp, #152]	; 0x98
   12e20:	mov	fp, r8
   12e24:	ldr	r8, [sp, #152]	; 0x98
   12e28:	b	12304 <__assert_fail@plt+0x1478>
   12e2c:	str	r6, [sp, #48]	; 0x30
   12e30:	ldr	r6, [sp, #52]	; 0x34
   12e34:	b	122a4 <__assert_fail@plt+0x1418>
   12e38:	mov	r6, #0
   12e3c:	ldr	r2, [sp, #40]	; 0x28
   12e40:	b	12bd4 <__assert_fail@plt+0x1d48>
   12e44:	str	r6, [sp, #48]	; 0x30
   12e48:	ldr	r6, [sp, #52]	; 0x34
   12e4c:	b	12090 <__assert_fail@plt+0x1204>
   12e50:	add	r4, r4, #4
   12e54:	mov	r6, #0
   12e58:	str	r3, [sp, #48]	; 0x30
   12e5c:	mov	r5, #48	; 0x30
   12e60:	b	12018 <__assert_fail@plt+0x118c>
   12e64:	mov	r7, r3
   12e68:	b	12c98 <__assert_fail@plt+0x1e0c>
   12e6c:	mov	r3, #1
   12e70:	movw	r2, #23420	; 0x5b7c
   12e74:	movt	r2, #1
   12e78:	mov	r4, r3
   12e7c:	str	r3, [sp, #36]	; 0x24
   12e80:	str	r3, [sp, #40]	; 0x28
   12e84:	str	sl, [sp, #44]	; 0x2c
   12e88:	str	sl, [sp, #48]	; 0x30
   12e8c:	str	r3, [sp, #56]	; 0x38
   12e90:	str	r2, [sp, #60]	; 0x3c
   12e94:	str	sl, [sp, #68]	; 0x44
   12e98:	str	sl, [sp, #72]	; 0x48
   12e9c:	b	11b40 <__assert_fail@plt+0xcb4>
   12ea0:	mov	r3, r6
   12ea4:	mov	r5, #48	; 0x30
   12ea8:	mov	r6, #0
   12eac:	b	12018 <__assert_fail@plt+0x118c>
   12eb0:	mov	r5, r3
   12eb4:	b	12390 <__assert_fail@plt+0x1504>
   12eb8:	cmp	sl, r4
   12ebc:	mov	r5, #48	; 0x30
   12ec0:	movhi	r3, #48	; 0x30
   12ec4:	strbhi	r3, [r8, r4]
   12ec8:	add	r3, r0, #2
   12ecc:	add	r4, r0, #3
   12ed0:	cmp	sl, r3
   12ed4:	movhi	r1, #48	; 0x30
   12ed8:	strbhi	r1, [r8, r3]
   12edc:	b	12468 <__assert_fail@plt+0x15dc>
   12ee0:	str	fp, [sp, #152]	; 0x98
   12ee4:	mov	fp, r8
   12ee8:	ldr	r8, [sp, #152]	; 0x98
   12eec:	b	12304 <__assert_fail@plt+0x1478>
   12ef0:	ldr	r3, [sp, #164]	; 0xa4
   12ef4:	ldrb	r3, [r3]
   12ef8:	cmp	r3, #0
   12efc:	beq	11b10 <__assert_fail@plt+0xc84>
   12f00:	ldr	r2, [sp, #164]	; 0xa4
   12f04:	cmp	sl, r4
   12f08:	strbhi	r3, [fp, r4]
   12f0c:	add	r4, r4, #1
   12f10:	ldrb	r3, [r2, #1]!
   12f14:	cmp	r3, #0
   12f18:	bne	12f04 <__assert_fail@plt+0x2078>
   12f1c:	b	11b10 <__assert_fail@plt+0xc84>
   12f20:	mov	ip, r5
   12f24:	mov	r6, #0
   12f28:	ldr	r2, [sp, #40]	; 0x28
   12f2c:	ldr	r8, [sp, #76]	; 0x4c
   12f30:	ldr	sl, [sp, #80]	; 0x50
   12f34:	ldr	r5, [sp, #84]	; 0x54
   12f38:	ldr	r7, [sp, #88]	; 0x58
   12f3c:	ldr	r4, [sp, #92]	; 0x5c
   12f40:	b	12bcc <__assert_fail@plt+0x1d40>
   12f44:	ldr	r2, [sp, #32]
   12f48:	ldrb	r1, [r2, r3]
   12f4c:	sub	r2, r1, #33	; 0x21
   12f50:	cmp	r2, #29
   12f54:	ldrls	pc, [pc, r2, lsl #2]
   12f58:	b	13034 <__assert_fail@plt+0x21a8>
   12f5c:	ldrdeq	r2, [r1], -r4
   12f60:	andeq	r3, r1, r4, lsr r0
   12f64:	andeq	r3, r1, r4, lsr r0
   12f68:	andeq	r3, r1, r4, lsr r0
   12f6c:	andeq	r3, r1, r4, lsr r0
   12f70:	andeq	r3, r1, r4, lsr r0
   12f74:	ldrdeq	r2, [r1], -r4
   12f78:	ldrdeq	r2, [r1], -r4
   12f7c:	ldrdeq	r2, [r1], -r4
   12f80:	andeq	r3, r1, r4, lsr r0
   12f84:	andeq	r3, r1, r4, lsr r0
   12f88:	andeq	r3, r1, r4, lsr r0
   12f8c:	ldrdeq	r2, [r1], -r4
   12f90:	andeq	r3, r1, r4, lsr r0
   12f94:	ldrdeq	r2, [r1], -r4
   12f98:	andeq	r3, r1, r4, lsr r0
   12f9c:	andeq	r3, r1, r4, lsr r0
   12fa0:	andeq	r3, r1, r4, lsr r0
   12fa4:	andeq	r3, r1, r4, lsr r0
   12fa8:	andeq	r3, r1, r4, lsr r0
   12fac:	andeq	r3, r1, r4, lsr r0
   12fb0:	andeq	r3, r1, r4, lsr r0
   12fb4:	andeq	r3, r1, r4, lsr r0
   12fb8:	andeq	r3, r1, r4, lsr r0
   12fbc:	andeq	r3, r1, r4, lsr r0
   12fc0:	andeq	r3, r1, r4, lsr r0
   12fc4:	andeq	r3, r1, r4, lsr r0
   12fc8:	ldrdeq	r2, [r1], -r4
   12fcc:	ldrdeq	r2, [r1], -r4
   12fd0:	ldrdeq	r2, [r1], -r4
   12fd4:	ldr	r2, [sp, #44]	; 0x2c
   12fd8:	cmp	r2, #0
   12fdc:	bne	13138 <__assert_fail@plt+0x22ac>
   12fe0:	cmp	sl, r4
   12fe4:	mov	r5, r1
   12fe8:	movhi	r2, #63	; 0x3f
   12fec:	mov	r9, r3
   12ff0:	strbhi	r2, [r8, r4]
   12ff4:	add	r2, r4, #1
   12ff8:	cmp	sl, r2
   12ffc:	movhi	r0, #34	; 0x22
   13000:	strbhi	r0, [r8, r2]
   13004:	add	r2, r4, #2
   13008:	cmp	sl, r2
   1300c:	movhi	r0, #34	; 0x22
   13010:	strbhi	r0, [r8, r2]
   13014:	add	r2, r4, #3
   13018:	add	r4, r4, #4
   1301c:	cmp	sl, r2
   13020:	movhi	r0, #63	; 0x3f
   13024:	strbhi	r0, [r8, r2]
   13028:	mov	r2, #0
   1302c:	mov	r6, r2
   13030:	b	12468 <__assert_fail@plt+0x15dc>
   13034:	mov	r3, #0
   13038:	mov	r6, r3
   1303c:	b	11fe0 <__assert_fail@plt+0x1154>
   13040:	ldr	r0, [sp, #28]
   13044:	mov	r1, r4
   13048:	mov	r2, r7
   1304c:	mov	r3, r5
   13050:	mov	ip, r5
   13054:	ldr	r8, [sp, #76]	; 0x4c
   13058:	ldr	sl, [sp, #80]	; 0x50
   1305c:	cmp	r1, r0
   13060:	ldr	r5, [sp, #84]	; 0x54
   13064:	ldr	r7, [sp, #88]	; 0x58
   13068:	ldr	r4, [sp, #92]	; 0x5c
   1306c:	bcs	130a0 <__assert_fail@plt+0x2214>
   13070:	ldrb	r6, [r2]
   13074:	cmp	r6, #0
   13078:	bne	1308c <__assert_fail@plt+0x2200>
   1307c:	b	131c0 <__assert_fail@plt+0x2334>
   13080:	ldrb	r6, [r2, #1]!
   13084:	cmp	r6, #0
   13088:	beq	13148 <__assert_fail@plt+0x22bc>
   1308c:	add	r3, r3, #1
   13090:	add	r1, r9, r3
   13094:	cmp	r1, r0
   13098:	bcc	13080 <__assert_fail@plt+0x21f4>
   1309c:	mov	ip, r3
   130a0:	mov	r6, #0
   130a4:	ldr	r2, [sp, #40]	; 0x28
   130a8:	b	12bcc <__assert_fail@plt+0x1d40>
   130ac:	mov	r3, #1
   130b0:	mov	r2, #0
   130b4:	mov	r4, r2
   130b8:	str	r3, [sp, #36]	; 0x24
   130bc:	str	r3, [sp, #40]	; 0x28
   130c0:	str	r3, [sp, #44]	; 0x2c
   130c4:	str	r2, [sp, #48]	; 0x30
   130c8:	str	r3, [sp, #56]	; 0x38
   130cc:	movw	r3, #23420	; 0x5b7c
   130d0:	movt	r3, #1
   130d4:	str	r3, [sp, #60]	; 0x3c
   130d8:	str	r2, [sp, #68]	; 0x44
   130dc:	str	r2, [sp, #72]	; 0x48
   130e0:	b	11b40 <__assert_fail@plt+0xcb4>
   130e4:	mov	r2, r3
   130e8:	ldr	r3, [sp, #60]	; 0x3c
   130ec:	cmp	r3, #0
   130f0:	moveq	r2, #0
   130f4:	andne	r2, r2, #1
   130f8:	cmp	r2, #0
   130fc:	beq	13128 <__assert_fail@plt+0x229c>
   13100:	mov	r2, r3
   13104:	ldrb	r3, [r3]
   13108:	cmp	r3, #0
   1310c:	beq	13128 <__assert_fail@plt+0x229c>
   13110:	cmp	sl, r4
   13114:	strbhi	r3, [fp, r4]
   13118:	add	r4, r4, #1
   1311c:	ldrb	r3, [r2, #1]!
   13120:	cmp	r3, #0
   13124:	bne	13110 <__assert_fail@plt+0x2284>
   13128:	cmp	sl, r4
   1312c:	movhi	r3, #0
   13130:	strbhi	r3, [fp, r4]
   13134:	b	12348 <__assert_fail@plt+0x14bc>
   13138:	str	fp, [sp, #152]	; 0x98
   1313c:	mov	fp, r8
   13140:	ldr	r8, [sp, #152]	; 0x98
   13144:	b	12310 <__assert_fail@plt+0x1484>
   13148:	mov	ip, r3
   1314c:	ldr	r2, [sp, #40]	; 0x28
   13150:	b	12bcc <__assert_fail@plt+0x1d40>
   13154:	str	fp, [sp, #152]	; 0x98
   13158:	mov	fp, r8
   1315c:	ldr	r8, [sp, #152]	; 0x98
   13160:	sub	r3, r8, #2
   13164:	clz	r3, r3
   13168:	lsr	r3, r3, #5
   1316c:	str	r3, [sp, #40]	; 0x28
   13170:	b	12304 <__assert_fail@plt+0x1478>
   13174:	mov	ip, #5
   13178:	ldr	r3, [sp, #28]
   1317c:	str	ip, [sp]
   13180:	ldr	r2, [sp, #156]	; 0x9c
   13184:	ldr	ip, [sp, #164]	; 0xa4
   13188:	ldr	r0, [sp, #160]	; 0xa0
   1318c:	str	r2, [sp, #4]
   13190:	ldr	r2, [sp, #32]
   13194:	ldr	r1, [sp, #72]	; 0x48
   13198:	str	ip, [sp, #12]
   1319c:	ldr	ip, [sp, #168]	; 0xa8
   131a0:	str	r0, [sp, #8]
   131a4:	mov	r0, fp
   131a8:	str	ip, [sp, #16]
   131ac:	bl	11a58 <__assert_fail@plt+0xbcc>
   131b0:	mov	r4, r0
   131b4:	b	12348 <__assert_fail@plt+0x14bc>
   131b8:	mov	r8, #2
   131bc:	b	12304 <__assert_fail@plt+0x1478>
   131c0:	ldr	r2, [sp, #40]	; 0x28
   131c4:	b	12bcc <__assert_fail@plt+0x1d40>
   131c8:	mov	r3, #0
   131cc:	mov	r2, #1
   131d0:	mov	r4, r3
   131d4:	strd	r2, [sp, #36]	; 0x24
   131d8:	strd	r2, [sp, #44]	; 0x2c
   131dc:	str	r2, [sp, #56]	; 0x38
   131e0:	str	r3, [sp, #68]	; 0x44
   131e4:	str	r3, [sp, #72]	; 0x48
   131e8:	movw	r3, #23440	; 0x5b90
   131ec:	movt	r3, #1
   131f0:	str	r3, [sp, #60]	; 0x3c
   131f4:	b	11b40 <__assert_fail@plt+0xcb4>
   131f8:	mov	r3, #0
   131fc:	mov	r1, #1
   13200:	mov	r2, r3
   13204:	str	r1, [sp, #36]	; 0x24
   13208:	str	r3, [sp, #48]	; 0x30
   1320c:	str	sl, [sp, #72]	; 0x48
   13210:	b	12148 <__assert_fail@plt+0x12bc>
   13214:	bl	10e80 <abort@plt>
   13218:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1321c:	mov	r4, r0
   13220:	mov	r5, r3
   13224:	strd	r6, [sp, #8]
   13228:	movw	r7, #28904	; 0x70e8
   1322c:	movt	r7, #2
   13230:	strd	r8, [sp, #16]
   13234:	strd	sl, [sp, #24]
   13238:	mov	sl, r1
   1323c:	mov	fp, r2
   13240:	str	lr, [sp, #32]
   13244:	sub	sp, sp, #60	; 0x3c
   13248:	bl	10dd8 <__errno_location@plt>
   1324c:	mov	r8, r0
   13250:	cmn	r4, #-2147483647	; 0x80000001
   13254:	ldr	r6, [r7]
   13258:	movne	r0, #0
   1325c:	moveq	r0, #1
   13260:	ldr	r3, [r8]
   13264:	orrs	r0, r0, r4, lsr #31
   13268:	str	r3, [sp, #28]
   1326c:	bne	133fc <__assert_fail@plt+0x2570>
   13270:	ldr	r3, [r7, #4]
   13274:	cmp	r3, r4
   13278:	bgt	132d8 <__assert_fail@plt+0x244c>
   1327c:	add	r1, r7, #8
   13280:	sub	r2, r4, r3
   13284:	str	r3, [sp, #52]	; 0x34
   13288:	cmp	r6, r1
   1328c:	add	r2, r2, #1
   13290:	beq	133d4 <__assert_fail@plt+0x2548>
   13294:	mov	r1, #8
   13298:	mov	r0, r6
   1329c:	mvn	r3, #-2147483648	; 0x80000000
   132a0:	str	r1, [sp]
   132a4:	add	r1, sp, #52	; 0x34
   132a8:	bl	1427c <__assert_fail@plt+0x33f0>
   132ac:	mov	r6, r0
   132b0:	str	r0, [r7]
   132b4:	ldr	r0, [r7, #4]
   132b8:	mov	r1, #0
   132bc:	ldr	r2, [sp, #52]	; 0x34
   132c0:	sub	r2, r2, r0
   132c4:	add	r0, r6, r0, lsl #3
   132c8:	lsl	r2, r2, #3
   132cc:	bl	10df0 <memset@plt>
   132d0:	ldr	r3, [sp, #52]	; 0x34
   132d4:	str	r3, [r7, #4]
   132d8:	ldr	r1, [r5, #4]
   132dc:	add	r0, r6, r4, lsl #3
   132e0:	add	ip, r5, #8
   132e4:	mov	r3, fp
   132e8:	mov	r2, sl
   132ec:	ldr	r7, [r0, #4]
   132f0:	str	r0, [sp, #36]	; 0x24
   132f4:	str	ip, [sp, #40]	; 0x28
   132f8:	orr	r0, r1, #1
   132fc:	ldr	r9, [r6, r4, lsl #3]
   13300:	str	ip, [sp, #8]
   13304:	ldr	lr, [r5, #44]	; 0x2c
   13308:	str	r0, [sp, #4]
   1330c:	ldr	ip, [r5]
   13310:	mov	r1, r9
   13314:	str	ip, [sp, #32]
   13318:	ldr	ip, [r5, #40]	; 0x28
   1331c:	str	ip, [sp, #12]
   13320:	ldr	ip, [sp, #32]
   13324:	str	lr, [sp, #16]
   13328:	str	r0, [sp, #44]	; 0x2c
   1332c:	mov	r0, r7
   13330:	str	ip, [sp]
   13334:	bl	11a58 <__assert_fail@plt+0xbcc>
   13338:	cmp	r9, r0
   1333c:	bhi	133ac <__assert_fail@plt+0x2520>
   13340:	add	r9, r0, #1
   13344:	movw	r3, #29012	; 0x7154
   13348:	movt	r3, #2
   1334c:	cmp	r7, r3
   13350:	str	r9, [r6, r4, lsl #3]
   13354:	beq	13360 <__assert_fail@plt+0x24d4>
   13358:	mov	r0, r7
   1335c:	bl	152d8 <__assert_fail@plt+0x444c>
   13360:	mov	r0, r9
   13364:	bl	140cc <__assert_fail@plt+0x3240>
   13368:	ldr	ip, [r5]
   1336c:	mov	r3, fp
   13370:	mov	r2, sl
   13374:	mov	r1, r9
   13378:	mov	r7, r0
   1337c:	ldr	lr, [sp, #36]	; 0x24
   13380:	ldr	r4, [r5, #40]	; 0x28
   13384:	str	r0, [lr, #4]
   13388:	ldr	lr, [r5, #44]	; 0x2c
   1338c:	str	ip, [sp]
   13390:	ldr	ip, [sp, #44]	; 0x2c
   13394:	str	ip, [sp, #4]
   13398:	ldr	ip, [sp, #40]	; 0x28
   1339c:	str	r4, [sp, #12]
   133a0:	str	lr, [sp, #16]
   133a4:	str	ip, [sp, #8]
   133a8:	bl	11a58 <__assert_fail@plt+0xbcc>
   133ac:	ldr	r3, [sp, #28]
   133b0:	mov	r0, r7
   133b4:	str	r3, [r8]
   133b8:	add	sp, sp, #60	; 0x3c
   133bc:	ldrd	r4, [sp]
   133c0:	ldrd	r6, [sp, #8]
   133c4:	ldrd	r8, [sp, #16]
   133c8:	ldrd	sl, [sp, #24]
   133cc:	add	sp, sp, #32
   133d0:	pop	{pc}		; (ldr pc, [sp], #4)
   133d4:	mov	r1, #8
   133d8:	mvn	r3, #-2147483648	; 0x80000000
   133dc:	str	r1, [sp]
   133e0:	add	r1, sp, #52	; 0x34
   133e4:	bl	1427c <__assert_fail@plt+0x33f0>
   133e8:	ldrd	r2, [r7, #8]
   133ec:	mov	r6, r0
   133f0:	str	r0, [r7]
   133f4:	strd	r2, [r0]
   133f8:	b	132b4 <__assert_fail@plt+0x2428>
   133fc:	bl	10e80 <abort@plt>
   13400:	strd	r4, [sp, #-16]!
   13404:	mov	r5, r0
   13408:	str	r6, [sp, #8]
   1340c:	str	lr, [sp, #12]
   13410:	bl	10dd8 <__errno_location@plt>
   13414:	mov	r4, r0
   13418:	cmp	r5, #0
   1341c:	ldr	r0, [pc, #32]	; 13444 <__assert_fail@plt+0x25b8>
   13420:	mov	r1, #48	; 0x30
   13424:	movne	r0, r5
   13428:	ldr	r6, [r4]
   1342c:	bl	143f4 <__assert_fail@plt+0x3568>
   13430:	str	r6, [r4]
   13434:	ldrd	r4, [sp]
   13438:	ldr	r6, [sp, #8]
   1343c:	add	sp, sp, #12
   13440:	pop	{pc}		; (ldr pc, [sp], #4)
   13444:	andeq	r7, r2, r4, asr r2
   13448:	ldr	r3, [pc, #12]	; 1345c <__assert_fail@plt+0x25d0>
   1344c:	cmp	r0, #0
   13450:	moveq	r0, r3
   13454:	ldr	r0, [r0]
   13458:	bx	lr
   1345c:	andeq	r7, r2, r4, asr r2
   13460:	ldr	r3, [pc, #12]	; 13474 <__assert_fail@plt+0x25e8>
   13464:	cmp	r0, #0
   13468:	moveq	r0, r3
   1346c:	str	r1, [r0]
   13470:	bx	lr
   13474:	andeq	r7, r2, r4, asr r2
   13478:	ldr	r3, [pc, #52]	; 134b4 <__assert_fail@plt+0x2628>
   1347c:	cmp	r0, #0
   13480:	push	{lr}		; (str lr, [sp, #-4]!)
   13484:	lsr	lr, r1, #5
   13488:	and	r1, r1, #31
   1348c:	moveq	r0, r3
   13490:	add	r3, r0, #8
   13494:	ldr	ip, [r3, lr, lsl #2]
   13498:	lsr	r0, ip, r1
   1349c:	eor	r2, r2, r0
   134a0:	and	r0, r0, #1
   134a4:	and	r2, r2, #1
   134a8:	eor	r1, ip, r2, lsl r1
   134ac:	str	r1, [r3, lr, lsl #2]
   134b0:	pop	{pc}		; (ldr pc, [sp], #4)
   134b4:	andeq	r7, r2, r4, asr r2
   134b8:	ldr	r3, [pc, #16]	; 134d0 <__assert_fail@plt+0x2644>
   134bc:	cmp	r0, #0
   134c0:	movne	r3, r0
   134c4:	ldr	r0, [r3, #4]
   134c8:	str	r1, [r3, #4]
   134cc:	bx	lr
   134d0:	andeq	r7, r2, r4, asr r2
   134d4:	ldr	r3, [pc, #48]	; 1350c <__assert_fail@plt+0x2680>
   134d8:	cmp	r0, #0
   134dc:	mov	ip, #10
   134e0:	moveq	r0, r3
   134e4:	cmp	r2, #0
   134e8:	cmpne	r1, #0
   134ec:	str	ip, [r0]
   134f0:	beq	13500 <__assert_fail@plt+0x2674>
   134f4:	str	r1, [r0, #40]	; 0x28
   134f8:	str	r2, [r0, #44]	; 0x2c
   134fc:	bx	lr
   13500:	str	r4, [sp, #-8]!
   13504:	str	lr, [sp, #4]
   13508:	bl	10e80 <abort@plt>
   1350c:	andeq	r7, r2, r4, asr r2
   13510:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13514:	strd	r6, [sp, #8]
   13518:	mov	r7, r0
   1351c:	mov	r6, r1
   13520:	strd	r8, [sp, #16]
   13524:	mov	r8, r2
   13528:	mov	r9, r3
   1352c:	str	lr, [sp, #24]
   13530:	sub	sp, sp, #28
   13534:	ldr	r4, [sp, #56]	; 0x38
   13538:	ldr	ip, [pc, #104]	; 135a8 <__assert_fail@plt+0x271c>
   1353c:	cmp	r4, #0
   13540:	moveq	r4, ip
   13544:	bl	10dd8 <__errno_location@plt>
   13548:	ldr	ip, [r4, #44]	; 0x2c
   1354c:	mov	r5, r0
   13550:	mov	r1, r6
   13554:	add	lr, r4, #8
   13558:	mov	r3, r9
   1355c:	ldr	r6, [r5]
   13560:	mov	r2, r8
   13564:	mov	r0, r7
   13568:	str	ip, [sp, #16]
   1356c:	ldr	ip, [r4, #40]	; 0x28
   13570:	str	lr, [sp, #8]
   13574:	str	ip, [sp, #12]
   13578:	ldr	ip, [r4, #4]
   1357c:	str	ip, [sp, #4]
   13580:	ldr	ip, [r4]
   13584:	str	ip, [sp]
   13588:	bl	11a58 <__assert_fail@plt+0xbcc>
   1358c:	str	r6, [r5]
   13590:	add	sp, sp, #28
   13594:	ldrd	r4, [sp]
   13598:	ldrd	r6, [sp, #8]
   1359c:	ldrd	r8, [sp, #16]
   135a0:	add	sp, sp, #24
   135a4:	pop	{pc}		; (ldr pc, [sp], #4)
   135a8:	andeq	r7, r2, r4, asr r2
   135ac:	strd	r4, [sp, #-36]!	; 0xffffffdc
   135b0:	cmp	r3, #0
   135b4:	ldr	r4, [pc, #220]	; 13698 <__assert_fail@plt+0x280c>
   135b8:	movne	r4, r3
   135bc:	strd	r6, [sp, #8]
   135c0:	mov	r6, r2
   135c4:	strd	r8, [sp, #16]
   135c8:	mov	r9, r0
   135cc:	strd	sl, [sp, #24]
   135d0:	mov	sl, r1
   135d4:	str	lr, [sp, #32]
   135d8:	sub	sp, sp, #44	; 0x2c
   135dc:	bl	10dd8 <__errno_location@plt>
   135e0:	ldr	r5, [r4, #4]
   135e4:	mov	r7, r0
   135e8:	mov	r1, #0
   135ec:	add	r8, r4, #8
   135f0:	mov	r3, sl
   135f4:	ldr	ip, [r4, #44]	; 0x2c
   135f8:	mov	r2, r9
   135fc:	mov	r0, r1
   13600:	ldr	lr, [r7]
   13604:	cmp	r6, r1
   13608:	orreq	r5, r5, #1
   1360c:	str	ip, [sp, #16]
   13610:	ldr	ip, [r4, #40]	; 0x28
   13614:	stmib	sp, {r5, r8, ip}
   13618:	ldr	ip, [r4]
   1361c:	str	lr, [sp, #28]
   13620:	str	ip, [sp]
   13624:	bl	11a58 <__assert_fail@plt+0xbcc>
   13628:	add	r1, r0, #1
   1362c:	mov	fp, r0
   13630:	mov	r0, r1
   13634:	str	r1, [sp, #36]	; 0x24
   13638:	bl	140cc <__assert_fail@plt+0x3240>
   1363c:	ldr	ip, [r4, #44]	; 0x2c
   13640:	mov	r3, sl
   13644:	mov	r2, r9
   13648:	ldr	r1, [sp, #36]	; 0x24
   1364c:	str	ip, [sp, #16]
   13650:	ldr	ip, [r4, #40]	; 0x28
   13654:	str	r0, [sp, #32]
   13658:	stmib	sp, {r5, r8, ip}
   1365c:	ldr	ip, [r4]
   13660:	str	ip, [sp]
   13664:	bl	11a58 <__assert_fail@plt+0xbcc>
   13668:	ldr	lr, [sp, #28]
   1366c:	cmp	r6, #0
   13670:	ldr	r0, [sp, #32]
   13674:	str	lr, [r7]
   13678:	strne	fp, [r6]
   1367c:	add	sp, sp, #44	; 0x2c
   13680:	ldrd	r4, [sp]
   13684:	ldrd	r6, [sp, #8]
   13688:	ldrd	r8, [sp, #16]
   1368c:	ldrd	sl, [sp, #24]
   13690:	add	sp, sp, #32
   13694:	pop	{pc}		; (ldr pc, [sp], #4)
   13698:	andeq	r7, r2, r4, asr r2
   1369c:	mov	r3, r2
   136a0:	mov	r2, #0
   136a4:	b	135ac <__assert_fail@plt+0x2720>
   136a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   136ac:	movw	r5, #28904	; 0x70e8
   136b0:	movt	r5, #2
   136b4:	ldr	r3, [r5, #4]
   136b8:	strd	r6, [sp, #8]
   136bc:	str	r8, [sp, #16]
   136c0:	str	lr, [sp, #20]
   136c4:	ldr	r7, [r5]
   136c8:	cmp	r3, #1
   136cc:	ble	136f0 <__assert_fail@plt+0x2864>
   136d0:	mov	r4, #1
   136d4:	add	r6, r7, #4
   136d8:	ldr	r0, [r6, r4, lsl #3]
   136dc:	add	r4, r4, #1
   136e0:	bl	152d8 <__assert_fail@plt+0x444c>
   136e4:	ldr	r3, [r5, #4]
   136e8:	cmp	r3, r4
   136ec:	bgt	136d8 <__assert_fail@plt+0x284c>
   136f0:	ldr	r0, [r7, #4]
   136f4:	movw	r4, #29012	; 0x7154
   136f8:	movt	r4, #2
   136fc:	cmp	r0, r4
   13700:	beq	13714 <__assert_fail@plt+0x2888>
   13704:	bl	152d8 <__assert_fail@plt+0x444c>
   13708:	mov	r3, #256	; 0x100
   1370c:	str	r3, [r5, #8]
   13710:	str	r4, [r5, #12]
   13714:	ldr	r4, [pc, #44]	; 13748 <__assert_fail@plt+0x28bc>
   13718:	cmp	r7, r4
   1371c:	beq	1372c <__assert_fail@plt+0x28a0>
   13720:	mov	r0, r7
   13724:	bl	152d8 <__assert_fail@plt+0x444c>
   13728:	str	r4, [r5]
   1372c:	mov	r3, #1
   13730:	ldrd	r6, [sp, #8]
   13734:	str	r3, [r5, #4]
   13738:	ldrd	r4, [sp]
   1373c:	ldr	r8, [sp, #16]
   13740:	add	sp, sp, #20
   13744:	pop	{pc}		; (ldr pc, [sp], #4)
   13748:	strdeq	r7, [r2], -r0
   1374c:	ldr	r3, [pc, #4]	; 13758 <__assert_fail@plt+0x28cc>
   13750:	mvn	r2, #0
   13754:	b	13218 <__assert_fail@plt+0x238c>
   13758:	andeq	r7, r2, r4, asr r2
   1375c:	ldr	r3, [pc]	; 13764 <__assert_fail@plt+0x28d8>
   13760:	b	13218 <__assert_fail@plt+0x238c>
   13764:	andeq	r7, r2, r4, asr r2
   13768:	mov	r1, r0
   1376c:	ldr	r3, [pc, #8]	; 1377c <__assert_fail@plt+0x28f0>
   13770:	mvn	r2, #0
   13774:	mov	r0, #0
   13778:	b	13218 <__assert_fail@plt+0x238c>
   1377c:	andeq	r7, r2, r4, asr r2
   13780:	mov	r2, r1
   13784:	ldr	r3, [pc, #8]	; 13794 <__assert_fail@plt+0x2908>
   13788:	mov	r1, r0
   1378c:	mov	r0, #0
   13790:	b	13218 <__assert_fail@plt+0x238c>
   13794:	andeq	r7, r2, r4, asr r2
   13798:	strd	r4, [sp, #-12]!
   1379c:	mov	r5, r2
   137a0:	mov	r4, r0
   137a4:	str	lr, [sp, #8]
   137a8:	sub	sp, sp, #52	; 0x34
   137ac:	mov	r0, sp
   137b0:	bl	118b4 <__assert_fail@plt+0xa28>
   137b4:	mov	r3, sp
   137b8:	mov	r1, r5
   137bc:	mov	r0, r4
   137c0:	mvn	r2, #0
   137c4:	bl	13218 <__assert_fail@plt+0x238c>
   137c8:	add	sp, sp, #52	; 0x34
   137cc:	ldrd	r4, [sp]
   137d0:	add	sp, sp, #8
   137d4:	pop	{pc}		; (ldr pc, [sp], #4)
   137d8:	strd	r4, [sp, #-16]!
   137dc:	mov	r5, r2
   137e0:	mov	r4, r0
   137e4:	str	r6, [sp, #8]
   137e8:	mov	r6, r3
   137ec:	str	lr, [sp, #12]
   137f0:	sub	sp, sp, #48	; 0x30
   137f4:	mov	r0, sp
   137f8:	bl	118b4 <__assert_fail@plt+0xa28>
   137fc:	mov	r3, sp
   13800:	mov	r2, r6
   13804:	mov	r1, r5
   13808:	mov	r0, r4
   1380c:	bl	13218 <__assert_fail@plt+0x238c>
   13810:	add	sp, sp, #48	; 0x30
   13814:	ldrd	r4, [sp]
   13818:	ldr	r6, [sp, #8]
   1381c:	add	sp, sp, #12
   13820:	pop	{pc}		; (ldr pc, [sp], #4)
   13824:	mov	r2, r1
   13828:	mov	r1, r0
   1382c:	mov	r0, #0
   13830:	b	13798 <__assert_fail@plt+0x290c>
   13834:	mov	r3, r2
   13838:	mov	r2, r1
   1383c:	mov	r1, r0
   13840:	mov	r0, #0
   13844:	b	137d8 <__assert_fail@plt+0x294c>
   13848:	ldr	ip, [pc, #140]	; 138dc <__assert_fail@plt+0x2a50>
   1384c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13850:	ldrd	r4, [ip]
   13854:	strd	r6, [sp, #8]
   13858:	ldrd	r6, [ip, #8]
   1385c:	strd	r8, [sp, #16]
   13860:	lsr	r9, r2, #5
   13864:	str	lr, [sp, #24]
   13868:	sub	sp, sp, #52	; 0x34
   1386c:	and	lr, r2, #31
   13870:	add	r8, sp, #8
   13874:	mov	r2, r1
   13878:	strd	r4, [sp]
   1387c:	mov	r1, r0
   13880:	mov	r3, sp
   13884:	strd	r6, [sp, #8]
   13888:	mov	r0, #0
   1388c:	ldrd	r4, [ip, #16]
   13890:	ldrd	r6, [ip, #24]
   13894:	strd	r4, [sp, #16]
   13898:	ldrd	r4, [ip, #32]
   1389c:	strd	r6, [sp, #24]
   138a0:	ldrd	r6, [ip, #40]	; 0x28
   138a4:	strd	r4, [sp, #32]
   138a8:	strd	r6, [sp, #40]	; 0x28
   138ac:	ldr	ip, [r8, r9, lsl #2]
   138b0:	mvn	r4, ip, lsr lr
   138b4:	and	r4, r4, #1
   138b8:	eor	lr, ip, r4, lsl lr
   138bc:	str	lr, [r8, r9, lsl #2]
   138c0:	bl	13218 <__assert_fail@plt+0x238c>
   138c4:	add	sp, sp, #52	; 0x34
   138c8:	ldrd	r4, [sp]
   138cc:	ldrd	r6, [sp, #8]
   138d0:	ldrd	r8, [sp, #16]
   138d4:	add	sp, sp, #24
   138d8:	pop	{pc}		; (ldr pc, [sp], #4)
   138dc:	andeq	r7, r2, r4, asr r2
   138e0:	mov	r2, r1
   138e4:	mvn	r1, #0
   138e8:	b	13848 <__assert_fail@plt+0x29bc>
   138ec:	mov	r2, #58	; 0x3a
   138f0:	mvn	r1, #0
   138f4:	b	13848 <__assert_fail@plt+0x29bc>
   138f8:	mov	r2, #58	; 0x3a
   138fc:	b	13848 <__assert_fail@plt+0x29bc>
   13900:	strd	r4, [sp, #-20]!	; 0xffffffec
   13904:	strd	r6, [sp, #8]
   13908:	mov	r6, r0
   1390c:	mov	r7, r2
   13910:	str	lr, [sp, #16]
   13914:	sub	sp, sp, #100	; 0x64
   13918:	mov	r0, sp
   1391c:	bl	118b4 <__assert_fail@plt+0xa28>
   13920:	ldrd	r4, [sp, #8]
   13924:	mov	r1, r7
   13928:	mov	r0, r6
   1392c:	add	r3, sp, #48	; 0x30
   13930:	mvn	r2, #0
   13934:	ldrd	r6, [sp]
   13938:	strd	r4, [sp, #56]	; 0x38
   1393c:	ldrd	r4, [sp, #16]
   13940:	strd	r6, [sp, #48]	; 0x30
   13944:	ldrd	r6, [sp, #32]
   13948:	ldr	lr, [sp, #60]	; 0x3c
   1394c:	strd	r4, [sp, #64]	; 0x40
   13950:	ldrd	r4, [sp, #24]
   13954:	mvn	ip, lr
   13958:	and	ip, ip, #67108864	; 0x4000000
   1395c:	strd	r4, [sp, #72]	; 0x48
   13960:	eor	ip, ip, lr
   13964:	ldrd	r4, [sp, #40]	; 0x28
   13968:	str	ip, [sp, #60]	; 0x3c
   1396c:	strd	r6, [sp, #80]	; 0x50
   13970:	strd	r4, [sp, #88]	; 0x58
   13974:	bl	13218 <__assert_fail@plt+0x238c>
   13978:	add	sp, sp, #100	; 0x64
   1397c:	ldrd	r4, [sp]
   13980:	ldrd	r6, [sp, #8]
   13984:	add	sp, sp, #16
   13988:	pop	{pc}		; (ldr pc, [sp], #4)
   1398c:	ldr	ip, [pc, #156]	; 13a30 <__assert_fail@plt+0x2ba4>
   13990:	cmp	r2, #0
   13994:	cmpne	r1, #0
   13998:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1399c:	strd	r6, [sp, #8]
   139a0:	mov	r6, r2
   139a4:	str	r8, [sp, #16]
   139a8:	mov	r8, r3
   139ac:	strd	sl, [sp, #20]
   139b0:	ldrd	r4, [ip]
   139b4:	str	lr, [sp, #28]
   139b8:	sub	sp, sp, #48	; 0x30
   139bc:	mov	lr, #10
   139c0:	ldrd	r2, [ip, #8]
   139c4:	ldrd	sl, [ip, #16]
   139c8:	strd	r4, [sp]
   139cc:	ldrd	r4, [ip, #32]
   139d0:	str	lr, [sp]
   139d4:	strd	r2, [sp, #8]
   139d8:	strd	sl, [sp, #16]
   139dc:	ldrd	r2, [ip, #24]
   139e0:	ldrd	sl, [ip, #40]	; 0x28
   139e4:	strd	r2, [sp, #24]
   139e8:	strd	r4, [sp, #32]
   139ec:	strd	sl, [sp, #40]	; 0x28
   139f0:	beq	13a2c <__assert_fail@plt+0x2ba0>
   139f4:	ldr	r2, [sp, #80]	; 0x50
   139f8:	mov	r7, r1
   139fc:	mov	r3, sp
   13a00:	mov	r1, r8
   13a04:	str	r7, [sp, #40]	; 0x28
   13a08:	str	r6, [sp, #44]	; 0x2c
   13a0c:	bl	13218 <__assert_fail@plt+0x238c>
   13a10:	add	sp, sp, #48	; 0x30
   13a14:	ldrd	r4, [sp]
   13a18:	ldrd	r6, [sp, #8]
   13a1c:	ldr	r8, [sp, #16]
   13a20:	ldrd	sl, [sp, #20]
   13a24:	add	sp, sp, #28
   13a28:	pop	{pc}		; (ldr pc, [sp], #4)
   13a2c:	bl	10e80 <abort@plt>
   13a30:	andeq	r7, r2, r4, asr r2
   13a34:	mvn	ip, #0
   13a38:	push	{lr}		; (str lr, [sp, #-4]!)
   13a3c:	sub	sp, sp, #12
   13a40:	str	ip, [sp]
   13a44:	bl	1398c <__assert_fail@plt+0x2b00>
   13a48:	add	sp, sp, #12
   13a4c:	pop	{pc}		; (ldr pc, [sp], #4)
   13a50:	mvn	ip, #0
   13a54:	push	{lr}		; (str lr, [sp, #-4]!)
   13a58:	sub	sp, sp, #12
   13a5c:	mov	r3, r2
   13a60:	mov	r2, r1
   13a64:	mov	r1, r0
   13a68:	mov	r0, #0
   13a6c:	str	ip, [sp]
   13a70:	bl	1398c <__assert_fail@plt+0x2b00>
   13a74:	add	sp, sp, #12
   13a78:	pop	{pc}		; (ldr pc, [sp], #4)
   13a7c:	push	{lr}		; (str lr, [sp, #-4]!)
   13a80:	sub	sp, sp, #12
   13a84:	str	r3, [sp]
   13a88:	mov	r3, r2
   13a8c:	mov	r2, r1
   13a90:	mov	r1, r0
   13a94:	mov	r0, #0
   13a98:	bl	1398c <__assert_fail@plt+0x2b00>
   13a9c:	add	sp, sp, #12
   13aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   13aa4:	ldr	r3, [pc]	; 13aac <__assert_fail@plt+0x2c20>
   13aa8:	b	13218 <__assert_fail@plt+0x238c>
   13aac:	strdeq	r7, [r2], -r8
   13ab0:	mov	r2, r1
   13ab4:	ldr	r3, [pc, #8]	; 13ac4 <__assert_fail@plt+0x2c38>
   13ab8:	mov	r1, r0
   13abc:	mov	r0, #0
   13ac0:	b	13218 <__assert_fail@plt+0x238c>
   13ac4:	strdeq	r7, [r2], -r8
   13ac8:	ldr	r3, [pc, #4]	; 13ad4 <__assert_fail@plt+0x2c48>
   13acc:	mvn	r2, #0
   13ad0:	b	13218 <__assert_fail@plt+0x238c>
   13ad4:	strdeq	r7, [r2], -r8
   13ad8:	mov	r1, r0
   13adc:	ldr	r3, [pc, #8]	; 13aec <__assert_fail@plt+0x2c60>
   13ae0:	mvn	r2, #0
   13ae4:	mov	r0, #0
   13ae8:	b	13218 <__assert_fail@plt+0x238c>
   13aec:	strdeq	r7, [r2], -r8
   13af0:	cmp	r1, #0
   13af4:	strd	r4, [sp, #-16]!
   13af8:	mov	ip, r3
   13afc:	str	r6, [sp, #8]
   13b00:	mov	r4, r0
   13b04:	str	lr, [sp, #12]
   13b08:	sub	sp, sp, #32
   13b0c:	ldr	r5, [sp, #48]	; 0x30
   13b10:	ldr	r6, [sp, #52]	; 0x34
   13b14:	beq	13c58 <__assert_fail@plt+0x2dcc>
   13b18:	mov	r3, r1
   13b1c:	mov	r1, #1
   13b20:	stm	sp, {r2, ip}
   13b24:	movw	r2, #23548	; 0x5bfc
   13b28:	movt	r2, #1
   13b2c:	bl	10e14 <__fprintf_chk@plt>
   13b30:	mov	r2, #5
   13b34:	movw	r1, #23568	; 0x5c10
   13b38:	movt	r1, #1
   13b3c:	mov	r0, #0
   13b40:	bl	10cd0 <dcgettext@plt>
   13b44:	movw	ip, #2022	; 0x7e6
   13b48:	mov	r3, r0
   13b4c:	mov	r1, #1
   13b50:	movw	r2, #24296	; 0x5ee8
   13b54:	movt	r2, #1
   13b58:	mov	r0, r4
   13b5c:	str	ip, [sp]
   13b60:	bl	10e14 <__fprintf_chk@plt>
   13b64:	mov	r1, r4
   13b68:	mov	r0, #10
   13b6c:	bl	10cc4 <fputc_unlocked@plt>
   13b70:	mov	r2, #5
   13b74:	movw	r1, #23572	; 0x5c14
   13b78:	movt	r1, #1
   13b7c:	mov	r0, #0
   13b80:	bl	10cd0 <dcgettext@plt>
   13b84:	mov	r2, r0
   13b88:	mov	r1, #1
   13b8c:	movw	r3, #23744	; 0x5cc0
   13b90:	movt	r3, #1
   13b94:	mov	r0, r4
   13b98:	bl	10e14 <__fprintf_chk@plt>
   13b9c:	mov	r1, r4
   13ba0:	mov	r0, #10
   13ba4:	bl	10cc4 <fputc_unlocked@plt>
   13ba8:	cmp	r6, #9
   13bac:	ldrls	pc, [pc, r6, lsl #2]
   13bb0:	b	13ec4 <__assert_fail@plt+0x3038>
   13bb4:	andeq	r3, r1, r4, asr #24
   13bb8:	andeq	r3, r1, r4, ror ip
   13bbc:			; <UNDEFINED> instruction: 0x00013cb0
   13bc0:	strdeq	r3, [r1], -r0
   13bc4:	andeq	r3, r1, r8, lsr sp
   13bc8:	andeq	r3, r1, r0, ror sp
   13bcc:			; <UNDEFINED> instruction: 0x00013db8
   13bd0:	andeq	r3, r1, ip, lsl #28
   13bd4:	andeq	r3, r1, r4, ror #28
   13bd8:	ldrdeq	r3, [r1], -ip
   13bdc:	movw	r1, #24048	; 0x5df0
   13be0:	movt	r1, #1
   13be4:	mov	r2, #5
   13be8:	mov	r0, #0
   13bec:	bl	10cd0 <dcgettext@plt>
   13bf0:	ldr	lr, [r5, #4]
   13bf4:	mov	r2, r0
   13bf8:	mov	r1, #1
   13bfc:	mov	r0, r4
   13c00:	ldr	r3, [r5, #8]
   13c04:	ldr	ip, [r5, #32]
   13c08:	str	lr, [sp]
   13c0c:	ldr	lr, [r5, #12]
   13c10:	str	ip, [sp, #28]
   13c14:	ldr	ip, [r5, #28]
   13c18:	str	r3, [sp, #4]
   13c1c:	ldr	r3, [r5, #16]
   13c20:	str	lr, [sp, #8]
   13c24:	ldr	lr, [r5, #20]
   13c28:	str	ip, [sp, #24]
   13c2c:	ldr	ip, [r5, #24]
   13c30:	str	r3, [sp, #12]
   13c34:	ldr	r3, [r5]
   13c38:	str	lr, [sp, #16]
   13c3c:	str	ip, [sp, #20]
   13c40:	bl	10e14 <__fprintf_chk@plt>
   13c44:	add	sp, sp, #32
   13c48:	ldrd	r4, [sp]
   13c4c:	ldr	r6, [sp, #8]
   13c50:	add	sp, sp, #12
   13c54:	pop	{pc}		; (ldr pc, [sp], #4)
   13c58:	mov	r3, r2
   13c5c:	mov	r1, #1
   13c60:	str	ip, [sp]
   13c64:	movw	r2, #23560	; 0x5c08
   13c68:	movt	r2, #1
   13c6c:	bl	10e14 <__fprintf_chk@plt>
   13c70:	b	13b30 <__assert_fail@plt+0x2ca4>
   13c74:	mov	r2, #5
   13c78:	movw	r1, #23780	; 0x5ce4
   13c7c:	movt	r1, #1
   13c80:	mov	r0, #0
   13c84:	bl	10cd0 <dcgettext@plt>
   13c88:	ldr	r3, [r5]
   13c8c:	mov	r2, r0
   13c90:	mov	r1, #1
   13c94:	mov	r0, r4
   13c98:	add	sp, sp, #32
   13c9c:	ldrd	r4, [sp]
   13ca0:	ldr	r6, [sp, #8]
   13ca4:	ldr	lr, [sp, #12]
   13ca8:	add	sp, sp, #16
   13cac:	b	10e14 <__fprintf_chk@plt>
   13cb0:	mov	r2, #5
   13cb4:	movw	r1, #23796	; 0x5cf4
   13cb8:	movt	r1, #1
   13cbc:	mov	r0, #0
   13cc0:	bl	10cd0 <dcgettext@plt>
   13cc4:	ldm	r5, {r3, ip}
   13cc8:	mov	r2, r0
   13ccc:	mov	r1, #1
   13cd0:	mov	r0, r4
   13cd4:	str	ip, [sp, #48]	; 0x30
   13cd8:	add	sp, sp, #32
   13cdc:	ldrd	r4, [sp]
   13ce0:	ldr	r6, [sp, #8]
   13ce4:	ldr	lr, [sp, #12]
   13ce8:	add	sp, sp, #16
   13cec:	b	10e14 <__fprintf_chk@plt>
   13cf0:	mov	r2, #5
   13cf4:	movw	r1, #23820	; 0x5d0c
   13cf8:	movt	r1, #1
   13cfc:	mov	r0, #0
   13d00:	bl	10cd0 <dcgettext@plt>
   13d04:	ldm	r5, {r3, lr}
   13d08:	mov	r2, r0
   13d0c:	mov	r1, #1
   13d10:	mov	r0, r4
   13d14:	ldr	ip, [r5, #8]
   13d18:	str	lr, [sp, #48]	; 0x30
   13d1c:	str	ip, [sp, #52]	; 0x34
   13d20:	add	sp, sp, #32
   13d24:	ldrd	r4, [sp]
   13d28:	ldr	r6, [sp, #8]
   13d2c:	ldr	lr, [sp, #12]
   13d30:	add	sp, sp, #16
   13d34:	b	10e14 <__fprintf_chk@plt>
   13d38:	mov	r2, #5
   13d3c:	movw	r1, #23848	; 0x5d28
   13d40:	movt	r1, #1
   13d44:	mov	r0, #0
   13d48:	bl	10cd0 <dcgettext@plt>
   13d4c:	ldmib	r5, {r3, ip, lr}
   13d50:	mov	r2, r0
   13d54:	mov	r1, #1
   13d58:	mov	r0, r4
   13d5c:	str	r3, [sp]
   13d60:	ldr	r3, [r5]
   13d64:	stmib	sp, {ip, lr}
   13d68:	bl	10e14 <__fprintf_chk@plt>
   13d6c:	b	13c44 <__assert_fail@plt+0x2db8>
   13d70:	mov	r2, #5
   13d74:	movw	r1, #23880	; 0x5d48
   13d78:	movt	r1, #1
   13d7c:	mov	r0, #0
   13d80:	bl	10cd0 <dcgettext@plt>
   13d84:	ldmib	r5, {ip, lr}
   13d88:	mov	r2, r0
   13d8c:	mov	r1, #1
   13d90:	mov	r0, r4
   13d94:	ldr	r3, [r5, #16]
   13d98:	str	ip, [sp]
   13d9c:	ldr	ip, [r5, #12]
   13da0:	str	r3, [sp, #12]
   13da4:	ldr	r3, [r5]
   13da8:	str	lr, [sp, #4]
   13dac:	str	ip, [sp, #8]
   13db0:	bl	10e14 <__fprintf_chk@plt>
   13db4:	b	13c44 <__assert_fail@plt+0x2db8>
   13db8:	mov	r2, #5
   13dbc:	movw	r1, #23916	; 0x5d6c
   13dc0:	movt	r1, #1
   13dc4:	mov	r0, #0
   13dc8:	bl	10cd0 <dcgettext@plt>
   13dcc:	ldr	lr, [r5, #4]
   13dd0:	mov	r2, r0
   13dd4:	mov	r1, #1
   13dd8:	mov	r0, r4
   13ddc:	ldr	r3, [r5, #8]
   13de0:	ldr	ip, [r5, #20]
   13de4:	str	lr, [sp]
   13de8:	ldr	lr, [r5, #12]
   13dec:	str	ip, [sp, #16]
   13df0:	ldr	ip, [r5, #16]
   13df4:	str	r3, [sp, #4]
   13df8:	ldr	r3, [r5]
   13dfc:	str	lr, [sp, #8]
   13e00:	str	ip, [sp, #12]
   13e04:	bl	10e14 <__fprintf_chk@plt>
   13e08:	b	13c44 <__assert_fail@plt+0x2db8>
   13e0c:	mov	r2, #5
   13e10:	movw	r1, #23956	; 0x5d94
   13e14:	movt	r1, #1
   13e18:	mov	r0, #0
   13e1c:	bl	10cd0 <dcgettext@plt>
   13e20:	ldmib	r5, {r3, ip}
   13e24:	mov	r2, r0
   13e28:	mov	r1, #1
   13e2c:	mov	r0, r4
   13e30:	ldr	lr, [r5, #24]
   13e34:	str	r3, [sp]
   13e38:	ldr	r3, [r5, #12]
   13e3c:	str	lr, [sp, #20]
   13e40:	ldr	lr, [r5, #20]
   13e44:	str	ip, [sp, #4]
   13e48:	ldr	ip, [r5, #16]
   13e4c:	str	r3, [sp, #8]
   13e50:	ldr	r3, [r5]
   13e54:	str	ip, [sp, #12]
   13e58:	str	lr, [sp, #16]
   13e5c:	bl	10e14 <__fprintf_chk@plt>
   13e60:	b	13c44 <__assert_fail@plt+0x2db8>
   13e64:	mov	r2, #5
   13e68:	movw	r1, #24000	; 0x5dc0
   13e6c:	movt	r1, #1
   13e70:	mov	r0, #0
   13e74:	bl	10cd0 <dcgettext@plt>
   13e78:	ldmib	r5, {ip, lr}
   13e7c:	mov	r2, r0
   13e80:	mov	r1, #1
   13e84:	mov	r0, r4
   13e88:	ldr	r3, [r5, #28]
   13e8c:	str	ip, [sp]
   13e90:	ldr	ip, [r5, #12]
   13e94:	str	r3, [sp, #24]
   13e98:	ldr	r3, [r5, #24]
   13e9c:	str	lr, [sp, #4]
   13ea0:	ldr	lr, [r5, #16]
   13ea4:	str	ip, [sp, #8]
   13ea8:	ldr	ip, [r5, #20]
   13eac:	str	r3, [sp, #20]
   13eb0:	ldr	r3, [r5]
   13eb4:	str	lr, [sp, #12]
   13eb8:	str	ip, [sp, #16]
   13ebc:	bl	10e14 <__fprintf_chk@plt>
   13ec0:	b	13c44 <__assert_fail@plt+0x2db8>
   13ec4:	movw	r1, #24100	; 0x5e24
   13ec8:	movt	r1, #1
   13ecc:	b	13be4 <__assert_fail@plt+0x2d58>
   13ed0:	strd	r4, [sp, #-12]!
   13ed4:	str	lr, [sp, #8]
   13ed8:	sub	sp, sp, #12
   13edc:	ldr	r5, [sp, #24]
   13ee0:	ldr	ip, [r5]
   13ee4:	cmp	ip, #0
   13ee8:	beq	13f04 <__assert_fail@plt+0x3078>
   13eec:	mov	lr, r5
   13ef0:	mov	ip, #0
   13ef4:	ldr	r4, [lr, #4]!
   13ef8:	add	ip, ip, #1
   13efc:	cmp	r4, #0
   13f00:	bne	13ef4 <__assert_fail@plt+0x3068>
   13f04:	stm	sp, {r5, ip}
   13f08:	bl	13af0 <__assert_fail@plt+0x2c64>
   13f0c:	add	sp, sp, #12
   13f10:	ldrd	r4, [sp]
   13f14:	add	sp, sp, #8
   13f18:	pop	{pc}		; (ldr pc, [sp], #4)
   13f1c:	strd	r4, [sp, #-16]!
   13f20:	mov	ip, #0
   13f24:	str	r6, [sp, #8]
   13f28:	str	lr, [sp, #12]
   13f2c:	sub	sp, sp, #48	; 0x30
   13f30:	ldr	r5, [sp, #64]	; 0x40
   13f34:	add	r6, sp, #8
   13f38:	mov	r4, r6
   13f3c:	ldr	lr, [r5], #4
   13f40:	cmp	lr, #0
   13f44:	str	lr, [r4], #4
   13f48:	beq	13f58 <__assert_fail@plt+0x30cc>
   13f4c:	add	ip, ip, #1
   13f50:	cmp	ip, #10
   13f54:	bne	13f3c <__assert_fail@plt+0x30b0>
   13f58:	stm	sp, {r6, ip}
   13f5c:	bl	13af0 <__assert_fail@plt+0x2c64>
   13f60:	add	sp, sp, #48	; 0x30
   13f64:	ldrd	r4, [sp]
   13f68:	ldr	r6, [sp, #8]
   13f6c:	add	sp, sp, #12
   13f70:	pop	{pc}		; (ldr pc, [sp], #4)
   13f74:	push	{r3}		; (str r3, [sp, #-4]!)
   13f78:	mov	ip, #0
   13f7c:	strd	r4, [sp, #-12]!
   13f80:	str	lr, [sp, #8]
   13f84:	sub	sp, sp, #56	; 0x38
   13f88:	add	r3, sp, #72	; 0x48
   13f8c:	add	r5, sp, #16
   13f90:	mov	r4, r3
   13f94:	mov	lr, r5
   13f98:	str	r3, [sp, #12]
   13f9c:	ldr	r3, [r4], #4
   13fa0:	cmp	r3, #0
   13fa4:	str	r3, [lr], #4
   13fa8:	beq	13fb8 <__assert_fail@plt+0x312c>
   13fac:	add	ip, ip, #1
   13fb0:	cmp	ip, #10
   13fb4:	bne	13f9c <__assert_fail@plt+0x3110>
   13fb8:	ldr	r3, [sp, #68]	; 0x44
   13fbc:	stm	sp, {r5, ip}
   13fc0:	bl	13af0 <__assert_fail@plt+0x2c64>
   13fc4:	add	sp, sp, #56	; 0x38
   13fc8:	ldrd	r4, [sp]
   13fcc:	ldr	lr, [sp, #8]
   13fd0:	add	sp, sp, #12
   13fd4:	add	sp, sp, #4
   13fd8:	bx	lr
   13fdc:	movw	r3, #28988	; 0x713c
   13fe0:	movt	r3, #2
   13fe4:	str	r4, [sp, #-8]!
   13fe8:	mov	r0, #10
   13fec:	ldr	r1, [r3]
   13ff0:	str	lr, [sp, #4]
   13ff4:	bl	10cc4 <fputc_unlocked@plt>
   13ff8:	mov	r2, #5
   13ffc:	movw	r1, #24160	; 0x5e60
   14000:	movt	r1, #1
   14004:	mov	r0, #0
   14008:	bl	10cd0 <dcgettext@plt>
   1400c:	mov	r1, r0
   14010:	movw	r2, #24180	; 0x5e74
   14014:	movt	r2, #1
   14018:	mov	r0, #1
   1401c:	bl	10dfc <__printf_chk@plt>
   14020:	mov	r2, #5
   14024:	movw	r1, #24204	; 0x5e8c
   14028:	movt	r1, #1
   1402c:	mov	r0, #0
   14030:	bl	10cd0 <dcgettext@plt>
   14034:	mov	r1, r0
   14038:	movw	r3, #22760	; 0x58e8
   1403c:	movt	r3, #1
   14040:	movw	r2, #22800	; 0x5910
   14044:	movt	r2, #1
   14048:	mov	r0, #1
   1404c:	bl	10dfc <__printf_chk@plt>
   14050:	mov	r2, #5
   14054:	movw	r1, #24224	; 0x5ea0
   14058:	movt	r1, #1
   1405c:	mov	r0, #0
   14060:	bl	10cd0 <dcgettext@plt>
   14064:	mov	r1, r0
   14068:	movw	r2, #24264	; 0x5ec8
   1406c:	movt	r2, #1
   14070:	mov	r0, #1
   14074:	ldr	r4, [sp]
   14078:	ldr	lr, [sp, #4]
   1407c:	add	sp, sp, #8
   14080:	b	10dfc <__printf_chk@plt>
   14084:	str	r4, [sp, #-8]!
   14088:	str	lr, [sp, #4]
   1408c:	bl	150a8 <__assert_fail@plt+0x421c>
   14090:	cmp	r0, #0
   14094:	beq	140a4 <__assert_fail@plt+0x3218>
   14098:	ldr	r4, [sp]
   1409c:	add	sp, sp, #4
   140a0:	pop	{pc}		; (ldr pc, [sp], #4)
   140a4:	bl	144fc <__assert_fail@plt+0x3670>
   140a8:	str	r4, [sp, #-8]!
   140ac:	str	lr, [sp, #4]
   140b0:	bl	150a8 <__assert_fail@plt+0x421c>
   140b4:	cmp	r0, #0
   140b8:	beq	140c8 <__assert_fail@plt+0x323c>
   140bc:	ldr	r4, [sp]
   140c0:	add	sp, sp, #4
   140c4:	pop	{pc}		; (ldr pc, [sp], #4)
   140c8:	bl	144fc <__assert_fail@plt+0x3670>
   140cc:	str	r4, [sp, #-8]!
   140d0:	str	lr, [sp, #4]
   140d4:	bl	150a8 <__assert_fail@plt+0x421c>
   140d8:	cmp	r0, #0
   140dc:	beq	140ec <__assert_fail@plt+0x3260>
   140e0:	ldr	r4, [sp]
   140e4:	add	sp, sp, #4
   140e8:	pop	{pc}		; (ldr pc, [sp], #4)
   140ec:	bl	144fc <__assert_fail@plt+0x3670>
   140f0:	strd	r4, [sp, #-16]!
   140f4:	mov	r5, r0
   140f8:	mov	r4, r1
   140fc:	str	r6, [sp, #8]
   14100:	str	lr, [sp, #12]
   14104:	bl	150e4 <__assert_fail@plt+0x4258>
   14108:	cmp	r0, #0
   1410c:	beq	14120 <__assert_fail@plt+0x3294>
   14110:	ldrd	r4, [sp]
   14114:	ldr	r6, [sp, #8]
   14118:	add	sp, sp, #12
   1411c:	pop	{pc}		; (ldr pc, [sp], #4)
   14120:	adds	r4, r4, #0
   14124:	movne	r4, #1
   14128:	cmp	r5, #0
   1412c:	moveq	r4, #1
   14130:	cmp	r4, #0
   14134:	beq	14110 <__assert_fail@plt+0x3284>
   14138:	bl	144fc <__assert_fail@plt+0x3670>
   1413c:	cmp	r1, #0
   14140:	orreq	r1, r1, #1
   14144:	str	r4, [sp, #-8]!
   14148:	str	lr, [sp, #4]
   1414c:	bl	150e4 <__assert_fail@plt+0x4258>
   14150:	cmp	r0, #0
   14154:	beq	14164 <__assert_fail@plt+0x32d8>
   14158:	ldr	r4, [sp]
   1415c:	add	sp, sp, #4
   14160:	pop	{pc}		; (ldr pc, [sp], #4)
   14164:	bl	144fc <__assert_fail@plt+0x3670>
   14168:	strd	r4, [sp, #-16]!
   1416c:	mov	r4, r0
   14170:	mov	r5, r2
   14174:	str	r6, [sp, #8]
   14178:	mov	r6, r1
   1417c:	str	lr, [sp, #12]
   14180:	bl	154c4 <__assert_fail@plt+0x4638>
   14184:	cmp	r0, #0
   14188:	beq	1419c <__assert_fail@plt+0x3310>
   1418c:	ldrd	r4, [sp]
   14190:	ldr	r6, [sp, #8]
   14194:	add	sp, sp, #12
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	cmp	r4, #0
   141a0:	beq	141b0 <__assert_fail@plt+0x3324>
   141a4:	cmp	r6, #0
   141a8:	cmpne	r5, #0
   141ac:	beq	1418c <__assert_fail@plt+0x3300>
   141b0:	bl	144fc <__assert_fail@plt+0x3670>
   141b4:	b	14168 <__assert_fail@plt+0x32dc>
   141b8:	cmp	r2, #0
   141bc:	cmpne	r1, #0
   141c0:	str	r4, [sp, #-8]!
   141c4:	moveq	r2, #1
   141c8:	str	lr, [sp, #4]
   141cc:	moveq	r1, r2
   141d0:	bl	154c4 <__assert_fail@plt+0x4638>
   141d4:	cmp	r0, #0
   141d8:	beq	141e8 <__assert_fail@plt+0x335c>
   141dc:	ldr	r4, [sp]
   141e0:	add	sp, sp, #4
   141e4:	pop	{pc}		; (ldr pc, [sp], #4)
   141e8:	bl	144fc <__assert_fail@plt+0x3670>
   141ec:	mov	r2, r1
   141f0:	mov	r1, r0
   141f4:	mov	r0, #0
   141f8:	b	14168 <__assert_fail@plt+0x32dc>
   141fc:	mov	r2, r1
   14200:	mov	r1, r0
   14204:	mov	r0, #0
   14208:	b	141b8 <__assert_fail@plt+0x332c>
   1420c:	cmp	r0, #0
   14210:	strd	r4, [sp, #-16]!
   14214:	mov	r5, r1
   14218:	ldr	r4, [r1]
   1421c:	str	r6, [sp, #8]
   14220:	str	lr, [sp, #12]
   14224:	beq	14254 <__assert_fail@plt+0x33c8>
   14228:	lsr	r3, r4, #1
   1422c:	add	r3, r3, #1
   14230:	adds	r4, r4, r3
   14234:	bcs	14270 <__assert_fail@plt+0x33e4>
   14238:	mov	r1, r4
   1423c:	bl	14168 <__assert_fail@plt+0x32dc>
   14240:	ldr	r6, [sp, #8]
   14244:	str	r4, [r5]
   14248:	ldrd	r4, [sp]
   1424c:	add	sp, sp, #12
   14250:	pop	{pc}		; (ldr pc, [sp], #4)
   14254:	cmp	r4, #0
   14258:	bne	14238 <__assert_fail@plt+0x33ac>
   1425c:	mov	r4, #64	; 0x40
   14260:	udiv	r4, r4, r2
   14264:	cmp	r2, #64	; 0x40
   14268:	addhi	r4, r4, #1
   1426c:	b	14238 <__assert_fail@plt+0x33ac>
   14270:	bl	144fc <__assert_fail@plt+0x3670>
   14274:	mov	r2, #1
   14278:	b	1420c <__assert_fail@plt+0x3380>
   1427c:	ldr	ip, [r1]
   14280:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14284:	mov	r5, r1
   14288:	strd	r6, [sp, #8]
   1428c:	str	lr, [sp, #28]
   14290:	strd	r8, [sp, #16]
   14294:	asr	lr, ip, #1
   14298:	ldr	r8, [sp, #32]
   1429c:	str	sl, [sp, #24]
   142a0:	adds	r4, ip, lr
   142a4:	mvn	lr, r3
   142a8:	lsr	lr, lr, #31
   142ac:	mvnvs	r4, #-2147483648	; 0x80000000
   142b0:	cmp	r3, r4
   142b4:	movge	r1, #0
   142b8:	andlt	r1, lr, #1
   142bc:	cmp	r1, #0
   142c0:	movne	r4, r3
   142c4:	smull	r6, r7, r4, r8
   142c8:	cmp	r7, r6, asr #31
   142cc:	bne	14354 <__assert_fail@plt+0x34c8>
   142d0:	cmp	r6, #63	; 0x3f
   142d4:	mov	r1, r6
   142d8:	ble	1433c <__assert_fail@plt+0x34b0>
   142dc:	cmp	r0, #0
   142e0:	sub	r6, r4, ip
   142e4:	streq	r0, [r5]
   142e8:	cmp	r6, r2
   142ec:	bge	1431c <__assert_fail@plt+0x3490>
   142f0:	adds	r4, ip, r2
   142f4:	bvs	14350 <__assert_fail@plt+0x34c4>
   142f8:	cmp	r4, r3
   142fc:	movle	r3, #0
   14300:	andgt	r3, lr, #1
   14304:	cmp	r3, #0
   14308:	bne	14350 <__assert_fail@plt+0x34c4>
   1430c:	smull	r8, r9, r4, r8
   14310:	cmp	r9, r8, asr #31
   14314:	mov	r1, r8
   14318:	bne	14350 <__assert_fail@plt+0x34c4>
   1431c:	bl	140f0 <__assert_fail@plt+0x3264>
   14320:	ldrd	r6, [sp, #8]
   14324:	ldrd	r8, [sp, #16]
   14328:	ldr	sl, [sp, #24]
   1432c:	str	r4, [r5]
   14330:	ldrd	r4, [sp]
   14334:	add	sp, sp, #28
   14338:	pop	{pc}		; (ldr pc, [sp], #4)
   1433c:	mov	r6, #64	; 0x40
   14340:	sdiv	r4, r6, r8
   14344:	mls	r1, r8, r4, r6
   14348:	sub	r1, r6, r1
   1434c:	b	142dc <__assert_fail@plt+0x3450>
   14350:	bl	144fc <__assert_fail@plt+0x3670>
   14354:	mvn	r6, #-2147483648	; 0x80000000
   14358:	b	14340 <__assert_fail@plt+0x34b4>
   1435c:	mov	r1, #1
   14360:	str	r4, [sp, #-8]!
   14364:	str	lr, [sp, #4]
   14368:	bl	15034 <__assert_fail@plt+0x41a8>
   1436c:	cmp	r0, #0
   14370:	beq	14380 <__assert_fail@plt+0x34f4>
   14374:	ldr	r4, [sp]
   14378:	add	sp, sp, #4
   1437c:	pop	{pc}		; (ldr pc, [sp], #4)
   14380:	bl	144fc <__assert_fail@plt+0x3670>
   14384:	mov	r1, #1
   14388:	str	r4, [sp, #-8]!
   1438c:	str	lr, [sp, #4]
   14390:	bl	15034 <__assert_fail@plt+0x41a8>
   14394:	cmp	r0, #0
   14398:	beq	143a8 <__assert_fail@plt+0x351c>
   1439c:	ldr	r4, [sp]
   143a0:	add	sp, sp, #4
   143a4:	pop	{pc}		; (ldr pc, [sp], #4)
   143a8:	bl	144fc <__assert_fail@plt+0x3670>
   143ac:	str	r4, [sp, #-8]!
   143b0:	str	lr, [sp, #4]
   143b4:	bl	15034 <__assert_fail@plt+0x41a8>
   143b8:	cmp	r0, #0
   143bc:	beq	143cc <__assert_fail@plt+0x3540>
   143c0:	ldr	r4, [sp]
   143c4:	add	sp, sp, #4
   143c8:	pop	{pc}		; (ldr pc, [sp], #4)
   143cc:	bl	144fc <__assert_fail@plt+0x3670>
   143d0:	str	r4, [sp, #-8]!
   143d4:	str	lr, [sp, #4]
   143d8:	bl	15034 <__assert_fail@plt+0x41a8>
   143dc:	cmp	r0, #0
   143e0:	beq	143f0 <__assert_fail@plt+0x3564>
   143e4:	ldr	r4, [sp]
   143e8:	add	sp, sp, #4
   143ec:	pop	{pc}		; (ldr pc, [sp], #4)
   143f0:	bl	144fc <__assert_fail@plt+0x3670>
   143f4:	strd	r4, [sp, #-16]!
   143f8:	mov	r4, r1
   143fc:	str	r6, [sp, #8]
   14400:	mov	r6, r0
   14404:	mov	r0, r1
   14408:	str	lr, [sp, #12]
   1440c:	bl	150a8 <__assert_fail@plt+0x421c>
   14410:	subs	r5, r0, #0
   14414:	beq	14438 <__assert_fail@plt+0x35ac>
   14418:	mov	r2, r4
   1441c:	mov	r1, r6
   14420:	bl	10c88 <memcpy@plt>
   14424:	mov	r0, r5
   14428:	ldrd	r4, [sp]
   1442c:	ldr	r6, [sp, #8]
   14430:	add	sp, sp, #12
   14434:	pop	{pc}		; (ldr pc, [sp], #4)
   14438:	bl	144fc <__assert_fail@plt+0x3670>
   1443c:	strd	r4, [sp, #-16]!
   14440:	mov	r4, r1
   14444:	str	r6, [sp, #8]
   14448:	mov	r6, r0
   1444c:	mov	r0, r1
   14450:	str	lr, [sp, #12]
   14454:	bl	150a8 <__assert_fail@plt+0x421c>
   14458:	subs	r5, r0, #0
   1445c:	beq	14480 <__assert_fail@plt+0x35f4>
   14460:	mov	r2, r4
   14464:	mov	r1, r6
   14468:	bl	10c88 <memcpy@plt>
   1446c:	mov	r0, r5
   14470:	ldrd	r4, [sp]
   14474:	ldr	r6, [sp, #8]
   14478:	add	sp, sp, #12
   1447c:	pop	{pc}		; (ldr pc, [sp], #4)
   14480:	bl	144fc <__assert_fail@plt+0x3670>
   14484:	strd	r4, [sp, #-16]!
   14488:	mov	r4, r1
   1448c:	str	r6, [sp, #8]
   14490:	mov	r6, r0
   14494:	add	r0, r1, #1
   14498:	str	lr, [sp, #12]
   1449c:	bl	150a8 <__assert_fail@plt+0x421c>
   144a0:	subs	r5, r0, #0
   144a4:	beq	144d0 <__assert_fail@plt+0x3644>
   144a8:	mov	r3, #0
   144ac:	mov	r1, r6
   144b0:	mov	r2, r4
   144b4:	strb	r3, [r5, r4]
   144b8:	bl	10c88 <memcpy@plt>
   144bc:	mov	r0, r5
   144c0:	ldrd	r4, [sp]
   144c4:	ldr	r6, [sp, #8]
   144c8:	add	sp, sp, #12
   144cc:	pop	{pc}		; (ldr pc, [sp], #4)
   144d0:	bl	144fc <__assert_fail@plt+0x3670>
   144d4:	str	r4, [sp, #-8]!
   144d8:	mov	r4, r0
   144dc:	str	lr, [sp, #4]
   144e0:	bl	10dc0 <strlen@plt>
   144e4:	add	r1, r0, #1
   144e8:	mov	r0, r4
   144ec:	ldr	r4, [sp]
   144f0:	ldr	lr, [sp, #4]
   144f4:	add	sp, sp, #8
   144f8:	b	143f4 <__assert_fail@plt+0x3568>
   144fc:	movw	r3, #28900	; 0x70e4
   14500:	movt	r3, #2
   14504:	str	r4, [sp, #-8]!
   14508:	ldr	r4, [r3]
   1450c:	mov	r2, #5
   14510:	movw	r1, #24344	; 0x5f18
   14514:	movt	r1, #1
   14518:	mov	r0, #0
   1451c:	str	lr, [sp, #4]
   14520:	bl	10cd0 <dcgettext@plt>
   14524:	mov	r3, r0
   14528:	movw	r2, #23228	; 0x5abc
   1452c:	movt	r2, #1
   14530:	mov	r1, #0
   14534:	mov	r0, r4
   14538:	bl	10d48 <error@plt>
   1453c:	bl	10e80 <abort@plt>
   14540:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14544:	strd	r6, [sp, #8]
   14548:	mov	r6, r2
   1454c:	mov	r7, r3
   14550:	str	r8, [sp, #16]
   14554:	mov	r2, r1
   14558:	mov	r1, #0
   1455c:	str	lr, [sp, #20]
   14560:	sub	sp, sp, #16
   14564:	mov	r8, r0
   14568:	ldr	ip, [sp, #48]	; 0x30
   1456c:	add	r3, sp, #8
   14570:	str	ip, [sp]
   14574:	bl	1468c <__assert_fail@plt+0x3800>
   14578:	subs	r4, r0, #0
   1457c:	bne	145cc <__assert_fail@plt+0x3740>
   14580:	ldrd	r4, [sp, #8]
   14584:	ldrd	r0, [sp, #40]	; 0x28
   14588:	cmp	r5, r7
   1458c:	cmpeq	r4, r6
   14590:	movcc	r3, #1
   14594:	movcs	r3, #0
   14598:	cmp	r5, r1
   1459c:	cmpeq	r4, r0
   145a0:	orrhi	r3, r3, #1
   145a4:	cmp	r3, #0
   145a8:	bne	1464c <__assert_fail@plt+0x37c0>
   145ac:	mov	r0, r4
   145b0:	mov	r1, r5
   145b4:	add	sp, sp, #16
   145b8:	ldrd	r4, [sp]
   145bc:	ldrd	r6, [sp, #8]
   145c0:	ldr	r8, [sp, #16]
   145c4:	add	sp, sp, #20
   145c8:	pop	{pc}		; (ldr pc, [sp], #4)
   145cc:	bl	10dd8 <__errno_location@plt>
   145d0:	cmp	r4, #1
   145d4:	moveq	r3, #75	; 0x4b
   145d8:	moveq	r4, r3
   145dc:	streq	r3, [r0]
   145e0:	beq	14634 <__assert_fail@plt+0x37a8>
   145e4:	cmp	r4, #3
   145e8:	beq	14628 <__assert_fail@plt+0x379c>
   145ec:	ldr	r3, [sp, #56]	; 0x38
   145f0:	ldr	r4, [r0]
   145f4:	cmp	r3, #0
   145f8:	beq	14640 <__assert_fail@plt+0x37b4>
   145fc:	cmp	r4, #22
   14600:	moveq	r4, #0
   14604:	mov	r0, r8
   14608:	bl	13ad8 <__assert_fail@plt+0x2c4c>
   1460c:	movw	r2, #23224	; 0x5ab8
   14610:	movt	r2, #1
   14614:	str	r0, [sp]
   14618:	mov	r1, r4
   1461c:	ldr	r3, [sp, #52]	; 0x34
   14620:	ldr	r0, [sp, #56]	; 0x38
   14624:	bl	10d48 <error@plt>
   14628:	mov	r3, #0
   1462c:	mov	r4, r3
   14630:	str	r3, [r0]
   14634:	ldr	r3, [sp, #56]	; 0x38
   14638:	cmp	r3, #0
   1463c:	bne	14604 <__assert_fail@plt+0x3778>
   14640:	mov	r3, #1
   14644:	str	r3, [sp, #56]	; 0x38
   14648:	b	145fc <__assert_fail@plt+0x3770>
   1464c:	bl	10dd8 <__errno_location@plt>
   14650:	mov	r3, #0
   14654:	mvn	r2, #-1073741824	; 0xc0000000
   14658:	cmp	r5, r3
   1465c:	cmpeq	r4, r2
   14660:	movhi	r3, #75	; 0x4b
   14664:	movls	r3, #34	; 0x22
   14668:	mov	r4, r3
   1466c:	str	r3, [r0]
   14670:	ldr	r3, [sp, #56]	; 0x38
   14674:	cmp	r3, #0
   14678:	moveq	r3, #1
   1467c:	str	r3, [sp, #56]	; 0x38
   14680:	b	14604 <__assert_fail@plt+0x3778>
   14684:	mov	r1, #10
   14688:	b	14540 <__assert_fail@plt+0x36b4>
   1468c:	cmp	r2, #36	; 0x24
   14690:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14694:	strd	r6, [sp, #8]
   14698:	strd	r8, [sp, #16]
   1469c:	strd	sl, [sp, #24]
   146a0:	str	lr, [sp, #32]
   146a4:	sub	sp, sp, #36	; 0x24
   146a8:	bhi	14f38 <__assert_fail@plt+0x40ac>
   146ac:	cmp	r1, #0
   146b0:	mov	r8, r2
   146b4:	mov	r6, r0
   146b8:	mov	r5, r1
   146bc:	mov	sl, r3
   146c0:	addeq	r5, sp, #28
   146c4:	bl	10dd8 <__errno_location@plt>
   146c8:	mov	r3, #0
   146cc:	mov	r7, r0
   146d0:	str	r3, [r0]
   146d4:	bl	10d9c <__ctype_b_loc@plt>
   146d8:	ldrb	r3, [r6]
   146dc:	mov	r2, r6
   146e0:	ldr	r0, [r0]
   146e4:	b	146ec <__assert_fail@plt+0x3860>
   146e8:	ldrb	r3, [r2, #1]!
   146ec:	lsl	r1, r3, #1
   146f0:	ldrh	r4, [r0, r1]
   146f4:	ands	r4, r4, #8192	; 0x2000
   146f8:	bne	146e8 <__assert_fail@plt+0x385c>
   146fc:	cmp	r3, #45	; 0x2d
   14700:	beq	147a0 <__assert_fail@plt+0x3914>
   14704:	mov	r2, r8
   14708:	mov	r3, r4
   1470c:	mov	r1, r5
   14710:	mov	r0, r6
   14714:	bl	10c94 <__strtoull_internal@plt>
   14718:	ldr	fp, [r5]
   1471c:	mov	r9, r0
   14720:	mov	r8, r1
   14724:	cmp	fp, r6
   14728:	beq	14788 <__assert_fail@plt+0x38fc>
   1472c:	ldr	r4, [r7]
   14730:	cmp	r4, #0
   14734:	bne	14778 <__assert_fail@plt+0x38ec>
   14738:	ldr	r3, [sp, #72]	; 0x48
   1473c:	cmp	r3, #0
   14740:	beq	14750 <__assert_fail@plt+0x38c4>
   14744:	ldrb	r6, [fp]
   14748:	cmp	r6, #0
   1474c:	bne	14a90 <__assert_fail@plt+0x3c04>
   14750:	str	r9, [sl]
   14754:	str	r8, [sl, #4]
   14758:	mov	r0, r4
   1475c:	add	sp, sp, #36	; 0x24
   14760:	ldrd	r4, [sp]
   14764:	ldrd	r6, [sp, #8]
   14768:	ldrd	r8, [sp, #16]
   1476c:	ldrd	sl, [sp, #24]
   14770:	add	sp, sp, #32
   14774:	pop	{pc}		; (ldr pc, [sp], #4)
   14778:	cmp	r4, #34	; 0x22
   1477c:	bne	147a0 <__assert_fail@plt+0x3914>
   14780:	mov	r4, #1
   14784:	b	14738 <__assert_fail@plt+0x38ac>
   14788:	ldr	r3, [sp, #72]	; 0x48
   1478c:	cmp	r3, #0
   14790:	beq	147a0 <__assert_fail@plt+0x3914>
   14794:	ldrb	r6, [r6]
   14798:	cmp	r6, #0
   1479c:	bne	147a8 <__assert_fail@plt+0x391c>
   147a0:	mov	r4, #4
   147a4:	b	14758 <__assert_fail@plt+0x38cc>
   147a8:	mov	r1, r6
   147ac:	mov	r0, r3
   147b0:	bl	10dcc <strchr@plt>
   147b4:	cmp	r0, #0
   147b8:	movne	r9, #1
   147bc:	movne	r8, #0
   147c0:	beq	147a0 <__assert_fail@plt+0x3914>
   147c4:	sub	r3, r6, #69	; 0x45
   147c8:	cmp	r3, #47	; 0x2f
   147cc:	ldrls	pc, [pc, r3, lsl #2]
   147d0:	b	148d8 <__assert_fail@plt+0x3a4c>
   147d4:	muleq	r1, r4, r8
   147d8:	ldrdeq	r4, [r1], -r8
   147dc:	muleq	r1, r4, r8
   147e0:	ldrdeq	r4, [r1], -r8
   147e4:	ldrdeq	r4, [r1], -r8
   147e8:	ldrdeq	r4, [r1], -r8
   147ec:	muleq	r1, r4, r8
   147f0:	ldrdeq	r4, [r1], -r8
   147f4:	muleq	r1, r4, r8
   147f8:	ldrdeq	r4, [r1], -r8
   147fc:	ldrdeq	r4, [r1], -r8
   14800:	muleq	r1, r4, r8
   14804:	ldrdeq	r4, [r1], -r8
   14808:	ldrdeq	r4, [r1], -r8
   1480c:	ldrdeq	r4, [r1], -r8
   14810:	muleq	r1, r4, r8
   14814:	ldrdeq	r4, [r1], -r8
   14818:	ldrdeq	r4, [r1], -r8
   1481c:	ldrdeq	r4, [r1], -r8
   14820:	ldrdeq	r4, [r1], -r8
   14824:	muleq	r1, r4, r8
   14828:	muleq	r1, r4, r8
   1482c:	ldrdeq	r4, [r1], -r8
   14830:	ldrdeq	r4, [r1], -r8
   14834:	ldrdeq	r4, [r1], -r8
   14838:	ldrdeq	r4, [r1], -r8
   1483c:	ldrdeq	r4, [r1], -r8
   14840:	ldrdeq	r4, [r1], -r8
   14844:	ldrdeq	r4, [r1], -r8
   14848:	ldrdeq	r4, [r1], -r8
   1484c:	ldrdeq	r4, [r1], -r8
   14850:	ldrdeq	r4, [r1], -r8
   14854:	ldrdeq	r4, [r1], -r8
   14858:	ldrdeq	r4, [r1], -r8
   1485c:	muleq	r1, r4, r8
   14860:	ldrdeq	r4, [r1], -r8
   14864:	ldrdeq	r4, [r1], -r8
   14868:	ldrdeq	r4, [r1], -r8
   1486c:	muleq	r1, r4, r8
   14870:	ldrdeq	r4, [r1], -r8
   14874:	muleq	r1, r4, r8
   14878:	ldrdeq	r4, [r1], -r8
   1487c:	ldrdeq	r4, [r1], -r8
   14880:	ldrdeq	r4, [r1], -r8
   14884:	ldrdeq	r4, [r1], -r8
   14888:	ldrdeq	r4, [r1], -r8
   1488c:	ldrdeq	r4, [r1], -r8
   14890:	muleq	r1, r4, r8
   14894:	mov	r1, #48	; 0x30
   14898:	ldr	r0, [sp, #72]	; 0x48
   1489c:	bl	10dcc <strchr@plt>
   148a0:	cmp	r0, #0
   148a4:	beq	148d8 <__assert_fail@plt+0x3a4c>
   148a8:	ldrb	r3, [fp, #1]
   148ac:	cmp	r3, #68	; 0x44
   148b0:	beq	14e04 <__assert_fail@plt+0x3f78>
   148b4:	cmp	r3, #105	; 0x69
   148b8:	beq	14aa8 <__assert_fail@plt+0x3c1c>
   148bc:	cmp	r3, #66	; 0x42
   148c0:	moveq	r3, #2
   148c4:	movne	r3, #1
   148c8:	moveq	r7, #1000	; 0x3e8
   148cc:	movne	r7, #1024	; 0x400
   148d0:	str	r3, [sp, #4]
   148d4:	b	148e4 <__assert_fail@plt+0x3a58>
   148d8:	mov	r3, #1
   148dc:	mov	r7, #1024	; 0x400
   148e0:	str	r3, [sp, #4]
   148e4:	sub	r6, r6, #66	; 0x42
   148e8:	cmp	r6, #53	; 0x35
   148ec:	ldrls	pc, [pc, r6, lsl #2]
   148f0:	b	14a54 <__assert_fail@plt+0x3bc8>
   148f4:	andeq	r4, r1, ip, lsr #27
   148f8:	andeq	r4, r1, r4, asr sl
   148fc:	andeq	r4, r1, r4, asr sl
   14900:			; <UNDEFINED> instruction: 0x00014bb8
   14904:	andeq	r4, r1, r4, asr sl
   14908:	andeq	r4, r1, ip, asr #19
   1490c:	andeq	r4, r1, r4, asr sl
   14910:	andeq	r4, r1, r4, asr sl
   14914:	andeq	r4, r1, r4, asr sl
   14918:	andeq	r4, r1, ip, asr sl
   1491c:	andeq	r4, r1, r4, asr sl
   14920:	andeq	r4, r1, r8, asr sp
   14924:	andeq	r4, r1, r4, asr sl
   14928:	andeq	r4, r1, r4, asr sl
   1492c:	andeq	r4, r1, r8, lsr #25
   14930:	andeq	r4, r1, r4, asr sl
   14934:	andeq	r4, r1, r4, asr sl
   14938:	andeq	r4, r1, r4, asr sl
   1493c:	andeq	r4, r1, r0, lsr ip
   14940:	andeq	r4, r1, r4, asr sl
   14944:	andeq	r4, r1, r4, asr sl
   14948:	andeq	r4, r1, r4, asr sl
   1494c:	andeq	r4, r1, r4, asr sl
   14950:	andeq	r4, r1, r0, asr #22
   14954:	andeq	r4, r1, r4, asr #21
   14958:	andeq	r4, r1, r4, asr sl
   1495c:	andeq	r4, r1, r4, asr sl
   14960:	andeq	r4, r1, r4, asr sl
   14964:	andeq	r4, r1, r4, asr sl
   14968:	andeq	r4, r1, r4, asr sl
   1496c:	andeq	r4, r1, r4, asr sl
   14970:	andeq	r4, r1, r4, asr sl
   14974:	andeq	r4, r1, r8, lsr sp
   14978:	andeq	r4, r1, ip, lsr sl
   1497c:	andeq	r4, r1, r4, asr sl
   14980:	andeq	r4, r1, r4, asr sl
   14984:	andeq	r4, r1, r4, asr sl
   14988:	andeq	r4, r1, ip, asr #19
   1498c:	andeq	r4, r1, r4, asr sl
   14990:	andeq	r4, r1, r4, asr sl
   14994:	andeq	r4, r1, r4, asr sl
   14998:	andeq	r4, r1, ip, asr sl
   1499c:	andeq	r4, r1, r4, asr sl
   149a0:	andeq	r4, r1, r8, asr sp
   149a4:	andeq	r4, r1, r4, asr sl
   149a8:	andeq	r4, r1, r4, asr sl
   149ac:	andeq	r4, r1, r4, asr sl
   149b0:	andeq	r4, r1, r4, asr sl
   149b4:	andeq	r4, r1, r4, asr sl
   149b8:	andeq	r4, r1, r4, asr sl
   149bc:	andeq	r4, r1, r0, lsr ip
   149c0:	andeq	r4, r1, r4, asr sl
   149c4:	andeq	r4, r1, r4, asr sl
   149c8:	andeq	r4, r1, r0, lsr #26
   149cc:	asr	r3, r7, #31
   149d0:	mov	r2, r7
   149d4:	cmp	r8, #0
   149d8:	umull	r0, r1, r9, r7
   149dc:	mov	ip, #0
   149e0:	strd	r2, [sp, #8]
   149e4:	bne	14e38 <__assert_fail@plt+0x3fac>
   149e8:	mov	r2, r0
   149ec:	mov	r3, r1
   149f0:	cmp	ip, #0
   149f4:	bne	14a80 <__assert_fail@plt+0x3bf4>
   149f8:	cmp	r3, #0
   149fc:	mov	lr, ip
   14a00:	bne	14e9c <__assert_fail@plt+0x4010>
   14a04:	umull	r2, r3, r2, r7
   14a08:	mov	ip, r2
   14a0c:	mov	r1, r3
   14a10:	subs	r0, lr, #0
   14a14:	bne	14a80 <__assert_fail@plt+0x3bf4>
   14a18:	cmp	r1, #0
   14a1c:	bne	14e7c <__assert_fail@plt+0x3ff0>
   14a20:	umull	r2, r3, ip, r7
   14a24:	mov	r6, r2
   14a28:	mov	r2, r3
   14a2c:	cmp	r0, #0
   14a30:	mov	r9, r6
   14a34:	mov	r8, r2
   14a38:	bne	14a80 <__assert_fail@plt+0x3bf4>
   14a3c:	ldr	r2, [sp, #4]
   14a40:	add	r3, fp, r2
   14a44:	str	r3, [r5]
   14a48:	ldrb	r3, [fp, r2]
   14a4c:	cmp	r3, #0
   14a50:	beq	14750 <__assert_fail@plt+0x38c4>
   14a54:	orr	r4, r4, #2
   14a58:	b	14750 <__assert_fail@plt+0x38c4>
   14a5c:	cmp	r8, #0
   14a60:	umull	r2, r3, r9, r7
   14a64:	mov	ip, #0
   14a68:	asr	r1, r7, #31
   14a6c:	bne	14dd4 <__assert_fail@plt+0x3f48>
   14a70:	mov	r9, r2
   14a74:	mov	r8, r3
   14a78:	cmp	ip, #0
   14a7c:	beq	14a3c <__assert_fail@plt+0x3bb0>
   14a80:	mvn	r9, #0
   14a84:	mov	r4, #1
   14a88:	mov	r8, r9
   14a8c:	b	14a3c <__assert_fail@plt+0x3bb0>
   14a90:	mov	r1, r6
   14a94:	ldr	r0, [sp, #72]	; 0x48
   14a98:	bl	10dcc <strchr@plt>
   14a9c:	cmp	r0, #0
   14aa0:	bne	147c4 <__assert_fail@plt+0x3938>
   14aa4:	b	14a54 <__assert_fail@plt+0x3bc8>
   14aa8:	ldrb	r3, [fp, #2]
   14aac:	mov	r7, #1024	; 0x400
   14ab0:	cmp	r3, #66	; 0x42
   14ab4:	movne	r3, #1
   14ab8:	moveq	r3, #3
   14abc:	str	r3, [sp, #4]
   14ac0:	b	148e4 <__assert_fail@plt+0x3a58>
   14ac4:	asr	r3, r7, #31
   14ac8:	mov	r2, r7
   14acc:	mov	ip, #0
   14ad0:	mov	r0, #7
   14ad4:	mov	lr, ip
   14ad8:	mov	r6, r4
   14adc:	strd	r2, [sp, #8]
   14ae0:	str	r5, [sp, #16]
   14ae4:	b	14b10 <__assert_fail@plt+0x3c84>
   14ae8:	umull	r2, r3, r9, r7
   14aec:	mov	r9, r2
   14af0:	mov	r8, r3
   14af4:	cmp	r1, #0
   14af8:	beq	14b08 <__assert_fail@plt+0x3c7c>
   14afc:	mvn	r9, #0
   14b00:	mov	ip, #1
   14b04:	mov	r8, r9
   14b08:	subs	r0, r0, #1
   14b0c:	beq	14df8 <__assert_fail@plt+0x3f6c>
   14b10:	cmp	r8, #0
   14b14:	mov	r1, #0
   14b18:	beq	14ae8 <__assert_fail@plt+0x3c5c>
   14b1c:	umull	r4, r5, r9, r7
   14b20:	mov	r3, lr
   14b24:	mov	r2, r5
   14b28:	umlal	r2, r3, r8, r7
   14b2c:	cmp	r3, #0
   14b30:	bne	14f58 <__assert_fail@plt+0x40cc>
   14b34:	mov	r9, r4
   14b38:	mov	r8, r2
   14b3c:	b	14af4 <__assert_fail@plt+0x3c68>
   14b40:	asr	r3, r7, #31
   14b44:	mov	r2, r7
   14b48:	mov	r6, #0
   14b4c:	mov	lr, #8
   14b50:	mov	r0, r4
   14b54:	mov	ip, r5
   14b58:	strd	r2, [sp, #8]
   14b5c:	b	14b88 <__assert_fail@plt+0x3cfc>
   14b60:	umull	r2, r3, r9, r7
   14b64:	mov	r9, r2
   14b68:	mov	r8, r3
   14b6c:	cmp	r1, #0
   14b70:	beq	14b80 <__assert_fail@plt+0x3cf4>
   14b74:	mvn	r9, #0
   14b78:	mov	r6, #1
   14b7c:	mov	r8, r9
   14b80:	subs	lr, lr, #1
   14b84:	beq	14dc8 <__assert_fail@plt+0x3f3c>
   14b88:	cmp	r8, #0
   14b8c:	mov	r1, #0
   14b90:	beq	14b60 <__assert_fail@plt+0x3cd4>
   14b94:	umull	r4, r5, r9, r7
   14b98:	mov	r3, #0
   14b9c:	mov	r2, r5
   14ba0:	umlal	r2, r3, r8, r7
   14ba4:	cmp	r3, #0
   14ba8:	bne	14fb0 <__assert_fail@plt+0x4124>
   14bac:	mov	r9, r4
   14bb0:	mov	r8, r2
   14bb4:	b	14b6c <__assert_fail@plt+0x3ce0>
   14bb8:	asr	r3, r7, #31
   14bbc:	mov	r2, r7
   14bc0:	mov	r6, #0
   14bc4:	mov	lr, #6
   14bc8:	mov	r0, r4
   14bcc:	mov	ip, r5
   14bd0:	strd	r2, [sp, #8]
   14bd4:	b	14c00 <__assert_fail@plt+0x3d74>
   14bd8:	umull	r2, r3, r9, r7
   14bdc:	mov	r9, r2
   14be0:	mov	r8, r3
   14be4:	cmp	r1, #0
   14be8:	beq	14bf8 <__assert_fail@plt+0x3d6c>
   14bec:	mvn	r9, #0
   14bf0:	mov	r6, #1
   14bf4:	mov	r8, r9
   14bf8:	subs	lr, lr, #1
   14bfc:	beq	14dc8 <__assert_fail@plt+0x3f3c>
   14c00:	cmp	r8, #0
   14c04:	mov	r1, #0
   14c08:	beq	14bd8 <__assert_fail@plt+0x3d4c>
   14c0c:	umull	r4, r5, r9, r7
   14c10:	mov	r3, #0
   14c14:	mov	r2, r5
   14c18:	umlal	r2, r3, r8, r7
   14c1c:	cmp	r3, #0
   14c20:	bne	14f78 <__assert_fail@plt+0x40ec>
   14c24:	mov	r9, r4
   14c28:	mov	r8, r2
   14c2c:	b	14be4 <__assert_fail@plt+0x3d58>
   14c30:	asr	r3, r7, #31
   14c34:	mov	r2, r7
   14c38:	mov	r6, #0
   14c3c:	mov	lr, #4
   14c40:	mov	r0, r4
   14c44:	mov	ip, r5
   14c48:	strd	r2, [sp, #8]
   14c4c:	b	14c78 <__assert_fail@plt+0x3dec>
   14c50:	umull	r2, r3, r9, r7
   14c54:	mov	r9, r2
   14c58:	mov	r8, r3
   14c5c:	cmp	r1, #0
   14c60:	beq	14c70 <__assert_fail@plt+0x3de4>
   14c64:	mvn	r9, #0
   14c68:	mov	r6, #1
   14c6c:	mov	r8, r9
   14c70:	subs	lr, lr, #1
   14c74:	beq	14dc8 <__assert_fail@plt+0x3f3c>
   14c78:	cmp	r8, #0
   14c7c:	mov	r1, #0
   14c80:	beq	14c50 <__assert_fail@plt+0x3dc4>
   14c84:	umull	r4, r5, r9, r7
   14c88:	mov	r3, #0
   14c8c:	mov	r2, r5
   14c90:	umlal	r2, r3, r8, r7
   14c94:	cmp	r3, #0
   14c98:	bne	14f94 <__assert_fail@plt+0x4108>
   14c9c:	mov	r9, r4
   14ca0:	mov	r8, r2
   14ca4:	b	14c5c <__assert_fail@plt+0x3dd0>
   14ca8:	asr	r3, r7, #31
   14cac:	mov	r2, r7
   14cb0:	mov	r6, #0
   14cb4:	mov	lr, #5
   14cb8:	mov	r0, r4
   14cbc:	mov	ip, r5
   14cc0:	strd	r2, [sp, #8]
   14cc4:	b	14cf0 <__assert_fail@plt+0x3e64>
   14cc8:	umull	r2, r3, r9, r7
   14ccc:	mov	r9, r2
   14cd0:	mov	r8, r3
   14cd4:	cmp	r1, #0
   14cd8:	beq	14ce8 <__assert_fail@plt+0x3e5c>
   14cdc:	mvn	r9, #0
   14ce0:	mov	r6, #1
   14ce4:	mov	r8, r9
   14ce8:	subs	lr, lr, #1
   14cec:	beq	14dc8 <__assert_fail@plt+0x3f3c>
   14cf0:	cmp	r8, #0
   14cf4:	mov	r1, #0
   14cf8:	beq	14cc8 <__assert_fail@plt+0x3e3c>
   14cfc:	umull	r4, r5, r9, r7
   14d00:	mov	r3, #0
   14d04:	mov	r2, r5
   14d08:	umlal	r2, r3, r8, r7
   14d0c:	cmp	r3, #0
   14d10:	bne	14f00 <__assert_fail@plt+0x4074>
   14d14:	mov	r9, r4
   14d18:	mov	r8, r2
   14d1c:	b	14cd4 <__assert_fail@plt+0x3e48>
   14d20:	lsr	r3, r8, #31
   14d24:	adds	r9, r9, r9
   14d28:	adc	r8, r8, r8
   14d2c:	cmp	r3, #0
   14d30:	beq	14a3c <__assert_fail@plt+0x3bb0>
   14d34:	b	14a80 <__assert_fail@plt+0x3bf4>
   14d38:	lsr	r3, r8, #23
   14d3c:	lsl	r8, r8, #9
   14d40:	cmp	r3, #0
   14d44:	lsl	r3, r9, #9
   14d48:	orr	r8, r8, r9, lsr #23
   14d4c:	bne	14a80 <__assert_fail@plt+0x3bf4>
   14d50:	mov	r9, r3
   14d54:	b	14a3c <__assert_fail@plt+0x3bb0>
   14d58:	asr	r3, r7, #31
   14d5c:	mov	r2, r7
   14d60:	cmp	r8, #0
   14d64:	mov	r1, #0
   14d68:	strd	r2, [sp, #8]
   14d6c:	umull	r2, r3, r9, r7
   14d70:	bne	14e14 <__assert_fail@plt+0x3f88>
   14d74:	mov	r0, r2
   14d78:	mov	ip, r3
   14d7c:	cmp	r1, #0
   14d80:	bne	14a80 <__assert_fail@plt+0x3bf4>
   14d84:	cmp	ip, #0
   14d88:	bne	14e5c <__assert_fail@plt+0x3fd0>
   14d8c:	umull	r2, r3, r0, r7
   14d90:	mov	r6, r2
   14d94:	mov	r2, r3
   14d98:	cmp	r1, #0
   14d9c:	mov	r9, r6
   14da0:	mov	r8, r2
   14da4:	beq	14a3c <__assert_fail@plt+0x3bb0>
   14da8:	b	14a80 <__assert_fail@plt+0x3bf4>
   14dac:	lsr	r3, r8, #22
   14db0:	lsl	r8, r8, #10
   14db4:	cmp	r3, #0
   14db8:	lsl	r3, r9, #10
   14dbc:	orr	r8, r8, r9, lsr #22
   14dc0:	beq	14d50 <__assert_fail@plt+0x3ec4>
   14dc4:	b	14a80 <__assert_fail@plt+0x3bf4>
   14dc8:	mov	r5, ip
   14dcc:	orr	r4, r0, r6
   14dd0:	b	14a3c <__assert_fail@plt+0x3bb0>
   14dd4:	strd	r2, [sp, #8]
   14dd8:	mov	r3, ip
   14ddc:	ldr	r2, [sp, #12]
   14de0:	umlal	r2, r3, r8, r7
   14de4:	cmp	r3, #0
   14de8:	bne	14f1c <__assert_fail@plt+0x4090>
   14dec:	mov	r8, r2
   14df0:	ldr	r9, [sp, #8]
   14df4:	b	14a78 <__assert_fail@plt+0x3bec>
   14df8:	orr	r4, r6, ip
   14dfc:	ldr	r5, [sp, #16]
   14e00:	b	14a3c <__assert_fail@plt+0x3bb0>
   14e04:	mov	r3, #2
   14e08:	mov	r7, #1000	; 0x3e8
   14e0c:	str	r3, [sp, #4]
   14e10:	b	148e4 <__assert_fail@plt+0x3a58>
   14e14:	strd	r2, [sp, #16]
   14e18:	mov	r3, r1
   14e1c:	ldr	r2, [sp, #20]
   14e20:	umlal	r2, r3, r8, r7
   14e24:	cmp	r3, #0
   14e28:	bne	14fec <__assert_fail@plt+0x4160>
   14e2c:	mov	ip, r2
   14e30:	ldr	r0, [sp, #16]
   14e34:	b	14d7c <__assert_fail@plt+0x3ef0>
   14e38:	mov	r2, r1
   14e3c:	mov	r3, ip
   14e40:	umlal	r2, r3, r8, r7
   14e44:	cmp	r3, #0
   14e48:	strd	r2, [sp, #16]
   14e4c:	bne	14ec0 <__assert_fail@plt+0x4034>
   14e50:	mov	r2, r0
   14e54:	ldr	r3, [sp, #16]
   14e58:	b	149f0 <__assert_fail@plt+0x3b64>
   14e5c:	umull	r8, r9, r0, r7
   14e60:	mov	r3, r1
   14e64:	mov	r2, r9
   14e68:	umlal	r2, r3, ip, r7
   14e6c:	cmp	r3, #0
   14e70:	bne	14fcc <__assert_fail@plt+0x4140>
   14e74:	mov	r6, r8
   14e78:	b	14d98 <__assert_fail@plt+0x3f0c>
   14e7c:	umull	r8, r9, ip, r7
   14e80:	mov	r3, r0
   14e84:	mov	r2, r9
   14e88:	umlal	r2, r3, r1, r7
   14e8c:	cmp	r3, #0
   14e90:	bne	15014 <__assert_fail@plt+0x4188>
   14e94:	mov	r6, r8
   14e98:	b	14a2c <__assert_fail@plt+0x3ba0>
   14e9c:	umull	r8, r9, r2, r7
   14ea0:	mov	r1, ip
   14ea4:	mov	r0, r9
   14ea8:	umlal	r0, r1, r3, r7
   14eac:	cmp	r1, #0
   14eb0:	bne	14ee0 <__assert_fail@plt+0x4054>
   14eb4:	mov	ip, r8
   14eb8:	mov	r1, r0
   14ebc:	b	14a10 <__assert_fail@plt+0x3b84>
   14ec0:	ldr	lr, [sp, #8]
   14ec4:	mov	r2, r0
   14ec8:	mov	ip, #1
   14ecc:	ldr	r3, [sp, #12]
   14ed0:	mul	r3, r9, r3
   14ed4:	mla	r3, lr, r8, r3
   14ed8:	add	r3, r3, r1
   14edc:	b	149f0 <__assert_fail@plt+0x3b64>
   14ee0:	ldr	r1, [sp, #12]
   14ee4:	mov	lr, #1
   14ee8:	mov	ip, r8
   14eec:	mul	r1, r2, r1
   14ef0:	ldr	r2, [sp, #8]
   14ef4:	mla	r1, r3, r2, r1
   14ef8:	add	r1, r1, r9
   14efc:	b	14a10 <__assert_fail@plt+0x3b84>
   14f00:	ldrd	r2, [sp, #8]
   14f04:	mov	r1, #1
   14f08:	mul	r3, r9, r3
   14f0c:	mov	r9, r4
   14f10:	mla	r8, r2, r8, r3
   14f14:	add	r8, r8, r5
   14f18:	b	14cd4 <__assert_fail@plt+0x3e48>
   14f1c:	mul	r3, r9, r1
   14f20:	mov	ip, #1
   14f24:	mla	r8, r7, r8, r3
   14f28:	ldrd	r6, [sp, #8]
   14f2c:	mov	r9, r6
   14f30:	add	r8, r8, r7
   14f34:	b	14a78 <__assert_fail@plt+0x3bec>
   14f38:	movw	r3, #24364	; 0x5f2c
   14f3c:	movt	r3, #1
   14f40:	movw	r1, #24376	; 0x5f38
   14f44:	movt	r1, #1
   14f48:	movw	r0, #24392	; 0x5f48
   14f4c:	movt	r0, #1
   14f50:	mov	r2, #85	; 0x55
   14f54:	bl	10e8c <__assert_fail@plt>
   14f58:	ldr	r3, [sp, #12]
   14f5c:	mov	r1, #1
   14f60:	mul	r2, r9, r3
   14f64:	ldr	r3, [sp, #8]
   14f68:	mov	r9, r4
   14f6c:	mla	r8, r3, r8, r2
   14f70:	add	r8, r8, r5
   14f74:	b	14af4 <__assert_fail@plt+0x3c68>
   14f78:	ldrd	r2, [sp, #8]
   14f7c:	mov	r1, #1
   14f80:	mul	r3, r9, r3
   14f84:	mov	r9, r4
   14f88:	mla	r8, r2, r8, r3
   14f8c:	add	r8, r8, r5
   14f90:	b	14be4 <__assert_fail@plt+0x3d58>
   14f94:	ldrd	r2, [sp, #8]
   14f98:	mov	r1, #1
   14f9c:	mul	r3, r9, r3
   14fa0:	mov	r9, r4
   14fa4:	mla	r8, r2, r8, r3
   14fa8:	add	r8, r8, r5
   14fac:	b	14c5c <__assert_fail@plt+0x3dd0>
   14fb0:	ldrd	r2, [sp, #8]
   14fb4:	mov	r1, #1
   14fb8:	mul	r3, r9, r3
   14fbc:	mov	r9, r4
   14fc0:	mla	r8, r2, r8, r3
   14fc4:	add	r8, r8, r5
   14fc8:	b	14b6c <__assert_fail@plt+0x3ce0>
   14fcc:	ldr	r3, [sp, #12]
   14fd0:	mov	r6, r8
   14fd4:	mov	r1, #1
   14fd8:	mul	r2, r0, r3
   14fdc:	ldr	r3, [sp, #8]
   14fe0:	mla	r2, ip, r3, r2
   14fe4:	add	r2, r2, r9
   14fe8:	b	14d98 <__assert_fail@plt+0x3f0c>
   14fec:	ldr	r3, [sp, #12]
   14ff0:	mov	r1, #1
   14ff4:	ldr	r2, [sp, #16]
   14ff8:	mul	ip, r9, r3
   14ffc:	ldr	r3, [sp, #8]
   15000:	mov	r0, r2
   15004:	mla	ip, r3, r8, ip
   15008:	ldr	r3, [sp, #20]
   1500c:	add	ip, ip, r3
   15010:	b	14d7c <__assert_fail@plt+0x3ef0>
   15014:	ldr	r3, [sp, #12]
   15018:	mov	r6, r8
   1501c:	mov	r0, #1
   15020:	mul	r2, ip, r3
   15024:	ldr	r3, [sp, #8]
   15028:	mla	r2, r1, r3, r2
   1502c:	add	r2, r2, r9
   15030:	b	14a2c <__assert_fail@plt+0x3ba0>
   15034:	cmp	r1, #0
   15038:	cmpne	r0, #0
   1503c:	beq	15088 <__assert_fail@plt+0x41fc>
   15040:	strd	r4, [sp, #-16]!
   15044:	umull	r4, r5, r0, r1
   15048:	str	r6, [sp, #8]
   1504c:	str	lr, [sp, #12]
   15050:	adds	r3, r5, #0
   15054:	movne	r3, #1
   15058:	cmp	r4, #0
   1505c:	blt	15068 <__assert_fail@plt+0x41dc>
   15060:	cmp	r3, #0
   15064:	beq	15094 <__assert_fail@plt+0x4208>
   15068:	bl	10dd8 <__errno_location@plt>
   1506c:	mov	r3, #12
   15070:	ldrd	r4, [sp]
   15074:	ldr	r6, [sp, #8]
   15078:	add	sp, sp, #12
   1507c:	str	r3, [r0]
   15080:	mov	r0, #0
   15084:	pop	{pc}		; (ldr pc, [sp], #4)
   15088:	mov	r1, #1
   1508c:	mov	r0, r1
   15090:	b	10c40 <calloc@plt>
   15094:	ldrd	r4, [sp]
   15098:	ldr	r6, [sp, #8]
   1509c:	ldr	lr, [sp, #12]
   150a0:	add	sp, sp, #16
   150a4:	b	10c40 <calloc@plt>
   150a8:	cmp	r0, #0
   150ac:	beq	150b8 <__assert_fail@plt+0x422c>
   150b0:	blt	150c0 <__assert_fail@plt+0x4234>
   150b4:	b	10d60 <malloc@plt>
   150b8:	mov	r0, #1
   150bc:	b	10d60 <malloc@plt>
   150c0:	str	r4, [sp, #-8]!
   150c4:	str	lr, [sp, #4]
   150c8:	bl	10dd8 <__errno_location@plt>
   150cc:	mov	r3, #12
   150d0:	ldr	r4, [sp]
   150d4:	add	sp, sp, #4
   150d8:	str	r3, [r0]
   150dc:	mov	r0, #0
   150e0:	pop	{pc}		; (ldr pc, [sp], #4)
   150e4:	cmp	r0, #0
   150e8:	beq	15110 <__assert_fail@plt+0x4284>
   150ec:	cmp	r1, #0
   150f0:	str	r4, [sp, #-8]!
   150f4:	str	lr, [sp, #4]
   150f8:	beq	15118 <__assert_fail@plt+0x428c>
   150fc:	blt	1512c <__assert_fail@plt+0x42a0>
   15100:	ldr	r4, [sp]
   15104:	ldr	lr, [sp, #4]
   15108:	add	sp, sp, #8
   1510c:	b	10ce8 <realloc@plt>
   15110:	mov	r0, r1
   15114:	b	150a8 <__assert_fail@plt+0x421c>
   15118:	bl	152d8 <__assert_fail@plt+0x444c>
   1511c:	ldr	r4, [sp]
   15120:	add	sp, sp, #4
   15124:	mov	r0, #0
   15128:	pop	{pc}		; (ldr pc, [sp], #4)
   1512c:	bl	10dd8 <__errno_location@plt>
   15130:	mov	r3, #12
   15134:	str	r3, [r0]
   15138:	b	1511c <__assert_fail@plt+0x4290>
   1513c:	strd	r4, [sp, #-16]!
   15140:	mov	r4, r0
   15144:	str	r6, [sp, #8]
   15148:	str	lr, [sp, #12]
   1514c:	bl	10d30 <__fpending@plt>
   15150:	ldr	r5, [r4]
   15154:	mov	r6, r0
   15158:	mov	r0, r4
   1515c:	bl	151c4 <__assert_fail@plt+0x4338>
   15160:	mov	r4, r0
   15164:	and	r5, r5, #32
   15168:	cmp	r5, #0
   1516c:	bne	151a4 <__assert_fail@plt+0x4318>
   15170:	cmp	r0, #0
   15174:	beq	15190 <__assert_fail@plt+0x4304>
   15178:	cmp	r6, #0
   1517c:	bne	151bc <__assert_fail@plt+0x4330>
   15180:	bl	10dd8 <__errno_location@plt>
   15184:	ldr	r4, [r0]
   15188:	subs	r4, r4, #9
   1518c:	mvnne	r4, #0
   15190:	mov	r0, r4
   15194:	ldrd	r4, [sp]
   15198:	ldr	r6, [sp, #8]
   1519c:	add	sp, sp, #12
   151a0:	pop	{pc}		; (ldr pc, [sp], #4)
   151a4:	cmp	r0, #0
   151a8:	bne	151bc <__assert_fail@plt+0x4330>
   151ac:	bl	10dd8 <__errno_location@plt>
   151b0:	str	r4, [r0]
   151b4:	mvn	r4, #0
   151b8:	b	15190 <__assert_fail@plt+0x4304>
   151bc:	mvn	r4, #0
   151c0:	b	15190 <__assert_fail@plt+0x4304>
   151c4:	strd	r4, [sp, #-12]!
   151c8:	mov	r4, r0
   151cc:	str	lr, [sp, #8]
   151d0:	sub	sp, sp, #12
   151d4:	bl	10e08 <fileno@plt>
   151d8:	cmp	r0, #0
   151dc:	mov	r0, r4
   151e0:	blt	15264 <__assert_fail@plt+0x43d8>
   151e4:	bl	10d78 <__freading@plt>
   151e8:	cmp	r0, #0
   151ec:	bne	15230 <__assert_fail@plt+0x43a4>
   151f0:	mov	r0, r4
   151f4:	bl	15278 <__assert_fail@plt+0x43ec>
   151f8:	cmp	r0, #0
   151fc:	beq	15260 <__assert_fail@plt+0x43d4>
   15200:	bl	10dd8 <__errno_location@plt>
   15204:	mov	r5, r0
   15208:	mov	r0, r4
   1520c:	ldr	r4, [r5]
   15210:	bl	10e20 <fclose@plt>
   15214:	cmp	r4, #0
   15218:	mvnne	r0, #0
   1521c:	strne	r4, [r5]
   15220:	add	sp, sp, #12
   15224:	ldrd	r4, [sp]
   15228:	add	sp, sp, #8
   1522c:	pop	{pc}		; (ldr pc, [sp], #4)
   15230:	mov	r0, r4
   15234:	bl	10e08 <fileno@plt>
   15238:	mov	r1, #1
   1523c:	mov	r2, #0
   15240:	mov	r3, #0
   15244:	str	r1, [sp]
   15248:	bl	10d18 <lseek64@plt>
   1524c:	mvn	r3, #0
   15250:	mvn	r2, #0
   15254:	cmp	r1, r3
   15258:	cmpeq	r0, r2
   1525c:	bne	151f0 <__assert_fail@plt+0x4364>
   15260:	mov	r0, r4
   15264:	add	sp, sp, #12
   15268:	ldrd	r4, [sp]
   1526c:	ldr	lr, [sp, #8]
   15270:	add	sp, sp, #12
   15274:	b	10e20 <fclose@plt>
   15278:	str	r4, [sp, #-8]!
   1527c:	subs	r4, r0, #0
   15280:	str	lr, [sp, #4]
   15284:	sub	sp, sp, #8
   15288:	beq	152a4 <__assert_fail@plt+0x4418>
   1528c:	bl	10d78 <__freading@plt>
   15290:	cmp	r0, #0
   15294:	beq	152a4 <__assert_fail@plt+0x4418>
   15298:	ldr	r3, [r4]
   1529c:	tst	r3, #256	; 0x100
   152a0:	bne	152bc <__assert_fail@plt+0x4430>
   152a4:	mov	r0, r4
   152a8:	add	sp, sp, #8
   152ac:	ldr	r4, [sp]
   152b0:	ldr	lr, [sp, #4]
   152b4:	add	sp, sp, #8
   152b8:	b	10c64 <fflush@plt>
   152bc:	mov	r1, #1
   152c0:	mov	r2, #0
   152c4:	mov	r3, #0
   152c8:	mov	r0, r4
   152cc:	str	r1, [sp]
   152d0:	bl	15338 <__assert_fail@plt+0x44ac>
   152d4:	b	152a4 <__assert_fail@plt+0x4418>
   152d8:	strd	r4, [sp, #-12]!
   152dc:	mov	r5, r0
   152e0:	str	lr, [sp, #8]
   152e4:	sub	sp, sp, #12
   152e8:	bl	10dd8 <__errno_location@plt>
   152ec:	mov	r4, r0
   152f0:	mov	r2, #0
   152f4:	ldr	r3, [r4]
   152f8:	mov	r0, r5
   152fc:	str	r2, [r4]
   15300:	str	r3, [sp]
   15304:	str	r3, [sp, #4]
   15308:	bl	10c70 <free@plt>
   1530c:	ldr	r3, [r4]
   15310:	add	r2, sp, #8
   15314:	clz	r3, r3
   15318:	lsr	r3, r3, #5
   1531c:	add	r3, r2, r3, lsl #2
   15320:	ldr	r3, [r3, #-8]
   15324:	str	r3, [r4]
   15328:	add	sp, sp, #12
   1532c:	ldrd	r4, [sp]
   15330:	add	sp, sp, #8
   15334:	pop	{pc}		; (ldr pc, [sp], #4)
   15338:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1533c:	mov	r4, r0
   15340:	ldr	ip, [r0, #4]
   15344:	strd	r6, [sp, #8]
   15348:	str	lr, [sp, #20]
   1534c:	ldr	lr, [r0, #8]
   15350:	str	r8, [sp, #16]
   15354:	sub	sp, sp, #8
   15358:	ldr	r5, [sp, #32]
   1535c:	cmp	lr, ip
   15360:	beq	15388 <__assert_fail@plt+0x44fc>
   15364:	mov	r0, r4
   15368:	str	r5, [sp, #32]
   1536c:	add	sp, sp, #8
   15370:	ldrd	r4, [sp]
   15374:	ldrd	r6, [sp, #8]
   15378:	ldr	r8, [sp, #16]
   1537c:	ldr	lr, [sp, #20]
   15380:	add	sp, sp, #24
   15384:	b	10e2c <fseeko64@plt>
   15388:	ldr	ip, [r0, #16]
   1538c:	ldr	lr, [r0, #20]
   15390:	cmp	lr, ip
   15394:	bne	15364 <__assert_fail@plt+0x44d8>
   15398:	ldr	r8, [r0, #36]	; 0x24
   1539c:	cmp	r8, #0
   153a0:	bne	15364 <__assert_fail@plt+0x44d8>
   153a4:	mov	r6, r2
   153a8:	mov	r7, r3
   153ac:	bl	10e08 <fileno@plt>
   153b0:	mov	r2, r6
   153b4:	mov	r3, r7
   153b8:	str	r5, [sp]
   153bc:	bl	10d18 <lseek64@plt>
   153c0:	mvn	r3, #0
   153c4:	mvn	r2, #0
   153c8:	cmp	r1, r3
   153cc:	cmpeq	r0, r2
   153d0:	beq	15400 <__assert_fail@plt+0x4574>
   153d4:	ldr	r3, [r4]
   153d8:	strd	r0, [r4, #80]	; 0x50
   153dc:	bic	r3, r3, #16
   153e0:	str	r3, [r4]
   153e4:	mov	r0, r8
   153e8:	add	sp, sp, #8
   153ec:	ldrd	r4, [sp]
   153f0:	ldrd	r6, [sp, #8]
   153f4:	ldr	r8, [sp, #16]
   153f8:	add	sp, sp, #20
   153fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15400:	mvn	r8, #0
   15404:	b	153e4 <__assert_fail@plt+0x4558>
   15408:	mov	r0, #14
   1540c:	str	r4, [sp, #-8]!
   15410:	str	lr, [sp, #4]
   15414:	bl	10e50 <nl_langinfo@plt>
   15418:	cmp	r0, #0
   1541c:	beq	15440 <__assert_fail@plt+0x45b4>
   15420:	ldrb	r2, [r0]
   15424:	movw	r3, #24432	; 0x5f70
   15428:	movt	r3, #1
   1542c:	ldr	r4, [sp]
   15430:	add	sp, sp, #4
   15434:	cmp	r2, #0
   15438:	moveq	r0, r3
   1543c:	pop	{pc}		; (ldr pc, [sp], #4)
   15440:	ldr	r4, [sp]
   15444:	add	sp, sp, #4
   15448:	movw	r0, #24432	; 0x5f70
   1544c:	movt	r0, #1
   15450:	pop	{pc}		; (ldr pc, [sp], #4)
   15454:	strd	r4, [sp, #-20]!	; 0xffffffec
   15458:	mov	r5, r2
   1545c:	strd	r6, [sp, #8]
   15460:	subs	r6, r0, #0
   15464:	mov	r7, r1
   15468:	str	lr, [sp, #16]
   1546c:	sub	sp, sp, #12
   15470:	addeq	r6, sp, #4
   15474:	mov	r0, r6
   15478:	bl	10d3c <mbrtowc@plt>
   1547c:	cmp	r5, #0
   15480:	cmnne	r0, #3
   15484:	mov	r4, r0
   15488:	bhi	154a4 <__assert_fail@plt+0x4618>
   1548c:	mov	r0, r4
   15490:	add	sp, sp, #12
   15494:	ldrd	r4, [sp]
   15498:	ldrd	r6, [sp, #8]
   1549c:	add	sp, sp, #16
   154a0:	pop	{pc}		; (ldr pc, [sp], #4)
   154a4:	mov	r0, #0
   154a8:	bl	154fc <__assert_fail@plt+0x4670>
   154ac:	cmp	r0, #0
   154b0:	bne	1548c <__assert_fail@plt+0x4600>
   154b4:	ldrb	r3, [r7]
   154b8:	mov	r4, #1
   154bc:	str	r3, [r6]
   154c0:	b	1548c <__assert_fail@plt+0x4600>
   154c4:	umull	r2, r3, r1, r2
   154c8:	cmp	r3, #0
   154cc:	bne	154d8 <__assert_fail@plt+0x464c>
   154d0:	mov	r1, r2
   154d4:	b	150e4 <__assert_fail@plt+0x4258>
   154d8:	str	r4, [sp, #-8]!
   154dc:	str	lr, [sp, #4]
   154e0:	bl	10dd8 <__errno_location@plt>
   154e4:	mov	r3, #12
   154e8:	ldr	r4, [sp]
   154ec:	add	sp, sp, #4
   154f0:	str	r3, [r0]
   154f4:	mov	r0, #0
   154f8:	pop	{pc}		; (ldr pc, [sp], #4)
   154fc:	push	{lr}		; (str lr, [sp, #-4]!)
   15500:	sub	sp, sp, #268	; 0x10c
   15504:	movw	r2, #257	; 0x101
   15508:	add	r1, sp, #4
   1550c:	bl	15554 <__assert_fail@plt+0x46c8>
   15510:	cmp	r0, #0
   15514:	movne	r0, #0
   15518:	bne	1554c <__assert_fail@plt+0x46c0>
   1551c:	movw	r1, #24440	; 0x5f78
   15520:	movt	r1, #1
   15524:	add	r0, sp, #4
   15528:	bl	10c58 <strcmp@plt>
   1552c:	cmp	r0, #0
   15530:	beq	1554c <__assert_fail@plt+0x46c0>
   15534:	add	r0, sp, #4
   15538:	movw	r1, #24444	; 0x5f7c
   1553c:	movt	r1, #1
   15540:	bl	10c58 <strcmp@plt>
   15544:	adds	r0, r0, #0
   15548:	movne	r0, #1
   1554c:	add	sp, sp, #268	; 0x10c
   15550:	pop	{pc}		; (ldr pc, [sp], #4)
   15554:	strd	r4, [sp, #-16]!
   15558:	mov	r5, r1
   1555c:	mov	r1, #0
   15560:	mov	r4, r2
   15564:	str	r6, [sp, #8]
   15568:	str	lr, [sp, #12]
   1556c:	bl	10e38 <setlocale@plt>
   15570:	subs	r6, r0, #0
   15574:	beq	155f4 <__assert_fail@plt+0x4768>
   15578:	bl	10dc0 <strlen@plt>
   1557c:	cmp	r4, r0
   15580:	bhi	155a0 <__assert_fail@plt+0x4714>
   15584:	cmp	r4, #0
   15588:	moveq	r0, #34	; 0x22
   1558c:	bne	155c4 <__assert_fail@plt+0x4738>
   15590:	ldrd	r4, [sp]
   15594:	ldr	r6, [sp, #8]
   15598:	add	sp, sp, #12
   1559c:	pop	{pc}		; (ldr pc, [sp], #4)
   155a0:	add	r2, r0, #1
   155a4:	mov	r1, r6
   155a8:	mov	r0, r5
   155ac:	bl	10c88 <memcpy@plt>
   155b0:	ldrd	r4, [sp]
   155b4:	mov	r0, #0
   155b8:	ldr	r6, [sp, #8]
   155bc:	add	sp, sp, #12
   155c0:	pop	{pc}		; (ldr pc, [sp], #4)
   155c4:	sub	r4, r4, #1
   155c8:	mov	r1, r6
   155cc:	mov	r2, r4
   155d0:	mov	r0, r5
   155d4:	bl	10c88 <memcpy@plt>
   155d8:	mov	r3, #0
   155dc:	mov	r0, #34	; 0x22
   155e0:	strb	r3, [r5, r4]
   155e4:	ldrd	r4, [sp]
   155e8:	ldr	r6, [sp, #8]
   155ec:	add	sp, sp, #12
   155f0:	pop	{pc}		; (ldr pc, [sp], #4)
   155f4:	cmp	r4, #0
   155f8:	mov	r0, #22
   155fc:	strbne	r6, [r5]
   15600:	ldrd	r4, [sp]
   15604:	ldr	r6, [sp, #8]
   15608:	add	sp, sp, #12
   1560c:	pop	{pc}		; (ldr pc, [sp], #4)
   15610:	mov	r1, #0
   15614:	b	10e38 <setlocale@plt>
   15618:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1561c:	mov	r7, r0
   15620:	ldr	r6, [pc, #72]	; 15670 <__assert_fail@plt+0x47e4>
   15624:	ldr	r5, [pc, #72]	; 15674 <__assert_fail@plt+0x47e8>
   15628:	add	r6, pc, r6
   1562c:	add	r5, pc, r5
   15630:	sub	r6, r6, r5
   15634:	mov	r8, r1
   15638:	mov	r9, r2
   1563c:	bl	10c20 <calloc@plt-0x20>
   15640:	asrs	r6, r6, #2
   15644:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15648:	mov	r4, #0
   1564c:	add	r4, r4, #1
   15650:	ldr	r3, [r5], #4
   15654:	mov	r2, r9
   15658:	mov	r1, r8
   1565c:	mov	r0, r7
   15660:	blx	r3
   15664:	cmp	r6, r4
   15668:	bne	1564c <__assert_fail@plt+0x47c0>
   1566c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15670:	andeq	r1, r1, r4, ror #17
   15674:	ldrdeq	r1, [r1], -ip
   15678:	bx	lr
   1567c:	ldr	r3, [pc, #12]	; 15690 <__assert_fail@plt+0x4804>
   15680:	mov	r1, #0
   15684:	add	r3, pc, r3
   15688:	ldr	r2, [r3]
   1568c:	b	10de4 <__cxa_atexit@plt>
   15690:	andeq	r1, r1, r0, asr sl

Disassembly of section .fini:

00015694 <.fini>:
   15694:	push	{r3, lr}
   15698:	pop	{r3, pc}
