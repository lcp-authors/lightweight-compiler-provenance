
../repos/coreutils/src/mkfifo:     file format elf32-littlearm


Disassembly of section .init:

00011714 <.init>:
   11714:	push	{r3, lr}
   11718:	bl	11b9c <__assert_fail@plt+0x48>
   1171c:	pop	{r3, pc}

Disassembly of section .plt:

00011720 <fstatfs64@plt-0x14>:
   11720:	push	{lr}		; (str lr, [sp, #-4]!)
   11724:	ldr	lr, [pc, #4]	; 11730 <fstatfs64@plt-0x4>
   11728:	add	lr, pc, lr
   1172c:	ldr	pc, [lr, #8]!
   11730:	ldrdeq	sl, [r1], -r0

00011734 <fstatfs64@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #106496	; 0x1a000
   1173c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011740 <selabel_lookup@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #106496	; 0x1a000
   11748:	ldr	pc, [ip, #2248]!	; 0x8c8

0001174c <calloc@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #106496	; 0x1a000
   11754:	ldr	pc, [ip, #2240]!	; 0x8c0

00011758 <fputs_unlocked@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #106496	; 0x1a000
   11760:	ldr	pc, [ip, #2232]!	; 0x8b8

00011764 <raise@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #106496	; 0x1a000
   1176c:	ldr	pc, [ip, #2224]!	; 0x8b0

00011770 <is_selinux_enabled@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #106496	; 0x1a000
   11778:	ldr	pc, [ip, #2216]!	; 0x8a8

0001177c <strcmp@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #106496	; 0x1a000
   11784:	ldr	pc, [ip, #2208]!	; 0x8a0

00011788 <context_type_get@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #106496	; 0x1a000
   11790:	ldr	pc, [ip, #2200]!	; 0x898

00011794 <fflush@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #106496	; 0x1a000
   1179c:	ldr	pc, [ip, #2192]!	; 0x890

000117a0 <lsetfilecon@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #106496	; 0x1a000
   117a8:	ldr	pc, [ip, #2184]!	; 0x888

000117ac <memmove@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #106496	; 0x1a000
   117b4:	ldr	pc, [ip, #2176]!	; 0x880

000117b8 <free@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #106496	; 0x1a000
   117c0:	ldr	pc, [ip, #2168]!	; 0x878

000117c4 <faccessat@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #106496	; 0x1a000
   117cc:	ldr	pc, [ip, #2160]!	; 0x870

000117d0 <_exit@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #106496	; 0x1a000
   117d8:	ldr	pc, [ip, #2152]!	; 0x868

000117dc <memcpy@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #106496	; 0x1a000
   117e4:	ldr	pc, [ip, #2144]!	; 0x860

000117e8 <mbsinit@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #106496	; 0x1a000
   117f0:	ldr	pc, [ip, #2136]!	; 0x858

000117f4 <context_new@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #106496	; 0x1a000
   117fc:	ldr	pc, [ip, #2128]!	; 0x850

00011800 <memcmp@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #106496	; 0x1a000
   11808:	ldr	pc, [ip, #2120]!	; 0x848

0001180c <dcgettext@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #106496	; 0x1a000
   11814:	ldr	pc, [ip, #2112]!	; 0x840

00011818 <context_type_set@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #106496	; 0x1a000
   11820:	ldr	pc, [ip, #2104]!	; 0x838

00011824 <realloc@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #106496	; 0x1a000
   1182c:	ldr	pc, [ip, #2096]!	; 0x830

00011830 <fgetfilecon@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #106496	; 0x1a000
   11838:	ldr	pc, [ip, #2088]!	; 0x828

0001183c <textdomain@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #106496	; 0x1a000
   11844:	ldr	pc, [ip, #2080]!	; 0x820

00011848 <rawmemchr@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #106496	; 0x1a000
   11850:	ldr	pc, [ip, #2072]!	; 0x818

00011854 <__fxstatat64@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #106496	; 0x1a000
   1185c:	ldr	pc, [ip, #2064]!	; 0x810

00011860 <iswprint@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #106496	; 0x1a000
   11868:	ldr	pc, [ip, #2056]!	; 0x808

0001186c <__fxstat64@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #106496	; 0x1a000
   11874:	ldr	pc, [ip, #2048]!	; 0x800

00011878 <readlink@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #106496	; 0x1a000
   11880:	ldr	pc, [ip, #2040]!	; 0x7f8

00011884 <fwrite@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #106496	; 0x1a000
   1188c:	ldr	pc, [ip, #2032]!	; 0x7f0

00011890 <lseek64@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #106496	; 0x1a000
   11898:	ldr	pc, [ip, #2024]!	; 0x7e8

0001189c <__ctype_get_mb_cur_max@plt>:
   1189c:	add	ip, pc, #0, 12
   118a0:	add	ip, ip, #106496	; 0x1a000
   118a4:	ldr	pc, [ip, #2016]!	; 0x7e0

000118a8 <getcon@plt>:
   118a8:	add	ip, pc, #0, 12
   118ac:	add	ip, ip, #106496	; 0x1a000
   118b0:	ldr	pc, [ip, #2008]!	; 0x7d8

000118b4 <__fpending@plt>:
   118b4:	add	ip, pc, #0, 12
   118b8:	add	ip, ip, #106496	; 0x1a000
   118bc:	ldr	pc, [ip, #2000]!	; 0x7d0

000118c0 <ferror_unlocked@plt>:
   118c0:	add	ip, pc, #0, 12
   118c4:	add	ip, ip, #106496	; 0x1a000
   118c8:	ldr	pc, [ip, #1992]!	; 0x7c8

000118cc <mbrtowc@plt>:
   118cc:	add	ip, pc, #0, 12
   118d0:	add	ip, ip, #106496	; 0x1a000
   118d4:	ldr	pc, [ip, #1984]!	; 0x7c0

000118d8 <error@plt>:
   118d8:	add	ip, pc, #0, 12
   118dc:	add	ip, ip, #106496	; 0x1a000
   118e0:	ldr	pc, [ip, #1976]!	; 0x7b8

000118e4 <open64@plt>:
   118e4:	add	ip, pc, #0, 12
   118e8:	add	ip, ip, #106496	; 0x1a000
   118ec:	ldr	pc, [ip, #1968]!	; 0x7b0

000118f0 <lgetfilecon@plt>:
   118f0:	add	ip, pc, #0, 12
   118f4:	add	ip, ip, #106496	; 0x1a000
   118f8:	ldr	pc, [ip, #1960]!	; 0x7a8

000118fc <malloc@plt>:
   118fc:	add	ip, pc, #0, 12
   11900:	add	ip, ip, #106496	; 0x1a000
   11904:	ldr	pc, [ip, #1952]!	; 0x7a0

00011908 <__libc_start_main@plt>:
   11908:	add	ip, pc, #0, 12
   1190c:	add	ip, ip, #106496	; 0x1a000
   11910:	ldr	pc, [ip, #1944]!	; 0x798

00011914 <__freading@plt>:
   11914:	add	ip, pc, #0, 12
   11918:	add	ip, ip, #106496	; 0x1a000
   1191c:	ldr	pc, [ip, #1936]!	; 0x790

00011920 <__gmon_start__@plt>:
   11920:	add	ip, pc, #0, 12
   11924:	add	ip, ip, #106496	; 0x1a000
   11928:	ldr	pc, [ip, #1928]!	; 0x788

0001192c <context_free@plt>:
   1192c:	add	ip, pc, #0, 12
   11930:	add	ip, ip, #106496	; 0x1a000
   11934:	ldr	pc, [ip, #1920]!	; 0x780

00011938 <getopt_long@plt>:
   11938:	add	ip, pc, #0, 12
   1193c:	add	ip, ip, #106496	; 0x1a000
   11940:	ldr	pc, [ip, #1912]!	; 0x778

00011944 <__ctype_b_loc@plt>:
   11944:	add	ip, pc, #0, 12
   11948:	add	ip, ip, #106496	; 0x1a000
   1194c:	ldr	pc, [ip, #1904]!	; 0x770

00011950 <getcwd@plt>:
   11950:	add	ip, pc, #0, 12
   11954:	add	ip, ip, #106496	; 0x1a000
   11958:	ldr	pc, [ip, #1896]!	; 0x768

0001195c <exit@plt>:
   1195c:	add	ip, pc, #0, 12
   11960:	add	ip, ip, #106496	; 0x1a000
   11964:	ldr	pc, [ip, #1888]!	; 0x760

00011968 <getfilecon@plt>:
   11968:	add	ip, pc, #0, 12
   1196c:	add	ip, ip, #106496	; 0x1a000
   11970:	ldr	pc, [ip, #1880]!	; 0x758

00011974 <strlen@plt>:
   11974:	add	ip, pc, #0, 12
   11978:	add	ip, ip, #106496	; 0x1a000
   1197c:	ldr	pc, [ip, #1872]!	; 0x750

00011980 <selabel_open@plt>:
   11980:	add	ip, pc, #0, 12
   11984:	add	ip, ip, #106496	; 0x1a000
   11988:	ldr	pc, [ip, #1864]!	; 0x748

0001198c <openat64@plt>:
   1198c:	add	ip, pc, #0, 12
   11990:	add	ip, ip, #106496	; 0x1a000
   11994:	ldr	pc, [ip, #1856]!	; 0x740

00011998 <setfscreatecon@plt>:
   11998:	add	ip, pc, #0, 12
   1199c:	add	ip, ip, #106496	; 0x1a000
   119a0:	ldr	pc, [ip, #1848]!	; 0x738

000119a4 <__errno_location@plt>:
   119a4:	add	ip, pc, #0, 12
   119a8:	add	ip, ip, #106496	; 0x1a000
   119ac:	ldr	pc, [ip, #1840]!	; 0x730

000119b0 <__sprintf_chk@plt>:
   119b0:	add	ip, pc, #0, 12
   119b4:	add	ip, ip, #106496	; 0x1a000
   119b8:	ldr	pc, [ip, #1832]!	; 0x728

000119bc <__cxa_atexit@plt>:
   119bc:	add	ip, pc, #0, 12
   119c0:	add	ip, ip, #106496	; 0x1a000
   119c4:	ldr	pc, [ip, #1824]!	; 0x720

000119c8 <memset@plt>:
   119c8:	add	ip, pc, #0, 12
   119cc:	add	ip, ip, #106496	; 0x1a000
   119d0:	ldr	pc, [ip, #1816]!	; 0x718

000119d4 <__printf_chk@plt>:
   119d4:	add	ip, pc, #0, 12
   119d8:	add	ip, ip, #106496	; 0x1a000
   119dc:	ldr	pc, [ip, #1808]!	; 0x710

000119e0 <fileno@plt>:
   119e0:	add	ip, pc, #0, 12
   119e4:	add	ip, ip, #106496	; 0x1a000
   119e8:	ldr	pc, [ip, #1800]!	; 0x708

000119ec <__fprintf_chk@plt>:
   119ec:	add	ip, pc, #0, 12
   119f0:	add	ip, ip, #106496	; 0x1a000
   119f4:	ldr	pc, [ip, #1792]!	; 0x700

000119f8 <fclose@plt>:
   119f8:	add	ip, pc, #0, 12
   119fc:	add	ip, ip, #106496	; 0x1a000
   11a00:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a04 <fseeko64@plt>:
   11a04:	add	ip, pc, #0, 12
   11a08:	add	ip, ip, #106496	; 0x1a000
   11a0c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a10 <fcntl64@plt>:
   11a10:	add	ip, pc, #0, 12
   11a14:	add	ip, ip, #106496	; 0x1a000
   11a18:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a1c <setlocale@plt>:
   11a1c:	add	ip, pc, #0, 12
   11a20:	add	ip, ip, #106496	; 0x1a000
   11a24:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a28 <fsetfilecon@plt>:
   11a28:	add	ip, pc, #0, 12
   11a2c:	add	ip, ip, #106496	; 0x1a000
   11a30:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a34 <strrchr@plt>:
   11a34:	add	ip, pc, #0, 12
   11a38:	add	ip, ip, #106496	; 0x1a000
   11a3c:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a40 <nl_langinfo@plt>:
   11a40:	add	ip, pc, #0, 12
   11a44:	add	ip, ip, #106496	; 0x1a000
   11a48:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a4c <readdir64@plt>:
   11a4c:	add	ip, pc, #0, 12
   11a50:	add	ip, ip, #106496	; 0x1a000
   11a54:	ldr	pc, [ip, #1728]!	; 0x6c0

00011a58 <fdopendir@plt>:
   11a58:	add	ip, pc, #0, 12
   11a5c:	add	ip, ip, #106496	; 0x1a000
   11a60:	ldr	pc, [ip, #1720]!	; 0x6b8

00011a64 <security_compute_create@plt>:
   11a64:	add	ip, pc, #0, 12
   11a68:	add	ip, ip, #106496	; 0x1a000
   11a6c:	ldr	pc, [ip, #1712]!	; 0x6b0

00011a70 <dirfd@plt>:
   11a70:	add	ip, pc, #0, 12
   11a74:	add	ip, ip, #106496	; 0x1a000
   11a78:	ldr	pc, [ip, #1704]!	; 0x6a8

00011a7c <fchdir@plt>:
   11a7c:	add	ip, pc, #0, 12
   11a80:	add	ip, ip, #106496	; 0x1a000
   11a84:	ldr	pc, [ip, #1696]!	; 0x6a0

00011a88 <qsort@plt>:
   11a88:	add	ip, pc, #0, 12
   11a8c:	add	ip, ip, #106496	; 0x1a000
   11a90:	ldr	pc, [ip, #1688]!	; 0x698

00011a94 <freecon@plt>:
   11a94:	add	ip, pc, #0, 12
   11a98:	add	ip, ip, #106496	; 0x1a000
   11a9c:	ldr	pc, [ip, #1680]!	; 0x690

00011aa0 <bindtextdomain@plt>:
   11aa0:	add	ip, pc, #0, 12
   11aa4:	add	ip, ip, #106496	; 0x1a000
   11aa8:	ldr	pc, [ip, #1672]!	; 0x688

00011aac <getfscreatecon@plt>:
   11aac:	add	ip, pc, #0, 12
   11ab0:	add	ip, ip, #106496	; 0x1a000
   11ab4:	ldr	pc, [ip, #1664]!	; 0x680

00011ab8 <umask@plt>:
   11ab8:	add	ip, pc, #0, 12
   11abc:	add	ip, ip, #106496	; 0x1a000
   11ac0:	ldr	pc, [ip, #1656]!	; 0x678

00011ac4 <context_str@plt>:
   11ac4:	add	ip, pc, #0, 12
   11ac8:	add	ip, ip, #106496	; 0x1a000
   11acc:	ldr	pc, [ip, #1648]!	; 0x670

00011ad0 <chmod@plt>:
   11ad0:	add	ip, pc, #0, 12
   11ad4:	add	ip, ip, #106496	; 0x1a000
   11ad8:	ldr	pc, [ip, #1640]!	; 0x668

00011adc <__xstat64@plt>:
   11adc:	add	ip, pc, #0, 12
   11ae0:	add	ip, ip, #106496	; 0x1a000
   11ae4:	ldr	pc, [ip, #1632]!	; 0x660

00011ae8 <strncmp@plt>:
   11ae8:	add	ip, pc, #0, 12
   11aec:	add	ip, ip, #106496	; 0x1a000
   11af0:	ldr	pc, [ip, #1624]!	; 0x658

00011af4 <abort@plt>:
   11af4:	add	ip, pc, #0, 12
   11af8:	add	ip, ip, #106496	; 0x1a000
   11afc:	ldr	pc, [ip, #1616]!	; 0x650

00011b00 <close@plt>:
   11b00:	add	ip, pc, #0, 12
   11b04:	add	ip, ip, #106496	; 0x1a000
   11b08:	ldr	pc, [ip, #1608]!	; 0x648

00011b0c <__lxstat64@plt>:
   11b0c:	add	ip, pc, #0, 12
   11b10:	add	ip, ip, #106496	; 0x1a000
   11b14:	ldr	pc, [ip, #1600]!	; 0x640

00011b18 <mkfifo@plt>:
   11b18:	add	ip, pc, #0, 12
   11b1c:	add	ip, ip, #106496	; 0x1a000
   11b20:	ldr	pc, [ip, #1592]!	; 0x638

00011b24 <mode_to_security_class@plt>:
   11b24:	add	ip, pc, #0, 12
   11b28:	add	ip, ip, #106496	; 0x1a000
   11b2c:	ldr	pc, [ip, #1584]!	; 0x630

00011b30 <closedir@plt>:
   11b30:	add	ip, pc, #0, 12
   11b34:	add	ip, ip, #106496	; 0x1a000
   11b38:	ldr	pc, [ip, #1576]!	; 0x628

00011b3c <strspn@plt>:
   11b3c:	add	ip, pc, #0, 12
   11b40:	add	ip, ip, #106496	; 0x1a000
   11b44:	ldr	pc, [ip, #1568]!	; 0x620

00011b48 <__mempcpy_chk@plt>:
   11b48:	add	ip, pc, #0, 12
   11b4c:	add	ip, ip, #106496	; 0x1a000
   11b50:	ldr	pc, [ip, #1560]!	; 0x618

00011b54 <__assert_fail@plt>:
   11b54:	add	ip, pc, #0, 12
   11b58:	add	ip, ip, #106496	; 0x1a000
   11b5c:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00011b60 <lchmod@@Base-0x492c>:
   11b60:	mov	fp, #0
   11b64:	mov	lr, #0
   11b68:	pop	{r1}		; (ldr r1, [sp], #4)
   11b6c:	mov	r2, sp
   11b70:	push	{r2}		; (str r2, [sp, #-4]!)
   11b74:	push	{r0}		; (str r0, [sp, #-4]!)
   11b78:	ldr	ip, [pc, #16]	; 11b90 <__assert_fail@plt+0x3c>
   11b7c:	push	{ip}		; (str ip, [sp, #-4]!)
   11b80:	ldr	r0, [pc, #12]	; 11b94 <__assert_fail@plt+0x40>
   11b84:	ldr	r3, [pc, #12]	; 11b98 <__assert_fail@plt+0x44>
   11b88:	bl	11908 <__libc_start_main@plt>
   11b8c:	bl	11af4 <abort@plt>
   11b90:	andeq	sl, r1, r4, asr #7
   11b94:	andeq	r1, r1, ip, lsr #30
   11b98:	andeq	sl, r1, r4, ror #6
   11b9c:	ldr	r3, [pc, #20]	; 11bb8 <__assert_fail@plt+0x64>
   11ba0:	ldr	r2, [pc, #20]	; 11bbc <__assert_fail@plt+0x68>
   11ba4:	add	r3, pc, r3
   11ba8:	ldr	r2, [r3, r2]
   11bac:	cmp	r2, #0
   11bb0:	bxeq	lr
   11bb4:	b	11920 <__gmon_start__@plt>
   11bb8:	andeq	sl, r1, r4, asr r4
   11bbc:	andeq	r0, r0, r0, ror r1
   11bc0:	ldr	r0, [pc, #24]	; 11be0 <__assert_fail@plt+0x8c>
   11bc4:	ldr	r3, [pc, #24]	; 11be4 <__assert_fail@plt+0x90>
   11bc8:	cmp	r3, r0
   11bcc:	bxeq	lr
   11bd0:	ldr	r3, [pc, #16]	; 11be8 <__assert_fail@plt+0x94>
   11bd4:	cmp	r3, #0
   11bd8:	bxeq	lr
   11bdc:	bx	r3
   11be0:	andeq	ip, r2, r8, asr #3
   11be4:	andeq	ip, r2, r8, asr #3
   11be8:	andeq	r0, r0, r0
   11bec:	ldr	r0, [pc, #36]	; 11c18 <__assert_fail@plt+0xc4>
   11bf0:	ldr	r1, [pc, #36]	; 11c1c <__assert_fail@plt+0xc8>
   11bf4:	sub	r1, r1, r0
   11bf8:	asr	r1, r1, #2
   11bfc:	add	r1, r1, r1, lsr #31
   11c00:	asrs	r1, r1, #1
   11c04:	bxeq	lr
   11c08:	ldr	r3, [pc, #16]	; 11c20 <__assert_fail@plt+0xcc>
   11c0c:	cmp	r3, #0
   11c10:	bxeq	lr
   11c14:	bx	r3
   11c18:	andeq	ip, r2, r8, asr #3
   11c1c:	andeq	ip, r2, r8, asr #3
   11c20:	andeq	r0, r0, r0
   11c24:	push	{r4, lr}
   11c28:	ldr	r4, [pc, #24]	; 11c48 <__assert_fail@plt+0xf4>
   11c2c:	ldrb	r3, [r4]
   11c30:	cmp	r3, #0
   11c34:	popne	{r4, pc}
   11c38:	bl	11bc0 <__assert_fail@plt+0x6c>
   11c3c:	mov	r3, #1
   11c40:	strb	r3, [r4]
   11c44:	pop	{r4, pc}
   11c48:	andeq	ip, r2, r4, ror #3
   11c4c:	b	11bec <__assert_fail@plt+0x98>
   11c50:	push	{fp, lr}
   11c54:	mov	fp, sp
   11c58:	mov	r4, r0
   11c5c:	cmp	r0, #0
   11c60:	bne	11d34 <__assert_fail@plt+0x1e0>
   11c64:	movw	r1, #42091	; 0xa46b
   11c68:	movt	r1, #1
   11c6c:	mov	r0, #0
   11c70:	mov	r2, #5
   11c74:	bl	1180c <dcgettext@plt>
   11c78:	mov	r1, r0
   11c7c:	movw	r0, #49648	; 0xc1f0
   11c80:	movt	r0, #2
   11c84:	ldr	r2, [r0]
   11c88:	mov	r0, #1
   11c8c:	bl	119d4 <__printf_chk@plt>
   11c90:	movw	r1, #42122	; 0xa48a
   11c94:	movt	r1, #1
   11c98:	mov	r0, #0
   11c9c:	mov	r2, #5
   11ca0:	bl	1180c <dcgettext@plt>
   11ca4:	movw	r5, #49628	; 0xc1dc
   11ca8:	movt	r5, #2
   11cac:	ldr	r1, [r5]
   11cb0:	bl	11758 <fputs_unlocked@plt>
   11cb4:	bl	11d78 <__assert_fail@plt+0x224>
   11cb8:	movw	r1, #42172	; 0xa4bc
   11cbc:	movt	r1, #1
   11cc0:	mov	r0, #0
   11cc4:	mov	r2, #5
   11cc8:	bl	1180c <dcgettext@plt>
   11ccc:	ldr	r1, [r5]
   11cd0:	bl	11758 <fputs_unlocked@plt>
   11cd4:	movw	r1, #42245	; 0xa505
   11cd8:	movt	r1, #1
   11cdc:	mov	r0, #0
   11ce0:	mov	r2, #5
   11ce4:	bl	1180c <dcgettext@plt>
   11ce8:	ldr	r1, [r5]
   11cec:	bl	11758 <fputs_unlocked@plt>
   11cf0:	movw	r1, #42452	; 0xa5d4
   11cf4:	movt	r1, #1
   11cf8:	mov	r0, #0
   11cfc:	mov	r2, #5
   11d00:	bl	1180c <dcgettext@plt>
   11d04:	ldr	r1, [r5]
   11d08:	bl	11758 <fputs_unlocked@plt>
   11d0c:	movw	r1, #42497	; 0xa601
   11d10:	movt	r1, #1
   11d14:	mov	r0, #0
   11d18:	mov	r2, #5
   11d1c:	bl	1180c <dcgettext@plt>
   11d20:	ldr	r1, [r5]
   11d24:	bl	11758 <fputs_unlocked@plt>
   11d28:	bl	11da8 <__assert_fail@plt+0x254>
   11d2c:	mov	r0, r4
   11d30:	bl	1195c <exit@plt>
   11d34:	movw	r0, #49624	; 0xc1d8
   11d38:	movt	r0, #2
   11d3c:	ldr	r5, [r0]
   11d40:	movw	r1, #42052	; 0xa444
   11d44:	movt	r1, #1
   11d48:	mov	r0, #0
   11d4c:	mov	r2, #5
   11d50:	bl	1180c <dcgettext@plt>
   11d54:	mov	r2, r0
   11d58:	movw	r0, #49648	; 0xc1f0
   11d5c:	movt	r0, #2
   11d60:	ldr	r3, [r0]
   11d64:	mov	r0, r5
   11d68:	mov	r1, #1
   11d6c:	bl	119ec <__fprintf_chk@plt>
   11d70:	mov	r0, r4
   11d74:	bl	1195c <exit@plt>
   11d78:	push	{fp, lr}
   11d7c:	mov	fp, sp
   11d80:	movw	r1, #42891	; 0xa78b
   11d84:	movt	r1, #1
   11d88:	mov	r0, #0
   11d8c:	mov	r2, #5
   11d90:	bl	1180c <dcgettext@plt>
   11d94:	movw	r1, #49628	; 0xc1dc
   11d98:	movt	r1, #2
   11d9c:	ldr	r1, [r1]
   11da0:	pop	{fp, lr}
   11da4:	b	11758 <fputs_unlocked@plt>
   11da8:	push	{r4, r5, fp, lr}
   11dac:	add	fp, sp, #8
   11db0:	sub	sp, sp, #56	; 0x38
   11db4:	movw	r0, #43376	; 0xa970
   11db8:	movt	r0, #1
   11dbc:	add	r1, r0, #32
   11dc0:	mov	r5, sp
   11dc4:	mov	r2, #48	; 0x30
   11dc8:	vld1.64	{d16-d17}, [r1]
   11dcc:	add	r1, r5, #32
   11dd0:	add	r3, r0, #16
   11dd4:	vld1.64	{d18-d19}, [r0], r2
   11dd8:	vld1.64	{d20-d21}, [r3]
   11ddc:	vldr	d22, [r0]
   11de0:	vst1.64	{d16-d17}, [r1]
   11de4:	add	r0, r5, #16
   11de8:	vst1.64	{d20-d21}, [r0]
   11dec:	mov	r0, r5
   11df0:	vst1.64	{d18-d19}, [r0], r2
   11df4:	vstr	d22, [r0]
   11df8:	ldr	r1, [sp]
   11dfc:	cmp	r1, #0
   11e00:	beq	11e28 <__assert_fail@plt+0x2d4>
   11e04:	mov	r5, sp
   11e08:	movw	r4, #42551	; 0xa637
   11e0c:	movt	r4, #1
   11e10:	mov	r0, r4
   11e14:	bl	1177c <strcmp@plt>
   11e18:	cmp	r0, #0
   11e1c:	ldrne	r1, [r5, #8]!
   11e20:	cmpne	r1, #0
   11e24:	bne	11e10 <__assert_fail@plt+0x2bc>
   11e28:	ldr	r4, [r5, #4]
   11e2c:	movw	r1, #43061	; 0xa835
   11e30:	movt	r1, #1
   11e34:	mov	r0, #0
   11e38:	mov	r2, #5
   11e3c:	bl	1180c <dcgettext@plt>
   11e40:	mov	r1, r0
   11e44:	movw	r2, #42687	; 0xa6bf
   11e48:	movt	r2, #1
   11e4c:	movw	r3, #43084	; 0xa84c
   11e50:	movt	r3, #1
   11e54:	mov	r0, #1
   11e58:	bl	119d4 <__printf_chk@plt>
   11e5c:	movw	r5, #42551	; 0xa637
   11e60:	movt	r5, #1
   11e64:	cmp	r4, #0
   11e68:	moveq	r4, r5
   11e6c:	mov	r0, #5
   11e70:	mov	r1, #0
   11e74:	bl	11a1c <setlocale@plt>
   11e78:	cmp	r0, #0
   11e7c:	beq	11ebc <__assert_fail@plt+0x368>
   11e80:	movw	r1, #43124	; 0xa874
   11e84:	movt	r1, #1
   11e88:	mov	r2, #3
   11e8c:	bl	11ae8 <strncmp@plt>
   11e90:	cmp	r0, #0
   11e94:	beq	11ebc <__assert_fail@plt+0x368>
   11e98:	movw	r1, #43128	; 0xa878
   11e9c:	movt	r1, #1
   11ea0:	mov	r0, #0
   11ea4:	mov	r2, #5
   11ea8:	bl	1180c <dcgettext@plt>
   11eac:	movw	r1, #49628	; 0xc1dc
   11eb0:	movt	r1, #2
   11eb4:	ldr	r1, [r1]
   11eb8:	bl	11758 <fputs_unlocked@plt>
   11ebc:	movw	r1, #43199	; 0xa8bf
   11ec0:	movt	r1, #1
   11ec4:	mov	r0, #0
   11ec8:	mov	r2, #5
   11ecc:	bl	1180c <dcgettext@plt>
   11ed0:	mov	r1, r0
   11ed4:	movw	r2, #43084	; 0xa84c
   11ed8:	movt	r2, #1
   11edc:	mov	r0, #1
   11ee0:	mov	r3, r5
   11ee4:	bl	119d4 <__printf_chk@plt>
   11ee8:	movw	r1, #43226	; 0xa8da
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #0
   11ef4:	mov	r2, #5
   11ef8:	bl	1180c <dcgettext@plt>
   11efc:	mov	r1, r0
   11f00:	movw	r0, #42994	; 0xa7f2
   11f04:	movt	r0, #1
   11f08:	movw	r3, #43276	; 0xa90c
   11f0c:	movt	r3, #1
   11f10:	cmp	r4, r5
   11f14:	moveq	r3, r0
   11f18:	mov	r0, #1
   11f1c:	mov	r2, r4
   11f20:	bl	119d4 <__printf_chk@plt>
   11f24:	sub	sp, fp, #8
   11f28:	pop	{r4, r5, fp, pc}
   11f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f30:	add	fp, sp, #28
   11f34:	sub	sp, sp, #20
   11f38:	mov	r4, r1
   11f3c:	str	r0, [sp, #16]
   11f40:	ldr	r0, [r1]
   11f44:	bl	16c0c <lchmod@@Base+0x780>
   11f48:	movw	r1, #43276	; 0xa90c
   11f4c:	movt	r1, #1
   11f50:	mov	r0, #6
   11f54:	bl	11a1c <setlocale@plt>
   11f58:	movw	r6, #42691	; 0xa6c3
   11f5c:	movt	r6, #1
   11f60:	movw	r1, #42558	; 0xa63e
   11f64:	movt	r1, #1
   11f68:	mov	r0, r6
   11f6c:	bl	11aa0 <bindtextdomain@plt>
   11f70:	mov	r0, r6
   11f74:	bl	1183c <textdomain@plt>
   11f78:	movw	r0, #12436	; 0x3094
   11f7c:	movt	r0, #1
   11f80:	bl	1a3c8 <lchmod@@Base+0x3f3c>
   11f84:	mov	r7, #0
   11f88:	movw	r5, #42582	; 0xa656
   11f8c:	movt	r5, #1
   11f90:	movw	r6, #43296	; 0xa920
   11f94:	movt	r6, #1
   11f98:	movw	r9, #49632	; 0xc1e0
   11f9c:	movt	r9, #2
   11fa0:	mov	r8, #0
   11fa4:	mov	sl, #0
   11fa8:	mov	r0, #0
   11fac:	b	11fb4 <__assert_fail@plt+0x460>
   11fb0:	ldr	r0, [r9]
   11fb4:	str	r0, [sp, #12]
   11fb8:	b	11fe0 <__assert_fail@plt+0x48c>
   11fbc:	mov	r0, #0
   11fc0:	movw	r1, #42614	; 0xa676
   11fc4:	movt	r1, #1
   11fc8:	mov	r2, #5
   11fcc:	bl	1180c <dcgettext@plt>
   11fd0:	mov	r2, r0
   11fd4:	mov	r0, #0
   11fd8:	mov	r1, #0
   11fdc:	bl	118d8 <error@plt>
   11fe0:	str	r7, [sp]
   11fe4:	ldr	r0, [sp, #16]
   11fe8:	mov	r1, r4
   11fec:	mov	r2, r5
   11ff0:	mov	r3, r6
   11ff4:	bl	11938 <getopt_long@plt>
   11ff8:	cmp	r0, #89	; 0x59
   11ffc:	ble	12094 <__assert_fail@plt+0x540>
   12000:	cmp	r0, #90	; 0x5a
   12004:	bne	12088 <__assert_fail@plt+0x534>
   12008:	bl	11770 <is_selinux_enabled@plt>
   1200c:	ldr	r1, [r9]
   12010:	cmp	r0, #1
   12014:	bge	12024 <__assert_fail@plt+0x4d0>
   12018:	cmp	r1, #0
   1201c:	beq	11fe0 <__assert_fail@plt+0x48c>
   12020:	b	11fbc <__assert_fail@plt+0x468>
   12024:	cmp	r1, #0
   12028:	bne	12080 <__assert_fail@plt+0x52c>
   1202c:	mov	r0, #0
   12030:	mov	r1, #0
   12034:	mov	r2, #0
   12038:	bl	11980 <selabel_open@plt>
   1203c:	mov	sl, r0
   12040:	cmp	r0, #0
   12044:	bne	11fe0 <__assert_fail@plt+0x48c>
   12048:	bl	119a4 <__errno_location@plt>
   1204c:	ldr	r0, [r0]
   12050:	str	r0, [sp, #8]
   12054:	mov	sl, #0
   12058:	mov	r0, #0
   1205c:	movw	r1, #42586	; 0xa65a
   12060:	movt	r1, #1
   12064:	mov	r2, #5
   12068:	bl	1180c <dcgettext@plt>
   1206c:	mov	r2, r0
   12070:	mov	r0, #0
   12074:	ldr	r1, [sp, #8]
   12078:	bl	118d8 <error@plt>
   1207c:	b	11fe0 <__assert_fail@plt+0x48c>
   12080:	mov	r8, r1
   12084:	b	11fe0 <__assert_fail@plt+0x48c>
   12088:	cmp	r0, #109	; 0x6d
   1208c:	beq	11fb0 <__assert_fail@plt+0x45c>
   12090:	b	1228c <__assert_fail@plt+0x738>
   12094:	cmn	r0, #1
   12098:	bne	1222c <__assert_fail@plt+0x6d8>
   1209c:	movw	r9, #49616	; 0xc1d0
   120a0:	movt	r9, #2
   120a4:	ldr	r0, [r9]
   120a8:	ldr	r1, [sp, #16]
   120ac:	cmp	r0, r1
   120b0:	beq	12294 <__assert_fail@plt+0x740>
   120b4:	cmp	r8, #0
   120b8:	beq	120cc <__assert_fail@plt+0x578>
   120bc:	mov	r0, r8
   120c0:	bl	11998 <setfscreatecon@plt>
   120c4:	cmn	r0, #1
   120c8:	ble	122c0 <__assert_fail@plt+0x76c>
   120cc:	ldr	r0, [sp, #12]
   120d0:	cmp	r0, #0
   120d4:	beq	12134 <__assert_fail@plt+0x5e0>
   120d8:	bl	165a8 <lchmod@@Base+0x11c>
   120dc:	cmp	r0, #0
   120e0:	beq	122fc <__assert_fail@plt+0x7a8>
   120e4:	mov	r8, r0
   120e8:	mov	r5, #0
   120ec:	mov	r0, #0
   120f0:	bl	11ab8 <umask@plt>
   120f4:	mov	r6, r0
   120f8:	bl	11ab8 <umask@plt>
   120fc:	str	r5, [sp]
   12100:	movw	r0, #438	; 0x1b6
   12104:	mov	r1, #0
   12108:	mov	r2, r6
   1210c:	mov	r3, r8
   12110:	bl	16a64 <lchmod@@Base+0x5d8>
   12114:	mov	r6, r0
   12118:	mov	r0, r8
   1211c:	bl	13304 <__assert_fail@plt+0x17b0>
   12120:	cmp	r6, #512	; 0x200
   12124:	bcc	12138 <__assert_fail@plt+0x5e4>
   12128:	movw	r1, #42796	; 0xa72c
   1212c:	movt	r1, #1
   12130:	b	12304 <__assert_fail@plt+0x7b0>
   12134:	movw	r6, #438	; 0x1b6
   12138:	ldr	r0, [r9]
   1213c:	mov	r8, #0
   12140:	ldr	r1, [sp, #16]
   12144:	cmp	r0, r1
   12148:	bge	12220 <__assert_fail@plt+0x6cc>
   1214c:	mov	r8, #0
   12150:	b	12190 <__assert_fail@plt+0x63c>
   12154:	ldr	r0, [sp, #12]
   12158:	cmp	r0, #0
   1215c:	beq	12208 <__assert_fail@plt+0x6b4>
   12160:	ldr	r0, [r9]
   12164:	ldr	r0, [r4, r0, lsl #2]
   12168:	mov	r1, r6
   1216c:	bl	1648c <lchmod@@Base>
   12170:	cmp	r0, #0
   12174:	beq	12208 <__assert_fail@plt+0x6b4>
   12178:	bl	119a4 <__errno_location@plt>
   1217c:	ldr	r5, [r0]
   12180:	mov	r0, #0
   12184:	movw	r1, #42862	; 0xa76e
   12188:	movt	r1, #1
   1218c:	b	121d4 <__assert_fail@plt+0x680>
   12190:	cmp	sl, #0
   12194:	beq	121a8 <__assert_fail@plt+0x654>
   12198:	ldr	r1, [r4, r0, lsl #2]
   1219c:	mov	r0, sl
   121a0:	mov	r2, #4096	; 0x1000
   121a4:	bl	12320 <__assert_fail@plt+0x7cc>
   121a8:	ldr	r0, [r9]
   121ac:	ldr	r0, [r4, r0, lsl #2]
   121b0:	mov	r1, r6
   121b4:	bl	11b18 <mkfifo@plt>
   121b8:	cmp	r0, #0
   121bc:	beq	12154 <__assert_fail@plt+0x600>
   121c0:	bl	119a4 <__errno_location@plt>
   121c4:	ldr	r5, [r0]
   121c8:	mov	r0, #0
   121cc:	movw	r1, #42840	; 0xa758
   121d0:	movt	r1, #1
   121d4:	mov	r2, #5
   121d8:	bl	1180c <dcgettext@plt>
   121dc:	mov	r7, r0
   121e0:	ldr	r0, [r9]
   121e4:	ldr	r1, [r4, r0, lsl #2]
   121e8:	mov	r0, #4
   121ec:	bl	18250 <lchmod@@Base+0x1dc4>
   121f0:	mov	r3, r0
   121f4:	mov	r0, #0
   121f8:	mov	r1, r5
   121fc:	mov	r2, r7
   12200:	bl	118d8 <error@plt>
   12204:	mov	r8, #1
   12208:	ldr	r0, [r9]
   1220c:	add	r0, r0, #1
   12210:	str	r0, [r9]
   12214:	ldr	r1, [sp, #16]
   12218:	cmp	r0, r1
   1221c:	blt	12190 <__assert_fail@plt+0x63c>
   12220:	mov	r0, r8
   12224:	sub	sp, fp, #28
   12228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1222c:	cmn	r0, #3
   12230:	bne	1227c <__assert_fail@plt+0x728>
   12234:	movw	r0, #49536	; 0xc180
   12238:	movt	r0, #2
   1223c:	ldr	r3, [r0]
   12240:	movw	r0, #49628	; 0xc1dc
   12244:	movt	r0, #2
   12248:	ldr	r0, [r0]
   1224c:	mov	r1, #0
   12250:	movw	r2, #42701	; 0xa6cd
   12254:	movt	r2, #1
   12258:	str	r2, [sp]
   1225c:	str	r1, [sp, #4]
   12260:	movw	r1, #42551	; 0xa637
   12264:	movt	r1, #1
   12268:	movw	r2, #42687	; 0xa6bf
   1226c:	movt	r2, #1
   12270:	bl	18eb0 <lchmod@@Base+0x2a24>
   12274:	mov	r0, #0
   12278:	bl	1195c <exit@plt>
   1227c:	cmn	r0, #2
   12280:	bne	1228c <__assert_fail@plt+0x738>
   12284:	mov	r0, #0
   12288:	bl	11c50 <__assert_fail@plt+0xfc>
   1228c:	mov	r0, #1
   12290:	bl	11c50 <__assert_fail@plt+0xfc>
   12294:	movw	r1, #42717	; 0xa6dd
   12298:	movt	r1, #1
   1229c:	mov	r0, #0
   122a0:	mov	r2, #5
   122a4:	bl	1180c <dcgettext@plt>
   122a8:	mov	r2, r0
   122ac:	mov	r0, #0
   122b0:	mov	r1, #0
   122b4:	bl	118d8 <error@plt>
   122b8:	mov	r0, #1
   122bc:	bl	11c50 <__assert_fail@plt+0xfc>
   122c0:	bl	119a4 <__errno_location@plt>
   122c4:	ldr	r4, [r0]
   122c8:	movw	r1, #42733	; 0xa6ed
   122cc:	movt	r1, #1
   122d0:	mov	r0, #0
   122d4:	mov	r2, #5
   122d8:	bl	1180c <dcgettext@plt>
   122dc:	mov	r5, r0
   122e0:	mov	r0, r8
   122e4:	bl	18444 <lchmod@@Base+0x1fb8>
   122e8:	mov	r3, r0
   122ec:	mov	r0, #1
   122f0:	mov	r1, r4
   122f4:	mov	r2, r5
   122f8:	bl	118d8 <error@plt>
   122fc:	movw	r1, #42783	; 0xa71f
   12300:	movt	r1, #1
   12304:	mov	r0, #0
   12308:	mov	r2, #5
   1230c:	bl	1180c <dcgettext@plt>
   12310:	mov	r2, r0
   12314:	mov	r0, #1
   12318:	mov	r1, #0
   1231c:	bl	118d8 <error@plt>
   12320:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12324:	add	fp, sp, #24
   12328:	sub	sp, sp, #8
   1232c:	mov	r5, r2
   12330:	mov	r6, r1
   12334:	mov	r7, r0
   12338:	mov	r4, #0
   1233c:	str	r4, [sp, #4]
   12340:	str	r4, [sp]
   12344:	ldrb	r0, [r1]
   12348:	cmp	r0, #47	; 0x2f
   1234c:	beq	1236c <__assert_fail@plt+0x818>
   12350:	mov	r0, r6
   12354:	mov	r1, #2
   12358:	bl	128c4 <__assert_fail@plt+0xd70>
   1235c:	mov	r4, r0
   12360:	cmp	r0, #0
   12364:	mov	r6, r0
   12368:	beq	1243c <__assert_fail@plt+0x8e8>
   1236c:	add	r1, sp, #4
   12370:	mov	r0, r7
   12374:	mov	r2, r6
   12378:	mov	r3, r5
   1237c:	bl	11740 <selabel_lookup@plt>
   12380:	cmn	r0, #1
   12384:	ble	12418 <__assert_fail@plt+0x8c4>
   12388:	mov	r2, sp
   1238c:	mov	r0, r6
   12390:	mov	r1, r5
   12394:	bl	12498 <__assert_fail@plt+0x944>
   12398:	mvn	r8, #0
   1239c:	cmp	r0, #0
   123a0:	blt	1240c <__assert_fail@plt+0x8b8>
   123a4:	ldr	r0, [sp, #4]
   123a8:	bl	117f4 <context_new@plt>
   123ac:	cmp	r0, #0
   123b0:	beq	1240c <__assert_fail@plt+0x8b8>
   123b4:	mov	r7, r0
   123b8:	ldr	r0, [sp]
   123bc:	bl	117f4 <context_new@plt>
   123c0:	cmp	r0, #0
   123c4:	beq	12450 <__assert_fail@plt+0x8fc>
   123c8:	mov	r9, r0
   123cc:	mov	r0, r7
   123d0:	bl	11788 <context_type_get@plt>
   123d4:	cmp	r0, #0
   123d8:	beq	12454 <__assert_fail@plt+0x900>
   123dc:	mov	r1, r0
   123e0:	mov	r0, r9
   123e4:	bl	11818 <context_type_set@plt>
   123e8:	cmp	r0, #0
   123ec:	bne	12454 <__assert_fail@plt+0x900>
   123f0:	mov	r0, r9
   123f4:	bl	11ac4 <context_str@plt>
   123f8:	cmp	r0, #0
   123fc:	beq	12454 <__assert_fail@plt+0x900>
   12400:	bl	11998 <setfscreatecon@plt>
   12404:	mov	r8, r0
   12408:	b	12454 <__assert_fail@plt+0x900>
   1240c:	mov	r9, #0
   12410:	mov	r7, #0
   12414:	b	12454 <__assert_fail@plt+0x900>
   12418:	bl	119a4 <__errno_location@plt>
   1241c:	ldr	r1, [r0]
   12420:	mvn	r8, #0
   12424:	mov	r9, #0
   12428:	cmp	r1, #2
   1242c:	moveq	r1, #61	; 0x3d
   12430:	streq	r1, [r0]
   12434:	mov	r7, #0
   12438:	b	12454 <__assert_fail@plt+0x900>
   1243c:	mov	r9, #0
   12440:	mvn	r8, #0
   12444:	mov	r7, #0
   12448:	mov	r4, #0
   1244c:	b	12454 <__assert_fail@plt+0x900>
   12450:	mov	r9, #0
   12454:	bl	119a4 <__errno_location@plt>
   12458:	mov	r5, r0
   1245c:	ldr	r6, [r0]
   12460:	mov	r0, r7
   12464:	bl	1192c <context_free@plt>
   12468:	mov	r0, r9
   1246c:	bl	1192c <context_free@plt>
   12470:	ldr	r0, [sp, #4]
   12474:	bl	11a94 <freecon@plt>
   12478:	ldr	r0, [sp]
   1247c:	bl	11a94 <freecon@plt>
   12480:	mov	r0, r4
   12484:	bl	13304 <__assert_fail@plt+0x17b0>
   12488:	str	r6, [r5]
   1248c:	mov	r0, r8
   12490:	sub	sp, fp, #24
   12494:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12498:	push	{r4, r5, r6, r7, fp, lr}
   1249c:	add	fp, sp, #16
   124a0:	sub	sp, sp, #8
   124a4:	mov	r6, r2
   124a8:	mov	r7, r1
   124ac:	mov	r1, #0
   124b0:	str	r1, [sp, #4]
   124b4:	str	r1, [sp]
   124b8:	bl	1317c <__assert_fail@plt+0x1628>
   124bc:	mov	r4, r0
   124c0:	add	r0, sp, #4
   124c4:	bl	118a8 <getcon@plt>
   124c8:	mvn	r5, #0
   124cc:	cmp	r0, #0
   124d0:	blt	12510 <__assert_fail@plt+0x9bc>
   124d4:	mov	r1, sp
   124d8:	mov	r0, r4
   124dc:	bl	189ec <lchmod@@Base+0x2560>
   124e0:	cmp	r0, #0
   124e4:	blt	12510 <__assert_fail@plt+0x9bc>
   124e8:	mov	r0, r7
   124ec:	bl	11b24 <mode_to_security_class@plt>
   124f0:	cmp	r0, #0
   124f4:	beq	12510 <__assert_fail@plt+0x9bc>
   124f8:	mov	r2, r0
   124fc:	ldr	r1, [sp]
   12500:	ldr	r0, [sp, #4]
   12504:	mov	r3, r6
   12508:	bl	11a64 <security_compute_create@plt>
   1250c:	mov	r5, r0
   12510:	bl	119a4 <__errno_location@plt>
   12514:	mov	r6, r0
   12518:	ldr	r7, [r0]
   1251c:	mov	r0, r4
   12520:	bl	13304 <__assert_fail@plt+0x17b0>
   12524:	ldr	r0, [sp, #4]
   12528:	bl	11a94 <freecon@plt>
   1252c:	ldr	r0, [sp]
   12530:	bl	11a94 <freecon@plt>
   12534:	str	r7, [r6]
   12538:	mov	r0, r5
   1253c:	sub	sp, fp, #16
   12540:	pop	{r4, r5, r6, r7, fp, pc}
   12544:	push	{r4, r5, r6, r7, fp, lr}
   12548:	add	fp, sp, #16
   1254c:	sub	sp, sp, #8
   12550:	mov	r6, r2
   12554:	mov	r5, r0
   12558:	ldrb	r0, [r1]
   1255c:	mov	r4, #0
   12560:	cmp	r0, #47	; 0x2f
   12564:	beq	1258c <__assert_fail@plt+0xa38>
   12568:	mov	r0, r1
   1256c:	mov	r1, #2
   12570:	bl	128c4 <__assert_fail@plt+0xd70>
   12574:	mov	r4, r0
   12578:	cmp	r0, #0
   1257c:	mov	r1, r0
   12580:	moveq	r0, #0
   12584:	subeq	sp, fp, #16
   12588:	popeq	{r4, r5, r6, r7, fp, pc}
   1258c:	cmp	r6, #0
   12590:	beq	12628 <__assert_fail@plt+0xad4>
   12594:	mov	r7, #0
   12598:	stm	sp, {r1, r7}
   1259c:	mov	r0, sp
   125a0:	mov	r1, #16
   125a4:	mov	r2, #0
   125a8:	bl	193ac <lchmod@@Base+0x2f20>
   125ac:	mov	r6, r0
   125b0:	bl	13c64 <__assert_fail@plt+0x2110>
   125b4:	cmp	r0, #0
   125b8:	beq	125ec <__assert_fail@plt+0xa98>
   125bc:	mov	r7, #0
   125c0:	ldr	r1, [r6, #24]
   125c4:	mov	r0, r5
   125c8:	bl	12660 <__assert_fail@plt+0xb0c>
   125cc:	cmn	r0, #1
   125d0:	bgt	125dc <__assert_fail@plt+0xa88>
   125d4:	bl	119a4 <__errno_location@plt>
   125d8:	ldr	r7, [r0]
   125dc:	mov	r0, r6
   125e0:	bl	13c64 <__assert_fail@plt+0x2110>
   125e4:	cmp	r0, #0
   125e8:	bne	125c0 <__assert_fail@plt+0xa6c>
   125ec:	bl	119a4 <__errno_location@plt>
   125f0:	mov	r5, r0
   125f4:	ldr	r0, [r0]
   125f8:	cmp	r0, #0
   125fc:	movne	r7, r0
   12600:	mov	r0, r6
   12604:	bl	13ad8 <__assert_fail@plt+0x1f84>
   12608:	cmp	r0, #0
   1260c:	ldrne	r7, [r5]
   12610:	mov	r0, r4
   12614:	bl	13304 <__assert_fail@plt+0x17b0>
   12618:	clz	r0, r7
   1261c:	lsr	r0, r0, #5
   12620:	sub	sp, fp, #16
   12624:	pop	{r4, r5, r6, r7, fp, pc}
   12628:	mov	r0, r5
   1262c:	bl	12660 <__assert_fail@plt+0xb0c>
   12630:	mov	r5, r0
   12634:	bl	119a4 <__errno_location@plt>
   12638:	mov	r6, r0
   1263c:	ldr	r7, [r0]
   12640:	mov	r0, r4
   12644:	bl	13304 <__assert_fail@plt+0x17b0>
   12648:	str	r7, [r6]
   1264c:	add	r0, r5, #1
   12650:	cmn	r5, #1
   12654:	movwne	r0, #1
   12658:	sub	sp, fp, #16
   1265c:	pop	{r4, r5, r6, r7, fp, pc}
   12660:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12664:	add	fp, sp, #28
   12668:	sub	sp, sp, #116	; 0x74
   1266c:	mov	r7, r1
   12670:	mov	r5, r0
   12674:	mov	r0, #0
   12678:	str	r0, [sp, #4]
   1267c:	str	r0, [sp]
   12680:	cmp	r5, #0
   12684:	beq	126d4 <__assert_fail@plt+0xb80>
   12688:	mov	r0, r7
   1268c:	mov	r1, #32768	; 0x8000
   12690:	bl	118e4 <open64@plt>
   12694:	mov	r4, r0
   12698:	cmn	r0, #1
   1269c:	beq	1271c <__assert_fail@plt+0xbc8>
   126a0:	add	r1, sp, #8
   126a4:	mov	r0, r4
   126a8:	bl	1a3f0 <lchmod@@Base+0x3f64>
   126ac:	mov	r9, #1
   126b0:	cmn	r0, #1
   126b4:	bgt	12744 <__assert_fail@plt+0xbf0>
   126b8:	bl	119a4 <__errno_location@plt>
   126bc:	mov	r7, r0
   126c0:	ldr	r6, [r0]
   126c4:	mov	r8, #0
   126c8:	mvn	r5, #0
   126cc:	mov	sl, #0
   126d0:	b	1287c <__assert_fail@plt+0xd28>
   126d4:	mov	r0, sp
   126d8:	bl	11aac <getfscreatecon@plt>
   126dc:	mvn	r5, #0
   126e0:	cmp	r0, #0
   126e4:	blt	128a8 <__assert_fail@plt+0xd54>
   126e8:	ldr	r1, [sp]
   126ec:	cmp	r1, #0
   126f0:	beq	127d8 <__assert_fail@plt+0xc84>
   126f4:	mov	r0, r7
   126f8:	bl	117a0 <lsetfilecon@plt>
   126fc:	mov	r5, r0
   12700:	bl	119a4 <__errno_location@plt>
   12704:	mov	r4, r0
   12708:	ldr	r6, [r0]
   1270c:	ldr	r0, [sp]
   12710:	bl	11a94 <freecon@plt>
   12714:	str	r6, [r4]
   12718:	b	128a8 <__assert_fail@plt+0xd54>
   1271c:	bl	119a4 <__errno_location@plt>
   12720:	ldr	r0, [r0]
   12724:	cmp	r0, #40	; 0x28
   12728:	bne	12798 <__assert_fail@plt+0xc44>
   1272c:	add	r1, sp, #8
   12730:	mov	r0, r7
   12734:	bl	1a400 <lchmod@@Base+0x3f74>
   12738:	mov	r9, #0
   1273c:	cmp	r0, #0
   12740:	blt	12798 <__assert_fail@plt+0xc44>
   12744:	ldr	r3, [sp, #24]
   12748:	add	r1, sp, #4
   1274c:	mov	r0, r5
   12750:	mov	r2, r7
   12754:	bl	11740 <selabel_lookup@plt>
   12758:	cmn	r0, #1
   1275c:	ble	127b4 <__assert_fail@plt+0xc60>
   12760:	ldr	r0, [sp, #4]
   12764:	bl	117f4 <context_new@plt>
   12768:	mvn	r5, #0
   1276c:	cmp	r0, #0
   12770:	beq	127e8 <__assert_fail@plt+0xc94>
   12774:	mov	r8, r0
   12778:	mov	r1, sp
   1277c:	cmp	r9, #0
   12780:	beq	127f4 <__assert_fail@plt+0xca0>
   12784:	mov	r0, r4
   12788:	bl	18a94 <lchmod@@Base+0x2608>
   1278c:	cmp	r0, #0
   12790:	bge	12804 <__assert_fail@plt+0xcb0>
   12794:	b	12864 <__assert_fail@plt+0xd10>
   12798:	bl	119a4 <__errno_location@plt>
   1279c:	mov	r7, r0
   127a0:	ldr	r6, [r0]
   127a4:	mov	r8, #0
   127a8:	mvn	r5, #0
   127ac:	mov	sl, #0
   127b0:	b	12884 <__assert_fail@plt+0xd30>
   127b4:	bl	119a4 <__errno_location@plt>
   127b8:	ldr	r1, [r0]
   127bc:	mvn	r5, #0
   127c0:	mov	sl, #0
   127c4:	cmp	r1, #2
   127c8:	moveq	r1, #61	; 0x3d
   127cc:	streq	r1, [r0]
   127d0:	mov	r8, #0
   127d4:	b	12868 <__assert_fail@plt+0xd14>
   127d8:	bl	119a4 <__errno_location@plt>
   127dc:	mov	r1, #61	; 0x3d
   127e0:	str	r1, [r0]
   127e4:	b	128a8 <__assert_fail@plt+0xd54>
   127e8:	mov	sl, #0
   127ec:	mov	r8, #0
   127f0:	b	12868 <__assert_fail@plt+0xd14>
   127f4:	mov	r0, r7
   127f8:	bl	18a78 <lchmod@@Base+0x25ec>
   127fc:	cmp	r0, #0
   12800:	blt	12864 <__assert_fail@plt+0xd10>
   12804:	ldr	r0, [sp]
   12808:	bl	117f4 <context_new@plt>
   1280c:	cmp	r0, #0
   12810:	beq	12864 <__assert_fail@plt+0xd10>
   12814:	mov	sl, r0
   12818:	mov	r0, r8
   1281c:	bl	11788 <context_type_get@plt>
   12820:	cmp	r0, #0
   12824:	beq	12868 <__assert_fail@plt+0xd14>
   12828:	mov	r1, r0
   1282c:	mov	r0, sl
   12830:	bl	11818 <context_type_set@plt>
   12834:	cmp	r0, #0
   12838:	bne	12868 <__assert_fail@plt+0xd14>
   1283c:	mov	r0, sl
   12840:	bl	11ac4 <context_str@plt>
   12844:	cmp	r0, #0
   12848:	beq	12868 <__assert_fail@plt+0xd14>
   1284c:	mov	r1, r0
   12850:	cmp	r9, #0
   12854:	beq	128b4 <__assert_fail@plt+0xd60>
   12858:	mov	r0, r4
   1285c:	bl	11a28 <fsetfilecon@plt>
   12860:	b	128bc <__assert_fail@plt+0xd68>
   12864:	mov	sl, #0
   12868:	bl	119a4 <__errno_location@plt>
   1286c:	mov	r7, r0
   12870:	ldr	r6, [r0]
   12874:	cmn	r4, #1
   12878:	beq	12884 <__assert_fail@plt+0xd30>
   1287c:	mov	r0, r4
   12880:	bl	11b00 <close@plt>
   12884:	mov	r0, r8
   12888:	bl	1192c <context_free@plt>
   1288c:	mov	r0, sl
   12890:	bl	1192c <context_free@plt>
   12894:	ldr	r0, [sp, #4]
   12898:	bl	11a94 <freecon@plt>
   1289c:	ldr	r0, [sp]
   128a0:	bl	11a94 <freecon@plt>
   128a4:	str	r6, [r7]
   128a8:	mov	r0, r5
   128ac:	sub	sp, fp, #28
   128b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128b4:	mov	r0, r7
   128b8:	bl	117a0 <lsetfilecon@plt>
   128bc:	mov	r5, r0
   128c0:	b	12868 <__assert_fail@plt+0xd14>
   128c4:	push	{r4, r5, fp, lr}
   128c8:	add	fp, sp, #8
   128cc:	sub	sp, sp, #8
   128d0:	sub	sp, sp, #1024	; 0x400
   128d4:	mov	r2, sp
   128d8:	bl	128e4 <__assert_fail@plt+0xd90>
   128dc:	sub	sp, fp, #8
   128e0:	pop	{r4, r5, fp, pc}
   128e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128e8:	add	fp, sp, #28
   128ec:	sub	sp, sp, #164	; 0xa4
   128f0:	sub	sp, sp, #2048	; 0x800
   128f4:	mov	sl, r2
   128f8:	mov	r5, r1
   128fc:	mov	r9, r0
   12900:	mov	r6, #0
   12904:	str	r6, [fp, #-36]	; 0xffffffdc
   12908:	and	r0, r1, #3
   1290c:	str	r0, [sp, #28]
   12910:	bl	12ee8 <__assert_fail@plt+0x1394>
   12914:	cmp	r0, #0
   12918:	beq	1292c <__assert_fail@plt+0xdd8>
   1291c:	bl	119a4 <__errno_location@plt>
   12920:	mov	r1, #22
   12924:	str	r1, [r0]
   12928:	b	12ec0 <__assert_fail@plt+0x136c>
   1292c:	cmp	r9, #0
   12930:	beq	1298c <__assert_fail@plt+0xe38>
   12934:	ldrb	r0, [r9]
   12938:	cmp	r0, #0
   1293c:	beq	12998 <__assert_fail@plt+0xe44>
   12940:	sub	r0, fp, #1072	; 0x430
   12944:	bl	12ef8 <__assert_fail@plt+0x13a4>
   12948:	add	r0, sp, #136	; 0x88
   1294c:	bl	12ef8 <__assert_fail@plt+0x13a4>
   12950:	mov	r0, sl
   12954:	bl	12ef8 <__assert_fail@plt+0x13a4>
   12958:	ldr	r4, [sl]
   1295c:	ldrb	r0, [r9]
   12960:	cmp	r0, #47	; 0x2f
   12964:	bne	129ac <__assert_fail@plt+0xe58>
   12968:	mov	r0, r4
   1296c:	mov	r1, r9
   12970:	mov	r2, #0
   12974:	mvn	r3, #0
   12978:	bl	11b48 <__mempcpy_chk@plt>
   1297c:	mov	r6, r0
   12980:	mov	r0, #47	; 0x2f
   12984:	strb	r0, [r6], #1
   12988:	b	129d0 <__assert_fail@plt+0xe7c>
   1298c:	bl	119a4 <__errno_location@plt>
   12990:	mov	r1, #22
   12994:	b	129a0 <__assert_fail@plt+0xe4c>
   12998:	bl	119a4 <__errno_location@plt>
   1299c:	mov	r1, #2
   129a0:	str	r1, [r0]
   129a4:	mov	r6, #0
   129a8:	b	12ec0 <__assert_fail@plt+0x136c>
   129ac:	ldr	r1, [sl, #4]
   129b0:	mov	r0, r4
   129b4:	bl	11950 <getcwd@plt>
   129b8:	cmp	r0, #0
   129bc:	beq	12e18 <__assert_fail@plt+0x12c4>
   129c0:	mov	r0, r4
   129c4:	mov	r1, #0
   129c8:	bl	11848 <rawmemchr@plt>
   129cc:	mov	r6, r0
   129d0:	ldrb	r0, [r9]
   129d4:	cmp	r0, #0
   129d8:	beq	12df4 <__assert_fail@plt+0x12a0>
   129dc:	and	r1, r5, #4
   129e0:	str	r1, [sp, #24]
   129e4:	mov	r1, #0
   129e8:	str	r1, [sp, #4]
   129ec:	mov	r1, #0
   129f0:	str	r1, [sp, #12]
   129f4:	str	sl, [sp, #20]
   129f8:	uxtb	r1, r0
   129fc:	cmp	r1, #47	; 0x2f
   12a00:	bne	12a10 <__assert_fail@plt+0xebc>
   12a04:	ldrb	r0, [r9, #1]!
   12a08:	cmp	r0, #47	; 0x2f
   12a0c:	beq	12a04 <__assert_fail@plt+0xeb0>
   12a10:	mov	r8, r9
   12a14:	b	12a1c <__assert_fail@plt+0xec8>
   12a18:	add	r8, r8, #1
   12a1c:	ldrb	r1, [r8]
   12a20:	cmp	r1, #0
   12a24:	cmpne	r1, #47	; 0x2f
   12a28:	bne	12a18 <__assert_fail@plt+0xec4>
   12a2c:	sub	r7, r8, r9
   12a30:	cmp	r7, #1
   12a34:	beq	12a4c <__assert_fail@plt+0xef8>
   12a38:	cmp	r7, #2
   12a3c:	beq	12a5c <__assert_fail@plt+0xf08>
   12a40:	cmp	r7, #0
   12a44:	bne	12a70 <__assert_fail@plt+0xf1c>
   12a48:	b	12df4 <__assert_fail@plt+0x12a0>
   12a4c:	uxtb	r0, r0
   12a50:	cmp	r0, #46	; 0x2e
   12a54:	bne	12a70 <__assert_fail@plt+0xf1c>
   12a58:	b	12d90 <__assert_fail@plt+0x123c>
   12a5c:	uxtb	r0, r0
   12a60:	cmp	r0, #46	; 0x2e
   12a64:	ldrbeq	r0, [r9, #1]
   12a68:	cmpeq	r0, #46	; 0x2e
   12a6c:	beq	12d50 <__assert_fail@plt+0x11fc>
   12a70:	ldrb	r0, [r6, #-1]
   12a74:	cmp	r0, #47	; 0x2f
   12a78:	movne	r0, #47	; 0x2f
   12a7c:	strbne	r0, [r6], #1
   12a80:	ldr	r0, [sl, #4]
   12a84:	add	r0, r4, r0
   12a88:	sub	r0, r0, r6
   12a8c:	add	r5, r7, #2
   12a90:	cmp	r0, r5
   12a94:	bcc	12abc <__assert_fail@plt+0xf68>
   12a98:	b	12ad0 <__assert_fail@plt+0xf7c>
   12a9c:	sub	r0, r6, r4
   12aa0:	ldr	r4, [sl]
   12aa4:	ldr	r1, [sl, #4]
   12aa8:	add	r6, r4, r0
   12aac:	add	r0, r4, r1
   12ab0:	sub	r0, r0, r6
   12ab4:	cmp	r0, r5
   12ab8:	bcs	12ad0 <__assert_fail@plt+0xf7c>
   12abc:	mov	r0, sl
   12ac0:	bl	18944 <lchmod@@Base+0x24b8>
   12ac4:	cmp	r0, #0
   12ac8:	bne	12a9c <__assert_fail@plt+0xf48>
   12acc:	b	12ee4 <__assert_fail@plt+0x1390>
   12ad0:	mov	r0, r6
   12ad4:	mov	r1, r9
   12ad8:	str	r7, [sp, #16]
   12adc:	mov	r2, r7
   12ae0:	mvn	r3, #0
   12ae4:	bl	11b48 <__mempcpy_chk@plt>
   12ae8:	mov	r6, r0
   12aec:	mov	r0, #0
   12af0:	strb	r0, [r6]
   12af4:	ldr	r0, [sp, #24]
   12af8:	cmp	r0, #0
   12afc:	bne	12b5c <__assert_fail@plt+0x1008>
   12b00:	ldr	r5, [sp, #136]	; 0x88
   12b04:	ldr	r0, [sp, #140]	; 0x8c
   12b08:	sub	r7, r0, #1
   12b0c:	mov	r0, r4
   12b10:	mov	r1, r5
   12b14:	mov	r2, r7
   12b18:	bl	11878 <readlink@plt>
   12b1c:	cmp	r0, r7
   12b20:	blt	12b38 <__assert_fail@plt+0xfe4>
   12b24:	add	r0, sp, #136	; 0x88
   12b28:	bl	188c0 <lchmod@@Base+0x2434>
   12b2c:	cmp	r0, #0
   12b30:	bne	12b00 <__assert_fail@plt+0xfac>
   12b34:	b	12ee4 <__assert_fail@plt+0x1390>
   12b38:	mov	sl, r0
   12b3c:	cmp	r0, #0
   12b40:	blt	12b5c <__assert_fail@plt+0x1008>
   12b44:	ldr	r0, [sp, #4]
   12b48:	cmp	r0, #19
   12b4c:	bgt	12bcc <__assert_fail@plt+0x1078>
   12b50:	add	r0, r0, #1
   12b54:	str	r0, [sp, #4]
   12b58:	b	12c44 <__assert_fail@plt+0x10f0>
   12b5c:	ldr	r0, [sp, #28]
   12b60:	cmp	r0, #2
   12b64:	bne	12b74 <__assert_fail@plt+0x1020>
   12b68:	mov	r9, r8
   12b6c:	ldr	sl, [sp, #20]
   12b70:	b	12de8 <__assert_fail@plt+0x1294>
   12b74:	mov	r0, r8
   12b78:	bl	12fa4 <__assert_fail@plt+0x1450>
   12b7c:	cmp	r0, #0
   12b80:	beq	12ba0 <__assert_fail@plt+0x104c>
   12b84:	mov	r0, r4
   12b88:	mov	r1, r6
   12b8c:	bl	1302c <__assert_fail@plt+0x14d8>
   12b90:	cmp	r0, #0
   12b94:	ldr	sl, [sp, #20]
   12b98:	bne	12d90 <__assert_fail@plt+0x123c>
   12b9c:	b	12da8 <__assert_fail@plt+0x1254>
   12ba0:	ldr	r0, [sp, #24]
   12ba4:	cmp	r0, #0
   12ba8:	ldr	sl, [sp, #20]
   12bac:	beq	12d80 <__assert_fail@plt+0x122c>
   12bb0:	ldrb	r0, [r8]
   12bb4:	cmp	r0, #0
   12bb8:	beq	12d98 <__assert_fail@plt+0x1244>
   12bbc:	mov	r9, r8
   12bc0:	cmp	r0, #0
   12bc4:	bne	129f8 <__assert_fail@plt+0xea4>
   12bc8:	b	12df4 <__assert_fail@plt+0x12a0>
   12bcc:	ldrb	r0, [r9]
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c44 <__assert_fail@plt+0x10f0>
   12bd8:	mov	r0, #0
   12bdc:	ldr	r7, [sp, #16]
   12be0:	strb	r0, [r6, -r7]
   12be4:	ldrb	r0, [r4]
   12be8:	cmp	r0, #0
   12bec:	mov	r0, r4
   12bf0:	movw	r1, #43467	; 0xa9cb
   12bf4:	movt	r1, #1
   12bf8:	moveq	r0, r1
   12bfc:	add	r1, sp, #32
   12c00:	bl	1a3e0 <lchmod@@Base+0x3f54>
   12c04:	cmp	r0, #0
   12c08:	bne	12ed8 <__assert_fail@plt+0x1384>
   12c0c:	rsb	r0, r7, #0
   12c10:	ldrb	r1, [r9]
   12c14:	strb	r1, [r6, r0]
   12c18:	sub	r0, fp, #36	; 0x24
   12c1c:	mov	r1, r9
   12c20:	add	r2, sp, #32
   12c24:	bl	12f0c <__assert_fail@plt+0x13b8>
   12c28:	cmp	r0, #0
   12c2c:	beq	12c44 <__assert_fail@plt+0x10f0>
   12c30:	ldr	r0, [sp, #28]
   12c34:	cmp	r0, #2
   12c38:	ldr	sl, [sp, #20]
   12c3c:	beq	12d90 <__assert_fail@plt+0x123c>
   12c40:	b	12ecc <__assert_fail@plt+0x1378>
   12c44:	mov	r0, #0
   12c48:	strb	r0, [r5, sl]
   12c4c:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   12c50:	ldr	r0, [sp, #12]
   12c54:	tst	r0, #1
   12c58:	ldr	r0, [sp, #8]
   12c5c:	subne	r0, r8, r9
   12c60:	str	r0, [sp, #8]
   12c64:	mov	r0, r8
   12c68:	bl	11974 <strlen@plt>
   12c6c:	str	r0, [sp, #16]
   12c70:	adds	r7, r0, sl
   12c74:	bcs	12ee4 <__assert_fail@plt+0x1390>
   12c78:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   12c7c:	cmp	r0, r7
   12c80:	bhi	12ca4 <__assert_fail@plt+0x1150>
   12c84:	sub	r0, fp, #1072	; 0x430
   12c88:	bl	18944 <lchmod@@Base+0x24b8>
   12c8c:	cmp	r0, #0
   12c90:	beq	12ee4 <__assert_fail@plt+0x1390>
   12c94:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   12c98:	cmp	r0, r7
   12c9c:	bls	12c84 <__assert_fail@plt+0x1130>
   12ca0:	ldr	r9, [fp, #-1072]	; 0xfffffbd0
   12ca4:	ldr	r0, [sp, #12]
   12ca8:	tst	r0, #1
   12cac:	ldr	r0, [sp, #8]
   12cb0:	addne	r8, r9, r0
   12cb4:	add	r0, r9, sl
   12cb8:	ldr	r1, [sp, #16]
   12cbc:	add	r2, r1, #1
   12cc0:	mov	r1, r8
   12cc4:	bl	117ac <memmove@plt>
   12cc8:	mov	r0, r9
   12ccc:	mov	r1, r5
   12cd0:	mov	r2, sl
   12cd4:	bl	117dc <memcpy@plt>
   12cd8:	ldrb	r0, [r5]
   12cdc:	cmp	r0, #47	; 0x2f
   12ce0:	bne	12d14 <__assert_fail@plt+0x11c0>
   12ce4:	mov	r0, r4
   12ce8:	mov	r1, r5
   12cec:	mov	r2, #0
   12cf0:	mvn	r3, #0
   12cf4:	bl	11b48 <__mempcpy_chk@plt>
   12cf8:	mov	r6, r0
   12cfc:	mov	r0, #47	; 0x2f
   12d00:	strb	r0, [r6], #1
   12d04:	mov	r0, #1
   12d08:	str	r0, [sp, #12]
   12d0c:	ldr	sl, [sp, #20]
   12d10:	b	12de8 <__assert_fail@plt+0x1294>
   12d14:	add	r0, r4, #1
   12d18:	mov	r1, #1
   12d1c:	str	r1, [sp, #12]
   12d20:	cmp	r6, r0
   12d24:	ldr	sl, [sp, #20]
   12d28:	bls	12de8 <__assert_fail@plt+0x1294>
   12d2c:	sub	r0, r6, #1
   12d30:	mov	r6, r0
   12d34:	cmp	r0, r4
   12d38:	bls	12de8 <__assert_fail@plt+0x1294>
   12d3c:	mov	r0, r6
   12d40:	ldrb	r1, [r0, #-1]!
   12d44:	cmp	r1, #47	; 0x2f
   12d48:	bne	12d30 <__assert_fail@plt+0x11dc>
   12d4c:	b	12de8 <__assert_fail@plt+0x1294>
   12d50:	add	r0, r4, #1
   12d54:	cmp	r6, r0
   12d58:	bls	12d90 <__assert_fail@plt+0x123c>
   12d5c:	sub	r0, r6, #1
   12d60:	mov	r6, r0
   12d64:	cmp	r0, r4
   12d68:	bls	12d90 <__assert_fail@plt+0x123c>
   12d6c:	mov	r0, r6
   12d70:	ldrb	r1, [r0, #-1]!
   12d74:	cmp	r1, #47	; 0x2f
   12d78:	bne	12d60 <__assert_fail@plt+0x120c>
   12d7c:	b	12d90 <__assert_fail@plt+0x123c>
   12d80:	bl	119a4 <__errno_location@plt>
   12d84:	ldr	r0, [r0]
   12d88:	cmp	r0, #22
   12d8c:	bne	12da8 <__assert_fail@plt+0x1254>
   12d90:	mov	r9, r8
   12d94:	b	12de8 <__assert_fail@plt+0x1294>
   12d98:	mov	r0, r4
   12d9c:	bl	13038 <__assert_fail@plt+0x14e4>
   12da0:	cmp	r0, #0
   12da4:	bne	12d90 <__assert_fail@plt+0x123c>
   12da8:	mov	r5, #1
   12dac:	ldr	r0, [sp, #28]
   12db0:	cmp	r0, #1
   12db4:	bne	12e68 <__assert_fail@plt+0x1314>
   12db8:	bl	119a4 <__errno_location@plt>
   12dbc:	ldr	r0, [r0]
   12dc0:	cmp	r0, #2
   12dc4:	bne	12e68 <__assert_fail@plt+0x1314>
   12dc8:	mov	r0, r8
   12dcc:	movw	r1, #44665	; 0xae79
   12dd0:	movt	r1, #1
   12dd4:	bl	11b3c <strspn@plt>
   12dd8:	ldrb	r0, [r8, r0]
   12ddc:	cmp	r0, #0
   12de0:	mov	r9, r8
   12de4:	bne	12e68 <__assert_fail@plt+0x1314>
   12de8:	ldrb	r0, [r9]
   12dec:	cmp	r0, #0
   12df0:	bne	129f8 <__assert_fail@plt+0xea4>
   12df4:	add	r0, r4, #1
   12df8:	mov	r5, #0
   12dfc:	cmp	r6, r0
   12e00:	bls	12e68 <__assert_fail@plt+0x1314>
   12e04:	mov	r0, r6
   12e08:	ldrb	r1, [r0, #-1]!
   12e0c:	cmp	r1, #47	; 0x2f
   12e10:	moveq	r6, r0
   12e14:	b	12e68 <__assert_fail@plt+0x1314>
   12e18:	bl	119a4 <__errno_location@plt>
   12e1c:	mov	r6, r0
   12e20:	ldr	r0, [r6]
   12e24:	cmp	r0, #34	; 0x22
   12e28:	bne	12e58 <__assert_fail@plt+0x1304>
   12e2c:	mov	r0, sl
   12e30:	bl	188c0 <lchmod@@Base+0x2434>
   12e34:	cmp	r0, #0
   12e38:	beq	12ee4 <__assert_fail@plt+0x1390>
   12e3c:	ldr	r4, [sl]
   12e40:	ldr	r1, [sl, #4]
   12e44:	mov	r0, r4
   12e48:	bl	11950 <getcwd@plt>
   12e4c:	cmp	r0, #0
   12e50:	beq	12e20 <__assert_fail@plt+0x12cc>
   12e54:	b	129c0 <__assert_fail@plt+0xe6c>
   12e58:	cmp	r0, #12
   12e5c:	beq	12ee4 <__assert_fail@plt+0x1390>
   12e60:	mov	r5, #1
   12e64:	mov	r6, r4
   12e68:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12e6c:	cmp	r0, #0
   12e70:	beq	12e78 <__assert_fail@plt+0x1324>
   12e74:	bl	15b4c <__assert_fail@plt+0x3ff8>
   12e78:	sub	r0, fp, #1072	; 0x430
   12e7c:	bl	13060 <__assert_fail@plt+0x150c>
   12e80:	add	r0, sp, #136	; 0x88
   12e84:	bl	13060 <__assert_fail@plt+0x150c>
   12e88:	cmp	r5, #0
   12e8c:	beq	12ea0 <__assert_fail@plt+0x134c>
   12e90:	mov	r0, sl
   12e94:	bl	13060 <__assert_fail@plt+0x150c>
   12e98:	mov	r6, #0
   12e9c:	b	12ec0 <__assert_fail@plt+0x136c>
   12ea0:	mov	r0, #0
   12ea4:	strb	r0, [r6], #1
   12ea8:	sub	r1, r6, r4
   12eac:	mov	r0, sl
   12eb0:	bl	18858 <lchmod@@Base+0x23cc>
   12eb4:	mov	r6, r0
   12eb8:	cmp	r0, #0
   12ebc:	beq	12ee4 <__assert_fail@plt+0x1390>
   12ec0:	mov	r0, r6
   12ec4:	sub	sp, fp, #28
   12ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ecc:	bl	119a4 <__errno_location@plt>
   12ed0:	mov	r1, #40	; 0x28
   12ed4:	str	r1, [r0]
   12ed8:	mov	r5, #1
   12edc:	ldr	sl, [sp, #20]
   12ee0:	b	12e68 <__assert_fail@plt+0x1314>
   12ee4:	bl	19368 <lchmod@@Base+0x2edc>
   12ee8:	sub	r1, r0, #1
   12eec:	ands	r0, r1, r0
   12ef0:	movwne	r0, #1
   12ef4:	bx	lr
   12ef8:	mov	r1, #1024	; 0x400
   12efc:	add	r2, r0, #8
   12f00:	str	r2, [r0]
   12f04:	str	r1, [r0, #4]
   12f08:	bx	lr
   12f0c:	push	{r4, r5, r6, sl, fp, lr}
   12f10:	add	fp, sp, #16
   12f14:	sub	sp, sp, #8
   12f18:	mov	r4, r2
   12f1c:	mov	r5, r1
   12f20:	mov	r6, r0
   12f24:	ldr	r0, [r0]
   12f28:	cmp	r0, #0
   12f2c:	bne	12f64 <__assert_fail@plt+0x1410>
   12f30:	movw	r0, #25504	; 0x63a0
   12f34:	movt	r0, #1
   12f38:	str	r0, [sp]
   12f3c:	movw	r2, #25360	; 0x6310
   12f40:	movt	r2, #1
   12f44:	movw	r3, #25416	; 0x6348
   12f48:	movt	r3, #1
   12f4c:	mov	r0, #7
   12f50:	mov	r1, #0
   12f54:	bl	15878 <__assert_fail@plt+0x3d24>
   12f58:	str	r0, [r6]
   12f5c:	cmp	r0, #0
   12f60:	beq	12fa0 <__assert_fail@plt+0x144c>
   12f64:	ldr	r0, [r6]
   12f68:	mov	r1, r5
   12f6c:	mov	r2, r4
   12f70:	bl	132b8 <__assert_fail@plt+0x1764>
   12f74:	mov	r1, r0
   12f78:	mov	r0, #1
   12f7c:	cmp	r1, #0
   12f80:	bne	12f98 <__assert_fail@plt+0x1444>
   12f84:	ldr	r0, [r6]
   12f88:	mov	r1, r5
   12f8c:	mov	r2, r4
   12f90:	bl	1323c <__assert_fail@plt+0x16e8>
   12f94:	mov	r0, #0
   12f98:	sub	sp, fp, #16
   12f9c:	pop	{r4, r5, r6, sl, fp, pc}
   12fa0:	bl	19368 <lchmod@@Base+0x2edc>
   12fa4:	mov	r1, r0
   12fa8:	ldrb	r2, [r0]
   12fac:	mov	r0, #0
   12fb0:	cmp	r2, #47	; 0x2f
   12fb4:	bxne	lr
   12fb8:	mov	r0, #1
   12fbc:	mov	ip, #0
   12fc0:	mov	r3, r1
   12fc4:	ldrb	r2, [r1, #1]!
   12fc8:	cmp	r2, #47	; 0x2f
   12fcc:	beq	12fc0 <__assert_fail@plt+0x146c>
   12fd0:	cmp	r2, #46	; 0x2e
   12fd4:	bne	13014 <__assert_fail@plt+0x14c0>
   12fd8:	add	r1, r3, #2
   12fdc:	ldrb	r2, [r1]
   12fe0:	cmp	r2, #47	; 0x2f
   12fe4:	beq	12fc0 <__assert_fail@plt+0x146c>
   12fe8:	cmp	r2, #0
   12fec:	moveq	ip, #1
   12ff0:	moveq	r0, ip
   12ff4:	bxeq	lr
   12ff8:	cmp	r2, #46	; 0x2e
   12ffc:	bne	13024 <__assert_fail@plt+0x14d0>
   13000:	ldrb	r1, [r3, #3]
   13004:	cmp	r1, #0
   13008:	cmpne	r1, #47	; 0x2f
   1300c:	bne	13024 <__assert_fail@plt+0x14d0>
   13010:	bx	lr
   13014:	cmp	r2, #0
   13018:	movne	r0, ip
   1301c:	bxne	lr
   13020:	bx	lr
   13024:	mov	r0, #0
   13028:	bx	lr
   1302c:	mov	r2, #47	; 0x2f
   13030:	strh	r2, [r1]
   13034:	b	13038 <__assert_fail@plt+0x14e4>
   13038:	push	{fp, lr}
   1303c:	mov	fp, sp
   13040:	mov	r1, r0
   13044:	mvn	r0, #99	; 0x63
   13048:	mov	r2, #0
   1304c:	mov	r3, #512	; 0x200
   13050:	bl	117c4 <faccessat@plt>
   13054:	clz	r0, r0
   13058:	lsr	r0, r0, #5
   1305c:	pop	{fp, pc}
   13060:	mov	r1, r0
   13064:	ldr	r0, [r1], #8
   13068:	cmp	r0, r1
   1306c:	bxeq	lr
   13070:	b	13304 <__assert_fail@plt+0x17b0>
   13074:	movw	r1, #49640	; 0xc1e8
   13078:	movt	r1, #2
   1307c:	str	r0, [r1]
   13080:	bx	lr
   13084:	movw	r1, #49644	; 0xc1ec
   13088:	movt	r1, #2
   1308c:	strb	r0, [r1]
   13090:	bx	lr
   13094:	push	{r4, r5, r6, sl, fp, lr}
   13098:	add	fp, sp, #16
   1309c:	sub	sp, sp, #8
   130a0:	movw	r0, #49628	; 0xc1dc
   130a4:	movt	r0, #2
   130a8:	ldr	r0, [r0]
   130ac:	bl	199fc <lchmod@@Base+0x3570>
   130b0:	cmp	r0, #0
   130b4:	beq	130dc <__assert_fail@plt+0x1588>
   130b8:	movw	r0, #49644	; 0xc1ec
   130bc:	movt	r0, #2
   130c0:	ldrb	r0, [r0]
   130c4:	cmp	r0, #0
   130c8:	beq	130fc <__assert_fail@plt+0x15a8>
   130cc:	bl	119a4 <__errno_location@plt>
   130d0:	ldr	r0, [r0]
   130d4:	cmp	r0, #32
   130d8:	bne	130fc <__assert_fail@plt+0x15a8>
   130dc:	movw	r0, #49624	; 0xc1d8
   130e0:	movt	r0, #2
   130e4:	ldr	r0, [r0]
   130e8:	bl	199fc <lchmod@@Base+0x3570>
   130ec:	cmp	r0, #0
   130f0:	subeq	sp, fp, #16
   130f4:	popeq	{r4, r5, r6, sl, fp, pc}
   130f8:	b	1316c <__assert_fail@plt+0x1618>
   130fc:	movw	r1, #43447	; 0xa9b7
   13100:	movt	r1, #1
   13104:	mov	r0, #0
   13108:	mov	r2, #5
   1310c:	bl	1180c <dcgettext@plt>
   13110:	mov	r4, r0
   13114:	movw	r0, #49640	; 0xc1e8
   13118:	movt	r0, #2
   1311c:	ldr	r6, [r0]
   13120:	bl	119a4 <__errno_location@plt>
   13124:	ldr	r5, [r0]
   13128:	cmp	r6, #0
   1312c:	bne	13148 <__assert_fail@plt+0x15f4>
   13130:	movw	r2, #43463	; 0xa9c7
   13134:	movt	r2, #1
   13138:	mov	r0, #0
   1313c:	mov	r1, r5
   13140:	mov	r3, r4
   13144:	b	13168 <__assert_fail@plt+0x1614>
   13148:	mov	r0, r6
   1314c:	bl	182f4 <lchmod@@Base+0x1e68>
   13150:	mov	r3, r0
   13154:	str	r4, [sp]
   13158:	movw	r2, #43459	; 0xa9c3
   1315c:	movt	r2, #1
   13160:	mov	r0, #0
   13164:	mov	r1, r5
   13168:	bl	118d8 <error@plt>
   1316c:	movw	r0, #49540	; 0xc184
   13170:	movt	r0, #2
   13174:	ldr	r0, [r0]
   13178:	bl	117d0 <_exit@plt>
   1317c:	push	{fp, lr}
   13180:	mov	fp, sp
   13184:	bl	131dc <__assert_fail@plt+0x1688>
   13188:	cmp	r0, #0
   1318c:	popne	{fp, pc}
   13190:	bl	19368 <lchmod@@Base+0x2edc>
   13194:	push	{r4, r5, r6, sl, fp, lr}
   13198:	add	fp, sp, #16
   1319c:	mov	r4, r0
   131a0:	mov	r5, r0
   131a4:	ldrb	r6, [r5], #-1
   131a8:	bl	19500 <lchmod@@Base+0x3074>
   131ac:	sub	r2, r0, r4
   131b0:	sub	r0, r6, #47	; 0x2f
   131b4:	clz	r0, r0
   131b8:	lsr	r1, r0, #5
   131bc:	mov	r0, r2
   131c0:	cmp	r2, r1
   131c4:	popls	{r4, r5, r6, sl, fp, pc}
   131c8:	ldrb	r3, [r5, r0]
   131cc:	sub	r2, r0, #1
   131d0:	cmp	r3, #47	; 0x2f
   131d4:	beq	131bc <__assert_fail@plt+0x1668>
   131d8:	pop	{r4, r5, r6, sl, fp, pc}
   131dc:	push	{r4, r5, r6, sl, fp, lr}
   131e0:	add	fp, sp, #16
   131e4:	mov	r6, r0
   131e8:	bl	13194 <__assert_fail@plt+0x1640>
   131ec:	mov	r4, r0
   131f0:	cmp	r0, #0
   131f4:	addeq	r0, r0, #1
   131f8:	add	r0, r0, #1
   131fc:	bl	1947c <lchmod@@Base+0x2ff0>
   13200:	mov	r5, r0
   13204:	cmp	r0, #0
   13208:	beq	13234 <__assert_fail@plt+0x16e0>
   1320c:	mov	r0, r5
   13210:	mov	r1, r6
   13214:	mov	r2, r4
   13218:	bl	117dc <memcpy@plt>
   1321c:	cmp	r4, #0
   13220:	moveq	r0, #46	; 0x2e
   13224:	strbeq	r0, [r5, r4]
   13228:	moveq	r4, #1
   1322c:	mov	r0, #0
   13230:	strb	r0, [r5, r4]
   13234:	mov	r0, r5
   13238:	pop	{r4, r5, r6, sl, fp, pc}
   1323c:	push	{r4, r5, r6, r7, fp, lr}
   13240:	add	fp, sp, #16
   13244:	cmp	r0, #0
   13248:	popeq	{r4, r5, r6, r7, fp, pc}
   1324c:	mov	r6, r2
   13250:	mov	r7, r1
   13254:	mov	r5, r0
   13258:	mov	r0, #24
   1325c:	bl	18fb8 <lchmod@@Base+0x2b2c>
   13260:	mov	r4, r0
   13264:	mov	r0, r7
   13268:	bl	19348 <lchmod@@Base+0x2ebc>
   1326c:	str	r0, [r4]
   13270:	ldrd	r0, [r6, #96]	; 0x60
   13274:	str	r1, [r4, #12]
   13278:	str	r0, [r4, #8]
   1327c:	ldrd	r0, [r6]
   13280:	str	r1, [r4, #20]
   13284:	str	r0, [r4, #16]
   13288:	mov	r0, r5
   1328c:	mov	r1, r4
   13290:	bl	16108 <__assert_fail@plt+0x45b4>
   13294:	cmp	r0, #0
   13298:	beq	132b4 <__assert_fail@plt+0x1760>
   1329c:	cmp	r0, r4
   132a0:	beq	132b0 <__assert_fail@plt+0x175c>
   132a4:	mov	r0, r4
   132a8:	pop	{r4, r5, r6, r7, fp, lr}
   132ac:	b	163a0 <__assert_fail@plt+0x484c>
   132b0:	pop	{r4, r5, r6, r7, fp, pc}
   132b4:	bl	19368 <lchmod@@Base+0x2edc>
   132b8:	cmp	r0, #0
   132bc:	moveq	r0, #0
   132c0:	bxeq	lr
   132c4:	push	{r4, r5, fp, lr}
   132c8:	add	fp, sp, #8
   132cc:	sub	sp, sp, #24
   132d0:	str	r1, [sp]
   132d4:	ldrd	r4, [r2, #96]	; 0x60
   132d8:	str	r5, [sp, #12]
   132dc:	str	r4, [sp, #8]
   132e0:	ldrd	r2, [r2]
   132e4:	str	r3, [sp, #20]
   132e8:	str	r2, [sp, #16]
   132ec:	mov	r1, sp
   132f0:	bl	155f0 <__assert_fail@plt+0x3a9c>
   132f4:	cmp	r0, #0
   132f8:	movwne	r0, #1
   132fc:	sub	sp, fp, #8
   13300:	pop	{r4, r5, fp, pc}
   13304:	push	{r4, r5, r6, sl, fp, lr}
   13308:	add	fp, sp, #16
   1330c:	mov	r4, r0
   13310:	bl	119a4 <__errno_location@plt>
   13314:	mov	r5, r0
   13318:	ldr	r6, [r0]
   1331c:	mov	r0, r4
   13320:	bl	117b8 <free@plt>
   13324:	str	r6, [r5]
   13328:	pop	{r4, r5, r6, sl, fp, pc}
   1332c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13330:	add	fp, sp, #28
   13334:	sub	sp, sp, #12
   13338:	cmp	r1, #4096	; 0x1000
   1333c:	bcs	13358 <__assert_fail@plt+0x1804>
   13340:	mov	r6, r1
   13344:	mov	r7, r0
   13348:	and	r0, r1, #516	; 0x204
   1334c:	cmp	r0, #516	; 0x204
   13350:	tstne	r6, #18
   13354:	bne	13374 <__assert_fail@plt+0x1820>
   13358:	bl	119a4 <__errno_location@plt>
   1335c:	mov	r1, #22
   13360:	str	r1, [r0]
   13364:	mov	r4, #0
   13368:	mov	r0, r4
   1336c:	sub	sp, fp, #28
   13370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13374:	mov	sl, r2
   13378:	mov	r0, #1
   1337c:	mov	r1, #96	; 0x60
   13380:	bl	19428 <lchmod@@Base+0x2f9c>
   13384:	cmp	r0, #0
   13388:	beq	13364 <__assert_fail@plt+0x1810>
   1338c:	mov	r4, r0
   13390:	mvn	r0, #99	; 0x63
   13394:	str	r0, [r4, #32]
   13398:	bic	r0, r6, #516	; 0x204
   1339c:	tst	r6, #2
   133a0:	mov	r1, r6
   133a4:	orrne	r1, r0, #4
   133a8:	str	sl, [r4, #44]	; 0x2c
   133ac:	str	r1, [r4, #48]	; 0x30
   133b0:	mov	r0, r7
   133b4:	bl	13628 <__assert_fail@plt+0x1ad4>
   133b8:	mov	r1, r0
   133bc:	cmp	r0, #4096	; 0x1000
   133c0:	movls	r1, #4096	; 0x1000
   133c4:	mov	r0, r4
   133c8:	bl	1366c <__assert_fail@plt+0x1b18>
   133cc:	cmp	r0, #0
   133d0:	beq	1361c <__assert_fail@plt+0x1ac8>
   133d4:	ldr	r0, [r7]
   133d8:	cmp	r0, #0
   133dc:	beq	1340c <__assert_fail@plt+0x18b8>
   133e0:	movw	r1, #43276	; 0xa90c
   133e4:	movt	r1, #1
   133e8:	mov	r0, r4
   133ec:	mov	r2, #0
   133f0:	bl	136e4 <__assert_fail@plt+0x1b90>
   133f4:	cmp	r0, #0
   133f8:	beq	13614 <__assert_fail@plt+0x1ac0>
   133fc:	mov	r8, r0
   13400:	mvn	r0, #0
   13404:	str	r0, [r8, #48]	; 0x30
   13408:	b	13410 <__assert_fail@plt+0x18bc>
   1340c:	mov	r8, #0
   13410:	cmp	sl, #0
   13414:	ldrbne	r0, [r4, #49]	; 0x31
   13418:	ubfxne	r0, r0, #2, #1
   1341c:	moveq	r0, #1
   13420:	ldr	r5, [r7]
   13424:	cmp	r5, #0
   13428:	beq	13554 <__assert_fail@plt+0x1a00>
   1342c:	and	r1, r6, #2048	; 0x800
   13430:	str	r1, [sp, #8]
   13434:	eor	r0, r0, #1
   13438:	str	r0, [sp, #4]
   1343c:	mov	r9, #0
   13440:	mov	r0, #0
   13444:	str	r0, [sp]
   13448:	mov	r6, #0
   1344c:	mov	r0, r5
   13450:	bl	11974 <strlen@plt>
   13454:	mov	r2, r0
   13458:	ldr	r0, [sp, #8]
   1345c:	cmp	r0, #0
   13460:	bne	13498 <__assert_fail@plt+0x1944>
   13464:	cmp	r2, #3
   13468:	bcc	13498 <__assert_fail@plt+0x1944>
   1346c:	add	r0, r5, r2
   13470:	ldrb	r0, [r0, #-1]
   13474:	cmp	r0, #47	; 0x2f
   13478:	bne	13498 <__assert_fail@plt+0x1944>
   1347c:	sub	r0, r5, #2
   13480:	ldrb	r1, [r0, r2]
   13484:	cmp	r1, #47	; 0x2f
   13488:	bne	13498 <__assert_fail@plt+0x1944>
   1348c:	sub	r2, r2, #1
   13490:	cmp	r2, #1
   13494:	bhi	13480 <__assert_fail@plt+0x192c>
   13498:	mov	r0, r4
   1349c:	mov	r1, r5
   134a0:	bl	136e4 <__assert_fail@plt+0x1b90>
   134a4:	cmp	r0, #0
   134a8:	beq	13604 <__assert_fail@plt+0x1ab0>
   134ac:	mov	r5, r0
   134b0:	str	r8, [r0, #4]
   134b4:	mov	r0, #0
   134b8:	str	r0, [r5, #48]	; 0x30
   134bc:	add	r0, r5, #168	; 0xa8
   134c0:	str	r0, [r5, #24]
   134c4:	clz	r0, r9
   134c8:	lsr	r0, r0, #5
   134cc:	ldr	r1, [sp, #4]
   134d0:	orrs	r0, r1, r0
   134d4:	bne	13500 <__assert_fail@plt+0x19ac>
   134d8:	mov	r0, #11
   134dc:	strh	r0, [r5, #56]	; 0x38
   134e0:	mov	r0, r5
   134e4:	mov	r1, #1
   134e8:	bl	13764 <__assert_fail@plt+0x1c10>
   134ec:	cmp	sl, #0
   134f0:	beq	1351c <__assert_fail@plt+0x19c8>
   134f4:	str	r9, [r5, #8]
   134f8:	mov	r9, r5
   134fc:	b	13538 <__assert_fail@plt+0x19e4>
   13500:	mov	r0, r4
   13504:	mov	r1, r5
   13508:	mov	r2, #0
   1350c:	bl	13794 <__assert_fail@plt+0x1c40>
   13510:	strh	r0, [r5, #56]	; 0x38
   13514:	cmp	sl, #0
   13518:	bne	134f4 <__assert_fail@plt+0x19a0>
   1351c:	mov	r0, #0
   13520:	str	r0, [r5, #8]
   13524:	cmp	r9, #0
   13528:	beq	1354c <__assert_fail@plt+0x19f8>
   1352c:	ldr	r0, [sp]
   13530:	str	r5, [r0, #8]
   13534:	str	r5, [sp]
   13538:	add	r6, r6, #1
   1353c:	ldr	r5, [r7, #4]!
   13540:	cmp	r5, #0
   13544:	bne	1344c <__assert_fail@plt+0x18f8>
   13548:	b	1355c <__assert_fail@plt+0x1a08>
   1354c:	str	r5, [sp]
   13550:	b	134f8 <__assert_fail@plt+0x19a4>
   13554:	mov	r9, #0
   13558:	b	13580 <__assert_fail@plt+0x1a2c>
   1355c:	cmp	sl, #0
   13560:	beq	13580 <__assert_fail@plt+0x1a2c>
   13564:	cmp	r6, #2
   13568:	bcc	13580 <__assert_fail@plt+0x1a2c>
   1356c:	mov	r0, r4
   13570:	mov	r1, r9
   13574:	mov	r2, r6
   13578:	bl	138fc <__assert_fail@plt+0x1da8>
   1357c:	mov	r9, r0
   13580:	movw	r1, #43276	; 0xa90c
   13584:	movt	r1, #1
   13588:	mov	r0, r4
   1358c:	mov	r2, #0
   13590:	bl	136e4 <__assert_fail@plt+0x1b90>
   13594:	str	r0, [r4]
   13598:	cmp	r0, #0
   1359c:	beq	13604 <__assert_fail@plt+0x1ab0>
   135a0:	mov	r1, #9
   135a4:	strh	r1, [r0, #56]	; 0x38
   135a8:	str	r9, [r0, #8]
   135ac:	mov	r1, #1
   135b0:	str	r1, [r0, #48]	; 0x30
   135b4:	mov	r0, r4
   135b8:	bl	139dc <__assert_fail@plt+0x1e88>
   135bc:	cmp	r0, #0
   135c0:	beq	13604 <__assert_fail@plt+0x1ab0>
   135c4:	ldrh	r0, [r4, #48]	; 0x30
   135c8:	tst	r0, #516	; 0x204
   135cc:	bne	135f4 <__assert_fail@plt+0x1aa0>
   135d0:	movw	r1, #43467	; 0xa9cb
   135d4:	movt	r1, #1
   135d8:	mov	r0, r4
   135dc:	bl	13a68 <__assert_fail@plt+0x1f14>
   135e0:	str	r0, [r4, #28]
   135e4:	cmn	r0, #1
   135e8:	ldrle	r0, [r4, #48]	; 0x30
   135ec:	orrle	r0, r0, #4
   135f0:	strle	r0, [r4, #48]	; 0x30
   135f4:	add	r0, r4, #60	; 0x3c
   135f8:	mvn	r1, #0
   135fc:	bl	163c0 <__assert_fail@plt+0x486c>
   13600:	b	13368 <__assert_fail@plt+0x1814>
   13604:	mov	r0, r9
   13608:	bl	13a98 <__assert_fail@plt+0x1f44>
   1360c:	mov	r0, r8
   13610:	bl	13304 <__assert_fail@plt+0x17b0>
   13614:	ldr	r0, [r4, #24]
   13618:	bl	13304 <__assert_fail@plt+0x17b0>
   1361c:	mov	r0, r4
   13620:	bl	13304 <__assert_fail@plt+0x17b0>
   13624:	b	13364 <__assert_fail@plt+0x1810>
   13628:	mov	r1, r0
   1362c:	ldr	r0, [r0]
   13630:	cmp	r0, #0
   13634:	moveq	r0, #1
   13638:	bxeq	lr
   1363c:	push	{r4, r5, fp, lr}
   13640:	add	fp, sp, #8
   13644:	add	r5, r1, #4
   13648:	mov	r4, #0
   1364c:	bl	11974 <strlen@plt>
   13650:	cmp	r0, r4
   13654:	movhi	r4, r0
   13658:	ldr	r0, [r5], #4
   1365c:	cmp	r0, #0
   13660:	bne	1364c <__assert_fail@plt+0x1af8>
   13664:	add	r0, r4, #1
   13668:	pop	{r4, r5, fp, pc}
   1366c:	push	{r4, r5, fp, lr}
   13670:	add	fp, sp, #8
   13674:	mov	r4, r0
   13678:	ldr	r0, [r0, #36]	; 0x24
   1367c:	add	r1, r1, #256	; 0x100
   13680:	adds	r1, r1, r0
   13684:	bcc	136ac <__assert_fail@plt+0x1b58>
   13688:	ldr	r0, [r4, #24]
   1368c:	bl	13304 <__assert_fail@plt+0x17b0>
   13690:	mov	r5, #0
   13694:	str	r5, [r4, #24]
   13698:	bl	119a4 <__errno_location@plt>
   1369c:	mov	r1, #36	; 0x24
   136a0:	str	r1, [r0]
   136a4:	mov	r0, r5
   136a8:	pop	{r4, r5, fp, pc}
   136ac:	str	r1, [r4, #36]	; 0x24
   136b0:	ldr	r0, [r4, #24]
   136b4:	bl	194ac <lchmod@@Base+0x3020>
   136b8:	cmp	r0, #0
   136bc:	strne	r0, [r4, #24]
   136c0:	movne	r5, #1
   136c4:	movne	r0, r5
   136c8:	popne	{r4, r5, fp, pc}
   136cc:	ldr	r0, [r4, #24]
   136d0:	bl	13304 <__assert_fail@plt+0x17b0>
   136d4:	mov	r5, #0
   136d8:	str	r5, [r4, #24]
   136dc:	mov	r0, r5
   136e0:	pop	{r4, r5, fp, pc}
   136e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   136e8:	add	fp, sp, #24
   136ec:	mov	r6, r2
   136f0:	mov	r8, r1
   136f4:	mov	r5, r0
   136f8:	add	r0, r2, #176	; 0xb0
   136fc:	bic	r0, r0, #7
   13700:	bl	1947c <lchmod@@Base+0x2ff0>
   13704:	cmp	r0, #0
   13708:	moveq	r4, #0
   1370c:	moveq	r0, r4
   13710:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13714:	mov	r4, r0
   13718:	add	r7, r0, #168	; 0xa8
   1371c:	mov	r0, r7
   13720:	mov	r1, r8
   13724:	mov	r2, r6
   13728:	bl	117dc <memcpy@plt>
   1372c:	mov	r0, #0
   13730:	strb	r0, [r7, r6]
   13734:	str	r6, [r4, #52]	; 0x34
   13738:	str	r5, [r4, #44]	; 0x2c
   1373c:	ldr	r1, [r5, #24]
   13740:	mov	r2, #196608	; 0x30000
   13744:	str	r2, [r4, #58]	; 0x3a
   13748:	str	r0, [r4, #12]
   1374c:	str	r0, [r4, #16]
   13750:	str	r0, [r4, #20]
   13754:	str	r1, [r4, #28]
   13758:	str	r0, [r4, #32]
   1375c:	mov	r0, r4
   13760:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13764:	ldrh	r2, [r0, #56]	; 0x38
   13768:	cmp	r2, #11
   1376c:	bne	13788 <__assert_fail@plt+0x1c34>
   13770:	mov	r3, #0
   13774:	mov	r2, #1
   13778:	cmp	r1, #0
   1377c:	movwne	r2, #2
   13780:	strd	r2, [r0, #112]	; 0x70
   13784:	bx	lr
   13788:	push	{fp, lr}
   1378c:	mov	fp, sp
   13790:	bl	11af4 <abort@plt>
   13794:	push	{r4, r5, r6, sl, fp, lr}
   13798:	add	fp, sp, #16
   1379c:	mov	r4, r1
   137a0:	ldr	r1, [r1, #48]	; 0x30
   137a4:	cmp	r1, #0
   137a8:	ldrbeq	r1, [r0, #48]	; 0x30
   137ac:	andeq	r1, r1, #1
   137b0:	orreq	r2, r1, r2
   137b4:	add	r5, r4, #64	; 0x40
   137b8:	cmp	r2, #0
   137bc:	ldreq	r1, [r0, #48]	; 0x30
   137c0:	andseq	r1, r1, #2
   137c4:	beq	13814 <__assert_fail@plt+0x1cc0>
   137c8:	ldr	r0, [r4, #24]
   137cc:	mov	r1, r5
   137d0:	bl	1a3e0 <lchmod@@Base+0x3f54>
   137d4:	cmp	r0, #0
   137d8:	beq	13888 <__assert_fail@plt+0x1d34>
   137dc:	bl	119a4 <__errno_location@plt>
   137e0:	mov	r6, r0
   137e4:	ldr	r0, [r0]
   137e8:	cmp	r0, #2
   137ec:	bne	13838 <__assert_fail@plt+0x1ce4>
   137f0:	ldr	r0, [r4, #24]
   137f4:	mov	r1, r5
   137f8:	bl	1a400 <lchmod@@Base+0x3f74>
   137fc:	cmp	r0, #0
   13800:	bne	13838 <__assert_fail@plt+0x1ce4>
   13804:	mov	r0, #0
   13808:	str	r0, [r6]
   1380c:	mov	r0, #13
   13810:	pop	{r4, r5, r6, sl, fp, pc}
   13814:	ldr	r1, [r4, #24]
   13818:	ldr	r0, [r0, #32]
   1381c:	mov	r2, r5
   13820:	mov	r3, #256	; 0x100
   13824:	bl	1a410 <lchmod@@Base+0x3f84>
   13828:	cmp	r0, #0
   1382c:	beq	13888 <__assert_fail@plt+0x1d34>
   13830:	bl	119a4 <__errno_location@plt>
   13834:	mov	r6, r0
   13838:	ldr	r0, [r6]
   1383c:	str	r0, [r4, #32]
   13840:	mov	r0, #0
   13844:	vmov.i32	q8, #0	; 0x00000000
   13848:	str	r0, [r5, #96]	; 0x60
   1384c:	add	r1, r5, #80	; 0x50
   13850:	vst1.64	{d16-d17}, [r1]
   13854:	add	r1, r5, #64	; 0x40
   13858:	vst1.64	{d16-d17}, [r1]
   1385c:	add	r1, r5, #48	; 0x30
   13860:	vst1.64	{d16-d17}, [r1]
   13864:	add	r1, r5, #32
   13868:	vst1.64	{d16-d17}, [r1]
   1386c:	add	r1, r5, #16
   13870:	vst1.64	{d16-d17}, [r1]
   13874:	mov	r1, #100	; 0x64
   13878:	vst1.64	{d16-d17}, [r5], r1
   1387c:	str	r0, [r5]
   13880:	mov	r0, #10
   13884:	pop	{r4, r5, r6, sl, fp, pc}
   13888:	ldr	r0, [r4, #80]	; 0x50
   1388c:	and	r0, r0, #61440	; 0xf000
   13890:	cmp	r0, #40960	; 0xa000
   13894:	moveq	r0, #12
   13898:	popeq	{r4, r5, r6, sl, fp, pc}
   1389c:	cmp	r0, #32768	; 0x8000
   138a0:	moveq	r0, #8
   138a4:	popeq	{r4, r5, r6, sl, fp, pc}
   138a8:	cmp	r0, #16384	; 0x4000
   138ac:	bne	138e0 <__assert_fail@plt+0x1d8c>
   138b0:	ldrb	r1, [r4, #168]	; 0xa8
   138b4:	mov	r0, #1
   138b8:	cmp	r1, #46	; 0x2e
   138bc:	popne	{r4, r5, r6, sl, fp, pc}
   138c0:	ldrb	r1, [r4, #169]	; 0xa9
   138c4:	cmp	r1, #0
   138c8:	beq	138e8 <__assert_fail@plt+0x1d94>
   138cc:	cmp	r1, #46	; 0x2e
   138d0:	ldrbeq	r1, [r4, #170]	; 0xaa
   138d4:	cmpeq	r1, #0
   138d8:	beq	138e8 <__assert_fail@plt+0x1d94>
   138dc:	pop	{r4, r5, r6, sl, fp, pc}
   138e0:	mov	r0, #3
   138e4:	pop	{r4, r5, r6, sl, fp, pc}
   138e8:	ldr	r1, [r4, #48]	; 0x30
   138ec:	mov	r0, #5
   138f0:	cmp	r1, #0
   138f4:	movweq	r0, #1
   138f8:	pop	{r4, r5, r6, sl, fp, pc}
   138fc:	push	{r4, r5, r6, r7, fp, lr}
   13900:	add	fp, sp, #16
   13904:	mov	r6, r2
   13908:	mov	r4, r1
   1390c:	mov	r5, r0
   13910:	ldr	r7, [r0, #44]	; 0x2c
   13914:	ldr	r0, [r0, #40]	; 0x28
   13918:	cmp	r0, r2
   1391c:	bcs	13948 <__assert_fail@plt+0x1df4>
   13920:	add	r1, r6, #40	; 0x28
   13924:	str	r1, [r5, #40]	; 0x28
   13928:	cmn	r1, #-1073741823	; 0xc0000001
   1392c:	bhi	139c0 <__assert_fail@plt+0x1e6c>
   13930:	ldr	r0, [r5, #8]
   13934:	lsl	r1, r1, #2
   13938:	bl	194ac <lchmod@@Base+0x3020>
   1393c:	cmp	r0, #0
   13940:	beq	139c0 <__assert_fail@plt+0x1e6c>
   13944:	str	r0, [r5, #8]
   13948:	cmp	r4, #0
   1394c:	beq	13964 <__assert_fail@plt+0x1e10>
   13950:	ldr	r0, [r5, #8]
   13954:	str	r4, [r0], #4
   13958:	ldr	r4, [r4, #8]
   1395c:	cmp	r4, #0
   13960:	bne	13954 <__assert_fail@plt+0x1e00>
   13964:	ldr	r0, [r5, #8]
   13968:	mov	r1, r6
   1396c:	mov	r2, #4
   13970:	mov	r3, r7
   13974:	bl	11a88 <qsort@plt>
   13978:	subs	r1, r6, #1
   1397c:	ldr	r0, [r5, #8]
   13980:	ldr	r4, [r0]
   13984:	beq	139ac <__assert_fail@plt+0x1e58>
   13988:	add	r2, r0, #4
   1398c:	rsb	r3, r6, #1
   13990:	ldr	r7, [r2, #-4]
   13994:	ldr	r6, [r2]
   13998:	str	r6, [r7, #8]
   1399c:	add	r2, r2, #4
   139a0:	adds	r3, r3, #1
   139a4:	bne	13990 <__assert_fail@plt+0x1e3c>
   139a8:	add	r0, r0, r1, lsl #2
   139ac:	ldr	r0, [r0]
   139b0:	mov	r1, #0
   139b4:	str	r1, [r0, #8]
   139b8:	mov	r0, r4
   139bc:	pop	{r4, r5, r6, r7, fp, pc}
   139c0:	ldr	r0, [r5, #8]
   139c4:	bl	13304 <__assert_fail@plt+0x17b0>
   139c8:	mov	r0, #0
   139cc:	str	r0, [r5, #40]	; 0x28
   139d0:	str	r0, [r5, #8]
   139d4:	mov	r0, r4
   139d8:	pop	{r4, r5, r6, r7, fp, pc}
   139dc:	push	{r4, r5, fp, lr}
   139e0:	add	fp, sp, #8
   139e4:	sub	sp, sp, #8
   139e8:	mov	r4, r0
   139ec:	ldrh	r0, [r0, #48]	; 0x30
   139f0:	movw	r1, #258	; 0x102
   139f4:	tst	r0, r1
   139f8:	beq	13a38 <__assert_fail@plt+0x1ee4>
   139fc:	movw	r0, #13060	; 0x3304
   13a00:	movt	r0, #1
   13a04:	str	r0, [sp]
   13a08:	mov	r5, #0
   13a0c:	movw	r2, #20684	; 0x50cc
   13a10:	movt	r2, #1
   13a14:	movw	r3, #20716	; 0x50ec
   13a18:	movt	r3, #1
   13a1c:	mov	r0, #31
   13a20:	mov	r1, #0
   13a24:	bl	15878 <__assert_fail@plt+0x3d24>
   13a28:	str	r0, [r4, #56]	; 0x38
   13a2c:	cmp	r0, #0
   13a30:	movne	r5, #1
   13a34:	b	13a5c <__assert_fail@plt+0x1f08>
   13a38:	mov	r0, #32
   13a3c:	bl	1947c <lchmod@@Base+0x2ff0>
   13a40:	str	r0, [r4, #56]	; 0x38
   13a44:	cmp	r0, #0
   13a48:	beq	13a58 <__assert_fail@plt+0x1f04>
   13a4c:	bl	19a84 <lchmod@@Base+0x35f8>
   13a50:	mov	r5, #1
   13a54:	b	13a5c <__assert_fail@plt+0x1f08>
   13a58:	mov	r5, #0
   13a5c:	mov	r0, r5
   13a60:	sub	sp, fp, #8
   13a64:	pop	{r4, r5, fp, pc}
   13a68:	ldr	r3, [r0, #48]	; 0x30
   13a6c:	mov	r2, #32768	; 0x8000
   13a70:	and	r2, r2, r3, lsl #11
   13a74:	orr	r2, r2, #18688	; 0x4900
   13a78:	orr	r2, r2, #524288	; 0x80000
   13a7c:	tst	r3, #512	; 0x200
   13a80:	bne	13a90 <__assert_fail@plt+0x1f3c>
   13a84:	mov	r0, r1
   13a88:	mov	r1, r2
   13a8c:	b	19e24 <lchmod@@Base+0x3998>
   13a90:	ldr	r0, [r0, #32]
   13a94:	b	16b6c <lchmod@@Base+0x6e0>
   13a98:	push	{r4, r6, r7, sl, fp, lr}
   13a9c:	add	fp, sp, #16
   13aa0:	cmp	r0, #0
   13aa4:	popeq	{r4, r6, r7, sl, fp, pc}
   13aa8:	mov	r4, r0
   13aac:	ldrd	r6, [r4, #8]
   13ab0:	cmp	r7, #0
   13ab4:	beq	13ac0 <__assert_fail@plt+0x1f6c>
   13ab8:	mov	r0, r7
   13abc:	bl	11b30 <closedir@plt>
   13ac0:	mov	r0, r4
   13ac4:	bl	13304 <__assert_fail@plt+0x17b0>
   13ac8:	cmp	r6, #0
   13acc:	mov	r4, r6
   13ad0:	bne	13aac <__assert_fail@plt+0x1f58>
   13ad4:	pop	{r4, r6, r7, sl, fp, pc}
   13ad8:	push	{r4, r5, fp, lr}
   13adc:	add	fp, sp, #8
   13ae0:	mov	r4, r0
   13ae4:	ldr	r0, [r0]
   13ae8:	cmp	r0, #0
   13aec:	beq	13b2c <__assert_fail@plt+0x1fd8>
   13af0:	ldr	r1, [r0, #48]	; 0x30
   13af4:	cmp	r1, #0
   13af8:	blt	13b20 <__assert_fail@plt+0x1fcc>
   13afc:	ldr	r5, [r0, #8]
   13b00:	cmp	r5, #0
   13b04:	ldreq	r5, [r0, #4]
   13b08:	bl	13304 <__assert_fail@plt+0x17b0>
   13b0c:	ldr	r0, [r5, #48]	; 0x30
   13b10:	cmn	r0, #1
   13b14:	mov	r0, r5
   13b18:	bgt	13afc <__assert_fail@plt+0x1fa8>
   13b1c:	b	13b24 <__assert_fail@plt+0x1fd0>
   13b20:	mov	r5, r0
   13b24:	mov	r0, r5
   13b28:	bl	13304 <__assert_fail@plt+0x17b0>
   13b2c:	ldr	r0, [r4, #4]
   13b30:	cmp	r0, #0
   13b34:	blne	13a98 <__assert_fail@plt+0x1f44>
   13b38:	ldr	r0, [r4, #8]
   13b3c:	bl	13304 <__assert_fail@plt+0x17b0>
   13b40:	ldr	r0, [r4, #24]
   13b44:	bl	13304 <__assert_fail@plt+0x17b0>
   13b48:	ldr	r0, [r4, #48]	; 0x30
   13b4c:	tst	r0, #512	; 0x200
   13b50:	bne	13b7c <__assert_fail@plt+0x2028>
   13b54:	mov	r5, #0
   13b58:	tst	r0, #4
   13b5c:	bne	13bc0 <__assert_fail@plt+0x206c>
   13b60:	ldr	r0, [r4, #28]
   13b64:	bl	11a7c <fchdir@plt>
   13b68:	cmp	r0, #0
   13b6c:	beq	13b9c <__assert_fail@plt+0x2048>
   13b70:	bl	119a4 <__errno_location@plt>
   13b74:	ldr	r5, [r0]
   13b78:	b	13ba0 <__assert_fail@plt+0x204c>
   13b7c:	ldr	r0, [r4, #32]
   13b80:	mov	r5, #0
   13b84:	cmp	r0, #0
   13b88:	blt	13bc0 <__assert_fail@plt+0x206c>
   13b8c:	bl	11b00 <close@plt>
   13b90:	cmp	r0, #0
   13b94:	bne	13bb8 <__assert_fail@plt+0x2064>
   13b98:	b	13bc0 <__assert_fail@plt+0x206c>
   13b9c:	mov	r5, #0
   13ba0:	ldr	r0, [r4, #28]
   13ba4:	bl	11b00 <close@plt>
   13ba8:	cmp	r5, #0
   13bac:	bne	13bc0 <__assert_fail@plt+0x206c>
   13bb0:	cmp	r0, #0
   13bb4:	beq	13bc0 <__assert_fail@plt+0x206c>
   13bb8:	bl	119a4 <__errno_location@plt>
   13bbc:	ldr	r5, [r0]
   13bc0:	add	r0, r4, #60	; 0x3c
   13bc4:	bl	13c04 <__assert_fail@plt+0x20b0>
   13bc8:	ldr	r0, [r4, #52]	; 0x34
   13bcc:	cmp	r0, #0
   13bd0:	beq	13bd8 <__assert_fail@plt+0x2084>
   13bd4:	bl	15b4c <__assert_fail@plt+0x3ff8>
   13bd8:	mov	r0, r4
   13bdc:	bl	13c3c <__assert_fail@plt+0x20e8>
   13be0:	mov	r0, r4
   13be4:	bl	13304 <__assert_fail@plt+0x17b0>
   13be8:	cmp	r5, #0
   13bec:	moveq	r0, #0
   13bf0:	popeq	{r4, r5, fp, pc}
   13bf4:	bl	119a4 <__errno_location@plt>
   13bf8:	str	r5, [r0]
   13bfc:	mvn	r0, #0
   13c00:	pop	{r4, r5, fp, pc}
   13c04:	push	{r4, sl, fp, lr}
   13c08:	add	fp, sp, #8
   13c0c:	mov	r4, r0
   13c10:	b	13c18 <__assert_fail@plt+0x20c4>
   13c14:	mov	r0, r4
   13c18:	bl	163ec <__assert_fail@plt+0x4898>
   13c1c:	cmp	r0, #0
   13c20:	popne	{r4, sl, fp, pc}
   13c24:	mov	r0, r4
   13c28:	bl	16438 <__assert_fail@plt+0x48e4>
   13c2c:	cmp	r0, #0
   13c30:	blt	13c14 <__assert_fail@plt+0x20c0>
   13c34:	bl	11b00 <close@plt>
   13c38:	b	13c14 <__assert_fail@plt+0x20c0>
   13c3c:	ldrh	r1, [r0, #48]	; 0x30
   13c40:	movw	r2, #258	; 0x102
   13c44:	tst	r1, r2
   13c48:	beq	13c5c <__assert_fail@plt+0x2108>
   13c4c:	ldr	r0, [r0, #56]	; 0x38
   13c50:	cmp	r0, #0
   13c54:	bxeq	lr
   13c58:	b	15b4c <__assert_fail@plt+0x3ff8>
   13c5c:	ldr	r0, [r0, #56]	; 0x38
   13c60:	b	13304 <__assert_fail@plt+0x17b0>
   13c64:	push	{r4, r5, r6, r7, fp, lr}
   13c68:	add	fp, sp, #16
   13c6c:	ldr	r6, [r0]
   13c70:	mov	r5, #0
   13c74:	cmp	r6, #0
   13c78:	beq	14210 <__assert_fail@plt+0x26bc>
   13c7c:	mov	r4, r0
   13c80:	ldr	r1, [r0, #48]	; 0x30
   13c84:	tst	r1, #8192	; 0x2000
   13c88:	bne	14210 <__assert_fail@plt+0x26bc>
   13c8c:	ldrh	r0, [r6, #60]	; 0x3c
   13c90:	mov	r2, #3
   13c94:	strh	r2, [r6, #60]	; 0x3c
   13c98:	cmp	r0, #2
   13c9c:	beq	13cc4 <__assert_fail@plt+0x2170>
   13ca0:	cmp	r0, #1
   13ca4:	bne	13d30 <__assert_fail@plt+0x21dc>
   13ca8:	mov	r0, r4
   13cac:	mov	r1, r6
   13cb0:	mov	r2, #0
   13cb4:	bl	13794 <__assert_fail@plt+0x1c40>
   13cb8:	strh	r0, [r6, #56]	; 0x38
   13cbc:	mov	r0, r6
   13cc0:	pop	{r4, r5, r6, r7, fp, pc}
   13cc4:	ldrh	r2, [r6, #56]	; 0x38
   13cc8:	movw	r3, #65534	; 0xfffe
   13ccc:	and	r2, r2, r3
   13cd0:	cmp	r2, #12
   13cd4:	bne	13d30 <__assert_fail@plt+0x21dc>
   13cd8:	mov	r0, r4
   13cdc:	mov	r1, r6
   13ce0:	mov	r2, #1
   13ce4:	bl	13794 <__assert_fail@plt+0x1c40>
   13ce8:	strh	r0, [r6, #56]	; 0x38
   13cec:	cmp	r0, #1
   13cf0:	bne	13df8 <__assert_fail@plt+0x22a4>
   13cf4:	ldrb	r0, [r4, #48]	; 0x30
   13cf8:	tst	r0, #4
   13cfc:	bne	13df8 <__assert_fail@plt+0x22a4>
   13d00:	movw	r1, #43467	; 0xa9cb
   13d04:	movt	r1, #1
   13d08:	mov	r0, r4
   13d0c:	bl	13a68 <__assert_fail@plt+0x1f14>
   13d10:	str	r0, [r6, #36]	; 0x24
   13d14:	cmn	r0, #1
   13d18:	ble	140f0 <__assert_fail@plt+0x259c>
   13d1c:	ldrh	r0, [r6, #58]	; 0x3a
   13d20:	orr	r0, r0, #2
   13d24:	strh	r0, [r6, #58]	; 0x3a
   13d28:	mov	r5, r6
   13d2c:	b	13f98 <__assert_fail@plt+0x2444>
   13d30:	ldrh	r2, [r6, #56]	; 0x38
   13d34:	cmp	r2, #1
   13d38:	bne	13d8c <__assert_fail@plt+0x2238>
   13d3c:	cmp	r0, #4
   13d40:	bne	13e00 <__assert_fail@plt+0x22ac>
   13d44:	ldrb	r0, [r6, #58]	; 0x3a
   13d48:	tst	r0, #2
   13d4c:	beq	13d58 <__assert_fail@plt+0x2204>
   13d50:	ldr	r0, [r6, #36]	; 0x24
   13d54:	bl	11b00 <close@plt>
   13d58:	ldr	r0, [r4, #4]
   13d5c:	cmp	r0, #0
   13d60:	beq	13d70 <__assert_fail@plt+0x221c>
   13d64:	bl	13a98 <__assert_fail@plt+0x1f44>
   13d68:	mov	r0, #0
   13d6c:	str	r0, [r4, #4]
   13d70:	mov	r0, #6
   13d74:	strh	r0, [r6, #56]	; 0x38
   13d78:	mov	r0, r4
   13d7c:	mov	r1, r6
   13d80:	bl	1421c <__assert_fail@plt+0x26c8>
   13d84:	mov	r0, r6
   13d88:	pop	{r4, r5, r6, r7, fp, pc}
   13d8c:	ldr	r5, [r6, #8]
   13d90:	cmp	r5, #0
   13d94:	beq	13e98 <__assert_fail@plt+0x2344>
   13d98:	str	r5, [r4]
   13d9c:	mov	r0, r6
   13da0:	bl	13304 <__assert_fail@plt+0x17b0>
   13da4:	ldr	r0, [r5, #48]	; 0x30
   13da8:	cmp	r0, #0
   13dac:	beq	13ee4 <__assert_fail@plt+0x2390>
   13db0:	ldrh	r0, [r5, #60]	; 0x3c
   13db4:	cmp	r0, #4
   13db8:	mov	r6, r5
   13dbc:	beq	13d8c <__assert_fail@plt+0x2238>
   13dc0:	cmp	r0, #2
   13dc4:	bne	13f5c <__assert_fail@plt+0x2408>
   13dc8:	mov	r0, r4
   13dcc:	mov	r1, r5
   13dd0:	mov	r2, #1
   13dd4:	bl	13794 <__assert_fail@plt+0x1c40>
   13dd8:	strh	r0, [r5, #56]	; 0x38
   13ddc:	cmp	r0, #1
   13de0:	ldrbeq	r0, [r4, #48]	; 0x30
   13de4:	tsteq	r0, #4
   13de8:	beq	1417c <__assert_fail@plt+0x2628>
   13dec:	mov	r0, #3
   13df0:	strh	r0, [r5, #60]	; 0x3c
   13df4:	b	13f5c <__assert_fail@plt+0x2408>
   13df8:	mov	r5, r6
   13dfc:	b	13f98 <__assert_fail@plt+0x2444>
   13e00:	tst	r1, #64	; 0x40
   13e04:	beq	13e28 <__assert_fail@plt+0x22d4>
   13e08:	ldr	r0, [r4, #16]
   13e0c:	ldr	r3, [r4, #20]
   13e10:	ldr	r2, [r6, #64]	; 0x40
   13e14:	ldr	r5, [r6, #68]	; 0x44
   13e18:	eor	r3, r5, r3
   13e1c:	eor	r0, r2, r0
   13e20:	orrs	r0, r0, r3
   13e24:	bne	13d44 <__assert_fail@plt+0x21f0>
   13e28:	ldr	r0, [r4, #4]
   13e2c:	cmp	r0, #0
   13e30:	beq	13f38 <__assert_fail@plt+0x23e4>
   13e34:	tst	r1, #4096	; 0x1000
   13e38:	bne	13f24 <__assert_fail@plt+0x23d0>
   13e3c:	ldr	r3, [r6, #24]
   13e40:	mov	r0, r4
   13e44:	mov	r1, r6
   13e48:	mvn	r2, #0
   13e4c:	bl	142ec <__assert_fail@plt+0x2798>
   13e50:	cmp	r0, #0
   13e54:	beq	13f50 <__assert_fail@plt+0x23fc>
   13e58:	bl	119a4 <__errno_location@plt>
   13e5c:	ldr	r0, [r0]
   13e60:	str	r0, [r6, #32]
   13e64:	ldrh	r0, [r6, #58]	; 0x3a
   13e68:	orr	r0, r0, #1
   13e6c:	strh	r0, [r6, #58]	; 0x3a
   13e70:	ldr	r0, [r4, #4]
   13e74:	cmp	r0, #0
   13e78:	beq	13f50 <__assert_fail@plt+0x23fc>
   13e7c:	ldmib	r0, {r1, r2}
   13e80:	ldr	r1, [r1, #24]
   13e84:	str	r1, [r0, #24]
   13e88:	cmp	r2, #0
   13e8c:	mov	r0, r2
   13e90:	bne	13e7c <__assert_fail@plt+0x2328>
   13e94:	b	13f50 <__assert_fail@plt+0x23fc>
   13e98:	ldr	r0, [r6, #4]
   13e9c:	ldr	r1, [r0, #12]
   13ea0:	cmp	r1, #0
   13ea4:	beq	14054 <__assert_fail@plt+0x2500>
   13ea8:	str	r0, [r4]
   13eac:	ldr	r1, [r4, #24]
   13eb0:	ldr	r0, [r0, #40]	; 0x28
   13eb4:	mov	r5, #0
   13eb8:	strb	r5, [r1, r0]
   13ebc:	mov	r0, r4
   13ec0:	mov	r1, #3
   13ec4:	bl	144cc <__assert_fail@plt+0x2978>
   13ec8:	cmp	r0, #0
   13ecc:	beq	14048 <__assert_fail@plt+0x24f4>
   13ed0:	mov	r7, r0
   13ed4:	mov	r0, r6
   13ed8:	bl	13304 <__assert_fail@plt+0x17b0>
   13edc:	mov	r5, r7
   13ee0:	b	13f5c <__assert_fail@plt+0x2408>
   13ee4:	mov	r0, r4
   13ee8:	bl	14d38 <__assert_fail@plt+0x31e4>
   13eec:	cmp	r0, #0
   13ef0:	beq	13f04 <__assert_fail@plt+0x23b0>
   13ef4:	ldr	r0, [r4, #48]	; 0x30
   13ef8:	orr	r0, r0, #8192	; 0x2000
   13efc:	str	r0, [r4, #48]	; 0x30
   13f00:	b	14010 <__assert_fail@plt+0x24bc>
   13f04:	mov	r0, r4
   13f08:	bl	13c3c <__assert_fail@plt+0x20e8>
   13f0c:	mov	r0, r4
   13f10:	mov	r1, r5
   13f14:	bl	14d94 <__assert_fail@plt+0x3240>
   13f18:	mov	r0, r4
   13f1c:	bl	139dc <__assert_fail@plt+0x1e88>
   13f20:	b	13f98 <__assert_fail@plt+0x2444>
   13f24:	bic	r1, r1, #4096	; 0x1000
   13f28:	str	r1, [r4, #48]	; 0x30
   13f2c:	bl	13a98 <__assert_fail@plt+0x1f44>
   13f30:	mov	r0, #0
   13f34:	str	r0, [r4, #4]
   13f38:	mov	r0, r4
   13f3c:	mov	r1, #3
   13f40:	bl	144cc <__assert_fail@plt+0x2978>
   13f44:	str	r0, [r4, #4]
   13f48:	cmp	r0, #0
   13f4c:	beq	1401c <__assert_fail@plt+0x24c8>
   13f50:	ldr	r5, [r4, #4]
   13f54:	mov	r0, #0
   13f58:	str	r0, [r4, #4]
   13f5c:	ldr	r0, [r5, #4]
   13f60:	ldr	r1, [r0, #28]
   13f64:	ldr	r0, [r0, #40]	; 0x28
   13f68:	sub	r2, r0, #1
   13f6c:	ldrb	r1, [r1, r2]
   13f70:	cmp	r1, #47	; 0x2f
   13f74:	moveq	r0, r2
   13f78:	ldr	r1, [r4, #24]
   13f7c:	mov	r2, #47	; 0x2f
   13f80:	strb	r2, [r1, r0]!
   13f84:	add	r0, r1, #1
   13f88:	add	r1, r5, #168	; 0xa8
   13f8c:	ldr	r2, [r5, #52]	; 0x34
   13f90:	add	r2, r2, #1
   13f94:	bl	117ac <memmove@plt>
   13f98:	str	r5, [r4]
   13f9c:	ldrh	r0, [r5, #56]	; 0x38
   13fa0:	cmp	r0, #11
   13fa4:	bne	13fd8 <__assert_fail@plt+0x2484>
   13fa8:	ldrd	r0, [r5, #112]	; 0x70
   13fac:	eor	r2, r0, #1
   13fb0:	orrs	r2, r2, r1
   13fb4:	beq	14210 <__assert_fail@plt+0x26bc>
   13fb8:	eor	r0, r0, #2
   13fbc:	orrs	r0, r0, r1
   13fc0:	bne	14218 <__assert_fail@plt+0x26c4>
   13fc4:	mov	r0, r4
   13fc8:	mov	r1, r5
   13fcc:	mov	r2, #0
   13fd0:	bl	13794 <__assert_fail@plt+0x1c40>
   13fd4:	strh	r0, [r5, #56]	; 0x38
   13fd8:	cmp	r0, #1
   13fdc:	bne	14210 <__assert_fail@plt+0x26bc>
   13fe0:	ldr	r0, [r5, #48]	; 0x30
   13fe4:	cmp	r0, #0
   13fe8:	ldrdeq	r0, [r5, #64]	; 0x40
   13fec:	strdeq	r0, [r4, #16]
   13ff0:	mov	r0, r4
   13ff4:	mov	r1, r5
   13ff8:	bl	14e1c <__assert_fail@plt+0x32c8>
   13ffc:	cmp	r0, #0
   14000:	bne	14210 <__assert_fail@plt+0x26bc>
   14004:	bl	119a4 <__errno_location@plt>
   14008:	mov	r1, #12
   1400c:	str	r1, [r0]
   14010:	mov	r5, #0
   14014:	mov	r0, r5
   14018:	pop	{r4, r5, r6, r7, fp, pc}
   1401c:	ldrb	r0, [r4, #49]	; 0x31
   14020:	tst	r0, #32
   14024:	mov	r5, #0
   14028:	bne	14210 <__assert_fail@plt+0x26bc>
   1402c:	ldr	r0, [r6, #32]
   14030:	cmp	r0, #0
   14034:	ldrhne	r0, [r6, #56]	; 0x38
   14038:	cmpne	r0, #4
   1403c:	beq	13d78 <__assert_fail@plt+0x2224>
   14040:	mov	r0, #7
   14044:	b	13d74 <__assert_fail@plt+0x2220>
   14048:	ldrb	r0, [r4, #49]	; 0x31
   1404c:	tst	r0, #32
   14050:	bne	14210 <__assert_fail@plt+0x26bc>
   14054:	ldr	r5, [r6, #4]
   14058:	str	r5, [r4]
   1405c:	mov	r0, r6
   14060:	bl	13304 <__assert_fail@plt+0x17b0>
   14064:	ldr	r0, [r5, #48]	; 0x30
   14068:	cmn	r0, #1
   1406c:	beq	140d0 <__assert_fail@plt+0x257c>
   14070:	ldrh	r0, [r5, #56]	; 0x38
   14074:	cmp	r0, #11
   14078:	beq	14218 <__assert_fail@plt+0x26c4>
   1407c:	ldr	r0, [r5, #40]	; 0x28
   14080:	ldr	r1, [r4, #24]
   14084:	mov	r2, #0
   14088:	strb	r2, [r1, r0]
   1408c:	ldr	r0, [r5, #48]	; 0x30
   14090:	cmp	r0, #0
   14094:	beq	1410c <__assert_fail@plt+0x25b8>
   14098:	ldrh	r0, [r5, #58]	; 0x3a
   1409c:	tst	r0, #2
   140a0:	bne	14138 <__assert_fail@plt+0x25e4>
   140a4:	tst	r0, #1
   140a8:	bne	141d4 <__assert_fail@plt+0x2680>
   140ac:	ldr	r1, [r5, #4]
   140b0:	movw	r3, #43466	; 0xa9ca
   140b4:	movt	r3, #1
   140b8:	mov	r0, r4
   140bc:	mvn	r2, #0
   140c0:	bl	142ec <__assert_fail@plt+0x2798>
   140c4:	cmp	r0, #0
   140c8:	bne	1411c <__assert_fail@plt+0x25c8>
   140cc:	b	141d4 <__assert_fail@plt+0x2680>
   140d0:	mov	r0, r5
   140d4:	bl	13304 <__assert_fail@plt+0x17b0>
   140d8:	bl	119a4 <__errno_location@plt>
   140dc:	mov	r5, #0
   140e0:	str	r5, [r0]
   140e4:	str	r5, [r4]
   140e8:	mov	r0, r5
   140ec:	pop	{r4, r5, r6, r7, fp, pc}
   140f0:	bl	119a4 <__errno_location@plt>
   140f4:	ldr	r0, [r0]
   140f8:	mov	r1, #7
   140fc:	strh	r1, [r6, #56]	; 0x38
   14100:	str	r0, [r6, #32]
   14104:	mov	r5, r6
   14108:	b	13f98 <__assert_fail@plt+0x2444>
   1410c:	mov	r0, r4
   14110:	bl	14d38 <__assert_fail@plt+0x31e4>
   14114:	cmp	r0, #0
   14118:	beq	141d4 <__assert_fail@plt+0x2680>
   1411c:	bl	119a4 <__errno_location@plt>
   14120:	ldr	r0, [r0]
   14124:	str	r0, [r5, #32]
   14128:	ldr	r0, [r4, #48]	; 0x30
   1412c:	orr	r0, r0, #8192	; 0x2000
   14130:	str	r0, [r4, #48]	; 0x30
   14134:	b	141d4 <__assert_fail@plt+0x2680>
   14138:	ldr	r0, [r4, #48]	; 0x30
   1413c:	tst	r0, #4
   14140:	bne	141cc <__assert_fail@plt+0x2678>
   14144:	ldr	r1, [r5, #36]	; 0x24
   14148:	tst	r0, #512	; 0x200
   1414c:	bne	141c0 <__assert_fail@plt+0x266c>
   14150:	mov	r0, r1
   14154:	bl	11a7c <fchdir@plt>
   14158:	cmp	r0, #0
   1415c:	beq	141cc <__assert_fail@plt+0x2678>
   14160:	bl	119a4 <__errno_location@plt>
   14164:	ldr	r0, [r0]
   14168:	str	r0, [r5, #32]
   1416c:	ldr	r0, [r4, #48]	; 0x30
   14170:	orr	r0, r0, #8192	; 0x2000
   14174:	str	r0, [r4, #48]	; 0x30
   14178:	b	141cc <__assert_fail@plt+0x2678>
   1417c:	movw	r1, #43467	; 0xa9cb
   14180:	movt	r1, #1
   14184:	mov	r0, r4
   14188:	bl	13a68 <__assert_fail@plt+0x1f14>
   1418c:	str	r0, [r5, #36]	; 0x24
   14190:	cmn	r0, #1
   14194:	ble	141a8 <__assert_fail@plt+0x2654>
   14198:	ldrh	r0, [r5, #58]	; 0x3a
   1419c:	orr	r0, r0, #2
   141a0:	strh	r0, [r5, #58]	; 0x3a
   141a4:	b	13dec <__assert_fail@plt+0x2298>
   141a8:	bl	119a4 <__errno_location@plt>
   141ac:	ldr	r0, [r0]
   141b0:	mov	r1, #7
   141b4:	strh	r1, [r5, #56]	; 0x38
   141b8:	str	r0, [r5, #32]
   141bc:	b	13dec <__assert_fail@plt+0x2298>
   141c0:	mov	r0, r4
   141c4:	mov	r2, #1
   141c8:	bl	14ed4 <__assert_fail@plt+0x3380>
   141cc:	ldr	r0, [r5, #36]	; 0x24
   141d0:	bl	11b00 <close@plt>
   141d4:	ldrh	r0, [r5, #56]	; 0x38
   141d8:	cmp	r0, #2
   141dc:	beq	14204 <__assert_fail@plt+0x26b0>
   141e0:	ldr	r0, [r5, #32]
   141e4:	mov	r1, #7
   141e8:	cmp	r0, #0
   141ec:	movweq	r1, #6
   141f0:	strh	r1, [r5, #56]	; 0x38
   141f4:	bne	14204 <__assert_fail@plt+0x26b0>
   141f8:	mov	r0, r4
   141fc:	mov	r1, r5
   14200:	bl	1421c <__assert_fail@plt+0x26c8>
   14204:	ldrb	r0, [r4, #49]	; 0x31
   14208:	tst	r0, #32
   1420c:	movne	r5, #0
   14210:	mov	r0, r5
   14214:	pop	{r4, r5, r6, r7, fp, pc}
   14218:	bl	11af4 <abort@plt>
   1421c:	push	{r4, r5, r6, r7, fp, lr}
   14220:	add	fp, sp, #16
   14224:	sub	sp, sp, #24
   14228:	add	lr, r1, #64	; 0x40
   1422c:	ldrh	r2, [r0, #48]	; 0x30
   14230:	movw	r3, #258	; 0x102
   14234:	tst	r2, r3
   14238:	beq	14270 <__assert_fail@plt+0x271c>
   1423c:	ldrd	r2, [lr]
   14240:	stm	sp, {r2, r3}
   14244:	ldrd	r2, [r1, #160]	; 0xa0
   14248:	str	r3, [sp, #12]
   1424c:	str	r2, [sp, #8]
   14250:	ldr	r0, [r0, #56]	; 0x38
   14254:	mov	r1, sp
   14258:	bl	16148 <__assert_fail@plt+0x45f4>
   1425c:	cmp	r0, #0
   14260:	beq	142e8 <__assert_fail@plt+0x2794>
   14264:	bl	13304 <__assert_fail@plt+0x17b0>
   14268:	sub	sp, fp, #16
   1426c:	pop	{r4, r5, r6, r7, fp, pc}
   14270:	ldr	r2, [r1, #4]
   14274:	cmp	r2, #0
   14278:	beq	142e0 <__assert_fail@plt+0x278c>
   1427c:	ldr	r3, [r2, #48]	; 0x30
   14280:	cmp	r3, #0
   14284:	blt	142e0 <__assert_fail@plt+0x278c>
   14288:	ldr	ip, [r0, #56]	; 0x38
   1428c:	ldrd	r4, [ip, #16]
   14290:	orrs	r3, r4, r5
   14294:	beq	142e8 <__assert_fail@plt+0x2794>
   14298:	ldrd	r4, [r1, #160]	; 0xa0
   1429c:	ldrd	r6, [ip]
   142a0:	eor	r1, r7, r5
   142a4:	eor	r3, r6, r4
   142a8:	orrs	r1, r3, r1
   142ac:	bne	142e0 <__assert_fail@plt+0x278c>
   142b0:	ldrd	r4, [lr]
   142b4:	ldr	r1, [ip, #8]!
   142b8:	eor	r1, r1, r4
   142bc:	ldr	r3, [ip, #4]
   142c0:	eor	r3, r3, r5
   142c4:	orrs	r1, r1, r3
   142c8:	bne	142e0 <__assert_fail@plt+0x278c>
   142cc:	ldrd	r4, [r2, #64]	; 0x40
   142d0:	strd	r4, [ip]
   142d4:	ldr	r0, [r0, #56]	; 0x38
   142d8:	ldrd	r2, [r2, #160]	; 0xa0
   142dc:	strd	r2, [r0]
   142e0:	sub	sp, fp, #16
   142e4:	pop	{r4, r5, r6, r7, fp, pc}
   142e8:	bl	11af4 <abort@plt>
   142ec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   142f0:	add	fp, sp, #24
   142f4:	sub	sp, sp, #104	; 0x68
   142f8:	mov	r7, r3
   142fc:	mov	r4, r2
   14300:	mov	r8, r1
   14304:	mov	r5, r0
   14308:	cmp	r3, #0
   1430c:	beq	14330 <__assert_fail@plt+0x27dc>
   14310:	movw	r1, #43466	; 0xa9ca
   14314:	movt	r1, #1
   14318:	mov	r0, r7
   1431c:	bl	1177c <strcmp@plt>
   14320:	mov	r6, r0
   14324:	cmp	r0, #0
   14328:	movwne	r6, #1
   1432c:	b	14334 <__assert_fail@plt+0x27e0>
   14330:	mov	r6, #1
   14334:	ldr	r0, [r5, #48]	; 0x30
   14338:	tst	r0, #4
   1433c:	bne	14394 <__assert_fail@plt+0x2840>
   14340:	mov	r9, #0
   14344:	cmn	r4, #1
   14348:	mov	r1, #0
   1434c:	movwgt	r1, #1
   14350:	orrs	r1, r1, r6
   14354:	bne	143b4 <__assert_fail@plt+0x2860>
   14358:	ands	r0, r0, #512	; 0x200
   1435c:	beq	143b4 <__assert_fail@plt+0x2860>
   14360:	add	r4, r5, #60	; 0x3c
   14364:	mov	r0, r4
   14368:	bl	163ec <__assert_fail@plt+0x4898>
   1436c:	cmp	r0, #0
   14370:	bne	143bc <__assert_fail@plt+0x2868>
   14374:	mov	r0, r4
   14378:	bl	16438 <__assert_fail@plt+0x48e4>
   1437c:	cmn	r0, #1
   14380:	ble	143bc <__assert_fail@plt+0x2868>
   14384:	mov	r4, r0
   14388:	mov	r9, #0
   1438c:	mov	r7, #0
   14390:	b	143d8 <__assert_fail@plt+0x2884>
   14394:	mov	r5, #0
   14398:	cmp	r4, #0
   1439c:	blt	144c0 <__assert_fail@plt+0x296c>
   143a0:	ands	r0, r0, #512	; 0x200
   143a4:	beq	144c0 <__assert_fail@plt+0x296c>
   143a8:	mov	r0, r4
   143ac:	bl	11b00 <close@plt>
   143b0:	b	144c0 <__assert_fail@plt+0x296c>
   143b4:	cmn	r4, #1
   143b8:	bgt	143d8 <__assert_fail@plt+0x2884>
   143bc:	mov	r0, r5
   143c0:	mov	r1, r7
   143c4:	bl	13a68 <__assert_fail@plt+0x1f14>
   143c8:	cmp	r0, #0
   143cc:	blt	14470 <__assert_fail@plt+0x291c>
   143d0:	mov	r4, r0
   143d4:	mov	r9, #1
   143d8:	ldrb	r0, [r5, #48]	; 0x30
   143dc:	tst	r0, #2
   143e0:	bne	14404 <__assert_fail@plt+0x28b0>
   143e4:	cmp	r7, #0
   143e8:	beq	1444c <__assert_fail@plt+0x28f8>
   143ec:	movw	r1, #43466	; 0xa9ca
   143f0:	movt	r1, #1
   143f4:	mov	r0, r7
   143f8:	bl	1177c <strcmp@plt>
   143fc:	cmp	r0, #0
   14400:	bne	1444c <__assert_fail@plt+0x28f8>
   14404:	mov	r1, sp
   14408:	mov	r0, r4
   1440c:	bl	1a3f0 <lchmod@@Base+0x3f64>
   14410:	cmp	r0, #0
   14414:	bne	1449c <__assert_fail@plt+0x2948>
   14418:	ldrd	r0, [r8, #64]	; 0x40
   1441c:	ldm	sp, {r2, r3}
   14420:	eor	r1, r1, r3
   14424:	eor	r0, r0, r2
   14428:	orrs	r0, r0, r1
   1442c:	bne	14490 <__assert_fail@plt+0x293c>
   14430:	ldrd	r0, [r8, #160]	; 0xa0
   14434:	ldr	r2, [sp, #96]	; 0x60
   14438:	ldr	r3, [sp, #100]	; 0x64
   1443c:	eor	r1, r1, r3
   14440:	eor	r0, r0, r2
   14444:	orrs	r0, r0, r1
   14448:	bne	14490 <__assert_fail@plt+0x293c>
   1444c:	ldrb	r0, [r5, #49]	; 0x31
   14450:	tst	r0, #2
   14454:	bne	14478 <__assert_fail@plt+0x2924>
   14458:	mov	r0, r4
   1445c:	bl	11a7c <fchdir@plt>
   14460:	mov	r5, r0
   14464:	cmp	r9, #0
   14468:	bne	144a8 <__assert_fail@plt+0x2954>
   1446c:	b	144c0 <__assert_fail@plt+0x296c>
   14470:	mvn	r5, #0
   14474:	b	144c0 <__assert_fail@plt+0x296c>
   14478:	mov	r0, r5
   1447c:	mov	r1, r4
   14480:	mov	r2, r6
   14484:	bl	14ed4 <__assert_fail@plt+0x3380>
   14488:	mov	r5, #0
   1448c:	b	144c0 <__assert_fail@plt+0x296c>
   14490:	bl	119a4 <__errno_location@plt>
   14494:	mov	r1, #2
   14498:	str	r1, [r0]
   1449c:	mvn	r5, #0
   144a0:	cmp	r9, #0
   144a4:	beq	144c0 <__assert_fail@plt+0x296c>
   144a8:	bl	119a4 <__errno_location@plt>
   144ac:	mov	r6, r0
   144b0:	ldr	r7, [r0]
   144b4:	mov	r0, r4
   144b8:	bl	11b00 <close@plt>
   144bc:	str	r7, [r6]
   144c0:	mov	r0, r5
   144c4:	sub	sp, fp, #24
   144c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144d0:	add	fp, sp, #28
   144d4:	sub	sp, sp, #68	; 0x44
   144d8:	mov	r4, r1
   144dc:	ldr	sl, [r0]
   144e0:	ldr	r7, [sl, #12]
   144e4:	cmp	r7, #0
   144e8:	str	r0, [fp, #-36]	; 0xffffffdc
   144ec:	beq	14860 <__assert_fail@plt+0x2d0c>
   144f0:	mov	r0, r7
   144f4:	bl	11a70 <dirfd@plt>
   144f8:	str	r0, [fp, #-32]	; 0xffffffe0
   144fc:	cmn	r0, #1
   14500:	ble	14898 <__assert_fail@plt+0x2d44>
   14504:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14508:	mov	r1, ip
   1450c:	ldr	r0, [r1, #44]!	; 0x2c
   14510:	str	r1, [fp, #-44]	; 0xffffffd4
   14514:	mvn	r1, #0
   14518:	cmp	r0, #0
   1451c:	movweq	r1, #34464	; 0x86a0
   14520:	movteq	r1, #1
   14524:	str	r1, [sp, #28]
   14528:	mov	r0, #1
   1452c:	str	r0, [sp, #4]
   14530:	str	r4, [sp, #8]
   14534:	ldr	r1, [sl, #28]
   14538:	ldr	r0, [sl, #40]	; 0x28
   1453c:	sub	r2, r0, #1
   14540:	ldrb	r1, [r1, r2]
   14544:	cmp	r1, #47	; 0x2f
   14548:	moveq	r0, r2
   1454c:	ldrb	r1, [ip, #48]	; 0x30
   14550:	mov	r9, #0
   14554:	tst	r1, #4
   14558:	mov	r1, #0
   1455c:	str	r1, [sp, #40]	; 0x28
   14560:	beq	14578 <__assert_fail@plt+0x2a24>
   14564:	ldr	r1, [ip, #24]
   14568:	mov	r2, #47	; 0x2f
   1456c:	strb	r2, [r1, r0]!
   14570:	add	r1, r1, #1
   14574:	str	r1, [sp, #40]	; 0x28
   14578:	str	r7, [sp, #12]
   1457c:	add	r1, r0, #1
   14580:	ldr	r4, [sl, #12]
   14584:	cmp	r4, #0
   14588:	str	r1, [fp, #-40]	; 0xffffffd8
   1458c:	beq	148b4 <__assert_fail@plt+0x2d60>
   14590:	ldr	r0, [sl, #48]	; 0x30
   14594:	add	r0, r0, #1
   14598:	str	r0, [sp, #24]
   1459c:	ldr	r0, [ip, #36]	; 0x24
   145a0:	sub	r0, r0, r1
   145a4:	str	r0, [sp, #44]	; 0x2c
   145a8:	mov	r6, #0
   145ac:	bl	119a4 <__errno_location@plt>
   145b0:	str	r0, [sp, #36]	; 0x24
   145b4:	mov	r9, #0
   145b8:	mov	r7, #0
   145bc:	mov	r0, #0
   145c0:	str	r0, [sp, #48]	; 0x30
   145c4:	mov	r0, #0
   145c8:	str	r0, [sp, #20]
   145cc:	mov	r0, #0
   145d0:	str	r0, [sp, #16]
   145d4:	str	sl, [sp, #32]
   145d8:	ldr	r0, [sp, #36]	; 0x24
   145dc:	str	r6, [r0]
   145e0:	mov	r0, r4
   145e4:	bl	11a4c <readdir64@plt>
   145e8:	cmp	r0, #0
   145ec:	beq	14aec <__assert_fail@plt+0x2f98>
   145f0:	mov	r8, r0
   145f4:	mov	r6, r9
   145f8:	ldr	r5, [fp, #-36]	; 0xffffffdc
   145fc:	ldrb	r0, [r5, #48]	; 0x30
   14600:	tst	r0, #32
   14604:	ldrbeq	r0, [r8, #19]
   14608:	cmpeq	r0, #46	; 0x2e
   1460c:	beq	146b4 <__assert_fail@plt+0x2b60>
   14610:	add	r4, r8, #19
   14614:	mov	r0, r4
   14618:	bl	11974 <strlen@plt>
   1461c:	mov	sl, r0
   14620:	mov	r0, r5
   14624:	mov	r1, r4
   14628:	mov	r2, sl
   1462c:	bl	136e4 <__assert_fail@plt+0x1b90>
   14630:	mov	r9, r0
   14634:	cmp	r0, #0
   14638:	beq	148c8 <__assert_fail@plt+0x2d74>
   1463c:	ldr	r0, [sp, #44]	; 0x2c
   14640:	cmp	sl, r0
   14644:	bcs	1465c <__assert_fail@plt+0x2b08>
   14648:	ldr	r2, [fp, #-36]	; 0xffffffdc
   1464c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14650:	adds	r0, sl, r3
   14654:	bcc	146f8 <__assert_fail@plt+0x2ba4>
   14658:	b	14c5c <__assert_fail@plt+0x3108>
   1465c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14660:	add	r0, sl, r0
   14664:	add	r1, r0, #1
   14668:	ldr	r5, [fp, #-36]	; 0xffffffdc
   1466c:	ldr	r4, [r5, #24]
   14670:	mov	r0, r5
   14674:	bl	1366c <__assert_fail@plt+0x1b18>
   14678:	cmp	r0, #0
   1467c:	beq	148c8 <__assert_fail@plt+0x2d74>
   14680:	ldr	r0, [r5, #24]
   14684:	cmp	r4, r0
   14688:	mov	r2, r5
   1468c:	beq	146e0 <__assert_fail@plt+0x2b8c>
   14690:	ldrb	r1, [r2, #48]	; 0x30
   14694:	tst	r1, #4
   14698:	ldr	r1, [sp, #40]	; 0x28
   1469c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   146a0:	addne	r1, r0, r3
   146a4:	str	r1, [sp, #40]	; 0x28
   146a8:	mov	r0, #1
   146ac:	str	r0, [sp, #16]
   146b0:	b	146e4 <__assert_fail@plt+0x2b90>
   146b4:	ldrb	r0, [r8, #20]
   146b8:	cmp	r0, #0
   146bc:	beq	146d0 <__assert_fail@plt+0x2b7c>
   146c0:	cmp	r0, #46	; 0x2e
   146c4:	ldrbeq	r0, [r8, #21]
   146c8:	cmpeq	r0, #0
   146cc:	bne	14610 <__assert_fail@plt+0x2abc>
   146d0:	ldr	sl, [sp, #32]
   146d4:	mov	r9, r6
   146d8:	mov	r6, #0
   146dc:	b	14844 <__assert_fail@plt+0x2cf0>
   146e0:	ldr	r3, [fp, #-40]	; 0xffffffd8
   146e4:	ldr	r0, [r2, #36]	; 0x24
   146e8:	sub	r0, r0, r3
   146ec:	str	r0, [sp, #44]	; 0x2c
   146f0:	adds	r0, sl, r3
   146f4:	bcs	14c5c <__assert_fail@plt+0x3108>
   146f8:	ldr	r1, [sp, #24]
   146fc:	str	r1, [r9, #48]	; 0x30
   14700:	ldr	r1, [r2]
   14704:	str	r0, [r9, #40]	; 0x28
   14708:	str	r1, [r9, #4]
   1470c:	ldrd	r0, [r8]
   14710:	strd	r0, [r9, #160]	; 0xa0
   14714:	ldrb	r0, [r2, #48]	; 0x30
   14718:	tst	r0, #4
   1471c:	ldr	sl, [sp, #32]
   14720:	mov	r5, r6
   14724:	bne	14734 <__assert_fail@plt+0x2be0>
   14728:	add	r0, r9, #168	; 0xa8
   1472c:	str	r0, [r9, #24]
   14730:	b	14754 <__assert_fail@plt+0x2c00>
   14734:	ldr	r0, [r9, #28]
   14738:	ldr	r2, [r9, #52]	; 0x34
   1473c:	str	r0, [r9, #24]
   14740:	add	r1, r9, #168	; 0xa8
   14744:	add	r2, r2, #1
   14748:	ldr	r0, [sp, #40]	; 0x28
   1474c:	bl	117ac <memmove@plt>
   14750:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14754:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14758:	ldr	r0, [r0]
   1475c:	cmp	r0, #0
   14760:	beq	14788 <__assert_fail@plt+0x2c34>
   14764:	ldrb	r0, [r2, #49]	; 0x31
   14768:	tst	r0, #4
   1476c:	bne	14788 <__assert_fail@plt+0x2c34>
   14770:	mov	r0, r2
   14774:	mov	r1, r9
   14778:	mov	r2, #0
   1477c:	bl	13794 <__assert_fail@plt+0x1c40>
   14780:	strh	r0, [r9, #56]	; 0x38
   14784:	b	147d8 <__assert_fail@plt+0x2c84>
   14788:	add	r0, r9, #64	; 0x40
   1478c:	ldr	r1, [r2, #48]	; 0x30
   14790:	mov	r4, #0
   14794:	tst	r1, #8
   14798:	beq	147bc <__assert_fail@plt+0x2c68>
   1479c:	ldrb	r2, [r8, #18]
   147a0:	orr	r3, r2, #4
   147a4:	cmp	r3, #4
   147a8:	beq	147bc <__assert_fail@plt+0x2c68>
   147ac:	eor	r2, r2, #10
   147b0:	and	r1, r1, #16
   147b4:	orrs	r4, r1, r2
   147b8:	movwne	r4, #1
   147bc:	mov	r1, #11
   147c0:	strh	r1, [r9, #56]	; 0x38
   147c4:	ldrb	r1, [r8, #18]
   147c8:	bl	1519c <__assert_fail@plt+0x3648>
   147cc:	eor	r1, r4, #1
   147d0:	mov	r0, r9
   147d4:	bl	13764 <__assert_fail@plt+0x1c10>
   147d8:	mov	r6, #0
   147dc:	str	r6, [r9, #8]
   147e0:	cmp	r5, #0
   147e4:	mov	r4, r9
   147e8:	ldrne	r0, [sp, #48]	; 0x30
   147ec:	strne	r9, [r0, #8]
   147f0:	movne	r4, r5
   147f4:	movw	r0, #10000	; 0x2710
   147f8:	cmp	r7, r0
   147fc:	bne	14820 <__assert_fail@plt+0x2ccc>
   14800:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14804:	ldr	r0, [r0]
   14808:	cmp	r0, #0
   1480c:	bne	14820 <__assert_fail@plt+0x2ccc>
   14810:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14814:	mov	r0, sl
   14818:	bl	151bc <__assert_fail@plt+0x3668>
   1481c:	str	r0, [sp, #20]
   14820:	add	r7, r7, #1
   14824:	ldr	r0, [sp, #28]
   14828:	cmp	r0, r7
   1482c:	mov	r0, #0
   14830:	movwls	r0, #15
   14834:	cmp	r0, #0
   14838:	bne	14ca8 <__assert_fail@plt+0x3154>
   1483c:	str	r9, [sp, #48]	; 0x30
   14840:	mov	r9, r4
   14844:	ldr	r4, [sl, #12]
   14848:	cmp	r4, #0
   1484c:	bne	145d8 <__assert_fail@plt+0x2a84>
   14850:	ldr	r0, [sp, #16]
   14854:	tst	r0, #1
   14858:	ldr	r4, [sp, #8]
   1485c:	b	14b38 <__assert_fail@plt+0x2fe4>
   14860:	mov	r2, r0
   14864:	ldr	r3, [r0, #48]	; 0x30
   14868:	and	r1, r3, #516	; 0x204
   1486c:	mvn	r0, #99	; 0x63
   14870:	cmp	r1, #512	; 0x200
   14874:	ldreq	r0, [r2, #32]
   14878:	ldr	r1, [sl, #24]
   1487c:	mov	r2, #0
   14880:	tst	r3, #16
   14884:	beq	1491c <__assert_fail@plt+0x2dc8>
   14888:	tst	r3, #1
   1488c:	bne	14910 <__assert_fail@plt+0x2dbc>
   14890:	mov	r2, #32768	; 0x8000
   14894:	b	1491c <__assert_fail@plt+0x2dc8>
   14898:	ldr	r0, [sl, #12]
   1489c:	bl	11b30 <closedir@plt>
   148a0:	mov	r9, #0
   148a4:	str	r9, [sl, #12]
   148a8:	cmp	r4, #3
   148ac:	beq	14968 <__assert_fail@plt+0x2e14>
   148b0:	b	14d10 <__assert_fail@plt+0x31bc>
   148b4:	mov	r7, #0
   148b8:	mov	r0, #0
   148bc:	str	r0, [sp, #20]
   148c0:	ldr	r4, [sp, #8]
   148c4:	b	14b50 <__assert_fail@plt+0x2ffc>
   148c8:	ldr	r4, [sp, #36]	; 0x24
   148cc:	ldr	r8, [r4]
   148d0:	mov	r0, r9
   148d4:	bl	13304 <__assert_fail@plt+0x17b0>
   148d8:	mov	r0, r6
   148dc:	bl	13a98 <__assert_fail@plt+0x1f44>
   148e0:	ldr	r7, [sp, #32]
   148e4:	ldr	r0, [r7, #12]
   148e8:	bl	11b30 <closedir@plt>
   148ec:	mov	r9, #0
   148f0:	str	r9, [r7, #12]
   148f4:	mov	r0, #7
   148f8:	strh	r0, [r7, #56]	; 0x38
   148fc:	ldr	r0, [r5, #48]	; 0x30
   14900:	orr	r0, r0, #8192	; 0x2000
   14904:	str	r0, [r5, #48]	; 0x30
   14908:	str	r8, [r4]
   1490c:	b	14d10 <__assert_fail@plt+0x31bc>
   14910:	ldr	r3, [sl, #48]	; 0x30
   14914:	cmp	r3, #0
   14918:	movne	r2, #32768	; 0x8000
   1491c:	sub	r3, fp, #32
   14920:	bl	16bb0 <lchmod@@Base+0x724>
   14924:	str	r0, [sl, #12]
   14928:	cmp	r0, #0
   1492c:	beq	1495c <__assert_fail@plt+0x2e08>
   14930:	ldrh	r0, [sl, #56]	; 0x38
   14934:	cmp	r0, #11
   14938:	bne	14980 <__assert_fail@plt+0x2e2c>
   1493c:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14940:	mov	r0, r6
   14944:	mov	r1, sl
   14948:	mov	r2, #0
   1494c:	bl	13794 <__assert_fail@plt+0x1c40>
   14950:	mov	ip, r6
   14954:	strh	r0, [sl, #56]	; 0x38
   14958:	b	149c8 <__assert_fail@plt+0x2e74>
   1495c:	mov	r9, #0
   14960:	cmp	r4, #3
   14964:	bne	14d10 <__assert_fail@plt+0x31bc>
   14968:	mov	r0, #4
   1496c:	strh	r0, [sl, #56]	; 0x38
   14970:	bl	119a4 <__errno_location@plt>
   14974:	ldr	r0, [r0]
   14978:	str	r0, [sl, #32]
   1497c:	b	14d10 <__assert_fail@plt+0x31bc>
   14980:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14984:	ldrb	r0, [ip, #49]	; 0x31
   14988:	tst	r0, #1
   1498c:	beq	149c8 <__assert_fail@plt+0x2e74>
   14990:	mov	r0, ip
   14994:	mov	r1, sl
   14998:	bl	1421c <__assert_fail@plt+0x26c8>
   1499c:	mov	r9, #0
   149a0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   149a4:	mov	r1, sl
   149a8:	mov	r2, #0
   149ac:	bl	13794 <__assert_fail@plt+0x1c40>
   149b0:	ldr	r0, [fp, #-36]	; 0xffffffdc
   149b4:	mov	r1, sl
   149b8:	bl	14e1c <__assert_fail@plt+0x32c8>
   149bc:	ldr	ip, [fp, #-36]	; 0xffffffdc
   149c0:	cmp	r0, #0
   149c4:	beq	14ccc <__assert_fail@plt+0x3178>
   149c8:	mov	r1, ip
   149cc:	ldr	r0, [r1, #44]!	; 0x2c
   149d0:	str	r1, [fp, #-44]	; 0xffffffd4
   149d4:	mvn	r1, #0
   149d8:	cmp	r0, #0
   149dc:	movweq	r1, #34464	; 0x86a0
   149e0:	movteq	r1, #1
   149e4:	str	r1, [sp, #28]
   149e8:	mov	r6, #0
   149ec:	cmp	r4, #2
   149f0:	beq	14a14 <__assert_fail@plt+0x2ec0>
   149f4:	ldr	r0, [ip, #48]	; 0x30
   149f8:	and	r1, r0, #56	; 0x38
   149fc:	mov	r0, #0
   14a00:	cmp	r1, #24
   14a04:	ldreq	r1, [sl, #84]	; 0x54
   14a08:	cmpeq	r1, #2
   14a0c:	beq	14d1c <__assert_fail@plt+0x31c8>
   14a10:	eor	r6, r0, #1
   14a14:	cmp	r4, #3
   14a18:	beq	14a2c <__assert_fail@plt+0x2ed8>
   14a1c:	cmp	r6, #0
   14a20:	bne	14a2c <__assert_fail@plt+0x2ed8>
   14a24:	str	r6, [sp, #4]
   14a28:	b	14530 <__assert_fail@plt+0x29dc>
   14a2c:	ldrb	r0, [ip, #49]	; 0x31
   14a30:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14a34:	tst	r0, #2
   14a38:	beq	14a58 <__assert_fail@plt+0x2f04>
   14a3c:	mov	r0, r2
   14a40:	movw	r1, #1030	; 0x406
   14a44:	mov	r2, #3
   14a48:	bl	19c40 <lchmod@@Base+0x37b4>
   14a4c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14a50:	mov	r2, r0
   14a54:	str	r0, [fp, #-32]	; 0xffffffe0
   14a58:	cmp	r2, #0
   14a5c:	blt	14a7c <__assert_fail@plt+0x2f28>
   14a60:	mov	r0, ip
   14a64:	mov	r1, sl
   14a68:	mov	r3, #0
   14a6c:	bl	142ec <__assert_fail@plt+0x2798>
   14a70:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14a74:	cmp	r0, #0
   14a78:	beq	14528 <__assert_fail@plt+0x29d4>
   14a7c:	subs	r0, r4, #3
   14a80:	movwne	r0, #1
   14a84:	eor	r1, r6, #1
   14a88:	orrs	r0, r0, r1
   14a8c:	bne	14a9c <__assert_fail@plt+0x2f48>
   14a90:	bl	119a4 <__errno_location@plt>
   14a94:	ldr	r0, [r0]
   14a98:	str	r0, [sl, #32]
   14a9c:	ldrh	r0, [sl, #58]	; 0x3a
   14aa0:	orr	r0, r0, #1
   14aa4:	strh	r0, [sl, #58]	; 0x3a
   14aa8:	ldr	r0, [sl, #12]
   14aac:	bl	11b30 <closedir@plt>
   14ab0:	mov	r6, #0
   14ab4:	str	r6, [sl, #12]
   14ab8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14abc:	ldr	r0, [ip, #48]	; 0x30
   14ac0:	tst	r0, #512	; 0x200
   14ac4:	beq	14adc <__assert_fail@plt+0x2f88>
   14ac8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14acc:	cmp	r0, #0
   14ad0:	blt	14adc <__assert_fail@plt+0x2f88>
   14ad4:	bl	11b00 <close@plt>
   14ad8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14adc:	mov	r0, #0
   14ae0:	str	r0, [sp, #4]
   14ae4:	str	r6, [sl, #12]
   14ae8:	b	14530 <__assert_fail@plt+0x29dc>
   14aec:	ldr	r0, [sp, #36]	; 0x24
   14af0:	ldr	r0, [r0]
   14af4:	cmp	r0, #0
   14af8:	beq	14b14 <__assert_fail@plt+0x2fc0>
   14afc:	str	r0, [sl, #32]
   14b00:	ldr	r0, [sp, #12]
   14b04:	orrs	r0, r0, r7
   14b08:	mov	r0, #4
   14b0c:	movwne	r0, #7
   14b10:	strh	r0, [sl, #56]	; 0x38
   14b14:	ldr	r0, [sl, #12]
   14b18:	cmp	r0, #0
   14b1c:	ldr	r4, [sp, #8]
   14b20:	beq	14cb8 <__assert_fail@plt+0x3164>
   14b24:	bl	11b30 <closedir@plt>
   14b28:	mov	r0, #0
   14b2c:	str	r0, [sl, #12]
   14b30:	ldr	r0, [sp, #16]
   14b34:	tst	r0, #1
   14b38:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14b3c:	beq	14b50 <__assert_fail@plt+0x2ffc>
   14b40:	mov	r0, ip
   14b44:	mov	r1, r9
   14b48:	bl	15200 <__assert_fail@plt+0x36ac>
   14b4c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14b50:	ldrb	r0, [ip, #48]	; 0x30
   14b54:	tst	r0, #4
   14b58:	beq	14b84 <__assert_fail@plt+0x3030>
   14b5c:	ldr	r0, [ip, #36]	; 0x24
   14b60:	ldr	r2, [sp, #40]	; 0x28
   14b64:	sub	r1, r2, #1
   14b68:	ldr	r3, [fp, #-40]	; 0xffffffd8
   14b6c:	cmp	r3, r0
   14b70:	moveq	r2, r1
   14b74:	cmp	r7, #0
   14b78:	moveq	r2, r1
   14b7c:	mov	r0, #0
   14b80:	strb	r0, [r2]
   14b84:	ldr	r0, [sp, #12]
   14b88:	cmp	r0, #0
   14b8c:	ldreq	r0, [sp, #4]
   14b90:	eorseq	r0, r0, #1
   14b94:	beq	14bc0 <__assert_fail@plt+0x306c>
   14b98:	cmp	r7, #0
   14b9c:	bne	14bf4 <__assert_fail@plt+0x30a0>
   14ba0:	cmp	r4, #3
   14ba4:	bne	14d04 <__assert_fail@plt+0x31b0>
   14ba8:	ldrh	r0, [sl, #56]	; 0x38
   14bac:	cmp	r0, #4
   14bb0:	cmpne	r0, #7
   14bb4:	movne	r0, #6
   14bb8:	strhne	r0, [sl, #56]	; 0x38
   14bbc:	b	14d04 <__assert_fail@plt+0x31b0>
   14bc0:	cmp	r4, #1
   14bc4:	cmpne	r7, #0
   14bc8:	bne	14bf4 <__assert_fail@plt+0x30a0>
   14bcc:	ldr	r0, [sl, #48]	; 0x30
   14bd0:	cmp	r0, #0
   14bd4:	beq	14cdc <__assert_fail@plt+0x3188>
   14bd8:	ldr	r1, [sl, #4]
   14bdc:	movw	r3, #43466	; 0xa9ca
   14be0:	movt	r3, #1
   14be4:	mov	r0, ip
   14be8:	mvn	r2, #0
   14bec:	bl	142ec <__assert_fail@plt+0x2798>
   14bf0:	b	14ce4 <__assert_fail@plt+0x3190>
   14bf4:	ldr	r0, [sp, #20]
   14bf8:	tst	r0, #1
   14bfc:	beq	14c2c <__assert_fail@plt+0x30d8>
   14c00:	movw	r0, #21128	; 0x5288
   14c04:	movt	r0, #1
   14c08:	str	r0, [ip, #44]	; 0x2c
   14c0c:	mov	r0, ip
   14c10:	mov	r1, r9
   14c14:	mov	r2, r7
   14c18:	bl	138fc <__assert_fail@plt+0x1da8>
   14c1c:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14c20:	mov	r9, r0
   14c24:	mov	r0, #0
   14c28:	str	r0, [ip, #44]	; 0x2c
   14c2c:	cmp	r7, #2
   14c30:	bcc	14d10 <__assert_fail@plt+0x31bc>
   14c34:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14c38:	ldr	r0, [r0]
   14c3c:	cmp	r0, #0
   14c40:	beq	14d10 <__assert_fail@plt+0x31bc>
   14c44:	mov	r0, ip
   14c48:	mov	r1, r9
   14c4c:	mov	r2, r7
   14c50:	bl	138fc <__assert_fail@plt+0x1da8>
   14c54:	mov	r9, r0
   14c58:	b	14d10 <__assert_fail@plt+0x31bc>
   14c5c:	mov	r0, r9
   14c60:	mov	r4, r2
   14c64:	bl	13304 <__assert_fail@plt+0x17b0>
   14c68:	mov	r0, r6
   14c6c:	bl	13a98 <__assert_fail@plt+0x1f44>
   14c70:	ldr	r5, [sp, #32]
   14c74:	ldr	r0, [r5, #12]
   14c78:	bl	11b30 <closedir@plt>
   14c7c:	mov	r9, #0
   14c80:	str	r9, [r5, #12]
   14c84:	mov	r0, #7
   14c88:	strh	r0, [r5, #56]	; 0x38
   14c8c:	ldr	r0, [r4, #48]	; 0x30
   14c90:	orr	r0, r0, #8192	; 0x2000
   14c94:	str	r0, [r4, #48]	; 0x30
   14c98:	mov	r0, #36	; 0x24
   14c9c:	ldr	r1, [sp, #36]	; 0x24
   14ca0:	str	r0, [r1]
   14ca4:	b	14d10 <__assert_fail@plt+0x31bc>
   14ca8:	cmp	r0, #15
   14cac:	bne	14d0c <__assert_fail@plt+0x31b8>
   14cb0:	mov	r9, r4
   14cb4:	ldr	r4, [sp, #8]
   14cb8:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14cbc:	ldr	r0, [sp, #16]
   14cc0:	tst	r0, #1
   14cc4:	bne	14b40 <__assert_fail@plt+0x2fec>
   14cc8:	b	14b50 <__assert_fail@plt+0x2ffc>
   14ccc:	bl	119a4 <__errno_location@plt>
   14cd0:	mov	r1, #12
   14cd4:	str	r1, [r0]
   14cd8:	b	14d10 <__assert_fail@plt+0x31bc>
   14cdc:	mov	r0, ip
   14ce0:	bl	14d38 <__assert_fail@plt+0x31e4>
   14ce4:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14ce8:	cmp	r0, #0
   14cec:	beq	14b98 <__assert_fail@plt+0x3044>
   14cf0:	mov	r0, #7
   14cf4:	strh	r0, [sl, #56]	; 0x38
   14cf8:	ldr	r0, [ip, #48]	; 0x30
   14cfc:	orr	r0, r0, #8192	; 0x2000
   14d00:	str	r0, [ip, #48]	; 0x30
   14d04:	mov	r0, r9
   14d08:	bl	13a98 <__assert_fail@plt+0x1f44>
   14d0c:	mov	r9, #0
   14d10:	mov	r0, r9
   14d14:	sub	sp, fp, #28
   14d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d1c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14d20:	mov	r0, sl
   14d24:	bl	15134 <__assert_fail@plt+0x35e0>
   14d28:	ldr	ip, [fp, #-36]	; 0xffffffdc
   14d2c:	cmp	r0, #0
   14d30:	movwne	r0, #1
   14d34:	b	14a10 <__assert_fail@plt+0x2ebc>
   14d38:	push	{r4, r5, fp, lr}
   14d3c:	add	fp, sp, #8
   14d40:	mov	r4, r0
   14d44:	ldr	r0, [r0, #48]	; 0x30
   14d48:	mov	r5, #0
   14d4c:	tst	r0, #4
   14d50:	bne	14d84 <__assert_fail@plt+0x3230>
   14d54:	tst	r0, #512	; 0x200
   14d58:	bne	14d74 <__assert_fail@plt+0x3220>
   14d5c:	ldr	r0, [r4, #28]
   14d60:	bl	11a7c <fchdir@plt>
   14d64:	mov	r5, r0
   14d68:	cmp	r0, #0
   14d6c:	movwne	r5, #1
   14d70:	b	14d84 <__assert_fail@plt+0x3230>
   14d74:	mov	r0, r4
   14d78:	mvn	r1, #99	; 0x63
   14d7c:	mov	r2, #1
   14d80:	bl	14ed4 <__assert_fail@plt+0x3380>
   14d84:	add	r0, r4, #60	; 0x3c
   14d88:	bl	13c04 <__assert_fail@plt+0x20b0>
   14d8c:	mov	r0, r5
   14d90:	pop	{r4, r5, fp, pc}
   14d94:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14d98:	add	fp, sp, #24
   14d9c:	mov	r4, r1
   14da0:	mov	r8, r0
   14da4:	ldr	r1, [r1, #52]	; 0x34
   14da8:	str	r1, [r4, #40]	; 0x28
   14dac:	ldr	r0, [r0, #24]
   14db0:	add	r6, r4, #168	; 0xa8
   14db4:	add	r2, r1, #1
   14db8:	mov	r1, r6
   14dbc:	bl	117ac <memmove@plt>
   14dc0:	mov	r0, r6
   14dc4:	mov	r1, #47	; 0x2f
   14dc8:	bl	11a34 <strrchr@plt>
   14dcc:	cmp	r0, #0
   14dd0:	beq	14e0c <__assert_fail@plt+0x32b8>
   14dd4:	cmp	r0, r6
   14dd8:	bne	14de8 <__assert_fail@plt+0x3294>
   14ddc:	ldrb	r1, [r0, #1]
   14de0:	cmp	r1, #0
   14de4:	beq	14e0c <__assert_fail@plt+0x32b8>
   14de8:	add	r7, r0, #1
   14dec:	mov	r0, r7
   14df0:	bl	11974 <strlen@plt>
   14df4:	mov	r5, r0
   14df8:	add	r2, r0, #1
   14dfc:	mov	r0, r6
   14e00:	mov	r1, r7
   14e04:	bl	117ac <memmove@plt>
   14e08:	str	r5, [r4, #52]	; 0x34
   14e0c:	ldr	r0, [r8, #24]
   14e10:	str	r0, [r4, #24]
   14e14:	str	r0, [r4, #28]
   14e18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e1c:	push	{r4, r5, r6, r7, fp, lr}
   14e20:	add	fp, sp, #16
   14e24:	mov	r4, r1
   14e28:	mov	r6, r0
   14e2c:	ldrh	r0, [r0, #48]	; 0x30
   14e30:	movw	r1, #258	; 0x102
   14e34:	tst	r0, r1
   14e38:	beq	14eac <__assert_fail@plt+0x3358>
   14e3c:	mov	r0, #24
   14e40:	bl	1947c <lchmod@@Base+0x2ff0>
   14e44:	mov	r5, #0
   14e48:	cmp	r0, #0
   14e4c:	beq	14ecc <__assert_fail@plt+0x3378>
   14e50:	mov	r7, r0
   14e54:	ldrd	r0, [r4, #64]	; 0x40
   14e58:	stm	r7, {r0, r1}
   14e5c:	ldrd	r0, [r4, #160]	; 0xa0
   14e60:	add	r2, r7, #8
   14e64:	stm	r2, {r0, r1, r4}
   14e68:	ldr	r0, [r6, #56]	; 0x38
   14e6c:	mov	r1, r7
   14e70:	bl	16108 <__assert_fail@plt+0x45b4>
   14e74:	cmp	r0, r7
   14e78:	beq	14ea0 <__assert_fail@plt+0x334c>
   14e7c:	mov	r6, r0
   14e80:	mov	r0, r7
   14e84:	bl	13304 <__assert_fail@plt+0x17b0>
   14e88:	cmp	r6, #0
   14e8c:	beq	14ecc <__assert_fail@plt+0x3378>
   14e90:	ldr	r0, [r6, #16]
   14e94:	mov	r1, #2
   14e98:	strh	r1, [r4, #56]	; 0x38
   14e9c:	str	r0, [r4]
   14ea0:	mov	r5, #1
   14ea4:	mov	r0, r5
   14ea8:	pop	{r4, r5, r6, r7, fp, pc}
   14eac:	ldr	r0, [r6, #56]	; 0x38
   14eb0:	add	r1, r4, #64	; 0x40
   14eb4:	bl	19aa0 <lchmod@@Base+0x3614>
   14eb8:	mov	r5, #1
   14ebc:	cmp	r0, #0
   14ec0:	movne	r0, #2
   14ec4:	strhne	r0, [r4, #56]	; 0x38
   14ec8:	strne	r4, [r4]
   14ecc:	mov	r0, r5
   14ed0:	pop	{r4, r5, r6, r7, fp, pc}
   14ed4:	push	{r4, r5, fp, lr}
   14ed8:	add	fp, sp, #8
   14edc:	mov	r4, r1
   14ee0:	mov	r5, r0
   14ee4:	ldr	r1, [r0, #32]
   14ee8:	cmp	r1, r4
   14eec:	bne	14ef8 <__assert_fail@plt+0x33a4>
   14ef0:	cmn	r1, #100	; 0x64
   14ef4:	bne	14f38 <__assert_fail@plt+0x33e4>
   14ef8:	cmp	r2, #0
   14efc:	beq	14f14 <__assert_fail@plt+0x33c0>
   14f00:	add	r0, r5, #60	; 0x3c
   14f04:	bl	163f4 <__assert_fail@plt+0x48a0>
   14f08:	cmp	r0, #0
   14f0c:	bge	14f2c <__assert_fail@plt+0x33d8>
   14f10:	b	14f30 <__assert_fail@plt+0x33dc>
   14f14:	cmp	r1, #0
   14f18:	blt	14f30 <__assert_fail@plt+0x33dc>
   14f1c:	ldr	r0, [r5, #48]	; 0x30
   14f20:	ands	r0, r0, #4
   14f24:	bne	14f30 <__assert_fail@plt+0x33dc>
   14f28:	mov	r0, r1
   14f2c:	bl	11b00 <close@plt>
   14f30:	str	r4, [r5, #32]
   14f34:	pop	{r4, r5, fp, pc}
   14f38:	bl	11af4 <abort@plt>
   14f3c:	cmp	r2, #5
   14f40:	strhcc	r2, [r1, #60]	; 0x3c
   14f44:	movcc	r0, #0
   14f48:	bxcc	lr
   14f4c:	push	{fp, lr}
   14f50:	mov	fp, sp
   14f54:	bl	119a4 <__errno_location@plt>
   14f58:	mov	r1, #22
   14f5c:	str	r1, [r0]
   14f60:	mov	r0, #1
   14f64:	pop	{fp, pc}
   14f68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f6c:	add	fp, sp, #28
   14f70:	sub	sp, sp, #4
   14f74:	mov	r5, r0
   14f78:	orr	r0, r1, #4096	; 0x1000
   14f7c:	cmp	r0, #4096	; 0x1000
   14f80:	bne	14fc0 <__assert_fail@plt+0x346c>
   14f84:	mov	r7, r1
   14f88:	ldr	r6, [r5]
   14f8c:	bl	119a4 <__errno_location@plt>
   14f90:	mov	sl, r0
   14f94:	mov	r4, #0
   14f98:	str	r4, [r0]
   14f9c:	ldrb	r0, [r5, #49]	; 0x31
   14fa0:	tst	r0, #32
   14fa4:	bne	14fd0 <__assert_fail@plt+0x347c>
   14fa8:	ldrh	r0, [r6, #56]	; 0x38
   14fac:	cmp	r0, #1
   14fb0:	beq	14fdc <__assert_fail@plt+0x3488>
   14fb4:	cmp	r0, #9
   14fb8:	ldreq	r4, [r6, #8]
   14fbc:	b	14fd0 <__assert_fail@plt+0x347c>
   14fc0:	bl	119a4 <__errno_location@plt>
   14fc4:	mov	r1, #22
   14fc8:	str	r1, [r0]
   14fcc:	mov	r4, #0
   14fd0:	mov	r0, r4
   14fd4:	sub	sp, fp, #28
   14fd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fdc:	ldr	r0, [r5, #4]
   14fe0:	cmp	r0, #0
   14fe4:	blne	13a98 <__assert_fail@plt+0x1f44>
   14fe8:	mov	r9, #1
   14fec:	cmp	r7, #4096	; 0x1000
   14ff0:	ldreq	r0, [r5, #48]	; 0x30
   14ff4:	orreq	r0, r0, #4096	; 0x1000
   14ff8:	streq	r0, [r5, #48]	; 0x30
   14ffc:	moveq	r9, #2
   15000:	ldr	r0, [r6, #48]	; 0x30
   15004:	cmp	r0, #0
   15008:	bne	15084 <__assert_fail@plt+0x3530>
   1500c:	ldr	r0, [r6, #24]
   15010:	ldrb	r0, [r0]
   15014:	cmp	r0, #47	; 0x2f
   15018:	beq	15084 <__assert_fail@plt+0x3530>
   1501c:	ldrb	r0, [r5, #48]	; 0x30
   15020:	tst	r0, #4
   15024:	bne	15084 <__assert_fail@plt+0x3530>
   15028:	movw	r1, #43467	; 0xa9cb
   1502c:	movt	r1, #1
   15030:	mov	r0, r5
   15034:	bl	13a68 <__assert_fail@plt+0x1f14>
   15038:	cmn	r0, #1
   1503c:	ble	1509c <__assert_fail@plt+0x3548>
   15040:	mov	r8, r0
   15044:	mov	r0, r5
   15048:	mov	r1, r9
   1504c:	bl	144cc <__assert_fail@plt+0x2978>
   15050:	str	r0, [r5, #4]
   15054:	ldrb	r0, [r5, #49]	; 0x31
   15058:	tst	r0, #2
   1505c:	bne	150a8 <__assert_fail@plt+0x3554>
   15060:	mov	r0, r8
   15064:	bl	11a7c <fchdir@plt>
   15068:	cmp	r0, #0
   1506c:	beq	150bc <__assert_fail@plt+0x3568>
   15070:	ldr	r5, [sl]
   15074:	mov	r0, r8
   15078:	bl	11b00 <close@plt>
   1507c:	str	r5, [sl]
   15080:	b	14fd0 <__assert_fail@plt+0x347c>
   15084:	mov	r0, r5
   15088:	mov	r1, r9
   1508c:	bl	144cc <__assert_fail@plt+0x2978>
   15090:	mov	r4, r0
   15094:	str	r0, [r5, #4]
   15098:	b	14fd0 <__assert_fail@plt+0x347c>
   1509c:	mov	r4, #0
   150a0:	str	r4, [r5, #4]
   150a4:	b	14fd0 <__assert_fail@plt+0x347c>
   150a8:	mov	r0, r5
   150ac:	mov	r1, r8
   150b0:	mov	r2, #1
   150b4:	bl	14ed4 <__assert_fail@plt+0x3380>
   150b8:	b	150c4 <__assert_fail@plt+0x3570>
   150bc:	mov	r0, r8
   150c0:	bl	11b00 <close@plt>
   150c4:	ldr	r4, [r5, #4]
   150c8:	b	14fd0 <__assert_fail@plt+0x347c>
   150cc:	push	{fp, lr}
   150d0:	mov	fp, sp
   150d4:	mov	r2, r1
   150d8:	ldrd	r0, [r0, #8]
   150dc:	mov	r3, #0
   150e0:	bl	1a1f0 <lchmod@@Base+0x3d64>
   150e4:	mov	r0, r2
   150e8:	pop	{fp, pc}
   150ec:	push	{r4, r5, fp, lr}
   150f0:	add	fp, sp, #8
   150f4:	ldrd	r2, [r1, #8]
   150f8:	ldrd	r4, [r0, #8]
   150fc:	eor	r3, r5, r3
   15100:	eor	r2, r4, r2
   15104:	orrs	r2, r2, r3
   15108:	mov	r2, #0
   1510c:	bne	1512c <__assert_fail@plt+0x35d8>
   15110:	ldrd	r2, [r1]
   15114:	ldrd	r0, [r0]
   15118:	eor	r1, r1, r3
   1511c:	eor	r0, r0, r2
   15120:	orr	r0, r0, r1
   15124:	clz	r0, r0
   15128:	lsr	r2, r0, #5
   1512c:	mov	r0, r2
   15130:	pop	{r4, r5, fp, pc}
   15134:	push	{fp, lr}
   15138:	mov	fp, sp
   1513c:	bl	152c0 <__assert_fail@plt+0x376c>
   15140:	mov	r1, r0
   15144:	mov	r0, #0
   15148:	movw	r2, #26984	; 0x6968
   1514c:	cmp	r1, r2
   15150:	ble	15180 <__assert_fail@plt+0x362c>
   15154:	movw	r2, #26985	; 0x6969
   15158:	cmp	r1, r2
   1515c:	movwne	r2, #40864	; 0x9fa0
   15160:	cmpne	r1, r2
   15164:	beq	15198 <__assert_fail@plt+0x3644>
   15168:	movw	r2, #16719	; 0x414f
   1516c:	movt	r2, #21318	; 0x5346
   15170:	cmp	r1, r2
   15174:	popeq	{fp, pc}
   15178:	mov	r0, #1
   1517c:	pop	{fp, pc}
   15180:	movw	r2, #19778	; 0x4d42
   15184:	movt	r2, #65363	; 0xff53
   15188:	cmp	r1, r2
   1518c:	beq	15198 <__assert_fail@plt+0x3644>
   15190:	cmp	r1, #0
   15194:	movne	r0, #1
   15198:	pop	{fp, pc}
   1519c:	sub	r2, r1, #1
   151a0:	mov	r1, #0
   151a4:	cmp	r2, #11
   151a8:	movwls	r1, #43472	; 0xa9d0
   151ac:	movtls	r1, #1
   151b0:	ldrls	r1, [r1, r2, lsl #2]
   151b4:	str	r1, [r0, #16]
   151b8:	bx	lr
   151bc:	push	{fp, lr}
   151c0:	mov	fp, sp
   151c4:	bl	152c0 <__assert_fail@plt+0x376c>
   151c8:	mov	r1, r0
   151cc:	mov	r0, #0
   151d0:	movw	r2, #19778	; 0x4d42
   151d4:	movt	r2, #65363	; 0xff53
   151d8:	cmp	r1, r2
   151dc:	movwne	r2, #26985	; 0x6969
   151e0:	cmpne	r1, r2
   151e4:	bne	151ec <__assert_fail@plt+0x3698>
   151e8:	pop	{fp, pc}
   151ec:	movw	r2, #6548	; 0x1994
   151f0:	movt	r2, #258	; 0x102
   151f4:	cmp	r1, r2
   151f8:	movne	r0, #1
   151fc:	pop	{fp, pc}
   15200:	ldr	r2, [r0, #4]
   15204:	ldr	ip, [r0, #24]
   15208:	cmp	r2, #0
   1520c:	beq	1523c <__assert_fail@plt+0x36e8>
   15210:	ldr	r3, [r2, #24]
   15214:	add	r0, r2, #168	; 0xa8
   15218:	cmp	r3, r0
   1521c:	ldrne	r0, [r2, #28]
   15220:	subne	r0, r3, r0
   15224:	addne	r0, ip, r0
   15228:	strne	r0, [r2, #24]
   1522c:	str	ip, [r2, #28]
   15230:	ldr	r2, [r2, #8]
   15234:	cmp	r2, #0
   15238:	bne	15210 <__assert_fail@plt+0x36bc>
   1523c:	ldr	r2, [r1, #48]	; 0x30
   15240:	cmp	r2, #0
   15244:	bxlt	lr
   15248:	ldr	r2, [r1, #24]
   1524c:	add	r0, r1, #168	; 0xa8
   15250:	cmp	r2, r0
   15254:	ldrne	r0, [r1, #28]
   15258:	subne	r0, r2, r0
   1525c:	addne	r0, ip, r0
   15260:	strne	r0, [r1, #24]
   15264:	str	ip, [r1, #28]
   15268:	ldr	r2, [r1, #8]
   1526c:	cmp	r2, #0
   15270:	ldreq	r2, [r1, #4]
   15274:	ldr	r0, [r2, #48]	; 0x30
   15278:	cmn	r0, #1
   1527c:	mov	r1, r2
   15280:	bgt	15248 <__assert_fail@plt+0x36f4>
   15284:	bx	lr
   15288:	push	{r4, r5, fp, lr}
   1528c:	add	fp, sp, #8
   15290:	ldr	r0, [r0]
   15294:	ldrd	r2, [r0, #160]	; 0xa0
   15298:	ldr	r0, [r1]
   1529c:	ldrd	r4, [r0, #160]	; 0xa0
   152a0:	mov	r0, #0
   152a4:	subs	r1, r4, r2
   152a8:	sbcs	r1, r5, r3
   152ac:	movwcc	r0, #1
   152b0:	subs	r1, r2, r4
   152b4:	sbcs	r1, r3, r5
   152b8:	subcc	r0, r0, #1
   152bc:	pop	{r4, r5, fp, pc}
   152c0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   152c4:	add	fp, sp, #24
   152c8:	sub	sp, sp, #96	; 0x60
   152cc:	mov	r4, r0
   152d0:	ldr	r7, [r0, #44]	; 0x2c
   152d4:	ldrb	r0, [r7, #49]	; 0x31
   152d8:	mov	r5, #0
   152dc:	tst	r0, #2
   152e0:	beq	153dc <__assert_fail@plt+0x3888>
   152e4:	mov	r9, r1
   152e8:	ldr	r6, [r7, #52]	; 0x34
   152ec:	cmp	r6, #0
   152f0:	bne	15330 <__assert_fail@plt+0x37dc>
   152f4:	movw	r0, #13060	; 0x3304
   152f8:	movt	r0, #1
   152fc:	str	r0, [sp]
   15300:	mov	r8, #0
   15304:	movw	r2, #21480	; 0x53e8
   15308:	movt	r2, #1
   1530c:	movw	r3, #21512	; 0x5408
   15310:	movt	r3, #1
   15314:	mov	r0, #13
   15318:	mov	r1, #0
   1531c:	bl	15878 <__assert_fail@plt+0x3d24>
   15320:	mov	r6, r0
   15324:	str	r0, [r7, #52]	; 0x34
   15328:	cmp	r0, #0
   1532c:	beq	15368 <__assert_fail@plt+0x3814>
   15330:	ldrd	r0, [r4, #64]	; 0x40
   15334:	str	r1, [sp, #12]
   15338:	str	r0, [sp, #8]
   1533c:	add	r1, sp, #8
   15340:	mov	r0, r6
   15344:	bl	155f0 <__assert_fail@plt+0x3a9c>
   15348:	cmp	r0, #0
   1534c:	beq	15358 <__assert_fail@plt+0x3804>
   15350:	ldr	r5, [r0, #8]
   15354:	b	153dc <__assert_fail@plt+0x3888>
   15358:	mov	r8, #1
   1535c:	cmp	r9, #0
   15360:	bge	15374 <__assert_fail@plt+0x3820>
   15364:	b	153dc <__assert_fail@plt+0x3888>
   15368:	mov	r6, #0
   1536c:	cmp	r9, #0
   15370:	blt	153dc <__assert_fail@plt+0x3888>
   15374:	add	r1, sp, #8
   15378:	mov	r0, r9
   1537c:	bl	11734 <fstatfs64@plt>
   15380:	cmp	r0, #0
   15384:	bne	153dc <__assert_fail@plt+0x3888>
   15388:	cmp	r8, #0
   1538c:	beq	153d8 <__assert_fail@plt+0x3884>
   15390:	mov	r0, #16
   15394:	bl	1947c <lchmod@@Base+0x2ff0>
   15398:	cmp	r0, #0
   1539c:	beq	153d8 <__assert_fail@plt+0x3884>
   153a0:	mov	r5, r0
   153a4:	ldrd	r0, [r4, #64]	; 0x40
   153a8:	ldr	r2, [sp, #8]
   153ac:	stm	r5, {r0, r1, r2}
   153b0:	mov	r0, r6
   153b4:	mov	r1, r5
   153b8:	bl	16108 <__assert_fail@plt+0x45b4>
   153bc:	cmp	r0, #0
   153c0:	beq	153d0 <__assert_fail@plt+0x387c>
   153c4:	cmp	r0, r5
   153c8:	beq	153d8 <__assert_fail@plt+0x3884>
   153cc:	bl	11af4 <abort@plt>
   153d0:	mov	r0, r5
   153d4:	bl	13304 <__assert_fail@plt+0x17b0>
   153d8:	ldr	r5, [sp, #8]
   153dc:	mov	r0, r5
   153e0:	sub	sp, fp, #24
   153e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   153e8:	push	{fp, lr}
   153ec:	mov	fp, sp
   153f0:	mov	r2, r1
   153f4:	ldrd	r0, [r0]
   153f8:	mov	r3, #0
   153fc:	bl	1a1f0 <lchmod@@Base+0x3d64>
   15400:	mov	r0, r2
   15404:	pop	{fp, pc}
   15408:	ldrd	r2, [r1]
   1540c:	ldrd	r0, [r0]
   15410:	eor	r1, r1, r3
   15414:	eor	r0, r0, r2
   15418:	orr	r0, r0, r1
   1541c:	clz	r0, r0
   15420:	lsr	r0, r0, #5
   15424:	bx	lr
   15428:	ldr	r0, [r0, #8]
   1542c:	bx	lr
   15430:	ldr	r0, [r0, #12]
   15434:	bx	lr
   15438:	ldr	r0, [r0, #16]
   1543c:	bx	lr
   15440:	mov	r2, r0
   15444:	ldm	r0, {r1, r3}
   15448:	mov	r0, #0
   1544c:	cmp	r1, r3
   15450:	bxcs	lr
   15454:	ldr	ip, [r2, #4]
   15458:	mov	r0, #0
   1545c:	ldr	r2, [r1]
   15460:	cmp	r2, #0
   15464:	beq	15488 <__assert_fail@plt+0x3934>
   15468:	mov	r3, #0
   1546c:	mov	r2, r1
   15470:	add	r3, r3, #1
   15474:	ldr	r2, [r2, #4]
   15478:	cmp	r2, #0
   1547c:	bne	15470 <__assert_fail@plt+0x391c>
   15480:	cmp	r3, r0
   15484:	movhi	r0, r3
   15488:	add	r1, r1, #8
   1548c:	cmp	r1, ip
   15490:	bcc	1545c <__assert_fail@plt+0x3908>
   15494:	bx	lr
   15498:	push	{fp, lr}
   1549c:	mov	fp, sp
   154a0:	ldr	r3, [r0]
   154a4:	ldr	r1, [r0, #4]
   154a8:	mov	lr, #0
   154ac:	cmp	r3, r1
   154b0:	mov	r1, #0
   154b4:	bcs	154f4 <__assert_fail@plt+0x39a0>
   154b8:	ldr	ip, [r0, #4]
   154bc:	mov	r1, #0
   154c0:	mov	lr, #0
   154c4:	ldr	r2, [r3]
   154c8:	cmp	r2, #0
   154cc:	beq	154e8 <__assert_fail@plt+0x3994>
   154d0:	mov	r2, r3
   154d4:	add	r1, r1, #1
   154d8:	ldr	r2, [r2, #4]
   154dc:	cmp	r2, #0
   154e0:	bne	154d4 <__assert_fail@plt+0x3980>
   154e4:	add	lr, lr, #1
   154e8:	add	r3, r3, #8
   154ec:	cmp	r3, ip
   154f0:	bcc	154c4 <__assert_fail@plt+0x3970>
   154f4:	ldr	r2, [r0, #12]
   154f8:	cmp	lr, r2
   154fc:	bne	15514 <__assert_fail@plt+0x39c0>
   15500:	ldr	r2, [r0, #16]
   15504:	mov	r0, #1
   15508:	cmp	r1, r2
   1550c:	movne	r0, #0
   15510:	pop	{fp, pc}
   15514:	mov	r0, #0
   15518:	pop	{fp, pc}
   1551c:	nop	{0}
   15520:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15524:	add	fp, sp, #24
   15528:	sub	sp, sp, #8
   1552c:	mov	r4, r1
   15530:	mov	r5, r0
   15534:	bl	15438 <__assert_fail@plt+0x38e4>
   15538:	mov	r8, r0
   1553c:	mov	r0, r5
   15540:	bl	15428 <__assert_fail@plt+0x38d4>
   15544:	mov	r7, r0
   15548:	mov	r0, r5
   1554c:	bl	15430 <__assert_fail@plt+0x38dc>
   15550:	mov	r6, r0
   15554:	mov	r0, r5
   15558:	bl	15440 <__assert_fail@plt+0x38ec>
   1555c:	mov	r5, r0
   15560:	movw	r2, #43520	; 0xaa00
   15564:	movt	r2, #1
   15568:	mov	r0, r4
   1556c:	mov	r1, #1
   15570:	mov	r3, r8
   15574:	bl	119ec <__fprintf_chk@plt>
   15578:	movw	r2, #43544	; 0xaa18
   1557c:	movt	r2, #1
   15580:	mov	r0, r4
   15584:	mov	r1, #1
   15588:	mov	r3, r7
   1558c:	bl	119ec <__fprintf_chk@plt>
   15590:	vldr	d16, [pc, #80]	; 155e8 <__assert_fail@plt+0x3a94>
   15594:	vmov	s0, r6
   15598:	vmov	s2, r7
   1559c:	vcvt.f64.u32	d17, s0
   155a0:	vcvt.f64.u32	d18, s2
   155a4:	vmul.f64	d16, d17, d16
   155a8:	vdiv.f64	d16, d16, d18
   155ac:	vstr	d16, [sp]
   155b0:	movw	r2, #43568	; 0xaa30
   155b4:	movt	r2, #1
   155b8:	mov	r0, r4
   155bc:	mov	r1, #1
   155c0:	mov	r3, r6
   155c4:	bl	119ec <__fprintf_chk@plt>
   155c8:	movw	r2, #43601	; 0xaa51
   155cc:	movt	r2, #1
   155d0:	mov	r0, r4
   155d4:	mov	r1, #1
   155d8:	mov	r3, r5
   155dc:	sub	sp, fp, #24
   155e0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   155e4:	b	119ec <__fprintf_chk@plt>
   155e8:	andeq	r0, r0, r0
   155ec:	subsmi	r0, r9, r0
   155f0:	push	{r4, r5, r6, r7, fp, lr}
   155f4:	add	fp, sp, #16
   155f8:	mov	r5, r1
   155fc:	mov	r6, r0
   15600:	bl	15654 <__assert_fail@plt+0x3b00>
   15604:	mov	r7, r0
   15608:	ldr	r0, [r0]
   1560c:	mov	r4, #0
   15610:	cmp	r0, #0
   15614:	bne	15620 <__assert_fail@plt+0x3acc>
   15618:	b	1564c <__assert_fail@plt+0x3af8>
   1561c:	ldr	r7, [r7, #4]
   15620:	cmp	r7, #0
   15624:	beq	1564c <__assert_fail@plt+0x3af8>
   15628:	ldr	r1, [r7]
   1562c:	cmp	r1, r5
   15630:	beq	15648 <__assert_fail@plt+0x3af4>
   15634:	ldr	r2, [r6, #28]
   15638:	mov	r0, r5
   1563c:	blx	r2
   15640:	cmp	r0, #0
   15644:	beq	1561c <__assert_fail@plt+0x3ac8>
   15648:	ldr	r4, [r7]
   1564c:	mov	r0, r4
   15650:	pop	{r4, r5, r6, r7, fp, pc}
   15654:	push	{r4, sl, fp, lr}
   15658:	add	fp, sp, #8
   1565c:	mov	r2, r1
   15660:	mov	r4, r0
   15664:	ldr	r1, [r0, #8]
   15668:	ldr	r3, [r0, #24]
   1566c:	mov	r0, r2
   15670:	blx	r3
   15674:	ldr	r1, [r4, #8]
   15678:	cmp	r0, r1
   1567c:	ldrcc	r1, [r4]
   15680:	addcc	r0, r1, r0, lsl #3
   15684:	popcc	{r4, sl, fp, pc}
   15688:	bl	11af4 <abort@plt>
   1568c:	ldr	r1, [r0, #16]
   15690:	cmp	r1, #0
   15694:	moveq	r1, #0
   15698:	moveq	r0, r1
   1569c:	bxeq	lr
   156a0:	ldr	r2, [r0]
   156a4:	b	156b8 <__assert_fail@plt+0x3b64>
   156a8:	ldr	r1, [r2], #8
   156ac:	cmp	r1, #0
   156b0:	movne	r0, r1
   156b4:	bxne	lr
   156b8:	ldr	r1, [r0, #4]
   156bc:	cmp	r2, r1
   156c0:	bcc	156a8 <__assert_fail@plt+0x3b54>
   156c4:	push	{fp, lr}
   156c8:	mov	fp, sp
   156cc:	bl	11af4 <abort@plt>
   156d0:	push	{r4, r5, fp, lr}
   156d4:	add	fp, sp, #8
   156d8:	mov	r5, r1
   156dc:	mov	r4, r0
   156e0:	bl	15654 <__assert_fail@plt+0x3b00>
   156e4:	mov	r1, r0
   156e8:	ldr	r2, [r1]
   156ec:	cmp	r2, r5
   156f0:	bne	15704 <__assert_fail@plt+0x3bb0>
   156f4:	ldr	r2, [r1, #4]
   156f8:	cmp	r2, #0
   156fc:	ldrne	r0, [r2]
   15700:	popne	{r4, r5, fp, pc}
   15704:	ldr	r1, [r1, #4]
   15708:	cmp	r1, #0
   1570c:	bne	156e8 <__assert_fail@plt+0x3b94>
   15710:	add	r1, r0, #8
   15714:	ldr	r2, [r4, #4]
   15718:	cmp	r1, r2
   1571c:	movcs	r0, #0
   15720:	popcs	{r4, r5, fp, pc}
   15724:	ldr	r0, [r1], #8
   15728:	cmp	r0, #0
   1572c:	popne	{r4, r5, fp, pc}
   15730:	b	15718 <__assert_fail@plt+0x3bc4>
   15734:	push	{r4, sl, fp, lr}
   15738:	add	fp, sp, #8
   1573c:	mov	ip, r0
   15740:	ldr	lr, [r0]
   15744:	ldr	r3, [r0, #4]
   15748:	mov	r0, #0
   1574c:	cmp	lr, r3
   15750:	bcs	1579c <__assert_fail@plt+0x3c48>
   15754:	mov	r0, #0
   15758:	ldr	r3, [lr]
   1575c:	cmp	r3, #0
   15760:	cmpne	lr, #0
   15764:	beq	1578c <__assert_fail@plt+0x3c38>
   15768:	mov	r3, lr
   1576c:	cmp	r0, r2
   15770:	popcs	{r4, sl, fp, pc}
   15774:	ldr	r4, [r3]
   15778:	str	r4, [r1, r0, lsl #2]
   1577c:	add	r0, r0, #1
   15780:	ldr	r3, [r3, #4]
   15784:	cmp	r3, #0
   15788:	bne	1576c <__assert_fail@plt+0x3c18>
   1578c:	ldr	r3, [ip, #4]
   15790:	add	lr, lr, #8
   15794:	cmp	lr, r3
   15798:	bcc	15758 <__assert_fail@plt+0x3c04>
   1579c:	pop	{r4, sl, fp, pc}
   157a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   157a4:	add	fp, sp, #24
   157a8:	mov	r8, r0
   157ac:	ldr	r9, [r0]
   157b0:	ldr	r0, [r0, #4]
   157b4:	mov	r6, #0
   157b8:	cmp	r9, r0
   157bc:	bcs	1581c <__assert_fail@plt+0x3cc8>
   157c0:	mov	r4, r2
   157c4:	mov	r5, r1
   157c8:	mov	r6, #0
   157cc:	b	157fc <__assert_fail@plt+0x3ca8>
   157d0:	mov	r7, r9
   157d4:	ldr	r0, [r7]
   157d8:	mov	r1, r4
   157dc:	blx	r5
   157e0:	cmp	r0, #0
   157e4:	beq	1581c <__assert_fail@plt+0x3cc8>
   157e8:	add	r6, r6, #1
   157ec:	ldr	r7, [r7, #4]
   157f0:	cmp	r7, #0
   157f4:	bne	157d4 <__assert_fail@plt+0x3c80>
   157f8:	b	1580c <__assert_fail@plt+0x3cb8>
   157fc:	ldr	r0, [r9]
   15800:	cmp	r0, #0
   15804:	cmpne	r9, #0
   15808:	bne	157d0 <__assert_fail@plt+0x3c7c>
   1580c:	ldr	r0, [r8, #4]
   15810:	add	r9, r9, #8
   15814:	cmp	r9, r0
   15818:	bcc	157fc <__assert_fail@plt+0x3ca8>
   1581c:	mov	r0, r6
   15820:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15824:	ldrb	r2, [r0]
   15828:	cmp	r2, #0
   1582c:	moveq	r0, #0
   15830:	bxeq	lr
   15834:	add	r3, r0, #1
   15838:	mov	r0, #0
   1583c:	rsb	r0, r0, r0, lsl #5
   15840:	uxtab	r0, r0, r2
   15844:	udiv	r2, r0, r1
   15848:	mls	r0, r2, r1, r0
   1584c:	ldrb	r2, [r3], #1
   15850:	cmp	r2, #0
   15854:	bne	1583c <__assert_fail@plt+0x3ce8>
   15858:	bx	lr
   1585c:	movw	r1, #43632	; 0xaa70
   15860:	movt	r1, #1
   15864:	vld1.32	{d16-d17}, [r1]!
   15868:	vst1.32	{d16-d17}, [r0]!
   1586c:	ldr	r1, [r1]
   15870:	str	r1, [r0]
   15874:	bx	lr
   15878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1587c:	add	fp, sp, #28
   15880:	sub	sp, sp, #4
   15884:	mov	r7, r1
   15888:	mov	r8, r0
   1588c:	movw	sl, #22904	; 0x5978
   15890:	movt	sl, #1
   15894:	cmp	r3, #0
   15898:	movne	sl, r3
   1589c:	movw	r5, #22872	; 0x5958
   158a0:	movt	r5, #1
   158a4:	cmp	r2, #0
   158a8:	movne	r5, r2
   158ac:	mov	r0, #40	; 0x28
   158b0:	bl	1947c <lchmod@@Base+0x2ff0>
   158b4:	mov	r9, #0
   158b8:	cmp	r0, #0
   158bc:	beq	1594c <__assert_fail@plt+0x3df8>
   158c0:	mov	r4, r0
   158c4:	movw	r6, #43632	; 0xaa70
   158c8:	movt	r6, #1
   158cc:	cmp	r7, #0
   158d0:	movne	r6, r7
   158d4:	str	r6, [r0, #20]
   158d8:	bl	15988 <__assert_fail@plt+0x3e34>
   158dc:	cmp	r0, #0
   158e0:	beq	15944 <__assert_fail@plt+0x3df0>
   158e4:	mov	r0, r8
   158e8:	mov	r1, r6
   158ec:	bl	15a34 <__assert_fail@plt+0x3ee0>
   158f0:	str	r0, [r4, #8]
   158f4:	cmp	r0, #0
   158f8:	beq	15944 <__assert_fail@plt+0x3df0>
   158fc:	mov	r1, #8
   15900:	bl	19428 <lchmod@@Base+0x2f9c>
   15904:	str	r0, [r4]
   15908:	cmp	r0, #0
   1590c:	beq	15944 <__assert_fail@plt+0x3df0>
   15910:	ldr	r1, [fp, #8]
   15914:	mov	r2, #0
   15918:	str	r2, [r4, #12]
   1591c:	str	r2, [r4, #16]
   15920:	str	r5, [r4, #24]
   15924:	str	sl, [r4, #28]
   15928:	str	r1, [r4, #32]
   1592c:	str	r2, [r4, #36]	; 0x24
   15930:	ldr	r1, [r4, #8]
   15934:	add	r0, r0, r1, lsl #3
   15938:	str	r0, [r4, #4]
   1593c:	mov	r9, r4
   15940:	b	1594c <__assert_fail@plt+0x3df8>
   15944:	mov	r0, r4
   15948:	bl	13304 <__assert_fail@plt+0x17b0>
   1594c:	mov	r0, r9
   15950:	sub	sp, fp, #28
   15954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15958:	push	{r4, sl, fp, lr}
   1595c:	add	fp, sp, #8
   15960:	mov	r4, r1
   15964:	mov	r1, #3
   15968:	bl	19660 <lchmod@@Base+0x31d4>
   1596c:	udiv	r1, r0, r4
   15970:	mls	r0, r1, r4, r0
   15974:	pop	{r4, sl, fp, pc}
   15978:	sub	r0, r0, r1
   1597c:	clz	r0, r0
   15980:	lsr	r0, r0, #5
   15984:	bx	lr
   15988:	mov	r1, r0
   1598c:	ldr	r3, [r0, #20]
   15990:	mov	r0, #1
   15994:	movw	r2, #43632	; 0xaa70
   15998:	movt	r2, #1
   1599c:	cmp	r3, r2
   159a0:	beq	15a24 <__assert_fail@plt+0x3ed0>
   159a4:	vldr	s2, [pc, #124]	; 15a28 <__assert_fail@plt+0x3ed4>
   159a8:	vldr	s0, [r3, #8]
   159ac:	vcmpe.f32	s0, s2
   159b0:	vmrs	APSR_nzcv, fpscr
   159b4:	ble	15a1c <__assert_fail@plt+0x3ec8>
   159b8:	vldr	s4, [pc, #108]	; 15a2c <__assert_fail@plt+0x3ed8>
   159bc:	vcmpe.f32	s0, s4
   159c0:	vmrs	APSR_nzcv, fpscr
   159c4:	bpl	15a1c <__assert_fail@plt+0x3ec8>
   159c8:	vldr	s4, [pc, #96]	; 15a30 <__assert_fail@plt+0x3edc>
   159cc:	vldr	s6, [r3, #12]
   159d0:	vcmpe.f32	s6, s4
   159d4:	vmrs	APSR_nzcv, fpscr
   159d8:	ble	15a1c <__assert_fail@plt+0x3ec8>
   159dc:	vldr	s4, [r3]
   159e0:	vcmpe.f32	s4, #0.0
   159e4:	vmrs	APSR_nzcv, fpscr
   159e8:	blt	15a1c <__assert_fail@plt+0x3ec8>
   159ec:	vadd.f32	s2, s4, s2
   159f0:	vcmpe.f32	s2, s0
   159f4:	vmrs	APSR_nzcv, fpscr
   159f8:	bpl	15a1c <__assert_fail@plt+0x3ec8>
   159fc:	vldr	s0, [r3, #4]
   15a00:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15a04:	vcmpe.f32	s0, s4
   15a08:	vmrs	APSR_nzcv, fpscr
   15a0c:	bhi	15a1c <__assert_fail@plt+0x3ec8>
   15a10:	vcmpe.f32	s2, s0
   15a14:	vmrs	APSR_nzcv, fpscr
   15a18:	bxmi	lr
   15a1c:	str	r2, [r1, #20]
   15a20:	mov	r0, #0
   15a24:	bx	lr
   15a28:	stclcc	12, cr12, [ip, #820]	; 0x334
   15a2c:	svccc	0x00666666
   15a30:	svccc	0x008ccccd
   15a34:	ldrb	r2, [r1, #16]
   15a38:	cmp	r2, #0
   15a3c:	bne	15a6c <__assert_fail@plt+0x3f18>
   15a40:	vldr	s0, [r1, #8]
   15a44:	vmov	s2, r0
   15a48:	vcvt.f32.u32	s2, s2
   15a4c:	vdiv.f32	s2, s2, s0
   15a50:	vcvt.u32.f32	s0, s2
   15a54:	vldr	s4, [pc, #44]	; 15a88 <__assert_fail@plt+0x3f34>
   15a58:	mov	r0, #0
   15a5c:	vcmpe.f32	s2, s4
   15a60:	vmrs	APSR_nzcv, fpscr
   15a64:	bxge	lr
   15a68:	vmov	r0, s0
   15a6c:	push	{fp, lr}
   15a70:	mov	fp, sp
   15a74:	bl	16258 <__assert_fail@plt+0x4704>
   15a78:	cmn	r0, #-536870911	; 0xe0000001
   15a7c:	movwhi	r0, #0
   15a80:	pop	{fp, lr}
   15a84:	bx	lr
   15a88:	svcmi	0x00800000
   15a8c:	push	{r4, r5, r6, r7, fp, lr}
   15a90:	add	fp, sp, #16
   15a94:	mov	r4, r0
   15a98:	ldr	r5, [r0]
   15a9c:	ldr	r0, [r0, #4]
   15aa0:	cmp	r5, r0
   15aa4:	bcs	15b3c <__assert_fail@plt+0x3fe8>
   15aa8:	mov	r6, #0
   15aac:	ldr	r0, [r5]
   15ab0:	cmp	r0, #0
   15ab4:	beq	15b2c <__assert_fail@plt+0x3fd8>
   15ab8:	ldr	r7, [r5, #4]
   15abc:	ldr	r1, [r4, #32]
   15ac0:	cmp	r1, #0
   15ac4:	mov	r0, r1
   15ac8:	movwne	r0, #1
   15acc:	cmp	r7, #0
   15ad0:	beq	15b14 <__assert_fail@plt+0x3fc0>
   15ad4:	tst	r0, #1
   15ad8:	beq	15ae4 <__assert_fail@plt+0x3f90>
   15adc:	ldr	r0, [r7]
   15ae0:	blx	r1
   15ae4:	str	r6, [r7]
   15ae8:	ldr	r2, [r7, #4]
   15aec:	ldr	r0, [r4, #36]	; 0x24
   15af0:	str	r0, [r7, #4]
   15af4:	str	r7, [r4, #36]	; 0x24
   15af8:	ldr	r1, [r4, #32]
   15afc:	cmp	r1, #0
   15b00:	mov	r0, r1
   15b04:	movwne	r0, #1
   15b08:	cmp	r2, #0
   15b0c:	mov	r7, r2
   15b10:	bne	15ad4 <__assert_fail@plt+0x3f80>
   15b14:	cmp	r0, #0
   15b18:	beq	15b24 <__assert_fail@plt+0x3fd0>
   15b1c:	ldr	r0, [r5]
   15b20:	blx	r1
   15b24:	str	r6, [r5]
   15b28:	str	r6, [r5, #4]
   15b2c:	ldr	r0, [r4, #4]
   15b30:	add	r5, r5, #8
   15b34:	cmp	r5, r0
   15b38:	bcc	15aac <__assert_fail@plt+0x3f58>
   15b3c:	mov	r0, #0
   15b40:	str	r0, [r4, #12]
   15b44:	str	r0, [r4, #16]
   15b48:	pop	{r4, r5, r6, r7, fp, pc}
   15b4c:	push	{r4, r5, r6, sl, fp, lr}
   15b50:	add	fp, sp, #16
   15b54:	mov	r4, r0
   15b58:	ldr	r0, [r0, #32]
   15b5c:	cmp	r0, #0
   15b60:	ldrne	r0, [r4, #16]
   15b64:	cmpne	r0, #0
   15b68:	beq	15bc0 <__assert_fail@plt+0x406c>
   15b6c:	ldr	r5, [r4]
   15b70:	ldr	r0, [r4, #4]
   15b74:	cmp	r5, r0
   15b78:	bcc	15b90 <__assert_fail@plt+0x403c>
   15b7c:	b	15bc0 <__assert_fail@plt+0x406c>
   15b80:	ldr	r0, [r4, #4]
   15b84:	add	r5, r5, #8
   15b88:	cmp	r5, r0
   15b8c:	bcs	15bc0 <__assert_fail@plt+0x406c>
   15b90:	ldr	r0, [r5]
   15b94:	cmp	r0, #0
   15b98:	cmpne	r5, #0
   15b9c:	beq	15b80 <__assert_fail@plt+0x402c>
   15ba0:	mov	r6, r5
   15ba4:	ldr	r0, [r6]
   15ba8:	ldr	r1, [r4, #32]
   15bac:	blx	r1
   15bb0:	ldr	r6, [r6, #4]
   15bb4:	cmp	r6, #0
   15bb8:	bne	15ba4 <__assert_fail@plt+0x4050>
   15bbc:	b	15b80 <__assert_fail@plt+0x402c>
   15bc0:	ldr	r5, [r4]
   15bc4:	ldr	r0, [r4, #4]
   15bc8:	cmp	r5, r0
   15bcc:	bcc	15be4 <__assert_fail@plt+0x4090>
   15bd0:	b	15c08 <__assert_fail@plt+0x40b4>
   15bd4:	ldr	r0, [r4, #4]
   15bd8:	add	r5, r5, #8
   15bdc:	cmp	r5, r0
   15be0:	bcs	15c08 <__assert_fail@plt+0x40b4>
   15be4:	ldr	r0, [r5, #4]
   15be8:	cmp	r0, #0
   15bec:	beq	15bd4 <__assert_fail@plt+0x4080>
   15bf0:	ldr	r6, [r0, #4]
   15bf4:	bl	13304 <__assert_fail@plt+0x17b0>
   15bf8:	cmp	r6, #0
   15bfc:	mov	r0, r6
   15c00:	bne	15bf0 <__assert_fail@plt+0x409c>
   15c04:	b	15bd4 <__assert_fail@plt+0x4080>
   15c08:	ldr	r0, [r4, #36]	; 0x24
   15c0c:	cmp	r0, #0
   15c10:	beq	15c28 <__assert_fail@plt+0x40d4>
   15c14:	ldr	r5, [r0, #4]
   15c18:	bl	13304 <__assert_fail@plt+0x17b0>
   15c1c:	cmp	r5, #0
   15c20:	mov	r0, r5
   15c24:	bne	15c14 <__assert_fail@plt+0x40c0>
   15c28:	ldr	r0, [r4]
   15c2c:	bl	13304 <__assert_fail@plt+0x17b0>
   15c30:	mov	r0, r4
   15c34:	pop	{r4, r5, r6, sl, fp, lr}
   15c38:	b	13304 <__assert_fail@plt+0x17b0>
   15c3c:	push	{r4, r5, r6, sl, fp, lr}
   15c40:	add	fp, sp, #16
   15c44:	sub	sp, sp, #40	; 0x28
   15c48:	mov	r2, r1
   15c4c:	mov	r4, r0
   15c50:	ldr	r1, [r0, #20]
   15c54:	mov	r0, r2
   15c58:	bl	15a34 <__assert_fail@plt+0x3ee0>
   15c5c:	mov	r5, #0
   15c60:	cmp	r0, #0
   15c64:	beq	15d40 <__assert_fail@plt+0x41ec>
   15c68:	mov	r6, r0
   15c6c:	ldr	r0, [r4, #8]
   15c70:	cmp	r6, r0
   15c74:	bne	15c80 <__assert_fail@plt+0x412c>
   15c78:	mov	r5, #1
   15c7c:	b	15d40 <__assert_fail@plt+0x41ec>
   15c80:	mov	r0, r6
   15c84:	mov	r1, #8
   15c88:	bl	19428 <lchmod@@Base+0x2f9c>
   15c8c:	str	r0, [sp]
   15c90:	cmp	r0, #0
   15c94:	beq	15d40 <__assert_fail@plt+0x41ec>
   15c98:	str	r6, [sp, #8]
   15c9c:	mov	r0, #0
   15ca0:	str	r0, [sp, #12]
   15ca4:	str	r0, [sp, #16]
   15ca8:	ldr	r0, [sp]
   15cac:	add	r0, r0, r6, lsl #3
   15cb0:	str	r0, [sp, #4]
   15cb4:	add	r6, r4, #20
   15cb8:	ldm	r6, {r0, r1, r2, r3, r6}
   15cbc:	add	ip, sp, #20
   15cc0:	stm	ip, {r0, r1, r2, r3, r6}
   15cc4:	mov	r0, sp
   15cc8:	mov	r1, r4
   15ccc:	mov	r2, #0
   15cd0:	bl	15d50 <__assert_fail@plt+0x41fc>
   15cd4:	cmp	r0, #0
   15cd8:	beq	15cfc <__assert_fail@plt+0x41a8>
   15cdc:	ldr	r0, [r4]
   15ce0:	bl	13304 <__assert_fail@plt+0x17b0>
   15ce4:	ldm	sp, {r0, r1, r2, r3}
   15ce8:	stm	r4, {r0, r1, r2, r3}
   15cec:	ldr	r0, [sp, #36]	; 0x24
   15cf0:	str	r0, [r4, #36]	; 0x24
   15cf4:	mov	r5, #1
   15cf8:	b	15d40 <__assert_fail@plt+0x41ec>
   15cfc:	ldr	r0, [sp, #36]	; 0x24
   15d00:	str	r0, [r4, #36]	; 0x24
   15d04:	mov	r1, sp
   15d08:	mov	r0, r4
   15d0c:	mov	r2, #1
   15d10:	bl	15d50 <__assert_fail@plt+0x41fc>
   15d14:	cmp	r0, #0
   15d18:	beq	15d4c <__assert_fail@plt+0x41f8>
   15d1c:	mov	r1, sp
   15d20:	mov	r5, #0
   15d24:	mov	r0, r4
   15d28:	mov	r2, #0
   15d2c:	bl	15d50 <__assert_fail@plt+0x41fc>
   15d30:	cmp	r0, #0
   15d34:	beq	15d4c <__assert_fail@plt+0x41f8>
   15d38:	ldr	r0, [sp]
   15d3c:	bl	13304 <__assert_fail@plt+0x17b0>
   15d40:	mov	r0, r5
   15d44:	sub	sp, fp, #16
   15d48:	pop	{r4, r5, r6, sl, fp, pc}
   15d4c:	bl	11af4 <abort@plt>
   15d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d54:	add	fp, sp, #28
   15d58:	sub	sp, sp, #4
   15d5c:	mov	r7, r0
   15d60:	ldr	r6, [r1]
   15d64:	ldr	r0, [r1, #4]
   15d68:	cmp	r6, r0
   15d6c:	bcs	15e70 <__assert_fail@plt+0x431c>
   15d70:	mov	r9, r2
   15d74:	mov	sl, r1
   15d78:	ldr	r0, [r6]
   15d7c:	cmp	r0, #0
   15d80:	beq	15e60 <__assert_fail@plt+0x430c>
   15d84:	ldr	r4, [r6, #4]
   15d88:	cmp	r4, #0
   15d8c:	beq	15de8 <__assert_fail@plt+0x4294>
   15d90:	ldr	r5, [r4]
   15d94:	mov	r0, r7
   15d98:	mov	r1, r5
   15d9c:	bl	15654 <__assert_fail@plt+0x3b00>
   15da0:	ldr	r1, [r0]
   15da4:	ldr	r8, [r4, #4]
   15da8:	cmp	r1, #0
   15dac:	beq	15dc0 <__assert_fail@plt+0x426c>
   15db0:	ldr	r1, [r0, #4]
   15db4:	str	r1, [r4, #4]
   15db8:	str	r4, [r0, #4]
   15dbc:	b	15ddc <__assert_fail@plt+0x4288>
   15dc0:	str	r5, [r0]
   15dc4:	ldr	r0, [r7, #12]
   15dc8:	add	r0, r0, #1
   15dcc:	str	r0, [r7, #12]
   15dd0:	mov	r0, r7
   15dd4:	mov	r1, r4
   15dd8:	bl	162f8 <__assert_fail@plt+0x47a4>
   15ddc:	cmp	r8, #0
   15de0:	mov	r4, r8
   15de4:	bne	15d90 <__assert_fail@plt+0x423c>
   15de8:	mov	r0, #0
   15dec:	str	r0, [r6, #4]
   15df0:	cmp	r9, #0
   15df4:	bne	15e60 <__assert_fail@plt+0x430c>
   15df8:	ldr	r4, [r6]
   15dfc:	mov	r0, r7
   15e00:	mov	r1, r4
   15e04:	bl	15654 <__assert_fail@plt+0x3b00>
   15e08:	mov	r5, r0
   15e0c:	ldr	r0, [r0]
   15e10:	cmp	r0, #0
   15e14:	beq	15e3c <__assert_fail@plt+0x42e8>
   15e18:	mov	r0, r7
   15e1c:	bl	160dc <__assert_fail@plt+0x4588>
   15e20:	cmp	r0, #0
   15e24:	beq	15e7c <__assert_fail@plt+0x4328>
   15e28:	str	r4, [r0]
   15e2c:	ldr	r1, [r5, #4]
   15e30:	str	r1, [r0, #4]
   15e34:	str	r0, [r5, #4]
   15e38:	b	15e4c <__assert_fail@plt+0x42f8>
   15e3c:	str	r4, [r5]
   15e40:	ldr	r0, [r7, #12]
   15e44:	add	r0, r0, #1
   15e48:	str	r0, [r7, #12]
   15e4c:	mov	r0, #0
   15e50:	str	r0, [r6]
   15e54:	ldr	r0, [sl, #12]
   15e58:	sub	r0, r0, #1
   15e5c:	str	r0, [sl, #12]
   15e60:	add	r6, r6, #8
   15e64:	ldr	r0, [sl, #4]
   15e68:	cmp	r6, r0
   15e6c:	bcc	15d78 <__assert_fail@plt+0x4224>
   15e70:	mov	r0, #1
   15e74:	sub	sp, fp, #28
   15e78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e7c:	mov	r0, #0
   15e80:	sub	sp, fp, #28
   15e84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e88:	push	{r4, r5, r6, r7, fp, lr}
   15e8c:	add	fp, sp, #16
   15e90:	sub	sp, sp, #8
   15e94:	cmp	r1, #0
   15e98:	beq	15ff8 <__assert_fail@plt+0x44a4>
   15e9c:	mov	r7, r2
   15ea0:	mov	r5, r1
   15ea4:	mov	r4, r0
   15ea8:	add	r2, sp, #4
   15eac:	mov	r6, #0
   15eb0:	mov	r3, #0
   15eb4:	bl	16000 <__assert_fail@plt+0x44ac>
   15eb8:	cmp	r0, #0
   15ebc:	beq	15ecc <__assert_fail@plt+0x4378>
   15ec0:	cmp	r7, #0
   15ec4:	strne	r0, [r7]
   15ec8:	b	15fec <__assert_fail@plt+0x4498>
   15ecc:	vldr	s0, [r4, #8]
   15ed0:	vldr	s2, [r4, #12]
   15ed4:	ldr	r0, [r4, #20]
   15ed8:	vldr	s4, [r0, #8]
   15edc:	vcvt.f32.u32	s0, s0
   15ee0:	vcvt.f32.u32	s2, s2
   15ee4:	vmul.f32	s0, s4, s0
   15ee8:	vcmpe.f32	s0, s2
   15eec:	vmrs	APSR_nzcv, fpscr
   15ef0:	bpl	15f84 <__assert_fail@plt+0x4430>
   15ef4:	mov	r0, r4
   15ef8:	bl	15988 <__assert_fail@plt+0x3e34>
   15efc:	vldr	s0, [r4, #8]
   15f00:	vldr	s4, [r4, #12]
   15f04:	ldr	r0, [r4, #20]
   15f08:	vcvt.f32.u32	s2, s0
   15f0c:	vldr	s0, [r0, #8]
   15f10:	vcvt.f32.u32	s4, s4
   15f14:	vmul.f32	s6, s0, s2
   15f18:	vcmpe.f32	s6, s4
   15f1c:	vmrs	APSR_nzcv, fpscr
   15f20:	bpl	15f84 <__assert_fail@plt+0x4430>
   15f24:	vldr	s4, [r0, #12]
   15f28:	vmul.f32	s2, s4, s2
   15f2c:	ldrb	r0, [r0, #16]
   15f30:	vmul.f32	s0, s0, s2
   15f34:	mvn	r6, #0
   15f38:	vldr	s4, [pc, #188]	; 15ffc <__assert_fail@plt+0x44a8>
   15f3c:	cmp	r0, #0
   15f40:	vseleq.f32	s0, s0, s2
   15f44:	vcmpe.f32	s0, s4
   15f48:	vmrs	APSR_nzcv, fpscr
   15f4c:	bge	15fec <__assert_fail@plt+0x4498>
   15f50:	vcvt.u32.f32	s0, s0
   15f54:	vmov	r1, s0
   15f58:	mov	r0, r4
   15f5c:	bl	15c3c <__assert_fail@plt+0x40e8>
   15f60:	cmp	r0, #0
   15f64:	beq	15fec <__assert_fail@plt+0x4498>
   15f68:	add	r2, sp, #4
   15f6c:	mov	r0, r4
   15f70:	mov	r1, r5
   15f74:	mov	r3, #0
   15f78:	bl	16000 <__assert_fail@plt+0x44ac>
   15f7c:	cmp	r0, #0
   15f80:	bne	15ff8 <__assert_fail@plt+0x44a4>
   15f84:	ldr	r6, [sp, #4]
   15f88:	ldr	r0, [r6]
   15f8c:	cmp	r0, #0
   15f90:	beq	15fc4 <__assert_fail@plt+0x4470>
   15f94:	mov	r0, r4
   15f98:	bl	160dc <__assert_fail@plt+0x4588>
   15f9c:	cmp	r0, #0
   15fa0:	beq	15fe8 <__assert_fail@plt+0x4494>
   15fa4:	str	r5, [r0]
   15fa8:	ldr	r1, [r6, #4]
   15fac:	str	r1, [r0, #4]
   15fb0:	str	r0, [r6, #4]
   15fb4:	ldr	r0, [r4, #16]
   15fb8:	add	r0, r0, #1
   15fbc:	str	r0, [r4, #16]
   15fc0:	b	15fe0 <__assert_fail@plt+0x448c>
   15fc4:	str	r5, [r6]
   15fc8:	ldr	r0, [r4, #12]
   15fcc:	ldr	r1, [r4, #16]
   15fd0:	add	r1, r1, #1
   15fd4:	add	r0, r0, #1
   15fd8:	str	r0, [r4, #12]
   15fdc:	str	r1, [r4, #16]
   15fe0:	mov	r6, #1
   15fe4:	b	15fec <__assert_fail@plt+0x4498>
   15fe8:	mvn	r6, #0
   15fec:	mov	r0, r6
   15ff0:	sub	sp, fp, #16
   15ff4:	pop	{r4, r5, r6, r7, fp, pc}
   15ff8:	bl	11af4 <abort@plt>
   15ffc:	svcmi	0x00800000
   16000:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16004:	add	fp, sp, #24
   16008:	mov	r8, r3
   1600c:	mov	r4, r2
   16010:	mov	r7, r1
   16014:	mov	r5, r0
   16018:	bl	15654 <__assert_fail@plt+0x3b00>
   1601c:	str	r0, [r4]
   16020:	ldr	r1, [r0]
   16024:	mov	r4, #0
   16028:	cmp	r1, #0
   1602c:	beq	160d4 <__assert_fail@plt+0x4580>
   16030:	mov	r6, r0
   16034:	cmp	r1, r7
   16038:	beq	16050 <__assert_fail@plt+0x44fc>
   1603c:	ldr	r2, [r5, #28]
   16040:	mov	r0, r7
   16044:	blx	r2
   16048:	cmp	r0, #0
   1604c:	beq	16078 <__assert_fail@plt+0x4524>
   16050:	ldr	r4, [r6]
   16054:	cmp	r8, #0
   16058:	beq	160d4 <__assert_fail@plt+0x4580>
   1605c:	ldr	r1, [r6, #4]
   16060:	cmp	r1, #0
   16064:	beq	160cc <__assert_fail@plt+0x4578>
   16068:	ldm	r1, {r0, r2}
   1606c:	stm	r6, {r0, r2}
   16070:	b	160bc <__assert_fail@plt+0x4568>
   16074:	ldr	r6, [r6]
   16078:	ldr	r0, [r6, #4]!
   1607c:	cmp	r0, #0
   16080:	beq	160d4 <__assert_fail@plt+0x4580>
   16084:	ldr	r1, [r0]
   16088:	cmp	r1, r7
   1608c:	beq	160a4 <__assert_fail@plt+0x4550>
   16090:	ldr	r2, [r5, #28]
   16094:	mov	r0, r7
   16098:	blx	r2
   1609c:	cmp	r0, #0
   160a0:	beq	16074 <__assert_fail@plt+0x4520>
   160a4:	ldr	r1, [r6]
   160a8:	ldr	r4, [r1]
   160ac:	cmp	r8, #0
   160b0:	beq	160d4 <__assert_fail@plt+0x4580>
   160b4:	ldr	r0, [r1, #4]
   160b8:	str	r0, [r6]
   160bc:	mov	r0, r5
   160c0:	bl	162f8 <__assert_fail@plt+0x47a4>
   160c4:	mov	r0, r4
   160c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160cc:	mov	r0, #0
   160d0:	str	r0, [r6]
   160d4:	mov	r0, r4
   160d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   160dc:	mov	r1, r0
   160e0:	ldr	r0, [r0, #36]	; 0x24
   160e4:	cmp	r0, #0
   160e8:	ldrne	r2, [r0, #4]
   160ec:	strne	r2, [r1, #36]	; 0x24
   160f0:	bxne	lr
   160f4:	push	{fp, lr}
   160f8:	mov	fp, sp
   160fc:	mov	r0, #8
   16100:	bl	1947c <lchmod@@Base+0x2ff0>
   16104:	pop	{fp, pc}
   16108:	push	{r4, sl, fp, lr}
   1610c:	add	fp, sp, #8
   16110:	sub	sp, sp, #8
   16114:	mov	r4, r1
   16118:	add	r2, sp, #4
   1611c:	bl	15e88 <__assert_fail@plt+0x4334>
   16120:	cmn	r0, #1
   16124:	beq	16138 <__assert_fail@plt+0x45e4>
   16128:	ldr	r1, [sp, #4]
   1612c:	cmp	r0, #0
   16130:	moveq	r4, r1
   16134:	b	1613c <__assert_fail@plt+0x45e8>
   16138:	mov	r4, #0
   1613c:	mov	r0, r4
   16140:	sub	sp, fp, #8
   16144:	pop	{r4, sl, fp, pc}
   16148:	push	{r4, r5, r6, sl, fp, lr}
   1614c:	add	fp, sp, #16
   16150:	sub	sp, sp, #8
   16154:	mov	r4, r0
   16158:	add	r2, sp, #4
   1615c:	mov	r3, #1
   16160:	bl	16000 <__assert_fail@plt+0x44ac>
   16164:	mov	r5, r0
   16168:	cmp	r0, #0
   1616c:	beq	16248 <__assert_fail@plt+0x46f4>
   16170:	ldr	r0, [r4, #16]
   16174:	sub	r0, r0, #1
   16178:	str	r0, [r4, #16]
   1617c:	ldr	r0, [sp, #4]
   16180:	ldr	r0, [r0]
   16184:	cmp	r0, #0
   16188:	bne	16248 <__assert_fail@plt+0x46f4>
   1618c:	ldr	r0, [r4, #12]
   16190:	sub	r0, r0, #1
   16194:	vldr	s0, [r4, #8]
   16198:	str	r0, [r4, #12]
   1619c:	ldr	r1, [r4, #20]
   161a0:	vldr	s2, [r1]
   161a4:	vcvt.f32.u32	s0, s0
   161a8:	vmov	s4, r0
   161ac:	vcvt.f32.u32	s4, s4
   161b0:	vmul.f32	s0, s2, s0
   161b4:	vcmpe.f32	s0, s4
   161b8:	vmrs	APSR_nzcv, fpscr
   161bc:	ble	16248 <__assert_fail@plt+0x46f4>
   161c0:	mov	r0, r4
   161c4:	bl	15988 <__assert_fail@plt+0x3e34>
   161c8:	vldr	s0, [r4, #8]
   161cc:	vldr	s2, [r4, #12]
   161d0:	ldr	r0, [r4, #20]
   161d4:	vcvt.f32.u32	s0, s0
   161d8:	vldr	s4, [r0]
   161dc:	vcvt.f32.u32	s2, s2
   161e0:	vmul.f32	s4, s4, s0
   161e4:	vcmpe.f32	s4, s2
   161e8:	vmrs	APSR_nzcv, fpscr
   161ec:	ble	16248 <__assert_fail@plt+0x46f4>
   161f0:	vldr	s2, [r0, #4]
   161f4:	ldrb	r1, [r0, #16]
   161f8:	vmul.f32	s0, s2, s0
   161fc:	cmp	r1, #0
   16200:	vldreq	s2, [r0, #8]
   16204:	vmuleq.f32	s0, s0, s2
   16208:	vcvt.u32.f32	s0, s0
   1620c:	vmov	r1, s0
   16210:	mov	r0, r4
   16214:	bl	15c3c <__assert_fail@plt+0x40e8>
   16218:	cmp	r0, #0
   1621c:	bne	16248 <__assert_fail@plt+0x46f4>
   16220:	ldr	r0, [r4, #36]	; 0x24
   16224:	cmp	r0, #0
   16228:	beq	16240 <__assert_fail@plt+0x46ec>
   1622c:	ldr	r6, [r0, #4]
   16230:	bl	13304 <__assert_fail@plt+0x17b0>
   16234:	cmp	r6, #0
   16238:	mov	r0, r6
   1623c:	bne	1622c <__assert_fail@plt+0x46d8>
   16240:	mov	r0, #0
   16244:	str	r0, [r4, #36]	; 0x24
   16248:	mov	r0, r5
   1624c:	sub	sp, fp, #16
   16250:	pop	{r4, r5, r6, sl, fp, pc}
   16254:	b	16148 <__assert_fail@plt+0x45f4>
   16258:	push	{r4, r5, fp, lr}
   1625c:	add	fp, sp, #8
   16260:	cmp	r0, #10
   16264:	movls	r0, #10
   16268:	orr	r5, r0, #1
   1626c:	mvn	r4, #0
   16270:	cmn	r5, #1
   16274:	bne	1628c <__assert_fail@plt+0x4738>
   16278:	mov	r0, r4
   1627c:	pop	{r4, r5, fp, pc}
   16280:	add	r5, r5, #2
   16284:	cmn	r5, #1
   16288:	beq	16278 <__assert_fail@plt+0x4724>
   1628c:	mov	r0, r5
   16290:	bl	162a8 <__assert_fail@plt+0x4754>
   16294:	cmp	r0, #0
   16298:	beq	16280 <__assert_fail@plt+0x472c>
   1629c:	mov	r4, r5
   162a0:	mov	r0, r4
   162a4:	pop	{r4, r5, fp, pc}
   162a8:	mov	ip, #3
   162ac:	cmp	r0, #10
   162b0:	bcc	162e4 <__assert_fail@plt+0x4790>
   162b4:	mov	ip, #3
   162b8:	mov	r2, #9
   162bc:	mov	r3, #16
   162c0:	udiv	r1, r0, ip
   162c4:	mls	r1, r1, ip, r0
   162c8:	cmp	r1, #0
   162cc:	beq	162e4 <__assert_fail@plt+0x4790>
   162d0:	add	r2, r3, r2
   162d4:	add	r3, r3, #8
   162d8:	add	ip, ip, #2
   162dc:	cmp	r2, r0
   162e0:	bcc	162c0 <__assert_fail@plt+0x476c>
   162e4:	udiv	r1, r0, ip
   162e8:	mls	r0, r1, ip, r0
   162ec:	cmp	r0, #0
   162f0:	movwne	r0, #1
   162f4:	bx	lr
   162f8:	mov	r2, #0
   162fc:	str	r2, [r1]
   16300:	ldr	r2, [r0, #36]	; 0x24
   16304:	str	r2, [r1, #4]
   16308:	str	r1, [r0, #36]	; 0x24
   1630c:	bx	lr
   16310:	push	{r4, r5, fp, lr}
   16314:	add	fp, sp, #8
   16318:	mov	r4, r1
   1631c:	mov	r5, r0
   16320:	ldr	r0, [r0]
   16324:	bl	19f78 <lchmod@@Base+0x3aec>
   16328:	ldrd	r2, [r5, #8]
   1632c:	eor	r0, r2, r0
   16330:	mov	r1, r3
   16334:	mov	r2, r4
   16338:	mov	r3, #0
   1633c:	bl	1a1f0 <lchmod@@Base+0x3d64>
   16340:	mov	r0, r2
   16344:	pop	{r4, r5, fp, pc}
   16348:	push	{r4, r5, r6, r7, fp, lr}
   1634c:	add	fp, sp, #16
   16350:	ldrd	r2, [r1, #8]
   16354:	ldrd	r4, [r0, #8]
   16358:	eor	r3, r5, r3
   1635c:	eor	r2, r4, r2
   16360:	orrs	r2, r2, r3
   16364:	mov	r2, #0
   16368:	bne	16398 <__assert_fail@plt+0x4844>
   1636c:	ldrd	r4, [r1, #16]
   16370:	ldrd	r6, [r0, #16]
   16374:	eor	r3, r7, r5
   16378:	eor	r7, r6, r4
   1637c:	orrs	r3, r7, r3
   16380:	bne	16398 <__assert_fail@plt+0x4844>
   16384:	ldr	r1, [r1]
   16388:	ldr	r0, [r0]
   1638c:	bl	1177c <strcmp@plt>
   16390:	clz	r0, r0
   16394:	lsr	r2, r0, #5
   16398:	mov	r0, r2
   1639c:	pop	{r4, r5, r6, r7, fp, pc}
   163a0:	push	{r4, sl, fp, lr}
   163a4:	add	fp, sp, #8
   163a8:	mov	r4, r0
   163ac:	ldr	r0, [r0]
   163b0:	bl	13304 <__assert_fail@plt+0x17b0>
   163b4:	mov	r0, r4
   163b8:	pop	{r4, sl, fp, lr}
   163bc:	b	13304 <__assert_fail@plt+0x17b0>
   163c0:	mov	r2, #0
   163c4:	mov	r3, #1
   163c8:	strb	r3, [r0, #28]
   163cc:	str	r2, [r0, #20]
   163d0:	str	r2, [r0, #24]
   163d4:	str	r1, [r0, r2, lsl #2]
   163d8:	add	r2, r2, #1
   163dc:	cmp	r2, #4
   163e0:	bne	163d4 <__assert_fail@plt+0x4880>
   163e4:	str	r1, [r0, #16]
   163e8:	bx	lr
   163ec:	ldrb	r0, [r0, #28]
   163f0:	bx	lr
   163f4:	ldr	r2, [r0, #20]
   163f8:	ldrb	r3, [r0, #28]
   163fc:	eor	r3, r3, #1
   16400:	add	r2, r2, r3
   16404:	and	r2, r2, #3
   16408:	ldr	ip, [r0, r2, lsl #2]
   1640c:	str	r1, [r0, r2, lsl #2]
   16410:	str	r2, [r0, #20]
   16414:	ldr	r1, [r0, #24]
   16418:	cmp	r2, r1
   1641c:	addeq	r1, r1, r3
   16420:	andeq	r1, r1, #3
   16424:	streq	r1, [r0, #24]
   16428:	mov	r1, #0
   1642c:	strb	r1, [r0, #28]
   16430:	mov	r0, ip
   16434:	bx	lr
   16438:	push	{r4, sl, fp, lr}
   1643c:	add	fp, sp, #8
   16440:	mov	r4, r0
   16444:	bl	163ec <__assert_fail@plt+0x4898>
   16448:	cmp	r0, #0
   1644c:	bne	16488 <__assert_fail@plt+0x4934>
   16450:	ldr	r1, [r4, #16]
   16454:	ldr	r2, [r4, #20]
   16458:	ldr	r0, [r4, r2, lsl #2]
   1645c:	str	r1, [r4, r2, lsl #2]
   16460:	ldr	r1, [r4, #20]
   16464:	ldr	r2, [r4, #24]
   16468:	cmp	r1, r2
   1646c:	moveq	r1, #1
   16470:	strbeq	r1, [r4, #28]
   16474:	popeq	{r4, sl, fp, pc}
   16478:	sub	r1, r1, #1
   1647c:	and	r1, r1, #3
   16480:	str	r1, [r4, #20]
   16484:	pop	{r4, sl, fp, pc}
   16488:	bl	11af4 <abort@plt>

0001648c <lchmod@@Base>:
   1648c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16490:	add	fp, sp, #24
   16494:	sub	sp, sp, #136	; 0x88
   16498:	mov	r4, r1
   1649c:	mov	r5, r0
   164a0:	mov	r1, #2654208	; 0x288000
   164a4:	bl	118e4 <open64@plt>
   164a8:	mov	r6, r0
   164ac:	cmp	r0, #0
   164b0:	blt	164f4 <lchmod@@Base+0x68>
   164b4:	movw	r1, #43276	; 0xa90c
   164b8:	movt	r1, #1
   164bc:	add	r2, sp, #32
   164c0:	mov	r0, r6
   164c4:	mov	r3, #4096	; 0x1000
   164c8:	bl	1a410 <lchmod@@Base+0x3f84>
   164cc:	cmp	r0, #0
   164d0:	beq	164fc <lchmod@@Base+0x70>
   164d4:	bl	119a4 <__errno_location@plt>
   164d8:	mov	r4, r0
   164dc:	ldr	r5, [r0]
   164e0:	mov	r0, r6
   164e4:	bl	11b00 <close@plt>
   164e8:	str	r5, [r4]
   164ec:	mvn	r7, #0
   164f0:	b	1659c <lchmod@@Base+0x110>
   164f4:	mov	r7, r6
   164f8:	b	1659c <lchmod@@Base+0x110>
   164fc:	ldr	r0, [sp, #48]	; 0x30
   16500:	and	r0, r0, #61440	; 0xf000
   16504:	cmp	r0, #40960	; 0xa000
   16508:	bne	16528 <lchmod@@Base+0x9c>
   1650c:	mov	r0, r6
   16510:	bl	11b00 <close@plt>
   16514:	bl	119a4 <__errno_location@plt>
   16518:	mov	r1, #95	; 0x5f
   1651c:	str	r1, [r0]
   16520:	mvn	r7, #0
   16524:	b	1659c <lchmod@@Base+0x110>
   16528:	str	r6, [sp]
   1652c:	add	r7, sp, #6
   16530:	movw	r3, #43652	; 0xaa84
   16534:	movt	r3, #1
   16538:	mov	r0, r7
   1653c:	mov	r1, #1
   16540:	mov	r2, #26
   16544:	bl	119b0 <__sprintf_chk@plt>
   16548:	mov	r0, r7
   1654c:	mov	r1, r4
   16550:	bl	11ad0 <chmod@plt>
   16554:	mov	r7, r0
   16558:	bl	119a4 <__errno_location@plt>
   1655c:	mov	r8, r0
   16560:	ldr	r9, [r0]
   16564:	mov	r0, r6
   16568:	bl	11b00 <close@plt>
   1656c:	cmp	r7, #0
   16570:	beq	16590 <lchmod@@Base+0x104>
   16574:	cmp	r9, #2
   16578:	bne	16598 <lchmod@@Base+0x10c>
   1657c:	mov	r0, r5
   16580:	mov	r1, r4
   16584:	bl	11ad0 <chmod@plt>
   16588:	mov	r7, r0
   1658c:	b	1659c <lchmod@@Base+0x110>
   16590:	mov	r7, #0
   16594:	b	1659c <lchmod@@Base+0x110>
   16598:	str	r9, [r8]
   1659c:	mov	r0, r7
   165a0:	sub	sp, fp, #24
   165a4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   165a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   165ac:	add	fp, sp, #28
   165b0:	sub	sp, sp, #4
   165b4:	mov	r5, r0
   165b8:	ldrb	r7, [r0]
   165bc:	and	r0, r7, #248	; 0xf8
   165c0:	cmp	r0, #48	; 0x30
   165c4:	bne	16630 <lchmod@@Base+0x1a4>
   165c8:	mov	r4, #0
   165cc:	mov	r0, #0
   165d0:	mov	r1, r5
   165d4:	mov	r6, r5
   165d8:	ldrb	r2, [r6], #1
   165dc:	add	r0, r2, r0, lsl #3
   165e0:	sub	r0, r0, #48	; 0x30
   165e4:	cmp	r4, r0, lsr #12
   165e8:	bne	169cc <lchmod@@Base+0x540>
   165ec:	ldrb	r2, [r1, #1]
   165f0:	and	r1, r2, #248	; 0xf8
   165f4:	cmp	r1, #48	; 0x30
   165f8:	mov	r1, r6
   165fc:	beq	165d8 <lchmod@@Base+0x14c>
   16600:	cmp	r2, #0
   16604:	bne	169cc <lchmod@@Base+0x540>
   16608:	bl	169e8 <lchmod@@Base+0x55c>
   1660c:	sub	r2, r6, r5
   16610:	and	r3, r0, #3072	; 0xc00
   16614:	movw	r7, #1023	; 0x3ff
   16618:	movw	r1, #4095	; 0xfff
   1661c:	cmp	r2, #5
   16620:	orrlt	r1, r3, r7
   16624:	sub	sp, fp, #28
   16628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1662c:	b	169ec <lchmod@@Base+0x560>
   16630:	mov	r1, #1
   16634:	mvn	r2, #42	; 0x2a
   16638:	movw	r8, #5
   1663c:	movt	r8, #4
   16640:	mov	r3, #1
   16644:	mov	r0, #1
   16648:	b	16658 <lchmod@@Base+0x1cc>
   1664c:	add	r0, r6, r0
   16650:	ldrb	r7, [r5, r3]
   16654:	add	r3, r3, #1
   16658:	uxtab	r6, r2, r7
   1665c:	uxtb	r7, r7
   16660:	cmp	r6, #18
   16664:	bhi	16674 <lchmod@@Base+0x1e8>
   16668:	tst	r8, r1, lsl r6
   1666c:	mov	r6, #1
   16670:	bne	1664c <lchmod@@Base+0x1c0>
   16674:	cmp	r7, #0
   16678:	beq	16684 <lchmod@@Base+0x1f8>
   1667c:	mov	r6, #0
   16680:	b	1664c <lchmod@@Base+0x1c0>
   16684:	mov	r1, #16
   16688:	bl	19054 <lchmod@@Base+0x2bc8>
   1668c:	mov	r4, r0
   16690:	mov	r9, #0
   16694:	mov	ip, #1
   16698:	mvn	lr, #87	; 0x57
   1669c:	mov	sl, #0
   166a0:	b	166ac <lchmod@@Base+0x220>
   166a4:	add	r5, r5, #1
   166a8:	mov	sl, r0
   166ac:	mov	r1, #0
   166b0:	b	166bc <lchmod@@Base+0x230>
   166b4:	orr	r1, r1, r0
   166b8:	add	r5, r5, #1
   166bc:	ldrb	r0, [r5]
   166c0:	sub	r2, r0, #97	; 0x61
   166c4:	cmp	r2, #20
   166c8:	bhi	16744 <lchmod@@Base+0x2b8>
   166cc:	mov	r0, #2496	; 0x9c0
   166d0:	add	r3, pc, #0
   166d4:	ldr	pc, [r3, r2, lsl #2]
   166d8:	andeq	r6, r1, ip, lsr #14
   166dc:	andeq	r6, r1, r0, asr #19
   166e0:	andeq	r6, r1, r0, asr #19
   166e4:	andeq	r6, r1, r0, asr #19
   166e8:	andeq	r6, r1, r0, asr #19
   166ec:	andeq	r6, r1, r0, asr #19
   166f0:	andeq	r6, r1, r4, lsr r7
   166f4:	andeq	r6, r1, r0, asr #19
   166f8:	andeq	r6, r1, r0, asr #19
   166fc:	andeq	r6, r1, r0, asr #19
   16700:	andeq	r6, r1, r0, asr #19
   16704:	andeq	r6, r1, r0, asr #19
   16708:	andeq	r6, r1, r0, asr #19
   1670c:	andeq	r6, r1, r0, asr #19
   16710:	andeq	r6, r1, ip, lsr r7
   16714:	andeq	r6, r1, r0, asr #19
   16718:	andeq	r6, r1, r0, asr #19
   1671c:	andeq	r6, r1, r0, asr #19
   16720:	andeq	r6, r1, r0, asr #19
   16724:	andeq	r6, r1, r0, asr #19
   16728:			; <UNDEFINED> instruction: 0x000166b4
   1672c:	movw	r0, #4095	; 0xfff
   16730:	b	166b4 <lchmod@@Base+0x228>
   16734:	movw	r0, #1080	; 0x438
   16738:	b	166b4 <lchmod@@Base+0x228>
   1673c:	movw	r0, #519	; 0x207
   16740:	b	166b4 <lchmod@@Base+0x228>
   16744:	sub	r0, r0, #43	; 0x2b
   16748:	cmp	r0, #18
   1674c:	bhi	169c0 <lchmod@@Base+0x534>
   16750:	tst	r8, ip, lsl r0
   16754:	beq	169c0 <lchmod@@Base+0x534>
   16758:	ldrb	r6, [r5]
   1675c:	mov	r2, r5
   16760:	ldrb	r7, [r2, #1]!
   16764:	sub	r0, r7, #48	; 0x30
   16768:	cmp	r0, #8
   1676c:	bcs	167d4 <lchmod@@Base+0x348>
   16770:	mov	r0, #0
   16774:	mov	r5, r2
   16778:	ldrb	r3, [r5], #1
   1677c:	add	r0, r3, r0, lsl #3
   16780:	sub	r0, r0, #48	; 0x30
   16784:	cmp	r9, r0, lsr #12
   16788:	bne	169c0 <lchmod@@Base+0x534>
   1678c:	ldrb	r3, [r2, #1]
   16790:	and	r2, r3, #248	; 0xf8
   16794:	cmp	r2, #48	; 0x30
   16798:	mov	r2, r5
   1679c:	beq	16778 <lchmod@@Base+0x2ec>
   167a0:	cmp	r1, #0
   167a4:	bne	169c0 <lchmod@@Base+0x534>
   167a8:	cmp	r3, #44	; 0x2c
   167ac:	cmpne	r3, #0
   167b0:	bne	169c0 <lchmod@@Base+0x534>
   167b4:	str	r6, [sp]
   167b8:	bl	169e8 <lchmod@@Base+0x55c>
   167bc:	mvn	lr, #87	; 0x57
   167c0:	mov	ip, #1
   167c4:	mov	r6, #1
   167c8:	movw	r1, #4095	; 0xfff
   167cc:	movw	r3, #4095	; 0xfff
   167d0:	b	16914 <lchmod@@Base+0x488>
   167d4:	cmp	r7, #103	; 0x67
   167d8:	str	r6, [sp]
   167dc:	beq	16804 <lchmod@@Base+0x378>
   167e0:	cmp	r7, #111	; 0x6f
   167e4:	beq	16818 <lchmod@@Base+0x38c>
   167e8:	cmp	r7, #117	; 0x75
   167ec:	bne	1682c <lchmod@@Base+0x3a0>
   167f0:	add	r5, r5, #2
   167f4:	mov	r6, #3
   167f8:	mov	r3, #0
   167fc:	mov	r0, #448	; 0x1c0
   16800:	b	16914 <lchmod@@Base+0x488>
   16804:	add	r5, r5, #2
   16808:	mov	r6, #3
   1680c:	mov	r3, #0
   16810:	mov	r0, #56	; 0x38
   16814:	b	16914 <lchmod@@Base+0x488>
   16818:	add	r5, r5, #2
   1681c:	mov	r6, #3
   16820:	mov	r3, #0
   16824:	mov	r0, #7
   16828:	b	16914 <lchmod@@Base+0x488>
   1682c:	add	r3, r5, #2
   16830:	mov	r2, #1
   16834:	mov	r0, #0
   16838:	b	16840 <lchmod@@Base+0x3b4>
   1683c:	ldrb	r7, [r3], #1
   16840:	mov	r6, r2
   16844:	uxtab	r7, lr, r7
   16848:	cmp	r7, #32
   1684c:	bhi	1690c <lchmod@@Base+0x480>
   16850:	mov	r2, #2
   16854:	add	r5, pc, #0
   16858:	ldr	pc, [r5, r7, lsl #2]
   1685c:	andeq	r6, r1, ip, lsr r8
   16860:	andeq	r6, r1, ip, lsl #18
   16864:	andeq	r6, r1, ip, lsl #18
   16868:	andeq	r6, r1, ip, lsl #18
   1686c:	andeq	r6, r1, ip, lsl #18
   16870:	andeq	r6, r1, ip, lsl #18
   16874:	andeq	r6, r1, ip, lsl #18
   16878:	andeq	r6, r1, ip, lsl #18
   1687c:	andeq	r6, r1, ip, lsl #18
   16880:	andeq	r6, r1, ip, lsl #18
   16884:	andeq	r6, r1, ip, lsl #18
   16888:	andeq	r6, r1, ip, lsl #18
   1688c:	andeq	r6, r1, ip, lsl #18
   16890:	andeq	r6, r1, ip, lsl #18
   16894:	andeq	r6, r1, ip, lsl #18
   16898:	andeq	r6, r1, ip, lsl #18
   1689c:	andeq	r6, r1, ip, lsl #18
   168a0:	andeq	r6, r1, ip, lsl #18
   168a4:	andeq	r6, r1, ip, lsl #18
   168a8:	andeq	r6, r1, ip, lsl #18
   168ac:	andeq	r6, r1, ip, lsl #18
   168b0:	andeq	r6, r1, ip, lsl #18
   168b4:	andeq	r6, r1, ip, lsl #18
   168b8:	andeq	r6, r1, ip, lsl #18
   168bc:	andeq	r6, r1, ip, lsl #18
   168c0:	andeq	r6, r1, ip, lsl #18
   168c4:	andeq	r6, r1, r0, ror #17
   168c8:	andeq	r6, r1, r8, ror #17
   168cc:	strdeq	r6, [r1], -r0
   168d0:	andeq	r6, r1, ip, lsl #18
   168d4:	andeq	r6, r1, ip, lsl #18
   168d8:	strdeq	r6, [r1], -r8
   168dc:	andeq	r6, r1, r0, lsl #18
   168e0:	orr	r0, r0, #292	; 0x124
   168e4:	b	16904 <lchmod@@Base+0x478>
   168e8:	orr	r0, r0, #3072	; 0xc00
   168ec:	b	16904 <lchmod@@Base+0x478>
   168f0:	orr	r0, r0, #512	; 0x200
   168f4:	b	16904 <lchmod@@Base+0x478>
   168f8:	orr	r0, r0, #146	; 0x92
   168fc:	b	16904 <lchmod@@Base+0x478>
   16900:	orr	r0, r0, #73	; 0x49
   16904:	mov	r2, r6
   16908:	b	1683c <lchmod@@Base+0x3b0>
   1690c:	sub	r5, r3, #1
   16910:	mov	r3, #0
   16914:	mov	r2, r4
   16918:	ldr	r7, [sp]
   1691c:	strb	r7, [r2, sl, lsl #4]!
   16920:	strb	r6, [r2, #1]
   16924:	str	r1, [r2, #4]
   16928:	str	r0, [r2, #8]
   1692c:	cmp	r3, #0
   16930:	bne	16940 <lchmod@@Base+0x4b4>
   16934:	cmp	r1, #0
   16938:	andne	r0, r0, r1
   1693c:	mov	r3, r0
   16940:	add	r0, sl, #1
   16944:	add	r2, r4, sl, lsl #4
   16948:	str	r3, [r2, #12]
   1694c:	ldrb	r2, [r5]
   16950:	sub	r2, r2, #43	; 0x2b
   16954:	cmp	r2, #18
   16958:	bhi	169b4 <lchmod@@Base+0x528>
   1695c:	add	r3, pc, #4
   16960:	mov	sl, r0
   16964:	ldr	pc, [r3, r2, lsl #2]
   16968:	andeq	r6, r1, r8, asr r7
   1696c:	andeq	r6, r1, r4, lsr #13
   16970:	andeq	r6, r1, r8, asr r7
   16974:			; <UNDEFINED> instruction: 0x000169b4
   16978:			; <UNDEFINED> instruction: 0x000169b4
   1697c:			; <UNDEFINED> instruction: 0x000169b4
   16980:			; <UNDEFINED> instruction: 0x000169b4
   16984:			; <UNDEFINED> instruction: 0x000169b4
   16988:			; <UNDEFINED> instruction: 0x000169b4
   1698c:			; <UNDEFINED> instruction: 0x000169b4
   16990:			; <UNDEFINED> instruction: 0x000169b4
   16994:			; <UNDEFINED> instruction: 0x000169b4
   16998:			; <UNDEFINED> instruction: 0x000169b4
   1699c:			; <UNDEFINED> instruction: 0x000169b4
   169a0:			; <UNDEFINED> instruction: 0x000169b4
   169a4:			; <UNDEFINED> instruction: 0x000169b4
   169a8:			; <UNDEFINED> instruction: 0x000169b4
   169ac:			; <UNDEFINED> instruction: 0x000169b4
   169b0:	andeq	r6, r1, r8, asr r7
   169b4:	ldrb	r1, [r5]
   169b8:	cmp	r1, #0
   169bc:	beq	169d8 <lchmod@@Base+0x54c>
   169c0:	mov	r0, r4
   169c4:	bl	13304 <__assert_fail@plt+0x17b0>
   169c8:	mov	r4, #0
   169cc:	mov	r0, r4
   169d0:	sub	sp, fp, #28
   169d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169d8:	add	r0, r4, r0, lsl #4
   169dc:	mov	r1, #0
   169e0:	strb	r1, [r0, #1]
   169e4:	b	169cc <lchmod@@Base+0x540>
   169e8:	bx	lr
   169ec:	push	{r4, r5, fp, lr}
   169f0:	add	fp, sp, #8
   169f4:	mov	r4, r1
   169f8:	mov	r5, r0
   169fc:	mov	r0, #32
   16a00:	bl	18fb8 <lchmod@@Base+0x2b2c>
   16a04:	movw	r1, #317	; 0x13d
   16a08:	strh	r1, [r0]
   16a0c:	movw	r1, #4095	; 0xfff
   16a10:	stmib	r0, {r1, r5}
   16a14:	str	r4, [r0, #12]
   16a18:	mov	r1, #0
   16a1c:	strb	r1, [r0, #17]
   16a20:	pop	{r4, r5, fp, pc}
   16a24:	push	{fp, lr}
   16a28:	mov	fp, sp
   16a2c:	sub	sp, sp, #104	; 0x68
   16a30:	mov	r1, sp
   16a34:	bl	1a3e0 <lchmod@@Base+0x3f54>
   16a38:	mov	r1, r0
   16a3c:	mov	r0, #0
   16a40:	cmp	r1, #0
   16a44:	beq	16a50 <lchmod@@Base+0x5c4>
   16a48:	mov	sp, fp
   16a4c:	pop	{fp, pc}
   16a50:	ldr	r0, [sp, #16]
   16a54:	movw	r1, #4095	; 0xfff
   16a58:	bl	169ec <lchmod@@Base+0x560>
   16a5c:	mov	sp, fp
   16a60:	pop	{fp, pc}
   16a64:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16a68:	add	fp, sp, #24
   16a6c:	bfc	r0, #12, #20
   16a70:	ldrb	r4, [r3, #1]
   16a74:	ldr	ip, [fp, #8]
   16a78:	cmp	r4, #0
   16a7c:	beq	16b5c <lchmod@@Base+0x6d0>
   16a80:	add	r3, r3, #8
   16a84:	cmp	r1, #0
   16a88:	mov	lr, r1
   16a8c:	movwne	lr, #3072	; 0xc00
   16a90:	mov	r9, #0
   16a94:	movw	r8, #4095	; 0xfff
   16a98:	mov	r5, r3
   16a9c:	ldr	r7, [r3, #-4]
   16aa0:	ldr	r3, [r3]
   16aa4:	ldr	r6, [r5, #4]
   16aa8:	bic	r6, lr, r6
   16aac:	uxtb	r4, r4
   16ab0:	cmp	r4, #2
   16ab4:	beq	16ae0 <lchmod@@Base+0x654>
   16ab8:	cmp	r4, #3
   16abc:	bne	16aec <lchmod@@Base+0x660>
   16ac0:	and	r4, r3, r0
   16ac4:	tst	r4, #146	; 0x92
   16ac8:	mov	r3, r4
   16acc:	orrne	r3, r3, #146	; 0x92
   16ad0:	tst	r4, #292	; 0x124
   16ad4:	orrne	r3, r3, #292	; 0x124
   16ad8:	tst	r4, #73	; 0x49
   16adc:	b	16ae8 <lchmod@@Base+0x65c>
   16ae0:	and	r4, r0, #73	; 0x49
   16ae4:	orrs	r4, r4, r1
   16ae8:	orrne	r3, r3, #73	; 0x49
   16aec:	cmp	r7, #0
   16af0:	mov	r4, r7
   16af4:	mvneq	r4, r2
   16af8:	bic	r4, r4, r6
   16afc:	and	r3, r4, r3
   16b00:	ldrb	r4, [r5, #-8]
   16b04:	cmp	r4, #43	; 0x2b
   16b08:	beq	16b38 <lchmod@@Base+0x6ac>
   16b0c:	cmp	r4, #45	; 0x2d
   16b10:	beq	16b40 <lchmod@@Base+0x6b4>
   16b14:	cmp	r4, #61	; 0x3d
   16b18:	bne	16b48 <lchmod@@Base+0x6bc>
   16b1c:	mvn	r4, r7
   16b20:	cmp	r7, #0
   16b24:	orrne	r6, r6, r4
   16b28:	and	r0, r6, r0
   16b2c:	orr	r0, r3, r0
   16b30:	bic	r3, r8, r6
   16b34:	b	16b44 <lchmod@@Base+0x6b8>
   16b38:	orr	r0, r3, r0
   16b3c:	b	16b44 <lchmod@@Base+0x6b8>
   16b40:	bic	r0, r0, r3
   16b44:	orr	r9, r3, r9
   16b48:	add	r3, r5, #16
   16b4c:	ldrb	r4, [r5, #9]
   16b50:	cmp	r4, #0
   16b54:	bne	16a98 <lchmod@@Base+0x60c>
   16b58:	b	16b60 <lchmod@@Base+0x6d4>
   16b5c:	mov	r9, #0
   16b60:	cmp	ip, #0
   16b64:	strne	r9, [ip]
   16b68:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16b6c:	sub	sp, sp, #4
   16b70:	push	{fp, lr}
   16b74:	mov	fp, sp
   16b78:	sub	sp, sp, #4
   16b7c:	str	r3, [fp, #8]
   16b80:	mov	r3, #0
   16b84:	tst	r2, #64	; 0x40
   16b88:	addne	r3, fp, #8
   16b8c:	addne	r3, r3, #4
   16b90:	strne	r3, [sp]
   16b94:	ldrne	r3, [fp, #8]
   16b98:	bl	1198c <openat64@plt>
   16b9c:	bl	18ab0 <lchmod@@Base+0x2624>
   16ba0:	mov	sp, fp
   16ba4:	pop	{fp, lr}
   16ba8:	add	sp, sp, #4
   16bac:	bx	lr
   16bb0:	push	{r4, r5, r6, sl, fp, lr}
   16bb4:	add	fp, sp, #16
   16bb8:	mov	r4, r3
   16bbc:	orr	r2, r2, #18688	; 0x4900
   16bc0:	orr	r2, r2, #524288	; 0x80000
   16bc4:	bl	16b6c <lchmod@@Base+0x6e0>
   16bc8:	mov	r5, r0
   16bcc:	mov	r0, #0
   16bd0:	cmp	r5, #0
   16bd4:	poplt	{r4, r5, r6, sl, fp, pc}
   16bd8:	mov	r0, r5
   16bdc:	bl	11a58 <fdopendir@plt>
   16be0:	cmp	r0, #0
   16be4:	strne	r5, [r4]
   16be8:	popne	{r4, r5, r6, sl, fp, pc}
   16bec:	bl	119a4 <__errno_location@plt>
   16bf0:	mov	r4, r0
   16bf4:	ldr	r6, [r0]
   16bf8:	mov	r0, r5
   16bfc:	bl	11b00 <close@plt>
   16c00:	str	r6, [r4]
   16c04:	mov	r0, #0
   16c08:	pop	{r4, r5, r6, sl, fp, pc}
   16c0c:	push	{r4, r5, fp, lr}
   16c10:	add	fp, sp, #8
   16c14:	cmp	r0, #0
   16c18:	beq	16cac <lchmod@@Base+0x820>
   16c1c:	mov	r4, r0
   16c20:	mov	r1, #47	; 0x2f
   16c24:	bl	11a34 <strrchr@plt>
   16c28:	cmp	r0, #0
   16c2c:	mov	r5, r4
   16c30:	addne	r5, r0, #1
   16c34:	sub	r0, r5, r4
   16c38:	cmp	r0, #7
   16c3c:	blt	16c90 <lchmod@@Base+0x804>
   16c40:	sub	r0, r5, #7
   16c44:	movw	r1, #43725	; 0xaacd
   16c48:	movt	r1, #1
   16c4c:	mov	r2, #7
   16c50:	bl	11ae8 <strncmp@plt>
   16c54:	cmp	r0, #0
   16c58:	bne	16c90 <lchmod@@Base+0x804>
   16c5c:	movw	r1, #43733	; 0xaad5
   16c60:	movt	r1, #1
   16c64:	mov	r0, r5
   16c68:	mov	r2, #3
   16c6c:	bl	11ae8 <strncmp@plt>
   16c70:	cmp	r0, #0
   16c74:	beq	16c80 <lchmod@@Base+0x7f4>
   16c78:	mov	r4, r5
   16c7c:	b	16c90 <lchmod@@Base+0x804>
   16c80:	add	r4, r5, #3
   16c84:	movw	r0, #49608	; 0xc1c8
   16c88:	movt	r0, #2
   16c8c:	str	r4, [r0]
   16c90:	movw	r0, #49612	; 0xc1cc
   16c94:	movt	r0, #2
   16c98:	str	r4, [r0]
   16c9c:	movw	r0, #49648	; 0xc1f0
   16ca0:	movt	r0, #2
   16ca4:	str	r4, [r0]
   16ca8:	pop	{r4, r5, fp, pc}
   16cac:	movw	r0, #49624	; 0xc1d8
   16cb0:	movt	r0, #2
   16cb4:	ldr	r3, [r0]
   16cb8:	movw	r0, #43669	; 0xaa95
   16cbc:	movt	r0, #1
   16cc0:	mov	r1, #55	; 0x37
   16cc4:	mov	r2, #1
   16cc8:	bl	11884 <fwrite@plt>
   16ccc:	bl	11af4 <abort@plt>
   16cd0:	push	{r4, r5, r6, sl, fp, lr}
   16cd4:	add	fp, sp, #16
   16cd8:	mov	r4, r0
   16cdc:	movw	r0, #49656	; 0xc1f8
   16ce0:	movt	r0, #2
   16ce4:	cmp	r4, #0
   16ce8:	moveq	r4, r0
   16cec:	bl	119a4 <__errno_location@plt>
   16cf0:	mov	r5, r0
   16cf4:	ldr	r6, [r0]
   16cf8:	mov	r0, r4
   16cfc:	mov	r1, #48	; 0x30
   16d00:	bl	192ac <lchmod@@Base+0x2e20>
   16d04:	str	r6, [r5]
   16d08:	pop	{r4, r5, r6, sl, fp, pc}
   16d0c:	movw	r1, #49656	; 0xc1f8
   16d10:	movt	r1, #2
   16d14:	cmp	r0, #0
   16d18:	movne	r1, r0
   16d1c:	ldr	r0, [r1]
   16d20:	bx	lr
   16d24:	movw	r2, #49656	; 0xc1f8
   16d28:	movt	r2, #2
   16d2c:	cmp	r0, #0
   16d30:	movne	r2, r0
   16d34:	str	r1, [r2]
   16d38:	bx	lr
   16d3c:	movw	r3, #49656	; 0xc1f8
   16d40:	movt	r3, #2
   16d44:	cmp	r0, #0
   16d48:	movne	r3, r0
   16d4c:	ubfx	r0, r1, #5, #3
   16d50:	add	r0, r3, r0, lsl #2
   16d54:	ldr	r3, [r0, #8]
   16d58:	and	r1, r1, #31
   16d5c:	eor	r2, r2, r3, lsr r1
   16d60:	and	r2, r2, #1
   16d64:	eor	r2, r3, r2, lsl r1
   16d68:	str	r2, [r0, #8]
   16d6c:	mov	r0, #1
   16d70:	and	r0, r0, r3, lsr r1
   16d74:	bx	lr
   16d78:	movw	r2, #49656	; 0xc1f8
   16d7c:	movt	r2, #2
   16d80:	cmp	r0, #0
   16d84:	movne	r2, r0
   16d88:	ldr	r0, [r2, #4]
   16d8c:	str	r1, [r2, #4]
   16d90:	bx	lr
   16d94:	movw	r3, #49656	; 0xc1f8
   16d98:	movt	r3, #2
   16d9c:	cmp	r0, #0
   16da0:	movne	r3, r0
   16da4:	mov	r0, #10
   16da8:	str	r0, [r3]
   16dac:	cmp	r1, #0
   16db0:	cmpne	r2, #0
   16db4:	bne	16dc4 <lchmod@@Base+0x938>
   16db8:	push	{fp, lr}
   16dbc:	mov	fp, sp
   16dc0:	bl	11af4 <abort@plt>
   16dc4:	str	r1, [r3, #40]	; 0x28
   16dc8:	str	r2, [r3, #44]	; 0x2c
   16dcc:	bx	lr
   16dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd4:	add	fp, sp, #28
   16dd8:	sub	sp, sp, #20
   16ddc:	mov	r8, r3
   16de0:	mov	r9, r2
   16de4:	mov	sl, r1
   16de8:	mov	r7, r0
   16dec:	ldr	r0, [fp, #8]
   16df0:	movw	r5, #49656	; 0xc1f8
   16df4:	movt	r5, #2
   16df8:	cmp	r0, #0
   16dfc:	movne	r5, r0
   16e00:	bl	119a4 <__errno_location@plt>
   16e04:	mov	r4, r0
   16e08:	ldm	r5, {r0, r1}
   16e0c:	ldr	r2, [r5, #40]	; 0x28
   16e10:	ldr	r3, [r5, #44]	; 0x2c
   16e14:	ldr	r6, [r4]
   16e18:	add	r5, r5, #8
   16e1c:	stm	sp, {r0, r1, r5}
   16e20:	str	r2, [sp, #12]
   16e24:	str	r3, [sp, #16]
   16e28:	mov	r0, r7
   16e2c:	mov	r1, sl
   16e30:	mov	r2, r9
   16e34:	mov	r3, r8
   16e38:	bl	16e48 <lchmod@@Base+0x9bc>
   16e3c:	str	r6, [r4]
   16e40:	sub	sp, fp, #28
   16e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e4c:	add	fp, sp, #28
   16e50:	sub	sp, sp, #156	; 0x9c
   16e54:	mov	r9, r3
   16e58:	str	r2, [fp, #-84]	; 0xffffffac
   16e5c:	mov	r6, r1
   16e60:	mov	r7, r0
   16e64:	ldr	r0, [fp, #12]
   16e68:	and	r1, r0, #4
   16e6c:	str	r1, [sp, #32]
   16e70:	and	r1, r0, #1
   16e74:	str	r1, [sp, #36]	; 0x24
   16e78:	ubfx	sl, r0, #1, #1
   16e7c:	bl	1189c <__ctype_get_mb_cur_max@plt>
   16e80:	str	r0, [sp, #40]	; 0x28
   16e84:	ldr	r0, [fp, #24]
   16e88:	str	r0, [sp, #76]	; 0x4c
   16e8c:	ldr	r0, [fp, #20]
   16e90:	str	r0, [sp, #68]	; 0x44
   16e94:	ldr	r0, [fp, #8]
   16e98:	str	r0, [fp, #-60]	; 0xffffffc4
   16e9c:	mov	r0, #0
   16ea0:	str	r0, [sp, #72]	; 0x48
   16ea4:	mov	r0, #0
   16ea8:	str	r0, [sp, #92]	; 0x5c
   16eac:	mov	r0, #0
   16eb0:	str	r0, [fp, #-72]	; 0xffffffb8
   16eb4:	mov	r0, #0
   16eb8:	mov	r1, #0
   16ebc:	str	r1, [fp, #-56]	; 0xffffffc8
   16ec0:	mov	r1, #0
   16ec4:	str	r1, [sp, #56]	; 0x38
   16ec8:	mov	r5, #1
   16ecc:	str	r7, [sp, #80]	; 0x50
   16ed0:	mov	r4, r6
   16ed4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16ed8:	cmp	r6, #10
   16edc:	bhi	17e44 <lchmod@@Base+0x19b8>
   16ee0:	add	r1, pc, #20
   16ee4:	mov	r8, #0
   16ee8:	mov	r2, #1
   16eec:	mov	r3, #0
   16ef0:	ldr	ip, [fp, #-84]	; 0xffffffac
   16ef4:	mov	lr, r9
   16ef8:	ldr	pc, [r1, r6, lsl #2]
   16efc:	ldrdeq	r6, [r1], -r4
   16f00:	andeq	r7, r1, r4
   16f04:	andeq	r6, r1, r4, asr #31
   16f08:			; <UNDEFINED> instruction: 0x00016fbc
   16f0c:	strdeq	r6, [r1], -r8
   16f10:	andeq	r7, r1, r8, asr r0
   16f14:	andeq	r6, r1, r4, ror #31
   16f18:	strheq	r7, [r1], -r4
   16f1c:	andeq	r6, r1, r8, lsr #30
   16f20:	andeq	r6, r1, r8, lsr #30
   16f24:	andeq	r6, r1, r0, asr pc
   16f28:	movw	r0, #43815	; 0xab27
   16f2c:	movt	r0, #1
   16f30:	mov	r1, r6
   16f34:	bl	18450 <lchmod@@Base+0x1fc4>
   16f38:	str	r0, [sp, #68]	; 0x44
   16f3c:	movw	r0, #43817	; 0xab29
   16f40:	movt	r0, #1
   16f44:	mov	r1, r6
   16f48:	bl	18450 <lchmod@@Base+0x1fc4>
   16f4c:	str	r0, [sp, #76]	; 0x4c
   16f50:	mov	r8, #0
   16f54:	tst	sl, #1
   16f58:	bne	16f90 <lchmod@@Base+0xb04>
   16f5c:	ldr	r0, [sp, #68]	; 0x44
   16f60:	ldrb	r0, [r0]
   16f64:	cmp	r0, #0
   16f68:	beq	16f90 <lchmod@@Base+0xb04>
   16f6c:	ldr	r1, [sp, #68]	; 0x44
   16f70:	add	r1, r1, #1
   16f74:	mov	r8, #0
   16f78:	cmp	r8, r4
   16f7c:	strbcc	r0, [r7, r8]
   16f80:	ldrb	r0, [r1, r8]
   16f84:	add	r8, r8, #1
   16f88:	cmp	r0, #0
   16f8c:	bne	16f78 <lchmod@@Base+0xaec>
   16f90:	ldr	r6, [sp, #76]	; 0x4c
   16f94:	mov	r0, r6
   16f98:	bl	11974 <strlen@plt>
   16f9c:	str	r0, [fp, #-72]	; 0xffffffb8
   16fa0:	str	r6, [sp, #92]	; 0x5c
   16fa4:	mov	r2, #1
   16fa8:	mov	r3, sl
   16fac:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fb0:	mov	lr, r9
   16fb4:	ldr	r6, [fp, #-60]	; 0xffffffc4
   16fb8:	b	170b4 <lchmod@@Base+0xc28>
   16fbc:	mov	r0, #1
   16fc0:	b	17004 <lchmod@@Base+0xb78>
   16fc4:	tst	sl, #1
   16fc8:	bne	17004 <lchmod@@Base+0xb78>
   16fcc:	mov	r2, r0
   16fd0:	b	1702c <lchmod@@Base+0xba0>
   16fd4:	mov	r6, #0
   16fd8:	mov	r8, #0
   16fdc:	mov	r2, r0
   16fe0:	b	170b0 <lchmod@@Base+0xc24>
   16fe4:	mov	r0, #1
   16fe8:	str	r0, [fp, #-72]	; 0xffffffb8
   16fec:	mov	r8, #0
   16ff0:	mov	r6, #5
   16ff4:	b	17070 <lchmod@@Base+0xbe4>
   16ff8:	mov	r2, #1
   16ffc:	tst	sl, #1
   17000:	beq	1702c <lchmod@@Base+0xba0>
   17004:	mov	r1, #1
   17008:	str	r1, [fp, #-72]	; 0xffffffb8
   1700c:	mov	r8, #0
   17010:	mov	r6, #2
   17014:	movw	r1, #43817	; 0xab29
   17018:	movt	r1, #1
   1701c:	str	r1, [sp, #92]	; 0x5c
   17020:	mov	r2, r0
   17024:	mov	r3, #1
   17028:	b	170b4 <lchmod@@Base+0xc28>
   1702c:	mov	r8, #1
   17030:	mov	r6, #2
   17034:	cmp	r4, #0
   17038:	movne	r0, #39	; 0x27
   1703c:	strbne	r0, [r7]
   17040:	movw	r0, #43817	; 0xab29
   17044:	movt	r0, #1
   17048:	str	r0, [sp, #92]	; 0x5c
   1704c:	mov	r0, #1
   17050:	str	r0, [fp, #-72]	; 0xffffffb8
   17054:	b	170b0 <lchmod@@Base+0xc24>
   17058:	mov	r6, #5
   1705c:	tst	sl, #1
   17060:	beq	17088 <lchmod@@Base+0xbfc>
   17064:	mov	r0, #1
   17068:	str	r0, [fp, #-72]	; 0xffffffb8
   1706c:	mov	r8, #0
   17070:	movw	r0, #43813	; 0xab25
   17074:	movt	r0, #1
   17078:	str	r0, [sp, #92]	; 0x5c
   1707c:	mov	r2, #1
   17080:	mov	r3, #1
   17084:	b	170b4 <lchmod@@Base+0xc28>
   17088:	cmp	r4, #0
   1708c:	movne	r0, #34	; 0x22
   17090:	strbne	r0, [r7]
   17094:	mov	r8, #1
   17098:	movw	r0, #43813	; 0xab25
   1709c:	movt	r0, #1
   170a0:	str	r0, [sp, #92]	; 0x5c
   170a4:	mov	r0, #1
   170a8:	str	r0, [fp, #-72]	; 0xffffffb8
   170ac:	mov	r2, #1
   170b0:	mov	r3, #0
   170b4:	ldr	r0, [fp, #16]
   170b8:	cmp	r0, #0
   170bc:	movwne	r0, #1
   170c0:	and	r0, r0, r3
   170c4:	str	r0, [fp, #-88]	; 0xffffffa8
   170c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   170cc:	cmp	r0, #0
   170d0:	movwne	r0, #1
   170d4:	and	r1, r0, r3
   170d8:	and	r1, r2, r1
   170dc:	str	r1, [sp, #48]	; 0x30
   170e0:	str	r6, [fp, #-60]	; 0xffffffc4
   170e4:	subs	r6, r6, #2
   170e8:	clz	r1, r6
   170ec:	lsr	r1, r1, #5
   170f0:	and	r1, r1, r3
   170f4:	str	r1, [sp, #60]	; 0x3c
   170f8:	str	r6, [fp, #-80]	; 0xffffffb0
   170fc:	mov	r1, r6
   17100:	movwne	r1, #1
   17104:	str	r3, [fp, #-76]	; 0xffffffb4
   17108:	eor	r3, r3, #1
   1710c:	str	r3, [sp, #88]	; 0x58
   17110:	orr	r3, r1, r3
   17114:	str	r3, [sp, #64]	; 0x40
   17118:	and	r1, r1, r2
   1711c:	str	r1, [fp, #-68]	; 0xffffffbc
   17120:	and	r0, r0, r1
   17124:	str	r0, [fp, #-64]	; 0xffffffc0
   17128:	str	r2, [sp, #84]	; 0x54
   1712c:	eor	r0, r2, #1
   17130:	str	r0, [sp, #52]	; 0x34
   17134:	mov	r6, #0
   17138:	cmn	lr, #1
   1713c:	beq	1714c <lchmod@@Base+0xcc0>
   17140:	cmp	r6, lr
   17144:	bne	17158 <lchmod@@Base+0xccc>
   17148:	b	17cc4 <lchmod@@Base+0x1838>
   1714c:	ldrb	r0, [ip, r6]
   17150:	cmp	r0, #0
   17154:	beq	17cc4 <lchmod@@Base+0x1838>
   17158:	str	r5, [fp, #-48]	; 0xffffffd0
   1715c:	mov	sl, #0
   17160:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17164:	cmp	r0, #0
   17168:	beq	1719c <lchmod@@Base+0xd10>
   1716c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17170:	add	r5, r6, r0
   17174:	cmp	r0, #2
   17178:	bcc	17194 <lchmod@@Base+0xd08>
   1717c:	cmn	lr, #1
   17180:	bne	17194 <lchmod@@Base+0xd08>
   17184:	mov	r0, ip
   17188:	bl	11974 <strlen@plt>
   1718c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17190:	mov	lr, r0
   17194:	cmp	r5, lr
   17198:	bls	171a8 <lchmod@@Base+0xd1c>
   1719c:	mov	r0, #0
   171a0:	str	r0, [fp, #-52]	; 0xffffffcc
   171a4:	b	171f4 <lchmod@@Base+0xd68>
   171a8:	mov	r5, r4
   171ac:	mov	r4, lr
   171b0:	add	r0, ip, r6
   171b4:	ldr	r1, [sp, #92]	; 0x5c
   171b8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   171bc:	bl	11800 <memcmp@plt>
   171c0:	cmp	r0, #0
   171c4:	mov	r1, r0
   171c8:	movwne	r1, #1
   171cc:	ldr	r2, [sp, #88]	; 0x58
   171d0:	orr	r1, r1, r2
   171d4:	tst	r1, #1
   171d8:	beq	17d88 <lchmod@@Base+0x18fc>
   171dc:	clz	r0, r0
   171e0:	lsr	r0, r0, #5
   171e4:	str	r0, [fp, #-52]	; 0xffffffcc
   171e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   171ec:	mov	lr, r4
   171f0:	mov	r4, r5
   171f4:	ldrb	r5, [ip, r6]
   171f8:	cmp	r5, #126	; 0x7e
   171fc:	bhi	175b8 <lchmod@@Base+0x112c>
   17200:	mov	r9, #1
   17204:	mov	r2, #110	; 0x6e
   17208:	mov	r0, #97	; 0x61
   1720c:	add	r3, pc, #4
   17210:	mov	r1, #0
   17214:	ldr	pc, [r3, r5, lsl #2]
   17218:			; <UNDEFINED> instruction: 0x000174b0
   1721c:			; <UNDEFINED> instruction: 0x000175b8
   17220:			; <UNDEFINED> instruction: 0x000175b8
   17224:			; <UNDEFINED> instruction: 0x000175b8
   17228:			; <UNDEFINED> instruction: 0x000175b8
   1722c:			; <UNDEFINED> instruction: 0x000175b8
   17230:			; <UNDEFINED> instruction: 0x000175b8
   17234:	andeq	r7, r1, ip, ror r6
   17238:	muleq	r1, r0, r4
   1723c:	andeq	r7, r1, r8, lsl #9
   17240:	muleq	r1, ip, r4
   17244:	andeq	r7, r1, r0, lsr #10
   17248:	andeq	r7, r1, r0, lsl #9
   1724c:	muleq	r1, r8, r4
   17250:			; <UNDEFINED> instruction: 0x000175b8
   17254:			; <UNDEFINED> instruction: 0x000175b8
   17258:			; <UNDEFINED> instruction: 0x000175b8
   1725c:			; <UNDEFINED> instruction: 0x000175b8
   17260:			; <UNDEFINED> instruction: 0x000175b8
   17264:			; <UNDEFINED> instruction: 0x000175b8
   17268:			; <UNDEFINED> instruction: 0x000175b8
   1726c:			; <UNDEFINED> instruction: 0x000175b8
   17270:			; <UNDEFINED> instruction: 0x000175b8
   17274:			; <UNDEFINED> instruction: 0x000175b8
   17278:			; <UNDEFINED> instruction: 0x000175b8
   1727c:			; <UNDEFINED> instruction: 0x000175b8
   17280:			; <UNDEFINED> instruction: 0x000175b8
   17284:			; <UNDEFINED> instruction: 0x000175b8
   17288:			; <UNDEFINED> instruction: 0x000175b8
   1728c:			; <UNDEFINED> instruction: 0x000175b8
   17290:			; <UNDEFINED> instruction: 0x000175b8
   17294:			; <UNDEFINED> instruction: 0x000175b8
   17298:	andeq	r7, r1, ip, lsr #12
   1729c:	andeq	r7, r1, r0, lsr r6
   172a0:	andeq	r7, r1, r0, lsr r6
   172a4:	andeq	r7, r1, r8, lsr #8
   172a8:	andeq	r7, r1, r0, lsr r6
   172ac:	andeq	r7, r1, r4, lsl r4
   172b0:	andeq	r7, r1, r0, lsr r6
   172b4:	andeq	r7, r1, r8, lsr #10
   172b8:	andeq	r7, r1, r0, lsr r6
   172bc:	andeq	r7, r1, r0, lsr r6
   172c0:	andeq	r7, r1, r0, lsr r6
   172c4:	andeq	r7, r1, r4, lsl r4
   172c8:	andeq	r7, r1, r4, lsl r4
   172cc:	andeq	r7, r1, r4, lsl r4
   172d0:	andeq	r7, r1, r4, lsl r4
   172d4:	andeq	r7, r1, r4, lsl r4
   172d8:	andeq	r7, r1, r4, lsl r4
   172dc:	andeq	r7, r1, r4, lsl r4
   172e0:	andeq	r7, r1, r4, lsl r4
   172e4:	andeq	r7, r1, r4, lsl r4
   172e8:	andeq	r7, r1, r4, lsl r4
   172ec:	andeq	r7, r1, r4, lsl r4
   172f0:	andeq	r7, r1, r4, lsl r4
   172f4:	andeq	r7, r1, r4, lsl r4
   172f8:	andeq	r7, r1, r4, lsl r4
   172fc:	andeq	r7, r1, r4, lsl r4
   17300:	andeq	r7, r1, r4, lsl r4
   17304:	andeq	r7, r1, r0, lsr r6
   17308:	andeq	r7, r1, r0, lsr r6
   1730c:	andeq	r7, r1, r0, lsr r6
   17310:	andeq	r7, r1, r0, lsr r6
   17314:	strdeq	r7, [r1], -r0
   17318:			; <UNDEFINED> instruction: 0x000175b8
   1731c:	andeq	r7, r1, r4, lsl r4
   17320:	andeq	r7, r1, r4, lsl r4
   17324:	andeq	r7, r1, r4, lsl r4
   17328:	andeq	r7, r1, r4, lsl r4
   1732c:	andeq	r7, r1, r4, lsl r4
   17330:	andeq	r7, r1, r4, lsl r4
   17334:	andeq	r7, r1, r4, lsl r4
   17338:	andeq	r7, r1, r4, lsl r4
   1733c:	andeq	r7, r1, r4, lsl r4
   17340:	andeq	r7, r1, r4, lsl r4
   17344:	andeq	r7, r1, r4, lsl r4
   17348:	andeq	r7, r1, r4, lsl r4
   1734c:	andeq	r7, r1, r4, lsl r4
   17350:	andeq	r7, r1, r4, lsl r4
   17354:	andeq	r7, r1, r4, lsl r4
   17358:	andeq	r7, r1, r4, lsl r4
   1735c:	andeq	r7, r1, r4, lsl r4
   17360:	andeq	r7, r1, r4, lsl r4
   17364:	andeq	r7, r1, r4, lsl r4
   17368:	andeq	r7, r1, r4, lsl r4
   1736c:	andeq	r7, r1, r4, lsl r4
   17370:	andeq	r7, r1, r4, lsl r4
   17374:	andeq	r7, r1, r4, lsl r4
   17378:	andeq	r7, r1, r4, lsl r4
   1737c:	andeq	r7, r1, r4, lsl r4
   17380:	andeq	r7, r1, r4, lsl r4
   17384:	andeq	r7, r1, r0, lsr r6
   17388:	andeq	r7, r1, ip, asr r4
   1738c:	andeq	r7, r1, r4, lsl r4
   17390:	andeq	r7, r1, r0, lsr r6
   17394:	andeq	r7, r1, r4, lsl r4
   17398:	andeq	r7, r1, r0, lsr r6
   1739c:	andeq	r7, r1, r4, lsl r4
   173a0:	andeq	r7, r1, r4, lsl r4
   173a4:	andeq	r7, r1, r4, lsl r4
   173a8:	andeq	r7, r1, r4, lsl r4
   173ac:	andeq	r7, r1, r4, lsl r4
   173b0:	andeq	r7, r1, r4, lsl r4
   173b4:	andeq	r7, r1, r4, lsl r4
   173b8:	andeq	r7, r1, r4, lsl r4
   173bc:	andeq	r7, r1, r4, lsl r4
   173c0:	andeq	r7, r1, r4, lsl r4
   173c4:	andeq	r7, r1, r4, lsl r4
   173c8:	andeq	r7, r1, r4, lsl r4
   173cc:	andeq	r7, r1, r4, lsl r4
   173d0:	andeq	r7, r1, r4, lsl r4
   173d4:	andeq	r7, r1, r4, lsl r4
   173d8:	andeq	r7, r1, r4, lsl r4
   173dc:	andeq	r7, r1, r4, lsl r4
   173e0:	andeq	r7, r1, r4, lsl r4
   173e4:	andeq	r7, r1, r4, lsl r4
   173e8:	andeq	r7, r1, r4, lsl r4
   173ec:	andeq	r7, r1, r4, lsl r4
   173f0:	andeq	r7, r1, r4, lsl r4
   173f4:	andeq	r7, r1, r4, lsl r4
   173f8:	andeq	r7, r1, r4, lsl r4
   173fc:	andeq	r7, r1, r4, lsl r4
   17400:	andeq	r7, r1, r4, lsl r4
   17404:	andeq	r7, r1, ip, lsr r4
   17408:	andeq	r7, r1, r0, lsr r6
   1740c:	andeq	r7, r1, ip, lsr r4
   17410:	andeq	r7, r1, r8, lsr #8
   17414:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17418:	cmp	r0, #0
   1741c:	beq	17690 <lchmod@@Base+0x1204>
   17420:	ldr	r0, [fp, #16]
   17424:	b	17694 <lchmod@@Base+0x1208>
   17428:	mov	r9, #0
   1742c:	cmp	r6, #0
   17430:	beq	1762c <lchmod@@Base+0x11a0>
   17434:	mov	sl, #0
   17438:	b	17414 <lchmod@@Base+0xf88>
   1743c:	mov	r9, #0
   17440:	cmn	lr, #1
   17444:	beq	17610 <lchmod@@Base+0x1184>
   17448:	cmp	r6, #0
   1744c:	bne	17434 <lchmod@@Base+0xfa8>
   17450:	cmp	lr, #1
   17454:	beq	1762c <lchmod@@Base+0x11a0>
   17458:	b	17434 <lchmod@@Base+0xfa8>
   1745c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17460:	cmp	r0, #2
   17464:	bne	17658 <lchmod@@Base+0x11cc>
   17468:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1746c:	tst	r0, #1
   17470:	bne	17da0 <lchmod@@Base+0x1914>
   17474:	mov	sl, #0
   17478:	mov	r0, #92	; 0x5c
   1747c:	b	1766c <lchmod@@Base+0x11e0>
   17480:	mov	r0, #102	; 0x66
   17484:	b	1767c <lchmod@@Base+0x11f0>
   17488:	mov	r2, #116	; 0x74
   1748c:	b	1749c <lchmod@@Base+0x1010>
   17490:	mov	r0, #98	; 0x62
   17494:	b	1767c <lchmod@@Base+0x11f0>
   17498:	mov	r2, #114	; 0x72
   1749c:	ldr	r0, [sp, #64]	; 0x40
   174a0:	tst	r0, #1
   174a4:	mov	r0, r2
   174a8:	bne	1767c <lchmod@@Base+0x11f0>
   174ac:	b	17da0 <lchmod@@Base+0x1914>
   174b0:	ldr	r0, [sp, #84]	; 0x54
   174b4:	tst	r0, #1
   174b8:	beq	1776c <lchmod@@Base+0x12e0>
   174bc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   174c0:	tst	r0, #1
   174c4:	bne	17da0 <lchmod@@Base+0x1914>
   174c8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   174cc:	cmp	r0, #2
   174d0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   174d4:	movwne	r0, #1
   174d8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   174dc:	orr	r0, r0, r2
   174e0:	tst	r0, #1
   174e4:	beq	17b60 <lchmod@@Base+0x16d4>
   174e8:	mov	r0, r8
   174ec:	b	17b94 <lchmod@@Base+0x1708>
   174f0:	mov	sl, #0
   174f4:	mov	r5, #63	; 0x3f
   174f8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   174fc:	cmp	r0, #5
   17500:	beq	17920 <lchmod@@Base+0x1494>
   17504:	cmp	r0, #2
   17508:	bne	179c0 <lchmod@@Base+0x1534>
   1750c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17510:	tst	r0, #1
   17514:	mov	r9, #0
   17518:	beq	17414 <lchmod@@Base+0xf88>
   1751c:	b	17da0 <lchmod@@Base+0x1914>
   17520:	mov	r0, #118	; 0x76
   17524:	b	1767c <lchmod@@Base+0x11f0>
   17528:	mov	r5, #39	; 0x27
   1752c:	mov	r0, #1
   17530:	str	r0, [sp, #56]	; 0x38
   17534:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17538:	cmp	r0, #2
   1753c:	bne	1778c <lchmod@@Base+0x1300>
   17540:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17544:	tst	r0, #1
   17548:	bne	17da0 <lchmod@@Base+0x1914>
   1754c:	ldr	r2, [sp, #72]	; 0x48
   17550:	cmp	r2, #0
   17554:	mov	r0, r2
   17558:	movwne	r0, #1
   1755c:	clz	r1, r4
   17560:	lsr	r1, r1, #5
   17564:	orrs	r0, r0, r1
   17568:	moveq	r2, r4
   1756c:	str	r2, [sp, #72]	; 0x48
   17570:	moveq	r4, r0
   17574:	cmp	r8, r4
   17578:	movcc	r0, #39	; 0x27
   1757c:	strbcc	r0, [r7, r8]
   17580:	add	r0, r8, #1
   17584:	cmp	r0, r4
   17588:	movcc	r1, #92	; 0x5c
   1758c:	strbcc	r1, [r7, r0]
   17590:	add	r0, r8, #2
   17594:	cmp	r0, r4
   17598:	movcc	r1, #39	; 0x27
   1759c:	strbcc	r1, [r7, r0]
   175a0:	add	r8, r8, #3
   175a4:	mov	r0, #0
   175a8:	str	r0, [fp, #-56]	; 0xffffffc8
   175ac:	mov	sl, #0
   175b0:	mov	r9, #1
   175b4:	b	17414 <lchmod@@Base+0xf88>
   175b8:	str	r4, [sp, #24]
   175bc:	ldr	r0, [sp, #40]	; 0x28
   175c0:	cmp	r0, #1
   175c4:	bne	17794 <lchmod@@Base+0x1308>
   175c8:	str	lr, [sp, #28]
   175cc:	bl	11944 <__ctype_b_loc@plt>
   175d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   175d4:	ldr	r0, [r0]
   175d8:	add	r0, r0, r5, lsl #1
   175dc:	ldrb	r0, [r0, #1]
   175e0:	ubfx	r9, r0, #6, #1
   175e4:	mov	r1, #1
   175e8:	ldr	r4, [sp, #24]
   175ec:	ldr	r0, [sp, #52]	; 0x34
   175f0:	orr	r0, r9, r0
   175f4:	mov	r2, r1
   175f8:	cmp	r1, #1
   175fc:	bhi	179c8 <lchmod@@Base+0x153c>
   17600:	tst	r0, #1
   17604:	beq	179c8 <lchmod@@Base+0x153c>
   17608:	ldr	lr, [sp, #28]
   1760c:	b	17414 <lchmod@@Base+0xf88>
   17610:	cmp	r6, #0
   17614:	ldrbeq	r0, [ip, #1]
   17618:	cmpeq	r0, #0
   1761c:	beq	1762c <lchmod@@Base+0x11a0>
   17620:	mvn	lr, #0
   17624:	mov	sl, #0
   17628:	b	17414 <lchmod@@Base+0xf88>
   1762c:	mov	r1, #1
   17630:	ldr	r0, [fp, #-60]	; 0xffffffc4
   17634:	cmp	r0, #2
   17638:	bne	17650 <lchmod@@Base+0x11c4>
   1763c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17640:	tst	r0, #1
   17644:	mov	r9, r1
   17648:	beq	17414 <lchmod@@Base+0xf88>
   1764c:	b	17da0 <lchmod@@Base+0x1914>
   17650:	mov	r9, r1
   17654:	b	17414 <lchmod@@Base+0xf88>
   17658:	mov	sl, #0
   1765c:	mov	r0, #92	; 0x5c
   17660:	ldr	r1, [sp, #48]	; 0x30
   17664:	cmp	r1, #0
   17668:	beq	1767c <lchmod@@Base+0x11f0>
   1766c:	mov	r9, #0
   17670:	cmp	sl, #0
   17674:	beq	17c2c <lchmod@@Base+0x17a0>
   17678:	b	17c68 <lchmod@@Base+0x17dc>
   1767c:	mov	r9, #0
   17680:	ldr	r1, [sp, #84]	; 0x54
   17684:	tst	r1, #1
   17688:	mov	sl, #0
   1768c:	bne	176cc <lchmod@@Base+0x1240>
   17690:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17694:	cmp	r0, #0
   17698:	mov	r0, r5
   1769c:	beq	176c0 <lchmod@@Base+0x1234>
   176a0:	ubfx	r0, r5, #5, #3
   176a4:	ldr	r1, [fp, #16]
   176a8:	ldr	r0, [r1, r0, lsl #2]
   176ac:	and	r1, r5, #31
   176b0:	mov	r2, #1
   176b4:	tst	r0, r2, lsl r1
   176b8:	mov	r0, r5
   176bc:	bne	176cc <lchmod@@Base+0x1240>
   176c0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   176c4:	cmp	r1, #0
   176c8:	beq	17c24 <lchmod@@Base+0x1798>
   176cc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   176d0:	tst	r1, #1
   176d4:	bne	17da0 <lchmod@@Base+0x1914>
   176d8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   176dc:	cmp	r1, #2
   176e0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   176e4:	movwne	r1, #1
   176e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   176ec:	orr	r1, r1, r2
   176f0:	tst	r1, #1
   176f4:	beq	17700 <lchmod@@Base+0x1274>
   176f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   176fc:	b	1773c <lchmod@@Base+0x12b0>
   17700:	cmp	r8, r4
   17704:	movcc	r1, #39	; 0x27
   17708:	strbcc	r1, [r7, r8]
   1770c:	add	r1, r8, #1
   17710:	cmp	r1, r4
   17714:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17718:	movcc	r2, #36	; 0x24
   1771c:	strbcc	r2, [r7, r1]
   17720:	add	r1, r8, #2
   17724:	cmp	r1, r4
   17728:	movcc	r2, #39	; 0x27
   1772c:	strbcc	r2, [r7, r1]
   17730:	add	r8, r8, #3
   17734:	mov	r1, #1
   17738:	str	r1, [fp, #-56]	; 0xffffffc8
   1773c:	cmp	r8, r4
   17740:	movcc	r1, #92	; 0x5c
   17744:	strbcc	r1, [r7, r8]
   17748:	add	r8, r8, #1
   1774c:	cmp	r8, r4
   17750:	strbcc	r0, [r7, r8]
   17754:	and	r5, r5, r9
   17758:	add	r8, r8, #1
   1775c:	add	r6, r6, #1
   17760:	cmn	lr, #1
   17764:	bne	17140 <lchmod@@Base+0xcb4>
   17768:	b	1714c <lchmod@@Base+0xcc0>
   1776c:	mov	r9, #0
   17770:	ldr	r0, [sp, #36]	; 0x24
   17774:	cmp	r0, #0
   17778:	mov	sl, #0
   1777c:	mov	r5, #0
   17780:	beq	17690 <lchmod@@Base+0x1204>
   17784:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17788:	b	1775c <lchmod@@Base+0x12d0>
   1778c:	mov	r9, #1
   17790:	b	17414 <lchmod@@Base+0xf88>
   17794:	mov	r0, #0
   17798:	str	r0, [fp, #-36]	; 0xffffffdc
   1779c:	str	r0, [fp, #-40]	; 0xffffffd8
   177a0:	cmn	lr, #1
   177a4:	bne	177b8 <lchmod@@Base+0x132c>
   177a8:	mov	r0, ip
   177ac:	bl	11974 <strlen@plt>
   177b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   177b4:	mov	lr, r0
   177b8:	add	r0, ip, r6
   177bc:	str	r0, [sp, #20]
   177c0:	mov	r9, #1
   177c4:	mov	r7, #0
   177c8:	sub	r4, fp, #40	; 0x28
   177cc:	str	lr, [sp, #28]
   177d0:	str	r7, [sp, #44]	; 0x2c
   177d4:	add	r7, r7, r6
   177d8:	add	r1, ip, r7
   177dc:	sub	r2, lr, r7
   177e0:	sub	r0, fp, #44	; 0x2c
   177e4:	mov	r3, r4
   177e8:	bl	1a03c <lchmod@@Base+0x3bb0>
   177ec:	cmp	r0, #0
   177f0:	beq	17cb0 <lchmod@@Base+0x1824>
   177f4:	cmn	r0, #1
   177f8:	beq	17c70 <lchmod@@Base+0x17e4>
   177fc:	cmn	r0, #2
   17800:	ldr	lr, [sp, #28]
   17804:	beq	17c78 <lchmod@@Base+0x17ec>
   17808:	cmp	r0, #2
   1780c:	mov	r1, #0
   17810:	movwcc	r1, #1
   17814:	ldr	r2, [sp, #60]	; 0x3c
   17818:	eor	r2, r2, #1
   1781c:	orrs	r1, r2, r1
   17820:	ldr	r4, [sp, #24]
   17824:	bne	178e4 <lchmod@@Base+0x1458>
   17828:	ldr	r1, [sp, #44]	; 0x2c
   1782c:	ldr	r2, [sp, #20]
   17830:	add	r1, r2, r1
   17834:	mov	r2, #1
   17838:	ldrb	r3, [r1, r2]
   1783c:	sub	r3, r3, #91	; 0x5b
   17840:	cmp	r3, #33	; 0x21
   17844:	bhi	178d8 <lchmod@@Base+0x144c>
   17848:	add	r7, pc, #0
   1784c:	ldr	pc, [r7, r3, lsl #2]
   17850:	muleq	r1, r8, sp
   17854:	muleq	r1, r8, sp
   17858:	ldrdeq	r7, [r1], -r8
   1785c:	muleq	r1, r8, sp
   17860:	ldrdeq	r7, [r1], -r8
   17864:	muleq	r1, r8, sp
   17868:	ldrdeq	r7, [r1], -r8
   1786c:	ldrdeq	r7, [r1], -r8
   17870:	ldrdeq	r7, [r1], -r8
   17874:	ldrdeq	r7, [r1], -r8
   17878:	ldrdeq	r7, [r1], -r8
   1787c:	ldrdeq	r7, [r1], -r8
   17880:	ldrdeq	r7, [r1], -r8
   17884:	ldrdeq	r7, [r1], -r8
   17888:	ldrdeq	r7, [r1], -r8
   1788c:	ldrdeq	r7, [r1], -r8
   17890:	ldrdeq	r7, [r1], -r8
   17894:	ldrdeq	r7, [r1], -r8
   17898:	ldrdeq	r7, [r1], -r8
   1789c:	ldrdeq	r7, [r1], -r8
   178a0:	ldrdeq	r7, [r1], -r8
   178a4:	ldrdeq	r7, [r1], -r8
   178a8:	ldrdeq	r7, [r1], -r8
   178ac:	ldrdeq	r7, [r1], -r8
   178b0:	ldrdeq	r7, [r1], -r8
   178b4:	ldrdeq	r7, [r1], -r8
   178b8:	ldrdeq	r7, [r1], -r8
   178bc:	ldrdeq	r7, [r1], -r8
   178c0:	ldrdeq	r7, [r1], -r8
   178c4:	ldrdeq	r7, [r1], -r8
   178c8:	ldrdeq	r7, [r1], -r8
   178cc:	ldrdeq	r7, [r1], -r8
   178d0:	ldrdeq	r7, [r1], -r8
   178d4:	muleq	r1, r8, sp
   178d8:	add	r2, r2, #1
   178dc:	cmp	r2, r0
   178e0:	bcc	17838 <lchmod@@Base+0x13ac>
   178e4:	ldr	r7, [sp, #44]	; 0x2c
   178e8:	add	r7, r0, r7
   178ec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   178f0:	bl	11860 <iswprint@plt>
   178f4:	cmp	r0, #0
   178f8:	movwne	r0, #1
   178fc:	and	r9, r9, r0
   17900:	sub	r4, fp, #40	; 0x28
   17904:	mov	r0, r4
   17908:	bl	117e8 <mbsinit@plt>
   1790c:	ldr	lr, [sp, #28]
   17910:	cmp	r0, #0
   17914:	ldr	ip, [fp, #-84]	; 0xffffffac
   17918:	beq	177d0 <lchmod@@Base+0x1344>
   1791c:	b	17cb8 <lchmod@@Base+0x182c>
   17920:	ldr	r0, [sp, #32]
   17924:	cmp	r0, #0
   17928:	beq	179c0 <lchmod@@Base+0x1534>
   1792c:	add	r0, r6, #2
   17930:	cmp	r0, lr
   17934:	bcs	179c0 <lchmod@@Base+0x1534>
   17938:	add	r1, ip, r6
   1793c:	ldrb	r1, [r1, #1]
   17940:	cmp	r1, #63	; 0x3f
   17944:	bne	179c0 <lchmod@@Base+0x1534>
   17948:	ldrb	r9, [ip, r0]
   1794c:	sub	r2, r9, #33	; 0x21
   17950:	cmp	r2, #29
   17954:	bhi	179c0 <lchmod@@Base+0x1534>
   17958:	mov	r3, #1
   1795c:	movw	r1, #20929	; 0x51c1
   17960:	movt	r1, #14336	; 0x3800
   17964:	tst	r1, r3, lsl r2
   17968:	beq	179c0 <lchmod@@Base+0x1534>
   1796c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   17970:	tst	r1, #1
   17974:	bne	17da0 <lchmod@@Base+0x1914>
   17978:	cmp	r8, r4
   1797c:	movcc	r1, #63	; 0x3f
   17980:	strbcc	r1, [r7, r8]
   17984:	add	r2, r8, #1
   17988:	cmp	r2, r4
   1798c:	movcc	r1, #34	; 0x22
   17990:	strbcc	r1, [r7, r2]
   17994:	add	r2, r8, #2
   17998:	cmp	r2, r4
   1799c:	movcc	r1, #34	; 0x22
   179a0:	strbcc	r1, [r7, r2]
   179a4:	add	r2, r8, #3
   179a8:	cmp	r2, r4
   179ac:	movcc	r1, #63	; 0x3f
   179b0:	strbcc	r1, [r7, r2]
   179b4:	add	r8, r8, #4
   179b8:	mov	r6, r0
   179bc:	mov	r5, r9
   179c0:	mov	r9, #0
   179c4:	b	17414 <lchmod@@Base+0xf88>
   179c8:	add	r1, r2, r6
   179cc:	str	r1, [sp, #44]	; 0x2c
   179d0:	add	r1, r6, #1
   179d4:	mov	r3, #0
   179d8:	ldr	lr, [sp, #28]
   179dc:	ldr	r6, [fp, #-60]	; 0xffffffc4
   179e0:	tst	r0, #1
   179e4:	bne	17ad8 <lchmod@@Base+0x164c>
   179e8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   179ec:	tst	r2, #1
   179f0:	bne	17da0 <lchmod@@Base+0x1914>
   179f4:	cmp	r6, #2
   179f8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   179fc:	movwne	r3, #1
   17a00:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17a04:	orr	r3, r3, r2
   17a08:	tst	r3, #1
   17a0c:	bne	17a48 <lchmod@@Base+0x15bc>
   17a10:	cmp	r8, r4
   17a14:	movcc	r2, #39	; 0x27
   17a18:	strbcc	r2, [r7, r8]
   17a1c:	add	r3, r8, #1
   17a20:	cmp	r3, r4
   17a24:	movcc	r2, #36	; 0x24
   17a28:	strbcc	r2, [r7, r3]
   17a2c:	add	r3, r8, #2
   17a30:	cmp	r3, r4
   17a34:	movcc	r2, #39	; 0x27
   17a38:	strbcc	r2, [r7, r3]
   17a3c:	add	r8, r8, #3
   17a40:	mov	r2, #1
   17a44:	str	r2, [fp, #-56]	; 0xffffffc8
   17a48:	cmp	r8, r4
   17a4c:	movcc	r2, #92	; 0x5c
   17a50:	strbcc	r2, [r7, r8]
   17a54:	add	r3, r8, #1
   17a58:	cmp	r3, r4
   17a5c:	bcs	17a7c <lchmod@@Base+0x15f0>
   17a60:	and	r7, r5, #192	; 0xc0
   17a64:	mov	r2, #48	; 0x30
   17a68:	orr	r7, r2, r7, lsr #6
   17a6c:	ldr	r6, [sp, #80]	; 0x50
   17a70:	strb	r7, [r6, r3]
   17a74:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17a78:	ldr	r7, [sp, #80]	; 0x50
   17a7c:	add	r3, r8, #2
   17a80:	cmp	r3, r4
   17a84:	bcs	17aa4 <lchmod@@Base+0x1618>
   17a88:	lsr	r7, r5, #3
   17a8c:	mov	r2, #6
   17a90:	bfi	r7, r2, #3, #29
   17a94:	ldr	r6, [sp, #80]	; 0x50
   17a98:	strb	r7, [r6, r3]
   17a9c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17aa0:	ldr	r7, [sp, #80]	; 0x50
   17aa4:	mov	r2, #6
   17aa8:	bfi	r5, r2, #3, #29
   17aac:	add	r8, r8, #3
   17ab0:	mov	r3, #1
   17ab4:	b	17afc <lchmod@@Base+0x1670>
   17ab8:	ldr	r7, [sp, #80]	; 0x50
   17abc:	cmp	r8, r4
   17ac0:	strbcc	r5, [r7, r8]
   17ac4:	ldrb	r5, [ip, r1]
   17ac8:	add	r1, r1, #1
   17acc:	add	r8, r8, #1
   17ad0:	tst	r0, #1
   17ad4:	beq	179e8 <lchmod@@Base+0x155c>
   17ad8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   17adc:	tst	r2, #1
   17ae0:	beq	17af4 <lchmod@@Base+0x1668>
   17ae4:	cmp	r8, r4
   17ae8:	movcc	r2, #92	; 0x5c
   17aec:	strbcc	r2, [r7, r8]
   17af0:	add	r8, r8, #1
   17af4:	mov	r2, #0
   17af8:	str	r2, [fp, #-52]	; 0xffffffcc
   17afc:	and	sl, r3, #1
   17b00:	ldr	r2, [sp, #44]	; 0x2c
   17b04:	cmp	r2, r1
   17b08:	bls	17c14 <lchmod@@Base+0x1788>
   17b0c:	cmp	sl, #0
   17b10:	movwne	sl, #1
   17b14:	ldr	r2, [fp, #-56]	; 0xffffffc8
   17b18:	mvn	r7, r2
   17b1c:	orr	r7, r7, sl
   17b20:	tst	r7, #1
   17b24:	bne	17ab8 <lchmod@@Base+0x162c>
   17b28:	cmp	r8, r4
   17b2c:	ldrcc	r7, [sp, #80]	; 0x50
   17b30:	movcc	r2, #39	; 0x27
   17b34:	strbcc	r2, [r7, r8]
   17b38:	add	r7, r8, #1
   17b3c:	cmp	r7, r4
   17b40:	ldrcc	r6, [sp, #80]	; 0x50
   17b44:	movcc	r2, #39	; 0x27
   17b48:	strbcc	r2, [r6, r7]
   17b4c:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   17b50:	add	r8, r8, #2
   17b54:	mov	r2, #0
   17b58:	str	r2, [fp, #-56]	; 0xffffffc8
   17b5c:	b	17ab8 <lchmod@@Base+0x162c>
   17b60:	cmp	r8, r4
   17b64:	movcc	r0, #39	; 0x27
   17b68:	strbcc	r0, [r7, r8]
   17b6c:	add	r0, r8, #1
   17b70:	cmp	r0, r4
   17b74:	movcc	r1, #36	; 0x24
   17b78:	strbcc	r1, [r7, r0]
   17b7c:	add	r0, r8, #2
   17b80:	cmp	r0, r4
   17b84:	movcc	r1, #39	; 0x27
   17b88:	strbcc	r1, [r7, r0]
   17b8c:	add	r0, r8, #3
   17b90:	mov	r2, #1
   17b94:	cmp	r0, r4
   17b98:	movcc	r1, #92	; 0x5c
   17b9c:	strbcc	r1, [r7, r0]
   17ba0:	str	r2, [fp, #-56]	; 0xffffffc8
   17ba4:	add	r8, r0, #1
   17ba8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17bac:	cmp	r1, #2
   17bb0:	beq	17c04 <lchmod@@Base+0x1778>
   17bb4:	add	r1, r6, #1
   17bb8:	mov	r9, #0
   17bbc:	mov	sl, #1
   17bc0:	mov	r5, #48	; 0x30
   17bc4:	cmp	r1, lr
   17bc8:	bcs	17414 <lchmod@@Base+0xf88>
   17bcc:	ldrb	r1, [ip, r1]
   17bd0:	sub	r1, r1, #48	; 0x30
   17bd4:	uxtb	r1, r1
   17bd8:	cmp	r1, #9
   17bdc:	bhi	17414 <lchmod@@Base+0xf88>
   17be0:	cmp	r8, r4
   17be4:	movcc	r1, #48	; 0x30
   17be8:	strbcc	r1, [r7, r8]
   17bec:	add	r1, r0, #2
   17bf0:	cmp	r1, r4
   17bf4:	movcc	r2, #48	; 0x30
   17bf8:	strbcc	r2, [r7, r1]
   17bfc:	add	r8, r0, #3
   17c00:	b	17414 <lchmod@@Base+0xf88>
   17c04:	mov	r0, #48	; 0x30
   17c08:	mov	sl, #1
   17c0c:	mov	r9, #0
   17c10:	b	176c0 <lchmod@@Base+0x1234>
   17c14:	sub	r6, r1, #1
   17c18:	cmp	sl, #0
   17c1c:	movwne	sl, #1
   17c20:	mov	r0, r5
   17c24:	cmp	sl, #0
   17c28:	bne	17c68 <lchmod@@Base+0x17dc>
   17c2c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17c30:	tst	r1, #1
   17c34:	beq	17c68 <lchmod@@Base+0x17dc>
   17c38:	cmp	r8, r4
   17c3c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17c40:	movcc	r1, #39	; 0x27
   17c44:	strbcc	r1, [r7, r8]
   17c48:	add	r1, r8, #1
   17c4c:	cmp	r1, r4
   17c50:	movcc	r2, #39	; 0x27
   17c54:	strbcc	r2, [r7, r1]
   17c58:	add	r8, r8, #2
   17c5c:	mov	r1, #0
   17c60:	str	r1, [fp, #-56]	; 0xffffffc8
   17c64:	b	1774c <lchmod@@Base+0x12c0>
   17c68:	ldr	r5, [fp, #-48]	; 0xffffffd0
   17c6c:	b	1774c <lchmod@@Base+0x12c0>
   17c70:	mov	r9, #0
   17c74:	b	17cb0 <lchmod@@Base+0x1824>
   17c78:	mov	r9, #0
   17c7c:	cmp	r7, lr
   17c80:	bcs	17cb0 <lchmod@@Base+0x1824>
   17c84:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c88:	ldr	r7, [sp, #44]	; 0x2c
   17c8c:	ldr	r0, [sp, #20]
   17c90:	ldrb	r0, [r0, r7]
   17c94:	cmp	r0, #0
   17c98:	beq	17cb8 <lchmod@@Base+0x182c>
   17c9c:	add	r7, r7, #1
   17ca0:	add	r0, r6, r7
   17ca4:	cmp	r0, lr
   17ca8:	bcc	17c8c <lchmod@@Base+0x1800>
   17cac:	b	17cb8 <lchmod@@Base+0x182c>
   17cb0:	ldr	ip, [fp, #-84]	; 0xffffffac
   17cb4:	ldr	r7, [sp, #44]	; 0x2c
   17cb8:	mov	r1, r7
   17cbc:	ldr	r7, [sp, #80]	; 0x50
   17cc0:	b	175e8 <lchmod@@Base+0x115c>
   17cc4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   17cc8:	eor	r0, r1, #2
   17ccc:	orr	r0, r0, r8
   17cd0:	clz	r0, r0
   17cd4:	lsr	r0, r0, #5
   17cd8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17cdc:	tst	r2, r0
   17ce0:	bne	17da0 <lchmod@@Base+0x1914>
   17ce4:	cmp	r1, #2
   17ce8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17cec:	movwne	r0, #1
   17cf0:	orr	r0, r2, r0
   17cf4:	tst	r0, #1
   17cf8:	ldreq	r0, [sp, #56]	; 0x38
   17cfc:	eoreq	r0, r0, #1
   17d00:	tsteq	r0, #1
   17d04:	bne	17d38 <lchmod@@Base+0x18ac>
   17d08:	mov	r9, lr
   17d0c:	tst	r5, #1
   17d10:	bne	17e08 <lchmod@@Base+0x197c>
   17d14:	ldr	r0, [sp, #72]	; 0x48
   17d18:	cmp	r0, #0
   17d1c:	beq	17d38 <lchmod@@Base+0x18ac>
   17d20:	mov	r5, #0
   17d24:	cmp	r4, #0
   17d28:	ldr	r0, [sp, #84]	; 0x54
   17d2c:	mov	sl, r2
   17d30:	ldr	r6, [sp, #72]	; 0x48
   17d34:	beq	16ed0 <lchmod@@Base+0xa44>
   17d38:	ldr	r1, [sp, #92]	; 0x5c
   17d3c:	clz	r0, r1
   17d40:	lsr	r0, r0, #5
   17d44:	orr	r0, r0, r2
   17d48:	tst	r0, #1
   17d4c:	bne	17d78 <lchmod@@Base+0x18ec>
   17d50:	ldrb	r0, [r1]
   17d54:	cmp	r0, #0
   17d58:	beq	17d78 <lchmod@@Base+0x18ec>
   17d5c:	add	r1, r1, #1
   17d60:	cmp	r8, r4
   17d64:	strbcc	r0, [r7, r8]
   17d68:	add	r8, r8, #1
   17d6c:	ldrb	r0, [r1], #1
   17d70:	cmp	r0, #0
   17d74:	bne	17d60 <lchmod@@Base+0x18d4>
   17d78:	cmp	r8, r4
   17d7c:	movcc	r0, #0
   17d80:	strbcc	r0, [r7, r8]
   17d84:	b	17dfc <lchmod@@Base+0x1970>
   17d88:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d8c:	mov	lr, r4
   17d90:	mov	r4, r5
   17d94:	b	17da0 <lchmod@@Base+0x1914>
   17d98:	ldr	r7, [sp, #80]	; 0x50
   17d9c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17da0:	mov	r0, #0
   17da4:	ldr	r1, [fp, #12]
   17da8:	bic	r1, r1, #2
   17dac:	ldr	r2, [sp, #84]	; 0x54
   17db0:	tst	r2, #1
   17db4:	ldr	r3, [fp, #-60]	; 0xffffffc4
   17db8:	mov	r2, r3
   17dbc:	movwne	r2, #4
   17dc0:	cmp	r3, #2
   17dc4:	movne	r2, r3
   17dc8:	str	r2, [sp]
   17dcc:	str	r1, [sp, #4]
   17dd0:	str	r0, [sp, #8]
   17dd4:	ldr	r0, [sp, #68]	; 0x44
   17dd8:	str	r0, [sp, #12]
   17ddc:	ldr	r0, [sp, #76]	; 0x4c
   17de0:	str	r0, [sp, #16]
   17de4:	mov	r0, r7
   17de8:	mov	r1, r4
   17dec:	mov	r2, ip
   17df0:	mov	r3, lr
   17df4:	bl	16e48 <lchmod@@Base+0x9bc>
   17df8:	mov	r8, r0
   17dfc:	mov	r0, r8
   17e00:	sub	sp, fp, #28
   17e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e08:	mov	r0, #5
   17e0c:	str	r0, [sp]
   17e10:	ldr	r0, [fp, #12]
   17e14:	str	r0, [sp, #4]
   17e18:	ldr	r0, [fp, #16]
   17e1c:	str	r0, [sp, #8]
   17e20:	ldr	r0, [sp, #68]	; 0x44
   17e24:	str	r0, [sp, #12]
   17e28:	ldr	r0, [sp, #76]	; 0x4c
   17e2c:	str	r0, [sp, #16]
   17e30:	mov	r0, r7
   17e34:	ldr	r1, [sp, #72]	; 0x48
   17e38:	ldr	r2, [fp, #-84]	; 0xffffffac
   17e3c:	mov	r3, r9
   17e40:	b	17df4 <lchmod@@Base+0x1968>
   17e44:	bl	11af4 <abort@plt>
   17e48:	mov	r3, r2
   17e4c:	mov	r2, #0
   17e50:	b	17e54 <lchmod@@Base+0x19c8>
   17e54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17e58:	add	fp, sp, #28
   17e5c:	sub	sp, sp, #36	; 0x24
   17e60:	mov	r4, r2
   17e64:	str	r2, [sp, #24]
   17e68:	mov	r5, r1
   17e6c:	mov	r6, r0
   17e70:	str	r0, [sp, #20]
   17e74:	movw	r8, #49656	; 0xc1f8
   17e78:	movt	r8, #2
   17e7c:	cmp	r3, #0
   17e80:	movne	r8, r3
   17e84:	bl	119a4 <__errno_location@plt>
   17e88:	str	r0, [sp, #28]
   17e8c:	ldm	r8, {r3, r9}
   17e90:	ldr	r1, [r8, #40]	; 0x28
   17e94:	ldr	r2, [r8, #44]	; 0x2c
   17e98:	ldr	r7, [r0]
   17e9c:	str	r7, [sp, #32]
   17ea0:	add	sl, r8, #8
   17ea4:	cmp	r4, #0
   17ea8:	orreq	r9, r9, #1
   17eac:	stm	sp, {r3, r9, sl}
   17eb0:	str	r1, [sp, #12]
   17eb4:	str	r2, [sp, #16]
   17eb8:	mov	r0, #0
   17ebc:	mov	r1, #0
   17ec0:	mov	r2, r6
   17ec4:	mov	r3, r5
   17ec8:	mov	r7, r5
   17ecc:	bl	16e48 <lchmod@@Base+0x9bc>
   17ed0:	mov	r5, r0
   17ed4:	add	r4, r0, #1
   17ed8:	mov	r0, r4
   17edc:	bl	18ff4 <lchmod@@Base+0x2b68>
   17ee0:	mov	r6, r0
   17ee4:	ldr	r0, [r8]
   17ee8:	ldr	r1, [r8, #40]	; 0x28
   17eec:	ldr	r2, [r8, #44]	; 0x2c
   17ef0:	stm	sp, {r0, r9, sl}
   17ef4:	str	r1, [sp, #12]
   17ef8:	str	r2, [sp, #16]
   17efc:	mov	r0, r6
   17f00:	mov	r1, r4
   17f04:	ldr	r2, [sp, #20]
   17f08:	mov	r3, r7
   17f0c:	bl	16e48 <lchmod@@Base+0x9bc>
   17f10:	ldr	r0, [sp, #24]
   17f14:	ldr	r1, [sp, #32]
   17f18:	ldr	r2, [sp, #28]
   17f1c:	str	r1, [r2]
   17f20:	cmp	r0, #0
   17f24:	strne	r5, [r0]
   17f28:	mov	r0, r6
   17f2c:	sub	sp, fp, #28
   17f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f34:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17f38:	add	fp, sp, #24
   17f3c:	movw	r8, #49544	; 0xc188
   17f40:	movt	r8, #2
   17f44:	ldr	r4, [r8]
   17f48:	movw	r5, #49548	; 0xc18c
   17f4c:	movt	r5, #2
   17f50:	ldr	r0, [r5]
   17f54:	cmp	r0, #2
   17f58:	blt	17f84 <lchmod@@Base+0x1af8>
   17f5c:	add	r7, r4, #12
   17f60:	mov	r6, #0
   17f64:	ldr	r0, [r7, r6, lsl #3]
   17f68:	bl	13304 <__assert_fail@plt+0x17b0>
   17f6c:	add	r0, r6, #1
   17f70:	ldr	r1, [r5]
   17f74:	add	r2, r6, #2
   17f78:	cmp	r2, r1
   17f7c:	mov	r6, r0
   17f80:	blt	17f64 <lchmod@@Base+0x1ad8>
   17f84:	ldr	r0, [r4, #4]
   17f88:	movw	r7, #49704	; 0xc228
   17f8c:	movt	r7, #2
   17f90:	cmp	r0, r7
   17f94:	beq	17fac <lchmod@@Base+0x1b20>
   17f98:	bl	13304 <__assert_fail@plt+0x17b0>
   17f9c:	movw	r0, #49552	; 0xc190
   17fa0:	movt	r0, #2
   17fa4:	mov	r6, #256	; 0x100
   17fa8:	strd	r6, [r0]
   17fac:	movw	r6, #49552	; 0xc190
   17fb0:	movt	r6, #2
   17fb4:	cmp	r4, r6
   17fb8:	beq	17fc8 <lchmod@@Base+0x1b3c>
   17fbc:	mov	r0, r4
   17fc0:	bl	13304 <__assert_fail@plt+0x17b0>
   17fc4:	str	r6, [r8]
   17fc8:	mov	r0, #1
   17fcc:	str	r0, [r5]
   17fd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17fd4:	movw	r3, #49656	; 0xc1f8
   17fd8:	movt	r3, #2
   17fdc:	mvn	r2, #0
   17fe0:	b	17fe4 <lchmod@@Base+0x1b58>
   17fe4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fe8:	add	fp, sp, #28
   17fec:	sub	sp, sp, #44	; 0x2c
   17ff0:	mov	r7, r3
   17ff4:	str	r2, [sp, #36]	; 0x24
   17ff8:	str	r1, [sp, #32]
   17ffc:	mov	r5, r0
   18000:	bl	119a4 <__errno_location@plt>
   18004:	cmp	r5, #0
   18008:	blt	18174 <lchmod@@Base+0x1ce8>
   1800c:	cmn	r5, #-2147483647	; 0x80000001
   18010:	beq	18174 <lchmod@@Base+0x1ce8>
   18014:	movw	r4, #49544	; 0xc188
   18018:	movt	r4, #2
   1801c:	ldr	r6, [r4]
   18020:	str	r0, [sp, #28]
   18024:	ldr	r0, [r0]
   18028:	str	r0, [sp, #24]
   1802c:	movw	r8, #49548	; 0xc18c
   18030:	movt	r8, #2
   18034:	ldr	r1, [r8]
   18038:	cmp	r1, r5
   1803c:	ble	18048 <lchmod@@Base+0x1bbc>
   18040:	mov	sl, r6
   18044:	b	180b0 <lchmod@@Base+0x1c24>
   18048:	str	r1, [fp, #-32]	; 0xffffffe0
   1804c:	mov	r0, #8
   18050:	str	r0, [sp]
   18054:	movw	r9, #49552	; 0xc190
   18058:	movt	r9, #2
   1805c:	subs	r0, r6, r9
   18060:	movne	r0, r6
   18064:	add	r2, r5, #1
   18068:	sub	r2, r2, r1
   1806c:	sub	r1, fp, #32
   18070:	mvn	r3, #-2147483648	; 0x80000000
   18074:	bl	190dc <lchmod@@Base+0x2c50>
   18078:	mov	sl, r0
   1807c:	str	r0, [r4]
   18080:	cmp	r6, r9
   18084:	ldrdeq	r0, [r9]
   18088:	stmeq	sl, {r0, r1}
   1808c:	ldr	r1, [r8]
   18090:	add	r0, sl, r1, lsl #3
   18094:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18098:	sub	r1, r2, r1
   1809c:	lsl	r2, r1, #3
   180a0:	mov	r1, #0
   180a4:	bl	119c8 <memset@plt>
   180a8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   180ac:	str	r0, [r8]
   180b0:	mov	r9, sl
   180b4:	ldr	r6, [r9, r5, lsl #3]!
   180b8:	ldr	r4, [r9, #4]!
   180bc:	ldm	r7, {r0, r1}
   180c0:	ldr	r2, [r7, #40]	; 0x28
   180c4:	ldr	r3, [r7, #44]	; 0x2c
   180c8:	orr	r8, r1, #1
   180cc:	add	r1, r7, #8
   180d0:	stm	sp, {r0, r8}
   180d4:	str	r1, [sp, #20]
   180d8:	add	r0, sp, #8
   180dc:	stm	r0, {r1, r2, r3}
   180e0:	mov	r0, r4
   180e4:	mov	r1, r6
   180e8:	ldr	r2, [sp, #32]
   180ec:	ldr	r3, [sp, #36]	; 0x24
   180f0:	bl	16e48 <lchmod@@Base+0x9bc>
   180f4:	cmp	r6, r0
   180f8:	bhi	1815c <lchmod@@Base+0x1cd0>
   180fc:	add	r6, r0, #1
   18100:	str	r6, [sl, r5, lsl #3]
   18104:	movw	r0, #49704	; 0xc228
   18108:	movt	r0, #2
   1810c:	cmp	r4, r0
   18110:	beq	1811c <lchmod@@Base+0x1c90>
   18114:	mov	r0, r4
   18118:	bl	13304 <__assert_fail@plt+0x17b0>
   1811c:	mov	r0, r6
   18120:	bl	18ff4 <lchmod@@Base+0x2b68>
   18124:	mov	r4, r0
   18128:	str	r0, [r9]
   1812c:	ldr	r0, [r7]
   18130:	ldr	r1, [r7, #40]	; 0x28
   18134:	ldr	r2, [r7, #44]	; 0x2c
   18138:	stm	sp, {r0, r8}
   1813c:	ldr	r0, [sp, #20]
   18140:	add	r3, sp, #8
   18144:	stm	r3, {r0, r1, r2}
   18148:	mov	r0, r4
   1814c:	mov	r1, r6
   18150:	ldr	r2, [sp, #32]
   18154:	ldr	r3, [sp, #36]	; 0x24
   18158:	bl	16e48 <lchmod@@Base+0x9bc>
   1815c:	ldr	r0, [sp, #28]
   18160:	ldr	r1, [sp, #24]
   18164:	str	r1, [r0]
   18168:	mov	r0, r4
   1816c:	sub	sp, fp, #28
   18170:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18174:	bl	11af4 <abort@plt>
   18178:	movw	r3, #49656	; 0xc1f8
   1817c:	movt	r3, #2
   18180:	b	17fe4 <lchmod@@Base+0x1b58>
   18184:	mov	r1, r0
   18188:	mov	r0, #0
   1818c:	b	17fd4 <lchmod@@Base+0x1b48>
   18190:	mov	r2, r1
   18194:	mov	r1, r0
   18198:	mov	r0, #0
   1819c:	b	18178 <lchmod@@Base+0x1cec>
   181a0:	push	{r4, r5, r6, sl, fp, lr}
   181a4:	add	fp, sp, #16
   181a8:	sub	sp, sp, #48	; 0x30
   181ac:	mov	r4, r2
   181b0:	mov	r5, r0
   181b4:	mov	r6, sp
   181b8:	mov	r0, r6
   181bc:	bl	181dc <lchmod@@Base+0x1d50>
   181c0:	mov	r0, r5
   181c4:	mov	r1, r4
   181c8:	mvn	r2, #0
   181cc:	mov	r3, r6
   181d0:	bl	17fe4 <lchmod@@Base+0x1b58>
   181d4:	sub	sp, fp, #16
   181d8:	pop	{r4, r5, r6, sl, fp, pc}
   181dc:	vmov.i32	q8, #0	; 0x00000000
   181e0:	mov	r2, #32
   181e4:	mov	r3, r0
   181e8:	vst1.32	{d16-d17}, [r3], r2
   181ec:	vst1.32	{d16-d17}, [r3]
   181f0:	add	r2, r0, #16
   181f4:	vst1.32	{d16-d17}, [r2]
   181f8:	cmp	r1, #10
   181fc:	strne	r1, [r0]
   18200:	bxne	lr
   18204:	push	{fp, lr}
   18208:	mov	fp, sp
   1820c:	bl	11af4 <abort@plt>
   18210:	push	{r4, r5, r6, r7, fp, lr}
   18214:	add	fp, sp, #16
   18218:	sub	sp, sp, #48	; 0x30
   1821c:	mov	r4, r3
   18220:	mov	r5, r2
   18224:	mov	r6, r0
   18228:	mov	r7, sp
   1822c:	mov	r0, r7
   18230:	bl	181dc <lchmod@@Base+0x1d50>
   18234:	mov	r0, r6
   18238:	mov	r1, r5
   1823c:	mov	r2, r4
   18240:	mov	r3, r7
   18244:	bl	17fe4 <lchmod@@Base+0x1b58>
   18248:	sub	sp, fp, #16
   1824c:	pop	{r4, r5, r6, r7, fp, pc}
   18250:	mov	r2, r1
   18254:	mov	r1, r0
   18258:	mov	r0, #0
   1825c:	b	181a0 <lchmod@@Base+0x1d14>
   18260:	mov	r3, r2
   18264:	mov	r2, r1
   18268:	mov	r1, r0
   1826c:	mov	r0, #0
   18270:	b	18210 <lchmod@@Base+0x1d84>
   18274:	push	{r4, r5, r6, sl, fp, lr}
   18278:	add	fp, sp, #16
   1827c:	sub	sp, sp, #48	; 0x30
   18280:	mov	r4, r1
   18284:	mov	r5, r0
   18288:	mov	r0, #32
   1828c:	movw	r1, #49656	; 0xc1f8
   18290:	movt	r1, #2
   18294:	add	r3, r1, #16
   18298:	vld1.64	{d16-d17}, [r1], r0
   1829c:	mov	r6, sp
   182a0:	vld1.64	{d18-d19}, [r3]
   182a4:	add	r3, r6, #16
   182a8:	vld1.64	{d20-d21}, [r1]
   182ac:	vst1.64	{d18-d19}, [r3]
   182b0:	mov	r1, r6
   182b4:	vst1.64	{d16-d17}, [r1], r0
   182b8:	vst1.64	{d20-d21}, [r1]
   182bc:	mov	r0, r6
   182c0:	mov	r1, r2
   182c4:	mov	r2, #1
   182c8:	bl	16d3c <lchmod@@Base+0x8b0>
   182cc:	mov	r0, #0
   182d0:	mov	r1, r5
   182d4:	mov	r2, r4
   182d8:	mov	r3, r6
   182dc:	bl	17fe4 <lchmod@@Base+0x1b58>
   182e0:	sub	sp, fp, #16
   182e4:	pop	{r4, r5, r6, sl, fp, pc}
   182e8:	mov	r2, r1
   182ec:	mvn	r1, #0
   182f0:	b	18274 <lchmod@@Base+0x1de8>
   182f4:	mov	r1, #58	; 0x3a
   182f8:	b	182e8 <lchmod@@Base+0x1e5c>
   182fc:	mov	r2, #58	; 0x3a
   18300:	b	18274 <lchmod@@Base+0x1de8>
   18304:	push	{r4, r5, r6, sl, fp, lr}
   18308:	add	fp, sp, #16
   1830c:	sub	sp, sp, #48	; 0x30
   18310:	mov	r4, r2
   18314:	mov	r5, r0
   18318:	mov	r6, sp
   1831c:	mov	r0, r6
   18320:	bl	181dc <lchmod@@Base+0x1d50>
   18324:	mov	r0, r6
   18328:	mov	r1, #58	; 0x3a
   1832c:	mov	r2, #1
   18330:	bl	16d3c <lchmod@@Base+0x8b0>
   18334:	mov	r0, r5
   18338:	mov	r1, r4
   1833c:	mvn	r2, #0
   18340:	mov	r3, r6
   18344:	bl	17fe4 <lchmod@@Base+0x1b58>
   18348:	sub	sp, fp, #16
   1834c:	pop	{r4, r5, r6, sl, fp, pc}
   18350:	push	{fp, lr}
   18354:	mov	fp, sp
   18358:	sub	sp, sp, #8
   1835c:	mvn	ip, #0
   18360:	str	ip, [sp]
   18364:	bl	18370 <lchmod@@Base+0x1ee4>
   18368:	mov	sp, fp
   1836c:	pop	{fp, pc}
   18370:	push	{r4, r5, r6, r7, fp, lr}
   18374:	add	fp, sp, #16
   18378:	sub	sp, sp, #48	; 0x30
   1837c:	mov	r7, r3
   18380:	mov	r5, r0
   18384:	mov	r0, #32
   18388:	movw	r3, #49656	; 0xc1f8
   1838c:	movt	r3, #2
   18390:	add	r4, r3, #16
   18394:	vld1.64	{d16-d17}, [r3], r0
   18398:	mov	r6, sp
   1839c:	vld1.64	{d18-d19}, [r4]
   183a0:	add	r4, r6, #16
   183a4:	vld1.64	{d20-d21}, [r3]
   183a8:	vst1.64	{d18-d19}, [r4]
   183ac:	mov	r3, r6
   183b0:	vst1.64	{d16-d17}, [r3], r0
   183b4:	vst1.64	{d20-d21}, [r3]
   183b8:	mov	r0, r6
   183bc:	bl	16d94 <lchmod@@Base+0x908>
   183c0:	ldr	r2, [fp, #8]
   183c4:	mov	r0, r5
   183c8:	mov	r1, r7
   183cc:	mov	r3, r6
   183d0:	bl	17fe4 <lchmod@@Base+0x1b58>
   183d4:	sub	sp, fp, #16
   183d8:	pop	{r4, r5, r6, r7, fp, pc}
   183dc:	mov	r3, r2
   183e0:	mov	r2, r1
   183e4:	mov	r1, r0
   183e8:	mov	r0, #0
   183ec:	b	18350 <lchmod@@Base+0x1ec4>
   183f0:	push	{fp, lr}
   183f4:	mov	fp, sp
   183f8:	sub	sp, sp, #8
   183fc:	mov	ip, r2
   18400:	mov	r2, r1
   18404:	mov	r1, r0
   18408:	str	r3, [sp]
   1840c:	mov	r0, #0
   18410:	mov	r3, ip
   18414:	bl	18370 <lchmod@@Base+0x1ee4>
   18418:	mov	sp, fp
   1841c:	pop	{fp, pc}
   18420:	movw	r3, #49560	; 0xc198
   18424:	movt	r3, #2
   18428:	b	17fe4 <lchmod@@Base+0x1b58>
   1842c:	mov	r2, r1
   18430:	mov	r1, r0
   18434:	mov	r0, #0
   18438:	b	18420 <lchmod@@Base+0x1f94>
   1843c:	mvn	r2, #0
   18440:	b	18420 <lchmod@@Base+0x1f94>
   18444:	mov	r1, r0
   18448:	mov	r0, #0
   1844c:	b	1843c <lchmod@@Base+0x1fb0>
   18450:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18454:	add	fp, sp, #24
   18458:	sub	sp, sp, #16
   1845c:	mov	r4, r1
   18460:	mov	r5, r0
   18464:	mov	r7, #0
   18468:	mov	r0, #0
   1846c:	mov	r1, r5
   18470:	mov	r2, #5
   18474:	bl	1180c <dcgettext@plt>
   18478:	cmp	r0, r5
   1847c:	beq	18488 <lchmod@@Base+0x1ffc>
   18480:	sub	sp, fp, #24
   18484:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18488:	bl	1a004 <lchmod@@Base+0x3b78>
   1848c:	mov	r6, r0
   18490:	mov	r8, #56	; 0x38
   18494:	mov	r0, #45	; 0x2d
   18498:	stm	sp, {r0, r8}
   1849c:	str	r7, [sp, #8]
   184a0:	str	r7, [sp, #12]
   184a4:	mov	r0, r6
   184a8:	mov	r1, #85	; 0x55
   184ac:	mov	r2, #84	; 0x54
   184b0:	mov	r3, #70	; 0x46
   184b4:	bl	1854c <lchmod@@Base+0x20c0>
   184b8:	cmp	r0, #0
   184bc:	beq	184d8 <lchmod@@Base+0x204c>
   184c0:	ldrb	r1, [r5]
   184c4:	movw	r2, #43819	; 0xab2b
   184c8:	movt	r2, #1
   184cc:	movw	r0, #43823	; 0xab2f
   184d0:	movt	r0, #1
   184d4:	b	1851c <lchmod@@Base+0x2090>
   184d8:	mov	r0, #48	; 0x30
   184dc:	mov	r1, #51	; 0x33
   184e0:	str	r8, [sp]
   184e4:	stmib	sp, {r0, r1}
   184e8:	str	r0, [sp, #12]
   184ec:	mov	r0, r6
   184f0:	mov	r1, #71	; 0x47
   184f4:	mov	r2, #66	; 0x42
   184f8:	mov	r3, #49	; 0x31
   184fc:	bl	1854c <lchmod@@Base+0x20c0>
   18500:	cmp	r0, #0
   18504:	beq	1852c <lchmod@@Base+0x20a0>
   18508:	ldrb	r1, [r5]
   1850c:	movw	r2, #43827	; 0xab33
   18510:	movt	r2, #1
   18514:	movw	r0, #43831	; 0xab37
   18518:	movt	r0, #1
   1851c:	cmp	r1, #96	; 0x60
   18520:	moveq	r0, r2
   18524:	sub	sp, fp, #24
   18528:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1852c:	movw	r1, #43813	; 0xab25
   18530:	movt	r1, #1
   18534:	movw	r0, #43817	; 0xab29
   18538:	movt	r0, #1
   1853c:	cmp	r4, #9
   18540:	moveq	r0, r1
   18544:	sub	sp, fp, #24
   18548:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1854c:	push	{r4, r5, r6, r7, fp, lr}
   18550:	add	fp, sp, #16
   18554:	sub	sp, sp, #16
   18558:	mov	r4, r3
   1855c:	mov	r5, r2
   18560:	mov	r7, r1
   18564:	mov	r6, r0
   18568:	mov	r0, r1
   1856c:	bl	1998c <lchmod@@Base+0x3500>
   18570:	ldrb	r1, [r6]
   18574:	cmp	r0, #0
   18578:	andne	r1, r1, #223	; 0xdf
   1857c:	mov	r0, #0
   18580:	cmp	r1, r7
   18584:	bne	185c4 <lchmod@@Base+0x2138>
   18588:	cmp	r7, #0
   1858c:	moveq	r0, #1
   18590:	subeq	sp, fp, #16
   18594:	popeq	{r4, r5, r6, r7, fp, pc}
   18598:	ldr	r0, [fp, #20]
   1859c:	ldr	r1, [fp, #16]
   185a0:	ldr	r2, [fp, #12]
   185a4:	ldr	r3, [fp, #8]
   185a8:	str	r2, [sp]
   185ac:	str	r1, [sp, #4]
   185b0:	str	r0, [sp, #8]
   185b4:	mov	r0, r6
   185b8:	mov	r1, r5
   185bc:	mov	r2, r4
   185c0:	bl	185cc <lchmod@@Base+0x2140>
   185c4:	sub	sp, fp, #16
   185c8:	pop	{r4, r5, r6, r7, fp, pc}
   185cc:	push	{r4, r5, r6, r7, fp, lr}
   185d0:	add	fp, sp, #16
   185d4:	sub	sp, sp, #8
   185d8:	mov	r4, r3
   185dc:	mov	r5, r2
   185e0:	mov	r7, r1
   185e4:	mov	r6, r0
   185e8:	mov	r0, r1
   185ec:	bl	1998c <lchmod@@Base+0x3500>
   185f0:	ldrb	r1, [r6, #1]
   185f4:	cmp	r0, #0
   185f8:	andne	r1, r1, #223	; 0xdf
   185fc:	mov	r0, #0
   18600:	cmp	r1, r7
   18604:	bne	1863c <lchmod@@Base+0x21b0>
   18608:	cmp	r7, #0
   1860c:	moveq	r0, #1
   18610:	subeq	sp, fp, #16
   18614:	popeq	{r4, r5, r6, r7, fp, pc}
   18618:	ldr	r0, [fp, #16]
   1861c:	ldr	r1, [fp, #12]
   18620:	ldr	r3, [fp, #8]
   18624:	str	r1, [sp]
   18628:	str	r0, [sp, #4]
   1862c:	mov	r0, r6
   18630:	mov	r1, r5
   18634:	mov	r2, r4
   18638:	bl	18644 <lchmod@@Base+0x21b8>
   1863c:	sub	sp, fp, #16
   18640:	pop	{r4, r5, r6, r7, fp, pc}
   18644:	push	{r4, r5, r6, r7, fp, lr}
   18648:	add	fp, sp, #16
   1864c:	sub	sp, sp, #8
   18650:	mov	r4, r3
   18654:	mov	r5, r2
   18658:	mov	r7, r1
   1865c:	mov	r6, r0
   18660:	mov	r0, r1
   18664:	bl	1998c <lchmod@@Base+0x3500>
   18668:	ldrb	r1, [r6, #2]
   1866c:	cmp	r0, #0
   18670:	andne	r1, r1, #223	; 0xdf
   18674:	mov	r0, #0
   18678:	cmp	r1, r7
   1867c:	bne	186ac <lchmod@@Base+0x2220>
   18680:	cmp	r7, #0
   18684:	moveq	r0, #1
   18688:	subeq	sp, fp, #16
   1868c:	popeq	{r4, r5, r6, r7, fp, pc}
   18690:	ldr	r0, [fp, #12]
   18694:	ldr	r3, [fp, #8]
   18698:	str	r0, [sp]
   1869c:	mov	r0, r6
   186a0:	mov	r1, r5
   186a4:	mov	r2, r4
   186a8:	bl	186b4 <lchmod@@Base+0x2228>
   186ac:	sub	sp, fp, #16
   186b0:	pop	{r4, r5, r6, r7, fp, pc}
   186b4:	push	{r4, r5, r6, r7, fp, lr}
   186b8:	add	fp, sp, #16
   186bc:	mov	r4, r3
   186c0:	mov	r5, r2
   186c4:	mov	r7, r1
   186c8:	mov	r6, r0
   186cc:	mov	r0, r1
   186d0:	bl	1998c <lchmod@@Base+0x3500>
   186d4:	ldrb	r1, [r6, #3]
   186d8:	ldr	r3, [fp, #8]
   186dc:	cmp	r0, #0
   186e0:	andne	r1, r1, #223	; 0xdf
   186e4:	mov	r0, #0
   186e8:	cmp	r1, r7
   186ec:	popne	{r4, r5, r6, r7, fp, pc}
   186f0:	cmp	r7, #0
   186f4:	beq	1870c <lchmod@@Base+0x2280>
   186f8:	mov	r0, r6
   186fc:	mov	r1, r5
   18700:	mov	r2, r4
   18704:	pop	{r4, r5, r6, r7, fp, lr}
   18708:	b	18714 <lchmod@@Base+0x2288>
   1870c:	mov	r0, #1
   18710:	pop	{r4, r5, r6, r7, fp, pc}
   18714:	push	{r4, r5, r6, r7, fp, lr}
   18718:	add	fp, sp, #16
   1871c:	mov	r4, r3
   18720:	mov	r5, r2
   18724:	mov	r7, r1
   18728:	mov	r6, r0
   1872c:	mov	r0, r1
   18730:	bl	1998c <lchmod@@Base+0x3500>
   18734:	ldrb	r1, [r6, #4]
   18738:	cmp	r0, #0
   1873c:	andne	r1, r1, #223	; 0xdf
   18740:	mov	r0, #0
   18744:	cmp	r1, r7
   18748:	popne	{r4, r5, r6, r7, fp, pc}
   1874c:	cmp	r7, #0
   18750:	beq	18768 <lchmod@@Base+0x22dc>
   18754:	mov	r0, r6
   18758:	mov	r1, r5
   1875c:	mov	r2, r4
   18760:	pop	{r4, r5, r6, r7, fp, lr}
   18764:	b	18770 <lchmod@@Base+0x22e4>
   18768:	mov	r0, #1
   1876c:	pop	{r4, r5, r6, r7, fp, pc}
   18770:	push	{r4, r5, r6, sl, fp, lr}
   18774:	add	fp, sp, #16
   18778:	mov	r4, r2
   1877c:	mov	r6, r1
   18780:	mov	r5, r0
   18784:	mov	r0, r1
   18788:	bl	1998c <lchmod@@Base+0x3500>
   1878c:	ldrb	r1, [r5, #5]
   18790:	cmp	r0, #0
   18794:	andne	r1, r1, #223	; 0xdf
   18798:	mov	r0, #0
   1879c:	cmp	r1, r6
   187a0:	popne	{r4, r5, r6, sl, fp, pc}
   187a4:	cmp	r6, #0
   187a8:	beq	187bc <lchmod@@Base+0x2330>
   187ac:	mov	r0, r5
   187b0:	mov	r1, r4
   187b4:	pop	{r4, r5, r6, sl, fp, lr}
   187b8:	b	187c4 <lchmod@@Base+0x2338>
   187bc:	mov	r0, #1
   187c0:	pop	{r4, r5, r6, sl, fp, pc}
   187c4:	push	{r4, r5, fp, lr}
   187c8:	add	fp, sp, #8
   187cc:	mov	r5, r1
   187d0:	mov	r4, r0
   187d4:	mov	r0, r1
   187d8:	bl	1998c <lchmod@@Base+0x3500>
   187dc:	ldrb	r1, [r4, #6]
   187e0:	cmp	r0, #0
   187e4:	andne	r1, r1, #223	; 0xdf
   187e8:	mov	r0, #0
   187ec:	cmp	r1, r5
   187f0:	popne	{r4, r5, fp, pc}
   187f4:	cmp	r5, #0
   187f8:	beq	18808 <lchmod@@Base+0x237c>
   187fc:	mov	r0, r4
   18800:	pop	{r4, r5, fp, lr}
   18804:	b	18810 <lchmod@@Base+0x2384>
   18808:	mov	r0, #1
   1880c:	pop	{r4, r5, fp, pc}
   18810:	push	{r4, sl, fp, lr}
   18814:	add	fp, sp, #8
   18818:	mov	r4, r0
   1881c:	mov	r0, #0
   18820:	bl	1998c <lchmod@@Base+0x3500>
   18824:	ldrb	r1, [r4, #7]
   18828:	cmp	r0, #0
   1882c:	beq	18844 <lchmod@@Base+0x23b8>
   18830:	tst	r1, #223	; 0xdf
   18834:	moveq	r0, #1
   18838:	popeq	{r4, sl, fp, pc}
   1883c:	mov	r0, #0
   18840:	pop	{r4, sl, fp, pc}
   18844:	cmp	r1, #0
   18848:	moveq	r0, #1
   1884c:	popeq	{r4, sl, fp, pc}
   18850:	mov	r0, #0
   18854:	pop	{r4, sl, fp, pc}
   18858:	push	{r4, r5, r6, sl, fp, lr}
   1885c:	add	fp, sp, #16
   18860:	mov	r5, r1
   18864:	ldr	r4, [r0], #8
   18868:	cmp	r4, r0
   1886c:	beq	18890 <lchmod@@Base+0x2404>
   18870:	mov	r0, r4
   18874:	mov	r1, r5
   18878:	bl	194ac <lchmod@@Base+0x3020>
   1887c:	mov	r6, r0
   18880:	cmp	r0, #0
   18884:	moveq	r6, r4
   18888:	mov	r0, r6
   1888c:	pop	{r4, r5, r6, sl, fp, pc}
   18890:	mov	r0, r5
   18894:	bl	1947c <lchmod@@Base+0x2ff0>
   18898:	cmp	r0, #0
   1889c:	moveq	r6, #0
   188a0:	moveq	r0, r6
   188a4:	popeq	{r4, r5, r6, sl, fp, pc}
   188a8:	mov	r6, r0
   188ac:	mov	r1, r4
   188b0:	mov	r2, r5
   188b4:	bl	117dc <memcpy@plt>
   188b8:	mov	r0, r6
   188bc:	pop	{r4, r5, r6, sl, fp, pc}
   188c0:	push	{r4, r5, fp, lr}
   188c4:	add	fp, sp, #8
   188c8:	mov	r4, r0
   188cc:	ldr	r5, [r0, #4]
   188d0:	bl	1891c <lchmod@@Base+0x2490>
   188d4:	ldr	r0, [r4, #4]
   188d8:	cmp	r0, r5, lsl #1
   188dc:	bhi	18900 <lchmod@@Base+0x2474>
   188e0:	lsl	r5, r5, #1
   188e4:	mov	r0, r5
   188e8:	bl	1947c <lchmod@@Base+0x2ff0>
   188ec:	cmp	r0, #0
   188f0:	stmne	r4, {r0, r5}
   188f4:	movne	r0, #1
   188f8:	popne	{r4, r5, fp, pc}
   188fc:	b	1890c <lchmod@@Base+0x2480>
   18900:	bl	119a4 <__errno_location@plt>
   18904:	mov	r1, #12
   18908:	str	r1, [r0]
   1890c:	mov	r0, r4
   18910:	bl	18930 <lchmod@@Base+0x24a4>
   18914:	mov	r0, #0
   18918:	pop	{r4, r5, fp, pc}
   1891c:	mov	r1, r0
   18920:	ldr	r0, [r1], #8
   18924:	cmp	r0, r1
   18928:	bxeq	lr
   1892c:	b	13304 <__assert_fail@plt+0x17b0>
   18930:	mov	r1, #1024	; 0x400
   18934:	add	r2, r0, #8
   18938:	str	r2, [r0]
   1893c:	str	r1, [r0, #4]
   18940:	bx	lr
   18944:	push	{r4, r5, r6, r7, fp, lr}
   18948:	add	fp, sp, #16
   1894c:	mov	r4, r0
   18950:	add	r5, r0, #8
   18954:	ldrd	r0, [r0]
   18958:	lsl	r7, r1, #1
   1895c:	cmp	r0, r5
   18960:	beq	18984 <lchmod@@Base+0x24f8>
   18964:	cmp	r7, r1
   18968:	bcc	189b4 <lchmod@@Base+0x2528>
   1896c:	mov	r1, r7
   18970:	bl	194ac <lchmod@@Base+0x3020>
   18974:	mov	r6, r0
   18978:	cmp	r0, #0
   1897c:	bne	189a8 <lchmod@@Base+0x251c>
   18980:	b	189c0 <lchmod@@Base+0x2534>
   18984:	mov	r0, r7
   18988:	bl	1947c <lchmod@@Base+0x2ff0>
   1898c:	cmp	r0, #0
   18990:	moveq	r0, #0
   18994:	popeq	{r4, r5, r6, r7, fp, pc}
   18998:	mov	r6, r0
   1899c:	ldr	r2, [r4, #4]
   189a0:	mov	r1, r5
   189a4:	bl	117dc <memcpy@plt>
   189a8:	strd	r6, [r4]
   189ac:	mov	r0, #1
   189b0:	pop	{r4, r5, r6, r7, fp, pc}
   189b4:	bl	119a4 <__errno_location@plt>
   189b8:	mov	r1, #12
   189bc:	str	r1, [r0]
   189c0:	ldr	r0, [r4]
   189c4:	bl	13304 <__assert_fail@plt+0x17b0>
   189c8:	mov	r0, r4
   189cc:	bl	189d8 <lchmod@@Base+0x254c>
   189d0:	mov	r0, #0
   189d4:	pop	{r4, r5, r6, r7, fp, pc}
   189d8:	mov	r1, #1024	; 0x400
   189dc:	add	r2, r0, #8
   189e0:	str	r2, [r0]
   189e4:	str	r1, [r0, #4]
   189e8:	bx	lr
   189ec:	push	{r4, sl, fp, lr}
   189f0:	add	fp, sp, #8
   189f4:	mov	r4, r1
   189f8:	bl	11968 <getfilecon@plt>
   189fc:	mov	r1, r4
   18a00:	pop	{r4, sl, fp, lr}
   18a04:	b	18a08 <lchmod@@Base+0x257c>
   18a08:	push	{r4, r5, fp, lr}
   18a0c:	add	fp, sp, #8
   18a10:	cmp	r0, #10
   18a14:	beq	18a2c <lchmod@@Base+0x25a0>
   18a18:	cmp	r0, #0
   18a1c:	bne	18a74 <lchmod@@Base+0x25e8>
   18a20:	bl	119a4 <__errno_location@plt>
   18a24:	mov	r1, #95	; 0x5f
   18a28:	b	18a6c <lchmod@@Base+0x25e0>
   18a2c:	mov	r4, r1
   18a30:	ldr	r5, [r1]
   18a34:	movw	r1, #43920	; 0xab90
   18a38:	movt	r1, #1
   18a3c:	mov	r0, r5
   18a40:	bl	1177c <strcmp@plt>
   18a44:	mov	r1, r0
   18a48:	mov	r0, #10
   18a4c:	cmp	r1, #0
   18a50:	popne	{r4, r5, fp, pc}
   18a54:	mov	r0, r5
   18a58:	bl	11a94 <freecon@plt>
   18a5c:	mov	r0, #0
   18a60:	str	r0, [r4]
   18a64:	bl	119a4 <__errno_location@plt>
   18a68:	mov	r1, #61	; 0x3d
   18a6c:	str	r1, [r0]
   18a70:	mvn	r0, #0
   18a74:	pop	{r4, r5, fp, pc}
   18a78:	push	{r4, sl, fp, lr}
   18a7c:	add	fp, sp, #8
   18a80:	mov	r4, r1
   18a84:	bl	118f0 <lgetfilecon@plt>
   18a88:	mov	r1, r4
   18a8c:	pop	{r4, sl, fp, lr}
   18a90:	b	18a08 <lchmod@@Base+0x257c>
   18a94:	push	{r4, sl, fp, lr}
   18a98:	add	fp, sp, #8
   18a9c:	mov	r4, r1
   18aa0:	bl	11830 <fgetfilecon@plt>
   18aa4:	mov	r1, r4
   18aa8:	pop	{r4, sl, fp, lr}
   18aac:	b	18a08 <lchmod@@Base+0x257c>
   18ab0:	push	{r4, r5, r6, r7, fp, lr}
   18ab4:	add	fp, sp, #16
   18ab8:	mov	r4, r0
   18abc:	cmp	r0, #2
   18ac0:	movhi	r0, r4
   18ac4:	pophi	{r4, r5, r6, r7, fp, pc}
   18ac8:	mov	r0, r4
   18acc:	bl	1a0d8 <lchmod@@Base+0x3c4c>
   18ad0:	mov	r5, r0
   18ad4:	bl	119a4 <__errno_location@plt>
   18ad8:	mov	r6, r0
   18adc:	ldr	r7, [r0]
   18ae0:	mov	r0, r4
   18ae4:	bl	11b00 <close@plt>
   18ae8:	str	r7, [r6]
   18aec:	mov	r0, r5
   18af0:	pop	{r4, r5, r6, r7, fp, pc}
   18af4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18af8:	add	fp, sp, #24
   18afc:	sub	sp, sp, #32
   18b00:	mov	r4, r2
   18b04:	mov	r8, r0
   18b08:	ldr	r6, [fp, #12]
   18b0c:	ldr	r7, [fp, #8]
   18b10:	cmp	r1, #0
   18b14:	beq	18b3c <lchmod@@Base+0x26b0>
   18b18:	mov	r5, r1
   18b1c:	str	r4, [sp]
   18b20:	str	r3, [sp, #4]
   18b24:	movw	r2, #43930	; 0xab9a
   18b28:	movt	r2, #1
   18b2c:	mov	r0, r8
   18b30:	mov	r1, #1
   18b34:	mov	r3, r5
   18b38:	b	18b54 <lchmod@@Base+0x26c8>
   18b3c:	str	r3, [sp]
   18b40:	movw	r2, #43942	; 0xaba6
   18b44:	movt	r2, #1
   18b48:	mov	r0, r8
   18b4c:	mov	r1, #1
   18b50:	mov	r3, r4
   18b54:	bl	119ec <__fprintf_chk@plt>
   18b58:	movw	r1, #43949	; 0xabad
   18b5c:	movt	r1, #1
   18b60:	mov	r0, #0
   18b64:	mov	r2, #5
   18b68:	bl	1180c <dcgettext@plt>
   18b6c:	mov	r3, r0
   18b70:	movw	r0, #2022	; 0x7e6
   18b74:	str	r0, [sp]
   18b78:	movw	r2, #44667	; 0xae7b
   18b7c:	movt	r2, #1
   18b80:	mov	r0, r8
   18b84:	mov	r1, #1
   18b88:	bl	119ec <__fprintf_chk@plt>
   18b8c:	movw	r4, #43275	; 0xa90b
   18b90:	movt	r4, #1
   18b94:	mov	r0, r4
   18b98:	mov	r1, r8
   18b9c:	bl	11758 <fputs_unlocked@plt>
   18ba0:	movw	r1, #43953	; 0xabb1
   18ba4:	movt	r1, #1
   18ba8:	mov	r0, #0
   18bac:	mov	r2, #5
   18bb0:	bl	1180c <dcgettext@plt>
   18bb4:	mov	r2, r0
   18bb8:	movw	r3, #44124	; 0xac5c
   18bbc:	movt	r3, #1
   18bc0:	mov	r0, r8
   18bc4:	mov	r1, #1
   18bc8:	bl	119ec <__fprintf_chk@plt>
   18bcc:	mov	r0, r4
   18bd0:	mov	r1, r8
   18bd4:	bl	11758 <fputs_unlocked@plt>
   18bd8:	cmp	r6, #9
   18bdc:	bhi	18c18 <lchmod@@Base+0x278c>
   18be0:	add	r0, pc, #0
   18be4:	ldr	pc, [r0, r6, lsl #2]
   18be8:	andeq	r8, r1, r0, lsl ip
   18bec:	andeq	r8, r1, r4, lsr #24
   18bf0:	andeq	r8, r1, r4, asr ip
   18bf4:	andeq	r8, r1, ip, ror ip
   18bf8:	andeq	r8, r1, r4, lsr #25
   18bfc:	andeq	r8, r1, ip, asr #25
   18c00:	strdeq	r8, [r1], -r4
   18c04:	andeq	r8, r1, ip, lsr #26
   18c08:	andeq	r8, r1, ip, asr #27
   18c0c:	andeq	r8, r1, r4, ror sp
   18c10:	sub	sp, fp, #24
   18c14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c18:	movw	r1, #44477	; 0xadbd
   18c1c:	movt	r1, #1
   18c20:	b	18d7c <lchmod@@Base+0x28f0>
   18c24:	movw	r1, #44158	; 0xac7e
   18c28:	movt	r1, #1
   18c2c:	mov	r0, #0
   18c30:	mov	r2, #5
   18c34:	bl	1180c <dcgettext@plt>
   18c38:	mov	r2, r0
   18c3c:	ldr	r3, [r7]
   18c40:	mov	r0, r8
   18c44:	mov	r1, #1
   18c48:	sub	sp, fp, #24
   18c4c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   18c50:	b	119ec <__fprintf_chk@plt>
   18c54:	movw	r1, #44174	; 0xac8e
   18c58:	movt	r1, #1
   18c5c:	mov	r0, #0
   18c60:	mov	r2, #5
   18c64:	bl	1180c <dcgettext@plt>
   18c68:	mov	r2, r0
   18c6c:	ldr	r3, [r7]
   18c70:	ldr	r0, [r7, #4]
   18c74:	str	r0, [sp]
   18c78:	b	18d68 <lchmod@@Base+0x28dc>
   18c7c:	movw	r1, #44197	; 0xaca5
   18c80:	movt	r1, #1
   18c84:	mov	r0, #0
   18c88:	mov	r2, #5
   18c8c:	bl	1180c <dcgettext@plt>
   18c90:	mov	r2, r0
   18c94:	ldr	r3, [r7]
   18c98:	ldmib	r7, {r0, r1}
   18c9c:	stm	sp, {r0, r1}
   18ca0:	b	18d68 <lchmod@@Base+0x28dc>
   18ca4:	movw	r1, #44225	; 0xacc1
   18ca8:	movt	r1, #1
   18cac:	mov	r0, #0
   18cb0:	mov	r2, #5
   18cb4:	bl	1180c <dcgettext@plt>
   18cb8:	mov	r2, r0
   18cbc:	ldr	r3, [r7]
   18cc0:	ldmib	r7, {r0, r1, r7}
   18cc4:	stm	sp, {r0, r1, r7}
   18cc8:	b	18d68 <lchmod@@Base+0x28dc>
   18ccc:	movw	r1, #44257	; 0xace1
   18cd0:	movt	r1, #1
   18cd4:	mov	r0, #0
   18cd8:	mov	r2, #5
   18cdc:	bl	1180c <dcgettext@plt>
   18ce0:	mov	r2, r0
   18ce4:	ldr	r3, [r7]
   18ce8:	ldmib	r7, {r0, r1, r6, r7}
   18cec:	stm	sp, {r0, r1, r6, r7}
   18cf0:	b	18d68 <lchmod@@Base+0x28dc>
   18cf4:	movw	r1, #44293	; 0xad05
   18cf8:	movt	r1, #1
   18cfc:	mov	r0, #0
   18d00:	mov	r2, #5
   18d04:	bl	1180c <dcgettext@plt>
   18d08:	mov	r2, r0
   18d0c:	ldr	r3, [r7]
   18d10:	ldmib	r7, {r0, r1, r6}
   18d14:	ldr	r5, [r7, #16]
   18d18:	ldr	r7, [r7, #20]
   18d1c:	stm	sp, {r0, r1, r6}
   18d20:	str	r5, [sp, #12]
   18d24:	str	r7, [sp, #16]
   18d28:	b	18d68 <lchmod@@Base+0x28dc>
   18d2c:	movw	r1, #44333	; 0xad2d
   18d30:	movt	r1, #1
   18d34:	mov	r0, #0
   18d38:	mov	r2, #5
   18d3c:	bl	1180c <dcgettext@plt>
   18d40:	mov	r2, r0
   18d44:	ldr	r3, [r7]
   18d48:	ldmib	r7, {r0, r1, r6}
   18d4c:	ldr	r5, [r7, #16]
   18d50:	ldr	r4, [r7, #20]
   18d54:	ldr	r7, [r7, #24]
   18d58:	stm	sp, {r0, r1, r6}
   18d5c:	str	r5, [sp, #12]
   18d60:	str	r4, [sp, #16]
   18d64:	str	r7, [sp, #20]
   18d68:	mov	r0, r8
   18d6c:	mov	r1, #1
   18d70:	b	18e1c <lchmod@@Base+0x2990>
   18d74:	movw	r1, #44425	; 0xad89
   18d78:	movt	r1, #1
   18d7c:	mov	r0, #0
   18d80:	mov	r2, #5
   18d84:	bl	1180c <dcgettext@plt>
   18d88:	mov	ip, r0
   18d8c:	ldr	r3, [r7]
   18d90:	ldr	r0, [r7, #4]
   18d94:	ldr	r1, [r7, #8]
   18d98:	ldr	r6, [r7, #12]
   18d9c:	ldr	r5, [r7, #16]
   18da0:	ldr	r4, [r7, #20]
   18da4:	ldr	r2, [r7, #24]
   18da8:	ldr	lr, [r7, #28]
   18dac:	ldr	r7, [r7, #32]
   18db0:	stm	sp, {r0, r1, r6}
   18db4:	str	r5, [sp, #12]
   18db8:	str	r4, [sp, #16]
   18dbc:	str	r2, [sp, #20]
   18dc0:	str	lr, [sp, #24]
   18dc4:	str	r7, [sp, #28]
   18dc8:	b	18e10 <lchmod@@Base+0x2984>
   18dcc:	movw	r1, #44377	; 0xad59
   18dd0:	movt	r1, #1
   18dd4:	mov	r0, #0
   18dd8:	mov	r2, #5
   18ddc:	bl	1180c <dcgettext@plt>
   18de0:	mov	ip, r0
   18de4:	ldr	r3, [r7]
   18de8:	ldmib	r7, {r0, r1, r6}
   18dec:	ldr	r5, [r7, #16]
   18df0:	ldr	r4, [r7, #20]
   18df4:	ldr	r2, [r7, #24]
   18df8:	ldr	r7, [r7, #28]
   18dfc:	stm	sp, {r0, r1, r6}
   18e00:	str	r5, [sp, #12]
   18e04:	str	r4, [sp, #16]
   18e08:	str	r2, [sp, #20]
   18e0c:	str	r7, [sp, #24]
   18e10:	mov	r0, r8
   18e14:	mov	r1, #1
   18e18:	mov	r2, ip
   18e1c:	bl	119ec <__fprintf_chk@plt>
   18e20:	sub	sp, fp, #24
   18e24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18e28:	push	{r4, sl, fp, lr}
   18e2c:	add	fp, sp, #8
   18e30:	sub	sp, sp, #8
   18e34:	mov	lr, #0
   18e38:	ldr	ip, [fp, #8]
   18e3c:	ldr	r4, [ip, lr, lsl #2]
   18e40:	add	lr, lr, #1
   18e44:	cmp	r4, #0
   18e48:	bne	18e3c <lchmod@@Base+0x29b0>
   18e4c:	sub	r4, lr, #1
   18e50:	str	ip, [sp]
   18e54:	str	r4, [sp, #4]
   18e58:	bl	18af4 <lchmod@@Base+0x2668>
   18e5c:	sub	sp, fp, #8
   18e60:	pop	{r4, sl, fp, pc}
   18e64:	push	{r4, r5, fp, lr}
   18e68:	add	fp, sp, #8
   18e6c:	sub	sp, sp, #48	; 0x30
   18e70:	mov	ip, #0
   18e74:	ldr	r4, [fp, #8]
   18e78:	add	lr, sp, #8
   18e7c:	ldr	r5, [r4]
   18e80:	str	r5, [lr, ip, lsl #2]
   18e84:	cmp	r5, #0
   18e88:	beq	18e9c <lchmod@@Base+0x2a10>
   18e8c:	add	ip, ip, #1
   18e90:	add	r4, r4, #4
   18e94:	cmp	ip, #10
   18e98:	bcc	18e7c <lchmod@@Base+0x29f0>
   18e9c:	str	lr, [sp]
   18ea0:	str	ip, [sp, #4]
   18ea4:	bl	18af4 <lchmod@@Base+0x2668>
   18ea8:	sub	sp, fp, #8
   18eac:	pop	{r4, r5, fp, pc}
   18eb0:	push	{fp, lr}
   18eb4:	mov	fp, sp
   18eb8:	sub	sp, sp, #8
   18ebc:	add	ip, fp, #8
   18ec0:	str	ip, [sp, #4]
   18ec4:	str	ip, [sp]
   18ec8:	bl	18e64 <lchmod@@Base+0x29d8>
   18ecc:	mov	sp, fp
   18ed0:	pop	{fp, pc}
   18ed4:	push	{fp, lr}
   18ed8:	mov	fp, sp
   18edc:	movw	r0, #49628	; 0xc1dc
   18ee0:	movt	r0, #2
   18ee4:	ldr	r1, [r0]
   18ee8:	movw	r0, #43275	; 0xa90b
   18eec:	movt	r0, #1
   18ef0:	bl	11758 <fputs_unlocked@plt>
   18ef4:	movw	r1, #44537	; 0xadf9
   18ef8:	movt	r1, #1
   18efc:	mov	r0, #0
   18f00:	mov	r2, #5
   18f04:	bl	1180c <dcgettext@plt>
   18f08:	mov	r1, r0
   18f0c:	movw	r2, #44557	; 0xae0d
   18f10:	movt	r2, #1
   18f14:	mov	r0, #1
   18f18:	bl	119d4 <__printf_chk@plt>
   18f1c:	movw	r1, #44579	; 0xae23
   18f20:	movt	r1, #1
   18f24:	mov	r0, #0
   18f28:	mov	r2, #5
   18f2c:	bl	1180c <dcgettext@plt>
   18f30:	mov	r1, r0
   18f34:	movw	r2, #42687	; 0xa6bf
   18f38:	movt	r2, #1
   18f3c:	movw	r3, #43084	; 0xa84c
   18f40:	movt	r3, #1
   18f44:	mov	r0, #1
   18f48:	bl	119d4 <__printf_chk@plt>
   18f4c:	movw	r1, #44599	; 0xae37
   18f50:	movt	r1, #1
   18f54:	mov	r0, #0
   18f58:	mov	r2, #5
   18f5c:	bl	1180c <dcgettext@plt>
   18f60:	mov	r1, r0
   18f64:	movw	r2, #44638	; 0xae5e
   18f68:	movt	r2, #1
   18f6c:	mov	r0, #1
   18f70:	pop	{fp, lr}
   18f74:	b	119d4 <__printf_chk@plt>
   18f78:	b	18f7c <lchmod@@Base+0x2af0>
   18f7c:	push	{r4, r5, r6, sl, fp, lr}
   18f80:	add	fp, sp, #16
   18f84:	mov	r4, r2
   18f88:	mov	r5, r1
   18f8c:	mov	r6, r0
   18f90:	bl	1a09c <lchmod@@Base+0x3c10>
   18f94:	cmp	r0, #0
   18f98:	popne	{r4, r5, r6, sl, fp, pc}
   18f9c:	cmp	r6, #0
   18fa0:	beq	18fb4 <lchmod@@Base+0x2b28>
   18fa4:	cmp	r5, #0
   18fa8:	cmpne	r4, #0
   18fac:	bne	18fb4 <lchmod@@Base+0x2b28>
   18fb0:	pop	{r4, r5, r6, sl, fp, pc}
   18fb4:	bl	19368 <lchmod@@Base+0x2edc>
   18fb8:	push	{fp, lr}
   18fbc:	mov	fp, sp
   18fc0:	bl	1947c <lchmod@@Base+0x2ff0>
   18fc4:	bl	18fcc <lchmod@@Base+0x2b40>
   18fc8:	pop	{fp, pc}
   18fcc:	cmp	r0, #0
   18fd0:	bxne	lr
   18fd4:	push	{fp, lr}
   18fd8:	mov	fp, sp
   18fdc:	bl	19368 <lchmod@@Base+0x2edc>
   18fe0:	push	{fp, lr}
   18fe4:	mov	fp, sp
   18fe8:	bl	19fd0 <lchmod@@Base+0x3b44>
   18fec:	bl	18fcc <lchmod@@Base+0x2b40>
   18ff0:	pop	{fp, pc}
   18ff4:	b	18fb8 <lchmod@@Base+0x2b2c>
   18ff8:	push	{r4, r5, fp, lr}
   18ffc:	add	fp, sp, #8
   19000:	mov	r4, r1
   19004:	mov	r5, r0
   19008:	bl	194ac <lchmod@@Base+0x3020>
   1900c:	cmp	r0, #0
   19010:	popne	{r4, r5, fp, pc}
   19014:	cmp	r5, #0
   19018:	beq	19028 <lchmod@@Base+0x2b9c>
   1901c:	cmp	r4, #0
   19020:	bne	19028 <lchmod@@Base+0x2b9c>
   19024:	pop	{r4, r5, fp, pc}
   19028:	bl	19368 <lchmod@@Base+0x2edc>
   1902c:	push	{fp, lr}
   19030:	mov	fp, sp
   19034:	bl	19fd4 <lchmod@@Base+0x3b48>
   19038:	bl	18fcc <lchmod@@Base+0x2b40>
   1903c:	pop	{fp, pc}
   19040:	push	{fp, lr}
   19044:	mov	fp, sp
   19048:	bl	19fe4 <lchmod@@Base+0x3b58>
   1904c:	bl	18fcc <lchmod@@Base+0x2b40>
   19050:	pop	{fp, pc}
   19054:	push	{fp, lr}
   19058:	mov	fp, sp
   1905c:	mov	r2, r1
   19060:	mov	r1, r0
   19064:	mov	r0, #0
   19068:	bl	18f7c <lchmod@@Base+0x2af0>
   1906c:	pop	{fp, pc}
   19070:	mov	r2, r1
   19074:	mov	r1, r0
   19078:	mov	r0, #0
   1907c:	b	19040 <lchmod@@Base+0x2bb4>
   19080:	mov	r2, #1
   19084:	b	19088 <lchmod@@Base+0x2bfc>
   19088:	push	{r4, r5, fp, lr}
   1908c:	add	fp, sp, #8
   19090:	mov	r4, r1
   19094:	ldr	r5, [r1]
   19098:	cmp	r0, #0
   1909c:	beq	190b4 <lchmod@@Base+0x2c28>
   190a0:	mov	r1, #1
   190a4:	add	r1, r1, r5, lsr #1
   190a8:	adds	r5, r5, r1
   190ac:	bcc	190cc <lchmod@@Base+0x2c40>
   190b0:	bl	19368 <lchmod@@Base+0x2edc>
   190b4:	cmp	r5, #0
   190b8:	bne	190cc <lchmod@@Base+0x2c40>
   190bc:	mov	r1, #64	; 0x40
   190c0:	udiv	r5, r1, r2
   190c4:	cmp	r2, #64	; 0x40
   190c8:	addhi	r5, r5, #1
   190cc:	mov	r1, r5
   190d0:	bl	18f7c <lchmod@@Base+0x2af0>
   190d4:	str	r5, [r4]
   190d8:	pop	{r4, r5, fp, pc}
   190dc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   190e0:	add	fp, sp, #24
   190e4:	mov	r8, r1
   190e8:	ldr	r6, [r1]
   190ec:	add	r1, r6, r6, asr #1
   190f0:	cmp	r1, r6
   190f4:	mvnvs	r1, #-2147483648	; 0x80000000
   190f8:	cmp	r1, r3
   190fc:	mov	r5, r1
   19100:	movgt	r5, r3
   19104:	cmn	r3, #1
   19108:	movle	r5, r1
   1910c:	ldr	r4, [fp, #8]
   19110:	cmn	r4, #1
   19114:	ble	1913c <lchmod@@Base+0x2cb0>
   19118:	cmp	r4, #0
   1911c:	beq	19190 <lchmod@@Base+0x2d04>
   19120:	cmn	r5, #1
   19124:	ble	19164 <lchmod@@Base+0x2cd8>
   19128:	mvn	r7, #-2147483648	; 0x80000000
   1912c:	udiv	r1, r7, r4
   19130:	cmp	r1, r5
   19134:	bge	19190 <lchmod@@Base+0x2d04>
   19138:	b	191a0 <lchmod@@Base+0x2d14>
   1913c:	cmn	r5, #1
   19140:	ble	19180 <lchmod@@Base+0x2cf4>
   19144:	cmn	r4, #1
   19148:	beq	19190 <lchmod@@Base+0x2d04>
   1914c:	mov	r1, #-2147483648	; 0x80000000
   19150:	sdiv	r1, r1, r4
   19154:	mvn	r7, #-2147483648	; 0x80000000
   19158:	cmp	r1, r5
   1915c:	bge	19190 <lchmod@@Base+0x2d04>
   19160:	b	191a0 <lchmod@@Base+0x2d14>
   19164:	beq	19190 <lchmod@@Base+0x2d04>
   19168:	mov	r1, #-2147483648	; 0x80000000
   1916c:	sdiv	r1, r1, r5
   19170:	mvn	r7, #-2147483648	; 0x80000000
   19174:	cmp	r1, r4
   19178:	bge	19190 <lchmod@@Base+0x2d04>
   1917c:	b	191a0 <lchmod@@Base+0x2d14>
   19180:	mvn	r7, #-2147483648	; 0x80000000
   19184:	sdiv	r1, r7, r4
   19188:	cmp	r5, r1
   1918c:	blt	191a0 <lchmod@@Base+0x2d14>
   19190:	mul	r1, r5, r4
   19194:	mov	r7, #64	; 0x40
   19198:	cmp	r1, #63	; 0x3f
   1919c:	bgt	191a8 <lchmod@@Base+0x2d1c>
   191a0:	sdiv	r5, r7, r4
   191a4:	mul	r1, r5, r4
   191a8:	cmp	r0, #0
   191ac:	moveq	r7, #0
   191b0:	streq	r7, [r8]
   191b4:	sub	r7, r5, r6
   191b8:	cmp	r7, r2
   191bc:	bge	19268 <lchmod@@Base+0x2ddc>
   191c0:	add	r5, r6, r2
   191c4:	mov	r1, #0
   191c8:	cmp	r5, r3
   191cc:	mov	r2, #0
   191d0:	movwgt	r2, #1
   191d4:	cmn	r3, #1
   191d8:	movwgt	r1, #1
   191dc:	cmp	r5, r6
   191e0:	bvs	19250 <lchmod@@Base+0x2dc4>
   191e4:	ands	r1, r1, r2
   191e8:	bne	19250 <lchmod@@Base+0x2dc4>
   191ec:	cmn	r4, #1
   191f0:	ble	19218 <lchmod@@Base+0x2d8c>
   191f4:	cmp	r4, #0
   191f8:	beq	19264 <lchmod@@Base+0x2dd8>
   191fc:	cmn	r5, #1
   19200:	ble	1923c <lchmod@@Base+0x2db0>
   19204:	mvn	r1, #-2147483648	; 0x80000000
   19208:	udiv	r1, r1, r4
   1920c:	cmp	r1, r5
   19210:	bge	19264 <lchmod@@Base+0x2dd8>
   19214:	b	19250 <lchmod@@Base+0x2dc4>
   19218:	cmn	r5, #1
   1921c:	ble	19254 <lchmod@@Base+0x2dc8>
   19220:	cmn	r4, #1
   19224:	beq	19264 <lchmod@@Base+0x2dd8>
   19228:	mov	r1, #-2147483648	; 0x80000000
   1922c:	sdiv	r1, r1, r4
   19230:	cmp	r1, r5
   19234:	bge	19264 <lchmod@@Base+0x2dd8>
   19238:	b	19250 <lchmod@@Base+0x2dc4>
   1923c:	beq	19264 <lchmod@@Base+0x2dd8>
   19240:	mov	r1, #-2147483648	; 0x80000000
   19244:	sdiv	r1, r1, r5
   19248:	cmp	r1, r4
   1924c:	bge	19264 <lchmod@@Base+0x2dd8>
   19250:	bl	19368 <lchmod@@Base+0x2edc>
   19254:	mvn	r1, #-2147483648	; 0x80000000
   19258:	sdiv	r1, r1, r4
   1925c:	cmp	r5, r1
   19260:	blt	19250 <lchmod@@Base+0x2dc4>
   19264:	mul	r1, r5, r4
   19268:	bl	18ff8 <lchmod@@Base+0x2b6c>
   1926c:	str	r5, [r8]
   19270:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19274:	mov	r1, #1
   19278:	b	1927c <lchmod@@Base+0x2df0>
   1927c:	push	{fp, lr}
   19280:	mov	fp, sp
   19284:	bl	19428 <lchmod@@Base+0x2f9c>
   19288:	bl	18fcc <lchmod@@Base+0x2b40>
   1928c:	pop	{fp, pc}
   19290:	mov	r1, #1
   19294:	b	19298 <lchmod@@Base+0x2e0c>
   19298:	push	{fp, lr}
   1929c:	mov	fp, sp
   192a0:	bl	19fe0 <lchmod@@Base+0x3b54>
   192a4:	bl	18fcc <lchmod@@Base+0x2b40>
   192a8:	pop	{fp, pc}
   192ac:	push	{r4, r5, r6, sl, fp, lr}
   192b0:	add	fp, sp, #16
   192b4:	mov	r4, r1
   192b8:	mov	r5, r0
   192bc:	mov	r0, r1
   192c0:	bl	18fb8 <lchmod@@Base+0x2b2c>
   192c4:	mov	r6, r0
   192c8:	mov	r1, r5
   192cc:	mov	r2, r4
   192d0:	bl	117dc <memcpy@plt>
   192d4:	mov	r0, r6
   192d8:	pop	{r4, r5, r6, sl, fp, pc}
   192dc:	push	{r4, r5, r6, sl, fp, lr}
   192e0:	add	fp, sp, #16
   192e4:	mov	r4, r1
   192e8:	mov	r5, r0
   192ec:	mov	r0, r1
   192f0:	bl	18fe0 <lchmod@@Base+0x2b54>
   192f4:	mov	r6, r0
   192f8:	mov	r1, r5
   192fc:	mov	r2, r4
   19300:	bl	117dc <memcpy@plt>
   19304:	mov	r0, r6
   19308:	pop	{r4, r5, r6, sl, fp, pc}
   1930c:	push	{r4, r5, r6, sl, fp, lr}
   19310:	add	fp, sp, #16
   19314:	mov	r4, r1
   19318:	mov	r5, r0
   1931c:	add	r0, r1, #1
   19320:	bl	18fe0 <lchmod@@Base+0x2b54>
   19324:	mov	r6, r0
   19328:	mov	r0, #0
   1932c:	strb	r0, [r6, r4]
   19330:	mov	r0, r6
   19334:	mov	r1, r5
   19338:	mov	r2, r4
   1933c:	bl	117dc <memcpy@plt>
   19340:	mov	r0, r6
   19344:	pop	{r4, r5, r6, sl, fp, pc}
   19348:	push	{r4, sl, fp, lr}
   1934c:	add	fp, sp, #8
   19350:	mov	r4, r0
   19354:	bl	11974 <strlen@plt>
   19358:	add	r1, r0, #1
   1935c:	mov	r0, r4
   19360:	pop	{r4, sl, fp, lr}
   19364:	b	192ac <lchmod@@Base+0x2e20>
   19368:	push	{fp, lr}
   1936c:	mov	fp, sp
   19370:	movw	r0, #49540	; 0xc184
   19374:	movt	r0, #2
   19378:	ldr	r4, [r0]
   1937c:	movw	r1, #44714	; 0xaeaa
   19380:	movt	r1, #1
   19384:	mov	r0, #0
   19388:	mov	r2, #5
   1938c:	bl	1180c <dcgettext@plt>
   19390:	mov	r3, r0
   19394:	movw	r2, #43463	; 0xa9c7
   19398:	movt	r2, #1
   1939c:	mov	r0, r4
   193a0:	mov	r1, #0
   193a4:	bl	118d8 <error@plt>
   193a8:	bl	11af4 <abort@plt>
   193ac:	push	{fp, lr}
   193b0:	mov	fp, sp
   193b4:	orr	r1, r1, #512	; 0x200
   193b8:	bl	1332c <__assert_fail@plt+0x17d8>
   193bc:	cmp	r0, #0
   193c0:	popne	{fp, pc}
   193c4:	bl	119a4 <__errno_location@plt>
   193c8:	ldr	r0, [r0]
   193cc:	cmp	r0, #22
   193d0:	bne	193f4 <lchmod@@Base+0x2f68>
   193d4:	movw	r0, #44731	; 0xaebb
   193d8:	movt	r0, #1
   193dc:	movw	r1, #44747	; 0xaecb
   193e0:	movt	r1, #1
   193e4:	movw	r3, #44758	; 0xaed6
   193e8:	movt	r3, #1
   193ec:	mov	r2, #41	; 0x29
   193f0:	bl	11b54 <__assert_fail@plt>
   193f4:	bl	19368 <lchmod@@Base+0x2edc>
   193f8:	ldr	r0, [r0, #48]	; 0x30
   193fc:	and	r2, r0, #17
   19400:	mov	r0, #1
   19404:	cmp	r2, #16
   19408:	beq	19424 <lchmod@@Base+0x2f98>
   1940c:	mov	r0, #0
   19410:	cmp	r2, #17
   19414:	bxne	lr
   19418:	ldr	r0, [r1, #48]	; 0x30
   1941c:	cmp	r0, #0
   19420:	movwne	r0, #1
   19424:	bx	lr
   19428:	clz	r2, r1
   1942c:	lsr	r2, r2, #5
   19430:	clz	r3, r0
   19434:	lsr	r3, r3, #5
   19438:	orrs	r2, r3, r2
   1943c:	movwne	r1, #1
   19440:	movwne	r0, #1
   19444:	cmp	r1, #0
   19448:	beq	19478 <lchmod@@Base+0x2fec>
   1944c:	mvn	r2, #-2147483648	; 0x80000000
   19450:	udiv	r2, r2, r1
   19454:	cmp	r2, r0
   19458:	bcs	19478 <lchmod@@Base+0x2fec>
   1945c:	push	{fp, lr}
   19460:	mov	fp, sp
   19464:	bl	119a4 <__errno_location@plt>
   19468:	mov	r1, #12
   1946c:	str	r1, [r0]
   19470:	mov	r0, #0
   19474:	pop	{fp, pc}
   19478:	b	1174c <calloc@plt>
   1947c:	cmp	r0, #0
   19480:	movweq	r0, #1
   19484:	cmn	r0, #1
   19488:	ble	19490 <lchmod@@Base+0x3004>
   1948c:	b	118fc <malloc@plt>
   19490:	push	{fp, lr}
   19494:	mov	fp, sp
   19498:	bl	119a4 <__errno_location@plt>
   1949c:	mov	r1, #12
   194a0:	str	r1, [r0]
   194a4:	mov	r0, #0
   194a8:	pop	{fp, pc}
   194ac:	push	{fp, lr}
   194b0:	mov	fp, sp
   194b4:	cmp	r0, #0
   194b8:	beq	194d4 <lchmod@@Base+0x3048>
   194bc:	cmp	r1, #0
   194c0:	beq	194e0 <lchmod@@Base+0x3054>
   194c4:	cmn	r1, #1
   194c8:	ble	194ec <lchmod@@Base+0x3060>
   194cc:	pop	{fp, lr}
   194d0:	b	11824 <realloc@plt>
   194d4:	mov	r0, r1
   194d8:	pop	{fp, lr}
   194dc:	b	1947c <lchmod@@Base+0x2ff0>
   194e0:	bl	13304 <__assert_fail@plt+0x17b0>
   194e4:	mov	r0, #0
   194e8:	pop	{fp, pc}
   194ec:	bl	119a4 <__errno_location@plt>
   194f0:	mov	r1, #12
   194f4:	str	r1, [r0]
   194f8:	mov	r0, #0
   194fc:	pop	{fp, pc}
   19500:	sub	r0, r0, #1
   19504:	ldrb	r3, [r0, #1]!
   19508:	cmp	r3, #47	; 0x2f
   1950c:	beq	19504 <lchmod@@Base+0x3078>
   19510:	mov	r2, #0
   19514:	mov	r1, r0
   19518:	b	19534 <lchmod@@Base+0x30a8>
   1951c:	cmp	r3, #0
   19520:	bxeq	lr
   19524:	tst	r2, #1
   19528:	movne	r0, r1
   1952c:	mov	r2, #0
   19530:	ldrb	r3, [r1, #1]!
   19534:	uxtb	r3, r3
   19538:	cmp	r3, #47	; 0x2f
   1953c:	bne	1951c <lchmod@@Base+0x3090>
   19540:	mov	r2, #1
   19544:	ldrb	r3, [r1, #1]!
   19548:	b	19534 <lchmod@@Base+0x30a8>
   1954c:	push	{r4, sl, fp, lr}
   19550:	add	fp, sp, #8
   19554:	mov	r4, r0
   19558:	bl	11974 <strlen@plt>
   1955c:	mov	r1, r0
   19560:	sub	r2, r4, #1
   19564:	mov	r0, r1
   19568:	cmp	r1, #2
   1956c:	popcc	{r4, sl, fp, pc}
   19570:	ldrb	r3, [r2, r0]
   19574:	sub	r1, r0, #1
   19578:	cmp	r3, #47	; 0x2f
   1957c:	beq	19564 <lchmod@@Base+0x30d8>
   19580:	pop	{r4, sl, fp, pc}
   19584:	push	{r4, r5, fp, lr}
   19588:	add	fp, sp, #8
   1958c:	rsb	lr, r2, #64	; 0x40
   19590:	lsr	ip, r0, lr
   19594:	rsb	r3, lr, #32
   19598:	orr	ip, ip, r1, lsl r3
   1959c:	rsb	r4, r2, #32
   195a0:	cmp	r4, #0
   195a4:	lsrge	ip, r1, r4
   195a8:	lsl	r3, r0, r2
   195ac:	sub	r5, r2, #32
   195b0:	cmp	r5, #0
   195b4:	movwge	r3, #0
   195b8:	orr	ip, ip, r3
   195bc:	lsr	r3, r0, r4
   195c0:	orr	r2, r3, r1, lsl r2
   195c4:	lslge	r2, r0, r5
   195c8:	lsr	r0, r1, lr
   195cc:	cmp	r4, #0
   195d0:	movwge	r0, #0
   195d4:	orr	r1, r0, r2
   195d8:	mov	r0, ip
   195dc:	pop	{r4, r5, fp, pc}
   195e0:	push	{r4, r5, fp, lr}
   195e4:	add	fp, sp, #8
   195e8:	lsr	ip, r0, r2
   195ec:	rsb	r3, r2, #32
   195f0:	orr	ip, ip, r1, lsl r3
   195f4:	sub	lr, r2, #32
   195f8:	cmp	lr, #0
   195fc:	lsrge	ip, r1, lr
   19600:	rsb	r4, r2, #64	; 0x40
   19604:	lsl	r5, r0, r4
   19608:	cmp	r3, #0
   1960c:	movwge	r5, #0
   19610:	orr	ip, r5, ip
   19614:	rsb	r5, r4, #32
   19618:	lsr	r5, r0, r5
   1961c:	orr	r4, r5, r1, lsl r4
   19620:	cmp	r3, #0
   19624:	lslge	r4, r0, r3
   19628:	lsr	r0, r1, r2
   1962c:	cmp	lr, #0
   19630:	movwge	r0, #0
   19634:	orr	r1, r4, r0
   19638:	mov	r0, ip
   1963c:	pop	{r4, r5, fp, pc}
   19640:	rsb	r1, r1, #32
   19644:	ror	r0, r0, r1
   19648:	bx	lr
   1964c:	ror	r0, r0, r1
   19650:	bx	lr
   19654:	rsb	r1, r1, #32
   19658:	ror	r0, r0, r1
   1965c:	bx	lr
   19660:	ror	r0, r0, r1
   19664:	bx	lr
   19668:	and	r2, r1, #15
   1966c:	lsl	r2, r0, r2
   19670:	rsb	r1, r1, #0
   19674:	and	r1, r1, #15
   19678:	orr	r0, r2, r0, lsr r1
   1967c:	uxth	r0, r0
   19680:	bx	lr
   19684:	and	r2, r1, #15
   19688:	lsr	r2, r0, r2
   1968c:	rsb	r1, r1, #0
   19690:	and	r1, r1, #15
   19694:	orr	r0, r2, r0, lsl r1
   19698:	uxth	r0, r0
   1969c:	bx	lr
   196a0:	and	r2, r1, #7
   196a4:	lsl	r2, r0, r2
   196a8:	rsb	r1, r1, #0
   196ac:	and	r1, r1, #7
   196b0:	orr	r0, r2, r0, lsr r1
   196b4:	uxtb	r0, r0
   196b8:	bx	lr
   196bc:	and	r2, r1, #7
   196c0:	lsr	r2, r0, r2
   196c4:	rsb	r1, r1, #0
   196c8:	and	r1, r1, #7
   196cc:	orr	r0, r2, r0, lsl r1
   196d0:	uxtb	r0, r0
   196d4:	bx	lr
   196d8:	mov	r1, r0
   196dc:	sub	r2, r0, #65	; 0x41
   196e0:	mov	r0, #1
   196e4:	cmp	r2, #26
   196e8:	subcs	r2, r1, #97	; 0x61
   196ec:	cmpcs	r2, #26
   196f0:	bcs	196f8 <lchmod@@Base+0x326c>
   196f4:	bx	lr
   196f8:	sub	r1, r1, #48	; 0x30
   196fc:	cmp	r1, #10
   19700:	movcs	r0, #0
   19704:	bx	lr
   19708:	mov	r1, r0
   1970c:	sub	r2, r0, #65	; 0x41
   19710:	mov	r0, #1
   19714:	cmp	r2, #26
   19718:	subcs	r1, r1, #97	; 0x61
   1971c:	cmpcs	r1, #26
   19720:	movcs	r0, #0
   19724:	bx	lr
   19728:	mov	r1, #0
   1972c:	cmp	r0, #128	; 0x80
   19730:	movwcc	r1, #1
   19734:	mov	r0, r1
   19738:	bx	lr
   1973c:	sub	r1, r0, #9
   19740:	clz	r1, r1
   19744:	lsr	r1, r1, #5
   19748:	sub	r0, r0, #32
   1974c:	clz	r0, r0
   19750:	lsr	r0, r0, #5
   19754:	orr	r0, r0, r1
   19758:	bx	lr
   1975c:	mov	r1, r0
   19760:	mov	r0, #1
   19764:	cmp	r1, #32
   19768:	bxcc	lr
   1976c:	cmp	r1, #127	; 0x7f
   19770:	movne	r0, #0
   19774:	bx	lr
   19778:	sub	r1, r0, #48	; 0x30
   1977c:	mov	r0, #0
   19780:	cmp	r1, #10
   19784:	movwcc	r0, #1
   19788:	bx	lr
   1978c:	sub	r1, r0, #33	; 0x21
   19790:	mov	r0, #0
   19794:	cmp	r1, #94	; 0x5e
   19798:	movwcc	r0, #1
   1979c:	bx	lr
   197a0:	sub	r1, r0, #97	; 0x61
   197a4:	mov	r0, #0
   197a8:	cmp	r1, #26
   197ac:	movwcc	r0, #1
   197b0:	bx	lr
   197b4:	sub	r1, r0, #32
   197b8:	mov	r0, #0
   197bc:	cmp	r1, #95	; 0x5f
   197c0:	movwcc	r0, #1
   197c4:	bx	lr
   197c8:	sub	r1, r0, #33	; 0x21
   197cc:	cmp	r1, #93	; 0x5d
   197d0:	bhi	1995c <lchmod@@Base+0x34d0>
   197d4:	mov	r0, #1
   197d8:	add	r2, pc, #0
   197dc:	ldr	pc, [r2, r1, lsl #2]
   197e0:	andeq	r9, r1, r8, asr r9
   197e4:	andeq	r9, r1, r8, asr r9
   197e8:	andeq	r9, r1, r8, asr r9
   197ec:	andeq	r9, r1, r8, asr r9
   197f0:	andeq	r9, r1, r8, asr r9
   197f4:	andeq	r9, r1, r8, asr r9
   197f8:	andeq	r9, r1, r8, asr r9
   197fc:	andeq	r9, r1, r8, asr r9
   19800:	andeq	r9, r1, r8, asr r9
   19804:	andeq	r9, r1, r8, asr r9
   19808:	andeq	r9, r1, r8, asr r9
   1980c:	andeq	r9, r1, r8, asr r9
   19810:	andeq	r9, r1, r8, asr r9
   19814:	andeq	r9, r1, r8, asr r9
   19818:	andeq	r9, r1, r8, asr r9
   1981c:	andeq	r9, r1, ip, asr r9
   19820:	andeq	r9, r1, ip, asr r9
   19824:	andeq	r9, r1, ip, asr r9
   19828:	andeq	r9, r1, ip, asr r9
   1982c:	andeq	r9, r1, ip, asr r9
   19830:	andeq	r9, r1, ip, asr r9
   19834:	andeq	r9, r1, ip, asr r9
   19838:	andeq	r9, r1, ip, asr r9
   1983c:	andeq	r9, r1, ip, asr r9
   19840:	andeq	r9, r1, ip, asr r9
   19844:	andeq	r9, r1, r8, asr r9
   19848:	andeq	r9, r1, r8, asr r9
   1984c:	andeq	r9, r1, r8, asr r9
   19850:	andeq	r9, r1, r8, asr r9
   19854:	andeq	r9, r1, r8, asr r9
   19858:	andeq	r9, r1, r8, asr r9
   1985c:	andeq	r9, r1, r8, asr r9
   19860:	andeq	r9, r1, ip, asr r9
   19864:	andeq	r9, r1, ip, asr r9
   19868:	andeq	r9, r1, ip, asr r9
   1986c:	andeq	r9, r1, ip, asr r9
   19870:	andeq	r9, r1, ip, asr r9
   19874:	andeq	r9, r1, ip, asr r9
   19878:	andeq	r9, r1, ip, asr r9
   1987c:	andeq	r9, r1, ip, asr r9
   19880:	andeq	r9, r1, ip, asr r9
   19884:	andeq	r9, r1, ip, asr r9
   19888:	andeq	r9, r1, ip, asr r9
   1988c:	andeq	r9, r1, ip, asr r9
   19890:	andeq	r9, r1, ip, asr r9
   19894:	andeq	r9, r1, ip, asr r9
   19898:	andeq	r9, r1, ip, asr r9
   1989c:	andeq	r9, r1, ip, asr r9
   198a0:	andeq	r9, r1, ip, asr r9
   198a4:	andeq	r9, r1, ip, asr r9
   198a8:	andeq	r9, r1, ip, asr r9
   198ac:	andeq	r9, r1, ip, asr r9
   198b0:	andeq	r9, r1, ip, asr r9
   198b4:	andeq	r9, r1, ip, asr r9
   198b8:	andeq	r9, r1, ip, asr r9
   198bc:	andeq	r9, r1, ip, asr r9
   198c0:	andeq	r9, r1, ip, asr r9
   198c4:	andeq	r9, r1, ip, asr r9
   198c8:	andeq	r9, r1, r8, asr r9
   198cc:	andeq	r9, r1, r8, asr r9
   198d0:	andeq	r9, r1, r8, asr r9
   198d4:	andeq	r9, r1, r8, asr r9
   198d8:	andeq	r9, r1, r8, asr r9
   198dc:	andeq	r9, r1, r8, asr r9
   198e0:	andeq	r9, r1, ip, asr r9
   198e4:	andeq	r9, r1, ip, asr r9
   198e8:	andeq	r9, r1, ip, asr r9
   198ec:	andeq	r9, r1, ip, asr r9
   198f0:	andeq	r9, r1, ip, asr r9
   198f4:	andeq	r9, r1, ip, asr r9
   198f8:	andeq	r9, r1, ip, asr r9
   198fc:	andeq	r9, r1, ip, asr r9
   19900:	andeq	r9, r1, ip, asr r9
   19904:	andeq	r9, r1, ip, asr r9
   19908:	andeq	r9, r1, ip, asr r9
   1990c:	andeq	r9, r1, ip, asr r9
   19910:	andeq	r9, r1, ip, asr r9
   19914:	andeq	r9, r1, ip, asr r9
   19918:	andeq	r9, r1, ip, asr r9
   1991c:	andeq	r9, r1, ip, asr r9
   19920:	andeq	r9, r1, ip, asr r9
   19924:	andeq	r9, r1, ip, asr r9
   19928:	andeq	r9, r1, ip, asr r9
   1992c:	andeq	r9, r1, ip, asr r9
   19930:	andeq	r9, r1, ip, asr r9
   19934:	andeq	r9, r1, ip, asr r9
   19938:	andeq	r9, r1, ip, asr r9
   1993c:	andeq	r9, r1, ip, asr r9
   19940:	andeq	r9, r1, ip, asr r9
   19944:	andeq	r9, r1, ip, asr r9
   19948:	andeq	r9, r1, r8, asr r9
   1994c:	andeq	r9, r1, r8, asr r9
   19950:	andeq	r9, r1, r8, asr r9
   19954:	andeq	r9, r1, r8, asr r9
   19958:	bx	lr
   1995c:	mov	r0, #0
   19960:	bx	lr
   19964:	sub	r0, r0, #9
   19968:	cmp	r0, #23
   1996c:	movhi	r0, #0
   19970:	bxhi	lr
   19974:	bic	r0, r0, #-16777216	; 0xff000000
   19978:	movw	r1, #31
   1997c:	movt	r1, #128	; 0x80
   19980:	mov	r2, #1
   19984:	and	r0, r2, r1, lsr r0
   19988:	bx	lr
   1998c:	sub	r1, r0, #65	; 0x41
   19990:	mov	r0, #0
   19994:	cmp	r1, #26
   19998:	movwcc	r0, #1
   1999c:	bx	lr
   199a0:	mov	r1, r0
   199a4:	sub	r2, r0, #48	; 0x30
   199a8:	mov	r0, #1
   199ac:	cmp	r2, #22
   199b0:	bhi	199c8 <lchmod@@Base+0x353c>
   199b4:	mov	ip, #1
   199b8:	movw	r3, #1023	; 0x3ff
   199bc:	movt	r3, #126	; 0x7e
   199c0:	tst	r3, ip, lsl r2
   199c4:	bxne	lr
   199c8:	sub	r1, r1, #97	; 0x61
   199cc:	cmp	r1, #6
   199d0:	movcs	r0, #0
   199d4:	bxcs	lr
   199d8:	bx	lr
   199dc:	sub	r1, r0, #65	; 0x41
   199e0:	cmp	r1, #26
   199e4:	addcc	r0, r0, #32
   199e8:	bx	lr
   199ec:	sub	r1, r0, #97	; 0x61
   199f0:	cmp	r1, #26
   199f4:	subcc	r0, r0, #32
   199f8:	bx	lr
   199fc:	push	{r4, r5, r6, sl, fp, lr}
   19a00:	add	fp, sp, #16
   19a04:	mov	r4, r0
   19a08:	bl	118b4 <__fpending@plt>
   19a0c:	mov	r5, r0
   19a10:	mov	r0, r4
   19a14:	bl	118c0 <ferror_unlocked@plt>
   19a18:	mov	r6, r0
   19a1c:	mov	r0, r4
   19a20:	bl	19ba0 <lchmod@@Base+0x3714>
   19a24:	cmp	r6, #0
   19a28:	beq	19a48 <lchmod@@Base+0x35bc>
   19a2c:	mvn	r4, #0
   19a30:	cmp	r0, #0
   19a34:	bne	19a7c <lchmod@@Base+0x35f0>
   19a38:	bl	119a4 <__errno_location@plt>
   19a3c:	mov	r1, #0
   19a40:	str	r1, [r0]
   19a44:	b	19a7c <lchmod@@Base+0x35f0>
   19a48:	cmp	r0, #0
   19a4c:	mov	r4, r0
   19a50:	mvnne	r4, #0
   19a54:	cmp	r5, #0
   19a58:	bne	19a7c <lchmod@@Base+0x35f0>
   19a5c:	cmp	r0, #0
   19a60:	beq	19a7c <lchmod@@Base+0x35f0>
   19a64:	bl	119a4 <__errno_location@plt>
   19a68:	ldr	r0, [r0]
   19a6c:	subs	r4, r0, #9
   19a70:	mvnne	r4, #0
   19a74:	mov	r0, r4
   19a78:	pop	{r4, r5, r6, sl, fp, pc}
   19a7c:	mov	r0, r4
   19a80:	pop	{r4, r5, r6, sl, fp, pc}
   19a84:	mov	r1, #0
   19a88:	movw	r2, #62998	; 0xf616
   19a8c:	movt	r2, #149	; 0x95
   19a90:	str	r1, [r0, #16]
   19a94:	str	r1, [r0, #20]
   19a98:	str	r2, [r0, #24]
   19a9c:	bx	lr
   19aa0:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   19aa4:	add	fp, sp, #24
   19aa8:	mov	r5, r1
   19aac:	mov	r4, r0
   19ab0:	ldr	r0, [r0, #24]
   19ab4:	movw	r1, #62998	; 0xf616
   19ab8:	movt	r1, #149	; 0x95
   19abc:	cmp	r0, r1
   19ac0:	bne	19b60 <lchmod@@Base+0x36d4>
   19ac4:	mov	r1, r4
   19ac8:	ldr	r2, [r1, #16]!
   19acc:	ldr	r3, [r1, #4]
   19ad0:	orrs	r0, r2, r3
   19ad4:	beq	19b14 <lchmod@@Base+0x3688>
   19ad8:	ldm	r4, {r0, r7}
   19adc:	ldr	r6, [r5, #96]	; 0x60
   19ae0:	ldr	r9, [r5, #100]	; 0x64
   19ae4:	eor	r7, r9, r7
   19ae8:	eor	r0, r6, r0
   19aec:	orrs	r0, r0, r7
   19af0:	bne	19b14 <lchmod@@Base+0x3688>
   19af4:	ldr	r0, [r4, #8]
   19af8:	ldr	r7, [r4, #12]
   19afc:	ldm	r5, {r6, r9}
   19b00:	eor	r7, r9, r7
   19b04:	eor	r0, r6, r0
   19b08:	orrs	r0, r0, r7
   19b0c:	mov	r0, #1
   19b10:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   19b14:	adds	r6, r2, #1
   19b18:	adc	r7, r3, #0
   19b1c:	strd	r6, [r1]
   19b20:	mov	r0, r6
   19b24:	mov	r1, r7
   19b28:	bl	19b80 <lchmod@@Base+0x36f4>
   19b2c:	mov	r1, r0
   19b30:	mov	r0, #0
   19b34:	cmp	r1, #0
   19b38:	beq	19b5c <lchmod@@Base+0x36d0>
   19b3c:	orrs	r1, r6, r7
   19b40:	moveq	r0, #1
   19b44:	popeq	{r4, r5, r6, r7, r9, sl, fp, pc}
   19b48:	ldrd	r2, [r5]
   19b4c:	str	r3, [r4, #12]
   19b50:	str	r2, [r4, #8]
   19b54:	ldrd	r2, [r5, #96]	; 0x60
   19b58:	stm	r4, {r2, r3}
   19b5c:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   19b60:	movw	r0, #44836	; 0xaf24
   19b64:	movt	r0, #1
   19b68:	movw	r1, #44860	; 0xaf3c
   19b6c:	movt	r1, #1
   19b70:	movw	r3, #44878	; 0xaf4e
   19b74:	movt	r3, #1
   19b78:	mov	r2, #60	; 0x3c
   19b7c:	bl	11b54 <__assert_fail@plt>
   19b80:	subs	r2, r0, #1
   19b84:	and	r0, r2, r0
   19b88:	sbc	r2, r1, #0
   19b8c:	and	r1, r2, r1
   19b90:	orr	r0, r0, r1
   19b94:	clz	r0, r0
   19b98:	lsr	r0, r0, #5
   19b9c:	bx	lr
   19ba0:	push	{r4, r5, fp, lr}
   19ba4:	add	fp, sp, #8
   19ba8:	sub	sp, sp, #8
   19bac:	mov	r4, r0
   19bb0:	bl	119e0 <fileno@plt>
   19bb4:	cmn	r0, #1
   19bb8:	ble	19c30 <lchmod@@Base+0x37a4>
   19bbc:	mov	r0, r4
   19bc0:	bl	11914 <__freading@plt>
   19bc4:	cmp	r0, #0
   19bc8:	beq	19bf4 <lchmod@@Base+0x3768>
   19bcc:	mov	r0, r4
   19bd0:	bl	119e0 <fileno@plt>
   19bd4:	mov	r1, #1
   19bd8:	str	r1, [sp]
   19bdc:	mov	r2, #0
   19be0:	mov	r3, #0
   19be4:	bl	11890 <lseek64@plt>
   19be8:	and	r0, r0, r1
   19bec:	cmn	r0, #1
   19bf0:	beq	19c30 <lchmod@@Base+0x37a4>
   19bf4:	mov	r0, r4
   19bf8:	bl	19e6c <lchmod@@Base+0x39e0>
   19bfc:	cmp	r0, #0
   19c00:	beq	19c30 <lchmod@@Base+0x37a4>
   19c04:	bl	119a4 <__errno_location@plt>
   19c08:	ldr	r5, [r0]
   19c0c:	mov	r0, r4
   19c10:	bl	119f8 <fclose@plt>
   19c14:	cmp	r5, #0
   19c18:	beq	19c28 <lchmod@@Base+0x379c>
   19c1c:	bl	119a4 <__errno_location@plt>
   19c20:	str	r5, [r0]
   19c24:	mvn	r0, #0
   19c28:	sub	sp, fp, #8
   19c2c:	pop	{r4, r5, fp, pc}
   19c30:	mov	r0, r4
   19c34:	sub	sp, fp, #8
   19c38:	pop	{r4, r5, fp, lr}
   19c3c:	b	119f8 <fclose@plt>
   19c40:	sub	sp, sp, #8
   19c44:	push	{fp, lr}
   19c48:	mov	fp, sp
   19c4c:	sub	sp, sp, #8
   19c50:	str	r3, [fp, #12]
   19c54:	str	r2, [fp, #8]
   19c58:	add	r2, fp, #8
   19c5c:	str	r2, [sp, #4]
   19c60:	cmp	r1, #11
   19c64:	bhi	19ca4 <lchmod@@Base+0x3818>
   19c68:	mov	r2, #1
   19c6c:	movw	r3, #1300	; 0x514
   19c70:	tst	r3, r2, lsl r1
   19c74:	bne	19cf4 <lchmod@@Base+0x3868>
   19c78:	movw	r3, #2570	; 0xa0a
   19c7c:	tst	r3, r2, lsl r1
   19c80:	bne	19ccc <lchmod@@Base+0x3840>
   19c84:	cmp	r1, #0
   19c88:	bne	19ca4 <lchmod@@Base+0x3818>
   19c8c:	ldr	r1, [sp, #4]
   19c90:	add	r2, r1, #4
   19c94:	str	r2, [sp, #4]
   19c98:	ldr	r1, [r1]
   19c9c:	bl	19d18 <lchmod@@Base+0x388c>
   19ca0:	b	19d08 <lchmod@@Base+0x387c>
   19ca4:	sub	r2, r1, #1024	; 0x400
   19ca8:	cmp	r2, #10
   19cac:	bhi	19cf4 <lchmod@@Base+0x3868>
   19cb0:	mov	ip, #1
   19cb4:	movw	r3, #645	; 0x285
   19cb8:	tst	r3, ip, lsl r2
   19cbc:	bne	19cf4 <lchmod@@Base+0x3868>
   19cc0:	movw	r3, #1282	; 0x502
   19cc4:	tst	r3, ip, lsl r2
   19cc8:	beq	19cd4 <lchmod@@Base+0x3848>
   19ccc:	bl	11a10 <fcntl64@plt>
   19cd0:	b	19d08 <lchmod@@Base+0x387c>
   19cd4:	cmp	r2, #6
   19cd8:	bne	19cf4 <lchmod@@Base+0x3868>
   19cdc:	ldr	r1, [sp, #4]
   19ce0:	add	r2, r1, #4
   19ce4:	str	r2, [sp, #4]
   19ce8:	ldr	r1, [r1]
   19cec:	bl	19d24 <lchmod@@Base+0x3898>
   19cf0:	b	19d08 <lchmod@@Base+0x387c>
   19cf4:	ldr	r2, [sp, #4]
   19cf8:	add	r3, r2, #4
   19cfc:	str	r3, [sp, #4]
   19d00:	ldr	r2, [r2]
   19d04:	bl	11a10 <fcntl64@plt>
   19d08:	mov	sp, fp
   19d0c:	pop	{fp, lr}
   19d10:	add	sp, sp, #8
   19d14:	bx	lr
   19d18:	mov	r2, r1
   19d1c:	mov	r1, #0
   19d20:	b	11a10 <fcntl64@plt>
   19d24:	push	{r4, r5, r6, r7, fp, lr}
   19d28:	add	fp, sp, #16
   19d2c:	mov	r5, r1
   19d30:	mov	r6, r0
   19d34:	movw	r7, #49960	; 0xc328
   19d38:	movt	r7, #2
   19d3c:	ldr	r0, [r7]
   19d40:	cmp	r0, #0
   19d44:	blt	19da8 <lchmod@@Base+0x391c>
   19d48:	mov	r0, r6
   19d4c:	movw	r1, #1030	; 0x406
   19d50:	mov	r2, r5
   19d54:	bl	11a10 <fcntl64@plt>
   19d58:	mov	r4, r0
   19d5c:	cmn	r0, #1
   19d60:	bgt	19d94 <lchmod@@Base+0x3908>
   19d64:	bl	119a4 <__errno_location@plt>
   19d68:	ldr	r0, [r0]
   19d6c:	cmp	r0, #22
   19d70:	bne	19d94 <lchmod@@Base+0x3908>
   19d74:	mov	r0, r6
   19d78:	mov	r1, r5
   19d7c:	bl	19d18 <lchmod@@Base+0x388c>
   19d80:	mov	r4, r0
   19d84:	cmp	r0, #0
   19d88:	blt	19df8 <lchmod@@Base+0x396c>
   19d8c:	mvn	r0, #0
   19d90:	b	19d98 <lchmod@@Base+0x390c>
   19d94:	mov	r0, #1
   19d98:	str	r0, [r7]
   19d9c:	cmp	r4, #0
   19da0:	bge	19dc0 <lchmod@@Base+0x3934>
   19da4:	b	19df8 <lchmod@@Base+0x396c>
   19da8:	mov	r0, r6
   19dac:	mov	r1, r5
   19db0:	bl	19d18 <lchmod@@Base+0x388c>
   19db4:	mov	r4, r0
   19db8:	cmp	r4, #0
   19dbc:	blt	19df8 <lchmod@@Base+0x396c>
   19dc0:	ldr	r0, [r7]
   19dc4:	cmn	r0, #1
   19dc8:	bne	19df8 <lchmod@@Base+0x396c>
   19dcc:	mov	r0, r4
   19dd0:	mov	r1, #1
   19dd4:	bl	11a10 <fcntl64@plt>
   19dd8:	cmp	r0, #0
   19ddc:	blt	19e00 <lchmod@@Base+0x3974>
   19de0:	orr	r2, r0, #1
   19de4:	mov	r0, r4
   19de8:	mov	r1, #2
   19dec:	bl	11a10 <fcntl64@plt>
   19df0:	cmn	r0, #1
   19df4:	beq	19e00 <lchmod@@Base+0x3974>
   19df8:	mov	r0, r4
   19dfc:	pop	{r4, r5, r6, r7, fp, pc}
   19e00:	bl	119a4 <__errno_location@plt>
   19e04:	mov	r5, r0
   19e08:	ldr	r6, [r0]
   19e0c:	mov	r0, r4
   19e10:	bl	11b00 <close@plt>
   19e14:	str	r6, [r5]
   19e18:	mvn	r4, #0
   19e1c:	mov	r0, r4
   19e20:	pop	{r4, r5, r6, r7, fp, pc}
   19e24:	sub	sp, sp, #8
   19e28:	push	{fp, lr}
   19e2c:	mov	fp, sp
   19e30:	sub	sp, sp, #8
   19e34:	str	r3, [fp, #12]
   19e38:	str	r2, [fp, #8]
   19e3c:	mov	r2, #0
   19e40:	tst	r1, #64	; 0x40
   19e44:	addne	r2, fp, #8
   19e48:	orrne	r2, r2, #4
   19e4c:	strne	r2, [sp, #4]
   19e50:	ldrne	r2, [fp, #8]
   19e54:	bl	118e4 <open64@plt>
   19e58:	bl	18ab0 <lchmod@@Base+0x2624>
   19e5c:	mov	sp, fp
   19e60:	pop	{fp, lr}
   19e64:	add	sp, sp, #8
   19e68:	bx	lr
   19e6c:	push	{r4, sl, fp, lr}
   19e70:	add	fp, sp, #8
   19e74:	mov	r4, r0
   19e78:	cmp	r0, #0
   19e7c:	beq	19e94 <lchmod@@Base+0x3a08>
   19e80:	mov	r0, r4
   19e84:	bl	11914 <__freading@plt>
   19e88:	cmp	r0, #0
   19e8c:	movne	r0, r4
   19e90:	blne	19ea0 <lchmod@@Base+0x3a14>
   19e94:	mov	r0, r4
   19e98:	pop	{r4, sl, fp, lr}
   19e9c:	b	11794 <fflush@plt>
   19ea0:	ldrb	r1, [r0, #1]
   19ea4:	tst	r1, #1
   19ea8:	bxeq	lr
   19eac:	push	{fp, lr}
   19eb0:	mov	fp, sp
   19eb4:	sub	sp, sp, #8
   19eb8:	mov	r1, #1
   19ebc:	str	r1, [sp]
   19ec0:	mov	r2, #0
   19ec4:	mov	r3, #0
   19ec8:	bl	19ed4 <lchmod@@Base+0x3a48>
   19ecc:	mov	sp, fp
   19ed0:	pop	{fp, pc}
   19ed4:	push	{r4, r5, r6, r7, fp, lr}
   19ed8:	add	fp, sp, #16
   19edc:	sub	sp, sp, #8
   19ee0:	mov	r5, r3
   19ee4:	mov	r6, r2
   19ee8:	mov	r4, r0
   19eec:	ldr	r0, [r0, #4]
   19ef0:	ldr	r1, [r4, #8]
   19ef4:	cmp	r1, r0
   19ef8:	bne	19f14 <lchmod@@Base+0x3a88>
   19efc:	ldrd	r0, [r4, #16]
   19f00:	cmp	r1, r0
   19f04:	bne	19f14 <lchmod@@Base+0x3a88>
   19f08:	ldr	r0, [r4, #36]	; 0x24
   19f0c:	cmp	r0, #0
   19f10:	beq	19f2c <lchmod@@Base+0x3aa0>
   19f14:	mov	r0, r4
   19f18:	mov	r2, r6
   19f1c:	mov	r3, r5
   19f20:	sub	sp, fp, #16
   19f24:	pop	{r4, r5, r6, r7, fp, lr}
   19f28:	b	11a04 <fseeko64@plt>
   19f2c:	ldr	r7, [fp, #8]
   19f30:	mov	r0, r4
   19f34:	bl	119e0 <fileno@plt>
   19f38:	str	r7, [sp]
   19f3c:	mov	r2, r6
   19f40:	mov	r3, r5
   19f44:	bl	11890 <lseek64@plt>
   19f48:	and	r2, r0, r1
   19f4c:	cmn	r2, #1
   19f50:	mvneq	r0, #0
   19f54:	subeq	sp, fp, #16
   19f58:	popeq	{r4, r5, r6, r7, fp, pc}
   19f5c:	strd	r0, [r4, #80]	; 0x50
   19f60:	ldr	r0, [r4]
   19f64:	bic	r0, r0, #16
   19f68:	str	r0, [r4]
   19f6c:	mov	r0, #0
   19f70:	sub	sp, fp, #16
   19f74:	pop	{r4, r5, r6, r7, fp, pc}
   19f78:	ldrb	r2, [r0]
   19f7c:	cmp	r2, #0
   19f80:	beq	19fa4 <lchmod@@Base+0x3b18>
   19f84:	add	r3, r0, #1
   19f88:	mov	r0, #0
   19f8c:	ror	r0, r0, #23
   19f90:	uxtab	r0, r0, r2
   19f94:	ldrb	r2, [r3], #1
   19f98:	cmp	r2, #0
   19f9c:	bne	19f8c <lchmod@@Base+0x3b00>
   19fa0:	b	19fa8 <lchmod@@Base+0x3b1c>
   19fa4:	mov	r0, #0
   19fa8:	udiv	r2, r0, r1
   19fac:	mls	r0, r2, r1, r0
   19fb0:	bx	lr
   19fb4:	push	{fp, lr}
   19fb8:	mov	fp, sp
   19fbc:	bl	119a4 <__errno_location@plt>
   19fc0:	mov	r1, #12
   19fc4:	str	r1, [r0]
   19fc8:	mov	r0, #0
   19fcc:	pop	{fp, pc}
   19fd0:	b	1947c <lchmod@@Base+0x2ff0>
   19fd4:	cmp	r1, #0
   19fd8:	orreq	r1, r1, #1
   19fdc:	b	194ac <lchmod@@Base+0x3020>
   19fe0:	b	19428 <lchmod@@Base+0x2f9c>
   19fe4:	clz	r3, r2
   19fe8:	lsr	ip, r3, #5
   19fec:	clz	r3, r1
   19ff0:	lsr	r3, r3, #5
   19ff4:	orrs	r3, r3, ip
   19ff8:	movwne	r1, #1
   19ffc:	movwne	r2, #1
   1a000:	b	1a09c <lchmod@@Base+0x3c10>
   1a004:	push	{fp, lr}
   1a008:	mov	fp, sp
   1a00c:	mov	r0, #14
   1a010:	bl	11a40 <nl_langinfo@plt>
   1a014:	movw	r1, #43276	; 0xa90c
   1a018:	movt	r1, #1
   1a01c:	cmp	r0, #0
   1a020:	movne	r1, r0
   1a024:	ldrb	r2, [r1]
   1a028:	movw	r0, #44945	; 0xaf91
   1a02c:	movt	r0, #1
   1a030:	cmp	r2, #0
   1a034:	movne	r0, r1
   1a038:	pop	{fp, pc}
   1a03c:	push	{r4, r5, r6, r7, fp, lr}
   1a040:	add	fp, sp, #16
   1a044:	sub	sp, sp, #8
   1a048:	mov	r7, r2
   1a04c:	mov	r4, r1
   1a050:	add	r5, sp, #4
   1a054:	cmp	r0, #0
   1a058:	movne	r5, r0
   1a05c:	mov	r0, r5
   1a060:	bl	118cc <mbrtowc@plt>
   1a064:	mov	r6, r0
   1a068:	cmp	r7, #0
   1a06c:	beq	1a090 <lchmod@@Base+0x3c04>
   1a070:	cmn	r6, #2
   1a074:	bcc	1a090 <lchmod@@Base+0x3c04>
   1a078:	mov	r0, #0
   1a07c:	bl	1a0e4 <lchmod@@Base+0x3c58>
   1a080:	cmp	r0, #0
   1a084:	ldrbeq	r0, [r4]
   1a088:	streq	r0, [r5]
   1a08c:	moveq	r6, #1
   1a090:	mov	r0, r6
   1a094:	sub	sp, fp, #16
   1a098:	pop	{r4, r5, r6, r7, fp, pc}
   1a09c:	cmp	r2, #0
   1a0a0:	beq	1a0d0 <lchmod@@Base+0x3c44>
   1a0a4:	mvn	r3, #0
   1a0a8:	udiv	r3, r3, r2
   1a0ac:	cmp	r3, r1
   1a0b0:	bcs	1a0d0 <lchmod@@Base+0x3c44>
   1a0b4:	push	{fp, lr}
   1a0b8:	mov	fp, sp
   1a0bc:	bl	119a4 <__errno_location@plt>
   1a0c0:	mov	r1, #12
   1a0c4:	str	r1, [r0]
   1a0c8:	mov	r0, #0
   1a0cc:	pop	{fp, pc}
   1a0d0:	mul	r1, r2, r1
   1a0d4:	b	194ac <lchmod@@Base+0x3020>
   1a0d8:	mov	r1, #0
   1a0dc:	mov	r2, #3
   1a0e0:	b	19c40 <lchmod@@Base+0x37b4>
   1a0e4:	push	{r4, sl, fp, lr}
   1a0e8:	add	fp, sp, #8
   1a0ec:	sub	sp, sp, #264	; 0x108
   1a0f0:	add	r1, sp, #7
   1a0f4:	movw	r2, #257	; 0x101
   1a0f8:	bl	1a148 <lchmod@@Base+0x3cbc>
   1a0fc:	mov	r4, #0
   1a100:	cmp	r0, #0
   1a104:	bne	1a13c <lchmod@@Base+0x3cb0>
   1a108:	add	r0, sp, #7
   1a10c:	movw	r1, #44951	; 0xaf97
   1a110:	movt	r1, #1
   1a114:	bl	1177c <strcmp@plt>
   1a118:	cmp	r0, #0
   1a11c:	beq	1a13c <lchmod@@Base+0x3cb0>
   1a120:	add	r0, sp, #7
   1a124:	movw	r1, #44953	; 0xaf99
   1a128:	movt	r1, #1
   1a12c:	bl	1177c <strcmp@plt>
   1a130:	mov	r4, r0
   1a134:	cmp	r0, #0
   1a138:	movwne	r4, #1
   1a13c:	mov	r0, r4
   1a140:	sub	sp, fp, #8
   1a144:	pop	{r4, sl, fp, pc}
   1a148:	b	1a14c <lchmod@@Base+0x3cc0>
   1a14c:	push	{r4, r5, r6, r7, fp, lr}
   1a150:	add	fp, sp, #16
   1a154:	mov	r6, r2
   1a158:	mov	r4, r1
   1a15c:	bl	1a1e8 <lchmod@@Base+0x3d5c>
   1a160:	cmp	r0, #0
   1a164:	beq	1a194 <lchmod@@Base+0x3d08>
   1a168:	mov	r7, r0
   1a16c:	bl	11974 <strlen@plt>
   1a170:	cmp	r0, r6
   1a174:	bcs	1a1b4 <lchmod@@Base+0x3d28>
   1a178:	add	r2, r0, #1
   1a17c:	mov	r0, r4
   1a180:	mov	r1, r7
   1a184:	bl	117dc <memcpy@plt>
   1a188:	mov	r5, #0
   1a18c:	mov	r0, r5
   1a190:	pop	{r4, r5, r6, r7, fp, pc}
   1a194:	mov	r5, #22
   1a198:	cmp	r6, #0
   1a19c:	movne	r0, #0
   1a1a0:	strbne	r0, [r4]
   1a1a4:	movne	r0, r5
   1a1a8:	popne	{r4, r5, r6, r7, fp, pc}
   1a1ac:	mov	r0, r5
   1a1b0:	pop	{r4, r5, r6, r7, fp, pc}
   1a1b4:	mov	r5, #34	; 0x22
   1a1b8:	cmp	r6, #0
   1a1bc:	beq	1a1dc <lchmod@@Base+0x3d50>
   1a1c0:	sub	r6, r6, #1
   1a1c4:	mov	r0, r4
   1a1c8:	mov	r1, r7
   1a1cc:	mov	r2, r6
   1a1d0:	bl	117dc <memcpy@plt>
   1a1d4:	mov	r0, #0
   1a1d8:	strb	r0, [r4, r6]
   1a1dc:	mov	r0, r5
   1a1e0:	pop	{r4, r5, r6, r7, fp, pc}
   1a1e4:	b	1a1e8 <lchmod@@Base+0x3d5c>
   1a1e8:	mov	r1, #0
   1a1ec:	b	11a1c <setlocale@plt>
   1a1f0:	cmp	r3, #0
   1a1f4:	cmpeq	r2, #0
   1a1f8:	bne	1a210 <lchmod@@Base+0x3d84>
   1a1fc:	cmp	r1, #0
   1a200:	cmpeq	r0, #0
   1a204:	mvnne	r1, #0
   1a208:	mvnne	r0, #0
   1a20c:	b	1a22c <lchmod@@Base+0x3da0>
   1a210:	sub	sp, sp, #8
   1a214:	push	{sp, lr}
   1a218:	bl	1a23c <lchmod@@Base+0x3db0>
   1a21c:	ldr	lr, [sp, #4]
   1a220:	add	sp, sp, #8
   1a224:	pop	{r2, r3}
   1a228:	bx	lr
   1a22c:	push	{r1, lr}
   1a230:	mov	r0, #8
   1a234:	bl	11764 <raise@plt>
   1a238:	pop	{r1, pc}
   1a23c:	cmp	r1, r3
   1a240:	cmpeq	r0, r2
   1a244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a248:	mov	r4, r0
   1a24c:	movcc	r0, #0
   1a250:	mov	r5, r1
   1a254:	ldr	lr, [sp, #36]	; 0x24
   1a258:	movcc	r1, r0
   1a25c:	bcc	1a358 <lchmod@@Base+0x3ecc>
   1a260:	cmp	r3, #0
   1a264:	clzeq	ip, r2
   1a268:	clzne	ip, r3
   1a26c:	addeq	ip, ip, #32
   1a270:	cmp	r5, #0
   1a274:	clzeq	r1, r4
   1a278:	addeq	r1, r1, #32
   1a27c:	clzne	r1, r5
   1a280:	sub	ip, ip, r1
   1a284:	sub	sl, ip, #32
   1a288:	lsl	r9, r3, ip
   1a28c:	rsb	fp, ip, #32
   1a290:	orr	r9, r9, r2, lsl sl
   1a294:	orr	r9, r9, r2, lsr fp
   1a298:	lsl	r8, r2, ip
   1a29c:	cmp	r5, r9
   1a2a0:	cmpeq	r4, r8
   1a2a4:	movcc	r0, #0
   1a2a8:	movcc	r1, r0
   1a2ac:	bcc	1a2c8 <lchmod@@Base+0x3e3c>
   1a2b0:	mov	r0, #1
   1a2b4:	subs	r4, r4, r8
   1a2b8:	lsl	r1, r0, sl
   1a2bc:	orr	r1, r1, r0, lsr fp
   1a2c0:	lsl	r0, r0, ip
   1a2c4:	sbc	r5, r5, r9
   1a2c8:	cmp	ip, #0
   1a2cc:	beq	1a358 <lchmod@@Base+0x3ecc>
   1a2d0:	lsr	r6, r8, #1
   1a2d4:	orr	r6, r6, r9, lsl #31
   1a2d8:	lsr	r7, r9, #1
   1a2dc:	mov	r2, ip
   1a2e0:	b	1a304 <lchmod@@Base+0x3e78>
   1a2e4:	subs	r3, r4, r6
   1a2e8:	sbc	r8, r5, r7
   1a2ec:	adds	r3, r3, r3
   1a2f0:	adc	r8, r8, r8
   1a2f4:	adds	r4, r3, #1
   1a2f8:	adc	r5, r8, #0
   1a2fc:	subs	r2, r2, #1
   1a300:	beq	1a320 <lchmod@@Base+0x3e94>
   1a304:	cmp	r5, r7
   1a308:	cmpeq	r4, r6
   1a30c:	bcs	1a2e4 <lchmod@@Base+0x3e58>
   1a310:	adds	r4, r4, r4
   1a314:	adc	r5, r5, r5
   1a318:	subs	r2, r2, #1
   1a31c:	bne	1a304 <lchmod@@Base+0x3e78>
   1a320:	lsr	r3, r4, ip
   1a324:	orr	r3, r3, r5, lsl fp
   1a328:	lsr	r2, r5, ip
   1a32c:	orr	r3, r3, r5, lsr sl
   1a330:	adds	r0, r0, r4
   1a334:	mov	r4, r3
   1a338:	lsl	r3, r2, ip
   1a33c:	orr	r3, r3, r4, lsl sl
   1a340:	lsl	ip, r4, ip
   1a344:	orr	r3, r3, r4, lsr fp
   1a348:	adc	r1, r1, r5
   1a34c:	subs	r0, r0, ip
   1a350:	mov	r5, r2
   1a354:	sbc	r1, r1, r3
   1a358:	cmp	lr, #0
   1a35c:	strdne	r4, [lr]
   1a360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a364:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a368:	mov	r7, r0
   1a36c:	ldr	r6, [pc, #72]	; 1a3bc <lchmod@@Base+0x3f30>
   1a370:	ldr	r5, [pc, #72]	; 1a3c0 <lchmod@@Base+0x3f34>
   1a374:	add	r6, pc, r6
   1a378:	add	r5, pc, r5
   1a37c:	sub	r6, r6, r5
   1a380:	mov	r8, r1
   1a384:	mov	r9, r2
   1a388:	bl	11714 <fstatfs64@plt-0x20>
   1a38c:	asrs	r6, r6, #2
   1a390:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a394:	mov	r4, #0
   1a398:	add	r4, r4, #1
   1a39c:	ldr	r3, [r5], #4
   1a3a0:	mov	r2, r9
   1a3a4:	mov	r1, r8
   1a3a8:	mov	r0, r7
   1a3ac:	blx	r3
   1a3b0:	cmp	r6, r4
   1a3b4:	bne	1a398 <lchmod@@Base+0x3f0c>
   1a3b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a3bc:	andeq	r1, r1, r8, lsl #23
   1a3c0:	andeq	r1, r1, r0, lsl #23
   1a3c4:	bx	lr
   1a3c8:	ldr	r3, [pc, #12]	; 1a3dc <lchmod@@Base+0x3f50>
   1a3cc:	mov	r1, #0
   1a3d0:	add	r3, pc, r3
   1a3d4:	ldr	r2, [r3]
   1a3d8:	b	119bc <__cxa_atexit@plt>
   1a3dc:	andeq	r1, r1, r4, lsr #27
   1a3e0:	mov	r2, r1
   1a3e4:	mov	r1, r0
   1a3e8:	mov	r0, #3
   1a3ec:	b	11adc <__xstat64@plt>
   1a3f0:	mov	r2, r1
   1a3f4:	mov	r1, r0
   1a3f8:	mov	r0, #3
   1a3fc:	b	1186c <__fxstat64@plt>
   1a400:	mov	r2, r1
   1a404:	mov	r1, r0
   1a408:	mov	r0, #3
   1a40c:	b	11b0c <__lxstat64@plt>
   1a410:	push	{lr}		; (str lr, [sp, #-4]!)
   1a414:	sub	sp, sp, #12
   1a418:	str	r3, [sp]
   1a41c:	mov	r3, r2
   1a420:	mov	r2, r1
   1a424:	mov	r1, r0
   1a428:	mov	r0, #3
   1a42c:	bl	11854 <__fxstatat64@plt>
   1a430:	add	sp, sp, #12
   1a434:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

0001a438 <.fini>:
   1a438:	push	{r3, lr}
   1a43c:	pop	{r3, pc}
