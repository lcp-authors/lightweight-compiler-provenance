
../repos/charybdis/tools/.libs/charybdis-mkfingerprint:     file format elf32-littlearm


Disassembly of section .init:

000104d4 <.init>:
   104d4:	push	{r3, lr}
   104d8:	bl	105b4 <strcmp@plt+0x48>
   104dc:	pop	{r3, pc}

Disassembly of section .plt:

000104e0 <abort@plt-0x14>:
   104e0:	push	{lr}		; (str lr, [sp, #-4]!)
   104e4:	ldr	lr, [pc, #4]	; 104f0 <abort@plt-0x4>
   104e8:	add	lr, pc, lr
   104ec:	ldr	pc, [lr, #8]!
   104f0:	andeq	r0, r1, r0, lsl fp

000104f4 <abort@plt>:
   104f4:	add	ip, pc, #0, 12
   104f8:	add	ip, ip, #16, 20	; 0x10000
   104fc:	ldr	pc, [ip, #2832]!	; 0xb10

00010500 <__libc_start_main@plt>:
   10500:	add	ip, pc, #0, 12
   10504:	add	ip, ip, #16, 20	; 0x10000
   10508:	ldr	pc, [ip, #2824]!	; 0xb08

0001050c <__gmon_start__@plt>:
   1050c:	add	ip, pc, #0, 12
   10510:	add	ip, ip, #16, 20	; 0x10000
   10514:	ldr	pc, [ip, #2816]!	; 0xb00

00010518 <putchar@plt>:
   10518:	add	ip, pc, #0, 12
   1051c:	add	ip, ip, #16, 20	; 0x10000
   10520:	ldr	pc, [ip, #2808]!	; 0xaf8

00010524 <memset@plt>:
   10524:	add	ip, pc, #0, 12
   10528:	add	ip, ip, #16, 20	; 0x10000
   1052c:	ldr	pc, [ip, #2800]!	; 0xaf0

00010530 <perror@plt>:
   10530:	add	ip, pc, #0, 12
   10534:	add	ip, ip, #16, 20	; 0x10000
   10538:	ldr	pc, [ip, #2792]!	; 0xae8

0001053c <printf@plt>:
   1053c:	add	ip, pc, #0, 12
   10540:	add	ip, ip, #16, 20	; 0x10000
   10544:	ldr	pc, [ip, #2784]!	; 0xae0

00010548 <fwrite@plt>:
   10548:	add	ip, pc, #0, 12
   1054c:	add	ip, ip, #16, 20	; 0x10000
   10550:	ldr	pc, [ip, #2776]!	; 0xad8

00010554 <puts@plt>:
   10554:	add	ip, pc, #0, 12
   10558:	add	ip, ip, #16, 20	; 0x10000
   1055c:	ldr	pc, [ip, #2768]!	; 0xad0

00010560 <rb_get_ssl_certfp_file@plt>:
   10560:	add	ip, pc, #0, 12
   10564:	add	ip, ip, #16, 20	; 0x10000
   10568:	ldr	pc, [ip, #2760]!	; 0xac8

0001056c <strcmp@plt>:
   1056c:	add	ip, pc, #0, 12
   10570:	add	ip, ip, #16, 20	; 0x10000
   10574:	ldr	pc, [ip, #2752]!	; 0xac0

Disassembly of section .text:

00010578 <.text>:
   10578:	mov	fp, #0
   1057c:	mov	lr, #0
   10580:	pop	{r1}		; (ldr r1, [sp], #4)
   10584:	mov	r2, sp
   10588:	push	{r2}		; (str r2, [sp, #-4]!)
   1058c:	push	{r0}		; (str r0, [sp, #-4]!)
   10590:	ldr	ip, [pc, #16]	; 105a8 <strcmp@plt+0x3c>
   10594:	push	{ip}		; (str ip, [sp, #-4]!)
   10598:	ldr	r0, [pc, #12]	; 105ac <strcmp@plt+0x40>
   1059c:	ldr	r3, [pc, #12]	; 105b0 <strcmp@plt+0x44>
   105a0:	bl	10500 <__libc_start_main@plt>
   105a4:	bl	104f4 <abort@plt>
   105a8:	andeq	r0, r1, r0, lsl #17
   105ac:	andeq	r0, r1, r8, ror #12
   105b0:	andeq	r0, r1, r0, lsr #16
   105b4:	ldr	r3, [pc, #20]	; 105d0 <strcmp@plt+0x64>
   105b8:	ldr	r2, [pc, #20]	; 105d4 <strcmp@plt+0x68>
   105bc:	add	r3, pc, r3
   105c0:	ldr	r2, [r3, r2]
   105c4:	cmp	r2, #0
   105c8:	bxeq	lr
   105cc:	b	1050c <__gmon_start__@plt>
   105d0:	andeq	r0, r1, ip, lsr sl
   105d4:	andeq	r0, r0, r8, lsr r0
   105d8:	ldr	r0, [pc, #24]	; 105f8 <strcmp@plt+0x8c>
   105dc:	ldr	r3, [pc, #24]	; 105fc <strcmp@plt+0x90>
   105e0:	cmp	r3, r0
   105e4:	bxeq	lr
   105e8:	ldr	r3, [pc, #16]	; 10600 <strcmp@plt+0x94>
   105ec:	cmp	r3, #0
   105f0:	bxeq	lr
   105f4:	bx	r3
   105f8:	andeq	r1, r2, r4, asr #32
   105fc:	andeq	r1, r2, r4, asr #32
   10600:	andeq	r0, r0, r0
   10604:	ldr	r0, [pc, #36]	; 10630 <strcmp@plt+0xc4>
   10608:	ldr	r1, [pc, #36]	; 10634 <strcmp@plt+0xc8>
   1060c:	sub	r1, r1, r0
   10610:	asr	r1, r1, #2
   10614:	add	r1, r1, r1, lsr #31
   10618:	asrs	r1, r1, #1
   1061c:	bxeq	lr
   10620:	ldr	r3, [pc, #16]	; 10638 <strcmp@plt+0xcc>
   10624:	cmp	r3, #0
   10628:	bxeq	lr
   1062c:	bx	r3
   10630:	andeq	r1, r2, r4, asr #32
   10634:	andeq	r1, r2, r4, asr #32
   10638:	andeq	r0, r0, r0
   1063c:	push	{r4, lr}
   10640:	ldr	r4, [pc, #24]	; 10660 <strcmp@plt+0xf4>
   10644:	ldrb	r3, [r4]
   10648:	cmp	r3, #0
   1064c:	popne	{r4, pc}
   10650:	bl	105d8 <strcmp@plt+0x6c>
   10654:	mov	r3, #1
   10658:	strb	r3, [r4]
   1065c:	pop	{r4, pc}
   10660:	andeq	r1, r2, ip, asr #32
   10664:	b	10604 <strcmp@plt+0x98>
   10668:	push	{r4, r5, r6, r7, fp, lr}
   1066c:	add	fp, sp, #16
   10670:	sub	sp, sp, #72	; 0x48
   10674:	mov	r4, r1
   10678:	mov	r5, r0
   1067c:	mov	r0, sp
   10680:	mov	r1, #0
   10684:	mov	r2, #65	; 0x41
   10688:	mov	r7, #0
   1068c:	bl	10524 <memset@plt>
   10690:	cmp	r5, #3
   10694:	bne	10734 <strcmp@plt+0x1c8>
   10698:	ldr	r6, [r4, #4]
   1069c:	ldr	r4, [r4, #8]
   106a0:	movw	r1, #2196	; 0x894
   106a4:	movt	r1, #1
   106a8:	mov	r0, r6
   106ac:	bl	1056c <strcmp@plt>
   106b0:	movw	r5, #2289	; 0x8f1
   106b4:	cmp	r0, #0
   106b8:	movt	r5, #1
   106bc:	beq	10780 <strcmp@plt+0x214>
   106c0:	movw	r1, #2206	; 0x89e
   106c4:	mov	r0, r6
   106c8:	movt	r1, #1
   106cc:	bl	1056c <strcmp@plt>
   106d0:	cmp	r0, #0
   106d4:	beq	10754 <strcmp@plt+0x1e8>
   106d8:	movw	r1, #2233	; 0x8b9
   106dc:	mov	r0, r6
   106e0:	movt	r1, #1
   106e4:	bl	1056c <strcmp@plt>
   106e8:	cmp	r0, #0
   106ec:	beq	1075c <strcmp@plt+0x1f0>
   106f0:	movw	r1, #2201	; 0x899
   106f4:	mov	r0, r6
   106f8:	movt	r1, #1
   106fc:	bl	1056c <strcmp@plt>
   10700:	cmp	r0, #0
   10704:	beq	10764 <strcmp@plt+0x1f8>
   10708:	movw	r1, #2228	; 0x8b4
   1070c:	mov	r0, r6
   10710:	movt	r1, #1
   10714:	bl	1056c <strcmp@plt>
   10718:	cmp	r0, #0
   1071c:	beq	10774 <strcmp@plt+0x208>
   10720:	movw	r0, #2255	; 0x8cf
   10724:	mov	r1, r6
   10728:	movt	r0, #1
   1072c:	bl	1053c <printf@plt>
   10730:	b	1074c <strcmp@plt+0x1e0>
   10734:	movw	r0, #2304	; 0x900
   10738:	movt	r0, #1
   1073c:	bl	10554 <puts@plt>
   10740:	movw	r0, #2352	; 0x930
   10744:	movt	r0, #1
   10748:	bl	10554 <puts@plt>
   1074c:	mov	r4, #1
   10750:	b	107e0 <strcmp@plt+0x274>
   10754:	mov	r7, #1
   10758:	b	10780 <strcmp@plt+0x214>
   1075c:	mov	r7, #2
   10760:	b	10780 <strcmp@plt+0x214>
   10764:	movw	r5, #2213	; 0x8a5
   10768:	movw	r7, #4097	; 0x1001
   1076c:	movt	r5, #1
   10770:	b	10780 <strcmp@plt+0x214>
   10774:	movw	r5, #2240	; 0x8c0
   10778:	movw	r7, #4098	; 0x1002
   1077c:	movt	r5, #1
   10780:	mov	r6, sp
   10784:	mov	r0, r4
   10788:	mov	r2, r7
   1078c:	mov	r1, r6
   10790:	bl	10560 <rb_get_ssl_certfp_file@plt>
   10794:	cmn	r0, #1
   10798:	ble	107ec <strcmp@plt+0x280>
   1079c:	mov	r7, r0
   107a0:	cmp	r0, #0
   107a4:	beq	107f8 <strcmp@plt+0x28c>
   107a8:	movw	r0, #2290	; 0x8f2
   107ac:	mov	r1, r5
   107b0:	movt	r0, #1
   107b4:	bl	1053c <printf@plt>
   107b8:	movw	r4, #2293	; 0x8f5
   107bc:	movt	r4, #1
   107c0:	ldrb	r1, [r6], #1
   107c4:	mov	r0, r4
   107c8:	bl	1053c <printf@plt>
   107cc:	subs	r7, r7, #1
   107d0:	bne	107c0 <strcmp@plt+0x254>
   107d4:	mov	r0, #10
   107d8:	bl	10518 <putchar@plt>
   107dc:	mov	r4, #0
   107e0:	mov	r0, r4
   107e4:	sub	sp, fp, #16
   107e8:	pop	{r4, r5, r6, r7, fp, pc}
   107ec:	mov	r0, r4
   107f0:	bl	10530 <perror@plt>
   107f4:	b	1074c <strcmp@plt+0x1e0>
   107f8:	movw	r0, #4168	; 0x1048
   107fc:	mov	r1, #14
   10800:	mov	r2, #1
   10804:	mov	r4, #1
   10808:	movt	r0, #2
   1080c:	ldr	r3, [r0]
   10810:	movw	r0, #2275	; 0x8e3
   10814:	movt	r0, #1
   10818:	bl	10548 <fwrite@plt>
   1081c:	b	107e0 <strcmp@plt+0x274>
   10820:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10824:	mov	r7, r0
   10828:	ldr	r6, [pc, #72]	; 10878 <strcmp@plt+0x30c>
   1082c:	ldr	r5, [pc, #72]	; 1087c <strcmp@plt+0x310>
   10830:	add	r6, pc, r6
   10834:	add	r5, pc, r5
   10838:	sub	r6, r6, r5
   1083c:	mov	r8, r1
   10840:	mov	r9, r2
   10844:	bl	104d4 <abort@plt-0x20>
   10848:	asrs	r6, r6, #2
   1084c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10850:	mov	r4, #0
   10854:	add	r4, r4, #1
   10858:	ldr	r3, [r5], #4
   1085c:	mov	r2, r9
   10860:	mov	r1, r8
   10864:	mov	r0, r7
   10868:	blx	r3
   1086c:	cmp	r6, r4
   10870:	bne	10854 <strcmp@plt+0x2e8>
   10874:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10878:			; <UNDEFINED> instruction: 0x000106bc
   1087c:			; <UNDEFINED> instruction: 0x000106b4
   10880:	bx	lr

Disassembly of section .fini:

00010884 <.fini>:
   10884:	push	{r3, lr}
   10888:	pop	{r3, pc}
