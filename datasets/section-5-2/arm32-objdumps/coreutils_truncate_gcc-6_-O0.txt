
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c24 <.init>:
   10c24:	push	{r3, lr}
   10c28:	bl	10ef0 <__assert_fail@plt+0x48>
   10c2c:	pop	{r3, pc}

Disassembly of section .plt:

00010c30 <calloc@plt-0x14>:
   10c30:	push	{lr}		; (str lr, [sp, #-4]!)
   10c34:	ldr	lr, [pc, #4]	; 10c40 <calloc@plt-0x4>
   10c38:	add	lr, pc, lr
   10c3c:	ldr	pc, [lr, #8]!
   10c40:	andeq	r9, r1, r0, asr #7

00010c44 <calloc@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #102400	; 0x19000
   10c4c:	ldr	pc, [ip, #960]!	; 0x3c0

00010c50 <fputs_unlocked@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #102400	; 0x19000
   10c58:	ldr	pc, [ip, #952]!	; 0x3b8

00010c5c <raise@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #102400	; 0x19000
   10c64:	ldr	pc, [ip, #944]!	; 0x3b0

00010c68 <strcmp@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #102400	; 0x19000
   10c70:	ldr	pc, [ip, #936]!	; 0x3a8

00010c74 <printf@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #102400	; 0x19000
   10c7c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c80 <fflush@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #102400	; 0x19000
   10c88:	ldr	pc, [ip, #920]!	; 0x398

00010c8c <free@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #102400	; 0x19000
   10c94:	ldr	pc, [ip, #912]!	; 0x390

00010c98 <_exit@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #102400	; 0x19000
   10ca0:	ldr	pc, [ip, #904]!	; 0x388

00010ca4 <memcpy@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #102400	; 0x19000
   10cac:	ldr	pc, [ip, #896]!	; 0x380

00010cb0 <mbsinit@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #102400	; 0x19000
   10cb8:	ldr	pc, [ip, #888]!	; 0x378

00010cbc <ftruncate64@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #102400	; 0x19000
   10cc4:	ldr	pc, [ip, #880]!	; 0x370

00010cc8 <memcmp@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #102400	; 0x19000
   10cd0:	ldr	pc, [ip, #872]!	; 0x368

00010cd4 <fputc_unlocked@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #102400	; 0x19000
   10cdc:	ldr	pc, [ip, #864]!	; 0x360

00010ce0 <realloc@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #102400	; 0x19000
   10ce8:	ldr	pc, [ip, #856]!	; 0x358

00010cec <textdomain@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #102400	; 0x19000
   10cf4:	ldr	pc, [ip, #848]!	; 0x350

00010cf8 <iswprint@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #102400	; 0x19000
   10d00:	ldr	pc, [ip, #840]!	; 0x348

00010d04 <__fxstat64@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #102400	; 0x19000
   10d0c:	ldr	pc, [ip, #832]!	; 0x340

00010d10 <fwrite@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #102400	; 0x19000
   10d18:	ldr	pc, [ip, #824]!	; 0x338

00010d1c <lseek64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #102400	; 0x19000
   10d24:	ldr	pc, [ip, #816]!	; 0x330

00010d28 <__ctype_get_mb_cur_max@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #102400	; 0x19000
   10d30:	ldr	pc, [ip, #808]!	; 0x328

00010d34 <__fpending@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #102400	; 0x19000
   10d3c:	ldr	pc, [ip, #800]!	; 0x320

00010d40 <ferror_unlocked@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #102400	; 0x19000
   10d48:	ldr	pc, [ip, #792]!	; 0x318

00010d4c <mbrtowc@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #102400	; 0x19000
   10d54:	ldr	pc, [ip, #784]!	; 0x310

00010d58 <error@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #102400	; 0x19000
   10d60:	ldr	pc, [ip, #776]!	; 0x308

00010d64 <open64@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #102400	; 0x19000
   10d6c:	ldr	pc, [ip, #768]!	; 0x300

00010d70 <malloc@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #102400	; 0x19000
   10d78:	ldr	pc, [ip, #760]!	; 0x2f8

00010d7c <__libc_start_main@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #102400	; 0x19000
   10d84:	ldr	pc, [ip, #752]!	; 0x2f0

00010d88 <__freading@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #102400	; 0x19000
   10d90:	ldr	pc, [ip, #744]!	; 0x2e8

00010d94 <__gmon_start__@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #102400	; 0x19000
   10d9c:	ldr	pc, [ip, #736]!	; 0x2e0

00010da0 <getopt_long@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #102400	; 0x19000
   10da8:	ldr	pc, [ip, #728]!	; 0x2d8

00010dac <__ctype_b_loc@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #102400	; 0x19000
   10db4:	ldr	pc, [ip, #720]!	; 0x2d0

00010db8 <exit@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #102400	; 0x19000
   10dc0:	ldr	pc, [ip, #712]!	; 0x2c8

00010dc4 <gettext@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #102400	; 0x19000
   10dcc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd0 <strlen@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #102400	; 0x19000
   10dd8:	ldr	pc, [ip, #696]!	; 0x2b8

00010ddc <strchr@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #102400	; 0x19000
   10de4:	ldr	pc, [ip, #688]!	; 0x2b0

00010de8 <fprintf@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #102400	; 0x19000
   10df0:	ldr	pc, [ip, #680]!	; 0x2a8

00010df4 <__errno_location@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #102400	; 0x19000
   10dfc:	ldr	pc, [ip, #672]!	; 0x2a0

00010e00 <__cxa_atexit@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #102400	; 0x19000
   10e08:	ldr	pc, [ip, #664]!	; 0x298

00010e0c <memset@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #102400	; 0x19000
   10e14:	ldr	pc, [ip, #656]!	; 0x290

00010e18 <fileno@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #102400	; 0x19000
   10e20:	ldr	pc, [ip, #648]!	; 0x288

00010e24 <strtoimax@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #640]!	; 0x280

00010e30 <fclose@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #632]!	; 0x278

00010e3c <fseeko64@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #624]!	; 0x270

00010e48 <setlocale@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #616]!	; 0x268

00010e54 <strrchr@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #608]!	; 0x260

00010e60 <nl_langinfo@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #600]!	; 0x258

00010e6c <bindtextdomain@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #592]!	; 0x250

00010e78 <__xstat64@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #584]!	; 0x248

00010e84 <strncmp@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #576]!	; 0x240

00010e90 <abort@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #568]!	; 0x238

00010e9c <close@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #560]!	; 0x230

00010ea8 <__assert_fail@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #552]!	; 0x228

Disassembly of section .text:

00010eb4 <.text>:
   10eb4:	mov	fp, #0
   10eb8:	mov	lr, #0
   10ebc:	pop	{r1}		; (ldr r1, [sp], #4)
   10ec0:	mov	r2, sp
   10ec4:	push	{r2}		; (str r2, [sp, #-4]!)
   10ec8:	push	{r0}		; (str r0, [sp, #-4]!)
   10ecc:	ldr	ip, [pc, #16]	; 10ee4 <__assert_fail@plt+0x3c>
   10ed0:	push	{ip}		; (str ip, [sp, #-4]!)
   10ed4:	ldr	r0, [pc, #12]	; 10ee8 <__assert_fail@plt+0x40>
   10ed8:	ldr	r3, [pc, #12]	; 10eec <__assert_fail@plt+0x44>
   10edc:	bl	10d7c <__libc_start_main@plt>
   10ee0:	bl	10e90 <abort@plt>
   10ee4:	andeq	r8, r1, r8, lsl r3
   10ee8:	andeq	r1, r1, r4, lsl fp
   10eec:			; <UNDEFINED> instruction: 0x000182b8
   10ef0:	ldr	r3, [pc, #20]	; 10f0c <__assert_fail@plt+0x64>
   10ef4:	ldr	r2, [pc, #20]	; 10f10 <__assert_fail@plt+0x68>
   10ef8:	add	r3, pc, r3
   10efc:	ldr	r2, [r3, r2]
   10f00:	cmp	r2, #0
   10f04:	bxeq	lr
   10f08:	b	10d94 <__gmon_start__@plt>
   10f0c:	andeq	r9, r1, r0, lsl #2
   10f10:	ldrdeq	r0, [r0], -ip
   10f14:	ldr	r3, [pc, #28]	; 10f38 <__assert_fail@plt+0x90>
   10f18:	ldr	r0, [pc, #28]	; 10f3c <__assert_fail@plt+0x94>
   10f1c:	sub	r3, r3, r0
   10f20:	cmp	r3, #6
   10f24:	bxls	lr
   10f28:	ldr	r3, [pc, #16]	; 10f40 <__assert_fail@plt+0x98>
   10f2c:	cmp	r3, #0
   10f30:	bxeq	lr
   10f34:	bx	r3
   10f38:	andeq	sl, r2, r3, lsr r1
   10f3c:	andeq	sl, r2, r0, lsr r1
   10f40:	andeq	r0, r0, r0
   10f44:	ldr	r1, [pc, #36]	; 10f70 <__assert_fail@plt+0xc8>
   10f48:	ldr	r0, [pc, #36]	; 10f74 <__assert_fail@plt+0xcc>
   10f4c:	sub	r1, r1, r0
   10f50:	asr	r1, r1, #2
   10f54:	add	r1, r1, r1, lsr #31
   10f58:	asrs	r1, r1, #1
   10f5c:	bxeq	lr
   10f60:	ldr	r3, [pc, #16]	; 10f78 <__assert_fail@plt+0xd0>
   10f64:	cmp	r3, #0
   10f68:	bxeq	lr
   10f6c:	bx	r3
   10f70:	andeq	sl, r2, r0, lsr r1
   10f74:	andeq	sl, r2, r0, lsr r1
   10f78:	andeq	r0, r0, r0
   10f7c:	push	{r4, lr}
   10f80:	ldr	r4, [pc, #24]	; 10fa0 <__assert_fail@plt+0xf8>
   10f84:	ldrb	r3, [r4]
   10f88:	cmp	r3, #0
   10f8c:	popne	{r4, pc}
   10f90:	bl	10f14 <__assert_fail@plt+0x6c>
   10f94:	mov	r3, #1
   10f98:	strb	r3, [r4]
   10f9c:	pop	{r4, pc}
   10fa0:	andeq	sl, r2, ip, asr #2
   10fa4:	ldr	r0, [pc, #40]	; 10fd4 <__assert_fail@plt+0x12c>
   10fa8:	ldr	r3, [r0]
   10fac:	cmp	r3, #0
   10fb0:	bne	10fb8 <__assert_fail@plt+0x110>
   10fb4:	b	10f44 <__assert_fail@plt+0x9c>
   10fb8:	ldr	r3, [pc, #24]	; 10fd8 <__assert_fail@plt+0x130>
   10fbc:	cmp	r3, #0
   10fc0:	beq	10fb4 <__assert_fail@plt+0x10c>
   10fc4:	push	{r4, lr}
   10fc8:	blx	r3
   10fcc:	pop	{r4, lr}
   10fd0:	b	10f44 <__assert_fail@plt+0x9c>
   10fd4:	andeq	r9, r2, r4, lsl pc
   10fd8:	andeq	r0, r0, r0
   10fdc:	push	{fp}		; (str fp, [sp, #-4]!)
   10fe0:	add	fp, sp, #0
   10fe4:	sub	sp, sp, #12
   10fe8:	mov	r3, r0
   10fec:	strb	r3, [fp, #-5]
   10ff0:	ldrb	r3, [fp, #-5]
   10ff4:	mov	r0, r3
   10ff8:	add	sp, fp, #0
   10ffc:	pop	{fp}		; (ldr fp, [sp], #4)
   11000:	bx	lr
   11004:	push	{fp, lr}
   11008:	add	fp, sp, #4
   1100c:	ldr	r0, [pc, #32]	; 11034 <__assert_fail@plt+0x18c>
   11010:	bl	10dc4 <gettext@plt>
   11014:	mov	r2, r0
   11018:	ldr	r3, [pc, #24]	; 11038 <__assert_fail@plt+0x190>
   1101c:	ldr	r3, [r3]
   11020:	mov	r1, r3
   11024:	mov	r0, r2
   11028:	bl	10c50 <fputs_unlocked@plt>
   1102c:	nop			; (mov r0, r0)
   11030:	pop	{fp, pc}
   11034:	andeq	r8, r1, r0, ror #6
   11038:	andeq	sl, r2, r4, asr #2
   1103c:	push	{fp, lr}
   11040:	add	fp, sp, #4
   11044:	ldr	r0, [pc, #32]	; 1106c <__assert_fail@plt+0x1c4>
   11048:	bl	10dc4 <gettext@plt>
   1104c:	mov	r2, r0
   11050:	ldr	r3, [pc, #24]	; 11070 <__assert_fail@plt+0x1c8>
   11054:	ldr	r3, [r3]
   11058:	mov	r1, r3
   1105c:	mov	r0, r2
   11060:	bl	10c50 <fputs_unlocked@plt>
   11064:	nop			; (mov r0, r0)
   11068:	pop	{fp, pc}
   1106c:	andeq	r8, r1, ip, lsr #7
   11070:	andeq	sl, r2, r4, asr #2
   11074:	push	{fp, lr}
   11078:	add	fp, sp, #4
   1107c:	sub	sp, sp, #80	; 0x50
   11080:	str	r0, [fp, #-80]	; 0xffffffb0
   11084:	ldr	r3, [pc, #348]	; 111e8 <__assert_fail@plt+0x340>
   11088:	sub	ip, fp, #72	; 0x48
   1108c:	mov	lr, r3
   11090:	ldm	lr!, {r0, r1, r2, r3}
   11094:	stmia	ip!, {r0, r1, r2, r3}
   11098:	ldm	lr!, {r0, r1, r2, r3}
   1109c:	stmia	ip!, {r0, r1, r2, r3}
   110a0:	ldm	lr!, {r0, r1, r2, r3}
   110a4:	stmia	ip!, {r0, r1, r2, r3}
   110a8:	ldm	lr, {r0, r1}
   110ac:	stm	ip, {r0, r1}
   110b0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   110b4:	str	r3, [fp, #-8]
   110b8:	sub	r3, fp, #72	; 0x48
   110bc:	str	r3, [fp, #-12]
   110c0:	b	110d0 <__assert_fail@plt+0x228>
   110c4:	ldr	r3, [fp, #-12]
   110c8:	add	r3, r3, #8
   110cc:	str	r3, [fp, #-12]
   110d0:	ldr	r3, [fp, #-12]
   110d4:	ldr	r3, [r3]
   110d8:	cmp	r3, #0
   110dc:	beq	11100 <__assert_fail@plt+0x258>
   110e0:	ldr	r3, [fp, #-12]
   110e4:	ldr	r3, [r3]
   110e8:	mov	r1, r3
   110ec:	ldr	r0, [fp, #-80]	; 0xffffffb0
   110f0:	bl	10c68 <strcmp@plt>
   110f4:	mov	r3, r0
   110f8:	cmp	r3, #0
   110fc:	bne	110c4 <__assert_fail@plt+0x21c>
   11100:	ldr	r3, [fp, #-12]
   11104:	ldr	r3, [r3, #4]
   11108:	cmp	r3, #0
   1110c:	beq	1111c <__assert_fail@plt+0x274>
   11110:	ldr	r3, [fp, #-12]
   11114:	ldr	r3, [r3, #4]
   11118:	str	r3, [fp, #-8]
   1111c:	ldr	r0, [pc, #200]	; 111ec <__assert_fail@plt+0x344>
   11120:	bl	10dc4 <gettext@plt>
   11124:	mov	r3, r0
   11128:	ldr	r2, [pc, #192]	; 111f0 <__assert_fail@plt+0x348>
   1112c:	ldr	r1, [pc, #192]	; 111f4 <__assert_fail@plt+0x34c>
   11130:	mov	r0, r3
   11134:	bl	10c74 <printf@plt>
   11138:	mov	r1, #0
   1113c:	mov	r0, #5
   11140:	bl	10e48 <setlocale@plt>
   11144:	str	r0, [fp, #-16]
   11148:	ldr	r3, [fp, #-16]
   1114c:	cmp	r3, #0
   11150:	beq	11190 <__assert_fail@plt+0x2e8>
   11154:	mov	r2, #3
   11158:	ldr	r1, [pc, #152]	; 111f8 <__assert_fail@plt+0x350>
   1115c:	ldr	r0, [fp, #-16]
   11160:	bl	10e84 <strncmp@plt>
   11164:	mov	r3, r0
   11168:	cmp	r3, #0
   1116c:	beq	11190 <__assert_fail@plt+0x2e8>
   11170:	ldr	r0, [pc, #132]	; 111fc <__assert_fail@plt+0x354>
   11174:	bl	10dc4 <gettext@plt>
   11178:	mov	r2, r0
   1117c:	ldr	r3, [pc, #124]	; 11200 <__assert_fail@plt+0x358>
   11180:	ldr	r3, [r3]
   11184:	mov	r1, r3
   11188:	mov	r0, r2
   1118c:	bl	10c50 <fputs_unlocked@plt>
   11190:	ldr	r0, [pc, #108]	; 11204 <__assert_fail@plt+0x35c>
   11194:	bl	10dc4 <gettext@plt>
   11198:	mov	r3, r0
   1119c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   111a0:	ldr	r1, [pc, #72]	; 111f0 <__assert_fail@plt+0x348>
   111a4:	mov	r0, r3
   111a8:	bl	10c74 <printf@plt>
   111ac:	ldr	r0, [pc, #84]	; 11208 <__assert_fail@plt+0x360>
   111b0:	bl	10dc4 <gettext@plt>
   111b4:	ldr	r2, [fp, #-8]
   111b8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   111bc:	cmp	r2, r3
   111c0:	bne	111cc <__assert_fail@plt+0x324>
   111c4:	ldr	r3, [pc, #64]	; 1120c <__assert_fail@plt+0x364>
   111c8:	b	111d0 <__assert_fail@plt+0x328>
   111cc:	ldr	r3, [pc, #60]	; 11210 <__assert_fail@plt+0x368>
   111d0:	mov	r2, r3
   111d4:	ldr	r1, [fp, #-8]
   111d8:	bl	10c74 <printf@plt>
   111dc:	nop			; (mov r0, r0)
   111e0:	sub	sp, fp, #4
   111e4:	pop	{fp, pc}
   111e8:	strdeq	r8, [r1], -r4
   111ec:	andeq	r8, r1, r0, lsl #9
   111f0:	muleq	r1, r8, r4
   111f4:	andeq	r8, r1, r0, asr #9
   111f8:	ldrdeq	r8, [r1], -r0
   111fc:	ldrdeq	r8, [r1], -r4
   11200:	andeq	sl, r2, r4, asr #2
   11204:	andeq	r8, r1, ip, lsl r5
   11208:	andeq	r8, r1, r8, lsr r5
   1120c:	andeq	r8, r1, ip, ror #10
   11210:	andeq	r8, r1, r8, ror r5
   11214:	push	{fp}		; (str fp, [sp, #-4]!)
   11218:	add	fp, sp, #0
   1121c:	sub	sp, sp, #12
   11220:	str	r0, [fp, #-8]
   11224:	ldr	r3, [fp, #-8]
   11228:	ldr	r3, [r3, #16]
   1122c:	and	r3, r3, #61440	; 0xf000
   11230:	cmp	r3, #32768	; 0x8000
   11234:	beq	1124c <__assert_fail@plt+0x3a4>
   11238:	ldr	r3, [fp, #-8]
   1123c:	ldr	r3, [r3, #16]
   11240:	and	r3, r3, #61440	; 0xf000
   11244:	cmp	r3, #40960	; 0xa000
   11248:	bne	11254 <__assert_fail@plt+0x3ac>
   1124c:	mov	r3, #1
   11250:	b	11258 <__assert_fail@plt+0x3b0>
   11254:	mov	r3, #0
   11258:	and	r3, r3, #1
   1125c:	uxtb	r3, r3
   11260:	mov	r0, r3
   11264:	add	sp, fp, #0
   11268:	pop	{fp}		; (ldr fp, [sp], #4)
   1126c:	bx	lr
   11270:	push	{r4, fp, lr}
   11274:	add	fp, sp, #8
   11278:	sub	sp, sp, #12
   1127c:	str	r0, [fp, #-16]
   11280:	ldr	r3, [fp, #-16]
   11284:	cmp	r3, #0
   11288:	beq	112b8 <__assert_fail@plt+0x410>
   1128c:	ldr	r3, [pc, #316]	; 113d0 <__assert_fail@plt+0x528>
   11290:	ldr	r4, [r3]
   11294:	ldr	r0, [pc, #312]	; 113d4 <__assert_fail@plt+0x52c>
   11298:	bl	10dc4 <gettext@plt>
   1129c:	mov	r1, r0
   112a0:	ldr	r3, [pc, #304]	; 113d8 <__assert_fail@plt+0x530>
   112a4:	ldr	r3, [r3]
   112a8:	mov	r2, r3
   112ac:	mov	r0, r4
   112b0:	bl	10de8 <fprintf@plt>
   112b4:	b	113c8 <__assert_fail@plt+0x520>
   112b8:	ldr	r0, [pc, #284]	; 113dc <__assert_fail@plt+0x534>
   112bc:	bl	10dc4 <gettext@plt>
   112c0:	mov	r2, r0
   112c4:	ldr	r3, [pc, #268]	; 113d8 <__assert_fail@plt+0x530>
   112c8:	ldr	r3, [r3]
   112cc:	mov	r1, r3
   112d0:	mov	r0, r2
   112d4:	bl	10c74 <printf@plt>
   112d8:	ldr	r0, [pc, #256]	; 113e0 <__assert_fail@plt+0x538>
   112dc:	bl	10dc4 <gettext@plt>
   112e0:	mov	r2, r0
   112e4:	ldr	r3, [pc, #248]	; 113e4 <__assert_fail@plt+0x53c>
   112e8:	ldr	r3, [r3]
   112ec:	mov	r1, r3
   112f0:	mov	r0, r2
   112f4:	bl	10c50 <fputs_unlocked@plt>
   112f8:	bl	11004 <__assert_fail@plt+0x15c>
   112fc:	ldr	r0, [pc, #228]	; 113e8 <__assert_fail@plt+0x540>
   11300:	bl	10dc4 <gettext@plt>
   11304:	mov	r2, r0
   11308:	ldr	r3, [pc, #212]	; 113e4 <__assert_fail@plt+0x53c>
   1130c:	ldr	r3, [r3]
   11310:	mov	r1, r3
   11314:	mov	r0, r2
   11318:	bl	10c50 <fputs_unlocked@plt>
   1131c:	ldr	r0, [pc, #200]	; 113ec <__assert_fail@plt+0x544>
   11320:	bl	10dc4 <gettext@plt>
   11324:	mov	r2, r0
   11328:	ldr	r3, [pc, #180]	; 113e4 <__assert_fail@plt+0x53c>
   1132c:	ldr	r3, [r3]
   11330:	mov	r1, r3
   11334:	mov	r0, r2
   11338:	bl	10c50 <fputs_unlocked@plt>
   1133c:	ldr	r0, [pc, #172]	; 113f0 <__assert_fail@plt+0x548>
   11340:	bl	10dc4 <gettext@plt>
   11344:	mov	r2, r0
   11348:	ldr	r3, [pc, #148]	; 113e4 <__assert_fail@plt+0x53c>
   1134c:	ldr	r3, [r3]
   11350:	mov	r1, r3
   11354:	mov	r0, r2
   11358:	bl	10c50 <fputs_unlocked@plt>
   1135c:	ldr	r0, [pc, #144]	; 113f4 <__assert_fail@plt+0x54c>
   11360:	bl	10dc4 <gettext@plt>
   11364:	mov	r2, r0
   11368:	ldr	r3, [pc, #116]	; 113e4 <__assert_fail@plt+0x53c>
   1136c:	ldr	r3, [r3]
   11370:	mov	r1, r3
   11374:	mov	r0, r2
   11378:	bl	10c50 <fputs_unlocked@plt>
   1137c:	ldr	r0, [pc, #116]	; 113f8 <__assert_fail@plt+0x550>
   11380:	bl	10dc4 <gettext@plt>
   11384:	mov	r2, r0
   11388:	ldr	r3, [pc, #84]	; 113e4 <__assert_fail@plt+0x53c>
   1138c:	ldr	r3, [r3]
   11390:	mov	r1, r3
   11394:	mov	r0, r2
   11398:	bl	10c50 <fputs_unlocked@plt>
   1139c:	bl	1103c <__assert_fail@plt+0x194>
   113a0:	ldr	r0, [pc, #84]	; 113fc <__assert_fail@plt+0x554>
   113a4:	bl	10dc4 <gettext@plt>
   113a8:	mov	r2, r0
   113ac:	ldr	r3, [pc, #48]	; 113e4 <__assert_fail@plt+0x53c>
   113b0:	ldr	r3, [r3]
   113b4:	mov	r1, r3
   113b8:	mov	r0, r2
   113bc:	bl	10c50 <fputs_unlocked@plt>
   113c0:	ldr	r0, [pc, #56]	; 11400 <__assert_fail@plt+0x558>
   113c4:	bl	11074 <__assert_fail@plt+0x1cc>
   113c8:	ldr	r0, [fp, #-16]
   113cc:	bl	10db8 <exit@plt>
   113d0:	andeq	sl, r2, r0, asr #2
   113d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   113d8:	andeq	sl, r2, r0, ror #2
   113dc:	andeq	r8, r1, r0, lsl #14
   113e0:	andeq	r8, r1, r0, lsr #14
   113e4:	andeq	sl, r2, r4, asr #2
   113e8:	andeq	r8, r1, r4, lsr r8
   113ec:	andeq	r8, r1, r8, ror #16
   113f0:			; <UNDEFINED> instruction: 0x000188b8
   113f4:	andeq	r8, r1, r8, lsr #18
   113f8:	andeq	r8, r1, r8, asr r9
   113fc:	muleq	r1, r0, r9
   11400:	andeq	r8, r1, r0, asr sl
   11404:	push	{r4, r5, fp, lr}
   11408:	add	fp, sp, #12
   1140c:	sub	sp, sp, #184	; 0xb8
   11410:	str	r0, [fp, #-168]	; 0xffffff58
   11414:	str	r1, [fp, #-172]	; 0xffffff54
   11418:	strd	r2, [fp, #-180]	; 0xffffff4c
   1141c:	ldr	r3, [pc, #1748]	; 11af8 <__assert_fail@plt+0xc50>
   11420:	ldrb	r3, [r3]
   11424:	cmp	r3, #0
   11428:	bne	11448 <__assert_fail@plt+0x5a0>
   1142c:	ldr	r3, [fp, #12]
   11430:	cmp	r3, #0
   11434:	beq	114a4 <__assert_fail@plt+0x5fc>
   11438:	ldrd	r2, [fp, #4]
   1143c:	cmp	r2, #0
   11440:	sbcs	r3, r3, #0
   11444:	bge	114a4 <__assert_fail@plt+0x5fc>
   11448:	sub	r3, fp, #156	; 0x9c
   1144c:	mov	r1, r3
   11450:	ldr	r0, [fp, #-168]	; 0xffffff58
   11454:	bl	18344 <__assert_fail@plt+0x749c>
   11458:	mov	r3, r0
   1145c:	cmp	r3, #0
   11460:	beq	114a4 <__assert_fail@plt+0x5fc>
   11464:	bl	10df4 <__errno_location@plt>
   11468:	mov	r3, r0
   1146c:	ldr	r4, [r3]
   11470:	ldr	r0, [pc, #1668]	; 11afc <__assert_fail@plt+0xc54>
   11474:	bl	10dc4 <gettext@plt>
   11478:	mov	r5, r0
   1147c:	ldr	r1, [fp, #-172]	; 0xffffff54
   11480:	mov	r0, #4
   11484:	bl	14948 <__assert_fail@plt+0x3aa0>
   11488:	mov	r3, r0
   1148c:	mov	r2, r5
   11490:	mov	r1, r4
   11494:	mov	r0, #0
   11498:	bl	10d58 <error@plt>
   1149c:	mov	r3, #0
   114a0:	b	11aec <__assert_fail@plt+0xc44>
   114a4:	ldr	r3, [pc, #1612]	; 11af8 <__assert_fail@plt+0xc50>
   114a8:	ldrb	r3, [r3]
   114ac:	cmp	r3, #0
   114b0:	beq	11760 <__assert_fail@plt+0x8b8>
   114b4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   114b8:	cmp	r3, #0
   114bc:	ble	114d4 <__assert_fail@plt+0x62c>
   114c0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   114c4:	cmp	r3, #536870912	; 0x20000000
   114c8:	bhi	114d4 <__assert_fail@plt+0x62c>
   114cc:	ldr	r3, [fp, #-100]	; 0xffffff9c
   114d0:	b	114d8 <__assert_fail@plt+0x630>
   114d4:	mov	r3, #512	; 0x200
   114d8:	str	r3, [fp, #-24]	; 0xffffffe8
   114dc:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   114e0:	strd	r2, [fp, #-36]	; 0xffffffdc
   114e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   114e8:	cmp	r3, #0
   114ec:	bge	115b8 <__assert_fail@plt+0x710>
   114f0:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   114f4:	cmp	r2, #0
   114f8:	sbcs	r3, r3, #0
   114fc:	bge	11544 <__assert_fail@plt+0x69c>
   11500:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11504:	mov	r2, r3
   11508:	asr	r3, r2, #31
   1150c:	mvn	r0, #0
   11510:	mvn	r1, #-2147483648	; 0x80000000
   11514:	bl	180ac <__assert_fail@plt+0x7204>
   11518:	mov	r2, r0
   1151c:	mov	r3, r1
   11520:	mov	r0, r2
   11524:	mov	r1, r3
   11528:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   1152c:	cmp	r2, r0
   11530:	sbcs	r3, r3, r1
   11534:	movlt	r3, #1
   11538:	movge	r3, #0
   1153c:	uxtb	r3, r3
   11540:	b	116a4 <__assert_fail@plt+0x7fc>
   11544:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11548:	cmn	r3, #1
   1154c:	bne	11574 <__assert_fail@plt+0x6cc>
   11550:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11554:	adds	r2, r2, #0
   11558:	adc	r3, r3, #-2147483648	; 0x80000000
   1155c:	cmp	r2, #1
   11560:	sbcs	r3, r3, #0
   11564:	movge	r3, #1
   11568:	movlt	r3, #0
   1156c:	uxtb	r3, r3
   11570:	b	116a4 <__assert_fail@plt+0x7fc>
   11574:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11578:	mov	r2, r3
   1157c:	asr	r3, r2, #31
   11580:	mov	r0, #0
   11584:	mov	r1, #-2147483648	; 0x80000000
   11588:	bl	180ac <__assert_fail@plt+0x7204>
   1158c:	mov	r2, r0
   11590:	mov	r3, r1
   11594:	mov	r0, r2
   11598:	mov	r1, r3
   1159c:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   115a0:	cmp	r0, r2
   115a4:	sbcs	r3, r1, r3
   115a8:	movlt	r3, #1
   115ac:	movge	r3, #0
   115b0:	uxtb	r3, r3
   115b4:	b	116a4 <__assert_fail@plt+0x7fc>
   115b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115bc:	cmp	r3, #0
   115c0:	beq	116a0 <__assert_fail@plt+0x7f8>
   115c4:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   115c8:	cmp	r2, #0
   115cc:	sbcs	r3, r3, #0
   115d0:	bge	1165c <__assert_fail@plt+0x7b4>
   115d4:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   115d8:	mvn	r0, #0
   115dc:	mvn	r1, #0
   115e0:	cmp	r3, r1
   115e4:	cmpeq	r2, r0
   115e8:	bne	11618 <__assert_fail@plt+0x770>
   115ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   115f0:	mov	r2, r3
   115f4:	asr	r3, r2, #31
   115f8:	adds	r2, r2, #0
   115fc:	adc	r3, r3, #-2147483648	; 0x80000000
   11600:	cmp	r2, #1
   11604:	sbcs	r3, r3, #0
   11608:	movge	r3, #1
   1160c:	movlt	r3, #0
   11610:	uxtb	r3, r3
   11614:	b	116a4 <__assert_fail@plt+0x7fc>
   11618:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   1161c:	mov	r0, #0
   11620:	mov	r1, #-2147483648	; 0x80000000
   11624:	bl	180ac <__assert_fail@plt+0x7204>
   11628:	mov	r2, r0
   1162c:	mov	r3, r1
   11630:	mov	r0, r2
   11634:	mov	r1, r3
   11638:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1163c:	mov	r2, r3
   11640:	asr	r3, r2, #31
   11644:	cmp	r0, r2
   11648:	sbcs	r3, r1, r3
   1164c:	movlt	r3, #1
   11650:	movge	r3, #0
   11654:	uxtb	r3, r3
   11658:	b	116a4 <__assert_fail@plt+0x7fc>
   1165c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   11660:	mov	r2, r3
   11664:	asr	r3, r2, #31
   11668:	mvn	r0, #0
   1166c:	mvn	r1, #-2147483648	; 0x80000000
   11670:	bl	180ac <__assert_fail@plt+0x7204>
   11674:	mov	r2, r0
   11678:	mov	r3, r1
   1167c:	mov	r0, r2
   11680:	mov	r1, r3
   11684:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11688:	cmp	r0, r2
   1168c:	sbcs	r3, r1, r3
   11690:	movlt	r3, #1
   11694:	movge	r3, #0
   11698:	uxtb	r3, r3
   1169c:	b	116a4 <__assert_fail@plt+0x7fc>
   116a0:	mov	r3, #0
   116a4:	cmp	r3, #0
   116a8:	beq	116e0 <__assert_fail@plt+0x838>
   116ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116b0:	mov	r2, r3
   116b4:	asr	r3, r2, #31
   116b8:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   116bc:	mul	lr, r0, r3
   116c0:	mul	ip, r2, r1
   116c4:	add	ip, lr, ip
   116c8:	umull	r2, r3, r2, r0
   116cc:	add	r1, ip, r3
   116d0:	mov	r3, r1
   116d4:	strd	r2, [fp, #-180]	; 0xffffff4c
   116d8:	mov	r3, #1
   116dc:	b	11710 <__assert_fail@plt+0x868>
   116e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   116e4:	mov	r2, r3
   116e8:	asr	r3, r2, #31
   116ec:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   116f0:	mul	lr, r0, r3
   116f4:	mul	ip, r2, r1
   116f8:	add	ip, lr, ip
   116fc:	umull	r2, r3, r2, r0
   11700:	add	r1, ip, r3
   11704:	mov	r3, r1
   11708:	strd	r2, [fp, #-180]	; 0xffffff4c
   1170c:	mov	r3, #0
   11710:	cmp	r3, #0
   11714:	beq	11760 <__assert_fail@plt+0x8b8>
   11718:	ldr	r0, [pc, #992]	; 11b00 <__assert_fail@plt+0xc58>
   1171c:	bl	10dc4 <gettext@plt>
   11720:	mov	r4, r0
   11724:	ldr	r1, [fp, #-172]	; 0xffffff54
   11728:	mov	r0, #4
   1172c:	bl	14948 <__assert_fail@plt+0x3aa0>
   11730:	mov	r3, r0
   11734:	str	r3, [sp, #12]
   11738:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1173c:	str	r3, [sp, #8]
   11740:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   11744:	strd	r2, [sp]
   11748:	mov	r2, r4
   1174c:	mov	r1, #0
   11750:	mov	r0, #0
   11754:	bl	10d58 <error@plt>
   11758:	mov	r3, #0
   1175c:	b	11aec <__assert_fail@plt+0xc44>
   11760:	ldr	r3, [fp, #12]
   11764:	cmp	r3, #0
   11768:	beq	11a58 <__assert_fail@plt+0xbb0>
   1176c:	ldrd	r2, [fp, #4]
   11770:	cmp	r2, #0
   11774:	sbcs	r3, r3, #0
   11778:	blt	11788 <__assert_fail@plt+0x8e0>
   1177c:	ldrd	r2, [fp, #4]
   11780:	strd	r2, [fp, #-20]	; 0xffffffec
   11784:	b	11858 <__assert_fail@plt+0x9b0>
   11788:	sub	r3, fp, #156	; 0x9c
   1178c:	mov	r0, r3
   11790:	bl	11214 <__assert_fail@plt+0x36c>
   11794:	mov	r3, r0
   11798:	cmp	r3, #0
   1179c:	beq	117ec <__assert_fail@plt+0x944>
   117a0:	ldrd	r2, [fp, #-108]	; 0xffffff94
   117a4:	strd	r2, [fp, #-20]	; 0xffffffec
   117a8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   117ac:	cmp	r2, #0
   117b0:	sbcs	r3, r3, #0
   117b4:	bge	11858 <__assert_fail@plt+0x9b0>
   117b8:	ldr	r0, [pc, #836]	; 11b04 <__assert_fail@plt+0xc5c>
   117bc:	bl	10dc4 <gettext@plt>
   117c0:	mov	r4, r0
   117c4:	ldr	r1, [fp, #-172]	; 0xffffff54
   117c8:	mov	r0, #4
   117cc:	bl	14948 <__assert_fail@plt+0x3aa0>
   117d0:	mov	r3, r0
   117d4:	mov	r2, r4
   117d8:	mov	r1, #0
   117dc:	mov	r0, #0
   117e0:	bl	10d58 <error@plt>
   117e4:	mov	r3, #0
   117e8:	b	11aec <__assert_fail@plt+0xc44>
   117ec:	mov	r3, #2
   117f0:	str	r3, [sp]
   117f4:	mov	r2, #0
   117f8:	mov	r3, #0
   117fc:	ldr	r0, [fp, #-168]	; 0xffffff58
   11800:	bl	10d1c <lseek64@plt>
   11804:	strd	r0, [fp, #-20]	; 0xffffffec
   11808:	ldrd	r2, [fp, #-20]	; 0xffffffec
   1180c:	cmp	r2, #0
   11810:	sbcs	r3, r3, #0
   11814:	bge	11858 <__assert_fail@plt+0x9b0>
   11818:	bl	10df4 <__errno_location@plt>
   1181c:	mov	r3, r0
   11820:	ldr	r4, [r3]
   11824:	ldr	r0, [pc, #732]	; 11b08 <__assert_fail@plt+0xc60>
   11828:	bl	10dc4 <gettext@plt>
   1182c:	mov	r5, r0
   11830:	ldr	r1, [fp, #-172]	; 0xffffff54
   11834:	mov	r0, #4
   11838:	bl	14948 <__assert_fail@plt+0x3aa0>
   1183c:	mov	r3, r0
   11840:	mov	r2, r5
   11844:	mov	r1, r4
   11848:	mov	r0, #0
   1184c:	bl	10d58 <error@plt>
   11850:	mov	r3, #0
   11854:	b	11aec <__assert_fail@plt+0xc44>
   11858:	ldr	r3, [fp, #12]
   1185c:	cmp	r3, #2
   11860:	bne	11888 <__assert_fail@plt+0x9e0>
   11864:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11868:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1186c:	cmp	r2, r0
   11870:	sbcs	ip, r3, r1
   11874:	bge	11880 <__assert_fail@plt+0x9d8>
   11878:	mov	r2, r0
   1187c:	mov	r3, r1
   11880:	strd	r2, [fp, #-164]	; 0xffffff5c
   11884:	b	11a60 <__assert_fail@plt+0xbb8>
   11888:	ldr	r3, [fp, #12]
   1188c:	cmp	r3, #3
   11890:	bne	118b8 <__assert_fail@plt+0xa10>
   11894:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11898:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1189c:	cmp	r0, r2
   118a0:	sbcs	ip, r1, r3
   118a4:	bge	118b0 <__assert_fail@plt+0xa08>
   118a8:	mov	r2, r0
   118ac:	mov	r3, r1
   118b0:	strd	r2, [fp, #-164]	; 0xffffff5c
   118b4:	b	11a60 <__assert_fail@plt+0xbb8>
   118b8:	ldr	r3, [fp, #12]
   118bc:	cmp	r3, #4
   118c0:	bne	118ec <__assert_fail@plt+0xa44>
   118c4:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   118c8:	ldrd	r0, [fp, #-20]	; 0xffffffec
   118cc:	bl	180ac <__assert_fail@plt+0x7204>
   118d0:	mov	r0, r2
   118d4:	mov	r1, r3
   118d8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   118dc:	subs	r2, r2, r0
   118e0:	sbc	r3, r3, r1
   118e4:	strd	r2, [fp, #-164]	; 0xffffff5c
   118e8:	b	11a60 <__assert_fail@plt+0xbb8>
   118ec:	ldr	r3, [fp, #12]
   118f0:	cmp	r3, #5
   118f4:	bne	11934 <__assert_fail@plt+0xa8c>
   118f8:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   118fc:	ldrd	r0, [fp, #-20]	; 0xffffffec
   11900:	bl	180ac <__assert_fail@plt+0x7204>
   11904:	strd	r2, [fp, #-44]	; 0xffffffd4
   11908:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1190c:	orrs	r3, r2, r3
   11910:	beq	11928 <__assert_fail@plt+0xa80>
   11914:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   11918:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   1191c:	subs	r2, r0, r2
   11920:	sbc	r3, r1, r3
   11924:	b	11930 <__assert_fail@plt+0xa88>
   11928:	mov	r2, #0
   1192c:	mov	r3, #0
   11930:	strd	r2, [fp, #-180]	; 0xffffff4c
   11934:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11938:	cmp	r2, #0
   1193c:	sbcs	r3, r3, #0
   11940:	bge	11974 <__assert_fail@plt+0xacc>
   11944:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11948:	mov	r0, #0
   1194c:	mov	r1, #-2147483648	; 0x80000000
   11950:	subs	r2, r0, r2
   11954:	sbc	r3, r1, r3
   11958:	ldrd	r0, [fp, #-20]	; 0xffffffec
   1195c:	cmp	r0, r2
   11960:	sbcs	r3, r1, r3
   11964:	movlt	r3, #1
   11968:	movge	r3, #0
   1196c:	uxtb	r3, r3
   11970:	b	119e0 <__assert_fail@plt+0xb38>
   11974:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11978:	cmp	r2, #0
   1197c:	sbcs	r3, r3, #0
   11980:	bge	119b4 <__assert_fail@plt+0xb0c>
   11984:	mov	r0, #0
   11988:	mov	r1, #-2147483648	; 0x80000000
   1198c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11990:	subs	r2, r0, r2
   11994:	sbc	r3, r1, r3
   11998:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   1199c:	cmp	r0, r2
   119a0:	sbcs	r3, r1, r3
   119a4:	movlt	r3, #1
   119a8:	movge	r3, #0
   119ac:	uxtb	r3, r3
   119b0:	b	119e0 <__assert_fail@plt+0xb38>
   119b4:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   119b8:	mvn	r0, #0
   119bc:	mvn	r1, #-2147483648	; 0x80000000
   119c0:	subs	r0, r0, r2
   119c4:	sbc	r1, r1, r3
   119c8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   119cc:	cmp	r0, r2
   119d0:	sbcs	r3, r1, r3
   119d4:	movlt	r3, #1
   119d8:	movge	r3, #0
   119dc:	uxtb	r3, r3
   119e0:	cmp	r3, #0
   119e4:	beq	11a04 <__assert_fail@plt+0xb5c>
   119e8:	ldrd	r2, [fp, #-20]	; 0xffffffec
   119ec:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   119f0:	adds	r2, r2, r0
   119f4:	adc	r3, r3, r1
   119f8:	strd	r2, [fp, #-164]	; 0xffffff5c
   119fc:	mov	r3, #1
   11a00:	b	11a1c <__assert_fail@plt+0xb74>
   11a04:	ldrd	r2, [fp, #-20]	; 0xffffffec
   11a08:	ldrd	r0, [fp, #-180]	; 0xffffff4c
   11a0c:	adds	r2, r2, r0
   11a10:	adc	r3, r3, r1
   11a14:	strd	r2, [fp, #-164]	; 0xffffff5c
   11a18:	mov	r3, #0
   11a1c:	cmp	r3, #0
   11a20:	beq	11a60 <__assert_fail@plt+0xbb8>
   11a24:	ldr	r0, [pc, #224]	; 11b0c <__assert_fail@plt+0xc64>
   11a28:	bl	10dc4 <gettext@plt>
   11a2c:	mov	r4, r0
   11a30:	ldr	r1, [fp, #-172]	; 0xffffff54
   11a34:	mov	r0, #4
   11a38:	bl	14948 <__assert_fail@plt+0x3aa0>
   11a3c:	mov	r3, r0
   11a40:	mov	r2, r4
   11a44:	mov	r1, #0
   11a48:	mov	r0, #0
   11a4c:	bl	10d58 <error@plt>
   11a50:	mov	r3, #0
   11a54:	b	11aec <__assert_fail@plt+0xc44>
   11a58:	ldrd	r2, [fp, #-180]	; 0xffffff4c
   11a5c:	strd	r2, [fp, #-164]	; 0xffffff5c
   11a60:	ldrd	r2, [fp, #-164]	; 0xffffff5c
   11a64:	cmp	r2, #0
   11a68:	sbcs	r3, r3, #0
   11a6c:	bge	11a7c <__assert_fail@plt+0xbd4>
   11a70:	mov	r2, #0
   11a74:	mov	r3, #0
   11a78:	strd	r2, [fp, #-164]	; 0xffffff5c
   11a7c:	ldrd	r2, [fp, #-164]	; 0xffffff5c
   11a80:	ldr	r0, [fp, #-168]	; 0xffffff58
   11a84:	bl	10cbc <ftruncate64@plt>
   11a88:	mov	r3, r0
   11a8c:	cmp	r3, #0
   11a90:	beq	11ae8 <__assert_fail@plt+0xc40>
   11a94:	ldrd	r2, [fp, #-164]	; 0xffffff5c
   11a98:	strd	r2, [fp, #-52]	; 0xffffffcc
   11a9c:	bl	10df4 <__errno_location@plt>
   11aa0:	mov	r3, r0
   11aa4:	ldr	r4, [r3]
   11aa8:	ldr	r0, [pc, #96]	; 11b10 <__assert_fail@plt+0xc68>
   11aac:	bl	10dc4 <gettext@plt>
   11ab0:	mov	r5, r0
   11ab4:	ldr	r1, [fp, #-172]	; 0xffffff54
   11ab8:	mov	r0, #4
   11abc:	bl	14948 <__assert_fail@plt+0x3aa0>
   11ac0:	mov	r1, r0
   11ac4:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   11ac8:	strd	r2, [sp]
   11acc:	mov	r3, r1
   11ad0:	mov	r2, r5
   11ad4:	mov	r1, r4
   11ad8:	mov	r0, #0
   11adc:	bl	10d58 <error@plt>
   11ae0:	mov	r3, #0
   11ae4:	b	11aec <__assert_fail@plt+0xc44>
   11ae8:	mov	r3, #1
   11aec:	mov	r0, r3
   11af0:	sub	sp, fp, #12
   11af4:	pop	{r4, r5, fp, pc}
   11af8:	andeq	sl, r2, r1, asr r1
   11afc:	andeq	r8, r1, ip, asr sl
   11b00:	andeq	r8, r1, ip, ror #20
   11b04:	muleq	r1, ip, sl
   11b08:	andeq	r8, r1, r8, asr #21
   11b0c:	andeq	r8, r1, r4, ror #21
   11b10:	andeq	r8, r1, r8, lsl #22
   11b14:	push	{r4, r5, fp, lr}
   11b18:	add	fp, sp, #12
   11b1c:	sub	sp, sp, #216	; 0xd8
   11b20:	str	r0, [fp, #-200]	; 0xffffff38
   11b24:	str	r1, [fp, #-204]	; 0xffffff34
   11b28:	mov	r3, #0
   11b2c:	strb	r3, [fp, #-13]
   11b30:	mov	r2, #0
   11b34:	mov	r3, #0
   11b38:	strd	r2, [fp, #-28]	; 0xffffffe4
   11b3c:	mvn	r2, #0
   11b40:	mvn	r3, #0
   11b44:	strd	r2, [fp, #-36]	; 0xffffffdc
   11b48:	mov	r3, #0
   11b4c:	str	r3, [fp, #-40]	; 0xffffffd8
   11b50:	ldr	r3, [fp, #-204]	; 0xffffff34
   11b54:	ldr	r3, [r3]
   11b58:	mov	r0, r3
   11b5c:	bl	12610 <__assert_fail@plt+0x1768>
   11b60:	ldr	r1, [pc, #2184]	; 123f0 <__assert_fail@plt+0x1548>
   11b64:	mov	r0, #6
   11b68:	bl	10e48 <setlocale@plt>
   11b6c:	ldr	r1, [pc, #2176]	; 123f4 <__assert_fail@plt+0x154c>
   11b70:	ldr	r0, [pc, #2176]	; 123f8 <__assert_fail@plt+0x1550>
   11b74:	bl	10e6c <bindtextdomain@plt>
   11b78:	ldr	r0, [pc, #2168]	; 123f8 <__assert_fail@plt+0x1550>
   11b7c:	bl	10cec <textdomain@plt>
   11b80:	ldr	r0, [pc, #2164]	; 123fc <__assert_fail@plt+0x1554>
   11b84:	bl	1831c <__assert_fail@plt+0x7474>
   11b88:	b	11ee8 <__assert_fail@plt+0x1040>
   11b8c:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11b90:	cmp	r3, #99	; 0x63
   11b94:	beq	11bd0 <__assert_fail@plt+0xd28>
   11b98:	cmp	r3, #99	; 0x63
   11b9c:	bgt	11bb4 <__assert_fail@plt+0xd0c>
   11ba0:	cmn	r3, #3
   11ba4:	beq	11ea8 <__assert_fail@plt+0x1000>
   11ba8:	cmn	r3, #2
   11bac:	beq	11ea0 <__assert_fail@plt+0xff8>
   11bb0:	b	11ee0 <__assert_fail@plt+0x1038>
   11bb4:	cmp	r3, #114	; 0x72
   11bb8:	beq	11bf0 <__assert_fail@plt+0xd48>
   11bbc:	cmp	r3, #115	; 0x73
   11bc0:	beq	11c18 <__assert_fail@plt+0xd70>
   11bc4:	cmp	r3, #111	; 0x6f
   11bc8:	beq	11be0 <__assert_fail@plt+0xd38>
   11bcc:	b	11ee0 <__assert_fail@plt+0x1038>
   11bd0:	ldr	r3, [pc, #2088]	; 12400 <__assert_fail@plt+0x1558>
   11bd4:	mov	r2, #1
   11bd8:	strb	r2, [r3]
   11bdc:	b	11ee8 <__assert_fail@plt+0x1040>
   11be0:	ldr	r3, [pc, #2076]	; 12404 <__assert_fail@plt+0x155c>
   11be4:	mov	r2, #1
   11be8:	strb	r2, [r3]
   11bec:	b	11ee8 <__assert_fail@plt+0x1040>
   11bf0:	ldr	r3, [pc, #2064]	; 12408 <__assert_fail@plt+0x1560>
   11bf4:	ldr	r3, [r3]
   11bf8:	ldr	r2, [pc, #2060]	; 1240c <__assert_fail@plt+0x1564>
   11bfc:	str	r3, [r2]
   11c00:	b	11ee8 <__assert_fail@plt+0x1040>
   11c04:	ldr	r3, [pc, #2044]	; 12408 <__assert_fail@plt+0x1560>
   11c08:	ldr	r3, [r3]
   11c0c:	add	r3, r3, #1
   11c10:	ldr	r2, [pc, #2032]	; 12408 <__assert_fail@plt+0x1560>
   11c14:	str	r3, [r2]
   11c18:	bl	10dac <__ctype_b_loc@plt>
   11c1c:	mov	r3, r0
   11c20:	ldr	r4, [r3]
   11c24:	ldr	r3, [pc, #2012]	; 12408 <__assert_fail@plt+0x1560>
   11c28:	ldr	r3, [r3]
   11c2c:	ldrb	r3, [r3]
   11c30:	mov	r0, r3
   11c34:	bl	10fdc <__assert_fail@plt+0x134>
   11c38:	mov	r3, r0
   11c3c:	lsl	r3, r3, #1
   11c40:	add	r3, r4, r3
   11c44:	ldrh	r3, [r3]
   11c48:	and	r3, r3, #8192	; 0x2000
   11c4c:	cmp	r3, #0
   11c50:	bne	11c04 <__assert_fail@plt+0xd5c>
   11c54:	ldr	r3, [pc, #1964]	; 12408 <__assert_fail@plt+0x1560>
   11c58:	ldr	r3, [r3]
   11c5c:	ldrb	r3, [r3]
   11c60:	sub	r3, r3, #37	; 0x25
   11c64:	cmp	r3, #25
   11c68:	ldrls	pc, [pc, r3, lsl #2]
   11c6c:	b	11d70 <__assert_fail@plt+0xec8>
   11c70:	andeq	r1, r1, r8, lsr sp
   11c74:	andeq	r1, r1, r0, ror sp
   11c78:	andeq	r1, r1, r0, ror sp
   11c7c:	andeq	r1, r1, r0, ror sp
   11c80:	andeq	r1, r1, r0, ror sp
   11c84:	andeq	r1, r1, r0, ror sp
   11c88:	andeq	r1, r1, r0, ror sp
   11c8c:	andeq	r1, r1, r0, ror sp
   11c90:	andeq	r1, r1, r0, ror sp
   11c94:	andeq	r1, r1, r0, ror sp
   11c98:	andeq	r1, r1, r8, lsl sp
   11c9c:	andeq	r1, r1, r0, ror sp
   11ca0:	andeq	r1, r1, r0, ror sp
   11ca4:	andeq	r1, r1, r0, ror sp
   11ca8:	andeq	r1, r1, r0, ror sp
   11cac:	andeq	r1, r1, r0, ror sp
   11cb0:	andeq	r1, r1, r0, ror sp
   11cb4:	andeq	r1, r1, r0, ror sp
   11cb8:	andeq	r1, r1, r0, ror sp
   11cbc:	andeq	r1, r1, r0, ror sp
   11cc0:	andeq	r1, r1, r0, ror sp
   11cc4:	andeq	r1, r1, r0, ror sp
   11cc8:	andeq	r1, r1, r0, ror sp
   11ccc:	ldrdeq	r1, [r1], -r8
   11cd0:	andeq	r1, r1, r0, ror sp
   11cd4:	strdeq	r1, [r1], -r8
   11cd8:	mov	r3, #3
   11cdc:	str	r3, [fp, #-40]	; 0xffffffd8
   11ce0:	ldr	r3, [pc, #1824]	; 12408 <__assert_fail@plt+0x1560>
   11ce4:	ldr	r3, [r3]
   11ce8:	add	r3, r3, #1
   11cec:	ldr	r2, [pc, #1812]	; 12408 <__assert_fail@plt+0x1560>
   11cf0:	str	r3, [r2]
   11cf4:	b	11d58 <__assert_fail@plt+0xeb0>
   11cf8:	mov	r3, #2
   11cfc:	str	r3, [fp, #-40]	; 0xffffffd8
   11d00:	ldr	r3, [pc, #1792]	; 12408 <__assert_fail@plt+0x1560>
   11d04:	ldr	r3, [r3]
   11d08:	add	r3, r3, #1
   11d0c:	ldr	r2, [pc, #1780]	; 12408 <__assert_fail@plt+0x1560>
   11d10:	str	r3, [r2]
   11d14:	b	11d58 <__assert_fail@plt+0xeb0>
   11d18:	mov	r3, #4
   11d1c:	str	r3, [fp, #-40]	; 0xffffffd8
   11d20:	ldr	r3, [pc, #1760]	; 12408 <__assert_fail@plt+0x1560>
   11d24:	ldr	r3, [r3]
   11d28:	add	r3, r3, #1
   11d2c:	ldr	r2, [pc, #1748]	; 12408 <__assert_fail@plt+0x1560>
   11d30:	str	r3, [r2]
   11d34:	b	11d58 <__assert_fail@plt+0xeb0>
   11d38:	mov	r3, #5
   11d3c:	str	r3, [fp, #-40]	; 0xffffffd8
   11d40:	ldr	r3, [pc, #1728]	; 12408 <__assert_fail@plt+0x1560>
   11d44:	ldr	r3, [r3]
   11d48:	add	r3, r3, #1
   11d4c:	ldr	r2, [pc, #1716]	; 12408 <__assert_fail@plt+0x1560>
   11d50:	str	r3, [r2]
   11d54:	nop			; (mov r0, r0)
   11d58:	b	11d70 <__assert_fail@plt+0xec8>
   11d5c:	ldr	r3, [pc, #1700]	; 12408 <__assert_fail@plt+0x1560>
   11d60:	ldr	r3, [r3]
   11d64:	add	r3, r3, #1
   11d68:	ldr	r2, [pc, #1688]	; 12408 <__assert_fail@plt+0x1560>
   11d6c:	str	r3, [r2]
   11d70:	bl	10dac <__ctype_b_loc@plt>
   11d74:	mov	r3, r0
   11d78:	ldr	r4, [r3]
   11d7c:	ldr	r3, [pc, #1668]	; 12408 <__assert_fail@plt+0x1560>
   11d80:	ldr	r3, [r3]
   11d84:	ldrb	r3, [r3]
   11d88:	mov	r0, r3
   11d8c:	bl	10fdc <__assert_fail@plt+0x134>
   11d90:	mov	r3, r0
   11d94:	lsl	r3, r3, #1
   11d98:	add	r3, r4, r3
   11d9c:	ldrh	r3, [r3]
   11da0:	and	r3, r3, #8192	; 0x2000
   11da4:	cmp	r3, #0
   11da8:	bne	11d5c <__assert_fail@plt+0xeb4>
   11dac:	ldr	r3, [pc, #1620]	; 12408 <__assert_fail@plt+0x1560>
   11db0:	ldr	r3, [r3]
   11db4:	ldrb	r3, [r3]
   11db8:	cmp	r3, #43	; 0x2b
   11dbc:	beq	11dd4 <__assert_fail@plt+0xf2c>
   11dc0:	ldr	r3, [pc, #1600]	; 12408 <__assert_fail@plt+0x1560>
   11dc4:	ldr	r3, [r3]
   11dc8:	ldrb	r3, [r3]
   11dcc:	cmp	r3, #45	; 0x2d
   11dd0:	bne	11e0c <__assert_fail@plt+0xf64>
   11dd4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11dd8:	cmp	r3, #0
   11ddc:	beq	11e04 <__assert_fail@plt+0xf5c>
   11de0:	ldr	r0, [pc, #1576]	; 12410 <__assert_fail@plt+0x1568>
   11de4:	bl	10dc4 <gettext@plt>
   11de8:	mov	r3, r0
   11dec:	mov	r2, r3
   11df0:	mov	r1, #0
   11df4:	mov	r0, #0
   11df8:	bl	10d58 <error@plt>
   11dfc:	mov	r0, #1
   11e00:	bl	11270 <__assert_fail@plt+0x3c8>
   11e04:	mov	r3, #1
   11e08:	str	r3, [fp, #-40]	; 0xffffffd8
   11e0c:	ldr	r3, [pc, #1524]	; 12408 <__assert_fail@plt+0x1560>
   11e10:	ldr	r4, [r3]
   11e14:	ldr	r0, [pc, #1528]	; 12414 <__assert_fail@plt+0x156c>
   11e18:	bl	10dc4 <gettext@plt>
   11e1c:	mov	r2, r0
   11e20:	mov	r3, #0
   11e24:	str	r3, [sp, #16]
   11e28:	str	r2, [sp, #12]
   11e2c:	ldr	r3, [pc, #1508]	; 12418 <__assert_fail@plt+0x1570>
   11e30:	str	r3, [sp, #8]
   11e34:	mvn	r2, #0
   11e38:	mvn	r3, #-2147483648	; 0x80000000
   11e3c:	strd	r2, [sp]
   11e40:	mov	r2, #0
   11e44:	mov	r3, #-2147483648	; 0x80000000
   11e48:	mov	r0, r4
   11e4c:	bl	16258 <__assert_fail@plt+0x53b0>
   11e50:	strd	r0, [fp, #-28]	; 0xffffffe4
   11e54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e58:	cmp	r3, #5
   11e5c:	beq	11e6c <__assert_fail@plt+0xfc4>
   11e60:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11e64:	cmp	r3, #4
   11e68:	bne	11e94 <__assert_fail@plt+0xfec>
   11e6c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   11e70:	orrs	r3, r2, r3
   11e74:	bne	11e94 <__assert_fail@plt+0xfec>
   11e78:	ldr	r0, [pc, #1436]	; 1241c <__assert_fail@plt+0x1574>
   11e7c:	bl	10dc4 <gettext@plt>
   11e80:	mov	r3, r0
   11e84:	mov	r2, r3
   11e88:	mov	r1, #0
   11e8c:	mov	r0, #1
   11e90:	bl	10d58 <error@plt>
   11e94:	mov	r3, #1
   11e98:	strb	r3, [fp, #-13]
   11e9c:	b	11ee8 <__assert_fail@plt+0x1040>
   11ea0:	mov	r0, #0
   11ea4:	bl	11270 <__assert_fail@plt+0x3c8>
   11ea8:	ldr	r3, [pc, #1392]	; 12420 <__assert_fail@plt+0x1578>
   11eac:	ldr	r0, [r3]
   11eb0:	ldr	r3, [pc, #1388]	; 12424 <__assert_fail@plt+0x157c>
   11eb4:	ldr	r2, [r3]
   11eb8:	mov	r3, #0
   11ebc:	str	r3, [sp, #4]
   11ec0:	ldr	r3, [pc, #1376]	; 12428 <__assert_fail@plt+0x1580>
   11ec4:	str	r3, [sp]
   11ec8:	mov	r3, r2
   11ecc:	ldr	r2, [pc, #1368]	; 1242c <__assert_fail@plt+0x1584>
   11ed0:	ldr	r1, [pc, #1368]	; 12430 <__assert_fail@plt+0x1588>
   11ed4:	bl	1540c <__assert_fail@plt+0x4564>
   11ed8:	mov	r0, #0
   11edc:	bl	10db8 <exit@plt>
   11ee0:	mov	r0, #1
   11ee4:	bl	11270 <__assert_fail@plt+0x3c8>
   11ee8:	mov	r3, #0
   11eec:	str	r3, [sp]
   11ef0:	ldr	r3, [pc, #1340]	; 12434 <__assert_fail@plt+0x158c>
   11ef4:	ldr	r2, [pc, #1340]	; 12438 <__assert_fail@plt+0x1590>
   11ef8:	ldr	r1, [fp, #-204]	; 0xffffff34
   11efc:	ldr	r0, [fp, #-200]	; 0xffffff38
   11f00:	bl	10da0 <getopt_long@plt>
   11f04:	str	r0, [fp, #-60]	; 0xffffffc4
   11f08:	ldr	r3, [fp, #-60]	; 0xffffffc4
   11f0c:	cmn	r3, #1
   11f10:	bne	11b8c <__assert_fail@plt+0xce4>
   11f14:	ldr	r3, [pc, #1312]	; 1243c <__assert_fail@plt+0x1594>
   11f18:	ldr	r3, [r3]
   11f1c:	lsl	r3, r3, #2
   11f20:	ldr	r2, [fp, #-204]	; 0xffffff34
   11f24:	add	r3, r2, r3
   11f28:	str	r3, [fp, #-204]	; 0xffffff34
   11f2c:	ldr	r3, [pc, #1288]	; 1243c <__assert_fail@plt+0x1594>
   11f30:	ldr	r3, [r3]
   11f34:	ldr	r2, [fp, #-200]	; 0xffffff38
   11f38:	sub	r3, r2, r3
   11f3c:	str	r3, [fp, #-200]	; 0xffffff38
   11f40:	ldr	r3, [pc, #1220]	; 1240c <__assert_fail@plt+0x1564>
   11f44:	ldr	r3, [r3]
   11f48:	cmp	r3, #0
   11f4c:	bne	11fb0 <__assert_fail@plt+0x1108>
   11f50:	ldrb	r3, [fp, #-13]
   11f54:	eor	r3, r3, #1
   11f58:	uxtb	r3, r3
   11f5c:	cmp	r3, #0
   11f60:	beq	11fb0 <__assert_fail@plt+0x1108>
   11f64:	ldr	r0, [pc, #1236]	; 12440 <__assert_fail@plt+0x1598>
   11f68:	bl	10dc4 <gettext@plt>
   11f6c:	mov	r4, r0
   11f70:	ldr	r1, [pc, #1228]	; 12444 <__assert_fail@plt+0x159c>
   11f74:	mov	r0, #0
   11f78:	bl	14d0c <__assert_fail@plt+0x3e64>
   11f7c:	mov	r5, r0
   11f80:	ldr	r1, [pc, #1216]	; 12448 <__assert_fail@plt+0x15a0>
   11f84:	mov	r0, #1
   11f88:	bl	14d0c <__assert_fail@plt+0x3e64>
   11f8c:	mov	r3, r0
   11f90:	str	r3, [sp]
   11f94:	mov	r3, r5
   11f98:	mov	r2, r4
   11f9c:	mov	r1, #0
   11fa0:	mov	r0, #0
   11fa4:	bl	10d58 <error@plt>
   11fa8:	mov	r0, #1
   11fac:	bl	11270 <__assert_fail@plt+0x3c8>
   11fb0:	ldr	r3, [pc, #1108]	; 1240c <__assert_fail@plt+0x1564>
   11fb4:	ldr	r3, [r3]
   11fb8:	cmp	r3, #0
   11fbc:	beq	12024 <__assert_fail@plt+0x117c>
   11fc0:	ldrb	r3, [fp, #-13]
   11fc4:	cmp	r3, #0
   11fc8:	beq	12024 <__assert_fail@plt+0x117c>
   11fcc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   11fd0:	cmp	r3, #0
   11fd4:	bne	12024 <__assert_fail@plt+0x117c>
   11fd8:	ldr	r0, [pc, #1132]	; 1244c <__assert_fail@plt+0x15a4>
   11fdc:	bl	10dc4 <gettext@plt>
   11fe0:	mov	r4, r0
   11fe4:	ldr	r1, [pc, #1112]	; 12444 <__assert_fail@plt+0x159c>
   11fe8:	mov	r0, #0
   11fec:	bl	14d0c <__assert_fail@plt+0x3e64>
   11ff0:	mov	r5, r0
   11ff4:	ldr	r1, [pc, #1100]	; 12448 <__assert_fail@plt+0x15a0>
   11ff8:	mov	r0, #1
   11ffc:	bl	14d0c <__assert_fail@plt+0x3e64>
   12000:	mov	r3, r0
   12004:	str	r3, [sp]
   12008:	mov	r3, r5
   1200c:	mov	r2, r4
   12010:	mov	r1, #0
   12014:	mov	r0, #0
   12018:	bl	10d58 <error@plt>
   1201c:	mov	r0, #1
   12020:	bl	11270 <__assert_fail@plt+0x3c8>
   12024:	ldr	r3, [pc, #984]	; 12404 <__assert_fail@plt+0x155c>
   12028:	ldrb	r3, [r3]
   1202c:	cmp	r3, #0
   12030:	beq	12094 <__assert_fail@plt+0x11ec>
   12034:	ldrb	r3, [fp, #-13]
   12038:	eor	r3, r3, #1
   1203c:	uxtb	r3, r3
   12040:	cmp	r3, #0
   12044:	beq	12094 <__assert_fail@plt+0x11ec>
   12048:	ldr	r0, [pc, #1024]	; 12450 <__assert_fail@plt+0x15a8>
   1204c:	bl	10dc4 <gettext@plt>
   12050:	mov	r4, r0
   12054:	ldr	r1, [pc, #1016]	; 12454 <__assert_fail@plt+0x15ac>
   12058:	mov	r0, #0
   1205c:	bl	14d0c <__assert_fail@plt+0x3e64>
   12060:	mov	r5, r0
   12064:	ldr	r1, [pc, #984]	; 12444 <__assert_fail@plt+0x159c>
   12068:	mov	r0, #1
   1206c:	bl	14d0c <__assert_fail@plt+0x3e64>
   12070:	mov	r3, r0
   12074:	str	r3, [sp]
   12078:	mov	r3, r5
   1207c:	mov	r2, r4
   12080:	mov	r1, #0
   12084:	mov	r0, #0
   12088:	bl	10d58 <error@plt>
   1208c:	mov	r0, #1
   12090:	bl	11270 <__assert_fail@plt+0x3c8>
   12094:	ldr	r3, [fp, #-200]	; 0xffffff38
   12098:	cmp	r3, #0
   1209c:	bgt	120c4 <__assert_fail@plt+0x121c>
   120a0:	ldr	r0, [pc, #944]	; 12458 <__assert_fail@plt+0x15b0>
   120a4:	bl	10dc4 <gettext@plt>
   120a8:	mov	r3, r0
   120ac:	mov	r2, r3
   120b0:	mov	r1, #0
   120b4:	mov	r0, #0
   120b8:	bl	10d58 <error@plt>
   120bc:	mov	r0, #1
   120c0:	bl	11270 <__assert_fail@plt+0x3c8>
   120c4:	ldr	r3, [pc, #832]	; 1240c <__assert_fail@plt+0x1564>
   120c8:	ldr	r3, [r3]
   120cc:	cmp	r3, #0
   120d0:	beq	12264 <__assert_fail@plt+0x13bc>
   120d4:	mvn	r2, #0
   120d8:	mvn	r3, #0
   120dc:	strd	r2, [fp, #-52]	; 0xffffffcc
   120e0:	ldr	r3, [pc, #804]	; 1240c <__assert_fail@plt+0x1564>
   120e4:	ldr	r3, [r3]
   120e8:	sub	r2, fp, #196	; 0xc4
   120ec:	mov	r1, r2
   120f0:	mov	r0, r3
   120f4:	bl	18334 <__assert_fail@plt+0x748c>
   120f8:	mov	r3, r0
   120fc:	cmp	r3, #0
   12100:	beq	12144 <__assert_fail@plt+0x129c>
   12104:	bl	10df4 <__errno_location@plt>
   12108:	mov	r3, r0
   1210c:	ldr	r4, [r3]
   12110:	ldr	r0, [pc, #836]	; 1245c <__assert_fail@plt+0x15b4>
   12114:	bl	10dc4 <gettext@plt>
   12118:	mov	r5, r0
   1211c:	ldr	r3, [pc, #744]	; 1240c <__assert_fail@plt+0x1564>
   12120:	ldr	r3, [r3]
   12124:	mov	r1, r3
   12128:	mov	r0, #4
   1212c:	bl	14948 <__assert_fail@plt+0x3aa0>
   12130:	mov	r3, r0
   12134:	mov	r2, r5
   12138:	mov	r1, r4
   1213c:	mov	r0, #1
   12140:	bl	10d58 <error@plt>
   12144:	sub	r3, fp, #196	; 0xc4
   12148:	mov	r0, r3
   1214c:	bl	11214 <__assert_fail@plt+0x36c>
   12150:	mov	r3, r0
   12154:	cmp	r3, #0
   12158:	beq	12168 <__assert_fail@plt+0x12c0>
   1215c:	ldrd	r2, [fp, #-148]	; 0xffffff6c
   12160:	strd	r2, [fp, #-52]	; 0xffffffcc
   12164:	b	121ec <__assert_fail@plt+0x1344>
   12168:	ldr	r3, [pc, #668]	; 1240c <__assert_fail@plt+0x1564>
   1216c:	ldr	r3, [r3]
   12170:	mov	r1, #0
   12174:	mov	r0, r3
   12178:	bl	10d64 <open64@plt>
   1217c:	str	r0, [fp, #-64]	; 0xffffffc0
   12180:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12184:	cmp	r3, #0
   12188:	blt	121ec <__assert_fail@plt+0x1344>
   1218c:	mov	r3, #2
   12190:	str	r3, [sp]
   12194:	mov	r2, #0
   12198:	mov	r3, #0
   1219c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   121a0:	bl	10d1c <lseek64@plt>
   121a4:	strd	r0, [fp, #-76]	; 0xffffffb4
   121a8:	bl	10df4 <__errno_location@plt>
   121ac:	mov	r3, r0
   121b0:	ldr	r3, [r3]
   121b4:	str	r3, [fp, #-80]	; 0xffffffb0
   121b8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   121bc:	bl	10e9c <close@plt>
   121c0:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   121c4:	cmp	r2, #0
   121c8:	sbcs	r3, r3, #0
   121cc:	blt	121dc <__assert_fail@plt+0x1334>
   121d0:	ldrd	r2, [fp, #-76]	; 0xffffffb4
   121d4:	strd	r2, [fp, #-52]	; 0xffffffcc
   121d8:	b	121ec <__assert_fail@plt+0x1344>
   121dc:	bl	10df4 <__errno_location@plt>
   121e0:	mov	r2, r0
   121e4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   121e8:	str	r3, [r2]
   121ec:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   121f0:	cmp	r2, #0
   121f4:	sbcs	r3, r3, #0
   121f8:	bge	1223c <__assert_fail@plt+0x1394>
   121fc:	bl	10df4 <__errno_location@plt>
   12200:	mov	r3, r0
   12204:	ldr	r4, [r3]
   12208:	ldr	r0, [pc, #592]	; 12460 <__assert_fail@plt+0x15b8>
   1220c:	bl	10dc4 <gettext@plt>
   12210:	mov	r5, r0
   12214:	ldr	r3, [pc, #496]	; 1240c <__assert_fail@plt+0x1564>
   12218:	ldr	r3, [r3]
   1221c:	mov	r1, r3
   12220:	mov	r0, #4
   12224:	bl	14948 <__assert_fail@plt+0x3aa0>
   12228:	mov	r3, r0
   1222c:	mov	r2, r5
   12230:	mov	r1, r4
   12234:	mov	r0, #1
   12238:	bl	10d58 <error@plt>
   1223c:	ldrb	r3, [fp, #-13]
   12240:	eor	r3, r3, #1
   12244:	uxtb	r3, r3
   12248:	cmp	r3, #0
   1224c:	beq	1225c <__assert_fail@plt+0x13b4>
   12250:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12254:	strd	r2, [fp, #-28]	; 0xffffffe4
   12258:	b	12264 <__assert_fail@plt+0x13bc>
   1225c:	ldrd	r2, [fp, #-52]	; 0xffffffcc
   12260:	strd	r2, [fp, #-36]	; 0xffffffdc
   12264:	ldr	r3, [pc, #404]	; 12400 <__assert_fail@plt+0x1558>
   12268:	ldrb	r3, [r3]
   1226c:	cmp	r3, #0
   12270:	beq	1227c <__assert_fail@plt+0x13d4>
   12274:	ldr	r3, [pc, #488]	; 12464 <__assert_fail@plt+0x15bc>
   12278:	b	12280 <__assert_fail@plt+0x13d8>
   1227c:	ldr	r3, [pc, #484]	; 12468 <__assert_fail@plt+0x15c0>
   12280:	str	r3, [fp, #-84]	; 0xffffffac
   12284:	mov	r3, #0
   12288:	strb	r3, [fp, #-53]	; 0xffffffcb
   1228c:	b	123c8 <__assert_fail@plt+0x1520>
   12290:	ldr	r2, [pc, #468]	; 1246c <__assert_fail@plt+0x15c4>
   12294:	ldr	r1, [fp, #-84]	; 0xffffffac
   12298:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1229c:	bl	10d64 <open64@plt>
   122a0:	str	r0, [fp, #-92]	; 0xffffffa4
   122a4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   122a8:	cmp	r3, #0
   122ac:	bge	12320 <__assert_fail@plt+0x1478>
   122b0:	ldr	r3, [pc, #328]	; 12400 <__assert_fail@plt+0x1558>
   122b4:	ldrb	r3, [r3]
   122b8:	eor	r3, r3, #1
   122bc:	uxtb	r3, r3
   122c0:	cmp	r3, #0
   122c4:	bne	122dc <__assert_fail@plt+0x1434>
   122c8:	bl	10df4 <__errno_location@plt>
   122cc:	mov	r3, r0
   122d0:	ldr	r3, [r3]
   122d4:	cmp	r3, #2
   122d8:	beq	123bc <__assert_fail@plt+0x1514>
   122dc:	bl	10df4 <__errno_location@plt>
   122e0:	mov	r3, r0
   122e4:	ldr	r4, [r3]
   122e8:	ldr	r0, [pc, #384]	; 12470 <__assert_fail@plt+0x15c8>
   122ec:	bl	10dc4 <gettext@plt>
   122f0:	mov	r5, r0
   122f4:	ldr	r1, [fp, #-88]	; 0xffffffa8
   122f8:	mov	r0, #4
   122fc:	bl	14948 <__assert_fail@plt+0x3aa0>
   12300:	mov	r3, r0
   12304:	mov	r2, r5
   12308:	mov	r1, r4
   1230c:	mov	r0, #0
   12310:	bl	10d58 <error@plt>
   12314:	mov	r3, #1
   12318:	strb	r3, [fp, #-53]	; 0xffffffcb
   1231c:	b	123bc <__assert_fail@plt+0x1514>
   12320:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12324:	str	r3, [sp, #8]
   12328:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   1232c:	strd	r2, [sp]
   12330:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12334:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12338:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1233c:	bl	11404 <__assert_fail@plt+0x55c>
   12340:	mov	r3, r0
   12344:	eor	r3, r3, #1
   12348:	uxtb	r3, r3
   1234c:	mov	r2, r3
   12350:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   12354:	orr	r3, r3, r2
   12358:	cmp	r3, #0
   1235c:	movne	r3, #1
   12360:	moveq	r3, #0
   12364:	strb	r3, [fp, #-53]	; 0xffffffcb
   12368:	ldr	r0, [fp, #-92]	; 0xffffffa4
   1236c:	bl	10e9c <close@plt>
   12370:	mov	r3, r0
   12374:	cmp	r3, #0
   12378:	beq	123bc <__assert_fail@plt+0x1514>
   1237c:	bl	10df4 <__errno_location@plt>
   12380:	mov	r3, r0
   12384:	ldr	r4, [r3]
   12388:	ldr	r0, [pc, #228]	; 12474 <__assert_fail@plt+0x15cc>
   1238c:	bl	10dc4 <gettext@plt>
   12390:	mov	r5, r0
   12394:	ldr	r1, [fp, #-88]	; 0xffffffa8
   12398:	mov	r0, #4
   1239c:	bl	14948 <__assert_fail@plt+0x3aa0>
   123a0:	mov	r3, r0
   123a4:	mov	r2, r5
   123a8:	mov	r1, r4
   123ac:	mov	r0, #0
   123b0:	bl	10d58 <error@plt>
   123b4:	mov	r3, #1
   123b8:	strb	r3, [fp, #-53]	; 0xffffffcb
   123bc:	ldr	r3, [fp, #-204]	; 0xffffff34
   123c0:	add	r3, r3, #4
   123c4:	str	r3, [fp, #-204]	; 0xffffff34
   123c8:	ldr	r3, [fp, #-204]	; 0xffffff34
   123cc:	ldr	r3, [r3]
   123d0:	str	r3, [fp, #-88]	; 0xffffffa8
   123d4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   123d8:	cmp	r3, #0
   123dc:	bne	12290 <__assert_fail@plt+0x13e8>
   123e0:	ldrb	r3, [fp, #-53]	; 0xffffffcb
   123e4:	mov	r0, r3
   123e8:	sub	sp, fp, #12
   123ec:	pop	{r4, r5, fp, pc}
   123f0:	andeq	r8, r1, r8, ror r5
   123f4:	andeq	r8, r1, ip, lsr #22
   123f8:	muleq	r1, r0, r5
   123fc:	ldrdeq	r2, [r1], -ip
   12400:	andeq	sl, r2, r0, asr r1
   12404:	andeq	sl, r2, r1, asr r1
   12408:	andeq	sl, r2, r8, asr #2
   1240c:	andeq	sl, r2, r4, asr r1
   12410:	andeq	r8, r1, r4, asr #22
   12414:	andeq	r8, r1, ip, ror #22
   12418:	andeq	r8, r1, ip, ror fp
   1241c:	andeq	r8, r1, ip, lsl #23
   12420:	andeq	sl, r2, r4, asr #2
   12424:	andeq	sl, r2, r8, ror #1
   12428:	andeq	r8, r1, r0, lsr #23
   1242c:	andeq	r8, r1, r0, asr #9
   12430:	andeq	r8, r1, r0, asr sl
   12434:	andeq	r8, r1, r8, ror #12
   12438:			; <UNDEFINED> instruction: 0x00018bb0
   1243c:	andeq	sl, r2, r8, lsr r1
   12440:			; <UNDEFINED> instruction: 0x00018bb8
   12444:	ldrdeq	r8, [r1], -ip
   12448:	andeq	r8, r1, r4, ror #23
   1244c:	strdeq	r8, [r1], -r0
   12450:	andeq	r8, r1, r8, lsl ip
   12454:	andeq	r8, r1, r8, lsr ip
   12458:	andeq	r8, r1, r4, asr #24
   1245c:	andeq	r8, r1, ip, asr ip
   12460:	andeq	r8, r1, r8, asr #21
   12464:	andeq	r0, r0, r1, lsl #16
   12468:	andeq	r0, r0, r1, asr #16
   1246c:			; <UNDEFINED> instruction: 0x000001b6
   12470:	andeq	r8, r1, ip, ror #24
   12474:	andeq	r8, r1, r8, lsl #25
   12478:	push	{fp}		; (str fp, [sp, #-4]!)
   1247c:	add	fp, sp, #0
   12480:	sub	sp, sp, #12
   12484:	str	r0, [fp, #-8]
   12488:	ldr	r2, [pc, #20]	; 124a4 <__assert_fail@plt+0x15fc>
   1248c:	ldr	r3, [fp, #-8]
   12490:	str	r3, [r2]
   12494:	nop			; (mov r0, r0)
   12498:	add	sp, fp, #0
   1249c:	pop	{fp}		; (ldr fp, [sp], #4)
   124a0:	bx	lr
   124a4:	andeq	sl, r2, r8, asr r1
   124a8:	push	{fp}		; (str fp, [sp, #-4]!)
   124ac:	add	fp, sp, #0
   124b0:	sub	sp, sp, #12
   124b4:	mov	r3, r0
   124b8:	strb	r3, [fp, #-5]
   124bc:	ldr	r2, [pc, #20]	; 124d8 <__assert_fail@plt+0x1630>
   124c0:	ldrb	r3, [fp, #-5]
   124c4:	strb	r3, [r2]
   124c8:	nop			; (mov r0, r0)
   124cc:	add	sp, fp, #0
   124d0:	pop	{fp}		; (ldr fp, [sp], #4)
   124d4:	bx	lr
   124d8:	andeq	sl, r2, ip, asr r1
   124dc:	push	{r4, fp, lr}
   124e0:	add	fp, sp, #8
   124e4:	sub	sp, sp, #20
   124e8:	ldr	r3, [pc, #256]	; 125f0 <__assert_fail@plt+0x1748>
   124ec:	ldr	r3, [r3]
   124f0:	mov	r0, r3
   124f4:	bl	16e8c <__assert_fail@plt+0x5fe4>
   124f8:	mov	r3, r0
   124fc:	cmp	r3, #0
   12500:	beq	125b8 <__assert_fail@plt+0x1710>
   12504:	ldr	r3, [pc, #232]	; 125f4 <__assert_fail@plt+0x174c>
   12508:	ldrb	r3, [r3]
   1250c:	eor	r3, r3, #1
   12510:	uxtb	r3, r3
   12514:	cmp	r3, #0
   12518:	bne	12530 <__assert_fail@plt+0x1688>
   1251c:	bl	10df4 <__errno_location@plt>
   12520:	mov	r3, r0
   12524:	ldr	r3, [r3]
   12528:	cmp	r3, #32
   1252c:	beq	125b8 <__assert_fail@plt+0x1710>
   12530:	ldr	r0, [pc, #192]	; 125f8 <__assert_fail@plt+0x1750>
   12534:	bl	10dc4 <gettext@plt>
   12538:	str	r0, [fp, #-16]
   1253c:	ldr	r3, [pc, #184]	; 125fc <__assert_fail@plt+0x1754>
   12540:	ldr	r3, [r3]
   12544:	cmp	r3, #0
   12548:	beq	1258c <__assert_fail@plt+0x16e4>
   1254c:	bl	10df4 <__errno_location@plt>
   12550:	mov	r3, r0
   12554:	ldr	r4, [r3]
   12558:	ldr	r3, [pc, #156]	; 125fc <__assert_fail@plt+0x1754>
   1255c:	ldr	r3, [r3]
   12560:	mov	r0, r3
   12564:	bl	14a70 <__assert_fail@plt+0x3bc8>
   12568:	mov	r2, r0
   1256c:	ldr	r3, [fp, #-16]
   12570:	str	r3, [sp]
   12574:	mov	r3, r2
   12578:	ldr	r2, [pc, #128]	; 12600 <__assert_fail@plt+0x1758>
   1257c:	mov	r1, r4
   12580:	mov	r0, #0
   12584:	bl	10d58 <error@plt>
   12588:	b	125a8 <__assert_fail@plt+0x1700>
   1258c:	bl	10df4 <__errno_location@plt>
   12590:	mov	r3, r0
   12594:	ldr	r1, [r3]
   12598:	ldr	r3, [fp, #-16]
   1259c:	ldr	r2, [pc, #96]	; 12604 <__assert_fail@plt+0x175c>
   125a0:	mov	r0, #0
   125a4:	bl	10d58 <error@plt>
   125a8:	ldr	r3, [pc, #88]	; 12608 <__assert_fail@plt+0x1760>
   125ac:	ldr	r3, [r3]
   125b0:	mov	r0, r3
   125b4:	bl	10c98 <_exit@plt>
   125b8:	ldr	r3, [pc, #76]	; 1260c <__assert_fail@plt+0x1764>
   125bc:	ldr	r3, [r3]
   125c0:	mov	r0, r3
   125c4:	bl	16e8c <__assert_fail@plt+0x5fe4>
   125c8:	mov	r3, r0
   125cc:	cmp	r3, #0
   125d0:	beq	125e4 <__assert_fail@plt+0x173c>
   125d4:	ldr	r3, [pc, #44]	; 12608 <__assert_fail@plt+0x1760>
   125d8:	ldr	r3, [r3]
   125dc:	mov	r0, r3
   125e0:	bl	10c98 <_exit@plt>
   125e4:	nop			; (mov r0, r0)
   125e8:	sub	sp, fp, #8
   125ec:	pop	{r4, fp, pc}
   125f0:	andeq	sl, r2, r4, asr #2
   125f4:	andeq	sl, r2, ip, asr r1
   125f8:	andeq	r8, r1, ip, lsr #25
   125fc:	andeq	sl, r2, r8, asr r1
   12600:			; <UNDEFINED> instruction: 0x00018cb8
   12604:	andeq	r8, r1, r0, asr #25
   12608:	andeq	sl, r2, ip, ror #1
   1260c:	andeq	sl, r2, r0, asr #2
   12610:	push	{fp, lr}
   12614:	add	fp, sp, #4
   12618:	sub	sp, sp, #16
   1261c:	str	r0, [fp, #-16]
   12620:	ldr	r3, [fp, #-16]
   12624:	cmp	r3, #0
   12628:	bne	12648 <__assert_fail@plt+0x17a0>
   1262c:	ldr	r3, [pc, #220]	; 12710 <__assert_fail@plt+0x1868>
   12630:	ldr	r3, [r3]
   12634:	mov	r2, #55	; 0x37
   12638:	mov	r1, #1
   1263c:	ldr	r0, [pc, #208]	; 12714 <__assert_fail@plt+0x186c>
   12640:	bl	10d10 <fwrite@plt>
   12644:	bl	10e90 <abort@plt>
   12648:	mov	r1, #47	; 0x2f
   1264c:	ldr	r0, [fp, #-16]
   12650:	bl	10e54 <strrchr@plt>
   12654:	str	r0, [fp, #-8]
   12658:	ldr	r3, [fp, #-8]
   1265c:	cmp	r3, #0
   12660:	beq	12670 <__assert_fail@plt+0x17c8>
   12664:	ldr	r3, [fp, #-8]
   12668:	add	r3, r3, #1
   1266c:	b	12674 <__assert_fail@plt+0x17cc>
   12670:	ldr	r3, [fp, #-16]
   12674:	str	r3, [fp, #-12]
   12678:	ldr	r2, [fp, #-12]
   1267c:	ldr	r3, [fp, #-16]
   12680:	sub	r3, r2, r3
   12684:	cmp	r3, #6
   12688:	ble	126ec <__assert_fail@plt+0x1844>
   1268c:	ldr	r3, [fp, #-12]
   12690:	sub	r3, r3, #7
   12694:	mov	r2, #7
   12698:	ldr	r1, [pc, #120]	; 12718 <__assert_fail@plt+0x1870>
   1269c:	mov	r0, r3
   126a0:	bl	10e84 <strncmp@plt>
   126a4:	mov	r3, r0
   126a8:	cmp	r3, #0
   126ac:	bne	126ec <__assert_fail@plt+0x1844>
   126b0:	ldr	r3, [fp, #-12]
   126b4:	str	r3, [fp, #-16]
   126b8:	mov	r2, #3
   126bc:	ldr	r1, [pc, #88]	; 1271c <__assert_fail@plt+0x1874>
   126c0:	ldr	r0, [fp, #-12]
   126c4:	bl	10e84 <strncmp@plt>
   126c8:	mov	r3, r0
   126cc:	cmp	r3, #0
   126d0:	bne	126ec <__assert_fail@plt+0x1844>
   126d4:	ldr	r3, [fp, #-12]
   126d8:	add	r3, r3, #3
   126dc:	str	r3, [fp, #-16]
   126e0:	ldr	r2, [pc, #56]	; 12720 <__assert_fail@plt+0x1878>
   126e4:	ldr	r3, [fp, #-16]
   126e8:	str	r3, [r2]
   126ec:	ldr	r2, [pc, #48]	; 12724 <__assert_fail@plt+0x187c>
   126f0:	ldr	r3, [fp, #-16]
   126f4:	str	r3, [r2]
   126f8:	ldr	r2, [pc, #40]	; 12728 <__assert_fail@plt+0x1880>
   126fc:	ldr	r3, [fp, #-16]
   12700:	str	r3, [r2]
   12704:	nop			; (mov r0, r0)
   12708:	sub	sp, fp, #4
   1270c:	pop	{fp, pc}
   12710:	andeq	sl, r2, r0, asr #2
   12714:	andeq	r8, r1, r4, asr #25
   12718:	strdeq	r8, [r1], -ip
   1271c:	andeq	r8, r1, r4, lsl #26
   12720:	andeq	sl, r2, r0, lsr r1
   12724:	andeq	sl, r2, r0, ror #2
   12728:	andeq	sl, r2, r4, lsr r1
   1272c:	push	{fp, lr}
   12730:	add	fp, sp, #4
   12734:	sub	sp, sp, #16
   12738:	str	r0, [fp, #-16]
   1273c:	bl	10df4 <__errno_location@plt>
   12740:	mov	r3, r0
   12744:	ldr	r3, [r3]
   12748:	str	r3, [fp, #-8]
   1274c:	ldr	r3, [fp, #-16]
   12750:	cmp	r3, #0
   12754:	beq	12760 <__assert_fail@plt+0x18b8>
   12758:	ldr	r3, [fp, #-16]
   1275c:	b	12764 <__assert_fail@plt+0x18bc>
   12760:	ldr	r3, [pc, #48]	; 12798 <__assert_fail@plt+0x18f0>
   12764:	mov	r1, #48	; 0x30
   12768:	mov	r0, r3
   1276c:	bl	15f50 <__assert_fail@plt+0x50a8>
   12770:	mov	r3, r0
   12774:	str	r3, [fp, #-12]
   12778:	bl	10df4 <__errno_location@plt>
   1277c:	mov	r2, r0
   12780:	ldr	r3, [fp, #-8]
   12784:	str	r3, [r2]
   12788:	ldr	r3, [fp, #-12]
   1278c:	mov	r0, r3
   12790:	sub	sp, fp, #4
   12794:	pop	{fp, pc}
   12798:	andeq	sl, r2, r4, ror #2
   1279c:	push	{fp}		; (str fp, [sp, #-4]!)
   127a0:	add	fp, sp, #0
   127a4:	sub	sp, sp, #12
   127a8:	str	r0, [fp, #-8]
   127ac:	ldr	r3, [fp, #-8]
   127b0:	cmp	r3, #0
   127b4:	beq	127c0 <__assert_fail@plt+0x1918>
   127b8:	ldr	r3, [fp, #-8]
   127bc:	b	127c4 <__assert_fail@plt+0x191c>
   127c0:	ldr	r3, [pc, #16]	; 127d8 <__assert_fail@plt+0x1930>
   127c4:	ldr	r3, [r3]
   127c8:	mov	r0, r3
   127cc:	add	sp, fp, #0
   127d0:	pop	{fp}		; (ldr fp, [sp], #4)
   127d4:	bx	lr
   127d8:	andeq	sl, r2, r4, ror #2
   127dc:	push	{fp}		; (str fp, [sp, #-4]!)
   127e0:	add	fp, sp, #0
   127e4:	sub	sp, sp, #12
   127e8:	str	r0, [fp, #-8]
   127ec:	str	r1, [fp, #-12]
   127f0:	ldr	r3, [fp, #-8]
   127f4:	cmp	r3, #0
   127f8:	beq	12804 <__assert_fail@plt+0x195c>
   127fc:	ldr	r3, [fp, #-8]
   12800:	b	12808 <__assert_fail@plt+0x1960>
   12804:	ldr	r3, [pc, #20]	; 12820 <__assert_fail@plt+0x1978>
   12808:	ldr	r2, [fp, #-12]
   1280c:	str	r2, [r3]
   12810:	nop			; (mov r0, r0)
   12814:	add	sp, fp, #0
   12818:	pop	{fp}		; (ldr fp, [sp], #4)
   1281c:	bx	lr
   12820:	andeq	sl, r2, r4, ror #2
   12824:	push	{fp}		; (str fp, [sp, #-4]!)
   12828:	add	fp, sp, #0
   1282c:	sub	sp, sp, #36	; 0x24
   12830:	str	r0, [fp, #-24]	; 0xffffffe8
   12834:	mov	r3, r1
   12838:	str	r2, [fp, #-32]	; 0xffffffe0
   1283c:	strb	r3, [fp, #-25]	; 0xffffffe7
   12840:	ldrb	r3, [fp, #-25]	; 0xffffffe7
   12844:	strb	r3, [fp, #-5]
   12848:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1284c:	cmp	r3, #0
   12850:	beq	1285c <__assert_fail@plt+0x19b4>
   12854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12858:	b	12860 <__assert_fail@plt+0x19b8>
   1285c:	ldr	r3, [pc, #124]	; 128e0 <__assert_fail@plt+0x1a38>
   12860:	add	r2, r3, #8
   12864:	ldrb	r3, [fp, #-5]
   12868:	lsr	r3, r3, #5
   1286c:	uxtb	r3, r3
   12870:	lsl	r3, r3, #2
   12874:	add	r3, r2, r3
   12878:	str	r3, [fp, #-12]
   1287c:	ldrb	r3, [fp, #-5]
   12880:	and	r3, r3, #31
   12884:	str	r3, [fp, #-16]
   12888:	ldr	r3, [fp, #-12]
   1288c:	ldr	r2, [r3]
   12890:	ldr	r3, [fp, #-16]
   12894:	lsr	r3, r2, r3
   12898:	and	r3, r3, #1
   1289c:	str	r3, [fp, #-20]	; 0xffffffec
   128a0:	ldr	r3, [fp, #-12]
   128a4:	ldr	r3, [r3]
   128a8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   128ac:	and	r1, r2, #1
   128b0:	ldr	r2, [fp, #-20]	; 0xffffffec
   128b4:	eor	r1, r1, r2
   128b8:	ldr	r2, [fp, #-16]
   128bc:	lsl	r2, r1, r2
   128c0:	eor	r2, r2, r3
   128c4:	ldr	r3, [fp, #-12]
   128c8:	str	r2, [r3]
   128cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   128d0:	mov	r0, r3
   128d4:	add	sp, fp, #0
   128d8:	pop	{fp}		; (ldr fp, [sp], #4)
   128dc:	bx	lr
   128e0:	andeq	sl, r2, r4, ror #2
   128e4:	push	{fp}		; (str fp, [sp, #-4]!)
   128e8:	add	fp, sp, #0
   128ec:	sub	sp, sp, #20
   128f0:	str	r0, [fp, #-16]
   128f4:	str	r1, [fp, #-20]	; 0xffffffec
   128f8:	ldr	r3, [fp, #-16]
   128fc:	cmp	r3, #0
   12900:	bne	1290c <__assert_fail@plt+0x1a64>
   12904:	ldr	r3, [pc, #44]	; 12938 <__assert_fail@plt+0x1a90>
   12908:	str	r3, [fp, #-16]
   1290c:	ldr	r3, [fp, #-16]
   12910:	ldr	r3, [r3, #4]
   12914:	str	r3, [fp, #-8]
   12918:	ldr	r3, [fp, #-16]
   1291c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12920:	str	r2, [r3, #4]
   12924:	ldr	r3, [fp, #-8]
   12928:	mov	r0, r3
   1292c:	add	sp, fp, #0
   12930:	pop	{fp}		; (ldr fp, [sp], #4)
   12934:	bx	lr
   12938:	andeq	sl, r2, r4, ror #2
   1293c:	push	{fp, lr}
   12940:	add	fp, sp, #4
   12944:	sub	sp, sp, #16
   12948:	str	r0, [fp, #-8]
   1294c:	str	r1, [fp, #-12]
   12950:	str	r2, [fp, #-16]
   12954:	ldr	r3, [fp, #-8]
   12958:	cmp	r3, #0
   1295c:	bne	12968 <__assert_fail@plt+0x1ac0>
   12960:	ldr	r3, [pc, #76]	; 129b4 <__assert_fail@plt+0x1b0c>
   12964:	str	r3, [fp, #-8]
   12968:	ldr	r3, [fp, #-8]
   1296c:	mov	r2, #10
   12970:	str	r2, [r3]
   12974:	ldr	r3, [fp, #-12]
   12978:	cmp	r3, #0
   1297c:	beq	1298c <__assert_fail@plt+0x1ae4>
   12980:	ldr	r3, [fp, #-16]
   12984:	cmp	r3, #0
   12988:	bne	12990 <__assert_fail@plt+0x1ae8>
   1298c:	bl	10e90 <abort@plt>
   12990:	ldr	r3, [fp, #-8]
   12994:	ldr	r2, [fp, #-12]
   12998:	str	r2, [r3, #40]	; 0x28
   1299c:	ldr	r3, [fp, #-8]
   129a0:	ldr	r2, [fp, #-16]
   129a4:	str	r2, [r3, #44]	; 0x2c
   129a8:	nop			; (mov r0, r0)
   129ac:	sub	sp, fp, #4
   129b0:	pop	{fp, pc}
   129b4:	andeq	sl, r2, r4, ror #2
   129b8:	push	{fp, lr}
   129bc:	add	fp, sp, #4
   129c0:	sub	sp, sp, #56	; 0x38
   129c4:	str	r0, [fp, #-56]	; 0xffffffc8
   129c8:	str	r1, [fp, #-60]	; 0xffffffc4
   129cc:	sub	r3, fp, #52	; 0x34
   129d0:	mov	r2, #48	; 0x30
   129d4:	mov	r1, #0
   129d8:	mov	r0, r3
   129dc:	bl	10e0c <memset@plt>
   129e0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   129e4:	cmp	r3, #10
   129e8:	bne	129f0 <__assert_fail@plt+0x1b48>
   129ec:	bl	10e90 <abort@plt>
   129f0:	ldr	r3, [fp, #-60]	; 0xffffffc4
   129f4:	str	r3, [fp, #-52]	; 0xffffffcc
   129f8:	ldr	r3, [fp, #-56]	; 0xffffffc8
   129fc:	mov	lr, r3
   12a00:	sub	ip, fp, #52	; 0x34
   12a04:	ldm	ip!, {r0, r1, r2, r3}
   12a08:	stmia	lr!, {r0, r1, r2, r3}
   12a0c:	ldm	ip!, {r0, r1, r2, r3}
   12a10:	stmia	lr!, {r0, r1, r2, r3}
   12a14:	ldm	ip, {r0, r1, r2, r3}
   12a18:	stm	lr, {r0, r1, r2, r3}
   12a1c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12a20:	sub	sp, fp, #4
   12a24:	pop	{fp, pc}
   12a28:	push	{fp, lr}
   12a2c:	add	fp, sp, #4
   12a30:	sub	sp, sp, #16
   12a34:	str	r0, [fp, #-16]
   12a38:	str	r1, [fp, #-20]	; 0xffffffec
   12a3c:	ldr	r0, [fp, #-16]
   12a40:	bl	10dc4 <gettext@plt>
   12a44:	str	r0, [fp, #-8]
   12a48:	ldr	r2, [fp, #-8]
   12a4c:	ldr	r3, [fp, #-16]
   12a50:	cmp	r2, r3
   12a54:	beq	12a60 <__assert_fail@plt+0x1bb8>
   12a58:	ldr	r3, [fp, #-8]
   12a5c:	b	12af0 <__assert_fail@plt+0x1c48>
   12a60:	bl	173b0 <__assert_fail@plt+0x6508>
   12a64:	str	r0, [fp, #-12]
   12a68:	ldr	r1, [pc, #140]	; 12afc <__assert_fail@plt+0x1c54>
   12a6c:	ldr	r0, [fp, #-12]
   12a70:	bl	16df4 <__assert_fail@plt+0x5f4c>
   12a74:	mov	r3, r0
   12a78:	cmp	r3, #0
   12a7c:	bne	12aa0 <__assert_fail@plt+0x1bf8>
   12a80:	ldr	r3, [fp, #-16]
   12a84:	ldrb	r3, [r3]
   12a88:	cmp	r3, #96	; 0x60
   12a8c:	bne	12a98 <__assert_fail@plt+0x1bf0>
   12a90:	ldr	r3, [pc, #104]	; 12b00 <__assert_fail@plt+0x1c58>
   12a94:	b	12af0 <__assert_fail@plt+0x1c48>
   12a98:	ldr	r3, [pc, #100]	; 12b04 <__assert_fail@plt+0x1c5c>
   12a9c:	b	12af0 <__assert_fail@plt+0x1c48>
   12aa0:	ldr	r1, [pc, #96]	; 12b08 <__assert_fail@plt+0x1c60>
   12aa4:	ldr	r0, [fp, #-12]
   12aa8:	bl	16df4 <__assert_fail@plt+0x5f4c>
   12aac:	mov	r3, r0
   12ab0:	cmp	r3, #0
   12ab4:	bne	12ad8 <__assert_fail@plt+0x1c30>
   12ab8:	ldr	r3, [fp, #-16]
   12abc:	ldrb	r3, [r3]
   12ac0:	cmp	r3, #96	; 0x60
   12ac4:	bne	12ad0 <__assert_fail@plt+0x1c28>
   12ac8:	ldr	r3, [pc, #60]	; 12b0c <__assert_fail@plt+0x1c64>
   12acc:	b	12af0 <__assert_fail@plt+0x1c48>
   12ad0:	ldr	r3, [pc, #56]	; 12b10 <__assert_fail@plt+0x1c68>
   12ad4:	b	12af0 <__assert_fail@plt+0x1c48>
   12ad8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12adc:	cmp	r3, #9
   12ae0:	bne	12aec <__assert_fail@plt+0x1c44>
   12ae4:	ldr	r3, [pc, #40]	; 12b14 <__assert_fail@plt+0x1c6c>
   12ae8:	b	12af0 <__assert_fail@plt+0x1c48>
   12aec:	ldr	r3, [pc, #36]	; 12b18 <__assert_fail@plt+0x1c70>
   12af0:	mov	r0, r3
   12af4:	sub	sp, fp, #4
   12af8:	pop	{fp, pc}
   12afc:	andeq	r8, r1, r4, asr #27
   12b00:	andeq	r8, r1, ip, asr #27
   12b04:	ldrdeq	r8, [r1], -r0
   12b08:	ldrdeq	r8, [r1], -r4
   12b0c:	ldrdeq	r8, [r1], -ip
   12b10:	andeq	r8, r1, r0, ror #27
   12b14:	andeq	r8, r1, r4, ror #27
   12b18:	andeq	r8, r1, r8, ror #27
   12b1c:	push	{r4, fp, lr}
   12b20:	add	fp, sp, #8
   12b24:	sub	sp, sp, #116	; 0x74
   12b28:	str	r0, [fp, #-88]	; 0xffffffa8
   12b2c:	str	r1, [fp, #-92]	; 0xffffffa4
   12b30:	str	r2, [fp, #-96]	; 0xffffffa0
   12b34:	str	r3, [fp, #-100]	; 0xffffff9c
   12b38:	mov	r3, #0
   12b3c:	str	r3, [fp, #-20]	; 0xffffffec
   12b40:	mov	r3, #0
   12b44:	str	r3, [fp, #-24]	; 0xffffffe8
   12b48:	mov	r3, #0
   12b4c:	str	r3, [fp, #-28]	; 0xffffffe4
   12b50:	mov	r3, #0
   12b54:	str	r3, [fp, #-32]	; 0xffffffe0
   12b58:	mov	r3, #0
   12b5c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12b60:	bl	10d28 <__ctype_get_mb_cur_max@plt>
   12b64:	mov	r3, r0
   12b68:	cmp	r3, #1
   12b6c:	moveq	r3, #1
   12b70:	movne	r3, #0
   12b74:	strb	r3, [fp, #-57]	; 0xffffffc7
   12b78:	ldr	r3, [fp, #8]
   12b7c:	and	r3, r3, #2
   12b80:	cmp	r3, #0
   12b84:	movne	r3, #1
   12b88:	moveq	r3, #0
   12b8c:	strb	r3, [fp, #-34]	; 0xffffffde
   12b90:	mov	r3, #0
   12b94:	strb	r3, [fp, #-35]	; 0xffffffdd
   12b98:	mov	r3, #0
   12b9c:	strb	r3, [fp, #-36]	; 0xffffffdc
   12ba0:	mov	r3, #1
   12ba4:	strb	r3, [fp, #-37]	; 0xffffffdb
   12ba8:	ldr	r3, [fp, #4]
   12bac:	cmp	r3, #10
   12bb0:	ldrls	pc, [pc, r3, lsl #2]
   12bb4:	b	12dbc <__assert_fail@plt+0x1f14>
   12bb8:			; <UNDEFINED> instruction: 0x00012db0
   12bbc:	andeq	r2, r1, ip, lsr #26
   12bc0:	andeq	r2, r1, r0, asr sp
   12bc4:	andeq	r2, r1, r4, lsr #26
   12bc8:	andeq	r2, r1, r4, lsr sp
   12bcc:	strdeq	r2, [r1], -r4
   12bd0:	andeq	r2, r1, r4, ror #23
   12bd4:	andeq	r2, r1, r4, asr ip
   12bd8:	andeq	r2, r1, r8, ror #24
   12bdc:	andeq	r2, r1, r8, ror #24
   12be0:	andeq	r2, r1, r8, ror #24
   12be4:	mov	r3, #5
   12be8:	str	r3, [fp, #4]
   12bec:	mov	r3, #1
   12bf0:	strb	r3, [fp, #-34]	; 0xffffffde
   12bf4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12bf8:	eor	r3, r3, #1
   12bfc:	uxtb	r3, r3
   12c00:	cmp	r3, #0
   12c04:	beq	12c38 <__assert_fail@plt+0x1d90>
   12c08:	ldr	r2, [fp, #-20]	; 0xffffffec
   12c0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12c10:	cmp	r2, r3
   12c14:	bcs	12c2c <__assert_fail@plt+0x1d84>
   12c18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12c1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c20:	add	r3, r2, r3
   12c24:	mov	r2, #34	; 0x22
   12c28:	strb	r2, [r3]
   12c2c:	ldr	r3, [fp, #-20]	; 0xffffffec
   12c30:	add	r3, r3, #1
   12c34:	str	r3, [fp, #-20]	; 0xffffffec
   12c38:	mov	r3, #1
   12c3c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12c40:	ldr	r3, [pc, #3872]	; 13b68 <__assert_fail@plt+0x2cc0>
   12c44:	str	r3, [fp, #-28]	; 0xffffffe4
   12c48:	mov	r3, #1
   12c4c:	str	r3, [fp, #-32]	; 0xffffffe0
   12c50:	b	12dc0 <__assert_fail@plt+0x1f18>
   12c54:	mov	r3, #1
   12c58:	strb	r3, [fp, #-33]	; 0xffffffdf
   12c5c:	mov	r3, #0
   12c60:	strb	r3, [fp, #-34]	; 0xffffffde
   12c64:	b	12dc0 <__assert_fail@plt+0x1f18>
   12c68:	ldr	r3, [fp, #4]
   12c6c:	cmp	r3, #10
   12c70:	beq	12c94 <__assert_fail@plt+0x1dec>
   12c74:	ldr	r1, [fp, #4]
   12c78:	ldr	r0, [pc, #3820]	; 13b6c <__assert_fail@plt+0x2cc4>
   12c7c:	bl	12a28 <__assert_fail@plt+0x1b80>
   12c80:	str	r0, [fp, #16]
   12c84:	ldr	r1, [fp, #4]
   12c88:	ldr	r0, [pc, #3808]	; 13b70 <__assert_fail@plt+0x2cc8>
   12c8c:	bl	12a28 <__assert_fail@plt+0x1b80>
   12c90:	str	r0, [fp, #20]
   12c94:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12c98:	eor	r3, r3, #1
   12c9c:	uxtb	r3, r3
   12ca0:	cmp	r3, #0
   12ca4:	beq	12d04 <__assert_fail@plt+0x1e5c>
   12ca8:	ldr	r3, [fp, #16]
   12cac:	str	r3, [fp, #-28]	; 0xffffffe4
   12cb0:	b	12cf4 <__assert_fail@plt+0x1e4c>
   12cb4:	ldr	r2, [fp, #-20]	; 0xffffffec
   12cb8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12cbc:	cmp	r2, r3
   12cc0:	bcs	12cdc <__assert_fail@plt+0x1e34>
   12cc4:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12cc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ccc:	add	r3, r2, r3
   12cd0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   12cd4:	ldrb	r2, [r2]
   12cd8:	strb	r2, [r3]
   12cdc:	ldr	r3, [fp, #-20]	; 0xffffffec
   12ce0:	add	r3, r3, #1
   12ce4:	str	r3, [fp, #-20]	; 0xffffffec
   12ce8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12cec:	add	r3, r3, #1
   12cf0:	str	r3, [fp, #-28]	; 0xffffffe4
   12cf4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   12cf8:	ldrb	r3, [r3]
   12cfc:	cmp	r3, #0
   12d00:	bne	12cb4 <__assert_fail@plt+0x1e0c>
   12d04:	mov	r3, #1
   12d08:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d0c:	ldr	r3, [fp, #20]
   12d10:	str	r3, [fp, #-28]	; 0xffffffe4
   12d14:	ldr	r0, [fp, #-28]	; 0xffffffe4
   12d18:	bl	10dd0 <strlen@plt>
   12d1c:	str	r0, [fp, #-32]	; 0xffffffe0
   12d20:	b	12dc0 <__assert_fail@plt+0x1f18>
   12d24:	mov	r3, #1
   12d28:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d2c:	mov	r3, #1
   12d30:	strb	r3, [fp, #-34]	; 0xffffffde
   12d34:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d38:	eor	r3, r3, #1
   12d3c:	uxtb	r3, r3
   12d40:	cmp	r3, #0
   12d44:	beq	12d50 <__assert_fail@plt+0x1ea8>
   12d48:	mov	r3, #1
   12d4c:	strb	r3, [fp, #-33]	; 0xffffffdf
   12d50:	mov	r3, #2
   12d54:	str	r3, [fp, #4]
   12d58:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12d5c:	eor	r3, r3, #1
   12d60:	uxtb	r3, r3
   12d64:	cmp	r3, #0
   12d68:	beq	12d9c <__assert_fail@plt+0x1ef4>
   12d6c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12d70:	ldr	r3, [fp, #-92]	; 0xffffffa4
   12d74:	cmp	r2, r3
   12d78:	bcs	12d90 <__assert_fail@plt+0x1ee8>
   12d7c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d80:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d84:	add	r3, r2, r3
   12d88:	mov	r2, #39	; 0x27
   12d8c:	strb	r2, [r3]
   12d90:	ldr	r3, [fp, #-20]	; 0xffffffec
   12d94:	add	r3, r3, #1
   12d98:	str	r3, [fp, #-20]	; 0xffffffec
   12d9c:	ldr	r3, [pc, #3532]	; 13b70 <__assert_fail@plt+0x2cc8>
   12da0:	str	r3, [fp, #-28]	; 0xffffffe4
   12da4:	mov	r3, #1
   12da8:	str	r3, [fp, #-32]	; 0xffffffe0
   12dac:	b	12dc0 <__assert_fail@plt+0x1f18>
   12db0:	mov	r3, #0
   12db4:	strb	r3, [fp, #-34]	; 0xffffffde
   12db8:	b	12dc0 <__assert_fail@plt+0x1f18>
   12dbc:	bl	10e90 <abort@plt>
   12dc0:	mov	r3, #0
   12dc4:	str	r3, [fp, #-16]
   12dc8:	b	13f58 <__assert_fail@plt+0x30b0>
   12dcc:	mov	r3, #0
   12dd0:	strb	r3, [fp, #-40]	; 0xffffffd8
   12dd4:	mov	r3, #0
   12dd8:	strb	r3, [fp, #-41]	; 0xffffffd7
   12ddc:	mov	r3, #0
   12de0:	strb	r3, [fp, #-42]	; 0xffffffd6
   12de4:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   12de8:	cmp	r3, #0
   12dec:	beq	12e88 <__assert_fail@plt+0x1fe0>
   12df0:	ldr	r3, [fp, #4]
   12df4:	cmp	r3, #2
   12df8:	beq	12e88 <__assert_fail@plt+0x1fe0>
   12dfc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e00:	cmp	r3, #0
   12e04:	beq	12e88 <__assert_fail@plt+0x1fe0>
   12e08:	ldr	r2, [fp, #-16]
   12e0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e10:	add	r4, r2, r3
   12e14:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12e18:	cmn	r3, #1
   12e1c:	bne	12e40 <__assert_fail@plt+0x1f98>
   12e20:	ldr	r3, [fp, #-32]	; 0xffffffe0
   12e24:	cmp	r3, #1
   12e28:	bls	12e40 <__assert_fail@plt+0x1f98>
   12e2c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   12e30:	bl	10dd0 <strlen@plt>
   12e34:	str	r0, [fp, #-100]	; 0xffffff9c
   12e38:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12e3c:	b	12e44 <__assert_fail@plt+0x1f9c>
   12e40:	ldr	r3, [fp, #-100]	; 0xffffff9c
   12e44:	cmp	r4, r3
   12e48:	bhi	12e88 <__assert_fail@plt+0x1fe0>
   12e4c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12e50:	ldr	r3, [fp, #-16]
   12e54:	add	r3, r2, r3
   12e58:	ldr	r2, [fp, #-32]	; 0xffffffe0
   12e5c:	ldr	r1, [fp, #-28]	; 0xffffffe4
   12e60:	mov	r0, r3
   12e64:	bl	10cc8 <memcmp@plt>
   12e68:	mov	r3, r0
   12e6c:	cmp	r3, #0
   12e70:	bne	12e88 <__assert_fail@plt+0x1fe0>
   12e74:	ldrb	r3, [fp, #-34]	; 0xffffffde
   12e78:	cmp	r3, #0
   12e7c:	bne	14114 <__assert_fail@plt+0x326c>
   12e80:	mov	r3, #1
   12e84:	strb	r3, [fp, #-40]	; 0xffffffd8
   12e88:	ldr	r2, [fp, #-96]	; 0xffffffa0
   12e8c:	ldr	r3, [fp, #-16]
   12e90:	add	r3, r2, r3
   12e94:	ldrb	r3, [r3]
   12e98:	strb	r3, [fp, #-38]	; 0xffffffda
   12e9c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   12ea0:	cmp	r3, #126	; 0x7e
   12ea4:	ldrls	pc, [pc, r3, lsl #2]
   12ea8:	b	136d4 <__assert_fail@plt+0x282c>
   12eac:	andeq	r3, r1, r8, lsr #1
   12eb0:	ldrdeq	r3, [r1], -r4
   12eb4:	ldrdeq	r3, [r1], -r4
   12eb8:	ldrdeq	r3, [r1], -r4
   12ebc:	ldrdeq	r3, [r1], -r4
   12ec0:	ldrdeq	r3, [r1], -r4
   12ec4:	ldrdeq	r3, [r1], -r4
   12ec8:	muleq	r1, r8, r4
   12ecc:	andeq	r3, r1, r4, lsr #9
   12ed0:	ldrdeq	r3, [r1], -r4
   12ed4:			; <UNDEFINED> instruction: 0x000134bc
   12ed8:	andeq	r3, r1, r0, ror #9
   12edc:			; <UNDEFINED> instruction: 0x000134b0
   12ee0:	andeq	r3, r1, r8, asr #9
   12ee4:	ldrdeq	r3, [r1], -r4
   12ee8:	ldrdeq	r3, [r1], -r4
   12eec:	ldrdeq	r3, [r1], -r4
   12ef0:	ldrdeq	r3, [r1], -r4
   12ef4:	ldrdeq	r3, [r1], -r4
   12ef8:	ldrdeq	r3, [r1], -r4
   12efc:	ldrdeq	r3, [r1], -r4
   12f00:	ldrdeq	r3, [r1], -r4
   12f04:	ldrdeq	r3, [r1], -r4
   12f08:	ldrdeq	r3, [r1], -r4
   12f0c:	ldrdeq	r3, [r1], -r4
   12f10:	ldrdeq	r3, [r1], -r4
   12f14:	ldrdeq	r3, [r1], -r4
   12f18:	ldrdeq	r3, [r1], -r4
   12f1c:	ldrdeq	r3, [r1], -r4
   12f20:	ldrdeq	r3, [r1], -r4
   12f24:	ldrdeq	r3, [r1], -r4
   12f28:	ldrdeq	r3, [r1], -r4
   12f2c:			; <UNDEFINED> instruction: 0x000135b8
   12f30:	andeq	r3, r1, r0, asr #11
   12f34:	andeq	r3, r1, r0, asr #11
   12f38:	andeq	r3, r1, ip, lsr #11
   12f3c:	andeq	r3, r1, r0, asr #11
   12f40:	andeq	r3, r1, r8, asr #13
   12f44:	andeq	r3, r1, r0, asr #11
   12f48:	ldrdeq	r3, [r1], -ip
   12f4c:	andeq	r3, r1, r0, asr #11
   12f50:	andeq	r3, r1, r0, asr #11
   12f54:	andeq	r3, r1, r0, asr #11
   12f58:	andeq	r3, r1, r8, asr #13
   12f5c:	andeq	r3, r1, r8, asr #13
   12f60:	andeq	r3, r1, r8, asr #13
   12f64:	andeq	r3, r1, r8, asr #13
   12f68:	andeq	r3, r1, r8, asr #13
   12f6c:	andeq	r3, r1, r8, asr #13
   12f70:	andeq	r3, r1, r8, asr #13
   12f74:	andeq	r3, r1, r8, asr #13
   12f78:	andeq	r3, r1, r8, asr #13
   12f7c:	andeq	r3, r1, r8, asr #13
   12f80:	andeq	r3, r1, r8, asr #13
   12f84:	andeq	r3, r1, r8, asr #13
   12f88:	andeq	r3, r1, r8, asr #13
   12f8c:	andeq	r3, r1, r8, asr #13
   12f90:	andeq	r3, r1, r8, asr #13
   12f94:	andeq	r3, r1, r8, asr #13
   12f98:	andeq	r3, r1, r0, asr #11
   12f9c:	andeq	r3, r1, r0, asr #11
   12fa0:	andeq	r3, r1, r0, asr #11
   12fa4:	andeq	r3, r1, r0, asr #11
   12fa8:	andeq	r3, r1, r8, lsl #5
   12fac:	ldrdeq	r3, [r1], -r4
   12fb0:	andeq	r3, r1, r8, asr #13
   12fb4:	andeq	r3, r1, r8, asr #13
   12fb8:	andeq	r3, r1, r8, asr #13
   12fbc:	andeq	r3, r1, r8, asr #13
   12fc0:	andeq	r3, r1, r8, asr #13
   12fc4:	andeq	r3, r1, r8, asr #13
   12fc8:	andeq	r3, r1, r8, asr #13
   12fcc:	andeq	r3, r1, r8, asr #13
   12fd0:	andeq	r3, r1, r8, asr #13
   12fd4:	andeq	r3, r1, r8, asr #13
   12fd8:	andeq	r3, r1, r8, asr #13
   12fdc:	andeq	r3, r1, r8, asr #13
   12fe0:	andeq	r3, r1, r8, asr #13
   12fe4:	andeq	r3, r1, r8, asr #13
   12fe8:	andeq	r3, r1, r8, asr #13
   12fec:	andeq	r3, r1, r8, asr #13
   12ff0:	andeq	r3, r1, r8, asr #13
   12ff4:	andeq	r3, r1, r8, asr #13
   12ff8:	andeq	r3, r1, r8, asr #13
   12ffc:	andeq	r3, r1, r8, asr #13
   13000:	andeq	r3, r1, r8, asr #13
   13004:	andeq	r3, r1, r8, asr #13
   13008:	andeq	r3, r1, r8, asr #13
   1300c:	andeq	r3, r1, r8, asr #13
   13010:	andeq	r3, r1, r8, asr #13
   13014:	andeq	r3, r1, r8, asr #13
   13018:	andeq	r3, r1, r0, asr #11
   1301c:	andeq	r3, r1, ip, ror #9
   13020:	andeq	r3, r1, r8, asr #13
   13024:	andeq	r3, r1, r0, asr #11
   13028:	andeq	r3, r1, r8, asr #13
   1302c:	andeq	r3, r1, r0, asr #11
   13030:	andeq	r3, r1, r8, asr #13
   13034:	andeq	r3, r1, r8, asr #13
   13038:	andeq	r3, r1, r8, asr #13
   1303c:	andeq	r3, r1, r8, asr #13
   13040:	andeq	r3, r1, r8, asr #13
   13044:	andeq	r3, r1, r8, asr #13
   13048:	andeq	r3, r1, r8, asr #13
   1304c:	andeq	r3, r1, r8, asr #13
   13050:	andeq	r3, r1, r8, asr #13
   13054:	andeq	r3, r1, r8, asr #13
   13058:	andeq	r3, r1, r8, asr #13
   1305c:	andeq	r3, r1, r8, asr #13
   13060:	andeq	r3, r1, r8, asr #13
   13064:	andeq	r3, r1, r8, asr #13
   13068:	andeq	r3, r1, r8, asr #13
   1306c:	andeq	r3, r1, r8, asr #13
   13070:	andeq	r3, r1, r8, asr #13
   13074:	andeq	r3, r1, r8, asr #13
   13078:	andeq	r3, r1, r8, asr #13
   1307c:	andeq	r3, r1, r8, asr #13
   13080:	andeq	r3, r1, r8, asr #13
   13084:	andeq	r3, r1, r8, asr #13
   13088:	andeq	r3, r1, r8, asr #13
   1308c:	andeq	r3, r1, r8, asr #13
   13090:	andeq	r3, r1, r8, asr #13
   13094:	andeq	r3, r1, r8, asr #13
   13098:	andeq	r3, r1, r4, ror #10
   1309c:	andeq	r3, r1, r0, asr #11
   130a0:	andeq	r3, r1, r4, ror #10
   130a4:	andeq	r3, r1, ip, lsr #11
   130a8:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   130ac:	cmp	r3, #0
   130b0:	beq	13274 <__assert_fail@plt+0x23cc>
   130b4:	ldrb	r3, [fp, #-34]	; 0xffffffde
   130b8:	cmp	r3, #0
   130bc:	bne	1411c <__assert_fail@plt+0x3274>
   130c0:	mov	r3, #1
   130c4:	strb	r3, [fp, #-41]	; 0xffffffd7
   130c8:	ldr	r3, [fp, #4]
   130cc:	cmp	r3, #2
   130d0:	bne	13180 <__assert_fail@plt+0x22d8>
   130d4:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   130d8:	eor	r3, r3, #1
   130dc:	uxtb	r3, r3
   130e0:	cmp	r3, #0
   130e4:	beq	13180 <__assert_fail@plt+0x22d8>
   130e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   130ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   130f0:	cmp	r2, r3
   130f4:	bcs	1310c <__assert_fail@plt+0x2264>
   130f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   130fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13100:	add	r3, r2, r3
   13104:	mov	r2, #39	; 0x27
   13108:	strb	r2, [r3]
   1310c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13110:	add	r3, r3, #1
   13114:	str	r3, [fp, #-20]	; 0xffffffec
   13118:	ldr	r2, [fp, #-20]	; 0xffffffec
   1311c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13120:	cmp	r2, r3
   13124:	bcs	1313c <__assert_fail@plt+0x2294>
   13128:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1312c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13130:	add	r3, r2, r3
   13134:	mov	r2, #36	; 0x24
   13138:	strb	r2, [r3]
   1313c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13140:	add	r3, r3, #1
   13144:	str	r3, [fp, #-20]	; 0xffffffec
   13148:	ldr	r2, [fp, #-20]	; 0xffffffec
   1314c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13150:	cmp	r2, r3
   13154:	bcs	1316c <__assert_fail@plt+0x22c4>
   13158:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1315c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13160:	add	r3, r2, r3
   13164:	mov	r2, #39	; 0x27
   13168:	strb	r2, [r3]
   1316c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13170:	add	r3, r3, #1
   13174:	str	r3, [fp, #-20]	; 0xffffffec
   13178:	mov	r3, #1
   1317c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13180:	ldr	r2, [fp, #-20]	; 0xffffffec
   13184:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13188:	cmp	r2, r3
   1318c:	bcs	131a4 <__assert_fail@plt+0x22fc>
   13190:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13194:	ldr	r3, [fp, #-20]	; 0xffffffec
   13198:	add	r3, r2, r3
   1319c:	mov	r2, #92	; 0x5c
   131a0:	strb	r2, [r3]
   131a4:	ldr	r3, [fp, #-20]	; 0xffffffec
   131a8:	add	r3, r3, #1
   131ac:	str	r3, [fp, #-20]	; 0xffffffec
   131b0:	ldr	r3, [fp, #4]
   131b4:	cmp	r3, #2
   131b8:	beq	13268 <__assert_fail@plt+0x23c0>
   131bc:	ldr	r3, [fp, #-16]
   131c0:	add	r2, r3, #1
   131c4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   131c8:	cmp	r2, r3
   131cc:	bcs	13268 <__assert_fail@plt+0x23c0>
   131d0:	ldr	r3, [fp, #-16]
   131d4:	add	r3, r3, #1
   131d8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   131dc:	add	r3, r2, r3
   131e0:	ldrb	r3, [r3]
   131e4:	cmp	r3, #47	; 0x2f
   131e8:	bls	13268 <__assert_fail@plt+0x23c0>
   131ec:	ldr	r3, [fp, #-16]
   131f0:	add	r3, r3, #1
   131f4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   131f8:	add	r3, r2, r3
   131fc:	ldrb	r3, [r3]
   13200:	cmp	r3, #57	; 0x39
   13204:	bhi	13268 <__assert_fail@plt+0x23c0>
   13208:	ldr	r2, [fp, #-20]	; 0xffffffec
   1320c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13210:	cmp	r2, r3
   13214:	bcs	1322c <__assert_fail@plt+0x2384>
   13218:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1321c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13220:	add	r3, r2, r3
   13224:	mov	r2, #48	; 0x30
   13228:	strb	r2, [r3]
   1322c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13230:	add	r3, r3, #1
   13234:	str	r3, [fp, #-20]	; 0xffffffec
   13238:	ldr	r2, [fp, #-20]	; 0xffffffec
   1323c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13240:	cmp	r2, r3
   13244:	bcs	1325c <__assert_fail@plt+0x23b4>
   13248:	ldr	r2, [fp, #-88]	; 0xffffffa8
   1324c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13250:	add	r3, r2, r3
   13254:	mov	r2, #48	; 0x30
   13258:	strb	r2, [r3]
   1325c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13260:	add	r3, r3, #1
   13264:	str	r3, [fp, #-20]	; 0xffffffec
   13268:	mov	r3, #48	; 0x30
   1326c:	strb	r3, [fp, #-38]	; 0xffffffda
   13270:	b	13cb0 <__assert_fail@plt+0x2e08>
   13274:	ldr	r3, [fp, #8]
   13278:	and	r3, r3, #1
   1327c:	cmp	r3, #0
   13280:	beq	13cb0 <__assert_fail@plt+0x2e08>
   13284:	b	13f4c <__assert_fail@plt+0x30a4>
   13288:	ldr	r3, [fp, #4]
   1328c:	cmp	r3, #2
   13290:	beq	132a0 <__assert_fail@plt+0x23f8>
   13294:	cmp	r3, #5
   13298:	beq	132b0 <__assert_fail@plt+0x2408>
   1329c:	b	13494 <__assert_fail@plt+0x25ec>
   132a0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   132a4:	cmp	r3, #0
   132a8:	beq	13488 <__assert_fail@plt+0x25e0>
   132ac:	b	14158 <__assert_fail@plt+0x32b0>
   132b0:	ldr	r3, [fp, #8]
   132b4:	and	r3, r3, #4
   132b8:	cmp	r3, #0
   132bc:	beq	13490 <__assert_fail@plt+0x25e8>
   132c0:	ldr	r3, [fp, #-16]
   132c4:	add	r2, r3, #2
   132c8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   132cc:	cmp	r2, r3
   132d0:	bcs	13490 <__assert_fail@plt+0x25e8>
   132d4:	ldr	r3, [fp, #-16]
   132d8:	add	r3, r3, #1
   132dc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   132e0:	add	r3, r2, r3
   132e4:	ldrb	r3, [r3]
   132e8:	cmp	r3, #63	; 0x3f
   132ec:	bne	13490 <__assert_fail@plt+0x25e8>
   132f0:	ldr	r3, [fp, #-16]
   132f4:	add	r3, r3, #2
   132f8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   132fc:	add	r3, r2, r3
   13300:	ldrb	r3, [r3]
   13304:	sub	r3, r3, #33	; 0x21
   13308:	cmp	r3, #29
   1330c:	ldrls	pc, [pc, r3, lsl #2]
   13310:	b	13480 <__assert_fail@plt+0x25d8>
   13314:	andeq	r3, r1, ip, lsl #7
   13318:	andeq	r3, r1, r0, lsl #9
   1331c:	andeq	r3, r1, r0, lsl #9
   13320:	andeq	r3, r1, r0, lsl #9
   13324:	andeq	r3, r1, r0, lsl #9
   13328:	andeq	r3, r1, r0, lsl #9
   1332c:	andeq	r3, r1, ip, lsl #7
   13330:	andeq	r3, r1, ip, lsl #7
   13334:	andeq	r3, r1, ip, lsl #7
   13338:	andeq	r3, r1, r0, lsl #9
   1333c:	andeq	r3, r1, r0, lsl #9
   13340:	andeq	r3, r1, r0, lsl #9
   13344:	andeq	r3, r1, ip, lsl #7
   13348:	andeq	r3, r1, r0, lsl #9
   1334c:	andeq	r3, r1, ip, lsl #7
   13350:	andeq	r3, r1, r0, lsl #9
   13354:	andeq	r3, r1, r0, lsl #9
   13358:	andeq	r3, r1, r0, lsl #9
   1335c:	andeq	r3, r1, r0, lsl #9
   13360:	andeq	r3, r1, r0, lsl #9
   13364:	andeq	r3, r1, r0, lsl #9
   13368:	andeq	r3, r1, r0, lsl #9
   1336c:	andeq	r3, r1, r0, lsl #9
   13370:	andeq	r3, r1, r0, lsl #9
   13374:	andeq	r3, r1, r0, lsl #9
   13378:	andeq	r3, r1, r0, lsl #9
   1337c:	andeq	r3, r1, r0, lsl #9
   13380:	andeq	r3, r1, ip, lsl #7
   13384:	andeq	r3, r1, ip, lsl #7
   13388:	andeq	r3, r1, ip, lsl #7
   1338c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13390:	cmp	r3, #0
   13394:	bne	14124 <__assert_fail@plt+0x327c>
   13398:	ldr	r3, [fp, #-16]
   1339c:	add	r3, r3, #2
   133a0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   133a4:	add	r3, r2, r3
   133a8:	ldrb	r3, [r3]
   133ac:	strb	r3, [fp, #-38]	; 0xffffffda
   133b0:	ldr	r3, [fp, #-16]
   133b4:	add	r3, r3, #2
   133b8:	str	r3, [fp, #-16]
   133bc:	ldr	r2, [fp, #-20]	; 0xffffffec
   133c0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133c4:	cmp	r2, r3
   133c8:	bcs	133e0 <__assert_fail@plt+0x2538>
   133cc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   133d0:	ldr	r3, [fp, #-20]	; 0xffffffec
   133d4:	add	r3, r2, r3
   133d8:	mov	r2, #63	; 0x3f
   133dc:	strb	r2, [r3]
   133e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   133e4:	add	r3, r3, #1
   133e8:	str	r3, [fp, #-20]	; 0xffffffec
   133ec:	ldr	r2, [fp, #-20]	; 0xffffffec
   133f0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   133f4:	cmp	r2, r3
   133f8:	bcs	13410 <__assert_fail@plt+0x2568>
   133fc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13400:	ldr	r3, [fp, #-20]	; 0xffffffec
   13404:	add	r3, r2, r3
   13408:	mov	r2, #34	; 0x22
   1340c:	strb	r2, [r3]
   13410:	ldr	r3, [fp, #-20]	; 0xffffffec
   13414:	add	r3, r3, #1
   13418:	str	r3, [fp, #-20]	; 0xffffffec
   1341c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13420:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13424:	cmp	r2, r3
   13428:	bcs	13440 <__assert_fail@plt+0x2598>
   1342c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13430:	ldr	r3, [fp, #-20]	; 0xffffffec
   13434:	add	r3, r2, r3
   13438:	mov	r2, #34	; 0x22
   1343c:	strb	r2, [r3]
   13440:	ldr	r3, [fp, #-20]	; 0xffffffec
   13444:	add	r3, r3, #1
   13448:	str	r3, [fp, #-20]	; 0xffffffec
   1344c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13450:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13454:	cmp	r2, r3
   13458:	bcs	13470 <__assert_fail@plt+0x25c8>
   1345c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13460:	ldr	r3, [fp, #-20]	; 0xffffffec
   13464:	add	r3, r2, r3
   13468:	mov	r2, #63	; 0x3f
   1346c:	strb	r2, [r3]
   13470:	ldr	r3, [fp, #-20]	; 0xffffffec
   13474:	add	r3, r3, #1
   13478:	str	r3, [fp, #-20]	; 0xffffffec
   1347c:	b	13484 <__assert_fail@plt+0x25dc>
   13480:	nop			; (mov r0, r0)
   13484:	b	13490 <__assert_fail@plt+0x25e8>
   13488:	nop			; (mov r0, r0)
   1348c:	b	13cdc <__assert_fail@plt+0x2e34>
   13490:	nop			; (mov r0, r0)
   13494:	b	13cdc <__assert_fail@plt+0x2e34>
   13498:	mov	r3, #97	; 0x61
   1349c:	strb	r3, [fp, #-39]	; 0xffffffd9
   134a0:	b	1354c <__assert_fail@plt+0x26a4>
   134a4:	mov	r3, #98	; 0x62
   134a8:	strb	r3, [fp, #-39]	; 0xffffffd9
   134ac:	b	1354c <__assert_fail@plt+0x26a4>
   134b0:	mov	r3, #102	; 0x66
   134b4:	strb	r3, [fp, #-39]	; 0xffffffd9
   134b8:	b	1354c <__assert_fail@plt+0x26a4>
   134bc:	mov	r3, #110	; 0x6e
   134c0:	strb	r3, [fp, #-39]	; 0xffffffd9
   134c4:	b	13534 <__assert_fail@plt+0x268c>
   134c8:	mov	r3, #114	; 0x72
   134cc:	strb	r3, [fp, #-39]	; 0xffffffd9
   134d0:	b	13534 <__assert_fail@plt+0x268c>
   134d4:	mov	r3, #116	; 0x74
   134d8:	strb	r3, [fp, #-39]	; 0xffffffd9
   134dc:	b	13534 <__assert_fail@plt+0x268c>
   134e0:	mov	r3, #118	; 0x76
   134e4:	strb	r3, [fp, #-39]	; 0xffffffd9
   134e8:	b	1354c <__assert_fail@plt+0x26a4>
   134ec:	ldrb	r3, [fp, #-38]	; 0xffffffda
   134f0:	strb	r3, [fp, #-39]	; 0xffffffd9
   134f4:	ldr	r3, [fp, #4]
   134f8:	cmp	r3, #2
   134fc:	bne	13510 <__assert_fail@plt+0x2668>
   13500:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13504:	cmp	r3, #0
   13508:	beq	13e64 <__assert_fail@plt+0x2fbc>
   1350c:	b	14158 <__assert_fail@plt+0x32b0>
   13510:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13514:	cmp	r3, #0
   13518:	beq	13534 <__assert_fail@plt+0x268c>
   1351c:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13520:	cmp	r3, #0
   13524:	beq	13534 <__assert_fail@plt+0x268c>
   13528:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1352c:	cmp	r3, #0
   13530:	bne	13e6c <__assert_fail@plt+0x2fc4>
   13534:	ldr	r3, [fp, #4]
   13538:	cmp	r3, #2
   1353c:	bne	1354c <__assert_fail@plt+0x26a4>
   13540:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13544:	cmp	r3, #0
   13548:	bne	1412c <__assert_fail@plt+0x3284>
   1354c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13550:	cmp	r3, #0
   13554:	beq	13cb8 <__assert_fail@plt+0x2e10>
   13558:	ldrb	r3, [fp, #-39]	; 0xffffffd9
   1355c:	strb	r3, [fp, #-38]	; 0xffffffda
   13560:	b	13d64 <__assert_fail@plt+0x2ebc>
   13564:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13568:	cmn	r3, #1
   1356c:	bne	13590 <__assert_fail@plt+0x26e8>
   13570:	ldr	r3, [fp, #-96]	; 0xffffffa0
   13574:	add	r3, r3, #1
   13578:	ldrb	r3, [r3]
   1357c:	cmp	r3, #0
   13580:	movne	r3, #1
   13584:	moveq	r3, #0
   13588:	uxtb	r3, r3
   1358c:	b	135a4 <__assert_fail@plt+0x26fc>
   13590:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13594:	cmp	r3, #1
   13598:	movne	r3, #1
   1359c:	moveq	r3, #0
   135a0:	uxtb	r3, r3
   135a4:	cmp	r3, #0
   135a8:	bne	13cc0 <__assert_fail@plt+0x2e18>
   135ac:	ldr	r3, [fp, #-16]
   135b0:	cmp	r3, #0
   135b4:	bne	13cc8 <__assert_fail@plt+0x2e20>
   135b8:	mov	r3, #1
   135bc:	strb	r3, [fp, #-42]	; 0xffffffd6
   135c0:	ldr	r3, [fp, #4]
   135c4:	cmp	r3, #2
   135c8:	bne	13cd0 <__assert_fail@plt+0x2e28>
   135cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135d0:	cmp	r3, #0
   135d4:	beq	13cd0 <__assert_fail@plt+0x2e28>
   135d8:	b	14158 <__assert_fail@plt+0x32b0>
   135dc:	mov	r3, #1
   135e0:	strb	r3, [fp, #-36]	; 0xffffffdc
   135e4:	mov	r3, #1
   135e8:	strb	r3, [fp, #-42]	; 0xffffffd6
   135ec:	ldr	r3, [fp, #4]
   135f0:	cmp	r3, #2
   135f4:	bne	13cd8 <__assert_fail@plt+0x2e30>
   135f8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   135fc:	cmp	r3, #0
   13600:	bne	14134 <__assert_fail@plt+0x328c>
   13604:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13608:	cmp	r3, #0
   1360c:	beq	1362c <__assert_fail@plt+0x2784>
   13610:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13614:	cmp	r3, #0
   13618:	bne	1362c <__assert_fail@plt+0x2784>
   1361c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13620:	str	r3, [fp, #-24]	; 0xffffffe8
   13624:	mov	r3, #0
   13628:	str	r3, [fp, #-92]	; 0xffffffa4
   1362c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13630:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13634:	cmp	r2, r3
   13638:	bcs	13650 <__assert_fail@plt+0x27a8>
   1363c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13640:	ldr	r3, [fp, #-20]	; 0xffffffec
   13644:	add	r3, r2, r3
   13648:	mov	r2, #39	; 0x27
   1364c:	strb	r2, [r3]
   13650:	ldr	r3, [fp, #-20]	; 0xffffffec
   13654:	add	r3, r3, #1
   13658:	str	r3, [fp, #-20]	; 0xffffffec
   1365c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13660:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13664:	cmp	r2, r3
   13668:	bcs	13680 <__assert_fail@plt+0x27d8>
   1366c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13670:	ldr	r3, [fp, #-20]	; 0xffffffec
   13674:	add	r3, r2, r3
   13678:	mov	r2, #92	; 0x5c
   1367c:	strb	r2, [r3]
   13680:	ldr	r3, [fp, #-20]	; 0xffffffec
   13684:	add	r3, r3, #1
   13688:	str	r3, [fp, #-20]	; 0xffffffec
   1368c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13690:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13694:	cmp	r2, r3
   13698:	bcs	136b0 <__assert_fail@plt+0x2808>
   1369c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   136a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   136a4:	add	r3, r2, r3
   136a8:	mov	r2, #39	; 0x27
   136ac:	strb	r2, [r3]
   136b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   136b4:	add	r3, r3, #1
   136b8:	str	r3, [fp, #-20]	; 0xffffffec
   136bc:	mov	r3, #0
   136c0:	strb	r3, [fp, #-35]	; 0xffffffdd
   136c4:	b	13cd8 <__assert_fail@plt+0x2e30>
   136c8:	mov	r3, #1
   136cc:	strb	r3, [fp, #-42]	; 0xffffffd6
   136d0:	b	13cdc <__assert_fail@plt+0x2e34>
   136d4:	ldrb	r3, [fp, #-57]	; 0xffffffc7
   136d8:	cmp	r3, #0
   136dc:	beq	1371c <__assert_fail@plt+0x2874>
   136e0:	mov	r3, #1
   136e4:	str	r3, [fp, #-48]	; 0xffffffd0
   136e8:	bl	10dac <__ctype_b_loc@plt>
   136ec:	mov	r3, r0
   136f0:	ldr	r2, [r3]
   136f4:	ldrb	r3, [fp, #-38]	; 0xffffffda
   136f8:	lsl	r3, r3, #1
   136fc:	add	r3, r2, r3
   13700:	ldrh	r3, [r3]
   13704:	and	r3, r3, #16384	; 0x4000
   13708:	cmp	r3, #0
   1370c:	movne	r3, #1
   13710:	moveq	r3, #0
   13714:	strb	r3, [fp, #-49]	; 0xffffffcf
   13718:	b	13968 <__assert_fail@plt+0x2ac0>
   1371c:	sub	r3, fp, #76	; 0x4c
   13720:	mov	r2, #8
   13724:	mov	r1, #0
   13728:	mov	r0, r3
   1372c:	bl	10e0c <memset@plt>
   13730:	mov	r3, #0
   13734:	str	r3, [fp, #-48]	; 0xffffffd0
   13738:	mov	r3, #1
   1373c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13740:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13744:	cmn	r3, #1
   13748:	bne	13758 <__assert_fail@plt+0x28b0>
   1374c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   13750:	bl	10dd0 <strlen@plt>
   13754:	str	r0, [fp, #-100]	; 0xffffff9c
   13758:	ldr	r2, [fp, #-16]
   1375c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13760:	add	r3, r2, r3
   13764:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13768:	add	r1, r2, r3
   1376c:	ldr	r2, [fp, #-16]
   13770:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13774:	add	r3, r2, r3
   13778:	ldr	r2, [fp, #-100]	; 0xffffff9c
   1377c:	sub	r2, r2, r3
   13780:	sub	r3, fp, #76	; 0x4c
   13784:	sub	r0, fp, #80	; 0x50
   13788:	bl	1740c <__assert_fail@plt+0x6564>
   1378c:	str	r0, [fp, #-64]	; 0xffffffc0
   13790:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13794:	cmp	r3, #0
   13798:	beq	1395c <__assert_fail@plt+0x2ab4>
   1379c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   137a0:	cmn	r3, #1
   137a4:	bne	137b4 <__assert_fail@plt+0x290c>
   137a8:	mov	r3, #0
   137ac:	strb	r3, [fp, #-49]	; 0xffffffcf
   137b0:	b	13968 <__assert_fail@plt+0x2ac0>
   137b4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   137b8:	cmn	r3, #2
   137bc:	bne	13814 <__assert_fail@plt+0x296c>
   137c0:	mov	r3, #0
   137c4:	strb	r3, [fp, #-49]	; 0xffffffcf
   137c8:	b	137d8 <__assert_fail@plt+0x2930>
   137cc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137d0:	add	r3, r3, #1
   137d4:	str	r3, [fp, #-48]	; 0xffffffd0
   137d8:	ldr	r2, [fp, #-16]
   137dc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137e0:	add	r2, r2, r3
   137e4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   137e8:	cmp	r2, r3
   137ec:	bcs	13964 <__assert_fail@plt+0x2abc>
   137f0:	ldr	r2, [fp, #-16]
   137f4:	ldr	r3, [fp, #-48]	; 0xffffffd0
   137f8:	add	r3, r2, r3
   137fc:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13800:	add	r3, r2, r3
   13804:	ldrb	r3, [r3]
   13808:	cmp	r3, #0
   1380c:	bne	137cc <__assert_fail@plt+0x2924>
   13810:	b	13964 <__assert_fail@plt+0x2abc>
   13814:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13818:	cmp	r3, #0
   1381c:	beq	13910 <__assert_fail@plt+0x2a68>
   13820:	ldr	r3, [fp, #4]
   13824:	cmp	r3, #2
   13828:	bne	13910 <__assert_fail@plt+0x2a68>
   1382c:	mov	r3, #1
   13830:	str	r3, [fp, #-56]	; 0xffffffc8
   13834:	b	13900 <__assert_fail@plt+0x2a58>
   13838:	ldr	r2, [fp, #-16]
   1383c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13840:	add	r2, r2, r3
   13844:	ldr	r3, [fp, #-56]	; 0xffffffc8
   13848:	add	r3, r2, r3
   1384c:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13850:	add	r3, r2, r3
   13854:	ldrb	r3, [r3]
   13858:	sub	r3, r3, #91	; 0x5b
   1385c:	cmp	r3, #33	; 0x21
   13860:	ldrls	pc, [pc, r3, lsl #2]
   13864:	b	138f0 <__assert_fail@plt+0x2a48>
   13868:	andeq	r4, r1, ip, lsr r1
   1386c:	andeq	r4, r1, ip, lsr r1
   13870:	strdeq	r3, [r1], -r0
   13874:	andeq	r4, r1, ip, lsr r1
   13878:	strdeq	r3, [r1], -r0
   1387c:	andeq	r4, r1, ip, lsr r1
   13880:	strdeq	r3, [r1], -r0
   13884:	strdeq	r3, [r1], -r0
   13888:	strdeq	r3, [r1], -r0
   1388c:	strdeq	r3, [r1], -r0
   13890:	strdeq	r3, [r1], -r0
   13894:	strdeq	r3, [r1], -r0
   13898:	strdeq	r3, [r1], -r0
   1389c:	strdeq	r3, [r1], -r0
   138a0:	strdeq	r3, [r1], -r0
   138a4:	strdeq	r3, [r1], -r0
   138a8:	strdeq	r3, [r1], -r0
   138ac:	strdeq	r3, [r1], -r0
   138b0:	strdeq	r3, [r1], -r0
   138b4:	strdeq	r3, [r1], -r0
   138b8:	strdeq	r3, [r1], -r0
   138bc:	strdeq	r3, [r1], -r0
   138c0:	strdeq	r3, [r1], -r0
   138c4:	strdeq	r3, [r1], -r0
   138c8:	strdeq	r3, [r1], -r0
   138cc:	strdeq	r3, [r1], -r0
   138d0:	strdeq	r3, [r1], -r0
   138d4:	strdeq	r3, [r1], -r0
   138d8:	strdeq	r3, [r1], -r0
   138dc:	strdeq	r3, [r1], -r0
   138e0:	strdeq	r3, [r1], -r0
   138e4:	strdeq	r3, [r1], -r0
   138e8:	strdeq	r3, [r1], -r0
   138ec:	andeq	r4, r1, ip, lsr r1
   138f0:	nop			; (mov r0, r0)
   138f4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   138f8:	add	r3, r3, #1
   138fc:	str	r3, [fp, #-56]	; 0xffffffc8
   13900:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13904:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13908:	cmp	r2, r3
   1390c:	bcc	13838 <__assert_fail@plt+0x2990>
   13910:	ldr	r3, [fp, #-80]	; 0xffffffb0
   13914:	mov	r0, r3
   13918:	bl	10cf8 <iswprint@plt>
   1391c:	mov	r3, r0
   13920:	cmp	r3, #0
   13924:	bne	13930 <__assert_fail@plt+0x2a88>
   13928:	mov	r3, #0
   1392c:	strb	r3, [fp, #-49]	; 0xffffffcf
   13930:	ldr	r2, [fp, #-48]	; 0xffffffd0
   13934:	ldr	r3, [fp, #-64]	; 0xffffffc0
   13938:	add	r3, r2, r3
   1393c:	str	r3, [fp, #-48]	; 0xffffffd0
   13940:	sub	r3, fp, #76	; 0x4c
   13944:	mov	r0, r3
   13948:	bl	10cb0 <mbsinit@plt>
   1394c:	mov	r3, r0
   13950:	cmp	r3, #0
   13954:	beq	13758 <__assert_fail@plt+0x28b0>
   13958:	b	13968 <__assert_fail@plt+0x2ac0>
   1395c:	nop			; (mov r0, r0)
   13960:	b	13968 <__assert_fail@plt+0x2ac0>
   13964:	nop			; (mov r0, r0)
   13968:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1396c:	strb	r3, [fp, #-42]	; 0xffffffd6
   13970:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13974:	cmp	r3, #1
   13978:	bhi	1399c <__assert_fail@plt+0x2af4>
   1397c:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13980:	cmp	r3, #0
   13984:	beq	13cdc <__assert_fail@plt+0x2e34>
   13988:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   1398c:	eor	r3, r3, #1
   13990:	uxtb	r3, r3
   13994:	cmp	r3, #0
   13998:	beq	13cdc <__assert_fail@plt+0x2e34>
   1399c:	ldr	r2, [fp, #-16]
   139a0:	ldr	r3, [fp, #-48]	; 0xffffffd0
   139a4:	add	r3, r2, r3
   139a8:	str	r3, [fp, #-68]	; 0xffffffbc
   139ac:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   139b0:	cmp	r3, #0
   139b4:	beq	13b74 <__assert_fail@plt+0x2ccc>
   139b8:	ldrb	r3, [fp, #-49]	; 0xffffffcf
   139bc:	eor	r3, r3, #1
   139c0:	uxtb	r3, r3
   139c4:	cmp	r3, #0
   139c8:	beq	13b74 <__assert_fail@plt+0x2ccc>
   139cc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   139d0:	cmp	r3, #0
   139d4:	bne	14144 <__assert_fail@plt+0x329c>
   139d8:	mov	r3, #1
   139dc:	strb	r3, [fp, #-41]	; 0xffffffd7
   139e0:	ldr	r3, [fp, #4]
   139e4:	cmp	r3, #2
   139e8:	bne	13a98 <__assert_fail@plt+0x2bf0>
   139ec:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   139f0:	eor	r3, r3, #1
   139f4:	uxtb	r3, r3
   139f8:	cmp	r3, #0
   139fc:	beq	13a98 <__assert_fail@plt+0x2bf0>
   13a00:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a08:	cmp	r2, r3
   13a0c:	bcs	13a24 <__assert_fail@plt+0x2b7c>
   13a10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a18:	add	r3, r2, r3
   13a1c:	mov	r2, #39	; 0x27
   13a20:	strb	r2, [r3]
   13a24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a28:	add	r3, r3, #1
   13a2c:	str	r3, [fp, #-20]	; 0xffffffec
   13a30:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a38:	cmp	r2, r3
   13a3c:	bcs	13a54 <__assert_fail@plt+0x2bac>
   13a40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a48:	add	r3, r2, r3
   13a4c:	mov	r2, #36	; 0x24
   13a50:	strb	r2, [r3]
   13a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a58:	add	r3, r3, #1
   13a5c:	str	r3, [fp, #-20]	; 0xffffffec
   13a60:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a64:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13a68:	cmp	r2, r3
   13a6c:	bcs	13a84 <__assert_fail@plt+0x2bdc>
   13a70:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13a74:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a78:	add	r3, r2, r3
   13a7c:	mov	r2, #39	; 0x27
   13a80:	strb	r2, [r3]
   13a84:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a88:	add	r3, r3, #1
   13a8c:	str	r3, [fp, #-20]	; 0xffffffec
   13a90:	mov	r3, #1
   13a94:	strb	r3, [fp, #-35]	; 0xffffffdd
   13a98:	ldr	r2, [fp, #-20]	; 0xffffffec
   13a9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13aa0:	cmp	r2, r3
   13aa4:	bcs	13abc <__assert_fail@plt+0x2c14>
   13aa8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13aac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ab0:	add	r3, r2, r3
   13ab4:	mov	r2, #92	; 0x5c
   13ab8:	strb	r2, [r3]
   13abc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ac0:	add	r3, r3, #1
   13ac4:	str	r3, [fp, #-20]	; 0xffffffec
   13ac8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13acc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ad0:	cmp	r2, r3
   13ad4:	bcs	13afc <__assert_fail@plt+0x2c54>
   13ad8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13adc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ae0:	add	r3, r2, r3
   13ae4:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13ae8:	lsr	r2, r2, #6
   13aec:	uxtb	r2, r2
   13af0:	add	r2, r2, #48	; 0x30
   13af4:	uxtb	r2, r2
   13af8:	strb	r2, [r3]
   13afc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b00:	add	r3, r3, #1
   13b04:	str	r3, [fp, #-20]	; 0xffffffec
   13b08:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b0c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b10:	cmp	r2, r3
   13b14:	bcs	13b44 <__assert_fail@plt+0x2c9c>
   13b18:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b20:	add	r3, r2, r3
   13b24:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13b28:	lsr	r2, r2, #3
   13b2c:	uxtb	r2, r2
   13b30:	and	r2, r2, #7
   13b34:	uxtb	r2, r2
   13b38:	add	r2, r2, #48	; 0x30
   13b3c:	uxtb	r2, r2
   13b40:	strb	r2, [r3]
   13b44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b48:	add	r3, r3, #1
   13b4c:	str	r3, [fp, #-20]	; 0xffffffec
   13b50:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13b54:	and	r3, r3, #7
   13b58:	uxtb	r3, r3
   13b5c:	add	r3, r3, #48	; 0x30
   13b60:	strb	r3, [fp, #-38]	; 0xffffffda
   13b64:	b	13bb8 <__assert_fail@plt+0x2d10>
   13b68:	andeq	r8, r1, r4, ror #27
   13b6c:	andeq	r8, r1, ip, ror #27
   13b70:	andeq	r8, r1, r8, ror #27
   13b74:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13b78:	cmp	r3, #0
   13b7c:	beq	13bb8 <__assert_fail@plt+0x2d10>
   13b80:	ldr	r2, [fp, #-20]	; 0xffffffec
   13b84:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13b88:	cmp	r2, r3
   13b8c:	bcs	13ba4 <__assert_fail@plt+0x2cfc>
   13b90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13b94:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b98:	add	r3, r2, r3
   13b9c:	mov	r2, #92	; 0x5c
   13ba0:	strb	r2, [r3]
   13ba4:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ba8:	add	r3, r3, #1
   13bac:	str	r3, [fp, #-20]	; 0xffffffec
   13bb0:	mov	r3, #0
   13bb4:	strb	r3, [fp, #-40]	; 0xffffffd8
   13bb8:	ldr	r3, [fp, #-16]
   13bbc:	add	r2, r3, #1
   13bc0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   13bc4:	cmp	r2, r3
   13bc8:	bcs	13ca8 <__assert_fail@plt+0x2e00>
   13bcc:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13bd0:	cmp	r3, #0
   13bd4:	beq	13c54 <__assert_fail@plt+0x2dac>
   13bd8:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13bdc:	eor	r3, r3, #1
   13be0:	uxtb	r3, r3
   13be4:	cmp	r3, #0
   13be8:	beq	13c54 <__assert_fail@plt+0x2dac>
   13bec:	ldr	r2, [fp, #-20]	; 0xffffffec
   13bf0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13bf4:	cmp	r2, r3
   13bf8:	bcs	13c10 <__assert_fail@plt+0x2d68>
   13bfc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c00:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c04:	add	r3, r2, r3
   13c08:	mov	r2, #39	; 0x27
   13c0c:	strb	r2, [r3]
   13c10:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c14:	add	r3, r3, #1
   13c18:	str	r3, [fp, #-20]	; 0xffffffec
   13c1c:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c24:	cmp	r2, r3
   13c28:	bcs	13c40 <__assert_fail@plt+0x2d98>
   13c2c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c30:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c34:	add	r3, r2, r3
   13c38:	mov	r2, #39	; 0x27
   13c3c:	strb	r2, [r3]
   13c40:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c44:	add	r3, r3, #1
   13c48:	str	r3, [fp, #-20]	; 0xffffffec
   13c4c:	mov	r3, #0
   13c50:	strb	r3, [fp, #-35]	; 0xffffffdd
   13c54:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c58:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13c5c:	cmp	r2, r3
   13c60:	bcs	13c78 <__assert_fail@plt+0x2dd0>
   13c64:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13c68:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c6c:	add	r3, r2, r3
   13c70:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13c74:	strb	r2, [r3]
   13c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   13c7c:	add	r3, r3, #1
   13c80:	str	r3, [fp, #-20]	; 0xffffffec
   13c84:	ldr	r3, [fp, #-16]
   13c88:	add	r3, r3, #1
   13c8c:	str	r3, [fp, #-16]
   13c90:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13c94:	ldr	r3, [fp, #-16]
   13c98:	add	r3, r2, r3
   13c9c:	ldrb	r3, [r3]
   13ca0:	strb	r3, [fp, #-38]	; 0xffffffda
   13ca4:	b	139ac <__assert_fail@plt+0x2b04>
   13ca8:	nop			; (mov r0, r0)
   13cac:	b	13e78 <__assert_fail@plt+0x2fd0>
   13cb0:	nop			; (mov r0, r0)
   13cb4:	b	13cdc <__assert_fail@plt+0x2e34>
   13cb8:	nop			; (mov r0, r0)
   13cbc:	b	13cdc <__assert_fail@plt+0x2e34>
   13cc0:	nop			; (mov r0, r0)
   13cc4:	b	13cdc <__assert_fail@plt+0x2e34>
   13cc8:	nop			; (mov r0, r0)
   13ccc:	b	13cdc <__assert_fail@plt+0x2e34>
   13cd0:	nop			; (mov r0, r0)
   13cd4:	b	13cdc <__assert_fail@plt+0x2e34>
   13cd8:	nop			; (mov r0, r0)
   13cdc:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   13ce0:	eor	r3, r3, #1
   13ce4:	uxtb	r3, r3
   13ce8:	cmp	r3, #0
   13cec:	bne	13cfc <__assert_fail@plt+0x2e54>
   13cf0:	ldr	r3, [fp, #4]
   13cf4:	cmp	r3, #2
   13cf8:	bne	13d10 <__assert_fail@plt+0x2e68>
   13cfc:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13d00:	eor	r3, r3, #1
   13d04:	uxtb	r3, r3
   13d08:	cmp	r3, #0
   13d0c:	bne	13d50 <__assert_fail@plt+0x2ea8>
   13d10:	ldr	r3, [fp, #12]
   13d14:	cmp	r3, #0
   13d18:	beq	13d50 <__assert_fail@plt+0x2ea8>
   13d1c:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13d20:	lsr	r3, r3, #5
   13d24:	uxtb	r3, r3
   13d28:	lsl	r3, r3, #2
   13d2c:	ldr	r2, [fp, #12]
   13d30:	add	r3, r2, r3
   13d34:	ldr	r2, [r3]
   13d38:	ldrb	r3, [fp, #-38]	; 0xffffffda
   13d3c:	and	r3, r3, #31
   13d40:	lsr	r3, r2, r3
   13d44:	and	r3, r3, #1
   13d48:	cmp	r3, #0
   13d4c:	bne	13d64 <__assert_fail@plt+0x2ebc>
   13d50:	ldrb	r3, [fp, #-40]	; 0xffffffd8
   13d54:	eor	r3, r3, #1
   13d58:	uxtb	r3, r3
   13d5c:	cmp	r3, #0
   13d60:	bne	13e74 <__assert_fail@plt+0x2fcc>
   13d64:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13d68:	cmp	r3, #0
   13d6c:	bne	1414c <__assert_fail@plt+0x32a4>
   13d70:	mov	r3, #1
   13d74:	strb	r3, [fp, #-41]	; 0xffffffd7
   13d78:	ldr	r3, [fp, #4]
   13d7c:	cmp	r3, #2
   13d80:	bne	13e30 <__assert_fail@plt+0x2f88>
   13d84:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13d88:	eor	r3, r3, #1
   13d8c:	uxtb	r3, r3
   13d90:	cmp	r3, #0
   13d94:	beq	13e30 <__assert_fail@plt+0x2f88>
   13d98:	ldr	r2, [fp, #-20]	; 0xffffffec
   13d9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13da0:	cmp	r2, r3
   13da4:	bcs	13dbc <__assert_fail@plt+0x2f14>
   13da8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13dac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13db0:	add	r3, r2, r3
   13db4:	mov	r2, #39	; 0x27
   13db8:	strb	r2, [r3]
   13dbc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13dc0:	add	r3, r3, #1
   13dc4:	str	r3, [fp, #-20]	; 0xffffffec
   13dc8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dcc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13dd0:	cmp	r2, r3
   13dd4:	bcs	13dec <__assert_fail@plt+0x2f44>
   13dd8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13ddc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13de0:	add	r3, r2, r3
   13de4:	mov	r2, #36	; 0x24
   13de8:	strb	r2, [r3]
   13dec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13df0:	add	r3, r3, #1
   13df4:	str	r3, [fp, #-20]	; 0xffffffec
   13df8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13dfc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e00:	cmp	r2, r3
   13e04:	bcs	13e1c <__assert_fail@plt+0x2f74>
   13e08:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e0c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e10:	add	r3, r2, r3
   13e14:	mov	r2, #39	; 0x27
   13e18:	strb	r2, [r3]
   13e1c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e20:	add	r3, r3, #1
   13e24:	str	r3, [fp, #-20]	; 0xffffffec
   13e28:	mov	r3, #1
   13e2c:	strb	r3, [fp, #-35]	; 0xffffffdd
   13e30:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e34:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13e38:	cmp	r2, r3
   13e3c:	bcs	13e54 <__assert_fail@plt+0x2fac>
   13e40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13e44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e48:	add	r3, r2, r3
   13e4c:	mov	r2, #92	; 0x5c
   13e50:	strb	r2, [r3]
   13e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13e58:	add	r3, r3, #1
   13e5c:	str	r3, [fp, #-20]	; 0xffffffec
   13e60:	b	13e78 <__assert_fail@plt+0x2fd0>
   13e64:	nop			; (mov r0, r0)
   13e68:	b	13e78 <__assert_fail@plt+0x2fd0>
   13e6c:	nop			; (mov r0, r0)
   13e70:	b	13e78 <__assert_fail@plt+0x2fd0>
   13e74:	nop			; (mov r0, r0)
   13e78:	ldrb	r3, [fp, #-35]	; 0xffffffdd
   13e7c:	cmp	r3, #0
   13e80:	beq	13f00 <__assert_fail@plt+0x3058>
   13e84:	ldrb	r3, [fp, #-41]	; 0xffffffd7
   13e88:	eor	r3, r3, #1
   13e8c:	uxtb	r3, r3
   13e90:	cmp	r3, #0
   13e94:	beq	13f00 <__assert_fail@plt+0x3058>
   13e98:	ldr	r2, [fp, #-20]	; 0xffffffec
   13e9c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ea0:	cmp	r2, r3
   13ea4:	bcs	13ebc <__assert_fail@plt+0x3014>
   13ea8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13eac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13eb0:	add	r3, r2, r3
   13eb4:	mov	r2, #39	; 0x27
   13eb8:	strb	r2, [r3]
   13ebc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ec0:	add	r3, r3, #1
   13ec4:	str	r3, [fp, #-20]	; 0xffffffec
   13ec8:	ldr	r2, [fp, #-20]	; 0xffffffec
   13ecc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13ed0:	cmp	r2, r3
   13ed4:	bcs	13eec <__assert_fail@plt+0x3044>
   13ed8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13edc:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ee0:	add	r3, r2, r3
   13ee4:	mov	r2, #39	; 0x27
   13ee8:	strb	r2, [r3]
   13eec:	ldr	r3, [fp, #-20]	; 0xffffffec
   13ef0:	add	r3, r3, #1
   13ef4:	str	r3, [fp, #-20]	; 0xffffffec
   13ef8:	mov	r3, #0
   13efc:	strb	r3, [fp, #-35]	; 0xffffffdd
   13f00:	ldr	r2, [fp, #-20]	; 0xffffffec
   13f04:	ldr	r3, [fp, #-92]	; 0xffffffa4
   13f08:	cmp	r2, r3
   13f0c:	bcs	13f24 <__assert_fail@plt+0x307c>
   13f10:	ldr	r2, [fp, #-88]	; 0xffffffa8
   13f14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f18:	add	r3, r2, r3
   13f1c:	ldrb	r2, [fp, #-38]	; 0xffffffda
   13f20:	strb	r2, [r3]
   13f24:	ldr	r3, [fp, #-20]	; 0xffffffec
   13f28:	add	r3, r3, #1
   13f2c:	str	r3, [fp, #-20]	; 0xffffffec
   13f30:	ldrb	r3, [fp, #-42]	; 0xffffffd6
   13f34:	eor	r3, r3, #1
   13f38:	uxtb	r3, r3
   13f3c:	cmp	r3, #0
   13f40:	beq	13f4c <__assert_fail@plt+0x30a4>
   13f44:	mov	r3, #0
   13f48:	strb	r3, [fp, #-37]	; 0xffffffdb
   13f4c:	ldr	r3, [fp, #-16]
   13f50:	add	r3, r3, #1
   13f54:	str	r3, [fp, #-16]
   13f58:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13f5c:	cmn	r3, #1
   13f60:	bne	13f88 <__assert_fail@plt+0x30e0>
   13f64:	ldr	r2, [fp, #-96]	; 0xffffffa0
   13f68:	ldr	r3, [fp, #-16]
   13f6c:	add	r3, r2, r3
   13f70:	ldrb	r3, [r3]
   13f74:	cmp	r3, #0
   13f78:	movne	r3, #1
   13f7c:	moveq	r3, #0
   13f80:	uxtb	r3, r3
   13f84:	b	13fa0 <__assert_fail@plt+0x30f8>
   13f88:	ldr	r2, [fp, #-16]
   13f8c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   13f90:	cmp	r2, r3
   13f94:	movne	r3, #1
   13f98:	moveq	r3, #0
   13f9c:	uxtb	r3, r3
   13fa0:	cmp	r3, #0
   13fa4:	bne	12dcc <__assert_fail@plt+0x1f24>
   13fa8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13fac:	cmp	r3, #0
   13fb0:	bne	13fcc <__assert_fail@plt+0x3124>
   13fb4:	ldr	r3, [fp, #4]
   13fb8:	cmp	r3, #2
   13fbc:	bne	13fcc <__assert_fail@plt+0x3124>
   13fc0:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13fc4:	cmp	r3, #0
   13fc8:	bne	14154 <__assert_fail@plt+0x32ac>
   13fcc:	ldr	r3, [fp, #4]
   13fd0:	cmp	r3, #2
   13fd4:	bne	14074 <__assert_fail@plt+0x31cc>
   13fd8:	ldrb	r3, [fp, #-34]	; 0xffffffde
   13fdc:	eor	r3, r3, #1
   13fe0:	uxtb	r3, r3
   13fe4:	cmp	r3, #0
   13fe8:	beq	14074 <__assert_fail@plt+0x31cc>
   13fec:	ldrb	r3, [fp, #-36]	; 0xffffffdc
   13ff0:	cmp	r3, #0
   13ff4:	beq	14074 <__assert_fail@plt+0x31cc>
   13ff8:	ldrb	r3, [fp, #-37]	; 0xffffffdb
   13ffc:	cmp	r3, #0
   14000:	beq	14048 <__assert_fail@plt+0x31a0>
   14004:	ldr	r3, [fp, #20]
   14008:	str	r3, [sp, #16]
   1400c:	ldr	r3, [fp, #16]
   14010:	str	r3, [sp, #12]
   14014:	ldr	r3, [fp, #12]
   14018:	str	r3, [sp, #8]
   1401c:	ldr	r3, [fp, #8]
   14020:	str	r3, [sp, #4]
   14024:	mov	r3, #5
   14028:	str	r3, [sp]
   1402c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   14030:	ldr	r2, [fp, #-96]	; 0xffffffa0
   14034:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14038:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1403c:	bl	12b1c <__assert_fail@plt+0x1c74>
   14040:	mov	r3, r0
   14044:	b	141bc <__assert_fail@plt+0x3314>
   14048:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1404c:	cmp	r3, #0
   14050:	bne	14074 <__assert_fail@plt+0x31cc>
   14054:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14058:	cmp	r3, #0
   1405c:	beq	14074 <__assert_fail@plt+0x31cc>
   14060:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14064:	str	r3, [fp, #-92]	; 0xffffffa4
   14068:	mov	r3, #0
   1406c:	str	r3, [fp, #-20]	; 0xffffffec
   14070:	b	12ba8 <__assert_fail@plt+0x1d00>
   14074:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14078:	cmp	r3, #0
   1407c:	beq	140e8 <__assert_fail@plt+0x3240>
   14080:	ldrb	r3, [fp, #-34]	; 0xffffffde
   14084:	eor	r3, r3, #1
   14088:	uxtb	r3, r3
   1408c:	cmp	r3, #0
   14090:	beq	140e8 <__assert_fail@plt+0x3240>
   14094:	b	140d8 <__assert_fail@plt+0x3230>
   14098:	ldr	r2, [fp, #-20]	; 0xffffffec
   1409c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140a0:	cmp	r2, r3
   140a4:	bcs	140c0 <__assert_fail@plt+0x3218>
   140a8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   140b0:	add	r3, r2, r3
   140b4:	ldr	r2, [fp, #-28]	; 0xffffffe4
   140b8:	ldrb	r2, [r2]
   140bc:	strb	r2, [r3]
   140c0:	ldr	r3, [fp, #-20]	; 0xffffffec
   140c4:	add	r3, r3, #1
   140c8:	str	r3, [fp, #-20]	; 0xffffffec
   140cc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140d0:	add	r3, r3, #1
   140d4:	str	r3, [fp, #-28]	; 0xffffffe4
   140d8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140dc:	ldrb	r3, [r3]
   140e0:	cmp	r3, #0
   140e4:	bne	14098 <__assert_fail@plt+0x31f0>
   140e8:	ldr	r2, [fp, #-20]	; 0xffffffec
   140ec:	ldr	r3, [fp, #-92]	; 0xffffffa4
   140f0:	cmp	r2, r3
   140f4:	bcs	1410c <__assert_fail@plt+0x3264>
   140f8:	ldr	r2, [fp, #-88]	; 0xffffffa8
   140fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   14100:	add	r3, r2, r3
   14104:	mov	r2, #0
   14108:	strb	r2, [r3]
   1410c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14110:	b	141bc <__assert_fail@plt+0x3314>
   14114:	nop			; (mov r0, r0)
   14118:	b	14158 <__assert_fail@plt+0x32b0>
   1411c:	nop			; (mov r0, r0)
   14120:	b	14158 <__assert_fail@plt+0x32b0>
   14124:	nop			; (mov r0, r0)
   14128:	b	14158 <__assert_fail@plt+0x32b0>
   1412c:	nop			; (mov r0, r0)
   14130:	b	14158 <__assert_fail@plt+0x32b0>
   14134:	nop			; (mov r0, r0)
   14138:	b	14158 <__assert_fail@plt+0x32b0>
   1413c:	nop			; (mov r0, r0)
   14140:	b	14158 <__assert_fail@plt+0x32b0>
   14144:	nop			; (mov r0, r0)
   14148:	b	14158 <__assert_fail@plt+0x32b0>
   1414c:	nop			; (mov r0, r0)
   14150:	b	14158 <__assert_fail@plt+0x32b0>
   14154:	nop			; (mov r0, r0)
   14158:	ldr	r3, [fp, #4]
   1415c:	cmp	r3, #2
   14160:	bne	14178 <__assert_fail@plt+0x32d0>
   14164:	ldrb	r3, [fp, #-33]	; 0xffffffdf
   14168:	cmp	r3, #0
   1416c:	beq	14178 <__assert_fail@plt+0x32d0>
   14170:	mov	r3, #4
   14174:	str	r3, [fp, #4]
   14178:	ldr	r3, [fp, #8]
   1417c:	bic	r3, r3, #2
   14180:	ldr	r2, [fp, #20]
   14184:	str	r2, [sp, #16]
   14188:	ldr	r2, [fp, #16]
   1418c:	str	r2, [sp, #12]
   14190:	mov	r2, #0
   14194:	str	r2, [sp, #8]
   14198:	str	r3, [sp, #4]
   1419c:	ldr	r3, [fp, #4]
   141a0:	str	r3, [sp]
   141a4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   141a8:	ldr	r2, [fp, #-96]	; 0xffffffa0
   141ac:	ldr	r1, [fp, #-92]	; 0xffffffa4
   141b0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   141b4:	bl	12b1c <__assert_fail@plt+0x1c74>
   141b8:	mov	r3, r0
   141bc:	mov	r0, r3
   141c0:	sub	sp, fp, #8
   141c4:	pop	{r4, fp, pc}
   141c8:	push	{fp, lr}
   141cc:	add	fp, sp, #4
   141d0:	sub	sp, sp, #56	; 0x38
   141d4:	str	r0, [fp, #-24]	; 0xffffffe8
   141d8:	str	r1, [fp, #-28]	; 0xffffffe4
   141dc:	str	r2, [fp, #-32]	; 0xffffffe0
   141e0:	str	r3, [fp, #-36]	; 0xffffffdc
   141e4:	ldr	r3, [fp, #4]
   141e8:	cmp	r3, #0
   141ec:	beq	141f8 <__assert_fail@plt+0x3350>
   141f0:	ldr	r3, [fp, #4]
   141f4:	b	141fc <__assert_fail@plt+0x3354>
   141f8:	ldr	r3, [pc, #132]	; 14284 <__assert_fail@plt+0x33dc>
   141fc:	str	r3, [fp, #-8]
   14200:	bl	10df4 <__errno_location@plt>
   14204:	mov	r3, r0
   14208:	ldr	r3, [r3]
   1420c:	str	r3, [fp, #-12]
   14210:	ldr	r3, [fp, #-8]
   14214:	ldr	r3, [r3]
   14218:	ldr	r2, [fp, #-8]
   1421c:	ldr	r2, [r2, #4]
   14220:	ldr	r1, [fp, #-8]
   14224:	add	r1, r1, #8
   14228:	ldr	r0, [fp, #-8]
   1422c:	ldr	r0, [r0, #40]	; 0x28
   14230:	ldr	ip, [fp, #-8]
   14234:	ldr	ip, [ip, #44]	; 0x2c
   14238:	str	ip, [sp, #16]
   1423c:	str	r0, [sp, #12]
   14240:	str	r1, [sp, #8]
   14244:	str	r2, [sp, #4]
   14248:	str	r3, [sp]
   1424c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14250:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14254:	ldr	r1, [fp, #-28]	; 0xffffffe4
   14258:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1425c:	bl	12b1c <__assert_fail@plt+0x1c74>
   14260:	str	r0, [fp, #-16]
   14264:	bl	10df4 <__errno_location@plt>
   14268:	mov	r2, r0
   1426c:	ldr	r3, [fp, #-12]
   14270:	str	r3, [r2]
   14274:	ldr	r3, [fp, #-16]
   14278:	mov	r0, r3
   1427c:	sub	sp, fp, #4
   14280:	pop	{fp, pc}
   14284:	andeq	sl, r2, r4, ror #2
   14288:	push	{fp, lr}
   1428c:	add	fp, sp, #4
   14290:	sub	sp, sp, #16
   14294:	str	r0, [fp, #-8]
   14298:	str	r1, [fp, #-12]
   1429c:	str	r2, [fp, #-16]
   142a0:	ldr	r3, [fp, #-16]
   142a4:	mov	r2, #0
   142a8:	ldr	r1, [fp, #-12]
   142ac:	ldr	r0, [fp, #-8]
   142b0:	bl	142c4 <__assert_fail@plt+0x341c>
   142b4:	mov	r3, r0
   142b8:	mov	r0, r3
   142bc:	sub	sp, fp, #4
   142c0:	pop	{fp, pc}
   142c4:	push	{fp, lr}
   142c8:	add	fp, sp, #4
   142cc:	sub	sp, sp, #64	; 0x40
   142d0:	str	r0, [fp, #-32]	; 0xffffffe0
   142d4:	str	r1, [fp, #-36]	; 0xffffffdc
   142d8:	str	r2, [fp, #-40]	; 0xffffffd8
   142dc:	str	r3, [fp, #-44]	; 0xffffffd4
   142e0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   142e4:	cmp	r3, #0
   142e8:	beq	142f4 <__assert_fail@plt+0x344c>
   142ec:	ldr	r3, [fp, #-44]	; 0xffffffd4
   142f0:	b	142f8 <__assert_fail@plt+0x3450>
   142f4:	ldr	r3, [pc, #292]	; 14420 <__assert_fail@plt+0x3578>
   142f8:	str	r3, [fp, #-8]
   142fc:	bl	10df4 <__errno_location@plt>
   14300:	mov	r3, r0
   14304:	ldr	r3, [r3]
   14308:	str	r3, [fp, #-12]
   1430c:	ldr	r3, [fp, #-8]
   14310:	ldr	r3, [r3, #4]
   14314:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14318:	cmp	r2, #0
   1431c:	moveq	r2, #1
   14320:	movne	r2, #0
   14324:	uxtb	r2, r2
   14328:	orr	r3, r3, r2
   1432c:	str	r3, [fp, #-16]
   14330:	ldr	r3, [fp, #-8]
   14334:	ldr	r3, [r3]
   14338:	ldr	r2, [fp, #-8]
   1433c:	add	r2, r2, #8
   14340:	ldr	r1, [fp, #-8]
   14344:	ldr	r1, [r1, #40]	; 0x28
   14348:	ldr	r0, [fp, #-8]
   1434c:	ldr	r0, [r0, #44]	; 0x2c
   14350:	str	r0, [sp, #16]
   14354:	str	r1, [sp, #12]
   14358:	str	r2, [sp, #8]
   1435c:	ldr	r2, [fp, #-16]
   14360:	str	r2, [sp, #4]
   14364:	str	r3, [sp]
   14368:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1436c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14370:	mov	r1, #0
   14374:	mov	r0, #0
   14378:	bl	12b1c <__assert_fail@plt+0x1c74>
   1437c:	mov	r3, r0
   14380:	add	r3, r3, #1
   14384:	str	r3, [fp, #-20]	; 0xffffffec
   14388:	ldr	r0, [fp, #-20]	; 0xffffffec
   1438c:	bl	155c0 <__assert_fail@plt+0x4718>
   14390:	mov	r3, r0
   14394:	str	r3, [fp, #-24]	; 0xffffffe8
   14398:	ldr	r3, [fp, #-8]
   1439c:	ldr	r3, [r3]
   143a0:	ldr	r2, [fp, #-8]
   143a4:	add	r2, r2, #8
   143a8:	ldr	r1, [fp, #-8]
   143ac:	ldr	r1, [r1, #40]	; 0x28
   143b0:	ldr	r0, [fp, #-8]
   143b4:	ldr	r0, [r0, #44]	; 0x2c
   143b8:	str	r0, [sp, #16]
   143bc:	str	r1, [sp, #12]
   143c0:	str	r2, [sp, #8]
   143c4:	ldr	r2, [fp, #-16]
   143c8:	str	r2, [sp, #4]
   143cc:	str	r3, [sp]
   143d0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   143d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   143d8:	ldr	r1, [fp, #-20]	; 0xffffffec
   143dc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   143e0:	bl	12b1c <__assert_fail@plt+0x1c74>
   143e4:	bl	10df4 <__errno_location@plt>
   143e8:	mov	r2, r0
   143ec:	ldr	r3, [fp, #-12]
   143f0:	str	r3, [r2]
   143f4:	ldr	r3, [fp, #-40]	; 0xffffffd8
   143f8:	cmp	r3, #0
   143fc:	beq	14410 <__assert_fail@plt+0x3568>
   14400:	ldr	r3, [fp, #-20]	; 0xffffffec
   14404:	sub	r2, r3, #1
   14408:	ldr	r3, [fp, #-40]	; 0xffffffd8
   1440c:	str	r2, [r3]
   14410:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14414:	mov	r0, r3
   14418:	sub	sp, fp, #4
   1441c:	pop	{fp, pc}
   14420:	andeq	sl, r2, r4, ror #2
   14424:	push	{fp, lr}
   14428:	add	fp, sp, #4
   1442c:	sub	sp, sp, #8
   14430:	ldr	r3, [pc, #196]	; 144fc <__assert_fail@plt+0x3654>
   14434:	ldr	r3, [r3]
   14438:	str	r3, [fp, #-12]
   1443c:	mov	r3, #1
   14440:	str	r3, [fp, #-8]
   14444:	b	14470 <__assert_fail@plt+0x35c8>
   14448:	ldr	r3, [fp, #-8]
   1444c:	lsl	r3, r3, #3
   14450:	ldr	r2, [fp, #-12]
   14454:	add	r3, r2, r3
   14458:	ldr	r3, [r3, #4]
   1445c:	mov	r0, r3
   14460:	bl	17104 <__assert_fail@plt+0x625c>
   14464:	ldr	r3, [fp, #-8]
   14468:	add	r3, r3, #1
   1446c:	str	r3, [fp, #-8]
   14470:	ldr	r3, [pc, #136]	; 14500 <__assert_fail@plt+0x3658>
   14474:	ldr	r3, [r3]
   14478:	ldr	r2, [fp, #-8]
   1447c:	cmp	r2, r3
   14480:	blt	14448 <__assert_fail@plt+0x35a0>
   14484:	ldr	r3, [fp, #-12]
   14488:	ldr	r3, [r3, #4]
   1448c:	ldr	r2, [pc, #112]	; 14504 <__assert_fail@plt+0x365c>
   14490:	cmp	r3, r2
   14494:	beq	144c0 <__assert_fail@plt+0x3618>
   14498:	ldr	r3, [fp, #-12]
   1449c:	ldr	r3, [r3, #4]
   144a0:	mov	r0, r3
   144a4:	bl	17104 <__assert_fail@plt+0x625c>
   144a8:	ldr	r3, [pc, #88]	; 14508 <__assert_fail@plt+0x3660>
   144ac:	mov	r2, #256	; 0x100
   144b0:	str	r2, [r3]
   144b4:	ldr	r3, [pc, #76]	; 14508 <__assert_fail@plt+0x3660>
   144b8:	ldr	r2, [pc, #68]	; 14504 <__assert_fail@plt+0x365c>
   144bc:	str	r2, [r3, #4]
   144c0:	ldr	r3, [fp, #-12]
   144c4:	ldr	r2, [pc, #60]	; 14508 <__assert_fail@plt+0x3660>
   144c8:	cmp	r3, r2
   144cc:	beq	144e4 <__assert_fail@plt+0x363c>
   144d0:	ldr	r0, [fp, #-12]
   144d4:	bl	17104 <__assert_fail@plt+0x625c>
   144d8:	ldr	r3, [pc, #28]	; 144fc <__assert_fail@plt+0x3654>
   144dc:	ldr	r2, [pc, #36]	; 14508 <__assert_fail@plt+0x3660>
   144e0:	str	r2, [r3]
   144e4:	ldr	r3, [pc, #20]	; 14500 <__assert_fail@plt+0x3658>
   144e8:	mov	r2, #1
   144ec:	str	r2, [r3]
   144f0:	nop			; (mov r0, r0)
   144f4:	sub	sp, fp, #4
   144f8:	pop	{fp, pc}
   144fc:	strdeq	sl, [r2], -ip
   14500:	strdeq	sl, [r2], -r0
   14504:	muleq	r2, r4, r1
   14508:	strdeq	sl, [r2], -r4
   1450c:	push	{r4, fp, lr}
   14510:	add	fp, sp, #8
   14514:	sub	sp, sp, #84	; 0x54
   14518:	str	r0, [fp, #-56]	; 0xffffffc8
   1451c:	str	r1, [fp, #-60]	; 0xffffffc4
   14520:	str	r2, [fp, #-64]	; 0xffffffc0
   14524:	str	r3, [fp, #-68]	; 0xffffffbc
   14528:	bl	10df4 <__errno_location@plt>
   1452c:	mov	r3, r0
   14530:	ldr	r3, [r3]
   14534:	str	r3, [fp, #-24]	; 0xffffffe8
   14538:	ldr	r3, [pc, #640]	; 147c0 <__assert_fail@plt+0x3918>
   1453c:	ldr	r3, [r3]
   14540:	str	r3, [fp, #-16]
   14544:	mvn	r3, #-2147483648	; 0x80000000
   14548:	str	r3, [fp, #-28]	; 0xffffffe4
   1454c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14550:	cmp	r3, #0
   14554:	blt	14568 <__assert_fail@plt+0x36c0>
   14558:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1455c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14560:	cmp	r2, r3
   14564:	blt	1456c <__assert_fail@plt+0x36c4>
   14568:	bl	10e90 <abort@plt>
   1456c:	ldr	r3, [pc, #592]	; 147c4 <__assert_fail@plt+0x391c>
   14570:	ldr	r2, [r3]
   14574:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14578:	cmp	r2, r3
   1457c:	bgt	14650 <__assert_fail@plt+0x37a8>
   14580:	ldr	r3, [fp, #-16]
   14584:	ldr	r2, [pc, #572]	; 147c8 <__assert_fail@plt+0x3920>
   14588:	cmp	r3, r2
   1458c:	moveq	r3, #1
   14590:	movne	r3, #0
   14594:	strb	r3, [fp, #-29]	; 0xffffffe3
   14598:	ldr	r3, [pc, #548]	; 147c4 <__assert_fail@plt+0x391c>
   1459c:	ldr	r3, [r3]
   145a0:	str	r3, [fp, #-48]	; 0xffffffd0
   145a4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   145a8:	cmp	r3, #0
   145ac:	beq	145b8 <__assert_fail@plt+0x3710>
   145b0:	mov	r0, #0
   145b4:	b	145bc <__assert_fail@plt+0x3714>
   145b8:	ldr	r0, [fp, #-16]
   145bc:	ldr	r3, [pc, #512]	; 147c4 <__assert_fail@plt+0x391c>
   145c0:	ldr	r3, [r3]
   145c4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   145c8:	sub	r3, r2, r3
   145cc:	add	r2, r3, #1
   145d0:	sub	r1, fp, #48	; 0x30
   145d4:	mov	r3, #8
   145d8:	str	r3, [sp]
   145dc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   145e0:	bl	158e0 <__assert_fail@plt+0x4a38>
   145e4:	str	r0, [fp, #-16]
   145e8:	ldr	r2, [pc, #464]	; 147c0 <__assert_fail@plt+0x3918>
   145ec:	ldr	r3, [fp, #-16]
   145f0:	str	r3, [r2]
   145f4:	ldrb	r3, [fp, #-29]	; 0xffffffe3
   145f8:	cmp	r3, #0
   145fc:	beq	14610 <__assert_fail@plt+0x3768>
   14600:	ldr	r3, [fp, #-16]
   14604:	ldr	r2, [pc, #444]	; 147c8 <__assert_fail@plt+0x3920>
   14608:	ldm	r2, {r0, r1}
   1460c:	stm	r3, {r0, r1}
   14610:	ldr	r3, [pc, #428]	; 147c4 <__assert_fail@plt+0x391c>
   14614:	ldr	r3, [r3]
   14618:	lsl	r3, r3, #3
   1461c:	ldr	r2, [fp, #-16]
   14620:	add	r0, r2, r3
   14624:	ldr	r2, [fp, #-48]	; 0xffffffd0
   14628:	ldr	r3, [pc, #404]	; 147c4 <__assert_fail@plt+0x391c>
   1462c:	ldr	r3, [r3]
   14630:	sub	r3, r2, r3
   14634:	lsl	r3, r3, #3
   14638:	mov	r2, r3
   1463c:	mov	r1, #0
   14640:	bl	10e0c <memset@plt>
   14644:	ldr	r3, [fp, #-48]	; 0xffffffd0
   14648:	ldr	r2, [pc, #372]	; 147c4 <__assert_fail@plt+0x391c>
   1464c:	str	r3, [r2]
   14650:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14654:	lsl	r3, r3, #3
   14658:	ldr	r2, [fp, #-16]
   1465c:	add	r3, r2, r3
   14660:	ldr	r3, [r3]
   14664:	str	r3, [fp, #-36]	; 0xffffffdc
   14668:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1466c:	lsl	r3, r3, #3
   14670:	ldr	r2, [fp, #-16]
   14674:	add	r3, r2, r3
   14678:	ldr	r3, [r3, #4]
   1467c:	str	r3, [fp, #-20]	; 0xffffffec
   14680:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14684:	ldr	r3, [r3, #4]
   14688:	orr	r3, r3, #1
   1468c:	str	r3, [fp, #-40]	; 0xffffffd8
   14690:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14694:	ldr	r3, [r3]
   14698:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1469c:	add	r2, r2, #8
   146a0:	ldr	r1, [fp, #-68]	; 0xffffffbc
   146a4:	ldr	r1, [r1, #40]	; 0x28
   146a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   146ac:	ldr	r0, [r0, #44]	; 0x2c
   146b0:	str	r0, [sp, #16]
   146b4:	str	r1, [sp, #12]
   146b8:	str	r2, [sp, #8]
   146bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   146c0:	str	r2, [sp, #4]
   146c4:	str	r3, [sp]
   146c8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   146cc:	ldr	r2, [fp, #-60]	; 0xffffffc4
   146d0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   146d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   146d8:	bl	12b1c <__assert_fail@plt+0x1c74>
   146dc:	str	r0, [fp, #-44]	; 0xffffffd4
   146e0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   146e4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   146e8:	cmp	r2, r3
   146ec:	bhi	147a0 <__assert_fail@plt+0x38f8>
   146f0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   146f4:	lsl	r3, r3, #3
   146f8:	ldr	r2, [fp, #-16]
   146fc:	add	r3, r2, r3
   14700:	ldr	r2, [fp, #-44]	; 0xffffffd4
   14704:	add	r2, r2, #1
   14708:	str	r2, [fp, #-36]	; 0xffffffdc
   1470c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14710:	str	r2, [r3]
   14714:	ldr	r3, [fp, #-20]	; 0xffffffec
   14718:	ldr	r2, [pc, #172]	; 147cc <__assert_fail@plt+0x3924>
   1471c:	cmp	r3, r2
   14720:	beq	1472c <__assert_fail@plt+0x3884>
   14724:	ldr	r0, [fp, #-20]	; 0xffffffec
   14728:	bl	17104 <__assert_fail@plt+0x625c>
   1472c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   14730:	lsl	r3, r3, #3
   14734:	ldr	r2, [fp, #-16]
   14738:	add	r4, r2, r3
   1473c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14740:	bl	155c0 <__assert_fail@plt+0x4718>
   14744:	mov	r3, r0
   14748:	str	r3, [fp, #-20]	; 0xffffffec
   1474c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14750:	str	r3, [r4, #4]
   14754:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14758:	ldr	r3, [r3]
   1475c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14760:	add	r2, r2, #8
   14764:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14768:	ldr	r1, [r1, #40]	; 0x28
   1476c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14770:	ldr	r0, [r0, #44]	; 0x2c
   14774:	str	r0, [sp, #16]
   14778:	str	r1, [sp, #12]
   1477c:	str	r2, [sp, #8]
   14780:	ldr	r2, [fp, #-40]	; 0xffffffd8
   14784:	str	r2, [sp, #4]
   14788:	str	r3, [sp]
   1478c:	ldr	r3, [fp, #-64]	; 0xffffffc0
   14790:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14794:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14798:	ldr	r0, [fp, #-20]	; 0xffffffec
   1479c:	bl	12b1c <__assert_fail@plt+0x1c74>
   147a0:	bl	10df4 <__errno_location@plt>
   147a4:	mov	r2, r0
   147a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147ac:	str	r3, [r2]
   147b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   147b4:	mov	r0, r3
   147b8:	sub	sp, fp, #8
   147bc:	pop	{r4, fp, pc}
   147c0:	strdeq	sl, [r2], -ip
   147c4:	strdeq	sl, [r2], -r0
   147c8:	strdeq	sl, [r2], -r4
   147cc:	muleq	r2, r4, r1
   147d0:	push	{fp, lr}
   147d4:	add	fp, sp, #4
   147d8:	sub	sp, sp, #8
   147dc:	str	r0, [fp, #-8]
   147e0:	str	r1, [fp, #-12]
   147e4:	ldr	r3, [pc, #28]	; 14808 <__assert_fail@plt+0x3960>
   147e8:	mvn	r2, #0
   147ec:	ldr	r1, [fp, #-12]
   147f0:	ldr	r0, [fp, #-8]
   147f4:	bl	1450c <__assert_fail@plt+0x3664>
   147f8:	mov	r3, r0
   147fc:	mov	r0, r3
   14800:	sub	sp, fp, #4
   14804:	pop	{fp, pc}
   14808:	andeq	sl, r2, r4, ror #2
   1480c:	push	{fp, lr}
   14810:	add	fp, sp, #4
   14814:	sub	sp, sp, #16
   14818:	str	r0, [fp, #-8]
   1481c:	str	r1, [fp, #-12]
   14820:	str	r2, [fp, #-16]
   14824:	ldr	r3, [pc, #28]	; 14848 <__assert_fail@plt+0x39a0>
   14828:	ldr	r2, [fp, #-16]
   1482c:	ldr	r1, [fp, #-12]
   14830:	ldr	r0, [fp, #-8]
   14834:	bl	1450c <__assert_fail@plt+0x3664>
   14838:	mov	r3, r0
   1483c:	mov	r0, r3
   14840:	sub	sp, fp, #4
   14844:	pop	{fp, pc}
   14848:	andeq	sl, r2, r4, ror #2
   1484c:	push	{fp, lr}
   14850:	add	fp, sp, #4
   14854:	sub	sp, sp, #8
   14858:	str	r0, [fp, #-8]
   1485c:	ldr	r1, [fp, #-8]
   14860:	mov	r0, #0
   14864:	bl	147d0 <__assert_fail@plt+0x3928>
   14868:	mov	r3, r0
   1486c:	mov	r0, r3
   14870:	sub	sp, fp, #4
   14874:	pop	{fp, pc}
   14878:	push	{fp, lr}
   1487c:	add	fp, sp, #4
   14880:	sub	sp, sp, #8
   14884:	str	r0, [fp, #-8]
   14888:	str	r1, [fp, #-12]
   1488c:	ldr	r2, [fp, #-12]
   14890:	ldr	r1, [fp, #-8]
   14894:	mov	r0, #0
   14898:	bl	1480c <__assert_fail@plt+0x3964>
   1489c:	mov	r3, r0
   148a0:	mov	r0, r3
   148a4:	sub	sp, fp, #4
   148a8:	pop	{fp, pc}
   148ac:	push	{fp, lr}
   148b0:	add	fp, sp, #4
   148b4:	sub	sp, sp, #64	; 0x40
   148b8:	str	r0, [fp, #-56]	; 0xffffffc8
   148bc:	str	r1, [fp, #-60]	; 0xffffffc4
   148c0:	str	r2, [fp, #-64]	; 0xffffffc0
   148c4:	sub	r3, fp, #52	; 0x34
   148c8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   148cc:	mov	r0, r3
   148d0:	bl	129b8 <__assert_fail@plt+0x1b10>
   148d4:	sub	r3, fp, #52	; 0x34
   148d8:	mvn	r2, #0
   148dc:	ldr	r1, [fp, #-64]	; 0xffffffc0
   148e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   148e4:	bl	1450c <__assert_fail@plt+0x3664>
   148e8:	mov	r3, r0
   148ec:	mov	r0, r3
   148f0:	sub	sp, fp, #4
   148f4:	pop	{fp, pc}
   148f8:	push	{fp, lr}
   148fc:	add	fp, sp, #4
   14900:	sub	sp, sp, #64	; 0x40
   14904:	str	r0, [fp, #-56]	; 0xffffffc8
   14908:	str	r1, [fp, #-60]	; 0xffffffc4
   1490c:	str	r2, [fp, #-64]	; 0xffffffc0
   14910:	str	r3, [fp, #-68]	; 0xffffffbc
   14914:	sub	r3, fp, #52	; 0x34
   14918:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1491c:	mov	r0, r3
   14920:	bl	129b8 <__assert_fail@plt+0x1b10>
   14924:	sub	r3, fp, #52	; 0x34
   14928:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1492c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14930:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14934:	bl	1450c <__assert_fail@plt+0x3664>
   14938:	mov	r3, r0
   1493c:	mov	r0, r3
   14940:	sub	sp, fp, #4
   14944:	pop	{fp, pc}
   14948:	push	{fp, lr}
   1494c:	add	fp, sp, #4
   14950:	sub	sp, sp, #8
   14954:	str	r0, [fp, #-8]
   14958:	str	r1, [fp, #-12]
   1495c:	ldr	r2, [fp, #-12]
   14960:	ldr	r1, [fp, #-8]
   14964:	mov	r0, #0
   14968:	bl	148ac <__assert_fail@plt+0x3a04>
   1496c:	mov	r3, r0
   14970:	mov	r0, r3
   14974:	sub	sp, fp, #4
   14978:	pop	{fp, pc}
   1497c:	push	{fp, lr}
   14980:	add	fp, sp, #4
   14984:	sub	sp, sp, #16
   14988:	str	r0, [fp, #-8]
   1498c:	str	r1, [fp, #-12]
   14990:	str	r2, [fp, #-16]
   14994:	ldr	r3, [fp, #-16]
   14998:	ldr	r2, [fp, #-12]
   1499c:	ldr	r1, [fp, #-8]
   149a0:	mov	r0, #0
   149a4:	bl	148f8 <__assert_fail@plt+0x3a50>
   149a8:	mov	r3, r0
   149ac:	mov	r0, r3
   149b0:	sub	sp, fp, #4
   149b4:	pop	{fp, pc}
   149b8:	push	{fp, lr}
   149bc:	add	fp, sp, #4
   149c0:	sub	sp, sp, #64	; 0x40
   149c4:	str	r0, [fp, #-56]	; 0xffffffc8
   149c8:	str	r1, [fp, #-60]	; 0xffffffc4
   149cc:	mov	r3, r2
   149d0:	strb	r3, [fp, #-61]	; 0xffffffc3
   149d4:	ldr	r3, [pc, #84]	; 14a30 <__assert_fail@plt+0x3b88>
   149d8:	sub	ip, fp, #52	; 0x34
   149dc:	mov	lr, r3
   149e0:	ldm	lr!, {r0, r1, r2, r3}
   149e4:	stmia	ip!, {r0, r1, r2, r3}
   149e8:	ldm	lr!, {r0, r1, r2, r3}
   149ec:	stmia	ip!, {r0, r1, r2, r3}
   149f0:	ldm	lr, {r0, r1, r2, r3}
   149f4:	stm	ip, {r0, r1, r2, r3}
   149f8:	ldrb	r1, [fp, #-61]	; 0xffffffc3
   149fc:	sub	r3, fp, #52	; 0x34
   14a00:	mov	r2, #1
   14a04:	mov	r0, r3
   14a08:	bl	12824 <__assert_fail@plt+0x197c>
   14a0c:	sub	r3, fp, #52	; 0x34
   14a10:	ldr	r2, [fp, #-60]	; 0xffffffc4
   14a14:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14a18:	mov	r0, #0
   14a1c:	bl	1450c <__assert_fail@plt+0x3664>
   14a20:	mov	r3, r0
   14a24:	mov	r0, r3
   14a28:	sub	sp, fp, #4
   14a2c:	pop	{fp, pc}
   14a30:	andeq	sl, r2, r4, ror #2
   14a34:	push	{fp, lr}
   14a38:	add	fp, sp, #4
   14a3c:	sub	sp, sp, #8
   14a40:	str	r0, [fp, #-8]
   14a44:	mov	r3, r1
   14a48:	strb	r3, [fp, #-9]
   14a4c:	ldrb	r3, [fp, #-9]
   14a50:	mov	r2, r3
   14a54:	mvn	r1, #0
   14a58:	ldr	r0, [fp, #-8]
   14a5c:	bl	149b8 <__assert_fail@plt+0x3b10>
   14a60:	mov	r3, r0
   14a64:	mov	r0, r3
   14a68:	sub	sp, fp, #4
   14a6c:	pop	{fp, pc}
   14a70:	push	{fp, lr}
   14a74:	add	fp, sp, #4
   14a78:	sub	sp, sp, #8
   14a7c:	str	r0, [fp, #-8]
   14a80:	mov	r1, #58	; 0x3a
   14a84:	ldr	r0, [fp, #-8]
   14a88:	bl	14a34 <__assert_fail@plt+0x3b8c>
   14a8c:	mov	r3, r0
   14a90:	mov	r0, r3
   14a94:	sub	sp, fp, #4
   14a98:	pop	{fp, pc}
   14a9c:	push	{fp, lr}
   14aa0:	add	fp, sp, #4
   14aa4:	sub	sp, sp, #8
   14aa8:	str	r0, [fp, #-8]
   14aac:	str	r1, [fp, #-12]
   14ab0:	mov	r2, #58	; 0x3a
   14ab4:	ldr	r1, [fp, #-12]
   14ab8:	ldr	r0, [fp, #-8]
   14abc:	bl	149b8 <__assert_fail@plt+0x3b10>
   14ac0:	mov	r3, r0
   14ac4:	mov	r0, r3
   14ac8:	sub	sp, fp, #4
   14acc:	pop	{fp, pc}
   14ad0:	push	{fp, lr}
   14ad4:	add	fp, sp, #4
   14ad8:	sub	sp, sp, #112	; 0x70
   14adc:	str	r0, [fp, #-56]	; 0xffffffc8
   14ae0:	str	r1, [fp, #-60]	; 0xffffffc4
   14ae4:	str	r2, [fp, #-64]	; 0xffffffc0
   14ae8:	sub	r3, fp, #116	; 0x74
   14aec:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14af0:	mov	r0, r3
   14af4:	bl	129b8 <__assert_fail@plt+0x1b10>
   14af8:	sub	ip, fp, #52	; 0x34
   14afc:	sub	lr, fp, #116	; 0x74
   14b00:	ldm	lr!, {r0, r1, r2, r3}
   14b04:	stmia	ip!, {r0, r1, r2, r3}
   14b08:	ldm	lr!, {r0, r1, r2, r3}
   14b0c:	stmia	ip!, {r0, r1, r2, r3}
   14b10:	ldm	lr, {r0, r1, r2, r3}
   14b14:	stm	ip, {r0, r1, r2, r3}
   14b18:	sub	r3, fp, #52	; 0x34
   14b1c:	mov	r2, #1
   14b20:	mov	r1, #58	; 0x3a
   14b24:	mov	r0, r3
   14b28:	bl	12824 <__assert_fail@plt+0x197c>
   14b2c:	sub	r3, fp, #52	; 0x34
   14b30:	mvn	r2, #0
   14b34:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14b38:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14b3c:	bl	1450c <__assert_fail@plt+0x3664>
   14b40:	mov	r3, r0
   14b44:	mov	r0, r3
   14b48:	sub	sp, fp, #4
   14b4c:	pop	{fp, pc}
   14b50:	push	{fp, lr}
   14b54:	add	fp, sp, #4
   14b58:	sub	sp, sp, #24
   14b5c:	str	r0, [fp, #-8]
   14b60:	str	r1, [fp, #-12]
   14b64:	str	r2, [fp, #-16]
   14b68:	str	r3, [fp, #-20]	; 0xffffffec
   14b6c:	mvn	r3, #0
   14b70:	str	r3, [sp]
   14b74:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b78:	ldr	r2, [fp, #-16]
   14b7c:	ldr	r1, [fp, #-12]
   14b80:	ldr	r0, [fp, #-8]
   14b84:	bl	14b98 <__assert_fail@plt+0x3cf0>
   14b88:	mov	r3, r0
   14b8c:	mov	r0, r3
   14b90:	sub	sp, fp, #4
   14b94:	pop	{fp, pc}
   14b98:	push	{fp, lr}
   14b9c:	add	fp, sp, #4
   14ba0:	sub	sp, sp, #64	; 0x40
   14ba4:	str	r0, [fp, #-56]	; 0xffffffc8
   14ba8:	str	r1, [fp, #-60]	; 0xffffffc4
   14bac:	str	r2, [fp, #-64]	; 0xffffffc0
   14bb0:	str	r3, [fp, #-68]	; 0xffffffbc
   14bb4:	ldr	r3, [pc, #84]	; 14c10 <__assert_fail@plt+0x3d68>
   14bb8:	sub	ip, fp, #52	; 0x34
   14bbc:	mov	lr, r3
   14bc0:	ldm	lr!, {r0, r1, r2, r3}
   14bc4:	stmia	ip!, {r0, r1, r2, r3}
   14bc8:	ldm	lr!, {r0, r1, r2, r3}
   14bcc:	stmia	ip!, {r0, r1, r2, r3}
   14bd0:	ldm	lr, {r0, r1, r2, r3}
   14bd4:	stm	ip, {r0, r1, r2, r3}
   14bd8:	sub	r3, fp, #52	; 0x34
   14bdc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   14be0:	ldr	r1, [fp, #-60]	; 0xffffffc4
   14be4:	mov	r0, r3
   14be8:	bl	1293c <__assert_fail@plt+0x1a94>
   14bec:	sub	r3, fp, #52	; 0x34
   14bf0:	ldr	r2, [fp, #4]
   14bf4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   14bf8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   14bfc:	bl	1450c <__assert_fail@plt+0x3664>
   14c00:	mov	r3, r0
   14c04:	mov	r0, r3
   14c08:	sub	sp, fp, #4
   14c0c:	pop	{fp, pc}
   14c10:	andeq	sl, r2, r4, ror #2
   14c14:	push	{fp, lr}
   14c18:	add	fp, sp, #4
   14c1c:	sub	sp, sp, #16
   14c20:	str	r0, [fp, #-8]
   14c24:	str	r1, [fp, #-12]
   14c28:	str	r2, [fp, #-16]
   14c2c:	ldr	r3, [fp, #-16]
   14c30:	ldr	r2, [fp, #-12]
   14c34:	ldr	r1, [fp, #-8]
   14c38:	mov	r0, #0
   14c3c:	bl	14b50 <__assert_fail@plt+0x3ca8>
   14c40:	mov	r3, r0
   14c44:	mov	r0, r3
   14c48:	sub	sp, fp, #4
   14c4c:	pop	{fp, pc}
   14c50:	push	{fp, lr}
   14c54:	add	fp, sp, #4
   14c58:	sub	sp, sp, #24
   14c5c:	str	r0, [fp, #-8]
   14c60:	str	r1, [fp, #-12]
   14c64:	str	r2, [fp, #-16]
   14c68:	str	r3, [fp, #-20]	; 0xffffffec
   14c6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14c70:	str	r3, [sp]
   14c74:	ldr	r3, [fp, #-16]
   14c78:	ldr	r2, [fp, #-12]
   14c7c:	ldr	r1, [fp, #-8]
   14c80:	mov	r0, #0
   14c84:	bl	14b98 <__assert_fail@plt+0x3cf0>
   14c88:	mov	r3, r0
   14c8c:	mov	r0, r3
   14c90:	sub	sp, fp, #4
   14c94:	pop	{fp, pc}
   14c98:	push	{fp, lr}
   14c9c:	add	fp, sp, #4
   14ca0:	sub	sp, sp, #16
   14ca4:	str	r0, [fp, #-8]
   14ca8:	str	r1, [fp, #-12]
   14cac:	str	r2, [fp, #-16]
   14cb0:	ldr	r3, [pc, #28]	; 14cd4 <__assert_fail@plt+0x3e2c>
   14cb4:	ldr	r2, [fp, #-16]
   14cb8:	ldr	r1, [fp, #-12]
   14cbc:	ldr	r0, [fp, #-8]
   14cc0:	bl	1450c <__assert_fail@plt+0x3664>
   14cc4:	mov	r3, r0
   14cc8:	mov	r0, r3
   14ccc:	sub	sp, fp, #4
   14cd0:	pop	{fp, pc}
   14cd4:	andeq	sl, r2, r0, lsl #2
   14cd8:	push	{fp, lr}
   14cdc:	add	fp, sp, #4
   14ce0:	sub	sp, sp, #8
   14ce4:	str	r0, [fp, #-8]
   14ce8:	str	r1, [fp, #-12]
   14cec:	ldr	r2, [fp, #-12]
   14cf0:	ldr	r1, [fp, #-8]
   14cf4:	mov	r0, #0
   14cf8:	bl	14c98 <__assert_fail@plt+0x3df0>
   14cfc:	mov	r3, r0
   14d00:	mov	r0, r3
   14d04:	sub	sp, fp, #4
   14d08:	pop	{fp, pc}
   14d0c:	push	{fp, lr}
   14d10:	add	fp, sp, #4
   14d14:	sub	sp, sp, #8
   14d18:	str	r0, [fp, #-8]
   14d1c:	str	r1, [fp, #-12]
   14d20:	mvn	r2, #0
   14d24:	ldr	r1, [fp, #-12]
   14d28:	ldr	r0, [fp, #-8]
   14d2c:	bl	14c98 <__assert_fail@plt+0x3df0>
   14d30:	mov	r3, r0
   14d34:	mov	r0, r3
   14d38:	sub	sp, fp, #4
   14d3c:	pop	{fp, pc}
   14d40:	push	{fp, lr}
   14d44:	add	fp, sp, #4
   14d48:	sub	sp, sp, #8
   14d4c:	str	r0, [fp, #-8]
   14d50:	ldr	r1, [fp, #-8]
   14d54:	mov	r0, #0
   14d58:	bl	14d0c <__assert_fail@plt+0x3e64>
   14d5c:	mov	r3, r0
   14d60:	mov	r0, r3
   14d64:	sub	sp, fp, #4
   14d68:	pop	{fp, pc}
   14d6c:	push	{r4, r5, r6, r7, fp, lr}
   14d70:	add	fp, sp, #20
   14d74:	sub	sp, sp, #48	; 0x30
   14d78:	str	r0, [fp, #-24]	; 0xffffffe8
   14d7c:	str	r1, [fp, #-28]	; 0xffffffe4
   14d80:	str	r2, [fp, #-32]	; 0xffffffe0
   14d84:	str	r3, [fp, #-36]	; 0xffffffdc
   14d88:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14d8c:	cmp	r3, #0
   14d90:	beq	14db4 <__assert_fail@plt+0x3f0c>
   14d94:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14d98:	str	r3, [sp]
   14d9c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14da0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   14da4:	ldr	r1, [pc, #1260]	; 15298 <__assert_fail@plt+0x43f0>
   14da8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14dac:	bl	10de8 <fprintf@plt>
   14db0:	b	14dc8 <__assert_fail@plt+0x3f20>
   14db4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14db8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14dbc:	ldr	r1, [pc, #1240]	; 1529c <__assert_fail@plt+0x43f4>
   14dc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14dc4:	bl	10de8 <fprintf@plt>
   14dc8:	ldr	r0, [pc, #1232]	; 152a0 <__assert_fail@plt+0x43f8>
   14dcc:	bl	10dc4 <gettext@plt>
   14dd0:	mov	r2, r0
   14dd4:	ldr	r3, [pc, #1224]	; 152a4 <__assert_fail@plt+0x43fc>
   14dd8:	ldr	r1, [pc, #1224]	; 152a8 <__assert_fail@plt+0x4400>
   14ddc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14de0:	bl	10de8 <fprintf@plt>
   14de4:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14de8:	mov	r0, #10
   14dec:	bl	10cd4 <fputc_unlocked@plt>
   14df0:	ldr	r0, [pc, #1204]	; 152ac <__assert_fail@plt+0x4404>
   14df4:	bl	10dc4 <gettext@plt>
   14df8:	mov	r3, r0
   14dfc:	ldr	r2, [pc, #1196]	; 152b0 <__assert_fail@plt+0x4408>
   14e00:	mov	r1, r3
   14e04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e08:	bl	10de8 <fprintf@plt>
   14e0c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14e10:	mov	r0, #10
   14e14:	bl	10cd4 <fputc_unlocked@plt>
   14e18:	ldr	r3, [fp, #8]
   14e1c:	cmp	r3, #9
   14e20:	ldrls	pc, [pc, r3, lsl #2]
   14e24:	b	151e0 <__assert_fail@plt+0x4338>
   14e28:	andeq	r5, r1, r8, lsl #5
   14e2c:	andeq	r4, r1, r0, asr lr
   14e30:	andeq	r4, r1, r4, ror lr
   14e34:	andeq	r4, r1, r0, lsr #29
   14e38:	andeq	r4, r1, r0, ror #29
   14e3c:	andeq	r4, r1, r8, lsr pc
   14e40:	andeq	r4, r1, r0, lsr #31
   14e44:	andeq	r5, r1, r8, lsl r0
   14e48:	andeq	r5, r1, r0, lsr #1
   14e4c:	andeq	r5, r1, r8, lsr r1
   14e50:	ldr	r0, [pc, #1116]	; 152b4 <__assert_fail@plt+0x440c>
   14e54:	bl	10dc4 <gettext@plt>
   14e58:	mov	r1, r0
   14e5c:	ldr	r3, [fp, #4]
   14e60:	ldr	r3, [r3]
   14e64:	mov	r2, r3
   14e68:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e6c:	bl	10de8 <fprintf@plt>
   14e70:	b	1528c <__assert_fail@plt+0x43e4>
   14e74:	ldr	r0, [pc, #1084]	; 152b8 <__assert_fail@plt+0x4410>
   14e78:	bl	10dc4 <gettext@plt>
   14e7c:	mov	r1, r0
   14e80:	ldr	r3, [fp, #4]
   14e84:	ldr	r2, [r3]
   14e88:	ldr	r3, [fp, #4]
   14e8c:	add	r3, r3, #4
   14e90:	ldr	r3, [r3]
   14e94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14e98:	bl	10de8 <fprintf@plt>
   14e9c:	b	1528c <__assert_fail@plt+0x43e4>
   14ea0:	ldr	r0, [pc, #1044]	; 152bc <__assert_fail@plt+0x4414>
   14ea4:	bl	10dc4 <gettext@plt>
   14ea8:	ldr	r3, [fp, #4]
   14eac:	ldr	r2, [r3]
   14eb0:	ldr	r3, [fp, #4]
   14eb4:	add	r3, r3, #4
   14eb8:	ldr	r1, [r3]
   14ebc:	ldr	r3, [fp, #4]
   14ec0:	add	r3, r3, #8
   14ec4:	ldr	r3, [r3]
   14ec8:	str	r3, [sp]
   14ecc:	mov	r3, r1
   14ed0:	mov	r1, r0
   14ed4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14ed8:	bl	10de8 <fprintf@plt>
   14edc:	b	1528c <__assert_fail@plt+0x43e4>
   14ee0:	ldr	r0, [pc, #984]	; 152c0 <__assert_fail@plt+0x4418>
   14ee4:	bl	10dc4 <gettext@plt>
   14ee8:	mov	ip, r0
   14eec:	ldr	r3, [fp, #4]
   14ef0:	ldr	r1, [r3]
   14ef4:	ldr	r3, [fp, #4]
   14ef8:	add	r3, r3, #4
   14efc:	ldr	r0, [r3]
   14f00:	ldr	r3, [fp, #4]
   14f04:	add	r3, r3, #8
   14f08:	ldr	r3, [r3]
   14f0c:	ldr	r2, [fp, #4]
   14f10:	add	r2, r2, #12
   14f14:	ldr	r2, [r2]
   14f18:	str	r2, [sp, #4]
   14f1c:	str	r3, [sp]
   14f20:	mov	r3, r0
   14f24:	mov	r2, r1
   14f28:	mov	r1, ip
   14f2c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14f30:	bl	10de8 <fprintf@plt>
   14f34:	b	1528c <__assert_fail@plt+0x43e4>
   14f38:	ldr	r0, [pc, #900]	; 152c4 <__assert_fail@plt+0x441c>
   14f3c:	bl	10dc4 <gettext@plt>
   14f40:	mov	lr, r0
   14f44:	ldr	r3, [fp, #4]
   14f48:	ldr	r0, [r3]
   14f4c:	ldr	r3, [fp, #4]
   14f50:	add	r3, r3, #4
   14f54:	ldr	ip, [r3]
   14f58:	ldr	r3, [fp, #4]
   14f5c:	add	r3, r3, #8
   14f60:	ldr	r3, [r3]
   14f64:	ldr	r2, [fp, #4]
   14f68:	add	r2, r2, #12
   14f6c:	ldr	r2, [r2]
   14f70:	ldr	r1, [fp, #4]
   14f74:	add	r1, r1, #16
   14f78:	ldr	r1, [r1]
   14f7c:	str	r1, [sp, #8]
   14f80:	str	r2, [sp, #4]
   14f84:	str	r3, [sp]
   14f88:	mov	r3, ip
   14f8c:	mov	r2, r0
   14f90:	mov	r1, lr
   14f94:	ldr	r0, [fp, #-24]	; 0xffffffe8
   14f98:	bl	10de8 <fprintf@plt>
   14f9c:	b	1528c <__assert_fail@plt+0x43e4>
   14fa0:	ldr	r0, [pc, #800]	; 152c8 <__assert_fail@plt+0x4420>
   14fa4:	bl	10dc4 <gettext@plt>
   14fa8:	mov	r4, r0
   14fac:	ldr	r3, [fp, #4]
   14fb0:	ldr	ip, [r3]
   14fb4:	ldr	r3, [fp, #4]
   14fb8:	add	r3, r3, #4
   14fbc:	ldr	lr, [r3]
   14fc0:	ldr	r3, [fp, #4]
   14fc4:	add	r3, r3, #8
   14fc8:	ldr	r3, [r3]
   14fcc:	ldr	r2, [fp, #4]
   14fd0:	add	r2, r2, #12
   14fd4:	ldr	r2, [r2]
   14fd8:	ldr	r1, [fp, #4]
   14fdc:	add	r1, r1, #16
   14fe0:	ldr	r1, [r1]
   14fe4:	ldr	r0, [fp, #4]
   14fe8:	add	r0, r0, #20
   14fec:	ldr	r0, [r0]
   14ff0:	str	r0, [sp, #12]
   14ff4:	str	r1, [sp, #8]
   14ff8:	str	r2, [sp, #4]
   14ffc:	str	r3, [sp]
   15000:	mov	r3, lr
   15004:	mov	r2, ip
   15008:	mov	r1, r4
   1500c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15010:	bl	10de8 <fprintf@plt>
   15014:	b	1528c <__assert_fail@plt+0x43e4>
   15018:	ldr	r0, [pc, #684]	; 152cc <__assert_fail@plt+0x4424>
   1501c:	bl	10dc4 <gettext@plt>
   15020:	mov	r5, r0
   15024:	ldr	r3, [fp, #4]
   15028:	ldr	lr, [r3]
   1502c:	ldr	r3, [fp, #4]
   15030:	add	r3, r3, #4
   15034:	ldr	r4, [r3]
   15038:	ldr	r3, [fp, #4]
   1503c:	add	r3, r3, #8
   15040:	ldr	r3, [r3]
   15044:	ldr	r2, [fp, #4]
   15048:	add	r2, r2, #12
   1504c:	ldr	r2, [r2]
   15050:	ldr	r1, [fp, #4]
   15054:	add	r1, r1, #16
   15058:	ldr	r1, [r1]
   1505c:	ldr	r0, [fp, #4]
   15060:	add	r0, r0, #20
   15064:	ldr	r0, [r0]
   15068:	ldr	ip, [fp, #4]
   1506c:	add	ip, ip, #24
   15070:	ldr	ip, [ip]
   15074:	str	ip, [sp, #16]
   15078:	str	r0, [sp, #12]
   1507c:	str	r1, [sp, #8]
   15080:	str	r2, [sp, #4]
   15084:	str	r3, [sp]
   15088:	mov	r3, r4
   1508c:	mov	r2, lr
   15090:	mov	r1, r5
   15094:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15098:	bl	10de8 <fprintf@plt>
   1509c:	b	1528c <__assert_fail@plt+0x43e4>
   150a0:	ldr	r0, [pc, #552]	; 152d0 <__assert_fail@plt+0x4428>
   150a4:	bl	10dc4 <gettext@plt>
   150a8:	mov	r6, r0
   150ac:	ldr	r3, [fp, #4]
   150b0:	ldr	r4, [r3]
   150b4:	ldr	r3, [fp, #4]
   150b8:	add	r3, r3, #4
   150bc:	ldr	r5, [r3]
   150c0:	ldr	r3, [fp, #4]
   150c4:	add	r3, r3, #8
   150c8:	ldr	r3, [r3]
   150cc:	ldr	r2, [fp, #4]
   150d0:	add	r2, r2, #12
   150d4:	ldr	r2, [r2]
   150d8:	ldr	r1, [fp, #4]
   150dc:	add	r1, r1, #16
   150e0:	ldr	r1, [r1]
   150e4:	ldr	r0, [fp, #4]
   150e8:	add	r0, r0, #20
   150ec:	ldr	r0, [r0]
   150f0:	ldr	ip, [fp, #4]
   150f4:	add	ip, ip, #24
   150f8:	ldr	ip, [ip]
   150fc:	ldr	lr, [fp, #4]
   15100:	add	lr, lr, #28
   15104:	ldr	lr, [lr]
   15108:	str	lr, [sp, #20]
   1510c:	str	ip, [sp, #16]
   15110:	str	r0, [sp, #12]
   15114:	str	r1, [sp, #8]
   15118:	str	r2, [sp, #4]
   1511c:	str	r3, [sp]
   15120:	mov	r3, r5
   15124:	mov	r2, r4
   15128:	mov	r1, r6
   1512c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15130:	bl	10de8 <fprintf@plt>
   15134:	b	1528c <__assert_fail@plt+0x43e4>
   15138:	ldr	r0, [pc, #404]	; 152d4 <__assert_fail@plt+0x442c>
   1513c:	bl	10dc4 <gettext@plt>
   15140:	mov	r7, r0
   15144:	ldr	r3, [fp, #4]
   15148:	ldr	r5, [r3]
   1514c:	ldr	r3, [fp, #4]
   15150:	add	r3, r3, #4
   15154:	ldr	r6, [r3]
   15158:	ldr	r3, [fp, #4]
   1515c:	add	r3, r3, #8
   15160:	ldr	r3, [r3]
   15164:	ldr	r2, [fp, #4]
   15168:	add	r2, r2, #12
   1516c:	ldr	r2, [r2]
   15170:	ldr	r1, [fp, #4]
   15174:	add	r1, r1, #16
   15178:	ldr	r1, [r1]
   1517c:	ldr	r0, [fp, #4]
   15180:	add	r0, r0, #20
   15184:	ldr	r0, [r0]
   15188:	ldr	ip, [fp, #4]
   1518c:	add	ip, ip, #24
   15190:	ldr	ip, [ip]
   15194:	ldr	lr, [fp, #4]
   15198:	add	lr, lr, #28
   1519c:	ldr	lr, [lr]
   151a0:	ldr	r4, [fp, #4]
   151a4:	add	r4, r4, #32
   151a8:	ldr	r4, [r4]
   151ac:	str	r4, [sp, #24]
   151b0:	str	lr, [sp, #20]
   151b4:	str	ip, [sp, #16]
   151b8:	str	r0, [sp, #12]
   151bc:	str	r1, [sp, #8]
   151c0:	str	r2, [sp, #4]
   151c4:	str	r3, [sp]
   151c8:	mov	r3, r6
   151cc:	mov	r2, r5
   151d0:	mov	r1, r7
   151d4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   151d8:	bl	10de8 <fprintf@plt>
   151dc:	b	1528c <__assert_fail@plt+0x43e4>
   151e0:	ldr	r0, [pc, #240]	; 152d8 <__assert_fail@plt+0x4430>
   151e4:	bl	10dc4 <gettext@plt>
   151e8:	mov	r7, r0
   151ec:	ldr	r3, [fp, #4]
   151f0:	ldr	r5, [r3]
   151f4:	ldr	r3, [fp, #4]
   151f8:	add	r3, r3, #4
   151fc:	ldr	r6, [r3]
   15200:	ldr	r3, [fp, #4]
   15204:	add	r3, r3, #8
   15208:	ldr	r3, [r3]
   1520c:	ldr	r2, [fp, #4]
   15210:	add	r2, r2, #12
   15214:	ldr	r2, [r2]
   15218:	ldr	r1, [fp, #4]
   1521c:	add	r1, r1, #16
   15220:	ldr	r1, [r1]
   15224:	ldr	r0, [fp, #4]
   15228:	add	r0, r0, #20
   1522c:	ldr	r0, [r0]
   15230:	ldr	ip, [fp, #4]
   15234:	add	ip, ip, #24
   15238:	ldr	ip, [ip]
   1523c:	ldr	lr, [fp, #4]
   15240:	add	lr, lr, #28
   15244:	ldr	lr, [lr]
   15248:	ldr	r4, [fp, #4]
   1524c:	add	r4, r4, #32
   15250:	ldr	r4, [r4]
   15254:	str	r4, [sp, #24]
   15258:	str	lr, [sp, #20]
   1525c:	str	ip, [sp, #16]
   15260:	str	r0, [sp, #12]
   15264:	str	r1, [sp, #8]
   15268:	str	r2, [sp, #4]
   1526c:	str	r3, [sp]
   15270:	mov	r3, r6
   15274:	mov	r2, r5
   15278:	mov	r1, r7
   1527c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15280:	bl	10de8 <fprintf@plt>
   15284:	b	1528c <__assert_fail@plt+0x43e4>
   15288:	nop			; (mov r0, r0)
   1528c:	nop			; (mov r0, r0)
   15290:	sub	sp, fp, #20
   15294:	pop	{r4, r5, r6, r7, fp, pc}
   15298:	strdeq	r8, [r1], -r0
   1529c:	strdeq	r8, [r1], -ip
   152a0:	andeq	r8, r1, r4, lsl #28
   152a4:	andeq	r0, r0, r6, ror #15
   152a8:	andeq	r9, r1, r4, lsl r1
   152ac:	andeq	r8, r1, r8, lsl #28
   152b0:			; <UNDEFINED> instruction: 0x00018eb4
   152b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   152b8:	andeq	r8, r1, r8, ror #29
   152bc:	andeq	r8, r1, r0, lsl #30
   152c0:	andeq	r8, r1, ip, lsl pc
   152c4:	andeq	r8, r1, ip, lsr pc
   152c8:	andeq	r8, r1, r0, ror #30
   152cc:	andeq	r8, r1, r8, lsl #31
   152d0:			; <UNDEFINED> instruction: 0x00018fb4
   152d4:	andeq	r8, r1, r4, ror #31
   152d8:	andeq	r9, r1, r8, lsl r0
   152dc:	push	{fp, lr}
   152e0:	add	fp, sp, #4
   152e4:	sub	sp, sp, #32
   152e8:	str	r0, [fp, #-16]
   152ec:	str	r1, [fp, #-20]	; 0xffffffec
   152f0:	str	r2, [fp, #-24]	; 0xffffffe8
   152f4:	str	r3, [fp, #-28]	; 0xffffffe4
   152f8:	mov	r3, #0
   152fc:	str	r3, [fp, #-8]
   15300:	b	15310 <__assert_fail@plt+0x4468>
   15304:	ldr	r3, [fp, #-8]
   15308:	add	r3, r3, #1
   1530c:	str	r3, [fp, #-8]
   15310:	ldr	r3, [fp, #-8]
   15314:	lsl	r3, r3, #2
   15318:	ldr	r2, [fp, #4]
   1531c:	add	r3, r2, r3
   15320:	ldr	r3, [r3]
   15324:	cmp	r3, #0
   15328:	bne	15304 <__assert_fail@plt+0x445c>
   1532c:	ldr	r3, [fp, #-8]
   15330:	str	r3, [sp, #4]
   15334:	ldr	r3, [fp, #4]
   15338:	str	r3, [sp]
   1533c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15340:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15344:	ldr	r1, [fp, #-20]	; 0xffffffec
   15348:	ldr	r0, [fp, #-16]
   1534c:	bl	14d6c <__assert_fail@plt+0x3ec4>
   15350:	nop			; (mov r0, r0)
   15354:	sub	sp, fp, #4
   15358:	pop	{fp, pc}
   1535c:	push	{fp, lr}
   15360:	add	fp, sp, #4
   15364:	sub	sp, sp, #72	; 0x48
   15368:	str	r0, [fp, #-56]	; 0xffffffc8
   1536c:	str	r1, [fp, #-60]	; 0xffffffc4
   15370:	str	r2, [fp, #-64]	; 0xffffffc0
   15374:	str	r3, [fp, #-68]	; 0xffffffbc
   15378:	mov	r3, #0
   1537c:	str	r3, [fp, #-8]
   15380:	b	15390 <__assert_fail@plt+0x44e8>
   15384:	ldr	r3, [fp, #-8]
   15388:	add	r3, r3, #1
   1538c:	str	r3, [fp, #-8]
   15390:	ldr	r3, [fp, #-8]
   15394:	cmp	r3, #9
   15398:	bhi	153dc <__assert_fail@plt+0x4534>
   1539c:	ldr	r3, [fp, #4]
   153a0:	add	r2, r3, #4
   153a4:	str	r2, [fp, #4]
   153a8:	ldr	r2, [r3]
   153ac:	ldr	r3, [fp, #-8]
   153b0:	lsl	r3, r3, #2
   153b4:	sub	r1, fp, #4
   153b8:	add	r3, r1, r3
   153bc:	str	r2, [r3, #-44]	; 0xffffffd4
   153c0:	ldr	r3, [fp, #-8]
   153c4:	lsl	r3, r3, #2
   153c8:	sub	r2, fp, #4
   153cc:	add	r3, r2, r3
   153d0:	ldr	r3, [r3, #-44]	; 0xffffffd4
   153d4:	cmp	r3, #0
   153d8:	bne	15384 <__assert_fail@plt+0x44dc>
   153dc:	ldr	r3, [fp, #-8]
   153e0:	str	r3, [sp, #4]
   153e4:	sub	r3, fp, #48	; 0x30
   153e8:	str	r3, [sp]
   153ec:	ldr	r3, [fp, #-68]	; 0xffffffbc
   153f0:	ldr	r2, [fp, #-64]	; 0xffffffc0
   153f4:	ldr	r1, [fp, #-60]	; 0xffffffc4
   153f8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   153fc:	bl	14d6c <__assert_fail@plt+0x3ec4>
   15400:	nop			; (mov r0, r0)
   15404:	sub	sp, fp, #4
   15408:	pop	{fp, pc}
   1540c:	push	{r3}		; (str r3, [sp, #-4]!)
   15410:	push	{fp, lr}
   15414:	add	fp, sp, #4
   15418:	sub	sp, sp, #36	; 0x24
   1541c:	str	r0, [fp, #-20]	; 0xffffffec
   15420:	str	r1, [fp, #-24]	; 0xffffffe8
   15424:	str	r2, [fp, #-28]	; 0xffffffe4
   15428:	add	r3, fp, #8
   1542c:	str	r3, [fp, #-12]
   15430:	ldr	r3, [fp, #-12]
   15434:	str	r3, [sp]
   15438:	ldr	r3, [fp, #4]
   1543c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15440:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15444:	ldr	r0, [fp, #-20]	; 0xffffffec
   15448:	bl	1535c <__assert_fail@plt+0x44b4>
   1544c:	nop			; (mov r0, r0)
   15450:	sub	sp, fp, #4
   15454:	pop	{fp, lr}
   15458:	add	sp, sp, #4
   1545c:	bx	lr
   15460:	push	{fp, lr}
   15464:	add	fp, sp, #4
   15468:	ldr	r3, [pc, #96]	; 154d0 <__assert_fail@plt+0x4628>
   1546c:	ldr	r3, [r3]
   15470:	mov	r1, r3
   15474:	mov	r0, #10
   15478:	bl	10cd4 <fputc_unlocked@plt>
   1547c:	ldr	r0, [pc, #80]	; 154d4 <__assert_fail@plt+0x462c>
   15480:	bl	10dc4 <gettext@plt>
   15484:	mov	r3, r0
   15488:	ldr	r1, [pc, #72]	; 154d8 <__assert_fail@plt+0x4630>
   1548c:	mov	r0, r3
   15490:	bl	10c74 <printf@plt>
   15494:	ldr	r0, [pc, #64]	; 154dc <__assert_fail@plt+0x4634>
   15498:	bl	10dc4 <gettext@plt>
   1549c:	mov	r3, r0
   154a0:	ldr	r2, [pc, #56]	; 154e0 <__assert_fail@plt+0x4638>
   154a4:	ldr	r1, [pc, #56]	; 154e4 <__assert_fail@plt+0x463c>
   154a8:	mov	r0, r3
   154ac:	bl	10c74 <printf@plt>
   154b0:	ldr	r0, [pc, #48]	; 154e8 <__assert_fail@plt+0x4640>
   154b4:	bl	10dc4 <gettext@plt>
   154b8:	mov	r3, r0
   154bc:	ldr	r1, [pc, #40]	; 154ec <__assert_fail@plt+0x4644>
   154c0:	mov	r0, r3
   154c4:	bl	10c74 <printf@plt>
   154c8:	nop			; (mov r0, r0)
   154cc:	pop	{fp, pc}
   154d0:	andeq	sl, r2, r4, asr #2
   154d4:	andeq	r9, r1, r4, asr r0
   154d8:	andeq	r9, r1, r8, rrx
   154dc:	andeq	r9, r1, r0, lsl #1
   154e0:	muleq	r1, r4, r0
   154e4:	strheq	r9, [r1], -ip
   154e8:	andeq	r9, r1, ip, asr #1
   154ec:	strdeq	r9, [r1], -r4
   154f0:	push	{fp, lr}
   154f4:	add	fp, sp, #4
   154f8:	sub	sp, sp, #16
   154fc:	str	r0, [fp, #-8]
   15500:	str	r1, [fp, #-12]
   15504:	str	r2, [fp, #-16]
   15508:	ldr	r2, [fp, #-16]
   1550c:	ldr	r1, [fp, #-12]
   15510:	ldr	r0, [fp, #-8]
   15514:	bl	15680 <__assert_fail@plt+0x47d8>
   15518:	mov	r3, r0
   1551c:	mov	r0, r3
   15520:	sub	sp, fp, #4
   15524:	pop	{fp, pc}
   15528:	push	{fp, lr}
   1552c:	add	fp, sp, #4
   15530:	sub	sp, sp, #8
   15534:	str	r0, [fp, #-8]
   15538:	ldr	r3, [fp, #-8]
   1553c:	cmp	r3, #0
   15540:	bne	15548 <__assert_fail@plt+0x46a0>
   15544:	bl	16074 <__assert_fail@plt+0x51cc>
   15548:	ldr	r3, [fp, #-8]
   1554c:	mov	r0, r3
   15550:	sub	sp, fp, #4
   15554:	pop	{fp, pc}
   15558:	push	{fp, lr}
   1555c:	add	fp, sp, #4
   15560:	sub	sp, sp, #8
   15564:	str	r0, [fp, #-8]
   15568:	ldr	r0, [fp, #-8]
   1556c:	bl	16c7c <__assert_fail@plt+0x5dd4>
   15570:	mov	r3, r0
   15574:	mov	r0, r3
   15578:	bl	15528 <__assert_fail@plt+0x4680>
   1557c:	mov	r3, r0
   15580:	mov	r0, r3
   15584:	sub	sp, fp, #4
   15588:	pop	{fp, pc}
   1558c:	push	{fp, lr}
   15590:	add	fp, sp, #4
   15594:	sub	sp, sp, #8
   15598:	str	r0, [fp, #-8]
   1559c:	ldr	r0, [fp, #-8]
   155a0:	bl	17298 <__assert_fail@plt+0x63f0>
   155a4:	mov	r3, r0
   155a8:	mov	r0, r3
   155ac:	bl	15528 <__assert_fail@plt+0x4680>
   155b0:	mov	r3, r0
   155b4:	mov	r0, r3
   155b8:	sub	sp, fp, #4
   155bc:	pop	{fp, pc}
   155c0:	push	{fp, lr}
   155c4:	add	fp, sp, #4
   155c8:	sub	sp, sp, #8
   155cc:	str	r0, [fp, #-8]
   155d0:	ldr	r0, [fp, #-8]
   155d4:	bl	15558 <__assert_fail@plt+0x46b0>
   155d8:	mov	r3, r0
   155dc:	mov	r0, r3
   155e0:	sub	sp, fp, #4
   155e4:	pop	{fp, pc}
   155e8:	push	{fp, lr}
   155ec:	add	fp, sp, #4
   155f0:	sub	sp, sp, #16
   155f4:	str	r0, [fp, #-16]
   155f8:	str	r1, [fp, #-20]	; 0xffffffec
   155fc:	ldr	r1, [fp, #-20]	; 0xffffffec
   15600:	ldr	r0, [fp, #-16]
   15604:	bl	16d24 <__assert_fail@plt+0x5e7c>
   15608:	str	r0, [fp, #-8]
   1560c:	ldr	r3, [fp, #-8]
   15610:	cmp	r3, #0
   15614:	bne	15634 <__assert_fail@plt+0x478c>
   15618:	ldr	r3, [fp, #-16]
   1561c:	cmp	r3, #0
   15620:	beq	15630 <__assert_fail@plt+0x4788>
   15624:	ldr	r3, [fp, #-20]	; 0xffffffec
   15628:	cmp	r3, #0
   1562c:	beq	15634 <__assert_fail@plt+0x478c>
   15630:	bl	16074 <__assert_fail@plt+0x51cc>
   15634:	ldr	r3, [fp, #-8]
   15638:	mov	r0, r3
   1563c:	sub	sp, fp, #4
   15640:	pop	{fp, pc}
   15644:	push	{fp, lr}
   15648:	add	fp, sp, #4
   1564c:	sub	sp, sp, #8
   15650:	str	r0, [fp, #-8]
   15654:	str	r1, [fp, #-12]
   15658:	ldr	r1, [fp, #-12]
   1565c:	ldr	r0, [fp, #-8]
   15660:	bl	172c4 <__assert_fail@plt+0x641c>
   15664:	mov	r3, r0
   15668:	mov	r0, r3
   1566c:	bl	15528 <__assert_fail@plt+0x4680>
   15670:	mov	r3, r0
   15674:	mov	r0, r3
   15678:	sub	sp, fp, #4
   1567c:	pop	{fp, pc}
   15680:	push	{fp, lr}
   15684:	add	fp, sp, #4
   15688:	sub	sp, sp, #24
   1568c:	str	r0, [fp, #-16]
   15690:	str	r1, [fp, #-20]	; 0xffffffec
   15694:	str	r2, [fp, #-24]	; 0xffffffe8
   15698:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1569c:	ldr	r1, [fp, #-20]	; 0xffffffec
   156a0:	ldr	r0, [fp, #-16]
   156a4:	bl	174b8 <__assert_fail@plt+0x6610>
   156a8:	str	r0, [fp, #-8]
   156ac:	ldr	r3, [fp, #-8]
   156b0:	cmp	r3, #0
   156b4:	bne	156e0 <__assert_fail@plt+0x4838>
   156b8:	ldr	r3, [fp, #-16]
   156bc:	cmp	r3, #0
   156c0:	beq	156dc <__assert_fail@plt+0x4834>
   156c4:	ldr	r3, [fp, #-20]	; 0xffffffec
   156c8:	cmp	r3, #0
   156cc:	beq	156e0 <__assert_fail@plt+0x4838>
   156d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   156d4:	cmp	r3, #0
   156d8:	beq	156e0 <__assert_fail@plt+0x4838>
   156dc:	bl	16074 <__assert_fail@plt+0x51cc>
   156e0:	ldr	r3, [fp, #-8]
   156e4:	mov	r0, r3
   156e8:	sub	sp, fp, #4
   156ec:	pop	{fp, pc}
   156f0:	push	{fp, lr}
   156f4:	add	fp, sp, #4
   156f8:	sub	sp, sp, #16
   156fc:	str	r0, [fp, #-8]
   15700:	str	r1, [fp, #-12]
   15704:	str	r2, [fp, #-16]
   15708:	ldr	r2, [fp, #-16]
   1570c:	ldr	r1, [fp, #-12]
   15710:	ldr	r0, [fp, #-8]
   15714:	bl	1734c <__assert_fail@plt+0x64a4>
   15718:	mov	r3, r0
   1571c:	mov	r0, r3
   15720:	bl	15528 <__assert_fail@plt+0x4680>
   15724:	mov	r3, r0
   15728:	mov	r0, r3
   1572c:	sub	sp, fp, #4
   15730:	pop	{fp, pc}
   15734:	push	{fp, lr}
   15738:	add	fp, sp, #4
   1573c:	sub	sp, sp, #8
   15740:	str	r0, [fp, #-8]
   15744:	str	r1, [fp, #-12]
   15748:	ldr	r2, [fp, #-12]
   1574c:	ldr	r1, [fp, #-8]
   15750:	mov	r0, #0
   15754:	bl	15680 <__assert_fail@plt+0x47d8>
   15758:	mov	r3, r0
   1575c:	mov	r0, r3
   15760:	sub	sp, fp, #4
   15764:	pop	{fp, pc}
   15768:	push	{fp, lr}
   1576c:	add	fp, sp, #4
   15770:	sub	sp, sp, #8
   15774:	str	r0, [fp, #-8]
   15778:	str	r1, [fp, #-12]
   1577c:	ldr	r2, [fp, #-12]
   15780:	ldr	r1, [fp, #-8]
   15784:	mov	r0, #0
   15788:	bl	156f0 <__assert_fail@plt+0x4848>
   1578c:	mov	r3, r0
   15790:	mov	r0, r3
   15794:	sub	sp, fp, #4
   15798:	pop	{fp, pc}
   1579c:	push	{fp, lr}
   157a0:	add	fp, sp, #4
   157a4:	sub	sp, sp, #8
   157a8:	str	r0, [fp, #-8]
   157ac:	str	r1, [fp, #-12]
   157b0:	mov	r2, #1
   157b4:	ldr	r1, [fp, #-12]
   157b8:	ldr	r0, [fp, #-8]
   157bc:	bl	157d0 <__assert_fail@plt+0x4928>
   157c0:	mov	r3, r0
   157c4:	mov	r0, r3
   157c8:	sub	sp, fp, #4
   157cc:	pop	{fp, pc}
   157d0:	push	{fp, lr}
   157d4:	add	fp, sp, #4
   157d8:	sub	sp, sp, #24
   157dc:	str	r0, [fp, #-16]
   157e0:	str	r1, [fp, #-20]	; 0xffffffec
   157e4:	str	r2, [fp, #-24]	; 0xffffffe8
   157e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   157ec:	ldr	r3, [r3]
   157f0:	str	r3, [fp, #-8]
   157f4:	ldr	r3, [fp, #-16]
   157f8:	cmp	r3, #0
   157fc:	bne	15848 <__assert_fail@plt+0x49a0>
   15800:	ldr	r3, [fp, #-8]
   15804:	cmp	r3, #0
   15808:	bne	158ac <__assert_fail@plt+0x4a04>
   1580c:	ldr	r1, [fp, #-24]	; 0xffffffe8
   15810:	mov	r0, #64	; 0x40
   15814:	bl	17c60 <__assert_fail@plt+0x6db8>
   15818:	mov	r3, r0
   1581c:	str	r3, [fp, #-8]
   15820:	ldr	r3, [fp, #-8]
   15824:	cmp	r3, #0
   15828:	moveq	r3, #1
   1582c:	movne	r3, #0
   15830:	uxtb	r3, r3
   15834:	mov	r2, r3
   15838:	ldr	r3, [fp, #-8]
   1583c:	add	r3, r2, r3
   15840:	str	r3, [fp, #-8]
   15844:	b	158ac <__assert_fail@plt+0x4a04>
   15848:	ldr	r3, [fp, #-8]
   1584c:	lsr	r3, r3, #1
   15850:	add	r3, r3, #1
   15854:	mvn	r2, r3
   15858:	ldr	r3, [fp, #-8]
   1585c:	cmp	r2, r3
   15860:	bcs	15884 <__assert_fail@plt+0x49dc>
   15864:	ldr	r3, [fp, #-8]
   15868:	lsr	r2, r3, #1
   1586c:	ldr	r3, [fp, #-8]
   15870:	add	r3, r2, r3
   15874:	add	r3, r3, #1
   15878:	str	r3, [fp, #-8]
   1587c:	mov	r3, #1
   15880:	b	158a0 <__assert_fail@plt+0x49f8>
   15884:	ldr	r3, [fp, #-8]
   15888:	lsr	r2, r3, #1
   1588c:	ldr	r3, [fp, #-8]
   15890:	add	r3, r2, r3
   15894:	add	r3, r3, #1
   15898:	str	r3, [fp, #-8]
   1589c:	mov	r3, #0
   158a0:	cmp	r3, #0
   158a4:	beq	158ac <__assert_fail@plt+0x4a04>
   158a8:	bl	16074 <__assert_fail@plt+0x51cc>
   158ac:	ldr	r3, [fp, #-8]
   158b0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   158b4:	mov	r1, r3
   158b8:	ldr	r0, [fp, #-16]
   158bc:	bl	15680 <__assert_fail@plt+0x47d8>
   158c0:	str	r0, [fp, #-16]
   158c4:	ldr	r2, [fp, #-8]
   158c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   158cc:	str	r2, [r3]
   158d0:	ldr	r3, [fp, #-16]
   158d4:	mov	r0, r3
   158d8:	sub	sp, fp, #4
   158dc:	pop	{fp, pc}
   158e0:	push	{fp, lr}
   158e4:	add	fp, sp, #4
   158e8:	sub	sp, sp, #32
   158ec:	str	r0, [fp, #-24]	; 0xffffffe8
   158f0:	str	r1, [fp, #-28]	; 0xffffffe4
   158f4:	str	r2, [fp, #-32]	; 0xffffffe0
   158f8:	str	r3, [fp, #-36]	; 0xffffffdc
   158fc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15900:	ldr	r3, [r3]
   15904:	str	r3, [fp, #-8]
   15908:	ldr	r3, [fp, #-8]
   1590c:	asr	r3, r3, #1
   15910:	cmp	r3, #0
   15914:	bge	1593c <__assert_fail@plt+0x4a94>
   15918:	ldr	r3, [fp, #-8]
   1591c:	asr	r3, r3, #1
   15920:	rsb	r2, r3, #-2147483648	; 0x80000000
   15924:	ldr	r3, [fp, #-8]
   15928:	cmp	r2, r3
   1592c:	movgt	r3, #1
   15930:	movle	r3, #0
   15934:	uxtb	r3, r3
   15938:	b	15990 <__assert_fail@plt+0x4ae8>
   1593c:	ldr	r3, [fp, #-8]
   15940:	cmp	r3, #0
   15944:	bge	1596c <__assert_fail@plt+0x4ac4>
   15948:	ldr	r3, [fp, #-8]
   1594c:	asr	r2, r3, #1
   15950:	ldr	r3, [fp, #-8]
   15954:	rsb	r3, r3, #-2147483648	; 0x80000000
   15958:	cmp	r2, r3
   1595c:	movlt	r3, #1
   15960:	movge	r3, #0
   15964:	uxtb	r3, r3
   15968:	b	15990 <__assert_fail@plt+0x4ae8>
   1596c:	ldr	r3, [fp, #-8]
   15970:	asr	r2, r3, #1
   15974:	mvn	r3, #-2147483648	; 0x80000000
   15978:	sub	r3, r3, r2
   1597c:	ldr	r2, [fp, #-8]
   15980:	cmp	r3, r2
   15984:	movlt	r3, #1
   15988:	movge	r3, #0
   1598c:	uxtb	r3, r3
   15990:	cmp	r3, #0
   15994:	beq	159b8 <__assert_fail@plt+0x4b10>
   15998:	ldr	r3, [fp, #-8]
   1599c:	asr	r3, r3, #1
   159a0:	mov	r2, r3
   159a4:	ldr	r3, [fp, #-8]
   159a8:	add	r3, r2, r3
   159ac:	str	r3, [fp, #-16]
   159b0:	mov	r3, #1
   159b4:	b	159d4 <__assert_fail@plt+0x4b2c>
   159b8:	ldr	r3, [fp, #-8]
   159bc:	asr	r3, r3, #1
   159c0:	mov	r2, r3
   159c4:	ldr	r3, [fp, #-8]
   159c8:	add	r3, r2, r3
   159cc:	str	r3, [fp, #-16]
   159d0:	mov	r3, #0
   159d4:	cmp	r3, #0
   159d8:	beq	159e4 <__assert_fail@plt+0x4b3c>
   159dc:	mvn	r3, #-2147483648	; 0x80000000
   159e0:	str	r3, [fp, #-16]
   159e4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   159e8:	cmp	r3, #0
   159ec:	blt	15a08 <__assert_fail@plt+0x4b60>
   159f0:	ldr	r3, [fp, #-16]
   159f4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   159f8:	cmp	r2, r3
   159fc:	bge	15a08 <__assert_fail@plt+0x4b60>
   15a00:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a04:	str	r3, [fp, #-16]
   15a08:	ldr	r3, [fp, #4]
   15a0c:	cmp	r3, #0
   15a10:	bge	15aa0 <__assert_fail@plt+0x4bf8>
   15a14:	ldr	r3, [fp, #-16]
   15a18:	cmp	r3, #0
   15a1c:	bge	15a4c <__assert_fail@plt+0x4ba4>
   15a20:	ldr	r1, [fp, #4]
   15a24:	mvn	r0, #-2147483648	; 0x80000000
   15a28:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15a2c:	mov	r3, r0
   15a30:	mov	r2, r3
   15a34:	ldr	r3, [fp, #-16]
   15a38:	cmp	r2, r3
   15a3c:	movgt	r3, #1
   15a40:	movle	r3, #0
   15a44:	uxtb	r3, r3
   15a48:	b	15b40 <__assert_fail@plt+0x4c98>
   15a4c:	ldr	r3, [fp, #4]
   15a50:	cmn	r3, #1
   15a54:	bne	15a74 <__assert_fail@plt+0x4bcc>
   15a58:	ldr	r3, [fp, #-16]
   15a5c:	add	r3, r3, #-2147483648	; 0x80000000
   15a60:	cmp	r3, #0
   15a64:	movgt	r3, #1
   15a68:	movle	r3, #0
   15a6c:	uxtb	r3, r3
   15a70:	b	15b40 <__assert_fail@plt+0x4c98>
   15a74:	ldr	r1, [fp, #4]
   15a78:	mov	r0, #-2147483648	; 0x80000000
   15a7c:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15a80:	mov	r3, r0
   15a84:	mov	r2, r3
   15a88:	ldr	r3, [fp, #-16]
   15a8c:	cmp	r2, r3
   15a90:	movlt	r3, #1
   15a94:	movge	r3, #0
   15a98:	uxtb	r3, r3
   15a9c:	b	15b40 <__assert_fail@plt+0x4c98>
   15aa0:	ldr	r3, [fp, #4]
   15aa4:	cmp	r3, #0
   15aa8:	beq	15b3c <__assert_fail@plt+0x4c94>
   15aac:	ldr	r3, [fp, #-16]
   15ab0:	cmp	r3, #0
   15ab4:	bge	15b10 <__assert_fail@plt+0x4c68>
   15ab8:	ldr	r3, [fp, #-16]
   15abc:	cmn	r3, #1
   15ac0:	bne	15ae0 <__assert_fail@plt+0x4c38>
   15ac4:	ldr	r3, [fp, #4]
   15ac8:	add	r3, r3, #-2147483648	; 0x80000000
   15acc:	cmp	r3, #0
   15ad0:	movgt	r3, #1
   15ad4:	movle	r3, #0
   15ad8:	uxtb	r3, r3
   15adc:	b	15b40 <__assert_fail@plt+0x4c98>
   15ae0:	ldr	r3, [fp, #-16]
   15ae4:	mov	r1, r3
   15ae8:	mov	r0, #-2147483648	; 0x80000000
   15aec:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15af0:	mov	r3, r0
   15af4:	mov	r2, r3
   15af8:	ldr	r3, [fp, #4]
   15afc:	cmp	r2, r3
   15b00:	movlt	r3, #1
   15b04:	movge	r3, #0
   15b08:	uxtb	r3, r3
   15b0c:	b	15b40 <__assert_fail@plt+0x4c98>
   15b10:	ldr	r1, [fp, #4]
   15b14:	mvn	r0, #-2147483648	; 0x80000000
   15b18:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15b1c:	mov	r3, r0
   15b20:	mov	r2, r3
   15b24:	ldr	r3, [fp, #-16]
   15b28:	cmp	r2, r3
   15b2c:	movlt	r3, #1
   15b30:	movge	r3, #0
   15b34:	uxtb	r3, r3
   15b38:	b	15b40 <__assert_fail@plt+0x4c98>
   15b3c:	mov	r3, #0
   15b40:	cmp	r3, #0
   15b44:	beq	15b64 <__assert_fail@plt+0x4cbc>
   15b48:	ldr	r3, [fp, #-16]
   15b4c:	mov	r2, r3
   15b50:	ldr	r3, [fp, #4]
   15b54:	mul	r3, r3, r2
   15b58:	str	r3, [fp, #-20]	; 0xffffffec
   15b5c:	mov	r3, #1
   15b60:	b	15b7c <__assert_fail@plt+0x4cd4>
   15b64:	ldr	r3, [fp, #-16]
   15b68:	mov	r2, r3
   15b6c:	ldr	r3, [fp, #4]
   15b70:	mul	r3, r3, r2
   15b74:	str	r3, [fp, #-20]	; 0xffffffec
   15b78:	mov	r3, #0
   15b7c:	cmp	r3, #0
   15b80:	beq	15b8c <__assert_fail@plt+0x4ce4>
   15b84:	mvn	r3, #-2147483648	; 0x80000000
   15b88:	b	15ba4 <__assert_fail@plt+0x4cfc>
   15b8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15b90:	cmp	r3, #63	; 0x3f
   15b94:	bgt	15ba0 <__assert_fail@plt+0x4cf8>
   15b98:	mov	r3, #64	; 0x40
   15b9c:	b	15ba4 <__assert_fail@plt+0x4cfc>
   15ba0:	mov	r3, #0
   15ba4:	str	r3, [fp, #-12]
   15ba8:	ldr	r3, [fp, #-12]
   15bac:	cmp	r3, #0
   15bb0:	beq	15bec <__assert_fail@plt+0x4d44>
   15bb4:	ldr	r1, [fp, #4]
   15bb8:	ldr	r0, [fp, #-12]
   15bbc:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15bc0:	mov	r3, r0
   15bc4:	str	r3, [fp, #-16]
   15bc8:	ldr	r3, [fp, #-12]
   15bcc:	ldr	r1, [fp, #4]
   15bd0:	mov	r0, r3
   15bd4:	bl	1808c <__assert_fail@plt+0x71e4>
   15bd8:	mov	r3, r1
   15bdc:	mov	r2, r3
   15be0:	ldr	r3, [fp, #-12]
   15be4:	sub	r3, r3, r2
   15be8:	str	r3, [fp, #-20]	; 0xffffffec
   15bec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15bf0:	cmp	r3, #0
   15bf4:	bne	15c04 <__assert_fail@plt+0x4d5c>
   15bf8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15bfc:	mov	r2, #0
   15c00:	str	r2, [r3]
   15c04:	ldr	r2, [fp, #-16]
   15c08:	ldr	r3, [fp, #-8]
   15c0c:	sub	r2, r2, r3
   15c10:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c14:	cmp	r2, r3
   15c18:	bge	15e50 <__assert_fail@plt+0x4fa8>
   15c1c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c20:	cmp	r3, #0
   15c24:	bge	15c48 <__assert_fail@plt+0x4da0>
   15c28:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c2c:	rsb	r2, r3, #-2147483648	; 0x80000000
   15c30:	ldr	r3, [fp, #-8]
   15c34:	cmp	r2, r3
   15c38:	movgt	r3, #1
   15c3c:	movle	r3, #0
   15c40:	uxtb	r3, r3
   15c44:	b	15c94 <__assert_fail@plt+0x4dec>
   15c48:	ldr	r3, [fp, #-8]
   15c4c:	cmp	r3, #0
   15c50:	bge	15c74 <__assert_fail@plt+0x4dcc>
   15c54:	ldr	r3, [fp, #-8]
   15c58:	rsb	r2, r3, #-2147483648	; 0x80000000
   15c5c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15c60:	cmp	r2, r3
   15c64:	movgt	r3, #1
   15c68:	movle	r3, #0
   15c6c:	uxtb	r3, r3
   15c70:	b	15c94 <__assert_fail@plt+0x4dec>
   15c74:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15c78:	mvn	r3, #-2147483648	; 0x80000000
   15c7c:	sub	r3, r3, r2
   15c80:	ldr	r2, [fp, #-8]
   15c84:	cmp	r3, r2
   15c88:	movlt	r3, #1
   15c8c:	movge	r3, #0
   15c90:	uxtb	r3, r3
   15c94:	cmp	r3, #0
   15c98:	beq	15cb0 <__assert_fail@plt+0x4e08>
   15c9c:	ldr	r2, [fp, #-8]
   15ca0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15ca4:	add	r3, r2, r3
   15ca8:	str	r3, [fp, #-16]
   15cac:	b	15e4c <__assert_fail@plt+0x4fa4>
   15cb0:	ldr	r2, [fp, #-8]
   15cb4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15cb8:	add	r3, r2, r3
   15cbc:	str	r3, [fp, #-16]
   15cc0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15cc4:	cmp	r3, #0
   15cc8:	blt	15cdc <__assert_fail@plt+0x4e34>
   15ccc:	ldr	r3, [fp, #-16]
   15cd0:	ldr	r2, [fp, #-36]	; 0xffffffdc
   15cd4:	cmp	r2, r3
   15cd8:	blt	15e4c <__assert_fail@plt+0x4fa4>
   15cdc:	ldr	r3, [fp, #4]
   15ce0:	cmp	r3, #0
   15ce4:	bge	15d74 <__assert_fail@plt+0x4ecc>
   15ce8:	ldr	r3, [fp, #-16]
   15cec:	cmp	r3, #0
   15cf0:	bge	15d20 <__assert_fail@plt+0x4e78>
   15cf4:	ldr	r1, [fp, #4]
   15cf8:	mvn	r0, #-2147483648	; 0x80000000
   15cfc:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15d00:	mov	r3, r0
   15d04:	mov	r2, r3
   15d08:	ldr	r3, [fp, #-16]
   15d0c:	cmp	r2, r3
   15d10:	movgt	r3, #1
   15d14:	movle	r3, #0
   15d18:	uxtb	r3, r3
   15d1c:	b	15e14 <__assert_fail@plt+0x4f6c>
   15d20:	ldr	r3, [fp, #4]
   15d24:	cmn	r3, #1
   15d28:	bne	15d48 <__assert_fail@plt+0x4ea0>
   15d2c:	ldr	r3, [fp, #-16]
   15d30:	add	r3, r3, #-2147483648	; 0x80000000
   15d34:	cmp	r3, #0
   15d38:	movgt	r3, #1
   15d3c:	movle	r3, #0
   15d40:	uxtb	r3, r3
   15d44:	b	15e14 <__assert_fail@plt+0x4f6c>
   15d48:	ldr	r1, [fp, #4]
   15d4c:	mov	r0, #-2147483648	; 0x80000000
   15d50:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15d54:	mov	r3, r0
   15d58:	mov	r2, r3
   15d5c:	ldr	r3, [fp, #-16]
   15d60:	cmp	r2, r3
   15d64:	movlt	r3, #1
   15d68:	movge	r3, #0
   15d6c:	uxtb	r3, r3
   15d70:	b	15e14 <__assert_fail@plt+0x4f6c>
   15d74:	ldr	r3, [fp, #4]
   15d78:	cmp	r3, #0
   15d7c:	beq	15e10 <__assert_fail@plt+0x4f68>
   15d80:	ldr	r3, [fp, #-16]
   15d84:	cmp	r3, #0
   15d88:	bge	15de4 <__assert_fail@plt+0x4f3c>
   15d8c:	ldr	r3, [fp, #-16]
   15d90:	cmn	r3, #1
   15d94:	bne	15db4 <__assert_fail@plt+0x4f0c>
   15d98:	ldr	r3, [fp, #4]
   15d9c:	add	r3, r3, #-2147483648	; 0x80000000
   15da0:	cmp	r3, #0
   15da4:	movgt	r3, #1
   15da8:	movle	r3, #0
   15dac:	uxtb	r3, r3
   15db0:	b	15e14 <__assert_fail@plt+0x4f6c>
   15db4:	ldr	r3, [fp, #-16]
   15db8:	mov	r1, r3
   15dbc:	mov	r0, #-2147483648	; 0x80000000
   15dc0:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15dc4:	mov	r3, r0
   15dc8:	mov	r2, r3
   15dcc:	ldr	r3, [fp, #4]
   15dd0:	cmp	r2, r3
   15dd4:	movlt	r3, #1
   15dd8:	movge	r3, #0
   15ddc:	uxtb	r3, r3
   15de0:	b	15e14 <__assert_fail@plt+0x4f6c>
   15de4:	ldr	r1, [fp, #4]
   15de8:	mvn	r0, #-2147483648	; 0x80000000
   15dec:	bl	17e6c <__assert_fail@plt+0x6fc4>
   15df0:	mov	r3, r0
   15df4:	mov	r2, r3
   15df8:	ldr	r3, [fp, #-16]
   15dfc:	cmp	r2, r3
   15e00:	movlt	r3, #1
   15e04:	movge	r3, #0
   15e08:	uxtb	r3, r3
   15e0c:	b	15e14 <__assert_fail@plt+0x4f6c>
   15e10:	mov	r3, #0
   15e14:	cmp	r3, #0
   15e18:	beq	15e34 <__assert_fail@plt+0x4f8c>
   15e1c:	ldr	r3, [fp, #-16]
   15e20:	mov	r2, r3
   15e24:	ldr	r3, [fp, #4]
   15e28:	mul	r3, r3, r2
   15e2c:	str	r3, [fp, #-20]	; 0xffffffec
   15e30:	b	15e4c <__assert_fail@plt+0x4fa4>
   15e34:	ldr	r3, [fp, #-16]
   15e38:	mov	r2, r3
   15e3c:	ldr	r3, [fp, #4]
   15e40:	mul	r3, r3, r2
   15e44:	str	r3, [fp, #-20]	; 0xffffffec
   15e48:	b	15e50 <__assert_fail@plt+0x4fa8>
   15e4c:	bl	16074 <__assert_fail@plt+0x51cc>
   15e50:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e54:	mov	r1, r3
   15e58:	ldr	r0, [fp, #-24]	; 0xffffffe8
   15e5c:	bl	155e8 <__assert_fail@plt+0x4740>
   15e60:	str	r0, [fp, #-24]	; 0xffffffe8
   15e64:	ldr	r2, [fp, #-16]
   15e68:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15e6c:	str	r2, [r3]
   15e70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15e74:	mov	r0, r3
   15e78:	sub	sp, fp, #4
   15e7c:	pop	{fp, pc}
   15e80:	push	{fp, lr}
   15e84:	add	fp, sp, #4
   15e88:	sub	sp, sp, #8
   15e8c:	str	r0, [fp, #-8]
   15e90:	mov	r1, #1
   15e94:	ldr	r0, [fp, #-8]
   15e98:	bl	15ed8 <__assert_fail@plt+0x5030>
   15e9c:	mov	r3, r0
   15ea0:	mov	r0, r3
   15ea4:	sub	sp, fp, #4
   15ea8:	pop	{fp, pc}
   15eac:	push	{fp, lr}
   15eb0:	add	fp, sp, #4
   15eb4:	sub	sp, sp, #8
   15eb8:	str	r0, [fp, #-8]
   15ebc:	mov	r1, #1
   15ec0:	ldr	r0, [fp, #-8]
   15ec4:	bl	15f14 <__assert_fail@plt+0x506c>
   15ec8:	mov	r3, r0
   15ecc:	mov	r0, r3
   15ed0:	sub	sp, fp, #4
   15ed4:	pop	{fp, pc}
   15ed8:	push	{fp, lr}
   15edc:	add	fp, sp, #4
   15ee0:	sub	sp, sp, #8
   15ee4:	str	r0, [fp, #-8]
   15ee8:	str	r1, [fp, #-12]
   15eec:	ldr	r1, [fp, #-12]
   15ef0:	ldr	r0, [fp, #-8]
   15ef4:	bl	16bb8 <__assert_fail@plt+0x5d10>
   15ef8:	mov	r3, r0
   15efc:	mov	r0, r3
   15f00:	bl	15528 <__assert_fail@plt+0x4680>
   15f04:	mov	r3, r0
   15f08:	mov	r0, r3
   15f0c:	sub	sp, fp, #4
   15f10:	pop	{fp, pc}
   15f14:	push	{fp, lr}
   15f18:	add	fp, sp, #4
   15f1c:	sub	sp, sp, #8
   15f20:	str	r0, [fp, #-8]
   15f24:	str	r1, [fp, #-12]
   15f28:	ldr	r1, [fp, #-12]
   15f2c:	ldr	r0, [fp, #-8]
   15f30:	bl	17314 <__assert_fail@plt+0x646c>
   15f34:	mov	r3, r0
   15f38:	mov	r0, r3
   15f3c:	bl	15528 <__assert_fail@plt+0x4680>
   15f40:	mov	r3, r0
   15f44:	mov	r0, r3
   15f48:	sub	sp, fp, #4
   15f4c:	pop	{fp, pc}
   15f50:	push	{fp, lr}
   15f54:	add	fp, sp, #4
   15f58:	sub	sp, sp, #8
   15f5c:	str	r0, [fp, #-8]
   15f60:	str	r1, [fp, #-12]
   15f64:	ldr	r0, [fp, #-12]
   15f68:	bl	15558 <__assert_fail@plt+0x46b0>
   15f6c:	mov	r3, r0
   15f70:	ldr	r2, [fp, #-12]
   15f74:	ldr	r1, [fp, #-8]
   15f78:	mov	r0, r3
   15f7c:	bl	10ca4 <memcpy@plt>
   15f80:	mov	r3, r0
   15f84:	mov	r0, r3
   15f88:	sub	sp, fp, #4
   15f8c:	pop	{fp, pc}
   15f90:	push	{fp, lr}
   15f94:	add	fp, sp, #4
   15f98:	sub	sp, sp, #8
   15f9c:	str	r0, [fp, #-8]
   15fa0:	str	r1, [fp, #-12]
   15fa4:	ldr	r0, [fp, #-12]
   15fa8:	bl	1558c <__assert_fail@plt+0x46e4>
   15fac:	mov	r3, r0
   15fb0:	mov	r0, r3
   15fb4:	ldr	r3, [fp, #-12]
   15fb8:	mov	r2, r3
   15fbc:	ldr	r1, [fp, #-8]
   15fc0:	bl	10ca4 <memcpy@plt>
   15fc4:	mov	r3, r0
   15fc8:	mov	r0, r3
   15fcc:	sub	sp, fp, #4
   15fd0:	pop	{fp, pc}
   15fd4:	push	{fp, lr}
   15fd8:	add	fp, sp, #4
   15fdc:	sub	sp, sp, #16
   15fe0:	str	r0, [fp, #-16]
   15fe4:	str	r1, [fp, #-20]	; 0xffffffec
   15fe8:	ldr	r3, [fp, #-20]	; 0xffffffec
   15fec:	add	r3, r3, #1
   15ff0:	mov	r0, r3
   15ff4:	bl	1558c <__assert_fail@plt+0x46e4>
   15ff8:	mov	r3, r0
   15ffc:	str	r3, [fp, #-8]
   16000:	ldr	r3, [fp, #-20]	; 0xffffffec
   16004:	ldr	r2, [fp, #-8]
   16008:	add	r3, r2, r3
   1600c:	mov	r2, #0
   16010:	strb	r2, [r3]
   16014:	ldr	r3, [fp, #-20]	; 0xffffffec
   16018:	mov	r2, r3
   1601c:	ldr	r1, [fp, #-16]
   16020:	ldr	r0, [fp, #-8]
   16024:	bl	10ca4 <memcpy@plt>
   16028:	mov	r3, r0
   1602c:	mov	r0, r3
   16030:	sub	sp, fp, #4
   16034:	pop	{fp, pc}
   16038:	push	{fp, lr}
   1603c:	add	fp, sp, #4
   16040:	sub	sp, sp, #8
   16044:	str	r0, [fp, #-8]
   16048:	ldr	r0, [fp, #-8]
   1604c:	bl	10dd0 <strlen@plt>
   16050:	mov	r3, r0
   16054:	add	r3, r3, #1
   16058:	mov	r1, r3
   1605c:	ldr	r0, [fp, #-8]
   16060:	bl	15f50 <__assert_fail@plt+0x50a8>
   16064:	mov	r3, r0
   16068:	mov	r0, r3
   1606c:	sub	sp, fp, #4
   16070:	pop	{fp, pc}
   16074:	push	{r4, r5, fp, lr}
   16078:	add	fp, sp, #12
   1607c:	ldr	r3, [pc, #32]	; 160a4 <__assert_fail@plt+0x51fc>
   16080:	ldr	r4, [r3]
   16084:	ldr	r0, [pc, #28]	; 160a8 <__assert_fail@plt+0x5200>
   16088:	bl	10dc4 <gettext@plt>
   1608c:	mov	r3, r0
   16090:	ldr	r2, [pc, #20]	; 160ac <__assert_fail@plt+0x5204>
   16094:	mov	r1, #0
   16098:	mov	r0, r4
   1609c:	bl	10d58 <error@plt>
   160a0:	bl	10e90 <abort@plt>
   160a4:	andeq	sl, r2, ip, ror #1
   160a8:	andeq	r9, r1, r4, asr #2
   160ac:	andeq	r9, r1, r8, asr r1
   160b0:	push	{r4, r5, fp, lr}
   160b4:	add	fp, sp, #12
   160b8:	sub	sp, sp, #40	; 0x28
   160bc:	str	r0, [fp, #-32]	; 0xffffffe0
   160c0:	str	r1, [fp, #-36]	; 0xffffffdc
   160c4:	strd	r2, [fp, #-44]	; 0xffffffd4
   160c8:	sub	r2, fp, #28
   160cc:	ldr	r3, [fp, #12]
   160d0:	str	r3, [sp]
   160d4:	mov	r3, r2
   160d8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   160dc:	mov	r1, #0
   160e0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   160e4:	bl	165e4 <__assert_fail@plt+0x573c>
   160e8:	str	r0, [fp, #-16]
   160ec:	ldr	r3, [fp, #-16]
   160f0:	cmp	r3, #0
   160f4:	bne	16194 <__assert_fail@plt+0x52ec>
   160f8:	ldrd	r0, [fp, #-28]	; 0xffffffe4
   160fc:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   16100:	cmp	r0, r2
   16104:	sbcs	r3, r1, r3
   16108:	blt	16120 <__assert_fail@plt+0x5278>
   1610c:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16110:	ldrd	r0, [fp, #4]
   16114:	cmp	r0, r2
   16118:	sbcs	r3, r1, r3
   1611c:	bge	161d0 <__assert_fail@plt+0x5328>
   16120:	mov	r3, #1
   16124:	str	r3, [fp, #-16]
   16128:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1612c:	mvn	r0, #-1073741824	; 0xc0000000
   16130:	mov	r1, #0
   16134:	cmp	r0, r2
   16138:	sbcs	r3, r1, r3
   1613c:	bge	16154 <__assert_fail@plt+0x52ac>
   16140:	bl	10df4 <__errno_location@plt>
   16144:	mov	r2, r0
   16148:	mov	r3, #75	; 0x4b
   1614c:	str	r3, [r2]
   16150:	b	161d0 <__assert_fail@plt+0x5328>
   16154:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16158:	mov	r0, #-1073741824	; 0xc0000000
   1615c:	mvn	r1, #0
   16160:	cmp	r2, r0
   16164:	sbcs	r3, r3, r1
   16168:	bge	16180 <__assert_fail@plt+0x52d8>
   1616c:	bl	10df4 <__errno_location@plt>
   16170:	mov	r2, r0
   16174:	mov	r3, #75	; 0x4b
   16178:	str	r3, [r2]
   1617c:	b	161d0 <__assert_fail@plt+0x5328>
   16180:	bl	10df4 <__errno_location@plt>
   16184:	mov	r2, r0
   16188:	mov	r3, #34	; 0x22
   1618c:	str	r3, [r2]
   16190:	b	161d0 <__assert_fail@plt+0x5328>
   16194:	ldr	r3, [fp, #-16]
   16198:	cmp	r3, #1
   1619c:	bne	161b4 <__assert_fail@plt+0x530c>
   161a0:	bl	10df4 <__errno_location@plt>
   161a4:	mov	r2, r0
   161a8:	mov	r3, #75	; 0x4b
   161ac:	str	r3, [r2]
   161b0:	b	161d0 <__assert_fail@plt+0x5328>
   161b4:	ldr	r3, [fp, #-16]
   161b8:	cmp	r3, #3
   161bc:	bne	161d0 <__assert_fail@plt+0x5328>
   161c0:	bl	10df4 <__errno_location@plt>
   161c4:	mov	r2, r0
   161c8:	mov	r3, #0
   161cc:	str	r3, [r2]
   161d0:	ldr	r3, [fp, #-16]
   161d4:	cmp	r3, #0
   161d8:	beq	16240 <__assert_fail@plt+0x5398>
   161dc:	ldr	r3, [fp, #20]
   161e0:	cmp	r3, #0
   161e4:	beq	161f0 <__assert_fail@plt+0x5348>
   161e8:	ldr	r4, [fp, #20]
   161ec:	b	161f4 <__assert_fail@plt+0x534c>
   161f0:	mov	r4, #1
   161f4:	bl	10df4 <__errno_location@plt>
   161f8:	mov	r3, r0
   161fc:	ldr	r3, [r3]
   16200:	cmp	r3, #22
   16204:	beq	16218 <__assert_fail@plt+0x5370>
   16208:	bl	10df4 <__errno_location@plt>
   1620c:	mov	r3, r0
   16210:	ldr	r5, [r3]
   16214:	b	1621c <__assert_fail@plt+0x5374>
   16218:	mov	r5, #0
   1621c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16220:	bl	14d40 <__assert_fail@plt+0x3e98>
   16224:	mov	r3, r0
   16228:	str	r3, [sp]
   1622c:	ldr	r3, [fp, #16]
   16230:	ldr	r2, [pc, #28]	; 16254 <__assert_fail@plt+0x53ac>
   16234:	mov	r1, r5
   16238:	mov	r0, r4
   1623c:	bl	10d58 <error@plt>
   16240:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   16244:	mov	r0, r2
   16248:	mov	r1, r3
   1624c:	sub	sp, fp, #12
   16250:	pop	{r4, r5, fp, pc}
   16254:	andeq	r9, r1, ip, asr r1
   16258:	push	{fp, lr}
   1625c:	add	fp, sp, #4
   16260:	sub	sp, sp, #40	; 0x28
   16264:	str	r0, [fp, #-8]
   16268:	strd	r2, [fp, #-20]	; 0xffffffec
   1626c:	ldr	r3, [fp, #20]
   16270:	str	r3, [sp, #16]
   16274:	ldr	r3, [fp, #16]
   16278:	str	r3, [sp, #12]
   1627c:	ldr	r3, [fp, #12]
   16280:	str	r3, [sp, #8]
   16284:	ldrd	r2, [fp, #4]
   16288:	strd	r2, [sp]
   1628c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   16290:	mov	r1, #10
   16294:	ldr	r0, [fp, #-8]
   16298:	bl	160b0 <__assert_fail@plt+0x5208>
   1629c:	mov	r2, r0
   162a0:	mov	r3, r1
   162a4:	mov	r0, r2
   162a8:	mov	r1, r3
   162ac:	sub	sp, fp, #4
   162b0:	pop	{fp, pc}
   162b4:	push	{r4, r5, fp, lr}
   162b8:	add	fp, sp, #12
   162bc:	sub	sp, sp, #16
   162c0:	str	r0, [fp, #-24]	; 0xffffffe8
   162c4:	str	r1, [fp, #-28]	; 0xffffffe4
   162c8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   162cc:	cmp	r3, #0
   162d0:	bge	163a4 <__assert_fail@plt+0x54fc>
   162d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162d8:	ldrd	r2, [r3]
   162dc:	cmp	r2, #0
   162e0:	sbcs	r3, r3, #0
   162e4:	bge	16328 <__assert_fail@plt+0x5480>
   162e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   162ec:	ldrd	r4, [r3]
   162f0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   162f4:	mov	r2, r3
   162f8:	asr	r3, r2, #31
   162fc:	mvn	r0, #0
   16300:	mvn	r1, #-2147483648	; 0x80000000
   16304:	bl	180ac <__assert_fail@plt+0x7204>
   16308:	mov	r2, r0
   1630c:	mov	r3, r1
   16310:	cmp	r4, r2
   16314:	sbcs	r3, r5, r3
   16318:	movlt	r3, #1
   1631c:	movge	r3, #0
   16320:	uxtb	r3, r3
   16324:	b	164a0 <__assert_fail@plt+0x55f8>
   16328:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1632c:	cmn	r3, #1
   16330:	bne	1635c <__assert_fail@plt+0x54b4>
   16334:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16338:	ldrd	r2, [r3]
   1633c:	adds	r2, r2, #0
   16340:	adc	r3, r3, #-2147483648	; 0x80000000
   16344:	cmp	r2, #1
   16348:	sbcs	r3, r3, #0
   1634c:	movge	r3, #1
   16350:	movlt	r3, #0
   16354:	uxtb	r3, r3
   16358:	b	164a0 <__assert_fail@plt+0x55f8>
   1635c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16360:	mov	r2, r3
   16364:	asr	r3, r2, #31
   16368:	mov	r0, #0
   1636c:	mov	r1, #-2147483648	; 0x80000000
   16370:	bl	180ac <__assert_fail@plt+0x7204>
   16374:	mov	r2, r0
   16378:	mov	r3, r1
   1637c:	mov	r0, r2
   16380:	mov	r1, r3
   16384:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16388:	ldrd	r2, [r3]
   1638c:	cmp	r0, r2
   16390:	sbcs	r3, r1, r3
   16394:	movlt	r3, #1
   16398:	movge	r3, #0
   1639c:	uxtb	r3, r3
   163a0:	b	164a0 <__assert_fail@plt+0x55f8>
   163a4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   163a8:	cmp	r3, #0
   163ac:	beq	1649c <__assert_fail@plt+0x55f4>
   163b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163b4:	ldrd	r2, [r3]
   163b8:	cmp	r2, #0
   163bc:	sbcs	r3, r3, #0
   163c0:	bge	16454 <__assert_fail@plt+0x55ac>
   163c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   163c8:	ldrd	r2, [r3]
   163cc:	mvn	r0, #0
   163d0:	mvn	r1, #0
   163d4:	cmp	r3, r1
   163d8:	cmpeq	r2, r0
   163dc:	bne	1640c <__assert_fail@plt+0x5564>
   163e0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   163e4:	mov	r2, r3
   163e8:	asr	r3, r2, #31
   163ec:	adds	r2, r2, #0
   163f0:	adc	r3, r3, #-2147483648	; 0x80000000
   163f4:	cmp	r2, #1
   163f8:	sbcs	r3, r3, #0
   163fc:	movge	r3, #1
   16400:	movlt	r3, #0
   16404:	uxtb	r3, r3
   16408:	b	164a0 <__assert_fail@plt+0x55f8>
   1640c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16410:	ldrd	r2, [r3]
   16414:	mov	r0, #0
   16418:	mov	r1, #-2147483648	; 0x80000000
   1641c:	bl	180ac <__assert_fail@plt+0x7204>
   16420:	mov	r2, r0
   16424:	mov	r3, r1
   16428:	mov	r0, r2
   1642c:	mov	r1, r3
   16430:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16434:	mov	r2, r3
   16438:	asr	r3, r2, #31
   1643c:	cmp	r0, r2
   16440:	sbcs	r3, r1, r3
   16444:	movlt	r3, #1
   16448:	movge	r3, #0
   1644c:	uxtb	r3, r3
   16450:	b	164a0 <__assert_fail@plt+0x55f8>
   16454:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16458:	mov	r2, r3
   1645c:	asr	r3, r2, #31
   16460:	mvn	r0, #0
   16464:	mvn	r1, #-2147483648	; 0x80000000
   16468:	bl	180ac <__assert_fail@plt+0x7204>
   1646c:	mov	r2, r0
   16470:	mov	r3, r1
   16474:	mov	r0, r2
   16478:	mov	r1, r3
   1647c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16480:	ldrd	r2, [r3]
   16484:	cmp	r0, r2
   16488:	sbcs	r3, r1, r3
   1648c:	movlt	r3, #1
   16490:	movge	r3, #0
   16494:	uxtb	r3, r3
   16498:	b	164a0 <__assert_fail@plt+0x55f8>
   1649c:	mov	r3, #0
   164a0:	cmp	r3, #0
   164a4:	beq	164e8 <__assert_fail@plt+0x5640>
   164a8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164ac:	ldrd	r2, [r3]
   164b0:	mov	r0, r2
   164b4:	mov	r1, r3
   164b8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   164bc:	mov	r2, r3
   164c0:	asr	r3, r2, #31
   164c4:	mul	lr, r2, r1
   164c8:	mul	ip, r0, r3
   164cc:	add	ip, lr, ip
   164d0:	umull	r2, r3, r0, r2
   164d4:	add	r1, ip, r3
   164d8:	mov	r3, r1
   164dc:	strd	r2, [fp, #-20]	; 0xffffffec
   164e0:	mov	r3, #1
   164e4:	b	16524 <__assert_fail@plt+0x567c>
   164e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   164ec:	ldrd	r2, [r3]
   164f0:	mov	r0, r2
   164f4:	mov	r1, r3
   164f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   164fc:	mov	r2, r3
   16500:	asr	r3, r2, #31
   16504:	mul	lr, r2, r1
   16508:	mul	ip, r0, r3
   1650c:	add	ip, lr, ip
   16510:	umull	r2, r3, r0, r2
   16514:	add	r1, ip, r3
   16518:	mov	r3, r1
   1651c:	strd	r2, [fp, #-20]	; 0xffffffec
   16520:	mov	r3, #0
   16524:	cmp	r3, #0
   16528:	beq	16564 <__assert_fail@plt+0x56bc>
   1652c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16530:	ldrd	r2, [r3]
   16534:	cmp	r2, #0
   16538:	sbcs	r3, r3, #0
   1653c:	bge	1654c <__assert_fail@plt+0x56a4>
   16540:	mov	r2, #0
   16544:	mov	r3, #-2147483648	; 0x80000000
   16548:	b	16554 <__assert_fail@plt+0x56ac>
   1654c:	mvn	r2, #0
   16550:	mvn	r3, #-2147483648	; 0x80000000
   16554:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16558:	strd	r2, [r1]
   1655c:	mov	r3, #1
   16560:	b	16574 <__assert_fail@plt+0x56cc>
   16564:	ldrd	r2, [fp, #-20]	; 0xffffffec
   16568:	ldr	r1, [fp, #-24]	; 0xffffffe8
   1656c:	strd	r2, [r1]
   16570:	mov	r3, #0
   16574:	mov	r0, r3
   16578:	sub	sp, fp, #12
   1657c:	pop	{r4, r5, fp, pc}
   16580:	push	{fp, lr}
   16584:	add	fp, sp, #4
   16588:	sub	sp, sp, #24
   1658c:	str	r0, [fp, #-16]
   16590:	str	r1, [fp, #-20]	; 0xffffffec
   16594:	str	r2, [fp, #-24]	; 0xffffffe8
   16598:	mov	r3, #0
   1659c:	str	r3, [fp, #-8]
   165a0:	b	165c0 <__assert_fail@plt+0x5718>
   165a4:	ldr	r1, [fp, #-20]	; 0xffffffec
   165a8:	ldr	r0, [fp, #-16]
   165ac:	bl	162b4 <__assert_fail@plt+0x540c>
   165b0:	mov	r2, r0
   165b4:	ldr	r3, [fp, #-8]
   165b8:	orr	r3, r3, r2
   165bc:	str	r3, [fp, #-8]
   165c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   165c4:	sub	r2, r3, #1
   165c8:	str	r2, [fp, #-24]	; 0xffffffe8
   165cc:	cmp	r3, #0
   165d0:	bne	165a4 <__assert_fail@plt+0x56fc>
   165d4:	ldr	r3, [fp, #-8]
   165d8:	mov	r0, r3
   165dc:	sub	sp, fp, #4
   165e0:	pop	{fp, pc}
   165e4:	push	{fp, lr}
   165e8:	add	fp, sp, #4
   165ec:	sub	sp, sp, #48	; 0x30
   165f0:	str	r0, [fp, #-40]	; 0xffffffd8
   165f4:	str	r1, [fp, #-44]	; 0xffffffd4
   165f8:	str	r2, [fp, #-48]	; 0xffffffd0
   165fc:	str	r3, [fp, #-52]	; 0xffffffcc
   16600:	mov	r3, #0
   16604:	str	r3, [fp, #-8]
   16608:	ldr	r3, [fp, #-48]	; 0xffffffd0
   1660c:	cmp	r3, #0
   16610:	blt	16620 <__assert_fail@plt+0x5778>
   16614:	ldr	r3, [fp, #-48]	; 0xffffffd0
   16618:	cmp	r3, #36	; 0x24
   1661c:	ble	16634 <__assert_fail@plt+0x578c>
   16620:	ldr	r3, [pc, #1412]	; 16bac <__assert_fail@plt+0x5d04>
   16624:	mov	r2, #85	; 0x55
   16628:	ldr	r1, [pc, #1408]	; 16bb0 <__assert_fail@plt+0x5d08>
   1662c:	ldr	r0, [pc, #1408]	; 16bb4 <__assert_fail@plt+0x5d0c>
   16630:	bl	10ea8 <__assert_fail@plt>
   16634:	ldr	r3, [fp, #-44]	; 0xffffffd4
   16638:	cmp	r3, #0
   1663c:	bne	16648 <__assert_fail@plt+0x57a0>
   16640:	sub	r3, fp, #28
   16644:	b	1664c <__assert_fail@plt+0x57a4>
   16648:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1664c:	str	r3, [fp, #-24]	; 0xffffffe8
   16650:	bl	10df4 <__errno_location@plt>
   16654:	mov	r2, r0
   16658:	mov	r3, #0
   1665c:	str	r3, [r2]
   16660:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16664:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16668:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1666c:	bl	10e24 <strtoimax@plt>
   16670:	mov	r2, r0
   16674:	mov	r3, r1
   16678:	strd	r2, [fp, #-36]	; 0xffffffdc
   1667c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16680:	ldr	r2, [r3]
   16684:	ldr	r3, [fp, #-40]	; 0xffffffd8
   16688:	cmp	r2, r3
   1668c:	bne	166ec <__assert_fail@plt+0x5844>
   16690:	ldr	r3, [fp, #4]
   16694:	cmp	r3, #0
   16698:	beq	166e4 <__assert_fail@plt+0x583c>
   1669c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166a0:	ldr	r3, [r3]
   166a4:	ldrb	r3, [r3]
   166a8:	cmp	r3, #0
   166ac:	beq	166e4 <__assert_fail@plt+0x583c>
   166b0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   166b4:	ldr	r3, [r3]
   166b8:	ldrb	r3, [r3]
   166bc:	mov	r1, r3
   166c0:	ldr	r0, [fp, #4]
   166c4:	bl	10ddc <strchr@plt>
   166c8:	mov	r3, r0
   166cc:	cmp	r3, #0
   166d0:	beq	166e4 <__assert_fail@plt+0x583c>
   166d4:	mov	r2, #1
   166d8:	mov	r3, #0
   166dc:	strd	r2, [fp, #-36]	; 0xffffffdc
   166e0:	b	16724 <__assert_fail@plt+0x587c>
   166e4:	mov	r3, #4
   166e8:	b	16ba0 <__assert_fail@plt+0x5cf8>
   166ec:	bl	10df4 <__errno_location@plt>
   166f0:	mov	r3, r0
   166f4:	ldr	r3, [r3]
   166f8:	cmp	r3, #0
   166fc:	beq	16724 <__assert_fail@plt+0x587c>
   16700:	bl	10df4 <__errno_location@plt>
   16704:	mov	r3, r0
   16708:	ldr	r3, [r3]
   1670c:	cmp	r3, #34	; 0x22
   16710:	beq	1671c <__assert_fail@plt+0x5874>
   16714:	mov	r3, #4
   16718:	b	16ba0 <__assert_fail@plt+0x5cf8>
   1671c:	mov	r3, #1
   16720:	str	r3, [fp, #-8]
   16724:	ldr	r3, [fp, #4]
   16728:	cmp	r3, #0
   1672c:	bne	16744 <__assert_fail@plt+0x589c>
   16730:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16734:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16738:	strd	r2, [r1]
   1673c:	ldr	r3, [fp, #-8]
   16740:	b	16ba0 <__assert_fail@plt+0x5cf8>
   16744:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16748:	ldr	r3, [r3]
   1674c:	ldrb	r3, [r3]
   16750:	cmp	r3, #0
   16754:	beq	16b90 <__assert_fail@plt+0x5ce8>
   16758:	mov	r3, #1024	; 0x400
   1675c:	str	r3, [fp, #-12]
   16760:	mov	r3, #1
   16764:	str	r3, [fp, #-16]
   16768:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1676c:	ldr	r3, [r3]
   16770:	ldrb	r3, [r3]
   16774:	mov	r1, r3
   16778:	ldr	r0, [fp, #4]
   1677c:	bl	10ddc <strchr@plt>
   16780:	mov	r3, r0
   16784:	cmp	r3, #0
   16788:	bne	167a4 <__assert_fail@plt+0x58fc>
   1678c:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16790:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16794:	strd	r2, [r1]
   16798:	ldr	r3, [fp, #-8]
   1679c:	orr	r3, r3, #2
   167a0:	b	16ba0 <__assert_fail@plt+0x5cf8>
   167a4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   167a8:	ldr	r3, [r3]
   167ac:	ldrb	r3, [r3]
   167b0:	sub	r3, r3, #69	; 0x45
   167b4:	cmp	r3, #47	; 0x2f
   167b8:	ldrls	pc, [pc, r3, lsl #2]
   167bc:	b	16908 <__assert_fail@plt+0x5a60>
   167c0:	andeq	r6, r1, r0, lsl #17
   167c4:	andeq	r6, r1, r8, lsl #18
   167c8:	andeq	r6, r1, r0, lsl #17
   167cc:	andeq	r6, r1, r8, lsl #18
   167d0:	andeq	r6, r1, r8, lsl #18
   167d4:	andeq	r6, r1, r8, lsl #18
   167d8:	andeq	r6, r1, r0, lsl #17
   167dc:	andeq	r6, r1, r8, lsl #18
   167e0:	andeq	r6, r1, r0, lsl #17
   167e4:	andeq	r6, r1, r8, lsl #18
   167e8:	andeq	r6, r1, r8, lsl #18
   167ec:	andeq	r6, r1, r0, lsl #17
   167f0:	andeq	r6, r1, r8, lsl #18
   167f4:	andeq	r6, r1, r8, lsl #18
   167f8:	andeq	r6, r1, r8, lsl #18
   167fc:	andeq	r6, r1, r0, lsl #17
   16800:	andeq	r6, r1, r8, lsl #18
   16804:	andeq	r6, r1, r8, lsl #18
   16808:	andeq	r6, r1, r8, lsl #18
   1680c:	andeq	r6, r1, r8, lsl #18
   16810:	andeq	r6, r1, r0, lsl #17
   16814:	andeq	r6, r1, r0, lsl #17
   16818:	andeq	r6, r1, r8, lsl #18
   1681c:	andeq	r6, r1, r8, lsl #18
   16820:	andeq	r6, r1, r8, lsl #18
   16824:	andeq	r6, r1, r8, lsl #18
   16828:	andeq	r6, r1, r8, lsl #18
   1682c:	andeq	r6, r1, r8, lsl #18
   16830:	andeq	r6, r1, r8, lsl #18
   16834:	andeq	r6, r1, r8, lsl #18
   16838:	andeq	r6, r1, r8, lsl #18
   1683c:	andeq	r6, r1, r8, lsl #18
   16840:	andeq	r6, r1, r8, lsl #18
   16844:	andeq	r6, r1, r8, lsl #18
   16848:	andeq	r6, r1, r0, lsl #17
   1684c:	andeq	r6, r1, r8, lsl #18
   16850:	andeq	r6, r1, r8, lsl #18
   16854:	andeq	r6, r1, r8, lsl #18
   16858:	andeq	r6, r1, r0, lsl #17
   1685c:	andeq	r6, r1, r8, lsl #18
   16860:	andeq	r6, r1, r0, lsl #17
   16864:	andeq	r6, r1, r8, lsl #18
   16868:	andeq	r6, r1, r8, lsl #18
   1686c:	andeq	r6, r1, r8, lsl #18
   16870:	andeq	r6, r1, r8, lsl #18
   16874:	andeq	r6, r1, r8, lsl #18
   16878:	andeq	r6, r1, r8, lsl #18
   1687c:	andeq	r6, r1, r0, lsl #17
   16880:	mov	r1, #48	; 0x30
   16884:	ldr	r0, [fp, #4]
   16888:	bl	10ddc <strchr@plt>
   1688c:	mov	r3, r0
   16890:	cmp	r3, #0
   16894:	beq	16908 <__assert_fail@plt+0x5a60>
   16898:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1689c:	ldr	r3, [r3]
   168a0:	add	r3, r3, #1
   168a4:	ldrb	r3, [r3]
   168a8:	cmp	r3, #68	; 0x44
   168ac:	beq	168ec <__assert_fail@plt+0x5a44>
   168b0:	cmp	r3, #105	; 0x69
   168b4:	beq	168c4 <__assert_fail@plt+0x5a1c>
   168b8:	cmp	r3, #66	; 0x42
   168bc:	beq	168ec <__assert_fail@plt+0x5a44>
   168c0:	b	16908 <__assert_fail@plt+0x5a60>
   168c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   168c8:	ldr	r3, [r3]
   168cc:	add	r3, r3, #2
   168d0:	ldrb	r3, [r3]
   168d4:	cmp	r3, #66	; 0x42
   168d8:	bne	16904 <__assert_fail@plt+0x5a5c>
   168dc:	ldr	r3, [fp, #-16]
   168e0:	add	r3, r3, #2
   168e4:	str	r3, [fp, #-16]
   168e8:	b	16904 <__assert_fail@plt+0x5a5c>
   168ec:	mov	r3, #1000	; 0x3e8
   168f0:	str	r3, [fp, #-12]
   168f4:	ldr	r3, [fp, #-16]
   168f8:	add	r3, r3, #1
   168fc:	str	r3, [fp, #-16]
   16900:	b	16908 <__assert_fail@plt+0x5a60>
   16904:	nop			; (mov r0, r0)
   16908:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1690c:	ldr	r3, [r3]
   16910:	ldrb	r3, [r3]
   16914:	sub	r3, r3, #66	; 0x42
   16918:	cmp	r3, #53	; 0x35
   1691c:	ldrls	pc, [pc, r3, lsl #2]
   16920:	b	16b30 <__assert_fail@plt+0x5c88>
   16924:	andeq	r6, r1, r4, lsl sl
   16928:	andeq	r6, r1, r0, lsr fp
   1692c:	andeq	r6, r1, r0, lsr fp
   16930:	andeq	r6, r1, r8, lsr sl
   16934:	andeq	r6, r1, r0, lsr fp
   16938:	andeq	r6, r1, r4, asr sl
   1693c:	andeq	r6, r1, r0, lsr fp
   16940:	andeq	r6, r1, r0, lsr fp
   16944:	andeq	r6, r1, r0, lsr fp
   16948:	andeq	r6, r1, r0, ror sl
   1694c:	andeq	r6, r1, r0, lsr fp
   16950:	andeq	r6, r1, ip, lsl #21
   16954:	andeq	r6, r1, r0, lsr fp
   16958:	andeq	r6, r1, r0, lsr fp
   1695c:	andeq	r6, r1, r8, lsr #21
   16960:	andeq	r6, r1, r0, lsr fp
   16964:	andeq	r6, r1, r0, lsr fp
   16968:	andeq	r6, r1, r0, lsr fp
   1696c:	andeq	r6, r1, r4, asr #21
   16970:	andeq	r6, r1, r0, lsr fp
   16974:	andeq	r6, r1, r0, lsr fp
   16978:	andeq	r6, r1, r0, lsr fp
   1697c:	andeq	r6, r1, r0, lsr fp
   16980:	strdeq	r6, [r1], -r8
   16984:	andeq	r6, r1, r4, lsl fp
   16988:	andeq	r6, r1, r0, lsr fp
   1698c:	andeq	r6, r1, r0, lsr fp
   16990:	andeq	r6, r1, r0, lsr fp
   16994:	andeq	r6, r1, r0, lsr fp
   16998:	andeq	r6, r1, r0, lsr fp
   1699c:	andeq	r6, r1, r0, lsr fp
   169a0:	andeq	r6, r1, r0, lsr fp
   169a4:	strdeq	r6, [r1], -ip
   169a8:	andeq	r6, r1, ip, lsr #20
   169ac:	andeq	r6, r1, r0, lsr fp
   169b0:	andeq	r6, r1, r0, lsr fp
   169b4:	andeq	r6, r1, r0, lsr fp
   169b8:	andeq	r6, r1, r4, asr sl
   169bc:	andeq	r6, r1, r0, lsr fp
   169c0:	andeq	r6, r1, r0, lsr fp
   169c4:	andeq	r6, r1, r0, lsr fp
   169c8:	andeq	r6, r1, r0, ror sl
   169cc:	andeq	r6, r1, r0, lsr fp
   169d0:	andeq	r6, r1, ip, lsl #21
   169d4:	andeq	r6, r1, r0, lsr fp
   169d8:	andeq	r6, r1, r0, lsr fp
   169dc:	andeq	r6, r1, r0, lsr fp
   169e0:	andeq	r6, r1, r0, lsr fp
   169e4:	andeq	r6, r1, r0, lsr fp
   169e8:	andeq	r6, r1, r0, lsr fp
   169ec:	andeq	r6, r1, r4, asr #21
   169f0:	andeq	r6, r1, r0, lsr fp
   169f4:	andeq	r6, r1, r0, lsr fp
   169f8:	andeq	r6, r1, r0, ror #21
   169fc:	sub	r3, fp, #36	; 0x24
   16a00:	mov	r1, #512	; 0x200
   16a04:	mov	r0, r3
   16a08:	bl	162b4 <__assert_fail@plt+0x540c>
   16a0c:	str	r0, [fp, #-20]	; 0xffffffec
   16a10:	b	16b48 <__assert_fail@plt+0x5ca0>
   16a14:	sub	r3, fp, #36	; 0x24
   16a18:	mov	r1, #1024	; 0x400
   16a1c:	mov	r0, r3
   16a20:	bl	162b4 <__assert_fail@plt+0x540c>
   16a24:	str	r0, [fp, #-20]	; 0xffffffec
   16a28:	b	16b48 <__assert_fail@plt+0x5ca0>
   16a2c:	mov	r3, #0
   16a30:	str	r3, [fp, #-20]	; 0xffffffec
   16a34:	b	16b48 <__assert_fail@plt+0x5ca0>
   16a38:	sub	r3, fp, #36	; 0x24
   16a3c:	mov	r2, #6
   16a40:	ldr	r1, [fp, #-12]
   16a44:	mov	r0, r3
   16a48:	bl	16580 <__assert_fail@plt+0x56d8>
   16a4c:	str	r0, [fp, #-20]	; 0xffffffec
   16a50:	b	16b48 <__assert_fail@plt+0x5ca0>
   16a54:	sub	r3, fp, #36	; 0x24
   16a58:	mov	r2, #3
   16a5c:	ldr	r1, [fp, #-12]
   16a60:	mov	r0, r3
   16a64:	bl	16580 <__assert_fail@plt+0x56d8>
   16a68:	str	r0, [fp, #-20]	; 0xffffffec
   16a6c:	b	16b48 <__assert_fail@plt+0x5ca0>
   16a70:	sub	r3, fp, #36	; 0x24
   16a74:	mov	r2, #1
   16a78:	ldr	r1, [fp, #-12]
   16a7c:	mov	r0, r3
   16a80:	bl	16580 <__assert_fail@plt+0x56d8>
   16a84:	str	r0, [fp, #-20]	; 0xffffffec
   16a88:	b	16b48 <__assert_fail@plt+0x5ca0>
   16a8c:	sub	r3, fp, #36	; 0x24
   16a90:	mov	r2, #2
   16a94:	ldr	r1, [fp, #-12]
   16a98:	mov	r0, r3
   16a9c:	bl	16580 <__assert_fail@plt+0x56d8>
   16aa0:	str	r0, [fp, #-20]	; 0xffffffec
   16aa4:	b	16b48 <__assert_fail@plt+0x5ca0>
   16aa8:	sub	r3, fp, #36	; 0x24
   16aac:	mov	r2, #5
   16ab0:	ldr	r1, [fp, #-12]
   16ab4:	mov	r0, r3
   16ab8:	bl	16580 <__assert_fail@plt+0x56d8>
   16abc:	str	r0, [fp, #-20]	; 0xffffffec
   16ac0:	b	16b48 <__assert_fail@plt+0x5ca0>
   16ac4:	sub	r3, fp, #36	; 0x24
   16ac8:	mov	r2, #4
   16acc:	ldr	r1, [fp, #-12]
   16ad0:	mov	r0, r3
   16ad4:	bl	16580 <__assert_fail@plt+0x56d8>
   16ad8:	str	r0, [fp, #-20]	; 0xffffffec
   16adc:	b	16b48 <__assert_fail@plt+0x5ca0>
   16ae0:	sub	r3, fp, #36	; 0x24
   16ae4:	mov	r1, #2
   16ae8:	mov	r0, r3
   16aec:	bl	162b4 <__assert_fail@plt+0x540c>
   16af0:	str	r0, [fp, #-20]	; 0xffffffec
   16af4:	b	16b48 <__assert_fail@plt+0x5ca0>
   16af8:	sub	r3, fp, #36	; 0x24
   16afc:	mov	r2, #8
   16b00:	ldr	r1, [fp, #-12]
   16b04:	mov	r0, r3
   16b08:	bl	16580 <__assert_fail@plt+0x56d8>
   16b0c:	str	r0, [fp, #-20]	; 0xffffffec
   16b10:	b	16b48 <__assert_fail@plt+0x5ca0>
   16b14:	sub	r3, fp, #36	; 0x24
   16b18:	mov	r2, #7
   16b1c:	ldr	r1, [fp, #-12]
   16b20:	mov	r0, r3
   16b24:	bl	16580 <__assert_fail@plt+0x56d8>
   16b28:	str	r0, [fp, #-20]	; 0xffffffec
   16b2c:	b	16b48 <__assert_fail@plt+0x5ca0>
   16b30:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16b34:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16b38:	strd	r2, [r1]
   16b3c:	ldr	r3, [fp, #-8]
   16b40:	orr	r3, r3, #2
   16b44:	b	16ba0 <__assert_fail@plt+0x5cf8>
   16b48:	ldr	r2, [fp, #-8]
   16b4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   16b50:	orr	r3, r2, r3
   16b54:	str	r3, [fp, #-8]
   16b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b5c:	ldr	r2, [r3]
   16b60:	ldr	r3, [fp, #-16]
   16b64:	add	r2, r2, r3
   16b68:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b6c:	str	r2, [r3]
   16b70:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16b74:	ldr	r3, [r3]
   16b78:	ldrb	r3, [r3]
   16b7c:	cmp	r3, #0
   16b80:	beq	16b90 <__assert_fail@plt+0x5ce8>
   16b84:	ldr	r3, [fp, #-8]
   16b88:	orr	r3, r3, #2
   16b8c:	str	r3, [fp, #-8]
   16b90:	ldrd	r2, [fp, #-36]	; 0xffffffdc
   16b94:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16b98:	strd	r2, [r1]
   16b9c:	ldr	r3, [fp, #-8]
   16ba0:	mov	r0, r3
   16ba4:	sub	sp, fp, #4
   16ba8:	pop	{fp, pc}
   16bac:	muleq	r1, ip, r1
   16bb0:	andeq	r9, r1, r4, ror #2
   16bb4:	andeq	r9, r1, r4, ror r1
   16bb8:	push	{r4, r5, fp, lr}
   16bbc:	add	fp, sp, #12
   16bc0:	sub	sp, sp, #16
   16bc4:	str	r0, [fp, #-24]	; 0xffffffe8
   16bc8:	str	r1, [fp, #-28]	; 0xffffffe4
   16bcc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16bd0:	cmp	r3, #0
   16bd4:	beq	16be4 <__assert_fail@plt+0x5d3c>
   16bd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16bdc:	cmp	r3, #0
   16be0:	bne	16bf4 <__assert_fail@plt+0x5d4c>
   16be4:	mov	r3, #1
   16be8:	str	r3, [fp, #-28]	; 0xffffffe4
   16bec:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16bf0:	str	r3, [fp, #-24]	; 0xffffffe8
   16bf4:	mov	r1, #0
   16bf8:	ldr	r2, [fp, #-24]	; 0xffffffe8
   16bfc:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16c00:	umull	r2, r3, r2, r3
   16c04:	mov	r4, r3
   16c08:	mov	r5, #0
   16c0c:	cmp	r4, #0
   16c10:	beq	16c18 <__assert_fail@plt+0x5d70>
   16c14:	mov	r1, #1
   16c18:	cmp	r2, #0
   16c1c:	bge	16c24 <__assert_fail@plt+0x5d7c>
   16c20:	mov	r1, #1
   16c24:	mov	r3, r2
   16c28:	str	r3, [fp, #-20]	; 0xffffffec
   16c2c:	mov	r3, r1
   16c30:	and	r3, r3, #1
   16c34:	uxtb	r3, r3
   16c38:	cmp	r3, #0
   16c3c:	beq	16c58 <__assert_fail@plt+0x5db0>
   16c40:	bl	10df4 <__errno_location@plt>
   16c44:	mov	r2, r0
   16c48:	mov	r3, #12
   16c4c:	str	r3, [r2]
   16c50:	mov	r3, #0
   16c54:	b	16c70 <__assert_fail@plt+0x5dc8>
   16c58:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16c5c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16c60:	bl	10c44 <calloc@plt>
   16c64:	mov	r3, r0
   16c68:	str	r3, [fp, #-16]
   16c6c:	ldr	r3, [fp, #-16]
   16c70:	mov	r0, r3
   16c74:	sub	sp, fp, #12
   16c78:	pop	{r4, r5, fp, pc}
   16c7c:	push	{r4, r5, fp, lr}
   16c80:	add	fp, sp, #12
   16c84:	sub	sp, sp, #16
   16c88:	str	r0, [fp, #-24]	; 0xffffffe8
   16c8c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c90:	cmp	r3, #0
   16c94:	bne	16ca0 <__assert_fail@plt+0x5df8>
   16c98:	mov	r3, #1
   16c9c:	str	r3, [fp, #-24]	; 0xffffffe8
   16ca0:	mov	r1, #0
   16ca4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16ca8:	mov	r2, r3
   16cac:	mov	r3, #0
   16cb0:	mov	r4, r3
   16cb4:	mov	r5, #0
   16cb8:	cmp	r4, #0
   16cbc:	beq	16cc4 <__assert_fail@plt+0x5e1c>
   16cc0:	mov	r1, #1
   16cc4:	cmp	r2, #0
   16cc8:	bge	16cd0 <__assert_fail@plt+0x5e28>
   16ccc:	mov	r1, #1
   16cd0:	mov	r3, r2
   16cd4:	str	r3, [fp, #-20]	; 0xffffffec
   16cd8:	mov	r3, r1
   16cdc:	and	r3, r3, #1
   16ce0:	uxtb	r3, r3
   16ce4:	cmp	r3, #0
   16ce8:	beq	16d04 <__assert_fail@plt+0x5e5c>
   16cec:	bl	10df4 <__errno_location@plt>
   16cf0:	mov	r2, r0
   16cf4:	mov	r3, #12
   16cf8:	str	r3, [r2]
   16cfc:	mov	r3, #0
   16d00:	b	16d18 <__assert_fail@plt+0x5e70>
   16d04:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d08:	bl	10d70 <malloc@plt>
   16d0c:	mov	r3, r0
   16d10:	str	r3, [fp, #-16]
   16d14:	ldr	r3, [fp, #-16]
   16d18:	mov	r0, r3
   16d1c:	sub	sp, fp, #12
   16d20:	pop	{r4, r5, fp, pc}
   16d24:	push	{r4, r5, fp, lr}
   16d28:	add	fp, sp, #12
   16d2c:	sub	sp, sp, #16
   16d30:	str	r0, [fp, #-24]	; 0xffffffe8
   16d34:	str	r1, [fp, #-28]	; 0xffffffe4
   16d38:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16d3c:	cmp	r3, #0
   16d40:	bne	16d54 <__assert_fail@plt+0x5eac>
   16d44:	ldr	r0, [fp, #-28]	; 0xffffffe4
   16d48:	bl	16c7c <__assert_fail@plt+0x5dd4>
   16d4c:	mov	r3, r0
   16d50:	b	16de8 <__assert_fail@plt+0x5f40>
   16d54:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d58:	cmp	r3, #0
   16d5c:	bne	16d70 <__assert_fail@plt+0x5ec8>
   16d60:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16d64:	bl	17104 <__assert_fail@plt+0x625c>
   16d68:	mov	r3, #0
   16d6c:	b	16de8 <__assert_fail@plt+0x5f40>
   16d70:	mov	r1, #0
   16d74:	ldr	r3, [fp, #-28]	; 0xffffffe4
   16d78:	mov	r2, r3
   16d7c:	mov	r3, #0
   16d80:	mov	r4, r3
   16d84:	mov	r5, #0
   16d88:	cmp	r4, #0
   16d8c:	beq	16d94 <__assert_fail@plt+0x5eec>
   16d90:	mov	r1, #1
   16d94:	cmp	r2, #0
   16d98:	bge	16da0 <__assert_fail@plt+0x5ef8>
   16d9c:	mov	r1, #1
   16da0:	mov	r3, r2
   16da4:	str	r3, [fp, #-20]	; 0xffffffec
   16da8:	mov	r3, r1
   16dac:	and	r3, r3, #1
   16db0:	uxtb	r3, r3
   16db4:	cmp	r3, #0
   16db8:	beq	16dd4 <__assert_fail@plt+0x5f2c>
   16dbc:	bl	10df4 <__errno_location@plt>
   16dc0:	mov	r2, r0
   16dc4:	mov	r3, #12
   16dc8:	str	r3, [r2]
   16dcc:	mov	r3, #0
   16dd0:	b	16de8 <__assert_fail@plt+0x5f40>
   16dd4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   16dd8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ddc:	bl	10ce0 <realloc@plt>
   16de0:	str	r0, [fp, #-16]
   16de4:	ldr	r3, [fp, #-16]
   16de8:	mov	r0, r3
   16dec:	sub	sp, fp, #12
   16df0:	pop	{r4, r5, fp, pc}
   16df4:	push	{r4, r5, fp, lr}
   16df8:	add	fp, sp, #12
   16dfc:	sub	sp, sp, #16
   16e00:	str	r0, [fp, #-24]	; 0xffffffe8
   16e04:	str	r1, [fp, #-28]	; 0xffffffe4
   16e08:	ldr	r5, [fp, #-24]	; 0xffffffe8
   16e0c:	ldr	r4, [fp, #-28]	; 0xffffffe4
   16e10:	cmp	r5, r4
   16e14:	bne	16e20 <__assert_fail@plt+0x5f78>
   16e18:	mov	r3, #0
   16e1c:	b	16e80 <__assert_fail@plt+0x5fd8>
   16e20:	ldrb	r3, [r5]
   16e24:	mov	r0, r3
   16e28:	bl	179dc <__assert_fail@plt+0x6b34>
   16e2c:	mov	r3, r0
   16e30:	strb	r3, [fp, #-13]
   16e34:	ldrb	r3, [r4]
   16e38:	mov	r0, r3
   16e3c:	bl	179dc <__assert_fail@plt+0x6b34>
   16e40:	mov	r3, r0
   16e44:	strb	r3, [fp, #-14]
   16e48:	ldrb	r3, [fp, #-13]
   16e4c:	cmp	r3, #0
   16e50:	beq	16e70 <__assert_fail@plt+0x5fc8>
   16e54:	add	r5, r5, #1
   16e58:	add	r4, r4, #1
   16e5c:	ldrb	r2, [fp, #-13]
   16e60:	ldrb	r3, [fp, #-14]
   16e64:	cmp	r2, r3
   16e68:	beq	16e20 <__assert_fail@plt+0x5f78>
   16e6c:	b	16e74 <__assert_fail@plt+0x5fcc>
   16e70:	nop			; (mov r0, r0)
   16e74:	ldrb	r2, [fp, #-13]
   16e78:	ldrb	r3, [fp, #-14]
   16e7c:	sub	r3, r2, r3
   16e80:	mov	r0, r3
   16e84:	sub	sp, fp, #12
   16e88:	pop	{r4, r5, fp, pc}
   16e8c:	push	{fp, lr}
   16e90:	add	fp, sp, #4
   16e94:	sub	sp, sp, #16
   16e98:	str	r0, [fp, #-16]
   16e9c:	ldr	r0, [fp, #-16]
   16ea0:	bl	10d34 <__fpending@plt>
   16ea4:	mov	r3, r0
   16ea8:	cmp	r3, #0
   16eac:	movne	r3, #1
   16eb0:	moveq	r3, #0
   16eb4:	strb	r3, [fp, #-5]
   16eb8:	ldr	r0, [fp, #-16]
   16ebc:	bl	10d40 <ferror_unlocked@plt>
   16ec0:	mov	r3, r0
   16ec4:	cmp	r3, #0
   16ec8:	movne	r3, #1
   16ecc:	moveq	r3, #0
   16ed0:	strb	r3, [fp, #-6]
   16ed4:	ldr	r0, [fp, #-16]
   16ed8:	bl	16f64 <__assert_fail@plt+0x60bc>
   16edc:	mov	r3, r0
   16ee0:	cmp	r3, #0
   16ee4:	movne	r3, #1
   16ee8:	moveq	r3, #0
   16eec:	strb	r3, [fp, #-7]
   16ef0:	ldrb	r3, [fp, #-6]
   16ef4:	cmp	r3, #0
   16ef8:	bne	16f28 <__assert_fail@plt+0x6080>
   16efc:	ldrb	r3, [fp, #-7]
   16f00:	cmp	r3, #0
   16f04:	beq	16f54 <__assert_fail@plt+0x60ac>
   16f08:	ldrb	r3, [fp, #-5]
   16f0c:	cmp	r3, #0
   16f10:	bne	16f28 <__assert_fail@plt+0x6080>
   16f14:	bl	10df4 <__errno_location@plt>
   16f18:	mov	r3, r0
   16f1c:	ldr	r3, [r3]
   16f20:	cmp	r3, #9
   16f24:	beq	16f54 <__assert_fail@plt+0x60ac>
   16f28:	ldrb	r3, [fp, #-7]
   16f2c:	eor	r3, r3, #1
   16f30:	uxtb	r3, r3
   16f34:	cmp	r3, #0
   16f38:	beq	16f4c <__assert_fail@plt+0x60a4>
   16f3c:	bl	10df4 <__errno_location@plt>
   16f40:	mov	r2, r0
   16f44:	mov	r3, #0
   16f48:	str	r3, [r2]
   16f4c:	mvn	r3, #0
   16f50:	b	16f58 <__assert_fail@plt+0x60b0>
   16f54:	mov	r3, #0
   16f58:	mov	r0, r3
   16f5c:	sub	sp, fp, #4
   16f60:	pop	{fp, pc}
   16f64:	push	{fp, lr}
   16f68:	add	fp, sp, #4
   16f6c:	sub	sp, sp, #32
   16f70:	str	r0, [fp, #-24]	; 0xffffffe8
   16f74:	mov	r3, #0
   16f78:	str	r3, [fp, #-8]
   16f7c:	mov	r3, #0
   16f80:	str	r3, [fp, #-12]
   16f84:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16f88:	bl	10e18 <fileno@plt>
   16f8c:	str	r0, [fp, #-16]
   16f90:	ldr	r3, [fp, #-16]
   16f94:	cmp	r3, #0
   16f98:	bge	16fac <__assert_fail@plt+0x6104>
   16f9c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16fa0:	bl	10e30 <fclose@plt>
   16fa4:	mov	r3, r0
   16fa8:	b	17050 <__assert_fail@plt+0x61a8>
   16fac:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16fb0:	bl	10d88 <__freading@plt>
   16fb4:	mov	r3, r0
   16fb8:	cmp	r3, #0
   16fbc:	beq	16ff8 <__assert_fail@plt+0x6150>
   16fc0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16fc4:	bl	10e18 <fileno@plt>
   16fc8:	mov	r1, r0
   16fcc:	mov	r3, #1
   16fd0:	str	r3, [sp]
   16fd4:	mov	r2, #0
   16fd8:	mov	r3, #0
   16fdc:	mov	r0, r1
   16fe0:	bl	10d1c <lseek64@plt>
   16fe4:	mvn	r2, #0
   16fe8:	mvn	r3, #0
   16fec:	cmp	r1, r3
   16ff0:	cmpeq	r0, r2
   16ff4:	beq	1701c <__assert_fail@plt+0x6174>
   16ff8:	ldr	r0, [fp, #-24]	; 0xffffffe8
   16ffc:	bl	170a4 <__assert_fail@plt+0x61fc>
   17000:	mov	r3, r0
   17004:	cmp	r3, #0
   17008:	beq	1701c <__assert_fail@plt+0x6174>
   1700c:	bl	10df4 <__errno_location@plt>
   17010:	mov	r3, r0
   17014:	ldr	r3, [r3]
   17018:	str	r3, [fp, #-8]
   1701c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17020:	bl	10e30 <fclose@plt>
   17024:	str	r0, [fp, #-12]
   17028:	ldr	r3, [fp, #-8]
   1702c:	cmp	r3, #0
   17030:	beq	1704c <__assert_fail@plt+0x61a4>
   17034:	bl	10df4 <__errno_location@plt>
   17038:	mov	r2, r0
   1703c:	ldr	r3, [fp, #-8]
   17040:	str	r3, [r2]
   17044:	mvn	r3, #0
   17048:	str	r3, [fp, #-12]
   1704c:	ldr	r3, [fp, #-12]
   17050:	mov	r0, r3
   17054:	sub	sp, fp, #4
   17058:	pop	{fp, pc}
   1705c:	push	{fp, lr}
   17060:	add	fp, sp, #4
   17064:	sub	sp, sp, #16
   17068:	str	r0, [fp, #-8]
   1706c:	ldr	r3, [fp, #-8]
   17070:	ldr	r3, [r3]
   17074:	and	r3, r3, #256	; 0x100
   17078:	cmp	r3, #0
   1707c:	beq	17098 <__assert_fail@plt+0x61f0>
   17080:	mov	r3, #1
   17084:	str	r3, [sp]
   17088:	mov	r2, #0
   1708c:	mov	r3, #0
   17090:	ldr	r0, [fp, #-8]
   17094:	bl	17190 <__assert_fail@plt+0x62e8>
   17098:	nop			; (mov r0, r0)
   1709c:	sub	sp, fp, #4
   170a0:	pop	{fp, pc}
   170a4:	push	{fp, lr}
   170a8:	add	fp, sp, #4
   170ac:	sub	sp, sp, #8
   170b0:	str	r0, [fp, #-8]
   170b4:	ldr	r3, [fp, #-8]
   170b8:	cmp	r3, #0
   170bc:	beq	170d4 <__assert_fail@plt+0x622c>
   170c0:	ldr	r0, [fp, #-8]
   170c4:	bl	10d88 <__freading@plt>
   170c8:	mov	r3, r0
   170cc:	cmp	r3, #0
   170d0:	bne	170e4 <__assert_fail@plt+0x623c>
   170d4:	ldr	r0, [fp, #-8]
   170d8:	bl	10c80 <fflush@plt>
   170dc:	mov	r3, r0
   170e0:	b	170f8 <__assert_fail@plt+0x6250>
   170e4:	ldr	r0, [fp, #-8]
   170e8:	bl	1705c <__assert_fail@plt+0x61b4>
   170ec:	ldr	r0, [fp, #-8]
   170f0:	bl	10c80 <fflush@plt>
   170f4:	mov	r3, r0
   170f8:	mov	r0, r3
   170fc:	sub	sp, fp, #4
   17100:	pop	{fp, pc}
   17104:	push	{r4, fp, lr}
   17108:	add	fp, sp, #8
   1710c:	sub	sp, sp, #20
   17110:	str	r0, [fp, #-24]	; 0xffffffe8
   17114:	bl	10df4 <__errno_location@plt>
   17118:	mov	r3, r0
   1711c:	ldr	r3, [r3]
   17120:	str	r3, [fp, #-20]	; 0xffffffec
   17124:	bl	10df4 <__errno_location@plt>
   17128:	mov	r3, r0
   1712c:	ldr	r3, [r3]
   17130:	str	r3, [fp, #-16]
   17134:	bl	10df4 <__errno_location@plt>
   17138:	mov	r2, r0
   1713c:	mov	r3, #0
   17140:	str	r3, [r2]
   17144:	ldr	r0, [fp, #-24]	; 0xffffffe8
   17148:	bl	10c8c <free@plt>
   1714c:	bl	10df4 <__errno_location@plt>
   17150:	mov	r4, r0
   17154:	bl	10df4 <__errno_location@plt>
   17158:	mov	r3, r0
   1715c:	ldr	r3, [r3]
   17160:	cmp	r3, #0
   17164:	moveq	r3, #1
   17168:	movne	r3, #0
   1716c:	uxtb	r3, r3
   17170:	lsl	r3, r3, #2
   17174:	sub	r2, fp, #12
   17178:	add	r3, r2, r3
   1717c:	ldr	r3, [r3, #-8]
   17180:	str	r3, [r4]
   17184:	nop			; (mov r0, r0)
   17188:	sub	sp, fp, #8
   1718c:	pop	{r4, fp, pc}
   17190:	push	{fp, lr}
   17194:	add	fp, sp, #4
   17198:	sub	sp, sp, #32
   1719c:	str	r0, [fp, #-16]
   171a0:	strd	r2, [fp, #-28]	; 0xffffffe4
   171a4:	ldr	r3, [fp, #-16]
   171a8:	ldr	r2, [r3, #8]
   171ac:	ldr	r3, [fp, #-16]
   171b0:	ldr	r3, [r3, #4]
   171b4:	cmp	r2, r3
   171b8:	bne	17250 <__assert_fail@plt+0x63a8>
   171bc:	ldr	r3, [fp, #-16]
   171c0:	ldr	r2, [r3, #20]
   171c4:	ldr	r3, [fp, #-16]
   171c8:	ldr	r3, [r3, #16]
   171cc:	cmp	r2, r3
   171d0:	bne	17250 <__assert_fail@plt+0x63a8>
   171d4:	ldr	r3, [fp, #-16]
   171d8:	ldr	r3, [r3, #36]	; 0x24
   171dc:	cmp	r3, #0
   171e0:	bne	17250 <__assert_fail@plt+0x63a8>
   171e4:	ldr	r0, [fp, #-16]
   171e8:	bl	10e18 <fileno@plt>
   171ec:	mov	r1, r0
   171f0:	ldr	r3, [fp, #4]
   171f4:	str	r3, [sp]
   171f8:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   171fc:	mov	r0, r1
   17200:	bl	10d1c <lseek64@plt>
   17204:	strd	r0, [fp, #-12]
   17208:	ldrd	r2, [fp, #-12]
   1720c:	mvn	r0, #0
   17210:	mvn	r1, #0
   17214:	cmp	r3, r1
   17218:	cmpeq	r2, r0
   1721c:	bne	17228 <__assert_fail@plt+0x6380>
   17220:	mvn	r3, #0
   17224:	b	17268 <__assert_fail@plt+0x63c0>
   17228:	ldr	r3, [fp, #-16]
   1722c:	ldr	r3, [r3]
   17230:	bic	r2, r3, #16
   17234:	ldr	r3, [fp, #-16]
   17238:	str	r2, [r3]
   1723c:	ldr	r1, [fp, #-16]
   17240:	ldrd	r2, [fp, #-12]
   17244:	strd	r2, [r1, #80]	; 0x50
   17248:	mov	r3, #0
   1724c:	b	17268 <__assert_fail@plt+0x63c0>
   17250:	ldr	r3, [fp, #4]
   17254:	str	r3, [sp]
   17258:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   1725c:	ldr	r0, [fp, #-16]
   17260:	bl	10e3c <fseeko64@plt>
   17264:	mov	r3, r0
   17268:	mov	r0, r3
   1726c:	sub	sp, fp, #4
   17270:	pop	{fp, pc}
   17274:	push	{fp, lr}
   17278:	add	fp, sp, #4
   1727c:	bl	10df4 <__errno_location@plt>
   17280:	mov	r2, r0
   17284:	mov	r3, #12
   17288:	str	r3, [r2]
   1728c:	mov	r3, #0
   17290:	mov	r0, r3
   17294:	pop	{fp, pc}
   17298:	push	{fp, lr}
   1729c:	add	fp, sp, #4
   172a0:	sub	sp, sp, #8
   172a4:	str	r0, [fp, #-8]
   172a8:	ldr	r3, [fp, #-8]
   172ac:	mov	r0, r3
   172b0:	bl	16c7c <__assert_fail@plt+0x5dd4>
   172b4:	mov	r3, r0
   172b8:	mov	r0, r3
   172bc:	sub	sp, fp, #4
   172c0:	pop	{fp, pc}
   172c4:	push	{fp, lr}
   172c8:	add	fp, sp, #4
   172cc:	sub	sp, sp, #8
   172d0:	str	r0, [fp, #-8]
   172d4:	str	r1, [fp, #-12]
   172d8:	ldr	r3, [fp, #-12]
   172dc:	cmp	r3, #0
   172e0:	moveq	r3, #1
   172e4:	movne	r3, #0
   172e8:	uxtb	r3, r3
   172ec:	mov	r2, r3
   172f0:	ldr	r3, [fp, #-12]
   172f4:	orr	r3, r2, r3
   172f8:	mov	r1, r3
   172fc:	ldr	r0, [fp, #-8]
   17300:	bl	16d24 <__assert_fail@plt+0x5e7c>
   17304:	mov	r3, r0
   17308:	mov	r0, r3
   1730c:	sub	sp, fp, #4
   17310:	pop	{fp, pc}
   17314:	push	{fp, lr}
   17318:	add	fp, sp, #4
   1731c:	sub	sp, sp, #8
   17320:	str	r0, [fp, #-8]
   17324:	str	r1, [fp, #-12]
   17328:	ldr	r3, [fp, #-8]
   1732c:	ldr	r2, [fp, #-12]
   17330:	mov	r1, r2
   17334:	mov	r0, r3
   17338:	bl	16bb8 <__assert_fail@plt+0x5d10>
   1733c:	mov	r3, r0
   17340:	mov	r0, r3
   17344:	sub	sp, fp, #4
   17348:	pop	{fp, pc}
   1734c:	push	{fp, lr}
   17350:	add	fp, sp, #4
   17354:	sub	sp, sp, #16
   17358:	str	r0, [fp, #-8]
   1735c:	str	r1, [fp, #-12]
   17360:	str	r2, [fp, #-16]
   17364:	ldr	r3, [fp, #-12]
   17368:	cmp	r3, #0
   1736c:	beq	1737c <__assert_fail@plt+0x64d4>
   17370:	ldr	r3, [fp, #-16]
   17374:	cmp	r3, #0
   17378:	bne	1738c <__assert_fail@plt+0x64e4>
   1737c:	mov	r3, #1
   17380:	str	r3, [fp, #-16]
   17384:	ldr	r3, [fp, #-16]
   17388:	str	r3, [fp, #-12]
   1738c:	ldr	r3, [fp, #-12]
   17390:	ldr	r2, [fp, #-16]
   17394:	mov	r1, r3
   17398:	ldr	r0, [fp, #-8]
   1739c:	bl	174b8 <__assert_fail@plt+0x6610>
   173a0:	mov	r3, r0
   173a4:	mov	r0, r3
   173a8:	sub	sp, fp, #4
   173ac:	pop	{fp, pc}
   173b0:	push	{fp, lr}
   173b4:	add	fp, sp, #4
   173b8:	sub	sp, sp, #8
   173bc:	mov	r0, #14
   173c0:	bl	10e60 <nl_langinfo@plt>
   173c4:	str	r0, [fp, #-8]
   173c8:	ldr	r3, [fp, #-8]
   173cc:	cmp	r3, #0
   173d0:	bne	173dc <__assert_fail@plt+0x6534>
   173d4:	ldr	r3, [pc, #40]	; 17404 <__assert_fail@plt+0x655c>
   173d8:	str	r3, [fp, #-8]
   173dc:	ldr	r3, [fp, #-8]
   173e0:	ldrb	r3, [r3]
   173e4:	cmp	r3, #0
   173e8:	bne	173f4 <__assert_fail@plt+0x654c>
   173ec:	ldr	r3, [pc, #20]	; 17408 <__assert_fail@plt+0x6560>
   173f0:	str	r3, [fp, #-8]
   173f4:	ldr	r3, [fp, #-8]
   173f8:	mov	r0, r3
   173fc:	sub	sp, fp, #4
   17400:	pop	{fp, pc}
   17404:	andeq	r9, r1, r8, lsr #3
   17408:	andeq	r9, r1, ip, lsr #3
   1740c:	push	{fp, lr}
   17410:	add	fp, sp, #4
   17414:	sub	sp, sp, #32
   17418:	str	r0, [fp, #-24]	; 0xffffffe8
   1741c:	str	r1, [fp, #-28]	; 0xffffffe4
   17420:	str	r2, [fp, #-32]	; 0xffffffe0
   17424:	str	r3, [fp, #-36]	; 0xffffffdc
   17428:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1742c:	cmp	r3, #0
   17430:	bne	1743c <__assert_fail@plt+0x6594>
   17434:	sub	r3, fp, #16
   17438:	str	r3, [fp, #-24]	; 0xffffffe8
   1743c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17440:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17444:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17448:	ldr	r0, [fp, #-24]	; 0xffffffe8
   1744c:	bl	10d4c <mbrtowc@plt>
   17450:	str	r0, [fp, #-8]
   17454:	ldr	r3, [fp, #-8]
   17458:	cmn	r3, #3
   1745c:	bls	174a8 <__assert_fail@plt+0x6600>
   17460:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17464:	cmp	r3, #0
   17468:	beq	174a8 <__assert_fail@plt+0x6600>
   1746c:	mov	r0, #0
   17470:	bl	17a5c <__assert_fail@plt+0x6bb4>
   17474:	mov	r3, r0
   17478:	eor	r3, r3, #1
   1747c:	uxtb	r3, r3
   17480:	cmp	r3, #0
   17484:	beq	174a8 <__assert_fail@plt+0x6600>
   17488:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1748c:	ldrb	r3, [r3]
   17490:	strb	r3, [fp, #-9]
   17494:	ldrb	r2, [fp, #-9]
   17498:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1749c:	str	r2, [r3]
   174a0:	mov	r3, #1
   174a4:	b	174ac <__assert_fail@plt+0x6604>
   174a8:	ldr	r3, [fp, #-8]
   174ac:	mov	r0, r3
   174b0:	sub	sp, fp, #4
   174b4:	pop	{fp, pc}
   174b8:	push	{fp, lr}
   174bc:	add	fp, sp, #4
   174c0:	sub	sp, sp, #24
   174c4:	str	r0, [fp, #-16]
   174c8:	str	r1, [fp, #-20]	; 0xffffffec
   174cc:	str	r2, [fp, #-24]	; 0xffffffe8
   174d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   174d4:	cmp	r3, #0
   174d8:	beq	17514 <__assert_fail@plt+0x666c>
   174dc:	ldr	r1, [fp, #-24]	; 0xffffffe8
   174e0:	mvn	r0, #0
   174e4:	bl	17c60 <__assert_fail@plt+0x6db8>
   174e8:	mov	r3, r0
   174ec:	mov	r2, r3
   174f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   174f4:	cmp	r2, r3
   174f8:	bcs	17514 <__assert_fail@plt+0x666c>
   174fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   17500:	ldr	r2, [fp, #-24]	; 0xffffffe8
   17504:	mul	r3, r2, r3
   17508:	str	r3, [fp, #-8]
   1750c:	mov	r3, #1
   17510:	b	17528 <__assert_fail@plt+0x6680>
   17514:	ldr	r3, [fp, #-20]	; 0xffffffec
   17518:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1751c:	mul	r3, r2, r3
   17520:	str	r3, [fp, #-8]
   17524:	mov	r3, #0
   17528:	cmp	r3, #0
   1752c:	beq	17548 <__assert_fail@plt+0x66a0>
   17530:	bl	10df4 <__errno_location@plt>
   17534:	mov	r2, r0
   17538:	mov	r3, #12
   1753c:	str	r3, [r2]
   17540:	mov	r3, #0
   17544:	b	1755c <__assert_fail@plt+0x66b4>
   17548:	ldr	r3, [fp, #-8]
   1754c:	mov	r1, r3
   17550:	ldr	r0, [fp, #-16]
   17554:	bl	16d24 <__assert_fail@plt+0x5e7c>
   17558:	mov	r3, r0
   1755c:	mov	r0, r3
   17560:	sub	sp, fp, #4
   17564:	pop	{fp, pc}
   17568:	push	{fp}		; (str fp, [sp, #-4]!)
   1756c:	add	fp, sp, #0
   17570:	sub	sp, sp, #12
   17574:	str	r0, [fp, #-8]
   17578:	ldr	r3, [fp, #-8]
   1757c:	cmp	r3, #90	; 0x5a
   17580:	bgt	1759c <__assert_fail@plt+0x66f4>
   17584:	cmp	r3, #65	; 0x41
   17588:	bge	175a8 <__assert_fail@plt+0x6700>
   1758c:	sub	r3, r3, #48	; 0x30
   17590:	cmp	r3, #9
   17594:	bhi	175b0 <__assert_fail@plt+0x6708>
   17598:	b	175a8 <__assert_fail@plt+0x6700>
   1759c:	sub	r3, r3, #97	; 0x61
   175a0:	cmp	r3, #25
   175a4:	bhi	175b0 <__assert_fail@plt+0x6708>
   175a8:	mov	r3, #1
   175ac:	b	175b4 <__assert_fail@plt+0x670c>
   175b0:	mov	r3, #0
   175b4:	mov	r0, r3
   175b8:	add	sp, fp, #0
   175bc:	pop	{fp}		; (ldr fp, [sp], #4)
   175c0:	bx	lr
   175c4:	push	{fp}		; (str fp, [sp, #-4]!)
   175c8:	add	fp, sp, #0
   175cc:	sub	sp, sp, #12
   175d0:	str	r0, [fp, #-8]
   175d4:	ldr	r3, [fp, #-8]
   175d8:	cmp	r3, #65	; 0x41
   175dc:	blt	175fc <__assert_fail@plt+0x6754>
   175e0:	cmp	r3, #90	; 0x5a
   175e4:	ble	175f4 <__assert_fail@plt+0x674c>
   175e8:	sub	r3, r3, #97	; 0x61
   175ec:	cmp	r3, #25
   175f0:	bhi	175fc <__assert_fail@plt+0x6754>
   175f4:	mov	r3, #1
   175f8:	b	17600 <__assert_fail@plt+0x6758>
   175fc:	mov	r3, #0
   17600:	mov	r0, r3
   17604:	add	sp, fp, #0
   17608:	pop	{fp}		; (ldr fp, [sp], #4)
   1760c:	bx	lr
   17610:	push	{fp}		; (str fp, [sp, #-4]!)
   17614:	add	fp, sp, #0
   17618:	sub	sp, sp, #12
   1761c:	str	r0, [fp, #-8]
   17620:	ldr	r3, [fp, #-8]
   17624:	add	r3, r3, #0
   17628:	cmp	r3, #127	; 0x7f
   1762c:	bhi	17638 <__assert_fail@plt+0x6790>
   17630:	mov	r3, #1
   17634:	b	1763c <__assert_fail@plt+0x6794>
   17638:	mov	r3, #0
   1763c:	mov	r0, r3
   17640:	add	sp, fp, #0
   17644:	pop	{fp}		; (ldr fp, [sp], #4)
   17648:	bx	lr
   1764c:	push	{fp}		; (str fp, [sp, #-4]!)
   17650:	add	fp, sp, #0
   17654:	sub	sp, sp, #12
   17658:	str	r0, [fp, #-8]
   1765c:	ldr	r3, [fp, #-8]
   17660:	cmp	r3, #32
   17664:	beq	17674 <__assert_fail@plt+0x67cc>
   17668:	ldr	r3, [fp, #-8]
   1766c:	cmp	r3, #9
   17670:	bne	1767c <__assert_fail@plt+0x67d4>
   17674:	mov	r3, #1
   17678:	b	17680 <__assert_fail@plt+0x67d8>
   1767c:	mov	r3, #0
   17680:	and	r3, r3, #1
   17684:	uxtb	r3, r3
   17688:	mov	r0, r3
   1768c:	add	sp, fp, #0
   17690:	pop	{fp}		; (ldr fp, [sp], #4)
   17694:	bx	lr
   17698:	push	{fp}		; (str fp, [sp, #-4]!)
   1769c:	add	fp, sp, #0
   176a0:	sub	sp, sp, #12
   176a4:	str	r0, [fp, #-8]
   176a8:	ldr	r3, [fp, #-8]
   176ac:	cmp	r3, #0
   176b0:	blt	176cc <__assert_fail@plt+0x6824>
   176b4:	cmp	r3, #31
   176b8:	ble	176c4 <__assert_fail@plt+0x681c>
   176bc:	cmp	r3, #127	; 0x7f
   176c0:	bne	176cc <__assert_fail@plt+0x6824>
   176c4:	mov	r3, #1
   176c8:	b	176d0 <__assert_fail@plt+0x6828>
   176cc:	mov	r3, #0
   176d0:	mov	r0, r3
   176d4:	add	sp, fp, #0
   176d8:	pop	{fp}		; (ldr fp, [sp], #4)
   176dc:	bx	lr
   176e0:	push	{fp}		; (str fp, [sp, #-4]!)
   176e4:	add	fp, sp, #0
   176e8:	sub	sp, sp, #12
   176ec:	str	r0, [fp, #-8]
   176f0:	ldr	r3, [fp, #-8]
   176f4:	sub	r3, r3, #48	; 0x30
   176f8:	cmp	r3, #9
   176fc:	bhi	17708 <__assert_fail@plt+0x6860>
   17700:	mov	r3, #1
   17704:	b	1770c <__assert_fail@plt+0x6864>
   17708:	mov	r3, #0
   1770c:	mov	r0, r3
   17710:	add	sp, fp, #0
   17714:	pop	{fp}		; (ldr fp, [sp], #4)
   17718:	bx	lr
   1771c:	push	{fp}		; (str fp, [sp, #-4]!)
   17720:	add	fp, sp, #0
   17724:	sub	sp, sp, #12
   17728:	str	r0, [fp, #-8]
   1772c:	ldr	r3, [fp, #-8]
   17730:	sub	r3, r3, #33	; 0x21
   17734:	cmp	r3, #93	; 0x5d
   17738:	bhi	17744 <__assert_fail@plt+0x689c>
   1773c:	mov	r3, #1
   17740:	b	17748 <__assert_fail@plt+0x68a0>
   17744:	mov	r3, #0
   17748:	mov	r0, r3
   1774c:	add	sp, fp, #0
   17750:	pop	{fp}		; (ldr fp, [sp], #4)
   17754:	bx	lr
   17758:	push	{fp}		; (str fp, [sp, #-4]!)
   1775c:	add	fp, sp, #0
   17760:	sub	sp, sp, #12
   17764:	str	r0, [fp, #-8]
   17768:	ldr	r3, [fp, #-8]
   1776c:	sub	r3, r3, #97	; 0x61
   17770:	cmp	r3, #25
   17774:	bhi	17780 <__assert_fail@plt+0x68d8>
   17778:	mov	r3, #1
   1777c:	b	17784 <__assert_fail@plt+0x68dc>
   17780:	mov	r3, #0
   17784:	mov	r0, r3
   17788:	add	sp, fp, #0
   1778c:	pop	{fp}		; (ldr fp, [sp], #4)
   17790:	bx	lr
   17794:	push	{fp}		; (str fp, [sp, #-4]!)
   17798:	add	fp, sp, #0
   1779c:	sub	sp, sp, #12
   177a0:	str	r0, [fp, #-8]
   177a4:	ldr	r3, [fp, #-8]
   177a8:	sub	r3, r3, #32
   177ac:	cmp	r3, #94	; 0x5e
   177b0:	bhi	177bc <__assert_fail@plt+0x6914>
   177b4:	mov	r3, #1
   177b8:	b	177c0 <__assert_fail@plt+0x6918>
   177bc:	mov	r3, #0
   177c0:	mov	r0, r3
   177c4:	add	sp, fp, #0
   177c8:	pop	{fp}		; (ldr fp, [sp], #4)
   177cc:	bx	lr
   177d0:	push	{fp}		; (str fp, [sp, #-4]!)
   177d4:	add	fp, sp, #0
   177d8:	sub	sp, sp, #12
   177dc:	str	r0, [fp, #-8]
   177e0:	ldr	r3, [fp, #-8]
   177e4:	cmp	r3, #64	; 0x40
   177e8:	bgt	17804 <__assert_fail@plt+0x695c>
   177ec:	cmp	r3, #58	; 0x3a
   177f0:	bge	17820 <__assert_fail@plt+0x6978>
   177f4:	sub	r3, r3, #33	; 0x21
   177f8:	cmp	r3, #14
   177fc:	bhi	17828 <__assert_fail@plt+0x6980>
   17800:	b	17820 <__assert_fail@plt+0x6978>
   17804:	cmp	r3, #91	; 0x5b
   17808:	blt	17828 <__assert_fail@plt+0x6980>
   1780c:	cmp	r3, #96	; 0x60
   17810:	ble	17820 <__assert_fail@plt+0x6978>
   17814:	sub	r3, r3, #123	; 0x7b
   17818:	cmp	r3, #3
   1781c:	bhi	17828 <__assert_fail@plt+0x6980>
   17820:	mov	r3, #1
   17824:	b	1782c <__assert_fail@plt+0x6984>
   17828:	mov	r3, #0
   1782c:	mov	r0, r3
   17830:	add	sp, fp, #0
   17834:	pop	{fp}		; (ldr fp, [sp], #4)
   17838:	bx	lr
   1783c:	push	{fp}		; (str fp, [sp, #-4]!)
   17840:	add	fp, sp, #0
   17844:	sub	sp, sp, #12
   17848:	str	r0, [fp, #-8]
   1784c:	ldr	r3, [fp, #-8]
   17850:	cmp	r3, #9
   17854:	blt	17870 <__assert_fail@plt+0x69c8>
   17858:	cmp	r3, #13
   1785c:	ble	17868 <__assert_fail@plt+0x69c0>
   17860:	cmp	r3, #32
   17864:	bne	17870 <__assert_fail@plt+0x69c8>
   17868:	mov	r3, #1
   1786c:	b	17874 <__assert_fail@plt+0x69cc>
   17870:	mov	r3, #0
   17874:	mov	r0, r3
   17878:	add	sp, fp, #0
   1787c:	pop	{fp}		; (ldr fp, [sp], #4)
   17880:	bx	lr
   17884:	push	{fp}		; (str fp, [sp, #-4]!)
   17888:	add	fp, sp, #0
   1788c:	sub	sp, sp, #12
   17890:	str	r0, [fp, #-8]
   17894:	ldr	r3, [fp, #-8]
   17898:	sub	r3, r3, #65	; 0x41
   1789c:	cmp	r3, #25
   178a0:	bhi	178ac <__assert_fail@plt+0x6a04>
   178a4:	mov	r3, #1
   178a8:	b	178b0 <__assert_fail@plt+0x6a08>
   178ac:	mov	r3, #0
   178b0:	mov	r0, r3
   178b4:	add	sp, fp, #0
   178b8:	pop	{fp}		; (ldr fp, [sp], #4)
   178bc:	bx	lr
   178c0:	push	{fp}		; (str fp, [sp, #-4]!)
   178c4:	add	fp, sp, #0
   178c8:	sub	sp, sp, #12
   178cc:	str	r0, [fp, #-8]
   178d0:	ldr	r3, [fp, #-8]
   178d4:	sub	r3, r3, #48	; 0x30
   178d8:	cmp	r3, #54	; 0x36
   178dc:	addls	pc, pc, r3, lsl #2
   178e0:	b	179c8 <__assert_fail@plt+0x6b20>
   178e4:	b	179c0 <__assert_fail@plt+0x6b18>
   178e8:	b	179c0 <__assert_fail@plt+0x6b18>
   178ec:	b	179c0 <__assert_fail@plt+0x6b18>
   178f0:	b	179c0 <__assert_fail@plt+0x6b18>
   178f4:	b	179c0 <__assert_fail@plt+0x6b18>
   178f8:	b	179c0 <__assert_fail@plt+0x6b18>
   178fc:	b	179c0 <__assert_fail@plt+0x6b18>
   17900:	b	179c0 <__assert_fail@plt+0x6b18>
   17904:	b	179c0 <__assert_fail@plt+0x6b18>
   17908:	b	179c0 <__assert_fail@plt+0x6b18>
   1790c:	b	179c8 <__assert_fail@plt+0x6b20>
   17910:	b	179c8 <__assert_fail@plt+0x6b20>
   17914:	b	179c8 <__assert_fail@plt+0x6b20>
   17918:	b	179c8 <__assert_fail@plt+0x6b20>
   1791c:	b	179c8 <__assert_fail@plt+0x6b20>
   17920:	b	179c8 <__assert_fail@plt+0x6b20>
   17924:	b	179c8 <__assert_fail@plt+0x6b20>
   17928:	b	179c0 <__assert_fail@plt+0x6b18>
   1792c:	b	179c0 <__assert_fail@plt+0x6b18>
   17930:	b	179c0 <__assert_fail@plt+0x6b18>
   17934:	b	179c0 <__assert_fail@plt+0x6b18>
   17938:	b	179c0 <__assert_fail@plt+0x6b18>
   1793c:	b	179c0 <__assert_fail@plt+0x6b18>
   17940:	b	179c8 <__assert_fail@plt+0x6b20>
   17944:	b	179c8 <__assert_fail@plt+0x6b20>
   17948:	b	179c8 <__assert_fail@plt+0x6b20>
   1794c:	b	179c8 <__assert_fail@plt+0x6b20>
   17950:	b	179c8 <__assert_fail@plt+0x6b20>
   17954:	b	179c8 <__assert_fail@plt+0x6b20>
   17958:	b	179c8 <__assert_fail@plt+0x6b20>
   1795c:	b	179c8 <__assert_fail@plt+0x6b20>
   17960:	b	179c8 <__assert_fail@plt+0x6b20>
   17964:	b	179c8 <__assert_fail@plt+0x6b20>
   17968:	b	179c8 <__assert_fail@plt+0x6b20>
   1796c:	b	179c8 <__assert_fail@plt+0x6b20>
   17970:	b	179c8 <__assert_fail@plt+0x6b20>
   17974:	b	179c8 <__assert_fail@plt+0x6b20>
   17978:	b	179c8 <__assert_fail@plt+0x6b20>
   1797c:	b	179c8 <__assert_fail@plt+0x6b20>
   17980:	b	179c8 <__assert_fail@plt+0x6b20>
   17984:	b	179c8 <__assert_fail@plt+0x6b20>
   17988:	b	179c8 <__assert_fail@plt+0x6b20>
   1798c:	b	179c8 <__assert_fail@plt+0x6b20>
   17990:	b	179c8 <__assert_fail@plt+0x6b20>
   17994:	b	179c8 <__assert_fail@plt+0x6b20>
   17998:	b	179c8 <__assert_fail@plt+0x6b20>
   1799c:	b	179c8 <__assert_fail@plt+0x6b20>
   179a0:	b	179c8 <__assert_fail@plt+0x6b20>
   179a4:	b	179c8 <__assert_fail@plt+0x6b20>
   179a8:	b	179c0 <__assert_fail@plt+0x6b18>
   179ac:	b	179c0 <__assert_fail@plt+0x6b18>
   179b0:	b	179c0 <__assert_fail@plt+0x6b18>
   179b4:	b	179c0 <__assert_fail@plt+0x6b18>
   179b8:	b	179c0 <__assert_fail@plt+0x6b18>
   179bc:	b	179c0 <__assert_fail@plt+0x6b18>
   179c0:	mov	r3, #1
   179c4:	b	179cc <__assert_fail@plt+0x6b24>
   179c8:	mov	r3, #0
   179cc:	mov	r0, r3
   179d0:	add	sp, fp, #0
   179d4:	pop	{fp}		; (ldr fp, [sp], #4)
   179d8:	bx	lr
   179dc:	push	{fp}		; (str fp, [sp, #-4]!)
   179e0:	add	fp, sp, #0
   179e4:	sub	sp, sp, #12
   179e8:	str	r0, [fp, #-8]
   179ec:	ldr	r3, [fp, #-8]
   179f0:	sub	r3, r3, #65	; 0x41
   179f4:	cmp	r3, #25
   179f8:	bhi	17a08 <__assert_fail@plt+0x6b60>
   179fc:	ldr	r3, [fp, #-8]
   17a00:	add	r3, r3, #32
   17a04:	b	17a0c <__assert_fail@plt+0x6b64>
   17a08:	ldr	r3, [fp, #-8]
   17a0c:	mov	r0, r3
   17a10:	add	sp, fp, #0
   17a14:	pop	{fp}		; (ldr fp, [sp], #4)
   17a18:	bx	lr
   17a1c:	push	{fp}		; (str fp, [sp, #-4]!)
   17a20:	add	fp, sp, #0
   17a24:	sub	sp, sp, #12
   17a28:	str	r0, [fp, #-8]
   17a2c:	ldr	r3, [fp, #-8]
   17a30:	sub	r3, r3, #97	; 0x61
   17a34:	cmp	r3, #25
   17a38:	bhi	17a48 <__assert_fail@plt+0x6ba0>
   17a3c:	ldr	r3, [fp, #-8]
   17a40:	sub	r3, r3, #32
   17a44:	b	17a4c <__assert_fail@plt+0x6ba4>
   17a48:	ldr	r3, [fp, #-8]
   17a4c:	mov	r0, r3
   17a50:	add	sp, fp, #0
   17a54:	pop	{fp}		; (ldr fp, [sp], #4)
   17a58:	bx	lr
   17a5c:	push	{fp, lr}
   17a60:	add	fp, sp, #4
   17a64:	sub	sp, sp, #272	; 0x110
   17a68:	str	r0, [fp, #-272]	; 0xfffffef0
   17a6c:	sub	r3, fp, #264	; 0x108
   17a70:	ldr	r2, [pc, #116]	; 17aec <__assert_fail@plt+0x6c44>
   17a74:	mov	r1, r3
   17a78:	ldr	r0, [fp, #-272]	; 0xfffffef0
   17a7c:	bl	17c00 <__assert_fail@plt+0x6d58>
   17a80:	mov	r3, r0
   17a84:	cmp	r3, #0
   17a88:	beq	17a94 <__assert_fail@plt+0x6bec>
   17a8c:	mov	r3, #0
   17a90:	b	17ae0 <__assert_fail@plt+0x6c38>
   17a94:	sub	r3, fp, #264	; 0x108
   17a98:	ldr	r1, [pc, #80]	; 17af0 <__assert_fail@plt+0x6c48>
   17a9c:	mov	r0, r3
   17aa0:	bl	10c68 <strcmp@plt>
   17aa4:	mov	r3, r0
   17aa8:	cmp	r3, #0
   17aac:	beq	17ad4 <__assert_fail@plt+0x6c2c>
   17ab0:	sub	r3, fp, #264	; 0x108
   17ab4:	ldr	r1, [pc, #56]	; 17af4 <__assert_fail@plt+0x6c4c>
   17ab8:	mov	r0, r3
   17abc:	bl	10c68 <strcmp@plt>
   17ac0:	mov	r3, r0
   17ac4:	cmp	r3, #0
   17ac8:	beq	17ad4 <__assert_fail@plt+0x6c2c>
   17acc:	mov	r3, #1
   17ad0:	b	17ad8 <__assert_fail@plt+0x6c30>
   17ad4:	mov	r3, #0
   17ad8:	and	r3, r3, #1
   17adc:	uxtb	r3, r3
   17ae0:	mov	r0, r3
   17ae4:	sub	sp, fp, #4
   17ae8:	pop	{fp, pc}
   17aec:	andeq	r0, r0, r1, lsl #2
   17af0:			; <UNDEFINED> instruction: 0x000191b4
   17af4:			; <UNDEFINED> instruction: 0x000191b8
   17af8:	push	{fp, lr}
   17afc:	add	fp, sp, #4
   17b00:	sub	sp, sp, #16
   17b04:	str	r0, [fp, #-16]
   17b08:	mov	r1, #0
   17b0c:	ldr	r0, [fp, #-16]
   17b10:	bl	10e48 <setlocale@plt>
   17b14:	str	r0, [fp, #-8]
   17b18:	ldr	r3, [fp, #-8]
   17b1c:	mov	r0, r3
   17b20:	sub	sp, fp, #4
   17b24:	pop	{fp, pc}
   17b28:	push	{fp, lr}
   17b2c:	add	fp, sp, #4
   17b30:	sub	sp, sp, #24
   17b34:	str	r0, [fp, #-16]
   17b38:	str	r1, [fp, #-20]	; 0xffffffec
   17b3c:	str	r2, [fp, #-24]	; 0xffffffe8
   17b40:	ldr	r0, [fp, #-16]
   17b44:	bl	17af8 <__assert_fail@plt+0x6c50>
   17b48:	str	r0, [fp, #-8]
   17b4c:	ldr	r3, [fp, #-8]
   17b50:	cmp	r3, #0
   17b54:	bne	17b78 <__assert_fail@plt+0x6cd0>
   17b58:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b5c:	cmp	r3, #0
   17b60:	beq	17b70 <__assert_fail@plt+0x6cc8>
   17b64:	ldr	r3, [fp, #-20]	; 0xffffffec
   17b68:	mov	r2, #0
   17b6c:	strb	r2, [r3]
   17b70:	mov	r3, #22
   17b74:	b	17bf4 <__assert_fail@plt+0x6d4c>
   17b78:	ldr	r0, [fp, #-8]
   17b7c:	bl	10dd0 <strlen@plt>
   17b80:	str	r0, [fp, #-12]
   17b84:	ldr	r2, [fp, #-12]
   17b88:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17b8c:	cmp	r2, r3
   17b90:	bcs	17bb4 <__assert_fail@plt+0x6d0c>
   17b94:	ldr	r3, [fp, #-12]
   17b98:	add	r3, r3, #1
   17b9c:	mov	r2, r3
   17ba0:	ldr	r1, [fp, #-8]
   17ba4:	ldr	r0, [fp, #-20]	; 0xffffffec
   17ba8:	bl	10ca4 <memcpy@plt>
   17bac:	mov	r3, #0
   17bb0:	b	17bf4 <__assert_fail@plt+0x6d4c>
   17bb4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17bb8:	cmp	r3, #0
   17bbc:	beq	17bf0 <__assert_fail@plt+0x6d48>
   17bc0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17bc4:	sub	r3, r3, #1
   17bc8:	mov	r2, r3
   17bcc:	ldr	r1, [fp, #-8]
   17bd0:	ldr	r0, [fp, #-20]	; 0xffffffec
   17bd4:	bl	10ca4 <memcpy@plt>
   17bd8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17bdc:	sub	r3, r3, #1
   17be0:	ldr	r2, [fp, #-20]	; 0xffffffec
   17be4:	add	r3, r2, r3
   17be8:	mov	r2, #0
   17bec:	strb	r2, [r3]
   17bf0:	mov	r3, #34	; 0x22
   17bf4:	mov	r0, r3
   17bf8:	sub	sp, fp, #4
   17bfc:	pop	{fp, pc}
   17c00:	push	{fp, lr}
   17c04:	add	fp, sp, #4
   17c08:	sub	sp, sp, #16
   17c0c:	str	r0, [fp, #-8]
   17c10:	str	r1, [fp, #-12]
   17c14:	str	r2, [fp, #-16]
   17c18:	ldr	r2, [fp, #-16]
   17c1c:	ldr	r1, [fp, #-12]
   17c20:	ldr	r0, [fp, #-8]
   17c24:	bl	17b28 <__assert_fail@plt+0x6c80>
   17c28:	mov	r3, r0
   17c2c:	mov	r0, r3
   17c30:	sub	sp, fp, #4
   17c34:	pop	{fp, pc}
   17c38:	push	{fp, lr}
   17c3c:	add	fp, sp, #4
   17c40:	sub	sp, sp, #8
   17c44:	str	r0, [fp, #-8]
   17c48:	ldr	r0, [fp, #-8]
   17c4c:	bl	17af8 <__assert_fail@plt+0x6c50>
   17c50:	mov	r3, r0
   17c54:	mov	r0, r3
   17c58:	sub	sp, fp, #4
   17c5c:	pop	{fp, pc}
   17c60:	subs	r2, r1, #1
   17c64:	bxeq	lr
   17c68:	bcc	17e40 <__assert_fail@plt+0x6f98>
   17c6c:	cmp	r0, r1
   17c70:	bls	17e24 <__assert_fail@plt+0x6f7c>
   17c74:	tst	r1, r2
   17c78:	beq	17e30 <__assert_fail@plt+0x6f88>
   17c7c:	clz	r3, r0
   17c80:	clz	r2, r1
   17c84:	sub	r3, r2, r3
   17c88:	rsbs	r3, r3, #31
   17c8c:	addne	r3, r3, r3, lsl #1
   17c90:	mov	r2, #0
   17c94:	addne	pc, pc, r3, lsl #2
   17c98:	nop			; (mov r0, r0)
   17c9c:	cmp	r0, r1, lsl #31
   17ca0:	adc	r2, r2, r2
   17ca4:	subcs	r0, r0, r1, lsl #31
   17ca8:	cmp	r0, r1, lsl #30
   17cac:	adc	r2, r2, r2
   17cb0:	subcs	r0, r0, r1, lsl #30
   17cb4:	cmp	r0, r1, lsl #29
   17cb8:	adc	r2, r2, r2
   17cbc:	subcs	r0, r0, r1, lsl #29
   17cc0:	cmp	r0, r1, lsl #28
   17cc4:	adc	r2, r2, r2
   17cc8:	subcs	r0, r0, r1, lsl #28
   17ccc:	cmp	r0, r1, lsl #27
   17cd0:	adc	r2, r2, r2
   17cd4:	subcs	r0, r0, r1, lsl #27
   17cd8:	cmp	r0, r1, lsl #26
   17cdc:	adc	r2, r2, r2
   17ce0:	subcs	r0, r0, r1, lsl #26
   17ce4:	cmp	r0, r1, lsl #25
   17ce8:	adc	r2, r2, r2
   17cec:	subcs	r0, r0, r1, lsl #25
   17cf0:	cmp	r0, r1, lsl #24
   17cf4:	adc	r2, r2, r2
   17cf8:	subcs	r0, r0, r1, lsl #24
   17cfc:	cmp	r0, r1, lsl #23
   17d00:	adc	r2, r2, r2
   17d04:	subcs	r0, r0, r1, lsl #23
   17d08:	cmp	r0, r1, lsl #22
   17d0c:	adc	r2, r2, r2
   17d10:	subcs	r0, r0, r1, lsl #22
   17d14:	cmp	r0, r1, lsl #21
   17d18:	adc	r2, r2, r2
   17d1c:	subcs	r0, r0, r1, lsl #21
   17d20:	cmp	r0, r1, lsl #20
   17d24:	adc	r2, r2, r2
   17d28:	subcs	r0, r0, r1, lsl #20
   17d2c:	cmp	r0, r1, lsl #19
   17d30:	adc	r2, r2, r2
   17d34:	subcs	r0, r0, r1, lsl #19
   17d38:	cmp	r0, r1, lsl #18
   17d3c:	adc	r2, r2, r2
   17d40:	subcs	r0, r0, r1, lsl #18
   17d44:	cmp	r0, r1, lsl #17
   17d48:	adc	r2, r2, r2
   17d4c:	subcs	r0, r0, r1, lsl #17
   17d50:	cmp	r0, r1, lsl #16
   17d54:	adc	r2, r2, r2
   17d58:	subcs	r0, r0, r1, lsl #16
   17d5c:	cmp	r0, r1, lsl #15
   17d60:	adc	r2, r2, r2
   17d64:	subcs	r0, r0, r1, lsl #15
   17d68:	cmp	r0, r1, lsl #14
   17d6c:	adc	r2, r2, r2
   17d70:	subcs	r0, r0, r1, lsl #14
   17d74:	cmp	r0, r1, lsl #13
   17d78:	adc	r2, r2, r2
   17d7c:	subcs	r0, r0, r1, lsl #13
   17d80:	cmp	r0, r1, lsl #12
   17d84:	adc	r2, r2, r2
   17d88:	subcs	r0, r0, r1, lsl #12
   17d8c:	cmp	r0, r1, lsl #11
   17d90:	adc	r2, r2, r2
   17d94:	subcs	r0, r0, r1, lsl #11
   17d98:	cmp	r0, r1, lsl #10
   17d9c:	adc	r2, r2, r2
   17da0:	subcs	r0, r0, r1, lsl #10
   17da4:	cmp	r0, r1, lsl #9
   17da8:	adc	r2, r2, r2
   17dac:	subcs	r0, r0, r1, lsl #9
   17db0:	cmp	r0, r1, lsl #8
   17db4:	adc	r2, r2, r2
   17db8:	subcs	r0, r0, r1, lsl #8
   17dbc:	cmp	r0, r1, lsl #7
   17dc0:	adc	r2, r2, r2
   17dc4:	subcs	r0, r0, r1, lsl #7
   17dc8:	cmp	r0, r1, lsl #6
   17dcc:	adc	r2, r2, r2
   17dd0:	subcs	r0, r0, r1, lsl #6
   17dd4:	cmp	r0, r1, lsl #5
   17dd8:	adc	r2, r2, r2
   17ddc:	subcs	r0, r0, r1, lsl #5
   17de0:	cmp	r0, r1, lsl #4
   17de4:	adc	r2, r2, r2
   17de8:	subcs	r0, r0, r1, lsl #4
   17dec:	cmp	r0, r1, lsl #3
   17df0:	adc	r2, r2, r2
   17df4:	subcs	r0, r0, r1, lsl #3
   17df8:	cmp	r0, r1, lsl #2
   17dfc:	adc	r2, r2, r2
   17e00:	subcs	r0, r0, r1, lsl #2
   17e04:	cmp	r0, r1, lsl #1
   17e08:	adc	r2, r2, r2
   17e0c:	subcs	r0, r0, r1, lsl #1
   17e10:	cmp	r0, r1
   17e14:	adc	r2, r2, r2
   17e18:	subcs	r0, r0, r1
   17e1c:	mov	r0, r2
   17e20:	bx	lr
   17e24:	moveq	r0, #1
   17e28:	movne	r0, #0
   17e2c:	bx	lr
   17e30:	clz	r2, r1
   17e34:	rsb	r2, r2, #31
   17e38:	lsr	r0, r0, r2
   17e3c:	bx	lr
   17e40:	cmp	r0, #0
   17e44:	mvnne	r0, #0
   17e48:	b	18180 <__assert_fail@plt+0x72d8>
   17e4c:	cmp	r1, #0
   17e50:	beq	17e40 <__assert_fail@plt+0x6f98>
   17e54:	push	{r0, r1, lr}
   17e58:	bl	17c60 <__assert_fail@plt+0x6db8>
   17e5c:	pop	{r1, r2, lr}
   17e60:	mul	r3, r2, r0
   17e64:	sub	r1, r1, r3
   17e68:	bx	lr
   17e6c:	cmp	r1, #0
   17e70:	beq	1807c <__assert_fail@plt+0x71d4>
   17e74:	eor	ip, r0, r1
   17e78:	rsbmi	r1, r1, #0
   17e7c:	subs	r2, r1, #1
   17e80:	beq	18048 <__assert_fail@plt+0x71a0>
   17e84:	movs	r3, r0
   17e88:	rsbmi	r3, r0, #0
   17e8c:	cmp	r3, r1
   17e90:	bls	18054 <__assert_fail@plt+0x71ac>
   17e94:	tst	r1, r2
   17e98:	beq	18064 <__assert_fail@plt+0x71bc>
   17e9c:	clz	r2, r3
   17ea0:	clz	r0, r1
   17ea4:	sub	r2, r0, r2
   17ea8:	rsbs	r2, r2, #31
   17eac:	addne	r2, r2, r2, lsl #1
   17eb0:	mov	r0, #0
   17eb4:	addne	pc, pc, r2, lsl #2
   17eb8:	nop			; (mov r0, r0)
   17ebc:	cmp	r3, r1, lsl #31
   17ec0:	adc	r0, r0, r0
   17ec4:	subcs	r3, r3, r1, lsl #31
   17ec8:	cmp	r3, r1, lsl #30
   17ecc:	adc	r0, r0, r0
   17ed0:	subcs	r3, r3, r1, lsl #30
   17ed4:	cmp	r3, r1, lsl #29
   17ed8:	adc	r0, r0, r0
   17edc:	subcs	r3, r3, r1, lsl #29
   17ee0:	cmp	r3, r1, lsl #28
   17ee4:	adc	r0, r0, r0
   17ee8:	subcs	r3, r3, r1, lsl #28
   17eec:	cmp	r3, r1, lsl #27
   17ef0:	adc	r0, r0, r0
   17ef4:	subcs	r3, r3, r1, lsl #27
   17ef8:	cmp	r3, r1, lsl #26
   17efc:	adc	r0, r0, r0
   17f00:	subcs	r3, r3, r1, lsl #26
   17f04:	cmp	r3, r1, lsl #25
   17f08:	adc	r0, r0, r0
   17f0c:	subcs	r3, r3, r1, lsl #25
   17f10:	cmp	r3, r1, lsl #24
   17f14:	adc	r0, r0, r0
   17f18:	subcs	r3, r3, r1, lsl #24
   17f1c:	cmp	r3, r1, lsl #23
   17f20:	adc	r0, r0, r0
   17f24:	subcs	r3, r3, r1, lsl #23
   17f28:	cmp	r3, r1, lsl #22
   17f2c:	adc	r0, r0, r0
   17f30:	subcs	r3, r3, r1, lsl #22
   17f34:	cmp	r3, r1, lsl #21
   17f38:	adc	r0, r0, r0
   17f3c:	subcs	r3, r3, r1, lsl #21
   17f40:	cmp	r3, r1, lsl #20
   17f44:	adc	r0, r0, r0
   17f48:	subcs	r3, r3, r1, lsl #20
   17f4c:	cmp	r3, r1, lsl #19
   17f50:	adc	r0, r0, r0
   17f54:	subcs	r3, r3, r1, lsl #19
   17f58:	cmp	r3, r1, lsl #18
   17f5c:	adc	r0, r0, r0
   17f60:	subcs	r3, r3, r1, lsl #18
   17f64:	cmp	r3, r1, lsl #17
   17f68:	adc	r0, r0, r0
   17f6c:	subcs	r3, r3, r1, lsl #17
   17f70:	cmp	r3, r1, lsl #16
   17f74:	adc	r0, r0, r0
   17f78:	subcs	r3, r3, r1, lsl #16
   17f7c:	cmp	r3, r1, lsl #15
   17f80:	adc	r0, r0, r0
   17f84:	subcs	r3, r3, r1, lsl #15
   17f88:	cmp	r3, r1, lsl #14
   17f8c:	adc	r0, r0, r0
   17f90:	subcs	r3, r3, r1, lsl #14
   17f94:	cmp	r3, r1, lsl #13
   17f98:	adc	r0, r0, r0
   17f9c:	subcs	r3, r3, r1, lsl #13
   17fa0:	cmp	r3, r1, lsl #12
   17fa4:	adc	r0, r0, r0
   17fa8:	subcs	r3, r3, r1, lsl #12
   17fac:	cmp	r3, r1, lsl #11
   17fb0:	adc	r0, r0, r0
   17fb4:	subcs	r3, r3, r1, lsl #11
   17fb8:	cmp	r3, r1, lsl #10
   17fbc:	adc	r0, r0, r0
   17fc0:	subcs	r3, r3, r1, lsl #10
   17fc4:	cmp	r3, r1, lsl #9
   17fc8:	adc	r0, r0, r0
   17fcc:	subcs	r3, r3, r1, lsl #9
   17fd0:	cmp	r3, r1, lsl #8
   17fd4:	adc	r0, r0, r0
   17fd8:	subcs	r3, r3, r1, lsl #8
   17fdc:	cmp	r3, r1, lsl #7
   17fe0:	adc	r0, r0, r0
   17fe4:	subcs	r3, r3, r1, lsl #7
   17fe8:	cmp	r3, r1, lsl #6
   17fec:	adc	r0, r0, r0
   17ff0:	subcs	r3, r3, r1, lsl #6
   17ff4:	cmp	r3, r1, lsl #5
   17ff8:	adc	r0, r0, r0
   17ffc:	subcs	r3, r3, r1, lsl #5
   18000:	cmp	r3, r1, lsl #4
   18004:	adc	r0, r0, r0
   18008:	subcs	r3, r3, r1, lsl #4
   1800c:	cmp	r3, r1, lsl #3
   18010:	adc	r0, r0, r0
   18014:	subcs	r3, r3, r1, lsl #3
   18018:	cmp	r3, r1, lsl #2
   1801c:	adc	r0, r0, r0
   18020:	subcs	r3, r3, r1, lsl #2
   18024:	cmp	r3, r1, lsl #1
   18028:	adc	r0, r0, r0
   1802c:	subcs	r3, r3, r1, lsl #1
   18030:	cmp	r3, r1
   18034:	adc	r0, r0, r0
   18038:	subcs	r3, r3, r1
   1803c:	cmp	ip, #0
   18040:	rsbmi	r0, r0, #0
   18044:	bx	lr
   18048:	teq	ip, r0
   1804c:	rsbmi	r0, r0, #0
   18050:	bx	lr
   18054:	movcc	r0, #0
   18058:	asreq	r0, ip, #31
   1805c:	orreq	r0, r0, #1
   18060:	bx	lr
   18064:	clz	r2, r1
   18068:	rsb	r2, r2, #31
   1806c:	cmp	ip, #0
   18070:	lsr	r0, r3, r2
   18074:	rsbmi	r0, r0, #0
   18078:	bx	lr
   1807c:	cmp	r0, #0
   18080:	mvngt	r0, #-2147483648	; 0x80000000
   18084:	movlt	r0, #-2147483648	; 0x80000000
   18088:	b	18180 <__assert_fail@plt+0x72d8>
   1808c:	cmp	r1, #0
   18090:	beq	1807c <__assert_fail@plt+0x71d4>
   18094:	push	{r0, r1, lr}
   18098:	bl	17e74 <__assert_fail@plt+0x6fcc>
   1809c:	pop	{r1, r2, lr}
   180a0:	mul	r3, r2, r0
   180a4:	sub	r1, r1, r3
   180a8:	bx	lr
   180ac:	cmp	r3, #0
   180b0:	cmpeq	r2, #0
   180b4:	bne	180d8 <__assert_fail@plt+0x7230>
   180b8:	cmp	r1, #0
   180bc:	movlt	r1, #-2147483648	; 0x80000000
   180c0:	movlt	r0, #0
   180c4:	blt	180d4 <__assert_fail@plt+0x722c>
   180c8:	cmpeq	r0, #0
   180cc:	mvnne	r1, #-2147483648	; 0x80000000
   180d0:	mvnne	r0, #0
   180d4:	b	18180 <__assert_fail@plt+0x72d8>
   180d8:	sub	sp, sp, #8
   180dc:	push	{sp, lr}
   180e0:	cmp	r1, #0
   180e4:	blt	18104 <__assert_fail@plt+0x725c>
   180e8:	cmp	r3, #0
   180ec:	blt	18138 <__assert_fail@plt+0x7290>
   180f0:	bl	18190 <__assert_fail@plt+0x72e8>
   180f4:	ldr	lr, [sp, #4]
   180f8:	add	sp, sp, #8
   180fc:	pop	{r2, r3}
   18100:	bx	lr
   18104:	rsbs	r0, r0, #0
   18108:	sbc	r1, r1, r1, lsl #1
   1810c:	cmp	r3, #0
   18110:	blt	1815c <__assert_fail@plt+0x72b4>
   18114:	bl	18190 <__assert_fail@plt+0x72e8>
   18118:	ldr	lr, [sp, #4]
   1811c:	add	sp, sp, #8
   18120:	pop	{r2, r3}
   18124:	rsbs	r0, r0, #0
   18128:	sbc	r1, r1, r1, lsl #1
   1812c:	rsbs	r2, r2, #0
   18130:	sbc	r3, r3, r3, lsl #1
   18134:	bx	lr
   18138:	rsbs	r2, r2, #0
   1813c:	sbc	r3, r3, r3, lsl #1
   18140:	bl	18190 <__assert_fail@plt+0x72e8>
   18144:	ldr	lr, [sp, #4]
   18148:	add	sp, sp, #8
   1814c:	pop	{r2, r3}
   18150:	rsbs	r0, r0, #0
   18154:	sbc	r1, r1, r1, lsl #1
   18158:	bx	lr
   1815c:	rsbs	r2, r2, #0
   18160:	sbc	r3, r3, r3, lsl #1
   18164:	bl	18190 <__assert_fail@plt+0x72e8>
   18168:	ldr	lr, [sp, #4]
   1816c:	add	sp, sp, #8
   18170:	pop	{r2, r3}
   18174:	rsbs	r2, r2, #0
   18178:	sbc	r3, r3, r3, lsl #1
   1817c:	bx	lr
   18180:	push	{r1, lr}
   18184:	mov	r0, #8
   18188:	bl	10c5c <raise@plt>
   1818c:	pop	{r1, pc}
   18190:	cmp	r1, r3
   18194:	push	{r4, r5, r6, r7, r8, r9, lr}
   18198:	cmpeq	r0, r2
   1819c:	mov	r4, r0
   181a0:	mov	r5, r1
   181a4:	ldr	r9, [sp, #28]
   181a8:	movcc	r0, #0
   181ac:	movcc	r1, #0
   181b0:	bcc	182a8 <__assert_fail@plt+0x7400>
   181b4:	cmp	r3, #0
   181b8:	clzeq	ip, r2
   181bc:	clzne	ip, r3
   181c0:	addeq	ip, ip, #32
   181c4:	cmp	r5, #0
   181c8:	clzeq	r1, r4
   181cc:	addeq	r1, r1, #32
   181d0:	clzne	r1, r5
   181d4:	sub	ip, ip, r1
   181d8:	sub	lr, ip, #32
   181dc:	lsl	r7, r3, ip
   181e0:	rsb	r8, ip, #32
   181e4:	orr	r7, r7, r2, lsl lr
   181e8:	orr	r7, r7, r2, lsr r8
   181ec:	lsl	r6, r2, ip
   181f0:	cmp	r5, r7
   181f4:	cmpeq	r4, r6
   181f8:	movcc	r0, #0
   181fc:	movcc	r1, #0
   18200:	bcc	1821c <__assert_fail@plt+0x7374>
   18204:	mov	r3, #1
   18208:	subs	r4, r4, r6
   1820c:	lsl	r1, r3, lr
   18210:	lsl	r0, r3, ip
   18214:	orr	r1, r1, r3, lsr r8
   18218:	sbc	r5, r5, r7
   1821c:	cmp	ip, #0
   18220:	beq	182a8 <__assert_fail@plt+0x7400>
   18224:	lsrs	r3, r7, #1
   18228:	rrx	r2, r6
   1822c:	mov	r6, ip
   18230:	b	18254 <__assert_fail@plt+0x73ac>
   18234:	subs	r4, r4, r2
   18238:	sbc	r5, r5, r3
   1823c:	adds	r4, r4, r4
   18240:	adc	r5, r5, r5
   18244:	adds	r4, r4, #1
   18248:	adc	r5, r5, #0
   1824c:	subs	r6, r6, #1
   18250:	beq	18270 <__assert_fail@plt+0x73c8>
   18254:	cmp	r5, r3
   18258:	cmpeq	r4, r2
   1825c:	bcs	18234 <__assert_fail@plt+0x738c>
   18260:	adds	r4, r4, r4
   18264:	adc	r5, r5, r5
   18268:	subs	r6, r6, #1
   1826c:	bne	18254 <__assert_fail@plt+0x73ac>
   18270:	lsr	r6, r4, ip
   18274:	lsr	r7, r5, ip
   18278:	orr	r6, r6, r5, lsl r8
   1827c:	adds	r2, r0, r4
   18280:	orr	r6, r6, r5, lsr lr
   18284:	adc	r3, r1, r5
   18288:	lsl	r1, r7, ip
   1828c:	orr	r1, r1, r6, lsl lr
   18290:	lsl	r0, r6, ip
   18294:	orr	r1, r1, r6, lsr r8
   18298:	subs	r0, r2, r0
   1829c:	mov	r4, r6
   182a0:	mov	r5, r7
   182a4:	sbc	r1, r3, r1
   182a8:	cmp	r9, #0
   182ac:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   182b0:	strd	r4, [r9]
   182b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   182b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   182bc:	mov	r7, r0
   182c0:	ldr	r6, [pc, #72]	; 18310 <__assert_fail@plt+0x7468>
   182c4:	ldr	r5, [pc, #72]	; 18314 <__assert_fail@plt+0x746c>
   182c8:	add	r6, pc, r6
   182cc:	add	r5, pc, r5
   182d0:	sub	r6, r6, r5
   182d4:	mov	r8, r1
   182d8:	mov	r9, r2
   182dc:	bl	10c24 <calloc@plt-0x20>
   182e0:	asrs	r6, r6, #2
   182e4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   182e8:	mov	r4, #0
   182ec:	add	r4, r4, #1
   182f0:	ldr	r3, [r5], #4
   182f4:	mov	r2, r9
   182f8:	mov	r1, r8
   182fc:	mov	r0, r7
   18300:	blx	r3
   18304:	cmp	r6, r4
   18308:	bne	182ec <__assert_fail@plt+0x7444>
   1830c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18310:	andeq	r1, r1, r0, asr #24
   18314:	andeq	r1, r1, r8, lsr ip
   18318:	bx	lr
   1831c:	ldr	r3, [pc, #12]	; 18330 <__assert_fail@plt+0x7488>
   18320:	mov	r1, #0
   18324:	add	r3, pc, r3
   18328:	ldr	r2, [r3]
   1832c:	b	10e00 <__cxa_atexit@plt>
   18330:			; <UNDEFINED> instruction: 0x00011db8
   18334:	mov	r2, r1
   18338:	mov	r1, r0
   1833c:	mov	r0, #3
   18340:	b	10e78 <__xstat64@plt>
   18344:	mov	r2, r1
   18348:	mov	r1, r0
   1834c:	mov	r0, #3
   18350:	b	10d04 <__fxstat64@plt>

Disassembly of section .fini:

00018354 <.fini>:
   18354:	push	{r3, lr}
   18358:	pop	{r3, pc}
