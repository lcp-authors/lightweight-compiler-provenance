
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

00011f94 <.init>:
   11f94:	push	{r3, lr}
   11f98:	bl	120d4 <_start@@Base+0x3c>
   11f9c:	pop	{r3, pc}

Disassembly of section .plt:

00011fa0 <printf@plt-0x14>:
   11fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   11fa4:	ldr	lr, [pc, #4]	; 11fb0 <printf@plt-0x4>
   11fa8:	add	lr, pc, lr
   11fac:	ldr	pc, [lr, #8]!
   11fb0:	andeq	sl, r1, r0, asr r0

00011fb4 <printf@plt>:
   11fb4:	add	ip, pc, #0, 12
   11fb8:	add	ip, ip, #106496	; 0x1a000
   11fbc:	ldr	pc, [ip, #80]!	; 0x50

00011fc0 <free@plt>:
   11fc0:	add	ip, pc, #0, 12
   11fc4:	add	ip, ip, #106496	; 0x1a000
   11fc8:	ldr	pc, [ip, #72]!	; 0x48

00011fcc <memcpy@plt>:
   11fcc:	add	ip, pc, #0, 12
   11fd0:	add	ip, ip, #106496	; 0x1a000
   11fd4:	ldr	pc, [ip, #64]!	; 0x40

00011fd8 <memcmp@plt>:
   11fd8:	add	ip, pc, #0, 12
   11fdc:	add	ip, ip, #106496	; 0x1a000
   11fe0:	ldr	pc, [ip, #56]!	; 0x38

00011fe4 <realloc@plt>:
   11fe4:	add	ip, pc, #0, 12
   11fe8:	add	ip, ip, #106496	; 0x1a000
   11fec:	ldr	pc, [ip, #48]!	; 0x30

00011ff0 <fwrite@plt>:
   11ff0:	add	ip, pc, #0, 12
   11ff4:	add	ip, ip, #106496	; 0x1a000
   11ff8:	ldr	pc, [ip, #40]!	; 0x28

00011ffc <puts@plt>:
   11ffc:	add	ip, pc, #0, 12
   12000:	add	ip, ip, #106496	; 0x1a000
   12004:	ldr	pc, [ip, #32]!

00012008 <malloc@plt>:
   12008:	add	ip, pc, #0, 12
   1200c:	add	ip, ip, #106496	; 0x1a000
   12010:	ldr	pc, [ip, #24]!

00012014 <__libc_start_main@plt>:
   12014:	add	ip, pc, #0, 12
   12018:	add	ip, ip, #106496	; 0x1a000
   1201c:	ldr	pc, [ip, #16]!

00012020 <__gmon_start__@plt>:
   12020:	add	ip, pc, #0, 12
   12024:	add	ip, ip, #106496	; 0x1a000
   12028:	ldr	pc, [ip, #8]!

0001202c <strlen@plt>:
   1202c:	add	ip, pc, #0, 12
   12030:	add	ip, ip, #106496	; 0x1a000
   12034:	ldr	pc, [ip, #0]!

00012038 <fprintf@plt>:
   12038:	add	ip, pc, #0, 12
   1203c:	add	ip, ip, #102400	; 0x19000
   12040:	ldr	pc, [ip, #4088]!	; 0xff8

00012044 <posix_memalign@plt>:
   12044:	add	ip, pc, #0, 12
   12048:	add	ip, ip, #102400	; 0x19000
   1204c:	ldr	pc, [ip, #4080]!	; 0xff0

00012050 <memset@plt>:
   12050:	add	ip, pc, #0, 12
   12054:	add	ip, ip, #102400	; 0x19000
   12058:	ldr	pc, [ip, #4072]!	; 0xfe8

0001205c <strncpy@plt>:
   1205c:	add	ip, pc, #0, 12
   12060:	add	ip, ip, #102400	; 0x19000
   12064:	ldr	pc, [ip, #4064]!	; 0xfe0

00012068 <memchr@plt>:
   12068:	add	ip, pc, #0, 12
   1206c:	add	ip, ip, #102400	; 0x19000
   12070:	ldr	pc, [ip, #4056]!	; 0xfd8

00012074 <fputc@plt>:
   12074:	add	ip, pc, #0, 12
   12078:	add	ip, ip, #102400	; 0x19000
   1207c:	ldr	pc, [ip, #4048]!	; 0xfd0

00012080 <abort@plt>:
   12080:	add	ip, pc, #0, 12
   12084:	add	ip, ip, #102400	; 0x19000
   12088:	ldr	pc, [ip, #4040]!	; 0xfc8

0001208c <__assert_fail@plt>:
   1208c:	add	ip, pc, #0, 12
   12090:	add	ip, ip, #102400	; 0x19000
   12094:	ldr	pc, [ip, #4032]!	; 0xfc0

Disassembly of section .text:

00012098 <_start@@Base>:
   12098:	mov	fp, #0
   1209c:	mov	lr, #0
   120a0:	pop	{r1}		; (ldr r1, [sp], #4)
   120a4:	mov	r2, sp
   120a8:	push	{r2}		; (str r2, [sp, #-4]!)
   120ac:	push	{r0}		; (str r0, [sp, #-4]!)
   120b0:	ldr	ip, [pc, #16]	; 120c8 <_start@@Base+0x30>
   120b4:	push	{ip}		; (str ip, [sp, #-4]!)
   120b8:	ldr	r0, [pc, #12]	; 120cc <_start@@Base+0x34>
   120bc:	ldr	r3, [pc, #12]	; 120d0 <_start@@Base+0x38>
   120c0:	bl	12014 <__libc_start_main@plt>
   120c4:	bl	12080 <abort@plt>
   120c8:	andeq	sl, r1, r8, lsl #22
   120cc:	andeq	r3, r1, r8, asr #15
   120d0:	andeq	sl, r1, r8, lsr #21
   120d4:	ldr	r3, [pc, #20]	; 120f0 <_start@@Base+0x58>
   120d8:	ldr	r2, [pc, #20]	; 120f4 <_start@@Base+0x5c>
   120dc:	add	r3, pc, r3
   120e0:	ldr	r2, [r3, r2]
   120e4:	cmp	r2, #0
   120e8:	bxeq	lr
   120ec:	b	12020 <__gmon_start__@plt>
   120f0:	andeq	r9, r1, ip, lsl pc
   120f4:	andeq	r0, r0, r4, rrx
   120f8:	ldr	r0, [pc, #24]	; 12118 <_start@@Base+0x80>
   120fc:	ldr	r3, [pc, #24]	; 1211c <_start@@Base+0x84>
   12100:	cmp	r3, r0
   12104:	bxeq	lr
   12108:	ldr	r3, [pc, #16]	; 12120 <_start@@Base+0x88>
   1210c:	cmp	r3, #0
   12110:	bxeq	lr
   12114:	bx	r3
   12118:	andeq	ip, r2, r0, lsl #1
   1211c:	andeq	ip, r2, r0, lsl #1
   12120:	andeq	r0, r0, r0
   12124:	ldr	r0, [pc, #36]	; 12150 <_start@@Base+0xb8>
   12128:	ldr	r1, [pc, #36]	; 12154 <_start@@Base+0xbc>
   1212c:	sub	r1, r1, r0
   12130:	asr	r1, r1, #2
   12134:	add	r1, r1, r1, lsr #31
   12138:	asrs	r1, r1, #1
   1213c:	bxeq	lr
   12140:	ldr	r3, [pc, #16]	; 12158 <_start@@Base+0xc0>
   12144:	cmp	r3, #0
   12148:	bxeq	lr
   1214c:	bx	r3
   12150:	andeq	ip, r2, r0, lsl #1
   12154:	andeq	ip, r2, r0, lsl #1
   12158:	andeq	r0, r0, r0
   1215c:	push	{r4, lr}
   12160:	ldr	r4, [pc, #24]	; 12180 <_start@@Base+0xe8>
   12164:	ldrb	r3, [r4]
   12168:	cmp	r3, #0
   1216c:	popne	{r4, pc}
   12170:	bl	120f8 <_start@@Base+0x60>
   12174:	mov	r3, #1
   12178:	strb	r3, [r4]
   1217c:	pop	{r4, pc}
   12180:	andeq	ip, r2, r0, lsl #1
   12184:	b	12124 <_start@@Base+0x8c>
   12188:	push	{fp}		; (str fp, [sp, #-4]!)
   1218c:	add	fp, sp, #0
   12190:	sub	sp, sp, #12
   12194:	mov	r3, r0
   12198:	strb	r3, [fp, #-5]
   1219c:	ldrb	r3, [fp, #-5]
   121a0:	mov	r0, r3
   121a4:	add	sp, fp, #0
   121a8:	pop	{fp}		; (ldr fp, [sp], #4)
   121ac:	bx	lr
   121b0:	push	{fp}		; (str fp, [sp, #-4]!)
   121b4:	add	fp, sp, #0
   121b8:	sub	sp, sp, #12
   121bc:	mov	r3, r0
   121c0:	strb	r3, [fp, #-5]
   121c4:	ldrb	r3, [fp, #-5]
   121c8:	mov	r0, r3
   121cc:	add	sp, fp, #0
   121d0:	pop	{fp}		; (ldr fp, [sp], #4)
   121d4:	bx	lr
   121d8:	str	fp, [sp, #-8]!
   121dc:	str	lr, [sp, #4]
   121e0:	add	fp, sp, #4
   121e4:	sub	sp, sp, #8
   121e8:	str	r0, [fp, #-8]
   121ec:	ldr	r3, [fp, #-8]
   121f0:	ldrb	r3, [r3]
   121f4:	mov	r0, r3
   121f8:	bl	12188 <_start@@Base+0xf0>
   121fc:	mov	r3, r0
   12200:	mov	r0, r3
   12204:	sub	sp, fp, #4
   12208:	ldr	fp, [sp]
   1220c:	add	sp, sp, #4
   12210:	pop	{pc}		; (ldr pc, [sp], #4)
   12214:	push	{fp}		; (str fp, [sp, #-4]!)
   12218:	add	fp, sp, #0
   1221c:	sub	sp, sp, #12
   12220:	strd	r0, [fp, #-12]
   12224:	ldrd	r2, [fp, #-12]
   12228:	mov	r0, r2
   1222c:	mov	r1, r3
   12230:	add	sp, fp, #0
   12234:	pop	{fp}		; (ldr fp, [sp], #4)
   12238:	bx	lr
   1223c:	push	{fp}		; (str fp, [sp, #-4]!)
   12240:	add	fp, sp, #0
   12244:	sub	sp, sp, #12
   12248:	strd	r0, [fp, #-12]
   1224c:	ldrd	r2, [fp, #-12]
   12250:	mov	r0, r2
   12254:	mov	r1, r3
   12258:	add	sp, fp, #0
   1225c:	pop	{fp}		; (ldr fp, [sp], #4)
   12260:	bx	lr
   12264:	str	fp, [sp, #-8]!
   12268:	str	lr, [sp, #4]
   1226c:	add	fp, sp, #4
   12270:	sub	sp, sp, #8
   12274:	str	r0, [fp, #-8]
   12278:	ldr	r3, [fp, #-8]
   1227c:	ldrd	r2, [r3]
   12280:	mov	r0, r2
   12284:	mov	r1, r3
   12288:	bl	12214 <_start@@Base+0x17c>
   1228c:	mov	r2, r0
   12290:	mov	r3, r1
   12294:	mov	r0, r2
   12298:	mov	r1, r3
   1229c:	sub	sp, fp, #4
   122a0:	ldr	fp, [sp]
   122a4:	add	sp, sp, #4
   122a8:	pop	{pc}		; (ldr pc, [sp], #4)
   122ac:	push	{fp}		; (str fp, [sp, #-4]!)
   122b0:	add	fp, sp, #0
   122b4:	sub	sp, sp, #20
   122b8:	vstr	s0, [fp, #-16]
   122bc:	ldr	r3, [fp, #-16]
   122c0:	str	r3, [fp, #-8]
   122c4:	ldr	r3, [fp, #-8]
   122c8:	str	r3, [fp, #-8]
   122cc:	ldr	r3, [fp, #-8]
   122d0:	vmov	s15, r3
   122d4:	vmov.f32	s0, s15
   122d8:	add	sp, fp, #0
   122dc:	pop	{fp}		; (ldr fp, [sp], #4)
   122e0:	bx	lr
   122e4:	str	fp, [sp, #-8]!
   122e8:	str	lr, [sp, #4]
   122ec:	add	fp, sp, #4
   122f0:	sub	sp, sp, #8
   122f4:	str	r0, [fp, #-8]
   122f8:	ldr	r3, [fp, #-8]
   122fc:	vldr	s15, [r3]
   12300:	vmov.f32	s0, s15
   12304:	bl	122ac <_start@@Base+0x214>
   12308:	vmov.f32	s15, s0
   1230c:	vmov.f32	s0, s15
   12310:	sub	sp, fp, #4
   12314:	ldr	fp, [sp]
   12318:	add	sp, sp, #4
   1231c:	pop	{pc}		; (ldr pc, [sp], #4)
   12320:	push	{fp}		; (str fp, [sp, #-4]!)
   12324:	add	fp, sp, #0
   12328:	sub	sp, sp, #12
   1232c:	str	r0, [fp, #-8]
   12330:	ldr	r3, [fp, #-8]
   12334:	mov	r0, r3
   12338:	add	sp, fp, #0
   1233c:	pop	{fp}		; (ldr fp, [sp], #4)
   12340:	bx	lr
   12344:	str	fp, [sp, #-8]!
   12348:	str	lr, [sp, #4]
   1234c:	add	fp, sp, #4
   12350:	sub	sp, sp, #8
   12354:	str	r0, [fp, #-8]
   12358:	ldr	r3, [fp, #-8]
   1235c:	ldr	r3, [r3]
   12360:	mov	r0, r3
   12364:	bl	12320 <_start@@Base+0x288>
   12368:	mov	r3, r0
   1236c:	mov	r0, r3
   12370:	sub	sp, fp, #4
   12374:	ldr	fp, [sp]
   12378:	add	sp, sp, #4
   1237c:	pop	{pc}		; (ldr pc, [sp], #4)
   12380:	push	{fp}		; (str fp, [sp, #-4]!)
   12384:	add	fp, sp, #0
   12388:	sub	sp, sp, #12
   1238c:	str	r0, [fp, #-8]
   12390:	ldr	r3, [fp, #-8]
   12394:	mov	r0, r3
   12398:	add	sp, fp, #0
   1239c:	pop	{fp}		; (ldr fp, [sp], #4)
   123a0:	bx	lr
   123a4:	str	fp, [sp, #-8]!
   123a8:	str	lr, [sp, #4]
   123ac:	add	fp, sp, #4
   123b0:	sub	sp, sp, #8
   123b4:	str	r0, [fp, #-8]
   123b8:	ldr	r3, [fp, #-8]
   123bc:	ldr	r3, [r3]
   123c0:	mov	r0, r3
   123c4:	bl	12380 <_start@@Base+0x2e8>
   123c8:	mov	r3, r0
   123cc:	mov	r0, r3
   123d0:	sub	sp, fp, #4
   123d4:	ldr	fp, [sp]
   123d8:	add	sp, sp, #4
   123dc:	pop	{pc}		; (ldr pc, [sp], #4)
   123e0:	push	{fp}		; (str fp, [sp, #-4]!)
   123e4:	add	fp, sp, #0
   123e8:	sub	sp, sp, #12
   123ec:	mov	r3, r0
   123f0:	strh	r3, [fp, #-6]
   123f4:	ldrh	r3, [fp, #-6]
   123f8:	mov	r0, r3
   123fc:	add	sp, fp, #0
   12400:	pop	{fp}		; (ldr fp, [sp], #4)
   12404:	bx	lr
   12408:	str	fp, [sp, #-8]!
   1240c:	str	lr, [sp, #4]
   12410:	add	fp, sp, #4
   12414:	sub	sp, sp, #8
   12418:	str	r0, [fp, #-8]
   1241c:	ldr	r3, [fp, #-8]
   12420:	ldrh	r3, [r3]
   12424:	mov	r0, r3
   12428:	bl	123e0 <_start@@Base+0x348>
   1242c:	mov	r3, r0
   12430:	mov	r0, r3
   12434:	sub	sp, fp, #4
   12438:	ldr	fp, [sp]
   1243c:	add	sp, sp, #4
   12440:	pop	{pc}		; (ldr pc, [sp], #4)
   12444:	push	{fp}		; (str fp, [sp, #-4]!)
   12448:	add	fp, sp, #0
   1244c:	sub	sp, sp, #12
   12450:	str	r0, [fp, #-8]
   12454:	ldr	r3, [fp, #-8]
   12458:	mov	r0, r3
   1245c:	add	sp, fp, #0
   12460:	pop	{fp}		; (ldr fp, [sp], #4)
   12464:	bx	lr
   12468:	push	{fp}		; (str fp, [sp, #-4]!)
   1246c:	add	fp, sp, #0
   12470:	sub	sp, sp, #12
   12474:	str	r0, [fp, #-8]
   12478:	ldr	r3, [fp, #-8]
   1247c:	mov	r0, r3
   12480:	add	sp, fp, #0
   12484:	pop	{fp}		; (ldr fp, [sp], #4)
   12488:	bx	lr
   1248c:	str	fp, [sp, #-8]!
   12490:	str	lr, [sp, #4]
   12494:	add	fp, sp, #4
   12498:	sub	sp, sp, #8
   1249c:	str	r0, [fp, #-8]
   124a0:	ldr	r3, [fp, #-8]
   124a4:	ldr	r3, [r3]
   124a8:	mov	r0, r3
   124ac:	bl	12444 <_start@@Base+0x3ac>
   124b0:	mov	r3, r0
   124b4:	mov	r0, r3
   124b8:	sub	sp, fp, #4
   124bc:	ldr	fp, [sp]
   124c0:	add	sp, sp, #4
   124c4:	pop	{pc}		; (ldr pc, [sp], #4)
   124c8:	str	fp, [sp, #-8]!
   124cc:	str	lr, [sp, #4]
   124d0:	add	fp, sp, #4
   124d4:	sub	sp, sp, #8
   124d8:	str	r0, [fp, #-8]
   124dc:	ldr	r3, [fp, #-8]
   124e0:	cmp	r3, #0
   124e4:	beq	12500 <_start@@Base+0x468>
   124e8:	ldr	r3, [fp, #-8]
   124ec:	sub	r3, r3, #4
   124f0:	mov	r0, r3
   124f4:	bl	12344 <_start@@Base+0x2ac>
   124f8:	mov	r3, r0
   124fc:	b	12504 <_start@@Base+0x46c>
   12500:	mov	r3, #0
   12504:	mov	r0, r3
   12508:	sub	sp, fp, #4
   1250c:	ldr	fp, [sp]
   12510:	add	sp, sp, #4
   12514:	pop	{pc}		; (ldr pc, [sp], #4)
   12518:	str	fp, [sp, #-8]!
   1251c:	str	lr, [sp, #4]
   12520:	add	fp, sp, #4
   12524:	sub	sp, sp, #8
   12528:	str	r0, [fp, #-8]
   1252c:	ldr	r0, [fp, #-8]
   12530:	bl	124c8 <_start@@Base+0x430>
   12534:	mov	r3, r0
   12538:	mov	r0, r3
   1253c:	sub	sp, fp, #4
   12540:	ldr	fp, [sp]
   12544:	add	sp, sp, #4
   12548:	pop	{pc}		; (ldr pc, [sp], #4)
   1254c:	str	fp, [sp, #-8]!
   12550:	str	lr, [sp, #4]
   12554:	add	fp, sp, #4
   12558:	sub	sp, sp, #8
   1255c:	str	r0, [fp, #-8]
   12560:	str	r1, [fp, #-12]
   12564:	ldr	r0, [fp, #-8]
   12568:	bl	124c8 <_start@@Base+0x430>
   1256c:	mov	r2, r0
   12570:	ldr	r3, [fp, #-12]
   12574:	cmp	r3, r2
   12578:	bcc	1259c <_start@@Base+0x504>
   1257c:	ldr	r3, [pc, #72]	; 125cc <_start@@Base+0x534>
   12580:	add	r3, pc, r3
   12584:	movw	r2, #403	; 0x193
   12588:	ldr	r1, [pc, #64]	; 125d0 <_start@@Base+0x538>
   1258c:	add	r1, pc, r1
   12590:	ldr	r0, [pc, #60]	; 125d4 <_start@@Base+0x53c>
   12594:	add	r0, pc, r0
   12598:	bl	1208c <__assert_fail@plt>
   1259c:	ldr	r3, [fp, #-12]
   125a0:	lsl	r3, r3, #2
   125a4:	ldr	r2, [fp, #-8]
   125a8:	add	r3, r2, r3
   125ac:	mov	r0, r3
   125b0:	bl	122e4 <_start@@Base+0x24c>
   125b4:	vmov.f32	s15, s0
   125b8:	vmov.f32	s0, s15
   125bc:	sub	sp, fp, #4
   125c0:	ldr	fp, [sp]
   125c4:	add	sp, sp, #4
   125c8:	pop	{pc}		; (ldr pc, [sp], #4)
   125cc:	ldrdeq	r8, [r0], -ip
   125d0:	andeq	r8, r0, r8, lsl #11
   125d4:	strdeq	r8, [r0], -ip
   125d8:	str	fp, [sp, #-8]!
   125dc:	str	lr, [sp, #4]
   125e0:	add	fp, sp, #4
   125e4:	sub	sp, sp, #16
   125e8:	str	r0, [fp, #-16]
   125ec:	str	r1, [fp, #-20]	; 0xffffffec
   125f0:	mov	r3, #0
   125f4:	str	r3, [fp, #-12]
   125f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   125fc:	cmp	r3, #0
   12600:	bne	1260c <_start@@Base+0x574>
   12604:	mov	r3, #1
   12608:	b	12670 <_start@@Base+0x5d8>
   1260c:	sub	r3, fp, #12
   12610:	mov	r2, #4
   12614:	ldr	r1, [fp, #-20]	; 0xffffffec
   12618:	mov	r0, r3
   1261c:	bl	1205c <strncpy@plt>
   12620:	ldr	r3, [fp, #-12]
   12624:	mov	r0, r3
   12628:	bl	12468 <_start@@Base+0x3d0>
   1262c:	mov	r3, r0
   12630:	str	r3, [fp, #-12]
   12634:	ldr	r3, [fp, #-16]
   12638:	add	r3, r3, #4
   1263c:	mov	r0, r3
   12640:	bl	1248c <_start@@Base+0x3f4>
   12644:	str	r0, [fp, #-8]
   12648:	ldr	r3, [fp, #-12]
   1264c:	cmp	r3, #0
   12650:	beq	12664 <_start@@Base+0x5cc>
   12654:	ldr	r3, [fp, #-12]
   12658:	ldr	r2, [fp, #-8]
   1265c:	cmp	r2, r3
   12660:	bne	1266c <_start@@Base+0x5d4>
   12664:	mov	r3, #1
   12668:	b	12670 <_start@@Base+0x5d8>
   1266c:	mov	r3, #0
   12670:	mov	r0, r3
   12674:	sub	sp, fp, #4
   12678:	ldr	fp, [sp]
   1267c:	add	sp, sp, #4
   12680:	pop	{pc}		; (ldr pc, [sp], #4)
   12684:	str	fp, [sp, #-8]!
   12688:	str	lr, [sp, #4]
   1268c:	add	fp, sp, #4
   12690:	sub	sp, sp, #16
   12694:	str	r0, [fp, #-16]
   12698:	mov	r3, #0
   1269c:	str	r3, [fp, #-8]
   126a0:	ldr	r3, [fp, #-16]
   126a4:	cmp	r3, #0
   126a8:	beq	126dc <_start@@Base+0x644>
   126ac:	ldr	r1, [fp, #-8]
   126b0:	ldr	r0, [fp, #-16]
   126b4:	bl	125d8 <_start@@Base+0x540>
   126b8:	mov	r3, r0
   126bc:	cmp	r3, #0
   126c0:	beq	126dc <_start@@Base+0x644>
   126c4:	ldr	r0, [fp, #-16]
   126c8:	bl	12344 <_start@@Base+0x2ac>
   126cc:	mov	r2, r0
   126d0:	ldr	r3, [fp, #-16]
   126d4:	add	r3, r3, r2
   126d8:	b	126e0 <_start@@Base+0x648>
   126dc:	mov	r3, #0
   126e0:	mov	r0, r3
   126e4:	sub	sp, fp, #4
   126e8:	ldr	fp, [sp]
   126ec:	add	sp, sp, #4
   126f0:	pop	{pc}		; (ldr pc, [sp], #4)
   126f4:	str	fp, [sp, #-8]!
   126f8:	str	lr, [sp, #4]
   126fc:	add	fp, sp, #4
   12700:	sub	sp, sp, #16
   12704:	str	r0, [fp, #-16]
   12708:	mov	r3, #0
   1270c:	strh	r3, [fp, #-6]
   12710:	ldr	r3, [fp, #-16]
   12714:	cmp	r3, #0
   12718:	bne	1273c <_start@@Base+0x6a4>
   1271c:	ldr	r3, [pc, #208]	; 127f4 <_start@@Base+0x75c>
   12720:	add	r3, pc, r3
   12724:	mov	r2, #41	; 0x29
   12728:	ldr	r1, [pc, #200]	; 127f8 <_start@@Base+0x760>
   1272c:	add	r1, pc, r1
   12730:	ldr	r0, [pc, #196]	; 127fc <_start@@Base+0x764>
   12734:	add	r0, pc, r0
   12738:	bl	1208c <__assert_fail@plt>
   1273c:	mov	r3, #0
   12740:	strh	r3, [fp, #-8]
   12744:	ldr	r0, [fp, #-16]
   12748:	bl	123a4 <_start@@Base+0x30c>
   1274c:	mov	r3, r0
   12750:	rsb	r3, r3, #0
   12754:	ldr	r2, [fp, #-16]
   12758:	add	r3, r2, r3
   1275c:	str	r3, [fp, #-12]
   12760:	ldr	r0, [fp, #-12]
   12764:	bl	12408 <_start@@Base+0x370>
   12768:	mov	r3, r0
   1276c:	mov	r2, r3
   12770:	ldrh	r3, [fp, #-8]
   12774:	add	r3, r3, #3
   12778:	lsl	r3, r3, #1
   1277c:	cmp	r2, r3
   12780:	bcc	127a8 <_start@@Base+0x710>
   12784:	ldrh	r3, [fp, #-8]
   12788:	add	r3, r3, #2
   1278c:	lsl	r3, r3, #1
   12790:	ldr	r2, [fp, #-12]
   12794:	add	r3, r2, r3
   12798:	mov	r0, r3
   1279c:	bl	12408 <_start@@Base+0x370>
   127a0:	mov	r3, r0
   127a4:	strh	r3, [fp, #-6]
   127a8:	ldrh	r3, [fp, #-6]
   127ac:	cmp	r3, #0
   127b0:	beq	127d4 <_start@@Base+0x73c>
   127b4:	ldrh	r3, [fp, #-6]
   127b8:	ldr	r2, [fp, #-16]
   127bc:	add	r3, r2, r3
   127c0:	mov	r0, r3
   127c4:	bl	12264 <_start@@Base+0x1cc>
   127c8:	mov	r2, r0
   127cc:	mov	r3, r1
   127d0:	b	127dc <_start@@Base+0x744>
   127d4:	mov	r2, #0
   127d8:	mov	r3, #0
   127dc:	mov	r0, r2
   127e0:	mov	r1, r3
   127e4:	sub	sp, fp, #4
   127e8:	ldr	fp, [sp]
   127ec:	add	sp, sp, #4
   127f0:	pop	{pc}		; (ldr pc, [sp], #4)
   127f4:	andeq	r8, r0, r4, lsl r8
   127f8:	muleq	r0, ip, r4
   127fc:	andeq	r8, r0, r8, lsl #10
   12800:	str	fp, [sp, #-8]!
   12804:	str	lr, [sp, #4]
   12808:	add	fp, sp, #4
   1280c:	sub	sp, sp, #16
   12810:	str	r0, [fp, #-16]
   12814:	mov	r3, #0
   12818:	strh	r3, [fp, #-6]
   1281c:	ldr	r3, [fp, #-16]
   12820:	cmp	r3, #0
   12824:	bne	12848 <_start@@Base+0x7b0>
   12828:	ldr	r3, [pc, #196]	; 128f4 <_start@@Base+0x85c>
   1282c:	add	r3, pc, r3
   12830:	mov	r2, #42	; 0x2a
   12834:	ldr	r1, [pc, #188]	; 128f8 <_start@@Base+0x860>
   12838:	add	r1, pc, r1
   1283c:	ldr	r0, [pc, #184]	; 128fc <_start@@Base+0x864>
   12840:	add	r0, pc, r0
   12844:	bl	1208c <__assert_fail@plt>
   12848:	mov	r3, #1
   1284c:	strh	r3, [fp, #-8]
   12850:	ldr	r0, [fp, #-16]
   12854:	bl	123a4 <_start@@Base+0x30c>
   12858:	mov	r3, r0
   1285c:	rsb	r3, r3, #0
   12860:	ldr	r2, [fp, #-16]
   12864:	add	r3, r2, r3
   12868:	str	r3, [fp, #-12]
   1286c:	ldr	r0, [fp, #-12]
   12870:	bl	12408 <_start@@Base+0x370>
   12874:	mov	r3, r0
   12878:	mov	r2, r3
   1287c:	ldrh	r3, [fp, #-8]
   12880:	add	r3, r3, #3
   12884:	lsl	r3, r3, #1
   12888:	cmp	r2, r3
   1288c:	bcc	128b4 <_start@@Base+0x81c>
   12890:	ldrh	r3, [fp, #-8]
   12894:	add	r3, r3, #2
   12898:	lsl	r3, r3, #1
   1289c:	ldr	r2, [fp, #-12]
   128a0:	add	r3, r2, r3
   128a4:	mov	r0, r3
   128a8:	bl	12408 <_start@@Base+0x370>
   128ac:	mov	r3, r0
   128b0:	strh	r3, [fp, #-6]
   128b4:	ldrh	r3, [fp, #-6]
   128b8:	cmp	r3, #0
   128bc:	beq	128dc <_start@@Base+0x844>
   128c0:	ldrh	r3, [fp, #-6]
   128c4:	ldr	r2, [fp, #-16]
   128c8:	add	r3, r2, r3
   128cc:	mov	r0, r3
   128d0:	bl	121d8 <_start@@Base+0x140>
   128d4:	mov	r3, r0
   128d8:	b	128e0 <_start@@Base+0x848>
   128dc:	mov	r3, #0
   128e0:	mov	r0, r3
   128e4:	sub	sp, fp, #4
   128e8:	ldr	fp, [sp]
   128ec:	add	sp, sp, #4
   128f0:	pop	{pc}		; (ldr pc, [sp], #4)
   128f4:	andeq	r8, r0, r4, lsl r7
   128f8:	muleq	r0, r0, r3
   128fc:	strdeq	r8, [r0], -ip
   12900:	str	fp, [sp, #-8]!
   12904:	str	lr, [sp, #4]
   12908:	add	fp, sp, #4
   1290c:	sub	sp, sp, #24
   12910:	str	r0, [fp, #-24]	; 0xffffffe8
   12914:	mov	r3, #0
   12918:	strh	r3, [fp, #-6]
   1291c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   12920:	cmp	r3, #0
   12924:	bne	12948 <_start@@Base+0x8b0>
   12928:	ldr	r3, [pc, #212]	; 12a04 <_start@@Base+0x96c>
   1292c:	add	r3, pc, r3
   12930:	mov	r2, #43	; 0x2b
   12934:	ldr	r1, [pc, #204]	; 12a08 <_start@@Base+0x970>
   12938:	add	r1, pc, r1
   1293c:	ldr	r0, [pc, #200]	; 12a0c <_start@@Base+0x974>
   12940:	add	r0, pc, r0
   12944:	bl	1208c <__assert_fail@plt>
   12948:	mov	r3, #2
   1294c:	strh	r3, [fp, #-8]
   12950:	ldr	r0, [fp, #-24]	; 0xffffffe8
   12954:	bl	123a4 <_start@@Base+0x30c>
   12958:	mov	r3, r0
   1295c:	rsb	r3, r3, #0
   12960:	ldr	r2, [fp, #-24]	; 0xffffffe8
   12964:	add	r3, r2, r3
   12968:	str	r3, [fp, #-12]
   1296c:	ldr	r0, [fp, #-12]
   12970:	bl	12408 <_start@@Base+0x370>
   12974:	mov	r3, r0
   12978:	mov	r2, r3
   1297c:	ldrh	r3, [fp, #-8]
   12980:	add	r3, r3, #3
   12984:	lsl	r3, r3, #1
   12988:	cmp	r2, r3
   1298c:	bcc	129b4 <_start@@Base+0x91c>
   12990:	ldrh	r3, [fp, #-8]
   12994:	add	r3, r3, #2
   12998:	lsl	r3, r3, #1
   1299c:	ldr	r2, [fp, #-12]
   129a0:	add	r3, r2, r3
   129a4:	mov	r0, r3
   129a8:	bl	12408 <_start@@Base+0x370>
   129ac:	mov	r3, r0
   129b0:	strh	r3, [fp, #-6]
   129b4:	ldrh	r3, [fp, #-6]
   129b8:	cmp	r3, #0
   129bc:	beq	129ec <_start@@Base+0x954>
   129c0:	ldrh	r3, [fp, #-6]
   129c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   129c8:	add	r3, r2, r3
   129cc:	str	r3, [fp, #-16]
   129d0:	ldr	r0, [fp, #-16]
   129d4:	bl	12344 <_start@@Base+0x2ac>
   129d8:	mov	r3, r0
   129dc:	add	r3, r3, #4
   129e0:	ldr	r2, [fp, #-16]
   129e4:	add	r3, r2, r3
   129e8:	b	129f0 <_start@@Base+0x958>
   129ec:	mov	r3, #0
   129f0:	mov	r0, r3
   129f4:	sub	sp, fp, #4
   129f8:	ldr	fp, [sp]
   129fc:	add	sp, sp, #4
   12a00:	pop	{pc}		; (ldr pc, [sp], #4)
   12a04:	andeq	r8, r0, r0, lsr #12
   12a08:	muleq	r0, r0, r2
   12a0c:	strdeq	r8, [r0], -ip
   12a10:	push	{fp}		; (str fp, [sp, #-4]!)
   12a14:	add	fp, sp, #0
   12a18:	sub	sp, sp, #12
   12a1c:	str	r0, [fp, #-8]
   12a20:	ldr	r3, [fp, #-8]
   12a24:	ldr	r3, [r3, #24]
   12a28:	mov	r0, r3
   12a2c:	add	sp, fp, #0
   12a30:	pop	{fp}		; (ldr fp, [sp], #4)
   12a34:	bx	lr
   12a38:	push	{fp}		; (str fp, [sp, #-4]!)
   12a3c:	add	fp, sp, #0
   12a40:	sub	sp, sp, #12
   12a44:	str	r0, [fp, #-8]
   12a48:	str	r1, [fp, #-12]
   12a4c:	ldr	r3, [fp, #-8]
   12a50:	ldr	r2, [r3]
   12a54:	ldr	r3, [fp, #-8]
   12a58:	ldr	r3, [r3, #4]
   12a5c:	cmp	r2, r3
   12a60:	bne	12a8c <_start@@Base+0x9f4>
   12a64:	ldr	r3, [fp, #-12]
   12a68:	cmp	r3, #0
   12a6c:	beq	12a80 <_start@@Base+0x9e8>
   12a70:	ldr	r3, [fp, #-8]
   12a74:	ldr	r2, [r3, #24]
   12a78:	ldr	r3, [fp, #-12]
   12a7c:	str	r2, [r3]
   12a80:	ldr	r3, [fp, #-8]
   12a84:	ldr	r3, [r3, #8]
   12a88:	b	12aa8 <_start@@Base+0xa10>
   12a8c:	ldr	r3, [fp, #-12]
   12a90:	cmp	r3, #0
   12a94:	beq	12aa4 <_start@@Base+0xa0c>
   12a98:	ldr	r3, [fp, #-12]
   12a9c:	mov	r2, #0
   12aa0:	str	r2, [r3]
   12aa4:	mov	r3, #0
   12aa8:	mov	r0, r3
   12aac:	add	sp, fp, #0
   12ab0:	pop	{fp}		; (ldr fp, [sp], #4)
   12ab4:	bx	lr
   12ab8:	str	fp, [sp, #-8]!
   12abc:	str	lr, [sp, #4]
   12ac0:	add	fp, sp, #4
   12ac4:	sub	sp, sp, #8
   12ac8:	str	r0, [fp, #-8]
   12acc:	mov	r3, r1
   12ad0:	strb	r3, [fp, #-9]
   12ad4:	ldrb	r3, [fp, #-9]
   12ad8:	mov	r0, r3
   12adc:	bl	121b0 <_start@@Base+0x118>
   12ae0:	mov	r3, r0
   12ae4:	mov	r2, r3
   12ae8:	ldr	r3, [fp, #-8]
   12aec:	strb	r2, [r3]
   12af0:	ldr	r3, [fp, #-8]
   12af4:	mov	r0, r3
   12af8:	sub	sp, fp, #4
   12afc:	ldr	fp, [sp]
   12b00:	add	sp, sp, #4
   12b04:	pop	{pc}		; (ldr pc, [sp], #4)
   12b08:	str	fp, [sp, #-8]!
   12b0c:	str	lr, [sp, #4]
   12b10:	add	fp, sp, #4
   12b14:	sub	sp, sp, #16
   12b18:	str	r0, [fp, #-8]
   12b1c:	strd	r2, [fp, #-20]	; 0xffffffec
   12b20:	ldrd	r0, [fp, #-20]	; 0xffffffec
   12b24:	bl	1223c <_start@@Base+0x1a4>
   12b28:	mov	r2, r0
   12b2c:	mov	r3, r1
   12b30:	ldr	r1, [fp, #-8]
   12b34:	strd	r2, [r1]
   12b38:	ldr	r3, [fp, #-8]
   12b3c:	mov	r0, r3
   12b40:	sub	sp, fp, #4
   12b44:	ldr	fp, [sp]
   12b48:	add	sp, sp, #4
   12b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b50:	str	fp, [sp, #-8]!
   12b54:	str	lr, [sp, #4]
   12b58:	add	fp, sp, #4
   12b5c:	sub	sp, sp, #24
   12b60:	str	r0, [fp, #-8]
   12b64:	str	r1, [fp, #-12]
   12b68:	str	r2, [fp, #-16]
   12b6c:	mvn	r3, #-1073741824	; 0xc0000000
   12b70:	str	r3, [sp, #4]
   12b74:	mov	r3, #4
   12b78:	str	r3, [sp]
   12b7c:	mov	r3, #4
   12b80:	ldr	r2, [fp, #-16]
   12b84:	ldr	r1, [fp, #-12]
   12b88:	ldr	r0, [fp, #-8]
   12b8c:	bl	17b58 <flatcc_builder_create_vector@@Base>
   12b90:	mov	r3, r0
   12b94:	mov	r0, r3
   12b98:	sub	sp, fp, #4
   12b9c:	ldr	fp, [sp]
   12ba0:	add	sp, sp, #4
   12ba4:	pop	{pc}		; (ldr pc, [sp], #4)
   12ba8:	str	fp, [sp, #-8]!
   12bac:	str	lr, [sp, #4]
   12bb0:	add	fp, sp, #4
   12bb4:	sub	sp, sp, #8
   12bb8:	str	r0, [fp, #-8]
   12bbc:	str	r1, [fp, #-12]
   12bc0:	mov	r3, #0
   12bc4:	mov	r2, #0
   12bc8:	ldr	r1, [fp, #-12]
   12bcc:	ldr	r0, [fp, #-8]
   12bd0:	bl	15c28 <flatcc_builder_start_buffer@@Base>
   12bd4:	mov	r3, r0
   12bd8:	mov	r0, r3
   12bdc:	sub	sp, fp, #4
   12be0:	ldr	fp, [sp]
   12be4:	add	sp, sp, #4
   12be8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bec:	str	fp, [sp, #-8]!
   12bf0:	str	lr, [sp, #4]
   12bf4:	add	fp, sp, #4
   12bf8:	sub	sp, sp, #8
   12bfc:	str	r0, [fp, #-8]
   12c00:	str	r1, [fp, #-12]
   12c04:	ldr	r1, [fp, #-12]
   12c08:	ldr	r0, [fp, #-8]
   12c0c:	bl	15d98 <flatcc_builder_end_buffer@@Base>
   12c10:	mov	r3, r0
   12c14:	mov	r0, r3
   12c18:	sub	sp, fp, #4
   12c1c:	ldr	fp, [sp]
   12c20:	add	sp, sp, #4
   12c24:	pop	{pc}		; (ldr pc, [sp], #4)
   12c28:	str	fp, [sp, #-8]!
   12c2c:	str	lr, [sp, #4]
   12c30:	add	fp, sp, #4
   12c34:	sub	sp, sp, #8
   12c38:	str	r0, [fp, #-8]
   12c3c:	mov	r1, #3
   12c40:	ldr	r0, [fp, #-8]
   12c44:	bl	16d60 <flatcc_builder_start_table@@Base>
   12c48:	mov	r3, r0
   12c4c:	mov	r0, r3
   12c50:	sub	sp, fp, #4
   12c54:	ldr	fp, [sp]
   12c58:	add	sp, sp, #4
   12c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   12c60:	str	fp, [sp, #-8]!
   12c64:	str	lr, [sp, #4]
   12c68:	add	fp, sp, #4
   12c6c:	sub	sp, sp, #8
   12c70:	str	r0, [fp, #-8]
   12c74:	mov	r2, #0
   12c78:	ldr	r3, [pc, #88]	; 12cd8 <_start@@Base+0xc40>
   12c7c:	add	r3, pc, r3
   12c80:	mov	r1, r3
   12c84:	ldr	r0, [fp, #-8]
   12c88:	bl	17820 <flatcc_builder_check_required@@Base>
   12c8c:	mov	r3, r0
   12c90:	cmp	r3, #0
   12c94:	bne	12cb8 <_start@@Base+0xc20>
   12c98:	ldr	r3, [pc, #60]	; 12cdc <_start@@Base+0xc44>
   12c9c:	add	r3, pc, r3
   12ca0:	mov	r2, #21
   12ca4:	ldr	r1, [pc, #52]	; 12ce0 <_start@@Base+0xc48>
   12ca8:	add	r1, pc, r1
   12cac:	ldr	r0, [pc, #48]	; 12ce4 <_start@@Base+0xc4c>
   12cb0:	add	r0, pc, r0
   12cb4:	bl	1208c <__assert_fail@plt>
   12cb8:	ldr	r0, [fp, #-8]
   12cbc:	bl	17914 <flatcc_builder_end_table@@Base>
   12cc0:	mov	r3, r0
   12cc4:	mov	r0, r3
   12cc8:	sub	sp, fp, #4
   12ccc:	ldr	fp, [sp]
   12cd0:	add	sp, sp, #4
   12cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd8:	andeq	r7, r0, r8, ror #31
   12cdc:	andeq	r8, r0, r0, lsl #5
   12ce0:	andeq	r7, r0, r0, asr #31
   12ce4:	andeq	r8, r0, ip, lsr #32
   12ce8:	str	fp, [sp, #-8]!
   12cec:	str	lr, [sp, #4]
   12cf0:	add	fp, sp, #4
   12cf4:	sub	sp, sp, #24
   12cf8:	str	r0, [fp, #-16]
   12cfc:	strd	r2, [fp, #-28]	; 0xffffffe4
   12d00:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12d04:	orrs	r3, r2, r3
   12d08:	bne	12d14 <_start@@Base+0xc7c>
   12d0c:	mov	r3, #0
   12d10:	b	12d50 <_start@@Base+0xcb8>
   12d14:	mov	r3, #8
   12d18:	mov	r2, #8
   12d1c:	mov	r1, #0
   12d20:	ldr	r0, [fp, #-16]
   12d24:	bl	19364 <flatcc_builder_table_add@@Base>
   12d28:	str	r0, [fp, #-8]
   12d2c:	ldr	r3, [fp, #-8]
   12d30:	cmp	r3, #0
   12d34:	bne	12d40 <_start@@Base+0xca8>
   12d38:	mvn	r3, #0
   12d3c:	b	12d50 <_start@@Base+0xcb8>
   12d40:	ldrd	r2, [fp, #-28]	; 0xffffffe4
   12d44:	ldr	r0, [fp, #-8]
   12d48:	bl	12b08 <_start@@Base+0xa70>
   12d4c:	mov	r3, #0
   12d50:	mov	r0, r3
   12d54:	sub	sp, fp, #4
   12d58:	ldr	fp, [sp]
   12d5c:	add	sp, sp, #4
   12d60:	pop	{pc}		; (ldr pc, [sp], #4)
   12d64:	str	fp, [sp, #-8]!
   12d68:	str	lr, [sp, #4]
   12d6c:	add	fp, sp, #4
   12d70:	sub	sp, sp, #16
   12d74:	str	r0, [fp, #-16]
   12d78:	mov	r3, r1
   12d7c:	strb	r3, [fp, #-17]	; 0xffffffef
   12d80:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12d84:	cmp	r3, #0
   12d88:	bne	12d94 <_start@@Base+0xcfc>
   12d8c:	mov	r3, #0
   12d90:	b	12dd4 <_start@@Base+0xd3c>
   12d94:	mov	r3, #1
   12d98:	mov	r2, #1
   12d9c:	mov	r1, #1
   12da0:	ldr	r0, [fp, #-16]
   12da4:	bl	19364 <flatcc_builder_table_add@@Base>
   12da8:	str	r0, [fp, #-8]
   12dac:	ldr	r3, [fp, #-8]
   12db0:	cmp	r3, #0
   12db4:	bne	12dc0 <_start@@Base+0xd28>
   12db8:	mvn	r3, #0
   12dbc:	b	12dd4 <_start@@Base+0xd3c>
   12dc0:	ldrb	r3, [fp, #-17]	; 0xffffffef
   12dc4:	mov	r1, r3
   12dc8:	ldr	r0, [fp, #-8]
   12dcc:	bl	12ab8 <_start@@Base+0xa20>
   12dd0:	mov	r3, #0
   12dd4:	mov	r0, r3
   12dd8:	sub	sp, fp, #4
   12ddc:	ldr	fp, [sp]
   12de0:	add	sp, sp, #4
   12de4:	pop	{pc}		; (ldr pc, [sp], #4)
   12de8:	str	fp, [sp, #-8]!
   12dec:	str	lr, [sp, #4]
   12df0:	add	fp, sp, #4
   12df4:	sub	sp, sp, #16
   12df8:	str	r0, [fp, #-16]
   12dfc:	str	r1, [fp, #-20]	; 0xffffffec
   12e00:	ldr	r3, [fp, #-20]	; 0xffffffec
   12e04:	cmp	r3, #0
   12e08:	beq	12e3c <_start@@Base+0xda4>
   12e0c:	mov	r1, #2
   12e10:	ldr	r0, [fp, #-16]
   12e14:	bl	195d4 <flatcc_builder_table_add_offset@@Base>
   12e18:	str	r0, [fp, #-8]
   12e1c:	ldr	r3, [fp, #-8]
   12e20:	cmp	r3, #0
   12e24:	beq	12e3c <_start@@Base+0xda4>
   12e28:	ldr	r3, [fp, #-8]
   12e2c:	ldr	r2, [fp, #-20]	; 0xffffffec
   12e30:	str	r2, [r3]
   12e34:	mov	r3, #0
   12e38:	b	12e40 <_start@@Base+0xda8>
   12e3c:	mvn	r3, #0
   12e40:	mov	r0, r3
   12e44:	sub	sp, fp, #4
   12e48:	ldr	fp, [sp]
   12e4c:	add	sp, sp, #4
   12e50:	pop	{pc}		; (ldr pc, [sp], #4)
   12e54:	str	fp, [sp, #-8]!
   12e58:	str	lr, [sp, #4]
   12e5c:	add	fp, sp, #4
   12e60:	sub	sp, sp, #16
   12e64:	str	r0, [fp, #-8]
   12e68:	strd	r2, [fp, #-20]	; 0xffffffec
   12e6c:	ldr	r0, [fp, #-8]
   12e70:	bl	12c28 <_start@@Base+0xb90>
   12e74:	mov	r3, r0
   12e78:	cmp	r3, #0
   12e7c:	bne	12ecc <_start@@Base+0xe34>
   12e80:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12e84:	ldr	r0, [fp, #-8]
   12e88:	bl	12ce8 <_start@@Base+0xc50>
   12e8c:	mov	r3, r0
   12e90:	cmp	r3, #0
   12e94:	bne	12ecc <_start@@Base+0xe34>
   12e98:	ldr	r1, [fp, #8]
   12e9c:	ldr	r0, [fp, #-8]
   12ea0:	bl	12de8 <_start@@Base+0xd50>
   12ea4:	mov	r3, r0
   12ea8:	cmp	r3, #0
   12eac:	bne	12ecc <_start@@Base+0xe34>
   12eb0:	ldrb	r3, [fp, #4]
   12eb4:	mov	r1, r3
   12eb8:	ldr	r0, [fp, #-8]
   12ebc:	bl	12d64 <_start@@Base+0xccc>
   12ec0:	mov	r3, r0
   12ec4:	cmp	r3, #0
   12ec8:	beq	12ed4 <_start@@Base+0xe3c>
   12ecc:	mov	r3, #0
   12ed0:	b	12ee0 <_start@@Base+0xe48>
   12ed4:	ldr	r0, [fp, #-8]
   12ed8:	bl	12c60 <_start@@Base+0xbc8>
   12edc:	mov	r3, r0
   12ee0:	mov	r0, r3
   12ee4:	sub	sp, fp, #4
   12ee8:	ldr	fp, [sp]
   12eec:	add	sp, sp, #4
   12ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ef4:	str	fp, [sp, #-8]!
   12ef8:	str	lr, [sp, #4]
   12efc:	add	fp, sp, #4
   12f00:	sub	sp, sp, #24
   12f04:	str	r0, [fp, #-8]
   12f08:	strd	r2, [fp, #-20]	; 0xffffffec
   12f0c:	mov	r1, #0
   12f10:	ldr	r0, [fp, #-8]
   12f14:	bl	12ba8 <_start@@Base+0xb10>
   12f18:	mov	r3, r0
   12f1c:	cmp	r3, #0
   12f20:	beq	12f2c <_start@@Base+0xe94>
   12f24:	mov	r3, #0
   12f28:	b	12f5c <_start@@Base+0xec4>
   12f2c:	ldr	r3, [fp, #8]
   12f30:	str	r3, [sp, #4]
   12f34:	ldrb	r3, [fp, #4]
   12f38:	str	r3, [sp]
   12f3c:	ldrd	r2, [fp, #-20]	; 0xffffffec
   12f40:	ldr	r0, [fp, #-8]
   12f44:	bl	12e54 <_start@@Base+0xdbc>
   12f48:	mov	r3, r0
   12f4c:	mov	r1, r3
   12f50:	ldr	r0, [fp, #-8]
   12f54:	bl	12bec <_start@@Base+0xb54>
   12f58:	mov	r3, r0
   12f5c:	mov	r0, r3
   12f60:	sub	sp, fp, #4
   12f64:	ldr	fp, [sp]
   12f68:	add	sp, sp, #4
   12f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f70:	str	fp, [sp, #-8]!
   12f74:	str	lr, [sp, #4]
   12f78:	add	fp, sp, #4
   12f7c:	sub	sp, sp, #48	; 0x30
   12f80:	str	r0, [fp, #-40]	; 0xffffffd8
   12f84:	str	r1, [fp, #-44]	; 0xffffffd4
   12f88:	str	r2, [fp, #-48]	; 0xffffffd0
   12f8c:	str	r3, [fp, #-52]	; 0xffffffcc
   12f90:	ldr	r3, [fp, #-44]	; 0xffffffd4
   12f94:	str	r3, [fp, #-12]
   12f98:	ldr	r3, [fp, #-40]	; 0xffffffd8
   12f9c:	cmp	r3, #0
   12fa0:	beq	12fbc <_start@@Base+0xf24>
   12fa4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   12fa8:	ldr	r3, [pc, #448]	; 13170 <_start@@Base+0x10d8>
   12fac:	add	r3, pc, r3
   12fb0:	mov	r1, r3
   12fb4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12fb8:	bl	12038 <fprintf@plt>
   12fbc:	mov	r3, #0
   12fc0:	str	r3, [fp, #-8]
   12fc4:	b	130f8 <_start@@Base+0x1060>
   12fc8:	ldr	r3, [fp, #-8]
   12fcc:	and	r3, r3, #15
   12fd0:	cmp	r3, #0
   12fd4:	bne	1301c <_start@@Base+0xf84>
   12fd8:	ldr	r3, [fp, #-8]
   12fdc:	cmp	r3, #0
   12fe0:	beq	13000 <_start@@Base+0xf68>
   12fe4:	sub	r3, fp, #32
   12fe8:	mov	r2, r3
   12fec:	ldr	r3, [pc, #384]	; 13174 <_start@@Base+0x10dc>
   12ff0:	add	r3, pc, r3
   12ff4:	mov	r1, r3
   12ff8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12ffc:	bl	12038 <fprintf@plt>
   13000:	ldr	r2, [fp, #-8]
   13004:	ldr	r3, [pc, #364]	; 13178 <_start@@Base+0x10e0>
   13008:	add	r3, pc, r3
   1300c:	mov	r1, r3
   13010:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13014:	bl	12038 <fprintf@plt>
   13018:	b	13038 <_start@@Base+0xfa0>
   1301c:	ldr	r3, [fp, #-8]
   13020:	and	r3, r3, #7
   13024:	cmp	r3, #0
   13028:	bne	13038 <_start@@Base+0xfa0>
   1302c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13030:	mov	r0, #32
   13034:	bl	12074 <fputc@plt>
   13038:	ldr	r2, [fp, #-12]
   1303c:	ldr	r3, [fp, #-8]
   13040:	add	r3, r2, r3
   13044:	ldrb	r3, [r3]
   13048:	mov	r2, r3
   1304c:	ldr	r3, [pc, #296]	; 1317c <_start@@Base+0x10e4>
   13050:	add	r3, pc, r3
   13054:	mov	r1, r3
   13058:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1305c:	bl	12038 <fprintf@plt>
   13060:	ldr	r2, [fp, #-12]
   13064:	ldr	r3, [fp, #-8]
   13068:	add	r3, r2, r3
   1306c:	ldrb	r3, [r3]
   13070:	cmp	r3, #31
   13074:	bls	13090 <_start@@Base+0xff8>
   13078:	ldr	r2, [fp, #-12]
   1307c:	ldr	r3, [fp, #-8]
   13080:	add	r3, r2, r3
   13084:	ldrb	r3, [r3]
   13088:	cmp	r3, #126	; 0x7e
   1308c:	bls	130ac <_start@@Base+0x1014>
   13090:	ldr	r3, [fp, #-8]
   13094:	and	r3, r3, #15
   13098:	sub	r2, fp, #4
   1309c:	add	r3, r2, r3
   130a0:	mov	r2, #46	; 0x2e
   130a4:	strb	r2, [r3, #-28]	; 0xffffffe4
   130a8:	b	130d0 <_start@@Base+0x1038>
   130ac:	ldr	r2, [fp, #-12]
   130b0:	ldr	r3, [fp, #-8]
   130b4:	add	r2, r2, r3
   130b8:	ldr	r3, [fp, #-8]
   130bc:	and	r3, r3, #15
   130c0:	ldrb	r2, [r2]
   130c4:	sub	r1, fp, #4
   130c8:	add	r3, r1, r3
   130cc:	strb	r2, [r3, #-28]	; 0xffffffe4
   130d0:	ldr	r3, [fp, #-8]
   130d4:	and	r3, r3, #15
   130d8:	add	r3, r3, #1
   130dc:	sub	r2, fp, #4
   130e0:	add	r3, r2, r3
   130e4:	mov	r2, #0
   130e8:	strb	r2, [r3, #-28]	; 0xffffffe4
   130ec:	ldr	r3, [fp, #-8]
   130f0:	add	r3, r3, #1
   130f4:	str	r3, [fp, #-8]
   130f8:	ldr	r2, [fp, #-8]
   130fc:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13100:	cmp	r2, r3
   13104:	bcc	12fc8 <_start@@Base+0xf30>
   13108:	b	13130 <_start@@Base+0x1098>
   1310c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   13110:	mov	r2, #3
   13114:	mov	r1, #1
   13118:	ldr	r0, [pc, #96]	; 13180 <_start@@Base+0x10e8>
   1311c:	add	r0, pc, r0
   13120:	bl	11ff0 <fwrite@plt>
   13124:	ldr	r3, [fp, #-8]
   13128:	add	r3, r3, #1
   1312c:	str	r3, [fp, #-8]
   13130:	ldr	r3, [fp, #-8]
   13134:	and	r3, r3, #15
   13138:	cmp	r3, #0
   1313c:	bne	1310c <_start@@Base+0x1074>
   13140:	sub	r3, fp, #32
   13144:	mov	r2, r3
   13148:	ldr	r3, [pc, #52]	; 13184 <_start@@Base+0x10ec>
   1314c:	add	r3, pc, r3
   13150:	mov	r1, r3
   13154:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13158:	bl	12038 <fprintf@plt>
   1315c:	nop	{0}
   13160:	sub	sp, fp, #4
   13164:	ldr	fp, [sp]
   13168:	add	sp, sp, #4
   1316c:	pop	{pc}		; (ldr pc, [sp], #4)
   13170:	muleq	r0, ip, sp
   13174:	andeq	r7, r0, r0, ror #26
   13178:	andeq	r7, r0, r0, asr sp
   1317c:	andeq	r7, r0, r0, lsl sp
   13180:	andeq	r7, r0, ip, asr #24
   13184:	andeq	r7, r0, r4, lsl #24

00013188 <dbg_emitter@@Base>:
   13188:	str	r4, [sp, #-12]!
   1318c:	str	fp, [sp, #4]
   13190:	str	lr, [sp, #8]
   13194:	add	fp, sp, #8
   13198:	sub	sp, sp, #28
   1319c:	str	r0, [fp, #-24]	; 0xffffffe8
   131a0:	str	r1, [fp, #-28]	; 0xffffffe4
   131a4:	str	r2, [fp, #-32]	; 0xffffffe0
   131a8:	str	r3, [fp, #-36]	; 0xffffffdc
   131ac:	ldr	r4, [pc, #280]	; 132cc <dbg_emitter@@Base+0x144>
   131b0:	add	r4, pc, r4
   131b4:	ldr	r3, [fp, #4]
   131b8:	ldr	r2, [fp, #-36]	; 0xffffffdc
   131bc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   131c0:	ldr	r0, [pc, #264]	; 132d0 <dbg_emitter@@Base+0x148>
   131c4:	add	r0, pc, r0
   131c8:	bl	11fb4 <printf@plt>
   131cc:	mov	r3, #0
   131d0:	str	r3, [fp, #-16]
   131d4:	b	132a0 <dbg_emitter@@Base+0x118>
   131d8:	ldr	r3, [fp, #-16]
   131dc:	lsl	r3, r3, #3
   131e0:	ldr	r2, [fp, #-28]	; 0xffffffe4
   131e4:	add	r3, r2, r3
   131e8:	ldr	r3, [r3]
   131ec:	ldr	r2, [pc, #224]	; 132d4 <dbg_emitter@@Base+0x14c>
   131f0:	ldr	r2, [r4, r2]
   131f4:	cmp	r3, r2
   131f8:	bne	13228 <dbg_emitter@@Base+0xa0>
   131fc:	ldr	r3, [fp, #-16]
   13200:	lsl	r3, r3, #3
   13204:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13208:	add	r3, r2, r3
   1320c:	ldr	r3, [r3, #4]
   13210:	mov	r2, r3
   13214:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13218:	ldr	r3, [pc, #184]	; 132d8 <dbg_emitter@@Base+0x150>
   1321c:	add	r3, pc, r3
   13220:	mov	r0, r3
   13224:	bl	11fb4 <printf@plt>
   13228:	ldr	r3, [fp, #-16]
   1322c:	lsl	r3, r3, #3
   13230:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13234:	add	r3, r2, r3
   13238:	ldr	r3, [r3]
   1323c:	cmp	r3, #0
   13240:	bne	13270 <dbg_emitter@@Base+0xe8>
   13244:	ldr	r3, [fp, #-16]
   13248:	lsl	r3, r3, #3
   1324c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   13250:	add	r3, r2, r3
   13254:	ldr	r3, [r3, #4]
   13258:	mov	r2, r3
   1325c:	ldr	r1, [fp, #-36]	; 0xffffffdc
   13260:	ldr	r3, [pc, #116]	; 132dc <dbg_emitter@@Base+0x154>
   13264:	add	r3, pc, r3
   13268:	mov	r0, r3
   1326c:	bl	11fb4 <printf@plt>
   13270:	ldr	r3, [fp, #-16]
   13274:	lsl	r3, r3, #3
   13278:	ldr	r2, [fp, #-28]	; 0xffffffe4
   1327c:	add	r3, r2, r3
   13280:	ldr	r3, [r3, #4]
   13284:	mov	r2, r3
   13288:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1328c:	add	r3, r3, r2
   13290:	str	r3, [fp, #-36]	; 0xffffffdc
   13294:	ldr	r3, [fp, #-16]
   13298:	add	r3, r3, #1
   1329c:	str	r3, [fp, #-16]
   132a0:	ldr	r2, [fp, #-16]
   132a4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   132a8:	cmp	r2, r3
   132ac:	blt	131d8 <dbg_emitter@@Base+0x50>
   132b0:	mov	r3, #0
   132b4:	mov	r0, r3
   132b8:	sub	sp, fp, #8
   132bc:	ldr	r4, [sp]
   132c0:	ldr	fp, [sp, #4]
   132c4:	add	sp, sp, #8
   132c8:	pop	{pc}		; (ldr pc, [sp], #4)
   132cc:	andeq	r8, r1, r8, asr #28
   132d0:	andeq	r7, r0, r8, lsr #23
   132d4:	andeq	r0, r0, r8, asr r0
   132d8:	andeq	r7, r0, r4, lsl #23
   132dc:	andeq	r7, r0, r0, ror #22

000132e0 <debug_test@@Base>:
   132e0:	str	r4, [sp, #-12]!
   132e4:	str	fp, [sp, #4]
   132e8:	str	lr, [sp, #8]
   132ec:	add	fp, sp, #8
   132f0:	sub	sp, sp, #292	; 0x124
   132f4:	ldr	r4, [pc, #176]	; 133ac <debug_test@@Base+0xcc>
   132f8:	add	r4, pc, r4
   132fc:	sub	r1, fp, #288	; 0x120
   13300:	mov	r2, #0
   13304:	mov	r3, #0
   13308:	strd	r2, [r1]
   1330c:	strd	r2, [r1, #8]
   13310:	strd	r2, [r1, #16]
   13314:	strd	r2, [r1, #24]
   13318:	strd	r2, [r1, #32]
   1331c:	sub	r3, fp, #248	; 0xf8
   13320:	str	r3, [fp, #-16]
   13324:	ldr	r3, [pc, #132]	; 133b0 <debug_test@@Base+0xd0>
   13328:	add	r3, pc, r3
   1332c:	mov	r0, r3
   13330:	bl	11ffc <puts@plt>
   13334:	mov	r3, #0
   13338:	str	r3, [sp]
   1333c:	mov	r3, #0
   13340:	mov	r2, #0
   13344:	ldr	r1, [pc, #104]	; 133b4 <debug_test@@Base+0xd4>
   13348:	ldr	r1, [r4, r1]
   1334c:	ldr	r0, [fp, #-16]
   13350:	bl	14544 <flatcc_builder_custom_init@@Base>
   13354:	sub	r3, fp, #288	; 0x120
   13358:	mov	r2, #10
   1335c:	mov	r1, r3
   13360:	ldr	r0, [fp, #-16]
   13364:	bl	12b50 <_start@@Base+0xab8>
   13368:	mov	r3, r0
   1336c:	str	r3, [sp, #4]
   13370:	mov	r3, #1
   13374:	str	r3, [sp]
   13378:	mov	r2, #42	; 0x2a
   1337c:	mov	r3, #0
   13380:	ldr	r0, [fp, #-16]
   13384:	bl	12ef4 <_start@@Base+0xe5c>
   13388:	ldr	r0, [fp, #-16]
   1338c:	bl	148fc <flatcc_builder_clear@@Base>
   13390:	mov	r3, #0
   13394:	mov	r0, r3
   13398:	sub	sp, fp, #8
   1339c:	ldr	r4, [sp]
   133a0:	ldr	fp, [sp, #4]
   133a4:	add	sp, sp, #8
   133a8:	pop	{pc}		; (ldr pc, [sp], #4)
   133ac:	andeq	r8, r1, r0, lsl #26
   133b0:	andeq	r7, r0, ip, asr #21
   133b4:	andeq	r0, r0, ip, asr r0

000133b8 <emit_test@@Base>:
   133b8:	str	r4, [sp, #-12]!
   133bc:	str	fp, [sp, #4]
   133c0:	str	lr, [sp, #8]
   133c4:	add	fp, sp, #8
   133c8:	sub	sp, sp, #356	; 0x164
   133cc:	ldr	r4, [pc, #880]	; 13744 <emit_test@@Base+0x38c>
   133d0:	add	r4, pc, r4
   133d4:	ldr	r2, [pc, #876]	; 13748 <emit_test@@Base+0x390>
   133d8:	add	r2, pc, r2
   133dc:	sub	r3, fp, #104	; 0x68
   133e0:	ldrd	r0, [r2]
   133e4:	strd	r0, [r3]
   133e8:	ldrd	r0, [r2, #8]
   133ec:	strd	r0, [r3, #8]
   133f0:	ldrd	r0, [r2, #16]
   133f4:	strd	r0, [r3, #16]
   133f8:	ldrd	r0, [r2, #24]
   133fc:	strd	r0, [r3, #24]
   13400:	ldrd	r0, [r2, #32]
   13404:	strd	r0, [r3, #32]
   13408:	ldrd	r0, [r2, #40]	; 0x28
   1340c:	strd	r0, [r3, #40]	; 0x28
   13410:	ldrd	r0, [r2, #48]	; 0x30
   13414:	strd	r0, [r3, #48]	; 0x30
   13418:	ldrh	r1, [r2, #56]	; 0x38
   1341c:	strh	r1, [r3, #56]	; 0x38
   13420:	ldrb	r2, [r2, #58]	; 0x3a
   13424:	strb	r2, [r3, #58]	; 0x3a
   13428:	ldr	r3, [pc, #796]	; 1374c <emit_test@@Base+0x394>
   1342c:	add	r3, pc, r3
   13430:	sub	r1, fp, #356	; 0x164
   13434:	mov	r0, r3
   13438:	ldrd	r2, [r0]
   1343c:	strd	r2, [r1]
   13440:	ldrd	r2, [r0, #8]
   13444:	strd	r2, [r1, #8]
   13448:	sub	r3, fp, #340	; 0x154
   1344c:	str	r3, [fp, #-16]
   13450:	ldr	r0, [fp, #-16]
   13454:	bl	14620 <flatcc_builder_init@@Base>
   13458:	ldr	r0, [fp, #-16]
   1345c:	bl	19e20 <flatcc_builder_get_emit_context@@Base>
   13460:	str	r0, [fp, #-20]	; 0xffffffec
   13464:	sub	r3, fp, #356	; 0x164
   13468:	mov	r2, #4
   1346c:	mov	r1, r3
   13470:	ldr	r0, [fp, #-16]
   13474:	bl	12b50 <_start@@Base+0xab8>
   13478:	str	r0, [fp, #-24]	; 0xffffffe8
   1347c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13480:	str	r3, [sp, #4]
   13484:	mov	r3, #1
   13488:	str	r3, [sp]
   1348c:	mov	r2, #42	; 0x2a
   13490:	mov	r3, #0
   13494:	ldr	r0, [fp, #-16]
   13498:	bl	12ef4 <_start@@Base+0xe5c>
   1349c:	sub	r3, fp, #108	; 0x6c
   134a0:	mov	r1, r3
   134a4:	ldr	r0, [fp, #-20]	; 0xffffffec
   134a8:	bl	12a38 <_start@@Base+0x9a0>
   134ac:	str	r0, [fp, #-28]	; 0xffffffe4
   134b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   134b4:	cmp	r3, #0
   134b8:	bne	134c4 <emit_test@@Base+0x10c>
   134bc:	mvn	r3, #0
   134c0:	b	13728 <emit_test@@Base+0x370>
   134c4:	ldr	r0, [fp, #-20]	; 0xffffffec
   134c8:	bl	12a10 <_start@@Base+0x978>
   134cc:	mov	r2, r0
   134d0:	ldr	r3, [fp, #-108]	; 0xffffff94
   134d4:	cmp	r2, r3
   134d8:	beq	134fc <emit_test@@Base+0x144>
   134dc:	ldr	r3, [pc, #620]	; 13750 <emit_test@@Base+0x398>
   134e0:	add	r3, pc, r3
   134e4:	mov	r2, #100	; 0x64
   134e8:	ldr	r1, [pc, #612]	; 13754 <emit_test@@Base+0x39c>
   134ec:	add	r1, pc, r1
   134f0:	ldr	r0, [pc, #608]	; 13758 <emit_test@@Base+0x3a0>
   134f4:	add	r0, pc, r0
   134f8:	bl	1208c <__assert_fail@plt>
   134fc:	ldr	r0, [fp, #-16]
   13500:	bl	198bc <flatcc_builder_get_buffer_size@@Base>
   13504:	mov	r2, r0
   13508:	ldr	r3, [fp, #-108]	; 0xffffff94
   1350c:	cmp	r2, r3
   13510:	beq	13534 <emit_test@@Base+0x17c>
   13514:	ldr	r3, [pc, #576]	; 1375c <emit_test@@Base+0x3a4>
   13518:	add	r3, pc, r3
   1351c:	mov	r2, #101	; 0x65
   13520:	ldr	r1, [pc, #568]	; 13760 <emit_test@@Base+0x3a8>
   13524:	add	r1, pc, r1
   13528:	ldr	r0, [pc, #564]	; 13764 <emit_test@@Base+0x3ac>
   1352c:	add	r0, pc, r0
   13530:	bl	1208c <__assert_fail@plt>
   13534:	ldr	r3, [pc, #556]	; 13768 <emit_test@@Base+0x3b0>
   13538:	ldr	r3, [r4, r3]
   1353c:	ldr	r3, [r3]
   13540:	ldr	r2, [fp, #-108]	; 0xffffff94
   13544:	ldr	r1, [pc, #544]	; 1376c <emit_test@@Base+0x3b4>
   13548:	add	r1, pc, r1
   1354c:	mov	r0, r3
   13550:	bl	12038 <fprintf@plt>
   13554:	ldr	r2, [fp, #-108]	; 0xffffff94
   13558:	ldr	r3, [pc, #520]	; 13768 <emit_test@@Base+0x3b0>
   1355c:	ldr	r3, [r4, r3]
   13560:	ldr	r3, [r3]
   13564:	ldr	r1, [fp, #-28]	; 0xffffffe4
   13568:	ldr	r0, [pc, #512]	; 13770 <emit_test@@Base+0x3b8>
   1356c:	add	r0, pc, r0
   13570:	bl	12f70 <_start@@Base+0xed8>
   13574:	ldr	r3, [fp, #-108]	; 0xffffff94
   13578:	cmp	r3, #58	; 0x3a
   1357c:	beq	135a0 <emit_test@@Base+0x1e8>
   13580:	ldr	r3, [pc, #492]	; 13774 <emit_test@@Base+0x3bc>
   13584:	add	r3, pc, r3
   13588:	mov	r2, #106	; 0x6a
   1358c:	ldr	r1, [pc, #484]	; 13778 <emit_test@@Base+0x3c0>
   13590:	add	r1, pc, r1
   13594:	ldr	r0, [pc, #480]	; 1377c <emit_test@@Base+0x3c4>
   13598:	add	r0, pc, r0
   1359c:	bl	1208c <__assert_fail@plt>
   135a0:	ldr	r3, [fp, #-108]	; 0xffffff94
   135a4:	cmp	r3, #58	; 0x3a
   135a8:	beq	135cc <emit_test@@Base+0x214>
   135ac:	ldr	r3, [pc, #460]	; 13780 <emit_test@@Base+0x3c8>
   135b0:	add	r3, pc, r3
   135b4:	mov	r2, #107	; 0x6b
   135b8:	ldr	r1, [pc, #452]	; 13784 <emit_test@@Base+0x3cc>
   135bc:	add	r1, pc, r1
   135c0:	ldr	r0, [pc, #448]	; 13788 <emit_test@@Base+0x3d0>
   135c4:	add	r0, pc, r0
   135c8:	bl	1208c <__assert_fail@plt>
   135cc:	ldr	r2, [fp, #-108]	; 0xffffff94
   135d0:	sub	r3, fp, #104	; 0x68
   135d4:	mov	r1, r3
   135d8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   135dc:	bl	11fd8 <memcmp@plt>
   135e0:	mov	r3, r0
   135e4:	cmp	r3, #0
   135e8:	beq	1360c <emit_test@@Base+0x254>
   135ec:	ldr	r3, [pc, #408]	; 1378c <emit_test@@Base+0x3d4>
   135f0:	add	r3, pc, r3
   135f4:	mov	r2, #108	; 0x6c
   135f8:	ldr	r1, [pc, #400]	; 13790 <emit_test@@Base+0x3d8>
   135fc:	add	r1, pc, r1
   13600:	ldr	r0, [pc, #396]	; 13794 <emit_test@@Base+0x3dc>
   13604:	add	r0, pc, r0
   13608:	bl	1208c <__assert_fail@plt>
   1360c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   13610:	bl	12684 <_start@@Base+0x5ec>
   13614:	str	r0, [fp, #-32]	; 0xffffffe0
   13618:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1361c:	bl	126f4 <_start@@Base+0x65c>
   13620:	mov	r2, r0
   13624:	mov	r3, r1
   13628:	strd	r2, [fp, #-44]	; 0xffffffd4
   1362c:	ldrd	r2, [fp, #-44]	; 0xffffffd4
   13630:	cmp	r3, #0
   13634:	cmpeq	r2, #42	; 0x2a
   13638:	beq	1365c <emit_test@@Base+0x2a4>
   1363c:	ldr	r3, [pc, #340]	; 13798 <emit_test@@Base+0x3e0>
   13640:	add	r3, pc, r3
   13644:	mov	r2, #112	; 0x70
   13648:	ldr	r1, [pc, #332]	; 1379c <emit_test@@Base+0x3e4>
   1364c:	add	r1, pc, r1
   13650:	ldr	r0, [pc, #328]	; 137a0 <emit_test@@Base+0x3e8>
   13654:	add	r0, pc, r0
   13658:	bl	1208c <__assert_fail@plt>
   1365c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13660:	bl	12800 <_start@@Base+0x768>
   13664:	mov	r3, r0
   13668:	cmp	r3, #1
   1366c:	beq	13690 <emit_test@@Base+0x2d8>
   13670:	ldr	r3, [pc, #300]	; 137a4 <emit_test@@Base+0x3ec>
   13674:	add	r3, pc, r3
   13678:	mov	r2, #113	; 0x71
   1367c:	ldr	r1, [pc, #292]	; 137a8 <emit_test@@Base+0x3f0>
   13680:	add	r1, pc, r1
   13684:	ldr	r0, [pc, #288]	; 137ac <emit_test@@Base+0x3f4>
   13688:	add	r0, pc, r0
   1368c:	bl	1208c <__assert_fail@plt>
   13690:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13694:	bl	12900 <_start@@Base+0x868>
   13698:	mov	r3, r0
   1369c:	mov	r0, r3
   136a0:	bl	12518 <_start@@Base+0x480>
   136a4:	mov	r3, r0
   136a8:	cmp	r3, #4
   136ac:	beq	136d0 <emit_test@@Base+0x318>
   136b0:	ldr	r3, [pc, #248]	; 137b0 <emit_test@@Base+0x3f8>
   136b4:	add	r3, pc, r3
   136b8:	mov	r2, #114	; 0x72
   136bc:	ldr	r1, [pc, #240]	; 137b4 <emit_test@@Base+0x3fc>
   136c0:	add	r1, pc, r1
   136c4:	ldr	r0, [pc, #236]	; 137b8 <emit_test@@Base+0x400>
   136c8:	add	r0, pc, r0
   136cc:	bl	1208c <__assert_fail@plt>
   136d0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   136d4:	bl	12900 <_start@@Base+0x868>
   136d8:	mov	r3, r0
   136dc:	mov	r1, #2
   136e0:	mov	r0, r3
   136e4:	bl	1254c <_start@@Base+0x4b4>
   136e8:	vmov.f32	s14, s0
   136ec:	vldr	s15, [pc, #76]	; 13740 <emit_test@@Base+0x388>
   136f0:	vcmp.f32	s14, s15
   136f4:	vmrs	APSR_nzcv, fpscr
   136f8:	beq	1371c <emit_test@@Base+0x364>
   136fc:	ldr	r3, [pc, #184]	; 137bc <emit_test@@Base+0x404>
   13700:	add	r3, pc, r3
   13704:	mov	r2, #115	; 0x73
   13708:	ldr	r1, [pc, #176]	; 137c0 <emit_test@@Base+0x408>
   1370c:	add	r1, pc, r1
   13710:	ldr	r0, [pc, #172]	; 137c4 <emit_test@@Base+0x40c>
   13714:	add	r0, pc, r0
   13718:	bl	1208c <__assert_fail@plt>
   1371c:	ldr	r0, [fp, #-16]
   13720:	bl	148fc <flatcc_builder_clear@@Base>
   13724:	mov	r3, #0
   13728:	mov	r0, r3
   1372c:	sub	sp, fp, #8
   13730:	ldr	r4, [sp]
   13734:	ldr	fp, [sp, #4]
   13738:	add	sp, sp, #8
   1373c:	pop	{pc}		; (ldr pc, [sp], #4)
   13740:	svccc	0x0099999a
   13744:	andeq	r8, r1, r8, lsr #24
   13748:	strdeq	r7, [r0], -r8
   1374c:	andeq	r7, r0, r0, ror #21
   13750:	andeq	r7, r0, r8, asr #20
   13754:	andeq	r7, r0, ip, asr r9
   13758:			; <UNDEFINED> instruction: 0x000079b8
   1375c:	andeq	r7, r0, r0, lsl sl
   13760:	andeq	r7, r0, r4, lsr #18
   13764:	andeq	r7, r0, r0, lsl #19
   13768:	andeq	r0, r0, r0, rrx
   1376c:	andeq	r7, r0, r8, ror #18
   13770:	andeq	r7, r0, r8, asr r9
   13774:	andeq	r7, r0, r4, lsr #19
   13778:			; <UNDEFINED> instruction: 0x000078b8
   1377c:	andeq	r7, r0, r4, lsl r9
   13780:	andeq	r7, r0, r8, ror r9
   13784:	andeq	r7, r0, ip, lsl #17
   13788:	andeq	r7, r0, r8, ror #17
   1378c:	andeq	r7, r0, r8, lsr r9
   13790:	andeq	r7, r0, ip, asr #16
   13794:	andeq	r7, r0, r8, lsr #17
   13798:	andeq	r7, r0, r8, ror #17
   1379c:	strdeq	r7, [r0], -ip
   137a0:	andeq	r7, r0, r8, asr r8
   137a4:			; <UNDEFINED> instruction: 0x000078b4
   137a8:	andeq	r7, r0, r8, asr #15
   137ac:	andeq	r7, r0, r4, lsr #16
   137b0:	andeq	r7, r0, r4, ror r8
   137b4:	andeq	r7, r0, r8, lsl #15
   137b8:	andeq	r7, r0, r4, ror #15
   137bc:	andeq	r7, r0, r8, lsr #16
   137c0:	andeq	r7, r0, ip, lsr r7
   137c4:	muleq	r0, r8, r7

000137c8 <main@@Base>:
   137c8:	str	fp, [sp, #-8]!
   137cc:	str	lr, [sp, #4]
   137d0:	add	fp, sp, #4
   137d4:	sub	sp, sp, #16
   137d8:	str	r0, [fp, #-16]
   137dc:	str	r1, [fp, #-20]	; 0xffffffec
   137e0:	mov	r3, #0
   137e4:	str	r3, [fp, #-8]
   137e8:	bl	132e0 <debug_test@@Base>
   137ec:	mov	r2, r0
   137f0:	ldr	r3, [fp, #-8]
   137f4:	orr	r3, r3, r2
   137f8:	str	r3, [fp, #-8]
   137fc:	bl	133b8 <emit_test@@Base>
   13800:	mov	r2, r0
   13804:	ldr	r3, [fp, #-8]
   13808:	orr	r3, r3, r2
   1380c:	str	r3, [fp, #-8]
   13810:	ldr	r3, [fp, #-8]
   13814:	mov	r0, r3
   13818:	sub	sp, fp, #4
   1381c:	ldr	fp, [sp]
   13820:	add	sp, sp, #4
   13824:	pop	{pc}		; (ldr pc, [sp], #4)
   13828:	str	fp, [sp, #-8]!
   1382c:	str	lr, [sp, #4]
   13830:	add	fp, sp, #4
   13834:	sub	sp, sp, #16
   13838:	str	r0, [fp, #-16]
   1383c:	str	r1, [fp, #-20]	; 0xffffffec
   13840:	mov	r3, #0
   13844:	str	r3, [fp, #-12]
   13848:	ldr	r3, [fp, #-16]
   1384c:	cmp	r3, #3
   13850:	bhi	1385c <main@@Base+0x94>
   13854:	mov	r3, #4
   13858:	str	r3, [fp, #-16]
   1385c:	sub	r3, fp, #12
   13860:	ldr	r2, [fp, #-20]	; 0xffffffec
   13864:	ldr	r1, [fp, #-16]
   13868:	mov	r0, r3
   1386c:	bl	12044 <posix_memalign@plt>
   13870:	str	r0, [fp, #-8]
   13874:	ldr	r3, [fp, #-8]
   13878:	cmp	r3, #0
   1387c:	beq	138a0 <main@@Base+0xd8>
   13880:	ldr	r3, [fp, #-12]
   13884:	cmp	r3, #0
   13888:	beq	138a0 <main@@Base+0xd8>
   1388c:	ldr	r3, [fp, #-12]
   13890:	mov	r0, r3
   13894:	bl	11fc0 <free@plt>
   13898:	mov	r3, #0
   1389c:	str	r3, [fp, #-12]
   138a0:	ldr	r3, [fp, #-12]
   138a4:	mov	r0, r3
   138a8:	sub	sp, fp, #4
   138ac:	ldr	fp, [sp]
   138b0:	add	sp, sp, #4
   138b4:	pop	{pc}		; (ldr pc, [sp], #4)
   138b8:	push	{fp}		; (str fp, [sp, #-4]!)
   138bc:	add	fp, sp, #0
   138c0:	sub	sp, sp, #12
   138c4:	str	r0, [fp, #-8]
   138c8:	ldr	r3, [fp, #-8]
   138cc:	mov	r0, r3
   138d0:	add	sp, fp, #0
   138d4:	pop	{fp}		; (ldr fp, [sp], #4)
   138d8:	bx	lr
   138dc:	push	{fp}		; (str fp, [sp, #-4]!)
   138e0:	add	fp, sp, #0
   138e4:	sub	sp, sp, #12
   138e8:	mov	r3, r0
   138ec:	strb	r3, [fp, #-5]
   138f0:	ldrb	r3, [fp, #-5]
   138f4:	mov	r0, r3
   138f8:	add	sp, fp, #0
   138fc:	pop	{fp}		; (ldr fp, [sp], #4)
   13900:	bx	lr
   13904:	push	{fp}		; (str fp, [sp, #-4]!)
   13908:	add	fp, sp, #0
   1390c:	sub	sp, sp, #12
   13910:	str	r0, [fp, #-8]
   13914:	ldr	r3, [fp, #-8]
   13918:	mov	r0, r3
   1391c:	add	sp, fp, #0
   13920:	pop	{fp}		; (ldr fp, [sp], #4)
   13924:	bx	lr
   13928:	push	{fp}		; (str fp, [sp, #-4]!)
   1392c:	add	fp, sp, #0
   13930:	sub	sp, sp, #12
   13934:	str	r0, [fp, #-8]
   13938:	str	r1, [fp, #-12]
   1393c:	ldr	r3, [fp, #-8]
   13940:	ldr	r2, [r3]
   13944:	ldr	r3, [fp, #-8]
   13948:	ldr	r3, [r3, #4]
   1394c:	cmp	r2, r3
   13950:	bne	1397c <main@@Base+0x1b4>
   13954:	ldr	r3, [fp, #-12]
   13958:	cmp	r3, #0
   1395c:	beq	13970 <main@@Base+0x1a8>
   13960:	ldr	r3, [fp, #-8]
   13964:	ldr	r2, [r3, #24]
   13968:	ldr	r3, [fp, #-12]
   1396c:	str	r2, [r3]
   13970:	ldr	r3, [fp, #-8]
   13974:	ldr	r3, [r3, #8]
   13978:	b	13998 <main@@Base+0x1d0>
   1397c:	ldr	r3, [fp, #-12]
   13980:	cmp	r3, #0
   13984:	beq	13994 <main@@Base+0x1cc>
   13988:	ldr	r3, [fp, #-12]
   1398c:	mov	r2, #0
   13990:	str	r2, [r3]
   13994:	mov	r3, #0
   13998:	mov	r0, r3
   1399c:	add	sp, fp, #0
   139a0:	pop	{fp}		; (ldr fp, [sp], #4)
   139a4:	bx	lr
   139a8:	str	fp, [sp, #-8]!
   139ac:	str	lr, [sp, #4]
   139b0:	add	fp, sp, #4
   139b4:	sub	sp, sp, #16
   139b8:	str	r0, [fp, #-16]
   139bc:	str	r1, [fp, #-20]	; 0xffffffec
   139c0:	ldr	r2, [fp, #-20]	; 0xffffffec
   139c4:	mov	r1, #0
   139c8:	ldr	r0, [fp, #-16]
   139cc:	bl	12068 <memchr@plt>
   139d0:	str	r0, [fp, #-8]
   139d4:	ldr	r3, [fp, #-8]
   139d8:	cmp	r3, #0
   139dc:	beq	139f0 <main@@Base+0x228>
   139e0:	ldr	r2, [fp, #-8]
   139e4:	ldr	r3, [fp, #-16]
   139e8:	sub	r3, r2, r3
   139ec:	b	139f4 <main@@Base+0x22c>
   139f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   139f4:	mov	r0, r3
   139f8:	sub	sp, fp, #4
   139fc:	ldr	fp, [sp]
   13a00:	add	sp, sp, #4
   13a04:	pop	{pc}		; (ldr pc, [sp], #4)

00013a08 <flatcc_builder_default_alloc@@Base>:
   13a08:	str	fp, [sp, #-8]!
   13a0c:	str	lr, [sp, #4]
   13a10:	add	fp, sp, #4
   13a14:	sub	sp, sp, #24
   13a18:	str	r0, [fp, #-16]
   13a1c:	str	r1, [fp, #-20]	; 0xffffffec
   13a20:	str	r2, [fp, #-24]	; 0xffffffe8
   13a24:	str	r3, [fp, #-28]	; 0xffffffe4
   13a28:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13a2c:	cmp	r3, #0
   13a30:	bne	13a74 <flatcc_builder_default_alloc@@Base+0x6c>
   13a34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a38:	ldr	r3, [r3]
   13a3c:	cmp	r3, #0
   13a40:	beq	13a6c <flatcc_builder_default_alloc@@Base+0x64>
   13a44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a48:	ldr	r3, [r3]
   13a4c:	mov	r0, r3
   13a50:	bl	11fc0 <free@plt>
   13a54:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a58:	mov	r2, #0
   13a5c:	str	r2, [r3]
   13a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   13a64:	mov	r2, #0
   13a68:	str	r2, [r3, #4]
   13a6c:	mov	r3, #0
   13a70:	b	13bc8 <flatcc_builder_default_alloc@@Base+0x1c0>
   13a74:	ldr	r3, [fp, #4]
   13a78:	sub	r3, r3, #1
   13a7c:	cmp	r3, #6
   13a80:	addls	pc, pc, r3, lsl #2
   13a84:	b	13ad4 <flatcc_builder_default_alloc@@Base+0xcc>
   13a88:	b	13aa4 <flatcc_builder_default_alloc@@Base+0x9c>
   13a8c:	b	13ad4 <flatcc_builder_default_alloc@@Base+0xcc>
   13a90:	b	13ad4 <flatcc_builder_default_alloc@@Base+0xcc>
   13a94:	b	13abc <flatcc_builder_default_alloc@@Base+0xb4>
   13a98:	b	13ab0 <flatcc_builder_default_alloc@@Base+0xa8>
   13a9c:	b	13ad4 <flatcc_builder_default_alloc@@Base+0xcc>
   13aa0:	b	13ac8 <flatcc_builder_default_alloc@@Base+0xc0>
   13aa4:	mov	r3, #256	; 0x100
   13aa8:	str	r3, [fp, #-8]
   13aac:	b	13ae0 <flatcc_builder_default_alloc@@Base+0xd8>
   13ab0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13ab4:	str	r3, [fp, #-8]
   13ab8:	b	13ae0 <flatcc_builder_default_alloc@@Base+0xd8>
   13abc:	mov	r3, #288	; 0x120
   13ac0:	str	r3, [fp, #-8]
   13ac4:	b	13ae0 <flatcc_builder_default_alloc@@Base+0xd8>
   13ac8:	mov	r3, #64	; 0x40
   13acc:	str	r3, [fp, #-8]
   13ad0:	b	13ae0 <flatcc_builder_default_alloc@@Base+0xd8>
   13ad4:	mov	r3, #32
   13ad8:	str	r3, [fp, #-8]
   13adc:	nop	{0}
   13ae0:	b	13af0 <flatcc_builder_default_alloc@@Base+0xe8>
   13ae4:	ldr	r3, [fp, #-8]
   13ae8:	lsl	r3, r3, #1
   13aec:	str	r3, [fp, #-8]
   13af0:	ldr	r2, [fp, #-8]
   13af4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13af8:	cmp	r2, r3
   13afc:	bcc	13ae4 <flatcc_builder_default_alloc@@Base+0xdc>
   13b00:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b04:	ldr	r3, [r3, #4]
   13b08:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13b0c:	cmp	r2, r3
   13b10:	bhi	13b34 <flatcc_builder_default_alloc@@Base+0x12c>
   13b14:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b18:	ldr	r3, [r3, #4]
   13b1c:	lsr	r3, r3, #1
   13b20:	ldr	r2, [fp, #-8]
   13b24:	cmp	r2, r3
   13b28:	bhi	13b34 <flatcc_builder_default_alloc@@Base+0x12c>
   13b2c:	mov	r3, #0
   13b30:	b	13bc8 <flatcc_builder_default_alloc@@Base+0x1c0>
   13b34:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b38:	ldr	r3, [r3]
   13b3c:	ldr	r1, [fp, #-8]
   13b40:	mov	r0, r3
   13b44:	bl	11fe4 <realloc@plt>
   13b48:	str	r0, [fp, #-12]
   13b4c:	ldr	r3, [fp, #-12]
   13b50:	cmp	r3, #0
   13b54:	bne	13b60 <flatcc_builder_default_alloc@@Base+0x158>
   13b58:	mvn	r3, #0
   13b5c:	b	13bc8 <flatcc_builder_default_alloc@@Base+0x1c0>
   13b60:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13b64:	cmp	r3, #0
   13b68:	beq	13bac <flatcc_builder_default_alloc@@Base+0x1a4>
   13b6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b70:	ldr	r3, [r3, #4]
   13b74:	ldr	r2, [fp, #-8]
   13b78:	cmp	r2, r3
   13b7c:	bls	13bac <flatcc_builder_default_alloc@@Base+0x1a4>
   13b80:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b84:	ldr	r3, [r3, #4]
   13b88:	ldr	r2, [fp, #-12]
   13b8c:	add	r0, r2, r3
   13b90:	ldr	r3, [fp, #-20]	; 0xffffffec
   13b94:	ldr	r3, [r3, #4]
   13b98:	ldr	r2, [fp, #-8]
   13b9c:	sub	r3, r2, r3
   13ba0:	mov	r2, r3
   13ba4:	mov	r1, #0
   13ba8:	bl	12050 <memset@plt>
   13bac:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bb0:	ldr	r2, [fp, #-12]
   13bb4:	str	r2, [r3]
   13bb8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13bbc:	ldr	r2, [fp, #-8]
   13bc0:	str	r2, [r3, #4]
   13bc4:	mov	r3, #0
   13bc8:	mov	r0, r3
   13bcc:	sub	sp, fp, #4
   13bd0:	ldr	fp, [sp]
   13bd4:	add	sp, sp, #4
   13bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   13bdc:	push	{fp}		; (str fp, [sp, #-4]!)
   13be0:	add	fp, sp, #0
   13be4:	sub	sp, sp, #20
   13be8:	str	r0, [fp, #-16]
   13bec:	str	r1, [fp, #-20]	; 0xffffffec
   13bf0:	ldr	r3, [fp, #-16]
   13bf4:	add	r3, r3, #52	; 0x34
   13bf8:	add	r3, r3, #8
   13bfc:	str	r3, [fp, #-8]
   13c00:	ldr	r3, [fp, #-16]
   13c04:	ldr	r2, [r3, #60]	; 0x3c
   13c08:	ldr	r3, [fp, #-16]
   13c0c:	ldr	r3, [r3, #28]
   13c10:	add	r2, r2, r3
   13c14:	ldr	r3, [fp, #-16]
   13c18:	str	r2, [r3, #16]
   13c1c:	ldr	r3, [fp, #-8]
   13c20:	ldr	r2, [r3, #4]
   13c24:	ldr	r3, [fp, #-16]
   13c28:	ldr	r3, [r3, #28]
   13c2c:	sub	r2, r2, r3
   13c30:	ldr	r3, [fp, #-16]
   13c34:	str	r2, [r3, #24]
   13c38:	ldr	r3, [fp, #-16]
   13c3c:	ldr	r3, [r3, #24]
   13c40:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c44:	cmp	r2, r3
   13c48:	bcs	13c58 <flatcc_builder_default_alloc@@Base+0x250>
   13c4c:	ldr	r3, [fp, #-16]
   13c50:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c54:	str	r2, [r3, #24]
   13c58:	ldr	r3, [fp, #-16]
   13c5c:	ldr	r3, [r3, #32]
   13c60:	ldr	r2, [fp, #-20]	; 0xffffffec
   13c64:	str	r2, [r3, #4]
   13c68:	nop	{0}
   13c6c:	add	sp, fp, #0
   13c70:	pop	{fp}		; (ldr fp, [sp], #4)
   13c74:	bx	lr
   13c78:	str	r4, [sp, #-12]!
   13c7c:	str	fp, [sp, #4]
   13c80:	str	lr, [sp, #8]
   13c84:	add	fp, sp, #8
   13c88:	sub	sp, sp, #36	; 0x24
   13c8c:	str	r0, [fp, #-24]	; 0xffffffe8
   13c90:	str	r1, [fp, #-28]	; 0xffffffe4
   13c94:	str	r2, [fp, #-32]	; 0xffffffe0
   13c98:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13c9c:	add	r3, r3, #52	; 0x34
   13ca0:	add	r3, r3, #8
   13ca4:	str	r3, [fp, #-16]
   13ca8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cac:	ldr	r4, [r3, #48]	; 0x30
   13cb0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cb4:	ldr	r0, [r3, #40]	; 0x28
   13cb8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   13cbc:	ldr	r2, [r3, #28]
   13cc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   13cc4:	add	r2, r2, r3
   13cc8:	mov	r3, #1
   13ccc:	str	r3, [sp]
   13cd0:	mov	r3, #1
   13cd4:	ldr	r1, [fp, #-16]
   13cd8:	blx	r4
   13cdc:	mov	r3, r0
   13ce0:	cmp	r3, #0
   13ce4:	beq	13cf0 <flatcc_builder_default_alloc@@Base+0x2e8>
   13ce8:	mvn	r3, #0
   13cec:	b	13d00 <flatcc_builder_default_alloc@@Base+0x2f8>
   13cf0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   13cf4:	ldr	r0, [fp, #-24]	; 0xffffffe8
   13cf8:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   13cfc:	mov	r3, #0
   13d00:	mov	r0, r3
   13d04:	sub	sp, fp, #8
   13d08:	ldr	r4, [sp]
   13d0c:	ldr	fp, [sp, #4]
   13d10:	add	sp, sp, #8
   13d14:	pop	{pc}		; (ldr pc, [sp], #4)
   13d18:	str	fp, [sp, #-8]!
   13d1c:	str	lr, [sp, #4]
   13d20:	add	fp, sp, #4
   13d24:	sub	sp, sp, #16
   13d28:	str	r0, [fp, #-16]
   13d2c:	str	r1, [fp, #-20]	; 0xffffffec
   13d30:	ldr	r3, [fp, #-16]
   13d34:	ldr	r3, [r3, #20]
   13d38:	str	r3, [fp, #-8]
   13d3c:	ldr	r3, [fp, #-16]
   13d40:	ldr	r2, [r3, #20]
   13d44:	ldr	r3, [fp, #-20]	; 0xffffffec
   13d48:	add	r2, r2, r3
   13d4c:	ldr	r3, [fp, #-16]
   13d50:	str	r2, [r3, #20]
   13d54:	ldr	r3, [fp, #-16]
   13d58:	ldr	r2, [r3, #20]
   13d5c:	ldr	r3, [fp, #-16]
   13d60:	ldr	r3, [r3, #24]
   13d64:	cmp	r2, r3
   13d68:	bcc	13d9c <flatcc_builder_default_alloc@@Base+0x394>
   13d6c:	ldr	r3, [fp, #-16]
   13d70:	ldr	r3, [r3, #20]
   13d74:	add	r3, r3, #1
   13d78:	mvn	r2, #3
   13d7c:	mov	r1, r3
   13d80:	ldr	r0, [fp, #-16]
   13d84:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x270>
   13d88:	mov	r3, r0
   13d8c:	cmp	r3, #0
   13d90:	beq	13d9c <flatcc_builder_default_alloc@@Base+0x394>
   13d94:	mov	r3, #0
   13d98:	b	13dac <flatcc_builder_default_alloc@@Base+0x3a4>
   13d9c:	ldr	r3, [fp, #-16]
   13da0:	ldr	r2, [r3, #16]
   13da4:	ldr	r3, [fp, #-8]
   13da8:	add	r3, r2, r3
   13dac:	mov	r0, r3
   13db0:	sub	sp, fp, #4
   13db4:	ldr	fp, [sp]
   13db8:	add	sp, sp, #4
   13dbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13dc0:	str	fp, [sp, #-8]!
   13dc4:	str	lr, [sp, #4]
   13dc8:	add	fp, sp, #4
   13dcc:	sub	sp, sp, #8
   13dd0:	str	r0, [fp, #-8]
   13dd4:	str	r1, [fp, #-12]
   13dd8:	ldr	r3, [fp, #-8]
   13ddc:	ldr	r2, [r3, #20]
   13de0:	ldr	r3, [fp, #-12]
   13de4:	sub	r2, r2, r3
   13de8:	ldr	r3, [fp, #-8]
   13dec:	str	r2, [r3, #20]
   13df0:	ldr	r3, [fp, #-8]
   13df4:	ldr	r2, [r3, #16]
   13df8:	ldr	r3, [fp, #-8]
   13dfc:	ldr	r3, [r3, #20]
   13e00:	add	r3, r2, r3
   13e04:	ldr	r2, [fp, #-12]
   13e08:	mov	r1, #0
   13e0c:	mov	r0, r3
   13e10:	bl	12050 <memset@plt>
   13e14:	nop	{0}
   13e18:	sub	sp, fp, #4
   13e1c:	ldr	fp, [sp]
   13e20:	add	sp, sp, #4
   13e24:	pop	{pc}		; (ldr pc, [sp], #4)
   13e28:	str	fp, [sp, #-8]!
   13e2c:	str	lr, [sp, #4]
   13e30:	add	fp, sp, #4
   13e34:	sub	sp, sp, #24
   13e38:	str	r0, [fp, #-16]
   13e3c:	str	r1, [fp, #-20]	; 0xffffffec
   13e40:	str	r2, [fp, #-24]	; 0xffffffe8
   13e44:	ldr	r1, [fp, #-24]	; 0xffffffe8
   13e48:	ldr	r0, [fp, #-16]
   13e4c:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   13e50:	str	r0, [fp, #-8]
   13e54:	ldr	r3, [fp, #-8]
   13e58:	cmp	r3, #0
   13e5c:	bne	13e68 <flatcc_builder_default_alloc@@Base+0x460>
   13e60:	mov	r3, #0
   13e64:	b	13e7c <flatcc_builder_default_alloc@@Base+0x474>
   13e68:	ldr	r2, [fp, #-24]	; 0xffffffe8
   13e6c:	ldr	r1, [fp, #-20]	; 0xffffffec
   13e70:	ldr	r0, [fp, #-8]
   13e74:	bl	11fcc <memcpy@plt>
   13e78:	ldr	r3, [fp, #-8]
   13e7c:	mov	r0, r3
   13e80:	sub	sp, fp, #4
   13e84:	ldr	fp, [sp]
   13e88:	add	sp, sp, #4
   13e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   13e90:	str	fp, [sp, #-8]!
   13e94:	str	lr, [sp, #4]
   13e98:	add	fp, sp, #4
   13e9c:	sub	sp, sp, #24
   13ea0:	str	r0, [fp, #-16]
   13ea4:	str	r1, [fp, #-20]	; 0xffffffec
   13ea8:	mov	r1, r2
   13eac:	mov	r2, r3
   13eb0:	mov	r3, r1
   13eb4:	strh	r3, [fp, #-22]	; 0xffffffea
   13eb8:	mov	r3, r2
   13ebc:	strh	r3, [fp, #-24]	; 0xffffffe8
   13ec0:	ldr	r3, [fp, #-16]
   13ec4:	ldr	r2, [r3, #20]
   13ec8:	ldrh	r3, [fp, #-22]	; 0xffffffea
   13ecc:	add	r3, r2, r3
   13ed0:	sub	r3, r3, #1
   13ed4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   13ed8:	rsb	r2, r2, #0
   13edc:	and	r3, r3, r2
   13ee0:	str	r3, [fp, #-8]
   13ee4:	ldr	r2, [fp, #-8]
   13ee8:	ldr	r3, [fp, #-20]	; 0xffffffec
   13eec:	add	r2, r2, r3
   13ef0:	ldr	r3, [fp, #-16]
   13ef4:	str	r2, [r3, #20]
   13ef8:	ldr	r3, [fp, #-16]
   13efc:	ldr	r2, [r3, #20]
   13f00:	ldr	r3, [fp, #-16]
   13f04:	ldr	r3, [r3, #24]
   13f08:	cmp	r2, r3
   13f0c:	bcc	13f40 <flatcc_builder_default_alloc@@Base+0x538>
   13f10:	ldr	r3, [fp, #-16]
   13f14:	ldr	r3, [r3, #20]
   13f18:	add	r3, r3, #1
   13f1c:	movw	r2, #65532	; 0xfffc
   13f20:	mov	r1, r3
   13f24:	ldr	r0, [fp, #-16]
   13f28:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x270>
   13f2c:	mov	r3, r0
   13f30:	cmp	r3, #0
   13f34:	beq	13f40 <flatcc_builder_default_alloc@@Base+0x538>
   13f38:	mov	r3, #0
   13f3c:	b	13fa0 <flatcc_builder_default_alloc@@Base+0x598>
   13f40:	ldr	r3, [fp, #-8]
   13f44:	uxth	r2, r3
   13f48:	ldr	r3, [fp, #-16]
   13f4c:	ldr	r1, [r3, #4]
   13f50:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   13f54:	lsl	r3, r3, #1
   13f58:	add	r3, r1, r3
   13f5c:	add	r2, r2, #4
   13f60:	uxth	r2, r2
   13f64:	strh	r2, [r3]
   13f68:	ldr	r3, [fp, #-16]
   13f6c:	ldrh	r3, [r3, #8]
   13f70:	ldrh	r2, [fp, #-24]	; 0xffffffe8
   13f74:	cmp	r2, r3
   13f78:	bcc	13f90 <flatcc_builder_default_alloc@@Base+0x588>
   13f7c:	ldrh	r3, [fp, #-24]	; 0xffffffe8
   13f80:	add	r3, r3, #1
   13f84:	uxth	r2, r3
   13f88:	ldr	r3, [fp, #-16]
   13f8c:	strh	r2, [r3, #8]
   13f90:	ldr	r3, [fp, #-16]
   13f94:	ldr	r2, [r3, #16]
   13f98:	ldr	r3, [fp, #-8]
   13f9c:	add	r3, r2, r3
   13fa0:	mov	r0, r3
   13fa4:	sub	sp, fp, #4
   13fa8:	ldr	fp, [sp]
   13fac:	add	sp, sp, #4
   13fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb4:	str	fp, [sp, #-8]!
   13fb8:	str	lr, [sp, #4]
   13fbc:	add	fp, sp, #4
   13fc0:	sub	sp, sp, #16
   13fc4:	str	r0, [fp, #-16]
   13fc8:	mov	r3, r1
   13fcc:	strh	r3, [fp, #-18]	; 0xffffffee
   13fd0:	ldr	r3, [fp, #-16]
   13fd4:	ldr	r3, [r3, #20]
   13fd8:	add	r3, r3, #3
   13fdc:	bic	r3, r3, #3
   13fe0:	str	r3, [fp, #-8]
   13fe4:	ldr	r3, [fp, #-8]
   13fe8:	add	r2, r3, #4
   13fec:	ldr	r3, [fp, #-16]
   13ff0:	str	r2, [r3, #20]
   13ff4:	ldr	r3, [fp, #-16]
   13ff8:	ldr	r2, [r3, #20]
   13ffc:	ldr	r3, [fp, #-16]
   14000:	ldr	r3, [r3, #24]
   14004:	cmp	r2, r3
   14008:	bls	14038 <flatcc_builder_default_alloc@@Base+0x630>
   1400c:	ldr	r3, [fp, #-16]
   14010:	ldr	r3, [r3, #20]
   14014:	movw	r2, #65532	; 0xfffc
   14018:	mov	r1, r3
   1401c:	ldr	r0, [fp, #-16]
   14020:	bl	13c78 <flatcc_builder_default_alloc@@Base+0x270>
   14024:	mov	r3, r0
   14028:	cmp	r3, #0
   1402c:	beq	14038 <flatcc_builder_default_alloc@@Base+0x630>
   14030:	mov	r3, #0
   14034:	b	140b8 <flatcc_builder_default_alloc@@Base+0x6b0>
   14038:	ldr	r3, [fp, #-8]
   1403c:	uxth	r2, r3
   14040:	ldr	r3, [fp, #-16]
   14044:	ldr	r1, [r3, #4]
   14048:	ldrh	r3, [fp, #-18]	; 0xffffffee
   1404c:	lsl	r3, r3, #1
   14050:	add	r3, r1, r3
   14054:	add	r2, r2, #4
   14058:	uxth	r2, r2
   1405c:	strh	r2, [r3]
   14060:	ldr	r3, [fp, #-16]
   14064:	ldrh	r3, [r3, #8]
   14068:	ldrh	r2, [fp, #-18]	; 0xffffffee
   1406c:	cmp	r2, r3
   14070:	bcc	14088 <flatcc_builder_default_alloc@@Base+0x680>
   14074:	ldrh	r3, [fp, #-18]	; 0xffffffee
   14078:	add	r3, r3, #1
   1407c:	uxth	r2, r3
   14080:	ldr	r3, [fp, #-16]
   14084:	strh	r2, [r3, #8]
   14088:	ldr	r3, [fp, #-16]
   1408c:	ldr	r3, [r3]
   14090:	add	r1, r3, #2
   14094:	ldr	r2, [fp, #-16]
   14098:	str	r1, [r2]
   1409c:	ldr	r2, [fp, #-8]
   140a0:	uxth	r2, r2
   140a4:	strh	r2, [r3]
   140a8:	ldr	r3, [fp, #-16]
   140ac:	ldr	r2, [r3, #16]
   140b0:	ldr	r3, [fp, #-8]
   140b4:	add	r3, r2, r3
   140b8:	mov	r0, r3
   140bc:	sub	sp, fp, #4
   140c0:	ldr	fp, [sp]
   140c4:	add	sp, sp, #4
   140c8:	pop	{pc}		; (ldr pc, [sp], #4)
   140cc:	str	r4, [sp, #-12]!
   140d0:	str	fp, [sp, #4]
   140d4:	str	lr, [sp, #8]
   140d8:	add	fp, sp, #8
   140dc:	sub	sp, sp, #36	; 0x24
   140e0:	str	r0, [fp, #-24]	; 0xffffffe8
   140e4:	str	r1, [fp, #-28]	; 0xffffffe4
   140e8:	str	r2, [fp, #-32]	; 0xffffffe0
   140ec:	str	r3, [fp, #-36]	; 0xffffffdc
   140f0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   140f4:	add	r2, r3, #52	; 0x34
   140f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   140fc:	lsl	r3, r3, #3
   14100:	add	r3, r2, r3
   14104:	str	r3, [fp, #-16]
   14108:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1410c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   14110:	add	r2, r2, r3
   14114:	ldr	r3, [fp, #-16]
   14118:	ldr	r3, [r3, #4]
   1411c:	cmp	r2, r3
   14120:	bls	14180 <flatcc_builder_default_alloc@@Base+0x778>
   14124:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14128:	ldr	r4, [r3, #48]	; 0x30
   1412c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14130:	ldr	r0, [r3, #40]	; 0x28
   14134:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14138:	ldr	r3, [fp, #-36]	; 0xffffffdc
   1413c:	add	r2, r2, r3
   14140:	ldr	r3, [fp, #-28]	; 0xffffffe4
   14144:	str	r3, [sp]
   14148:	ldr	r3, [fp, #4]
   1414c:	ldr	r1, [fp, #-16]
   14150:	blx	r4
   14154:	mov	r3, r0
   14158:	cmp	r3, #0
   1415c:	beq	14180 <flatcc_builder_default_alloc@@Base+0x778>
   14160:	ldr	r3, [pc, #68]	; 141ac <flatcc_builder_default_alloc@@Base+0x7a4>
   14164:	add	r3, pc, r3
   14168:	mov	r2, #308	; 0x134
   1416c:	ldr	r1, [pc, #60]	; 141b0 <flatcc_builder_default_alloc@@Base+0x7a8>
   14170:	add	r1, pc, r1
   14174:	ldr	r0, [pc, #56]	; 141b4 <flatcc_builder_default_alloc@@Base+0x7ac>
   14178:	add	r0, pc, r0
   1417c:	bl	1208c <__assert_fail@plt>
   14180:	ldr	r3, [fp, #-16]
   14184:	ldr	r3, [r3]
   14188:	mov	r2, r3
   1418c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14190:	add	r3, r2, r3
   14194:	mov	r0, r3
   14198:	sub	sp, fp, #8
   1419c:	ldr	r4, [sp]
   141a0:	ldr	fp, [sp, #4]
   141a4:	add	sp, sp, #8
   141a8:	pop	{pc}		; (ldr pc, [sp], #4)
   141ac:	andeq	r7, r0, ip, asr #8
   141b0:	andeq	r7, r0, ip
   141b4:	andeq	r7, r0, r4, rrx
   141b8:	str	fp, [sp, #-8]!
   141bc:	str	lr, [sp, #4]
   141c0:	add	fp, sp, #4
   141c4:	sub	sp, sp, #24
   141c8:	str	r0, [fp, #-16]
   141cc:	str	r1, [fp, #-20]	; 0xffffffec
   141d0:	ldr	r3, [fp, #-16]
   141d4:	ldr	r3, [r3, #32]
   141d8:	ldr	r2, [r3, #16]
   141dc:	ldr	r3, [fp, #-16]
   141e0:	ldr	r3, [r3, #32]
   141e4:	ldrh	r3, [r3, #28]
   141e8:	lsl	r3, r3, #1
   141ec:	add	r3, r2, r3
   141f0:	str	r3, [fp, #-8]
   141f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   141f8:	add	r3, r3, #2
   141fc:	lsl	r3, r3, #1
   14200:	str	r3, [fp, #-12]
   14204:	mov	r3, #1
   14208:	str	r3, [sp]
   1420c:	ldr	r3, [fp, #-12]
   14210:	ldr	r2, [fp, #-8]
   14214:	mov	r1, #0
   14218:	ldr	r0, [fp, #-16]
   1421c:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   14220:	mov	r2, r0
   14224:	ldr	r3, [fp, #-16]
   14228:	str	r2, [r3, #4]
   1422c:	ldr	r3, [fp, #-16]
   14230:	ldr	r3, [r3, #4]
   14234:	cmp	r3, #0
   14238:	bne	14244 <flatcc_builder_default_alloc@@Base+0x83c>
   1423c:	mvn	r3, #0
   14240:	b	142bc <flatcc_builder_default_alloc@@Base+0x8b4>
   14244:	ldr	r3, [fp, #-16]
   14248:	ldr	r3, [r3, #4]
   1424c:	add	r2, r3, #4
   14250:	ldr	r3, [fp, #-16]
   14254:	str	r2, [r3, #4]
   14258:	ldr	r3, [fp, #-16]
   1425c:	ldr	r3, [r3, #32]
   14260:	ldr	r3, [r3, #20]
   14264:	str	r3, [fp, #-8]
   14268:	ldr	r3, [fp, #-20]	; 0xffffffec
   1426c:	lsl	r3, r3, #1
   14270:	add	r3, r3, #1
   14274:	str	r3, [fp, #-12]
   14278:	mov	r3, #0
   1427c:	str	r3, [sp]
   14280:	ldr	r3, [fp, #-12]
   14284:	ldr	r2, [fp, #-8]
   14288:	mov	r1, #3
   1428c:	ldr	r0, [fp, #-16]
   14290:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   14294:	mov	r2, r0
   14298:	ldr	r3, [fp, #-16]
   1429c:	str	r2, [r3]
   142a0:	ldr	r3, [fp, #-16]
   142a4:	ldr	r3, [r3]
   142a8:	cmp	r3, #0
   142ac:	bne	142b8 <flatcc_builder_default_alloc@@Base+0x8b0>
   142b0:	mvn	r3, #0
   142b4:	b	142bc <flatcc_builder_default_alloc@@Base+0x8b4>
   142b8:	mov	r3, #0
   142bc:	mov	r0, r3
   142c0:	sub	sp, fp, #4
   142c4:	ldr	fp, [sp]
   142c8:	add	sp, sp, #4
   142cc:	pop	{pc}		; (ldr pc, [sp], #4)
   142d0:	str	r4, [sp, #-12]!
   142d4:	str	fp, [sp, #4]
   142d8:	str	lr, [sp, #8]
   142dc:	add	fp, sp, #8
   142e0:	sub	sp, sp, #36	; 0x24
   142e4:	str	r0, [fp, #-32]	; 0xffffffe0
   142e8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   142ec:	add	r3, r3, #52	; 0x34
   142f0:	add	r3, r3, #40	; 0x28
   142f4:	str	r3, [fp, #-24]	; 0xffffffe8
   142f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   142fc:	ldr	r3, [r3, #124]	; 0x7c
   14300:	cmp	r3, #0
   14304:	beq	14328 <flatcc_builder_default_alloc@@Base+0x920>
   14308:	ldr	r3, [pc, #292]	; 14434 <flatcc_builder_default_alloc@@Base+0xa2c>
   1430c:	add	r3, pc, r3
   14310:	movw	r2, #342	; 0x156
   14314:	ldr	r1, [pc, #284]	; 14438 <flatcc_builder_default_alloc@@Base+0xa30>
   14318:	add	r1, pc, r1
   1431c:	ldr	r0, [pc, #280]	; 1443c <flatcc_builder_default_alloc@@Base+0xa34>
   14320:	add	r0, pc, r0
   14324:	bl	1208c <__assert_fail@plt>
   14328:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1432c:	ldr	r2, [r3, #124]	; 0x7c
   14330:	mov	r3, #0
   14334:	str	r3, [sp]
   14338:	mov	r3, #16
   1433c:	mov	r1, #6
   14340:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14344:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   14348:	mov	r3, r0
   1434c:	cmp	r3, #0
   14350:	bne	1435c <flatcc_builder_default_alloc@@Base+0x954>
   14354:	mvn	r3, #0
   14358:	b	1441c <flatcc_builder_default_alloc@@Base+0xa14>
   1435c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14360:	mov	r2, #16
   14364:	str	r2, [r3, #124]	; 0x7c
   14368:	mov	r3, #256	; 0x100
   1436c:	str	r3, [fp, #-16]
   14370:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14374:	ldr	r4, [r3, #48]	; 0x30
   14378:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1437c:	ldr	r0, [r3, #40]	; 0x28
   14380:	mov	r3, #5
   14384:	str	r3, [sp]
   14388:	mov	r3, #1
   1438c:	ldr	r2, [fp, #-16]
   14390:	ldr	r1, [fp, #-24]	; 0xffffffe8
   14394:	blx	r4
   14398:	mov	r3, r0
   1439c:	cmp	r3, #0
   143a0:	beq	143b8 <flatcc_builder_default_alloc@@Base+0x9b0>
   143a4:	mvn	r3, #0
   143a8:	b	1441c <flatcc_builder_default_alloc@@Base+0xa14>
   143ac:	ldr	r3, [fp, #-16]
   143b0:	lsl	r3, r3, #1
   143b4:	str	r3, [fp, #-16]
   143b8:	ldr	r3, [fp, #-16]
   143bc:	lsl	r2, r3, #1
   143c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   143c4:	ldr	r3, [r3, #4]
   143c8:	cmp	r2, r3
   143cc:	bls	143ac <flatcc_builder_default_alloc@@Base+0x9a4>
   143d0:	ldr	r3, [fp, #-16]
   143d4:	lsr	r3, r3, #2
   143d8:	str	r3, [fp, #-16]
   143dc:	mov	r3, #0
   143e0:	str	r3, [fp, #-20]	; 0xffffffec
   143e4:	b	143f4 <flatcc_builder_default_alloc@@Base+0x9ec>
   143e8:	ldr	r3, [fp, #-20]	; 0xffffffec
   143ec:	add	r3, r3, #1
   143f0:	str	r3, [fp, #-20]	; 0xffffffec
   143f4:	mov	r2, #1
   143f8:	ldr	r3, [fp, #-20]	; 0xffffffec
   143fc:	lsl	r3, r2, r3
   14400:	ldr	r2, [fp, #-16]
   14404:	cmp	r2, r3
   14408:	bhi	143e8 <flatcc_builder_default_alloc@@Base+0x9e0>
   1440c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   14410:	ldr	r2, [fp, #-20]	; 0xffffffec
   14414:	str	r2, [r3, #116]	; 0x74
   14418:	mov	r3, #0
   1441c:	mov	r0, r3
   14420:	sub	sp, fp, #8
   14424:	ldr	r4, [sp]
   14428:	ldr	fp, [sp, #4]
   1442c:	add	sp, sp, #8
   14430:	pop	{pc}		; (ldr pc, [sp], #4)
   14434:	muleq	r0, r8, r2
   14438:	andeq	r6, r0, r4, ror #28
   1443c:	andeq	r6, r0, r0, asr #29
   14440:	str	fp, [sp, #-8]!
   14444:	str	lr, [sp, #4]
   14448:	add	fp, sp, #4
   1444c:	sub	sp, sp, #16
   14450:	str	r0, [fp, #-16]
   14454:	str	r1, [fp, #-20]	; 0xffffffec
   14458:	ldr	r3, [fp, #-16]
   1445c:	ldr	r3, [r3, #116]	; 0x74
   14460:	cmp	r3, #0
   14464:	bne	14484 <flatcc_builder_default_alloc@@Base+0xa7c>
   14468:	ldr	r0, [fp, #-16]
   1446c:	bl	142d0 <flatcc_builder_default_alloc@@Base+0x8c8>
   14470:	mov	r3, r0
   14474:	cmp	r3, #0
   14478:	beq	14484 <flatcc_builder_default_alloc@@Base+0xa7c>
   1447c:	mov	r3, #0
   14480:	b	144b0 <flatcc_builder_default_alloc@@Base+0xaa8>
   14484:	ldr	r3, [fp, #-16]
   14488:	ldr	r3, [r3, #92]	; 0x5c
   1448c:	str	r3, [fp, #-8]
   14490:	ldr	r3, [fp, #-16]
   14494:	ldr	r3, [r3, #116]	; 0x74
   14498:	rsb	r3, r3, #32
   1449c:	ldr	r2, [fp, #-20]	; 0xffffffec
   144a0:	lsr	r3, r2, r3
   144a4:	lsl	r3, r3, #2
   144a8:	ldr	r2, [fp, #-8]
   144ac:	add	r3, r2, r3
   144b0:	mov	r0, r3
   144b4:	sub	sp, fp, #4
   144b8:	ldr	fp, [sp]
   144bc:	add	sp, sp, #4
   144c0:	pop	{pc}		; (ldr pc, [sp], #4)

000144c4 <flatcc_builder_flush_vtable_cache@@Base>:
   144c4:	str	fp, [sp, #-8]!
   144c8:	str	lr, [sp, #4]
   144cc:	add	fp, sp, #4
   144d0:	sub	sp, sp, #16
   144d4:	str	r0, [fp, #-16]
   144d8:	ldr	r3, [fp, #-16]
   144dc:	add	r3, r3, #52	; 0x34
   144e0:	add	r3, r3, #40	; 0x28
   144e4:	str	r3, [fp, #-8]
   144e8:	ldr	r3, [fp, #-16]
   144ec:	ldr	r3, [r3, #116]	; 0x74
   144f0:	cmp	r3, #0
   144f4:	beq	14530 <flatcc_builder_flush_vtable_cache@@Base+0x6c>
   144f8:	ldr	r3, [fp, #-8]
   144fc:	ldr	r0, [r3]
   14500:	ldr	r3, [fp, #-8]
   14504:	ldr	r3, [r3, #4]
   14508:	mov	r2, r3
   1450c:	mov	r1, #0
   14510:	bl	12050 <memset@plt>
   14514:	ldr	r3, [fp, #-16]
   14518:	mov	r2, #16
   1451c:	str	r2, [r3, #124]	; 0x7c
   14520:	ldr	r3, [fp, #-16]
   14524:	mov	r2, #0
   14528:	str	r2, [r3, #120]	; 0x78
   1452c:	b	14534 <flatcc_builder_flush_vtable_cache@@Base+0x70>
   14530:	nop	{0}
   14534:	sub	sp, fp, #4
   14538:	ldr	fp, [sp]
   1453c:	add	sp, sp, #4
   14540:	pop	{pc}		; (ldr pc, [sp], #4)

00014544 <flatcc_builder_custom_init@@Base>:
   14544:	str	r4, [sp, #-12]!
   14548:	str	fp, [sp, #4]
   1454c:	str	lr, [sp, #8]
   14550:	add	fp, sp, #8
   14554:	sub	sp, sp, #20
   14558:	str	r0, [fp, #-16]
   1455c:	str	r1, [fp, #-20]	; 0xffffffec
   14560:	str	r2, [fp, #-24]	; 0xffffffe8
   14564:	str	r3, [fp, #-28]	; 0xffffffe4
   14568:	ldr	r4, [pc, #164]	; 14614 <flatcc_builder_custom_init@@Base+0xd0>
   1456c:	add	r4, pc, r4
   14570:	mov	r2, #232	; 0xe8
   14574:	mov	r1, #0
   14578:	ldr	r0, [fp, #-16]
   1457c:	bl	12050 <memset@plt>
   14580:	ldr	r3, [fp, #-20]	; 0xffffffec
   14584:	cmp	r3, #0
   14588:	bne	145b0 <flatcc_builder_custom_init@@Base+0x6c>
   1458c:	ldr	r3, [fp, #-16]
   14590:	mov	r2, #1
   14594:	str	r2, [r3, #184]	; 0xb8
   14598:	ldr	r3, [pc, #120]	; 14618 <flatcc_builder_custom_init@@Base+0xd4>
   1459c:	ldr	r3, [r4, r3]
   145a0:	str	r3, [fp, #-20]	; 0xffffffec
   145a4:	ldr	r3, [fp, #-16]
   145a8:	add	r3, r3, #188	; 0xbc
   145ac:	str	r3, [fp, #-24]	; 0xffffffe8
   145b0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   145b4:	cmp	r3, #0
   145b8:	bne	145c8 <flatcc_builder_custom_init@@Base+0x84>
   145bc:	ldr	r3, [pc, #88]	; 1461c <flatcc_builder_custom_init@@Base+0xd8>
   145c0:	ldr	r3, [r4, r3]
   145c4:	str	r3, [fp, #-28]	; 0xffffffe4
   145c8:	ldr	r3, [fp, #-16]
   145cc:	ldr	r2, [fp, #4]
   145d0:	str	r2, [r3, #40]	; 0x28
   145d4:	ldr	r3, [fp, #-16]
   145d8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   145dc:	str	r2, [r3, #48]	; 0x30
   145e0:	ldr	r3, [fp, #-16]
   145e4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   145e8:	str	r2, [r3, #36]	; 0x24
   145ec:	ldr	r3, [fp, #-16]
   145f0:	ldr	r2, [fp, #-20]	; 0xffffffec
   145f4:	str	r2, [r3, #44]	; 0x2c
   145f8:	mov	r3, #0
   145fc:	mov	r0, r3
   14600:	sub	sp, fp, #8
   14604:	ldr	r4, [sp]
   14608:	ldr	fp, [sp, #4]
   1460c:	add	sp, sp, #8
   14610:	pop	{pc}		; (ldr pc, [sp], #4)
   14614:	andeq	r7, r1, ip, lsl #21
   14618:	andeq	r0, r0, ip, rrx
   1461c:	andeq	r0, r0, r8, rrx

00014620 <flatcc_builder_init@@Base>:
   14620:	str	fp, [sp, #-8]!
   14624:	str	lr, [sp, #4]
   14628:	add	fp, sp, #4
   1462c:	sub	sp, sp, #16
   14630:	str	r0, [fp, #-8]
   14634:	mov	r3, #0
   14638:	str	r3, [sp]
   1463c:	mov	r3, #0
   14640:	mov	r2, #0
   14644:	mov	r1, #0
   14648:	ldr	r0, [fp, #-8]
   1464c:	bl	14544 <flatcc_builder_custom_init@@Base>
   14650:	mov	r3, r0
   14654:	mov	r0, r3
   14658:	sub	sp, fp, #4
   1465c:	ldr	fp, [sp]
   14660:	add	sp, sp, #4
   14664:	pop	{pc}		; (ldr pc, [sp], #4)

00014668 <flatcc_builder_custom_reset@@Base>:
   14668:	str	r4, [sp, #-12]!
   1466c:	str	fp, [sp, #4]
   14670:	str	lr, [sp, #8]
   14674:	add	fp, sp, #8
   14678:	sub	sp, sp, #36	; 0x24
   1467c:	str	r0, [fp, #-24]	; 0xffffffe8
   14680:	str	r1, [fp, #-28]	; 0xffffffe4
   14684:	str	r2, [fp, #-32]	; 0xffffffe0
   14688:	mov	r3, #0
   1468c:	str	r3, [fp, #-16]
   14690:	b	1476c <flatcc_builder_custom_reset@@Base+0x104>
   14694:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14698:	add	r2, r3, #52	; 0x34
   1469c:	ldr	r3, [fp, #-16]
   146a0:	lsl	r3, r3, #3
   146a4:	add	r3, r2, r3
   146a8:	str	r3, [fp, #-20]	; 0xffffffec
   146ac:	ldr	r3, [fp, #-20]	; 0xffffffec
   146b0:	ldr	r3, [r3]
   146b4:	cmp	r3, #0
   146b8:	beq	14730 <flatcc_builder_custom_reset@@Base+0xc8>
   146bc:	ldr	r3, [fp, #-16]
   146c0:	cmp	r3, #5
   146c4:	beq	14710 <flatcc_builder_custom_reset@@Base+0xa8>
   146c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   146cc:	cmp	r3, #0
   146d0:	beq	14710 <flatcc_builder_custom_reset@@Base+0xa8>
   146d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146d8:	ldr	r4, [r3, #48]	; 0x30
   146dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   146e0:	ldr	r0, [r3, #40]	; 0x28
   146e4:	ldr	r3, [fp, #-16]
   146e8:	str	r3, [sp]
   146ec:	mov	r3, #1
   146f0:	mov	r2, #1
   146f4:	ldr	r1, [fp, #-20]	; 0xffffffec
   146f8:	blx	r4
   146fc:	mov	r3, r0
   14700:	cmp	r3, #0
   14704:	beq	14710 <flatcc_builder_custom_reset@@Base+0xa8>
   14708:	mvn	r3, #0
   1470c:	b	1489c <flatcc_builder_custom_reset@@Base+0x234>
   14710:	ldr	r3, [fp, #-20]	; 0xffffffec
   14714:	ldr	r0, [r3]
   14718:	ldr	r3, [fp, #-20]	; 0xffffffec
   1471c:	ldr	r3, [r3, #4]
   14720:	mov	r2, r3
   14724:	mov	r1, #0
   14728:	bl	12050 <memset@plt>
   1472c:	b	14760 <flatcc_builder_custom_reset@@Base+0xf8>
   14730:	ldr	r3, [fp, #-20]	; 0xffffffec
   14734:	ldr	r3, [r3, #4]
   14738:	cmp	r3, #0
   1473c:	beq	14760 <flatcc_builder_custom_reset@@Base+0xf8>
   14740:	ldr	r3, [pc, #364]	; 148b4 <flatcc_builder_custom_reset@@Base+0x24c>
   14744:	add	r3, pc, r3
   14748:	movw	r2, #434	; 0x1b2
   1474c:	ldr	r1, [pc, #356]	; 148b8 <flatcc_builder_custom_reset@@Base+0x250>
   14750:	add	r1, pc, r1
   14754:	ldr	r0, [pc, #352]	; 148bc <flatcc_builder_custom_reset@@Base+0x254>
   14758:	add	r0, pc, r0
   1475c:	bl	1208c <__assert_fail@plt>
   14760:	ldr	r3, [fp, #-16]
   14764:	add	r3, r3, #1
   14768:	str	r3, [fp, #-16]
   1476c:	ldr	r3, [fp, #-16]
   14770:	cmp	r3, #7
   14774:	ble	14694 <flatcc_builder_custom_reset@@Base+0x2c>
   14778:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1477c:	mov	r2, #0
   14780:	str	r2, [r3, #120]	; 0x78
   14784:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14788:	ldr	r3, [r3, #124]	; 0x7c
   1478c:	cmp	r3, #0
   14790:	beq	147a0 <flatcc_builder_custom_reset@@Base+0x138>
   14794:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14798:	mov	r2, #16
   1479c:	str	r2, [r3, #124]	; 0x7c
   147a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147a4:	mov	r2, #0
   147a8:	strh	r2, [r3, #128]	; 0x80
   147ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147b0:	mov	r2, #0
   147b4:	str	r2, [r3, #136]	; 0x88
   147b8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147bc:	mov	r2, #0
   147c0:	str	r2, [r3, #140]	; 0x8c
   147c4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147c8:	mov	r2, #0
   147cc:	str	r2, [r3, #156]	; 0x9c
   147d0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147d4:	mov	r2, #0
   147d8:	str	r2, [r3, #160]	; 0xa0
   147dc:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147e0:	mov	r2, #0
   147e4:	str	r2, [r3, #20]
   147e8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147ec:	mov	r2, #0
   147f0:	str	r2, [r3, #24]
   147f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   147f8:	mov	r2, #0
   147fc:	str	r2, [r3, #148]	; 0x94
   14800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14804:	mov	r2, #0
   14808:	str	r2, [r3, #152]	; 0x98
   1480c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14810:	ldr	r2, [r3, #60]	; 0x3c
   14814:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14818:	str	r2, [r3, #16]
   1481c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14820:	ldr	r2, [r3, #76]	; 0x4c
   14824:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14828:	str	r2, [r3]
   1482c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14830:	ldr	r2, [r3, #52]	; 0x34
   14834:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14838:	str	r2, [r3, #4]
   1483c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14840:	mov	r2, #0
   14844:	str	r2, [r3, #32]
   14848:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1484c:	cmp	r3, #0
   14850:	beq	14878 <flatcc_builder_custom_reset@@Base+0x210>
   14854:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14858:	mov	r2, #0
   1485c:	str	r2, [r3, #172]	; 0xac
   14860:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14864:	mov	r2, #0
   14868:	str	r2, [r3, #176]	; 0xb0
   1486c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14870:	mov	r2, #0
   14874:	str	r2, [r3, #180]	; 0xb4
   14878:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1487c:	ldr	r3, [r3, #184]	; 0xb8
   14880:	cmp	r3, #0
   14884:	beq	14898 <flatcc_builder_custom_reset@@Base+0x230>
   14888:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1488c:	add	r3, r3, #188	; 0xbc
   14890:	mov	r0, r3
   14894:	bl	1a4fc <flatcc_emitter_reset@@Base>
   14898:	mov	r3, #0
   1489c:	mov	r0, r3
   148a0:	sub	sp, fp, #8
   148a4:	ldr	r4, [sp]
   148a8:	ldr	fp, [sp, #4]
   148ac:	add	sp, sp, #8
   148b0:	pop	{pc}		; (ldr pc, [sp], #4)
   148b4:	andeq	r6, r0, ip, ror lr
   148b8:	andeq	r6, r0, ip, lsr #20
   148bc:	muleq	r0, r8, sl

000148c0 <flatcc_builder_reset@@Base>:
   148c0:	str	fp, [sp, #-8]!
   148c4:	str	lr, [sp, #4]
   148c8:	add	fp, sp, #4
   148cc:	sub	sp, sp, #8
   148d0:	str	r0, [fp, #-8]
   148d4:	mov	r2, #0
   148d8:	mov	r1, #0
   148dc:	ldr	r0, [fp, #-8]
   148e0:	bl	14668 <flatcc_builder_custom_reset@@Base>
   148e4:	mov	r3, r0
   148e8:	mov	r0, r3
   148ec:	sub	sp, fp, #4
   148f0:	ldr	fp, [sp]
   148f4:	add	sp, sp, #4
   148f8:	pop	{pc}		; (ldr pc, [sp], #4)

000148fc <flatcc_builder_clear@@Base>:
   148fc:	str	r4, [sp, #-12]!
   14900:	str	fp, [sp, #4]
   14904:	str	lr, [sp, #8]
   14908:	add	fp, sp, #8
   1490c:	sub	sp, sp, #28
   14910:	str	r0, [fp, #-24]	; 0xffffffe8
   14914:	mov	r3, #0
   14918:	str	r3, [fp, #-16]
   1491c:	b	1496c <flatcc_builder_clear@@Base+0x70>
   14920:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14924:	add	r2, r3, #52	; 0x34
   14928:	ldr	r3, [fp, #-16]
   1492c:	lsl	r3, r3, #3
   14930:	add	r3, r2, r3
   14934:	str	r3, [fp, #-20]	; 0xffffffec
   14938:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1493c:	ldr	r4, [r3, #48]	; 0x30
   14940:	ldr	r3, [fp, #-24]	; 0xffffffe8
   14944:	ldr	r0, [r3, #40]	; 0x28
   14948:	ldr	r3, [fp, #-16]
   1494c:	str	r3, [sp]
   14950:	mov	r3, #0
   14954:	mov	r2, #0
   14958:	ldr	r1, [fp, #-20]	; 0xffffffec
   1495c:	blx	r4
   14960:	ldr	r3, [fp, #-16]
   14964:	add	r3, r3, #1
   14968:	str	r3, [fp, #-16]
   1496c:	ldr	r3, [fp, #-16]
   14970:	cmp	r3, #7
   14974:	ble	14920 <flatcc_builder_clear@@Base+0x24>
   14978:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1497c:	ldr	r3, [r3, #184]	; 0xb8
   14980:	cmp	r3, #0
   14984:	beq	14998 <flatcc_builder_clear@@Base+0x9c>
   14988:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1498c:	add	r3, r3, #188	; 0xbc
   14990:	mov	r0, r3
   14994:	bl	1a698 <flatcc_emitter_clear@@Base>
   14998:	mov	r2, #232	; 0xe8
   1499c:	mov	r1, #0
   149a0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   149a4:	bl	12050 <memset@plt>
   149a8:	nop	{0}
   149ac:	sub	sp, fp, #8
   149b0:	ldr	r4, [sp]
   149b4:	ldr	fp, [sp, #4]
   149b8:	add	sp, sp, #8
   149bc:	pop	{pc}		; (ldr pc, [sp], #4)
   149c0:	push	{fp}		; (str fp, [sp, #-4]!)
   149c4:	add	fp, sp, #0
   149c8:	sub	sp, sp, #12
   149cc:	str	r0, [fp, #-8]
   149d0:	mov	r3, r1
   149d4:	strh	r3, [fp, #-10]
   149d8:	ldr	r3, [fp, #-8]
   149dc:	ldrh	r3, [r3, #128]	; 0x80
   149e0:	ldrh	r2, [fp, #-10]
   149e4:	cmp	r2, r3
   149e8:	bls	149f8 <flatcc_builder_clear@@Base+0xfc>
   149ec:	ldr	r3, [fp, #-8]
   149f0:	ldrh	r2, [fp, #-10]
   149f4:	strh	r2, [r3, #128]	; 0x80
   149f8:	nop	{0}
   149fc:	add	sp, fp, #0
   14a00:	pop	{fp}		; (ldr fp, [sp], #4)
   14a04:	bx	lr
   14a08:	push	{fp}		; (str fp, [sp, #-4]!)
   14a0c:	add	fp, sp, #0
   14a10:	sub	sp, sp, #12
   14a14:	str	r0, [fp, #-8]
   14a18:	mov	r3, r1
   14a1c:	strh	r3, [fp, #-10]
   14a20:	ldr	r3, [fp, #-8]
   14a24:	ldrh	r3, [r3]
   14a28:	ldrh	r2, [fp, #-10]
   14a2c:	cmp	r2, r3
   14a30:	bls	14a40 <flatcc_builder_clear@@Base+0x144>
   14a34:	ldr	r3, [fp, #-8]
   14a38:	ldrh	r2, [fp, #-10]
   14a3c:	strh	r2, [r3]
   14a40:	nop	{0}
   14a44:	add	sp, fp, #0
   14a48:	pop	{fp}		; (ldr fp, [sp], #4)
   14a4c:	bx	lr

00014a50 <flatcc_builder_enter_user_frame_ptr@@Base>:
   14a50:	str	fp, [sp, #-8]!
   14a54:	str	lr, [sp, #4]
   14a58:	add	fp, sp, #4
   14a5c:	sub	sp, sp, #24
   14a60:	str	r0, [fp, #-16]
   14a64:	str	r1, [fp, #-20]	; 0xffffffec
   14a68:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a6c:	add	r3, r3, #3
   14a70:	bic	r3, r3, #3
   14a74:	add	r3, r3, #4
   14a78:	str	r3, [fp, #-20]	; 0xffffffec
   14a7c:	ldr	r3, [fp, #-16]
   14a80:	ldr	r2, [r3, #228]	; 0xe4
   14a84:	mov	r3, #0
   14a88:	str	r3, [sp]
   14a8c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14a90:	mov	r1, #7
   14a94:	ldr	r0, [fp, #-16]
   14a98:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   14a9c:	str	r0, [fp, #-8]
   14aa0:	ldr	r3, [fp, #-8]
   14aa4:	cmp	r3, #0
   14aa8:	bne	14ab4 <flatcc_builder_enter_user_frame_ptr@@Base+0x64>
   14aac:	mov	r3, #0
   14ab0:	b	14b0c <flatcc_builder_enter_user_frame_ptr@@Base+0xbc>
   14ab4:	ldr	r2, [fp, #-20]	; 0xffffffec
   14ab8:	mov	r1, #0
   14abc:	ldr	r0, [fp, #-8]
   14ac0:	bl	12050 <memset@plt>
   14ac4:	ldr	r3, [fp, #-8]
   14ac8:	add	r2, r3, #4
   14acc:	str	r2, [fp, #-8]
   14ad0:	ldr	r2, [fp, #-16]
   14ad4:	ldr	r2, [r2, #224]	; 0xe0
   14ad8:	str	r2, [r3]
   14adc:	ldr	r3, [fp, #-16]
   14ae0:	ldr	r3, [r3, #228]	; 0xe4
   14ae4:	add	r2, r3, #4
   14ae8:	ldr	r3, [fp, #-16]
   14aec:	str	r2, [r3, #224]	; 0xe0
   14af0:	ldr	r3, [fp, #-16]
   14af4:	ldr	r2, [r3, #228]	; 0xe4
   14af8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14afc:	add	r2, r2, r3
   14b00:	ldr	r3, [fp, #-16]
   14b04:	str	r2, [r3, #228]	; 0xe4
   14b08:	ldr	r3, [fp, #-8]
   14b0c:	mov	r0, r3
   14b10:	sub	sp, fp, #4
   14b14:	ldr	fp, [sp]
   14b18:	add	sp, sp, #4
   14b1c:	pop	{pc}		; (ldr pc, [sp], #4)

00014b20 <flatcc_builder_enter_user_frame@@Base>:
   14b20:	str	fp, [sp, #-8]!
   14b24:	str	lr, [sp, #4]
   14b28:	add	fp, sp, #4
   14b2c:	sub	sp, sp, #24
   14b30:	str	r0, [fp, #-16]
   14b34:	str	r1, [fp, #-20]	; 0xffffffec
   14b38:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b3c:	add	r3, r3, #3
   14b40:	bic	r3, r3, #3
   14b44:	add	r3, r3, #4
   14b48:	str	r3, [fp, #-20]	; 0xffffffec
   14b4c:	ldr	r3, [fp, #-16]
   14b50:	ldr	r2, [r3, #228]	; 0xe4
   14b54:	mov	r3, #0
   14b58:	str	r3, [sp]
   14b5c:	ldr	r3, [fp, #-20]	; 0xffffffec
   14b60:	mov	r1, #7
   14b64:	ldr	r0, [fp, #-16]
   14b68:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   14b6c:	str	r0, [fp, #-8]
   14b70:	ldr	r3, [fp, #-8]
   14b74:	cmp	r3, #0
   14b78:	bne	14b84 <flatcc_builder_enter_user_frame@@Base+0x64>
   14b7c:	mov	r3, #0
   14b80:	b	14be0 <flatcc_builder_enter_user_frame@@Base+0xc0>
   14b84:	ldr	r2, [fp, #-20]	; 0xffffffec
   14b88:	mov	r1, #0
   14b8c:	ldr	r0, [fp, #-8]
   14b90:	bl	12050 <memset@plt>
   14b94:	ldr	r3, [fp, #-8]
   14b98:	add	r2, r3, #4
   14b9c:	str	r2, [fp, #-8]
   14ba0:	ldr	r2, [fp, #-16]
   14ba4:	ldr	r2, [r2, #224]	; 0xe0
   14ba8:	str	r2, [r3]
   14bac:	ldr	r3, [fp, #-16]
   14bb0:	ldr	r3, [r3, #228]	; 0xe4
   14bb4:	add	r2, r3, #4
   14bb8:	ldr	r3, [fp, #-16]
   14bbc:	str	r2, [r3, #224]	; 0xe0
   14bc0:	ldr	r3, [fp, #-16]
   14bc4:	ldr	r2, [r3, #228]	; 0xe4
   14bc8:	ldr	r3, [fp, #-20]	; 0xffffffec
   14bcc:	add	r2, r2, r3
   14bd0:	ldr	r3, [fp, #-16]
   14bd4:	str	r2, [r3, #228]	; 0xe4
   14bd8:	ldr	r3, [fp, #-16]
   14bdc:	ldr	r3, [r3, #224]	; 0xe0
   14be0:	mov	r0, r3
   14be4:	sub	sp, fp, #4
   14be8:	ldr	fp, [sp]
   14bec:	add	sp, sp, #4
   14bf0:	pop	{pc}		; (ldr pc, [sp], #4)

00014bf4 <flatcc_builder_exit_user_frame@@Base>:
   14bf4:	str	fp, [sp, #-8]!
   14bf8:	str	lr, [sp, #4]
   14bfc:	add	fp, sp, #4
   14c00:	sub	sp, sp, #16
   14c04:	str	r0, [fp, #-16]
   14c08:	ldr	r3, [fp, #-16]
   14c0c:	ldr	r3, [r3, #224]	; 0xe0
   14c10:	cmp	r3, #0
   14c14:	bne	14c38 <flatcc_builder_exit_user_frame@@Base+0x44>
   14c18:	ldr	r3, [pc, #112]	; 14c90 <flatcc_builder_exit_user_frame@@Base+0x9c>
   14c1c:	add	r3, pc, r3
   14c20:	movw	r2, #542	; 0x21e
   14c24:	ldr	r1, [pc, #104]	; 14c94 <flatcc_builder_exit_user_frame@@Base+0xa0>
   14c28:	add	r1, pc, r1
   14c2c:	ldr	r0, [pc, #100]	; 14c98 <flatcc_builder_exit_user_frame@@Base+0xa4>
   14c30:	add	r0, pc, r0
   14c34:	bl	1208c <__assert_fail@plt>
   14c38:	ldr	r3, [fp, #-16]
   14c3c:	ldr	r2, [r3, #108]	; 0x6c
   14c40:	ldr	r3, [fp, #-16]
   14c44:	ldr	r3, [r3, #224]	; 0xe0
   14c48:	add	r3, r2, r3
   14c4c:	str	r3, [fp, #-8]
   14c50:	ldr	r3, [fp, #-16]
   14c54:	ldr	r3, [r3, #224]	; 0xe0
   14c58:	sub	r2, r3, #4
   14c5c:	ldr	r3, [fp, #-16]
   14c60:	str	r2, [r3, #228]	; 0xe4
   14c64:	ldr	r3, [fp, #-8]
   14c68:	ldr	r2, [r3, #-4]
   14c6c:	ldr	r3, [fp, #-16]
   14c70:	str	r2, [r3, #224]	; 0xe0
   14c74:	ldr	r3, [fp, #-16]
   14c78:	ldr	r3, [r3, #224]	; 0xe0
   14c7c:	mov	r0, r3
   14c80:	sub	sp, fp, #4
   14c84:	ldr	fp, [sp]
   14c88:	add	sp, sp, #4
   14c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c90:	andeq	r6, r0, r0, asr #19
   14c94:	andeq	r6, r0, r4, asr r5
   14c98:	ldrdeq	r6, [r0], -r4

00014c9c <flatcc_builder_exit_user_frame_at@@Base>:
   14c9c:	str	fp, [sp, #-8]!
   14ca0:	str	lr, [sp, #4]
   14ca4:	add	fp, sp, #4
   14ca8:	sub	sp, sp, #8
   14cac:	str	r0, [fp, #-8]
   14cb0:	str	r1, [fp, #-12]
   14cb4:	ldr	r3, [fp, #-8]
   14cb8:	ldr	r3, [r3, #224]	; 0xe0
   14cbc:	ldr	r2, [fp, #-12]
   14cc0:	cmp	r2, r3
   14cc4:	bls	14ce8 <flatcc_builder_exit_user_frame_at@@Base+0x4c>
   14cc8:	ldr	r3, [pc, #68]	; 14d14 <flatcc_builder_exit_user_frame_at@@Base+0x78>
   14ccc:	add	r3, pc, r3
   14cd0:	movw	r2, #551	; 0x227
   14cd4:	ldr	r1, [pc, #60]	; 14d18 <flatcc_builder_exit_user_frame_at@@Base+0x7c>
   14cd8:	add	r1, pc, r1
   14cdc:	ldr	r0, [pc, #56]	; 14d1c <flatcc_builder_exit_user_frame_at@@Base+0x80>
   14ce0:	add	r0, pc, r0
   14ce4:	bl	1208c <__assert_fail@plt>
   14ce8:	ldr	r3, [fp, #-8]
   14cec:	ldr	r2, [fp, #-12]
   14cf0:	str	r2, [r3, #224]	; 0xe0
   14cf4:	ldr	r0, [fp, #-8]
   14cf8:	bl	14bf4 <flatcc_builder_exit_user_frame@@Base>
   14cfc:	mov	r3, r0
   14d00:	mov	r0, r3
   14d04:	sub	sp, fp, #4
   14d08:	ldr	fp, [sp]
   14d0c:	add	sp, sp, #4
   14d10:	pop	{pc}		; (ldr pc, [sp], #4)
   14d14:	andeq	r6, r0, r0, lsr r9
   14d18:	andeq	r6, r0, r4, lsr #9
   14d1c:	andeq	r6, r0, r0, asr #10

00014d20 <flatcc_builder_get_current_user_frame@@Base>:
   14d20:	push	{fp}		; (str fp, [sp, #-4]!)
   14d24:	add	fp, sp, #0
   14d28:	sub	sp, sp, #12
   14d2c:	str	r0, [fp, #-8]
   14d30:	ldr	r3, [fp, #-8]
   14d34:	ldr	r3, [r3, #224]	; 0xe0
   14d38:	mov	r0, r3
   14d3c:	add	sp, fp, #0
   14d40:	pop	{fp}		; (ldr fp, [sp], #4)
   14d44:	bx	lr

00014d48 <flatcc_builder_get_user_frame_ptr@@Base>:
   14d48:	push	{fp}		; (str fp, [sp, #-4]!)
   14d4c:	add	fp, sp, #0
   14d50:	sub	sp, sp, #12
   14d54:	str	r0, [fp, #-8]
   14d58:	str	r1, [fp, #-12]
   14d5c:	ldr	r3, [fp, #-8]
   14d60:	ldr	r2, [r3, #108]	; 0x6c
   14d64:	ldr	r3, [fp, #-12]
   14d68:	add	r3, r2, r3
   14d6c:	mov	r0, r3
   14d70:	add	sp, fp, #0
   14d74:	pop	{fp}		; (ldr fp, [sp], #4)
   14d78:	bx	lr
   14d7c:	str	fp, [sp, #-8]!
   14d80:	str	lr, [sp, #4]
   14d84:	add	fp, sp, #4
   14d88:	sub	sp, sp, #16
   14d8c:	str	r0, [fp, #-8]
   14d90:	mov	r3, r1
   14d94:	strh	r3, [fp, #-10]
   14d98:	ldr	r3, [fp, #-8]
   14d9c:	ldr	r3, [r3, #156]	; 0x9c
   14da0:	add	r2, r3, #1
   14da4:	ldr	r3, [fp, #-8]
   14da8:	str	r2, [r3, #156]	; 0x9c
   14dac:	ldr	r3, [fp, #-8]
   14db0:	ldr	r2, [r3, #156]	; 0x9c
   14db4:	ldr	r3, [fp, #-8]
   14db8:	ldr	r3, [r3, #160]	; 0xa0
   14dbc:	cmp	r2, r3
   14dc0:	ble	14eb4 <flatcc_builder_get_user_frame_ptr@@Base+0x16c>
   14dc4:	ldr	r3, [fp, #-8]
   14dc8:	ldr	r3, [r3, #176]	; 0xb0
   14dcc:	cmp	r3, #0
   14dd0:	ble	14df4 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   14dd4:	ldr	r3, [fp, #-8]
   14dd8:	ldr	r2, [r3, #156]	; 0x9c
   14ddc:	ldr	r3, [fp, #-8]
   14de0:	ldr	r3, [r3, #176]	; 0xb0
   14de4:	cmp	r2, r3
   14de8:	ble	14df4 <flatcc_builder_get_user_frame_ptr@@Base+0xac>
   14dec:	mvn	r3, #0
   14df0:	b	14f54 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   14df4:	ldr	r3, [fp, #-8]
   14df8:	ldr	r3, [r3, #156]	; 0x9c
   14dfc:	sub	r3, r3, #1
   14e00:	mov	r2, r3
   14e04:	mov	r3, r2
   14e08:	lsl	r3, r3, #3
   14e0c:	add	r3, r3, r2
   14e10:	lsl	r3, r3, #2
   14e14:	mov	r2, r3
   14e18:	mov	r3, #0
   14e1c:	str	r3, [sp]
   14e20:	mov	r3, #36	; 0x24
   14e24:	mov	r1, #4
   14e28:	ldr	r0, [fp, #-8]
   14e2c:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   14e30:	mov	r2, r0
   14e34:	ldr	r3, [fp, #-8]
   14e38:	str	r2, [r3, #32]
   14e3c:	ldr	r3, [fp, #-8]
   14e40:	ldr	r3, [r3, #32]
   14e44:	cmp	r3, #0
   14e48:	bne	14e54 <flatcc_builder_get_user_frame_ptr@@Base+0x10c>
   14e4c:	mvn	r3, #0
   14e50:	b	14f54 <flatcc_builder_get_user_frame_ptr@@Base+0x20c>
   14e54:	ldr	r3, [fp, #-8]
   14e58:	ldr	r2, [r3, #88]	; 0x58
   14e5c:	movw	r3, #36409	; 0x8e39
   14e60:	movt	r3, #14563	; 0x38e3
   14e64:	umull	r2, r3, r3, r2
   14e68:	lsr	r3, r3, #3
   14e6c:	mov	r2, r3
   14e70:	ldr	r3, [fp, #-8]
   14e74:	str	r2, [r3, #160]	; 0xa0
   14e78:	ldr	r3, [fp, #-8]
   14e7c:	ldr	r3, [r3, #176]	; 0xb0
   14e80:	cmp	r3, #0
   14e84:	ble	14ec8 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   14e88:	ldr	r3, [fp, #-8]
   14e8c:	ldr	r2, [r3, #176]	; 0xb0
   14e90:	ldr	r3, [fp, #-8]
   14e94:	ldr	r3, [r3, #160]	; 0xa0
   14e98:	cmp	r2, r3
   14e9c:	bge	14ec8 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   14ea0:	ldr	r3, [fp, #-8]
   14ea4:	ldr	r2, [r3, #176]	; 0xb0
   14ea8:	ldr	r3, [fp, #-8]
   14eac:	str	r2, [r3, #160]	; 0xa0
   14eb0:	b	14ec8 <flatcc_builder_get_user_frame_ptr@@Base+0x180>
   14eb4:	ldr	r3, [fp, #-8]
   14eb8:	ldr	r3, [r3, #32]
   14ebc:	add	r2, r3, #36	; 0x24
   14ec0:	ldr	r3, [fp, #-8]
   14ec4:	str	r2, [r3, #32]
   14ec8:	ldr	r3, [fp, #-8]
   14ecc:	ldr	r3, [r3, #32]
   14ed0:	ldr	r2, [fp, #-8]
   14ed4:	ldr	r2, [r2, #20]
   14ed8:	str	r2, [r3, #8]
   14edc:	ldr	r3, [fp, #-8]
   14ee0:	ldr	r3, [r3, #32]
   14ee4:	ldr	r2, [fp, #-8]
   14ee8:	ldrh	r2, [r2, #130]	; 0x82
   14eec:	strh	r2, [r3, #12]
   14ef0:	ldr	r3, [fp, #-8]
   14ef4:	ldrh	r2, [fp, #-10]
   14ef8:	strh	r2, [r3, #130]	; 0x82
   14efc:	ldr	r3, [fp, #-8]
   14f00:	ldr	r3, [r3, #32]
   14f04:	ldr	r2, [fp, #-8]
   14f08:	ldr	r2, [r2, #28]
   14f0c:	str	r2, [r3]
   14f10:	ldr	r3, [fp, #-8]
   14f14:	ldr	r3, [r3, #32]
   14f18:	mvn	r2, #3
   14f1c:	str	r2, [r3, #4]
   14f20:	ldr	r3, [fp, #-8]
   14f24:	ldr	r2, [r3, #28]
   14f28:	ldr	r3, [fp, #-8]
   14f2c:	ldr	r3, [r3, #20]
   14f30:	add	r3, r2, r3
   14f34:	add	r3, r3, #7
   14f38:	bic	r2, r3, #7
   14f3c:	ldr	r3, [fp, #-8]
   14f40:	str	r2, [r3, #28]
   14f44:	ldr	r3, [fp, #-8]
   14f48:	mov	r2, #0
   14f4c:	str	r2, [r3, #20]
   14f50:	mov	r3, #0
   14f54:	mov	r0, r3
   14f58:	sub	sp, fp, #4
   14f5c:	ldr	fp, [sp]
   14f60:	add	sp, sp, #4
   14f64:	pop	{pc}		; (ldr pc, [sp], #4)
   14f68:	str	fp, [sp, #-8]!
   14f6c:	str	lr, [sp, #4]
   14f70:	add	fp, sp, #4
   14f74:	sub	sp, sp, #8
   14f78:	str	r0, [fp, #-8]
   14f7c:	ldr	r3, [fp, #-8]
   14f80:	ldr	r0, [r3, #16]
   14f84:	ldr	r3, [fp, #-8]
   14f88:	ldr	r3, [r3, #20]
   14f8c:	mov	r2, r3
   14f90:	mov	r1, #0
   14f94:	bl	12050 <memset@plt>
   14f98:	ldr	r3, [fp, #-8]
   14f9c:	ldr	r3, [r3, #32]
   14fa0:	ldr	r2, [r3, #8]
   14fa4:	ldr	r3, [fp, #-8]
   14fa8:	str	r2, [r3, #20]
   14fac:	ldr	r3, [fp, #-8]
   14fb0:	ldr	r3, [r3, #32]
   14fb4:	ldr	r2, [r3]
   14fb8:	ldr	r3, [fp, #-8]
   14fbc:	str	r2, [r3, #28]
   14fc0:	ldr	r3, [fp, #-8]
   14fc4:	ldr	r3, [r3, #32]
   14fc8:	ldr	r3, [r3, #4]
   14fcc:	mov	r1, r3
   14fd0:	ldr	r0, [fp, #-8]
   14fd4:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   14fd8:	ldr	r3, [fp, #-8]
   14fdc:	ldrh	r3, [r3, #130]	; 0x82
   14fe0:	mov	r1, r3
   14fe4:	ldr	r0, [fp, #-8]
   14fe8:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   14fec:	ldr	r3, [fp, #-8]
   14ff0:	ldr	r3, [r3, #32]
   14ff4:	ldrh	r2, [r3, #12]
   14ff8:	ldr	r3, [fp, #-8]
   14ffc:	strh	r2, [r3, #130]	; 0x82
   15000:	ldr	r3, [fp, #-8]
   15004:	ldr	r3, [r3, #32]
   15008:	sub	r2, r3, #36	; 0x24
   1500c:	ldr	r3, [fp, #-8]
   15010:	str	r2, [r3, #32]
   15014:	ldr	r3, [fp, #-8]
   15018:	ldr	r3, [r3, #156]	; 0x9c
   1501c:	sub	r2, r3, #1
   15020:	ldr	r3, [fp, #-8]
   15024:	str	r2, [r3, #156]	; 0x9c
   15028:	nop	{0}
   1502c:	sub	sp, fp, #4
   15030:	ldr	fp, [sp]
   15034:	add	sp, sp, #4
   15038:	pop	{pc}		; (ldr pc, [sp], #4)
   1503c:	push	{fp}		; (str fp, [sp, #-4]!)
   15040:	add	fp, sp, #0
   15044:	sub	sp, sp, #20
   15048:	str	r0, [fp, #-8]
   1504c:	str	r1, [fp, #-12]
   15050:	mov	r3, r2
   15054:	strh	r3, [fp, #-14]
   15058:	ldr	r3, [fp, #-8]
   1505c:	ldr	r3, [r3, #136]	; 0x88
   15060:	mov	r2, r3
   15064:	ldr	r3, [fp, #-12]
   15068:	sub	r3, r2, r3
   1506c:	ldrh	r2, [fp, #-14]
   15070:	sub	r2, r2, #1
   15074:	and	r3, r3, r2
   15078:	mov	r0, r3
   1507c:	add	sp, fp, #0
   15080:	pop	{fp}		; (ldr fp, [sp], #4)
   15084:	bx	lr
   15088:	push	{fp}		; (str fp, [sp, #-4]!)
   1508c:	add	fp, sp, #0
   15090:	sub	sp, sp, #12
   15094:	str	r0, [fp, #-8]
   15098:	mov	r3, r1
   1509c:	strh	r3, [fp, #-10]
   150a0:	ldr	r3, [fp, #-8]
   150a4:	ldr	r2, [r3, #140]	; 0x8c
   150a8:	ldrh	r3, [fp, #-10]
   150ac:	sub	r3, r3, #1
   150b0:	and	r3, r3, r2
   150b4:	mov	r0, r3
   150b8:	add	sp, fp, #0
   150bc:	pop	{fp}		; (ldr fp, [sp], #4)
   150c0:	bx	lr
   150c4:	str	r4, [sp, #-12]!
   150c8:	str	fp, [sp, #4]
   150cc:	str	lr, [sp, #8]
   150d0:	add	fp, sp, #8
   150d4:	sub	sp, sp, #28
   150d8:	str	r0, [fp, #-24]	; 0xffffffe8
   150dc:	str	r1, [fp, #-28]	; 0xffffffe4
   150e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   150e4:	ldr	r3, [r3, #136]	; 0x88
   150e8:	ldr	r2, [fp, #-28]	; 0xffffffe4
   150ec:	ldr	r2, [r2]
   150f0:	sub	r3, r3, r2
   150f4:	str	r3, [fp, #-16]
   150f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   150fc:	ldr	r3, [r3, #136]	; 0x88
   15100:	ldr	r2, [fp, #-16]
   15104:	cmp	r2, r3
   15108:	blt	1512c <flatcc_builder_get_user_frame_ptr@@Base+0x3e4>
   1510c:	ldr	r3, [pc, #164]	; 151b8 <flatcc_builder_get_user_frame_ptr@@Base+0x470>
   15110:	add	r3, pc, r3
   15114:	movw	r2, #647	; 0x287
   15118:	ldr	r1, [pc, #156]	; 151bc <flatcc_builder_get_user_frame_ptr@@Base+0x474>
   1511c:	add	r1, pc, r1
   15120:	ldr	r0, [pc, #152]	; 151c0 <flatcc_builder_get_user_frame_ptr@@Base+0x478>
   15124:	add	r0, pc, r0
   15128:	bl	1208c <__assert_fail@plt>
   1512c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15130:	ldr	r4, [r3, #44]	; 0x2c
   15134:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15138:	ldr	r0, [r3, #36]	; 0x24
   1513c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15140:	add	r1, r3, #8
   15144:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15148:	ldr	r2, [r3, #4]
   1514c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15150:	ldr	r3, [r3]
   15154:	str	r3, [sp]
   15158:	ldr	r3, [fp, #-16]
   1515c:	blx	r4
   15160:	mov	r3, r0
   15164:	cmp	r3, #0
   15168:	beq	1518c <flatcc_builder_get_user_frame_ptr@@Base+0x444>
   1516c:	ldr	r3, [pc, #80]	; 151c4 <flatcc_builder_get_user_frame_ptr@@Base+0x47c>
   15170:	add	r3, pc, r3
   15174:	movw	r2, #651	; 0x28b
   15178:	ldr	r1, [pc, #72]	; 151c8 <flatcc_builder_get_user_frame_ptr@@Base+0x480>
   1517c:	add	r1, pc, r1
   15180:	ldr	r0, [pc, #68]	; 151cc <flatcc_builder_get_user_frame_ptr@@Base+0x484>
   15184:	add	r0, pc, r0
   15188:	bl	1208c <__assert_fail@plt>
   1518c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15190:	ldr	r2, [fp, #-16]
   15194:	str	r2, [r3, #136]	; 0x88
   15198:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1519c:	ldr	r3, [r3, #136]	; 0x88
   151a0:	mov	r0, r3
   151a4:	sub	sp, fp, #8
   151a8:	ldr	r4, [sp]
   151ac:	ldr	fp, [sp, #4]
   151b0:	add	sp, sp, #8
   151b4:	pop	{pc}		; (ldr pc, [sp], #4)
   151b8:	andeq	r6, r0, ip, lsr #10
   151bc:	andeq	r6, r0, r0, rrx
   151c0:	strheq	r6, [r0], -r8
   151c4:	andeq	r6, r0, ip, asr #9
   151c8:	andeq	r6, r0, r0
   151cc:	andeq	r6, r0, r8, asr r0
   151d0:	str	r4, [sp, #-12]!
   151d4:	str	fp, [sp, #4]
   151d8:	str	lr, [sp, #8]
   151dc:	add	fp, sp, #8
   151e0:	sub	sp, sp, #28
   151e4:	str	r0, [fp, #-24]	; 0xffffffe8
   151e8:	str	r1, [fp, #-28]	; 0xffffffe4
   151ec:	ldr	r3, [fp, #-24]	; 0xffffffe8
   151f0:	ldr	r3, [r3, #140]	; 0x8c
   151f4:	str	r3, [fp, #-16]
   151f8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   151fc:	ldr	r3, [r3]
   15200:	mov	r2, r3
   15204:	ldr	r3, [fp, #-16]
   15208:	add	r2, r2, r3
   1520c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15210:	str	r2, [r3, #140]	; 0x8c
   15214:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15218:	ldr	r3, [r3, #140]	; 0x8c
   1521c:	ldr	r2, [fp, #-16]
   15220:	cmp	r2, r3
   15224:	ble	15248 <flatcc_builder_get_user_frame_ptr@@Base+0x500>
   15228:	ldr	r3, [pc, #152]	; 152c8 <flatcc_builder_get_user_frame_ptr@@Base+0x580>
   1522c:	add	r3, pc, r3
   15230:	movw	r2, #673	; 0x2a1
   15234:	ldr	r1, [pc, #144]	; 152cc <flatcc_builder_get_user_frame_ptr@@Base+0x584>
   15238:	add	r1, pc, r1
   1523c:	ldr	r0, [pc, #140]	; 152d0 <flatcc_builder_get_user_frame_ptr@@Base+0x588>
   15240:	add	r0, pc, r0
   15244:	bl	1208c <__assert_fail@plt>
   15248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1524c:	ldr	r4, [r3, #44]	; 0x2c
   15250:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15254:	ldr	r0, [r3, #36]	; 0x24
   15258:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1525c:	add	r1, r3, #8
   15260:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15264:	ldr	r2, [r3, #4]
   15268:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1526c:	ldr	r3, [r3]
   15270:	str	r3, [sp]
   15274:	ldr	r3, [fp, #-16]
   15278:	blx	r4
   1527c:	mov	r3, r0
   15280:	cmp	r3, #0
   15284:	beq	152a8 <flatcc_builder_get_user_frame_ptr@@Base+0x560>
   15288:	ldr	r3, [pc, #68]	; 152d4 <flatcc_builder_get_user_frame_ptr@@Base+0x58c>
   1528c:	add	r3, pc, r3
   15290:	movw	r2, #677	; 0x2a5
   15294:	ldr	r1, [pc, #60]	; 152d8 <flatcc_builder_get_user_frame_ptr@@Base+0x590>
   15298:	add	r1, pc, r1
   1529c:	ldr	r0, [pc, #56]	; 152dc <flatcc_builder_get_user_frame_ptr@@Base+0x594>
   152a0:	add	r0, pc, r0
   152a4:	bl	1208c <__assert_fail@plt>
   152a8:	ldr	r3, [fp, #-16]
   152ac:	add	r3, r3, #1
   152b0:	mov	r0, r3
   152b4:	sub	sp, fp, #8
   152b8:	ldr	r4, [sp]
   152bc:	ldr	fp, [sp, #4]
   152c0:	add	sp, sp, #8
   152c4:	pop	{pc}		; (ldr pc, [sp], #4)
   152c8:	andeq	r6, r0, r4, lsl #8
   152cc:	andeq	r5, r0, r4, asr #30
   152d0:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   152d4:	andeq	r6, r0, r4, lsr #7
   152d8:	andeq	r5, r0, r4, ror #29
   152dc:	andeq	r5, r0, ip, lsr pc
   152e0:	str	r4, [sp, #-12]!
   152e4:	str	fp, [sp, #4]
   152e8:	str	lr, [sp, #8]
   152ec:	add	fp, sp, #8
   152f0:	sub	sp, sp, #100	; 0x64
   152f4:	str	r0, [fp, #-96]	; 0xffffffa0
   152f8:	str	r1, [fp, #-100]	; 0xffffff9c
   152fc:	str	r3, [fp, #-108]	; 0xffffff94
   15300:	mov	r3, r2
   15304:	strh	r3, [fp, #-102]	; 0xffffff9a
   15308:	ldr	r4, [pc, #332]	; 1545c <flatcc_builder_get_user_frame_ptr@@Base+0x714>
   1530c:	add	r4, pc, r4
   15310:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15314:	cmp	r3, #0
   15318:	bne	15340 <flatcc_builder_get_user_frame_ptr@@Base+0x5f8>
   1531c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15320:	ldrh	r3, [r3, #132]	; 0x84
   15324:	cmp	r3, #0
   15328:	beq	15338 <flatcc_builder_get_user_frame_ptr@@Base+0x5f0>
   1532c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   15330:	ldrh	r3, [r3, #132]	; 0x84
   15334:	b	15344 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   15338:	mov	r3, #1
   1533c:	b	15344 <flatcc_builder_get_user_frame_ptr@@Base+0x5fc>
   15340:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15344:	strh	r3, [fp, #-102]	; 0xffffff9a
   15348:	mov	r1, #4
   1534c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15350:	bl	14a08 <flatcc_builder_clear@@Base+0x10c>
   15354:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15358:	mov	r1, r3
   1535c:	ldr	r0, [fp, #-100]	; 0xffffff9c
   15360:	bl	14a08 <flatcc_builder_clear@@Base+0x10c>
   15364:	ldr	r3, [fp, #-108]	; 0xffffff94
   15368:	cmp	r3, #0
   1536c:	bne	15440 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   15370:	ldrh	r3, [fp, #-102]	; 0xffffff9a
   15374:	mov	r1, r3
   15378:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1537c:	bl	15088 <flatcc_builder_get_user_frame_ptr@@Base+0x340>
   15380:	str	r0, [fp, #-16]
   15384:	ldr	r3, [fp, #-16]
   15388:	cmp	r3, #0
   1538c:	beq	15440 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   15390:	mov	r3, #0
   15394:	str	r3, [fp, #-88]	; 0xffffffa8
   15398:	mov	r3, #0
   1539c:	str	r3, [fp, #-84]	; 0xffffffac
   153a0:	ldr	r3, [fp, #-16]
   153a4:	cmp	r3, #0
   153a8:	beq	15404 <flatcc_builder_get_user_frame_ptr@@Base+0x6bc>
   153ac:	ldr	r2, [fp, #-88]	; 0xffffffa8
   153b0:	ldr	r3, [fp, #-16]
   153b4:	add	r3, r2, r3
   153b8:	str	r3, [fp, #-88]	; 0xffffffa8
   153bc:	ldr	r3, [fp, #-84]	; 0xffffffac
   153c0:	add	r3, r3, #1
   153c4:	lsl	r3, r3, #3
   153c8:	sub	r2, fp, #12
   153cc:	add	r3, r2, r3
   153d0:	ldr	r2, [pc, #136]	; 15460 <flatcc_builder_get_user_frame_ptr@@Base+0x718>
   153d4:	ldr	r2, [r4, r2]
   153d8:	str	r2, [r3, #-76]	; 0xffffffb4
   153dc:	ldr	r3, [fp, #-84]	; 0xffffffac
   153e0:	add	r3, r3, #1
   153e4:	lsl	r3, r3, #3
   153e8:	sub	r2, fp, #12
   153ec:	add	r3, r2, r3
   153f0:	ldr	r2, [fp, #-16]
   153f4:	str	r2, [r3, #-72]	; 0xffffffb8
   153f8:	ldr	r3, [fp, #-84]	; 0xffffffac
   153fc:	add	r3, r3, #1
   15400:	str	r3, [fp, #-84]	; 0xffffffac
   15404:	sub	r3, fp, #88	; 0x58
   15408:	mov	r1, r3
   1540c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15410:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   15414:	mov	r3, r0
   15418:	cmp	r3, #0
   1541c:	bne	15440 <flatcc_builder_get_user_frame_ptr@@Base+0x6f8>
   15420:	ldr	r3, [pc, #60]	; 15464 <flatcc_builder_get_user_frame_ptr@@Base+0x71c>
   15424:	add	r3, pc, r3
   15428:	movw	r2, #702	; 0x2be
   1542c:	ldr	r1, [pc, #52]	; 15468 <flatcc_builder_get_user_frame_ptr@@Base+0x720>
   15430:	add	r1, pc, r1
   15434:	ldr	r0, [pc, #48]	; 1546c <flatcc_builder_get_user_frame_ptr@@Base+0x724>
   15438:	add	r0, pc, r0
   1543c:	bl	1208c <__assert_fail@plt>
   15440:	mov	r3, #0
   15444:	mov	r0, r3
   15448:	sub	sp, fp, #8
   1544c:	ldr	r4, [sp]
   15450:	ldr	fp, [sp, #4]
   15454:	add	sp, sp, #8
   15458:	pop	{pc}		; (ldr pc, [sp], #4)
   1545c:	andeq	r6, r1, ip, ror #25
   15460:	andeq	r0, r0, r8, asr r0
   15464:	strdeq	r6, [r0], -ip
   15468:	andeq	r5, r0, ip, asr #26
   1546c:	andeq	r5, r0, r4, lsr #27

00015470 <flatcc_builder_embed_buffer@@Base>:
   15470:	str	r4, [sp, #-12]!
   15474:	str	fp, [sp, #4]
   15478:	str	lr, [sp, #8]
   1547c:	add	fp, sp, #8
   15480:	sub	sp, sp, #108	; 0x6c
   15484:	str	r0, [fp, #-104]	; 0xffffff98
   15488:	str	r2, [fp, #-112]	; 0xffffff90
   1548c:	str	r3, [fp, #-116]	; 0xffffff8c
   15490:	mov	r3, r1
   15494:	strh	r3, [fp, #-106]	; 0xffffff96
   15498:	ldr	r4, [pc, #504]	; 15698 <flatcc_builder_embed_buffer@@Base+0x228>
   1549c:	add	r4, pc, r4
   154a0:	ldr	r3, [fp, #8]
   154a4:	and	r3, r3, #2
   154a8:	str	r3, [fp, #-16]
   154ac:	ldr	r3, [fp, #-104]	; 0xffffff98
   154b0:	ldr	r3, [r3, #152]	; 0x98
   154b4:	cmp	r3, #0
   154b8:	movne	r3, #1
   154bc:	moveq	r3, #0
   154c0:	uxtb	r3, r3
   154c4:	ldrh	r2, [fp, #-106]	; 0xffffff96
   154c8:	add	r1, fp, #4
   154cc:	ldr	r0, [fp, #-104]	; 0xffffff98
   154d0:	bl	152e0 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   154d4:	mov	r3, r0
   154d8:	cmp	r3, #0
   154dc:	beq	154e8 <flatcc_builder_embed_buffer@@Base+0x78>
   154e0:	mov	r3, #0
   154e4:	b	15680 <flatcc_builder_embed_buffer@@Base+0x210>
   154e8:	ldr	r3, [fp, #-16]
   154ec:	cmp	r3, #0
   154f0:	beq	154fc <flatcc_builder_embed_buffer@@Base+0x8c>
   154f4:	mov	r2, #4
   154f8:	b	15500 <flatcc_builder_embed_buffer@@Base+0x90>
   154fc:	mov	r2, #0
   15500:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15504:	add	r3, r2, r3
   15508:	ldrh	r2, [fp, #4]
   1550c:	mov	r1, r3
   15510:	ldr	r0, [fp, #-104]	; 0xffffff98
   15514:	bl	1503c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   15518:	str	r0, [fp, #-20]	; 0xffffffec
   1551c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   15520:	ldr	r3, [fp, #-20]	; 0xffffffec
   15524:	add	r3, r2, r3
   15528:	mov	r0, r3
   1552c:	bl	138b8 <main@@Base+0xf0>
   15530:	mov	r3, r0
   15534:	str	r3, [fp, #-24]	; 0xffffffe8
   15538:	mov	r3, #0
   1553c:	str	r3, [fp, #-96]	; 0xffffffa0
   15540:	mov	r3, #0
   15544:	str	r3, [fp, #-92]	; 0xffffffa4
   15548:	ldr	r3, [fp, #-104]	; 0xffffff98
   1554c:	ldr	r3, [r3, #152]	; 0x98
   15550:	cmp	r3, #0
   15554:	beq	155a8 <flatcc_builder_embed_buffer@@Base+0x138>
   15558:	ldr	r3, [fp, #-96]	; 0xffffffa0
   1555c:	add	r3, r3, #4
   15560:	str	r3, [fp, #-96]	; 0xffffffa0
   15564:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15568:	add	r3, r3, #1
   1556c:	lsl	r3, r3, #3
   15570:	sub	r2, fp, #12
   15574:	add	r3, r2, r3
   15578:	sub	r2, fp, #24
   1557c:	str	r2, [r3, #-84]	; 0xffffffac
   15580:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15584:	add	r3, r3, #1
   15588:	lsl	r3, r3, #3
   1558c:	sub	r2, fp, #12
   15590:	add	r3, r2, r3
   15594:	mov	r2, #4
   15598:	str	r2, [r3, #-80]	; 0xffffffb0
   1559c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155a0:	add	r3, r3, #1
   155a4:	str	r3, [fp, #-92]	; 0xffffffa4
   155a8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   155ac:	cmp	r3, #0
   155b0:	beq	15608 <flatcc_builder_embed_buffer@@Base+0x198>
   155b4:	ldr	r2, [fp, #-96]	; 0xffffffa0
   155b8:	ldr	r3, [fp, #-116]	; 0xffffff8c
   155bc:	add	r3, r2, r3
   155c0:	str	r3, [fp, #-96]	; 0xffffffa0
   155c4:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155c8:	add	r3, r3, #1
   155cc:	lsl	r3, r3, #3
   155d0:	sub	r2, fp, #12
   155d4:	add	r3, r2, r3
   155d8:	ldr	r2, [fp, #-112]	; 0xffffff90
   155dc:	str	r2, [r3, #-84]	; 0xffffffac
   155e0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   155e4:	add	r3, r3, #1
   155e8:	lsl	r3, r3, #3
   155ec:	sub	r2, fp, #12
   155f0:	add	r3, r2, r3
   155f4:	ldr	r2, [fp, #-116]	; 0xffffff8c
   155f8:	str	r2, [r3, #-80]	; 0xffffffb0
   155fc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15600:	add	r3, r3, #1
   15604:	str	r3, [fp, #-92]	; 0xffffffa4
   15608:	ldr	r3, [fp, #-20]	; 0xffffffec
   1560c:	cmp	r3, #0
   15610:	beq	1566c <flatcc_builder_embed_buffer@@Base+0x1fc>
   15614:	ldr	r2, [fp, #-96]	; 0xffffffa0
   15618:	ldr	r3, [fp, #-20]	; 0xffffffec
   1561c:	add	r3, r2, r3
   15620:	str	r3, [fp, #-96]	; 0xffffffa0
   15624:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15628:	add	r3, r3, #1
   1562c:	lsl	r3, r3, #3
   15630:	sub	r2, fp, #12
   15634:	add	r3, r2, r3
   15638:	ldr	r2, [pc, #92]	; 1569c <flatcc_builder_embed_buffer@@Base+0x22c>
   1563c:	ldr	r2, [r4, r2]
   15640:	str	r2, [r3, #-84]	; 0xffffffac
   15644:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15648:	add	r3, r3, #1
   1564c:	lsl	r3, r3, #3
   15650:	sub	r2, fp, #12
   15654:	add	r3, r2, r3
   15658:	ldr	r2, [fp, #-20]	; 0xffffffec
   1565c:	str	r2, [r3, #-80]	; 0xffffffb0
   15660:	ldr	r3, [fp, #-92]	; 0xffffffa4
   15664:	add	r3, r3, #1
   15668:	str	r3, [fp, #-92]	; 0xffffffa4
   1566c:	sub	r3, fp, #96	; 0x60
   15670:	mov	r1, r3
   15674:	ldr	r0, [fp, #-104]	; 0xffffff98
   15678:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1567c:	mov	r3, r0
   15680:	mov	r0, r3
   15684:	sub	sp, fp, #8
   15688:	ldr	r4, [sp]
   1568c:	ldr	fp, [sp, #4]
   15690:	add	sp, sp, #8
   15694:	pop	{pc}		; (ldr pc, [sp], #4)
   15698:	andeq	r6, r1, ip, asr fp
   1569c:	andeq	r0, r0, r8, asr r0

000156a0 <flatcc_builder_create_buffer@@Base>:
   156a0:	str	r4, [sp, #-12]!
   156a4:	str	fp, [sp, #4]
   156a8:	str	lr, [sp, #8]
   156ac:	add	fp, sp, #8
   156b0:	sub	sp, sp, #132	; 0x84
   156b4:	str	r0, [fp, #-128]	; 0xffffff80
   156b8:	str	r1, [fp, #-132]	; 0xffffff7c
   156bc:	str	r3, [fp, #-140]	; 0xffffff74
   156c0:	mov	r3, r2
   156c4:	strh	r3, [fp, #-134]	; 0xffffff7a
   156c8:	ldr	r4, [pc, #944]	; 15a80 <flatcc_builder_create_buffer@@Base+0x3e0>
   156cc:	add	r4, pc, r4
   156d0:	mov	r3, #0
   156d4:	str	r3, [fp, #-16]
   156d8:	mov	r3, #0
   156dc:	str	r3, [fp, #-120]	; 0xffffff88
   156e0:	ldr	r3, [fp, #8]
   156e4:	and	r3, r3, #1
   156e8:	cmp	r3, #0
   156ec:	movne	r3, #1
   156f0:	moveq	r3, #0
   156f4:	uxtb	r3, r3
   156f8:	str	r3, [fp, #-20]	; 0xffffffec
   156fc:	ldr	r3, [fp, #8]
   15700:	and	r3, r3, #2
   15704:	cmp	r3, #0
   15708:	movne	r3, #1
   1570c:	moveq	r3, #0
   15710:	uxtb	r3, r3
   15714:	str	r3, [fp, #-24]	; 0xffffffe8
   15718:	ldrh	r2, [fp, #-134]	; 0xffffff7a
   1571c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15720:	add	r1, fp, #4
   15724:	ldr	r0, [fp, #-128]	; 0xffffff80
   15728:	bl	152e0 <flatcc_builder_get_user_frame_ptr@@Base+0x598>
   1572c:	mov	r3, r0
   15730:	cmp	r3, #0
   15734:	beq	15740 <flatcc_builder_create_buffer@@Base+0xa0>
   15738:	mov	r3, #0
   1573c:	b	15a68 <flatcc_builder_create_buffer@@Base+0x3c8>
   15740:	ldrh	r3, [fp, #4]
   15744:	mov	r1, r3
   15748:	ldr	r0, [fp, #-128]	; 0xffffff80
   1574c:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   15750:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15754:	cmp	r3, #0
   15758:	beq	15790 <flatcc_builder_create_buffer@@Base+0xf0>
   1575c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   15760:	ldr	r3, [r3]
   15764:	str	r3, [fp, #-120]	; 0xffffff88
   15768:	ldr	r3, [fp, #-120]	; 0xffffff88
   1576c:	mov	r0, r3
   15770:	bl	13904 <main@@Base+0x13c>
   15774:	mov	r3, r0
   15778:	str	r3, [fp, #-120]	; 0xffffff88
   1577c:	ldr	r3, [fp, #-120]	; 0xffffff88
   15780:	mov	r0, r3
   15784:	bl	138b8 <main@@Base+0xf0>
   15788:	mov	r3, r0
   1578c:	str	r3, [fp, #-120]	; 0xffffff88
   15790:	ldr	r3, [fp, #-120]	; 0xffffff88
   15794:	cmp	r3, #0
   15798:	beq	157a4 <flatcc_builder_create_buffer@@Base+0x104>
   1579c:	mov	r3, #4
   157a0:	b	157a8 <flatcc_builder_create_buffer@@Base+0x108>
   157a4:	mov	r3, #0
   157a8:	str	r3, [fp, #-16]
   157ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   157b0:	cmp	r3, #0
   157b4:	beq	157c0 <flatcc_builder_create_buffer@@Base+0x120>
   157b8:	mov	r2, #4
   157bc:	b	157c4 <flatcc_builder_create_buffer@@Base+0x124>
   157c0:	mov	r2, #0
   157c4:	ldr	r3, [fp, #-16]
   157c8:	add	r3, r2, r3
   157cc:	add	r3, r3, #4
   157d0:	ldrh	r2, [fp, #4]
   157d4:	mov	r1, r3
   157d8:	ldr	r0, [fp, #-128]	; 0xffffff80
   157dc:	bl	1503c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   157e0:	str	r0, [fp, #-28]	; 0xffffffe4
   157e4:	mov	r3, #0
   157e8:	str	r3, [fp, #-116]	; 0xffffff8c
   157ec:	mov	r3, #0
   157f0:	str	r3, [fp, #-112]	; 0xffffff90
   157f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   157f8:	cmp	r3, #0
   157fc:	bne	1580c <flatcc_builder_create_buffer@@Base+0x16c>
   15800:	ldr	r3, [fp, #-24]	; 0xffffffe8
   15804:	cmp	r3, #0
   15808:	beq	1585c <flatcc_builder_create_buffer@@Base+0x1bc>
   1580c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15810:	add	r3, r3, #4
   15814:	str	r3, [fp, #-116]	; 0xffffff8c
   15818:	ldr	r3, [fp, #-112]	; 0xffffff90
   1581c:	add	r3, r3, #1
   15820:	lsl	r3, r3, #3
   15824:	sub	r2, fp, #12
   15828:	add	r3, r2, r3
   1582c:	sub	r2, fp, #44	; 0x2c
   15830:	str	r2, [r3, #-104]	; 0xffffff98
   15834:	ldr	r3, [fp, #-112]	; 0xffffff90
   15838:	add	r3, r3, #1
   1583c:	lsl	r3, r3, #3
   15840:	sub	r2, fp, #12
   15844:	add	r3, r2, r3
   15848:	mov	r2, #4
   1584c:	str	r2, [r3, #-100]	; 0xffffff9c
   15850:	ldr	r3, [fp, #-112]	; 0xffffff90
   15854:	add	r3, r3, #1
   15858:	str	r3, [fp, #-112]	; 0xffffff90
   1585c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15860:	add	r3, r3, #4
   15864:	str	r3, [fp, #-116]	; 0xffffff8c
   15868:	ldr	r3, [fp, #-112]	; 0xffffff90
   1586c:	add	r3, r3, #1
   15870:	lsl	r3, r3, #3
   15874:	sub	r2, fp, #12
   15878:	add	r3, r2, r3
   1587c:	sub	r2, fp, #40	; 0x28
   15880:	str	r2, [r3, #-104]	; 0xffffff98
   15884:	ldr	r3, [fp, #-112]	; 0xffffff90
   15888:	add	r3, r3, #1
   1588c:	lsl	r3, r3, #3
   15890:	sub	r2, fp, #12
   15894:	add	r3, r2, r3
   15898:	mov	r2, #4
   1589c:	str	r2, [r3, #-100]	; 0xffffff9c
   158a0:	ldr	r3, [fp, #-112]	; 0xffffff90
   158a4:	add	r3, r3, #1
   158a8:	str	r3, [fp, #-112]	; 0xffffff90
   158ac:	ldr	r3, [fp, #-16]
   158b0:	cmp	r3, #0
   158b4:	beq	1590c <flatcc_builder_create_buffer@@Base+0x26c>
   158b8:	ldr	r2, [fp, #-116]	; 0xffffff8c
   158bc:	ldr	r3, [fp, #-16]
   158c0:	add	r3, r2, r3
   158c4:	str	r3, [fp, #-116]	; 0xffffff8c
   158c8:	ldr	r3, [fp, #-112]	; 0xffffff90
   158cc:	add	r3, r3, #1
   158d0:	lsl	r3, r3, #3
   158d4:	sub	r2, fp, #12
   158d8:	add	r3, r2, r3
   158dc:	sub	r2, fp, #120	; 0x78
   158e0:	str	r2, [r3, #-104]	; 0xffffff98
   158e4:	ldr	r3, [fp, #-112]	; 0xffffff90
   158e8:	add	r3, r3, #1
   158ec:	lsl	r3, r3, #3
   158f0:	sub	r2, fp, #12
   158f4:	add	r3, r2, r3
   158f8:	ldr	r2, [fp, #-16]
   158fc:	str	r2, [r3, #-100]	; 0xffffff9c
   15900:	ldr	r3, [fp, #-112]	; 0xffffff90
   15904:	add	r3, r3, #1
   15908:	str	r3, [fp, #-112]	; 0xffffff90
   1590c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15910:	cmp	r3, #0
   15914:	beq	15970 <flatcc_builder_create_buffer@@Base+0x2d0>
   15918:	ldr	r2, [fp, #-116]	; 0xffffff8c
   1591c:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15920:	add	r3, r2, r3
   15924:	str	r3, [fp, #-116]	; 0xffffff8c
   15928:	ldr	r3, [fp, #-112]	; 0xffffff90
   1592c:	add	r3, r3, #1
   15930:	lsl	r3, r3, #3
   15934:	sub	r2, fp, #12
   15938:	add	r3, r2, r3
   1593c:	ldr	r2, [pc, #320]	; 15a84 <flatcc_builder_create_buffer@@Base+0x3e4>
   15940:	ldr	r2, [r4, r2]
   15944:	str	r2, [r3, #-104]	; 0xffffff98
   15948:	ldr	r3, [fp, #-112]	; 0xffffff90
   1594c:	add	r3, r3, #1
   15950:	lsl	r3, r3, #3
   15954:	sub	r2, fp, #12
   15958:	add	r3, r2, r3
   1595c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   15960:	str	r2, [r3, #-100]	; 0xffffff9c
   15964:	ldr	r3, [fp, #-112]	; 0xffffff90
   15968:	add	r3, r3, #1
   1596c:	str	r3, [fp, #-112]	; 0xffffff90
   15970:	ldr	r3, [fp, #-128]	; 0xffffff80
   15974:	ldr	r3, [r3, #136]	; 0x88
   15978:	mov	r2, r3
   1597c:	ldr	r3, [fp, #-116]	; 0xffffff8c
   15980:	sub	r3, r2, r3
   15984:	ldr	r2, [fp, #-20]	; 0xffffffec
   15988:	cmp	r2, #0
   1598c:	bne	1599c <flatcc_builder_create_buffer@@Base+0x2fc>
   15990:	ldr	r2, [fp, #-24]	; 0xffffffe8
   15994:	cmp	r2, #0
   15998:	beq	159a4 <flatcc_builder_create_buffer@@Base+0x304>
   1599c:	mov	r2, #4
   159a0:	b	159a8 <flatcc_builder_create_buffer@@Base+0x308>
   159a4:	mov	r2, #0
   159a8:	add	r3, r2, r3
   159ac:	str	r3, [fp, #-32]	; 0xffffffe0
   159b0:	ldr	r3, [fp, #-20]	; 0xffffffec
   159b4:	cmp	r3, #0
   159b8:	beq	159e4 <flatcc_builder_create_buffer@@Base+0x344>
   159bc:	ldr	r3, [fp, #-128]	; 0xffffff80
   159c0:	ldr	r3, [r3, #144]	; 0x90
   159c4:	mov	r2, r3
   159c8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   159cc:	sub	r3, r2, r3
   159d0:	mov	r0, r3
   159d4:	bl	138b8 <main@@Base+0xf0>
   159d8:	mov	r3, r0
   159dc:	str	r3, [fp, #-44]	; 0xffffffd4
   159e0:	b	15a08 <flatcc_builder_create_buffer@@Base+0x368>
   159e4:	ldr	r3, [fp, #-128]	; 0xffffff80
   159e8:	ldr	r3, [r3, #140]	; 0x8c
   159ec:	mov	r2, r3
   159f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   159f4:	sub	r3, r2, r3
   159f8:	mov	r0, r3
   159fc:	bl	138b8 <main@@Base+0xf0>
   15a00:	mov	r3, r0
   15a04:	str	r3, [fp, #-44]	; 0xffffffd4
   15a08:	ldr	r2, [fp, #-140]	; 0xffffff74
   15a0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   15a10:	sub	r3, r2, r3
   15a14:	mov	r0, r3
   15a18:	bl	138b8 <main@@Base+0xf0>
   15a1c:	mov	r3, r0
   15a20:	str	r3, [fp, #-40]	; 0xffffffd8
   15a24:	sub	r3, fp, #116	; 0x74
   15a28:	mov	r1, r3
   15a2c:	ldr	r0, [fp, #-128]	; 0xffffff80
   15a30:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   15a34:	str	r0, [fp, #-36]	; 0xffffffdc
   15a38:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a3c:	cmp	r3, #0
   15a40:	bne	15a64 <flatcc_builder_create_buffer@@Base+0x3c4>
   15a44:	ldr	r3, [pc, #60]	; 15a88 <flatcc_builder_create_buffer@@Base+0x3e8>
   15a48:	add	r3, pc, r3
   15a4c:	mov	r2, #772	; 0x304
   15a50:	ldr	r1, [pc, #52]	; 15a8c <flatcc_builder_create_buffer@@Base+0x3ec>
   15a54:	add	r1, pc, r1
   15a58:	ldr	r0, [pc, #48]	; 15a90 <flatcc_builder_create_buffer@@Base+0x3f0>
   15a5c:	add	r0, pc, r0
   15a60:	bl	1208c <__assert_fail@plt>
   15a64:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15a68:	mov	r0, r3
   15a6c:	sub	sp, fp, #8
   15a70:	ldr	r4, [sp]
   15a74:	ldr	fp, [sp, #4]
   15a78:	add	sp, sp, #8
   15a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a80:	andeq	r6, r1, ip, lsr #18
   15a84:	andeq	r0, r0, r8, asr r0
   15a88:	andeq	r5, r0, r0, lsl #24
   15a8c:	andeq	r5, r0, r8, lsr #14
   15a90:	andeq	r5, r0, r0, lsl #15

00015a94 <flatcc_builder_create_struct@@Base>:
   15a94:	str	r4, [sp, #-12]!
   15a98:	str	fp, [sp, #4]
   15a9c:	str	lr, [sp, #8]
   15aa0:	add	fp, sp, #8
   15aa4:	sub	sp, sp, #100	; 0x64
   15aa8:	str	r0, [fp, #-96]	; 0xffffffa0
   15aac:	str	r1, [fp, #-100]	; 0xffffff9c
   15ab0:	str	r2, [fp, #-104]	; 0xffffff98
   15ab4:	strh	r3, [fp, #-106]	; 0xffffff96
   15ab8:	ldr	r4, [pc, #340]	; 15c14 <flatcc_builder_create_struct@@Base+0x180>
   15abc:	add	r4, pc, r4
   15ac0:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15ac4:	cmp	r3, #0
   15ac8:	bne	15aec <flatcc_builder_create_struct@@Base+0x58>
   15acc:	ldr	r3, [pc, #324]	; 15c18 <flatcc_builder_create_struct@@Base+0x184>
   15ad0:	add	r3, pc, r3
   15ad4:	movw	r2, #783	; 0x30f
   15ad8:	ldr	r1, [pc, #316]	; 15c1c <flatcc_builder_create_struct@@Base+0x188>
   15adc:	add	r1, pc, r1
   15ae0:	ldr	r0, [pc, #312]	; 15c20 <flatcc_builder_create_struct@@Base+0x18c>
   15ae4:	add	r0, pc, r0
   15ae8:	bl	1208c <__assert_fail@plt>
   15aec:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15af0:	mov	r1, r3
   15af4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15af8:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   15afc:	ldrh	r3, [fp, #-106]	; 0xffffff96
   15b00:	mov	r2, r3
   15b04:	ldr	r1, [fp, #-104]	; 0xffffff98
   15b08:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15b0c:	bl	1503c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   15b10:	str	r0, [fp, #-16]
   15b14:	mov	r3, #0
   15b18:	str	r3, [fp, #-88]	; 0xffffffa8
   15b1c:	mov	r3, #0
   15b20:	str	r3, [fp, #-84]	; 0xffffffac
   15b24:	ldr	r3, [fp, #-104]	; 0xffffff98
   15b28:	cmp	r3, #0
   15b2c:	beq	15b84 <flatcc_builder_create_struct@@Base+0xf0>
   15b30:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15b34:	ldr	r3, [fp, #-104]	; 0xffffff98
   15b38:	add	r3, r2, r3
   15b3c:	str	r3, [fp, #-88]	; 0xffffffa8
   15b40:	ldr	r3, [fp, #-84]	; 0xffffffac
   15b44:	add	r3, r3, #1
   15b48:	lsl	r3, r3, #3
   15b4c:	sub	r2, fp, #12
   15b50:	add	r3, r2, r3
   15b54:	ldr	r2, [fp, #-100]	; 0xffffff9c
   15b58:	str	r2, [r3, #-76]	; 0xffffffb4
   15b5c:	ldr	r3, [fp, #-84]	; 0xffffffac
   15b60:	add	r3, r3, #1
   15b64:	lsl	r3, r3, #3
   15b68:	sub	r2, fp, #12
   15b6c:	add	r3, r2, r3
   15b70:	ldr	r2, [fp, #-104]	; 0xffffff98
   15b74:	str	r2, [r3, #-72]	; 0xffffffb8
   15b78:	ldr	r3, [fp, #-84]	; 0xffffffac
   15b7c:	add	r3, r3, #1
   15b80:	str	r3, [fp, #-84]	; 0xffffffac
   15b84:	ldr	r3, [fp, #-16]
   15b88:	cmp	r3, #0
   15b8c:	beq	15be8 <flatcc_builder_create_struct@@Base+0x154>
   15b90:	ldr	r2, [fp, #-88]	; 0xffffffa8
   15b94:	ldr	r3, [fp, #-16]
   15b98:	add	r3, r2, r3
   15b9c:	str	r3, [fp, #-88]	; 0xffffffa8
   15ba0:	ldr	r3, [fp, #-84]	; 0xffffffac
   15ba4:	add	r3, r3, #1
   15ba8:	lsl	r3, r3, #3
   15bac:	sub	r2, fp, #12
   15bb0:	add	r3, r2, r3
   15bb4:	ldr	r2, [pc, #104]	; 15c24 <flatcc_builder_create_struct@@Base+0x190>
   15bb8:	ldr	r2, [r4, r2]
   15bbc:	str	r2, [r3, #-76]	; 0xffffffb4
   15bc0:	ldr	r3, [fp, #-84]	; 0xffffffac
   15bc4:	add	r3, r3, #1
   15bc8:	lsl	r3, r3, #3
   15bcc:	sub	r2, fp, #12
   15bd0:	add	r3, r2, r3
   15bd4:	ldr	r2, [fp, #-16]
   15bd8:	str	r2, [r3, #-72]	; 0xffffffb8
   15bdc:	ldr	r3, [fp, #-84]	; 0xffffffac
   15be0:	add	r3, r3, #1
   15be4:	str	r3, [fp, #-84]	; 0xffffffac
   15be8:	sub	r3, fp, #88	; 0x58
   15bec:	mov	r1, r3
   15bf0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   15bf4:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   15bf8:	mov	r3, r0
   15bfc:	mov	r0, r3
   15c00:	sub	sp, fp, #8
   15c04:	ldr	r4, [sp]
   15c08:	ldr	fp, [sp, #4]
   15c0c:	add	sp, sp, #8
   15c10:	pop	{pc}		; (ldr pc, [sp], #4)
   15c14:	andeq	r6, r1, ip, lsr r5
   15c18:	muleq	r0, r8, fp
   15c1c:	andeq	r5, r0, r0, lsr #13
   15c20:	andeq	r5, r0, ip, asr r7
   15c24:	andeq	r0, r0, r8, asr r0

00015c28 <flatcc_builder_start_buffer@@Base>:
   15c28:	str	r4, [sp, #-12]!
   15c2c:	str	fp, [sp, #4]
   15c30:	str	lr, [sp, #8]
   15c34:	add	fp, sp, #8
   15c38:	sub	sp, sp, #20
   15c3c:	str	r0, [fp, #-16]
   15c40:	str	r1, [fp, #-20]	; 0xffffffec
   15c44:	str	r3, [fp, #-28]	; 0xffffffe4
   15c48:	mov	r3, r2
   15c4c:	strh	r3, [fp, #-22]	; 0xffffffea
   15c50:	ldr	r4, [pc, #312]	; 15d90 <flatcc_builder_start_buffer@@Base+0x168>
   15c54:	add	r4, pc, r4
   15c58:	ldr	r3, [fp, #-16]
   15c5c:	ldrh	r3, [r3, #128]	; 0x80
   15c60:	mov	r1, r3
   15c64:	ldr	r0, [fp, #-16]
   15c68:	bl	14d7c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15c6c:	mov	r3, r0
   15c70:	cmp	r3, #0
   15c74:	beq	15c80 <flatcc_builder_start_buffer@@Base+0x58>
   15c78:	mvn	r3, #0
   15c7c:	b	15d78 <flatcc_builder_start_buffer@@Base+0x150>
   15c80:	ldr	r3, [fp, #-16]
   15c84:	mov	r2, #1
   15c88:	strh	r2, [r3, #128]	; 0x80
   15c8c:	ldr	r3, [fp, #-16]
   15c90:	ldr	r3, [r3, #32]
   15c94:	ldr	r2, [fp, #-16]
   15c98:	ldrh	r2, [r2, #132]	; 0x84
   15c9c:	strh	r2, [r3, #34]	; 0x22
   15ca0:	ldr	r3, [fp, #-16]
   15ca4:	ldrh	r2, [fp, #-22]	; 0xffffffea
   15ca8:	strh	r2, [r3, #132]	; 0x84
   15cac:	ldr	r3, [fp, #-16]
   15cb0:	ldr	r3, [r3, #32]
   15cb4:	ldr	r2, [fp, #-16]
   15cb8:	ldrh	r2, [r2, #164]	; 0xa4
   15cbc:	strh	r2, [r3, #32]
   15cc0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   15cc4:	uxth	r2, r3
   15cc8:	ldr	r3, [fp, #-16]
   15ccc:	strh	r2, [r3, #164]	; 0xa4
   15cd0:	ldr	r3, [fp, #-16]
   15cd4:	ldr	r3, [r3, #32]
   15cd8:	ldr	r2, [fp, #-16]
   15cdc:	ldr	r2, [r2, #144]	; 0x90
   15ce0:	str	r2, [r3, #20]
   15ce4:	ldr	r3, [fp, #-16]
   15ce8:	ldr	r3, [r3, #32]
   15cec:	ldr	r2, [fp, #-16]
   15cf0:	ldr	r2, [r2, #152]	; 0x98
   15cf4:	str	r2, [r3, #28]
   15cf8:	ldr	r3, [fp, #-16]
   15cfc:	ldr	r2, [r3, #136]	; 0x88
   15d00:	ldr	r3, [fp, #-16]
   15d04:	str	r2, [r3, #144]	; 0x90
   15d08:	ldr	r3, [fp, #-16]
   15d0c:	ldr	r3, [r3, #148]	; 0x94
   15d10:	add	r1, r3, #1
   15d14:	ldr	r2, [fp, #-16]
   15d18:	str	r1, [r2, #148]	; 0x94
   15d1c:	ldr	r2, [fp, #-16]
   15d20:	str	r3, [r2, #152]	; 0x98
   15d24:	ldr	r3, [fp, #-16]
   15d28:	ldr	r3, [r3, #32]
   15d2c:	ldr	r2, [fp, #-16]
   15d30:	ldr	r2, [r2, #168]	; 0xa8
   15d34:	str	r2, [r3, #16]
   15d38:	ldr	r3, [fp, #-16]
   15d3c:	add	r2, r3, #168	; 0xa8
   15d40:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d44:	cmp	r3, #0
   15d48:	beq	15d54 <flatcc_builder_start_buffer@@Base+0x12c>
   15d4c:	ldr	r3, [fp, #-20]	; 0xffffffec
   15d50:	b	15d5c <flatcc_builder_start_buffer@@Base+0x134>
   15d54:	ldr	r3, [pc, #56]	; 15d94 <flatcc_builder_start_buffer@@Base+0x16c>
   15d58:	ldr	r3, [r4, r3]
   15d5c:	ldr	r3, [r3]
   15d60:	str	r3, [r2]
   15d64:	ldr	r3, [fp, #-16]
   15d68:	ldr	r3, [r3, #32]
   15d6c:	mov	r2, #1
   15d70:	strh	r2, [r3, #14]
   15d74:	mov	r3, #0
   15d78:	mov	r0, r3
   15d7c:	sub	sp, fp, #8
   15d80:	ldr	r4, [sp]
   15d84:	ldr	fp, [sp, #4]
   15d88:	add	sp, sp, #8
   15d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d90:	andeq	r6, r1, r4, lsr #7
   15d94:	andeq	r0, r0, r8, asr r0

00015d98 <flatcc_builder_end_buffer@@Base>:
   15d98:	str	fp, [sp, #-8]!
   15d9c:	str	lr, [sp, #4]
   15da0:	add	fp, sp, #4
   15da4:	sub	sp, sp, #24
   15da8:	str	r0, [fp, #-16]
   15dac:	str	r1, [fp, #-20]	; 0xffffffec
   15db0:	ldr	r3, [fp, #-16]
   15db4:	ldrh	r3, [r3, #164]	; 0xa4
   15db8:	and	r3, r3, #2
   15dbc:	str	r3, [fp, #-8]
   15dc0:	ldr	r3, [fp, #-16]
   15dc4:	ldr	r3, [r3, #152]	; 0x98
   15dc8:	cmp	r3, #0
   15dcc:	movne	r3, #1
   15dd0:	moveq	r3, #0
   15dd4:	uxtb	r3, r3
   15dd8:	mov	r2, r3
   15ddc:	ldr	r3, [fp, #-8]
   15de0:	orr	r3, r3, r2
   15de4:	str	r3, [fp, #-8]
   15de8:	ldr	r3, [fp, #-16]
   15dec:	ldr	r3, [r3, #32]
   15df0:	ldrh	r3, [r3, #14]
   15df4:	cmp	r3, #1
   15df8:	beq	15e1c <flatcc_builder_end_buffer@@Base+0x84>
   15dfc:	ldr	r3, [pc, #232]	; 15eec <flatcc_builder_end_buffer@@Base+0x154>
   15e00:	add	r3, pc, r3
   15e04:	movw	r2, #838	; 0x346
   15e08:	ldr	r1, [pc, #224]	; 15ef0 <flatcc_builder_end_buffer@@Base+0x158>
   15e0c:	add	r1, pc, r1
   15e10:	ldr	r0, [pc, #220]	; 15ef4 <flatcc_builder_end_buffer@@Base+0x15c>
   15e14:	add	r0, pc, r0
   15e18:	bl	1208c <__assert_fail@plt>
   15e1c:	ldr	r3, [fp, #-16]
   15e20:	ldrh	r3, [r3, #132]	; 0x84
   15e24:	mov	r1, r3
   15e28:	ldr	r0, [fp, #-16]
   15e2c:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   15e30:	ldr	r3, [fp, #-16]
   15e34:	add	r1, r3, #168	; 0xa8
   15e38:	ldr	r3, [fp, #-16]
   15e3c:	ldrh	r0, [r3, #132]	; 0x84
   15e40:	ldr	r3, [fp, #-16]
   15e44:	ldrh	r3, [r3, #128]	; 0x80
   15e48:	ldr	r2, [fp, #-8]
   15e4c:	str	r2, [sp, #4]
   15e50:	str	r3, [sp]
   15e54:	ldr	r3, [fp, #-20]	; 0xffffffec
   15e58:	mov	r2, r0
   15e5c:	ldr	r0, [fp, #-16]
   15e60:	bl	156a0 <flatcc_builder_create_buffer@@Base>
   15e64:	str	r0, [fp, #-12]
   15e68:	ldr	r3, [fp, #-12]
   15e6c:	cmp	r3, #0
   15e70:	bne	15e7c <flatcc_builder_end_buffer@@Base+0xe4>
   15e74:	mov	r3, #0
   15e78:	b	15ed8 <flatcc_builder_end_buffer@@Base+0x140>
   15e7c:	ldr	r3, [fp, #-16]
   15e80:	ldr	r3, [r3, #32]
   15e84:	ldr	r2, [r3, #20]
   15e88:	ldr	r3, [fp, #-16]
   15e8c:	str	r2, [r3, #144]	; 0x90
   15e90:	ldr	r3, [fp, #-16]
   15e94:	ldr	r3, [r3, #32]
   15e98:	ldr	r2, [r3, #28]
   15e9c:	ldr	r3, [fp, #-16]
   15ea0:	str	r2, [r3, #152]	; 0x98
   15ea4:	ldr	r3, [fp, #-16]
   15ea8:	ldr	r3, [r3, #32]
   15eac:	ldr	r2, [r3, #16]
   15eb0:	ldr	r3, [fp, #-16]
   15eb4:	str	r2, [r3, #168]	; 0xa8
   15eb8:	ldr	r3, [fp, #-16]
   15ebc:	ldr	r3, [r3, #32]
   15ec0:	ldrh	r2, [r3, #32]
   15ec4:	ldr	r3, [fp, #-16]
   15ec8:	strh	r2, [r3, #164]	; 0xa4
   15ecc:	ldr	r0, [fp, #-16]
   15ed0:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   15ed4:	ldr	r3, [fp, #-12]
   15ed8:	mov	r0, r3
   15edc:	sub	sp, fp, #4
   15ee0:	ldr	fp, [sp]
   15ee4:	add	sp, sp, #4
   15ee8:	pop	{pc}		; (ldr pc, [sp], #4)
   15eec:	andeq	r5, r0, r8, lsl #17
   15ef0:	andeq	r5, r0, r0, ror r3
   15ef4:	andeq	r5, r0, r8, lsr r4

00015ef8 <flatcc_builder_start_struct@@Base>:
   15ef8:	str	fp, [sp, #-8]!
   15efc:	str	lr, [sp, #4]
   15f00:	add	fp, sp, #4
   15f04:	sub	sp, sp, #16
   15f08:	str	r0, [fp, #-8]
   15f0c:	str	r1, [fp, #-12]
   15f10:	mov	r3, r2
   15f14:	strh	r3, [fp, #-14]
   15f18:	ldrh	r3, [fp, #-14]
   15f1c:	mov	r1, r3
   15f20:	ldr	r0, [fp, #-8]
   15f24:	bl	14d7c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   15f28:	mov	r3, r0
   15f2c:	cmp	r3, #0
   15f30:	beq	15f3c <flatcc_builder_start_struct@@Base+0x44>
   15f34:	mov	r3, #0
   15f38:	b	15f68 <flatcc_builder_start_struct@@Base+0x70>
   15f3c:	ldr	r3, [fp, #-8]
   15f40:	ldr	r3, [r3, #32]
   15f44:	mov	r2, #2
   15f48:	strh	r2, [r3, #14]
   15f4c:	mvn	r1, #3
   15f50:	ldr	r0, [fp, #-8]
   15f54:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   15f58:	ldr	r1, [fp, #-12]
   15f5c:	ldr	r0, [fp, #-8]
   15f60:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   15f64:	mov	r3, r0
   15f68:	mov	r0, r3
   15f6c:	sub	sp, fp, #4
   15f70:	ldr	fp, [sp]
   15f74:	add	sp, sp, #4
   15f78:	pop	{pc}		; (ldr pc, [sp], #4)

00015f7c <flatcc_builder_struct_edit@@Base>:
   15f7c:	push	{fp}		; (str fp, [sp, #-4]!)
   15f80:	add	fp, sp, #0
   15f84:	sub	sp, sp, #12
   15f88:	str	r0, [fp, #-8]
   15f8c:	ldr	r3, [fp, #-8]
   15f90:	ldr	r3, [r3, #16]
   15f94:	mov	r0, r3
   15f98:	add	sp, fp, #0
   15f9c:	pop	{fp}		; (ldr fp, [sp], #4)
   15fa0:	bx	lr

00015fa4 <flatcc_builder_end_struct@@Base>:
   15fa4:	str	fp, [sp, #-8]!
   15fa8:	str	lr, [sp, #4]
   15fac:	add	fp, sp, #4
   15fb0:	sub	sp, sp, #16
   15fb4:	str	r0, [fp, #-16]
   15fb8:	ldr	r3, [fp, #-16]
   15fbc:	ldr	r3, [r3, #32]
   15fc0:	ldrh	r3, [r3, #14]
   15fc4:	cmp	r3, #2
   15fc8:	beq	15fec <flatcc_builder_end_struct@@Base+0x48>
   15fcc:	ldr	r3, [pc, #112]	; 16044 <flatcc_builder_end_struct@@Base+0xa0>
   15fd0:	add	r3, pc, r3
   15fd4:	mov	r2, #872	; 0x368
   15fd8:	ldr	r1, [pc, #104]	; 16048 <flatcc_builder_end_struct@@Base+0xa4>
   15fdc:	add	r1, pc, r1
   15fe0:	ldr	r0, [pc, #100]	; 1604c <flatcc_builder_end_struct@@Base+0xa8>
   15fe4:	add	r0, pc, r0
   15fe8:	bl	1208c <__assert_fail@plt>
   15fec:	ldr	r3, [fp, #-16]
   15ff0:	ldr	r1, [r3, #16]
   15ff4:	ldr	r3, [fp, #-16]
   15ff8:	ldr	r2, [r3, #20]
   15ffc:	ldr	r3, [fp, #-16]
   16000:	ldrh	r3, [r3, #130]	; 0x82
   16004:	ldr	r0, [fp, #-16]
   16008:	bl	15a94 <flatcc_builder_create_struct@@Base>
   1600c:	str	r0, [fp, #-8]
   16010:	ldr	r3, [fp, #-8]
   16014:	cmp	r3, #0
   16018:	bne	16024 <flatcc_builder_end_struct@@Base+0x80>
   1601c:	mov	r3, #0
   16020:	b	16030 <flatcc_builder_end_struct@@Base+0x8c>
   16024:	ldr	r0, [fp, #-16]
   16028:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   1602c:	ldr	r3, [fp, #-8]
   16030:	mov	r0, r3
   16034:	sub	sp, fp, #4
   16038:	ldr	fp, [sp]
   1603c:	add	sp, sp, #4
   16040:	pop	{pc}		; (ldr pc, [sp], #4)
   16044:	ldrdeq	r5, [r0], -r4
   16048:	andeq	r5, r0, r0, lsr #3
   1604c:	muleq	r0, r4, r2
   16050:	str	fp, [sp, #-8]!
   16054:	str	lr, [sp, #4]
   16058:	add	fp, sp, #4
   1605c:	sub	sp, sp, #24
   16060:	str	r0, [fp, #-16]
   16064:	str	r1, [fp, #-20]	; 0xffffffec
   16068:	str	r2, [fp, #-24]	; 0xffffffe8
   1606c:	ldr	r3, [fp, #-16]
   16070:	ldr	r3, [r3, #32]
   16074:	ldr	r3, [r3, #20]
   16078:	str	r3, [fp, #-8]
   1607c:	ldr	r2, [fp, #-8]
   16080:	ldr	r3, [fp, #-20]	; 0xffffffec
   16084:	add	r3, r2, r3
   16088:	str	r3, [fp, #-12]
   1608c:	ldr	r2, [fp, #-8]
   16090:	ldr	r3, [fp, #-12]
   16094:	cmp	r2, r3
   16098:	bhi	160ac <flatcc_builder_end_struct@@Base+0x108>
   1609c:	ldr	r2, [fp, #-12]
   160a0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   160a4:	cmp	r2, r3
   160a8:	bls	160f4 <flatcc_builder_end_struct@@Base+0x150>
   160ac:	ldr	r2, [fp, #-8]
   160b0:	ldr	r3, [fp, #-12]
   160b4:	cmp	r2, r3
   160b8:	bhi	160cc <flatcc_builder_end_struct@@Base+0x128>
   160bc:	ldr	r2, [fp, #-12]
   160c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   160c4:	cmp	r2, r3
   160c8:	bls	160ec <flatcc_builder_end_struct@@Base+0x148>
   160cc:	ldr	r3, [pc, #72]	; 1611c <flatcc_builder_end_struct@@Base+0x178>
   160d0:	add	r3, pc, r3
   160d4:	mov	r2, #892	; 0x37c
   160d8:	ldr	r1, [pc, #64]	; 16120 <flatcc_builder_end_struct@@Base+0x17c>
   160dc:	add	r1, pc, r1
   160e0:	ldr	r0, [pc, #60]	; 16124 <flatcc_builder_end_struct@@Base+0x180>
   160e4:	add	r0, pc, r0
   160e8:	bl	1208c <__assert_fail@plt>
   160ec:	mvn	r3, #0
   160f0:	b	16108 <flatcc_builder_end_struct@@Base+0x164>
   160f4:	ldr	r3, [fp, #-16]
   160f8:	ldr	r3, [r3, #32]
   160fc:	ldr	r2, [fp, #-12]
   16100:	str	r2, [r3, #20]
   16104:	mov	r3, #0
   16108:	mov	r0, r3
   1610c:	sub	sp, fp, #4
   16110:	ldr	fp, [sp]
   16114:	add	sp, sp, #4
   16118:	pop	{pc}		; (ldr pc, [sp], #4)
   1611c:	strdeq	r5, [r0], -r0
   16120:	andeq	r5, r0, r0, lsr #1
   16124:	andeq	r5, r0, r0, asr #3

00016128 <flatcc_builder_extend_vector@@Base>:
   16128:	str	fp, [sp, #-8]!
   1612c:	str	lr, [sp, #4]
   16130:	add	fp, sp, #4
   16134:	sub	sp, sp, #8
   16138:	str	r0, [fp, #-8]
   1613c:	str	r1, [fp, #-12]
   16140:	ldr	r3, [fp, #-8]
   16144:	ldr	r3, [r3, #32]
   16148:	ldr	r3, [r3, #24]
   1614c:	mov	r2, r3
   16150:	ldr	r1, [fp, #-12]
   16154:	ldr	r0, [fp, #-8]
   16158:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   1615c:	mov	r3, r0
   16160:	cmp	r3, #0
   16164:	beq	16170 <flatcc_builder_extend_vector@@Base+0x48>
   16168:	mov	r3, #0
   1616c:	b	16194 <flatcc_builder_extend_vector@@Base+0x6c>
   16170:	ldr	r3, [fp, #-8]
   16174:	ldr	r3, [r3, #32]
   16178:	ldr	r3, [r3, #16]
   1617c:	ldr	r2, [fp, #-12]
   16180:	mul	r3, r2, r3
   16184:	mov	r1, r3
   16188:	ldr	r0, [fp, #-8]
   1618c:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   16190:	mov	r3, r0
   16194:	mov	r0, r3
   16198:	sub	sp, fp, #4
   1619c:	ldr	fp, [sp]
   161a0:	add	sp, sp, #4
   161a4:	pop	{pc}		; (ldr pc, [sp], #4)

000161a8 <flatcc_builder_vector_push@@Base>:
   161a8:	str	fp, [sp, #-8]!
   161ac:	str	lr, [sp, #4]
   161b0:	add	fp, sp, #4
   161b4:	sub	sp, sp, #8
   161b8:	str	r0, [fp, #-8]
   161bc:	str	r1, [fp, #-12]
   161c0:	ldr	r3, [fp, #-8]
   161c4:	ldr	r3, [r3, #32]
   161c8:	ldrh	r3, [r3, #14]
   161cc:	cmp	r3, #4
   161d0:	beq	161f4 <flatcc_builder_vector_push@@Base+0x4c>
   161d4:	ldr	r3, [pc, #208]	; 162ac <flatcc_builder_vector_push@@Base+0x104>
   161d8:	add	r3, pc, r3
   161dc:	movw	r2, #907	; 0x38b
   161e0:	ldr	r1, [pc, #200]	; 162b0 <flatcc_builder_vector_push@@Base+0x108>
   161e4:	add	r1, pc, r1
   161e8:	ldr	r0, [pc, #196]	; 162b4 <flatcc_builder_vector_push@@Base+0x10c>
   161ec:	add	r0, pc, r0
   161f0:	bl	1208c <__assert_fail@plt>
   161f4:	ldr	r3, [fp, #-8]
   161f8:	ldr	r3, [r3, #32]
   161fc:	ldr	r2, [r3, #20]
   16200:	ldr	r3, [fp, #-8]
   16204:	ldr	r3, [r3, #32]
   16208:	ldr	r3, [r3, #24]
   1620c:	cmp	r2, r3
   16210:	bls	1625c <flatcc_builder_vector_push@@Base+0xb4>
   16214:	ldr	r3, [fp, #-8]
   16218:	ldr	r3, [r3, #32]
   1621c:	ldr	r2, [r3, #20]
   16220:	ldr	r3, [fp, #-8]
   16224:	ldr	r3, [r3, #32]
   16228:	ldr	r3, [r3, #24]
   1622c:	cmp	r2, r3
   16230:	bls	16254 <flatcc_builder_vector_push@@Base+0xac>
   16234:	ldr	r3, [pc, #124]	; 162b8 <flatcc_builder_vector_push@@Base+0x110>
   16238:	add	r3, pc, r3
   1623c:	mov	r2, #908	; 0x38c
   16240:	ldr	r1, [pc, #116]	; 162bc <flatcc_builder_vector_push@@Base+0x114>
   16244:	add	r1, pc, r1
   16248:	ldr	r0, [pc, #112]	; 162c0 <flatcc_builder_vector_push@@Base+0x118>
   1624c:	add	r0, pc, r0
   16250:	bl	1208c <__assert_fail@plt>
   16254:	mov	r3, #0
   16258:	b	16298 <flatcc_builder_vector_push@@Base+0xf0>
   1625c:	ldr	r3, [fp, #-8]
   16260:	ldr	r3, [r3, #32]
   16264:	ldr	r2, [r3, #20]
   16268:	ldr	r3, [fp, #-8]
   1626c:	ldr	r3, [r3, #32]
   16270:	add	r2, r2, #1
   16274:	str	r2, [r3, #20]
   16278:	ldr	r3, [fp, #-8]
   1627c:	ldr	r3, [r3, #32]
   16280:	ldr	r3, [r3, #16]
   16284:	mov	r2, r3
   16288:	ldr	r1, [fp, #-12]
   1628c:	ldr	r0, [fp, #-8]
   16290:	bl	13e28 <flatcc_builder_default_alloc@@Base+0x420>
   16294:	mov	r3, r0
   16298:	mov	r0, r3
   1629c:	sub	sp, fp, #4
   162a0:	ldr	fp, [sp]
   162a4:	add	sp, sp, #4
   162a8:	pop	{pc}		; (ldr pc, [sp], #4)
   162ac:	strdeq	r5, [r0], -ip
   162b0:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   162b4:	ldrdeq	r5, [r0], -r4
   162b8:	muleq	r0, ip, r4
   162bc:	andeq	r4, r0, r8, lsr pc
   162c0:	andeq	r5, r0, r0, lsr #1

000162c4 <flatcc_builder_append_vector@@Base>:
   162c4:	str	fp, [sp, #-8]!
   162c8:	str	lr, [sp, #4]
   162cc:	add	fp, sp, #4
   162d0:	sub	sp, sp, #16
   162d4:	str	r0, [fp, #-8]
   162d8:	str	r1, [fp, #-12]
   162dc:	str	r2, [fp, #-16]
   162e0:	ldr	r3, [fp, #-8]
   162e4:	ldr	r3, [r3, #32]
   162e8:	ldrh	r3, [r3, #14]
   162ec:	cmp	r3, #4
   162f0:	beq	16314 <flatcc_builder_append_vector@@Base+0x50>
   162f4:	ldr	r3, [pc, #132]	; 16380 <flatcc_builder_append_vector@@Base+0xbc>
   162f8:	add	r3, pc, r3
   162fc:	movw	r2, #915	; 0x393
   16300:	ldr	r1, [pc, #124]	; 16384 <flatcc_builder_append_vector@@Base+0xc0>
   16304:	add	r1, pc, r1
   16308:	ldr	r0, [pc, #120]	; 16388 <flatcc_builder_append_vector@@Base+0xc4>
   1630c:	add	r0, pc, r0
   16310:	bl	1208c <__assert_fail@plt>
   16314:	ldr	r3, [fp, #-8]
   16318:	ldr	r3, [r3, #32]
   1631c:	ldr	r3, [r3, #24]
   16320:	mov	r2, r3
   16324:	ldr	r1, [fp, #-16]
   16328:	ldr	r0, [fp, #-8]
   1632c:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   16330:	mov	r3, r0
   16334:	cmp	r3, #0
   16338:	beq	16344 <flatcc_builder_append_vector@@Base+0x80>
   1633c:	mov	r3, #0
   16340:	b	1636c <flatcc_builder_append_vector@@Base+0xa8>
   16344:	ldr	r3, [fp, #-8]
   16348:	ldr	r3, [r3, #32]
   1634c:	ldr	r3, [r3, #16]
   16350:	ldr	r2, [fp, #-16]
   16354:	mul	r3, r2, r3
   16358:	mov	r2, r3
   1635c:	ldr	r1, [fp, #-12]
   16360:	ldr	r0, [fp, #-8]
   16364:	bl	13e28 <flatcc_builder_default_alloc@@Base+0x420>
   16368:	mov	r3, r0
   1636c:	mov	r0, r3
   16370:	sub	sp, fp, #4
   16374:	ldr	fp, [sp]
   16378:	add	sp, sp, #4
   1637c:	pop	{pc}		; (ldr pc, [sp], #4)
   16380:	strdeq	r5, [r0], -r8
   16384:	andeq	r4, r0, r8, ror lr
   16388:			; <UNDEFINED> instruction: 0x00004fb4

0001638c <flatcc_builder_extend_offset_vector@@Base>:
   1638c:	str	fp, [sp, #-8]!
   16390:	str	lr, [sp, #4]
   16394:	add	fp, sp, #4
   16398:	sub	sp, sp, #8
   1639c:	str	r0, [fp, #-8]
   163a0:	str	r1, [fp, #-12]
   163a4:	mvn	r2, #-1073741824	; 0xc0000000
   163a8:	ldr	r1, [fp, #-12]
   163ac:	ldr	r0, [fp, #-8]
   163b0:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   163b4:	mov	r3, r0
   163b8:	cmp	r3, #0
   163bc:	beq	163c8 <flatcc_builder_extend_offset_vector@@Base+0x3c>
   163c0:	mov	r3, #0
   163c4:	b	163e0 <flatcc_builder_extend_offset_vector@@Base+0x54>
   163c8:	ldr	r3, [fp, #-12]
   163cc:	lsl	r3, r3, #2
   163d0:	mov	r1, r3
   163d4:	ldr	r0, [fp, #-8]
   163d8:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   163dc:	mov	r3, r0
   163e0:	mov	r0, r3
   163e4:	sub	sp, fp, #4
   163e8:	ldr	fp, [sp]
   163ec:	add	sp, sp, #4
   163f0:	pop	{pc}		; (ldr pc, [sp], #4)

000163f4 <flatcc_builder_offset_vector_push@@Base>:
   163f4:	str	fp, [sp, #-8]!
   163f8:	str	lr, [sp, #4]
   163fc:	add	fp, sp, #4
   16400:	sub	sp, sp, #16
   16404:	str	r0, [fp, #-16]
   16408:	str	r1, [fp, #-20]	; 0xffffffec
   1640c:	ldr	r3, [fp, #-16]
   16410:	ldr	r3, [r3, #32]
   16414:	ldrh	r3, [r3, #14]
   16418:	cmp	r3, #5
   1641c:	beq	16440 <flatcc_builder_offset_vector_push@@Base+0x4c>
   16420:	ldr	r3, [pc, #152]	; 164c0 <flatcc_builder_offset_vector_push@@Base+0xcc>
   16424:	add	r3, pc, r3
   16428:	movw	r2, #934	; 0x3a6
   1642c:	ldr	r1, [pc, #144]	; 164c4 <flatcc_builder_offset_vector_push@@Base+0xd0>
   16430:	add	r1, pc, r1
   16434:	ldr	r0, [pc, #140]	; 164c8 <flatcc_builder_offset_vector_push@@Base+0xd4>
   16438:	add	r0, pc, r0
   1643c:	bl	1208c <__assert_fail@plt>
   16440:	ldr	r3, [fp, #-16]
   16444:	ldr	r3, [r3, #32]
   16448:	ldr	r3, [r3, #20]
   1644c:	cmn	r3, #-1073741823	; 0xc0000001
   16450:	bne	1645c <flatcc_builder_offset_vector_push@@Base+0x68>
   16454:	mov	r3, #0
   16458:	b	164ac <flatcc_builder_offset_vector_push@@Base+0xb8>
   1645c:	ldr	r3, [fp, #-16]
   16460:	ldr	r3, [r3, #32]
   16464:	ldr	r2, [r3, #20]
   16468:	ldr	r3, [fp, #-16]
   1646c:	ldr	r3, [r3, #32]
   16470:	add	r2, r2, #1
   16474:	str	r2, [r3, #20]
   16478:	mov	r1, #4
   1647c:	ldr	r0, [fp, #-16]
   16480:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   16484:	str	r0, [fp, #-8]
   16488:	ldr	r3, [fp, #-8]
   1648c:	cmp	r3, #0
   16490:	bne	1649c <flatcc_builder_offset_vector_push@@Base+0xa8>
   16494:	mov	r3, #0
   16498:	b	164ac <flatcc_builder_offset_vector_push@@Base+0xb8>
   1649c:	ldr	r3, [fp, #-8]
   164a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   164a4:	str	r2, [r3]
   164a8:	ldr	r3, [fp, #-8]
   164ac:	mov	r0, r3
   164b0:	sub	sp, fp, #4
   164b4:	ldr	fp, [sp]
   164b8:	add	sp, sp, #4
   164bc:	pop	{pc}		; (ldr pc, [sp], #4)
   164c0:	andeq	r5, r0, ip, ror #5
   164c4:	andeq	r4, r0, ip, asr #26
   164c8:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>

000164cc <flatcc_builder_append_offset_vector@@Base>:
   164cc:	str	fp, [sp, #-8]!
   164d0:	str	lr, [sp, #4]
   164d4:	add	fp, sp, #4
   164d8:	sub	sp, sp, #16
   164dc:	str	r0, [fp, #-8]
   164e0:	str	r1, [fp, #-12]
   164e4:	str	r2, [fp, #-16]
   164e8:	ldr	r3, [fp, #-8]
   164ec:	ldr	r3, [r3, #32]
   164f0:	ldrh	r3, [r3, #14]
   164f4:	cmp	r3, #5
   164f8:	beq	1651c <flatcc_builder_append_offset_vector@@Base+0x50>
   164fc:	ldr	r3, [pc, #108]	; 16570 <flatcc_builder_append_offset_vector@@Base+0xa4>
   16500:	add	r3, pc, r3
   16504:	mov	r2, #948	; 0x3b4
   16508:	ldr	r1, [pc, #100]	; 16574 <flatcc_builder_append_offset_vector@@Base+0xa8>
   1650c:	add	r1, pc, r1
   16510:	ldr	r0, [pc, #96]	; 16578 <flatcc_builder_append_offset_vector@@Base+0xac>
   16514:	add	r0, pc, r0
   16518:	bl	1208c <__assert_fail@plt>
   1651c:	mvn	r2, #-1073741824	; 0xc0000000
   16520:	ldr	r1, [fp, #-16]
   16524:	ldr	r0, [fp, #-8]
   16528:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   1652c:	mov	r3, r0
   16530:	cmp	r3, #0
   16534:	beq	16540 <flatcc_builder_append_offset_vector@@Base+0x74>
   16538:	mov	r3, #0
   1653c:	b	1655c <flatcc_builder_append_offset_vector@@Base+0x90>
   16540:	ldr	r3, [fp, #-16]
   16544:	lsl	r3, r3, #2
   16548:	mov	r2, r3
   1654c:	ldr	r1, [fp, #-12]
   16550:	ldr	r0, [fp, #-8]
   16554:	bl	13e28 <flatcc_builder_default_alloc@@Base+0x420>
   16558:	mov	r3, r0
   1655c:	mov	r0, r3
   16560:	sub	sp, fp, #4
   16564:	ldr	fp, [sp]
   16568:	add	sp, sp, #4
   1656c:	pop	{pc}		; (ldr pc, [sp], #4)
   16570:	andeq	r5, r0, r4, lsr r2
   16574:	andeq	r4, r0, r0, ror ip
   16578:	andeq	r4, r0, r8, lsl lr

0001657c <flatcc_builder_extend_string@@Base>:
   1657c:	str	fp, [sp, #-8]!
   16580:	str	lr, [sp, #4]
   16584:	add	fp, sp, #4
   16588:	sub	sp, sp, #8
   1658c:	str	r0, [fp, #-8]
   16590:	str	r1, [fp, #-12]
   16594:	ldr	r3, [fp, #-8]
   16598:	ldr	r3, [r3, #32]
   1659c:	ldrh	r3, [r3, #14]
   165a0:	cmp	r3, #6
   165a4:	beq	165c8 <flatcc_builder_extend_string@@Base+0x4c>
   165a8:	ldr	r3, [pc, #96]	; 16610 <flatcc_builder_extend_string@@Base+0x94>
   165ac:	add	r3, pc, r3
   165b0:	movw	r2, #957	; 0x3bd
   165b4:	ldr	r1, [pc, #88]	; 16614 <flatcc_builder_extend_string@@Base+0x98>
   165b8:	add	r1, pc, r1
   165bc:	ldr	r0, [pc, #84]	; 16618 <flatcc_builder_extend_string@@Base+0x9c>
   165c0:	add	r0, pc, r0
   165c4:	bl	1208c <__assert_fail@plt>
   165c8:	mvn	r2, #0
   165cc:	ldr	r1, [fp, #-12]
   165d0:	ldr	r0, [fp, #-8]
   165d4:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   165d8:	mov	r3, r0
   165dc:	cmp	r3, #0
   165e0:	beq	165ec <flatcc_builder_extend_string@@Base+0x70>
   165e4:	mov	r3, #0
   165e8:	b	165fc <flatcc_builder_extend_string@@Base+0x80>
   165ec:	ldr	r1, [fp, #-12]
   165f0:	ldr	r0, [fp, #-8]
   165f4:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   165f8:	mov	r3, r0
   165fc:	mov	r0, r3
   16600:	sub	sp, fp, #4
   16604:	ldr	fp, [sp]
   16608:	add	sp, sp, #4
   1660c:	pop	{pc}		; (ldr pc, [sp], #4)
   16610:	andeq	r5, r0, ip, lsr #3
   16614:	andeq	r4, r0, r4, asr #23
   16618:	andeq	r4, r0, r0, lsr #27

0001661c <flatcc_builder_append_string@@Base>:
   1661c:	str	fp, [sp, #-8]!
   16620:	str	lr, [sp, #4]
   16624:	add	fp, sp, #4
   16628:	sub	sp, sp, #16
   1662c:	str	r0, [fp, #-8]
   16630:	str	r1, [fp, #-12]
   16634:	str	r2, [fp, #-16]
   16638:	ldr	r3, [fp, #-8]
   1663c:	ldr	r3, [r3, #32]
   16640:	ldrh	r3, [r3, #14]
   16644:	cmp	r3, #6
   16648:	beq	1666c <flatcc_builder_append_string@@Base+0x50>
   1664c:	ldr	r3, [pc, #100]	; 166b8 <flatcc_builder_append_string@@Base+0x9c>
   16650:	add	r3, pc, r3
   16654:	movw	r2, #966	; 0x3c6
   16658:	ldr	r1, [pc, #92]	; 166bc <flatcc_builder_append_string@@Base+0xa0>
   1665c:	add	r1, pc, r1
   16660:	ldr	r0, [pc, #88]	; 166c0 <flatcc_builder_append_string@@Base+0xa4>
   16664:	add	r0, pc, r0
   16668:	bl	1208c <__assert_fail@plt>
   1666c:	mvn	r2, #0
   16670:	ldr	r1, [fp, #-16]
   16674:	ldr	r0, [fp, #-8]
   16678:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   1667c:	mov	r3, r0
   16680:	cmp	r3, #0
   16684:	beq	16690 <flatcc_builder_append_string@@Base+0x74>
   16688:	mov	r3, #0
   1668c:	b	166a4 <flatcc_builder_append_string@@Base+0x88>
   16690:	ldr	r2, [fp, #-16]
   16694:	ldr	r1, [fp, #-12]
   16698:	ldr	r0, [fp, #-8]
   1669c:	bl	13e28 <flatcc_builder_default_alloc@@Base+0x420>
   166a0:	mov	r3, r0
   166a4:	mov	r0, r3
   166a8:	sub	sp, fp, #4
   166ac:	ldr	fp, [sp]
   166b0:	add	sp, sp, #4
   166b4:	pop	{pc}		; (ldr pc, [sp], #4)
   166b8:	andeq	r5, r0, r8, lsr #2
   166bc:	andeq	r4, r0, r0, lsr #22
   166c0:	strdeq	r4, [r0], -ip

000166c4 <flatcc_builder_append_string_str@@Base>:
   166c4:	str	fp, [sp, #-8]!
   166c8:	str	lr, [sp, #4]
   166cc:	add	fp, sp, #4
   166d0:	sub	sp, sp, #8
   166d4:	str	r0, [fp, #-8]
   166d8:	str	r1, [fp, #-12]
   166dc:	ldr	r0, [fp, #-12]
   166e0:	bl	1202c <strlen@plt>
   166e4:	mov	r3, r0
   166e8:	mov	r2, r3
   166ec:	ldr	r1, [fp, #-12]
   166f0:	ldr	r0, [fp, #-8]
   166f4:	bl	1661c <flatcc_builder_append_string@@Base>
   166f8:	mov	r3, r0
   166fc:	mov	r0, r3
   16700:	sub	sp, fp, #4
   16704:	ldr	fp, [sp]
   16708:	add	sp, sp, #4
   1670c:	pop	{pc}		; (ldr pc, [sp], #4)

00016710 <flatcc_builder_append_string_strn@@Base>:
   16710:	str	fp, [sp, #-8]!
   16714:	str	lr, [sp, #4]
   16718:	add	fp, sp, #4
   1671c:	sub	sp, sp, #16
   16720:	str	r0, [fp, #-8]
   16724:	str	r1, [fp, #-12]
   16728:	str	r2, [fp, #-16]
   1672c:	ldr	r1, [fp, #-16]
   16730:	ldr	r0, [fp, #-12]
   16734:	bl	139a8 <main@@Base+0x1e0>
   16738:	mov	r3, r0
   1673c:	mov	r2, r3
   16740:	ldr	r1, [fp, #-12]
   16744:	ldr	r0, [fp, #-8]
   16748:	bl	1661c <flatcc_builder_append_string@@Base>
   1674c:	mov	r3, r0
   16750:	mov	r0, r3
   16754:	sub	sp, fp, #4
   16758:	ldr	fp, [sp]
   1675c:	add	sp, sp, #4
   16760:	pop	{pc}		; (ldr pc, [sp], #4)

00016764 <flatcc_builder_truncate_vector@@Base>:
   16764:	str	fp, [sp, #-8]!
   16768:	str	lr, [sp, #4]
   1676c:	add	fp, sp, #4
   16770:	sub	sp, sp, #8
   16774:	str	r0, [fp, #-8]
   16778:	str	r1, [fp, #-12]
   1677c:	ldr	r3, [fp, #-8]
   16780:	ldr	r3, [r3, #32]
   16784:	ldrh	r3, [r3, #14]
   16788:	cmp	r3, #4
   1678c:	beq	167b0 <flatcc_builder_truncate_vector@@Base+0x4c>
   16790:	ldr	r3, [pc, #200]	; 16860 <flatcc_builder_truncate_vector@@Base+0xfc>
   16794:	add	r3, pc, r3
   16798:	movw	r2, #985	; 0x3d9
   1679c:	ldr	r1, [pc, #192]	; 16864 <flatcc_builder_truncate_vector@@Base+0x100>
   167a0:	add	r1, pc, r1
   167a4:	ldr	r0, [pc, #188]	; 16868 <flatcc_builder_truncate_vector@@Base+0x104>
   167a8:	add	r0, pc, r0
   167ac:	bl	1208c <__assert_fail@plt>
   167b0:	ldr	r3, [fp, #-8]
   167b4:	ldr	r3, [r3, #32]
   167b8:	ldr	r3, [r3, #20]
   167bc:	ldr	r2, [fp, #-12]
   167c0:	cmp	r2, r3
   167c4:	bls	16808 <flatcc_builder_truncate_vector@@Base+0xa4>
   167c8:	ldr	r3, [fp, #-8]
   167cc:	ldr	r3, [r3, #32]
   167d0:	ldr	r3, [r3, #20]
   167d4:	ldr	r2, [fp, #-12]
   167d8:	cmp	r2, r3
   167dc:	bls	16800 <flatcc_builder_truncate_vector@@Base+0x9c>
   167e0:	ldr	r3, [pc, #132]	; 1686c <flatcc_builder_truncate_vector@@Base+0x108>
   167e4:	add	r3, pc, r3
   167e8:	movw	r2, #986	; 0x3da
   167ec:	ldr	r1, [pc, #124]	; 16870 <flatcc_builder_truncate_vector@@Base+0x10c>
   167f0:	add	r1, pc, r1
   167f4:	ldr	r0, [pc, #120]	; 16874 <flatcc_builder_truncate_vector@@Base+0x110>
   167f8:	add	r0, pc, r0
   167fc:	bl	1208c <__assert_fail@plt>
   16800:	mvn	r3, #0
   16804:	b	1684c <flatcc_builder_truncate_vector@@Base+0xe8>
   16808:	ldr	r3, [fp, #-8]
   1680c:	ldr	r3, [r3, #32]
   16810:	ldr	r1, [r3, #20]
   16814:	ldr	r3, [fp, #-8]
   16818:	ldr	r3, [r3, #32]
   1681c:	ldr	r2, [fp, #-12]
   16820:	sub	r2, r1, r2
   16824:	str	r2, [r3, #20]
   16828:	ldr	r3, [fp, #-8]
   1682c:	ldr	r3, [r3, #32]
   16830:	ldr	r3, [r3, #16]
   16834:	ldr	r2, [fp, #-12]
   16838:	mul	r3, r2, r3
   1683c:	mov	r1, r3
   16840:	ldr	r0, [fp, #-8]
   16844:	bl	13dc0 <flatcc_builder_default_alloc@@Base+0x3b8>
   16848:	mov	r3, #0
   1684c:	mov	r0, r3
   16850:	sub	sp, fp, #4
   16854:	ldr	fp, [sp]
   16858:	add	sp, sp, #4
   1685c:	pop	{pc}		; (ldr pc, [sp], #4)
   16860:	andeq	r5, r0, r4
   16864:	ldrdeq	r4, [r0], -ip
   16868:	andeq	r4, r0, r8, lsl fp
   1686c:			; <UNDEFINED> instruction: 0x00004fb4
   16870:	andeq	r4, r0, ip, lsl #19
   16874:	muleq	r0, r4, fp

00016878 <flatcc_builder_truncate_offset_vector@@Base>:
   16878:	str	fp, [sp, #-8]!
   1687c:	str	lr, [sp, #4]
   16880:	add	fp, sp, #4
   16884:	sub	sp, sp, #8
   16888:	str	r0, [fp, #-8]
   1688c:	str	r1, [fp, #-12]
   16890:	ldr	r3, [fp, #-8]
   16894:	ldr	r3, [r3, #32]
   16898:	ldrh	r3, [r3, #14]
   1689c:	cmp	r3, #5
   168a0:	beq	168c4 <flatcc_builder_truncate_offset_vector@@Base+0x4c>
   168a4:	ldr	r3, [pc, #200]	; 16974 <flatcc_builder_truncate_offset_vector@@Base+0xfc>
   168a8:	add	r3, pc, r3
   168ac:	movw	r2, #994	; 0x3e2
   168b0:	ldr	r1, [pc, #192]	; 16978 <flatcc_builder_truncate_offset_vector@@Base+0x100>
   168b4:	add	r1, pc, r1
   168b8:	ldr	r0, [pc, #188]	; 1697c <flatcc_builder_truncate_offset_vector@@Base+0x104>
   168bc:	add	r0, pc, r0
   168c0:	bl	1208c <__assert_fail@plt>
   168c4:	ldr	r3, [fp, #-8]
   168c8:	ldr	r3, [r3, #32]
   168cc:	ldr	r3, [r3, #20]
   168d0:	ldr	r2, [fp, #-12]
   168d4:	cmp	r2, r3
   168d8:	bls	1691c <flatcc_builder_truncate_offset_vector@@Base+0xa4>
   168dc:	ldr	r3, [fp, #-8]
   168e0:	ldr	r3, [r3, #32]
   168e4:	ldr	r3, [r3, #20]
   168e8:	ldr	r2, [fp, #-12]
   168ec:	cmp	r2, r3
   168f0:	bls	16914 <flatcc_builder_truncate_offset_vector@@Base+0x9c>
   168f4:	ldr	r3, [pc, #132]	; 16980 <flatcc_builder_truncate_offset_vector@@Base+0x108>
   168f8:	add	r3, pc, r3
   168fc:	movw	r2, #995	; 0x3e3
   16900:	ldr	r1, [pc, #124]	; 16984 <flatcc_builder_truncate_offset_vector@@Base+0x10c>
   16904:	add	r1, pc, r1
   16908:	ldr	r0, [pc, #120]	; 16988 <flatcc_builder_truncate_offset_vector@@Base+0x110>
   1690c:	add	r0, pc, r0
   16910:	bl	1208c <__assert_fail@plt>
   16914:	mvn	r3, #0
   16918:	b	16960 <flatcc_builder_truncate_offset_vector@@Base+0xe8>
   1691c:	ldr	r3, [fp, #-8]
   16920:	ldr	r3, [r3, #32]
   16924:	ldr	r1, [r3, #20]
   16928:	ldr	r3, [fp, #-8]
   1692c:	ldr	r3, [r3, #32]
   16930:	ldr	r2, [fp, #-12]
   16934:	sub	r2, r1, r2
   16938:	str	r2, [r3, #20]
   1693c:	ldr	r3, [fp, #-8]
   16940:	ldr	r3, [r3, #32]
   16944:	ldr	r3, [r3, #16]
   16948:	ldr	r2, [fp, #-12]
   1694c:	mul	r3, r2, r3
   16950:	mov	r1, r3
   16954:	ldr	r0, [fp, #-8]
   16958:	bl	13dc0 <flatcc_builder_default_alloc@@Base+0x3b8>
   1695c:	mov	r3, #0
   16960:	mov	r0, r3
   16964:	sub	sp, fp, #4
   16968:	ldr	fp, [sp]
   1696c:	add	sp, sp, #4
   16970:	pop	{pc}		; (ldr pc, [sp], #4)
   16974:	andeq	r4, r0, r0, lsl pc
   16978:	andeq	r4, r0, r8, asr #17
   1697c:	andeq	r4, r0, r0, ror sl
   16980:	andeq	r4, r0, r0, asr #29
   16984:	andeq	r4, r0, r8, ror r8
   16988:	andeq	r4, r0, r4, lsr #21

0001698c <flatcc_builder_truncate_string@@Base>:
   1698c:	str	fp, [sp, #-8]!
   16990:	str	lr, [sp, #4]
   16994:	add	fp, sp, #4
   16998:	sub	sp, sp, #8
   1699c:	str	r0, [fp, #-8]
   169a0:	str	r1, [fp, #-12]
   169a4:	ldr	r3, [fp, #-8]
   169a8:	ldr	r3, [r3, #32]
   169ac:	ldrh	r3, [r3, #14]
   169b0:	cmp	r3, #6
   169b4:	beq	169d8 <flatcc_builder_truncate_string@@Base+0x4c>
   169b8:	ldr	r3, [pc, #180]	; 16a74 <flatcc_builder_truncate_string@@Base+0xe8>
   169bc:	add	r3, pc, r3
   169c0:	movw	r2, #1003	; 0x3eb
   169c4:	ldr	r1, [pc, #172]	; 16a78 <flatcc_builder_truncate_string@@Base+0xec>
   169c8:	add	r1, pc, r1
   169cc:	ldr	r0, [pc, #168]	; 16a7c <flatcc_builder_truncate_string@@Base+0xf0>
   169d0:	add	r0, pc, r0
   169d4:	bl	1208c <__assert_fail@plt>
   169d8:	ldr	r3, [fp, #-8]
   169dc:	ldr	r3, [r3, #32]
   169e0:	ldr	r3, [r3, #20]
   169e4:	ldr	r2, [fp, #-12]
   169e8:	cmp	r2, r3
   169ec:	bls	16a30 <flatcc_builder_truncate_string@@Base+0xa4>
   169f0:	ldr	r3, [fp, #-8]
   169f4:	ldr	r3, [r3, #32]
   169f8:	ldr	r3, [r3, #20]
   169fc:	ldr	r2, [fp, #-12]
   16a00:	cmp	r2, r3
   16a04:	bls	16a28 <flatcc_builder_truncate_string@@Base+0x9c>
   16a08:	ldr	r3, [pc, #112]	; 16a80 <flatcc_builder_truncate_string@@Base+0xf4>
   16a0c:	add	r3, pc, r3
   16a10:	mov	r2, #1004	; 0x3ec
   16a14:	ldr	r1, [pc, #104]	; 16a84 <flatcc_builder_truncate_string@@Base+0xf8>
   16a18:	add	r1, pc, r1
   16a1c:	ldr	r0, [pc, #100]	; 16a88 <flatcc_builder_truncate_string@@Base+0xfc>
   16a20:	add	r0, pc, r0
   16a24:	bl	1208c <__assert_fail@plt>
   16a28:	mvn	r3, #0
   16a2c:	b	16a60 <flatcc_builder_truncate_string@@Base+0xd4>
   16a30:	ldr	r3, [fp, #-8]
   16a34:	ldr	r3, [r3, #32]
   16a38:	ldr	r1, [r3, #20]
   16a3c:	ldr	r3, [fp, #-8]
   16a40:	ldr	r3, [r3, #32]
   16a44:	ldr	r2, [fp, #-12]
   16a48:	sub	r2, r1, r2
   16a4c:	str	r2, [r3, #20]
   16a50:	ldr	r1, [fp, #-12]
   16a54:	ldr	r0, [fp, #-8]
   16a58:	bl	13dc0 <flatcc_builder_default_alloc@@Base+0x3b8>
   16a5c:	mov	r3, #0
   16a60:	mov	r0, r3
   16a64:	sub	sp, fp, #4
   16a68:	ldr	fp, [sp]
   16a6c:	add	sp, sp, #4
   16a70:	pop	{pc}		; (ldr pc, [sp], #4)
   16a74:	andeq	r4, r0, r4, lsr #28
   16a78:			; <UNDEFINED> instruction: 0x000047b4
   16a7c:	muleq	r0, r0, r9
   16a80:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   16a84:	andeq	r4, r0, r4, ror #14
   16a88:	andeq	r4, r0, ip, asr #19

00016a8c <flatcc_builder_start_vector@@Base>:
   16a8c:	str	fp, [sp, #-8]!
   16a90:	str	lr, [sp, #4]
   16a94:	add	fp, sp, #4
   16a98:	sub	sp, sp, #16
   16a9c:	str	r0, [fp, #-8]
   16aa0:	str	r1, [fp, #-12]
   16aa4:	str	r3, [fp, #-20]	; 0xffffffec
   16aa8:	mov	r3, r2
   16aac:	strh	r3, [fp, #-14]
   16ab0:	sub	r3, fp, #14
   16ab4:	mov	r1, #4
   16ab8:	mov	r0, r3
   16abc:	bl	14a08 <flatcc_builder_clear@@Base+0x10c>
   16ac0:	ldrh	r3, [fp, #-14]
   16ac4:	mov	r1, r3
   16ac8:	ldr	r0, [fp, #-8]
   16acc:	bl	14d7c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16ad0:	mov	r3, r0
   16ad4:	cmp	r3, #0
   16ad8:	beq	16ae4 <flatcc_builder_start_vector@@Base+0x58>
   16adc:	mvn	r3, #0
   16ae0:	b	16b34 <flatcc_builder_start_vector@@Base+0xa8>
   16ae4:	ldr	r3, [fp, #-8]
   16ae8:	ldr	r3, [r3, #32]
   16aec:	ldr	r2, [fp, #-12]
   16af0:	str	r2, [r3, #16]
   16af4:	ldr	r3, [fp, #-8]
   16af8:	ldr	r3, [r3, #32]
   16afc:	mov	r2, #0
   16b00:	str	r2, [r3, #20]
   16b04:	ldr	r3, [fp, #-8]
   16b08:	ldr	r3, [r3, #32]
   16b0c:	ldr	r2, [fp, #-20]	; 0xffffffec
   16b10:	str	r2, [r3, #24]
   16b14:	ldr	r3, [fp, #-8]
   16b18:	ldr	r3, [r3, #32]
   16b1c:	mov	r2, #4
   16b20:	strh	r2, [r3, #14]
   16b24:	mvn	r1, #3
   16b28:	ldr	r0, [fp, #-8]
   16b2c:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   16b30:	mov	r3, #0
   16b34:	mov	r0, r3
   16b38:	sub	sp, fp, #4
   16b3c:	ldr	fp, [sp]
   16b40:	add	sp, sp, #4
   16b44:	pop	{pc}		; (ldr pc, [sp], #4)

00016b48 <flatcc_builder_start_offset_vector@@Base>:
   16b48:	str	fp, [sp, #-8]!
   16b4c:	str	lr, [sp, #4]
   16b50:	add	fp, sp, #4
   16b54:	sub	sp, sp, #8
   16b58:	str	r0, [fp, #-8]
   16b5c:	mov	r1, #4
   16b60:	ldr	r0, [fp, #-8]
   16b64:	bl	14d7c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16b68:	mov	r3, r0
   16b6c:	cmp	r3, #0
   16b70:	beq	16b7c <flatcc_builder_start_offset_vector@@Base+0x34>
   16b74:	mvn	r3, #0
   16b78:	b	16bbc <flatcc_builder_start_offset_vector@@Base+0x74>
   16b7c:	ldr	r3, [fp, #-8]
   16b80:	ldr	r3, [r3, #32]
   16b84:	mov	r2, #4
   16b88:	str	r2, [r3, #16]
   16b8c:	ldr	r3, [fp, #-8]
   16b90:	ldr	r3, [r3, #32]
   16b94:	mov	r2, #0
   16b98:	str	r2, [r3, #20]
   16b9c:	ldr	r3, [fp, #-8]
   16ba0:	ldr	r3, [r3, #32]
   16ba4:	mov	r2, #5
   16ba8:	strh	r2, [r3, #14]
   16bac:	mvn	r1, #3
   16bb0:	ldr	r0, [fp, #-8]
   16bb4:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   16bb8:	mov	r3, #0
   16bbc:	mov	r0, r3
   16bc0:	sub	sp, fp, #4
   16bc4:	ldr	fp, [sp]
   16bc8:	add	sp, sp, #4
   16bcc:	pop	{pc}		; (ldr pc, [sp], #4)

00016bd0 <flatcc_builder_create_offset_vector@@Base>:
   16bd0:	str	fp, [sp, #-8]!
   16bd4:	str	lr, [sp, #4]
   16bd8:	add	fp, sp, #4
   16bdc:	sub	sp, sp, #24
   16be0:	str	r0, [fp, #-16]
   16be4:	str	r1, [fp, #-20]	; 0xffffffec
   16be8:	str	r2, [fp, #-24]	; 0xffffffe8
   16bec:	ldr	r0, [fp, #-16]
   16bf0:	bl	16b48 <flatcc_builder_start_offset_vector@@Base>
   16bf4:	mov	r3, r0
   16bf8:	cmp	r3, #0
   16bfc:	beq	16c08 <flatcc_builder_create_offset_vector@@Base+0x38>
   16c00:	mov	r3, #0
   16c04:	b	16c50 <flatcc_builder_create_offset_vector@@Base+0x80>
   16c08:	ldr	r1, [fp, #-24]	; 0xffffffe8
   16c0c:	ldr	r0, [fp, #-16]
   16c10:	bl	1638c <flatcc_builder_extend_offset_vector@@Base>
   16c14:	str	r0, [fp, #-8]
   16c18:	ldr	r3, [fp, #-8]
   16c1c:	cmp	r3, #0
   16c20:	bne	16c2c <flatcc_builder_create_offset_vector@@Base+0x5c>
   16c24:	mov	r3, #0
   16c28:	b	16c50 <flatcc_builder_create_offset_vector@@Base+0x80>
   16c2c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   16c30:	lsl	r3, r3, #2
   16c34:	mov	r2, r3
   16c38:	ldr	r1, [fp, #-20]	; 0xffffffec
   16c3c:	ldr	r0, [fp, #-8]
   16c40:	bl	11fcc <memcpy@plt>
   16c44:	ldr	r0, [fp, #-16]
   16c48:	bl	18250 <flatcc_builder_end_offset_vector@@Base>
   16c4c:	mov	r3, r0
   16c50:	mov	r0, r3
   16c54:	sub	sp, fp, #4
   16c58:	ldr	fp, [sp]
   16c5c:	add	sp, sp, #4
   16c60:	pop	{pc}		; (ldr pc, [sp], #4)

00016c64 <flatcc_builder_start_string@@Base>:
   16c64:	str	fp, [sp, #-8]!
   16c68:	str	lr, [sp, #4]
   16c6c:	add	fp, sp, #4
   16c70:	sub	sp, sp, #8
   16c74:	str	r0, [fp, #-8]
   16c78:	mov	r1, #1
   16c7c:	ldr	r0, [fp, #-8]
   16c80:	bl	14d7c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16c84:	mov	r3, r0
   16c88:	cmp	r3, #0
   16c8c:	beq	16c98 <flatcc_builder_start_string@@Base+0x34>
   16c90:	mvn	r3, #0
   16c94:	b	16cd8 <flatcc_builder_start_string@@Base+0x74>
   16c98:	ldr	r3, [fp, #-8]
   16c9c:	ldr	r3, [r3, #32]
   16ca0:	mov	r2, #1
   16ca4:	str	r2, [r3, #16]
   16ca8:	ldr	r3, [fp, #-8]
   16cac:	ldr	r3, [r3, #32]
   16cb0:	mov	r2, #0
   16cb4:	str	r2, [r3, #20]
   16cb8:	ldr	r3, [fp, #-8]
   16cbc:	ldr	r3, [r3, #32]
   16cc0:	mov	r2, #6
   16cc4:	strh	r2, [r3, #14]
   16cc8:	mvn	r1, #3
   16ccc:	ldr	r0, [fp, #-8]
   16cd0:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   16cd4:	mov	r3, #0
   16cd8:	mov	r0, r3
   16cdc:	sub	sp, fp, #4
   16ce0:	ldr	fp, [sp]
   16ce4:	add	sp, sp, #4
   16ce8:	pop	{pc}		; (ldr pc, [sp], #4)

00016cec <flatcc_builder_reserve_table@@Base>:
   16cec:	str	fp, [sp, #-8]!
   16cf0:	str	lr, [sp, #4]
   16cf4:	add	fp, sp, #4
   16cf8:	sub	sp, sp, #8
   16cfc:	str	r0, [fp, #-8]
   16d00:	str	r1, [fp, #-12]
   16d04:	ldr	r3, [fp, #-12]
   16d08:	cmp	r3, #0
   16d0c:	bge	16d30 <flatcc_builder_reserve_table@@Base+0x44>
   16d10:	ldr	r3, [pc, #60]	; 16d54 <flatcc_builder_reserve_table@@Base+0x68>
   16d14:	add	r3, pc, r3
   16d18:	movw	r2, #1065	; 0x429
   16d1c:	ldr	r1, [pc, #52]	; 16d58 <flatcc_builder_reserve_table@@Base+0x6c>
   16d20:	add	r1, pc, r1
   16d24:	ldr	r0, [pc, #48]	; 16d5c <flatcc_builder_reserve_table@@Base+0x70>
   16d28:	add	r0, pc, r0
   16d2c:	bl	1208c <__assert_fail@plt>
   16d30:	ldr	r1, [fp, #-12]
   16d34:	ldr	r0, [fp, #-8]
   16d38:	bl	141b8 <flatcc_builder_default_alloc@@Base+0x7b0>
   16d3c:	mov	r3, r0
   16d40:	mov	r0, r3
   16d44:	sub	sp, fp, #4
   16d48:	ldr	fp, [sp]
   16d4c:	add	sp, sp, #4
   16d50:	pop	{pc}		; (ldr pc, [sp], #4)
   16d54:	andeq	r4, r0, ip, ror #21
   16d58:	andeq	r4, r0, ip, asr r4
   16d5c:	andeq	r4, r0, r8, ror #13

00016d60 <flatcc_builder_start_table@@Base>:
   16d60:	str	fp, [sp, #-8]!
   16d64:	str	lr, [sp, #4]
   16d68:	add	fp, sp, #4
   16d6c:	sub	sp, sp, #8
   16d70:	str	r0, [fp, #-8]
   16d74:	str	r1, [fp, #-12]
   16d78:	mov	r1, #4
   16d7c:	ldr	r0, [fp, #-8]
   16d80:	bl	14d7c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   16d84:	mov	r3, r0
   16d88:	cmp	r3, #0
   16d8c:	beq	16d98 <flatcc_builder_start_table@@Base+0x38>
   16d90:	mvn	r3, #0
   16d94:	b	16e78 <flatcc_builder_start_table@@Base+0x118>
   16d98:	ldr	r3, [fp, #-8]
   16d9c:	ldr	r3, [r3, #4]
   16da0:	mov	r1, r3
   16da4:	ldr	r3, [fp, #-8]
   16da8:	ldr	r3, [r3, #52]	; 0x34
   16dac:	mov	r2, r3
   16db0:	ldr	r3, [fp, #-8]
   16db4:	ldr	r3, [r3, #32]
   16db8:	sub	r2, r1, r2
   16dbc:	str	r2, [r3, #16]
   16dc0:	ldr	r3, [fp, #-8]
   16dc4:	ldr	r3, [r3]
   16dc8:	mov	r1, r3
   16dcc:	ldr	r3, [fp, #-8]
   16dd0:	ldr	r3, [r3, #76]	; 0x4c
   16dd4:	mov	r2, r3
   16dd8:	ldr	r3, [fp, #-8]
   16ddc:	ldr	r3, [r3, #32]
   16de0:	sub	r2, r1, r2
   16de4:	str	r2, [r3, #20]
   16de8:	ldr	r3, [fp, #-8]
   16dec:	ldr	r3, [r3, #32]
   16df0:	ldr	r2, [fp, #-8]
   16df4:	ldr	r2, [r2, #12]
   16df8:	str	r2, [r3, #24]
   16dfc:	ldr	r3, [fp, #-8]
   16e00:	ldr	r3, [r3, #32]
   16e04:	ldr	r2, [fp, #-8]
   16e08:	ldrh	r2, [r2, #8]
   16e0c:	strh	r2, [r3, #28]
   16e10:	ldr	r3, [fp, #-8]
   16e14:	mov	r2, #0
   16e18:	str	r2, [r3, #12]
   16e1c:	ldr	r2, [fp, #-8]
   16e20:	movw	r3, #15186	; 0x3b52
   16e24:	movt	r3, #12137	; 0x2f69
   16e28:	str	r3, [r2, #12]
   16e2c:	ldr	r3, [fp, #-8]
   16e30:	mov	r2, #0
   16e34:	strh	r2, [r3, #8]
   16e38:	ldr	r3, [fp, #-8]
   16e3c:	ldr	r3, [r3, #32]
   16e40:	mov	r2, #3
   16e44:	strh	r2, [r3, #14]
   16e48:	ldr	r1, [fp, #-12]
   16e4c:	ldr	r0, [fp, #-8]
   16e50:	bl	141b8 <flatcc_builder_default_alloc@@Base+0x7b0>
   16e54:	mov	r3, r0
   16e58:	cmp	r3, #0
   16e5c:	beq	16e68 <flatcc_builder_start_table@@Base+0x108>
   16e60:	mvn	r3, #0
   16e64:	b	16e78 <flatcc_builder_start_table@@Base+0x118>
   16e68:	movw	r1, #65532	; 0xfffc
   16e6c:	ldr	r0, [fp, #-8]
   16e70:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   16e74:	mov	r3, #0
   16e78:	mov	r0, r3
   16e7c:	sub	sp, fp, #4
   16e80:	ldr	fp, [sp]
   16e84:	add	sp, sp, #4
   16e88:	pop	{pc}		; (ldr pc, [sp], #4)

00016e8c <flatcc_builder_create_vtable@@Base>:
   16e8c:	str	fp, [sp, #-8]!
   16e90:	str	lr, [sp, #4]
   16e94:	add	fp, sp, #4
   16e98:	sub	sp, sp, #96	; 0x60
   16e9c:	str	r0, [fp, #-88]	; 0xffffffa8
   16ea0:	str	r1, [fp, #-92]	; 0xffffffa4
   16ea4:	mov	r3, r2
   16ea8:	strh	r3, [fp, #-94]	; 0xffffffa2
   16eac:	mov	r3, #0
   16eb0:	str	r3, [fp, #-80]	; 0xffffffb0
   16eb4:	mov	r3, #0
   16eb8:	str	r3, [fp, #-76]	; 0xffffffb4
   16ebc:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   16ec0:	cmp	r3, #0
   16ec4:	beq	16f1c <flatcc_builder_create_vtable@@Base+0x90>
   16ec8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   16ecc:	ldrh	r3, [fp, #-94]	; 0xffffffa2
   16ed0:	add	r3, r2, r3
   16ed4:	str	r3, [fp, #-80]	; 0xffffffb0
   16ed8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16edc:	add	r3, r3, #1
   16ee0:	lsl	r3, r3, #3
   16ee4:	sub	r2, fp, #4
   16ee8:	add	r3, r2, r3
   16eec:	ldr	r2, [fp, #-92]	; 0xffffffa4
   16ef0:	str	r2, [r3, #-76]	; 0xffffffb4
   16ef4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16ef8:	ldrh	r2, [fp, #-94]	; 0xffffffa2
   16efc:	add	r3, r3, #1
   16f00:	lsl	r3, r3, #3
   16f04:	sub	r1, fp, #4
   16f08:	add	r3, r1, r3
   16f0c:	str	r2, [r3, #-72]	; 0xffffffb8
   16f10:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16f14:	add	r3, r3, #1
   16f18:	str	r3, [fp, #-76]	; 0xffffffb4
   16f1c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16f20:	ldr	r3, [r3, #152]	; 0x98
   16f24:	cmp	r3, #0
   16f28:	bne	16f64 <flatcc_builder_create_vtable@@Base+0xd8>
   16f2c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   16f30:	ldr	r3, [r3, #180]	; 0xb4
   16f34:	cmp	r3, #0
   16f38:	bne	16f64 <flatcc_builder_create_vtable@@Base+0xd8>
   16f3c:	sub	r3, fp, #80	; 0x50
   16f40:	mov	r1, r3
   16f44:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16f48:	bl	151d0 <flatcc_builder_get_user_frame_ptr@@Base+0x488>
   16f4c:	str	r0, [fp, #-8]
   16f50:	ldr	r3, [fp, #-8]
   16f54:	cmp	r3, #0
   16f58:	bne	16f98 <flatcc_builder_create_vtable@@Base+0x10c>
   16f5c:	mov	r3, #0
   16f60:	b	16f9c <flatcc_builder_create_vtable@@Base+0x110>
   16f64:	sub	r3, fp, #80	; 0x50
   16f68:	mov	r1, r3
   16f6c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   16f70:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   16f74:	str	r0, [fp, #-8]
   16f78:	ldr	r3, [fp, #-8]
   16f7c:	cmp	r3, #0
   16f80:	bne	16f8c <flatcc_builder_create_vtable@@Base+0x100>
   16f84:	mov	r3, #0
   16f88:	b	16f9c <flatcc_builder_create_vtable@@Base+0x110>
   16f8c:	ldr	r3, [fp, #-8]
   16f90:	add	r3, r3, #1
   16f94:	str	r3, [fp, #-8]
   16f98:	ldr	r3, [fp, #-8]
   16f9c:	mov	r0, r3
   16fa0:	sub	sp, fp, #4
   16fa4:	ldr	fp, [sp]
   16fa8:	add	sp, sp, #4
   16fac:	pop	{pc}		; (ldr pc, [sp], #4)

00016fb0 <flatcc_builder_create_cached_vtable@@Base>:
   16fb0:	str	fp, [sp, #-8]!
   16fb4:	str	lr, [sp, #4]
   16fb8:	add	fp, sp, #4
   16fbc:	sub	sp, sp, #48	; 0x30
   16fc0:	str	r0, [fp, #-32]	; 0xffffffe0
   16fc4:	str	r1, [fp, #-36]	; 0xffffffdc
   16fc8:	str	r3, [fp, #-44]	; 0xffffffd4
   16fcc:	mov	r3, r2
   16fd0:	strh	r3, [fp, #-38]	; 0xffffffda
   16fd4:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16fd8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16fdc:	bl	14440 <flatcc_builder_default_alloc@@Base+0xa38>
   16fe0:	str	r0, [fp, #-20]	; 0xffffffec
   16fe4:	ldr	r3, [fp, #-20]	; 0xffffffec
   16fe8:	cmp	r3, #0
   16fec:	bne	16ff8 <flatcc_builder_create_cached_vtable@@Base+0x48>
   16ff0:	mov	r3, #0
   16ff4:	b	172bc <flatcc_builder_create_cached_vtable@@Base+0x30c>
   16ff8:	ldr	r3, [fp, #-20]	; 0xffffffec
   16ffc:	str	r3, [fp, #-12]
   17000:	ldr	r3, [fp, #-12]
   17004:	ldr	r3, [r3]
   17008:	str	r3, [fp, #-16]
   1700c:	mov	r3, #0
   17010:	str	r3, [fp, #-8]
   17014:	b	17118 <flatcc_builder_create_cached_vtable@@Base+0x168>
   17018:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1701c:	ldr	r2, [r3, #100]	; 0x64
   17020:	ldr	r3, [fp, #-16]
   17024:	add	r3, r2, r3
   17028:	str	r3, [fp, #-24]	; 0xffffffe8
   1702c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17030:	ldr	r2, [r3, #68]	; 0x44
   17034:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17038:	ldr	r3, [r3, #8]
   1703c:	add	r3, r2, r3
   17040:	str	r3, [fp, #-28]	; 0xffffffe4
   17044:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17048:	ldrh	r3, [r3]
   1704c:	ldrh	r2, [fp, #-38]	; 0xffffffda
   17050:	cmp	r2, r3
   17054:	bne	17078 <flatcc_builder_create_cached_vtable@@Base+0xc8>
   17058:	ldrh	r3, [fp, #-38]	; 0xffffffda
   1705c:	mov	r2, r3
   17060:	ldr	r1, [fp, #-28]	; 0xffffffe4
   17064:	ldr	r0, [fp, #-36]	; 0xffffffdc
   17068:	bl	11fd8 <memcmp@plt>
   1706c:	mov	r3, r0
   17070:	cmp	r3, #0
   17074:	beq	17094 <flatcc_builder_create_cached_vtable@@Base+0xe4>
   17078:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1707c:	add	r3, r3, #12
   17080:	str	r3, [fp, #-12]
   17084:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17088:	ldr	r3, [r3, #12]
   1708c:	str	r3, [fp, #-16]
   17090:	b	17118 <flatcc_builder_create_cached_vtable@@Base+0x168>
   17094:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17098:	ldr	r2, [r3, #4]
   1709c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   170a0:	ldr	r3, [r3, #152]	; 0x98
   170a4:	cmp	r2, r3
   170a8:	beq	170d0 <flatcc_builder_create_cached_vtable@@Base+0x120>
   170ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170b0:	str	r3, [fp, #-8]
   170b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170b8:	add	r3, r3, #12
   170bc:	str	r3, [fp, #-12]
   170c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170c4:	ldr	r3, [r3, #12]
   170c8:	str	r3, [fp, #-16]
   170cc:	b	17118 <flatcc_builder_create_cached_vtable@@Base+0x168>
   170d0:	ldr	r2, [fp, #-12]
   170d4:	ldr	r3, [fp, #-20]	; 0xffffffec
   170d8:	cmp	r2, r3
   170dc:	beq	1710c <flatcc_builder_create_cached_vtable@@Base+0x15c>
   170e0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170e4:	ldr	r2, [r3, #12]
   170e8:	ldr	r3, [fp, #-12]
   170ec:	str	r2, [r3]
   170f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   170f4:	ldr	r2, [r3]
   170f8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   170fc:	str	r2, [r3, #12]
   17100:	ldr	r3, [fp, #-20]	; 0xffffffec
   17104:	ldr	r2, [fp, #-16]
   17108:	str	r2, [r3]
   1710c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17110:	ldr	r3, [r3]
   17114:	b	172bc <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17118:	ldr	r3, [fp, #-16]
   1711c:	cmp	r3, #0
   17120:	bne	17018 <flatcc_builder_create_cached_vtable@@Base+0x68>
   17124:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17128:	ldr	r2, [r3, #124]	; 0x7c
   1712c:	mov	r3, #0
   17130:	str	r3, [sp]
   17134:	mov	r3, #16
   17138:	mov	r1, #6
   1713c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17140:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   17144:	str	r0, [fp, #-24]	; 0xffffffe8
   17148:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1714c:	cmp	r3, #0
   17150:	bne	1715c <flatcc_builder_create_cached_vtable@@Base+0x1ac>
   17154:	mov	r3, #0
   17158:	b	172bc <flatcc_builder_create_cached_vtable@@Base+0x30c>
   1715c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17160:	ldr	r3, [r3, #124]	; 0x7c
   17164:	str	r3, [fp, #-16]
   17168:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1716c:	ldr	r3, [r3, #124]	; 0x7c
   17170:	add	r2, r3, #16
   17174:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17178:	str	r2, [r3, #124]	; 0x7c
   1717c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17180:	ldr	r2, [r3, #152]	; 0x98
   17184:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17188:	str	r2, [r3, #4]
   1718c:	ldr	r3, [fp, #-20]	; 0xffffffec
   17190:	ldr	r2, [r3]
   17194:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17198:	str	r2, [r3, #12]
   1719c:	ldr	r3, [fp, #-20]	; 0xffffffec
   171a0:	ldr	r2, [fp, #-16]
   171a4:	str	r2, [r3]
   171a8:	ldrh	r3, [fp, #-38]	; 0xffffffda
   171ac:	mov	r2, r3
   171b0:	ldr	r1, [fp, #-36]	; 0xffffffdc
   171b4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   171b8:	bl	16e8c <flatcc_builder_create_vtable@@Base>
   171bc:	mov	r2, r0
   171c0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171c4:	str	r2, [r3]
   171c8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171cc:	ldr	r3, [r3]
   171d0:	cmp	r3, #0
   171d4:	bne	171e0 <flatcc_builder_create_cached_vtable@@Base+0x230>
   171d8:	mov	r3, #0
   171dc:	b	172bc <flatcc_builder_create_cached_vtable@@Base+0x30c>
   171e0:	ldr	r3, [fp, #-8]
   171e4:	cmp	r3, #0
   171e8:	beq	17200 <flatcc_builder_create_cached_vtable@@Base+0x250>
   171ec:	ldr	r3, [fp, #-8]
   171f0:	ldr	r2, [r3, #8]
   171f4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   171f8:	str	r2, [r3, #8]
   171fc:	b	172b4 <flatcc_builder_create_cached_vtable@@Base+0x304>
   17200:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17204:	ldr	r3, [r3, #172]	; 0xac
   17208:	cmp	r3, #0
   1720c:	beq	1723c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   17210:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17214:	ldr	r2, [r3, #172]	; 0xac
   17218:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1721c:	ldr	r1, [r3, #120]	; 0x78
   17220:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17224:	add	r3, r1, r3
   17228:	cmp	r2, r3
   1722c:	bcs	1723c <flatcc_builder_create_cached_vtable@@Base+0x28c>
   17230:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17234:	bl	144c4 <flatcc_builder_flush_vtable_cache@@Base>
   17238:	b	172b4 <flatcc_builder_create_cached_vtable@@Base+0x304>
   1723c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17240:	ldr	r2, [r3, #120]	; 0x78
   17244:	ldrh	r1, [fp, #-38]	; 0xffffffda
   17248:	mov	r3, #0
   1724c:	str	r3, [sp]
   17250:	mov	r3, r1
   17254:	mov	r1, #2
   17258:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1725c:	bl	140cc <flatcc_builder_default_alloc@@Base+0x6c4>
   17260:	str	r0, [fp, #-28]	; 0xffffffe4
   17264:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17268:	cmp	r3, #0
   1726c:	bne	17278 <flatcc_builder_create_cached_vtable@@Base+0x2c8>
   17270:	mvn	r3, #0
   17274:	b	172bc <flatcc_builder_create_cached_vtable@@Base+0x30c>
   17278:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1727c:	ldr	r2, [r3, #120]	; 0x78
   17280:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17284:	str	r2, [r3, #8]
   17288:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1728c:	ldr	r2, [r3, #120]	; 0x78
   17290:	ldrh	r3, [fp, #-38]	; 0xffffffda
   17294:	add	r2, r2, r3
   17298:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1729c:	str	r2, [r3, #120]	; 0x78
   172a0:	ldrh	r3, [fp, #-38]	; 0xffffffda
   172a4:	mov	r2, r3
   172a8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   172ac:	ldr	r0, [fp, #-28]	; 0xffffffe4
   172b0:	bl	11fcc <memcpy@plt>
   172b4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   172b8:	ldr	r3, [r3]
   172bc:	mov	r0, r3
   172c0:	sub	sp, fp, #4
   172c4:	ldr	fp, [sp]
   172c8:	add	sp, sp, #4
   172cc:	pop	{pc}		; (ldr pc, [sp], #4)

000172d0 <flatcc_builder_create_table@@Base>:
   172d0:	str	r4, [sp, #-12]!
   172d4:	str	fp, [sp, #4]
   172d8:	str	lr, [sp, #8]
   172dc:	add	fp, sp, #8
   172e0:	sub	sp, sp, #124	; 0x7c
   172e4:	str	r0, [fp, #-120]	; 0xffffff88
   172e8:	str	r1, [fp, #-124]	; 0xffffff84
   172ec:	str	r2, [fp, #-128]	; 0xffffff80
   172f0:	strh	r3, [fp, #-130]	; 0xffffff7e
   172f4:	ldr	r4, [pc, #740]	; 175e0 <flatcc_builder_create_table@@Base+0x310>
   172f8:	add	r4, pc, r4
   172fc:	ldr	r3, [fp, #8]
   17300:	cmp	r3, #0
   17304:	bge	17328 <flatcc_builder_create_table@@Base+0x58>
   17308:	ldr	r3, [pc, #724]	; 175e4 <flatcc_builder_create_table@@Base+0x314>
   1730c:	add	r3, pc, r3
   17310:	movw	r2, #1237	; 0x4d5
   17314:	ldr	r1, [pc, #716]	; 175e8 <flatcc_builder_create_table@@Base+0x318>
   17318:	add	r1, pc, r1
   1731c:	ldr	r0, [pc, #712]	; 175ec <flatcc_builder_create_table@@Base+0x31c>
   17320:	add	r0, pc, r0
   17324:	bl	1208c <__assert_fail@plt>
   17328:	ldr	r3, [fp, #12]
   1732c:	and	r3, r3, #1
   17330:	cmp	r3, #0
   17334:	bne	17358 <flatcc_builder_create_table@@Base+0x88>
   17338:	ldr	r3, [pc, #688]	; 175f0 <flatcc_builder_create_table@@Base+0x320>
   1733c:	add	r3, pc, r3
   17340:	movw	r2, #1243	; 0x4db
   17344:	ldr	r1, [pc, #680]	; 175f4 <flatcc_builder_create_table@@Base+0x324>
   17348:	add	r1, pc, r1
   1734c:	ldr	r0, [pc, #676]	; 175f8 <flatcc_builder_create_table@@Base+0x328>
   17350:	add	r0, pc, r0
   17354:	bl	1208c <__assert_fail@plt>
   17358:	sub	r3, fp, #130	; 0x82
   1735c:	mov	r1, #4
   17360:	mov	r0, r3
   17364:	bl	14a08 <flatcc_builder_clear@@Base+0x10c>
   17368:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   1736c:	mov	r1, r3
   17370:	ldr	r0, [fp, #-120]	; 0xffffff88
   17374:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   17378:	ldrh	r3, [fp, #-130]	; 0xffffff7e
   1737c:	mov	r2, r3
   17380:	ldr	r1, [fp, #-128]	; 0xffffff80
   17384:	ldr	r0, [fp, #-120]	; 0xffffff88
   17388:	bl	1503c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1738c:	str	r0, [fp, #-20]	; 0xffffffec
   17390:	ldr	r3, [fp, #-120]	; 0xffffff88
   17394:	ldr	r3, [r3, #136]	; 0x88
   17398:	mov	r1, r3
   1739c:	ldr	r2, [fp, #-20]	; 0xffffffec
   173a0:	ldr	r3, [fp, #-128]	; 0xffffff80
   173a4:	add	r3, r2, r3
   173a8:	sub	r3, r1, r3
   173ac:	sub	r3, r3, #4
   173b0:	str	r3, [fp, #-24]	; 0xffffffe8
   173b4:	ldr	r3, [fp, #12]
   173b8:	sub	r3, r3, #1
   173bc:	str	r3, [fp, #-28]	; 0xffffffe4
   173c0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   173c4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   173c8:	sub	r3, r2, r3
   173cc:	str	r3, [fp, #-32]	; 0xffffffe0
   173d0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   173d4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   173d8:	sub	r3, r2, r3
   173dc:	ldr	r2, [fp, #-28]	; 0xffffffe4
   173e0:	cmp	r2, r3
   173e4:	beq	173f0 <flatcc_builder_create_table@@Base+0x120>
   173e8:	mvn	r3, #0
   173ec:	b	175c8 <flatcc_builder_create_table@@Base+0x2f8>
   173f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173f4:	bl	138b8 <main@@Base+0xf0>
   173f8:	mov	r3, r0
   173fc:	str	r3, [fp, #-44]	; 0xffffffd4
   17400:	mov	r3, #0
   17404:	str	r3, [fp, #-16]
   17408:	b	17480 <flatcc_builder_create_table@@Base+0x1b0>
   1740c:	ldr	r3, [fp, #-16]
   17410:	lsl	r3, r3, #1
   17414:	ldr	r2, [fp, #4]
   17418:	add	r3, r2, r3
   1741c:	ldrh	r3, [r3]
   17420:	mov	r2, r3
   17424:	ldr	r3, [fp, #-124]	; 0xffffff84
   17428:	add	r3, r2, r3
   1742c:	str	r3, [fp, #-36]	; 0xffffffdc
   17430:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17434:	ldr	r2, [r3]
   17438:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1743c:	sub	r3, r2, r3
   17440:	ldr	r2, [fp, #-16]
   17444:	lsl	r2, r2, #1
   17448:	ldr	r1, [fp, #4]
   1744c:	add	r2, r1, r2
   17450:	ldrh	r2, [r2]
   17454:	sub	r3, r3, r2
   17458:	sub	r3, r3, #4
   1745c:	str	r3, [fp, #-40]	; 0xffffffd8
   17460:	ldr	r0, [fp, #-40]	; 0xffffffd8
   17464:	bl	138b8 <main@@Base+0xf0>
   17468:	mov	r2, r0
   1746c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   17470:	str	r2, [r3]
   17474:	ldr	r3, [fp, #-16]
   17478:	add	r3, r3, #1
   1747c:	str	r3, [fp, #-16]
   17480:	ldr	r2, [fp, #-16]
   17484:	ldr	r3, [fp, #8]
   17488:	cmp	r2, r3
   1748c:	blt	1740c <flatcc_builder_create_table@@Base+0x13c>
   17490:	mov	r3, #0
   17494:	str	r3, [fp, #-116]	; 0xffffff8c
   17498:	mov	r3, #0
   1749c:	str	r3, [fp, #-112]	; 0xffffff90
   174a0:	ldr	r3, [fp, #-116]	; 0xffffff8c
   174a4:	add	r3, r3, #4
   174a8:	str	r3, [fp, #-116]	; 0xffffff8c
   174ac:	ldr	r3, [fp, #-112]	; 0xffffff90
   174b0:	add	r3, r3, #1
   174b4:	lsl	r3, r3, #3
   174b8:	sub	r2, fp, #12
   174bc:	add	r3, r2, r3
   174c0:	sub	r2, fp, #44	; 0x2c
   174c4:	str	r2, [r3, #-104]	; 0xffffff98
   174c8:	ldr	r3, [fp, #-112]	; 0xffffff90
   174cc:	add	r3, r3, #1
   174d0:	lsl	r3, r3, #3
   174d4:	sub	r2, fp, #12
   174d8:	add	r3, r2, r3
   174dc:	mov	r2, #4
   174e0:	str	r2, [r3, #-100]	; 0xffffff9c
   174e4:	ldr	r3, [fp, #-112]	; 0xffffff90
   174e8:	add	r3, r3, #1
   174ec:	str	r3, [fp, #-112]	; 0xffffff90
   174f0:	ldr	r3, [fp, #-128]	; 0xffffff80
   174f4:	cmp	r3, #0
   174f8:	beq	17550 <flatcc_builder_create_table@@Base+0x280>
   174fc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17500:	ldr	r3, [fp, #-128]	; 0xffffff80
   17504:	add	r3, r2, r3
   17508:	str	r3, [fp, #-116]	; 0xffffff8c
   1750c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17510:	add	r3, r3, #1
   17514:	lsl	r3, r3, #3
   17518:	sub	r2, fp, #12
   1751c:	add	r3, r2, r3
   17520:	ldr	r2, [fp, #-124]	; 0xffffff84
   17524:	str	r2, [r3, #-104]	; 0xffffff98
   17528:	ldr	r3, [fp, #-112]	; 0xffffff90
   1752c:	add	r3, r3, #1
   17530:	lsl	r3, r3, #3
   17534:	sub	r2, fp, #12
   17538:	add	r3, r2, r3
   1753c:	ldr	r2, [fp, #-128]	; 0xffffff80
   17540:	str	r2, [r3, #-100]	; 0xffffff9c
   17544:	ldr	r3, [fp, #-112]	; 0xffffff90
   17548:	add	r3, r3, #1
   1754c:	str	r3, [fp, #-112]	; 0xffffff90
   17550:	ldr	r3, [fp, #-20]	; 0xffffffec
   17554:	cmp	r3, #0
   17558:	beq	175b4 <flatcc_builder_create_table@@Base+0x2e4>
   1755c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17560:	ldr	r3, [fp, #-20]	; 0xffffffec
   17564:	add	r3, r2, r3
   17568:	str	r3, [fp, #-116]	; 0xffffff8c
   1756c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17570:	add	r3, r3, #1
   17574:	lsl	r3, r3, #3
   17578:	sub	r2, fp, #12
   1757c:	add	r3, r2, r3
   17580:	ldr	r2, [pc, #116]	; 175fc <flatcc_builder_create_table@@Base+0x32c>
   17584:	ldr	r2, [r4, r2]
   17588:	str	r2, [r3, #-104]	; 0xffffff98
   1758c:	ldr	r3, [fp, #-112]	; 0xffffff90
   17590:	add	r3, r3, #1
   17594:	lsl	r3, r3, #3
   17598:	sub	r2, fp, #12
   1759c:	add	r3, r2, r3
   175a0:	ldr	r2, [fp, #-20]	; 0xffffffec
   175a4:	str	r2, [r3, #-100]	; 0xffffff9c
   175a8:	ldr	r3, [fp, #-112]	; 0xffffff90
   175ac:	add	r3, r3, #1
   175b0:	str	r3, [fp, #-112]	; 0xffffff90
   175b4:	sub	r3, fp, #116	; 0x74
   175b8:	mov	r1, r3
   175bc:	ldr	r0, [fp, #-120]	; 0xffffff88
   175c0:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   175c4:	mov	r3, r0
   175c8:	mov	r0, r3
   175cc:	sub	sp, fp, #8
   175d0:	ldr	r4, [sp]
   175d4:	ldr	fp, [sp, #4]
   175d8:	add	sp, sp, #8
   175dc:	pop	{pc}		; (ldr pc, [sp], #4)
   175e0:	andeq	r4, r1, r0, lsl #26
   175e4:	andeq	r4, r0, r4, lsl r5
   175e8:	andeq	r3, r0, r4, ror #28
   175ec:	strdeq	r4, [r0], -ip
   175f0:	andeq	r4, r0, r4, ror #9
   175f4:	andeq	r3, r0, r4, lsr lr
   175f8:	andeq	r4, r0, r0, ror #1
   175fc:	andeq	r0, r0, r8, asr r0

00017600 <flatcc_builder_check_required_field@@Base>:
   17600:	str	fp, [sp, #-8]!
   17604:	str	lr, [sp, #4]
   17608:	add	fp, sp, #4
   1760c:	sub	sp, sp, #8
   17610:	str	r0, [fp, #-8]
   17614:	mov	r3, r1
   17618:	strh	r3, [fp, #-10]
   1761c:	ldr	r3, [fp, #-8]
   17620:	ldr	r3, [r3, #32]
   17624:	ldrh	r3, [r3, #14]
   17628:	cmp	r3, #3
   1762c:	beq	17650 <flatcc_builder_check_required_field@@Base+0x50>
   17630:	ldr	r3, [pc, #108]	; 176a4 <flatcc_builder_check_required_field@@Base+0xa4>
   17634:	add	r3, pc, r3
   17638:	movw	r2, #1272	; 0x4f8
   1763c:	ldr	r1, [pc, #100]	; 176a8 <flatcc_builder_check_required_field@@Base+0xa8>
   17640:	add	r1, pc, r1
   17644:	ldr	r0, [pc, #96]	; 176ac <flatcc_builder_check_required_field@@Base+0xac>
   17648:	add	r0, pc, r0
   1764c:	bl	1208c <__assert_fail@plt>
   17650:	ldr	r3, [fp, #-8]
   17654:	ldrh	r3, [r3, #8]
   17658:	ldrh	r2, [fp, #-10]
   1765c:	cmp	r2, r3
   17660:	bcs	1768c <flatcc_builder_check_required_field@@Base+0x8c>
   17664:	ldr	r3, [fp, #-8]
   17668:	ldr	r2, [r3, #4]
   1766c:	ldrh	r3, [fp, #-10]
   17670:	lsl	r3, r3, #1
   17674:	add	r3, r2, r3
   17678:	ldrh	r3, [r3]
   1767c:	cmp	r3, #0
   17680:	beq	1768c <flatcc_builder_check_required_field@@Base+0x8c>
   17684:	mov	r3, #1
   17688:	b	17690 <flatcc_builder_check_required_field@@Base+0x90>
   1768c:	mov	r3, #0
   17690:	mov	r0, r3
   17694:	sub	sp, fp, #4
   17698:	ldr	fp, [sp]
   1769c:	add	sp, sp, #4
   176a0:	pop	{pc}		; (ldr pc, [sp], #4)
   176a4:	andeq	r4, r0, r8, lsl #4
   176a8:	andeq	r3, r0, ip, lsr fp
   176ac:	strdeq	r3, [r0], -r4

000176b0 <flatcc_builder_check_union_field@@Base>:
   176b0:	str	fp, [sp, #-8]!
   176b4:	str	lr, [sp, #4]
   176b8:	add	fp, sp, #4
   176bc:	sub	sp, sp, #8
   176c0:	str	r0, [fp, #-8]
   176c4:	mov	r3, r1
   176c8:	strh	r3, [fp, #-10]
   176cc:	ldr	r3, [fp, #-8]
   176d0:	ldr	r3, [r3, #32]
   176d4:	ldrh	r3, [r3, #14]
   176d8:	cmp	r3, #3
   176dc:	beq	17700 <flatcc_builder_check_union_field@@Base+0x50>
   176e0:	ldr	r3, [pc, #300]	; 17814 <flatcc_builder_check_union_field@@Base+0x164>
   176e4:	add	r3, pc, r3
   176e8:	movw	r2, #1279	; 0x4ff
   176ec:	ldr	r1, [pc, #292]	; 17818 <flatcc_builder_check_union_field@@Base+0x168>
   176f0:	add	r1, pc, r1
   176f4:	ldr	r0, [pc, #288]	; 1781c <flatcc_builder_check_union_field@@Base+0x16c>
   176f8:	add	r0, pc, r0
   176fc:	bl	1208c <__assert_fail@plt>
   17700:	ldrh	r3, [fp, #-10]
   17704:	cmp	r3, #0
   17708:	beq	17720 <flatcc_builder_check_union_field@@Base+0x70>
   1770c:	ldr	r3, [fp, #-8]
   17710:	ldrh	r3, [r3, #8]
   17714:	ldrh	r2, [fp, #-10]
   17718:	cmp	r2, r3
   1771c:	bcc	17728 <flatcc_builder_check_union_field@@Base+0x78>
   17720:	mov	r3, #0
   17724:	b	17800 <flatcc_builder_check_union_field@@Base+0x150>
   17728:	ldr	r3, [fp, #-8]
   1772c:	ldr	r2, [r3, #4]
   17730:	ldrh	r3, [fp, #-10]
   17734:	sub	r3, r3, #-2147483647	; 0x80000001
   17738:	lsl	r3, r3, #1
   1773c:	add	r3, r2, r3
   17740:	ldrh	r3, [r3]
   17744:	cmp	r3, #0
   17748:	bne	17778 <flatcc_builder_check_union_field@@Base+0xc8>
   1774c:	ldr	r3, [fp, #-8]
   17750:	ldr	r2, [r3, #4]
   17754:	ldrh	r3, [fp, #-10]
   17758:	lsl	r3, r3, #1
   1775c:	add	r3, r2, r3
   17760:	ldrh	r3, [r3]
   17764:	cmp	r3, #0
   17768:	moveq	r3, #1
   1776c:	movne	r3, #0
   17770:	uxtb	r3, r3
   17774:	b	17800 <flatcc_builder_check_union_field@@Base+0x150>
   17778:	ldr	r3, [fp, #-8]
   1777c:	ldr	r3, [r3, #16]
   17780:	ldr	r2, [fp, #-8]
   17784:	ldr	r1, [r2, #4]
   17788:	ldrh	r2, [fp, #-10]
   1778c:	sub	r2, r2, #-2147483647	; 0x80000001
   17790:	lsl	r2, r2, #1
   17794:	add	r2, r1, r2
   17798:	ldrh	r2, [r2]
   1779c:	add	r3, r3, r2
   177a0:	ldrb	r3, [r3]
   177a4:	cmp	r3, #0
   177a8:	beq	177d8 <flatcc_builder_check_union_field@@Base+0x128>
   177ac:	ldr	r3, [fp, #-8]
   177b0:	ldr	r2, [r3, #4]
   177b4:	ldrh	r3, [fp, #-10]
   177b8:	lsl	r3, r3, #1
   177bc:	add	r3, r2, r3
   177c0:	ldrh	r3, [r3]
   177c4:	cmp	r3, #0
   177c8:	movne	r3, #1
   177cc:	moveq	r3, #0
   177d0:	uxtb	r3, r3
   177d4:	b	17800 <flatcc_builder_check_union_field@@Base+0x150>
   177d8:	ldr	r3, [fp, #-8]
   177dc:	ldr	r2, [r3, #4]
   177e0:	ldrh	r3, [fp, #-10]
   177e4:	lsl	r3, r3, #1
   177e8:	add	r3, r2, r3
   177ec:	ldrh	r3, [r3]
   177f0:	cmp	r3, #0
   177f4:	moveq	r3, #1
   177f8:	movne	r3, #0
   177fc:	uxtb	r3, r3
   17800:	mov	r0, r3
   17804:	sub	sp, fp, #4
   17808:	ldr	fp, [sp]
   1780c:	add	sp, sp, #4
   17810:	pop	{pc}		; (ldr pc, [sp], #4)
   17814:	andeq	r4, r0, ip, ror r1
   17818:	andeq	r3, r0, ip, lsl #21
   1781c:	andeq	r3, r0, r4, asr #26

00017820 <flatcc_builder_check_required@@Base>:
   17820:	str	fp, [sp, #-8]!
   17824:	str	lr, [sp, #4]
   17828:	add	fp, sp, #4
   1782c:	sub	sp, sp, #24
   17830:	str	r0, [fp, #-16]
   17834:	str	r1, [fp, #-20]	; 0xffffffec
   17838:	str	r2, [fp, #-24]	; 0xffffffe8
   1783c:	ldr	r3, [fp, #-16]
   17840:	ldr	r3, [r3, #32]
   17844:	ldrh	r3, [r3, #14]
   17848:	cmp	r3, #3
   1784c:	beq	17870 <flatcc_builder_check_required@@Base+0x50>
   17850:	ldr	r3, [pc, #176]	; 17908 <flatcc_builder_check_required@@Base+0xe8>
   17854:	add	r3, pc, r3
   17858:	movw	r2, #1297	; 0x511
   1785c:	ldr	r1, [pc, #168]	; 1790c <flatcc_builder_check_required@@Base+0xec>
   17860:	add	r1, pc, r1
   17864:	ldr	r0, [pc, #164]	; 17910 <flatcc_builder_check_required@@Base+0xf0>
   17868:	add	r0, pc, r0
   1786c:	bl	1208c <__assert_fail@plt>
   17870:	ldr	r3, [fp, #-16]
   17874:	ldrh	r3, [r3, #8]
   17878:	mov	r2, r3
   1787c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17880:	cmp	r3, r2
   17884:	ble	17890 <flatcc_builder_check_required@@Base+0x70>
   17888:	mov	r3, #0
   1788c:	b	178f4 <flatcc_builder_check_required@@Base+0xd4>
   17890:	mov	r3, #0
   17894:	str	r3, [fp, #-8]
   17898:	b	178e0 <flatcc_builder_check_required@@Base+0xc0>
   1789c:	ldr	r3, [fp, #-16]
   178a0:	ldr	r2, [r3, #4]
   178a4:	ldr	r3, [fp, #-8]
   178a8:	lsl	r3, r3, #1
   178ac:	ldr	r1, [fp, #-20]	; 0xffffffec
   178b0:	add	r3, r1, r3
   178b4:	ldrh	r3, [r3]
   178b8:	lsl	r3, r3, #1
   178bc:	add	r3, r2, r3
   178c0:	ldrh	r3, [r3]
   178c4:	cmp	r3, #0
   178c8:	bne	178d4 <flatcc_builder_check_required@@Base+0xb4>
   178cc:	mov	r3, #0
   178d0:	b	178f4 <flatcc_builder_check_required@@Base+0xd4>
   178d4:	ldr	r3, [fp, #-8]
   178d8:	add	r3, r3, #1
   178dc:	str	r3, [fp, #-8]
   178e0:	ldr	r2, [fp, #-8]
   178e4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   178e8:	cmp	r2, r3
   178ec:	blt	1789c <flatcc_builder_check_required@@Base+0x7c>
   178f0:	mov	r3, #1
   178f4:	mov	r0, r3
   178f8:	sub	sp, fp, #4
   178fc:	ldr	fp, [sp]
   17900:	add	sp, sp, #4
   17904:	pop	{pc}		; (ldr pc, [sp], #4)
   17908:	andeq	r4, r0, r0, lsr r0
   1790c:	andeq	r3, r0, ip, lsl r9
   17910:	ldrdeq	r3, [r0], -r4

00017914 <flatcc_builder_end_table@@Base>:
   17914:	str	fp, [sp, #-8]!
   17918:	str	lr, [sp, #4]
   1791c:	add	fp, sp, #4
   17920:	sub	sp, sp, #48	; 0x30
   17924:	str	r0, [fp, #-32]	; 0xffffffe0
   17928:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1792c:	ldr	r3, [r3, #32]
   17930:	ldrh	r3, [r3, #14]
   17934:	cmp	r3, #3
   17938:	beq	1795c <flatcc_builder_end_table@@Base+0x48>
   1793c:	ldr	r3, [pc, #520]	; 17b4c <flatcc_builder_end_table@@Base+0x238>
   17940:	add	r3, pc, r3
   17944:	movw	r2, #1317	; 0x525
   17948:	ldr	r1, [pc, #512]	; 17b50 <flatcc_builder_end_table@@Base+0x23c>
   1794c:	add	r1, pc, r1
   17950:	ldr	r0, [pc, #508]	; 17b54 <flatcc_builder_end_table@@Base+0x240>
   17954:	add	r0, pc, r0
   17958:	bl	1208c <__assert_fail@plt>
   1795c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17960:	ldr	r3, [r3, #4]
   17964:	sub	r3, r3, #4
   17968:	str	r3, [fp, #-8]
   1796c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17970:	ldrh	r3, [r3, #8]
   17974:	add	r3, r3, #2
   17978:	uxth	r3, r3
   1797c:	lsl	r3, r3, #1
   17980:	strh	r3, [fp, #-10]
   17984:	ldr	r3, [fp, #-8]
   17988:	ldrh	r2, [fp, #-10]
   1798c:	strh	r2, [r3]
   17990:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17994:	ldr	r3, [r3, #20]
   17998:	uxth	r2, r3
   1799c:	ldr	r3, [fp, #-8]
   179a0:	add	r3, r3, #2
   179a4:	add	r2, r2, #4
   179a8:	uxth	r2, r2
   179ac:	strh	r2, [r3]
   179b0:	ldr	r3, [fp, #-8]
   179b4:	ldrh	r3, [r3]
   179b8:	mov	r2, r3
   179bc:	ldr	r3, [fp, #-32]	; 0xffffffe0
   179c0:	ldr	r3, [r3, #12]
   179c4:	eor	r2, r2, r3
   179c8:	movw	r3, #31153	; 0x79b1
   179cc:	movt	r3, #40503	; 0x9e37
   179d0:	mul	r3, r3, r2
   179d4:	ldr	r2, [fp, #-8]
   179d8:	add	r2, r2, #2
   179dc:	ldrh	r2, [r2]
   179e0:	eor	r2, r2, r3
   179e4:	movw	r3, #31153	; 0x79b1
   179e8:	movt	r3, #40503	; 0x9e37
   179ec:	mul	r2, r3, r2
   179f0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   179f4:	str	r2, [r3, #12]
   179f8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   179fc:	ldr	r3, [r3, #12]
   17a00:	ldrh	r2, [fp, #-10]
   17a04:	ldr	r1, [fp, #-8]
   17a08:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17a0c:	bl	16fb0 <flatcc_builder_create_cached_vtable@@Base>
   17a10:	str	r0, [fp, #-16]
   17a14:	ldr	r3, [fp, #-16]
   17a18:	cmp	r3, #0
   17a1c:	bne	17a28 <flatcc_builder_end_table@@Base+0x114>
   17a20:	mov	r3, #0
   17a24:	b	17b38 <flatcc_builder_end_table@@Base+0x224>
   17a28:	ldrh	r3, [fp, #-10]
   17a2c:	mov	r2, r3
   17a30:	mov	r1, #0
   17a34:	ldr	r0, [fp, #-8]
   17a38:	bl	12050 <memset@plt>
   17a3c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a40:	ldr	r2, [r3, #76]	; 0x4c
   17a44:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a48:	ldr	r3, [r3, #32]
   17a4c:	ldr	r3, [r3, #20]
   17a50:	add	r3, r2, r3
   17a54:	str	r3, [fp, #-20]	; 0xffffffec
   17a58:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a5c:	ldr	r2, [r3]
   17a60:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a64:	sub	r3, r2, r3
   17a68:	asr	r3, r3, #1
   17a6c:	str	r3, [fp, #-24]	; 0xffffffe8
   17a70:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a74:	ldr	r1, [r3, #16]
   17a78:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a7c:	ldr	r2, [r3, #20]
   17a80:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17a84:	ldrh	r0, [r3, #130]	; 0x82
   17a88:	ldr	r3, [fp, #-16]
   17a8c:	str	r3, [sp, #8]
   17a90:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17a94:	str	r3, [sp, #4]
   17a98:	ldr	r3, [fp, #-20]	; 0xffffffec
   17a9c:	str	r3, [sp]
   17aa0:	mov	r3, r0
   17aa4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17aa8:	bl	172d0 <flatcc_builder_create_table@@Base>
   17aac:	str	r0, [fp, #-28]	; 0xffffffe4
   17ab0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17ab4:	cmp	r3, #0
   17ab8:	bne	17ac4 <flatcc_builder_end_table@@Base+0x1b0>
   17abc:	mov	r3, #0
   17ac0:	b	17b38 <flatcc_builder_end_table@@Base+0x224>
   17ac4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ac8:	ldr	r3, [r3, #32]
   17acc:	ldr	r2, [r3, #24]
   17ad0:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ad4:	str	r2, [r3, #12]
   17ad8:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17adc:	ldr	r3, [r3, #32]
   17ae0:	ldrh	r2, [r3, #28]
   17ae4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17ae8:	strh	r2, [r3, #8]
   17aec:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17af0:	ldr	r2, [r3, #52]	; 0x34
   17af4:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17af8:	ldr	r3, [r3, #32]
   17afc:	ldr	r3, [r3, #16]
   17b00:	add	r2, r2, r3
   17b04:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b08:	str	r2, [r3, #4]
   17b0c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b10:	ldr	r2, [r3, #76]	; 0x4c
   17b14:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b18:	ldr	r3, [r3, #32]
   17b1c:	ldr	r3, [r3, #20]
   17b20:	add	r2, r2, r3
   17b24:	ldr	r3, [fp, #-32]	; 0xffffffe0
   17b28:	str	r2, [r3]
   17b2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   17b30:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   17b34:	ldr	r3, [fp, #-28]	; 0xffffffe4
   17b38:	mov	r0, r3
   17b3c:	sub	sp, fp, #4
   17b40:	ldr	fp, [sp]
   17b44:	add	sp, sp, #4
   17b48:	pop	{pc}		; (ldr pc, [sp], #4)
   17b4c:	andeq	r3, r0, r4, ror #30
   17b50:	andeq	r3, r0, r0, lsr r8
   17b54:	andeq	r3, r0, r8, ror #21

00017b58 <flatcc_builder_create_vector@@Base>:
   17b58:	str	r4, [sp, #-12]!
   17b5c:	str	fp, [sp, #4]
   17b60:	str	lr, [sp, #8]
   17b64:	add	fp, sp, #8
   17b68:	sub	sp, sp, #108	; 0x6c
   17b6c:	str	r0, [fp, #-104]	; 0xffffff98
   17b70:	str	r1, [fp, #-108]	; 0xffffff94
   17b74:	str	r2, [fp, #-112]	; 0xffffff90
   17b78:	str	r3, [fp, #-116]	; 0xffffff8c
   17b7c:	ldr	r4, [pc, #496]	; 17d74 <flatcc_builder_create_vector@@Base+0x21c>
   17b80:	add	r4, pc, r4
   17b84:	ldr	r2, [fp, #-112]	; 0xffffff90
   17b88:	ldr	r3, [fp, #8]
   17b8c:	cmp	r2, r3
   17b90:	bls	17bcc <flatcc_builder_create_vector@@Base+0x74>
   17b94:	ldr	r2, [fp, #-112]	; 0xffffff90
   17b98:	ldr	r3, [fp, #8]
   17b9c:	cmp	r2, r3
   17ba0:	bls	17bc4 <flatcc_builder_create_vector@@Base+0x6c>
   17ba4:	ldr	r3, [pc, #460]	; 17d78 <flatcc_builder_create_vector@@Base+0x220>
   17ba8:	add	r3, pc, r3
   17bac:	movw	r2, #1365	; 0x555
   17bb0:	ldr	r1, [pc, #452]	; 17d7c <flatcc_builder_create_vector@@Base+0x224>
   17bb4:	add	r1, pc, r1
   17bb8:	ldr	r0, [pc, #448]	; 17d80 <flatcc_builder_create_vector@@Base+0x228>
   17bbc:	add	r0, pc, r0
   17bc0:	bl	1208c <__assert_fail@plt>
   17bc4:	mov	r3, #0
   17bc8:	b	17d5c <flatcc_builder_create_vector@@Base+0x204>
   17bcc:	mov	r1, #4
   17bd0:	add	r3, fp, #4
   17bd4:	mov	r0, r3
   17bd8:	bl	14a08 <flatcc_builder_clear@@Base+0x10c>
   17bdc:	ldrh	r3, [fp, #4]
   17be0:	mov	r1, r3
   17be4:	ldr	r0, [fp, #-104]	; 0xffffff98
   17be8:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   17bec:	ldr	r3, [fp, #-112]	; 0xffffff90
   17bf0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17bf4:	mul	r3, r2, r3
   17bf8:	str	r3, [fp, #-16]
   17bfc:	ldr	r0, [fp, #-112]	; 0xffffff90
   17c00:	bl	138b8 <main@@Base+0xf0>
   17c04:	mov	r3, r0
   17c08:	str	r3, [fp, #-24]	; 0xffffffe8
   17c0c:	ldrh	r3, [fp, #4]
   17c10:	mov	r2, r3
   17c14:	ldr	r1, [fp, #-16]
   17c18:	ldr	r0, [fp, #-104]	; 0xffffff98
   17c1c:	bl	1503c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   17c20:	str	r0, [fp, #-20]	; 0xffffffec
   17c24:	mov	r3, #0
   17c28:	str	r3, [fp, #-96]	; 0xffffffa0
   17c2c:	mov	r3, #0
   17c30:	str	r3, [fp, #-92]	; 0xffffffa4
   17c34:	ldr	r3, [fp, #-96]	; 0xffffffa0
   17c38:	add	r3, r3, #4
   17c3c:	str	r3, [fp, #-96]	; 0xffffffa0
   17c40:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c44:	add	r3, r3, #1
   17c48:	lsl	r3, r3, #3
   17c4c:	sub	r2, fp, #12
   17c50:	add	r3, r2, r3
   17c54:	sub	r2, fp, #24
   17c58:	str	r2, [r3, #-84]	; 0xffffffac
   17c5c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c60:	add	r3, r3, #1
   17c64:	lsl	r3, r3, #3
   17c68:	sub	r2, fp, #12
   17c6c:	add	r3, r2, r3
   17c70:	mov	r2, #4
   17c74:	str	r2, [r3, #-80]	; 0xffffffb0
   17c78:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17c7c:	add	r3, r3, #1
   17c80:	str	r3, [fp, #-92]	; 0xffffffa4
   17c84:	ldr	r3, [fp, #-16]
   17c88:	cmp	r3, #0
   17c8c:	beq	17ce4 <flatcc_builder_create_vector@@Base+0x18c>
   17c90:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17c94:	ldr	r3, [fp, #-16]
   17c98:	add	r3, r2, r3
   17c9c:	str	r3, [fp, #-96]	; 0xffffffa0
   17ca0:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17ca4:	add	r3, r3, #1
   17ca8:	lsl	r3, r3, #3
   17cac:	sub	r2, fp, #12
   17cb0:	add	r3, r2, r3
   17cb4:	ldr	r2, [fp, #-108]	; 0xffffff94
   17cb8:	str	r2, [r3, #-84]	; 0xffffffac
   17cbc:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17cc0:	add	r3, r3, #1
   17cc4:	lsl	r3, r3, #3
   17cc8:	sub	r2, fp, #12
   17ccc:	add	r3, r2, r3
   17cd0:	ldr	r2, [fp, #-16]
   17cd4:	str	r2, [r3, #-80]	; 0xffffffb0
   17cd8:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17cdc:	add	r3, r3, #1
   17ce0:	str	r3, [fp, #-92]	; 0xffffffa4
   17ce4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17ce8:	cmp	r3, #0
   17cec:	beq	17d48 <flatcc_builder_create_vector@@Base+0x1f0>
   17cf0:	ldr	r2, [fp, #-96]	; 0xffffffa0
   17cf4:	ldr	r3, [fp, #-20]	; 0xffffffec
   17cf8:	add	r3, r2, r3
   17cfc:	str	r3, [fp, #-96]	; 0xffffffa0
   17d00:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d04:	add	r3, r3, #1
   17d08:	lsl	r3, r3, #3
   17d0c:	sub	r2, fp, #12
   17d10:	add	r3, r2, r3
   17d14:	ldr	r2, [pc, #104]	; 17d84 <flatcc_builder_create_vector@@Base+0x22c>
   17d18:	ldr	r2, [r4, r2]
   17d1c:	str	r2, [r3, #-84]	; 0xffffffac
   17d20:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d24:	add	r3, r3, #1
   17d28:	lsl	r3, r3, #3
   17d2c:	sub	r2, fp, #12
   17d30:	add	r3, r2, r3
   17d34:	ldr	r2, [fp, #-20]	; 0xffffffec
   17d38:	str	r2, [r3, #-80]	; 0xffffffb0
   17d3c:	ldr	r3, [fp, #-92]	; 0xffffffa4
   17d40:	add	r3, r3, #1
   17d44:	str	r3, [fp, #-92]	; 0xffffffa4
   17d48:	sub	r3, fp, #96	; 0x60
   17d4c:	mov	r1, r3
   17d50:	ldr	r0, [fp, #-104]	; 0xffffff98
   17d54:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   17d58:	mov	r3, r0
   17d5c:	mov	r0, r3
   17d60:	sub	sp, fp, #8
   17d64:	ldr	r4, [sp]
   17d68:	ldr	fp, [sp, #4]
   17d6c:	add	sp, sp, #8
   17d70:	pop	{pc}		; (ldr pc, [sp], #4)
   17d74:	andeq	r4, r1, r8, ror r4
   17d78:	andeq	r3, r0, r8, lsl sp
   17d7c:	andeq	r3, r0, r8, asr #11
   17d80:	andeq	r3, r0, ip, lsr #17
   17d84:	andeq	r0, r0, r8, asr r0

00017d88 <flatcc_builder_end_vector@@Base>:
   17d88:	str	fp, [sp, #-8]!
   17d8c:	str	lr, [sp, #4]
   17d90:	add	fp, sp, #4
   17d94:	sub	sp, sp, #24
   17d98:	str	r0, [fp, #-16]
   17d9c:	ldr	r3, [fp, #-16]
   17da0:	ldr	r3, [r3, #32]
   17da4:	ldrh	r3, [r3, #14]
   17da8:	cmp	r3, #4
   17dac:	beq	17dd0 <flatcc_builder_end_vector@@Base+0x48>
   17db0:	ldr	r3, [pc, #156]	; 17e54 <flatcc_builder_end_vector@@Base+0xcc>
   17db4:	add	r3, pc, r3
   17db8:	movw	r2, #1400	; 0x578
   17dbc:	ldr	r1, [pc, #148]	; 17e58 <flatcc_builder_end_vector@@Base+0xd0>
   17dc0:	add	r1, pc, r1
   17dc4:	ldr	r0, [pc, #144]	; 17e5c <flatcc_builder_end_vector@@Base+0xd4>
   17dc8:	add	r0, pc, r0
   17dcc:	bl	1208c <__assert_fail@plt>
   17dd0:	ldr	r3, [fp, #-16]
   17dd4:	ldr	r1, [r3, #16]
   17dd8:	ldr	r3, [fp, #-16]
   17ddc:	ldr	r3, [r3, #32]
   17de0:	ldr	r0, [r3, #20]
   17de4:	ldr	r3, [fp, #-16]
   17de8:	ldr	r3, [r3, #32]
   17dec:	ldr	ip, [r3, #16]
   17df0:	ldr	r3, [fp, #-16]
   17df4:	ldrh	r3, [r3, #130]	; 0x82
   17df8:	ldr	r2, [fp, #-16]
   17dfc:	ldr	r2, [r2, #32]
   17e00:	ldr	r2, [r2, #24]
   17e04:	str	r2, [sp, #4]
   17e08:	str	r3, [sp]
   17e0c:	mov	r3, ip
   17e10:	mov	r2, r0
   17e14:	ldr	r0, [fp, #-16]
   17e18:	bl	17b58 <flatcc_builder_create_vector@@Base>
   17e1c:	str	r0, [fp, #-8]
   17e20:	ldr	r3, [fp, #-8]
   17e24:	cmp	r3, #0
   17e28:	bne	17e34 <flatcc_builder_end_vector@@Base+0xac>
   17e2c:	mov	r3, #0
   17e30:	b	17e40 <flatcc_builder_end_vector@@Base+0xb8>
   17e34:	ldr	r0, [fp, #-16]
   17e38:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   17e3c:	ldr	r3, [fp, #-8]
   17e40:	mov	r0, r3
   17e44:	sub	sp, fp, #4
   17e48:	ldr	fp, [sp]
   17e4c:	add	sp, sp, #4
   17e50:	pop	{pc}		; (ldr pc, [sp], #4)
   17e54:	andeq	r3, r0, ip, lsr #22
   17e58:			; <UNDEFINED> instruction: 0x000033bc
   17e5c:	strdeq	r3, [r0], -r8

00017e60 <flatcc_builder_vector_count@@Base>:
   17e60:	push	{fp}		; (str fp, [sp, #-4]!)
   17e64:	add	fp, sp, #0
   17e68:	sub	sp, sp, #12
   17e6c:	str	r0, [fp, #-8]
   17e70:	ldr	r3, [fp, #-8]
   17e74:	ldr	r3, [r3, #32]
   17e78:	ldr	r3, [r3, #20]
   17e7c:	mov	r0, r3
   17e80:	add	sp, fp, #0
   17e84:	pop	{fp}		; (ldr fp, [sp], #4)
   17e88:	bx	lr

00017e8c <flatcc_builder_vector_edit@@Base>:
   17e8c:	push	{fp}		; (str fp, [sp, #-4]!)
   17e90:	add	fp, sp, #0
   17e94:	sub	sp, sp, #12
   17e98:	str	r0, [fp, #-8]
   17e9c:	ldr	r3, [fp, #-8]
   17ea0:	ldr	r3, [r3, #16]
   17ea4:	mov	r0, r3
   17ea8:	add	sp, fp, #0
   17eac:	pop	{fp}		; (ldr fp, [sp], #4)
   17eb0:	bx	lr
   17eb4:	str	r4, [sp, #-12]!
   17eb8:	str	fp, [sp, #4]
   17ebc:	str	lr, [sp, #8]
   17ec0:	add	fp, sp, #8
   17ec4:	sub	sp, sp, #116	; 0x74
   17ec8:	str	r0, [fp, #-112]	; 0xffffff90
   17ecc:	str	r1, [fp, #-116]	; 0xffffff8c
   17ed0:	str	r2, [fp, #-120]	; 0xffffff88
   17ed4:	str	r3, [fp, #-124]	; 0xffffff84
   17ed8:	ldr	r4, [pc, #764]	; 181dc <flatcc_builder_vector_edit@@Base+0x350>
   17edc:	add	r4, pc, r4
   17ee0:	ldr	r3, [fp, #-120]	; 0xffffff88
   17ee4:	cmn	r3, #-1073741823	; 0xc0000001
   17ee8:	bls	17ef4 <flatcc_builder_vector_edit@@Base+0x68>
   17eec:	mov	r3, #0
   17ef0:	b	181c4 <flatcc_builder_vector_edit@@Base+0x338>
   17ef4:	mov	r1, #4
   17ef8:	ldr	r0, [fp, #-112]	; 0xffffff90
   17efc:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   17f00:	ldr	r3, [fp, #-120]	; 0xffffff88
   17f04:	lsl	r3, r3, #2
   17f08:	str	r3, [fp, #-20]	; 0xffffffec
   17f0c:	ldr	r0, [fp, #-120]	; 0xffffff88
   17f10:	bl	138b8 <main@@Base+0xf0>
   17f14:	mov	r3, r0
   17f18:	str	r3, [fp, #-36]	; 0xffffffdc
   17f1c:	mov	r2, #4
   17f20:	ldr	r1, [fp, #-20]	; 0xffffffec
   17f24:	ldr	r0, [fp, #-112]	; 0xffffff90
   17f28:	bl	1503c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   17f2c:	str	r0, [fp, #-24]	; 0xffffffe8
   17f30:	mov	r3, #0
   17f34:	str	r3, [fp, #-108]	; 0xffffff94
   17f38:	mov	r3, #0
   17f3c:	str	r3, [fp, #-104]	; 0xffffff98
   17f40:	ldr	r3, [fp, #-108]	; 0xffffff94
   17f44:	add	r3, r3, #4
   17f48:	str	r3, [fp, #-108]	; 0xffffff94
   17f4c:	ldr	r3, [fp, #-104]	; 0xffffff98
   17f50:	add	r3, r3, #1
   17f54:	lsl	r3, r3, #3
   17f58:	sub	r2, fp, #12
   17f5c:	add	r3, r2, r3
   17f60:	sub	r2, fp, #36	; 0x24
   17f64:	str	r2, [r3, #-96]	; 0xffffffa0
   17f68:	ldr	r3, [fp, #-104]	; 0xffffff98
   17f6c:	add	r3, r3, #1
   17f70:	lsl	r3, r3, #3
   17f74:	sub	r2, fp, #12
   17f78:	add	r3, r2, r3
   17f7c:	mov	r2, #4
   17f80:	str	r2, [r3, #-92]	; 0xffffffa4
   17f84:	ldr	r3, [fp, #-104]	; 0xffffff98
   17f88:	add	r3, r3, #1
   17f8c:	str	r3, [fp, #-104]	; 0xffffff98
   17f90:	ldr	r3, [fp, #-20]	; 0xffffffec
   17f94:	cmp	r3, #0
   17f98:	beq	17ff0 <flatcc_builder_vector_edit@@Base+0x164>
   17f9c:	ldr	r2, [fp, #-108]	; 0xffffff94
   17fa0:	ldr	r3, [fp, #-20]	; 0xffffffec
   17fa4:	add	r3, r2, r3
   17fa8:	str	r3, [fp, #-108]	; 0xffffff94
   17fac:	ldr	r3, [fp, #-104]	; 0xffffff98
   17fb0:	add	r3, r3, #1
   17fb4:	lsl	r3, r3, #3
   17fb8:	sub	r2, fp, #12
   17fbc:	add	r3, r2, r3
   17fc0:	ldr	r2, [fp, #-116]	; 0xffffff8c
   17fc4:	str	r2, [r3, #-96]	; 0xffffffa0
   17fc8:	ldr	r3, [fp, #-104]	; 0xffffff98
   17fcc:	add	r3, r3, #1
   17fd0:	lsl	r3, r3, #3
   17fd4:	sub	r2, fp, #12
   17fd8:	add	r3, r2, r3
   17fdc:	ldr	r2, [fp, #-20]	; 0xffffffec
   17fe0:	str	r2, [r3, #-92]	; 0xffffffa4
   17fe4:	ldr	r3, [fp, #-104]	; 0xffffff98
   17fe8:	add	r3, r3, #1
   17fec:	str	r3, [fp, #-104]	; 0xffffff98
   17ff0:	ldr	r3, [fp, #-24]	; 0xffffffe8
   17ff4:	cmp	r3, #0
   17ff8:	beq	18054 <flatcc_builder_vector_edit@@Base+0x1c8>
   17ffc:	ldr	r2, [fp, #-108]	; 0xffffff94
   18000:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18004:	add	r3, r2, r3
   18008:	str	r3, [fp, #-108]	; 0xffffff94
   1800c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18010:	add	r3, r3, #1
   18014:	lsl	r3, r3, #3
   18018:	sub	r2, fp, #12
   1801c:	add	r3, r2, r3
   18020:	ldr	r2, [pc, #440]	; 181e0 <flatcc_builder_vector_edit@@Base+0x354>
   18024:	ldr	r2, [r4, r2]
   18028:	str	r2, [r3, #-96]	; 0xffffffa0
   1802c:	ldr	r3, [fp, #-104]	; 0xffffff98
   18030:	add	r3, r3, #1
   18034:	lsl	r3, r3, #3
   18038:	sub	r2, fp, #12
   1803c:	add	r3, r2, r3
   18040:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18044:	str	r2, [r3, #-92]	; 0xffffffa4
   18048:	ldr	r3, [fp, #-104]	; 0xffffff98
   1804c:	add	r3, r3, #1
   18050:	str	r3, [fp, #-104]	; 0xffffff98
   18054:	ldr	r3, [fp, #-112]	; 0xffffff90
   18058:	ldr	r3, [r3, #136]	; 0x88
   1805c:	mov	r2, r3
   18060:	ldr	r3, [fp, #-108]	; 0xffffff94
   18064:	sub	r3, r2, r3
   18068:	str	r3, [fp, #-28]	; 0xffffffe4
   1806c:	mov	r3, #0
   18070:	str	r3, [fp, #-16]
   18074:	b	181a0 <flatcc_builder_vector_edit@@Base+0x314>
   18078:	ldr	r3, [fp, #-16]
   1807c:	lsl	r3, r3, #2
   18080:	ldr	r2, [fp, #-116]	; 0xffffff8c
   18084:	add	r3, r2, r3
   18088:	ldr	r3, [r3]
   1808c:	cmp	r3, #0
   18090:	beq	18130 <flatcc_builder_vector_edit@@Base+0x2a4>
   18094:	ldr	r3, [fp, #-16]
   18098:	lsl	r3, r3, #2
   1809c:	ldr	r2, [fp, #-116]	; 0xffffff8c
   180a0:	add	r3, r2, r3
   180a4:	ldr	r3, [r3]
   180a8:	mov	r2, r3
   180ac:	ldr	r3, [fp, #-28]	; 0xffffffe4
   180b0:	sub	r2, r2, r3
   180b4:	ldr	r3, [fp, #-16]
   180b8:	lsl	r3, r3, #2
   180bc:	sub	r3, r2, r3
   180c0:	sub	r3, r3, #4
   180c4:	str	r3, [fp, #-32]	; 0xffffffe0
   180c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   180cc:	bl	138b8 <main@@Base+0xf0>
   180d0:	mov	r1, r0
   180d4:	ldr	r3, [fp, #-16]
   180d8:	lsl	r3, r3, #2
   180dc:	ldr	r2, [fp, #-116]	; 0xffffff8c
   180e0:	add	r3, r2, r3
   180e4:	mov	r2, r1
   180e8:	str	r2, [r3]
   180ec:	ldr	r3, [fp, #-124]	; 0xffffff84
   180f0:	cmp	r3, #0
   180f4:	beq	18194 <flatcc_builder_vector_edit@@Base+0x308>
   180f8:	ldr	r2, [fp, #-124]	; 0xffffff84
   180fc:	ldr	r3, [fp, #-16]
   18100:	add	r3, r2, r3
   18104:	ldrb	r3, [r3]
   18108:	cmp	r3, #0
   1810c:	bne	18194 <flatcc_builder_vector_edit@@Base+0x308>
   18110:	ldr	r3, [pc, #204]	; 181e4 <flatcc_builder_vector_edit@@Base+0x358>
   18114:	add	r3, pc, r3
   18118:	movw	r2, #1457	; 0x5b1
   1811c:	ldr	r1, [pc, #196]	; 181e8 <flatcc_builder_vector_edit@@Base+0x35c>
   18120:	add	r1, pc, r1
   18124:	ldr	r0, [pc, #192]	; 181ec <flatcc_builder_vector_edit@@Base+0x360>
   18128:	add	r0, pc, r0
   1812c:	bl	1208c <__assert_fail@plt>
   18130:	ldr	r3, [fp, #-124]	; 0xffffff84
   18134:	cmp	r3, #0
   18138:	beq	18174 <flatcc_builder_vector_edit@@Base+0x2e8>
   1813c:	ldr	r2, [fp, #-124]	; 0xffffff84
   18140:	ldr	r3, [fp, #-16]
   18144:	add	r3, r2, r3
   18148:	ldrb	r3, [r3]
   1814c:	cmp	r3, #0
   18150:	beq	18194 <flatcc_builder_vector_edit@@Base+0x308>
   18154:	ldr	r3, [pc, #148]	; 181f0 <flatcc_builder_vector_edit@@Base+0x364>
   18158:	add	r3, pc, r3
   1815c:	movw	r2, #1461	; 0x5b5
   18160:	ldr	r1, [pc, #140]	; 181f4 <flatcc_builder_vector_edit@@Base+0x368>
   18164:	add	r1, pc, r1
   18168:	ldr	r0, [pc, #136]	; 181f8 <flatcc_builder_vector_edit@@Base+0x36c>
   1816c:	add	r0, pc, r0
   18170:	bl	1208c <__assert_fail@plt>
   18174:	ldr	r3, [pc, #128]	; 181fc <flatcc_builder_vector_edit@@Base+0x370>
   18178:	add	r3, pc, r3
   1817c:	movw	r2, #1463	; 0x5b7
   18180:	ldr	r1, [pc, #120]	; 18200 <flatcc_builder_vector_edit@@Base+0x374>
   18184:	add	r1, pc, r1
   18188:	ldr	r0, [pc, #116]	; 18204 <flatcc_builder_vector_edit@@Base+0x378>
   1818c:	add	r0, pc, r0
   18190:	bl	1208c <__assert_fail@plt>
   18194:	ldr	r3, [fp, #-16]
   18198:	add	r3, r3, #1
   1819c:	str	r3, [fp, #-16]
   181a0:	ldr	r2, [fp, #-16]
   181a4:	ldr	r3, [fp, #-120]	; 0xffffff88
   181a8:	cmp	r2, r3
   181ac:	bcc	18078 <flatcc_builder_vector_edit@@Base+0x1ec>
   181b0:	sub	r3, fp, #108	; 0x6c
   181b4:	mov	r1, r3
   181b8:	ldr	r0, [fp, #-112]	; 0xffffff90
   181bc:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   181c0:	mov	r3, r0
   181c4:	mov	r0, r3
   181c8:	sub	sp, fp, #8
   181cc:	ldr	r4, [sp]
   181d0:	ldr	fp, [sp, #4]
   181d4:	add	sp, sp, #8
   181d8:	pop	{pc}		; (ldr pc, [sp], #4)
   181dc:	andeq	r4, r1, ip, lsl r1
   181e0:	andeq	r0, r0, r8, asr r0
   181e4:	andeq	r3, r0, r8, ror #15
   181e8:	andeq	r3, r0, ip, asr r0
   181ec:	andeq	r3, r0, r4, asr r3
   181f0:	andeq	r3, r0, r4, lsr #15
   181f4:	andeq	r3, r0, r8, lsl r0
   181f8:	andeq	r3, r0, r0, lsr #6
   181fc:	andeq	r3, r0, r4, lsl #15
   18200:	strdeq	r2, [r0], -r8
   18204:	andeq	r3, r0, r0, asr r0

00018208 <flatcc_builder_create_offset_vector_direct@@Base>:
   18208:	str	fp, [sp, #-8]!
   1820c:	str	lr, [sp, #4]
   18210:	add	fp, sp, #4
   18214:	sub	sp, sp, #16
   18218:	str	r0, [fp, #-8]
   1821c:	str	r1, [fp, #-12]
   18220:	str	r2, [fp, #-16]
   18224:	mov	r3, #0
   18228:	ldr	r2, [fp, #-16]
   1822c:	ldr	r1, [fp, #-12]
   18230:	ldr	r0, [fp, #-8]
   18234:	bl	17eb4 <flatcc_builder_vector_edit@@Base+0x28>
   18238:	mov	r3, r0
   1823c:	mov	r0, r3
   18240:	sub	sp, fp, #4
   18244:	ldr	fp, [sp]
   18248:	add	sp, sp, #4
   1824c:	pop	{pc}		; (ldr pc, [sp], #4)

00018250 <flatcc_builder_end_offset_vector@@Base>:
   18250:	str	fp, [sp, #-8]!
   18254:	str	lr, [sp, #4]
   18258:	add	fp, sp, #4
   1825c:	sub	sp, sp, #16
   18260:	str	r0, [fp, #-16]
   18264:	ldr	r3, [fp, #-16]
   18268:	ldr	r3, [r3, #32]
   1826c:	ldrh	r3, [r3, #14]
   18270:	cmp	r3, #5
   18274:	beq	18298 <flatcc_builder_end_offset_vector@@Base+0x48>
   18278:	ldr	r3, [pc, #112]	; 182f0 <flatcc_builder_end_offset_vector@@Base+0xa0>
   1827c:	add	r3, pc, r3
   18280:	movw	r2, #1480	; 0x5c8
   18284:	ldr	r1, [pc, #104]	; 182f4 <flatcc_builder_end_offset_vector@@Base+0xa4>
   18288:	add	r1, pc, r1
   1828c:	ldr	r0, [pc, #100]	; 182f8 <flatcc_builder_end_offset_vector@@Base+0xa8>
   18290:	add	r0, pc, r0
   18294:	bl	1208c <__assert_fail@plt>
   18298:	ldr	r3, [fp, #-16]
   1829c:	ldr	r1, [r3, #16]
   182a0:	ldr	r3, [fp, #-16]
   182a4:	ldr	r3, [r3, #32]
   182a8:	ldr	r3, [r3, #20]
   182ac:	mov	r2, r3
   182b0:	ldr	r0, [fp, #-16]
   182b4:	bl	18208 <flatcc_builder_create_offset_vector_direct@@Base>
   182b8:	str	r0, [fp, #-8]
   182bc:	ldr	r3, [fp, #-8]
   182c0:	cmp	r3, #0
   182c4:	bne	182d0 <flatcc_builder_end_offset_vector@@Base+0x80>
   182c8:	mov	r3, #0
   182cc:	b	182dc <flatcc_builder_end_offset_vector@@Base+0x8c>
   182d0:	ldr	r0, [fp, #-16]
   182d4:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   182d8:	ldr	r3, [fp, #-8]
   182dc:	mov	r0, r3
   182e0:	sub	sp, fp, #4
   182e4:	ldr	fp, [sp]
   182e8:	add	sp, sp, #4
   182ec:	pop	{pc}		; (ldr pc, [sp], #4)
   182f0:	andeq	r3, r0, r0, lsr #13
   182f4:	strdeq	r2, [r0], -r4
   182f8:	muleq	r0, ip, r0

000182fc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   182fc:	str	fp, [sp, #-8]!
   18300:	str	lr, [sp, #4]
   18304:	add	fp, sp, #4
   18308:	sub	sp, sp, #16
   1830c:	str	r0, [fp, #-16]
   18310:	str	r1, [fp, #-20]	; 0xffffffec
   18314:	ldr	r3, [fp, #-16]
   18318:	ldr	r3, [r3, #32]
   1831c:	ldrh	r3, [r3, #14]
   18320:	cmp	r3, #5
   18324:	beq	18348 <flatcc_builder_end_offset_vector_for_unions@@Base+0x4c>
   18328:	ldr	r3, [pc, #112]	; 183a0 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa4>
   1832c:	add	r3, pc, r3
   18330:	movw	r2, #1493	; 0x5d5
   18334:	ldr	r1, [pc, #104]	; 183a4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xa8>
   18338:	add	r1, pc, r1
   1833c:	ldr	r0, [pc, #100]	; 183a8 <flatcc_builder_end_offset_vector_for_unions@@Base+0xac>
   18340:	add	r0, pc, r0
   18344:	bl	1208c <__assert_fail@plt>
   18348:	ldr	r3, [fp, #-16]
   1834c:	ldr	r1, [r3, #16]
   18350:	ldr	r3, [fp, #-16]
   18354:	ldr	r3, [r3, #32]
   18358:	ldr	r2, [r3, #20]
   1835c:	ldr	r3, [fp, #-20]	; 0xffffffec
   18360:	ldr	r0, [fp, #-16]
   18364:	bl	17eb4 <flatcc_builder_vector_edit@@Base+0x28>
   18368:	str	r0, [fp, #-8]
   1836c:	ldr	r3, [fp, #-8]
   18370:	cmp	r3, #0
   18374:	bne	18380 <flatcc_builder_end_offset_vector_for_unions@@Base+0x84>
   18378:	mov	r3, #0
   1837c:	b	1838c <flatcc_builder_end_offset_vector_for_unions@@Base+0x90>
   18380:	ldr	r0, [fp, #-16]
   18384:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18388:	ldr	r3, [fp, #-8]
   1838c:	mov	r0, r3
   18390:	sub	sp, fp, #4
   18394:	ldr	fp, [sp]
   18398:	add	sp, sp, #4
   1839c:	pop	{pc}		; (ldr pc, [sp], #4)
   183a0:	andeq	r3, r0, r4, lsl r6
   183a4:	andeq	r2, r0, r4, asr #28
   183a8:	andeq	r2, r0, ip, ror #31

000183ac <flatcc_builder_offset_vector_edit@@Base>:
   183ac:	push	{fp}		; (str fp, [sp, #-4]!)
   183b0:	add	fp, sp, #0
   183b4:	sub	sp, sp, #12
   183b8:	str	r0, [fp, #-8]
   183bc:	ldr	r3, [fp, #-8]
   183c0:	ldr	r3, [r3, #16]
   183c4:	mov	r0, r3
   183c8:	add	sp, fp, #0
   183cc:	pop	{fp}		; (ldr fp, [sp], #4)
   183d0:	bx	lr

000183d4 <flatcc_builder_offset_vector_count@@Base>:
   183d4:	push	{fp}		; (str fp, [sp, #-4]!)
   183d8:	add	fp, sp, #0
   183dc:	sub	sp, sp, #12
   183e0:	str	r0, [fp, #-8]
   183e4:	ldr	r3, [fp, #-8]
   183e8:	ldr	r3, [r3, #32]
   183ec:	ldr	r3, [r3, #20]
   183f0:	mov	r0, r3
   183f4:	add	sp, fp, #0
   183f8:	pop	{fp}		; (ldr fp, [sp], #4)
   183fc:	bx	lr

00018400 <flatcc_builder_table_add_union@@Base>:
   18400:	str	fp, [sp, #-8]!
   18404:	str	lr, [sp, #4]
   18408:	add	fp, sp, #4
   1840c:	sub	sp, sp, #24
   18410:	str	r0, [fp, #-16]
   18414:	str	r1, [fp, #-20]	; 0xffffffec
   18418:	sub	r1, fp, #28
   1841c:	stm	r1, {r2, r3}
   18420:	ldr	r3, [fp, #-16]
   18424:	ldr	r3, [r3, #32]
   18428:	ldrh	r3, [r3, #14]
   1842c:	cmp	r3, #3
   18430:	beq	18454 <flatcc_builder_table_add_union@@Base+0x54>
   18434:	ldr	r3, [pc, #360]	; 185a4 <flatcc_builder_table_add_union@@Base+0x1a4>
   18438:	add	r3, pc, r3
   1843c:	movw	r2, #1518	; 0x5ee
   18440:	ldr	r1, [pc, #352]	; 185a8 <flatcc_builder_table_add_union@@Base+0x1a8>
   18444:	add	r1, pc, r1
   18448:	ldr	r0, [pc, #348]	; 185ac <flatcc_builder_table_add_union@@Base+0x1ac>
   1844c:	add	r0, pc, r0
   18450:	bl	1208c <__assert_fail@plt>
   18454:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18458:	cmp	r3, #0
   1845c:	bne	184ac <flatcc_builder_table_add_union@@Base+0xac>
   18460:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18464:	cmp	r3, #0
   18468:	beq	184ac <flatcc_builder_table_add_union@@Base+0xac>
   1846c:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18470:	cmp	r3, #0
   18474:	bne	184a4 <flatcc_builder_table_add_union@@Base+0xa4>
   18478:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1847c:	cmp	r3, #0
   18480:	beq	184a4 <flatcc_builder_table_add_union@@Base+0xa4>
   18484:	ldr	r3, [pc, #292]	; 185b0 <flatcc_builder_table_add_union@@Base+0x1b0>
   18488:	add	r3, pc, r3
   1848c:	movw	r2, #1519	; 0x5ef
   18490:	ldr	r1, [pc, #284]	; 185b4 <flatcc_builder_table_add_union@@Base+0x1b4>
   18494:	add	r1, pc, r1
   18498:	ldr	r0, [pc, #280]	; 185b8 <flatcc_builder_table_add_union@@Base+0x1b8>
   1849c:	add	r0, pc, r0
   184a0:	bl	1208c <__assert_fail@plt>
   184a4:	mvn	r3, #0
   184a8:	b	18590 <flatcc_builder_table_add_union@@Base+0x190>
   184ac:	ldr	r3, [fp, #-24]	; 0xffffffe8
   184b0:	cmp	r3, #0
   184b4:	beq	18514 <flatcc_builder_table_add_union@@Base+0x114>
   184b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   184bc:	ldr	r0, [fp, #-16]
   184c0:	bl	195d4 <flatcc_builder_table_add_offset@@Base>
   184c4:	str	r0, [fp, #-8]
   184c8:	ldr	r3, [fp, #-8]
   184cc:	cmp	r3, #0
   184d0:	bne	18508 <flatcc_builder_table_add_union@@Base+0x108>
   184d4:	ldr	r3, [fp, #-8]
   184d8:	cmp	r3, #0
   184dc:	bne	18500 <flatcc_builder_table_add_union@@Base+0x100>
   184e0:	ldr	r3, [pc, #212]	; 185bc <flatcc_builder_table_add_union@@Base+0x1bc>
   184e4:	add	r3, pc, r3
   184e8:	movw	r2, #1522	; 0x5f2
   184ec:	ldr	r1, [pc, #204]	; 185c0 <flatcc_builder_table_add_union@@Base+0x1c0>
   184f0:	add	r1, pc, r1
   184f4:	ldr	r0, [pc, #200]	; 185c4 <flatcc_builder_table_add_union@@Base+0x1c4>
   184f8:	add	r0, pc, r0
   184fc:	bl	1208c <__assert_fail@plt>
   18500:	mvn	r3, #0
   18504:	b	18590 <flatcc_builder_table_add_union@@Base+0x190>
   18508:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1850c:	ldr	r3, [fp, #-8]
   18510:	str	r2, [r3]
   18514:	ldr	r3, [fp, #-20]	; 0xffffffec
   18518:	sub	r1, r3, #1
   1851c:	mov	r3, #1
   18520:	mov	r2, #1
   18524:	ldr	r0, [fp, #-16]
   18528:	bl	19364 <flatcc_builder_table_add@@Base>
   1852c:	str	r0, [fp, #-12]
   18530:	ldr	r3, [fp, #-12]
   18534:	cmp	r3, #0
   18538:	bne	18570 <flatcc_builder_table_add_union@@Base+0x170>
   1853c:	ldr	r3, [fp, #-12]
   18540:	cmp	r3, #0
   18544:	bne	18568 <flatcc_builder_table_add_union@@Base+0x168>
   18548:	ldr	r3, [pc, #120]	; 185c8 <flatcc_builder_table_add_union@@Base+0x1c8>
   1854c:	add	r3, pc, r3
   18550:	movw	r2, #1526	; 0x5f6
   18554:	ldr	r1, [pc, #112]	; 185cc <flatcc_builder_table_add_union@@Base+0x1cc>
   18558:	add	r1, pc, r1
   1855c:	ldr	r0, [pc, #108]	; 185d0 <flatcc_builder_table_add_union@@Base+0x1d0>
   18560:	add	r0, pc, r0
   18564:	bl	1208c <__assert_fail@plt>
   18568:	mvn	r3, #0
   1856c:	b	18590 <flatcc_builder_table_add_union@@Base+0x190>
   18570:	ldrb	r3, [fp, #-28]	; 0xffffffe4
   18574:	mov	r0, r3
   18578:	bl	138dc <main@@Base+0x114>
   1857c:	mov	r3, r0
   18580:	mov	r2, r3
   18584:	ldr	r3, [fp, #-12]
   18588:	strb	r2, [r3]
   1858c:	mov	r3, #0
   18590:	mov	r0, r3
   18594:	sub	sp, fp, #4
   18598:	ldr	fp, [sp]
   1859c:	add	sp, sp, #4
   185a0:	pop	{pc}		; (ldr pc, [sp], #4)
   185a4:	andeq	r3, r0, r4, lsr r5
   185a8:	andeq	r2, r0, r8, lsr sp
   185ac:	strdeq	r2, [r0], -r0
   185b0:	andeq	r3, r0, r4, ror #9
   185b4:	andeq	r2, r0, r8, ror #25
   185b8:	andeq	r3, r0, r0
   185bc:	andeq	r3, r0, r8, lsl #9
   185c0:	andeq	r2, r0, ip, lsl #25
   185c4:	andeq	r2, r0, r8, asr #31
   185c8:	andeq	r3, r0, r0, lsr #8
   185cc:	andeq	r2, r0, r4, lsr #24
   185d0:	andeq	r2, r0, ip, ror #30

000185d4 <flatcc_builder_table_add_union_vector@@Base>:
   185d4:	str	fp, [sp, #-8]!
   185d8:	str	lr, [sp, #4]
   185dc:	add	fp, sp, #4
   185e0:	sub	sp, sp, #24
   185e4:	str	r0, [fp, #-16]
   185e8:	str	r1, [fp, #-20]	; 0xffffffec
   185ec:	sub	r1, fp, #28
   185f0:	stm	r1, {r2, r3}
   185f4:	ldr	r3, [fp, #-16]
   185f8:	ldr	r3, [r3, #32]
   185fc:	ldrh	r3, [r3, #14]
   18600:	cmp	r3, #3
   18604:	beq	18628 <flatcc_builder_table_add_union_vector@@Base+0x54>
   18608:	ldr	r3, [pc, #404]	; 187a4 <flatcc_builder_table_add_union_vector@@Base+0x1d0>
   1860c:	add	r3, pc, r3
   18610:	mov	r2, #1536	; 0x600
   18614:	ldr	r1, [pc, #396]	; 187a8 <flatcc_builder_table_add_union_vector@@Base+0x1d4>
   18618:	add	r1, pc, r1
   1861c:	ldr	r0, [pc, #392]	; 187ac <flatcc_builder_table_add_union_vector@@Base+0x1d8>
   18620:	add	r0, pc, r0
   18624:	bl	1208c <__assert_fail@plt>
   18628:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1862c:	cmp	r3, #0
   18630:	moveq	r3, #1
   18634:	movne	r3, #0
   18638:	uxtb	r2, r3
   1863c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18640:	cmp	r3, #0
   18644:	moveq	r3, #1
   18648:	movne	r3, #0
   1864c:	uxtb	r3, r3
   18650:	eor	r3, r3, r2
   18654:	uxtb	r3, r3
   18658:	cmp	r3, #0
   1865c:	beq	186c0 <flatcc_builder_table_add_union_vector@@Base+0xec>
   18660:	ldr	r3, [fp, #-28]	; 0xffffffe4
   18664:	cmp	r3, #0
   18668:	movne	r3, #1
   1866c:	moveq	r3, #0
   18670:	uxtb	r2, r3
   18674:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18678:	cmp	r3, #0
   1867c:	moveq	r3, #1
   18680:	movne	r3, #0
   18684:	uxtb	r3, r3
   18688:	eor	r3, r3, r2
   1868c:	uxtb	r3, r3
   18690:	cmp	r3, #0
   18694:	bne	186b8 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   18698:	ldr	r3, [pc, #272]	; 187b0 <flatcc_builder_table_add_union_vector@@Base+0x1dc>
   1869c:	add	r3, pc, r3
   186a0:	movw	r2, #1537	; 0x601
   186a4:	ldr	r1, [pc, #264]	; 187b4 <flatcc_builder_table_add_union_vector@@Base+0x1e0>
   186a8:	add	r1, pc, r1
   186ac:	ldr	r0, [pc, #260]	; 187b8 <flatcc_builder_table_add_union_vector@@Base+0x1e4>
   186b0:	add	r0, pc, r0
   186b4:	bl	1208c <__assert_fail@plt>
   186b8:	mvn	r3, #0
   186bc:	b	18790 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   186c0:	ldr	r3, [fp, #-28]	; 0xffffffe4
   186c4:	cmp	r3, #0
   186c8:	beq	1878c <flatcc_builder_table_add_union_vector@@Base+0x1b8>
   186cc:	ldr	r3, [fp, #-20]	; 0xffffffec
   186d0:	sub	r3, r3, #1
   186d4:	mov	r1, r3
   186d8:	ldr	r0, [fp, #-16]
   186dc:	bl	195d4 <flatcc_builder_table_add_offset@@Base>
   186e0:	str	r0, [fp, #-8]
   186e4:	ldr	r3, [fp, #-8]
   186e8:	cmp	r3, #0
   186ec:	bne	18724 <flatcc_builder_table_add_union_vector@@Base+0x150>
   186f0:	ldr	r3, [fp, #-8]
   186f4:	cmp	r3, #0
   186f8:	bne	1871c <flatcc_builder_table_add_union_vector@@Base+0x148>
   186fc:	ldr	r3, [pc, #184]	; 187bc <flatcc_builder_table_add_union_vector@@Base+0x1e8>
   18700:	add	r3, pc, r3
   18704:	movw	r2, #1540	; 0x604
   18708:	ldr	r1, [pc, #176]	; 187c0 <flatcc_builder_table_add_union_vector@@Base+0x1ec>
   1870c:	add	r1, pc, r1
   18710:	ldr	r0, [pc, #172]	; 187c4 <flatcc_builder_table_add_union_vector@@Base+0x1f0>
   18714:	add	r0, pc, r0
   18718:	bl	1208c <__assert_fail@plt>
   1871c:	mvn	r3, #0
   18720:	b	18790 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   18724:	ldr	r2, [fp, #-28]	; 0xffffffe4
   18728:	ldr	r3, [fp, #-8]
   1872c:	str	r2, [r3]
   18730:	ldr	r1, [fp, #-20]	; 0xffffffec
   18734:	ldr	r0, [fp, #-16]
   18738:	bl	195d4 <flatcc_builder_table_add_offset@@Base>
   1873c:	str	r0, [fp, #-8]
   18740:	ldr	r3, [fp, #-8]
   18744:	cmp	r3, #0
   18748:	bne	18780 <flatcc_builder_table_add_union_vector@@Base+0x1ac>
   1874c:	ldr	r3, [fp, #-8]
   18750:	cmp	r3, #0
   18754:	bne	18778 <flatcc_builder_table_add_union_vector@@Base+0x1a4>
   18758:	ldr	r3, [pc, #104]	; 187c8 <flatcc_builder_table_add_union_vector@@Base+0x1f4>
   1875c:	add	r3, pc, r3
   18760:	movw	r2, #1544	; 0x608
   18764:	ldr	r1, [pc, #96]	; 187cc <flatcc_builder_table_add_union_vector@@Base+0x1f8>
   18768:	add	r1, pc, r1
   1876c:	ldr	r0, [pc, #92]	; 187d0 <flatcc_builder_table_add_union_vector@@Base+0x1fc>
   18770:	add	r0, pc, r0
   18774:	bl	1208c <__assert_fail@plt>
   18778:	mvn	r3, #0
   1877c:	b	18790 <flatcc_builder_table_add_union_vector@@Base+0x1bc>
   18780:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18784:	ldr	r3, [fp, #-8]
   18788:	str	r2, [r3]
   1878c:	mov	r3, #0
   18790:	mov	r0, r3
   18794:	sub	sp, fp, #4
   18798:	ldr	fp, [sp]
   1879c:	add	sp, sp, #4
   187a0:	pop	{pc}		; (ldr pc, [sp], #4)
   187a4:	andeq	r3, r0, r0, lsl #7
   187a8:	andeq	r2, r0, r4, ror #22
   187ac:	andeq	r2, r0, ip, lsl lr
   187b0:	strdeq	r3, [r0], -r0
   187b4:	ldrdeq	r2, [r0], -r4
   187b8:	andeq	r2, r0, r8, lsr #28
   187bc:	andeq	r3, r0, ip, lsl #5
   187c0:	andeq	r2, r0, r0, ror sl
   187c4:	andeq	r2, r0, ip, lsr #27
   187c8:	andeq	r3, r0, r0, lsr r2
   187cc:	andeq	r2, r0, r4, lsl sl
   187d0:	andeq	r2, r0, r0, asr sp

000187d4 <flatcc_builder_create_union_vector@@Base>:
   187d4:	str	fp, [sp, #-8]!
   187d8:	str	lr, [sp, #4]
   187dc:	add	fp, sp, #4
   187e0:	sub	sp, sp, #48	; 0x30
   187e4:	str	r0, [fp, #-32]	; 0xffffffe0
   187e8:	str	r1, [fp, #-36]	; 0xffffffdc
   187ec:	str	r2, [fp, #-40]	; 0xffffffd8
   187f0:	str	r3, [fp, #-44]	; 0xffffffd4
   187f4:	mov	r3, #0
   187f8:	str	r3, [fp, #-24]	; 0xffffffe8
   187fc:	mov	r3, #0
   18800:	str	r3, [fp, #-20]	; 0xffffffec
   18804:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18808:	bl	16b48 <flatcc_builder_start_offset_vector@@Base>
   1880c:	mov	r3, r0
   18810:	cmp	r3, #0
   18814:	beq	18830 <flatcc_builder_create_union_vector@@Base+0x5c>
   18818:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1881c:	mov	r1, r3
   18820:	sub	r3, fp, #24
   18824:	ldrd	r2, [r3]
   18828:	strd	r2, [r1]
   1882c:	b	1894c <flatcc_builder_create_union_vector@@Base+0x178>
   18830:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18834:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18838:	bl	1638c <flatcc_builder_extend_offset_vector@@Base>
   1883c:	mov	r3, r0
   18840:	cmp	r3, #0
   18844:	bne	18860 <flatcc_builder_create_union_vector@@Base+0x8c>
   18848:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1884c:	mov	r1, r3
   18850:	sub	r3, fp, #24
   18854:	ldrd	r2, [r3]
   18858:	strd	r2, [r1]
   1885c:	b	1894c <flatcc_builder_create_union_vector@@Base+0x178>
   18860:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18864:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18868:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   1886c:	str	r0, [fp, #-12]
   18870:	ldr	r3, [fp, #-12]
   18874:	cmp	r3, #0
   18878:	bne	18894 <flatcc_builder_create_union_vector@@Base+0xc0>
   1887c:	ldr	r3, [fp, #-32]	; 0xffffffe0
   18880:	mov	r1, r3
   18884:	sub	r3, fp, #24
   18888:	ldrd	r2, [r3]
   1888c:	strd	r2, [r1]
   18890:	b	1894c <flatcc_builder_create_union_vector@@Base+0x178>
   18894:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18898:	bl	183ac <flatcc_builder_offset_vector_edit@@Base>
   1889c:	str	r0, [fp, #-16]
   188a0:	mov	r3, #0
   188a4:	str	r3, [fp, #-8]
   188a8:	b	18904 <flatcc_builder_create_union_vector@@Base+0x130>
   188ac:	ldr	r3, [fp, #-8]
   188b0:	lsl	r3, r3, #3
   188b4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   188b8:	add	r2, r2, r3
   188bc:	ldr	r1, [fp, #-12]
   188c0:	ldr	r3, [fp, #-8]
   188c4:	add	r3, r1, r3
   188c8:	ldrb	r2, [r2]
   188cc:	strb	r2, [r3]
   188d0:	ldr	r3, [fp, #-8]
   188d4:	lsl	r3, r3, #3
   188d8:	ldr	r2, [fp, #-40]	; 0xffffffd8
   188dc:	add	r2, r2, r3
   188e0:	ldr	r3, [fp, #-8]
   188e4:	lsl	r3, r3, #2
   188e8:	ldr	r1, [fp, #-16]
   188ec:	add	r3, r1, r3
   188f0:	ldr	r2, [r2, #4]
   188f4:	str	r2, [r3]
   188f8:	ldr	r3, [fp, #-8]
   188fc:	add	r3, r3, #1
   18900:	str	r3, [fp, #-8]
   18904:	ldr	r2, [fp, #-8]
   18908:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1890c:	cmp	r2, r3
   18910:	bcc	188ac <flatcc_builder_create_union_vector@@Base+0xd8>
   18914:	sub	r0, fp, #24
   18918:	ldr	r3, [fp, #-44]	; 0xffffffd4
   1891c:	str	r3, [sp]
   18920:	ldr	r3, [fp, #-16]
   18924:	ldr	r2, [fp, #-12]
   18928:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1892c:	bl	18960 <flatcc_builder_create_union_vector_direct@@Base>
   18930:	ldr	r0, [fp, #-36]	; 0xffffffdc
   18934:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18938:	ldr	r3, [fp, #-32]	; 0xffffffe0
   1893c:	mov	r1, r3
   18940:	sub	r3, fp, #24
   18944:	ldrd	r2, [r3]
   18948:	strd	r2, [r1]
   1894c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18950:	sub	sp, fp, #4
   18954:	ldr	fp, [sp]
   18958:	add	sp, sp, #4
   1895c:	pop	{pc}		; (ldr pc, [sp], #4)

00018960 <flatcc_builder_create_union_vector_direct@@Base>:
   18960:	str	fp, [sp, #-8]!
   18964:	str	lr, [sp, #4]
   18968:	add	fp, sp, #4
   1896c:	sub	sp, sp, #32
   18970:	str	r0, [fp, #-16]
   18974:	str	r1, [fp, #-20]	; 0xffffffec
   18978:	str	r2, [fp, #-24]	; 0xffffffe8
   1897c:	str	r3, [fp, #-28]	; 0xffffffe4
   18980:	mov	r3, #0
   18984:	str	r3, [fp, #-12]
   18988:	mov	r3, #0
   1898c:	str	r3, [fp, #-8]
   18990:	ldr	r3, [fp, #-24]	; 0xffffffe8
   18994:	ldr	r2, [fp, #4]
   18998:	ldr	r1, [fp, #-28]	; 0xffffffe4
   1899c:	ldr	r0, [fp, #-20]	; 0xffffffec
   189a0:	bl	17eb4 <flatcc_builder_vector_edit@@Base+0x28>
   189a4:	mov	r3, r0
   189a8:	str	r3, [fp, #-8]
   189ac:	ldr	r3, [fp, #-8]
   189b0:	cmp	r3, #0
   189b4:	bne	189d0 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   189b8:	ldr	r3, [fp, #-16]
   189bc:	mov	r1, r3
   189c0:	sub	r3, fp, #12
   189c4:	ldrd	r2, [r3]
   189c8:	strd	r2, [r1]
   189cc:	b	18a34 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   189d0:	mvn	r3, #0
   189d4:	str	r3, [sp, #4]
   189d8:	mov	r3, #1
   189dc:	str	r3, [sp]
   189e0:	mov	r3, #1
   189e4:	ldr	r2, [fp, #4]
   189e8:	ldr	r1, [fp, #-24]	; 0xffffffe8
   189ec:	ldr	r0, [fp, #-20]	; 0xffffffec
   189f0:	bl	17b58 <flatcc_builder_create_vector@@Base>
   189f4:	mov	r3, r0
   189f8:	str	r3, [fp, #-12]
   189fc:	ldr	r3, [fp, #-12]
   18a00:	cmp	r3, #0
   18a04:	bne	18a20 <flatcc_builder_create_union_vector_direct@@Base+0xc0>
   18a08:	ldr	r3, [fp, #-16]
   18a0c:	mov	r1, r3
   18a10:	sub	r3, fp, #12
   18a14:	ldrd	r2, [r3]
   18a18:	strd	r2, [r1]
   18a1c:	b	18a34 <flatcc_builder_create_union_vector_direct@@Base+0xd4>
   18a20:	ldr	r3, [fp, #-16]
   18a24:	mov	r1, r3
   18a28:	sub	r3, fp, #12
   18a2c:	ldrd	r2, [r3]
   18a30:	strd	r2, [r1]
   18a34:	ldr	r0, [fp, #-16]
   18a38:	sub	sp, fp, #4
   18a3c:	ldr	fp, [sp]
   18a40:	add	sp, sp, #4
   18a44:	pop	{pc}		; (ldr pc, [sp], #4)

00018a48 <flatcc_builder_start_union_vector@@Base>:
   18a48:	str	fp, [sp, #-8]!
   18a4c:	str	lr, [sp, #4]
   18a50:	add	fp, sp, #4
   18a54:	sub	sp, sp, #8
   18a58:	str	r0, [fp, #-8]
   18a5c:	mov	r1, #4
   18a60:	ldr	r0, [fp, #-8]
   18a64:	bl	14d7c <flatcc_builder_get_user_frame_ptr@@Base+0x34>
   18a68:	mov	r3, r0
   18a6c:	cmp	r3, #0
   18a70:	beq	18a7c <flatcc_builder_start_union_vector@@Base+0x34>
   18a74:	mvn	r3, #0
   18a78:	b	18abc <flatcc_builder_start_union_vector@@Base+0x74>
   18a7c:	ldr	r3, [fp, #-8]
   18a80:	ldr	r3, [r3, #32]
   18a84:	mov	r2, #8
   18a88:	str	r2, [r3, #16]
   18a8c:	ldr	r3, [fp, #-8]
   18a90:	ldr	r3, [r3, #32]
   18a94:	mov	r2, #0
   18a98:	str	r2, [r3, #20]
   18a9c:	ldr	r3, [fp, #-8]
   18aa0:	ldr	r3, [r3, #32]
   18aa4:	mov	r2, #7
   18aa8:	strh	r2, [r3, #14]
   18aac:	mvn	r1, #3
   18ab0:	ldr	r0, [fp, #-8]
   18ab4:	bl	13bdc <flatcc_builder_default_alloc@@Base+0x1d4>
   18ab8:	mov	r3, #0
   18abc:	mov	r0, r3
   18ac0:	sub	sp, fp, #4
   18ac4:	ldr	fp, [sp]
   18ac8:	add	sp, sp, #4
   18acc:	pop	{pc}		; (ldr pc, [sp], #4)

00018ad0 <flatcc_builder_end_union_vector@@Base>:
   18ad0:	str	fp, [sp, #-8]!
   18ad4:	str	lr, [sp, #4]
   18ad8:	add	fp, sp, #4
   18adc:	sub	sp, sp, #48	; 0x30
   18ae0:	str	r0, [fp, #-40]	; 0xffffffd8
   18ae4:	str	r1, [fp, #-44]	; 0xffffffd4
   18ae8:	mov	r3, #0
   18aec:	str	r3, [fp, #-32]	; 0xffffffe0
   18af0:	mov	r3, #0
   18af4:	str	r3, [fp, #-28]	; 0xffffffe4
   18af8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   18afc:	ldr	r3, [r3, #32]
   18b00:	ldrh	r3, [r3, #14]
   18b04:	cmp	r3, #7
   18b08:	beq	18b2c <flatcc_builder_end_union_vector@@Base+0x5c>
   18b0c:	ldr	r3, [pc, #328]	; 18c5c <flatcc_builder_end_union_vector@@Base+0x18c>
   18b10:	add	r3, pc, r3
   18b14:	movw	r2, #1617	; 0x651
   18b18:	ldr	r1, [pc, #320]	; 18c60 <flatcc_builder_end_union_vector@@Base+0x190>
   18b1c:	add	r1, pc, r1
   18b20:	ldr	r0, [pc, #316]	; 18c64 <flatcc_builder_end_union_vector@@Base+0x194>
   18b24:	add	r0, pc, r0
   18b28:	bl	1208c <__assert_fail@plt>
   18b2c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b30:	bl	18c90 <flatcc_builder_union_vector_count@@Base>
   18b34:	str	r0, [fp, #-12]
   18b38:	ldr	r2, [fp, #-12]
   18b3c:	mov	r3, r2
   18b40:	lsl	r3, r3, #2
   18b44:	add	r3, r3, r2
   18b48:	mov	r1, r3
   18b4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b50:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   18b54:	str	r0, [fp, #-16]
   18b58:	ldr	r3, [fp, #-16]
   18b5c:	cmp	r3, #0
   18b60:	bne	18b7c <flatcc_builder_end_union_vector@@Base+0xac>
   18b64:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18b68:	mov	r1, r3
   18b6c:	sub	r3, fp, #32
   18b70:	ldrd	r2, [r3]
   18b74:	strd	r2, [r1]
   18b78:	b	18c48 <flatcc_builder_end_union_vector@@Base+0x178>
   18b7c:	ldr	r3, [fp, #-12]
   18b80:	lsl	r3, r3, #2
   18b84:	ldr	r2, [fp, #-16]
   18b88:	add	r3, r2, r3
   18b8c:	str	r3, [fp, #-20]	; 0xffffffec
   18b90:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18b94:	bl	18c68 <flatcc_builder_union_vector_edit@@Base>
   18b98:	str	r0, [fp, #-24]	; 0xffffffe8
   18b9c:	mov	r3, #0
   18ba0:	str	r3, [fp, #-8]
   18ba4:	b	18c00 <flatcc_builder_end_union_vector@@Base+0x130>
   18ba8:	ldr	r3, [fp, #-8]
   18bac:	lsl	r3, r3, #3
   18bb0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18bb4:	add	r2, r2, r3
   18bb8:	ldr	r1, [fp, #-20]	; 0xffffffec
   18bbc:	ldr	r3, [fp, #-8]
   18bc0:	add	r3, r1, r3
   18bc4:	ldrb	r2, [r2]
   18bc8:	strb	r2, [r3]
   18bcc:	ldr	r3, [fp, #-8]
   18bd0:	lsl	r3, r3, #3
   18bd4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   18bd8:	add	r2, r2, r3
   18bdc:	ldr	r3, [fp, #-8]
   18be0:	lsl	r3, r3, #2
   18be4:	ldr	r1, [fp, #-16]
   18be8:	add	r3, r1, r3
   18bec:	ldr	r2, [r2, #4]
   18bf0:	str	r2, [r3]
   18bf4:	ldr	r3, [fp, #-8]
   18bf8:	add	r3, r3, #1
   18bfc:	str	r3, [fp, #-8]
   18c00:	ldr	r2, [fp, #-8]
   18c04:	ldr	r3, [fp, #-12]
   18c08:	cmp	r2, r3
   18c0c:	bcc	18ba8 <flatcc_builder_end_union_vector@@Base+0xd8>
   18c10:	sub	r0, fp, #32
   18c14:	ldr	r3, [fp, #-12]
   18c18:	str	r3, [sp]
   18c1c:	ldr	r3, [fp, #-16]
   18c20:	ldr	r2, [fp, #-20]	; 0xffffffec
   18c24:	ldr	r1, [fp, #-44]	; 0xffffffd4
   18c28:	bl	18960 <flatcc_builder_create_union_vector_direct@@Base>
   18c2c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18c30:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   18c34:	ldr	r3, [fp, #-40]	; 0xffffffd8
   18c38:	mov	r1, r3
   18c3c:	sub	r3, fp, #32
   18c40:	ldrd	r2, [r3]
   18c44:	strd	r2, [r1]
   18c48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   18c4c:	sub	sp, fp, #4
   18c50:	ldr	fp, [sp]
   18c54:	add	sp, sp, #4
   18c58:	pop	{pc}		; (ldr pc, [sp], #4)
   18c5c:	andeq	r2, r0, r4, lsr #29
   18c60:	andeq	r2, r0, r0, ror #12
   18c64:	ldrdeq	r2, [r0], -ip

00018c68 <flatcc_builder_union_vector_edit@@Base>:
   18c68:	push	{fp}		; (str fp, [sp, #-4]!)
   18c6c:	add	fp, sp, #0
   18c70:	sub	sp, sp, #12
   18c74:	str	r0, [fp, #-8]
   18c78:	ldr	r3, [fp, #-8]
   18c7c:	ldr	r3, [r3, #16]
   18c80:	mov	r0, r3
   18c84:	add	sp, fp, #0
   18c88:	pop	{fp}		; (ldr fp, [sp], #4)
   18c8c:	bx	lr

00018c90 <flatcc_builder_union_vector_count@@Base>:
   18c90:	push	{fp}		; (str fp, [sp, #-4]!)
   18c94:	add	fp, sp, #0
   18c98:	sub	sp, sp, #12
   18c9c:	str	r0, [fp, #-8]
   18ca0:	ldr	r3, [fp, #-8]
   18ca4:	ldr	r3, [r3, #32]
   18ca8:	ldr	r3, [r3, #20]
   18cac:	mov	r0, r3
   18cb0:	add	sp, fp, #0
   18cb4:	pop	{fp}		; (ldr fp, [sp], #4)
   18cb8:	bx	lr

00018cbc <flatcc_builder_extend_union_vector@@Base>:
   18cbc:	str	fp, [sp, #-8]!
   18cc0:	str	lr, [sp, #4]
   18cc4:	add	fp, sp, #4
   18cc8:	sub	sp, sp, #8
   18ccc:	str	r0, [fp, #-8]
   18cd0:	str	r1, [fp, #-12]
   18cd4:	mvn	r2, #-536870912	; 0xe0000000
   18cd8:	ldr	r1, [fp, #-12]
   18cdc:	ldr	r0, [fp, #-8]
   18ce0:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   18ce4:	mov	r3, r0
   18ce8:	cmp	r3, #0
   18cec:	beq	18cf8 <flatcc_builder_extend_union_vector@@Base+0x3c>
   18cf0:	mov	r3, #0
   18cf4:	b	18d10 <flatcc_builder_extend_union_vector@@Base+0x54>
   18cf8:	ldr	r3, [fp, #-12]
   18cfc:	lsl	r3, r3, #3
   18d00:	mov	r1, r3
   18d04:	ldr	r0, [fp, #-8]
   18d08:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   18d0c:	mov	r3, r0
   18d10:	mov	r0, r3
   18d14:	sub	sp, fp, #4
   18d18:	ldr	fp, [sp]
   18d1c:	add	sp, sp, #4
   18d20:	pop	{pc}		; (ldr pc, [sp], #4)

00018d24 <flatcc_builder_truncate_union_vector@@Base>:
   18d24:	str	fp, [sp, #-8]!
   18d28:	str	lr, [sp, #4]
   18d2c:	add	fp, sp, #4
   18d30:	sub	sp, sp, #8
   18d34:	str	r0, [fp, #-8]
   18d38:	str	r1, [fp, #-12]
   18d3c:	ldr	r3, [fp, #-8]
   18d40:	ldr	r3, [r3, #32]
   18d44:	ldrh	r3, [r3, #14]
   18d48:	cmp	r3, #7
   18d4c:	beq	18d70 <flatcc_builder_truncate_union_vector@@Base+0x4c>
   18d50:	ldr	r3, [pc, #200]	; 18e20 <flatcc_builder_truncate_union_vector@@Base+0xfc>
   18d54:	add	r3, pc, r3
   18d58:	movw	r2, #1665	; 0x681
   18d5c:	ldr	r1, [pc, #192]	; 18e24 <flatcc_builder_truncate_union_vector@@Base+0x100>
   18d60:	add	r1, pc, r1
   18d64:	ldr	r0, [pc, #188]	; 18e28 <flatcc_builder_truncate_union_vector@@Base+0x104>
   18d68:	add	r0, pc, r0
   18d6c:	bl	1208c <__assert_fail@plt>
   18d70:	ldr	r3, [fp, #-8]
   18d74:	ldr	r3, [r3, #32]
   18d78:	ldr	r3, [r3, #20]
   18d7c:	ldr	r2, [fp, #-12]
   18d80:	cmp	r2, r3
   18d84:	bls	18dc8 <flatcc_builder_truncate_union_vector@@Base+0xa4>
   18d88:	ldr	r3, [fp, #-8]
   18d8c:	ldr	r3, [r3, #32]
   18d90:	ldr	r3, [r3, #20]
   18d94:	ldr	r2, [fp, #-12]
   18d98:	cmp	r2, r3
   18d9c:	bls	18dc0 <flatcc_builder_truncate_union_vector@@Base+0x9c>
   18da0:	ldr	r3, [pc, #132]	; 18e2c <flatcc_builder_truncate_union_vector@@Base+0x108>
   18da4:	add	r3, pc, r3
   18da8:	movw	r2, #1666	; 0x682
   18dac:	ldr	r1, [pc, #124]	; 18e30 <flatcc_builder_truncate_union_vector@@Base+0x10c>
   18db0:	add	r1, pc, r1
   18db4:	ldr	r0, [pc, #120]	; 18e34 <flatcc_builder_truncate_union_vector@@Base+0x110>
   18db8:	add	r0, pc, r0
   18dbc:	bl	1208c <__assert_fail@plt>
   18dc0:	mvn	r3, #0
   18dc4:	b	18e0c <flatcc_builder_truncate_union_vector@@Base+0xe8>
   18dc8:	ldr	r3, [fp, #-8]
   18dcc:	ldr	r3, [r3, #32]
   18dd0:	ldr	r1, [r3, #20]
   18dd4:	ldr	r3, [fp, #-8]
   18dd8:	ldr	r3, [r3, #32]
   18ddc:	ldr	r2, [fp, #-12]
   18de0:	sub	r2, r1, r2
   18de4:	str	r2, [r3, #20]
   18de8:	ldr	r3, [fp, #-8]
   18dec:	ldr	r3, [r3, #32]
   18df0:	ldr	r3, [r3, #16]
   18df4:	ldr	r2, [fp, #-12]
   18df8:	mul	r3, r2, r3
   18dfc:	mov	r1, r3
   18e00:	ldr	r0, [fp, #-8]
   18e04:	bl	13dc0 <flatcc_builder_default_alloc@@Base+0x3b8>
   18e08:	mov	r3, #0
   18e0c:	mov	r0, r3
   18e10:	sub	sp, fp, #4
   18e14:	ldr	fp, [sp]
   18e18:	add	sp, sp, #4
   18e1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e20:	andeq	r2, r0, r0, lsl #25
   18e24:	andeq	r2, r0, ip, lsl r4
   18e28:	muleq	r0, r8, r7
   18e2c:	andeq	r2, r0, r0, lsr ip
   18e30:	andeq	r2, r0, ip, asr #7
   18e34:	strdeq	r2, [r0], -r8

00018e38 <flatcc_builder_union_vector_push@@Base>:
   18e38:	str	fp, [sp, #-8]!
   18e3c:	str	lr, [sp, #4]
   18e40:	add	fp, sp, #4
   18e44:	sub	sp, sp, #24
   18e48:	str	r0, [fp, #-16]
   18e4c:	sub	r3, fp, #24
   18e50:	stm	r3, {r1, r2}
   18e54:	ldr	r3, [fp, #-16]
   18e58:	ldr	r3, [r3, #32]
   18e5c:	ldrh	r3, [r3, #14]
   18e60:	cmp	r3, #7
   18e64:	beq	18e88 <flatcc_builder_union_vector_push@@Base+0x50>
   18e68:	ldr	r3, [pc, #160]	; 18f10 <flatcc_builder_union_vector_push@@Base+0xd8>
   18e6c:	add	r3, pc, r3
   18e70:	movw	r2, #1677	; 0x68d
   18e74:	ldr	r1, [pc, #152]	; 18f14 <flatcc_builder_union_vector_push@@Base+0xdc>
   18e78:	add	r1, pc, r1
   18e7c:	ldr	r0, [pc, #148]	; 18f18 <flatcc_builder_union_vector_push@@Base+0xe0>
   18e80:	add	r0, pc, r0
   18e84:	bl	1208c <__assert_fail@plt>
   18e88:	ldr	r3, [fp, #-16]
   18e8c:	ldr	r3, [r3, #32]
   18e90:	ldr	r3, [r3, #20]
   18e94:	cmn	r3, #-536870911	; 0xe0000001
   18e98:	bne	18ea4 <flatcc_builder_union_vector_push@@Base+0x6c>
   18e9c:	mov	r3, #0
   18ea0:	b	18efc <flatcc_builder_union_vector_push@@Base+0xc4>
   18ea4:	ldr	r3, [fp, #-16]
   18ea8:	ldr	r3, [r3, #32]
   18eac:	ldr	r2, [r3, #20]
   18eb0:	ldr	r3, [fp, #-16]
   18eb4:	ldr	r3, [r3, #32]
   18eb8:	add	r2, r2, #1
   18ebc:	str	r2, [r3, #20]
   18ec0:	mov	r1, #8
   18ec4:	ldr	r0, [fp, #-16]
   18ec8:	bl	13d18 <flatcc_builder_default_alloc@@Base+0x310>
   18ecc:	str	r0, [fp, #-8]
   18ed0:	ldr	r3, [fp, #-8]
   18ed4:	cmp	r3, #0
   18ed8:	bne	18ee4 <flatcc_builder_union_vector_push@@Base+0xac>
   18edc:	mov	r3, #0
   18ee0:	b	18efc <flatcc_builder_union_vector_push@@Base+0xc4>
   18ee4:	ldr	r3, [fp, #-8]
   18ee8:	mov	r1, r3
   18eec:	sub	r3, fp, #24
   18ef0:	ldrd	r2, [r3]
   18ef4:	strd	r2, [r1]
   18ef8:	ldr	r3, [fp, #-8]
   18efc:	mov	r0, r3
   18f00:	sub	sp, fp, #4
   18f04:	ldr	fp, [sp]
   18f08:	add	sp, sp, #4
   18f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f10:	muleq	r0, r0, fp
   18f14:	andeq	r2, r0, r4, lsl #6
   18f18:	andeq	r2, r0, r0, lsl #13

00018f1c <flatcc_builder_append_union_vector@@Base>:
   18f1c:	str	fp, [sp, #-8]!
   18f20:	str	lr, [sp, #4]
   18f24:	add	fp, sp, #4
   18f28:	sub	sp, sp, #16
   18f2c:	str	r0, [fp, #-8]
   18f30:	str	r1, [fp, #-12]
   18f34:	str	r2, [fp, #-16]
   18f38:	ldr	r3, [fp, #-8]
   18f3c:	ldr	r3, [r3, #32]
   18f40:	ldrh	r3, [r3, #14]
   18f44:	cmp	r3, #7
   18f48:	beq	18f6c <flatcc_builder_append_union_vector@@Base+0x50>
   18f4c:	ldr	r3, [pc, #108]	; 18fc0 <flatcc_builder_append_union_vector@@Base+0xa4>
   18f50:	add	r3, pc, r3
   18f54:	movw	r2, #1692	; 0x69c
   18f58:	ldr	r1, [pc, #100]	; 18fc4 <flatcc_builder_append_union_vector@@Base+0xa8>
   18f5c:	add	r1, pc, r1
   18f60:	ldr	r0, [pc, #96]	; 18fc8 <flatcc_builder_append_union_vector@@Base+0xac>
   18f64:	add	r0, pc, r0
   18f68:	bl	1208c <__assert_fail@plt>
   18f6c:	mvn	r2, #-536870912	; 0xe0000000
   18f70:	ldr	r1, [fp, #-16]
   18f74:	ldr	r0, [fp, #-8]
   18f78:	bl	16050 <flatcc_builder_end_struct@@Base+0xac>
   18f7c:	mov	r3, r0
   18f80:	cmp	r3, #0
   18f84:	beq	18f90 <flatcc_builder_append_union_vector@@Base+0x74>
   18f88:	mov	r3, #0
   18f8c:	b	18fac <flatcc_builder_append_union_vector@@Base+0x90>
   18f90:	ldr	r3, [fp, #-16]
   18f94:	lsl	r3, r3, #3
   18f98:	mov	r2, r3
   18f9c:	ldr	r1, [fp, #-12]
   18fa0:	ldr	r0, [fp, #-8]
   18fa4:	bl	13e28 <flatcc_builder_default_alloc@@Base+0x420>
   18fa8:	mov	r3, r0
   18fac:	mov	r0, r3
   18fb0:	sub	sp, fp, #4
   18fb4:	ldr	fp, [sp]
   18fb8:	add	sp, sp, #4
   18fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   18fc0:	ldrdeq	r2, [r0], -r0
   18fc4:	andeq	r2, r0, r0, lsr #4
   18fc8:	muleq	r0, ip, r5

00018fcc <flatcc_builder_create_string@@Base>:
   18fcc:	str	r4, [sp, #-12]!
   18fd0:	str	fp, [sp, #4]
   18fd4:	str	lr, [sp, #8]
   18fd8:	add	fp, sp, #8
   18fdc:	sub	sp, sp, #100	; 0x64
   18fe0:	str	r0, [fp, #-96]	; 0xffffffa0
   18fe4:	str	r1, [fp, #-100]	; 0xffffff9c
   18fe8:	str	r2, [fp, #-104]	; 0xffffff98
   18fec:	ldr	r4, [pc, #388]	; 19178 <flatcc_builder_create_string@@Base+0x1ac>
   18ff0:	add	r4, pc, r4
   18ff4:	ldr	r0, [fp, #-104]	; 0xffffff98
   18ff8:	bl	138b8 <main@@Base+0xf0>
   18ffc:	mov	r3, r0
   19000:	str	r3, [fp, #-20]	; 0xffffffec
   19004:	ldr	r3, [fp, #-104]	; 0xffffff98
   19008:	add	r3, r3, #1
   1900c:	mov	r2, #4
   19010:	mov	r1, r3
   19014:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19018:	bl	1503c <flatcc_builder_get_user_frame_ptr@@Base+0x2f4>
   1901c:	mov	r3, r0
   19020:	add	r3, r3, #1
   19024:	str	r3, [fp, #-16]
   19028:	mov	r3, #0
   1902c:	str	r3, [fp, #-92]	; 0xffffffa4
   19030:	mov	r3, #0
   19034:	str	r3, [fp, #-88]	; 0xffffffa8
   19038:	ldr	r3, [fp, #-92]	; 0xffffffa4
   1903c:	add	r3, r3, #4
   19040:	str	r3, [fp, #-92]	; 0xffffffa4
   19044:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19048:	add	r3, r3, #1
   1904c:	lsl	r3, r3, #3
   19050:	sub	r2, fp, #12
   19054:	add	r3, r2, r3
   19058:	sub	r2, fp, #20
   1905c:	str	r2, [r3, #-80]	; 0xffffffb0
   19060:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19064:	add	r3, r3, #1
   19068:	lsl	r3, r3, #3
   1906c:	sub	r2, fp, #12
   19070:	add	r3, r2, r3
   19074:	mov	r2, #4
   19078:	str	r2, [r3, #-76]	; 0xffffffb4
   1907c:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19080:	add	r3, r3, #1
   19084:	str	r3, [fp, #-88]	; 0xffffffa8
   19088:	ldr	r3, [fp, #-104]	; 0xffffff98
   1908c:	cmp	r3, #0
   19090:	beq	190e8 <flatcc_builder_create_string@@Base+0x11c>
   19094:	ldr	r2, [fp, #-92]	; 0xffffffa4
   19098:	ldr	r3, [fp, #-104]	; 0xffffff98
   1909c:	add	r3, r2, r3
   190a0:	str	r3, [fp, #-92]	; 0xffffffa4
   190a4:	ldr	r3, [fp, #-88]	; 0xffffffa8
   190a8:	add	r3, r3, #1
   190ac:	lsl	r3, r3, #3
   190b0:	sub	r2, fp, #12
   190b4:	add	r3, r2, r3
   190b8:	ldr	r2, [fp, #-100]	; 0xffffff9c
   190bc:	str	r2, [r3, #-80]	; 0xffffffb0
   190c0:	ldr	r3, [fp, #-88]	; 0xffffffa8
   190c4:	add	r3, r3, #1
   190c8:	lsl	r3, r3, #3
   190cc:	sub	r2, fp, #12
   190d0:	add	r3, r2, r3
   190d4:	ldr	r2, [fp, #-104]	; 0xffffff98
   190d8:	str	r2, [r3, #-76]	; 0xffffffb4
   190dc:	ldr	r3, [fp, #-88]	; 0xffffffa8
   190e0:	add	r3, r3, #1
   190e4:	str	r3, [fp, #-88]	; 0xffffffa8
   190e8:	ldr	r3, [fp, #-16]
   190ec:	cmp	r3, #0
   190f0:	beq	1914c <flatcc_builder_create_string@@Base+0x180>
   190f4:	ldr	r2, [fp, #-92]	; 0xffffffa4
   190f8:	ldr	r3, [fp, #-16]
   190fc:	add	r3, r2, r3
   19100:	str	r3, [fp, #-92]	; 0xffffffa4
   19104:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19108:	add	r3, r3, #1
   1910c:	lsl	r3, r3, #3
   19110:	sub	r2, fp, #12
   19114:	add	r3, r2, r3
   19118:	ldr	r2, [pc, #92]	; 1917c <flatcc_builder_create_string@@Base+0x1b0>
   1911c:	ldr	r2, [r4, r2]
   19120:	str	r2, [r3, #-80]	; 0xffffffb0
   19124:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19128:	add	r3, r3, #1
   1912c:	lsl	r3, r3, #3
   19130:	sub	r2, fp, #12
   19134:	add	r3, r2, r3
   19138:	ldr	r2, [fp, #-16]
   1913c:	str	r2, [r3, #-76]	; 0xffffffb4
   19140:	ldr	r3, [fp, #-88]	; 0xffffffa8
   19144:	add	r3, r3, #1
   19148:	str	r3, [fp, #-88]	; 0xffffffa8
   1914c:	sub	r3, fp, #92	; 0x5c
   19150:	mov	r1, r3
   19154:	ldr	r0, [fp, #-96]	; 0xffffffa0
   19158:	bl	150c4 <flatcc_builder_get_user_frame_ptr@@Base+0x37c>
   1915c:	mov	r3, r0
   19160:	mov	r0, r3
   19164:	sub	sp, fp, #8
   19168:	ldr	r4, [sp]
   1916c:	ldr	fp, [sp, #4]
   19170:	add	sp, sp, #8
   19174:	pop	{pc}		; (ldr pc, [sp], #4)
   19178:	andeq	r3, r1, r8
   1917c:	andeq	r0, r0, r8, asr r0

00019180 <flatcc_builder_create_string_str@@Base>:
   19180:	str	fp, [sp, #-8]!
   19184:	str	lr, [sp, #4]
   19188:	add	fp, sp, #4
   1918c:	sub	sp, sp, #8
   19190:	str	r0, [fp, #-8]
   19194:	str	r1, [fp, #-12]
   19198:	ldr	r0, [fp, #-12]
   1919c:	bl	1202c <strlen@plt>
   191a0:	mov	r3, r0
   191a4:	mov	r2, r3
   191a8:	ldr	r1, [fp, #-12]
   191ac:	ldr	r0, [fp, #-8]
   191b0:	bl	18fcc <flatcc_builder_create_string@@Base>
   191b4:	mov	r3, r0
   191b8:	mov	r0, r3
   191bc:	sub	sp, fp, #4
   191c0:	ldr	fp, [sp]
   191c4:	add	sp, sp, #4
   191c8:	pop	{pc}		; (ldr pc, [sp], #4)

000191cc <flatcc_builder_create_string_strn@@Base>:
   191cc:	str	fp, [sp, #-8]!
   191d0:	str	lr, [sp, #4]
   191d4:	add	fp, sp, #4
   191d8:	sub	sp, sp, #16
   191dc:	str	r0, [fp, #-8]
   191e0:	str	r1, [fp, #-12]
   191e4:	str	r2, [fp, #-16]
   191e8:	ldr	r1, [fp, #-16]
   191ec:	ldr	r0, [fp, #-12]
   191f0:	bl	139a8 <main@@Base+0x1e0>
   191f4:	mov	r3, r0
   191f8:	mov	r2, r3
   191fc:	ldr	r1, [fp, #-12]
   19200:	ldr	r0, [fp, #-8]
   19204:	bl	18fcc <flatcc_builder_create_string@@Base>
   19208:	mov	r3, r0
   1920c:	mov	r0, r3
   19210:	sub	sp, fp, #4
   19214:	ldr	fp, [sp]
   19218:	add	sp, sp, #4
   1921c:	pop	{pc}		; (ldr pc, [sp], #4)

00019220 <flatcc_builder_end_string@@Base>:
   19220:	str	fp, [sp, #-8]!
   19224:	str	lr, [sp, #4]
   19228:	add	fp, sp, #4
   1922c:	sub	sp, sp, #16
   19230:	str	r0, [fp, #-16]
   19234:	ldr	r3, [fp, #-16]
   19238:	ldr	r3, [r3, #32]
   1923c:	ldrh	r3, [r3, #14]
   19240:	cmp	r3, #6
   19244:	beq	19268 <flatcc_builder_end_string@@Base+0x48>
   19248:	ldr	r3, [pc, #168]	; 192f8 <flatcc_builder_end_string@@Base+0xd8>
   1924c:	add	r3, pc, r3
   19250:	movw	r2, #1732	; 0x6c4
   19254:	ldr	r1, [pc, #160]	; 192fc <flatcc_builder_end_string@@Base+0xdc>
   19258:	add	r1, pc, r1
   1925c:	ldr	r0, [pc, #156]	; 19300 <flatcc_builder_end_string@@Base+0xe0>
   19260:	add	r0, pc, r0
   19264:	bl	1208c <__assert_fail@plt>
   19268:	ldr	r3, [fp, #-16]
   1926c:	ldr	r3, [r3, #32]
   19270:	ldr	r2, [r3, #20]
   19274:	ldr	r3, [fp, #-16]
   19278:	ldr	r3, [r3, #20]
   1927c:	cmp	r2, r3
   19280:	beq	192a4 <flatcc_builder_end_string@@Base+0x84>
   19284:	ldr	r3, [pc, #120]	; 19304 <flatcc_builder_end_string@@Base+0xe4>
   19288:	add	r3, pc, r3
   1928c:	movw	r2, #1733	; 0x6c5
   19290:	ldr	r1, [pc, #112]	; 19308 <flatcc_builder_end_string@@Base+0xe8>
   19294:	add	r1, pc, r1
   19298:	ldr	r0, [pc, #108]	; 1930c <flatcc_builder_end_string@@Base+0xec>
   1929c:	add	r0, pc, r0
   192a0:	bl	1208c <__assert_fail@plt>
   192a4:	ldr	r3, [fp, #-16]
   192a8:	ldr	r1, [r3, #16]
   192ac:	ldr	r3, [fp, #-16]
   192b0:	ldr	r3, [r3, #20]
   192b4:	mov	r2, r3
   192b8:	ldr	r0, [fp, #-16]
   192bc:	bl	18fcc <flatcc_builder_create_string@@Base>
   192c0:	str	r0, [fp, #-8]
   192c4:	ldr	r3, [fp, #-8]
   192c8:	cmp	r3, #0
   192cc:	bne	192d8 <flatcc_builder_end_string@@Base+0xb8>
   192d0:	mov	r3, #0
   192d4:	b	192e4 <flatcc_builder_end_string@@Base+0xc4>
   192d8:	ldr	r0, [fp, #-16]
   192dc:	bl	14f68 <flatcc_builder_get_user_frame_ptr@@Base+0x220>
   192e0:	ldr	r3, [fp, #-8]
   192e4:	mov	r0, r3
   192e8:	sub	sp, fp, #4
   192ec:	ldr	fp, [sp]
   192f0:	add	sp, sp, #4
   192f4:	pop	{pc}		; (ldr pc, [sp], #4)
   192f8:	strdeq	r2, [r0], -r8
   192fc:	andeq	r1, r0, r4, lsr #30
   19300:	andeq	r2, r0, r0, lsl #2
   19304:			; <UNDEFINED> instruction: 0x000027bc
   19308:	andeq	r1, r0, r8, ror #29
   1930c:	muleq	r0, r8, r2

00019310 <flatcc_builder_string_edit@@Base>:
   19310:	push	{fp}		; (str fp, [sp, #-4]!)
   19314:	add	fp, sp, #0
   19318:	sub	sp, sp, #12
   1931c:	str	r0, [fp, #-8]
   19320:	ldr	r3, [fp, #-8]
   19324:	ldr	r3, [r3, #16]
   19328:	mov	r0, r3
   1932c:	add	sp, fp, #0
   19330:	pop	{fp}		; (ldr fp, [sp], #4)
   19334:	bx	lr

00019338 <flatcc_builder_string_len@@Base>:
   19338:	push	{fp}		; (str fp, [sp, #-4]!)
   1933c:	add	fp, sp, #0
   19340:	sub	sp, sp, #12
   19344:	str	r0, [fp, #-8]
   19348:	ldr	r3, [fp, #-8]
   1934c:	ldr	r3, [r3, #32]
   19350:	ldr	r3, [r3, #20]
   19354:	mov	r0, r3
   19358:	add	sp, fp, #0
   1935c:	pop	{fp}		; (ldr fp, [sp], #4)
   19360:	bx	lr

00019364 <flatcc_builder_table_add@@Base>:
   19364:	str	fp, [sp, #-8]!
   19368:	str	lr, [sp, #4]
   1936c:	add	fp, sp, #4
   19370:	sub	sp, sp, #16
   19374:	str	r0, [fp, #-8]
   19378:	str	r1, [fp, #-12]
   1937c:	str	r2, [fp, #-16]
   19380:	strh	r3, [fp, #-18]	; 0xffffffee
   19384:	ldr	r3, [fp, #-8]
   19388:	ldr	r3, [r3, #32]
   1938c:	ldrh	r3, [r3, #14]
   19390:	cmp	r3, #3
   19394:	beq	193b8 <flatcc_builder_table_add@@Base+0x54>
   19398:	ldr	r3, [pc, #284]	; 194bc <flatcc_builder_table_add@@Base+0x158>
   1939c:	add	r3, pc, r3
   193a0:	movw	r2, #1773	; 0x6ed
   193a4:	ldr	r1, [pc, #276]	; 194c0 <flatcc_builder_table_add@@Base+0x15c>
   193a8:	add	r1, pc, r1
   193ac:	ldr	r0, [pc, #272]	; 194c4 <flatcc_builder_table_add@@Base+0x160>
   193b0:	add	r0, pc, r0
   193b4:	bl	1208c <__assert_fail@plt>
   193b8:	ldr	r3, [fp, #-12]
   193bc:	cmp	r3, #0
   193c0:	blt	193d4 <flatcc_builder_table_add@@Base+0x70>
   193c4:	ldr	r3, [fp, #-12]
   193c8:	movw	r2, #32764	; 0x7ffc
   193cc:	cmp	r3, r2
   193d0:	ble	193f4 <flatcc_builder_table_add@@Base+0x90>
   193d4:	ldr	r3, [pc, #236]	; 194c8 <flatcc_builder_table_add@@Base+0x164>
   193d8:	add	r3, pc, r3
   193dc:	movw	r2, #1774	; 0x6ee
   193e0:	ldr	r1, [pc, #228]	; 194cc <flatcc_builder_table_add@@Base+0x168>
   193e4:	add	r1, pc, r1
   193e8:	ldr	r0, [pc, #224]	; 194d0 <flatcc_builder_table_add@@Base+0x16c>
   193ec:	add	r0, pc, r0
   193f0:	bl	1208c <__assert_fail@plt>
   193f4:	ldr	r3, [fp, #-8]
   193f8:	ldrh	r3, [r3, #130]	; 0x82
   193fc:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19400:	cmp	r2, r3
   19404:	bls	19414 <flatcc_builder_table_add@@Base+0xb0>
   19408:	ldr	r3, [fp, #-8]
   1940c:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19410:	strh	r2, [r3, #130]	; 0x82
   19414:	ldr	r3, [fp, #-8]
   19418:	ldr	r2, [r3, #4]
   1941c:	ldr	r3, [fp, #-12]
   19420:	lsl	r3, r3, #1
   19424:	add	r3, r2, r3
   19428:	ldrh	r3, [r3]
   1942c:	cmp	r3, #0
   19430:	beq	19454 <flatcc_builder_table_add@@Base+0xf0>
   19434:	ldr	r3, [pc, #152]	; 194d4 <flatcc_builder_table_add@@Base+0x170>
   19438:	add	r3, pc, r3
   1943c:	movw	r2, #1784	; 0x6f8
   19440:	ldr	r1, [pc, #144]	; 194d8 <flatcc_builder_table_add@@Base+0x174>
   19444:	add	r1, pc, r1
   19448:	ldr	r0, [pc, #140]	; 194dc <flatcc_builder_table_add@@Base+0x178>
   1944c:	add	r0, pc, r0
   19450:	bl	1208c <__assert_fail@plt>
   19454:	ldr	r3, [fp, #-8]
   19458:	ldr	r2, [r3, #12]
   1945c:	ldr	r3, [fp, #-12]
   19460:	eor	r2, r2, r3
   19464:	movw	r3, #31153	; 0x79b1
   19468:	movt	r3, #40503	; 0x9e37
   1946c:	mul	r2, r3, r2
   19470:	ldr	r3, [fp, #-16]
   19474:	eor	r2, r2, r3
   19478:	movw	r3, #31153	; 0x79b1
   1947c:	movt	r3, #40503	; 0x9e37
   19480:	mul	r2, r3, r2
   19484:	ldr	r3, [fp, #-8]
   19488:	str	r2, [r3, #12]
   1948c:	ldr	r3, [fp, #-12]
   19490:	uxth	r3, r3
   19494:	ldrh	r2, [fp, #-18]	; 0xffffffee
   19498:	ldr	r1, [fp, #-16]
   1949c:	ldr	r0, [fp, #-8]
   194a0:	bl	13e90 <flatcc_builder_default_alloc@@Base+0x488>
   194a4:	mov	r3, r0
   194a8:	mov	r0, r3
   194ac:	sub	sp, fp, #4
   194b0:	ldr	fp, [sp]
   194b4:	add	sp, sp, #4
   194b8:	pop	{pc}		; (ldr pc, [sp], #4)
   194bc:	andeq	r2, r0, r4, asr #13
   194c0:	ldrdeq	r1, [r0], -r4
   194c4:	andeq	r2, r0, ip, lsl #1
   194c8:	andeq	r2, r0, r8, lsl #13
   194cc:	muleq	r0, r8, sp
   194d0:	andeq	r2, r0, ip, ror #2
   194d4:	andeq	r2, r0, r8, lsr #12
   194d8:	andeq	r1, r0, r8, lsr sp
   194dc:	muleq	r0, r0, sp

000194e0 <flatcc_builder_table_edit@@Base>:
   194e0:	str	fp, [sp, #-8]!
   194e4:	str	lr, [sp, #4]
   194e8:	add	fp, sp, #4
   194ec:	sub	sp, sp, #8
   194f0:	str	r0, [fp, #-8]
   194f4:	str	r1, [fp, #-12]
   194f8:	ldr	r3, [fp, #-8]
   194fc:	ldr	r3, [r3, #32]
   19500:	ldrh	r3, [r3, #14]
   19504:	cmp	r3, #3
   19508:	beq	1952c <flatcc_builder_table_edit@@Base+0x4c>
   1950c:	ldr	r3, [pc, #72]	; 1955c <flatcc_builder_table_edit@@Base+0x7c>
   19510:	add	r3, pc, r3
   19514:	movw	r2, #1794	; 0x702
   19518:	ldr	r1, [pc, #64]	; 19560 <flatcc_builder_table_edit@@Base+0x80>
   1951c:	add	r1, pc, r1
   19520:	ldr	r0, [pc, #60]	; 19564 <flatcc_builder_table_edit@@Base+0x84>
   19524:	add	r0, pc, r0
   19528:	bl	1208c <__assert_fail@plt>
   1952c:	ldr	r3, [fp, #-8]
   19530:	ldr	r2, [r3, #16]
   19534:	ldr	r3, [fp, #-8]
   19538:	ldr	r1, [r3, #20]
   1953c:	ldr	r3, [fp, #-12]
   19540:	sub	r3, r1, r3
   19544:	add	r3, r2, r3
   19548:	mov	r0, r3
   1954c:	sub	sp, fp, #4
   19550:	ldr	fp, [sp]
   19554:	add	sp, sp, #4
   19558:	pop	{pc}		; (ldr pc, [sp], #4)
   1955c:	andeq	r2, r0, ip, ror #10
   19560:	andeq	r1, r0, r0, ror #24
   19564:	andeq	r1, r0, r8, lsl pc

00019568 <flatcc_builder_table_add_copy@@Base>:
   19568:	str	fp, [sp, #-8]!
   1956c:	str	lr, [sp, #4]
   19570:	add	fp, sp, #4
   19574:	sub	sp, sp, #24
   19578:	str	r0, [fp, #-16]
   1957c:	str	r1, [fp, #-20]	; 0xffffffec
   19580:	str	r2, [fp, #-24]	; 0xffffffe8
   19584:	str	r3, [fp, #-28]	; 0xffffffe4
   19588:	ldrh	r3, [fp, #4]
   1958c:	ldr	r2, [fp, #-28]	; 0xffffffe4
   19590:	ldr	r1, [fp, #-20]	; 0xffffffec
   19594:	ldr	r0, [fp, #-16]
   19598:	bl	19364 <flatcc_builder_table_add@@Base>
   1959c:	str	r0, [fp, #-8]
   195a0:	ldr	r3, [fp, #-8]
   195a4:	cmp	r3, #0
   195a8:	beq	195bc <flatcc_builder_table_add_copy@@Base+0x54>
   195ac:	ldr	r2, [fp, #-28]	; 0xffffffe4
   195b0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   195b4:	ldr	r0, [fp, #-8]
   195b8:	bl	11fcc <memcpy@plt>
   195bc:	ldr	r3, [fp, #-8]
   195c0:	mov	r0, r3
   195c4:	sub	sp, fp, #4
   195c8:	ldr	fp, [sp]
   195cc:	add	sp, sp, #4
   195d0:	pop	{pc}		; (ldr pc, [sp], #4)

000195d4 <flatcc_builder_table_add_offset@@Base>:
   195d4:	str	fp, [sp, #-8]!
   195d8:	str	lr, [sp, #4]
   195dc:	add	fp, sp, #4
   195e0:	sub	sp, sp, #8
   195e4:	str	r0, [fp, #-8]
   195e8:	str	r1, [fp, #-12]
   195ec:	ldr	r3, [fp, #-8]
   195f0:	ldr	r3, [r3, #32]
   195f4:	ldrh	r3, [r3, #14]
   195f8:	cmp	r3, #3
   195fc:	beq	19620 <flatcc_builder_table_add_offset@@Base+0x4c>
   19600:	ldr	r3, [pc, #244]	; 196fc <flatcc_builder_table_add_offset@@Base+0x128>
   19604:	add	r3, pc, r3
   19608:	movw	r2, #1811	; 0x713
   1960c:	ldr	r1, [pc, #236]	; 19700 <flatcc_builder_table_add_offset@@Base+0x12c>
   19610:	add	r1, pc, r1
   19614:	ldr	r0, [pc, #232]	; 19704 <flatcc_builder_table_add_offset@@Base+0x130>
   19618:	add	r0, pc, r0
   1961c:	bl	1208c <__assert_fail@plt>
   19620:	ldr	r3, [fp, #-12]
   19624:	cmp	r3, #0
   19628:	blt	1963c <flatcc_builder_table_add_offset@@Base+0x68>
   1962c:	ldr	r3, [fp, #-12]
   19630:	movw	r2, #32764	; 0x7ffc
   19634:	cmp	r3, r2
   19638:	ble	1965c <flatcc_builder_table_add_offset@@Base+0x88>
   1963c:	ldr	r3, [pc, #196]	; 19708 <flatcc_builder_table_add_offset@@Base+0x134>
   19640:	add	r3, pc, r3
   19644:	movw	r2, #1812	; 0x714
   19648:	ldr	r1, [pc, #188]	; 1970c <flatcc_builder_table_add_offset@@Base+0x138>
   1964c:	add	r1, pc, r1
   19650:	ldr	r0, [pc, #184]	; 19710 <flatcc_builder_table_add_offset@@Base+0x13c>
   19654:	add	r0, pc, r0
   19658:	bl	1208c <__assert_fail@plt>
   1965c:	ldr	r3, [fp, #-8]
   19660:	ldr	r2, [r3, #4]
   19664:	ldr	r3, [fp, #-12]
   19668:	lsl	r3, r3, #1
   1966c:	add	r3, r2, r3
   19670:	ldrh	r3, [r3]
   19674:	cmp	r3, #0
   19678:	beq	1969c <flatcc_builder_table_add_offset@@Base+0xc8>
   1967c:	ldr	r3, [pc, #144]	; 19714 <flatcc_builder_table_add_offset@@Base+0x140>
   19680:	add	r3, pc, r3
   19684:	movw	r2, #1819	; 0x71b
   19688:	ldr	r1, [pc, #136]	; 19718 <flatcc_builder_table_add_offset@@Base+0x144>
   1968c:	add	r1, pc, r1
   19690:	ldr	r0, [pc, #132]	; 1971c <flatcc_builder_table_add_offset@@Base+0x148>
   19694:	add	r0, pc, r0
   19698:	bl	1208c <__assert_fail@plt>
   1969c:	ldr	r3, [fp, #-8]
   196a0:	ldr	r2, [r3, #12]
   196a4:	ldr	r3, [fp, #-12]
   196a8:	eor	r2, r2, r3
   196ac:	movw	r3, #31153	; 0x79b1
   196b0:	movt	r3, #40503	; 0x9e37
   196b4:	mul	r3, r3, r2
   196b8:	eor	r2, r3, #4
   196bc:	movw	r3, #31153	; 0x79b1
   196c0:	movt	r3, #40503	; 0x9e37
   196c4:	mul	r2, r3, r2
   196c8:	ldr	r3, [fp, #-8]
   196cc:	str	r2, [r3, #12]
   196d0:	ldr	r3, [fp, #-12]
   196d4:	uxth	r3, r3
   196d8:	mov	r1, r3
   196dc:	ldr	r0, [fp, #-8]
   196e0:	bl	13fb4 <flatcc_builder_default_alloc@@Base+0x5ac>
   196e4:	mov	r3, r0
   196e8:	mov	r0, r3
   196ec:	sub	sp, fp, #4
   196f0:	ldr	fp, [sp]
   196f4:	add	sp, sp, #4
   196f8:	pop	{pc}		; (ldr pc, [sp], #4)
   196fc:	muleq	r0, r4, r4
   19700:	andeq	r1, r0, ip, ror #22
   19704:	andeq	r1, r0, r4, lsr #28
   19708:	andeq	r2, r0, r8, asr r4
   1970c:	andeq	r1, r0, r0, lsr fp
   19710:	andeq	r1, r0, r4, lsl #30
   19714:	andeq	r2, r0, r8, lsl r4
   19718:	strdeq	r1, [r0], -r0
   1971c:	andeq	r1, r0, r8, asr #22

00019720 <flatcc_builder_push_buffer_alignment@@Base>:
   19720:	push	{fp}		; (str fp, [sp, #-4]!)
   19724:	add	fp, sp, #0
   19728:	sub	sp, sp, #20
   1972c:	str	r0, [fp, #-16]
   19730:	ldr	r3, [fp, #-16]
   19734:	ldrh	r3, [r3, #128]	; 0x80
   19738:	strh	r3, [fp, #-6]
   1973c:	ldr	r3, [fp, #-16]
   19740:	mov	r2, #4
   19744:	strh	r2, [r3, #128]	; 0x80
   19748:	ldrh	r3, [fp, #-6]
   1974c:	mov	r0, r3
   19750:	add	sp, fp, #0
   19754:	pop	{fp}		; (ldr fp, [sp], #4)
   19758:	bx	lr

0001975c <flatcc_builder_pop_buffer_alignment@@Base>:
   1975c:	str	fp, [sp, #-8]!
   19760:	str	lr, [sp, #4]
   19764:	add	fp, sp, #4
   19768:	sub	sp, sp, #8
   1976c:	str	r0, [fp, #-8]
   19770:	mov	r3, r1
   19774:	strh	r3, [fp, #-10]
   19778:	ldrh	r3, [fp, #-10]
   1977c:	mov	r1, r3
   19780:	ldr	r0, [fp, #-8]
   19784:	bl	149c0 <flatcc_builder_clear@@Base+0xc4>
   19788:	nop	{0}
   1978c:	sub	sp, fp, #4
   19790:	ldr	fp, [sp]
   19794:	add	sp, sp, #4
   19798:	pop	{pc}		; (ldr pc, [sp], #4)

0001979c <flatcc_builder_get_buffer_alignment@@Base>:
   1979c:	push	{fp}		; (str fp, [sp, #-4]!)
   197a0:	add	fp, sp, #0
   197a4:	sub	sp, sp, #12
   197a8:	str	r0, [fp, #-8]
   197ac:	ldr	r3, [fp, #-8]
   197b0:	ldrh	r3, [r3, #128]	; 0x80
   197b4:	mov	r0, r3
   197b8:	add	sp, fp, #0
   197bc:	pop	{fp}		; (ldr fp, [sp], #4)
   197c0:	bx	lr

000197c4 <flatcc_builder_set_vtable_clustering@@Base>:
   197c4:	push	{fp}		; (str fp, [sp, #-4]!)
   197c8:	add	fp, sp, #0
   197cc:	sub	sp, sp, #12
   197d0:	str	r0, [fp, #-8]
   197d4:	str	r1, [fp, #-12]
   197d8:	ldr	r3, [fp, #-12]
   197dc:	cmp	r3, #0
   197e0:	moveq	r3, #1
   197e4:	movne	r3, #0
   197e8:	uxtb	r3, r3
   197ec:	mov	r2, r3
   197f0:	ldr	r3, [fp, #-8]
   197f4:	str	r2, [r3, #180]	; 0xb4
   197f8:	nop	{0}
   197fc:	add	sp, fp, #0
   19800:	pop	{fp}		; (ldr fp, [sp], #4)
   19804:	bx	lr

00019808 <flatcc_builder_set_block_align@@Base>:
   19808:	push	{fp}		; (str fp, [sp, #-4]!)
   1980c:	add	fp, sp, #0
   19810:	sub	sp, sp, #12
   19814:	str	r0, [fp, #-8]
   19818:	mov	r3, r1
   1981c:	strh	r3, [fp, #-10]
   19820:	ldr	r3, [fp, #-8]
   19824:	ldrh	r2, [fp, #-10]
   19828:	strh	r2, [r3, #132]	; 0x84
   1982c:	nop	{0}
   19830:	add	sp, fp, #0
   19834:	pop	{fp}		; (ldr fp, [sp], #4)
   19838:	bx	lr

0001983c <flatcc_builder_get_level@@Base>:
   1983c:	push	{fp}		; (str fp, [sp, #-4]!)
   19840:	add	fp, sp, #0
   19844:	sub	sp, sp, #12
   19848:	str	r0, [fp, #-8]
   1984c:	ldr	r3, [fp, #-8]
   19850:	ldr	r3, [r3, #156]	; 0x9c
   19854:	mov	r0, r3
   19858:	add	sp, fp, #0
   1985c:	pop	{fp}		; (ldr fp, [sp], #4)
   19860:	bx	lr

00019864 <flatcc_builder_set_max_level@@Base>:
   19864:	push	{fp}		; (str fp, [sp, #-4]!)
   19868:	add	fp, sp, #0
   1986c:	sub	sp, sp, #12
   19870:	str	r0, [fp, #-8]
   19874:	str	r1, [fp, #-12]
   19878:	ldr	r3, [fp, #-8]
   1987c:	ldr	r2, [fp, #-12]
   19880:	str	r2, [r3, #176]	; 0xb0
   19884:	ldr	r3, [fp, #-8]
   19888:	ldr	r2, [r3, #160]	; 0xa0
   1988c:	ldr	r3, [fp, #-8]
   19890:	ldr	r3, [r3, #176]	; 0xb0
   19894:	cmp	r2, r3
   19898:	bge	198ac <flatcc_builder_set_max_level@@Base+0x48>
   1989c:	ldr	r3, [fp, #-8]
   198a0:	ldr	r2, [r3, #176]	; 0xb0
   198a4:	ldr	r3, [fp, #-8]
   198a8:	str	r2, [r3, #160]	; 0xa0
   198ac:	nop	{0}
   198b0:	add	sp, fp, #0
   198b4:	pop	{fp}		; (ldr fp, [sp], #4)
   198b8:	bx	lr

000198bc <flatcc_builder_get_buffer_size@@Base>:
   198bc:	push	{fp}		; (str fp, [sp, #-4]!)
   198c0:	add	fp, sp, #0
   198c4:	sub	sp, sp, #12
   198c8:	str	r0, [fp, #-8]
   198cc:	ldr	r3, [fp, #-8]
   198d0:	ldr	r2, [r3, #140]	; 0x8c
   198d4:	ldr	r3, [fp, #-8]
   198d8:	ldr	r3, [r3, #136]	; 0x88
   198dc:	sub	r3, r2, r3
   198e0:	mov	r0, r3
   198e4:	add	sp, fp, #0
   198e8:	pop	{fp}		; (ldr fp, [sp], #4)
   198ec:	bx	lr

000198f0 <flatcc_builder_get_buffer_start@@Base>:
   198f0:	push	{fp}		; (str fp, [sp, #-4]!)
   198f4:	add	fp, sp, #0
   198f8:	sub	sp, sp, #12
   198fc:	str	r0, [fp, #-8]
   19900:	ldr	r3, [fp, #-8]
   19904:	ldr	r3, [r3, #136]	; 0x88
   19908:	mov	r0, r3
   1990c:	add	sp, fp, #0
   19910:	pop	{fp}		; (ldr fp, [sp], #4)
   19914:	bx	lr

00019918 <flatcc_builder_get_buffer_end@@Base>:
   19918:	push	{fp}		; (str fp, [sp, #-4]!)
   1991c:	add	fp, sp, #0
   19920:	sub	sp, sp, #12
   19924:	str	r0, [fp, #-8]
   19928:	ldr	r3, [fp, #-8]
   1992c:	ldr	r3, [r3, #140]	; 0x8c
   19930:	mov	r0, r3
   19934:	add	sp, fp, #0
   19938:	pop	{fp}		; (ldr fp, [sp], #4)
   1993c:	bx	lr

00019940 <flatcc_builder_set_vtable_cache_limit@@Base>:
   19940:	push	{fp}		; (str fp, [sp, #-4]!)
   19944:	add	fp, sp, #0
   19948:	sub	sp, sp, #12
   1994c:	str	r0, [fp, #-8]
   19950:	str	r1, [fp, #-12]
   19954:	ldr	r3, [fp, #-8]
   19958:	ldr	r2, [fp, #-12]
   1995c:	str	r2, [r3, #172]	; 0xac
   19960:	nop	{0}
   19964:	add	sp, fp, #0
   19968:	pop	{fp}		; (ldr fp, [sp], #4)
   1996c:	bx	lr

00019970 <flatcc_builder_set_identifier@@Base>:
   19970:	push	{fp}		; (str fp, [sp, #-4]!)
   19974:	add	fp, sp, #0
   19978:	sub	sp, sp, #12
   1997c:	str	r0, [fp, #-8]
   19980:	str	r1, [fp, #-12]
   19984:	ldr	r1, [pc, #60]	; 199c8 <flatcc_builder_set_identifier@@Base+0x58>
   19988:	add	r1, pc, r1
   1998c:	ldr	r3, [fp, #-8]
   19990:	add	r2, r3, #168	; 0xa8
   19994:	ldr	r3, [fp, #-12]
   19998:	cmp	r3, #0
   1999c:	beq	199a8 <flatcc_builder_set_identifier@@Base+0x38>
   199a0:	ldr	r3, [fp, #-12]
   199a4:	b	199b0 <flatcc_builder_set_identifier@@Base+0x40>
   199a8:	ldr	r3, [pc, #28]	; 199cc <flatcc_builder_set_identifier@@Base+0x5c>
   199ac:	ldr	r3, [r1, r3]
   199b0:	ldr	r3, [r3]
   199b4:	str	r3, [r2]
   199b8:	nop	{0}
   199bc:	add	sp, fp, #0
   199c0:	pop	{fp}		; (ldr fp, [sp], #4)
   199c4:	bx	lr
   199c8:	andeq	r2, r1, r0, ror r6
   199cc:	andeq	r0, r0, r8, asr r0

000199d0 <flatcc_builder_get_type@@Base>:
   199d0:	push	{fp}		; (str fp, [sp, #-4]!)
   199d4:	add	fp, sp, #0
   199d8:	sub	sp, sp, #12
   199dc:	str	r0, [fp, #-8]
   199e0:	ldr	r3, [fp, #-8]
   199e4:	ldr	r3, [r3, #32]
   199e8:	cmp	r3, #0
   199ec:	beq	19a00 <flatcc_builder_get_type@@Base+0x30>
   199f0:	ldr	r3, [fp, #-8]
   199f4:	ldr	r3, [r3, #32]
   199f8:	ldrh	r3, [r3, #14]
   199fc:	b	19a04 <flatcc_builder_get_type@@Base+0x34>
   19a00:	mov	r3, #0
   19a04:	mov	r0, r3
   19a08:	add	sp, fp, #0
   19a0c:	pop	{fp}		; (ldr fp, [sp], #4)
   19a10:	bx	lr

00019a14 <flatcc_builder_get_type_at@@Base>:
   19a14:	push	{fp}		; (str fp, [sp, #-4]!)
   19a18:	add	fp, sp, #0
   19a1c:	sub	sp, sp, #12
   19a20:	str	r0, [fp, #-8]
   19a24:	str	r1, [fp, #-12]
   19a28:	ldr	r3, [fp, #-12]
   19a2c:	cmp	r3, #0
   19a30:	ble	19a48 <flatcc_builder_get_type_at@@Base+0x34>
   19a34:	ldr	r3, [fp, #-8]
   19a38:	ldr	r3, [r3, #156]	; 0x9c
   19a3c:	ldr	r2, [fp, #-12]
   19a40:	cmp	r2, r3
   19a44:	ble	19a50 <flatcc_builder_get_type_at@@Base+0x3c>
   19a48:	mov	r3, #0
   19a4c:	b	19a84 <flatcc_builder_get_type_at@@Base+0x70>
   19a50:	ldr	r3, [fp, #-8]
   19a54:	ldr	r2, [r3, #32]
   19a58:	ldr	r3, [fp, #-8]
   19a5c:	ldr	r3, [r3, #156]	; 0x9c
   19a60:	ldr	r1, [fp, #-12]
   19a64:	sub	r3, r1, r3
   19a68:	mov	r1, r3
   19a6c:	mov	r3, r1
   19a70:	lsl	r3, r3, #3
   19a74:	add	r3, r3, r1
   19a78:	lsl	r3, r3, #2
   19a7c:	add	r3, r2, r3
   19a80:	ldrh	r3, [r3, #14]
   19a84:	mov	r0, r3
   19a88:	add	sp, fp, #0
   19a8c:	pop	{fp}		; (ldr fp, [sp], #4)
   19a90:	bx	lr

00019a94 <flatcc_builder_get_direct_buffer@@Base>:
   19a94:	str	fp, [sp, #-8]!
   19a98:	str	lr, [sp, #4]
   19a9c:	add	fp, sp, #4
   19aa0:	sub	sp, sp, #8
   19aa4:	str	r0, [fp, #-8]
   19aa8:	str	r1, [fp, #-12]
   19aac:	ldr	r3, [fp, #-8]
   19ab0:	ldr	r3, [r3, #184]	; 0xb8
   19ab4:	cmp	r3, #0
   19ab8:	beq	19ad8 <flatcc_builder_get_direct_buffer@@Base+0x44>
   19abc:	ldr	r3, [fp, #-8]
   19ac0:	add	r3, r3, #188	; 0xbc
   19ac4:	ldr	r1, [fp, #-12]
   19ac8:	mov	r0, r3
   19acc:	bl	13928 <main@@Base+0x160>
   19ad0:	mov	r3, r0
   19ad4:	b	19af4 <flatcc_builder_get_direct_buffer@@Base+0x60>
   19ad8:	ldr	r3, [fp, #-12]
   19adc:	cmp	r3, #0
   19ae0:	beq	19af0 <flatcc_builder_get_direct_buffer@@Base+0x5c>
   19ae4:	ldr	r3, [fp, #-12]
   19ae8:	mov	r2, #0
   19aec:	str	r2, [r3]
   19af0:	mov	r3, #0
   19af4:	mov	r0, r3
   19af8:	sub	sp, fp, #4
   19afc:	ldr	fp, [sp]
   19b00:	add	sp, sp, #4
   19b04:	pop	{pc}		; (ldr pc, [sp], #4)

00019b08 <flatcc_builder_copy_buffer@@Base>:
   19b08:	str	fp, [sp, #-8]!
   19b0c:	str	lr, [sp, #4]
   19b10:	add	fp, sp, #4
   19b14:	sub	sp, sp, #16
   19b18:	str	r0, [fp, #-8]
   19b1c:	str	r1, [fp, #-12]
   19b20:	str	r2, [fp, #-16]
   19b24:	ldr	r3, [fp, #-8]
   19b28:	ldr	r3, [r3, #184]	; 0xb8
   19b2c:	cmp	r3, #0
   19b30:	bne	19b3c <flatcc_builder_copy_buffer@@Base+0x34>
   19b34:	mov	r3, #0
   19b38:	b	19b88 <flatcc_builder_copy_buffer@@Base+0x80>
   19b3c:	ldr	r3, [fp, #-8]
   19b40:	add	r3, r3, #188	; 0xbc
   19b44:	ldr	r2, [fp, #-16]
   19b48:	ldr	r1, [fp, #-12]
   19b4c:	mov	r0, r3
   19b50:	bl	1a95c <flatcc_emitter_copy_buffer@@Base>
   19b54:	str	r0, [fp, #-12]
   19b58:	ldr	r3, [fp, #-12]
   19b5c:	cmp	r3, #0
   19b60:	bne	19b84 <flatcc_builder_copy_buffer@@Base+0x7c>
   19b64:	ldr	r3, [pc, #48]	; 19b9c <flatcc_builder_copy_buffer@@Base+0x94>
   19b68:	add	r3, pc, r3
   19b6c:	movw	r2, #1926	; 0x786
   19b70:	ldr	r1, [pc, #40]	; 19ba0 <flatcc_builder_copy_buffer@@Base+0x98>
   19b74:	add	r1, pc, r1
   19b78:	ldr	r0, [pc, #36]	; 19ba4 <flatcc_builder_copy_buffer@@Base+0x9c>
   19b7c:	add	r0, pc, r0
   19b80:	bl	1208c <__assert_fail@plt>
   19b84:	ldr	r3, [fp, #-12]
   19b88:	mov	r0, r3
   19b8c:	sub	sp, fp, #4
   19b90:	ldr	fp, [sp]
   19b94:	add	sp, sp, #4
   19b98:	pop	{pc}		; (ldr pc, [sp], #4)
   19b9c:	andeq	r1, r0, r0, asr pc
   19ba0:	andeq	r1, r0, r8, lsl #12
   19ba4:	andeq	r1, r0, r0, lsr #20

00019ba8 <flatcc_builder_finalize_buffer@@Base>:
   19ba8:	str	fp, [sp, #-8]!
   19bac:	str	lr, [sp, #4]
   19bb0:	add	fp, sp, #4
   19bb4:	sub	sp, sp, #16
   19bb8:	str	r0, [fp, #-16]
   19bbc:	str	r1, [fp, #-20]	; 0xffffffec
   19bc0:	ldr	r0, [fp, #-16]
   19bc4:	bl	198bc <flatcc_builder_get_buffer_size@@Base>
   19bc8:	str	r0, [fp, #-8]
   19bcc:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bd0:	cmp	r3, #0
   19bd4:	beq	19be4 <flatcc_builder_finalize_buffer@@Base+0x3c>
   19bd8:	ldr	r3, [fp, #-20]	; 0xffffffec
   19bdc:	ldr	r2, [fp, #-8]
   19be0:	str	r2, [r3]
   19be4:	ldr	r0, [fp, #-8]
   19be8:	bl	12008 <malloc@plt>
   19bec:	mov	r3, r0
   19bf0:	str	r3, [fp, #-12]
   19bf4:	ldr	r3, [fp, #-12]
   19bf8:	cmp	r3, #0
   19bfc:	bne	19c20 <flatcc_builder_finalize_buffer@@Base+0x78>
   19c00:	ldr	r3, [pc, #148]	; 19c9c <flatcc_builder_finalize_buffer@@Base+0xf4>
   19c04:	add	r3, pc, r3
   19c08:	movw	r2, #1944	; 0x798
   19c0c:	ldr	r1, [pc, #140]	; 19ca0 <flatcc_builder_finalize_buffer@@Base+0xf8>
   19c10:	add	r1, pc, r1
   19c14:	ldr	r0, [pc, #136]	; 19ca4 <flatcc_builder_finalize_buffer@@Base+0xfc>
   19c18:	add	r0, pc, r0
   19c1c:	bl	1208c <__assert_fail@plt>
   19c20:	ldr	r2, [fp, #-8]
   19c24:	ldr	r1, [fp, #-12]
   19c28:	ldr	r0, [fp, #-16]
   19c2c:	bl	19b08 <flatcc_builder_copy_buffer@@Base>
   19c30:	mov	r3, r0
   19c34:	cmp	r3, #0
   19c38:	bne	19c5c <flatcc_builder_finalize_buffer@@Base+0xb4>
   19c3c:	ldr	r3, [pc, #100]	; 19ca8 <flatcc_builder_finalize_buffer@@Base+0x100>
   19c40:	add	r3, pc, r3
   19c44:	movw	r2, #1948	; 0x79c
   19c48:	ldr	r1, [pc, #92]	; 19cac <flatcc_builder_finalize_buffer@@Base+0x104>
   19c4c:	add	r1, pc, r1
   19c50:	ldr	r0, [pc, #88]	; 19cb0 <flatcc_builder_finalize_buffer@@Base+0x108>
   19c54:	add	r0, pc, r0
   19c58:	bl	1208c <__assert_fail@plt>
   19c5c:	nop	{0}
   19c60:	ldr	r3, [fp, #-12]
   19c64:	cmp	r3, #0
   19c68:	bne	19c84 <flatcc_builder_finalize_buffer@@Base+0xdc>
   19c6c:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c70:	cmp	r3, #0
   19c74:	beq	19c84 <flatcc_builder_finalize_buffer@@Base+0xdc>
   19c78:	ldr	r3, [fp, #-20]	; 0xffffffec
   19c7c:	mov	r2, #0
   19c80:	str	r2, [r3]
   19c84:	ldr	r3, [fp, #-12]
   19c88:	mov	r0, r3
   19c8c:	sub	sp, fp, #4
   19c90:	ldr	fp, [sp]
   19c94:	add	sp, sp, #4
   19c98:	pop	{pc}		; (ldr pc, [sp], #4)
   19c9c:	ldrdeq	r1, [r0], -r0
   19ca0:	andeq	r1, r0, ip, ror #10
   19ca4:	andeq	r1, r0, r4, asr #11
   19ca8:	muleq	r0, r4, lr
   19cac:	andeq	r1, r0, r0, lsr r5
   19cb0:	andeq	r1, r0, r8, lsl #11

00019cb4 <flatcc_builder_finalize_aligned_buffer@@Base>:
   19cb4:	str	fp, [sp, #-8]!
   19cb8:	str	lr, [sp, #4]
   19cbc:	add	fp, sp, #4
   19cc0:	sub	sp, sp, #24
   19cc4:	str	r0, [fp, #-24]	; 0xffffffe8
   19cc8:	str	r1, [fp, #-28]	; 0xffffffe4
   19ccc:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19cd0:	bl	198bc <flatcc_builder_get_buffer_size@@Base>
   19cd4:	str	r0, [fp, #-12]
   19cd8:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19cdc:	cmp	r3, #0
   19ce0:	beq	19cf0 <flatcc_builder_finalize_aligned_buffer@@Base+0x3c>
   19ce4:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19ce8:	ldr	r2, [fp, #-12]
   19cec:	str	r2, [r3]
   19cf0:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19cf4:	bl	1979c <flatcc_builder_get_buffer_alignment@@Base>
   19cf8:	mov	r3, r0
   19cfc:	str	r3, [fp, #-16]
   19d00:	ldr	r2, [fp, #-12]
   19d04:	ldr	r3, [fp, #-16]
   19d08:	add	r3, r2, r3
   19d0c:	sub	r2, r3, #1
   19d10:	ldr	r3, [fp, #-16]
   19d14:	rsb	r3, r3, #0
   19d18:	and	r3, r3, r2
   19d1c:	str	r3, [fp, #-12]
   19d20:	ldr	r1, [fp, #-12]
   19d24:	ldr	r0, [fp, #-16]
   19d28:	bl	13828 <main@@Base+0x60>
   19d2c:	str	r0, [fp, #-8]
   19d30:	ldr	r3, [fp, #-8]
   19d34:	cmp	r3, #0
   19d38:	beq	19d6c <flatcc_builder_finalize_aligned_buffer@@Base+0xb8>
   19d3c:	ldr	r2, [fp, #-12]
   19d40:	ldr	r1, [fp, #-8]
   19d44:	ldr	r0, [fp, #-24]	; 0xffffffe8
   19d48:	bl	19b08 <flatcc_builder_copy_buffer@@Base>
   19d4c:	mov	r3, r0
   19d50:	cmp	r3, #0
   19d54:	bne	19d74 <flatcc_builder_finalize_aligned_buffer@@Base+0xc0>
   19d58:	ldr	r0, [fp, #-8]
   19d5c:	bl	11fc0 <free@plt>
   19d60:	mov	r3, #0
   19d64:	str	r3, [fp, #-8]
   19d68:	b	19d78 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   19d6c:	nop	{0}
   19d70:	b	19d78 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   19d74:	nop	{0}
   19d78:	ldr	r3, [fp, #-8]
   19d7c:	cmp	r3, #0
   19d80:	bne	19d9c <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   19d84:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19d88:	cmp	r3, #0
   19d8c:	beq	19d9c <flatcc_builder_finalize_aligned_buffer@@Base+0xe8>
   19d90:	ldr	r3, [fp, #-28]	; 0xffffffe4
   19d94:	mov	r2, #0
   19d98:	str	r2, [r3]
   19d9c:	ldr	r3, [fp, #-8]
   19da0:	mov	r0, r3
   19da4:	sub	sp, fp, #4
   19da8:	ldr	fp, [sp]
   19dac:	add	sp, sp, #4
   19db0:	pop	{pc}		; (ldr pc, [sp], #4)

00019db4 <flatcc_builder_aligned_alloc@@Base>:
   19db4:	str	fp, [sp, #-8]!
   19db8:	str	lr, [sp, #4]
   19dbc:	add	fp, sp, #4
   19dc0:	sub	sp, sp, #8
   19dc4:	str	r0, [fp, #-8]
   19dc8:	str	r1, [fp, #-12]
   19dcc:	ldr	r1, [fp, #-12]
   19dd0:	ldr	r0, [fp, #-8]
   19dd4:	bl	13828 <main@@Base+0x60>
   19dd8:	mov	r3, r0
   19ddc:	mov	r0, r3
   19de0:	sub	sp, fp, #4
   19de4:	ldr	fp, [sp]
   19de8:	add	sp, sp, #4
   19dec:	pop	{pc}		; (ldr pc, [sp], #4)

00019df0 <flatcc_builder_aligned_free@@Base>:
   19df0:	str	fp, [sp, #-8]!
   19df4:	str	lr, [sp, #4]
   19df8:	add	fp, sp, #4
   19dfc:	sub	sp, sp, #8
   19e00:	str	r0, [fp, #-8]
   19e04:	ldr	r0, [fp, #-8]
   19e08:	bl	11fc0 <free@plt>
   19e0c:	nop	{0}
   19e10:	sub	sp, fp, #4
   19e14:	ldr	fp, [sp]
   19e18:	add	sp, sp, #4
   19e1c:	pop	{pc}		; (ldr pc, [sp], #4)

00019e20 <flatcc_builder_get_emit_context@@Base>:
   19e20:	push	{fp}		; (str fp, [sp, #-4]!)
   19e24:	add	fp, sp, #0
   19e28:	sub	sp, sp, #12
   19e2c:	str	r0, [fp, #-8]
   19e30:	ldr	r3, [fp, #-8]
   19e34:	ldr	r3, [r3, #36]	; 0x24
   19e38:	mov	r0, r3
   19e3c:	add	sp, fp, #0
   19e40:	pop	{fp}		; (ldr fp, [sp], #4)
   19e44:	bx	lr
   19e48:	str	fp, [sp, #-8]!
   19e4c:	str	lr, [sp, #4]
   19e50:	add	fp, sp, #4
   19e54:	sub	sp, sp, #16
   19e58:	str	r0, [fp, #-16]
   19e5c:	mov	r3, #0
   19e60:	str	r3, [fp, #-8]
   19e64:	ldr	r3, [fp, #-16]
   19e68:	ldr	r3, [r3]
   19e6c:	cmp	r3, #0
   19e70:	beq	19ec8 <flatcc_builder_get_emit_context@@Base+0xa8>
   19e74:	ldr	r3, [fp, #-16]
   19e78:	ldr	r3, [r3]
   19e7c:	ldr	r2, [r3, #2948]	; 0xb84
   19e80:	ldr	r3, [fp, #-16]
   19e84:	ldr	r3, [r3, #4]
   19e88:	cmp	r2, r3
   19e8c:	beq	19ec8 <flatcc_builder_get_emit_context@@Base+0xa8>
   19e90:	ldr	r3, [fp, #-16]
   19e94:	ldr	r3, [r3]
   19e98:	ldr	r2, [r3, #2952]	; 0xb88
   19e9c:	ldr	r3, [fp, #-16]
   19ea0:	ldr	r3, [r3]
   19ea4:	ldr	r3, [r3, #2948]	; 0xb84
   19ea8:	sub	r2, r2, #2944	; 0xb80
   19eac:	str	r2, [r3, #2952]	; 0xb88
   19eb0:	ldr	r3, [fp, #-16]
   19eb4:	ldr	r3, [r3]
   19eb8:	ldr	r2, [r3, #2948]	; 0xb84
   19ebc:	ldr	r3, [fp, #-16]
   19ec0:	str	r2, [r3]
   19ec4:	b	19ff0 <flatcc_builder_get_emit_context@@Base+0x1d0>
   19ec8:	movw	r0, #2956	; 0xb8c
   19ecc:	bl	12008 <malloc@plt>
   19ed0:	mov	r3, r0
   19ed4:	str	r3, [fp, #-8]
   19ed8:	ldr	r3, [fp, #-8]
   19edc:	cmp	r3, #0
   19ee0:	bne	19eec <flatcc_builder_get_emit_context@@Base+0xcc>
   19ee4:	mvn	r3, #0
   19ee8:	b	1a034 <flatcc_builder_get_emit_context@@Base+0x214>
   19eec:	ldr	r3, [fp, #-16]
   19ef0:	ldr	r3, [r3, #28]
   19ef4:	add	r2, r3, #2944	; 0xb80
   19ef8:	ldr	r3, [fp, #-16]
   19efc:	str	r2, [r3, #28]
   19f00:	ldr	r3, [fp, #-16]
   19f04:	ldr	r3, [r3]
   19f08:	cmp	r3, #0
   19f0c:	beq	19f60 <flatcc_builder_get_emit_context@@Base+0x140>
   19f10:	ldr	r3, [fp, #-16]
   19f14:	ldr	r2, [r3, #4]
   19f18:	ldr	r3, [fp, #-8]
   19f1c:	str	r2, [r3, #2948]	; 0xb84
   19f20:	ldr	r3, [fp, #-16]
   19f24:	ldr	r2, [r3]
   19f28:	ldr	r3, [fp, #-8]
   19f2c:	str	r2, [r3, #2944]	; 0xb80
   19f30:	ldr	r3, [fp, #-16]
   19f34:	ldr	r3, [r3]
   19f38:	ldr	r2, [fp, #-8]
   19f3c:	str	r2, [r3, #2948]	; 0xb84
   19f40:	ldr	r3, [fp, #-16]
   19f44:	ldr	r3, [r3, #4]
   19f48:	ldr	r2, [fp, #-8]
   19f4c:	str	r2, [r3, #2944]	; 0xb80
   19f50:	ldr	r3, [fp, #-16]
   19f54:	ldr	r2, [fp, #-8]
   19f58:	str	r2, [r3]
   19f5c:	b	19ff0 <flatcc_builder_get_emit_context@@Base+0x1d0>
   19f60:	ldr	r3, [fp, #-16]
   19f64:	ldr	r2, [fp, #-8]
   19f68:	str	r2, [r3]
   19f6c:	ldr	r3, [fp, #-16]
   19f70:	ldr	r2, [fp, #-8]
   19f74:	str	r2, [r3, #4]
   19f78:	ldr	r3, [fp, #-8]
   19f7c:	ldr	r2, [fp, #-8]
   19f80:	str	r2, [r3, #2944]	; 0xb80
   19f84:	ldr	r3, [fp, #-8]
   19f88:	ldr	r2, [fp, #-8]
   19f8c:	str	r2, [r3, #2948]	; 0xb84
   19f90:	ldr	r3, [fp, #-16]
   19f94:	ldr	r3, [r3]
   19f98:	add	r2, r3, #1472	; 0x5c0
   19f9c:	ldr	r3, [fp, #-16]
   19fa0:	str	r2, [r3, #8]
   19fa4:	ldr	r3, [fp, #-16]
   19fa8:	ldr	r2, [r3, #8]
   19fac:	ldr	r3, [fp, #-16]
   19fb0:	str	r2, [r3, #16]
   19fb4:	ldr	r3, [fp, #-16]
   19fb8:	mov	r2, #1472	; 0x5c0
   19fbc:	str	r2, [r3, #12]
   19fc0:	ldr	r3, [fp, #-16]
   19fc4:	ldr	r3, [r3, #12]
   19fc8:	rsb	r2, r3, #2944	; 0xb80
   19fcc:	ldr	r3, [fp, #-16]
   19fd0:	str	r2, [r3, #20]
   19fd4:	ldr	r3, [fp, #-16]
   19fd8:	ldr	r3, [r3, #12]
   19fdc:	rsb	r2, r3, #0
   19fe0:	ldr	r3, [fp, #-8]
   19fe4:	str	r2, [r3, #2952]	; 0xb88
   19fe8:	mov	r3, #0
   19fec:	b	1a034 <flatcc_builder_get_emit_context@@Base+0x214>
   19ff0:	ldr	r3, [fp, #-16]
   19ff4:	ldr	r3, [r3]
   19ff8:	add	r2, r3, #2944	; 0xb80
   19ffc:	ldr	r3, [fp, #-16]
   1a000:	str	r2, [r3, #8]
   1a004:	ldr	r3, [fp, #-16]
   1a008:	mov	r2, #2944	; 0xb80
   1a00c:	str	r2, [r3, #12]
   1a010:	ldr	r3, [fp, #-16]
   1a014:	ldr	r3, [r3]
   1a018:	ldr	r3, [r3, #2944]	; 0xb80
   1a01c:	ldr	r2, [r3, #2952]	; 0xb88
   1a020:	ldr	r3, [fp, #-16]
   1a024:	ldr	r3, [r3]
   1a028:	sub	r2, r2, #2944	; 0xb80
   1a02c:	str	r2, [r3, #2952]	; 0xb88
   1a030:	mov	r3, #0
   1a034:	mov	r0, r3
   1a038:	sub	sp, fp, #4
   1a03c:	ldr	fp, [sp]
   1a040:	add	sp, sp, #4
   1a044:	pop	{pc}		; (ldr pc, [sp], #4)
   1a048:	str	fp, [sp, #-8]!
   1a04c:	str	lr, [sp, #4]
   1a050:	add	fp, sp, #4
   1a054:	sub	sp, sp, #16
   1a058:	str	r0, [fp, #-16]
   1a05c:	mov	r3, #0
   1a060:	str	r3, [fp, #-8]
   1a064:	ldr	r3, [fp, #-16]
   1a068:	ldr	r3, [r3, #4]
   1a06c:	cmp	r3, #0
   1a070:	beq	1a0a8 <flatcc_builder_get_emit_context@@Base+0x288>
   1a074:	ldr	r3, [fp, #-16]
   1a078:	ldr	r3, [r3, #4]
   1a07c:	ldr	r2, [r3, #2944]	; 0xb80
   1a080:	ldr	r3, [fp, #-16]
   1a084:	ldr	r3, [r3]
   1a088:	cmp	r2, r3
   1a08c:	beq	1a0a8 <flatcc_builder_get_emit_context@@Base+0x288>
   1a090:	ldr	r3, [fp, #-16]
   1a094:	ldr	r3, [r3, #4]
   1a098:	ldr	r2, [r3, #2944]	; 0xb80
   1a09c:	ldr	r3, [fp, #-16]
   1a0a0:	str	r2, [r3, #4]
   1a0a4:	b	1a1d0 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1a0a8:	movw	r0, #2956	; 0xb8c
   1a0ac:	bl	12008 <malloc@plt>
   1a0b0:	mov	r3, r0
   1a0b4:	str	r3, [fp, #-8]
   1a0b8:	ldr	r3, [fp, #-8]
   1a0bc:	cmp	r3, #0
   1a0c0:	bne	1a0cc <flatcc_builder_get_emit_context@@Base+0x2ac>
   1a0c4:	mvn	r3, #0
   1a0c8:	b	1a214 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a0cc:	ldr	r3, [fp, #-16]
   1a0d0:	ldr	r3, [r3, #28]
   1a0d4:	add	r2, r3, #2944	; 0xb80
   1a0d8:	ldr	r3, [fp, #-16]
   1a0dc:	str	r2, [r3, #28]
   1a0e0:	ldr	r3, [fp, #-16]
   1a0e4:	ldr	r3, [r3, #4]
   1a0e8:	cmp	r3, #0
   1a0ec:	beq	1a140 <flatcc_builder_get_emit_context@@Base+0x320>
   1a0f0:	ldr	r3, [fp, #-16]
   1a0f4:	ldr	r2, [r3, #4]
   1a0f8:	ldr	r3, [fp, #-8]
   1a0fc:	str	r2, [r3, #2948]	; 0xb84
   1a100:	ldr	r3, [fp, #-16]
   1a104:	ldr	r2, [r3]
   1a108:	ldr	r3, [fp, #-8]
   1a10c:	str	r2, [r3, #2944]	; 0xb80
   1a110:	ldr	r3, [fp, #-16]
   1a114:	ldr	r3, [r3]
   1a118:	ldr	r2, [fp, #-8]
   1a11c:	str	r2, [r3, #2948]	; 0xb84
   1a120:	ldr	r3, [fp, #-16]
   1a124:	ldr	r3, [r3, #4]
   1a128:	ldr	r2, [fp, #-8]
   1a12c:	str	r2, [r3, #2944]	; 0xb80
   1a130:	ldr	r3, [fp, #-16]
   1a134:	ldr	r2, [fp, #-8]
   1a138:	str	r2, [r3, #4]
   1a13c:	b	1a1d0 <flatcc_builder_get_emit_context@@Base+0x3b0>
   1a140:	ldr	r3, [fp, #-16]
   1a144:	ldr	r2, [fp, #-8]
   1a148:	str	r2, [r3]
   1a14c:	ldr	r3, [fp, #-16]
   1a150:	ldr	r2, [fp, #-8]
   1a154:	str	r2, [r3, #4]
   1a158:	ldr	r3, [fp, #-8]
   1a15c:	ldr	r2, [fp, #-8]
   1a160:	str	r2, [r3, #2944]	; 0xb80
   1a164:	ldr	r3, [fp, #-8]
   1a168:	ldr	r2, [fp, #-8]
   1a16c:	str	r2, [r3, #2948]	; 0xb84
   1a170:	ldr	r3, [fp, #-16]
   1a174:	ldr	r3, [r3]
   1a178:	add	r2, r3, #1472	; 0x5c0
   1a17c:	ldr	r3, [fp, #-16]
   1a180:	str	r2, [r3, #8]
   1a184:	ldr	r3, [fp, #-16]
   1a188:	ldr	r2, [r3, #8]
   1a18c:	ldr	r3, [fp, #-16]
   1a190:	str	r2, [r3, #16]
   1a194:	ldr	r3, [fp, #-16]
   1a198:	mov	r2, #1472	; 0x5c0
   1a19c:	str	r2, [r3, #12]
   1a1a0:	ldr	r3, [fp, #-16]
   1a1a4:	ldr	r3, [r3, #12]
   1a1a8:	rsb	r2, r3, #2944	; 0xb80
   1a1ac:	ldr	r3, [fp, #-16]
   1a1b0:	str	r2, [r3, #20]
   1a1b4:	ldr	r3, [fp, #-16]
   1a1b8:	ldr	r3, [r3, #12]
   1a1bc:	rsb	r2, r3, #0
   1a1c0:	ldr	r3, [fp, #-8]
   1a1c4:	str	r2, [r3, #2952]	; 0xb88
   1a1c8:	mov	r3, #0
   1a1cc:	b	1a214 <flatcc_builder_get_emit_context@@Base+0x3f4>
   1a1d0:	ldr	r3, [fp, #-16]
   1a1d4:	ldr	r3, [r3, #4]
   1a1d8:	mov	r2, r3
   1a1dc:	ldr	r3, [fp, #-16]
   1a1e0:	str	r2, [r3, #16]
   1a1e4:	ldr	r3, [fp, #-16]
   1a1e8:	mov	r2, #2944	; 0xb80
   1a1ec:	str	r2, [r3, #20]
   1a1f0:	ldr	r3, [fp, #-16]
   1a1f4:	ldr	r3, [r3, #4]
   1a1f8:	ldr	r3, [r3, #2948]	; 0xb84
   1a1fc:	ldr	r2, [r3, #2952]	; 0xb88
   1a200:	ldr	r3, [fp, #-16]
   1a204:	ldr	r3, [r3, #4]
   1a208:	add	r2, r2, #2944	; 0xb80
   1a20c:	str	r2, [r3, #2952]	; 0xb88
   1a210:	mov	r3, #0
   1a214:	mov	r0, r3
   1a218:	sub	sp, fp, #4
   1a21c:	ldr	fp, [sp]
   1a220:	add	sp, sp, #4
   1a224:	pop	{pc}		; (ldr pc, [sp], #4)
   1a228:	str	fp, [sp, #-8]!
   1a22c:	str	lr, [sp, #4]
   1a230:	add	fp, sp, #4
   1a234:	sub	sp, sp, #24
   1a238:	str	r0, [fp, #-16]
   1a23c:	str	r1, [fp, #-20]	; 0xffffffec
   1a240:	str	r2, [fp, #-24]	; 0xffffffe8
   1a244:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a248:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a24c:	add	r3, r2, r3
   1a250:	str	r3, [fp, #-20]	; 0xffffffec
   1a254:	b	1a318 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1a258:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a25c:	str	r3, [fp, #-8]
   1a260:	ldr	r3, [fp, #-16]
   1a264:	ldr	r3, [r3, #12]
   1a268:	ldr	r2, [fp, #-8]
   1a26c:	cmp	r2, r3
   1a270:	bls	1a2a8 <flatcc_builder_get_emit_context@@Base+0x488>
   1a274:	ldr	r3, [fp, #-16]
   1a278:	ldr	r3, [r3, #12]
   1a27c:	str	r3, [fp, #-8]
   1a280:	ldr	r3, [fp, #-8]
   1a284:	cmp	r3, #0
   1a288:	bne	1a2a8 <flatcc_builder_get_emit_context@@Base+0x488>
   1a28c:	ldr	r0, [fp, #-16]
   1a290:	bl	19e48 <flatcc_builder_get_emit_context@@Base+0x28>
   1a294:	mov	r3, r0
   1a298:	cmp	r3, #0
   1a29c:	beq	1a318 <flatcc_builder_get_emit_context@@Base+0x4f8>
   1a2a0:	mvn	r3, #0
   1a2a4:	b	1a328 <flatcc_builder_get_emit_context@@Base+0x508>
   1a2a8:	ldr	r3, [fp, #-16]
   1a2ac:	ldr	r2, [r3, #8]
   1a2b0:	ldr	r3, [fp, #-8]
   1a2b4:	rsb	r3, r3, #0
   1a2b8:	add	r2, r2, r3
   1a2bc:	ldr	r3, [fp, #-16]
   1a2c0:	str	r2, [r3, #8]
   1a2c4:	ldr	r3, [fp, #-16]
   1a2c8:	ldr	r2, [r3, #12]
   1a2cc:	ldr	r3, [fp, #-8]
   1a2d0:	sub	r2, r2, r3
   1a2d4:	ldr	r3, [fp, #-16]
   1a2d8:	str	r2, [r3, #12]
   1a2dc:	ldr	r3, [fp, #-8]
   1a2e0:	rsb	r3, r3, #0
   1a2e4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a2e8:	add	r3, r2, r3
   1a2ec:	str	r3, [fp, #-20]	; 0xffffffec
   1a2f0:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a2f4:	ldr	r3, [fp, #-8]
   1a2f8:	sub	r3, r2, r3
   1a2fc:	str	r3, [fp, #-24]	; 0xffffffe8
   1a300:	ldr	r3, [fp, #-16]
   1a304:	ldr	r3, [r3, #8]
   1a308:	ldr	r2, [fp, #-8]
   1a30c:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a310:	mov	r0, r3
   1a314:	bl	11fcc <memcpy@plt>
   1a318:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a31c:	cmp	r3, #0
   1a320:	bne	1a258 <flatcc_builder_get_emit_context@@Base+0x438>
   1a324:	mov	r3, #0
   1a328:	mov	r0, r3
   1a32c:	sub	sp, fp, #4
   1a330:	ldr	fp, [sp]
   1a334:	add	sp, sp, #4
   1a338:	pop	{pc}		; (ldr pc, [sp], #4)
   1a33c:	str	fp, [sp, #-8]!
   1a340:	str	lr, [sp, #4]
   1a344:	add	fp, sp, #4
   1a348:	sub	sp, sp, #24
   1a34c:	str	r0, [fp, #-16]
   1a350:	str	r1, [fp, #-20]	; 0xffffffec
   1a354:	str	r2, [fp, #-24]	; 0xffffffe8
   1a358:	b	1a414 <flatcc_builder_get_emit_context@@Base+0x5f4>
   1a35c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a360:	str	r3, [fp, #-8]
   1a364:	ldr	r3, [fp, #-16]
   1a368:	ldr	r3, [r3, #20]
   1a36c:	ldr	r2, [fp, #-8]
   1a370:	cmp	r2, r3
   1a374:	bls	1a3ac <flatcc_builder_get_emit_context@@Base+0x58c>
   1a378:	ldr	r3, [fp, #-16]
   1a37c:	ldr	r3, [r3, #20]
   1a380:	str	r3, [fp, #-8]
   1a384:	ldr	r3, [fp, #-8]
   1a388:	cmp	r3, #0
   1a38c:	bne	1a3ac <flatcc_builder_get_emit_context@@Base+0x58c>
   1a390:	ldr	r0, [fp, #-16]
   1a394:	bl	1a048 <flatcc_builder_get_emit_context@@Base+0x228>
   1a398:	mov	r3, r0
   1a39c:	cmp	r3, #0
   1a3a0:	beq	1a414 <flatcc_builder_get_emit_context@@Base+0x5f4>
   1a3a4:	mvn	r3, #0
   1a3a8:	b	1a424 <flatcc_builder_get_emit_context@@Base+0x604>
   1a3ac:	ldr	r3, [fp, #-16]
   1a3b0:	ldr	r3, [r3, #16]
   1a3b4:	ldr	r2, [fp, #-8]
   1a3b8:	ldr	r1, [fp, #-20]	; 0xffffffec
   1a3bc:	mov	r0, r3
   1a3c0:	bl	11fcc <memcpy@plt>
   1a3c4:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a3c8:	ldr	r3, [fp, #-8]
   1a3cc:	sub	r3, r2, r3
   1a3d0:	str	r3, [fp, #-24]	; 0xffffffe8
   1a3d4:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a3d8:	ldr	r3, [fp, #-8]
   1a3dc:	add	r3, r2, r3
   1a3e0:	str	r3, [fp, #-20]	; 0xffffffec
   1a3e4:	ldr	r3, [fp, #-16]
   1a3e8:	ldr	r2, [r3, #16]
   1a3ec:	ldr	r3, [fp, #-8]
   1a3f0:	add	r2, r2, r3
   1a3f4:	ldr	r3, [fp, #-16]
   1a3f8:	str	r2, [r3, #16]
   1a3fc:	ldr	r3, [fp, #-16]
   1a400:	ldr	r2, [r3, #20]
   1a404:	ldr	r3, [fp, #-8]
   1a408:	sub	r2, r2, r3
   1a40c:	ldr	r3, [fp, #-16]
   1a410:	str	r2, [r3, #20]
   1a414:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a418:	cmp	r3, #0
   1a41c:	bne	1a35c <flatcc_builder_get_emit_context@@Base+0x53c>
   1a420:	mov	r3, #0
   1a424:	mov	r0, r3
   1a428:	sub	sp, fp, #4
   1a42c:	ldr	fp, [sp]
   1a430:	add	sp, sp, #4
   1a434:	pop	{pc}		; (ldr pc, [sp], #4)

0001a438 <flatcc_emitter_recycle_page@@Base>:
   1a438:	push	{fp}		; (str fp, [sp, #-4]!)
   1a43c:	add	fp, sp, #0
   1a440:	sub	sp, sp, #12
   1a444:	str	r0, [fp, #-8]
   1a448:	str	r1, [fp, #-12]
   1a44c:	ldr	r3, [fp, #-8]
   1a450:	ldr	r3, [r3]
   1a454:	ldr	r2, [fp, #-12]
   1a458:	cmp	r2, r3
   1a45c:	beq	1a474 <flatcc_emitter_recycle_page@@Base+0x3c>
   1a460:	ldr	r3, [fp, #-8]
   1a464:	ldr	r3, [r3, #4]
   1a468:	ldr	r2, [fp, #-12]
   1a46c:	cmp	r2, r3
   1a470:	bne	1a47c <flatcc_emitter_recycle_page@@Base+0x44>
   1a474:	mvn	r3, #0
   1a478:	b	1a4ec <flatcc_emitter_recycle_page@@Base+0xb4>
   1a47c:	ldr	r3, [fp, #-12]
   1a480:	ldr	r3, [r3, #2944]	; 0xb80
   1a484:	ldr	r2, [fp, #-12]
   1a488:	ldr	r2, [r2, #2948]	; 0xb84
   1a48c:	str	r2, [r3, #2948]	; 0xb84
   1a490:	ldr	r3, [fp, #-12]
   1a494:	ldr	r3, [r3, #2948]	; 0xb84
   1a498:	ldr	r2, [fp, #-12]
   1a49c:	ldr	r2, [r2, #2944]	; 0xb80
   1a4a0:	str	r2, [r3, #2944]	; 0xb80
   1a4a4:	ldr	r3, [fp, #-8]
   1a4a8:	ldr	r3, [r3]
   1a4ac:	ldr	r2, [r3, #2948]	; 0xb84
   1a4b0:	ldr	r3, [fp, #-12]
   1a4b4:	str	r2, [r3, #2948]	; 0xb84
   1a4b8:	ldr	r3, [fp, #-8]
   1a4bc:	ldr	r2, [r3]
   1a4c0:	ldr	r3, [fp, #-12]
   1a4c4:	str	r2, [r3, #2944]	; 0xb80
   1a4c8:	ldr	r3, [fp, #-12]
   1a4cc:	ldr	r3, [r3, #2948]	; 0xb84
   1a4d0:	ldr	r2, [fp, #-12]
   1a4d4:	str	r2, [r3, #2944]	; 0xb80
   1a4d8:	ldr	r3, [fp, #-12]
   1a4dc:	ldr	r3, [r3, #2944]	; 0xb80
   1a4e0:	ldr	r2, [fp, #-12]
   1a4e4:	str	r2, [r3, #2948]	; 0xb84
   1a4e8:	mov	r3, #0
   1a4ec:	mov	r0, r3
   1a4f0:	add	sp, fp, #0
   1a4f4:	pop	{fp}		; (ldr fp, [sp], #4)
   1a4f8:	bx	lr

0001a4fc <flatcc_emitter_reset@@Base>:
   1a4fc:	str	fp, [sp, #-8]!
   1a500:	str	lr, [sp, #4]
   1a504:	add	fp, sp, #4
   1a508:	sub	sp, sp, #16
   1a50c:	str	r0, [fp, #-16]
   1a510:	ldr	r3, [fp, #-16]
   1a514:	ldr	r3, [r3]
   1a518:	str	r3, [fp, #-8]
   1a51c:	ldr	r3, [fp, #-16]
   1a520:	ldr	r3, [r3]
   1a524:	cmp	r3, #0
   1a528:	beq	1a684 <flatcc_emitter_reset@@Base+0x188>
   1a52c:	ldr	r3, [fp, #-16]
   1a530:	ldr	r2, [r3]
   1a534:	ldr	r3, [fp, #-16]
   1a538:	str	r2, [r3, #4]
   1a53c:	ldr	r3, [fp, #-16]
   1a540:	ldr	r3, [r3]
   1a544:	add	r2, r3, #1472	; 0x5c0
   1a548:	ldr	r3, [fp, #-16]
   1a54c:	str	r2, [r3, #8]
   1a550:	ldr	r3, [fp, #-16]
   1a554:	ldr	r2, [r3, #8]
   1a558:	ldr	r3, [fp, #-16]
   1a55c:	str	r2, [r3, #16]
   1a560:	ldr	r3, [fp, #-16]
   1a564:	mov	r2, #1472	; 0x5c0
   1a568:	str	r2, [r3, #12]
   1a56c:	ldr	r3, [fp, #-16]
   1a570:	mov	r2, #1472	; 0x5c0
   1a574:	str	r2, [r3, #20]
   1a578:	ldr	r3, [fp, #-16]
   1a57c:	ldr	r3, [r3, #12]
   1a580:	mov	r2, r3
   1a584:	ldr	r3, [fp, #-16]
   1a588:	ldr	r3, [r3]
   1a58c:	rsb	r2, r2, #0
   1a590:	str	r2, [r3, #2952]	; 0xb88
   1a594:	ldr	r3, [fp, #-16]
   1a598:	ldr	r3, [r3, #32]
   1a59c:	cmp	r3, #0
   1a5a0:	bne	1a5b4 <flatcc_emitter_reset@@Base+0xb8>
   1a5a4:	ldr	r3, [fp, #-16]
   1a5a8:	ldr	r2, [r3, #24]
   1a5ac:	ldr	r3, [fp, #-16]
   1a5b0:	str	r2, [r3, #32]
   1a5b4:	ldr	r3, [fp, #-16]
   1a5b8:	ldr	r2, [r3, #32]
   1a5bc:	mov	r3, r2
   1a5c0:	lsl	r3, r3, #1
   1a5c4:	add	r3, r3, r2
   1a5c8:	lsr	r2, r3, #2
   1a5cc:	ldr	r3, [fp, #-16]
   1a5d0:	ldr	r3, [r3, #24]
   1a5d4:	lsr	r3, r3, #2
   1a5d8:	add	r2, r2, r3
   1a5dc:	ldr	r3, [fp, #-16]
   1a5e0:	str	r2, [r3, #32]
   1a5e4:	ldr	r3, [fp, #-16]
   1a5e8:	mov	r2, #0
   1a5ec:	str	r2, [r3, #24]
   1a5f0:	b	1a648 <flatcc_emitter_reset@@Base+0x14c>
   1a5f4:	ldr	r3, [fp, #-16]
   1a5f8:	ldr	r3, [r3, #4]
   1a5fc:	ldr	r3, [r3, #2944]	; 0xb80
   1a600:	str	r3, [fp, #-8]
   1a604:	ldr	r3, [fp, #-16]
   1a608:	ldr	r3, [r3, #4]
   1a60c:	ldr	r2, [fp, #-8]
   1a610:	ldr	r2, [r2, #2944]	; 0xb80
   1a614:	str	r2, [r3, #2944]	; 0xb80
   1a618:	ldr	r3, [fp, #-8]
   1a61c:	ldr	r3, [r3, #2944]	; 0xb80
   1a620:	ldr	r2, [fp, #-16]
   1a624:	ldr	r2, [r2, #4]
   1a628:	str	r2, [r3, #2948]	; 0xb84
   1a62c:	ldr	r0, [fp, #-8]
   1a630:	bl	11fc0 <free@plt>
   1a634:	ldr	r3, [fp, #-16]
   1a638:	ldr	r3, [r3, #28]
   1a63c:	sub	r2, r3, #2944	; 0xb80
   1a640:	ldr	r3, [fp, #-16]
   1a644:	str	r2, [r3, #28]
   1a648:	ldr	r3, [fp, #-16]
   1a64c:	ldr	r3, [r3, #32]
   1a650:	lsl	r2, r3, #1
   1a654:	ldr	r3, [fp, #-16]
   1a658:	ldr	r3, [r3, #28]
   1a65c:	cmp	r2, r3
   1a660:	bcs	1a688 <flatcc_emitter_reset@@Base+0x18c>
   1a664:	ldr	r3, [fp, #-16]
   1a668:	ldr	r3, [r3, #4]
   1a66c:	ldr	r2, [r3, #2944]	; 0xb80
   1a670:	ldr	r3, [fp, #-16]
   1a674:	ldr	r3, [r3]
   1a678:	cmp	r2, r3
   1a67c:	bne	1a5f4 <flatcc_emitter_reset@@Base+0xf8>
   1a680:	b	1a688 <flatcc_emitter_reset@@Base+0x18c>
   1a684:	nop	{0}
   1a688:	sub	sp, fp, #4
   1a68c:	ldr	fp, [sp]
   1a690:	add	sp, sp, #4
   1a694:	pop	{pc}		; (ldr pc, [sp], #4)

0001a698 <flatcc_emitter_clear@@Base>:
   1a698:	str	fp, [sp, #-8]!
   1a69c:	str	lr, [sp, #4]
   1a6a0:	add	fp, sp, #4
   1a6a4:	sub	sp, sp, #16
   1a6a8:	str	r0, [fp, #-16]
   1a6ac:	ldr	r3, [fp, #-16]
   1a6b0:	ldr	r3, [r3]
   1a6b4:	str	r3, [fp, #-8]
   1a6b8:	ldr	r3, [fp, #-8]
   1a6bc:	cmp	r3, #0
   1a6c0:	beq	1a720 <flatcc_emitter_clear@@Base+0x88>
   1a6c4:	ldr	r3, [fp, #-8]
   1a6c8:	ldr	r3, [r3, #2948]	; 0xb84
   1a6cc:	mov	r2, #0
   1a6d0:	str	r2, [r3, #2944]	; 0xb80
   1a6d4:	b	1a6f4 <flatcc_emitter_clear@@Base+0x5c>
   1a6d8:	ldr	r3, [fp, #-8]
   1a6dc:	ldr	r3, [r3, #2944]	; 0xb80
   1a6e0:	str	r3, [fp, #-8]
   1a6e4:	ldr	r3, [fp, #-8]
   1a6e8:	ldr	r3, [r3, #2948]	; 0xb84
   1a6ec:	mov	r0, r3
   1a6f0:	bl	11fc0 <free@plt>
   1a6f4:	ldr	r3, [fp, #-8]
   1a6f8:	ldr	r3, [r3, #2944]	; 0xb80
   1a6fc:	cmp	r3, #0
   1a700:	bne	1a6d8 <flatcc_emitter_clear@@Base+0x40>
   1a704:	ldr	r0, [fp, #-8]
   1a708:	bl	11fc0 <free@plt>
   1a70c:	mov	r2, #36	; 0x24
   1a710:	mov	r1, #0
   1a714:	ldr	r0, [fp, #-16]
   1a718:	bl	12050 <memset@plt>
   1a71c:	b	1a724 <flatcc_emitter_clear@@Base+0x8c>
   1a720:	nop	{0}
   1a724:	sub	sp, fp, #4
   1a728:	ldr	fp, [sp]
   1a72c:	add	sp, sp, #4
   1a730:	pop	{pc}		; (ldr pc, [sp], #4)

0001a734 <flatcc_emitter@@Base>:
   1a734:	str	fp, [sp, #-8]!
   1a738:	str	lr, [sp, #4]
   1a73c:	add	fp, sp, #4
   1a740:	sub	sp, sp, #24
   1a744:	str	r0, [fp, #-16]
   1a748:	str	r1, [fp, #-20]	; 0xffffffec
   1a74c:	str	r2, [fp, #-24]	; 0xffffffe8
   1a750:	str	r3, [fp, #-28]	; 0xffffffe4
   1a754:	ldr	r3, [fp, #-16]
   1a758:	str	r3, [fp, #-12]
   1a75c:	ldr	r3, [fp, #-12]
   1a760:	ldr	r2, [r3, #24]
   1a764:	ldr	r3, [fp, #4]
   1a768:	add	r2, r2, r3
   1a76c:	ldr	r3, [fp, #-12]
   1a770:	str	r2, [r3, #24]
   1a774:	ldr	r3, [fp, #-28]	; 0xffffffe4
   1a778:	cmp	r3, #0
   1a77c:	bge	1a844 <flatcc_emitter@@Base+0x110>
   1a780:	ldr	r3, [fp, #-12]
   1a784:	ldr	r3, [r3, #12]
   1a788:	ldr	r2, [fp, #4]
   1a78c:	cmp	r2, r3
   1a790:	bhi	1a7d8 <flatcc_emitter@@Base+0xa4>
   1a794:	ldr	r3, [fp, #-12]
   1a798:	ldr	r2, [r3, #8]
   1a79c:	ldr	r3, [fp, #4]
   1a7a0:	rsb	r3, r3, #0
   1a7a4:	add	r2, r2, r3
   1a7a8:	ldr	r3, [fp, #-12]
   1a7ac:	str	r2, [r3, #8]
   1a7b0:	ldr	r3, [fp, #-12]
   1a7b4:	ldr	r2, [r3, #12]
   1a7b8:	ldr	r3, [fp, #4]
   1a7bc:	sub	r2, r2, r3
   1a7c0:	ldr	r3, [fp, #-12]
   1a7c4:	str	r2, [r3, #12]
   1a7c8:	ldr	r3, [fp, #-12]
   1a7cc:	ldr	r3, [r3, #8]
   1a7d0:	str	r3, [fp, #-8]
   1a7d4:	b	1a8f0 <flatcc_emitter@@Base+0x1bc>
   1a7d8:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a7dc:	lsl	r3, r3, #3
   1a7e0:	ldr	r2, [fp, #-20]	; 0xffffffec
   1a7e4:	add	r3, r2, r3
   1a7e8:	str	r3, [fp, #-20]	; 0xffffffec
   1a7ec:	b	1a82c <flatcc_emitter@@Base+0xf8>
   1a7f0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a7f4:	sub	r3, r3, #8
   1a7f8:	str	r3, [fp, #-20]	; 0xffffffec
   1a7fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a800:	ldr	r1, [r3]
   1a804:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a808:	ldr	r3, [r3, #4]
   1a80c:	mov	r2, r3
   1a810:	ldr	r0, [fp, #-12]
   1a814:	bl	1a228 <flatcc_builder_get_emit_context@@Base+0x408>
   1a818:	mov	r3, r0
   1a81c:	cmp	r3, #0
   1a820:	beq	1a82c <flatcc_emitter@@Base+0xf8>
   1a824:	mvn	r3, #0
   1a828:	b	1a948 <flatcc_emitter@@Base+0x214>
   1a82c:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a830:	sub	r2, r3, #1
   1a834:	str	r2, [fp, #-24]	; 0xffffffe8
   1a838:	cmp	r3, #0
   1a83c:	bne	1a7f0 <flatcc_emitter@@Base+0xbc>
   1a840:	b	1a8e8 <flatcc_emitter@@Base+0x1b4>
   1a844:	ldr	r3, [fp, #-12]
   1a848:	ldr	r3, [r3, #20]
   1a84c:	ldr	r2, [fp, #4]
   1a850:	cmp	r2, r3
   1a854:	bhi	1a8d4 <flatcc_emitter@@Base+0x1a0>
   1a858:	ldr	r3, [fp, #-12]
   1a85c:	ldr	r3, [r3, #16]
   1a860:	str	r3, [fp, #-8]
   1a864:	ldr	r3, [fp, #-12]
   1a868:	ldr	r2, [r3, #16]
   1a86c:	ldr	r3, [fp, #4]
   1a870:	add	r2, r2, r3
   1a874:	ldr	r3, [fp, #-12]
   1a878:	str	r2, [r3, #16]
   1a87c:	ldr	r3, [fp, #-12]
   1a880:	ldr	r2, [r3, #20]
   1a884:	ldr	r3, [fp, #4]
   1a888:	sub	r2, r2, r3
   1a88c:	ldr	r3, [fp, #-12]
   1a890:	str	r2, [r3, #20]
   1a894:	b	1a8f0 <flatcc_emitter@@Base+0x1bc>
   1a898:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a89c:	ldr	r1, [r3]
   1a8a0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8a4:	ldr	r3, [r3, #4]
   1a8a8:	mov	r2, r3
   1a8ac:	ldr	r0, [fp, #-12]
   1a8b0:	bl	1a33c <flatcc_builder_get_emit_context@@Base+0x51c>
   1a8b4:	mov	r3, r0
   1a8b8:	cmp	r3, #0
   1a8bc:	beq	1a8c8 <flatcc_emitter@@Base+0x194>
   1a8c0:	mvn	r3, #0
   1a8c4:	b	1a948 <flatcc_emitter@@Base+0x214>
   1a8c8:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8cc:	add	r3, r3, #8
   1a8d0:	str	r3, [fp, #-20]	; 0xffffffec
   1a8d4:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a8d8:	sub	r2, r3, #1
   1a8dc:	str	r2, [fp, #-24]	; 0xffffffe8
   1a8e0:	cmp	r3, #0
   1a8e4:	bne	1a898 <flatcc_emitter@@Base+0x164>
   1a8e8:	mov	r3, #0
   1a8ec:	b	1a948 <flatcc_emitter@@Base+0x214>
   1a8f0:	b	1a930 <flatcc_emitter@@Base+0x1fc>
   1a8f4:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a8f8:	ldr	r1, [r3]
   1a8fc:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a900:	ldr	r3, [r3, #4]
   1a904:	mov	r2, r3
   1a908:	ldr	r0, [fp, #-8]
   1a90c:	bl	11fcc <memcpy@plt>
   1a910:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a914:	ldr	r3, [r3, #4]
   1a918:	ldr	r2, [fp, #-8]
   1a91c:	add	r3, r2, r3
   1a920:	str	r3, [fp, #-8]
   1a924:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a928:	add	r3, r3, #8
   1a92c:	str	r3, [fp, #-20]	; 0xffffffec
   1a930:	ldr	r3, [fp, #-24]	; 0xffffffe8
   1a934:	sub	r2, r3, #1
   1a938:	str	r2, [fp, #-24]	; 0xffffffe8
   1a93c:	cmp	r3, #0
   1a940:	bne	1a8f4 <flatcc_emitter@@Base+0x1c0>
   1a944:	mov	r3, #0
   1a948:	mov	r0, r3
   1a94c:	sub	sp, fp, #4
   1a950:	ldr	fp, [sp]
   1a954:	add	sp, sp, #4
   1a958:	pop	{pc}		; (ldr pc, [sp], #4)

0001a95c <flatcc_emitter_copy_buffer@@Base>:
   1a95c:	str	fp, [sp, #-8]!
   1a960:	str	lr, [sp, #4]
   1a964:	add	fp, sp, #4
   1a968:	sub	sp, sp, #24
   1a96c:	str	r0, [fp, #-16]
   1a970:	str	r1, [fp, #-20]	; 0xffffffec
   1a974:	str	r2, [fp, #-24]	; 0xffffffe8
   1a978:	ldr	r3, [fp, #-16]
   1a97c:	ldr	r3, [r3, #24]
   1a980:	ldr	r2, [fp, #-24]	; 0xffffffe8
   1a984:	cmp	r2, r3
   1a988:	bcs	1a994 <flatcc_emitter_copy_buffer@@Base+0x38>
   1a98c:	mov	r3, #0
   1a990:	b	1aa94 <flatcc_emitter_copy_buffer@@Base+0x138>
   1a994:	ldr	r3, [fp, #-16]
   1a998:	ldr	r3, [r3]
   1a99c:	cmp	r3, #0
   1a9a0:	bne	1a9ac <flatcc_emitter_copy_buffer@@Base+0x50>
   1a9a4:	mov	r3, #0
   1a9a8:	b	1aa94 <flatcc_emitter_copy_buffer@@Base+0x138>
   1a9ac:	ldr	r3, [fp, #-16]
   1a9b0:	ldr	r2, [r3]
   1a9b4:	ldr	r3, [fp, #-16]
   1a9b8:	ldr	r3, [r3, #4]
   1a9bc:	cmp	r2, r3
   1a9c0:	bne	1a9e8 <flatcc_emitter_copy_buffer@@Base+0x8c>
   1a9c4:	ldr	r3, [fp, #-16]
   1a9c8:	ldr	r1, [r3, #8]
   1a9cc:	ldr	r3, [fp, #-16]
   1a9d0:	ldr	r3, [r3, #24]
   1a9d4:	mov	r2, r3
   1a9d8:	ldr	r0, [fp, #-20]	; 0xffffffec
   1a9dc:	bl	11fcc <memcpy@plt>
   1a9e0:	ldr	r3, [fp, #-20]	; 0xffffffec
   1a9e4:	b	1aa94 <flatcc_emitter_copy_buffer@@Base+0x138>
   1a9e8:	ldr	r3, [fp, #-16]
   1a9ec:	ldr	r3, [r3, #12]
   1a9f0:	rsb	r3, r3, #2944	; 0xb80
   1a9f4:	str	r3, [fp, #-12]
   1a9f8:	ldr	r3, [fp, #-16]
   1a9fc:	ldr	r3, [r3, #8]
   1aa00:	ldr	r2, [fp, #-12]
   1aa04:	mov	r1, r3
   1aa08:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aa0c:	bl	11fcc <memcpy@plt>
   1aa10:	ldr	r2, [fp, #-20]	; 0xffffffec
   1aa14:	ldr	r3, [fp, #-12]
   1aa18:	add	r3, r2, r3
   1aa1c:	str	r3, [fp, #-20]	; 0xffffffec
   1aa20:	ldr	r3, [fp, #-16]
   1aa24:	ldr	r3, [r3]
   1aa28:	ldr	r3, [r3, #2944]	; 0xb80
   1aa2c:	str	r3, [fp, #-8]
   1aa30:	b	1aa60 <flatcc_emitter_copy_buffer@@Base+0x104>
   1aa34:	ldr	r3, [fp, #-8]
   1aa38:	mov	r2, #2944	; 0xb80
   1aa3c:	mov	r1, r3
   1aa40:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aa44:	bl	11fcc <memcpy@plt>
   1aa48:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa4c:	add	r3, r3, #2944	; 0xb80
   1aa50:	str	r3, [fp, #-20]	; 0xffffffec
   1aa54:	ldr	r3, [fp, #-8]
   1aa58:	ldr	r3, [r3, #2944]	; 0xb80
   1aa5c:	str	r3, [fp, #-8]
   1aa60:	ldr	r3, [fp, #-16]
   1aa64:	ldr	r3, [r3, #4]
   1aa68:	ldr	r2, [fp, #-8]
   1aa6c:	cmp	r2, r3
   1aa70:	bne	1aa34 <flatcc_emitter_copy_buffer@@Base+0xd8>
   1aa74:	ldr	r1, [fp, #-8]
   1aa78:	ldr	r3, [fp, #-16]
   1aa7c:	ldr	r3, [r3, #20]
   1aa80:	rsb	r3, r3, #2944	; 0xb80
   1aa84:	mov	r2, r3
   1aa88:	ldr	r0, [fp, #-20]	; 0xffffffec
   1aa8c:	bl	11fcc <memcpy@plt>
   1aa90:	ldr	r3, [fp, #-20]	; 0xffffffec
   1aa94:	mov	r0, r3
   1aa98:	sub	sp, fp, #4
   1aa9c:	ldr	fp, [sp]
   1aaa0:	add	sp, sp, #4
   1aaa4:	pop	{pc}		; (ldr pc, [sp], #4)

0001aaa8 <__libc_csu_init@@Base>:
   1aaa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1aaac:	mov	r7, r0
   1aab0:	ldr	r6, [pc, #72]	; 1ab00 <__libc_csu_init@@Base+0x58>
   1aab4:	ldr	r5, [pc, #72]	; 1ab04 <__libc_csu_init@@Base+0x5c>
   1aab8:	add	r6, pc, r6
   1aabc:	add	r5, pc, r5
   1aac0:	sub	r6, r6, r5
   1aac4:	mov	r8, r1
   1aac8:	mov	r9, r2
   1aacc:	bl	11f94 <printf@plt-0x20>
   1aad0:	asrs	r6, r6, #2
   1aad4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aad8:	mov	r4, #0
   1aadc:	add	r4, r4, #1
   1aae0:	ldr	r3, [r5], #4
   1aae4:	mov	r2, r9
   1aae8:	mov	r1, r8
   1aaec:	mov	r0, r7
   1aaf0:	blx	r3
   1aaf4:	cmp	r6, r4
   1aaf8:	bne	1aadc <__libc_csu_init@@Base+0x34>
   1aafc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ab00:	andeq	r1, r1, r4, asr r4
   1ab04:	andeq	r1, r1, ip, asr #8

0001ab08 <__libc_csu_fini@@Base>:
   1ab08:	bx	lr

Disassembly of section .fini:

0001ab0c <.fini>:
   1ab0c:	push	{r3, lr}
   1ab10:	pop	{r3, pc}
