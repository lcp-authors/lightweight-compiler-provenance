
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

00010880 <.init>:
   10880:	push	{r3, lr}
   10884:	bl	109cc <_start@@Base+0x3c>
   10888:	pop	{r3, pc}

Disassembly of section .plt:

0001088c <coda_match_filefilter@plt-0x14>:
   1088c:	push	{lr}		; (str lr, [sp, #-4]!)
   10890:	ldr	lr, [pc, #4]	; 1089c <coda_match_filefilter@plt-0x4>
   10894:	add	lr, pc, lr
   10898:	ldr	pc, [lr, #8]!
   1089c:	andeq	r1, r1, r4, ror #14

000108a0 <coda_match_filefilter@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #69632	; 0x11000
   108a8:	ldr	pc, [ip, #1892]!	; 0x764

000108ac <strcmp@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #69632	; 0x11000
   108b4:	ldr	pc, [ip, #1884]!	; 0x75c

000108b8 <printf@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #69632	; 0x11000
   108c0:	ldr	pc, [ip, #1876]!	; 0x754

000108c4 <coda_set_definition_path_conditional@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #69632	; 0x11000
   108cc:	ldr	pc, [ip, #1868]!	; 0x74c

000108d0 <coda_set_definition_path@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #69632	; 0x11000
   108d8:	ldr	pc, [ip, #1860]!	; 0x744

000108dc <fwrite@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #69632	; 0x11000
   108e4:	ldr	pc, [ip, #1852]!	; 0x73c

000108e8 <coda_done@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #69632	; 0x11000
   108f0:	ldr	pc, [ip, #1844]!	; 0x734

000108f4 <puts@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #69632	; 0x11000
   108fc:	ldr	pc, [ip, #1836]!	; 0x72c

00010900 <__libc_start_main@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #69632	; 0x11000
   10908:	ldr	pc, [ip, #1828]!	; 0x724

0001090c <__gmon_start__@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #69632	; 0x11000
   10914:	ldr	pc, [ip, #1820]!	; 0x71c

00010918 <exit@plt>:
   10918:	add	ip, pc, #0, 12
   1091c:	add	ip, ip, #69632	; 0x11000
   10920:	ldr	pc, [ip, #1812]!	; 0x714

00010924 <fprintf@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #69632	; 0x11000
   1092c:	ldr	pc, [ip, #1804]!	; 0x70c

00010930 <coda_init@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #69632	; 0x11000
   10938:	ldr	pc, [ip, #1796]!	; 0x704

0001093c <coda_set_option_perform_conversions@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #69632	; 0x11000
   10944:	ldr	pc, [ip, #1788]!	; 0x6fc

00010948 <putchar@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #69632	; 0x11000
   10950:	ldr	pc, [ip, #1780]!	; 0x6f4

00010954 <coda_errno_to_string@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #69632	; 0x11000
   1095c:	ldr	pc, [ip, #1772]!	; 0x6ec

00010960 <coda_get_libcoda_version@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #69632	; 0x11000
   10968:	ldr	pc, [ip, #1764]!	; 0x6e4

0001096c <coda_get_errno@plt>:
   1096c:	add	ip, pc, #0, 12
   10970:	add	ip, ip, #69632	; 0x11000
   10974:	ldr	pc, [ip, #1756]!	; 0x6dc

00010978 <abort@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #69632	; 0x11000
   10980:	ldr	pc, [ip, #1748]!	; 0x6d4

00010984 <__assert_fail@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #69632	; 0x11000
   1098c:	ldr	pc, [ip, #1740]!	; 0x6cc

Disassembly of section .text:

00010990 <_start@@Base>:
   10990:	mov	fp, #0
   10994:	mov	lr, #0
   10998:	pop	{r1}		; (ldr r1, [sp], #4)
   1099c:	mov	r2, sp
   109a0:	push	{r2}		; (str r2, [sp, #-4]!)
   109a4:	push	{r0}		; (str r0, [sp, #-4]!)
   109a8:	ldr	ip, [pc, #16]	; 109c0 <_start@@Base+0x30>
   109ac:	push	{ip}		; (str ip, [sp, #-4]!)
   109b0:	ldr	r0, [pc, #12]	; 109c4 <_start@@Base+0x34>
   109b4:	ldr	r3, [pc, #12]	; 109c8 <_start@@Base+0x38>
   109b8:	bl	10900 <__libc_start_main@plt>
   109bc:	bl	10978 <abort@plt>
   109c0:	andeq	r1, r1, ip, lsl #3
   109c4:	andeq	r0, r1, r8, lsl sp
   109c8:	andeq	r1, r1, ip, lsr #2
   109cc:	ldr	r3, [pc, #20]	; 109e8 <_start@@Base+0x58>
   109d0:	ldr	r2, [pc, #20]	; 109ec <_start@@Base+0x5c>
   109d4:	add	r3, pc, r3
   109d8:	ldr	r2, [r3, r2]
   109dc:	cmp	r2, #0
   109e0:	bxeq	lr
   109e4:	b	1090c <__gmon_start__@plt>
   109e8:	andeq	r1, r1, r4, lsr #12
   109ec:	andeq	r0, r0, ip, asr r0
   109f0:	ldr	r0, [pc, #24]	; 10a10 <_start@@Base+0x80>
   109f4:	ldr	r3, [pc, #24]	; 10a14 <_start@@Base+0x84>
   109f8:	cmp	r3, r0
   109fc:	bxeq	lr
   10a00:	ldr	r3, [pc, #16]	; 10a18 <_start@@Base+0x88>
   10a04:	cmp	r3, #0
   10a08:	bxeq	lr
   10a0c:	bx	r3
   10a10:	andeq	r2, r2, r8, rrx
   10a14:	andeq	r2, r2, r8, rrx
   10a18:	andeq	r0, r0, r0
   10a1c:	ldr	r0, [pc, #36]	; 10a48 <_start@@Base+0xb8>
   10a20:	ldr	r1, [pc, #36]	; 10a4c <_start@@Base+0xbc>
   10a24:	sub	r1, r1, r0
   10a28:	asr	r1, r1, #2
   10a2c:	add	r1, r1, r1, lsr #31
   10a30:	asrs	r1, r1, #1
   10a34:	bxeq	lr
   10a38:	ldr	r3, [pc, #16]	; 10a50 <_start@@Base+0xc0>
   10a3c:	cmp	r3, #0
   10a40:	bxeq	lr
   10a44:	bx	r3
   10a48:	andeq	r2, r2, r8, rrx
   10a4c:	andeq	r2, r2, r8, rrx
   10a50:	andeq	r0, r0, r0
   10a54:	push	{r4, lr}
   10a58:	ldr	r4, [pc, #24]	; 10a78 <_start@@Base+0xe8>
   10a5c:	ldrb	r3, [r4]
   10a60:	cmp	r3, #0
   10a64:	popne	{r4, pc}
   10a68:	bl	109f0 <_start@@Base+0x60>
   10a6c:	mov	r3, #1
   10a70:	strb	r3, [r4]
   10a74:	pop	{r4, pc}
   10a78:	andeq	r2, r2, ip, rrx
   10a7c:	b	10a1c <_start@@Base+0x8c>

00010a80 <callback@@Base>:
   10a80:	str	r4, [sp, #-8]!
   10a84:	str	lr, [sp, #4]
   10a88:	subs	r4, r1, #0
   10a8c:	beq	10ac4 <callback@@Base+0x44>
   10a90:	cmp	r4, #2
   10a94:	beq	10af4 <callback@@Base+0x74>
   10a98:	cmp	r4, #1
   10a9c:	beq	10b14 <callback@@Base+0x94>
   10aa0:	movw	r3, #8304	; 0x2070
   10aa4:	movt	r3, #2
   10aa8:	ldr	r3, [r3]
   10aac:	cmp	r3, #0
   10ab0:	bne	10b38 <callback@@Base+0xb8>
   10ab4:	cmp	r4, #4
   10ab8:	bne	10ae4 <callback@@Base+0x64>
   10abc:	bl	108f4 <puts@plt>
   10ac0:	b	10ae4 <callback@@Base+0x64>
   10ac4:	movw	ip, #8296	; 0x2068
   10ac8:	movt	ip, #2
   10acc:	mov	r3, r2
   10ad0:	mov	r2, r0
   10ad4:	movw	r1, #4520	; 0x11a8
   10ad8:	movt	r1, #1
   10adc:	ldr	r0, [ip]
   10ae0:	bl	10924 <fprintf@plt>
   10ae4:	mov	r0, #0
   10ae8:	ldr	r4, [sp]
   10aec:	add	sp, sp, #4
   10af0:	pop	{pc}		; (ldr pc, [sp], #4)
   10af4:	movw	r3, #8296	; 0x2068
   10af8:	movt	r3, #2
   10afc:	mov	r2, r0
   10b00:	movw	r1, #4528	; 0x11b0
   10b04:	movt	r1, #1
   10b08:	ldr	r0, [r3]
   10b0c:	bl	10924 <fprintf@plt>
   10b10:	b	10ae4 <callback@@Base+0x64>
   10b14:	movw	ip, #8296	; 0x2068
   10b18:	movt	ip, #2
   10b1c:	mov	r3, r2
   10b20:	mov	r2, r0
   10b24:	movw	r1, #4560	; 0x11d0
   10b28:	movt	r1, #1
   10b2c:	ldr	r0, [ip]
   10b30:	bl	10924 <fprintf@plt>
   10b34:	b	10ae4 <callback@@Base+0x64>
   10b38:	mov	r1, r0
   10b3c:	movw	r0, #4592	; 0x11f0
   10b40:	movt	r0, #1
   10b44:	bl	108b8 <printf@plt>
   10b48:	cmp	r4, #5
   10b4c:	ldrls	pc, [pc, r4, lsl #2]
   10b50:	b	10ae4 <callback@@Base+0x64>
   10b54:	andeq	r0, r1, ip, ror #22
   10b58:	andeq	r0, r1, ip, ror #22
   10b5c:	andeq	r0, r1, ip, ror #22
   10b60:	andeq	r0, r1, ip, lsl #23
   10b64:	andeq	r0, r1, ip, lsr #23
   10b68:	muleq	r1, ip, fp
   10b6c:	movw	r3, #4508	; 0x119c
   10b70:	movt	r3, #1
   10b74:	mov	r2, #110	; 0x6e
   10b78:	movw	r1, #4600	; 0x11f8
   10b7c:	movt	r1, #1
   10b80:	movw	r0, #4672	; 0x1240
   10b84:	movt	r0, #1
   10b88:	bl	10984 <__assert_fail@plt>
   10b8c:	movw	r0, #4676	; 0x1244
   10b90:	movt	r0, #1
   10b94:	bl	108f4 <puts@plt>
   10b98:	b	10ae4 <callback@@Base+0x64>
   10b9c:	movw	r0, #4696	; 0x1258
   10ba0:	movt	r0, #1
   10ba4:	bl	108f4 <puts@plt>
   10ba8:	b	10ae4 <callback@@Base+0x64>
   10bac:	movw	r0, #4708	; 0x1264
   10bb0:	movt	r0, #1
   10bb4:	bl	108f4 <puts@plt>
   10bb8:	b	10ae4 <callback@@Base+0x64>
   10bbc:	str	r4, [sp, #-8]!
   10bc0:	str	lr, [sp, #4]
   10bc4:	movw	r0, #4716	; 0x126c
   10bc8:	movt	r0, #1
   10bcc:	bl	108f4 <puts@plt>
   10bd0:	movw	r0, #4724	; 0x1274
   10bd4:	movt	r0, #1
   10bd8:	bl	108f4 <puts@plt>
   10bdc:	movw	r0, #4792	; 0x12b8
   10be0:	movt	r0, #1
   10be4:	bl	108f4 <puts@plt>
   10be8:	movw	r0, #4872	; 0x1308
   10bec:	movt	r0, #1
   10bf0:	bl	108f4 <puts@plt>
   10bf4:	mov	r0, #10
   10bf8:	bl	10948 <putchar@plt>
   10bfc:	movw	r0, #4896	; 0x1320
   10c00:	movt	r0, #1
   10c04:	bl	108f4 <puts@plt>
   10c08:	movw	r0, #4916	; 0x1334
   10c0c:	movt	r0, #1
   10c10:	bl	108f4 <puts@plt>
   10c14:	movw	r0, #4956	; 0x135c
   10c18:	movt	r0, #1
   10c1c:	bl	108f4 <puts@plt>
   10c20:	movw	r0, #5016	; 0x1398
   10c24:	movt	r0, #1
   10c28:	bl	108f4 <puts@plt>
   10c2c:	movw	r0, #5064	; 0x13c8
   10c30:	movt	r0, #1
   10c34:	bl	108f4 <puts@plt>
   10c38:	movw	r0, #5136	; 0x1410
   10c3c:	movt	r0, #1
   10c40:	bl	108f4 <puts@plt>
   10c44:	movw	r0, #5216	; 0x1460
   10c48:	movt	r0, #1
   10c4c:	bl	108f4 <puts@plt>
   10c50:	movw	r0, #5260	; 0x148c
   10c54:	movt	r0, #1
   10c58:	bl	108f4 <puts@plt>
   10c5c:	movw	r0, #5288	; 0x14a8
   10c60:	movt	r0, #1
   10c64:	bl	108f4 <puts@plt>
   10c68:	mov	r0, #10
   10c6c:	bl	10948 <putchar@plt>
   10c70:	movw	r0, #5344	; 0x14e0
   10c74:	movt	r0, #1
   10c78:	bl	108f4 <puts@plt>
   10c7c:	movw	r0, #5368	; 0x14f8
   10c80:	movt	r0, #1
   10c84:	bl	108f4 <puts@plt>
   10c88:	mov	r0, #10
   10c8c:	bl	10948 <putchar@plt>
   10c90:	movw	r0, #5400	; 0x1518
   10c94:	movt	r0, #1
   10c98:	bl	108f4 <puts@plt>
   10c9c:	movw	r0, #5428	; 0x1534
   10ca0:	movt	r0, #1
   10ca4:	bl	108f4 <puts@plt>
   10ca8:	mov	r0, #10
   10cac:	bl	10948 <putchar@plt>
   10cb0:	movw	r0, #5480	; 0x1568
   10cb4:	movt	r0, #1
   10cb8:	bl	108f4 <puts@plt>
   10cbc:	movw	r0, #5560	; 0x15b8
   10cc0:	movt	r0, #1
   10cc4:	bl	108f4 <puts@plt>
   10cc8:	movw	r0, #5636	; 0x1604
   10ccc:	movt	r0, #1
   10cd0:	bl	108f4 <puts@plt>
   10cd4:	movw	r0, #5680	; 0x1630
   10cd8:	movt	r0, #1
   10cdc:	bl	108f4 <puts@plt>
   10ce0:	movw	r0, #5756	; 0x167c
   10ce4:	movt	r0, #1
   10ce8:	bl	108f4 <puts@plt>
   10cec:	movw	r0, #5828	; 0x16c4
   10cf0:	movt	r0, #1
   10cf4:	bl	108f4 <puts@plt>
   10cf8:	movw	r0, #5892	; 0x1704
   10cfc:	movt	r0, #1
   10d00:	bl	108f4 <puts@plt>
   10d04:	mov	r0, #10
   10d08:	bl	10948 <putchar@plt>
   10d0c:	ldr	r4, [sp]
   10d10:	add	sp, sp, #4
   10d14:	pop	{pc}		; (ldr pc, [sp], #4)

00010d18 <main@@Base>:
   10d18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10d1c:	strd	r6, [sp, #8]
   10d20:	strd	r8, [sp, #16]
   10d24:	strd	sl, [sp, #24]
   10d28:	str	lr, [sp, #32]
   10d2c:	sub	sp, sp, #44	; 0x2c
   10d30:	movw	r3, #8304	; 0x2070
   10d34:	movt	r3, #2
   10d38:	mov	r2, #0
   10d3c:	str	r2, [r3]
   10d40:	cmp	r0, #1
   10d44:	beq	10d84 <main@@Base+0x6c>
   10d48:	mov	r5, r0
   10d4c:	mov	r7, r1
   10d50:	ldr	r4, [r1, #4]
   10d54:	movw	r1, #5956	; 0x1744
   10d58:	movt	r1, #1
   10d5c:	mov	r0, r4
   10d60:	bl	108ac <strcmp@plt>
   10d64:	cmp	r0, #0
   10d68:	beq	10d84 <main@@Base+0x6c>
   10d6c:	movw	r1, #5960	; 0x1748
   10d70:	movt	r1, #1
   10d74:	mov	r0, r4
   10d78:	bl	108ac <strcmp@plt>
   10d7c:	cmp	r0, #0
   10d80:	bne	10d90 <main@@Base+0x78>
   10d84:	bl	10bbc <callback@@Base+0x13c>
   10d88:	mov	r0, #0
   10d8c:	bl	10918 <exit@plt>
   10d90:	movw	r1, #5968	; 0x1750
   10d94:	movt	r1, #1
   10d98:	mov	r0, r4
   10d9c:	bl	108ac <strcmp@plt>
   10da0:	cmp	r0, #0
   10da4:	beq	10dc0 <main@@Base+0xa8>
   10da8:	movw	r1, #5972	; 0x1754
   10dac:	movt	r1, #1
   10db0:	mov	r0, r4
   10db4:	bl	108ac <strcmp@plt>
   10db8:	cmp	r0, #0
   10dbc:	bne	10df0 <main@@Base+0xd8>
   10dc0:	bl	10960 <coda_get_libcoda_version@plt>
   10dc4:	mov	r1, r0
   10dc8:	movw	r0, #5984	; 0x1760
   10dcc:	movt	r0, #1
   10dd0:	bl	108b8 <printf@plt>
   10dd4:	movw	r0, #6000	; 0x1770
   10dd8:	movt	r0, #1
   10ddc:	bl	108f4 <puts@plt>
   10de0:	mov	r0, #10
   10de4:	bl	10948 <putchar@plt>
   10de8:	mov	r0, #0
   10dec:	bl	10918 <exit@plt>
   10df0:	cmp	r5, #2
   10df4:	ble	10ec0 <main@@Base+0x1a8>
   10df8:	movw	r1, #6048	; 0x17a0
   10dfc:	movt	r1, #1
   10e00:	mov	r0, r4
   10e04:	bl	108ac <strcmp@plt>
   10e08:	cmp	r0, #0
   10e0c:	beq	10e94 <main@@Base+0x17c>
   10e10:	movw	r2, #6052	; 0x17a4
   10e14:	movt	r2, #1
   10e18:	mov	r1, #0
   10e1c:	ldr	r0, [r7]
   10e20:	bl	108c4 <coda_set_definition_path_conditional@plt>
   10e24:	cmp	r0, #0
   10e28:	bne	10efc <main@@Base+0x1e4>
   10e2c:	mov	r4, #1
   10e30:	mov	r3, #1
   10e34:	str	r3, [sp, #12]
   10e38:	mov	r3, #0
   10e3c:	str	r3, [sp, #28]
   10e40:	movw	r9, #6092	; 0x17cc
   10e44:	movt	r9, #1
   10e48:	movw	r3, #4932	; 0x1344
   10e4c:	movt	r3, #1
   10e50:	str	r3, [sp, #16]
   10e54:	movw	r3, #6096	; 0x17d0
   10e58:	movt	r3, #1
   10e5c:	str	r3, [sp, #20]
   10e60:	movw	r3, #6112	; 0x17e0
   10e64:	movt	r3, #1
   10e68:	str	r3, [sp, #24]
   10e6c:	movw	sl, #8304	; 0x2070
   10e70:	movt	sl, #2
   10e74:	mov	fp, #1
   10e78:	movw	r3, #6116	; 0x17e4
   10e7c:	movt	r3, #1
   10e80:	str	r3, [sp, #36]	; 0x24
   10e84:	movw	r3, #6100	; 0x17d4
   10e88:	movt	r3, #1
   10e8c:	str	r3, [sp, #32]
   10e90:	b	10fe0 <main@@Base+0x2c8>
   10e94:	ldr	r0, [r7, #8]
   10e98:	bl	108d0 <coda_set_definition_path@plt>
   10e9c:	cmp	r5, #3
   10ea0:	movgt	r4, #3
   10ea4:	bgt	10e30 <main@@Base+0x118>
   10ea8:	mov	r4, #3
   10eac:	mov	r3, #1
   10eb0:	str	r3, [sp, #12]
   10eb4:	mov	r3, #0
   10eb8:	str	r3, [sp, #28]
   10ebc:	b	10f3c <main@@Base+0x224>
   10ec0:	movw	r2, #6052	; 0x17a4
   10ec4:	movt	r2, #1
   10ec8:	mov	r1, #0
   10ecc:	ldr	r0, [r7]
   10ed0:	bl	108c4 <coda_set_definition_path_conditional@plt>
   10ed4:	cmp	r0, #0
   10ed8:	bne	10efc <main@@Base+0x1e4>
   10edc:	cmp	r5, #1
   10ee0:	movle	r4, #1
   10ee4:	strle	r4, [sp, #12]
   10ee8:	movle	r3, #0
   10eec:	strle	r3, [sp, #28]
   10ef0:	ble	10f44 <main@@Base+0x22c>
   10ef4:	mov	r4, #1
   10ef8:	b	10e30 <main@@Base+0x118>
   10efc:	movw	r3, #8296	; 0x2068
   10f00:	movt	r3, #2
   10f04:	ldr	r4, [r3]
   10f08:	bl	1096c <coda_get_errno@plt>
   10f0c:	ldr	r0, [r0]
   10f10:	bl	10954 <coda_errno_to_string@plt>
   10f14:	mov	r2, r0
   10f18:	movw	r1, #6080	; 0x17c0
   10f1c:	movt	r1, #1
   10f20:	mov	r0, r4
   10f24:	bl	10924 <fprintf@plt>
   10f28:	mov	r0, #1
   10f2c:	bl	10918 <exit@plt>
   10f30:	ldrb	r3, [r6]
   10f34:	cmp	r3, #45	; 0x2d
   10f38:	beq	10fa4 <main@@Base+0x28c>
   10f3c:	cmp	r5, r4
   10f40:	beq	11098 <main@@Base+0x380>
   10f44:	bl	10930 <coda_init@plt>
   10f48:	cmp	r0, #0
   10f4c:	bne	110c4 <main@@Base+0x3ac>
   10f50:	ldr	r0, [sp, #12]
   10f54:	bl	1093c <coda_set_option_perform_conversions@plt>
   10f58:	mov	r3, #0
   10f5c:	str	r3, [sp]
   10f60:	movw	r3, #2688	; 0xa80
   10f64:	movt	r3, #1
   10f68:	add	r2, r7, r4, lsl #2
   10f6c:	sub	r1, r5, r4
   10f70:	ldr	r0, [sp, #28]
   10f74:	bl	108a0 <coda_match_filefilter@plt>
   10f78:	cmp	r0, #0
   10f7c:	bne	110f8 <main@@Base+0x3e0>
   10f80:	bl	108e8 <coda_done@plt>
   10f84:	mov	r0, #0
   10f88:	add	sp, sp, #44	; 0x2c
   10f8c:	ldrd	r4, [sp]
   10f90:	ldrd	r6, [sp, #8]
   10f94:	ldrd	r8, [sp, #16]
   10f98:	ldrd	sl, [sp, #24]
   10f9c:	add	sp, sp, #32
   10fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   10fa4:	movw	r3, #8296	; 0x2068
   10fa8:	movt	r3, #2
   10fac:	ldr	r3, [r3]
   10fb0:	mov	r2, #25
   10fb4:	mov	r1, #1
   10fb8:	movw	r0, #6128	; 0x17f0
   10fbc:	movt	r0, #1
   10fc0:	bl	108dc <fwrite@plt>
   10fc4:	bl	10bbc <callback@@Base+0x13c>
   10fc8:	mov	r0, #1
   10fcc:	bl	10918 <exit@plt>
   10fd0:	str	r0, [sp, #12]
   10fd4:	add	r4, r4, #1
   10fd8:	cmp	r5, r4
   10fdc:	ble	10f3c <main@@Base+0x224>
   10fe0:	lsl	r8, r4, #2
   10fe4:	ldr	r6, [r7, r4, lsl #2]
   10fe8:	mov	r1, r9
   10fec:	mov	r0, r6
   10ff0:	bl	108ac <strcmp@plt>
   10ff4:	cmp	r0, #0
   10ff8:	beq	10fd0 <main@@Base+0x2b8>
   10ffc:	ldr	r1, [sp, #16]
   11000:	mov	r0, r6
   11004:	bl	108ac <strcmp@plt>
   11008:	cmp	r0, #0
   1100c:	beq	11090 <main@@Base+0x378>
   11010:	ldr	r1, [sp, #20]
   11014:	mov	r0, r6
   11018:	bl	108ac <strcmp@plt>
   1101c:	cmp	r0, #0
   11020:	beq	11038 <main@@Base+0x320>
   11024:	ldr	r1, [sp, #32]
   11028:	mov	r0, r6
   1102c:	bl	108ac <strcmp@plt>
   11030:	cmp	r0, #0
   11034:	bne	11060 <main@@Base+0x348>
   11038:	add	r3, r4, #1
   1103c:	cmp	r3, r5
   11040:	bge	11060 <main@@Base+0x348>
   11044:	add	r8, r7, r8
   11048:	ldr	r2, [r8, #4]
   1104c:	ldrb	r1, [r2]
   11050:	cmp	r1, #45	; 0x2d
   11054:	movne	r4, r3
   11058:	strne	r2, [sp, #28]
   1105c:	bne	10fd4 <main@@Base+0x2bc>
   11060:	ldr	r1, [sp, #24]
   11064:	mov	r0, r6
   11068:	bl	108ac <strcmp@plt>
   1106c:	cmp	r0, #0
   11070:	beq	11088 <main@@Base+0x370>
   11074:	ldr	r1, [sp, #36]	; 0x24
   11078:	mov	r0, r6
   1107c:	bl	108ac <strcmp@plt>
   11080:	cmp	r0, #0
   11084:	bne	10f30 <main@@Base+0x218>
   11088:	str	fp, [sl]
   1108c:	b	10fd4 <main@@Base+0x2bc>
   11090:	str	r0, [sp, #12]
   11094:	b	10fd4 <main@@Base+0x2bc>
   11098:	movw	r3, #8296	; 0x2068
   1109c:	movt	r3, #2
   110a0:	ldr	r3, [r3]
   110a4:	mov	r2, #25
   110a8:	mov	r1, #1
   110ac:	movw	r0, #6128	; 0x17f0
   110b0:	movt	r0, #1
   110b4:	bl	108dc <fwrite@plt>
   110b8:	bl	10bbc <callback@@Base+0x13c>
   110bc:	mov	r0, #1
   110c0:	bl	10918 <exit@plt>
   110c4:	movw	r3, #8296	; 0x2068
   110c8:	movt	r3, #2
   110cc:	ldr	r4, [r3]
   110d0:	bl	1096c <coda_get_errno@plt>
   110d4:	ldr	r0, [r0]
   110d8:	bl	10954 <coda_errno_to_string@plt>
   110dc:	mov	r2, r0
   110e0:	movw	r1, #6080	; 0x17c0
   110e4:	movt	r1, #1
   110e8:	mov	r0, r4
   110ec:	bl	10924 <fprintf@plt>
   110f0:	mov	r0, #1
   110f4:	bl	10918 <exit@plt>
   110f8:	movw	r3, #8296	; 0x2068
   110fc:	movt	r3, #2
   11100:	ldr	r4, [r3]
   11104:	bl	1096c <coda_get_errno@plt>
   11108:	ldr	r0, [r0]
   1110c:	bl	10954 <coda_errno_to_string@plt>
   11110:	mov	r2, r0
   11114:	movw	r1, #6080	; 0x17c0
   11118:	movt	r1, #1
   1111c:	mov	r0, r4
   11120:	bl	10924 <fprintf@plt>
   11124:	mov	r0, #1
   11128:	bl	10918 <exit@plt>

0001112c <__libc_csu_init@@Base>:
   1112c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11130:	mov	r7, r0
   11134:	ldr	r6, [pc, #72]	; 11184 <__libc_csu_init@@Base+0x58>
   11138:	ldr	r5, [pc, #72]	; 11188 <__libc_csu_init@@Base+0x5c>
   1113c:	add	r6, pc, r6
   11140:	add	r5, pc, r5
   11144:	sub	r6, r6, r5
   11148:	mov	r8, r1
   1114c:	mov	r9, r2
   11150:	bl	10880 <coda_match_filefilter@plt-0x20>
   11154:	asrs	r6, r6, #2
   11158:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1115c:	mov	r4, #0
   11160:	add	r4, r4, #1
   11164:	ldr	r3, [r5], #4
   11168:	mov	r2, r9
   1116c:	mov	r1, r8
   11170:	mov	r0, r7
   11174:	blx	r3
   11178:	cmp	r6, r4
   1117c:	bne	11160 <__libc_csu_init@@Base+0x34>
   11180:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11184:			; <UNDEFINED> instruction: 0x00010db8
   11188:			; <UNDEFINED> instruction: 0x00010db0

0001118c <__libc_csu_fini@@Base>:
   1118c:	bx	lr

Disassembly of section .fini:

00011190 <.fini>:
   11190:	push	{r3, lr}
   11194:	pop	{r3, pc}
