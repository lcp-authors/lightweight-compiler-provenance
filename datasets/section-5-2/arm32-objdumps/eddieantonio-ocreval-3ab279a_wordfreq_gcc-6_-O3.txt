
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109ec <.init>:
   109ec:	push	{r3, lr}
   109f0:	bl	10d08 <__assert_fail@plt+0x140>
   109f4:	pop	{r3, pc}

Disassembly of section .plt:

000109f8 <calloc@plt-0x14>:
   109f8:	push	{lr}		; (str lr, [sp, #-4]!)
   109fc:	ldr	lr, [pc, #4]	; 10a08 <calloc@plt-0x4>
   10a00:	add	lr, pc, lr
   10a04:	ldr	pc, [lr, #8]!
   10a08:	strdeq	r7, [r1], -r8

00010a0c <calloc@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #94208	; 0x17000
   10a14:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a18 <strcmp@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #94208	; 0x17000
   10a20:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a24 <strtol@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #94208	; 0x17000
   10a2c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a30 <printf@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #94208	; 0x17000
   10a38:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a3c <fopen@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #94208	; 0x17000
   10a44:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a48 <free@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #94208	; 0x17000
   10a50:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a54 <utf8proc_get_property@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #94208	; 0x17000
   10a5c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a60 <fgets@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #94208	; 0x17000
   10a68:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a6c <utf8proc_encode_char@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #94208	; 0x17000
   10a74:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a78 <strdup@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #94208	; 0x17000
   10a80:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a84 <rewind@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #94208	; 0x17000
   10a8c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a90 <unlink@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #94208	; 0x17000
   10a98:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a9c <utf8proc_tolower@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #94208	; 0x17000
   10aa4:	ldr	pc, [ip, #1432]!	; 0x598

00010aa8 <__xstat@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #94208	; 0x17000
   10ab0:	ldr	pc, [ip, #1424]!	; 0x590

00010ab4 <fwrite@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #94208	; 0x17000
   10abc:	ldr	pc, [ip, #1416]!	; 0x588

00010ac0 <fread@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #94208	; 0x17000
   10ac8:	ldr	pc, [ip, #1408]!	; 0x580

00010acc <utf8proc_iterate@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #94208	; 0x17000
   10ad4:	ldr	pc, [ip, #1400]!	; 0x578

00010ad8 <puts@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #94208	; 0x17000
   10ae0:	ldr	pc, [ip, #1392]!	; 0x570

00010ae4 <malloc@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #94208	; 0x17000
   10aec:	ldr	pc, [ip, #1384]!	; 0x568

00010af0 <__libc_start_main@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #94208	; 0x17000
   10af8:	ldr	pc, [ip, #1376]!	; 0x560

00010afc <__sysv_signal@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #94208	; 0x17000
   10b04:	ldr	pc, [ip, #1368]!	; 0x558

00010b08 <__gmon_start__@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #94208	; 0x17000
   10b10:	ldr	pc, [ip, #1360]!	; 0x550

00010b14 <getpid@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #94208	; 0x17000
   10b1c:	ldr	pc, [ip, #1352]!	; 0x548

00010b20 <exit@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #94208	; 0x17000
   10b28:	ldr	pc, [ip, #1344]!	; 0x540

00010b2c <utf8proc_category@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #94208	; 0x17000
   10b34:	ldr	pc, [ip, #1336]!	; 0x538

00010b38 <strlen@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #94208	; 0x17000
   10b40:	ldr	pc, [ip, #1328]!	; 0x530

00010b44 <fprintf@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #94208	; 0x17000
   10b4c:	ldr	pc, [ip, #1320]!	; 0x528

00010b50 <__isoc99_sscanf@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #94208	; 0x17000
   10b58:	ldr	pc, [ip, #1312]!	; 0x520

00010b5c <fclose@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #94208	; 0x17000
   10b64:	ldr	pc, [ip, #1304]!	; 0x518

00010b68 <utf8proc_NFC@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #94208	; 0x17000
   10b70:	ldr	pc, [ip, #1296]!	; 0x510

00010b74 <fputc@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #94208	; 0x17000
   10b7c:	ldr	pc, [ip, #1288]!	; 0x508

00010b80 <sprintf@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #94208	; 0x17000
   10b88:	ldr	pc, [ip, #1280]!	; 0x500

00010b8c <utf8proc_errmsg@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #94208	; 0x17000
   10b94:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b98 <fputs@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #94208	; 0x17000
   10ba0:	ldr	pc, [ip, #1264]!	; 0x4f0

00010ba4 <strncmp@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #94208	; 0x17000
   10bac:	ldr	pc, [ip, #1256]!	; 0x4e8

00010bb0 <abort@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #94208	; 0x17000
   10bb8:	ldr	pc, [ip, #1248]!	; 0x4e0

00010bbc <getc@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #94208	; 0x17000
   10bc4:	ldr	pc, [ip, #1240]!	; 0x4d8

00010bc8 <__assert_fail@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #94208	; 0x17000
   10bd0:	ldr	pc, [ip, #1232]!	; 0x4d0

Disassembly of section .text:

00010bd8 <error@@Base-0x22ac>:
   10bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bdc:	sub	sp, sp, #12
   10be0:	add	ip, sp, #8
   10be4:	mov	r3, #0
   10be8:	str	r0, [ip, #-4]!
   10bec:	ldr	r2, [pc, #184]	; 10cac <__assert_fail@plt+0xe4>
   10bf0:	mov	r0, ip
   10bf4:	mov	sl, r1
   10bf8:	bl	12fbc <error@@Base+0x138>
   10bfc:	ldr	r3, [sp, #4]
   10c00:	cmp	r3, #0
   10c04:	beq	10ca4 <__assert_fail@plt+0xdc>
   10c08:	ble	10c9c <__assert_fail@plt+0xd4>
   10c0c:	ldr	r9, [pc, #156]	; 10cb0 <__assert_fail@plt+0xe8>
   10c10:	ldr	r7, [pc, #156]	; 10cb4 <__assert_fail@plt+0xec>
   10c14:	ldr	fp, [pc, #156]	; 10cb8 <__assert_fail@plt+0xf0>
   10c18:	sub	sl, sl, #4
   10c1c:	mov	r8, #0
   10c20:	ldr	r2, [pc, #148]	; 10cbc <__assert_fail@plt+0xf4>
   10c24:	ldr	r1, [sl, #4]!
   10c28:	mov	r0, r9
   10c2c:	bl	13270 <error@@Base+0x3ec>
   10c30:	mov	r1, r9
   10c34:	mov	r0, fp
   10c38:	bl	1221c <__assert_fail@plt+0x1654>
   10c3c:	ldr	r3, [pc, #116]	; 10cb8 <__assert_fail@plt+0xf0>
   10c40:	ldr	r4, [r3]
   10c44:	cmp	r4, #0
   10c48:	movne	r6, #0
   10c4c:	movne	r5, #1
   10c50:	beq	10c74 <__assert_fail@plt+0xac>
   10c54:	ldr	r1, [r4, #8]
   10c58:	mov	r3, r6
   10c5c:	mov	r2, r5
   10c60:	mov	r0, r7
   10c64:	bl	11b78 <__assert_fail@plt+0xfb0>
   10c68:	ldr	r4, [r4, #4]
   10c6c:	cmp	r4, #0
   10c70:	bne	10c54 <__assert_fail@plt+0x8c>
   10c74:	ldr	r1, [pc, #68]	; 10cc0 <__assert_fail@plt+0xf8>
   10c78:	mov	r0, r9
   10c7c:	bl	1124c <__assert_fail@plt+0x684>
   10c80:	ldr	r1, [pc, #60]	; 10cc4 <__assert_fail@plt+0xfc>
   10c84:	mov	r0, fp
   10c88:	bl	1124c <__assert_fail@plt+0x684>
   10c8c:	ldr	r3, [sp, #4]
   10c90:	add	r8, r8, #1
   10c94:	cmp	r3, r8
   10c98:	bgt	10c20 <__assert_fail@plt+0x58>
   10c9c:	bl	10f34 <__assert_fail@plt+0x36c>
   10ca0:	bl	12e2c <__assert_fail@plt+0x2264>
   10ca4:	ldr	r0, [pc, #28]	; 10cc8 <__assert_fail@plt+0x100>
   10ca8:	bl	12e84 <error@@Base>
   10cac:	andeq	r3, r1, r0, lsr #22
   10cb0:	andeq	r8, r2, ip, asr #2
   10cb4:	andeq	r8, r2, ip, ror #2
   10cb8:	andeq	r8, r2, ip, asr r1
   10cbc:	strheq	r8, [r2], -r0
   10cc0:	andeq	r0, r1, r8, asr #20
   10cc4:	ldrdeq	r2, [r1], -r8
   10cc8:	andeq	r3, r1, r4, asr #22
   10ccc:	mov	fp, #0
   10cd0:	mov	lr, #0
   10cd4:	pop	{r1}		; (ldr r1, [sp], #4)
   10cd8:	mov	r2, sp
   10cdc:	push	{r2}		; (str r2, [sp, #-4]!)
   10ce0:	push	{r0}		; (str r0, [sp, #-4]!)
   10ce4:	ldr	ip, [pc, #16]	; 10cfc <__assert_fail@plt+0x134>
   10ce8:	push	{ip}		; (str ip, [sp, #-4]!)
   10cec:	ldr	r0, [pc, #12]	; 10d00 <__assert_fail@plt+0x138>
   10cf0:	ldr	r3, [pc, #12]	; 10d04 <__assert_fail@plt+0x13c>
   10cf4:	bl	10af0 <__libc_start_main@plt>
   10cf8:	bl	10bb0 <abort@plt>
   10cfc:	andeq	r3, r1, r8, ror #21
   10d00:	ldrdeq	r0, [r1], -r8
   10d04:	andeq	r3, r1, r8, lsl #21
   10d08:	ldr	r3, [pc, #20]	; 10d24 <__assert_fail@plt+0x15c>
   10d0c:	ldr	r2, [pc, #20]	; 10d28 <__assert_fail@plt+0x160>
   10d10:	add	r3, pc, r3
   10d14:	ldr	r2, [r3, r2]
   10d18:	cmp	r2, #0
   10d1c:	bxeq	lr
   10d20:	b	10b08 <__gmon_start__@plt>
   10d24:	andeq	r7, r1, r8, ror #5
   10d28:	andeq	r0, r0, r4, lsr #1
   10d2c:	ldr	r3, [pc, #28]	; 10d50 <__assert_fail@plt+0x188>
   10d30:	ldr	r0, [pc, #28]	; 10d54 <__assert_fail@plt+0x18c>
   10d34:	sub	r3, r3, r0
   10d38:	cmp	r3, #6
   10d3c:	bxls	lr
   10d40:	ldr	r3, [pc, #16]	; 10d58 <__assert_fail@plt+0x190>
   10d44:	cmp	r3, #0
   10d48:	bxeq	lr
   10d4c:	bx	r3
   10d50:	andeq	r8, r2, r7, asr #1
   10d54:	andeq	r8, r2, r4, asr #1
   10d58:	andeq	r0, r0, r0
   10d5c:	ldr	r1, [pc, #36]	; 10d88 <__assert_fail@plt+0x1c0>
   10d60:	ldr	r0, [pc, #36]	; 10d8c <__assert_fail@plt+0x1c4>
   10d64:	sub	r1, r1, r0
   10d68:	asr	r1, r1, #2
   10d6c:	add	r1, r1, r1, lsr #31
   10d70:	asrs	r1, r1, #1
   10d74:	bxeq	lr
   10d78:	ldr	r3, [pc, #16]	; 10d90 <__assert_fail@plt+0x1c8>
   10d7c:	cmp	r3, #0
   10d80:	bxeq	lr
   10d84:	bx	r3
   10d88:	andeq	r8, r2, r4, asr #1
   10d8c:	andeq	r8, r2, r4, asr #1
   10d90:	andeq	r0, r0, r0
   10d94:	push	{r4, lr}
   10d98:	ldr	r4, [pc, #24]	; 10db8 <__assert_fail@plt+0x1f0>
   10d9c:	ldrb	r3, [r4]
   10da0:	cmp	r3, #0
   10da4:	popne	{r4, pc}
   10da8:	bl	10d2c <__assert_fail@plt+0x164>
   10dac:	mov	r3, #1
   10db0:	strb	r3, [r4]
   10db4:	pop	{r4, pc}
   10db8:	ldrdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   10dbc:	ldr	r0, [pc, #40]	; 10dec <__assert_fail@plt+0x224>
   10dc0:	ldr	r3, [r0]
   10dc4:	cmp	r3, #0
   10dc8:	bne	10dd0 <__assert_fail@plt+0x208>
   10dcc:	b	10d5c <__assert_fail@plt+0x194>
   10dd0:	ldr	r3, [pc, #24]	; 10df0 <__assert_fail@plt+0x228>
   10dd4:	cmp	r3, #0
   10dd8:	beq	10dcc <__assert_fail@plt+0x204>
   10ddc:	push	{r4, lr}
   10de0:	blx	r3
   10de4:	pop	{r4, lr}
   10de8:	b	10d5c <__assert_fail@plt+0x194>
   10dec:	andeq	r7, r2, r4, lsl #28
   10df0:	andeq	r0, r0, r0
   10df4:	ldr	r1, [r1, #8]
   10df8:	ldr	r0, [r0, #8]
   10dfc:	b	12c94 <__assert_fail@plt+0x20cc>
   10e00:	ldr	r2, [r0, #12]
   10e04:	ldr	r3, [r1, #12]
   10e08:	cmp	r2, r3
   10e0c:	beq	10e18 <__assert_fail@plt+0x250>
   10e10:	sub	r0, r3, r2
   10e14:	bx	lr
   10e18:	ldr	r1, [r1, #8]
   10e1c:	ldr	r0, [r0, #8]
   10e20:	b	12c94 <__assert_fail@plt+0x20cc>
   10e24:	push	{r4, r5, r6, r7, r8, lr}
   10e28:	mov	r1, r0
   10e2c:	ldr	r4, [pc, #104]	; 10e9c <__assert_fail@plt+0x2d4>
   10e30:	ldr	r2, [pc, #104]	; 10ea0 <__assert_fail@plt+0x2d8>
   10e34:	ldr	r0, [pc, #104]	; 10ea4 <__assert_fail@plt+0x2dc>
   10e38:	bl	13270 <error@@Base+0x3ec>
   10e3c:	mov	r0, r4
   10e40:	ldr	r1, [pc, #92]	; 10ea4 <__assert_fail@plt+0x2dc>
   10e44:	bl	1221c <__assert_fail@plt+0x1654>
   10e48:	ldr	r4, [r4]
   10e4c:	cmp	r4, #0
   10e50:	beq	10e80 <__assert_fail@plt+0x2b8>
   10e54:	ldr	r7, [pc, #76]	; 10ea8 <__assert_fail@plt+0x2e0>
   10e58:	mov	r6, #0
   10e5c:	mov	r5, #1
   10e60:	ldr	r1, [r4, #8]
   10e64:	mov	r3, r6
   10e68:	mov	r2, r5
   10e6c:	mov	r0, r7
   10e70:	bl	11b78 <__assert_fail@plt+0xfb0>
   10e74:	ldr	r4, [r4, #4]
   10e78:	cmp	r4, #0
   10e7c:	bne	10e60 <__assert_fail@plt+0x298>
   10e80:	ldr	r1, [pc, #36]	; 10eac <__assert_fail@plt+0x2e4>
   10e84:	ldr	r0, [pc, #24]	; 10ea4 <__assert_fail@plt+0x2dc>
   10e88:	bl	1124c <__assert_fail@plt+0x684>
   10e8c:	ldr	r1, [pc, #28]	; 10eb0 <__assert_fail@plt+0x2e8>
   10e90:	ldr	r0, [pc, #4]	; 10e9c <__assert_fail@plt+0x2d4>
   10e94:	pop	{r4, r5, r6, r7, r8, lr}
   10e98:	b	1124c <__assert_fail@plt+0x684>
   10e9c:	andeq	r8, r2, ip, asr r1
   10ea0:	strheq	r8, [r2], -r0
   10ea4:	andeq	r8, r2, ip, asr #2
   10ea8:	andeq	r8, r2, ip, ror #2
   10eac:	andeq	r0, r1, r8, asr #20
   10eb0:	ldrdeq	r2, [r1], -r8
   10eb4:	push	{r4, r5, r6, r7, r8, lr}
   10eb8:	mov	r6, #0
   10ebc:	ldr	r5, [pc, #96]	; 10f24 <__assert_fail@plt+0x35c>
   10ec0:	ldr	r0, [pc, #96]	; 10f28 <__assert_fail@plt+0x360>
   10ec4:	bl	10ad8 <puts@plt>
   10ec8:	ldr	r3, [r5, #3956]	; 0xf74
   10ecc:	cmp	r3, #0
   10ed0:	ble	10f14 <__assert_fail@plt+0x34c>
   10ed4:	ldr	r3, [r5, #3952]	; 0xf70
   10ed8:	ldr	r7, [pc, #76]	; 10f2c <__assert_fail@plt+0x364>
   10edc:	mov	r4, r6
   10ee0:	ldr	r3, [r3, r4, lsl #2]
   10ee4:	mov	r0, r7
   10ee8:	ldr	r2, [r3, #8]
   10eec:	ldr	r1, [r3, #12]
   10ef0:	bl	10a30 <printf@plt>
   10ef4:	ldr	r3, [r5, #3952]	; 0xf70
   10ef8:	ldr	r1, [r5, #3956]	; 0xf74
   10efc:	ldr	r2, [r3, r4, lsl #2]
   10f00:	add	r4, r4, #1
   10f04:	cmp	r1, r4
   10f08:	ldr	r2, [r2, #12]
   10f0c:	add	r6, r6, r2
   10f10:	bgt	10ee0 <__assert_fail@plt+0x318>
   10f14:	mov	r1, r6
   10f18:	ldr	r0, [pc, #16]	; 10f30 <__assert_fail@plt+0x368>
   10f1c:	pop	{r4, r5, r6, r7, r8, lr}
   10f20:	b	10a30 <printf@plt>
   10f24:	andeq	r9, r2, ip, ror #2
   10f28:	strdeq	r3, [r1], -r8
   10f2c:	andeq	r3, r1, r4, lsl #22
   10f30:	andeq	r3, r1, r0, lsl fp
   10f34:	push	{r4, r5, r6, r7, r8, lr}
   10f38:	mov	r6, #0
   10f3c:	ldr	r5, [pc, #244]	; 11038 <__assert_fail@plt+0x470>
   10f40:	sub	r0, r5, #4096	; 0x1000
   10f44:	bl	1214c <__assert_fail@plt+0x1584>
   10f48:	ldr	r1, [r5, #3952]	; 0xf70
   10f4c:	ldr	r0, [r5, #3956]	; 0xf74
   10f50:	ldr	r2, [pc, #228]	; 1103c <__assert_fail@plt+0x474>
   10f54:	bl	11444 <__assert_fail@plt+0x87c>
   10f58:	ldr	r0, [pc, #224]	; 11040 <__assert_fail@plt+0x478>
   10f5c:	bl	10ad8 <puts@plt>
   10f60:	ldr	r3, [r5, #3956]	; 0xf74
   10f64:	cmp	r3, #0
   10f68:	ble	10fac <__assert_fail@plt+0x3e4>
   10f6c:	ldr	r3, [r5, #3952]	; 0xf70
   10f70:	ldr	r7, [pc, #204]	; 11044 <__assert_fail@plt+0x47c>
   10f74:	mov	r4, r6
   10f78:	ldr	r3, [r3, r4, lsl #2]
   10f7c:	mov	r0, r7
   10f80:	ldr	r2, [r3, #8]
   10f84:	ldr	r1, [r3, #12]
   10f88:	bl	10a30 <printf@plt>
   10f8c:	ldr	r3, [r5, #3952]	; 0xf70
   10f90:	ldr	r1, [r5, #3956]	; 0xf74
   10f94:	ldr	r2, [r3, r4, lsl #2]
   10f98:	add	r4, r4, #1
   10f9c:	cmp	r4, r1
   10fa0:	ldr	r2, [r2, #12]
   10fa4:	add	r6, r6, r2
   10fa8:	blt	10f78 <__assert_fail@plt+0x3b0>
   10fac:	mov	r1, r6
   10fb0:	ldr	r0, [pc, #144]	; 11048 <__assert_fail@plt+0x480>
   10fb4:	bl	10a30 <printf@plt>
   10fb8:	ldr	r0, [pc, #140]	; 1104c <__assert_fail@plt+0x484>
   10fbc:	bl	10ad8 <puts@plt>
   10fc0:	ldr	r2, [pc, #136]	; 11050 <__assert_fail@plt+0x488>
   10fc4:	ldr	r1, [r5, #3952]	; 0xf70
   10fc8:	ldr	r0, [r5, #3956]	; 0xf74
   10fcc:	bl	11444 <__assert_fail@plt+0x87c>
   10fd0:	ldr	r0, [pc, #104]	; 11040 <__assert_fail@plt+0x478>
   10fd4:	bl	10ad8 <puts@plt>
   10fd8:	ldr	r3, [r5, #3956]	; 0xf74
   10fdc:	mov	r6, #0
   10fe0:	cmp	r3, #0
   10fe4:	ble	11028 <__assert_fail@plt+0x460>
   10fe8:	ldr	r3, [r5, #3952]	; 0xf70
   10fec:	ldr	r7, [pc, #80]	; 11044 <__assert_fail@plt+0x47c>
   10ff0:	mov	r4, r6
   10ff4:	ldr	r3, [r3, r4, lsl #2]
   10ff8:	mov	r0, r7
   10ffc:	ldr	r2, [r3, #8]
   11000:	ldr	r1, [r3, #12]
   11004:	bl	10a30 <printf@plt>
   11008:	ldr	r3, [r5, #3952]	; 0xf70
   1100c:	ldr	r1, [r5, #3956]	; 0xf74
   11010:	ldr	r2, [r3, r4, lsl #2]
   11014:	add	r4, r4, #1
   11018:	cmp	r4, r1
   1101c:	ldr	r2, [r2, #12]
   11020:	add	r6, r6, r2
   11024:	blt	10ff4 <__assert_fail@plt+0x42c>
   11028:	mov	r1, r6
   1102c:	ldr	r0, [pc, #20]	; 11048 <__assert_fail@plt+0x480>
   11030:	pop	{r4, r5, r6, r7, r8, lr}
   11034:	b	10a30 <printf@plt>
   11038:	andeq	r9, r2, ip, ror #2
   1103c:	strdeq	r0, [r1], -r4
   11040:	strdeq	r3, [r1], -r8
   11044:	andeq	r3, r1, r4, lsl #22
   11048:	andeq	r3, r1, r0, lsl fp
   1104c:	andeq	r3, r1, ip, asr ip
   11050:	andeq	r0, r1, r0, lsl #28
   11054:	mov	r3, #0
   11058:	str	r3, [r0, #4]
   1105c:	str	r3, [r0]
   11060:	str	r3, [r0, #8]
   11064:	str	r3, [r0, #12]
   11068:	bx	lr
   1106c:	ldr	r3, [r0]
   11070:	mov	r2, #0
   11074:	cmp	r3, r2
   11078:	push	{r4, lr}
   1107c:	mov	r4, r0
   11080:	stm	r1, {r2, r3}
   11084:	str	r1, [r0]
   11088:	streq	r1, [r0, #4]
   1108c:	ldr	r0, [r0, #8]
   11090:	strne	r1, [r3]
   11094:	cmp	r0, #0
   11098:	beq	110a8 <__assert_fail@plt+0x4e0>
   1109c:	bl	10a48 <free@plt>
   110a0:	mov	r3, #0
   110a4:	str	r3, [r4, #8]
   110a8:	ldr	r3, [r4, #12]
   110ac:	add	r3, r3, #1
   110b0:	str	r3, [r4, #12]
   110b4:	pop	{r4, pc}
   110b8:	ldr	r3, [r0, #4]
   110bc:	mov	r2, #0
   110c0:	cmp	r3, r2
   110c4:	push	{r4, lr}
   110c8:	mov	r4, r0
   110cc:	str	r3, [r1]
   110d0:	str	r2, [r1, #4]
   110d4:	streq	r1, [r0]
   110d8:	ldr	r0, [r0, #8]
   110dc:	strne	r1, [r3, #4]
   110e0:	cmp	r0, #0
   110e4:	str	r1, [r4, #4]
   110e8:	beq	110f8 <__assert_fail@plt+0x530>
   110ec:	bl	10a48 <free@plt>
   110f0:	mov	r3, #0
   110f4:	str	r3, [r4, #8]
   110f8:	ldr	r3, [r4, #12]
   110fc:	add	r3, r3, #1
   11100:	str	r3, [r4, #12]
   11104:	pop	{r4, pc}
   11108:	ldr	r3, [r2]
   1110c:	push	{r4, lr}
   11110:	cmp	r3, #0
   11114:	str	r3, [r1]
   11118:	str	r2, [r1, #4]
   1111c:	mov	r4, r0
   11120:	streq	r1, [r0]
   11124:	ldr	r0, [r0, #8]
   11128:	strne	r1, [r3, #4]
   1112c:	cmp	r0, #0
   11130:	str	r1, [r2]
   11134:	beq	11144 <__assert_fail@plt+0x57c>
   11138:	bl	10a48 <free@plt>
   1113c:	mov	r3, #0
   11140:	str	r3, [r4, #8]
   11144:	ldr	r3, [r4, #12]
   11148:	add	r3, r3, #1
   1114c:	str	r3, [r4, #12]
   11150:	pop	{r4, pc}
   11154:	ldr	r3, [r1, #4]
   11158:	push	{r4, lr}
   1115c:	cmp	r3, #0
   11160:	stm	r2, {r1, r3}
   11164:	mov	r4, r0
   11168:	str	r2, [r1, #4]
   1116c:	streq	r2, [r0, #4]
   11170:	ldr	r0, [r0, #8]
   11174:	strne	r2, [r3]
   11178:	cmp	r0, #0
   1117c:	beq	1118c <__assert_fail@plt+0x5c4>
   11180:	bl	10a48 <free@plt>
   11184:	mov	r3, #0
   11188:	str	r3, [r4, #8]
   1118c:	ldr	r3, [r4, #12]
   11190:	add	r3, r3, #1
   11194:	str	r3, [r4, #12]
   11198:	pop	{r4, pc}
   1119c:	ldr	r3, [r1]
   111a0:	ldr	r2, [r1, #4]
   111a4:	cmp	r3, #0
   111a8:	push	{r4, r5, r6, lr}
   111ac:	mov	r4, r0
   111b0:	strne	r2, [r3, #4]
   111b4:	ldrne	r2, [r1, #4]
   111b8:	streq	r2, [r0]
   111bc:	cmp	r2, #0
   111c0:	streq	r3, [r0, #4]
   111c4:	ldr	r0, [r0, #8]
   111c8:	mov	r5, #0
   111cc:	strne	r3, [r2]
   111d0:	cmp	r0, r5
   111d4:	str	r5, [r1, #4]
   111d8:	str	r5, [r1]
   111dc:	beq	111e8 <__assert_fail@plt+0x620>
   111e0:	bl	10a48 <free@plt>
   111e4:	str	r5, [r4, #8]
   111e8:	ldr	r3, [r4, #12]
   111ec:	sub	r3, r3, #1
   111f0:	str	r3, [r4, #12]
   111f4:	pop	{r4, r5, r6, pc}
   111f8:	ldr	r3, [r0, #8]
   111fc:	cmp	r3, #0
   11200:	bxne	lr
   11204:	ldr	r3, [r0, #12]
   11208:	cmp	r3, #0
   1120c:	bxeq	lr
   11210:	push	{r4, lr}
   11214:	mov	r1, #4
   11218:	mov	r4, r0
   1121c:	mov	r0, r3
   11220:	bl	12ec0 <error@@Base+0x3c>
   11224:	ldr	r3, [r4]
   11228:	cmp	r3, #0
   1122c:	str	r0, [r4, #8]
   11230:	popeq	{r4, pc}
   11234:	sub	r0, r0, #4
   11238:	str	r3, [r0, #4]!
   1123c:	ldr	r3, [r3, #4]
   11240:	cmp	r3, #0
   11244:	bne	11238 <__assert_fail@plt+0x670>
   11248:	pop	{r4, pc}
   1124c:	push	{r4, r5, r6, r7, r8, lr}
   11250:	ldr	r4, [r0]
   11254:	cmp	r4, #0
   11258:	popeq	{r4, r5, r6, r7, r8, pc}
   1125c:	mov	r6, r1
   11260:	mov	r5, r0
   11264:	mov	r7, #0
   11268:	ldr	r3, [r4]
   1126c:	ldr	r2, [r4, #4]
   11270:	cmp	r3, #0
   11274:	strne	r2, [r3, #4]
   11278:	ldrne	r2, [r4, #4]
   1127c:	ldr	r0, [r5, #8]
   11280:	streq	r2, [r5]
   11284:	cmp	r2, #0
   11288:	strne	r3, [r2]
   1128c:	streq	r3, [r5, #4]
   11290:	cmp	r0, #0
   11294:	str	r7, [r4, #4]
   11298:	str	r7, [r4]
   1129c:	beq	112a8 <__assert_fail@plt+0x6e0>
   112a0:	bl	10a48 <free@plt>
   112a4:	str	r7, [r5, #8]
   112a8:	ldr	r3, [r5, #12]
   112ac:	mov	r0, r4
   112b0:	sub	r3, r3, #1
   112b4:	str	r3, [r5, #12]
   112b8:	blx	r6
   112bc:	ldr	r4, [r5]
   112c0:	cmp	r4, #0
   112c4:	bne	11268 <__assert_fail@plt+0x6a0>
   112c8:	pop	{r4, r5, r6, r7, r8, pc}
   112cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d0:	sub	sp, sp, #12
   112d4:	lsl	r3, r1, #2
   112d8:	str	r1, [sp]
   112dc:	str	r3, [sp, #4]
   112e0:	ldr	r5, [pc, #344]	; 11440 <__assert_fail@plt+0x878>
   112e4:	ldr	r3, [sp]
   112e8:	mov	r9, r0
   112ec:	ldr	r1, [r5]
   112f0:	cmp	r9, r3
   112f4:	movlt	r4, r3
   112f8:	ldr	r7, [r1, r9, lsl #2]
   112fc:	movlt	r8, r9
   11300:	bge	1142c <__assert_fail@plt+0x864>
   11304:	lsl	r6, r4, #2
   11308:	b	11310 <__assert_fail@plt+0x748>
   1130c:	ldr	r1, [r5]
   11310:	ldr	r1, [r1, r6]
   11314:	ldr	r3, [r5, #4]
   11318:	mov	r0, r7
   1131c:	blx	r3
   11320:	cmp	r0, #0
   11324:	bge	11374 <__assert_fail@plt+0x7ac>
   11328:	sub	r4, r4, #1
   1132c:	cmp	r4, r8
   11330:	sub	r6, r6, #4
   11334:	bgt	1130c <__assert_fail@plt+0x744>
   11338:	bne	11370 <__assert_fail@plt+0x7a8>
   1133c:	ldr	r1, [r5]
   11340:	mov	fp, r4
   11344:	add	r0, r1, fp, lsl #2
   11348:	sub	r1, fp, #1
   1134c:	cmp	r9, r1
   11350:	str	r7, [r0]
   11354:	blt	11410 <__assert_fail@plt+0x848>
   11358:	ldr	r3, [sp]
   1135c:	add	r9, r4, #1
   11360:	cmp	r9, r3
   11364:	blt	112ec <__assert_fail@plt+0x724>
   11368:	add	sp, sp, #12
   1136c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11370:	lsl	r6, r4, #2
   11374:	ldr	r1, [r5]
   11378:	add	fp, r8, #1
   1137c:	cmp	fp, r4
   11380:	ldr	r2, [r1, r6]
   11384:	add	r0, r1, r6
   11388:	str	r2, [r1, r8, lsl #2]
   1138c:	lsl	r8, r8, #2
   11390:	bge	1141c <__assert_fail@plt+0x854>
   11394:	add	sl, r8, #4
   11398:	b	113b0 <__assert_fail@plt+0x7e8>
   1139c:	add	fp, fp, #1
   113a0:	cmp	fp, r4
   113a4:	add	sl, sl, #4
   113a8:	beq	113f4 <__assert_fail@plt+0x82c>
   113ac:	ldr	r1, [r5]
   113b0:	ldr	r1, [r1, sl]
   113b4:	ldr	r8, [r5, #4]
   113b8:	mov	r0, r7
   113bc:	blx	r8
   113c0:	cmp	r0, #0
   113c4:	bgt	1139c <__assert_fail@plt+0x7d4>
   113c8:	ldr	r1, [r5]
   113cc:	mov	r8, fp
   113d0:	add	r0, r1, r6
   113d4:	sub	r4, r4, #1
   113d8:	ldr	r2, [r1, sl]
   113dc:	cmp	r4, fp
   113e0:	str	r2, [r0]
   113e4:	bgt	11304 <__assert_fail@plt+0x73c>
   113e8:	mov	fp, r4
   113ec:	mov	r4, r8
   113f0:	b	11344 <__assert_fail@plt+0x77c>
   113f4:	ldr	r0, [r5]
   113f8:	add	r0, r0, r6
   113fc:	sub	r1, fp, #1
   11400:	cmp	r9, r1
   11404:	mov	r4, fp
   11408:	str	r7, [r0]
   1140c:	bge	11358 <__assert_fail@plt+0x790>
   11410:	mov	r0, r9
   11414:	bl	112cc <__assert_fail@plt+0x704>
   11418:	b	11358 <__assert_fail@plt+0x790>
   1141c:	beq	113fc <__assert_fail@plt+0x834>
   11420:	lsl	sl, fp, #2
   11424:	mov	r8, fp
   11428:	b	113d4 <__assert_fail@plt+0x80c>
   1142c:	mov	fp, r3
   11430:	ldr	r3, [sp, #4]
   11434:	mov	r4, r9
   11438:	add	r0, r1, r3
   1143c:	b	11348 <__assert_fail@plt+0x780>
   11440:	ldrdeq	r8, [r2], -ip
   11444:	cmp	r0, #1
   11448:	mov	ip, r1
   1144c:	bxle	lr
   11450:	ldr	r3, [pc, #16]	; 11468 <__assert_fail@plt+0x8a0>
   11454:	sub	r1, r0, #1
   11458:	mov	r0, #0
   1145c:	str	ip, [r3]
   11460:	str	r2, [r3, #4]
   11464:	b	112cc <__assert_fail@plt+0x704>
   11468:	ldrdeq	r8, [r2], -ip
   1146c:	andeq	r0, r0, r0
   11470:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11474:	mov	r2, r0
   11478:	sub	sp, sp, #12
   1147c:	mov	r7, r0
   11480:	mov	r4, r1
   11484:	ldr	r0, [pc, #248]	; 11584 <__assert_fail@plt+0x9bc>
   11488:	mov	r1, #99	; 0x63
   1148c:	bl	10a60 <fgets@plt>
   11490:	cmp	r0, #0
   11494:	beq	11574 <__assert_fail@plt+0x9ac>
   11498:	mov	r2, r7
   1149c:	mov	r1, #99	; 0x63
   114a0:	ldr	r0, [pc, #220]	; 11584 <__assert_fail@plt+0x9bc>
   114a4:	bl	10a60 <fgets@plt>
   114a8:	cmp	r0, #0
   114ac:	beq	11574 <__assert_fail@plt+0x9ac>
   114b0:	ldr	r5, [pc, #204]	; 11584 <__assert_fail@plt+0x9bc>
   114b4:	ldr	r8, [pc, #204]	; 11588 <__assert_fail@plt+0x9c0>
   114b8:	ldr	sl, [pc, #204]	; 1158c <__assert_fail@plt+0x9c4>
   114bc:	mov	fp, #0
   114c0:	add	r6, r5, #29
   114c4:	mov	r9, #99	; 0x63
   114c8:	mov	r2, r7
   114cc:	mov	r1, r9
   114d0:	mov	r0, r5
   114d4:	bl	10a60 <fgets@plt>
   114d8:	add	r3, sp, #4
   114dc:	mov	r2, sp
   114e0:	mov	r1, r8
   114e4:	cmp	r0, #0
   114e8:	mov	r0, r5
   114ec:	beq	114fc <__assert_fail@plt+0x934>
   114f0:	bl	10b50 <__isoc99_sscanf@plt>
   114f4:	cmp	r0, #2
   114f8:	beq	11508 <__assert_fail@plt+0x940>
   114fc:	mov	r0, fp
   11500:	add	sp, sp, #12
   11504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11508:	mov	r1, #0
   1150c:	mov	r2, #10
   11510:	mov	r0, r6
   11514:	bl	10a24 <strtol@plt>
   11518:	mov	r1, sl
   1151c:	subs	r3, r0, #0
   11520:	mov	r0, r6
   11524:	beq	11554 <__assert_fail@plt+0x98c>
   11528:	lsl	r3, r3, #3
   1152c:	ldr	ip, [sp]
   11530:	add	r0, r4, r3
   11534:	ldr	r1, [r4, r3]
   11538:	ldr	r2, [r0, #4]
   1153c:	ldr	lr, [sp, #4]
   11540:	add	r1, r1, ip
   11544:	add	r2, r2, lr
   11548:	str	r1, [r4, r3]
   1154c:	str	r2, [r0, #4]
   11550:	b	114c8 <__assert_fail@plt+0x900>
   11554:	bl	10a18 <strcmp@plt>
   11558:	mov	r3, #88	; 0x58
   1155c:	cmp	r0, #0
   11560:	bne	1152c <__assert_fail@plt+0x964>
   11564:	ldr	fp, [sp]
   11568:	mov	r3, r0
   1156c:	mov	ip, fp
   11570:	b	11530 <__assert_fail@plt+0x968>
   11574:	mov	fp, #0
   11578:	mov	r0, fp
   1157c:	add	sp, sp, #12
   11580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11584:	andeq	r8, r2, r4, ror #1
   11588:	andeq	r3, r1, r4, ror #22
   1158c:	andeq	r3, r1, ip, asr fp
   11590:	ldr	r1, [r1, #8]
   11594:	ldr	r0, [r0, #8]
   11598:	b	12c94 <__assert_fail@plt+0x20cc>
   1159c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a0:	mov	r2, r0
   115a4:	ldr	r7, [pc, #252]	; 116a8 <__assert_fail@plt+0xae0>
   115a8:	sub	sp, sp, #20
   115ac:	mov	r8, r0
   115b0:	mov	r9, r1
   115b4:	mov	r0, r7
   115b8:	mov	r1, #99	; 0x63
   115bc:	bl	10a60 <fgets@plt>
   115c0:	cmp	r0, #0
   115c4:	beq	11620 <__assert_fail@plt+0xa58>
   115c8:	mov	r2, r8
   115cc:	mov	r1, #99	; 0x63
   115d0:	mov	r0, r7
   115d4:	bl	10a60 <fgets@plt>
   115d8:	cmp	r0, #0
   115dc:	beq	11620 <__assert_fail@plt+0xa58>
   115e0:	ldr	fp, [pc, #196]	; 116ac <__assert_fail@plt+0xae4>
   115e4:	mov	r4, r7
   115e8:	add	sl, r7, #29
   115ec:	mov	r2, r8
   115f0:	mov	r1, #99	; 0x63
   115f4:	mov	r0, r4
   115f8:	bl	10a60 <fgets@plt>
   115fc:	add	r3, sp, #12
   11600:	add	r2, sp, #8
   11604:	mov	r1, fp
   11608:	cmp	r0, #0
   1160c:	mov	r0, r4
   11610:	beq	11620 <__assert_fail@plt+0xa58>
   11614:	bl	10b50 <__isoc99_sscanf@plt>
   11618:	cmp	r0, #2
   1161c:	beq	11628 <__assert_fail@plt+0xa60>
   11620:	add	sp, sp, #20
   11624:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11628:	mov	r0, r4
   1162c:	bl	10b38 <strlen@plt>
   11630:	mov	r2, #0
   11634:	mov	r1, sl
   11638:	ldr	r5, [sp, #8]
   1163c:	ldr	r6, [sp, #12]
   11640:	add	r3, r7, r0
   11644:	mov	r0, r9
   11648:	strb	r2, [r3, #-1]
   1164c:	bl	11fc0 <__assert_fail@plt+0x13f8>
   11650:	subs	r3, r0, #0
   11654:	beq	11674 <__assert_fail@plt+0xaac>
   11658:	ldr	r1, [r3, #12]
   1165c:	ldr	r2, [r3, #16]
   11660:	add	r5, r1, r5
   11664:	add	r6, r2, r6
   11668:	str	r5, [r3, #12]
   1166c:	str	r6, [r3, #16]
   11670:	b	115ec <__assert_fail@plt+0xa24>
   11674:	mov	r1, #20
   11678:	mov	r0, #1
   1167c:	bl	12ec0 <error@@Base+0x3c>
   11680:	str	r0, [sp, #4]
   11684:	mov	r0, sl
   11688:	bl	10a78 <strdup@plt>
   1168c:	ldr	r3, [sp, #4]
   11690:	mov	r1, r3
   11694:	str	r0, [r3, #8]
   11698:	mov	r0, r9
   1169c:	bl	12044 <__assert_fail@plt+0x147c>
   116a0:	ldr	r3, [sp, #4]
   116a4:	b	11658 <__assert_fail@plt+0xa90>
   116a8:	andeq	r8, r2, r4, ror #1
   116ac:	andeq	r3, r1, r4, ror #22
   116b0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116b4:	add	r7, r1, #4096	; 0x1000
   116b8:	vpush	{d8}
   116bc:	mov	r6, r0
   116c0:	mov	r0, r1
   116c4:	mov	r4, r2
   116c8:	bl	1214c <__assert_fail@plt+0x1584>
   116cc:	ldr	r1, [r7, #3952]	; 0xf70
   116d0:	ldr	r0, [r7, #3956]	; 0xf74
   116d4:	ldr	r2, [pc, #332]	; 11828 <__assert_fail@plt+0xc60>
   116d8:	bl	11444 <__assert_fail@plt+0x87c>
   116dc:	mov	r2, r4
   116e0:	ldr	r1, [pc, #324]	; 1182c <__assert_fail@plt+0xc64>
   116e4:	mov	r0, r6
   116e8:	bl	10b44 <fprintf@plt>
   116ec:	mov	r3, r6
   116f0:	mov	r2, #26
   116f4:	mov	r1, #1
   116f8:	ldr	r0, [pc, #304]	; 11830 <__assert_fail@plt+0xc68>
   116fc:	bl	10ab4 <fwrite@plt>
   11700:	mov	r3, r6
   11704:	mov	r2, #3
   11708:	mov	r1, #1
   1170c:	ldr	r0, [pc, #288]	; 11834 <__assert_fail@plt+0xc6c>
   11710:	bl	10ab4 <fwrite@plt>
   11714:	mov	r1, r6
   11718:	mov	r0, #10
   1171c:	bl	10b74 <fputc@plt>
   11720:	ldr	r3, [r7, #3956]	; 0xf74
   11724:	cmp	r3, #0
   11728:	ble	11814 <__assert_fail@plt+0xc4c>
   1172c:	vldr	d8, [pc, #236]	; 11820 <__assert_fail@plt+0xc58>
   11730:	ldr	sl, [pc, #256]	; 11838 <__assert_fail@plt+0xc70>
   11734:	ldr	fp, [pc, #256]	; 1183c <__assert_fail@plt+0xc74>
   11738:	ldr	r9, [pc, #244]	; 11834 <__assert_fail@plt+0xc6c>
   1173c:	mov	r4, #0
   11740:	b	117a8 <__assert_fail@plt+0xbe0>
   11744:	ldr	r2, [r5, #16]
   11748:	vmov	s15, r3
   1174c:	sub	r3, r3, r2
   11750:	vmov	s14, r3
   11754:	vcvt.f64.s32	d6, s15
   11758:	vcvt.f64.s32	d7, s14
   1175c:	vmul.f64	d7, d7, d8
   11760:	vdiv.f64	d5, d7, d6
   11764:	vmov	r2, r3, d5
   11768:	bl	10b44 <fprintf@plt>
   1176c:	mov	r3, r6
   11770:	mov	r2, #3
   11774:	mov	r1, #1
   11778:	mov	r0, r9
   1177c:	bl	10ab4 <fwrite@plt>
   11780:	ldr	r3, [r7, #3952]	; 0xf70
   11784:	ldr	r1, [pc, #180]	; 11840 <__assert_fail@plt+0xc78>
   11788:	mov	r0, r6
   1178c:	ldr	r3, [r3, r8]
   11790:	add	r4, r4, #1
   11794:	ldr	r2, [r3, #8]
   11798:	bl	10b44 <fprintf@plt>
   1179c:	ldr	r3, [r7, #3956]	; 0xf74
   117a0:	cmp	r3, r4
   117a4:	ble	11814 <__assert_fail@plt+0xc4c>
   117a8:	ldr	r3, [r7, #3952]	; 0xf70
   117ac:	mov	r1, sl
   117b0:	mov	r0, r6
   117b4:	ldr	r5, [r3, r4, lsl #2]
   117b8:	lsl	r8, r4, #2
   117bc:	cmn	r5, #12
   117c0:	beq	117fc <__assert_fail@plt+0xc34>
   117c4:	ldr	r3, [r5, #16]
   117c8:	ldr	r2, [r5, #12]
   117cc:	bl	10b44 <fprintf@plt>
   117d0:	ldr	r3, [r5, #12]
   117d4:	mov	r1, fp
   117d8:	cmp	r3, #0
   117dc:	mov	r0, r6
   117e0:	bne	11744 <__assert_fail@plt+0xb7c>
   117e4:	mov	r3, r6
   117e8:	mov	r2, #8
   117ec:	mov	r1, #1
   117f0:	ldr	r0, [pc, #76]	; 11844 <__assert_fail@plt+0xc7c>
   117f4:	bl	10ab4 <fwrite@plt>
   117f8:	b	1176c <__assert_fail@plt+0xba4>
   117fc:	mov	r3, r6
   11800:	mov	r2, #26
   11804:	mov	r1, #1
   11808:	ldr	r0, [pc, #32]	; 11830 <__assert_fail@plt+0xc68>
   1180c:	bl	10ab4 <fwrite@plt>
   11810:	b	1176c <__assert_fail@plt+0xba4>
   11814:	vpop	{d8}
   11818:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1181c:	nop			; (mov r0, r0)
   11820:	andeq	r0, r0, r0
   11824:	subsmi	r0, r9, r0
   11828:	muleq	r1, r0, r5
   1182c:	andeq	r3, r1, ip, ror #22
   11830:	andeq	r3, r1, r4, ror fp
   11834:	muleq	r1, r0, fp
   11838:	muleq	r1, r4, fp
   1183c:	andeq	r3, r1, ip, lsr #23
   11840:	andeq	r7, r1, r0, rrx
   11844:	andeq	r3, r1, r0, lsr #23
   11848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1184c:	vpush	{d8}
   11850:	mov	r8, r2
   11854:	mov	r2, r3
   11858:	mov	r5, r0
   1185c:	sub	sp, sp, #12
   11860:	mov	r6, r1
   11864:	ldrb	r3, [sp, #56]	; 0x38
   11868:	ldr	r1, [pc, #704]	; 11b30 <__assert_fail@plt+0xf68>
   1186c:	mov	r4, r3
   11870:	str	r3, [sp, #4]
   11874:	ldrb	r3, [sp, #60]	; 0x3c
   11878:	str	r3, [sp]
   1187c:	bl	10b44 <fprintf@plt>
   11880:	mov	r3, r5
   11884:	mov	r2, #26
   11888:	mov	r1, #1
   1188c:	ldr	r0, [pc, #672]	; 11b34 <__assert_fail@plt+0xf6c>
   11890:	bl	10ab4 <fwrite@plt>
   11894:	mov	r3, r5
   11898:	mov	r2, #3
   1189c:	mov	r1, #1
   118a0:	ldr	r0, [pc, #656]	; 11b38 <__assert_fail@plt+0xf70>
   118a4:	bl	10ab4 <fwrite@plt>
   118a8:	cmp	r4, #0
   118ac:	beq	11a34 <__assert_fail@plt+0xe6c>
   118b0:	ldr	r2, [pc, #644]	; 11b3c <__assert_fail@plt+0xf74>
   118b4:	ldr	r1, [pc, #644]	; 11b40 <__assert_fail@plt+0xf78>
   118b8:	mov	r0, r5
   118bc:	bl	10b44 <fprintf@plt>
   118c0:	cmp	r8, #0
   118c4:	ble	11994 <__assert_fail@plt+0xdcc>
   118c8:	vldr	d8, [pc, #600]	; 11b28 <__assert_fail@plt+0xf60>
   118cc:	ldr	r9, [pc, #624]	; 11b44 <__assert_fail@plt+0xf7c>
   118d0:	ldr	fp, [pc, #608]	; 11b38 <__assert_fail@plt+0xf70>
   118d4:	ldr	sl, [pc, #620]	; 11b48 <__assert_fail@plt+0xf80>
   118d8:	mov	r4, #1
   118dc:	b	1193c <__assert_fail@plt+0xd74>
   118e0:	ldr	r2, [r7, #4]
   118e4:	vmov	s15, r3
   118e8:	sub	r3, r3, r2
   118ec:	vmov	s14, r3
   118f0:	vcvt.f64.s32	d6, s15
   118f4:	vcvt.f64.s32	d7, s14
   118f8:	vmul.f64	d7, d7, d8
   118fc:	vdiv.f64	d5, d7, d6
   11900:	vmov	r2, r3, d5
   11904:	bl	10b44 <fprintf@plt>
   11908:	mov	r2, #3
   1190c:	mov	r1, #1
   11910:	mov	r3, r5
   11914:	mov	r0, fp
   11918:	bl	10ab4 <fwrite@plt>
   1191c:	mov	r2, r4
   11920:	mov	r1, sl
   11924:	mov	r0, r5
   11928:	bl	10b44 <fprintf@plt>
   1192c:	add	r4, r4, #1
   11930:	sxth	r4, r4
   11934:	cmp	r8, r4
   11938:	blt	11988 <__assert_fail@plt+0xdc0>
   1193c:	ldr	r3, [r6, r4, lsl #3]
   11940:	mov	r1, r9
   11944:	subs	r2, r3, #0
   11948:	mov	r0, r5
   1194c:	add	r7, r6, r4, lsl #3
   11950:	ble	1192c <__assert_fail@plt+0xd64>
   11954:	ldr	r3, [r7, #4]
   11958:	bl	10b44 <fprintf@plt>
   1195c:	ldr	r3, [r6, r4, lsl #3]
   11960:	ldr	r1, [pc, #484]	; 11b4c <__assert_fail@plt+0xf84>
   11964:	cmp	r3, #0
   11968:	mov	r0, r5
   1196c:	bne	118e0 <__assert_fail@plt+0xd18>
   11970:	mov	r3, r5
   11974:	mov	r2, #8
   11978:	mov	r1, #1
   1197c:	ldr	r0, [pc, #460]	; 11b50 <__assert_fail@plt+0xf88>
   11980:	bl	10ab4 <fwrite@plt>
   11984:	b	11908 <__assert_fail@plt+0xd40>
   11988:	ldr	r3, [sp, #4]
   1198c:	cmp	r3, #0
   11990:	beq	11a1c <__assert_fail@plt+0xe54>
   11994:	add	r4, r8, #1
   11998:	ldr	r2, [r6, r4, lsl #3]
   1199c:	add	r7, r6, r4, lsl #3
   119a0:	cmp	r2, #0
   119a4:	ble	11a1c <__assert_fail@plt+0xe54>
   119a8:	ldr	r3, [r7, #4]
   119ac:	ldr	r1, [pc, #400]	; 11b44 <__assert_fail@plt+0xf7c>
   119b0:	mov	r0, r5
   119b4:	bl	10b44 <fprintf@plt>
   119b8:	ldr	r2, [r6, r4, lsl #3]
   119bc:	cmp	r2, #0
   119c0:	beq	11af4 <__assert_fail@plt+0xf2c>
   119c4:	ldr	r3, [r7, #4]
   119c8:	vmov	s15, r2
   119cc:	sub	r3, r2, r3
   119d0:	vldr	d5, [pc, #336]	; 11b28 <__assert_fail@plt+0xf60>
   119d4:	vmov	s14, r3
   119d8:	vcvt.f64.s32	d6, s15
   119dc:	ldr	r1, [pc, #360]	; 11b4c <__assert_fail@plt+0xf84>
   119e0:	mov	r0, r5
   119e4:	vcvt.f64.s32	d7, s14
   119e8:	vmul.f64	d7, d7, d5
   119ec:	vdiv.f64	d5, d7, d6
   119f0:	vmov	r2, r3, d5
   119f4:	bl	10b44 <fprintf@plt>
   119f8:	mov	r2, #3
   119fc:	mov	r1, #1
   11a00:	mov	r3, r5
   11a04:	ldr	r0, [pc, #300]	; 11b38 <__assert_fail@plt+0xf70>
   11a08:	bl	10ab4 <fwrite@plt>
   11a0c:	mov	r2, r8
   11a10:	ldr	r1, [pc, #316]	; 11b54 <__assert_fail@plt+0xf8c>
   11a14:	mov	r0, r5
   11a18:	bl	10b44 <fprintf@plt>
   11a1c:	ldr	r3, [sp]
   11a20:	cmp	r3, #0
   11a24:	bne	11a50 <__assert_fail@plt+0xe88>
   11a28:	add	sp, sp, #12
   11a2c:	vpop	{d8}
   11a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a34:	ldr	r2, [pc, #284]	; 11b58 <__assert_fail@plt+0xf90>
   11a38:	ldr	r1, [pc, #256]	; 11b40 <__assert_fail@plt+0xf78>
   11a3c:	mov	r0, r5
   11a40:	bl	10b44 <fprintf@plt>
   11a44:	cmp	r8, #0
   11a48:	bgt	118c8 <__assert_fail@plt+0xd00>
   11a4c:	b	11a1c <__assert_fail@plt+0xe54>
   11a50:	cmp	r6, #0
   11a54:	beq	11b0c <__assert_fail@plt+0xf44>
   11a58:	ldm	r6, {r2, r3}
   11a5c:	ldr	r1, [pc, #224]	; 11b44 <__assert_fail@plt+0xf7c>
   11a60:	mov	r0, r5
   11a64:	bl	10b44 <fprintf@plt>
   11a68:	ldr	r2, [r6]
   11a6c:	cmp	r2, #0
   11a70:	beq	11adc <__assert_fail@plt+0xf14>
   11a74:	ldr	r3, [r6, #4]
   11a78:	vmov	s15, r2
   11a7c:	sub	r3, r2, r3
   11a80:	vldr	d5, [pc, #160]	; 11b28 <__assert_fail@plt+0xf60>
   11a84:	vmov	s14, r3
   11a88:	vcvt.f64.s32	d6, s15
   11a8c:	ldr	r1, [pc, #184]	; 11b4c <__assert_fail@plt+0xf84>
   11a90:	mov	r0, r5
   11a94:	vcvt.f64.s32	d7, s14
   11a98:	vmul.f64	d7, d7, d5
   11a9c:	vdiv.f64	d5, d7, d6
   11aa0:	vmov	r2, r3, d5
   11aa4:	bl	10b44 <fprintf@plt>
   11aa8:	mov	r3, r5
   11aac:	mov	r2, #3
   11ab0:	mov	r1, #1
   11ab4:	ldr	r0, [pc, #124]	; 11b38 <__assert_fail@plt+0xf70>
   11ab8:	bl	10ab4 <fwrite@plt>
   11abc:	mov	r3, r5
   11ac0:	mov	r2, #7
   11ac4:	mov	r1, #1
   11ac8:	ldr	r0, [pc, #140]	; 11b5c <__assert_fail@plt+0xf94>
   11acc:	add	sp, sp, #12
   11ad0:	vpop	{d8}
   11ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad8:	b	10ab4 <fwrite@plt>
   11adc:	mov	r3, r5
   11ae0:	mov	r2, #8
   11ae4:	mov	r1, #1
   11ae8:	ldr	r0, [pc, #96]	; 11b50 <__assert_fail@plt+0xf88>
   11aec:	bl	10ab4 <fwrite@plt>
   11af0:	b	11aa8 <__assert_fail@plt+0xee0>
   11af4:	mov	r3, r5
   11af8:	mov	r2, #8
   11afc:	mov	r1, #1
   11b00:	ldr	r0, [pc, #72]	; 11b50 <__assert_fail@plt+0xf88>
   11b04:	bl	10ab4 <fwrite@plt>
   11b08:	b	119f8 <__assert_fail@plt+0xe30>
   11b0c:	mov	r3, r5
   11b10:	mov	r2, #26
   11b14:	mov	r1, #1
   11b18:	ldr	r0, [pc, #20]	; 11b34 <__assert_fail@plt+0xf6c>
   11b1c:	bl	10ab4 <fwrite@plt>
   11b20:	b	11aa8 <__assert_fail@plt+0xee0>
   11b24:	nop			; (mov r0, r0)
   11b28:	andeq	r0, r0, r0
   11b2c:	subsmi	r0, r9, r0
   11b30:	andeq	r3, r1, ip, ror #22
   11b34:	andeq	r3, r1, r4, ror fp
   11b38:	muleq	r1, r0, fp
   11b3c:	ldrdeq	r3, [r1], -r4
   11b40:	andeq	r7, r1, r0, rrx
   11b44:	muleq	r1, r4, fp
   11b48:			; <UNDEFINED> instruction: 0x00013bb4
   11b4c:	andeq	r3, r1, ip, lsr #23
   11b50:	andeq	r3, r1, r0, lsr #23
   11b54:	andeq	r3, r1, r0, asr #23
   11b58:	andeq	r3, r1, ip, asr #23
   11b5c:	andeq	r3, r1, ip, asr fp
   11b60:	ldr	ip, [r0]
   11b64:	ldr	r3, [r0, #4]
   11b68:	add	r1, ip, r1
   11b6c:	add	r2, r3, r2
   11b70:	stm	r0, {r1, r2}
   11b74:	bx	lr
   11b78:	push	{r4, r5, r6, r7, r8, lr}
   11b7c:	mov	r6, r2
   11b80:	mov	r5, r3
   11b84:	mov	r7, r0
   11b88:	mov	r8, r1
   11b8c:	bl	11fc0 <__assert_fail@plt+0x13f8>
   11b90:	subs	r4, r0, #0
   11b94:	beq	11bb4 <__assert_fail@plt+0xfec>
   11b98:	ldr	r0, [r4, #12]
   11b9c:	ldr	r1, [r4, #16]
   11ba0:	add	r2, r0, r6
   11ba4:	add	r3, r1, r5
   11ba8:	str	r2, [r4, #12]
   11bac:	str	r3, [r4, #16]
   11bb0:	pop	{r4, r5, r6, r7, r8, pc}
   11bb4:	mov	r1, #20
   11bb8:	mov	r0, #1
   11bbc:	bl	12ec0 <error@@Base+0x3c>
   11bc0:	mov	r4, r0
   11bc4:	mov	r0, r8
   11bc8:	bl	10a78 <strdup@plt>
   11bcc:	mov	r1, r4
   11bd0:	str	r0, [r4, #8]
   11bd4:	mov	r0, r7
   11bd8:	bl	12044 <__assert_fail@plt+0x147c>
   11bdc:	b	11b98 <__assert_fail@plt+0xfd0>
   11be0:	push	{r4, r5, r6, r7, lr}
   11be4:	mov	r6, r1
   11be8:	sub	sp, sp, #12
   11bec:	ldr	r1, [pc, #428]	; 11da0 <__assert_fail@plt+0x11d8>
   11bf0:	mov	r5, r0
   11bf4:	mov	r0, r6
   11bf8:	bl	12f54 <error@@Base+0xd0>
   11bfc:	mov	r1, #99	; 0x63
   11c00:	mov	r2, r0
   11c04:	mov	r4, r0
   11c08:	ldr	r0, [pc, #404]	; 11da4 <__assert_fail@plt+0x11dc>
   11c0c:	bl	10a60 <fgets@plt>
   11c10:	cmp	r0, #0
   11c14:	beq	11c8c <__assert_fail@plt+0x10c4>
   11c18:	mov	r2, #45	; 0x2d
   11c1c:	ldr	r1, [pc, #388]	; 11da8 <__assert_fail@plt+0x11e0>
   11c20:	ldr	r0, [pc, #380]	; 11da4 <__assert_fail@plt+0x11dc>
   11c24:	bl	10ba4 <strncmp@plt>
   11c28:	cmp	r0, #0
   11c2c:	bne	11c8c <__assert_fail@plt+0x10c4>
   11c30:	mov	r2, r4
   11c34:	mov	r1, #99	; 0x63
   11c38:	ldr	r0, [pc, #356]	; 11da4 <__assert_fail@plt+0x11dc>
   11c3c:	bl	10a60 <fgets@plt>
   11c40:	cmp	r0, #0
   11c44:	beq	11c8c <__assert_fail@plt+0x10c4>
   11c48:	ldr	r1, [pc, #348]	; 11dac <__assert_fail@plt+0x11e4>
   11c4c:	ldr	r0, [pc, #336]	; 11da4 <__assert_fail@plt+0x11dc>
   11c50:	bl	10a18 <strcmp@plt>
   11c54:	cmp	r0, #0
   11c58:	bne	11c8c <__assert_fail@plt+0x10c4>
   11c5c:	mov	r2, r4
   11c60:	mov	r1, #99	; 0x63
   11c64:	ldr	r0, [pc, #312]	; 11da4 <__assert_fail@plt+0x11dc>
   11c68:	bl	10a60 <fgets@plt>
   11c6c:	cmp	r0, #0
   11c70:	beq	11c8c <__assert_fail@plt+0x10c4>
   11c74:	mov	r2, sp
   11c78:	ldr	r1, [pc, #304]	; 11db0 <__assert_fail@plt+0x11e8>
   11c7c:	ldr	r0, [pc, #288]	; 11da4 <__assert_fail@plt+0x11dc>
   11c80:	bl	10b50 <__isoc99_sscanf@plt>
   11c84:	cmp	r0, #1
   11c88:	beq	11ca0 <__assert_fail@plt+0x10d8>
   11c8c:	cmp	r6, #0
   11c90:	ldr	r1, [pc, #284]	; 11db4 <__assert_fail@plt+0x11ec>
   11c94:	ldr	r0, [pc, #284]	; 11db8 <__assert_fail@plt+0x11f0>
   11c98:	movne	r1, r6
   11c9c:	bl	12f0c <error@@Base+0x88>
   11ca0:	mov	r2, r4
   11ca4:	mov	r1, #99	; 0x63
   11ca8:	ldr	r0, [pc, #244]	; 11da4 <__assert_fail@plt+0x11dc>
   11cac:	bl	10a60 <fgets@plt>
   11cb0:	cmp	r0, #0
   11cb4:	beq	11c8c <__assert_fail@plt+0x10c4>
   11cb8:	add	r2, sp, #4
   11cbc:	ldr	r1, [pc, #236]	; 11db0 <__assert_fail@plt+0x11e8>
   11cc0:	ldr	r0, [pc, #220]	; 11da4 <__assert_fail@plt+0x11dc>
   11cc4:	bl	10b50 <__isoc99_sscanf@plt>
   11cc8:	cmp	r0, #1
   11ccc:	bne	11c8c <__assert_fail@plt+0x10c4>
   11cd0:	mov	r2, r4
   11cd4:	mov	r1, #99	; 0x63
   11cd8:	ldr	r0, [pc, #196]	; 11da4 <__assert_fail@plt+0x11dc>
   11cdc:	bl	10a60 <fgets@plt>
   11ce0:	cmp	r0, #0
   11ce4:	beq	11c8c <__assert_fail@plt+0x10c4>
   11ce8:	mov	r2, r4
   11cec:	mov	r1, #99	; 0x63
   11cf0:	ldr	r0, [pc, #172]	; 11da4 <__assert_fail@plt+0x11dc>
   11cf4:	bl	10a60 <fgets@plt>
   11cf8:	cmp	r0, #0
   11cfc:	beq	11c8c <__assert_fail@plt+0x10c4>
   11d00:	ldr	r0, [sp, #4]
   11d04:	ldr	r2, [r5, #4]
   11d08:	ldr	r3, [r5]
   11d0c:	ldr	r1, [sp]
   11d10:	add	r2, r2, r0
   11d14:	add	r3, r3, r1
   11d18:	str	r3, [r5]
   11d1c:	str	r2, [r5, #4]
   11d20:	add	r1, r5, #8
   11d24:	mov	r0, r4
   11d28:	bl	11470 <__assert_fail@plt+0x8a8>
   11d2c:	add	r1, r5, #416	; 0x1a0
   11d30:	mov	r7, r0
   11d34:	mov	r0, r4
   11d38:	bl	11470 <__assert_fail@plt+0x8a8>
   11d3c:	add	r1, r5, #824	; 0x338
   11d40:	mov	r6, r0
   11d44:	mov	r0, r4
   11d48:	bl	11470 <__assert_fail@plt+0x8a8>
   11d4c:	ldr	r3, [sp]
   11d50:	cmp	r3, #0
   11d54:	ble	11d90 <__assert_fail@plt+0x11c8>
   11d58:	add	r1, r5, #920	; 0x398
   11d5c:	mov	r0, r4
   11d60:	bl	11470 <__assert_fail@plt+0x8a8>
   11d64:	cmp	r7, #0
   11d68:	ble	11d78 <__assert_fail@plt+0x11b0>
   11d6c:	add	r1, r5, #992	; 0x3e0
   11d70:	mov	r0, r4
   11d74:	bl	1159c <__assert_fail@plt+0x9d4>
   11d78:	cmp	r6, #0
   11d7c:	ble	11d90 <__assert_fail@plt+0x11c8>
   11d80:	add	r1, r5, #9024	; 0x2340
   11d84:	add	r1, r1, #24
   11d88:	mov	r0, r4
   11d8c:	bl	1159c <__assert_fail@plt+0x9d4>
   11d90:	mov	r0, r4
   11d94:	bl	12d28 <__assert_fail@plt+0x2160>
   11d98:	add	sp, sp, #12
   11d9c:	pop	{r4, r5, r6, r7, pc}
   11da0:	andeq	r3, r1, r4, ror #23
   11da4:	andeq	r8, r2, r4, ror #1
   11da8:	andeq	r3, r1, r8, ror #23
   11dac:	andeq	r7, r1, r4, asr r1
   11db0:	andeq	r3, r1, r8, ror #22
   11db4:	ldrdeq	r3, [r1], -ip
   11db8:	andeq	r3, r1, r8, lsl ip
   11dbc:	mov	r3, r1
   11dc0:	push	{r4, r5, r6, r7, lr}
   11dc4:	mov	r4, r0
   11dc8:	sub	sp, sp, #12
   11dcc:	ldr	r1, [pc, #380]	; 11f50 <__assert_fail@plt+0x1388>
   11dd0:	mov	r0, r3
   11dd4:	bl	12f54 <error@@Base+0xd0>
   11dd8:	ldr	r3, [pc, #372]	; 11f54 <__assert_fail@plt+0x138c>
   11ddc:	ldr	r2, [pc, #372]	; 11f58 <__assert_fail@plt+0x1390>
   11de0:	ldr	r1, [pc, #372]	; 11f5c <__assert_fail@plt+0x1394>
   11de4:	mov	r5, r0
   11de8:	bl	10b44 <fprintf@plt>
   11dec:	ldr	r2, [r4]
   11df0:	ldr	r1, [pc, #360]	; 11f60 <__assert_fail@plt+0x1398>
   11df4:	mov	r0, r5
   11df8:	bl	10b44 <fprintf@plt>
   11dfc:	ldr	r2, [r4, #4]
   11e00:	mov	r0, r5
   11e04:	ldr	r1, [pc, #344]	; 11f64 <__assert_fail@plt+0x139c>
   11e08:	bl	10b44 <fprintf@plt>
   11e0c:	ldr	r2, [r4]
   11e10:	cmp	r2, #0
   11e14:	beq	11f30 <__assert_fail@plt+0x1368>
   11e18:	ldr	r3, [r4, #4]
   11e1c:	vmov	s15, r2
   11e20:	sub	r3, r2, r3
   11e24:	vldr	d5, [pc, #284]	; 11f48 <__assert_fail@plt+0x1380>
   11e28:	vmov	s14, r3
   11e2c:	vcvt.f64.s32	d6, s15
   11e30:	ldr	r1, [pc, #304]	; 11f68 <__assert_fail@plt+0x13a0>
   11e34:	mov	r0, r5
   11e38:	vcvt.f64.s32	d7, s14
   11e3c:	vmul.f64	d7, d7, d5
   11e40:	vdiv.f64	d5, d7, d6
   11e44:	vmov	r2, r3, d5
   11e48:	bl	10b44 <fprintf@plt>
   11e4c:	mov	r1, #1
   11e50:	mov	r6, r1
   11e54:	mov	r7, #0
   11e58:	mov	r3, r5
   11e5c:	mov	r2, #12
   11e60:	ldr	r0, [pc, #260]	; 11f6c <__assert_fail@plt+0x13a4>
   11e64:	bl	10ab4 <fwrite@plt>
   11e68:	ldr	r3, [pc, #256]	; 11f70 <__assert_fail@plt+0x13a8>
   11e6c:	mov	r2, #50	; 0x32
   11e70:	add	r1, r4, #8
   11e74:	mov	r0, r5
   11e78:	str	r6, [sp, #4]
   11e7c:	str	r7, [sp]
   11e80:	bl	11848 <__assert_fail@plt+0xc80>
   11e84:	ldr	r3, [pc, #232]	; 11f74 <__assert_fail@plt+0x13ac>
   11e88:	mov	r2, #50	; 0x32
   11e8c:	add	r1, r4, #416	; 0x1a0
   11e90:	mov	r0, r5
   11e94:	str	r6, [sp, #4]
   11e98:	str	r7, [sp]
   11e9c:	bl	11848 <__assert_fail@plt+0xc80>
   11ea0:	ldr	r3, [pc, #208]	; 11f78 <__assert_fail@plt+0x13b0>
   11ea4:	str	r6, [sp, #4]
   11ea8:	str	r6, [sp]
   11eac:	mov	r2, #10
   11eb0:	add	r1, r4, #824	; 0x338
   11eb4:	mov	r0, r5
   11eb8:	bl	11848 <__assert_fail@plt+0xc80>
   11ebc:	ldr	r3, [r4]
   11ec0:	cmp	r3, r7
   11ec4:	ble	11f20 <__assert_fail@plt+0x1358>
   11ec8:	ldr	r3, [pc, #172]	; 11f7c <__assert_fail@plt+0x13b4>
   11ecc:	str	r7, [sp, #4]
   11ed0:	str	r7, [sp]
   11ed4:	mov	r2, #8
   11ed8:	add	r1, r4, #920	; 0x398
   11edc:	mov	r0, r5
   11ee0:	bl	11848 <__assert_fail@plt+0xc80>
   11ee4:	ldr	r3, [r4, #8]
   11ee8:	cmp	r3, r7
   11eec:	ble	11f00 <__assert_fail@plt+0x1338>
   11ef0:	ldr	r2, [pc, #120]	; 11f70 <__assert_fail@plt+0x13a8>
   11ef4:	add	r1, r4, #992	; 0x3e0
   11ef8:	mov	r0, r5
   11efc:	bl	116b0 <__assert_fail@plt+0xae8>
   11f00:	ldr	r3, [r4, #416]	; 0x1a0
   11f04:	cmp	r3, #0
   11f08:	ble	11f20 <__assert_fail@plt+0x1358>
   11f0c:	add	r1, r4, #9024	; 0x2340
   11f10:	add	r1, r1, #24
   11f14:	ldr	r2, [pc, #88]	; 11f74 <__assert_fail@plt+0x13ac>
   11f18:	mov	r0, r5
   11f1c:	bl	116b0 <__assert_fail@plt+0xae8>
   11f20:	mov	r0, r5
   11f24:	add	sp, sp, #12
   11f28:	pop	{r4, r5, r6, r7, lr}
   11f2c:	b	12d28 <__assert_fail@plt+0x2160>
   11f30:	mov	r3, r5
   11f34:	mov	r2, #8
   11f38:	mov	r1, #1
   11f3c:	ldr	r0, [pc, #60]	; 11f80 <__assert_fail@plt+0x13b8>
   11f40:	bl	10ab4 <fwrite@plt>
   11f44:	b	11e4c <__assert_fail@plt+0x1284>
   11f48:	andeq	r0, r0, r0
   11f4c:	subsmi	r0, r9, r0
   11f50:	andeq	r3, r1, ip, lsr #24
   11f54:	andeq	r7, r1, r4, asr r1
   11f58:	andeq	r3, r1, r8, ror #23
   11f5c:	andeq	r3, r1, r0, lsr ip
   11f60:	andeq	r3, r1, r8, lsr ip
   11f64:	andeq	r3, r1, r8, asr #24
   11f68:	andeq	r3, r1, ip, lsr #23
   11f6c:	andeq	r3, r1, r0, ror #24
   11f70:	andeq	r3, r1, r0, ror ip
   11f74:	andeq	r3, r1, ip, ror ip
   11f78:	andeq	r3, r1, ip, lsl #25
   11f7c:	andeq	r3, r1, r4, lsr #25
   11f80:	andeq	r3, r1, r0, lsr #23
   11f84:	push	{r4, r5, r6, lr}
   11f88:	add	r5, r0, #8000	; 0x1f40
   11f8c:	mov	r6, r0
   11f90:	add	r5, r5, #48	; 0x30
   11f94:	mov	r4, r0
   11f98:	mov	r0, r4
   11f9c:	add	r4, r4, #16
   11fa0:	bl	11054 <__assert_fail@plt+0x48c>
   11fa4:	cmp	r5, r4
   11fa8:	bne	11f98 <__assert_fail@plt+0x13d0>
   11fac:	add	r6, r6, #4096	; 0x1000
   11fb0:	mov	r3, #0
   11fb4:	str	r3, [r6, #3952]	; 0xf70
   11fb8:	str	r3, [r6, #3956]	; 0xf74
   11fbc:	pop	{r4, r5, r6, pc}
   11fc0:	push	{r4, r5, r6, lr}
   11fc4:	mov	r5, r1
   11fc8:	ldrb	r3, [r1]
   11fcc:	cmp	r3, #0
   11fd0:	beq	12008 <__assert_fail@plt+0x1440>
   11fd4:	mov	r2, #0
   11fd8:	add	r2, r2, r3
   11fdc:	ldrb	r3, [r1, #1]!
   11fe0:	cmp	r3, #0
   11fe4:	bne	11fd8 <__assert_fail@plt+0x1410>
   11fe8:	ldr	r1, [pc, #80]	; 12040 <__assert_fail@plt+0x1478>
   11fec:	asr	r3, r2, #31
   11ff0:	smull	ip, r1, r1, r2
   11ff4:	add	r1, r1, r2
   11ff8:	rsb	r3, r3, r1, asr #8
   11ffc:	rsb	r1, r3, r3, lsl #6
   12000:	rsb	r3, r3, r1, lsl #3
   12004:	sub	r3, r2, r3
   12008:	ldr	r4, [r0, r3, lsl #4]
   1200c:	cmp	r4, #0
   12010:	bne	12024 <__assert_fail@plt+0x145c>
   12014:	b	12038 <__assert_fail@plt+0x1470>
   12018:	ldr	r4, [r4, #4]
   1201c:	cmp	r4, #0
   12020:	beq	12038 <__assert_fail@plt+0x1470>
   12024:	ldr	r1, [r4, #8]
   12028:	mov	r0, r5
   1202c:	bl	10a18 <strcmp@plt>
   12030:	cmp	r0, #0
   12034:	bne	12018 <__assert_fail@plt+0x1450>
   12038:	mov	r0, r4
   1203c:	pop	{r4, r5, r6, pc}
   12040:	subhi	r4, sl, #1552	; 0x610
   12044:	ldr	ip, [r1, #8]
   12048:	push	{r4, lr}
   1204c:	ldrb	r3, [ip]
   12050:	cmp	r3, #0
   12054:	beq	12090 <__assert_fail@plt+0x14c8>
   12058:	mov	r2, #0
   1205c:	add	r2, r2, r3
   12060:	ldrb	r3, [ip, #1]!
   12064:	cmp	r3, #0
   12068:	bne	1205c <__assert_fail@plt+0x1494>
   1206c:	ldr	ip, [pc, #80]	; 120c4 <__assert_fail@plt+0x14fc>
   12070:	asr	r3, r2, #31
   12074:	smull	lr, ip, ip, r2
   12078:	add	ip, ip, r2
   1207c:	rsb	r3, r3, ip, asr #8
   12080:	rsb	ip, r3, r3, lsl #6
   12084:	rsb	r3, r3, ip, lsl #3
   12088:	sub	r3, r2, r3
   1208c:	lsl	r3, r3, #4
   12090:	add	r4, r0, #4096	; 0x1000
   12094:	add	r0, r0, r3
   12098:	bl	1106c <__assert_fail@plt+0x4a4>
   1209c:	ldr	r0, [r4, #3952]	; 0xf70
   120a0:	cmp	r0, #0
   120a4:	beq	120b4 <__assert_fail@plt+0x14ec>
   120a8:	bl	10a48 <free@plt>
   120ac:	mov	r3, #0
   120b0:	str	r3, [r4, #3952]	; 0xf70
   120b4:	ldr	r3, [r4, #3956]	; 0xf74
   120b8:	add	r3, r3, #1
   120bc:	str	r3, [r4, #3956]	; 0xf74
   120c0:	pop	{r4, pc}
   120c4:	subhi	r4, sl, #1552	; 0x610
   120c8:	ldr	ip, [r1, #8]
   120cc:	push	{r4, lr}
   120d0:	ldrb	r3, [ip]
   120d4:	cmp	r3, #0
   120d8:	beq	12114 <__assert_fail@plt+0x154c>
   120dc:	mov	r2, #0
   120e0:	add	r2, r2, r3
   120e4:	ldrb	r3, [ip, #1]!
   120e8:	cmp	r3, #0
   120ec:	bne	120e0 <__assert_fail@plt+0x1518>
   120f0:	ldr	ip, [pc, #80]	; 12148 <__assert_fail@plt+0x1580>
   120f4:	asr	r3, r2, #31
   120f8:	smull	lr, ip, ip, r2
   120fc:	add	ip, ip, r2
   12100:	rsb	r3, r3, ip, asr #8
   12104:	rsb	ip, r3, r3, lsl #6
   12108:	rsb	r3, r3, ip, lsl #3
   1210c:	sub	r3, r2, r3
   12110:	lsl	r3, r3, #4
   12114:	add	r4, r0, #4096	; 0x1000
   12118:	add	r0, r0, r3
   1211c:	bl	1119c <__assert_fail@plt+0x5d4>
   12120:	ldr	r0, [r4, #3952]	; 0xf70
   12124:	cmp	r0, #0
   12128:	beq	12138 <__assert_fail@plt+0x1570>
   1212c:	bl	10a48 <free@plt>
   12130:	mov	r3, #0
   12134:	str	r3, [r4, #3952]	; 0xf70
   12138:	ldr	r3, [r4, #3956]	; 0xf74
   1213c:	sub	r3, r3, #1
   12140:	str	r3, [r4, #3956]	; 0xf74
   12144:	pop	{r4, pc}
   12148:	subhi	r4, sl, #1552	; 0x610
   1214c:	push	{r4, r5, r6, lr}
   12150:	add	r6, r0, #4096	; 0x1000
   12154:	ldr	r4, [r6, #3952]	; 0xf70
   12158:	cmp	r4, #0
   1215c:	popne	{r4, r5, r6, pc}
   12160:	ldr	r3, [r6, #3956]	; 0xf74
   12164:	cmp	r3, #0
   12168:	popeq	{r4, r5, r6, pc}
   1216c:	mov	r5, r0
   12170:	mov	r1, #4
   12174:	mov	r0, r3
   12178:	bl	12ec0 <error@@Base+0x3c>
   1217c:	ldr	lr, [pc, #60]	; 121c0 <__assert_fail@plt+0x15f8>
   12180:	mov	r2, r4
   12184:	mov	ip, r4
   12188:	str	r0, [r6, #3952]	; 0xf70
   1218c:	ldr	r3, [r5, ip, lsl #4]
   12190:	cmp	r3, #0
   12194:	beq	121b0 <__assert_fail@plt+0x15e8>
   12198:	add	r1, r0, r2, lsl #2
   1219c:	str	r3, [r1], #4
   121a0:	ldr	r3, [r3, #4]
   121a4:	add	r2, r2, #1
   121a8:	cmp	r3, #0
   121ac:	bne	1219c <__assert_fail@plt+0x15d4>
   121b0:	add	ip, ip, #1
   121b4:	cmp	ip, lr
   121b8:	bne	1218c <__assert_fail@plt+0x15c4>
   121bc:	pop	{r4, r5, r6, pc}
   121c0:	strdeq	r0, [r0], -r7
   121c4:	push	{r4, r5, r6, r7, r8, lr}
   121c8:	add	r5, r0, #8000	; 0x1f40
   121cc:	mov	r7, r0
   121d0:	mov	r6, r1
   121d4:	add	r5, r5, #48	; 0x30
   121d8:	mov	r4, r0
   121dc:	mov	r0, r4
   121e0:	mov	r1, r6
   121e4:	add	r4, r4, #16
   121e8:	bl	1124c <__assert_fail@plt+0x684>
   121ec:	cmp	r5, r4
   121f0:	bne	121dc <__assert_fail@plt+0x1614>
   121f4:	add	r7, r7, #4096	; 0x1000
   121f8:	ldr	r0, [r7, #3952]	; 0xf70
   121fc:	cmp	r0, #0
   12200:	beq	12210 <__assert_fail@plt+0x1648>
   12204:	bl	10a48 <free@plt>
   12208:	mov	r3, #0
   1220c:	str	r3, [r7, #3952]	; 0xf70
   12210:	mov	r3, #0
   12214:	str	r3, [r7, #3956]	; 0xf74
   12218:	pop	{r4, r5, r6, r7, r8, pc}
   1221c:	ldr	r3, [r1]
   12220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12224:	sub	sp, sp, #44	; 0x2c
   12228:	cmp	r3, #0
   1222c:	str	r3, [sp, #12]
   12230:	str	r3, [sp, #28]
   12234:	beq	12610 <__assert_fail@plt+0x1a48>
   12238:	ldr	r9, [pc, #2420]	; 12bb4 <__assert_fail@plt+0x1fec>
   1223c:	ldr	fp, [pc, #2420]	; 12bb8 <__assert_fail@plt+0x1ff0>
   12240:	ldr	r4, [pc, #2420]	; 12bbc <__assert_fail@plt+0x1ff4>
   12244:	mov	sl, #0
   12248:	str	r0, [sp, #20]
   1224c:	mov	r7, #17
   12250:	mov	r8, r3
   12254:	ldr	r1, [r8, #12]
   12258:	mov	r3, r9
   1225c:	mov	r0, sl
   12260:	mov	ip, fp
   12264:	ldr	r2, [pc, #2380]	; 12bb8 <__assert_fail@plt+0x1ff0>
   12268:	b	12280 <__assert_fail@plt+0x16b8>
   1226c:	sub	r2, ip, r0
   12270:	add	r3, r0, r2, lsr #1
   12274:	add	r3, r3, r3, lsl #1
   12278:	add	r3, r4, r3, lsl #2
   1227c:	ldr	r3, [r3, #40]	; 0x28
   12280:	cmp	r1, r3
   12284:	add	r3, r0, r2, lsr #1
   12288:	subcc	ip, r3, #1
   1228c:	bcc	122a8 <__assert_fail@plt+0x16e0>
   12290:	add	r2, r3, r3, lsl #1
   12294:	add	r2, r4, r2, lsl #2
   12298:	ldr	r0, [r2, #44]	; 0x2c
   1229c:	cmp	r1, r0
   122a0:	bls	12638 <__assert_fail@plt+0x1a70>
   122a4:	add	r0, r3, #1
   122a8:	cmp	ip, r0
   122ac:	bcs	1226c <__assert_fail@plt+0x16a4>
   122b0:	mov	r3, r9
   122b4:	mov	r0, sl
   122b8:	mov	ip, fp
   122bc:	mov	r2, fp
   122c0:	b	122d8 <__assert_fail@plt+0x1710>
   122c4:	sub	r2, ip, r0
   122c8:	add	r3, r0, r2, lsr #1
   122cc:	add	r3, r3, r3, lsl #1
   122d0:	add	r3, r4, r3, lsl #2
   122d4:	ldr	r3, [r3, #40]	; 0x28
   122d8:	cmp	r1, r3
   122dc:	add	r3, r0, r2, lsr #1
   122e0:	subcc	ip, r3, #1
   122e4:	bcc	12300 <__assert_fail@plt+0x1738>
   122e8:	add	r2, r3, r3, lsl #1
   122ec:	add	r2, r4, r2, lsl #2
   122f0:	ldr	r0, [r2, #44]	; 0x2c
   122f4:	cmp	r1, r0
   122f8:	bls	12704 <__assert_fail@plt+0x1b3c>
   122fc:	add	r0, r3, #1
   12300:	cmp	ip, r0
   12304:	bcs	122c4 <__assert_fail@plt+0x16fc>
   12308:	mov	r3, r9
   1230c:	mov	r0, sl
   12310:	mov	ip, fp
   12314:	mov	r2, fp
   12318:	b	12330 <__assert_fail@plt+0x1768>
   1231c:	sub	r2, ip, r0
   12320:	add	r3, r0, r2, lsr #1
   12324:	add	r3, r3, r3, lsl #1
   12328:	add	r3, r4, r3, lsl #2
   1232c:	ldr	r3, [r3, #40]	; 0x28
   12330:	cmp	r3, r1
   12334:	add	r2, r0, r2, lsr #1
   12338:	subhi	ip, r2, #1
   1233c:	bhi	12358 <__assert_fail@plt+0x1790>
   12340:	add	r3, r2, r2, lsl #1
   12344:	add	r3, r4, r3, lsl #2
   12348:	ldr	r0, [r3, #44]	; 0x2c
   1234c:	cmp	r0, r1
   12350:	bcs	12740 <__assert_fail@plt+0x1b78>
   12354:	add	r0, r2, #1
   12358:	cmp	ip, r0
   1235c:	bcs	1231c <__assert_fail@plt+0x1754>
   12360:	mov	r6, #0
   12364:	str	sl, [sp, #8]
   12368:	mov	lr, r8
   1236c:	ldr	lr, [lr, #4]
   12370:	cmp	lr, #0
   12374:	beq	12658 <__assert_fail@plt+0x1a90>
   12378:	ldr	r0, [lr, #12]
   1237c:	mov	r3, r9
   12380:	mov	r1, sl
   12384:	mov	ip, fp
   12388:	ldr	r2, [pc, #2088]	; 12bb8 <__assert_fail@plt+0x1ff0>
   1238c:	b	123a4 <__assert_fail@plt+0x17dc>
   12390:	sub	r2, ip, r1
   12394:	add	r3, r1, r2, lsr #1
   12398:	add	r3, r3, r3, lsl #1
   1239c:	add	r3, r4, r3, lsl #2
   123a0:	ldr	r3, [r3, #40]	; 0x28
   123a4:	cmp	r0, r3
   123a8:	add	r2, r1, r2, lsr #1
   123ac:	subcc	ip, r2, #1
   123b0:	bcc	123cc <__assert_fail@plt+0x1804>
   123b4:	add	r3, r2, r2, lsl #1
   123b8:	add	r3, r4, r3, lsl #2
   123bc:	ldr	r1, [r3, #44]	; 0x2c
   123c0:	cmp	r0, r1
   123c4:	bls	126d4 <__assert_fail@plt+0x1b0c>
   123c8:	add	r1, r2, #1
   123cc:	cmp	r1, ip
   123d0:	bls	12390 <__assert_fail@plt+0x17c8>
   123d4:	mov	r3, r9
   123d8:	mov	r1, sl
   123dc:	mov	ip, fp
   123e0:	mov	r2, fp
   123e4:	b	123fc <__assert_fail@plt+0x1834>
   123e8:	sub	r2, ip, r1
   123ec:	add	r3, r1, r2, lsr #1
   123f0:	add	r3, r3, r3, lsl #1
   123f4:	add	r3, r4, r3, lsl #2
   123f8:	ldr	r3, [r3, #40]	; 0x28
   123fc:	cmp	r0, r3
   12400:	add	r2, r1, r2, lsr #1
   12404:	subcc	ip, r2, #1
   12408:	bcc	12424 <__assert_fail@plt+0x185c>
   1240c:	add	r3, r2, r2, lsl #1
   12410:	add	r3, r4, r3, lsl #2
   12414:	ldr	r1, [r3, #44]	; 0x2c
   12418:	cmp	r0, r1
   1241c:	bls	126f4 <__assert_fail@plt+0x1b2c>
   12420:	add	r1, r2, #1
   12424:	cmp	r1, ip
   12428:	bls	123e8 <__assert_fail@plt+0x1820>
   1242c:	mov	r3, r9
   12430:	mov	r1, sl
   12434:	mov	ip, fp
   12438:	mov	r2, fp
   1243c:	b	12454 <__assert_fail@plt+0x188c>
   12440:	sub	r2, ip, r1
   12444:	add	r3, r1, r2, lsr #1
   12448:	add	r3, r3, r3, lsl #1
   1244c:	add	r3, r4, r3, lsl #2
   12450:	ldr	r3, [r3, #40]	; 0x28
   12454:	cmp	r0, r3
   12458:	add	r2, r1, r2, lsr #1
   1245c:	subcc	ip, r2, #1
   12460:	bcc	1247c <__assert_fail@plt+0x18b4>
   12464:	add	r3, r2, r2, lsl #1
   12468:	add	r3, r4, r3, lsl #2
   1246c:	ldr	r1, [r3, #44]	; 0x2c
   12470:	cmp	r1, r0
   12474:	bcs	1271c <__assert_fail@plt+0x1b54>
   12478:	add	r1, r2, #1
   1247c:	cmp	ip, r1
   12480:	bcs	12440 <__assert_fail@plt+0x1878>
   12484:	mov	r3, #0
   12488:	mov	r5, r3
   1248c:	str	r3, [sp, #4]
   12490:	str	sl, [sp, #16]
   12494:	ldr	lr, [lr, #4]
   12498:	cmp	lr, #0
   1249c:	beq	12630 <__assert_fail@plt+0x1a68>
   124a0:	ldr	r0, [lr, #12]
   124a4:	mov	r3, r9
   124a8:	mov	r1, sl
   124ac:	mov	ip, fp
   124b0:	ldr	r2, [pc, #1792]	; 12bb8 <__assert_fail@plt+0x1ff0>
   124b4:	b	124cc <__assert_fail@plt+0x1904>
   124b8:	sub	r2, ip, r1
   124bc:	add	r3, r1, r2, lsr #1
   124c0:	add	r3, r3, r3, lsl #1
   124c4:	add	r3, r4, r3, lsl #2
   124c8:	ldr	r3, [r3, #40]	; 0x28
   124cc:	cmp	r0, r3
   124d0:	add	r2, r1, r2, lsr #1
   124d4:	subcc	ip, r2, #1
   124d8:	bcc	124f4 <__assert_fail@plt+0x192c>
   124dc:	add	r3, r2, r2, lsl #1
   124e0:	add	r3, r4, r3, lsl #2
   124e4:	ldr	r1, [r3, #44]	; 0x2c
   124e8:	cmp	r0, r1
   124ec:	bls	12618 <__assert_fail@plt+0x1a50>
   124f0:	add	r1, r2, #1
   124f4:	cmp	ip, r1
   124f8:	bcs	124b8 <__assert_fail@plt+0x18f0>
   124fc:	mov	r3, r9
   12500:	mov	r1, sl
   12504:	mov	ip, fp
   12508:	mov	r2, fp
   1250c:	b	12524 <__assert_fail@plt+0x195c>
   12510:	sub	r2, ip, r1
   12514:	add	r3, r1, r2, lsr #1
   12518:	add	r3, r3, r3, lsl #1
   1251c:	add	r3, r4, r3, lsl #2
   12520:	ldr	r3, [r3, #40]	; 0x28
   12524:	cmp	r0, r3
   12528:	add	r2, r1, r2, lsr #1
   1252c:	subcc	ip, r2, #1
   12530:	bcc	1254c <__assert_fail@plt+0x1984>
   12534:	add	r3, r2, r2, lsl #1
   12538:	add	r3, r4, r3, lsl #2
   1253c:	ldr	r1, [r3, #44]	; 0x2c
   12540:	cmp	r0, r1
   12544:	bls	126e4 <__assert_fail@plt+0x1b1c>
   12548:	add	r1, r2, #1
   1254c:	cmp	ip, r1
   12550:	bcs	12510 <__assert_fail@plt+0x1948>
   12554:	mov	r3, r9
   12558:	mov	r1, sl
   1255c:	mov	ip, fp
   12560:	mov	r2, fp
   12564:	b	1257c <__assert_fail@plt+0x19b4>
   12568:	sub	r2, ip, r1
   1256c:	add	r3, r1, r2, lsr #1
   12570:	add	r3, r3, r3, lsl #1
   12574:	add	r3, r4, r3, lsl #2
   12578:	ldr	r3, [r3, #40]	; 0x28
   1257c:	cmp	r0, r3
   12580:	add	r2, r1, r2, lsr #1
   12584:	subcc	ip, r2, #1
   12588:	bcc	125a4 <__assert_fail@plt+0x19dc>
   1258c:	add	r3, r2, r2, lsl #1
   12590:	add	r3, r4, r3, lsl #2
   12594:	ldr	r1, [r3, #44]	; 0x2c
   12598:	cmp	r1, r0
   1259c:	bcs	12714 <__assert_fail@plt+0x1b4c>
   125a0:	add	r1, r2, #1
   125a4:	cmp	r1, ip
   125a8:	bls	12568 <__assert_fail@plt+0x19a0>
   125ac:	mov	r3, sl
   125b0:	ldr	r2, [sp, #16]
   125b4:	cmp	r2, #0
   125b8:	beq	12664 <__assert_fail@plt+0x1a9c>
   125bc:	mov	r7, #1
   125c0:	ldr	r3, [r8, #4]
   125c4:	cmp	r3, #0
   125c8:	bne	12250 <__assert_fail@plt+0x1688>
   125cc:	ldr	r3, [sp, #12]
   125d0:	ldr	r0, [r3, #12]
   125d4:	bl	10a54 <utf8proc_get_property@plt>
   125d8:	ldrh	r3, [r0]
   125dc:	sub	r3, r3, #1
   125e0:	uxth	r3, r3
   125e4:	cmp	r3, #28
   125e8:	bhi	125fc <__assert_fail@plt+0x1a34>
   125ec:	mov	r0, #1
   125f0:	ldr	r2, [pc, #1480]	; 12bc0 <__assert_fail@plt+0x1ff8>
   125f4:	ands	r3, r2, r0, lsl r3
   125f8:	bne	12a6c <__assert_fail@plt+0x1ea4>
   125fc:	ldr	r3, [r8, #4]
   12600:	cmp	r3, #0
   12604:	str	r3, [sp, #12]
   12608:	str	r3, [sp, #28]
   1260c:	bne	1224c <__assert_fail@plt+0x1684>
   12610:	add	sp, sp, #44	; 0x2c
   12614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12618:	ldr	r3, [r3, #48]	; 0x30
   1261c:	cmp	r3, #4
   12620:	bne	124fc <__assert_fail@plt+0x1934>
   12624:	ldr	lr, [lr, #4]
   12628:	cmp	lr, #0
   1262c:	bne	124a0 <__assert_fail@plt+0x18d8>
   12630:	mov	r3, #18
   12634:	b	125b0 <__assert_fail@plt+0x19e8>
   12638:	ldr	r3, [r2, #48]	; 0x30
   1263c:	cmp	r3, #4
   12640:	bne	122b0 <__assert_fail@plt+0x16e8>
   12644:	ldr	r8, [r8, #4]
   12648:	cmp	r8, #0
   1264c:	bne	12254 <__assert_fail@plt+0x168c>
   12650:	mov	r6, #18
   12654:	str	sl, [sp, #8]
   12658:	mov	r5, #18
   1265c:	mov	r3, r5
   12660:	str	sl, [sp, #4]
   12664:	ldr	r1, [sp, #8]
   12668:	sub	r2, r6, #2
   1266c:	cmp	r2, #1
   12670:	orrls	r1, r1, #1
   12674:	cmp	r1, #0
   12678:	bne	12858 <__assert_fail@plt+0x1c90>
   1267c:	ldr	r2, [sp, #4]
   12680:	bic	ip, r5, #2
   12684:	cmp	ip, #1
   12688:	orreq	r2, r2, #1
   1268c:	cmp	r2, #0
   12690:	bne	12858 <__assert_fail@plt+0x1c90>
   12694:	sub	r0, r6, #8
   12698:	cmp	r0, #1
   1269c:	bls	127f8 <__assert_fail@plt+0x1c30>
   126a0:	sub	r2, r7, #8
   126a4:	cmp	r2, #1
   126a8:	bls	12828 <__assert_fail@plt+0x1c60>
   126ac:	sub	r2, r6, #8
   126b0:	sub	r1, r5, #10
   126b4:	clz	r2, r2
   126b8:	clz	r1, r1
   126bc:	lsr	r2, r2, #5
   126c0:	lsr	r1, r1, #5
   126c4:	tst	r2, r1
   126c8:	beq	12758 <__assert_fail@plt+0x1b90>
   126cc:	mov	r7, #8
   126d0:	b	125c0 <__assert_fail@plt+0x19f8>
   126d4:	ldr	r3, [r3, #48]	; 0x30
   126d8:	cmp	r3, #4
   126dc:	beq	1236c <__assert_fail@plt+0x17a4>
   126e0:	b	123d4 <__assert_fail@plt+0x180c>
   126e4:	ldr	r3, [r3, #48]	; 0x30
   126e8:	cmp	r3, #6
   126ec:	beq	12494 <__assert_fail@plt+0x18cc>
   126f0:	b	12554 <__assert_fail@plt+0x198c>
   126f4:	ldr	r3, [r3, #48]	; 0x30
   126f8:	cmp	r3, #6
   126fc:	beq	1236c <__assert_fail@plt+0x17a4>
   12700:	b	1242c <__assert_fail@plt+0x1864>
   12704:	ldr	r3, [r2, #48]	; 0x30
   12708:	cmp	r3, #6
   1270c:	beq	12644 <__assert_fail@plt+0x1a7c>
   12710:	b	12308 <__assert_fail@plt+0x1740>
   12714:	ldr	r3, [r3, #48]	; 0x30
   12718:	b	125b0 <__assert_fail@plt+0x19e8>
   1271c:	ldr	r5, [r3, #48]	; 0x30
   12720:	ldr	r2, [sp, #8]
   12724:	sub	r3, r5, #2
   12728:	clz	r3, r3
   1272c:	lsr	r3, r3, #5
   12730:	str	r3, [sp, #4]
   12734:	and	r3, r2, r3
   12738:	str	r3, [sp, #16]
   1273c:	b	12494 <__assert_fail@plt+0x18cc>
   12740:	ldr	r6, [r3, #48]	; 0x30
   12744:	sub	r3, r6, #1
   12748:	clz	r3, r3
   1274c:	lsr	r3, r3, #5
   12750:	str	r3, [sp, #8]
   12754:	b	12368 <__assert_fail@plt+0x17a0>
   12758:	cmp	r5, #11
   1275c:	cmpeq	r3, #8
   12760:	moveq	lr, #1
   12764:	movne	lr, #0
   12768:	tst	r2, lr
   1276c:	bne	126cc <__assert_fail@plt+0x1b04>
   12770:	cmp	r6, #11
   12774:	cmpeq	r5, #8
   12778:	moveq	r2, #1
   1277c:	movne	r2, #0
   12780:	cmp	r7, #8
   12784:	movne	r2, #0
   12788:	andeq	r2, r2, #1
   1278c:	cmp	r2, #0
   12790:	bne	12948 <__assert_fail@plt+0x1d80>
   12794:	sub	lr, r6, #15
   12798:	sub	r2, r5, #15
   1279c:	clz	lr, lr
   127a0:	clz	r2, r2
   127a4:	lsr	lr, lr, #5
   127a8:	lsr	r2, r2, #5
   127ac:	str	r2, [sp, #4]
   127b0:	ands	r2, lr, r2
   127b4:	bne	12850 <__assert_fail@plt+0x1c88>
   127b8:	cmp	r0, #1
   127bc:	bls	12b38 <__assert_fail@plt+0x1f70>
   127c0:	cmp	r6, #15
   127c4:	beq	1296c <__assert_fail@plt+0x1da4>
   127c8:	cmp	r7, #15
   127cc:	beq	129e8 <__assert_fail@plt+0x1e20>
   127d0:	sub	r2, r6, #7
   127d4:	sub	r3, r5, #7
   127d8:	clz	r2, r2
   127dc:	clz	r3, r3
   127e0:	lsr	r2, r2, #5
   127e4:	lsr	r3, r3, #5
   127e8:	tst	r3, r2
   127ec:	beq	12a38 <__assert_fail@plt+0x1e70>
   127f0:	mov	r7, #7
   127f4:	b	125c0 <__assert_fail@plt+0x19f8>
   127f8:	sub	r2, r5, #8
   127fc:	cmp	r2, #1
   12800:	bls	12820 <__assert_fail@plt+0x1c58>
   12804:	sub	r2, r5, #12
   12808:	cmp	r5, #10
   1280c:	cmpne	r2, #1
   12810:	bhi	126a0 <__assert_fail@plt+0x1ad8>
   12814:	sub	r2, r3, #8
   12818:	cmp	r2, #1
   1281c:	bhi	126a0 <__assert_fail@plt+0x1ad8>
   12820:	mov	r7, r6
   12824:	b	125c0 <__assert_fail@plt+0x19f8>
   12828:	cmp	r6, #13
   1282c:	beq	12950 <__assert_fail@plt+0x1d88>
   12830:	sub	r2, r6, #10
   12834:	bics	r2, r2, #2
   12838:	bne	126ac <__assert_fail@plt+0x1ae4>
   1283c:	sub	r2, r5, #8
   12840:	cmp	r2, #1
   12844:	bhi	126ac <__assert_fail@plt+0x1ae4>
   12848:	mov	r7, r6
   1284c:	b	125c0 <__assert_fail@plt+0x19f8>
   12850:	mov	r7, #15
   12854:	b	125c0 <__assert_fail@plt+0x19f8>
   12858:	cmp	r8, #0
   1285c:	beq	12610 <__assert_fail@plt+0x1a48>
   12860:	ldr	r0, [r8, #4]
   12864:	cmp	r0, #0
   12868:	beq	125cc <__assert_fail@plt+0x1a04>
   1286c:	ldr	r1, [r0, #12]
   12870:	mov	r3, r9
   12874:	mov	ip, sl
   12878:	mov	lr, fp
   1287c:	ldr	r2, [pc, #820]	; 12bb8 <__assert_fail@plt+0x1ff0>
   12880:	b	12898 <__assert_fail@plt+0x1cd0>
   12884:	sub	r2, lr, ip
   12888:	add	r3, ip, r2, lsr #1
   1288c:	add	r3, r3, r3, lsl #1
   12890:	add	r3, r4, r3, lsl #2
   12894:	ldr	r3, [r3, #40]	; 0x28
   12898:	cmp	r1, r3
   1289c:	add	r3, ip, r2, lsr #1
   128a0:	subcc	lr, r3, #1
   128a4:	bcc	128c0 <__assert_fail@plt+0x1cf8>
   128a8:	add	r2, r3, r3, lsl #1
   128ac:	add	r2, r4, r2, lsl #2
   128b0:	ldr	ip, [r2, #44]	; 0x2c
   128b4:	cmp	r1, ip
   128b8:	bls	12924 <__assert_fail@plt+0x1d5c>
   128bc:	add	ip, r3, #1
   128c0:	cmp	lr, ip
   128c4:	bcs	12884 <__assert_fail@plt+0x1cbc>
   128c8:	mov	r3, r9
   128cc:	mov	ip, sl
   128d0:	mov	lr, fp
   128d4:	mov	r2, fp
   128d8:	b	128f0 <__assert_fail@plt+0x1d28>
   128dc:	sub	r2, lr, ip
   128e0:	add	r3, ip, r2, lsr #1
   128e4:	add	r3, r3, r3, lsl #1
   128e8:	add	r3, r4, r3, lsl #2
   128ec:	ldr	r3, [r3, #40]	; 0x28
   128f0:	cmp	r1, r3
   128f4:	add	r3, ip, r2, lsr #1
   128f8:	subcc	lr, r3, #1
   128fc:	bcc	12918 <__assert_fail@plt+0x1d50>
   12900:	add	r2, r3, r3, lsl #1
   12904:	add	r2, r4, r2, lsl #2
   12908:	ldr	ip, [r2, #44]	; 0x2c
   1290c:	cmp	r1, ip
   12910:	bls	12938 <__assert_fail@plt+0x1d70>
   12914:	add	ip, r3, #1
   12918:	cmp	ip, lr
   1291c:	bls	128dc <__assert_fail@plt+0x1d14>
   12920:	b	125cc <__assert_fail@plt+0x1a04>
   12924:	ldr	r3, [r2, #48]	; 0x30
   12928:	cmp	r3, #4
   1292c:	bne	128c8 <__assert_fail@plt+0x1d00>
   12930:	mov	r8, r0
   12934:	b	12860 <__assert_fail@plt+0x1c98>
   12938:	ldr	r3, [r2, #48]	; 0x30
   1293c:	cmp	r3, #6
   12940:	beq	12930 <__assert_fail@plt+0x1d68>
   12944:	b	125cc <__assert_fail@plt+0x1a04>
   12948:	mov	r7, #11
   1294c:	b	125c0 <__assert_fail@plt+0x19f8>
   12950:	sub	r2, r5, #8
   12954:	cmp	r2, #1
   12958:	bls	12820 <__assert_fail@plt+0x1c58>
   1295c:	sub	r1, r5, #10
   12960:	clz	r1, r1
   12964:	lsr	r1, r1, #5
   12968:	b	12770 <__assert_fail@plt+0x1ba8>
   1296c:	sub	r2, r5, #8
   12970:	cmp	r2, #1
   12974:	bls	12850 <__assert_fail@plt+0x1c88>
   12978:	cmp	r7, #15
   1297c:	beq	129f0 <__assert_fail@plt+0x1e28>
   12980:	cmp	ip, #12
   12984:	orreq	r1, r1, #1
   12988:	cmp	r1, #0
   1298c:	beq	12998 <__assert_fail@plt+0x1dd0>
   12990:	cmp	r3, #15
   12994:	beq	12850 <__assert_fail@plt+0x1c88>
   12998:	cmp	r6, #7
   1299c:	cmpeq	r5, #7
   129a0:	sub	r3, r5, #7
   129a4:	clz	r3, r3
   129a8:	lsr	r3, r3, #5
   129ac:	beq	127f0 <__assert_fail@plt+0x1c28>
   129b0:	cmp	r5, #16
   129b4:	beq	12820 <__assert_fail@plt+0x1c58>
   129b8:	cmp	r6, #16
   129bc:	bne	12a48 <__assert_fail@plt+0x1e80>
   129c0:	ldr	r1, [sp, #4]
   129c4:	sub	r2, r5, #8
   129c8:	cmp	r2, #1
   129cc:	orrls	r1, r1, #1
   129d0:	cmp	r1, #0
   129d4:	bne	129e0 <__assert_fail@plt+0x1e18>
   129d8:	cmp	r3, #0
   129dc:	beq	12858 <__assert_fail@plt+0x1c90>
   129e0:	mov	r7, #16
   129e4:	b	125c0 <__assert_fail@plt+0x19f8>
   129e8:	cmp	r6, #14
   129ec:	beq	12b60 <__assert_fail@plt+0x1f98>
   129f0:	sub	r2, r6, #10
   129f4:	bics	r2, r2, #2
   129f8:	beq	12a5c <__assert_fail@plt+0x1e94>
   129fc:	cmp	r6, #15
   12a00:	beq	12980 <__assert_fail@plt+0x1db8>
   12a04:	sub	r2, r6, #7
   12a08:	sub	r3, r5, #7
   12a0c:	clz	r2, r2
   12a10:	clz	r3, r3
   12a14:	lsr	r2, r2, #5
   12a18:	lsr	r3, r3, #5
   12a1c:	tst	r2, r3
   12a20:	bne	127f0 <__assert_fail@plt+0x1c28>
   12a24:	cmp	r0, #1
   12a28:	movhi	r0, lr
   12a2c:	orrls	r0, lr, #1
   12a30:	cmp	r0, #0
   12a34:	bne	129b0 <__assert_fail@plt+0x1de8>
   12a38:	cmp	r6, #16
   12a3c:	orreq	r2, r2, #1
   12a40:	cmp	r2, #0
   12a44:	bne	129b0 <__assert_fail@plt+0x1de8>
   12a48:	cmp	r6, #5
   12a4c:	cmpeq	r5, #5
   12a50:	bne	12858 <__assert_fail@plt+0x1c90>
   12a54:	mov	r7, #5
   12a58:	b	125c0 <__assert_fail@plt+0x19f8>
   12a5c:	cmp	r5, #15
   12a60:	bne	129fc <__assert_fail@plt+0x1e34>
   12a64:	mov	r7, r6
   12a68:	b	125c0 <__assert_fail@plt+0x19f8>
   12a6c:	ldr	r3, [sp, #12]
   12a70:	ldr	r6, [r8, #4]
   12a74:	cmp	r6, r3
   12a78:	movne	r5, r3
   12a7c:	movne	r7, #0
   12a80:	bne	12a90 <__assert_fail@plt+0x1ec8>
   12a84:	b	12ba4 <__assert_fail@plt+0x1fdc>
   12a88:	cmp	r5, #0
   12a8c:	beq	12b90 <__assert_fail@plt+0x1fc8>
   12a90:	add	r1, sp, #24
   12a94:	ldr	r0, [r5, #12]
   12a98:	bl	10a6c <utf8proc_encode_char@plt>
   12a9c:	cmp	r0, #0
   12aa0:	beq	12b7c <__assert_fail@plt+0x1fb4>
   12aa4:	ldr	r5, [r5, #4]
   12aa8:	add	r7, r7, r0
   12aac:	cmp	r6, r5
   12ab0:	bne	12a88 <__assert_fail@plt+0x1ec0>
   12ab4:	add	r0, r7, #1
   12ab8:	bl	10ae4 <malloc@plt>
   12abc:	mov	r6, r5
   12ac0:	str	r8, [sp, #4]
   12ac4:	mov	r7, #0
   12ac8:	ldr	r5, [sp, #12]
   12acc:	mov	r8, r0
   12ad0:	b	12adc <__assert_fail@plt+0x1f14>
   12ad4:	cmp	r5, #0
   12ad8:	beq	12b4c <__assert_fail@plt+0x1f84>
   12adc:	add	r1, r8, r7
   12ae0:	ldr	r0, [r5, #12]
   12ae4:	bl	10a6c <utf8proc_encode_char@plt>
   12ae8:	ldr	r5, [r5, #4]
   12aec:	cmp	r5, r6
   12af0:	add	r7, r7, r0
   12af4:	bne	12ad4 <__assert_fail@plt+0x1f0c>
   12af8:	mov	r6, r8
   12afc:	ldr	r8, [sp, #4]
   12b00:	mov	r1, #12
   12b04:	strb	sl, [r6, r7]
   12b08:	mov	r0, #1
   12b0c:	bl	12ec0 <error@@Base+0x3c>
   12b10:	mov	r5, r0
   12b14:	mov	r0, r6
   12b18:	bl	10b68 <utf8proc_NFC@plt>
   12b1c:	mov	r1, r5
   12b20:	str	r0, [r5, #8]
   12b24:	ldr	r0, [sp, #20]
   12b28:	bl	110b8 <__assert_fail@plt+0x4f0>
   12b2c:	mov	r0, r6
   12b30:	bl	10a48 <free@plt>
   12b34:	b	125fc <__assert_fail@plt+0x1a34>
   12b38:	cmp	r5, #15
   12b3c:	beq	12820 <__assert_fail@plt+0x1c58>
   12b40:	cmp	r7, #15
   12b44:	bne	129fc <__assert_fail@plt+0x1e34>
   12b48:	b	129f0 <__assert_fail@plt+0x1e28>
   12b4c:	ldr	r3, [pc, #112]	; 12bc4 <__assert_fail@plt+0x1ffc>
   12b50:	ldr	r2, [pc, #112]	; 12bc8 <__assert_fail@plt+0x2000>
   12b54:	ldr	r1, [pc, #112]	; 12bcc <__assert_fail@plt+0x2004>
   12b58:	ldr	r0, [pc, #112]	; 12bd0 <__assert_fail@plt+0x2008>
   12b5c:	bl	10bc8 <__assert_fail@plt>
   12b60:	cmp	r5, #15
   12b64:	moveq	r7, #14
   12b68:	beq	125c0 <__assert_fail@plt+0x19f8>
   12b6c:	sub	r3, r5, #7
   12b70:	clz	r3, r3
   12b74:	lsr	r3, r3, #5
   12b78:	b	12a24 <__assert_fail@plt+0x1e5c>
   12b7c:	ldr	r3, [pc, #56]	; 12bbc <__assert_fail@plt+0x1ff4>
   12b80:	mov	r2, #253	; 0xfd
   12b84:	ldr	r1, [pc, #64]	; 12bcc <__assert_fail@plt+0x2004>
   12b88:	ldr	r0, [pc, #68]	; 12bd4 <__assert_fail@plt+0x200c>
   12b8c:	bl	10bc8 <__assert_fail@plt>
   12b90:	ldr	r3, [pc, #36]	; 12bbc <__assert_fail@plt+0x1ff4>
   12b94:	mov	r2, #249	; 0xf9
   12b98:	ldr	r1, [pc, #44]	; 12bcc <__assert_fail@plt+0x2004>
   12b9c:	ldr	r0, [pc, #44]	; 12bd0 <__assert_fail@plt+0x2008>
   12ba0:	bl	10bc8 <__assert_fail@plt>
   12ba4:	bl	10ae4 <malloc@plt>
   12ba8:	mov	r7, #0
   12bac:	mov	r6, r0
   12bb0:	b	12b00 <__assert_fail@plt+0x1f38>
   12bb4:	andeq	r2, r0, r6, rrx
   12bb8:	andeq	r0, r0, r4, asr #8
   12bbc:	andeq	r3, r1, ip, lsr #25
   12bc0:	strdne	r0, [r0], -pc	; <UNPREDICTABLE>
   12bc4:	andeq	r3, r1, r0, asr #25
   12bc8:	andeq	r0, r0, sp, lsl #2
   12bcc:	andeq	r7, r1, r0, lsl r0
   12bd0:	andeq	r7, r1, r8, lsl r0
   12bd4:	andeq	r7, r1, r8, lsr #32
   12bd8:	push	{r4, lr}
   12bdc:	mov	r4, r0
   12be0:	ldr	r0, [r0, #8]
   12be4:	bl	10a48 <free@plt>
   12be8:	mov	r0, r4
   12bec:	pop	{r4, lr}
   12bf0:	b	10a48 <free@plt>
   12bf4:	ldr	r3, [pc, #136]	; 12c84 <__assert_fail@plt+0x20bc>
   12bf8:	push	{r7, lr}
   12bfc:	mov	r9, r0
   12c00:	ldr	r3, [r3]
   12c04:	sub	sp, sp, #112	; 0x70
   12c08:	cmp	r3, #0
   12c0c:	beq	12c14 <__assert_fail@plt+0x204c>
   12c10:	blx	r3
   12c14:	ldr	r6, [pc, #108]	; 12c88 <__assert_fail@plt+0x20c0>
   12c18:	ldrsh	r3, [r6]
   12c1c:	cmp	r3, #0
   12c20:	ble	12c7c <__assert_fail@plt+0x20b4>
   12c24:	ldr	r8, [pc, #96]	; 12c8c <__assert_fail@plt+0x20c4>
   12c28:	ldr	r7, [pc, #96]	; 12c90 <__assert_fail@plt+0x20c8>
   12c2c:	mov	r4, #1
   12c30:	ldr	r5, [r8]
   12c34:	bl	10b14 <getpid@plt>
   12c38:	mov	r2, r5
   12c3c:	mov	r1, r7
   12c40:	str	r4, [sp]
   12c44:	add	r4, r4, #1
   12c48:	sxth	r4, r4
   12c4c:	mov	r3, r0
   12c50:	add	r0, sp, #12
   12c54:	bl	10b80 <sprintf@plt>
   12c58:	add	r0, sp, #12
   12c5c:	bl	10a78 <strdup@plt>
   12c60:	mov	r5, r0
   12c64:	bl	10a90 <unlink@plt>
   12c68:	mov	r0, r5
   12c6c:	bl	10a48 <free@plt>
   12c70:	ldrsh	r3, [r6]
   12c74:	cmp	r3, r4
   12c78:	bge	12c30 <__assert_fail@plt+0x2068>
   12c7c:	mov	r0, r9
   12c80:	bl	10b20 <exit@plt>
   12c84:	andeq	sl, r2, ip, ror #1
   12c88:	andeq	r8, r2, r8, asr #2
   12c8c:	andeq	sl, r2, r8, ror #1
   12c90:	andeq	r7, r1, ip, lsr r0
   12c94:	ldrb	r3, [r0]
   12c98:	cmp	r3, #0
   12c9c:	beq	12d00 <__assert_fail@plt+0x2138>
   12ca0:	ldrb	ip, [r1]
   12ca4:	cmp	ip, r3
   12ca8:	bne	12d10 <__assert_fail@plt+0x2148>
   12cac:	push	{lr}		; (str lr, [sp, #-4]!)
   12cb0:	mov	r2, #0
   12cb4:	mov	lr, r1
   12cb8:	b	12cc8 <__assert_fail@plt+0x2100>
   12cbc:	ldrb	ip, [lr, #1]!
   12cc0:	cmp	r3, ip
   12cc4:	bne	12ce8 <__assert_fail@plt+0x2120>
   12cc8:	ldrb	r3, [r0, #1]!
   12ccc:	add	r2, r2, #1
   12cd0:	cmp	r3, #0
   12cd4:	bne	12cbc <__assert_fail@plt+0x20f4>
   12cd8:	ldrb	ip, [r1, r2]
   12cdc:	cmp	ip, #0
   12ce0:	movne	r3, #0
   12ce4:	beq	12cf8 <__assert_fail@plt+0x2130>
   12ce8:	cmp	r3, ip
   12cec:	movcs	r0, #1
   12cf0:	mvncc	r0, #0
   12cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   12cf8:	mov	r0, ip
   12cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   12d00:	ldrb	ip, [r1, r3]
   12d04:	cmp	ip, #0
   12d08:	movne	r3, #0
   12d0c:	beq	12d20 <__assert_fail@plt+0x2158>
   12d10:	cmp	r3, ip
   12d14:	movcs	r0, #1
   12d18:	mvncc	r0, #0
   12d1c:	bx	lr
   12d20:	mov	r0, ip
   12d24:	bx	lr
   12d28:	ldr	r2, [pc, #28]	; 12d4c <__assert_fail@plt+0x2184>
   12d2c:	ldr	r2, [r2]
   12d30:	cmp	r2, r0
   12d34:	bxeq	lr
   12d38:	ldr	r2, [pc, #16]	; 12d50 <__assert_fail@plt+0x2188>
   12d3c:	ldr	r2, [r2]
   12d40:	cmp	r0, r2
   12d44:	bxeq	lr
   12d48:	b	10b5c <fclose@plt>
   12d4c:	ldrdeq	r8, [r2], -r0
   12d50:	ldrdeq	r8, [r2], -r4
   12d54:	push	{lr}		; (str lr, [sp, #-4]!)
   12d58:	sub	sp, sp, #92	; 0x5c
   12d5c:	mov	r1, r0
   12d60:	mov	r2, sp
   12d64:	mov	r0, #3
   12d68:	bl	10aa8 <__xstat@plt>
   12d6c:	clz	r0, r0
   12d70:	lsr	r0, r0, #5
   12d74:	add	sp, sp, #92	; 0x5c
   12d78:	pop	{pc}		; (ldr pc, [sp], #4)
   12d7c:	ldr	r3, [pc, #84]	; 12dd8 <__assert_fail@plt+0x2210>
   12d80:	push	{r4, r5, lr}
   12d84:	sub	sp, sp, #116	; 0x74
   12d88:	ldrh	r4, [r3]
   12d8c:	ldr	r2, [pc, #72]	; 12ddc <__assert_fail@plt+0x2214>
   12d90:	add	r4, r4, #1
   12d94:	ldr	r5, [r2]
   12d98:	sxth	r4, r4
   12d9c:	strh	r4, [r3]
   12da0:	bl	10b14 <getpid@plt>
   12da4:	mov	r2, r5
   12da8:	ldr	r1, [pc, #48]	; 12de0 <__assert_fail@plt+0x2218>
   12dac:	str	r4, [sp]
   12db0:	mov	r3, r0
   12db4:	add	r0, sp, #12
   12db8:	bl	10b80 <sprintf@plt>
   12dbc:	add	r0, sp, #12
   12dc0:	bl	10a78 <strdup@plt>
   12dc4:	mov	r4, r0
   12dc8:	bl	10a90 <unlink@plt>
   12dcc:	mov	r0, r4
   12dd0:	add	sp, sp, #116	; 0x74
   12dd4:	pop	{r4, r5, pc}
   12dd8:	andeq	r8, r2, r8, asr #2
   12ddc:	andeq	sl, r2, r8, ror #1
   12de0:	andeq	r7, r1, ip, lsr r0
   12de4:	push	{r4, lr}
   12de8:	mov	r4, r0
   12dec:	bl	10b38 <strlen@plt>
   12df0:	sub	r0, r0, #1
   12df4:	sxth	r0, r0
   12df8:	cmp	r0, #0
   12dfc:	bge	12e14 <__assert_fail@plt+0x224c>
   12e00:	b	12e20 <__assert_fail@plt+0x2258>
   12e04:	sub	r0, r0, #1
   12e08:	sxth	r0, r0
   12e0c:	cmn	r0, #1
   12e10:	beq	12e20 <__assert_fail@plt+0x2258>
   12e14:	ldrb	r3, [r4, r0]
   12e18:	cmp	r3, #47	; 0x2f
   12e1c:	bne	12e04 <__assert_fail@plt+0x223c>
   12e20:	add	r0, r0, #1
   12e24:	add	r0, r4, r0
   12e28:	pop	{r4, pc}
   12e2c:	push	{r4, lr}
   12e30:	mov	r0, #0
   12e34:	bl	12bf4 <__assert_fail@plt+0x202c>
   12e38:	ldr	r2, [pc, #52]	; 12e74 <__assert_fail@plt+0x22ac>
   12e3c:	push	{r4, lr}
   12e40:	ldr	r2, [r2]
   12e44:	cmp	r2, #0
   12e48:	beq	12e54 <__assert_fail@plt+0x228c>
   12e4c:	blx	r2
   12e50:	bl	12e2c <__assert_fail@plt+0x2264>
   12e54:	ldr	r1, [pc, #28]	; 12e78 <__assert_fail@plt+0x22b0>
   12e58:	ldr	r2, [pc, #28]	; 12e7c <__assert_fail@plt+0x22b4>
   12e5c:	mov	r3, r0
   12e60:	ldr	r0, [r1]
   12e64:	ldr	r2, [r2]
   12e68:	ldr	r1, [pc, #16]	; 12e80 <__assert_fail@plt+0x22b8>
   12e6c:	bl	10b44 <fprintf@plt>
   12e70:	b	12e50 <__assert_fail@plt+0x2288>
   12e74:	andeq	sl, r2, r4, ror #1
   12e78:	andeq	r8, r2, r8, asr #1
   12e7c:	andeq	sl, r2, r8, ror #1
   12e80:	andeq	r7, r1, ip, asr #32

00012e84 <error@@Base>:
   12e84:	ldr	r1, [pc, #36]	; 12eb0 <error@@Base+0x2c>
   12e88:	ldr	r2, [pc, #36]	; 12eb4 <error@@Base+0x30>
   12e8c:	mov	r3, r0
   12e90:	push	{r4, lr}
   12e94:	ldr	r0, [r1]
   12e98:	ldr	r2, [r2]
   12e9c:	ldr	r1, [pc, #20]	; 12eb8 <error@@Base+0x34>
   12ea0:	bl	10b44 <fprintf@plt>
   12ea4:	ldr	r3, [pc, #16]	; 12ebc <error@@Base+0x38>
   12ea8:	ldr	r0, [r3]
   12eac:	bl	12bf4 <__assert_fail@plt+0x202c>
   12eb0:	andeq	r8, r2, r8, asr #1
   12eb4:	andeq	sl, r2, r8, ror #1
   12eb8:	andeq	r7, r1, ip, asr r0
   12ebc:	strheq	r8, [r2], -ip
   12ec0:	push	{r4, lr}
   12ec4:	bl	10a0c <calloc@plt>
   12ec8:	cmp	r0, #0
   12ecc:	popne	{r4, pc}
   12ed0:	ldr	r0, [pc]	; 12ed8 <error@@Base+0x54>
   12ed4:	bl	12e84 <error@@Base>
   12ed8:	andeq	r7, r1, r4, rrx
   12edc:	ldr	r3, [pc, #32]	; 12f04 <error@@Base+0x80>
   12ee0:	ldrb	r2, [r3, #2]
   12ee4:	cmp	r2, #0
   12ee8:	beq	12ef0 <error@@Base+0x6c>
   12eec:	bx	lr
   12ef0:	push	{r4, lr}
   12ef4:	mov	r2, #1
   12ef8:	ldr	r0, [pc, #8]	; 12f08 <error@@Base+0x84>
   12efc:	strb	r2, [r3, #2]
   12f00:	bl	12e84 <error@@Base>
   12f04:	andeq	r8, r2, r8, asr #2
   12f08:	andeq	r7, r1, r0, lsl #1
   12f0c:	ldr	r3, [pc, #48]	; 12f44 <error@@Base+0xc0>
   12f10:	push	{lr}		; (str lr, [sp, #-4]!)
   12f14:	sub	sp, sp, #12
   12f18:	ldr	r2, [pc, #40]	; 12f48 <error@@Base+0xc4>
   12f1c:	str	r1, [sp]
   12f20:	ldr	r1, [r3]
   12f24:	ldr	r2, [r2]
   12f28:	mov	r3, r0
   12f2c:	mov	r0, r1
   12f30:	ldr	r1, [pc, #20]	; 12f4c <error@@Base+0xc8>
   12f34:	bl	10b44 <fprintf@plt>
   12f38:	ldr	r3, [pc, #16]	; 12f50 <error@@Base+0xcc>
   12f3c:	ldr	r0, [r3]
   12f40:	bl	12bf4 <__assert_fail@plt+0x202c>
   12f44:	andeq	r8, r2, r8, asr #1
   12f48:	andeq	sl, r2, r8, ror #1
   12f4c:	muleq	r1, r0, r0
   12f50:	strheq	r8, [r2], -ip
   12f54:	subs	r2, r0, #0
   12f58:	push	{r4, r5, r6, lr}
   12f5c:	mov	r4, r1
   12f60:	beq	12f8c <error@@Base+0x108>
   12f64:	mov	r5, r2
   12f68:	bl	10a3c <fopen@plt>
   12f6c:	cmp	r0, #0
   12f70:	popne	{r4, r5, r6, pc}
   12f74:	ldrb	r3, [r4]
   12f78:	mov	r1, r5
   12f7c:	cmp	r3, #119	; 0x77
   12f80:	beq	12fa4 <error@@Base+0x120>
   12f84:	ldr	r0, [pc, #32]	; 12fac <error@@Base+0x128>
   12f88:	bl	12f0c <error@@Base+0x88>
   12f8c:	ldrb	r3, [r1]
   12f90:	cmp	r3, #114	; 0x72
   12f94:	ldreq	r3, [pc, #20]	; 12fb0 <error@@Base+0x12c>
   12f98:	ldrne	r3, [pc, #20]	; 12fb4 <error@@Base+0x130>
   12f9c:	ldr	r0, [r3]
   12fa0:	pop	{r4, r5, r6, pc}
   12fa4:	ldr	r0, [pc, #12]	; 12fb8 <error@@Base+0x134>
   12fa8:	bl	12f0c <error@@Base+0x88>
   12fac:	strheq	r7, [r1], -r8
   12fb0:	ldrdeq	r8, [r2], -r0
   12fb4:	ldrdeq	r8, [r2], -r4
   12fb8:	andeq	r7, r1, r0, lsr #1
   12fbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fc0:	sub	sp, sp, #20
   12fc4:	ldr	r4, [r1]
   12fc8:	str	r0, [sp, #8]
   12fcc:	mov	r0, r4
   12fd0:	mov	r9, r1
   12fd4:	str	r2, [sp, #12]
   12fd8:	mov	r6, r3
   12fdc:	bl	10b38 <strlen@plt>
   12fe0:	sub	r0, r0, #1
   12fe4:	sxth	r0, r0
   12fe8:	cmp	r0, #0
   12fec:	bge	13004 <error@@Base+0x180>
   12ff0:	b	13010 <error@@Base+0x18c>
   12ff4:	sub	r0, r0, #1
   12ff8:	sxth	r0, r0
   12ffc:	cmn	r0, #1
   13000:	beq	13010 <error@@Base+0x18c>
   13004:	ldrb	r3, [r4, r0]
   13008:	cmp	r3, #47	; 0x2f
   1300c:	bne	12ff4 <error@@Base+0x170>
   13010:	ldr	r3, [pc, #460]	; 131e4 <error@@Base+0x360>
   13014:	add	r0, r0, #1
   13018:	add	r4, r4, r0
   1301c:	ldr	r1, [pc, #452]	; 131e8 <error@@Base+0x364>
   13020:	mov	r0, #2
   13024:	str	r4, [r3]
   13028:	bl	10afc <__sysv_signal@plt>
   1302c:	ldr	r1, [pc, #436]	; 131e8 <error@@Base+0x364>
   13030:	mov	r0, #15
   13034:	bl	10afc <__sysv_signal@plt>
   13038:	ldr	r3, [sp, #8]
   1303c:	ldr	fp, [r3]
   13040:	cmp	fp, #1
   13044:	beq	13178 <error@@Base+0x2f4>
   13048:	movgt	sl, #1
   1304c:	mov	r7, #0
   13050:	movgt	r4, sl
   13054:	bgt	1307c <error@@Base+0x1f8>
   13058:	b	13188 <error@@Base+0x304>
   1305c:	add	r3, r7, #1
   13060:	str	r5, [r9, r7, lsl #2]
   13064:	sxth	r7, r3
   13068:	add	r4, r4, #1
   1306c:	sxth	r4, r4
   13070:	cmp	r4, fp
   13074:	mov	sl, r4
   13078:	bge	13188 <error@@Base+0x304>
   1307c:	ldr	r5, [r9, r4, lsl #2]
   13080:	lsl	r3, r4, #2
   13084:	ldrb	r2, [r5]
   13088:	cmp	r2, #45	; 0x2d
   1308c:	bne	1305c <error@@Base+0x1d8>
   13090:	ldrb	r8, [r5, #1]
   13094:	str	r3, [sp, #4]
   13098:	cmp	r8, #0
   1309c:	beq	1305c <error@@Base+0x1d8>
   130a0:	mov	r0, r5
   130a4:	bl	10b38 <strlen@plt>
   130a8:	mov	r1, r5
   130ac:	mov	r2, r0
   130b0:	ldr	r0, [pc, #308]	; 131ec <error@@Base+0x368>
   130b4:	bl	10ba4 <strncmp@plt>
   130b8:	cmp	r0, #0
   130bc:	beq	131d0 <error@@Base+0x34c>
   130c0:	add	sl, sl, #1
   130c4:	cmp	sl, fp
   130c8:	movge	r0, #0
   130cc:	ldrlt	r3, [sp, #4]
   130d0:	addlt	r3, r9, r3
   130d4:	ldrlt	r0, [r3, #4]
   130d8:	cmp	r6, #0
   130dc:	beq	13120 <error@@Base+0x29c>
   130e0:	ldrb	r3, [r6]
   130e4:	cmp	r3, #0
   130e8:	beq	13120 <error@@Base+0x29c>
   130ec:	cmp	r3, r8
   130f0:	beq	1312c <error@@Base+0x2a8>
   130f4:	mov	r3, #0
   130f8:	b	13104 <error@@Base+0x280>
   130fc:	cmp	r8, r1
   13100:	beq	13130 <error@@Base+0x2ac>
   13104:	add	r3, r3, #1
   13108:	sxth	r3, r3
   1310c:	add	r2, r3, r3, lsl #1
   13110:	ldrb	r1, [r6, r2, lsl #2]
   13114:	add	r2, r6, r2, lsl #2
   13118:	cmp	r1, #0
   1311c:	bne	130fc <error@@Base+0x278>
   13120:	mov	r1, r5
   13124:	ldr	r0, [pc, #196]	; 131f0 <error@@Base+0x36c>
   13128:	bl	12f0c <error@@Base+0x88>
   1312c:	mov	r2, r6
   13130:	ldr	r3, [r2, #4]
   13134:	cmp	r3, #0
   13138:	beq	13198 <error@@Base+0x314>
   1313c:	ldrb	r1, [r5, #2]
   13140:	cmp	r0, #0
   13144:	cmpeq	r1, #0
   13148:	beq	13198 <error@@Base+0x314>
   1314c:	ldr	r2, [r3]
   13150:	cmp	r2, #0
   13154:	bne	131d8 <error@@Base+0x354>
   13158:	cmp	r1, #0
   1315c:	addne	r0, r5, #2
   13160:	str	r0, [r3]
   13164:	ldrb	r3, [r5, #2]
   13168:	cmp	r3, #0
   1316c:	addeq	r4, r4, #1
   13170:	sxtheq	r4, r4
   13174:	b	13068 <error@@Base+0x1e4>
   13178:	ldr	r3, [pc, #116]	; 131f4 <error@@Base+0x370>
   1317c:	ldrb	r7, [r3, #4]
   13180:	cmp	r7, #0
   13184:	bne	131d0 <error@@Base+0x34c>
   13188:	ldr	r3, [sp, #8]
   1318c:	str	r7, [r3]
   13190:	add	sp, sp, #20
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	ldr	r3, [r2, #8]
   1319c:	cmp	r3, #0
   131a0:	beq	13120 <error@@Base+0x29c>
   131a4:	ldrb	r2, [r5, #2]
   131a8:	cmp	r2, #0
   131ac:	bne	13120 <error@@Base+0x29c>
   131b0:	ldrb	r2, [r3]
   131b4:	cmp	r2, #0
   131b8:	bne	131d8 <error@@Base+0x354>
   131bc:	mov	r2, #1
   131c0:	strb	r2, [r3]
   131c4:	ldr	r3, [sp, #8]
   131c8:	ldr	fp, [r3]
   131cc:	b	13068 <error@@Base+0x1e4>
   131d0:	ldr	r0, [sp, #12]
   131d4:	bl	12e38 <__assert_fail@plt+0x2270>
   131d8:	mov	r1, r5
   131dc:	ldr	r0, [pc, #20]	; 131f8 <error@@Base+0x374>
   131e0:	bl	12f0c <error@@Base+0x88>
   131e4:	andeq	sl, r2, r8, ror #1
   131e8:	ldrdeq	r2, [r1], -ip
   131ec:	andeq	r7, r1, ip, asr #1
   131f0:	ldrdeq	r7, [r1], -r4
   131f4:	strheq	r8, [r2], -ip
   131f8:	andeq	r7, r1, r4, ror #1
   131fc:	ldr	r3, [pc, #44]	; 13230 <error@@Base+0x3ac>
   13200:	push	{lr}		; (str lr, [sp, #-4]!)
   13204:	sub	sp, sp, #12
   13208:	ldr	r2, [pc, #36]	; 13234 <error@@Base+0x3b0>
   1320c:	str	r1, [sp]
   13210:	ldr	r1, [r3]
   13214:	ldr	r2, [r2]
   13218:	mov	r3, r0
   1321c:	mov	r0, r1
   13220:	ldr	r1, [pc, #16]	; 13238 <error@@Base+0x3b4>
   13224:	bl	10b44 <fprintf@plt>
   13228:	add	sp, sp, #12
   1322c:	pop	{pc}		; (ldr pc, [sp], #4)
   13230:	andeq	r8, r2, r8, asr #1
   13234:	andeq	sl, r2, r8, ror #1
   13238:	muleq	r1, r0, r0
   1323c:	push	{r4, r5, r6, lr}
   13240:	mov	r4, r0
   13244:	uxtb	r6, r1
   13248:	mov	r0, #1
   1324c:	mov	r1, #16
   13250:	mov	r5, r2
   13254:	bl	12ec0 <error@@Base+0x3c>
   13258:	strb	r6, [r0, #8]
   1325c:	str	r5, [r0, #12]
   13260:	mov	r1, r0
   13264:	mov	r0, r4
   13268:	pop	{r4, r5, r6, lr}
   1326c:	b	110b8 <__assert_fail@plt+0x4f0>
   13270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13274:	sub	sp, sp, #124	; 0x7c
   13278:	ldrb	r3, [r2]
   1327c:	str	r2, [sp, #8]
   13280:	adds	r3, r3, #0
   13284:	movne	r3, #1
   13288:	cmp	r1, #0
   1328c:	movne	r3, #0
   13290:	cmp	r3, #0
   13294:	bne	13670 <error@@Base+0x7ec>
   13298:	mov	sl, r0
   1329c:	mov	r0, r1
   132a0:	ldr	r3, [sl, #4]
   132a4:	ldr	r1, [pc, #976]	; 1367c <error@@Base+0x7f8>
   132a8:	str	r3, [sp, #12]
   132ac:	bl	12f54 <error@@Base+0xd0>
   132b0:	ldr	r3, [sp, #8]
   132b4:	ldrb	r3, [r3]
   132b8:	cmp	r3, #0
   132bc:	mov	r5, r0
   132c0:	bne	135c4 <error@@Base+0x740>
   132c4:	ldr	r2, [sp, #8]
   132c8:	mov	r0, r5
   132cc:	ldr	r3, [r2, #4]
   132d0:	ldrb	r6, [r2, #1]
   132d4:	mov	r4, r3
   132d8:	bl	10bbc <getc@plt>
   132dc:	cmp	r4, #0
   132e0:	mov	r2, r4
   132e4:	moveq	r2, #94	; 0x5e
   132e8:	str	r2, [sp, #4]
   132ec:	cmn	r0, #1
   132f0:	beq	133b4 <error@@Base+0x530>
   132f4:	ldr	r9, [pc, #900]	; 13680 <error@@Base+0x7fc>
   132f8:	ldrsb	r4, [r9, r0]
   132fc:	cmp	r4, #0
   13300:	ble	13658 <error@@Base+0x7d4>
   13304:	cmp	r6, #0
   13308:	movne	r7, #0
   1330c:	movne	r8, #1
   13310:	movne	fp, #4
   13314:	bne	13328 <error@@Base+0x4a4>
   13318:	b	13528 <error@@Base+0x6a4>
   1331c:	ldrsb	r4, [r9, r0]
   13320:	cmp	r4, #0
   13324:	ble	13658 <error@@Base+0x7d4>
   13328:	cmp	r4, #1
   1332c:	strb	r0, [sp, #16]
   13330:	beq	13354 <error@@Base+0x4d0>
   13334:	sub	r6, r4, #1
   13338:	mov	r2, r6
   1333c:	mov	r3, r5
   13340:	mov	r1, r8
   13344:	add	r0, sp, #17
   13348:	bl	10ac0 <fread@plt>
   1334c:	cmp	r6, r0
   13350:	bne	13668 <error@@Base+0x7e4>
   13354:	add	r2, sp, #20
   13358:	mov	r1, fp
   1335c:	add	r0, sp, #16
   13360:	bl	10acc <utf8proc_iterate@plt>
   13364:	cmp	r0, r4
   13368:	bne	13660 <error@@Base+0x7dc>
   1336c:	ldr	r4, [sp, #20]
   13370:	ldr	r3, [sp, #4]
   13374:	cmp	r4, r3
   13378:	moveq	r7, r8
   1337c:	beq	133a4 <error@@Base+0x520>
   13380:	mov	r1, #16
   13384:	mov	r0, r8
   13388:	bl	12ec0 <error@@Base+0x3c>
   1338c:	strb	r7, [r0, #8]
   13390:	mov	r1, r0
   13394:	str	r4, [r0, #12]
   13398:	mov	r0, sl
   1339c:	bl	110b8 <__assert_fail@plt+0x4f0>
   133a0:	mov	r7, #0
   133a4:	mov	r0, r5
   133a8:	bl	10bbc <getc@plt>
   133ac:	cmn	r0, #1
   133b0:	bne	1331c <error@@Base+0x498>
   133b4:	mov	r0, r5
   133b8:	bl	12d28 <__assert_fail@plt+0x2160>
   133bc:	ldr	r3, [sp, #8]
   133c0:	ldrb	r3, [r3, #9]
   133c4:	cmp	r3, #0
   133c8:	beq	13448 <error@@Base+0x5c4>
   133cc:	ldr	r3, [sp, #12]
   133d0:	cmp	r3, #0
   133d4:	ldrne	r6, [r3, #4]
   133d8:	ldreq	r6, [sl]
   133dc:	cmp	r6, #0
   133e0:	beq	13448 <error@@Base+0x5c4>
   133e4:	mov	r5, r6
   133e8:	mov	r7, #32
   133ec:	b	13414 <error@@Base+0x590>
   133f0:	cmp	r4, #11
   133f4:	bcs	13440 <error@@Base+0x5bc>
   133f8:	cmp	r4, #9
   133fc:	beq	13440 <error@@Base+0x5bc>
   13400:	cmp	r4, #10
   13404:	bne	13430 <error@@Base+0x5ac>
   13408:	ldr	r5, [r5, #4]
   1340c:	cmp	r5, #0
   13410:	beq	134e8 <error@@Base+0x664>
   13414:	ldr	r4, [r5, #12]
   13418:	mov	r0, r4
   1341c:	bl	10a54 <utf8proc_get_property@plt>
   13420:	cmp	r4, #13
   13424:	bls	133f0 <error@@Base+0x56c>
   13428:	cmp	r4, #160	; 0xa0
   1342c:	beq	13440 <error@@Base+0x5bc>
   13430:	ldrsh	r3, [r0]
   13434:	sub	r3, r3, #23
   13438:	cmp	r3, #2
   1343c:	bhi	13408 <error@@Base+0x584>
   13440:	str	r7, [r5, #12]
   13444:	b	13408 <error@@Base+0x584>
   13448:	ldr	r3, [sp, #8]
   1344c:	ldrb	r3, [r3, #10]
   13450:	cmp	r3, #0
   13454:	beq	13484 <error@@Base+0x600>
   13458:	ldr	r3, [sp, #12]
   1345c:	cmp	r3, #0
   13460:	ldrne	r4, [r3, #4]
   13464:	ldreq	r4, [sl]
   13468:	b	1347c <error@@Base+0x5f8>
   1346c:	ldr	r0, [r4, #12]
   13470:	bl	10a9c <utf8proc_tolower@plt>
   13474:	str	r0, [r4, #12]
   13478:	ldr	r4, [r4, #4]
   1347c:	cmp	r4, #0
   13480:	bne	1346c <error@@Base+0x5e8>
   13484:	add	sp, sp, #124	; 0x7c
   13488:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1348c:	cmp	r3, #10
   13490:	movne	r2, #0
   13494:	andeq	r2, r2, #1
   13498:	cmp	r2, #0
   1349c:	beq	1351c <error@@Base+0x698>
   134a0:	cmp	r4, #0
   134a4:	moveq	r3, #0
   134a8:	andne	r3, r5, #1
   134ac:	cmp	r3, #0
   134b0:	beq	134cc <error@@Base+0x648>
   134b4:	ldr	r3, [r4, #12]
   134b8:	cmp	r3, #32
   134bc:	ldrbeq	r3, [r4, #8]
   134c0:	ldrbeq	r2, [r6, #8]
   134c4:	orreq	r3, r3, r2
   134c8:	strbeq	r3, [r4, #8]
   134cc:	mov	r0, sl
   134d0:	mov	r1, r6
   134d4:	bl	1119c <__assert_fail@plt+0x5d4>
   134d8:	mov	r0, r6
   134dc:	bl	10a48 <free@plt>
   134e0:	subs	r6, r4, #0
   134e4:	beq	13448 <error@@Base+0x5c4>
   134e8:	ldr	r3, [r6, #12]
   134ec:	ldr	r4, [r6, #4]
   134f0:	cmp	r3, #32
   134f4:	eor	r2, r5, #1
   134f8:	bne	1348c <error@@Base+0x608>
   134fc:	cmp	r4, #0
   13500:	orreq	r2, r2, #1
   13504:	cmp	r2, #0
   13508:	bne	134a0 <error@@Base+0x61c>
   1350c:	ldr	r2, [r4, #12]
   13510:	cmp	r2, #10
   13514:	cmpne	r2, #32
   13518:	beq	134a0 <error@@Base+0x61c>
   1351c:	subs	r5, r3, #10
   13520:	movne	r5, #1
   13524:	b	134e0 <error@@Base+0x65c>
   13528:	mov	r7, #1
   1352c:	mov	fp, #4
   13530:	mov	r8, #16
   13534:	b	13544 <error@@Base+0x6c0>
   13538:	ldrsb	r4, [r9, r0]
   1353c:	cmp	r4, #0
   13540:	ble	13658 <error@@Base+0x7d4>
   13544:	cmp	r4, #1
   13548:	strb	r0, [sp, #16]
   1354c:	beq	13570 <error@@Base+0x6ec>
   13550:	sub	r6, r4, #1
   13554:	mov	r2, r6
   13558:	mov	r3, r5
   1355c:	mov	r1, r7
   13560:	add	r0, sp, #17
   13564:	bl	10ac0 <fread@plt>
   13568:	cmp	r6, r0
   1356c:	bne	13668 <error@@Base+0x7e4>
   13570:	add	r2, sp, #20
   13574:	mov	r1, fp
   13578:	add	r0, sp, #16
   1357c:	bl	10acc <utf8proc_iterate@plt>
   13580:	cmp	r0, r4
   13584:	bne	13660 <error@@Base+0x7dc>
   13588:	mov	r1, r8
   1358c:	mov	r0, r7
   13590:	ldr	r4, [sp, #20]
   13594:	bl	12ec0 <error@@Base+0x3c>
   13598:	mov	r3, #0
   1359c:	mov	r1, r0
   135a0:	strb	r3, [r0, #8]
   135a4:	str	r4, [r0, #12]
   135a8:	mov	r0, sl
   135ac:	bl	110b8 <__assert_fail@plt+0x4f0>
   135b0:	mov	r0, r5
   135b4:	bl	10bbc <getc@plt>
   135b8:	cmn	r0, #1
   135bc:	bne	13538 <error@@Base+0x6b4>
   135c0:	b	133b4 <error@@Base+0x530>
   135c4:	add	r0, sp, #20
   135c8:	mov	r2, r5
   135cc:	mov	r1, #99	; 0x63
   135d0:	bl	10a60 <fgets@plt>
   135d4:	cmp	r0, #0
   135d8:	beq	13640 <error@@Base+0x7bc>
   135dc:	mov	r2, #51	; 0x33
   135e0:	ldr	r1, [pc, #156]	; 13684 <error@@Base+0x800>
   135e4:	add	r0, sp, #20
   135e8:	bl	10ba4 <strncmp@plt>
   135ec:	subs	r4, r0, #0
   135f0:	bne	13640 <error@@Base+0x7bc>
   135f4:	ldr	r7, [pc, #140]	; 13688 <error@@Base+0x804>
   135f8:	mov	r6, #99	; 0x63
   135fc:	mov	r2, r5
   13600:	mov	r1, r6
   13604:	add	r0, sp, #20
   13608:	bl	10a60 <fgets@plt>
   1360c:	cmp	r0, #0
   13610:	beq	13638 <error@@Base+0x7b4>
   13614:	mov	r1, r7
   13618:	add	r0, sp, #20
   1361c:	bl	10a18 <strcmp@plt>
   13620:	cmp	r0, #0
   13624:	bne	135fc <error@@Base+0x778>
   13628:	add	r4, r4, #1
   1362c:	sxth	r4, r4
   13630:	cmp	r4, #1
   13634:	ble	135fc <error@@Base+0x778>
   13638:	mov	r3, #1
   1363c:	b	1364c <error@@Base+0x7c8>
   13640:	mov	r0, r5
   13644:	bl	10a84 <rewind@plt>
   13648:	mov	r3, #0
   1364c:	ldr	r2, [sp, #8]
   13650:	strb	r3, [r2, #11]
   13654:	b	132c4 <error@@Base+0x440>
   13658:	ldr	r0, [pc, #44]	; 1368c <error@@Base+0x808>
   1365c:	bl	12e84 <error@@Base>
   13660:	bl	10b8c <utf8proc_errmsg@plt>
   13664:	bl	12e84 <error@@Base>
   13668:	ldr	r0, [pc, #32]	; 13690 <error@@Base+0x80c>
   1366c:	bl	12e84 <error@@Base>
   13670:	ldr	r1, [pc, #28]	; 13694 <error@@Base+0x810>
   13674:	ldr	r0, [pc, #28]	; 13698 <error@@Base+0x814>
   13678:	bl	12f0c <error@@Base+0x88>
   1367c:	andeq	r3, r1, r4, ror #23
   13680:	andeq	r7, r2, r8, lsl #28
   13684:	andeq	r7, r1, r4, lsl r1
   13688:	andeq	r7, r1, ip, asr #2
   1368c:	andeq	r7, r1, r4, lsl #3
   13690:	muleq	r1, ip, r1
   13694:	strdeq	r7, [r1], -r8
   13698:	andeq	r7, r1, r4, lsl #2
   1369c:	push	{r4, lr}
   136a0:	bl	10a6c <utf8proc_encode_char@plt>
   136a4:	cmp	r0, #0
   136a8:	ble	136b4 <error@@Base+0x830>
   136ac:	sxtb	r0, r0
   136b0:	pop	{r4, pc}
   136b4:	ldr	r0, [pc]	; 136bc <error@@Base+0x838>
   136b8:	bl	12e84 <error@@Base>
   136bc:			; <UNDEFINED> instruction: 0x000171b4
   136c0:	push	{r4, r5, r6, r7, r8, lr}
   136c4:	uxtb	r4, r0
   136c8:	cmp	r4, #0
   136cc:	mov	r5, r1
   136d0:	mov	r8, r2
   136d4:	uxtb	r7, r3
   136d8:	moveq	r6, r4
   136dc:	bne	1374c <error@@Base+0x8c8>
   136e0:	cmp	r5, #10
   136e4:	beq	13730 <error@@Base+0x8ac>
   136e8:	mov	r0, r5
   136ec:	bl	10a54 <utf8proc_get_property@plt>
   136f0:	cmp	r5, #32
   136f4:	beq	13774 <error@@Base+0x8f0>
   136f8:	ldrh	r3, [r0]
   136fc:	cmp	r3, #29
   13700:	bhi	13714 <error@@Base+0x890>
   13704:	mov	r1, #1
   13708:	ldr	r2, [pc, #220]	; 137ec <error@@Base+0x968>
   1370c:	ands	r3, r2, r1, lsl r3
   13710:	bne	13774 <error@@Base+0x8f0>
   13714:	cmp	r5, #255	; 0xff
   13718:	bls	137d8 <error@@Base+0x954>
   1371c:	mov	r2, r5
   13720:	add	r0, r8, r4
   13724:	ldr	r1, [pc, #196]	; 137f0 <error@@Base+0x96c>
   13728:	pop	{r4, r5, r6, r7, r8, lr}
   1372c:	b	10b80 <sprintf@plt>
   13730:	ldr	r3, [pc, #188]	; 137f4 <error@@Base+0x970>
   13734:	cmp	r7, #0
   13738:	ldr	r1, [pc, #184]	; 137f8 <error@@Base+0x974>
   1373c:	add	r0, r8, r4
   13740:	movne	r1, r3
   13744:	pop	{r4, r5, r6, r7, r8, lr}
   13748:	b	10b80 <sprintf@plt>
   1374c:	mov	r1, r2
   13750:	mov	r0, #94	; 0x5e
   13754:	bl	10a6c <utf8proc_encode_char@plt>
   13758:	subs	r6, r0, #0
   1375c:	sxtbgt	r6, r6
   13760:	movgt	r4, r6
   13764:	sxthgt	r6, r6
   13768:	bgt	136e0 <error@@Base+0x85c>
   1376c:	ldr	r0, [pc, #136]	; 137fc <error@@Base+0x978>
   13770:	bl	12e84 <error@@Base>
   13774:	mov	r0, r5
   13778:	bl	10b2c <utf8proc_category@plt>
   1377c:	sub	r0, r0, #6
   13780:	cmp	r0, #2
   13784:	bhi	137ac <error@@Base+0x928>
   13788:	add	r1, r8, r4
   1378c:	ldr	r0, [pc, #108]	; 13800 <error@@Base+0x97c>
   13790:	bl	10a6c <utf8proc_encode_char@plt>
   13794:	cmp	r0, #0
   13798:	sxtbgt	r0, r0
   1379c:	addgt	r6, r6, r0
   137a0:	sxthgt	r6, r6
   137a4:	movgt	r4, r6
   137a8:	ble	1376c <error@@Base+0x8e8>
   137ac:	add	r1, r8, r4
   137b0:	mov	r0, r5
   137b4:	bl	10a6c <utf8proc_encode_char@plt>
   137b8:	cmp	r0, #0
   137bc:	ble	1376c <error@@Base+0x8e8>
   137c0:	sxtb	r0, r0
   137c4:	add	r6, r6, r0
   137c8:	mov	r3, #0
   137cc:	sxth	r6, r6
   137d0:	strb	r3, [r8, r6]
   137d4:	pop	{r4, r5, r6, r7, r8, pc}
   137d8:	mov	r2, r5
   137dc:	add	r0, r8, r4
   137e0:	ldr	r1, [pc, #28]	; 13804 <error@@Base+0x980>
   137e4:	pop	{r4, r5, r6, r7, r8, lr}
   137e8:	b	10b80 <sprintf@plt>
   137ec:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   137f0:	ldrdeq	r7, [r1], -ip
   137f4:	andeq	r7, r1, ip, asr #3
   137f8:	andeq	r3, r1, ip, asr ip
   137fc:			; <UNDEFINED> instruction: 0x000171b4
   13800:	andeq	r2, r0, ip, asr #11
   13804:	ldrdeq	r7, [r1], -r4
   13808:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1380c:	mov	r6, r0
   13810:	sub	sp, sp, #20
   13814:	mov	r0, r1
   13818:	ldr	r1, [pc, #432]	; 139d0 <error@@Base+0xb4c>
   1381c:	mov	r4, r2
   13820:	bl	12f54 <error@@Base+0xd0>
   13824:	cmp	r4, #0
   13828:	mov	r5, r0
   1382c:	beq	13874 <error@@Base+0x9f0>
   13830:	mov	r3, r0
   13834:	mov	r2, #55	; 0x37
   13838:	mov	r1, #1
   1383c:	ldr	r0, [pc, #400]	; 139d4 <error@@Base+0xb50>
   13840:	bl	10ab4 <fwrite@plt>
   13844:	mov	r3, r5
   13848:	mov	r2, #55	; 0x37
   1384c:	mov	r1, #1
   13850:	ldr	r0, [pc, #384]	; 139d8 <error@@Base+0xb54>
   13854:	bl	10ab4 <fwrite@plt>
   13858:	mov	r0, r5
   1385c:	blx	r4
   13860:	mov	r3, r5
   13864:	mov	r2, #55	; 0x37
   13868:	mov	r1, #1
   1386c:	ldr	r0, [pc, #356]	; 139d8 <error@@Base+0xb54>
   13870:	bl	10ab4 <fwrite@plt>
   13874:	ldr	fp, [r6]
   13878:	cmp	fp, #0
   1387c:	beq	139b8 <error@@Base+0xb34>
   13880:	ldr	r8, [pc, #340]	; 139dc <error@@Base+0xb58>
   13884:	ldr	r7, [pc, #340]	; 139e0 <error@@Base+0xb5c>
   13888:	mov	r6, #0
   1388c:	b	138fc <error@@Base+0xa78>
   13890:	cmp	r9, #10
   13894:	ldrheq	r2, [r7]
   13898:	strheq	r2, [sl]
   1389c:	beq	138e4 <error@@Base+0xa60>
   138a0:	mov	r0, r9
   138a4:	bl	10a54 <utf8proc_get_property@plt>
   138a8:	cmp	r9, #32
   138ac:	beq	1393c <error@@Base+0xab8>
   138b0:	ldrh	r0, [r0]
   138b4:	cmp	r0, #29
   138b8:	bhi	138cc <error@@Base+0xa48>
   138bc:	mov	ip, #1
   138c0:	ldr	r3, [pc, #284]	; 139e4 <error@@Base+0xb60>
   138c4:	ands	r3, r3, ip, lsl r0
   138c8:	bne	1393c <error@@Base+0xab8>
   138cc:	cmp	r9, #255	; 0xff
   138d0:	bls	139a4 <error@@Base+0xb20>
   138d4:	mov	r2, r9
   138d8:	mov	r0, sl
   138dc:	mov	r1, r8
   138e0:	bl	10b80 <sprintf@plt>
   138e4:	mov	r1, r5
   138e8:	add	r0, sp, #4
   138ec:	bl	10b98 <fputs@plt>
   138f0:	ldr	fp, [fp, #4]
   138f4:	cmp	fp, #0
   138f8:	beq	139b8 <error@@Base+0xb34>
   138fc:	ldrb	r1, [fp, #8]
   13900:	ldr	r9, [fp, #12]
   13904:	cmp	r1, #0
   13908:	addeq	sl, sp, #4
   1390c:	moveq	r4, r6
   13910:	beq	13890 <error@@Base+0xa0c>
   13914:	add	r1, sp, #4
   13918:	mov	r0, #94	; 0x5e
   1391c:	bl	10a6c <utf8proc_encode_char@plt>
   13920:	subs	r4, r0, #0
   13924:	ble	139c8 <error@@Base+0xb44>
   13928:	sxtb	r4, r4
   1392c:	add	r3, sp, #4
   13930:	add	sl, r3, r4
   13934:	sxth	r4, r4
   13938:	b	13890 <error@@Base+0xa0c>
   1393c:	mov	r0, r9
   13940:	bl	10b2c <utf8proc_category@plt>
   13944:	sub	r0, r0, #6
   13948:	cmp	r0, #2
   1394c:	bhi	13978 <error@@Base+0xaf4>
   13950:	mov	r1, sl
   13954:	ldr	r0, [pc, #140]	; 139e8 <error@@Base+0xb64>
   13958:	bl	10a6c <utf8proc_encode_char@plt>
   1395c:	cmp	r0, #0
   13960:	ble	139c8 <error@@Base+0xb44>
   13964:	sxtb	r0, r0
   13968:	add	r4, r4, r0
   1396c:	add	r3, sp, #4
   13970:	sxth	r4, r4
   13974:	add	sl, r3, r4
   13978:	mov	r1, sl
   1397c:	mov	r0, r9
   13980:	bl	10a6c <utf8proc_encode_char@plt>
   13984:	cmp	r0, #0
   13988:	ble	139c8 <error@@Base+0xb44>
   1398c:	sxtb	r0, r0
   13990:	add	r4, r4, r0
   13994:	add	r3, sp, #16
   13998:	sxtah	r4, r3, r4
   1399c:	strb	r6, [r4, #-12]
   139a0:	b	138e4 <error@@Base+0xa60>
   139a4:	mov	r2, r9
   139a8:	mov	r0, sl
   139ac:	ldr	r1, [pc, #56]	; 139ec <error@@Base+0xb68>
   139b0:	bl	10b80 <sprintf@plt>
   139b4:	b	138e4 <error@@Base+0xa60>
   139b8:	mov	r0, r5
   139bc:	bl	12d28 <__assert_fail@plt+0x2160>
   139c0:	add	sp, sp, #20
   139c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139c8:	ldr	r0, [pc, #32]	; 139f0 <error@@Base+0xb6c>
   139cc:	bl	12e84 <error@@Base>
   139d0:	andeq	r3, r1, ip, lsr #24
   139d4:	andeq	r7, r1, r4, lsl r1
   139d8:	andeq	r7, r1, ip, asr #2
   139dc:	ldrdeq	r7, [r1], -ip
   139e0:	andeq	r3, r1, ip, asr ip
   139e4:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   139e8:	andeq	r2, r0, ip, asr #11
   139ec:	ldrdeq	r7, [r1], -r4
   139f0:			; <UNDEFINED> instruction: 0x000171b4
   139f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f8:	mov	r5, #0
   139fc:	ldrb	r3, [r1]
   13a00:	sub	sp, sp, #12
   13a04:	cmp	r3, r5
   13a08:	str	r5, [sp, #4]
   13a0c:	beq	13a7c <error@@Base+0xbf8>
   13a10:	mov	r4, r1
   13a14:	mov	r9, r0
   13a18:	mvn	r8, #0
   13a1c:	mov	r7, #16
   13a20:	mov	r6, #1
   13a24:	b	13a50 <error@@Base+0xbcc>
   13a28:	ldr	sl, [sp, #4]
   13a2c:	bl	12ec0 <error@@Base+0x3c>
   13a30:	mov	r1, r0
   13a34:	strb	r5, [r0, #8]
   13a38:	str	sl, [r0, #12]
   13a3c:	mov	r0, r9
   13a40:	bl	110b8 <__assert_fail@plt+0x4f0>
   13a44:	ldrb	r3, [r4, fp]!
   13a48:	cmp	r3, #0
   13a4c:	beq	13a7c <error@@Base+0xbf8>
   13a50:	mov	r1, r8
   13a54:	add	r2, sp, #4
   13a58:	mov	r0, r4
   13a5c:	bl	10acc <utf8proc_iterate@plt>
   13a60:	mov	r1, r7
   13a64:	subs	fp, r0, #0
   13a68:	mov	r0, r6
   13a6c:	bgt	13a28 <error@@Base+0xba4>
   13a70:	mov	r0, #0
   13a74:	add	sp, sp, #12
   13a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a7c:	mov	r0, #1
   13a80:	add	sp, sp, #12
   13a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a88:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a8c:	mov	r7, r0
   13a90:	ldr	r6, [pc, #72]	; 13ae0 <error@@Base+0xc5c>
   13a94:	ldr	r5, [pc, #72]	; 13ae4 <error@@Base+0xc60>
   13a98:	add	r6, pc, r6
   13a9c:	add	r5, pc, r5
   13aa0:	sub	r6, r6, r5
   13aa4:	mov	r8, r1
   13aa8:	mov	r9, r2
   13aac:	bl	109ec <calloc@plt-0x20>
   13ab0:	asrs	r6, r6, #2
   13ab4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ab8:	mov	r4, #0
   13abc:	add	r4, r4, #1
   13ac0:	ldr	r3, [r5], #4
   13ac4:	mov	r2, r9
   13ac8:	mov	r1, r8
   13acc:	mov	r0, r7
   13ad0:	blx	r3
   13ad4:	cmp	r6, r4
   13ad8:	bne	13abc <error@@Base+0xc38>
   13adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ae0:	andeq	r4, r1, r0, ror #6
   13ae4:	andeq	r4, r1, r8, asr r3
   13ae8:	bx	lr

Disassembly of section .fini:

00013aec <.fini>:
   13aec:	push	{r3, lr}
   13af0:	pop	{r3, pc}
