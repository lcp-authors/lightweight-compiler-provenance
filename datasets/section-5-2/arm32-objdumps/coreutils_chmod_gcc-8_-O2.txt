
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11f20 <__assert_fail@plt+0xd74>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <fstatfs64@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <fstatfs64@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	sl, r1, ip, asr #2

00010eb8 <fstatfs64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #106496	; 0x1a000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <calloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #106496	; 0x1a000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <fputs_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #106496	; 0x1a000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #106496	; 0x1a000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #106496	; 0x1a000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <fflush@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #106496	; 0x1a000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <memmove@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #106496	; 0x1a000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <free@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #106496	; 0x1a000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #106496	; 0x1a000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #106496	; 0x1a000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #106496	; 0x1a000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <memcmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #106496	; 0x1a000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <fputc_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #106496	; 0x1a000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #106496	; 0x1a000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #106496	; 0x1a000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #106496	; 0x1a000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <__fxstatat64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #106496	; 0x1a000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <iswprint@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #106496	; 0x1a000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__fxstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #106496	; 0x1a000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fwrite@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #106496	; 0x1a000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <lseek64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #106496	; 0x1a000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__ctype_get_mb_cur_max@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #106496	; 0x1a000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <__fpending@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #106496	; 0x1a000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <mbrtowc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #106496	; 0x1a000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <error@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #106496	; 0x1a000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <open64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #106496	; 0x1a000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <malloc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #106496	; 0x1a000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__libc_start_main@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #106496	; 0x1a000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__freading@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #106496	; 0x1a000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__gmon_start__@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #106496	; 0x1a000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <getopt_long@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #106496	; 0x1a000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <__ctype_b_loc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #106496	; 0x1a000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #106496	; 0x1a000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #106496	; 0x1a000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <openat64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #106496	; 0x1a000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <fchmodat@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #106496	; 0x1a000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <__errno_location@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #106496	; 0x1a000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__sprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #106496	; 0x1a000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <__cxa_atexit@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #106496	; 0x1a000
   11088:	ldr	pc, [ip, #28]!

0001108c <memset@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #106496	; 0x1a000
   11094:	ldr	pc, [ip, #20]!

00011098 <__printf_chk@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #106496	; 0x1a000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fileno@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #106496	; 0x1a000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <__fprintf_chk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #102400	; 0x19000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <fclose@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #102400	; 0x19000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <fseeko64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #102400	; 0x19000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <fcntl64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #102400	; 0x19000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <setlocale@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #102400	; 0x19000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <strrchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #102400	; 0x19000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <nl_langinfo@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #102400	; 0x19000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <readdir64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #102400	; 0x19000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <fdopendir@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #102400	; 0x19000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <dirfd@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #102400	; 0x19000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <fchdir@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #102400	; 0x19000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <qsort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #102400	; 0x19000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #102400	; 0x19000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <umask@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #102400	; 0x19000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

00011158 <chmod@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #102400	; 0x19000
   11160:	ldr	pc, [ip, #3980]!	; 0xf8c

00011164 <__xstat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #102400	; 0x19000
   1116c:	ldr	pc, [ip, #3972]!	; 0xf84

00011170 <strncmp@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #102400	; 0x19000
   11178:	ldr	pc, [ip, #3964]!	; 0xf7c

0001117c <abort@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #102400	; 0x19000
   11184:	ldr	pc, [ip, #3956]!	; 0xf74

00011188 <close@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #102400	; 0x19000
   11190:	ldr	pc, [ip, #3948]!	; 0xf6c

00011194 <__lxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #102400	; 0x19000
   1119c:	ldr	pc, [ip, #3940]!	; 0xf64

000111a0 <closedir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #102400	; 0x19000
   111a8:	ldr	pc, [ip, #3932]!	; 0xf5c

000111ac <__assert_fail@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #102400	; 0x19000
   111b4:	ldr	pc, [ip, #3924]!	; 0xf54

Disassembly of section .text:

000111b8 <.text>:
   111b8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   111bc:	mov	r5, r1
   111c0:	movw	r4, #41488	; 0xa210
   111c4:	movt	r4, #1
   111c8:	strd	r6, [sp, #8]
   111cc:	mov	r6, r0
   111d0:	strd	r8, [sp, #16]
   111d4:	movw	r9, #45336	; 0xb118
   111d8:	movt	r9, #2
   111dc:	strd	sl, [sp, #24]
   111e0:	mov	sl, #0
   111e4:	movw	fp, #45448	; 0xb188
   111e8:	movt	fp, #2
   111ec:	str	lr, [sp, #32]
   111f0:	sub	sp, sp, #164	; 0xa4
   111f4:	ldr	r7, [pc, #3296]	; 11edc <__assert_fail@plt+0xd30>
   111f8:	mov	r8, sl
   111fc:	str	sl, [sp, #16]
   11200:	ldr	r0, [r1]
   11204:	str	sl, [sp, #20]
   11208:	str	sl, [sp, #40]	; 0x28
   1120c:	bl	16284 <__assert_fail@plt+0x50d8>
   11210:	movw	r1, #40544	; 0x9e60
   11214:	movt	r1, #1
   11218:	str	sl, [sp, #24]
   1121c:	mov	r0, #6
   11220:	bl	110e0 <setlocale@plt>
   11224:	movw	r1, #41432	; 0xa1d8
   11228:	movt	r1, #1
   1122c:	movw	r0, #41264	; 0xa130
   11230:	movt	r0, #1
   11234:	bl	11140 <bindtextdomain@plt>
   11238:	movw	r0, #41264	; 0xa130
   1123c:	movt	r0, #1
   11240:	bl	10f6c <textdomain@plt>
   11244:	movw	r0, #9124	; 0x23a4
   11248:	movt	r0, #1
   1124c:	bl	19c34 <__assert_fail@plt+0x8a88>
   11250:	strb	sl, [fp]
   11254:	strb	sl, [fp, #1]
   11258:	strb	sl, [fp, #2]
   1125c:	mov	sl, #0
   11260:	mov	r3, r7
   11264:	mov	r2, r4
   11268:	mov	r1, r5
   1126c:	mov	r0, r6
   11270:	str	sl, [sp]
   11274:	bl	11020 <getopt_long@plt>
   11278:	cmn	r0, #1
   1127c:	beq	11498 <__assert_fail@plt+0x2ec>
   11280:	cmp	r0, #99	; 0x63
   11284:	beq	1145c <__assert_fail@plt+0x2b0>
   11288:	ble	112cc <__assert_fail@plt+0x120>
   1128c:	cmp	r0, #118	; 0x76
   11290:	beq	11454 <__assert_fail@plt+0x2a8>
   11294:	ble	1134c <__assert_fail@plt+0x1a0>
   11298:	cmp	r0, #256	; 0x100
   1129c:	beq	1144c <__assert_fail@plt+0x2a0>
   112a0:	ble	1133c <__assert_fail@plt+0x190>
   112a4:	movw	r3, #257	; 0x101
   112a8:	cmp	r0, r3
   112ac:	beq	11440 <__assert_fail@plt+0x294>
   112b0:	movw	r3, #258	; 0x102
   112b4:	cmp	r0, r3
   112b8:	bne	11344 <__assert_fail@plt+0x198>
   112bc:	movw	r3, #45440	; 0xb180
   112c0:	movt	r3, #2
   112c4:	ldr	r8, [r3]
   112c8:	b	1125c <__assert_fail@plt+0xb0>
   112cc:	cmp	r0, #55	; 0x37
   112d0:	bgt	1140c <__assert_fail@plt+0x260>
   112d4:	cmp	r0, #48	; 0x30
   112d8:	bge	11370 <__assert_fail@plt+0x1c4>
   112dc:	cmn	r0, #2
   112e0:	beq	11468 <__assert_fail@plt+0x2bc>
   112e4:	bgt	113fc <__assert_fail@plt+0x250>
   112e8:	cmn	r0, #3
   112ec:	bne	11344 <__assert_fail@plt+0x198>
   112f0:	movw	r1, #41456	; 0xa1f0
   112f4:	movt	r1, #1
   112f8:	movw	r2, #41472	; 0xa200
   112fc:	movt	r2, #1
   11300:	movw	r3, #45340	; 0xb11c
   11304:	movt	r3, #2
   11308:	movw	r0, #45436	; 0xb17c
   1130c:	movt	r0, #2
   11310:	str	r2, [sp]
   11314:	movw	r2, #41260	; 0xa12c
   11318:	movt	r2, #1
   1131c:	stmib	sp, {r1, sl}
   11320:	movw	r1, #40256	; 0x9d40
   11324:	movt	r1, #1
   11328:	ldr	r0, [r0]
   1132c:	ldr	r3, [r3]
   11330:	bl	18ac8 <__assert_fail@plt+0x791c>
   11334:	mov	r0, sl
   11338:	bl	11038 <exit@plt>
   1133c:	cmp	r0, #120	; 0x78
   11340:	ble	11370 <__assert_fail@plt+0x1c4>
   11344:	mov	r0, #1
   11348:	bl	11fd4 <__assert_fail@plt+0xe28>
   1134c:	cmp	r0, #111	; 0x6f
   11350:	beq	11370 <__assert_fail@plt+0x1c4>
   11354:	bgt	113f0 <__assert_fail@plt+0x244>
   11358:	cmp	r0, #102	; 0x66
   1135c:	moveq	r3, #1
   11360:	strbeq	r3, [fp, #1]
   11364:	beq	1125c <__assert_fail@plt+0xb0>
   11368:	cmp	r0, #103	; 0x67
   1136c:	bne	11344 <__assert_fail@plt+0x198>
   11370:	movw	r3, #45424	; 0xb170
   11374:	movt	r3, #2
   11378:	ldr	r2, [sp, #20]
   1137c:	ldr	r3, [r3]
   11380:	mov	sl, r2
   11384:	cmp	r2, #0
   11388:	addne	sl, sl, #1
   1138c:	sub	r3, r3, #-1073741823	; 0xc0000001
   11390:	ldr	r3, [r5, r3, lsl #2]
   11394:	str	sl, [sp, #28]
   11398:	mov	r0, r3
   1139c:	str	r3, [sp, #32]
   113a0:	bl	11044 <strlen@plt>
   113a4:	add	sl, r0, sl
   113a8:	mov	r2, r0
   113ac:	ldr	r3, [sp, #32]
   113b0:	ldr	r1, [sp, #40]	; 0x28
   113b4:	cmp	r1, sl
   113b8:	bls	11470 <__assert_fail@plt+0x2c4>
   113bc:	mov	r1, r3
   113c0:	ldr	lr, [sp, #20]
   113c4:	mov	ip, #44	; 0x2c
   113c8:	add	r2, r2, #1
   113cc:	str	sl, [sp, #20]
   113d0:	ldr	r3, [sp, #24]
   113d4:	ldr	r0, [sp, #28]
   113d8:	strb	ip, [r3, lr]
   113dc:	add	r0, r3, r0
   113e0:	bl	10f24 <memcpy@plt>
   113e4:	mov	r3, #1
   113e8:	strb	r3, [fp]
   113ec:	b	1125c <__assert_fail@plt+0xb0>
   113f0:	cmp	r0, #114	; 0x72
   113f4:	blt	11344 <__assert_fail@plt+0x198>
   113f8:	b	11370 <__assert_fail@plt+0x1c4>
   113fc:	sub	r0, r0, #43	; 0x2b
   11400:	cmp	r0, #1
   11404:	bhi	11344 <__assert_fail@plt+0x198>
   11408:	b	11370 <__assert_fail@plt+0x1c4>
   1140c:	cmp	r0, #82	; 0x52
   11410:	moveq	r3, #1
   11414:	strbeq	r3, [fp, #2]
   11418:	beq	1125c <__assert_fail@plt+0xb0>
   1141c:	ble	11434 <__assert_fail@plt+0x288>
   11420:	cmp	r0, #88	; 0x58
   11424:	beq	11370 <__assert_fail@plt+0x1c4>
   11428:	cmp	r0, #97	; 0x61
   1142c:	bne	11344 <__assert_fail@plt+0x198>
   11430:	b	11370 <__assert_fail@plt+0x1c4>
   11434:	cmp	r0, #61	; 0x3d
   11438:	bne	11344 <__assert_fail@plt+0x198>
   1143c:	b	11370 <__assert_fail@plt+0x1c4>
   11440:	mov	r3, #1
   11444:	str	r3, [sp, #16]
   11448:	b	1125c <__assert_fail@plt+0xb0>
   1144c:	str	sl, [sp, #16]
   11450:	b	1125c <__assert_fail@plt+0xb0>
   11454:	str	sl, [r9]
   11458:	b	1125c <__assert_fail@plt+0xb0>
   1145c:	mov	r3, #1
   11460:	str	r3, [r9]
   11464:	b	1125c <__assert_fail@plt+0xb0>
   11468:	mov	r0, sl
   1146c:	bl	11fd4 <__assert_fail@plt+0xe28>
   11470:	add	ip, sl, #1
   11474:	add	r1, sp, #40	; 0x28
   11478:	ldr	r0, [sp, #24]
   1147c:	str	r2, [sp, #36]	; 0x24
   11480:	str	ip, [sp, #40]	; 0x28
   11484:	bl	18dc8 <__assert_fail@plt+0x7c1c>
   11488:	str	r0, [sp, #24]
   1148c:	ldr	r3, [sp, #32]
   11490:	ldr	r2, [sp, #36]	; 0x24
   11494:	b	113bc <__assert_fail@plt+0x210>
   11498:	cmp	r8, sl
   1149c:	ldr	r3, [sp, #24]
   114a0:	beq	11968 <__assert_fail@plt+0x7bc>
   114a4:	cmp	r3, sl
   114a8:	beq	114d4 <__assert_fail@plt+0x328>
   114ac:	mov	r2, #5
   114b0:	mov	r0, sl
   114b4:	movw	r1, #41556	; 0xa254
   114b8:	movt	r1, #1
   114bc:	bl	10f54 <dcgettext@plt>
   114c0:	mov	r2, r0
   114c4:	mov	r1, sl
   114c8:	mov	r0, sl
   114cc:	bl	10fd8 <error@plt>
   114d0:	b	11344 <__assert_fail@plt+0x198>
   114d4:	movw	r4, #45424	; 0xb170
   114d8:	movt	r4, #2
   114dc:	ldr	r3, [r4]
   114e0:	cmp	r6, r3
   114e4:	ble	1199c <__assert_fail@plt+0x7f0>
   114e8:	mov	r0, r8
   114ec:	bl	1600c <__assert_fail@plt+0x4e60>
   114f0:	cmp	r0, #0
   114f4:	str	r0, [fp, #4]
   114f8:	beq	11eb4 <__assert_fail@plt+0xd08>
   114fc:	ldrb	r3, [fp, #2]
   11500:	ldr	r2, [sp, #16]
   11504:	ands	r3, r2, r3
   11508:	streq	r3, [fp, #32]
   1150c:	bne	11d44 <__assert_fail@plt+0xb98>
   11510:	movw	r3, #45336	; 0xb118
   11514:	movt	r3, #2
   11518:	ldr	r0, [r4]
   1151c:	mov	r2, #0
   11520:	movw	r1, #1041	; 0x411
   11524:	str	r3, [sp, #16]
   11528:	movw	r3, #42268	; 0xa51c
   1152c:	movt	r3, #1
   11530:	mov	sl, #1
   11534:	str	r3, [sp, #24]
   11538:	movw	r3, #42296	; 0xa538
   1153c:	movt	r3, #1
   11540:	add	r0, r5, r0, lsl #2
   11544:	str	r3, [sp, #36]	; 0x24
   11548:	bl	19094 <__assert_fail@plt+0x7ee8>
   1154c:	mov	r9, r0
   11550:	mov	r0, r9
   11554:	bl	14198 <__assert_fail@plt+0x2fec>
   11558:	subs	r7, r0, #0
   1155c:	beq	119c4 <__assert_fail@plt+0x818>
   11560:	ldrh	r3, [r7, #56]	; 0x38
   11564:	ldr	r4, [r7, #28]
   11568:	sub	r3, r3, #2
   1156c:	cmp	r3, #11
   11570:	ldrls	pc, [pc, r3, lsl #2]
   11574:	b	1160c <__assert_fail@plt+0x460>
   11578:	strdeq	r1, [r1], -r8
   1157c:	andeq	r1, r1, ip, lsl #12
   11580:			; <UNDEFINED> instruction: 0x000115b4
   11584:	andeq	r1, r1, ip, lsl #12
   11588:	andeq	r1, r1, r8, lsr #11
   1158c:	andeq	r1, r1, r0, lsr #17
   11590:	andeq	r1, r1, ip, lsl #12
   11594:	andeq	r1, r1, ip, lsl #12
   11598:	andeq	r1, r1, ip, lsr r8
   1159c:	andeq	r1, r1, ip, lsl #12
   115a0:	andeq	r1, r1, ip, lsl #12
   115a4:	strdeq	r1, [r1], -r4
   115a8:	mov	r5, #1
   115ac:	and	sl, sl, r5
   115b0:	b	11550 <__assert_fail@plt+0x3a4>
   115b4:	ldrb	r5, [fp, #1]
   115b8:	cmp	r5, #0
   115bc:	beq	11b68 <__assert_fail@plt+0x9bc>
   115c0:	ldr	r3, [sp, #16]
   115c4:	ldr	r3, [r3]
   115c8:	cmp	r3, #2
   115cc:	beq	115d8 <__assert_fail@plt+0x42c>
   115d0:	cmp	r3, #0
   115d4:	beq	11a00 <__assert_fail@plt+0x854>
   115d8:	mov	r5, #0
   115dc:	ldrb	r3, [fp, #2]
   115e0:	cmp	r3, #0
   115e4:	beq	118dc <__assert_fail@plt+0x730>
   115e8:	cmp	r5, #1
   115ec:	movls	r5, #0
   115f0:	movhi	r5, #1
   115f4:	b	115ac <__assert_fail@plt+0x400>
   115f8:	mov	r1, r7
   115fc:	mov	r0, r9
   11600:	bl	190ec <__assert_fail@plt+0x7f40>
   11604:	cmp	r0, #0
   11608:	bne	11cb8 <__assert_fail@plt+0xb0c>
   1160c:	ldr	ip, [fp, #32]
   11610:	cmp	ip, #0
   11614:	beq	1162c <__assert_fail@plt+0x480>
   11618:	ldrd	r2, [ip]
   1161c:	ldrd	r0, [r7, #160]	; 0xa0
   11620:	cmp	r1, r3
   11624:	cmpeq	r0, r2
   11628:	beq	11a24 <__assert_fail@plt+0x878>
   1162c:	ldr	r6, [r7, #80]	; 0x50
   11630:	and	r1, r6, #61440	; 0xf000
   11634:	cmp	r1, #40960	; 0xa000
   11638:	beq	118f0 <__assert_fail@plt+0x744>
   1163c:	mov	r5, #0
   11640:	sub	r1, r1, #16384	; 0x4000
   11644:	ldr	r8, [r7, #24]
   11648:	clz	r1, r1
   1164c:	mov	r0, r6
   11650:	lsr	r1, r1, #5
   11654:	str	r5, [sp]
   11658:	ldr	r3, [fp, #4]
   1165c:	ldr	r2, [fp, #8]
   11660:	bl	16068 <__assert_fail@plt+0x4ebc>
   11664:	mov	r2, r0
   11668:	mov	r3, r5
   1166c:	ldr	r0, [r9, #32]
   11670:	mov	r1, r8
   11674:	str	r2, [sp, #20]
   11678:	bl	12490 <__assert_fail@plt+0x12e4>
   1167c:	cmp	r0, #0
   11680:	bne	11ac8 <__assert_fail@plt+0x91c>
   11684:	ldr	r3, [sp, #16]
   11688:	ldr	r3, [r3]
   1168c:	cmp	r3, #2
   11690:	moveq	r5, #4
   11694:	beq	11744 <__assert_fail@plt+0x598>
   11698:	ldr	r3, [sp, #20]
   1169c:	tst	r3, #3584	; 0xe00
   116a0:	ldreq	r3, [sp, #20]
   116a4:	bne	11adc <__assert_fail@plt+0x930>
   116a8:	eor	r3, r3, r6
   116ac:	ubfx	r3, r3, #0, #12
   116b0:	cmp	r3, #0
   116b4:	beq	11b50 <__assert_fail@plt+0x9a4>
   116b8:	ubfx	r3, r6, #0, #12
   116bc:	mov	r1, r4
   116c0:	mov	r0, #4
   116c4:	mov	r5, #0
   116c8:	str	r3, [sp, #28]
   116cc:	bl	182c0 <__assert_fail@plt+0x7114>
   116d0:	mov	r8, r0
   116d4:	ldr	r0, [sp, #20]
   116d8:	add	r1, sp, #44	; 0x2c
   116dc:	ubfx	r3, r0, #0, #12
   116e0:	str	r3, [sp, #32]
   116e4:	bl	125d4 <__assert_fail@plt+0x1428>
   116e8:	add	r1, sp, #56	; 0x38
   116ec:	mov	r0, r6
   116f0:	strb	r5, [sp, #54]	; 0x36
   116f4:	bl	125d4 <__assert_fail@plt+0x1428>
   116f8:	mov	r0, r5
   116fc:	movw	r1, #42352	; 0xa570
   11700:	movt	r1, #1
   11704:	mov	r2, #5
   11708:	strb	r5, [sp, #66]	; 0x42
   1170c:	mov	r5, #4
   11710:	bl	10f54 <dcgettext@plt>
   11714:	add	lr, sp, #45	; 0x2d
   11718:	add	ip, sp, #57	; 0x39
   1171c:	ldr	r3, [sp, #28]
   11720:	mov	r1, r0
   11724:	mov	r0, #1
   11728:	ldr	r2, [sp, #32]
   1172c:	str	ip, [sp]
   11730:	stmib	sp, {r2, lr}
   11734:	mov	r2, r8
   11738:	bl	11098 <__printf_chk@plt>
   1173c:	cmp	r5, #2
   11740:	bls	115dc <__assert_fail@plt+0x430>
   11744:	ldrb	r3, [fp]
   11748:	cmp	r3, #0
   1174c:	beq	115dc <__assert_fail@plt+0x430>
   11750:	and	r1, r6, #61440	; 0xf000
   11754:	mov	r8, #0
   11758:	ldr	r3, [fp, #4]
   1175c:	sub	r1, r1, #16384	; 0x4000
   11760:	mov	r0, r6
   11764:	clz	r1, r1
   11768:	mov	r2, r8
   1176c:	str	r8, [sp]
   11770:	lsr	r1, r1, #5
   11774:	bl	16068 <__assert_fail@plt+0x4ebc>
   11778:	ldr	r3, [sp, #20]
   1177c:	mov	r6, r0
   11780:	bics	r3, r3, r0
   11784:	beq	115dc <__assert_fail@plt+0x430>
   11788:	add	r1, sp, #44	; 0x2c
   1178c:	ldr	r0, [sp, #20]
   11790:	mov	r5, #1
   11794:	bl	125d4 <__assert_fail@plt+0x1428>
   11798:	mov	r0, r6
   1179c:	add	r1, sp, #56	; 0x38
   117a0:	bl	125d4 <__assert_fail@plt+0x1428>
   117a4:	mov	r2, #5
   117a8:	mov	r0, r8
   117ac:	ldr	r1, [sp, #36]	; 0x24
   117b0:	strb	r8, [sp, #54]	; 0x36
   117b4:	strb	r8, [sp, #66]	; 0x42
   117b8:	bl	10f54 <dcgettext@plt>
   117bc:	mov	r6, r0
   117c0:	mov	r2, r4
   117c4:	mov	r1, #3
   117c8:	mov	r0, r8
   117cc:	bl	1839c <__assert_fail@plt+0x71f0>
   117d0:	add	r1, sp, #45	; 0x2d
   117d4:	add	ip, sp, #57	; 0x39
   117d8:	mov	r3, r0
   117dc:	mov	r2, r6
   117e0:	mov	r0, r8
   117e4:	stm	sp, {r1, ip}
   117e8:	mov	r1, r8
   117ec:	bl	10fd8 <error@plt>
   117f0:	b	115dc <__assert_fail@plt+0x430>
   117f4:	ldrb	r5, [fp, #1]
   117f8:	cmp	r5, #0
   117fc:	bne	115c0 <__assert_fail@plt+0x414>
   11800:	mov	r2, #5
   11804:	mov	r0, r5
   11808:	movw	r1, #41764	; 0xa324
   1180c:	movt	r1, #1
   11810:	bl	10f54 <dcgettext@plt>
   11814:	mov	r6, r0
   11818:	mov	r1, r4
   1181c:	mov	r0, #4
   11820:	bl	182c0 <__assert_fail@plt+0x7114>
   11824:	mov	r3, r0
   11828:	mov	r2, r6
   1182c:	mov	r1, r5
   11830:	mov	r0, r5
   11834:	bl	10fd8 <error@plt>
   11838:	b	115c0 <__assert_fail@plt+0x414>
   1183c:	ldr	r3, [r7, #48]	; 0x30
   11840:	cmp	r3, #0
   11844:	bne	11854 <__assert_fail@plt+0x6a8>
   11848:	ldr	r3, [r7, #16]
   1184c:	cmp	r3, #0
   11850:	beq	11e04 <__assert_fail@plt+0xc58>
   11854:	ldrb	r5, [fp, #1]
   11858:	cmp	r5, #0
   1185c:	movweq	r1, #41716	; 0xa2f4
   11860:	movteq	r1, #1
   11864:	bne	115c0 <__assert_fail@plt+0x414>
   11868:	ldr	r6, [r7, #32]
   1186c:	mov	r2, #5
   11870:	mov	r0, r5
   11874:	bl	10f54 <dcgettext@plt>
   11878:	mov	r8, r0
   1187c:	mov	r1, r4
   11880:	mov	r0, #4
   11884:	bl	182c0 <__assert_fail@plt+0x7114>
   11888:	mov	r3, r0
   1188c:	mov	r2, r8
   11890:	mov	r1, r6
   11894:	mov	r0, r5
   11898:	bl	10fd8 <error@plt>
   1189c:	b	115c0 <__assert_fail@plt+0x414>
   118a0:	ldrb	r5, [fp, #1]
   118a4:	cmp	r5, #0
   118a8:	bne	115c0 <__assert_fail@plt+0x414>
   118ac:	ldr	r6, [r7, #32]
   118b0:	mov	r2, r4
   118b4:	mov	r1, #3
   118b8:	mov	r0, r5
   118bc:	bl	1839c <__assert_fail@plt+0x71f0>
   118c0:	mov	r3, r0
   118c4:	movw	r2, #42748	; 0xa6fc
   118c8:	movt	r2, #1
   118cc:	mov	r0, r5
   118d0:	mov	r1, r6
   118d4:	bl	10fd8 <error@plt>
   118d8:	b	115c0 <__assert_fail@plt+0x414>
   118dc:	mov	r1, r7
   118e0:	mov	r2, #4
   118e4:	mov	r0, r9
   118e8:	bl	1484c <__assert_fail@plt+0x36a0>
   118ec:	b	115e8 <__assert_fail@plt+0x43c>
   118f0:	mov	r3, #0
   118f4:	mov	r5, #2
   118f8:	mov	r6, r3
   118fc:	str	r3, [sp, #20]
   11900:	ldr	r3, [sp, #16]
   11904:	ldr	r3, [r3]
   11908:	cmp	r3, #2
   1190c:	beq	115dc <__assert_fail@plt+0x430>
   11910:	cmp	r3, #0
   11914:	bne	115dc <__assert_fail@plt+0x430>
   11918:	mov	r1, r4
   1191c:	mov	r0, #4
   11920:	str	r3, [sp, #28]
   11924:	bl	182c0 <__assert_fail@plt+0x7114>
   11928:	cmp	r5, #0
   1192c:	mov	r8, r0
   11930:	beq	11a10 <__assert_fail@plt+0x864>
   11934:	cmp	r5, #2
   11938:	ldr	r3, [sp, #28]
   1193c:	bne	11bf0 <__assert_fail@plt+0xa44>
   11940:	movw	r1, #42212	; 0xa4e4
   11944:	movt	r1, #1
   11948:	mov	r0, r3
   1194c:	mov	r2, #5
   11950:	bl	10f54 <dcgettext@plt>
   11954:	mov	r1, r0
   11958:	mov	r2, r8
   1195c:	mov	r0, #1
   11960:	bl	11098 <__printf_chk@plt>
   11964:	b	115dc <__assert_fail@plt+0x430>
   11968:	movw	r4, #45424	; 0xb170
   1196c:	movt	r4, #2
   11970:	cmp	r3, #0
   11974:	ldr	r2, [r4]
   11978:	beq	11bcc <__assert_fail@plt+0xa20>
   1197c:	cmp	r6, r2
   11980:	movle	r3, r2
   11984:	bgt	11ba4 <__assert_fail@plt+0x9f8>
   11988:	sub	r3, r3, #-1073741823	; 0xc0000001
   1198c:	ldr	r2, [sp, #24]
   11990:	ldr	r3, [r5, r3, lsl #2]
   11994:	cmp	r3, r2
   11998:	beq	11dc8 <__assert_fail@plt+0xc1c>
   1199c:	mov	r2, #5
   119a0:	movw	r1, #41600	; 0xa280
   119a4:	movt	r1, #1
   119a8:	mov	r0, #0
   119ac:	bl	10f54 <dcgettext@plt>
   119b0:	mov	r1, #0
   119b4:	mov	r2, r0
   119b8:	mov	r0, r1
   119bc:	bl	10fd8 <error@plt>
   119c0:	b	11344 <__assert_fail@plt+0x198>
   119c4:	bl	11068 <__errno_location@plt>
   119c8:	ldr	r5, [r0]
   119cc:	mov	r4, r0
   119d0:	cmp	r5, #0
   119d4:	beq	119e8 <__assert_fail@plt+0x83c>
   119d8:	ldrb	sl, [fp, #1]
   119dc:	cmp	sl, #0
   119e0:	movne	sl, r7
   119e4:	beq	11da0 <__assert_fail@plt+0xbf4>
   119e8:	mov	r0, r9
   119ec:	bl	1400c <__assert_fail@plt+0x2e60>
   119f0:	cmp	r0, #0
   119f4:	bne	11b74 <__assert_fail@plt+0x9c8>
   119f8:	eor	r0, sl, #1
   119fc:	bl	11038 <exit@plt>
   11a00:	mov	r1, r4
   11a04:	mov	r0, #4
   11a08:	bl	182c0 <__assert_fail@plt+0x7114>
   11a0c:	mov	r8, r0
   11a10:	mov	r0, #0
   11a14:	mov	r2, #5
   11a18:	ldr	r1, [sp, #24]
   11a1c:	mov	r5, r0
   11a20:	b	11950 <__assert_fail@plt+0x7a4>
   11a24:	ldrd	r0, [ip, #8]
   11a28:	ldrd	r2, [r7, #64]	; 0x40
   11a2c:	cmp	r3, r1
   11a30:	cmpeq	r2, r0
   11a34:	bne	1162c <__assert_fail@plt+0x480>
   11a38:	movw	r1, #41696	; 0xa2e0
   11a3c:	movt	r1, #1
   11a40:	mov	r0, r4
   11a44:	bl	10ee8 <strcmp@plt>
   11a48:	subs	r5, r0, #0
   11a4c:	bne	11e58 <__assert_fail@plt+0xcac>
   11a50:	mov	r2, #5
   11a54:	movw	r1, #41992	; 0xa408
   11a58:	movt	r1, #1
   11a5c:	bl	10f54 <dcgettext@plt>
   11a60:	mov	r6, r0
   11a64:	mov	r1, r4
   11a68:	mov	r0, #4
   11a6c:	bl	182c0 <__assert_fail@plt+0x7114>
   11a70:	mov	r3, r0
   11a74:	mov	r2, r6
   11a78:	mov	r1, r5
   11a7c:	mov	r0, r5
   11a80:	bl	10fd8 <error@plt>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #42100	; 0xa474
   11a8c:	movt	r1, #1
   11a90:	mov	r0, #0
   11a94:	bl	10f54 <dcgettext@plt>
   11a98:	mov	r1, #0
   11a9c:	mov	r2, r0
   11aa0:	mov	r0, r1
   11aa4:	mov	r5, #0
   11aa8:	bl	10fd8 <error@plt>
   11aac:	mov	r1, r7
   11ab0:	mov	r2, #4
   11ab4:	mov	r0, r9
   11ab8:	bl	1484c <__assert_fail@plt+0x36a0>
   11abc:	mov	r0, r9
   11ac0:	bl	14198 <__assert_fail@plt+0x2fec>
   11ac4:	b	115ac <__assert_fail@plt+0x400>
   11ac8:	ldrb	r5, [fp, #1]
   11acc:	cmp	r5, #0
   11ad0:	beq	11cfc <__assert_fail@plt+0xb50>
   11ad4:	mov	r5, #1
   11ad8:	b	11900 <__assert_fail@plt+0x754>
   11adc:	add	r3, sp, #56	; 0x38
   11ae0:	mov	r2, r8
   11ae4:	str	r0, [sp]
   11ae8:	mov	r0, #3
   11aec:	ldr	r1, [r9, #32]
   11af0:	bl	10f78 <__fxstatat64@plt>
   11af4:	cmp	r0, #0
   11af8:	ldreq	r3, [sp, #72]	; 0x48
   11afc:	beq	116a8 <__assert_fail@plt+0x4fc>
   11b00:	ldrb	r5, [fp, #1]
   11b04:	cmp	r5, #0
   11b08:	bne	11b50 <__assert_fail@plt+0x9a4>
   11b0c:	bl	11068 <__errno_location@plt>
   11b10:	mov	r2, #5
   11b14:	movw	r1, #42180	; 0xa4c4
   11b18:	movt	r1, #1
   11b1c:	ldr	r8, [r0]
   11b20:	mov	r0, r5
   11b24:	bl	10f54 <dcgettext@plt>
   11b28:	mov	r2, r0
   11b2c:	mov	r1, r4
   11b30:	mov	r0, #4
   11b34:	str	r2, [sp, #28]
   11b38:	bl	182c0 <__assert_fail@plt+0x7114>
   11b3c:	mov	r3, r0
   11b40:	mov	r1, r8
   11b44:	ldr	r2, [sp, #28]
   11b48:	mov	r0, r5
   11b4c:	bl	10fd8 <error@plt>
   11b50:	ldr	r3, [sp, #16]
   11b54:	ldr	r8, [r3]
   11b58:	cmp	r8, #0
   11b5c:	beq	11c4c <__assert_fail@plt+0xaa0>
   11b60:	mov	r5, #3
   11b64:	b	11744 <__assert_fail@plt+0x598>
   11b68:	movw	r1, #41736	; 0xa308
   11b6c:	movt	r1, #1
   11b70:	b	11868 <__assert_fail@plt+0x6bc>
   11b74:	ldr	r4, [r4]
   11b78:	mov	r2, #5
   11b7c:	movw	r1, #42332	; 0xa55c
   11b80:	movt	r1, #1
   11b84:	mov	r0, #0
   11b88:	bl	10f54 <dcgettext@plt>
   11b8c:	mov	r2, r0
   11b90:	mov	r0, #0
   11b94:	mov	sl, r0
   11b98:	mov	r1, r4
   11b9c:	bl	10fd8 <error@plt>
   11ba0:	b	119f8 <__assert_fail@plt+0x84c>
   11ba4:	ldr	r0, [sp, #24]
   11ba8:	bl	15c68 <__assert_fail@plt+0x4abc>
   11bac:	cmp	r0, #0
   11bb0:	mov	r6, r0
   11bb4:	str	r0, [fp, #4]
   11bb8:	beq	11e20 <__assert_fail@plt+0xc74>
   11bbc:	mov	r0, #0
   11bc0:	bl	1114c <umask@plt>
   11bc4:	str	r0, [fp, #8]
   11bc8:	b	114fc <__assert_fail@plt+0x350>
   11bcc:	add	r3, r2, #1
   11bd0:	ldr	r2, [r5, r2, lsl #2]
   11bd4:	cmp	r3, r6
   11bd8:	str	r3, [r4]
   11bdc:	str	r2, [sp, #24]
   11be0:	blt	11ba4 <__assert_fail@plt+0x9f8>
   11be4:	cmp	r2, #0
   11be8:	bne	11988 <__assert_fail@plt+0x7dc>
   11bec:	b	1199c <__assert_fail@plt+0x7f0>
   11bf0:	ldr	r5, [sp, #20]
   11bf4:	add	r1, sp, #44	; 0x2c
   11bf8:	str	r3, [sp, #32]
   11bfc:	ubfx	r3, r6, #0, #12
   11c00:	str	r3, [sp, #28]
   11c04:	mov	r0, r5
   11c08:	bl	125d4 <__assert_fail@plt+0x1428>
   11c0c:	ldr	r3, [sp, #32]
   11c10:	add	r1, sp, #56	; 0x38
   11c14:	mov	r0, r6
   11c18:	strb	r3, [sp, #54]	; 0x36
   11c1c:	bl	125d4 <__assert_fail@plt+0x1428>
   11c20:	ldr	r3, [sp, #32]
   11c24:	movw	r1, #42440	; 0xa5c8
   11c28:	movt	r1, #1
   11c2c:	mov	r2, #5
   11c30:	mov	r0, r3
   11c34:	strb	r3, [sp, #66]	; 0x42
   11c38:	bl	10f54 <dcgettext@plt>
   11c3c:	ubfx	r3, r5, #0, #12
   11c40:	mov	r5, #1
   11c44:	str	r3, [sp, #32]
   11c48:	b	11714 <__assert_fail@plt+0x568>
   11c4c:	mov	r1, r4
   11c50:	mov	r0, #4
   11c54:	bl	182c0 <__assert_fail@plt+0x7114>
   11c58:	add	r1, sp, #44	; 0x2c
   11c5c:	str	r0, [sp, #28]
   11c60:	mov	r5, #3
   11c64:	ldr	r0, [sp, #20]
   11c68:	bl	125d4 <__assert_fail@plt+0x1428>
   11c6c:	add	r1, sp, #56	; 0x38
   11c70:	mov	r0, r6
   11c74:	strb	r8, [sp, #54]	; 0x36
   11c78:	bl	125d4 <__assert_fail@plt+0x1428>
   11c7c:	mov	r0, r8
   11c80:	mov	r2, #5
   11c84:	strb	r8, [sp, #66]	; 0x42
   11c88:	movw	r1, #42404	; 0xa5a4
   11c8c:	movt	r1, #1
   11c90:	bl	10f54 <dcgettext@plt>
   11c94:	ldr	r3, [sp, #20]
   11c98:	add	ip, sp, #45	; 0x2d
   11c9c:	mov	r1, r0
   11ca0:	mov	r0, #1
   11ca4:	str	ip, [sp]
   11ca8:	ldr	r2, [sp, #28]
   11cac:	ubfx	r3, r3, #0, #12
   11cb0:	bl	11098 <__printf_chk@plt>
   11cb4:	b	11744 <__assert_fail@plt+0x598>
   11cb8:	mov	r2, #5
   11cbc:	movw	r1, #41804	; 0xa34c
   11cc0:	movt	r1, #1
   11cc4:	mov	r0, #0
   11cc8:	bl	10f54 <dcgettext@plt>
   11ccc:	mov	r5, r0
   11cd0:	mov	r2, r4
   11cd4:	mov	r1, #3
   11cd8:	mov	r0, #0
   11cdc:	bl	1839c <__assert_fail@plt+0x71f0>
   11ce0:	mov	r1, #0
   11ce4:	mov	r3, r0
   11ce8:	mov	r2, r5
   11cec:	mov	r0, r1
   11cf0:	bl	10fd8 <error@plt>
   11cf4:	mov	r5, #0
   11cf8:	b	115ac <__assert_fail@plt+0x400>
   11cfc:	bl	11068 <__errno_location@plt>
   11d00:	mov	r2, #5
   11d04:	movw	r1, #42152	; 0xa4a8
   11d08:	movt	r1, #1
   11d0c:	ldr	r8, [r0]
   11d10:	mov	r0, r5
   11d14:	bl	10f54 <dcgettext@plt>
   11d18:	mov	r2, r0
   11d1c:	mov	r1, r4
   11d20:	mov	r0, #4
   11d24:	str	r2, [sp, #28]
   11d28:	bl	182c0 <__assert_fail@plt+0x7114>
   11d2c:	mov	r3, r0
   11d30:	mov	r1, r8
   11d34:	ldr	r2, [sp, #28]
   11d38:	mov	r0, r5
   11d3c:	bl	10fd8 <error@plt>
   11d40:	b	11ad4 <__assert_fail@plt+0x928>
   11d44:	ldr	r0, [pc, #404]	; 11ee0 <__assert_fail@plt+0xd34>
   11d48:	bl	1858c <__assert_fail@plt+0x73e0>
   11d4c:	cmp	r0, #0
   11d50:	mov	r6, r0
   11d54:	str	r0, [fp, #32]
   11d58:	bne	11510 <__assert_fail@plt+0x364>
   11d5c:	bl	11068 <__errno_location@plt>
   11d60:	movw	r1, #41644	; 0xa2ac
   11d64:	movt	r1, #1
   11d68:	ldr	r4, [r0]
   11d6c:	mov	r2, #5
   11d70:	mov	r0, r6
   11d74:	bl	10f54 <dcgettext@plt>
   11d78:	mov	r5, r0
   11d7c:	movw	r1, #41696	; 0xa2e0
   11d80:	movt	r1, #1
   11d84:	mov	r0, #4
   11d88:	bl	182c0 <__assert_fail@plt+0x7114>
   11d8c:	mov	r3, r0
   11d90:	mov	r2, r5
   11d94:	mov	r1, r4
   11d98:	mov	r0, #1
   11d9c:	bl	10fd8 <error@plt>
   11da0:	mov	r2, #5
   11da4:	mov	r0, sl
   11da8:	movw	r1, #41700	; 0xa2e4
   11dac:	movt	r1, #1
   11db0:	bl	10f54 <dcgettext@plt>
   11db4:	mov	r2, r0
   11db8:	mov	r1, r5
   11dbc:	mov	r0, sl
   11dc0:	bl	10fd8 <error@plt>
   11dc4:	b	119e8 <__assert_fail@plt+0x83c>
   11dc8:	mov	r2, #5
   11dcc:	movw	r1, #41616	; 0xa290
   11dd0:	movt	r1, #1
   11dd4:	mov	r0, #0
   11dd8:	bl	10f54 <dcgettext@plt>
   11ddc:	sub	r6, r6, #-1073741823	; 0xc0000001
   11de0:	mov	r4, r0
   11de4:	ldr	r0, [r5, r6, lsl #2]
   11de8:	bl	18574 <__assert_fail@plt+0x73c8>
   11dec:	mov	r1, #0
   11df0:	mov	r3, r0
   11df4:	mov	r2, r4
   11df8:	mov	r0, r1
   11dfc:	bl	10fd8 <error@plt>
   11e00:	b	11344 <__assert_fail@plt+0x198>
   11e04:	mov	r5, #1
   11e08:	mov	r1, r7
   11e0c:	mov	r2, r5
   11e10:	mov	r0, r9
   11e14:	str	r5, [r7, #16]
   11e18:	bl	1484c <__assert_fail@plt+0x36a0>
   11e1c:	b	115ac <__assert_fail@plt+0x400>
   11e20:	mov	r2, #5
   11e24:	movw	r1, #41676	; 0xa2cc
   11e28:	movt	r1, #1
   11e2c:	bl	10f54 <dcgettext@plt>
   11e30:	mov	r4, r0
   11e34:	ldr	r0, [sp, #24]
   11e38:	bl	18574 <__assert_fail@plt+0x73c8>
   11e3c:	mov	r3, r0
   11e40:	mov	r2, r4
   11e44:	mov	r0, r6
   11e48:	mov	r1, r6
   11e4c:	bl	10fd8 <error@plt>
   11e50:	mov	r0, #1
   11e54:	bl	11fd4 <__assert_fail@plt+0xe28>
   11e58:	mov	r2, #5
   11e5c:	movw	r1, #42040	; 0xa438
   11e60:	movt	r1, #1
   11e64:	mov	r0, #0
   11e68:	bl	10f54 <dcgettext@plt>
   11e6c:	mov	r5, r0
   11e70:	mov	r2, r4
   11e74:	mov	r1, #4
   11e78:	mov	r0, #0
   11e7c:	bl	18234 <__assert_fail@plt+0x7088>
   11e80:	mov	r4, r0
   11e84:	mov	r1, #4
   11e88:	movw	r2, #41696	; 0xa2e0
   11e8c:	movt	r2, #1
   11e90:	mov	r0, #1
   11e94:	bl	18234 <__assert_fail@plt+0x7088>
   11e98:	mov	r1, #0
   11e9c:	mov	r3, r4
   11ea0:	str	r0, [sp]
   11ea4:	mov	r2, r5
   11ea8:	mov	r0, r1
   11eac:	bl	10fd8 <error@plt>
   11eb0:	b	11a84 <__assert_fail@plt+0x8d8>
   11eb4:	bl	11068 <__errno_location@plt>
   11eb8:	movw	r1, #41644	; 0xa2ac
   11ebc:	movt	r1, #1
   11ec0:	ldr	r4, [r0]
   11ec4:	mov	r2, #5
   11ec8:	ldr	r0, [sp, #24]
   11ecc:	bl	10f54 <dcgettext@plt>
   11ed0:	mov	r5, r0
   11ed4:	mov	r1, r8
   11ed8:	b	11d84 <__assert_fail@plt+0xbd8>
   11edc:	muleq	r1, r0, ip
   11ee0:	muleq	r2, r8, r1
   11ee4:	mov	fp, #0
   11ee8:	mov	lr, #0
   11eec:	pop	{r1}		; (ldr r1, [sp], #4)
   11ef0:	mov	r2, sp
   11ef4:	push	{r2}		; (str r2, [sp, #-4]!)
   11ef8:	push	{r0}		; (str r0, [sp, #-4]!)
   11efc:	ldr	ip, [pc, #16]	; 11f14 <__assert_fail@plt+0xd68>
   11f00:	push	{ip}		; (str ip, [sp, #-4]!)
   11f04:	ldr	r0, [pc, #12]	; 11f18 <__assert_fail@plt+0xd6c>
   11f08:	ldr	r3, [pc, #12]	; 11f1c <__assert_fail@plt+0xd70>
   11f0c:	bl	10ffc <__libc_start_main@plt>
   11f10:	bl	1117c <abort@plt>
   11f14:	andeq	r9, r1, r0, lsr ip
   11f18:			; <UNDEFINED> instruction: 0x000111b8
   11f1c:	ldrdeq	r9, [r1], -r0
   11f20:	ldr	r3, [pc, #20]	; 11f3c <__assert_fail@plt+0xd90>
   11f24:	ldr	r2, [pc, #20]	; 11f40 <__assert_fail@plt+0xd94>
   11f28:	add	r3, pc, r3
   11f2c:	ldr	r2, [r3, r2]
   11f30:	cmp	r2, #0
   11f34:	bxeq	lr
   11f38:	b	11014 <__gmon_start__@plt>
   11f3c:	ldrdeq	r9, [r1], -r0
   11f40:	andeq	r0, r0, ip, lsl #2
   11f44:	ldr	r0, [pc, #24]	; 11f64 <__assert_fail@plt+0xdb8>
   11f48:	ldr	r3, [pc, #24]	; 11f68 <__assert_fail@plt+0xdbc>
   11f4c:	cmp	r3, r0
   11f50:	bxeq	lr
   11f54:	ldr	r3, [pc, #16]	; 11f6c <__assert_fail@plt+0xdc0>
   11f58:	cmp	r3, #0
   11f5c:	bxeq	lr
   11f60:	bx	r3
   11f64:	andeq	fp, r2, r4, ror #2
   11f68:	andeq	fp, r2, r4, ror #2
   11f6c:	andeq	r0, r0, r0
   11f70:	ldr	r0, [pc, #36]	; 11f9c <__assert_fail@plt+0xdf0>
   11f74:	ldr	r1, [pc, #36]	; 11fa0 <__assert_fail@plt+0xdf4>
   11f78:	sub	r1, r1, r0
   11f7c:	asr	r1, r1, #2
   11f80:	add	r1, r1, r1, lsr #31
   11f84:	asrs	r1, r1, #1
   11f88:	bxeq	lr
   11f8c:	ldr	r3, [pc, #16]	; 11fa4 <__assert_fail@plt+0xdf8>
   11f90:	cmp	r3, #0
   11f94:	bxeq	lr
   11f98:	bx	r3
   11f9c:	andeq	fp, r2, r4, ror #2
   11fa0:	andeq	fp, r2, r4, ror #2
   11fa4:	andeq	r0, r0, r0
   11fa8:	push	{r4, lr}
   11fac:	ldr	r4, [pc, #24]	; 11fcc <__assert_fail@plt+0xe20>
   11fb0:	ldrb	r3, [r4]
   11fb4:	cmp	r3, #0
   11fb8:	popne	{r4, pc}
   11fbc:	bl	11f44 <__assert_fail@plt+0xd98>
   11fc0:	mov	r3, #1
   11fc4:	strb	r3, [r4]
   11fc8:	pop	{r4, pc}
   11fcc:	andeq	fp, r2, r4, lsl #3
   11fd0:	b	11f70 <__assert_fail@plt+0xdc4>
   11fd4:	subs	r6, r0, #0
   11fd8:	str	r7, [sp, #-8]!
   11fdc:	str	lr, [sp, #4]
   11fe0:	sub	sp, sp, #64	; 0x40
   11fe4:	beq	1202c <__assert_fail@plt+0xe80>
   11fe8:	movw	r3, #45432	; 0xb178
   11fec:	movt	r3, #2
   11ff0:	ldr	r4, [r3]
   11ff4:	mov	r2, #5
   11ff8:	movw	r1, #40264	; 0x9d48
   11ffc:	movt	r1, #1
   12000:	mov	r0, #0
   12004:	bl	10f54 <dcgettext@plt>
   12008:	movw	r3, #45492	; 0xb1b4
   1200c:	movt	r3, #2
   12010:	mov	r2, r0
   12014:	mov	r1, #1
   12018:	ldr	r3, [r3]
   1201c:	mov	r0, r4
   12020:	bl	110b0 <__fprintf_chk@plt>
   12024:	mov	r0, r6
   12028:	bl	11038 <exit@plt>
   1202c:	mov	r2, #5
   12030:	movw	r1, #40304	; 0x9d70
   12034:	movt	r1, #1
   12038:	movw	r7, #45436	; 0xb17c
   1203c:	movt	r7, #2
   12040:	bl	10f54 <dcgettext@plt>
   12044:	movw	r3, #45492	; 0xb1b4
   12048:	movt	r3, #2
   1204c:	ldr	ip, [r3]
   12050:	mov	r1, r0
   12054:	mov	r0, #1
   12058:	mov	r3, ip
   1205c:	mov	r2, ip
   12060:	str	ip, [sp]
   12064:	bl	11098 <__printf_chk@plt>
   12068:	mov	r2, #5
   1206c:	movw	r1, #40440	; 0x9df8
   12070:	movt	r1, #1
   12074:	mov	r0, r6
   12078:	bl	10f54 <dcgettext@plt>
   1207c:	ldr	r1, [r7]
   12080:	bl	10ed0 <fputs_unlocked@plt>
   12084:	mov	r2, #5
   12088:	movw	r1, #40548	; 0x9e64
   1208c:	movt	r1, #1
   12090:	mov	r0, r6
   12094:	bl	10f54 <dcgettext@plt>
   12098:	ldr	r1, [r7]
   1209c:	bl	10ed0 <fputs_unlocked@plt>
   120a0:	mov	r2, #5
   120a4:	movw	r1, #40752	; 0x9f30
   120a8:	movt	r1, #1
   120ac:	mov	r0, r6
   120b0:	bl	10f54 <dcgettext@plt>
   120b4:	ldr	r1, [r7]
   120b8:	bl	10ed0 <fputs_unlocked@plt>
   120bc:	mov	r2, #5
   120c0:	movw	r1, #40880	; 0x9fb0
   120c4:	movt	r1, #1
   120c8:	mov	r0, r6
   120cc:	bl	10f54 <dcgettext@plt>
   120d0:	ldr	r1, [r7]
   120d4:	bl	10ed0 <fputs_unlocked@plt>
   120d8:	mov	r2, #5
   120dc:	movw	r1, #40948	; 0x9ff4
   120e0:	movt	r1, #1
   120e4:	mov	r0, r6
   120e8:	bl	10f54 <dcgettext@plt>
   120ec:	ldr	r1, [r7]
   120f0:	bl	10ed0 <fputs_unlocked@plt>
   120f4:	mov	r2, #5
   120f8:	movw	r1, #41016	; 0xa038
   120fc:	movt	r1, #1
   12100:	mov	r0, r6
   12104:	bl	10f54 <dcgettext@plt>
   12108:	ldr	r1, [r7]
   1210c:	bl	10ed0 <fputs_unlocked@plt>
   12110:	mov	r2, #5
   12114:	movw	r1, #41064	; 0xa068
   12118:	movt	r1, #1
   1211c:	mov	r0, r6
   12120:	bl	10f54 <dcgettext@plt>
   12124:	ldr	r1, [r7]
   12128:	bl	10ed0 <fputs_unlocked@plt>
   1212c:	mov	r2, #5
   12130:	movw	r1, #41120	; 0xa0a0
   12134:	movt	r1, #1
   12138:	mov	r0, r6
   1213c:	bl	10f54 <dcgettext@plt>
   12140:	ldr	r1, [r7]
   12144:	bl	10ed0 <fputs_unlocked@plt>
   12148:	movw	lr, #40024	; 0x9c58
   1214c:	movt	lr, #1
   12150:	ldr	ip, [lr]
   12154:	ldr	r4, [lr, #4]
   12158:	ldrd	r8, [lr, #8]
   1215c:	subs	r1, ip, #0
   12160:	str	ip, [sp, #8]
   12164:	ldrd	r2, [lr, #16]
   12168:	str	r4, [sp, #12]
   1216c:	ldrd	r4, [lr, #24]
   12170:	strd	r8, [sp, #16]
   12174:	ldrd	r8, [lr, #32]
   12178:	strd	r2, [sp, #24]
   1217c:	ldrd	r2, [lr, #40]	; 0x28
   12180:	strd	r4, [sp, #32]
   12184:	ldrd	r4, [lr, #48]	; 0x30
   12188:	strd	r8, [sp, #40]	; 0x28
   1218c:	strd	r2, [sp, #48]	; 0x30
   12190:	strd	r4, [sp, #56]	; 0x38
   12194:	movwne	r5, #40256	; 0x9d40
   12198:	add	r4, sp, #8
   1219c:	movtne	r5, #1
   121a0:	bne	12298 <__assert_fail@plt+0x10ec>
   121a4:	ldr	r4, [r4, #4]
   121a8:	movw	r1, #41196	; 0xa0ec
   121ac:	movt	r1, #1
   121b0:	mov	r2, #5
   121b4:	cmp	r4, #0
   121b8:	beq	122ac <__assert_fail@plt+0x1100>
   121bc:	mov	r0, #0
   121c0:	bl	10f54 <dcgettext@plt>
   121c4:	mov	r1, r0
   121c8:	movw	r3, #41220	; 0xa104
   121cc:	movt	r3, #1
   121d0:	movw	r2, #41260	; 0xa12c
   121d4:	movt	r2, #1
   121d8:	mov	r0, #1
   121dc:	bl	11098 <__printf_chk@plt>
   121e0:	mov	r1, #0
   121e4:	mov	r0, #5
   121e8:	bl	110e0 <setlocale@plt>
   121ec:	cmp	r0, #0
   121f0:	movweq	r5, #40256	; 0x9d40
   121f4:	movteq	r5, #1
   121f8:	beq	1221c <__assert_fail@plt+0x1070>
   121fc:	movw	r1, #41276	; 0xa13c
   12200:	movt	r1, #1
   12204:	mov	r2, #3
   12208:	movw	r5, #40256	; 0x9d40
   1220c:	movt	r5, #1
   12210:	bl	11170 <strncmp@plt>
   12214:	cmp	r0, #0
   12218:	bne	12364 <__assert_fail@plt+0x11b8>
   1221c:	mov	r2, #5
   12220:	movw	r1, #41352	; 0xa188
   12224:	movt	r1, #1
   12228:	mov	r0, #0
   1222c:	bl	10f54 <dcgettext@plt>
   12230:	mov	r1, r0
   12234:	movw	r3, #40256	; 0x9d40
   12238:	movt	r3, #1
   1223c:	movw	r2, #41220	; 0xa104
   12240:	movt	r2, #1
   12244:	mov	r0, #1
   12248:	bl	11098 <__printf_chk@plt>
   1224c:	mov	r2, #5
   12250:	movw	r1, #41380	; 0xa1a4
   12254:	movt	r1, #1
   12258:	mov	r0, #0
   1225c:	bl	10f54 <dcgettext@plt>
   12260:	movw	r2, #42508	; 0xa60c
   12264:	movt	r2, #1
   12268:	cmp	r4, r5
   1226c:	movw	r3, #40544	; 0x9e60
   12270:	movt	r3, #1
   12274:	mov	r1, r0
   12278:	moveq	r3, r2
   1227c:	mov	r2, r4
   12280:	mov	r0, #1
   12284:	bl	11098 <__printf_chk@plt>
   12288:	b	12024 <__assert_fail@plt+0xe78>
   1228c:	ldr	r1, [r4, #8]!
   12290:	cmp	r1, #0
   12294:	beq	121a4 <__assert_fail@plt+0xff8>
   12298:	mov	r0, r5
   1229c:	bl	10ee8 <strcmp@plt>
   122a0:	cmp	r0, #0
   122a4:	bne	1228c <__assert_fail@plt+0x10e0>
   122a8:	b	121a4 <__assert_fail@plt+0xff8>
   122ac:	mov	r0, r4
   122b0:	bl	10f54 <dcgettext@plt>
   122b4:	mov	r1, r0
   122b8:	movw	r3, #41220	; 0xa104
   122bc:	movt	r3, #1
   122c0:	movw	r2, #41260	; 0xa12c
   122c4:	movt	r2, #1
   122c8:	mov	r0, #1
   122cc:	bl	11098 <__printf_chk@plt>
   122d0:	mov	r1, r4
   122d4:	mov	r0, #5
   122d8:	bl	110e0 <setlocale@plt>
   122dc:	cmp	r0, #0
   122e0:	beq	122fc <__assert_fail@plt+0x1150>
   122e4:	movw	r1, #41276	; 0xa13c
   122e8:	movt	r1, #1
   122ec:	mov	r2, #3
   122f0:	bl	11170 <strncmp@plt>
   122f4:	cmp	r0, #0
   122f8:	bne	12358 <__assert_fail@plt+0x11ac>
   122fc:	mov	r2, #5
   12300:	movw	r1, #41352	; 0xa188
   12304:	movt	r1, #1
   12308:	mov	r0, #0
   1230c:	bl	10f54 <dcgettext@plt>
   12310:	mov	r1, r0
   12314:	movw	r3, #40256	; 0x9d40
   12318:	movt	r3, #1
   1231c:	movw	r2, #41220	; 0xa104
   12320:	movt	r2, #1
   12324:	mov	r0, #1
   12328:	bl	11098 <__printf_chk@plt>
   1232c:	movw	r1, #41380	; 0xa1a4
   12330:	movt	r1, #1
   12334:	mov	r2, #5
   12338:	mov	r0, #0
   1233c:	bl	10f54 <dcgettext@plt>
   12340:	movw	r4, #40256	; 0x9d40
   12344:	movt	r4, #1
   12348:	movw	r3, #42508	; 0xa60c
   1234c:	movt	r3, #1
   12350:	mov	r1, r0
   12354:	b	1227c <__assert_fail@plt+0x10d0>
   12358:	movw	r5, #40256	; 0x9d40
   1235c:	movt	r5, #1
   12360:	mov	r4, r5
   12364:	mov	r2, #5
   12368:	movw	r1, #41280	; 0xa140
   1236c:	movt	r1, #1
   12370:	mov	r0, #0
   12374:	bl	10f54 <dcgettext@plt>
   12378:	ldr	r1, [r7]
   1237c:	bl	10ed0 <fputs_unlocked@plt>
   12380:	b	1221c <__assert_fail@plt+0x1070>
   12384:	movw	r3, #45484	; 0xb1ac
   12388:	movt	r3, #2
   1238c:	str	r0, [r3]
   12390:	bx	lr
   12394:	movw	r3, #45484	; 0xb1ac
   12398:	movt	r3, #2
   1239c:	strb	r0, [r3, #4]
   123a0:	bx	lr
   123a4:	movw	r3, #45436	; 0xb17c
   123a8:	movt	r3, #2
   123ac:	strd	r4, [sp, #-16]!
   123b0:	ldr	r0, [r3]
   123b4:	str	r6, [sp, #8]
   123b8:	str	lr, [sp, #12]
   123bc:	sub	sp, sp, #8
   123c0:	bl	1922c <__assert_fail@plt+0x8080>
   123c4:	cmp	r0, #0
   123c8:	beq	123f4 <__assert_fail@plt+0x1248>
   123cc:	movw	r4, #45484	; 0xb1ac
   123d0:	movt	r4, #2
   123d4:	ldrb	r6, [r4, #4]
   123d8:	bl	11068 <__errno_location@plt>
   123dc:	mov	r5, r0
   123e0:	cmp	r6, #0
   123e4:	beq	12420 <__assert_fail@plt+0x1274>
   123e8:	ldr	r3, [r0]
   123ec:	cmp	r3, #32
   123f0:	bne	12420 <__assert_fail@plt+0x1274>
   123f4:	movw	r3, #45432	; 0xb178
   123f8:	movt	r3, #2
   123fc:	ldr	r0, [r3]
   12400:	bl	1922c <__assert_fail@plt+0x8080>
   12404:	cmp	r0, #0
   12408:	bne	12468 <__assert_fail@plt+0x12bc>
   1240c:	add	sp, sp, #8
   12410:	ldrd	r4, [sp]
   12414:	ldr	r6, [sp, #8]
   12418:	add	sp, sp, #12
   1241c:	pop	{pc}		; (ldr pc, [sp], #4)
   12420:	movw	r1, #42732	; 0xa6ec
   12424:	movt	r1, #1
   12428:	mov	r2, #5
   1242c:	mov	r0, #0
   12430:	bl	10f54 <dcgettext@plt>
   12434:	mov	r6, r0
   12438:	ldr	r0, [r4]
   1243c:	cmp	r0, #0
   12440:	beq	12478 <__assert_fail@plt+0x12cc>
   12444:	ldr	r4, [r5]
   12448:	bl	18388 <__assert_fail@plt+0x71dc>
   1244c:	mov	r3, r0
   12450:	movw	r2, #42744	; 0xa6f8
   12454:	movt	r2, #1
   12458:	mov	r0, #0
   1245c:	str	r6, [sp]
   12460:	mov	r1, r4
   12464:	bl	10fd8 <error@plt>
   12468:	movw	r3, #45344	; 0xb120
   1246c:	movt	r3, #2
   12470:	ldr	r0, [r3]
   12474:	bl	10f18 <_exit@plt>
   12478:	mov	r3, r6
   1247c:	movw	r2, #42748	; 0xa6fc
   12480:	movt	r2, #1
   12484:	ldr	r1, [r5]
   12488:	bl	10fd8 <error@plt>
   1248c:	b	12468 <__assert_fail@plt+0x12bc>
   12490:	cmp	r3, #256	; 0x100
   12494:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12498:	movne	r4, r3
   1249c:	strd	r6, [sp, #8]
   124a0:	mov	r6, r2
   124a4:	mov	r7, r0
   124a8:	strd	r8, [sp, #16]
   124ac:	mov	r8, r1
   124b0:	strd	sl, [sp, #24]
   124b4:	str	lr, [sp, #32]
   124b8:	sub	sp, sp, #148	; 0x94
   124bc:	beq	124f8 <__assert_fail@plt+0x134c>
   124c0:	mov	r3, r4
   124c4:	mov	r2, r6
   124c8:	mov	r1, r8
   124cc:	mov	r0, r7
   124d0:	bl	1105c <fchmodat@plt>
   124d4:	mov	r5, r0
   124d8:	mov	r0, r5
   124dc:	add	sp, sp, #148	; 0x94
   124e0:	ldrd	r4, [sp]
   124e4:	ldrd	r6, [sp, #8]
   124e8:	ldrd	r8, [sp, #16]
   124ec:	ldrd	sl, [sp, #24]
   124f0:	add	sp, sp, #32
   124f4:	pop	{pc}		; (ldr pc, [sp], #4)
   124f8:	mov	r2, #2654208	; 0x288000
   124fc:	bl	11050 <openat64@plt>
   12500:	subs	r5, r0, #0
   12504:	blt	124d8 <__assert_fail@plt+0x132c>
   12508:	mov	r0, #4096	; 0x1000
   1250c:	add	r3, sp, #40	; 0x28
   12510:	mov	r1, r5
   12514:	movw	r2, #40544	; 0x9e60
   12518:	movt	r2, #1
   1251c:	str	r0, [sp]
   12520:	mov	r0, #3
   12524:	bl	10f78 <__fxstatat64@plt>
   12528:	mov	r4, r0
   1252c:	bl	11068 <__errno_location@plt>
   12530:	cmp	r4, #0
   12534:	mov	r9, r0
   12538:	bne	125a4 <__assert_fail@plt+0x13f8>
   1253c:	ldr	r3, [sp, #56]	; 0x38
   12540:	and	r3, r3, #61440	; 0xf000
   12544:	cmp	r3, #40960	; 0xa000
   12548:	beq	125bc <__assert_fail@plt+0x1410>
   1254c:	mov	r2, #26
   12550:	mov	r1, #1
   12554:	str	r5, [sp]
   12558:	movw	r3, #42752	; 0xa700
   1255c:	movt	r3, #1
   12560:	add	r0, sp, #12
   12564:	bl	11074 <__sprintf_chk@plt>
   12568:	mov	r1, r6
   1256c:	add	r0, sp, #12
   12570:	bl	11158 <chmod@plt>
   12574:	mov	sl, r0
   12578:	mov	r0, r5
   1257c:	ldr	fp, [r9]
   12580:	bl	11188 <close@plt>
   12584:	cmp	sl, #0
   12588:	moveq	r5, sl
   1258c:	beq	124d8 <__assert_fail@plt+0x132c>
   12590:	cmp	fp, #2
   12594:	movne	r5, sl
   12598:	strne	fp, [r9]
   1259c:	bne	124d8 <__assert_fail@plt+0x132c>
   125a0:	b	124c0 <__assert_fail@plt+0x1314>
   125a4:	ldr	r4, [r9]
   125a8:	mov	r0, r5
   125ac:	mvn	r5, #0
   125b0:	bl	11188 <close@plt>
   125b4:	str	r4, [r9]
   125b8:	b	124d8 <__assert_fail@plt+0x132c>
   125bc:	mov	r0, r5
   125c0:	mvn	r5, #0
   125c4:	bl	11188 <close@plt>
   125c8:	mov	r3, #95	; 0x5f
   125cc:	str	r3, [r9]
   125d0:	b	124d8 <__assert_fail@plt+0x132c>
   125d4:	and	r3, r0, #61440	; 0xf000
   125d8:	cmp	r3, #32768	; 0x8000
   125dc:	moveq	r2, #45	; 0x2d
   125e0:	beq	1262c <__assert_fail@plt+0x1480>
   125e4:	cmp	r3, #16384	; 0x4000
   125e8:	moveq	r2, #100	; 0x64
   125ec:	beq	1262c <__assert_fail@plt+0x1480>
   125f0:	cmp	r3, #24576	; 0x6000
   125f4:	moveq	r2, #98	; 0x62
   125f8:	beq	1262c <__assert_fail@plt+0x1480>
   125fc:	cmp	r3, #8192	; 0x2000
   12600:	moveq	r2, #99	; 0x63
   12604:	beq	1262c <__assert_fail@plt+0x1480>
   12608:	cmp	r3, #40960	; 0xa000
   1260c:	moveq	r2, #108	; 0x6c
   12610:	beq	1262c <__assert_fail@plt+0x1480>
   12614:	cmp	r3, #4096	; 0x1000
   12618:	moveq	r2, #112	; 0x70
   1261c:	beq	1262c <__assert_fail@plt+0x1480>
   12620:	cmp	r3, #49152	; 0xc000
   12624:	moveq	r2, #115	; 0x73
   12628:	movne	r2, #63	; 0x3f
   1262c:	tst	r0, #256	; 0x100
   12630:	strb	r2, [r1]
   12634:	and	r3, r0, #64	; 0x40
   12638:	movne	ip, #114	; 0x72
   1263c:	moveq	ip, #45	; 0x2d
   12640:	tst	r0, #128	; 0x80
   12644:	movne	r2, #119	; 0x77
   12648:	moveq	r2, #45	; 0x2d
   1264c:	strb	ip, [r1, #1]
   12650:	tst	r0, #2048	; 0x800
   12654:	strb	r2, [r1, #2]
   12658:	beq	126f8 <__assert_fail@plt+0x154c>
   1265c:	cmp	r3, #0
   12660:	movne	r2, #115	; 0x73
   12664:	moveq	r2, #83	; 0x53
   12668:	tst	r0, #32
   1266c:	strb	r2, [r1, #3]
   12670:	and	r3, r0, #8
   12674:	movne	ip, #114	; 0x72
   12678:	moveq	ip, #45	; 0x2d
   1267c:	tst	r0, #16
   12680:	movne	r2, #119	; 0x77
   12684:	moveq	r2, #45	; 0x2d
   12688:	strb	ip, [r1, #4]
   1268c:	tst	r0, #1024	; 0x400
   12690:	strb	r2, [r1, #5]
   12694:	beq	12708 <__assert_fail@plt+0x155c>
   12698:	cmp	r3, #0
   1269c:	movne	r2, #115	; 0x73
   126a0:	moveq	r2, #83	; 0x53
   126a4:	tst	r0, #4
   126a8:	strb	r2, [r1, #6]
   126ac:	and	r3, r0, #1
   126b0:	movne	ip, #114	; 0x72
   126b4:	moveq	ip, #45	; 0x2d
   126b8:	tst	r0, #2
   126bc:	movne	r2, #119	; 0x77
   126c0:	moveq	r2, #45	; 0x2d
   126c4:	strb	ip, [r1, #7]
   126c8:	tst	r0, #512	; 0x200
   126cc:	strb	r2, [r1, #8]
   126d0:	beq	12718 <__assert_fail@plt+0x156c>
   126d4:	cmp	r3, #0
   126d8:	movne	r0, #116	; 0x74
   126dc:	moveq	r0, #84	; 0x54
   126e0:	mov	r2, #32
   126e4:	mov	r3, #0
   126e8:	strb	r0, [r1, #9]
   126ec:	strb	r2, [r1, #10]
   126f0:	strb	r3, [r1, #11]
   126f4:	bx	lr
   126f8:	cmp	r3, #0
   126fc:	movne	r2, #120	; 0x78
   12700:	moveq	r2, #45	; 0x2d
   12704:	b	12668 <__assert_fail@plt+0x14bc>
   12708:	cmp	r3, #0
   1270c:	movne	r2, #120	; 0x78
   12710:	moveq	r2, #45	; 0x2d
   12714:	b	126a4 <__assert_fail@plt+0x14f8>
   12718:	cmp	r3, #0
   1271c:	movne	r0, #120	; 0x78
   12720:	moveq	r0, #45	; 0x2d
   12724:	b	126e0 <__assert_fail@plt+0x1534>
   12728:	ldr	r0, [r0, #16]
   1272c:	b	125d4 <__assert_fail@plt+0x1428>
   12730:	strd	r4, [sp, #-8]!
   12734:	ldrd	r2, [r1, #8]
   12738:	ldrd	r4, [r0, #8]
   1273c:	cmp	r5, r3
   12740:	cmpeq	r4, r2
   12744:	movne	r0, #0
   12748:	bne	12764 <__assert_fail@plt+0x15b8>
   1274c:	ldrd	r4, [r0]
   12750:	ldrd	r2, [r1]
   12754:	cmp	r5, r3
   12758:	cmpeq	r4, r2
   1275c:	moveq	r0, #1
   12760:	movne	r0, #0
   12764:	ldrd	r4, [sp]
   12768:	add	sp, sp, #8
   1276c:	bx	lr
   12770:	mov	r2, r1
   12774:	mov	r3, #0
   12778:	str	r4, [sp, #-8]!
   1277c:	ldrd	r0, [r0, #8]
   12780:	str	lr, [sp, #4]
   12784:	bl	19a5c <__assert_fail@plt+0x88b0>
   12788:	ldr	r4, [sp]
   1278c:	add	sp, sp, #4
   12790:	mov	r0, r2
   12794:	pop	{pc}		; (ldr pc, [sp], #4)
   12798:	mov	r2, r1
   1279c:	mov	r3, #0
   127a0:	str	r4, [sp, #-8]!
   127a4:	ldrd	r0, [r0]
   127a8:	str	lr, [sp, #4]
   127ac:	bl	19a5c <__assert_fail@plt+0x88b0>
   127b0:	ldr	r4, [sp]
   127b4:	add	sp, sp, #4
   127b8:	mov	r0, r2
   127bc:	pop	{pc}		; (ldr pc, [sp], #4)
   127c0:	strd	r4, [sp, #-8]!
   127c4:	ldrd	r2, [r1]
   127c8:	ldrd	r4, [r0]
   127cc:	cmp	r5, r3
   127d0:	cmpeq	r4, r2
   127d4:	ldrd	r4, [sp]
   127d8:	add	sp, sp, #8
   127dc:	moveq	r0, #1
   127e0:	movne	r0, #0
   127e4:	bx	lr
   127e8:	ldr	r2, [r0]
   127ec:	ldr	r3, [r1]
   127f0:	ldrd	r0, [r2, #160]	; 0xa0
   127f4:	ldrd	r2, [r3, #160]	; 0xa0
   127f8:	cmp	r1, r3
   127fc:	cmpeq	r0, r2
   12800:	movhi	r0, #1
   12804:	movls	r0, #0
   12808:	movcc	r3, #1
   1280c:	movcs	r3, #0
   12810:	sub	r0, r0, r3
   12814:	bx	lr
   12818:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1281c:	mov	r5, r2
   12820:	mov	r4, r1
   12824:	ldr	r2, [r0, #40]	; 0x28
   12828:	strd	r6, [sp, #8]
   1282c:	mov	r6, r0
   12830:	str	r8, [sp, #16]
   12834:	str	lr, [sp, #20]
   12838:	ldr	r0, [r0, #8]
   1283c:	cmp	r2, r5
   12840:	ldr	r7, [r6, #44]	; 0x2c
   12844:	bcs	1286c <__assert_fail@plt+0x16c0>
   12848:	add	r1, r5, #40	; 0x28
   1284c:	cmn	r1, #-1073741823	; 0xc0000001
   12850:	str	r1, [r6, #40]	; 0x28
   12854:	bhi	128f4 <__assert_fail@plt+0x1748>
   12858:	lsl	r1, r1, #2
   1285c:	bl	191d4 <__assert_fail@plt+0x8028>
   12860:	cmp	r0, #0
   12864:	strne	r0, [r6, #8]
   12868:	beq	128f0 <__assert_fail@plt+0x1744>
   1286c:	cmp	r4, #0
   12870:	movne	r2, r0
   12874:	beq	12888 <__assert_fail@plt+0x16dc>
   12878:	str	r4, [r2], #4
   1287c:	ldr	r4, [r4, #8]
   12880:	cmp	r4, #0
   12884:	bne	12878 <__assert_fail@plt+0x16cc>
   12888:	mov	r3, r7
   1288c:	mov	r2, #4
   12890:	mov	r1, r5
   12894:	bl	11134 <qsort@plt>
   12898:	ldr	lr, [r6, #8]
   1289c:	subs	r3, r5, #1
   128a0:	ldr	r0, [lr]
   128a4:	moveq	r2, r0
   128a8:	beq	128d4 <__assert_fail@plt+0x1728>
   128ac:	mov	ip, r0
   128b0:	mov	r2, lr
   128b4:	b	128bc <__assert_fail@plt+0x1710>
   128b8:	ldr	ip, [r2]
   128bc:	subs	r3, r3, #1
   128c0:	ldr	r1, [r2, #4]!
   128c4:	str	r1, [ip, #8]
   128c8:	bne	128b8 <__assert_fail@plt+0x170c>
   128cc:	add	r5, lr, r5, lsl #2
   128d0:	ldr	r2, [r5, #-4]
   128d4:	mov	r3, #0
   128d8:	str	r3, [r2, #8]
   128dc:	ldrd	r4, [sp]
   128e0:	ldrd	r6, [sp, #8]
   128e4:	ldr	r8, [sp, #16]
   128e8:	add	sp, sp, #20
   128ec:	pop	{pc}		; (ldr pc, [sp], #4)
   128f0:	ldr	r0, [r6, #8]
   128f4:	bl	19710 <__assert_fail@plt+0x8564>
   128f8:	mov	r3, #0
   128fc:	mov	r0, r4
   12900:	str	r3, [r6, #8]
   12904:	str	r3, [r6, #40]	; 0x28
   12908:	b	128dc <__assert_fail@plt+0x1730>
   1290c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12910:	mov	r5, r2
   12914:	strd	r6, [sp, #8]
   12918:	mov	r6, r0
   1291c:	add	r0, r2, #176	; 0xb0
   12920:	bic	r0, r0, #7
   12924:	mov	r7, r1
   12928:	str	r8, [sp, #16]
   1292c:	str	lr, [sp, #20]
   12930:	bl	19198 <__assert_fail@plt+0x7fec>
   12934:	subs	r4, r0, #0
   12938:	beq	12984 <__assert_fail@plt+0x17d8>
   1293c:	mov	r1, r7
   12940:	mov	r2, r5
   12944:	add	r0, r4, #168	; 0xa8
   12948:	bl	10f24 <memcpy@plt>
   1294c:	ldr	r1, [r6, #24]
   12950:	mov	r3, #0
   12954:	add	r0, r4, r5
   12958:	mov	r2, #3
   1295c:	strb	r3, [r0, #168]	; 0xa8
   12960:	str	r3, [r4, #12]
   12964:	str	r3, [r4, #16]
   12968:	str	r3, [r4, #20]
   1296c:	str	r1, [r4, #28]
   12970:	str	r3, [r4, #32]
   12974:	str	r6, [r4, #44]	; 0x2c
   12978:	str	r5, [r4, #52]	; 0x34
   1297c:	strh	r3, [r4, #58]	; 0x3a
   12980:	strh	r2, [r4, #60]	; 0x3c
   12984:	mov	r0, r4
   12988:	ldrd	r4, [sp]
   1298c:	ldrd	r6, [sp, #8]
   12990:	ldr	r8, [sp, #16]
   12994:	add	sp, sp, #20
   12998:	pop	{pc}		; (ldr pc, [sp], #4)
   1299c:	strd	r4, [sp, #-16]!
   129a0:	subs	r4, r0, #0
   129a4:	str	r6, [sp, #8]
   129a8:	str	lr, [sp, #12]
   129ac:	beq	129d4 <__assert_fail@plt+0x1828>
   129b0:	ldr	r5, [r4, #8]
   129b4:	ldr	r3, [r4, #12]
   129b8:	subs	r0, r3, #0
   129bc:	beq	129c4 <__assert_fail@plt+0x1818>
   129c0:	bl	111a0 <closedir@plt>
   129c4:	mov	r0, r4
   129c8:	bl	19710 <__assert_fail@plt+0x8564>
   129cc:	subs	r4, r5, #0
   129d0:	bne	129b0 <__assert_fail@plt+0x1804>
   129d4:	ldrd	r4, [sp]
   129d8:	ldr	r6, [sp, #8]
   129dc:	add	sp, sp, #12
   129e0:	pop	{pc}		; (ldr pc, [sp], #4)
   129e4:	str	r4, [sp, #-8]!
   129e8:	mov	r4, r0
   129ec:	str	lr, [sp, #4]
   129f0:	b	12a00 <__assert_fail@plt+0x1854>
   129f4:	bl	15c18 <__assert_fail@plt+0x4a6c>
   129f8:	cmp	r0, #0
   129fc:	bge	12a20 <__assert_fail@plt+0x1874>
   12a00:	mov	r0, r4
   12a04:	bl	15bc8 <__assert_fail@plt+0x4a1c>
   12a08:	cmp	r0, #0
   12a0c:	mov	r0, r4
   12a10:	beq	129f4 <__assert_fail@plt+0x1848>
   12a14:	ldr	r4, [sp]
   12a18:	add	sp, sp, #4
   12a1c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a20:	bl	11188 <close@plt>
   12a24:	b	12a00 <__assert_fail@plt+0x1854>
   12a28:	strd	r4, [sp, #-20]!	; 0xffffffec
   12a2c:	ldr	r5, [r0, #44]	; 0x2c
   12a30:	ldr	r3, [r5, #48]	; 0x30
   12a34:	strd	r6, [sp, #8]
   12a38:	str	lr, [sp, #16]
   12a3c:	sub	sp, sp, #100	; 0x64
   12a40:	tst	r3, #512	; 0x200
   12a44:	beq	12ad4 <__assert_fail@plt+0x1928>
   12a48:	ldr	r4, [r5, #52]	; 0x34
   12a4c:	mov	r7, r1
   12a50:	mov	r6, r0
   12a54:	cmp	r4, #0
   12a58:	beq	12a80 <__assert_fail@plt+0x18d4>
   12a5c:	ldrd	r2, [r6, #64]	; 0x40
   12a60:	add	r1, sp, #8
   12a64:	mov	r0, r4
   12a68:	strd	r2, [sp, #8]
   12a6c:	bl	150c8 <__assert_fail@plt+0x3f1c>
   12a70:	cmp	r0, #0
   12a74:	beq	12ab8 <__assert_fail@plt+0x190c>
   12a78:	ldr	r0, [r0, #8]
   12a7c:	b	12ad8 <__assert_fail@plt+0x192c>
   12a80:	movw	r0, #38672	; 0x9710
   12a84:	movt	r0, #1
   12a88:	mov	r1, r4
   12a8c:	movw	r3, #10176	; 0x27c0
   12a90:	movt	r3, #1
   12a94:	movw	r2, #10136	; 0x2798
   12a98:	movt	r2, #1
   12a9c:	str	r0, [sp]
   12aa0:	mov	r0, #13
   12aa4:	bl	153e8 <__assert_fail@plt+0x423c>
   12aa8:	cmp	r0, #0
   12aac:	mov	r4, r0
   12ab0:	str	r0, [r5, #52]	; 0x34
   12ab4:	bne	12a5c <__assert_fail@plt+0x18b0>
   12ab8:	cmp	r7, #0
   12abc:	blt	12ad4 <__assert_fail@plt+0x1928>
   12ac0:	mov	r0, r7
   12ac4:	add	r1, sp, #8
   12ac8:	bl	10eb8 <fstatfs64@plt>
   12acc:	cmp	r0, #0
   12ad0:	beq	12aec <__assert_fail@plt+0x1940>
   12ad4:	mov	r0, #0
   12ad8:	add	sp, sp, #100	; 0x64
   12adc:	ldrd	r4, [sp]
   12ae0:	ldrd	r6, [sp, #8]
   12ae4:	add	sp, sp, #16
   12ae8:	pop	{pc}		; (ldr pc, [sp], #4)
   12aec:	cmp	r4, #0
   12af0:	beq	12b30 <__assert_fail@plt+0x1984>
   12af4:	mov	r0, #16
   12af8:	bl	19198 <__assert_fail@plt+0x7fec>
   12afc:	subs	r5, r0, #0
   12b00:	beq	12b30 <__assert_fail@plt+0x1984>
   12b04:	ldr	ip, [sp, #8]
   12b08:	mov	r0, r4
   12b0c:	mov	r1, r5
   12b10:	ldrd	r2, [r6, #64]	; 0x40
   12b14:	strd	r2, [r5]
   12b18:	str	ip, [r5, #8]
   12b1c:	bl	15a40 <__assert_fail@plt+0x4894>
   12b20:	cmp	r0, #0
   12b24:	beq	12b38 <__assert_fail@plt+0x198c>
   12b28:	cmp	r5, r0
   12b2c:	bne	12b44 <__assert_fail@plt+0x1998>
   12b30:	ldr	r0, [sp, #8]
   12b34:	b	12ad8 <__assert_fail@plt+0x192c>
   12b38:	mov	r0, r5
   12b3c:	bl	19710 <__assert_fail@plt+0x8564>
   12b40:	b	12b30 <__assert_fail@plt+0x1984>
   12b44:	bl	1117c <abort@plt>
   12b48:	strd	r4, [sp, #-16]!
   12b4c:	mov	r5, r1
   12b50:	ldr	r1, [r0, #32]
   12b54:	str	r6, [sp, #8]
   12b58:	str	lr, [sp, #12]
   12b5c:	sub	r3, r1, r5
   12b60:	cmn	r1, #100	; 0x64
   12b64:	clz	r3, r3
   12b68:	lsr	r3, r3, #5
   12b6c:	moveq	r3, #0
   12b70:	cmp	r3, #0
   12b74:	bne	12bd4 <__assert_fail@plt+0x1a28>
   12b78:	cmp	r2, #0
   12b7c:	mov	r4, r0
   12b80:	bne	12bb0 <__assert_fail@plt+0x1a04>
   12b84:	ldr	r3, [r0, #48]	; 0x30
   12b88:	mvn	r2, r1
   12b8c:	lsr	r2, r2, #31
   12b90:	eor	r3, r3, #4
   12b94:	ands	r3, r2, r3, lsr #2
   12b98:	bne	12bc8 <__assert_fail@plt+0x1a1c>
   12b9c:	ldr	r6, [sp, #8]
   12ba0:	str	r5, [r4, #32]
   12ba4:	ldrd	r4, [sp]
   12ba8:	add	sp, sp, #12
   12bac:	pop	{pc}		; (ldr pc, [sp], #4)
   12bb0:	add	r0, r0, #60	; 0x3c
   12bb4:	bl	15bd0 <__assert_fail@plt+0x4a24>
   12bb8:	cmp	r0, #0
   12bbc:	blt	12b9c <__assert_fail@plt+0x19f0>
   12bc0:	bl	11188 <close@plt>
   12bc4:	b	12b9c <__assert_fail@plt+0x19f0>
   12bc8:	mov	r0, r1
   12bcc:	bl	11188 <close@plt>
   12bd0:	b	12b9c <__assert_fail@plt+0x19f0>
   12bd4:	bl	1117c <abort@plt>
   12bd8:	ldr	r3, [r0, #48]	; 0x30
   12bdc:	strd	r4, [sp, #-16]!
   12be0:	mov	r4, r0
   12be4:	str	r6, [sp, #8]
   12be8:	str	lr, [sp, #12]
   12bec:	ands	r5, r3, #4
   12bf0:	movne	r5, #0
   12bf4:	bne	12c0c <__assert_fail@plt+0x1a60>
   12bf8:	tst	r3, #512	; 0x200
   12bfc:	beq	12c28 <__assert_fail@plt+0x1a7c>
   12c00:	mov	r2, #1
   12c04:	mvn	r1, #99	; 0x63
   12c08:	bl	12b48 <__assert_fail@plt+0x199c>
   12c0c:	add	r0, r4, #60	; 0x3c
   12c10:	bl	129e4 <__assert_fail@plt+0x1838>
   12c14:	mov	r0, r5
   12c18:	ldrd	r4, [sp]
   12c1c:	ldr	r6, [sp, #8]
   12c20:	add	sp, sp, #12
   12c24:	pop	{pc}		; (ldr pc, [sp], #4)
   12c28:	ldr	r0, [r0, #28]
   12c2c:	bl	11128 <fchdir@plt>
   12c30:	adds	r5, r0, #0
   12c34:	movne	r5, #1
   12c38:	b	12c0c <__assert_fail@plt+0x1a60>
   12c3c:	ldr	ip, [r2, #48]	; 0x30
   12c40:	strd	r4, [sp, #-16]!
   12c44:	mov	r4, r2
   12c48:	add	r5, r2, #64	; 0x40
   12c4c:	ldr	r2, [r2, #24]
   12c50:	str	r6, [sp, #8]
   12c54:	str	lr, [sp, #12]
   12c58:	sub	sp, sp, #8
   12c5c:	cmp	ip, #0
   12c60:	bne	12cd8 <__assert_fail@plt+0x1b2c>
   12c64:	tst	r1, #1
   12c68:	beq	12cd8 <__assert_fail@plt+0x1b2c>
   12c6c:	mov	r1, r2
   12c70:	mov	r0, #3
   12c74:	mov	r2, r5
   12c78:	bl	11164 <__xstat64@plt>
   12c7c:	cmp	r0, #0
   12c80:	beq	12d04 <__assert_fail@plt+0x1b58>
   12c84:	bl	11068 <__errno_location@plt>
   12c88:	ldr	r3, [r0]
   12c8c:	mov	r6, r0
   12c90:	cmp	r3, #2
   12c94:	bne	12cbc <__assert_fail@plt+0x1b10>
   12c98:	mov	r2, r5
   12c9c:	mov	r0, #3
   12ca0:	ldr	r1, [r4, #24]
   12ca4:	bl	11194 <__lxstat64@plt>
   12ca8:	subs	r3, r0, #0
   12cac:	moveq	r0, #13
   12cb0:	streq	r3, [r6]
   12cb4:	beq	12d28 <__assert_fail@plt+0x1b7c>
   12cb8:	ldr	r3, [r6]
   12cbc:	mov	r0, r5
   12cc0:	mov	r2, #104	; 0x68
   12cc4:	str	r3, [r4, #32]
   12cc8:	mov	r1, #0
   12ccc:	bl	1108c <memset@plt>
   12cd0:	mov	r0, #10
   12cd4:	b	12d28 <__assert_fail@plt+0x1b7c>
   12cd8:	ubfx	ip, r1, #1, #1
   12cdc:	orrs	r3, r3, ip
   12ce0:	bne	12c6c <__assert_fail@plt+0x1ac0>
   12ce4:	mov	ip, #256	; 0x100
   12ce8:	mov	r1, r0
   12cec:	mov	r3, r5
   12cf0:	mov	r0, #3
   12cf4:	str	ip, [sp]
   12cf8:	bl	10f78 <__fxstatat64@plt>
   12cfc:	cmp	r0, #0
   12d00:	bne	12d84 <__assert_fail@plt+0x1bd8>
   12d04:	ldr	r3, [r4, #80]	; 0x50
   12d08:	and	r3, r3, #61440	; 0xf000
   12d0c:	cmp	r3, #16384	; 0x4000
   12d10:	beq	12d3c <__assert_fail@plt+0x1b90>
   12d14:	cmp	r3, #40960	; 0xa000
   12d18:	beq	12d90 <__assert_fail@plt+0x1be4>
   12d1c:	cmp	r3, #32768	; 0x8000
   12d20:	movne	r0, #3
   12d24:	moveq	r0, #8
   12d28:	add	sp, sp, #8
   12d2c:	ldrd	r4, [sp]
   12d30:	ldr	r6, [sp, #8]
   12d34:	add	sp, sp, #12
   12d38:	pop	{pc}		; (ldr pc, [sp], #4)
   12d3c:	ldrb	r3, [r4, #168]	; 0xa8
   12d40:	cmp	r3, #46	; 0x2e
   12d44:	bne	12d68 <__assert_fail@plt+0x1bbc>
   12d48:	ldrb	r3, [r4, #169]	; 0xa9
   12d4c:	cmp	r3, #0
   12d50:	beq	12d70 <__assert_fail@plt+0x1bc4>
   12d54:	ldr	r3, [r4, #168]	; 0xa8
   12d58:	bic	r3, r3, #-16777216	; 0xff000000
   12d5c:	bic	r3, r3, #255	; 0xff
   12d60:	cmp	r3, #11776	; 0x2e00
   12d64:	beq	12d70 <__assert_fail@plt+0x1bc4>
   12d68:	mov	r0, #1
   12d6c:	b	12d28 <__assert_fail@plt+0x1b7c>
   12d70:	ldr	r3, [r4, #48]	; 0x30
   12d74:	cmp	r3, #0
   12d78:	moveq	r0, #1
   12d7c:	movne	r0, #5
   12d80:	b	12d28 <__assert_fail@plt+0x1b7c>
   12d84:	bl	11068 <__errno_location@plt>
   12d88:	ldr	r3, [r0]
   12d8c:	b	12cbc <__assert_fail@plt+0x1b10>
   12d90:	mov	r0, #12
   12d94:	b	12d28 <__assert_fail@plt+0x1b7c>
   12d98:	mov	ip, r1
   12d9c:	ldr	r1, [r1]
   12da0:	strd	r4, [sp, #-16]!
   12da4:	mov	r4, r0
   12da8:	ldr	r0, [r0]
   12dac:	str	r6, [sp, #8]
   12db0:	str	lr, [sp, #12]
   12db4:	add	r3, r1, #256	; 0x100
   12db8:	add	r2, r3, r2
   12dbc:	cmp	r1, r2
   12dc0:	bhi	12df4 <__assert_fail@plt+0x1c48>
   12dc4:	mov	r1, r2
   12dc8:	str	r2, [ip]
   12dcc:	bl	191d4 <__assert_fail@plt+0x8028>
   12dd0:	subs	r5, r0, #0
   12dd4:	movne	r3, #1
   12dd8:	strne	r5, [r4]
   12ddc:	beq	12e14 <__assert_fail@plt+0x1c68>
   12de0:	ldrd	r4, [sp]
   12de4:	mov	r0, r3
   12de8:	ldr	r6, [sp, #8]
   12dec:	add	sp, sp, #12
   12df0:	pop	{pc}		; (ldr pc, [sp], #4)
   12df4:	mov	r5, #0
   12df8:	bl	19710 <__assert_fail@plt+0x8564>
   12dfc:	str	r5, [r4]
   12e00:	bl	11068 <__errno_location@plt>
   12e04:	mov	r2, #36	; 0x24
   12e08:	mov	r3, r5
   12e0c:	str	r2, [r0]
   12e10:	b	12de0 <__assert_fail@plt+0x1c34>
   12e14:	ldr	r0, [r4]
   12e18:	bl	19710 <__assert_fail@plt+0x8564>
   12e1c:	mov	r3, r5
   12e20:	str	r5, [r4]
   12e24:	b	12de0 <__assert_fail@plt+0x1c34>
   12e28:	movw	r3, #258	; 0x102
   12e2c:	str	r4, [sp, #-8]!
   12e30:	mov	r4, r1
   12e34:	tst	r0, r3
   12e38:	str	lr, [sp, #4]
   12e3c:	sub	sp, sp, #8
   12e40:	beq	12e8c <__assert_fail@plt+0x1ce0>
   12e44:	movw	r1, #38672	; 0x9710
   12e48:	movt	r1, #1
   12e4c:	movw	r3, #10032	; 0x2730
   12e50:	movt	r3, #1
   12e54:	movw	r2, #10096	; 0x2770
   12e58:	movt	r2, #1
   12e5c:	str	r1, [sp]
   12e60:	mov	r0, #31
   12e64:	mov	r1, #0
   12e68:	bl	153e8 <__assert_fail@plt+0x423c>
   12e6c:	mov	r3, r0
   12e70:	adds	r0, r0, #0
   12e74:	movne	r0, #1
   12e78:	str	r3, [r4]
   12e7c:	add	sp, sp, #8
   12e80:	ldr	r4, [sp]
   12e84:	add	sp, sp, #4
   12e88:	pop	{pc}		; (ldr pc, [sp], #4)
   12e8c:	mov	r0, #32
   12e90:	bl	19198 <__assert_fail@plt+0x7fec>
   12e94:	cmp	r0, #0
   12e98:	str	r0, [r4]
   12e9c:	beq	12e7c <__assert_fail@plt+0x1cd0>
   12ea0:	bl	192b4 <__assert_fail@plt+0x8108>
   12ea4:	mov	r0, #1
   12ea8:	add	sp, sp, #8
   12eac:	ldr	r4, [sp]
   12eb0:	add	sp, sp, #4
   12eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   12eb8:	mov	r3, r2
   12ebc:	lsl	r2, r1, #11
   12ec0:	tst	r1, #512	; 0x200
   12ec4:	and	r2, r2, #32768	; 0x8000
   12ec8:	orr	r2, r2, #540672	; 0x84000
   12ecc:	orr	r2, r2, #2304	; 0x900
   12ed0:	beq	12edc <__assert_fail@plt+0x1d30>
   12ed4:	mov	r1, r3
   12ed8:	b	161e0 <__assert_fail@plt+0x5034>
   12edc:	mov	r1, r2
   12ee0:	mov	r0, r3
   12ee4:	b	19670 <__assert_fail@plt+0x84c4>
   12ee8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   12eec:	mov	r5, r0
   12ef0:	mov	r4, r2
   12ef4:	strd	r6, [sp, #8]
   12ef8:	mov	r7, r1
   12efc:	strd	r8, [sp, #16]
   12f00:	ldr	r9, [r0, #48]	; 0x30
   12f04:	str	sl, [sp, #24]
   12f08:	subs	sl, r3, #0
   12f0c:	str	lr, [sp, #28]
   12f10:	sub	sp, sp, #104	; 0x68
   12f14:	and	r8, r9, #4
   12f18:	beq	12ff0 <__assert_fail@plt+0x1e44>
   12f1c:	movw	r1, #42820	; 0xa744
   12f20:	movt	r1, #1
   12f24:	mov	r0, sl
   12f28:	bl	10ee8 <strcmp@plt>
   12f2c:	cmp	r0, #0
   12f30:	bne	12ff0 <__assert_fail@plt+0x1e44>
   12f34:	cmp	r8, #0
   12f38:	bne	13030 <__assert_fail@plt+0x1e84>
   12f3c:	cmp	r4, #0
   12f40:	bge	130f0 <__assert_fail@plt+0x1f44>
   12f44:	tst	r9, #512	; 0x200
   12f48:	bne	13074 <__assert_fail@plt+0x1ec8>
   12f4c:	mov	r8, #1
   12f50:	mov	r1, r9
   12f54:	mov	r2, sl
   12f58:	ldr	r0, [r5, #32]
   12f5c:	bl	12eb8 <__assert_fail@plt+0x1d0c>
   12f60:	subs	r6, r0, #0
   12f64:	blt	130e8 <__assert_fail@plt+0x1f3c>
   12f68:	ldr	r9, [r5, #48]	; 0x30
   12f6c:	tst	r9, #2
   12f70:	beq	1300c <__assert_fail@plt+0x1e60>
   12f74:	mov	r2, sp
   12f78:	mov	r1, r6
   12f7c:	mov	r0, #3
   12f80:	bl	10f90 <__fxstat64@plt>
   12f84:	cmp	r0, #0
   12f88:	bne	1306c <__assert_fail@plt+0x1ec0>
   12f8c:	ldrd	r2, [sp]
   12f90:	ldrd	r0, [r7, #64]	; 0x40
   12f94:	cmp	r1, r3
   12f98:	cmpeq	r0, r2
   12f9c:	bne	13060 <__assert_fail@plt+0x1eb4>
   12fa0:	ldrd	r2, [sp, #96]	; 0x60
   12fa4:	ldrd	r0, [r7, #160]	; 0xa0
   12fa8:	cmp	r1, r3
   12fac:	cmpeq	r0, r2
   12fb0:	bne	13060 <__assert_fail@plt+0x1eb4>
   12fb4:	ldr	r9, [r5, #48]	; 0x30
   12fb8:	tst	r9, #512	; 0x200
   12fbc:	bne	130b0 <__assert_fail@plt+0x1f04>
   12fc0:	mov	r0, r6
   12fc4:	bl	11128 <fchdir@plt>
   12fc8:	mov	r9, r0
   12fcc:	cmp	r4, #0
   12fd0:	bge	13040 <__assert_fail@plt+0x1e94>
   12fd4:	bl	11068 <__errno_location@plt>
   12fd8:	mov	r4, r0
   12fdc:	mov	r0, r6
   12fe0:	ldr	r5, [r4]
   12fe4:	bl	11188 <close@plt>
   12fe8:	str	r5, [r4]
   12fec:	b	13040 <__assert_fail@plt+0x1e94>
   12ff0:	cmp	r8, #0
   12ff4:	bne	13030 <__assert_fail@plt+0x1e84>
   12ff8:	cmp	r4, #0
   12ffc:	movge	r6, r4
   13000:	blt	12f50 <__assert_fail@plt+0x1da4>
   13004:	tst	r9, #2
   13008:	bne	12f74 <__assert_fail@plt+0x1dc8>
   1300c:	cmp	sl, #0
   13010:	beq	12fb8 <__assert_fail@plt+0x1e0c>
   13014:	mov	r0, sl
   13018:	movw	r1, #42820	; 0xa744
   1301c:	movt	r1, #1
   13020:	bl	10ee8 <strcmp@plt>
   13024:	cmp	r0, #0
   13028:	bne	12fb8 <__assert_fail@plt+0x1e0c>
   1302c:	b	12f74 <__assert_fail@plt+0x1dc8>
   13030:	mvn	r3, r4
   13034:	lsr	r3, r3, #31
   13038:	ands	r9, r3, r9, lsr #9
   1303c:	bne	130cc <__assert_fail@plt+0x1f20>
   13040:	mov	r0, r9
   13044:	add	sp, sp, #104	; 0x68
   13048:	ldrd	r4, [sp]
   1304c:	ldrd	r6, [sp, #8]
   13050:	ldrd	r8, [sp, #16]
   13054:	ldr	sl, [sp, #24]
   13058:	add	sp, sp, #28
   1305c:	pop	{pc}		; (ldr pc, [sp], #4)
   13060:	bl	11068 <__errno_location@plt>
   13064:	mov	r3, #2
   13068:	str	r3, [r0]
   1306c:	mvn	r9, #0
   13070:	b	12fcc <__assert_fail@plt+0x1e20>
   13074:	add	r6, r5, #60	; 0x3c
   13078:	mov	r0, r6
   1307c:	bl	15bc8 <__assert_fail@plt+0x4a1c>
   13080:	subs	r8, r0, #0
   13084:	bne	12f50 <__assert_fail@plt+0x1da4>
   13088:	mov	r0, r6
   1308c:	bl	15c18 <__assert_fail@plt+0x4a6c>
   13090:	subs	r6, r0, #0
   13094:	blt	130dc <__assert_fail@plt+0x1f30>
   13098:	ldr	r9, [r5, #48]	; 0x30
   1309c:	mov	r4, r6
   130a0:	mov	r8, #1
   130a4:	tst	r9, #2
   130a8:	beq	12fb8 <__assert_fail@plt+0x1e0c>
   130ac:	b	12f74 <__assert_fail@plt+0x1dc8>
   130b0:	eor	r2, r8, #1
   130b4:	mov	r1, r6
   130b8:	uxtb	r2, r2
   130bc:	mov	r0, r5
   130c0:	bl	12b48 <__assert_fail@plt+0x199c>
   130c4:	mov	r9, #0
   130c8:	b	13040 <__assert_fail@plt+0x1e94>
   130cc:	mov	r0, r4
   130d0:	mov	r9, #0
   130d4:	bl	11188 <close@plt>
   130d8:	b	13040 <__assert_fail@plt+0x1e94>
   130dc:	mov	r8, #1
   130e0:	ldr	r9, [r5, #48]	; 0x30
   130e4:	b	12f50 <__assert_fail@plt+0x1da4>
   130e8:	mvn	r9, #0
   130ec:	b	13040 <__assert_fail@plt+0x1e94>
   130f0:	tst	r9, #2
   130f4:	mov	r6, r4
   130f8:	mov	r8, #1
   130fc:	beq	13014 <__assert_fail@plt+0x1e68>
   13100:	b	12f74 <__assert_fail@plt+0x1dc8>
   13104:	movw	r3, #258	; 0x102
   13108:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1310c:	tst	r0, r3
   13110:	strd	r6, [sp, #8]
   13114:	strd	r8, [sp, #16]
   13118:	mov	r8, r2
   1311c:	str	sl, [sp, #24]
   13120:	mov	sl, r1
   13124:	str	lr, [sp, #28]
   13128:	beq	131ac <__assert_fail@plt+0x2000>
   1312c:	mov	r0, #24
   13130:	bl	19198 <__assert_fail@plt+0x7fec>
   13134:	subs	r9, r0, #0
   13138:	beq	131d0 <__assert_fail@plt+0x2024>
   1313c:	ldrd	r6, [r8, #64]	; 0x40
   13140:	mov	r1, r9
   13144:	ldrd	r4, [r8, #160]	; 0xa0
   13148:	ldr	r0, [sl]
   1314c:	strd	r6, [r9]
   13150:	str	r8, [r9, #16]
   13154:	strd	r4, [r9, #8]
   13158:	bl	15a40 <__assert_fail@plt+0x4894>
   1315c:	cmp	r9, r0
   13160:	mov	r4, r0
   13164:	beq	13190 <__assert_fail@plt+0x1fe4>
   13168:	mov	r0, r9
   1316c:	bl	19710 <__assert_fail@plt+0x8564>
   13170:	cmp	r4, #0
   13174:	beq	131d0 <__assert_fail@plt+0x2024>
   13178:	ldr	r3, [r4, #16]
   1317c:	mov	r2, #2
   13180:	mov	r0, #1
   13184:	str	r3, [r8]
   13188:	strh	r2, [r8, #56]	; 0x38
   1318c:	b	13194 <__assert_fail@plt+0x1fe8>
   13190:	mov	r0, #1
   13194:	ldrd	r4, [sp]
   13198:	ldrd	r6, [sp, #8]
   1319c:	ldrd	r8, [sp, #16]
   131a0:	ldr	sl, [sp, #24]
   131a4:	add	sp, sp, #28
   131a8:	pop	{pc}		; (ldr pc, [sp], #4)
   131ac:	add	r1, r2, #64	; 0x40
   131b0:	ldr	r0, [sl]
   131b4:	bl	192dc <__assert_fail@plt+0x8130>
   131b8:	cmp	r0, #0
   131bc:	beq	13190 <__assert_fail@plt+0x1fe4>
   131c0:	mov	r3, #2
   131c4:	str	r8, [r8]
   131c8:	strh	r3, [r8, #56]	; 0x38
   131cc:	b	13194 <__assert_fail@plt+0x1fe8>
   131d0:	mov	r0, #0
   131d4:	b	13194 <__assert_fail@plt+0x1fe8>
   131d8:	movw	r3, #258	; 0x102
   131dc:	mov	ip, r1
   131e0:	strd	r4, [sp, #-12]!
   131e4:	tst	r0, r3
   131e8:	str	lr, [sp, #8]
   131ec:	sub	sp, sp, #28
   131f0:	bne	13240 <__assert_fail@plt+0x2094>
   131f4:	ldr	r3, [r2, #4]
   131f8:	cmp	r3, #0
   131fc:	beq	13230 <__assert_fail@plt+0x2084>
   13200:	ldr	r1, [r3, #48]	; 0x30
   13204:	cmp	r1, #0
   13208:	blt	13230 <__assert_fail@plt+0x2084>
   1320c:	ldr	ip, [ip]
   13210:	ldrd	r0, [ip, #16]
   13214:	orrs	r1, r0, r1
   13218:	beq	132a0 <__assert_fail@plt+0x20f4>
   1321c:	ldrd	r4, [ip]
   13220:	ldrd	r0, [r2, #160]	; 0xa0
   13224:	cmp	r5, r1
   13228:	cmpeq	r4, r0
   1322c:	beq	13278 <__assert_fail@plt+0x20cc>
   13230:	add	sp, sp, #28
   13234:	ldrd	r4, [sp]
   13238:	add	sp, sp, #8
   1323c:	pop	{pc}		; (ldr pc, [sp], #4)
   13240:	ldrd	r4, [r2, #64]	; 0x40
   13244:	mov	r1, sp
   13248:	ldrd	r2, [r2, #160]	; 0xa0
   1324c:	ldr	r0, [ip]
   13250:	strd	r4, [sp]
   13254:	strd	r2, [sp, #8]
   13258:	bl	15a80 <__assert_fail@plt+0x48d4>
   1325c:	cmp	r0, #0
   13260:	beq	132a0 <__assert_fail@plt+0x20f4>
   13264:	bl	19710 <__assert_fail@plt+0x8564>
   13268:	add	sp, sp, #28
   1326c:	ldrd	r4, [sp]
   13270:	add	sp, sp, #8
   13274:	pop	{pc}		; (ldr pc, [sp], #4)
   13278:	ldrd	r0, [ip, #8]
   1327c:	ldrd	r4, [r2, #64]	; 0x40
   13280:	cmp	r1, r5
   13284:	cmpeq	r0, r4
   13288:	bne	13230 <__assert_fail@plt+0x2084>
   1328c:	ldrd	r0, [r3, #64]	; 0x40
   13290:	ldrd	r2, [r3, #160]	; 0xa0
   13294:	strd	r2, [ip]
   13298:	strd	r0, [ip, #8]
   1329c:	b	13230 <__assert_fail@plt+0x2084>
   132a0:	bl	1117c <abort@plt>
   132a4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   132a8:	mov	r5, r0
   132ac:	strd	r6, [sp, #8]
   132b0:	strd	r8, [sp, #16]
   132b4:	ldr	r9, [r0]
   132b8:	strd	sl, [sp, #24]
   132bc:	str	lr, [sp, #32]
   132c0:	sub	sp, sp, #68	; 0x44
   132c4:	str	r1, [sp, #32]
   132c8:	ldr	r0, [r9, #12]
   132cc:	cmp	r0, #0
   132d0:	str	r0, [sp, #40]	; 0x28
   132d4:	beq	13614 <__assert_fail@plt+0x2468>
   132d8:	bl	1111c <dirfd@plt>
   132dc:	cmp	r0, #0
   132e0:	str	r0, [sp, #60]	; 0x3c
   132e4:	blt	13b58 <__assert_fail@plt+0x29ac>
   132e8:	ldr	r3, [r5, #44]	; 0x2c
   132ec:	cmp	r3, #0
   132f0:	beq	13a3c <__assert_fail@plt+0x2890>
   132f4:	ldr	r3, [r5, #48]	; 0x30
   132f8:	mvn	r2, #0
   132fc:	str	r2, [sp, #16]
   13300:	mov	r2, #1
   13304:	str	r2, [sp, #52]	; 0x34
   13308:	ldr	r2, [r9, #28]
   1330c:	ldr	r1, [r9, #40]	; 0x28
   13310:	sub	r0, r1, #1
   13314:	str	r1, [sp]
   13318:	ldrb	r2, [r2, r0]
   1331c:	str	r0, [sp, #28]
   13320:	cmp	r2, #47	; 0x2f
   13324:	beq	13334 <__assert_fail@plt+0x2188>
   13328:	add	r2, r1, #1
   1332c:	str	r2, [sp]
   13330:	str	r1, [sp, #28]
   13334:	ands	r3, r3, #4
   13338:	streq	r3, [sp, #20]
   1333c:	beq	1335c <__assert_fail@plt+0x21b0>
   13340:	ldr	r3, [r5, #24]
   13344:	mov	r1, #47	; 0x2f
   13348:	ldr	r0, [sp, #28]
   1334c:	add	r2, r3, r0
   13350:	strb	r1, [r3, r0]
   13354:	add	r3, r2, #1
   13358:	str	r3, [sp, #20]
   1335c:	mov	sl, #0
   13360:	movw	r3, #6548	; 0x1994
   13364:	movt	r3, #258	; 0x102
   13368:	mov	r2, sl
   1336c:	ldr	fp, [r5, #36]	; 0x24
   13370:	mov	r7, sl
   13374:	stmib	sp, {r2, r9}
   13378:	movw	r2, #19778	; 0x4d42
   1337c:	movt	r2, #65363	; 0xff53
   13380:	str	sl, [sp, #24]
   13384:	str	r3, [sp, #44]	; 0x2c
   13388:	ldr	r3, [r9, #48]	; 0x30
   1338c:	str	sl, [sp, #36]	; 0x24
   13390:	str	r2, [sp, #48]	; 0x30
   13394:	ldr	r2, [sp]
   13398:	add	r3, r3, #1
   1339c:	str	r3, [sp, #12]
   133a0:	sub	fp, fp, r2
   133a4:	b	133bc <__assert_fail@plt+0x2210>
   133a8:	ldr	r3, [sp, #16]
   133ac:	add	r7, r7, #1
   133b0:	cmp	r7, r3
   133b4:	bcs	13774 <__assert_fail@plt+0x25c8>
   133b8:	mov	sl, r4
   133bc:	ldr	r3, [sp, #8]
   133c0:	ldr	r4, [r3, #12]
   133c4:	cmp	r4, #0
   133c8:	beq	138fc <__assert_fail@plt+0x2750>
   133cc:	bl	11068 <__errno_location@plt>
   133d0:	mov	r8, r0
   133d4:	mov	r3, #0
   133d8:	mov	r0, r4
   133dc:	str	r3, [r8]
   133e0:	bl	11104 <readdir64@plt>
   133e4:	subs	r9, r0, #0
   133e8:	beq	139cc <__assert_fail@plt+0x2820>
   133ec:	ldr	r3, [r5, #48]	; 0x30
   133f0:	tst	r3, #32
   133f4:	bne	13404 <__assert_fail@plt+0x2258>
   133f8:	ldrb	r3, [r9, #19]
   133fc:	cmp	r3, #46	; 0x2e
   13400:	beq	13598 <__assert_fail@plt+0x23ec>
   13404:	add	r4, r9, #19
   13408:	mov	r0, r4
   1340c:	bl	11044 <strlen@plt>
   13410:	mov	r2, r0
   13414:	mov	r1, r4
   13418:	mov	r6, r0
   1341c:	mov	r0, r5
   13420:	bl	1290c <__assert_fail@plt+0x1760>
   13424:	subs	r4, r0, #0
   13428:	beq	1382c <__assert_fail@plt+0x2680>
   1342c:	cmp	fp, r6
   13430:	bls	134f8 <__assert_fail@plt+0x234c>
   13434:	ldr	r3, [sp]
   13438:	adds	r6, r6, r3
   1343c:	bcs	13c2c <__assert_fail@plt+0x2a80>
   13440:	ldr	r3, [sp, #12]
   13444:	add	r1, r4, #168	; 0xa8
   13448:	ldr	ip, [r5]
   1344c:	ldr	r0, [r5, #48]	; 0x30
   13450:	str	r6, [r4, #40]	; 0x28
   13454:	str	r3, [r4, #48]	; 0x30
   13458:	ldrd	r2, [r9]
   1345c:	str	ip, [r4, #4]
   13460:	tst	r0, #4
   13464:	streq	r1, [r4, #24]
   13468:	strd	r2, [r4, #160]	; 0xa0
   1346c:	bne	13578 <__assert_fail@plt+0x23cc>
   13470:	ldr	r3, [r5, #44]	; 0x2c
   13474:	cmp	r3, #0
   13478:	beq	13484 <__assert_fail@plt+0x22d8>
   1347c:	ands	r3, r0, #1024	; 0x400
   13480:	beq	135b8 <__assert_fail@plt+0x240c>
   13484:	ldrb	r3, [r9, #18]
   13488:	tst	r0, #8
   1348c:	sub	r2, r3, #1
   13490:	beq	1349c <__assert_fail@plt+0x22f0>
   13494:	tst	r3, #251	; 0xfb
   13498:	bne	135d0 <__assert_fail@plt+0x2424>
   1349c:	mov	r3, #11
   134a0:	cmp	r2, r3
   134a4:	strh	r3, [r4, #56]	; 0x38
   134a8:	bls	1355c <__assert_fail@plt+0x23b0>
   134ac:	mov	r1, #0
   134b0:	mov	r2, #2
   134b4:	mov	r3, #0
   134b8:	str	r1, [r4, #80]	; 0x50
   134bc:	strd	r2, [r4, #112]	; 0x70
   134c0:	ldr	r2, [sp, #4]
   134c4:	mov	r3, #0
   134c8:	str	r3, [r4, #8]
   134cc:	cmp	r2, r3
   134d0:	movw	r3, #10000	; 0x2710
   134d4:	strne	r4, [sl, #8]
   134d8:	streq	r4, [sp, #4]
   134dc:	cmp	r7, r3
   134e0:	bne	133a8 <__assert_fail@plt+0x21fc>
   134e4:	ldr	r6, [r5, #44]	; 0x2c
   134e8:	cmp	r6, #0
   134ec:	beq	13728 <__assert_fail@plt+0x257c>
   134f0:	movw	r7, #10001	; 0x2711
   134f4:	b	133b8 <__assert_fail@plt+0x220c>
   134f8:	ldr	r3, [sp, #28]
   134fc:	add	r1, r5, #36	; 0x24
   13500:	add	r0, r5, #24
   13504:	ldr	fp, [r5, #24]
   13508:	add	r2, r3, #2
   1350c:	add	r2, r2, r6
   13510:	bl	12d98 <__assert_fail@plt+0x1bec>
   13514:	cmp	r0, #0
   13518:	beq	1382c <__assert_fail@plt+0x2680>
   1351c:	ldr	r3, [r5, #24]
   13520:	cmp	r3, fp
   13524:	beq	1360c <__assert_fail@plt+0x2460>
   13528:	ldr	r2, [r5, #48]	; 0x30
   1352c:	tst	r2, #4
   13530:	beq	13540 <__assert_fail@plt+0x2394>
   13534:	ldr	r2, [sp]
   13538:	add	r3, r3, r2
   1353c:	str	r3, [sp, #20]
   13540:	ldr	r3, [sp]
   13544:	str	r0, [sp, #24]
   13548:	ldr	fp, [r5, #36]	; 0x24
   1354c:	sub	fp, fp, r3
   13550:	b	13434 <__assert_fail@plt+0x2288>
   13554:	mov	r3, #11
   13558:	strh	r3, [r4, #56]	; 0x38
   1355c:	movw	r3, #42772	; 0xa714
   13560:	movt	r3, #1
   13564:	ldr	r1, [r3, r2, lsl #2]
   13568:	mov	r2, #2
   1356c:	mov	r3, #0
   13570:	str	r1, [r4, #80]	; 0x50
   13574:	b	134bc <__assert_fail@plt+0x2310>
   13578:	ldr	r3, [r4, #28]
   1357c:	ldr	r2, [r4, #52]	; 0x34
   13580:	ldr	r0, [sp, #20]
   13584:	str	r3, [r4, #24]
   13588:	add	r2, r2, #1
   1358c:	bl	10f00 <memmove@plt>
   13590:	ldr	r0, [r5, #48]	; 0x30
   13594:	b	13470 <__assert_fail@plt+0x22c4>
   13598:	ldrb	r3, [r9, #20]
   1359c:	cmp	r3, #0
   135a0:	beq	135b0 <__assert_fail@plt+0x2404>
   135a4:	ldrh	r3, [r9, #20]
   135a8:	cmp	r3, #46	; 0x2e
   135ac:	bne	13404 <__assert_fail@plt+0x2258>
   135b0:	mov	r4, sl
   135b4:	b	133b8 <__assert_fail@plt+0x220c>
   135b8:	mov	r1, r0
   135bc:	mov	r2, r4
   135c0:	ldr	r0, [r5, #32]
   135c4:	bl	12c3c <__assert_fail@plt+0x1a90>
   135c8:	strh	r0, [r4, #56]	; 0x38
   135cc:	b	134c0 <__assert_fail@plt+0x2314>
   135d0:	ubfx	r0, r0, #4, #1
   135d4:	cmp	r3, #10
   135d8:	moveq	r3, r0
   135dc:	orrne	r3, r0, #1
   135e0:	cmp	r3, #0
   135e4:	beq	13554 <__assert_fail@plt+0x23a8>
   135e8:	mov	r3, #11
   135ec:	cmp	r2, r3
   135f0:	strh	r3, [r4, #56]	; 0x38
   135f4:	bls	13810 <__assert_fail@plt+0x2664>
   135f8:	mov	r1, #0
   135fc:	mov	r2, #1
   13600:	mov	r3, #0
   13604:	str	r1, [r4, #80]	; 0x50
   13608:	b	134bc <__assert_fail@plt+0x2310>
   1360c:	ldr	r0, [sp, #24]
   13610:	b	13540 <__assert_fail@plt+0x2394>
   13614:	ldr	r3, [r5, #48]	; 0x30
   13618:	ldr	r1, [r9, #24]
   1361c:	and	r2, r3, #516	; 0x204
   13620:	cmp	r2, #512	; 0x200
   13624:	ldreq	r0, [r5, #32]
   13628:	mvnne	r0, #99	; 0x63
   1362c:	ands	r2, r3, #16
   13630:	beq	13640 <__assert_fail@plt+0x2494>
   13634:	tst	r3, #1
   13638:	moveq	r2, #32768	; 0x8000
   1363c:	bne	13890 <__assert_fail@plt+0x26e4>
   13640:	add	r3, sp, #60	; 0x3c
   13644:	bl	16220 <__assert_fail@plt+0x5074>
   13648:	cmp	r0, #0
   1364c:	str	r0, [sp, #4]
   13650:	str	r0, [r9, #12]
   13654:	beq	13ba0 <__assert_fail@plt+0x29f4>
   13658:	ldrh	r3, [r9, #56]	; 0x38
   1365c:	ldr	r0, [r5, #48]	; 0x30
   13660:	cmp	r3, #11
   13664:	beq	13aec <__assert_fail@plt+0x2940>
   13668:	tst	r0, #256	; 0x100
   1366c:	bne	13a68 <__assert_fail@plt+0x28bc>
   13670:	ldr	r2, [r5, #44]	; 0x2c
   13674:	movw	r3, #34464	; 0x86a0
   13678:	movt	r3, #1
   1367c:	cmp	r2, #0
   13680:	mvnne	r3, #0
   13684:	str	r3, [sp, #16]
   13688:	ldr	r3, [sp, #32]
   1368c:	cmp	r3, #2
   13690:	beq	13a58 <__assert_fail@plt+0x28ac>
   13694:	ldr	r3, [r5, #48]	; 0x30
   13698:	ldr	r0, [sp, #60]	; 0x3c
   1369c:	and	r3, r3, #56	; 0x38
   136a0:	cmp	r3, #24
   136a4:	beq	138a0 <__assert_fail@plt+0x26f4>
   136a8:	ldr	r3, [sp, #32]
   136ac:	mov	r4, #1
   136b0:	sub	r6, r3, #3
   136b4:	clz	r6, r6
   136b8:	lsr	r6, r6, #5
   136bc:	ldr	r3, [r5, #48]	; 0x30
   136c0:	tst	r3, #512	; 0x200
   136c4:	bne	13b8c <__assert_fail@plt+0x29e0>
   136c8:	cmp	r0, #0
   136cc:	bge	13b2c <__assert_fail@plt+0x2980>
   136d0:	tst	r6, r4
   136d4:	beq	136e4 <__assert_fail@plt+0x2538>
   136d8:	bl	11068 <__errno_location@plt>
   136dc:	ldr	r3, [r0]
   136e0:	str	r3, [r9, #32]
   136e4:	ldrh	r3, [r9, #58]	; 0x3a
   136e8:	ldr	r0, [r9, #12]
   136ec:	orr	r3, r3, #1
   136f0:	strh	r3, [r9, #58]	; 0x3a
   136f4:	bl	111a0 <closedir@plt>
   136f8:	ldr	r3, [r5, #48]	; 0x30
   136fc:	mov	r2, #0
   13700:	str	r2, [r9, #12]
   13704:	tst	r3, #512	; 0x200
   13708:	beq	13718 <__assert_fail@plt+0x256c>
   1370c:	ldr	r0, [sp, #60]	; 0x3c
   13710:	cmp	r0, r2
   13714:	bge	13b80 <__assert_fail@plt+0x29d4>
   13718:	mov	r2, #0
   1371c:	str	r2, [r9, #12]
   13720:	str	r2, [sp, #52]	; 0x34
   13724:	b	13308 <__assert_fail@plt+0x215c>
   13728:	ldr	r0, [sp, #8]
   1372c:	ldr	r1, [sp, #60]	; 0x3c
   13730:	bl	12a28 <__assert_fail@plt+0x187c>
   13734:	movw	r3, #26985	; 0x6969
   13738:	cmp	r0, r3
   1373c:	beq	13760 <__assert_fail@plt+0x25b4>
   13740:	ldr	r3, [sp, #44]	; 0x2c
   13744:	cmp	r0, r3
   13748:	beq	13760 <__assert_fail@plt+0x25b4>
   1374c:	ldr	r3, [sp, #48]	; 0x30
   13750:	cmp	r0, r3
   13754:	movne	r3, #1
   13758:	strne	r3, [sp, #36]	; 0x24
   1375c:	bne	134f0 <__assert_fail@plt+0x2344>
   13760:	ldr	r3, [sp, #16]
   13764:	add	r7, r7, #1
   13768:	str	r6, [sp, #36]	; 0x24
   1376c:	cmp	r7, r3
   13770:	bcc	133b8 <__assert_fail@plt+0x220c>
   13774:	ldr	r9, [sp, #8]
   13778:	ldr	r3, [sp, #24]
   1377c:	cmp	r3, #0
   13780:	beq	1390c <__assert_fail@plt+0x2760>
   13784:	ldr	r3, [r5, #4]
   13788:	ldr	r1, [r5, #24]
   1378c:	cmp	r3, #0
   13790:	beq	137c4 <__assert_fail@plt+0x2618>
   13794:	ldr	r2, [r3, #24]
   13798:	add	r0, r3, #168	; 0xa8
   1379c:	cmp	r2, r0
   137a0:	beq	137b4 <__assert_fail@plt+0x2608>
   137a4:	ldr	r0, [r3, #28]
   137a8:	sub	r2, r2, r0
   137ac:	add	r2, r1, r2
   137b0:	str	r2, [r3, #24]
   137b4:	str	r1, [r3, #28]
   137b8:	ldr	r3, [r3, #8]
   137bc:	cmp	r3, #0
   137c0:	bne	13794 <__assert_fail@plt+0x25e8>
   137c4:	ldr	r3, [sp, #4]
   137c8:	b	137fc <__assert_fail@plt+0x2650>
   137cc:	ldr	r2, [r3, #24]
   137d0:	cmp	r2, r0
   137d4:	beq	137e8 <__assert_fail@plt+0x263c>
   137d8:	ldr	r0, [r3, #28]
   137dc:	sub	r2, r2, r0
   137e0:	add	r2, r1, r2
   137e4:	str	r2, [r3, #24]
   137e8:	ldr	r2, [r3, #8]
   137ec:	str	r1, [r3, #28]
   137f0:	cmp	r2, #0
   137f4:	ldreq	r2, [r3, #4]
   137f8:	mov	r3, r2
   137fc:	ldr	r2, [r3, #48]	; 0x30
   13800:	add	r0, r3, #168	; 0xa8
   13804:	cmp	r2, #0
   13808:	bge	137cc <__assert_fail@plt+0x2620>
   1380c:	b	1390c <__assert_fail@plt+0x2760>
   13810:	movw	r3, #42772	; 0xa714
   13814:	movt	r3, #1
   13818:	ldr	r1, [r3, r2, lsl #2]
   1381c:	mov	r2, #1
   13820:	mov	r3, #0
   13824:	str	r1, [r4, #80]	; 0x50
   13828:	b	134bc <__assert_fail@plt+0x2310>
   1382c:	ldr	r9, [sp, #8]
   13830:	mov	r0, r4
   13834:	ldr	r4, [r8]
   13838:	bl	19710 <__assert_fail@plt+0x8564>
   1383c:	ldr	r0, [sp, #4]
   13840:	bl	1299c <__assert_fail@plt+0x17f0>
   13844:	ldr	r0, [r9, #12]
   13848:	bl	111a0 <closedir@plt>
   1384c:	ldr	r3, [r5, #48]	; 0x30
   13850:	mov	r2, #0
   13854:	mov	r1, #7
   13858:	str	r2, [sp, #4]
   1385c:	str	r2, [r9, #12]
   13860:	strh	r1, [r9, #56]	; 0x38
   13864:	orr	r3, r3, #8192	; 0x2000
   13868:	str	r3, [r5, #48]	; 0x30
   1386c:	str	r4, [r8]
   13870:	ldr	r0, [sp, #4]
   13874:	add	sp, sp, #68	; 0x44
   13878:	ldrd	r4, [sp]
   1387c:	ldrd	r6, [sp, #8]
   13880:	ldrd	r8, [sp, #16]
   13884:	ldrd	sl, [sp, #24]
   13888:	add	sp, sp, #32
   1388c:	pop	{pc}		; (ldr pc, [sp], #4)
   13890:	ldr	r2, [r9, #48]	; 0x30
   13894:	cmp	r2, #0
   13898:	movne	r2, #32768	; 0x8000
   1389c:	b	13640 <__assert_fail@plt+0x2494>
   138a0:	ldr	r3, [r9, #84]	; 0x54
   138a4:	cmp	r3, #2
   138a8:	bne	136a8 <__assert_fail@plt+0x24fc>
   138ac:	mov	r1, r0
   138b0:	mov	r0, r9
   138b4:	bl	12a28 <__assert_fail@plt+0x187c>
   138b8:	movw	r3, #26985	; 0x6969
   138bc:	cmp	r0, r3
   138c0:	beq	13c24 <__assert_fail@plt+0x2a78>
   138c4:	bgt	13c08 <__assert_fail@plt+0x2a5c>
   138c8:	movw	r3, #19778	; 0x4d42
   138cc:	movt	r3, #65363	; 0xff53
   138d0:	cmp	r0, r3
   138d4:	beq	13c24 <__assert_fail@plt+0x2a78>
   138d8:	cmp	r0, #0
   138dc:	beq	13c24 <__assert_fail@plt+0x2a78>
   138e0:	ldr	r3, [sp, #32]
   138e4:	cmp	r3, #3
   138e8:	bne	13a58 <__assert_fail@plt+0x28ac>
   138ec:	mov	r4, #0
   138f0:	mov	r6, #1
   138f4:	ldr	r0, [sp, #60]	; 0x3c
   138f8:	b	136bc <__assert_fail@plt+0x2510>
   138fc:	mov	r9, r3
   13900:	ldr	r3, [sp, #24]
   13904:	cmp	r3, #0
   13908:	bne	13784 <__assert_fail@plt+0x25d8>
   1390c:	ldr	r3, [r5, #48]	; 0x30
   13910:	tst	r3, #4
   13914:	beq	13944 <__assert_fail@plt+0x2798>
   13918:	ldr	r2, [sp]
   1391c:	ldr	r3, [r5, #36]	; 0x24
   13920:	cmp	r7, #0
   13924:	cmpne	r3, r2
   13928:	bne	13938 <__assert_fail@plt+0x278c>
   1392c:	ldr	r3, [sp, #20]
   13930:	sub	r3, r3, #1
   13934:	str	r3, [sp, #20]
   13938:	ldr	r2, [sp, #20]
   1393c:	mov	r3, #0
   13940:	strb	r3, [r2]
   13944:	ldr	r2, [sp, #40]	; 0x28
   13948:	ldr	r3, [sp, #52]	; 0x34
   1394c:	cmp	r2, #0
   13950:	movne	r3, #0
   13954:	cmp	r3, #0
   13958:	beq	13990 <__assert_fail@plt+0x27e4>
   1395c:	ldr	r3, [sp, #32]
   13960:	cmp	r7, #0
   13964:	cmpne	r3, #1
   13968:	bne	13998 <__assert_fail@plt+0x27ec>
   1396c:	ldr	r3, [r9, #48]	; 0x30
   13970:	cmp	r3, #0
   13974:	bne	13b08 <__assert_fail@plt+0x295c>
   13978:	mov	r0, r5
   1397c:	bl	12bd8 <__assert_fail@plt+0x1a2c>
   13980:	adds	r0, r0, #0
   13984:	movne	r0, #1
   13988:	cmp	r0, #0
   1398c:	bne	13be0 <__assert_fail@plt+0x2a34>
   13990:	cmp	r7, #0
   13994:	beq	13ab8 <__assert_fail@plt+0x290c>
   13998:	ldr	r3, [sp, #36]	; 0x24
   1399c:	cmp	r3, #0
   139a0:	bne	13a10 <__assert_fail@plt+0x2864>
   139a4:	ldr	r3, [r5, #44]	; 0x2c
   139a8:	cmp	r3, #0
   139ac:	cmpne	r7, #1
   139b0:	beq	13870 <__assert_fail@plt+0x26c4>
   139b4:	mov	r2, r7
   139b8:	mov	r0, r5
   139bc:	ldr	r1, [sp, #4]
   139c0:	bl	12818 <__assert_fail@plt+0x166c>
   139c4:	str	r0, [sp, #4]
   139c8:	b	13870 <__assert_fail@plt+0x26c4>
   139cc:	ldr	r3, [r8]
   139d0:	ldr	r9, [sp, #8]
   139d4:	cmp	r3, #0
   139d8:	beq	139f4 <__assert_fail@plt+0x2848>
   139dc:	ldr	r2, [sp, #40]	; 0x28
   139e0:	str	r3, [r9, #32]
   139e4:	orrs	r2, r2, r7
   139e8:	moveq	r3, #4
   139ec:	movne	r3, #7
   139f0:	strh	r3, [r9, #56]	; 0x38
   139f4:	ldr	r0, [r9, #12]
   139f8:	cmp	r0, #0
   139fc:	beq	13900 <__assert_fail@plt+0x2754>
   13a00:	bl	111a0 <closedir@plt>
   13a04:	mov	r3, #0
   13a08:	str	r3, [r9, #12]
   13a0c:	b	13900 <__assert_fail@plt+0x2754>
   13a10:	movw	r3, #10216	; 0x27e8
   13a14:	movt	r3, #1
   13a18:	ldr	r1, [sp, #4]
   13a1c:	mov	r2, r7
   13a20:	mov	r0, r5
   13a24:	str	r3, [r5, #44]	; 0x2c
   13a28:	bl	12818 <__assert_fail@plt+0x166c>
   13a2c:	mov	r3, #0
   13a30:	str	r0, [sp, #4]
   13a34:	str	r3, [r5, #44]	; 0x2c
   13a38:	b	13870 <__assert_fail@plt+0x26c4>
   13a3c:	movw	r3, #34464	; 0x86a0
   13a40:	movt	r3, #1
   13a44:	mov	r2, #1
   13a48:	str	r3, [sp, #16]
   13a4c:	str	r2, [sp, #52]	; 0x34
   13a50:	ldr	r3, [r5, #48]	; 0x30
   13a54:	b	13308 <__assert_fail@plt+0x215c>
   13a58:	mov	r3, #0
   13a5c:	str	r3, [sp, #52]	; 0x34
   13a60:	ldr	r3, [r5, #48]	; 0x30
   13a64:	b	13308 <__assert_fail@plt+0x215c>
   13a68:	add	r4, r5, #56	; 0x38
   13a6c:	mov	r2, r9
   13a70:	mov	r1, r4
   13a74:	bl	131d8 <__assert_fail@plt+0x202c>
   13a78:	mov	r3, #0
   13a7c:	mov	r2, r9
   13a80:	ldr	r0, [r5, #32]
   13a84:	ldr	r1, [r5, #48]	; 0x30
   13a88:	bl	12c3c <__assert_fail@plt+0x1a90>
   13a8c:	mov	r1, r4
   13a90:	mov	r2, r9
   13a94:	ldr	r0, [r5, #48]	; 0x30
   13a98:	bl	13104 <__assert_fail@plt+0x1f58>
   13a9c:	subs	r4, r0, #0
   13aa0:	bne	13670 <__assert_fail@plt+0x24c4>
   13aa4:	bl	11068 <__errno_location@plt>
   13aa8:	mov	r3, #12
   13aac:	str	r4, [sp, #4]
   13ab0:	str	r3, [r0]
   13ab4:	b	13870 <__assert_fail@plt+0x26c4>
   13ab8:	ldr	r3, [sp, #32]
   13abc:	cmp	r3, #3
   13ac0:	bne	13ad8 <__assert_fail@plt+0x292c>
   13ac4:	ldrh	r3, [r9, #56]	; 0x38
   13ac8:	cmp	r3, #7
   13acc:	cmpne	r3, #4
   13ad0:	movne	r3, #6
   13ad4:	strhne	r3, [r9, #56]	; 0x38
   13ad8:	mov	r3, #0
   13adc:	ldr	r0, [sp, #4]
   13ae0:	str	r3, [sp, #4]
   13ae4:	bl	1299c <__assert_fail@plt+0x17f0>
   13ae8:	b	13870 <__assert_fail@plt+0x26c4>
   13aec:	mov	r1, r0
   13af0:	mov	r3, #0
   13af4:	ldr	r0, [r5, #32]
   13af8:	mov	r2, r9
   13afc:	bl	12c3c <__assert_fail@plt+0x1a90>
   13b00:	strh	r0, [r9, #56]	; 0x38
   13b04:	b	13670 <__assert_fail@plt+0x24c4>
   13b08:	movw	r3, #42820	; 0xa744
   13b0c:	movt	r3, #1
   13b10:	ldr	r1, [r9, #4]
   13b14:	mvn	r2, #0
   13b18:	mov	r0, r5
   13b1c:	bl	12ee8 <__assert_fail@plt+0x1d3c>
   13b20:	adds	r0, r0, #0
   13b24:	movne	r0, #1
   13b28:	b	13988 <__assert_fail@plt+0x27dc>
   13b2c:	mov	r2, r0
   13b30:	mov	r3, #0
   13b34:	mov	r1, r9
   13b38:	mov	r0, r5
   13b3c:	bl	12ee8 <__assert_fail@plt+0x1d3c>
   13b40:	cmp	r0, #0
   13b44:	bne	136d0 <__assert_fail@plt+0x2524>
   13b48:	mov	r3, #1
   13b4c:	str	r3, [sp, #52]	; 0x34
   13b50:	ldr	r3, [r5, #48]	; 0x30
   13b54:	b	13308 <__assert_fail@plt+0x215c>
   13b58:	ldr	r0, [r9, #12]
   13b5c:	mov	r4, #0
   13b60:	bl	111a0 <closedir@plt>
   13b64:	ldr	r3, [sp, #32]
   13b68:	str	r4, [r9, #12]
   13b6c:	cmp	r3, #3
   13b70:	beq	13bc4 <__assert_fail@plt+0x2a18>
   13b74:	mov	r3, #0
   13b78:	str	r3, [sp, #4]
   13b7c:	b	13870 <__assert_fail@plt+0x26c4>
   13b80:	bl	11188 <close@plt>
   13b84:	ldr	r3, [r5, #48]	; 0x30
   13b88:	b	13718 <__assert_fail@plt+0x256c>
   13b8c:	mov	r2, #3
   13b90:	movw	r1, #1030	; 0x406
   13b94:	bl	19488 <__assert_fail@plt+0x82dc>
   13b98:	str	r0, [sp, #60]	; 0x3c
   13b9c:	b	136c8 <__assert_fail@plt+0x251c>
   13ba0:	ldr	r3, [sp, #32]
   13ba4:	cmp	r3, #3
   13ba8:	bne	13b74 <__assert_fail@plt+0x29c8>
   13bac:	mov	r3, #4
   13bb0:	strh	r3, [r9, #56]	; 0x38
   13bb4:	bl	11068 <__errno_location@plt>
   13bb8:	ldr	r3, [r0]
   13bbc:	str	r3, [r9, #32]
   13bc0:	b	13870 <__assert_fail@plt+0x26c4>
   13bc4:	mov	r3, #4
   13bc8:	str	r4, [sp, #4]
   13bcc:	strh	r3, [r9, #56]	; 0x38
   13bd0:	bl	11068 <__errno_location@plt>
   13bd4:	ldr	r3, [r0]
   13bd8:	str	r3, [r9, #32]
   13bdc:	b	13870 <__assert_fail@plt+0x26c4>
   13be0:	ldr	r3, [r5, #48]	; 0x30
   13be4:	mov	r2, #7
   13be8:	mov	r1, #0
   13bec:	strh	r2, [r9, #56]	; 0x38
   13bf0:	ldr	r0, [sp, #4]
   13bf4:	str	r1, [sp, #4]
   13bf8:	orr	r3, r3, #8192	; 0x2000
   13bfc:	str	r3, [r5, #48]	; 0x30
   13c00:	bl	1299c <__assert_fail@plt+0x17f0>
   13c04:	b	13870 <__assert_fail@plt+0x26c4>
   13c08:	movw	r3, #40864	; 0x9fa0
   13c0c:	cmp	r0, r3
   13c10:	beq	13c24 <__assert_fail@plt+0x2a78>
   13c14:	movw	r3, #16719	; 0x414f
   13c18:	movt	r3, #21318	; 0x5346
   13c1c:	cmp	r0, r3
   13c20:	bne	138e0 <__assert_fail@plt+0x2734>
   13c24:	ldr	r0, [sp, #60]	; 0x3c
   13c28:	b	136a8 <__assert_fail@plt+0x24fc>
   13c2c:	ldr	r9, [sp, #8]
   13c30:	mov	r0, r4
   13c34:	bl	19710 <__assert_fail@plt+0x8564>
   13c38:	ldr	r0, [sp, #4]
   13c3c:	bl	1299c <__assert_fail@plt+0x17f0>
   13c40:	ldr	r0, [r9, #12]
   13c44:	bl	111a0 <closedir@plt>
   13c48:	ldr	r3, [r5, #48]	; 0x30
   13c4c:	mov	r2, #0
   13c50:	mov	r0, #7
   13c54:	mov	r1, #36	; 0x24
   13c58:	str	r2, [sp, #4]
   13c5c:	str	r2, [r9, #12]
   13c60:	strh	r0, [r9, #56]	; 0x38
   13c64:	orr	r3, r3, #8192	; 0x2000
   13c68:	str	r3, [r5, #48]	; 0x30
   13c6c:	str	r1, [r8]
   13c70:	b	13870 <__assert_fail@plt+0x26c4>
   13c74:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c78:	bic	r5, r1, #4080	; 0xff0
   13c7c:	bic	r5, r5, #15
   13c80:	strd	r6, [sp, #8]
   13c84:	cmp	r5, #0
   13c88:	strd	r8, [sp, #16]
   13c8c:	strd	sl, [sp, #24]
   13c90:	str	lr, [sp, #32]
   13c94:	sub	sp, sp, #12
   13c98:	bne	13fb4 <__assert_fail@plt+0x2e08>
   13c9c:	and	r3, r1, #516	; 0x204
   13ca0:	mov	r7, r1
   13ca4:	cmp	r3, #516	; 0x204
   13ca8:	beq	13f50 <__assert_fail@plt+0x2da4>
   13cac:	ands	r5, r1, #18
   13cb0:	beq	13f50 <__assert_fail@plt+0x2da4>
   13cb4:	mov	r6, r0
   13cb8:	mov	r1, #96	; 0x60
   13cbc:	mov	r0, #1
   13cc0:	mov	r9, r2
   13cc4:	bl	19124 <__assert_fail@plt+0x7f78>
   13cc8:	subs	r5, r0, #0
   13ccc:	beq	13f08 <__assert_fail@plt+0x2d5c>
   13cd0:	tst	r7, #2
   13cd4:	mvn	r2, #99	; 0x63
   13cd8:	bicne	r3, r7, #512	; 0x200
   13cdc:	orrne	r3, r3, #4
   13ce0:	streq	r7, [r5, #48]	; 0x30
   13ce4:	str	r2, [r5, #32]
   13ce8:	strne	r3, [r5, #48]	; 0x30
   13cec:	ldr	r3, [r6]
   13cf0:	str	r9, [r5, #44]	; 0x2c
   13cf4:	cmp	r3, #0
   13cf8:	beq	13fc8 <__assert_fail@plt+0x2e1c>
   13cfc:	mov	r8, r6
   13d00:	mov	r4, #0
   13d04:	mov	r0, r3
   13d08:	bl	11044 <strlen@plt>
   13d0c:	ldr	r3, [r8, #4]!
   13d10:	cmp	r4, r0
   13d14:	movcc	r4, r0
   13d18:	cmp	r3, #0
   13d1c:	bne	13d04 <__assert_fail@plt+0x2b58>
   13d20:	add	r2, r4, #1
   13d24:	cmp	r2, #4096	; 0x1000
   13d28:	movcc	r2, #4096	; 0x1000
   13d2c:	add	r1, r5, #36	; 0x24
   13d30:	add	r0, r5, #24
   13d34:	bl	12d98 <__assert_fail@plt+0x1bec>
   13d38:	subs	fp, r0, #0
   13d3c:	beq	13f40 <__assert_fail@plt+0x2d94>
   13d40:	ldr	sl, [r6]
   13d44:	cmp	sl, #0
   13d48:	beq	13fa4 <__assert_fail@plt+0x2df8>
   13d4c:	movw	r1, #40544	; 0x9e60
   13d50:	movt	r1, #1
   13d54:	mov	r2, #0
   13d58:	mov	r0, r5
   13d5c:	bl	1290c <__assert_fail@plt+0x1760>
   13d60:	subs	sl, r0, #0
   13d64:	beq	13f38 <__assert_fail@plt+0x2d8c>
   13d68:	mvn	r3, #0
   13d6c:	cmp	r9, #0
   13d70:	ldr	r4, [r6]
   13d74:	str	r3, [sl, #48]	; 0x30
   13d78:	beq	13d84 <__assert_fail@plt+0x2bd8>
   13d7c:	ldr	fp, [r5, #48]	; 0x30
   13d80:	ubfx	fp, fp, #10, #1
   13d84:	cmp	r4, #0
   13d88:	beq	14004 <__assert_fail@plt+0x2e58>
   13d8c:	eor	r7, r7, #2048	; 0x800
   13d90:	mov	r3, #0
   13d94:	ubfx	r2, r7, #11, #1
   13d98:	mov	r8, r3
   13d9c:	mov	r7, r3
   13da0:	strd	r2, [sp]
   13da4:	b	13ddc <__assert_fail@plt+0x2c30>
   13da8:	mov	r3, #11
   13dac:	mov	r2, #2
   13db0:	cmp	r9, r1
   13db4:	strh	r3, [r4, #56]	; 0x38
   13db8:	mov	r3, #0
   13dbc:	strd	r2, [r4, #112]	; 0x70
   13dc0:	beq	13f90 <__assert_fail@plt+0x2de4>
   13dc4:	str	r7, [r4, #8]
   13dc8:	mov	r7, r4
   13dcc:	ldr	r4, [r6, #4]!
   13dd0:	add	r8, r8, #1
   13dd4:	cmp	r4, #0
   13dd8:	beq	13e88 <__assert_fail@plt+0x2cdc>
   13ddc:	mov	r0, r4
   13de0:	bl	11044 <strlen@plt>
   13de4:	ldr	r3, [sp]
   13de8:	mov	r2, r0
   13dec:	cmp	r0, #2
   13df0:	movls	r3, #0
   13df4:	andhi	r3, r3, #1
   13df8:	cmp	r3, #0
   13dfc:	bne	13f60 <__assert_fail@plt+0x2db4>
   13e00:	mov	r1, r4
   13e04:	mov	r0, r5
   13e08:	bl	1290c <__assert_fail@plt+0x1760>
   13e0c:	subs	r4, r0, #0
   13e10:	beq	13f28 <__assert_fail@plt+0x2d7c>
   13e14:	add	r2, r4, #168	; 0xa8
   13e18:	cmp	r7, #0
   13e1c:	moveq	r3, #0
   13e20:	andne	r3, fp, #1
   13e24:	str	sl, [r4, #4]
   13e28:	mov	r1, #0
   13e2c:	cmp	r3, #0
   13e30:	str	r2, [r4, #24]
   13e34:	str	r1, [r4, #48]	; 0x30
   13e38:	bne	13da8 <__assert_fail@plt+0x2bfc>
   13e3c:	mov	r2, r4
   13e40:	ldr	r0, [r5, #32]
   13e44:	ldr	r1, [r5, #48]	; 0x30
   13e48:	bl	12c3c <__assert_fail@plt+0x1a90>
   13e4c:	cmp	r9, #0
   13e50:	strh	r0, [r4, #56]	; 0x38
   13e54:	bne	13dc4 <__assert_fail@plt+0x2c18>
   13e58:	cmp	r7, #0
   13e5c:	str	r9, [r4, #8]
   13e60:	moveq	r7, r4
   13e64:	streq	r4, [sp, #4]
   13e68:	beq	13dcc <__assert_fail@plt+0x2c20>
   13e6c:	ldr	r3, [sp, #4]
   13e70:	str	r4, [sp, #4]
   13e74:	str	r4, [r3, #8]
   13e78:	ldr	r4, [r6, #4]!
   13e7c:	add	r8, r8, #1
   13e80:	cmp	r4, #0
   13e84:	bne	13ddc <__assert_fail@plt+0x2c30>
   13e88:	cmp	r9, #0
   13e8c:	cmpne	r8, #1
   13e90:	bls	13ea8 <__assert_fail@plt+0x2cfc>
   13e94:	mov	r1, r7
   13e98:	mov	r2, r8
   13e9c:	mov	r0, r5
   13ea0:	bl	12818 <__assert_fail@plt+0x166c>
   13ea4:	mov	r7, r0
   13ea8:	movw	r1, #40544	; 0x9e60
   13eac:	movt	r1, #1
   13eb0:	mov	r2, #0
   13eb4:	mov	r0, r5
   13eb8:	bl	1290c <__assert_fail@plt+0x1760>
   13ebc:	cmp	r0, #0
   13ec0:	str	r0, [r5]
   13ec4:	beq	13f28 <__assert_fail@plt+0x2d7c>
   13ec8:	mov	r2, #1
   13ecc:	mov	r3, #9
   13ed0:	str	r7, [r0, #8]
   13ed4:	add	r1, r5, #56	; 0x38
   13ed8:	str	r2, [r0, #48]	; 0x30
   13edc:	strh	r3, [r0, #56]	; 0x38
   13ee0:	ldr	r0, [r5, #48]	; 0x30
   13ee4:	bl	12e28 <__assert_fail@plt+0x1c7c>
   13ee8:	cmp	r0, #0
   13eec:	beq	13f28 <__assert_fail@plt+0x2d7c>
   13ef0:	ldr	r1, [r5, #48]	; 0x30
   13ef4:	tst	r1, #516	; 0x204
   13ef8:	beq	13fd0 <__assert_fail@plt+0x2e24>
   13efc:	mvn	r1, #0
   13f00:	add	r0, r5, #60	; 0x3c
   13f04:	bl	15b9c <__assert_fail@plt+0x49f0>
   13f08:	mov	r0, r5
   13f0c:	add	sp, sp, #12
   13f10:	ldrd	r4, [sp]
   13f14:	ldrd	r6, [sp, #8]
   13f18:	ldrd	r8, [sp, #16]
   13f1c:	ldrd	sl, [sp, #24]
   13f20:	add	sp, sp, #32
   13f24:	pop	{pc}		; (ldr pc, [sp], #4)
   13f28:	mov	r0, r7
   13f2c:	bl	1299c <__assert_fail@plt+0x17f0>
   13f30:	mov	r0, sl
   13f34:	bl	19710 <__assert_fail@plt+0x8564>
   13f38:	ldr	r0, [r5, #24]
   13f3c:	bl	19710 <__assert_fail@plt+0x8564>
   13f40:	mov	r0, r5
   13f44:	mov	r5, #0
   13f48:	bl	19710 <__assert_fail@plt+0x8564>
   13f4c:	b	13f08 <__assert_fail@plt+0x2d5c>
   13f50:	bl	11068 <__errno_location@plt>
   13f54:	mov	r3, #22
   13f58:	str	r3, [r0]
   13f5c:	b	13f08 <__assert_fail@plt+0x2d5c>
   13f60:	sub	r3, r0, #1
   13f64:	ldrb	r1, [r4, r3]
   13f68:	add	r3, r4, r3
   13f6c:	cmp	r1, #47	; 0x2f
   13f70:	bne	13e00 <__assert_fail@plt+0x2c54>
   13f74:	ldrb	r1, [r3, #-1]!
   13f78:	cmp	r1, #47	; 0x2f
   13f7c:	bne	13e00 <__assert_fail@plt+0x2c54>
   13f80:	sub	r2, r2, #1
   13f84:	cmp	r2, #1
   13f88:	bne	13f74 <__assert_fail@plt+0x2dc8>
   13f8c:	b	13e00 <__assert_fail@plt+0x2c54>
   13f90:	ldr	r3, [sp, #4]
   13f94:	str	r4, [sp, #4]
   13f98:	str	r9, [r4, #8]
   13f9c:	str	r4, [r3, #8]
   13fa0:	b	13e78 <__assert_fail@plt+0x2ccc>
   13fa4:	cmp	r9, #0
   13fa8:	beq	13ffc <__assert_fail@plt+0x2e50>
   13fac:	mov	r4, sl
   13fb0:	b	13d7c <__assert_fail@plt+0x2bd0>
   13fb4:	bl	11068 <__errno_location@plt>
   13fb8:	mov	r3, #22
   13fbc:	mov	r5, #0
   13fc0:	str	r3, [r0]
   13fc4:	b	13f08 <__assert_fail@plt+0x2d5c>
   13fc8:	mov	r2, #4096	; 0x1000
   13fcc:	b	13d2c <__assert_fail@plt+0x2b80>
   13fd0:	movw	r2, #42824	; 0xa748
   13fd4:	movt	r2, #1
   13fd8:	ldr	r0, [r5, #32]
   13fdc:	bl	12eb8 <__assert_fail@plt+0x1d0c>
   13fe0:	cmp	r0, #0
   13fe4:	str	r0, [r5, #28]
   13fe8:	bge	13efc <__assert_fail@plt+0x2d50>
   13fec:	ldr	r3, [r5, #48]	; 0x30
   13ff0:	orr	r3, r3, #4
   13ff4:	str	r3, [r5, #48]	; 0x30
   13ff8:	b	13efc <__assert_fail@plt+0x2d50>
   13ffc:	mov	r7, sl
   14000:	b	13ea8 <__assert_fail@plt+0x2cfc>
   14004:	mov	r7, r4
   14008:	b	13ea8 <__assert_fail@plt+0x2cfc>
   1400c:	ldr	r3, [r0]
   14010:	strd	r4, [sp, #-16]!
   14014:	mov	r5, r0
   14018:	str	r6, [sp, #8]
   1401c:	str	lr, [sp, #12]
   14020:	cmp	r3, #0
   14024:	beq	14060 <__assert_fail@plt+0x2eb4>
   14028:	ldr	r2, [r3, #48]	; 0x30
   1402c:	cmp	r2, #0
   14030:	blt	14180 <__assert_fail@plt+0x2fd4>
   14034:	ldr	r4, [r3, #8]
   14038:	mov	r0, r3
   1403c:	cmp	r4, #0
   14040:	ldreq	r4, [r3, #4]
   14044:	bl	19710 <__assert_fail@plt+0x8564>
   14048:	ldr	r2, [r4, #48]	; 0x30
   1404c:	mov	r3, r4
   14050:	cmp	r2, #0
   14054:	bge	14034 <__assert_fail@plt+0x2e88>
   14058:	mov	r0, r4
   1405c:	bl	19710 <__assert_fail@plt+0x8564>
   14060:	ldr	r0, [r5, #4]
   14064:	cmp	r0, #0
   14068:	beq	14070 <__assert_fail@plt+0x2ec4>
   1406c:	bl	1299c <__assert_fail@plt+0x17f0>
   14070:	ldr	r0, [r5, #8]
   14074:	bl	19710 <__assert_fail@plt+0x8564>
   14078:	ldr	r0, [r5, #24]
   1407c:	bl	19710 <__assert_fail@plt+0x8564>
   14080:	ldr	r3, [r5, #48]	; 0x30
   14084:	tst	r3, #512	; 0x200
   14088:	bne	140f4 <__assert_fail@plt+0x2f48>
   1408c:	tst	r3, #4
   14090:	beq	14120 <__assert_fail@plt+0x2f74>
   14094:	mov	r4, #0
   14098:	add	r0, r5, #60	; 0x3c
   1409c:	bl	129e4 <__assert_fail@plt+0x1838>
   140a0:	ldr	r0, [r5, #52]	; 0x34
   140a4:	cmp	r0, #0
   140a8:	beq	140b0 <__assert_fail@plt+0x2f04>
   140ac:	bl	1561c <__assert_fail@plt+0x4470>
   140b0:	ldr	r3, [r5, #48]	; 0x30
   140b4:	movw	r2, #258	; 0x102
   140b8:	ldr	r0, [r5, #56]	; 0x38
   140bc:	tst	r2, r3
   140c0:	beq	14118 <__assert_fail@plt+0x2f6c>
   140c4:	cmp	r0, #0
   140c8:	beq	140d0 <__assert_fail@plt+0x2f24>
   140cc:	bl	1561c <__assert_fail@plt+0x4470>
   140d0:	mov	r0, r5
   140d4:	bl	19710 <__assert_fail@plt+0x8564>
   140d8:	cmp	r4, #0
   140dc:	bne	14188 <__assert_fail@plt+0x2fdc>
   140e0:	mov	r0, r4
   140e4:	ldrd	r4, [sp]
   140e8:	ldr	r6, [sp, #8]
   140ec:	add	sp, sp, #12
   140f0:	pop	{pc}		; (ldr pc, [sp], #4)
   140f4:	ldr	r0, [r5, #32]
   140f8:	cmp	r0, #0
   140fc:	blt	14094 <__assert_fail@plt+0x2ee8>
   14100:	bl	11188 <close@plt>
   14104:	cmp	r0, #0
   14108:	beq	14094 <__assert_fail@plt+0x2ee8>
   1410c:	bl	11068 <__errno_location@plt>
   14110:	ldr	r4, [r0]
   14114:	b	14098 <__assert_fail@plt+0x2eec>
   14118:	bl	19710 <__assert_fail@plt+0x8564>
   1411c:	b	140d0 <__assert_fail@plt+0x2f24>
   14120:	ldr	r0, [r5, #28]
   14124:	bl	11128 <fchdir@plt>
   14128:	cmp	r0, #0
   1412c:	bne	14150 <__assert_fail@plt+0x2fa4>
   14130:	ldr	r0, [r5, #28]
   14134:	bl	11188 <close@plt>
   14138:	cmp	r0, #0
   1413c:	beq	14094 <__assert_fail@plt+0x2ee8>
   14140:	bl	11068 <__errno_location@plt>
   14144:	mov	r6, r0
   14148:	ldr	r4, [r6]
   1414c:	b	14098 <__assert_fail@plt+0x2eec>
   14150:	bl	11068 <__errno_location@plt>
   14154:	mov	r6, r0
   14158:	ldr	r0, [r5, #28]
   1415c:	ldr	r4, [r6]
   14160:	bl	11188 <close@plt>
   14164:	adds	r3, r0, #0
   14168:	movne	r3, #1
   1416c:	cmp	r4, #0
   14170:	movne	r3, #0
   14174:	cmp	r3, #0
   14178:	beq	14098 <__assert_fail@plt+0x2eec>
   1417c:	b	14148 <__assert_fail@plt+0x2f9c>
   14180:	mov	r4, r3
   14184:	b	14058 <__assert_fail@plt+0x2eac>
   14188:	bl	11068 <__errno_location@plt>
   1418c:	str	r4, [r0]
   14190:	mvn	r4, #0
   14194:	b	140e0 <__assert_fail@plt+0x2f34>
   14198:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1419c:	ldr	r4, [r0]
   141a0:	strd	r6, [sp, #8]
   141a4:	str	r8, [sp, #16]
   141a8:	str	lr, [sp, #20]
   141ac:	cmp	r4, #0
   141b0:	beq	142d0 <__assert_fail@plt+0x3124>
   141b4:	ldr	r1, [r0, #48]	; 0x30
   141b8:	ands	r3, r1, #8192	; 0x2000
   141bc:	bne	142d0 <__assert_fail@plt+0x3124>
   141c0:	ldrh	r2, [r4, #60]	; 0x3c
   141c4:	mov	r8, r0
   141c8:	mov	r0, #3
   141cc:	strh	r0, [r4, #60]	; 0x3c
   141d0:	cmp	r2, #1
   141d4:	beq	1457c <__assert_fail@plt+0x33d0>
   141d8:	cmp	r2, #2
   141dc:	ldrh	r3, [r4, #56]	; 0x38
   141e0:	beq	142ec <__assert_fail@plt+0x3140>
   141e4:	cmp	r3, #1
   141e8:	bne	14218 <__assert_fail@plt+0x306c>
   141ec:	b	14398 <__assert_fail@plt+0x31ec>
   141f0:	mov	r0, r4
   141f4:	str	r5, [r8]
   141f8:	bl	19710 <__assert_fail@plt+0x8564>
   141fc:	ldr	r4, [r5, #48]	; 0x30
   14200:	cmp	r4, #0
   14204:	beq	143e0 <__assert_fail@plt+0x3234>
   14208:	ldrh	r3, [r5, #60]	; 0x3c
   1420c:	mov	r4, r5
   14210:	cmp	r3, #4
   14214:	bne	14498 <__assert_fail@plt+0x32ec>
   14218:	ldr	r5, [r4, #8]
   1421c:	cmp	r5, #0
   14220:	bne	141f0 <__assert_fail@plt+0x3044>
   14224:	ldr	r6, [r4, #4]
   14228:	ldr	r3, [r6, #12]
   1422c:	cmp	r3, #0
   14230:	bne	146a0 <__assert_fail@plt+0x34f4>
   14234:	mov	r0, r4
   14238:	str	r6, [r8]
   1423c:	bl	19710 <__assert_fail@plt+0x8564>
   14240:	ldr	r3, [r6, #48]	; 0x30
   14244:	cmn	r3, #1
   14248:	beq	14644 <__assert_fail@plt+0x3498>
   1424c:	ldrh	r3, [r6, #56]	; 0x38
   14250:	cmp	r3, #11
   14254:	beq	14578 <__assert_fail@plt+0x33cc>
   14258:	ldr	r2, [r8, #24]
   1425c:	mov	r1, #0
   14260:	ldr	r3, [r6, #40]	; 0x28
   14264:	strb	r1, [r2, r3]
   14268:	ldr	r3, [r6, #48]	; 0x30
   1426c:	cmp	r3, r1
   14270:	beq	14664 <__assert_fail@plt+0x34b8>
   14274:	ldrh	r3, [r6, #58]	; 0x3a
   14278:	tst	r3, #2
   1427c:	bne	145f8 <__assert_fail@plt+0x344c>
   14280:	tst	r3, #1
   14284:	beq	14738 <__assert_fail@plt+0x358c>
   14288:	ldrh	r3, [r6, #56]	; 0x38
   1428c:	ldr	r0, [r8, #48]	; 0x30
   14290:	cmp	r3, #2
   14294:	beq	142c4 <__assert_fail@plt+0x3118>
   14298:	ldr	r3, [r6, #32]
   1429c:	cmp	r3, #0
   142a0:	movne	r3, #7
   142a4:	strhne	r3, [r6, #56]	; 0x38
   142a8:	bne	142c4 <__assert_fail@plt+0x3118>
   142ac:	mov	r3, #6
   142b0:	mov	r2, r6
   142b4:	add	r1, r8, #56	; 0x38
   142b8:	strh	r3, [r6, #56]	; 0x38
   142bc:	bl	131d8 <__assert_fail@plt+0x202c>
   142c0:	ldr	r0, [r8, #48]	; 0x30
   142c4:	tst	r0, #8192	; 0x2000
   142c8:	moveq	r4, r6
   142cc:	beq	142d4 <__assert_fail@plt+0x3128>
   142d0:	mov	r4, #0
   142d4:	mov	r0, r4
   142d8:	ldrd	r4, [sp]
   142dc:	ldrd	r6, [sp, #8]
   142e0:	ldr	r8, [sp, #16]
   142e4:	add	sp, sp, #20
   142e8:	pop	{pc}		; (ldr pc, [sp], #4)
   142ec:	sub	r2, r3, #12
   142f0:	cmp	r2, #1
   142f4:	bls	14534 <__assert_fail@plt+0x3388>
   142f8:	cmp	r3, #1
   142fc:	bne	14218 <__assert_fail@plt+0x306c>
   14300:	tst	r1, #64	; 0x40
   14304:	beq	1431c <__assert_fail@plt+0x3170>
   14308:	ldrd	r2, [r8, #16]
   1430c:	ldrd	r6, [r4, #64]	; 0x40
   14310:	cmp	r7, r3
   14314:	cmpeq	r6, r2
   14318:	bne	143a0 <__assert_fail@plt+0x31f4>
   1431c:	ldr	r0, [r8, #4]
   14320:	cmp	r0, #0
   14324:	beq	145a4 <__assert_fail@plt+0x33f8>
   14328:	tst	r1, #4096	; 0x1000
   1432c:	bne	14590 <__assert_fail@plt+0x33e4>
   14330:	mvn	r2, #0
   14334:	mov	r1, r4
   14338:	ldr	r3, [r4, #24]
   1433c:	mov	r0, r8
   14340:	bl	12ee8 <__assert_fail@plt+0x1d3c>
   14344:	cmp	r0, #0
   14348:	beq	1462c <__assert_fail@plt+0x3480>
   1434c:	bl	11068 <__errno_location@plt>
   14350:	ldrh	r3, [r4, #58]	; 0x3a
   14354:	ldr	r2, [r0]
   14358:	orr	r3, r3, #1
   1435c:	str	r2, [r4, #32]
   14360:	strh	r3, [r4, #58]	; 0x3a
   14364:	ldr	r4, [r8, #4]
   14368:	cmp	r4, #0
   1436c:	beq	1438c <__assert_fail@plt+0x31e0>
   14370:	mov	r3, r4
   14374:	ldr	r2, [r3, #4]
   14378:	ldr	r2, [r2, #24]
   1437c:	str	r2, [r3, #24]
   14380:	ldr	r3, [r3, #8]
   14384:	cmp	r3, #0
   14388:	bne	14374 <__assert_fail@plt+0x31c8>
   1438c:	mov	r3, #0
   14390:	str	r3, [r8, #4]
   14394:	b	144a0 <__assert_fail@plt+0x32f4>
   14398:	cmp	r2, #4
   1439c:	bne	14300 <__assert_fail@plt+0x3154>
   143a0:	ldrh	r3, [r4, #58]	; 0x3a
   143a4:	tst	r3, #2
   143a8:	bne	146e0 <__assert_fail@plt+0x3534>
   143ac:	ldr	r0, [r8, #4]
   143b0:	cmp	r0, #0
   143b4:	beq	143c4 <__assert_fail@plt+0x3218>
   143b8:	bl	1299c <__assert_fail@plt+0x17f0>
   143bc:	mov	r3, #0
   143c0:	str	r3, [r8, #4]
   143c4:	mov	r3, #6
   143c8:	mov	r2, r4
   143cc:	ldr	r0, [r8, #48]	; 0x30
   143d0:	add	r1, r8, #56	; 0x38
   143d4:	strh	r3, [r4, #56]	; 0x38
   143d8:	bl	131d8 <__assert_fail@plt+0x202c>
   143dc:	b	142d4 <__assert_fail@plt+0x3128>
   143e0:	mov	r0, r8
   143e4:	bl	12bd8 <__assert_fail@plt+0x1a2c>
   143e8:	ldr	r3, [r8, #48]	; 0x30
   143ec:	cmp	r0, #0
   143f0:	orrne	r3, r3, #8192	; 0x2000
   143f4:	strne	r3, [r8, #48]	; 0x30
   143f8:	bne	142d4 <__assert_fail@plt+0x3128>
   143fc:	movw	r2, #258	; 0x102
   14400:	ldr	r0, [r8, #56]	; 0x38
   14404:	tst	r2, r3
   14408:	beq	146d8 <__assert_fail@plt+0x352c>
   1440c:	cmp	r0, #0
   14410:	beq	14418 <__assert_fail@plt+0x326c>
   14414:	bl	1561c <__assert_fail@plt+0x4470>
   14418:	ldr	r2, [r5, #52]	; 0x34
   1441c:	add	r4, r5, #168	; 0xa8
   14420:	mov	r1, r4
   14424:	ldr	r0, [r8, #24]
   14428:	str	r2, [r5, #40]	; 0x28
   1442c:	add	r2, r2, #1
   14430:	bl	10f00 <memmove@plt>
   14434:	mov	r0, r4
   14438:	mov	r1, #47	; 0x2f
   1443c:	bl	110ec <strrchr@plt>
   14440:	cmp	r0, #0
   14444:	beq	14474 <__assert_fail@plt+0x32c8>
   14448:	cmp	r4, r0
   1444c:	beq	14634 <__assert_fail@plt+0x3488>
   14450:	add	r6, r0, #1
   14454:	mov	r0, r6
   14458:	bl	11044 <strlen@plt>
   1445c:	mov	r7, r0
   14460:	mov	r1, r6
   14464:	mov	r0, r4
   14468:	add	r2, r7, #1
   1446c:	bl	10f00 <memmove@plt>
   14470:	str	r7, [r5, #52]	; 0x34
   14474:	ldr	r3, [r8, #24]
   14478:	add	r1, r8, #56	; 0x38
   1447c:	mov	r4, r5
   14480:	ldr	r0, [r8, #48]	; 0x30
   14484:	str	r3, [r5, #24]
   14488:	str	r3, [r5, #28]
   1448c:	bl	12e28 <__assert_fail@plt+0x1c7c>
   14490:	ldrh	r0, [r5, #56]	; 0x38
   14494:	b	144e4 <__assert_fail@plt+0x3338>
   14498:	cmp	r3, #2
   1449c:	beq	14708 <__assert_fail@plt+0x355c>
   144a0:	ldr	r0, [r4, #4]
   144a4:	mov	ip, #47	; 0x2f
   144a8:	add	r1, r4, #168	; 0xa8
   144ac:	ldr	r3, [r8, #24]
   144b0:	ldr	lr, [r0, #28]
   144b4:	ldr	r2, [r0, #40]	; 0x28
   144b8:	sub	r0, r2, #1
   144bc:	ldrb	lr, [lr, r0]
   144c0:	cmp	lr, ip
   144c4:	movne	r0, r2
   144c8:	strb	ip, [r3, r0]
   144cc:	add	r0, r3, r0
   144d0:	ldr	r2, [r4, #52]	; 0x34
   144d4:	add	r0, r0, #1
   144d8:	add	r2, r2, #1
   144dc:	bl	10f00 <memmove@plt>
   144e0:	ldrh	r0, [r4, #56]	; 0x38
   144e4:	cmp	r0, #11
   144e8:	str	r4, [r8]
   144ec:	beq	1455c <__assert_fail@plt+0x33b0>
   144f0:	cmp	r0, #1
   144f4:	bne	142d4 <__assert_fail@plt+0x3128>
   144f8:	ldr	r3, [r4, #48]	; 0x30
   144fc:	add	r1, r8, #56	; 0x38
   14500:	ldr	r0, [r8, #48]	; 0x30
   14504:	cmp	r3, #0
   14508:	ldrdeq	r2, [r4, #64]	; 0x40
   1450c:	strdeq	r2, [r8, #16]
   14510:	mov	r2, r4
   14514:	bl	13104 <__assert_fail@plt+0x1f58>
   14518:	subs	r5, r0, #0
   1451c:	bne	142d4 <__assert_fail@plt+0x3128>
   14520:	bl	11068 <__errno_location@plt>
   14524:	mov	r3, #12
   14528:	mov	r4, r5
   1452c:	str	r3, [r0]
   14530:	b	142d4 <__assert_fail@plt+0x3128>
   14534:	mov	r3, #1
   14538:	mov	r2, r4
   1453c:	ldr	r0, [r8, #32]
   14540:	bl	12c3c <__assert_fail@plt+0x1a90>
   14544:	cmp	r0, #1
   14548:	strh	r0, [r4, #56]	; 0x38
   1454c:	beq	14780 <__assert_fail@plt+0x35d4>
   14550:	cmp	r0, #11
   14554:	str	r4, [r8]
   14558:	bne	142d4 <__assert_fail@plt+0x3128>
   1455c:	ldrd	r2, [r4, #112]	; 0x70
   14560:	cmp	r3, #0
   14564:	cmpeq	r2, #2
   14568:	beq	146ec <__assert_fail@plt+0x3540>
   1456c:	cmp	r3, #0
   14570:	cmpeq	r2, #1
   14574:	beq	142d4 <__assert_fail@plt+0x3128>
   14578:	bl	1117c <abort@plt>
   1457c:	mov	r2, r4
   14580:	ldr	r0, [r8, #32]
   14584:	bl	12c3c <__assert_fail@plt+0x1a90>
   14588:	strh	r0, [r4, #56]	; 0x38
   1458c:	b	142d4 <__assert_fail@plt+0x3128>
   14590:	bic	r1, r1, #4096	; 0x1000
   14594:	str	r1, [r8, #48]	; 0x30
   14598:	bl	1299c <__assert_fail@plt+0x17f0>
   1459c:	mov	r3, #0
   145a0:	str	r3, [r8, #4]
   145a4:	mov	r1, #3
   145a8:	mov	r0, r8
   145ac:	bl	132a4 <__assert_fail@plt+0x20f8>
   145b0:	cmp	r0, #0
   145b4:	str	r0, [r8, #4]
   145b8:	movne	r4, r0
   145bc:	bne	1438c <__assert_fail@plt+0x31e0>
   145c0:	ldr	r0, [r8, #48]	; 0x30
   145c4:	tst	r0, #8192	; 0x2000
   145c8:	bne	142d0 <__assert_fail@plt+0x3124>
   145cc:	ldr	r3, [r4, #32]
   145d0:	cmp	r3, #0
   145d4:	beq	145e8 <__assert_fail@plt+0x343c>
   145d8:	ldrh	r3, [r4, #56]	; 0x38
   145dc:	cmp	r3, #4
   145e0:	movne	r3, #7
   145e4:	strhne	r3, [r4, #56]	; 0x38
   145e8:	add	r1, r8, #56	; 0x38
   145ec:	mov	r2, r4
   145f0:	bl	131d8 <__assert_fail@plt+0x202c>
   145f4:	b	142d4 <__assert_fail@plt+0x3128>
   145f8:	ldr	r3, [r8, #48]	; 0x30
   145fc:	ldr	r0, [r6, #36]	; 0x24
   14600:	tst	r3, #4
   14604:	bne	14624 <__assert_fail@plt+0x3478>
   14608:	tst	r3, #512	; 0x200
   1460c:	beq	1476c <__assert_fail@plt+0x35c0>
   14610:	mov	r1, r0
   14614:	mov	r2, #1
   14618:	mov	r0, r8
   1461c:	bl	12b48 <__assert_fail@plt+0x199c>
   14620:	ldr	r0, [r6, #36]	; 0x24
   14624:	bl	11188 <close@plt>
   14628:	b	14288 <__assert_fail@plt+0x30dc>
   1462c:	ldr	r4, [r8, #4]
   14630:	b	1438c <__assert_fail@plt+0x31e0>
   14634:	ldrb	r3, [r4, #1]
   14638:	cmp	r3, #0
   1463c:	beq	14474 <__assert_fail@plt+0x32c8>
   14640:	b	14450 <__assert_fail@plt+0x32a4>
   14644:	mov	r0, r6
   14648:	bl	19710 <__assert_fail@plt+0x8564>
   1464c:	bl	11068 <__errno_location@plt>
   14650:	mov	r3, #0
   14654:	mov	r4, r3
   14658:	str	r3, [r0]
   1465c:	str	r3, [r8]
   14660:	b	142d4 <__assert_fail@plt+0x3128>
   14664:	mov	r0, r8
   14668:	bl	12bd8 <__assert_fail@plt+0x1a2c>
   1466c:	cmp	r0, #0
   14670:	beq	14288 <__assert_fail@plt+0x30dc>
   14674:	bl	11068 <__errno_location@plt>
   14678:	ldr	r3, [r8, #48]	; 0x30
   1467c:	ldr	r2, [r0]
   14680:	orr	r3, r3, #8192	; 0x2000
   14684:	str	r2, [r6, #32]
   14688:	str	r3, [r8, #48]	; 0x30
   1468c:	ldrh	r3, [r6, #56]	; 0x38
   14690:	cmp	r3, #2
   14694:	beq	142d0 <__assert_fail@plt+0x3124>
   14698:	ldr	r0, [r8, #48]	; 0x30
   1469c:	b	14298 <__assert_fail@plt+0x30ec>
   146a0:	ldr	r2, [r8, #24]
   146a4:	mov	r1, #3
   146a8:	mov	r0, r8
   146ac:	ldr	r3, [r6, #40]	; 0x28
   146b0:	str	r6, [r8]
   146b4:	strb	r5, [r2, r3]
   146b8:	bl	132a4 <__assert_fail@plt+0x20f8>
   146bc:	subs	r3, r0, #0
   146c0:	bne	1475c <__assert_fail@plt+0x35b0>
   146c4:	ldr	r3, [r8, #48]	; 0x30
   146c8:	tst	r3, #8192	; 0x2000
   146cc:	bne	142d0 <__assert_fail@plt+0x3124>
   146d0:	ldr	r6, [r4, #4]
   146d4:	b	14234 <__assert_fail@plt+0x3088>
   146d8:	bl	19710 <__assert_fail@plt+0x8564>
   146dc:	b	14418 <__assert_fail@plt+0x326c>
   146e0:	ldr	r0, [r4, #36]	; 0x24
   146e4:	bl	11188 <close@plt>
   146e8:	b	143ac <__assert_fail@plt+0x3200>
   146ec:	mov	r3, #0
   146f0:	mov	r2, r4
   146f4:	ldr	r0, [r8, #32]
   146f8:	ldr	r1, [r8, #48]	; 0x30
   146fc:	bl	12c3c <__assert_fail@plt+0x1a90>
   14700:	strh	r0, [r4, #56]	; 0x38
   14704:	b	144f0 <__assert_fail@plt+0x3344>
   14708:	mov	r3, #1
   1470c:	mov	r2, r5
   14710:	ldr	r0, [r8, #32]
   14714:	ldr	r1, [r8, #48]	; 0x30
   14718:	bl	12c3c <__assert_fail@plt+0x1a90>
   1471c:	cmp	r0, #1
   14720:	strh	r0, [r5, #56]	; 0x38
   14724:	beq	147c0 <__assert_fail@plt+0x3614>
   14728:	mov	r3, #3
   1472c:	mov	r4, r5
   14730:	strh	r3, [r5, #60]	; 0x3c
   14734:	b	144a0 <__assert_fail@plt+0x32f4>
   14738:	movw	r3, #42820	; 0xa744
   1473c:	movt	r3, #1
   14740:	ldr	r1, [r6, #4]
   14744:	mvn	r2, #0
   14748:	mov	r0, r8
   1474c:	bl	12ee8 <__assert_fail@plt+0x1d3c>
   14750:	cmp	r0, #0
   14754:	beq	14288 <__assert_fail@plt+0x30dc>
   14758:	b	14674 <__assert_fail@plt+0x34c8>
   1475c:	mov	r0, r4
   14760:	mov	r4, r3
   14764:	bl	19710 <__assert_fail@plt+0x8564>
   14768:	b	144a0 <__assert_fail@plt+0x32f4>
   1476c:	bl	11128 <fchdir@plt>
   14770:	cmp	r0, #0
   14774:	bne	147f8 <__assert_fail@plt+0x364c>
   14778:	ldr	r0, [r6, #36]	; 0x24
   1477c:	b	14624 <__assert_fail@plt+0x3478>
   14780:	ldr	r1, [r8, #48]	; 0x30
   14784:	tst	r1, #4
   14788:	strne	r4, [r8]
   1478c:	bne	144f8 <__assert_fail@plt+0x334c>
   14790:	movw	r2, #42824	; 0xa748
   14794:	movt	r2, #1
   14798:	ldr	r0, [r8, #32]
   1479c:	bl	12eb8 <__assert_fail@plt+0x1d0c>
   147a0:	cmp	r0, #0
   147a4:	str	r0, [r4, #36]	; 0x24
   147a8:	blt	14818 <__assert_fail@plt+0x366c>
   147ac:	ldrh	r3, [r4, #58]	; 0x3a
   147b0:	ldrh	r0, [r4, #56]	; 0x38
   147b4:	orr	r3, r3, #2
   147b8:	strh	r3, [r4, #58]	; 0x3a
   147bc:	b	144e4 <__assert_fail@plt+0x3338>
   147c0:	ldr	r1, [r8, #48]	; 0x30
   147c4:	tst	r1, #4
   147c8:	bne	14728 <__assert_fail@plt+0x357c>
   147cc:	movw	r2, #42824	; 0xa748
   147d0:	movt	r2, #1
   147d4:	ldr	r0, [r8, #32]
   147d8:	bl	12eb8 <__assert_fail@plt+0x1d0c>
   147dc:	cmp	r0, #0
   147e0:	str	r0, [r5, #36]	; 0x24
   147e4:	blt	14834 <__assert_fail@plt+0x3688>
   147e8:	ldrh	r3, [r5, #58]	; 0x3a
   147ec:	orr	r3, r3, #2
   147f0:	strh	r3, [r5, #58]	; 0x3a
   147f4:	b	14728 <__assert_fail@plt+0x357c>
   147f8:	bl	11068 <__errno_location@plt>
   147fc:	ldr	r3, [r8, #48]	; 0x30
   14800:	ldr	r2, [r0]
   14804:	ldr	r0, [r6, #36]	; 0x24
   14808:	orr	r3, r3, #8192	; 0x2000
   1480c:	str	r2, [r6, #32]
   14810:	str	r3, [r8, #48]	; 0x30
   14814:	b	14624 <__assert_fail@plt+0x3478>
   14818:	bl	11068 <__errno_location@plt>
   1481c:	ldr	r3, [r0]
   14820:	mov	r2, #7
   14824:	str	r3, [r4, #32]
   14828:	strh	r2, [r4, #56]	; 0x38
   1482c:	str	r4, [r8]
   14830:	b	142d4 <__assert_fail@plt+0x3128>
   14834:	bl	11068 <__errno_location@plt>
   14838:	ldr	r3, [r0]
   1483c:	mov	r2, #7
   14840:	str	r3, [r5, #32]
   14844:	strh	r2, [r5, #56]	; 0x38
   14848:	b	14728 <__assert_fail@plt+0x357c>
   1484c:	cmp	r2, #4
   14850:	bhi	14864 <__assert_fail@plt+0x36b8>
   14854:	mov	r3, #0
   14858:	strh	r2, [r1, #60]	; 0x3c
   1485c:	mov	r0, r3
   14860:	bx	lr
   14864:	str	r4, [sp, #-8]!
   14868:	str	lr, [sp, #4]
   1486c:	bl	11068 <__errno_location@plt>
   14870:	mov	r2, #22
   14874:	mov	r3, #1
   14878:	ldr	r4, [sp]
   1487c:	add	sp, sp, #4
   14880:	str	r2, [r0]
   14884:	mov	r0, r3
   14888:	pop	{pc}		; (ldr pc, [sp], #4)
   1488c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14890:	mov	r4, r1
   14894:	mov	r5, r0
   14898:	strd	r6, [sp, #8]
   1489c:	str	r8, [sp, #16]
   148a0:	str	lr, [sp, #20]
   148a4:	bl	11068 <__errno_location@plt>
   148a8:	bics	r2, r4, #4096	; 0x1000
   148ac:	mov	r7, r0
   148b0:	movne	r3, #22
   148b4:	movne	r0, #0
   148b8:	strne	r3, [r7]
   148bc:	bne	14950 <__assert_fail@plt+0x37a4>
   148c0:	ldr	r6, [r5]
   148c4:	str	r2, [r7]
   148c8:	ldr	r3, [r5, #48]	; 0x30
   148cc:	ands	r0, r3, #8192	; 0x2000
   148d0:	movne	r0, r2
   148d4:	bne	14950 <__assert_fail@plt+0x37a4>
   148d8:	ldrh	r3, [r6, #56]	; 0x38
   148dc:	cmp	r3, #9
   148e0:	beq	149c0 <__assert_fail@plt+0x3814>
   148e4:	cmp	r3, #1
   148e8:	bne	14950 <__assert_fail@plt+0x37a4>
   148ec:	ldr	r0, [r5, #4]
   148f0:	cmp	r0, #0
   148f4:	beq	148fc <__assert_fail@plt+0x3750>
   148f8:	bl	1299c <__assert_fail@plt+0x17f0>
   148fc:	cmp	r4, #4096	; 0x1000
   14900:	movne	r4, #1
   14904:	bne	14918 <__assert_fail@plt+0x376c>
   14908:	ldr	r3, [r5, #48]	; 0x30
   1490c:	mov	r4, #2
   14910:	orr	r3, r3, #4096	; 0x1000
   14914:	str	r3, [r5, #48]	; 0x30
   14918:	ldr	r3, [r6, #48]	; 0x30
   1491c:	cmp	r3, #0
   14920:	bne	14940 <__assert_fail@plt+0x3794>
   14924:	ldr	r3, [r6, #24]
   14928:	ldrb	r3, [r3]
   1492c:	cmp	r3, #47	; 0x2f
   14930:	beq	14940 <__assert_fail@plt+0x3794>
   14934:	ldr	r1, [r5, #48]	; 0x30
   14938:	ands	r6, r1, #4
   1493c:	beq	14964 <__assert_fail@plt+0x37b8>
   14940:	mov	r1, r4
   14944:	mov	r0, r5
   14948:	bl	132a4 <__assert_fail@plt+0x20f8>
   1494c:	str	r0, [r5, #4]
   14950:	ldrd	r4, [sp]
   14954:	ldrd	r6, [sp, #8]
   14958:	ldr	r8, [sp, #16]
   1495c:	add	sp, sp, #20
   14960:	pop	{pc}		; (ldr pc, [sp], #4)
   14964:	movw	r2, #42824	; 0xa748
   14968:	movt	r2, #1
   1496c:	ldr	r0, [r5, #32]
   14970:	bl	12eb8 <__assert_fail@plt+0x1d0c>
   14974:	subs	r8, r0, #0
   14978:	movlt	r0, r6
   1497c:	strlt	r6, [r5, #4]
   14980:	blt	14950 <__assert_fail@plt+0x37a4>
   14984:	mov	r1, r4
   14988:	mov	r0, r5
   1498c:	bl	132a4 <__assert_fail@plt+0x20f8>
   14990:	ldr	r3, [r5, #48]	; 0x30
   14994:	str	r0, [r5, #4]
   14998:	ands	r4, r3, #512	; 0x200
   1499c:	bne	149c8 <__assert_fail@plt+0x381c>
   149a0:	mov	r0, r8
   149a4:	bl	11128 <fchdir@plt>
   149a8:	cmp	r0, #0
   149ac:	bne	149dc <__assert_fail@plt+0x3830>
   149b0:	mov	r0, r8
   149b4:	bl	11188 <close@plt>
   149b8:	ldr	r0, [r5, #4]
   149bc:	b	14950 <__assert_fail@plt+0x37a4>
   149c0:	ldr	r0, [r6, #8]
   149c4:	b	14950 <__assert_fail@plt+0x37a4>
   149c8:	mov	r1, r8
   149cc:	mov	r2, #1
   149d0:	mov	r0, r5
   149d4:	bl	12b48 <__assert_fail@plt+0x199c>
   149d8:	b	149b8 <__assert_fail@plt+0x380c>
   149dc:	ldr	r5, [r7]
   149e0:	mov	r0, r8
   149e4:	bl	11188 <close@plt>
   149e8:	mov	r0, r4
   149ec:	str	r5, [r7]
   149f0:	b	14950 <__assert_fail@plt+0x37a4>
   149f4:	andeq	r0, r0, r0
   149f8:	cmp	r0, #10
   149fc:	movcc	r0, #10
   14a00:	orr	r0, r0, #1
   14a04:	cmn	r0, #1
   14a08:	bxeq	lr
   14a0c:	push	{lr}		; (str lr, [sp, #-4]!)
   14a10:	movw	lr, #43691	; 0xaaab
   14a14:	movt	lr, #43690	; 0xaaaa
   14a18:	umull	r2, r3, lr, r0
   14a1c:	cmp	r0, #9
   14a20:	lsr	r3, r3, #1
   14a24:	add	r3, r3, r3, lsl #1
   14a28:	sub	r3, r0, r3
   14a2c:	bls	14a6c <__assert_fail@plt+0x38c0>
   14a30:	cmp	r3, #0
   14a34:	beq	14a74 <__assert_fail@plt+0x38c8>
   14a38:	mov	ip, #16
   14a3c:	mov	r1, #9
   14a40:	mov	r2, #3
   14a44:	b	14a50 <__assert_fail@plt+0x38a4>
   14a48:	cmp	r3, #0
   14a4c:	beq	14a74 <__assert_fail@plt+0x38c8>
   14a50:	add	r2, r2, #2
   14a54:	add	r1, r1, ip
   14a58:	cmp	r1, r0
   14a5c:	add	ip, ip, #8
   14a60:	udiv	r3, r0, r2
   14a64:	mls	r3, r2, r3, r0
   14a68:	bcc	14a48 <__assert_fail@plt+0x389c>
   14a6c:	cmp	r3, #0
   14a70:	bne	14a80 <__assert_fail@plt+0x38d4>
   14a74:	add	r0, r0, #2
   14a78:	cmn	r0, #1
   14a7c:	bne	14a18 <__assert_fail@plt+0x386c>
   14a80:	pop	{pc}		; (ldr pc, [sp], #4)
   14a84:	ror	r0, r0, #3
   14a88:	udiv	r3, r0, r1
   14a8c:	mls	r0, r3, r1, r0
   14a90:	bx	lr
   14a94:	sub	r0, r1, r0
   14a98:	clz	r0, r0
   14a9c:	lsr	r0, r0, #5
   14aa0:	bx	lr
   14aa4:	str	r4, [sp, #-8]!
   14aa8:	mov	r4, r0
   14aac:	mov	r0, r1
   14ab0:	ldr	r1, [r4, #8]
   14ab4:	ldr	r3, [r4, #24]
   14ab8:	str	lr, [sp, #4]
   14abc:	blx	r3
   14ac0:	ldr	r3, [r4, #8]
   14ac4:	cmp	r3, r0
   14ac8:	bls	14ae0 <__assert_fail@plt+0x3934>
   14acc:	ldr	r3, [r4]
   14ad0:	ldr	r4, [sp]
   14ad4:	add	sp, sp, #4
   14ad8:	add	r0, r3, r0, lsl #3
   14adc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae0:	bl	1117c <abort@plt>
   14ae4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14ae8:	mov	r5, r1
   14aec:	strd	r6, [sp, #8]
   14af0:	mov	r7, r3
   14af4:	mov	r6, r0
   14af8:	str	r8, [sp, #16]
   14afc:	mov	r8, r2
   14b00:	str	lr, [sp, #20]
   14b04:	bl	14aa4 <__assert_fail@plt+0x38f8>
   14b08:	str	r0, [r8]
   14b0c:	ldr	r1, [r0]
   14b10:	cmp	r1, #0
   14b14:	beq	14c04 <__assert_fail@plt+0x3a58>
   14b18:	cmp	r1, r5
   14b1c:	mov	r4, r0
   14b20:	beq	14bcc <__assert_fail@plt+0x3a20>
   14b24:	mov	r0, r5
   14b28:	ldr	r3, [r6, #28]
   14b2c:	blx	r3
   14b30:	cmp	r0, #0
   14b34:	bne	14bc8 <__assert_fail@plt+0x3a1c>
   14b38:	ldr	r3, [r4, #4]
   14b3c:	cmp	r3, #0
   14b40:	beq	14c04 <__assert_fail@plt+0x3a58>
   14b44:	ldr	r1, [r3]
   14b48:	cmp	r5, r1
   14b4c:	bne	14b70 <__assert_fail@plt+0x39c4>
   14b50:	b	14b8c <__assert_fail@plt+0x39e0>
   14b54:	ldr	r4, [r4, #4]
   14b58:	ldr	r3, [r4, #4]
   14b5c:	cmp	r3, #0
   14b60:	beq	14c04 <__assert_fail@plt+0x3a58>
   14b64:	ldr	r1, [r3]
   14b68:	cmp	r1, r5
   14b6c:	beq	14b8c <__assert_fail@plt+0x39e0>
   14b70:	mov	r0, r5
   14b74:	ldr	r3, [r6, #28]
   14b78:	blx	r3
   14b7c:	cmp	r0, #0
   14b80:	beq	14b54 <__assert_fail@plt+0x39a8>
   14b84:	ldr	r3, [r4, #4]
   14b88:	ldr	r1, [r3]
   14b8c:	cmp	r7, #0
   14b90:	beq	14bb0 <__assert_fail@plt+0x3a04>
   14b94:	ldr	r0, [r3, #4]
   14b98:	mov	r2, #0
   14b9c:	str	r0, [r4, #4]
   14ba0:	str	r2, [r3]
   14ba4:	ldr	r2, [r6, #36]	; 0x24
   14ba8:	str	r2, [r3, #4]
   14bac:	str	r3, [r6, #36]	; 0x24
   14bb0:	ldrd	r4, [sp]
   14bb4:	mov	r0, r1
   14bb8:	ldrd	r6, [sp, #8]
   14bbc:	ldr	r8, [sp, #16]
   14bc0:	add	sp, sp, #20
   14bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bc8:	ldr	r1, [r4]
   14bcc:	cmp	r7, #0
   14bd0:	beq	14bb0 <__assert_fail@plt+0x3a04>
   14bd4:	ldr	r0, [r4, #4]
   14bd8:	cmp	r0, #0
   14bdc:	streq	r0, [r4]
   14be0:	beq	14bb0 <__assert_fail@plt+0x3a04>
   14be4:	ldrd	r2, [r0]
   14be8:	mov	ip, #0
   14bec:	strd	r2, [r4]
   14bf0:	str	ip, [r0]
   14bf4:	ldr	r3, [r6, #36]	; 0x24
   14bf8:	str	r3, [r0, #4]
   14bfc:	str	r0, [r6, #36]	; 0x24
   14c00:	b	14bb0 <__assert_fail@plt+0x3a04>
   14c04:	mov	r1, #0
   14c08:	b	14bb0 <__assert_fail@plt+0x3a04>
   14c0c:	ldr	r2, [r0]
   14c10:	movw	r3, #42828	; 0xa74c
   14c14:	movt	r3, #1
   14c18:	mov	r1, r0
   14c1c:	cmp	r2, r3
   14c20:	beq	14ca8 <__assert_fail@plt+0x3afc>
   14c24:	vldr	s14, [pc, #132]	; 14cb0 <__assert_fail@plt+0x3b04>
   14c28:	vldr	s15, [r2, #8]
   14c2c:	vcmpe.f32	s15, s14
   14c30:	vmrs	APSR_nzcv, fpscr
   14c34:	ble	14c9c <__assert_fail@plt+0x3af0>
   14c38:	vldr	s13, [pc, #116]	; 14cb4 <__assert_fail@plt+0x3b08>
   14c3c:	vcmpe.f32	s15, s13
   14c40:	vmrs	APSR_nzcv, fpscr
   14c44:	bpl	14c9c <__assert_fail@plt+0x3af0>
   14c48:	vldr	s13, [pc, #104]	; 14cb8 <__assert_fail@plt+0x3b0c>
   14c4c:	vldr	s12, [r2, #12]
   14c50:	vcmpe.f32	s12, s13
   14c54:	vmrs	APSR_nzcv, fpscr
   14c58:	ble	14c9c <__assert_fail@plt+0x3af0>
   14c5c:	vldr	s13, [r2]
   14c60:	vcmpe.f32	s13, #0.0
   14c64:	vmrs	APSR_nzcv, fpscr
   14c68:	blt	14c9c <__assert_fail@plt+0x3af0>
   14c6c:	vadd.f32	s14, s13, s14
   14c70:	vldr	s13, [r2, #4]
   14c74:	vcmpe.f32	s14, s13
   14c78:	vmrs	APSR_nzcv, fpscr
   14c7c:	bpl	14c9c <__assert_fail@plt+0x3af0>
   14c80:	vldr	s12, [pc, #52]	; 14cbc <__assert_fail@plt+0x3b10>
   14c84:	vcmpe.f32	s13, s12
   14c88:	vmrs	APSR_nzcv, fpscr
   14c8c:	bhi	14c9c <__assert_fail@plt+0x3af0>
   14c90:	vcmpe.f32	s15, s14
   14c94:	vmrs	APSR_nzcv, fpscr
   14c98:	bgt	14ca8 <__assert_fail@plt+0x3afc>
   14c9c:	mov	r0, #0
   14ca0:	str	r3, [r1]
   14ca4:	bx	lr
   14ca8:	mov	r0, #1
   14cac:	bx	lr
   14cb0:	stclcc	12, cr12, [ip, #820]	; 0x334
   14cb4:	svccc	0x00666666
   14cb8:	svccc	0x008ccccd
   14cbc:	svccc	0x00800000
   14cc0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14cc4:	ldr	r3, [r1, #4]
   14cc8:	strd	r6, [sp, #8]
   14ccc:	ldr	r6, [r1]
   14cd0:	strd	r8, [sp, #16]
   14cd4:	str	sl, [sp, #24]
   14cd8:	str	lr, [sp, #28]
   14cdc:	cmp	r6, r3
   14ce0:	bcs	14da8 <__assert_fail@plt+0x3bfc>
   14ce4:	mov	r8, r2
   14ce8:	mov	r5, r0
   14cec:	mov	r7, r1
   14cf0:	add	r6, r6, #8
   14cf4:	mov	r9, #0
   14cf8:	b	14d08 <__assert_fail@plt+0x3b5c>
   14cfc:	cmp	r3, r6
   14d00:	add	r6, r6, #8
   14d04:	bls	14da8 <__assert_fail@plt+0x3bfc>
   14d08:	ldr	sl, [r6, #-8]
   14d0c:	cmp	sl, #0
   14d10:	beq	14cfc <__assert_fail@plt+0x3b50>
   14d14:	ldr	r4, [r6, #-4]
   14d18:	cmp	r4, #0
   14d1c:	bne	14d3c <__assert_fail@plt+0x3b90>
   14d20:	b	14d8c <__assert_fail@plt+0x3be0>
   14d24:	ldr	r2, [r0, #4]
   14d28:	cmp	r3, #0
   14d2c:	str	r2, [r4, #4]
   14d30:	str	r4, [r0, #4]
   14d34:	mov	r4, r3
   14d38:	beq	14d88 <__assert_fail@plt+0x3bdc>
   14d3c:	ldr	sl, [r4]
   14d40:	mov	r0, r5
   14d44:	mov	r1, sl
   14d48:	bl	14aa4 <__assert_fail@plt+0x38f8>
   14d4c:	ldr	r2, [r0]
   14d50:	ldr	r3, [r4, #4]
   14d54:	cmp	r2, #0
   14d58:	bne	14d24 <__assert_fail@plt+0x3b78>
   14d5c:	ldr	r1, [r5, #12]
   14d60:	cmp	r3, #0
   14d64:	str	sl, [r0]
   14d68:	add	r1, r1, #1
   14d6c:	str	r1, [r5, #12]
   14d70:	str	r2, [r4]
   14d74:	ldr	r2, [r5, #36]	; 0x24
   14d78:	str	r2, [r4, #4]
   14d7c:	str	r4, [r5, #36]	; 0x24
   14d80:	mov	r4, r3
   14d84:	bne	14d3c <__assert_fail@plt+0x3b90>
   14d88:	ldr	sl, [r6, #-8]
   14d8c:	cmp	r8, #0
   14d90:	str	r9, [r6, #-4]
   14d94:	beq	14dc4 <__assert_fail@plt+0x3c18>
   14d98:	ldr	r3, [r7, #4]
   14d9c:	cmp	r3, r6
   14da0:	add	r6, r6, #8
   14da4:	bhi	14d08 <__assert_fail@plt+0x3b5c>
   14da8:	mov	r0, #1
   14dac:	ldrd	r4, [sp]
   14db0:	ldrd	r6, [sp, #8]
   14db4:	ldrd	r8, [sp, #16]
   14db8:	ldr	sl, [sp, #24]
   14dbc:	add	sp, sp, #28
   14dc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14dc4:	mov	r1, sl
   14dc8:	mov	r0, r5
   14dcc:	bl	14aa4 <__assert_fail@plt+0x38f8>
   14dd0:	ldr	r3, [r0]
   14dd4:	mov	r4, r0
   14dd8:	cmp	r3, #0
   14ddc:	beq	14e1c <__assert_fail@plt+0x3c70>
   14de0:	ldr	r0, [r5, #36]	; 0x24
   14de4:	cmp	r0, #0
   14de8:	beq	14e30 <__assert_fail@plt+0x3c84>
   14dec:	ldr	r3, [r0, #4]
   14df0:	str	r3, [r5, #36]	; 0x24
   14df4:	ldr	r3, [r4, #4]
   14df8:	str	sl, [r0]
   14dfc:	str	r3, [r0, #4]
   14e00:	str	r0, [r4, #4]
   14e04:	ldr	r2, [r7, #12]
   14e08:	str	r9, [r6, #-8]
   14e0c:	ldr	r3, [r7, #4]
   14e10:	sub	r2, r2, #1
   14e14:	str	r2, [r7, #12]
   14e18:	b	14cfc <__assert_fail@plt+0x3b50>
   14e1c:	ldr	r3, [r5, #12]
   14e20:	str	sl, [r0]
   14e24:	add	r3, r3, #1
   14e28:	str	r3, [r5, #12]
   14e2c:	b	14e04 <__assert_fail@plt+0x3c58>
   14e30:	mov	r0, #8
   14e34:	bl	19198 <__assert_fail@plt+0x7fec>
   14e38:	cmp	r0, #0
   14e3c:	bne	14df4 <__assert_fail@plt+0x3c48>
   14e40:	mov	r0, r8
   14e44:	b	14dac <__assert_fail@plt+0x3c00>
   14e48:	ldr	r0, [r0, #8]
   14e4c:	bx	lr
   14e50:	ldr	r0, [r0, #12]
   14e54:	bx	lr
   14e58:	ldr	r0, [r0, #16]
   14e5c:	bx	lr
   14e60:	ldm	r0, {r1, r3}
   14e64:	cmp	r1, r3
   14e68:	bcs	14edc <__assert_fail@plt+0x3d30>
   14e6c:	sub	ip, r3, #1
   14e70:	add	r3, r1, #16
   14e74:	sub	ip, ip, r1
   14e78:	mov	r0, #0
   14e7c:	bic	ip, ip, #7
   14e80:	add	r1, r1, #8
   14e84:	add	ip, ip, r3
   14e88:	b	14e98 <__assert_fail@plt+0x3cec>
   14e8c:	add	r1, r1, #8
   14e90:	cmp	r1, ip
   14e94:	beq	14ed8 <__assert_fail@plt+0x3d2c>
   14e98:	ldr	r3, [r1, #-8]
   14e9c:	cmp	r3, #0
   14ea0:	beq	14e8c <__assert_fail@plt+0x3ce0>
   14ea4:	ldr	r3, [r1, #-4]
   14ea8:	mov	r2, #1
   14eac:	cmp	r3, #0
   14eb0:	beq	14ec4 <__assert_fail@plt+0x3d18>
   14eb4:	ldr	r3, [r3, #4]
   14eb8:	add	r2, r2, #1
   14ebc:	cmp	r3, #0
   14ec0:	bne	14eb4 <__assert_fail@plt+0x3d08>
   14ec4:	cmp	r0, r2
   14ec8:	add	r1, r1, #8
   14ecc:	movcc	r0, r2
   14ed0:	cmp	r1, ip
   14ed4:	bne	14e98 <__assert_fail@plt+0x3cec>
   14ed8:	bx	lr
   14edc:	mov	r0, #0
   14ee0:	bx	lr
   14ee4:	ldm	r0, {r1, r3}
   14ee8:	push	{lr}		; (str lr, [sp, #-4]!)
   14eec:	cmp	r1, r3
   14ef0:	bcs	14f84 <__assert_fail@plt+0x3dd8>
   14ef4:	sub	ip, r3, #1
   14ef8:	mov	r2, #0
   14efc:	sub	ip, ip, r1
   14f00:	add	r3, r1, #16
   14f04:	bic	ip, ip, #7
   14f08:	add	r1, r1, #8
   14f0c:	add	ip, ip, r3
   14f10:	mov	lr, r2
   14f14:	b	14f24 <__assert_fail@plt+0x3d78>
   14f18:	add	r1, r1, #8
   14f1c:	cmp	r1, ip
   14f20:	beq	14f60 <__assert_fail@plt+0x3db4>
   14f24:	ldr	r3, [r1, #-8]
   14f28:	cmp	r3, #0
   14f2c:	beq	14f18 <__assert_fail@plt+0x3d6c>
   14f30:	ldr	r3, [r1, #-4]
   14f34:	add	lr, lr, #1
   14f38:	add	r2, r2, #1
   14f3c:	cmp	r3, #0
   14f40:	beq	14f18 <__assert_fail@plt+0x3d6c>
   14f44:	ldr	r3, [r3, #4]
   14f48:	add	r2, r2, #1
   14f4c:	cmp	r3, #0
   14f50:	bne	14f44 <__assert_fail@plt+0x3d98>
   14f54:	add	r1, r1, #8
   14f58:	cmp	r1, ip
   14f5c:	bne	14f24 <__assert_fail@plt+0x3d78>
   14f60:	ldr	r3, [r0, #12]
   14f64:	cmp	r3, lr
   14f68:	movne	r0, #0
   14f6c:	bne	14f80 <__assert_fail@plt+0x3dd4>
   14f70:	ldr	r0, [r0, #16]
   14f74:	sub	r0, r0, r2
   14f78:	clz	r0, r0
   14f7c:	lsr	r0, r0, #5
   14f80:	pop	{pc}		; (ldr pc, [sp], #4)
   14f84:	mov	r2, #0
   14f88:	mov	lr, r2
   14f8c:	b	14f60 <__assert_fail@plt+0x3db4>
   14f90:	strd	r4, [sp, #-20]!	; 0xffffffec
   14f94:	mov	r4, r1
   14f98:	ldr	r2, [r0]
   14f9c:	ldr	r1, [r0, #4]
   14fa0:	ldr	r3, [r0, #16]
   14fa4:	strd	r6, [sp, #8]
   14fa8:	str	lr, [sp, #16]
   14fac:	sub	sp, sp, #12
   14fb0:	cmp	r2, r1
   14fb4:	ldrd	r6, [r0, #8]
   14fb8:	bcs	150b8 <__assert_fail@plt+0x3f0c>
   14fbc:	sub	ip, r1, #1
   14fc0:	add	r1, r2, #16
   14fc4:	sub	ip, ip, r2
   14fc8:	add	r0, r2, #8
   14fcc:	bic	ip, ip, #7
   14fd0:	mov	r5, #0
   14fd4:	add	ip, ip, r1
   14fd8:	b	14fe8 <__assert_fail@plt+0x3e3c>
   14fdc:	add	r0, r0, #8
   14fe0:	cmp	r0, ip
   14fe4:	beq	15028 <__assert_fail@plt+0x3e7c>
   14fe8:	ldr	r2, [r0, #-8]
   14fec:	cmp	r2, #0
   14ff0:	beq	14fdc <__assert_fail@plt+0x3e30>
   14ff4:	ldr	r2, [r0, #-4]
   14ff8:	mov	r1, #1
   14ffc:	cmp	r2, #0
   15000:	beq	15014 <__assert_fail@plt+0x3e68>
   15004:	ldr	r2, [r2, #4]
   15008:	add	r1, r1, #1
   1500c:	cmp	r2, #0
   15010:	bne	15004 <__assert_fail@plt+0x3e58>
   15014:	cmp	r5, r1
   15018:	add	r0, r0, #8
   1501c:	movcc	r5, r1
   15020:	cmp	r0, ip
   15024:	bne	14fe8 <__assert_fail@plt+0x3e3c>
   15028:	mov	r1, #1
   1502c:	mov	r0, r4
   15030:	movw	r2, #42848	; 0xa760
   15034:	movt	r2, #1
   15038:	bl	110b0 <__fprintf_chk@plt>
   1503c:	mov	r3, r6
   15040:	mov	r1, #1
   15044:	mov	r0, r4
   15048:	movw	r2, #42872	; 0xa778
   1504c:	movt	r2, #1
   15050:	bl	110b0 <__fprintf_chk@plt>
   15054:	vmov	s15, r7
   15058:	mov	r3, r7
   1505c:	mov	r1, #1
   15060:	vldr	d5, [pc, #88]	; 150c0 <__assert_fail@plt+0x3f14>
   15064:	mov	r0, r4
   15068:	movw	r2, #42896	; 0xa790
   1506c:	movt	r2, #1
   15070:	vcvt.f64.u32	d6, s15
   15074:	vmov	s15, r6
   15078:	vmul.f64	d6, d6, d5
   1507c:	vcvt.f64.u32	d7, s15
   15080:	vdiv.f64	d5, d6, d7
   15084:	vstr	d5, [sp]
   15088:	bl	110b0 <__fprintf_chk@plt>
   1508c:	mov	r3, r5
   15090:	mov	r0, r4
   15094:	movw	r2, #42932	; 0xa7b4
   15098:	movt	r2, #1
   1509c:	mov	r1, #1
   150a0:	add	sp, sp, #12
   150a4:	ldrd	r4, [sp]
   150a8:	ldrd	r6, [sp, #8]
   150ac:	ldr	lr, [sp, #16]
   150b0:	add	sp, sp, #20
   150b4:	b	110b0 <__fprintf_chk@plt>
   150b8:	mov	r5, #0
   150bc:	b	15028 <__assert_fail@plt+0x3e7c>
   150c0:	andeq	r0, r0, r0
   150c4:	subsmi	r0, r9, r0
   150c8:	strd	r4, [sp, #-16]!
   150cc:	mov	r5, r1
   150d0:	str	r6, [sp, #8]
   150d4:	mov	r6, r0
   150d8:	str	lr, [sp, #12]
   150dc:	bl	14aa4 <__assert_fail@plt+0x38f8>
   150e0:	ldr	r3, [r0]
   150e4:	cmp	r3, #0
   150e8:	beq	15124 <__assert_fail@plt+0x3f78>
   150ec:	mov	r4, r0
   150f0:	b	150f8 <__assert_fail@plt+0x3f4c>
   150f4:	ldr	r3, [r4]
   150f8:	cmp	r3, r5
   150fc:	mov	r1, r3
   15100:	mov	r0, r5
   15104:	beq	1513c <__assert_fail@plt+0x3f90>
   15108:	ldr	r3, [r6, #28]
   1510c:	blx	r3
   15110:	cmp	r0, #0
   15114:	bne	15138 <__assert_fail@plt+0x3f8c>
   15118:	ldr	r4, [r4, #4]
   1511c:	cmp	r4, #0
   15120:	bne	150f4 <__assert_fail@plt+0x3f48>
   15124:	ldrd	r4, [sp]
   15128:	mov	r0, #0
   1512c:	ldr	r6, [sp, #8]
   15130:	add	sp, sp, #12
   15134:	pop	{pc}		; (ldr pc, [sp], #4)
   15138:	ldr	r5, [r4]
   1513c:	mov	r0, r5
   15140:	ldrd	r4, [sp]
   15144:	ldr	r6, [sp, #8]
   15148:	add	sp, sp, #12
   1514c:	pop	{pc}		; (ldr pc, [sp], #4)
   15150:	ldr	r3, [r0, #16]
   15154:	cmp	r3, #0
   15158:	beq	151ac <__assert_fail@plt+0x4000>
   1515c:	ldr	r3, [r0]
   15160:	ldr	r2, [r0, #4]
   15164:	cmp	r3, r2
   15168:	bcs	151a0 <__assert_fail@plt+0x3ff4>
   1516c:	ldr	r0, [r3]
   15170:	cmp	r0, #0
   15174:	bxne	lr
   15178:	sub	r2, r2, #1
   1517c:	sub	r2, r2, r3
   15180:	bic	r2, r2, #7
   15184:	add	r2, r3, r2
   15188:	b	15198 <__assert_fail@plt+0x3fec>
   1518c:	ldr	r0, [r3, #8]!
   15190:	cmp	r0, #0
   15194:	bxne	lr
   15198:	cmp	r3, r2
   1519c:	bne	1518c <__assert_fail@plt+0x3fe0>
   151a0:	str	r4, [sp, #-8]!
   151a4:	str	lr, [sp, #4]
   151a8:	bl	1117c <abort@plt>
   151ac:	mov	r0, r3
   151b0:	bx	lr
   151b4:	strd	r4, [sp, #-16]!
   151b8:	mov	r5, r0
   151bc:	mov	r4, r1
   151c0:	str	r6, [sp, #8]
   151c4:	str	lr, [sp, #12]
   151c8:	bl	14aa4 <__assert_fail@plt+0x38f8>
   151cc:	mov	r2, r0
   151d0:	mov	r3, r0
   151d4:	b	151e0 <__assert_fail@plt+0x4034>
   151d8:	cmp	r3, #0
   151dc:	beq	151f8 <__assert_fail@plt+0x404c>
   151e0:	ldm	r3, {r1, r3}
   151e4:	cmp	r1, r4
   151e8:	bne	151d8 <__assert_fail@plt+0x402c>
   151ec:	cmp	r3, #0
   151f0:	ldrne	r0, [r3]
   151f4:	bne	1521c <__assert_fail@plt+0x4070>
   151f8:	ldr	r3, [r5, #4]
   151fc:	b	1520c <__assert_fail@plt+0x4060>
   15200:	ldr	r0, [r2]
   15204:	cmp	r0, #0
   15208:	bne	1521c <__assert_fail@plt+0x4070>
   1520c:	add	r2, r2, #8
   15210:	cmp	r3, r2
   15214:	bhi	15200 <__assert_fail@plt+0x4054>
   15218:	mov	r0, #0
   1521c:	ldrd	r4, [sp]
   15220:	ldr	r6, [sp, #8]
   15224:	add	sp, sp, #12
   15228:	pop	{pc}		; (ldr pc, [sp], #4)
   1522c:	strd	r4, [sp, #-12]!
   15230:	ldr	r5, [r0]
   15234:	str	lr, [sp, #8]
   15238:	ldr	lr, [r0, #4]
   1523c:	cmp	lr, r5
   15240:	bls	152cc <__assert_fail@plt+0x4120>
   15244:	mov	ip, #0
   15248:	ldr	r3, [r5]
   1524c:	cmp	r3, #0
   15250:	bne	15274 <__assert_fail@plt+0x40c8>
   15254:	add	r5, r5, #8
   15258:	cmp	lr, r5
   1525c:	bhi	15248 <__assert_fail@plt+0x409c>
   15260:	mov	r2, ip
   15264:	ldrd	r4, [sp]
   15268:	add	sp, sp, #8
   1526c:	mov	r0, r2
   15270:	pop	{pc}		; (ldr pc, [sp], #4)
   15274:	cmp	r2, ip
   15278:	bls	15260 <__assert_fail@plt+0x40b4>
   1527c:	str	r3, [r1, ip, lsl #2]
   15280:	add	r4, ip, #1
   15284:	add	lr, r1, ip, lsl #2
   15288:	ldr	r3, [r5, #4]
   1528c:	cmp	r3, #0
   15290:	beq	152c0 <__assert_fail@plt+0x4114>
   15294:	mov	ip, r4
   15298:	cmp	r2, ip
   1529c:	add	ip, ip, #1
   152a0:	beq	15264 <__assert_fail@plt+0x40b8>
   152a4:	ldr	r4, [r3]
   152a8:	str	r4, [lr, #4]!
   152ac:	ldr	r3, [r3, #4]
   152b0:	cmp	r3, #0
   152b4:	bne	15298 <__assert_fail@plt+0x40ec>
   152b8:	ldr	lr, [r0, #4]
   152bc:	b	15254 <__assert_fail@plt+0x40a8>
   152c0:	mov	ip, r4
   152c4:	ldr	lr, [r0, #4]
   152c8:	b	15254 <__assert_fail@plt+0x40a8>
   152cc:	mov	r2, #0
   152d0:	b	15264 <__assert_fail@plt+0x40b8>
   152d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   152d8:	ldr	r3, [r0, #4]
   152dc:	strd	r6, [sp, #8]
   152e0:	strd	r8, [sp, #16]
   152e4:	ldr	r8, [r0]
   152e8:	str	sl, [sp, #24]
   152ec:	str	lr, [sp, #28]
   152f0:	cmp	r3, r8
   152f4:	bls	15370 <__assert_fail@plt+0x41c4>
   152f8:	mov	r7, r2
   152fc:	mov	r6, r1
   15300:	mov	r9, r0
   15304:	mov	r5, #0
   15308:	ldr	r0, [r8]
   1530c:	cmp	r0, #0
   15310:	bne	1533c <__assert_fail@plt+0x4190>
   15314:	add	r8, r8, #8
   15318:	cmp	r3, r8
   1531c:	bhi	15308 <__assert_fail@plt+0x415c>
   15320:	mov	r0, r5
   15324:	ldrd	r4, [sp]
   15328:	ldrd	r6, [sp, #8]
   1532c:	ldrd	r8, [sp, #16]
   15330:	ldr	sl, [sp, #24]
   15334:	add	sp, sp, #28
   15338:	pop	{pc}		; (ldr pc, [sp], #4)
   1533c:	mov	r4, r8
   15340:	b	15348 <__assert_fail@plt+0x419c>
   15344:	ldr	r0, [r4]
   15348:	mov	r1, r7
   1534c:	blx	r6
   15350:	cmp	r0, #0
   15354:	beq	15320 <__assert_fail@plt+0x4174>
   15358:	ldr	r4, [r4, #4]
   1535c:	add	r5, r5, #1
   15360:	cmp	r4, #0
   15364:	bne	15344 <__assert_fail@plt+0x4198>
   15368:	ldr	r3, [r9, #4]
   1536c:	b	15314 <__assert_fail@plt+0x4168>
   15370:	mov	r5, #0
   15374:	b	15320 <__assert_fail@plt+0x4174>
   15378:	ldrb	r2, [r0]
   1537c:	cmp	r2, #0
   15380:	beq	153ac <__assert_fail@plt+0x4200>
   15384:	mov	r3, #0
   15388:	rsb	r3, r3, r3, lsl #5
   1538c:	add	r3, r3, r2
   15390:	ldrb	r2, [r0, #1]!
   15394:	udiv	ip, r3, r1
   15398:	cmp	r2, #0
   1539c:	mls	r3, r1, ip, r3
   153a0:	bne	15388 <__assert_fail@plt+0x41dc>
   153a4:	mov	r0, r3
   153a8:	bx	lr
   153ac:	mov	r3, r2
   153b0:	mov	r0, r3
   153b4:	bx	lr
   153b8:	movw	r3, #42828	; 0xa74c
   153bc:	movt	r3, #1
   153c0:	strd	r4, [sp, #-8]!
   153c4:	ldrd	r4, [r3]
   153c8:	ldr	r1, [r3, #16]
   153cc:	ldrd	r2, [r3, #8]
   153d0:	strd	r4, [r0]
   153d4:	ldrd	r4, [sp]
   153d8:	add	sp, sp, #8
   153dc:	strd	r2, [r0, #8]
   153e0:	str	r1, [r0, #16]
   153e4:	bx	lr
   153e8:	strd	r4, [sp, #-20]!	; 0xffffffec
   153ec:	cmp	r2, #0
   153f0:	movw	ip, #19092	; 0x4a94
   153f4:	movt	ip, #1
   153f8:	strd	r6, [sp, #8]
   153fc:	movne	r6, r2
   15400:	str	lr, [sp, #16]
   15404:	sub	sp, sp, #12
   15408:	movw	lr, #19076	; 0x4a84
   1540c:	movt	lr, #1
   15410:	mov	r7, r1
   15414:	moveq	r6, lr
   15418:	cmp	r3, #0
   1541c:	str	r0, [sp, #4]
   15420:	mov	r0, #40	; 0x28
   15424:	movne	r5, r3
   15428:	moveq	r5, ip
   1542c:	bl	19198 <__assert_fail@plt+0x7fec>
   15430:	subs	r4, r0, #0
   15434:	beq	154cc <__assert_fail@plt+0x4320>
   15438:	cmp	r7, #0
   1543c:	add	r0, r4, #20
   15440:	beq	154e4 <__assert_fail@plt+0x4338>
   15444:	str	r7, [r4, #20]
   15448:	bl	14c0c <__assert_fail@plt+0x3a60>
   1544c:	cmp	r0, #0
   15450:	beq	1552c <__assert_fail@plt+0x4380>
   15454:	ldrb	r3, [r7, #16]
   15458:	cmp	r3, #0
   1545c:	beq	1553c <__assert_fail@plt+0x4390>
   15460:	ldr	r0, [sp, #4]
   15464:	bl	149f8 <__assert_fail@plt+0x384c>
   15468:	lsrs	r2, r0, #30
   1546c:	movne	r7, #1
   15470:	moveq	r7, #0
   15474:	tst	r0, #536870912	; 0x20000000
   15478:	bne	15524 <__assert_fail@plt+0x4378>
   1547c:	cmp	r7, #0
   15480:	bne	15524 <__assert_fail@plt+0x4378>
   15484:	cmp	r0, #0
   15488:	str	r0, [r4, #8]
   1548c:	beq	1552c <__assert_fail@plt+0x4380>
   15490:	mov	r1, #8
   15494:	bl	19124 <__assert_fail@plt+0x7f78>
   15498:	cmp	r0, #0
   1549c:	str	r0, [r4]
   154a0:	beq	1552c <__assert_fail@plt+0x4380>
   154a4:	ldr	r3, [r4, #8]
   154a8:	str	r7, [r4, #12]
   154ac:	str	r7, [r4, #16]
   154b0:	str	r6, [r4, #24]
   154b4:	str	r5, [r4, #28]
   154b8:	add	r0, r0, r3, lsl #3
   154bc:	ldr	r3, [sp, #32]
   154c0:	str	r0, [r4, #4]
   154c4:	str	r3, [r4, #32]
   154c8:	str	r7, [r4, #36]	; 0x24
   154cc:	mov	r0, r4
   154d0:	add	sp, sp, #12
   154d4:	ldrd	r4, [sp]
   154d8:	ldrd	r6, [sp, #8]
   154dc:	add	sp, sp, #16
   154e0:	pop	{pc}		; (ldr pc, [sp], #4)
   154e4:	movw	r3, #42828	; 0xa74c
   154e8:	movt	r3, #1
   154ec:	str	r3, [r4, #20]
   154f0:	bl	14c0c <__assert_fail@plt+0x3a60>
   154f4:	cmp	r0, #0
   154f8:	beq	1552c <__assert_fail@plt+0x4380>
   154fc:	vldr	s13, [pc, #64]	; 15544 <__assert_fail@plt+0x4398>
   15500:	vldr	s15, [sp, #4]
   15504:	vldr	s14, [pc, #60]	; 15548 <__assert_fail@plt+0x439c>
   15508:	vcvt.f32.u32	s12, s15
   1550c:	vdiv.f32	s15, s12, s13
   15510:	vcmpe.f32	s15, s14
   15514:	vmrs	APSR_nzcv, fpscr
   15518:	vcvtlt.u32.f32	s15, s15
   1551c:	vstrlt	s15, [sp, #4]
   15520:	blt	15460 <__assert_fail@plt+0x42b4>
   15524:	mov	r3, #0
   15528:	str	r3, [r4, #8]
   1552c:	mov	r0, r4
   15530:	mov	r4, #0
   15534:	bl	19710 <__assert_fail@plt+0x8564>
   15538:	b	154cc <__assert_fail@plt+0x4320>
   1553c:	vldr	s13, [r7, #8]
   15540:	b	15500 <__assert_fail@plt+0x4354>
   15544:	svccc	0x004ccccd
   15548:	svcmi	0x00800000
   1554c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15550:	mov	r5, r0
   15554:	ldr	r2, [r0, #4]
   15558:	strd	r6, [sp, #8]
   1555c:	ldr	r6, [r0]
   15560:	str	r8, [sp, #16]
   15564:	str	lr, [sp, #20]
   15568:	cmp	r6, r2
   1556c:	addcc	r6, r6, #8
   15570:	movcc	r7, #0
   15574:	bcc	15588 <__assert_fail@plt+0x43dc>
   15578:	b	155fc <__assert_fail@plt+0x4450>
   1557c:	cmp	r2, r6
   15580:	add	r6, r6, #8
   15584:	bls	155fc <__assert_fail@plt+0x4450>
   15588:	ldr	r3, [r6, #-8]
   1558c:	cmp	r3, #0
   15590:	beq	1557c <__assert_fail@plt+0x43d0>
   15594:	ldr	r4, [r6, #-4]
   15598:	ldr	r2, [r5, #32]
   1559c:	cmp	r4, #0
   155a0:	beq	155d4 <__assert_fail@plt+0x4428>
   155a4:	cmp	r2, #0
   155a8:	beq	155b8 <__assert_fail@plt+0x440c>
   155ac:	ldr	r0, [r4]
   155b0:	blx	r2
   155b4:	ldr	r2, [r5, #32]
   155b8:	ldr	r3, [r4, #4]
   155bc:	ldr	r1, [r5, #36]	; 0x24
   155c0:	str	r7, [r4]
   155c4:	str	r1, [r4, #4]
   155c8:	str	r4, [r5, #36]	; 0x24
   155cc:	subs	r4, r3, #0
   155d0:	bne	155a4 <__assert_fail@plt+0x43f8>
   155d4:	cmp	r2, #0
   155d8:	beq	155e4 <__assert_fail@plt+0x4438>
   155dc:	ldr	r0, [r6, #-8]
   155e0:	blx	r2
   155e4:	str	r7, [r6, #-8]
   155e8:	str	r7, [r6, #-4]
   155ec:	ldr	r2, [r5, #4]
   155f0:	cmp	r2, r6
   155f4:	add	r6, r6, #8
   155f8:	bhi	15588 <__assert_fail@plt+0x43dc>
   155fc:	mov	r3, #0
   15600:	ldrd	r6, [sp, #8]
   15604:	ldr	r8, [sp, #16]
   15608:	str	r3, [r5, #12]
   1560c:	str	r3, [r5, #16]
   15610:	ldrd	r4, [sp]
   15614:	add	sp, sp, #20
   15618:	pop	{pc}		; (ldr pc, [sp], #4)
   1561c:	strd	r4, [sp, #-16]!
   15620:	ldr	r2, [r0, #32]
   15624:	ldr	r5, [r0]
   15628:	ldr	r3, [r0, #4]
   1562c:	cmp	r2, #0
   15630:	str	r6, [sp, #8]
   15634:	mov	r6, r0
   15638:	str	lr, [sp, #12]
   1563c:	beq	156a4 <__assert_fail@plt+0x44f8>
   15640:	ldr	r2, [r0, #16]
   15644:	cmp	r2, #0
   15648:	beq	156a4 <__assert_fail@plt+0x44f8>
   1564c:	cmp	r5, r3
   15650:	bcc	15664 <__assert_fail@plt+0x44b8>
   15654:	b	156d8 <__assert_fail@plt+0x452c>
   15658:	add	r5, r5, #8
   1565c:	cmp	r3, r5
   15660:	bls	156a0 <__assert_fail@plt+0x44f4>
   15664:	ldr	r0, [r5]
   15668:	cmp	r0, #0
   1566c:	beq	15658 <__assert_fail@plt+0x44ac>
   15670:	mov	r4, r5
   15674:	b	1567c <__assert_fail@plt+0x44d0>
   15678:	ldr	r0, [r4]
   1567c:	ldr	r3, [r6, #32]
   15680:	blx	r3
   15684:	ldr	r4, [r4, #4]
   15688:	cmp	r4, #0
   1568c:	bne	15678 <__assert_fail@plt+0x44cc>
   15690:	ldr	r3, [r6, #4]
   15694:	add	r5, r5, #8
   15698:	cmp	r3, r5
   1569c:	bhi	15664 <__assert_fail@plt+0x44b8>
   156a0:	ldr	r5, [r6]
   156a4:	cmp	r5, r3
   156a8:	bcs	156d8 <__assert_fail@plt+0x452c>
   156ac:	ldr	r0, [r5, #4]
   156b0:	cmp	r0, #0
   156b4:	beq	156cc <__assert_fail@plt+0x4520>
   156b8:	ldr	r4, [r0, #4]
   156bc:	bl	19710 <__assert_fail@plt+0x8564>
   156c0:	subs	r0, r4, #0
   156c4:	bne	156b8 <__assert_fail@plt+0x450c>
   156c8:	ldr	r3, [r6, #4]
   156cc:	add	r5, r5, #8
   156d0:	cmp	r3, r5
   156d4:	bhi	156ac <__assert_fail@plt+0x4500>
   156d8:	ldr	r0, [r6, #36]	; 0x24
   156dc:	cmp	r0, #0
   156e0:	beq	156f4 <__assert_fail@plt+0x4548>
   156e4:	ldr	r4, [r0, #4]
   156e8:	bl	19710 <__assert_fail@plt+0x8564>
   156ec:	subs	r0, r4, #0
   156f0:	bne	156e4 <__assert_fail@plt+0x4538>
   156f4:	ldr	r0, [r6]
   156f8:	bl	19710 <__assert_fail@plt+0x8564>
   156fc:	mov	r0, r6
   15700:	ldrd	r4, [sp]
   15704:	ldr	r6, [sp, #8]
   15708:	ldr	lr, [sp, #12]
   1570c:	add	sp, sp, #16
   15710:	b	19710 <__assert_fail@plt+0x8564>
   15714:	ldr	r3, [r0, #20]
   15718:	strd	r4, [sp, #-20]!	; 0xffffffec
   1571c:	ldrb	r2, [r3, #16]
   15720:	strd	r6, [sp, #8]
   15724:	mov	r6, r0
   15728:	str	lr, [sp, #16]
   1572c:	sub	sp, sp, #52	; 0x34
   15730:	str	r1, [sp, #4]
   15734:	cmp	r2, #0
   15738:	bne	15764 <__assert_fail@plt+0x45b8>
   1573c:	vmov	s15, r1
   15740:	vldr	s13, [r3, #8]
   15744:	vldr	s14, [pc, #340]	; 158a0 <__assert_fail@plt+0x46f4>
   15748:	vcvt.f32.u32	s12, s15
   1574c:	vdiv.f32	s15, s12, s13
   15750:	vcmpe.f32	s15, s14
   15754:	vmrs	APSR_nzcv, fpscr
   15758:	vcvtlt.u32.f32	s15, s15
   1575c:	vstrlt	s15, [sp, #4]
   15760:	bge	15794 <__assert_fail@plt+0x45e8>
   15764:	ldr	r0, [sp, #4]
   15768:	bl	149f8 <__assert_fail@plt+0x384c>
   1576c:	lsrs	r3, r0, #30
   15770:	mov	r5, r0
   15774:	movne	r4, #1
   15778:	moveq	r4, #0
   1577c:	tst	r0, #536870912	; 0x20000000
   15780:	movne	r4, #1
   15784:	cmp	r0, #0
   15788:	moveq	r4, #1
   1578c:	cmp	r4, #0
   15790:	beq	157b0 <__assert_fail@plt+0x4604>
   15794:	mov	r4, #0
   15798:	mov	r0, r4
   1579c:	add	sp, sp, #52	; 0x34
   157a0:	ldrd	r4, [sp]
   157a4:	ldrd	r6, [sp, #8]
   157a8:	add	sp, sp, #16
   157ac:	pop	{pc}		; (ldr pc, [sp], #4)
   157b0:	ldr	r3, [r6, #8]
   157b4:	cmp	r3, r0
   157b8:	beq	15868 <__assert_fail@plt+0x46bc>
   157bc:	mov	r1, #8
   157c0:	bl	19124 <__assert_fail@plt+0x7f78>
   157c4:	cmp	r0, #0
   157c8:	str	r0, [sp, #8]
   157cc:	beq	15794 <__assert_fail@plt+0x45e8>
   157d0:	add	r3, r0, r5, lsl #3
   157d4:	ldr	r7, [r6, #20]
   157d8:	mov	r2, r4
   157dc:	add	r0, sp, #8
   157e0:	mov	r1, r6
   157e4:	ldr	lr, [r6, #28]
   157e8:	str	r3, [sp, #12]
   157ec:	str	r5, [sp, #16]
   157f0:	ldr	r5, [r6, #24]
   157f4:	str	r4, [sp, #20]
   157f8:	ldr	ip, [r6, #32]
   157fc:	str	r4, [sp, #24]
   15800:	ldr	r3, [r6, #36]	; 0x24
   15804:	str	r7, [sp, #28]
   15808:	str	r5, [sp, #32]
   1580c:	str	lr, [sp, #36]	; 0x24
   15810:	str	ip, [sp, #40]	; 0x28
   15814:	str	r3, [sp, #44]	; 0x2c
   15818:	bl	14cc0 <__assert_fail@plt+0x3b14>
   1581c:	subs	r4, r0, #0
   15820:	bne	15870 <__assert_fail@plt+0x46c4>
   15824:	ldr	r3, [sp, #44]	; 0x2c
   15828:	mov	r2, #1
   1582c:	add	r1, sp, #8
   15830:	mov	r0, r6
   15834:	str	r3, [r6, #36]	; 0x24
   15838:	bl	14cc0 <__assert_fail@plt+0x3b14>
   1583c:	cmp	r0, #0
   15840:	beq	1589c <__assert_fail@plt+0x46f0>
   15844:	add	r1, sp, #8
   15848:	mov	r0, r6
   1584c:	mov	r2, r4
   15850:	bl	14cc0 <__assert_fail@plt+0x3b14>
   15854:	cmp	r0, #0
   15858:	beq	1589c <__assert_fail@plt+0x46f0>
   1585c:	ldr	r0, [sp, #8]
   15860:	bl	19710 <__assert_fail@plt+0x8564>
   15864:	b	15798 <__assert_fail@plt+0x45ec>
   15868:	mov	r4, #1
   1586c:	b	15798 <__assert_fail@plt+0x45ec>
   15870:	ldr	r0, [r6]
   15874:	bl	19710 <__assert_fail@plt+0x8564>
   15878:	ldrd	r2, [sp, #8]
   1587c:	ldr	r1, [sp, #16]
   15880:	strd	r2, [r6]
   15884:	ldr	r2, [sp, #20]
   15888:	str	r1, [r6, #8]
   1588c:	ldr	r3, [sp, #44]	; 0x2c
   15890:	str	r2, [r6, #12]
   15894:	str	r3, [r6, #36]	; 0x24
   15898:	b	15798 <__assert_fail@plt+0x45ec>
   1589c:	bl	1117c <abort@plt>
   158a0:	svcmi	0x00800000
   158a4:	strd	r4, [sp, #-16]!
   158a8:	str	r6, [sp, #8]
   158ac:	subs	r6, r1, #0
   158b0:	str	lr, [sp, #12]
   158b4:	sub	sp, sp, #8
   158b8:	beq	15a38 <__assert_fail@plt+0x488c>
   158bc:	mov	r3, #0
   158c0:	mov	r5, r2
   158c4:	add	r2, sp, #4
   158c8:	mov	r4, r0
   158cc:	bl	14ae4 <__assert_fail@plt+0x3938>
   158d0:	subs	r3, r0, #0
   158d4:	beq	15900 <__assert_fail@plt+0x4754>
   158d8:	cmp	r5, #0
   158dc:	moveq	r0, r5
   158e0:	beq	158ec <__assert_fail@plt+0x4740>
   158e4:	mov	r0, #0
   158e8:	str	r3, [r5]
   158ec:	add	sp, sp, #8
   158f0:	ldrd	r4, [sp]
   158f4:	ldr	r6, [sp, #8]
   158f8:	add	sp, sp, #12
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	vldr	s15, [r4, #8]
   15904:	vldr	s14, [r4, #12]
   15908:	ldr	r3, [r4, #20]
   1590c:	vcvt.f32.u32	s15, s15
   15910:	vcvt.f32.u32	s14, s14
   15914:	vldr	s13, [r3, #8]
   15918:	vmul.f32	s15, s15, s13
   1591c:	vcmpe.f32	s14, s15
   15920:	vmrs	APSR_nzcv, fpscr
   15924:	bgt	1596c <__assert_fail@plt+0x47c0>
   15928:	ldr	r2, [sp, #4]
   1592c:	ldr	r3, [r2]
   15930:	cmp	r3, #0
   15934:	beq	159c8 <__assert_fail@plt+0x481c>
   15938:	ldr	r3, [r4, #36]	; 0x24
   1593c:	cmp	r3, #0
   15940:	beq	159ec <__assert_fail@plt+0x4840>
   15944:	ldr	r1, [r3, #4]
   15948:	str	r1, [r4, #36]	; 0x24
   1594c:	ldr	r1, [r4, #16]
   15950:	mov	r0, #1
   15954:	ldr	ip, [r2, #4]
   15958:	add	r1, r1, r0
   1595c:	stm	r3, {r6, ip}
   15960:	str	r3, [r2, #4]
   15964:	str	r1, [r4, #16]
   15968:	b	158ec <__assert_fail@plt+0x4740>
   1596c:	add	r0, r4, #20
   15970:	bl	14c0c <__assert_fail@plt+0x3a60>
   15974:	vldr	s15, [r4, #8]
   15978:	vldr	s14, [r4, #12]
   1597c:	ldr	r3, [r4, #20]
   15980:	vcvt.f32.u32	s15, s15
   15984:	vcvt.f32.u32	s14, s14
   15988:	vldr	s13, [r3, #8]
   1598c:	vmul.f32	s12, s13, s15
   15990:	vcmpe.f32	s14, s12
   15994:	vmrs	APSR_nzcv, fpscr
   15998:	ble	15928 <__assert_fail@plt+0x477c>
   1599c:	vldr	s14, [r3, #12]
   159a0:	ldrb	r2, [r3, #16]
   159a4:	vmul.f32	s15, s15, s14
   159a8:	vldr	s14, [pc, #140]	; 15a3c <__assert_fail@plt+0x4890>
   159ac:	cmp	r2, #0
   159b0:	vmuleq.f32	s15, s15, s13
   159b4:	vcmpe.f32	s15, s14
   159b8:	vmrs	APSR_nzcv, fpscr
   159bc:	blt	15a04 <__assert_fail@plt+0x4858>
   159c0:	mvn	r0, #0
   159c4:	b	158ec <__assert_fail@plt+0x4740>
   159c8:	ldr	r1, [r4, #12]
   159cc:	mov	r0, #1
   159d0:	ldr	r3, [r4, #16]
   159d4:	str	r6, [r2]
   159d8:	add	r2, r1, r0
   159dc:	add	r3, r3, r0
   159e0:	str	r2, [r4, #12]
   159e4:	str	r3, [r4, #16]
   159e8:	b	158ec <__assert_fail@plt+0x4740>
   159ec:	mov	r0, #8
   159f0:	bl	19198 <__assert_fail@plt+0x7fec>
   159f4:	subs	r3, r0, #0
   159f8:	beq	159c0 <__assert_fail@plt+0x4814>
   159fc:	ldr	r2, [sp, #4]
   15a00:	b	1594c <__assert_fail@plt+0x47a0>
   15a04:	vcvt.u32.f32	s15, s15
   15a08:	mov	r0, r4
   15a0c:	vmov	r1, s15
   15a10:	bl	15714 <__assert_fail@plt+0x4568>
   15a14:	cmp	r0, #0
   15a18:	beq	159c0 <__assert_fail@plt+0x4814>
   15a1c:	add	r2, sp, #4
   15a20:	mov	r3, #0
   15a24:	mov	r1, r6
   15a28:	mov	r0, r4
   15a2c:	bl	14ae4 <__assert_fail@plt+0x3938>
   15a30:	cmp	r0, #0
   15a34:	beq	15928 <__assert_fail@plt+0x477c>
   15a38:	bl	1117c <abort@plt>
   15a3c:	svcmi	0x00800000
   15a40:	str	r4, [sp, #-8]!
   15a44:	mov	r4, r1
   15a48:	str	lr, [sp, #4]
   15a4c:	sub	sp, sp, #8
   15a50:	add	r2, sp, #4
   15a54:	bl	158a4 <__assert_fail@plt+0x46f8>
   15a58:	cmn	r0, #1
   15a5c:	moveq	r0, #0
   15a60:	beq	15a70 <__assert_fail@plt+0x48c4>
   15a64:	cmp	r0, #0
   15a68:	ldreq	r0, [sp, #4]
   15a6c:	movne	r0, r4
   15a70:	add	sp, sp, #8
   15a74:	ldr	r4, [sp]
   15a78:	add	sp, sp, #4
   15a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a80:	strd	r4, [sp, #-16]!
   15a84:	mov	r3, #1
   15a88:	mov	r4, r0
   15a8c:	str	r6, [sp, #8]
   15a90:	str	lr, [sp, #12]
   15a94:	sub	sp, sp, #8
   15a98:	add	r2, sp, #4
   15a9c:	bl	14ae4 <__assert_fail@plt+0x3938>
   15aa0:	subs	r5, r0, #0
   15aa4:	beq	15ac4 <__assert_fail@plt+0x4918>
   15aa8:	ldr	r2, [sp, #4]
   15aac:	ldr	r3, [r4, #16]
   15ab0:	ldr	r2, [r2]
   15ab4:	sub	r3, r3, #1
   15ab8:	str	r3, [r4, #16]
   15abc:	cmp	r2, #0
   15ac0:	beq	15adc <__assert_fail@plt+0x4930>
   15ac4:	mov	r0, r5
   15ac8:	add	sp, sp, #8
   15acc:	ldrd	r4, [sp]
   15ad0:	ldr	r6, [sp, #8]
   15ad4:	add	sp, sp, #12
   15ad8:	pop	{pc}		; (ldr pc, [sp], #4)
   15adc:	vldr	s15, [r4, #8]
   15ae0:	ldr	r3, [r4, #12]
   15ae4:	ldr	r2, [r4, #20]
   15ae8:	vcvt.f32.u32	s15, s15
   15aec:	sub	r3, r3, #1
   15af0:	vmov	s14, r3
   15af4:	vldr	s13, [r2]
   15af8:	str	r3, [r4, #12]
   15afc:	vmul.f32	s15, s15, s13
   15b00:	vcvt.f32.u32	s14, s14
   15b04:	vcmpe.f32	s14, s15
   15b08:	vmrs	APSR_nzcv, fpscr
   15b0c:	bpl	15ac4 <__assert_fail@plt+0x4918>
   15b10:	add	r0, r4, #20
   15b14:	bl	14c0c <__assert_fail@plt+0x3a60>
   15b18:	vldr	s15, [r4, #8]
   15b1c:	vldr	s13, [r4, #12]
   15b20:	ldr	r3, [r4, #20]
   15b24:	vcvt.f32.u32	s15, s15
   15b28:	vcvt.f32.u32	s13, s13
   15b2c:	vldr	s14, [r3]
   15b30:	vmul.f32	s14, s15, s14
   15b34:	vcmpe.f32	s13, s14
   15b38:	vmrs	APSR_nzcv, fpscr
   15b3c:	bpl	15ac4 <__assert_fail@plt+0x4918>
   15b40:	ldrb	r2, [r3, #16]
   15b44:	mov	r0, r4
   15b48:	vldr	s14, [r3, #4]
   15b4c:	cmp	r2, #0
   15b50:	vmul.f32	s15, s15, s14
   15b54:	vldreq	s14, [r3, #8]
   15b58:	vmuleq.f32	s15, s15, s14
   15b5c:	vcvt.u32.f32	s15, s15
   15b60:	vmov	r1, s15
   15b64:	bl	15714 <__assert_fail@plt+0x4568>
   15b68:	cmp	r0, #0
   15b6c:	bne	15ac4 <__assert_fail@plt+0x4918>
   15b70:	ldr	r0, [r4, #36]	; 0x24
   15b74:	cmp	r0, #0
   15b78:	beq	15b8c <__assert_fail@plt+0x49e0>
   15b7c:	ldr	r6, [r0, #4]
   15b80:	bl	19710 <__assert_fail@plt+0x8564>
   15b84:	subs	r0, r6, #0
   15b88:	bne	15b7c <__assert_fail@plt+0x49d0>
   15b8c:	mov	r3, #0
   15b90:	str	r3, [r4, #36]	; 0x24
   15b94:	b	15ac4 <__assert_fail@plt+0x4918>
   15b98:	b	15a80 <__assert_fail@plt+0x48d4>
   15b9c:	mov	r3, #0
   15ba0:	mov	r2, #1
   15ba4:	str	r1, [r0]
   15ba8:	str	r1, [r0, #4]
   15bac:	str	r1, [r0, #8]
   15bb0:	str	r1, [r0, #12]
   15bb4:	str	r1, [r0, #16]
   15bb8:	str	r3, [r0, #20]
   15bbc:	str	r3, [r0, #24]
   15bc0:	strb	r2, [r0, #28]
   15bc4:	bx	lr
   15bc8:	ldrb	r0, [r0, #28]
   15bcc:	bx	lr
   15bd0:	ldrb	ip, [r0, #28]
   15bd4:	mov	r2, r0
   15bd8:	ldr	r3, [r0, #20]
   15bdc:	eor	ip, ip, #1
   15be0:	add	r3, ip, r3
   15be4:	and	r3, r3, #3
   15be8:	ldr	r0, [r0, r3, lsl #2]
   15bec:	str	r1, [r2, r3, lsl #2]
   15bf0:	ldr	r1, [r2, #24]
   15bf4:	str	r3, [r2, #20]
   15bf8:	cmp	r1, r3
   15bfc:	bne	15c0c <__assert_fail@plt+0x4a60>
   15c00:	add	ip, ip, r1
   15c04:	and	ip, ip, #3
   15c08:	str	ip, [r2, #24]
   15c0c:	mov	r3, #0
   15c10:	strb	r3, [r2, #28]
   15c14:	bx	lr
   15c18:	ldrb	r3, [r0, #28]
   15c1c:	cmp	r3, #0
   15c20:	bne	15c5c <__assert_fail@plt+0x4ab0>
   15c24:	ldr	r1, [r0, #16]
   15c28:	ldr	r3, [r0, #20]
   15c2c:	ldr	r2, [r0, r3, lsl #2]
   15c30:	str	r1, [r0, r3, lsl #2]
   15c34:	ldr	r1, [r0, #24]
   15c38:	cmp	r3, r1
   15c3c:	moveq	r3, #1
   15c40:	strbeq	r3, [r0, #28]
   15c44:	beq	15c54 <__assert_fail@plt+0x4aa8>
   15c48:	add	r3, r3, #3
   15c4c:	and	r3, r3, #3
   15c50:	str	r3, [r0, #20]
   15c54:	mov	r0, r2
   15c58:	bx	lr
   15c5c:	str	r4, [sp, #-8]!
   15c60:	str	lr, [sp, #4]
   15c64:	bl	1117c <abort@plt>
   15c68:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15c6c:	mov	r4, r0
   15c70:	strd	r6, [sp, #8]
   15c74:	strd	r8, [sp, #16]
   15c78:	strd	sl, [sp, #24]
   15c7c:	str	lr, [sp, #32]
   15c80:	sub	sp, sp, #4
   15c84:	ldrb	r3, [r0]
   15c88:	sub	r2, r3, #48	; 0x30
   15c8c:	cmp	r2, #7
   15c90:	bls	15ddc <__assert_fail@plt+0x4c30>
   15c94:	cmp	r3, #0
   15c98:	moveq	r0, #1
   15c9c:	beq	15ccc <__assert_fail@plt+0x4b20>
   15ca0:	mov	r2, r4
   15ca4:	mov	r0, #1
   15ca8:	and	r1, r3, #239	; 0xef
   15cac:	cmp	r3, #43	; 0x2b
   15cb0:	cmpne	r1, #45	; 0x2d
   15cb4:	ldrb	r3, [r2, #1]!
   15cb8:	moveq	r1, #1
   15cbc:	movne	r1, #0
   15cc0:	add	r0, r0, r1
   15cc4:	cmp	r3, #0
   15cc8:	bne	15ca8 <__assert_fail@plt+0x4afc>
   15ccc:	mov	r1, #16
   15cd0:	movw	sl, #519	; 0x207
   15cd4:	bl	18d40 <__assert_fail@plt+0x7b94>
   15cd8:	mov	r7, #3
   15cdc:	mov	lr, #0
   15ce0:	mov	r5, #0
   15ce4:	ldrb	r1, [r4]
   15ce8:	mov	r2, r4
   15cec:	add	r4, r4, #1
   15cf0:	cmp	r1, #97	; 0x61
   15cf4:	beq	15f80 <__assert_fail@plt+0x4dd4>
   15cf8:	bls	15d38 <__assert_fail@plt+0x4b8c>
   15cfc:	cmp	r1, #111	; 0x6f
   15d00:	beq	15f78 <__assert_fail@plt+0x4dcc>
   15d04:	cmp	r1, #117	; 0x75
   15d08:	beq	15f88 <__assert_fail@plt+0x4ddc>
   15d0c:	cmp	r1, #103	; 0x67
   15d10:	beq	15f90 <__assert_fail@plt+0x4de4>
   15d14:	bl	19710 <__assert_fail@plt+0x8564>
   15d18:	mov	r0, #0
   15d1c:	add	sp, sp, #4
   15d20:	ldrd	r4, [sp]
   15d24:	ldrd	r6, [sp, #8]
   15d28:	ldrd	r8, [sp, #16]
   15d2c:	ldrd	sl, [sp, #24]
   15d30:	add	sp, sp, #32
   15d34:	pop	{pc}		; (ldr pc, [sp], #4)
   15d38:	cmp	r1, #45	; 0x2d
   15d3c:	beq	15d50 <__assert_fail@plt+0x4ba4>
   15d40:	cmp	r1, #61	; 0x3d
   15d44:	beq	15d50 <__assert_fail@plt+0x4ba4>
   15d48:	cmp	r1, #43	; 0x2b
   15d4c:	bne	15d14 <__assert_fail@plt+0x4b68>
   15d50:	add	r6, lr, #1
   15d54:	mov	r9, #1
   15d58:	add	lr, r0, lr, lsl #4
   15d5c:	movw	r8, #4095	; 0xfff
   15d60:	b	15db4 <__assert_fail@plt+0x4c08>
   15d64:	cmp	r3, #117	; 0x75
   15d68:	addeq	r3, r2, #2
   15d6c:	moveq	r4, #448	; 0x1c0
   15d70:	bne	15e80 <__assert_fail@plt+0x4cd4>
   15d74:	strb	r1, [lr]
   15d78:	ldrb	r1, [r2, #2]
   15d7c:	mov	r2, r3
   15d80:	strb	r7, [lr, #1]
   15d84:	str	r5, [lr, #4]
   15d88:	str	r4, [lr, #8]
   15d8c:	cmp	r5, #0
   15d90:	andne	r4, r4, r5
   15d94:	and	r3, r1, #239	; 0xef
   15d98:	add	lr, lr, #16
   15d9c:	str	r4, [lr, #-4]
   15da0:	cmp	r1, #43	; 0x2b
   15da4:	cmpne	r3, #45	; 0x2d
   15da8:	add	r3, r6, #1
   15dac:	bne	15fe4 <__assert_fail@plt+0x4e38>
   15db0:	mov	r6, r3
   15db4:	ldrb	r3, [r2, #1]
   15db8:	add	ip, r2, #1
   15dbc:	cmp	r3, #103	; 0x67
   15dc0:	beq	15f6c <__assert_fail@plt+0x4dc0>
   15dc4:	bls	15e14 <__assert_fail@plt+0x4c68>
   15dc8:	cmp	r3, #111	; 0x6f
   15dcc:	bne	15d64 <__assert_fail@plt+0x4bb8>
   15dd0:	add	r3, r2, #2
   15dd4:	mov	r4, #7
   15dd8:	b	15d74 <__assert_fail@plt+0x4bc8>
   15ddc:	add	r1, r0, #1
   15de0:	mov	r5, #0
   15de4:	b	15df8 <__assert_fail@plt+0x4c4c>
   15de8:	ldrb	r3, [r1], #1
   15dec:	sub	r0, r3, #48	; 0x30
   15df0:	cmp	r0, #7
   15df4:	bhi	15f9c <__assert_fail@plt+0x4df0>
   15df8:	add	r5, r3, r5, lsl #3
   15dfc:	mov	r2, r1
   15e00:	sub	r5, r5, #48	; 0x30
   15e04:	cmp	r5, #4096	; 0x1000
   15e08:	bcc	15de8 <__assert_fail@plt+0x4c3c>
   15e0c:	mov	r0, #0
   15e10:	b	15d1c <__assert_fail@plt+0x4b70>
   15e14:	sub	r4, r3, #48	; 0x30
   15e18:	cmp	r4, #7
   15e1c:	addls	r4, r2, #2
   15e20:	movls	ip, #0
   15e24:	bhi	15e80 <__assert_fail@plt+0x4cd4>
   15e28:	add	ip, r3, ip, lsl #3
   15e2c:	mov	r2, r4
   15e30:	sub	ip, ip, #48	; 0x30
   15e34:	cmp	ip, #4096	; 0x1000
   15e38:	bcs	15d14 <__assert_fail@plt+0x4b68>
   15e3c:	ldrb	r3, [r4]
   15e40:	add	r4, r4, #1
   15e44:	sub	fp, r3, #48	; 0x30
   15e48:	cmp	fp, #7
   15e4c:	bls	15e28 <__assert_fail@plt+0x4c7c>
   15e50:	cmp	r5, #0
   15e54:	bne	15d14 <__assert_fail@plt+0x4b68>
   15e58:	cmp	r3, #0
   15e5c:	cmpne	r3, #44	; 0x2c
   15e60:	bne	15d14 <__assert_fail@plt+0x4b68>
   15e64:	movw	r5, #4095	; 0xfff
   15e68:	strb	r1, [lr]
   15e6c:	mov	r1, r3
   15e70:	mov	r4, r5
   15e74:	strb	r9, [lr, #1]
   15e78:	stmib	lr, {r8, ip}
   15e7c:	b	15d94 <__assert_fail@plt+0x4be8>
   15e80:	mov	fp, #1
   15e84:	mov	r4, #0
   15e88:	sub	r2, r3, #88	; 0x58
   15e8c:	cmp	r2, #32
   15e90:	ldrls	pc, [pc, r2, lsl #2]
   15e94:	b	15f50 <__assert_fail@plt+0x4da4>
   15e98:	andeq	r5, r1, ip, lsl pc
   15e9c:	andeq	r5, r1, r0, asr pc
   15ea0:	andeq	r5, r1, r0, asr pc
   15ea4:	andeq	r5, r1, r0, asr pc
   15ea8:	andeq	r5, r1, r0, asr pc
   15eac:	andeq	r5, r1, r0, asr pc
   15eb0:	andeq	r5, r1, r0, asr pc
   15eb4:	andeq	r5, r1, r0, asr pc
   15eb8:	andeq	r5, r1, r0, asr pc
   15ebc:	andeq	r5, r1, r0, asr pc
   15ec0:	andeq	r5, r1, r0, asr pc
   15ec4:	andeq	r5, r1, r0, asr pc
   15ec8:	andeq	r5, r1, r0, asr pc
   15ecc:	andeq	r5, r1, r0, asr pc
   15ed0:	andeq	r5, r1, r0, asr pc
   15ed4:	andeq	r5, r1, r0, asr pc
   15ed8:	andeq	r5, r1, r0, asr pc
   15edc:	andeq	r5, r1, r0, asr pc
   15ee0:	andeq	r5, r1, r0, asr pc
   15ee4:	andeq	r5, r1, r0, asr pc
   15ee8:	andeq	r5, r1, r0, asr pc
   15eec:	andeq	r5, r1, r0, asr pc
   15ef0:	andeq	r5, r1, r0, asr pc
   15ef4:	andeq	r5, r1, r0, asr pc
   15ef8:	andeq	r5, r1, r0, asr pc
   15efc:	andeq	r5, r1, r0, asr pc
   15f00:	andeq	r5, r1, r8, asr #30
   15f04:	andeq	r5, r1, r0, asr #30
   15f08:	andeq	r5, r1, r8, lsr pc
   15f0c:	andeq	r5, r1, r0, asr pc
   15f10:	andeq	r5, r1, r0, asr pc
   15f14:	andeq	r5, r1, r0, lsr pc
   15f18:	andeq	r5, r1, r8, lsr #30
   15f1c:	mov	fp, #2
   15f20:	ldrb	r3, [ip, #1]!
   15f24:	b	15e88 <__assert_fail@plt+0x4cdc>
   15f28:	orr	r4, r4, #73	; 0x49
   15f2c:	b	15f20 <__assert_fail@plt+0x4d74>
   15f30:	orr	r4, r4, #146	; 0x92
   15f34:	b	15f20 <__assert_fail@plt+0x4d74>
   15f38:	orr	r4, r4, #512	; 0x200
   15f3c:	b	15f20 <__assert_fail@plt+0x4d74>
   15f40:	orr	r4, r4, #3072	; 0xc00
   15f44:	b	15f20 <__assert_fail@plt+0x4d74>
   15f48:	orr	r4, r4, #292	; 0x124
   15f4c:	b	15f20 <__assert_fail@plt+0x4d74>
   15f50:	mov	r2, ip
   15f54:	strb	r1, [lr]
   15f58:	mov	r1, r3
   15f5c:	strb	fp, [lr, #1]
   15f60:	str	r5, [lr, #4]
   15f64:	str	r4, [lr, #8]
   15f68:	b	15d8c <__assert_fail@plt+0x4be0>
   15f6c:	add	r3, r2, #2
   15f70:	mov	r4, #56	; 0x38
   15f74:	b	15d74 <__assert_fail@plt+0x4bc8>
   15f78:	orr	r5, r5, sl
   15f7c:	b	15ce4 <__assert_fail@plt+0x4b38>
   15f80:	movw	r5, #4095	; 0xfff
   15f84:	b	15ce4 <__assert_fail@plt+0x4b38>
   15f88:	orr	r5, r5, #2496	; 0x9c0
   15f8c:	b	15ce4 <__assert_fail@plt+0x4b38>
   15f90:	orr	r5, r5, #1072	; 0x430
   15f94:	orr	r5, r5, #8
   15f98:	b	15ce4 <__assert_fail@plt+0x4b38>
   15f9c:	cmp	r3, #0
   15fa0:	bne	15e0c <__assert_fail@plt+0x4c60>
   15fa4:	sub	r2, r2, r4
   15fa8:	mov	r0, #32
   15fac:	cmp	r2, #4
   15fb0:	andle	r4, r5, #3072	; 0xc00
   15fb4:	movwgt	r4, #4095	; 0xfff
   15fb8:	mvnle	r4, r4, lsr #10
   15fbc:	mvnle	r4, r4, lsl #10
   15fc0:	bl	18bd8 <__assert_fail@plt+0x7a2c>
   15fc4:	movw	r1, #317	; 0x13d
   15fc8:	movw	r2, #4095	; 0xfff
   15fcc:	mov	r3, #0
   15fd0:	strh	r1, [r0]
   15fd4:	stmib	r0, {r2, r5}
   15fd8:	str	r4, [r0, #12]
   15fdc:	strb	r3, [r0, #17]
   15fe0:	b	15d1c <__assert_fail@plt+0x4b70>
   15fe4:	cmp	r1, #44	; 0x2c
   15fe8:	bne	15ff8 <__assert_fail@plt+0x4e4c>
   15fec:	add	r4, r2, #1
   15ff0:	mov	lr, r6
   15ff4:	b	15ce0 <__assert_fail@plt+0x4b34>
   15ff8:	cmp	r1, #0
   15ffc:	addeq	r6, r0, r6, lsl #4
   16000:	strbeq	r1, [r6, #1]
   16004:	beq	15d1c <__assert_fail@plt+0x4b70>
   16008:	b	15d14 <__assert_fail@plt+0x4b68>
   1600c:	strd	r4, [sp, #-12]!
   16010:	mov	r1, r0
   16014:	mov	r0, #3
   16018:	str	lr, [sp, #8]
   1601c:	sub	sp, sp, #108	; 0x6c
   16020:	mov	r2, sp
   16024:	bl	11164 <__xstat64@plt>
   16028:	subs	r4, r0, #0
   1602c:	movne	r0, #0
   16030:	bne	16058 <__assert_fail@plt+0x4eac>
   16034:	ldr	r5, [sp, #16]
   16038:	mov	r0, #32
   1603c:	bl	18bd8 <__assert_fail@plt+0x7a2c>
   16040:	movw	r3, #4095	; 0xfff
   16044:	movw	r2, #317	; 0x13d
   16048:	strh	r2, [r0]
   1604c:	stmib	r0, {r3, r5}
   16050:	str	r3, [r0, #12]
   16054:	strb	r4, [r0, #17]
   16058:	add	sp, sp, #108	; 0x6c
   1605c:	ldrd	r4, [sp]
   16060:	add	sp, sp, #8
   16064:	pop	{pc}		; (ldr pc, [sp], #4)
   16068:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1606c:	ubfx	r0, r0, #0, #12
   16070:	strd	r6, [sp, #8]
   16074:	strd	r8, [sp, #16]
   16078:	str	lr, [sp, #24]
   1607c:	ldrb	r4, [r3, #1]
   16080:	ldr	r9, [sp, #28]
   16084:	cmp	r4, #0
   16088:	beq	161d8 <__assert_fail@plt+0x502c>
   1608c:	add	r3, r3, #16
   16090:	mvn	r2, r2
   16094:	mov	r7, #0
   16098:	mvn	r8, #3072	; 0xc00
   1609c:	b	16118 <__assert_fail@plt+0x4f6c>
   160a0:	cmp	r4, #2
   160a4:	mvn	lr, #0
   160a8:	beq	161c8 <__assert_fail@plt+0x501c>
   160ac:	mov	r5, r1
   160b0:	cmp	r4, #3
   160b4:	bne	160dc <__assert_fail@plt+0x4f30>
   160b8:	and	ip, ip, r0
   160bc:	tst	ip, #292	; 0x124
   160c0:	movne	r4, #292	; 0x124
   160c4:	moveq	r4, #0
   160c8:	tst	ip, #146	; 0x92
   160cc:	orrne	r4, r4, #146	; 0x92
   160d0:	tst	ip, #73	; 0x49
   160d4:	orrne	r4, r4, #73	; 0x49
   160d8:	orr	ip, r4, ip
   160dc:	cmp	r6, #0
   160e0:	and	ip, ip, lr
   160e4:	ldrb	r4, [r3, #-16]
   160e8:	bne	16154 <__assert_fail@plt+0x4fa8>
   160ec:	cmp	r4, #45	; 0x2d
   160f0:	and	ip, ip, r2
   160f4:	beq	161b0 <__assert_fail@plt+0x5004>
   160f8:	cmp	r4, #61	; 0x3d
   160fc:	beq	16174 <__assert_fail@plt+0x4fc8>
   16100:	cmp	r4, #43	; 0x2b
   16104:	beq	161bc <__assert_fail@plt+0x5010>
   16108:	add	r3, r3, #16
   1610c:	ldrb	r4, [r3, #-15]
   16110:	cmp	r4, #0
   16114:	beq	16194 <__assert_fail@plt+0x4fe8>
   16118:	cmp	r1, #0
   1611c:	ldr	r6, [r3, #-12]
   16120:	ldr	ip, [r3, #-8]
   16124:	beq	160a0 <__assert_fail@plt+0x4ef4>
   16128:	cmp	r4, #2
   1612c:	ldr	lr, [r3, #-4]
   16130:	mvn	r5, lr
   16134:	orr	lr, lr, r8
   16138:	and	r5, r5, #3072	; 0xc00
   1613c:	bne	160b0 <__assert_fail@plt+0x4f04>
   16140:	orr	ip, ip, #73	; 0x49
   16144:	cmp	r6, #0
   16148:	ldrb	r4, [r3, #-16]
   1614c:	and	ip, ip, lr
   16150:	beq	160ec <__assert_fail@plt+0x4f40>
   16154:	cmp	r4, #45	; 0x2d
   16158:	and	ip, ip, r6
   1615c:	beq	161b0 <__assert_fail@plt+0x5004>
   16160:	cmp	r4, #61	; 0x3d
   16164:	bne	16100 <__assert_fail@plt+0x4f54>
   16168:	mvn	r6, r6
   1616c:	orr	r5, r5, r6
   16170:	mvn	lr, r5
   16174:	add	r3, r3, #16
   16178:	ldrb	r4, [r3, #-15]
   1617c:	ubfx	lr, lr, #0, #12
   16180:	and	r0, r0, r5
   16184:	orr	r0, r0, ip
   16188:	orr	r7, r7, lr
   1618c:	cmp	r4, #0
   16190:	bne	16118 <__assert_fail@plt+0x4f6c>
   16194:	cmp	r9, #0
   16198:	ldrd	r4, [sp]
   1619c:	strne	r7, [r9]
   161a0:	ldrd	r6, [sp, #8]
   161a4:	ldrd	r8, [sp, #16]
   161a8:	add	sp, sp, #24
   161ac:	pop	{pc}		; (ldr pc, [sp], #4)
   161b0:	orr	r7, r7, ip
   161b4:	bic	r0, r0, ip
   161b8:	b	16108 <__assert_fail@plt+0x4f5c>
   161bc:	orr	r7, r7, ip
   161c0:	orr	r0, r0, ip
   161c4:	b	16108 <__assert_fail@plt+0x4f5c>
   161c8:	ands	r5, r0, #73	; 0x49
   161cc:	beq	160dc <__assert_fail@plt+0x4f30>
   161d0:	mov	r5, r1
   161d4:	b	16140 <__assert_fail@plt+0x4f94>
   161d8:	mov	r7, r4
   161dc:	b	16194 <__assert_fail@plt+0x4fe8>
   161e0:	push	{r2, r3}
   161e4:	push	{lr}		; (str lr, [sp, #-4]!)
   161e8:	sub	sp, sp, #12
   161ec:	ldr	r2, [sp, #16]
   161f0:	ands	r3, r2, #64	; 0x40
   161f4:	bne	16210 <__assert_fail@plt+0x5064>
   161f8:	bl	11050 <openat64@plt>
   161fc:	bl	185e8 <__assert_fail@plt+0x743c>
   16200:	add	sp, sp, #12
   16204:	pop	{lr}		; (ldr lr, [sp], #4)
   16208:	add	sp, sp, #8
   1620c:	bx	lr
   16210:	add	ip, sp, #20
   16214:	ldr	r3, [sp, #20]
   16218:	str	ip, [sp, #4]
   1621c:	b	161f8 <__assert_fail@plt+0x504c>
   16220:	orr	r2, r2, #540672	; 0x84000
   16224:	strd	r4, [sp, #-16]!
   16228:	orr	r2, r2, #2304	; 0x900
   1622c:	str	r6, [sp, #8]
   16230:	mov	r6, r3
   16234:	str	lr, [sp, #12]
   16238:	bl	161e0 <__assert_fail@plt+0x5034>
   1623c:	subs	r5, r0, #0
   16240:	movlt	r4, #0
   16244:	blt	16258 <__assert_fail@plt+0x50ac>
   16248:	bl	11110 <fdopendir@plt>
   1624c:	subs	r4, r0, #0
   16250:	beq	1626c <__assert_fail@plt+0x50c0>
   16254:	str	r5, [r6]
   16258:	mov	r0, r4
   1625c:	ldrd	r4, [sp]
   16260:	ldr	r6, [sp, #8]
   16264:	add	sp, sp, #12
   16268:	pop	{pc}		; (ldr pc, [sp], #4)
   1626c:	bl	11068 <__errno_location@plt>
   16270:	mov	r6, r0
   16274:	mov	r0, r5
   16278:	ldr	r5, [r6]
   1627c:	bl	11188 <close@plt>
   16280:	b	16254 <__assert_fail@plt+0x50a8>
   16284:	strd	r4, [sp, #-16]!
   16288:	subs	r4, r0, #0
   1628c:	str	r6, [sp, #8]
   16290:	str	lr, [sp, #12]
   16294:	beq	1632c <__assert_fail@plt+0x5180>
   16298:	mov	r1, #47	; 0x2f
   1629c:	bl	110ec <strrchr@plt>
   162a0:	subs	r5, r0, #0
   162a4:	beq	16304 <__assert_fail@plt+0x5158>
   162a8:	add	r6, r5, #1
   162ac:	sub	r3, r6, r4
   162b0:	cmp	r3, #6
   162b4:	ble	16304 <__assert_fail@plt+0x5158>
   162b8:	movw	r1, #43012	; 0xa804
   162bc:	movt	r1, #1
   162c0:	mov	r2, #7
   162c4:	sub	r0, r5, #6
   162c8:	bl	11170 <strncmp@plt>
   162cc:	cmp	r0, #0
   162d0:	bne	16304 <__assert_fail@plt+0x5158>
   162d4:	movw	r1, #43020	; 0xa80c
   162d8:	movt	r1, #1
   162dc:	mov	r2, #3
   162e0:	mov	r0, r6
   162e4:	bl	11170 <strncmp@plt>
   162e8:	cmp	r0, #0
   162ec:	movne	r4, r6
   162f0:	bne	16304 <__assert_fail@plt+0x5158>
   162f4:	add	r4, r5, #4
   162f8:	movw	r3, #45416	; 0xb168
   162fc:	movt	r3, #2
   16300:	str	r4, [r3]
   16304:	movw	r2, #45492	; 0xb1b4
   16308:	movt	r2, #2
   1630c:	ldr	r6, [sp, #8]
   16310:	movw	r3, #45420	; 0xb16c
   16314:	movt	r3, #2
   16318:	str	r4, [r2]
   1631c:	str	r4, [r3]
   16320:	ldrd	r4, [sp]
   16324:	add	sp, sp, #12
   16328:	pop	{pc}		; (ldr pc, [sp], #4)
   1632c:	movw	r3, #45432	; 0xb178
   16330:	movt	r3, #2
   16334:	movw	r0, #42956	; 0xa7cc
   16338:	movt	r0, #1
   1633c:	ldr	r3, [r3]
   16340:	mov	r2, #55	; 0x37
   16344:	mov	r1, #1
   16348:	bl	10f9c <fwrite@plt>
   1634c:	bl	1117c <abort@plt>
   16350:	strd	r4, [sp, #-16]!
   16354:	mov	r4, #0
   16358:	mov	r5, #0
   1635c:	cmp	r1, #10
   16360:	str	r6, [sp, #8]
   16364:	strd	r4, [r0]
   16368:	strd	r4, [r0, #8]
   1636c:	str	lr, [sp, #12]
   16370:	strd	r4, [r0, #16]
   16374:	strd	r4, [r0, #24]
   16378:	strd	r4, [r0, #32]
   1637c:	strd	r4, [r0, #40]	; 0x28
   16380:	beq	16398 <__assert_fail@plt+0x51ec>
   16384:	ldrd	r4, [sp]
   16388:	str	r1, [r0]
   1638c:	ldr	r6, [sp, #8]
   16390:	add	sp, sp, #12
   16394:	pop	{pc}		; (ldr pc, [sp], #4)
   16398:	bl	1117c <abort@plt>
   1639c:	mov	r2, #5
   163a0:	strd	r4, [sp, #-16]!
   163a4:	mov	r5, r0
   163a8:	str	r6, [sp, #8]
   163ac:	mov	r6, r1
   163b0:	mov	r1, r0
   163b4:	mov	r0, #0
   163b8:	str	lr, [sp, #12]
   163bc:	bl	10f54 <dcgettext@plt>
   163c0:	cmp	r5, r0
   163c4:	mov	r4, r0
   163c8:	beq	163e0 <__assert_fail@plt+0x5234>
   163cc:	mov	r0, r4
   163d0:	ldrd	r4, [sp]
   163d4:	ldr	r6, [sp, #8]
   163d8:	add	sp, sp, #12
   163dc:	pop	{pc}		; (ldr pc, [sp], #4)
   163e0:	bl	19840 <__assert_fail@plt+0x8694>
   163e4:	ldrb	r3, [r0]
   163e8:	bic	r3, r3, #32
   163ec:	cmp	r3, #85	; 0x55
   163f0:	bne	16458 <__assert_fail@plt+0x52ac>
   163f4:	ldrb	r3, [r0, #1]
   163f8:	bic	r3, r3, #32
   163fc:	cmp	r3, #84	; 0x54
   16400:	bne	164d8 <__assert_fail@plt+0x532c>
   16404:	ldrb	r3, [r0, #2]
   16408:	bic	r3, r3, #32
   1640c:	cmp	r3, #70	; 0x46
   16410:	bne	164d8 <__assert_fail@plt+0x532c>
   16414:	ldrb	r3, [r0, #3]
   16418:	cmp	r3, #45	; 0x2d
   1641c:	bne	164d8 <__assert_fail@plt+0x532c>
   16420:	ldrb	r3, [r0, #4]
   16424:	cmp	r3, #56	; 0x38
   16428:	bne	164d8 <__assert_fail@plt+0x532c>
   1642c:	ldrb	r3, [r0, #5]
   16430:	cmp	r3, #0
   16434:	bne	164d8 <__assert_fail@plt+0x532c>
   16438:	ldrb	r2, [r4]
   1643c:	movw	r3, #43112	; 0xa868
   16440:	movt	r3, #1
   16444:	movw	r4, #43124	; 0xa874
   16448:	movt	r4, #1
   1644c:	cmp	r2, #96	; 0x60
   16450:	movne	r4, r3
   16454:	b	163cc <__assert_fail@plt+0x5220>
   16458:	cmp	r3, #71	; 0x47
   1645c:	bne	164d8 <__assert_fail@plt+0x532c>
   16460:	ldrb	r3, [r0, #1]
   16464:	bic	r3, r3, #32
   16468:	cmp	r3, #66	; 0x42
   1646c:	bne	164d8 <__assert_fail@plt+0x532c>
   16470:	ldrb	r3, [r0, #2]
   16474:	cmp	r3, #49	; 0x31
   16478:	bne	164d8 <__assert_fail@plt+0x532c>
   1647c:	ldrb	r3, [r0, #3]
   16480:	cmp	r3, #56	; 0x38
   16484:	bne	164d8 <__assert_fail@plt+0x532c>
   16488:	ldrb	r3, [r0, #4]
   1648c:	cmp	r3, #48	; 0x30
   16490:	bne	164d8 <__assert_fail@plt+0x532c>
   16494:	ldrb	r3, [r0, #5]
   16498:	cmp	r3, #51	; 0x33
   1649c:	bne	164d8 <__assert_fail@plt+0x532c>
   164a0:	ldrb	r3, [r0, #6]
   164a4:	cmp	r3, #48	; 0x30
   164a8:	bne	164d8 <__assert_fail@plt+0x532c>
   164ac:	ldrb	r3, [r0, #7]
   164b0:	cmp	r3, #0
   164b4:	bne	164d8 <__assert_fail@plt+0x532c>
   164b8:	ldrb	r2, [r4]
   164bc:	movw	r3, #43116	; 0xa86c
   164c0:	movt	r3, #1
   164c4:	movw	r4, #43120	; 0xa870
   164c8:	movt	r4, #1
   164cc:	cmp	r2, #96	; 0x60
   164d0:	movne	r4, r3
   164d4:	b	163cc <__assert_fail@plt+0x5220>
   164d8:	movw	r3, #43128	; 0xa878
   164dc:	movt	r3, #1
   164e0:	cmp	r6, #9
   164e4:	movw	r4, #43108	; 0xa864
   164e8:	movt	r4, #1
   164ec:	movne	r4, r3
   164f0:	b	163cc <__assert_fail@plt+0x5220>
   164f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   164f8:	strd	r6, [sp, #8]
   164fc:	strd	r8, [sp, #16]
   16500:	strd	sl, [sp, #24]
   16504:	mov	fp, r0
   16508:	mov	sl, r1
   1650c:	str	lr, [sp, #32]
   16510:	sub	sp, sp, #116	; 0x74
   16514:	ldr	r8, [sp, #152]	; 0x98
   16518:	str	r3, [sp, #28]
   1651c:	ldr	r3, [sp, #156]	; 0x9c
   16520:	str	r2, [sp, #32]
   16524:	and	r4, r3, #2
   16528:	ubfx	r3, r3, #1, #1
   1652c:	str	r3, [sp, #44]	; 0x2c
   16530:	bl	10fb4 <__ctype_get_mb_cur_max@plt>
   16534:	str	r0, [sp, #64]	; 0x40
   16538:	cmp	r8, #10
   1653c:	ldrls	pc, [pc, r8, lsl #2]
   16540:	b	17cb0 <__assert_fail@plt+0x6b04>
   16544:	andeq	r6, r1, r8, asr #18
   16548:	andeq	r6, r1, r4, ror #19
   1654c:	andeq	r6, r1, r0, asr #31
   16550:	andeq	r6, r1, r4, lsl #20
   16554:	andeq	r6, r1, ip, lsr #17
   16558:	strdeq	r6, [r1], -r8
   1655c:	andeq	r6, r1, r8, ror r9
   16560:			; <UNDEFINED> instruction: 0x000169b4
   16564:	andeq	r6, r1, r0, ror r5
   16568:	andeq	r6, r1, r0, ror r5
   1656c:	andeq	r6, r1, r0, ror r5
   16570:	cmp	r8, #10
   16574:	beq	165a0 <__assert_fail@plt+0x53f4>
   16578:	mov	r1, r8
   1657c:	movw	r0, #43132	; 0xa87c
   16580:	movt	r0, #1
   16584:	bl	1639c <__assert_fail@plt+0x51f0>
   16588:	mov	r1, r8
   1658c:	str	r0, [sp, #164]	; 0xa4
   16590:	movw	r0, #43128	; 0xa878
   16594:	movt	r0, #1
   16598:	bl	1639c <__assert_fail@plt+0x51f0>
   1659c:	str	r0, [sp, #168]	; 0xa8
   165a0:	cmp	r4, #0
   165a4:	movne	r4, #0
   165a8:	beq	1798c <__assert_fail@plt+0x67e0>
   165ac:	mov	r3, #1
   165b0:	mov	r5, #0
   165b4:	ldr	r0, [sp, #168]	; 0xa8
   165b8:	str	r3, [sp, #36]	; 0x24
   165bc:	str	r3, [sp, #40]	; 0x28
   165c0:	str	r5, [sp, #68]	; 0x44
   165c4:	bl	11044 <strlen@plt>
   165c8:	ldr	r3, [sp, #168]	; 0xa8
   165cc:	str	r5, [sp, #48]	; 0x30
   165d0:	str	r0, [sp, #56]	; 0x38
   165d4:	str	r3, [sp, #60]	; 0x3c
   165d8:	str	r5, [sp, #72]	; 0x48
   165dc:	str	r8, [sp, #152]	; 0x98
   165e0:	mov	r8, fp
   165e4:	mov	r9, #0
   165e8:	ldr	fp, [sp, #152]	; 0x98
   165ec:	ldr	r3, [sp, #28]
   165f0:	cmn	r3, #1
   165f4:	beq	16b54 <__assert_fail@plt+0x59a8>
   165f8:	ldr	r3, [sp, #28]
   165fc:	subs	r6, r3, r9
   16600:	movne	r6, #1
   16604:	cmp	r6, #0
   16608:	beq	16b6c <__assert_fail@plt+0x59c0>
   1660c:	ldr	r0, [sp, #32]
   16610:	ldr	r7, [sp, #40]	; 0x28
   16614:	add	r3, r0, r9
   16618:	cmp	fp, #2
   1661c:	moveq	r7, #0
   16620:	andne	r7, r7, #1
   16624:	str	r3, [sp, #52]	; 0x34
   16628:	cmp	r7, #0
   1662c:	beq	17008 <__assert_fail@plt+0x5e5c>
   16630:	ldr	r2, [sp, #56]	; 0x38
   16634:	cmp	r2, #0
   16638:	beq	172a4 <__assert_fail@plt+0x60f8>
   1663c:	ldr	r1, [sp, #28]
   16640:	cmp	r2, #1
   16644:	mov	r3, r2
   16648:	movls	r3, #0
   1664c:	movhi	r3, #1
   16650:	add	r5, r9, r2
   16654:	cmn	r1, #1
   16658:	movne	r3, #0
   1665c:	cmp	r3, #0
   16660:	beq	1666c <__assert_fail@plt+0x54c0>
   16664:	bl	11044 <strlen@plt>
   16668:	str	r0, [sp, #28]
   1666c:	ldr	r3, [sp, #28]
   16670:	cmp	r5, r3
   16674:	bhi	172a4 <__assert_fail@plt+0x60f8>
   16678:	ldr	r0, [sp, #52]	; 0x34
   1667c:	ldr	r2, [sp, #56]	; 0x38
   16680:	ldr	r1, [sp, #60]	; 0x3c
   16684:	bl	10f3c <memcmp@plt>
   16688:	cmp	r0, #0
   1668c:	bne	172a4 <__assert_fail@plt+0x60f8>
   16690:	ldr	r3, [sp, #44]	; 0x2c
   16694:	cmp	r3, #0
   16698:	bne	17bd4 <__assert_fail@plt+0x6a28>
   1669c:	ldr	r3, [sp, #52]	; 0x34
   166a0:	ldrb	r5, [r3]
   166a4:	cmp	r5, #126	; 0x7e
   166a8:	ldrls	pc, [pc, r5, lsl #2]
   166ac:	b	16f64 <__assert_fail@plt+0x5db8>
   166b0:	andeq	r6, r1, r8, ror #28
   166b4:	andeq	r6, r1, r4, ror #30
   166b8:	andeq	r6, r1, r4, ror #30
   166bc:	andeq	r6, r1, r4, ror #30
   166c0:	andeq	r6, r1, r4, ror #30
   166c4:	andeq	r6, r1, r4, ror #30
   166c8:	andeq	r6, r1, r4, ror #30
   166cc:	andeq	r6, r1, ip, lsr lr
   166d0:	andeq	r6, r1, r4, lsr lr
   166d4:	andeq	r6, r1, ip, ror sp
   166d8:	andeq	r6, r1, r8, lsr #28
   166dc:	andeq	r6, r1, r4, ror sp
   166e0:	andeq	r6, r1, r4, lsl #28
   166e4:	andeq	r6, r1, r0, asr lr
   166e8:	andeq	r6, r1, r4, ror #30
   166ec:	andeq	r6, r1, r4, ror #30
   166f0:	andeq	r6, r1, r4, ror #30
   166f4:	andeq	r6, r1, r4, ror #30
   166f8:	andeq	r6, r1, r4, ror #30
   166fc:	andeq	r6, r1, r4, ror #30
   16700:	andeq	r6, r1, r4, ror #30
   16704:	andeq	r6, r1, r4, ror #30
   16708:	andeq	r6, r1, r4, ror #30
   1670c:	andeq	r6, r1, r4, ror #30
   16710:	andeq	r6, r1, r4, ror #30
   16714:	andeq	r6, r1, r4, ror #30
   16718:	andeq	r6, r1, r4, ror #30
   1671c:	andeq	r6, r1, r4, ror #30
   16720:	andeq	r6, r1, r4, ror #30
   16724:	andeq	r6, r1, r4, ror #30
   16728:	andeq	r6, r1, r4, ror #30
   1672c:	andeq	r6, r1, r4, ror #30
   16730:	andeq	r6, r1, r0, asr #30
   16734:	andeq	r6, r1, r8, asr #28
   16738:	andeq	r6, r1, r8, asr #28
   1673c:	andeq	r6, r1, r4, lsr #30
   16740:	andeq	r6, r1, r8, asr #28
   16744:	andeq	r6, r1, r8, asr pc
   16748:	andeq	r6, r1, r8, asr #28
   1674c:	andeq	r6, r1, r4, lsr #25
   16750:	andeq	r6, r1, r8, asr #28
   16754:	andeq	r6, r1, r8, asr #28
   16758:	andeq	r6, r1, r8, asr #28
   1675c:	andeq	r6, r1, r8, asr pc
   16760:	andeq	r6, r1, r8, asr pc
   16764:	andeq	r6, r1, r8, asr pc
   16768:	andeq	r6, r1, r8, asr pc
   1676c:	andeq	r6, r1, r8, asr pc
   16770:	andeq	r6, r1, r8, asr pc
   16774:	andeq	r6, r1, r8, asr pc
   16778:	andeq	r6, r1, r8, asr pc
   1677c:	andeq	r6, r1, r8, asr pc
   16780:	andeq	r6, r1, r8, asr pc
   16784:	andeq	r6, r1, r8, asr pc
   16788:	andeq	r6, r1, r8, asr pc
   1678c:	andeq	r6, r1, r8, asr pc
   16790:	andeq	r6, r1, r8, asr pc
   16794:	andeq	r6, r1, r8, asr pc
   16798:	andeq	r6, r1, r8, asr pc
   1679c:	andeq	r6, r1, r8, asr #28
   167a0:	andeq	r6, r1, r8, asr #28
   167a4:	andeq	r6, r1, r8, asr #28
   167a8:	andeq	r6, r1, r8, asr #28
   167ac:	andeq	r6, r1, r8, ror ip
   167b0:	andeq	r6, r1, r4, ror #30
   167b4:	andeq	r6, r1, r8, asr pc
   167b8:	andeq	r6, r1, r8, asr pc
   167bc:	andeq	r6, r1, r8, asr pc
   167c0:	andeq	r6, r1, r8, asr pc
   167c4:	andeq	r6, r1, r8, asr pc
   167c8:	andeq	r6, r1, r8, asr pc
   167cc:	andeq	r6, r1, r8, asr pc
   167d0:	andeq	r6, r1, r8, asr pc
   167d4:	andeq	r6, r1, r8, asr pc
   167d8:	andeq	r6, r1, r8, asr pc
   167dc:	andeq	r6, r1, r8, asr pc
   167e0:	andeq	r6, r1, r8, asr pc
   167e4:	andeq	r6, r1, r8, asr pc
   167e8:	andeq	r6, r1, r8, asr pc
   167ec:	andeq	r6, r1, r8, asr pc
   167f0:	andeq	r6, r1, r8, asr pc
   167f4:	andeq	r6, r1, r8, asr pc
   167f8:	andeq	r6, r1, r8, asr pc
   167fc:	andeq	r6, r1, r8, asr pc
   16800:	andeq	r6, r1, r8, asr pc
   16804:	andeq	r6, r1, r8, asr pc
   16808:	andeq	r6, r1, r8, asr pc
   1680c:	andeq	r6, r1, r8, asr pc
   16810:	andeq	r6, r1, r8, asr pc
   16814:	andeq	r6, r1, r8, asr pc
   16818:	andeq	r6, r1, r8, asr pc
   1681c:	andeq	r6, r1, r8, asr #28
   16820:	andeq	r6, r1, r0, lsr #24
   16824:	andeq	r6, r1, r8, asr pc
   16828:	andeq	r6, r1, r8, asr #28
   1682c:	andeq	r6, r1, r8, asr pc
   16830:	andeq	r6, r1, r8, asr #28
   16834:	andeq	r6, r1, r8, asr pc
   16838:	andeq	r6, r1, r8, asr pc
   1683c:	andeq	r6, r1, r8, asr pc
   16840:	andeq	r6, r1, r8, asr pc
   16844:	andeq	r6, r1, r8, asr pc
   16848:	andeq	r6, r1, r8, asr pc
   1684c:	andeq	r6, r1, r8, asr pc
   16850:	andeq	r6, r1, r8, asr pc
   16854:	andeq	r6, r1, r8, asr pc
   16858:	andeq	r6, r1, r8, asr pc
   1685c:	andeq	r6, r1, r8, asr pc
   16860:	andeq	r6, r1, r8, asr pc
   16864:	andeq	r6, r1, r8, asr pc
   16868:	andeq	r6, r1, r8, asr pc
   1686c:	andeq	r6, r1, r8, asr pc
   16870:	andeq	r6, r1, r8, asr pc
   16874:	andeq	r6, r1, r8, asr pc
   16878:	andeq	r6, r1, r8, asr pc
   1687c:	andeq	r6, r1, r8, asr pc
   16880:	andeq	r6, r1, r8, asr pc
   16884:	andeq	r6, r1, r8, asr pc
   16888:	andeq	r6, r1, r8, asr pc
   1688c:	andeq	r6, r1, r8, asr pc
   16890:	andeq	r6, r1, r8, asr pc
   16894:	andeq	r6, r1, r8, asr pc
   16898:	andeq	r6, r1, r8, asr pc
   1689c:	andeq	r6, r1, r4, asr #20
   168a0:	andeq	r6, r1, r8, asr #28
   168a4:	andeq	r6, r1, r4, asr #20
   168a8:	andeq	r6, r1, r4, lsr #30
   168ac:	cmp	r4, #0
   168b0:	moveq	r3, #1
   168b4:	streq	r3, [sp, #40]	; 0x28
   168b8:	beq	16fcc <__assert_fail@plt+0x5e20>
   168bc:	mov	r3, #0
   168c0:	mov	r2, #1
   168c4:	mov	r4, r3
   168c8:	str	r2, [sp, #36]	; 0x24
   168cc:	str	r2, [sp, #44]	; 0x2c
   168d0:	str	r2, [sp, #56]	; 0x38
   168d4:	str	r3, [sp, #68]	; 0x44
   168d8:	movw	r3, #43128	; 0xa878
   168dc:	movt	r3, #1
   168e0:	str	r4, [sp, #40]	; 0x28
   168e4:	mov	r8, #2
   168e8:	str	r4, [sp, #48]	; 0x30
   168ec:	str	r3, [sp, #60]	; 0x3c
   168f0:	str	r4, [sp, #72]	; 0x48
   168f4:	b	165dc <__assert_fail@plt+0x5430>
   168f8:	cmp	r4, #0
   168fc:	bne	17b48 <__assert_fail@plt+0x699c>
   16900:	cmp	sl, #0
   16904:	beq	17908 <__assert_fail@plt+0x675c>
   16908:	mov	r3, #34	; 0x22
   1690c:	mov	r1, r4
   16910:	mov	r2, #1
   16914:	strb	r3, [fp]
   16918:	movw	r3, #43108	; 0xa864
   1691c:	movt	r3, #1
   16920:	mov	r4, r2
   16924:	str	r2, [sp, #36]	; 0x24
   16928:	str	r2, [sp, #40]	; 0x28
   1692c:	str	r1, [sp, #44]	; 0x2c
   16930:	str	r1, [sp, #48]	; 0x30
   16934:	str	r2, [sp, #56]	; 0x38
   16938:	str	r3, [sp, #60]	; 0x3c
   1693c:	str	r1, [sp, #68]	; 0x44
   16940:	str	r1, [sp, #72]	; 0x48
   16944:	b	165dc <__assert_fail@plt+0x5430>
   16948:	mov	r3, #0
   1694c:	mov	r4, r8
   16950:	str	r3, [sp, #40]	; 0x28
   16954:	str	r3, [sp, #44]	; 0x2c
   16958:	str	r3, [sp, #48]	; 0x30
   1695c:	str	r8, [sp, #56]	; 0x38
   16960:	str	r3, [sp, #60]	; 0x3c
   16964:	str	r3, [sp, #68]	; 0x44
   16968:	mov	r3, #1
   1696c:	str	r3, [sp, #36]	; 0x24
   16970:	str	r8, [sp, #72]	; 0x48
   16974:	b	165dc <__assert_fail@plt+0x5430>
   16978:	mov	r3, #1
   1697c:	mov	r2, #0
   16980:	mov	r4, r2
   16984:	mov	r8, #5
   16988:	str	r3, [sp, #36]	; 0x24
   1698c:	str	r3, [sp, #40]	; 0x28
   16990:	str	r3, [sp, #44]	; 0x2c
   16994:	str	r2, [sp, #48]	; 0x30
   16998:	str	r3, [sp, #56]	; 0x38
   1699c:	movw	r3, #43108	; 0xa864
   169a0:	movt	r3, #1
   169a4:	str	r3, [sp, #60]	; 0x3c
   169a8:	str	r2, [sp, #68]	; 0x44
   169ac:	str	r2, [sp, #72]	; 0x48
   169b0:	b	165dc <__assert_fail@plt+0x5430>
   169b4:	mov	r3, #0
   169b8:	mov	r2, #1
   169bc:	mov	r4, r3
   169c0:	str	r2, [sp, #36]	; 0x24
   169c4:	str	r2, [sp, #40]	; 0x28
   169c8:	str	r3, [sp, #44]	; 0x2c
   169cc:	str	r3, [sp, #48]	; 0x30
   169d0:	str	r3, [sp, #56]	; 0x38
   169d4:	str	r3, [sp, #60]	; 0x3c
   169d8:	str	r3, [sp, #68]	; 0x44
   169dc:	str	r3, [sp, #72]	; 0x48
   169e0:	b	165dc <__assert_fail@plt+0x5430>
   169e4:	mov	r2, #1
   169e8:	mov	r3, #0
   169ec:	mov	r4, r3
   169f0:	str	r2, [sp, #36]	; 0x24
   169f4:	str	r2, [sp, #44]	; 0x2c
   169f8:	str	r8, [sp, #56]	; 0x38
   169fc:	str	r3, [sp, #68]	; 0x44
   16a00:	b	168d8 <__assert_fail@plt+0x572c>
   16a04:	mov	r3, #1
   16a08:	mov	r2, #0
   16a0c:	mov	r4, r2
   16a10:	mov	r8, #2
   16a14:	str	r3, [sp, #36]	; 0x24
   16a18:	str	r3, [sp, #40]	; 0x28
   16a1c:	str	r3, [sp, #44]	; 0x2c
   16a20:	str	r2, [sp, #48]	; 0x30
   16a24:	str	r3, [sp, #56]	; 0x38
   16a28:	movw	r3, #43128	; 0xa878
   16a2c:	movt	r3, #1
   16a30:	str	r3, [sp, #60]	; 0x3c
   16a34:	str	r2, [sp, #68]	; 0x44
   16a38:	str	r2, [sp, #72]	; 0x48
   16a3c:	b	165dc <__assert_fail@plt+0x5430>
   16a40:	mov	r7, #0
   16a44:	ldr	r3, [sp, #28]
   16a48:	cmn	r3, #1
   16a4c:	beq	17524 <__assert_fail@plt+0x6378>
   16a50:	ldr	r3, [sp, #28]
   16a54:	subs	r2, r3, #1
   16a58:	movne	r2, #1
   16a5c:	sub	r3, fp, #2
   16a60:	cmp	r2, #0
   16a64:	clz	r3, r3
   16a68:	lsr	r3, r3, #5
   16a6c:	bne	16a78 <__assert_fail@plt+0x58cc>
   16a70:	cmp	r9, #0
   16a74:	beq	17284 <__assert_fail@plt+0x60d8>
   16a78:	mov	r6, #0
   16a7c:	ldr	r2, [sp, #40]	; 0x28
   16a80:	eor	r2, r2, #1
   16a84:	orrs	r3, r3, r2
   16a88:	bne	16c60 <__assert_fail@plt+0x5ab4>
   16a8c:	ldr	r2, [sp, #160]	; 0xa0
   16a90:	cmp	r2, #0
   16a94:	beq	16ab4 <__assert_fail@plt+0x5908>
   16a98:	ldr	r0, [sp, #160]	; 0xa0
   16a9c:	ubfx	r1, r5, #5, #8
   16aa0:	and	r2, r5, #31
   16aa4:	ldr	r1, [r0, r1, lsl #2]
   16aa8:	lsr	r2, r1, r2
   16aac:	tst	r2, #1
   16ab0:	bne	16abc <__assert_fail@plt+0x5910>
   16ab4:	cmp	r7, #0
   16ab8:	beq	16d2c <__assert_fail@plt+0x5b80>
   16abc:	ldr	r2, [sp, #44]	; 0x2c
   16ac0:	sub	r3, fp, #2
   16ac4:	clz	r3, r3
   16ac8:	lsr	r3, r3, #5
   16acc:	cmp	r2, #0
   16ad0:	bne	17878 <__assert_fail@plt+0x66cc>
   16ad4:	ldr	r2, [sp, #48]	; 0x30
   16ad8:	eor	r2, r2, #1
   16adc:	ands	r3, r3, r2
   16ae0:	beq	16b18 <__assert_fail@plt+0x596c>
   16ae4:	cmp	sl, r4
   16ae8:	str	r3, [sp, #48]	; 0x30
   16aec:	movhi	r2, #39	; 0x27
   16af0:	strbhi	r2, [r8, r4]
   16af4:	add	r2, r4, #1
   16af8:	cmp	sl, r2
   16afc:	movhi	r1, #36	; 0x24
   16b00:	strbhi	r1, [r8, r2]
   16b04:	add	r2, r4, #2
   16b08:	add	r4, r4, #3
   16b0c:	cmp	sl, r2
   16b10:	movhi	r1, #39	; 0x27
   16b14:	strbhi	r1, [r8, r2]
   16b18:	cmp	r4, sl
   16b1c:	add	r9, r9, #1
   16b20:	movcc	r3, #92	; 0x5c
   16b24:	strbcc	r3, [r8, r4]
   16b28:	add	r4, r4, #1
   16b2c:	cmp	r4, sl
   16b30:	ldr	r3, [sp, #36]	; 0x24
   16b34:	strbcc	r5, [r8, r4]
   16b38:	cmp	r6, #0
   16b3c:	add	r4, r4, #1
   16b40:	moveq	r3, #0
   16b44:	str	r3, [sp, #36]	; 0x24
   16b48:	ldr	r3, [sp, #28]
   16b4c:	cmn	r3, #1
   16b50:	bne	165f8 <__assert_fail@plt+0x544c>
   16b54:	ldr	r3, [sp, #32]
   16b58:	ldrb	r6, [r3, r9]
   16b5c:	adds	r6, r6, #0
   16b60:	movne	r6, #1
   16b64:	cmp	r6, #0
   16b68:	bne	1660c <__assert_fail@plt+0x5460>
   16b6c:	str	fp, [sp, #152]	; 0x98
   16b70:	mov	fp, r8
   16b74:	cmp	r4, #0
   16b78:	ldr	r1, [sp, #44]	; 0x2c
   16b7c:	movne	r3, #0
   16b80:	ldr	r8, [sp, #152]	; 0x98
   16b84:	sub	r2, r8, #2
   16b88:	clz	r2, r2
   16b8c:	lsr	r2, r2, #5
   16b90:	andeq	r3, r2, r1
   16b94:	cmp	r3, #0
   16b98:	bne	17c54 <__assert_fail@plt+0x6aa8>
   16b9c:	eor	r3, r1, #1
   16ba0:	ands	r2, r2, r3
   16ba4:	beq	17b80 <__assert_fail@plt+0x69d4>
   16ba8:	ldr	r3, [sp, #68]	; 0x44
   16bac:	cmp	r3, #0
   16bb0:	beq	17b84 <__assert_fail@plt+0x69d8>
   16bb4:	ldr	r3, [sp, #36]	; 0x24
   16bb8:	cmp	r3, #0
   16bbc:	bne	17c10 <__assert_fail@plt+0x6a64>
   16bc0:	ldr	r3, [sp, #72]	; 0x48
   16bc4:	adds	r3, r3, #0
   16bc8:	movne	r3, #1
   16bcc:	cmp	sl, #0
   16bd0:	movne	r3, #0
   16bd4:	cmp	r3, #0
   16bd8:	ldreq	r2, [sp, #68]	; 0x44
   16bdc:	beq	17b84 <__assert_fail@plt+0x69d8>
   16be0:	ldr	r2, [sp, #72]	; 0x48
   16be4:	str	r3, [sp, #68]	; 0x44
   16be8:	movw	r3, #43128	; 0xa878
   16bec:	movt	r3, #1
   16bf0:	mov	r1, #39	; 0x27
   16bf4:	mov	r4, #1
   16bf8:	ldr	sl, [sp, #72]	; 0x48
   16bfc:	mov	r8, #2
   16c00:	str	r3, [sp, #60]	; 0x3c
   16c04:	mov	r3, #0
   16c08:	strb	r1, [fp]
   16c0c:	str	r3, [sp, #44]	; 0x2c
   16c10:	str	r4, [sp, #56]	; 0x38
   16c14:	str	r2, [sp, #72]	; 0x48
   16c18:	b	165dc <__assert_fail@plt+0x5430>
   16c1c:	mov	r7, #0
   16c20:	cmp	fp, #2
   16c24:	beq	17504 <__assert_fail@plt+0x6358>
   16c28:	ldr	r2, [sp, #40]	; 0x28
   16c2c:	ldr	r3, [sp, #56]	; 0x38
   16c30:	ldr	r1, [sp, #44]	; 0x2c
   16c34:	cmp	r3, #0
   16c38:	moveq	r3, #0
   16c3c:	andne	r3, r2, r1
   16c40:	cmp	r3, #0
   16c44:	moveq	r5, #92	; 0x5c
   16c48:	moveq	r3, r5
   16c4c:	bne	17510 <__assert_fail@plt+0x6364>
   16c50:	ldr	r2, [sp, #40]	; 0x28
   16c54:	cmp	r2, #0
   16c58:	bne	1794c <__assert_fail@plt+0x67a0>
   16c5c:	mov	r6, #0
   16c60:	ldr	r3, [sp, #44]	; 0x2c
   16c64:	cmp	r3, #0
   16c68:	beq	174fc <__assert_fail@plt+0x6350>
   16c6c:	mov	r3, #0
   16c70:	b	16a8c <__assert_fail@plt+0x58e0>
   16c74:	mov	r7, #0
   16c78:	cmp	fp, #2
   16c7c:	beq	17574 <__assert_fail@plt+0x63c8>
   16c80:	cmp	fp, #5
   16c84:	beq	17538 <__assert_fail@plt+0x638c>
   16c88:	sub	r3, fp, #2
   16c8c:	mov	r6, #0
   16c90:	clz	r3, r3
   16c94:	mov	r5, #63	; 0x3f
   16c98:	lsr	r3, r3, #5
   16c9c:	b	16a7c <__assert_fail@plt+0x58d0>
   16ca0:	mov	r7, #0
   16ca4:	cmp	fp, #2
   16ca8:	movne	r3, #0
   16cac:	movne	r5, #39	; 0x27
   16cb0:	strne	r6, [sp, #68]	; 0x44
   16cb4:	bne	16a7c <__assert_fail@plt+0x58d0>
   16cb8:	ldr	r3, [sp, #44]	; 0x2c
   16cbc:	cmp	r3, #0
   16cc0:	bne	1797c <__assert_fail@plt+0x67d0>
   16cc4:	ldr	r3, [sp, #72]	; 0x48
   16cc8:	cmp	sl, #0
   16ccc:	clz	r3, r3
   16cd0:	lsr	r3, r3, #5
   16cd4:	moveq	r3, #0
   16cd8:	cmp	r3, #0
   16cdc:	bne	178a8 <__assert_fail@plt+0x66fc>
   16ce0:	cmp	sl, r4
   16ce4:	movhi	r3, #39	; 0x27
   16ce8:	strbhi	r3, [r8, r4]
   16cec:	add	r3, r4, #1
   16cf0:	cmp	sl, r3
   16cf4:	movhi	r2, #92	; 0x5c
   16cf8:	strbhi	r2, [r8, r3]
   16cfc:	add	r3, r4, #2
   16d00:	cmp	sl, r3
   16d04:	bls	16d10 <__assert_fail@plt+0x5b64>
   16d08:	mov	r2, #39	; 0x27
   16d0c:	strb	r2, [r8, r3]
   16d10:	mov	r3, #0
   16d14:	cmp	r7, #0
   16d18:	add	r4, r4, #3
   16d1c:	mov	r5, #39	; 0x27
   16d20:	str	r3, [sp, #48]	; 0x30
   16d24:	str	r6, [sp, #68]	; 0x44
   16d28:	bne	16abc <__assert_fail@plt+0x5910>
   16d2c:	ldr	r2, [sp, #48]	; 0x30
   16d30:	eor	r3, r3, #1
   16d34:	add	r9, r9, #1
   16d38:	and	r3, r3, r2
   16d3c:	uxtb	r3, r3
   16d40:	cmp	r3, #0
   16d44:	beq	16b2c <__assert_fail@plt+0x5980>
   16d48:	cmp	sl, r4
   16d4c:	movhi	r3, #39	; 0x27
   16d50:	strbhi	r3, [r8, r4]
   16d54:	add	r3, r4, #1
   16d58:	add	r4, r4, #2
   16d5c:	cmp	sl, r3
   16d60:	movhi	r2, #39	; 0x27
   16d64:	strbhi	r2, [r8, r3]
   16d68:	mov	r3, #0
   16d6c:	str	r3, [sp, #48]	; 0x30
   16d70:	b	16b2c <__assert_fail@plt+0x5980>
   16d74:	mov	r3, #118	; 0x76
   16d78:	b	16c50 <__assert_fail@plt+0x5aa4>
   16d7c:	mov	r3, #116	; 0x74
   16d80:	ldr	r2, [sp, #44]	; 0x2c
   16d84:	cmp	fp, #2
   16d88:	movne	r2, #0
   16d8c:	andeq	r2, r2, #1
   16d90:	cmp	r2, #0
   16d94:	beq	16c50 <__assert_fail@plt+0x5aa4>
   16d98:	mov	fp, r8
   16d9c:	mov	r8, #2
   16da0:	ldr	r3, [sp, #40]	; 0x28
   16da4:	cmp	r3, #0
   16da8:	movne	r8, #4
   16dac:	mov	lr, #0
   16db0:	mov	r0, fp
   16db4:	ldr	r2, [sp, #32]
   16db8:	ldr	r3, [sp, #156]	; 0x9c
   16dbc:	ldr	r1, [sp, #164]	; 0xa4
   16dc0:	bic	ip, r3, #2
   16dc4:	ldr	r3, [sp, #28]
   16dc8:	stm	sp, {r8, ip, lr}
   16dcc:	ldr	ip, [sp, #168]	; 0xa8
   16dd0:	str	r1, [sp, #12]
   16dd4:	mov	r1, sl
   16dd8:	str	ip, [sp, #16]
   16ddc:	bl	164f4 <__assert_fail@plt+0x5348>
   16de0:	mov	r4, r0
   16de4:	mov	r0, r4
   16de8:	add	sp, sp, #116	; 0x74
   16dec:	ldrd	r4, [sp]
   16df0:	ldrd	r6, [sp, #8]
   16df4:	ldrd	r8, [sp, #16]
   16df8:	ldrd	sl, [sp, #24]
   16dfc:	add	sp, sp, #32
   16e00:	pop	{pc}		; (ldr pc, [sp], #4)
   16e04:	mov	r5, #102	; 0x66
   16e08:	ldr	r2, [sp, #44]	; 0x2c
   16e0c:	sub	r3, fp, #2
   16e10:	clz	r3, r3
   16e14:	lsr	r3, r3, #5
   16e18:	cmp	r2, #0
   16e1c:	bne	17878 <__assert_fail@plt+0x66cc>
   16e20:	mov	r6, r2
   16e24:	b	16b18 <__assert_fail@plt+0x596c>
   16e28:	mov	r5, #110	; 0x6e
   16e2c:	mov	r6, #0
   16e30:	b	16abc <__assert_fail@plt+0x5910>
   16e34:	mov	r5, #98	; 0x62
   16e38:	b	16e08 <__assert_fail@plt+0x5c5c>
   16e3c:	mov	r5, #97	; 0x61
   16e40:	b	16e08 <__assert_fail@plt+0x5c5c>
   16e44:	mov	r7, #0
   16e48:	mov	r6, #0
   16e4c:	b	16c6c <__assert_fail@plt+0x5ac0>
   16e50:	mov	r5, #114	; 0x72
   16e54:	b	16e2c <__assert_fail@plt+0x5c80>
   16e58:	ldr	r3, [sp, #44]	; 0x2c
   16e5c:	cmp	r3, #0
   16e60:	bne	17bf0 <__assert_fail@plt+0x6a44>
   16e64:	mov	r7, r3
   16e68:	ldr	r3, [sp, #48]	; 0x30
   16e6c:	sub	r2, fp, #2
   16e70:	clz	r2, r2
   16e74:	lsr	r2, r2, #5
   16e78:	eor	r3, r3, #1
   16e7c:	ands	r3, r2, r3
   16e80:	beq	17894 <__assert_fail@plt+0x66e8>
   16e84:	cmp	sl, r4
   16e88:	movhi	r1, #39	; 0x27
   16e8c:	strbhi	r1, [r8, r4]
   16e90:	add	r1, r4, #1
   16e94:	cmp	sl, r1
   16e98:	movhi	r0, #36	; 0x24
   16e9c:	strbhi	r0, [r8, r1]
   16ea0:	add	r1, r4, #2
   16ea4:	cmp	sl, r1
   16ea8:	movhi	r0, #39	; 0x27
   16eac:	strbhi	r0, [r8, r1]
   16eb0:	add	r1, r4, #3
   16eb4:	cmp	sl, r1
   16eb8:	bls	178ec <__assert_fail@plt+0x6740>
   16ebc:	mov	r4, r1
   16ec0:	mov	r1, #92	; 0x5c
   16ec4:	mov	r0, r4
   16ec8:	str	r3, [sp, #48]	; 0x30
   16ecc:	strb	r1, [r8, r4]
   16ed0:	cmp	fp, #2
   16ed4:	add	r4, r4, #1
   16ed8:	beq	1793c <__assert_fail@plt+0x6790>
   16edc:	ldr	r1, [sp, #28]
   16ee0:	add	r3, r9, #1
   16ee4:	cmp	r3, r1
   16ee8:	bcs	16f00 <__assert_fail@plt+0x5d54>
   16eec:	ldr	r1, [sp, #32]
   16ef0:	ldrb	r3, [r1, r3]
   16ef4:	sub	r3, r3, #48	; 0x30
   16ef8:	cmp	r3, #9
   16efc:	bls	17954 <__assert_fail@plt+0x67a8>
   16f00:	mov	r5, #48	; 0x30
   16f04:	ldr	r3, [sp, #40]	; 0x28
   16f08:	eor	r3, r3, #1
   16f0c:	orrs	r2, r2, r3
   16f10:	mov	r3, r6
   16f14:	moveq	r6, r2
   16f18:	beq	16a8c <__assert_fail@plt+0x58e0>
   16f1c:	mov	r6, #0
   16f20:	b	16ab4 <__assert_fail@plt+0x5908>
   16f24:	cmp	r9, #0
   16f28:	mov	r2, r7
   16f2c:	bne	174cc <__assert_fail@plt+0x6320>
   16f30:	mov	r6, r7
   16f34:	mov	r3, r9
   16f38:	mov	r7, r2
   16f3c:	b	16a7c <__assert_fail@plt+0x58d0>
   16f40:	mov	r2, r7
   16f44:	mov	r6, r7
   16f48:	mov	r3, #0
   16f4c:	mov	r7, r2
   16f50:	mov	r5, #32
   16f54:	b	16a7c <__assert_fail@plt+0x58d0>
   16f58:	mov	r6, r7
   16f5c:	b	16c6c <__assert_fail@plt+0x5ac0>
   16f60:	mov	r7, #0
   16f64:	ldr	r3, [sp, #64]	; 0x40
   16f68:	cmp	r3, #1
   16f6c:	bne	1758c <__assert_fail@plt+0x63e0>
   16f70:	bl	1102c <__ctype_b_loc@plt>
   16f74:	ldr	r2, [r0]
   16f78:	sxth	r3, r5
   16f7c:	lsl	r3, r3, #1
   16f80:	ldr	r1, [sp, #64]	; 0x40
   16f84:	ldrh	r3, [r2, r3]
   16f88:	mov	ip, r1
   16f8c:	and	r3, r3, #16384	; 0x4000
   16f90:	cmp	r3, #0
   16f94:	ldr	r3, [sp, #40]	; 0x28
   16f98:	movne	r6, #1
   16f9c:	moveq	r6, #0
   16fa0:	movne	r2, #0
   16fa4:	andeq	r2, r3, #1
   16fa8:	cmp	r2, #0
   16fac:	bne	178d4 <__assert_fail@plt+0x6728>
   16fb0:	sub	r3, fp, #2
   16fb4:	clz	r3, r3
   16fb8:	lsr	r3, r3, #5
   16fbc:	b	16a7c <__assert_fail@plt+0x58d0>
   16fc0:	cmp	r4, #0
   16fc4:	bne	17c64 <__assert_fail@plt+0x6ab8>
   16fc8:	str	r4, [sp, #40]	; 0x28
   16fcc:	cmp	sl, #0
   16fd0:	bne	17c94 <__assert_fail@plt+0x6ae8>
   16fd4:	mov	r3, #1
   16fd8:	movw	r2, #43128	; 0xa878
   16fdc:	movt	r2, #1
   16fe0:	mov	r4, r3
   16fe4:	mov	r8, #2
   16fe8:	str	r3, [sp, #36]	; 0x24
   16fec:	str	sl, [sp, #44]	; 0x2c
   16ff0:	str	sl, [sp, #48]	; 0x30
   16ff4:	str	r3, [sp, #56]	; 0x38
   16ff8:	str	r2, [sp, #60]	; 0x3c
   16ffc:	str	sl, [sp, #68]	; 0x44
   17000:	str	sl, [sp, #72]	; 0x48
   17004:	b	165dc <__assert_fail@plt+0x5430>
   17008:	ldr	r3, [sp, #32]
   1700c:	ldrb	r5, [r3, r9]
   17010:	cmp	r5, #126	; 0x7e
   17014:	ldrls	pc, [pc, r5, lsl #2]
   17018:	b	16f64 <__assert_fail@plt+0x5db8>
   1701c:	andeq	r7, r1, r0, asr #4
   17020:	andeq	r6, r1, r4, ror #30
   17024:	andeq	r6, r1, r4, ror #30
   17028:	andeq	r6, r1, r4, ror #30
   1702c:	andeq	r6, r1, r4, ror #30
   17030:	andeq	r6, r1, r4, ror #30
   17034:	andeq	r6, r1, r4, ror #30
   17038:	andeq	r7, r1, r8, lsr r2
   1703c:	andeq	r7, r1, r0, lsr r2
   17040:	andeq	r6, r1, ip, ror sp
   17044:	andeq	r7, r1, r8, lsr #4
   17048:	andeq	r6, r1, r4, ror sp
   1704c:	andeq	r7, r1, r0, lsr #4
   17050:	andeq	r7, r1, r8, lsl r2
   17054:	andeq	r6, r1, r4, ror #30
   17058:	andeq	r6, r1, r4, ror #30
   1705c:	andeq	r6, r1, r4, ror #30
   17060:	andeq	r6, r1, r4, ror #30
   17064:	andeq	r6, r1, r4, ror #30
   17068:	andeq	r6, r1, r4, ror #30
   1706c:	andeq	r6, r1, r4, ror #30
   17070:	andeq	r6, r1, r4, ror #30
   17074:	andeq	r6, r1, r4, ror #30
   17078:	andeq	r6, r1, r4, ror #30
   1707c:	andeq	r6, r1, r4, ror #30
   17080:	andeq	r6, r1, r4, ror #30
   17084:	andeq	r6, r1, r4, ror #30
   17088:	andeq	r6, r1, r4, ror #30
   1708c:	andeq	r6, r1, r4, ror #30
   17090:	andeq	r6, r1, r4, ror #30
   17094:	andeq	r6, r1, r4, ror #30
   17098:	andeq	r6, r1, r4, ror #30
   1709c:	muleq	r1, r4, r2
   170a0:	andeq	r7, r1, r4, ror r2
   170a4:	andeq	r7, r1, r4, ror r2
   170a8:	andeq	r7, r1, r4, ror #4
   170ac:	andeq	r7, r1, r4, ror r2
   170b0:			; <UNDEFINED> instruction: 0x00016fb0
   170b4:	andeq	r7, r1, r4, ror r2
   170b8:	andeq	r6, r1, r4, lsr #25
   170bc:	andeq	r7, r1, r4, ror r2
   170c0:	andeq	r7, r1, r4, ror r2
   170c4:	andeq	r7, r1, r4, ror r2
   170c8:			; <UNDEFINED> instruction: 0x00016fb0
   170cc:			; <UNDEFINED> instruction: 0x00016fb0
   170d0:			; <UNDEFINED> instruction: 0x00016fb0
   170d4:			; <UNDEFINED> instruction: 0x00016fb0
   170d8:			; <UNDEFINED> instruction: 0x00016fb0
   170dc:			; <UNDEFINED> instruction: 0x00016fb0
   170e0:			; <UNDEFINED> instruction: 0x00016fb0
   170e4:			; <UNDEFINED> instruction: 0x00016fb0
   170e8:			; <UNDEFINED> instruction: 0x00016fb0
   170ec:			; <UNDEFINED> instruction: 0x00016fb0
   170f0:			; <UNDEFINED> instruction: 0x00016fb0
   170f4:			; <UNDEFINED> instruction: 0x00016fb0
   170f8:			; <UNDEFINED> instruction: 0x00016fb0
   170fc:			; <UNDEFINED> instruction: 0x00016fb0
   17100:			; <UNDEFINED> instruction: 0x00016fb0
   17104:			; <UNDEFINED> instruction: 0x00016fb0
   17108:	andeq	r7, r1, r4, ror r2
   1710c:	andeq	r7, r1, r4, ror r2
   17110:	andeq	r7, r1, r4, ror r2
   17114:	andeq	r7, r1, r4, ror r2
   17118:	andeq	r6, r1, r8, ror ip
   1711c:	andeq	r6, r1, r4, ror #30
   17120:			; <UNDEFINED> instruction: 0x00016fb0
   17124:			; <UNDEFINED> instruction: 0x00016fb0
   17128:			; <UNDEFINED> instruction: 0x00016fb0
   1712c:			; <UNDEFINED> instruction: 0x00016fb0
   17130:			; <UNDEFINED> instruction: 0x00016fb0
   17134:			; <UNDEFINED> instruction: 0x00016fb0
   17138:			; <UNDEFINED> instruction: 0x00016fb0
   1713c:			; <UNDEFINED> instruction: 0x00016fb0
   17140:			; <UNDEFINED> instruction: 0x00016fb0
   17144:			; <UNDEFINED> instruction: 0x00016fb0
   17148:			; <UNDEFINED> instruction: 0x00016fb0
   1714c:			; <UNDEFINED> instruction: 0x00016fb0
   17150:			; <UNDEFINED> instruction: 0x00016fb0
   17154:			; <UNDEFINED> instruction: 0x00016fb0
   17158:			; <UNDEFINED> instruction: 0x00016fb0
   1715c:			; <UNDEFINED> instruction: 0x00016fb0
   17160:			; <UNDEFINED> instruction: 0x00016fb0
   17164:			; <UNDEFINED> instruction: 0x00016fb0
   17168:			; <UNDEFINED> instruction: 0x00016fb0
   1716c:			; <UNDEFINED> instruction: 0x00016fb0
   17170:			; <UNDEFINED> instruction: 0x00016fb0
   17174:			; <UNDEFINED> instruction: 0x00016fb0
   17178:			; <UNDEFINED> instruction: 0x00016fb0
   1717c:			; <UNDEFINED> instruction: 0x00016fb0
   17180:			; <UNDEFINED> instruction: 0x00016fb0
   17184:			; <UNDEFINED> instruction: 0x00016fb0
   17188:	andeq	r7, r1, r4, ror r2
   1718c:	andeq	r6, r1, r0, lsr #24
   17190:			; <UNDEFINED> instruction: 0x00016fb0
   17194:	andeq	r7, r1, r4, ror r2
   17198:			; <UNDEFINED> instruction: 0x00016fb0
   1719c:	andeq	r7, r1, r4, ror r2
   171a0:			; <UNDEFINED> instruction: 0x00016fb0
   171a4:			; <UNDEFINED> instruction: 0x00016fb0
   171a8:			; <UNDEFINED> instruction: 0x00016fb0
   171ac:			; <UNDEFINED> instruction: 0x00016fb0
   171b0:			; <UNDEFINED> instruction: 0x00016fb0
   171b4:			; <UNDEFINED> instruction: 0x00016fb0
   171b8:			; <UNDEFINED> instruction: 0x00016fb0
   171bc:			; <UNDEFINED> instruction: 0x00016fb0
   171c0:			; <UNDEFINED> instruction: 0x00016fb0
   171c4:			; <UNDEFINED> instruction: 0x00016fb0
   171c8:			; <UNDEFINED> instruction: 0x00016fb0
   171cc:			; <UNDEFINED> instruction: 0x00016fb0
   171d0:			; <UNDEFINED> instruction: 0x00016fb0
   171d4:			; <UNDEFINED> instruction: 0x00016fb0
   171d8:			; <UNDEFINED> instruction: 0x00016fb0
   171dc:			; <UNDEFINED> instruction: 0x00016fb0
   171e0:			; <UNDEFINED> instruction: 0x00016fb0
   171e4:			; <UNDEFINED> instruction: 0x00016fb0
   171e8:			; <UNDEFINED> instruction: 0x00016fb0
   171ec:			; <UNDEFINED> instruction: 0x00016fb0
   171f0:			; <UNDEFINED> instruction: 0x00016fb0
   171f4:			; <UNDEFINED> instruction: 0x00016fb0
   171f8:			; <UNDEFINED> instruction: 0x00016fb0
   171fc:			; <UNDEFINED> instruction: 0x00016fb0
   17200:			; <UNDEFINED> instruction: 0x00016fb0
   17204:			; <UNDEFINED> instruction: 0x00016fb0
   17208:	andeq	r6, r1, r4, asr #20
   1720c:	andeq	r7, r1, r4, ror r2
   17210:	andeq	r6, r1, r4, asr #20
   17214:	andeq	r7, r1, r4, ror #4
   17218:	mov	r3, #114	; 0x72
   1721c:	b	16d80 <__assert_fail@plt+0x5bd4>
   17220:	mov	r3, #102	; 0x66
   17224:	b	16c50 <__assert_fail@plt+0x5aa4>
   17228:	mov	r3, #110	; 0x6e
   1722c:	b	16d80 <__assert_fail@plt+0x5bd4>
   17230:	mov	r3, #98	; 0x62
   17234:	b	16c50 <__assert_fail@plt+0x5aa4>
   17238:	mov	r3, #97	; 0x61
   1723c:	b	16c50 <__assert_fail@plt+0x5aa4>
   17240:	ldr	r3, [sp, #40]	; 0x28
   17244:	cmp	r3, #0
   17248:	bne	16e58 <__assert_fail@plt+0x5cac>
   1724c:	ldr	r3, [sp, #156]	; 0x9c
   17250:	tst	r3, #1
   17254:	addne	r9, r9, #1
   17258:	bne	165ec <__assert_fail@plt+0x5440>
   1725c:	ldr	r7, [sp, #40]	; 0x28
   17260:	b	16c5c <__assert_fail@plt+0x5ab0>
   17264:	sub	r3, fp, #2
   17268:	clz	r3, r3
   1726c:	lsr	r3, r3, #5
   17270:	b	16a70 <__assert_fail@plt+0x58c4>
   17274:	sub	r3, fp, #2
   17278:	mov	r6, #0
   1727c:	clz	r3, r3
   17280:	lsr	r3, r3, #5
   17284:	ldr	r2, [sp, #44]	; 0x2c
   17288:	tst	r2, r3
   1728c:	beq	16a7c <__assert_fail@plt+0x58d0>
   17290:	b	16d98 <__assert_fail@plt+0x5bec>
   17294:	sub	r3, fp, #2
   17298:	clz	r3, r3
   1729c:	lsr	r3, r3, #5
   172a0:	b	17284 <__assert_fail@plt+0x60d8>
   172a4:	ldr	r3, [sp, #52]	; 0x34
   172a8:	ldrb	r5, [r3]
   172ac:	cmp	r5, #126	; 0x7e
   172b0:	ldrls	pc, [pc, r5, lsl #2]
   172b4:	b	16f60 <__assert_fail@plt+0x5db4>
   172b8:	andeq	r6, r1, r8, asr lr
   172bc:	andeq	r6, r1, r0, ror #30
   172c0:	andeq	r6, r1, r0, ror #30
   172c4:	andeq	r6, r1, r0, ror #30
   172c8:	andeq	r6, r1, r0, ror #30
   172cc:	andeq	r6, r1, r0, ror #30
   172d0:	andeq	r6, r1, r0, ror #30
   172d4:	andeq	r6, r1, ip, lsr lr
   172d8:	andeq	r6, r1, r4, lsr lr
   172dc:	strdeq	r7, [r1], -r0
   172e0:	andeq	r6, r1, r8, lsr #28
   172e4:	andeq	r7, r1, r4, ror #9
   172e8:	andeq	r6, r1, r4, lsl #28
   172ec:	andeq	r6, r1, r0, asr lr
   172f0:	andeq	r6, r1, r0, ror #30
   172f4:	andeq	r6, r1, r0, ror #30
   172f8:	andeq	r6, r1, r0, ror #30
   172fc:	andeq	r6, r1, r0, ror #30
   17300:	andeq	r6, r1, r0, ror #30
   17304:	andeq	r6, r1, r0, ror #30
   17308:	andeq	r6, r1, r0, ror #30
   1730c:	andeq	r6, r1, r0, ror #30
   17310:	andeq	r6, r1, r0, ror #30
   17314:	andeq	r6, r1, r0, ror #30
   17318:	andeq	r6, r1, r0, ror #30
   1731c:	andeq	r6, r1, r0, ror #30
   17320:	andeq	r6, r1, r0, ror #30
   17324:	andeq	r6, r1, r0, ror #30
   17328:	andeq	r6, r1, r0, ror #30
   1732c:	andeq	r6, r1, r0, ror #30
   17330:	andeq	r6, r1, r0, ror #30
   17334:	andeq	r6, r1, r0, ror #30
   17338:	ldrdeq	r7, [r1], -ip
   1733c:	andeq	r6, r1, r4, asr #28
   17340:	andeq	r6, r1, r4, asr #28
   17344:	andeq	r7, r1, r0, asr #9
   17348:	andeq	r6, r1, r4, asr #28
   1734c:			; <UNDEFINED> instruction: 0x000174b4
   17350:	andeq	r6, r1, r4, asr #28
   17354:	andeq	r6, r1, r0, lsr #25
   17358:	andeq	r6, r1, r4, asr #28
   1735c:	andeq	r6, r1, r4, asr #28
   17360:	andeq	r6, r1, r4, asr #28
   17364:			; <UNDEFINED> instruction: 0x000174b4
   17368:			; <UNDEFINED> instruction: 0x000174b4
   1736c:			; <UNDEFINED> instruction: 0x000174b4
   17370:			; <UNDEFINED> instruction: 0x000174b4
   17374:			; <UNDEFINED> instruction: 0x000174b4
   17378:			; <UNDEFINED> instruction: 0x000174b4
   1737c:			; <UNDEFINED> instruction: 0x000174b4
   17380:			; <UNDEFINED> instruction: 0x000174b4
   17384:			; <UNDEFINED> instruction: 0x000174b4
   17388:			; <UNDEFINED> instruction: 0x000174b4
   1738c:			; <UNDEFINED> instruction: 0x000174b4
   17390:			; <UNDEFINED> instruction: 0x000174b4
   17394:			; <UNDEFINED> instruction: 0x000174b4
   17398:			; <UNDEFINED> instruction: 0x000174b4
   1739c:			; <UNDEFINED> instruction: 0x000174b4
   173a0:			; <UNDEFINED> instruction: 0x000174b4
   173a4:	andeq	r6, r1, r4, asr #28
   173a8:	andeq	r6, r1, r4, asr #28
   173ac:	andeq	r6, r1, r4, asr #28
   173b0:	andeq	r6, r1, r4, asr #28
   173b4:	andeq	r6, r1, r4, ror ip
   173b8:	andeq	r6, r1, r0, ror #30
   173bc:			; <UNDEFINED> instruction: 0x000174b4
   173c0:			; <UNDEFINED> instruction: 0x000174b4
   173c4:			; <UNDEFINED> instruction: 0x000174b4
   173c8:			; <UNDEFINED> instruction: 0x000174b4
   173cc:			; <UNDEFINED> instruction: 0x000174b4
   173d0:			; <UNDEFINED> instruction: 0x000174b4
   173d4:			; <UNDEFINED> instruction: 0x000174b4
   173d8:			; <UNDEFINED> instruction: 0x000174b4
   173dc:			; <UNDEFINED> instruction: 0x000174b4
   173e0:			; <UNDEFINED> instruction: 0x000174b4
   173e4:			; <UNDEFINED> instruction: 0x000174b4
   173e8:			; <UNDEFINED> instruction: 0x000174b4
   173ec:			; <UNDEFINED> instruction: 0x000174b4
   173f0:			; <UNDEFINED> instruction: 0x000174b4
   173f4:			; <UNDEFINED> instruction: 0x000174b4
   173f8:			; <UNDEFINED> instruction: 0x000174b4
   173fc:			; <UNDEFINED> instruction: 0x000174b4
   17400:			; <UNDEFINED> instruction: 0x000174b4
   17404:			; <UNDEFINED> instruction: 0x000174b4
   17408:			; <UNDEFINED> instruction: 0x000174b4
   1740c:			; <UNDEFINED> instruction: 0x000174b4
   17410:			; <UNDEFINED> instruction: 0x000174b4
   17414:			; <UNDEFINED> instruction: 0x000174b4
   17418:			; <UNDEFINED> instruction: 0x000174b4
   1741c:			; <UNDEFINED> instruction: 0x000174b4
   17420:			; <UNDEFINED> instruction: 0x000174b4
   17424:	andeq	r6, r1, r4, asr #28
   17428:	andeq	r6, r1, ip, lsl ip
   1742c:			; <UNDEFINED> instruction: 0x000174b4
   17430:	andeq	r6, r1, r4, asr #28
   17434:			; <UNDEFINED> instruction: 0x000174b4
   17438:	andeq	r6, r1, r4, asr #28
   1743c:			; <UNDEFINED> instruction: 0x000174b4
   17440:			; <UNDEFINED> instruction: 0x000174b4
   17444:			; <UNDEFINED> instruction: 0x000174b4
   17448:			; <UNDEFINED> instruction: 0x000174b4
   1744c:			; <UNDEFINED> instruction: 0x000174b4
   17450:			; <UNDEFINED> instruction: 0x000174b4
   17454:			; <UNDEFINED> instruction: 0x000174b4
   17458:			; <UNDEFINED> instruction: 0x000174b4
   1745c:			; <UNDEFINED> instruction: 0x000174b4
   17460:			; <UNDEFINED> instruction: 0x000174b4
   17464:			; <UNDEFINED> instruction: 0x000174b4
   17468:			; <UNDEFINED> instruction: 0x000174b4
   1746c:			; <UNDEFINED> instruction: 0x000174b4
   17470:			; <UNDEFINED> instruction: 0x000174b4
   17474:			; <UNDEFINED> instruction: 0x000174b4
   17478:			; <UNDEFINED> instruction: 0x000174b4
   1747c:			; <UNDEFINED> instruction: 0x000174b4
   17480:			; <UNDEFINED> instruction: 0x000174b4
   17484:			; <UNDEFINED> instruction: 0x000174b4
   17488:			; <UNDEFINED> instruction: 0x000174b4
   1748c:			; <UNDEFINED> instruction: 0x000174b4
   17490:			; <UNDEFINED> instruction: 0x000174b4
   17494:			; <UNDEFINED> instruction: 0x000174b4
   17498:			; <UNDEFINED> instruction: 0x000174b4
   1749c:			; <UNDEFINED> instruction: 0x000174b4
   174a0:			; <UNDEFINED> instruction: 0x000174b4
   174a4:	andeq	r6, r1, r0, asr #20
   174a8:	andeq	r6, r1, r4, asr #28
   174ac:	andeq	r6, r1, r0, asr #20
   174b0:	andeq	r7, r1, r0, asr #9
   174b4:	mov	r6, r7
   174b8:	mov	r7, #0
   174bc:	b	16c6c <__assert_fail@plt+0x5ac0>
   174c0:	cmp	r9, #0
   174c4:	mov	r2, #0
   174c8:	beq	16f30 <__assert_fail@plt+0x5d84>
   174cc:	mov	r6, #0
   174d0:	mov	r7, r2
   174d4:	mov	r3, r6
   174d8:	b	16a8c <__assert_fail@plt+0x58e0>
   174dc:	mov	r2, #0
   174e0:	b	16f44 <__assert_fail@plt+0x5d98>
   174e4:	mov	r7, #0
   174e8:	mov	r3, #118	; 0x76
   174ec:	b	16c50 <__assert_fail@plt+0x5aa4>
   174f0:	mov	r7, #0
   174f4:	mov	r3, #116	; 0x74
   174f8:	b	16d80 <__assert_fail@plt+0x5bd4>
   174fc:	ldr	r3, [sp, #44]	; 0x2c
   17500:	b	16ab4 <__assert_fail@plt+0x5908>
   17504:	ldr	r3, [sp, #44]	; 0x2c
   17508:	cmp	r3, #0
   1750c:	bne	1797c <__assert_fail@plt+0x67d0>
   17510:	add	r9, r9, #1
   17514:	mov	r6, #0
   17518:	ldr	r3, [sp, #48]	; 0x30
   1751c:	mov	r5, #92	; 0x5c
   17520:	b	16d40 <__assert_fail@plt+0x5b94>
   17524:	ldr	r3, [sp, #32]
   17528:	ldrb	r2, [r3, #1]
   1752c:	adds	r2, r2, #0
   17530:	movne	r2, #1
   17534:	b	16a5c <__assert_fail@plt+0x58b0>
   17538:	ldr	r3, [sp, #156]	; 0x9c
   1753c:	ands	r3, r3, #4
   17540:	beq	17568 <__assert_fail@plt+0x63bc>
   17544:	ldr	r2, [sp, #28]
   17548:	add	r3, r9, #2
   1754c:	cmp	r3, r2
   17550:	bcs	17564 <__assert_fail@plt+0x63b8>
   17554:	ldr	r2, [sp, #52]	; 0x34
   17558:	ldrb	r5, [r2, #1]
   1755c:	cmp	r5, #63	; 0x3f
   17560:	beq	179e0 <__assert_fail@plt+0x6834>
   17564:	mov	r3, #0
   17568:	mov	r5, #63	; 0x3f
   1756c:	mov	r6, r3
   17570:	b	16a7c <__assert_fail@plt+0x58d0>
   17574:	ldr	r3, [sp, #44]	; 0x2c
   17578:	cmp	r3, #0
   1757c:	bne	1797c <__assert_fail@plt+0x67d0>
   17580:	mov	r6, r3
   17584:	mov	r5, #63	; 0x3f
   17588:	b	16ab4 <__assert_fail@plt+0x5908>
   1758c:	ldr	r1, [sp, #28]
   17590:	mov	r2, #0
   17594:	mov	r3, #0
   17598:	strd	r2, [sp, #104]	; 0x68
   1759c:	cmn	r1, #1
   175a0:	bne	175b0 <__assert_fail@plt+0x6404>
   175a4:	ldr	r0, [sp, #32]
   175a8:	bl	11044 <strlen@plt>
   175ac:	str	r0, [sp, #28]
   175b0:	str	r8, [sp, #76]	; 0x4c
   175b4:	mov	r3, #0
   175b8:	str	sl, [sp, #80]	; 0x50
   175bc:	ldr	sl, [sp, #32]
   175c0:	str	r5, [sp, #84]	; 0x54
   175c4:	mov	r5, r3
   175c8:	ldr	r8, [sp, #44]	; 0x2c
   175cc:	str	r7, [sp, #88]	; 0x58
   175d0:	str	r4, [sp, #92]	; 0x5c
   175d4:	ldr	r2, [sp, #28]
   175d8:	add	r4, r9, r5
   175dc:	add	r3, sp, #104	; 0x68
   175e0:	add	r7, sl, r4
   175e4:	add	r0, sp, #100	; 0x64
   175e8:	mov	r1, r7
   175ec:	sub	r2, r2, r4
   175f0:	bl	1988c <__assert_fail@plt+0x86e0>
   175f4:	subs	r1, r0, #0
   175f8:	beq	17644 <__assert_fail@plt+0x6498>
   175fc:	cmn	r1, #1
   17600:	beq	179bc <__assert_fail@plt+0x6810>
   17604:	cmn	r1, #2
   17608:	beq	17adc <__assert_fail@plt+0x6930>
   1760c:	cmp	fp, #2
   17610:	movne	r3, #0
   17614:	andeq	r3, r8, #1
   17618:	cmp	r3, #0
   1761c:	bne	177a8 <__assert_fail@plt+0x65fc>
   17620:	ldr	r0, [sp, #100]	; 0x64
   17624:	add	r5, r5, r1
   17628:	bl	10f84 <iswprint@plt>
   1762c:	cmp	r0, #0
   17630:	add	r0, sp, #104	; 0x68
   17634:	moveq	r6, #0
   17638:	bl	10f30 <mbsinit@plt>
   1763c:	cmp	r0, #0
   17640:	beq	175d4 <__assert_fail@plt+0x6428>
   17644:	ldr	r3, [sp, #40]	; 0x28
   17648:	mov	ip, r5
   1764c:	eor	r2, r6, #1
   17650:	ldr	r8, [sp, #76]	; 0x4c
   17654:	ldr	sl, [sp, #80]	; 0x50
   17658:	and	r2, r2, r3
   1765c:	ldr	r5, [sp, #84]	; 0x54
   17660:	ldr	r7, [sp, #88]	; 0x58
   17664:	ldr	r4, [sp, #92]	; 0x5c
   17668:	cmp	ip, #1
   1766c:	bls	16fa8 <__assert_fail@plt+0x5dfc>
   17670:	add	r1, ip, r9
   17674:	mov	r0, #39	; 0x27
   17678:	ldr	lr, [sp, #52]	; 0x34
   1767c:	mov	ip, #0
   17680:	str	r6, [sp, #52]	; 0x34
   17684:	ldr	r6, [sp, #48]	; 0x30
   17688:	b	17744 <__assert_fail@plt+0x6598>
   1768c:	ldr	ip, [sp, #44]	; 0x2c
   17690:	sub	r3, fp, #2
   17694:	clz	r3, r3
   17698:	lsr	r3, r3, #5
   1769c:	cmp	ip, #0
   176a0:	bne	178b4 <__assert_fail@plt+0x6708>
   176a4:	eor	ip, r6, #1
   176a8:	ands	r3, r3, ip
   176ac:	beq	176dc <__assert_fail@plt+0x6530>
   176b0:	cmp	sl, r4
   176b4:	add	ip, r4, #1
   176b8:	strbhi	r0, [r8, r4]
   176bc:	cmp	sl, ip
   176c0:	movhi	r6, #36	; 0x24
   176c4:	strbhi	r6, [r8, ip]
   176c8:	add	ip, r4, #2
   176cc:	mov	r6, r3
   176d0:	cmp	sl, ip
   176d4:	add	r4, r4, #3
   176d8:	strbhi	r0, [r8, ip]
   176dc:	cmp	sl, r4
   176e0:	movhi	r3, #92	; 0x5c
   176e4:	strbhi	r3, [r8, r4]
   176e8:	add	r3, r4, #1
   176ec:	cmp	sl, r3
   176f0:	bls	17700 <__assert_fail@plt+0x6554>
   176f4:	lsr	ip, r5, #6
   176f8:	add	ip, ip, #48	; 0x30
   176fc:	strb	ip, [r8, r3]
   17700:	add	r3, r4, #2
   17704:	cmp	sl, r3
   17708:	bls	17718 <__assert_fail@plt+0x656c>
   1770c:	ubfx	ip, r5, #3, #3
   17710:	add	ip, ip, #48	; 0x30
   17714:	strb	ip, [r8, r3]
   17718:	add	r9, r9, #1
   1771c:	and	r5, r5, #7
   17720:	cmp	r9, r1
   17724:	add	r5, r5, #48	; 0x30
   17728:	add	r4, r4, #3
   1772c:	bcs	178e0 <__assert_fail@plt+0x6734>
   17730:	mov	ip, r2
   17734:	cmp	sl, r4
   17738:	strbhi	r5, [r8, r4]
   1773c:	add	r4, r4, #1
   17740:	ldrb	r5, [lr, #1]!
   17744:	cmp	r2, #0
   17748:	bne	1768c <__assert_fail@plt+0x64e0>
   1774c:	eor	r3, ip, #1
   17750:	cmp	r7, #0
   17754:	and	r3, r3, r6
   17758:	uxtb	r3, r3
   1775c:	beq	17770 <__assert_fail@plt+0x65c4>
   17760:	cmp	sl, r4
   17764:	movhi	r7, #92	; 0x5c
   17768:	strbhi	r7, [r8, r4]
   1776c:	add	r4, r4, #1
   17770:	add	r9, r9, #1
   17774:	cmp	r9, r1
   17778:	bcs	178c8 <__assert_fail@plt+0x671c>
   1777c:	cmp	r3, #0
   17780:	beq	17900 <__assert_fail@plt+0x6754>
   17784:	cmp	sl, r4
   17788:	add	r3, r4, #1
   1778c:	mov	r7, #0
   17790:	strbhi	r0, [r8, r4]
   17794:	cmp	sl, r3
   17798:	add	r4, r4, #2
   1779c:	mov	r6, r7
   177a0:	strbhi	r0, [r8, r3]
   177a4:	b	17734 <__assert_fail@plt+0x6588>
   177a8:	cmp	r1, #1
   177ac:	beq	17620 <__assert_fail@plt+0x6474>
   177b0:	add	r2, r4, #1
   177b4:	add	r3, sl, r1
   177b8:	add	r2, sl, r2
   177bc:	add	r4, r3, r4
   177c0:	ldrb	r3, [r2], #1
   177c4:	sub	r3, r3, #91	; 0x5b
   177c8:	cmp	r3, #33	; 0x21
   177cc:	ldrls	pc, [pc, r3, lsl #2]
   177d0:	b	1785c <__assert_fail@plt+0x66b0>
   177d4:	andeq	r7, r1, r8, ror #16
   177d8:	andeq	r7, r1, r8, ror #16
   177dc:	andeq	r7, r1, ip, asr r8
   177e0:	andeq	r7, r1, r8, ror #16
   177e4:	andeq	r7, r1, ip, asr r8
   177e8:	andeq	r7, r1, r8, ror #16
   177ec:	andeq	r7, r1, ip, asr r8
   177f0:	andeq	r7, r1, ip, asr r8
   177f4:	andeq	r7, r1, ip, asr r8
   177f8:	andeq	r7, r1, ip, asr r8
   177fc:	andeq	r7, r1, ip, asr r8
   17800:	andeq	r7, r1, ip, asr r8
   17804:	andeq	r7, r1, ip, asr r8
   17808:	andeq	r7, r1, ip, asr r8
   1780c:	andeq	r7, r1, ip, asr r8
   17810:	andeq	r7, r1, ip, asr r8
   17814:	andeq	r7, r1, ip, asr r8
   17818:	andeq	r7, r1, ip, asr r8
   1781c:	andeq	r7, r1, ip, asr r8
   17820:	andeq	r7, r1, ip, asr r8
   17824:	andeq	r7, r1, ip, asr r8
   17828:	andeq	r7, r1, ip, asr r8
   1782c:	andeq	r7, r1, ip, asr r8
   17830:	andeq	r7, r1, ip, asr r8
   17834:	andeq	r7, r1, ip, asr r8
   17838:	andeq	r7, r1, ip, asr r8
   1783c:	andeq	r7, r1, ip, asr r8
   17840:	andeq	r7, r1, ip, asr r8
   17844:	andeq	r7, r1, ip, asr r8
   17848:	andeq	r7, r1, ip, asr r8
   1784c:	andeq	r7, r1, ip, asr r8
   17850:	andeq	r7, r1, ip, asr r8
   17854:	andeq	r7, r1, ip, asr r8
   17858:	andeq	r7, r1, r8, ror #16
   1785c:	cmp	r4, r2
   17860:	bne	177c0 <__assert_fail@plt+0x6614>
   17864:	b	17620 <__assert_fail@plt+0x6474>
   17868:	mov	r8, #2
   1786c:	ldr	fp, [sp, #76]	; 0x4c
   17870:	ldr	sl, [sp, #80]	; 0x50
   17874:	b	16da0 <__assert_fail@plt+0x5bf4>
   17878:	ldr	r2, [sp, #40]	; 0x28
   1787c:	str	fp, [sp, #152]	; 0x98
   17880:	mov	fp, r8
   17884:	ldr	r8, [sp, #152]	; 0x98
   17888:	and	r2, r2, r3
   1788c:	str	r2, [sp, #40]	; 0x28
   17890:	b	16da0 <__assert_fail@plt+0x5bf4>
   17894:	cmp	sl, r4
   17898:	movls	r0, r4
   1789c:	bls	16ed0 <__assert_fail@plt+0x5d24>
   178a0:	ldr	r3, [sp, #48]	; 0x30
   178a4:	b	16ec0 <__assert_fail@plt+0x5d14>
   178a8:	str	sl, [sp, #72]	; 0x48
   178ac:	ldr	sl, [sp, #44]	; 0x2c
   178b0:	b	16d10 <__assert_fail@plt+0x5b64>
   178b4:	str	r3, [sp, #40]	; 0x28
   178b8:	str	fp, [sp, #152]	; 0x98
   178bc:	mov	fp, r8
   178c0:	ldr	r8, [sp, #152]	; 0x98
   178c4:	b	16da0 <__assert_fail@plt+0x5bf4>
   178c8:	str	r6, [sp, #48]	; 0x30
   178cc:	ldr	r6, [sp, #52]	; 0x34
   178d0:	b	16d40 <__assert_fail@plt+0x5b94>
   178d4:	mov	r6, #0
   178d8:	ldr	r2, [sp, #40]	; 0x28
   178dc:	b	17670 <__assert_fail@plt+0x64c4>
   178e0:	str	r6, [sp, #48]	; 0x30
   178e4:	ldr	r6, [sp, #52]	; 0x34
   178e8:	b	16b2c <__assert_fail@plt+0x5980>
   178ec:	add	r4, r4, #4
   178f0:	mov	r6, #0
   178f4:	str	r3, [sp, #48]	; 0x30
   178f8:	mov	r5, #48	; 0x30
   178fc:	b	16ab4 <__assert_fail@plt+0x5908>
   17900:	mov	r7, r3
   17904:	b	17734 <__assert_fail@plt+0x6588>
   17908:	mov	r3, #1
   1790c:	movw	r2, #43108	; 0xa864
   17910:	movt	r2, #1
   17914:	mov	r4, r3
   17918:	str	r3, [sp, #36]	; 0x24
   1791c:	str	r3, [sp, #40]	; 0x28
   17920:	str	sl, [sp, #44]	; 0x2c
   17924:	str	sl, [sp, #48]	; 0x30
   17928:	str	r3, [sp, #56]	; 0x38
   1792c:	str	r2, [sp, #60]	; 0x3c
   17930:	str	sl, [sp, #68]	; 0x44
   17934:	str	sl, [sp, #72]	; 0x48
   17938:	b	165dc <__assert_fail@plt+0x5430>
   1793c:	mov	r3, r6
   17940:	mov	r5, #48	; 0x30
   17944:	mov	r6, #0
   17948:	b	16ab4 <__assert_fail@plt+0x5908>
   1794c:	mov	r5, r3
   17950:	b	16e2c <__assert_fail@plt+0x5c80>
   17954:	cmp	sl, r4
   17958:	mov	r5, #48	; 0x30
   1795c:	movhi	r3, #48	; 0x30
   17960:	strbhi	r3, [r8, r4]
   17964:	add	r3, r0, #2
   17968:	add	r4, r0, #3
   1796c:	cmp	sl, r3
   17970:	movhi	r1, #48	; 0x30
   17974:	strbhi	r1, [r8, r3]
   17978:	b	16f04 <__assert_fail@plt+0x5d58>
   1797c:	str	fp, [sp, #152]	; 0x98
   17980:	mov	fp, r8
   17984:	ldr	r8, [sp, #152]	; 0x98
   17988:	b	16da0 <__assert_fail@plt+0x5bf4>
   1798c:	ldr	r3, [sp, #164]	; 0xa4
   17990:	ldrb	r3, [r3]
   17994:	cmp	r3, #0
   17998:	beq	165ac <__assert_fail@plt+0x5400>
   1799c:	ldr	r2, [sp, #164]	; 0xa4
   179a0:	cmp	sl, r4
   179a4:	strbhi	r3, [fp, r4]
   179a8:	add	r4, r4, #1
   179ac:	ldrb	r3, [r2, #1]!
   179b0:	cmp	r3, #0
   179b4:	bne	179a0 <__assert_fail@plt+0x67f4>
   179b8:	b	165ac <__assert_fail@plt+0x5400>
   179bc:	mov	ip, r5
   179c0:	mov	r6, #0
   179c4:	ldr	r2, [sp, #40]	; 0x28
   179c8:	ldr	r8, [sp, #76]	; 0x4c
   179cc:	ldr	sl, [sp, #80]	; 0x50
   179d0:	ldr	r5, [sp, #84]	; 0x54
   179d4:	ldr	r7, [sp, #88]	; 0x58
   179d8:	ldr	r4, [sp, #92]	; 0x5c
   179dc:	b	17668 <__assert_fail@plt+0x64bc>
   179e0:	ldr	r2, [sp, #32]
   179e4:	ldrb	r1, [r2, r3]
   179e8:	sub	r2, r1, #33	; 0x21
   179ec:	cmp	r2, #29
   179f0:	ldrls	pc, [pc, r2, lsl #2]
   179f4:	b	17ad0 <__assert_fail@plt+0x6924>
   179f8:	andeq	r7, r1, r0, ror sl
   179fc:	ldrdeq	r7, [r1], -r0
   17a00:	ldrdeq	r7, [r1], -r0
   17a04:	ldrdeq	r7, [r1], -r0
   17a08:	ldrdeq	r7, [r1], -r0
   17a0c:	ldrdeq	r7, [r1], -r0
   17a10:	andeq	r7, r1, r0, ror sl
   17a14:	andeq	r7, r1, r0, ror sl
   17a18:	andeq	r7, r1, r0, ror sl
   17a1c:	ldrdeq	r7, [r1], -r0
   17a20:	ldrdeq	r7, [r1], -r0
   17a24:	ldrdeq	r7, [r1], -r0
   17a28:	andeq	r7, r1, r0, ror sl
   17a2c:	ldrdeq	r7, [r1], -r0
   17a30:	andeq	r7, r1, r0, ror sl
   17a34:	ldrdeq	r7, [r1], -r0
   17a38:	ldrdeq	r7, [r1], -r0
   17a3c:	ldrdeq	r7, [r1], -r0
   17a40:	ldrdeq	r7, [r1], -r0
   17a44:	ldrdeq	r7, [r1], -r0
   17a48:	ldrdeq	r7, [r1], -r0
   17a4c:	ldrdeq	r7, [r1], -r0
   17a50:	ldrdeq	r7, [r1], -r0
   17a54:	ldrdeq	r7, [r1], -r0
   17a58:	ldrdeq	r7, [r1], -r0
   17a5c:	ldrdeq	r7, [r1], -r0
   17a60:	ldrdeq	r7, [r1], -r0
   17a64:	andeq	r7, r1, r0, ror sl
   17a68:	andeq	r7, r1, r0, ror sl
   17a6c:	andeq	r7, r1, r0, ror sl
   17a70:	ldr	r2, [sp, #44]	; 0x2c
   17a74:	cmp	r2, #0
   17a78:	bne	17bd4 <__assert_fail@plt+0x6a28>
   17a7c:	cmp	sl, r4
   17a80:	mov	r5, r1
   17a84:	movhi	r2, #63	; 0x3f
   17a88:	mov	r9, r3
   17a8c:	strbhi	r2, [r8, r4]
   17a90:	add	r2, r4, #1
   17a94:	cmp	sl, r2
   17a98:	movhi	r0, #34	; 0x22
   17a9c:	strbhi	r0, [r8, r2]
   17aa0:	add	r2, r4, #2
   17aa4:	cmp	sl, r2
   17aa8:	movhi	r0, #34	; 0x22
   17aac:	strbhi	r0, [r8, r2]
   17ab0:	add	r2, r4, #3
   17ab4:	add	r4, r4, #4
   17ab8:	cmp	sl, r2
   17abc:	movhi	r0, #63	; 0x3f
   17ac0:	strbhi	r0, [r8, r2]
   17ac4:	mov	r2, #0
   17ac8:	mov	r6, r2
   17acc:	b	16f04 <__assert_fail@plt+0x5d58>
   17ad0:	mov	r3, #0
   17ad4:	mov	r6, r3
   17ad8:	b	16a7c <__assert_fail@plt+0x58d0>
   17adc:	ldr	r0, [sp, #28]
   17ae0:	mov	r1, r4
   17ae4:	mov	r2, r7
   17ae8:	mov	r3, r5
   17aec:	mov	ip, r5
   17af0:	ldr	r8, [sp, #76]	; 0x4c
   17af4:	ldr	sl, [sp, #80]	; 0x50
   17af8:	cmp	r1, r0
   17afc:	ldr	r5, [sp, #84]	; 0x54
   17b00:	ldr	r7, [sp, #88]	; 0x58
   17b04:	ldr	r4, [sp, #92]	; 0x5c
   17b08:	bcs	17b3c <__assert_fail@plt+0x6990>
   17b0c:	ldrb	r6, [r2]
   17b10:	cmp	r6, #0
   17b14:	bne	17b28 <__assert_fail@plt+0x697c>
   17b18:	b	17c5c <__assert_fail@plt+0x6ab0>
   17b1c:	ldrb	r6, [r2, #1]!
   17b20:	cmp	r6, #0
   17b24:	beq	17be4 <__assert_fail@plt+0x6a38>
   17b28:	add	r3, r3, #1
   17b2c:	add	r1, r9, r3
   17b30:	cmp	r1, r0
   17b34:	bcc	17b1c <__assert_fail@plt+0x6970>
   17b38:	mov	ip, r3
   17b3c:	mov	r6, #0
   17b40:	ldr	r2, [sp, #40]	; 0x28
   17b44:	b	17668 <__assert_fail@plt+0x64bc>
   17b48:	mov	r3, #1
   17b4c:	mov	r2, #0
   17b50:	mov	r4, r2
   17b54:	str	r3, [sp, #36]	; 0x24
   17b58:	str	r3, [sp, #40]	; 0x28
   17b5c:	str	r3, [sp, #44]	; 0x2c
   17b60:	str	r2, [sp, #48]	; 0x30
   17b64:	str	r3, [sp, #56]	; 0x38
   17b68:	movw	r3, #43108	; 0xa864
   17b6c:	movt	r3, #1
   17b70:	str	r3, [sp, #60]	; 0x3c
   17b74:	str	r2, [sp, #68]	; 0x44
   17b78:	str	r2, [sp, #72]	; 0x48
   17b7c:	b	165dc <__assert_fail@plt+0x5430>
   17b80:	mov	r2, r3
   17b84:	ldr	r3, [sp, #60]	; 0x3c
   17b88:	cmp	r3, #0
   17b8c:	moveq	r2, #0
   17b90:	andne	r2, r2, #1
   17b94:	cmp	r2, #0
   17b98:	beq	17bc4 <__assert_fail@plt+0x6a18>
   17b9c:	mov	r2, r3
   17ba0:	ldrb	r3, [r3]
   17ba4:	cmp	r3, #0
   17ba8:	beq	17bc4 <__assert_fail@plt+0x6a18>
   17bac:	cmp	sl, r4
   17bb0:	strbhi	r3, [fp, r4]
   17bb4:	add	r4, r4, #1
   17bb8:	ldrb	r3, [r2, #1]!
   17bbc:	cmp	r3, #0
   17bc0:	bne	17bac <__assert_fail@plt+0x6a00>
   17bc4:	cmp	sl, r4
   17bc8:	movhi	r3, #0
   17bcc:	strbhi	r3, [fp, r4]
   17bd0:	b	16de4 <__assert_fail@plt+0x5c38>
   17bd4:	str	fp, [sp, #152]	; 0x98
   17bd8:	mov	fp, r8
   17bdc:	ldr	r8, [sp, #152]	; 0x98
   17be0:	b	16dac <__assert_fail@plt+0x5c00>
   17be4:	mov	ip, r3
   17be8:	ldr	r2, [sp, #40]	; 0x28
   17bec:	b	17668 <__assert_fail@plt+0x64bc>
   17bf0:	str	fp, [sp, #152]	; 0x98
   17bf4:	mov	fp, r8
   17bf8:	ldr	r8, [sp, #152]	; 0x98
   17bfc:	sub	r3, r8, #2
   17c00:	clz	r3, r3
   17c04:	lsr	r3, r3, #5
   17c08:	str	r3, [sp, #40]	; 0x28
   17c0c:	b	16da0 <__assert_fail@plt+0x5bf4>
   17c10:	mov	ip, #5
   17c14:	ldr	r3, [sp, #28]
   17c18:	str	ip, [sp]
   17c1c:	ldr	r2, [sp, #156]	; 0x9c
   17c20:	ldr	ip, [sp, #164]	; 0xa4
   17c24:	ldr	r0, [sp, #160]	; 0xa0
   17c28:	str	r2, [sp, #4]
   17c2c:	ldr	r2, [sp, #32]
   17c30:	ldr	r1, [sp, #72]	; 0x48
   17c34:	str	ip, [sp, #12]
   17c38:	ldr	ip, [sp, #168]	; 0xa8
   17c3c:	str	r0, [sp, #8]
   17c40:	mov	r0, fp
   17c44:	str	ip, [sp, #16]
   17c48:	bl	164f4 <__assert_fail@plt+0x5348>
   17c4c:	mov	r4, r0
   17c50:	b	16de4 <__assert_fail@plt+0x5c38>
   17c54:	mov	r8, #2
   17c58:	b	16da0 <__assert_fail@plt+0x5bf4>
   17c5c:	ldr	r2, [sp, #40]	; 0x28
   17c60:	b	17668 <__assert_fail@plt+0x64bc>
   17c64:	mov	r3, #0
   17c68:	mov	r2, #1
   17c6c:	mov	r4, r3
   17c70:	strd	r2, [sp, #36]	; 0x24
   17c74:	strd	r2, [sp, #44]	; 0x2c
   17c78:	str	r2, [sp, #56]	; 0x38
   17c7c:	str	r3, [sp, #68]	; 0x44
   17c80:	str	r3, [sp, #72]	; 0x48
   17c84:	movw	r3, #43128	; 0xa878
   17c88:	movt	r3, #1
   17c8c:	str	r3, [sp, #60]	; 0x3c
   17c90:	b	165dc <__assert_fail@plt+0x5430>
   17c94:	mov	r3, #0
   17c98:	mov	r1, #1
   17c9c:	mov	r2, r3
   17ca0:	str	r1, [sp, #36]	; 0x24
   17ca4:	str	r3, [sp, #48]	; 0x30
   17ca8:	str	sl, [sp, #72]	; 0x48
   17cac:	b	16be4 <__assert_fail@plt+0x5a38>
   17cb0:	bl	1117c <abort@plt>
   17cb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17cb8:	mov	r4, r0
   17cbc:	mov	r5, r3
   17cc0:	strd	r6, [sp, #8]
   17cc4:	movw	r7, #45348	; 0xb124
   17cc8:	movt	r7, #2
   17ccc:	strd	r8, [sp, #16]
   17cd0:	strd	sl, [sp, #24]
   17cd4:	mov	sl, r1
   17cd8:	mov	fp, r2
   17cdc:	str	lr, [sp, #32]
   17ce0:	sub	sp, sp, #60	; 0x3c
   17ce4:	bl	11068 <__errno_location@plt>
   17ce8:	mov	r8, r0
   17cec:	cmn	r4, #-2147483647	; 0x80000001
   17cf0:	ldr	r6, [r7]
   17cf4:	movne	r0, #0
   17cf8:	moveq	r0, #1
   17cfc:	ldr	r3, [r8]
   17d00:	orrs	r0, r0, r4, lsr #31
   17d04:	str	r3, [sp, #28]
   17d08:	bne	17e98 <__assert_fail@plt+0x6cec>
   17d0c:	ldr	r3, [r7, #4]
   17d10:	cmp	r3, r4
   17d14:	bgt	17d74 <__assert_fail@plt+0x6bc8>
   17d18:	add	r1, r7, #8
   17d1c:	sub	r2, r4, r3
   17d20:	str	r3, [sp, #52]	; 0x34
   17d24:	cmp	r6, r1
   17d28:	add	r2, r2, #1
   17d2c:	beq	17e70 <__assert_fail@plt+0x6cc4>
   17d30:	mov	r1, #8
   17d34:	mov	r0, r6
   17d38:	mvn	r3, #-2147483648	; 0x80000000
   17d3c:	str	r1, [sp]
   17d40:	add	r1, sp, #52	; 0x34
   17d44:	bl	18dd0 <__assert_fail@plt+0x7c24>
   17d48:	mov	r6, r0
   17d4c:	str	r0, [r7]
   17d50:	ldr	r0, [r7, #4]
   17d54:	mov	r1, #0
   17d58:	ldr	r2, [sp, #52]	; 0x34
   17d5c:	sub	r2, r2, r0
   17d60:	add	r0, r6, r0, lsl #3
   17d64:	lsl	r2, r2, #3
   17d68:	bl	1108c <memset@plt>
   17d6c:	ldr	r3, [sp, #52]	; 0x34
   17d70:	str	r3, [r7, #4]
   17d74:	ldr	r1, [r5, #4]
   17d78:	add	r0, r6, r4, lsl #3
   17d7c:	add	ip, r5, #8
   17d80:	mov	r3, fp
   17d84:	mov	r2, sl
   17d88:	ldr	r7, [r0, #4]
   17d8c:	str	r0, [sp, #36]	; 0x24
   17d90:	str	ip, [sp, #40]	; 0x28
   17d94:	orr	r0, r1, #1
   17d98:	ldr	r9, [r6, r4, lsl #3]
   17d9c:	str	ip, [sp, #8]
   17da0:	ldr	lr, [r5, #44]	; 0x2c
   17da4:	str	r0, [sp, #4]
   17da8:	ldr	ip, [r5]
   17dac:	mov	r1, r9
   17db0:	str	ip, [sp, #32]
   17db4:	ldr	ip, [r5, #40]	; 0x28
   17db8:	str	ip, [sp, #12]
   17dbc:	ldr	ip, [sp, #32]
   17dc0:	str	lr, [sp, #16]
   17dc4:	str	r0, [sp, #44]	; 0x2c
   17dc8:	mov	r0, r7
   17dcc:	str	ip, [sp]
   17dd0:	bl	164f4 <__assert_fail@plt+0x5348>
   17dd4:	cmp	r9, r0
   17dd8:	bhi	17e48 <__assert_fail@plt+0x6c9c>
   17ddc:	add	r9, r0, #1
   17de0:	movw	r3, #45496	; 0xb1b8
   17de4:	movt	r3, #2
   17de8:	cmp	r7, r3
   17dec:	str	r9, [r6, r4, lsl #3]
   17df0:	beq	17dfc <__assert_fail@plt+0x6c50>
   17df4:	mov	r0, r7
   17df8:	bl	19710 <__assert_fail@plt+0x8564>
   17dfc:	mov	r0, r9
   17e00:	bl	18c20 <__assert_fail@plt+0x7a74>
   17e04:	ldr	ip, [r5]
   17e08:	mov	r3, fp
   17e0c:	mov	r2, sl
   17e10:	mov	r1, r9
   17e14:	mov	r7, r0
   17e18:	ldr	lr, [sp, #36]	; 0x24
   17e1c:	ldr	r4, [r5, #40]	; 0x28
   17e20:	str	r0, [lr, #4]
   17e24:	ldr	lr, [r5, #44]	; 0x2c
   17e28:	str	ip, [sp]
   17e2c:	ldr	ip, [sp, #44]	; 0x2c
   17e30:	str	ip, [sp, #4]
   17e34:	ldr	ip, [sp, #40]	; 0x28
   17e38:	str	r4, [sp, #12]
   17e3c:	str	lr, [sp, #16]
   17e40:	str	ip, [sp, #8]
   17e44:	bl	164f4 <__assert_fail@plt+0x5348>
   17e48:	ldr	r3, [sp, #28]
   17e4c:	mov	r0, r7
   17e50:	str	r3, [r8]
   17e54:	add	sp, sp, #60	; 0x3c
   17e58:	ldrd	r4, [sp]
   17e5c:	ldrd	r6, [sp, #8]
   17e60:	ldrd	r8, [sp, #16]
   17e64:	ldrd	sl, [sp, #24]
   17e68:	add	sp, sp, #32
   17e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17e70:	mov	r1, #8
   17e74:	mvn	r3, #-2147483648	; 0x80000000
   17e78:	str	r1, [sp]
   17e7c:	add	r1, sp, #52	; 0x34
   17e80:	bl	18dd0 <__assert_fail@plt+0x7c24>
   17e84:	ldrd	r2, [r7, #8]
   17e88:	mov	r6, r0
   17e8c:	str	r0, [r7]
   17e90:	strd	r2, [r0]
   17e94:	b	17d50 <__assert_fail@plt+0x6ba4>
   17e98:	bl	1117c <abort@plt>
   17e9c:	strd	r4, [sp, #-16]!
   17ea0:	mov	r5, r0
   17ea4:	str	r6, [sp, #8]
   17ea8:	str	lr, [sp, #12]
   17eac:	bl	11068 <__errno_location@plt>
   17eb0:	mov	r4, r0
   17eb4:	cmp	r5, #0
   17eb8:	ldr	r0, [pc, #32]	; 17ee0 <__assert_fail@plt+0x6d34>
   17ebc:	mov	r1, #48	; 0x30
   17ec0:	movne	r0, r5
   17ec4:	ldr	r6, [r4]
   17ec8:	bl	18f48 <__assert_fail@plt+0x7d9c>
   17ecc:	str	r6, [r4]
   17ed0:	ldrd	r4, [sp]
   17ed4:	ldr	r6, [sp, #8]
   17ed8:	add	sp, sp, #12
   17edc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee0:			; <UNDEFINED> instruction: 0x0002b2b8
   17ee4:	ldr	r3, [pc, #12]	; 17ef8 <__assert_fail@plt+0x6d4c>
   17ee8:	cmp	r0, #0
   17eec:	moveq	r0, r3
   17ef0:	ldr	r0, [r0]
   17ef4:	bx	lr
   17ef8:			; <UNDEFINED> instruction: 0x0002b2b8
   17efc:	ldr	r3, [pc, #12]	; 17f10 <__assert_fail@plt+0x6d64>
   17f00:	cmp	r0, #0
   17f04:	moveq	r0, r3
   17f08:	str	r1, [r0]
   17f0c:	bx	lr
   17f10:			; <UNDEFINED> instruction: 0x0002b2b8
   17f14:	ldr	r3, [pc, #52]	; 17f50 <__assert_fail@plt+0x6da4>
   17f18:	cmp	r0, #0
   17f1c:	push	{lr}		; (str lr, [sp, #-4]!)
   17f20:	lsr	lr, r1, #5
   17f24:	and	r1, r1, #31
   17f28:	moveq	r0, r3
   17f2c:	add	r3, r0, #8
   17f30:	ldr	ip, [r3, lr, lsl #2]
   17f34:	lsr	r0, ip, r1
   17f38:	eor	r2, r2, r0
   17f3c:	and	r0, r0, #1
   17f40:	and	r2, r2, #1
   17f44:	eor	r1, ip, r2, lsl r1
   17f48:	str	r1, [r3, lr, lsl #2]
   17f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f50:			; <UNDEFINED> instruction: 0x0002b2b8
   17f54:	ldr	r3, [pc, #16]	; 17f6c <__assert_fail@plt+0x6dc0>
   17f58:	cmp	r0, #0
   17f5c:	movne	r3, r0
   17f60:	ldr	r0, [r3, #4]
   17f64:	str	r1, [r3, #4]
   17f68:	bx	lr
   17f6c:			; <UNDEFINED> instruction: 0x0002b2b8
   17f70:	ldr	r3, [pc, #48]	; 17fa8 <__assert_fail@plt+0x6dfc>
   17f74:	cmp	r0, #0
   17f78:	mov	ip, #10
   17f7c:	moveq	r0, r3
   17f80:	cmp	r2, #0
   17f84:	cmpne	r1, #0
   17f88:	str	ip, [r0]
   17f8c:	beq	17f9c <__assert_fail@plt+0x6df0>
   17f90:	str	r1, [r0, #40]	; 0x28
   17f94:	str	r2, [r0, #44]	; 0x2c
   17f98:	bx	lr
   17f9c:	str	r4, [sp, #-8]!
   17fa0:	str	lr, [sp, #4]
   17fa4:	bl	1117c <abort@plt>
   17fa8:			; <UNDEFINED> instruction: 0x0002b2b8
   17fac:	strd	r4, [sp, #-28]!	; 0xffffffe4
   17fb0:	strd	r6, [sp, #8]
   17fb4:	mov	r7, r0
   17fb8:	mov	r6, r1
   17fbc:	strd	r8, [sp, #16]
   17fc0:	mov	r8, r2
   17fc4:	mov	r9, r3
   17fc8:	str	lr, [sp, #24]
   17fcc:	sub	sp, sp, #28
   17fd0:	ldr	r4, [sp, #56]	; 0x38
   17fd4:	ldr	ip, [pc, #104]	; 18044 <__assert_fail@plt+0x6e98>
   17fd8:	cmp	r4, #0
   17fdc:	moveq	r4, ip
   17fe0:	bl	11068 <__errno_location@plt>
   17fe4:	ldr	ip, [r4, #44]	; 0x2c
   17fe8:	mov	r5, r0
   17fec:	mov	r1, r6
   17ff0:	add	lr, r4, #8
   17ff4:	mov	r3, r9
   17ff8:	ldr	r6, [r5]
   17ffc:	mov	r2, r8
   18000:	mov	r0, r7
   18004:	str	ip, [sp, #16]
   18008:	ldr	ip, [r4, #40]	; 0x28
   1800c:	str	lr, [sp, #8]
   18010:	str	ip, [sp, #12]
   18014:	ldr	ip, [r4, #4]
   18018:	str	ip, [sp, #4]
   1801c:	ldr	ip, [r4]
   18020:	str	ip, [sp]
   18024:	bl	164f4 <__assert_fail@plt+0x5348>
   18028:	str	r6, [r5]
   1802c:	add	sp, sp, #28
   18030:	ldrd	r4, [sp]
   18034:	ldrd	r6, [sp, #8]
   18038:	ldrd	r8, [sp, #16]
   1803c:	add	sp, sp, #24
   18040:	pop	{pc}		; (ldr pc, [sp], #4)
   18044:			; <UNDEFINED> instruction: 0x0002b2b8
   18048:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1804c:	cmp	r3, #0
   18050:	ldr	r4, [pc, #220]	; 18134 <__assert_fail@plt+0x6f88>
   18054:	movne	r4, r3
   18058:	strd	r6, [sp, #8]
   1805c:	mov	r6, r2
   18060:	strd	r8, [sp, #16]
   18064:	mov	r9, r0
   18068:	strd	sl, [sp, #24]
   1806c:	mov	sl, r1
   18070:	str	lr, [sp, #32]
   18074:	sub	sp, sp, #44	; 0x2c
   18078:	bl	11068 <__errno_location@plt>
   1807c:	ldr	r5, [r4, #4]
   18080:	mov	r7, r0
   18084:	mov	r1, #0
   18088:	add	r8, r4, #8
   1808c:	mov	r3, sl
   18090:	ldr	ip, [r4, #44]	; 0x2c
   18094:	mov	r2, r9
   18098:	mov	r0, r1
   1809c:	ldr	lr, [r7]
   180a0:	cmp	r6, r1
   180a4:	orreq	r5, r5, #1
   180a8:	str	ip, [sp, #16]
   180ac:	ldr	ip, [r4, #40]	; 0x28
   180b0:	stmib	sp, {r5, r8, ip}
   180b4:	ldr	ip, [r4]
   180b8:	str	lr, [sp, #28]
   180bc:	str	ip, [sp]
   180c0:	bl	164f4 <__assert_fail@plt+0x5348>
   180c4:	add	r1, r0, #1
   180c8:	mov	fp, r0
   180cc:	mov	r0, r1
   180d0:	str	r1, [sp, #36]	; 0x24
   180d4:	bl	18c20 <__assert_fail@plt+0x7a74>
   180d8:	ldr	ip, [r4, #44]	; 0x2c
   180dc:	mov	r3, sl
   180e0:	mov	r2, r9
   180e4:	ldr	r1, [sp, #36]	; 0x24
   180e8:	str	ip, [sp, #16]
   180ec:	ldr	ip, [r4, #40]	; 0x28
   180f0:	str	r0, [sp, #32]
   180f4:	stmib	sp, {r5, r8, ip}
   180f8:	ldr	ip, [r4]
   180fc:	str	ip, [sp]
   18100:	bl	164f4 <__assert_fail@plt+0x5348>
   18104:	ldr	lr, [sp, #28]
   18108:	cmp	r6, #0
   1810c:	ldr	r0, [sp, #32]
   18110:	str	lr, [r7]
   18114:	strne	fp, [r6]
   18118:	add	sp, sp, #44	; 0x2c
   1811c:	ldrd	r4, [sp]
   18120:	ldrd	r6, [sp, #8]
   18124:	ldrd	r8, [sp, #16]
   18128:	ldrd	sl, [sp, #24]
   1812c:	add	sp, sp, #32
   18130:	pop	{pc}		; (ldr pc, [sp], #4)
   18134:			; <UNDEFINED> instruction: 0x0002b2b8
   18138:	mov	r3, r2
   1813c:	mov	r2, #0
   18140:	b	18048 <__assert_fail@plt+0x6e9c>
   18144:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18148:	movw	r5, #45348	; 0xb124
   1814c:	movt	r5, #2
   18150:	ldr	r3, [r5, #4]
   18154:	strd	r6, [sp, #8]
   18158:	str	r8, [sp, #16]
   1815c:	str	lr, [sp, #20]
   18160:	ldr	r7, [r5]
   18164:	cmp	r3, #1
   18168:	ble	1818c <__assert_fail@plt+0x6fe0>
   1816c:	mov	r4, #1
   18170:	add	r6, r7, #4
   18174:	ldr	r0, [r6, r4, lsl #3]
   18178:	add	r4, r4, #1
   1817c:	bl	19710 <__assert_fail@plt+0x8564>
   18180:	ldr	r3, [r5, #4]
   18184:	cmp	r3, r4
   18188:	bgt	18174 <__assert_fail@plt+0x6fc8>
   1818c:	ldr	r0, [r7, #4]
   18190:	movw	r4, #45496	; 0xb1b8
   18194:	movt	r4, #2
   18198:	cmp	r0, r4
   1819c:	beq	181b0 <__assert_fail@plt+0x7004>
   181a0:	bl	19710 <__assert_fail@plt+0x8564>
   181a4:	mov	r3, #256	; 0x100
   181a8:	str	r3, [r5, #8]
   181ac:	str	r4, [r5, #12]
   181b0:	ldr	r4, [pc, #44]	; 181e4 <__assert_fail@plt+0x7038>
   181b4:	cmp	r7, r4
   181b8:	beq	181c8 <__assert_fail@plt+0x701c>
   181bc:	mov	r0, r7
   181c0:	bl	19710 <__assert_fail@plt+0x8564>
   181c4:	str	r4, [r5]
   181c8:	mov	r3, #1
   181cc:	ldrd	r6, [sp, #8]
   181d0:	str	r3, [r5, #4]
   181d4:	ldrd	r4, [sp]
   181d8:	ldr	r8, [sp, #16]
   181dc:	add	sp, sp, #20
   181e0:	pop	{pc}		; (ldr pc, [sp], #4)
   181e4:	andeq	fp, r2, ip, lsr #2
   181e8:	ldr	r3, [pc, #4]	; 181f4 <__assert_fail@plt+0x7048>
   181ec:	mvn	r2, #0
   181f0:	b	17cb4 <__assert_fail@plt+0x6b08>
   181f4:			; <UNDEFINED> instruction: 0x0002b2b8
   181f8:	ldr	r3, [pc]	; 18200 <__assert_fail@plt+0x7054>
   181fc:	b	17cb4 <__assert_fail@plt+0x6b08>
   18200:			; <UNDEFINED> instruction: 0x0002b2b8
   18204:	mov	r1, r0
   18208:	ldr	r3, [pc, #8]	; 18218 <__assert_fail@plt+0x706c>
   1820c:	mvn	r2, #0
   18210:	mov	r0, #0
   18214:	b	17cb4 <__assert_fail@plt+0x6b08>
   18218:			; <UNDEFINED> instruction: 0x0002b2b8
   1821c:	mov	r2, r1
   18220:	ldr	r3, [pc, #8]	; 18230 <__assert_fail@plt+0x7084>
   18224:	mov	r1, r0
   18228:	mov	r0, #0
   1822c:	b	17cb4 <__assert_fail@plt+0x6b08>
   18230:			; <UNDEFINED> instruction: 0x0002b2b8
   18234:	strd	r4, [sp, #-12]!
   18238:	mov	r5, r2
   1823c:	mov	r4, r0
   18240:	str	lr, [sp, #8]
   18244:	sub	sp, sp, #52	; 0x34
   18248:	mov	r0, sp
   1824c:	bl	16350 <__assert_fail@plt+0x51a4>
   18250:	mov	r3, sp
   18254:	mov	r1, r5
   18258:	mov	r0, r4
   1825c:	mvn	r2, #0
   18260:	bl	17cb4 <__assert_fail@plt+0x6b08>
   18264:	add	sp, sp, #52	; 0x34
   18268:	ldrd	r4, [sp]
   1826c:	add	sp, sp, #8
   18270:	pop	{pc}		; (ldr pc, [sp], #4)
   18274:	strd	r4, [sp, #-16]!
   18278:	mov	r5, r2
   1827c:	mov	r4, r0
   18280:	str	r6, [sp, #8]
   18284:	mov	r6, r3
   18288:	str	lr, [sp, #12]
   1828c:	sub	sp, sp, #48	; 0x30
   18290:	mov	r0, sp
   18294:	bl	16350 <__assert_fail@plt+0x51a4>
   18298:	mov	r3, sp
   1829c:	mov	r2, r6
   182a0:	mov	r1, r5
   182a4:	mov	r0, r4
   182a8:	bl	17cb4 <__assert_fail@plt+0x6b08>
   182ac:	add	sp, sp, #48	; 0x30
   182b0:	ldrd	r4, [sp]
   182b4:	ldr	r6, [sp, #8]
   182b8:	add	sp, sp, #12
   182bc:	pop	{pc}		; (ldr pc, [sp], #4)
   182c0:	mov	r2, r1
   182c4:	mov	r1, r0
   182c8:	mov	r0, #0
   182cc:	b	18234 <__assert_fail@plt+0x7088>
   182d0:	mov	r3, r2
   182d4:	mov	r2, r1
   182d8:	mov	r1, r0
   182dc:	mov	r0, #0
   182e0:	b	18274 <__assert_fail@plt+0x70c8>
   182e4:	ldr	ip, [pc, #140]	; 18378 <__assert_fail@plt+0x71cc>
   182e8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   182ec:	ldrd	r4, [ip]
   182f0:	strd	r6, [sp, #8]
   182f4:	ldrd	r6, [ip, #8]
   182f8:	strd	r8, [sp, #16]
   182fc:	lsr	r9, r2, #5
   18300:	str	lr, [sp, #24]
   18304:	sub	sp, sp, #52	; 0x34
   18308:	and	lr, r2, #31
   1830c:	add	r8, sp, #8
   18310:	mov	r2, r1
   18314:	strd	r4, [sp]
   18318:	mov	r1, r0
   1831c:	mov	r3, sp
   18320:	strd	r6, [sp, #8]
   18324:	mov	r0, #0
   18328:	ldrd	r4, [ip, #16]
   1832c:	ldrd	r6, [ip, #24]
   18330:	strd	r4, [sp, #16]
   18334:	ldrd	r4, [ip, #32]
   18338:	strd	r6, [sp, #24]
   1833c:	ldrd	r6, [ip, #40]	; 0x28
   18340:	strd	r4, [sp, #32]
   18344:	strd	r6, [sp, #40]	; 0x28
   18348:	ldr	ip, [r8, r9, lsl #2]
   1834c:	mvn	r4, ip, lsr lr
   18350:	and	r4, r4, #1
   18354:	eor	lr, ip, r4, lsl lr
   18358:	str	lr, [r8, r9, lsl #2]
   1835c:	bl	17cb4 <__assert_fail@plt+0x6b08>
   18360:	add	sp, sp, #52	; 0x34
   18364:	ldrd	r4, [sp]
   18368:	ldrd	r6, [sp, #8]
   1836c:	ldrd	r8, [sp, #16]
   18370:	add	sp, sp, #24
   18374:	pop	{pc}		; (ldr pc, [sp], #4)
   18378:			; <UNDEFINED> instruction: 0x0002b2b8
   1837c:	mov	r2, r1
   18380:	mvn	r1, #0
   18384:	b	182e4 <__assert_fail@plt+0x7138>
   18388:	mov	r2, #58	; 0x3a
   1838c:	mvn	r1, #0
   18390:	b	182e4 <__assert_fail@plt+0x7138>
   18394:	mov	r2, #58	; 0x3a
   18398:	b	182e4 <__assert_fail@plt+0x7138>
   1839c:	strd	r4, [sp, #-20]!	; 0xffffffec
   183a0:	strd	r6, [sp, #8]
   183a4:	mov	r6, r0
   183a8:	mov	r7, r2
   183ac:	str	lr, [sp, #16]
   183b0:	sub	sp, sp, #100	; 0x64
   183b4:	mov	r0, sp
   183b8:	bl	16350 <__assert_fail@plt+0x51a4>
   183bc:	ldrd	r4, [sp, #8]
   183c0:	mov	r1, r7
   183c4:	mov	r0, r6
   183c8:	add	r3, sp, #48	; 0x30
   183cc:	mvn	r2, #0
   183d0:	ldrd	r6, [sp]
   183d4:	strd	r4, [sp, #56]	; 0x38
   183d8:	ldrd	r4, [sp, #16]
   183dc:	strd	r6, [sp, #48]	; 0x30
   183e0:	ldrd	r6, [sp, #32]
   183e4:	ldr	lr, [sp, #60]	; 0x3c
   183e8:	strd	r4, [sp, #64]	; 0x40
   183ec:	ldrd	r4, [sp, #24]
   183f0:	mvn	ip, lr
   183f4:	and	ip, ip, #67108864	; 0x4000000
   183f8:	strd	r4, [sp, #72]	; 0x48
   183fc:	eor	ip, ip, lr
   18400:	ldrd	r4, [sp, #40]	; 0x28
   18404:	str	ip, [sp, #60]	; 0x3c
   18408:	strd	r6, [sp, #80]	; 0x50
   1840c:	strd	r4, [sp, #88]	; 0x58
   18410:	bl	17cb4 <__assert_fail@plt+0x6b08>
   18414:	add	sp, sp, #100	; 0x64
   18418:	ldrd	r4, [sp]
   1841c:	ldrd	r6, [sp, #8]
   18420:	add	sp, sp, #16
   18424:	pop	{pc}		; (ldr pc, [sp], #4)
   18428:	ldr	ip, [pc, #156]	; 184cc <__assert_fail@plt+0x7320>
   1842c:	cmp	r2, #0
   18430:	cmpne	r1, #0
   18434:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18438:	strd	r6, [sp, #8]
   1843c:	mov	r6, r2
   18440:	str	r8, [sp, #16]
   18444:	mov	r8, r3
   18448:	strd	sl, [sp, #20]
   1844c:	ldrd	r4, [ip]
   18450:	str	lr, [sp, #28]
   18454:	sub	sp, sp, #48	; 0x30
   18458:	mov	lr, #10
   1845c:	ldrd	r2, [ip, #8]
   18460:	ldrd	sl, [ip, #16]
   18464:	strd	r4, [sp]
   18468:	ldrd	r4, [ip, #32]
   1846c:	str	lr, [sp]
   18470:	strd	r2, [sp, #8]
   18474:	strd	sl, [sp, #16]
   18478:	ldrd	r2, [ip, #24]
   1847c:	ldrd	sl, [ip, #40]	; 0x28
   18480:	strd	r2, [sp, #24]
   18484:	strd	r4, [sp, #32]
   18488:	strd	sl, [sp, #40]	; 0x28
   1848c:	beq	184c8 <__assert_fail@plt+0x731c>
   18490:	ldr	r2, [sp, #80]	; 0x50
   18494:	mov	r7, r1
   18498:	mov	r3, sp
   1849c:	mov	r1, r8
   184a0:	str	r7, [sp, #40]	; 0x28
   184a4:	str	r6, [sp, #44]	; 0x2c
   184a8:	bl	17cb4 <__assert_fail@plt+0x6b08>
   184ac:	add	sp, sp, #48	; 0x30
   184b0:	ldrd	r4, [sp]
   184b4:	ldrd	r6, [sp, #8]
   184b8:	ldr	r8, [sp, #16]
   184bc:	ldrd	sl, [sp, #20]
   184c0:	add	sp, sp, #28
   184c4:	pop	{pc}		; (ldr pc, [sp], #4)
   184c8:	bl	1117c <abort@plt>
   184cc:			; <UNDEFINED> instruction: 0x0002b2b8
   184d0:	mvn	ip, #0
   184d4:	push	{lr}		; (str lr, [sp, #-4]!)
   184d8:	sub	sp, sp, #12
   184dc:	str	ip, [sp]
   184e0:	bl	18428 <__assert_fail@plt+0x727c>
   184e4:	add	sp, sp, #12
   184e8:	pop	{pc}		; (ldr pc, [sp], #4)
   184ec:	mvn	ip, #0
   184f0:	push	{lr}		; (str lr, [sp, #-4]!)
   184f4:	sub	sp, sp, #12
   184f8:	mov	r3, r2
   184fc:	mov	r2, r1
   18500:	mov	r1, r0
   18504:	mov	r0, #0
   18508:	str	ip, [sp]
   1850c:	bl	18428 <__assert_fail@plt+0x727c>
   18510:	add	sp, sp, #12
   18514:	pop	{pc}		; (ldr pc, [sp], #4)
   18518:	push	{lr}		; (str lr, [sp, #-4]!)
   1851c:	sub	sp, sp, #12
   18520:	str	r3, [sp]
   18524:	mov	r3, r2
   18528:	mov	r2, r1
   1852c:	mov	r1, r0
   18530:	mov	r0, #0
   18534:	bl	18428 <__assert_fail@plt+0x727c>
   18538:	add	sp, sp, #12
   1853c:	pop	{pc}		; (ldr pc, [sp], #4)
   18540:	ldr	r3, [pc]	; 18548 <__assert_fail@plt+0x739c>
   18544:	b	17cb4 <__assert_fail@plt+0x6b08>
   18548:	andeq	fp, r2, r4, lsr r1
   1854c:	mov	r2, r1
   18550:	ldr	r3, [pc, #8]	; 18560 <__assert_fail@plt+0x73b4>
   18554:	mov	r1, r0
   18558:	mov	r0, #0
   1855c:	b	17cb4 <__assert_fail@plt+0x6b08>
   18560:	andeq	fp, r2, r4, lsr r1
   18564:	ldr	r3, [pc, #4]	; 18570 <__assert_fail@plt+0x73c4>
   18568:	mvn	r2, #0
   1856c:	b	17cb4 <__assert_fail@plt+0x6b08>
   18570:	andeq	fp, r2, r4, lsr r1
   18574:	mov	r1, r0
   18578:	ldr	r3, [pc, #8]	; 18588 <__assert_fail@plt+0x73dc>
   1857c:	mvn	r2, #0
   18580:	mov	r0, #0
   18584:	b	17cb4 <__assert_fail@plt+0x6b08>
   18588:	andeq	fp, r2, r4, lsr r1
   1858c:	str	r4, [sp, #-16]!
   18590:	movw	r1, #41696	; 0xa2e0
   18594:	movt	r1, #1
   18598:	strd	r6, [sp, #4]
   1859c:	mov	r4, r0
   185a0:	mov	r0, #3
   185a4:	str	lr, [sp, #12]
   185a8:	sub	sp, sp, #104	; 0x68
   185ac:	mov	r2, sp
   185b0:	bl	11194 <__lxstat64@plt>
   185b4:	cmp	r0, #0
   185b8:	movne	r0, #0
   185bc:	bne	185d4 <__assert_fail@plt+0x7428>
   185c0:	ldrd	r6, [sp]
   185c4:	mov	r0, r4
   185c8:	ldrd	r2, [sp, #96]	; 0x60
   185cc:	strd	r2, [r4]
   185d0:	strd	r6, [r4, #8]
   185d4:	add	sp, sp, #104	; 0x68
   185d8:	ldr	r4, [sp]
   185dc:	ldrd	r6, [sp, #4]
   185e0:	add	sp, sp, #12
   185e4:	pop	{pc}		; (ldr pc, [sp], #4)
   185e8:	cmp	r0, #2
   185ec:	strd	r4, [sp, #-24]!	; 0xffffffe8
   185f0:	mov	r4, r0
   185f4:	strd	r6, [sp, #8]
   185f8:	str	r8, [sp, #16]
   185fc:	str	lr, [sp, #20]
   18600:	bls	1861c <__assert_fail@plt+0x7470>
   18604:	mov	r0, r4
   18608:	ldrd	r4, [sp]
   1860c:	ldrd	r6, [sp, #8]
   18610:	ldr	r8, [sp, #16]
   18614:	add	sp, sp, #20
   18618:	pop	{pc}		; (ldr pc, [sp], #4)
   1861c:	bl	19934 <__assert_fail@plt+0x8788>
   18620:	mov	r7, r0
   18624:	bl	11068 <__errno_location@plt>
   18628:	mov	r5, r0
   1862c:	mov	r0, r4
   18630:	ldr	r6, [r5]
   18634:	mov	r4, r7
   18638:	bl	11188 <close@plt>
   1863c:	str	r6, [r5]
   18640:	b	18604 <__assert_fail@plt+0x7458>
   18644:	cmp	r1, #0
   18648:	strd	r4, [sp, #-16]!
   1864c:	mov	ip, r3
   18650:	str	r6, [sp, #8]
   18654:	mov	r4, r0
   18658:	str	lr, [sp, #12]
   1865c:	sub	sp, sp, #32
   18660:	ldr	r5, [sp, #48]	; 0x30
   18664:	ldr	r6, [sp, #52]	; 0x34
   18668:	beq	187ac <__assert_fail@plt+0x7600>
   1866c:	mov	r3, r1
   18670:	mov	r1, #1
   18674:	stm	sp, {r2, ip}
   18678:	movw	r2, #43236	; 0xa8e4
   1867c:	movt	r2, #1
   18680:	bl	110b0 <__fprintf_chk@plt>
   18684:	mov	r2, #5
   18688:	movw	r1, #43256	; 0xa8f8
   1868c:	movt	r1, #1
   18690:	mov	r0, #0
   18694:	bl	10f54 <dcgettext@plt>
   18698:	movw	ip, #2022	; 0x7e6
   1869c:	mov	r3, r0
   186a0:	mov	r1, #1
   186a4:	movw	r2, #43984	; 0xabd0
   186a8:	movt	r2, #1
   186ac:	mov	r0, r4
   186b0:	str	ip, [sp]
   186b4:	bl	110b0 <__fprintf_chk@plt>
   186b8:	mov	r1, r4
   186bc:	mov	r0, #10
   186c0:	bl	10f48 <fputc_unlocked@plt>
   186c4:	mov	r2, #5
   186c8:	movw	r1, #43260	; 0xa8fc
   186cc:	movt	r1, #1
   186d0:	mov	r0, #0
   186d4:	bl	10f54 <dcgettext@plt>
   186d8:	mov	r2, r0
   186dc:	mov	r1, #1
   186e0:	movw	r3, #43432	; 0xa9a8
   186e4:	movt	r3, #1
   186e8:	mov	r0, r4
   186ec:	bl	110b0 <__fprintf_chk@plt>
   186f0:	mov	r1, r4
   186f4:	mov	r0, #10
   186f8:	bl	10f48 <fputc_unlocked@plt>
   186fc:	cmp	r6, #9
   18700:	ldrls	pc, [pc, r6, lsl #2]
   18704:	b	18a18 <__assert_fail@plt+0x786c>
   18708:	muleq	r1, r8, r7
   1870c:	andeq	r8, r1, r8, asr #15
   18710:	andeq	r8, r1, r4, lsl #16
   18714:	andeq	r8, r1, r4, asr #16
   18718:	andeq	r8, r1, ip, lsl #17
   1871c:	andeq	r8, r1, r4, asr #17
   18720:	andeq	r8, r1, ip, lsl #18
   18724:	andeq	r8, r1, r0, ror #18
   18728:			; <UNDEFINED> instruction: 0x000189b8
   1872c:	andeq	r8, r1, r0, lsr r7
   18730:	movw	r1, #43736	; 0xaad8
   18734:	movt	r1, #1
   18738:	mov	r2, #5
   1873c:	mov	r0, #0
   18740:	bl	10f54 <dcgettext@plt>
   18744:	ldr	lr, [r5, #4]
   18748:	mov	r2, r0
   1874c:	mov	r1, #1
   18750:	mov	r0, r4
   18754:	ldr	r3, [r5, #8]
   18758:	ldr	ip, [r5, #32]
   1875c:	str	lr, [sp]
   18760:	ldr	lr, [r5, #12]
   18764:	str	ip, [sp, #28]
   18768:	ldr	ip, [r5, #28]
   1876c:	str	r3, [sp, #4]
   18770:	ldr	r3, [r5, #16]
   18774:	str	lr, [sp, #8]
   18778:	ldr	lr, [r5, #20]
   1877c:	str	ip, [sp, #24]
   18780:	ldr	ip, [r5, #24]
   18784:	str	r3, [sp, #12]
   18788:	ldr	r3, [r5]
   1878c:	str	lr, [sp, #16]
   18790:	str	ip, [sp, #20]
   18794:	bl	110b0 <__fprintf_chk@plt>
   18798:	add	sp, sp, #32
   1879c:	ldrd	r4, [sp]
   187a0:	ldr	r6, [sp, #8]
   187a4:	add	sp, sp, #12
   187a8:	pop	{pc}		; (ldr pc, [sp], #4)
   187ac:	mov	r3, r2
   187b0:	mov	r1, #1
   187b4:	str	ip, [sp]
   187b8:	movw	r2, #43248	; 0xa8f0
   187bc:	movt	r2, #1
   187c0:	bl	110b0 <__fprintf_chk@plt>
   187c4:	b	18684 <__assert_fail@plt+0x74d8>
   187c8:	mov	r2, #5
   187cc:	movw	r1, #43468	; 0xa9cc
   187d0:	movt	r1, #1
   187d4:	mov	r0, #0
   187d8:	bl	10f54 <dcgettext@plt>
   187dc:	ldr	r3, [r5]
   187e0:	mov	r2, r0
   187e4:	mov	r1, #1
   187e8:	mov	r0, r4
   187ec:	add	sp, sp, #32
   187f0:	ldrd	r4, [sp]
   187f4:	ldr	r6, [sp, #8]
   187f8:	ldr	lr, [sp, #12]
   187fc:	add	sp, sp, #16
   18800:	b	110b0 <__fprintf_chk@plt>
   18804:	mov	r2, #5
   18808:	movw	r1, #43484	; 0xa9dc
   1880c:	movt	r1, #1
   18810:	mov	r0, #0
   18814:	bl	10f54 <dcgettext@plt>
   18818:	ldm	r5, {r3, ip}
   1881c:	mov	r2, r0
   18820:	mov	r1, #1
   18824:	mov	r0, r4
   18828:	str	ip, [sp, #48]	; 0x30
   1882c:	add	sp, sp, #32
   18830:	ldrd	r4, [sp]
   18834:	ldr	r6, [sp, #8]
   18838:	ldr	lr, [sp, #12]
   1883c:	add	sp, sp, #16
   18840:	b	110b0 <__fprintf_chk@plt>
   18844:	mov	r2, #5
   18848:	movw	r1, #43508	; 0xa9f4
   1884c:	movt	r1, #1
   18850:	mov	r0, #0
   18854:	bl	10f54 <dcgettext@plt>
   18858:	ldm	r5, {r3, lr}
   1885c:	mov	r2, r0
   18860:	mov	r1, #1
   18864:	mov	r0, r4
   18868:	ldr	ip, [r5, #8]
   1886c:	str	lr, [sp, #48]	; 0x30
   18870:	str	ip, [sp, #52]	; 0x34
   18874:	add	sp, sp, #32
   18878:	ldrd	r4, [sp]
   1887c:	ldr	r6, [sp, #8]
   18880:	ldr	lr, [sp, #12]
   18884:	add	sp, sp, #16
   18888:	b	110b0 <__fprintf_chk@plt>
   1888c:	mov	r2, #5
   18890:	movw	r1, #43536	; 0xaa10
   18894:	movt	r1, #1
   18898:	mov	r0, #0
   1889c:	bl	10f54 <dcgettext@plt>
   188a0:	ldmib	r5, {r3, ip, lr}
   188a4:	mov	r2, r0
   188a8:	mov	r1, #1
   188ac:	mov	r0, r4
   188b0:	str	r3, [sp]
   188b4:	ldr	r3, [r5]
   188b8:	stmib	sp, {ip, lr}
   188bc:	bl	110b0 <__fprintf_chk@plt>
   188c0:	b	18798 <__assert_fail@plt+0x75ec>
   188c4:	mov	r2, #5
   188c8:	movw	r1, #43568	; 0xaa30
   188cc:	movt	r1, #1
   188d0:	mov	r0, #0
   188d4:	bl	10f54 <dcgettext@plt>
   188d8:	ldmib	r5, {ip, lr}
   188dc:	mov	r2, r0
   188e0:	mov	r1, #1
   188e4:	mov	r0, r4
   188e8:	ldr	r3, [r5, #16]
   188ec:	str	ip, [sp]
   188f0:	ldr	ip, [r5, #12]
   188f4:	str	r3, [sp, #12]
   188f8:	ldr	r3, [r5]
   188fc:	str	lr, [sp, #4]
   18900:	str	ip, [sp, #8]
   18904:	bl	110b0 <__fprintf_chk@plt>
   18908:	b	18798 <__assert_fail@plt+0x75ec>
   1890c:	mov	r2, #5
   18910:	movw	r1, #43604	; 0xaa54
   18914:	movt	r1, #1
   18918:	mov	r0, #0
   1891c:	bl	10f54 <dcgettext@plt>
   18920:	ldr	lr, [r5, #4]
   18924:	mov	r2, r0
   18928:	mov	r1, #1
   1892c:	mov	r0, r4
   18930:	ldr	r3, [r5, #8]
   18934:	ldr	ip, [r5, #20]
   18938:	str	lr, [sp]
   1893c:	ldr	lr, [r5, #12]
   18940:	str	ip, [sp, #16]
   18944:	ldr	ip, [r5, #16]
   18948:	str	r3, [sp, #4]
   1894c:	ldr	r3, [r5]
   18950:	str	lr, [sp, #8]
   18954:	str	ip, [sp, #12]
   18958:	bl	110b0 <__fprintf_chk@plt>
   1895c:	b	18798 <__assert_fail@plt+0x75ec>
   18960:	mov	r2, #5
   18964:	movw	r1, #43644	; 0xaa7c
   18968:	movt	r1, #1
   1896c:	mov	r0, #0
   18970:	bl	10f54 <dcgettext@plt>
   18974:	ldmib	r5, {r3, ip}
   18978:	mov	r2, r0
   1897c:	mov	r1, #1
   18980:	mov	r0, r4
   18984:	ldr	lr, [r5, #24]
   18988:	str	r3, [sp]
   1898c:	ldr	r3, [r5, #12]
   18990:	str	lr, [sp, #20]
   18994:	ldr	lr, [r5, #20]
   18998:	str	ip, [sp, #4]
   1899c:	ldr	ip, [r5, #16]
   189a0:	str	r3, [sp, #8]
   189a4:	ldr	r3, [r5]
   189a8:	str	ip, [sp, #12]
   189ac:	str	lr, [sp, #16]
   189b0:	bl	110b0 <__fprintf_chk@plt>
   189b4:	b	18798 <__assert_fail@plt+0x75ec>
   189b8:	mov	r2, #5
   189bc:	movw	r1, #43688	; 0xaaa8
   189c0:	movt	r1, #1
   189c4:	mov	r0, #0
   189c8:	bl	10f54 <dcgettext@plt>
   189cc:	ldmib	r5, {ip, lr}
   189d0:	mov	r2, r0
   189d4:	mov	r1, #1
   189d8:	mov	r0, r4
   189dc:	ldr	r3, [r5, #28]
   189e0:	str	ip, [sp]
   189e4:	ldr	ip, [r5, #12]
   189e8:	str	r3, [sp, #24]
   189ec:	ldr	r3, [r5, #24]
   189f0:	str	lr, [sp, #4]
   189f4:	ldr	lr, [r5, #16]
   189f8:	str	ip, [sp, #8]
   189fc:	ldr	ip, [r5, #20]
   18a00:	str	r3, [sp, #20]
   18a04:	ldr	r3, [r5]
   18a08:	str	lr, [sp, #12]
   18a0c:	str	ip, [sp, #16]
   18a10:	bl	110b0 <__fprintf_chk@plt>
   18a14:	b	18798 <__assert_fail@plt+0x75ec>
   18a18:	movw	r1, #43788	; 0xab0c
   18a1c:	movt	r1, #1
   18a20:	b	18738 <__assert_fail@plt+0x758c>
   18a24:	strd	r4, [sp, #-12]!
   18a28:	str	lr, [sp, #8]
   18a2c:	sub	sp, sp, #12
   18a30:	ldr	r5, [sp, #24]
   18a34:	ldr	ip, [r5]
   18a38:	cmp	ip, #0
   18a3c:	beq	18a58 <__assert_fail@plt+0x78ac>
   18a40:	mov	lr, r5
   18a44:	mov	ip, #0
   18a48:	ldr	r4, [lr, #4]!
   18a4c:	add	ip, ip, #1
   18a50:	cmp	r4, #0
   18a54:	bne	18a48 <__assert_fail@plt+0x789c>
   18a58:	stm	sp, {r5, ip}
   18a5c:	bl	18644 <__assert_fail@plt+0x7498>
   18a60:	add	sp, sp, #12
   18a64:	ldrd	r4, [sp]
   18a68:	add	sp, sp, #8
   18a6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18a70:	strd	r4, [sp, #-16]!
   18a74:	mov	ip, #0
   18a78:	str	r6, [sp, #8]
   18a7c:	str	lr, [sp, #12]
   18a80:	sub	sp, sp, #48	; 0x30
   18a84:	ldr	r5, [sp, #64]	; 0x40
   18a88:	add	r6, sp, #8
   18a8c:	mov	r4, r6
   18a90:	ldr	lr, [r5], #4
   18a94:	cmp	lr, #0
   18a98:	str	lr, [r4], #4
   18a9c:	beq	18aac <__assert_fail@plt+0x7900>
   18aa0:	add	ip, ip, #1
   18aa4:	cmp	ip, #10
   18aa8:	bne	18a90 <__assert_fail@plt+0x78e4>
   18aac:	stm	sp, {r6, ip}
   18ab0:	bl	18644 <__assert_fail@plt+0x7498>
   18ab4:	add	sp, sp, #48	; 0x30
   18ab8:	ldrd	r4, [sp]
   18abc:	ldr	r6, [sp, #8]
   18ac0:	add	sp, sp, #12
   18ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ac8:	push	{r3}		; (str r3, [sp, #-4]!)
   18acc:	mov	ip, #0
   18ad0:	strd	r4, [sp, #-12]!
   18ad4:	str	lr, [sp, #8]
   18ad8:	sub	sp, sp, #56	; 0x38
   18adc:	add	r3, sp, #72	; 0x48
   18ae0:	add	r5, sp, #16
   18ae4:	mov	r4, r3
   18ae8:	mov	lr, r5
   18aec:	str	r3, [sp, #12]
   18af0:	ldr	r3, [r4], #4
   18af4:	cmp	r3, #0
   18af8:	str	r3, [lr], #4
   18afc:	beq	18b0c <__assert_fail@plt+0x7960>
   18b00:	add	ip, ip, #1
   18b04:	cmp	ip, #10
   18b08:	bne	18af0 <__assert_fail@plt+0x7944>
   18b0c:	ldr	r3, [sp, #68]	; 0x44
   18b10:	stm	sp, {r5, ip}
   18b14:	bl	18644 <__assert_fail@plt+0x7498>
   18b18:	add	sp, sp, #56	; 0x38
   18b1c:	ldrd	r4, [sp]
   18b20:	ldr	lr, [sp, #8]
   18b24:	add	sp, sp, #12
   18b28:	add	sp, sp, #4
   18b2c:	bx	lr
   18b30:	movw	r3, #45436	; 0xb17c
   18b34:	movt	r3, #2
   18b38:	str	r4, [sp, #-8]!
   18b3c:	mov	r0, #10
   18b40:	ldr	r1, [r3]
   18b44:	str	lr, [sp, #4]
   18b48:	bl	10f48 <fputc_unlocked@plt>
   18b4c:	mov	r2, #5
   18b50:	movw	r1, #43848	; 0xab48
   18b54:	movt	r1, #1
   18b58:	mov	r0, #0
   18b5c:	bl	10f54 <dcgettext@plt>
   18b60:	mov	r1, r0
   18b64:	movw	r2, #43868	; 0xab5c
   18b68:	movt	r2, #1
   18b6c:	mov	r0, #1
   18b70:	bl	11098 <__printf_chk@plt>
   18b74:	mov	r2, #5
   18b78:	movw	r1, #43892	; 0xab74
   18b7c:	movt	r1, #1
   18b80:	mov	r0, #0
   18b84:	bl	10f54 <dcgettext@plt>
   18b88:	mov	r1, r0
   18b8c:	movw	r3, #41220	; 0xa104
   18b90:	movt	r3, #1
   18b94:	movw	r2, #41260	; 0xa12c
   18b98:	movt	r2, #1
   18b9c:	mov	r0, #1
   18ba0:	bl	11098 <__printf_chk@plt>
   18ba4:	mov	r2, #5
   18ba8:	movw	r1, #43912	; 0xab88
   18bac:	movt	r1, #1
   18bb0:	mov	r0, #0
   18bb4:	bl	10f54 <dcgettext@plt>
   18bb8:	mov	r1, r0
   18bbc:	movw	r2, #43952	; 0xabb0
   18bc0:	movt	r2, #1
   18bc4:	mov	r0, #1
   18bc8:	ldr	r4, [sp]
   18bcc:	ldr	lr, [sp, #4]
   18bd0:	add	sp, sp, #8
   18bd4:	b	11098 <__printf_chk@plt>
   18bd8:	str	r4, [sp, #-8]!
   18bdc:	str	lr, [sp, #4]
   18be0:	bl	19198 <__assert_fail@plt+0x7fec>
   18be4:	cmp	r0, #0
   18be8:	beq	18bf8 <__assert_fail@plt+0x7a4c>
   18bec:	ldr	r4, [sp]
   18bf0:	add	sp, sp, #4
   18bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf8:	bl	19050 <__assert_fail@plt+0x7ea4>
   18bfc:	str	r4, [sp, #-8]!
   18c00:	str	lr, [sp, #4]
   18c04:	bl	19198 <__assert_fail@plt+0x7fec>
   18c08:	cmp	r0, #0
   18c0c:	beq	18c1c <__assert_fail@plt+0x7a70>
   18c10:	ldr	r4, [sp]
   18c14:	add	sp, sp, #4
   18c18:	pop	{pc}		; (ldr pc, [sp], #4)
   18c1c:	bl	19050 <__assert_fail@plt+0x7ea4>
   18c20:	str	r4, [sp, #-8]!
   18c24:	str	lr, [sp, #4]
   18c28:	bl	19198 <__assert_fail@plt+0x7fec>
   18c2c:	cmp	r0, #0
   18c30:	beq	18c40 <__assert_fail@plt+0x7a94>
   18c34:	ldr	r4, [sp]
   18c38:	add	sp, sp, #4
   18c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c40:	bl	19050 <__assert_fail@plt+0x7ea4>
   18c44:	strd	r4, [sp, #-16]!
   18c48:	mov	r5, r0
   18c4c:	mov	r4, r1
   18c50:	str	r6, [sp, #8]
   18c54:	str	lr, [sp, #12]
   18c58:	bl	191d4 <__assert_fail@plt+0x8028>
   18c5c:	cmp	r0, #0
   18c60:	beq	18c74 <__assert_fail@plt+0x7ac8>
   18c64:	ldrd	r4, [sp]
   18c68:	ldr	r6, [sp, #8]
   18c6c:	add	sp, sp, #12
   18c70:	pop	{pc}		; (ldr pc, [sp], #4)
   18c74:	adds	r4, r4, #0
   18c78:	movne	r4, #1
   18c7c:	cmp	r5, #0
   18c80:	moveq	r4, #1
   18c84:	cmp	r4, #0
   18c88:	beq	18c64 <__assert_fail@plt+0x7ab8>
   18c8c:	bl	19050 <__assert_fail@plt+0x7ea4>
   18c90:	cmp	r1, #0
   18c94:	orreq	r1, r1, #1
   18c98:	str	r4, [sp, #-8]!
   18c9c:	str	lr, [sp, #4]
   18ca0:	bl	191d4 <__assert_fail@plt+0x8028>
   18ca4:	cmp	r0, #0
   18ca8:	beq	18cb8 <__assert_fail@plt+0x7b0c>
   18cac:	ldr	r4, [sp]
   18cb0:	add	sp, sp, #4
   18cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   18cb8:	bl	19050 <__assert_fail@plt+0x7ea4>
   18cbc:	strd	r4, [sp, #-16]!
   18cc0:	mov	r4, r0
   18cc4:	mov	r5, r2
   18cc8:	str	r6, [sp, #8]
   18ccc:	mov	r6, r1
   18cd0:	str	lr, [sp, #12]
   18cd4:	bl	198fc <__assert_fail@plt+0x8750>
   18cd8:	cmp	r0, #0
   18cdc:	beq	18cf0 <__assert_fail@plt+0x7b44>
   18ce0:	ldrd	r4, [sp]
   18ce4:	ldr	r6, [sp, #8]
   18ce8:	add	sp, sp, #12
   18cec:	pop	{pc}		; (ldr pc, [sp], #4)
   18cf0:	cmp	r4, #0
   18cf4:	beq	18d04 <__assert_fail@plt+0x7b58>
   18cf8:	cmp	r6, #0
   18cfc:	cmpne	r5, #0
   18d00:	beq	18ce0 <__assert_fail@plt+0x7b34>
   18d04:	bl	19050 <__assert_fail@plt+0x7ea4>
   18d08:	b	18cbc <__assert_fail@plt+0x7b10>
   18d0c:	cmp	r2, #0
   18d10:	cmpne	r1, #0
   18d14:	str	r4, [sp, #-8]!
   18d18:	moveq	r2, #1
   18d1c:	str	lr, [sp, #4]
   18d20:	moveq	r1, r2
   18d24:	bl	198fc <__assert_fail@plt+0x8750>
   18d28:	cmp	r0, #0
   18d2c:	beq	18d3c <__assert_fail@plt+0x7b90>
   18d30:	ldr	r4, [sp]
   18d34:	add	sp, sp, #4
   18d38:	pop	{pc}		; (ldr pc, [sp], #4)
   18d3c:	bl	19050 <__assert_fail@plt+0x7ea4>
   18d40:	mov	r2, r1
   18d44:	mov	r1, r0
   18d48:	mov	r0, #0
   18d4c:	b	18cbc <__assert_fail@plt+0x7b10>
   18d50:	mov	r2, r1
   18d54:	mov	r1, r0
   18d58:	mov	r0, #0
   18d5c:	b	18d0c <__assert_fail@plt+0x7b60>
   18d60:	cmp	r0, #0
   18d64:	strd	r4, [sp, #-16]!
   18d68:	mov	r5, r1
   18d6c:	ldr	r4, [r1]
   18d70:	str	r6, [sp, #8]
   18d74:	str	lr, [sp, #12]
   18d78:	beq	18da8 <__assert_fail@plt+0x7bfc>
   18d7c:	lsr	r3, r4, #1
   18d80:	add	r3, r3, #1
   18d84:	adds	r4, r4, r3
   18d88:	bcs	18dc4 <__assert_fail@plt+0x7c18>
   18d8c:	mov	r1, r4
   18d90:	bl	18cbc <__assert_fail@plt+0x7b10>
   18d94:	ldr	r6, [sp, #8]
   18d98:	str	r4, [r5]
   18d9c:	ldrd	r4, [sp]
   18da0:	add	sp, sp, #12
   18da4:	pop	{pc}		; (ldr pc, [sp], #4)
   18da8:	cmp	r4, #0
   18dac:	bne	18d8c <__assert_fail@plt+0x7be0>
   18db0:	mov	r4, #64	; 0x40
   18db4:	udiv	r4, r4, r2
   18db8:	cmp	r2, #64	; 0x40
   18dbc:	addhi	r4, r4, #1
   18dc0:	b	18d8c <__assert_fail@plt+0x7be0>
   18dc4:	bl	19050 <__assert_fail@plt+0x7ea4>
   18dc8:	mov	r2, #1
   18dcc:	b	18d60 <__assert_fail@plt+0x7bb4>
   18dd0:	ldr	ip, [r1]
   18dd4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18dd8:	mov	r5, r1
   18ddc:	strd	r6, [sp, #8]
   18de0:	str	lr, [sp, #28]
   18de4:	strd	r8, [sp, #16]
   18de8:	asr	lr, ip, #1
   18dec:	ldr	r8, [sp, #32]
   18df0:	str	sl, [sp, #24]
   18df4:	adds	r4, ip, lr
   18df8:	mvn	lr, r3
   18dfc:	lsr	lr, lr, #31
   18e00:	mvnvs	r4, #-2147483648	; 0x80000000
   18e04:	cmp	r3, r4
   18e08:	movge	r1, #0
   18e0c:	andlt	r1, lr, #1
   18e10:	cmp	r1, #0
   18e14:	movne	r4, r3
   18e18:	smull	r6, r7, r4, r8
   18e1c:	cmp	r7, r6, asr #31
   18e20:	bne	18ea8 <__assert_fail@plt+0x7cfc>
   18e24:	cmp	r6, #63	; 0x3f
   18e28:	mov	r1, r6
   18e2c:	ble	18e90 <__assert_fail@plt+0x7ce4>
   18e30:	cmp	r0, #0
   18e34:	sub	r6, r4, ip
   18e38:	streq	r0, [r5]
   18e3c:	cmp	r6, r2
   18e40:	bge	18e70 <__assert_fail@plt+0x7cc4>
   18e44:	adds	r4, ip, r2
   18e48:	bvs	18ea4 <__assert_fail@plt+0x7cf8>
   18e4c:	cmp	r4, r3
   18e50:	movle	r3, #0
   18e54:	andgt	r3, lr, #1
   18e58:	cmp	r3, #0
   18e5c:	bne	18ea4 <__assert_fail@plt+0x7cf8>
   18e60:	smull	r8, r9, r4, r8
   18e64:	cmp	r9, r8, asr #31
   18e68:	mov	r1, r8
   18e6c:	bne	18ea4 <__assert_fail@plt+0x7cf8>
   18e70:	bl	18c44 <__assert_fail@plt+0x7a98>
   18e74:	ldrd	r6, [sp, #8]
   18e78:	ldrd	r8, [sp, #16]
   18e7c:	ldr	sl, [sp, #24]
   18e80:	str	r4, [r5]
   18e84:	ldrd	r4, [sp]
   18e88:	add	sp, sp, #28
   18e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   18e90:	mov	r6, #64	; 0x40
   18e94:	sdiv	r4, r6, r8
   18e98:	mls	r1, r8, r4, r6
   18e9c:	sub	r1, r6, r1
   18ea0:	b	18e30 <__assert_fail@plt+0x7c84>
   18ea4:	bl	19050 <__assert_fail@plt+0x7ea4>
   18ea8:	mvn	r6, #-2147483648	; 0x80000000
   18eac:	b	18e94 <__assert_fail@plt+0x7ce8>
   18eb0:	mov	r1, #1
   18eb4:	str	r4, [sp, #-8]!
   18eb8:	str	lr, [sp, #4]
   18ebc:	bl	19124 <__assert_fail@plt+0x7f78>
   18ec0:	cmp	r0, #0
   18ec4:	beq	18ed4 <__assert_fail@plt+0x7d28>
   18ec8:	ldr	r4, [sp]
   18ecc:	add	sp, sp, #4
   18ed0:	pop	{pc}		; (ldr pc, [sp], #4)
   18ed4:	bl	19050 <__assert_fail@plt+0x7ea4>
   18ed8:	mov	r1, #1
   18edc:	str	r4, [sp, #-8]!
   18ee0:	str	lr, [sp, #4]
   18ee4:	bl	19124 <__assert_fail@plt+0x7f78>
   18ee8:	cmp	r0, #0
   18eec:	beq	18efc <__assert_fail@plt+0x7d50>
   18ef0:	ldr	r4, [sp]
   18ef4:	add	sp, sp, #4
   18ef8:	pop	{pc}		; (ldr pc, [sp], #4)
   18efc:	bl	19050 <__assert_fail@plt+0x7ea4>
   18f00:	str	r4, [sp, #-8]!
   18f04:	str	lr, [sp, #4]
   18f08:	bl	19124 <__assert_fail@plt+0x7f78>
   18f0c:	cmp	r0, #0
   18f10:	beq	18f20 <__assert_fail@plt+0x7d74>
   18f14:	ldr	r4, [sp]
   18f18:	add	sp, sp, #4
   18f1c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f20:	bl	19050 <__assert_fail@plt+0x7ea4>
   18f24:	str	r4, [sp, #-8]!
   18f28:	str	lr, [sp, #4]
   18f2c:	bl	19124 <__assert_fail@plt+0x7f78>
   18f30:	cmp	r0, #0
   18f34:	beq	18f44 <__assert_fail@plt+0x7d98>
   18f38:	ldr	r4, [sp]
   18f3c:	add	sp, sp, #4
   18f40:	pop	{pc}		; (ldr pc, [sp], #4)
   18f44:	bl	19050 <__assert_fail@plt+0x7ea4>
   18f48:	strd	r4, [sp, #-16]!
   18f4c:	mov	r4, r1
   18f50:	str	r6, [sp, #8]
   18f54:	mov	r6, r0
   18f58:	mov	r0, r1
   18f5c:	str	lr, [sp, #12]
   18f60:	bl	19198 <__assert_fail@plt+0x7fec>
   18f64:	subs	r5, r0, #0
   18f68:	beq	18f8c <__assert_fail@plt+0x7de0>
   18f6c:	mov	r2, r4
   18f70:	mov	r1, r6
   18f74:	bl	10f24 <memcpy@plt>
   18f78:	mov	r0, r5
   18f7c:	ldrd	r4, [sp]
   18f80:	ldr	r6, [sp, #8]
   18f84:	add	sp, sp, #12
   18f88:	pop	{pc}		; (ldr pc, [sp], #4)
   18f8c:	bl	19050 <__assert_fail@plt+0x7ea4>
   18f90:	strd	r4, [sp, #-16]!
   18f94:	mov	r4, r1
   18f98:	str	r6, [sp, #8]
   18f9c:	mov	r6, r0
   18fa0:	mov	r0, r1
   18fa4:	str	lr, [sp, #12]
   18fa8:	bl	19198 <__assert_fail@plt+0x7fec>
   18fac:	subs	r5, r0, #0
   18fb0:	beq	18fd4 <__assert_fail@plt+0x7e28>
   18fb4:	mov	r2, r4
   18fb8:	mov	r1, r6
   18fbc:	bl	10f24 <memcpy@plt>
   18fc0:	mov	r0, r5
   18fc4:	ldrd	r4, [sp]
   18fc8:	ldr	r6, [sp, #8]
   18fcc:	add	sp, sp, #12
   18fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   18fd4:	bl	19050 <__assert_fail@plt+0x7ea4>
   18fd8:	strd	r4, [sp, #-16]!
   18fdc:	mov	r4, r1
   18fe0:	str	r6, [sp, #8]
   18fe4:	mov	r6, r0
   18fe8:	add	r0, r1, #1
   18fec:	str	lr, [sp, #12]
   18ff0:	bl	19198 <__assert_fail@plt+0x7fec>
   18ff4:	subs	r5, r0, #0
   18ff8:	beq	19024 <__assert_fail@plt+0x7e78>
   18ffc:	mov	r3, #0
   19000:	mov	r1, r6
   19004:	mov	r2, r4
   19008:	strb	r3, [r5, r4]
   1900c:	bl	10f24 <memcpy@plt>
   19010:	mov	r0, r5
   19014:	ldrd	r4, [sp]
   19018:	ldr	r6, [sp, #8]
   1901c:	add	sp, sp, #12
   19020:	pop	{pc}		; (ldr pc, [sp], #4)
   19024:	bl	19050 <__assert_fail@plt+0x7ea4>
   19028:	str	r4, [sp, #-8]!
   1902c:	mov	r4, r0
   19030:	str	lr, [sp, #4]
   19034:	bl	11044 <strlen@plt>
   19038:	add	r1, r0, #1
   1903c:	mov	r0, r4
   19040:	ldr	r4, [sp]
   19044:	ldr	lr, [sp, #4]
   19048:	add	sp, sp, #8
   1904c:	b	18f48 <__assert_fail@plt+0x7d9c>
   19050:	movw	r3, #45344	; 0xb120
   19054:	movt	r3, #2
   19058:	str	r4, [sp, #-8]!
   1905c:	ldr	r4, [r3]
   19060:	mov	r2, #5
   19064:	movw	r1, #44032	; 0xac00
   19068:	movt	r1, #1
   1906c:	mov	r0, #0
   19070:	str	lr, [sp, #4]
   19074:	bl	10f54 <dcgettext@plt>
   19078:	mov	r3, r0
   1907c:	movw	r2, #42748	; 0xa6fc
   19080:	movt	r2, #1
   19084:	mov	r1, #0
   19088:	mov	r0, r4
   1908c:	bl	10fd8 <error@plt>
   19090:	bl	1117c <abort@plt>
   19094:	orr	r1, r1, #512	; 0x200
   19098:	str	r4, [sp, #-8]!
   1909c:	str	lr, [sp, #4]
   190a0:	bl	13c74 <__assert_fail@plt+0x2ac8>
   190a4:	cmp	r0, #0
   190a8:	beq	190b8 <__assert_fail@plt+0x7f0c>
   190ac:	ldr	r4, [sp]
   190b0:	add	sp, sp, #4
   190b4:	pop	{pc}		; (ldr pc, [sp], #4)
   190b8:	bl	11068 <__errno_location@plt>
   190bc:	ldr	r3, [r0]
   190c0:	cmp	r3, #22
   190c4:	beq	190cc <__assert_fail@plt+0x7f20>
   190c8:	bl	19050 <__assert_fail@plt+0x7ea4>
   190cc:	movw	r3, #44052	; 0xac14
   190d0:	movt	r3, #1
   190d4:	movw	r1, #44064	; 0xac20
   190d8:	movt	r1, #1
   190dc:	movw	r0, #44076	; 0xac2c
   190e0:	movt	r0, #1
   190e4:	mov	r2, #41	; 0x29
   190e8:	bl	111ac <__assert_fail@plt>
   190ec:	ldr	r3, [r0, #48]	; 0x30
   190f0:	and	r3, r3, #17
   190f4:	cmp	r3, #16
   190f8:	beq	1911c <__assert_fail@plt+0x7f70>
   190fc:	cmp	r3, #17
   19100:	beq	1910c <__assert_fail@plt+0x7f60>
   19104:	mov	r0, #0
   19108:	bx	lr
   1910c:	ldr	r0, [r1, #48]	; 0x30
   19110:	adds	r0, r0, #0
   19114:	movne	r0, #1
   19118:	bx	lr
   1911c:	mov	r0, #1
   19120:	bx	lr
   19124:	cmp	r1, #0
   19128:	cmpne	r0, #0
   1912c:	beq	19178 <__assert_fail@plt+0x7fcc>
   19130:	strd	r4, [sp, #-16]!
   19134:	umull	r4, r5, r0, r1
   19138:	str	r6, [sp, #8]
   1913c:	str	lr, [sp, #12]
   19140:	adds	r3, r5, #0
   19144:	movne	r3, #1
   19148:	cmp	r4, #0
   1914c:	blt	19158 <__assert_fail@plt+0x7fac>
   19150:	cmp	r3, #0
   19154:	beq	19184 <__assert_fail@plt+0x7fd8>
   19158:	bl	11068 <__errno_location@plt>
   1915c:	mov	r3, #12
   19160:	ldrd	r4, [sp]
   19164:	ldr	r6, [sp, #8]
   19168:	add	sp, sp, #12
   1916c:	str	r3, [r0]
   19170:	mov	r0, #0
   19174:	pop	{pc}		; (ldr pc, [sp], #4)
   19178:	mov	r1, #1
   1917c:	mov	r0, r1
   19180:	b	10ec4 <calloc@plt>
   19184:	ldrd	r4, [sp]
   19188:	ldr	r6, [sp, #8]
   1918c:	ldr	lr, [sp, #12]
   19190:	add	sp, sp, #16
   19194:	b	10ec4 <calloc@plt>
   19198:	cmp	r0, #0
   1919c:	beq	191a8 <__assert_fail@plt+0x7ffc>
   191a0:	blt	191b0 <__assert_fail@plt+0x8004>
   191a4:	b	10ff0 <malloc@plt>
   191a8:	mov	r0, #1
   191ac:	b	10ff0 <malloc@plt>
   191b0:	str	r4, [sp, #-8]!
   191b4:	str	lr, [sp, #4]
   191b8:	bl	11068 <__errno_location@plt>
   191bc:	mov	r3, #12
   191c0:	ldr	r4, [sp]
   191c4:	add	sp, sp, #4
   191c8:	str	r3, [r0]
   191cc:	mov	r0, #0
   191d0:	pop	{pc}		; (ldr pc, [sp], #4)
   191d4:	cmp	r0, #0
   191d8:	beq	19200 <__assert_fail@plt+0x8054>
   191dc:	cmp	r1, #0
   191e0:	str	r4, [sp, #-8]!
   191e4:	str	lr, [sp, #4]
   191e8:	beq	19208 <__assert_fail@plt+0x805c>
   191ec:	blt	1921c <__assert_fail@plt+0x8070>
   191f0:	ldr	r4, [sp]
   191f4:	ldr	lr, [sp, #4]
   191f8:	add	sp, sp, #8
   191fc:	b	10f60 <realloc@plt>
   19200:	mov	r0, r1
   19204:	b	19198 <__assert_fail@plt+0x7fec>
   19208:	bl	19710 <__assert_fail@plt+0x8564>
   1920c:	ldr	r4, [sp]
   19210:	add	sp, sp, #4
   19214:	mov	r0, #0
   19218:	pop	{pc}		; (ldr pc, [sp], #4)
   1921c:	bl	11068 <__errno_location@plt>
   19220:	mov	r3, #12
   19224:	str	r3, [r0]
   19228:	b	1920c <__assert_fail@plt+0x8060>
   1922c:	strd	r4, [sp, #-16]!
   19230:	mov	r4, r0
   19234:	str	r6, [sp, #8]
   19238:	str	lr, [sp, #12]
   1923c:	bl	10fc0 <__fpending@plt>
   19240:	ldr	r5, [r4]
   19244:	mov	r6, r0
   19248:	mov	r0, r4
   1924c:	bl	193d4 <__assert_fail@plt+0x8228>
   19250:	mov	r4, r0
   19254:	and	r5, r5, #32
   19258:	cmp	r5, #0
   1925c:	bne	19294 <__assert_fail@plt+0x80e8>
   19260:	cmp	r0, #0
   19264:	beq	19280 <__assert_fail@plt+0x80d4>
   19268:	cmp	r6, #0
   1926c:	bne	192ac <__assert_fail@plt+0x8100>
   19270:	bl	11068 <__errno_location@plt>
   19274:	ldr	r4, [r0]
   19278:	subs	r4, r4, #9
   1927c:	mvnne	r4, #0
   19280:	mov	r0, r4
   19284:	ldrd	r4, [sp]
   19288:	ldr	r6, [sp, #8]
   1928c:	add	sp, sp, #12
   19290:	pop	{pc}		; (ldr pc, [sp], #4)
   19294:	cmp	r0, #0
   19298:	bne	192ac <__assert_fail@plt+0x8100>
   1929c:	bl	11068 <__errno_location@plt>
   192a0:	str	r4, [r0]
   192a4:	mvn	r4, #0
   192a8:	b	19280 <__assert_fail@plt+0x80d4>
   192ac:	mvn	r4, #0
   192b0:	b	19280 <__assert_fail@plt+0x80d4>
   192b4:	movw	r3, #62998	; 0xf616
   192b8:	movt	r3, #149	; 0x95
   192bc:	strd	r4, [sp, #-8]!
   192c0:	mov	r4, #0
   192c4:	mov	r5, #0
   192c8:	strd	r4, [r0, #16]
   192cc:	str	r3, [r0, #24]
   192d0:	ldrd	r4, [sp]
   192d4:	add	sp, sp, #8
   192d8:	bx	lr
   192dc:	ldr	r2, [r0, #24]
   192e0:	movw	r3, #62998	; 0xf616
   192e4:	movt	r3, #149	; 0x95
   192e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   192ec:	strd	r6, [sp, #8]
   192f0:	strd	r8, [sp, #16]
   192f4:	strd	sl, [sp, #24]
   192f8:	cmp	r2, r3
   192fc:	str	lr, [sp, #32]
   19300:	sub	sp, sp, #4
   19304:	bne	193b4 <__assert_fail@plt+0x8208>
   19308:	ldrd	r6, [r0, #16]
   1930c:	ldrd	sl, [r1, #96]	; 0x60
   19310:	orrs	r3, r6, r7
   19314:	beq	19368 <__assert_fail@plt+0x81bc>
   19318:	ldrd	r2, [r0]
   1931c:	cmp	r3, fp
   19320:	cmpeq	r2, sl
   19324:	beq	19388 <__assert_fail@plt+0x81dc>
   19328:	adds	r8, r6, #1
   1932c:	adc	r9, r7, #0
   19330:	and	r2, r6, r8
   19334:	and	r3, r7, r9
   19338:	orrs	r3, r2, r3
   1933c:	strd	r8, [r0, #16]
   19340:	movne	r1, #0
   19344:	beq	193a4 <__assert_fail@plt+0x81f8>
   19348:	mov	r0, r1
   1934c:	add	sp, sp, #4
   19350:	ldrd	r4, [sp]
   19354:	ldrd	r6, [sp, #8]
   19358:	ldrd	r8, [sp, #16]
   1935c:	ldrd	sl, [sp, #24]
   19360:	add	sp, sp, #32
   19364:	pop	{pc}		; (ldr pc, [sp], #4)
   19368:	mov	r2, #1
   1936c:	mov	r3, #0
   19370:	strd	r2, [r0, #16]
   19374:	ldrd	r2, [r1]
   19378:	mov	r1, #0
   1937c:	strd	sl, [r0]
   19380:	strd	r2, [r0, #8]
   19384:	b	19348 <__assert_fail@plt+0x819c>
   19388:	ldrd	r4, [r1]
   1938c:	ldrd	r2, [r0, #8]
   19390:	cmp	r5, r3
   19394:	cmpeq	r4, r2
   19398:	bne	19328 <__assert_fail@plt+0x817c>
   1939c:	mov	r1, #1
   193a0:	b	19348 <__assert_fail@plt+0x819c>
   193a4:	orrs	r3, r8, r9
   193a8:	bne	19374 <__assert_fail@plt+0x81c8>
   193ac:	mov	r1, #1
   193b0:	b	19348 <__assert_fail@plt+0x819c>
   193b4:	movw	r3, #44092	; 0xac3c
   193b8:	movt	r3, #1
   193bc:	movw	r1, #44104	; 0xac48
   193c0:	movt	r1, #1
   193c4:	movw	r0, #44124	; 0xac5c
   193c8:	movt	r0, #1
   193cc:	mov	r2, #60	; 0x3c
   193d0:	bl	111ac <__assert_fail@plt>
   193d4:	strd	r4, [sp, #-12]!
   193d8:	mov	r4, r0
   193dc:	str	lr, [sp, #8]
   193e0:	sub	sp, sp, #12
   193e4:	bl	110a4 <fileno@plt>
   193e8:	cmp	r0, #0
   193ec:	mov	r0, r4
   193f0:	blt	19474 <__assert_fail@plt+0x82c8>
   193f4:	bl	11008 <__freading@plt>
   193f8:	cmp	r0, #0
   193fc:	bne	19440 <__assert_fail@plt+0x8294>
   19400:	mov	r0, r4
   19404:	bl	196b0 <__assert_fail@plt+0x8504>
   19408:	cmp	r0, #0
   1940c:	beq	19470 <__assert_fail@plt+0x82c4>
   19410:	bl	11068 <__errno_location@plt>
   19414:	mov	r5, r0
   19418:	mov	r0, r4
   1941c:	ldr	r4, [r5]
   19420:	bl	110bc <fclose@plt>
   19424:	cmp	r4, #0
   19428:	mvnne	r0, #0
   1942c:	strne	r4, [r5]
   19430:	add	sp, sp, #12
   19434:	ldrd	r4, [sp]
   19438:	add	sp, sp, #8
   1943c:	pop	{pc}		; (ldr pc, [sp], #4)
   19440:	mov	r0, r4
   19444:	bl	110a4 <fileno@plt>
   19448:	mov	r1, #1
   1944c:	mov	r2, #0
   19450:	mov	r3, #0
   19454:	str	r1, [sp]
   19458:	bl	10fa8 <lseek64@plt>
   1945c:	mvn	r3, #0
   19460:	mvn	r2, #0
   19464:	cmp	r1, r3
   19468:	cmpeq	r0, r2
   1946c:	bne	19400 <__assert_fail@plt+0x8254>
   19470:	mov	r0, r4
   19474:	add	sp, sp, #12
   19478:	ldrd	r4, [sp]
   1947c:	ldr	lr, [sp, #8]
   19480:	add	sp, sp, #12
   19484:	b	110bc <fclose@plt>
   19488:	push	{r1, r2, r3}
   1948c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19490:	strd	r6, [sp, #8]
   19494:	str	lr, [sp, #16]
   19498:	sub	sp, sp, #8
   1949c:	ldr	r1, [sp, #28]
   194a0:	add	r2, sp, #32
   194a4:	str	r2, [sp, #4]
   194a8:	cmp	r1, #0
   194ac:	beq	19588 <__assert_fail@plt+0x83dc>
   194b0:	movw	r3, #1030	; 0x406
   194b4:	mov	r6, r0
   194b8:	cmp	r1, r3
   194bc:	beq	19598 <__assert_fail@plt+0x83ec>
   194c0:	cmp	r1, #11
   194c4:	beq	19540 <__assert_fail@plt+0x8394>
   194c8:	ble	19520 <__assert_fail@plt+0x8374>
   194cc:	movw	r2, #1031	; 0x407
   194d0:	cmp	r1, r2
   194d4:	bgt	1955c <__assert_fail@plt+0x83b0>
   194d8:	cmp	r1, r3
   194dc:	bge	194ec <__assert_fail@plt+0x8340>
   194e0:	movw	r3, #1025	; 0x401
   194e4:	cmp	r1, r3
   194e8:	beq	19540 <__assert_fail@plt+0x8394>
   194ec:	ldr	r3, [sp, #4]
   194f0:	mov	r0, r6
   194f4:	ldr	r2, [r3]
   194f8:	bl	110d4 <fcntl64@plt>
   194fc:	mov	r4, r0
   19500:	mov	r0, r4
   19504:	add	sp, sp, #8
   19508:	ldrd	r4, [sp]
   1950c:	ldrd	r6, [sp, #8]
   19510:	ldr	lr, [sp, #16]
   19514:	add	sp, sp, #20
   19518:	add	sp, sp, #12
   1951c:	bx	lr
   19520:	cmp	r1, #4
   19524:	beq	194ec <__assert_fail@plt+0x8340>
   19528:	bgt	19550 <__assert_fail@plt+0x83a4>
   1952c:	cmp	r1, #2
   19530:	beq	194ec <__assert_fail@plt+0x8340>
   19534:	bgt	19540 <__assert_fail@plt+0x8394>
   19538:	cmp	r1, #1
   1953c:	bne	194ec <__assert_fail@plt+0x8340>
   19540:	mov	r0, r6
   19544:	bl	110d4 <fcntl64@plt>
   19548:	mov	r4, r0
   1954c:	b	19500 <__assert_fail@plt+0x8354>
   19550:	cmp	r1, #9
   19554:	bne	194ec <__assert_fail@plt+0x8340>
   19558:	b	19540 <__assert_fail@plt+0x8394>
   1955c:	movw	r3, #1033	; 0x409
   19560:	cmp	r1, r3
   19564:	beq	194ec <__assert_fail@plt+0x8340>
   19568:	blt	19540 <__assert_fail@plt+0x8394>
   1956c:	movw	r3, #1034	; 0x40a
   19570:	cmp	r1, r3
   19574:	bne	194ec <__assert_fail@plt+0x8340>
   19578:	mov	r0, r6
   1957c:	bl	110d4 <fcntl64@plt>
   19580:	mov	r4, r0
   19584:	b	19500 <__assert_fail@plt+0x8354>
   19588:	ldr	r2, [sp, #32]
   1958c:	bl	110d4 <fcntl64@plt>
   19590:	mov	r4, r0
   19594:	b	19500 <__assert_fail@plt+0x8354>
   19598:	movw	r5, #45800	; 0xb2e8
   1959c:	movt	r5, #2
   195a0:	ldr	r7, [r2]
   195a4:	add	r2, sp, #36	; 0x24
   195a8:	ldr	r3, [r5]
   195ac:	str	r2, [sp, #4]
   195b0:	mov	r2, r7
   195b4:	cmp	r3, #0
   195b8:	blt	195d4 <__assert_fail@plt+0x8428>
   195bc:	bl	110d4 <fcntl64@plt>
   195c0:	subs	r4, r0, #0
   195c4:	blt	1963c <__assert_fail@plt+0x8490>
   195c8:	mov	r3, #1
   195cc:	str	r3, [r5]
   195d0:	b	19500 <__assert_fail@plt+0x8354>
   195d4:	mov	r1, #0
   195d8:	bl	110d4 <fcntl64@plt>
   195dc:	subs	r4, r0, #0
   195e0:	blt	19500 <__assert_fail@plt+0x8354>
   195e4:	ldr	r3, [r5]
   195e8:	cmn	r3, #1
   195ec:	bne	19500 <__assert_fail@plt+0x8354>
   195f0:	mov	r1, #1
   195f4:	mov	r0, r4
   195f8:	bl	110d4 <fcntl64@plt>
   195fc:	subs	r2, r0, #0
   19600:	blt	1961c <__assert_fail@plt+0x8470>
   19604:	orr	r2, r2, #1
   19608:	mov	r1, #2
   1960c:	mov	r0, r4
   19610:	bl	110d4 <fcntl64@plt>
   19614:	cmn	r0, #1
   19618:	bne	19500 <__assert_fail@plt+0x8354>
   1961c:	bl	11068 <__errno_location@plt>
   19620:	mov	r5, r0
   19624:	mov	r0, r4
   19628:	ldr	r6, [r5]
   1962c:	mvn	r4, #0
   19630:	bl	11188 <close@plt>
   19634:	str	r6, [r5]
   19638:	b	19500 <__assert_fail@plt+0x8354>
   1963c:	bl	11068 <__errno_location@plt>
   19640:	ldr	r3, [r0]
   19644:	cmp	r3, #22
   19648:	bne	195c8 <__assert_fail@plt+0x841c>
   1964c:	mov	r2, r7
   19650:	mov	r0, r6
   19654:	mov	r1, #0
   19658:	bl	110d4 <fcntl64@plt>
   1965c:	subs	r4, r0, #0
   19660:	mvnge	r3, #0
   19664:	strge	r3, [r5]
   19668:	bge	195f0 <__assert_fail@plt+0x8444>
   1966c:	b	19500 <__assert_fail@plt+0x8354>
   19670:	push	{r1, r2, r3}
   19674:	push	{lr}		; (str lr, [sp, #-4]!)
   19678:	sub	sp, sp, #8
   1967c:	ldr	r1, [sp, #12]
   19680:	ands	r2, r1, #64	; 0x40
   19684:	bne	196a0 <__assert_fail@plt+0x84f4>
   19688:	bl	10fe4 <open64@plt>
   1968c:	bl	185e8 <__assert_fail@plt+0x743c>
   19690:	add	sp, sp, #8
   19694:	pop	{lr}		; (ldr lr, [sp], #4)
   19698:	add	sp, sp, #12
   1969c:	bx	lr
   196a0:	add	r3, sp, #16
   196a4:	ldr	r2, [sp, #16]
   196a8:	str	r3, [sp, #4]
   196ac:	b	19688 <__assert_fail@plt+0x84dc>
   196b0:	str	r4, [sp, #-8]!
   196b4:	subs	r4, r0, #0
   196b8:	str	lr, [sp, #4]
   196bc:	sub	sp, sp, #8
   196c0:	beq	196dc <__assert_fail@plt+0x8530>
   196c4:	bl	11008 <__freading@plt>
   196c8:	cmp	r0, #0
   196cc:	beq	196dc <__assert_fail@plt+0x8530>
   196d0:	ldr	r3, [r4]
   196d4:	tst	r3, #256	; 0x100
   196d8:	bne	196f4 <__assert_fail@plt+0x8548>
   196dc:	mov	r0, r4
   196e0:	add	sp, sp, #8
   196e4:	ldr	r4, [sp]
   196e8:	ldr	lr, [sp, #4]
   196ec:	add	sp, sp, #8
   196f0:	b	10ef4 <fflush@plt>
   196f4:	mov	r1, #1
   196f8:	mov	r2, #0
   196fc:	mov	r3, #0
   19700:	mov	r0, r4
   19704:	str	r1, [sp]
   19708:	bl	19770 <__assert_fail@plt+0x85c4>
   1970c:	b	196dc <__assert_fail@plt+0x8530>
   19710:	strd	r4, [sp, #-12]!
   19714:	mov	r5, r0
   19718:	str	lr, [sp, #8]
   1971c:	sub	sp, sp, #12
   19720:	bl	11068 <__errno_location@plt>
   19724:	mov	r4, r0
   19728:	mov	r2, #0
   1972c:	ldr	r3, [r4]
   19730:	mov	r0, r5
   19734:	str	r2, [r4]
   19738:	str	r3, [sp]
   1973c:	str	r3, [sp, #4]
   19740:	bl	10f0c <free@plt>
   19744:	ldr	r3, [r4]
   19748:	add	r2, sp, #8
   1974c:	clz	r3, r3
   19750:	lsr	r3, r3, #5
   19754:	add	r3, r2, r3, lsl #2
   19758:	ldr	r3, [r3, #-8]
   1975c:	str	r3, [r4]
   19760:	add	sp, sp, #12
   19764:	ldrd	r4, [sp]
   19768:	add	sp, sp, #8
   1976c:	pop	{pc}		; (ldr pc, [sp], #4)
   19770:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19774:	mov	r4, r0
   19778:	ldr	ip, [r0, #4]
   1977c:	strd	r6, [sp, #8]
   19780:	str	lr, [sp, #20]
   19784:	ldr	lr, [r0, #8]
   19788:	str	r8, [sp, #16]
   1978c:	sub	sp, sp, #8
   19790:	ldr	r5, [sp, #32]
   19794:	cmp	lr, ip
   19798:	beq	197c0 <__assert_fail@plt+0x8614>
   1979c:	mov	r0, r4
   197a0:	str	r5, [sp, #32]
   197a4:	add	sp, sp, #8
   197a8:	ldrd	r4, [sp]
   197ac:	ldrd	r6, [sp, #8]
   197b0:	ldr	r8, [sp, #16]
   197b4:	ldr	lr, [sp, #20]
   197b8:	add	sp, sp, #24
   197bc:	b	110c8 <fseeko64@plt>
   197c0:	ldr	ip, [r0, #16]
   197c4:	ldr	lr, [r0, #20]
   197c8:	cmp	lr, ip
   197cc:	bne	1979c <__assert_fail@plt+0x85f0>
   197d0:	ldr	r8, [r0, #36]	; 0x24
   197d4:	cmp	r8, #0
   197d8:	bne	1979c <__assert_fail@plt+0x85f0>
   197dc:	mov	r6, r2
   197e0:	mov	r7, r3
   197e4:	bl	110a4 <fileno@plt>
   197e8:	mov	r2, r6
   197ec:	mov	r3, r7
   197f0:	str	r5, [sp]
   197f4:	bl	10fa8 <lseek64@plt>
   197f8:	mvn	r3, #0
   197fc:	mvn	r2, #0
   19800:	cmp	r1, r3
   19804:	cmpeq	r0, r2
   19808:	beq	19838 <__assert_fail@plt+0x868c>
   1980c:	ldr	r3, [r4]
   19810:	strd	r0, [r4, #80]	; 0x50
   19814:	bic	r3, r3, #16
   19818:	str	r3, [r4]
   1981c:	mov	r0, r8
   19820:	add	sp, sp, #8
   19824:	ldrd	r4, [sp]
   19828:	ldrd	r6, [sp, #8]
   1982c:	ldr	r8, [sp, #16]
   19830:	add	sp, sp, #20
   19834:	pop	{pc}		; (ldr pc, [sp], #4)
   19838:	mvn	r8, #0
   1983c:	b	1981c <__assert_fail@plt+0x8670>
   19840:	mov	r0, #14
   19844:	str	r4, [sp, #-8]!
   19848:	str	lr, [sp, #4]
   1984c:	bl	110f8 <nl_langinfo@plt>
   19850:	cmp	r0, #0
   19854:	beq	19878 <__assert_fail@plt+0x86cc>
   19858:	ldrb	r2, [r0]
   1985c:	movw	r3, #44148	; 0xac74
   19860:	movt	r3, #1
   19864:	ldr	r4, [sp]
   19868:	add	sp, sp, #4
   1986c:	cmp	r2, #0
   19870:	moveq	r0, r3
   19874:	pop	{pc}		; (ldr pc, [sp], #4)
   19878:	ldr	r4, [sp]
   1987c:	add	sp, sp, #4
   19880:	movw	r0, #44148	; 0xac74
   19884:	movt	r0, #1
   19888:	pop	{pc}		; (ldr pc, [sp], #4)
   1988c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19890:	mov	r5, r2
   19894:	strd	r6, [sp, #8]
   19898:	subs	r6, r0, #0
   1989c:	mov	r7, r1
   198a0:	str	lr, [sp, #16]
   198a4:	sub	sp, sp, #12
   198a8:	addeq	r6, sp, #4
   198ac:	mov	r0, r6
   198b0:	bl	10fcc <mbrtowc@plt>
   198b4:	cmp	r5, #0
   198b8:	cmnne	r0, #3
   198bc:	mov	r4, r0
   198c0:	bhi	198dc <__assert_fail@plt+0x8730>
   198c4:	mov	r0, r4
   198c8:	add	sp, sp, #12
   198cc:	ldrd	r4, [sp]
   198d0:	ldrd	r6, [sp, #8]
   198d4:	add	sp, sp, #16
   198d8:	pop	{pc}		; (ldr pc, [sp], #4)
   198dc:	mov	r0, #0
   198e0:	bl	19940 <__assert_fail@plt+0x8794>
   198e4:	cmp	r0, #0
   198e8:	bne	198c4 <__assert_fail@plt+0x8718>
   198ec:	ldrb	r3, [r7]
   198f0:	mov	r4, #1
   198f4:	str	r3, [r6]
   198f8:	b	198c4 <__assert_fail@plt+0x8718>
   198fc:	umull	r2, r3, r1, r2
   19900:	cmp	r3, #0
   19904:	bne	19910 <__assert_fail@plt+0x8764>
   19908:	mov	r1, r2
   1990c:	b	191d4 <__assert_fail@plt+0x8028>
   19910:	str	r4, [sp, #-8]!
   19914:	str	lr, [sp, #4]
   19918:	bl	11068 <__errno_location@plt>
   1991c:	mov	r3, #12
   19920:	ldr	r4, [sp]
   19924:	add	sp, sp, #4
   19928:	str	r3, [r0]
   1992c:	mov	r0, #0
   19930:	pop	{pc}		; (ldr pc, [sp], #4)
   19934:	mov	r2, #3
   19938:	mov	r1, #0
   1993c:	b	19488 <__assert_fail@plt+0x82dc>
   19940:	push	{lr}		; (str lr, [sp, #-4]!)
   19944:	sub	sp, sp, #268	; 0x10c
   19948:	movw	r2, #257	; 0x101
   1994c:	add	r1, sp, #4
   19950:	bl	19998 <__assert_fail@plt+0x87ec>
   19954:	cmp	r0, #0
   19958:	movne	r0, #0
   1995c:	bne	19990 <__assert_fail@plt+0x87e4>
   19960:	movw	r1, #44156	; 0xac7c
   19964:	movt	r1, #1
   19968:	add	r0, sp, #4
   1996c:	bl	10ee8 <strcmp@plt>
   19970:	cmp	r0, #0
   19974:	beq	19990 <__assert_fail@plt+0x87e4>
   19978:	add	r0, sp, #4
   1997c:	movw	r1, #44160	; 0xac80
   19980:	movt	r1, #1
   19984:	bl	10ee8 <strcmp@plt>
   19988:	adds	r0, r0, #0
   1998c:	movne	r0, #1
   19990:	add	sp, sp, #268	; 0x10c
   19994:	pop	{pc}		; (ldr pc, [sp], #4)
   19998:	strd	r4, [sp, #-16]!
   1999c:	mov	r5, r1
   199a0:	mov	r1, #0
   199a4:	mov	r4, r2
   199a8:	str	r6, [sp, #8]
   199ac:	str	lr, [sp, #12]
   199b0:	bl	110e0 <setlocale@plt>
   199b4:	subs	r6, r0, #0
   199b8:	beq	19a38 <__assert_fail@plt+0x888c>
   199bc:	bl	11044 <strlen@plt>
   199c0:	cmp	r4, r0
   199c4:	bhi	199e4 <__assert_fail@plt+0x8838>
   199c8:	cmp	r4, #0
   199cc:	moveq	r0, #34	; 0x22
   199d0:	bne	19a08 <__assert_fail@plt+0x885c>
   199d4:	ldrd	r4, [sp]
   199d8:	ldr	r6, [sp, #8]
   199dc:	add	sp, sp, #12
   199e0:	pop	{pc}		; (ldr pc, [sp], #4)
   199e4:	add	r2, r0, #1
   199e8:	mov	r1, r6
   199ec:	mov	r0, r5
   199f0:	bl	10f24 <memcpy@plt>
   199f4:	ldrd	r4, [sp]
   199f8:	mov	r0, #0
   199fc:	ldr	r6, [sp, #8]
   19a00:	add	sp, sp, #12
   19a04:	pop	{pc}		; (ldr pc, [sp], #4)
   19a08:	sub	r4, r4, #1
   19a0c:	mov	r1, r6
   19a10:	mov	r2, r4
   19a14:	mov	r0, r5
   19a18:	bl	10f24 <memcpy@plt>
   19a1c:	mov	r3, #0
   19a20:	mov	r0, #34	; 0x22
   19a24:	strb	r3, [r5, r4]
   19a28:	ldrd	r4, [sp]
   19a2c:	ldr	r6, [sp, #8]
   19a30:	add	sp, sp, #12
   19a34:	pop	{pc}		; (ldr pc, [sp], #4)
   19a38:	cmp	r4, #0
   19a3c:	mov	r0, #22
   19a40:	strbne	r6, [r5]
   19a44:	ldrd	r4, [sp]
   19a48:	ldr	r6, [sp, #8]
   19a4c:	add	sp, sp, #12
   19a50:	pop	{pc}		; (ldr pc, [sp], #4)
   19a54:	mov	r1, #0
   19a58:	b	110e0 <setlocale@plt>
   19a5c:	cmp	r3, #0
   19a60:	cmpeq	r2, #0
   19a64:	bne	19a7c <__assert_fail@plt+0x88d0>
   19a68:	cmp	r1, #0
   19a6c:	cmpeq	r0, #0
   19a70:	mvnne	r1, #0
   19a74:	mvnne	r0, #0
   19a78:	b	19a98 <__assert_fail@plt+0x88ec>
   19a7c:	sub	sp, sp, #8
   19a80:	push	{sp, lr}
   19a84:	bl	19aa8 <__assert_fail@plt+0x88fc>
   19a88:	ldr	lr, [sp, #4]
   19a8c:	add	sp, sp, #8
   19a90:	pop	{r2, r3}
   19a94:	bx	lr
   19a98:	push	{r1, lr}
   19a9c:	mov	r0, #8
   19aa0:	bl	10edc <raise@plt>
   19aa4:	pop	{r1, pc}
   19aa8:	cmp	r1, r3
   19aac:	cmpeq	r0, r2
   19ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ab4:	mov	r4, r0
   19ab8:	movcc	r0, #0
   19abc:	mov	r5, r1
   19ac0:	ldr	lr, [sp, #36]	; 0x24
   19ac4:	movcc	r1, r0
   19ac8:	bcc	19bc4 <__assert_fail@plt+0x8a18>
   19acc:	cmp	r3, #0
   19ad0:	clzeq	ip, r2
   19ad4:	clzne	ip, r3
   19ad8:	addeq	ip, ip, #32
   19adc:	cmp	r5, #0
   19ae0:	clzeq	r1, r4
   19ae4:	addeq	r1, r1, #32
   19ae8:	clzne	r1, r5
   19aec:	sub	ip, ip, r1
   19af0:	sub	sl, ip, #32
   19af4:	lsl	r9, r3, ip
   19af8:	rsb	fp, ip, #32
   19afc:	orr	r9, r9, r2, lsl sl
   19b00:	orr	r9, r9, r2, lsr fp
   19b04:	lsl	r8, r2, ip
   19b08:	cmp	r5, r9
   19b0c:	cmpeq	r4, r8
   19b10:	movcc	r0, #0
   19b14:	movcc	r1, r0
   19b18:	bcc	19b34 <__assert_fail@plt+0x8988>
   19b1c:	mov	r0, #1
   19b20:	subs	r4, r4, r8
   19b24:	lsl	r1, r0, sl
   19b28:	orr	r1, r1, r0, lsr fp
   19b2c:	lsl	r0, r0, ip
   19b30:	sbc	r5, r5, r9
   19b34:	cmp	ip, #0
   19b38:	beq	19bc4 <__assert_fail@plt+0x8a18>
   19b3c:	lsr	r6, r8, #1
   19b40:	orr	r6, r6, r9, lsl #31
   19b44:	lsr	r7, r9, #1
   19b48:	mov	r2, ip
   19b4c:	b	19b70 <__assert_fail@plt+0x89c4>
   19b50:	subs	r3, r4, r6
   19b54:	sbc	r8, r5, r7
   19b58:	adds	r3, r3, r3
   19b5c:	adc	r8, r8, r8
   19b60:	adds	r4, r3, #1
   19b64:	adc	r5, r8, #0
   19b68:	subs	r2, r2, #1
   19b6c:	beq	19b8c <__assert_fail@plt+0x89e0>
   19b70:	cmp	r5, r7
   19b74:	cmpeq	r4, r6
   19b78:	bcs	19b50 <__assert_fail@plt+0x89a4>
   19b7c:	adds	r4, r4, r4
   19b80:	adc	r5, r5, r5
   19b84:	subs	r2, r2, #1
   19b88:	bne	19b70 <__assert_fail@plt+0x89c4>
   19b8c:	lsr	r3, r4, ip
   19b90:	orr	r3, r3, r5, lsl fp
   19b94:	lsr	r2, r5, ip
   19b98:	orr	r3, r3, r5, lsr sl
   19b9c:	adds	r0, r0, r4
   19ba0:	mov	r4, r3
   19ba4:	lsl	r3, r2, ip
   19ba8:	orr	r3, r3, r4, lsl sl
   19bac:	lsl	ip, r4, ip
   19bb0:	orr	r3, r3, r4, lsr fp
   19bb4:	adc	r1, r1, r5
   19bb8:	subs	r0, r0, ip
   19bbc:	mov	r5, r2
   19bc0:	sbc	r1, r1, r3
   19bc4:	cmp	lr, #0
   19bc8:	strdne	r4, [lr]
   19bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19bd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19bd4:	mov	r7, r0
   19bd8:	ldr	r6, [pc, #72]	; 19c28 <__assert_fail@plt+0x8a7c>
   19bdc:	ldr	r5, [pc, #72]	; 19c2c <__assert_fail@plt+0x8a80>
   19be0:	add	r6, pc, r6
   19be4:	add	r5, pc, r5
   19be8:	sub	r6, r6, r5
   19bec:	mov	r8, r1
   19bf0:	mov	r9, r2
   19bf4:	bl	10e98 <fstatfs64@plt-0x20>
   19bf8:	asrs	r6, r6, #2
   19bfc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c00:	mov	r4, #0
   19c04:	add	r4, r4, #1
   19c08:	ldr	r3, [r5], #4
   19c0c:	mov	r2, r9
   19c10:	mov	r1, r8
   19c14:	mov	r0, r7
   19c18:	blx	r3
   19c1c:	cmp	r6, r4
   19c20:	bne	19c04 <__assert_fail@plt+0x8a58>
   19c24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c28:	andeq	r1, r1, ip, lsr #6
   19c2c:	andeq	r1, r1, r4, lsr #6
   19c30:	bx	lr
   19c34:	ldr	r3, [pc, #12]	; 19c48 <__assert_fail@plt+0x8a9c>
   19c38:	mov	r1, #0
   19c3c:	add	r3, pc, r3
   19c40:	ldr	r2, [r3]
   19c44:	b	11080 <__cxa_atexit@plt>
   19c48:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

00019c4c <.fini>:
   19c4c:	push	{r3, lr}
   19c50:	pop	{r3, pc}
