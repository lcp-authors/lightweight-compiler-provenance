
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

0001100c <.init>:
   1100c:	push	{r3, lr}
   11010:	bl	118c0 <__assert_fail@plt+0x534>
   11014:	pop	{r3, pc}

Disassembly of section .plt:

00011018 <fstatfs64@plt-0x14>:
   11018:	push	{lr}		; (str lr, [sp, #-4]!)
   1101c:	ldr	lr, [pc, #4]	; 11028 <fstatfs64@plt-0x4>
   11020:	add	lr, pc, lr
   11024:	ldr	pc, [lr, #8]!
   11028:	ldrdeq	lr, [r1], -r8

0001102c <fstatfs64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #122880	; 0x1e000
   11034:	ldr	pc, [ip, #4056]!	; 0xfd8

00011038 <calloc@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #122880	; 0x1e000
   11040:	ldr	pc, [ip, #4048]!	; 0xfd0

00011044 <endgrent@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #122880	; 0x1e000
   1104c:	ldr	pc, [ip, #4040]!	; 0xfc8

00011050 <fputs_unlocked@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #122880	; 0x1e000
   11058:	ldr	pc, [ip, #4032]!	; 0xfc0

0001105c <raise@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #122880	; 0x1e000
   11064:	ldr	pc, [ip, #4024]!	; 0xfb8

00011068 <getpwnam@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #122880	; 0x1e000
   11070:	ldr	pc, [ip, #4016]!	; 0xfb0

00011074 <strcmp@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #122880	; 0x1e000
   1107c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011080 <getpwuid@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #122880	; 0x1e000
   11088:	ldr	pc, [ip, #4000]!	; 0xfa0

0001108c <fflush@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #122880	; 0x1e000
   11094:	ldr	pc, [ip, #3992]!	; 0xf98

00011098 <memmove@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #122880	; 0x1e000
   110a0:	ldr	pc, [ip, #3984]!	; 0xf90

000110a4 <free@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #122880	; 0x1e000
   110ac:	ldr	pc, [ip, #3976]!	; 0xf88

000110b0 <__openat64_2@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #122880	; 0x1e000
   110b8:	ldr	pc, [ip, #3968]!	; 0xf80

000110bc <_exit@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #122880	; 0x1e000
   110c4:	ldr	pc, [ip, #3960]!	; 0xf78

000110c8 <memcpy@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #122880	; 0x1e000
   110d0:	ldr	pc, [ip, #3952]!	; 0xf70

000110d4 <mbsinit@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #122880	; 0x1e000
   110dc:	ldr	pc, [ip, #3944]!	; 0xf68

000110e0 <memcmp@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #122880	; 0x1e000
   110e8:	ldr	pc, [ip, #3936]!	; 0xf60

000110ec <stpcpy@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #122880	; 0x1e000
   110f4:	ldr	pc, [ip, #3928]!	; 0xf58

000110f8 <fputc_unlocked@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #122880	; 0x1e000
   11100:	ldr	pc, [ip, #3920]!	; 0xf50

00011104 <dcgettext@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #122880	; 0x1e000
   1110c:	ldr	pc, [ip, #3912]!	; 0xf48

00011110 <realloc@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #122880	; 0x1e000
   11118:	ldr	pc, [ip, #3904]!	; 0xf40

0001111c <textdomain@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #122880	; 0x1e000
   11124:	ldr	pc, [ip, #3896]!	; 0xf38

00011128 <__fxstatat64@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #122880	; 0x1e000
   11130:	ldr	pc, [ip, #3888]!	; 0xf30

00011134 <iswprint@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #122880	; 0x1e000
   1113c:	ldr	pc, [ip, #3880]!	; 0xf28

00011140 <__fxstat64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #122880	; 0x1e000
   11148:	ldr	pc, [ip, #3872]!	; 0xf20

0001114c <fwrite@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #122880	; 0x1e000
   11154:	ldr	pc, [ip, #3864]!	; 0xf18

00011158 <lseek64@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #122880	; 0x1e000
   11160:	ldr	pc, [ip, #3856]!	; 0xf10

00011164 <__ctype_get_mb_cur_max@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #122880	; 0x1e000
   1116c:	ldr	pc, [ip, #3848]!	; 0xf08

00011170 <strcpy@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #122880	; 0x1e000
   11178:	ldr	pc, [ip, #3840]!	; 0xf00

0001117c <__fpending@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #122880	; 0x1e000
   11184:	ldr	pc, [ip, #3832]!	; 0xef8

00011188 <mbrtowc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #122880	; 0x1e000
   11190:	ldr	pc, [ip, #3824]!	; 0xef0

00011194 <error@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #122880	; 0x1e000
   1119c:	ldr	pc, [ip, #3816]!	; 0xee8

000111a0 <open64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #122880	; 0x1e000
   111a8:	ldr	pc, [ip, #3808]!	; 0xee0

000111ac <malloc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #122880	; 0x1e000
   111b4:	ldr	pc, [ip, #3800]!	; 0xed8

000111b8 <__libc_start_main@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #122880	; 0x1e000
   111c0:	ldr	pc, [ip, #3792]!	; 0xed0

000111c4 <__freading@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #122880	; 0x1e000
   111cc:	ldr	pc, [ip, #3784]!	; 0xec8

000111d0 <__gmon_start__@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #122880	; 0x1e000
   111d8:	ldr	pc, [ip, #3776]!	; 0xec0

000111dc <getopt_long@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #122880	; 0x1e000
   111e4:	ldr	pc, [ip, #3768]!	; 0xeb8

000111e8 <__ctype_b_loc@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #122880	; 0x1e000
   111f0:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f4 <exit@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #122880	; 0x1e000
   111fc:	ldr	pc, [ip, #3752]!	; 0xea8

00011200 <strtoul@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #122880	; 0x1e000
   11208:	ldr	pc, [ip, #3744]!	; 0xea0

0001120c <strlen@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #122880	; 0x1e000
   11214:	ldr	pc, [ip, #3736]!	; 0xe98

00011218 <strchr@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #122880	; 0x1e000
   11220:	ldr	pc, [ip, #3728]!	; 0xe90

00011224 <openat64@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #122880	; 0x1e000
   1122c:	ldr	pc, [ip, #3720]!	; 0xe88

00011230 <fchown@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #122880	; 0x1e000
   11238:	ldr	pc, [ip, #3712]!	; 0xe80

0001123c <__errno_location@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #122880	; 0x1e000
   11244:	ldr	pc, [ip, #3704]!	; 0xe78

00011248 <__cxa_atexit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #122880	; 0x1e000
   11250:	ldr	pc, [ip, #3696]!	; 0xe70

00011254 <memset@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #122880	; 0x1e000
   1125c:	ldr	pc, [ip, #3688]!	; 0xe68

00011260 <__printf_chk@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #122880	; 0x1e000
   11268:	ldr	pc, [ip, #3680]!	; 0xe60

0001126c <fileno@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #122880	; 0x1e000
   11274:	ldr	pc, [ip, #3672]!	; 0xe58

00011278 <__fprintf_chk@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #122880	; 0x1e000
   11280:	ldr	pc, [ip, #3664]!	; 0xe50

00011284 <fclose@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #122880	; 0x1e000
   1128c:	ldr	pc, [ip, #3656]!	; 0xe48

00011290 <fseeko64@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #122880	; 0x1e000
   11298:	ldr	pc, [ip, #3648]!	; 0xe40

0001129c <fcntl64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #122880	; 0x1e000
   112a4:	ldr	pc, [ip, #3640]!	; 0xe38

000112a8 <setlocale@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #122880	; 0x1e000
   112b0:	ldr	pc, [ip, #3632]!	; 0xe30

000112b4 <endpwent@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #122880	; 0x1e000
   112bc:	ldr	pc, [ip, #3624]!	; 0xe28

000112c0 <strrchr@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #122880	; 0x1e000
   112c8:	ldr	pc, [ip, #3616]!	; 0xe20

000112cc <nl_langinfo@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #122880	; 0x1e000
   112d4:	ldr	pc, [ip, #3608]!	; 0xe18

000112d8 <readdir64@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #122880	; 0x1e000
   112e0:	ldr	pc, [ip, #3600]!	; 0xe10

000112e4 <fdopendir@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #122880	; 0x1e000
   112ec:	ldr	pc, [ip, #3592]!	; 0xe08

000112f0 <dirfd@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #122880	; 0x1e000
   112f8:	ldr	pc, [ip, #3584]!	; 0xe00

000112fc <fchdir@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #122880	; 0x1e000
   11304:	ldr	pc, [ip, #3576]!	; 0xdf8

00011308 <qsort@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #122880	; 0x1e000
   11310:	ldr	pc, [ip, #3568]!	; 0xdf0

00011314 <fchownat@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #122880	; 0x1e000
   1131c:	ldr	pc, [ip, #3560]!	; 0xde8

00011320 <bindtextdomain@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #122880	; 0x1e000
   11328:	ldr	pc, [ip, #3552]!	; 0xde0

0001132c <__xstat64@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #122880	; 0x1e000
   11334:	ldr	pc, [ip, #3544]!	; 0xdd8

00011338 <strncmp@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #122880	; 0x1e000
   11340:	ldr	pc, [ip, #3536]!	; 0xdd0

00011344 <abort@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #122880	; 0x1e000
   1134c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011350 <close@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #122880	; 0x1e000
   11358:	ldr	pc, [ip, #3520]!	; 0xdc0

0001135c <__lxstat64@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #122880	; 0x1e000
   11364:	ldr	pc, [ip, #3512]!	; 0xdb8

00011368 <closedir@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #122880	; 0x1e000
   11370:	ldr	pc, [ip, #3504]!	; 0xdb0

00011374 <getgrgid@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #122880	; 0x1e000
   1137c:	ldr	pc, [ip, #3496]!	; 0xda8

00011380 <getgrnam@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #122880	; 0x1e000
   11388:	ldr	pc, [ip, #3488]!	; 0xda0

0001138c <__assert_fail@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #122880	; 0x1e000
   11394:	ldr	pc, [ip, #3480]!	; 0xd98

Disassembly of section .text:

00011398 <.text>:
   11398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1139c:	sub	sp, sp, #172	; 0xac
   113a0:	mvn	r5, #0
   113a4:	mov	r7, r0
   113a8:	ldr	r0, [r1]
   113ac:	mov	r6, r1
   113b0:	str	r5, [sp, #24]
   113b4:	str	r5, [sp, #28]
   113b8:	str	r5, [sp, #32]
   113bc:	str	r5, [sp, #36]	; 0x24
   113c0:	bl	16f40 <__assert_fail@plt+0x5bb4>
   113c4:	ldr	r1, [pc, #1112]	; 11824 <__assert_fail@plt+0x498>
   113c8:	mov	r0, #6
   113cc:	bl	112a8 <setlocale@plt>
   113d0:	ldr	r1, [pc, #1104]	; 11828 <__assert_fail@plt+0x49c>
   113d4:	ldr	r0, [pc, #1104]	; 1182c <__assert_fail@plt+0x4a0>
   113d8:	bl	11320 <bindtextdomain@plt>
   113dc:	ldr	r0, [pc, #1096]	; 1182c <__assert_fail@plt+0x4a0>
   113e0:	bl	1111c <textdomain@plt>
   113e4:	ldr	r9, [pc, #1092]	; 11830 <__assert_fail@plt+0x4a4>
   113e8:	ldr	r0, [pc, #1092]	; 11834 <__assert_fail@plt+0x4a8>
   113ec:	ldr	r8, [pc, #1092]	; 11838 <__assert_fail@plt+0x4ac>
   113f0:	ldr	fp, [pc, #1092]	; 1183c <__assert_fail@plt+0x4b0>
   113f4:	bl	1dbb4 <__assert_fail@plt+0xc828>
   113f8:	mov	sl, #16
   113fc:	add	r0, sp, #40	; 0x28
   11400:	bl	11da0 <__assert_fail@plt+0xa14>
   11404:	mov	r3, #0
   11408:	str	r3, [sp, #20]
   1140c:	mov	r4, #0
   11410:	str	r4, [sp]
   11414:	mov	r3, r9
   11418:	mov	r2, r8
   1141c:	mov	r1, r6
   11420:	mov	r0, r7
   11424:	bl	111dc <getopt_long@plt>
   11428:	cmn	r0, #1
   1142c:	beq	115bc <__assert_fail@plt+0x230>
   11430:	cmp	r0, #102	; 0x66
   11434:	beq	1154c <__assert_fail@plt+0x1c0>
   11438:	bgt	11498 <__assert_fail@plt+0x10c>
   1143c:	cmp	r0, #76	; 0x4c
   11440:	beq	1153c <__assert_fail@plt+0x1b0>
   11444:	bgt	114c8 <__assert_fail@plt+0x13c>
   11448:	cmn	r0, #2
   1144c:	beq	11544 <__assert_fail@plt+0x1b8>
   11450:	cmp	r0, #72	; 0x48
   11454:	beq	11510 <__assert_fail@plt+0x184>
   11458:	cmn	r0, #3
   1145c:	bne	114e0 <__assert_fail@plt+0x154>
   11460:	ldr	r3, [pc, #984]	; 11840 <__assert_fail@plt+0x4b4>
   11464:	ldr	r0, [pc, #984]	; 11844 <__assert_fail@plt+0x4b8>
   11468:	ldr	r1, [pc, #984]	; 11848 <__assert_fail@plt+0x4bc>
   1146c:	ldr	r2, [pc, #984]	; 1184c <__assert_fail@plt+0x4c0>
   11470:	str	r4, [sp, #8]
   11474:	ldr	r0, [r0]
   11478:	ldr	r3, [r3]
   1147c:	str	r1, [sp, #4]
   11480:	str	r2, [sp]
   11484:	ldr	r1, [pc, #964]	; 11850 <__assert_fail@plt+0x4c4>
   11488:	ldr	r2, [pc, #964]	; 11854 <__assert_fail@plt+0x4c8>
   1148c:	bl	1bec8 <__assert_fail@plt+0xab3c>
   11490:	mov	r0, r4
   11494:	bl	111f4 <exit@plt>
   11498:	ldr	r3, [pc, #952]	; 11858 <__assert_fail@plt+0x4cc>
   1149c:	cmp	r0, r3
   114a0:	beq	11578 <__assert_fail@plt+0x1ec>
   114a4:	bgt	114e8 <__assert_fail@plt+0x15c>
   114a8:	cmp	r0, #118	; 0x76
   114ac:	beq	11570 <__assert_fail@plt+0x1e4>
   114b0:	cmp	r0, #256	; 0x100
   114b4:	beq	11520 <__assert_fail@plt+0x194>
   114b8:	cmp	r0, #104	; 0x68
   114bc:	bne	114e0 <__assert_fail@plt+0x154>
   114c0:	mov	r5, r4
   114c4:	b	1140c <__assert_fail@plt+0x80>
   114c8:	cmp	r0, #82	; 0x52
   114cc:	beq	11558 <__assert_fail@plt+0x1cc>
   114d0:	cmp	r0, #99	; 0x63
   114d4:	beq	11528 <__assert_fail@plt+0x19c>
   114d8:	cmp	r0, #80	; 0x50
   114dc:	beq	11534 <__assert_fail@plt+0x1a8>
   114e0:	mov	r0, #1
   114e4:	bl	119ac <__assert_fail@plt+0x620>
   114e8:	ldr	r3, [pc, #876]	; 1185c <__assert_fail@plt+0x4d0>
   114ec:	cmp	r0, r3
   114f0:	beq	11564 <__assert_fail@plt+0x1d8>
   114f4:	blt	11518 <__assert_fail@plt+0x18c>
   114f8:	cmp	r0, #260	; 0x104
   114fc:	bne	114e0 <__assert_fail@plt+0x154>
   11500:	ldr	r2, [pc, #856]	; 11860 <__assert_fail@plt+0x4d4>
   11504:	ldr	r3, [fp]
   11508:	str	r3, [r2]
   1150c:	b	1140c <__assert_fail@plt+0x80>
   11510:	mov	sl, #17
   11514:	b	1140c <__assert_fail@plt+0x80>
   11518:	str	r4, [sp, #20]
   1151c:	b	1140c <__assert_fail@plt+0x80>
   11520:	mov	r5, #1
   11524:	b	1140c <__assert_fail@plt+0x80>
   11528:	mov	r3, #1
   1152c:	str	r3, [sp, #40]	; 0x28
   11530:	b	1140c <__assert_fail@plt+0x80>
   11534:	mov	sl, #16
   11538:	b	1140c <__assert_fail@plt+0x80>
   1153c:	mov	sl, #2
   11540:	b	1140c <__assert_fail@plt+0x80>
   11544:	mov	r0, r4
   11548:	bl	119ac <__assert_fail@plt+0x620>
   1154c:	mov	r3, #1
   11550:	strb	r3, [sp, #53]	; 0x35
   11554:	b	1140c <__assert_fail@plt+0x80>
   11558:	mov	r3, #1
   1155c:	strb	r3, [sp, #44]	; 0x2c
   11560:	b	1140c <__assert_fail@plt+0x80>
   11564:	mov	r3, #1
   11568:	str	r3, [sp, #20]
   1156c:	b	1140c <__assert_fail@plt+0x80>
   11570:	str	r4, [sp, #40]	; 0x28
   11574:	b	1140c <__assert_fail@plt+0x80>
   11578:	str	r4, [sp]
   1157c:	mov	r3, r4
   11580:	add	r2, sp, #36	; 0x24
   11584:	add	r1, sp, #32
   11588:	ldr	r0, [fp]
   1158c:	bl	1b018 <__assert_fail@plt+0x9c8c>
   11590:	cmp	r0, #0
   11594:	beq	1140c <__assert_fail@plt+0x80>
   11598:	str	r0, [sp, #20]
   1159c:	ldr	r0, [fp]
   115a0:	bl	1ae0c <__assert_fail@plt+0x9a80>
   115a4:	ldr	r3, [sp, #20]
   115a8:	str	r0, [sp]
   115ac:	mov	r1, r4
   115b0:	ldr	r2, [pc, #684]	; 11864 <__assert_fail@plt+0x4d8>
   115b4:	mov	r0, #1
   115b8:	bl	11194 <error@plt>
   115bc:	ldrb	r3, [sp, #44]	; 0x2c
   115c0:	cmp	r3, r4
   115c4:	bne	11650 <__assert_fail@plt+0x2c4>
   115c8:	mov	sl, #16
   115cc:	ldr	r3, [pc, #652]	; 11860 <__assert_fail@plt+0x4d4>
   115d0:	ldr	r8, [pc, #656]	; 11868 <__assert_fail@plt+0x4dc>
   115d4:	adds	r5, r5, #0
   115d8:	ldr	r4, [r3]
   115dc:	ldr	r3, [r8]
   115e0:	movne	r5, #1
   115e4:	cmp	r4, #0
   115e8:	strb	r5, [sp, #52]	; 0x34
   115ec:	sub	r2, r7, r3
   115f0:	beq	11758 <__assert_fail@plt+0x3cc>
   115f4:	cmp	r2, #0
   115f8:	ble	11684 <__assert_fail@plt+0x2f8>
   115fc:	add	r2, sp, #64	; 0x40
   11600:	mov	r1, r4
   11604:	mov	r0, #3
   11608:	bl	1132c <__xstat64@plt>
   1160c:	cmp	r0, #0
   11610:	beq	116e4 <__assert_fail@plt+0x358>
   11614:	bl	1123c <__errno_location@plt>
   11618:	mov	r2, #5
   1161c:	ldr	r1, [pc, #584]	; 1186c <__assert_fail@plt+0x4e0>
   11620:	ldr	r5, [r0]
   11624:	mov	r0, #0
   11628:	bl	11104 <dcgettext@plt>
   1162c:	mov	r1, r4
   11630:	mov	r6, r0
   11634:	mov	r0, #4
   11638:	bl	1949c <__assert_fail@plt+0x8110>
   1163c:	mov	r2, r6
   11640:	mov	r1, r5
   11644:	mov	r3, r0
   11648:	mov	r0, #1
   1164c:	bl	11194 <error@plt>
   11650:	cmp	sl, #16
   11654:	bne	115cc <__assert_fail@plt+0x240>
   11658:	cmp	r5, #1
   1165c:	movne	r5, r4
   11660:	bne	115cc <__assert_fail@plt+0x240>
   11664:	mov	r2, #5
   11668:	ldr	r1, [pc, #512]	; 11870 <__assert_fail@plt+0x4e4>
   1166c:	mov	r0, r4
   11670:	bl	11104 <dcgettext@plt>
   11674:	mov	r1, r4
   11678:	mov	r2, r0
   1167c:	mov	r0, r5
   11680:	bl	11194 <error@plt>
   11684:	cmp	r7, r3
   11688:	mov	r2, #5
   1168c:	bgt	116b0 <__assert_fail@plt+0x324>
   11690:	ldr	r1, [pc, #476]	; 11874 <__assert_fail@plt+0x4e8>
   11694:	mov	r0, #0
   11698:	bl	11104 <dcgettext@plt>
   1169c:	mov	r1, #0
   116a0:	mov	r2, r0
   116a4:	mov	r0, r1
   116a8:	bl	11194 <error@plt>
   116ac:	b	114e0 <__assert_fail@plt+0x154>
   116b0:	ldr	r1, [pc, #448]	; 11878 <__assert_fail@plt+0x4ec>
   116b4:	mov	r0, #0
   116b8:	bl	11104 <dcgettext@plt>
   116bc:	sub	r7, r7, #-1073741823	; 0xc0000001
   116c0:	mov	r4, r0
   116c4:	ldr	r0, [r6, r7, lsl #2]
   116c8:	bl	1ae0c <__assert_fail@plt+0x9a80>
   116cc:	mov	r1, #0
   116d0:	mov	r2, r4
   116d4:	mov	r3, r0
   116d8:	mov	r0, r1
   116dc:	bl	11194 <error@plt>
   116e0:	b	114e0 <__assert_fail@plt+0x154>
   116e4:	ldr	r3, [sp, #88]	; 0x58
   116e8:	ldr	r2, [sp, #92]	; 0x5c
   116ec:	mov	r0, r3
   116f0:	str	r3, [sp, #24]
   116f4:	str	r2, [sp, #28]
   116f8:	bl	11e28 <__assert_fail@plt+0xa9c>
   116fc:	str	r0, [sp, #56]	; 0x38
   11700:	ldr	r0, [sp, #92]	; 0x5c
   11704:	bl	11de8 <__assert_fail@plt+0xa5c>
   11708:	str	r0, [sp, #60]	; 0x3c
   1170c:	ldrb	r3, [sp, #44]	; 0x2c
   11710:	ldr	r2, [sp, #20]
   11714:	tst	r2, r3
   11718:	bne	11798 <__assert_fail@plt+0x40c>
   1171c:	ldr	r0, [r8]
   11720:	ldr	r2, [sp, #36]	; 0x24
   11724:	ldr	r3, [sp, #32]
   11728:	add	r1, sp, #40	; 0x28
   1172c:	str	r1, [sp, #8]
   11730:	str	r2, [sp, #4]
   11734:	str	r3, [sp]
   11738:	add	r0, r6, r0, lsl #2
   1173c:	orr	r1, sl, #1024	; 0x400
   11740:	ldr	r3, [sp, #28]
   11744:	ldr	r2, [sp, #24]
   11748:	bl	11e68 <__assert_fail@plt+0xadc>
   1174c:	eor	r0, r0, #1
   11750:	uxtb	r0, r0
   11754:	bl	111f4 <exit@plt>
   11758:	cmp	r2, #1
   1175c:	ble	11684 <__assert_fail@plt+0x2f8>
   11760:	add	r2, sp, #60	; 0x3c
   11764:	ldr	r0, [r6, r3, lsl #2]
   11768:	add	r1, sp, #24
   1176c:	str	r2, [sp]
   11770:	add	r3, sp, #56	; 0x38
   11774:	add	r2, sp, #28
   11778:	bl	1b018 <__assert_fail@plt+0x9c8c>
   1177c:	subs	r5, r0, #0
   11780:	beq	117ec <__assert_fail@plt+0x460>
   11784:	ldr	r3, [r8]
   11788:	ldr	r0, [r6, r3, lsl #2]
   1178c:	bl	1ae0c <__assert_fail@plt+0x9a80>
   11790:	mov	r3, r5
   11794:	b	115a8 <__assert_fail@plt+0x21c>
   11798:	ldr	r0, [pc, #220]	; 1187c <__assert_fail@plt+0x4f0>
   1179c:	bl	1af8c <__assert_fail@plt+0x9c00>
   117a0:	cmp	r0, #0
   117a4:	mov	r4, r0
   117a8:	str	r0, [sp, #48]	; 0x30
   117ac:	bne	1171c <__assert_fail@plt+0x390>
   117b0:	bl	1123c <__errno_location@plt>
   117b4:	mov	r2, #5
   117b8:	ldr	r1, [pc, #172]	; 1186c <__assert_fail@plt+0x4e0>
   117bc:	ldr	r5, [r0]
   117c0:	mov	r0, r4
   117c4:	bl	11104 <dcgettext@plt>
   117c8:	ldr	r1, [pc, #176]	; 11880 <__assert_fail@plt+0x4f4>
   117cc:	mov	r4, r0
   117d0:	mov	r0, #4
   117d4:	bl	1949c <__assert_fail@plt+0x8110>
   117d8:	mov	r2, r4
   117dc:	mov	r1, r5
   117e0:	mov	r3, r0
   117e4:	mov	r0, #1
   117e8:	bl	11194 <error@plt>
   117ec:	ldr	r3, [sp, #56]	; 0x38
   117f0:	cmp	r3, #0
   117f4:	beq	11808 <__assert_fail@plt+0x47c>
   117f8:	ldr	r3, [r8]
   117fc:	add	r3, r3, #1
   11800:	str	r3, [r8]
   11804:	b	1170c <__assert_fail@plt+0x380>
   11808:	ldr	r3, [sp, #60]	; 0x3c
   1180c:	cmp	r3, #0
   11810:	beq	117f8 <__assert_fail@plt+0x46c>
   11814:	ldr	r0, [pc, #8]	; 11824 <__assert_fail@plt+0x498>
   11818:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1181c:	str	r0, [sp, #56]	; 0x38
   11820:	b	117f8 <__assert_fail@plt+0x46c>
   11824:	andeq	lr, r1, ip, lsr #9
   11828:	muleq	r1, r0, r7
   1182c:	andeq	lr, r1, r8, ror #13
   11830:	andeq	sp, r1, r0, lsl ip
   11834:	ldrdeq	r2, [r1], -r8
   11838:	ldrdeq	lr, [r1], -r0
   1183c:	andeq	r0, r3, r0, lsr #3
   11840:	andeq	r0, r3, ip, lsr r1
   11844:	muleq	r3, ip, r1
   11848:			; <UNDEFINED> instruction: 0x0001e7b0
   1184c:	andeq	lr, r1, r0, asr #15
   11850:	strdeq	sp, [r1], -r0
   11854:	andeq	lr, r1, r4, ror #13
   11858:	andeq	r0, r0, r1, lsl #2
   1185c:	andeq	r0, r0, r3, lsl #2
   11860:	andeq	r0, r3, r8, lsr #3
   11864:	andeq	lr, r1, r8, lsr #15
   11868:	muleq	r3, r0, r1
   1186c:	andeq	lr, r1, r4, lsr r8
   11870:	ldrdeq	lr, [r1], -ip
   11874:	andeq	lr, r1, r8, lsl #16
   11878:	andeq	lr, r1, r8, lsl r8
   1187c:			; <UNDEFINED> instruction: 0x000301b0
   11880:	andeq	lr, r1, r4, asr r8
   11884:	mov	fp, #0
   11888:	mov	lr, #0
   1188c:	pop	{r1}		; (ldr r1, [sp], #4)
   11890:	mov	r2, sp
   11894:	push	{r2}		; (str r2, [sp, #-4]!)
   11898:	push	{r0}		; (str r0, [sp, #-4]!)
   1189c:	ldr	ip, [pc, #16]	; 118b4 <__assert_fail@plt+0x528>
   118a0:	push	{ip}		; (str ip, [sp, #-4]!)
   118a4:	ldr	r0, [pc, #12]	; 118b8 <__assert_fail@plt+0x52c>
   118a8:	ldr	r3, [pc, #12]	; 118bc <__assert_fail@plt+0x530>
   118ac:	bl	111b8 <__libc_start_main@plt>
   118b0:	bl	11344 <abort@plt>
   118b4:			; <UNDEFINED> instruction: 0x0001dbb0
   118b8:	muleq	r1, r8, r3
   118bc:	andeq	sp, r1, r0, asr fp
   118c0:	ldr	r3, [pc, #20]	; 118dc <__assert_fail@plt+0x550>
   118c4:	ldr	r2, [pc, #20]	; 118e0 <__assert_fail@plt+0x554>
   118c8:	add	r3, pc, r3
   118cc:	ldr	r2, [r3, r2]
   118d0:	cmp	r2, #0
   118d4:	bxeq	lr
   118d8:	b	111d0 <__gmon_start__@plt>
   118dc:	andeq	lr, r1, r0, lsr r7
   118e0:	andeq	r0, r0, r0, lsr r1
   118e4:	ldr	r3, [pc, #28]	; 11908 <__assert_fail@plt+0x57c>
   118e8:	ldr	r0, [pc, #28]	; 1190c <__assert_fail@plt+0x580>
   118ec:	sub	r3, r3, r0
   118f0:	cmp	r3, #6
   118f4:	bxls	lr
   118f8:	ldr	r3, [pc, #16]	; 11910 <__assert_fail@plt+0x584>
   118fc:	cmp	r3, #0
   11900:	bxeq	lr
   11904:	bx	r3
   11908:	andeq	r0, r3, r7, lsl #3
   1190c:	andeq	r0, r3, r4, lsl #3
   11910:	andeq	r0, r0, r0
   11914:	ldr	r1, [pc, #36]	; 11940 <__assert_fail@plt+0x5b4>
   11918:	ldr	r0, [pc, #36]	; 11944 <__assert_fail@plt+0x5b8>
   1191c:	sub	r1, r1, r0
   11920:	asr	r1, r1, #2
   11924:	add	r1, r1, r1, lsr #31
   11928:	asrs	r1, r1, #1
   1192c:	bxeq	lr
   11930:	ldr	r3, [pc, #16]	; 11948 <__assert_fail@plt+0x5bc>
   11934:	cmp	r3, #0
   11938:	bxeq	lr
   1193c:	bx	r3
   11940:	andeq	r0, r3, r4, lsl #3
   11944:	andeq	r0, r3, r4, lsl #3
   11948:	andeq	r0, r0, r0
   1194c:	push	{r4, lr}
   11950:	ldr	r4, [pc, #24]	; 11970 <__assert_fail@plt+0x5e4>
   11954:	ldrb	r3, [r4]
   11958:	cmp	r3, #0
   1195c:	popne	{r4, pc}
   11960:	bl	118e4 <__assert_fail@plt+0x558>
   11964:	mov	r3, #1
   11968:	strb	r3, [r4]
   1196c:	pop	{r4, pc}
   11970:	andeq	r0, r3, r4, lsr #3
   11974:	ldr	r0, [pc, #40]	; 119a4 <__assert_fail@plt+0x618>
   11978:	ldr	r3, [r0]
   1197c:	cmp	r3, #0
   11980:	bne	11988 <__assert_fail@plt+0x5fc>
   11984:	b	11914 <__assert_fail@plt+0x588>
   11988:	ldr	r3, [pc, #24]	; 119a8 <__assert_fail@plt+0x61c>
   1198c:	cmp	r3, #0
   11990:	beq	11984 <__assert_fail@plt+0x5f8>
   11994:	push	{r4, lr}
   11998:	blx	r3
   1199c:	pop	{r4, lr}
   119a0:	b	11914 <__assert_fail@plt+0x588>
   119a4:	andeq	pc, r2, r4, lsl pc	; <UNPREDICTABLE>
   119a8:	andeq	r0, r0, r0
   119ac:	subs	r5, r0, #0
   119b0:	push	{r7, lr}
   119b4:	sub	sp, sp, #64	; 0x40
   119b8:	beq	119f4 <__assert_fail@plt+0x668>
   119bc:	ldr	r3, [pc, #872]	; 11d2c <__assert_fail@plt+0x9a0>
   119c0:	mov	r2, #5
   119c4:	ldr	r1, [pc, #868]	; 11d30 <__assert_fail@plt+0x9a4>
   119c8:	mov	r0, #0
   119cc:	ldr	r4, [r3]
   119d0:	bl	11104 <dcgettext@plt>
   119d4:	ldr	r3, [pc, #856]	; 11d34 <__assert_fail@plt+0x9a8>
   119d8:	mov	r1, #1
   119dc:	ldr	r3, [r3]
   119e0:	mov	r2, r0
   119e4:	mov	r0, r4
   119e8:	bl	11278 <__fprintf_chk@plt>
   119ec:	mov	r0, r5
   119f0:	bl	111f4 <exit@plt>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #824]	; 11d38 <__assert_fail@plt+0x9ac>
   119fc:	bl	11104 <dcgettext@plt>
   11a00:	ldr	r4, [pc, #812]	; 11d34 <__assert_fail@plt+0x9a8>
   11a04:	ldr	r6, [pc, #816]	; 11d3c <__assert_fail@plt+0x9b0>
   11a08:	ldr	r3, [r4]
   11a0c:	mov	r2, r3
   11a10:	mov	r1, r0
   11a14:	mov	r0, #1
   11a18:	bl	11260 <__printf_chk@plt>
   11a1c:	mov	r2, #5
   11a20:	ldr	r1, [pc, #792]	; 11d40 <__assert_fail@plt+0x9b4>
   11a24:	mov	r0, r5
   11a28:	bl	11104 <dcgettext@plt>
   11a2c:	ldr	r1, [r6]
   11a30:	bl	11050 <fputs_unlocked@plt>
   11a34:	mov	r2, #5
   11a38:	ldr	r1, [pc, #772]	; 11d44 <__assert_fail@plt+0x9b8>
   11a3c:	mov	r0, r5
   11a40:	bl	11104 <dcgettext@plt>
   11a44:	ldr	r1, [r6]
   11a48:	bl	11050 <fputs_unlocked@plt>
   11a4c:	mov	r2, #5
   11a50:	ldr	r1, [pc, #752]	; 11d48 <__assert_fail@plt+0x9bc>
   11a54:	mov	r0, r5
   11a58:	bl	11104 <dcgettext@plt>
   11a5c:	ldr	r1, [r6]
   11a60:	bl	11050 <fputs_unlocked@plt>
   11a64:	mov	r2, #5
   11a68:	ldr	r1, [pc, #732]	; 11d4c <__assert_fail@plt+0x9c0>
   11a6c:	mov	r0, r5
   11a70:	bl	11104 <dcgettext@plt>
   11a74:	ldr	r1, [r6]
   11a78:	bl	11050 <fputs_unlocked@plt>
   11a7c:	mov	r2, #5
   11a80:	ldr	r1, [pc, #712]	; 11d50 <__assert_fail@plt+0x9c4>
   11a84:	mov	r0, r5
   11a88:	bl	11104 <dcgettext@plt>
   11a8c:	ldr	r1, [r6]
   11a90:	bl	11050 <fputs_unlocked@plt>
   11a94:	mov	r2, #5
   11a98:	ldr	r1, [pc, #692]	; 11d54 <__assert_fail@plt+0x9c8>
   11a9c:	mov	r0, r5
   11aa0:	bl	11104 <dcgettext@plt>
   11aa4:	ldr	r1, [r6]
   11aa8:	bl	11050 <fputs_unlocked@plt>
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #672]	; 11d58 <__assert_fail@plt+0x9cc>
   11ab4:	mov	r0, r5
   11ab8:	bl	11104 <dcgettext@plt>
   11abc:	ldr	r1, [r6]
   11ac0:	bl	11050 <fputs_unlocked@plt>
   11ac4:	mov	r2, #5
   11ac8:	ldr	r1, [pc, #652]	; 11d5c <__assert_fail@plt+0x9d0>
   11acc:	mov	r0, r5
   11ad0:	bl	11104 <dcgettext@plt>
   11ad4:	ldr	r1, [r6]
   11ad8:	bl	11050 <fputs_unlocked@plt>
   11adc:	mov	r2, #5
   11ae0:	ldr	r1, [pc, #632]	; 11d60 <__assert_fail@plt+0x9d4>
   11ae4:	mov	r0, r5
   11ae8:	bl	11104 <dcgettext@plt>
   11aec:	ldr	r1, [r6]
   11af0:	bl	11050 <fputs_unlocked@plt>
   11af4:	mov	r2, #5
   11af8:	ldr	r1, [pc, #612]	; 11d64 <__assert_fail@plt+0x9d8>
   11afc:	mov	r0, r5
   11b00:	bl	11104 <dcgettext@plt>
   11b04:	ldr	r1, [r6]
   11b08:	bl	11050 <fputs_unlocked@plt>
   11b0c:	mov	r2, #5
   11b10:	ldr	r1, [pc, #592]	; 11d68 <__assert_fail@plt+0x9dc>
   11b14:	mov	r0, r5
   11b18:	bl	11104 <dcgettext@plt>
   11b1c:	ldr	r1, [r6]
   11b20:	bl	11050 <fputs_unlocked@plt>
   11b24:	mov	r2, #5
   11b28:	ldr	r1, [pc, #572]	; 11d6c <__assert_fail@plt+0x9e0>
   11b2c:	mov	r0, r5
   11b30:	bl	11104 <dcgettext@plt>
   11b34:	ldr	r1, [r6]
   11b38:	bl	11050 <fputs_unlocked@plt>
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #552]	; 11d70 <__assert_fail@plt+0x9e4>
   11b44:	mov	r0, r5
   11b48:	bl	11104 <dcgettext@plt>
   11b4c:	ldr	r3, [r4]
   11b50:	ldr	r4, [pc, #540]	; 11d74 <__assert_fail@plt+0x9e8>
   11b54:	str	r3, [sp]
   11b58:	mov	r2, r3
   11b5c:	mov	r1, r0
   11b60:	mov	r0, #1
   11b64:	bl	11260 <__printf_chk@plt>
   11b68:	ldm	r4!, {r0, r1, r2, r3}
   11b6c:	add	lr, sp, #8
   11b70:	stmia	lr!, {r0, r1, r2, r3}
   11b74:	ldm	r4!, {r0, r1, r2, r3}
   11b78:	ldr	ip, [sp, #8]
   11b7c:	stmia	lr!, {r0, r1, r2, r3}
   11b80:	cmp	ip, #0
   11b84:	ldm	r4!, {r0, r1, r2, r3}
   11b88:	stmia	lr!, {r0, r1, r2, r3}
   11b8c:	ldm	r4, {r0, r1}
   11b90:	addeq	r4, sp, #8
   11b94:	stm	lr, {r0, r1}
   11b98:	beq	11bc8 <__assert_fail@plt+0x83c>
   11b9c:	ldr	r7, [pc, #468]	; 11d78 <__assert_fail@plt+0x9ec>
   11ba0:	add	r4, sp, #8
   11ba4:	b	11bb4 <__assert_fail@plt+0x828>
   11ba8:	ldr	ip, [r4, #8]!
   11bac:	cmp	ip, #0
   11bb0:	beq	11bc8 <__assert_fail@plt+0x83c>
   11bb4:	mov	r1, ip
   11bb8:	mov	r0, r7
   11bbc:	bl	11074 <strcmp@plt>
   11bc0:	cmp	r0, #0
   11bc4:	bne	11ba8 <__assert_fail@plt+0x81c>
   11bc8:	ldr	r4, [r4, #4]
   11bcc:	mov	r2, #5
   11bd0:	cmp	r4, #0
   11bd4:	ldr	r1, [pc, #416]	; 11d7c <__assert_fail@plt+0x9f0>
   11bd8:	beq	11c80 <__assert_fail@plt+0x8f4>
   11bdc:	mov	r0, #0
   11be0:	bl	11104 <dcgettext@plt>
   11be4:	ldr	r3, [pc, #404]	; 11d80 <__assert_fail@plt+0x9f4>
   11be8:	ldr	r2, [pc, #404]	; 11d84 <__assert_fail@plt+0x9f8>
   11bec:	mov	r1, r0
   11bf0:	mov	r0, #1
   11bf4:	bl	11260 <__printf_chk@plt>
   11bf8:	mov	r1, #0
   11bfc:	mov	r0, #5
   11c00:	bl	112a8 <setlocale@plt>
   11c04:	cmp	r0, #0
   11c08:	ldreq	r7, [pc, #360]	; 11d78 <__assert_fail@plt+0x9ec>
   11c0c:	beq	11c28 <__assert_fail@plt+0x89c>
   11c10:	mov	r2, #3
   11c14:	ldr	r1, [pc, #364]	; 11d88 <__assert_fail@plt+0x9fc>
   11c18:	bl	11338 <strncmp@plt>
   11c1c:	ldr	r7, [pc, #340]	; 11d78 <__assert_fail@plt+0x9ec>
   11c20:	cmp	r0, #0
   11c24:	bne	11d10 <__assert_fail@plt+0x984>
   11c28:	mov	r2, #5
   11c2c:	ldr	r1, [pc, #344]	; 11d8c <__assert_fail@plt+0xa00>
   11c30:	mov	r0, #0
   11c34:	bl	11104 <dcgettext@plt>
   11c38:	ldr	r3, [pc, #312]	; 11d78 <__assert_fail@plt+0x9ec>
   11c3c:	ldr	r2, [pc, #316]	; 11d80 <__assert_fail@plt+0x9f4>
   11c40:	mov	r1, r0
   11c44:	mov	r0, #1
   11c48:	bl	11260 <__printf_chk@plt>
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #312]	; 11d90 <__assert_fail@plt+0xa04>
   11c54:	mov	r0, #0
   11c58:	bl	11104 <dcgettext@plt>
   11c5c:	ldr	r2, [pc, #304]	; 11d94 <__assert_fail@plt+0xa08>
   11c60:	cmp	r4, r7
   11c64:	ldr	r3, [pc, #300]	; 11d98 <__assert_fail@plt+0xa0c>
   11c68:	movne	r3, r2
   11c6c:	mov	r1, r0
   11c70:	mov	r2, r4
   11c74:	mov	r0, #1
   11c78:	bl	11260 <__printf_chk@plt>
   11c7c:	b	119ec <__assert_fail@plt+0x660>
   11c80:	mov	r0, r4
   11c84:	bl	11104 <dcgettext@plt>
   11c88:	ldr	r3, [pc, #240]	; 11d80 <__assert_fail@plt+0x9f4>
   11c8c:	ldr	r2, [pc, #240]	; 11d84 <__assert_fail@plt+0x9f8>
   11c90:	mov	r1, r0
   11c94:	mov	r0, #1
   11c98:	bl	11260 <__printf_chk@plt>
   11c9c:	mov	r1, r4
   11ca0:	mov	r0, #5
   11ca4:	bl	112a8 <setlocale@plt>
   11ca8:	cmp	r0, #0
   11cac:	beq	11cc4 <__assert_fail@plt+0x938>
   11cb0:	mov	r2, #3
   11cb4:	ldr	r1, [pc, #204]	; 11d88 <__assert_fail@plt+0x9fc>
   11cb8:	bl	11338 <strncmp@plt>
   11cbc:	cmp	r0, #0
   11cc0:	bne	11d08 <__assert_fail@plt+0x97c>
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #188]	; 11d8c <__assert_fail@plt+0xa00>
   11ccc:	mov	r0, #0
   11cd0:	bl	11104 <dcgettext@plt>
   11cd4:	ldr	r3, [pc, #156]	; 11d78 <__assert_fail@plt+0x9ec>
   11cd8:	ldr	r2, [pc, #160]	; 11d80 <__assert_fail@plt+0x9f4>
   11cdc:	mov	r4, r3
   11ce0:	mov	r1, r0
   11ce4:	mov	r0, #1
   11ce8:	bl	11260 <__printf_chk@plt>
   11cec:	ldr	r1, [pc, #156]	; 11d90 <__assert_fail@plt+0xa04>
   11cf0:	mov	r2, #5
   11cf4:	mov	r0, #0
   11cf8:	bl	11104 <dcgettext@plt>
   11cfc:	ldr	r3, [pc, #148]	; 11d98 <__assert_fail@plt+0xa0c>
   11d00:	mov	r1, r0
   11d04:	b	11c70 <__assert_fail@plt+0x8e4>
   11d08:	ldr	r7, [pc, #104]	; 11d78 <__assert_fail@plt+0x9ec>
   11d0c:	mov	r4, r7
   11d10:	mov	r2, #5
   11d14:	ldr	r1, [pc, #128]	; 11d9c <__assert_fail@plt+0xa10>
   11d18:	mov	r0, #0
   11d1c:	bl	11104 <dcgettext@plt>
   11d20:	ldr	r1, [r6]
   11d24:	bl	11050 <fputs_unlocked@plt>
   11d28:	b	11c28 <__assert_fail@plt+0x89c>
   11d2c:	muleq	r3, r8, r1
   11d30:	strdeq	sp, [r1], -r8
   11d34:	andeq	r0, r3, r8, asr #3
   11d38:	andeq	sp, r1, r0, lsr #26
   11d3c:	muleq	r3, ip, r1
   11d40:	andeq	sp, r1, r4, lsl #27
   11d44:	andeq	sp, r1, r8, lsl lr
   11d48:	andeq	sp, r1, r4, ror #29
   11d4c:	andeq	sp, r1, ip, asr #31
   11d50:	andeq	lr, r1, r4, asr #32
   11d54:	muleq	r1, r8, r1
   11d58:	andeq	lr, r1, r8, lsl r2
   11d5c:	muleq	r1, r4, r2
   11d60:	ldrdeq	lr, [r1], -ip
   11d64:			; <UNDEFINED> instruction: 0x0001e4b0
   11d68:	andeq	lr, r1, r0, ror #9
   11d6c:	andeq	lr, r1, r8, lsl r5
   11d70:	ldrdeq	lr, [r1], -r8
   11d74:	ldrdeq	sp, [r1], -r8
   11d78:	strdeq	sp, [r1], -r0
   11d7c:	andeq	lr, r1, r4, lsr #13
   11d80:			; <UNDEFINED> instruction: 0x0001e6bc
   11d84:	andeq	lr, r1, r4, ror #13
   11d88:	strdeq	lr, [r1], -r4
   11d8c:	andeq	lr, r1, r0, asr #14
   11d90:	andeq	lr, r1, ip, asr r7
   11d94:	andeq	lr, r1, ip, lsr #9
   11d98:	andeq	lr, r1, r0, ror #16
   11d9c:	strdeq	lr, [r1], -r8
   11da0:	mov	r3, #0
   11da4:	mov	r1, #2
   11da8:	mov	r2, #1
   11dac:	str	r1, [r0]
   11db0:	strb	r2, [r0, #12]
   11db4:	str	r3, [r0, #8]
   11db8:	strb	r3, [r0, #4]
   11dbc:	strb	r3, [r0, #13]
   11dc0:	str	r3, [r0, #16]
   11dc4:	str	r3, [r0, #20]
   11dc8:	bx	lr
   11dcc:	push	{r4, lr}
   11dd0:	mov	r4, r0
   11dd4:	ldr	r0, [r0, #16]
   11dd8:	bl	12dbc <__assert_fail@plt+0x1a30>
   11ddc:	ldr	r0, [r4, #20]
   11de0:	pop	{r4, lr}
   11de4:	b	12dbc <__assert_fail@plt+0x1a30>
   11de8:	push	{r4, lr}
   11dec:	sub	sp, sp, #24
   11df0:	mov	r4, r0
   11df4:	bl	11374 <getgrgid@plt>
   11df8:	subs	r1, r0, #0
   11dfc:	beq	11e10 <__assert_fail@plt+0xa84>
   11e00:	ldr	r0, [r1]
   11e04:	bl	1c6c0 <__assert_fail@plt+0xb334>
   11e08:	add	sp, sp, #24
   11e0c:	pop	{r4, pc}
   11e10:	mov	r2, sp
   11e14:	mov	r0, r4
   11e18:	bl	16e4c <__assert_fail@plt+0x5ac0>
   11e1c:	bl	1c6c0 <__assert_fail@plt+0xb334>
   11e20:	add	sp, sp, #24
   11e24:	pop	{r4, pc}
   11e28:	push	{r4, lr}
   11e2c:	sub	sp, sp, #24
   11e30:	mov	r4, r0
   11e34:	bl	11080 <getpwuid@plt>
   11e38:	subs	r1, r0, #0
   11e3c:	beq	11e50 <__assert_fail@plt+0xac4>
   11e40:	ldr	r0, [r1]
   11e44:	bl	1c6c0 <__assert_fail@plt+0xb334>
   11e48:	add	sp, sp, #24
   11e4c:	pop	{r4, pc}
   11e50:	mov	r2, sp
   11e54:	mov	r0, r4
   11e58:	bl	16e4c <__assert_fail@plt+0x5ac0>
   11e5c:	bl	1c6c0 <__assert_fail@plt+0xb334>
   11e60:	add	sp, sp, #24
   11e64:	pop	{r4, pc}
   11e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e6c:	sub	sp, sp, #252	; 0xfc
   11e70:	ldr	ip, [sp, #292]	; 0x124
   11e74:	ldr	lr, [sp, #288]	; 0x120
   11e78:	str	r2, [sp, #20]
   11e7c:	cmn	lr, #1
   11e80:	cmneq	ip, #1
   11e84:	movne	ip, #1
   11e88:	moveq	ip, #0
   11e8c:	str	r3, [sp, #32]
   11e90:	ldr	fp, [sp, #296]	; 0x128
   11e94:	movne	ip, #0
   11e98:	bne	11ea8 <__assert_fail@plt+0xb1c>
   11e9c:	ldrb	r3, [fp, #12]
   11ea0:	cmp	r3, #0
   11ea4:	beq	123b0 <__assert_fail@plt+0x1024>
   11ea8:	mov	r2, #0
   11eac:	orr	r1, ip, r1
   11eb0:	bl	1c738 <__assert_fail@plt+0xb3ac>
   11eb4:	ldr	r3, [sp, #292]	; 0x124
   11eb8:	ldr	r2, [sp, #288]	; 0x120
   11ebc:	cmn	r3, #1
   11ec0:	cmneq	r2, #1
   11ec4:	moveq	r3, #1
   11ec8:	movne	r3, #0
   11ecc:	str	r3, [sp, #16]
   11ed0:	mov	r3, #1
   11ed4:	str	r3, [sp, #8]
   11ed8:	mov	sl, r0
   11edc:	mov	r0, sl
   11ee0:	bl	1497c <__assert_fail@plt+0x35f0>
   11ee4:	subs	r6, r0, #0
   11ee8:	beq	11f8c <__assert_fail@plt+0xc00>
   11eec:	ldrh	r9, [r6, #56]	; 0x38
   11ef0:	ldr	r3, [r6, #28]
   11ef4:	sub	r7, r9, #1
   11ef8:	str	r3, [sp, #12]
   11efc:	cmp	r7, #9
   11f00:	ldrls	pc, [pc, r7, lsl #2]
   11f04:	b	120a4 <__assert_fail@plt+0xd18>
   11f08:	andeq	r2, r1, r4, ror #5
   11f0c:	muleq	r1, r0, r0
   11f10:	andeq	r2, r1, r4, lsr #1
   11f14:	andeq	r2, r1, r8, asr #32
   11f18:	andeq	r2, r1, r4, lsr #1
   11f1c:	andeq	r2, r1, r8, lsr r0
   11f20:	andeq	r2, r1, r0
   11f24:	andeq	r2, r1, r4, lsr #1
   11f28:	andeq	r2, r1, r4, lsr #1
   11f2c:	andeq	r1, r1, r0, lsr pc
   11f30:	ldr	r3, [r6, #48]	; 0x30
   11f34:	cmp	r3, #0
   11f38:	bne	11f48 <__assert_fail@plt+0xbbc>
   11f3c:	ldr	r3, [r6, #16]
   11f40:	cmp	r3, #0
   11f44:	beq	12738 <__assert_fail@plt+0x13ac>
   11f48:	ldrb	r4, [fp, #13]
   11f4c:	cmp	r4, #0
   11f50:	beq	1272c <__assert_fail@plt+0x13a0>
   11f54:	ldr	r7, [fp]
   11f58:	cmp	r7, #2
   11f5c:	bne	12c2c <__assert_fail@plt+0x18a0>
   11f60:	mov	r7, #0
   11f64:	ldrb	r3, [fp, #4]
   11f68:	cmp	r3, #0
   11f6c:	beq	122c4 <__assert_fail@plt+0xf38>
   11f70:	ldr	r3, [sp, #8]
   11f74:	mov	r0, sl
   11f78:	and	r3, r3, r7
   11f7c:	str	r3, [sp, #8]
   11f80:	bl	1497c <__assert_fail@plt+0x35f0>
   11f84:	subs	r6, r0, #0
   11f88:	bne	11eec <__assert_fail@plt+0xb60>
   11f8c:	bl	1123c <__errno_location@plt>
   11f90:	mov	r5, r6
   11f94:	ldr	r6, [r0]
   11f98:	mov	r4, r0
   11f9c:	cmp	r6, #0
   11fa0:	beq	11fb8 <__assert_fail@plt+0xc2c>
   11fa4:	ldrb	r3, [fp, #13]
   11fa8:	cmp	r3, #0
   11fac:	str	r3, [sp, #8]
   11fb0:	strne	r5, [sp, #8]
   11fb4:	beq	12750 <__assert_fail@plt+0x13c4>
   11fb8:	mov	r0, sl
   11fbc:	bl	147b4 <__assert_fail@plt+0x3428>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11ff4 <__assert_fail@plt+0xc68>
   11fc8:	mov	r2, #5
   11fcc:	ldr	r1, [pc, #3192]	; 12c4c <__assert_fail@plt+0x18c0>
   11fd0:	mov	r0, #0
   11fd4:	ldr	r4, [r4]
   11fd8:	bl	11104 <dcgettext@plt>
   11fdc:	mov	r1, r4
   11fe0:	mov	r2, r0
   11fe4:	mov	r0, #0
   11fe8:	bl	11194 <error@plt>
   11fec:	mov	r3, #0
   11ff0:	str	r3, [sp, #8]
   11ff4:	ldr	r0, [sp, #8]
   11ff8:	add	sp, sp, #252	; 0xfc
   11ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12000:	ldrb	r4, [fp, #13]
   12004:	cmp	r4, #0
   12008:	bne	11f54 <__assert_fail@plt+0xbc8>
   1200c:	mov	r2, r3
   12010:	mov	r1, #3
   12014:	mov	r0, r4
   12018:	ldr	r5, [r6, #32]
   1201c:	bl	19f18 <__assert_fail@plt+0x8b8c>
   12020:	mov	r1, r5
   12024:	ldr	r2, [pc, #3108]	; 12c50 <__assert_fail@plt+0x18c4>
   12028:	mov	r3, r0
   1202c:	mov	r0, r4
   12030:	bl	11194 <error@plt>
   12034:	b	11f54 <__assert_fail@plt+0xbc8>
   12038:	ldrb	r3, [fp, #4]
   1203c:	cmp	r3, #0
   12040:	bne	120a4 <__assert_fail@plt+0xd18>
   12044:	b	11edc <__assert_fail@plt+0xb50>
   12048:	ldrb	r4, [fp, #13]
   1204c:	cmp	r4, #0
   12050:	bne	11f54 <__assert_fail@plt+0xbc8>
   12054:	ldr	r1, [pc, #3064]	; 12c54 <__assert_fail@plt+0x18c8>
   12058:	mov	r2, #5
   1205c:	mov	r0, r4
   12060:	ldr	r5, [r6, #32]
   12064:	bl	11104 <dcgettext@plt>
   12068:	ldr	r1, [sp, #12]
   1206c:	mov	r7, r0
   12070:	mov	r0, #4
   12074:	bl	1949c <__assert_fail@plt+0x8110>
   12078:	mov	r2, r7
   1207c:	mov	r1, r5
   12080:	mov	r3, r0
   12084:	mov	r0, r4
   12088:	bl	11194 <error@plt>
   1208c:	b	11f54 <__assert_fail@plt+0xbc8>
   12090:	mov	r1, r6
   12094:	mov	r0, sl
   12098:	bl	1c780 <__assert_fail@plt+0xb3f4>
   1209c:	cmp	r0, #0
   120a0:	bne	127a4 <__assert_fail@plt+0x1418>
   120a4:	ldr	r3, [sp, #16]
   120a8:	ldr	r8, [r6, #24]
   120ac:	cmp	r3, #0
   120b0:	beq	120c0 <__assert_fail@plt+0xd34>
   120b4:	ldr	r3, [fp]
   120b8:	cmp	r3, #2
   120bc:	beq	126d4 <__assert_fail@plt+0x1348>
   120c0:	ldrb	r4, [fp, #12]
   120c4:	add	r5, r6, #64	; 0x40
   120c8:	cmp	r4, #0
   120cc:	beq	120e0 <__assert_fail@plt+0xd54>
   120d0:	ldr	r3, [r6, #80]	; 0x50
   120d4:	and	r3, r3, #61440	; 0xf000
   120d8:	cmp	r3, #40960	; 0xa000
   120dc:	beq	12810 <__assert_fail@plt+0x1484>
   120e0:	ldr	r3, [sp, #288]	; 0x120
   120e4:	cmn	r3, #1
   120e8:	beq	123c4 <__assert_fail@plt+0x1038>
   120ec:	mov	r2, r3
   120f0:	ldr	r3, [r5, #24]
   120f4:	cmp	r2, r3
   120f8:	beq	123c4 <__assert_fail@plt+0x1038>
   120fc:	uxth	r7, r7
   12100:	bic	r9, r9, #2
   12104:	cmp	r9, #4
   12108:	cmpne	r7, #1
   1210c:	movls	r7, #1
   12110:	movhi	r7, #0
   12114:	bls	12c14 <__assert_fail@plt+0x1888>
   12118:	mov	r4, #1
   1211c:	mov	r7, r4
   12120:	ldr	r3, [fp]
   12124:	cmp	r3, #2
   12128:	beq	11f64 <__assert_fail@plt+0xbd8>
   1212c:	cmp	r3, #0
   12130:	bne	11f64 <__assert_fail@plt+0xbd8>
   12134:	cmp	r7, #0
   12138:	moveq	r8, #3
   1213c:	beq	12150 <__assert_fail@plt+0xdc4>
   12140:	cmp	r4, #0
   12144:	bne	12798 <__assert_fail@plt+0x140c>
   12148:	mov	r7, #1
   1214c:	mov	r8, r7
   12150:	ldr	r4, [r5, #24]
   12154:	mov	r0, r4
   12158:	bl	11080 <getpwuid@plt>
   1215c:	subs	r1, r0, #0
   12160:	beq	127f8 <__assert_fail@plt+0x146c>
   12164:	ldr	r0, [r1]
   12168:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1216c:	ldr	r4, [r5, #28]
   12170:	mov	r9, r0
   12174:	mov	r0, r4
   12178:	bl	11374 <getgrgid@plt>
   1217c:	subs	r1, r0, #0
   12180:	beq	127e8 <__assert_fail@plt+0x145c>
   12184:	ldr	r0, [r1]
   12188:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1218c:	cmp	r8, #1
   12190:	mov	r4, r0
   12194:	beq	125e8 <__assert_fail@plt+0x125c>
   12198:	ldr	r3, [fp, #16]
   1219c:	ldr	r5, [fp, #20]
   121a0:	cmp	r3, #0
   121a4:	beq	1266c <__assert_fail@plt+0x12e0>
   121a8:	cmp	r5, #0
   121ac:	mov	r0, r3
   121b0:	beq	1270c <__assert_fail@plt+0x1380>
   121b4:	str	r3, [sp, #28]
   121b8:	bl	1120c <strlen@plt>
   121bc:	str	r0, [sp, #24]
   121c0:	mov	r0, r5
   121c4:	bl	1120c <strlen@plt>
   121c8:	ldr	r2, [sp, #24]
   121cc:	add	r0, r2, r0
   121d0:	add	r0, r0, #2
   121d4:	bl	1c0b0 <__assert_fail@plt+0xad24>
   121d8:	ldr	r3, [sp, #28]
   121dc:	mov	r1, r3
   121e0:	str	r0, [sp, #24]
   121e4:	bl	110ec <stpcpy@plt>
   121e8:	mov	r3, #58	; 0x3a
   121ec:	mov	r1, r5
   121f0:	strb	r3, [r0], #1
   121f4:	bl	11170 <strcpy@plt>
   121f8:	cmp	r9, #0
   121fc:	ldr	r3, [sp, #28]
   12200:	beq	12688 <__assert_fail@plt+0x12fc>
   12204:	cmp	r4, #0
   12208:	beq	1271c <__assert_fail@plt+0x1390>
   1220c:	mov	r0, r9
   12210:	bl	1120c <strlen@plt>
   12214:	mov	r5, r0
   12218:	mov	r0, r4
   1221c:	bl	1120c <strlen@plt>
   12220:	add	r0, r5, r0
   12224:	add	r0, r0, #2
   12228:	bl	1c0b0 <__assert_fail@plt+0xad24>
   1222c:	mov	r1, r9
   12230:	str	r0, [sp, #28]
   12234:	bl	110ec <stpcpy@plt>
   12238:	mov	r3, #58	; 0x3a
   1223c:	mov	r1, r4
   12240:	strb	r3, [r0], #1
   12244:	bl	11170 <strcpy@plt>
   12248:	cmp	r8, #3
   1224c:	beq	126f4 <__assert_fail@plt+0x1368>
   12250:	cmp	r8, #4
   12254:	bne	126bc <__assert_fail@plt+0x1330>
   12258:	mov	r2, #5
   1225c:	ldr	r1, [pc, #2548]	; 12c58 <__assert_fail@plt+0x18cc>
   12260:	mov	r0, #0
   12264:	bl	11104 <dcgettext@plt>
   12268:	mov	r5, r0
   1226c:	ldr	r1, [sp, #12]
   12270:	mov	r0, #4
   12274:	bl	1949c <__assert_fail@plt+0x8110>
   12278:	ldr	r8, [sp, #24]
   1227c:	mov	r1, r5
   12280:	ldr	r5, [sp, #28]
   12284:	str	r8, [sp]
   12288:	mov	r3, r5
   1228c:	mov	r2, r0
   12290:	mov	r0, #1
   12294:	bl	11260 <__printf_chk@plt>
   12298:	mov	r0, r5
   1229c:	bl	12dbc <__assert_fail@plt+0x1a30>
   122a0:	mov	r0, r8
   122a4:	bl	12dbc <__assert_fail@plt+0x1a30>
   122a8:	mov	r0, r9
   122ac:	bl	12dbc <__assert_fail@plt+0x1a30>
   122b0:	mov	r0, r4
   122b4:	bl	12dbc <__assert_fail@plt+0x1a30>
   122b8:	ldrb	r3, [fp, #4]
   122bc:	cmp	r3, #0
   122c0:	bne	11f70 <__assert_fail@plt+0xbe4>
   122c4:	ldr	r3, [sp, #8]
   122c8:	mov	r1, r6
   122cc:	and	r3, r3, r7
   122d0:	mov	r2, #4
   122d4:	mov	r0, sl
   122d8:	str	r3, [sp, #8]
   122dc:	bl	152d4 <__assert_fail@plt+0x3f48>
   122e0:	b	11edc <__assert_fail@plt+0xb50>
   122e4:	ldrb	r3, [fp, #4]
   122e8:	cmp	r3, #0
   122ec:	beq	120a4 <__assert_fail@plt+0xd18>
   122f0:	ldr	ip, [fp, #8]
   122f4:	cmp	ip, #0
   122f8:	beq	11edc <__assert_fail@plt+0xb50>
   122fc:	ldrd	r0, [r6, #160]	; 0xa0
   12300:	ldrd	r2, [ip]
   12304:	cmp	r1, r3
   12308:	cmpeq	r0, r2
   1230c:	bne	11edc <__assert_fail@plt+0xb50>
   12310:	ldrd	r2, [r6, #64]	; 0x40
   12314:	ldrd	r0, [ip, #8]
   12318:	cmp	r3, r1
   1231c:	cmpeq	r2, r0
   12320:	bne	11edc <__assert_fail@plt+0xb50>
   12324:	ldr	r7, [sp, #12]
   12328:	ldr	r1, [pc, #2348]	; 12c5c <__assert_fail@plt+0x18d0>
   1232c:	mov	r0, r7
   12330:	bl	11074 <strcmp@plt>
   12334:	mov	r2, #5
   12338:	subs	r4, r0, #0
   1233c:	bne	12a74 <__assert_fail@plt+0x16e8>
   12340:	ldr	r1, [pc, #2328]	; 12c60 <__assert_fail@plt+0x18d4>
   12344:	bl	11104 <dcgettext@plt>
   12348:	mov	r1, r7
   1234c:	mov	r5, r0
   12350:	mov	r0, #4
   12354:	bl	1949c <__assert_fail@plt+0x8110>
   12358:	mov	r2, r5
   1235c:	mov	r1, r4
   12360:	mov	r3, r0
   12364:	mov	r0, r4
   12368:	bl	11194 <error@plt>
   1236c:	mov	r2, #5
   12370:	ldr	r1, [pc, #2284]	; 12c64 <__assert_fail@plt+0x18d8>
   12374:	mov	r0, #0
   12378:	bl	11104 <dcgettext@plt>
   1237c:	mov	r1, #0
   12380:	mov	r2, r0
   12384:	mov	r0, r1
   12388:	bl	11194 <error@plt>
   1238c:	mov	r1, r6
   12390:	mov	r2, #4
   12394:	mov	r0, sl
   12398:	bl	152d4 <__assert_fail@plt+0x3f48>
   1239c:	mov	r0, sl
   123a0:	bl	1497c <__assert_fail@plt+0x35f0>
   123a4:	mov	r3, #0
   123a8:	str	r3, [sp, #8]
   123ac:	b	11edc <__assert_fail@plt+0xb50>
   123b0:	ldr	r3, [fp]
   123b4:	cmp	r3, #2
   123b8:	moveq	ip, #8
   123bc:	movne	ip, #0
   123c0:	b	11ea8 <__assert_fail@plt+0xb1c>
   123c4:	ldr	r3, [sp, #292]	; 0x124
   123c8:	cmn	r3, #1
   123cc:	beq	12844 <__assert_fail@plt+0x14b8>
   123d0:	ldr	ip, [r5, #28]
   123d4:	uxth	r7, r7
   123d8:	bic	r9, r9, #2
   123dc:	cmp	r9, #4
   123e0:	cmpne	r7, #1
   123e4:	sub	ip, ip, r3
   123e8:	clz	ip, ip
   123ec:	lsr	ip, ip, #5
   123f0:	bls	124b0 <__assert_fail@plt+0x1124>
   123f4:	cmp	ip, #0
   123f8:	beq	12118 <__assert_fail@plt+0xd8c>
   123fc:	ldrb	r4, [fp, #12]
   12400:	cmp	r4, #0
   12404:	bne	12578 <__assert_fail@plt+0x11ec>
   12408:	mov	r3, #256	; 0x100
   1240c:	str	r3, [sp]
   12410:	ldr	r0, [sl, #32]
   12414:	mov	r1, r8
   12418:	ldr	r3, [sp, #32]
   1241c:	ldr	r2, [sp, #20]
   12420:	bl	11314 <fchownat@plt>
   12424:	cmp	r0, #0
   12428:	moveq	r7, #1
   1242c:	movne	r7, #0
   12430:	beq	12444 <__assert_fail@plt+0x10b8>
   12434:	bl	1123c <__errno_location@plt>
   12438:	ldr	r3, [r0]
   1243c:	cmp	r3, #95	; 0x5f
   12440:	beq	12808 <__assert_fail@plt+0x147c>
   12444:	cmp	r7, #0
   12448:	bne	125b4 <__assert_fail@plt+0x1228>
   1244c:	ldrb	r4, [fp, #13]
   12450:	cmp	r4, #0
   12454:	movne	r7, #0
   12458:	bne	12120 <__assert_fail@plt+0xd94>
   1245c:	bl	1123c <__errno_location@plt>
   12460:	ldr	r3, [sp, #20]
   12464:	mov	r2, #5
   12468:	cmn	r3, #1
   1246c:	ldrne	r1, [pc, #2036]	; 12c68 <__assert_fail@plt+0x18dc>
   12470:	ldreq	r1, [pc, #2036]	; 12c6c <__assert_fail@plt+0x18e0>
   12474:	ldr	r7, [r0]
   12478:	mov	r0, r4
   1247c:	bl	11104 <dcgettext@plt>
   12480:	ldr	r1, [sp, #12]
   12484:	mov	r8, r0
   12488:	mov	r0, #4
   1248c:	bl	1949c <__assert_fail@plt+0x8110>
   12490:	mov	r1, r7
   12494:	mov	r2, r8
   12498:	mov	r7, r4
   1249c:	mov	r4, #1
   124a0:	mov	r3, r0
   124a4:	mov	r0, #0
   124a8:	bl	11194 <error@plt>
   124ac:	b	12120 <__assert_fail@plt+0xd94>
   124b0:	ldr	lr, [fp, #8]
   124b4:	cmp	lr, #0
   124b8:	beq	123f4 <__assert_fail@plt+0x1068>
   124bc:	ldrd	r0, [r5, #96]	; 0x60
   124c0:	ldrd	r2, [lr]
   124c4:	cmp	r1, r3
   124c8:	cmpeq	r0, r2
   124cc:	bne	123f4 <__assert_fail@plt+0x1068>
   124d0:	ldrd	r0, [r5]
   124d4:	ldrd	r2, [lr, #8]
   124d8:	cmp	r1, r3
   124dc:	cmpeq	r0, r2
   124e0:	bne	123f4 <__assert_fail@plt+0x1068>
   124e4:	ldr	r6, [sp, #12]
   124e8:	ldr	r1, [pc, #1900]	; 12c5c <__assert_fail@plt+0x18d0>
   124ec:	mov	r0, r6
   124f0:	bl	11074 <strcmp@plt>
   124f4:	mov	r2, #5
   124f8:	subs	r4, r0, #0
   124fc:	beq	1295c <__assert_fail@plt+0x15d0>
   12500:	ldr	r1, [pc, #1896]	; 12c70 <__assert_fail@plt+0x18e4>
   12504:	mov	r0, #0
   12508:	bl	11104 <dcgettext@plt>
   1250c:	ldr	r2, [sp, #12]
   12510:	mov	r1, #4
   12514:	mov	r4, r0
   12518:	mov	r0, #0
   1251c:	bl	190bc <__assert_fail@plt+0x7d30>
   12520:	ldr	r2, [pc, #1844]	; 12c5c <__assert_fail@plt+0x18d0>
   12524:	mov	r1, #4
   12528:	mov	r5, r0
   1252c:	mov	r0, #1
   12530:	bl	190bc <__assert_fail@plt+0x7d30>
   12534:	mov	r1, #0
   12538:	mov	r3, r5
   1253c:	mov	r2, r4
   12540:	str	r0, [sp]
   12544:	mov	r0, r1
   12548:	bl	11194 <error@plt>
   1254c:	mov	r2, #5
   12550:	ldr	r1, [pc, #1804]	; 12c64 <__assert_fail@plt+0x18d8>
   12554:	mov	r0, #0
   12558:	bl	11104 <dcgettext@plt>
   1255c:	mov	r1, #0
   12560:	mov	r2, r0
   12564:	mov	r0, r1
   12568:	bl	11194 <error@plt>
   1256c:	mov	r3, #0
   12570:	str	r3, [sp, #8]
   12574:	b	11edc <__assert_fail@plt+0xb50>
   12578:	ldr	r3, [sp, #16]
   1257c:	ldr	r7, [sl, #32]
   12580:	cmp	r3, #0
   12584:	beq	1261c <__assert_fail@plt+0x1290>
   12588:	mov	r3, #0
   1258c:	mov	r0, r7
   12590:	str	r3, [sp]
   12594:	mov	r1, r8
   12598:	ldr	r3, [sp, #32]
   1259c:	ldr	r2, [sp, #20]
   125a0:	bl	11314 <fchownat@plt>
   125a4:	clz	r7, r0
   125a8:	lsr	r7, r7, #5
   125ac:	cmp	r7, #0
   125b0:	beq	1244c <__assert_fail@plt+0x10c0>
   125b4:	ldr	r3, [fp]
   125b8:	cmp	r3, #2
   125bc:	beq	12664 <__assert_fail@plt+0x12d8>
   125c0:	ldr	r2, [sp, #20]
   125c4:	cmn	r2, #1
   125c8:	beq	12644 <__assert_fail@plt+0x12b8>
   125cc:	mov	r1, r2
   125d0:	ldr	r2, [r5, #24]
   125d4:	cmp	r1, r2
   125d8:	beq	12644 <__assert_fail@plt+0x12b8>
   125dc:	mov	r7, #1
   125e0:	mov	r8, #2
   125e4:	b	12150 <__assert_fail@plt+0xdc4>
   125e8:	mov	r2, #5
   125ec:	ldr	r1, [pc, #1664]	; 12c74 <__assert_fail@plt+0x18e8>
   125f0:	mov	r0, #0
   125f4:	bl	11104 <dcgettext@plt>
   125f8:	ldr	r1, [sp, #12]
   125fc:	mov	r5, r0
   12600:	mov	r0, #4
   12604:	bl	1949c <__assert_fail@plt+0x8110>
   12608:	mov	r1, r5
   1260c:	mov	r2, r0
   12610:	mov	r0, r8
   12614:	bl	11260 <__printf_chk@plt>
   12618:	b	122a8 <__assert_fail@plt+0xf1c>
   1261c:	ldr	r3, [r5, #16]
   12620:	and	r3, r3, #61440	; 0xf000
   12624:	cmp	r3, #32768	; 0x8000
   12628:	beq	128a8 <__assert_fail@plt+0x151c>
   1262c:	cmp	r3, #16384	; 0x4000
   12630:	bne	12588 <__assert_fail@plt+0x11fc>
   12634:	ldr	r3, [pc, #1596]	; 12c78 <__assert_fail@plt+0x18ec>
   12638:	mov	r2, #18688	; 0x4900
   1263c:	str	r3, [sp, #24]
   12640:	b	128b4 <__assert_fail@plt+0x1528>
   12644:	ldr	r1, [sp, #32]
   12648:	cmn	r1, #1
   1264c:	beq	1265c <__assert_fail@plt+0x12d0>
   12650:	ldr	r2, [r5, #28]
   12654:	cmp	r1, r2
   12658:	bne	125dc <__assert_fail@plt+0x1250>
   1265c:	cmp	r3, #0
   12660:	beq	12798 <__assert_fail@plt+0x140c>
   12664:	mov	r7, #1
   12668:	b	11f64 <__assert_fail@plt+0xbd8>
   1266c:	cmp	r5, #0
   12670:	str	r3, [sp, #28]
   12674:	beq	12b5c <__assert_fail@plt+0x17d0>
   12678:	mov	r0, r5
   1267c:	bl	1c6c0 <__assert_fail@plt+0xb334>
   12680:	ldr	r3, [sp, #28]
   12684:	str	r0, [sp, #24]
   12688:	cmp	r4, #0
   1268c:	beq	12a50 <__assert_fail@plt+0x16c4>
   12690:	mov	r0, r4
   12694:	str	r3, [sp, #36]	; 0x24
   12698:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1269c:	cmp	r8, #3
   126a0:	ldr	r3, [sp, #36]	; 0x24
   126a4:	str	r0, [sp, #28]
   126a8:	beq	129e0 <__assert_fail@plt+0x1654>
   126ac:	cmp	r8, #4
   126b0:	beq	12880 <__assert_fail@plt+0x14f4>
   126b4:	cmp	r3, #0
   126b8:	beq	12778 <__assert_fail@plt+0x13ec>
   126bc:	mov	r2, #5
   126c0:	ldr	r1, [pc, #1460]	; 12c7c <__assert_fail@plt+0x18f0>
   126c4:	mov	r0, #0
   126c8:	bl	11104 <dcgettext@plt>
   126cc:	mov	r5, r0
   126d0:	b	1226c <__assert_fail@plt+0xee0>
   126d4:	ldr	r3, [fp, #8]
   126d8:	cmp	r3, #0
   126dc:	bne	120c0 <__assert_fail@plt+0xd34>
   126e0:	ldrb	r4, [fp, #12]
   126e4:	add	r5, r6, #64	; 0x40
   126e8:	cmp	r4, #0
   126ec:	bne	120d0 <__assert_fail@plt+0xd44>
   126f0:	b	12400 <__assert_fail@plt+0x1074>
   126f4:	mov	r2, #5
   126f8:	ldr	r1, [pc, #1408]	; 12c80 <__assert_fail@plt+0x18f4>
   126fc:	mov	r0, #0
   12700:	bl	11104 <dcgettext@plt>
   12704:	mov	r5, r0
   12708:	b	1226c <__assert_fail@plt+0xee0>
   1270c:	bl	1c6c0 <__assert_fail@plt+0xb334>
   12710:	cmp	r9, #0
   12714:	str	r0, [sp, #24]
   12718:	beq	1298c <__assert_fail@plt+0x1600>
   1271c:	mov	r0, r9
   12720:	bl	1c6c0 <__assert_fail@plt+0xb334>
   12724:	str	r0, [sp, #28]
   12728:	b	12248 <__assert_fail@plt+0xebc>
   1272c:	mov	r2, #5
   12730:	ldr	r1, [pc, #1356]	; 12c84 <__assert_fail@plt+0x18f8>
   12734:	b	1205c <__assert_fail@plt+0xcd0>
   12738:	mov	r2, #1
   1273c:	str	r2, [r6, #16]
   12740:	mov	r1, r6
   12744:	mov	r0, sl
   12748:	bl	152d4 <__assert_fail@plt+0x3f48>
   1274c:	b	11edc <__assert_fail@plt+0xb50>
   12750:	mov	r2, #5
   12754:	ldr	r1, [pc, #1324]	; 12c88 <__assert_fail@plt+0x18fc>
   12758:	mov	r0, r3
   1275c:	mov	r5, r3
   12760:	bl	11104 <dcgettext@plt>
   12764:	mov	r1, r6
   12768:	mov	r2, r0
   1276c:	mov	r0, r5
   12770:	bl	11194 <error@plt>
   12774:	b	11fb8 <__assert_fail@plt+0xc2c>
   12778:	cmp	r5, #0
   1277c:	beq	12af8 <__assert_fail@plt+0x176c>
   12780:	mov	r0, r3
   12784:	mov	r2, #5
   12788:	ldr	r1, [pc, #1276]	; 12c8c <__assert_fail@plt+0x1900>
   1278c:	bl	11104 <dcgettext@plt>
   12790:	mov	r5, r0
   12794:	b	1226c <__assert_fail@plt+0xee0>
   12798:	mov	r7, #1
   1279c:	mov	r8, #4
   127a0:	b	12150 <__assert_fail@plt+0xdc4>
   127a4:	mov	r2, #5
   127a8:	ldr	r1, [pc, #1248]	; 12c90 <__assert_fail@plt+0x1904>
   127ac:	mov	r0, #0
   127b0:	bl	11104 <dcgettext@plt>
   127b4:	ldr	r2, [sp, #12]
   127b8:	mov	r1, #3
   127bc:	mov	r4, r0
   127c0:	mov	r0, #0
   127c4:	bl	19f18 <__assert_fail@plt+0x8b8c>
   127c8:	mov	r1, #0
   127cc:	mov	r2, r4
   127d0:	mov	r3, r0
   127d4:	mov	r0, r1
   127d8:	bl	11194 <error@plt>
   127dc:	mov	r3, #0
   127e0:	str	r3, [sp, #8]
   127e4:	b	11edc <__assert_fail@plt+0xb50>
   127e8:	mov	r0, r4
   127ec:	add	r2, sp, #144	; 0x90
   127f0:	bl	16e4c <__assert_fail@plt+0x5ac0>
   127f4:	b	12188 <__assert_fail@plt+0xdfc>
   127f8:	mov	r0, r4
   127fc:	add	r2, sp, #144	; 0x90
   12800:	bl	16e4c <__assert_fail@plt+0x5ac0>
   12804:	b	12168 <__assert_fail@plt+0xddc>
   12808:	mov	r7, #1
   1280c:	b	12120 <__assert_fail@plt+0xd94>
   12810:	mov	r2, #0
   12814:	str	r2, [sp]
   12818:	ldr	r1, [sl, #32]
   1281c:	add	r3, sp, #40	; 0x28
   12820:	mov	r2, r8
   12824:	mov	r0, #3
   12828:	bl	11128 <__fxstatat64@plt>
   1282c:	cmp	r0, #0
   12830:	bne	12914 <__assert_fail@plt+0x1588>
   12834:	ldrh	r9, [r6, #56]	; 0x38
   12838:	add	r5, sp, #40	; 0x28
   1283c:	sub	r7, r9, #1
   12840:	b	120e0 <__assert_fail@plt+0xd54>
   12844:	uxth	ip, r7
   12848:	bic	r9, r9, #2
   1284c:	cmp	r9, #4
   12850:	cmpne	ip, #1
   12854:	movls	ip, #1
   12858:	movhi	ip, #0
   1285c:	bhi	123fc <__assert_fail@plt+0x1070>
   12860:	ldr	lr, [fp, #8]
   12864:	cmp	lr, #0
   12868:	bne	124bc <__assert_fail@plt+0x1130>
   1286c:	b	123fc <__assert_fail@plt+0x1070>
   12870:	cmp	r8, #4
   12874:	strne	r4, [sp, #28]
   12878:	bne	126b4 <__assert_fail@plt+0x1328>
   1287c:	str	r4, [sp, #28]
   12880:	cmp	r3, #0
   12884:	bne	12258 <__assert_fail@plt+0xecc>
   12888:	cmp	r5, #0
   1288c:	beq	12ae0 <__assert_fail@plt+0x1754>
   12890:	mov	r0, r3
   12894:	mov	r2, #5
   12898:	ldr	r1, [pc, #1012]	; 12c94 <__assert_fail@plt+0x1908>
   1289c:	bl	11104 <dcgettext@plt>
   128a0:	mov	r5, r0
   128a4:	b	1226c <__assert_fail@plt+0xee0>
   128a8:	ldr	r3, [pc, #1000]	; 12c98 <__assert_fail@plt+0x190c>
   128ac:	mov	r2, #2304	; 0x900
   128b0:	str	r3, [sp, #24]
   128b4:	mov	r1, r8
   128b8:	mov	r0, r7
   128bc:	bl	110b0 <__openat64_2@plt>
   128c0:	subs	r9, r0, #0
   128c4:	blt	12930 <__assert_fail@plt+0x15a4>
   128c8:	add	r2, sp, #144	; 0x90
   128cc:	mov	r1, r9
   128d0:	mov	r0, #3
   128d4:	bl	11140 <__fxstat64@plt>
   128d8:	cmp	r0, #0
   128dc:	bne	129c4 <__assert_fail@plt+0x1638>
   128e0:	ldrd	r0, [r5, #96]	; 0x60
   128e4:	ldrd	r2, [sp, #240]	; 0xf0
   128e8:	cmp	r1, r3
   128ec:	cmpeq	r0, r2
   128f0:	beq	12b10 <__assert_fail@plt+0x1784>
   128f4:	bl	1123c <__errno_location@plt>
   128f8:	mov	r8, r0
   128fc:	mov	r0, r9
   12900:	ldr	r9, [r8]
   12904:	bl	11350 <close@plt>
   12908:	ldr	r7, [sp, #16]
   1290c:	str	r9, [r8]
   12910:	b	12120 <__assert_fail@plt+0xd94>
   12914:	ldrb	r4, [fp, #13]
   12918:	cmp	r4, #0
   1291c:	beq	12a10 <__assert_fail@plt+0x1684>
   12920:	add	r5, sp, #40	; 0x28
   12924:	mov	r4, #1
   12928:	mov	r7, #0
   1292c:	b	12120 <__assert_fail@plt+0xd94>
   12930:	bl	1123c <__errno_location@plt>
   12934:	ldr	r3, [r0]
   12938:	str	r0, [sp, #28]
   1293c:	cmp	r3, #13
   12940:	bne	1244c <__assert_fail@plt+0x10c0>
   12944:	ldr	r3, [r5, #16]
   12948:	and	r3, r3, #61440	; 0xf000
   1294c:	cmp	r3, #32768	; 0x8000
   12950:	beq	12b80 <__assert_fail@plt+0x17f4>
   12954:	ldr	r7, [sl, #32]
   12958:	b	12588 <__assert_fail@plt+0x11fc>
   1295c:	ldr	r1, [pc, #764]	; 12c60 <__assert_fail@plt+0x18d4>
   12960:	bl	11104 <dcgettext@plt>
   12964:	mov	r1, r6
   12968:	mov	r5, r0
   1296c:	mov	r0, #4
   12970:	bl	1949c <__assert_fail@plt+0x8110>
   12974:	mov	r2, r5
   12978:	mov	r1, r4
   1297c:	mov	r3, r0
   12980:	mov	r0, r4
   12984:	bl	11194 <error@plt>
   12988:	b	1254c <__assert_fail@plt+0x11c0>
   1298c:	cmp	r8, #3
   12990:	bne	12c00 <__assert_fail@plt+0x1874>
   12994:	ldr	r1, [pc, #768]	; 12c9c <__assert_fail@plt+0x1910>
   12998:	mov	r2, #5
   1299c:	ldr	r3, [sp, #24]
   129a0:	mov	r0, #0
   129a4:	str	r3, [sp, #28]
   129a8:	bl	11104 <dcgettext@plt>
   129ac:	mov	r5, r0
   129b0:	mov	r0, #0
   129b4:	bl	12dbc <__assert_fail@plt+0x1a30>
   129b8:	mov	r3, #0
   129bc:	str	r3, [sp, #24]
   129c0:	b	1226c <__assert_fail@plt+0xee0>
   129c4:	bl	1123c <__errno_location@plt>
   129c8:	mov	r4, r0
   129cc:	mov	r0, r9
   129d0:	ldr	r7, [r4]
   129d4:	bl	11350 <close@plt>
   129d8:	str	r7, [r4]
   129dc:	b	1244c <__assert_fail@plt+0x10c0>
   129e0:	cmp	r3, #0
   129e4:	bne	126f4 <__assert_fail@plt+0x1368>
   129e8:	cmp	r5, #0
   129ec:	moveq	r0, r5
   129f0:	movne	r0, r3
   129f4:	movne	r2, #5
   129f8:	ldrne	r1, [pc, #672]	; 12ca0 <__assert_fail@plt+0x1914>
   129fc:	moveq	r2, #5
   12a00:	ldreq	r1, [pc, #668]	; 12ca4 <__assert_fail@plt+0x1918>
   12a04:	bl	11104 <dcgettext@plt>
   12a08:	mov	r5, r0
   12a0c:	b	1226c <__assert_fail@plt+0xee0>
   12a10:	bl	1123c <__errno_location@plt>
   12a14:	mov	r2, #5
   12a18:	ldr	r1, [pc, #648]	; 12ca8 <__assert_fail@plt+0x191c>
   12a1c:	ldr	r5, [r0]
   12a20:	mov	r0, r4
   12a24:	bl	11104 <dcgettext@plt>
   12a28:	ldr	r1, [sp, #12]
   12a2c:	mov	r7, r0
   12a30:	mov	r0, #4
   12a34:	bl	1949c <__assert_fail@plt+0x8110>
   12a38:	mov	r2, r7
   12a3c:	mov	r1, r5
   12a40:	mov	r3, r0
   12a44:	mov	r0, r4
   12a48:	bl	11194 <error@plt>
   12a4c:	b	12920 <__assert_fail@plt+0x1594>
   12a50:	cmp	r8, #3
   12a54:	bne	12870 <__assert_fail@plt+0x14e4>
   12a58:	cmp	r3, #0
   12a5c:	bne	12994 <__assert_fail@plt+0x1608>
   12a60:	cmp	r5, #0
   12a64:	beq	12bf4 <__assert_fail@plt+0x1868>
   12a68:	mov	r2, #5
   12a6c:	ldr	r1, [pc, #568]	; 12cac <__assert_fail@plt+0x1920>
   12a70:	b	1299c <__assert_fail@plt+0x1610>
   12a74:	ldr	r1, [pc, #500]	; 12c70 <__assert_fail@plt+0x18e4>
   12a78:	mov	r0, #0
   12a7c:	bl	11104 <dcgettext@plt>
   12a80:	ldr	r2, [sp, #12]
   12a84:	mov	r1, #4
   12a88:	mov	r4, r0
   12a8c:	mov	r0, #0
   12a90:	bl	190bc <__assert_fail@plt+0x7d30>
   12a94:	ldr	r2, [pc, #448]	; 12c5c <__assert_fail@plt+0x18d0>
   12a98:	mov	r1, #4
   12a9c:	mov	r5, r0
   12aa0:	mov	r0, #1
   12aa4:	bl	190bc <__assert_fail@plt+0x7d30>
   12aa8:	mov	r1, #0
   12aac:	mov	r3, r5
   12ab0:	mov	r2, r4
   12ab4:	str	r0, [sp]
   12ab8:	mov	r0, r1
   12abc:	bl	11194 <error@plt>
   12ac0:	b	1236c <__assert_fail@plt+0xfe0>
   12ac4:	cmp	r8, #4
   12ac8:	movne	r3, r5
   12acc:	strne	r3, [sp, #28]
   12ad0:	strne	r3, [sp, #24]
   12ad4:	bne	12af8 <__assert_fail@plt+0x176c>
   12ad8:	str	r5, [sp, #28]
   12adc:	str	r5, [sp, #24]
   12ae0:	mov	r2, #5
   12ae4:	ldr	r1, [pc, #452]	; 12cb0 <__assert_fail@plt+0x1924>
   12ae8:	mov	r0, #0
   12aec:	bl	11104 <dcgettext@plt>
   12af0:	mov	r5, r0
   12af4:	b	1226c <__assert_fail@plt+0xee0>
   12af8:	mov	r2, #5
   12afc:	ldr	r1, [pc, #432]	; 12cb4 <__assert_fail@plt+0x1928>
   12b00:	mov	r0, #0
   12b04:	bl	11104 <dcgettext@plt>
   12b08:	mov	r5, r0
   12b0c:	b	1226c <__assert_fail@plt+0xee0>
   12b10:	ldrd	r0, [r5]
   12b14:	ldrd	r2, [sp, #144]	; 0x90
   12b18:	cmp	r1, r3
   12b1c:	cmpeq	r0, r2
   12b20:	bne	128f4 <__assert_fail@plt+0x1568>
   12b24:	ldr	r3, [sp, #288]	; 0x120
   12b28:	cmn	r3, #1
   12b2c:	beq	12bb8 <__assert_fail@plt+0x182c>
   12b30:	mov	r2, r3
   12b34:	ldr	r3, [sp, #168]	; 0xa8
   12b38:	cmp	r2, r3
   12b3c:	beq	12bac <__assert_fail@plt+0x1820>
   12b40:	bl	1123c <__errno_location@plt>
   12b44:	mov	r4, r0
   12b48:	mov	r0, r9
   12b4c:	ldr	r7, [r4]
   12b50:	bl	11350 <close@plt>
   12b54:	str	r7, [r4]
   12b58:	b	125b4 <__assert_fail@plt+0x1228>
   12b5c:	cmp	r8, #3
   12b60:	streq	r5, [sp, #28]
   12b64:	bne	12ac4 <__assert_fail@plt+0x1738>
   12b68:	mov	r2, #5
   12b6c:	ldr	r1, [pc, #304]	; 12ca4 <__assert_fail@plt+0x1918>
   12b70:	mov	r0, #0
   12b74:	bl	11104 <dcgettext@plt>
   12b78:	mov	r5, r0
   12b7c:	b	129b0 <__assert_fail@plt+0x1624>
   12b80:	ldr	r2, [sp, #24]
   12b84:	mov	r0, r7
   12b88:	mov	r1, r8
   12b8c:	bl	110b0 <__openat64_2@plt>
   12b90:	subs	r9, r0, #0
   12b94:	bge	128c8 <__assert_fail@plt+0x153c>
   12b98:	ldr	r3, [sp, #28]
   12b9c:	ldr	r3, [r3]
   12ba0:	cmp	r3, #13
   12ba4:	bne	1244c <__assert_fail@plt+0x10c0>
   12ba8:	b	12954 <__assert_fail@plt+0x15c8>
   12bac:	ldr	r3, [sp, #292]	; 0x124
   12bb0:	cmn	r3, #1
   12bb4:	beq	12bc8 <__assert_fail@plt+0x183c>
   12bb8:	ldr	r3, [sp, #172]	; 0xac
   12bbc:	ldr	r2, [sp, #292]	; 0x124
   12bc0:	cmp	r2, r3
   12bc4:	bne	12b40 <__assert_fail@plt+0x17b4>
   12bc8:	ldr	r2, [sp, #32]
   12bcc:	ldr	r1, [sp, #20]
   12bd0:	mov	r0, r9
   12bd4:	bl	11230 <fchown@plt>
   12bd8:	cmp	r0, #0
   12bdc:	bne	129c4 <__assert_fail@plt+0x1638>
   12be0:	mov	r0, r9
   12be4:	bl	11350 <close@plt>
   12be8:	cmp	r0, #0
   12bec:	bne	1244c <__assert_fail@plt+0x10c0>
   12bf0:	b	125b4 <__assert_fail@plt+0x1228>
   12bf4:	ldr	r3, [sp, #24]
   12bf8:	str	r3, [sp, #28]
   12bfc:	b	12b68 <__assert_fail@plt+0x17dc>
   12c00:	cmp	r8, #4
   12c04:	strne	r9, [sp, #28]
   12c08:	bne	126bc <__assert_fail@plt+0x1330>
   12c0c:	str	r9, [sp, #28]
   12c10:	b	12258 <__assert_fail@plt+0xecc>
   12c14:	ldr	lr, [fp, #8]
   12c18:	cmp	lr, #0
   12c1c:	moveq	r4, r7
   12c20:	beq	12120 <__assert_fail@plt+0xd94>
   12c24:	mov	ip, #0
   12c28:	b	124bc <__assert_fail@plt+0x1130>
   12c2c:	cmp	r7, #0
   12c30:	bne	11f60 <__assert_fail@plt+0xbd4>
   12c34:	mov	r9, r7
   12c38:	mov	r4, r7
   12c3c:	ldr	r3, [fp, #16]
   12c40:	ldr	r5, [fp, #20]
   12c44:	mov	r8, #3
   12c48:	b	121a0 <__assert_fail@plt+0xe14>
   12c4c:	andeq	lr, r1, r4, lsl #26
   12c50:	andeq	lr, r1, ip, lsr #15
   12c54:	andeq	lr, r1, r8, lsl sl
   12c58:	andeq	lr, r1, ip, lsr #25
   12c5c:	andeq	lr, r1, r4, asr r8
   12c60:	andeq	lr, r1, r4, ror #18
   12c64:	ldrdeq	lr, [r1], -r0
   12c68:	andeq	lr, r1, r8, lsl #22
   12c6c:	andeq	lr, r1, r4, lsr #22
   12c70:	muleq	r1, r4, r9
   12c74:	andeq	lr, r1, ip, lsr fp
   12c78:	andeq	r4, r0, r1, lsl #18
   12c7c:	andeq	lr, r1, r4, ror fp
   12c80:	andeq	lr, r1, r0, ror #23
   12c84:	andeq	lr, r1, r4, lsl #20
   12c88:	andeq	lr, r1, r4, asr r9
   12c8c:	muleq	r1, ip, fp
   12c90:	andeq	lr, r1, r4, lsr sl
   12c94:	andeq	lr, r1, ip, asr #25
   12c98:	andeq	r0, r0, r1, lsl #18
   12c9c:	andeq	lr, r1, r0, ror #24
   12ca0:	andeq	lr, r1, r0, lsl ip
   12ca4:	andeq	lr, r1, ip, lsr ip
   12ca8:	strdeq	lr, [r1], -r0
   12cac:	andeq	lr, r1, r8, lsl #25
   12cb0:	andeq	lr, r1, r8, ror #25
   12cb4:	andeq	lr, r1, r0, asr #23
   12cb8:	ldr	r3, [pc, #4]	; 12cc4 <__assert_fail@plt+0x1938>
   12cbc:	str	r0, [r3]
   12cc0:	bx	lr
   12cc4:	andeq	r0, r3, r0, asr #3
   12cc8:	ldr	r3, [pc, #4]	; 12cd4 <__assert_fail@plt+0x1948>
   12ccc:	strb	r0, [r3, #4]
   12cd0:	bx	lr
   12cd4:	andeq	r0, r3, r0, asr #3
   12cd8:	ldr	r3, [pc, #192]	; 12da0 <__assert_fail@plt+0x1a14>
   12cdc:	push	{r4, r5, r6, lr}
   12ce0:	sub	sp, sp, #8
   12ce4:	ldr	r0, [r3]
   12ce8:	bl	1cea4 <__assert_fail@plt+0xbb18>
   12cec:	cmp	r0, #0
   12cf0:	beq	12d14 <__assert_fail@plt+0x1988>
   12cf4:	ldr	r4, [pc, #168]	; 12da4 <__assert_fail@plt+0x1a18>
   12cf8:	ldrb	r3, [r4, #4]
   12cfc:	cmp	r3, #0
   12d00:	beq	12d30 <__assert_fail@plt+0x19a4>
   12d04:	bl	1123c <__errno_location@plt>
   12d08:	ldr	r3, [r0]
   12d0c:	cmp	r3, #32
   12d10:	bne	12d30 <__assert_fail@plt+0x19a4>
   12d14:	ldr	r3, [pc, #140]	; 12da8 <__assert_fail@plt+0x1a1c>
   12d18:	ldr	r0, [r3]
   12d1c:	bl	1cea4 <__assert_fail@plt+0xbb18>
   12d20:	cmp	r0, #0
   12d24:	bne	12d78 <__assert_fail@plt+0x19ec>
   12d28:	add	sp, sp, #8
   12d2c:	pop	{r4, r5, r6, pc}
   12d30:	mov	r2, #5
   12d34:	ldr	r1, [pc, #112]	; 12dac <__assert_fail@plt+0x1a20>
   12d38:	mov	r0, #0
   12d3c:	bl	11104 <dcgettext@plt>
   12d40:	ldr	r4, [r4]
   12d44:	cmp	r4, #0
   12d48:	mov	r5, r0
   12d4c:	beq	12d84 <__assert_fail@plt+0x19f8>
   12d50:	bl	1123c <__errno_location@plt>
   12d54:	ldr	r6, [r0]
   12d58:	mov	r0, r4
   12d5c:	bl	19bac <__assert_fail@plt+0x8820>
   12d60:	mov	r1, r6
   12d64:	str	r5, [sp]
   12d68:	ldr	r2, [pc, #64]	; 12db0 <__assert_fail@plt+0x1a24>
   12d6c:	mov	r3, r0
   12d70:	mov	r0, #0
   12d74:	bl	11194 <error@plt>
   12d78:	ldr	r3, [pc, #52]	; 12db4 <__assert_fail@plt+0x1a28>
   12d7c:	ldr	r0, [r3]
   12d80:	bl	110bc <_exit@plt>
   12d84:	bl	1123c <__errno_location@plt>
   12d88:	mov	r3, r5
   12d8c:	ldr	r2, [pc, #36]	; 12db8 <__assert_fail@plt+0x1a2c>
   12d90:	ldr	r1, [r0]
   12d94:	mov	r0, r4
   12d98:	bl	11194 <error@plt>
   12d9c:	b	12d78 <__assert_fail@plt+0x19ec>
   12da0:	muleq	r3, ip, r1
   12da4:	andeq	r0, r3, r0, asr #3
   12da8:	muleq	r3, r8, r1
   12dac:	andeq	lr, r1, r8, lsr #26
   12db0:	andeq	lr, r1, r8, lsr #15
   12db4:	andeq	r0, r3, r0, asr #2
   12db8:	andeq	lr, r1, ip, lsr #15
   12dbc:	push	{r4, r5, lr}
   12dc0:	sub	sp, sp, #12
   12dc4:	mov	r5, r0
   12dc8:	bl	1123c <__errno_location@plt>
   12dcc:	mov	r2, #0
   12dd0:	mov	r4, r0
   12dd4:	ldr	r3, [r0]
   12dd8:	str	r2, [r4]
   12ddc:	mov	r0, r5
   12de0:	str	r3, [sp]
   12de4:	str	r3, [sp, #4]
   12de8:	bl	110a4 <free@plt>
   12dec:	ldr	r3, [r4]
   12df0:	add	r2, sp, #8
   12df4:	cmp	r3, #0
   12df8:	moveq	r3, #4
   12dfc:	movne	r3, #0
   12e00:	add	r3, r2, r3
   12e04:	ldr	r3, [r3, #-8]
   12e08:	str	r3, [r4]
   12e0c:	add	sp, sp, #12
   12e10:	pop	{r4, r5, pc}
   12e14:	ldrd	r2, [r1, #8]
   12e18:	push	{r4, r5}
   12e1c:	ldrd	r4, [r0, #8]
   12e20:	cmp	r5, r3
   12e24:	cmpeq	r4, r2
   12e28:	movne	r0, #0
   12e2c:	beq	12e38 <__assert_fail@plt+0x1aac>
   12e30:	pop	{r4, r5}
   12e34:	bx	lr
   12e38:	ldrd	r4, [r0]
   12e3c:	ldrd	r2, [r1]
   12e40:	cmp	r5, r3
   12e44:	cmpeq	r4, r2
   12e48:	moveq	r0, #1
   12e4c:	movne	r0, #0
   12e50:	pop	{r4, r5}
   12e54:	bx	lr
   12e58:	push	{r4, lr}
   12e5c:	mov	r2, r1
   12e60:	mov	r3, #0
   12e64:	ldrd	r0, [r0, #8]
   12e68:	bl	1d9dc <__assert_fail@plt+0xc650>
   12e6c:	mov	r0, r2
   12e70:	pop	{r4, pc}
   12e74:	push	{r4, lr}
   12e78:	mov	r2, r1
   12e7c:	mov	r3, #0
   12e80:	ldrd	r0, [r0]
   12e84:	bl	1d9dc <__assert_fail@plt+0xc650>
   12e88:	mov	r0, r2
   12e8c:	pop	{r4, pc}
   12e90:	push	{r4, r5}
   12e94:	ldrd	r2, [r1]
   12e98:	ldrd	r4, [r0]
   12e9c:	cmp	r5, r3
   12ea0:	cmpeq	r4, r2
   12ea4:	moveq	r0, #1
   12ea8:	movne	r0, #0
   12eac:	pop	{r4, r5}
   12eb0:	bx	lr
   12eb4:	ldr	r2, [r0]
   12eb8:	ldr	r3, [r1]
   12ebc:	ldrd	r0, [r2, #160]	; 0xa0
   12ec0:	ldrd	r2, [r3, #160]	; 0xa0
   12ec4:	cmp	r1, r3
   12ec8:	cmpeq	r0, r2
   12ecc:	movhi	r0, #1
   12ed0:	movls	r0, #0
   12ed4:	movcc	r3, #1
   12ed8:	movcs	r3, #0
   12edc:	sub	r0, r0, r3
   12ee0:	bx	lr
   12ee4:	push	{r4, r5, r6, r7, lr}
   12ee8:	sub	sp, sp, #100	; 0x64
   12eec:	ldr	r4, [r0, #44]	; 0x2c
   12ef0:	ldr	r3, [r4, #48]	; 0x30
   12ef4:	tst	r3, #512	; 0x200
   12ef8:	beq	12f6c <__assert_fail@plt+0x1be0>
   12efc:	ldr	r6, [r4, #52]	; 0x34
   12f00:	mov	r7, r1
   12f04:	cmp	r6, #0
   12f08:	mov	r5, r0
   12f0c:	beq	12f38 <__assert_fail@plt+0x1bac>
   12f10:	ldrd	r2, [r5, #64]	; 0x40
   12f14:	add	r1, sp, #96	; 0x60
   12f18:	mov	r0, r6
   12f1c:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12f20:	bl	159a0 <__assert_fail@plt+0x4614>
   12f24:	cmp	r0, #0
   12f28:	beq	12f64 <__assert_fail@plt+0x1bd8>
   12f2c:	ldr	r0, [r0, #8]
   12f30:	add	sp, sp, #100	; 0x64
   12f34:	pop	{r4, r5, r6, r7, pc}
   12f38:	ldr	r3, [pc, #168]	; 12fe8 <__assert_fail@plt+0x1c5c>
   12f3c:	mov	r1, r6
   12f40:	str	r3, [sp]
   12f44:	ldr	r2, [pc, #160]	; 12fec <__assert_fail@plt+0x1c60>
   12f48:	ldr	r3, [pc, #160]	; 12ff0 <__assert_fail@plt+0x1c64>
   12f4c:	mov	r0, #13
   12f50:	bl	15c80 <__assert_fail@plt+0x48f4>
   12f54:	cmp	r0, #0
   12f58:	mov	r6, r0
   12f5c:	str	r0, [r4, #52]	; 0x34
   12f60:	bne	12f10 <__assert_fail@plt+0x1b84>
   12f64:	cmp	r7, #0
   12f68:	bge	12f78 <__assert_fail@plt+0x1bec>
   12f6c:	mov	r0, #0
   12f70:	add	sp, sp, #100	; 0x64
   12f74:	pop	{r4, r5, r6, r7, pc}
   12f78:	mov	r0, r7
   12f7c:	add	r1, sp, #8
   12f80:	bl	1102c <fstatfs64@plt>
   12f84:	cmp	r0, #0
   12f88:	bne	12f6c <__assert_fail@plt+0x1be0>
   12f8c:	cmp	r6, #0
   12f90:	beq	12fdc <__assert_fail@plt+0x1c50>
   12f94:	mov	r0, #16
   12f98:	bl	1ce1c <__assert_fail@plt+0xba90>
   12f9c:	subs	r4, r0, #0
   12fa0:	beq	12fdc <__assert_fail@plt+0x1c50>
   12fa4:	ldrd	r2, [r5, #64]	; 0x40
   12fa8:	ldr	r1, [sp, #8]
   12fac:	mov	r0, r6
   12fb0:	str	r1, [r4, #8]
   12fb4:	strd	r2, [r4]
   12fb8:	mov	r1, r4
   12fbc:	bl	165e8 <__assert_fail@plt+0x525c>
   12fc0:	cmp	r0, #0
   12fc4:	beq	12fd4 <__assert_fail@plt+0x1c48>
   12fc8:	cmp	r4, r0
   12fcc:	beq	12fdc <__assert_fail@plt+0x1c50>
   12fd0:	bl	11344 <abort@plt>
   12fd4:	mov	r0, r4
   12fd8:	bl	12dbc <__assert_fail@plt+0x1a30>
   12fdc:	ldr	r0, [sp, #8]
   12fe0:	add	sp, sp, #100	; 0x64
   12fe4:	pop	{r4, r5, r6, r7, pc}
   12fe8:			; <UNDEFINED> instruction: 0x00012dbc
   12fec:	andeq	r2, r1, r4, ror lr
   12ff0:	muleq	r1, r0, lr
   12ff4:	push	{r4, r5, r6, lr}
   12ff8:	mov	r4, r2
   12ffc:	ldr	r2, [r2, #48]	; 0x30
   13000:	sub	sp, sp, #8
   13004:	cmp	r2, #0
   13008:	add	r5, r4, #64	; 0x40
   1300c:	bne	13064 <__assert_fail@plt+0x1cd8>
   13010:	tst	r1, #1
   13014:	beq	13064 <__assert_fail@plt+0x1cd8>
   13018:	mov	r2, r5
   1301c:	ldr	r1, [r4, #24]
   13020:	mov	r0, #3
   13024:	bl	1132c <__xstat64@plt>
   13028:	cmp	r0, #0
   1302c:	beq	130a0 <__assert_fail@plt+0x1d14>
   13030:	bl	1123c <__errno_location@plt>
   13034:	ldr	r3, [r0]
   13038:	mov	r6, r0
   1303c:	cmp	r3, #2
   13040:	beq	13118 <__assert_fail@plt+0x1d8c>
   13044:	str	r3, [r4, #32]
   13048:	mov	r0, r5
   1304c:	mov	r2, #104	; 0x68
   13050:	mov	r1, #0
   13054:	bl	11254 <memset@plt>
   13058:	mov	r0, #10
   1305c:	add	sp, sp, #8
   13060:	pop	{r4, r5, r6, pc}
   13064:	lsl	r1, r1, #30
   13068:	orrs	r3, r3, r1, lsr #31
   1306c:	bne	13018 <__assert_fail@plt+0x1c8c>
   13070:	mov	r3, #256	; 0x100
   13074:	ldr	r2, [r4, #24]
   13078:	mov	r1, r0
   1307c:	str	r3, [sp]
   13080:	mov	r0, #3
   13084:	mov	r3, r5
   13088:	bl	11128 <__fxstatat64@plt>
   1308c:	cmp	r0, #0
   13090:	beq	130a0 <__assert_fail@plt+0x1d14>
   13094:	bl	1123c <__errno_location@plt>
   13098:	ldr	r3, [r0]
   1309c:	b	13044 <__assert_fail@plt+0x1cb8>
   130a0:	ldr	r0, [r4, #80]	; 0x50
   130a4:	and	r0, r0, #61440	; 0xf000
   130a8:	cmp	r0, #16384	; 0x4000
   130ac:	beq	130d0 <__assert_fail@plt+0x1d44>
   130b0:	cmp	r0, #40960	; 0xa000
   130b4:	moveq	r0, #12
   130b8:	beq	1305c <__assert_fail@plt+0x1cd0>
   130bc:	cmp	r0, #32768	; 0x8000
   130c0:	movne	r0, #3
   130c4:	moveq	r0, #8
   130c8:	add	sp, sp, #8
   130cc:	pop	{r4, r5, r6, pc}
   130d0:	ldrb	r3, [r4, #168]	; 0xa8
   130d4:	cmp	r3, #46	; 0x2e
   130d8:	beq	130e4 <__assert_fail@plt+0x1d58>
   130dc:	mov	r0, #1
   130e0:	b	1305c <__assert_fail@plt+0x1cd0>
   130e4:	ldrb	r3, [r4, #169]	; 0xa9
   130e8:	cmp	r3, #0
   130ec:	beq	13104 <__assert_fail@plt+0x1d78>
   130f0:	ldr	r3, [r4, #168]	; 0xa8
   130f4:	bic	r3, r3, #-16777216	; 0xff000000
   130f8:	bic	r3, r3, #255	; 0xff
   130fc:	cmp	r3, #11776	; 0x2e00
   13100:	bne	130dc <__assert_fail@plt+0x1d50>
   13104:	ldr	r0, [r4, #48]	; 0x30
   13108:	cmp	r0, #0
   1310c:	movne	r0, #5
   13110:	moveq	r0, #1
   13114:	b	1305c <__assert_fail@plt+0x1cd0>
   13118:	mov	r2, r5
   1311c:	ldr	r1, [r4, #24]
   13120:	mov	r0, #3
   13124:	bl	1135c <__lxstat64@plt>
   13128:	cmp	r0, #0
   1312c:	streq	r0, [r6]
   13130:	moveq	r0, #13
   13134:	beq	1305c <__assert_fail@plt+0x1cd0>
   13138:	ldr	r3, [r6]
   1313c:	b	13044 <__assert_fail@plt+0x1cb8>
   13140:	ldr	r3, [pc, #172]	; 131f4 <__assert_fail@plt+0x1e68>
   13144:	push	{r4, r5, lr}
   13148:	and	r3, r3, r0
   1314c:	cmp	r3, #0
   13150:	sub	sp, sp, #28
   13154:	bne	1319c <__assert_fail@plt+0x1e10>
   13158:	ldr	r3, [r2, #4]
   1315c:	cmp	r3, #0
   13160:	beq	13194 <__assert_fail@plt+0x1e08>
   13164:	ldr	r0, [r3, #48]	; 0x30
   13168:	cmp	r0, #0
   1316c:	blt	13194 <__assert_fail@plt+0x1e08>
   13170:	ldr	ip, [r1]
   13174:	ldrd	r0, [ip, #16]
   13178:	orrs	r1, r0, r1
   1317c:	beq	131f0 <__assert_fail@plt+0x1e64>
   13180:	ldrd	r4, [ip]
   13184:	ldrd	r0, [r2, #160]	; 0xa0
   13188:	cmp	r5, r1
   1318c:	cmpeq	r4, r0
   13190:	beq	131cc <__assert_fail@plt+0x1e40>
   13194:	add	sp, sp, #28
   13198:	pop	{r4, r5, pc}
   1319c:	ldrd	r4, [r2, #64]	; 0x40
   131a0:	ldrd	r2, [r2, #160]	; 0xa0
   131a4:	ldr	r0, [r1]
   131a8:	mov	r1, sp
   131ac:	strd	r4, [sp]
   131b0:	strd	r2, [sp, #8]
   131b4:	bl	168ac <__assert_fail@plt+0x5520>
   131b8:	cmp	r0, #0
   131bc:	beq	131f0 <__assert_fail@plt+0x1e64>
   131c0:	bl	12dbc <__assert_fail@plt+0x1a30>
   131c4:	add	sp, sp, #28
   131c8:	pop	{r4, r5, pc}
   131cc:	ldrd	r0, [ip, #8]
   131d0:	ldrd	r4, [r2, #64]	; 0x40
   131d4:	cmp	r1, r5
   131d8:	cmpeq	r0, r4
   131dc:	ldrdeq	r0, [r3, #64]	; 0x40
   131e0:	ldrdeq	r2, [r3, #160]	; 0xa0
   131e4:	strdeq	r0, [ip, #8]
   131e8:	strdeq	r2, [ip]
   131ec:	b	13194 <__assert_fail@plt+0x1e08>
   131f0:	bl	11344 <abort@plt>
   131f4:	andeq	r0, r0, r2, lsl #2
   131f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131fc:	subs	sl, r3, #0
   13200:	sub	sp, sp, #104	; 0x68
   13204:	mov	r5, r0
   13208:	mov	r6, r1
   1320c:	mov	r4, r2
   13210:	ldr	r9, [r0, #48]	; 0x30
   13214:	beq	13290 <__assert_fail@plt+0x1f04>
   13218:	ldr	r1, [pc, #612]	; 13484 <__assert_fail@plt+0x20f8>
   1321c:	mov	r0, sl
   13220:	bl	11074 <strcmp@plt>
   13224:	cmp	r0, #0
   13228:	bne	13290 <__assert_fail@plt+0x1f04>
   1322c:	tst	r9, #4
   13230:	bne	13298 <__assert_fail@plt+0x1f0c>
   13234:	cmp	r4, #0
   13238:	bge	13470 <__assert_fail@plt+0x20e4>
   1323c:	tst	r9, #512	; 0x200
   13240:	beq	13384 <__assert_fail@plt+0x1ff8>
   13244:	add	r7, r5, #60	; 0x3c
   13248:	mov	r0, r7
   1324c:	bl	16db8 <__assert_fail@plt+0x5a2c>
   13250:	cmp	r0, #0
   13254:	beq	13400 <__assert_fail@plt+0x2074>
   13258:	ldr	r2, [pc, #552]	; 13488 <__assert_fail@plt+0x20fc>
   1325c:	tst	r9, #16
   13260:	ldr	r1, [pc, #548]	; 1348c <__assert_fail@plt+0x2100>
   13264:	mov	r8, #1
   13268:	movne	r1, r2
   1326c:	mov	r2, r1
   13270:	ldr	r0, [r5, #32]
   13274:	mov	r1, sl
   13278:	bl	16eb4 <__assert_fail@plt+0x5b28>
   1327c:	mov	r7, r0
   13280:	cmp	r7, #0
   13284:	blt	13444 <__assert_fail@plt+0x20b8>
   13288:	ldr	r9, [r5, #48]	; 0x30
   1328c:	b	132cc <__assert_fail@plt+0x1f40>
   13290:	ands	r8, r9, #4
   13294:	beq	132c0 <__assert_fail@plt+0x1f34>
   13298:	mvn	r3, r4
   1329c:	lsr	r3, r3, #31
   132a0:	ands	r9, r3, r9, lsr #9
   132a4:	beq	132b4 <__assert_fail@plt+0x1f28>
   132a8:	mov	r0, r4
   132ac:	bl	11350 <close@plt>
   132b0:	mov	r9, #0
   132b4:	mov	r0, r9
   132b8:	add	sp, sp, #104	; 0x68
   132bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132c0:	cmp	r4, #0
   132c4:	movge	r7, r4
   132c8:	blt	13450 <__assert_fail@plt+0x20c4>
   132cc:	tst	r9, #2
   132d0:	bne	132f0 <__assert_fail@plt+0x1f64>
   132d4:	cmp	sl, #0
   132d8:	beq	13348 <__assert_fail@plt+0x1fbc>
   132dc:	mov	r0, sl
   132e0:	ldr	r1, [pc, #412]	; 13484 <__assert_fail@plt+0x20f8>
   132e4:	bl	11074 <strcmp@plt>
   132e8:	cmp	r0, #0
   132ec:	bne	13348 <__assert_fail@plt+0x1fbc>
   132f0:	mov	r2, sp
   132f4:	mov	r1, r7
   132f8:	mov	r0, #3
   132fc:	bl	11140 <__fxstat64@plt>
   13300:	cmp	r0, #0
   13304:	beq	13360 <__assert_fail@plt+0x1fd4>
   13308:	mvn	r9, #0
   1330c:	cmp	r4, #0
   13310:	bge	132b4 <__assert_fail@plt+0x1f28>
   13314:	bl	1123c <__errno_location@plt>
   13318:	mov	r4, r0
   1331c:	mov	r0, r7
   13320:	ldr	r5, [r4]
   13324:	bl	11350 <close@plt>
   13328:	str	r5, [r4]
   1332c:	b	132b4 <__assert_fail@plt+0x1f28>
   13330:	ldrd	r0, [r6, #160]	; 0xa0
   13334:	ldrd	r2, [sp, #96]	; 0x60
   13338:	cmp	r1, r3
   1333c:	cmpeq	r0, r2
   13340:	bne	13374 <__assert_fail@plt+0x1fe8>
   13344:	ldr	r9, [r5, #48]	; 0x30
   13348:	tst	r9, #512	; 0x200
   1334c:	bne	133a8 <__assert_fail@plt+0x201c>
   13350:	mov	r0, r7
   13354:	bl	112fc <fchdir@plt>
   13358:	mov	r9, r0
   1335c:	b	1330c <__assert_fail@plt+0x1f80>
   13360:	ldrd	r0, [r6, #64]	; 0x40
   13364:	ldrd	r2, [sp]
   13368:	cmp	r1, r3
   1336c:	cmpeq	r0, r2
   13370:	beq	13330 <__assert_fail@plt+0x1fa4>
   13374:	bl	1123c <__errno_location@plt>
   13378:	mov	r3, #2
   1337c:	str	r3, [r0]
   13380:	b	13308 <__assert_fail@plt+0x1f7c>
   13384:	ldr	r2, [pc, #252]	; 13488 <__assert_fail@plt+0x20fc>
   13388:	tst	r9, #16
   1338c:	ldr	r1, [pc, #248]	; 1348c <__assert_fail@plt+0x2100>
   13390:	mov	r8, #1
   13394:	movne	r1, r2
   13398:	mov	r0, sl
   1339c:	bl	1d284 <__assert_fail@plt+0xbef8>
   133a0:	mov	r7, r0
   133a4:	b	13280 <__assert_fail@plt+0x1ef4>
   133a8:	ldr	r1, [r5, #32]
   133ac:	cmn	r1, #100	; 0x64
   133b0:	sub	r3, r7, r1
   133b4:	clz	r3, r3
   133b8:	lsr	r3, r3, #5
   133bc:	moveq	r3, #0
   133c0:	cmp	r3, #0
   133c4:	bne	1344c <__assert_fail@plt+0x20c0>
   133c8:	cmp	r8, #0
   133cc:	beq	13430 <__assert_fail@plt+0x20a4>
   133d0:	lsr	r3, r9, #2
   133d4:	eor	r3, r3, #1
   133d8:	cmp	r1, #0
   133dc:	movlt	r3, #0
   133e0:	andge	r3, r3, #1
   133e4:	cmp	r3, #0
   133e8:	beq	133f4 <__assert_fail@plt+0x2068>
   133ec:	mov	r0, r1
   133f0:	bl	11350 <close@plt>
   133f4:	str	r7, [r5, #32]
   133f8:	mov	r9, #0
   133fc:	b	132b4 <__assert_fail@plt+0x1f28>
   13400:	mov	r0, r7
   13404:	bl	16e04 <__assert_fail@plt+0x5a78>
   13408:	ldr	r9, [r5, #48]	; 0x30
   1340c:	subs	r7, r0, #0
   13410:	movlt	r8, #1
   13414:	andlt	r3, r9, #512	; 0x200
   13418:	blt	13454 <__assert_fail@plt+0x20c8>
   1341c:	tst	r9, #2
   13420:	mov	r4, r7
   13424:	mov	r8, #1
   13428:	beq	13348 <__assert_fail@plt+0x1fbc>
   1342c:	b	132f0 <__assert_fail@plt+0x1f64>
   13430:	add	r0, r5, #60	; 0x3c
   13434:	bl	16dc0 <__assert_fail@plt+0x5a34>
   13438:	cmp	r0, #0
   1343c:	bge	133f0 <__assert_fail@plt+0x2064>
   13440:	b	133f4 <__assert_fail@plt+0x2068>
   13444:	mvn	r9, #0
   13448:	b	132b4 <__assert_fail@plt+0x1f28>
   1344c:	bl	11344 <abort@plt>
   13450:	and	r3, r9, #512	; 0x200
   13454:	ldr	r2, [pc, #48]	; 1348c <__assert_fail@plt+0x2100>
   13458:	tst	r9, #16
   1345c:	ldr	r1, [pc, #36]	; 13488 <__assert_fail@plt+0x20fc>
   13460:	moveq	r1, r2
   13464:	cmp	r3, #0
   13468:	bne	1326c <__assert_fail@plt+0x1ee0>
   1346c:	b	13398 <__assert_fail@plt+0x200c>
   13470:	tst	r9, #2
   13474:	mov	r7, r4
   13478:	mov	r8, #1
   1347c:	beq	132dc <__assert_fail@plt+0x1f50>
   13480:	b	132f0 <__assert_fail@plt+0x1f64>
   13484:	andeq	lr, r1, r4, ror #26
   13488:	andeq	ip, r8, r0, lsl #18
   1348c:	andeq	r4, r8, r0, lsl #18
   13490:	ldr	r3, [r0]
   13494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13498:	sub	sp, sp, #68	; 0x44
   1349c:	mov	r6, r0
   134a0:	str	r3, [sp, #8]
   134a4:	ldr	r3, [r3, #12]
   134a8:	str	r1, [sp, #40]	; 0x28
   134ac:	cmp	r3, #0
   134b0:	str	r3, [sp, #44]	; 0x2c
   134b4:	beq	13a9c <__assert_fail@plt+0x2710>
   134b8:	mov	r0, r3
   134bc:	bl	112f0 <dirfd@plt>
   134c0:	cmp	r0, #0
   134c4:	str	r0, [sp, #60]	; 0x3c
   134c8:	blt	13ed8 <__assert_fail@plt+0x2b4c>
   134cc:	ldr	r3, [r6, #44]	; 0x2c
   134d0:	cmp	r3, #0
   134d4:	beq	1415c <__assert_fail@plt+0x2dd0>
   134d8:	mvn	r3, #0
   134dc:	str	r3, [sp, #24]
   134e0:	ldr	r0, [r6, #48]	; 0x30
   134e4:	ldr	r2, [sp, #8]
   134e8:	mov	r3, #1
   134ec:	str	r3, [sp, #52]	; 0x34
   134f0:	ldr	r3, [r2, #40]	; 0x28
   134f4:	ldr	r1, [r2, #28]
   134f8:	sub	r2, r3, #1
   134fc:	ldrb	r1, [r1, r2]
   13500:	cmp	r1, #47	; 0x2f
   13504:	moveq	r3, r2
   13508:	ands	r0, r0, #4
   1350c:	movne	r0, #47	; 0x2f
   13510:	ldrne	r2, [r6, #24]
   13514:	streq	r0, [sp, #32]
   13518:	addne	r1, r2, r3
   1351c:	strbne	r0, [r2, r3]
   13520:	addne	r2, r1, #1
   13524:	strne	r2, [sp, #32]
   13528:	ldr	r2, [sp, #8]
   1352c:	add	r3, r3, #1
   13530:	ldr	r1, [r6, #36]	; 0x24
   13534:	ldr	r2, [r2, #48]	; 0x30
   13538:	mov	r0, r3
   1353c:	str	r3, [sp, #12]
   13540:	sub	r1, r1, r0
   13544:	mov	r3, #0
   13548:	add	r2, r2, #1
   1354c:	mov	r7, r3
   13550:	str	r3, [sp, #48]	; 0x30
   13554:	str	r1, [sp, #20]
   13558:	str	r2, [sp, #28]
   1355c:	str	r3, [sp, #36]	; 0x24
   13560:	str	r3, [sp]
   13564:	mov	sl, r3
   13568:	str	r3, [sp, #16]
   1356c:	b	135f0 <__assert_fail@plt+0x2264>
   13570:	tst	r3, #251	; 0xfb
   13574:	beq	13704 <__assert_fail@plt+0x2378>
   13578:	lsr	r2, r1, #4
   1357c:	cmp	r3, #10
   13580:	orrne	r2, r2, #1
   13584:	tst	r2, #1
   13588:	beq	13bc8 <__assert_fail@plt+0x283c>
   1358c:	sub	r3, r3, #1
   13590:	mov	r2, #11
   13594:	cmp	r3, #11
   13598:	strh	r2, [r4, #56]	; 0x38
   1359c:	bhi	14178 <__assert_fail@plt+0x2dec>
   135a0:	ldr	r2, [pc, #3040]	; 14188 <__assert_fail@plt+0x2dfc>
   135a4:	ldr	r1, [r2, r3, lsl #2]
   135a8:	mov	r2, #1
   135ac:	mov	r3, #0
   135b0:	str	r1, [r4, #80]	; 0x50
   135b4:	strd	r2, [r4, #112]	; 0x70
   135b8:	ldr	r3, [sp, #16]
   135bc:	str	r7, [r4, #8]
   135c0:	cmp	r3, #0
   135c4:	streq	r4, [sp, #16]
   135c8:	ldrne	r3, [sp]
   135cc:	strne	r4, [r3, #8]
   135d0:	ldr	r3, [pc, #2996]	; 1418c <__assert_fail@plt+0x2e00>
   135d4:	cmp	sl, r3
   135d8:	beq	13854 <__assert_fail@plt+0x24c8>
   135dc:	ldr	r3, [sp, #24]
   135e0:	add	sl, sl, #1
   135e4:	cmp	r3, sl
   135e8:	bls	1396c <__assert_fail@plt+0x25e0>
   135ec:	str	r4, [sp]
   135f0:	ldr	r3, [sp, #8]
   135f4:	ldr	r4, [r3, #12]
   135f8:	cmp	r4, #0
   135fc:	beq	1396c <__assert_fail@plt+0x25e0>
   13600:	bl	1123c <__errno_location@plt>
   13604:	mov	fp, r0
   13608:	mov	r0, r4
   1360c:	str	r7, [fp]
   13610:	bl	112d8 <readdir64@plt>
   13614:	subs	r8, r0, #0
   13618:	beq	13d68 <__assert_fail@plt+0x29dc>
   1361c:	ldr	r3, [r6, #48]	; 0x30
   13620:	tst	r3, #32
   13624:	bne	13634 <__assert_fail@plt+0x22a8>
   13628:	ldrb	r3, [r8, #19]
   1362c:	cmp	r3, #46	; 0x2e
   13630:	beq	138b8 <__assert_fail@plt+0x252c>
   13634:	add	r1, r8, #19
   13638:	mov	r0, r1
   1363c:	str	r1, [sp, #4]
   13640:	bl	1120c <strlen@plt>
   13644:	mov	r5, r0
   13648:	add	r0, r0, #176	; 0xb0
   1364c:	bic	r0, r0, #7
   13650:	bl	1ce1c <__assert_fail@plt+0xba90>
   13654:	subs	r4, r0, #0
   13658:	beq	13960 <__assert_fail@plt+0x25d4>
   1365c:	add	r9, r4, #168	; 0xa8
   13660:	ldr	r1, [sp, #4]
   13664:	mov	r2, r5
   13668:	mov	r0, r9
   1366c:	bl	110c8 <memcpy@plt>
   13670:	ldr	r3, [sp, #20]
   13674:	add	r1, r4, r5
   13678:	ldr	r2, [r6, #24]
   1367c:	mov	r0, #196608	; 0x30000
   13680:	cmp	r3, r5
   13684:	strb	r7, [r1, #168]	; 0xa8
   13688:	str	r5, [r4, #52]	; 0x34
   1368c:	str	r6, [r4, #44]	; 0x2c
   13690:	str	r7, [r4, #32]
   13694:	str	r7, [r4, #12]
   13698:	str	r7, [r4, #16]
   1369c:	str	r7, [r4, #20]
   136a0:	str	r2, [r4, #28]
   136a4:	str	r0, [r4, #58]	; 0x3a
   136a8:	bls	1373c <__assert_fail@plt+0x23b0>
   136ac:	ldr	r3, [sp, #12]
   136b0:	adds	r5, r3, r5
   136b4:	bcs	137bc <__assert_fail@plt+0x2430>
   136b8:	ldrd	r2, [r8]
   136bc:	ldr	r1, [r6, #48]	; 0x30
   136c0:	ldr	r0, [sp, #28]
   136c4:	strd	r2, [r4, #160]	; 0xa0
   136c8:	ldr	r3, [r6]
   136cc:	tst	r1, #4
   136d0:	str	r0, [r4, #48]	; 0x30
   136d4:	str	r5, [r4, #40]	; 0x28
   136d8:	str	r3, [r4, #4]
   136dc:	streq	r9, [r4, #24]
   136e0:	bne	13830 <__assert_fail@plt+0x24a4>
   136e4:	ldr	r3, [r6, #44]	; 0x2c
   136e8:	cmp	r3, #0
   136ec:	beq	136f8 <__assert_fail@plt+0x236c>
   136f0:	tst	r1, #1024	; 0x400
   136f4:	beq	138a0 <__assert_fail@plt+0x2514>
   136f8:	tst	r1, #8
   136fc:	ldrb	r3, [r8, #18]
   13700:	bne	13570 <__assert_fail@plt+0x21e4>
   13704:	sub	r3, r3, #1
   13708:	cmp	r3, #11
   1370c:	mov	r2, #11
   13710:	strh	r2, [r4, #56]	; 0x38
   13714:	strhi	r7, [r4, #80]	; 0x50
   13718:	movhi	r2, #2
   1371c:	movhi	r3, #0
   13720:	bhi	135b4 <__assert_fail@plt+0x2228>
   13724:	ldr	r2, [pc, #2652]	; 14188 <__assert_fail@plt+0x2dfc>
   13728:	ldr	r1, [r2, r3, lsl #2]
   1372c:	mov	r2, #2
   13730:	mov	r3, #0
   13734:	str	r1, [r4, #80]	; 0x50
   13738:	b	135b4 <__assert_fail@plt+0x2228>
   1373c:	ldr	r0, [r6, #36]	; 0x24
   13740:	ldr	r3, [sp, #12]
   13744:	add	r1, r0, #256	; 0x100
   13748:	add	r1, r1, #1
   1374c:	add	r1, r1, r3
   13750:	add	r1, r1, r5
   13754:	cmp	r0, r1
   13758:	bhi	138d8 <__assert_fail@plt+0x254c>
   1375c:	mov	r0, r2
   13760:	str	r1, [r6, #36]	; 0x24
   13764:	str	r2, [sp, #4]
   13768:	bl	1ce48 <__assert_fail@plt+0xbabc>
   1376c:	ldr	r2, [sp, #4]
   13770:	cmp	r0, #0
   13774:	beq	13f54 <__assert_fail@plt+0x2bc8>
   13778:	cmp	r2, r0
   1377c:	str	r0, [r6, #24]
   13780:	beq	137a0 <__assert_fail@plt+0x2414>
   13784:	ldr	r2, [r6, #48]	; 0x30
   13788:	tst	r2, #4
   1378c:	ldrne	r3, [sp, #12]
   13790:	addne	r3, r0, r3
   13794:	strne	r3, [sp, #32]
   13798:	mov	r3, #1
   1379c:	str	r3, [sp, #36]	; 0x24
   137a0:	ldr	r2, [r6, #36]	; 0x24
   137a4:	ldr	r3, [sp, #12]
   137a8:	sub	r3, r2, r3
   137ac:	str	r3, [sp, #20]
   137b0:	ldr	r3, [sp, #12]
   137b4:	adds	r5, r3, r5
   137b8:	bcc	136b8 <__assert_fail@plt+0x232c>
   137bc:	ldr	r8, [sp, #16]
   137c0:	mov	r0, r4
   137c4:	bl	12dbc <__assert_fail@plt+0x1a30>
   137c8:	cmp	r8, #0
   137cc:	beq	137f4 <__assert_fail@plt+0x2468>
   137d0:	ldr	r3, [r8, #12]
   137d4:	ldr	r4, [r8, #8]
   137d8:	subs	r0, r3, #0
   137dc:	beq	137e4 <__assert_fail@plt+0x2458>
   137e0:	bl	11368 <closedir@plt>
   137e4:	mov	r0, r8
   137e8:	bl	12dbc <__assert_fail@plt+0x1a30>
   137ec:	subs	r8, r4, #0
   137f0:	bne	137d0 <__assert_fail@plt+0x2444>
   137f4:	ldr	r4, [sp, #8]
   137f8:	mov	r8, #0
   137fc:	ldr	r0, [r4, #12]
   13800:	bl	11368 <closedir@plt>
   13804:	ldr	r3, [r6, #48]	; 0x30
   13808:	mov	r1, #7
   1380c:	orr	r3, r3, #8192	; 0x2000
   13810:	mov	r2, #36	; 0x24
   13814:	str	r8, [r4, #12]
   13818:	strh	r1, [r4, #56]	; 0x38
   1381c:	str	r3, [r6, #48]	; 0x30
   13820:	str	r2, [fp]
   13824:	mov	r0, r8
   13828:	add	sp, sp, #68	; 0x44
   1382c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13830:	ldr	r0, [r4, #28]
   13834:	ldr	r2, [r4, #52]	; 0x34
   13838:	mov	r1, r9
   1383c:	str	r0, [r4, #24]
   13840:	add	r2, r2, #1
   13844:	ldr	r0, [sp, #32]
   13848:	bl	11098 <memmove@plt>
   1384c:	ldr	r1, [r6, #48]	; 0x30
   13850:	b	136e4 <__assert_fail@plt+0x2358>
   13854:	ldr	r3, [r6, #44]	; 0x2c
   13858:	cmp	r3, #0
   1385c:	bne	135dc <__assert_fail@plt+0x2250>
   13860:	ldr	r1, [sp, #60]	; 0x3c
   13864:	ldr	r0, [sp, #8]
   13868:	bl	12ee4 <__assert_fail@plt+0x1b58>
   1386c:	ldr	r3, [pc, #2332]	; 14190 <__assert_fail@plt+0x2e04>
   13870:	cmp	r0, r3
   13874:	beq	13898 <__assert_fail@plt+0x250c>
   13878:	ldr	r3, [pc, #2324]	; 14194 <__assert_fail@plt+0x2e08>
   1387c:	cmp	r0, r3
   13880:	beq	13898 <__assert_fail@plt+0x250c>
   13884:	ldr	r3, [pc, #2316]	; 14198 <__assert_fail@plt+0x2e0c>
   13888:	cmp	r0, r3
   1388c:	movne	r3, #1
   13890:	strne	r3, [sp, #48]	; 0x30
   13894:	bne	135dc <__assert_fail@plt+0x2250>
   13898:	str	r7, [sp, #48]	; 0x30
   1389c:	b	135dc <__assert_fail@plt+0x2250>
   138a0:	mov	r3, r7
   138a4:	mov	r2, r4
   138a8:	ldr	r0, [r6, #32]
   138ac:	bl	12ff4 <__assert_fail@plt+0x1c68>
   138b0:	strh	r0, [r4, #56]	; 0x38
   138b4:	b	135b8 <__assert_fail@plt+0x222c>
   138b8:	ldrb	r3, [r8, #20]
   138bc:	cmp	r3, #0
   138c0:	beq	138d0 <__assert_fail@plt+0x2544>
   138c4:	ldrh	r3, [r8, #20]
   138c8:	cmp	r3, #46	; 0x2e
   138cc:	bne	13634 <__assert_fail@plt+0x22a8>
   138d0:	ldr	r4, [sp]
   138d4:	b	135ec <__assert_fail@plt+0x2260>
   138d8:	mov	r0, r2
   138dc:	ldr	r8, [sp, #16]
   138e0:	bl	12dbc <__assert_fail@plt+0x1a30>
   138e4:	mov	r3, #36	; 0x24
   138e8:	mov	r5, r3
   138ec:	str	r7, [r6, #24]
   138f0:	str	r3, [fp]
   138f4:	mov	r0, r4
   138f8:	bl	12dbc <__assert_fail@plt+0x1a30>
   138fc:	cmp	r8, #0
   13900:	beq	13928 <__assert_fail@plt+0x259c>
   13904:	ldr	r3, [r8, #12]
   13908:	ldr	r4, [r8, #8]
   1390c:	subs	r0, r3, #0
   13910:	beq	13918 <__assert_fail@plt+0x258c>
   13914:	bl	11368 <closedir@plt>
   13918:	mov	r0, r8
   1391c:	bl	12dbc <__assert_fail@plt+0x1a30>
   13920:	subs	r8, r4, #0
   13924:	bne	13904 <__assert_fail@plt+0x2578>
   13928:	ldr	r4, [sp, #8]
   1392c:	mov	r8, #0
   13930:	ldr	r0, [r4, #12]
   13934:	bl	11368 <closedir@plt>
   13938:	ldr	r3, [r6, #48]	; 0x30
   1393c:	mov	r2, #7
   13940:	orr	r3, r3, #8192	; 0x2000
   13944:	str	r8, [r4, #12]
   13948:	strh	r2, [r4, #56]	; 0x38
   1394c:	mov	r0, r8
   13950:	str	r3, [r6, #48]	; 0x30
   13954:	str	r5, [fp]
   13958:	add	sp, sp, #68	; 0x44
   1395c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13960:	ldr	r8, [sp, #16]
   13964:	ldr	r5, [fp]
   13968:	b	138f4 <__assert_fail@plt+0x2568>
   1396c:	ldr	r8, [sp, #16]
   13970:	ldr	r3, [sp, #36]	; 0x24
   13974:	cmp	r3, #0
   13978:	bne	13dc0 <__assert_fail@plt+0x2a34>
   1397c:	ldr	r3, [r6, #48]	; 0x30
   13980:	tst	r3, #4
   13984:	beq	139b0 <__assert_fail@plt+0x2624>
   13988:	ldr	r3, [r6, #36]	; 0x24
   1398c:	ldr	r2, [sp, #12]
   13990:	cmp	sl, #0
   13994:	cmpne	r3, r2
   13998:	ldreq	r3, [sp, #32]
   1399c:	subeq	r3, r3, #1
   139a0:	streq	r3, [sp, #32]
   139a4:	ldr	r2, [sp, #32]
   139a8:	mov	r3, #0
   139ac:	strb	r3, [r2]
   139b0:	ldr	r3, [sp, #52]	; 0x34
   139b4:	ldr	r2, [sp, #44]	; 0x2c
   139b8:	cmp	r2, #0
   139bc:	movne	r3, #0
   139c0:	andeq	r3, r3, #1
   139c4:	cmp	r3, #0
   139c8:	beq	13a58 <__assert_fail@plt+0x26cc>
   139cc:	ldr	r3, [sp, #40]	; 0x28
   139d0:	cmp	sl, #0
   139d4:	cmpne	r3, #1
   139d8:	beq	13c64 <__assert_fail@plt+0x28d8>
   139dc:	ldr	r3, [sp, #48]	; 0x30
   139e0:	cmp	r3, #0
   139e4:	bne	13e44 <__assert_fail@plt+0x2ab8>
   139e8:	ldr	r4, [r6, #44]	; 0x2c
   139ec:	cmp	r4, #0
   139f0:	cmpne	sl, #1
   139f4:	bls	13824 <__assert_fail@plt+0x2498>
   139f8:	ldr	r3, [r6, #40]	; 0x28
   139fc:	cmp	sl, r3
   13a00:	bls	13bf8 <__assert_fail@plt+0x286c>
   13a04:	add	r1, sl, #40	; 0x28
   13a08:	cmn	r1, #-1073741823	; 0xc0000001
   13a0c:	str	r1, [r6, #40]	; 0x28
   13a10:	bhi	13f3c <__assert_fail@plt+0x2bb0>
   13a14:	lsl	r1, r1, #2
   13a18:	ldr	r0, [r6, #8]
   13a1c:	bl	1ce48 <__assert_fail@plt+0xbabc>
   13a20:	cmp	r0, #0
   13a24:	beq	13f3c <__assert_fail@plt+0x2bb0>
   13a28:	str	r0, [r6, #8]
   13a2c:	b	13bfc <__assert_fail@plt+0x2870>
   13a30:	ldr	r1, [sp, #8]
   13a34:	ldr	r3, [pc, #1888]	; 1419c <__assert_fail@plt+0x2e10>
   13a38:	mvn	r2, #0
   13a3c:	ldr	r1, [r1, #4]
   13a40:	mov	r0, r6
   13a44:	bl	131f8 <__assert_fail@plt+0x1e6c>
   13a48:	adds	r5, r0, #0
   13a4c:	movne	r5, #1
   13a50:	cmp	r5, #0
   13a54:	bne	14000 <__assert_fail@plt+0x2c74>
   13a58:	cmp	sl, #0
   13a5c:	bne	139dc <__assert_fail@plt+0x2650>
   13a60:	ldr	r3, [sp, #40]	; 0x28
   13a64:	cmp	r3, #3
   13a68:	beq	13fc8 <__assert_fail@plt+0x2c3c>
   13a6c:	cmp	r8, #0
   13a70:	beq	13ef8 <__assert_fail@plt+0x2b6c>
   13a74:	ldr	r3, [r8, #12]
   13a78:	ldr	r4, [r8, #8]
   13a7c:	subs	r0, r3, #0
   13a80:	beq	13a88 <__assert_fail@plt+0x26fc>
   13a84:	bl	11368 <closedir@plt>
   13a88:	mov	r0, r8
   13a8c:	bl	12dbc <__assert_fail@plt+0x1a30>
   13a90:	subs	r8, r4, #0
   13a94:	bne	13a74 <__assert_fail@plt+0x26e8>
   13a98:	b	13ef8 <__assert_fail@plt+0x2b6c>
   13a9c:	ldr	r3, [r0, #48]	; 0x30
   13aa0:	ldr	ip, [sp, #8]
   13aa4:	and	r2, r3, #516	; 0x204
   13aa8:	cmp	r2, #512	; 0x200
   13aac:	mvnne	r0, #99	; 0x63
   13ab0:	ldreq	r0, [r0, #32]
   13ab4:	ands	r2, r3, #16
   13ab8:	ldr	r1, [ip, #24]
   13abc:	bne	13bd8 <__assert_fail@plt+0x284c>
   13ac0:	add	r3, sp, #60	; 0x3c
   13ac4:	bl	16eec <__assert_fail@plt+0x5b60>
   13ac8:	ldr	r3, [sp, #8]
   13acc:	cmp	r0, #0
   13ad0:	mov	r8, r0
   13ad4:	str	r0, [r3, #12]
   13ad8:	beq	14048 <__assert_fail@plt+0x2cbc>
   13adc:	ldrh	r3, [r3, #56]	; 0x38
   13ae0:	cmp	r3, #11
   13ae4:	beq	14070 <__assert_fail@plt+0x2ce4>
   13ae8:	ldr	r0, [r6, #48]	; 0x30
   13aec:	tst	r0, #256	; 0x100
   13af0:	bne	13ccc <__assert_fail@plt+0x2940>
   13af4:	ldr	r2, [r6, #44]	; 0x2c
   13af8:	ldr	r3, [pc, #1696]	; 141a0 <__assert_fail@plt+0x2e14>
   13afc:	cmp	r2, #0
   13b00:	mvnne	r3, #0
   13b04:	str	r3, [sp, #24]
   13b08:	ldr	r3, [sp, #40]	; 0x28
   13b0c:	cmp	r3, #2
   13b10:	beq	13f74 <__assert_fail@plt+0x2be8>
   13b14:	ldr	r3, [r6, #48]	; 0x30
   13b18:	and	r3, r3, #56	; 0x38
   13b1c:	cmp	r3, #24
   13b20:	beq	14090 <__assert_fail@plt+0x2d04>
   13b24:	ldr	r3, [sp, #40]	; 0x28
   13b28:	mov	r4, #1
   13b2c:	sub	r5, r3, #3
   13b30:	clz	r5, r5
   13b34:	lsr	r5, r5, #5
   13b38:	ldr	r3, [r6, #48]	; 0x30
   13b3c:	tst	r3, #512	; 0x200
   13b40:	bne	13fe4 <__assert_fail@plt+0x2c58>
   13b44:	ldr	r2, [sp, #60]	; 0x3c
   13b48:	cmp	r2, #0
   13b4c:	blt	13b68 <__assert_fail@plt+0x27dc>
   13b50:	mov	r3, #0
   13b54:	ldr	r1, [sp, #8]
   13b58:	mov	r0, r6
   13b5c:	bl	131f8 <__assert_fail@plt+0x1e6c>
   13b60:	cmp	r0, #0
   13b64:	beq	134e0 <__assert_fail@plt+0x2154>
   13b68:	tst	r4, r5
   13b6c:	bne	140e8 <__assert_fail@plt+0x2d5c>
   13b70:	ldr	r4, [sp, #8]
   13b74:	ldrh	r3, [r4, #58]	; 0x3a
   13b78:	ldr	r0, [r4, #12]
   13b7c:	orr	r3, r3, #1
   13b80:	strh	r3, [r4, #58]	; 0x3a
   13b84:	bl	11368 <closedir@plt>
   13b88:	ldr	r0, [r6, #48]	; 0x30
   13b8c:	mov	r3, #0
   13b90:	tst	r0, #512	; 0x200
   13b94:	str	r3, [r4, #12]
   13b98:	beq	13bb4 <__assert_fail@plt+0x2828>
   13b9c:	ldr	r3, [sp, #60]	; 0x3c
   13ba0:	cmp	r3, #0
   13ba4:	blt	13bb4 <__assert_fail@plt+0x2828>
   13ba8:	mov	r0, r3
   13bac:	bl	11350 <close@plt>
   13bb0:	ldr	r0, [r6, #48]	; 0x30
   13bb4:	ldr	r2, [sp, #8]
   13bb8:	mov	r3, #0
   13bbc:	str	r3, [sp, #52]	; 0x34
   13bc0:	str	r3, [r2, #12]
   13bc4:	b	134f0 <__assert_fail@plt+0x2164>
   13bc8:	mov	r3, #11
   13bcc:	strh	r3, [r4, #56]	; 0x38
   13bd0:	mov	r3, #9
   13bd4:	b	13724 <__assert_fail@plt+0x2398>
   13bd8:	tst	r3, #1
   13bdc:	moveq	r2, #32768	; 0x8000
   13be0:	beq	13ac0 <__assert_fail@plt+0x2734>
   13be4:	ldr	r2, [ip, #48]	; 0x30
   13be8:	cmp	r2, #0
   13bec:	movne	r2, #32768	; 0x8000
   13bf0:	moveq	r2, #0
   13bf4:	b	13ac0 <__assert_fail@plt+0x2734>
   13bf8:	ldr	r0, [r6, #8]
   13bfc:	cmp	r8, #0
   13c00:	movne	r2, r0
   13c04:	beq	13c18 <__assert_fail@plt+0x288c>
   13c08:	str	r8, [r2], #4
   13c0c:	ldr	r8, [r8, #8]
   13c10:	cmp	r8, #0
   13c14:	bne	13c08 <__assert_fail@plt+0x287c>
   13c18:	mov	r3, r4
   13c1c:	mov	r2, #4
   13c20:	mov	r1, sl
   13c24:	bl	11308 <qsort@plt>
   13c28:	ldr	ip, [r6, #8]
   13c2c:	sub	r3, sl, #1
   13c30:	mov	r2, ip
   13c34:	ldr	r8, [ip]
   13c38:	ldr	r1, [r2]
   13c3c:	ldr	r0, [r2, #4]!
   13c40:	subs	r3, r3, #1
   13c44:	str	r0, [r1, #8]
   13c48:	bne	13c38 <__assert_fail@plt+0x28ac>
   13c4c:	add	sl, ip, sl, lsl #2
   13c50:	mov	r0, r8
   13c54:	ldr	r2, [sl, #-4]
   13c58:	str	r3, [r2, #8]
   13c5c:	add	sp, sp, #68	; 0x44
   13c60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c64:	ldr	r3, [sp, #8]
   13c68:	ldr	r3, [r3, #48]	; 0x30
   13c6c:	cmp	r3, #0
   13c70:	bne	13a30 <__assert_fail@plt+0x26a4>
   13c74:	ldr	r2, [r6, #48]	; 0x30
   13c78:	tst	r2, #4
   13c7c:	movne	r5, r3
   13c80:	addne	r4, r6, #60	; 0x3c
   13c84:	bne	13cb4 <__assert_fail@plt+0x2928>
   13c88:	tst	r2, #512	; 0x200
   13c8c:	bne	14100 <__assert_fail@plt+0x2d74>
   13c90:	ldr	r0, [r6, #28]
   13c94:	bl	112fc <fchdir@plt>
   13c98:	add	r4, r6, #60	; 0x3c
   13c9c:	adds	r5, r0, #0
   13ca0:	movne	r5, #1
   13ca4:	b	13cb4 <__assert_fail@plt+0x2928>
   13ca8:	bl	16e04 <__assert_fail@plt+0x5a78>
   13cac:	cmp	r0, #0
   13cb0:	bge	13f34 <__assert_fail@plt+0x2ba8>
   13cb4:	mov	r0, r4
   13cb8:	bl	16db8 <__assert_fail@plt+0x5a2c>
   13cbc:	cmp	r0, #0
   13cc0:	mov	r0, r4
   13cc4:	beq	13ca8 <__assert_fail@plt+0x291c>
   13cc8:	b	13a50 <__assert_fail@plt+0x26c4>
   13ccc:	ldr	r5, [sp, #8]
   13cd0:	add	r1, r6, #56	; 0x38
   13cd4:	mov	r2, r5
   13cd8:	bl	13140 <__assert_fail@plt+0x1db4>
   13cdc:	mov	r3, #0
   13ce0:	mov	r2, r5
   13ce4:	ldr	r1, [r6, #48]	; 0x30
   13ce8:	ldr	r0, [r6, #32]
   13cec:	bl	12ff4 <__assert_fail@plt+0x1c68>
   13cf0:	ldr	r2, [r6, #48]	; 0x30
   13cf4:	ldr	r3, [pc, #1192]	; 141a4 <__assert_fail@plt+0x2e18>
   13cf8:	mov	r7, r5
   13cfc:	and	r3, r3, r2
   13d00:	cmp	r3, #0
   13d04:	beq	13f88 <__assert_fail@plt+0x2bfc>
   13d08:	mov	r0, #24
   13d0c:	bl	1ce1c <__assert_fail@plt+0xba90>
   13d10:	subs	r4, r0, #0
   13d14:	beq	1412c <__assert_fail@plt+0x2da0>
   13d18:	ldrd	r0, [r5, #160]	; 0xa0
   13d1c:	ldrd	r2, [r5, #64]	; 0x40
   13d20:	str	r5, [r4, #16]
   13d24:	strd	r0, [r4, #8]
   13d28:	strd	r2, [r4]
   13d2c:	mov	r1, r4
   13d30:	ldr	r0, [r6, #56]	; 0x38
   13d34:	bl	165e8 <__assert_fail@plt+0x525c>
   13d38:	cmp	r4, r0
   13d3c:	mov	r5, r0
   13d40:	beq	13af4 <__assert_fail@plt+0x2768>
   13d44:	mov	r0, r4
   13d48:	bl	12dbc <__assert_fail@plt+0x1a30>
   13d4c:	cmp	r5, #0
   13d50:	beq	1412c <__assert_fail@plt+0x2da0>
   13d54:	ldr	r2, [r5, #16]
   13d58:	mov	r3, #2
   13d5c:	str	r2, [r7]
   13d60:	strh	r3, [r7, #56]	; 0x38
   13d64:	b	13af4 <__assert_fail@plt+0x2768>
   13d68:	ldr	r3, [fp]
   13d6c:	ldr	r8, [sp, #16]
   13d70:	cmp	r3, #0
   13d74:	beq	13d98 <__assert_fail@plt+0x2a0c>
   13d78:	ldr	r2, [sp, #44]	; 0x2c
   13d7c:	ldr	r1, [sp, #8]
   13d80:	cmp	sl, #0
   13d84:	cmpeq	r2, #0
   13d88:	moveq	r2, #4
   13d8c:	movne	r2, #7
   13d90:	str	r3, [r1, #32]
   13d94:	strh	r2, [r1, #56]	; 0x38
   13d98:	ldr	r4, [sp, #8]
   13d9c:	ldr	r0, [r4, #12]
   13da0:	cmp	r0, #0
   13da4:	beq	13970 <__assert_fail@plt+0x25e4>
   13da8:	bl	11368 <closedir@plt>
   13dac:	mov	r3, #0
   13db0:	str	r3, [r4, #12]
   13db4:	ldr	r3, [sp, #36]	; 0x24
   13db8:	cmp	r3, #0
   13dbc:	beq	1397c <__assert_fail@plt+0x25f0>
   13dc0:	ldr	r1, [r6, #4]
   13dc4:	ldr	r0, [r6, #24]
   13dc8:	cmp	r1, #0
   13dcc:	beq	13dfc <__assert_fail@plt+0x2a70>
   13dd0:	ldr	r3, [r1, #24]
   13dd4:	add	r2, r1, #168	; 0xa8
   13dd8:	cmp	r3, r2
   13ddc:	ldrne	r2, [r1, #28]
   13de0:	str	r0, [r1, #28]
   13de4:	subne	r3, r3, r2
   13de8:	addne	r3, r0, r3
   13dec:	strne	r3, [r1, #24]
   13df0:	ldr	r1, [r1, #8]
   13df4:	cmp	r1, #0
   13df8:	bne	13dd0 <__assert_fail@plt+0x2a44>
   13dfc:	mov	r3, r8
   13e00:	b	13e30 <__assert_fail@plt+0x2aa4>
   13e04:	ldr	r2, [r3, #24]
   13e08:	cmp	r2, r1
   13e0c:	ldrne	r1, [r3, #28]
   13e10:	str	r0, [r3, #28]
   13e14:	subne	r2, r2, r1
   13e18:	addne	r2, r0, r2
   13e1c:	strne	r2, [r3, #24]
   13e20:	ldr	r2, [r3, #8]
   13e24:	cmp	r2, #0
   13e28:	ldreq	r2, [r3, #4]
   13e2c:	mov	r3, r2
   13e30:	ldr	r2, [r3, #48]	; 0x30
   13e34:	add	r1, r3, #168	; 0xa8
   13e38:	cmp	r2, #0
   13e3c:	bge	13e04 <__assert_fail@plt+0x2a78>
   13e40:	b	1397c <__assert_fail@plt+0x25f0>
   13e44:	ldr	r2, [r6, #40]	; 0x28
   13e48:	ldr	r3, [pc, #856]	; 141a8 <__assert_fail@plt+0x2e1c>
   13e4c:	cmp	sl, r2
   13e50:	str	r3, [r6, #44]	; 0x2c
   13e54:	bhi	13f08 <__assert_fail@plt+0x2b7c>
   13e58:	ldr	r0, [r6, #8]
   13e5c:	cmp	r8, #0
   13e60:	movne	r3, r0
   13e64:	beq	13e78 <__assert_fail@plt+0x2aec>
   13e68:	str	r8, [r3], #4
   13e6c:	ldr	r8, [r8, #8]
   13e70:	cmp	r8, #0
   13e74:	bne	13e68 <__assert_fail@plt+0x2adc>
   13e78:	ldr	r3, [pc, #808]	; 141a8 <__assert_fail@plt+0x2e1c>
   13e7c:	mov	r2, #4
   13e80:	mov	r1, sl
   13e84:	bl	11308 <qsort@plt>
   13e88:	ldr	ip, [r6, #8]
   13e8c:	subs	r3, sl, #1
   13e90:	ldr	r8, [ip]
   13e94:	moveq	r3, r8
   13e98:	beq	13ebc <__assert_fail@plt+0x2b30>
   13e9c:	mov	r2, ip
   13ea0:	ldr	r1, [r2]
   13ea4:	ldr	r0, [r2, #4]!
   13ea8:	subs	r3, r3, #1
   13eac:	str	r0, [r1, #8]
   13eb0:	bne	13ea0 <__assert_fail@plt+0x2b14>
   13eb4:	add	ip, ip, sl, lsl #2
   13eb8:	ldr	r3, [ip, #-4]
   13ebc:	mov	r2, #0
   13ec0:	str	r2, [r3, #8]
   13ec4:	mov	r3, #0
   13ec8:	mov	r0, r8
   13ecc:	str	r3, [r6, #44]	; 0x2c
   13ed0:	add	sp, sp, #68	; 0x44
   13ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed8:	ldr	r4, [sp, #8]
   13edc:	mov	r8, #0
   13ee0:	ldr	r0, [r4, #12]
   13ee4:	bl	11368 <closedir@plt>
   13ee8:	ldr	r3, [sp, #40]	; 0x28
   13eec:	str	r8, [r4, #12]
   13ef0:	cmp	r3, #3
   13ef4:	beq	14054 <__assert_fail@plt+0x2cc8>
   13ef8:	mov	r8, #0
   13efc:	mov	r0, r8
   13f00:	add	sp, sp, #68	; 0x44
   13f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f08:	add	r1, sl, #40	; 0x28
   13f0c:	cmn	r1, #-1073741823	; 0xc0000001
   13f10:	str	r1, [r6, #40]	; 0x28
   13f14:	bhi	13fb0 <__assert_fail@plt+0x2c24>
   13f18:	lsl	r1, r1, #2
   13f1c:	ldr	r0, [r6, #8]
   13f20:	bl	1ce48 <__assert_fail@plt+0xbabc>
   13f24:	cmp	r0, #0
   13f28:	beq	13fb0 <__assert_fail@plt+0x2c24>
   13f2c:	str	r0, [r6, #8]
   13f30:	b	13e5c <__assert_fail@plt+0x2ad0>
   13f34:	bl	11350 <close@plt>
   13f38:	b	13cb4 <__assert_fail@plt+0x2928>
   13f3c:	ldr	r0, [r6, #8]
   13f40:	bl	12dbc <__assert_fail@plt+0x1a30>
   13f44:	mov	r3, #0
   13f48:	str	r3, [r6, #8]
   13f4c:	str	r3, [r6, #40]	; 0x28
   13f50:	b	13824 <__assert_fail@plt+0x2498>
   13f54:	str	r0, [sp]
   13f58:	ldr	r0, [r6, #24]
   13f5c:	ldr	r8, [sp, #16]
   13f60:	bl	12dbc <__assert_fail@plt+0x1a30>
   13f64:	ldr	r1, [sp]
   13f68:	ldr	r5, [fp]
   13f6c:	str	r1, [r6, #24]
   13f70:	b	138f4 <__assert_fail@plt+0x2568>
   13f74:	mov	r3, #0
   13f78:	str	r3, [sp, #52]	; 0x34
   13f7c:	ldr	r0, [r6, #48]	; 0x30
   13f80:	ldr	r2, [sp, #8]
   13f84:	b	134f0 <__assert_fail@plt+0x2164>
   13f88:	ldr	r4, [sp, #8]
   13f8c:	ldr	r0, [r6, #56]	; 0x38
   13f90:	add	r1, r4, #64	; 0x40
   13f94:	bl	1cf44 <__assert_fail@plt+0xbbb8>
   13f98:	cmp	r0, #0
   13f9c:	movne	r2, r4
   13fa0:	movne	r3, #2
   13fa4:	strne	r4, [r2]
   13fa8:	strhne	r3, [r4, #56]	; 0x38
   13fac:	b	13af4 <__assert_fail@plt+0x2768>
   13fb0:	ldr	r0, [r6, #8]
   13fb4:	bl	12dbc <__assert_fail@plt+0x1a30>
   13fb8:	mov	r3, #0
   13fbc:	str	r3, [r6, #8]
   13fc0:	str	r3, [r6, #40]	; 0x28
   13fc4:	b	13ec4 <__assert_fail@plt+0x2b38>
   13fc8:	ldr	r2, [sp, #8]
   13fcc:	ldrh	r3, [r2, #56]	; 0x38
   13fd0:	cmp	r3, #7
   13fd4:	cmpne	r3, #4
   13fd8:	movne	r3, #6
   13fdc:	strhne	r3, [r2, #56]	; 0x38
   13fe0:	b	13a6c <__assert_fail@plt+0x26e0>
   13fe4:	mov	r2, #3
   13fe8:	ldr	r1, [pc, #444]	; 141ac <__assert_fail@plt+0x2e20>
   13fec:	ldr	r0, [sp, #60]	; 0x3c
   13ff0:	bl	1d0b0 <__assert_fail@plt+0xbd24>
   13ff4:	mov	r2, r0
   13ff8:	str	r0, [sp, #60]	; 0x3c
   13ffc:	b	13b48 <__assert_fail@plt+0x27bc>
   14000:	ldr	r3, [r6, #48]	; 0x30
   14004:	ldr	r1, [sp, #8]
   14008:	orr	r3, r3, #8192	; 0x2000
   1400c:	mov	r2, #7
   14010:	cmp	r8, #0
   14014:	strh	r2, [r1, #56]	; 0x38
   14018:	str	r3, [r6, #48]	; 0x30
   1401c:	beq	13ef8 <__assert_fail@plt+0x2b6c>
   14020:	ldr	r3, [r8, #12]
   14024:	ldr	r4, [r8, #8]
   14028:	subs	r0, r3, #0
   1402c:	beq	14034 <__assert_fail@plt+0x2ca8>
   14030:	bl	11368 <closedir@plt>
   14034:	mov	r0, r8
   14038:	bl	12dbc <__assert_fail@plt+0x1a30>
   1403c:	subs	r8, r4, #0
   14040:	bne	14020 <__assert_fail@plt+0x2c94>
   14044:	b	13ef8 <__assert_fail@plt+0x2b6c>
   14048:	ldr	r3, [sp, #40]	; 0x28
   1404c:	cmp	r3, #3
   14050:	bne	13ef8 <__assert_fail@plt+0x2b6c>
   14054:	ldr	r4, [sp, #8]
   14058:	mov	r3, #4
   1405c:	strh	r3, [r4, #56]	; 0x38
   14060:	bl	1123c <__errno_location@plt>
   14064:	ldr	r3, [r0]
   14068:	str	r3, [r4, #32]
   1406c:	b	13824 <__assert_fail@plt+0x2498>
   14070:	ldr	r4, [sp, #8]
   14074:	mov	r3, #0
   14078:	mov	r2, r4
   1407c:	ldr	r1, [r6, #48]	; 0x30
   14080:	ldr	r0, [r6, #32]
   14084:	bl	12ff4 <__assert_fail@plt+0x1c68>
   14088:	strh	r0, [r4, #56]	; 0x38
   1408c:	b	13af4 <__assert_fail@plt+0x2768>
   14090:	ldr	r3, [sp, #8]
   14094:	ldr	r3, [r3, #84]	; 0x54
   14098:	cmp	r3, #2
   1409c:	bne	13b24 <__assert_fail@plt+0x2798>
   140a0:	ldr	r1, [sp, #60]	; 0x3c
   140a4:	ldr	r0, [sp, #8]
   140a8:	bl	12ee4 <__assert_fail@plt+0x1b58>
   140ac:	ldr	r3, [pc, #220]	; 14190 <__assert_fail@plt+0x2e04>
   140b0:	cmp	r0, r3
   140b4:	beq	13b24 <__assert_fail@plt+0x2798>
   140b8:	bgt	14140 <__assert_fail@plt+0x2db4>
   140bc:	ldr	r3, [pc, #212]	; 14198 <__assert_fail@plt+0x2e0c>
   140c0:	cmp	r0, r3
   140c4:	beq	13b24 <__assert_fail@plt+0x2798>
   140c8:	cmp	r0, #0
   140cc:	beq	13b24 <__assert_fail@plt+0x2798>
   140d0:	ldr	r3, [sp, #40]	; 0x28
   140d4:	cmp	r3, #3
   140d8:	bne	13f74 <__assert_fail@plt+0x2be8>
   140dc:	mov	r5, #1
   140e0:	mov	r4, #0
   140e4:	b	13b38 <__assert_fail@plt+0x27ac>
   140e8:	bl	1123c <__errno_location@plt>
   140ec:	ldr	r2, [sp, #8]
   140f0:	mov	r4, r2
   140f4:	ldr	r3, [r0]
   140f8:	str	r3, [r2, #32]
   140fc:	b	13b74 <__assert_fail@plt+0x27e8>
   14100:	add	r4, r6, #60	; 0x3c
   14104:	mov	r0, r4
   14108:	ldr	r1, [r6, #32]
   1410c:	bl	16dc0 <__assert_fail@plt+0x5a34>
   14110:	cmp	r0, #0
   14114:	blt	1411c <__assert_fail@plt+0x2d90>
   14118:	bl	11350 <close@plt>
   1411c:	mvn	r3, #99	; 0x63
   14120:	str	r3, [r6, #32]
   14124:	mov	r5, #0
   14128:	b	13cb4 <__assert_fail@plt+0x2928>
   1412c:	bl	1123c <__errno_location@plt>
   14130:	mov	r3, #12
   14134:	mov	r8, #0
   14138:	str	r3, [r0]
   1413c:	b	13824 <__assert_fail@plt+0x2498>
   14140:	ldr	r3, [pc, #104]	; 141b0 <__assert_fail@plt+0x2e24>
   14144:	cmp	r0, r3
   14148:	beq	13b24 <__assert_fail@plt+0x2798>
   1414c:	ldr	r3, [pc, #96]	; 141b4 <__assert_fail@plt+0x2e28>
   14150:	cmp	r0, r3
   14154:	bne	140d0 <__assert_fail@plt+0x2d44>
   14158:	b	13b24 <__assert_fail@plt+0x2798>
   1415c:	ldr	r3, [pc, #60]	; 141a0 <__assert_fail@plt+0x2e14>
   14160:	ldr	r0, [r6, #48]	; 0x30
   14164:	str	r3, [sp, #24]
   14168:	mov	r3, #1
   1416c:	str	r3, [sp, #52]	; 0x34
   14170:	ldr	r2, [sp, #8]
   14174:	b	134f0 <__assert_fail@plt+0x2164>
   14178:	str	r7, [r4, #80]	; 0x50
   1417c:	mov	r2, #1
   14180:	mov	r3, #0
   14184:	b	135b4 <__assert_fail@plt+0x2228>
   14188:	andeq	lr, r1, r4, lsr sp
   1418c:	andeq	r2, r0, r0, lsl r7
   14190:	andeq	r6, r0, r9, ror #18
   14194:			; <UNDEFINED> instruction: 0x01021994
   14198:			; <UNDEFINED> instruction: 0xff534d42
   1419c:	andeq	lr, r1, r4, ror #26
   141a0:	andeq	r8, r1, r0, lsr #13
   141a4:	andeq	r0, r0, r2, lsl #2
   141a8:			; <UNDEFINED> instruction: 0x00012eb4
   141ac:	andeq	r0, r0, r6, lsl #8
   141b0:	andeq	r9, r0, r0, lsr #31
   141b4:	movtpl	r4, #24911	; 0x614f
   141b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141bc:	bic	r8, r1, #4080	; 0xff0
   141c0:	sub	sp, sp, #36	; 0x24
   141c4:	bic	r8, r8, #15
   141c8:	cmp	r8, #0
   141cc:	str	r2, [sp, #12]
   141d0:	bne	14678 <__assert_fail@plt+0x32ec>
   141d4:	and	r3, r1, #516	; 0x204
   141d8:	cmp	r3, #516	; 0x204
   141dc:	mov	r5, r1
   141e0:	beq	145dc <__assert_fail@plt+0x3250>
   141e4:	ands	r8, r1, #18
   141e8:	beq	145dc <__assert_fail@plt+0x3250>
   141ec:	mov	r9, r0
   141f0:	mov	r1, #96	; 0x60
   141f4:	mov	r0, #1
   141f8:	bl	1cdd4 <__assert_fail@plt+0xba48>
   141fc:	subs	r8, r0, #0
   14200:	beq	14534 <__assert_fail@plt+0x31a8>
   14204:	ldr	r3, [sp, #12]
   14208:	tst	r5, #2
   1420c:	str	r3, [r8, #44]	; 0x2c
   14210:	bicne	r3, r5, #512	; 0x200
   14214:	orrne	r3, r3, #4
   14218:	strne	r3, [r8, #48]	; 0x30
   1421c:	ldr	r3, [r9]
   14220:	streq	r5, [r8, #48]	; 0x30
   14224:	mvn	r2, #99	; 0x63
   14228:	cmp	r3, #0
   1422c:	str	r2, [r8, #32]
   14230:	beq	146dc <__assert_fail@plt+0x3350>
   14234:	mov	r6, r9
   14238:	mov	r4, #0
   1423c:	mov	r0, r3
   14240:	bl	1120c <strlen@plt>
   14244:	ldr	r3, [r6, #4]!
   14248:	cmp	r4, r0
   1424c:	movcc	r4, r0
   14250:	cmp	r3, #0
   14254:	bne	1423c <__assert_fail@plt+0x2eb0>
   14258:	add	r4, r4, #1
   1425c:	cmp	r4, #4096	; 0x1000
   14260:	movcc	r4, #4096	; 0x1000
   14264:	ldr	r3, [r8, #36]	; 0x24
   14268:	add	r1, r3, #256	; 0x100
   1426c:	add	r1, r1, r4
   14270:	cmp	r3, r1
   14274:	bhi	145a8 <__assert_fail@plt+0x321c>
   14278:	str	r1, [r8, #36]	; 0x24
   1427c:	ldr	r0, [r8, #24]
   14280:	bl	1ce48 <__assert_fail@plt+0xbabc>
   14284:	subs	r4, r0, #0
   14288:	beq	14778 <__assert_fail@plt+0x33ec>
   1428c:	ldr	fp, [r9]
   14290:	str	r4, [r8, #24]
   14294:	cmp	fp, #0
   14298:	beq	1465c <__assert_fail@plt+0x32d0>
   1429c:	mov	r0, #176	; 0xb0
   142a0:	bl	1ce1c <__assert_fail@plt+0xba90>
   142a4:	subs	r3, r0, #0
   142a8:	mov	r0, r3
   142ac:	str	r3, [sp, #16]
   142b0:	beq	1459c <__assert_fail@plt+0x3210>
   142b4:	ldr	r2, [r8, #24]
   142b8:	ldr	r3, [sp, #12]
   142bc:	mov	r1, #196608	; 0x30000
   142c0:	cmp	r3, #0
   142c4:	str	r2, [r0, #28]
   142c8:	mov	r3, #0
   142cc:	mvn	r2, #0
   142d0:	str	r8, [r0, #44]	; 0x2c
   142d4:	strb	r3, [r0, #168]	; 0xa8
   142d8:	str	r3, [r0, #52]	; 0x34
   142dc:	str	r3, [r0, #32]
   142e0:	str	r3, [r0, #12]
   142e4:	str	r3, [r0, #16]
   142e8:	str	r3, [r0, #20]
   142ec:	str	r1, [r0, #58]	; 0x3a
   142f0:	str	r2, [r0, #48]	; 0x30
   142f4:	ldr	fp, [r9]
   142f8:	beq	146d0 <__assert_fail@plt+0x3344>
   142fc:	ldr	r3, [r8, #48]	; 0x30
   14300:	lsr	r3, r3, #10
   14304:	and	r3, r3, #1
   14308:	str	r3, [sp, #24]
   1430c:	cmp	fp, #0
   14310:	beq	14790 <__assert_fail@plt+0x3404>
   14314:	lsr	r5, r5, #11
   14318:	mov	r3, #0
   1431c:	eor	r5, r5, #1
   14320:	mov	r6, r3
   14324:	str	r3, [sp, #28]
   14328:	and	r3, r5, #1
   1432c:	str	r3, [sp, #20]
   14330:	mov	sl, r6
   14334:	mov	r7, r6
   14338:	b	14378 <__assert_fail@plt+0x2fec>
   1433c:	mov	r3, #11
   14340:	strh	r3, [r4, #56]	; 0x38
   14344:	mov	r2, #2
   14348:	mov	r3, #0
   1434c:	strd	r2, [r4, #112]	; 0x70
   14350:	ldr	r3, [sp, #12]
   14354:	cmp	r3, #0
   14358:	beq	14458 <__assert_fail@plt+0x30cc>
   1435c:	ldr	fp, [r9, #4]!
   14360:	str	r7, [r4, #8]
   14364:	cmp	fp, #0
   14368:	mov	r7, r4
   1436c:	add	r4, sl, #1
   14370:	beq	14484 <__assert_fail@plt+0x30f8>
   14374:	mov	sl, r4
   14378:	mov	r0, fp
   1437c:	bl	1120c <strlen@plt>
   14380:	ldr	r3, [sp, #20]
   14384:	cmp	r0, #2
   14388:	movls	r3, #0
   1438c:	andhi	r3, r3, #1
   14390:	cmp	r3, #0
   14394:	mov	r5, r0
   14398:	beq	143b0 <__assert_fail@plt+0x3024>
   1439c:	sub	r2, r0, #1
   143a0:	add	r3, fp, r2
   143a4:	ldrb	r2, [fp, r2]
   143a8:	cmp	r2, #47	; 0x2f
   143ac:	beq	14540 <__assert_fail@plt+0x31b4>
   143b0:	add	r0, r5, #176	; 0xb0
   143b4:	bic	r0, r0, #7
   143b8:	bl	1ce1c <__assert_fail@plt+0xba90>
   143bc:	subs	r4, r0, #0
   143c0:	beq	14568 <__assert_fail@plt+0x31dc>
   143c4:	add	r3, r4, #168	; 0xa8
   143c8:	mov	r1, fp
   143cc:	mov	r0, r3
   143d0:	mov	r2, r5
   143d4:	bl	110c8 <memcpy@plt>
   143d8:	add	r1, r4, r5
   143dc:	ldr	r2, [r8, #24]
   143e0:	strb	r6, [r1, #168]	; 0xa8
   143e4:	str	r5, [r4, #52]	; 0x34
   143e8:	str	r8, [r4, #44]	; 0x2c
   143ec:	str	r6, [r4, #32]
   143f0:	str	r6, [r4, #12]
   143f4:	str	r6, [r4, #16]
   143f8:	str	r6, [r4, #20]
   143fc:	str	r6, [r4, #48]	; 0x30
   14400:	str	r2, [r4, #28]
   14404:	mov	r3, r0
   14408:	ldr	r0, [sp, #24]
   1440c:	str	r3, [r4, #24]
   14410:	mov	r3, #196608	; 0x30000
   14414:	cmp	r7, #0
   14418:	moveq	r0, #0
   1441c:	andne	r0, r0, #1
   14420:	str	r3, [r4, #58]	; 0x3a
   14424:	ldr	r3, [sp, #16]
   14428:	cmp	r0, #0
   1442c:	str	r3, [r4, #4]
   14430:	bne	1433c <__assert_fail@plt+0x2fb0>
   14434:	mov	r3, r6
   14438:	mov	r2, r4
   1443c:	ldr	r1, [r8, #48]	; 0x30
   14440:	ldr	r0, [r8, #32]
   14444:	bl	12ff4 <__assert_fail@plt+0x1c68>
   14448:	ldr	r3, [sp, #12]
   1444c:	cmp	r3, #0
   14450:	strh	r0, [r4, #56]	; 0x38
   14454:	bne	1435c <__assert_fail@plt+0x2fd0>
   14458:	cmp	r7, #0
   1445c:	str	r3, [r4, #8]
   14460:	ldrne	r3, [sp, #28]
   14464:	ldr	fp, [r9, #4]!
   14468:	strne	r4, [sp, #28]
   1446c:	strne	r4, [r3, #8]
   14470:	streq	r4, [sp, #28]
   14474:	moveq	r7, r4
   14478:	cmp	fp, #0
   1447c:	add	r4, sl, #1
   14480:	bne	14374 <__assert_fail@plt+0x2fe8>
   14484:	ldr	r3, [sp, #12]
   14488:	cmp	r3, #0
   1448c:	cmpne	r4, #1
   14490:	bhi	14694 <__assert_fail@plt+0x3308>
   14494:	mov	r0, #176	; 0xb0
   14498:	bl	1ce1c <__assert_fail@plt+0xba90>
   1449c:	cmp	r0, #0
   144a0:	beq	14788 <__assert_fail@plt+0x33fc>
   144a4:	ldr	r2, [r8, #48]	; 0x30
   144a8:	ldr	r3, [pc, #744]	; 14798 <__assert_fail@plt+0x340c>
   144ac:	ldr	lr, [r8, #24]
   144b0:	and	r3, r3, r2
   144b4:	mov	r1, #0
   144b8:	cmp	r3, #0
   144bc:	mov	ip, #3
   144c0:	mov	r2, #9
   144c4:	mov	r3, #1
   144c8:	str	r8, [r0, #44]	; 0x2c
   144cc:	str	r0, [r8]
   144d0:	str	r7, [r0, #8]
   144d4:	str	lr, [r0, #28]
   144d8:	strb	r1, [r0, #168]	; 0xa8
   144dc:	str	r1, [r0, #52]	; 0x34
   144e0:	str	r1, [r0, #32]
   144e4:	str	r1, [r0, #12]
   144e8:	strh	r1, [r0, #58]	; 0x3a
   144ec:	str	r1, [r0, #16]
   144f0:	str	r1, [r0, #20]
   144f4:	strh	ip, [r0, #60]	; 0x3c
   144f8:	strh	r2, [r0, #56]	; 0x38
   144fc:	str	r3, [r0, #48]	; 0x30
   14500:	bne	145f4 <__assert_fail@plt+0x3268>
   14504:	mov	r0, #32
   14508:	bl	1ce1c <__assert_fail@plt+0xba90>
   1450c:	cmp	r0, #0
   14510:	str	r0, [r8, #56]	; 0x38
   14514:	beq	14568 <__assert_fail@plt+0x31dc>
   14518:	bl	1cf20 <__assert_fail@plt+0xbb94>
   1451c:	ldr	r3, [r8, #48]	; 0x30
   14520:	tst	r3, #516	; 0x204
   14524:	beq	14624 <__assert_fail@plt+0x3298>
   14528:	mvn	r1, #0
   1452c:	add	r0, r8, #60	; 0x3c
   14530:	bl	16d8c <__assert_fail@plt+0x5a00>
   14534:	mov	r0, r8
   14538:	add	sp, sp, #36	; 0x24
   1453c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14540:	ldrb	r2, [r3, #-1]!
   14544:	cmp	r2, #47	; 0x2f
   14548:	bne	143b0 <__assert_fail@plt+0x3024>
   1454c:	sub	r5, r5, #1
   14550:	cmp	r5, #1
   14554:	bne	14540 <__assert_fail@plt+0x31b4>
   14558:	mov	r0, #176	; 0xb0
   1455c:	bl	1ce1c <__assert_fail@plt+0xba90>
   14560:	subs	r4, r0, #0
   14564:	bne	143c4 <__assert_fail@plt+0x3038>
   14568:	cmp	r7, #0
   1456c:	beq	14594 <__assert_fail@plt+0x3208>
   14570:	ldr	r3, [r7, #12]
   14574:	ldr	r4, [r7, #8]
   14578:	subs	r0, r3, #0
   1457c:	beq	14584 <__assert_fail@plt+0x31f8>
   14580:	bl	11368 <closedir@plt>
   14584:	mov	r0, r7
   14588:	bl	12dbc <__assert_fail@plt+0x1a30>
   1458c:	subs	r7, r4, #0
   14590:	bne	14570 <__assert_fail@plt+0x31e4>
   14594:	ldr	r0, [sp, #16]
   14598:	bl	12dbc <__assert_fail@plt+0x1a30>
   1459c:	ldr	r0, [r8, #24]
   145a0:	bl	12dbc <__assert_fail@plt+0x1a30>
   145a4:	b	145c4 <__assert_fail@plt+0x3238>
   145a8:	ldr	r0, [r8, #24]
   145ac:	bl	12dbc <__assert_fail@plt+0x1a30>
   145b0:	mov	r3, #0
   145b4:	str	r3, [r8, #24]
   145b8:	bl	1123c <__errno_location@plt>
   145bc:	mov	r3, #36	; 0x24
   145c0:	str	r3, [r0]
   145c4:	mov	r0, r8
   145c8:	bl	12dbc <__assert_fail@plt+0x1a30>
   145cc:	mov	r8, #0
   145d0:	mov	r0, r8
   145d4:	add	sp, sp, #36	; 0x24
   145d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145dc:	bl	1123c <__errno_location@plt>
   145e0:	mov	r3, #22
   145e4:	str	r3, [r0]
   145e8:	mov	r0, r8
   145ec:	add	sp, sp, #36	; 0x24
   145f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f4:	ldr	r3, [pc, #416]	; 1479c <__assert_fail@plt+0x3410>
   145f8:	ldr	r2, [pc, #416]	; 147a0 <__assert_fail@plt+0x3414>
   145fc:	str	r3, [sp]
   14600:	mov	r0, #31
   14604:	ldr	r3, [pc, #408]	; 147a4 <__assert_fail@plt+0x3418>
   14608:	bl	15c80 <__assert_fail@plt+0x48f4>
   1460c:	cmp	r0, #0
   14610:	str	r0, [r8, #56]	; 0x38
   14614:	beq	14568 <__assert_fail@plt+0x31dc>
   14618:	ldr	r3, [r8, #48]	; 0x30
   1461c:	tst	r3, #516	; 0x204
   14620:	bne	14528 <__assert_fail@plt+0x319c>
   14624:	ldr	r2, [pc, #380]	; 147a8 <__assert_fail@plt+0x341c>
   14628:	tst	r3, #16
   1462c:	ldr	r1, [pc, #376]	; 147ac <__assert_fail@plt+0x3420>
   14630:	moveq	r1, r2
   14634:	tst	r3, #512	; 0x200
   14638:	bne	1474c <__assert_fail@plt+0x33c0>
   1463c:	ldr	r0, [pc, #364]	; 147b0 <__assert_fail@plt+0x3424>
   14640:	bl	1d284 <__assert_fail@plt+0xbef8>
   14644:	cmp	r0, #0
   14648:	str	r0, [r8, #28]
   1464c:	ldrlt	r3, [r8, #48]	; 0x30
   14650:	orrlt	r3, r3, #4
   14654:	strlt	r3, [r8, #48]	; 0x30
   14658:	b	14528 <__assert_fail@plt+0x319c>
   1465c:	ldr	r3, [sp, #12]
   14660:	cmp	r3, #0
   14664:	strne	fp, [sp, #16]
   14668:	bne	142fc <__assert_fail@plt+0x2f70>
   1466c:	str	r3, [sp, #16]
   14670:	mov	r7, r3
   14674:	b	14494 <__assert_fail@plt+0x3108>
   14678:	bl	1123c <__errno_location@plt>
   1467c:	mov	r8, #0
   14680:	mov	r3, #22
   14684:	str	r3, [r0]
   14688:	mov	r0, r8
   1468c:	add	sp, sp, #36	; 0x24
   14690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14694:	ldr	r2, [r8, #40]	; 0x28
   14698:	ldr	r5, [r8, #44]	; 0x2c
   1469c:	cmp	r4, r2
   146a0:	bls	146e4 <__assert_fail@plt+0x3358>
   146a4:	add	r1, sl, #41	; 0x29
   146a8:	cmn	r1, #-1073741823	; 0xc0000001
   146ac:	str	r1, [r8, #40]	; 0x28
   146b0:	bhi	14760 <__assert_fail@plt+0x33d4>
   146b4:	lsl	r1, r1, #2
   146b8:	ldr	r0, [r8, #8]
   146bc:	bl	1ce48 <__assert_fail@plt+0xbabc>
   146c0:	cmp	r0, #0
   146c4:	beq	14760 <__assert_fail@plt+0x33d4>
   146c8:	str	r0, [r8, #8]
   146cc:	b	146e8 <__assert_fail@plt+0x335c>
   146d0:	mov	r3, #1
   146d4:	str	r3, [sp, #24]
   146d8:	b	1430c <__assert_fail@plt+0x2f80>
   146dc:	mov	r4, #4096	; 0x1000
   146e0:	b	14264 <__assert_fail@plt+0x2ed8>
   146e4:	ldr	r0, [r8, #8]
   146e8:	mov	r2, r0
   146ec:	str	r7, [r2], #4
   146f0:	ldr	r7, [r7, #8]
   146f4:	cmp	r7, #0
   146f8:	bne	146ec <__assert_fail@plt+0x3360>
   146fc:	mov	r3, r5
   14700:	mov	r1, r4
   14704:	mov	r2, #4
   14708:	bl	11308 <qsort@plt>
   1470c:	ldr	ip, [r8, #8]
   14710:	cmp	sl, #0
   14714:	ldr	r7, [ip]
   14718:	moveq	r3, r7
   1471c:	beq	14740 <__assert_fail@plt+0x33b4>
   14720:	mov	r2, sl
   14724:	mov	r3, ip
   14728:	ldr	r1, [r3]
   1472c:	ldr	r0, [r3, #4]!
   14730:	subs	r2, r2, #1
   14734:	str	r0, [r1, #8]
   14738:	bne	14728 <__assert_fail@plt+0x339c>
   1473c:	ldr	r3, [ip, sl, lsl #2]
   14740:	mov	r2, #0
   14744:	str	r2, [r3, #8]
   14748:	b	14494 <__assert_fail@plt+0x3108>
   1474c:	mov	r2, r1
   14750:	ldr	r0, [r8, #32]
   14754:	ldr	r1, [pc, #84]	; 147b0 <__assert_fail@plt+0x3424>
   14758:	bl	16eb4 <__assert_fail@plt+0x5b28>
   1475c:	b	14644 <__assert_fail@plt+0x32b8>
   14760:	ldr	r0, [r8, #8]
   14764:	bl	12dbc <__assert_fail@plt+0x1a30>
   14768:	mov	r3, #0
   1476c:	str	r3, [r8, #8]
   14770:	str	r3, [r8, #40]	; 0x28
   14774:	b	14494 <__assert_fail@plt+0x3108>
   14778:	ldr	r0, [r8, #24]
   1477c:	bl	12dbc <__assert_fail@plt+0x1a30>
   14780:	str	r4, [r8, #24]
   14784:	b	145c4 <__assert_fail@plt+0x3238>
   14788:	str	r0, [r8]
   1478c:	b	14568 <__assert_fail@plt+0x31dc>
   14790:	mov	r7, fp
   14794:	b	14494 <__assert_fail@plt+0x3108>
   14798:	andeq	r0, r0, r2, lsl #2
   1479c:			; <UNDEFINED> instruction: 0x00012dbc
   147a0:	andeq	r2, r1, r8, asr lr
   147a4:	andeq	r2, r1, r4, lsl lr
   147a8:	andeq	r4, r8, r0, lsl #18
   147ac:	andeq	ip, r8, r0, lsl #18
   147b0:	andeq	lr, r1, r8, ror #26
   147b4:	ldr	r3, [r0]
   147b8:	push	{r4, r5, r6, lr}
   147bc:	cmp	r3, #0
   147c0:	mov	r6, r0
   147c4:	beq	14800 <__assert_fail@plt+0x3474>
   147c8:	ldr	r2, [r3, #48]	; 0x30
   147cc:	cmp	r2, #0
   147d0:	blt	14940 <__assert_fail@plt+0x35b4>
   147d4:	ldr	r4, [r3, #8]
   147d8:	mov	r0, r3
   147dc:	cmp	r4, #0
   147e0:	ldreq	r4, [r3, #4]
   147e4:	bl	12dbc <__assert_fail@plt+0x1a30>
   147e8:	mov	r3, r4
   147ec:	ldr	r2, [r4, #48]	; 0x30
   147f0:	cmp	r2, #0
   147f4:	bge	147d4 <__assert_fail@plt+0x3448>
   147f8:	mov	r0, r4
   147fc:	bl	12dbc <__assert_fail@plt+0x1a30>
   14800:	ldr	r4, [r6, #4]
   14804:	cmp	r4, #0
   14808:	beq	14830 <__assert_fail@plt+0x34a4>
   1480c:	ldr	r3, [r4, #12]
   14810:	ldr	r5, [r4, #8]
   14814:	subs	r0, r3, #0
   14818:	beq	14820 <__assert_fail@plt+0x3494>
   1481c:	bl	11368 <closedir@plt>
   14820:	mov	r0, r4
   14824:	bl	12dbc <__assert_fail@plt+0x1a30>
   14828:	subs	r4, r5, #0
   1482c:	bne	1480c <__assert_fail@plt+0x3480>
   14830:	ldr	r0, [r6, #8]
   14834:	bl	12dbc <__assert_fail@plt+0x1a30>
   14838:	ldr	r0, [r6, #24]
   1483c:	bl	12dbc <__assert_fail@plt+0x1a30>
   14840:	ldr	r3, [r6, #48]	; 0x30
   14844:	tst	r3, #512	; 0x200
   14848:	beq	148e4 <__assert_fail@plt+0x3558>
   1484c:	ldr	r0, [r6, #32]
   14850:	cmp	r0, #0
   14854:	blt	14864 <__assert_fail@plt+0x34d8>
   14858:	bl	11350 <close@plt>
   1485c:	cmp	r0, #0
   14860:	bne	14934 <__assert_fail@plt+0x35a8>
   14864:	mov	r5, #0
   14868:	add	r4, r6, #60	; 0x3c
   1486c:	b	1487c <__assert_fail@plt+0x34f0>
   14870:	bl	16e04 <__assert_fail@plt+0x5a78>
   14874:	cmp	r0, #0
   14878:	bge	148dc <__assert_fail@plt+0x3550>
   1487c:	mov	r0, r4
   14880:	bl	16db8 <__assert_fail@plt+0x5a2c>
   14884:	cmp	r0, #0
   14888:	mov	r0, r4
   1488c:	beq	14870 <__assert_fail@plt+0x34e4>
   14890:	ldr	r0, [r6, #52]	; 0x34
   14894:	cmp	r0, #0
   14898:	beq	148a0 <__assert_fail@plt+0x3514>
   1489c:	bl	15f70 <__assert_fail@plt+0x4be4>
   148a0:	ldr	r2, [r6, #48]	; 0x30
   148a4:	ldr	r3, [pc, #204]	; 14978 <__assert_fail@plt+0x35ec>
   148a8:	ldr	r0, [r6, #56]	; 0x38
   148ac:	and	r3, r3, r2
   148b0:	cmp	r3, #0
   148b4:	beq	1492c <__assert_fail@plt+0x35a0>
   148b8:	cmp	r0, #0
   148bc:	beq	148c4 <__assert_fail@plt+0x3538>
   148c0:	bl	15f70 <__assert_fail@plt+0x4be4>
   148c4:	mov	r0, r6
   148c8:	bl	12dbc <__assert_fail@plt+0x1a30>
   148cc:	cmp	r5, #0
   148d0:	bne	14968 <__assert_fail@plt+0x35dc>
   148d4:	mov	r0, r5
   148d8:	pop	{r4, r5, r6, pc}
   148dc:	bl	11350 <close@plt>
   148e0:	b	1487c <__assert_fail@plt+0x34f0>
   148e4:	tst	r3, #4
   148e8:	bne	14864 <__assert_fail@plt+0x34d8>
   148ec:	ldr	r0, [r6, #28]
   148f0:	bl	112fc <fchdir@plt>
   148f4:	cmp	r0, #0
   148f8:	beq	14948 <__assert_fail@plt+0x35bc>
   148fc:	bl	1123c <__errno_location@plt>
   14900:	mov	r4, r0
   14904:	ldr	r0, [r6, #28]
   14908:	ldr	r5, [r4]
   1490c:	bl	11350 <close@plt>
   14910:	adds	r0, r0, #0
   14914:	movne	r0, #1
   14918:	cmp	r5, #0
   1491c:	movne	r0, #0
   14920:	cmp	r0, #0
   14924:	beq	14868 <__assert_fail@plt+0x34dc>
   14928:	b	14960 <__assert_fail@plt+0x35d4>
   1492c:	bl	12dbc <__assert_fail@plt+0x1a30>
   14930:	b	148c4 <__assert_fail@plt+0x3538>
   14934:	bl	1123c <__errno_location@plt>
   14938:	ldr	r5, [r0]
   1493c:	b	14868 <__assert_fail@plt+0x34dc>
   14940:	mov	r4, r3
   14944:	b	147f8 <__assert_fail@plt+0x346c>
   14948:	ldr	r0, [r6, #28]
   1494c:	bl	11350 <close@plt>
   14950:	cmp	r0, #0
   14954:	beq	14864 <__assert_fail@plt+0x34d8>
   14958:	bl	1123c <__errno_location@plt>
   1495c:	mov	r4, r0
   14960:	ldr	r5, [r4]
   14964:	b	14868 <__assert_fail@plt+0x34dc>
   14968:	bl	1123c <__errno_location@plt>
   1496c:	str	r5, [r0]
   14970:	mvn	r5, #0
   14974:	b	148d4 <__assert_fail@plt+0x3548>
   14978:	andeq	r0, r0, r2, lsl #2
   1497c:	push	{r4, r5, r6, r7, r8, r9, lr}
   14980:	sub	sp, sp, #12
   14984:	ldr	r4, [r0]
   14988:	cmp	r4, #0
   1498c:	beq	14ac0 <__assert_fail@plt+0x3734>
   14990:	ldr	r1, [r0, #48]	; 0x30
   14994:	ands	r5, r1, #8192	; 0x2000
   14998:	bne	14ac0 <__assert_fail@plt+0x3734>
   1499c:	ldrh	r3, [r4, #60]	; 0x3c
   149a0:	mov	r2, #3
   149a4:	mov	r7, r0
   149a8:	cmp	r3, #1
   149ac:	strh	r2, [r4, #60]	; 0x3c
   149b0:	beq	14e38 <__assert_fail@plt+0x3aac>
   149b4:	cmp	r3, #2
   149b8:	beq	14ad0 <__assert_fail@plt+0x3744>
   149bc:	ldrh	r2, [r4, #56]	; 0x38
   149c0:	cmp	r2, #1
   149c4:	bne	149fc <__assert_fail@plt+0x3670>
   149c8:	cmp	r3, #4
   149cc:	bne	14ae8 <__assert_fail@plt+0x375c>
   149d0:	b	14b04 <__assert_fail@plt+0x3778>
   149d4:	str	r6, [r7]
   149d8:	mov	r0, r4
   149dc:	bl	12dbc <__assert_fail@plt+0x1a30>
   149e0:	ldr	r3, [r6, #48]	; 0x30
   149e4:	cmp	r3, #0
   149e8:	beq	14b70 <__assert_fail@plt+0x37e4>
   149ec:	ldrh	r3, [r6, #60]	; 0x3c
   149f0:	mov	r4, r6
   149f4:	cmp	r3, #4
   149f8:	bne	14d24 <__assert_fail@plt+0x3998>
   149fc:	ldr	r6, [r4, #8]
   14a00:	cmp	r6, #0
   14a04:	bne	149d4 <__assert_fail@plt+0x3648>
   14a08:	ldr	r6, [r4, #4]
   14a0c:	ldr	r3, [r6, #12]
   14a10:	cmp	r3, #0
   14a14:	bne	150c8 <__assert_fail@plt+0x3d3c>
   14a18:	str	r6, [r7]
   14a1c:	mov	r0, r4
   14a20:	bl	12dbc <__assert_fail@plt+0x1a30>
   14a24:	ldr	r3, [r6, #48]	; 0x30
   14a28:	cmn	r3, #1
   14a2c:	beq	14fb8 <__assert_fail@plt+0x3c2c>
   14a30:	ldrh	r3, [r6, #56]	; 0x38
   14a34:	cmp	r3, #11
   14a38:	beq	14d98 <__assert_fail@plt+0x3a0c>
   14a3c:	ldr	r3, [r6, #40]	; 0x28
   14a40:	ldr	r2, [r7, #24]
   14a44:	mov	r1, #0
   14a48:	strb	r1, [r2, r3]
   14a4c:	ldr	r3, [r6, #48]	; 0x30
   14a50:	cmp	r3, r1
   14a54:	beq	14eb4 <__assert_fail@plt+0x3b28>
   14a58:	ldrh	r3, [r6, #58]	; 0x3a
   14a5c:	tst	r3, #2
   14a60:	beq	14e74 <__assert_fail@plt+0x3ae8>
   14a64:	ldr	r3, [r7, #48]	; 0x30
   14a68:	tst	r3, #4
   14a6c:	beq	14f28 <__assert_fail@plt+0x3b9c>
   14a70:	ldr	r0, [r6, #36]	; 0x24
   14a74:	bl	11350 <close@plt>
   14a78:	ldr	r3, [r7, #48]	; 0x30
   14a7c:	ldrh	r2, [r6, #56]	; 0x38
   14a80:	cmp	r2, #2
   14a84:	beq	14ab8 <__assert_fail@plt+0x372c>
   14a88:	ldr	r2, [r6, #32]
   14a8c:	cmp	r2, #0
   14a90:	movne	r2, #7
   14a94:	strhne	r2, [r6, #56]	; 0x38
   14a98:	bne	14ab8 <__assert_fail@plt+0x372c>
   14a9c:	mov	r2, #6
   14aa0:	mov	r0, r3
   14aa4:	strh	r2, [r6, #56]	; 0x38
   14aa8:	add	r1, r7, #56	; 0x38
   14aac:	mov	r2, r6
   14ab0:	bl	13140 <__assert_fail@plt+0x1db4>
   14ab4:	ldr	r3, [r7, #48]	; 0x30
   14ab8:	tst	r3, #8192	; 0x2000
   14abc:	beq	14b64 <__assert_fail@plt+0x37d8>
   14ac0:	mov	r6, #0
   14ac4:	mov	r0, r6
   14ac8:	add	sp, sp, #12
   14acc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14ad0:	ldrh	r3, [r4, #56]	; 0x38
   14ad4:	sub	r2, r3, #12
   14ad8:	cmp	r2, #1
   14adc:	bls	14f70 <__assert_fail@plt+0x3be4>
   14ae0:	cmp	r3, #1
   14ae4:	bne	149fc <__assert_fail@plt+0x3670>
   14ae8:	tst	r1, #64	; 0x40
   14aec:	beq	14da4 <__assert_fail@plt+0x3a18>
   14af0:	ldrd	r8, [r4, #64]	; 0x40
   14af4:	ldrd	r2, [r7, #16]
   14af8:	cmp	r9, r3
   14afc:	cmpeq	r8, r2
   14b00:	beq	14da4 <__assert_fail@plt+0x3a18>
   14b04:	ldrh	r3, [r4, #58]	; 0x3a
   14b08:	tst	r3, #2
   14b0c:	bne	150bc <__assert_fail@plt+0x3d30>
   14b10:	ldr	r5, [r7, #4]
   14b14:	cmp	r5, #0
   14b18:	beq	14b48 <__assert_fail@plt+0x37bc>
   14b1c:	ldr	r0, [r5, #12]
   14b20:	ldr	r6, [r5, #8]
   14b24:	cmp	r0, #0
   14b28:	beq	14b30 <__assert_fail@plt+0x37a4>
   14b2c:	bl	11368 <closedir@plt>
   14b30:	mov	r0, r5
   14b34:	bl	12dbc <__assert_fail@plt+0x1a30>
   14b38:	cmp	r6, #0
   14b3c:	mov	r5, r6
   14b40:	bne	14b1c <__assert_fail@plt+0x3790>
   14b44:	str	r6, [r7, #4]
   14b48:	mov	r3, #6
   14b4c:	strh	r3, [r4, #56]	; 0x38
   14b50:	mov	r2, r4
   14b54:	add	r1, r7, #56	; 0x38
   14b58:	ldr	r0, [r7, #48]	; 0x30
   14b5c:	mov	r6, r4
   14b60:	bl	13140 <__assert_fail@plt+0x1db4>
   14b64:	mov	r0, r6
   14b68:	add	sp, sp, #12
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14b70:	ldr	r3, [r7, #48]	; 0x30
   14b74:	ands	r8, r3, #4
   14b78:	addne	r4, r7, #60	; 0x3c
   14b7c:	bne	14bb0 <__assert_fail@plt+0x3824>
   14b80:	tst	r3, #512	; 0x200
   14b84:	bne	14fd8 <__assert_fail@plt+0x3c4c>
   14b88:	ldr	r0, [r7, #28]
   14b8c:	bl	112fc <fchdir@plt>
   14b90:	add	r4, r7, #60	; 0x3c
   14b94:	adds	r5, r0, #0
   14b98:	movne	r5, #1
   14b9c:	b	14bb0 <__assert_fail@plt+0x3824>
   14ba0:	mov	r0, r4
   14ba4:	bl	16e04 <__assert_fail@plt+0x5a78>
   14ba8:	cmp	r0, #0
   14bac:	bge	14d9c <__assert_fail@plt+0x3a10>
   14bb0:	mov	r0, r4
   14bb4:	bl	16db8 <__assert_fail@plt+0x5a2c>
   14bb8:	cmp	r0, #0
   14bbc:	beq	14ba0 <__assert_fail@plt+0x3814>
   14bc0:	cmp	r5, #0
   14bc4:	bne	15098 <__assert_fail@plt+0x3d0c>
   14bc8:	ldr	r2, [r7, #48]	; 0x30
   14bcc:	ldr	r3, [pc, #1760]	; 152b4 <__assert_fail@plt+0x3f28>
   14bd0:	ldr	r0, [r7, #56]	; 0x38
   14bd4:	and	r3, r3, r2
   14bd8:	cmp	r3, #0
   14bdc:	beq	15090 <__assert_fail@plt+0x3d04>
   14be0:	cmp	r0, #0
   14be4:	beq	14bec <__assert_fail@plt+0x3860>
   14be8:	bl	15f70 <__assert_fail@plt+0x4be4>
   14bec:	ldr	r2, [r6, #52]	; 0x34
   14bf0:	add	r5, r6, #168	; 0xa8
   14bf4:	str	r2, [r6, #40]	; 0x28
   14bf8:	mov	r1, r5
   14bfc:	add	r2, r2, #1
   14c00:	ldr	r0, [r7, #24]
   14c04:	bl	11098 <memmove@plt>
   14c08:	mov	r0, r5
   14c0c:	mov	r1, #47	; 0x2f
   14c10:	bl	112c0 <strrchr@plt>
   14c14:	cmp	r0, #0
   14c18:	beq	14c48 <__assert_fail@plt+0x38bc>
   14c1c:	cmp	r5, r0
   14c20:	beq	150ac <__assert_fail@plt+0x3d20>
   14c24:	add	r4, r0, #1
   14c28:	mov	r0, r4
   14c2c:	bl	1120c <strlen@plt>
   14c30:	mov	r1, r4
   14c34:	mov	r8, r0
   14c38:	add	r2, r8, #1
   14c3c:	mov	r0, r5
   14c40:	bl	11098 <memmove@plt>
   14c44:	str	r8, [r6, #52]	; 0x34
   14c48:	ldr	r1, [r7, #48]	; 0x30
   14c4c:	ldr	r3, [pc, #1632]	; 152b4 <__assert_fail@plt+0x3f28>
   14c50:	ldr	r2, [r7, #24]
   14c54:	and	r3, r3, r1
   14c58:	cmp	r3, #0
   14c5c:	str	r2, [r6, #28]
   14c60:	str	r2, [r6, #24]
   14c64:	beq	14e54 <__assert_fail@plt+0x3ac8>
   14c68:	ldr	r2, [pc, #1608]	; 152b8 <__assert_fail@plt+0x3f2c>
   14c6c:	ldr	r3, [pc, #1608]	; 152bc <__assert_fail@plt+0x3f30>
   14c70:	str	r2, [sp]
   14c74:	mov	r1, #0
   14c78:	ldr	r2, [pc, #1600]	; 152c0 <__assert_fail@plt+0x3f34>
   14c7c:	mov	r0, #31
   14c80:	bl	15c80 <__assert_fail@plt+0x48f4>
   14c84:	ldrh	r3, [r6, #56]	; 0x38
   14c88:	str	r0, [r7, #56]	; 0x38
   14c8c:	cmp	r3, #11
   14c90:	str	r6, [r7]
   14c94:	beq	14d7c <__assert_fail@plt+0x39f0>
   14c98:	cmp	r3, #1
   14c9c:	bne	14b64 <__assert_fail@plt+0x37d8>
   14ca0:	ldr	r3, [r6, #48]	; 0x30
   14ca4:	cmp	r3, #0
   14ca8:	ldrdeq	r2, [r6, #64]	; 0x40
   14cac:	strdeq	r2, [r7, #16]
   14cb0:	ldr	r2, [r7, #48]	; 0x30
   14cb4:	ldr	r3, [pc, #1528]	; 152b4 <__assert_fail@plt+0x3f28>
   14cb8:	and	r3, r3, r2
   14cbc:	cmp	r3, #0
   14cc0:	beq	14e18 <__assert_fail@plt+0x3a8c>
   14cc4:	mov	r0, #24
   14cc8:	bl	1ce1c <__assert_fail@plt+0xba90>
   14ccc:	subs	r8, r0, #0
   14cd0:	beq	14fa4 <__assert_fail@plt+0x3c18>
   14cd4:	ldrd	r4, [r6, #64]	; 0x40
   14cd8:	ldrd	r2, [r6, #160]	; 0xa0
   14cdc:	ldr	r0, [r7, #56]	; 0x38
   14ce0:	strd	r4, [r8]
   14ce4:	strd	r2, [r8, #8]
   14ce8:	str	r6, [r8, #16]
   14cec:	mov	r1, r8
   14cf0:	bl	165e8 <__assert_fail@plt+0x525c>
   14cf4:	cmp	r8, r0
   14cf8:	mov	r4, r0
   14cfc:	beq	14b64 <__assert_fail@plt+0x37d8>
   14d00:	mov	r0, r8
   14d04:	bl	12dbc <__assert_fail@plt+0x1a30>
   14d08:	cmp	r4, #0
   14d0c:	beq	14fa4 <__assert_fail@plt+0x3c18>
   14d10:	ldr	r2, [r4, #16]
   14d14:	mov	r3, #2
   14d18:	str	r2, [r6]
   14d1c:	strh	r3, [r6, #56]	; 0x38
   14d20:	b	14b64 <__assert_fail@plt+0x37d8>
   14d24:	cmp	r3, #2
   14d28:	beq	150fc <__assert_fail@plt+0x3d70>
   14d2c:	ldr	r3, [r6, #4]
   14d30:	mov	ip, #47	; 0x2f
   14d34:	ldr	r2, [r7, #24]
   14d38:	ldr	r0, [r3, #40]	; 0x28
   14d3c:	ldr	lr, [r3, #28]
   14d40:	sub	r3, r0, #1
   14d44:	add	r1, r6, #168	; 0xa8
   14d48:	ldrb	lr, [lr, r3]
   14d4c:	cmp	lr, ip
   14d50:	movne	r3, r0
   14d54:	add	r0, r2, r3
   14d58:	strb	ip, [r2, r3]
   14d5c:	ldr	r2, [r6, #52]	; 0x34
   14d60:	add	r0, r0, #1
   14d64:	add	r2, r2, #1
   14d68:	bl	11098 <memmove@plt>
   14d6c:	ldrh	r3, [r6, #56]	; 0x38
   14d70:	str	r6, [r7]
   14d74:	cmp	r3, #11
   14d78:	bne	14c98 <__assert_fail@plt+0x390c>
   14d7c:	ldrd	r2, [r6, #112]	; 0x70
   14d80:	cmp	r3, #0
   14d84:	cmpeq	r2, #2
   14d88:	beq	15128 <__assert_fail@plt+0x3d9c>
   14d8c:	cmp	r3, #0
   14d90:	cmpeq	r2, #1
   14d94:	beq	14b64 <__assert_fail@plt+0x37d8>
   14d98:	bl	11344 <abort@plt>
   14d9c:	bl	11350 <close@plt>
   14da0:	b	14bb0 <__assert_fail@plt+0x3824>
   14da4:	ldr	r5, [r7, #4]
   14da8:	cmp	r5, #0
   14dac:	beq	15038 <__assert_fail@plt+0x3cac>
   14db0:	tst	r1, #4096	; 0x1000
   14db4:	bne	15004 <__assert_fail@plt+0x3c78>
   14db8:	ldr	r3, [r4, #24]
   14dbc:	mvn	r2, #0
   14dc0:	mov	r1, r4
   14dc4:	mov	r0, r7
   14dc8:	bl	131f8 <__assert_fail@plt+0x1e6c>
   14dcc:	cmp	r0, #0
   14dd0:	beq	14f18 <__assert_fail@plt+0x3b8c>
   14dd4:	bl	1123c <__errno_location@plt>
   14dd8:	ldrh	r3, [r4, #58]	; 0x3a
   14ddc:	ldr	r6, [r7, #4]
   14de0:	orr	r3, r3, #1
   14de4:	cmp	r6, #0
   14de8:	ldr	r2, [r0]
   14dec:	strh	r3, [r4, #58]	; 0x3a
   14df0:	str	r2, [r4, #32]
   14df4:	beq	14f1c <__assert_fail@plt+0x3b90>
   14df8:	mov	r3, r6
   14dfc:	ldr	r2, [r3, #4]
   14e00:	ldr	r2, [r2, #24]
   14e04:	str	r2, [r3, #24]
   14e08:	ldr	r3, [r3, #8]
   14e0c:	cmp	r3, #0
   14e10:	bne	14dfc <__assert_fail@plt+0x3a70>
   14e14:	b	14f1c <__assert_fail@plt+0x3b90>
   14e18:	ldr	r0, [r7, #56]	; 0x38
   14e1c:	add	r1, r6, #64	; 0x40
   14e20:	bl	1cf44 <__assert_fail@plt+0xbbb8>
   14e24:	cmp	r0, #0
   14e28:	movne	r3, #2
   14e2c:	strne	r6, [r6]
   14e30:	strhne	r3, [r6, #56]	; 0x38
   14e34:	b	14b64 <__assert_fail@plt+0x37d8>
   14e38:	mov	r3, r5
   14e3c:	ldr	r0, [r0, #32]
   14e40:	mov	r2, r4
   14e44:	bl	12ff4 <__assert_fail@plt+0x1c68>
   14e48:	mov	r6, r4
   14e4c:	strh	r0, [r4, #56]	; 0x38
   14e50:	b	14b64 <__assert_fail@plt+0x37d8>
   14e54:	mov	r0, #32
   14e58:	bl	1ce1c <__assert_fail@plt+0xba90>
   14e5c:	cmp	r0, #0
   14e60:	str	r0, [r7, #56]	; 0x38
   14e64:	beq	14d6c <__assert_fail@plt+0x39e0>
   14e68:	bl	1cf20 <__assert_fail@plt+0xbb94>
   14e6c:	ldrh	r3, [r6, #56]	; 0x38
   14e70:	b	14c8c <__assert_fail@plt+0x3900>
   14e74:	tst	r3, #1
   14e78:	bne	14a78 <__assert_fail@plt+0x36ec>
   14e7c:	ldr	r3, [pc, #1088]	; 152c4 <__assert_fail@plt+0x3f38>
   14e80:	mvn	r2, #0
   14e84:	ldr	r1, [r6, #4]
   14e88:	mov	r0, r7
   14e8c:	bl	131f8 <__assert_fail@plt+0x1e6c>
   14e90:	cmp	r0, #0
   14e94:	beq	14a78 <__assert_fail@plt+0x36ec>
   14e98:	bl	1123c <__errno_location@plt>
   14e9c:	ldr	r3, [r7, #48]	; 0x30
   14ea0:	orr	r3, r3, #8192	; 0x2000
   14ea4:	ldr	r2, [r0]
   14ea8:	str	r2, [r6, #32]
   14eac:	str	r3, [r7, #48]	; 0x30
   14eb0:	b	14a7c <__assert_fail@plt+0x36f0>
   14eb4:	ldr	r3, [r7, #48]	; 0x30
   14eb8:	ands	r8, r3, #4
   14ebc:	addne	r4, r7, #60	; 0x3c
   14ec0:	bne	14ef4 <__assert_fail@plt+0x3b68>
   14ec4:	tst	r3, #512	; 0x200
   14ec8:	bne	15174 <__assert_fail@plt+0x3de8>
   14ecc:	ldr	r0, [r7, #28]
   14ed0:	bl	112fc <fchdir@plt>
   14ed4:	add	r4, r7, #60	; 0x3c
   14ed8:	adds	r5, r0, #0
   14edc:	movne	r5, #1
   14ee0:	b	14ef4 <__assert_fail@plt+0x3b68>
   14ee4:	mov	r0, r4
   14ee8:	bl	16e04 <__assert_fail@plt+0x5a78>
   14eec:	cmp	r0, #0
   14ef0:	bge	14f10 <__assert_fail@plt+0x3b84>
   14ef4:	mov	r0, r4
   14ef8:	bl	16db8 <__assert_fail@plt+0x5a2c>
   14efc:	cmp	r0, #0
   14f00:	beq	14ee4 <__assert_fail@plt+0x3b58>
   14f04:	cmp	r5, #0
   14f08:	bne	14e98 <__assert_fail@plt+0x3b0c>
   14f0c:	b	14a78 <__assert_fail@plt+0x36ec>
   14f10:	bl	11350 <close@plt>
   14f14:	b	14ef4 <__assert_fail@plt+0x3b68>
   14f18:	ldr	r6, [r7, #4]
   14f1c:	mov	r3, #0
   14f20:	str	r3, [r7, #4]
   14f24:	b	14d2c <__assert_fail@plt+0x39a0>
   14f28:	tst	r3, #512	; 0x200
   14f2c:	beq	15148 <__assert_fail@plt+0x3dbc>
   14f30:	ldr	r1, [r7, #32]
   14f34:	ldr	r4, [r6, #36]	; 0x24
   14f38:	cmn	r1, #100	; 0x64
   14f3c:	sub	r3, r4, r1
   14f40:	clz	r3, r3
   14f44:	lsr	r3, r3, #5
   14f48:	moveq	r3, #0
   14f4c:	cmp	r3, #0
   14f50:	bne	14d98 <__assert_fail@plt+0x3a0c>
   14f54:	add	r0, r7, #60	; 0x3c
   14f58:	bl	16dc0 <__assert_fail@plt+0x5a34>
   14f5c:	cmp	r0, #0
   14f60:	blt	14f68 <__assert_fail@plt+0x3bdc>
   14f64:	bl	11350 <close@plt>
   14f68:	str	r4, [r7, #32]
   14f6c:	b	14a70 <__assert_fail@plt+0x36e4>
   14f70:	mov	r3, #1
   14f74:	mov	r2, r4
   14f78:	ldr	r0, [r0, #32]
   14f7c:	bl	12ff4 <__assert_fail@plt+0x1c68>
   14f80:	cmp	r0, #1
   14f84:	strh	r0, [r4, #56]	; 0x38
   14f88:	mov	r3, r0
   14f8c:	beq	151b4 <__assert_fail@plt+0x3e28>
   14f90:	cmp	r0, #11
   14f94:	mov	r6, r4
   14f98:	str	r4, [r7]
   14f9c:	bne	14b64 <__assert_fail@plt+0x37d8>
   14fa0:	b	14d7c <__assert_fail@plt+0x39f0>
   14fa4:	bl	1123c <__errno_location@plt>
   14fa8:	mov	r3, #12
   14fac:	mov	r6, #0
   14fb0:	str	r3, [r0]
   14fb4:	b	14b64 <__assert_fail@plt+0x37d8>
   14fb8:	mov	r0, r6
   14fbc:	bl	12dbc <__assert_fail@plt+0x1a30>
   14fc0:	bl	1123c <__errno_location@plt>
   14fc4:	mov	r3, #0
   14fc8:	mov	r6, r3
   14fcc:	str	r3, [r0]
   14fd0:	str	r3, [r7]
   14fd4:	b	14b64 <__assert_fail@plt+0x37d8>
   14fd8:	add	r4, r7, #60	; 0x3c
   14fdc:	mov	r0, r4
   14fe0:	ldr	r1, [r7, #32]
   14fe4:	bl	16dc0 <__assert_fail@plt+0x5a34>
   14fe8:	cmp	r0, #0
   14fec:	blt	14ff4 <__assert_fail@plt+0x3c68>
   14ff0:	bl	11350 <close@plt>
   14ff4:	mvn	r3, #99	; 0x63
   14ff8:	mov	r5, r8
   14ffc:	str	r3, [r7, #32]
   15000:	b	14bb0 <__assert_fail@plt+0x3824>
   15004:	bic	ip, r1, #4096	; 0x1000
   15008:	str	ip, [r7, #48]	; 0x30
   1500c:	ldr	r0, [r5, #12]
   15010:	ldr	r6, [r5, #8]
   15014:	cmp	r0, #0
   15018:	beq	15020 <__assert_fail@plt+0x3c94>
   1501c:	bl	11368 <closedir@plt>
   15020:	mov	r0, r5
   15024:	bl	12dbc <__assert_fail@plt+0x1a30>
   15028:	cmp	r6, #0
   1502c:	mov	r5, r6
   15030:	bne	1500c <__assert_fail@plt+0x3c80>
   15034:	str	r6, [r7, #4]
   15038:	mov	r1, #3
   1503c:	mov	r0, r7
   15040:	bl	13490 <__assert_fail@plt+0x2104>
   15044:	cmp	r0, #0
   15048:	mov	r6, r0
   1504c:	str	r0, [r7, #4]
   15050:	bne	14f1c <__assert_fail@plt+0x3b90>
   15054:	ldr	r0, [r7, #48]	; 0x30
   15058:	tst	r0, #8192	; 0x2000
   1505c:	bne	14ac0 <__assert_fail@plt+0x3734>
   15060:	ldr	r3, [r4, #32]
   15064:	cmp	r3, #0
   15068:	beq	1507c <__assert_fail@plt+0x3cf0>
   1506c:	ldrh	r3, [r4, #56]	; 0x38
   15070:	cmp	r3, #4
   15074:	movne	r3, #7
   15078:	strhne	r3, [r4, #56]	; 0x38
   1507c:	add	r1, r7, #56	; 0x38
   15080:	mov	r2, r4
   15084:	bl	13140 <__assert_fail@plt+0x1db4>
   15088:	mov	r6, r4
   1508c:	b	14b64 <__assert_fail@plt+0x37d8>
   15090:	bl	12dbc <__assert_fail@plt+0x1a30>
   15094:	b	14bec <__assert_fail@plt+0x3860>
   15098:	ldr	r3, [r7, #48]	; 0x30
   1509c:	mov	r6, #0
   150a0:	orr	r3, r3, #8192	; 0x2000
   150a4:	str	r3, [r7, #48]	; 0x30
   150a8:	b	14b64 <__assert_fail@plt+0x37d8>
   150ac:	ldrb	r3, [r6, #169]	; 0xa9
   150b0:	cmp	r3, #0
   150b4:	bne	14c24 <__assert_fail@plt+0x3898>
   150b8:	b	14c48 <__assert_fail@plt+0x38bc>
   150bc:	ldr	r0, [r4, #36]	; 0x24
   150c0:	bl	11350 <close@plt>
   150c4:	b	14b10 <__assert_fail@plt+0x3784>
   150c8:	ldr	r3, [r6, #40]	; 0x28
   150cc:	ldr	r2, [r7, #24]
   150d0:	mov	r0, #0
   150d4:	str	r6, [r7]
   150d8:	mov	r1, #3
   150dc:	strb	r0, [r2, r3]
   150e0:	mov	r0, r7
   150e4:	bl	13490 <__assert_fail@plt+0x2104>
   150e8:	subs	r6, r0, #0
   150ec:	beq	151a0 <__assert_fail@plt+0x3e14>
   150f0:	mov	r0, r4
   150f4:	bl	12dbc <__assert_fail@plt+0x1a30>
   150f8:	b	14d2c <__assert_fail@plt+0x39a0>
   150fc:	mov	r3, #1
   15100:	mov	r2, r6
   15104:	ldr	r1, [r7, #48]	; 0x30
   15108:	ldr	r0, [r7, #32]
   1510c:	bl	12ff4 <__assert_fail@plt+0x1c68>
   15110:	cmp	r0, #1
   15114:	strh	r0, [r6, #56]	; 0x38
   15118:	beq	151cc <__assert_fail@plt+0x3e40>
   1511c:	mov	r3, #3
   15120:	strh	r3, [r6, #60]	; 0x3c
   15124:	b	14d2c <__assert_fail@plt+0x39a0>
   15128:	mov	r3, #0
   1512c:	mov	r2, r6
   15130:	ldr	r1, [r7, #48]	; 0x30
   15134:	ldr	r0, [r7, #32]
   15138:	bl	12ff4 <__assert_fail@plt+0x1c68>
   1513c:	mov	r3, r0
   15140:	strh	r0, [r6, #56]	; 0x38
   15144:	b	14c98 <__assert_fail@plt+0x390c>
   15148:	ldr	r0, [r6, #36]	; 0x24
   1514c:	bl	112fc <fchdir@plt>
   15150:	cmp	r0, #0
   15154:	beq	14a70 <__assert_fail@plt+0x36e4>
   15158:	bl	1123c <__errno_location@plt>
   1515c:	ldr	r3, [r7, #48]	; 0x30
   15160:	orr	r3, r3, #8192	; 0x2000
   15164:	ldr	r2, [r0]
   15168:	str	r2, [r6, #32]
   1516c:	str	r3, [r7, #48]	; 0x30
   15170:	b	14a70 <__assert_fail@plt+0x36e4>
   15174:	add	r4, r7, #60	; 0x3c
   15178:	mov	r0, r4
   1517c:	ldr	r1, [r7, #32]
   15180:	bl	16dc0 <__assert_fail@plt+0x5a34>
   15184:	cmp	r0, #0
   15188:	blt	15190 <__assert_fail@plt+0x3e04>
   1518c:	bl	11350 <close@plt>
   15190:	mvn	r3, #99	; 0x63
   15194:	mov	r5, r8
   15198:	str	r3, [r7, #32]
   1519c:	b	14ef4 <__assert_fail@plt+0x3b68>
   151a0:	ldr	r3, [r7, #48]	; 0x30
   151a4:	tst	r3, #8192	; 0x2000
   151a8:	bne	14ac0 <__assert_fail@plt+0x3734>
   151ac:	ldr	r6, [r4, #4]
   151b0:	b	14a18 <__assert_fail@plt+0x368c>
   151b4:	ldr	r1, [r7, #48]	; 0x30
   151b8:	tst	r1, #4
   151bc:	beq	15218 <__assert_fail@plt+0x3e8c>
   151c0:	str	r4, [r7]
   151c4:	mov	r6, r4
   151c8:	b	14c98 <__assert_fail@plt+0x390c>
   151cc:	ldr	r3, [r7, #48]	; 0x30
   151d0:	tst	r3, #4
   151d4:	bne	1511c <__assert_fail@plt+0x3d90>
   151d8:	ldr	r1, [pc, #232]	; 152c8 <__assert_fail@plt+0x3f3c>
   151dc:	tst	r3, #16
   151e0:	ldr	r2, [pc, #228]	; 152cc <__assert_fail@plt+0x3f40>
   151e4:	movne	r2, r1
   151e8:	tst	r3, #512	; 0x200
   151ec:	bne	15278 <__assert_fail@plt+0x3eec>
   151f0:	mov	r1, r2
   151f4:	ldr	r0, [pc, #212]	; 152d0 <__assert_fail@plt+0x3f44>
   151f8:	bl	1d284 <__assert_fail@plt+0xbef8>
   151fc:	cmp	r0, #0
   15200:	str	r0, [r6, #36]	; 0x24
   15204:	blt	15260 <__assert_fail@plt+0x3ed4>
   15208:	ldrh	r3, [r6, #58]	; 0x3a
   1520c:	orr	r3, r3, #2
   15210:	strh	r3, [r6, #58]	; 0x3a
   15214:	b	1511c <__assert_fail@plt+0x3d90>
   15218:	ldr	r3, [pc, #168]	; 152c8 <__assert_fail@plt+0x3f3c>
   1521c:	tst	r1, #16
   15220:	ldr	r2, [pc, #164]	; 152cc <__assert_fail@plt+0x3f40>
   15224:	movne	r2, r3
   15228:	tst	r1, #512	; 0x200
   1522c:	bne	152a4 <__assert_fail@plt+0x3f18>
   15230:	mov	r1, r2
   15234:	ldr	r0, [pc, #148]	; 152d0 <__assert_fail@plt+0x3f44>
   15238:	bl	1d284 <__assert_fail@plt+0xbef8>
   1523c:	cmp	r0, #0
   15240:	str	r0, [r4, #36]	; 0x24
   15244:	blt	15288 <__assert_fail@plt+0x3efc>
   15248:	ldrh	r2, [r4, #58]	; 0x3a
   1524c:	ldrh	r3, [r4, #56]	; 0x38
   15250:	mov	r6, r4
   15254:	orr	r2, r2, #2
   15258:	strh	r2, [r4, #58]	; 0x3a
   1525c:	b	14c8c <__assert_fail@plt+0x3900>
   15260:	bl	1123c <__errno_location@plt>
   15264:	mov	r2, #7
   15268:	ldr	r3, [r0]
   1526c:	strh	r2, [r6, #56]	; 0x38
   15270:	str	r3, [r6, #32]
   15274:	b	1511c <__assert_fail@plt+0x3d90>
   15278:	ldr	r1, [pc, #80]	; 152d0 <__assert_fail@plt+0x3f44>
   1527c:	ldr	r0, [r7, #32]
   15280:	bl	16eb4 <__assert_fail@plt+0x5b28>
   15284:	b	151fc <__assert_fail@plt+0x3e70>
   15288:	bl	1123c <__errno_location@plt>
   1528c:	mov	r2, #7
   15290:	mov	r3, r2
   15294:	ldr	r1, [r0]
   15298:	strh	r2, [r4, #56]	; 0x38
   1529c:	str	r1, [r4, #32]
   152a0:	b	151c0 <__assert_fail@plt+0x3e34>
   152a4:	ldr	r1, [pc, #36]	; 152d0 <__assert_fail@plt+0x3f44>
   152a8:	ldr	r0, [r7, #32]
   152ac:	bl	16eb4 <__assert_fail@plt+0x5b28>
   152b0:	b	1523c <__assert_fail@plt+0x3eb0>
   152b4:	andeq	r0, r0, r2, lsl #2
   152b8:			; <UNDEFINED> instruction: 0x00012dbc
   152bc:	andeq	r2, r1, r4, lsl lr
   152c0:	andeq	r2, r1, r8, asr lr
   152c4:	andeq	lr, r1, r4, ror #26
   152c8:	andeq	ip, r8, r0, lsl #18
   152cc:	andeq	r4, r8, r0, lsl #18
   152d0:	andeq	lr, r1, r8, ror #26
   152d4:	cmp	r2, #4
   152d8:	bhi	152ec <__assert_fail@plt+0x3f60>
   152dc:	mov	r3, #0
   152e0:	strh	r2, [r1, #60]	; 0x3c
   152e4:	mov	r0, r3
   152e8:	bx	lr
   152ec:	push	{r4, lr}
   152f0:	bl	1123c <__errno_location@plt>
   152f4:	mov	r2, #22
   152f8:	mov	r3, #1
   152fc:	str	r2, [r0]
   15300:	mov	r0, r3
   15304:	pop	{r4, pc}
   15308:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1530c:	bics	r4, r1, #4096	; 0x1000
   15310:	bne	15484 <__assert_fail@plt+0x40f8>
   15314:	mov	r6, r0
   15318:	mov	r7, r1
   1531c:	bl	1123c <__errno_location@plt>
   15320:	ldr	r8, [r6]
   15324:	str	r4, [r0]
   15328:	ldr	r3, [r6, #48]	; 0x30
   1532c:	mov	r9, r0
   15330:	ands	r3, r3, #8192	; 0x2000
   15334:	bne	1549c <__assert_fail@plt+0x4110>
   15338:	ldrh	r2, [r8, #56]	; 0x38
   1533c:	cmp	r2, #9
   15340:	ldreq	r3, [r8, #8]
   15344:	beq	153c8 <__assert_fail@plt+0x403c>
   15348:	cmp	r2, #1
   1534c:	bne	153c8 <__assert_fail@plt+0x403c>
   15350:	ldr	r4, [r6, #4]
   15354:	cmp	r4, #0
   15358:	beq	15380 <__assert_fail@plt+0x3ff4>
   1535c:	ldr	r0, [r4, #12]
   15360:	ldr	r5, [r4, #8]
   15364:	cmp	r0, #0
   15368:	beq	15370 <__assert_fail@plt+0x3fe4>
   1536c:	bl	11368 <closedir@plt>
   15370:	mov	r0, r4
   15374:	bl	12dbc <__assert_fail@plt+0x1a30>
   15378:	subs	r4, r5, #0
   1537c:	bne	1535c <__assert_fail@plt+0x3fd0>
   15380:	cmp	r7, #4096	; 0x1000
   15384:	movne	r4, #1
   15388:	beq	153d0 <__assert_fail@plt+0x4044>
   1538c:	ldr	r3, [r8, #48]	; 0x30
   15390:	cmp	r3, #0
   15394:	bne	153b4 <__assert_fail@plt+0x4028>
   15398:	ldr	r3, [r8, #24]
   1539c:	ldrb	r3, [r3]
   153a0:	cmp	r3, #47	; 0x2f
   153a4:	beq	153b4 <__assert_fail@plt+0x4028>
   153a8:	ldr	r3, [r6, #48]	; 0x30
   153ac:	tst	r3, #4
   153b0:	beq	153f0 <__assert_fail@plt+0x4064>
   153b4:	mov	r1, r4
   153b8:	mov	r0, r6
   153bc:	bl	13490 <__assert_fail@plt+0x2104>
   153c0:	mov	r3, r0
   153c4:	str	r0, [r6, #4]
   153c8:	mov	r0, r3
   153cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   153d0:	ldr	r3, [r6, #48]	; 0x30
   153d4:	mov	r4, #2
   153d8:	orr	r3, r3, #4096	; 0x1000
   153dc:	str	r3, [r6, #48]	; 0x30
   153e0:	ldr	r3, [r8, #48]	; 0x30
   153e4:	cmp	r3, #0
   153e8:	beq	15398 <__assert_fail@plt+0x400c>
   153ec:	b	153b4 <__assert_fail@plt+0x4028>
   153f0:	ldr	r2, [pc, #252]	; 154f4 <__assert_fail@plt+0x4168>
   153f4:	tst	r3, #16
   153f8:	ldr	r1, [pc, #248]	; 154f8 <__assert_fail@plt+0x416c>
   153fc:	moveq	r1, r2
   15400:	tst	r3, #512	; 0x200
   15404:	bne	154c0 <__assert_fail@plt+0x4134>
   15408:	ldr	r0, [pc, #236]	; 154fc <__assert_fail@plt+0x4170>
   1540c:	bl	1d284 <__assert_fail@plt+0xbef8>
   15410:	mov	r5, r0
   15414:	cmp	r5, #0
   15418:	movlt	r3, #0
   1541c:	strlt	r3, [r6, #4]
   15420:	blt	153c8 <__assert_fail@plt+0x403c>
   15424:	mov	r1, r4
   15428:	mov	r0, r6
   1542c:	bl	13490 <__assert_fail@plt+0x2104>
   15430:	ldr	r3, [r6, #48]	; 0x30
   15434:	ands	r4, r3, #512	; 0x200
   15438:	str	r0, [r6, #4]
   1543c:	beq	154a4 <__assert_fail@plt+0x4118>
   15440:	ldr	r1, [r6, #32]
   15444:	cmn	r1, #100	; 0x64
   15448:	sub	r3, r5, r1
   1544c:	clz	r3, r3
   15450:	lsr	r3, r3, #5
   15454:	moveq	r3, #0
   15458:	cmp	r3, #0
   1545c:	bne	154f0 <__assert_fail@plt+0x4164>
   15460:	add	r0, r6, #60	; 0x3c
   15464:	bl	16dc0 <__assert_fail@plt+0x5a34>
   15468:	cmp	r0, #0
   1546c:	blt	15474 <__assert_fail@plt+0x40e8>
   15470:	bl	11350 <close@plt>
   15474:	str	r5, [r6, #32]
   15478:	ldr	r3, [r6, #4]
   1547c:	mov	r0, r3
   15480:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15484:	bl	1123c <__errno_location@plt>
   15488:	mov	r2, #22
   1548c:	mov	r3, #0
   15490:	str	r2, [r0]
   15494:	mov	r0, r3
   15498:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1549c:	mov	r3, r4
   154a0:	b	153c8 <__assert_fail@plt+0x403c>
   154a4:	mov	r0, r5
   154a8:	bl	112fc <fchdir@plt>
   154ac:	cmp	r0, #0
   154b0:	bne	154d8 <__assert_fail@plt+0x414c>
   154b4:	mov	r0, r5
   154b8:	bl	11350 <close@plt>
   154bc:	b	15478 <__assert_fail@plt+0x40ec>
   154c0:	mov	r2, r1
   154c4:	ldr	r0, [r6, #32]
   154c8:	ldr	r1, [pc, #44]	; 154fc <__assert_fail@plt+0x4170>
   154cc:	bl	16eb4 <__assert_fail@plt+0x5b28>
   154d0:	mov	r5, r0
   154d4:	b	15414 <__assert_fail@plt+0x4088>
   154d8:	ldr	r6, [r9]
   154dc:	mov	r0, r5
   154e0:	bl	11350 <close@plt>
   154e4:	str	r6, [r9]
   154e8:	mov	r3, r4
   154ec:	b	153c8 <__assert_fail@plt+0x403c>
   154f0:	bl	11344 <abort@plt>
   154f4:	andeq	r4, r8, r0, lsl #18
   154f8:	andeq	ip, r8, r0, lsl #18
   154fc:	andeq	lr, r1, r8, ror #26
   15500:	push	{r4, lr}
   15504:	ror	r0, r0, #3
   15508:	bl	1d77c <__assert_fail@plt+0xc3f0>
   1550c:	mov	r0, r1
   15510:	pop	{r4, pc}
   15514:	sub	r0, r1, r0
   15518:	clz	r0, r0
   1551c:	lsr	r0, r0, #5
   15520:	bx	lr
   15524:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15528:	mov	r5, r1
   1552c:	mov	r6, r0
   15530:	ldr	r4, [r0, #24]
   15534:	ldr	r1, [r0, #8]
   15538:	mov	r0, r5
   1553c:	mov	r8, r3
   15540:	mov	sl, r2
   15544:	blx	r4
   15548:	ldr	r3, [r6, #8]
   1554c:	cmp	r0, r3
   15550:	bcs	15640 <__assert_fail@plt+0x42b4>
   15554:	ldr	r9, [r6]
   15558:	mov	r7, r0
   1555c:	add	r4, r9, r0, lsl #3
   15560:	str	r4, [sl]
   15564:	ldr	r3, [r9, r0, lsl #3]
   15568:	cmp	r3, #0
   1556c:	beq	15600 <__assert_fail@plt+0x4274>
   15570:	cmp	r5, r3
   15574:	beq	15594 <__assert_fail@plt+0x4208>
   15578:	mov	r1, r3
   1557c:	mov	r0, r5
   15580:	ldr	r3, [r6, #28]
   15584:	blx	r3
   15588:	cmp	r0, #0
   1558c:	beq	155f4 <__assert_fail@plt+0x4268>
   15590:	ldr	r3, [r9, r7, lsl #3]
   15594:	cmp	r8, #0
   15598:	beq	155c4 <__assert_fail@plt+0x4238>
   1559c:	ldr	r2, [r4, #4]
   155a0:	cmp	r2, #0
   155a4:	movne	ip, #0
   155a8:	ldmne	r2, {r0, r1}
   155ac:	streq	r2, [r9, r7, lsl #3]
   155b0:	stmne	r4, {r0, r1}
   155b4:	strne	ip, [r2]
   155b8:	ldrne	r1, [r6, #36]	; 0x24
   155bc:	strne	r1, [r2, #4]
   155c0:	strne	r2, [r6, #36]	; 0x24
   155c4:	mov	r0, r3
   155c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   155cc:	ldr	r3, [r2]
   155d0:	cmp	r5, r3
   155d4:	beq	15614 <__assert_fail@plt+0x4288>
   155d8:	mov	r1, r3
   155dc:	mov	r0, r5
   155e0:	ldr	r3, [r6, #28]
   155e4:	blx	r3
   155e8:	cmp	r0, #0
   155ec:	bne	1560c <__assert_fail@plt+0x4280>
   155f0:	ldr	r4, [r4, #4]
   155f4:	ldr	r2, [r4, #4]
   155f8:	cmp	r2, #0
   155fc:	bne	155cc <__assert_fail@plt+0x4240>
   15600:	mov	r3, #0
   15604:	mov	r0, r3
   15608:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1560c:	ldr	r2, [r4, #4]
   15610:	ldr	r3, [r2]
   15614:	cmp	r8, #0
   15618:	beq	155c4 <__assert_fail@plt+0x4238>
   1561c:	ldr	r0, [r2, #4]
   15620:	mov	r1, #0
   15624:	str	r0, [r4, #4]
   15628:	str	r1, [r2]
   1562c:	ldr	r1, [r6, #36]	; 0x24
   15630:	mov	r0, r3
   15634:	str	r1, [r2, #4]
   15638:	str	r2, [r6, #36]	; 0x24
   1563c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15640:	bl	11344 <abort@plt>
   15644:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15648:	ldr	r6, [r1]
   1564c:	ldr	r3, [r1, #4]
   15650:	cmp	r6, r3
   15654:	bcs	15724 <__assert_fail@plt+0x4398>
   15658:	mov	r9, r2
   1565c:	mov	r5, r0
   15660:	mov	r8, r1
   15664:	add	r6, r6, #8
   15668:	mov	sl, #0
   1566c:	ldr	fp, [r6, #-8]
   15670:	mov	r7, r6
   15674:	cmp	fp, #0
   15678:	beq	15718 <__assert_fail@plt+0x438c>
   1567c:	ldr	r4, [r6, #-4]
   15680:	cmp	r4, #0
   15684:	beq	15708 <__assert_fail@plt+0x437c>
   15688:	ldr	r1, [r5, #8]
   1568c:	b	156a8 <__assert_fail@plt+0x431c>
   15690:	ldr	r3, [ip, #4]
   15694:	cmp	r2, #0
   15698:	str	r3, [r4, #4]
   1569c:	str	r4, [ip, #4]
   156a0:	beq	15704 <__assert_fail@plt+0x4378>
   156a4:	mov	r4, r2
   156a8:	ldr	fp, [r4]
   156ac:	ldr	r3, [r5, #24]
   156b0:	mov	r0, fp
   156b4:	blx	r3
   156b8:	ldr	r1, [r5, #8]
   156bc:	cmp	r0, r1
   156c0:	bcs	157c4 <__assert_fail@plt+0x4438>
   156c4:	ldr	r3, [r5]
   156c8:	ldr	r2, [r4, #4]
   156cc:	add	ip, r3, r0, lsl #3
   156d0:	ldr	lr, [r3, r0, lsl #3]
   156d4:	cmp	lr, #0
   156d8:	bne	15690 <__assert_fail@plt+0x4304>
   156dc:	ldr	ip, [r5, #12]
   156e0:	str	fp, [r3, r0, lsl #3]
   156e4:	add	r3, ip, #1
   156e8:	str	r3, [r5, #12]
   156ec:	str	lr, [r4]
   156f0:	ldr	r3, [r5, #36]	; 0x24
   156f4:	cmp	r2, #0
   156f8:	str	r3, [r4, #4]
   156fc:	str	r4, [r5, #36]	; 0x24
   15700:	bne	156a4 <__assert_fail@plt+0x4318>
   15704:	ldr	fp, [r6, #-8]
   15708:	cmp	r9, #0
   1570c:	str	sl, [r6, #-4]
   15710:	beq	1572c <__assert_fail@plt+0x43a0>
   15714:	ldr	r3, [r8, #4]
   15718:	cmp	r3, r7
   1571c:	add	r6, r6, #8
   15720:	bhi	1566c <__assert_fail@plt+0x42e0>
   15724:	mov	r0, #1
   15728:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1572c:	ldr	r3, [r5, #24]
   15730:	ldr	r1, [r5, #8]
   15734:	mov	r0, fp
   15738:	blx	r3
   1573c:	ldr	r3, [r5, #8]
   15740:	cmp	r0, r3
   15744:	bcs	157c4 <__assert_fail@plt+0x4438>
   15748:	ldr	r3, [r5]
   1574c:	add	r4, r3, r0, lsl #3
   15750:	ldr	r2, [r3, r0, lsl #3]
   15754:	cmp	r2, #0
   15758:	beq	15798 <__assert_fail@plt+0x440c>
   1575c:	ldr	r0, [r5, #36]	; 0x24
   15760:	cmp	r0, #0
   15764:	beq	157ac <__assert_fail@plt+0x4420>
   15768:	ldr	r3, [r0, #4]
   1576c:	str	r3, [r5, #36]	; 0x24
   15770:	ldr	r3, [r4, #4]
   15774:	str	fp, [r0]
   15778:	str	r3, [r0, #4]
   1577c:	str	r0, [r4, #4]
   15780:	ldr	r2, [r8, #12]
   15784:	str	sl, [r6, #-8]
   15788:	sub	r2, r2, #1
   1578c:	ldr	r3, [r8, #4]
   15790:	str	r2, [r8, #12]
   15794:	b	15718 <__assert_fail@plt+0x438c>
   15798:	ldr	r2, [r5, #12]
   1579c:	str	fp, [r3, r0, lsl #3]
   157a0:	add	r3, r2, #1
   157a4:	str	r3, [r5, #12]
   157a8:	b	15780 <__assert_fail@plt+0x43f4>
   157ac:	mov	r0, #8
   157b0:	bl	1ce1c <__assert_fail@plt+0xba90>
   157b4:	cmp	r0, #0
   157b8:	bne	15770 <__assert_fail@plt+0x43e4>
   157bc:	mov	r0, r9
   157c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157c4:	bl	11344 <abort@plt>
   157c8:	ldr	r0, [r0, #8]
   157cc:	bx	lr
   157d0:	ldr	r0, [r0, #12]
   157d4:	bx	lr
   157d8:	ldr	r0, [r0, #16]
   157dc:	bx	lr
   157e0:	ldm	r0, {r1, ip}
   157e4:	mov	r0, #0
   157e8:	cmp	r1, ip
   157ec:	bcs	15834 <__assert_fail@plt+0x44a8>
   157f0:	ldr	r3, [r1]
   157f4:	cmp	r3, #0
   157f8:	beq	15824 <__assert_fail@plt+0x4498>
   157fc:	ldr	r3, [r1, #4]
   15800:	mov	r2, #1
   15804:	cmp	r3, #0
   15808:	beq	1581c <__assert_fail@plt+0x4490>
   1580c:	ldr	r3, [r3, #4]
   15810:	add	r2, r2, #1
   15814:	cmp	r3, #0
   15818:	bne	1580c <__assert_fail@plt+0x4480>
   1581c:	cmp	r0, r2
   15820:	movcc	r0, r2
   15824:	add	r1, r1, #8
   15828:	cmp	r1, ip
   1582c:	bcc	157f0 <__assert_fail@plt+0x4464>
   15830:	bx	lr
   15834:	bx	lr
   15838:	push	{lr}		; (str lr, [sp, #-4]!)
   1583c:	mov	r2, #0
   15840:	ldm	r0, {r1, lr}
   15844:	mov	ip, r2
   15848:	cmp	r1, lr
   1584c:	bcs	1588c <__assert_fail@plt+0x4500>
   15850:	ldr	r3, [r1]
   15854:	cmp	r3, #0
   15858:	beq	15880 <__assert_fail@plt+0x44f4>
   1585c:	ldr	r3, [r1, #4]
   15860:	add	ip, ip, #1
   15864:	cmp	r3, #0
   15868:	add	r2, r2, #1
   1586c:	beq	15880 <__assert_fail@plt+0x44f4>
   15870:	ldr	r3, [r3, #4]
   15874:	add	r2, r2, #1
   15878:	cmp	r3, #0
   1587c:	bne	15870 <__assert_fail@plt+0x44e4>
   15880:	add	r1, r1, #8
   15884:	cmp	r1, lr
   15888:	bcc	15850 <__assert_fail@plt+0x44c4>
   1588c:	ldr	r3, [r0, #12]
   15890:	cmp	r3, ip
   15894:	ldreq	r0, [r0, #16]
   15898:	subeq	r0, r0, r2
   1589c:	clzeq	r0, r0
   158a0:	lsreq	r0, r0, #5
   158a4:	movne	r0, #0
   158a8:	pop	{pc}		; (ldr pc, [sp], #4)
   158ac:	push	{r4, r5, r6, r7, lr}
   158b0:	mov	r5, r1
   158b4:	ldm	r0, {ip, lr}
   158b8:	sub	sp, sp, #12
   158bc:	ldr	r3, [r0, #16]
   158c0:	cmp	ip, lr
   158c4:	mov	r4, #0
   158c8:	ldr	r6, [r0, #8]
   158cc:	ldr	r7, [r0, #12]
   158d0:	bcs	15914 <__assert_fail@plt+0x4588>
   158d4:	ldr	r2, [ip]
   158d8:	cmp	r2, #0
   158dc:	beq	15908 <__assert_fail@plt+0x457c>
   158e0:	ldr	r2, [ip, #4]
   158e4:	mov	r1, #1
   158e8:	cmp	r2, #0
   158ec:	beq	15900 <__assert_fail@plt+0x4574>
   158f0:	ldr	r2, [r2, #4]
   158f4:	add	r1, r1, #1
   158f8:	cmp	r2, #0
   158fc:	bne	158f0 <__assert_fail@plt+0x4564>
   15900:	cmp	r4, r1
   15904:	movcc	r4, r1
   15908:	add	ip, ip, #8
   1590c:	cmp	ip, lr
   15910:	bcc	158d4 <__assert_fail@plt+0x4548>
   15914:	ldr	r2, [pc, #116]	; 15990 <__assert_fail@plt+0x4604>
   15918:	mov	r1, #1
   1591c:	mov	r0, r5
   15920:	bl	11278 <__fprintf_chk@plt>
   15924:	mov	r3, r6
   15928:	ldr	r2, [pc, #100]	; 15994 <__assert_fail@plt+0x4608>
   1592c:	mov	r1, #1
   15930:	mov	r0, r5
   15934:	bl	11278 <__fprintf_chk@plt>
   15938:	vmov	s15, r7
   1593c:	vldr	d5, [pc, #68]	; 15988 <__assert_fail@plt+0x45fc>
   15940:	mov	r3, r7
   15944:	ldr	r2, [pc, #76]	; 15998 <__assert_fail@plt+0x460c>
   15948:	vcvt.f64.u32	d6, s15
   1594c:	vmov	s15, r6
   15950:	mov	r1, #1
   15954:	mov	r0, r5
   15958:	vcvt.f64.u32	d7, s15
   1595c:	vmul.f64	d6, d6, d5
   15960:	vdiv.f64	d5, d6, d7
   15964:	vstr	d5, [sp]
   15968:	bl	11278 <__fprintf_chk@plt>
   1596c:	mov	r3, r4
   15970:	mov	r0, r5
   15974:	ldr	r2, [pc, #32]	; 1599c <__assert_fail@plt+0x4610>
   15978:	mov	r1, #1
   1597c:	add	sp, sp, #12
   15980:	pop	{r4, r5, r6, r7, lr}
   15984:	b	11278 <__fprintf_chk@plt>
   15988:	andeq	r0, r0, r0
   1598c:	subsmi	r0, r9, r0
   15990:	andeq	lr, r1, r0, lsl #27
   15994:	muleq	r1, r8, sp
   15998:			; <UNDEFINED> instruction: 0x0001edb0
   1599c:	ldrdeq	lr, [r1], -r4
   159a0:	push	{r4, r5, r6, lr}
   159a4:	mov	r5, r1
   159a8:	ldr	r3, [r0, #24]
   159ac:	mov	r6, r0
   159b0:	ldr	r1, [r0, #8]
   159b4:	mov	r0, r5
   159b8:	blx	r3
   159bc:	ldr	r3, [r6, #8]
   159c0:	cmp	r0, r3
   159c4:	bcs	15a24 <__assert_fail@plt+0x4698>
   159c8:	ldr	r3, [r6]
   159cc:	add	r4, r3, r0, lsl #3
   159d0:	ldr	r1, [r3, r0, lsl #3]
   159d4:	cmp	r1, #0
   159d8:	bne	159e4 <__assert_fail@plt+0x4658>
   159dc:	b	15a0c <__assert_fail@plt+0x4680>
   159e0:	ldr	r1, [r4]
   159e4:	cmp	r5, r1
   159e8:	beq	15a14 <__assert_fail@plt+0x4688>
   159ec:	ldr	r3, [r6, #28]
   159f0:	mov	r0, r5
   159f4:	blx	r3
   159f8:	cmp	r0, #0
   159fc:	bne	15a1c <__assert_fail@plt+0x4690>
   15a00:	ldr	r4, [r4, #4]
   15a04:	cmp	r4, #0
   15a08:	bne	159e0 <__assert_fail@plt+0x4654>
   15a0c:	mov	r0, #0
   15a10:	pop	{r4, r5, r6, pc}
   15a14:	mov	r0, r5
   15a18:	pop	{r4, r5, r6, pc}
   15a1c:	ldr	r0, [r4]
   15a20:	pop	{r4, r5, r6, pc}
   15a24:	bl	11344 <abort@plt>
   15a28:	ldr	r3, [r0, #16]
   15a2c:	cmp	r3, #0
   15a30:	beq	15a64 <__assert_fail@plt+0x46d8>
   15a34:	ldr	r3, [r0]
   15a38:	ldr	r2, [r0, #4]
   15a3c:	cmp	r3, r2
   15a40:	bcc	15a54 <__assert_fail@plt+0x46c8>
   15a44:	b	15a6c <__assert_fail@plt+0x46e0>
   15a48:	add	r3, r3, #8
   15a4c:	cmp	r3, r2
   15a50:	bcs	15a6c <__assert_fail@plt+0x46e0>
   15a54:	ldr	r0, [r3]
   15a58:	cmp	r0, #0
   15a5c:	beq	15a48 <__assert_fail@plt+0x46bc>
   15a60:	bx	lr
   15a64:	mov	r0, r3
   15a68:	bx	lr
   15a6c:	push	{r4, lr}
   15a70:	bl	11344 <abort@plt>
   15a74:	push	{r4, r5, r6, lr}
   15a78:	mov	r4, r1
   15a7c:	ldr	r3, [r0, #24]
   15a80:	mov	r5, r0
   15a84:	ldr	r1, [r0, #8]
   15a88:	mov	r0, r4
   15a8c:	blx	r3
   15a90:	ldr	r3, [r5, #8]
   15a94:	cmp	r0, r3
   15a98:	bcs	15afc <__assert_fail@plt+0x4770>
   15a9c:	ldr	r3, [r5]
   15aa0:	add	r0, r3, r0, lsl #3
   15aa4:	mov	r3, r0
   15aa8:	b	15ab4 <__assert_fail@plt+0x4728>
   15aac:	cmp	r3, #0
   15ab0:	beq	15ac8 <__assert_fail@plt+0x473c>
   15ab4:	ldm	r3, {r2, r3}
   15ab8:	cmp	r4, r2
   15abc:	bne	15aac <__assert_fail@plt+0x4720>
   15ac0:	cmp	r3, #0
   15ac4:	bne	15af4 <__assert_fail@plt+0x4768>
   15ac8:	ldr	r2, [r5, #4]
   15acc:	mov	r3, r0
   15ad0:	b	15ae0 <__assert_fail@plt+0x4754>
   15ad4:	ldr	r0, [r3]
   15ad8:	cmp	r0, #0
   15adc:	popne	{r4, r5, r6, pc}
   15ae0:	add	r3, r3, #8
   15ae4:	cmp	r3, r2
   15ae8:	bcc	15ad4 <__assert_fail@plt+0x4748>
   15aec:	mov	r0, #0
   15af0:	pop	{r4, r5, r6, pc}
   15af4:	ldr	r0, [r3]
   15af8:	pop	{r4, r5, r6, pc}
   15afc:	bl	11344 <abort@plt>
   15b00:	push	{r4, r5, r6, lr}
   15b04:	mov	r5, r0
   15b08:	ldr	r4, [r0]
   15b0c:	ldr	r0, [r0, #4]
   15b10:	cmp	r4, r0
   15b14:	bcs	15b90 <__assert_fail@plt+0x4804>
   15b18:	add	r4, r4, #8
   15b1c:	mov	ip, #0
   15b20:	ldr	r3, [r4, #-8]
   15b24:	mov	r6, r4
   15b28:	cmp	r3, #0
   15b2c:	beq	15b78 <__assert_fail@plt+0x47ec>
   15b30:	cmp	r2, ip
   15b34:	bls	15b84 <__assert_fail@plt+0x47f8>
   15b38:	str	r3, [r1, ip, lsl #2]
   15b3c:	ldr	r3, [r4, #-4]
   15b40:	add	r0, ip, #1
   15b44:	cmp	r3, #0
   15b48:	add	ip, r1, ip, lsl #2
   15b4c:	beq	15b70 <__assert_fail@plt+0x47e4>
   15b50:	cmp	r2, r0
   15b54:	beq	15b8c <__assert_fail@plt+0x4800>
   15b58:	ldr	lr, [r3]
   15b5c:	add	r0, r0, #1
   15b60:	str	lr, [ip, #4]!
   15b64:	ldr	r3, [r3, #4]
   15b68:	cmp	r3, #0
   15b6c:	bne	15b50 <__assert_fail@plt+0x47c4>
   15b70:	mov	ip, r0
   15b74:	ldr	r0, [r5, #4]
   15b78:	cmp	r0, r6
   15b7c:	add	r4, r4, #8
   15b80:	bhi	15b20 <__assert_fail@plt+0x4794>
   15b84:	mov	r0, ip
   15b88:	pop	{r4, r5, r6, pc}
   15b8c:	pop	{r4, r5, r6, pc}
   15b90:	mov	r0, #0
   15b94:	pop	{r4, r5, r6, pc}
   15b98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15b9c:	ldr	r3, [r0, #4]
   15ba0:	ldr	r8, [r0]
   15ba4:	cmp	r8, r3
   15ba8:	bcs	15c0c <__assert_fail@plt+0x4880>
   15bac:	mov	r7, r2
   15bb0:	mov	r6, r1
   15bb4:	mov	r9, r0
   15bb8:	mov	r5, #0
   15bbc:	ldr	r0, [r8]
   15bc0:	cmp	r0, #0
   15bc4:	beq	15bf8 <__assert_fail@plt+0x486c>
   15bc8:	mov	r4, r8
   15bcc:	b	15bd4 <__assert_fail@plt+0x4848>
   15bd0:	ldr	r0, [r4]
   15bd4:	mov	r1, r7
   15bd8:	blx	r6
   15bdc:	cmp	r0, #0
   15be0:	beq	15c04 <__assert_fail@plt+0x4878>
   15be4:	ldr	r4, [r4, #4]
   15be8:	add	r5, r5, #1
   15bec:	cmp	r4, #0
   15bf0:	bne	15bd0 <__assert_fail@plt+0x4844>
   15bf4:	ldr	r3, [r9, #4]
   15bf8:	add	r8, r8, #8
   15bfc:	cmp	r3, r8
   15c00:	bhi	15bbc <__assert_fail@plt+0x4830>
   15c04:	mov	r0, r5
   15c08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15c0c:	mov	r5, #0
   15c10:	b	15c04 <__assert_fail@plt+0x4878>
   15c14:	push	{r4, r5, r6, lr}
   15c18:	mov	r4, r0
   15c1c:	ldrb	r0, [r0]
   15c20:	cmp	r0, #0
   15c24:	beq	15c54 <__assert_fail@plt+0x48c8>
   15c28:	mov	r5, r1
   15c2c:	mov	r1, #0
   15c30:	rsb	r1, r1, r1, lsl #5
   15c34:	add	r0, r1, r0
   15c38:	mov	r1, r5
   15c3c:	bl	1d77c <__assert_fail@plt+0xc3f0>
   15c40:	ldrb	r0, [r4, #1]!
   15c44:	cmp	r0, #0
   15c48:	bne	15c30 <__assert_fail@plt+0x48a4>
   15c4c:	mov	r0, r1
   15c50:	pop	{r4, r5, r6, pc}
   15c54:	mov	r1, r0
   15c58:	b	15c4c <__assert_fail@plt+0x48c0>
   15c5c:	push	{lr}		; (str lr, [sp, #-4]!)
   15c60:	mov	ip, r0
   15c64:	ldr	lr, [pc, #16]	; 15c7c <__assert_fail@plt+0x48f0>
   15c68:	ldm	lr!, {r0, r1, r2, r3}
   15c6c:	ldr	lr, [lr]
   15c70:	stmia	ip!, {r0, r1, r2, r3}
   15c74:	str	lr, [ip]
   15c78:	pop	{pc}		; (ldr pc, [sp], #4)
   15c7c:	andeq	lr, r1, ip, ror #26
   15c80:	cmp	r2, #0
   15c84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c88:	mov	r4, r0
   15c8c:	ldr	sl, [pc, #548]	; 15eb8 <__assert_fail@plt+0x4b2c>
   15c90:	mov	r0, #40	; 0x28
   15c94:	movne	sl, r2
   15c98:	cmp	r3, #0
   15c9c:	ldr	fp, [pc, #536]	; 15ebc <__assert_fail@plt+0x4b30>
   15ca0:	mov	r5, r1
   15ca4:	movne	fp, r3
   15ca8:	bl	1ce1c <__assert_fail@plt+0xba90>
   15cac:	subs	r8, r0, #0
   15cb0:	beq	15d48 <__assert_fail@plt+0x49bc>
   15cb4:	cmp	r5, #0
   15cb8:	ldr	r3, [pc, #512]	; 15ec0 <__assert_fail@plt+0x4b34>
   15cbc:	beq	15d50 <__assert_fail@plt+0x49c4>
   15cc0:	cmp	r5, r3
   15cc4:	str	r5, [r8, #20]
   15cc8:	beq	15d54 <__assert_fail@plt+0x49c8>
   15ccc:	vldr	s15, [r5, #8]
   15cd0:	vldr	s14, [pc, #456]	; 15ea0 <__assert_fail@plt+0x4b14>
   15cd4:	vcmpe.f32	s15, s14
   15cd8:	vmrs	APSR_nzcv, fpscr
   15cdc:	ble	15d38 <__assert_fail@plt+0x49ac>
   15ce0:	vldr	s13, [pc, #444]	; 15ea4 <__assert_fail@plt+0x4b18>
   15ce4:	vcmpe.f32	s15, s13
   15ce8:	vmrs	APSR_nzcv, fpscr
   15cec:	bpl	15d38 <__assert_fail@plt+0x49ac>
   15cf0:	vldr	s13, [pc, #432]	; 15ea8 <__assert_fail@plt+0x4b1c>
   15cf4:	vldr	s12, [r5, #12]
   15cf8:	vcmpe.f32	s12, s13
   15cfc:	vmrs	APSR_nzcv, fpscr
   15d00:	ble	15d38 <__assert_fail@plt+0x49ac>
   15d04:	vldr	s13, [r5]
   15d08:	vcmpe.f32	s13, #0.0
   15d0c:	vmrs	APSR_nzcv, fpscr
   15d10:	blt	15d38 <__assert_fail@plt+0x49ac>
   15d14:	vadd.f32	s14, s13, s14
   15d18:	vldr	s13, [r5, #4]
   15d1c:	vcmpe.f32	s14, s13
   15d20:	vmrs	APSR_nzcv, fpscr
   15d24:	bpl	15d38 <__assert_fail@plt+0x49ac>
   15d28:	vldr	s12, [pc, #380]	; 15eac <__assert_fail@plt+0x4b20>
   15d2c:	vcmpe.f32	s13, s12
   15d30:	vmrs	APSR_nzcv, fpscr
   15d34:	bls	15e84 <__assert_fail@plt+0x4af8>
   15d38:	str	r3, [r8, #20]
   15d3c:	mov	r0, r8
   15d40:	bl	12dbc <__assert_fail@plt+0x1a30>
   15d44:	mov	r8, #0
   15d48:	mov	r0, r8
   15d4c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d50:	str	r3, [r8, #20]
   15d54:	vldr	s15, [pc, #340]	; 15eb0 <__assert_fail@plt+0x4b24>
   15d58:	vmov	s14, r4
   15d5c:	vldr	s13, [pc, #336]	; 15eb4 <__assert_fail@plt+0x4b28>
   15d60:	vcvt.f32.u32	s12, s14
   15d64:	vdiv.f32	s14, s12, s15
   15d68:	vcmpe.f32	s14, s13
   15d6c:	vmrs	APSR_nzcv, fpscr
   15d70:	bge	15e70 <__assert_fail@plt+0x4ae4>
   15d74:	vcvt.u32.f32	s15, s14
   15d78:	vmov	r4, s15
   15d7c:	cmp	r4, #10
   15d80:	movcc	r4, #10
   15d84:	orr	r7, r4, #1
   15d88:	cmn	r7, #1
   15d8c:	ldrne	r9, [pc, #304]	; 15ec4 <__assert_fail@plt+0x4b38>
   15d90:	beq	15e08 <__assert_fail@plt+0x4a7c>
   15d94:	cmp	r7, #9
   15d98:	bls	15e7c <__assert_fail@plt+0x4af0>
   15d9c:	umull	r2, r3, r9, r7
   15da0:	lsr	r3, r3, #1
   15da4:	add	r3, r3, r3, lsl #1
   15da8:	cmp	r7, r3
   15dac:	beq	15dfc <__assert_fail@plt+0x4a70>
   15db0:	mov	r6, #16
   15db4:	mov	r5, #9
   15db8:	mov	r4, #3
   15dbc:	b	15dd0 <__assert_fail@plt+0x4a44>
   15dc0:	bl	1d77c <__assert_fail@plt+0xc3f0>
   15dc4:	add	r6, r6, #8
   15dc8:	cmp	r1, #0
   15dcc:	beq	15dfc <__assert_fail@plt+0x4a70>
   15dd0:	add	r5, r5, r6
   15dd4:	add	r4, r4, #2
   15dd8:	cmp	r5, r7
   15ddc:	mov	r0, r7
   15de0:	mov	r1, r4
   15de4:	bcc	15dc0 <__assert_fail@plt+0x4a34>
   15de8:	mov	r1, r4
   15dec:	mov	r0, r7
   15df0:	bl	1d77c <__assert_fail@plt+0xc3f0>
   15df4:	cmp	r1, #0
   15df8:	bne	15e08 <__assert_fail@plt+0x4a7c>
   15dfc:	add	r7, r7, #2
   15e00:	cmn	r7, #1
   15e04:	bne	15d94 <__assert_fail@plt+0x4a08>
   15e08:	lsrs	r3, r7, #30
   15e0c:	movne	r4, #1
   15e10:	moveq	r4, #0
   15e14:	tst	r7, #536870912	; 0x20000000
   15e18:	bne	15e70 <__assert_fail@plt+0x4ae4>
   15e1c:	cmp	r4, #0
   15e20:	bne	15e70 <__assert_fail@plt+0x4ae4>
   15e24:	str	r7, [r8, #8]
   15e28:	mov	r0, r7
   15e2c:	mov	r1, #8
   15e30:	bl	1cdd4 <__assert_fail@plt+0xba48>
   15e34:	cmp	r0, #0
   15e38:	str	r0, [r8]
   15e3c:	beq	15d3c <__assert_fail@plt+0x49b0>
   15e40:	ldr	r3, [r8, #8]
   15e44:	str	r4, [r8, #12]
   15e48:	str	r4, [r8, #16]
   15e4c:	add	r0, r0, r3, lsl #3
   15e50:	ldr	r3, [sp, #40]	; 0x28
   15e54:	str	r0, [r8, #4]
   15e58:	str	sl, [r8, #24]
   15e5c:	str	fp, [r8, #28]
   15e60:	str	r3, [r8, #32]
   15e64:	str	r4, [r8, #36]	; 0x24
   15e68:	mov	r0, r8
   15e6c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e70:	mov	r3, #0
   15e74:	str	r3, [r8, #8]
   15e78:	b	15d3c <__assert_fail@plt+0x49b0>
   15e7c:	mov	r4, #3
   15e80:	b	15de8 <__assert_fail@plt+0x4a5c>
   15e84:	vcmpe.f32	s15, s14
   15e88:	vmrs	APSR_nzcv, fpscr
   15e8c:	ble	15d38 <__assert_fail@plt+0x49ac>
   15e90:	ldrb	r3, [r5, #16]
   15e94:	cmp	r3, #0
   15e98:	bne	15d7c <__assert_fail@plt+0x49f0>
   15e9c:	b	15d58 <__assert_fail@plt+0x49cc>
   15ea0:	stclcc	12, cr12, [ip, #820]	; 0x334
   15ea4:	svccc	0x00666666
   15ea8:	svccc	0x008ccccd
   15eac:	svccc	0x00800000
   15eb0:	svccc	0x004ccccd
   15eb4:	svcmi	0x00800000
   15eb8:	andeq	r5, r1, r0, lsl #10
   15ebc:	andeq	r5, r1, r4, lsl r5
   15ec0:	andeq	lr, r1, ip, ror #26
   15ec4:	bge	feac0978 <optarg@@GLIBC_2.4+0xfea907d8>
   15ec8:	push	{r4, r5, r6, r7, r8, lr}
   15ecc:	mov	r5, r0
   15ed0:	ldr	r7, [r0]
   15ed4:	ldr	r3, [r0, #4]
   15ed8:	cmp	r7, r3
   15edc:	addcc	r7, r7, #8
   15ee0:	movcc	r6, #0
   15ee4:	bcs	15f60 <__assert_fail@plt+0x4bd4>
   15ee8:	ldr	r2, [r7, #-8]
   15eec:	mov	r8, r7
   15ef0:	cmp	r2, #0
   15ef4:	beq	15f54 <__assert_fail@plt+0x4bc8>
   15ef8:	ldr	r4, [r7, #-4]
   15efc:	ldr	r2, [r5, #32]
   15f00:	cmp	r4, #0
   15f04:	beq	15f38 <__assert_fail@plt+0x4bac>
   15f08:	cmp	r2, #0
   15f0c:	beq	15f1c <__assert_fail@plt+0x4b90>
   15f10:	ldr	r0, [r4]
   15f14:	blx	r2
   15f18:	ldr	r2, [r5, #32]
   15f1c:	ldr	r3, [r4, #4]
   15f20:	ldr	r1, [r5, #36]	; 0x24
   15f24:	str	r6, [r4]
   15f28:	str	r1, [r4, #4]
   15f2c:	str	r4, [r5, #36]	; 0x24
   15f30:	subs	r4, r3, #0
   15f34:	bne	15f08 <__assert_fail@plt+0x4b7c>
   15f38:	cmp	r2, #0
   15f3c:	beq	15f48 <__assert_fail@plt+0x4bbc>
   15f40:	ldr	r0, [r7, #-8]
   15f44:	blx	r2
   15f48:	str	r6, [r7, #-8]
   15f4c:	str	r6, [r7, #-4]
   15f50:	ldr	r3, [r5, #4]
   15f54:	cmp	r3, r8
   15f58:	add	r7, r7, #8
   15f5c:	bhi	15ee8 <__assert_fail@plt+0x4b5c>
   15f60:	mov	r3, #0
   15f64:	str	r3, [r5, #12]
   15f68:	str	r3, [r5, #16]
   15f6c:	pop	{r4, r5, r6, r7, r8, pc}
   15f70:	ldr	r3, [r0, #32]
   15f74:	push	{r4, r5, r6, lr}
   15f78:	cmp	r3, #0
   15f7c:	mov	r5, r0
   15f80:	beq	15fe0 <__assert_fail@plt+0x4c54>
   15f84:	ldr	r3, [r0, #16]
   15f88:	cmp	r3, #0
   15f8c:	beq	15fe0 <__assert_fail@plt+0x4c54>
   15f90:	ldr	r6, [r0]
   15f94:	ldr	r3, [r0, #4]
   15f98:	cmp	r6, r3
   15f9c:	bcs	1601c <__assert_fail@plt+0x4c90>
   15fa0:	ldr	r0, [r6]
   15fa4:	cmp	r0, #0
   15fa8:	beq	15fd0 <__assert_fail@plt+0x4c44>
   15fac:	mov	r4, r6
   15fb0:	b	15fb8 <__assert_fail@plt+0x4c2c>
   15fb4:	ldr	r0, [r4]
   15fb8:	ldr	r3, [r5, #32]
   15fbc:	blx	r3
   15fc0:	ldr	r4, [r4, #4]
   15fc4:	cmp	r4, #0
   15fc8:	bne	15fb4 <__assert_fail@plt+0x4c28>
   15fcc:	ldr	r3, [r5, #4]
   15fd0:	add	r6, r6, #8
   15fd4:	cmp	r3, r6
   15fd8:	bhi	15fa0 <__assert_fail@plt+0x4c14>
   15fdc:	b	15fe4 <__assert_fail@plt+0x4c58>
   15fe0:	ldr	r3, [r5, #4]
   15fe4:	ldr	r6, [r5]
   15fe8:	cmp	r6, r3
   15fec:	bcs	1601c <__assert_fail@plt+0x4c90>
   15ff0:	ldr	r0, [r6, #4]
   15ff4:	cmp	r0, #0
   15ff8:	beq	16010 <__assert_fail@plt+0x4c84>
   15ffc:	ldr	r4, [r0, #4]
   16000:	bl	12dbc <__assert_fail@plt+0x1a30>
   16004:	subs	r0, r4, #0
   16008:	bne	15ffc <__assert_fail@plt+0x4c70>
   1600c:	ldr	r3, [r5, #4]
   16010:	add	r6, r6, #8
   16014:	cmp	r3, r6
   16018:	bhi	15ff0 <__assert_fail@plt+0x4c64>
   1601c:	ldr	r0, [r5, #36]	; 0x24
   16020:	cmp	r0, #0
   16024:	beq	16038 <__assert_fail@plt+0x4cac>
   16028:	ldr	r4, [r0, #4]
   1602c:	bl	12dbc <__assert_fail@plt+0x1a30>
   16030:	subs	r0, r4, #0
   16034:	bne	16028 <__assert_fail@plt+0x4c9c>
   16038:	ldr	r0, [r5]
   1603c:	bl	12dbc <__assert_fail@plt+0x1a30>
   16040:	mov	r0, r5
   16044:	pop	{r4, r5, r6, lr}
   16048:	b	12dbc <__assert_fail@plt+0x1a30>
   1604c:	ldr	r3, [r0, #20]
   16050:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16054:	mov	r8, r0
   16058:	ldrb	r2, [r3, #16]
   1605c:	sub	sp, sp, #40	; 0x28
   16060:	cmp	r2, #0
   16064:	bne	16090 <__assert_fail@plt+0x4d04>
   16068:	vmov	s15, r1
   1606c:	vldr	s13, [r3, #8]
   16070:	vldr	s14, [pc, #648]	; 16300 <__assert_fail@plt+0x4f74>
   16074:	vcvt.f32.u32	s12, s15
   16078:	vdiv.f32	s15, s12, s13
   1607c:	vcmpe.f32	s15, s14
   16080:	vmrs	APSR_nzcv, fpscr
   16084:	bge	162b8 <__assert_fail@plt+0x4f2c>
   16088:	vcvt.u32.f32	s15, s15
   1608c:	vmov	r1, s15
   16090:	cmp	r1, #10
   16094:	movcc	r1, #10
   16098:	orr	r7, r1, #1
   1609c:	cmn	r7, #1
   160a0:	ldrne	r9, [pc, #604]	; 16304 <__assert_fail@plt+0x4f78>
   160a4:	beq	1611c <__assert_fail@plt+0x4d90>
   160a8:	cmp	r7, #9
   160ac:	bls	162c8 <__assert_fail@plt+0x4f3c>
   160b0:	umull	r2, r3, r9, r7
   160b4:	lsr	r3, r3, #1
   160b8:	add	r3, r3, r3, lsl #1
   160bc:	cmp	r7, r3
   160c0:	beq	16110 <__assert_fail@plt+0x4d84>
   160c4:	mov	r6, #16
   160c8:	mov	r5, #9
   160cc:	mov	r4, #3
   160d0:	b	160ec <__assert_fail@plt+0x4d60>
   160d4:	mov	r1, r4
   160d8:	mov	r0, r7
   160dc:	bl	1d77c <__assert_fail@plt+0xc3f0>
   160e0:	add	r6, r6, #8
   160e4:	cmp	r1, #0
   160e8:	beq	16110 <__assert_fail@plt+0x4d84>
   160ec:	add	r5, r5, r6
   160f0:	cmp	r5, r7
   160f4:	add	r4, r4, #2
   160f8:	bcc	160d4 <__assert_fail@plt+0x4d48>
   160fc:	mov	r1, r4
   16100:	mov	r0, r7
   16104:	bl	1d77c <__assert_fail@plt+0xc3f0>
   16108:	cmp	r1, #0
   1610c:	bne	1611c <__assert_fail@plt+0x4d90>
   16110:	add	r7, r7, #2
   16114:	cmn	r7, #1
   16118:	bne	160a8 <__assert_fail@plt+0x4d1c>
   1611c:	lsrs	r3, r7, #30
   16120:	movne	r4, #1
   16124:	moveq	r4, #0
   16128:	tst	r7, #536870912	; 0x20000000
   1612c:	bne	162b8 <__assert_fail@plt+0x4f2c>
   16130:	cmp	r4, #0
   16134:	bne	162b8 <__assert_fail@plt+0x4f2c>
   16138:	ldr	r3, [r8, #8]
   1613c:	cmp	r3, r7
   16140:	beq	162a8 <__assert_fail@plt+0x4f1c>
   16144:	mov	r1, #8
   16148:	mov	r0, r7
   1614c:	bl	1cdd4 <__assert_fail@plt+0xba48>
   16150:	cmp	r0, #0
   16154:	str	r0, [sp]
   16158:	beq	162b8 <__assert_fail@plt+0x4f2c>
   1615c:	ldr	r1, [r8, #24]
   16160:	ldr	r5, [r8, #20]
   16164:	ldr	lr, [r8, #28]
   16168:	ldr	ip, [r8, #32]
   1616c:	add	r0, r0, r7, lsl #3
   16170:	ldr	r3, [r8, #36]	; 0x24
   16174:	str	r0, [sp, #4]
   16178:	str	r1, [sp, #24]
   1617c:	mov	r2, r4
   16180:	mov	r0, sp
   16184:	mov	r1, r8
   16188:	str	r7, [sp, #8]
   1618c:	str	r4, [sp, #12]
   16190:	str	r4, [sp, #16]
   16194:	str	r5, [sp, #20]
   16198:	str	lr, [sp, #28]
   1619c:	str	ip, [sp, #32]
   161a0:	str	r3, [sp, #36]	; 0x24
   161a4:	bl	15644 <__assert_fail@plt+0x42b8>
   161a8:	subs	r9, r0, #0
   161ac:	bne	162d0 <__assert_fail@plt+0x4f44>
   161b0:	ldr	r5, [sp]
   161b4:	ldr	r2, [sp, #4]
   161b8:	ldr	r3, [sp, #36]	; 0x24
   161bc:	cmp	r5, r2
   161c0:	str	r3, [r8, #36]	; 0x24
   161c4:	addcc	r5, r5, #8
   161c8:	movcc	r7, r9
   161cc:	bcs	1627c <__assert_fail@plt+0x4ef0>
   161d0:	ldr	r3, [r5, #-8]
   161d4:	mov	r6, r5
   161d8:	cmp	r3, #0
   161dc:	beq	16270 <__assert_fail@plt+0x4ee4>
   161e0:	ldr	r4, [r5, #-4]
   161e4:	cmp	r4, #0
   161e8:	beq	1626c <__assert_fail@plt+0x4ee0>
   161ec:	ldr	r1, [r8, #8]
   161f0:	b	1620c <__assert_fail@plt+0x4e80>
   161f4:	ldr	r3, [ip, #4]
   161f8:	cmp	r2, #0
   161fc:	str	r3, [r4, #4]
   16200:	str	r4, [ip, #4]
   16204:	beq	16268 <__assert_fail@plt+0x4edc>
   16208:	mov	r4, r2
   1620c:	ldr	sl, [r4]
   16210:	ldr	r3, [r8, #24]
   16214:	mov	r0, sl
   16218:	blx	r3
   1621c:	ldr	r1, [r8, #8]
   16220:	cmp	r0, r1
   16224:	bcs	162fc <__assert_fail@plt+0x4f70>
   16228:	ldr	r3, [r8]
   1622c:	ldr	r2, [r4, #4]
   16230:	add	ip, r3, r0, lsl #3
   16234:	ldr	lr, [r3, r0, lsl #3]
   16238:	cmp	lr, #0
   1623c:	bne	161f4 <__assert_fail@plt+0x4e68>
   16240:	ldr	ip, [r8, #12]
   16244:	str	sl, [r3, r0, lsl #3]
   16248:	add	r3, ip, #1
   1624c:	str	r3, [r8, #12]
   16250:	str	lr, [r4]
   16254:	ldr	r3, [r8, #36]	; 0x24
   16258:	cmp	r2, #0
   1625c:	str	r3, [r4, #4]
   16260:	str	r4, [r8, #36]	; 0x24
   16264:	bne	16208 <__assert_fail@plt+0x4e7c>
   16268:	ldr	r2, [sp, #4]
   1626c:	str	r7, [r5, #-4]
   16270:	cmp	r6, r2
   16274:	add	r5, r5, #8
   16278:	bcc	161d0 <__assert_fail@plt+0x4e44>
   1627c:	mov	r1, sp
   16280:	mov	r0, r8
   16284:	mov	r2, #0
   16288:	bl	15644 <__assert_fail@plt+0x42b8>
   1628c:	cmp	r0, #0
   16290:	beq	162fc <__assert_fail@plt+0x4f70>
   16294:	ldr	r0, [sp]
   16298:	bl	12dbc <__assert_fail@plt+0x1a30>
   1629c:	mov	r0, r9
   162a0:	add	sp, sp, #40	; 0x28
   162a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162a8:	mov	r9, #1
   162ac:	mov	r0, r9
   162b0:	add	sp, sp, #40	; 0x28
   162b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162b8:	mov	r9, #0
   162bc:	mov	r0, r9
   162c0:	add	sp, sp, #40	; 0x28
   162c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162c8:	mov	r4, #3
   162cc:	b	160fc <__assert_fail@plt+0x4d70>
   162d0:	ldr	r0, [r8]
   162d4:	bl	12dbc <__assert_fail@plt+0x1a30>
   162d8:	ldmib	sp, {r0, r1, r2}
   162dc:	ldr	ip, [sp]
   162e0:	ldr	r3, [sp, #36]	; 0x24
   162e4:	stmib	r8, {r0, r1, r2}
   162e8:	mov	r0, r9
   162ec:	str	ip, [r8]
   162f0:	str	r3, [r8, #36]	; 0x24
   162f4:	add	sp, sp, #40	; 0x28
   162f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162fc:	bl	11344 <abort@plt>
   16300:	svcmi	0x00800000
   16304:	bge	feac0db8 <optarg@@GLIBC_2.4+0xfea90c18>
   16308:	push	{r4, r5, r6, r7, r8, r9, lr}
   1630c:	subs	r5, r1, #0
   16310:	sub	sp, sp, #12
   16314:	beq	16530 <__assert_fail@plt+0x51a4>
   16318:	ldr	r3, [r0, #24]
   1631c:	mov	r6, r0
   16320:	ldr	r1, [r0, #8]
   16324:	mov	r0, r5
   16328:	mov	r7, r2
   1632c:	blx	r3
   16330:	ldr	r3, [r6, #8]
   16334:	cmp	r0, r3
   16338:	mov	r8, r0
   1633c:	bcs	16530 <__assert_fail@plt+0x51a4>
   16340:	ldr	r9, [r6]
   16344:	add	r4, r9, r0, lsl #3
   16348:	ldr	r1, [r9, r0, lsl #3]
   1634c:	str	r4, [sp, #4]
   16350:	cmp	r1, #0
   16354:	beq	16534 <__assert_fail@plt+0x51a8>
   16358:	cmp	r5, r1
   1635c:	beq	163b4 <__assert_fail@plt+0x5028>
   16360:	ldr	r3, [r6, #28]
   16364:	mov	r0, r5
   16368:	blx	r3
   1636c:	cmp	r0, #0
   16370:	bne	163c8 <__assert_fail@plt+0x503c>
   16374:	ldr	r3, [r4, #4]
   16378:	cmp	r3, #0
   1637c:	bne	163a8 <__assert_fail@plt+0x501c>
   16380:	b	163d4 <__assert_fail@plt+0x5048>
   16384:	ldr	r3, [r6, #28]
   16388:	mov	r0, r5
   1638c:	blx	r3
   16390:	cmp	r0, #0
   16394:	bne	16448 <__assert_fail@plt+0x50bc>
   16398:	ldr	r4, [r4, #4]
   1639c:	ldr	r3, [r4, #4]
   163a0:	cmp	r3, #0
   163a4:	beq	163d4 <__assert_fail@plt+0x5048>
   163a8:	ldr	r1, [r3]
   163ac:	cmp	r5, r1
   163b0:	bne	16384 <__assert_fail@plt+0x4ff8>
   163b4:	mov	r0, #0
   163b8:	cmp	r7, #0
   163bc:	strne	r1, [r7]
   163c0:	add	sp, sp, #12
   163c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   163c8:	ldr	r1, [r9, r8, lsl #3]
   163cc:	cmp	r1, #0
   163d0:	bne	163b4 <__assert_fail@plt+0x5028>
   163d4:	vldr	s15, [r6, #8]
   163d8:	ldr	r3, [r6, #20]
   163dc:	vldr	s14, [r6, #12]
   163e0:	vcvt.f32.u32	s15, s15
   163e4:	vldr	s13, [r3, #8]
   163e8:	vcvt.f32.u32	s14, s14
   163ec:	vmul.f32	s12, s13, s15
   163f0:	vcmpe.f32	s14, s12
   163f4:	vmrs	APSR_nzcv, fpscr
   163f8:	bgt	16454 <__assert_fail@plt+0x50c8>
   163fc:	ldr	r4, [sp, #4]
   16400:	ldr	r3, [r4]
   16404:	cmp	r3, #0
   16408:	beq	16598 <__assert_fail@plt+0x520c>
   1640c:	ldr	r3, [r6, #36]	; 0x24
   16410:	cmp	r3, #0
   16414:	beq	16580 <__assert_fail@plt+0x51f4>
   16418:	ldr	r2, [r3, #4]
   1641c:	str	r2, [r6, #36]	; 0x24
   16420:	ldr	r2, [r6, #16]
   16424:	ldr	r1, [r4, #4]
   16428:	add	r2, r2, #1
   1642c:	str	r5, [r3]
   16430:	str	r1, [r3, #4]
   16434:	mov	r0, #1
   16438:	str	r3, [r4, #4]
   1643c:	str	r2, [r6, #16]
   16440:	add	sp, sp, #12
   16444:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16448:	ldr	r3, [r4, #4]
   1644c:	ldr	r1, [r3]
   16450:	b	163cc <__assert_fail@plt+0x5040>
   16454:	ldr	r2, [pc, #392]	; 165e4 <__assert_fail@plt+0x5258>
   16458:	cmp	r3, r2
   1645c:	beq	164e0 <__assert_fail@plt+0x5154>
   16460:	vldr	s12, [pc, #352]	; 165c8 <__assert_fail@plt+0x523c>
   16464:	vcmpe.f32	s13, s12
   16468:	vmrs	APSR_nzcv, fpscr
   1646c:	ble	164c8 <__assert_fail@plt+0x513c>
   16470:	vldr	s11, [pc, #340]	; 165cc <__assert_fail@plt+0x5240>
   16474:	vcmpe.f32	s13, s11
   16478:	vmrs	APSR_nzcv, fpscr
   1647c:	bpl	164c8 <__assert_fail@plt+0x513c>
   16480:	vldr	s11, [r3, #12]
   16484:	vldr	s10, [pc, #324]	; 165d0 <__assert_fail@plt+0x5244>
   16488:	vcmpe.f32	s11, s10
   1648c:	vmrs	APSR_nzcv, fpscr
   16490:	ble	164c8 <__assert_fail@plt+0x513c>
   16494:	vldr	s10, [r3]
   16498:	vcmpe.f32	s10, #0.0
   1649c:	vmrs	APSR_nzcv, fpscr
   164a0:	blt	164c8 <__assert_fail@plt+0x513c>
   164a4:	vadd.f32	s12, s10, s12
   164a8:	vldr	s10, [r3, #4]
   164ac:	vcmpe.f32	s12, s10
   164b0:	vmrs	APSR_nzcv, fpscr
   164b4:	bpl	164c8 <__assert_fail@plt+0x513c>
   164b8:	vldr	s9, [pc, #276]	; 165d4 <__assert_fail@plt+0x5248>
   164bc:	vcmpe.f32	s10, s9
   164c0:	vmrs	APSR_nzcv, fpscr
   164c4:	bls	165a8 <__assert_fail@plt+0x521c>
   164c8:	vldr	s13, [pc, #264]	; 165d8 <__assert_fail@plt+0x524c>
   164cc:	str	r2, [r6, #20]
   164d0:	vmul.f32	s12, s15, s13
   164d4:	vcmpe.f32	s12, s14
   164d8:	vmrs	APSR_nzcv, fpscr
   164dc:	bpl	163fc <__assert_fail@plt+0x5070>
   164e0:	vldr	s11, [pc, #244]	; 165dc <__assert_fail@plt+0x5250>
   164e4:	vmul.f32	s15, s15, s11
   164e8:	vmul.f32	s15, s15, s13
   164ec:	vldr	s14, [pc, #236]	; 165e0 <__assert_fail@plt+0x5254>
   164f0:	vcmpe.f32	s15, s14
   164f4:	vmrs	APSR_nzcv, fpscr
   164f8:	bge	165a0 <__assert_fail@plt+0x5214>
   164fc:	vcvt.u32.f32	s15, s15
   16500:	mov	r0, r6
   16504:	vmov	r1, s15
   16508:	bl	1604c <__assert_fail@plt+0x4cc0>
   1650c:	cmp	r0, #0
   16510:	beq	165a0 <__assert_fail@plt+0x5214>
   16514:	mov	r3, #0
   16518:	add	r2, sp, #4
   1651c:	mov	r1, r5
   16520:	mov	r0, r6
   16524:	bl	15524 <__assert_fail@plt+0x4198>
   16528:	cmp	r0, #0
   1652c:	beq	163fc <__assert_fail@plt+0x5070>
   16530:	bl	11344 <abort@plt>
   16534:	vmov	s15, r3
   16538:	ldr	r2, [r6, #12]
   1653c:	ldr	r3, [r6, #20]
   16540:	vcvt.f32.u32	s15, s15
   16544:	vldr	s13, [r3, #8]
   16548:	vmov	s14, r2
   1654c:	vcvt.f32.u32	s14, s14
   16550:	vmul.f32	s12, s13, s15
   16554:	vcmpe.f32	s14, s12
   16558:	vmrs	APSR_nzcv, fpscr
   1655c:	bgt	16454 <__assert_fail@plt+0x50c8>
   16560:	ldr	r3, [r6, #16]
   16564:	add	r2, r2, #1
   16568:	add	r3, r3, #1
   1656c:	str	r5, [r4]
   16570:	mov	r0, #1
   16574:	str	r2, [r6, #12]
   16578:	str	r3, [r6, #16]
   1657c:	b	163c0 <__assert_fail@plt+0x5034>
   16580:	mov	r0, #8
   16584:	bl	1ce1c <__assert_fail@plt+0xba90>
   16588:	subs	r3, r0, #0
   1658c:	beq	165a0 <__assert_fail@plt+0x5214>
   16590:	ldr	r4, [sp, #4]
   16594:	b	16420 <__assert_fail@plt+0x5094>
   16598:	ldr	r2, [r6, #12]
   1659c:	b	16560 <__assert_fail@plt+0x51d4>
   165a0:	mvn	r0, #0
   165a4:	b	163c0 <__assert_fail@plt+0x5034>
   165a8:	vcmpe.f32	s12, s13
   165ac:	vmrs	APSR_nzcv, fpscr
   165b0:	bpl	164c8 <__assert_fail@plt+0x513c>
   165b4:	ldrb	r3, [r3, #16]
   165b8:	cmp	r3, #0
   165bc:	vmulne.f32	s15, s11, s15
   165c0:	bne	164ec <__assert_fail@plt+0x5160>
   165c4:	b	164e4 <__assert_fail@plt+0x5158>
   165c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   165cc:	svccc	0x00666666
   165d0:	svccc	0x008ccccd
   165d4:	svccc	0x00800000
   165d8:	svccc	0x004ccccd
   165dc:	svccc	0x00b4fdf4
   165e0:	svcmi	0x00800000
   165e4:	andeq	lr, r1, ip, ror #26
   165e8:	push	{r4, r5, r6, r7, r8, lr}
   165ec:	subs	r5, r1, #0
   165f0:	sub	sp, sp, #8
   165f4:	beq	167f8 <__assert_fail@plt+0x546c>
   165f8:	ldr	r3, [r0, #24]
   165fc:	mov	r6, r0
   16600:	ldr	r1, [r0, #8]
   16604:	mov	r0, r5
   16608:	blx	r3
   1660c:	ldr	r3, [r6, #8]
   16610:	cmp	r0, r3
   16614:	mov	r7, r0
   16618:	bcs	167f8 <__assert_fail@plt+0x546c>
   1661c:	ldr	r8, [r6]
   16620:	add	r4, r8, r0, lsl #3
   16624:	ldr	r1, [r8, r0, lsl #3]
   16628:	str	r4, [sp, #4]
   1662c:	cmp	r1, #0
   16630:	beq	167fc <__assert_fail@plt+0x5470>
   16634:	cmp	r5, r1
   16638:	beq	1665c <__assert_fail@plt+0x52d0>
   1663c:	ldr	r3, [r6, #28]
   16640:	mov	r0, r5
   16644:	blx	r3
   16648:	cmp	r0, #0
   1664c:	beq	1668c <__assert_fail@plt+0x5300>
   16650:	ldr	r1, [r8, r7, lsl #3]
   16654:	cmp	r1, #0
   16658:	beq	16698 <__assert_fail@plt+0x530c>
   1665c:	mov	r0, r1
   16660:	add	sp, sp, #8
   16664:	pop	{r4, r5, r6, r7, r8, pc}
   16668:	ldr	r1, [r3]
   1666c:	cmp	r5, r1
   16670:	beq	1665c <__assert_fail@plt+0x52d0>
   16674:	ldr	r3, [r6, #28]
   16678:	mov	r0, r5
   1667c:	blx	r3
   16680:	cmp	r0, #0
   16684:	bne	16710 <__assert_fail@plt+0x5384>
   16688:	ldr	r4, [r4, #4]
   1668c:	ldr	r3, [r4, #4]
   16690:	cmp	r3, #0
   16694:	bne	16668 <__assert_fail@plt+0x52dc>
   16698:	vldr	s15, [r6, #8]
   1669c:	ldr	r3, [r6, #20]
   166a0:	vldr	s14, [r6, #12]
   166a4:	vcvt.f32.u32	s15, s15
   166a8:	vldr	s13, [r3, #8]
   166ac:	vcvt.f32.u32	s14, s14
   166b0:	vmul.f32	s12, s13, s15
   166b4:	vcmpe.f32	s14, s12
   166b8:	vmrs	APSR_nzcv, fpscr
   166bc:	bgt	1671c <__assert_fail@plt+0x5390>
   166c0:	ldr	r4, [sp, #4]
   166c4:	ldr	r3, [r4]
   166c8:	cmp	r3, #0
   166cc:	beq	1685c <__assert_fail@plt+0x54d0>
   166d0:	ldr	r0, [r6, #36]	; 0x24
   166d4:	cmp	r0, #0
   166d8:	beq	16844 <__assert_fail@plt+0x54b8>
   166dc:	ldr	r3, [r0, #4]
   166e0:	str	r3, [r6, #36]	; 0x24
   166e4:	ldr	r3, [r6, #16]
   166e8:	ldr	r2, [r4, #4]
   166ec:	add	r3, r3, #1
   166f0:	str	r5, [r0]
   166f4:	str	r2, [r0, #4]
   166f8:	str	r0, [r4, #4]
   166fc:	str	r3, [r6, #16]
   16700:	mov	r1, r5
   16704:	mov	r0, r1
   16708:	add	sp, sp, #8
   1670c:	pop	{r4, r5, r6, r7, r8, pc}
   16710:	ldr	r3, [r4, #4]
   16714:	ldr	r1, [r3]
   16718:	b	16654 <__assert_fail@plt+0x52c8>
   1671c:	ldr	r2, [pc, #388]	; 168a8 <__assert_fail@plt+0x551c>
   16720:	cmp	r3, r2
   16724:	beq	167a8 <__assert_fail@plt+0x541c>
   16728:	vldr	s12, [pc, #348]	; 1688c <__assert_fail@plt+0x5500>
   1672c:	vcmpe.f32	s13, s12
   16730:	vmrs	APSR_nzcv, fpscr
   16734:	ble	16790 <__assert_fail@plt+0x5404>
   16738:	vldr	s11, [pc, #336]	; 16890 <__assert_fail@plt+0x5504>
   1673c:	vcmpe.f32	s13, s11
   16740:	vmrs	APSR_nzcv, fpscr
   16744:	bpl	16790 <__assert_fail@plt+0x5404>
   16748:	vldr	s11, [r3, #12]
   1674c:	vldr	s10, [pc, #320]	; 16894 <__assert_fail@plt+0x5508>
   16750:	vcmpe.f32	s11, s10
   16754:	vmrs	APSR_nzcv, fpscr
   16758:	ble	16790 <__assert_fail@plt+0x5404>
   1675c:	vldr	s10, [r3]
   16760:	vcmpe.f32	s10, #0.0
   16764:	vmrs	APSR_nzcv, fpscr
   16768:	blt	16790 <__assert_fail@plt+0x5404>
   1676c:	vadd.f32	s12, s10, s12
   16770:	vldr	s10, [r3, #4]
   16774:	vcmpe.f32	s12, s10
   16778:	vmrs	APSR_nzcv, fpscr
   1677c:	bpl	16790 <__assert_fail@plt+0x5404>
   16780:	vldr	s9, [pc, #272]	; 16898 <__assert_fail@plt+0x550c>
   16784:	vcmpe.f32	s10, s9
   16788:	vmrs	APSR_nzcv, fpscr
   1678c:	bls	1686c <__assert_fail@plt+0x54e0>
   16790:	vldr	s13, [pc, #260]	; 1689c <__assert_fail@plt+0x5510>
   16794:	str	r2, [r6, #20]
   16798:	vmul.f32	s12, s15, s13
   1679c:	vcmpe.f32	s12, s14
   167a0:	vmrs	APSR_nzcv, fpscr
   167a4:	bpl	166c0 <__assert_fail@plt+0x5334>
   167a8:	vldr	s11, [pc, #240]	; 168a0 <__assert_fail@plt+0x5514>
   167ac:	vmul.f32	s15, s15, s11
   167b0:	vmul.f32	s15, s15, s13
   167b4:	vldr	s14, [pc, #232]	; 168a4 <__assert_fail@plt+0x5518>
   167b8:	vcmpe.f32	s15, s14
   167bc:	vmrs	APSR_nzcv, fpscr
   167c0:	bge	16864 <__assert_fail@plt+0x54d8>
   167c4:	vcvt.u32.f32	s15, s15
   167c8:	mov	r0, r6
   167cc:	vmov	r1, s15
   167d0:	bl	1604c <__assert_fail@plt+0x4cc0>
   167d4:	cmp	r0, #0
   167d8:	beq	16864 <__assert_fail@plt+0x54d8>
   167dc:	mov	r3, #0
   167e0:	add	r2, sp, #4
   167e4:	mov	r1, r5
   167e8:	mov	r0, r6
   167ec:	bl	15524 <__assert_fail@plt+0x4198>
   167f0:	cmp	r0, #0
   167f4:	beq	166c0 <__assert_fail@plt+0x5334>
   167f8:	bl	11344 <abort@plt>
   167fc:	vmov	s15, r3
   16800:	ldr	r2, [r6, #12]
   16804:	ldr	r3, [r6, #20]
   16808:	vcvt.f32.u32	s15, s15
   1680c:	vldr	s13, [r3, #8]
   16810:	vmov	s14, r2
   16814:	vcvt.f32.u32	s14, s14
   16818:	vmul.f32	s12, s15, s13
   1681c:	vcmpe.f32	s12, s14
   16820:	vmrs	APSR_nzcv, fpscr
   16824:	bmi	1671c <__assert_fail@plt+0x5390>
   16828:	ldr	r3, [r6, #16]
   1682c:	add	r2, r2, #1
   16830:	add	r3, r3, #1
   16834:	str	r5, [r4]
   16838:	str	r2, [r6, #12]
   1683c:	str	r3, [r6, #16]
   16840:	b	16700 <__assert_fail@plt+0x5374>
   16844:	mov	r0, #8
   16848:	bl	1ce1c <__assert_fail@plt+0xba90>
   1684c:	cmp	r0, #0
   16850:	beq	16864 <__assert_fail@plt+0x54d8>
   16854:	ldr	r4, [sp, #4]
   16858:	b	166e4 <__assert_fail@plt+0x5358>
   1685c:	ldr	r2, [r6, #12]
   16860:	b	16828 <__assert_fail@plt+0x549c>
   16864:	mov	r1, #0
   16868:	b	1665c <__assert_fail@plt+0x52d0>
   1686c:	vcmpe.f32	s12, s13
   16870:	vmrs	APSR_nzcv, fpscr
   16874:	bpl	16790 <__assert_fail@plt+0x5404>
   16878:	ldrb	r3, [r3, #16]
   1687c:	cmp	r3, #0
   16880:	vmulne.f32	s15, s11, s15
   16884:	bne	167b4 <__assert_fail@plt+0x5428>
   16888:	b	167ac <__assert_fail@plt+0x5420>
   1688c:	stclcc	12, cr12, [ip, #820]	; 0x334
   16890:	svccc	0x00666666
   16894:	svccc	0x008ccccd
   16898:	svccc	0x00800000
   1689c:	svccc	0x004ccccd
   168a0:	svccc	0x00b4fdf4
   168a4:	svcmi	0x00800000
   168a8:	andeq	lr, r1, ip, ror #26
   168ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   168b0:	mov	r7, r1
   168b4:	ldr	r3, [r0, #24]
   168b8:	mov	r6, r0
   168bc:	ldr	r1, [r0, #8]
   168c0:	mov	r0, r7
   168c4:	blx	r3
   168c8:	ldr	r3, [r6, #8]
   168cc:	cmp	r0, r3
   168d0:	bcs	16afc <__assert_fail@plt+0x5770>
   168d4:	ldr	r9, [r6]
   168d8:	mov	r8, r0
   168dc:	add	r5, r9, r0, lsl #3
   168e0:	ldr	r4, [r9, r0, lsl #3]
   168e4:	cmp	r4, #0
   168e8:	beq	16994 <__assert_fail@plt+0x5608>
   168ec:	cmp	r7, r4
   168f0:	beq	16910 <__assert_fail@plt+0x5584>
   168f4:	mov	r1, r4
   168f8:	ldr	r3, [r6, #28]
   168fc:	mov	r0, r7
   16900:	blx	r3
   16904:	cmp	r0, #0
   16908:	beq	16988 <__assert_fail@plt+0x55fc>
   1690c:	ldr	r4, [r9, r8, lsl #3]
   16910:	ldr	r3, [r5, #4]
   16914:	cmp	r3, #0
   16918:	movne	r2, #0
   1691c:	ldmne	r3, {r0, r1}
   16920:	streq	r3, [r9, r8, lsl #3]
   16924:	stmne	r5, {r0, r1}
   16928:	strne	r2, [r3]
   1692c:	ldrne	r2, [r6, #36]	; 0x24
   16930:	strne	r2, [r3, #4]
   16934:	strne	r3, [r6, #36]	; 0x24
   16938:	cmp	r4, #0
   1693c:	beq	16994 <__assert_fail@plt+0x5608>
   16940:	ldr	r2, [r9, r8, lsl #3]
   16944:	ldr	r3, [r6, #16]
   16948:	cmp	r2, #0
   1694c:	sub	r3, r3, #1
   16950:	str	r3, [r6, #16]
   16954:	beq	169c8 <__assert_fail@plt+0x563c>
   16958:	mov	r0, r4
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16960:	ldr	r4, [r3]
   16964:	cmp	r7, r4
   16968:	beq	169a8 <__assert_fail@plt+0x561c>
   1696c:	mov	r1, r4
   16970:	ldr	r3, [r6, #28]
   16974:	mov	r0, r7
   16978:	blx	r3
   1697c:	cmp	r0, #0
   16980:	bne	169a0 <__assert_fail@plt+0x5614>
   16984:	ldr	r5, [r5, #4]
   16988:	ldr	r3, [r5, #4]
   1698c:	cmp	r3, #0
   16990:	bne	16960 <__assert_fail@plt+0x55d4>
   16994:	mov	r4, #0
   16998:	mov	r0, r4
   1699c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   169a0:	ldr	r3, [r5, #4]
   169a4:	ldr	r4, [r3]
   169a8:	ldr	r1, [r3, #4]
   169ac:	mov	r2, #0
   169b0:	str	r1, [r5, #4]
   169b4:	str	r2, [r3]
   169b8:	ldr	r2, [r6, #36]	; 0x24
   169bc:	str	r2, [r3, #4]
   169c0:	str	r3, [r6, #36]	; 0x24
   169c4:	b	16938 <__assert_fail@plt+0x55ac>
   169c8:	vldr	s15, [r6, #8]
   169cc:	ldr	r3, [r6, #12]
   169d0:	ldr	r2, [r6, #20]
   169d4:	sub	r3, r3, #1
   169d8:	vcvt.f32.u32	s14, s15
   169dc:	vldr	s13, [r2]
   169e0:	vmov	s15, r3
   169e4:	str	r3, [r6, #12]
   169e8:	vcvt.f32.u32	s15, s15
   169ec:	vmul.f32	s12, s13, s14
   169f0:	vcmpe.f32	s15, s12
   169f4:	vmrs	APSR_nzcv, fpscr
   169f8:	bpl	16958 <__assert_fail@plt+0x55cc>
   169fc:	ldr	r3, [pc, #276]	; 16b18 <__assert_fail@plt+0x578c>
   16a00:	cmp	r2, r3
   16a04:	beq	16ae4 <__assert_fail@plt+0x5758>
   16a08:	vldr	s12, [r2, #8]
   16a0c:	vldr	s11, [pc, #236]	; 16b00 <__assert_fail@plt+0x5774>
   16a10:	vcmpe.f32	s12, s11
   16a14:	vmrs	APSR_nzcv, fpscr
   16a18:	ble	16acc <__assert_fail@plt+0x5740>
   16a1c:	vldr	s10, [pc, #224]	; 16b04 <__assert_fail@plt+0x5778>
   16a20:	vcmpe.f32	s12, s10
   16a24:	vmrs	APSR_nzcv, fpscr
   16a28:	bpl	16acc <__assert_fail@plt+0x5740>
   16a2c:	vldr	s10, [pc, #212]	; 16b08 <__assert_fail@plt+0x577c>
   16a30:	vldr	s9, [r2, #12]
   16a34:	vcmpe.f32	s9, s10
   16a38:	vmrs	APSR_nzcv, fpscr
   16a3c:	ble	16acc <__assert_fail@plt+0x5740>
   16a40:	vcmpe.f32	s13, #0.0
   16a44:	vmrs	APSR_nzcv, fpscr
   16a48:	blt	16acc <__assert_fail@plt+0x5740>
   16a4c:	vadd.f32	s13, s13, s11
   16a50:	vldr	s11, [r2, #4]
   16a54:	vcmpe.f32	s13, s11
   16a58:	vmrs	APSR_nzcv, fpscr
   16a5c:	bpl	16acc <__assert_fail@plt+0x5740>
   16a60:	vldr	s10, [pc, #164]	; 16b0c <__assert_fail@plt+0x5780>
   16a64:	vcmpe.f32	s11, s10
   16a68:	vmrs	APSR_nzcv, fpscr
   16a6c:	bhi	16acc <__assert_fail@plt+0x5740>
   16a70:	vcmpe.f32	s12, s13
   16a74:	vmrs	APSR_nzcv, fpscr
   16a78:	ble	16acc <__assert_fail@plt+0x5740>
   16a7c:	ldrb	r3, [r2, #16]
   16a80:	cmp	r3, #0
   16a84:	beq	16aec <__assert_fail@plt+0x5760>
   16a88:	vmul.f32	s15, s14, s11
   16a8c:	vcvt.u32.f32	s15, s15
   16a90:	vmov	r1, s15
   16a94:	mov	r0, r6
   16a98:	bl	1604c <__assert_fail@plt+0x4cc0>
   16a9c:	cmp	r0, #0
   16aa0:	bne	16958 <__assert_fail@plt+0x55cc>
   16aa4:	ldr	r0, [r6, #36]	; 0x24
   16aa8:	cmp	r0, #0
   16aac:	beq	16ac0 <__assert_fail@plt+0x5734>
   16ab0:	ldr	r5, [r0, #4]
   16ab4:	bl	12dbc <__assert_fail@plt+0x1a30>
   16ab8:	subs	r0, r5, #0
   16abc:	bne	16ab0 <__assert_fail@plt+0x5724>
   16ac0:	mov	r3, #0
   16ac4:	str	r3, [r6, #36]	; 0x24
   16ac8:	b	16958 <__assert_fail@plt+0x55cc>
   16acc:	vldr	s13, [pc, #60]	; 16b10 <__assert_fail@plt+0x5784>
   16ad0:	str	r3, [r6, #20]
   16ad4:	vmul.f32	s13, s14, s13
   16ad8:	vcmpe.f32	s15, s13
   16adc:	vmrs	APSR_nzcv, fpscr
   16ae0:	bpl	16958 <__assert_fail@plt+0x55cc>
   16ae4:	vldr	s12, [pc, #40]	; 16b14 <__assert_fail@plt+0x5788>
   16ae8:	vldr	s11, [pc, #28]	; 16b0c <__assert_fail@plt+0x5780>
   16aec:	vmul.f32	s15, s14, s11
   16af0:	vmul.f32	s15, s15, s12
   16af4:	vcvt.u32.f32	s15, s15
   16af8:	b	16a90 <__assert_fail@plt+0x5704>
   16afc:	bl	11344 <abort@plt>
   16b00:	stclcc	12, cr12, [ip, #820]	; 0x334
   16b04:	svccc	0x00666666
   16b08:	svccc	0x008ccccd
   16b0c:	svccc	0x00800000
   16b10:	andeq	r0, r0, r0
   16b14:	svccc	0x004ccccd
   16b18:	andeq	lr, r1, ip, ror #26
   16b1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b20:	mov	r7, r1
   16b24:	ldr	r3, [r0, #24]
   16b28:	mov	r6, r0
   16b2c:	ldr	r1, [r0, #8]
   16b30:	mov	r0, r7
   16b34:	blx	r3
   16b38:	ldr	r3, [r6, #8]
   16b3c:	cmp	r0, r3
   16b40:	bcs	16d6c <__assert_fail@plt+0x59e0>
   16b44:	ldr	r9, [r6]
   16b48:	mov	r8, r0
   16b4c:	add	r5, r9, r0, lsl #3
   16b50:	ldr	r4, [r9, r0, lsl #3]
   16b54:	cmp	r4, #0
   16b58:	beq	16c04 <__assert_fail@plt+0x5878>
   16b5c:	cmp	r7, r4
   16b60:	beq	16b80 <__assert_fail@plt+0x57f4>
   16b64:	mov	r1, r4
   16b68:	ldr	r3, [r6, #28]
   16b6c:	mov	r0, r7
   16b70:	blx	r3
   16b74:	cmp	r0, #0
   16b78:	beq	16bf8 <__assert_fail@plt+0x586c>
   16b7c:	ldr	r4, [r9, r8, lsl #3]
   16b80:	ldr	r3, [r5, #4]
   16b84:	cmp	r3, #0
   16b88:	movne	r2, #0
   16b8c:	ldmne	r3, {r0, r1}
   16b90:	streq	r3, [r9, r8, lsl #3]
   16b94:	stmne	r5, {r0, r1}
   16b98:	strne	r2, [r3]
   16b9c:	ldrne	r2, [r6, #36]	; 0x24
   16ba0:	strne	r2, [r3, #4]
   16ba4:	strne	r3, [r6, #36]	; 0x24
   16ba8:	cmp	r4, #0
   16bac:	beq	16c04 <__assert_fail@plt+0x5878>
   16bb0:	ldr	r2, [r9, r8, lsl #3]
   16bb4:	ldr	r3, [r6, #16]
   16bb8:	cmp	r2, #0
   16bbc:	sub	r3, r3, #1
   16bc0:	str	r3, [r6, #16]
   16bc4:	beq	16c38 <__assert_fail@plt+0x58ac>
   16bc8:	mov	r0, r4
   16bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16bd0:	ldr	r4, [r3]
   16bd4:	cmp	r7, r4
   16bd8:	beq	16c18 <__assert_fail@plt+0x588c>
   16bdc:	mov	r1, r4
   16be0:	ldr	r3, [r6, #28]
   16be4:	mov	r0, r7
   16be8:	blx	r3
   16bec:	cmp	r0, #0
   16bf0:	bne	16c10 <__assert_fail@plt+0x5884>
   16bf4:	ldr	r5, [r5, #4]
   16bf8:	ldr	r3, [r5, #4]
   16bfc:	cmp	r3, #0
   16c00:	bne	16bd0 <__assert_fail@plt+0x5844>
   16c04:	mov	r4, #0
   16c08:	mov	r0, r4
   16c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c10:	ldr	r3, [r5, #4]
   16c14:	ldr	r4, [r3]
   16c18:	ldr	r1, [r3, #4]
   16c1c:	mov	r2, #0
   16c20:	str	r1, [r5, #4]
   16c24:	str	r2, [r3]
   16c28:	ldr	r2, [r6, #36]	; 0x24
   16c2c:	str	r2, [r3, #4]
   16c30:	str	r3, [r6, #36]	; 0x24
   16c34:	b	16ba8 <__assert_fail@plt+0x581c>
   16c38:	vldr	s15, [r6, #8]
   16c3c:	ldr	r3, [r6, #12]
   16c40:	ldr	r2, [r6, #20]
   16c44:	sub	r3, r3, #1
   16c48:	vcvt.f32.u32	s14, s15
   16c4c:	vldr	s13, [r2]
   16c50:	vmov	s15, r3
   16c54:	str	r3, [r6, #12]
   16c58:	vcvt.f32.u32	s15, s15
   16c5c:	vmul.f32	s12, s13, s14
   16c60:	vcmpe.f32	s15, s12
   16c64:	vmrs	APSR_nzcv, fpscr
   16c68:	bpl	16bc8 <__assert_fail@plt+0x583c>
   16c6c:	ldr	r3, [pc, #276]	; 16d88 <__assert_fail@plt+0x59fc>
   16c70:	cmp	r2, r3
   16c74:	beq	16d54 <__assert_fail@plt+0x59c8>
   16c78:	vldr	s12, [r2, #8]
   16c7c:	vldr	s11, [pc, #236]	; 16d70 <__assert_fail@plt+0x59e4>
   16c80:	vcmpe.f32	s12, s11
   16c84:	vmrs	APSR_nzcv, fpscr
   16c88:	ble	16d3c <__assert_fail@plt+0x59b0>
   16c8c:	vldr	s10, [pc, #224]	; 16d74 <__assert_fail@plt+0x59e8>
   16c90:	vcmpe.f32	s12, s10
   16c94:	vmrs	APSR_nzcv, fpscr
   16c98:	bpl	16d3c <__assert_fail@plt+0x59b0>
   16c9c:	vldr	s10, [pc, #212]	; 16d78 <__assert_fail@plt+0x59ec>
   16ca0:	vldr	s9, [r2, #12]
   16ca4:	vcmpe.f32	s9, s10
   16ca8:	vmrs	APSR_nzcv, fpscr
   16cac:	ble	16d3c <__assert_fail@plt+0x59b0>
   16cb0:	vcmpe.f32	s13, #0.0
   16cb4:	vmrs	APSR_nzcv, fpscr
   16cb8:	blt	16d3c <__assert_fail@plt+0x59b0>
   16cbc:	vadd.f32	s13, s13, s11
   16cc0:	vldr	s11, [r2, #4]
   16cc4:	vcmpe.f32	s13, s11
   16cc8:	vmrs	APSR_nzcv, fpscr
   16ccc:	bpl	16d3c <__assert_fail@plt+0x59b0>
   16cd0:	vldr	s10, [pc, #164]	; 16d7c <__assert_fail@plt+0x59f0>
   16cd4:	vcmpe.f32	s11, s10
   16cd8:	vmrs	APSR_nzcv, fpscr
   16cdc:	bhi	16d3c <__assert_fail@plt+0x59b0>
   16ce0:	vcmpe.f32	s12, s13
   16ce4:	vmrs	APSR_nzcv, fpscr
   16ce8:	ble	16d3c <__assert_fail@plt+0x59b0>
   16cec:	ldrb	r3, [r2, #16]
   16cf0:	cmp	r3, #0
   16cf4:	beq	16d5c <__assert_fail@plt+0x59d0>
   16cf8:	vmul.f32	s15, s14, s11
   16cfc:	vcvt.u32.f32	s15, s15
   16d00:	vmov	r1, s15
   16d04:	mov	r0, r6
   16d08:	bl	1604c <__assert_fail@plt+0x4cc0>
   16d0c:	cmp	r0, #0
   16d10:	bne	16bc8 <__assert_fail@plt+0x583c>
   16d14:	ldr	r0, [r6, #36]	; 0x24
   16d18:	cmp	r0, #0
   16d1c:	beq	16d30 <__assert_fail@plt+0x59a4>
   16d20:	ldr	r5, [r0, #4]
   16d24:	bl	12dbc <__assert_fail@plt+0x1a30>
   16d28:	subs	r0, r5, #0
   16d2c:	bne	16d20 <__assert_fail@plt+0x5994>
   16d30:	mov	r3, #0
   16d34:	str	r3, [r6, #36]	; 0x24
   16d38:	b	16bc8 <__assert_fail@plt+0x583c>
   16d3c:	vldr	s13, [pc, #60]	; 16d80 <__assert_fail@plt+0x59f4>
   16d40:	str	r3, [r6, #20]
   16d44:	vmul.f32	s13, s14, s13
   16d48:	vcmpe.f32	s15, s13
   16d4c:	vmrs	APSR_nzcv, fpscr
   16d50:	bpl	16bc8 <__assert_fail@plt+0x583c>
   16d54:	vldr	s12, [pc, #40]	; 16d84 <__assert_fail@plt+0x59f8>
   16d58:	vldr	s11, [pc, #28]	; 16d7c <__assert_fail@plt+0x59f0>
   16d5c:	vmul.f32	s15, s14, s11
   16d60:	vmul.f32	s15, s15, s12
   16d64:	vcvt.u32.f32	s15, s15
   16d68:	b	16d00 <__assert_fail@plt+0x5974>
   16d6c:	bl	11344 <abort@plt>
   16d70:	stclcc	12, cr12, [ip, #820]	; 0x334
   16d74:	svccc	0x00666666
   16d78:	svccc	0x008ccccd
   16d7c:	svccc	0x00800000
   16d80:	andeq	r0, r0, r0
   16d84:	svccc	0x004ccccd
   16d88:	andeq	lr, r1, ip, ror #26
   16d8c:	mov	r3, #0
   16d90:	mov	r2, #1
   16d94:	str	r1, [r0]
   16d98:	str	r1, [r0, #4]
   16d9c:	str	r1, [r0, #8]
   16da0:	str	r1, [r0, #12]
   16da4:	str	r1, [r0, #16]
   16da8:	strb	r2, [r0, #28]
   16dac:	str	r3, [r0, #20]
   16db0:	str	r3, [r0, #24]
   16db4:	bx	lr
   16db8:	ldrb	r0, [r0, #28]
   16dbc:	bx	lr
   16dc0:	ldrb	ip, [r0, #28]
   16dc4:	ldr	r3, [r0, #20]
   16dc8:	mov	r2, r0
   16dcc:	eor	ip, ip, #1
   16dd0:	add	r3, ip, r3
   16dd4:	and	r3, r3, #3
   16dd8:	ldr	r0, [r0, r3, lsl #2]
   16ddc:	str	r1, [r2, r3, lsl #2]
   16de0:	ldr	r1, [r2, #24]
   16de4:	str	r3, [r2, #20]
   16de8:	cmp	r3, r1
   16dec:	addeq	r3, ip, r3
   16df0:	andeq	r3, r3, #3
   16df4:	streq	r3, [r2, #24]
   16df8:	mov	r3, #0
   16dfc:	strb	r3, [r2, #28]
   16e00:	bx	lr
   16e04:	ldrb	r3, [r0, #28]
   16e08:	cmp	r3, #0
   16e0c:	bne	16e44 <__assert_fail@plt+0x5ab8>
   16e10:	ldr	r3, [r0, #20]
   16e14:	ldr	r1, [r0, #16]
   16e18:	ldr	r2, [r0, r3, lsl #2]
   16e1c:	str	r1, [r0, r3, lsl #2]
   16e20:	ldr	r1, [r0, #24]
   16e24:	cmp	r3, r1
   16e28:	addne	r3, r3, #3
   16e2c:	moveq	r3, #1
   16e30:	andne	r3, r3, #3
   16e34:	strbeq	r3, [r0, #28]
   16e38:	strne	r3, [r0, #20]
   16e3c:	mov	r0, r2
   16e40:	bx	lr
   16e44:	push	{r4, lr}
   16e48:	bl	11344 <abort@plt>
   16e4c:	push	{r4, r5, r6, r8, r9, lr}
   16e50:	mov	r4, r0
   16e54:	mov	r5, r1
   16e58:	add	r6, r2, #20
   16e5c:	mov	r8, #10
   16e60:	mov	r9, #0
   16e64:	mov	r3, #0
   16e68:	strb	r3, [r2, #20]
   16e6c:	mov	r0, r4
   16e70:	mov	r1, r5
   16e74:	mov	r2, r8
   16e78:	mov	r3, r9
   16e7c:	bl	1d9dc <__assert_fail@plt+0xc650>
   16e80:	mov	r0, r4
   16e84:	mov	r1, r5
   16e88:	mov	r3, r9
   16e8c:	add	r2, r2, #48	; 0x30
   16e90:	strb	r2, [r6, #-1]!
   16e94:	mov	r2, r8
   16e98:	bl	1d9dc <__assert_fail@plt+0xc650>
   16e9c:	mov	r4, r0
   16ea0:	mov	r5, r1
   16ea4:	orrs	r3, r4, r5
   16ea8:	bne	16e6c <__assert_fail@plt+0x5ae0>
   16eac:	mov	r0, r6
   16eb0:	pop	{r4, r5, r6, r8, r9, pc}
   16eb4:	push	{r2, r3}
   16eb8:	push	{lr}		; (str lr, [sp, #-4]!)
   16ebc:	sub	sp, sp, #12
   16ec0:	ldr	r2, [sp, #16]
   16ec4:	ands	r3, r2, #64	; 0x40
   16ec8:	addne	r3, sp, #20
   16ecc:	strne	r3, [sp, #4]
   16ed0:	ldrne	r3, [sp, #20]
   16ed4:	bl	11224 <openat64@plt>
   16ed8:	bl	1afdc <__assert_fail@plt+0x9c50>
   16edc:	add	sp, sp, #12
   16ee0:	pop	{lr}		; (ldr lr, [sp], #4)
   16ee4:	add	sp, sp, #8
   16ee8:	bx	lr
   16eec:	orr	r2, r2, #540672	; 0x84000
   16ef0:	push	{r4, r5, r6, lr}
   16ef4:	orr	r2, r2, #2304	; 0x900
   16ef8:	mov	r6, r3
   16efc:	bl	16eb4 <__assert_fail@plt+0x5b28>
   16f00:	subs	r5, r0, #0
   16f04:	blt	16f38 <__assert_fail@plt+0x5bac>
   16f08:	bl	112e4 <fdopendir@plt>
   16f0c:	subs	r4, r0, #0
   16f10:	beq	16f20 <__assert_fail@plt+0x5b94>
   16f14:	str	r5, [r6]
   16f18:	mov	r0, r4
   16f1c:	pop	{r4, r5, r6, pc}
   16f20:	bl	1123c <__errno_location@plt>
   16f24:	mov	r6, r0
   16f28:	mov	r0, r5
   16f2c:	ldr	r5, [r6]
   16f30:	bl	11350 <close@plt>
   16f34:	b	16f14 <__assert_fail@plt+0x5b88>
   16f38:	mov	r4, #0
   16f3c:	b	16f18 <__assert_fail@plt+0x5b8c>
   16f40:	push	{r4, r5, r6, lr}
   16f44:	subs	r4, r0, #0
   16f48:	beq	16fbc <__assert_fail@plt+0x5c30>
   16f4c:	mov	r1, #47	; 0x2f
   16f50:	bl	112c0 <strrchr@plt>
   16f54:	subs	r5, r0, #0
   16f58:	beq	16fa8 <__assert_fail@plt+0x5c1c>
   16f5c:	add	r6, r5, #1
   16f60:	sub	r3, r6, r4
   16f64:	cmp	r3, #6
   16f68:	ble	16fa8 <__assert_fail@plt+0x5c1c>
   16f6c:	mov	r2, #7
   16f70:	ldr	r1, [pc, #96]	; 16fd8 <__assert_fail@plt+0x5c4c>
   16f74:	sub	r0, r5, #6
   16f78:	bl	11338 <strncmp@plt>
   16f7c:	cmp	r0, #0
   16f80:	bne	16fa8 <__assert_fail@plt+0x5c1c>
   16f84:	mov	r2, #3
   16f88:	ldr	r1, [pc, #76]	; 16fdc <__assert_fail@plt+0x5c50>
   16f8c:	mov	r0, r6
   16f90:	bl	11338 <strncmp@plt>
   16f94:	cmp	r0, #0
   16f98:	movne	r4, r6
   16f9c:	ldreq	r3, [pc, #60]	; 16fe0 <__assert_fail@plt+0x5c54>
   16fa0:	addeq	r4, r5, #4
   16fa4:	streq	r4, [r3]
   16fa8:	ldr	r2, [pc, #52]	; 16fe4 <__assert_fail@plt+0x5c58>
   16fac:	ldr	r3, [pc, #52]	; 16fe8 <__assert_fail@plt+0x5c5c>
   16fb0:	str	r4, [r2]
   16fb4:	str	r4, [r3]
   16fb8:	pop	{r4, r5, r6, pc}
   16fbc:	ldr	r3, [pc, #40]	; 16fec <__assert_fail@plt+0x5c60>
   16fc0:	mov	r2, #55	; 0x37
   16fc4:	mov	r1, #1
   16fc8:	ldr	r3, [r3]
   16fcc:	ldr	r0, [pc, #28]	; 16ff0 <__assert_fail@plt+0x5c64>
   16fd0:	bl	1114c <fwrite@plt>
   16fd4:	bl	11344 <abort@plt>
   16fd8:	andeq	lr, r1, r4, lsr #28
   16fdc:	andeq	lr, r1, ip, lsr #28
   16fe0:	andeq	r0, r3, r8, lsl #3
   16fe4:	andeq	r0, r3, r8, asr #3
   16fe8:	andeq	r0, r3, ip, lsl #3
   16fec:	muleq	r3, r8, r1
   16ff0:	andeq	lr, r1, ip, ror #27
   16ff4:	push	{r4, r5, r6, lr}
   16ff8:	mov	r4, r0
   16ffc:	mov	r5, r1
   17000:	bl	1d3bc <__assert_fail@plt+0xc030>
   17004:	ldrb	r3, [r0]
   17008:	bic	r3, r3, #32
   1700c:	cmp	r3, #85	; 0x55
   17010:	bne	17070 <__assert_fail@plt+0x5ce4>
   17014:	ldrb	r3, [r0, #1]
   17018:	bic	r3, r3, #32
   1701c:	cmp	r3, #84	; 0x54
   17020:	bne	170ac <__assert_fail@plt+0x5d20>
   17024:	ldrb	r3, [r0, #2]
   17028:	bic	r3, r3, #32
   1702c:	cmp	r3, #70	; 0x46
   17030:	bne	170ac <__assert_fail@plt+0x5d20>
   17034:	ldrb	r3, [r0, #3]
   17038:	cmp	r3, #45	; 0x2d
   1703c:	bne	170ac <__assert_fail@plt+0x5d20>
   17040:	ldrb	r3, [r0, #4]
   17044:	cmp	r3, #56	; 0x38
   17048:	bne	170ac <__assert_fail@plt+0x5d20>
   1704c:	ldrb	r3, [r0, #5]
   17050:	cmp	r3, #0
   17054:	bne	170ac <__assert_fail@plt+0x5d20>
   17058:	ldrb	r2, [r4]
   1705c:	ldr	r3, [pc, #152]	; 170fc <__assert_fail@plt+0x5d70>
   17060:	ldr	r0, [pc, #152]	; 17100 <__assert_fail@plt+0x5d74>
   17064:	cmp	r2, #96	; 0x60
   17068:	movne	r0, r3
   1706c:	pop	{r4, r5, r6, pc}
   17070:	cmp	r3, #71	; 0x47
   17074:	bne	170ac <__assert_fail@plt+0x5d20>
   17078:	ldrb	r3, [r0, #1]
   1707c:	bic	r3, r3, #32
   17080:	cmp	r3, #66	; 0x42
   17084:	bne	170ac <__assert_fail@plt+0x5d20>
   17088:	ldrb	r3, [r0, #2]
   1708c:	cmp	r3, #49	; 0x31
   17090:	bne	170ac <__assert_fail@plt+0x5d20>
   17094:	ldrb	r3, [r0, #3]
   17098:	cmp	r3, #56	; 0x38
   1709c:	bne	170ac <__assert_fail@plt+0x5d20>
   170a0:	ldrb	r3, [r0, #4]
   170a4:	cmp	r3, #48	; 0x30
   170a8:	beq	170c0 <__assert_fail@plt+0x5d34>
   170ac:	ldr	r3, [pc, #80]	; 17104 <__assert_fail@plt+0x5d78>
   170b0:	cmp	r5, #9
   170b4:	ldr	r0, [pc, #76]	; 17108 <__assert_fail@plt+0x5d7c>
   170b8:	movne	r0, r3
   170bc:	pop	{r4, r5, r6, pc}
   170c0:	ldrb	r3, [r0, #5]
   170c4:	cmp	r3, #51	; 0x33
   170c8:	bne	170ac <__assert_fail@plt+0x5d20>
   170cc:	ldrb	r3, [r0, #6]
   170d0:	cmp	r3, #48	; 0x30
   170d4:	bne	170ac <__assert_fail@plt+0x5d20>
   170d8:	ldrb	r3, [r0, #7]
   170dc:	cmp	r3, #0
   170e0:	bne	170ac <__assert_fail@plt+0x5d20>
   170e4:	ldrb	r2, [r4]
   170e8:	ldr	r3, [pc, #28]	; 1710c <__assert_fail@plt+0x5d80>
   170ec:	ldr	r0, [pc, #28]	; 17110 <__assert_fail@plt+0x5d84>
   170f0:	cmp	r2, #96	; 0x60
   170f4:	movne	r0, r3
   170f8:	pop	{r4, r5, r6, pc}
   170fc:	andeq	lr, r1, r8, lsl #29
   17100:	andeq	lr, r1, r4, lsl #29
   17104:	muleq	r1, r8, lr
   17108:	muleq	r1, r4, lr
   1710c:	muleq	r1, r0, lr
   17110:	andeq	lr, r1, ip, lsl #29
   17114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17118:	sub	sp, sp, #140	; 0x8c
   1711c:	mov	r9, r1
   17120:	str	r3, [sp, #24]
   17124:	mov	r3, #1
   17128:	mov	sl, r0
   1712c:	str	r2, [sp, #44]	; 0x2c
   17130:	str	r3, [sp, #28]
   17134:	bl	11164 <__ctype_get_mb_cur_max@plt>
   17138:	ldr	r3, [sp, #180]	; 0xb4
   1713c:	mov	fp, r9
   17140:	mov	r9, sl
   17144:	lsr	r3, r3, #1
   17148:	and	r3, r3, #1
   1714c:	str	r3, [sp, #40]	; 0x28
   17150:	ldr	r3, [sp, #180]	; 0xb4
   17154:	mov	r2, #0
   17158:	and	r3, r3, #4
   1715c:	str	r3, [sp, #100]	; 0x64
   17160:	ldr	r3, [sp, #180]	; 0xb4
   17164:	str	r2, [sp, #76]	; 0x4c
   17168:	and	r3, r3, #1
   1716c:	str	r3, [sp, #96]	; 0x60
   17170:	str	r2, [sp, #36]	; 0x24
   17174:	str	r2, [sp, #56]	; 0x38
   17178:	str	r2, [sp, #68]	; 0x44
   1717c:	str	r2, [sp, #72]	; 0x48
   17180:	str	r2, [sp, #84]	; 0x54
   17184:	str	r0, [sp, #80]	; 0x50
   17188:	ldr	r3, [sp, #176]	; 0xb0
   1718c:	cmp	r3, #10
   17190:	ldrls	pc, [pc, r3, lsl #2]
   17194:	b	1836c <__assert_fail@plt+0x6fe0>
   17198:	andeq	r7, r1, r4, asr #3
   1719c:	andeq	r7, r1, r4, ror #9
   171a0:	andeq	r7, r1, ip, lsr r6
   171a4:	andeq	r7, r1, r8, lsl r5
   171a8:	muleq	r1, r0, r6
   171ac:	andeq	r7, r1, r0, ror r6
   171b0:	andeq	r7, r1, r8, lsr r5
   171b4:	andeq	r7, r1, ip, asr r5
   171b8:	andeq	r7, r1, r4, lsl #11
   171bc:	andeq	r7, r1, r4, lsl #11
   171c0:	andeq	r7, r1, r4, lsl #11
   171c4:	mov	r3, #0
   171c8:	ldr	r1, [sp, #56]	; 0x38
   171cc:	ldr	r2, [sp, #176]	; 0xb0
   171d0:	ldr	lr, [sp, #176]	; 0xb0
   171d4:	mov	r8, r3
   171d8:	mov	ip, r3
   171dc:	str	r3, [sp, #40]	; 0x28
   171e0:	mov	r3, r1
   171e4:	cmp	r2, #2
   171e8:	moveq	r3, #0
   171ec:	andne	r3, r3, #1
   171f0:	mov	r0, r3
   171f4:	str	r3, [sp, #92]	; 0x5c
   171f8:	ldr	r3, [sp, #68]	; 0x44
   171fc:	sub	lr, lr, #2
   17200:	adds	r2, r3, #0
   17204:	movne	r2, #1
   17208:	and	r3, r1, ip
   1720c:	and	r3, r2, r3
   17210:	clz	lr, lr
   17214:	str	r3, [sp, #88]	; 0x58
   17218:	lsr	lr, lr, #5
   1721c:	mov	r3, ip
   17220:	and	r3, r3, lr
   17224:	mov	sl, #0
   17228:	and	r0, r2, r0
   1722c:	str	r3, [sp, #64]	; 0x40
   17230:	eor	r3, r1, #1
   17234:	str	lr, [sp, #52]	; 0x34
   17238:	str	r0, [sp, #48]	; 0x30
   1723c:	str	r3, [sp, #60]	; 0x3c
   17240:	ldr	r3, [sp, #24]
   17244:	cmn	r3, #1
   17248:	beq	17778 <__assert_fail@plt+0x63ec>
   1724c:	subs	r7, r3, sl
   17250:	movne	r7, #1
   17254:	cmp	r7, #0
   17258:	beq	17790 <__assert_fail@plt+0x6404>
   1725c:	ldr	r3, [sp, #48]	; 0x30
   17260:	cmp	r3, #0
   17264:	beq	17afc <__assert_fail@plt+0x6770>
   17268:	ldr	r2, [sp, #68]	; 0x44
   1726c:	ldr	r1, [sp, #24]
   17270:	cmp	r2, #1
   17274:	mov	r3, r2
   17278:	movls	r3, #0
   1727c:	movhi	r3, #1
   17280:	cmn	r1, #1
   17284:	movne	r3, #0
   17288:	cmp	r3, #0
   1728c:	add	r4, sl, r2
   17290:	beq	172a0 <__assert_fail@plt+0x5f14>
   17294:	ldr	r0, [sp, #44]	; 0x2c
   17298:	bl	1120c <strlen@plt>
   1729c:	str	r0, [sp, #24]
   172a0:	ldr	r3, [sp, #24]
   172a4:	cmp	r3, r4
   172a8:	ldr	r3, [sp, #44]	; 0x2c
   172ac:	add	r5, r3, sl
   172b0:	bcc	17b04 <__assert_fail@plt+0x6778>
   172b4:	mov	r0, r5
   172b8:	ldr	r2, [sp, #68]	; 0x44
   172bc:	ldr	r1, [sp, #72]	; 0x48
   172c0:	bl	110e0 <memcmp@plt>
   172c4:	cmp	r0, #0
   172c8:	bne	17b04 <__assert_fail@plt+0x6778>
   172cc:	ldr	r3, [sp, #40]	; 0x28
   172d0:	cmp	r3, #0
   172d4:	bne	184c0 <__assert_fail@plt+0x7134>
   172d8:	ldrb	r4, [r5]
   172dc:	cmp	r4, #126	; 0x7e
   172e0:	ldrls	pc, [pc, r4, lsl #2]
   172e4:	b	183fc <__assert_fail@plt+0x7070>
   172e8:			; <UNDEFINED> instruction: 0x000179bc
   172ec:	strdeq	r8, [r1], -ip
   172f0:	strdeq	r8, [r1], -ip
   172f4:	strdeq	r8, [r1], -ip
   172f8:	strdeq	r8, [r1], -ip
   172fc:	strdeq	r8, [r1], -ip
   17300:	strdeq	r8, [r1], -ip
   17304:	andeq	r7, r1, r8, lsr #19
   17308:	muleq	r1, r4, r9
   1730c:	andeq	r7, r1, r0, ror r9
   17310:	andeq	r7, r1, r0, asr r9
   17314:	andeq	r7, r1, r0, lsl #19
   17318:			; <UNDEFINED> instruction: 0x000178b8
   1731c:	andeq	r7, r1, ip, ror #21
   17320:	strdeq	r8, [r1], -ip
   17324:	strdeq	r8, [r1], -ip
   17328:	strdeq	r8, [r1], -ip
   1732c:	strdeq	r8, [r1], -ip
   17330:	strdeq	r8, [r1], -ip
   17334:	strdeq	r8, [r1], -ip
   17338:	strdeq	r8, [r1], -ip
   1733c:	strdeq	r8, [r1], -ip
   17340:	strdeq	r8, [r1], -ip
   17344:	strdeq	r8, [r1], -ip
   17348:	strdeq	r8, [r1], -ip
   1734c:	strdeq	r8, [r1], -ip
   17350:	strdeq	r8, [r1], -ip
   17354:	strdeq	r8, [r1], -ip
   17358:	strdeq	r8, [r1], -ip
   1735c:	strdeq	r8, [r1], -ip
   17360:	strdeq	r8, [r1], -ip
   17364:	strdeq	r8, [r1], -ip
   17368:	ldrdeq	r7, [r1], -ip
   1736c:			; <UNDEFINED> instruction: 0x00017abc
   17370:			; <UNDEFINED> instruction: 0x00017abc
   17374:	muleq	r1, ip, sl
   17378:			; <UNDEFINED> instruction: 0x00017abc
   1737c:	andeq	r7, r1, r8, lsr #17
   17380:			; <UNDEFINED> instruction: 0x00017abc
   17384:	andeq	r7, r1, r4, lsl #17
   17388:			; <UNDEFINED> instruction: 0x00017abc
   1738c:			; <UNDEFINED> instruction: 0x00017abc
   17390:			; <UNDEFINED> instruction: 0x00017abc
   17394:	andeq	r7, r1, r8, lsr #17
   17398:	andeq	r7, r1, r8, lsr #17
   1739c:	andeq	r7, r1, r8, lsr #17
   173a0:	andeq	r7, r1, r8, lsr #17
   173a4:	andeq	r7, r1, r8, lsr #17
   173a8:	andeq	r7, r1, r8, lsr #17
   173ac:	andeq	r7, r1, r8, lsr #17
   173b0:	andeq	r7, r1, r8, lsr #17
   173b4:	andeq	r7, r1, r8, lsr #17
   173b8:	andeq	r7, r1, r8, lsr #17
   173bc:	andeq	r7, r1, r8, lsr #17
   173c0:	andeq	r7, r1, r8, lsr #17
   173c4:	andeq	r7, r1, r8, lsr #17
   173c8:	andeq	r7, r1, r8, lsr #17
   173cc:	andeq	r7, r1, r8, lsr #17
   173d0:	andeq	r7, r1, r8, lsr #17
   173d4:			; <UNDEFINED> instruction: 0x00017abc
   173d8:			; <UNDEFINED> instruction: 0x00017abc
   173dc:			; <UNDEFINED> instruction: 0x00017abc
   173e0:			; <UNDEFINED> instruction: 0x00017abc
   173e4:	andeq	r7, r1, r4, lsr r8
   173e8:	strdeq	r8, [r1], -ip
   173ec:	andeq	r7, r1, r8, lsr #17
   173f0:	andeq	r7, r1, r8, lsr #17
   173f4:	andeq	r7, r1, r8, lsr #17
   173f8:	andeq	r7, r1, r8, lsr #17
   173fc:	andeq	r7, r1, r8, lsr #17
   17400:	andeq	r7, r1, r8, lsr #17
   17404:	andeq	r7, r1, r8, lsr #17
   17408:	andeq	r7, r1, r8, lsr #17
   1740c:	andeq	r7, r1, r8, lsr #17
   17410:	andeq	r7, r1, r8, lsr #17
   17414:	andeq	r7, r1, r8, lsr #17
   17418:	andeq	r7, r1, r8, lsr #17
   1741c:	andeq	r7, r1, r8, lsr #17
   17420:	andeq	r7, r1, r8, lsr #17
   17424:	andeq	r7, r1, r8, lsr #17
   17428:	andeq	r7, r1, r8, lsr #17
   1742c:	andeq	r7, r1, r8, lsr #17
   17430:	andeq	r7, r1, r8, lsr #17
   17434:	andeq	r7, r1, r8, lsr #17
   17438:	andeq	r7, r1, r8, lsr #17
   1743c:	andeq	r7, r1, r8, lsr #17
   17440:	andeq	r7, r1, r8, lsr #17
   17444:	andeq	r7, r1, r8, lsr #17
   17448:	andeq	r7, r1, r8, lsr #17
   1744c:	andeq	r7, r1, r8, lsr #17
   17450:	andeq	r7, r1, r8, lsr #17
   17454:			; <UNDEFINED> instruction: 0x00017abc
   17458:	andeq	r7, r1, r0, lsl #16
   1745c:	andeq	r7, r1, r8, lsr #17
   17460:			; <UNDEFINED> instruction: 0x00017abc
   17464:	andeq	r7, r1, r8, lsr #17
   17468:			; <UNDEFINED> instruction: 0x00017abc
   1746c:	andeq	r7, r1, r8, lsr #17
   17470:	andeq	r7, r1, r8, lsr #17
   17474:	andeq	r7, r1, r8, lsr #17
   17478:	andeq	r7, r1, r8, lsr #17
   1747c:	andeq	r7, r1, r8, lsr #17
   17480:	andeq	r7, r1, r8, lsr #17
   17484:	andeq	r7, r1, r8, lsr #17
   17488:	andeq	r7, r1, r8, lsr #17
   1748c:	andeq	r7, r1, r8, lsr #17
   17490:	andeq	r7, r1, r8, lsr #17
   17494:	andeq	r7, r1, r8, lsr #17
   17498:	andeq	r7, r1, r8, lsr #17
   1749c:	andeq	r7, r1, r8, lsr #17
   174a0:	andeq	r7, r1, r8, lsr #17
   174a4:	andeq	r7, r1, r8, lsr #17
   174a8:	andeq	r7, r1, r8, lsr #17
   174ac:	andeq	r7, r1, r8, lsr #17
   174b0:	andeq	r7, r1, r8, lsr #17
   174b4:	andeq	r7, r1, r8, lsr #17
   174b8:	andeq	r7, r1, r8, lsr #17
   174bc:	andeq	r7, r1, r8, lsr #17
   174c0:	andeq	r7, r1, r8, lsr #17
   174c4:	andeq	r7, r1, r8, lsr #17
   174c8:	andeq	r7, r1, r8, lsr #17
   174cc:	andeq	r7, r1, r8, lsr #17
   174d0:	andeq	r7, r1, r8, lsr #17
   174d4:			; <UNDEFINED> instruction: 0x000176b8
   174d8:			; <UNDEFINED> instruction: 0x00017abc
   174dc:			; <UNDEFINED> instruction: 0x000176b8
   174e0:	muleq	r1, ip, sl
   174e4:	mov	r3, #1
   174e8:	str	r3, [sp, #40]	; 0x28
   174ec:	str	r3, [sp, #68]	; 0x44
   174f0:	mov	r8, #0
   174f4:	ldr	r3, [pc, #4056]	; 184d4 <__assert_fail@plt+0x7148>
   174f8:	str	r3, [sp, #72]	; 0x48
   174fc:	mov	r3, #2
   17500:	str	r3, [sp, #176]	; 0xb0
   17504:	ldr	r1, [sp, #56]	; 0x38
   17508:	mov	r2, r3
   1750c:	ldr	ip, [sp, #40]	; 0x28
   17510:	mov	lr, r3
   17514:	b	171e0 <__assert_fail@plt+0x5e54>
   17518:	mov	r3, #1
   1751c:	str	r3, [sp, #56]	; 0x38
   17520:	str	r3, [sp, #68]	; 0x44
   17524:	str	r3, [sp, #40]	; 0x28
   17528:	ldr	r3, [pc, #4004]	; 184d4 <__assert_fail@plt+0x7148>
   1752c:	mov	r8, #0
   17530:	str	r3, [sp, #72]	; 0x48
   17534:	b	174fc <__assert_fail@plt+0x6170>
   17538:	mov	r3, #1
   1753c:	str	r3, [sp, #56]	; 0x38
   17540:	str	r3, [sp, #68]	; 0x44
   17544:	str	r3, [sp, #40]	; 0x28
   17548:	ldr	r3, [pc, #3976]	; 184d8 <__assert_fail@plt+0x714c>
   1754c:	mov	r8, #0
   17550:	str	r3, [sp, #72]	; 0x48
   17554:	mov	r3, #5
   17558:	b	17500 <__assert_fail@plt+0x6174>
   1755c:	mov	r3, #0
   17560:	str	r3, [sp, #40]	; 0x28
   17564:	mov	r3, #1
   17568:	str	r3, [sp, #56]	; 0x38
   1756c:	mov	r8, #0
   17570:	mov	r1, r3
   17574:	ldr	r2, [sp, #176]	; 0xb0
   17578:	ldr	ip, [sp, #40]	; 0x28
   1757c:	ldr	lr, [sp, #176]	; 0xb0
   17580:	b	171e0 <__assert_fail@plt+0x5e54>
   17584:	ldr	r3, [sp, #176]	; 0xb0
   17588:	cmp	r3, #10
   1758c:	beq	175d0 <__assert_fail@plt+0x6244>
   17590:	mov	r2, #5
   17594:	ldr	r1, [pc, #3904]	; 184dc <__assert_fail@plt+0x7150>
   17598:	mov	r0, #0
   1759c:	bl	11104 <dcgettext@plt>
   175a0:	ldr	r2, [pc, #3892]	; 184dc <__assert_fail@plt+0x7150>
   175a4:	cmp	r0, r2
   175a8:	str	r0, [sp, #188]	; 0xbc
   175ac:	beq	18668 <__assert_fail@plt+0x72dc>
   175b0:	mov	r2, #5
   175b4:	ldr	r1, [pc, #3864]	; 184d4 <__assert_fail@plt+0x7148>
   175b8:	mov	r0, #0
   175bc:	bl	11104 <dcgettext@plt>
   175c0:	ldr	r2, [pc, #3852]	; 184d4 <__assert_fail@plt+0x7148>
   175c4:	cmp	r0, r2
   175c8:	str	r0, [sp, #192]	; 0xc0
   175cc:	beq	18658 <__assert_fail@plt+0x72cc>
   175d0:	ldr	r8, [sp, #40]	; 0x28
   175d4:	cmp	r8, #0
   175d8:	movne	r8, #0
   175dc:	bne	1760c <__assert_fail@plt+0x6280>
   175e0:	ldr	r3, [sp, #188]	; 0xbc
   175e4:	ldrb	r3, [r3]
   175e8:	cmp	r3, #0
   175ec:	beq	1760c <__assert_fail@plt+0x6280>
   175f0:	ldr	r2, [sp, #188]	; 0xbc
   175f4:	cmp	fp, r8
   175f8:	strbhi	r3, [r9, r8]
   175fc:	ldrb	r3, [r2, #1]!
   17600:	add	r8, r8, #1
   17604:	cmp	r3, #0
   17608:	bne	175f4 <__assert_fail@plt+0x6268>
   1760c:	ldr	r0, [sp, #192]	; 0xc0
   17610:	bl	1120c <strlen@plt>
   17614:	ldr	r3, [sp, #192]	; 0xc0
   17618:	ldr	r2, [sp, #176]	; 0xb0
   1761c:	str	r3, [sp, #72]	; 0x48
   17620:	mov	r3, #1
   17624:	str	r3, [sp, #56]	; 0x38
   17628:	mov	r1, r3
   1762c:	ldr	ip, [sp, #40]	; 0x28
   17630:	ldr	lr, [sp, #176]	; 0xb0
   17634:	str	r0, [sp, #68]	; 0x44
   17638:	b	171e0 <__assert_fail@plt+0x5e54>
   1763c:	ldr	r3, [sp, #40]	; 0x28
   17640:	cmp	r3, #0
   17644:	beq	182ec <__assert_fail@plt+0x6f60>
   17648:	mov	r3, #1
   1764c:	str	r3, [sp, #68]	; 0x44
   17650:	ldr	r3, [pc, #3708]	; 184d4 <__assert_fail@plt+0x7148>
   17654:	str	r3, [sp, #72]	; 0x48
   17658:	mov	r8, #0
   1765c:	ldr	r1, [sp, #56]	; 0x38
   17660:	ldr	r2, [sp, #176]	; 0xb0
   17664:	ldr	ip, [sp, #40]	; 0x28
   17668:	ldr	lr, [sp, #176]	; 0xb0
   1766c:	b	171e0 <__assert_fail@plt+0x5e54>
   17670:	ldr	r3, [sp, #40]	; 0x28
   17674:	cmp	r3, #0
   17678:	beq	18370 <__assert_fail@plt+0x6fe4>
   1767c:	str	r3, [sp, #56]	; 0x38
   17680:	mov	r3, #1
   17684:	str	r3, [sp, #68]	; 0x44
   17688:	ldr	r3, [pc, #3656]	; 184d8 <__assert_fail@plt+0x714c>
   1768c:	b	17654 <__assert_fail@plt+0x62c8>
   17690:	ldr	r3, [sp, #40]	; 0x28
   17694:	cmp	r3, #0
   17698:	mov	r3, #1
   1769c:	streq	r3, [sp, #56]	; 0x38
   176a0:	beq	182ec <__assert_fail@plt+0x6f60>
   176a4:	str	r3, [sp, #68]	; 0x44
   176a8:	ldr	r3, [pc, #3620]	; 184d4 <__assert_fail@plt+0x7148>
   176ac:	mov	r8, #0
   176b0:	str	r3, [sp, #72]	; 0x48
   176b4:	b	174fc <__assert_fail@plt+0x6170>
   176b8:	ldr	r3, [sp, #24]
   176bc:	ldr	r6, [sp, #48]	; 0x30
   176c0:	cmn	r3, #1
   176c4:	beq	17d20 <__assert_fail@plt+0x6994>
   176c8:	subs	r3, r3, #1
   176cc:	movne	r3, #1
   176d0:	cmp	r3, #0
   176d4:	beq	17aa0 <__assert_fail@plt+0x6714>
   176d8:	ldr	r1, [sp, #52]	; 0x34
   176dc:	mov	r7, r3
   176e0:	mov	r3, #0
   176e4:	str	r3, [sp, #32]
   176e8:	ldr	r3, [sp, #60]	; 0x3c
   176ec:	orr	r2, r1, r3
   176f0:	ldr	r3, [sp, #40]	; 0x28
   176f4:	eor	r2, r2, #1
   176f8:	orr	r2, r3, r2
   176fc:	tst	r2, #255	; 0xff
   17700:	bne	18024 <__assert_fail@plt+0x6c98>
   17704:	cmp	r6, #0
   17708:	bne	178e4 <__assert_fail@plt+0x6558>
   1770c:	ldr	r3, [sp, #36]	; 0x24
   17710:	add	sl, sl, #1
   17714:	and	r3, r3, r7
   17718:	uxtb	r6, r3
   1771c:	cmp	r6, #0
   17720:	beq	1774c <__assert_fail@plt+0x63c0>
   17724:	cmp	fp, r8
   17728:	movhi	r3, #39	; 0x27
   1772c:	strbhi	r3, [r9, r8]
   17730:	add	r3, r8, #1
   17734:	cmp	fp, r3
   17738:	movhi	r2, #39	; 0x27
   1773c:	add	r8, r8, #2
   17740:	strbhi	r2, [r9, r3]
   17744:	mov	r3, #0
   17748:	str	r3, [sp, #36]	; 0x24
   1774c:	ldr	r2, [sp, #32]
   17750:	cmp	r8, fp
   17754:	ldr	r3, [sp, #28]
   17758:	strbcc	r4, [r9, r8]
   1775c:	cmp	r2, #0
   17760:	moveq	r3, #0
   17764:	str	r3, [sp, #28]
   17768:	ldr	r3, [sp, #24]
   1776c:	add	r8, r8, #1
   17770:	cmn	r3, #1
   17774:	bne	1724c <__assert_fail@plt+0x5ec0>
   17778:	ldr	r3, [sp, #44]	; 0x2c
   1777c:	ldrb	r3, [r3, sl]
   17780:	adds	r7, r3, #0
   17784:	movne	r7, #1
   17788:	cmp	r7, #0
   1778c:	bne	1725c <__assert_fail@plt+0x5ed0>
   17790:	ldr	r3, [sp, #64]	; 0x40
   17794:	cmp	r8, #0
   17798:	movne	r3, #0
   1779c:	andeq	r3, r3, #1
   177a0:	cmp	r3, #0
   177a4:	str	r3, [sp, #64]	; 0x40
   177a8:	bne	1824c <__assert_fail@plt+0x6ec0>
   177ac:	ldr	r3, [sp, #40]	; 0x28
   177b0:	ldr	r2, [sp, #52]	; 0x34
   177b4:	eor	r3, r3, #1
   177b8:	ands	r2, r2, r3
   177bc:	beq	18678 <__assert_fail@plt+0x72ec>
   177c0:	ldr	r3, [sp, #76]	; 0x4c
   177c4:	cmp	r3, #0
   177c8:	beq	18648 <__assert_fail@plt+0x72bc>
   177cc:	ldr	r3, [sp, #28]
   177d0:	cmp	r3, #0
   177d4:	bne	18604 <__assert_fail@plt+0x7278>
   177d8:	ldr	r2, [sp, #84]	; 0x54
   177dc:	clz	r3, fp
   177e0:	cmp	r2, #0
   177e4:	lsr	r3, r3, #5
   177e8:	moveq	r3, #0
   177ec:	cmp	r3, #0
   177f0:	beq	185a4 <__assert_fail@plt+0x7218>
   177f4:	mov	fp, r2
   177f8:	str	r3, [sp, #76]	; 0x4c
   177fc:	b	17188 <__assert_fail@plt+0x5dfc>
   17800:	ldr	r3, [sp, #176]	; 0xb0
   17804:	ldr	r6, [sp, #48]	; 0x30
   17808:	cmp	r3, #2
   1780c:	beq	17d44 <__assert_fail@plt+0x69b8>
   17810:	ldr	r3, [sp, #88]	; 0x58
   17814:	cmp	r3, #0
   17818:	beq	182c8 <__assert_fail@plt+0x6f3c>
   1781c:	mov	r3, #0
   17820:	add	sl, sl, #1
   17824:	ldr	r6, [sp, #36]	; 0x24
   17828:	str	r3, [sp, #32]
   1782c:	mov	r4, #92	; 0x5c
   17830:	b	1771c <__assert_fail@plt+0x6390>
   17834:	ldr	r3, [sp, #176]	; 0xb0
   17838:	ldr	r6, [sp, #48]	; 0x30
   1783c:	cmp	r3, #2
   17840:	beq	17d74 <__assert_fail@plt+0x69e8>
   17844:	cmp	r3, #5
   17848:	bne	182d8 <__assert_fail@plt+0x6f4c>
   1784c:	ldr	r3, [sp, #100]	; 0x64
   17850:	cmp	r3, #0
   17854:	beq	1833c <__assert_fail@plt+0x6fb0>
   17858:	ldr	r2, [sp, #24]
   1785c:	add	r3, sl, #2
   17860:	cmp	r2, r3
   17864:	bls	17874 <__assert_fail@plt+0x64e8>
   17868:	ldrb	r4, [r5, #1]
   1786c:	cmp	r4, #63	; 0x3f
   17870:	beq	184e4 <__assert_fail@plt+0x7158>
   17874:	mov	r1, #0
   17878:	str	r1, [sp, #32]
   1787c:	mov	r4, #63	; 0x3f
   17880:	b	176e8 <__assert_fail@plt+0x635c>
   17884:	ldr	r3, [sp, #176]	; 0xb0
   17888:	ldr	r6, [sp, #48]	; 0x30
   1788c:	cmp	r3, #2
   17890:	beq	17da0 <__assert_fail@plt+0x6a14>
   17894:	str	r7, [sp, #32]
   17898:	str	r7, [sp, #76]	; 0x4c
   1789c:	mov	r1, #0
   178a0:	mov	r4, #39	; 0x27
   178a4:	b	176e8 <__assert_fail@plt+0x635c>
   178a8:	ldr	r6, [sp, #48]	; 0x30
   178ac:	ldr	r1, [sp, #52]	; 0x34
   178b0:	str	r7, [sp, #32]
   178b4:	b	176e8 <__assert_fail@plt+0x635c>
   178b8:	ldr	r6, [sp, #48]	; 0x30
   178bc:	ldr	r1, [sp, #52]	; 0x34
   178c0:	mov	r4, #12
   178c4:	mov	r3, #102	; 0x66
   178c8:	ldr	r2, [sp, #56]	; 0x38
   178cc:	cmp	r2, #0
   178d0:	streq	r2, [sp, #32]
   178d4:	beq	176e8 <__assert_fail@plt+0x635c>
   178d8:	mov	r4, r3
   178dc:	mov	r3, #0
   178e0:	str	r3, [sp, #32]
   178e4:	ldr	r3, [sp, #40]	; 0x28
   178e8:	cmp	r3, #0
   178ec:	bne	1805c <__assert_fail@plt+0x6cd0>
   178f0:	ldr	r3, [sp, #36]	; 0x24
   178f4:	eor	r3, r3, #1
   178f8:	and	r3, r3, r1
   178fc:	ands	r3, r3, #255	; 0xff
   17900:	beq	17938 <__assert_fail@plt+0x65ac>
   17904:	cmp	fp, r8
   17908:	movhi	r2, #39	; 0x27
   1790c:	strbhi	r2, [r9, r8]
   17910:	add	r2, r8, #1
   17914:	cmp	fp, r2
   17918:	movhi	r1, #36	; 0x24
   1791c:	strbhi	r1, [r9, r2]
   17920:	add	r2, r8, #2
   17924:	cmp	fp, r2
   17928:	add	r8, r8, #3
   1792c:	movhi	r1, #39	; 0x27
   17930:	strbhi	r1, [r9, r2]
   17934:	str	r3, [sp, #36]	; 0x24
   17938:	cmp	fp, r8
   1793c:	movhi	r3, #92	; 0x5c
   17940:	strbhi	r3, [r9, r8]
   17944:	add	sl, sl, #1
   17948:	add	r8, r8, #1
   1794c:	b	1774c <__assert_fail@plt+0x63c0>
   17950:	ldr	r6, [sp, #48]	; 0x30
   17954:	mov	r4, #10
   17958:	mov	r3, #110	; 0x6e
   1795c:	ldr	r2, [sp, #64]	; 0x40
   17960:	cmp	r2, #0
   17964:	bne	183e4 <__assert_fail@plt+0x7058>
   17968:	ldr	r1, [sp, #52]	; 0x34
   1796c:	b	178c8 <__assert_fail@plt+0x653c>
   17970:	ldr	r6, [sp, #48]	; 0x30
   17974:	ldr	r1, [sp, #52]	; 0x34
   17978:	mov	r3, #116	; 0x74
   1797c:	b	178c8 <__assert_fail@plt+0x653c>
   17980:	ldr	r6, [sp, #48]	; 0x30
   17984:	ldr	r1, [sp, #52]	; 0x34
   17988:	mov	r4, #11
   1798c:	mov	r3, #118	; 0x76
   17990:	b	178c8 <__assert_fail@plt+0x653c>
   17994:	ldr	r6, [sp, #48]	; 0x30
   17998:	ldr	r1, [sp, #52]	; 0x34
   1799c:	mov	r4, #8
   179a0:	mov	r3, #98	; 0x62
   179a4:	b	178c8 <__assert_fail@plt+0x653c>
   179a8:	ldr	r6, [sp, #48]	; 0x30
   179ac:	ldr	r1, [sp, #52]	; 0x34
   179b0:	mov	r4, #7
   179b4:	mov	r3, #97	; 0x61
   179b8:	b	178c8 <__assert_fail@plt+0x653c>
   179bc:	ldr	r3, [sp, #56]	; 0x38
   179c0:	ldr	r6, [sp, #48]	; 0x30
   179c4:	cmp	r3, #0
   179c8:	beq	17e8c <__assert_fail@plt+0x6b00>
   179cc:	ldr	r3, [sp, #40]	; 0x28
   179d0:	cmp	r3, #0
   179d4:	bne	184c0 <__assert_fail@plt+0x7134>
   179d8:	ldr	r3, [sp, #36]	; 0x24
   179dc:	ldr	r2, [sp, #52]	; 0x34
   179e0:	eor	r3, r3, #1
   179e4:	ands	r3, r2, r3
   179e8:	moveq	r2, r8
   179ec:	beq	17a24 <__assert_fail@plt+0x6698>
   179f0:	cmp	fp, r8
   179f4:	movhi	r2, #39	; 0x27
   179f8:	strbhi	r2, [r9, r8]
   179fc:	add	r2, r8, #1
   17a00:	cmp	fp, r2
   17a04:	movhi	r1, #36	; 0x24
   17a08:	strbhi	r1, [r9, r2]
   17a0c:	add	r2, r8, #2
   17a10:	cmp	fp, r2
   17a14:	movhi	r1, #39	; 0x27
   17a18:	strbhi	r1, [r9, r2]
   17a1c:	add	r2, r8, #3
   17a20:	str	r3, [sp, #36]	; 0x24
   17a24:	cmp	fp, r2
   17a28:	movhi	r3, #92	; 0x5c
   17a2c:	strbhi	r3, [r9, r2]
   17a30:	ldr	r3, [sp, #92]	; 0x5c
   17a34:	add	r8, r2, #1
   17a38:	cmp	r3, #0
   17a3c:	beq	183c0 <__assert_fail@plt+0x7034>
   17a40:	ldr	r1, [sp, #24]
   17a44:	add	r3, sl, #1
   17a48:	cmp	r1, r3
   17a4c:	bls	17a84 <__assert_fail@plt+0x66f8>
   17a50:	ldr	r1, [sp, #44]	; 0x2c
   17a54:	ldrb	r3, [r1, r3]
   17a58:	sub	r3, r3, #48	; 0x30
   17a5c:	cmp	r3, #9
   17a60:	bhi	17a84 <__assert_fail@plt+0x66f8>
   17a64:	cmp	fp, r8
   17a68:	movhi	r3, #48	; 0x30
   17a6c:	strbhi	r3, [r9, r8]
   17a70:	add	r3, r2, #2
   17a74:	cmp	fp, r3
   17a78:	add	r8, r2, #3
   17a7c:	movhi	r1, #48	; 0x30
   17a80:	strbhi	r1, [r9, r3]
   17a84:	ldr	r3, [sp, #40]	; 0x28
   17a88:	ldr	r1, [sp, #52]	; 0x34
   17a8c:	mov	r7, r3
   17a90:	str	r3, [sp, #32]
   17a94:	mov	r4, #48	; 0x30
   17a98:	b	176e8 <__assert_fail@plt+0x635c>
   17a9c:	ldr	r6, [sp, #48]	; 0x30
   17aa0:	cmp	sl, #0
   17aa4:	streq	r7, [sp, #32]
   17aa8:	beq	17ac8 <__assert_fail@plt+0x673c>
   17aac:	mov	r3, #0
   17ab0:	ldr	r1, [sp, #52]	; 0x34
   17ab4:	str	r3, [sp, #32]
   17ab8:	b	176e8 <__assert_fail@plt+0x635c>
   17abc:	ldr	r6, [sp, #48]	; 0x30
   17ac0:	mov	r3, #0
   17ac4:	str	r3, [sp, #32]
   17ac8:	ldr	r3, [sp, #64]	; 0x40
   17acc:	cmp	r3, #0
   17ad0:	bne	1824c <__assert_fail@plt+0x6ec0>
   17ad4:	ldr	r1, [sp, #52]	; 0x34
   17ad8:	b	176e8 <__assert_fail@plt+0x635c>
   17adc:	ldr	r3, [sp, #48]	; 0x30
   17ae0:	mov	r6, r3
   17ae4:	str	r3, [sp, #32]
   17ae8:	b	17ac8 <__assert_fail@plt+0x673c>
   17aec:	ldr	r6, [sp, #48]	; 0x30
   17af0:	mov	r4, #13
   17af4:	mov	r3, #114	; 0x72
   17af8:	b	1795c <__assert_fail@plt+0x65d0>
   17afc:	ldr	r3, [sp, #44]	; 0x2c
   17b00:	add	r5, r3, sl
   17b04:	ldrb	r4, [r5]
   17b08:	cmp	r4, #126	; 0x7e
   17b0c:	ldrls	pc, [pc, r4, lsl #2]
   17b10:	b	17eac <__assert_fail@plt+0x6b20>
   17b14:	andeq	r7, r1, ip, ror lr
   17b18:	andeq	r7, r1, ip, lsr #29
   17b1c:	andeq	r7, r1, ip, lsr #29
   17b20:	andeq	r7, r1, ip, lsr #29
   17b24:	andeq	r7, r1, ip, lsr #29
   17b28:	andeq	r7, r1, ip, lsr #29
   17b2c:	andeq	r7, r1, ip, lsr #29
   17b30:	andeq	r7, r1, r4, ror lr
   17b34:	andeq	r7, r1, ip, ror #28
   17b38:	andeq	r7, r1, r0, ror #28
   17b3c:	andeq	r7, r1, r8, asr lr
   17b40:	andeq	r7, r1, r0, asr lr
   17b44:	andeq	r7, r1, r8, asr #28
   17b48:	andeq	r7, r1, r0, asr #28
   17b4c:	andeq	r7, r1, ip, lsr #29
   17b50:	andeq	r7, r1, ip, lsr #29
   17b54:	andeq	r7, r1, ip, lsr #29
   17b58:	andeq	r7, r1, ip, lsr #29
   17b5c:	andeq	r7, r1, ip, lsr #29
   17b60:	andeq	r7, r1, ip, lsr #29
   17b64:	andeq	r7, r1, ip, lsr #29
   17b68:	andeq	r7, r1, ip, lsr #29
   17b6c:	andeq	r7, r1, ip, lsr #29
   17b70:	andeq	r7, r1, ip, lsr #29
   17b74:	andeq	r7, r1, ip, lsr #29
   17b78:	andeq	r7, r1, ip, lsr #29
   17b7c:	andeq	r7, r1, ip, lsr #29
   17b80:	andeq	r7, r1, ip, lsr #29
   17b84:	andeq	r7, r1, ip, lsr #29
   17b88:	andeq	r7, r1, ip, lsr #29
   17b8c:	andeq	r7, r1, ip, lsr #29
   17b90:	andeq	r7, r1, ip, lsr #29
   17b94:	andeq	r7, r1, r4, lsr lr
   17b98:	andeq	r7, r1, ip, lsr #28
   17b9c:	andeq	r7, r1, ip, lsr #28
   17ba0:	andeq	r7, r1, r4, lsr #28
   17ba4:	andeq	r7, r1, ip, lsr #28
   17ba8:	andeq	r7, r1, ip, lsl lr
   17bac:	andeq	r7, r1, ip, lsr #28
   17bb0:	muleq	r1, r0, sp
   17bb4:	andeq	r7, r1, ip, lsr #28
   17bb8:	andeq	r7, r1, ip, lsr #28
   17bbc:	andeq	r7, r1, ip, lsr #28
   17bc0:	andeq	r7, r1, ip, lsl lr
   17bc4:	andeq	r7, r1, ip, lsl lr
   17bc8:	andeq	r7, r1, ip, lsl lr
   17bcc:	andeq	r7, r1, ip, lsl lr
   17bd0:	andeq	r7, r1, ip, lsl lr
   17bd4:	andeq	r7, r1, ip, lsl lr
   17bd8:	andeq	r7, r1, ip, lsl lr
   17bdc:	andeq	r7, r1, ip, lsl lr
   17be0:	andeq	r7, r1, ip, lsl lr
   17be4:	andeq	r7, r1, ip, lsl lr
   17be8:	andeq	r7, r1, ip, lsl lr
   17bec:	andeq	r7, r1, ip, lsl lr
   17bf0:	andeq	r7, r1, ip, lsl lr
   17bf4:	andeq	r7, r1, ip, lsl lr
   17bf8:	andeq	r7, r1, ip, lsl lr
   17bfc:	andeq	r7, r1, ip, lsl lr
   17c00:	andeq	r7, r1, ip, lsr #28
   17c04:	andeq	r7, r1, ip, lsr #28
   17c08:	andeq	r7, r1, ip, lsr #28
   17c0c:	andeq	r7, r1, ip, lsr #28
   17c10:	andeq	r7, r1, r4, ror #26
   17c14:	andeq	r7, r1, ip, lsr #29
   17c18:	andeq	r7, r1, ip, lsl lr
   17c1c:	andeq	r7, r1, ip, lsl lr
   17c20:	andeq	r7, r1, ip, lsl lr
   17c24:	andeq	r7, r1, ip, lsl lr
   17c28:	andeq	r7, r1, ip, lsl lr
   17c2c:	andeq	r7, r1, ip, lsl lr
   17c30:	andeq	r7, r1, ip, lsl lr
   17c34:	andeq	r7, r1, ip, lsl lr
   17c38:	andeq	r7, r1, ip, lsl lr
   17c3c:	andeq	r7, r1, ip, lsl lr
   17c40:	andeq	r7, r1, ip, lsl lr
   17c44:	andeq	r7, r1, ip, lsl lr
   17c48:	andeq	r7, r1, ip, lsl lr
   17c4c:	andeq	r7, r1, ip, lsl lr
   17c50:	andeq	r7, r1, ip, lsl lr
   17c54:	andeq	r7, r1, ip, lsl lr
   17c58:	andeq	r7, r1, ip, lsl lr
   17c5c:	andeq	r7, r1, ip, lsl lr
   17c60:	andeq	r7, r1, ip, lsl lr
   17c64:	andeq	r7, r1, ip, lsl lr
   17c68:	andeq	r7, r1, ip, lsl lr
   17c6c:	andeq	r7, r1, ip, lsl lr
   17c70:	andeq	r7, r1, ip, lsl lr
   17c74:	andeq	r7, r1, ip, lsl lr
   17c78:	andeq	r7, r1, ip, lsl lr
   17c7c:	andeq	r7, r1, ip, lsl lr
   17c80:	andeq	r7, r1, ip, lsr #28
   17c84:	andeq	r7, r1, r4, lsr sp
   17c88:	andeq	r7, r1, ip, lsl lr
   17c8c:	andeq	r7, r1, ip, lsr #28
   17c90:	andeq	r7, r1, ip, lsl lr
   17c94:	andeq	r7, r1, ip, lsr #28
   17c98:	andeq	r7, r1, ip, lsl lr
   17c9c:	andeq	r7, r1, ip, lsl lr
   17ca0:	andeq	r7, r1, ip, lsl lr
   17ca4:	andeq	r7, r1, ip, lsl lr
   17ca8:	andeq	r7, r1, ip, lsl lr
   17cac:	andeq	r7, r1, ip, lsl lr
   17cb0:	andeq	r7, r1, ip, lsl lr
   17cb4:	andeq	r7, r1, ip, lsl lr
   17cb8:	andeq	r7, r1, ip, lsl lr
   17cbc:	andeq	r7, r1, ip, lsl lr
   17cc0:	andeq	r7, r1, ip, lsl lr
   17cc4:	andeq	r7, r1, ip, lsl lr
   17cc8:	andeq	r7, r1, ip, lsl lr
   17ccc:	andeq	r7, r1, ip, lsl lr
   17cd0:	andeq	r7, r1, ip, lsl lr
   17cd4:	andeq	r7, r1, ip, lsl lr
   17cd8:	andeq	r7, r1, ip, lsl lr
   17cdc:	andeq	r7, r1, ip, lsl lr
   17ce0:	andeq	r7, r1, ip, lsl lr
   17ce4:	andeq	r7, r1, ip, lsl lr
   17ce8:	andeq	r7, r1, ip, lsl lr
   17cec:	andeq	r7, r1, ip, lsl lr
   17cf0:	andeq	r7, r1, ip, lsl lr
   17cf4:	andeq	r7, r1, ip, lsl lr
   17cf8:	andeq	r7, r1, ip, lsl lr
   17cfc:	andeq	r7, r1, ip, lsl lr
   17d00:	andeq	r7, r1, r0, lsl sp
   17d04:	andeq	r7, r1, ip, lsr #28
   17d08:	andeq	r7, r1, r0, lsl sp
   17d0c:	andeq	r7, r1, r4, lsr #28
   17d10:	ldr	r3, [sp, #24]
   17d14:	mov	r6, #0
   17d18:	cmn	r3, #1
   17d1c:	bne	176c8 <__assert_fail@plt+0x633c>
   17d20:	ldr	r3, [sp, #44]	; 0x2c
   17d24:	ldrb	r3, [r3, #1]
   17d28:	adds	r3, r3, #0
   17d2c:	movne	r3, #1
   17d30:	b	176d0 <__assert_fail@plt+0x6344>
   17d34:	ldr	r3, [sp, #176]	; 0xb0
   17d38:	mov	r6, #0
   17d3c:	cmp	r3, #2
   17d40:	bne	17810 <__assert_fail@plt+0x6484>
   17d44:	ldr	r3, [sp, #64]	; 0x40
   17d48:	cmp	r3, #0
   17d4c:	bne	18584 <__assert_fail@plt+0x71f8>
   17d50:	add	sl, sl, #1
   17d54:	ldr	r6, [sp, #36]	; 0x24
   17d58:	str	r3, [sp, #32]
   17d5c:	mov	r4, #92	; 0x5c
   17d60:	b	1771c <__assert_fail@plt+0x6390>
   17d64:	ldr	r3, [sp, #176]	; 0xb0
   17d68:	mov	r6, #0
   17d6c:	cmp	r3, #2
   17d70:	bne	17844 <__assert_fail@plt+0x64b8>
   17d74:	ldr	r3, [sp, #40]	; 0x28
   17d78:	cmp	r3, #0
   17d7c:	bne	18060 <__assert_fail@plt+0x6cd4>
   17d80:	mov	r1, r7
   17d84:	str	r3, [sp, #32]
   17d88:	mov	r4, #63	; 0x3f
   17d8c:	b	176e8 <__assert_fail@plt+0x635c>
   17d90:	ldr	r3, [sp, #176]	; 0xb0
   17d94:	mov	r6, #0
   17d98:	cmp	r3, #2
   17d9c:	bne	17894 <__assert_fail@plt+0x6508>
   17da0:	ldr	r3, [sp, #64]	; 0x40
   17da4:	cmp	r3, #0
   17da8:	bne	18584 <__assert_fail@plt+0x71f8>
   17dac:	ldr	r2, [sp, #84]	; 0x54
   17db0:	adds	r3, fp, #0
   17db4:	movne	r3, #1
   17db8:	cmp	r2, #0
   17dbc:	movne	r3, #0
   17dc0:	cmp	r3, #0
   17dc4:	strne	fp, [sp, #84]	; 0x54
   17dc8:	movne	fp, #0
   17dcc:	bne	17dfc <__assert_fail@plt+0x6a70>
   17dd0:	cmp	fp, r8
   17dd4:	movhi	r3, #39	; 0x27
   17dd8:	strbhi	r3, [r9, r8]
   17ddc:	add	r3, r8, #1
   17de0:	cmp	fp, r3
   17de4:	movhi	r2, #92	; 0x5c
   17de8:	strbhi	r2, [r9, r3]
   17dec:	add	r3, r8, #2
   17df0:	cmp	fp, r3
   17df4:	movhi	r2, #39	; 0x27
   17df8:	strbhi	r2, [r9, r3]
   17dfc:	ldr	r3, [sp, #64]	; 0x40
   17e00:	add	r8, r8, #3
   17e04:	mov	r1, r7
   17e08:	str	r7, [sp, #32]
   17e0c:	str	r7, [sp, #76]	; 0x4c
   17e10:	str	r3, [sp, #36]	; 0x24
   17e14:	mov	r4, #39	; 0x27
   17e18:	b	176e8 <__assert_fail@plt+0x635c>
   17e1c:	mov	r6, #0
   17e20:	b	178ac <__assert_fail@plt+0x6520>
   17e24:	mov	r6, #0
   17e28:	b	17aa0 <__assert_fail@plt+0x6714>
   17e2c:	mov	r6, #0
   17e30:	b	17ac0 <__assert_fail@plt+0x6734>
   17e34:	str	r7, [sp, #32]
   17e38:	mov	r6, #0
   17e3c:	b	17ac8 <__assert_fail@plt+0x673c>
   17e40:	mov	r6, #0
   17e44:	b	17af0 <__assert_fail@plt+0x6764>
   17e48:	mov	r6, #0
   17e4c:	b	178bc <__assert_fail@plt+0x6530>
   17e50:	mov	r6, #0
   17e54:	b	17984 <__assert_fail@plt+0x65f8>
   17e58:	mov	r6, #0
   17e5c:	b	17954 <__assert_fail@plt+0x65c8>
   17e60:	mov	r6, #0
   17e64:	mov	r3, #116	; 0x74
   17e68:	b	1795c <__assert_fail@plt+0x65d0>
   17e6c:	mov	r6, #0
   17e70:	b	17998 <__assert_fail@plt+0x660c>
   17e74:	mov	r6, #0
   17e78:	b	179ac <__assert_fail@plt+0x6620>
   17e7c:	ldr	r3, [sp, #56]	; 0x38
   17e80:	mov	r6, #0
   17e84:	cmp	r3, #0
   17e88:	bne	179cc <__assert_fail@plt+0x6640>
   17e8c:	ldr	r3, [sp, #96]	; 0x60
   17e90:	cmp	r3, #0
   17e94:	addne	sl, sl, #1
   17e98:	bne	17240 <__assert_fail@plt+0x5eb4>
   17e9c:	ldr	r1, [sp, #52]	; 0x34
   17ea0:	str	r3, [sp, #32]
   17ea4:	mov	r4, r3
   17ea8:	b	176e8 <__assert_fail@plt+0x635c>
   17eac:	mov	r6, #0
   17eb0:	ldr	r3, [sp, #80]	; 0x50
   17eb4:	cmp	r3, #1
   17eb8:	bne	180a8 <__assert_fail@plt+0x6d1c>
   17ebc:	bl	111e8 <__ctype_b_loc@plt>
   17ec0:	ldr	r2, [sp, #80]	; 0x50
   17ec4:	sxth	r3, r4
   17ec8:	mov	r1, r2
   17ecc:	lsl	r3, r3, #1
   17ed0:	ldr	r2, [r0]
   17ed4:	ldrh	r3, [r2, r3]
   17ed8:	and	r3, r3, #16384	; 0x4000
   17edc:	cmp	r3, #0
   17ee0:	movne	r3, #1
   17ee4:	moveq	r3, #0
   17ee8:	str	r3, [sp, #32]
   17eec:	moveq	r3, #1
   17ef0:	movne	r3, #0
   17ef4:	ldr	r2, [sp, #56]	; 0x38
   17ef8:	and	r3, r3, r2
   17efc:	ands	r3, r3, #255	; 0xff
   17f00:	beq	17ad4 <__assert_fail@plt+0x6748>
   17f04:	add	r1, sl, r1
   17f08:	mov	r0, #0
   17f0c:	ldr	r7, [sp, #40]	; 0x28
   17f10:	ldr	r2, [sp, #36]	; 0x24
   17f14:	ldr	lr, [sp, #52]	; 0x34
   17f18:	b	17fc8 <__assert_fail@plt+0x6c3c>
   17f1c:	cmp	r7, #0
   17f20:	bne	1831c <__assert_fail@plt+0x6f90>
   17f24:	eor	r0, r2, #1
   17f28:	ands	r0, lr, r0
   17f2c:	beq	17f64 <__assert_fail@plt+0x6bd8>
   17f30:	cmp	fp, r8
   17f34:	movhi	r2, #39	; 0x27
   17f38:	strbhi	r2, [r9, r8]
   17f3c:	add	r2, r8, #1
   17f40:	cmp	fp, r2
   17f44:	movhi	ip, #36	; 0x24
   17f48:	strbhi	ip, [r9, r2]
   17f4c:	add	r2, r8, #2
   17f50:	cmp	fp, r2
   17f54:	movhi	ip, #39	; 0x27
   17f58:	strbhi	ip, [r9, r2]
   17f5c:	add	r8, r8, #3
   17f60:	mov	r2, r0
   17f64:	cmp	fp, r8
   17f68:	movhi	r0, #92	; 0x5c
   17f6c:	strbhi	r0, [r9, r8]
   17f70:	add	r0, r8, #1
   17f74:	cmp	fp, r0
   17f78:	lsrhi	ip, r4, #6
   17f7c:	addhi	ip, ip, #48	; 0x30
   17f80:	strbhi	ip, [r9, r0]
   17f84:	add	ip, r8, #2
   17f88:	cmp	fp, ip
   17f8c:	lsrhi	r0, r4, #3
   17f90:	andhi	r0, r0, #7
   17f94:	addhi	r0, r0, #48	; 0x30
   17f98:	add	sl, sl, #1
   17f9c:	strbhi	r0, [r9, ip]
   17fa0:	and	r4, r4, #7
   17fa4:	cmp	sl, r1
   17fa8:	add	r4, r4, #48	; 0x30
   17fac:	add	r8, r8, #3
   17fb0:	bcs	18334 <__assert_fail@plt+0x6fa8>
   17fb4:	mov	r0, r3
   17fb8:	cmp	fp, r8
   17fbc:	strbhi	r4, [r9, r8]
   17fc0:	ldrb	r4, [r5, #1]!
   17fc4:	add	r8, r8, #1
   17fc8:	cmp	r3, #0
   17fcc:	bne	17f1c <__assert_fail@plt+0x6b90>
   17fd0:	cmp	r6, #0
   17fd4:	bne	18078 <__assert_fail@plt+0x6cec>
   17fd8:	eor	r6, r0, #1
   17fdc:	and	r6, r6, r2
   17fe0:	add	sl, sl, #1
   17fe4:	cmp	r1, sl
   17fe8:	uxtb	r6, r6
   17fec:	bls	180a0 <__assert_fail@plt+0x6d14>
   17ff0:	cmp	r6, #0
   17ff4:	beq	17fb8 <__assert_fail@plt+0x6c2c>
   17ff8:	cmp	fp, r8
   17ffc:	movhi	r2, #39	; 0x27
   18000:	strbhi	r2, [r9, r8]
   18004:	add	r2, r8, #1
   18008:	cmp	fp, r2
   1800c:	movhi	ip, #39	; 0x27
   18010:	strbhi	ip, [r9, r2]
   18014:	add	r8, r8, #2
   18018:	mov	r6, r3
   1801c:	mov	r2, r3
   18020:	b	17fb8 <__assert_fail@plt+0x6c2c>
   18024:	ldr	r3, [sp, #184]	; 0xb8
   18028:	cmp	r3, #0
   1802c:	beq	17704 <__assert_fail@plt+0x6378>
   18030:	lsr	r2, r4, #5
   18034:	mov	r0, r3
   18038:	uxtb	r2, r2
   1803c:	and	r3, r4, #31
   18040:	ldr	r2, [r0, r2, lsl #2]
   18044:	lsr	r3, r2, r3
   18048:	tst	r3, #1
   1804c:	beq	17704 <__assert_fail@plt+0x6378>
   18050:	ldr	r3, [sp, #40]	; 0x28
   18054:	cmp	r3, #0
   18058:	beq	178f0 <__assert_fail@plt+0x6564>
   1805c:	mov	r3, r1
   18060:	str	r3, [sp, #64]	; 0x40
   18064:	mov	sl, r9
   18068:	ldr	r3, [sp, #56]	; 0x38
   1806c:	mov	r9, fp
   18070:	ldr	r2, [sp, #64]	; 0x40
   18074:	b	18264 <__assert_fail@plt+0x6ed8>
   18078:	cmp	fp, r8
   1807c:	eor	r6, r0, #1
   18080:	movhi	ip, #92	; 0x5c
   18084:	and	r6, r6, r2
   18088:	add	sl, sl, #1
   1808c:	strbhi	ip, [r9, r8]
   18090:	cmp	r1, sl
   18094:	add	r8, r8, #1
   18098:	uxtb	r6, r6
   1809c:	bhi	17ff0 <__assert_fail@plt+0x6c64>
   180a0:	str	r2, [sp, #36]	; 0x24
   180a4:	b	1771c <__assert_fail@plt+0x6390>
   180a8:	ldr	r3, [sp, #24]
   180ac:	cmn	r3, #1
   180b0:	mov	r3, #0
   180b4:	str	r3, [sp, #128]	; 0x80
   180b8:	str	r3, [sp, #132]	; 0x84
   180bc:	beq	183b0 <__assert_fail@plt+0x7024>
   180c0:	mov	r2, r7
   180c4:	mov	r3, #0
   180c8:	str	r7, [sp, #104]	; 0x68
   180cc:	str	r5, [sp, #116]	; 0x74
   180d0:	mov	r7, r3
   180d4:	mov	r5, r2
   180d8:	str	r4, [sp, #32]
   180dc:	str	r6, [sp, #108]	; 0x6c
   180e0:	str	r8, [sp, #112]	; 0x70
   180e4:	ldr	r3, [sp, #44]	; 0x2c
   180e8:	add	r6, sl, r7
   180ec:	add	r4, r3, r6
   180f0:	ldr	r3, [sp, #24]
   180f4:	mov	r1, r4
   180f8:	sub	r2, r3, r6
   180fc:	add	r0, sp, #124	; 0x7c
   18100:	add	r3, sp, #128	; 0x80
   18104:	bl	1d3f0 <__assert_fail@plt+0xc064>
   18108:	subs	r8, r0, #0
   1810c:	beq	18494 <__assert_fail@plt+0x7108>
   18110:	cmn	r8, #1
   18114:	beq	1846c <__assert_fail@plt+0x70e0>
   18118:	cmn	r8, #2
   1811c:	beq	18404 <__assert_fail@plt+0x7078>
   18120:	ldr	r3, [sp, #64]	; 0x40
   18124:	cmp	r3, #0
   18128:	beq	181e8 <__assert_fail@plt+0x6e5c>
   1812c:	cmp	r8, #1
   18130:	beq	181e8 <__assert_fail@plt+0x6e5c>
   18134:	sub	r3, r8, #1
   18138:	add	r6, r3, r6
   1813c:	ldr	r3, [sp, #44]	; 0x2c
   18140:	add	r6, r3, r6
   18144:	ldrb	r3, [r4, #1]!
   18148:	sub	r3, r3, #91	; 0x5b
   1814c:	cmp	r3, #33	; 0x21
   18150:	ldrls	pc, [pc, r3, lsl #2]
   18154:	b	181e0 <__assert_fail@plt+0x6e54>
   18158:	andeq	r8, r1, ip, asr #4
   1815c:	andeq	r8, r1, ip, asr #4
   18160:	andeq	r8, r1, r0, ror #3
   18164:	andeq	r8, r1, ip, asr #4
   18168:	andeq	r8, r1, r0, ror #3
   1816c:	andeq	r8, r1, ip, asr #4
   18170:	andeq	r8, r1, r0, ror #3
   18174:	andeq	r8, r1, r0, ror #3
   18178:	andeq	r8, r1, r0, ror #3
   1817c:	andeq	r8, r1, r0, ror #3
   18180:	andeq	r8, r1, r0, ror #3
   18184:	andeq	r8, r1, r0, ror #3
   18188:	andeq	r8, r1, r0, ror #3
   1818c:	andeq	r8, r1, r0, ror #3
   18190:	andeq	r8, r1, r0, ror #3
   18194:	andeq	r8, r1, r0, ror #3
   18198:	andeq	r8, r1, r0, ror #3
   1819c:	andeq	r8, r1, r0, ror #3
   181a0:	andeq	r8, r1, r0, ror #3
   181a4:	andeq	r8, r1, r0, ror #3
   181a8:	andeq	r8, r1, r0, ror #3
   181ac:	andeq	r8, r1, r0, ror #3
   181b0:	andeq	r8, r1, r0, ror #3
   181b4:	andeq	r8, r1, r0, ror #3
   181b8:	andeq	r8, r1, r0, ror #3
   181bc:	andeq	r8, r1, r0, ror #3
   181c0:	andeq	r8, r1, r0, ror #3
   181c4:	andeq	r8, r1, r0, ror #3
   181c8:	andeq	r8, r1, r0, ror #3
   181cc:	andeq	r8, r1, r0, ror #3
   181d0:	andeq	r8, r1, r0, ror #3
   181d4:	andeq	r8, r1, r0, ror #3
   181d8:	andeq	r8, r1, r0, ror #3
   181dc:	andeq	r8, r1, ip, asr #4
   181e0:	cmp	r6, r4
   181e4:	bne	18144 <__assert_fail@plt+0x6db8>
   181e8:	ldr	r0, [sp, #124]	; 0x7c
   181ec:	bl	11134 <iswprint@plt>
   181f0:	add	r7, r7, r8
   181f4:	cmp	r0, #0
   181f8:	add	r0, sp, #128	; 0x80
   181fc:	moveq	r5, #0
   18200:	bl	110d4 <mbsinit@plt>
   18204:	cmp	r0, #0
   18208:	beq	180e4 <__assert_fail@plt+0x6d58>
   1820c:	ldr	r4, [sp, #32]
   18210:	str	r5, [sp, #32]
   18214:	ldr	r3, [sp, #32]
   18218:	mov	r1, r7
   1821c:	eor	r3, r3, #1
   18220:	ldr	r7, [sp, #104]	; 0x68
   18224:	ldr	r6, [sp, #108]	; 0x6c
   18228:	ldr	r8, [sp, #112]	; 0x70
   1822c:	ldr	r5, [sp, #116]	; 0x74
   18230:	uxtb	r3, r3
   18234:	cmp	r1, #1
   18238:	bls	17ef4 <__assert_fail@plt+0x6b68>
   1823c:	ldr	r2, [sp, #56]	; 0x38
   18240:	and	r3, r3, r2
   18244:	uxtb	r3, r3
   18248:	b	17f04 <__assert_fail@plt+0x6b78>
   1824c:	mov	r3, #2
   18250:	str	r3, [sp, #176]	; 0xb0
   18254:	ldr	r2, [sp, #64]	; 0x40
   18258:	ldr	r3, [sp, #56]	; 0x38
   1825c:	mov	sl, r9
   18260:	mov	r9, fp
   18264:	and	r3, r3, r2
   18268:	tst	r3, #255	; 0xff
   1826c:	ldr	r3, [sp, #176]	; 0xb0
   18270:	movne	r3, #4
   18274:	str	r3, [sp, #176]	; 0xb0
   18278:	ldr	r3, [sp, #180]	; 0xb4
   1827c:	mov	ip, #0
   18280:	bic	r3, r3, #2
   18284:	str	r3, [sp, #4]
   18288:	ldr	r3, [sp, #192]	; 0xc0
   1828c:	ldr	r2, [sp, #44]	; 0x2c
   18290:	str	r3, [sp, #16]
   18294:	ldr	r3, [sp, #188]	; 0xbc
   18298:	mov	r1, r9
   1829c:	str	r3, [sp, #12]
   182a0:	ldr	r3, [sp, #176]	; 0xb0
   182a4:	mov	r0, sl
   182a8:	str	r3, [sp]
   182ac:	str	ip, [sp, #8]
   182b0:	ldr	r3, [sp, #24]
   182b4:	bl	17114 <__assert_fail@plt+0x5d88>
   182b8:	mov	fp, r0
   182bc:	mov	r0, fp
   182c0:	add	sp, sp, #140	; 0x8c
   182c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   182c8:	mov	r4, #92	; 0x5c
   182cc:	mov	r1, #0
   182d0:	mov	r3, r4
   182d4:	b	178c8 <__assert_fail@plt+0x653c>
   182d8:	mov	r3, #0
   182dc:	ldr	r1, [sp, #52]	; 0x34
   182e0:	str	r3, [sp, #32]
   182e4:	mov	r4, #63	; 0x3f
   182e8:	b	176e8 <__assert_fail@plt+0x635c>
   182ec:	cmp	fp, #0
   182f0:	beq	1834c <__assert_fail@plt+0x6fc0>
   182f4:	mov	r3, #39	; 0x27
   182f8:	strb	r3, [r9]
   182fc:	mov	r3, #0
   18300:	str	r3, [sp, #40]	; 0x28
   18304:	mov	r3, #1
   18308:	str	r3, [sp, #68]	; 0x44
   1830c:	ldr	r3, [pc, #448]	; 184d4 <__assert_fail@plt+0x7148>
   18310:	mov	r8, #1
   18314:	str	r3, [sp, #72]	; 0x48
   18318:	b	174fc <__assert_fail@plt+0x6170>
   1831c:	ldr	r3, [sp, #40]	; 0x28
   18320:	mov	sl, r9
   18324:	str	r3, [sp, #56]	; 0x38
   18328:	mov	r9, fp
   1832c:	ldr	r2, [sp, #64]	; 0x40
   18330:	b	18264 <__assert_fail@plt+0x6ed8>
   18334:	str	r2, [sp, #36]	; 0x24
   18338:	b	1774c <__assert_fail@plt+0x63c0>
   1833c:	mov	r1, #0
   18340:	str	r3, [sp, #32]
   18344:	mov	r4, #63	; 0x3f
   18348:	b	176e8 <__assert_fail@plt+0x635c>
   1834c:	ldr	r3, [pc, #384]	; 184d4 <__assert_fail@plt+0x7148>
   18350:	str	r3, [sp, #72]	; 0x48
   18354:	mov	r3, #0
   18358:	str	r3, [sp, #40]	; 0x28
   1835c:	mov	r3, #1
   18360:	str	r3, [sp, #68]	; 0x44
   18364:	mov	r8, r3
   18368:	b	174fc <__assert_fail@plt+0x6170>
   1836c:	bl	11344 <abort@plt>
   18370:	cmp	fp, #0
   18374:	beq	183d4 <__assert_fail@plt+0x7048>
   18378:	mov	r2, #1
   1837c:	mov	r3, #34	; 0x22
   18380:	strb	r3, [r9]
   18384:	mov	r8, r2
   18388:	mov	r3, r2
   1838c:	str	r2, [sp, #68]	; 0x44
   18390:	str	r3, [sp, #56]	; 0x38
   18394:	ldr	r3, [pc, #316]	; 184d8 <__assert_fail@plt+0x714c>
   18398:	ldr	r1, [sp, #56]	; 0x38
   1839c:	str	r3, [sp, #72]	; 0x48
   183a0:	ldr	r2, [sp, #176]	; 0xb0
   183a4:	ldr	ip, [sp, #40]	; 0x28
   183a8:	ldr	lr, [sp, #176]	; 0xb0
   183ac:	b	171e0 <__assert_fail@plt+0x5e54>
   183b0:	ldr	r0, [sp, #44]	; 0x2c
   183b4:	bl	1120c <strlen@plt>
   183b8:	str	r0, [sp, #24]
   183bc:	b	180c0 <__assert_fail@plt+0x6d34>
   183c0:	mov	r7, #0
   183c4:	ldr	r1, [sp, #52]	; 0x34
   183c8:	str	r3, [sp, #32]
   183cc:	mov	r4, #48	; 0x30
   183d0:	b	176e8 <__assert_fail@plt+0x635c>
   183d4:	mov	r3, #1
   183d8:	str	r3, [sp, #68]	; 0x44
   183dc:	mov	r8, r3
   183e0:	b	18390 <__assert_fail@plt+0x7004>
   183e4:	mov	r3, #2
   183e8:	mov	sl, r9
   183ec:	str	r3, [sp, #176]	; 0xb0
   183f0:	mov	r9, fp
   183f4:	ldr	r3, [sp, #56]	; 0x38
   183f8:	b	18264 <__assert_fail@plt+0x6ed8>
   183fc:	ldr	r6, [sp, #48]	; 0x30
   18400:	b	17eb0 <__assert_fail@plt+0x6b24>
   18404:	ldr	r0, [sp, #24]
   18408:	mov	ip, r6
   1840c:	cmp	r0, ip
   18410:	mov	r1, r7
   18414:	mov	r2, r4
   18418:	ldr	r7, [sp, #104]	; 0x68
   1841c:	ldr	r4, [sp, #32]
   18420:	ldr	r6, [sp, #108]	; 0x6c
   18424:	ldr	r8, [sp, #112]	; 0x70
   18428:	ldr	r5, [sp, #116]	; 0x74
   1842c:	bls	1845c <__assert_fail@plt+0x70d0>
   18430:	ldrb	r3, [r2]
   18434:	cmp	r3, #0
   18438:	bne	1844c <__assert_fail@plt+0x70c0>
   1843c:	b	1856c <__assert_fail@plt+0x71e0>
   18440:	ldrb	r3, [r2, #1]!
   18444:	cmp	r3, #0
   18448:	beq	1856c <__assert_fail@plt+0x71e0>
   1844c:	add	r1, r1, #1
   18450:	add	r3, sl, r1
   18454:	cmp	r0, r3
   18458:	bhi	18440 <__assert_fail@plt+0x70b4>
   1845c:	mov	r2, #0
   18460:	mov	r3, r7
   18464:	str	r2, [sp, #32]
   18468:	b	18234 <__assert_fail@plt+0x6ea8>
   1846c:	mov	r1, r7
   18470:	ldr	r7, [sp, #104]	; 0x68
   18474:	mov	r2, #0
   18478:	ldr	r4, [sp, #32]
   1847c:	ldr	r6, [sp, #108]	; 0x6c
   18480:	ldr	r8, [sp, #112]	; 0x70
   18484:	ldr	r5, [sp, #116]	; 0x74
   18488:	mov	r3, r7
   1848c:	str	r2, [sp, #32]
   18490:	b	18234 <__assert_fail@plt+0x6ea8>
   18494:	mov	r3, r5
   18498:	eor	r3, r3, #1
   1849c:	ldr	r4, [sp, #32]
   184a0:	mov	r1, r7
   184a4:	str	r5, [sp, #32]
   184a8:	ldr	r7, [sp, #104]	; 0x68
   184ac:	ldr	r6, [sp, #108]	; 0x6c
   184b0:	ldr	r8, [sp, #112]	; 0x70
   184b4:	ldr	r5, [sp, #116]	; 0x74
   184b8:	uxtb	r3, r3
   184bc:	b	18234 <__assert_fail@plt+0x6ea8>
   184c0:	mov	sl, r9
   184c4:	str	r3, [sp, #56]	; 0x38
   184c8:	mov	r9, fp
   184cc:	ldr	r2, [sp, #64]	; 0x40
   184d0:	b	18264 <__assert_fail@plt+0x6ed8>
   184d4:	muleq	r1, r8, lr
   184d8:	muleq	r1, r4, lr
   184dc:	muleq	r1, ip, lr
   184e0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   184e4:	ldr	r2, [sp, #44]	; 0x2c
   184e8:	ldrb	r1, [r2, r3]
   184ec:	sub	r2, r1, #33	; 0x21
   184f0:	uxtb	r2, r2
   184f4:	cmp	r2, #29
   184f8:	bhi	18578 <__assert_fail@plt+0x71ec>
   184fc:	ldr	r0, [pc, #-36]	; 184e0 <__assert_fail@plt+0x7154>
   18500:	mov	ip, #1
   18504:	ands	r2, r0, ip, lsl r2
   18508:	beq	18598 <__assert_fail@plt+0x720c>
   1850c:	ldr	r2, [sp, #40]	; 0x28
   18510:	cmp	r2, #0
   18514:	bne	1868c <__assert_fail@plt+0x7300>
   18518:	add	r2, r8, #1
   1851c:	cmp	fp, r8
   18520:	strbhi	r4, [r9, r8]
   18524:	cmp	fp, r2
   18528:	movhi	r0, #34	; 0x22
   1852c:	strbhi	r0, [r9, r2]
   18530:	add	r2, r8, #2
   18534:	cmp	fp, r2
   18538:	movhi	r0, #34	; 0x22
   1853c:	strbhi	r0, [r9, r2]
   18540:	add	r2, r8, #3
   18544:	cmp	fp, r2
   18548:	mov	sl, r3
   1854c:	ldr	r3, [sp, #40]	; 0x28
   18550:	movhi	r0, #63	; 0x3f
   18554:	mov	r4, r1
   18558:	strbhi	r0, [r9, r2]
   1855c:	add	r8, r8, #4
   18560:	mov	r1, r3
   18564:	str	r3, [sp, #32]
   18568:	b	176e8 <__assert_fail@plt+0x635c>
   1856c:	str	r3, [sp, #32]
   18570:	mov	r3, r7
   18574:	b	18234 <__assert_fail@plt+0x6ea8>
   18578:	mov	r1, #0
   1857c:	str	r1, [sp, #32]
   18580:	b	176e8 <__assert_fail@plt+0x635c>
   18584:	mov	sl, r9
   18588:	ldr	r3, [sp, #56]	; 0x38
   1858c:	mov	r9, fp
   18590:	ldr	r2, [sp, #64]	; 0x40
   18594:	b	18264 <__assert_fail@plt+0x6ed8>
   18598:	str	r2, [sp, #32]
   1859c:	mov	r1, #0
   185a0:	b	176e8 <__assert_fail@plt+0x635c>
   185a4:	ldr	r2, [sp, #76]	; 0x4c
   185a8:	mov	sl, r9
   185ac:	mov	r9, fp
   185b0:	mov	fp, r8
   185b4:	ldr	r1, [sp, #72]	; 0x48
   185b8:	cmp	r1, #0
   185bc:	moveq	r3, #0
   185c0:	andne	r3, r2, #1
   185c4:	cmp	r3, #0
   185c8:	beq	185f4 <__assert_fail@plt+0x7268>
   185cc:	ldrb	r3, [r1]
   185d0:	cmp	r3, #0
   185d4:	beq	185f4 <__assert_fail@plt+0x7268>
   185d8:	mov	r2, r1
   185dc:	cmp	r9, fp
   185e0:	strbhi	r3, [sl, fp]
   185e4:	ldrb	r3, [r2, #1]!
   185e8:	add	fp, fp, #1
   185ec:	cmp	r3, #0
   185f0:	bne	185dc <__assert_fail@plt+0x7250>
   185f4:	cmp	r9, fp
   185f8:	movhi	r3, #0
   185fc:	strbhi	r3, [sl, fp]
   18600:	b	182bc <__assert_fail@plt+0x6f30>
   18604:	ldr	r3, [sp, #192]	; 0xc0
   18608:	mov	ip, #5
   1860c:	str	r3, [sp, #16]
   18610:	ldr	r3, [sp, #188]	; 0xbc
   18614:	ldr	r2, [sp, #44]	; 0x2c
   18618:	str	r3, [sp, #12]
   1861c:	ldr	r3, [sp, #184]	; 0xb8
   18620:	ldr	r1, [sp, #84]	; 0x54
   18624:	str	r3, [sp, #8]
   18628:	ldr	r3, [sp, #180]	; 0xb4
   1862c:	mov	r0, r9
   18630:	str	r3, [sp, #4]
   18634:	str	ip, [sp]
   18638:	ldr	r3, [sp, #24]
   1863c:	bl	17114 <__assert_fail@plt+0x5d88>
   18640:	mov	fp, r0
   18644:	b	182bc <__assert_fail@plt+0x6f30>
   18648:	mov	sl, r9
   1864c:	mov	r9, fp
   18650:	mov	fp, r8
   18654:	b	185b4 <__assert_fail@plt+0x7228>
   18658:	ldr	r1, [sp, #176]	; 0xb0
   1865c:	bl	16ff4 <__assert_fail@plt+0x5c68>
   18660:	str	r0, [sp, #192]	; 0xc0
   18664:	b	175d0 <__assert_fail@plt+0x6244>
   18668:	ldr	r1, [sp, #176]	; 0xb0
   1866c:	bl	16ff4 <__assert_fail@plt+0x5c68>
   18670:	str	r0, [sp, #188]	; 0xbc
   18674:	b	175b0 <__assert_fail@plt+0x6224>
   18678:	mov	sl, r9
   1867c:	mov	r2, r3
   18680:	mov	r9, fp
   18684:	mov	fp, r8
   18688:	b	185b4 <__assert_fail@plt+0x7228>
   1868c:	mov	sl, r9
   18690:	mov	r9, fp
   18694:	b	18278 <__assert_fail@plt+0x6eec>
   18698:	push	{r4, r5, r6, lr}
   1869c:	mov	r5, r0
   186a0:	bl	1123c <__errno_location@plt>
   186a4:	cmp	r5, #0
   186a8:	mov	r1, #48	; 0x30
   186ac:	mov	r4, r0
   186b0:	ldr	r0, [pc, #16]	; 186c8 <__assert_fail@plt+0x733c>
   186b4:	ldr	r6, [r4]
   186b8:	movne	r0, r5
   186bc:	bl	1c61c <__assert_fail@plt+0xb290>
   186c0:	str	r6, [r4]
   186c4:	pop	{r4, r5, r6, pc}
   186c8:	andeq	r0, r3, ip, asr #3
   186cc:	ldr	r3, [pc, #12]	; 186e0 <__assert_fail@plt+0x7354>
   186d0:	cmp	r0, #0
   186d4:	moveq	r0, r3
   186d8:	ldr	r0, [r0]
   186dc:	bx	lr
   186e0:	andeq	r0, r3, ip, asr #3
   186e4:	ldr	r3, [pc, #12]	; 186f8 <__assert_fail@plt+0x736c>
   186e8:	cmp	r0, #0
   186ec:	moveq	r0, r3
   186f0:	str	r1, [r0]
   186f4:	bx	lr
   186f8:	andeq	r0, r3, ip, asr #3
   186fc:	ldr	r3, [pc, #52]	; 18738 <__assert_fail@plt+0x73ac>
   18700:	cmp	r0, #0
   18704:	moveq	r0, r3
   18708:	add	r3, r0, #8
   1870c:	push	{lr}		; (str lr, [sp, #-4]!)
   18710:	lsr	lr, r1, #5
   18714:	and	r1, r1, #31
   18718:	ldr	ip, [r3, lr, lsl #2]
   1871c:	lsr	r0, ip, r1
   18720:	eor	r2, r2, r0
   18724:	and	r2, r2, #1
   18728:	and	r0, r0, #1
   1872c:	eor	r1, ip, r2, lsl r1
   18730:	str	r1, [r3, lr, lsl #2]
   18734:	pop	{pc}		; (ldr pc, [sp], #4)
   18738:	andeq	r0, r3, ip, asr #3
   1873c:	ldr	r3, [pc, #16]	; 18754 <__assert_fail@plt+0x73c8>
   18740:	cmp	r0, #0
   18744:	movne	r3, r0
   18748:	ldr	r0, [r3, #4]
   1874c:	str	r1, [r3, #4]
   18750:	bx	lr
   18754:	andeq	r0, r3, ip, asr #3
   18758:	ldr	r3, [pc, #44]	; 1878c <__assert_fail@plt+0x7400>
   1875c:	cmp	r0, #0
   18760:	moveq	r0, r3
   18764:	mov	ip, #10
   18768:	cmp	r2, #0
   1876c:	cmpne	r1, #0
   18770:	str	ip, [r0]
   18774:	beq	18784 <__assert_fail@plt+0x73f8>
   18778:	str	r1, [r0, #40]	; 0x28
   1877c:	str	r2, [r0, #44]	; 0x2c
   18780:	bx	lr
   18784:	push	{r4, lr}
   18788:	bl	11344 <abort@plt>
   1878c:	andeq	r0, r3, ip, asr #3
   18790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18794:	sub	sp, sp, #24
   18798:	ldr	ip, [pc, #108]	; 1880c <__assert_fail@plt+0x7480>
   1879c:	ldr	r4, [sp, #56]	; 0x38
   187a0:	mov	r9, r2
   187a4:	cmp	r4, #0
   187a8:	moveq	r4, ip
   187ac:	mov	sl, r3
   187b0:	mov	r7, r0
   187b4:	mov	r8, r1
   187b8:	bl	1123c <__errno_location@plt>
   187bc:	ldr	r3, [r4, #44]	; 0x2c
   187c0:	mov	r1, r8
   187c4:	ldr	r6, [r0]
   187c8:	str	r3, [sp, #16]
   187cc:	ldr	r2, [r4, #40]	; 0x28
   187d0:	add	r3, r4, #8
   187d4:	str	r3, [sp, #8]
   187d8:	str	r2, [sp, #12]
   187dc:	ldr	r2, [r4, #4]
   187e0:	mov	r5, r0
   187e4:	str	r2, [sp, #4]
   187e8:	ldr	ip, [r4]
   187ec:	mov	r3, sl
   187f0:	mov	r2, r9
   187f4:	mov	r0, r7
   187f8:	str	ip, [sp]
   187fc:	bl	17114 <__assert_fail@plt+0x5d88>
   18800:	str	r6, [r5]
   18804:	add	sp, sp, #24
   18808:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1880c:	andeq	r0, r3, ip, asr #3
   18810:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18814:	cmp	r2, #0
   18818:	sub	sp, sp, #36	; 0x24
   1881c:	ldr	r4, [pc, #164]	; 188c8 <__assert_fail@plt+0x753c>
   18820:	mov	r8, r1
   18824:	movne	r4, r2
   18828:	mov	r7, r0
   1882c:	bl	1123c <__errno_location@plt>
   18830:	ldr	r3, [r4, #44]	; 0x2c
   18834:	ldr	r5, [r4, #4]
   18838:	add	r9, r4, #8
   1883c:	orr	r5, r5, #1
   18840:	mov	r1, #0
   18844:	mov	r2, r7
   18848:	ldr	fp, [r0]
   1884c:	str	r3, [sp, #16]
   18850:	ldr	r3, [r4, #40]	; 0x28
   18854:	stmib	sp, {r5, r9}
   18858:	str	r3, [sp, #12]
   1885c:	ldr	r3, [r4]
   18860:	mov	r6, r0
   18864:	str	r3, [sp]
   18868:	mov	r0, r1
   1886c:	mov	r3, r8
   18870:	bl	17114 <__assert_fail@plt+0x5d88>
   18874:	add	r1, r0, #1
   18878:	mov	r0, r1
   1887c:	str	r1, [sp, #28]
   18880:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   18884:	ldr	r3, [r4, #44]	; 0x2c
   18888:	ldr	r1, [sp, #28]
   1888c:	str	r3, [sp, #16]
   18890:	ldr	r3, [r4, #40]	; 0x28
   18894:	str	r5, [sp, #4]
   18898:	str	r3, [sp, #12]
   1889c:	str	r9, [sp, #8]
   188a0:	ldr	ip, [r4]
   188a4:	mov	r3, r8
   188a8:	mov	r2, r7
   188ac:	str	ip, [sp]
   188b0:	mov	sl, r0
   188b4:	bl	17114 <__assert_fail@plt+0x5d88>
   188b8:	mov	r0, sl
   188bc:	str	fp, [r6]
   188c0:	add	sp, sp, #36	; 0x24
   188c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188c8:	andeq	r0, r3, ip, asr #3
   188cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188d0:	cmp	r3, #0
   188d4:	sub	sp, sp, #44	; 0x2c
   188d8:	ldr	r4, [pc, #192]	; 189a0 <__assert_fail@plt+0x7614>
   188dc:	mov	r6, r2
   188e0:	movne	r4, r3
   188e4:	mov	r9, r1
   188e8:	mov	r8, r0
   188ec:	bl	1123c <__errno_location@plt>
   188f0:	ldr	r3, [r4, #44]	; 0x2c
   188f4:	ldr	r5, [r4, #4]
   188f8:	add	sl, r4, #8
   188fc:	cmp	r6, #0
   18900:	orreq	r5, r5, #1
   18904:	mov	r1, #0
   18908:	ldr	r2, [r0]
   1890c:	str	r3, [sp, #16]
   18910:	ldr	r3, [r4, #40]	; 0x28
   18914:	stmib	sp, {r5, sl}
   18918:	str	r3, [sp, #12]
   1891c:	ldr	r3, [r4]
   18920:	mov	r7, r0
   18924:	str	r2, [sp, #28]
   18928:	str	r3, [sp]
   1892c:	mov	r2, r8
   18930:	mov	r3, r9
   18934:	mov	r0, r1
   18938:	bl	17114 <__assert_fail@plt+0x5d88>
   1893c:	add	r1, r0, #1
   18940:	mov	fp, r0
   18944:	mov	r0, r1
   18948:	str	r1, [sp, #36]	; 0x24
   1894c:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   18950:	ldr	r3, [r4, #44]	; 0x2c
   18954:	mov	r2, r8
   18958:	str	r3, [sp, #16]
   1895c:	ldr	r3, [r4, #40]	; 0x28
   18960:	str	r5, [sp, #4]
   18964:	str	r3, [sp, #12]
   18968:	str	sl, [sp, #8]
   1896c:	ldr	ip, [r4]
   18970:	ldr	r1, [sp, #36]	; 0x24
   18974:	mov	r3, r9
   18978:	str	ip, [sp]
   1897c:	str	r0, [sp, #32]
   18980:	bl	17114 <__assert_fail@plt+0x5d88>
   18984:	ldr	r2, [sp, #28]
   18988:	cmp	r6, #0
   1898c:	str	r2, [r7]
   18990:	ldr	r0, [sp, #32]
   18994:	strne	fp, [r6]
   18998:	add	sp, sp, #44	; 0x2c
   1899c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189a0:	andeq	r0, r3, ip, asr #3
   189a4:	push	{r4, r5, r6, r7, r8, lr}
   189a8:	ldr	r6, [pc, #116]	; 18a24 <__assert_fail@plt+0x7698>
   189ac:	ldr	r3, [r6, #4]
   189b0:	ldr	r7, [r6]
   189b4:	cmp	r3, #1
   189b8:	movgt	r5, r7
   189bc:	movgt	r4, #1
   189c0:	ble	189e0 <__assert_fail@plt+0x7654>
   189c4:	ldr	r0, [r5, #12]
   189c8:	bl	12dbc <__assert_fail@plt+0x1a30>
   189cc:	ldr	r3, [r6, #4]
   189d0:	add	r4, r4, #1
   189d4:	cmp	r3, r4
   189d8:	add	r5, r5, #8
   189dc:	bgt	189c4 <__assert_fail@plt+0x7638>
   189e0:	ldr	r0, [r7, #4]
   189e4:	ldr	r4, [pc, #60]	; 18a28 <__assert_fail@plt+0x769c>
   189e8:	cmp	r0, r4
   189ec:	beq	18a00 <__assert_fail@plt+0x7674>
   189f0:	bl	12dbc <__assert_fail@plt+0x1a30>
   189f4:	mov	r3, #256	; 0x100
   189f8:	str	r4, [r6, #12]
   189fc:	str	r3, [r6, #8]
   18a00:	ldr	r4, [pc, #36]	; 18a2c <__assert_fail@plt+0x76a0>
   18a04:	cmp	r7, r4
   18a08:	beq	18a18 <__assert_fail@plt+0x768c>
   18a0c:	mov	r0, r7
   18a10:	bl	12dbc <__assert_fail@plt+0x1a30>
   18a14:	str	r4, [r6]
   18a18:	mov	r3, #1
   18a1c:	str	r3, [r6, #4]
   18a20:	pop	{r4, r5, r6, r7, r8, pc}
   18a24:	andeq	r0, r3, r4, asr #2
   18a28:	strdeq	r0, [r3], -ip
   18a2c:	andeq	r0, r3, ip, asr #2
   18a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a34:	sub	sp, sp, #44	; 0x2c
   18a38:	mov	r5, r0
   18a3c:	mov	sl, r1
   18a40:	bl	1123c <__errno_location@plt>
   18a44:	ldr	r4, [pc, #400]	; 18bdc <__assert_fail@plt+0x7850>
   18a48:	cmn	r5, #-2147483647	; 0x80000001
   18a4c:	ldr	r6, [r4]
   18a50:	mov	r8, r0
   18a54:	movne	r0, #0
   18a58:	moveq	r0, #1
   18a5c:	ldr	r3, [r8]
   18a60:	orrs	r0, r0, r5, lsr #31
   18a64:	str	r3, [sp, #24]
   18a68:	bne	18bd8 <__assert_fail@plt+0x784c>
   18a6c:	ldr	r2, [r4, #4]
   18a70:	cmp	r5, r2
   18a74:	blt	18ad4 <__assert_fail@plt+0x7748>
   18a78:	add	r7, r4, #8
   18a7c:	cmp	r6, r7
   18a80:	str	r2, [sp, #36]	; 0x24
   18a84:	beq	18ba8 <__assert_fail@plt+0x781c>
   18a88:	mov	r3, #8
   18a8c:	sub	r2, r5, r2
   18a90:	mov	r0, r6
   18a94:	str	r3, [sp]
   18a98:	add	r2, r2, #1
   18a9c:	mvn	r3, #-2147483648	; 0x80000000
   18aa0:	add	r1, sp, #36	; 0x24
   18aa4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   18aa8:	mov	r6, r0
   18aac:	str	r0, [r4]
   18ab0:	ldr	r0, [r4, #4]
   18ab4:	ldr	r2, [sp, #36]	; 0x24
   18ab8:	mov	r1, #0
   18abc:	sub	r2, r2, r0
   18ac0:	add	r0, r6, r0, lsl #3
   18ac4:	lsl	r2, r2, #3
   18ac8:	bl	11254 <memset@plt>
   18acc:	ldr	r3, [sp, #36]	; 0x24
   18ad0:	str	r3, [r4, #4]
   18ad4:	ldr	r4, [pc, #260]	; 18be0 <__assert_fail@plt+0x7854>
   18ad8:	add	fp, r6, r5, lsl #3
   18adc:	ldr	r9, [r6, r5, lsl #3]
   18ae0:	ldr	r0, [r4, #4]
   18ae4:	ldr	r3, [r4]
   18ae8:	ldr	r7, [fp, #4]
   18aec:	ldr	r1, [r4, #44]	; 0x2c
   18af0:	ldr	r2, [r4, #40]	; 0x28
   18af4:	orr	r0, r0, #1
   18af8:	str	r3, [sp]
   18afc:	add	r3, r4, #8
   18b00:	str	r0, [sp, #28]
   18b04:	str	r0, [sp, #4]
   18b08:	str	r1, [sp, #16]
   18b0c:	str	r2, [sp, #12]
   18b10:	str	r3, [sp, #8]
   18b14:	mov	r0, r7
   18b18:	mov	r1, r9
   18b1c:	mvn	r3, #0
   18b20:	mov	r2, sl
   18b24:	bl	17114 <__assert_fail@plt+0x5d88>
   18b28:	cmp	r9, r0
   18b2c:	bhi	18b94 <__assert_fail@plt+0x7808>
   18b30:	add	r3, r4, #48	; 0x30
   18b34:	add	r9, r0, #1
   18b38:	cmp	r7, r3
   18b3c:	str	r9, [r6, r5, lsl #3]
   18b40:	beq	18b4c <__assert_fail@plt+0x77c0>
   18b44:	mov	r0, r7
   18b48:	bl	12dbc <__assert_fail@plt+0x1a30>
   18b4c:	mov	r0, r9
   18b50:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   18b54:	ldr	ip, [r4, #44]	; 0x2c
   18b58:	ldr	r3, [r4]
   18b5c:	ldr	lr, [r4, #40]	; 0x28
   18b60:	ldr	r4, [pc, #124]	; 18be4 <__assert_fail@plt+0x7858>
   18b64:	mov	r2, sl
   18b68:	mov	r1, r9
   18b6c:	str	r0, [fp, #4]
   18b70:	str	r4, [sp, #8]
   18b74:	ldr	r4, [sp, #28]
   18b78:	str	r3, [sp]
   18b7c:	str	r4, [sp, #4]
   18b80:	str	ip, [sp, #16]
   18b84:	str	lr, [sp, #12]
   18b88:	mvn	r3, #0
   18b8c:	mov	r7, r0
   18b90:	bl	17114 <__assert_fail@plt+0x5d88>
   18b94:	ldr	r3, [sp, #24]
   18b98:	mov	r0, r7
   18b9c:	str	r3, [r8]
   18ba0:	add	sp, sp, #44	; 0x2c
   18ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ba8:	mov	r3, #8
   18bac:	sub	r2, r5, r2
   18bb0:	str	r3, [sp]
   18bb4:	add	r1, sp, #36	; 0x24
   18bb8:	add	r2, r2, #1
   18bbc:	mvn	r3, #-2147483648	; 0x80000000
   18bc0:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   18bc4:	mov	r6, r0
   18bc8:	ldm	r7, {r0, r1}
   18bcc:	str	r6, [r4]
   18bd0:	stm	r6, {r0, r1}
   18bd4:	b	18ab0 <__assert_fail@plt+0x7724>
   18bd8:	bl	11344 <abort@plt>
   18bdc:	andeq	r0, r3, r4, asr #2
   18be0:	andeq	r0, r3, ip, asr #3
   18be4:	ldrdeq	r0, [r3], -r4
   18be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bec:	sub	sp, sp, #52	; 0x34
   18bf0:	mov	r5, r0
   18bf4:	mov	sl, r1
   18bf8:	mov	fp, r2
   18bfc:	bl	1123c <__errno_location@plt>
   18c00:	ldr	r4, [pc, #408]	; 18da0 <__assert_fail@plt+0x7a14>
   18c04:	cmn	r5, #-2147483647	; 0x80000001
   18c08:	ldr	r6, [r4]
   18c0c:	mov	r8, r0
   18c10:	movne	r0, #0
   18c14:	moveq	r0, #1
   18c18:	ldr	r3, [r8]
   18c1c:	orrs	r0, r0, r5, lsr #31
   18c20:	str	r3, [sp, #28]
   18c24:	bne	18d9c <__assert_fail@plt+0x7a10>
   18c28:	ldr	r2, [r4, #4]
   18c2c:	cmp	r5, r2
   18c30:	blt	18c90 <__assert_fail@plt+0x7904>
   18c34:	add	r7, r4, #8
   18c38:	cmp	r6, r7
   18c3c:	str	r2, [sp, #44]	; 0x2c
   18c40:	beq	18d6c <__assert_fail@plt+0x79e0>
   18c44:	mov	r3, #8
   18c48:	sub	r2, r5, r2
   18c4c:	mov	r0, r6
   18c50:	str	r3, [sp]
   18c54:	add	r2, r2, #1
   18c58:	mvn	r3, #-2147483648	; 0x80000000
   18c5c:	add	r1, sp, #44	; 0x2c
   18c60:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   18c64:	mov	r6, r0
   18c68:	str	r0, [r4]
   18c6c:	ldr	r0, [r4, #4]
   18c70:	ldr	r2, [sp, #44]	; 0x2c
   18c74:	mov	r1, #0
   18c78:	sub	r2, r2, r0
   18c7c:	add	r0, r6, r0, lsl #3
   18c80:	lsl	r2, r2, #3
   18c84:	bl	11254 <memset@plt>
   18c88:	ldr	r3, [sp, #44]	; 0x2c
   18c8c:	str	r3, [r4, #4]
   18c90:	ldr	r4, [pc, #268]	; 18da4 <__assert_fail@plt+0x7a18>
   18c94:	add	r3, r6, r5, lsl #3
   18c98:	str	r3, [sp, #32]
   18c9c:	ldr	r7, [r3, #4]
   18ca0:	ldr	r0, [r4, #4]
   18ca4:	ldr	r3, [r4]
   18ca8:	ldr	r9, [r6, r5, lsl #3]
   18cac:	ldr	r1, [r4, #44]	; 0x2c
   18cb0:	ldr	r2, [r4, #40]	; 0x28
   18cb4:	orr	r0, r0, #1
   18cb8:	str	r3, [sp]
   18cbc:	add	r3, r4, #8
   18cc0:	str	r0, [sp, #36]	; 0x24
   18cc4:	str	r0, [sp, #4]
   18cc8:	str	r1, [sp, #16]
   18ccc:	str	r2, [sp, #12]
   18cd0:	str	r3, [sp, #8]
   18cd4:	mov	r0, r7
   18cd8:	mov	r1, r9
   18cdc:	mov	r3, fp
   18ce0:	mov	r2, sl
   18ce4:	bl	17114 <__assert_fail@plt+0x5d88>
   18ce8:	cmp	r9, r0
   18cec:	bhi	18d58 <__assert_fail@plt+0x79cc>
   18cf0:	add	r3, r4, #48	; 0x30
   18cf4:	add	r9, r0, #1
   18cf8:	cmp	r7, r3
   18cfc:	str	r9, [r6, r5, lsl #3]
   18d00:	beq	18d0c <__assert_fail@plt+0x7980>
   18d04:	mov	r0, r7
   18d08:	bl	12dbc <__assert_fail@plt+0x1a30>
   18d0c:	mov	r0, r9
   18d10:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   18d14:	ldr	ip, [sp, #32]
   18d18:	ldr	lr, [r4, #44]	; 0x2c
   18d1c:	ldr	r5, [r4, #40]	; 0x28
   18d20:	mov	r3, fp
   18d24:	mov	r2, sl
   18d28:	mov	r1, r9
   18d2c:	str	r0, [ip, #4]
   18d30:	ldr	ip, [r4]
   18d34:	ldr	r4, [pc, #108]	; 18da8 <__assert_fail@plt+0x7a1c>
   18d38:	str	lr, [sp, #16]
   18d3c:	str	r4, [sp, #8]
   18d40:	ldr	r4, [sp, #36]	; 0x24
   18d44:	str	r5, [sp, #12]
   18d48:	str	r4, [sp, #4]
   18d4c:	str	ip, [sp]
   18d50:	mov	r7, r0
   18d54:	bl	17114 <__assert_fail@plt+0x5d88>
   18d58:	ldr	r3, [sp, #28]
   18d5c:	mov	r0, r7
   18d60:	str	r3, [r8]
   18d64:	add	sp, sp, #52	; 0x34
   18d68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d6c:	mov	r3, #8
   18d70:	sub	r2, r5, r2
   18d74:	str	r3, [sp]
   18d78:	add	r1, sp, #44	; 0x2c
   18d7c:	add	r2, r2, #1
   18d80:	mvn	r3, #-2147483648	; 0x80000000
   18d84:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   18d88:	mov	r6, r0
   18d8c:	ldm	r7, {r0, r1}
   18d90:	str	r6, [r4]
   18d94:	stm	r6, {r0, r1}
   18d98:	b	18c6c <__assert_fail@plt+0x78e0>
   18d9c:	bl	11344 <abort@plt>
   18da0:	andeq	r0, r3, r4, asr #2
   18da4:	andeq	r0, r3, ip, asr #3
   18da8:	ldrdeq	r0, [r3], -r4
   18dac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18db0:	sub	sp, sp, #44	; 0x2c
   18db4:	mov	sl, r0
   18db8:	bl	1123c <__errno_location@plt>
   18dbc:	ldr	r4, [pc, #352]	; 18f24 <__assert_fail@plt+0x7b98>
   18dc0:	ldr	r2, [r4, #4]
   18dc4:	ldr	r5, [r4]
   18dc8:	cmp	r2, #0
   18dcc:	ldr	r3, [r0]
   18dd0:	mov	r8, r0
   18dd4:	str	r3, [sp, #28]
   18dd8:	bgt	18e34 <__assert_fail@plt+0x7aa8>
   18ddc:	add	r6, r4, #8
   18de0:	cmp	r5, r6
   18de4:	str	r2, [sp, #36]	; 0x24
   18de8:	beq	18ef4 <__assert_fail@plt+0x7b68>
   18dec:	mov	r3, #8
   18df0:	mov	r0, r5
   18df4:	str	r3, [sp]
   18df8:	rsb	r2, r2, #1
   18dfc:	mvn	r3, #-2147483648	; 0x80000000
   18e00:	add	r1, sp, #36	; 0x24
   18e04:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   18e08:	mov	r5, r0
   18e0c:	str	r0, [r4]
   18e10:	ldr	r0, [r4, #4]
   18e14:	ldr	r2, [sp, #36]	; 0x24
   18e18:	mov	r1, #0
   18e1c:	sub	r2, r2, r0
   18e20:	add	r0, r5, r0, lsl #3
   18e24:	lsl	r2, r2, #3
   18e28:	bl	11254 <memset@plt>
   18e2c:	ldr	r3, [sp, #36]	; 0x24
   18e30:	str	r3, [r4, #4]
   18e34:	ldr	r4, [pc, #236]	; 18f28 <__assert_fail@plt+0x7b9c>
   18e38:	ldr	r9, [r5]
   18e3c:	ldr	r6, [r5, #4]
   18e40:	ldr	r7, [r4, #4]
   18e44:	ldr	r1, [r4, #44]	; 0x2c
   18e48:	ldr	r2, [r4, #40]	; 0x28
   18e4c:	ldr	r3, [r4]
   18e50:	orr	r7, r7, #1
   18e54:	add	fp, r4, #8
   18e58:	str	r1, [sp, #16]
   18e5c:	str	r2, [sp, #12]
   18e60:	str	r3, [sp]
   18e64:	str	r7, [sp, #4]
   18e68:	str	fp, [sp, #8]
   18e6c:	mov	r1, r9
   18e70:	mov	r0, r6
   18e74:	mvn	r3, #0
   18e78:	mov	r2, sl
   18e7c:	bl	17114 <__assert_fail@plt+0x5d88>
   18e80:	cmp	r9, r0
   18e84:	bhi	18ee0 <__assert_fail@plt+0x7b54>
   18e88:	add	r3, r4, #48	; 0x30
   18e8c:	add	r9, r0, #1
   18e90:	cmp	r6, r3
   18e94:	str	r9, [r5]
   18e98:	beq	18ea4 <__assert_fail@plt+0x7b18>
   18e9c:	mov	r0, r6
   18ea0:	bl	12dbc <__assert_fail@plt+0x1a30>
   18ea4:	mov	r0, r9
   18ea8:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   18eac:	ldr	ip, [r4, #44]	; 0x2c
   18eb0:	ldr	r3, [r4]
   18eb4:	ldr	lr, [r4, #40]	; 0x28
   18eb8:	mov	r2, sl
   18ebc:	mov	r1, r9
   18ec0:	str	r0, [r5, #4]
   18ec4:	str	r3, [sp]
   18ec8:	stmib	sp, {r7, fp}
   18ecc:	str	ip, [sp, #16]
   18ed0:	str	lr, [sp, #12]
   18ed4:	mvn	r3, #0
   18ed8:	mov	r6, r0
   18edc:	bl	17114 <__assert_fail@plt+0x5d88>
   18ee0:	ldr	r3, [sp, #28]
   18ee4:	mov	r0, r6
   18ee8:	str	r3, [r8]
   18eec:	add	sp, sp, #44	; 0x2c
   18ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ef4:	mov	r3, #8
   18ef8:	str	r3, [sp]
   18efc:	add	r1, sp, #36	; 0x24
   18f00:	rsb	r2, r2, #1
   18f04:	mvn	r3, #-2147483648	; 0x80000000
   18f08:	mov	r0, #0
   18f0c:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   18f10:	mov	r5, r0
   18f14:	ldm	r6, {r0, r1}
   18f18:	str	r5, [r4]
   18f1c:	stm	r5, {r0, r1}
   18f20:	b	18e10 <__assert_fail@plt+0x7a84>
   18f24:	andeq	r0, r3, r4, asr #2
   18f28:	andeq	r0, r3, ip, asr #3
   18f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f30:	sub	sp, sp, #44	; 0x2c
   18f34:	mov	r9, r0
   18f38:	mov	sl, r1
   18f3c:	bl	1123c <__errno_location@plt>
   18f40:	ldr	r4, [pc, #364]	; 190b4 <__assert_fail@plt+0x7d28>
   18f44:	ldr	r2, [r4, #4]
   18f48:	ldr	r5, [r4]
   18f4c:	cmp	r2, #0
   18f50:	ldr	r3, [r0]
   18f54:	mov	r7, r0
   18f58:	str	r3, [sp, #24]
   18f5c:	bgt	18fb8 <__assert_fail@plt+0x7c2c>
   18f60:	add	r6, r4, #8
   18f64:	cmp	r5, r6
   18f68:	str	r2, [sp, #36]	; 0x24
   18f6c:	beq	19084 <__assert_fail@plt+0x7cf8>
   18f70:	mov	r3, #8
   18f74:	mov	r0, r5
   18f78:	str	r3, [sp]
   18f7c:	rsb	r2, r2, #1
   18f80:	mvn	r3, #-2147483648	; 0x80000000
   18f84:	add	r1, sp, #36	; 0x24
   18f88:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   18f8c:	mov	r5, r0
   18f90:	str	r0, [r4]
   18f94:	ldr	r0, [r4, #4]
   18f98:	ldr	r2, [sp, #36]	; 0x24
   18f9c:	mov	r1, #0
   18fa0:	sub	r2, r2, r0
   18fa4:	add	r0, r5, r0, lsl #3
   18fa8:	lsl	r2, r2, #3
   18fac:	bl	11254 <memset@plt>
   18fb0:	ldr	r3, [sp, #36]	; 0x24
   18fb4:	str	r3, [r4, #4]
   18fb8:	ldr	r4, [pc, #248]	; 190b8 <__assert_fail@plt+0x7d2c>
   18fbc:	ldr	r8, [r5]
   18fc0:	ldr	r6, [r5, #4]
   18fc4:	ldr	r0, [r4, #4]
   18fc8:	ldr	r1, [r4, #44]	; 0x2c
   18fcc:	ldr	r2, [r4, #40]	; 0x28
   18fd0:	ldr	r3, [r4]
   18fd4:	orr	r0, r0, #1
   18fd8:	add	fp, r4, #8
   18fdc:	str	r0, [sp, #28]
   18fe0:	str	r0, [sp, #4]
   18fe4:	str	r1, [sp, #16]
   18fe8:	str	r2, [sp, #12]
   18fec:	str	r3, [sp]
   18ff0:	str	fp, [sp, #8]
   18ff4:	mov	r1, r8
   18ff8:	mov	r0, r6
   18ffc:	mov	r3, sl
   19000:	mov	r2, r9
   19004:	bl	17114 <__assert_fail@plt+0x5d88>
   19008:	cmp	r8, r0
   1900c:	bhi	19070 <__assert_fail@plt+0x7ce4>
   19010:	add	r3, r4, #48	; 0x30
   19014:	add	r8, r0, #1
   19018:	cmp	r6, r3
   1901c:	str	r8, [r5]
   19020:	beq	1902c <__assert_fail@plt+0x7ca0>
   19024:	mov	r0, r6
   19028:	bl	12dbc <__assert_fail@plt+0x1a30>
   1902c:	mov	r0, r8
   19030:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   19034:	ldr	lr, [r4, #44]	; 0x2c
   19038:	ldr	ip, [r4]
   1903c:	mov	r3, sl
   19040:	mov	r2, r9
   19044:	mov	r1, r8
   19048:	str	r0, [r5, #4]
   1904c:	ldr	r5, [r4, #40]	; 0x28
   19050:	ldr	r4, [sp, #28]
   19054:	str	fp, [sp, #8]
   19058:	str	r4, [sp, #4]
   1905c:	str	lr, [sp, #16]
   19060:	str	r5, [sp, #12]
   19064:	str	ip, [sp]
   19068:	mov	r6, r0
   1906c:	bl	17114 <__assert_fail@plt+0x5d88>
   19070:	ldr	r3, [sp, #24]
   19074:	mov	r0, r6
   19078:	str	r3, [r7]
   1907c:	add	sp, sp, #44	; 0x2c
   19080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19084:	mov	r3, #8
   19088:	str	r3, [sp]
   1908c:	add	r1, sp, #36	; 0x24
   19090:	rsb	r2, r2, #1
   19094:	mvn	r3, #-2147483648	; 0x80000000
   19098:	mov	r0, #0
   1909c:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   190a0:	mov	r5, r0
   190a4:	ldm	r6, {r0, r1}
   190a8:	str	r5, [r4]
   190ac:	stm	r5, {r0, r1}
   190b0:	b	18f94 <__assert_fail@plt+0x7c08>
   190b4:	andeq	r0, r3, r4, asr #2
   190b8:	andeq	r0, r3, ip, asr #3
   190bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190c0:	sub	sp, sp, #132	; 0x84
   190c4:	mov	r5, r1
   190c8:	mov	r4, r0
   190cc:	mov	r9, r2
   190d0:	add	r0, sp, #80	; 0x50
   190d4:	mov	r2, #48	; 0x30
   190d8:	mov	r1, #0
   190dc:	bl	11254 <memset@plt>
   190e0:	cmp	r5, #10
   190e4:	beq	1929c <__assert_fail@plt+0x7f10>
   190e8:	add	lr, sp, #80	; 0x50
   190ec:	str	r5, [sp, #80]	; 0x50
   190f0:	ldm	lr!, {r0, r1, r2, r3}
   190f4:	add	ip, sp, #32
   190f8:	ldr	r6, [pc, #416]	; 192a0 <__assert_fail@plt+0x7f14>
   190fc:	stmia	ip!, {r0, r1, r2, r3}
   19100:	ldm	lr!, {r0, r1, r2, r3}
   19104:	stmia	ip!, {r0, r1, r2, r3}
   19108:	ldm	lr, {r0, r1, r2, r3}
   1910c:	stm	ip, {r0, r1, r2, r3}
   19110:	bl	1123c <__errno_location@plt>
   19114:	cmn	r4, #-2147483647	; 0x80000001
   19118:	ldr	r5, [r6]
   1911c:	mov	r7, r0
   19120:	movne	r0, #0
   19124:	moveq	r0, #1
   19128:	ldr	r3, [r7]
   1912c:	orrs	r0, r0, r4, lsr #31
   19130:	str	r3, [sp, #24]
   19134:	bne	1929c <__assert_fail@plt+0x7f10>
   19138:	ldr	r2, [r6, #4]
   1913c:	cmp	r4, r2
   19140:	blt	191a0 <__assert_fail@plt+0x7e14>
   19144:	add	r8, r6, #8
   19148:	cmp	r5, r8
   1914c:	str	r2, [sp, #80]	; 0x50
   19150:	beq	1926c <__assert_fail@plt+0x7ee0>
   19154:	mov	r3, #8
   19158:	sub	r2, r4, r2
   1915c:	mov	r0, r5
   19160:	str	r3, [sp]
   19164:	add	r2, r2, #1
   19168:	add	r1, sp, #80	; 0x50
   1916c:	mvn	r3, #-2147483648	; 0x80000000
   19170:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19174:	mov	r5, r0
   19178:	str	r0, [r6]
   1917c:	ldr	r0, [r6, #4]
   19180:	ldr	r2, [sp, #80]	; 0x50
   19184:	mov	r1, #0
   19188:	sub	r2, r2, r0
   1918c:	add	r0, r5, r0, lsl #3
   19190:	lsl	r2, r2, #3
   19194:	bl	11254 <memset@plt>
   19198:	ldr	r3, [sp, #80]	; 0x50
   1919c:	str	r3, [r6, #4]
   191a0:	add	fp, r5, r4, lsl #3
   191a4:	ldr	r1, [sp, #36]	; 0x24
   191a8:	ldr	r8, [r5, r4, lsl #3]
   191ac:	ldr	r6, [fp, #4]
   191b0:	ldr	r2, [sp, #72]	; 0x48
   191b4:	ldr	r3, [sp, #32]
   191b8:	ldr	ip, [sp, #76]	; 0x4c
   191bc:	orr	r1, r1, #1
   191c0:	add	sl, sp, #40	; 0x28
   191c4:	str	r1, [sp, #28]
   191c8:	str	r1, [sp, #4]
   191cc:	str	r2, [sp, #12]
   191d0:	str	r3, [sp]
   191d4:	mov	r0, r6
   191d8:	mov	r1, r8
   191dc:	str	ip, [sp, #16]
   191e0:	str	sl, [sp, #8]
   191e4:	mvn	r3, #0
   191e8:	mov	r2, r9
   191ec:	bl	17114 <__assert_fail@plt+0x5d88>
   191f0:	cmp	r8, r0
   191f4:	bhi	19258 <__assert_fail@plt+0x7ecc>
   191f8:	ldr	r3, [pc, #164]	; 192a4 <__assert_fail@plt+0x7f18>
   191fc:	add	r8, r0, #1
   19200:	cmp	r6, r3
   19204:	str	r8, [r5, r4, lsl #3]
   19208:	beq	19214 <__assert_fail@plt+0x7e88>
   1920c:	mov	r0, r6
   19210:	bl	12dbc <__assert_fail@plt+0x1a30>
   19214:	mov	r0, r8
   19218:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1921c:	ldr	lr, [sp, #76]	; 0x4c
   19220:	ldr	r3, [sp, #32]
   19224:	ldr	ip, [sp, #72]	; 0x48
   19228:	ldr	r4, [sp, #28]
   1922c:	mov	r2, r9
   19230:	mov	r1, r8
   19234:	str	r0, [fp, #4]
   19238:	str	r3, [sp]
   1923c:	str	sl, [sp, #8]
   19240:	str	r4, [sp, #4]
   19244:	str	lr, [sp, #16]
   19248:	str	ip, [sp, #12]
   1924c:	mvn	r3, #0
   19250:	mov	r6, r0
   19254:	bl	17114 <__assert_fail@plt+0x5d88>
   19258:	ldr	r3, [sp, #24]
   1925c:	mov	r0, r6
   19260:	str	r3, [r7]
   19264:	add	sp, sp, #132	; 0x84
   19268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1926c:	mov	r3, #8
   19270:	sub	r2, r4, r2
   19274:	add	r1, sp, #80	; 0x50
   19278:	str	r3, [sp]
   1927c:	add	r2, r2, #1
   19280:	mvn	r3, #-2147483648	; 0x80000000
   19284:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19288:	mov	r5, r0
   1928c:	ldm	r8, {r0, r1}
   19290:	str	r5, [r6]
   19294:	stm	r5, {r0, r1}
   19298:	b	1917c <__assert_fail@plt+0x7df0>
   1929c:	bl	11344 <abort@plt>
   192a0:	andeq	r0, r3, r4, asr #2
   192a4:	strdeq	r0, [r3], -ip
   192a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192ac:	sub	sp, sp, #132	; 0x84
   192b0:	mov	r5, r1
   192b4:	mov	r4, r0
   192b8:	mov	r9, r2
   192bc:	add	r0, sp, #80	; 0x50
   192c0:	mov	r2, #48	; 0x30
   192c4:	mov	r1, #0
   192c8:	mov	sl, r3
   192cc:	bl	11254 <memset@plt>
   192d0:	cmp	r5, #10
   192d4:	beq	19490 <__assert_fail@plt+0x8104>
   192d8:	add	lr, sp, #80	; 0x50
   192dc:	str	r5, [sp, #80]	; 0x50
   192e0:	ldm	lr!, {r0, r1, r2, r3}
   192e4:	add	ip, sp, #32
   192e8:	ldr	r6, [pc, #420]	; 19494 <__assert_fail@plt+0x8108>
   192ec:	stmia	ip!, {r0, r1, r2, r3}
   192f0:	ldm	lr!, {r0, r1, r2, r3}
   192f4:	stmia	ip!, {r0, r1, r2, r3}
   192f8:	ldm	lr, {r0, r1, r2, r3}
   192fc:	stm	ip, {r0, r1, r2, r3}
   19300:	bl	1123c <__errno_location@plt>
   19304:	cmn	r4, #-2147483647	; 0x80000001
   19308:	ldr	r5, [r6]
   1930c:	mov	r7, r0
   19310:	movne	r0, #0
   19314:	moveq	r0, #1
   19318:	ldr	r3, [r7]
   1931c:	orrs	r0, r0, r4, lsr #31
   19320:	str	r3, [sp, #24]
   19324:	bne	19490 <__assert_fail@plt+0x8104>
   19328:	ldr	r2, [r6, #4]
   1932c:	cmp	r4, r2
   19330:	blt	19390 <__assert_fail@plt+0x8004>
   19334:	add	r8, r6, #8
   19338:	cmp	r5, r8
   1933c:	str	r2, [sp, #80]	; 0x50
   19340:	beq	19460 <__assert_fail@plt+0x80d4>
   19344:	mov	r3, #8
   19348:	sub	r2, r4, r2
   1934c:	mov	r0, r5
   19350:	str	r3, [sp]
   19354:	add	r2, r2, #1
   19358:	add	r1, sp, #80	; 0x50
   1935c:	mvn	r3, #-2147483648	; 0x80000000
   19360:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19364:	mov	r5, r0
   19368:	str	r0, [r6]
   1936c:	ldr	r0, [r6, #4]
   19370:	ldr	r2, [sp, #80]	; 0x50
   19374:	mov	r1, #0
   19378:	sub	r2, r2, r0
   1937c:	add	r0, r5, r0, lsl #3
   19380:	lsl	r2, r2, #3
   19384:	bl	11254 <memset@plt>
   19388:	ldr	r3, [sp, #80]	; 0x50
   1938c:	str	r3, [r6, #4]
   19390:	add	fp, r5, r4, lsl #3
   19394:	ldr	r3, [sp, #32]
   19398:	ldr	r1, [sp, #36]	; 0x24
   1939c:	ldr	r8, [r5, r4, lsl #3]
   193a0:	ldr	r6, [fp, #4]
   193a4:	ldr	r2, [sp, #72]	; 0x48
   193a8:	ldr	ip, [sp, #76]	; 0x4c
   193ac:	orr	r1, r1, #1
   193b0:	str	r3, [sp]
   193b4:	add	r3, sp, #40	; 0x28
   193b8:	str	r1, [sp, #28]
   193bc:	str	r1, [sp, #4]
   193c0:	str	r2, [sp, #12]
   193c4:	str	r3, [sp, #8]
   193c8:	mov	r0, r6
   193cc:	mov	r1, r8
   193d0:	str	ip, [sp, #16]
   193d4:	mov	r3, sl
   193d8:	mov	r2, r9
   193dc:	bl	17114 <__assert_fail@plt+0x5d88>
   193e0:	cmp	r8, r0
   193e4:	bhi	1944c <__assert_fail@plt+0x80c0>
   193e8:	ldr	r3, [pc, #168]	; 19498 <__assert_fail@plt+0x810c>
   193ec:	add	r8, r0, #1
   193f0:	cmp	r6, r3
   193f4:	str	r8, [r5, r4, lsl #3]
   193f8:	beq	19404 <__assert_fail@plt+0x8078>
   193fc:	mov	r0, r6
   19400:	bl	12dbc <__assert_fail@plt+0x1a30>
   19404:	mov	r0, r8
   19408:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1940c:	add	lr, sp, #40	; 0x28
   19410:	ldr	ip, [sp, #76]	; 0x4c
   19414:	ldr	r4, [sp, #72]	; 0x48
   19418:	ldr	r5, [sp, #28]
   1941c:	mov	r3, sl
   19420:	mov	r2, r9
   19424:	mov	r1, r8
   19428:	str	r0, [fp, #4]
   1942c:	str	lr, [sp, #8]
   19430:	ldr	lr, [sp, #32]
   19434:	str	r5, [sp, #4]
   19438:	str	ip, [sp, #16]
   1943c:	str	r4, [sp, #12]
   19440:	str	lr, [sp]
   19444:	mov	r6, r0
   19448:	bl	17114 <__assert_fail@plt+0x5d88>
   1944c:	ldr	r3, [sp, #24]
   19450:	mov	r0, r6
   19454:	str	r3, [r7]
   19458:	add	sp, sp, #132	; 0x84
   1945c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19460:	mov	r3, #8
   19464:	sub	r2, r4, r2
   19468:	add	r1, sp, #80	; 0x50
   1946c:	str	r3, [sp]
   19470:	add	r2, r2, #1
   19474:	mvn	r3, #-2147483648	; 0x80000000
   19478:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1947c:	mov	r5, r0
   19480:	ldm	r8, {r0, r1}
   19484:	str	r5, [r6]
   19488:	stm	r5, {r0, r1}
   1948c:	b	1936c <__assert_fail@plt+0x7fe0>
   19490:	bl	11344 <abort@plt>
   19494:	andeq	r0, r3, r4, asr #2
   19498:	strdeq	r0, [r3], -ip
   1949c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194a0:	sub	sp, sp, #124	; 0x7c
   194a4:	mov	r4, r0
   194a8:	mov	r9, r1
   194ac:	add	r0, sp, #72	; 0x48
   194b0:	mov	r2, #48	; 0x30
   194b4:	mov	r1, #0
   194b8:	bl	11254 <memset@plt>
   194bc:	cmp	r4, #10
   194c0:	beq	1964c <__assert_fail@plt+0x82c0>
   194c4:	add	lr, sp, #72	; 0x48
   194c8:	str	r4, [sp, #72]	; 0x48
   194cc:	ldm	lr!, {r0, r1, r2, r3}
   194d0:	add	ip, sp, #24
   194d4:	ldr	r5, [pc, #372]	; 19650 <__assert_fail@plt+0x82c4>
   194d8:	stmia	ip!, {r0, r1, r2, r3}
   194dc:	ldm	lr!, {r0, r1, r2, r3}
   194e0:	stmia	ip!, {r0, r1, r2, r3}
   194e4:	ldm	lr, {r0, r1, r2, r3}
   194e8:	stm	ip, {r0, r1, r2, r3}
   194ec:	bl	1123c <__errno_location@plt>
   194f0:	ldr	r2, [r5, #4]
   194f4:	ldr	r4, [r5]
   194f8:	cmp	r2, #0
   194fc:	mov	r7, r0
   19500:	ldr	fp, [r0]
   19504:	bgt	19560 <__assert_fail@plt+0x81d4>
   19508:	add	r6, r5, #8
   1950c:	cmp	r4, r6
   19510:	str	r2, [sp, #72]	; 0x48
   19514:	beq	1961c <__assert_fail@plt+0x8290>
   19518:	mov	r3, #8
   1951c:	mov	r0, r4
   19520:	str	r3, [sp]
   19524:	rsb	r2, r2, #1
   19528:	add	r1, sp, #72	; 0x48
   1952c:	mvn	r3, #-2147483648	; 0x80000000
   19530:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19534:	mov	r4, r0
   19538:	str	r0, [r5]
   1953c:	ldr	r0, [r5, #4]
   19540:	ldr	r2, [sp, #72]	; 0x48
   19544:	mov	r1, #0
   19548:	sub	r2, r2, r0
   1954c:	add	r0, r4, r0, lsl #3
   19550:	lsl	r2, r2, #3
   19554:	bl	11254 <memset@plt>
   19558:	ldr	r3, [sp, #72]	; 0x48
   1955c:	str	r3, [r5, #4]
   19560:	ldr	r6, [sp, #28]
   19564:	ldr	r8, [r4]
   19568:	ldr	r5, [r4, #4]
   1956c:	ldr	r2, [sp, #64]	; 0x40
   19570:	ldr	r3, [sp, #24]
   19574:	ldr	ip, [sp, #68]	; 0x44
   19578:	orr	r6, r6, #1
   1957c:	add	sl, sp, #32
   19580:	str	r2, [sp, #12]
   19584:	str	r3, [sp]
   19588:	str	r6, [sp, #4]
   1958c:	mov	r1, r8
   19590:	mov	r0, r5
   19594:	str	ip, [sp, #16]
   19598:	str	sl, [sp, #8]
   1959c:	mvn	r3, #0
   195a0:	mov	r2, r9
   195a4:	bl	17114 <__assert_fail@plt+0x5d88>
   195a8:	cmp	r8, r0
   195ac:	bhi	1960c <__assert_fail@plt+0x8280>
   195b0:	ldr	r3, [pc, #156]	; 19654 <__assert_fail@plt+0x82c8>
   195b4:	add	r8, r0, #1
   195b8:	cmp	r5, r3
   195bc:	str	r8, [r4]
   195c0:	beq	195cc <__assert_fail@plt+0x8240>
   195c4:	mov	r0, r5
   195c8:	bl	12dbc <__assert_fail@plt+0x1a30>
   195cc:	mov	r0, r8
   195d0:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   195d4:	ldr	lr, [sp, #68]	; 0x44
   195d8:	ldr	r3, [sp, #24]
   195dc:	ldr	ip, [sp, #64]	; 0x40
   195e0:	mov	r2, r9
   195e4:	mov	r1, r8
   195e8:	str	r0, [r4, #4]
   195ec:	str	r3, [sp]
   195f0:	str	sl, [sp, #8]
   195f4:	str	r6, [sp, #4]
   195f8:	str	lr, [sp, #16]
   195fc:	str	ip, [sp, #12]
   19600:	mvn	r3, #0
   19604:	mov	r5, r0
   19608:	bl	17114 <__assert_fail@plt+0x5d88>
   1960c:	mov	r0, r5
   19610:	str	fp, [r7]
   19614:	add	sp, sp, #124	; 0x7c
   19618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1961c:	mov	r3, #8
   19620:	add	r1, sp, #72	; 0x48
   19624:	str	r3, [sp]
   19628:	rsb	r2, r2, #1
   1962c:	mvn	r3, #-2147483648	; 0x80000000
   19630:	mov	r0, #0
   19634:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19638:	mov	r4, r0
   1963c:	ldm	r6, {r0, r1}
   19640:	str	r4, [r5]
   19644:	stm	r4, {r0, r1}
   19648:	b	1953c <__assert_fail@plt+0x81b0>
   1964c:	bl	11344 <abort@plt>
   19650:	andeq	r0, r3, r4, asr #2
   19654:	strdeq	r0, [r3], -ip
   19658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1965c:	sub	sp, sp, #132	; 0x84
   19660:	mov	r4, r0
   19664:	mov	r9, r1
   19668:	mov	sl, r2
   1966c:	add	r0, sp, #80	; 0x50
   19670:	mov	r2, #48	; 0x30
   19674:	mov	r1, #0
   19678:	bl	11254 <memset@plt>
   1967c:	cmp	r4, #10
   19680:	beq	19814 <__assert_fail@plt+0x8488>
   19684:	add	lr, sp, #80	; 0x50
   19688:	str	r4, [sp, #80]	; 0x50
   1968c:	ldm	lr!, {r0, r1, r2, r3}
   19690:	add	ip, sp, #32
   19694:	ldr	r5, [pc, #380]	; 19818 <__assert_fail@plt+0x848c>
   19698:	stmia	ip!, {r0, r1, r2, r3}
   1969c:	ldm	lr!, {r0, r1, r2, r3}
   196a0:	stmia	ip!, {r0, r1, r2, r3}
   196a4:	ldm	lr, {r0, r1, r2, r3}
   196a8:	stm	ip, {r0, r1, r2, r3}
   196ac:	bl	1123c <__errno_location@plt>
   196b0:	ldr	r2, [r5, #4]
   196b4:	ldr	r4, [r5]
   196b8:	cmp	r2, #0
   196bc:	ldr	r3, [r0]
   196c0:	mov	r7, r0
   196c4:	str	r3, [sp, #28]
   196c8:	bgt	19724 <__assert_fail@plt+0x8398>
   196cc:	add	r6, r5, #8
   196d0:	cmp	r4, r6
   196d4:	str	r2, [sp, #80]	; 0x50
   196d8:	beq	197e4 <__assert_fail@plt+0x8458>
   196dc:	mov	r3, #8
   196e0:	mov	r0, r4
   196e4:	str	r3, [sp]
   196e8:	rsb	r2, r2, #1
   196ec:	add	r1, sp, #80	; 0x50
   196f0:	mvn	r3, #-2147483648	; 0x80000000
   196f4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   196f8:	mov	r4, r0
   196fc:	str	r0, [r5]
   19700:	ldr	r0, [r5, #4]
   19704:	ldr	r2, [sp, #80]	; 0x50
   19708:	mov	r1, #0
   1970c:	sub	r2, r2, r0
   19710:	add	r0, r4, r0, lsl #3
   19714:	lsl	r2, r2, #3
   19718:	bl	11254 <memset@plt>
   1971c:	ldr	r3, [sp, #80]	; 0x50
   19720:	str	r3, [r5, #4]
   19724:	ldr	r6, [sp, #36]	; 0x24
   19728:	ldr	r8, [r4]
   1972c:	ldr	r5, [r4, #4]
   19730:	ldr	r2, [sp, #72]	; 0x48
   19734:	ldr	r3, [sp, #32]
   19738:	ldr	ip, [sp, #76]	; 0x4c
   1973c:	orr	r6, r6, #1
   19740:	add	fp, sp, #40	; 0x28
   19744:	str	r2, [sp, #12]
   19748:	str	r3, [sp]
   1974c:	str	r6, [sp, #4]
   19750:	mov	r1, r8
   19754:	mov	r0, r5
   19758:	str	ip, [sp, #16]
   1975c:	str	fp, [sp, #8]
   19760:	mov	r3, sl
   19764:	mov	r2, r9
   19768:	bl	17114 <__assert_fail@plt+0x5d88>
   1976c:	cmp	r8, r0
   19770:	bhi	197d0 <__assert_fail@plt+0x8444>
   19774:	ldr	r3, [pc, #160]	; 1981c <__assert_fail@plt+0x8490>
   19778:	add	r8, r0, #1
   1977c:	cmp	r5, r3
   19780:	str	r8, [r4]
   19784:	beq	19790 <__assert_fail@plt+0x8404>
   19788:	mov	r0, r5
   1978c:	bl	12dbc <__assert_fail@plt+0x1a30>
   19790:	mov	r0, r8
   19794:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   19798:	ldr	ip, [sp, #76]	; 0x4c
   1979c:	ldr	lr, [sp, #32]
   197a0:	mov	r3, sl
   197a4:	mov	r2, r9
   197a8:	mov	r1, r8
   197ac:	str	r0, [r4, #4]
   197b0:	ldr	r4, [sp, #72]	; 0x48
   197b4:	str	fp, [sp, #8]
   197b8:	str	r6, [sp, #4]
   197bc:	str	ip, [sp, #16]
   197c0:	str	r4, [sp, #12]
   197c4:	str	lr, [sp]
   197c8:	mov	r5, r0
   197cc:	bl	17114 <__assert_fail@plt+0x5d88>
   197d0:	ldr	r3, [sp, #28]
   197d4:	mov	r0, r5
   197d8:	str	r3, [r7]
   197dc:	add	sp, sp, #132	; 0x84
   197e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e4:	mov	r3, #8
   197e8:	add	r1, sp, #80	; 0x50
   197ec:	str	r3, [sp]
   197f0:	rsb	r2, r2, #1
   197f4:	mvn	r3, #-2147483648	; 0x80000000
   197f8:	mov	r0, #0
   197fc:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19800:	mov	r4, r0
   19804:	ldm	r6, {r0, r1}
   19808:	str	r4, [r5]
   1980c:	stm	r4, {r0, r1}
   19810:	b	19700 <__assert_fail@plt+0x8374>
   19814:	bl	11344 <abort@plt>
   19818:	andeq	r0, r3, r4, asr #2
   1981c:	strdeq	r0, [r3], -ip
   19820:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19824:	mov	r4, r2
   19828:	ldr	lr, [pc, #432]	; 199e0 <__assert_fail@plt+0x8654>
   1982c:	mov	sl, r0
   19830:	mov	fp, r1
   19834:	ldm	lr!, {r0, r1, r2, r3}
   19838:	sub	sp, sp, #92	; 0x5c
   1983c:	add	ip, sp, #40	; 0x28
   19840:	lsr	r7, r4, #5
   19844:	stmia	ip!, {r0, r1, r2, r3}
   19848:	add	r6, sp, #48	; 0x30
   1984c:	ldm	lr!, {r0, r1, r2, r3}
   19850:	and	r4, r4, #31
   19854:	ldr	r5, [pc, #392]	; 199e4 <__assert_fail@plt+0x8658>
   19858:	stmia	ip!, {r0, r1, r2, r3}
   1985c:	ldm	lr, {r0, r1, r2, r3}
   19860:	stm	ip, {r0, r1, r2, r3}
   19864:	ldr	r2, [r6, r7, lsl #2]
   19868:	lsr	r3, r2, r4
   1986c:	eor	r3, r3, #1
   19870:	and	r3, r3, #1
   19874:	eor	r4, r2, r3, lsl r4
   19878:	str	r4, [r6, r7, lsl #2]
   1987c:	bl	1123c <__errno_location@plt>
   19880:	ldr	r2, [r5, #4]
   19884:	ldr	r4, [r5]
   19888:	cmp	r2, #0
   1988c:	ldr	r3, [r0]
   19890:	mov	r8, r0
   19894:	str	r3, [sp, #28]
   19898:	bgt	198f4 <__assert_fail@plt+0x8568>
   1989c:	add	r7, r5, #8
   198a0:	cmp	r4, r7
   198a4:	str	r2, [sp, #36]	; 0x24
   198a8:	beq	199b0 <__assert_fail@plt+0x8624>
   198ac:	mov	r3, #8
   198b0:	mov	r0, r4
   198b4:	str	r3, [sp]
   198b8:	rsb	r2, r2, #1
   198bc:	mvn	r3, #-2147483648	; 0x80000000
   198c0:	add	r1, sp, #36	; 0x24
   198c4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   198c8:	mov	r4, r0
   198cc:	str	r0, [r5]
   198d0:	ldr	r0, [r5, #4]
   198d4:	ldr	r2, [sp, #36]	; 0x24
   198d8:	mov	r1, #0
   198dc:	sub	r2, r2, r0
   198e0:	add	r0, r4, r0, lsl #3
   198e4:	lsl	r2, r2, #3
   198e8:	bl	11254 <memset@plt>
   198ec:	ldr	r3, [sp, #36]	; 0x24
   198f0:	str	r3, [r5, #4]
   198f4:	ldr	r7, [sp, #44]	; 0x2c
   198f8:	ldr	r9, [r4]
   198fc:	ldr	r5, [r4, #4]
   19900:	ldr	r2, [sp, #80]	; 0x50
   19904:	ldr	r3, [sp, #40]	; 0x28
   19908:	ldr	ip, [sp, #84]	; 0x54
   1990c:	orr	r7, r7, #1
   19910:	str	r2, [sp, #12]
   19914:	str	r3, [sp]
   19918:	str	r7, [sp, #4]
   1991c:	str	r6, [sp, #8]
   19920:	mov	r1, r9
   19924:	mov	r0, r5
   19928:	str	ip, [sp, #16]
   1992c:	mov	r3, fp
   19930:	mov	r2, sl
   19934:	bl	17114 <__assert_fail@plt+0x5d88>
   19938:	cmp	r9, r0
   1993c:	bhi	1999c <__assert_fail@plt+0x8610>
   19940:	ldr	r3, [pc, #160]	; 199e8 <__assert_fail@plt+0x865c>
   19944:	add	r9, r0, #1
   19948:	cmp	r5, r3
   1994c:	str	r9, [r4]
   19950:	beq	1995c <__assert_fail@plt+0x85d0>
   19954:	mov	r0, r5
   19958:	bl	12dbc <__assert_fail@plt+0x1a30>
   1995c:	mov	r0, r9
   19960:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   19964:	ldr	ip, [sp, #84]	; 0x54
   19968:	ldr	lr, [sp, #40]	; 0x28
   1996c:	mov	r3, fp
   19970:	mov	r2, sl
   19974:	mov	r1, r9
   19978:	str	r0, [r4, #4]
   1997c:	ldr	r4, [sp, #80]	; 0x50
   19980:	str	r6, [sp, #8]
   19984:	str	r7, [sp, #4]
   19988:	str	ip, [sp, #16]
   1998c:	str	r4, [sp, #12]
   19990:	str	lr, [sp]
   19994:	mov	r5, r0
   19998:	bl	17114 <__assert_fail@plt+0x5d88>
   1999c:	ldr	r3, [sp, #28]
   199a0:	mov	r0, r5
   199a4:	str	r3, [r8]
   199a8:	add	sp, sp, #92	; 0x5c
   199ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   199b0:	mov	r3, #8
   199b4:	str	r3, [sp]
   199b8:	add	r1, sp, #36	; 0x24
   199bc:	rsb	r2, r2, #1
   199c0:	mvn	r3, #-2147483648	; 0x80000000
   199c4:	mov	r0, #0
   199c8:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   199cc:	mov	r4, r0
   199d0:	ldm	r7, {r0, r1}
   199d4:	str	r4, [r5]
   199d8:	stm	r4, {r0, r1}
   199dc:	b	198d0 <__assert_fail@plt+0x8544>
   199e0:	andeq	r0, r3, ip, asr #3
   199e4:	andeq	r0, r3, r4, asr #2
   199e8:	strdeq	r0, [r3], -ip
   199ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199f0:	mov	r4, r1
   199f4:	ldr	lr, [pc, #420]	; 19ba0 <__assert_fail@plt+0x8814>
   199f8:	mov	r6, r0
   199fc:	sub	sp, sp, #84	; 0x54
   19a00:	ldm	lr!, {r0, r1, r2, r3}
   19a04:	add	ip, sp, #32
   19a08:	lsr	r8, r4, #5
   19a0c:	add	r5, sp, #40	; 0x28
   19a10:	stmia	ip!, {r0, r1, r2, r3}
   19a14:	and	r4, r4, #31
   19a18:	ldm	lr!, {r0, r1, r2, r3}
   19a1c:	ldr	r7, [pc, #384]	; 19ba4 <__assert_fail@plt+0x8818>
   19a20:	stmia	ip!, {r0, r1, r2, r3}
   19a24:	ldm	lr, {r0, r1, r2, r3}
   19a28:	stm	ip, {r0, r1, r2, r3}
   19a2c:	ldr	r2, [r5, r8, lsl #2]
   19a30:	lsr	r3, r2, r4
   19a34:	eor	r3, r3, #1
   19a38:	and	r3, r3, #1
   19a3c:	eor	r4, r2, r3, lsl r4
   19a40:	str	r4, [r5, r8, lsl #2]
   19a44:	bl	1123c <__errno_location@plt>
   19a48:	ldr	r2, [r7, #4]
   19a4c:	ldr	r4, [r7]
   19a50:	cmp	r2, #0
   19a54:	mov	r9, r0
   19a58:	ldr	sl, [r0]
   19a5c:	bgt	19ab8 <__assert_fail@plt+0x872c>
   19a60:	add	r8, r7, #8
   19a64:	cmp	r4, r8
   19a68:	str	r2, [sp, #28]
   19a6c:	beq	19b70 <__assert_fail@plt+0x87e4>
   19a70:	mov	r3, #8
   19a74:	mov	r0, r4
   19a78:	str	r3, [sp]
   19a7c:	rsb	r2, r2, #1
   19a80:	mvn	r3, #-2147483648	; 0x80000000
   19a84:	add	r1, sp, #28
   19a88:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19a8c:	mov	r4, r0
   19a90:	str	r0, [r7]
   19a94:	ldr	r0, [r7, #4]
   19a98:	ldr	r2, [sp, #28]
   19a9c:	mov	r1, #0
   19aa0:	sub	r2, r2, r0
   19aa4:	add	r0, r4, r0, lsl #3
   19aa8:	lsl	r2, r2, #3
   19aac:	bl	11254 <memset@plt>
   19ab0:	ldr	r3, [sp, #28]
   19ab4:	str	r3, [r7, #4]
   19ab8:	ldr	r8, [sp, #36]	; 0x24
   19abc:	ldr	fp, [r4]
   19ac0:	ldr	r7, [r4, #4]
   19ac4:	ldr	r2, [sp, #72]	; 0x48
   19ac8:	ldr	r3, [sp, #32]
   19acc:	ldr	ip, [sp, #76]	; 0x4c
   19ad0:	orr	r8, r8, #1
   19ad4:	str	r2, [sp, #12]
   19ad8:	str	r3, [sp]
   19adc:	str	r8, [sp, #4]
   19ae0:	str	r5, [sp, #8]
   19ae4:	mov	r1, fp
   19ae8:	mov	r0, r7
   19aec:	str	ip, [sp, #16]
   19af0:	mvn	r3, #0
   19af4:	mov	r2, r6
   19af8:	bl	17114 <__assert_fail@plt+0x5d88>
   19afc:	cmp	fp, r0
   19b00:	bhi	19b60 <__assert_fail@plt+0x87d4>
   19b04:	ldr	r3, [pc, #156]	; 19ba8 <__assert_fail@plt+0x881c>
   19b08:	add	fp, r0, #1
   19b0c:	cmp	r7, r3
   19b10:	str	fp, [r4]
   19b14:	beq	19b20 <__assert_fail@plt+0x8794>
   19b18:	mov	r0, r7
   19b1c:	bl	12dbc <__assert_fail@plt+0x1a30>
   19b20:	mov	r0, fp
   19b24:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   19b28:	ldr	lr, [sp, #76]	; 0x4c
   19b2c:	ldr	r3, [sp, #32]
   19b30:	ldr	ip, [sp, #72]	; 0x48
   19b34:	mov	r2, r6
   19b38:	mov	r1, fp
   19b3c:	str	r0, [r4, #4]
   19b40:	str	r3, [sp]
   19b44:	str	r5, [sp, #8]
   19b48:	str	r8, [sp, #4]
   19b4c:	str	lr, [sp, #16]
   19b50:	str	ip, [sp, #12]
   19b54:	mvn	r3, #0
   19b58:	mov	r7, r0
   19b5c:	bl	17114 <__assert_fail@plt+0x5d88>
   19b60:	mov	r0, r7
   19b64:	str	sl, [r9]
   19b68:	add	sp, sp, #84	; 0x54
   19b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b70:	mov	r3, #8
   19b74:	str	r3, [sp]
   19b78:	add	r1, sp, #28
   19b7c:	rsb	r2, r2, #1
   19b80:	mvn	r3, #-2147483648	; 0x80000000
   19b84:	mov	r0, #0
   19b88:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19b8c:	mov	r4, r0
   19b90:	ldm	r8, {r0, r1}
   19b94:	str	r4, [r7]
   19b98:	stm	r4, {r0, r1}
   19b9c:	b	19a94 <__assert_fail@plt+0x8708>
   19ba0:	andeq	r0, r3, ip, asr #3
   19ba4:	andeq	r0, r3, r4, asr #2
   19ba8:	strdeq	r0, [r3], -ip
   19bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bb0:	mov	r6, r0
   19bb4:	ldr	lr, [pc, #404]	; 19d50 <__assert_fail@plt+0x89c4>
   19bb8:	sub	sp, sp, #84	; 0x54
   19bbc:	add	ip, sp, #32
   19bc0:	ldm	lr!, {r0, r1, r2, r3}
   19bc4:	ldr	r5, [pc, #392]	; 19d54 <__assert_fail@plt+0x89c8>
   19bc8:	stmia	ip!, {r0, r1, r2, r3}
   19bcc:	ldm	lr!, {r0, r1, r2, r3}
   19bd0:	ldr	r4, [sp, #44]	; 0x2c
   19bd4:	stmia	ip!, {r0, r1, r2, r3}
   19bd8:	ldm	lr, {r0, r1, r2, r3}
   19bdc:	mvn	lr, r4
   19be0:	and	lr, lr, #67108864	; 0x4000000
   19be4:	eor	lr, lr, r4
   19be8:	stm	ip, {r0, r1, r2, r3}
   19bec:	str	lr, [sp, #44]	; 0x2c
   19bf0:	bl	1123c <__errno_location@plt>
   19bf4:	ldr	r2, [r5, #4]
   19bf8:	ldr	r4, [r5]
   19bfc:	cmp	r2, #0
   19c00:	mov	r8, r0
   19c04:	ldr	sl, [r0]
   19c08:	bgt	19c64 <__assert_fail@plt+0x88d8>
   19c0c:	add	r7, r5, #8
   19c10:	cmp	r4, r7
   19c14:	str	r2, [sp, #28]
   19c18:	beq	19d20 <__assert_fail@plt+0x8994>
   19c1c:	mov	r3, #8
   19c20:	mov	r0, r4
   19c24:	str	r3, [sp]
   19c28:	rsb	r2, r2, #1
   19c2c:	mvn	r3, #-2147483648	; 0x80000000
   19c30:	add	r1, sp, #28
   19c34:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19c38:	mov	r4, r0
   19c3c:	str	r0, [r5]
   19c40:	ldr	r0, [r5, #4]
   19c44:	ldr	r2, [sp, #28]
   19c48:	mov	r1, #0
   19c4c:	sub	r2, r2, r0
   19c50:	add	r0, r4, r0, lsl #3
   19c54:	lsl	r2, r2, #3
   19c58:	bl	11254 <memset@plt>
   19c5c:	ldr	r3, [sp, #28]
   19c60:	str	r3, [r5, #4]
   19c64:	ldr	r7, [sp, #36]	; 0x24
   19c68:	ldr	r9, [r4]
   19c6c:	ldr	r5, [r4, #4]
   19c70:	ldr	r2, [sp, #72]	; 0x48
   19c74:	ldr	r3, [sp, #32]
   19c78:	ldr	ip, [sp, #76]	; 0x4c
   19c7c:	orr	r7, r7, #1
   19c80:	add	fp, sp, #40	; 0x28
   19c84:	str	r2, [sp, #12]
   19c88:	str	r3, [sp]
   19c8c:	str	r7, [sp, #4]
   19c90:	mov	r1, r9
   19c94:	mov	r0, r5
   19c98:	str	ip, [sp, #16]
   19c9c:	str	fp, [sp, #8]
   19ca0:	mvn	r3, #0
   19ca4:	mov	r2, r6
   19ca8:	bl	17114 <__assert_fail@plt+0x5d88>
   19cac:	cmp	r9, r0
   19cb0:	bhi	19d10 <__assert_fail@plt+0x8984>
   19cb4:	ldr	r3, [pc, #156]	; 19d58 <__assert_fail@plt+0x89cc>
   19cb8:	add	r9, r0, #1
   19cbc:	cmp	r5, r3
   19cc0:	str	r9, [r4]
   19cc4:	beq	19cd0 <__assert_fail@plt+0x8944>
   19cc8:	mov	r0, r5
   19ccc:	bl	12dbc <__assert_fail@plt+0x1a30>
   19cd0:	mov	r0, r9
   19cd4:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   19cd8:	ldr	lr, [sp, #76]	; 0x4c
   19cdc:	ldr	r3, [sp, #32]
   19ce0:	ldr	ip, [sp, #72]	; 0x48
   19ce4:	mov	r2, r6
   19ce8:	mov	r1, r9
   19cec:	str	r0, [r4, #4]
   19cf0:	str	r3, [sp]
   19cf4:	str	fp, [sp, #8]
   19cf8:	str	r7, [sp, #4]
   19cfc:	str	lr, [sp, #16]
   19d00:	str	ip, [sp, #12]
   19d04:	mvn	r3, #0
   19d08:	mov	r5, r0
   19d0c:	bl	17114 <__assert_fail@plt+0x5d88>
   19d10:	mov	r0, r5
   19d14:	str	sl, [r8]
   19d18:	add	sp, sp, #84	; 0x54
   19d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d20:	mov	r3, #8
   19d24:	str	r3, [sp]
   19d28:	add	r1, sp, #28
   19d2c:	rsb	r2, r2, #1
   19d30:	mvn	r3, #-2147483648	; 0x80000000
   19d34:	mov	r0, #0
   19d38:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19d3c:	mov	r4, r0
   19d40:	ldm	r7, {r0, r1}
   19d44:	str	r4, [r5]
   19d48:	stm	r4, {r0, r1}
   19d4c:	b	19c40 <__assert_fail@plt+0x88b4>
   19d50:	andeq	r0, r3, ip, asr #3
   19d54:	andeq	r0, r3, r4, asr #2
   19d58:	strdeq	r0, [r3], -ip
   19d5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19d60:	mov	r9, r0
   19d64:	ldr	lr, [pc, #416]	; 19f0c <__assert_fail@plt+0x8b80>
   19d68:	mov	sl, r1
   19d6c:	sub	sp, sp, #92	; 0x5c
   19d70:	ldm	lr!, {r0, r1, r2, r3}
   19d74:	add	ip, sp, #40	; 0x28
   19d78:	ldr	r5, [pc, #400]	; 19f10 <__assert_fail@plt+0x8b84>
   19d7c:	stmia	ip!, {r0, r1, r2, r3}
   19d80:	ldm	lr!, {r0, r1, r2, r3}
   19d84:	ldr	r4, [sp, #52]	; 0x34
   19d88:	stmia	ip!, {r0, r1, r2, r3}
   19d8c:	ldm	lr, {r0, r1, r2, r3}
   19d90:	mvn	lr, r4
   19d94:	and	lr, lr, #67108864	; 0x4000000
   19d98:	eor	lr, lr, r4
   19d9c:	stm	ip, {r0, r1, r2, r3}
   19da0:	str	lr, [sp, #52]	; 0x34
   19da4:	bl	1123c <__errno_location@plt>
   19da8:	ldr	r2, [r5, #4]
   19dac:	ldr	r4, [r5]
   19db0:	cmp	r2, #0
   19db4:	ldr	r3, [r0]
   19db8:	mov	r7, r0
   19dbc:	str	r3, [sp, #28]
   19dc0:	bgt	19e1c <__assert_fail@plt+0x8a90>
   19dc4:	add	r6, r5, #8
   19dc8:	cmp	r4, r6
   19dcc:	str	r2, [sp, #36]	; 0x24
   19dd0:	beq	19edc <__assert_fail@plt+0x8b50>
   19dd4:	mov	r3, #8
   19dd8:	mov	r0, r4
   19ddc:	str	r3, [sp]
   19de0:	rsb	r2, r2, #1
   19de4:	mvn	r3, #-2147483648	; 0x80000000
   19de8:	add	r1, sp, #36	; 0x24
   19dec:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19df0:	mov	r4, r0
   19df4:	str	r0, [r5]
   19df8:	ldr	r0, [r5, #4]
   19dfc:	ldr	r2, [sp, #36]	; 0x24
   19e00:	mov	r1, #0
   19e04:	sub	r2, r2, r0
   19e08:	add	r0, r4, r0, lsl #3
   19e0c:	lsl	r2, r2, #3
   19e10:	bl	11254 <memset@plt>
   19e14:	ldr	r3, [sp, #36]	; 0x24
   19e18:	str	r3, [r5, #4]
   19e1c:	ldr	r6, [sp, #44]	; 0x2c
   19e20:	ldr	r8, [r4]
   19e24:	ldr	r5, [r4, #4]
   19e28:	ldr	r2, [sp, #80]	; 0x50
   19e2c:	ldr	r3, [sp, #40]	; 0x28
   19e30:	ldr	ip, [sp, #84]	; 0x54
   19e34:	orr	r6, r6, #1
   19e38:	add	fp, sp, #48	; 0x30
   19e3c:	str	r2, [sp, #12]
   19e40:	str	r3, [sp]
   19e44:	str	r6, [sp, #4]
   19e48:	mov	r1, r8
   19e4c:	mov	r0, r5
   19e50:	str	ip, [sp, #16]
   19e54:	str	fp, [sp, #8]
   19e58:	mov	r3, sl
   19e5c:	mov	r2, r9
   19e60:	bl	17114 <__assert_fail@plt+0x5d88>
   19e64:	cmp	r8, r0
   19e68:	bhi	19ec8 <__assert_fail@plt+0x8b3c>
   19e6c:	ldr	r3, [pc, #160]	; 19f14 <__assert_fail@plt+0x8b88>
   19e70:	add	r8, r0, #1
   19e74:	cmp	r5, r3
   19e78:	str	r8, [r4]
   19e7c:	beq	19e88 <__assert_fail@plt+0x8afc>
   19e80:	mov	r0, r5
   19e84:	bl	12dbc <__assert_fail@plt+0x1a30>
   19e88:	mov	r0, r8
   19e8c:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   19e90:	ldr	ip, [sp, #84]	; 0x54
   19e94:	ldr	lr, [sp, #40]	; 0x28
   19e98:	mov	r3, sl
   19e9c:	mov	r2, r9
   19ea0:	mov	r1, r8
   19ea4:	str	r0, [r4, #4]
   19ea8:	ldr	r4, [sp, #80]	; 0x50
   19eac:	str	fp, [sp, #8]
   19eb0:	str	r6, [sp, #4]
   19eb4:	str	ip, [sp, #16]
   19eb8:	str	r4, [sp, #12]
   19ebc:	str	lr, [sp]
   19ec0:	mov	r5, r0
   19ec4:	bl	17114 <__assert_fail@plt+0x5d88>
   19ec8:	ldr	r3, [sp, #28]
   19ecc:	mov	r0, r5
   19ed0:	str	r3, [r7]
   19ed4:	add	sp, sp, #92	; 0x5c
   19ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19edc:	mov	r3, #8
   19ee0:	str	r3, [sp]
   19ee4:	add	r1, sp, #36	; 0x24
   19ee8:	rsb	r2, r2, #1
   19eec:	mvn	r3, #-2147483648	; 0x80000000
   19ef0:	mov	r0, #0
   19ef4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19ef8:	mov	r4, r0
   19efc:	ldm	r6, {r0, r1}
   19f00:	str	r4, [r5]
   19f04:	stm	r4, {r0, r1}
   19f08:	b	19df8 <__assert_fail@plt+0x8a6c>
   19f0c:	andeq	r0, r3, ip, asr #3
   19f10:	andeq	r0, r3, r4, asr #2
   19f14:	strdeq	r0, [r3], -ip
   19f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f1c:	sub	sp, sp, #180	; 0xb4
   19f20:	mov	r6, r1
   19f24:	mov	r4, r0
   19f28:	mov	r9, r2
   19f2c:	add	r0, sp, #80	; 0x50
   19f30:	mov	r2, #48	; 0x30
   19f34:	mov	r1, #0
   19f38:	bl	11254 <memset@plt>
   19f3c:	cmp	r6, #10
   19f40:	beq	1a120 <__assert_fail@plt+0x8d94>
   19f44:	add	r5, sp, #80	; 0x50
   19f48:	str	r6, [sp, #80]	; 0x50
   19f4c:	ldm	r5!, {r0, r1, r2, r3}
   19f50:	add	ip, sp, #128	; 0x80
   19f54:	mov	r7, ip
   19f58:	add	lr, sp, #32
   19f5c:	stmia	ip!, {r0, r1, r2, r3}
   19f60:	mov	r8, #67108864	; 0x4000000
   19f64:	ldm	r5!, {r0, r1, r2, r3}
   19f68:	ldr	r6, [pc, #436]	; 1a124 <__assert_fail@plt+0x8d98>
   19f6c:	stmia	ip!, {r0, r1, r2, r3}
   19f70:	ldm	r5, {r0, r1, r2, r3}
   19f74:	stm	ip, {r0, r1, r2, r3}
   19f78:	ldm	r7!, {r0, r1, r2, r3}
   19f7c:	stmia	lr!, {r0, r1, r2, r3}
   19f80:	ldm	r7!, {r0, r1, r2, r3}
   19f84:	str	r8, [sp, #44]	; 0x2c
   19f88:	stmia	lr!, {r0, r1, r2, r3}
   19f8c:	ldm	ip, {r0, r1, r2, r3}
   19f90:	stm	lr, {r0, r1, r2, r3}
   19f94:	bl	1123c <__errno_location@plt>
   19f98:	cmn	r4, #-2147483647	; 0x80000001
   19f9c:	ldr	r5, [r6]
   19fa0:	mov	r7, r0
   19fa4:	movne	r0, #0
   19fa8:	moveq	r0, #1
   19fac:	ldr	r3, [r7]
   19fb0:	orrs	r0, r0, r4, lsr #31
   19fb4:	str	r3, [sp, #24]
   19fb8:	bne	1a120 <__assert_fail@plt+0x8d94>
   19fbc:	ldr	r2, [r6, #4]
   19fc0:	cmp	r4, r2
   19fc4:	blt	1a024 <__assert_fail@plt+0x8c98>
   19fc8:	add	r8, r6, #8
   19fcc:	cmp	r5, r8
   19fd0:	str	r2, [sp, #80]	; 0x50
   19fd4:	beq	1a0f0 <__assert_fail@plt+0x8d64>
   19fd8:	mov	r3, #8
   19fdc:	sub	r2, r4, r2
   19fe0:	mov	r0, r5
   19fe4:	str	r3, [sp]
   19fe8:	add	r2, r2, #1
   19fec:	add	r1, sp, #80	; 0x50
   19ff0:	mvn	r3, #-2147483648	; 0x80000000
   19ff4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   19ff8:	mov	r5, r0
   19ffc:	str	r0, [r6]
   1a000:	ldr	r0, [r6, #4]
   1a004:	ldr	r2, [sp, #80]	; 0x50
   1a008:	mov	r1, #0
   1a00c:	sub	r2, r2, r0
   1a010:	add	r0, r5, r0, lsl #3
   1a014:	lsl	r2, r2, #3
   1a018:	bl	11254 <memset@plt>
   1a01c:	ldr	r3, [sp, #80]	; 0x50
   1a020:	str	r3, [r6, #4]
   1a024:	add	fp, r5, r4, lsl #3
   1a028:	ldr	r1, [sp, #36]	; 0x24
   1a02c:	ldr	r8, [r5, r4, lsl #3]
   1a030:	ldr	r6, [fp, #4]
   1a034:	ldr	r2, [sp, #72]	; 0x48
   1a038:	ldr	r3, [sp, #32]
   1a03c:	ldr	ip, [sp, #76]	; 0x4c
   1a040:	orr	r1, r1, #1
   1a044:	add	sl, sp, #40	; 0x28
   1a048:	str	r1, [sp, #28]
   1a04c:	str	r1, [sp, #4]
   1a050:	str	r2, [sp, #12]
   1a054:	str	r3, [sp]
   1a058:	mov	r0, r6
   1a05c:	mov	r1, r8
   1a060:	str	ip, [sp, #16]
   1a064:	str	sl, [sp, #8]
   1a068:	mvn	r3, #0
   1a06c:	mov	r2, r9
   1a070:	bl	17114 <__assert_fail@plt+0x5d88>
   1a074:	cmp	r8, r0
   1a078:	bhi	1a0dc <__assert_fail@plt+0x8d50>
   1a07c:	ldr	r3, [pc, #164]	; 1a128 <__assert_fail@plt+0x8d9c>
   1a080:	add	r8, r0, #1
   1a084:	cmp	r6, r3
   1a088:	str	r8, [r5, r4, lsl #3]
   1a08c:	beq	1a098 <__assert_fail@plt+0x8d0c>
   1a090:	mov	r0, r6
   1a094:	bl	12dbc <__assert_fail@plt+0x1a30>
   1a098:	mov	r0, r8
   1a09c:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1a0a0:	ldr	lr, [sp, #76]	; 0x4c
   1a0a4:	ldr	r3, [sp, #32]
   1a0a8:	ldr	ip, [sp, #72]	; 0x48
   1a0ac:	ldr	r4, [sp, #28]
   1a0b0:	mov	r2, r9
   1a0b4:	mov	r1, r8
   1a0b8:	str	r0, [fp, #4]
   1a0bc:	str	r3, [sp]
   1a0c0:	str	sl, [sp, #8]
   1a0c4:	str	r4, [sp, #4]
   1a0c8:	str	lr, [sp, #16]
   1a0cc:	str	ip, [sp, #12]
   1a0d0:	mvn	r3, #0
   1a0d4:	mov	r6, r0
   1a0d8:	bl	17114 <__assert_fail@plt+0x5d88>
   1a0dc:	ldr	r3, [sp, #24]
   1a0e0:	mov	r0, r6
   1a0e4:	str	r3, [r7]
   1a0e8:	add	sp, sp, #180	; 0xb4
   1a0ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0f0:	mov	r3, #8
   1a0f4:	sub	r2, r4, r2
   1a0f8:	add	r1, sp, #80	; 0x50
   1a0fc:	str	r3, [sp]
   1a100:	add	r2, r2, #1
   1a104:	mvn	r3, #-2147483648	; 0x80000000
   1a108:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a10c:	mov	r5, r0
   1a110:	ldm	r8, {r0, r1}
   1a114:	str	r5, [r6]
   1a118:	stm	r5, {r0, r1}
   1a11c:	b	1a000 <__assert_fail@plt+0x8c74>
   1a120:	bl	11344 <abort@plt>
   1a124:	andeq	r0, r3, r4, asr #2
   1a128:	strdeq	r0, [r3], -ip
   1a12c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a130:	mov	r7, r1
   1a134:	ldr	lr, [pc, #492]	; 1a328 <__assert_fail@plt+0x8f9c>
   1a138:	mov	r8, r2
   1a13c:	mov	r4, r0
   1a140:	mov	fp, r3
   1a144:	ldm	lr!, {r0, r1, r2, r3}
   1a148:	sub	sp, sp, #100	; 0x64
   1a14c:	add	ip, sp, #48	; 0x30
   1a150:	mov	sl, #10
   1a154:	stmia	ip!, {r0, r1, r2, r3}
   1a158:	cmp	r8, #0
   1a15c:	cmpne	r7, #0
   1a160:	ldm	lr!, {r0, r1, r2, r3}
   1a164:	str	sl, [sp, #48]	; 0x30
   1a168:	stmia	ip!, {r0, r1, r2, r3}
   1a16c:	ldm	lr, {r0, r1, r2, r3}
   1a170:	stm	ip, {r0, r1, r2, r3}
   1a174:	beq	1a324 <__assert_fail@plt+0x8f98>
   1a178:	str	r7, [sp, #88]	; 0x58
   1a17c:	str	r8, [sp, #92]	; 0x5c
   1a180:	bl	1123c <__errno_location@plt>
   1a184:	ldr	r6, [pc, #416]	; 1a32c <__assert_fail@plt+0x8fa0>
   1a188:	cmn	r4, #-2147483647	; 0x80000001
   1a18c:	ldr	r5, [r6]
   1a190:	mov	r9, r0
   1a194:	movne	r0, #0
   1a198:	moveq	r0, #1
   1a19c:	ldr	r3, [r9]
   1a1a0:	orrs	r0, r0, r4, lsr #31
   1a1a4:	str	r3, [sp, #28]
   1a1a8:	bne	1a324 <__assert_fail@plt+0x8f98>
   1a1ac:	ldr	r2, [r6, #4]
   1a1b0:	cmp	r4, r2
   1a1b4:	movlt	r3, sl
   1a1b8:	blt	1a224 <__assert_fail@plt+0x8e98>
   1a1bc:	add	r7, r6, #8
   1a1c0:	cmp	r5, r7
   1a1c4:	str	r2, [sp, #44]	; 0x2c
   1a1c8:	beq	1a2f4 <__assert_fail@plt+0x8f68>
   1a1cc:	mov	r3, #8
   1a1d0:	sub	r2, r4, r2
   1a1d4:	mov	r0, r5
   1a1d8:	str	r3, [sp]
   1a1dc:	add	r2, r2, #1
   1a1e0:	mvn	r3, #-2147483648	; 0x80000000
   1a1e4:	add	r1, sp, #44	; 0x2c
   1a1e8:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a1ec:	mov	r5, r0
   1a1f0:	str	r0, [r6]
   1a1f4:	ldr	r0, [r6, #4]
   1a1f8:	ldr	r2, [sp, #44]	; 0x2c
   1a1fc:	mov	r1, #0
   1a200:	sub	r2, r2, r0
   1a204:	add	r0, r5, r0, lsl #3
   1a208:	lsl	r2, r2, #3
   1a20c:	bl	11254 <memset@plt>
   1a210:	ldr	r3, [sp, #48]	; 0x30
   1a214:	ldr	r7, [sp, #88]	; 0x58
   1a218:	ldr	r8, [sp, #92]	; 0x5c
   1a21c:	ldr	r2, [sp, #44]	; 0x2c
   1a220:	str	r2, [r6, #4]
   1a224:	add	r2, r5, r4, lsl #3
   1a228:	mov	r1, r2
   1a22c:	str	r2, [sp, #32]
   1a230:	ldr	r2, [sp, #52]	; 0x34
   1a234:	ldr	r6, [r1, #4]
   1a238:	ldr	sl, [r5, r4, lsl #3]
   1a23c:	orr	r2, r2, #1
   1a240:	str	r3, [sp]
   1a244:	add	r3, sp, #56	; 0x38
   1a248:	str	r2, [sp, #36]	; 0x24
   1a24c:	str	r2, [sp, #4]
   1a250:	str	r3, [sp, #8]
   1a254:	mov	r0, r6
   1a258:	str	r8, [sp, #16]
   1a25c:	str	r7, [sp, #12]
   1a260:	mov	r1, sl
   1a264:	mvn	r3, #0
   1a268:	mov	r2, fp
   1a26c:	bl	17114 <__assert_fail@plt+0x5d88>
   1a270:	cmp	sl, r0
   1a274:	bhi	1a2e0 <__assert_fail@plt+0x8f54>
   1a278:	ldr	r3, [pc, #176]	; 1a330 <__assert_fail@plt+0x8fa4>
   1a27c:	add	r7, r0, #1
   1a280:	cmp	r6, r3
   1a284:	str	r7, [r5, r4, lsl #3]
   1a288:	beq	1a294 <__assert_fail@plt+0x8f08>
   1a28c:	mov	r0, r6
   1a290:	bl	12dbc <__assert_fail@plt+0x1a30>
   1a294:	mov	r0, r7
   1a298:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1a29c:	ldr	r3, [sp, #32]
   1a2a0:	ldr	lr, [sp, #92]	; 0x5c
   1a2a4:	ldr	ip, [sp, #88]	; 0x58
   1a2a8:	ldr	r4, [sp, #36]	; 0x24
   1a2ac:	mov	r2, fp
   1a2b0:	mov	r1, r7
   1a2b4:	str	r0, [r3, #4]
   1a2b8:	add	r3, sp, #56	; 0x38
   1a2bc:	str	r3, [sp, #8]
   1a2c0:	ldr	r3, [sp, #48]	; 0x30
   1a2c4:	str	r4, [sp, #4]
   1a2c8:	str	r3, [sp]
   1a2cc:	str	lr, [sp, #16]
   1a2d0:	str	ip, [sp, #12]
   1a2d4:	mvn	r3, #0
   1a2d8:	mov	r6, r0
   1a2dc:	bl	17114 <__assert_fail@plt+0x5d88>
   1a2e0:	ldr	r3, [sp, #28]
   1a2e4:	mov	r0, r6
   1a2e8:	str	r3, [r9]
   1a2ec:	add	sp, sp, #100	; 0x64
   1a2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2f4:	mov	r3, #8
   1a2f8:	sub	r2, r4, r2
   1a2fc:	str	r3, [sp]
   1a300:	add	r1, sp, #44	; 0x2c
   1a304:	add	r2, r2, #1
   1a308:	mvn	r3, #-2147483648	; 0x80000000
   1a30c:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a310:	mov	r5, r0
   1a314:	ldm	r7, {r0, r1}
   1a318:	str	r5, [r6]
   1a31c:	stm	r5, {r0, r1}
   1a320:	b	1a1f4 <__assert_fail@plt+0x8e68>
   1a324:	bl	11344 <abort@plt>
   1a328:	andeq	r0, r3, ip, asr #3
   1a32c:	andeq	r0, r3, r4, asr #2
   1a330:	strdeq	r0, [r3], -ip
   1a334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a338:	mov	r7, r1
   1a33c:	ldr	lr, [pc, #492]	; 1a530 <__assert_fail@plt+0x91a4>
   1a340:	mov	r8, r2
   1a344:	mov	r4, r0
   1a348:	mov	fp, r3
   1a34c:	ldm	lr!, {r0, r1, r2, r3}
   1a350:	sub	sp, sp, #100	; 0x64
   1a354:	add	ip, sp, #48	; 0x30
   1a358:	mov	sl, #10
   1a35c:	stmia	ip!, {r0, r1, r2, r3}
   1a360:	cmp	r8, #0
   1a364:	cmpne	r7, #0
   1a368:	ldm	lr!, {r0, r1, r2, r3}
   1a36c:	str	sl, [sp, #48]	; 0x30
   1a370:	stmia	ip!, {r0, r1, r2, r3}
   1a374:	ldm	lr, {r0, r1, r2, r3}
   1a378:	stm	ip, {r0, r1, r2, r3}
   1a37c:	beq	1a52c <__assert_fail@plt+0x91a0>
   1a380:	str	r7, [sp, #88]	; 0x58
   1a384:	str	r8, [sp, #92]	; 0x5c
   1a388:	bl	1123c <__errno_location@plt>
   1a38c:	ldr	r6, [pc, #416]	; 1a534 <__assert_fail@plt+0x91a8>
   1a390:	cmn	r4, #-2147483647	; 0x80000001
   1a394:	ldr	r5, [r6]
   1a398:	mov	r9, r0
   1a39c:	movne	r0, #0
   1a3a0:	moveq	r0, #1
   1a3a4:	ldr	r3, [r9]
   1a3a8:	orrs	r0, r0, r4, lsr #31
   1a3ac:	str	r3, [sp, #28]
   1a3b0:	bne	1a52c <__assert_fail@plt+0x91a0>
   1a3b4:	ldr	r2, [r6, #4]
   1a3b8:	cmp	r4, r2
   1a3bc:	movlt	r3, sl
   1a3c0:	blt	1a42c <__assert_fail@plt+0x90a0>
   1a3c4:	add	r7, r6, #8
   1a3c8:	cmp	r5, r7
   1a3cc:	str	r2, [sp, #44]	; 0x2c
   1a3d0:	beq	1a4fc <__assert_fail@plt+0x9170>
   1a3d4:	mov	r3, #8
   1a3d8:	sub	r2, r4, r2
   1a3dc:	mov	r0, r5
   1a3e0:	str	r3, [sp]
   1a3e4:	add	r2, r2, #1
   1a3e8:	mvn	r3, #-2147483648	; 0x80000000
   1a3ec:	add	r1, sp, #44	; 0x2c
   1a3f0:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a3f4:	mov	r5, r0
   1a3f8:	str	r0, [r6]
   1a3fc:	ldr	r0, [r6, #4]
   1a400:	ldr	r2, [sp, #44]	; 0x2c
   1a404:	mov	r1, #0
   1a408:	sub	r2, r2, r0
   1a40c:	add	r0, r5, r0, lsl #3
   1a410:	lsl	r2, r2, #3
   1a414:	bl	11254 <memset@plt>
   1a418:	ldr	r3, [sp, #48]	; 0x30
   1a41c:	ldr	r7, [sp, #88]	; 0x58
   1a420:	ldr	r8, [sp, #92]	; 0x5c
   1a424:	ldr	r2, [sp, #44]	; 0x2c
   1a428:	str	r2, [r6, #4]
   1a42c:	add	r2, r5, r4, lsl #3
   1a430:	mov	r1, r2
   1a434:	str	r2, [sp, #32]
   1a438:	ldr	r2, [sp, #52]	; 0x34
   1a43c:	ldr	r6, [r1, #4]
   1a440:	ldr	sl, [r5, r4, lsl #3]
   1a444:	orr	r2, r2, #1
   1a448:	str	r3, [sp]
   1a44c:	add	r3, sp, #56	; 0x38
   1a450:	str	r2, [sp, #36]	; 0x24
   1a454:	str	r2, [sp, #4]
   1a458:	str	r3, [sp, #8]
   1a45c:	mov	r0, r6
   1a460:	str	r8, [sp, #16]
   1a464:	str	r7, [sp, #12]
   1a468:	mov	r1, sl
   1a46c:	ldr	r3, [sp, #136]	; 0x88
   1a470:	mov	r2, fp
   1a474:	bl	17114 <__assert_fail@plt+0x5d88>
   1a478:	cmp	sl, r0
   1a47c:	bhi	1a4e8 <__assert_fail@plt+0x915c>
   1a480:	ldr	r3, [pc, #176]	; 1a538 <__assert_fail@plt+0x91ac>
   1a484:	add	r7, r0, #1
   1a488:	cmp	r6, r3
   1a48c:	str	r7, [r5, r4, lsl #3]
   1a490:	beq	1a49c <__assert_fail@plt+0x9110>
   1a494:	mov	r0, r6
   1a498:	bl	12dbc <__assert_fail@plt+0x1a30>
   1a49c:	mov	r0, r7
   1a4a0:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1a4a4:	ldr	r3, [sp, #32]
   1a4a8:	ldr	lr, [sp, #92]	; 0x5c
   1a4ac:	ldr	ip, [sp, #88]	; 0x58
   1a4b0:	ldr	r4, [sp, #36]	; 0x24
   1a4b4:	mov	r2, fp
   1a4b8:	mov	r1, r7
   1a4bc:	str	r0, [r3, #4]
   1a4c0:	add	r3, sp, #56	; 0x38
   1a4c4:	str	r3, [sp, #8]
   1a4c8:	ldr	r3, [sp, #48]	; 0x30
   1a4cc:	str	r4, [sp, #4]
   1a4d0:	str	r3, [sp]
   1a4d4:	str	lr, [sp, #16]
   1a4d8:	str	ip, [sp, #12]
   1a4dc:	ldr	r3, [sp, #136]	; 0x88
   1a4e0:	mov	r6, r0
   1a4e4:	bl	17114 <__assert_fail@plt+0x5d88>
   1a4e8:	ldr	r3, [sp, #28]
   1a4ec:	mov	r0, r6
   1a4f0:	str	r3, [r9]
   1a4f4:	add	sp, sp, #100	; 0x64
   1a4f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4fc:	mov	r3, #8
   1a500:	sub	r2, r4, r2
   1a504:	str	r3, [sp]
   1a508:	add	r1, sp, #44	; 0x2c
   1a50c:	add	r2, r2, #1
   1a510:	mvn	r3, #-2147483648	; 0x80000000
   1a514:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a518:	mov	r5, r0
   1a51c:	ldm	r7, {r0, r1}
   1a520:	str	r5, [r6]
   1a524:	stm	r5, {r0, r1}
   1a528:	b	1a3fc <__assert_fail@plt+0x9070>
   1a52c:	bl	11344 <abort@plt>
   1a530:	andeq	r0, r3, ip, asr #3
   1a534:	andeq	r0, r3, r4, asr #2
   1a538:	strdeq	r0, [r3], -ip
   1a53c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a540:	mov	r5, r0
   1a544:	ldr	lr, [pc, #452]	; 1a710 <__assert_fail@plt+0x9384>
   1a548:	mov	r6, r1
   1a54c:	mov	sl, r2
   1a550:	ldm	lr!, {r0, r1, r2, r3}
   1a554:	sub	sp, sp, #92	; 0x5c
   1a558:	add	ip, sp, #40	; 0x28
   1a55c:	cmp	r6, #0
   1a560:	cmpne	r5, #0
   1a564:	stmia	ip!, {r0, r1, r2, r3}
   1a568:	mov	r9, #10
   1a56c:	ldm	lr!, {r0, r1, r2, r3}
   1a570:	moveq	fp, #1
   1a574:	movne	fp, #0
   1a578:	str	r9, [sp, #40]	; 0x28
   1a57c:	stmia	ip!, {r0, r1, r2, r3}
   1a580:	ldm	lr, {r0, r1, r2, r3}
   1a584:	stm	ip, {r0, r1, r2, r3}
   1a588:	beq	1a70c <__assert_fail@plt+0x9380>
   1a58c:	str	r5, [sp, #80]	; 0x50
   1a590:	str	r6, [sp, #84]	; 0x54
   1a594:	bl	1123c <__errno_location@plt>
   1a598:	ldr	r7, [pc, #372]	; 1a714 <__assert_fail@plt+0x9388>
   1a59c:	ldr	r2, [r7, #4]
   1a5a0:	ldr	r4, [r7]
   1a5a4:	cmp	r2, #0
   1a5a8:	ldr	r3, [r0]
   1a5ac:	mov	r8, r0
   1a5b0:	str	r3, [sp, #24]
   1a5b4:	movgt	r3, r9
   1a5b8:	bgt	1a620 <__assert_fail@plt+0x9294>
   1a5bc:	add	r5, r7, #8
   1a5c0:	cmp	r4, r5
   1a5c4:	str	r2, [sp, #36]	; 0x24
   1a5c8:	beq	1a6dc <__assert_fail@plt+0x9350>
   1a5cc:	mov	r3, #8
   1a5d0:	mov	r0, r4
   1a5d4:	str	r3, [sp]
   1a5d8:	rsb	r2, r2, #1
   1a5dc:	mvn	r3, #-2147483648	; 0x80000000
   1a5e0:	add	r1, sp, #36	; 0x24
   1a5e4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a5e8:	mov	r4, r0
   1a5ec:	str	r0, [r7]
   1a5f0:	ldr	r0, [r7, #4]
   1a5f4:	ldr	r2, [sp, #36]	; 0x24
   1a5f8:	mov	r1, #0
   1a5fc:	sub	r2, r2, r0
   1a600:	add	r0, r4, r0, lsl #3
   1a604:	lsl	r2, r2, #3
   1a608:	bl	11254 <memset@plt>
   1a60c:	ldr	r3, [sp, #40]	; 0x28
   1a610:	ldr	r5, [sp, #80]	; 0x50
   1a614:	ldr	r6, [sp, #84]	; 0x54
   1a618:	ldr	r2, [sp, #36]	; 0x24
   1a61c:	str	r2, [r7, #4]
   1a620:	ldr	r2, [sp, #44]	; 0x2c
   1a624:	ldr	r9, [r4]
   1a628:	ldr	r7, [r4, #4]
   1a62c:	orr	r2, r2, #1
   1a630:	add	fp, sp, #48	; 0x30
   1a634:	str	r2, [sp, #28]
   1a638:	str	r2, [sp, #4]
   1a63c:	str	r3, [sp]
   1a640:	str	r6, [sp, #16]
   1a644:	str	r5, [sp, #12]
   1a648:	mov	r1, r9
   1a64c:	mov	r0, r7
   1a650:	str	fp, [sp, #8]
   1a654:	mvn	r3, #0
   1a658:	mov	r2, sl
   1a65c:	bl	17114 <__assert_fail@plt+0x5d88>
   1a660:	cmp	r9, r0
   1a664:	bhi	1a6c8 <__assert_fail@plt+0x933c>
   1a668:	ldr	r3, [pc, #168]	; 1a718 <__assert_fail@plt+0x938c>
   1a66c:	add	r5, r0, #1
   1a670:	cmp	r7, r3
   1a674:	str	r5, [r4]
   1a678:	beq	1a684 <__assert_fail@plt+0x92f8>
   1a67c:	mov	r0, r7
   1a680:	bl	12dbc <__assert_fail@plt+0x1a30>
   1a684:	mov	r0, r5
   1a688:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1a68c:	ldr	lr, [sp, #84]	; 0x54
   1a690:	ldr	r3, [sp, #40]	; 0x28
   1a694:	ldr	ip, [sp, #80]	; 0x50
   1a698:	mov	r2, sl
   1a69c:	mov	r1, r5
   1a6a0:	str	r0, [r4, #4]
   1a6a4:	ldr	r4, [sp, #28]
   1a6a8:	str	r3, [sp]
   1a6ac:	str	fp, [sp, #8]
   1a6b0:	str	r4, [sp, #4]
   1a6b4:	str	lr, [sp, #16]
   1a6b8:	str	ip, [sp, #12]
   1a6bc:	mvn	r3, #0
   1a6c0:	mov	r7, r0
   1a6c4:	bl	17114 <__assert_fail@plt+0x5d88>
   1a6c8:	ldr	r3, [sp, #24]
   1a6cc:	mov	r0, r7
   1a6d0:	str	r3, [r8]
   1a6d4:	add	sp, sp, #92	; 0x5c
   1a6d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6dc:	mov	r3, #8
   1a6e0:	str	r3, [sp]
   1a6e4:	add	r1, sp, #36	; 0x24
   1a6e8:	rsb	r2, r2, #1
   1a6ec:	mov	r0, fp
   1a6f0:	mvn	r3, #-2147483648	; 0x80000000
   1a6f4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a6f8:	mov	r4, r0
   1a6fc:	ldm	r5, {r0, r1}
   1a700:	str	r4, [r7]
   1a704:	stm	r4, {r0, r1}
   1a708:	b	1a5f0 <__assert_fail@plt+0x9264>
   1a70c:	bl	11344 <abort@plt>
   1a710:	andeq	r0, r3, ip, asr #3
   1a714:	andeq	r0, r3, r4, asr #2
   1a718:	strdeq	r0, [r3], -ip
   1a71c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a720:	mov	r5, r0
   1a724:	ldr	lr, [pc, #464]	; 1a8fc <__assert_fail@plt+0x9570>
   1a728:	mov	r6, r1
   1a72c:	mov	sl, r2
   1a730:	mov	fp, r3
   1a734:	ldm	lr!, {r0, r1, r2, r3}
   1a738:	sub	sp, sp, #92	; 0x5c
   1a73c:	add	ip, sp, #40	; 0x28
   1a740:	cmp	r6, #0
   1a744:	cmpne	r5, #0
   1a748:	stmia	ip!, {r0, r1, r2, r3}
   1a74c:	moveq	r4, #1
   1a750:	ldm	lr!, {r0, r1, r2, r3}
   1a754:	movne	r4, #0
   1a758:	mov	r9, #10
   1a75c:	str	r4, [sp, #28]
   1a760:	stmia	ip!, {r0, r1, r2, r3}
   1a764:	ldm	lr, {r0, r1, r2, r3}
   1a768:	str	r9, [sp, #40]	; 0x28
   1a76c:	stm	ip, {r0, r1, r2, r3}
   1a770:	beq	1a8f8 <__assert_fail@plt+0x956c>
   1a774:	str	r5, [sp, #80]	; 0x50
   1a778:	str	r6, [sp, #84]	; 0x54
   1a77c:	bl	1123c <__errno_location@plt>
   1a780:	ldr	r7, [pc, #376]	; 1a900 <__assert_fail@plt+0x9574>
   1a784:	ldr	r2, [r7, #4]
   1a788:	ldr	r4, [r7]
   1a78c:	cmp	r2, #0
   1a790:	ldr	r3, [r0]
   1a794:	mov	r8, r0
   1a798:	str	r3, [sp, #24]
   1a79c:	movgt	r3, r9
   1a7a0:	bgt	1a808 <__assert_fail@plt+0x947c>
   1a7a4:	add	r5, r7, #8
   1a7a8:	cmp	r4, r5
   1a7ac:	str	r2, [sp, #36]	; 0x24
   1a7b0:	beq	1a8c8 <__assert_fail@plt+0x953c>
   1a7b4:	mov	r3, #8
   1a7b8:	mov	r0, r4
   1a7bc:	str	r3, [sp]
   1a7c0:	rsb	r2, r2, #1
   1a7c4:	mvn	r3, #-2147483648	; 0x80000000
   1a7c8:	add	r1, sp, #36	; 0x24
   1a7cc:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a7d0:	mov	r4, r0
   1a7d4:	str	r0, [r7]
   1a7d8:	ldr	r0, [r7, #4]
   1a7dc:	ldr	r2, [sp, #36]	; 0x24
   1a7e0:	mov	r1, #0
   1a7e4:	sub	r2, r2, r0
   1a7e8:	add	r0, r4, r0, lsl #3
   1a7ec:	lsl	r2, r2, #3
   1a7f0:	bl	11254 <memset@plt>
   1a7f4:	ldr	r3, [sp, #40]	; 0x28
   1a7f8:	ldr	r5, [sp, #80]	; 0x50
   1a7fc:	ldr	r6, [sp, #84]	; 0x54
   1a800:	ldr	r2, [sp, #36]	; 0x24
   1a804:	str	r2, [r7, #4]
   1a808:	ldr	r2, [sp, #44]	; 0x2c
   1a80c:	ldr	r9, [r4]
   1a810:	ldr	r7, [r4, #4]
   1a814:	orr	r2, r2, #1
   1a818:	str	r3, [sp]
   1a81c:	add	r3, sp, #48	; 0x30
   1a820:	str	r2, [sp, #28]
   1a824:	str	r2, [sp, #4]
   1a828:	str	r3, [sp, #8]
   1a82c:	str	r6, [sp, #16]
   1a830:	str	r5, [sp, #12]
   1a834:	mov	r1, r9
   1a838:	mov	r0, r7
   1a83c:	mov	r3, fp
   1a840:	mov	r2, sl
   1a844:	bl	17114 <__assert_fail@plt+0x5d88>
   1a848:	cmp	r9, r0
   1a84c:	bhi	1a8b4 <__assert_fail@plt+0x9528>
   1a850:	ldr	r3, [pc, #172]	; 1a904 <__assert_fail@plt+0x9578>
   1a854:	add	r5, r0, #1
   1a858:	cmp	r7, r3
   1a85c:	str	r5, [r4]
   1a860:	beq	1a86c <__assert_fail@plt+0x94e0>
   1a864:	mov	r0, r7
   1a868:	bl	12dbc <__assert_fail@plt+0x1a30>
   1a86c:	mov	r0, r5
   1a870:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1a874:	add	lr, sp, #48	; 0x30
   1a878:	ldr	ip, [sp, #84]	; 0x54
   1a87c:	mov	r1, r5
   1a880:	ldr	r5, [sp, #28]
   1a884:	mov	r3, fp
   1a888:	mov	r2, sl
   1a88c:	str	r0, [r4, #4]
   1a890:	ldr	r4, [sp, #80]	; 0x50
   1a894:	str	lr, [sp, #8]
   1a898:	ldr	lr, [sp, #40]	; 0x28
   1a89c:	str	r5, [sp, #4]
   1a8a0:	str	ip, [sp, #16]
   1a8a4:	str	r4, [sp, #12]
   1a8a8:	str	lr, [sp]
   1a8ac:	mov	r7, r0
   1a8b0:	bl	17114 <__assert_fail@plt+0x5d88>
   1a8b4:	ldr	r3, [sp, #24]
   1a8b8:	mov	r0, r7
   1a8bc:	str	r3, [r8]
   1a8c0:	add	sp, sp, #92	; 0x5c
   1a8c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8c8:	mov	r3, #8
   1a8cc:	str	r3, [sp]
   1a8d0:	add	r1, sp, #36	; 0x24
   1a8d4:	rsb	r2, r2, #1
   1a8d8:	ldr	r0, [sp, #28]
   1a8dc:	mvn	r3, #-2147483648	; 0x80000000
   1a8e0:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a8e4:	mov	r4, r0
   1a8e8:	ldm	r5, {r0, r1}
   1a8ec:	str	r4, [r7]
   1a8f0:	stm	r4, {r0, r1}
   1a8f4:	b	1a7d8 <__assert_fail@plt+0x944c>
   1a8f8:	bl	11344 <abort@plt>
   1a8fc:	andeq	r0, r3, ip, asr #3
   1a900:	andeq	r0, r3, r4, asr #2
   1a904:	strdeq	r0, [r3], -ip
   1a908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a90c:	sub	sp, sp, #52	; 0x34
   1a910:	mov	r5, r0
   1a914:	mov	sl, r1
   1a918:	mov	fp, r2
   1a91c:	bl	1123c <__errno_location@plt>
   1a920:	ldr	r4, [pc, #404]	; 1aabc <__assert_fail@plt+0x9730>
   1a924:	cmn	r5, #-2147483647	; 0x80000001
   1a928:	ldr	r6, [r4]
   1a92c:	mov	r8, r0
   1a930:	movne	r0, #0
   1a934:	moveq	r0, #1
   1a938:	ldr	r3, [r8]
   1a93c:	orrs	r0, r0, r5, lsr #31
   1a940:	str	r3, [sp, #28]
   1a944:	bne	1aab8 <__assert_fail@plt+0x972c>
   1a948:	ldr	r2, [r4, #4]
   1a94c:	cmp	r5, r2
   1a950:	blt	1a9b0 <__assert_fail@plt+0x9624>
   1a954:	add	r7, r4, #8
   1a958:	cmp	r6, r7
   1a95c:	str	r2, [sp, #44]	; 0x2c
   1a960:	beq	1aa88 <__assert_fail@plt+0x96fc>
   1a964:	mov	r3, #8
   1a968:	sub	r2, r5, r2
   1a96c:	mov	r0, r6
   1a970:	str	r3, [sp]
   1a974:	add	r2, r2, #1
   1a978:	mvn	r3, #-2147483648	; 0x80000000
   1a97c:	add	r1, sp, #44	; 0x2c
   1a980:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1a984:	mov	r6, r0
   1a988:	str	r0, [r4]
   1a98c:	ldr	r0, [r4, #4]
   1a990:	ldr	r2, [sp, #44]	; 0x2c
   1a994:	mov	r1, #0
   1a998:	sub	r2, r2, r0
   1a99c:	add	r0, r6, r0, lsl #3
   1a9a0:	lsl	r2, r2, #3
   1a9a4:	bl	11254 <memset@plt>
   1a9a8:	ldr	r3, [sp, #44]	; 0x2c
   1a9ac:	str	r3, [r4, #4]
   1a9b0:	ldr	r2, [r4, #56]	; 0x38
   1a9b4:	add	r3, r6, r5, lsl #3
   1a9b8:	ldr	r1, [r4, #20]
   1a9bc:	ldr	r7, [r3, #4]
   1a9c0:	ldr	r9, [r6, r5, lsl #3]
   1a9c4:	ldr	ip, [r4, #60]	; 0x3c
   1a9c8:	str	r3, [sp, #32]
   1a9cc:	ldr	r3, [r4, #16]
   1a9d0:	str	r2, [sp, #12]
   1a9d4:	ldr	r2, [pc, #228]	; 1aac0 <__assert_fail@plt+0x9734>
   1a9d8:	orr	r1, r1, #1
   1a9dc:	str	r1, [sp, #36]	; 0x24
   1a9e0:	str	r1, [sp, #4]
   1a9e4:	str	r2, [sp, #8]
   1a9e8:	str	r3, [sp]
   1a9ec:	mov	r0, r7
   1a9f0:	mov	r1, r9
   1a9f4:	str	ip, [sp, #16]
   1a9f8:	mov	r3, fp
   1a9fc:	mov	r2, sl
   1aa00:	bl	17114 <__assert_fail@plt+0x5d88>
   1aa04:	cmp	r9, r0
   1aa08:	bhi	1aa74 <__assert_fail@plt+0x96e8>
   1aa0c:	ldr	r3, [pc, #176]	; 1aac4 <__assert_fail@plt+0x9738>
   1aa10:	add	r9, r0, #1
   1aa14:	cmp	r7, r3
   1aa18:	str	r9, [r6, r5, lsl #3]
   1aa1c:	beq	1aa28 <__assert_fail@plt+0x969c>
   1aa20:	mov	r0, r7
   1aa24:	bl	12dbc <__assert_fail@plt+0x1a30>
   1aa28:	mov	r0, r9
   1aa2c:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1aa30:	ldr	ip, [sp, #32]
   1aa34:	ldr	lr, [r4, #60]	; 0x3c
   1aa38:	ldr	r5, [r4, #56]	; 0x38
   1aa3c:	mov	r3, fp
   1aa40:	mov	r2, sl
   1aa44:	mov	r1, r9
   1aa48:	str	r0, [ip, #4]
   1aa4c:	ldr	ip, [r4, #16]
   1aa50:	ldr	r4, [pc, #104]	; 1aac0 <__assert_fail@plt+0x9734>
   1aa54:	str	lr, [sp, #16]
   1aa58:	str	r4, [sp, #8]
   1aa5c:	ldr	r4, [sp, #36]	; 0x24
   1aa60:	str	r5, [sp, #12]
   1aa64:	str	r4, [sp, #4]
   1aa68:	str	ip, [sp]
   1aa6c:	mov	r7, r0
   1aa70:	bl	17114 <__assert_fail@plt+0x5d88>
   1aa74:	ldr	r3, [sp, #28]
   1aa78:	mov	r0, r7
   1aa7c:	str	r3, [r8]
   1aa80:	add	sp, sp, #52	; 0x34
   1aa84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa88:	mov	r3, #8
   1aa8c:	sub	r2, r5, r2
   1aa90:	str	r3, [sp]
   1aa94:	add	r1, sp, #44	; 0x2c
   1aa98:	add	r2, r2, #1
   1aa9c:	mvn	r3, #-2147483648	; 0x80000000
   1aaa0:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1aaa4:	mov	r6, r0
   1aaa8:	ldm	r7, {r0, r1}
   1aaac:	str	r6, [r4]
   1aab0:	stm	r6, {r0, r1}
   1aab4:	b	1a98c <__assert_fail@plt+0x9600>
   1aab8:	bl	11344 <abort@plt>
   1aabc:	andeq	r0, r3, r4, asr #2
   1aac0:	andeq	r0, r3, ip, asr r1
   1aac4:	strdeq	r0, [r3], -ip
   1aac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aacc:	sub	sp, sp, #44	; 0x2c
   1aad0:	mov	r9, r0
   1aad4:	mov	sl, r1
   1aad8:	bl	1123c <__errno_location@plt>
   1aadc:	ldr	r4, [pc, #360]	; 1ac4c <__assert_fail@plt+0x98c0>
   1aae0:	ldr	r2, [r4, #4]
   1aae4:	ldr	r5, [r4]
   1aae8:	cmp	r2, #0
   1aaec:	ldr	r3, [r0]
   1aaf0:	mov	r7, r0
   1aaf4:	str	r3, [sp, #24]
   1aaf8:	bgt	1ab54 <__assert_fail@plt+0x97c8>
   1aafc:	add	r6, r4, #8
   1ab00:	cmp	r5, r6
   1ab04:	str	r2, [sp, #36]	; 0x24
   1ab08:	beq	1ac1c <__assert_fail@plt+0x9890>
   1ab0c:	mov	r3, #8
   1ab10:	mov	r0, r5
   1ab14:	str	r3, [sp]
   1ab18:	rsb	r2, r2, #1
   1ab1c:	mvn	r3, #-2147483648	; 0x80000000
   1ab20:	add	r1, sp, #36	; 0x24
   1ab24:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1ab28:	mov	r5, r0
   1ab2c:	str	r0, [r4]
   1ab30:	ldr	r0, [r4, #4]
   1ab34:	ldr	r2, [sp, #36]	; 0x24
   1ab38:	mov	r1, #0
   1ab3c:	sub	r2, r2, r0
   1ab40:	add	r0, r5, r0, lsl #3
   1ab44:	lsl	r2, r2, #3
   1ab48:	bl	11254 <memset@plt>
   1ab4c:	ldr	r3, [sp, #36]	; 0x24
   1ab50:	str	r3, [r4, #4]
   1ab54:	ldr	r1, [r4, #20]
   1ab58:	ldr	r8, [r5]
   1ab5c:	ldr	r6, [r5, #4]
   1ab60:	ldr	r2, [r4, #56]	; 0x38
   1ab64:	ldr	r3, [r4, #16]
   1ab68:	ldr	ip, [r4, #60]	; 0x3c
   1ab6c:	ldr	fp, [pc, #220]	; 1ac50 <__assert_fail@plt+0x98c4>
   1ab70:	orr	r1, r1, #1
   1ab74:	str	r1, [sp, #28]
   1ab78:	str	r1, [sp, #4]
   1ab7c:	str	r2, [sp, #12]
   1ab80:	str	r3, [sp]
   1ab84:	mov	r1, r8
   1ab88:	mov	r0, r6
   1ab8c:	str	ip, [sp, #16]
   1ab90:	str	fp, [sp, #8]
   1ab94:	mov	r3, sl
   1ab98:	mov	r2, r9
   1ab9c:	bl	17114 <__assert_fail@plt+0x5d88>
   1aba0:	cmp	r8, r0
   1aba4:	bhi	1ac08 <__assert_fail@plt+0x987c>
   1aba8:	ldr	r3, [pc, #164]	; 1ac54 <__assert_fail@plt+0x98c8>
   1abac:	add	r8, r0, #1
   1abb0:	cmp	r6, r3
   1abb4:	str	r8, [r5]
   1abb8:	beq	1abc4 <__assert_fail@plt+0x9838>
   1abbc:	mov	r0, r6
   1abc0:	bl	12dbc <__assert_fail@plt+0x1a30>
   1abc4:	mov	r0, r8
   1abc8:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1abcc:	ldr	lr, [r4, #60]	; 0x3c
   1abd0:	ldr	ip, [r4, #16]
   1abd4:	mov	r3, sl
   1abd8:	mov	r2, r9
   1abdc:	mov	r1, r8
   1abe0:	str	r0, [r5, #4]
   1abe4:	ldr	r5, [r4, #56]	; 0x38
   1abe8:	ldr	r4, [sp, #28]
   1abec:	str	fp, [sp, #8]
   1abf0:	str	r4, [sp, #4]
   1abf4:	str	lr, [sp, #16]
   1abf8:	str	r5, [sp, #12]
   1abfc:	str	ip, [sp]
   1ac00:	mov	r6, r0
   1ac04:	bl	17114 <__assert_fail@plt+0x5d88>
   1ac08:	ldr	r3, [sp, #24]
   1ac0c:	mov	r0, r6
   1ac10:	str	r3, [r7]
   1ac14:	add	sp, sp, #44	; 0x2c
   1ac18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac1c:	mov	r3, #8
   1ac20:	str	r3, [sp]
   1ac24:	add	r1, sp, #36	; 0x24
   1ac28:	rsb	r2, r2, #1
   1ac2c:	mvn	r3, #-2147483648	; 0x80000000
   1ac30:	mov	r0, #0
   1ac34:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1ac38:	mov	r5, r0
   1ac3c:	ldm	r6, {r0, r1}
   1ac40:	str	r5, [r4]
   1ac44:	stm	r5, {r0, r1}
   1ac48:	b	1ab30 <__assert_fail@plt+0x97a4>
   1ac4c:	andeq	r0, r3, r4, asr #2
   1ac50:	andeq	r0, r3, ip, asr r1
   1ac54:	strdeq	r0, [r3], -ip
   1ac58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ac5c:	sub	sp, sp, #44	; 0x2c
   1ac60:	mov	r5, r0
   1ac64:	mov	sl, r1
   1ac68:	bl	1123c <__errno_location@plt>
   1ac6c:	ldr	r4, [pc, #396]	; 1ae00 <__assert_fail@plt+0x9a74>
   1ac70:	cmn	r5, #-2147483647	; 0x80000001
   1ac74:	ldr	r6, [r4]
   1ac78:	mov	r8, r0
   1ac7c:	movne	r0, #0
   1ac80:	moveq	r0, #1
   1ac84:	ldr	r3, [r8]
   1ac88:	orrs	r0, r0, r5, lsr #31
   1ac8c:	str	r3, [sp, #24]
   1ac90:	bne	1adfc <__assert_fail@plt+0x9a70>
   1ac94:	ldr	r2, [r4, #4]
   1ac98:	cmp	r5, r2
   1ac9c:	blt	1acfc <__assert_fail@plt+0x9970>
   1aca0:	add	r7, r4, #8
   1aca4:	cmp	r6, r7
   1aca8:	str	r2, [sp, #36]	; 0x24
   1acac:	beq	1adcc <__assert_fail@plt+0x9a40>
   1acb0:	mov	r3, #8
   1acb4:	sub	r2, r5, r2
   1acb8:	mov	r0, r6
   1acbc:	str	r3, [sp]
   1acc0:	add	r2, r2, #1
   1acc4:	mvn	r3, #-2147483648	; 0x80000000
   1acc8:	add	r1, sp, #36	; 0x24
   1accc:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1acd0:	mov	r6, r0
   1acd4:	str	r0, [r4]
   1acd8:	ldr	r0, [r4, #4]
   1acdc:	ldr	r2, [sp, #36]	; 0x24
   1ace0:	mov	r1, #0
   1ace4:	sub	r2, r2, r0
   1ace8:	add	r0, r6, r0, lsl #3
   1acec:	lsl	r2, r2, #3
   1acf0:	bl	11254 <memset@plt>
   1acf4:	ldr	r3, [sp, #36]	; 0x24
   1acf8:	str	r3, [r4, #4]
   1acfc:	ldr	r2, [r4, #56]	; 0x38
   1ad00:	add	fp, r6, r5, lsl #3
   1ad04:	ldr	r1, [r4, #20]
   1ad08:	ldr	r9, [r6, r5, lsl #3]
   1ad0c:	ldr	r7, [fp, #4]
   1ad10:	ldr	r3, [r4, #16]
   1ad14:	ldr	ip, [r4, #60]	; 0x3c
   1ad18:	str	r2, [sp, #12]
   1ad1c:	ldr	r2, [pc, #224]	; 1ae04 <__assert_fail@plt+0x9a78>
   1ad20:	orr	r1, r1, #1
   1ad24:	str	r1, [sp, #28]
   1ad28:	str	r1, [sp, #4]
   1ad2c:	str	r2, [sp, #8]
   1ad30:	str	r3, [sp]
   1ad34:	mov	r0, r7
   1ad38:	mov	r1, r9
   1ad3c:	str	ip, [sp, #16]
   1ad40:	mvn	r3, #0
   1ad44:	mov	r2, sl
   1ad48:	bl	17114 <__assert_fail@plt+0x5d88>
   1ad4c:	cmp	r9, r0
   1ad50:	bhi	1adb8 <__assert_fail@plt+0x9a2c>
   1ad54:	ldr	r3, [pc, #172]	; 1ae08 <__assert_fail@plt+0x9a7c>
   1ad58:	add	r9, r0, #1
   1ad5c:	cmp	r7, r3
   1ad60:	str	r9, [r6, r5, lsl #3]
   1ad64:	beq	1ad70 <__assert_fail@plt+0x99e4>
   1ad68:	mov	r0, r7
   1ad6c:	bl	12dbc <__assert_fail@plt+0x1a30>
   1ad70:	mov	r0, r9
   1ad74:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1ad78:	ldr	ip, [r4, #60]	; 0x3c
   1ad7c:	ldr	r3, [r4, #16]
   1ad80:	ldr	lr, [r4, #56]	; 0x38
   1ad84:	ldr	r4, [pc, #120]	; 1ae04 <__assert_fail@plt+0x9a78>
   1ad88:	mov	r2, sl
   1ad8c:	mov	r1, r9
   1ad90:	str	r0, [fp, #4]
   1ad94:	str	r4, [sp, #8]
   1ad98:	ldr	r4, [sp, #28]
   1ad9c:	str	r3, [sp]
   1ada0:	str	r4, [sp, #4]
   1ada4:	str	ip, [sp, #16]
   1ada8:	str	lr, [sp, #12]
   1adac:	mvn	r3, #0
   1adb0:	mov	r7, r0
   1adb4:	bl	17114 <__assert_fail@plt+0x5d88>
   1adb8:	ldr	r3, [sp, #24]
   1adbc:	mov	r0, r7
   1adc0:	str	r3, [r8]
   1adc4:	add	sp, sp, #44	; 0x2c
   1adc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1adcc:	mov	r3, #8
   1add0:	sub	r2, r5, r2
   1add4:	str	r3, [sp]
   1add8:	add	r1, sp, #36	; 0x24
   1addc:	add	r2, r2, #1
   1ade0:	mvn	r3, #-2147483648	; 0x80000000
   1ade4:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1ade8:	mov	r6, r0
   1adec:	ldm	r7, {r0, r1}
   1adf0:	str	r6, [r4]
   1adf4:	stm	r6, {r0, r1}
   1adf8:	b	1acd8 <__assert_fail@plt+0x994c>
   1adfc:	bl	11344 <abort@plt>
   1ae00:	andeq	r0, r3, r4, asr #2
   1ae04:	andeq	r0, r3, ip, asr r1
   1ae08:	strdeq	r0, [r3], -ip
   1ae0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae10:	sub	sp, sp, #44	; 0x2c
   1ae14:	mov	sl, r0
   1ae18:	bl	1123c <__errno_location@plt>
   1ae1c:	ldr	r4, [pc, #348]	; 1af80 <__assert_fail@plt+0x9bf4>
   1ae20:	ldr	r2, [r4, #4]
   1ae24:	ldr	r5, [r4]
   1ae28:	cmp	r2, #0
   1ae2c:	ldr	r3, [r0]
   1ae30:	mov	r8, r0
   1ae34:	str	r3, [sp, #28]
   1ae38:	bgt	1ae94 <__assert_fail@plt+0x9b08>
   1ae3c:	add	r6, r4, #8
   1ae40:	cmp	r5, r6
   1ae44:	str	r2, [sp, #36]	; 0x24
   1ae48:	beq	1af50 <__assert_fail@plt+0x9bc4>
   1ae4c:	mov	r3, #8
   1ae50:	mov	r0, r5
   1ae54:	str	r3, [sp]
   1ae58:	rsb	r2, r2, #1
   1ae5c:	mvn	r3, #-2147483648	; 0x80000000
   1ae60:	add	r1, sp, #36	; 0x24
   1ae64:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1ae68:	mov	r5, r0
   1ae6c:	str	r0, [r4]
   1ae70:	ldr	r0, [r4, #4]
   1ae74:	ldr	r2, [sp, #36]	; 0x24
   1ae78:	mov	r1, #0
   1ae7c:	sub	r2, r2, r0
   1ae80:	add	r0, r5, r0, lsl #3
   1ae84:	lsl	r2, r2, #3
   1ae88:	bl	11254 <memset@plt>
   1ae8c:	ldr	r3, [sp, #36]	; 0x24
   1ae90:	str	r3, [r4, #4]
   1ae94:	ldr	r7, [r4, #20]
   1ae98:	ldr	r9, [r5]
   1ae9c:	ldr	r6, [r5, #4]
   1aea0:	ldr	r2, [r4, #56]	; 0x38
   1aea4:	ldr	r3, [r4, #16]
   1aea8:	ldr	ip, [r4, #60]	; 0x3c
   1aeac:	ldr	fp, [pc, #208]	; 1af84 <__assert_fail@plt+0x9bf8>
   1aeb0:	orr	r7, r7, #1
   1aeb4:	str	r2, [sp, #12]
   1aeb8:	str	r3, [sp]
   1aebc:	str	r7, [sp, #4]
   1aec0:	mov	r1, r9
   1aec4:	mov	r0, r6
   1aec8:	str	ip, [sp, #16]
   1aecc:	str	fp, [sp, #8]
   1aed0:	mvn	r3, #0
   1aed4:	mov	r2, sl
   1aed8:	bl	17114 <__assert_fail@plt+0x5d88>
   1aedc:	cmp	r9, r0
   1aee0:	bhi	1af3c <__assert_fail@plt+0x9bb0>
   1aee4:	ldr	r3, [pc, #156]	; 1af88 <__assert_fail@plt+0x9bfc>
   1aee8:	add	r9, r0, #1
   1aeec:	cmp	r6, r3
   1aef0:	str	r9, [r5]
   1aef4:	beq	1af00 <__assert_fail@plt+0x9b74>
   1aef8:	mov	r0, r6
   1aefc:	bl	12dbc <__assert_fail@plt+0x1a30>
   1af00:	mov	r0, r9
   1af04:	bl	1c0d8 <__assert_fail@plt+0xad4c>
   1af08:	ldr	ip, [r4, #60]	; 0x3c
   1af0c:	ldr	r3, [r4, #16]
   1af10:	ldr	lr, [r4, #56]	; 0x38
   1af14:	mov	r2, sl
   1af18:	mov	r1, r9
   1af1c:	str	r0, [r5, #4]
   1af20:	str	r3, [sp]
   1af24:	stmib	sp, {r7, fp}
   1af28:	str	ip, [sp, #16]
   1af2c:	str	lr, [sp, #12]
   1af30:	mvn	r3, #0
   1af34:	mov	r6, r0
   1af38:	bl	17114 <__assert_fail@plt+0x5d88>
   1af3c:	ldr	r3, [sp, #28]
   1af40:	mov	r0, r6
   1af44:	str	r3, [r8]
   1af48:	add	sp, sp, #44	; 0x2c
   1af4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af50:	mov	r3, #8
   1af54:	str	r3, [sp]
   1af58:	add	r1, sp, #36	; 0x24
   1af5c:	rsb	r2, r2, #1
   1af60:	mvn	r3, #-2147483648	; 0x80000000
   1af64:	mov	r0, #0
   1af68:	bl	1c2f4 <__assert_fail@plt+0xaf68>
   1af6c:	mov	r5, r0
   1af70:	ldm	r6, {r0, r1}
   1af74:	str	r5, [r4]
   1af78:	stm	r5, {r0, r1}
   1af7c:	b	1ae70 <__assert_fail@plt+0x9ae4>
   1af80:	andeq	r0, r3, r4, asr #2
   1af84:	andeq	r0, r3, ip, asr r1
   1af88:	strdeq	r0, [r3], -ip
   1af8c:	push	{r4, r6, r7, lr}
   1af90:	sub	sp, sp, #104	; 0x68
   1af94:	mov	r4, r0
   1af98:	mov	r2, sp
   1af9c:	ldr	r1, [pc, #52]	; 1afd8 <__assert_fail@plt+0x9c4c>
   1afa0:	mov	r0, #3
   1afa4:	bl	1135c <__lxstat64@plt>
   1afa8:	cmp	r0, #0
   1afac:	bne	1afcc <__assert_fail@plt+0x9c40>
   1afb0:	ldrd	r6, [sp, #96]	; 0x60
   1afb4:	ldrd	r2, [sp]
   1afb8:	mov	r0, r4
   1afbc:	strd	r6, [r4]
   1afc0:	strd	r2, [r4, #8]
   1afc4:	add	sp, sp, #104	; 0x68
   1afc8:	pop	{r4, r6, r7, pc}
   1afcc:	mov	r0, #0
   1afd0:	add	sp, sp, #104	; 0x68
   1afd4:	pop	{r4, r6, r7, pc}
   1afd8:	andeq	lr, r1, r4, asr r8
   1afdc:	cmp	r0, #2
   1afe0:	push	{r4, r5, r6, r7, r8, lr}
   1afe4:	mov	r4, r0
   1afe8:	bhi	1b010 <__assert_fail@plt+0x9c84>
   1afec:	bl	1d490 <__assert_fail@plt+0xc104>
   1aff0:	mov	r7, r0
   1aff4:	bl	1123c <__errno_location@plt>
   1aff8:	mov	r5, r0
   1affc:	mov	r0, r4
   1b000:	ldr	r6, [r5]
   1b004:	mov	r4, r7
   1b008:	bl	11350 <close@plt>
   1b00c:	str	r6, [r5]
   1b010:	mov	r0, r4
   1b014:	pop	{r4, r5, r6, r7, r8, pc}
   1b018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b01c:	sub	sp, sp, #52	; 0x34
   1b020:	cmp	r2, #0
   1b024:	mov	r4, r2
   1b028:	str	r2, [sp, #8]
   1b02c:	mov	r5, r1
   1b030:	str	r1, [sp, #20]
   1b034:	mov	sl, r3
   1b038:	mov	r8, r0
   1b03c:	beq	1b398 <__assert_fail@plt+0xa00c>
   1b040:	mov	r1, #58	; 0x3a
   1b044:	bl	11218 <strchr@plt>
   1b048:	ldr	r3, [r5]
   1b04c:	mov	r2, r4
   1b050:	str	r3, [sp, #12]
   1b054:	ldr	r3, [r4]
   1b058:	str	r3, [sp, #16]
   1b05c:	clz	r5, r0
   1b060:	mov	r4, r0
   1b064:	lsr	r5, r5, #5
   1b068:	cmp	sl, #0
   1b06c:	movne	r3, #0
   1b070:	strne	r3, [sl]
   1b074:	ldr	r3, [sp, #88]	; 0x58
   1b078:	cmp	r3, #0
   1b07c:	movne	r2, r3
   1b080:	movne	r3, #0
   1b084:	strne	r3, [r2]
   1b088:	cmp	r4, #0
   1b08c:	beq	1b3b0 <__assert_fail@plt+0xa024>
   1b090:	subs	r7, r4, r8
   1b094:	bne	1b2ec <__assert_fail@plt+0x9f60>
   1b098:	ldrb	r6, [r4, #1]
   1b09c:	cmp	r6, #0
   1b0a0:	movne	r6, r7
   1b0a4:	beq	1b3c0 <__assert_fail@plt+0xa034>
   1b0a8:	cmp	r6, #0
   1b0ac:	add	r9, r4, #1
   1b0b0:	beq	1b5a8 <__assert_fail@plt+0xa21c>
   1b0b4:	ldrb	r3, [r6]
   1b0b8:	cmp	r3, #43	; 0x2b
   1b0bc:	beq	1b158 <__assert_fail@plt+0x9dcc>
   1b0c0:	mov	r0, r6
   1b0c4:	bl	11068 <getpwnam@plt>
   1b0c8:	cmp	r0, #0
   1b0cc:	beq	1b158 <__assert_fail@plt+0x9dcc>
   1b0d0:	cmp	r4, #0
   1b0d4:	clz	r7, r9
   1b0d8:	ldr	r3, [r0, #8]
   1b0dc:	lsr	r7, r7, #5
   1b0e0:	moveq	r7, #0
   1b0e4:	cmp	r7, #0
   1b0e8:	str	r3, [sp, #12]
   1b0ec:	bne	1b320 <__assert_fail@plt+0x9f94>
   1b0f0:	adds	r4, r9, #0
   1b0f4:	mov	fp, r7
   1b0f8:	movne	r4, #1
   1b0fc:	bl	112b4 <endpwent@plt>
   1b100:	cmp	r4, #0
   1b104:	beq	1b188 <__assert_fail@plt+0x9dfc>
   1b108:	ldrb	r3, [r9]
   1b10c:	cmp	r3, #43	; 0x2b
   1b110:	bne	1b2bc <__assert_fail@plt+0x9f30>
   1b114:	ldr	r2, [pc, #1352]	; 1b664 <__assert_fail@plt+0xa2d8>
   1b118:	add	r3, sp, #24
   1b11c:	str	r2, [sp]
   1b120:	mov	r1, #0
   1b124:	mov	r2, #10
   1b128:	mov	r0, r9
   1b12c:	bl	1c7b8 <__assert_fail@plt+0xb42c>
   1b130:	cmp	r0, #0
   1b134:	bne	1b354 <__assert_fail@plt+0x9fc8>
   1b138:	ldr	r3, [sp, #24]
   1b13c:	ldr	r2, [sp, #16]
   1b140:	cmn	r3, #1
   1b144:	movne	r2, r3
   1b148:	ldr	fp, [pc, #1304]	; 1b668 <__assert_fail@plt+0xa2dc>
   1b14c:	str	r2, [sp, #16]
   1b150:	movne	fp, #0
   1b154:	b	1b2d8 <__assert_fail@plt+0x9f4c>
   1b158:	adds	r4, r4, #0
   1b15c:	movne	r4, #1
   1b160:	cmp	r9, #0
   1b164:	movne	r4, #0
   1b168:	cmp	r4, #0
   1b16c:	beq	1b5e8 <__assert_fail@plt+0xa25c>
   1b170:	mov	r4, #0
   1b174:	bl	112b4 <endpwent@plt>
   1b178:	cmp	r4, #0
   1b17c:	ldr	fp, [pc, #1256]	; 1b66c <__assert_fail@plt+0xa2e0>
   1b180:	mov	r7, r4
   1b184:	bne	1b108 <__assert_fail@plt+0x9d7c>
   1b188:	cmp	fp, #0
   1b18c:	beq	1b3c4 <__assert_fail@plt+0xa038>
   1b190:	mov	r0, r6
   1b194:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b198:	mov	r0, r7
   1b19c:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b1a0:	ldr	r3, [sp, #8]
   1b1a4:	mov	r1, fp
   1b1a8:	mov	r2, #5
   1b1ac:	mov	r0, #0
   1b1b0:	cmp	r3, #0
   1b1b4:	moveq	r7, #0
   1b1b8:	andne	r7, r5, #1
   1b1bc:	bl	11104 <dcgettext@plt>
   1b1c0:	cmp	r7, #0
   1b1c4:	mov	r4, r0
   1b1c8:	beq	1b2b0 <__assert_fail@plt+0x9f24>
   1b1cc:	cmp	r4, #0
   1b1d0:	beq	1b424 <__assert_fail@plt+0xa098>
   1b1d4:	mov	r1, #46	; 0x2e
   1b1d8:	mov	r0, r8
   1b1dc:	bl	11218 <strchr@plt>
   1b1e0:	subs	r9, r0, #0
   1b1e4:	beq	1b2b0 <__assert_fail@plt+0x9f24>
   1b1e8:	ldr	r3, [sp, #20]
   1b1ec:	cmp	sl, #0
   1b1f0:	ldr	r3, [r3]
   1b1f4:	str	r3, [sp, #12]
   1b1f8:	ldr	r3, [sp, #8]
   1b1fc:	ldr	fp, [r3]
   1b200:	movne	r3, #0
   1b204:	strne	r3, [sl]
   1b208:	ldr	r3, [sp, #88]	; 0x58
   1b20c:	cmp	r3, #0
   1b210:	movne	r2, r3
   1b214:	movne	r3, #0
   1b218:	strne	r3, [r2]
   1b21c:	subs	r5, r9, r8
   1b220:	bne	1b434 <__assert_fail@plt+0xa0a8>
   1b224:	ldrb	r3, [r9, #1]
   1b228:	cmp	r3, #0
   1b22c:	beq	1b554 <__assert_fail@plt+0xa1c8>
   1b230:	add	r8, r9, #1
   1b234:	adds	r9, r9, #1
   1b238:	mov	r6, r5
   1b23c:	mov	r7, r5
   1b240:	movne	r9, #1
   1b244:	cmp	r9, #0
   1b248:	beq	1b280 <__assert_fail@plt+0x9ef4>
   1b24c:	ldrb	r3, [r8]
   1b250:	cmp	r3, #43	; 0x2b
   1b254:	beq	1b35c <__assert_fail@plt+0x9fd0>
   1b258:	mov	r0, r8
   1b25c:	bl	11380 <getgrnam@plt>
   1b260:	cmp	r0, #0
   1b264:	movne	r7, #0
   1b268:	ldrne	fp, [r0, #8]
   1b26c:	beq	1b35c <__assert_fail@plt+0x9fd0>
   1b270:	bl	11044 <endgrent@plt>
   1b274:	mov	r0, r8
   1b278:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1b27c:	mov	r5, r0
   1b280:	cmp	r7, #0
   1b284:	beq	1b55c <__assert_fail@plt+0xa1d0>
   1b288:	mov	r0, r6
   1b28c:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b290:	mov	r0, r5
   1b294:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b298:	mov	r1, r7
   1b29c:	mov	r2, #5
   1b2a0:	mov	r0, #0
   1b2a4:	bl	11104 <dcgettext@plt>
   1b2a8:	cmp	r0, #0
   1b2ac:	beq	1b424 <__assert_fail@plt+0xa098>
   1b2b0:	mov	r0, r4
   1b2b4:	add	sp, sp, #52	; 0x34
   1b2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2bc:	mov	r0, r9
   1b2c0:	bl	11380 <getgrnam@plt>
   1b2c4:	cmp	r0, #0
   1b2c8:	beq	1b114 <__assert_fail@plt+0x9d88>
   1b2cc:	ldr	r3, [r0, #8]
   1b2d0:	mov	fp, #0
   1b2d4:	str	r3, [sp, #16]
   1b2d8:	bl	11044 <endgrent@plt>
   1b2dc:	mov	r0, r9
   1b2e0:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1b2e4:	mov	r7, r0
   1b2e8:	b	1b188 <__assert_fail@plt+0x9dfc>
   1b2ec:	add	r1, r7, #1
   1b2f0:	mov	r0, r8
   1b2f4:	bl	1c650 <__assert_fail@plt+0xb2c4>
   1b2f8:	ldrb	r9, [r4, #1]
   1b2fc:	mov	r3, #0
   1b300:	cmp	r9, r3
   1b304:	mov	r6, r0
   1b308:	strb	r3, [r0, r7]
   1b30c:	bne	1b0a8 <__assert_fail@plt+0x9d1c>
   1b310:	ldrb	r3, [r6]
   1b314:	cmp	r3, #43	; 0x2b
   1b318:	bne	1b0c0 <__assert_fail@plt+0x9d34>
   1b31c:	b	1b158 <__assert_fail@plt+0x9dcc>
   1b320:	ldr	r3, [r0, #12]
   1b324:	mov	r0, r3
   1b328:	str	r3, [sp, #16]
   1b32c:	bl	11374 <getgrgid@plt>
   1b330:	subs	r1, r0, #0
   1b334:	beq	1b5b4 <__assert_fail@plt+0xa228>
   1b338:	ldr	r0, [r1]
   1b33c:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1b340:	mov	r4, #0
   1b344:	mov	fp, r4
   1b348:	mov	r7, r0
   1b34c:	bl	11044 <endgrent@plt>
   1b350:	b	1b0fc <__assert_fail@plt+0x9d70>
   1b354:	ldr	fp, [pc, #780]	; 1b668 <__assert_fail@plt+0xa2dc>
   1b358:	b	1b2d8 <__assert_fail@plt+0x9f4c>
   1b35c:	ldr	r2, [pc, #768]	; 1b664 <__assert_fail@plt+0xa2d8>
   1b360:	add	r3, sp, #24
   1b364:	str	r2, [sp]
   1b368:	mov	r1, #0
   1b36c:	mov	r2, #10
   1b370:	mov	r0, r8
   1b374:	bl	1c7b8 <__assert_fail@plt+0xb42c>
   1b378:	cmp	r0, #0
   1b37c:	bne	1b5a0 <__assert_fail@plt+0xa214>
   1b380:	ldr	r3, [sp, #24]
   1b384:	ldr	r7, [pc, #732]	; 1b668 <__assert_fail@plt+0xa2dc>
   1b388:	cmn	r3, #1
   1b38c:	movne	fp, r3
   1b390:	movne	r7, #0
   1b394:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b398:	ldr	r3, [r1]
   1b39c:	mov	r5, #1
   1b3a0:	str	r3, [sp, #12]
   1b3a4:	mvn	r3, #0
   1b3a8:	str	r3, [sp, #16]
   1b3ac:	b	1b068 <__assert_fail@plt+0x9cdc>
   1b3b0:	ldrb	r3, [r8]
   1b3b4:	cmp	r3, #0
   1b3b8:	moveq	r6, r4
   1b3bc:	bne	1b5c4 <__assert_fail@plt+0xa238>
   1b3c0:	mov	r7, r6
   1b3c4:	ldr	r3, [sp, #8]
   1b3c8:	ldr	r2, [sp, #20]
   1b3cc:	cmp	r3, #0
   1b3d0:	ldr	r1, [sp, #12]
   1b3d4:	str	r1, [r2]
   1b3d8:	ldrne	r2, [sp, #16]
   1b3dc:	strne	r2, [r3]
   1b3e0:	ldr	r3, [sp, #88]	; 0x58
   1b3e4:	cmp	sl, #0
   1b3e8:	strne	r6, [sl]
   1b3ec:	movne	r6, #0
   1b3f0:	cmp	r3, #0
   1b3f4:	strne	r7, [r3]
   1b3f8:	movne	r7, #0
   1b3fc:	mov	r0, r6
   1b400:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b404:	mov	r0, r7
   1b408:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b40c:	ldr	r3, [sp, #8]
   1b410:	cmp	r3, #0
   1b414:	moveq	r4, #0
   1b418:	andne	r4, r5, #1
   1b41c:	cmp	r4, #0
   1b420:	beq	1b2b0 <__assert_fail@plt+0x9f24>
   1b424:	mov	r4, #0
   1b428:	mov	r0, r4
   1b42c:	add	sp, sp, #52	; 0x34
   1b430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b434:	mov	r0, r8
   1b438:	add	r1, r5, #1
   1b43c:	bl	1c650 <__assert_fail@plt+0xb2c4>
   1b440:	ldrb	r8, [r9, #1]
   1b444:	mov	r3, #0
   1b448:	cmp	r8, r3
   1b44c:	mov	r6, r0
   1b450:	strb	r3, [r0, r5]
   1b454:	bne	1b4b0 <__assert_fail@plt+0xa124>
   1b458:	ldrb	r3, [r0]
   1b45c:	cmp	r3, #43	; 0x2b
   1b460:	beq	1b5d8 <__assert_fail@plt+0xa24c>
   1b464:	bl	11068 <getpwnam@plt>
   1b468:	cmp	r0, #0
   1b46c:	beq	1b650 <__assert_fail@plt+0xa2c4>
   1b470:	ldr	r3, [r0, #8]
   1b474:	mov	r9, r8
   1b478:	str	r3, [sp, #12]
   1b47c:	ldr	fp, [r0, #12]
   1b480:	mov	r0, fp
   1b484:	bl	11374 <getgrgid@plt>
   1b488:	subs	r1, r0, #0
   1b48c:	beq	1b640 <__assert_fail@plt+0xa2b4>
   1b490:	ldr	r0, [r1]
   1b494:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1b498:	mov	r8, #0
   1b49c:	mov	r7, r8
   1b4a0:	mov	r5, r0
   1b4a4:	bl	11044 <endgrent@plt>
   1b4a8:	bl	112b4 <endpwent@plt>
   1b4ac:	b	1b244 <__assert_fail@plt+0x9eb8>
   1b4b0:	ldrb	r2, [r0]
   1b4b4:	str	r3, [sp, #16]
   1b4b8:	add	r8, r9, #1
   1b4bc:	cmp	r2, #43	; 0x2b
   1b4c0:	bne	1b520 <__assert_fail@plt+0xa194>
   1b4c4:	cmp	r8, #0
   1b4c8:	beq	1b650 <__assert_fail@plt+0xa2c4>
   1b4cc:	ldr	r2, [pc, #400]	; 1b664 <__assert_fail@plt+0xa2d8>
   1b4d0:	add	r3, sp, #24
   1b4d4:	str	r2, [sp]
   1b4d8:	mov	r1, #0
   1b4dc:	mov	r2, #10
   1b4e0:	mov	r0, r6
   1b4e4:	bl	1c7b8 <__assert_fail@plt+0xb42c>
   1b4e8:	cmp	r0, #0
   1b4ec:	bne	1b634 <__assert_fail@plt+0xa2a8>
   1b4f0:	ldr	r3, [sp, #24]
   1b4f4:	ldr	r2, [pc, #372]	; 1b670 <__assert_fail@plt+0xa2e4>
   1b4f8:	cmn	r3, #1
   1b4fc:	ldr	r1, [sp, #12]
   1b500:	movne	r9, r7
   1b504:	moveq	r9, #0
   1b508:	moveq	r7, r2
   1b50c:	movne	r7, #0
   1b510:	movne	r1, r3
   1b514:	str	r1, [sp, #12]
   1b518:	mov	r5, #0
   1b51c:	b	1b4a8 <__assert_fail@plt+0xa11c>
   1b520:	bl	11068 <getpwnam@plt>
   1b524:	adds	r9, r8, #0
   1b528:	movne	r9, #1
   1b52c:	ldr	r3, [sp, #16]
   1b530:	cmp	r0, #0
   1b534:	beq	1b4c4 <__assert_fail@plt+0xa138>
   1b538:	cmp	r8, #0
   1b53c:	ldr	r2, [r0, #8]
   1b540:	movne	r5, r3
   1b544:	str	r2, [sp, #12]
   1b548:	movne	r7, r5
   1b54c:	bne	1b4a8 <__assert_fail@plt+0xa11c>
   1b550:	b	1b47c <__assert_fail@plt+0xa0f0>
   1b554:	mov	r5, r3
   1b558:	mov	r6, r3
   1b55c:	ldr	r3, [sp, #20]
   1b560:	ldr	r2, [sp, #12]
   1b564:	cmp	sl, #0
   1b568:	str	r2, [r3]
   1b56c:	ldr	r3, [sp, #8]
   1b570:	str	fp, [r3]
   1b574:	ldr	r3, [sp, #88]	; 0x58
   1b578:	strne	r6, [sl]
   1b57c:	movne	r6, #0
   1b580:	cmp	r3, #0
   1b584:	strne	r5, [r3]
   1b588:	movne	r5, #0
   1b58c:	mov	r0, r6
   1b590:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b594:	mov	r0, r5
   1b598:	bl	12dbc <__assert_fail@plt+0x1a30>
   1b59c:	b	1b424 <__assert_fail@plt+0xa098>
   1b5a0:	ldr	r7, [pc, #192]	; 1b668 <__assert_fail@plt+0xa2dc>
   1b5a4:	b	1b270 <__assert_fail@plt+0x9ee4>
   1b5a8:	cmp	r9, #0
   1b5ac:	bne	1b108 <__assert_fail@plt+0x9d7c>
   1b5b0:	b	1b3c0 <__assert_fail@plt+0xa034>
   1b5b4:	add	r2, sp, #24
   1b5b8:	ldr	r0, [sp, #16]
   1b5bc:	bl	16e4c <__assert_fail@plt+0x5ac0>
   1b5c0:	b	1b33c <__assert_fail@plt+0x9fb0>
   1b5c4:	mov	r0, r8
   1b5c8:	bl	1c6c0 <__assert_fail@plt+0xb334>
   1b5cc:	mov	r9, r4
   1b5d0:	mov	r6, r0
   1b5d4:	b	1b0b4 <__assert_fail@plt+0x9d28>
   1b5d8:	mov	r9, r8
   1b5dc:	ldr	r7, [pc, #136]	; 1b66c <__assert_fail@plt+0xa2e0>
   1b5e0:	mov	r5, r8
   1b5e4:	b	1b4a8 <__assert_fail@plt+0xa11c>
   1b5e8:	ldr	r2, [pc, #116]	; 1b664 <__assert_fail@plt+0xa2d8>
   1b5ec:	add	r3, sp, #24
   1b5f0:	str	r2, [sp]
   1b5f4:	mov	r1, r4
   1b5f8:	mov	r2, #10
   1b5fc:	mov	r0, r6
   1b600:	bl	1c7b8 <__assert_fail@plt+0xb42c>
   1b604:	subs	fp, r0, #0
   1b608:	bne	1b62c <__assert_fail@plt+0xa2a0>
   1b60c:	ldr	r3, [sp, #24]
   1b610:	cmn	r3, #1
   1b614:	beq	1b62c <__assert_fail@plt+0xa2a0>
   1b618:	adds	r4, r9, #0
   1b61c:	movne	r4, #1
   1b620:	str	r3, [sp, #12]
   1b624:	mov	r7, #0
   1b628:	b	1b0fc <__assert_fail@plt+0x9d70>
   1b62c:	ldr	fp, [pc, #60]	; 1b670 <__assert_fail@plt+0xa2e4>
   1b630:	b	1b624 <__assert_fail@plt+0xa298>
   1b634:	ldr	r7, [pc, #52]	; 1b670 <__assert_fail@plt+0xa2e4>
   1b638:	mov	r9, #0
   1b63c:	b	1b518 <__assert_fail@plt+0xa18c>
   1b640:	add	r2, sp, #24
   1b644:	mov	r0, fp
   1b648:	bl	16e4c <__assert_fail@plt+0x5ac0>
   1b64c:	b	1b494 <__assert_fail@plt+0xa108>
   1b650:	mov	r9, #0
   1b654:	mov	r8, r9
   1b658:	mov	r5, r9
   1b65c:	ldr	r7, [pc, #8]	; 1b66c <__assert_fail@plt+0xa2e0>
   1b660:	b	1b4a8 <__assert_fail@plt+0xa11c>
   1b664:	andeq	lr, r1, ip, lsr #9
   1b668:	andeq	lr, r1, r4, lsr #30
   1b66c:	andeq	lr, r1, r4, lsl pc
   1b670:	andeq	lr, r1, r4, lsl #30
   1b674:	push	{r4, r5, r6, lr}
   1b678:	sub	sp, sp, #32
   1b67c:	cmp	r1, #0
   1b680:	mov	r4, r0
   1b684:	ldr	r5, [sp, #48]	; 0x30
   1b688:	ldr	r6, [sp, #52]	; 0x34
   1b68c:	beq	1b9a4 <__assert_fail@plt+0xa618>
   1b690:	stm	sp, {r2, r3}
   1b694:	mov	r3, r1
   1b698:	ldr	r2, [pc, #808]	; 1b9c8 <__assert_fail@plt+0xa63c>
   1b69c:	mov	r1, #1
   1b6a0:	bl	11278 <__fprintf_chk@plt>
   1b6a4:	mov	r2, #5
   1b6a8:	ldr	r1, [pc, #796]	; 1b9cc <__assert_fail@plt+0xa640>
   1b6ac:	mov	r0, #0
   1b6b0:	bl	11104 <dcgettext@plt>
   1b6b4:	ldr	r3, [pc, #788]	; 1b9d0 <__assert_fail@plt+0xa644>
   1b6b8:	ldr	r2, [pc, #788]	; 1b9d4 <__assert_fail@plt+0xa648>
   1b6bc:	str	r3, [sp]
   1b6c0:	mov	r1, #1
   1b6c4:	mov	r3, r0
   1b6c8:	mov	r0, r4
   1b6cc:	bl	11278 <__fprintf_chk@plt>
   1b6d0:	mov	r1, r4
   1b6d4:	mov	r0, #10
   1b6d8:	bl	110f8 <fputc_unlocked@plt>
   1b6dc:	mov	r2, #5
   1b6e0:	ldr	r1, [pc, #752]	; 1b9d8 <__assert_fail@plt+0xa64c>
   1b6e4:	mov	r0, #0
   1b6e8:	bl	11104 <dcgettext@plt>
   1b6ec:	mov	r1, #1
   1b6f0:	ldr	r3, [pc, #740]	; 1b9dc <__assert_fail@plt+0xa650>
   1b6f4:	mov	r2, r0
   1b6f8:	mov	r0, r4
   1b6fc:	bl	11278 <__fprintf_chk@plt>
   1b700:	mov	r1, r4
   1b704:	mov	r0, #10
   1b708:	bl	110f8 <fputc_unlocked@plt>
   1b70c:	cmp	r6, #9
   1b710:	ldrls	pc, [pc, r6, lsl #2]
   1b714:	b	1b9bc <__assert_fail@plt+0xa630>
   1b718:	muleq	r1, ip, r7
   1b71c:	andeq	fp, r1, r4, lsr #15
   1b720:	ldrdeq	fp, [r1], -r0
   1b724:	andeq	fp, r1, r4, lsl #16
   1b728:	andeq	fp, r1, r0, asr #16
   1b72c:	andeq	fp, r1, ip, ror r8
   1b730:			; <UNDEFINED> instruction: 0x0001b8b8
   1b734:	strdeq	fp, [r1], -ip
   1b738:	andeq	fp, r1, ip, asr #18
   1b73c:	andeq	fp, r1, r0, asr #14
   1b740:	ldr	r1, [pc, #664]	; 1b9e0 <__assert_fail@plt+0xa654>
   1b744:	mov	r2, #5
   1b748:	mov	r0, #0
   1b74c:	bl	11104 <dcgettext@plt>
   1b750:	ldr	ip, [r5, #32]
   1b754:	ldr	r1, [r5, #28]
   1b758:	ldr	r2, [r5, #24]
   1b75c:	ldr	r3, [r5]
   1b760:	ldr	r6, [r5, #20]
   1b764:	str	ip, [sp, #28]
   1b768:	ldr	lr, [r5, #16]
   1b76c:	str	r1, [sp, #24]
   1b770:	ldr	ip, [r5, #12]
   1b774:	str	r2, [sp, #20]
   1b778:	ldr	r1, [r5, #8]
   1b77c:	ldr	r2, [r5, #4]
   1b780:	str	r6, [sp, #16]
   1b784:	stmib	sp, {r1, ip, lr}
   1b788:	mov	r1, #1
   1b78c:	str	r2, [sp]
   1b790:	mov	r2, r0
   1b794:	mov	r0, r4
   1b798:	bl	11278 <__fprintf_chk@plt>
   1b79c:	add	sp, sp, #32
   1b7a0:	pop	{r4, r5, r6, pc}
   1b7a4:	mov	r2, #5
   1b7a8:	ldr	r1, [pc, #564]	; 1b9e4 <__assert_fail@plt+0xa658>
   1b7ac:	mov	r0, #0
   1b7b0:	bl	11104 <dcgettext@plt>
   1b7b4:	ldr	r3, [r5]
   1b7b8:	mov	r1, #1
   1b7bc:	mov	r2, r0
   1b7c0:	mov	r0, r4
   1b7c4:	add	sp, sp, #32
   1b7c8:	pop	{r4, r5, r6, lr}
   1b7cc:	b	11278 <__fprintf_chk@plt>
   1b7d0:	mov	r2, #5
   1b7d4:	ldr	r1, [pc, #524]	; 1b9e8 <__assert_fail@plt+0xa65c>
   1b7d8:	mov	r0, #0
   1b7dc:	bl	11104 <dcgettext@plt>
   1b7e0:	ldr	r2, [r5, #4]
   1b7e4:	ldr	r3, [r5]
   1b7e8:	mov	r1, #1
   1b7ec:	str	r2, [sp, #48]	; 0x30
   1b7f0:	mov	r2, r0
   1b7f4:	mov	r0, r4
   1b7f8:	add	sp, sp, #32
   1b7fc:	pop	{r4, r5, r6, lr}
   1b800:	b	11278 <__fprintf_chk@plt>
   1b804:	mov	r2, #5
   1b808:	ldr	r1, [pc, #476]	; 1b9ec <__assert_fail@plt+0xa660>
   1b80c:	mov	r0, #0
   1b810:	bl	11104 <dcgettext@plt>
   1b814:	ldr	r1, [r5, #8]
   1b818:	ldr	r2, [r5, #4]
   1b81c:	ldr	r3, [r5]
   1b820:	str	r1, [sp, #52]	; 0x34
   1b824:	str	r2, [sp, #48]	; 0x30
   1b828:	mov	r1, #1
   1b82c:	mov	r2, r0
   1b830:	mov	r0, r4
   1b834:	add	sp, sp, #32
   1b838:	pop	{r4, r5, r6, lr}
   1b83c:	b	11278 <__fprintf_chk@plt>
   1b840:	mov	r2, #5
   1b844:	ldr	r1, [pc, #420]	; 1b9f0 <__assert_fail@plt+0xa664>
   1b848:	mov	r0, #0
   1b84c:	bl	11104 <dcgettext@plt>
   1b850:	ldr	r1, [r5, #8]
   1b854:	ldr	ip, [r5, #12]
   1b858:	ldr	r2, [r5, #4]
   1b85c:	ldr	r3, [r5]
   1b860:	stmib	sp, {r1, ip}
   1b864:	str	r2, [sp]
   1b868:	mov	r1, #1
   1b86c:	mov	r2, r0
   1b870:	mov	r0, r4
   1b874:	bl	11278 <__fprintf_chk@plt>
   1b878:	b	1b79c <__assert_fail@plt+0xa410>
   1b87c:	mov	r2, #5
   1b880:	ldr	r1, [pc, #364]	; 1b9f4 <__assert_fail@plt+0xa668>
   1b884:	mov	r0, #0
   1b888:	bl	11104 <dcgettext@plt>
   1b88c:	add	r1, r5, #8
   1b890:	ldr	r2, [r5, #4]
   1b894:	ldm	r1, {r1, ip, lr}
   1b898:	ldr	r3, [r5]
   1b89c:	str	r2, [sp]
   1b8a0:	stmib	sp, {r1, ip, lr}
   1b8a4:	mov	r1, #1
   1b8a8:	mov	r2, r0
   1b8ac:	mov	r0, r4
   1b8b0:	bl	11278 <__fprintf_chk@plt>
   1b8b4:	b	1b79c <__assert_fail@plt+0xa410>
   1b8b8:	mov	r2, #5
   1b8bc:	ldr	r1, [pc, #308]	; 1b9f8 <__assert_fail@plt+0xa66c>
   1b8c0:	mov	r0, #0
   1b8c4:	bl	11104 <dcgettext@plt>
   1b8c8:	add	r1, r5, #8
   1b8cc:	ldr	r2, [r5, #4]
   1b8d0:	ldm	r1, {r1, ip, lr}
   1b8d4:	ldr	r6, [r5, #20]
   1b8d8:	ldr	r3, [r5]
   1b8dc:	stmib	sp, {r1, ip, lr}
   1b8e0:	mov	r1, #1
   1b8e4:	str	r2, [sp]
   1b8e8:	str	r6, [sp, #16]
   1b8ec:	mov	r2, r0
   1b8f0:	mov	r0, r4
   1b8f4:	bl	11278 <__fprintf_chk@plt>
   1b8f8:	b	1b79c <__assert_fail@plt+0xa410>
   1b8fc:	mov	r2, #5
   1b900:	ldr	r1, [pc, #244]	; 1b9fc <__assert_fail@plt+0xa670>
   1b904:	mov	r0, #0
   1b908:	bl	11104 <dcgettext@plt>
   1b90c:	ldr	r2, [r5, #24]
   1b910:	ldr	r3, [r5]
   1b914:	ldr	r6, [r5, #20]
   1b918:	ldr	lr, [r5, #16]
   1b91c:	ldr	ip, [r5, #12]
   1b920:	str	r2, [sp, #20]
   1b924:	ldr	r1, [r5, #8]
   1b928:	ldr	r2, [r5, #4]
   1b92c:	str	r6, [sp, #16]
   1b930:	stmib	sp, {r1, ip, lr}
   1b934:	mov	r1, #1
   1b938:	str	r2, [sp]
   1b93c:	mov	r2, r0
   1b940:	mov	r0, r4
   1b944:	bl	11278 <__fprintf_chk@plt>
   1b948:	b	1b79c <__assert_fail@plt+0xa410>
   1b94c:	mov	r2, #5
   1b950:	ldr	r1, [pc, #168]	; 1ba00 <__assert_fail@plt+0xa674>
   1b954:	mov	r0, #0
   1b958:	bl	11104 <dcgettext@plt>
   1b95c:	ldr	r1, [r5, #28]
   1b960:	ldr	r2, [r5, #24]
   1b964:	ldr	r3, [r5]
   1b968:	ldr	r6, [r5, #20]
   1b96c:	ldr	lr, [r5, #16]
   1b970:	str	r1, [sp, #24]
   1b974:	ldr	ip, [r5, #12]
   1b978:	str	r2, [sp, #20]
   1b97c:	ldr	r1, [r5, #8]
   1b980:	ldr	r2, [r5, #4]
   1b984:	str	r6, [sp, #16]
   1b988:	stmib	sp, {r1, ip, lr}
   1b98c:	mov	r1, #1
   1b990:	str	r2, [sp]
   1b994:	mov	r2, r0
   1b998:	mov	r0, r4
   1b99c:	bl	11278 <__fprintf_chk@plt>
   1b9a0:	b	1b79c <__assert_fail@plt+0xa410>
   1b9a4:	str	r3, [sp]
   1b9a8:	mov	r1, #1
   1b9ac:	mov	r3, r2
   1b9b0:	ldr	r2, [pc, #76]	; 1ba04 <__assert_fail@plt+0xa678>
   1b9b4:	bl	11278 <__fprintf_chk@plt>
   1b9b8:	b	1b6a4 <__assert_fail@plt+0xa318>
   1b9bc:	mov	r2, #5
   1b9c0:	ldr	r1, [pc, #64]	; 1ba08 <__assert_fail@plt+0xa67c>
   1b9c4:	b	1b748 <__assert_fail@plt+0xa3bc>
   1b9c8:	andeq	lr, r1, r4, lsr pc
   1b9cc:	andeq	lr, r1, r8, asr #30
   1b9d0:	andeq	r0, r0, r6, ror #15
   1b9d4:	andeq	pc, r1, r0, lsr #4
   1b9d8:	andeq	lr, r1, ip, asr #30
   1b9dc:	strdeq	lr, [r1], -r8
   1b9e0:	andeq	pc, r1, r8, lsr #2
   1b9e4:	andeq	pc, r1, ip, lsl r0	; <UNPREDICTABLE>
   1b9e8:	andeq	pc, r1, ip, lsr #32
   1b9ec:	andeq	pc, r1, r4, asr #32
   1b9f0:	andeq	pc, r1, r0, rrx
   1b9f4:	andeq	pc, r1, r0, lsl #1
   1b9f8:	andeq	pc, r1, r4, lsr #1
   1b9fc:	andeq	pc, r1, ip, asr #1
   1ba00:	strdeq	pc, [r1], -r8
   1ba04:	andeq	lr, r1, r0, asr #30
   1ba08:	andeq	pc, r1, ip, asr r1	; <UNPREDICTABLE>
   1ba0c:	push	{r4, r5, lr}
   1ba10:	sub	sp, sp, #12
   1ba14:	ldr	r5, [sp, #24]
   1ba18:	ldr	ip, [r5]
   1ba1c:	cmp	ip, #0
   1ba20:	beq	1ba3c <__assert_fail@plt+0xa6b0>
   1ba24:	mov	lr, r5
   1ba28:	mov	ip, #0
   1ba2c:	ldr	r4, [lr, #4]!
   1ba30:	add	ip, ip, #1
   1ba34:	cmp	r4, #0
   1ba38:	bne	1ba2c <__assert_fail@plt+0xa6a0>
   1ba3c:	stm	sp, {r5, ip}
   1ba40:	bl	1b674 <__assert_fail@plt+0xa2e8>
   1ba44:	add	sp, sp, #12
   1ba48:	pop	{r4, r5, pc}
   1ba4c:	push	{r4, r5, lr}
   1ba50:	sub	sp, sp, #76	; 0x4c
   1ba54:	mov	r5, r0
   1ba58:	ldr	ip, [sp, #88]	; 0x58
   1ba5c:	ldr	r0, [ip]
   1ba60:	cmp	r0, #0
   1ba64:	str	r0, [sp, #32]
   1ba68:	beq	1be3c <__assert_fail@plt+0xaab0>
   1ba6c:	ldr	r0, [ip, #4]
   1ba70:	cmp	r0, #0
   1ba74:	str	r0, [sp, #36]	; 0x24
   1ba78:	beq	1be44 <__assert_fail@plt+0xaab8>
   1ba7c:	ldr	r0, [ip, #8]
   1ba80:	cmp	r0, #0
   1ba84:	str	r0, [sp, #40]	; 0x28
   1ba88:	beq	1be4c <__assert_fail@plt+0xaac0>
   1ba8c:	ldr	r0, [ip, #12]
   1ba90:	cmp	r0, #0
   1ba94:	str	r0, [sp, #44]	; 0x2c
   1ba98:	beq	1be54 <__assert_fail@plt+0xaac8>
   1ba9c:	ldr	r0, [ip, #16]
   1baa0:	cmp	r0, #0
   1baa4:	str	r0, [sp, #48]	; 0x30
   1baa8:	beq	1be5c <__assert_fail@plt+0xaad0>
   1baac:	ldr	r0, [ip, #20]
   1bab0:	cmp	r0, #0
   1bab4:	str	r0, [sp, #52]	; 0x34
   1bab8:	beq	1be64 <__assert_fail@plt+0xaad8>
   1babc:	ldr	r0, [ip, #24]
   1bac0:	cmp	r0, #0
   1bac4:	str	r0, [sp, #56]	; 0x38
   1bac8:	beq	1be6c <__assert_fail@plt+0xaae0>
   1bacc:	ldr	r0, [ip, #28]
   1bad0:	cmp	r0, #0
   1bad4:	str	r0, [sp, #60]	; 0x3c
   1bad8:	beq	1be74 <__assert_fail@plt+0xaae8>
   1badc:	ldr	r0, [ip, #32]
   1bae0:	cmp	r0, #0
   1bae4:	str	r0, [sp, #64]	; 0x40
   1bae8:	beq	1be7c <__assert_fail@plt+0xaaf0>
   1baec:	ldr	r0, [ip, #36]	; 0x24
   1baf0:	cmp	r0, #0
   1baf4:	movne	r4, #10
   1baf8:	moveq	r4, #9
   1bafc:	cmp	r1, #0
   1bb00:	beq	1be14 <__assert_fail@plt+0xaa88>
   1bb04:	stm	sp, {r2, r3}
   1bb08:	mov	r0, r5
   1bb0c:	mov	r3, r1
   1bb10:	ldr	r2, [pc, #876]	; 1be84 <__assert_fail@plt+0xaaf8>
   1bb14:	mov	r1, #1
   1bb18:	bl	11278 <__fprintf_chk@plt>
   1bb1c:	mov	r2, #5
   1bb20:	ldr	r1, [pc, #864]	; 1be88 <__assert_fail@plt+0xaafc>
   1bb24:	mov	r0, #0
   1bb28:	bl	11104 <dcgettext@plt>
   1bb2c:	ldr	r3, [pc, #856]	; 1be8c <__assert_fail@plt+0xab00>
   1bb30:	ldr	r2, [pc, #856]	; 1be90 <__assert_fail@plt+0xab04>
   1bb34:	str	r3, [sp]
   1bb38:	mov	r1, #1
   1bb3c:	mov	r3, r0
   1bb40:	mov	r0, r5
   1bb44:	bl	11278 <__fprintf_chk@plt>
   1bb48:	mov	r1, r5
   1bb4c:	mov	r0, #10
   1bb50:	bl	110f8 <fputc_unlocked@plt>
   1bb54:	mov	r2, #5
   1bb58:	ldr	r1, [pc, #820]	; 1be94 <__assert_fail@plt+0xab08>
   1bb5c:	mov	r0, #0
   1bb60:	bl	11104 <dcgettext@plt>
   1bb64:	mov	r1, #1
   1bb68:	ldr	r3, [pc, #808]	; 1be98 <__assert_fail@plt+0xab0c>
   1bb6c:	mov	r2, r0
   1bb70:	mov	r0, r5
   1bb74:	bl	11278 <__fprintf_chk@plt>
   1bb78:	mov	r1, r5
   1bb7c:	mov	r0, #10
   1bb80:	bl	110f8 <fputc_unlocked@plt>
   1bb84:	cmp	r4, #9
   1bb88:	ldrls	pc, [pc, r4, lsl #2]
   1bb8c:	b	1be30 <__assert_fail@plt+0xaaa4>
   1bb90:	andeq	fp, r1, r4, lsl ip
   1bb94:	andeq	fp, r1, ip, lsl ip
   1bb98:	andeq	fp, r1, r8, asr #24
   1bb9c:	andeq	fp, r1, ip, ror ip
   1bba0:			; <UNDEFINED> instruction: 0x0001bcb4
   1bba4:	strdeq	fp, [r1], -r0
   1bba8:	andeq	fp, r1, ip, lsr #26
   1bbac:	andeq	fp, r1, r0, ror sp
   1bbb0:			; <UNDEFINED> instruction: 0x0001bdbc
   1bbb4:			; <UNDEFINED> instruction: 0x0001bbb8
   1bbb8:	ldr	r1, [pc, #732]	; 1be9c <__assert_fail@plt+0xab10>
   1bbbc:	mov	r2, #5
   1bbc0:	mov	r0, #0
   1bbc4:	bl	11104 <dcgettext@plt>
   1bbc8:	ldr	ip, [sp, #64]	; 0x40
   1bbcc:	ldr	r1, [sp, #60]	; 0x3c
   1bbd0:	ldr	r2, [sp, #56]	; 0x38
   1bbd4:	ldr	lr, [sp, #48]	; 0x30
   1bbd8:	str	ip, [sp, #28]
   1bbdc:	str	r1, [sp, #24]
   1bbe0:	ldr	ip, [sp, #44]	; 0x2c
   1bbe4:	ldr	r1, [sp, #40]	; 0x28
   1bbe8:	ldr	r4, [sp, #52]	; 0x34
   1bbec:	str	r2, [sp, #20]
   1bbf0:	ldr	r2, [sp, #36]	; 0x24
   1bbf4:	stmib	sp, {r1, ip, lr}
   1bbf8:	mov	r1, #1
   1bbfc:	str	r2, [sp]
   1bc00:	ldr	r3, [sp, #32]
   1bc04:	str	r4, [sp, #16]
   1bc08:	mov	r2, r0
   1bc0c:	mov	r0, r5
   1bc10:	bl	11278 <__fprintf_chk@plt>
   1bc14:	add	sp, sp, #76	; 0x4c
   1bc18:	pop	{r4, r5, pc}
   1bc1c:	mov	r2, #5
   1bc20:	ldr	r1, [pc, #632]	; 1bea0 <__assert_fail@plt+0xab14>
   1bc24:	mov	r0, #0
   1bc28:	bl	11104 <dcgettext@plt>
   1bc2c:	ldr	r3, [sp, #32]
   1bc30:	mov	r1, #1
   1bc34:	mov	r2, r0
   1bc38:	mov	r0, r5
   1bc3c:	add	sp, sp, #76	; 0x4c
   1bc40:	pop	{r4, r5, lr}
   1bc44:	b	11278 <__fprintf_chk@plt>
   1bc48:	mov	r2, #5
   1bc4c:	ldr	r1, [pc, #592]	; 1bea4 <__assert_fail@plt+0xab18>
   1bc50:	mov	r0, #0
   1bc54:	bl	11104 <dcgettext@plt>
   1bc58:	ldr	r2, [sp, #36]	; 0x24
   1bc5c:	ldr	r3, [sp, #32]
   1bc60:	str	r2, [sp, #88]	; 0x58
   1bc64:	mov	r1, #1
   1bc68:	mov	r2, r0
   1bc6c:	mov	r0, r5
   1bc70:	add	sp, sp, #76	; 0x4c
   1bc74:	pop	{r4, r5, lr}
   1bc78:	b	11278 <__fprintf_chk@plt>
   1bc7c:	mov	r2, #5
   1bc80:	ldr	r1, [pc, #544]	; 1bea8 <__assert_fail@plt+0xab1c>
   1bc84:	mov	r0, #0
   1bc88:	bl	11104 <dcgettext@plt>
   1bc8c:	ldr	r1, [sp, #40]	; 0x28
   1bc90:	ldr	r2, [sp, #36]	; 0x24
   1bc94:	str	r1, [sp, #4]
   1bc98:	str	r2, [sp]
   1bc9c:	ldr	r3, [sp, #32]
   1bca0:	mov	r1, #1
   1bca4:	mov	r2, r0
   1bca8:	mov	r0, r5
   1bcac:	bl	11278 <__fprintf_chk@plt>
   1bcb0:	b	1bc14 <__assert_fail@plt+0xa888>
   1bcb4:	mov	r2, #5
   1bcb8:	ldr	r1, [pc, #492]	; 1beac <__assert_fail@plt+0xab20>
   1bcbc:	mov	r0, #0
   1bcc0:	bl	11104 <dcgettext@plt>
   1bcc4:	ldr	r1, [sp, #40]	; 0x28
   1bcc8:	ldr	ip, [sp, #44]	; 0x2c
   1bccc:	ldr	r2, [sp, #36]	; 0x24
   1bcd0:	ldr	r3, [sp, #32]
   1bcd4:	stmib	sp, {r1, ip}
   1bcd8:	str	r2, [sp]
   1bcdc:	mov	r1, #1
   1bce0:	mov	r2, r0
   1bce4:	mov	r0, r5
   1bce8:	bl	11278 <__fprintf_chk@plt>
   1bcec:	b	1bc14 <__assert_fail@plt+0xa888>
   1bcf0:	mov	r2, #5
   1bcf4:	ldr	r1, [pc, #436]	; 1beb0 <__assert_fail@plt+0xab24>
   1bcf8:	mov	r0, #0
   1bcfc:	bl	11104 <dcgettext@plt>
   1bd00:	add	r1, sp, #40	; 0x28
   1bd04:	ldr	r2, [sp, #36]	; 0x24
   1bd08:	ldm	r1, {r1, ip, lr}
   1bd0c:	ldr	r3, [sp, #32]
   1bd10:	str	r2, [sp]
   1bd14:	stmib	sp, {r1, ip, lr}
   1bd18:	mov	r1, #1
   1bd1c:	mov	r2, r0
   1bd20:	mov	r0, r5
   1bd24:	bl	11278 <__fprintf_chk@plt>
   1bd28:	b	1bc14 <__assert_fail@plt+0xa888>
   1bd2c:	mov	r2, #5
   1bd30:	ldr	r1, [pc, #380]	; 1beb4 <__assert_fail@plt+0xab28>
   1bd34:	mov	r0, #0
   1bd38:	bl	11104 <dcgettext@plt>
   1bd3c:	add	r1, sp, #40	; 0x28
   1bd40:	ldr	r2, [sp, #36]	; 0x24
   1bd44:	ldm	r1, {r1, ip, lr}
   1bd48:	ldr	r4, [sp, #52]	; 0x34
   1bd4c:	str	r2, [sp]
   1bd50:	stmib	sp, {r1, ip, lr}
   1bd54:	mov	r1, #1
   1bd58:	ldr	r3, [sp, #32]
   1bd5c:	str	r4, [sp, #16]
   1bd60:	mov	r2, r0
   1bd64:	mov	r0, r5
   1bd68:	bl	11278 <__fprintf_chk@plt>
   1bd6c:	b	1bc14 <__assert_fail@plt+0xa888>
   1bd70:	mov	r2, #5
   1bd74:	ldr	r1, [pc, #316]	; 1beb8 <__assert_fail@plt+0xab2c>
   1bd78:	mov	r0, #0
   1bd7c:	bl	11104 <dcgettext@plt>
   1bd80:	add	r1, sp, #40	; 0x28
   1bd84:	ldr	r2, [sp, #56]	; 0x38
   1bd88:	ldm	r1, {r1, ip, lr}
   1bd8c:	ldr	r4, [sp, #52]	; 0x34
   1bd90:	str	r2, [sp, #20]
   1bd94:	ldr	r2, [sp, #36]	; 0x24
   1bd98:	stmib	sp, {r1, ip, lr}
   1bd9c:	mov	r1, #1
   1bda0:	str	r2, [sp]
   1bda4:	ldr	r3, [sp, #32]
   1bda8:	str	r4, [sp, #16]
   1bdac:	mov	r2, r0
   1bdb0:	mov	r0, r5
   1bdb4:	bl	11278 <__fprintf_chk@plt>
   1bdb8:	b	1bc14 <__assert_fail@plt+0xa888>
   1bdbc:	mov	r2, #5
   1bdc0:	ldr	r1, [pc, #244]	; 1bebc <__assert_fail@plt+0xab30>
   1bdc4:	mov	r0, #0
   1bdc8:	bl	11104 <dcgettext@plt>
   1bdcc:	ldr	r1, [sp, #60]	; 0x3c
   1bdd0:	ldr	r2, [sp, #56]	; 0x38
   1bdd4:	ldr	lr, [sp, #48]	; 0x30
   1bdd8:	ldr	ip, [sp, #44]	; 0x2c
   1bddc:	str	r1, [sp, #24]
   1bde0:	ldr	r1, [sp, #40]	; 0x28
   1bde4:	ldr	r4, [sp, #52]	; 0x34
   1bde8:	str	r2, [sp, #20]
   1bdec:	ldr	r2, [sp, #36]	; 0x24
   1bdf0:	stmib	sp, {r1, ip, lr}
   1bdf4:	mov	r1, #1
   1bdf8:	str	r2, [sp]
   1bdfc:	ldr	r3, [sp, #32]
   1be00:	str	r4, [sp, #16]
   1be04:	mov	r2, r0
   1be08:	mov	r0, r5
   1be0c:	bl	11278 <__fprintf_chk@plt>
   1be10:	b	1bc14 <__assert_fail@plt+0xa888>
   1be14:	str	r3, [sp]
   1be18:	mov	r1, #1
   1be1c:	mov	r3, r2
   1be20:	mov	r0, r5
   1be24:	ldr	r2, [pc, #148]	; 1bec0 <__assert_fail@plt+0xab34>
   1be28:	bl	11278 <__fprintf_chk@plt>
   1be2c:	b	1bb1c <__assert_fail@plt+0xa790>
   1be30:	mov	r2, #5
   1be34:	ldr	r1, [pc, #136]	; 1bec4 <__assert_fail@plt+0xab38>
   1be38:	b	1bbc0 <__assert_fail@plt+0xa834>
   1be3c:	mov	r4, r0
   1be40:	b	1bafc <__assert_fail@plt+0xa770>
   1be44:	mov	r4, #1
   1be48:	b	1bafc <__assert_fail@plt+0xa770>
   1be4c:	mov	r4, #2
   1be50:	b	1bafc <__assert_fail@plt+0xa770>
   1be54:	mov	r4, #3
   1be58:	b	1bafc <__assert_fail@plt+0xa770>
   1be5c:	mov	r4, #4
   1be60:	b	1bafc <__assert_fail@plt+0xa770>
   1be64:	mov	r4, #5
   1be68:	b	1bafc <__assert_fail@plt+0xa770>
   1be6c:	mov	r4, #6
   1be70:	b	1bafc <__assert_fail@plt+0xa770>
   1be74:	mov	r4, #7
   1be78:	b	1bafc <__assert_fail@plt+0xa770>
   1be7c:	mov	r4, #8
   1be80:	b	1bafc <__assert_fail@plt+0xa770>
   1be84:	andeq	lr, r1, r4, lsr pc
   1be88:	andeq	lr, r1, r8, asr #30
   1be8c:	andeq	r0, r0, r6, ror #15
   1be90:	andeq	pc, r1, r0, lsr #4
   1be94:	andeq	lr, r1, ip, asr #30
   1be98:	strdeq	lr, [r1], -r8
   1be9c:	andeq	pc, r1, r8, lsr #2
   1bea0:	andeq	pc, r1, ip, lsl r0	; <UNPREDICTABLE>
   1bea4:	andeq	pc, r1, ip, lsr #32
   1bea8:	andeq	pc, r1, r4, asr #32
   1beac:	andeq	pc, r1, r0, rrx
   1beb0:	andeq	pc, r1, r0, lsl #1
   1beb4:	andeq	pc, r1, r4, lsr #1
   1beb8:	andeq	pc, r1, ip, asr #1
   1bebc:	strdeq	pc, [r1], -r8
   1bec0:	andeq	lr, r1, r0, asr #30
   1bec4:	andeq	pc, r1, ip, asr r1	; <UNPREDICTABLE>
   1bec8:	push	{r3}		; (str r3, [sp, #-4]!)
   1becc:	push	{lr}		; (str lr, [sp, #-4]!)
   1bed0:	sub	sp, sp, #56	; 0x38
   1bed4:	add	r3, sp, #64	; 0x40
   1bed8:	ldr	ip, [sp, #64]	; 0x40
   1bedc:	str	r3, [sp, #12]
   1bee0:	cmp	ip, #0
   1bee4:	str	ip, [sp, #16]
   1bee8:	beq	1bf80 <__assert_fail@plt+0xabf4>
   1beec:	ldr	ip, [sp, #68]	; 0x44
   1bef0:	cmp	ip, #0
   1bef4:	str	ip, [sp, #20]
   1bef8:	beq	1bfa0 <__assert_fail@plt+0xac14>
   1befc:	ldr	ip, [sp, #72]	; 0x48
   1bf00:	cmp	ip, #0
   1bf04:	str	ip, [sp, #24]
   1bf08:	beq	1bfa8 <__assert_fail@plt+0xac1c>
   1bf0c:	ldr	ip, [sp, #76]	; 0x4c
   1bf10:	cmp	ip, #0
   1bf14:	str	ip, [sp, #28]
   1bf18:	beq	1bfb0 <__assert_fail@plt+0xac24>
   1bf1c:	ldr	ip, [sp, #80]	; 0x50
   1bf20:	cmp	ip, #0
   1bf24:	str	ip, [sp, #32]
   1bf28:	beq	1bfb8 <__assert_fail@plt+0xac2c>
   1bf2c:	ldr	ip, [sp, #84]	; 0x54
   1bf30:	cmp	ip, #0
   1bf34:	str	ip, [sp, #36]	; 0x24
   1bf38:	beq	1bfc0 <__assert_fail@plt+0xac34>
   1bf3c:	ldr	ip, [sp, #88]	; 0x58
   1bf40:	cmp	ip, #0
   1bf44:	str	ip, [sp, #40]	; 0x28
   1bf48:	beq	1bfc8 <__assert_fail@plt+0xac3c>
   1bf4c:	ldr	ip, [sp, #92]	; 0x5c
   1bf50:	cmp	ip, #0
   1bf54:	str	ip, [sp, #44]	; 0x2c
   1bf58:	beq	1bfd0 <__assert_fail@plt+0xac44>
   1bf5c:	ldr	ip, [sp, #96]	; 0x60
   1bf60:	cmp	ip, #0
   1bf64:	str	ip, [sp, #48]	; 0x30
   1bf68:	beq	1bfd8 <__assert_fail@plt+0xac4c>
   1bf6c:	ldr	ip, [sp, #100]	; 0x64
   1bf70:	cmp	ip, #0
   1bf74:	str	ip, [sp, #52]	; 0x34
   1bf78:	movne	ip, #10
   1bf7c:	moveq	ip, #9
   1bf80:	add	r3, sp, #16
   1bf84:	stm	sp, {r3, ip}
   1bf88:	ldr	r3, [sp, #60]	; 0x3c
   1bf8c:	bl	1b674 <__assert_fail@plt+0xa2e8>
   1bf90:	add	sp, sp, #56	; 0x38
   1bf94:	pop	{lr}		; (ldr lr, [sp], #4)
   1bf98:	add	sp, sp, #4
   1bf9c:	bx	lr
   1bfa0:	mov	ip, #1
   1bfa4:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfa8:	mov	ip, #2
   1bfac:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfb0:	mov	ip, #3
   1bfb4:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfb8:	mov	ip, #4
   1bfbc:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfc0:	mov	ip, #5
   1bfc4:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfc8:	mov	ip, #6
   1bfcc:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfd0:	mov	ip, #7
   1bfd4:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfd8:	mov	ip, #8
   1bfdc:	b	1bf80 <__assert_fail@plt+0xabf4>
   1bfe0:	ldr	r3, [pc, #116]	; 1c05c <__assert_fail@plt+0xacd0>
   1bfe4:	push	{r4, lr}
   1bfe8:	mov	r0, #10
   1bfec:	ldr	r1, [r3]
   1bff0:	bl	110f8 <fputc_unlocked@plt>
   1bff4:	mov	r2, #5
   1bff8:	ldr	r1, [pc, #96]	; 1c060 <__assert_fail@plt+0xacd4>
   1bffc:	mov	r0, #0
   1c000:	bl	11104 <dcgettext@plt>
   1c004:	ldr	r2, [pc, #88]	; 1c064 <__assert_fail@plt+0xacd8>
   1c008:	mov	r1, r0
   1c00c:	mov	r0, #1
   1c010:	bl	11260 <__printf_chk@plt>
   1c014:	mov	r2, #5
   1c018:	ldr	r1, [pc, #72]	; 1c068 <__assert_fail@plt+0xacdc>
   1c01c:	mov	r0, #0
   1c020:	bl	11104 <dcgettext@plt>
   1c024:	ldr	r3, [pc, #64]	; 1c06c <__assert_fail@plt+0xace0>
   1c028:	ldr	r2, [pc, #64]	; 1c070 <__assert_fail@plt+0xace4>
   1c02c:	mov	r1, r0
   1c030:	mov	r0, #1
   1c034:	bl	11260 <__printf_chk@plt>
   1c038:	mov	r2, #5
   1c03c:	ldr	r1, [pc, #48]	; 1c074 <__assert_fail@plt+0xace8>
   1c040:	mov	r0, #0
   1c044:	bl	11104 <dcgettext@plt>
   1c048:	ldr	r2, [pc, #40]	; 1c078 <__assert_fail@plt+0xacec>
   1c04c:	pop	{r4, lr}
   1c050:	mov	r1, r0
   1c054:	mov	r0, #1
   1c058:	b	11260 <__printf_chk@plt>
   1c05c:	muleq	r3, ip, r1
   1c060:	muleq	r1, r8, r1
   1c064:	andeq	pc, r1, ip, lsr #3
   1c068:	andeq	pc, r1, r4, asr #3
   1c06c:			; <UNDEFINED> instruction: 0x0001e6bc
   1c070:	andeq	lr, r1, r4, ror #13
   1c074:	ldrdeq	pc, [r1], -r8
   1c078:	andeq	pc, r1, r0, lsl #4
   1c07c:	push	{r4, r5, r6, lr}
   1c080:	mov	r6, r0
   1c084:	mov	r5, r1
   1c088:	mov	r4, r2
   1c08c:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c090:	cmp	r0, #0
   1c094:	popne	{r4, r5, r6, pc}
   1c098:	cmp	r6, #0
   1c09c:	beq	1c0ac <__assert_fail@plt+0xad20>
   1c0a0:	cmp	r5, #0
   1c0a4:	cmpne	r4, #0
   1c0a8:	popeq	{r4, r5, r6, pc}
   1c0ac:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c0b0:	push	{r4, lr}
   1c0b4:	bl	1ce1c <__assert_fail@plt+0xba90>
   1c0b8:	cmp	r0, #0
   1c0bc:	popne	{r4, pc}
   1c0c0:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c0c4:	push	{r4, lr}
   1c0c8:	bl	1ce1c <__assert_fail@plt+0xba90>
   1c0cc:	cmp	r0, #0
   1c0d0:	popne	{r4, pc}
   1c0d4:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c0d8:	push	{r4, lr}
   1c0dc:	bl	1ce1c <__assert_fail@plt+0xba90>
   1c0e0:	cmp	r0, #0
   1c0e4:	popne	{r4, pc}
   1c0e8:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c0ec:	push	{r4, r5, r6, lr}
   1c0f0:	mov	r5, r0
   1c0f4:	mov	r4, r1
   1c0f8:	bl	1ce48 <__assert_fail@plt+0xbabc>
   1c0fc:	cmp	r0, #0
   1c100:	popne	{r4, r5, r6, pc}
   1c104:	adds	r4, r4, #0
   1c108:	movne	r4, #1
   1c10c:	cmp	r5, #0
   1c110:	orreq	r4, r4, #1
   1c114:	cmp	r4, #0
   1c118:	popeq	{r4, r5, r6, pc}
   1c11c:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c120:	push	{r4, lr}
   1c124:	cmp	r1, #0
   1c128:	orreq	r1, r1, #1
   1c12c:	bl	1ce48 <__assert_fail@plt+0xbabc>
   1c130:	cmp	r0, #0
   1c134:	popne	{r4, pc}
   1c138:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c13c:	push	{r4, r5, r6, lr}
   1c140:	mov	r6, r0
   1c144:	mov	r5, r1
   1c148:	mov	r4, r2
   1c14c:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c150:	cmp	r0, #0
   1c154:	popne	{r4, r5, r6, pc}
   1c158:	cmp	r6, #0
   1c15c:	beq	1c16c <__assert_fail@plt+0xade0>
   1c160:	cmp	r5, #0
   1c164:	cmpne	r4, #0
   1c168:	popeq	{r4, r5, r6, pc}
   1c16c:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c170:	cmp	r2, #0
   1c174:	cmpne	r1, #0
   1c178:	moveq	r2, #1
   1c17c:	moveq	r1, r2
   1c180:	push	{r4, lr}
   1c184:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c188:	cmp	r0, #0
   1c18c:	popne	{r4, pc}
   1c190:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c194:	push	{r4, lr}
   1c198:	mov	r2, r1
   1c19c:	mov	r1, r0
   1c1a0:	mov	r0, #0
   1c1a4:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c1a8:	cmp	r0, #0
   1c1ac:	popne	{r4, pc}
   1c1b0:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c1b4:	cmp	r1, #0
   1c1b8:	cmpne	r0, #0
   1c1bc:	moveq	r2, #1
   1c1c0:	movne	r2, r1
   1c1c4:	moveq	r1, r2
   1c1c8:	movne	r1, r0
   1c1cc:	push	{r4, lr}
   1c1d0:	mov	r0, #0
   1c1d4:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c1d8:	cmp	r0, #0
   1c1dc:	popne	{r4, pc}
   1c1e0:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c1e4:	cmp	r0, #0
   1c1e8:	push	{r4, r5, r6, lr}
   1c1ec:	mov	r5, r1
   1c1f0:	ldr	r4, [r1]
   1c1f4:	beq	1c230 <__assert_fail@plt+0xaea4>
   1c1f8:	lsr	r2, r4, #1
   1c1fc:	add	r3, r2, #1
   1c200:	mvn	r3, r3
   1c204:	cmp	r4, r3
   1c208:	bhi	1c24c <__assert_fail@plt+0xaec0>
   1c20c:	add	r4, r4, #1
   1c210:	add	r4, r4, r2
   1c214:	mov	r1, r4
   1c218:	mov	r2, #1
   1c21c:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c220:	cmp	r0, #0
   1c224:	beq	1c250 <__assert_fail@plt+0xaec4>
   1c228:	str	r4, [r5]
   1c22c:	pop	{r4, r5, r6, pc}
   1c230:	cmp	r4, #0
   1c234:	moveq	r4, #64	; 0x40
   1c238:	mov	r1, r4
   1c23c:	mov	r2, #1
   1c240:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c244:	cmp	r0, #0
   1c248:	bne	1c228 <__assert_fail@plt+0xae9c>
   1c24c:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c250:	cmp	r4, #0
   1c254:	bne	1c24c <__assert_fail@plt+0xaec0>
   1c258:	str	r4, [r5]
   1c25c:	pop	{r4, r5, r6, pc}
   1c260:	cmp	r0, #0
   1c264:	push	{r4, r5, r6, lr}
   1c268:	mov	r5, r1
   1c26c:	ldr	r4, [r1]
   1c270:	mov	r6, r2
   1c274:	beq	1c2b8 <__assert_fail@plt+0xaf2c>
   1c278:	lsr	r1, r4, #1
   1c27c:	add	r3, r1, #1
   1c280:	mvn	r3, r3
   1c284:	cmp	r4, r3
   1c288:	bhi	1c2f0 <__assert_fail@plt+0xaf64>
   1c28c:	add	r4, r4, #1
   1c290:	add	r4, r4, r1
   1c294:	mov	r1, r4
   1c298:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c29c:	cmp	r0, #0
   1c2a0:	bne	1c2b0 <__assert_fail@plt+0xaf24>
   1c2a4:	cmp	r4, #0
   1c2a8:	cmpne	r6, #0
   1c2ac:	bne	1c2f0 <__assert_fail@plt+0xaf64>
   1c2b0:	str	r4, [r5]
   1c2b4:	pop	{r4, r5, r6, pc}
   1c2b8:	cmp	r4, #0
   1c2bc:	bne	1c2d8 <__assert_fail@plt+0xaf4c>
   1c2c0:	mov	r1, r2
   1c2c4:	mov	r0, #64	; 0x40
   1c2c8:	bl	1d590 <__assert_fail@plt+0xc204>
   1c2cc:	cmp	r0, #0
   1c2d0:	movne	r4, r0
   1c2d4:	addeq	r4, r0, #1
   1c2d8:	mov	r2, r6
   1c2dc:	mov	r1, r4
   1c2e0:	mov	r0, #0
   1c2e4:	bl	1d444 <__assert_fail@plt+0xc0b8>
   1c2e8:	cmp	r0, #0
   1c2ec:	bne	1c2b0 <__assert_fail@plt+0xaf24>
   1c2f0:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c2f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c2f8:	sub	sp, sp, #12
   1c2fc:	ldr	r6, [r1]
   1c300:	mov	r8, r1
   1c304:	mov	r9, r0
   1c308:	asrs	r4, r6, #1
   1c30c:	mov	sl, r2
   1c310:	mov	fp, r3
   1c314:	ldr	r7, [sp, #48]	; 0x30
   1c318:	bmi	1c494 <__assert_fail@plt+0xb108>
   1c31c:	mvn	r1, #-2147483648	; 0x80000000
   1c320:	sub	r1, r1, r4
   1c324:	cmp	r6, r1
   1c328:	movle	r1, #0
   1c32c:	movgt	r1, #1
   1c330:	mvn	r3, fp
   1c334:	cmp	r1, #0
   1c338:	addeq	r4, r4, r6
   1c33c:	mvnne	r4, #-2147483648	; 0x80000000
   1c340:	lsr	r3, r3, #31
   1c344:	cmp	fp, r4
   1c348:	movge	r2, #0
   1c34c:	andlt	r2, r3, #1
   1c350:	cmp	r2, #0
   1c354:	beq	1c444 <__assert_fail@plt+0xb0b8>
   1c358:	cmp	r7, #0
   1c35c:	blt	1c52c <__assert_fail@plt+0xb1a0>
   1c360:	bne	1c524 <__assert_fail@plt+0xb198>
   1c364:	mov	r5, #64	; 0x40
   1c368:	mov	r1, r7
   1c36c:	mov	r0, r5
   1c370:	str	r3, [sp, #4]
   1c374:	bl	1d79c <__assert_fail@plt+0xc410>
   1c378:	mov	r1, r7
   1c37c:	mov	r4, r0
   1c380:	mov	r0, r5
   1c384:	bl	1d9bc <__assert_fail@plt+0xc630>
   1c388:	ldr	r3, [sp, #4]
   1c38c:	sub	r5, r5, r1
   1c390:	cmp	r9, #0
   1c394:	sub	r2, r4, r6
   1c398:	streq	r9, [r8]
   1c39c:	cmp	r2, sl
   1c3a0:	bge	1c424 <__assert_fail@plt+0xb098>
   1c3a4:	cmp	sl, #0
   1c3a8:	blt	1c4c4 <__assert_fail@plt+0xb138>
   1c3ac:	cmp	r6, #0
   1c3b0:	blt	1c3d0 <__assert_fail@plt+0xb044>
   1c3b4:	mvn	r2, #-2147483648	; 0x80000000
   1c3b8:	sub	r2, r2, sl
   1c3bc:	cmp	r6, r2
   1c3c0:	movle	r2, #0
   1c3c4:	movgt	r2, #1
   1c3c8:	cmp	r2, #0
   1c3cc:	bne	1c4c0 <__assert_fail@plt+0xb134>
   1c3d0:	add	r6, r6, sl
   1c3d4:	cmp	fp, r6
   1c3d8:	movge	r3, #0
   1c3dc:	andlt	r3, r3, #1
   1c3e0:	cmp	r3, #0
   1c3e4:	mov	r4, r6
   1c3e8:	bne	1c4c0 <__assert_fail@plt+0xb134>
   1c3ec:	cmp	r7, #0
   1c3f0:	blt	1c4d8 <__assert_fail@plt+0xb14c>
   1c3f4:	beq	1c420 <__assert_fail@plt+0xb094>
   1c3f8:	cmp	r6, #0
   1c3fc:	blt	1c57c <__assert_fail@plt+0xb1f0>
   1c400:	mov	r1, r7
   1c404:	mvn	r0, #-2147483648	; 0x80000000
   1c408:	bl	1d79c <__assert_fail@plt+0xc410>
   1c40c:	cmp	r6, r0
   1c410:	movle	r0, #0
   1c414:	movgt	r0, #1
   1c418:	cmp	r0, #0
   1c41c:	bne	1c4c0 <__assert_fail@plt+0xb134>
   1c420:	mul	r5, r6, r7
   1c424:	mov	r1, r5
   1c428:	mov	r0, r9
   1c42c:	bl	1ce48 <__assert_fail@plt+0xbabc>
   1c430:	cmp	r0, #0
   1c434:	beq	1c4a8 <__assert_fail@plt+0xb11c>
   1c438:	str	r4, [r8]
   1c43c:	add	sp, sp, #12
   1c440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c444:	cmp	r7, #0
   1c448:	blt	1c504 <__assert_fail@plt+0xb178>
   1c44c:	beq	1c364 <__assert_fail@plt+0xafd8>
   1c450:	cmp	r4, #0
   1c454:	blt	1c534 <__assert_fail@plt+0xb1a8>
   1c458:	mov	r1, r7
   1c45c:	mvn	r0, #-2147483648	; 0x80000000
   1c460:	str	r3, [sp, #4]
   1c464:	bl	1d79c <__assert_fail@plt+0xc410>
   1c468:	ldr	r3, [sp, #4]
   1c46c:	cmp	r0, r4
   1c470:	movge	r0, #0
   1c474:	movlt	r0, #1
   1c478:	cmp	r0, #0
   1c47c:	mvnne	r5, #-2147483648	; 0x80000000
   1c480:	bne	1c368 <__assert_fail@plt+0xafdc>
   1c484:	mul	r5, r7, r4
   1c488:	cmp	r5, #63	; 0x3f
   1c48c:	bgt	1c390 <__assert_fail@plt+0xb004>
   1c490:	b	1c364 <__assert_fail@plt+0xafd8>
   1c494:	rsb	r1, r4, #-2147483648	; 0x80000000
   1c498:	cmp	r6, r1
   1c49c:	movge	r1, #0
   1c4a0:	movlt	r1, #1
   1c4a4:	b	1c330 <__assert_fail@plt+0xafa4>
   1c4a8:	adds	r5, r5, #0
   1c4ac:	movne	r5, #1
   1c4b0:	cmp	r9, #0
   1c4b4:	orreq	r5, r5, #1
   1c4b8:	cmp	r5, #0
   1c4bc:	beq	1c438 <__assert_fail@plt+0xb0ac>
   1c4c0:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c4c4:	rsb	r2, sl, #-2147483648	; 0x80000000
   1c4c8:	cmp	r6, r2
   1c4cc:	movge	r2, #0
   1c4d0:	movlt	r2, #1
   1c4d4:	b	1c3c8 <__assert_fail@plt+0xb03c>
   1c4d8:	cmp	r6, #0
   1c4dc:	blt	1c560 <__assert_fail@plt+0xb1d4>
   1c4e0:	cmn	r7, #1
   1c4e4:	beq	1c420 <__assert_fail@plt+0xb094>
   1c4e8:	mov	r1, r7
   1c4ec:	mov	r0, #-2147483648	; 0x80000000
   1c4f0:	bl	1d79c <__assert_fail@plt+0xc410>
   1c4f4:	cmp	r6, r0
   1c4f8:	movle	r0, #0
   1c4fc:	movgt	r0, #1
   1c500:	b	1c418 <__assert_fail@plt+0xb08c>
   1c504:	cmp	r4, #0
   1c508:	blt	1c5a0 <__assert_fail@plt+0xb214>
   1c50c:	cmn	r7, #1
   1c510:	beq	1c484 <__assert_fail@plt+0xb0f8>
   1c514:	str	r3, [sp, #4]
   1c518:	mov	r1, r7
   1c51c:	mov	r0, #-2147483648	; 0x80000000
   1c520:	b	1c464 <__assert_fail@plt+0xb0d8>
   1c524:	mov	r4, fp
   1c528:	b	1c458 <__assert_fail@plt+0xb0cc>
   1c52c:	mov	r4, fp
   1c530:	b	1c50c <__assert_fail@plt+0xb180>
   1c534:	cmn	r4, #1
   1c538:	beq	1c484 <__assert_fail@plt+0xb0f8>
   1c53c:	mov	r1, r4
   1c540:	mov	r0, #-2147483648	; 0x80000000
   1c544:	str	r3, [sp, #4]
   1c548:	bl	1d79c <__assert_fail@plt+0xc410>
   1c54c:	ldr	r3, [sp, #4]
   1c550:	cmp	r7, r0
   1c554:	movle	r0, #0
   1c558:	movgt	r0, #1
   1c55c:	b	1c478 <__assert_fail@plt+0xb0ec>
   1c560:	mov	r1, r7
   1c564:	mvn	r0, #-2147483648	; 0x80000000
   1c568:	bl	1d79c <__assert_fail@plt+0xc410>
   1c56c:	cmp	r6, r0
   1c570:	movge	r0, #0
   1c574:	movlt	r0, #1
   1c578:	b	1c418 <__assert_fail@plt+0xb08c>
   1c57c:	cmn	r6, #1
   1c580:	beq	1c420 <__assert_fail@plt+0xb094>
   1c584:	mov	r1, r6
   1c588:	mov	r0, #-2147483648	; 0x80000000
   1c58c:	bl	1d79c <__assert_fail@plt+0xc410>
   1c590:	cmp	r7, r0
   1c594:	movle	r0, #0
   1c598:	movgt	r0, #1
   1c59c:	b	1c418 <__assert_fail@plt+0xb08c>
   1c5a0:	mov	r1, r7
   1c5a4:	mvn	r0, #-2147483648	; 0x80000000
   1c5a8:	str	r3, [sp, #4]
   1c5ac:	bl	1d79c <__assert_fail@plt+0xc410>
   1c5b0:	ldr	r3, [sp, #4]
   1c5b4:	cmp	r0, r4
   1c5b8:	movle	r0, #0
   1c5bc:	movgt	r0, #1
   1c5c0:	b	1c478 <__assert_fail@plt+0xb0ec>
   1c5c4:	push	{r4, lr}
   1c5c8:	mov	r1, #1
   1c5cc:	bl	1cdd4 <__assert_fail@plt+0xba48>
   1c5d0:	cmp	r0, #0
   1c5d4:	popne	{r4, pc}
   1c5d8:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c5dc:	push	{r4, lr}
   1c5e0:	mov	r1, #1
   1c5e4:	bl	1cdd4 <__assert_fail@plt+0xba48>
   1c5e8:	cmp	r0, #0
   1c5ec:	popne	{r4, pc}
   1c5f0:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c5f4:	push	{r4, lr}
   1c5f8:	bl	1cdd4 <__assert_fail@plt+0xba48>
   1c5fc:	cmp	r0, #0
   1c600:	popne	{r4, pc}
   1c604:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c608:	push	{r4, lr}
   1c60c:	bl	1cdd4 <__assert_fail@plt+0xba48>
   1c610:	cmp	r0, #0
   1c614:	popne	{r4, pc}
   1c618:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c61c:	push	{r4, r5, r6, lr}
   1c620:	mov	r6, r0
   1c624:	mov	r0, r1
   1c628:	mov	r4, r1
   1c62c:	bl	1ce1c <__assert_fail@plt+0xba90>
   1c630:	subs	r5, r0, #0
   1c634:	beq	1c64c <__assert_fail@plt+0xb2c0>
   1c638:	mov	r2, r4
   1c63c:	mov	r1, r6
   1c640:	bl	110c8 <memcpy@plt>
   1c644:	mov	r0, r5
   1c648:	pop	{r4, r5, r6, pc}
   1c64c:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c650:	push	{r4, r5, r6, lr}
   1c654:	mov	r6, r0
   1c658:	mov	r0, r1
   1c65c:	mov	r4, r1
   1c660:	bl	1ce1c <__assert_fail@plt+0xba90>
   1c664:	subs	r5, r0, #0
   1c668:	beq	1c680 <__assert_fail@plt+0xb2f4>
   1c66c:	mov	r2, r4
   1c670:	mov	r1, r6
   1c674:	bl	110c8 <memcpy@plt>
   1c678:	mov	r0, r5
   1c67c:	pop	{r4, r5, r6, pc}
   1c680:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c684:	push	{r4, r5, r6, lr}
   1c688:	mov	r6, r0
   1c68c:	add	r0, r1, #1
   1c690:	mov	r4, r1
   1c694:	bl	1ce1c <__assert_fail@plt+0xba90>
   1c698:	subs	r5, r0, #0
   1c69c:	beq	1c6bc <__assert_fail@plt+0xb330>
   1c6a0:	mov	r3, #0
   1c6a4:	mov	r1, r6
   1c6a8:	strb	r3, [r5, r4]
   1c6ac:	mov	r2, r4
   1c6b0:	bl	110c8 <memcpy@plt>
   1c6b4:	mov	r0, r5
   1c6b8:	pop	{r4, r5, r6, pc}
   1c6bc:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c6c0:	push	{r4, r5, r6, lr}
   1c6c4:	mov	r6, r0
   1c6c8:	bl	1120c <strlen@plt>
   1c6cc:	add	r4, r0, #1
   1c6d0:	mov	r0, r4
   1c6d4:	bl	1ce1c <__assert_fail@plt+0xba90>
   1c6d8:	subs	r5, r0, #0
   1c6dc:	beq	1c6f4 <__assert_fail@plt+0xb368>
   1c6e0:	mov	r2, r4
   1c6e4:	mov	r1, r6
   1c6e8:	bl	110c8 <memcpy@plt>
   1c6ec:	mov	r0, r5
   1c6f0:	pop	{r4, r5, r6, pc}
   1c6f4:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c6f8:	ldr	r3, [pc, #44]	; 1c72c <__assert_fail@plt+0xb3a0>
   1c6fc:	push	{r4, lr}
   1c700:	mov	r2, #5
   1c704:	ldr	r1, [pc, #36]	; 1c730 <__assert_fail@plt+0xb3a4>
   1c708:	mov	r0, #0
   1c70c:	ldr	r4, [r3]
   1c710:	bl	11104 <dcgettext@plt>
   1c714:	ldr	r2, [pc, #24]	; 1c734 <__assert_fail@plt+0xb3a8>
   1c718:	mov	r1, #0
   1c71c:	mov	r3, r0
   1c720:	mov	r0, r4
   1c724:	bl	11194 <error@plt>
   1c728:	bl	11344 <abort@plt>
   1c72c:	andeq	r0, r3, r0, asr #2
   1c730:	andeq	pc, r1, r0, asr r2	; <UNPREDICTABLE>
   1c734:	andeq	lr, r1, ip, lsr #15
   1c738:	push	{r4, lr}
   1c73c:	orr	r1, r1, #512	; 0x200
   1c740:	bl	141b8 <__assert_fail@plt+0x2e2c>
   1c744:	cmp	r0, #0
   1c748:	popne	{r4, pc}
   1c74c:	bl	1123c <__errno_location@plt>
   1c750:	ldr	r3, [r0]
   1c754:	cmp	r3, #22
   1c758:	beq	1c760 <__assert_fail@plt+0xb3d4>
   1c75c:	bl	1c6f8 <__assert_fail@plt+0xb36c>
   1c760:	ldr	r3, [pc, #12]	; 1c774 <__assert_fail@plt+0xb3e8>
   1c764:	mov	r2, #41	; 0x29
   1c768:	ldr	r1, [pc, #8]	; 1c778 <__assert_fail@plt+0xb3ec>
   1c76c:	ldr	r0, [pc, #8]	; 1c77c <__assert_fail@plt+0xb3f0>
   1c770:	bl	1138c <__assert_fail@plt>
   1c774:	andeq	pc, r1, r4, ror #4
   1c778:	andeq	pc, r1, r0, ror r2	; <UNPREDICTABLE>
   1c77c:	andeq	pc, r1, ip, ror r2	; <UNPREDICTABLE>
   1c780:	ldr	r3, [r0, #48]	; 0x30
   1c784:	and	r3, r3, #17
   1c788:	cmp	r3, #16
   1c78c:	beq	1c7b0 <__assert_fail@plt+0xb424>
   1c790:	cmp	r3, #17
   1c794:	beq	1c7a0 <__assert_fail@plt+0xb414>
   1c798:	mov	r0, #0
   1c79c:	bx	lr
   1c7a0:	ldr	r0, [r1, #48]	; 0x30
   1c7a4:	adds	r0, r0, #0
   1c7a8:	movne	r0, #1
   1c7ac:	bx	lr
   1c7b0:	mov	r0, #1
   1c7b4:	bx	lr
   1c7b8:	cmp	r2, #36	; 0x24
   1c7bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c7c0:	sub	sp, sp, #8
   1c7c4:	bhi	1cdac <__assert_fail@plt+0xba20>
   1c7c8:	cmp	r1, #0
   1c7cc:	mov	r6, r1
   1c7d0:	mov	r9, r2
   1c7d4:	mov	r5, r0
   1c7d8:	mov	r8, r3
   1c7dc:	addeq	r6, sp, #4
   1c7e0:	bl	1123c <__errno_location@plt>
   1c7e4:	mov	r3, #0
   1c7e8:	str	r3, [r0]
   1c7ec:	mov	r7, r0
   1c7f0:	bl	111e8 <__ctype_b_loc@plt>
   1c7f4:	ldrb	r1, [r5]
   1c7f8:	mov	r2, r5
   1c7fc:	ldr	r0, [r0]
   1c800:	b	1c808 <__assert_fail@plt+0xb47c>
   1c804:	ldrb	r1, [r2, #1]!
   1c808:	lsl	r3, r1, #1
   1c80c:	ldrh	r3, [r0, r3]
   1c810:	ands	r4, r3, #8192	; 0x2000
   1c814:	bne	1c804 <__assert_fail@plt+0xb478>
   1c818:	cmp	r1, #45	; 0x2d
   1c81c:	bne	1c830 <__assert_fail@plt+0xb4a4>
   1c820:	mov	r4, #4
   1c824:	mov	r0, r4
   1c828:	add	sp, sp, #8
   1c82c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c830:	mov	r2, r9
   1c834:	mov	r1, r6
   1c838:	mov	r0, r5
   1c83c:	bl	11200 <strtoul@plt>
   1c840:	ldr	sl, [r6]
   1c844:	cmp	r5, sl
   1c848:	mov	r9, r0
   1c84c:	beq	1c894 <__assert_fail@plt+0xb508>
   1c850:	ldr	r4, [r7]
   1c854:	cmp	r4, #0
   1c858:	bne	1c884 <__assert_fail@plt+0xb4f8>
   1c85c:	ldr	r3, [sp, #40]	; 0x28
   1c860:	cmp	r3, #0
   1c864:	beq	1c874 <__assert_fail@plt+0xb4e8>
   1c868:	ldrb	r5, [sl]
   1c86c:	cmp	r5, #0
   1c870:	bne	1c8c4 <__assert_fail@plt+0xb538>
   1c874:	mov	r0, r4
   1c878:	str	r9, [r8]
   1c87c:	add	sp, sp, #8
   1c880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c884:	cmp	r4, #34	; 0x22
   1c888:	bne	1c820 <__assert_fail@plt+0xb494>
   1c88c:	mov	r4, #1
   1c890:	b	1c85c <__assert_fail@plt+0xb4d0>
   1c894:	ldr	r3, [sp, #40]	; 0x28
   1c898:	cmp	r3, #0
   1c89c:	beq	1c820 <__assert_fail@plt+0xb494>
   1c8a0:	ldrb	r5, [sl]
   1c8a4:	cmp	r5, #0
   1c8a8:	beq	1c820 <__assert_fail@plt+0xb494>
   1c8ac:	mov	r1, r5
   1c8b0:	mov	r0, r3
   1c8b4:	bl	11218 <strchr@plt>
   1c8b8:	cmp	r0, #0
   1c8bc:	movne	r9, #1
   1c8c0:	beq	1c820 <__assert_fail@plt+0xb494>
   1c8c4:	mov	r1, r5
   1c8c8:	ldr	r0, [sp, #40]	; 0x28
   1c8cc:	bl	11218 <strchr@plt>
   1c8d0:	cmp	r0, #0
   1c8d4:	beq	1cd64 <__assert_fail@plt+0xb9d8>
   1c8d8:	sub	r3, r5, #69	; 0x45
   1c8dc:	cmp	r3, #47	; 0x2f
   1c8e0:	ldrls	pc, [pc, r3, lsl #2]
   1c8e4:	b	1c9a8 <__assert_fail@plt+0xb61c>
   1c8e8:	muleq	r1, ip, sl
   1c8ec:	andeq	ip, r1, r8, lsr #19
   1c8f0:	muleq	r1, ip, sl
   1c8f4:	andeq	ip, r1, r8, lsr #19
   1c8f8:	andeq	ip, r1, r8, lsr #19
   1c8fc:	andeq	ip, r1, r8, lsr #19
   1c900:	muleq	r1, ip, sl
   1c904:	andeq	ip, r1, r8, lsr #19
   1c908:	muleq	r1, ip, sl
   1c90c:	andeq	ip, r1, r8, lsr #19
   1c910:	andeq	ip, r1, r8, lsr #19
   1c914:	muleq	r1, ip, sl
   1c918:	andeq	ip, r1, r8, lsr #19
   1c91c:	andeq	ip, r1, r8, lsr #19
   1c920:	andeq	ip, r1, r8, lsr #19
   1c924:	muleq	r1, ip, sl
   1c928:	andeq	ip, r1, r8, lsr #19
   1c92c:	andeq	ip, r1, r8, lsr #19
   1c930:	andeq	ip, r1, r8, lsr #19
   1c934:	andeq	ip, r1, r8, lsr #19
   1c938:	muleq	r1, ip, sl
   1c93c:	muleq	r1, ip, sl
   1c940:	andeq	ip, r1, r8, lsr #19
   1c944:	andeq	ip, r1, r8, lsr #19
   1c948:	andeq	ip, r1, r8, lsr #19
   1c94c:	andeq	ip, r1, r8, lsr #19
   1c950:	andeq	ip, r1, r8, lsr #19
   1c954:	andeq	ip, r1, r8, lsr #19
   1c958:	andeq	ip, r1, r8, lsr #19
   1c95c:	andeq	ip, r1, r8, lsr #19
   1c960:	andeq	ip, r1, r8, lsr #19
   1c964:	andeq	ip, r1, r8, lsr #19
   1c968:	andeq	ip, r1, r8, lsr #19
   1c96c:	andeq	ip, r1, r8, lsr #19
   1c970:	muleq	r1, ip, sl
   1c974:	andeq	ip, r1, r8, lsr #19
   1c978:	andeq	ip, r1, r8, lsr #19
   1c97c:	andeq	ip, r1, r8, lsr #19
   1c980:	muleq	r1, ip, sl
   1c984:	andeq	ip, r1, r8, lsr #19
   1c988:	muleq	r1, ip, sl
   1c98c:	andeq	ip, r1, r8, lsr #19
   1c990:	andeq	ip, r1, r8, lsr #19
   1c994:	andeq	ip, r1, r8, lsr #19
   1c998:	andeq	ip, r1, r8, lsr #19
   1c99c:	andeq	ip, r1, r8, lsr #19
   1c9a0:	andeq	ip, r1, r8, lsr #19
   1c9a4:	muleq	r1, ip, sl
   1c9a8:	ldr	r0, [pc, #1040]	; 1cdc0 <__assert_fail@plt+0xba34>
   1c9ac:	mov	r2, #1024	; 0x400
   1c9b0:	mov	r1, #1
   1c9b4:	sub	r5, r5, #66	; 0x42
   1c9b8:	cmp	r5, #53	; 0x35
   1c9bc:	ldrls	pc, [pc, r5, lsl #2]
   1c9c0:	b	1cd64 <__assert_fail@plt+0xb9d8>
   1c9c4:	andeq	ip, r1, r0, asr sp
   1c9c8:	andeq	ip, r1, r4, ror #26
   1c9cc:	andeq	ip, r1, r4, ror #26
   1c9d0:	strdeq	ip, [r1], -r0
   1c9d4:	andeq	ip, r1, r4, ror #26
   1c9d8:	andeq	ip, r1, r4, asr #25
   1c9dc:	andeq	ip, r1, r4, ror #26
   1c9e0:	andeq	ip, r1, r4, ror #26
   1c9e4:	andeq	ip, r1, r4, ror #26
   1c9e8:	andeq	ip, r1, r0, ror sp
   1c9ec:	andeq	ip, r1, r4, ror #26
   1c9f0:	andeq	ip, r1, ip, lsr #25
   1c9f4:	andeq	ip, r1, r4, ror #26
   1c9f8:	andeq	ip, r1, r4, ror #26
   1c9fc:	andeq	ip, r1, r8, ror #24
   1ca00:	andeq	ip, r1, r4, ror #26
   1ca04:	andeq	ip, r1, r4, ror #26
   1ca08:	andeq	ip, r1, r4, ror #26
   1ca0c:	andeq	ip, r1, r4, lsl ip
   1ca10:	andeq	ip, r1, r4, ror #26
   1ca14:	andeq	ip, r1, r4, ror #26
   1ca18:	andeq	ip, r1, r4, ror #26
   1ca1c:	andeq	ip, r1, r4, ror #26
   1ca20:	andeq	ip, r1, r4, lsr #23
   1ca24:	andeq	ip, r1, r4, lsr #22
   1ca28:	andeq	ip, r1, r4, ror #26
   1ca2c:	andeq	ip, r1, r4, ror #26
   1ca30:	andeq	ip, r1, r4, ror #26
   1ca34:	andeq	ip, r1, r4, ror #26
   1ca38:	andeq	ip, r1, r4, ror #26
   1ca3c:	andeq	ip, r1, r4, ror #26
   1ca40:	andeq	ip, r1, r4, ror #26
   1ca44:	andeq	ip, r1, r0, lsl fp
   1ca48:	andeq	ip, r1, r8, lsl #22
   1ca4c:	andeq	ip, r1, r4, ror #26
   1ca50:	andeq	ip, r1, r4, ror #26
   1ca54:	andeq	ip, r1, r4, ror #26
   1ca58:	andeq	ip, r1, r4, asr #25
   1ca5c:	andeq	ip, r1, r4, ror #26
   1ca60:	andeq	ip, r1, r4, ror #26
   1ca64:	andeq	ip, r1, r4, ror #26
   1ca68:	andeq	ip, r1, r0, ror sp
   1ca6c:	andeq	ip, r1, r4, ror #26
   1ca70:	andeq	ip, r1, ip, lsr #25
   1ca74:	andeq	ip, r1, r4, ror #26
   1ca78:	andeq	ip, r1, r4, ror #26
   1ca7c:	andeq	ip, r1, r4, ror #26
   1ca80:	andeq	ip, r1, r4, ror #26
   1ca84:	andeq	ip, r1, r4, ror #26
   1ca88:	andeq	ip, r1, r4, ror #26
   1ca8c:	andeq	ip, r1, r4, lsl ip
   1ca90:	andeq	ip, r1, r4, ror #26
   1ca94:	andeq	ip, r1, r4, ror #26
   1ca98:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca9c:	mov	r1, #48	; 0x30
   1caa0:	ldr	r0, [sp, #40]	; 0x28
   1caa4:	bl	11218 <strchr@plt>
   1caa8:	cmp	r0, #0
   1caac:	beq	1c9a8 <__assert_fail@plt+0xb61c>
   1cab0:	ldrb	r3, [sl, #1]
   1cab4:	cmp	r3, #68	; 0x44
   1cab8:	beq	1cacc <__assert_fail@plt+0xb740>
   1cabc:	cmp	r3, #105	; 0x69
   1cac0:	beq	1cd84 <__assert_fail@plt+0xb9f8>
   1cac4:	cmp	r3, #66	; 0x42
   1cac8:	bne	1c9a8 <__assert_fail@plt+0xb61c>
   1cacc:	ldr	r0, [pc, #752]	; 1cdc4 <__assert_fail@plt+0xba38>
   1cad0:	mov	r2, #1000	; 0x3e8
   1cad4:	mov	r1, #2
   1cad8:	b	1c9b4 <__assert_fail@plt+0xb628>
   1cadc:	cmp	r9, #0
   1cae0:	lslge	r9, r9, #1
   1cae4:	movge	r3, #0
   1cae8:	blt	1cda0 <__assert_fail@plt+0xba14>
   1caec:	add	r2, sl, r1
   1caf0:	str	r2, [r6]
   1caf4:	ldrb	r2, [sl, r1]
   1caf8:	orr	r4, r4, r3
   1cafc:	cmp	r2, #0
   1cb00:	orrne	r4, r4, #2
   1cb04:	b	1c874 <__assert_fail@plt+0xb4e8>
   1cb08:	mov	r3, #0
   1cb0c:	b	1caec <__assert_fail@plt+0xb760>
   1cb10:	cmp	r9, #8388608	; 0x800000
   1cb14:	bcs	1cda0 <__assert_fail@plt+0xba14>
   1cb18:	lsl	r9, r9, #9
   1cb1c:	mov	r3, #0
   1cb20:	b	1caec <__assert_fail@plt+0xb760>
   1cb24:	mul	r3, r9, r2
   1cb28:	cmp	r0, r9
   1cb2c:	mvncc	r3, #0
   1cb30:	cmp	r3, r0
   1cb34:	mul	ip, r2, r3
   1cb38:	mvnhi	ip, #0
   1cb3c:	movhi	r3, #1
   1cb40:	mul	lr, r2, ip
   1cb44:	movls	r3, #0
   1cb48:	cmp	r0, r9
   1cb4c:	orrcc	r3, r3, #1
   1cb50:	cmp	ip, r0
   1cb54:	mvnhi	lr, #0
   1cb58:	orrhi	r3, r3, #1
   1cb5c:	mul	ip, r2, lr
   1cb60:	cmp	lr, r0
   1cb64:	mvnhi	ip, #0
   1cb68:	orrhi	r3, r3, #1
   1cb6c:	cmp	ip, r0
   1cb70:	mul	lr, r2, ip
   1cb74:	orrhi	r3, r3, #1
   1cb78:	mvnhi	lr, #0
   1cb7c:	cmp	r0, lr
   1cb80:	mul	ip, lr, r2
   1cb84:	orrcc	r3, r3, #1
   1cb88:	mvncc	ip, #0
   1cb8c:	mul	r2, r2, ip
   1cb90:	cmp	ip, r0
   1cb94:	movls	r9, r2
   1cb98:	mvnhi	r9, #0
   1cb9c:	orrhi	r3, r3, #1
   1cba0:	b	1caec <__assert_fail@plt+0xb760>
   1cba4:	mul	r3, r9, r2
   1cba8:	cmp	r0, r9
   1cbac:	mvncc	r3, #0
   1cbb0:	cmp	r3, r0
   1cbb4:	mul	ip, r2, r3
   1cbb8:	mvnhi	ip, #0
   1cbbc:	movhi	r3, #1
   1cbc0:	mul	lr, r2, ip
   1cbc4:	movls	r3, #0
   1cbc8:	cmp	r0, r9
   1cbcc:	orrcc	r3, r3, #1
   1cbd0:	cmp	ip, r0
   1cbd4:	movls	ip, lr
   1cbd8:	mvnhi	ip, #0
   1cbdc:	orrhi	r3, r3, #1
   1cbe0:	mul	lr, ip, r2
   1cbe4:	cmp	r0, ip
   1cbe8:	mvncc	lr, #0
   1cbec:	orrcc	r3, r3, #1
   1cbf0:	mul	ip, r2, lr
   1cbf4:	cmp	lr, r0
   1cbf8:	mvnhi	ip, #0
   1cbfc:	orrhi	r3, r3, #1
   1cc00:	cmp	r0, ip
   1cc04:	mul	lr, ip, r2
   1cc08:	orrcc	r3, r3, #1
   1cc0c:	mvncc	lr, #0
   1cc10:	b	1cb7c <__assert_fail@plt+0xb7f0>
   1cc14:	mul	r3, r9, r2
   1cc18:	cmp	r0, r9
   1cc1c:	mvncc	r3, #0
   1cc20:	cmp	r0, r3
   1cc24:	mul	ip, r3, r2
   1cc28:	mvncc	ip, #0
   1cc2c:	movcc	r3, #1
   1cc30:	mul	lr, r2, ip
   1cc34:	movcs	r3, #0
   1cc38:	cmp	r0, r9
   1cc3c:	orrcc	r3, r3, #1
   1cc40:	cmp	ip, r0
   1cc44:	movls	ip, lr
   1cc48:	mvnhi	ip, #0
   1cc4c:	orrhi	r3, r3, #1
   1cc50:	mul	r2, ip, r2
   1cc54:	cmp	r0, ip
   1cc58:	movcs	r9, r2
   1cc5c:	mvncc	r9, #0
   1cc60:	orrcc	r3, r3, #1
   1cc64:	b	1caec <__assert_fail@plt+0xb760>
   1cc68:	mul	r3, r9, r2
   1cc6c:	cmp	r0, r9
   1cc70:	mvncc	r3, #0
   1cc74:	cmp	r0, r3
   1cc78:	mul	ip, r3, r2
   1cc7c:	mvncc	ip, #0
   1cc80:	movcc	r3, #1
   1cc84:	mul	lr, ip, r2
   1cc88:	movcs	r3, #0
   1cc8c:	cmp	r0, r9
   1cc90:	orrcc	r3, r3, #1
   1cc94:	cmp	r0, ip
   1cc98:	mvncc	lr, #0
   1cc9c:	orrcc	r3, r3, #1
   1cca0:	mul	ip, r2, lr
   1cca4:	cmp	lr, r0
   1cca8:	b	1cc48 <__assert_fail@plt+0xb8bc>
   1ccac:	cmp	r0, r9
   1ccb0:	mul	ip, r9, r2
   1ccb4:	movcc	r3, #1
   1ccb8:	mvncc	ip, #0
   1ccbc:	movcs	r3, #0
   1ccc0:	b	1cc50 <__assert_fail@plt+0xb8c4>
   1ccc4:	mul	r3, r9, r2
   1ccc8:	cmp	r0, r9
   1cccc:	mvncc	r3, #0
   1ccd0:	cmp	r3, r0
   1ccd4:	mul	ip, r2, r3
   1ccd8:	movhi	r3, #1
   1ccdc:	movls	r3, #0
   1cce0:	mvnhi	ip, #0
   1cce4:	cmp	r0, r9
   1cce8:	orrcc	r3, r3, #1
   1ccec:	b	1cb8c <__assert_fail@plt+0xb800>
   1ccf0:	mul	r3, r9, r2
   1ccf4:	cmp	r0, r9
   1ccf8:	mvncc	r3, #0
   1ccfc:	cmp	r0, r3
   1cd00:	mul	ip, r3, r2
   1cd04:	mvncc	ip, #0
   1cd08:	movcc	r3, #1
   1cd0c:	mul	lr, r2, ip
   1cd10:	movcs	r3, #0
   1cd14:	cmp	r0, r9
   1cd18:	orrcc	r3, r3, #1
   1cd1c:	cmp	ip, r0
   1cd20:	movls	ip, lr
   1cd24:	mvnhi	ip, #0
   1cd28:	orrhi	r3, r3, #1
   1cd2c:	mul	lr, r2, ip
   1cd30:	cmp	ip, r0
   1cd34:	mvnhi	lr, #0
   1cd38:	orrhi	r3, r3, #1
   1cd3c:	cmp	lr, r0
   1cd40:	mul	ip, r2, lr
   1cd44:	orrhi	r3, r3, #1
   1cd48:	mvnhi	ip, #0
   1cd4c:	b	1cb8c <__assert_fail@plt+0xb800>
   1cd50:	cmp	r9, #4194304	; 0x400000
   1cd54:	bcs	1cda0 <__assert_fail@plt+0xba14>
   1cd58:	lsl	r9, r9, #10
   1cd5c:	mov	r3, #0
   1cd60:	b	1caec <__assert_fail@plt+0xb760>
   1cd64:	str	r9, [r8]
   1cd68:	orr	r4, r4, #2
   1cd6c:	b	1c824 <__assert_fail@plt+0xb498>
   1cd70:	cmp	r0, r9
   1cd74:	bcc	1cda0 <__assert_fail@plt+0xba14>
   1cd78:	mul	r9, r9, r2
   1cd7c:	mov	r3, #0
   1cd80:	b	1caec <__assert_fail@plt+0xb760>
   1cd84:	ldrb	r1, [sl, #2]
   1cd88:	ldr	r0, [pc, #48]	; 1cdc0 <__assert_fail@plt+0xba34>
   1cd8c:	mov	r2, #1024	; 0x400
   1cd90:	cmp	r1, #66	; 0x42
   1cd94:	movne	r1, #1
   1cd98:	moveq	r1, #3
   1cd9c:	b	1c9b4 <__assert_fail@plt+0xb628>
   1cda0:	mvn	r9, #0
   1cda4:	mov	r3, #1
   1cda8:	b	1caec <__assert_fail@plt+0xb760>
   1cdac:	ldr	r3, [pc, #20]	; 1cdc8 <__assert_fail@plt+0xba3c>
   1cdb0:	mov	r2, #85	; 0x55
   1cdb4:	ldr	r1, [pc, #16]	; 1cdcc <__assert_fail@plt+0xba40>
   1cdb8:	ldr	r0, [pc, #16]	; 1cdd0 <__assert_fail@plt+0xba44>
   1cdbc:	bl	1138c <__assert_fail@plt>
   1cdc0:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1cdc4:	subeq	r8, r1, r7, lsr r9
   1cdc8:	andeq	pc, r1, ip, lsl #5
   1cdcc:	muleq	r1, r8, r2
   1cdd0:	andeq	pc, r1, r8, lsr #5
   1cdd4:	cmp	r1, #0
   1cdd8:	cmpne	r0, #0
   1cddc:	moveq	r1, #1
   1cde0:	moveq	r0, r1
   1cde4:	umull	r2, r3, r0, r1
   1cde8:	adds	r3, r3, #0
   1cdec:	movne	r3, #1
   1cdf0:	cmp	r2, #0
   1cdf4:	blt	1ce04 <__assert_fail@plt+0xba78>
   1cdf8:	cmp	r3, #0
   1cdfc:	bne	1ce04 <__assert_fail@plt+0xba78>
   1ce00:	b	11038 <calloc@plt>
   1ce04:	push	{r4, lr}
   1ce08:	bl	1123c <__errno_location@plt>
   1ce0c:	mov	r3, #12
   1ce10:	str	r3, [r0]
   1ce14:	mov	r0, #0
   1ce18:	pop	{r4, pc}
   1ce1c:	cmp	r0, #0
   1ce20:	moveq	r0, #1
   1ce24:	cmp	r0, #0
   1ce28:	blt	1ce30 <__assert_fail@plt+0xbaa4>
   1ce2c:	b	111ac <malloc@plt>
   1ce30:	push	{r4, lr}
   1ce34:	bl	1123c <__errno_location@plt>
   1ce38:	mov	r3, #12
   1ce3c:	str	r3, [r0]
   1ce40:	mov	r0, #0
   1ce44:	pop	{r4, pc}
   1ce48:	cmp	r0, #0
   1ce4c:	beq	1ce70 <__assert_fail@plt+0xbae4>
   1ce50:	cmp	r1, #0
   1ce54:	push	{lr}		; (str lr, [sp, #-4]!)
   1ce58:	sub	sp, sp, #12
   1ce5c:	beq	1ce78 <__assert_fail@plt+0xbaec>
   1ce60:	blt	1ce90 <__assert_fail@plt+0xbb04>
   1ce64:	add	sp, sp, #12
   1ce68:	pop	{lr}		; (ldr lr, [sp], #4)
   1ce6c:	b	11110 <realloc@plt>
   1ce70:	mov	r0, r1
   1ce74:	b	1ce1c <__assert_fail@plt+0xba90>
   1ce78:	str	r1, [sp, #4]
   1ce7c:	bl	12dbc <__assert_fail@plt+0x1a30>
   1ce80:	ldr	r3, [sp, #4]
   1ce84:	mov	r0, r3
   1ce88:	add	sp, sp, #12
   1ce8c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ce90:	bl	1123c <__errno_location@plt>
   1ce94:	mov	r2, #12
   1ce98:	mov	r3, #0
   1ce9c:	str	r2, [r0]
   1cea0:	b	1ce84 <__assert_fail@plt+0xbaf8>
   1cea4:	push	{r4, r5, r6, lr}
   1cea8:	mov	r4, r0
   1ceac:	bl	1117c <__fpending@plt>
   1ceb0:	ldr	r5, [r4]
   1ceb4:	and	r5, r5, #32
   1ceb8:	mov	r6, r0
   1cebc:	mov	r0, r4
   1cec0:	bl	1d010 <__assert_fail@plt+0xbc84>
   1cec4:	cmp	r5, #0
   1cec8:	mov	r4, r0
   1cecc:	bne	1ceec <__assert_fail@plt+0xbb60>
   1ced0:	cmp	r0, #0
   1ced4:	beq	1cee4 <__assert_fail@plt+0xbb58>
   1ced8:	cmp	r6, #0
   1cedc:	beq	1cf08 <__assert_fail@plt+0xbb7c>
   1cee0:	mvn	r4, #0
   1cee4:	mov	r0, r4
   1cee8:	pop	{r4, r5, r6, pc}
   1ceec:	cmp	r0, #0
   1cef0:	bne	1cee0 <__assert_fail@plt+0xbb54>
   1cef4:	bl	1123c <__errno_location@plt>
   1cef8:	str	r4, [r0]
   1cefc:	mvn	r4, #0
   1cf00:	mov	r0, r4
   1cf04:	pop	{r4, r5, r6, pc}
   1cf08:	bl	1123c <__errno_location@plt>
   1cf0c:	ldr	r4, [r0]
   1cf10:	subs	r4, r4, #9
   1cf14:	mvnne	r4, #0
   1cf18:	mov	r0, r4
   1cf1c:	pop	{r4, r5, r6, pc}
   1cf20:	push	{r4, r5}
   1cf24:	mov	r4, #0
   1cf28:	mov	r5, #0
   1cf2c:	ldr	r3, [pc, #12]	; 1cf40 <__assert_fail@plt+0xbbb4>
   1cf30:	strd	r4, [r0, #16]
   1cf34:	str	r3, [r0, #24]
   1cf38:	pop	{r4, r5}
   1cf3c:	bx	lr
   1cf40:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1cf44:	ldr	r3, [pc, #180]	; 1d000 <__assert_fail@plt+0xbc74>
   1cf48:	ldr	r2, [r0, #24]
   1cf4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cf50:	cmp	r2, r3
   1cf54:	bne	1cfec <__assert_fail@plt+0xbc60>
   1cf58:	ldrd	r6, [r0, #16]
   1cf5c:	orrs	r3, r6, r7
   1cf60:	bne	1cf8c <__assert_fail@plt+0xbc00>
   1cf64:	mov	r2, #1
   1cf68:	mov	r3, #0
   1cf6c:	ldrd	r8, [r1, #96]	; 0x60
   1cf70:	strd	r2, [r0, #16]
   1cf74:	ldrd	r2, [r1]
   1cf78:	mov	r1, #0
   1cf7c:	strd	r8, [r0]
   1cf80:	strd	r2, [r0, #8]
   1cf84:	mov	r0, r1
   1cf88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cf8c:	ldrd	r8, [r1, #96]	; 0x60
   1cf90:	ldrd	r2, [r0]
   1cf94:	cmp	r9, r3
   1cf98:	cmpeq	r8, r2
   1cf9c:	beq	1cfd4 <__assert_fail@plt+0xbc48>
   1cfa0:	adds	r2, r6, #1
   1cfa4:	adc	r3, r7, #0
   1cfa8:	and	r6, r6, r2
   1cfac:	and	r7, r7, r3
   1cfb0:	orrs	ip, r6, r7
   1cfb4:	strd	r2, [r0, #16]
   1cfb8:	movne	r1, #0
   1cfbc:	bne	1cf84 <__assert_fail@plt+0xbbf8>
   1cfc0:	orrs	r3, r2, r3
   1cfc4:	bne	1cf74 <__assert_fail@plt+0xbbe8>
   1cfc8:	mov	r1, #1
   1cfcc:	mov	r0, r1
   1cfd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cfd4:	ldrd	r4, [r1]
   1cfd8:	ldrd	r2, [r0, #8]
   1cfdc:	cmp	r5, r3
   1cfe0:	cmpeq	r4, r2
   1cfe4:	bne	1cfa0 <__assert_fail@plt+0xbc14>
   1cfe8:	b	1cfc8 <__assert_fail@plt+0xbc3c>
   1cfec:	ldr	r3, [pc, #16]	; 1d004 <__assert_fail@plt+0xbc78>
   1cff0:	mov	r2, #60	; 0x3c
   1cff4:	ldr	r1, [pc, #12]	; 1d008 <__assert_fail@plt+0xbc7c>
   1cff8:	ldr	r0, [pc, #12]	; 1d00c <__assert_fail@plt+0xbc80>
   1cffc:	bl	1138c <__assert_fail@plt>
   1d000:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1d004:	ldrdeq	pc, [r1], -r0
   1d008:	ldrdeq	pc, [r1], -ip
   1d00c:	strdeq	pc, [r1], -r0
   1d010:	push	{r4, r5, lr}
   1d014:	sub	sp, sp, #12
   1d018:	mov	r4, r0
   1d01c:	bl	1126c <fileno@plt>
   1d020:	cmp	r0, #0
   1d024:	mov	r0, r4
   1d028:	blt	1d0a4 <__assert_fail@plt+0xbd18>
   1d02c:	bl	111c4 <__freading@plt>
   1d030:	cmp	r0, #0
   1d034:	bne	1d070 <__assert_fail@plt+0xbce4>
   1d038:	mov	r0, r4
   1d03c:	bl	1d2bc <__assert_fail@plt+0xbf30>
   1d040:	cmp	r0, #0
   1d044:	beq	1d0a0 <__assert_fail@plt+0xbd14>
   1d048:	bl	1123c <__errno_location@plt>
   1d04c:	mov	r5, r0
   1d050:	mov	r0, r4
   1d054:	ldr	r4, [r5]
   1d058:	bl	11284 <fclose@plt>
   1d05c:	cmp	r4, #0
   1d060:	mvnne	r0, #0
   1d064:	strne	r4, [r5]
   1d068:	add	sp, sp, #12
   1d06c:	pop	{r4, r5, pc}
   1d070:	mov	r0, r4
   1d074:	bl	1126c <fileno@plt>
   1d078:	mov	r3, #1
   1d07c:	str	r3, [sp]
   1d080:	mov	r2, #0
   1d084:	mov	r3, #0
   1d088:	bl	11158 <lseek64@plt>
   1d08c:	mvn	r3, #0
   1d090:	mvn	r2, #0
   1d094:	cmp	r1, r3
   1d098:	cmpeq	r0, r2
   1d09c:	bne	1d038 <__assert_fail@plt+0xbcac>
   1d0a0:	mov	r0, r4
   1d0a4:	add	sp, sp, #12
   1d0a8:	pop	{r4, r5, lr}
   1d0ac:	b	11284 <fclose@plt>
   1d0b0:	push	{r1, r2, r3}
   1d0b4:	push	{r4, r5, r6, r7, lr}
   1d0b8:	sub	sp, sp, #8
   1d0bc:	add	r3, sp, #32
   1d0c0:	ldr	r1, [sp, #28]
   1d0c4:	str	r3, [sp, #4]
   1d0c8:	cmp	r1, #0
   1d0cc:	beq	1d164 <__assert_fail@plt+0xbdd8>
   1d0d0:	ldr	r2, [pc, #412]	; 1d274 <__assert_fail@plt+0xbee8>
   1d0d4:	mov	r5, r0
   1d0d8:	cmp	r1, r2
   1d0dc:	bne	1d128 <__assert_fail@plt+0xbd9c>
   1d0e0:	ldr	r6, [pc, #400]	; 1d278 <__assert_fail@plt+0xbeec>
   1d0e4:	ldr	r7, [r3]
   1d0e8:	add	r2, sp, #36	; 0x24
   1d0ec:	ldr	r3, [r6]
   1d0f0:	str	r2, [sp, #4]
   1d0f4:	cmp	r3, #0
   1d0f8:	mov	r2, r7
   1d0fc:	blt	1d228 <__assert_fail@plt+0xbe9c>
   1d100:	bl	1129c <fcntl64@plt>
   1d104:	subs	r4, r0, #0
   1d108:	blt	1d1ac <__assert_fail@plt+0xbe20>
   1d10c:	mov	r3, #1
   1d110:	str	r3, [r6]
   1d114:	mov	r0, r4
   1d118:	add	sp, sp, #8
   1d11c:	pop	{r4, r5, r6, r7, lr}
   1d120:	add	sp, sp, #12
   1d124:	bx	lr
   1d128:	cmp	r1, #11
   1d12c:	beq	1d154 <__assert_fail@plt+0xbdc8>
   1d130:	bgt	1d174 <__assert_fail@plt+0xbde8>
   1d134:	cmp	r1, #3
   1d138:	beq	1d154 <__assert_fail@plt+0xbdc8>
   1d13c:	ble	1d268 <__assert_fail@plt+0xbedc>
   1d140:	cmp	r1, #8
   1d144:	beq	1d194 <__assert_fail@plt+0xbe08>
   1d148:	ble	1d194 <__assert_fail@plt+0xbe08>
   1d14c:	cmp	r1, #9
   1d150:	bne	1d194 <__assert_fail@plt+0xbe08>
   1d154:	mov	r0, r5
   1d158:	bl	1129c <fcntl64@plt>
   1d15c:	mov	r4, r0
   1d160:	b	1d114 <__assert_fail@plt+0xbd88>
   1d164:	ldr	r2, [sp, #32]
   1d168:	bl	1129c <fcntl64@plt>
   1d16c:	mov	r4, r0
   1d170:	b	1d114 <__assert_fail@plt+0xbd88>
   1d174:	ldr	r3, [pc, #256]	; 1d27c <__assert_fail@plt+0xbef0>
   1d178:	cmp	r1, r3
   1d17c:	bgt	1d248 <__assert_fail@plt+0xbebc>
   1d180:	cmp	r1, r2
   1d184:	bge	1d194 <__assert_fail@plt+0xbe08>
   1d188:	sub	r3, r3, #6
   1d18c:	cmp	r1, r3
   1d190:	beq	1d154 <__assert_fail@plt+0xbdc8>
   1d194:	ldr	r3, [sp, #4]
   1d198:	mov	r0, r5
   1d19c:	ldr	r2, [r3]
   1d1a0:	bl	1129c <fcntl64@plt>
   1d1a4:	mov	r4, r0
   1d1a8:	b	1d114 <__assert_fail@plt+0xbd88>
   1d1ac:	bl	1123c <__errno_location@plt>
   1d1b0:	ldr	r3, [r0]
   1d1b4:	cmp	r3, #22
   1d1b8:	bne	1d10c <__assert_fail@plt+0xbd80>
   1d1bc:	mov	r2, r7
   1d1c0:	mov	r0, r5
   1d1c4:	mov	r1, #0
   1d1c8:	bl	1129c <fcntl64@plt>
   1d1cc:	subs	r4, r0, #0
   1d1d0:	blt	1d114 <__assert_fail@plt+0xbd88>
   1d1d4:	mvn	r3, #0
   1d1d8:	str	r3, [r6]
   1d1dc:	mov	r1, #1
   1d1e0:	mov	r0, r4
   1d1e4:	bl	1129c <fcntl64@plt>
   1d1e8:	subs	r2, r0, #0
   1d1ec:	blt	1d208 <__assert_fail@plt+0xbe7c>
   1d1f0:	orr	r2, r2, #1
   1d1f4:	mov	r1, #2
   1d1f8:	mov	r0, r4
   1d1fc:	bl	1129c <fcntl64@plt>
   1d200:	cmn	r0, #1
   1d204:	bne	1d114 <__assert_fail@plt+0xbd88>
   1d208:	bl	1123c <__errno_location@plt>
   1d20c:	mov	r5, r0
   1d210:	mov	r0, r4
   1d214:	ldr	r6, [r5]
   1d218:	mvn	r4, #0
   1d21c:	bl	11350 <close@plt>
   1d220:	str	r6, [r5]
   1d224:	b	1d114 <__assert_fail@plt+0xbd88>
   1d228:	mov	r1, #0
   1d22c:	bl	1129c <fcntl64@plt>
   1d230:	subs	r4, r0, #0
   1d234:	blt	1d114 <__assert_fail@plt+0xbd88>
   1d238:	ldr	r3, [r6]
   1d23c:	cmn	r3, #1
   1d240:	beq	1d1dc <__assert_fail@plt+0xbe50>
   1d244:	b	1d114 <__assert_fail@plt+0xbd88>
   1d248:	ldr	r3, [pc, #48]	; 1d280 <__assert_fail@plt+0xbef4>
   1d24c:	cmp	r1, r3
   1d250:	beq	1d194 <__assert_fail@plt+0xbe08>
   1d254:	blt	1d154 <__assert_fail@plt+0xbdc8>
   1d258:	add	r3, r3, #1
   1d25c:	cmp	r1, r3
   1d260:	bne	1d194 <__assert_fail@plt+0xbe08>
   1d264:	b	1d154 <__assert_fail@plt+0xbdc8>
   1d268:	cmp	r1, #1
   1d26c:	bne	1d194 <__assert_fail@plt+0xbe08>
   1d270:	b	1d154 <__assert_fail@plt+0xbdc8>
   1d274:	andeq	r0, r0, r6, lsl #8
   1d278:	strdeq	r0, [r3], -ip
   1d27c:	andeq	r0, r0, r7, lsl #8
   1d280:	andeq	r0, r0, r9, lsl #8
   1d284:	push	{r1, r2, r3}
   1d288:	push	{lr}		; (str lr, [sp, #-4]!)
   1d28c:	sub	sp, sp, #8
   1d290:	ldr	r1, [sp, #12]
   1d294:	ands	r2, r1, #64	; 0x40
   1d298:	addne	r3, sp, #16
   1d29c:	ldrne	r2, [sp, #16]
   1d2a0:	strne	r3, [sp, #4]
   1d2a4:	bl	111a0 <open64@plt>
   1d2a8:	bl	1afdc <__assert_fail@plt+0x9c50>
   1d2ac:	add	sp, sp, #8
   1d2b0:	pop	{lr}		; (ldr lr, [sp], #4)
   1d2b4:	add	sp, sp, #12
   1d2b8:	bx	lr
   1d2bc:	push	{r4, lr}
   1d2c0:	subs	r4, r0, #0
   1d2c4:	sub	sp, sp, #8
   1d2c8:	beq	1d2e4 <__assert_fail@plt+0xbf58>
   1d2cc:	bl	111c4 <__freading@plt>
   1d2d0:	cmp	r0, #0
   1d2d4:	beq	1d2e4 <__assert_fail@plt+0xbf58>
   1d2d8:	ldr	r3, [r4]
   1d2dc:	tst	r3, #256	; 0x100
   1d2e0:	bne	1d2f4 <__assert_fail@plt+0xbf68>
   1d2e4:	mov	r0, r4
   1d2e8:	add	sp, sp, #8
   1d2ec:	pop	{r4, lr}
   1d2f0:	b	1108c <fflush@plt>
   1d2f4:	mov	r3, #1
   1d2f8:	str	r3, [sp]
   1d2fc:	mov	r2, #0
   1d300:	mov	r3, #0
   1d304:	mov	r0, r4
   1d308:	bl	1d31c <__assert_fail@plt+0xbf90>
   1d30c:	mov	r0, r4
   1d310:	add	sp, sp, #8
   1d314:	pop	{r4, lr}
   1d318:	b	1108c <fflush@plt>
   1d31c:	push	{r4, r5, r6, r7, r8, lr}
   1d320:	sub	sp, sp, #8
   1d324:	ldmib	r0, {ip, lr}
   1d328:	mov	r4, r0
   1d32c:	ldr	r5, [sp, #32]
   1d330:	cmp	lr, ip
   1d334:	beq	1d34c <__assert_fail@plt+0xbfc0>
   1d338:	str	r5, [sp, #32]
   1d33c:	mov	r0, r4
   1d340:	add	sp, sp, #8
   1d344:	pop	{r4, r5, r6, r7, r8, lr}
   1d348:	b	11290 <fseeko64@plt>
   1d34c:	ldr	lr, [r0, #20]
   1d350:	ldr	ip, [r0, #16]
   1d354:	cmp	lr, ip
   1d358:	bne	1d338 <__assert_fail@plt+0xbfac>
   1d35c:	ldr	r8, [r0, #36]	; 0x24
   1d360:	cmp	r8, #0
   1d364:	bne	1d338 <__assert_fail@plt+0xbfac>
   1d368:	mov	r6, r2
   1d36c:	mov	r7, r3
   1d370:	bl	1126c <fileno@plt>
   1d374:	mov	r2, r6
   1d378:	mov	r3, r7
   1d37c:	str	r5, [sp]
   1d380:	bl	11158 <lseek64@plt>
   1d384:	mvn	r3, #0
   1d388:	mvn	r2, #0
   1d38c:	cmp	r1, r3
   1d390:	cmpeq	r0, r2
   1d394:	beq	1d3b4 <__assert_fail@plt+0xc028>
   1d398:	ldr	r3, [r4]
   1d39c:	strd	r0, [r4, #80]	; 0x50
   1d3a0:	mov	r0, r8
   1d3a4:	bic	r3, r3, #16
   1d3a8:	str	r3, [r4]
   1d3ac:	add	sp, sp, #8
   1d3b0:	pop	{r4, r5, r6, r7, r8, pc}
   1d3b4:	mvn	r0, #0
   1d3b8:	b	1d3ac <__assert_fail@plt+0xc020>
   1d3bc:	push	{r4, lr}
   1d3c0:	mov	r0, #14
   1d3c4:	bl	112cc <nl_langinfo@plt>
   1d3c8:	cmp	r0, #0
   1d3cc:	beq	1d3e4 <__assert_fail@plt+0xc058>
   1d3d0:	ldrb	r2, [r0]
   1d3d4:	ldr	r3, [pc, #16]	; 1d3ec <__assert_fail@plt+0xc060>
   1d3d8:	cmp	r2, #0
   1d3dc:	moveq	r0, r3
   1d3e0:	pop	{r4, pc}
   1d3e4:	ldr	r0, [pc]	; 1d3ec <__assert_fail@plt+0xc060>
   1d3e8:	pop	{r4, pc}
   1d3ec:	andeq	pc, r1, r8, lsl #6
   1d3f0:	push	{r4, r5, r6, r7, lr}
   1d3f4:	subs	r6, r0, #0
   1d3f8:	sub	sp, sp, #12
   1d3fc:	addeq	r6, sp, #4
   1d400:	mov	r0, r6
   1d404:	mov	r5, r2
   1d408:	mov	r7, r1
   1d40c:	bl	11188 <mbrtowc@plt>
   1d410:	cmp	r5, #0
   1d414:	cmnne	r0, #3
   1d418:	mov	r4, r0
   1d41c:	bls	1d438 <__assert_fail@plt+0xc0ac>
   1d420:	mov	r0, #0
   1d424:	bl	1d49c <__assert_fail@plt+0xc110>
   1d428:	cmp	r0, #0
   1d42c:	moveq	r4, #1
   1d430:	ldrbeq	r3, [r7]
   1d434:	streq	r3, [r6]
   1d438:	mov	r0, r4
   1d43c:	add	sp, sp, #12
   1d440:	pop	{r4, r5, r6, r7, pc}
   1d444:	push	{r4, r5, r6, lr}
   1d448:	subs	r4, r2, #0
   1d44c:	mov	r6, r0
   1d450:	mov	r5, r1
   1d454:	beq	1d480 <__assert_fail@plt+0xc0f4>
   1d458:	mov	r1, r4
   1d45c:	mvn	r0, #0
   1d460:	bl	1d590 <__assert_fail@plt+0xc204>
   1d464:	cmp	r0, r5
   1d468:	bcs	1d480 <__assert_fail@plt+0xc0f4>
   1d46c:	bl	1123c <__errno_location@plt>
   1d470:	mov	r3, #12
   1d474:	str	r3, [r0]
   1d478:	mov	r0, #0
   1d47c:	pop	{r4, r5, r6, pc}
   1d480:	mul	r1, r5, r4
   1d484:	mov	r0, r6
   1d488:	pop	{r4, r5, r6, lr}
   1d48c:	b	1ce48 <__assert_fail@plt+0xbabc>
   1d490:	mov	r2, #3
   1d494:	mov	r1, #0
   1d498:	b	1d0b0 <__assert_fail@plt+0xbd24>
   1d49c:	push	{lr}		; (str lr, [sp, #-4]!)
   1d4a0:	sub	sp, sp, #268	; 0x10c
   1d4a4:	add	r1, sp, #4
   1d4a8:	ldr	r2, [pc, #60]	; 1d4ec <__assert_fail@plt+0xc160>
   1d4ac:	bl	1d4f8 <__assert_fail@plt+0xc16c>
   1d4b0:	cmp	r0, #0
   1d4b4:	movne	r0, #0
   1d4b8:	bne	1d4e4 <__assert_fail@plt+0xc158>
   1d4bc:	ldr	r1, [pc, #44]	; 1d4f0 <__assert_fail@plt+0xc164>
   1d4c0:	add	r0, sp, #4
   1d4c4:	bl	11074 <strcmp@plt>
   1d4c8:	cmp	r0, #0
   1d4cc:	beq	1d4e4 <__assert_fail@plt+0xc158>
   1d4d0:	add	r0, sp, #4
   1d4d4:	ldr	r1, [pc, #24]	; 1d4f4 <__assert_fail@plt+0xc168>
   1d4d8:	bl	11074 <strcmp@plt>
   1d4dc:	adds	r0, r0, #0
   1d4e0:	movne	r0, #1
   1d4e4:	add	sp, sp, #268	; 0x10c
   1d4e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1d4ec:	andeq	r0, r0, r1, lsl #2
   1d4f0:	andeq	pc, r1, r0, lsl r3	; <UNPREDICTABLE>
   1d4f4:	andeq	pc, r1, r4, lsl r3	; <UNPREDICTABLE>
   1d4f8:	push	{r4, r5, r6, lr}
   1d4fc:	mov	r5, r1
   1d500:	mov	r1, #0
   1d504:	mov	r4, r2
   1d508:	bl	112a8 <setlocale@plt>
   1d50c:	subs	r6, r0, #0
   1d510:	beq	1d56c <__assert_fail@plt+0xc1e0>
   1d514:	bl	1120c <strlen@plt>
   1d518:	cmp	r4, r0
   1d51c:	bhi	1d554 <__assert_fail@plt+0xc1c8>
   1d520:	cmp	r4, #0
   1d524:	bne	1d530 <__assert_fail@plt+0xc1a4>
   1d528:	mov	r0, #34	; 0x22
   1d52c:	pop	{r4, r5, r6, pc}
   1d530:	sub	r4, r4, #1
   1d534:	mov	r1, r6
   1d538:	mov	r2, r4
   1d53c:	mov	r0, r5
   1d540:	bl	110c8 <memcpy@plt>
   1d544:	mov	r3, #0
   1d548:	strb	r3, [r5, r4]
   1d54c:	mov	r0, #34	; 0x22
   1d550:	pop	{r4, r5, r6, pc}
   1d554:	add	r2, r0, #1
   1d558:	mov	r1, r6
   1d55c:	mov	r0, r5
   1d560:	bl	110c8 <memcpy@plt>
   1d564:	mov	r0, #0
   1d568:	pop	{r4, r5, r6, pc}
   1d56c:	cmp	r4, #0
   1d570:	beq	1d580 <__assert_fail@plt+0xc1f4>
   1d574:	strb	r6, [r5]
   1d578:	mov	r0, #22
   1d57c:	pop	{r4, r5, r6, pc}
   1d580:	mov	r0, #22
   1d584:	pop	{r4, r5, r6, pc}
   1d588:	mov	r1, #0
   1d58c:	b	112a8 <setlocale@plt>
   1d590:	subs	r2, r1, #1
   1d594:	bxeq	lr
   1d598:	bcc	1d770 <__assert_fail@plt+0xc3e4>
   1d59c:	cmp	r0, r1
   1d5a0:	bls	1d754 <__assert_fail@plt+0xc3c8>
   1d5a4:	tst	r1, r2
   1d5a8:	beq	1d760 <__assert_fail@plt+0xc3d4>
   1d5ac:	clz	r3, r0
   1d5b0:	clz	r2, r1
   1d5b4:	sub	r3, r2, r3
   1d5b8:	rsbs	r3, r3, #31
   1d5bc:	addne	r3, r3, r3, lsl #1
   1d5c0:	mov	r2, #0
   1d5c4:	addne	pc, pc, r3, lsl #2
   1d5c8:	nop			; (mov r0, r0)
   1d5cc:	cmp	r0, r1, lsl #31
   1d5d0:	adc	r2, r2, r2
   1d5d4:	subcs	r0, r0, r1, lsl #31
   1d5d8:	cmp	r0, r1, lsl #30
   1d5dc:	adc	r2, r2, r2
   1d5e0:	subcs	r0, r0, r1, lsl #30
   1d5e4:	cmp	r0, r1, lsl #29
   1d5e8:	adc	r2, r2, r2
   1d5ec:	subcs	r0, r0, r1, lsl #29
   1d5f0:	cmp	r0, r1, lsl #28
   1d5f4:	adc	r2, r2, r2
   1d5f8:	subcs	r0, r0, r1, lsl #28
   1d5fc:	cmp	r0, r1, lsl #27
   1d600:	adc	r2, r2, r2
   1d604:	subcs	r0, r0, r1, lsl #27
   1d608:	cmp	r0, r1, lsl #26
   1d60c:	adc	r2, r2, r2
   1d610:	subcs	r0, r0, r1, lsl #26
   1d614:	cmp	r0, r1, lsl #25
   1d618:	adc	r2, r2, r2
   1d61c:	subcs	r0, r0, r1, lsl #25
   1d620:	cmp	r0, r1, lsl #24
   1d624:	adc	r2, r2, r2
   1d628:	subcs	r0, r0, r1, lsl #24
   1d62c:	cmp	r0, r1, lsl #23
   1d630:	adc	r2, r2, r2
   1d634:	subcs	r0, r0, r1, lsl #23
   1d638:	cmp	r0, r1, lsl #22
   1d63c:	adc	r2, r2, r2
   1d640:	subcs	r0, r0, r1, lsl #22
   1d644:	cmp	r0, r1, lsl #21
   1d648:	adc	r2, r2, r2
   1d64c:	subcs	r0, r0, r1, lsl #21
   1d650:	cmp	r0, r1, lsl #20
   1d654:	adc	r2, r2, r2
   1d658:	subcs	r0, r0, r1, lsl #20
   1d65c:	cmp	r0, r1, lsl #19
   1d660:	adc	r2, r2, r2
   1d664:	subcs	r0, r0, r1, lsl #19
   1d668:	cmp	r0, r1, lsl #18
   1d66c:	adc	r2, r2, r2
   1d670:	subcs	r0, r0, r1, lsl #18
   1d674:	cmp	r0, r1, lsl #17
   1d678:	adc	r2, r2, r2
   1d67c:	subcs	r0, r0, r1, lsl #17
   1d680:	cmp	r0, r1, lsl #16
   1d684:	adc	r2, r2, r2
   1d688:	subcs	r0, r0, r1, lsl #16
   1d68c:	cmp	r0, r1, lsl #15
   1d690:	adc	r2, r2, r2
   1d694:	subcs	r0, r0, r1, lsl #15
   1d698:	cmp	r0, r1, lsl #14
   1d69c:	adc	r2, r2, r2
   1d6a0:	subcs	r0, r0, r1, lsl #14
   1d6a4:	cmp	r0, r1, lsl #13
   1d6a8:	adc	r2, r2, r2
   1d6ac:	subcs	r0, r0, r1, lsl #13
   1d6b0:	cmp	r0, r1, lsl #12
   1d6b4:	adc	r2, r2, r2
   1d6b8:	subcs	r0, r0, r1, lsl #12
   1d6bc:	cmp	r0, r1, lsl #11
   1d6c0:	adc	r2, r2, r2
   1d6c4:	subcs	r0, r0, r1, lsl #11
   1d6c8:	cmp	r0, r1, lsl #10
   1d6cc:	adc	r2, r2, r2
   1d6d0:	subcs	r0, r0, r1, lsl #10
   1d6d4:	cmp	r0, r1, lsl #9
   1d6d8:	adc	r2, r2, r2
   1d6dc:	subcs	r0, r0, r1, lsl #9
   1d6e0:	cmp	r0, r1, lsl #8
   1d6e4:	adc	r2, r2, r2
   1d6e8:	subcs	r0, r0, r1, lsl #8
   1d6ec:	cmp	r0, r1, lsl #7
   1d6f0:	adc	r2, r2, r2
   1d6f4:	subcs	r0, r0, r1, lsl #7
   1d6f8:	cmp	r0, r1, lsl #6
   1d6fc:	adc	r2, r2, r2
   1d700:	subcs	r0, r0, r1, lsl #6
   1d704:	cmp	r0, r1, lsl #5
   1d708:	adc	r2, r2, r2
   1d70c:	subcs	r0, r0, r1, lsl #5
   1d710:	cmp	r0, r1, lsl #4
   1d714:	adc	r2, r2, r2
   1d718:	subcs	r0, r0, r1, lsl #4
   1d71c:	cmp	r0, r1, lsl #3
   1d720:	adc	r2, r2, r2
   1d724:	subcs	r0, r0, r1, lsl #3
   1d728:	cmp	r0, r1, lsl #2
   1d72c:	adc	r2, r2, r2
   1d730:	subcs	r0, r0, r1, lsl #2
   1d734:	cmp	r0, r1, lsl #1
   1d738:	adc	r2, r2, r2
   1d73c:	subcs	r0, r0, r1, lsl #1
   1d740:	cmp	r0, r1
   1d744:	adc	r2, r2, r2
   1d748:	subcs	r0, r0, r1
   1d74c:	mov	r0, r2
   1d750:	bx	lr
   1d754:	moveq	r0, #1
   1d758:	movne	r0, #0
   1d75c:	bx	lr
   1d760:	clz	r2, r1
   1d764:	rsb	r2, r2, #31
   1d768:	lsr	r0, r0, r2
   1d76c:	bx	lr
   1d770:	cmp	r0, #0
   1d774:	mvnne	r0, #0
   1d778:	b	1da18 <__assert_fail@plt+0xc68c>
   1d77c:	cmp	r1, #0
   1d780:	beq	1d770 <__assert_fail@plt+0xc3e4>
   1d784:	push	{r0, r1, lr}
   1d788:	bl	1d590 <__assert_fail@plt+0xc204>
   1d78c:	pop	{r1, r2, lr}
   1d790:	mul	r3, r2, r0
   1d794:	sub	r1, r1, r3
   1d798:	bx	lr
   1d79c:	cmp	r1, #0
   1d7a0:	beq	1d9ac <__assert_fail@plt+0xc620>
   1d7a4:	eor	ip, r0, r1
   1d7a8:	rsbmi	r1, r1, #0
   1d7ac:	subs	r2, r1, #1
   1d7b0:	beq	1d978 <__assert_fail@plt+0xc5ec>
   1d7b4:	movs	r3, r0
   1d7b8:	rsbmi	r3, r0, #0
   1d7bc:	cmp	r3, r1
   1d7c0:	bls	1d984 <__assert_fail@plt+0xc5f8>
   1d7c4:	tst	r1, r2
   1d7c8:	beq	1d994 <__assert_fail@plt+0xc608>
   1d7cc:	clz	r2, r3
   1d7d0:	clz	r0, r1
   1d7d4:	sub	r2, r0, r2
   1d7d8:	rsbs	r2, r2, #31
   1d7dc:	addne	r2, r2, r2, lsl #1
   1d7e0:	mov	r0, #0
   1d7e4:	addne	pc, pc, r2, lsl #2
   1d7e8:	nop			; (mov r0, r0)
   1d7ec:	cmp	r3, r1, lsl #31
   1d7f0:	adc	r0, r0, r0
   1d7f4:	subcs	r3, r3, r1, lsl #31
   1d7f8:	cmp	r3, r1, lsl #30
   1d7fc:	adc	r0, r0, r0
   1d800:	subcs	r3, r3, r1, lsl #30
   1d804:	cmp	r3, r1, lsl #29
   1d808:	adc	r0, r0, r0
   1d80c:	subcs	r3, r3, r1, lsl #29
   1d810:	cmp	r3, r1, lsl #28
   1d814:	adc	r0, r0, r0
   1d818:	subcs	r3, r3, r1, lsl #28
   1d81c:	cmp	r3, r1, lsl #27
   1d820:	adc	r0, r0, r0
   1d824:	subcs	r3, r3, r1, lsl #27
   1d828:	cmp	r3, r1, lsl #26
   1d82c:	adc	r0, r0, r0
   1d830:	subcs	r3, r3, r1, lsl #26
   1d834:	cmp	r3, r1, lsl #25
   1d838:	adc	r0, r0, r0
   1d83c:	subcs	r3, r3, r1, lsl #25
   1d840:	cmp	r3, r1, lsl #24
   1d844:	adc	r0, r0, r0
   1d848:	subcs	r3, r3, r1, lsl #24
   1d84c:	cmp	r3, r1, lsl #23
   1d850:	adc	r0, r0, r0
   1d854:	subcs	r3, r3, r1, lsl #23
   1d858:	cmp	r3, r1, lsl #22
   1d85c:	adc	r0, r0, r0
   1d860:	subcs	r3, r3, r1, lsl #22
   1d864:	cmp	r3, r1, lsl #21
   1d868:	adc	r0, r0, r0
   1d86c:	subcs	r3, r3, r1, lsl #21
   1d870:	cmp	r3, r1, lsl #20
   1d874:	adc	r0, r0, r0
   1d878:	subcs	r3, r3, r1, lsl #20
   1d87c:	cmp	r3, r1, lsl #19
   1d880:	adc	r0, r0, r0
   1d884:	subcs	r3, r3, r1, lsl #19
   1d888:	cmp	r3, r1, lsl #18
   1d88c:	adc	r0, r0, r0
   1d890:	subcs	r3, r3, r1, lsl #18
   1d894:	cmp	r3, r1, lsl #17
   1d898:	adc	r0, r0, r0
   1d89c:	subcs	r3, r3, r1, lsl #17
   1d8a0:	cmp	r3, r1, lsl #16
   1d8a4:	adc	r0, r0, r0
   1d8a8:	subcs	r3, r3, r1, lsl #16
   1d8ac:	cmp	r3, r1, lsl #15
   1d8b0:	adc	r0, r0, r0
   1d8b4:	subcs	r3, r3, r1, lsl #15
   1d8b8:	cmp	r3, r1, lsl #14
   1d8bc:	adc	r0, r0, r0
   1d8c0:	subcs	r3, r3, r1, lsl #14
   1d8c4:	cmp	r3, r1, lsl #13
   1d8c8:	adc	r0, r0, r0
   1d8cc:	subcs	r3, r3, r1, lsl #13
   1d8d0:	cmp	r3, r1, lsl #12
   1d8d4:	adc	r0, r0, r0
   1d8d8:	subcs	r3, r3, r1, lsl #12
   1d8dc:	cmp	r3, r1, lsl #11
   1d8e0:	adc	r0, r0, r0
   1d8e4:	subcs	r3, r3, r1, lsl #11
   1d8e8:	cmp	r3, r1, lsl #10
   1d8ec:	adc	r0, r0, r0
   1d8f0:	subcs	r3, r3, r1, lsl #10
   1d8f4:	cmp	r3, r1, lsl #9
   1d8f8:	adc	r0, r0, r0
   1d8fc:	subcs	r3, r3, r1, lsl #9
   1d900:	cmp	r3, r1, lsl #8
   1d904:	adc	r0, r0, r0
   1d908:	subcs	r3, r3, r1, lsl #8
   1d90c:	cmp	r3, r1, lsl #7
   1d910:	adc	r0, r0, r0
   1d914:	subcs	r3, r3, r1, lsl #7
   1d918:	cmp	r3, r1, lsl #6
   1d91c:	adc	r0, r0, r0
   1d920:	subcs	r3, r3, r1, lsl #6
   1d924:	cmp	r3, r1, lsl #5
   1d928:	adc	r0, r0, r0
   1d92c:	subcs	r3, r3, r1, lsl #5
   1d930:	cmp	r3, r1, lsl #4
   1d934:	adc	r0, r0, r0
   1d938:	subcs	r3, r3, r1, lsl #4
   1d93c:	cmp	r3, r1, lsl #3
   1d940:	adc	r0, r0, r0
   1d944:	subcs	r3, r3, r1, lsl #3
   1d948:	cmp	r3, r1, lsl #2
   1d94c:	adc	r0, r0, r0
   1d950:	subcs	r3, r3, r1, lsl #2
   1d954:	cmp	r3, r1, lsl #1
   1d958:	adc	r0, r0, r0
   1d95c:	subcs	r3, r3, r1, lsl #1
   1d960:	cmp	r3, r1
   1d964:	adc	r0, r0, r0
   1d968:	subcs	r3, r3, r1
   1d96c:	cmp	ip, #0
   1d970:	rsbmi	r0, r0, #0
   1d974:	bx	lr
   1d978:	teq	ip, r0
   1d97c:	rsbmi	r0, r0, #0
   1d980:	bx	lr
   1d984:	movcc	r0, #0
   1d988:	asreq	r0, ip, #31
   1d98c:	orreq	r0, r0, #1
   1d990:	bx	lr
   1d994:	clz	r2, r1
   1d998:	rsb	r2, r2, #31
   1d99c:	cmp	ip, #0
   1d9a0:	lsr	r0, r3, r2
   1d9a4:	rsbmi	r0, r0, #0
   1d9a8:	bx	lr
   1d9ac:	cmp	r0, #0
   1d9b0:	mvngt	r0, #-2147483648	; 0x80000000
   1d9b4:	movlt	r0, #-2147483648	; 0x80000000
   1d9b8:	b	1da18 <__assert_fail@plt+0xc68c>
   1d9bc:	cmp	r1, #0
   1d9c0:	beq	1d9ac <__assert_fail@plt+0xc620>
   1d9c4:	push	{r0, r1, lr}
   1d9c8:	bl	1d7a4 <__assert_fail@plt+0xc418>
   1d9cc:	pop	{r1, r2, lr}
   1d9d0:	mul	r3, r2, r0
   1d9d4:	sub	r1, r1, r3
   1d9d8:	bx	lr
   1d9dc:	cmp	r3, #0
   1d9e0:	cmpeq	r2, #0
   1d9e4:	bne	1d9fc <__assert_fail@plt+0xc670>
   1d9e8:	cmp	r1, #0
   1d9ec:	cmpeq	r0, #0
   1d9f0:	mvnne	r1, #0
   1d9f4:	mvnne	r0, #0
   1d9f8:	b	1da18 <__assert_fail@plt+0xc68c>
   1d9fc:	sub	sp, sp, #8
   1da00:	push	{sp, lr}
   1da04:	bl	1da28 <__assert_fail@plt+0xc69c>
   1da08:	ldr	lr, [sp, #4]
   1da0c:	add	sp, sp, #8
   1da10:	pop	{r2, r3}
   1da14:	bx	lr
   1da18:	push	{r1, lr}
   1da1c:	mov	r0, #8
   1da20:	bl	1105c <raise@plt>
   1da24:	pop	{r1, pc}
   1da28:	cmp	r1, r3
   1da2c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1da30:	cmpeq	r0, r2
   1da34:	mov	r4, r0
   1da38:	mov	r5, r1
   1da3c:	ldr	r9, [sp, #28]
   1da40:	movcc	r0, #0
   1da44:	movcc	r1, #0
   1da48:	bcc	1db40 <__assert_fail@plt+0xc7b4>
   1da4c:	cmp	r3, #0
   1da50:	clzeq	ip, r2
   1da54:	clzne	ip, r3
   1da58:	addeq	ip, ip, #32
   1da5c:	cmp	r5, #0
   1da60:	clzeq	r1, r4
   1da64:	addeq	r1, r1, #32
   1da68:	clzne	r1, r5
   1da6c:	sub	ip, ip, r1
   1da70:	sub	lr, ip, #32
   1da74:	lsl	r7, r3, ip
   1da78:	rsb	r8, ip, #32
   1da7c:	orr	r7, r7, r2, lsl lr
   1da80:	orr	r7, r7, r2, lsr r8
   1da84:	lsl	r6, r2, ip
   1da88:	cmp	r5, r7
   1da8c:	cmpeq	r4, r6
   1da90:	movcc	r0, #0
   1da94:	movcc	r1, #0
   1da98:	bcc	1dab4 <__assert_fail@plt+0xc728>
   1da9c:	mov	r3, #1
   1daa0:	subs	r4, r4, r6
   1daa4:	lsl	r1, r3, lr
   1daa8:	lsl	r0, r3, ip
   1daac:	orr	r1, r1, r3, lsr r8
   1dab0:	sbc	r5, r5, r7
   1dab4:	cmp	ip, #0
   1dab8:	beq	1db40 <__assert_fail@plt+0xc7b4>
   1dabc:	lsrs	r3, r7, #1
   1dac0:	rrx	r2, r6
   1dac4:	mov	r6, ip
   1dac8:	b	1daec <__assert_fail@plt+0xc760>
   1dacc:	subs	r4, r4, r2
   1dad0:	sbc	r5, r5, r3
   1dad4:	adds	r4, r4, r4
   1dad8:	adc	r5, r5, r5
   1dadc:	adds	r4, r4, #1
   1dae0:	adc	r5, r5, #0
   1dae4:	subs	r6, r6, #1
   1dae8:	beq	1db08 <__assert_fail@plt+0xc77c>
   1daec:	cmp	r5, r3
   1daf0:	cmpeq	r4, r2
   1daf4:	bcs	1dacc <__assert_fail@plt+0xc740>
   1daf8:	adds	r4, r4, r4
   1dafc:	adc	r5, r5, r5
   1db00:	subs	r6, r6, #1
   1db04:	bne	1daec <__assert_fail@plt+0xc760>
   1db08:	lsr	r6, r4, ip
   1db0c:	lsr	r7, r5, ip
   1db10:	orr	r6, r6, r5, lsl r8
   1db14:	adds	r2, r0, r4
   1db18:	orr	r6, r6, r5, lsr lr
   1db1c:	adc	r3, r1, r5
   1db20:	lsl	r1, r7, ip
   1db24:	orr	r1, r1, r6, lsl lr
   1db28:	lsl	r0, r6, ip
   1db2c:	orr	r1, r1, r6, lsr r8
   1db30:	subs	r0, r2, r0
   1db34:	mov	r4, r6
   1db38:	mov	r5, r7
   1db3c:	sbc	r1, r3, r1
   1db40:	cmp	r9, #0
   1db44:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1db48:	strd	r4, [r9]
   1db4c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1db50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1db54:	mov	r7, r0
   1db58:	ldr	r6, [pc, #72]	; 1dba8 <__assert_fail@plt+0xc81c>
   1db5c:	ldr	r5, [pc, #72]	; 1dbac <__assert_fail@plt+0xc820>
   1db60:	add	r6, pc, r6
   1db64:	add	r5, pc, r5
   1db68:	sub	r6, r6, r5
   1db6c:	mov	r8, r1
   1db70:	mov	r9, r2
   1db74:	bl	1100c <fstatfs64@plt-0x20>
   1db78:	asrs	r6, r6, #2
   1db7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1db80:	mov	r4, #0
   1db84:	add	r4, r4, #1
   1db88:	ldr	r3, [r5], #4
   1db8c:	mov	r2, r9
   1db90:	mov	r1, r8
   1db94:	mov	r0, r7
   1db98:	blx	r3
   1db9c:	cmp	r6, r4
   1dba0:	bne	1db84 <__assert_fail@plt+0xc7f8>
   1dba4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1dba8:	andeq	r2, r1, r8, lsr #7
   1dbac:	andeq	r2, r1, r0, lsr #7
   1dbb0:	bx	lr
   1dbb4:	ldr	r3, [pc, #12]	; 1dbc8 <__assert_fail@plt+0xc83c>
   1dbb8:	mov	r1, #0
   1dbbc:	add	r3, pc, r3
   1dbc0:	ldr	r2, [r3]
   1dbc4:	b	11248 <__cxa_atexit@plt>
   1dbc8:	andeq	r2, r1, r4, ror r5

Disassembly of section .fini:

0001dbcc <.fini>:
   1dbcc:	push	{r3, lr}
   1dbd0:	pop	{r3, pc}
