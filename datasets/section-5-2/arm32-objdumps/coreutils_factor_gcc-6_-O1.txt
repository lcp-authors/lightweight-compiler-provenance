
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011320 <.init>:
   11320:	push	{r3, lr}
   11324:	bl	1179c <__assert_fail@plt+0x48>
   11328:	pop	{r3, pc}

Disassembly of section .plt:

0001132c <calloc@plt-0x14>:
   1132c:	push	{lr}		; (str lr, [sp, #-4]!)
   11330:	ldr	lr, [pc, #4]	; 1133c <calloc@plt-0x4>
   11334:	add	lr, pc, lr
   11338:	ldr	pc, [lr, #8]!
   1133c:	andeq	r0, r2, r4, asr #25

00011340 <calloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #32, 20	; 0x20000
   11348:	ldr	pc, [ip, #3268]!	; 0xcc4

0001134c <fputs_unlocked@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #32, 20	; 0x20000
   11354:	ldr	pc, [ip, #3260]!	; 0xcbc

00011358 <raise@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #32, 20	; 0x20000
   11360:	ldr	pc, [ip, #3252]!	; 0xcb4

00011364 <__gmpz_scan1@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #32, 20	; 0x20000
   1136c:	ldr	pc, [ip, #3244]!	; 0xcac

00011370 <iconv_close@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #32, 20	; 0x20000
   11378:	ldr	pc, [ip, #3236]!	; 0xca4

0001137c <iconv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #32, 20	; 0x20000
   11384:	ldr	pc, [ip, #3228]!	; 0xc9c

00011388 <strcmp@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #32, 20	; 0x20000
   11390:	ldr	pc, [ip, #3220]!	; 0xc94

00011394 <fflush@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #32, 20	; 0x20000
   1139c:	ldr	pc, [ip, #3212]!	; 0xc8c

000113a0 <__gmpz_sub_ui@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #32, 20	; 0x20000
   113a8:	ldr	pc, [ip, #3204]!	; 0xc84

000113ac <__gmpz_clears@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #32, 20	; 0x20000
   113b4:	ldr	pc, [ip, #3196]!	; 0xc7c

000113b8 <wcwidth@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #32, 20	; 0x20000
   113c0:	ldr	pc, [ip, #3188]!	; 0xc74

000113c4 <memmove@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #32, 20	; 0x20000
   113cc:	ldr	pc, [ip, #3180]!	; 0xc6c

000113d0 <__gmpz_set_ui@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #32, 20	; 0x20000
   113d8:	ldr	pc, [ip, #3172]!	; 0xc64

000113dc <free@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #32, 20	; 0x20000
   113e4:	ldr	pc, [ip, #3164]!	; 0xc5c

000113e8 <_exit@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #32, 20	; 0x20000
   113f0:	ldr	pc, [ip, #3156]!	; 0xc54

000113f4 <memcpy@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #32, 20	; 0x20000
   113fc:	ldr	pc, [ip, #3148]!	; 0xc4c

00011400 <__gmpz_sub@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #32, 20	; 0x20000
   11408:	ldr	pc, [ip, #3140]!	; 0xc44

0001140c <mbsinit@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #32, 20	; 0x20000
   11414:	ldr	pc, [ip, #3132]!	; 0xc3c

00011418 <memcmp@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #32, 20	; 0x20000
   11420:	ldr	pc, [ip, #3124]!	; 0xc34

00011424 <fputc_unlocked@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #32, 20	; 0x20000
   1142c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011430 <dcgettext@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #32, 20	; 0x20000
   11438:	ldr	pc, [ip, #3108]!	; 0xc24

0001143c <__gmpz_powm@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #32, 20	; 0x20000
   11444:	ldr	pc, [ip, #3100]!	; 0xc1c

00011448 <strdup@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #32, 20	; 0x20000
   11450:	ldr	pc, [ip, #3092]!	; 0xc14

00011454 <__gmpz_divexact@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #32, 20	; 0x20000
   1145c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011460 <__gmpz_inits@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #32, 20	; 0x20000
   11468:	ldr	pc, [ip, #3076]!	; 0xc04

0001146c <__gmpz_set@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #32, 20	; 0x20000
   11474:	ldr	pc, [ip, #3068]!	; 0xbfc

00011478 <realloc@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #32, 20	; 0x20000
   11480:	ldr	pc, [ip, #3060]!	; 0xbf4

00011484 <__gmpz_mul@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #32, 20	; 0x20000
   1148c:	ldr	pc, [ip, #3052]!	; 0xbec

00011490 <__gmpz_tdiv_q_ui@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #32, 20	; 0x20000
   11498:	ldr	pc, [ip, #3044]!	; 0xbe4

0001149c <textdomain@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #32, 20	; 0x20000
   114a4:	ldr	pc, [ip, #3036]!	; 0xbdc

000114a8 <iswcntrl@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #32, 20	; 0x20000
   114b0:	ldr	pc, [ip, #3028]!	; 0xbd4

000114b4 <__gmpz_out_str@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #32, 20	; 0x20000
   114bc:	ldr	pc, [ip, #3020]!	; 0xbcc

000114c0 <fflush_unlocked@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #32, 20	; 0x20000
   114c8:	ldr	pc, [ip, #3012]!	; 0xbc4

000114cc <iswprint@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #32, 20	; 0x20000
   114d4:	ldr	pc, [ip, #3004]!	; 0xbbc

000114d8 <fwrite@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #32, 20	; 0x20000
   114e0:	ldr	pc, [ip, #2996]!	; 0xbb4

000114e4 <lseek64@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #32, 20	; 0x20000
   114ec:	ldr	pc, [ip, #2988]!	; 0xbac

000114f0 <__gmpz_fdiv_q_2exp@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #32, 20	; 0x20000
   114f8:	ldr	pc, [ip, #2980]!	; 0xba4

000114fc <__ctype_get_mb_cur_max@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #32, 20	; 0x20000
   11504:	ldr	pc, [ip, #2972]!	; 0xb9c

00011508 <__fpending@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #32, 20	; 0x20000
   11510:	ldr	pc, [ip, #2964]!	; 0xb94

00011514 <mbrtowc@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #32, 20	; 0x20000
   1151c:	ldr	pc, [ip, #2956]!	; 0xb8c

00011520 <error@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #32, 20	; 0x20000
   11528:	ldr	pc, [ip, #2948]!	; 0xb84

0001152c <malloc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #32, 20	; 0x20000
   11534:	ldr	pc, [ip, #2940]!	; 0xb7c

00011538 <iconv_open@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #32, 20	; 0x20000
   11540:	ldr	pc, [ip, #2932]!	; 0xb74

00011544 <__libc_start_main@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #32, 20	; 0x20000
   1154c:	ldr	pc, [ip, #2924]!	; 0xb6c

00011550 <__freading@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #32, 20	; 0x20000
   11558:	ldr	pc, [ip, #2916]!	; 0xb64

0001155c <__gmpz_init_set_si@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #32, 20	; 0x20000
   11564:	ldr	pc, [ip, #2908]!	; 0xb5c

00011568 <__gmpz_add_ui@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #32, 20	; 0x20000
   11570:	ldr	pc, [ip, #2900]!	; 0xb54

00011574 <__gmon_start__@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #32, 20	; 0x20000
   1157c:	ldr	pc, [ip, #2892]!	; 0xb4c

00011580 <getopt_long@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #32, 20	; 0x20000
   11588:	ldr	pc, [ip, #2884]!	; 0xb44

0001158c <__ctype_b_loc@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #32, 20	; 0x20000
   11594:	ldr	pc, [ip, #2876]!	; 0xb3c

00011598 <exit@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #32, 20	; 0x20000
   115a0:	ldr	pc, [ip, #2868]!	; 0xb34

000115a4 <iswspace@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #32, 20	; 0x20000
   115ac:	ldr	pc, [ip, #2860]!	; 0xb2c

000115b0 <strlen@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #32, 20	; 0x20000
   115b8:	ldr	pc, [ip, #2852]!	; 0xb24

000115bc <strchr@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #32, 20	; 0x20000
   115c4:	ldr	pc, [ip, #2844]!	; 0xb1c

000115c8 <__gmpz_divisible_ui_p@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #32, 20	; 0x20000
   115d0:	ldr	pc, [ip, #2836]!	; 0xb14

000115d4 <__gmpz_clear@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #32, 20	; 0x20000
   115dc:	ldr	pc, [ip, #2828]!	; 0xb0c

000115e0 <__errno_location@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #32, 20	; 0x20000
   115e8:	ldr	pc, [ip, #2820]!	; 0xb04

000115ec <iswalnum@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #32, 20	; 0x20000
   115f4:	ldr	pc, [ip, #2812]!	; 0xafc

000115f8 <__sprintf_chk@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #32, 20	; 0x20000
   11600:	ldr	pc, [ip, #2804]!	; 0xaf4

00011604 <__cxa_atexit@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #32, 20	; 0x20000
   1160c:	ldr	pc, [ip, #2796]!	; 0xaec

00011610 <memset@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #32, 20	; 0x20000
   11618:	ldr	pc, [ip, #2788]!	; 0xae4

0001161c <__gmpz_tdiv_q_2exp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #32, 20	; 0x20000
   11624:	ldr	pc, [ip, #2780]!	; 0xadc

00011628 <__printf_chk@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #32, 20	; 0x20000
   11630:	ldr	pc, [ip, #2772]!	; 0xad4

00011634 <write@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #32, 20	; 0x20000
   1163c:	ldr	pc, [ip, #2764]!	; 0xacc

00011640 <fileno@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #32, 20	; 0x20000
   11648:	ldr	pc, [ip, #2756]!	; 0xac4

0001164c <__fprintf_chk@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #32, 20	; 0x20000
   11654:	ldr	pc, [ip, #2748]!	; 0xabc

00011658 <memchr@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #32, 20	; 0x20000
   11660:	ldr	pc, [ip, #2740]!	; 0xab4

00011664 <fclose@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #32, 20	; 0x20000
   1166c:	ldr	pc, [ip, #2732]!	; 0xaac

00011670 <strnlen@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #32, 20	; 0x20000
   11678:	ldr	pc, [ip, #2724]!	; 0xaa4

0001167c <fseeko64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #32, 20	; 0x20000
   11684:	ldr	pc, [ip, #2716]!	; 0xa9c

00011688 <__gmpz_mod@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #32, 20	; 0x20000
   11690:	ldr	pc, [ip, #2708]!	; 0xa94

00011694 <__gmpz_init_set_ui@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #32, 20	; 0x20000
   1169c:	ldr	pc, [ip, #2700]!	; 0xa8c

000116a0 <__gmpz_cmp@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #32, 20	; 0x20000
   116a8:	ldr	pc, [ip, #2692]!	; 0xa84

000116ac <__uflow@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #32, 20	; 0x20000
   116b4:	ldr	pc, [ip, #2684]!	; 0xa7c

000116b8 <__overflow@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #32, 20	; 0x20000
   116c0:	ldr	pc, [ip, #2676]!	; 0xa74

000116c4 <setlocale@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #32, 20	; 0x20000
   116cc:	ldr	pc, [ip, #2668]!	; 0xa6c

000116d0 <strrchr@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #32, 20	; 0x20000
   116d8:	ldr	pc, [ip, #2660]!	; 0xa64

000116dc <nl_langinfo@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #32, 20	; 0x20000
   116e4:	ldr	pc, [ip, #2652]!	; 0xa5c

000116e8 <__gmpz_gcd@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #32, 20	; 0x20000
   116f0:	ldr	pc, [ip, #2644]!	; 0xa54

000116f4 <__gmpz_init_set_str@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #32, 20	; 0x20000
   116fc:	ldr	pc, [ip, #2636]!	; 0xa4c

00011700 <bindtextdomain@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #32, 20	; 0x20000
   11708:	ldr	pc, [ip, #2628]!	; 0xa44

0001170c <__gmpz_cmp_ui@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #32, 20	; 0x20000
   11714:	ldr	pc, [ip, #2620]!	; 0xa3c

00011718 <__gmpz_init@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #32, 20	; 0x20000
   11720:	ldr	pc, [ip, #2612]!	; 0xa34

00011724 <__gmpz_powm_ui@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #32, 20	; 0x20000
   1172c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011730 <isatty@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #32, 20	; 0x20000
   11738:	ldr	pc, [ip, #2596]!	; 0xa24

0001173c <strncmp@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #32, 20	; 0x20000
   11744:	ldr	pc, [ip, #2588]!	; 0xa1c

00011748 <abort@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #32, 20	; 0x20000
   11750:	ldr	pc, [ip, #2580]!	; 0xa14

00011754 <__assert_fail@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #32, 20	; 0x20000
   1175c:	ldr	pc, [ip, #2572]!	; 0xa0c

Disassembly of section .text:

00011760 <.text>:
   11760:	mov	fp, #0
   11764:	mov	lr, #0
   11768:	pop	{r1}		; (ldr r1, [sp], #4)
   1176c:	mov	r2, sp
   11770:	push	{r2}		; (str r2, [sp, #-4]!)
   11774:	push	{r0}		; (str r0, [sp, #-4]!)
   11778:	ldr	ip, [pc, #16]	; 11790 <__assert_fail@plt+0x3c>
   1177c:	push	{ip}		; (str ip, [sp, #-4]!)
   11780:	ldr	r0, [pc, #12]	; 11794 <__assert_fail@plt+0x40>
   11784:	ldr	r3, [pc, #12]	; 11798 <__assert_fail@plt+0x44>
   11788:	bl	11544 <__libc_start_main@plt>
   1178c:	bl	11748 <abort@plt>
   11790:	andeq	lr, r1, ip, asr #32
   11794:	andeq	r7, r1, r0, asr #11
   11798:	andeq	sp, r1, ip, ror #31
   1179c:	ldr	r3, [pc, #20]	; 117b8 <__assert_fail@plt+0x64>
   117a0:	ldr	r2, [pc, #20]	; 117bc <__assert_fail@plt+0x68>
   117a4:	add	r3, pc, r3
   117a8:	ldr	r2, [r3, r2]
   117ac:	cmp	r2, #0
   117b0:	bxeq	lr
   117b4:	b	11574 <__gmon_start__@plt>
   117b8:	andeq	r0, r2, r4, asr r8
   117bc:	andeq	r0, r0, ip, ror #2
   117c0:	ldr	r3, [pc, #28]	; 117e4 <__assert_fail@plt+0x90>
   117c4:	ldr	r0, [pc, #28]	; 117e8 <__assert_fail@plt+0x94>
   117c8:	sub	r3, r3, r0
   117cc:	cmp	r3, #6
   117d0:	bxls	lr
   117d4:	ldr	r3, [pc, #16]	; 117ec <__assert_fail@plt+0x98>
   117d8:	cmp	r3, #0
   117dc:	bxeq	lr
   117e0:	bx	r3
   117e4:	andeq	r2, r3, r7, asr #3
   117e8:	andeq	r2, r3, r4, asr #3
   117ec:	andeq	r0, r0, r0
   117f0:	ldr	r1, [pc, #36]	; 1181c <__assert_fail@plt+0xc8>
   117f4:	ldr	r0, [pc, #36]	; 11820 <__assert_fail@plt+0xcc>
   117f8:	sub	r1, r1, r0
   117fc:	asr	r1, r1, #2
   11800:	add	r1, r1, r1, lsr #31
   11804:	asrs	r1, r1, #1
   11808:	bxeq	lr
   1180c:	ldr	r3, [pc, #16]	; 11824 <__assert_fail@plt+0xd0>
   11810:	cmp	r3, #0
   11814:	bxeq	lr
   11818:	bx	r3
   1181c:	andeq	r2, r3, r4, asr #3
   11820:	andeq	r2, r3, r4, asr #3
   11824:	andeq	r0, r0, r0
   11828:	push	{r4, lr}
   1182c:	ldr	r4, [pc, #24]	; 1184c <__assert_fail@plt+0xf8>
   11830:	ldrb	r3, [r4]
   11834:	cmp	r3, #0
   11838:	popne	{r4, pc}
   1183c:	bl	117c0 <__assert_fail@plt+0x6c>
   11840:	mov	r3, #1
   11844:	strb	r3, [r4]
   11848:	pop	{r4, pc}
   1184c:	andeq	r2, r3, r8, ror #3
   11850:	ldr	r0, [pc, #40]	; 11880 <__assert_fail@plt+0x12c>
   11854:	ldr	r3, [r0]
   11858:	cmp	r3, #0
   1185c:	bne	11864 <__assert_fail@plt+0x110>
   11860:	b	117f0 <__assert_fail@plt+0x9c>
   11864:	ldr	r3, [pc, #24]	; 11884 <__assert_fail@plt+0x130>
   11868:	cmp	r3, #0
   1186c:	beq	11860 <__assert_fail@plt+0x10c>
   11870:	push	{r4, lr}
   11874:	blx	r3
   11878:	pop	{r4, lr}
   1187c:	b	117f0 <__assert_fail@plt+0x9c>
   11880:	andeq	r1, r3, ip, lsl #30
   11884:	andeq	r0, r0, r0
   11888:	push	{r4, r5, r6, r7, lr}
   1188c:	and	r4, r2, #1
   11890:	mov	r5, #0
   11894:	orrs	ip, r4, r5
   11898:	bne	118b4 <__assert_fail@plt+0x160>
   1189c:	mov	lr, r0
   118a0:	mov	ip, r1
   118a4:	mov	r0, r2
   118a8:	mov	r1, r3
   118ac:	mov	r2, lr
   118b0:	mov	r3, ip
   118b4:	orrs	ip, r0, r1
   118b8:	beq	1192c <__assert_fail@plt+0x1d8>
   118bc:	lsrs	r3, r3, #1
   118c0:	rrx	r2, r2
   118c4:	b	118d0 <__assert_fail@plt+0x17c>
   118c8:	lsrs	r1, r1, #1
   118cc:	rrx	r0, r0
   118d0:	and	r4, r0, #1
   118d4:	mov	r5, #0
   118d8:	orrs	ip, r4, r5
   118dc:	beq	118c8 <__assert_fail@plt+0x174>
   118e0:	lsrs	r5, r1, #1
   118e4:	rrx	r4, r0
   118e8:	subs	r4, r4, r2
   118ec:	sbc	r5, r5, r3
   118f0:	orrs	ip, r4, r5
   118f4:	beq	11924 <__assert_fail@plt+0x1d0>
   118f8:	asr	r6, r5, #31
   118fc:	mov	r7, r6
   11900:	and	r0, r4, r6
   11904:	and	r1, r5, r6
   11908:	adds	r2, r2, r0
   1190c:	adc	r3, r3, r1
   11910:	eor	r4, r4, r6
   11914:	eor	r5, r5, r6
   11918:	subs	r0, r4, r6
   1191c:	sbc	r1, r5, r6
   11920:	b	118d0 <__assert_fail@plt+0x17c>
   11924:	orr	r0, r0, #1
   11928:	pop	{r4, r5, r6, r7, pc}
   1192c:	mov	r0, r2
   11930:	mov	r1, r3
   11934:	pop	{r4, r5, r6, r7, pc}
   11938:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1193c:	ldr	r9, [sp, #32]
   11940:	ldrb	r1, [r0, #250]	; 0xfa
   11944:	add	ip, r0, #16
   11948:	add	lr, r0, #224	; 0xe0
   1194c:	sub	r7, r1, #1
   11950:	cmp	r7, #0
   11954:	blt	119f8 <__assert_fail@plt+0x2a4>
   11958:	mov	r6, r7
   1195c:	lsl	r4, r7, #3
   11960:	ldrd	r4, [r4, ip]
   11964:	cmp	r3, r5
   11968:	cmpeq	r2, r4
   1196c:	bcs	11a00 <__assert_fail@plt+0x2ac>
   11970:	sub	r7, r1, #-536870911	; 0xe0000001
   11974:	add	r7, ip, r7, lsl #3
   11978:	mov	r8, r6
   1197c:	subs	r8, r8, #1
   11980:	bmi	119ac <__assert_fail@plt+0x258>
   11984:	ldrd	r4, [r7, #-8]!
   11988:	cmp	r5, r3
   1198c:	cmpeq	r4, r2
   11990:	bhi	1197c <__assert_fail@plt+0x228>
   11994:	mov	r7, r8
   11998:	lsl	r4, r8, #3
   1199c:	ldrd	r4, [r4, ip]
   119a0:	cmp	r3, r5
   119a4:	cmpeq	r2, r4
   119a8:	beq	11a18 <__assert_fail@plt+0x2c4>
   119ac:	cmp	r6, r8
   119b0:	ble	119dc <__assert_fail@plt+0x288>
   119b4:	add	r7, ip, r1, lsl #3
   119b8:	add	r6, lr, r1
   119bc:	mvn	sl, lr
   119c0:	ldrd	r4, [r7, #-8]
   119c4:	strd	r4, [r7], #-8
   119c8:	ldrb	r4, [r6, #-1]
   119cc:	strb	r4, [r6], #-1
   119d0:	add	r4, sl, r6
   119d4:	cmp	r8, r4
   119d8:	blt	119c0 <__assert_fail@plt+0x26c>
   119dc:	add	r8, r8, #1
   119e0:	lsl	r4, r8, #3
   119e4:	strd	r2, [ip, r4]
   119e8:	strb	r9, [lr, r8]
   119ec:	add	r1, r1, #1
   119f0:	strb	r1, [r0, #250]	; 0xfa
   119f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   119f8:	mov	r8, r7
   119fc:	b	119dc <__assert_fail@plt+0x288>
   11a00:	lsl	r4, r7, #3
   11a04:	ldrd	r4, [r4, ip]
   11a08:	cmp	r3, r5
   11a0c:	cmpeq	r2, r4
   11a10:	movne	r8, r7
   11a14:	bne	119dc <__assert_fail@plt+0x288>
   11a18:	ldrb	r3, [lr, r7]
   11a1c:	add	r9, r3, r9
   11a20:	strb	r9, [lr, r7]
   11a24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11a28:	push	{r4, r5, r6, r7, lr}
   11a2c:	sub	sp, sp, #12
   11a30:	mov	r4, r2
   11a34:	mov	r5, r3
   11a38:	ldr	ip, [sp, #36]	; 0x24
   11a3c:	cmp	ip, #0
   11a40:	beq	11a74 <__assert_fail@plt+0x320>
   11a44:	ldr	r2, [pc, #68]	; 11a90 <__assert_fail@plt+0x33c>
   11a48:	ldr	r1, [sp, #32]
   11a4c:	sub	r1, r1, #1
   11a50:	add	r3, r2, r1
   11a54:	add	r1, r1, ip
   11a58:	add	r2, r2, r1
   11a5c:	ldrb	r6, [r3, #1]!
   11a60:	mov	r7, #0
   11a64:	adds	r4, r4, r6
   11a68:	adc	r5, r5, r7
   11a6c:	cmp	r3, r2
   11a70:	bne	11a5c <__assert_fail@plt+0x308>
   11a74:	mov	r3, #1
   11a78:	str	r3, [sp]
   11a7c:	mov	r2, r4
   11a80:	mov	r3, r5
   11a84:	bl	11938 <__assert_fail@plt+0x1e4>
   11a88:	add	sp, sp, #12
   11a8c:	pop	{r4, r5, r6, r7, pc}
   11a90:	andeq	lr, r1, r8, ror r0
   11a94:	push	{r4, lr}
   11a98:	ldr	r3, [pc, #88]	; 11af8 <__assert_fail@plt+0x3a4>
   11a9c:	ldr	r1, [r3]
   11aa0:	ldr	r4, [r3, #4]
   11aa4:	sub	r4, r4, r1
   11aa8:	mov	r2, r4
   11aac:	mov	r0, #1
   11ab0:	bl	17940 <__assert_fail@plt+0x61ec>
   11ab4:	cmp	r4, r0
   11ab8:	bne	11acc <__assert_fail@plt+0x378>
   11abc:	ldr	r3, [pc, #52]	; 11af8 <__assert_fail@plt+0x3a4>
   11ac0:	ldr	r2, [r3]
   11ac4:	str	r2, [r3, #4]
   11ac8:	pop	{r4, pc}
   11acc:	bl	115e0 <__errno_location@plt>
   11ad0:	ldr	r4, [r0]
   11ad4:	mov	r2, #5
   11ad8:	ldr	r1, [pc, #28]	; 11afc <__assert_fail@plt+0x3a8>
   11adc:	mov	r0, #0
   11ae0:	bl	11430 <dcgettext@plt>
   11ae4:	mov	r3, r0
   11ae8:	ldr	r2, [pc, #16]	; 11b00 <__assert_fail@plt+0x3ac>
   11aec:	mov	r1, r4
   11af0:	mov	r0, #1
   11af4:	bl	11520 <error@plt>
   11af8:	andeq	r2, r3, ip, ror #3
   11afc:	andeq	r1, r2, r4, asr r1
   11b00:	andeq	r1, r2, ip, ror r6
   11b04:	push	{r4, r5, r6, lr}
   11b08:	mov	r6, r0
   11b0c:	ldr	r3, [r0, #8]
   11b10:	cmp	r3, #0
   11b14:	beq	11b40 <__assert_fail@plt+0x3ec>
   11b18:	mov	r4, #0
   11b1c:	mov	r5, r4
   11b20:	ldr	r0, [r6]
   11b24:	add	r0, r0, r4
   11b28:	bl	115d4 <__gmpz_clear@plt>
   11b2c:	add	r5, r5, #1
   11b30:	add	r4, r4, #12
   11b34:	ldr	r3, [r6, #8]
   11b38:	cmp	r3, r5
   11b3c:	bhi	11b20 <__assert_fail@plt+0x3cc>
   11b40:	ldr	r0, [r6]
   11b44:	bl	178e8 <__assert_fail@plt+0x6194>
   11b48:	ldr	r0, [r6, #4]
   11b4c:	bl	178e8 <__assert_fail@plt+0x6194>
   11b50:	pop	{r4, r5, r6, pc}
   11b54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b58:	sub	sp, sp, #132	; 0x84
   11b5c:	str	r0, [sp, #108]	; 0x6c
   11b60:	mov	r4, r2
   11b64:	mov	r5, r3
   11b68:	strd	r4, [sp, #40]	; 0x28
   11b6c:	ldrd	r0, [sp, #168]	; 0xa8
   11b70:	ldrd	r2, [sp, #208]	; 0xd0
   11b74:	rsbs	r2, r2, #0
   11b78:	rsc	r3, r3, #0
   11b7c:	strd	r2, [sp, #80]	; 0x50
   11b80:	cmp	r4, #0
   11b84:	sbcs	r3, r5, #0
   11b88:	blt	1238c <__assert_fail@plt+0xc38>
   11b8c:	ldrd	r2, [sp, #176]	; 0xb0
   11b90:	cmp	r2, #0
   11b94:	sbcs	r3, r3, #0
   11b98:	blt	123a0 <__assert_fail@plt+0xc4c>
   11b9c:	ldrd	r2, [sp, #192]	; 0xc0
   11ba0:	cmp	r2, #0
   11ba4:	sbcs	r3, r3, #0
   11ba8:	blt	123b4 <__assert_fail@plt+0xc60>
   11bac:	mov	r2, r0
   11bb0:	mov	r3, #0
   11bb4:	ldrd	r4, [sp, #184]	; 0xb8
   11bb8:	mov	r5, #0
   11bbc:	strd	r4, [sp, #16]
   11bc0:	mul	ip, r0, r5
   11bc4:	mla	ip, r4, r3, ip
   11bc8:	umull	r6, r7, r0, r4
   11bcc:	strd	r6, [sp, #8]
   11bd0:	add	ip, ip, r7
   11bd4:	str	ip, [sp, #12]
   11bd8:	umull	sl, fp, r4, r1
   11bdc:	mla	fp, r1, r5, fp
   11be0:	ldr	ip, [sp, #188]	; 0xbc
   11be4:	umull	r4, r5, r1, ip
   11be8:	mov	r8, r4
   11bec:	mov	r9, r5
   11bf0:	umull	r6, r7, r0, ip
   11bf4:	mla	r7, ip, r3, r7
   11bf8:	adds	r6, r6, sl
   11bfc:	adc	r7, r7, fp
   11c00:	ldr	r4, [sp, #12]
   11c04:	mov	r5, #0
   11c08:	adds	r4, r4, r6
   11c0c:	adc	r5, r5, r7
   11c10:	cmp	fp, r5
   11c14:	cmpeq	sl, r4
   11c18:	bls	11c2c <__assert_fail@plt+0x4d8>
   11c1c:	adds	r6, r8, #0
   11c20:	adc	r7, r9, #1
   11c24:	mov	r8, r6
   11c28:	mov	r9, r7
   11c2c:	str	r5, [sp]
   11c30:	mov	ip, #0
   11c34:	str	ip, [sp, #4]
   11c38:	ldrd	sl, [sp]
   11c3c:	adds	r8, r8, sl
   11c40:	adc	r9, r9, fp
   11c44:	strd	r8, [sp, #56]	; 0x38
   11c48:	mov	r7, r4
   11c4c:	ldr	ip, [sp, #8]
   11c50:	adds	r4, fp, ip
   11c54:	adc	r5, r7, #0
   11c58:	strd	r4, [sp, #48]	; 0x30
   11c5c:	ldrd	r4, [sp, #176]	; 0xb0
   11c60:	mov	r5, #0
   11c64:	mov	sl, r4
   11c68:	mov	fp, r5
   11c6c:	mul	r0, r2, r5
   11c70:	mla	r0, r4, r3, r0
   11c74:	umull	r4, r5, r2, r4
   11c78:	add	r5, r0, r5
   11c7c:	umull	r6, r7, r1, sl
   11c80:	mla	r7, r1, fp, r7
   11c84:	ldr	ip, [sp, #180]	; 0xb4
   11c88:	umull	r0, r1, r1, ip
   11c8c:	mov	r8, r0
   11c90:	mov	r9, r1
   11c94:	strd	r8, [sp, #96]	; 0x60
   11c98:	umull	r0, r1, r2, ip
   11c9c:	mla	r1, ip, r3, r1
   11ca0:	adds	r0, r0, r6
   11ca4:	adc	r1, r1, r7
   11ca8:	ldr	r3, [sp, #4]
   11cac:	adds	r2, r5, r0
   11cb0:	adc	r3, r3, r1
   11cb4:	cmp	r7, r3
   11cb8:	cmpeq	r6, r2
   11cbc:	bls	11ccc <__assert_fail@plt+0x578>
   11cc0:	adds	r0, r8, #0
   11cc4:	adc	r1, r9, #1
   11cc8:	strd	r0, [sp, #96]	; 0x60
   11ccc:	str	r3, [sp]
   11cd0:	mov	r1, #0
   11cd4:	str	r1, [sp, #4]
   11cd8:	mov	r7, r2
   11cdc:	ldrd	r8, [sp]
   11ce0:	adds	r2, r9, r4
   11ce4:	adc	r3, r7, #0
   11ce8:	strd	r2, [sp, #72]	; 0x48
   11cec:	ldrd	r4, [sp, #80]	; 0x50
   11cf0:	ldrd	r0, [sp, #48]	; 0x30
   11cf4:	mul	r3, r4, r1
   11cf8:	mla	r3, r0, r5, r3
   11cfc:	umull	r0, r1, r4, r0
   11d00:	add	r1, r3, r1
   11d04:	mov	ip, r1
   11d08:	mov	lr, r9
   11d0c:	mov	r2, r0
   11d10:	mov	r3, #0
   11d14:	ldrd	r4, [sp, #200]	; 0xc8
   11d18:	mov	r5, #0
   11d1c:	mov	r6, r4
   11d20:	mov	r7, r5
   11d24:	strd	r6, [sp, #64]	; 0x40
   11d28:	umull	r8, r9, r1, r4
   11d2c:	mla	r9, r1, r5, r9
   11d30:	ldr	r4, [sp, #204]	; 0xcc
   11d34:	umull	r0, r1, r1, r4
   11d38:	strd	r0, [sp, #24]
   11d3c:	mov	r1, r4
   11d40:	umull	r4, r5, r4, r2
   11d44:	mla	r5, r1, r3, r5
   11d48:	adds	r4, r4, r8
   11d4c:	adc	r5, r5, r9
   11d50:	mul	r1, r2, r7
   11d54:	mla	r1, r6, r3, r1
   11d58:	umull	r6, r7, r2, r6
   11d5c:	add	r7, r1, r7
   11d60:	ldr	r1, [sp, #4]
   11d64:	adds	r0, r7, r4
   11d68:	adc	r1, r1, r5
   11d6c:	cmp	r9, r1
   11d70:	cmpeq	r8, r0
   11d74:	bls	11d88 <__assert_fail@plt+0x634>
   11d78:	ldrd	r4, [sp, #24]
   11d7c:	adds	r4, r4, #0
   11d80:	adc	r5, r5, #1
   11d84:	strd	r4, [sp, #24]
   11d88:	mov	r8, r1
   11d8c:	mov	r9, #0
   11d90:	ldrd	r0, [sp, #192]	; 0xc0
   11d94:	mov	r1, #0
   11d98:	mov	r6, r0
   11d9c:	mov	r7, r1
   11da0:	strd	r6, [sp, #120]	; 0x78
   11da4:	mul	r4, r2, r1
   11da8:	mla	r4, r0, r3, r4
   11dac:	umull	r0, r1, r2, r0
   11db0:	add	r1, r4, r1
   11db4:	mov	r4, r6
   11db8:	mul	r6, ip, r7
   11dbc:	mla	r6, lr, r4, r6
   11dc0:	umull	r4, r5, ip, r4
   11dc4:	add	r5, r6, r5
   11dc8:	ldr	r6, [sp, #196]	; 0xc4
   11dcc:	umull	r6, r7, ip, r6
   11dd0:	strd	r6, [sp, #32]
   11dd4:	ldr	ip, [sp, #196]	; 0xc4
   11dd8:	mla	ip, lr, ip, r7
   11ddc:	str	ip, [sp, #36]	; 0x24
   11de0:	ldr	ip, [sp, #196]	; 0xc4
   11de4:	umull	r6, r7, ip, r2
   11de8:	mla	r7, ip, r3, r7
   11dec:	adds	r2, r6, r4
   11df0:	adc	r3, r7, r5
   11df4:	adds	r2, r2, r1
   11df8:	adc	r3, r3, r9
   11dfc:	cmp	r5, r3
   11e00:	cmpeq	r4, r2
   11e04:	bls	11e18 <__assert_fail@plt+0x6c4>
   11e08:	ldrd	r4, [sp, #32]
   11e0c:	adds	r4, r4, #0
   11e10:	adc	r5, r5, #1
   11e14:	strd	r4, [sp, #32]
   11e18:	str	r3, [sp, #8]
   11e1c:	mov	ip, #0
   11e20:	str	ip, [sp, #12]
   11e24:	ldrd	r4, [sp, #48]	; 0x30
   11e28:	mov	ip, r4
   11e2c:	orrs	ip, ip, r5
   11e30:	movne	r3, #1
   11e34:	moveq	r3, #0
   11e38:	ldrd	r6, [sp, #72]	; 0x48
   11e3c:	adds	r6, r6, r3
   11e40:	adc	r7, r7, #0
   11e44:	adds	r4, r8, r6
   11e48:	adc	r5, r9, r7
   11e4c:	ldrd	r8, [sp, #24]
   11e50:	adds	r8, r8, r4
   11e54:	adc	r9, r9, r5
   11e58:	mov	r4, r8
   11e5c:	mov	r5, r9
   11e60:	cmp	r7, r9
   11e64:	cmpeq	r6, r8
   11e68:	movhi	ip, #1
   11e6c:	movls	ip, #0
   11e70:	str	ip, [sp, #48]	; 0x30
   11e74:	ldrd	r8, [sp, #8]
   11e78:	mov	ip, r9
   11e7c:	str	r9, [sp, #52]	; 0x34
   11e80:	ldrd	r6, [sp, #56]	; 0x38
   11e84:	adds	r6, r6, r4
   11e88:	adc	r7, r7, r5
   11e8c:	cmp	r5, r7
   11e90:	cmpeq	r4, r6
   11e94:	movhi	ip, #1
   11e98:	movls	ip, #0
   11e9c:	str	ip, [sp, #56]	; 0x38
   11ea0:	str	r9, [sp, #60]	; 0x3c
   11ea4:	adds	r4, r9, r0
   11ea8:	adc	r5, r2, #0
   11eac:	adds	r0, r4, r6
   11eb0:	adc	r1, r5, r7
   11eb4:	strd	r0, [sp, #112]	; 0x70
   11eb8:	cmp	r7, r1
   11ebc:	cmpeq	r6, r0
   11ec0:	movhi	r1, #1
   11ec4:	movls	r1, #0
   11ec8:	str	r1, [sp, #72]	; 0x48
   11ecc:	str	r9, [sp, #76]	; 0x4c
   11ed0:	mov	ip, r9
   11ed4:	ldrd	r4, [sp, #40]	; 0x28
   11ed8:	mov	r2, r4
   11edc:	mov	r3, #0
   11ee0:	ldrd	r8, [sp, #16]
   11ee4:	mul	r1, r8, r3
   11ee8:	mla	r1, r4, r9, r1
   11eec:	umull	r6, r7, r8, r4
   11ef0:	add	r7, r1, r7
   11ef4:	umull	r8, r9, r8, r5
   11ef8:	ldr	lr, [sp, #20]
   11efc:	mla	r9, r5, lr, r9
   11f00:	ldr	lr, [sp, #188]	; 0xbc
   11f04:	umull	r0, r1, lr, r5
   11f08:	strd	r0, [sp, #88]	; 0x58
   11f0c:	umull	r4, r5, lr, r2
   11f10:	mla	r5, lr, r3, r5
   11f14:	adds	r4, r4, r8
   11f18:	adc	r5, r5, r9
   11f1c:	ldr	r1, [sp, #12]
   11f20:	adds	r0, r7, r4
   11f24:	adc	r1, r1, r5
   11f28:	cmp	r9, r1
   11f2c:	cmpeq	r8, r0
   11f30:	bls	11f44 <__assert_fail@plt+0x7f0>
   11f34:	ldrd	r4, [sp, #88]	; 0x58
   11f38:	adds	r4, r4, #0
   11f3c:	adc	r5, r5, #1
   11f40:	strd	r4, [sp, #88]	; 0x58
   11f44:	str	r1, [sp, #24]
   11f48:	mov	lr, #0
   11f4c:	str	lr, [sp, #28]
   11f50:	adds	r8, lr, r6
   11f54:	adc	r9, r0, #0
   11f58:	mul	lr, sl, r3
   11f5c:	mla	lr, r2, fp, lr
   11f60:	umull	r0, r1, sl, r2
   11f64:	add	r1, lr, r1
   11f68:	mul	lr, sl, ip
   11f6c:	ldrd	r4, [sp, #40]	; 0x28
   11f70:	mla	lr, r5, fp, lr
   11f74:	umull	sl, fp, sl, r5
   11f78:	add	fp, lr, fp
   11f7c:	ldr	lr, [sp, #180]	; 0xb4
   11f80:	mul	ip, ip, lr
   11f84:	mov	r6, #0
   11f88:	mla	ip, r6, r5, ip
   11f8c:	ldr	lr, [sp, #180]	; 0xb4
   11f90:	umull	r4, r5, lr, r5
   11f94:	strd	r4, [sp, #40]	; 0x28
   11f98:	add	ip, ip, r5
   11f9c:	str	ip, [sp, #44]	; 0x2c
   11fa0:	ldr	ip, [sp, #180]	; 0xb4
   11fa4:	mul	ip, ip, r3
   11fa8:	mla	ip, r6, r2, ip
   11fac:	ldr	lr, [sp, #180]	; 0xb4
   11fb0:	umull	r2, r3, lr, r2
   11fb4:	add	r3, ip, r3
   11fb8:	adds	r2, r2, sl
   11fbc:	adc	r3, r3, fp
   11fc0:	adds	r2, r2, r1
   11fc4:	adc	r3, r3, r6
   11fc8:	cmp	fp, r3
   11fcc:	cmpeq	sl, r2
   11fd0:	bls	11fe4 <__assert_fail@plt+0x890>
   11fd4:	ldrd	r4, [sp, #40]	; 0x28
   11fd8:	adds	r4, r4, #0
   11fdc:	adc	r5, r5, #1
   11fe0:	strd	r4, [sp, #40]	; 0x28
   11fe4:	str	r3, [sp, #16]
   11fe8:	mov	ip, #0
   11fec:	str	ip, [sp, #20]
   11ff0:	ldrd	r6, [sp, #16]
   11ff4:	adds	r4, r7, r0
   11ff8:	adc	r5, r2, #0
   11ffc:	ldrd	sl, [sp, #112]	; 0x70
   12000:	adds	sl, sl, r8
   12004:	adc	fp, fp, r9
   12008:	cmp	r9, fp
   1200c:	cmpeq	r8, sl
   12010:	movhi	r1, #1
   12014:	movls	r1, ip
   12018:	ldrd	r2, [sp, #24]
   1201c:	adds	r2, r2, r1
   12020:	adc	r3, r3, #0
   12024:	ldrd	r0, [sp, #88]	; 0x58
   12028:	adds	r0, r0, r2
   1202c:	adc	r1, r1, r3
   12030:	strd	r0, [sp, #88]	; 0x58
   12034:	ldrd	r0, [sp, #80]	; 0x50
   12038:	mul	r3, r0, fp
   1203c:	mla	r3, sl, r1, r3
   12040:	umull	r0, r1, r0, sl
   12044:	add	r1, r3, r1
   12048:	ldrd	r2, [sp]
   1204c:	adds	r2, r2, r4
   12050:	adc	r3, r3, r5
   12054:	ldrd	r8, [sp, #8]
   12058:	adds	r8, r8, r2
   1205c:	adc	r9, r9, r3
   12060:	mov	r2, r8
   12064:	mov	r3, r9
   12068:	ldrd	r8, [sp, #96]	; 0x60
   1206c:	adds	r8, r8, r2
   12070:	adc	r9, r9, r3
   12074:	mov	r2, r8
   12078:	mov	r3, r9
   1207c:	ldrd	r8, [sp, #48]	; 0x30
   12080:	adds	r8, r8, r2
   12084:	adc	r9, r9, r3
   12088:	mov	r2, r8
   1208c:	mov	r3, r9
   12090:	ldrd	r8, [sp, #56]	; 0x38
   12094:	adds	r8, r8, r2
   12098:	adc	r9, r9, r3
   1209c:	mov	r2, r8
   120a0:	mov	r3, r9
   120a4:	ldrd	r8, [sp, #72]	; 0x48
   120a8:	adds	r8, r8, r2
   120ac:	adc	r9, r9, r3
   120b0:	mov	r2, r8
   120b4:	mov	r3, r9
   120b8:	ldrd	r8, [sp, #32]
   120bc:	adds	r8, r8, r2
   120c0:	adc	r9, r9, r3
   120c4:	strd	r8, [sp, #32]
   120c8:	cmp	r5, r9
   120cc:	cmpeq	r4, r8
   120d0:	movhi	r3, #1
   120d4:	movls	r3, ip
   120d8:	str	r3, [sp, #24]
   120dc:	mov	ip, r7
   120e0:	str	r7, [sp, #28]
   120e4:	mov	r8, r1
   120e8:	mov	r2, r0
   120ec:	mov	r3, #0
   120f0:	ldrd	r4, [sp, #64]	; 0x40
   120f4:	umull	r6, r7, r4, r1
   120f8:	mla	r7, r1, r5, r7
   120fc:	ldr	lr, [sp, #204]	; 0xcc
   12100:	umull	r4, r5, lr, r1
   12104:	strd	r4, [sp, #8]
   12108:	mov	lr, #0
   1210c:	mla	r1, lr, r1, r5
   12110:	str	r1, [sp, #12]
   12114:	ldr	r1, [sp, #204]	; 0xcc
   12118:	mul	r1, r1, r3
   1211c:	mla	r1, lr, r2, r1
   12120:	ldr	r0, [sp, #204]	; 0xcc
   12124:	umull	r4, r5, r0, r2
   12128:	add	r5, r1, r5
   1212c:	adds	r0, r4, r6
   12130:	adc	r1, r5, r7
   12134:	strd	r0, [sp]
   12138:	ldrd	r4, [sp, #64]	; 0x40
   1213c:	mul	r1, r4, r3
   12140:	mla	r1, r2, r5, r1
   12144:	mov	lr, r4
   12148:	umull	r4, r5, lr, r2
   1214c:	add	r5, r1, r5
   12150:	mov	r0, r5
   12154:	ldr	r1, [sp, #20]
   12158:	ldrd	r4, [sp]
   1215c:	adds	r4, r4, r0
   12160:	adc	r5, r5, r1
   12164:	mov	r1, r5
   12168:	cmp	r7, r5
   1216c:	cmpeq	r6, r4
   12170:	bls	12184 <__assert_fail@plt+0xa30>
   12174:	ldrd	r4, [sp, #8]
   12178:	adds	r4, r4, #0
   1217c:	adc	r5, r5, #1
   12180:	strd	r4, [sp, #8]
   12184:	str	r1, [sp]
   12188:	mov	r1, #0
   1218c:	str	r1, [sp, #4]
   12190:	ldrd	r4, [sp, #120]	; 0x78
   12194:	mul	r1, r4, r3
   12198:	mla	r1, r2, r5, r1
   1219c:	umull	r6, r7, r4, r2
   121a0:	add	r7, r1, r7
   121a4:	mul	lr, r4, ip
   121a8:	mov	r0, r4
   121ac:	mla	lr, r8, r5, lr
   121b0:	umull	r0, r1, r0, r8
   121b4:	add	r1, lr, r1
   121b8:	ldr	lr, [sp, #196]	; 0xc4
   121bc:	mul	ip, ip, lr
   121c0:	mov	lr, #0
   121c4:	mla	ip, r8, lr, ip
   121c8:	ldr	lr, [sp, #196]	; 0xc4
   121cc:	umull	r8, r9, lr, r8
   121d0:	add	r9, ip, r9
   121d4:	mul	r3, lr, r3
   121d8:	mov	ip, #0
   121dc:	mla	ip, ip, r2, r3
   121e0:	umull	r2, r3, lr, r2
   121e4:	add	r3, ip, r3
   121e8:	adds	r2, r2, r0
   121ec:	adc	r3, r3, r1
   121f0:	mov	r5, #0
   121f4:	adds	r4, r7, r2
   121f8:	adc	r5, r5, r3
   121fc:	cmp	r1, r5
   12200:	cmpeq	r0, r4
   12204:	bls	12210 <__assert_fail@plt+0xabc>
   12208:	adds	r8, r8, #0
   1220c:	adc	r9, r9, #1
   12210:	orrs	r3, sl, fp
   12214:	movne	r1, #1
   12218:	moveq	r1, #0
   1221c:	ldrd	r2, [sp, #32]
   12220:	adds	r2, r2, r1
   12224:	adc	r3, r3, #0
   12228:	ldrd	r0, [sp]
   1222c:	adds	r0, r0, r2
   12230:	adc	r1, r1, r3
   12234:	ldrd	sl, [sp, #8]
   12238:	adds	sl, sl, r0
   1223c:	adc	fp, fp, r1
   12240:	mov	r0, sl
   12244:	mov	r1, fp
   12248:	ldrd	sl, [sp, #88]	; 0x58
   1224c:	strd	r0, [sp, #8]
   12250:	adds	sl, sl, r0
   12254:	adc	fp, fp, r1
   12258:	str	r4, [sp, #4]
   1225c:	mov	r1, #0
   12260:	str	r1, [sp]
   12264:	ldrd	r0, [sp]
   12268:	adds	r0, r0, r6
   1226c:	adc	r1, r1, #0
   12270:	adds	r0, r0, sl
   12274:	adc	r1, r1, fp
   12278:	mov	r6, r5
   1227c:	mov	r7, #0
   12280:	ldrd	r4, [sp, #16]
   12284:	adds	r4, r4, r6
   12288:	adc	r5, r5, r7
   1228c:	ldrd	r6, [sp, #24]
   12290:	adds	r6, r6, r4
   12294:	adc	r7, r7, r5
   12298:	mov	r4, r6
   1229c:	mov	r5, r7
   122a0:	ldrd	r6, [sp, #40]	; 0x28
   122a4:	adds	r6, r6, r4
   122a8:	adc	r7, r7, r5
   122ac:	mov	r4, r6
   122b0:	mov	r5, r7
   122b4:	ldrd	r6, [sp, #8]
   122b8:	cmp	r3, r7
   122bc:	cmpeq	r2, r6
   122c0:	movhi	r3, #1
   122c4:	movls	r3, #0
   122c8:	adds	r4, r4, r3
   122cc:	adc	r5, r5, #0
   122d0:	cmp	r7, fp
   122d4:	cmpeq	r6, sl
   122d8:	movhi	r3, #1
   122dc:	movls	r3, #0
   122e0:	adds	r4, r4, r3
   122e4:	adc	r5, r5, #0
   122e8:	cmp	fp, r1
   122ec:	cmpeq	sl, r0
   122f0:	movhi	r3, #1
   122f4:	movls	r3, #0
   122f8:	adds	r4, r4, r3
   122fc:	adc	r5, r5, #0
   12300:	adds	r8, r8, r4
   12304:	adc	r9, r9, r5
   12308:	ldrd	r2, [sp, #192]	; 0xc0
   1230c:	cmp	r3, r9
   12310:	cmpeq	r2, r8
   12314:	bcc	1233c <__assert_fail@plt+0xbe8>
   12318:	moveq	r3, #1
   1231c:	movne	r3, #0
   12320:	ldrd	r4, [sp, #200]	; 0xc8
   12324:	cmp	r5, r1
   12328:	cmpeq	r4, r0
   1232c:	movhi	r3, #0
   12330:	andls	r3, r3, #1
   12334:	cmp	r3, #0
   12338:	beq	1237c <__assert_fail@plt+0xc28>
   1233c:	ldrd	r2, [sp, #200]	; 0xc8
   12340:	cmp	r3, r1
   12344:	cmpeq	r2, r0
   12348:	movhi	r2, #1
   1234c:	movls	r2, #0
   12350:	mov	r3, #0
   12354:	ldrd	r4, [sp, #200]	; 0xc8
   12358:	subs	r4, r0, r4
   1235c:	sbc	r5, r1, r5
   12360:	mov	r0, r4
   12364:	mov	r1, r5
   12368:	ldrd	r4, [sp, #192]	; 0xc0
   1236c:	subs	r4, r8, r4
   12370:	sbc	r5, r9, r5
   12374:	subs	r8, r4, r2
   12378:	sbc	r9, r5, r3
   1237c:	ldr	r3, [sp, #108]	; 0x6c
   12380:	strd	r8, [r3]
   12384:	add	sp, sp, #132	; 0x84
   12388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1238c:	ldr	r3, [pc, #52]	; 123c8 <__assert_fail@plt+0xc74>
   12390:	ldr	r2, [pc, #52]	; 123cc <__assert_fail@plt+0xc78>
   12394:	ldr	r1, [pc, #52]	; 123d0 <__assert_fail@plt+0xc7c>
   12398:	ldr	r0, [pc, #52]	; 123d4 <__assert_fail@plt+0xc80>
   1239c:	bl	11754 <__assert_fail@plt>
   123a0:	ldr	r3, [pc, #32]	; 123c8 <__assert_fail@plt+0xc74>
   123a4:	ldr	r2, [pc, #44]	; 123d8 <__assert_fail@plt+0xc84>
   123a8:	ldr	r1, [pc, #32]	; 123d0 <__assert_fail@plt+0xc7c>
   123ac:	ldr	r0, [pc, #40]	; 123dc <__assert_fail@plt+0xc88>
   123b0:	bl	11754 <__assert_fail@plt>
   123b4:	ldr	r3, [pc, #12]	; 123c8 <__assert_fail@plt+0xc74>
   123b8:	ldr	r2, [pc, #32]	; 123e0 <__assert_fail@plt+0xc8c>
   123bc:	ldr	r1, [pc, #12]	; 123d0 <__assert_fail@plt+0xc7c>
   123c0:	ldr	r0, [pc, #28]	; 123e4 <__assert_fail@plt+0xc90>
   123c4:	bl	11754 <__assert_fail@plt>
   123c8:	andeq	lr, r1, ip, lsl r3
   123cc:	andeq	r0, r0, r1, ror #7
   123d0:	andeq	r1, r2, r0, ror #2
   123d4:	andeq	r1, r2, r0, ror r1
   123d8:	andeq	r0, r0, r2, ror #7
   123dc:	muleq	r2, r0, r1
   123e0:	andeq	r0, r0, r3, ror #7
   123e4:			; <UNDEFINED> instruction: 0x000211b0
   123e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123ec:	sub	sp, sp, #92	; 0x5c
   123f0:	mov	sl, r0
   123f4:	mov	r0, r2
   123f8:	str	r2, [sp, #84]	; 0x54
   123fc:	ldr	r2, [sp, #136]	; 0x88
   12400:	ldrd	r4, [r1]
   12404:	ldrd	r6, [r1, #8]
   12408:	ldrd	r8, [r3]
   1240c:	strd	r8, [sp, #48]	; 0x30
   12410:	ldrd	r8, [r3, #8]
   12414:	strd	r8, [sp, #56]	; 0x38
   12418:	ldrd	r8, [r2]
   1241c:	strd	r8, [sp, #72]	; 0x48
   12420:	ldrd	r2, [r2, #8]
   12424:	strd	r2, [sp, #64]	; 0x40
   12428:	ldrd	r8, [r0]
   1242c:	mov	fp, #64	; 0x40
   12430:	mov	r3, sl
   12434:	mov	sl, fp
   12438:	mov	fp, r3
   1243c:	b	12490 <__assert_fail@plt+0xd3c>
   12440:	ldrd	r2, [sp, #128]	; 0x80
   12444:	strd	r2, [sp, #40]	; 0x28
   12448:	ldrd	r2, [sp, #48]	; 0x30
   1244c:	strd	r2, [sp, #32]
   12450:	ldrd	r2, [sp, #56]	; 0x38
   12454:	strd	r2, [sp, #24]
   12458:	strd	r4, [sp, #16]
   1245c:	strd	r6, [sp, #8]
   12460:	strd	r4, [sp]
   12464:	mov	r2, r6
   12468:	mov	r3, r7
   1246c:	mov	r0, fp
   12470:	bl	11b54 <__assert_fail@plt+0x400>
   12474:	mov	r4, r0
   12478:	mov	r5, r1
   1247c:	ldrd	r6, [fp]
   12480:	lsrs	r9, r9, #1
   12484:	rrx	r8, r8
   12488:	subs	sl, sl, #1
   1248c:	beq	124e4 <__assert_fail@plt+0xd90>
   12490:	and	r2, r8, #1
   12494:	mov	r3, #0
   12498:	orrs	r3, r2, r3
   1249c:	beq	12440 <__assert_fail@plt+0xcec>
   124a0:	ldrd	r2, [sp, #128]	; 0x80
   124a4:	strd	r2, [sp, #40]	; 0x28
   124a8:	ldrd	r2, [sp, #48]	; 0x30
   124ac:	strd	r2, [sp, #32]
   124b0:	ldrd	r2, [sp, #56]	; 0x38
   124b4:	strd	r2, [sp, #24]
   124b8:	strd	r4, [sp, #16]
   124bc:	strd	r6, [sp, #8]
   124c0:	ldrd	r2, [sp, #72]	; 0x48
   124c4:	strd	r2, [sp]
   124c8:	ldrd	r2, [sp, #64]	; 0x40
   124cc:	mov	r0, fp
   124d0:	bl	11b54 <__assert_fail@plt+0x400>
   124d4:	strd	r0, [sp, #72]	; 0x48
   124d8:	ldrd	r2, [fp]
   124dc:	strd	r2, [sp, #64]	; 0x40
   124e0:	b	12440 <__assert_fail@plt+0xcec>
   124e4:	mov	sl, fp
   124e8:	ldr	r3, [sp, #84]	; 0x54
   124ec:	ldrd	r8, [r3, #8]
   124f0:	orrs	r3, r8, r9
   124f4:	bne	1255c <__assert_fail@plt+0xe08>
   124f8:	ldrd	r2, [sp, #64]	; 0x40
   124fc:	strd	r2, [sl]
   12500:	ldrd	r0, [sp, #72]	; 0x48
   12504:	add	sp, sp, #92	; 0x5c
   12508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1250c:	ldrd	r2, [sp, #128]	; 0x80
   12510:	strd	r2, [sp, #40]	; 0x28
   12514:	ldrd	r2, [sp, #48]	; 0x30
   12518:	strd	r2, [sp, #32]
   1251c:	ldrd	r2, [sp, #56]	; 0x38
   12520:	strd	r2, [sp, #24]
   12524:	strd	r4, [sp, #16]
   12528:	strd	r6, [sp, #8]
   1252c:	strd	r4, [sp]
   12530:	mov	r2, r6
   12534:	mov	r3, r7
   12538:	mov	r0, sl
   1253c:	bl	11b54 <__assert_fail@plt+0x400>
   12540:	mov	r4, r0
   12544:	mov	r5, r1
   12548:	ldrd	r6, [sl]
   1254c:	lsrs	r9, r9, #1
   12550:	rrx	r8, r8
   12554:	orrs	r3, r8, r9
   12558:	beq	124f8 <__assert_fail@plt+0xda4>
   1255c:	and	r2, r8, #1
   12560:	mov	r3, #0
   12564:	orrs	r3, r2, r3
   12568:	beq	1250c <__assert_fail@plt+0xdb8>
   1256c:	ldrd	r2, [sp, #128]	; 0x80
   12570:	strd	r2, [sp, #40]	; 0x28
   12574:	ldrd	r2, [sp, #48]	; 0x30
   12578:	strd	r2, [sp, #32]
   1257c:	ldrd	r2, [sp, #56]	; 0x38
   12580:	strd	r2, [sp, #24]
   12584:	strd	r4, [sp, #16]
   12588:	strd	r6, [sp, #8]
   1258c:	ldrd	r2, [sp, #72]	; 0x48
   12590:	strd	r2, [sp]
   12594:	ldrd	r2, [sp, #64]	; 0x40
   12598:	mov	r0, sl
   1259c:	bl	11b54 <__assert_fail@plt+0x400>
   125a0:	strd	r0, [sp, #72]	; 0x48
   125a4:	ldrd	r2, [sl]
   125a8:	strd	r2, [sp, #64]	; 0x40
   125ac:	b	1250c <__assert_fail@plt+0xdb8>
   125b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125b4:	sub	sp, sp, #92	; 0x5c
   125b8:	mov	r5, r0
   125bc:	strd	r2, [sp, #56]	; 0x38
   125c0:	ldr	r7, [sp, #136]	; 0x88
   125c4:	ldr	r6, [sp, #140]	; 0x8c
   125c8:	str	r6, [sp, #8]
   125cc:	strd	r2, [sp]
   125d0:	mov	r3, r0
   125d4:	ldr	r2, [sp, #132]	; 0x84
   125d8:	ldr	r1, [sp, #128]	; 0x80
   125dc:	add	r0, sp, #80	; 0x50
   125e0:	bl	123e8 <__assert_fail@plt+0xc94>
   125e4:	mov	r8, r0
   125e8:	mov	r9, r1
   125ec:	ldrd	r2, [sp, #80]	; 0x50
   125f0:	strd	r2, [sp, #72]	; 0x48
   125f4:	ldrd	r0, [r6]
   125f8:	cmp	r9, r1
   125fc:	cmpeq	r8, r0
   12600:	beq	12690 <__assert_fail@plt+0xf3c>
   12604:	ldrd	sl, [r5]
   12608:	subs	sl, sl, r0
   1260c:	sbc	fp, fp, r1
   12610:	strd	sl, [sp, #48]	; 0x30
   12614:	ldrd	sl, [r5, #8]
   12618:	ldrd	r2, [r6, #8]
   1261c:	subs	sl, sl, r2
   12620:	sbc	fp, fp, r3
   12624:	ldrd	r2, [r5]
   12628:	cmp	r1, r3
   1262c:	cmpeq	r0, r2
   12630:	movhi	r1, #1
   12634:	movls	r1, #0
   12638:	subs	sl, sl, r1
   1263c:	sbc	fp, fp, #0
   12640:	strd	sl, [sp, #64]	; 0x40
   12644:	ldrd	r0, [sp, #48]	; 0x30
   12648:	cmp	r9, r1
   1264c:	cmpeq	r8, r0
   12650:	moveq	r0, #1
   12654:	movne	r0, #0
   12658:	ldrd	r2, [sp, #72]	; 0x48
   1265c:	cmp	r3, fp
   12660:	cmpeq	r2, sl
   12664:	movne	r0, #0
   12668:	andeq	r0, r0, #1
   1266c:	cmp	r0, #0
   12670:	bne	12740 <__assert_fail@plt+0xfec>
   12674:	cmp	r7, #1
   12678:	bls	12740 <__assert_fail@plt+0xfec>
   1267c:	mov	r4, #1
   12680:	str	r6, [sp, #140]	; 0x8c
   12684:	mov	r6, r7
   12688:	ldr	r7, [sp, #140]	; 0x8c
   1268c:	b	126b8 <__assert_fail@plt+0xf64>
   12690:	ldrd	r2, [r6, #8]
   12694:	ldrd	sl, [sp, #72]	; 0x48
   12698:	cmp	fp, r3
   1269c:	cmpeq	sl, r2
   126a0:	moveq	r0, #1
   126a4:	bne	12604 <__assert_fail@plt+0xeb0>
   126a8:	b	12740 <__assert_fail@plt+0xfec>
   126ac:	add	r4, r4, #1
   126b0:	cmp	r6, r4
   126b4:	beq	12740 <__assert_fail@plt+0xfec>
   126b8:	ldrd	r0, [sp, #56]	; 0x38
   126bc:	strd	r0, [sp, #40]	; 0x28
   126c0:	ldrd	r0, [r5]
   126c4:	strd	r0, [sp, #32]
   126c8:	ldrd	r0, [r5, #8]
   126cc:	strd	r0, [sp, #24]
   126d0:	strd	r8, [sp, #16]
   126d4:	strd	r2, [sp, #8]
   126d8:	strd	r8, [sp]
   126dc:	add	r0, sp, #80	; 0x50
   126e0:	bl	11b54 <__assert_fail@plt+0x400>
   126e4:	mov	r8, r0
   126e8:	mov	r9, r1
   126ec:	ldrd	r2, [sp, #80]	; 0x50
   126f0:	ldrd	r0, [sp, #48]	; 0x30
   126f4:	cmp	r1, r9
   126f8:	cmpeq	r0, r8
   126fc:	moveq	r0, #1
   12700:	movne	r0, #0
   12704:	ldrd	sl, [sp, #64]	; 0x40
   12708:	cmp	fp, r3
   1270c:	cmpeq	sl, r2
   12710:	movne	r0, #0
   12714:	andeq	r0, r0, #1
   12718:	cmp	r0, #0
   1271c:	bne	12740 <__assert_fail@plt+0xfec>
   12720:	ldrd	sl, [r7]
   12724:	cmp	r9, fp
   12728:	cmpeq	r8, sl
   1272c:	bne	126ac <__assert_fail@plt+0xf58>
   12730:	ldrd	sl, [r7, #8]
   12734:	cmp	r3, fp
   12738:	cmpeq	r2, sl
   1273c:	bne	126ac <__assert_fail@plt+0xf58>
   12740:	add	sp, sp, #92	; 0x5c
   12744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12748:	push	{r4, r5, lr}
   1274c:	sub	sp, sp, #12
   12750:	orrs	r1, r2, r3
   12754:	beq	1278c <__assert_fail@plt+0x1038>
   12758:	ldrd	r4, [r0, #8]
   1275c:	orrs	r1, r4, r5
   12760:	bne	12778 <__assert_fail@plt+0x1024>
   12764:	ldrd	r4, [sp, #24]
   12768:	strd	r4, [r0]
   1276c:	strd	r2, [r0, #8]
   12770:	add	sp, sp, #12
   12774:	pop	{r4, r5, pc}
   12778:	ldr	r3, [pc, #32]	; 127a0 <__assert_fail@plt+0x104c>
   1277c:	ldr	r2, [pc, #32]	; 127a4 <__assert_fail@plt+0x1050>
   12780:	ldr	r1, [pc, #32]	; 127a8 <__assert_fail@plt+0x1054>
   12784:	ldr	r0, [pc, #32]	; 127ac <__assert_fail@plt+0x1058>
   12788:	bl	11754 <__assert_fail@plt>
   1278c:	mov	r3, #1
   12790:	str	r3, [sp]
   12794:	ldrd	r2, [sp, #24]
   12798:	bl	11938 <__assert_fail@plt+0x1e4>
   1279c:	b	12770 <__assert_fail@plt+0x101c>
   127a0:	andeq	lr, r1, r8, lsr #6
   127a4:	andeq	r0, r0, lr, lsr #4
   127a8:	andeq	r1, r2, r0, ror #2
   127ac:	ldrdeq	r1, [r2], -r0
   127b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127b4:	sub	sp, sp, #20
   127b8:	mov	ip, r0
   127bc:	ldrd	r4, [sp, #56]	; 0x38
   127c0:	ldrd	r6, [sp, #64]	; 0x40
   127c4:	ldrd	sl, [sp, #72]	; 0x48
   127c8:	and	r0, sl, #1
   127cc:	mov	r1, #0
   127d0:	orrs	r1, r0, r1
   127d4:	beq	12838 <__assert_fail@plt+0x10e4>
   127d8:	orr	r0, r4, r2
   127dc:	orr	r1, r5, r3
   127e0:	orrs	r1, r0, r1
   127e4:	beq	1284c <__assert_fail@plt+0x10f8>
   127e8:	and	r0, r4, #1
   127ec:	mov	r1, #0
   127f0:	orrs	r1, r0, r1
   127f4:	bne	12830 <__assert_fail@plt+0x10dc>
   127f8:	strd	r6, [sp, #64]	; 0x40
   127fc:	lsrs	r5, r5, #1
   12800:	rrx	r4, r4
   12804:	lsl	r1, r2, #31
   12808:	mov	r0, #0
   1280c:	orr	r4, r4, r0
   12810:	orr	r5, r5, r1
   12814:	lsrs	r3, r3, #1
   12818:	rrx	r2, r2
   1281c:	and	r6, r4, #1
   12820:	mov	r7, #0
   12824:	orrs	lr, r6, r7
   12828:	beq	127fc <__assert_fail@plt+0x10a8>
   1282c:	ldrd	r6, [sp, #64]	; 0x40
   12830:	mov	lr, #0
   12834:	b	128dc <__assert_fail@plt+0x1188>
   12838:	ldr	r3, [pc, #380]	; 129bc <__assert_fail@plt+0x1268>
   1283c:	mov	r2, #476	; 0x1dc
   12840:	ldr	r1, [pc, #376]	; 129c0 <__assert_fail@plt+0x126c>
   12844:	ldr	r0, [pc, #376]	; 129c4 <__assert_fail@plt+0x1270>
   12848:	bl	11754 <__assert_fail@plt>
   1284c:	strd	r6, [ip]
   12850:	mov	r0, sl
   12854:	mov	r1, fp
   12858:	b	1287c <__assert_fail@plt+0x1128>
   1285c:	mov	r2, #0
   12860:	mov	r3, #0
   12864:	strd	r2, [ip]
   12868:	mov	r2, r4
   1286c:	mov	r3, r5
   12870:	mov	r0, sl
   12874:	mov	r1, fp
   12878:	bl	11888 <__assert_fail@plt+0x134>
   1287c:	add	sp, sp, #20
   12880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12884:	cmp	r5, fp
   12888:	cmpeq	r4, sl
   1288c:	movcc	r0, #1
   12890:	movcs	r0, #0
   12894:	subs	r4, r4, sl
   12898:	sbc	r5, r5, fp
   1289c:	subs	r2, r2, r6
   128a0:	sbc	r3, r3, r7
   128a4:	subs	r2, r2, r0
   128a8:	sbc	r3, r3, lr
   128ac:	lsrs	r5, r5, #1
   128b0:	rrx	r4, r4
   128b4:	lsl	r9, r2, #31
   128b8:	mov	r8, #0
   128bc:	orr	r4, r4, r8
   128c0:	orr	r5, r5, r9
   128c4:	lsrs	r3, r3, #1
   128c8:	rrx	r2, r2
   128cc:	and	r0, r4, #1
   128d0:	mov	r1, #0
   128d4:	orrs	r1, r0, r1
   128d8:	beq	128ac <__assert_fail@plt+0x1158>
   128dc:	orr	r0, r2, r6
   128e0:	orr	r1, r3, r7
   128e4:	orrs	r1, r0, r1
   128e8:	beq	1285c <__assert_fail@plt+0x1108>
   128ec:	cmp	r3, r7
   128f0:	cmpeq	r2, r6
   128f4:	bhi	12884 <__assert_fail@plt+0x1130>
   128f8:	moveq	r1, #1
   128fc:	movne	r1, #0
   12900:	cmp	r5, fp
   12904:	cmpeq	r4, sl
   12908:	movhi	r0, #1
   1290c:	movls	r0, #0
   12910:	tst	r1, r0
   12914:	bne	12884 <__assert_fail@plt+0x1130>
   12918:	cmp	r3, r7
   1291c:	cmpeq	r2, r6
   12920:	bcc	1293c <__assert_fail@plt+0x11e8>
   12924:	cmp	r5, fp
   12928:	cmpeq	r4, sl
   1292c:	movcs	r1, #0
   12930:	andcc	r1, r1, #1
   12934:	cmp	r1, #0
   12938:	beq	129ac <__assert_fail@plt+0x1258>
   1293c:	subs	sl, sl, r4
   12940:	sbc	fp, fp, r5
   12944:	subs	r6, r6, r2
   12948:	sbc	r7, r7, r3
   1294c:	strd	r6, [sp]
   12950:	uxtb	r6, r0
   12954:	mov	r7, #0
   12958:	ldrd	r0, [sp]
   1295c:	subs	r0, r0, r6
   12960:	sbc	r1, r1, r7
   12964:	mov	r6, r0
   12968:	mov	r7, r1
   1296c:	strd	r2, [sp]
   12970:	lsrs	fp, fp, #1
   12974:	rrx	sl, sl
   12978:	lsl	r1, r6, #31
   1297c:	mov	r0, #0
   12980:	orr	sl, sl, r0
   12984:	orr	fp, fp, r1
   12988:	lsrs	r7, r7, #1
   1298c:	rrx	r6, r6
   12990:	and	r2, sl, #1
   12994:	mov	r3, #0
   12998:	orrs	r3, r2, r3
   1299c:	beq	12970 <__assert_fail@plt+0x121c>
   129a0:	ldrd	r2, [sp]
   129a4:	strd	r0, [sp, #8]
   129a8:	b	128dc <__assert_fail@plt+0x1188>
   129ac:	strd	r2, [ip]
   129b0:	mov	r0, r4
   129b4:	mov	r1, r5
   129b8:	b	1287c <__assert_fail@plt+0x1128>
   129bc:	andeq	lr, r1, ip, lsr r3
   129c0:	andeq	r1, r2, r0, ror #2
   129c4:	andeq	r1, r2, r8, ror #3
   129c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129cc:	sub	sp, sp, #28
   129d0:	str	r0, [sp, #8]
   129d4:	mov	r6, r2
   129d8:	mov	r7, r3
   129dc:	ldrd	sl, [sp, #64]	; 0x40
   129e0:	ldr	r8, [sp, #80]	; 0x50
   129e4:	ldr	r2, [sp, #84]	; 0x54
   129e8:	ldrd	r0, [sp, #72]	; 0x48
   129ec:	orrs	r3, r0, r1
   129f0:	beq	12b64 <__assert_fail@plt+0x1410>
   129f4:	orrs	r3, r6, r7
   129f8:	beq	12b84 <__assert_fail@plt+0x1430>
   129fc:	ldrd	r0, [sp, #72]	; 0x48
   12a00:	mov	r0, #0
   12a04:	and	r1, r1, #-16777216	; 0xff000000
   12a08:	orrs	r3, r0, r1
   12a0c:	bne	12b78 <__assert_fail@plt+0x1424>
   12a10:	ldrd	r0, [sp, #72]	; 0x48
   12a14:	mov	r3, #0
   12a18:	lsl	ip, r1, #8
   12a1c:	orr	ip, ip, r0, lsr #24
   12a20:	lsl	lr, r0, #8
   12a24:	mov	r0, lr
   12a28:	mov	r1, ip
   12a2c:	add	r3, r3, #8
   12a30:	mov	r4, #0
   12a34:	and	r5, ip, #-16777216	; 0xff000000
   12a38:	orrs	ip, r4, r5
   12a3c:	beq	12a18 <__assert_fail@plt+0x12c4>
   12a40:	cmp	r0, #0
   12a44:	sbcs	ip, r1, #0
   12a48:	blt	12a6c <__assert_fail@plt+0x1318>
   12a4c:	adds	r4, r0, r0
   12a50:	adc	r5, r1, r1
   12a54:	mov	r0, r4
   12a58:	mov	r1, r5
   12a5c:	add	r3, r3, #1
   12a60:	cmp	r4, #0
   12a64:	sbcs	ip, r5, #0
   12a68:	bge	12a4c <__assert_fail@plt+0x12f8>
   12a6c:	mov	ip, r3
   12a70:	mov	r0, #0
   12a74:	and	r1, r7, #-16777216	; 0xff000000
   12a78:	orrs	r3, r0, r1
   12a7c:	bne	12ba0 <__assert_fail@plt+0x144c>
   12a80:	mov	r0, r6
   12a84:	mov	r1, r7
   12a88:	mov	r3, #0
   12a8c:	lsl	lr, r1, #8
   12a90:	orr	lr, lr, r0, lsr #24
   12a94:	lsl	r4, r0, #8
   12a98:	mov	r0, r4
   12a9c:	mov	r1, lr
   12aa0:	add	r3, r3, #8
   12aa4:	mov	r4, #0
   12aa8:	and	r5, lr, #-16777216	; 0xff000000
   12aac:	orrs	lr, r4, r5
   12ab0:	beq	12a8c <__assert_fail@plt+0x1338>
   12ab4:	cmp	r0, #0
   12ab8:	sbcs	lr, r1, #0
   12abc:	blt	12ae0 <__assert_fail@plt+0x138c>
   12ac0:	adds	r4, r0, r0
   12ac4:	adc	r5, r1, r1
   12ac8:	mov	r0, r4
   12acc:	mov	r1, r5
   12ad0:	add	r3, r3, #1
   12ad4:	cmp	r4, #0
   12ad8:	sbcs	lr, r5, #0
   12adc:	bge	12ac0 <__assert_fail@plt+0x136c>
   12ae0:	sub	r3, ip, r3
   12ae4:	sub	lr, r3, #32
   12ae8:	rsb	ip, r3, #32
   12aec:	ldr	r4, [sp, #76]	; 0x4c
   12af0:	lsl	r1, r4, r3
   12af4:	ldr	r4, [sp, #72]	; 0x48
   12af8:	orr	r1, r1, r4, lsl lr
   12afc:	str	ip, [sp]
   12b00:	orr	r1, r1, r4, lsr ip
   12b04:	lsl	r0, r4, r3
   12b08:	rsb	r9, r3, #64	; 0x40
   12b0c:	rsb	r4, r9, #32
   12b10:	mov	ip, r4
   12b14:	sub	r4, r9, #32
   12b18:	str	r4, [sp, #12]
   12b1c:	lsr	r4, r8, r9
   12b20:	orr	r4, r4, r2, lsl ip
   12b24:	ldr	ip, [sp, #12]
   12b28:	orr	r4, r4, r2, lsr ip
   12b2c:	lsr	r5, r2, r9
   12b30:	orr	r4, r4, r0
   12b34:	orr	r5, r5, r1
   12b38:	lsl	r1, r2, r3
   12b3c:	orr	r1, r1, r8, lsl lr
   12b40:	ldr	r2, [sp]
   12b44:	orr	r1, r1, r8, lsr r2
   12b48:	lsl	r0, r8, r3
   12b4c:	cmp	r3, #0
   12b50:	ble	12c58 <__assert_fail@plt+0x1504>
   12b54:	mov	r2, #0
   12b58:	mov	ip, r2
   12b5c:	strd	sl, [sp, #64]	; 0x40
   12b60:	b	12c20 <__assert_fail@plt+0x14cc>
   12b64:	ldr	r3, [pc, #260]	; 12c70 <__assert_fail@plt+0x151c>
   12b68:	ldr	r2, [pc, #260]	; 12c74 <__assert_fail@plt+0x1520>
   12b6c:	ldr	r1, [pc, #260]	; 12c78 <__assert_fail@plt+0x1524>
   12b70:	ldr	r0, [pc, #260]	; 12c7c <__assert_fail@plt+0x1528>
   12b74:	bl	11754 <__assert_fail@plt>
   12b78:	ldrd	r0, [sp, #72]	; 0x48
   12b7c:	mov	r3, #0
   12b80:	b	12a40 <__assert_fail@plt+0x12ec>
   12b84:	mov	r2, #0
   12b88:	mov	r3, #0
   12b8c:	ldr	r1, [sp, #8]
   12b90:	strd	r2, [r1]
   12b94:	mov	r0, sl
   12b98:	mov	r1, fp
   12b9c:	b	12c68 <__assert_fail@plt+0x1514>
   12ba0:	mov	r0, r6
   12ba4:	mov	r1, r7
   12ba8:	mov	r3, #0
   12bac:	b	12ab4 <__assert_fail@plt+0x1360>
   12bb0:	ldrd	sl, [sp, #64]	; 0x40
   12bb4:	cmp	fp, r1
   12bb8:	cmpeq	sl, r0
   12bbc:	movcc	lr, #1
   12bc0:	movcs	lr, #0
   12bc4:	str	lr, [sp]
   12bc8:	str	ip, [sp, #4]
   12bcc:	subs	sl, sl, r0
   12bd0:	sbc	fp, fp, r1
   12bd4:	strd	sl, [sp, #64]	; 0x40
   12bd8:	subs	r6, r6, r4
   12bdc:	sbc	r7, r7, r5
   12be0:	ldrd	sl, [sp]
   12be4:	subs	sl, r6, sl
   12be8:	sbc	fp, r7, fp
   12bec:	mov	r6, sl
   12bf0:	mov	r7, fp
   12bf4:	lsrs	r1, r1, #1
   12bf8:	rrx	r0, r0
   12bfc:	lsl	r9, r4, #31
   12c00:	mov	r8, #0
   12c04:	orr	r0, r0, r8
   12c08:	orr	r1, r1, r9
   12c0c:	lsrs	r5, r5, #1
   12c10:	rrx	r4, r4
   12c14:	add	r2, r2, #1
   12c18:	cmp	r3, r2
   12c1c:	beq	12c54 <__assert_fail@plt+0x1500>
   12c20:	cmp	r7, r5
   12c24:	cmpeq	r6, r4
   12c28:	bhi	12bb0 <__assert_fail@plt+0x145c>
   12c2c:	moveq	lr, #1
   12c30:	movne	lr, #0
   12c34:	ldrd	sl, [sp, #64]	; 0x40
   12c38:	cmp	fp, r1
   12c3c:	cmpeq	sl, r0
   12c40:	movcc	lr, #0
   12c44:	andcs	lr, lr, #1
   12c48:	cmp	lr, #0
   12c4c:	beq	12bf4 <__assert_fail@plt+0x14a0>
   12c50:	b	12bb0 <__assert_fail@plt+0x145c>
   12c54:	ldrd	sl, [sp, #64]	; 0x40
   12c58:	ldr	r3, [sp, #8]
   12c5c:	strd	r6, [r3]
   12c60:	mov	r0, sl
   12c64:	mov	r1, fp
   12c68:	add	sp, sp, #28
   12c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c70:	andeq	lr, r1, r8, asr #6
   12c74:	muleq	r0, fp, r1
   12c78:	andeq	r1, r2, r0, ror #2
   12c7c:	strdeq	r1, [r2], -r0
   12c80:	push	{r4, r5, r6, lr}
   12c84:	sub	sp, sp, #24
   12c88:	mov	r5, r2
   12c8c:	mov	r4, sp
   12c90:	mov	r2, sp
   12c94:	bl	179a8 <__assert_fail@plt+0x6254>
   12c98:	mov	r1, r0
   12c9c:	sub	r4, r0, r4
   12ca0:	rsb	r4, r4, #20
   12ca4:	cmp	r4, r5
   12ca8:	bcs	12cd8 <__assert_fail@plt+0x1584>
   12cac:	ldr	r3, [pc, #72]	; 12cfc <__assert_fail@plt+0x15a8>
   12cb0:	ldr	r3, [r3, #4]
   12cb4:	sub	r5, r5, r4
   12cb8:	add	r5, r3, r5
   12cbc:	mov	ip, r5
   12cc0:	mov	r2, #48	; 0x30
   12cc4:	strb	r2, [r3], #1
   12cc8:	cmp	r3, ip
   12ccc:	bne	12cc4 <__assert_fail@plt+0x1570>
   12cd0:	ldr	r3, [pc, #36]	; 12cfc <__assert_fail@plt+0x15a8>
   12cd4:	str	r5, [r3, #4]
   12cd8:	ldr	r6, [pc, #28]	; 12cfc <__assert_fail@plt+0x15a8>
   12cdc:	ldr	r5, [r6, #4]
   12ce0:	mov	r2, r4
   12ce4:	mov	r0, r5
   12ce8:	bl	113f4 <memcpy@plt>
   12cec:	add	r4, r5, r4
   12cf0:	str	r4, [r6, #4]
   12cf4:	add	sp, sp, #24
   12cf8:	pop	{r4, r5, r6, pc}
   12cfc:	andeq	r2, r3, ip, ror #3
   12d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d04:	sub	sp, sp, #20
   12d08:	mov	r4, r0
   12d0c:	mov	r5, r1
   12d10:	mov	sl, r2
   12d14:	mov	fp, r3
   12d18:	orrs	r3, r4, r5
   12d1c:	beq	12d78 <__assert_fail@plt+0x1624>
   12d20:	add	r3, pc, #336	; 0x150
   12d24:	ldrd	r2, [r3]
   12d28:	bl	1de78 <__assert_fail@plt+0xc724>
   12d2c:	strd	r0, [sp, #8]
   12d30:	add	r3, pc, #320	; 0x140
   12d34:	ldrd	r2, [r3]
   12d38:	mov	r0, r4
   12d3c:	mov	r1, r5
   12d40:	bl	1de78 <__assert_fail@plt+0xc724>
   12d44:	add	r1, pc, #308	; 0x134
   12d48:	ldrd	r0, [r1]
   12d4c:	cmp	r3, r1
   12d50:	cmpeq	r2, r0
   12d54:	bhi	12d8c <__assert_fail@plt+0x1638>
   12d58:	mov	ip, #64	; 0x40
   12d5c:	mov	r8, #0
   12d60:	mov	r9, #0
   12d64:	mov	r0, r8
   12d68:	mov	r1, r9
   12d6c:	add	r5, pc, #260	; 0x104
   12d70:	ldrd	r4, [r5]
   12d74:	b	12ddc <__assert_fail@plt+0x1688>
   12d78:	mov	r2, #0
   12d7c:	mov	r0, sl
   12d80:	mov	r1, fp
   12d84:	bl	12c80 <__assert_fail@plt+0x152c>
   12d88:	b	12e6c <__assert_fail@plt+0x1718>
   12d8c:	ldr	r3, [pc, #244]	; 12e88 <__assert_fail@plt+0x1734>
   12d90:	ldr	r2, [pc, #244]	; 12e8c <__assert_fail@plt+0x1738>
   12d94:	ldr	r1, [pc, #244]	; 12e90 <__assert_fail@plt+0x173c>
   12d98:	ldr	r0, [pc, #244]	; 12e94 <__assert_fail@plt+0x1740>
   12d9c:	bl	11754 <__assert_fail@plt>
   12da0:	adds	r8, r6, #1
   12da4:	adc	r9, r7, #0
   12da8:	cmp	r1, fp
   12dac:	cmpeq	r0, sl
   12db0:	movhi	r6, #1
   12db4:	movls	r6, #0
   12db8:	mov	r7, #0
   12dbc:	subs	sl, sl, r0
   12dc0:	sbc	fp, fp, r1
   12dc4:	subs	r2, r2, r4
   12dc8:	sbc	r3, r3, r5
   12dcc:	subs	r2, r2, r6
   12dd0:	sbc	r3, r3, r7
   12dd4:	subs	ip, ip, #1
   12dd8:	beq	12e4c <__assert_fail@plt+0x16f8>
   12ddc:	lsrs	r1, r1, #1
   12de0:	rrx	r0, r0
   12de4:	lsl	lr, r4, #31
   12de8:	str	lr, [sp, #4]
   12dec:	mov	lr, #0
   12df0:	str	lr, [sp]
   12df4:	ldrd	r6, [sp]
   12df8:	orr	r6, r6, r0
   12dfc:	orr	r7, r7, r1
   12e00:	mov	r0, r6
   12e04:	mov	r1, r7
   12e08:	lsrs	r5, r5, #1
   12e0c:	rrx	r4, r4
   12e10:	adds	r6, r8, r8
   12e14:	adc	r7, r9, r9
   12e18:	mov	r8, r6
   12e1c:	mov	r9, r7
   12e20:	cmp	r5, r3
   12e24:	cmpeq	r4, r2
   12e28:	bcc	12da0 <__assert_fail@plt+0x164c>
   12e2c:	moveq	lr, #1
   12e30:	cmp	r1, fp
   12e34:	cmpeq	r0, sl
   12e38:	movhi	lr, #0
   12e3c:	andls	lr, lr, #1
   12e40:	cmp	lr, #0
   12e44:	beq	12dd4 <__assert_fail@plt+0x1680>
   12e48:	b	12da0 <__assert_fail@plt+0x164c>
   12e4c:	mov	r2, r8
   12e50:	mov	r3, r9
   12e54:	ldrd	r0, [sp, #8]
   12e58:	bl	12d00 <__assert_fail@plt+0x15ac>
   12e5c:	mov	r2, #9
   12e60:	mov	r0, sl
   12e64:	mov	r1, fp
   12e68:	bl	12c80 <__assert_fail@plt+0x152c>
   12e6c:	add	sp, sp, #20
   12e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e74:	nop			; (mov r0, r0)
   12e78:	blcc	fe6c5680 <stdout@@GLIBC_2.4+0xfe69349c>
   12e7c:	andeq	r0, r0, r0
   12e80:	blcc	fe6c5684 <stdout@@GLIBC_2.4+0xfe6934a0>
   12e84:	andeq	r0, r0, r0
   12e88:	andeq	lr, r1, r0, asr r3
   12e8c:	andeq	r0, r0, r6, lsl #19
   12e90:	andeq	r1, r2, r0, ror #2
   12e94:	strdeq	r1, [r2], -r8
   12e98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e9c:	mov	r6, r0
   12ea0:	mov	r7, r1
   12ea4:	mov	r1, r2
   12ea8:	mov	r4, r3
   12eac:	ldr	r8, [sp, #36]	; 0x24
   12eb0:	mov	r3, r0
   12eb4:	ldr	r2, [sp, #32]
   12eb8:	mov	r0, r4
   12ebc:	bl	1143c <__gmpz_powm@plt>
   12ec0:	mov	r1, #1
   12ec4:	mov	r0, r4
   12ec8:	bl	1170c <__gmpz_cmp_ui@plt>
   12ecc:	cmp	r0, #0
   12ed0:	beq	12f4c <__assert_fail@plt+0x17f8>
   12ed4:	mov	r1, r7
   12ed8:	mov	r0, r4
   12edc:	bl	116a0 <__gmpz_cmp@plt>
   12ee0:	cmp	r0, #0
   12ee4:	beq	12f54 <__assert_fail@plt+0x1800>
   12ee8:	cmp	r8, #1
   12eec:	bls	12f5c <__assert_fail@plt+0x1808>
   12ef0:	mov	r5, #1
   12ef4:	mov	r9, #2
   12ef8:	mov	sl, r5
   12efc:	mov	r3, r6
   12f00:	mov	r2, r9
   12f04:	mov	r1, r4
   12f08:	mov	r0, r4
   12f0c:	bl	11724 <__gmpz_powm_ui@plt>
   12f10:	mov	r1, r7
   12f14:	mov	r0, r4
   12f18:	bl	116a0 <__gmpz_cmp@plt>
   12f1c:	cmp	r0, #0
   12f20:	beq	12f64 <__assert_fail@plt+0x1810>
   12f24:	mov	r1, sl
   12f28:	mov	r0, r4
   12f2c:	bl	1170c <__gmpz_cmp_ui@plt>
   12f30:	cmp	r0, #0
   12f34:	beq	12f6c <__assert_fail@plt+0x1818>
   12f38:	add	r5, r5, #1
   12f3c:	cmp	r8, r5
   12f40:	bne	12efc <__assert_fail@plt+0x17a8>
   12f44:	mov	r0, #0
   12f48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f4c:	mov	r0, #1
   12f50:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f54:	mov	r0, #1
   12f58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f5c:	mov	r0, #0
   12f60:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f64:	mov	r0, #1
   12f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f6c:	mov	r0, #0
   12f70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f78:	sub	sp, sp, #12
   12f7c:	mov	sl, r0
   12f80:	str	r1, [sp]
   12f84:	ldr	r9, [r0, #8]
   12f88:	ldr	fp, [r0]
   12f8c:	ldr	r7, [r0, #4]
   12f90:	subs	r6, r9, #1
   12f94:	bmi	130a8 <__assert_fail@plt+0x1954>
   12f98:	add	r5, r9, r9, lsl #1
   12f9c:	add	r5, fp, r5, lsl #2
   12fa0:	sub	r5, r5, #12
   12fa4:	mov	r4, r6
   12fa8:	ldr	r1, [sp]
   12fac:	mov	r0, r5
   12fb0:	bl	116a0 <__gmpz_cmp@plt>
   12fb4:	cmp	r0, #0
   12fb8:	ble	13078 <__assert_fail@plt+0x1924>
   12fbc:	sub	r5, r5, #12
   12fc0:	subs	r4, r4, #1
   12fc4:	bpl	12fa8 <__assert_fail@plt+0x1854>
   12fc8:	add	r9, r9, #1
   12fcc:	add	r5, r9, r9, lsl #1
   12fd0:	lsl	r5, r5, #2
   12fd4:	mov	r1, r5
   12fd8:	mov	r0, fp
   12fdc:	bl	1af38 <__assert_fail@plt+0x97e4>
   12fe0:	mov	fp, r0
   12fe4:	lsl	r3, r9, #2
   12fe8:	str	r3, [sp, #4]
   12fec:	mov	r1, r3
   12ff0:	mov	r0, r7
   12ff4:	bl	1af38 <__assert_fail@plt+0x97e4>
   12ff8:	mov	r8, r0
   12ffc:	sub	r5, r5, #12
   13000:	add	r5, fp, r5
   13004:	mov	r0, r5
   13008:	bl	11718 <__gmpz_init@plt>
   1300c:	cmp	r4, r6
   13010:	bge	13048 <__assert_fail@plt+0x18f4>
   13014:	mov	r0, r5
   13018:	ldr	r3, [sp, #4]
   1301c:	sub	r5, r3, #4
   13020:	add	r5, r8, r5
   13024:	sub	r7, r0, #12
   13028:	mov	r1, r7
   1302c:	bl	1146c <__gmpz_set@plt>
   13030:	ldr	r3, [r5, #-4]
   13034:	str	r3, [r5], #-4
   13038:	sub	r6, r6, #1
   1303c:	mov	r0, r7
   13040:	cmp	r4, r6
   13044:	blt	13024 <__assert_fail@plt+0x18d0>
   13048:	add	r4, r4, #1
   1304c:	add	r0, r4, r4, lsl #1
   13050:	ldr	r1, [sp]
   13054:	add	r0, fp, r0, lsl #2
   13058:	bl	1146c <__gmpz_set@plt>
   1305c:	mov	r3, #1
   13060:	str	r3, [r8, r4, lsl #2]
   13064:	str	fp, [sl]
   13068:	str	r8, [sl, #4]
   1306c:	str	r9, [sl, #8]
   13070:	add	sp, sp, #12
   13074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13078:	cmp	r4, #0
   1307c:	blt	12fc8 <__assert_fail@plt+0x1874>
   13080:	add	r0, r4, r4, lsl #1
   13084:	ldr	r1, [sp]
   13088:	add	r0, fp, r0, lsl #2
   1308c:	bl	116a0 <__gmpz_cmp@plt>
   13090:	cmp	r0, #0
   13094:	bne	12fc8 <__assert_fail@plt+0x1874>
   13098:	ldr	r3, [r7, r4, lsl #2]
   1309c:	add	r3, r3, #1
   130a0:	str	r3, [r7, r4, lsl #2]
   130a4:	b	13070 <__assert_fail@plt+0x191c>
   130a8:	add	r9, r9, #1
   130ac:	add	r4, r9, r9, lsl #1
   130b0:	lsl	r4, r4, #2
   130b4:	mov	r1, r4
   130b8:	mov	r0, fp
   130bc:	bl	1af38 <__assert_fail@plt+0x97e4>
   130c0:	mov	fp, r0
   130c4:	lsl	r1, r9, #2
   130c8:	mov	r0, r7
   130cc:	bl	1af38 <__assert_fail@plt+0x97e4>
   130d0:	mov	r8, r0
   130d4:	sub	r0, r4, #12
   130d8:	add	r0, fp, r0
   130dc:	bl	11718 <__gmpz_init@plt>
   130e0:	mov	r4, r6
   130e4:	b	13048 <__assert_fail@plt+0x18f4>
   130e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130ec:	sub	sp, sp, #124	; 0x7c
   130f0:	mov	sl, r0
   130f4:	mov	fp, r1
   130f8:	strd	r2, [sp, #16]
   130fc:	ldr	lr, [sp, #168]	; 0xa8
   13100:	ldr	r1, [sp, #172]	; 0xac
   13104:	str	r1, [sp, #76]	; 0x4c
   13108:	ldr	r0, [sp, #176]	; 0xb0
   1310c:	ldr	r1, [sp, #180]	; 0xb4
   13110:	and	r2, r2, #1
   13114:	mov	r3, #0
   13118:	orrs	r3, r2, r3
   1311c:	movne	r0, sl
   13120:	movne	r1, fp
   13124:	ldrd	r2, [sp, #16]
   13128:	orrs	r3, r2, r3
   1312c:	beq	13444 <__assert_fail@plt+0x1cf0>
   13130:	ldr	ip, [sp, #164]	; 0xa4
   13134:	str	r0, [sp, #64]	; 0x40
   13138:	str	r1, [sp, #68]	; 0x44
   1313c:	ldrd	r2, [sp, #160]	; 0xa0
   13140:	mov	r3, #0
   13144:	strd	r2, [sp]
   13148:	b	131a4 <__assert_fail@plt+0x1a50>
   1314c:	str	r1, [sp, #104]	; 0x68
   13150:	mov	r3, #0
   13154:	str	r3, [sp, #108]	; 0x6c
   13158:	ldrd	r2, [sp, #104]	; 0x68
   1315c:	adds	r2, r2, r4
   13160:	adc	r3, r3, r5
   13164:	mov	r4, r2
   13168:	mov	r5, r3
   1316c:	ldrd	r0, [sp, #112]	; 0x70
   13170:	subs	r2, r0, r4
   13174:	sbc	r3, r1, r5
   13178:	strd	r2, [sp, #64]	; 0x40
   1317c:	cmp	r1, r5
   13180:	cmpeq	r0, r4
   13184:	bcs	13198 <__assert_fail@plt+0x1a44>
   13188:	ldrd	r0, [sp, #160]	; 0xa0
   1318c:	adds	r0, r0, r2
   13190:	adc	r1, r1, r3
   13194:	strd	r0, [sp, #64]	; 0x40
   13198:	ldrd	r2, [sp, #16]
   1319c:	orrs	r3, r2, r3
   131a0:	beq	1344c <__assert_fail@plt+0x1cf8>
   131a4:	mov	r3, #0
   131a8:	mul	r1, sl, r3
   131ac:	umull	r4, r5, sl, sl
   131b0:	add	r5, r5, r1, lsl #1
   131b4:	umull	r0, r1, fp, sl
   131b8:	mla	r1, fp, r3, r1
   131bc:	umull	r8, r9, fp, fp
   131c0:	adds	r2, r0, r0
   131c4:	adc	r3, r1, r1
   131c8:	str	r5, [sp, #24]
   131cc:	mov	r6, #0
   131d0:	str	r6, [sp, #28]
   131d4:	ldrd	r6, [sp, #24]
   131d8:	adds	r6, r6, r2
   131dc:	adc	r7, r7, r3
   131e0:	mov	r2, r6
   131e4:	mov	r3, r7
   131e8:	cmp	r1, r7
   131ec:	cmpeq	r0, r6
   131f0:	bls	131fc <__assert_fail@plt+0x1aa8>
   131f4:	adds	r8, r8, #0
   131f8:	adc	r9, r9, #1
   131fc:	str	r3, [sp, #8]
   13200:	mov	r1, #0
   13204:	str	r1, [sp, #12]
   13208:	ldrd	r6, [sp, #8]
   1320c:	adds	r0, r6, r8
   13210:	adc	r1, r7, r9
   13214:	mov	r8, r0
   13218:	mov	r9, r1
   1321c:	str	r2, [sp, #36]	; 0x24
   13220:	str	r7, [sp, #32]
   13224:	ldrd	r2, [sp, #32]
   13228:	adds	r2, r2, r4
   1322c:	adc	r3, r3, #0
   13230:	ldr	r1, [sp, #76]	; 0x4c
   13234:	mul	r0, r2, r1
   13238:	mla	r0, lr, r3, r0
   1323c:	umull	r2, r3, r2, lr
   13240:	add	r0, r0, r3
   13244:	mov	r3, #0
   13248:	ldrd	sl, [sp]
   1324c:	umull	r6, r7, r0, sl
   13250:	mla	r7, r0, fp, r7
   13254:	umull	r0, r1, r0, ip
   13258:	umull	r4, r5, ip, r2
   1325c:	mla	r5, ip, r3, r5
   13260:	adds	r4, r4, r6
   13264:	adc	r5, r5, r7
   13268:	mul	sl, r2, fp
   1326c:	ldr	fp, [sp]
   13270:	mla	sl, fp, r3, sl
   13274:	umull	r2, r3, r2, fp
   13278:	add	r3, sl, r3
   1327c:	str	r3, [sp, #40]	; 0x28
   13280:	ldr	r3, [sp, #12]
   13284:	str	r3, [sp, #44]	; 0x2c
   13288:	ldrd	r2, [sp, #40]	; 0x28
   1328c:	adds	r2, r2, r4
   13290:	adc	r3, r3, r5
   13294:	mov	r5, r3
   13298:	cmp	r7, r3
   1329c:	cmpeq	r6, r2
   132a0:	bls	132ac <__assert_fail@plt+0x1b58>
   132a4:	adds	r0, r0, #0
   132a8:	adc	r1, r1, #1
   132ac:	str	r5, [sp, #48]	; 0x30
   132b0:	mov	r3, #0
   132b4:	str	r3, [sp, #52]	; 0x34
   132b8:	ldrd	r2, [sp, #48]	; 0x30
   132bc:	adds	r2, r2, r0
   132c0:	adc	r3, r3, r1
   132c4:	subs	sl, r8, r2
   132c8:	sbc	fp, r9, r3
   132cc:	cmp	r9, r3
   132d0:	cmpeq	r8, r2
   132d4:	bcs	132ec <__assert_fail@plt+0x1b98>
   132d8:	ldrd	r2, [sp, #160]	; 0xa0
   132dc:	adds	r2, r2, sl
   132e0:	adc	r3, r3, fp
   132e4:	mov	sl, r2
   132e8:	mov	fp, r3
   132ec:	ldrd	r2, [sp, #16]
   132f0:	lsrs	r3, r3, #1
   132f4:	rrx	r2, r2
   132f8:	strd	r2, [sp, #16]
   132fc:	and	r2, r2, #1
   13300:	mov	r3, #0
   13304:	orrs	r3, r2, r3
   13308:	beq	13198 <__assert_fail@plt+0x1a44>
   1330c:	ldrd	r8, [sp, #64]	; 0x40
   13310:	mov	r2, r8
   13314:	mov	r3, #0
   13318:	mov	r1, #0
   1331c:	mul	r6, r8, r1
   13320:	mla	r6, sl, r3, r6
   13324:	umull	r4, r5, r8, sl
   13328:	strd	r4, [sp, #64]	; 0x40
   1332c:	add	r4, r6, r5
   13330:	str	r4, [sp, #68]	; 0x44
   13334:	mov	r7, r9
   13338:	umull	r8, r9, r9, sl
   1333c:	mla	r9, r7, r1, r9
   13340:	umull	r6, r7, r7, fp
   13344:	umull	r0, r1, fp, r2
   13348:	mla	r1, fp, r3, r1
   1334c:	adds	r2, r0, r8
   13350:	adc	r3, r1, r9
   13354:	ldr	r1, [sp, #68]	; 0x44
   13358:	str	r1, [sp, #80]	; 0x50
   1335c:	mov	r1, #0
   13360:	str	r1, [sp, #84]	; 0x54
   13364:	ldrd	r0, [sp, #80]	; 0x50
   13368:	adds	r0, r0, r2
   1336c:	adc	r1, r1, r3
   13370:	mov	r2, r0
   13374:	mov	r3, r1
   13378:	cmp	r9, r1
   1337c:	cmpeq	r8, r0
   13380:	bls	1338c <__assert_fail@plt+0x1c38>
   13384:	adds	r6, r6, #0
   13388:	adc	r7, r7, #1
   1338c:	str	r3, [sp, #56]	; 0x38
   13390:	mov	r1, #0
   13394:	str	r1, [sp, #60]	; 0x3c
   13398:	ldrd	r8, [sp, #56]	; 0x38
   1339c:	adds	r0, r8, r6
   133a0:	adc	r1, r9, r7
   133a4:	strd	r0, [sp, #112]	; 0x70
   133a8:	str	r2, [sp, #92]	; 0x5c
   133ac:	str	r9, [sp, #88]	; 0x58
   133b0:	ldrd	r2, [sp, #88]	; 0x58
   133b4:	ldr	r1, [sp, #64]	; 0x40
   133b8:	adds	r2, r2, r1
   133bc:	adc	r3, r3, #0
   133c0:	ldr	r1, [sp, #76]	; 0x4c
   133c4:	mul	r4, r2, r1
   133c8:	mla	r4, lr, r3, r4
   133cc:	umull	r2, r3, r2, lr
   133d0:	add	r4, r4, r3
   133d4:	mov	r3, #0
   133d8:	ldrd	r6, [sp]
   133dc:	umull	r8, r9, r6, r4
   133e0:	mla	r9, r4, r7, r9
   133e4:	umull	r4, r5, ip, r4
   133e8:	umull	r0, r1, ip, r2
   133ec:	mla	r1, ip, r3, r1
   133f0:	adds	r0, r0, r8
   133f4:	adc	r1, r1, r9
   133f8:	mul	r6, r6, r3
   133fc:	ldr	r7, [sp, #4]
   13400:	mla	r6, r2, r7, r6
   13404:	ldr	r7, [sp]
   13408:	umull	r2, r3, r7, r2
   1340c:	add	r3, r6, r3
   13410:	str	r3, [sp, #96]	; 0x60
   13414:	ldr	r3, [sp, #60]	; 0x3c
   13418:	str	r3, [sp, #100]	; 0x64
   1341c:	ldrd	r2, [sp, #96]	; 0x60
   13420:	adds	r2, r2, r0
   13424:	adc	r3, r3, r1
   13428:	mov	r1, r3
   1342c:	cmp	r9, r3
   13430:	cmpeq	r8, r2
   13434:	bls	1314c <__assert_fail@plt+0x19f8>
   13438:	adds	r4, r4, #0
   1343c:	adc	r5, r5, #1
   13440:	b	1314c <__assert_fail@plt+0x19f8>
   13444:	str	r0, [sp, #64]	; 0x40
   13448:	str	r1, [sp, #68]	; 0x44
   1344c:	ldrd	r0, [sp, #64]	; 0x40
   13450:	add	sp, sp, #124	; 0x7c
   13454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1345c:	sub	sp, sp, #108	; 0x6c
   13460:	mov	r8, r0
   13464:	mov	r9, r1
   13468:	strd	r8, [sp, #88]	; 0x58
   1346c:	mov	fp, r2
   13470:	str	r3, [sp, #84]	; 0x54
   13474:	ldrd	r4, [sp, #168]	; 0xa8
   13478:	strd	r4, [sp, #16]
   1347c:	str	r2, [sp, #8]
   13480:	str	r3, [sp, #12]
   13484:	mov	r2, r0
   13488:	mov	r3, r1
   1348c:	strd	r2, [sp]
   13490:	ldrd	r2, [sp, #152]	; 0x98
   13494:	ldrd	r0, [sp, #144]	; 0x90
   13498:	bl	130e8 <__assert_fail@plt+0x1994>
   1349c:	ldrd	r4, [sp, #168]	; 0xa8
   134a0:	mov	r3, r9
   134a4:	subs	r4, r8, r4
   134a8:	sbc	r5, r9, r5
   134ac:	strd	r4, [sp, #72]	; 0x48
   134b0:	ldrd	r6, [sp, #168]	; 0xa8
   134b4:	cmp	r7, r1
   134b8:	cmpeq	r6, r0
   134bc:	moveq	r3, #1
   134c0:	movne	r3, #0
   134c4:	cmp	r1, r5
   134c8:	cmpeq	r0, r4
   134cc:	orreq	r3, r3, #1
   134d0:	str	r3, [sp, #100]	; 0x64
   134d4:	cmp	r3, #0
   134d8:	bne	1368c <__assert_fail@plt+0x1f38>
   134dc:	ldr	r3, [sp, #160]	; 0xa0
   134e0:	cmp	r3, #1
   134e4:	bls	1368c <__assert_fail@plt+0x1f38>
   134e8:	mov	ip, r9
   134ec:	mov	lr, #1
   134f0:	mov	r3, #0
   134f4:	str	fp, [sp, #96]	; 0x60
   134f8:	mov	sl, r8
   134fc:	mov	fp, r3
   13500:	b	13580 <__assert_fail@plt+0x1e2c>
   13504:	str	r1, [sp, #56]	; 0x38
   13508:	mov	r3, #0
   1350c:	str	r3, [sp, #60]	; 0x3c
   13510:	ldrd	r2, [sp, #56]	; 0x38
   13514:	adds	r2, r2, r4
   13518:	adc	r3, r3, r5
   1351c:	mov	r4, r2
   13520:	mov	r5, r3
   13524:	ldrd	r2, [sp, #64]	; 0x40
   13528:	subs	r0, r2, r4
   1352c:	sbc	r1, r3, r5
   13530:	cmp	r3, r5
   13534:	cmpeq	r2, r4
   13538:	bcs	13550 <__assert_fail@plt+0x1dfc>
   1353c:	ldrd	r2, [sp, #88]	; 0x58
   13540:	adds	r2, r2, r0
   13544:	adc	r3, r3, r1
   13548:	mov	r0, r2
   1354c:	mov	r1, r3
   13550:	ldrd	r2, [sp, #72]	; 0x48
   13554:	cmp	r3, r1
   13558:	cmpeq	r2, r0
   1355c:	beq	13684 <__assert_fail@plt+0x1f30>
   13560:	ldrd	r2, [sp, #168]	; 0xa8
   13564:	cmp	r3, r1
   13568:	cmpeq	r2, r0
   1356c:	beq	1368c <__assert_fail@plt+0x1f38>
   13570:	add	lr, lr, #1
   13574:	ldr	r3, [sp, #160]	; 0xa0
   13578:	cmp	r3, lr
   1357c:	beq	1368c <__assert_fail@plt+0x1f38>
   13580:	mov	r3, #0
   13584:	mul	r4, r0, r3
   13588:	umull	r6, r7, r0, r0
   1358c:	add	r7, r7, r4, lsl #1
   13590:	umull	r4, r5, r1, r0
   13594:	mla	r5, r1, r3, r5
   13598:	umull	r0, r1, r1, r1
   1359c:	adds	r2, r4, r4
   135a0:	adc	r3, r5, r5
   135a4:	str	r7, [sp, #32]
   135a8:	mov	r8, #0
   135ac:	str	r8, [sp, #36]	; 0x24
   135b0:	ldrd	r8, [sp, #32]
   135b4:	adds	r8, r8, r2
   135b8:	adc	r9, r9, r3
   135bc:	mov	r2, r8
   135c0:	mov	r3, r9
   135c4:	cmp	r5, r9
   135c8:	cmpeq	r4, r8
   135cc:	bls	135d8 <__assert_fail@plt+0x1e84>
   135d0:	adds	r0, r0, #0
   135d4:	adc	r1, r1, #1
   135d8:	str	r3, [sp, #24]
   135dc:	mov	r4, #0
   135e0:	str	r4, [sp, #28]
   135e4:	ldrd	r8, [sp, #24]
   135e8:	adds	r4, r8, r0
   135ec:	adc	r5, r9, r1
   135f0:	strd	r4, [sp, #64]	; 0x40
   135f4:	str	r2, [sp, #44]	; 0x2c
   135f8:	str	r9, [sp, #40]	; 0x28
   135fc:	ldrd	r2, [sp, #40]	; 0x28
   13600:	adds	r2, r2, r6
   13604:	adc	r3, r3, #0
   13608:	ldr	r1, [sp, #84]	; 0x54
   1360c:	mul	r4, r2, r1
   13610:	ldr	r1, [sp, #96]	; 0x60
   13614:	mla	r4, r1, r3, r4
   13618:	umull	r2, r3, r2, r1
   1361c:	add	r4, r4, r3
   13620:	mov	r3, #0
   13624:	umull	r6, r7, r4, sl
   13628:	mla	r7, r4, fp, r7
   1362c:	umull	r4, r5, r4, ip
   13630:	umull	r0, r1, ip, r2
   13634:	mla	r1, ip, r3, r1
   13638:	adds	r0, r0, r6
   1363c:	adc	r1, r1, r7
   13640:	mul	r8, r2, fp
   13644:	mla	r8, sl, r3, r8
   13648:	umull	r2, r3, r2, sl
   1364c:	add	r3, r8, r3
   13650:	str	r3, [sp, #48]	; 0x30
   13654:	ldr	r3, [sp, #28]
   13658:	str	r3, [sp, #52]	; 0x34
   1365c:	ldrd	r2, [sp, #48]	; 0x30
   13660:	adds	r2, r2, r0
   13664:	adc	r3, r3, r1
   13668:	mov	r1, r3
   1366c:	cmp	r7, r3
   13670:	cmpeq	r6, r2
   13674:	bls	13504 <__assert_fail@plt+0x1db0>
   13678:	adds	r4, r4, #0
   1367c:	adc	r5, r5, #1
   13680:	b	13504 <__assert_fail@plt+0x1db0>
   13684:	mov	r3, #1
   13688:	str	r3, [sp, #100]	; 0x64
   1368c:	ldr	r0, [sp, #100]	; 0x64
   13690:	add	sp, sp, #108	; 0x6c
   13694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1369c:	sub	sp, sp, #412	; 0x19c
   136a0:	strd	r0, [sp, #40]	; 0x28
   136a4:	cmp	r1, #0
   136a8:	cmpeq	r0, #1
   136ac:	bls	13c38 <__assert_fail@plt+0x24e4>
   136b0:	add	r3, pc, #688	; 0x2b0
   136b4:	ldrd	r2, [r3]
   136b8:	cmp	r1, r3
   136bc:	cmpeq	r0, r2
   136c0:	bls	13c44 <__assert_fail@plt+0x24f0>
   136c4:	subs	r0, r0, #1
   136c8:	sbc	r1, r1, #0
   136cc:	strd	r0, [sp, #48]	; 0x30
   136d0:	and	r2, r0, #1
   136d4:	mov	r3, #0
   136d8:	orrs	r3, r2, r3
   136dc:	bne	137e0 <__assert_fail@plt+0x208c>
   136e0:	mov	r2, r0
   136e4:	mov	r3, r1
   136e8:	mov	ip, #0
   136ec:	lsrs	r3, r3, #1
   136f0:	rrx	r2, r2
   136f4:	add	ip, ip, #1
   136f8:	and	r0, r2, #1
   136fc:	mov	r1, #0
   13700:	orrs	r1, r0, r1
   13704:	beq	136ec <__assert_fail@plt+0x1f98>
   13708:	strd	r2, [sp, #112]	; 0x70
   1370c:	ldrd	r6, [sp, #40]	; 0x28
   13710:	mov	r2, r6
   13714:	mov	r3, r7
   13718:	lsrs	r3, r3, #1
   1371c:	rrx	r2, r2
   13720:	and	r2, r2, #127	; 0x7f
   13724:	ldr	r3, [pc, #580]	; 13970 <__assert_fail@plt+0x221c>
   13728:	add	r3, r3, r2
   1372c:	ldrb	r2, [r3, #744]	; 0x2e8
   13730:	mov	r3, #0
   13734:	adds	r4, r2, r2
   13738:	adc	r5, r3, r3
   1373c:	umull	r2, r3, r2, r2
   13740:	mul	r1, r2, r7
   13744:	mla	r1, r6, r3, r1
   13748:	umull	r2, r3, r2, r6
   1374c:	add	r3, r1, r3
   13750:	subs	r2, r4, r2
   13754:	sbc	r3, r5, r3
   13758:	adds	r4, r2, r2
   1375c:	adc	r5, r3, r3
   13760:	mul	r1, r2, r3
   13764:	umull	r2, r3, r2, r2
   13768:	add	r3, r3, r1, lsl #1
   1376c:	mul	r1, r2, r7
   13770:	mla	r1, r6, r3, r1
   13774:	umull	r2, r3, r2, r6
   13778:	add	r3, r1, r3
   1377c:	subs	r2, r4, r2
   13780:	sbc	r3, r5, r3
   13784:	adds	r4, r2, r2
   13788:	adc	r5, r3, r3
   1378c:	mul	r1, r2, r3
   13790:	umull	r2, r3, r2, r2
   13794:	add	r3, r3, r1, lsl #1
   13798:	mul	r1, r2, r7
   1379c:	mla	r1, r6, r3, r1
   137a0:	umull	r2, r3, r2, r6
   137a4:	add	r3, r1, r3
   137a8:	subs	r4, r4, r2
   137ac:	sbc	r5, r5, r3
   137b0:	strd	r4, [sp, #32]
   137b4:	mov	r0, r6
   137b8:	mov	r1, r7
   137bc:	mov	r3, #64	; 0x40
   137c0:	mov	lr, r3
   137c4:	mov	r6, #0
   137c8:	mov	r7, #0
   137cc:	mov	r4, #1
   137d0:	mov	r5, #0
   137d4:	mov	r2, r6
   137d8:	mov	r3, r7
   137dc:	b	13824 <__assert_fail@plt+0x20d0>
   137e0:	ldrd	r2, [sp, #48]	; 0x30
   137e4:	strd	r2, [sp, #112]	; 0x70
   137e8:	mov	ip, #0
   137ec:	b	1370c <__assert_fail@plt+0x1fb8>
   137f0:	cmp	r3, r7
   137f4:	cmpeq	r2, r6
   137f8:	movhi	r8, #1
   137fc:	movls	r8, #0
   13800:	mov	r9, #0
   13804:	subs	r6, r6, r2
   13808:	sbc	r7, r7, r3
   1380c:	subs	r4, r4, r0
   13810:	sbc	r5, r5, r1
   13814:	subs	r4, r4, r8
   13818:	sbc	r5, r5, r9
   1381c:	subs	lr, lr, #1
   13820:	beq	13874 <__assert_fail@plt+0x2120>
   13824:	lsrs	r3, r3, #1
   13828:	rrx	r2, r2
   1382c:	lsl	fp, r0, #31
   13830:	mov	sl, #0
   13834:	orr	r2, r2, sl
   13838:	orr	r3, r3, fp
   1383c:	lsrs	r1, r1, #1
   13840:	rrx	r0, r0
   13844:	cmp	r1, r5
   13848:	cmpeq	r0, r4
   1384c:	bcc	137f0 <__assert_fail@plt+0x209c>
   13850:	moveq	r8, #1
   13854:	movne	r8, sl
   13858:	cmp	r3, r7
   1385c:	cmpeq	r2, r6
   13860:	movhi	r8, #0
   13864:	andls	r8, r8, #1
   13868:	cmp	r8, sl
   1386c:	beq	1381c <__assert_fail@plt+0x20c8>
   13870:	b	137f0 <__assert_fail@plt+0x209c>
   13874:	str	lr, [sp, #128]	; 0x80
   13878:	ldrd	r2, [sp, #40]	; 0x28
   1387c:	mov	r4, r2
   13880:	mov	r5, r3
   13884:	strd	r4, [sp, #64]	; 0x40
   13888:	subs	r2, r2, r6
   1388c:	sbc	r3, r3, r7
   13890:	cmp	r7, r3
   13894:	cmpeq	r6, r2
   13898:	movcc	r2, #1
   1389c:	movcs	r2, #0
   138a0:	rsbs	r2, r2, #0
   138a4:	sbc	r3, r3, r3
   138a8:	mov	r0, r4
   138ac:	mov	r1, r5
   138b0:	and	r0, r0, r2
   138b4:	and	r1, r1, r3
   138b8:	mov	r2, r0
   138bc:	mov	r3, r1
   138c0:	adds	sl, r6, r6
   138c4:	adc	fp, r7, r7
   138c8:	mov	r0, r4
   138cc:	mov	r1, r5
   138d0:	subs	r4, sl, r4
   138d4:	sbc	r5, fp, r5
   138d8:	adds	sl, r4, r2
   138dc:	adc	fp, r5, r3
   138e0:	str	ip, [sp, #120]	; 0x78
   138e4:	strd	r6, [sp, #24]
   138e8:	str	ip, [sp, #16]
   138ec:	ldrd	r2, [sp, #112]	; 0x70
   138f0:	strd	r2, [sp, #8]
   138f4:	strd	sl, [sp]
   138f8:	ldrd	r2, [sp, #32]
   138fc:	bl	13458 <__assert_fail@plt+0x1d04>
   13900:	subs	r3, r0, #0
   13904:	str	r3, [sp, #140]	; 0x8c
   13908:	beq	13c4c <__assert_fail@plt+0x24f8>
   1390c:	add	r3, sp, #152	; 0x98
   13910:	str	r3, [sp]
   13914:	ldrd	r2, [sp, #48]	; 0x30
   13918:	mov	r0, #0
   1391c:	mov	r1, #0
   13920:	bl	147cc <__assert_fail@plt+0x3078>
   13924:	ldrb	r3, [sp, #402]	; 0x192
   13928:	str	r3, [sp, #124]	; 0x7c
   1392c:	str	r7, [sp, #132]	; 0x84
   13930:	ldr	r3, [pc, #56]	; 13970 <__assert_fail@plt+0x221c>
   13934:	sub	r2, r3, #1
   13938:	str	r2, [sp, #76]	; 0x4c
   1393c:	add	r3, r3, #664	; 0x298
   13940:	add	r3, r3, #3
   13944:	str	r3, [sp, #136]	; 0x88
   13948:	mov	r2, #2
   1394c:	mov	r3, #0
   13950:	strd	r2, [sp, #104]	; 0x68
   13954:	mov	r2, r6
   13958:	mov	r3, #0
   1395c:	strd	r2, [sp, #56]	; 0x38
   13960:	b	13ac4 <__assert_fail@plt+0x2370>
   13964:	nop			; (mov r0, r0)
   13968:	cmneq	sp, r8, ror sp
   1396c:	andeq	r0, r0, r0
   13970:	andeq	lr, r1, r8, ror r0
   13974:	andeq	lr, r1, r0, ror #7
   13978:	andeq	r0, r0, lr, ror #9
   1397c:	andeq	r1, r2, r0, ror #2
   13980:	andeq	r1, r2, ip, lsl #4
   13984:	andeq	r1, r2, r8, lsl r2
   13988:	cmp	r7, r1
   1398c:	cmpeq	r6, r0
   13990:	bne	13c4c <__assert_fail@plt+0x24f8>
   13994:	ldr	r1, [sp, #76]	; 0x4c
   13998:	ldrb	r2, [r1, #1]!
   1399c:	mov	r3, #0
   139a0:	str	r1, [sp, #76]	; 0x4c
   139a4:	ldrd	r0, [sp, #104]	; 0x68
   139a8:	adds	r0, r0, r2
   139ac:	adc	r1, r1, r3
   139b0:	mov	sl, r0
   139b4:	mov	fp, r1
   139b8:	strd	sl, [sp, #104]	; 0x68
   139bc:	mov	r3, #0
   139c0:	ldrd	r4, [sp, #56]	; 0x38
   139c4:	mul	r1, r4, r3
   139c8:	mla	r1, sl, r5, r1
   139cc:	umull	r4, r5, r4, sl
   139d0:	add	r5, r1, r5
   139d4:	ldr	r1, [sp, #132]	; 0x84
   139d8:	umull	r8, r9, sl, r1
   139dc:	mla	r9, r1, r3, r9
   139e0:	umull	r2, r3, r1, fp
   139e4:	ldr	r1, [sp, #56]	; 0x38
   139e8:	umull	r0, r1, r1, fp
   139ec:	ldr	ip, [sp, #60]	; 0x3c
   139f0:	mov	lr, fp
   139f4:	mla	r1, fp, ip, r1
   139f8:	adds	r0, r0, r8
   139fc:	adc	r1, r1, r9
   13a00:	str	r5, [sp, #80]	; 0x50
   13a04:	mov	ip, #0
   13a08:	str	ip, [sp, #84]	; 0x54
   13a0c:	ldrd	sl, [sp, #80]	; 0x50
   13a10:	adds	sl, sl, r0
   13a14:	adc	fp, fp, r1
   13a18:	mov	r0, sl
   13a1c:	mov	r1, fp
   13a20:	cmp	r9, fp
   13a24:	cmpeq	r8, sl
   13a28:	bls	13a34 <__assert_fail@plt+0x22e0>
   13a2c:	adds	r2, r2, #0
   13a30:	adc	r3, r3, #1
   13a34:	str	r1, [sp, #88]	; 0x58
   13a38:	mov	ip, #0
   13a3c:	str	ip, [sp, #92]	; 0x5c
   13a40:	ldrd	sl, [sp, #88]	; 0x58
   13a44:	adds	r8, sl, r2
   13a48:	adc	r9, fp, r3
   13a4c:	mov	r2, r8
   13a50:	mov	r3, r9
   13a54:	str	r0, [sp, #100]	; 0x64
   13a58:	str	fp, [sp, #96]	; 0x60
   13a5c:	ldrd	sl, [sp, #96]	; 0x60
   13a60:	adds	sl, sl, r4
   13a64:	adc	fp, fp, #0
   13a68:	orrs	r1, r2, r3
   13a6c:	bne	13b3c <__assert_fail@plt+0x23e8>
   13a70:	ldrd	r2, [sp, #64]	; 0x40
   13a74:	mov	r0, sl
   13a78:	mov	r1, fp
   13a7c:	bl	1de78 <__assert_fail@plt+0xc724>
   13a80:	mov	sl, r2
   13a84:	mov	fp, r3
   13a88:	strd	r6, [sp, #24]
   13a8c:	ldr	r3, [sp, #120]	; 0x78
   13a90:	str	r3, [sp, #16]
   13a94:	ldrd	r2, [sp, #112]	; 0x70
   13a98:	strd	r2, [sp, #8]
   13a9c:	strd	sl, [sp]
   13aa0:	ldrd	r2, [sp, #32]
   13aa4:	ldrd	r0, [sp, #64]	; 0x40
   13aa8:	bl	13458 <__assert_fail@plt+0x1d04>
   13aac:	cmp	r0, #0
   13ab0:	beq	13c58 <__assert_fail@plt+0x2504>
   13ab4:	ldr	r3, [sp, #136]	; 0x88
   13ab8:	ldr	r2, [sp, #76]	; 0x4c
   13abc:	cmp	r3, r2
   13ac0:	beq	13c14 <__assert_fail@plt+0x24c0>
   13ac4:	ldr	r3, [sp, #124]	; 0x7c
   13ac8:	cmp	r3, #0
   13acc:	beq	13c4c <__assert_fail@plt+0x24f8>
   13ad0:	add	r5, sp, #160	; 0xa0
   13ad4:	ldr	r4, [sp, #128]	; 0x80
   13ad8:	strd	sl, [sp, #40]	; 0x28
   13adc:	mov	fp, r3
   13ae0:	ldrd	r8, [sp, #64]	; 0x40
   13ae4:	ldrd	r2, [r5, #8]!
   13ae8:	ldrd	r0, [sp, #48]	; 0x30
   13aec:	bl	1de78 <__assert_fail@plt+0xc724>
   13af0:	strd	r6, [sp, #16]
   13af4:	ldrd	r2, [sp, #32]
   13af8:	strd	r2, [sp, #8]
   13afc:	strd	r8, [sp]
   13b00:	mov	r2, r0
   13b04:	mov	r3, r1
   13b08:	ldrd	r0, [sp, #40]	; 0x28
   13b0c:	bl	130e8 <__assert_fail@plt+0x1994>
   13b10:	add	r4, r4, #1
   13b14:	cmp	r7, r1
   13b18:	cmpeq	r6, r0
   13b1c:	movne	r3, #1
   13b20:	moveq	r3, #0
   13b24:	cmp	r4, fp
   13b28:	movcs	r3, #0
   13b2c:	andcc	r3, r3, #1
   13b30:	cmp	r3, #0
   13b34:	bne	13ae4 <__assert_fail@plt+0x2390>
   13b38:	b	13988 <__assert_fail@plt+0x2234>
   13b3c:	ldrd	r0, [sp, #64]	; 0x40
   13b40:	cmp	r1, r9
   13b44:	cmpeq	r0, r8
   13b48:	bls	13b64 <__assert_fail@plt+0x2410>
   13b4c:	ldrd	r0, [sp, #64]	; 0x40
   13b50:	mov	ip, #64	; 0x40
   13b54:	mov	r8, #0
   13b58:	mov	r9, r8
   13b5c:	strd	r6, [sp, #40]	; 0x28
   13b60:	b	13bb8 <__assert_fail@plt+0x2464>
   13b64:	ldr	r3, [pc, #-504]	; 13974 <__assert_fail@plt+0x2220>
   13b68:	ldr	r2, [pc, #-504]	; 13978 <__assert_fail@plt+0x2224>
   13b6c:	ldr	r1, [pc, #-504]	; 1397c <__assert_fail@plt+0x2228>
   13b70:	ldr	r0, [pc, #-504]	; 13980 <__assert_fail@plt+0x222c>
   13b74:	bl	11754 <__assert_fail@plt>
   13b78:	cmp	r9, fp
   13b7c:	cmpeq	r8, sl
   13b80:	movhi	lr, #1
   13b84:	movls	lr, #0
   13b88:	mov	r6, lr
   13b8c:	mov	lr, #0
   13b90:	subs	sl, sl, r8
   13b94:	sbc	fp, fp, r9
   13b98:	subs	r2, r2, r0
   13b9c:	sbc	r3, r3, r1
   13ba0:	subs	r6, r2, r6
   13ba4:	sbc	r7, r3, lr
   13ba8:	mov	r2, r6
   13bac:	mov	r3, r7
   13bb0:	subs	ip, ip, #1
   13bb4:	beq	13c08 <__assert_fail@plt+0x24b4>
   13bb8:	lsrs	r9, r9, #1
   13bbc:	rrx	r8, r8
   13bc0:	lsl	r5, r0, #31
   13bc4:	mov	r4, #0
   13bc8:	orr	r8, r8, r4
   13bcc:	orr	r9, r9, r5
   13bd0:	lsrs	r1, r1, #1
   13bd4:	rrx	r0, r0
   13bd8:	cmp	r1, r3
   13bdc:	cmpeq	r0, r2
   13be0:	bcc	13b78 <__assert_fail@plt+0x2424>
   13be4:	moveq	lr, #1
   13be8:	movne	lr, r4
   13bec:	cmp	r9, fp
   13bf0:	cmpeq	r8, sl
   13bf4:	movhi	lr, #0
   13bf8:	andls	lr, lr, #1
   13bfc:	cmp	lr, r4
   13c00:	beq	13bb0 <__assert_fail@plt+0x245c>
   13c04:	b	13b78 <__assert_fail@plt+0x2424>
   13c08:	ldrd	r6, [sp, #40]	; 0x28
   13c0c:	strd	r4, [sp, #144]	; 0x90
   13c10:	b	13a88 <__assert_fail@plt+0x2334>
   13c14:	mov	r2, #5
   13c18:	ldr	r1, [pc, #-668]	; 13984 <__assert_fail@plt+0x2230>
   13c1c:	mov	r0, #0
   13c20:	bl	11430 <dcgettext@plt>
   13c24:	mov	r2, r0
   13c28:	mov	r1, #0
   13c2c:	mov	r0, r1
   13c30:	bl	11520 <error@plt>
   13c34:	bl	11748 <abort@plt>
   13c38:	mov	r3, #0
   13c3c:	str	r3, [sp, #140]	; 0x8c
   13c40:	b	13c4c <__assert_fail@plt+0x24f8>
   13c44:	mov	r3, #1
   13c48:	str	r3, [sp, #140]	; 0x8c
   13c4c:	ldr	r0, [sp, #140]	; 0x8c
   13c50:	add	sp, sp, #412	; 0x19c
   13c54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c58:	str	r0, [sp, #140]	; 0x8c
   13c5c:	b	13c4c <__assert_fail@plt+0x24f8>
   13c60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c64:	sub	sp, sp, #276	; 0x114
   13c68:	strd	r0, [sp, #48]	; 0x30
   13c6c:	str	r2, [sp, #264]	; 0x108
   13c70:	str	r3, [sp, #260]	; 0x104
   13c74:	cmp	r1, #0
   13c78:	cmpeq	r0, #1
   13c7c:	bls	13cb0 <__assert_fail@plt+0x255c>
   13c80:	ldrd	r4, [sp, #48]	; 0x30
   13c84:	mov	ip, #64	; 0x40
   13c88:	mov	r2, #0
   13c8c:	mov	r3, #0
   13c90:	mov	r0, #1
   13c94:	mov	r1, #0
   13c98:	mov	r6, r2
   13c9c:	mov	r7, r3
   13ca0:	mov	lr, #0
   13ca4:	mov	sl, r2
   13ca8:	mov	fp, r3
   13cac:	b	13cf8 <__assert_fail@plt+0x25a4>
   13cb0:	ldr	r3, [pc, #2812]	; 147b4 <__assert_fail@plt+0x3060>
   13cb4:	ldr	r2, [pc, #2812]	; 147b8 <__assert_fail@plt+0x3064>
   13cb8:	ldr	r1, [pc, #2812]	; 147bc <__assert_fail@plt+0x3068>
   13cbc:	ldr	r0, [pc, #2812]	; 147c0 <__assert_fail@plt+0x306c>
   13cc0:	bl	11754 <__assert_fail@plt>
   13cc4:	cmp	r7, fp
   13cc8:	cmpeq	r6, sl
   13ccc:	movhi	r2, #1
   13cd0:	movls	r2, #0
   13cd4:	mov	r3, lr
   13cd8:	subs	sl, sl, r6
   13cdc:	sbc	fp, fp, r7
   13ce0:	subs	r0, r0, r4
   13ce4:	sbc	r1, r1, r5
   13ce8:	subs	r0, r0, r2
   13cec:	sbc	r1, r1, lr
   13cf0:	subs	ip, ip, #1
   13cf4:	beq	13d48 <__assert_fail@plt+0x25f4>
   13cf8:	lsrs	r7, r7, #1
   13cfc:	rrx	r6, r6
   13d00:	lsl	r9, r4, #31
   13d04:	mov	r8, #0
   13d08:	orr	r6, r6, r8
   13d0c:	orr	r7, r7, r9
   13d10:	lsrs	r5, r5, #1
   13d14:	rrx	r4, r4
   13d18:	cmp	r5, r1
   13d1c:	cmpeq	r4, r0
   13d20:	bcc	13cc4 <__assert_fail@plt+0x2570>
   13d24:	moveq	r3, #1
   13d28:	movne	r3, r8
   13d2c:	cmp	r7, fp
   13d30:	cmpeq	r6, sl
   13d34:	movhi	r3, #0
   13d38:	andls	r3, r3, #1
   13d3c:	cmp	r3, r8
   13d40:	beq	13cf0 <__assert_fail@plt+0x259c>
   13d44:	b	13cc4 <__assert_fail@plt+0x2570>
   13d48:	mov	r4, sl
   13d4c:	mov	r5, fp
   13d50:	strd	r4, [sp, #104]	; 0x68
   13d54:	ldrd	r6, [sp, #48]	; 0x30
   13d58:	subs	r2, r6, sl
   13d5c:	sbc	r3, r7, fp
   13d60:	cmp	fp, r3
   13d64:	cmpeq	sl, r2
   13d68:	movcc	r2, #1
   13d6c:	movcs	r2, #0
   13d70:	rsbs	r2, r2, #0
   13d74:	sbc	r3, r3, r3
   13d78:	mov	r0, r6
   13d7c:	mov	r1, r7
   13d80:	and	r0, r0, r2
   13d84:	and	r1, r1, r3
   13d88:	mov	r2, r0
   13d8c:	mov	r3, r1
   13d90:	adds	r0, sl, sl
   13d94:	adc	r1, fp, fp
   13d98:	subs	r4, r0, r6
   13d9c:	sbc	r5, r1, r7
   13da0:	adds	r4, r2, r4
   13da4:	adc	r5, r3, r5
   13da8:	strd	r4, [sp, #128]	; 0x80
   13dac:	ldr	r4, [sp, #264]	; 0x108
   13db0:	mov	r5, #0
   13db4:	strd	r4, [sp, #248]	; 0xf8
   13db8:	cmp	r7, r5
   13dbc:	cmpeq	r6, r4
   13dc0:	bls	13df4 <__assert_fail@plt+0x26a0>
   13dc4:	ldrd	r2, [sp, #128]	; 0x80
   13dc8:	mov	r8, r2
   13dcc:	mov	r9, r3
   13dd0:	strd	r2, [sp, #200]	; 0xc8
   13dd4:	mov	r3, #1
   13dd8:	str	r3, [sp, #100]	; 0x64
   13ddc:	mov	fp, r3
   13de0:	ldr	r3, [sp, #264]	; 0x108
   13de4:	add	r3, r3, fp
   13de8:	str	r3, [sp, #268]	; 0x10c
   13dec:	str	fp, [sp, #64]	; 0x40
   13df0:	b	14684 <__assert_fail@plt+0x2f30>
   13df4:	ldr	r3, [pc, #2488]	; 147b4 <__assert_fail@plt+0x3060>
   13df8:	mov	r2, #1472	; 0x5c0
   13dfc:	ldr	r1, [pc, #2488]	; 147bc <__assert_fail@plt+0x3068>
   13e00:	ldr	r0, [pc, #2492]	; 147c4 <__assert_fail@plt+0x3070>
   13e04:	bl	11754 <__assert_fail@plt>
   13e08:	ldr	r3, [sp, #100]	; 0x64
   13e0c:	str	r3, [sp, #64]	; 0x40
   13e10:	str	lr, [sp, #100]	; 0x64
   13e14:	ldrd	r2, [sp, #128]	; 0x80
   13e18:	mov	r8, r2
   13e1c:	mov	r9, r3
   13e20:	strd	r2, [sp, #200]	; 0xc8
   13e24:	b	14000 <__assert_fail@plt+0x28ac>
   13e28:	ldrd	r2, [sp, #48]	; 0x30
   13e2c:	ldrd	r0, [sp, #104]	; 0x68
   13e30:	bl	11888 <__assert_fail@plt+0x134>
   13e34:	cmp	r1, #0
   13e38:	cmpeq	r0, #1
   13e3c:	bne	143c0 <__assert_fail@plt+0x2c6c>
   13e40:	ldrd	r8, [sp, #128]	; 0x80
   13e44:	b	1438c <__assert_fail@plt+0x2c38>
   13e48:	str	r5, [sp, #40]	; 0x28
   13e4c:	mov	r3, #0
   13e50:	str	r3, [sp, #44]	; 0x2c
   13e54:	ldrd	r2, [sp, #40]	; 0x28
   13e58:	adds	r2, r2, r0
   13e5c:	adc	r3, r3, r1
   13e60:	mov	r0, r2
   13e64:	mov	r1, r3
   13e68:	ldrd	r4, [sp, #64]	; 0x40
   13e6c:	subs	r2, r4, r0
   13e70:	sbc	r3, r5, r1
   13e74:	cmp	r5, r1
   13e78:	cmpeq	r4, r0
   13e7c:	bcs	13e94 <__assert_fail@plt+0x2740>
   13e80:	ldrd	r0, [sp, #48]	; 0x30
   13e84:	adds	r0, r0, r2
   13e88:	adc	r1, r1, r3
   13e8c:	mov	r2, r0
   13e90:	mov	r3, r1
   13e94:	ldrd	r0, [sp, #80]	; 0x50
   13e98:	cmp	r1, r3
   13e9c:	cmpeq	r0, r2
   13ea0:	movhi	r0, #1
   13ea4:	movls	r0, #0
   13ea8:	rsbs	r0, r0, #0
   13eac:	sbc	r1, r1, r1
   13eb0:	ldrd	r4, [sp, #48]	; 0x30
   13eb4:	and	r4, r4, r0
   13eb8:	and	r5, r5, r1
   13ebc:	mov	r0, r4
   13ec0:	mov	r1, r5
   13ec4:	ldrd	r4, [sp, #88]	; 0x58
   13ec8:	adds	r4, r4, r2
   13ecc:	adc	r5, r5, r3
   13ed0:	adds	r8, r0, r4
   13ed4:	adc	r9, r1, r5
   13ed8:	add	ip, ip, #1
   13edc:	ldr	r3, [sp, #100]	; 0x64
   13ee0:	cmp	r3, ip
   13ee4:	beq	13fe8 <__assert_fail@plt+0x2894>
   13ee8:	mov	r3, #0
   13eec:	mul	r1, r8, r3
   13ef0:	umull	r4, r5, r8, r8
   13ef4:	add	r5, r5, r1, lsl #1
   13ef8:	umull	r0, r1, r9, r8
   13efc:	mla	r1, r9, r3, r1
   13f00:	umull	r6, r7, r9, r9
   13f04:	adds	r2, r0, r0
   13f08:	adc	r3, r1, r1
   13f0c:	str	r5, [sp, #16]
   13f10:	mov	r8, #0
   13f14:	str	r8, [sp, #20]
   13f18:	ldrd	r8, [sp, #16]
   13f1c:	adds	r8, r8, r2
   13f20:	adc	r9, r9, r3
   13f24:	mov	r2, r8
   13f28:	mov	r3, r9
   13f2c:	cmp	r1, r9
   13f30:	cmpeq	r0, r8
   13f34:	bls	13f40 <__assert_fail@plt+0x27ec>
   13f38:	adds	r6, r6, #0
   13f3c:	adc	r7, r7, #1
   13f40:	str	r3, [sp, #8]
   13f44:	mov	r1, #0
   13f48:	str	r1, [sp, #12]
   13f4c:	ldrd	r8, [sp, #8]
   13f50:	adds	r0, r8, r6
   13f54:	adc	r1, r9, r7
   13f58:	strd	r0, [sp, #64]	; 0x40
   13f5c:	str	r2, [sp, #28]
   13f60:	str	r9, [sp, #24]
   13f64:	ldrd	r2, [sp, #24]
   13f68:	adds	r2, r2, r4
   13f6c:	adc	r3, r3, #0
   13f70:	ldrd	r4, [sp, #72]	; 0x48
   13f74:	mul	r0, r2, r5
   13f78:	mla	r0, r4, r3, r0
   13f7c:	umull	r2, r3, r2, r4
   13f80:	add	r0, r0, r3
   13f84:	mov	r3, #0
   13f88:	umull	r6, r7, sl, r0
   13f8c:	mla	r7, r0, fp, r7
   13f90:	umull	r0, r1, lr, r0
   13f94:	umull	r4, r5, lr, r2
   13f98:	mla	r5, lr, r3, r5
   13f9c:	adds	r4, r4, r6
   13fa0:	adc	r5, r5, r7
   13fa4:	mul	r8, sl, r3
   13fa8:	mla	r8, r2, fp, r8
   13fac:	umull	r2, r3, sl, r2
   13fb0:	add	r3, r8, r3
   13fb4:	str	r3, [sp, #32]
   13fb8:	ldr	r3, [sp, #12]
   13fbc:	str	r3, [sp, #36]	; 0x24
   13fc0:	ldrd	r2, [sp, #32]
   13fc4:	adds	r2, r2, r4
   13fc8:	adc	r3, r3, r5
   13fcc:	mov	r5, r3
   13fd0:	cmp	r7, r3
   13fd4:	cmpeq	r6, r2
   13fd8:	bls	13e48 <__assert_fail@plt+0x26f4>
   13fdc:	adds	r0, r0, #0
   13fe0:	adc	r1, r1, #1
   13fe4:	b	13e48 <__assert_fail@plt+0x26f4>
   13fe8:	str	ip, [sp, #64]	; 0x40
   13fec:	ldr	lr, [sp, #200]	; 0xc8
   13ff0:	str	lr, [sp, #100]	; 0x64
   13ff4:	ldrd	r2, [sp, #128]	; 0x80
   13ff8:	strd	r2, [sp, #200]	; 0xc8
   13ffc:	strd	r8, [sp, #128]	; 0x80
   14000:	ldrd	r4, [sp, #128]	; 0x80
   14004:	mov	r3, #0
   14008:	mul	ip, r4, r3
   1400c:	umull	r0, r1, r4, r4
   14010:	add	r1, r1, ip, lsl #1
   14014:	umull	r6, r7, r5, r4
   14018:	mla	r7, r5, r3, r7
   1401c:	umull	sl, fp, r5, r5
   14020:	adds	r2, r6, r6
   14024:	adc	r3, r7, r7
   14028:	str	r1, [sp, #136]	; 0x88
   1402c:	mov	ip, #0
   14030:	str	ip, [sp, #140]	; 0x8c
   14034:	ldrd	r4, [sp, #136]	; 0x88
   14038:	adds	r4, r4, r2
   1403c:	adc	r5, r5, r3
   14040:	mov	r2, r4
   14044:	mov	r3, r5
   14048:	cmp	r7, r5
   1404c:	cmpeq	r6, r4
   14050:	bls	1405c <__assert_fail@plt+0x2908>
   14054:	adds	sl, sl, #0
   14058:	adc	fp, fp, #1
   1405c:	str	r3, [sp, #112]	; 0x70
   14060:	mov	ip, #0
   14064:	str	ip, [sp, #116]	; 0x74
   14068:	ldrd	r6, [sp, #112]	; 0x70
   1406c:	adds	r4, r6, sl
   14070:	adc	r5, r7, fp
   14074:	mov	sl, r4
   14078:	mov	fp, r5
   1407c:	str	r2, [sp, #148]	; 0x94
   14080:	str	r7, [sp, #144]	; 0x90
   14084:	ldrd	r2, [sp, #144]	; 0x90
   14088:	adds	r2, r2, r0
   1408c:	adc	r3, r3, #0
   14090:	ldrd	r4, [sp, #72]	; 0x48
   14094:	mul	r0, r2, r5
   14098:	mla	r0, r4, r3, r0
   1409c:	umull	r2, r3, r2, r4
   140a0:	add	r0, r0, r3
   140a4:	mov	r3, #0
   140a8:	ldrd	r4, [sp, #56]	; 0x38
   140ac:	umull	r6, r7, r0, r4
   140b0:	mla	r7, r0, r5, r7
   140b4:	ldr	ip, [sp, #256]	; 0x100
   140b8:	umull	r4, r5, r0, ip
   140bc:	umull	r0, r1, ip, r2
   140c0:	mla	r1, ip, r3, r1
   140c4:	adds	r0, r0, r6
   140c8:	adc	r1, r1, r7
   140cc:	ldr	ip, [sp, #60]	; 0x3c
   140d0:	mul	ip, r2, ip
   140d4:	ldr	lr, [sp, #56]	; 0x38
   140d8:	mla	ip, lr, r3, ip
   140dc:	umull	r2, r3, r2, lr
   140e0:	add	r3, ip, r3
   140e4:	str	r3, [sp, #152]	; 0x98
   140e8:	ldr	r3, [sp, #116]	; 0x74
   140ec:	str	r3, [sp, #156]	; 0x9c
   140f0:	ldrd	r2, [sp, #152]	; 0x98
   140f4:	adds	r2, r2, r0
   140f8:	adc	r3, r3, r1
   140fc:	mov	r1, r3
   14100:	cmp	r7, r3
   14104:	cmpeq	r6, r2
   14108:	bls	14114 <__assert_fail@plt+0x29c0>
   1410c:	adds	r4, r4, #0
   14110:	adc	r5, r5, #1
   14114:	str	r1, [sp, #160]	; 0xa0
   14118:	mov	r3, #0
   1411c:	str	r3, [sp, #164]	; 0xa4
   14120:	ldrd	r2, [sp, #160]	; 0xa0
   14124:	adds	r2, r2, r4
   14128:	adc	r3, r3, r5
   1412c:	mov	r4, r2
   14130:	mov	r5, r3
   14134:	subs	r2, sl, r4
   14138:	sbc	r3, fp, r5
   1413c:	cmp	fp, r5
   14140:	cmpeq	sl, r4
   14144:	bcs	1415c <__assert_fail@plt+0x2a08>
   14148:	ldrd	r0, [sp, #48]	; 0x30
   1414c:	adds	r0, r0, r2
   14150:	adc	r1, r1, r3
   14154:	mov	r2, r0
   14158:	mov	r3, r1
   1415c:	ldrd	r0, [sp, #80]	; 0x50
   14160:	cmp	r1, r3
   14164:	cmpeq	r0, r2
   14168:	movhi	r0, #1
   1416c:	movls	r0, #0
   14170:	rsbs	r0, r0, #0
   14174:	sbc	r1, r1, r1
   14178:	ldrd	r6, [sp, #48]	; 0x30
   1417c:	mov	r4, r6
   14180:	mov	r5, r7
   14184:	and	r4, r4, r0
   14188:	and	r5, r5, r1
   1418c:	mov	r0, r4
   14190:	mov	r1, r5
   14194:	ldrd	r4, [sp, #88]	; 0x58
   14198:	adds	r4, r4, r2
   1419c:	adc	r5, r5, r3
   141a0:	adds	r4, r0, r4
   141a4:	adc	r5, r1, r5
   141a8:	mov	sl, r4
   141ac:	mov	fp, r5
   141b0:	strd	sl, [sp, #128]	; 0x80
   141b4:	ldrd	r0, [sp, #200]	; 0xc8
   141b8:	mov	r2, r0
   141bc:	cmp	r1, r5
   141c0:	cmpeq	r0, r4
   141c4:	movcc	r2, #1
   141c8:	movcs	r2, #0
   141cc:	rsbs	r2, r2, #0
   141d0:	sbc	r3, r1, r1
   141d4:	mov	r4, r6
   141d8:	mov	r5, r7
   141dc:	and	r4, r4, r2
   141e0:	and	r5, r5, r3
   141e4:	mov	r2, r4
   141e8:	mov	r3, r5
   141ec:	subs	r0, r0, sl
   141f0:	sbc	r1, r1, fp
   141f4:	adds	r2, r2, r0
   141f8:	adc	r3, r3, r1
   141fc:	ldrd	sl, [sp, #104]	; 0x68
   14200:	mov	r4, sl
   14204:	mov	r5, #0
   14208:	mov	r0, r2
   1420c:	mov	r1, #0
   14210:	mul	r2, sl, r1
   14214:	mla	r2, r0, r5, r2
   14218:	umull	r6, r7, sl, r0
   1421c:	add	r7, r2, r7
   14220:	umull	sl, fp, fp, r0
   14224:	ldr	ip, [sp, #108]	; 0x6c
   14228:	mla	fp, ip, r1, fp
   1422c:	umull	r0, r1, ip, r3
   14230:	strd	r0, [sp, #104]	; 0x68
   14234:	umull	r0, r1, r3, r4
   14238:	mla	r1, r3, r5, r1
   1423c:	adds	r0, r0, sl
   14240:	adc	r1, r1, fp
   14244:	str	r7, [sp, #168]	; 0xa8
   14248:	mov	r3, #0
   1424c:	str	r3, [sp, #172]	; 0xac
   14250:	ldrd	r4, [sp, #168]	; 0xa8
   14254:	adds	r4, r4, r0
   14258:	adc	r5, r5, r1
   1425c:	mov	r0, r4
   14260:	mov	r1, r5
   14264:	cmp	fp, r5
   14268:	cmpeq	sl, r4
   1426c:	bls	14280 <__assert_fail@plt+0x2b2c>
   14270:	ldrd	r2, [sp, #104]	; 0x68
   14274:	adds	r2, r2, #0
   14278:	adc	r3, r3, #1
   1427c:	strd	r2, [sp, #104]	; 0x68
   14280:	str	r1, [sp, #120]	; 0x78
   14284:	mov	r3, #0
   14288:	str	r3, [sp, #124]	; 0x7c
   1428c:	ldrd	r2, [sp, #120]	; 0x78
   14290:	ldrd	r4, [sp, #104]	; 0x68
   14294:	adds	sl, r2, r4
   14298:	adc	fp, r3, r5
   1429c:	str	r0, [sp, #180]	; 0xb4
   142a0:	str	r3, [sp, #176]	; 0xb0
   142a4:	ldrd	r2, [sp, #176]	; 0xb0
   142a8:	adds	r2, r2, r6
   142ac:	adc	r3, r3, #0
   142b0:	ldrd	r0, [sp, #72]	; 0x48
   142b4:	mul	r4, r2, r1
   142b8:	mla	r4, r0, r3, r4
   142bc:	umull	r2, r3, r2, r0
   142c0:	add	r4, r4, r3
   142c4:	mov	r3, #0
   142c8:	ldrd	r0, [sp, #56]	; 0x38
   142cc:	umull	r6, r7, r4, r0
   142d0:	mla	r7, r4, r1, r7
   142d4:	ldr	ip, [sp, #256]	; 0x100
   142d8:	umull	r4, r5, r4, ip
   142dc:	umull	r0, r1, r2, ip
   142e0:	mla	r1, ip, r3, r1
   142e4:	adds	r0, r0, r6
   142e8:	adc	r1, r1, r7
   142ec:	ldr	ip, [sp, #60]	; 0x3c
   142f0:	mul	ip, r2, ip
   142f4:	ldr	lr, [sp, #56]	; 0x38
   142f8:	mla	ip, lr, r3, ip
   142fc:	umull	r2, r3, r2, lr
   14300:	add	r3, ip, r3
   14304:	str	r3, [sp, #184]	; 0xb8
   14308:	ldr	r3, [sp, #124]	; 0x7c
   1430c:	str	r3, [sp, #188]	; 0xbc
   14310:	ldrd	r2, [sp, #184]	; 0xb8
   14314:	adds	r2, r2, r0
   14318:	adc	r3, r3, r1
   1431c:	mov	r1, r3
   14320:	cmp	r7, r3
   14324:	cmpeq	r6, r2
   14328:	bls	14334 <__assert_fail@plt+0x2be0>
   1432c:	adds	r4, r4, #0
   14330:	adc	r5, r5, #1
   14334:	str	r1, [sp, #192]	; 0xc0
   14338:	mov	r3, #0
   1433c:	str	r3, [sp, #196]	; 0xc4
   14340:	ldrd	r2, [sp, #192]	; 0xc0
   14344:	adds	r2, r2, r4
   14348:	adc	r3, r3, r5
   1434c:	mov	r4, r2
   14350:	mov	r5, r3
   14354:	subs	r2, sl, r4
   14358:	sbc	r3, fp, r5
   1435c:	strd	r2, [sp, #104]	; 0x68
   14360:	cmp	fp, r5
   14364:	cmpeq	sl, r4
   14368:	bcs	1437c <__assert_fail@plt+0x2c28>
   1436c:	ldrd	r0, [sp, #48]	; 0x30
   14370:	adds	r0, r0, r2
   14374:	adc	r1, r1, r3
   14378:	strd	r0, [sp, #104]	; 0x68
   1437c:	ldr	r3, [sp, #64]	; 0x40
   14380:	and	r3, r3, #31
   14384:	cmp	r3, #1
   14388:	beq	13e28 <__assert_fail@plt+0x26d4>
   1438c:	ldr	r3, [sp, #64]	; 0x40
   14390:	subs	ip, r3, #1
   14394:	str	ip, [sp, #64]	; 0x40
   14398:	bne	14000 <__assert_fail@plt+0x28ac>
   1439c:	ldr	r3, [sp, #100]	; 0x64
   143a0:	lsl	lr, r3, #1
   143a4:	cmp	r3, #0
   143a8:	beq	13e08 <__assert_fail@plt+0x26b4>
   143ac:	ldrd	r8, [sp, #128]	; 0x80
   143b0:	str	lr, [sp, #200]	; 0xc8
   143b4:	ldrd	sl, [sp, #56]	; 0x38
   143b8:	ldr	lr, [sp, #256]	; 0x100
   143bc:	b	13ee8 <__assert_fail@plt+0x2794>
   143c0:	ldrd	sl, [sp, #56]	; 0x38
   143c4:	b	144b8 <__assert_fail@plt+0x2d64>
   143c8:	str	r7, [sp, #240]	; 0xf0
   143cc:	mov	r3, #0
   143d0:	str	r3, [sp, #244]	; 0xf4
   143d4:	ldrd	r2, [sp, #240]	; 0xf0
   143d8:	adds	r2, r2, r0
   143dc:	adc	r3, r3, r1
   143e0:	mov	r0, r2
   143e4:	mov	r1, r3
   143e8:	subs	r2, r4, r0
   143ec:	sbc	r3, r5, r1
   143f0:	cmp	r5, r1
   143f4:	cmpeq	r4, r0
   143f8:	bcs	14410 <__assert_fail@plt+0x2cbc>
   143fc:	ldrd	r0, [sp, #48]	; 0x30
   14400:	adds	r0, r0, r2
   14404:	adc	r1, r1, r3
   14408:	mov	r2, r0
   1440c:	mov	r3, r1
   14410:	ldrd	r0, [sp, #80]	; 0x50
   14414:	cmp	r1, r3
   14418:	cmpeq	r0, r2
   1441c:	movhi	r0, #1
   14420:	movls	r0, #0
   14424:	rsbs	r0, r0, #0
   14428:	sbc	r1, r1, r1
   1442c:	ldrd	r6, [sp, #48]	; 0x30
   14430:	mov	r4, r6
   14434:	mov	r5, r7
   14438:	and	r4, r4, r0
   1443c:	and	r5, r5, r1
   14440:	mov	r0, r4
   14444:	mov	r1, r5
   14448:	ldrd	r4, [sp, #88]	; 0x58
   1444c:	adds	r4, r4, r2
   14450:	adc	r5, r5, r3
   14454:	adds	r8, r0, r4
   14458:	adc	r9, r1, r5
   1445c:	ldrd	r4, [sp, #200]	; 0xc8
   14460:	cmp	r5, r9
   14464:	cmpeq	r4, r8
   14468:	movcc	r0, #1
   1446c:	movcs	r0, #0
   14470:	rsbs	r0, r0, #0
   14474:	sbc	r1, r1, r1
   14478:	mov	r2, r6
   1447c:	mov	r3, r7
   14480:	and	r6, r6, r0
   14484:	and	r7, r7, r1
   14488:	mov	r0, r6
   1448c:	mov	r1, r7
   14490:	subs	r6, r4, r8
   14494:	sbc	r7, r5, r9
   14498:	adds	r0, r0, r6
   1449c:	adc	r1, r1, r7
   144a0:	bl	11888 <__assert_fail@plt+0x134>
   144a4:	mov	r6, r0
   144a8:	mov	r7, r1
   144ac:	cmp	r1, #0
   144b0:	cmpeq	r0, #1
   144b4:	bne	145c0 <__assert_fail@plt+0x2e6c>
   144b8:	mov	r3, #0
   144bc:	mul	r1, r8, r3
   144c0:	umull	r6, r7, r8, r8
   144c4:	add	r7, r7, r1, lsl #1
   144c8:	umull	r0, r1, r9, r8
   144cc:	mla	r1, r9, r3, r1
   144d0:	umull	r4, r5, r9, r9
   144d4:	adds	r2, r0, r0
   144d8:	adc	r3, r1, r1
   144dc:	str	r7, [sp, #216]	; 0xd8
   144e0:	mov	ip, #0
   144e4:	str	ip, [sp, #220]	; 0xdc
   144e8:	ldrd	r8, [sp, #216]	; 0xd8
   144ec:	adds	r8, r8, r2
   144f0:	adc	r9, r9, r3
   144f4:	mov	r2, r8
   144f8:	mov	r3, r9
   144fc:	cmp	r1, r9
   14500:	cmpeq	r0, r8
   14504:	bls	14510 <__assert_fail@plt+0x2dbc>
   14508:	adds	r4, r4, #0
   1450c:	adc	r5, r5, #1
   14510:	str	r3, [sp, #208]	; 0xd0
   14514:	mov	r1, #0
   14518:	str	r1, [sp, #212]	; 0xd4
   1451c:	ldrd	r8, [sp, #208]	; 0xd0
   14520:	adds	r0, r8, r4
   14524:	adc	r1, r9, r5
   14528:	mov	r4, r0
   1452c:	mov	r5, r1
   14530:	str	r2, [sp, #228]	; 0xe4
   14534:	str	r9, [sp, #224]	; 0xe0
   14538:	ldrd	r2, [sp, #224]	; 0xe0
   1453c:	adds	r2, r2, r6
   14540:	adc	r3, r3, #0
   14544:	ldrd	r6, [sp, #72]	; 0x48
   14548:	mul	r0, r2, r7
   1454c:	mla	r0, r6, r3, r0
   14550:	umull	r2, r3, r2, r6
   14554:	add	r0, r0, r3
   14558:	mov	r3, #0
   1455c:	umull	r8, r9, sl, r0
   14560:	mla	r9, r0, fp, r9
   14564:	ldr	ip, [sp, #256]	; 0x100
   14568:	umull	r0, r1, ip, r0
   1456c:	umull	r6, r7, ip, r2
   14570:	mla	r7, ip, r3, r7
   14574:	adds	r6, r6, r8
   14578:	adc	r7, r7, r9
   1457c:	mul	ip, sl, r3
   14580:	mla	ip, r2, fp, ip
   14584:	umull	r2, r3, sl, r2
   14588:	add	r3, ip, r3
   1458c:	str	r3, [sp, #232]	; 0xe8
   14590:	ldr	r3, [sp, #212]	; 0xd4
   14594:	str	r3, [sp, #236]	; 0xec
   14598:	ldrd	r2, [sp, #232]	; 0xe8
   1459c:	adds	r2, r2, r6
   145a0:	adc	r3, r3, r7
   145a4:	mov	r7, r3
   145a8:	cmp	r9, r3
   145ac:	cmpeq	r8, r2
   145b0:	bls	143c8 <__assert_fail@plt+0x2c74>
   145b4:	adds	r0, r0, #0
   145b8:	adc	r1, r1, #1
   145bc:	b	143c8 <__assert_fail@plt+0x2c74>
   145c0:	ldrd	r2, [sp, #48]	; 0x30
   145c4:	cmp	r1, r3
   145c8:	cmpeq	r0, r2
   145cc:	beq	14768 <__assert_fail@plt+0x3014>
   145d0:	mov	r2, r0
   145d4:	mov	r3, r1
   145d8:	ldrd	r0, [sp, #48]	; 0x30
   145dc:	bl	1de78 <__assert_fail@plt+0xc724>
   145e0:	strd	r0, [sp, #48]	; 0x30
   145e4:	mov	r0, r6
   145e8:	mov	r1, r7
   145ec:	bl	13698 <__assert_fail@plt+0x1f44>
   145f0:	cmp	r0, #0
   145f4:	bne	14780 <__assert_fail@plt+0x302c>
   145f8:	ldr	r3, [sp, #260]	; 0x104
   145fc:	ldr	r2, [sp, #268]	; 0x10c
   14600:	mov	r0, r6
   14604:	mov	r1, r7
   14608:	bl	13c60 <__assert_fail@plt+0x250c>
   1460c:	ldrd	r0, [sp, #48]	; 0x30
   14610:	bl	13698 <__assert_fail@plt+0x1f44>
   14614:	cmp	r0, #0
   14618:	bne	1479c <__assert_fail@plt+0x3048>
   1461c:	ldrd	r4, [sp, #48]	; 0x30
   14620:	mov	r2, r4
   14624:	mov	r3, r5
   14628:	ldrd	r0, [sp, #128]	; 0x80
   1462c:	bl	1de78 <__assert_fail@plt+0xc724>
   14630:	strd	r2, [sp, #128]	; 0x80
   14634:	mov	r2, r4
   14638:	mov	r3, r5
   1463c:	ldrd	r0, [sp, #200]	; 0xc8
   14640:	bl	1de78 <__assert_fail@plt+0xc724>
   14644:	strd	r2, [sp, #200]	; 0xc8
   14648:	mov	r2, r4
   1464c:	mov	r3, r5
   14650:	mov	r0, r8
   14654:	mov	r1, r9
   14658:	bl	1de78 <__assert_fail@plt+0xc724>
   1465c:	mov	r8, r2
   14660:	mov	r9, r3
   14664:	cmp	r5, #0
   14668:	cmpeq	r4, #1
   1466c:	beq	14778 <__assert_fail@plt+0x3024>
   14670:	ldrd	r2, [sp, #248]	; 0xf8
   14674:	ldrd	r0, [sp, #48]	; 0x30
   14678:	cmp	r3, r1
   1467c:	cmpeq	r2, r0
   14680:	bcs	13df4 <__assert_fail@plt+0x26a0>
   14684:	ldrd	r4, [sp, #48]	; 0x30
   14688:	mov	r2, r4
   1468c:	mov	r3, r5
   14690:	lsrs	r3, r3, #1
   14694:	rrx	r2, r2
   14698:	and	r2, r2, #127	; 0x7f
   1469c:	ldr	r1, [pc, #292]	; 147c8 <__assert_fail@plt+0x3074>
   146a0:	add	r2, r1, r2
   146a4:	ldrb	r2, [r2, #744]	; 0x2e8
   146a8:	mov	r3, #0
   146ac:	adds	r0, r2, r2
   146b0:	adc	r1, r3, r3
   146b4:	umull	r2, r3, r2, r2
   146b8:	mul	ip, r2, r5
   146bc:	mov	lr, r4
   146c0:	mla	ip, r4, r3, ip
   146c4:	umull	r2, r3, r2, r4
   146c8:	add	r3, ip, r3
   146cc:	subs	r2, r0, r2
   146d0:	sbc	r3, r1, r3
   146d4:	adds	r0, r2, r2
   146d8:	adc	r1, r3, r3
   146dc:	mul	ip, r2, r3
   146e0:	umull	r2, r3, r2, r2
   146e4:	add	r3, r3, ip, lsl #1
   146e8:	mul	ip, r2, r5
   146ec:	mla	ip, r4, r3, ip
   146f0:	umull	r2, r3, r2, r4
   146f4:	add	r3, ip, r3
   146f8:	subs	r2, r0, r2
   146fc:	sbc	r3, r1, r3
   14700:	adds	r0, r2, r2
   14704:	adc	r1, r3, r3
   14708:	mul	ip, r2, r3
   1470c:	umull	r2, r3, r2, r2
   14710:	add	r3, r3, ip, lsl #1
   14714:	mul	ip, r2, r5
   14718:	mla	ip, r4, r3, ip
   1471c:	umull	r2, r3, r2, r4
   14720:	add	r3, ip, r3
   14724:	subs	r0, r0, r2
   14728:	sbc	r1, r1, r3
   1472c:	strd	r0, [sp, #72]	; 0x48
   14730:	str	r5, [sp, #256]	; 0x100
   14734:	mov	r1, r5
   14738:	mov	r2, r4
   1473c:	mov	r3, #0
   14740:	strd	r2, [sp, #56]	; 0x38
   14744:	mov	r3, r5
   14748:	ldrd	r4, [sp, #248]	; 0xf8
   1474c:	subs	r0, lr, r4
   14750:	sbc	r1, r1, r5
   14754:	strd	r0, [sp, #80]	; 0x50
   14758:	subs	r0, r4, lr
   1475c:	sbc	r1, r5, r3
   14760:	strd	r0, [sp, #88]	; 0x58
   14764:	b	14000 <__assert_fail@plt+0x28ac>
   14768:	ldr	r3, [sp, #260]	; 0x104
   1476c:	ldr	r2, [sp, #264]	; 0x108
   14770:	add	r2, r2, #1
   14774:	bl	13c60 <__assert_fail@plt+0x250c>
   14778:	add	sp, sp, #276	; 0x114
   1477c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14780:	mov	r3, #1
   14784:	str	r3, [sp]
   14788:	mov	r2, r6
   1478c:	mov	r3, r7
   14790:	ldr	r0, [sp, #260]	; 0x104
   14794:	bl	11938 <__assert_fail@plt+0x1e4>
   14798:	b	1460c <__assert_fail@plt+0x2eb8>
   1479c:	mov	r3, #1
   147a0:	str	r3, [sp]
   147a4:	ldrd	r2, [sp, #48]	; 0x30
   147a8:	ldr	r0, [sp, #260]	; 0x104
   147ac:	bl	11938 <__assert_fail@plt+0x1e4>
   147b0:	b	14778 <__assert_fail@plt+0x3024>
   147b4:	andeq	lr, r1, r8, ror #7
   147b8:			; <UNDEFINED> instruction: 0x000005ba
   147bc:	andeq	r1, r2, r0, ror #2
   147c0:	andeq	r1, r2, ip, asr #4
   147c4:	andeq	r1, r2, r8, asr r2
   147c8:	andeq	lr, r1, r8, ror r0
   147cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147d0:	sub	sp, sp, #76	; 0x4c
   147d4:	strd	r0, [sp, #48]	; 0x30
   147d8:	mov	r8, r2
   147dc:	mov	r9, r3
   147e0:	mov	r3, #0
   147e4:	ldr	r2, [sp, #112]	; 0x70
   147e8:	strb	r3, [r2, #250]	; 0xfa
   147ec:	mov	r2, #0
   147f0:	mov	r3, #0
   147f4:	ldr	ip, [sp, #112]	; 0x70
   147f8:	strd	r2, [ip, #8]
   147fc:	mov	r3, r1
   14800:	orrs	r3, r0, r3
   14804:	moveq	r3, #1
   14808:	movne	r3, #0
   1480c:	cmp	r9, #0
   14810:	cmpeq	r8, #1
   14814:	movhi	r3, #0
   14818:	andls	r3, r3, #1
   1481c:	cmp	r3, #0
   14820:	beq	1482c <__assert_fail@plt+0x30d8>
   14824:	add	sp, sp, #76	; 0x4c
   14828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1482c:	and	r2, r8, #1
   14830:	mov	r3, #0
   14834:	orrs	r3, r2, r3
   14838:	bne	148c0 <__assert_fail@plt+0x316c>
   1483c:	orrs	r3, r8, r9
   14840:	bne	148f8 <__assert_fail@plt+0x31a4>
   14844:	ldrd	r0, [sp, #48]	; 0x30
   14848:	and	r2, r0, #1
   1484c:	mov	r3, #0
   14850:	orrs	r3, r2, r3
   14854:	bne	148f0 <__assert_fail@plt+0x319c>
   14858:	mov	r2, r0
   1485c:	mov	r3, r1
   14860:	mov	ip, #0
   14864:	lsrs	r3, r3, #1
   14868:	rrx	r2, r2
   1486c:	add	ip, ip, #1
   14870:	and	r0, r2, #1
   14874:	mov	r1, #0
   14878:	orrs	r1, r0, r1
   1487c:	beq	14864 <__assert_fail@plt+0x3110>
   14880:	rsb	r1, ip, #32
   14884:	sub	r2, ip, #32
   14888:	ldrd	r4, [sp, #48]	; 0x30
   1488c:	lsr	r3, r4, ip
   14890:	orr	r3, r3, r5, lsl r1
   14894:	orr	r3, r3, r5, lsr r2
   14898:	lsr	r2, r5, ip
   1489c:	add	ip, ip, #64	; 0x40
   148a0:	strd	r8, [sp, #48]	; 0x30
   148a4:	mov	r8, r3
   148a8:	mov	r9, r2
   148ac:	str	ip, [sp]
   148b0:	mov	r2, #2
   148b4:	mov	r3, #0
   148b8:	ldr	r0, [sp, #112]	; 0x70
   148bc:	bl	11938 <__assert_fail@plt+0x1e4>
   148c0:	ldrd	r2, [sp, #48]	; 0x30
   148c4:	orrs	r3, r2, r3
   148c8:	beq	14b18 <__assert_fail@plt+0x33c4>
   148cc:	ldr	sl, [pc, #1844]	; 15008 <__assert_fail@plt+0x38b4>
   148d0:	mov	r2, #3
   148d4:	mov	r3, #0
   148d8:	strd	r2, [sp, #8]
   148dc:	mov	fp, #0
   148e0:	str	fp, [sp, #60]	; 0x3c
   148e4:	strd	r8, [sp, #64]	; 0x40
   148e8:	mov	r9, sl
   148ec:	b	14a30 <__assert_fail@plt+0x32dc>
   148f0:	mov	ip, #0
   148f4:	b	14880 <__assert_fail@plt+0x312c>
   148f8:	mov	r2, r8
   148fc:	mov	r3, r9
   14900:	mov	ip, #0
   14904:	lsrs	r3, r3, #1
   14908:	rrx	r2, r2
   1490c:	add	ip, ip, #1
   14910:	and	r0, r2, #1
   14914:	mov	r1, #0
   14918:	orrs	r1, r0, r1
   1491c:	beq	14904 <__assert_fail@plt+0x31b0>
   14920:	rsb	r3, ip, #64	; 0x40
   14924:	sub	r1, r3, #32
   14928:	rsb	r2, r3, #32
   1492c:	ldrd	r6, [sp, #48]	; 0x30
   14930:	lsl	r5, r7, r3
   14934:	orr	r5, r5, r6, lsl r1
   14938:	orr	r5, r5, r6, lsr r2
   1493c:	lsl	r4, r6, r3
   14940:	rsb	r0, ip, #32
   14944:	sub	r1, ip, #32
   14948:	lsr	r2, r8, ip
   1494c:	orr	r2, r2, r9, lsl r0
   14950:	orr	r2, r2, r9, lsr r1
   14954:	lsr	r3, r9, ip
   14958:	orr	r8, r4, r2
   1495c:	orr	r9, r5, r3
   14960:	lsr	r3, r6, ip
   14964:	orr	r3, r3, r7, lsl r0
   14968:	orr	r3, r3, r7, lsr r1
   1496c:	lsr	r2, r7, ip
   14970:	str	r3, [sp, #48]	; 0x30
   14974:	str	r2, [sp, #52]	; 0x34
   14978:	b	148ac <__assert_fail@plt+0x3158>
   1497c:	str	r7, [sp, #32]
   14980:	mov	r1, #0
   14984:	str	r1, [sp, #36]	; 0x24
   14988:	ldrd	r0, [sp, #32]
   1498c:	adds	r0, r0, r2
   14990:	adc	r1, r1, r3
   14994:	mov	r2, r0
   14998:	mov	r3, r1
   1499c:	ldrd	r0, [sp, #48]	; 0x30
   149a0:	cmp	r3, r1
   149a4:	cmpeq	r2, r0
   149a8:	bhi	149d8 <__assert_fail@plt+0x3284>
   149ac:	subs	r6, r0, r2
   149b0:	sbc	r7, r1, r3
   149b4:	mul	ip, r6, ip
   149b8:	mla	ip, lr, r7, ip
   149bc:	umull	r6, r7, r6, lr
   149c0:	add	r7, ip, r7
   149c4:	ldr	r3, [sp, #56]	; 0x38
   149c8:	ldrd	r2, [r3, #8]
   149cc:	cmp	r7, r3
   149d0:	cmpeq	r6, r2
   149d4:	bls	14ad4 <__assert_fail@plt+0x3380>
   149d8:	ldr	r9, [sp, #44]	; 0x2c
   149dc:	ldr	r3, [sp, #60]	; 0x3c
   149e0:	add	r1, r3, #1
   149e4:	str	r1, [sp, #60]	; 0x3c
   149e8:	ldr	r3, [pc, #1564]	; 1500c <__assert_fail@plt+0x38b8>
   149ec:	ldrb	r2, [r1, r3]
   149f0:	mov	r3, #0
   149f4:	ldrd	r4, [sp, #8]
   149f8:	adds	r4, r4, r2
   149fc:	adc	r5, r5, r3
   14a00:	strd	r4, [sp, #8]
   14a04:	ldrd	r2, [sp, #48]	; 0x30
   14a08:	orr	r2, r2, r3
   14a0c:	ldr	r3, [pc, #1532]	; 15010 <__assert_fail@plt+0x38bc>
   14a10:	cmp	r1, r3
   14a14:	movhi	r3, #0
   14a18:	movls	r3, #1
   14a1c:	cmp	r2, #0
   14a20:	moveq	r3, #0
   14a24:	add	r9, r9, #16
   14a28:	cmp	r3, #0
   14a2c:	beq	14af8 <__assert_fail@plt+0x33a4>
   14a30:	ldrd	r4, [sp, #8]
   14a34:	mov	sl, r5
   14a38:	mov	r5, #0
   14a3c:	str	r9, [sp, #44]	; 0x2c
   14a40:	ldr	r3, [sp, #44]	; 0x2c
   14a44:	str	r3, [sp, #56]	; 0x38
   14a48:	ldr	lr, [r3]
   14a4c:	ldr	ip, [r3, #4]
   14a50:	ldrd	r0, [sp, #64]	; 0x40
   14a54:	mul	r2, lr, r1
   14a58:	mla	r2, ip, r0, r2
   14a5c:	umull	r0, r1, lr, r0
   14a60:	strd	r0, [sp, #16]
   14a64:	add	r2, r2, r1
   14a68:	str	r2, [sp, #20]
   14a6c:	ldrd	r0, [sp, #16]
   14a70:	mov	r1, #0
   14a74:	umull	r8, r9, r2, r4
   14a78:	mla	r9, r2, r5, r9
   14a7c:	umull	r2, r3, r2, sl
   14a80:	umull	r6, r7, sl, r0
   14a84:	mla	r7, sl, r1, r7
   14a88:	adds	r6, r6, r8
   14a8c:	adc	r7, r7, r9
   14a90:	mul	fp, r0, r5
   14a94:	mla	fp, r4, r1, fp
   14a98:	umull	r0, r1, r0, r4
   14a9c:	add	r1, fp, r1
   14aa0:	str	r1, [sp, #24]
   14aa4:	mov	r1, #0
   14aa8:	str	r1, [sp, #28]
   14aac:	ldrd	r0, [sp, #24]
   14ab0:	adds	r0, r0, r6
   14ab4:	adc	r1, r1, r7
   14ab8:	mov	r7, r1
   14abc:	cmp	r9, r1
   14ac0:	cmpeq	r8, r0
   14ac4:	bls	1497c <__assert_fail@plt+0x3228>
   14ac8:	adds	r2, r2, #0
   14acc:	adc	r3, r3, #1
   14ad0:	b	1497c <__assert_fail@plt+0x3228>
   14ad4:	mov	r3, #1
   14ad8:	str	r3, [sp]
   14adc:	ldrd	r2, [sp, #8]
   14ae0:	ldr	r0, [sp, #112]	; 0x70
   14ae4:	bl	11938 <__assert_fail@plt+0x1e4>
   14ae8:	strd	r6, [sp, #48]	; 0x30
   14aec:	ldrd	r2, [sp, #16]
   14af0:	strd	r2, [sp, #64]	; 0x40
   14af4:	b	14a40 <__assert_fail@plt+0x32ec>
   14af8:	ldr	fp, [sp, #60]	; 0x3c
   14afc:	ldrd	r8, [sp, #64]	; 0x40
   14b00:	cmp	fp, #668	; 0x29c
   14b04:	bcs	14f6c <__assert_fail@plt+0x3818>
   14b08:	ldr	r3, [pc, #1272]	; 15008 <__assert_fail@plt+0x38b4>
   14b0c:	add	r5, r3, fp, lsl #4
   14b10:	add	sl, fp, #1
   14b14:	b	14d9c <__assert_fail@plt+0x3648>
   14b18:	mov	fp, #0
   14b1c:	mov	r2, #3
   14b20:	mov	r3, #0
   14b24:	strd	r2, [sp, #8]
   14b28:	b	14b08 <__assert_fail@plt+0x33b4>
   14b2c:	mov	r8, r2
   14b30:	mov	r9, r3
   14b34:	mov	r3, #0
   14b38:	str	r3, [sp, #4]
   14b3c:	str	sl, [sp]
   14b40:	ldrd	r2, [sp, #8]
   14b44:	ldr	r0, [sp, #112]	; 0x70
   14b48:	bl	11a28 <__assert_fail@plt+0x2d4>
   14b4c:	mul	r1, fp, r9
   14b50:	ldr	r3, [sp, #16]
   14b54:	mla	r1, r3, r8, r1
   14b58:	umull	r2, r3, fp, r8
   14b5c:	add	r3, r1, r3
   14b60:	cmp	r3, r7
   14b64:	cmpeq	r2, r6
   14b68:	bhi	14dcc <__assert_fail@plt+0x3678>
   14b6c:	mov	r8, r2
   14b70:	mov	r9, r3
   14b74:	b	14b34 <__assert_fail@plt+0x33e0>
   14b78:	mov	r3, #1
   14b7c:	str	r3, [sp, #4]
   14b80:	str	sl, [sp]
   14b84:	ldrd	r2, [sp, #8]
   14b88:	ldr	r0, [sp, #112]	; 0x70
   14b8c:	bl	11a28 <__assert_fail@plt+0x2d4>
   14b90:	ldr	r2, [r4, #16]
   14b94:	ldr	r1, [r4, #20]
   14b98:	mul	r1, r8, r1
   14b9c:	mla	r1, r2, r9, r1
   14ba0:	umull	r2, r3, r2, r8
   14ba4:	add	r3, r1, r3
   14ba8:	ldrd	r0, [r4, #24]
   14bac:	cmp	r3, r1
   14bb0:	cmpeq	r2, r0
   14bb4:	bhi	14dfc <__assert_fail@plt+0x36a8>
   14bb8:	mov	r8, r2
   14bbc:	mov	r9, r3
   14bc0:	b	14b78 <__assert_fail@plt+0x3424>
   14bc4:	mov	r3, #2
   14bc8:	str	r3, [sp, #4]
   14bcc:	str	sl, [sp]
   14bd0:	ldrd	r2, [sp, #8]
   14bd4:	ldr	r0, [sp, #112]	; 0x70
   14bd8:	bl	11a28 <__assert_fail@plt+0x2d4>
   14bdc:	ldr	r2, [r4, #32]
   14be0:	ldr	r1, [r4, #36]	; 0x24
   14be4:	mul	r1, r8, r1
   14be8:	mla	r1, r2, r9, r1
   14bec:	umull	r2, r3, r2, r8
   14bf0:	add	r3, r1, r3
   14bf4:	ldrd	r0, [r4, #40]	; 0x28
   14bf8:	cmp	r3, r1
   14bfc:	cmpeq	r2, r0
   14c00:	bhi	14e2c <__assert_fail@plt+0x36d8>
   14c04:	mov	r8, r2
   14c08:	mov	r9, r3
   14c0c:	b	14bc4 <__assert_fail@plt+0x3470>
   14c10:	mov	r3, #3
   14c14:	str	r3, [sp, #4]
   14c18:	str	sl, [sp]
   14c1c:	ldrd	r2, [sp, #8]
   14c20:	ldr	r0, [sp, #112]	; 0x70
   14c24:	bl	11a28 <__assert_fail@plt+0x2d4>
   14c28:	ldr	r2, [r4, #48]	; 0x30
   14c2c:	ldr	r1, [r4, #52]	; 0x34
   14c30:	mul	r1, r8, r1
   14c34:	mla	r1, r2, r9, r1
   14c38:	umull	r2, r3, r2, r8
   14c3c:	add	r3, r1, r3
   14c40:	ldrd	r0, [r4, #56]	; 0x38
   14c44:	cmp	r3, r1
   14c48:	cmpeq	r2, r0
   14c4c:	bhi	14e5c <__assert_fail@plt+0x3708>
   14c50:	mov	r8, r2
   14c54:	mov	r9, r3
   14c58:	b	14c10 <__assert_fail@plt+0x34bc>
   14c5c:	str	r6, [sp, #4]
   14c60:	str	sl, [sp]
   14c64:	ldrd	r2, [sp, #8]
   14c68:	ldr	r0, [sp, #112]	; 0x70
   14c6c:	bl	11a28 <__assert_fail@plt+0x2d4>
   14c70:	ldr	r0, [r4, #64]	; 0x40
   14c74:	ldr	r3, [r4, #68]	; 0x44
   14c78:	mul	r3, r8, r3
   14c7c:	mla	r3, r0, r9, r3
   14c80:	umull	r0, r1, r0, r8
   14c84:	add	r1, r3, r1
   14c88:	ldrd	r2, [r4, #72]	; 0x48
   14c8c:	cmp	r1, r3
   14c90:	cmpeq	r0, r2
   14c94:	bhi	14e90 <__assert_fail@plt+0x373c>
   14c98:	mov	r8, r0
   14c9c:	mov	r9, r1
   14ca0:	b	14c5c <__assert_fail@plt+0x3508>
   14ca4:	str	r6, [sp, #4]
   14ca8:	str	sl, [sp]
   14cac:	ldrd	r2, [sp, #8]
   14cb0:	ldr	r0, [sp, #112]	; 0x70
   14cb4:	bl	11a28 <__assert_fail@plt+0x2d4>
   14cb8:	ldr	r0, [r4, #80]	; 0x50
   14cbc:	ldr	r3, [r4, #84]	; 0x54
   14cc0:	mul	r3, r8, r3
   14cc4:	mla	r3, r0, r9, r3
   14cc8:	umull	r0, r1, r0, r8
   14ccc:	add	r1, r3, r1
   14cd0:	ldrd	r2, [r4, #88]	; 0x58
   14cd4:	cmp	r1, r3
   14cd8:	cmpeq	r0, r2
   14cdc:	bhi	14ec4 <__assert_fail@plt+0x3770>
   14ce0:	mov	r8, r0
   14ce4:	mov	r9, r1
   14ce8:	b	14ca4 <__assert_fail@plt+0x3550>
   14cec:	str	r6, [sp, #4]
   14cf0:	str	sl, [sp]
   14cf4:	ldrd	r2, [sp, #8]
   14cf8:	ldr	r0, [sp, #112]	; 0x70
   14cfc:	bl	11a28 <__assert_fail@plt+0x2d4>
   14d00:	ldr	r0, [r4, #96]	; 0x60
   14d04:	ldr	r3, [r4, #100]	; 0x64
   14d08:	mul	r3, r8, r3
   14d0c:	mla	r3, r0, r9, r3
   14d10:	umull	r0, r1, r0, r8
   14d14:	add	r1, r3, r1
   14d18:	ldrd	r2, [r4, #104]	; 0x68
   14d1c:	cmp	r1, r3
   14d20:	cmpeq	r0, r2
   14d24:	bhi	14ef8 <__assert_fail@plt+0x37a4>
   14d28:	mov	r8, r0
   14d2c:	mov	r9, r1
   14d30:	b	14cec <__assert_fail@plt+0x3598>
   14d34:	mov	r6, r0
   14d38:	mov	r7, r1
   14d3c:	b	14f24 <__assert_fail@plt+0x37d0>
   14d40:	ldr	r3, [pc, #716]	; 15014 <__assert_fail@plt+0x38c0>
   14d44:	add	r3, r3, sl
   14d48:	ldrb	r2, [r3, #-1]
   14d4c:	mov	r3, #0
   14d50:	ldrd	r0, [sp, #8]
   14d54:	adds	r0, r0, r2
   14d58:	adc	r1, r1, r3
   14d5c:	mov	r2, r0
   14d60:	mov	r3, r1
   14d64:	strd	r2, [sp, #8]
   14d68:	mul	r1, r2, r3
   14d6c:	umull	r2, r3, r2, r2
   14d70:	add	r3, r3, r1, lsl #1
   14d74:	cmp	r3, r9
   14d78:	cmpeq	r2, r8
   14d7c:	bhi	14f6c <__assert_fail@plt+0x3818>
   14d80:	add	r5, r5, #128	; 0x80
   14d84:	add	r3, sl, #8
   14d88:	add	sl, sl, #7
   14d8c:	ldr	r2, [pc, #636]	; 15010 <__assert_fail@plt+0x38bc>
   14d90:	cmp	sl, r2
   14d94:	bhi	14f6c <__assert_fail@plt+0x3818>
   14d98:	mov	sl, r3
   14d9c:	mov	r4, r5
   14da0:	ldr	fp, [r5]
   14da4:	ldr	r3, [r5, #4]
   14da8:	str	r3, [sp, #16]
   14dac:	mul	r1, fp, r9
   14db0:	mla	r1, r3, r8, r1
   14db4:	umull	r2, r3, fp, r8
   14db8:	add	r3, r1, r3
   14dbc:	ldrd	r6, [r5, #8]
   14dc0:	cmp	r3, r7
   14dc4:	cmpeq	r2, r6
   14dc8:	bls	14b2c <__assert_fail@plt+0x33d8>
   14dcc:	ldr	r0, [r4, #16]
   14dd0:	ldr	r3, [r4, #20]
   14dd4:	mul	r3, r8, r3
   14dd8:	mla	r3, r0, r9, r3
   14ddc:	umull	r0, r1, r0, r8
   14de0:	add	r1, r3, r1
   14de4:	ldrd	r2, [r4, #24]
   14de8:	cmp	r1, r3
   14dec:	cmpeq	r0, r2
   14df0:	movls	r8, r0
   14df4:	movls	r9, r1
   14df8:	bls	14b78 <__assert_fail@plt+0x3424>
   14dfc:	ldr	r0, [r4, #32]
   14e00:	ldr	r3, [r4, #36]	; 0x24
   14e04:	mul	r3, r8, r3
   14e08:	mla	r3, r0, r9, r3
   14e0c:	umull	r0, r1, r0, r8
   14e10:	add	r1, r3, r1
   14e14:	ldrd	r2, [r4, #40]	; 0x28
   14e18:	cmp	r1, r3
   14e1c:	cmpeq	r0, r2
   14e20:	movls	r8, r0
   14e24:	movls	r9, r1
   14e28:	bls	14bc4 <__assert_fail@plt+0x3470>
   14e2c:	ldr	r0, [r4, #48]	; 0x30
   14e30:	ldr	r3, [r4, #52]	; 0x34
   14e34:	mul	r3, r8, r3
   14e38:	mla	r3, r0, r9, r3
   14e3c:	umull	r0, r1, r0, r8
   14e40:	add	r1, r3, r1
   14e44:	ldrd	r2, [r4, #56]	; 0x38
   14e48:	cmp	r1, r3
   14e4c:	cmpeq	r0, r2
   14e50:	movls	r8, r0
   14e54:	movls	r9, r1
   14e58:	bls	14c10 <__assert_fail@plt+0x34bc>
   14e5c:	ldr	r0, [r4, #64]	; 0x40
   14e60:	ldr	r3, [r4, #68]	; 0x44
   14e64:	mul	r3, r8, r3
   14e68:	mla	r3, r0, r9, r3
   14e6c:	umull	r0, r1, r0, r8
   14e70:	add	r1, r3, r1
   14e74:	ldrd	r2, [r4, #72]	; 0x48
   14e78:	cmp	r3, r1
   14e7c:	cmpeq	r2, r0
   14e80:	movcs	r8, r0
   14e84:	movcs	r9, r1
   14e88:	movcs	r6, #4
   14e8c:	bcs	14c5c <__assert_fail@plt+0x3508>
   14e90:	ldr	r0, [r4, #80]	; 0x50
   14e94:	ldr	r3, [r4, #84]	; 0x54
   14e98:	mul	r3, r8, r3
   14e9c:	mla	r3, r0, r9, r3
   14ea0:	umull	r0, r1, r0, r8
   14ea4:	add	r1, r3, r1
   14ea8:	ldrd	r2, [r4, #88]	; 0x58
   14eac:	cmp	r1, r3
   14eb0:	cmpeq	r0, r2
   14eb4:	movls	r8, r0
   14eb8:	movls	r9, r1
   14ebc:	movls	r6, #5
   14ec0:	bls	14ca4 <__assert_fail@plt+0x3550>
   14ec4:	ldr	r0, [r4, #96]	; 0x60
   14ec8:	ldr	r3, [r4, #100]	; 0x64
   14ecc:	mul	r3, r8, r3
   14ed0:	mla	r3, r0, r9, r3
   14ed4:	umull	r0, r1, r0, r8
   14ed8:	add	r1, r3, r1
   14edc:	ldrd	r2, [r4, #104]	; 0x68
   14ee0:	cmp	r1, r3
   14ee4:	cmpeq	r0, r2
   14ee8:	movls	r8, r0
   14eec:	movls	r9, r1
   14ef0:	movls	r6, #6
   14ef4:	bls	14cec <__assert_fail@plt+0x3598>
   14ef8:	ldr	r6, [r4, #112]	; 0x70
   14efc:	ldr	r3, [r4, #116]	; 0x74
   14f00:	mul	r3, r8, r3
   14f04:	mla	r3, r6, r9, r3
   14f08:	umull	r6, r7, r6, r8
   14f0c:	add	r7, r3, r7
   14f10:	ldrd	r2, [r4, #120]	; 0x78
   14f14:	cmp	r7, r3
   14f18:	cmpeq	r6, r2
   14f1c:	movls	r8, #7
   14f20:	bhi	14d40 <__assert_fail@plt+0x35ec>
   14f24:	str	r8, [sp, #4]
   14f28:	str	sl, [sp]
   14f2c:	ldrd	r2, [sp, #8]
   14f30:	ldr	r0, [sp, #112]	; 0x70
   14f34:	bl	11a28 <__assert_fail@plt+0x2d4>
   14f38:	ldr	r0, [r4, #112]	; 0x70
   14f3c:	ldr	r3, [r4, #116]	; 0x74
   14f40:	mul	r3, r6, r3
   14f44:	mla	r3, r0, r7, r3
   14f48:	umull	r0, r1, r0, r6
   14f4c:	add	r1, r3, r1
   14f50:	ldrd	r2, [r4, #120]	; 0x78
   14f54:	cmp	r1, r3
   14f58:	cmpeq	r0, r2
   14f5c:	bls	14d34 <__assert_fail@plt+0x35e0>
   14f60:	mov	r8, r6
   14f64:	mov	r9, r7
   14f68:	b	14d40 <__assert_fail@plt+0x35ec>
   14f6c:	cmp	r9, #0
   14f70:	cmpeq	r8, #1
   14f74:	movls	r3, #1
   14f78:	movhi	r3, #0
   14f7c:	ldrd	r0, [sp, #48]	; 0x30
   14f80:	mov	r2, r0
   14f84:	orrs	r2, r2, r1
   14f88:	movne	r3, #0
   14f8c:	andeq	r3, r3, #1
   14f90:	cmp	r3, #0
   14f94:	bne	14824 <__assert_fail@plt+0x30d0>
   14f98:	mov	r2, r8
   14f9c:	mov	r3, r9
   14fa0:	bl	15018 <__assert_fail@plt+0x38c4>
   14fa4:	cmp	r0, #0
   14fa8:	bne	14fdc <__assert_fail@plt+0x3888>
   14fac:	ldrd	r2, [sp, #48]	; 0x30
   14fb0:	orrs	r3, r2, r3
   14fb4:	beq	14ff0 <__assert_fail@plt+0x389c>
   14fb8:	ldr	r3, [sp, #112]	; 0x70
   14fbc:	str	r3, [sp, #4]
   14fc0:	mov	r3, #1
   14fc4:	str	r3, [sp]
   14fc8:	mov	r2, r8
   14fcc:	mov	r3, r9
   14fd0:	ldrd	r0, [sp, #48]	; 0x30
   14fd4:	bl	15a64 <__assert_fail@plt+0x4310>
   14fd8:	b	14824 <__assert_fail@plt+0x30d0>
   14fdc:	strd	r8, [sp]
   14fe0:	ldrd	r2, [sp, #48]	; 0x30
   14fe4:	ldr	r0, [sp, #112]	; 0x70
   14fe8:	bl	12748 <__assert_fail@plt+0xff4>
   14fec:	b	14824 <__assert_fail@plt+0x30d0>
   14ff0:	ldr	r3, [sp, #112]	; 0x70
   14ff4:	mov	r2, #1
   14ff8:	mov	r0, r8
   14ffc:	mov	r1, r9
   15000:	bl	13c60 <__assert_fail@plt+0x250c>
   15004:	b	14824 <__assert_fail@plt+0x30d0>
   15008:	andeq	lr, r1, r8, lsl #8
   1500c:	andeq	lr, r1, r8, ror r0
   15010:	muleq	r0, fp, r2
   15014:	andeq	r0, r2, r8, lsr lr
   15018:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1501c:	sub	sp, sp, #516	; 0x204
   15020:	strd	r0, [sp, #16]
   15024:	strd	r2, [sp, #24]
   15028:	mov	r2, r0
   1502c:	mov	r3, r1
   15030:	orrs	r3, r2, r3
   15034:	beq	1511c <__assert_fail@plt+0x39c8>
   15038:	ldrd	r4, [sp, #24]
   1503c:	mov	r3, r4
   15040:	orrs	r3, r3, r5
   15044:	moveq	r3, #1
   15048:	movne	r3, #0
   1504c:	ldrd	r0, [sp, #16]
   15050:	subs	r0, r0, r3
   15054:	sbc	r1, r1, #0
   15058:	strd	r0, [sp, #56]	; 0x38
   1505c:	subs	r2, r4, #1
   15060:	sbc	r3, r5, #0
   15064:	strd	r2, [sp, #88]	; 0x58
   15068:	orrs	r1, r2, r3
   1506c:	beq	15134 <__assert_fail@plt+0x39e0>
   15070:	and	r2, r2, #1
   15074:	mov	r3, #0
   15078:	orrs	r3, r2, r3
   1507c:	movne	r3, #0
   15080:	strne	r3, [sp, #140]	; 0x8c
   15084:	bne	150b0 <__assert_fail@plt+0x395c>
   15088:	ldrd	r2, [sp, #88]	; 0x58
   1508c:	mov	r1, #0
   15090:	lsrs	r3, r3, #1
   15094:	rrx	r2, r2
   15098:	add	r1, r1, #1
   1509c:	and	r4, r2, #1
   150a0:	mov	r5, #0
   150a4:	orrs	r0, r4, r5
   150a8:	beq	15090 <__assert_fail@plt+0x393c>
   150ac:	str	r1, [sp, #140]	; 0x8c
   150b0:	ldr	ip, [sp, #140]	; 0x8c
   150b4:	rsb	r3, ip, #64	; 0x40
   150b8:	sub	r1, r3, #32
   150bc:	rsb	r2, r3, #32
   150c0:	ldrd	r6, [sp, #56]	; 0x38
   150c4:	lsl	r5, r7, r3
   150c8:	orr	r5, r5, r6, lsl r1
   150cc:	orr	r5, r5, r6, lsr r2
   150d0:	lsl	r4, r6, r3
   150d4:	rsb	r0, ip, #32
   150d8:	sub	r1, ip, #32
   150dc:	ldrd	r8, [sp, #88]	; 0x58
   150e0:	lsr	r2, r8, ip
   150e4:	orr	r2, r2, r9, lsl r0
   150e8:	orr	r2, r2, r9, lsr r1
   150ec:	lsr	r3, r9, ip
   150f0:	orr	r2, r2, r4
   150f4:	orr	r3, r3, r5
   150f8:	add	lr, sp, #496	; 0x1f0
   150fc:	strd	r2, [lr]
   15100:	lsr	r3, r6, ip
   15104:	orr	r3, r3, r7, lsl r0
   15108:	orr	r3, r3, r7, lsr r1
   1510c:	lsr	r2, r7, ip
   15110:	str	r3, [sp, #504]	; 0x1f8
   15114:	str	r2, [sp, #508]	; 0x1fc
   15118:	b	151ac <__assert_fail@plt+0x3a58>
   1511c:	ldrd	r0, [sp, #24]
   15120:	bl	13698 <__assert_fail@plt+0x1f44>
   15124:	str	r0, [sp, #156]	; 0x9c
   15128:	ldr	r0, [sp, #156]	; 0x9c
   1512c:	add	sp, sp, #516	; 0x204
   15130:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15134:	ldrd	r0, [sp, #56]	; 0x38
   15138:	and	r2, r0, #1
   1513c:	mov	r3, #0
   15140:	orrs	r3, r2, r3
   15144:	bne	15294 <__assert_fail@plt+0x3b40>
   15148:	mov	r2, r0
   1514c:	mov	r3, r1
   15150:	mov	ip, #0
   15154:	lsrs	r3, r3, #1
   15158:	rrx	r2, r2
   1515c:	add	ip, ip, #1
   15160:	and	r0, r2, #1
   15164:	mov	r1, #0
   15168:	orrs	r1, r0, r1
   1516c:	beq	15154 <__assert_fail@plt+0x3a00>
   15170:	rsb	r1, ip, #32
   15174:	sub	r2, ip, #32
   15178:	ldrd	r4, [sp, #56]	; 0x38
   1517c:	lsr	r3, r4, ip
   15180:	orr	r3, r3, r5, lsl r1
   15184:	orr	r3, r3, r5, lsr r2
   15188:	lsr	r2, r5, ip
   1518c:	str	r3, [sp, #496]	; 0x1f0
   15190:	str	r2, [sp, #500]	; 0x1f4
   15194:	mov	r2, #0
   15198:	mov	r3, #0
   1519c:	add	r1, sp, #504	; 0x1f8
   151a0:	strd	r2, [r1]
   151a4:	add	r3, ip, #64	; 0x40
   151a8:	str	r3, [sp, #140]	; 0x8c
   151ac:	ldrd	r4, [sp, #24]
   151b0:	mov	r2, r4
   151b4:	mov	r3, r5
   151b8:	lsrs	r3, r3, #1
   151bc:	rrx	r2, r2
   151c0:	and	r2, r2, #127	; 0x7f
   151c4:	ldr	r3, [pc, #2192]	; 15a5c <__assert_fail@plt+0x4308>
   151c8:	add	r3, r3, r2
   151cc:	ldrb	r2, [r3, #744]	; 0x2e8
   151d0:	mov	r3, #0
   151d4:	adds	r0, r2, r2
   151d8:	adc	r1, r3, r3
   151dc:	umull	r2, r3, r2, r2
   151e0:	mul	ip, r2, r5
   151e4:	mla	ip, r4, r3, ip
   151e8:	umull	r2, r3, r2, r4
   151ec:	add	r3, ip, r3
   151f0:	subs	r2, r0, r2
   151f4:	sbc	r3, r1, r3
   151f8:	adds	r0, r2, r2
   151fc:	adc	r1, r3, r3
   15200:	mul	ip, r2, r3
   15204:	umull	r2, r3, r2, r2
   15208:	add	r3, r3, ip, lsl #1
   1520c:	mul	ip, r2, r5
   15210:	mla	ip, r4, r3, ip
   15214:	umull	r2, r3, r2, r4
   15218:	add	r3, ip, r3
   1521c:	subs	r2, r0, r2
   15220:	sbc	r3, r1, r3
   15224:	adds	r0, r2, r2
   15228:	adc	r1, r3, r3
   1522c:	mul	ip, r2, r3
   15230:	umull	r2, r3, r2, r2
   15234:	add	r3, r3, ip, lsl #1
   15238:	mul	ip, r2, r5
   1523c:	mla	ip, r4, r3, ip
   15240:	umull	r2, r3, r2, r4
   15244:	add	r3, ip, r3
   15248:	subs	r0, r0, r2
   1524c:	sbc	r1, r1, r3
   15250:	strd	r0, [sp, #48]	; 0x30
   15254:	ldrd	r2, [sp, #16]
   15258:	cmp	r3, #0
   1525c:	cmpeq	r2, #1
   15260:	movls	r4, #128	; 0x80
   15264:	movls	r5, #0
   15268:	movls	r8, #1
   1526c:	movls	r9, #0
   15270:	movls	r2, #0
   15274:	movhi	r4, #64	; 0x40
   15278:	movhi	r5, #0
   1527c:	movhi	r8, #0
   15280:	movhi	r9, #0
   15284:	movhi	r2, #1
   15288:	mov	r3, #0
   1528c:	mov	lr, #0
   15290:	b	152cc <__assert_fail@plt+0x3b78>
   15294:	mov	ip, #0
   15298:	b	15170 <__assert_fail@plt+0x3a1c>
   1529c:	ldrd	r8, [sp, #24]
   152a0:	cmp	r9, r1
   152a4:	cmpeq	r8, r0
   152a8:	movhi	r6, #1
   152ac:	movls	r6, #0
   152b0:	subs	r8, r0, r8
   152b4:	sbc	r9, r1, r9
   152b8:	ldrd	r0, [sp, #16]
   152bc:	subs	r0, r2, r0
   152c0:	sbc	r1, r3, r1
   152c4:	subs	r2, r0, r6
   152c8:	sbc	r3, r1, lr
   152cc:	subs	r4, r4, #1
   152d0:	sbc	r5, r5, #0
   152d4:	mvn	r0, #0
   152d8:	mvn	r1, #0
   152dc:	cmp	r5, r1
   152e0:	cmpeq	r4, r0
   152e4:	beq	15348 <__assert_fail@plt+0x3bf4>
   152e8:	adds	r2, r2, r2
   152ec:	adc	r3, r3, r3
   152f0:	lsr	sl, r9, #31
   152f4:	mov	fp, #0
   152f8:	orr	r2, r2, sl
   152fc:	orr	r3, r3, fp
   15300:	adds	r0, r8, r8
   15304:	adc	r1, r9, r9
   15308:	mov	r8, r0
   1530c:	mov	r9, r1
   15310:	ldrd	r6, [sp, #16]
   15314:	cmp	r7, r3
   15318:	cmpeq	r6, r2
   1531c:	bcc	1529c <__assert_fail@plt+0x3b48>
   15320:	moveq	ip, #1
   15324:	movne	ip, fp
   15328:	ldrd	r6, [sp, #24]
   1532c:	cmp	r7, r1
   15330:	cmpeq	r6, r0
   15334:	movhi	ip, #0
   15338:	andls	ip, ip, #1
   1533c:	cmp	ip, fp
   15340:	beq	152cc <__assert_fail@plt+0x3b78>
   15344:	b	1529c <__assert_fail@plt+0x3b48>
   15348:	add	r1, sp, #472	; 0x1d8
   1534c:	strd	r2, [r1]
   15350:	add	r1, sp, #464	; 0x1d0
   15354:	strd	r8, [r1]
   15358:	adds	r4, r8, r8
   1535c:	adc	r5, r9, r9
   15360:	adds	r2, r2, r2
   15364:	adc	r3, r3, r3
   15368:	cmp	r9, r5
   1536c:	cmpeq	r8, r4
   15370:	movhi	r1, #1
   15374:	movls	r1, #0
   15378:	adds	r2, r2, r1
   1537c:	adc	r3, r3, #0
   15380:	add	r1, sp, #488	; 0x1e8
   15384:	strd	r2, [r1]
   15388:	ldrd	r0, [sp, #16]
   1538c:	cmp	r1, r3
   15390:	cmpeq	r0, r2
   15394:	bcc	153c4 <__assert_fail@plt+0x3c70>
   15398:	moveq	r1, #1
   1539c:	movne	r1, #0
   153a0:	ldrd	r6, [sp, #24]
   153a4:	cmp	r7, r5
   153a8:	cmpeq	r6, r4
   153ac:	movhi	r1, #0
   153b0:	andls	r1, r1, #1
   153b4:	cmp	r1, #0
   153b8:	addeq	r3, sp, #480	; 0x1e0
   153bc:	strdeq	r4, [r3]
   153c0:	beq	15408 <__assert_fail@plt+0x3cb4>
   153c4:	ldrd	r8, [sp, #24]
   153c8:	subs	r0, r4, r8
   153cc:	sbc	r1, r5, r9
   153d0:	add	ip, sp, #480	; 0x1e0
   153d4:	strd	r0, [ip]
   153d8:	ldrd	r6, [sp, #16]
   153dc:	subs	r6, r2, r6
   153e0:	sbc	r7, r3, r7
   153e4:	mov	r1, r9
   153e8:	cmp	r9, r5
   153ec:	cmpeq	r8, r4
   153f0:	movhi	r1, #1
   153f4:	movls	r1, #0
   153f8:	subs	r2, r6, r1
   153fc:	sbc	r3, r7, #0
   15400:	add	r1, sp, #488	; 0x1e8
   15404:	strd	r2, [r1]
   15408:	add	r1, sp, #448	; 0x1c0
   1540c:	ldrd	r2, [sp, #24]
   15410:	strd	r2, [r1]
   15414:	add	r1, sp, #456	; 0x1c8
   15418:	ldrd	r2, [sp, #16]
   1541c:	strd	r2, [r1]
   15420:	add	r3, sp, #464	; 0x1d0
   15424:	str	r3, [sp, #12]
   15428:	ldr	r3, [sp, #140]	; 0x8c
   1542c:	str	r3, [sp, #8]
   15430:	add	r3, sp, #496	; 0x1f0
   15434:	str	r3, [sp, #4]
   15438:	add	r3, sp, #480	; 0x1e0
   1543c:	str	r3, [sp]
   15440:	ldrd	r2, [sp, #48]	; 0x30
   15444:	add	r0, sp, #448	; 0x1c0
   15448:	bl	125b0 <__assert_fail@plt+0xe5c>
   1544c:	subs	r3, r0, #0
   15450:	str	r3, [sp, #156]	; 0x9c
   15454:	beq	15128 <__assert_fail@plt+0x39d4>
   15458:	add	r3, sp, #192	; 0xc0
   1545c:	str	r3, [sp]
   15460:	ldrd	r4, [sp, #88]	; 0x58
   15464:	mov	r2, r4
   15468:	mov	r3, r5
   1546c:	ldrd	r6, [sp, #56]	; 0x38
   15470:	mov	r0, r6
   15474:	mov	r1, r7
   15478:	bl	147cc <__assert_fail@plt+0x3078>
   1547c:	mov	r2, #0
   15480:	lsl	r3, r6, #31
   15484:	mov	r0, r4
   15488:	mov	r1, r5
   1548c:	lsrs	r1, r1, #1
   15490:	rrx	r0, r0
   15494:	orr	r4, r2, r0
   15498:	orr	r5, r3, r1
   1549c:	strd	r4, [sp, #120]	; 0x78
   154a0:	mov	r2, r6
   154a4:	mov	r3, r7
   154a8:	lsrs	r3, r3, #1
   154ac:	rrx	r2, r2
   154b0:	strd	r2, [sp, #128]	; 0x80
   154b4:	ldr	r3, [pc, #1440]	; 15a5c <__assert_fail@plt+0x4308>
   154b8:	sub	r2, r3, #1
   154bc:	str	r2, [sp, #136]	; 0x88
   154c0:	add	r3, r3, #664	; 0x298
   154c4:	add	r3, r3, #3
   154c8:	str	r3, [sp, #152]	; 0x98
   154cc:	mov	r2, #2
   154d0:	mov	r3, #0
   154d4:	strd	r2, [sp, #112]	; 0x70
   154d8:	ldrd	sl, [sp, #32]
   154dc:	b	159f8 <__assert_fail@plt+0x42a4>
   154e0:	ldrd	r0, [sp, #192]	; 0xc0
   154e4:	lsrs	r3, r1, #1
   154e8:	rrx	r2, r0
   154ec:	and	r2, r2, #127	; 0x7f
   154f0:	ldr	ip, [pc, #1380]	; 15a5c <__assert_fail@plt+0x4308>
   154f4:	add	r2, ip, r2
   154f8:	ldrb	r2, [r2, #744]	; 0x2e8
   154fc:	mov	r3, #0
   15500:	adds	r4, r2, r2
   15504:	adc	r5, r3, r3
   15508:	umull	r2, r3, r2, r2
   1550c:	mul	ip, r2, r1
   15510:	mla	ip, r0, r3, ip
   15514:	umull	r2, r3, r2, r0
   15518:	add	r3, ip, r3
   1551c:	subs	r2, r4, r2
   15520:	sbc	r3, r5, r3
   15524:	adds	r4, r2, r2
   15528:	adc	r5, r3, r3
   1552c:	mul	ip, r2, r3
   15530:	umull	r2, r3, r2, r2
   15534:	add	r3, r3, ip, lsl #1
   15538:	mul	ip, r2, r1
   1553c:	mla	ip, r0, r3, ip
   15540:	umull	r2, r3, r2, r0
   15544:	add	r3, ip, r3
   15548:	subs	r2, r4, r2
   1554c:	sbc	r3, r5, r3
   15550:	adds	r4, r2, r2
   15554:	adc	r5, r3, r3
   15558:	mul	ip, r2, r3
   1555c:	umull	r2, r3, r2, r2
   15560:	add	r3, r3, ip, lsl #1
   15564:	mul	r1, r2, r1
   15568:	mla	r1, r0, r3, r1
   1556c:	umull	r2, r3, r2, r0
   15570:	add	r3, r1, r3
   15574:	subs	r2, r4, r2
   15578:	sbc	r3, r5, r3
   1557c:	ldrd	r4, [sp, #88]	; 0x58
   15580:	mul	r1, r2, r5
   15584:	mla	r1, r4, r3, r1
   15588:	umull	r2, r3, r2, r4
   1558c:	add	r3, r1, r3
   15590:	strd	r2, [sp, #160]	; 0xa0
   15594:	mov	r3, #0
   15598:	str	r3, [sp, #168]	; 0xa8
   1559c:	str	r3, [sp, #172]	; 0xac
   155a0:	add	r3, sp, #464	; 0x1d0
   155a4:	str	r3, [sp, #8]
   155a8:	ldrd	r2, [sp, #48]	; 0x30
   155ac:	strd	r2, [sp]
   155b0:	add	r3, sp, #448	; 0x1c0
   155b4:	add	r2, sp, #160	; 0xa0
   155b8:	add	r1, sp, #480	; 0x1e0
   155bc:	add	r0, sp, #184	; 0xb8
   155c0:	bl	123e8 <__assert_fail@plt+0xc94>
   155c4:	strd	r0, [sp, #176]	; 0xb0
   155c8:	add	r3, sp, #464	; 0x1d0
   155cc:	ldrd	r2, [r3]
   155d0:	cmp	r1, r3
   155d4:	cmpeq	r0, r2
   155d8:	beq	155ec <__assert_fail@plt+0x3e98>
   155dc:	ldrb	r3, [sp, #442]	; 0x1ba
   155e0:	cmp	r3, #0
   155e4:	bne	15a10 <__assert_fail@plt+0x42bc>
   155e8:	b	15128 <__assert_fail@plt+0x39d4>
   155ec:	ldrd	r0, [sp, #184]	; 0xb8
   155f0:	add	r3, sp, #472	; 0x1d8
   155f4:	ldrd	r2, [r3]
   155f8:	cmp	r1, r3
   155fc:	cmpeq	r0, r2
   15600:	movne	r2, #1
   15604:	moveq	r2, #0
   15608:	ldrb	r3, [sp, #442]	; 0x1ba
   1560c:	cmp	r3, #0
   15610:	moveq	r3, #0
   15614:	andne	r3, r2, #1
   15618:	cmp	r3, #0
   1561c:	bne	15a10 <__assert_fail@plt+0x42bc>
   15620:	b	15890 <__assert_fail@plt+0x413c>
   15624:	ldrd	r2, [sp, #120]	; 0x78
   15628:	strd	r2, [sp, #160]	; 0xa0
   1562c:	ldrd	r2, [sp, #128]	; 0x80
   15630:	strd	r2, [sp, #168]	; 0xa8
   15634:	b	15678 <__assert_fail@plt+0x3f24>
   15638:	str	r7, [sp, #72]	; 0x48
   1563c:	mov	r1, #0
   15640:	str	r1, [sp, #76]	; 0x4c
   15644:	ldrd	r0, [sp, #56]	; 0x38
   15648:	ldrd	r6, [sp, #72]	; 0x48
   1564c:	subs	r0, r0, r6
   15650:	sbc	r1, r1, r7
   15654:	ldrd	r6, [sp, #80]	; 0x50
   15658:	subs	r6, r0, r6
   1565c:	sbc	r7, r1, r7
   15660:	mul	r3, r6, r3
   15664:	mla	r1, r2, r7, r3
   15668:	umull	r2, r3, r6, r2
   1566c:	add	r3, r1, r3
   15670:	strd	r2, [sp, #168]	; 0xa8
   15674:	strd	r4, [sp, #160]	; 0xa0
   15678:	add	r3, sp, #464	; 0x1d0
   1567c:	str	r3, [sp, #8]
   15680:	ldrd	r2, [sp, #48]	; 0x30
   15684:	strd	r2, [sp]
   15688:	add	r3, sp, #448	; 0x1c0
   1568c:	add	r2, sp, #160	; 0xa0
   15690:	add	r1, sp, #480	; 0x1e0
   15694:	add	r0, sp, #184	; 0xb8
   15698:	bl	123e8 <__assert_fail@plt+0xc94>
   1569c:	strd	r0, [sp, #176]	; 0xb0
   156a0:	add	r3, sp, #464	; 0x1d0
   156a4:	ldrd	r2, [r3]
   156a8:	cmp	r1, r3
   156ac:	cmpeq	r0, r2
   156b0:	beq	15858 <__assert_fail@plt+0x4104>
   156b4:	ldrb	r3, [sp, #442]	; 0x1ba
   156b8:	cmp	fp, r3
   156bc:	bcs	15128 <__assert_fail@plt+0x39d4>
   156c0:	add	fp, fp, #1
   156c4:	ldr	r3, [sp, #32]
   156c8:	ldrd	r8, [r3, #8]!
   156cc:	str	r3, [sp, #32]
   156d0:	cmp	r9, #0
   156d4:	cmpeq	r8, #2
   156d8:	beq	15624 <__assert_fail@plt+0x3ed0>
   156dc:	lsrs	r3, r9, #1
   156e0:	rrx	r2, r8
   156e4:	and	r2, r2, #127	; 0x7f
   156e8:	ldr	r1, [pc, #876]	; 15a5c <__assert_fail@plt+0x4308>
   156ec:	add	r2, r1, r2
   156f0:	ldrb	r4, [r2, #744]	; 0x2e8
   156f4:	mov	r5, #0
   156f8:	adds	r0, r4, r4
   156fc:	adc	r1, r5, r5
   15700:	umull	r4, r5, r4, r4
   15704:	mul	r3, r4, r9
   15708:	mla	r3, r8, r5, r3
   1570c:	umull	r4, r5, r4, r8
   15710:	add	r5, r3, r5
   15714:	subs	r4, r0, r4
   15718:	sbc	r5, r1, r5
   1571c:	adds	r2, r4, r4
   15720:	adc	r3, r5, r5
   15724:	mul	r1, r4, r5
   15728:	umull	r4, r5, r4, r4
   1572c:	add	r5, r5, r1, lsl #1
   15730:	mul	r1, r4, r9
   15734:	mla	r1, r8, r5, r1
   15738:	umull	r4, r5, r4, r8
   1573c:	add	r5, r1, r5
   15740:	subs	r2, r2, r4
   15744:	sbc	r3, r3, r5
   15748:	mov	r0, r2
   1574c:	mov	r1, r3
   15750:	adds	r2, r2, r2
   15754:	adc	r3, r3, r3
   15758:	mul	ip, r0, r1
   1575c:	umull	r0, r1, r0, r0
   15760:	add	r1, r1, ip, lsl #1
   15764:	mul	ip, r0, r9
   15768:	mla	ip, r8, r1, ip
   1576c:	umull	r0, r1, r0, r8
   15770:	add	r1, ip, r1
   15774:	subs	r2, r2, r0
   15778:	sbc	r3, r3, r1
   1577c:	ldrd	r4, [sp, #88]	; 0x58
   15780:	mul	r1, r4, r3
   15784:	mla	r1, r2, r5, r1
   15788:	umull	r4, r5, r4, r2
   1578c:	add	r5, r1, r5
   15790:	ldrd	r0, [sp, #56]	; 0x38
   15794:	cmp	r1, r9
   15798:	cmpeq	r0, r8
   1579c:	bcc	15844 <__assert_fail@plt+0x40f0>
   157a0:	mov	r0, r4
   157a4:	mov	r1, #0
   157a8:	strd	r0, [sp, #104]	; 0x68
   157ac:	mov	r6, r8
   157b0:	mov	r7, #0
   157b4:	umull	r0, r1, r8, r5
   157b8:	strd	r0, [sp, #40]	; 0x28
   157bc:	strd	r6, [sp, #96]	; 0x60
   157c0:	mla	r1, r5, r7, r1
   157c4:	str	r1, [sp, #44]	; 0x2c
   157c8:	umull	r0, r1, r5, r9
   157cc:	strd	r0, [sp, #80]	; 0x50
   157d0:	ldrd	r0, [sp, #104]	; 0x68
   157d4:	umull	r6, r7, r0, r9
   157d8:	mla	r7, r9, r1, r7
   157dc:	ldrd	r8, [sp, #40]	; 0x28
   157e0:	adds	r8, r8, r6
   157e4:	adc	r9, r9, r7
   157e8:	mov	r6, r8
   157ec:	mov	r7, r9
   157f0:	ldrd	r8, [sp, #96]	; 0x60
   157f4:	mul	ip, r0, r9
   157f8:	mla	ip, r8, r1, ip
   157fc:	umull	r0, r1, r0, r8
   15800:	add	r1, ip, r1
   15804:	str	r1, [sp, #64]	; 0x40
   15808:	mov	r1, #0
   1580c:	str	r1, [sp, #68]	; 0x44
   15810:	ldrd	r0, [sp, #64]	; 0x40
   15814:	adds	r0, r0, r6
   15818:	adc	r1, r1, r7
   1581c:	mov	r7, r1
   15820:	ldrd	r8, [sp, #40]	; 0x28
   15824:	cmp	r9, r1
   15828:	cmpeq	r8, r0
   1582c:	bls	15638 <__assert_fail@plt+0x3ee4>
   15830:	ldrd	r0, [sp, #80]	; 0x50
   15834:	adds	r0, r0, #0
   15838:	adc	r1, r1, #1
   1583c:	strd	r0, [sp, #80]	; 0x50
   15840:	b	15638 <__assert_fail@plt+0x3ee4>
   15844:	strd	r4, [sp, #160]	; 0xa0
   15848:	mov	r3, #0
   1584c:	str	r3, [sp, #168]	; 0xa8
   15850:	str	r3, [sp, #172]	; 0xac
   15854:	b	15678 <__assert_fail@plt+0x3f24>
   15858:	ldrd	r0, [sp, #184]	; 0xb8
   1585c:	add	r3, sp, #472	; 0x1d8
   15860:	ldrd	r2, [r3]
   15864:	cmp	r1, r3
   15868:	cmpeq	r0, r2
   1586c:	movne	r2, #1
   15870:	moveq	r2, #0
   15874:	ldrb	r3, [sp, #442]	; 0x1ba
   15878:	cmp	r3, fp
   1587c:	movls	r3, #0
   15880:	andhi	r3, r2, #1
   15884:	cmp	r3, #0
   15888:	bne	156c0 <__assert_fail@plt+0x3f6c>
   1588c:	ldrd	sl, [sp, #144]	; 0x90
   15890:	cmp	r2, #0
   15894:	bne	15a28 <__assert_fail@plt+0x42d4>
   15898:	ldr	r1, [sp, #136]	; 0x88
   1589c:	ldrb	r2, [r1, #1]!
   158a0:	mov	r3, #0
   158a4:	str	r1, [sp, #136]	; 0x88
   158a8:	ldrd	r0, [sp, #112]	; 0x70
   158ac:	adds	r0, r0, r2
   158b0:	adc	r1, r1, r3
   158b4:	strd	r0, [sp, #112]	; 0x70
   158b8:	ldrd	r2, [sp, #16]
   158bc:	cmp	r3, r1
   158c0:	cmpeq	r2, r0
   158c4:	bhi	158dc <__assert_fail@plt+0x4188>
   158c8:	mov	r8, #128	; 0x80
   158cc:	mov	r9, #0
   158d0:	mov	r2, #0
   158d4:	mov	r3, r2
   158d8:	b	15928 <__assert_fail@plt+0x41d4>
   158dc:	ldrd	r2, [sp, #112]	; 0x70
   158e0:	mov	r8, #64	; 0x40
   158e4:	mov	r9, #0
   158e8:	mov	r0, #0
   158ec:	mov	r1, r0
   158f0:	b	15928 <__assert_fail@plt+0x41d4>
   158f4:	ldrd	r0, [sp, #24]
   158f8:	cmp	r1, r5
   158fc:	cmpeq	r0, r4
   15900:	movhi	r6, #1
   15904:	movls	r6, #0
   15908:	mov	r7, #0
   1590c:	subs	r0, r4, r0
   15910:	sbc	r1, r5, r1
   15914:	ldrd	r4, [sp, #16]
   15918:	subs	r4, r2, r4
   1591c:	sbc	r5, r3, r5
   15920:	subs	r2, r4, r6
   15924:	sbc	r3, r5, r7
   15928:	subs	r8, r8, #1
   1592c:	sbc	r9, r9, #0
   15930:	mvn	r4, #0
   15934:	mvn	r5, #0
   15938:	cmp	r9, r5
   1593c:	cmpeq	r8, r4
   15940:	beq	159a4 <__assert_fail@plt+0x4250>
   15944:	adds	r2, r2, r2
   15948:	adc	r3, r3, r3
   1594c:	lsr	sl, r1, #31
   15950:	mov	fp, #0
   15954:	orr	r2, r2, sl
   15958:	orr	r3, r3, fp
   1595c:	adds	r4, r0, r0
   15960:	adc	r5, r1, r1
   15964:	mov	r0, r4
   15968:	mov	r1, r5
   1596c:	ldrd	r6, [sp, #16]
   15970:	cmp	r7, r3
   15974:	cmpeq	r6, r2
   15978:	bcc	158f4 <__assert_fail@plt+0x41a0>
   1597c:	moveq	ip, #1
   15980:	movne	ip, fp
   15984:	ldrd	r6, [sp, #24]
   15988:	cmp	r7, r5
   1598c:	cmpeq	r6, r4
   15990:	movhi	ip, #0
   15994:	andls	ip, ip, #1
   15998:	cmp	ip, fp
   1599c:	beq	15928 <__assert_fail@plt+0x41d4>
   159a0:	b	158f4 <__assert_fail@plt+0x41a0>
   159a4:	add	ip, sp, #488	; 0x1e8
   159a8:	strd	r2, [ip]
   159ac:	add	r3, sp, #480	; 0x1e0
   159b0:	strd	r0, [r3]
   159b4:	add	r3, sp, #464	; 0x1d0
   159b8:	str	r3, [sp, #12]
   159bc:	ldr	r3, [sp, #140]	; 0x8c
   159c0:	str	r3, [sp, #8]
   159c4:	add	r3, sp, #496	; 0x1f0
   159c8:	str	r3, [sp, #4]
   159cc:	add	r3, sp, #480	; 0x1e0
   159d0:	str	r3, [sp]
   159d4:	ldrd	r2, [sp, #48]	; 0x30
   159d8:	add	r0, sp, #448	; 0x1c0
   159dc:	bl	125b0 <__assert_fail@plt+0xe5c>
   159e0:	cmp	r0, #0
   159e4:	beq	15a30 <__assert_fail@plt+0x42dc>
   159e8:	ldr	r3, [sp, #152]	; 0x98
   159ec:	ldr	r2, [sp, #136]	; 0x88
   159f0:	cmp	r3, r2
   159f4:	beq	15a38 <__assert_fail@plt+0x42e4>
   159f8:	ldrd	r2, [sp, #200]	; 0xc8
   159fc:	orrs	r3, r2, r3
   15a00:	bne	154e0 <__assert_fail@plt+0x3d8c>
   15a04:	ldrb	r3, [sp, #442]	; 0x1ba
   15a08:	cmp	r3, #0
   15a0c:	beq	15128 <__assert_fail@plt+0x39d4>
   15a10:	add	r3, sp, #200	; 0xc8
   15a14:	str	r3, [sp, #32]
   15a18:	mov	r3, #1
   15a1c:	strd	sl, [sp, #144]	; 0x90
   15a20:	mov	fp, r3
   15a24:	b	156c4 <__assert_fail@plt+0x3f70>
   15a28:	str	r2, [sp, #156]	; 0x9c
   15a2c:	b	15128 <__assert_fail@plt+0x39d4>
   15a30:	str	r0, [sp, #156]	; 0x9c
   15a34:	b	15128 <__assert_fail@plt+0x39d4>
   15a38:	mov	r2, #5
   15a3c:	ldr	r1, [pc, #28]	; 15a60 <__assert_fail@plt+0x430c>
   15a40:	mov	r0, #0
   15a44:	bl	11430 <dcgettext@plt>
   15a48:	mov	r2, r0
   15a4c:	mov	r1, #0
   15a50:	mov	r0, r1
   15a54:	bl	11520 <error@plt>
   15a58:	bl	11748 <abort@plt>
   15a5c:	andeq	lr, r1, r8, ror r0
   15a60:	andeq	r1, r2, r8, lsl r2
   15a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a68:	sub	sp, sp, #204	; 0xcc
   15a6c:	mov	sl, r0
   15a70:	mov	fp, r1
   15a74:	mov	r8, r2
   15a78:	mov	r9, r3
   15a7c:	cmp	r1, #0
   15a80:	cmpeq	r0, #1
   15a84:	bls	15ab8 <__assert_fail@plt+0x4364>
   15a88:	mov	r4, #64	; 0x40
   15a8c:	mov	r5, #0
   15a90:	mov	r2, #0
   15a94:	mov	r3, #0
   15a98:	strd	r2, [sp, #88]	; 0x58
   15a9c:	mov	r2, #1
   15aa0:	mov	r3, #0
   15aa4:	strd	r2, [sp, #96]	; 0x60
   15aa8:	mov	ip, #0
   15aac:	ldrd	r2, [sp, #96]	; 0x60
   15ab0:	strd	r4, [sp, #48]	; 0x30
   15ab4:	b	15b10 <__assert_fail@plt+0x43bc>
   15ab8:	mov	r4, #128	; 0x80
   15abc:	mov	r5, #0
   15ac0:	mov	r2, #1
   15ac4:	mov	r3, #0
   15ac8:	strd	r2, [sp, #88]	; 0x58
   15acc:	mov	r2, #0
   15ad0:	mov	r3, #0
   15ad4:	strd	r2, [sp, #96]	; 0x60
   15ad8:	b	15aa8 <__assert_fail@plt+0x4354>
   15adc:	cmp	r1, r9
   15ae0:	cmpeq	r0, r8
   15ae4:	movcc	lr, #1
   15ae8:	movcs	lr, #0
   15aec:	subs	r0, r0, r8
   15af0:	sbc	r1, r1, r9
   15af4:	strd	r0, [sp, #88]	; 0x58
   15af8:	subs	r2, r2, sl
   15afc:	sbc	r3, r3, fp
   15b00:	subs	r0, r2, lr
   15b04:	sbc	r1, r3, ip
   15b08:	mov	r2, r0
   15b0c:	mov	r3, r1
   15b10:	ldrd	r4, [sp, #48]	; 0x30
   15b14:	subs	r4, r4, #1
   15b18:	sbc	r5, r5, #0
   15b1c:	strd	r4, [sp, #48]	; 0x30
   15b20:	mvn	r0, #0
   15b24:	mvn	r1, #0
   15b28:	cmp	r5, r1
   15b2c:	cmpeq	r4, r0
   15b30:	beq	15b8c <__assert_fail@plt+0x4438>
   15b34:	adds	r2, r2, r2
   15b38:	adc	r3, r3, r3
   15b3c:	ldrd	r4, [sp, #88]	; 0x58
   15b40:	lsr	r6, r5, #31
   15b44:	mov	r7, #0
   15b48:	orr	r2, r2, r6
   15b4c:	orr	r3, r3, r7
   15b50:	adds	r0, r4, r4
   15b54:	adc	r1, r5, r5
   15b58:	strd	r0, [sp, #88]	; 0x58
   15b5c:	cmp	fp, r3
   15b60:	cmpeq	sl, r2
   15b64:	bcc	15adc <__assert_fail@plt+0x4388>
   15b68:	moveq	lr, #1
   15b6c:	movne	lr, r7
   15b70:	cmp	r1, r9
   15b74:	cmpeq	r0, r8
   15b78:	movcc	lr, #0
   15b7c:	andcs	lr, lr, #1
   15b80:	cmp	lr, r7
   15b84:	beq	15b10 <__assert_fail@plt+0x43bc>
   15b88:	b	15adc <__assert_fail@plt+0x4388>
   15b8c:	mov	r6, r2
   15b90:	mov	r7, r3
   15b94:	strd	r6, [sp, #96]	; 0x60
   15b98:	ldrd	r4, [sp, #88]	; 0x58
   15b9c:	adds	r0, r4, r4
   15ba0:	adc	r1, r5, r5
   15ba4:	strd	r0, [sp, #56]	; 0x38
   15ba8:	adds	r2, r2, r2
   15bac:	adc	r3, r3, r3
   15bb0:	mov	r7, r1
   15bb4:	cmp	r5, r1
   15bb8:	cmpeq	r4, r0
   15bbc:	movhi	r1, #1
   15bc0:	movls	r1, #0
   15bc4:	adds	r2, r2, r1
   15bc8:	adc	r3, r3, #0
   15bcc:	cmp	fp, r3
   15bd0:	cmpeq	sl, r2
   15bd4:	bcc	15bfc <__assert_fail@plt+0x44a8>
   15bd8:	moveq	r1, #1
   15bdc:	movne	r1, #0
   15be0:	cmp	r9, r7
   15be4:	cmpeq	r8, r0
   15be8:	movhi	r1, #0
   15bec:	andls	r1, r1, #1
   15bf0:	cmp	r1, #0
   15bf4:	strdeq	r2, [sp, #192]	; 0xc0
   15bf8:	beq	15c34 <__assert_fail@plt+0x44e0>
   15bfc:	ldrd	r4, [sp, #56]	; 0x38
   15c00:	cmp	r9, r5
   15c04:	cmpeq	r8, r4
   15c08:	movhi	r0, #1
   15c0c:	movls	r0, #0
   15c10:	mov	r1, #0
   15c14:	subs	r4, r4, r8
   15c18:	sbc	r5, r5, r9
   15c1c:	strd	r4, [sp, #56]	; 0x38
   15c20:	subs	r2, r2, sl
   15c24:	sbc	r3, r3, fp
   15c28:	subs	r2, r2, r0
   15c2c:	sbc	r3, r3, r1
   15c30:	strd	r2, [sp, #192]	; 0xc0
   15c34:	ldrd	r2, [sp, #192]	; 0xc0
   15c38:	strd	r2, [sp, #184]	; 0xb8
   15c3c:	strd	r2, [sp, #176]	; 0xb0
   15c40:	orrs	r3, sl, fp
   15c44:	movne	r3, #1
   15c48:	moveq	r3, #0
   15c4c:	cmp	r9, #0
   15c50:	cmpeq	r8, #1
   15c54:	orrne	r3, r3, #1
   15c58:	cmp	r3, #0
   15c5c:	beq	165bc <__assert_fail@plt+0x4e68>
   15c60:	ldrd	r2, [sp, #56]	; 0x38
   15c64:	mov	r4, r2
   15c68:	mov	r5, r3
   15c6c:	strd	r2, [sp, #104]	; 0x68
   15c70:	mov	r7, #1
   15c74:	ldr	r2, [sp, #240]	; 0xf0
   15c78:	mov	r3, #0
   15c7c:	strd	r2, [sp, #64]	; 0x40
   15c80:	strd	r4, [sp, #112]	; 0x70
   15c84:	str	r7, [sp, #72]	; 0x48
   15c88:	str	r7, [sp, #76]	; 0x4c
   15c8c:	b	163a8 <__assert_fail@plt+0x4c54>
   15c90:	ldrd	r4, [sp, #56]	; 0x38
   15c94:	cmp	r5, r9
   15c98:	cmpeq	r4, r8
   15c9c:	movcc	r0, #1
   15ca0:	movcs	r0, #0
   15ca4:	mov	r1, #0
   15ca8:	subs	r4, r4, r8
   15cac:	sbc	r5, r5, r9
   15cb0:	strd	r4, [sp, #56]	; 0x38
   15cb4:	subs	r2, r2, sl
   15cb8:	sbc	r3, r3, fp
   15cbc:	subs	r2, r2, r0
   15cc0:	sbc	r3, r3, r1
   15cc4:	strd	r2, [sp, #192]	; 0xc0
   15cc8:	ldrd	r4, [sp, #104]	; 0x68
   15ccc:	ldrd	r6, [sp, #56]	; 0x38
   15cd0:	subs	r2, r4, r6
   15cd4:	sbc	r3, r5, r7
   15cd8:	strd	r2, [sp, #80]	; 0x50
   15cdc:	ldrd	r0, [sp, #192]	; 0xc0
   15ce0:	ldrd	r2, [sp, #184]	; 0xb8
   15ce4:	subs	r2, r2, r0
   15ce8:	sbc	r3, r3, r1
   15cec:	mov	r1, r5
   15cf0:	cmp	r7, r5
   15cf4:	cmpeq	r6, r4
   15cf8:	movhi	r1, #1
   15cfc:	movls	r1, #0
   15d00:	subs	r2, r2, r1
   15d04:	sbc	r3, r3, #0
   15d08:	cmp	r2, #0
   15d0c:	sbcs	r1, r3, #0
   15d10:	blt	15d98 <__assert_fail@plt+0x4644>
   15d14:	ldrd	r0, [sp, #48]	; 0x30
   15d18:	strd	r0, [sp, #40]	; 0x28
   15d1c:	strd	r8, [sp, #32]
   15d20:	strd	sl, [sp, #24]
   15d24:	ldrd	r0, [sp, #80]	; 0x50
   15d28:	strd	r0, [sp, #16]
   15d2c:	strd	r2, [sp, #8]
   15d30:	ldrd	r2, [sp, #88]	; 0x58
   15d34:	strd	r2, [sp]
   15d38:	ldrd	r2, [sp, #96]	; 0x60
   15d3c:	add	r0, sp, #160	; 0xa0
   15d40:	bl	11b54 <__assert_fail@plt+0x400>
   15d44:	strd	r0, [sp, #88]	; 0x58
   15d48:	ldrd	r2, [sp, #160]	; 0xa0
   15d4c:	strd	r2, [sp, #96]	; 0x60
   15d50:	ldr	r3, [sp, #76]	; 0x4c
   15d54:	and	r3, r3, #31
   15d58:	cmp	r3, #1
   15d5c:	beq	15dcc <__assert_fail@plt+0x4678>
   15d60:	ldr	r3, [sp, #76]	; 0x4c
   15d64:	subs	r6, r3, #1
   15d68:	str	r6, [sp, #76]	; 0x4c
   15d6c:	bne	15f14 <__assert_fail@plt+0x47c0>
   15d70:	ldrd	r2, [sp, #192]	; 0xc0
   15d74:	strd	r2, [sp, #184]	; 0xb8
   15d78:	ldr	r3, [sp, #72]	; 0x48
   15d7c:	lsl	r7, r3, #1
   15d80:	cmp	r3, #0
   15d84:	beq	15fa8 <__assert_fail@plt+0x4854>
   15d88:	ldrd	r2, [sp, #56]	; 0x38
   15d8c:	mov	r4, r2
   15d90:	mov	r5, r3
   15d94:	b	15e68 <__assert_fail@plt+0x4714>
   15d98:	ldrd	r4, [sp, #80]	; 0x50
   15d9c:	adds	r0, r4, r8
   15da0:	adc	r1, r5, r9
   15da4:	adds	r2, r2, sl
   15da8:	adc	r3, r3, fp
   15dac:	cmp	r5, r1
   15db0:	cmpeq	r4, r0
   15db4:	movhi	ip, #1
   15db8:	movls	ip, #0
   15dbc:	adds	r2, r2, ip
   15dc0:	adc	r3, r3, #0
   15dc4:	strd	r0, [sp, #80]	; 0x50
   15dc8:	b	15d14 <__assert_fail@plt+0x45c0>
   15dcc:	strd	r8, [sp, #16]
   15dd0:	strd	sl, [sp, #8]
   15dd4:	mov	r2, r0
   15dd8:	mov	r3, r1
   15ddc:	strd	r2, [sp]
   15de0:	ldrd	r2, [sp, #96]	; 0x60
   15de4:	add	r0, sp, #168	; 0xa8
   15de8:	bl	127b0 <__assert_fail@plt+0x105c>
   15dec:	ldr	r3, [sp, #172]	; 0xac
   15df0:	ldr	r2, [sp, #168]	; 0xa8
   15df4:	orrs	r3, r2, r3
   15df8:	movne	r3, #1
   15dfc:	moveq	r3, #0
   15e00:	cmp	r1, #0
   15e04:	cmpeq	r0, #1
   15e08:	orrne	r3, r3, #1
   15e0c:	cmp	r3, #0
   15e10:	bne	15fb4 <__assert_fail@plt+0x4860>
   15e14:	ldrd	r2, [sp, #192]	; 0xc0
   15e18:	strd	r2, [sp, #176]	; 0xb0
   15e1c:	ldrd	r2, [sp, #56]	; 0x38
   15e20:	strd	r2, [sp, #112]	; 0x70
   15e24:	b	15d60 <__assert_fail@plt+0x460c>
   15e28:	cmp	r5, r9
   15e2c:	cmpeq	r4, r8
   15e30:	movcc	r0, #1
   15e34:	movcs	r0, #0
   15e38:	mov	r1, #0
   15e3c:	subs	r4, r4, r8
   15e40:	sbc	r5, r5, r9
   15e44:	subs	r2, r2, sl
   15e48:	sbc	r3, r3, fp
   15e4c:	subs	r2, r2, r0
   15e50:	sbc	r3, r3, r1
   15e54:	strd	r2, [sp, #192]	; 0xc0
   15e58:	add	r6, r6, #1
   15e5c:	ldr	r3, [sp, #72]	; 0x48
   15e60:	cmp	r3, r6
   15e64:	beq	15eec <__assert_fail@plt+0x4798>
   15e68:	ldrd	r2, [sp, #192]	; 0xc0
   15e6c:	ldrd	r0, [sp, #48]	; 0x30
   15e70:	strd	r0, [sp, #40]	; 0x28
   15e74:	strd	r8, [sp, #32]
   15e78:	strd	sl, [sp, #24]
   15e7c:	strd	r4, [sp, #16]
   15e80:	strd	r2, [sp, #8]
   15e84:	strd	r4, [sp]
   15e88:	add	r0, sp, #160	; 0xa0
   15e8c:	bl	11b54 <__assert_fail@plt+0x400>
   15e90:	ldrd	r4, [sp, #64]	; 0x40
   15e94:	adds	r4, r4, r0
   15e98:	adc	r5, r5, r1
   15e9c:	cmp	r1, r5
   15ea0:	cmpeq	r0, r4
   15ea4:	movhi	r1, #1
   15ea8:	movls	r1, #0
   15eac:	ldrd	r2, [sp, #160]	; 0xa0
   15eb0:	adds	r2, r2, r1
   15eb4:	adc	r3, r3, #0
   15eb8:	cmp	r3, fp
   15ebc:	cmpeq	r2, sl
   15ec0:	bhi	15e28 <__assert_fail@plt+0x46d4>
   15ec4:	moveq	r1, #1
   15ec8:	movne	r1, #0
   15ecc:	cmp	r5, r9
   15ed0:	cmpeq	r4, r8
   15ed4:	movcc	r1, #0
   15ed8:	andcs	r1, r1, #1
   15edc:	cmp	r1, #0
   15ee0:	bne	15e28 <__assert_fail@plt+0x46d4>
   15ee4:	strd	r2, [sp, #192]	; 0xc0
   15ee8:	b	15e58 <__assert_fail@plt+0x4704>
   15eec:	strd	r4, [sp, #112]	; 0x70
   15ef0:	ldrd	r2, [sp, #192]	; 0xc0
   15ef4:	strd	r2, [sp, #176]	; 0xb0
   15ef8:	ldr	r3, [sp, #72]	; 0x48
   15efc:	str	r3, [sp, #76]	; 0x4c
   15f00:	str	r7, [sp, #72]	; 0x48
   15f04:	ldrd	r2, [sp, #56]	; 0x38
   15f08:	strd	r2, [sp, #104]	; 0x68
   15f0c:	ldrd	r2, [sp, #112]	; 0x70
   15f10:	strd	r2, [sp, #56]	; 0x38
   15f14:	ldrd	r2, [sp, #192]	; 0xc0
   15f18:	ldrd	r0, [sp, #48]	; 0x30
   15f1c:	strd	r0, [sp, #40]	; 0x28
   15f20:	strd	r8, [sp, #32]
   15f24:	strd	sl, [sp, #24]
   15f28:	ldrd	r0, [sp, #56]	; 0x38
   15f2c:	strd	r0, [sp, #16]
   15f30:	strd	r2, [sp, #8]
   15f34:	strd	r0, [sp]
   15f38:	add	r0, sp, #160	; 0xa0
   15f3c:	bl	11b54 <__assert_fail@plt+0x400>
   15f40:	ldrd	r2, [sp, #64]	; 0x40
   15f44:	adds	r2, r2, r0
   15f48:	adc	r3, r3, r1
   15f4c:	mov	r4, r2
   15f50:	mov	r5, r3
   15f54:	strd	r4, [sp, #56]	; 0x38
   15f58:	cmp	r1, r3
   15f5c:	cmpeq	r0, r2
   15f60:	movhi	r1, #1
   15f64:	movls	r1, #0
   15f68:	ldrd	r2, [sp, #160]	; 0xa0
   15f6c:	adds	r2, r2, r1
   15f70:	adc	r3, r3, #0
   15f74:	cmp	r3, fp
   15f78:	cmpeq	r2, sl
   15f7c:	bhi	15c90 <__assert_fail@plt+0x453c>
   15f80:	moveq	r1, #1
   15f84:	movne	r1, #0
   15f88:	cmp	r5, r9
   15f8c:	cmpeq	r4, r8
   15f90:	movcc	r1, #0
   15f94:	andcs	r1, r1, #1
   15f98:	cmp	r1, #0
   15f9c:	bne	15c90 <__assert_fail@plt+0x453c>
   15fa0:	strd	r2, [sp, #192]	; 0xc0
   15fa4:	b	15cc8 <__assert_fail@plt+0x4574>
   15fa8:	ldrd	r2, [sp, #56]	; 0x38
   15fac:	strd	r2, [sp, #112]	; 0x70
   15fb0:	b	15ef0 <__assert_fail@plt+0x479c>
   15fb4:	ldrd	r4, [sp, #112]	; 0x70
   15fb8:	b	1606c <__assert_fail@plt+0x4918>
   15fbc:	cmp	r5, r9
   15fc0:	cmpeq	r4, r8
   15fc4:	movcc	r0, #1
   15fc8:	movcs	r0, #0
   15fcc:	mov	r1, #0
   15fd0:	subs	r4, r4, r8
   15fd4:	sbc	r5, r5, r9
   15fd8:	subs	r2, r2, sl
   15fdc:	sbc	r3, r3, fp
   15fe0:	subs	r2, r2, r0
   15fe4:	sbc	r3, r3, r1
   15fe8:	strd	r2, [sp, #176]	; 0xb0
   15fec:	ldrd	r6, [sp, #104]	; 0x68
   15ff0:	subs	r6, r6, r4
   15ff4:	sbc	r7, r7, r5
   15ff8:	ldrd	r0, [sp, #176]	; 0xb0
   15ffc:	ldrd	r2, [sp, #184]	; 0xb8
   16000:	subs	r2, r2, r0
   16004:	sbc	r3, r3, r1
   16008:	ldrd	r0, [sp, #104]	; 0x68
   1600c:	cmp	r1, r5
   16010:	cmpeq	r0, r4
   16014:	movcc	r1, #1
   16018:	movcs	r1, #0
   1601c:	subs	r2, r2, r1
   16020:	sbc	r3, r3, #0
   16024:	cmp	r2, #0
   16028:	sbcs	r1, r3, #0
   1602c:	blt	160f0 <__assert_fail@plt+0x499c>
   16030:	strd	r8, [sp, #16]
   16034:	strd	sl, [sp, #8]
   16038:	strd	r6, [sp]
   1603c:	add	r0, sp, #168	; 0xa8
   16040:	bl	127b0 <__assert_fail@plt+0x105c>
   16044:	ldrd	r2, [sp, #168]	; 0xa8
   16048:	cmp	r1, #0
   1604c:	cmpeq	r0, #1
   16050:	moveq	ip, #1
   16054:	movne	ip, #0
   16058:	orrs	lr, r2, r3
   1605c:	movne	ip, #0
   16060:	andeq	ip, ip, #1
   16064:	cmp	ip, #0
   16068:	beq	16124 <__assert_fail@plt+0x49d0>
   1606c:	ldrd	r2, [sp, #176]	; 0xb0
   16070:	ldrd	r0, [sp, #48]	; 0x30
   16074:	strd	r0, [sp, #40]	; 0x28
   16078:	strd	r8, [sp, #32]
   1607c:	strd	sl, [sp, #24]
   16080:	strd	r4, [sp, #16]
   16084:	strd	r2, [sp, #8]
   16088:	strd	r4, [sp]
   1608c:	add	r0, sp, #160	; 0xa0
   16090:	bl	11b54 <__assert_fail@plt+0x400>
   16094:	ldrd	r4, [sp, #64]	; 0x40
   16098:	adds	r4, r4, r0
   1609c:	adc	r5, r5, r1
   160a0:	cmp	r1, r5
   160a4:	cmpeq	r0, r4
   160a8:	movhi	r1, #1
   160ac:	movls	r1, #0
   160b0:	ldrd	r2, [sp, #160]	; 0xa0
   160b4:	adds	r2, r2, r1
   160b8:	adc	r3, r3, #0
   160bc:	cmp	r3, fp
   160c0:	cmpeq	r2, sl
   160c4:	bhi	15fbc <__assert_fail@plt+0x4868>
   160c8:	moveq	r1, #1
   160cc:	movne	r1, #0
   160d0:	cmp	r5, r9
   160d4:	cmpeq	r4, r8
   160d8:	movcc	r1, #0
   160dc:	andcs	r1, r1, #1
   160e0:	cmp	r1, #0
   160e4:	bne	15fbc <__assert_fail@plt+0x4868>
   160e8:	strd	r2, [sp, #176]	; 0xb0
   160ec:	b	15fec <__assert_fail@plt+0x4898>
   160f0:	adds	r0, r6, r8
   160f4:	adc	r1, r7, r9
   160f8:	adds	r2, r2, sl
   160fc:	adc	r3, r3, fp
   16100:	cmp	r7, r1
   16104:	cmpeq	r6, r0
   16108:	movhi	ip, #1
   1610c:	movls	ip, #0
   16110:	adds	r2, r2, ip
   16114:	adc	r3, r3, #0
   16118:	mov	r6, r0
   1611c:	mov	r7, r1
   16120:	b	16030 <__assert_fail@plt+0x48dc>
   16124:	strd	r4, [sp, #112]	; 0x70
   16128:	mov	r4, r0
   1612c:	mov	r5, r1
   16130:	strd	r4, [sp, #48]	; 0x30
   16134:	orrs	r1, r2, r3
   16138:	bne	16460 <__assert_fail@plt+0x4d0c>
   1613c:	mov	r0, r4
   16140:	mov	r1, r5
   16144:	lsrs	r1, r1, #1
   16148:	rrx	r0, r0
   1614c:	and	r0, r0, #127	; 0x7f
   16150:	ldr	ip, [pc, #1248]	; 16638 <__assert_fail@plt+0x4ee4>
   16154:	add	r0, ip, r0
   16158:	ldrb	r0, [r0, #744]	; 0x2e8
   1615c:	mov	r1, #0
   16160:	adds	r6, r0, r0
   16164:	adc	r7, r1, r1
   16168:	umull	r0, r1, r0, r0
   1616c:	mul	ip, r0, r5
   16170:	mla	ip, r4, r1, ip
   16174:	umull	r0, r1, r0, r4
   16178:	add	r1, ip, r1
   1617c:	subs	r6, r6, r0
   16180:	sbc	r7, r7, r1
   16184:	mov	r0, r6
   16188:	mov	r1, r7
   1618c:	adds	r6, r6, r6
   16190:	adc	r7, r7, r7
   16194:	mul	ip, r0, r1
   16198:	umull	r0, r1, r0, r0
   1619c:	add	r1, r1, ip, lsl #1
   161a0:	mul	ip, r0, r5
   161a4:	mla	ip, r4, r1, ip
   161a8:	umull	r0, r1, r0, r4
   161ac:	add	r1, ip, r1
   161b0:	subs	r6, r6, r0
   161b4:	sbc	r7, r7, r1
   161b8:	mov	r0, r6
   161bc:	mov	r1, r7
   161c0:	adds	r6, r6, r6
   161c4:	adc	r7, r7, r7
   161c8:	mul	ip, r0, r1
   161cc:	umull	r0, r1, r0, r0
   161d0:	add	r1, r1, ip, lsl #1
   161d4:	mul	ip, r0, r5
   161d8:	mla	ip, r4, r1, ip
   161dc:	umull	r0, r1, r0, r4
   161e0:	add	r1, ip, r1
   161e4:	subs	r6, r6, r0
   161e8:	sbc	r7, r7, r1
   161ec:	mov	r0, r6
   161f0:	mov	r1, r7
   161f4:	mul	ip, r8, r7
   161f8:	mla	ip, r6, r9, ip
   161fc:	umull	r8, r9, r8, r6
   16200:	add	r9, ip, r9
   16204:	cmp	r5, fp
   16208:	cmpeq	r4, sl
   1620c:	movhi	sl, r2
   16210:	movhi	fp, r3
   16214:	bhi	162f4 <__assert_fail@plt+0x4ba0>
   16218:	mov	r2, r4
   1621c:	mov	r3, #0
   16220:	strd	r2, [sp, #80]	; 0x50
   16224:	umull	r6, r7, r4, r9
   16228:	strd	r6, [sp, #128]	; 0x80
   1622c:	ldr	ip, [sp, #84]	; 0x54
   16230:	mla	r3, r9, ip, r7
   16234:	str	r3, [sp, #132]	; 0x84
   16238:	umull	r6, r7, r9, r5
   1623c:	strd	r6, [sp, #120]	; 0x78
   16240:	mov	r7, #0
   16244:	umull	r2, r3, r8, r5
   16248:	strd	r2, [sp, #136]	; 0x88
   1624c:	mla	r3, r5, r7, r3
   16250:	str	r3, [sp, #140]	; 0x8c
   16254:	ldrd	r4, [sp, #128]	; 0x80
   16258:	ldrd	r2, [sp, #136]	; 0x88
   1625c:	adds	r4, r4, r2
   16260:	adc	r5, r5, r3
   16264:	ldr	ip, [sp, #84]	; 0x54
   16268:	mul	ip, r8, ip
   1626c:	ldr	lr, [sp, #80]	; 0x50
   16270:	mla	ip, lr, r7, ip
   16274:	mov	r2, lr
   16278:	umull	r2, r3, r8, r2
   1627c:	add	r3, ip, r3
   16280:	str	r3, [sp, #144]	; 0x90
   16284:	mov	r3, #0
   16288:	str	r3, [sp, #148]	; 0x94
   1628c:	ldrd	r2, [sp, #144]	; 0x90
   16290:	adds	r2, r2, r4
   16294:	adc	r3, r3, r5
   16298:	ldrd	r4, [sp, #128]	; 0x80
   1629c:	cmp	r5, r3
   162a0:	cmpeq	r4, r2
   162a4:	bls	162b8 <__assert_fail@plt+0x4b64>
   162a8:	ldrd	r6, [sp, #120]	; 0x78
   162ac:	adds	r6, r6, #0
   162b0:	adc	r7, r7, #1
   162b4:	strd	r6, [sp, #120]	; 0x78
   162b8:	str	r3, [sp, #152]	; 0x98
   162bc:	mov	r3, #0
   162c0:	str	r3, [sp, #156]	; 0x9c
   162c4:	ldrd	r2, [sp, #152]	; 0x98
   162c8:	subs	r2, sl, r2
   162cc:	sbc	r3, fp, r3
   162d0:	mov	sl, r2
   162d4:	mov	fp, r3
   162d8:	ldrd	r2, [sp, #120]	; 0x78
   162dc:	subs	r2, sl, r2
   162e0:	sbc	r3, fp, r3
   162e4:	mul	r3, r0, r3
   162e8:	mla	r3, r2, r1, r3
   162ec:	umull	sl, fp, r0, r2
   162f0:	add	fp, r3, fp
   162f4:	ldrd	r4, [sp, #48]	; 0x30
   162f8:	mov	r0, r4
   162fc:	mov	r1, r5
   16300:	bl	13698 <__assert_fail@plt+0x1f44>
   16304:	cmp	r0, #0
   16308:	bne	16448 <__assert_fail@plt+0x4cf4>
   1630c:	ldr	r3, [sp, #244]	; 0xf4
   16310:	ldr	r2, [sp, #240]	; 0xf0
   16314:	add	r2, r2, #1
   16318:	mov	r0, r4
   1631c:	mov	r1, r5
   16320:	bl	13c60 <__assert_fail@plt+0x250c>
   16324:	orrs	r3, sl, fp
   16328:	beq	16590 <__assert_fail@plt+0x4e3c>
   1632c:	mov	r2, r8
   16330:	mov	r3, r9
   16334:	mov	r0, sl
   16338:	mov	r1, fp
   1633c:	bl	15018 <__assert_fail@plt+0x38c4>
   16340:	cmp	r0, #0
   16344:	bne	16620 <__assert_fail@plt+0x4ecc>
   16348:	add	r0, sp, #200	; 0xc8
   1634c:	ldrd	r2, [r0, #-8]!
   16350:	strd	r8, [sp, #16]
   16354:	strd	sl, [sp, #8]
   16358:	ldrd	r4, [sp, #56]	; 0x38
   1635c:	strd	r4, [sp]
   16360:	bl	129c8 <__assert_fail@plt+0x1274>
   16364:	strd	r0, [sp, #56]	; 0x38
   16368:	add	r0, sp, #200	; 0xc8
   1636c:	ldrd	r2, [r0, #-16]!
   16370:	strd	r8, [sp, #16]
   16374:	strd	sl, [sp, #8]
   16378:	ldrd	r4, [sp, #104]	; 0x68
   1637c:	strd	r4, [sp]
   16380:	bl	129c8 <__assert_fail@plt+0x1274>
   16384:	strd	r0, [sp, #104]	; 0x68
   16388:	add	r0, sp, #200	; 0xc8
   1638c:	ldrd	r2, [r0, #-24]!	; 0xffffffe8
   16390:	strd	r8, [sp, #16]
   16394:	strd	sl, [sp, #8]
   16398:	ldrd	r4, [sp, #112]	; 0x70
   1639c:	strd	r4, [sp]
   163a0:	bl	129c8 <__assert_fail@plt+0x1274>
   163a4:	strd	r0, [sp, #112]	; 0x70
   163a8:	lsrs	r3, r9, #1
   163ac:	rrx	r2, r8
   163b0:	and	r2, r2, #127	; 0x7f
   163b4:	ldr	r1, [pc, #636]	; 16638 <__assert_fail@plt+0x4ee4>
   163b8:	add	r2, r1, r2
   163bc:	ldrb	r2, [r2, #744]	; 0x2e8
   163c0:	mov	r3, #0
   163c4:	adds	r0, r2, r2
   163c8:	adc	r1, r3, r3
   163cc:	umull	r2, r3, r2, r2
   163d0:	mul	ip, r2, r9
   163d4:	mla	ip, r8, r3, ip
   163d8:	umull	r2, r3, r2, r8
   163dc:	add	r3, ip, r3
   163e0:	subs	r2, r0, r2
   163e4:	sbc	r3, r1, r3
   163e8:	adds	r0, r2, r2
   163ec:	adc	r1, r3, r3
   163f0:	mul	ip, r2, r3
   163f4:	umull	r2, r3, r2, r2
   163f8:	add	r3, r3, ip, lsl #1
   163fc:	mul	ip, r2, r9
   16400:	mla	ip, r8, r3, ip
   16404:	umull	r2, r3, r2, r8
   16408:	add	r3, ip, r3
   1640c:	subs	r2, r0, r2
   16410:	sbc	r3, r1, r3
   16414:	adds	r0, r2, r2
   16418:	adc	r1, r3, r3
   1641c:	mul	ip, r2, r3
   16420:	umull	r2, r3, r2, r2
   16424:	add	r3, r3, ip, lsl #1
   16428:	mul	ip, r2, r9
   1642c:	mla	ip, r8, r3, ip
   16430:	umull	r2, r3, r2, r8
   16434:	add	r3, ip, r3
   16438:	subs	r0, r0, r2
   1643c:	sbc	r1, r1, r3
   16440:	strd	r0, [sp, #48]	; 0x30
   16444:	b	15f14 <__assert_fail@plt+0x47c0>
   16448:	mov	r3, #1
   1644c:	str	r3, [sp]
   16450:	ldrd	r2, [sp, #48]	; 0x30
   16454:	ldr	r0, [sp, #244]	; 0xf4
   16458:	bl	11938 <__assert_fail@plt+0x1e4>
   1645c:	b	16324 <__assert_fail@plt+0x4bd0>
   16460:	mov	r0, r2
   16464:	mov	r1, r3
   16468:	mov	r6, r2
   1646c:	mov	r7, r3
   16470:	ldrd	r2, [sp, #48]	; 0x30
   16474:	cmp	r3, r9
   16478:	cmpeq	r2, r8
   1647c:	moveq	r3, #1
   16480:	movne	r3, #0
   16484:	cmp	r1, fp
   16488:	cmpeq	r0, sl
   1648c:	movne	r3, #0
   16490:	andeq	r3, r3, #1
   16494:	cmp	r3, #0
   16498:	bne	165c4 <__assert_fail@plt+0x4e70>
   1649c:	ldrd	r4, [sp, #48]	; 0x30
   164a0:	mov	r2, r4
   164a4:	mov	r3, r5
   164a8:	lsrs	r3, r3, #1
   164ac:	rrx	r2, r2
   164b0:	and	r2, r2, #127	; 0x7f
   164b4:	ldr	r3, [pc, #380]	; 16638 <__assert_fail@plt+0x4ee4>
   164b8:	add	r3, r3, r2
   164bc:	ldrb	r2, [r3, #744]	; 0x2e8
   164c0:	mov	r3, #0
   164c4:	adds	r0, r2, r2
   164c8:	adc	r1, r3, r3
   164cc:	umull	r2, r3, r2, r2
   164d0:	mul	ip, r2, r5
   164d4:	mla	ip, r4, r3, ip
   164d8:	umull	r2, r3, r2, r4
   164dc:	add	r3, ip, r3
   164e0:	subs	r2, r0, r2
   164e4:	sbc	r3, r1, r3
   164e8:	adds	r0, r2, r2
   164ec:	adc	r1, r3, r3
   164f0:	mul	ip, r2, r3
   164f4:	umull	r2, r3, r2, r2
   164f8:	add	r3, r3, ip, lsl #1
   164fc:	mul	ip, r2, r5
   16500:	mla	ip, r4, r3, ip
   16504:	umull	r2, r3, r2, r4
   16508:	add	r3, ip, r3
   1650c:	subs	r2, r0, r2
   16510:	sbc	r3, r1, r3
   16514:	adds	r0, r2, r2
   16518:	adc	r1, r3, r3
   1651c:	mul	ip, r2, r3
   16520:	umull	r2, r3, r2, r2
   16524:	add	r3, r3, ip, lsl #1
   16528:	mul	ip, r2, r5
   1652c:	mla	ip, r4, r3, ip
   16530:	umull	r2, r3, r2, r4
   16534:	add	r3, ip, r3
   16538:	subs	r2, r0, r2
   1653c:	sbc	r3, r1, r3
   16540:	mul	r3, r8, r3
   16544:	mla	r3, r2, r9, r3
   16548:	umull	r8, r9, r8, r2
   1654c:	add	r9, r3, r9
   16550:	mov	r2, r4
   16554:	mov	r3, r5
   16558:	mov	r0, r6
   1655c:	mov	r1, r7
   16560:	bl	15018 <__assert_fail@plt+0x38c4>
   16564:	cmp	r0, #0
   16568:	bne	165f0 <__assert_fail@plt+0x4e9c>
   1656c:	ldr	r3, [sp, #244]	; 0xf4
   16570:	str	r3, [sp, #4]
   16574:	ldr	r3, [sp, #240]	; 0xf0
   16578:	add	r3, r3, #1
   1657c:	str	r3, [sp]
   16580:	mov	r2, r4
   16584:	mov	r3, r5
   16588:	ldrd	r0, [sp, #168]	; 0xa8
   1658c:	bl	15a64 <__assert_fail@plt+0x4310>
   16590:	mov	r0, r8
   16594:	mov	r1, r9
   16598:	bl	13698 <__assert_fail@plt+0x1f44>
   1659c:	cmp	r0, #0
   165a0:	beq	16608 <__assert_fail@plt+0x4eb4>
   165a4:	mov	r3, #1
   165a8:	str	r3, [sp]
   165ac:	mov	r2, r8
   165b0:	mov	r3, r9
   165b4:	ldr	r0, [sp, #244]	; 0xf4
   165b8:	bl	11938 <__assert_fail@plt+0x1e4>
   165bc:	add	sp, sp, #204	; 0xcc
   165c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165c4:	ldr	r3, [sp, #244]	; 0xf4
   165c8:	str	r3, [sp, #4]
   165cc:	ldr	r3, [sp, #240]	; 0xf0
   165d0:	add	r3, r3, #1
   165d4:	str	r3, [sp]
   165d8:	mov	r2, r8
   165dc:	mov	r3, r9
   165e0:	mov	r0, sl
   165e4:	mov	r1, fp
   165e8:	bl	15a64 <__assert_fail@plt+0x4310>
   165ec:	b	165bc <__assert_fail@plt+0x4e68>
   165f0:	ldrd	r2, [sp, #48]	; 0x30
   165f4:	strd	r2, [sp]
   165f8:	ldrd	r2, [sp, #168]	; 0xa8
   165fc:	ldr	r0, [sp, #244]	; 0xf4
   16600:	bl	12748 <__assert_fail@plt+0xff4>
   16604:	b	16590 <__assert_fail@plt+0x4e3c>
   16608:	ldr	r3, [sp, #244]	; 0xf4
   1660c:	ldr	r2, [sp, #240]	; 0xf0
   16610:	mov	r0, r8
   16614:	mov	r1, r9
   16618:	bl	13c60 <__assert_fail@plt+0x250c>
   1661c:	b	165bc <__assert_fail@plt+0x4e68>
   16620:	strd	r8, [sp]
   16624:	mov	r2, sl
   16628:	mov	r3, fp
   1662c:	ldr	r0, [sp, #244]	; 0xf4
   16630:	bl	12748 <__assert_fail@plt+0xff4>
   16634:	b	165bc <__assert_fail@plt+0x4e68>
   16638:	andeq	lr, r1, r8, ror r0
   1663c:	mov	r3, #0
   16640:	str	r3, [r1]
   16644:	str	r3, [r1, #4]
   16648:	str	r3, [r1, #8]
   1664c:	ldr	r3, [r0, #4]
   16650:	cmp	r3, #0
   16654:	bxeq	lr
   16658:	push	{r4, r5, r6, r7, r8, r9, lr}
   1665c:	sub	sp, sp, #28
   16660:	mov	r7, r1
   16664:	mov	r5, r0
   16668:	ldr	r3, [pc, #384]	; 167f0 <__assert_fail@plt+0x509c>
   1666c:	ldrb	r3, [r3, #8]
   16670:	cmp	r3, #0
   16674:	bne	166e4 <__assert_fail@plt+0x4f90>
   16678:	mov	r0, sp
   1667c:	bl	11718 <__gmpz_init@plt>
   16680:	mov	r1, #0
   16684:	mov	r0, r5
   16688:	bl	11364 <__gmpz_scan1@plt>
   1668c:	mov	r4, r0
   16690:	mov	r2, r0
   16694:	mov	r1, r5
   16698:	mov	r0, r5
   1669c:	bl	114f0 <__gmpz_fdiv_q_2exp@plt>
   166a0:	cmp	r4, #0
   166a4:	beq	166d4 <__assert_fail@plt+0x4f80>
   166a8:	mov	r6, #2
   166ac:	mov	r1, r6
   166b0:	add	r0, sp, #12
   166b4:	bl	11694 <__gmpz_init_set_ui@plt>
   166b8:	add	r1, sp, #12
   166bc:	mov	r0, r7
   166c0:	bl	12f74 <__assert_fail@plt+0x1820>
   166c4:	add	r0, sp, #12
   166c8:	bl	115d4 <__gmpz_clear@plt>
   166cc:	subs	r4, r4, #1
   166d0:	bne	166ac <__assert_fail@plt+0x4f58>
   166d4:	mov	r6, #1
   166d8:	mov	r4, #3
   166dc:	ldr	r9, [pc, #272]	; 167f4 <__assert_fail@plt+0x50a0>
   166e0:	b	16738 <__assert_fail@plt+0x4fe4>
   166e4:	ldr	r3, [pc, #268]	; 167f8 <__assert_fail@plt+0x50a4>
   166e8:	ldr	r3, [r3]
   166ec:	mov	r2, #17
   166f0:	mov	r1, #1
   166f4:	ldr	r0, [pc, #256]	; 167fc <__assert_fail@plt+0x50a8>
   166f8:	bl	114d8 <fwrite@plt>
   166fc:	b	16678 <__assert_fail@plt+0x4f24>
   16700:	mov	r2, r4
   16704:	mov	r1, r5
   16708:	mov	r0, r5
   1670c:	bl	11490 <__gmpz_tdiv_q_ui@plt>
   16710:	mov	r1, r4
   16714:	add	r0, sp, #12
   16718:	bl	11694 <__gmpz_init_set_ui@plt>
   1671c:	add	r1, sp, #12
   16720:	mov	r0, r7
   16724:	bl	12f74 <__assert_fail@plt+0x1820>
   16728:	add	r0, sp, #12
   1672c:	bl	115d4 <__gmpz_clear@plt>
   16730:	cmp	r6, #668	; 0x29c
   16734:	bhi	16770 <__assert_fail@plt+0x501c>
   16738:	mov	r1, r4
   1673c:	mov	r0, r5
   16740:	bl	115c8 <__gmpz_divisible_ui_p@plt>
   16744:	cmp	r0, #0
   16748:	bne	16700 <__assert_fail@plt+0x4fac>
   1674c:	add	r8, r6, #1
   16750:	ldrb	r3, [r9, r6]
   16754:	add	r4, r4, r3
   16758:	mul	r1, r4, r4
   1675c:	mov	r0, r5
   16760:	bl	1170c <__gmpz_cmp_ui@plt>
   16764:	cmp	r0, #0
   16768:	movge	r6, r8
   1676c:	bge	16730 <__assert_fail@plt+0x4fdc>
   16770:	mov	r0, sp
   16774:	bl	115d4 <__gmpz_clear@plt>
   16778:	mov	r1, #1
   1677c:	mov	r0, r5
   16780:	bl	1170c <__gmpz_cmp_ui@plt>
   16784:	cmp	r0, #0
   16788:	beq	167bc <__assert_fail@plt+0x5068>
   1678c:	ldr	r3, [pc, #92]	; 167f0 <__assert_fail@plt+0x509c>
   16790:	ldrb	r3, [r3, #8]
   16794:	cmp	r3, #0
   16798:	bne	167c4 <__assert_fail@plt+0x5070>
   1679c:	mov	r0, r5
   167a0:	bl	16d60 <__assert_fail@plt+0x560c>
   167a4:	cmp	r0, #0
   167a8:	bne	167e0 <__assert_fail@plt+0x508c>
   167ac:	mov	r2, r7
   167b0:	mov	r1, #1
   167b4:	mov	r0, r5
   167b8:	bl	16f6c <__assert_fail@plt+0x5818>
   167bc:	add	sp, sp, #28
   167c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   167c4:	ldr	r3, [pc, #44]	; 167f8 <__assert_fail@plt+0x50a4>
   167c8:	ldr	r3, [r3]
   167cc:	mov	r2, #19
   167d0:	mov	r1, #1
   167d4:	ldr	r0, [pc, #36]	; 16800 <__assert_fail@plt+0x50ac>
   167d8:	bl	114d8 <fwrite@plt>
   167dc:	b	1679c <__assert_fail@plt+0x5048>
   167e0:	mov	r1, r5
   167e4:	mov	r0, r7
   167e8:	bl	12f74 <__assert_fail@plt+0x1820>
   167ec:	b	167bc <__assert_fail@plt+0x5068>
   167f0:	andeq	r2, r3, ip, ror #3
   167f4:	andeq	lr, r1, r8, ror r0
   167f8:	ldrdeq	r2, [r3], -r8
   167fc:	andeq	r1, r2, r0, ror #4
   16800:	andeq	r1, r2, r4, ror r2
   16804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16808:	sub	sp, sp, #292	; 0x124
   1680c:	mov	r4, r0
   16810:	ldrb	r9, [r0]
   16814:	cmp	r9, #32
   16818:	bne	16898 <__assert_fail@plt+0x5144>
   1681c:	mov	r3, r0
   16820:	ldrb	r9, [r3, #1]!
   16824:	cmp	r9, #32
   16828:	beq	16820 <__assert_fail@plt+0x50cc>
   1682c:	cmp	r9, #43	; 0x2b
   16830:	movne	r9, r3
   16834:	addeq	r9, r3, #1
   16838:	mov	r3, r9
   1683c:	mov	r2, #4
   16840:	mov	r1, #0
   16844:	ldrb	r8, [r3], #1
   16848:	cmp	r8, #0
   1684c:	beq	168a0 <__assert_fail@plt+0x514c>
   16850:	mov	r2, r1
   16854:	sub	r8, r8, #48	; 0x30
   16858:	cmp	r8, #9
   1685c:	bls	16844 <__assert_fail@plt+0x50f0>
   16860:	mov	r2, #5
   16864:	ldr	r1, [pc, #1220]	; 16d30 <__assert_fail@plt+0x55dc>
   16868:	mov	r0, #0
   1686c:	bl	11430 <dcgettext@plt>
   16870:	mov	r5, r0
   16874:	mov	r0, r4
   16878:	bl	1a0c4 <__assert_fail@plt+0x8970>
   1687c:	mov	r3, r0
   16880:	mov	r2, r5
   16884:	mov	r1, #0
   16888:	mov	r0, r1
   1688c:	bl	11520 <error@plt>
   16890:	mov	r0, #0
   16894:	b	16c88 <__assert_fail@plt+0x5534>
   16898:	mov	r3, r0
   1689c:	b	1682c <__assert_fail@plt+0x50d8>
   168a0:	cmp	r2, #0
   168a4:	bne	16d4c <__assert_fail@plt+0x55f8>
   168a8:	add	lr, r9, #1
   168ac:	ldrb	r3, [r9]
   168b0:	cmp	r3, #0
   168b4:	beq	169ec <__assert_fail@plt+0x5298>
   168b8:	sub	r3, r3, #48	; 0x30
   168bc:	mov	r4, #0
   168c0:	mov	r5, #0
   168c4:	mov	r6, r4
   168c8:	mov	r7, r5
   168cc:	mov	ip, #10
   168d0:	umull	r0, r1, r6, ip
   168d4:	mla	r1, ip, r7, r1
   168d8:	lsr	sl, r5, #31
   168dc:	add	sl, sl, r5, lsr #29
   168e0:	umull	r6, r7, r4, ip
   168e4:	mla	r7, ip, r5, r7
   168e8:	adds	r4, r4, r4
   168ec:	adc	r5, r5, r5
   168f0:	cmp	r7, r5
   168f4:	cmpeq	r6, r4
   168f8:	movcc	r2, #1
   168fc:	movcs	r2, #0
   16900:	add	sl, r2, sl
   16904:	mov	r2, r3
   16908:	mov	r3, #0
   1690c:	adds	r4, r6, r2
   16910:	adc	r5, r7, r3
   16914:	cmp	r3, r5
   16918:	cmpeq	r2, r4
   1691c:	movhi	r2, #1
   16920:	movls	r2, #0
   16924:	add	r2, r2, sl
   16928:	mov	r3, #0
   1692c:	adds	r6, r0, r2
   16930:	adc	r7, r1, r3
   16934:	cmp	r3, r7
   16938:	cmpeq	r2, r6
   1693c:	bhi	16964 <__assert_fail@plt+0x5210>
   16940:	ldrb	r2, [lr], #1
   16944:	cmp	r2, #0
   16948:	beq	16c9c <__assert_fail@plt+0x5548>
   1694c:	sub	r3, r2, #48	; 0x30
   16950:	add	r1, pc, #976	; 0x3d0
   16954:	ldrd	r0, [r1]
   16958:	cmp	r7, r1
   1695c:	cmpeq	r6, r0
   16960:	bls	168d0 <__assert_fail@plt+0x517c>
   16964:	ldr	r3, [pc, #968]	; 16d34 <__assert_fail@plt+0x55e0>
   16968:	ldrb	r3, [r3, #8]
   1696c:	cmp	r3, #0
   16970:	bne	16b94 <__assert_fail@plt+0x5440>
   16974:	mov	r2, #10
   16978:	mov	r1, r9
   1697c:	add	r0, sp, #276	; 0x114
   16980:	bl	116f4 <__gmpz_init_set_str@plt>
   16984:	ldr	r4, [pc, #940]	; 16d38 <__assert_fail@plt+0x55e4>
   16988:	add	r2, sp, #276	; 0x114
   1698c:	mov	r1, #10
   16990:	ldr	r0, [r4]
   16994:	bl	114b4 <__gmpz_out_str@plt>
   16998:	ldr	r0, [r4]
   1699c:	ldr	r3, [r0, #20]
   169a0:	ldr	r2, [r0, #24]
   169a4:	cmp	r3, r2
   169a8:	addcc	r2, r3, #1
   169ac:	strcc	r2, [r0, #20]
   169b0:	movcc	r2, #58	; 0x3a
   169b4:	strbcc	r2, [r3]
   169b8:	bcs	16bb0 <__assert_fail@plt+0x545c>
   169bc:	add	r1, sp, #264	; 0x108
   169c0:	add	r0, sp, #276	; 0x114
   169c4:	bl	1663c <__assert_fail@plt+0x4ee8>
   169c8:	ldr	r3, [sp, #272]	; 0x110
   169cc:	cmp	r3, #0
   169d0:	beq	16c40 <__assert_fail@plt+0x54ec>
   169d4:	mov	r6, r8
   169d8:	mov	fp, r8
   169dc:	ldr	r5, [pc, #852]	; 16d38 <__assert_fail@plt+0x55e4>
   169e0:	mov	sl, #32
   169e4:	mov	r9, #10
   169e8:	b	16c24 <__assert_fail@plt+0x54d0>
   169ec:	mov	r4, #0
   169f0:	mov	r5, #0
   169f4:	mov	r6, r4
   169f8:	mov	r7, r5
   169fc:	b	16ca8 <__assert_fail@plt+0x5554>
   16a00:	mov	r4, #0
   16a04:	mov	r5, #0
   16a08:	mov	r6, r4
   16a0c:	mov	r7, r5
   16a10:	b	16ca8 <__assert_fail@plt+0x5554>
   16a14:	ldr	r3, [pc, #800]	; 16d3c <__assert_fail@plt+0x55e8>
   16a18:	ldr	r3, [r3]
   16a1c:	mov	r2, #36	; 0x24
   16a20:	mov	r1, #1
   16a24:	ldr	r0, [pc, #788]	; 16d40 <__assert_fail@plt+0x55ec>
   16a28:	bl	114d8 <fwrite@plt>
   16a2c:	b	16cb8 <__assert_fail@plt+0x5564>
   16a30:	ldr	r3, [r5, #4]
   16a34:	add	r2, r3, #1
   16a38:	str	r2, [r5, #4]
   16a3c:	strb	r9, [r3]
   16a40:	ldrd	r2, [r6]
   16a44:	mov	r0, #0
   16a48:	mov	r1, #0
   16a4c:	bl	12d00 <__assert_fail@plt+0x15ac>
   16a50:	add	r4, r4, #1
   16a54:	ldrb	r3, [r7]
   16a58:	cmp	r4, r3
   16a5c:	bcc	16a30 <__assert_fail@plt+0x52dc>
   16a60:	add	fp, fp, #1
   16a64:	add	sl, sl, #1
   16a68:	add	r6, r6, #8
   16a6c:	ldrb	r3, [sp, #258]	; 0x102
   16a70:	cmp	fp, r3
   16a74:	bcs	16a90 <__assert_fail@plt+0x533c>
   16a78:	mov	r7, sl
   16a7c:	ldrb	r3, [sl]
   16a80:	cmp	r3, #0
   16a84:	movne	r4, r8
   16a88:	bne	16a30 <__assert_fail@plt+0x52dc>
   16a8c:	b	16a60 <__assert_fail@plt+0x530c>
   16a90:	ldrd	r2, [sp, #16]
   16a94:	orrs	r3, r2, r3
   16a98:	bne	16aec <__assert_fail@plt+0x5398>
   16a9c:	ldr	r3, [pc, #656]	; 16d34 <__assert_fail@plt+0x55e0>
   16aa0:	ldr	r2, [r3, #4]
   16aa4:	add	r5, r2, #1
   16aa8:	str	r5, [r3, #4]
   16aac:	mov	r1, #10
   16ab0:	strb	r1, [r2]
   16ab4:	ldr	r4, [r3]
   16ab8:	sub	r6, r5, r4
   16abc:	ldr	r3, [pc, #640]	; 16d44 <__assert_fail@plt+0x55f0>
   16ac0:	ldr	r3, [r3]
   16ac4:	cmn	r3, #1
   16ac8:	beq	16b14 <__assert_fail@plt+0x53c0>
   16acc:	ldr	r3, [pc, #624]	; 16d44 <__assert_fail@plt+0x55f0>
   16ad0:	ldr	r3, [r3]
   16ad4:	cmp	r3, #0
   16ad8:	bne	16b44 <__assert_fail@plt+0x53f0>
   16adc:	cmp	r6, #512	; 0x200
   16ae0:	addcs	r4, r4, #512	; 0x200
   16ae4:	bcs	16b50 <__assert_fail@plt+0x53fc>
   16ae8:	b	16b8c <__assert_fail@plt+0x5438>
   16aec:	ldr	r2, [pc, #576]	; 16d34 <__assert_fail@plt+0x55e0>
   16af0:	ldr	r3, [r2, #4]
   16af4:	add	r1, r3, #1
   16af8:	str	r1, [r2, #4]
   16afc:	mov	r2, #32
   16b00:	strb	r2, [r3]
   16b04:	ldrd	r2, [sp, #8]
   16b08:	ldrd	r0, [sp, #16]
   16b0c:	bl	12d00 <__assert_fail@plt+0x15ac>
   16b10:	b	16a9c <__assert_fail@plt+0x5348>
   16b14:	mov	r0, #0
   16b18:	bl	11730 <isatty@plt>
   16b1c:	cmp	r0, #0
   16b20:	movne	r0, #1
   16b24:	bne	16b38 <__assert_fail@plt+0x53e4>
   16b28:	mov	r0, #1
   16b2c:	bl	11730 <isatty@plt>
   16b30:	adds	r0, r0, #0
   16b34:	movne	r0, #1
   16b38:	ldr	r3, [pc, #516]	; 16d44 <__assert_fail@plt+0x55f0>
   16b3c:	str	r0, [r3]
   16b40:	b	16acc <__assert_fail@plt+0x5378>
   16b44:	bl	11a94 <__assert_fail@plt+0x340>
   16b48:	b	16b8c <__assert_fail@plt+0x5438>
   16b4c:	mov	r4, r2
   16b50:	sub	r2, r4, #1
   16b54:	ldrb	r3, [r4, #-1]
   16b58:	cmp	r3, #10
   16b5c:	bne	16b4c <__assert_fail@plt+0x53f8>
   16b60:	ldr	r7, [pc, #460]	; 16d34 <__assert_fail@plt+0x55e0>
   16b64:	str	r4, [r7, #4]
   16b68:	bl	11a94 <__assert_fail@plt+0x340>
   16b6c:	ldr	r6, [r7]
   16b70:	sub	r5, r5, r4
   16b74:	mov	r2, r5
   16b78:	mov	r1, r4
   16b7c:	mov	r0, r6
   16b80:	bl	113f4 <memcpy@plt>
   16b84:	add	r5, r6, r5
   16b88:	str	r5, [r7, #4]
   16b8c:	mov	r0, #1
   16b90:	b	16c88 <__assert_fail@plt+0x5534>
   16b94:	ldr	r3, [pc, #416]	; 16d3c <__assert_fail@plt+0x55e8>
   16b98:	ldr	r3, [r3]
   16b9c:	mov	r2, #39	; 0x27
   16ba0:	mov	r1, #1
   16ba4:	ldr	r0, [pc, #412]	; 16d48 <__assert_fail@plt+0x55f4>
   16ba8:	bl	114d8 <fwrite@plt>
   16bac:	b	16974 <__assert_fail@plt+0x5220>
   16bb0:	mov	r1, #58	; 0x3a
   16bb4:	bl	116b8 <__overflow@plt>
   16bb8:	b	169bc <__assert_fail@plt+0x5268>
   16bbc:	ldr	r2, [sp, #264]	; 0x108
   16bc0:	add	r2, r2, r7
   16bc4:	mov	r1, r9
   16bc8:	ldr	r0, [r5]
   16bcc:	bl	114b4 <__gmpz_out_str@plt>
   16bd0:	add	r4, r4, #1
   16bd4:	ldr	r3, [sp, #268]	; 0x10c
   16bd8:	ldr	r3, [r3, r6]
   16bdc:	cmp	r3, r4
   16be0:	bls	16c10 <__assert_fail@plt+0x54bc>
   16be4:	ldr	r0, [r5]
   16be8:	ldr	r3, [r0, #20]
   16bec:	ldr	r2, [r0, #24]
   16bf0:	cmp	r3, r2
   16bf4:	addcc	r2, r3, #1
   16bf8:	strcc	r2, [r0, #20]
   16bfc:	strbcc	sl, [r3]
   16c00:	bcc	16bbc <__assert_fail@plt+0x5468>
   16c04:	mov	r1, sl
   16c08:	bl	116b8 <__overflow@plt>
   16c0c:	b	16bbc <__assert_fail@plt+0x5468>
   16c10:	add	fp, fp, #1
   16c14:	add	r6, r6, #4
   16c18:	ldr	r3, [sp, #272]	; 0x110
   16c1c:	cmp	r3, fp
   16c20:	bls	16c40 <__assert_fail@plt+0x54ec>
   16c24:	ldr	r3, [sp, #268]	; 0x10c
   16c28:	ldr	r3, [r3, r6]
   16c2c:	cmp	r3, #0
   16c30:	beq	16c10 <__assert_fail@plt+0x54bc>
   16c34:	add	r7, r6, r6, lsl #1
   16c38:	mov	r4, r8
   16c3c:	b	16be4 <__assert_fail@plt+0x5490>
   16c40:	add	r0, sp, #264	; 0x108
   16c44:	bl	11b04 <__assert_fail@plt+0x3b0>
   16c48:	add	r0, sp, #276	; 0x114
   16c4c:	bl	115d4 <__gmpz_clear@plt>
   16c50:	ldr	r3, [pc, #224]	; 16d38 <__assert_fail@plt+0x55e4>
   16c54:	ldr	r0, [r3]
   16c58:	ldr	r3, [r0, #20]
   16c5c:	ldr	r2, [r0, #24]
   16c60:	cmp	r3, r2
   16c64:	addcc	r2, r3, #1
   16c68:	strcc	r2, [r0, #20]
   16c6c:	movcc	r2, #10
   16c70:	strbcc	r2, [r3]
   16c74:	bcs	16c90 <__assert_fail@plt+0x553c>
   16c78:	ldr	r3, [pc, #184]	; 16d38 <__assert_fail@plt+0x55e4>
   16c7c:	ldr	r0, [r3]
   16c80:	bl	114c0 <fflush_unlocked@plt>
   16c84:	mov	r0, #1
   16c88:	add	sp, sp, #292	; 0x124
   16c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c90:	mov	r1, #10
   16c94:	bl	116b8 <__overflow@plt>
   16c98:	b	16c78 <__assert_fail@plt+0x5524>
   16c9c:	cmp	r6, #0
   16ca0:	sbcs	r3, r7, #0
   16ca4:	blt	16964 <__assert_fail@plt+0x5210>
   16ca8:	ldr	r3, [pc, #132]	; 16d34 <__assert_fail@plt+0x55e0>
   16cac:	ldrb	r3, [r3, #8]
   16cb0:	cmp	r3, #0
   16cb4:	bne	16a14 <__assert_fail@plt+0x52c0>
   16cb8:	mov	r2, r4
   16cbc:	mov	r3, r5
   16cc0:	mov	r0, r6
   16cc4:	mov	r1, r7
   16cc8:	bl	12d00 <__assert_fail@plt+0x15ac>
   16ccc:	ldr	r2, [pc, #96]	; 16d34 <__assert_fail@plt+0x55e0>
   16cd0:	ldr	r3, [r2, #4]
   16cd4:	add	r1, r3, #1
   16cd8:	str	r1, [r2, #4]
   16cdc:	mov	r2, #58	; 0x3a
   16ce0:	strb	r2, [r3]
   16ce4:	add	r3, sp, #8
   16ce8:	str	r3, [sp]
   16cec:	mov	r2, r4
   16cf0:	mov	r3, r5
   16cf4:	mov	r0, r6
   16cf8:	mov	r1, r7
   16cfc:	bl	147cc <__assert_fail@plt+0x3078>
   16d00:	ldrb	r3, [sp, #258]	; 0x102
   16d04:	cmp	r3, #0
   16d08:	beq	16a90 <__assert_fail@plt+0x533c>
   16d0c:	add	sl, sp, #232	; 0xe8
   16d10:	add	r6, sp, #24
   16d14:	mov	fp, r8
   16d18:	ldr	r5, [pc, #20]	; 16d34 <__assert_fail@plt+0x55e0>
   16d1c:	mov	r9, #32
   16d20:	b	16a78 <__assert_fail@plt+0x5324>
   16d24:	nop			; (mov r0, r0)
   16d28:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   16d2c:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   16d30:			; <UNDEFINED> instruction: 0x000212b0
   16d34:	andeq	r2, r3, ip, ror #3
   16d38:	andeq	r2, r3, r4, ror #3
   16d3c:	ldrdeq	r2, [r3], -r8
   16d40:	andeq	r1, r2, r8, lsl #5
   16d44:	andeq	r2, r3, r8, ror r1
   16d48:	ldrdeq	r1, [r2], -r4
   16d4c:	cmp	r2, #0
   16d50:	beq	16a00 <__assert_fail@plt+0x52ac>
   16d54:	cmp	r2, #1
   16d58:	bne	16860 <__assert_fail@plt+0x510c>
   16d5c:	b	16964 <__assert_fail@plt+0x5210>
   16d60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d64:	sub	sp, sp, #84	; 0x54
   16d68:	mov	r6, r0
   16d6c:	mov	r1, #1
   16d70:	bl	1170c <__gmpz_cmp_ui@plt>
   16d74:	cmp	r0, #0
   16d78:	ble	16f48 <__assert_fail@plt+0x57f4>
   16d7c:	ldr	r1, [pc, #476]	; 16f60 <__assert_fail@plt+0x580c>
   16d80:	mov	r0, r6
   16d84:	bl	1170c <__gmpz_cmp_ui@plt>
   16d88:	cmp	r0, #0
   16d8c:	blt	16f54 <__assert_fail@plt+0x5800>
   16d90:	add	r4, sp, #68	; 0x44
   16d94:	mov	r5, #0
   16d98:	str	r5, [sp]
   16d9c:	add	r3, sp, #32
   16da0:	add	r2, sp, #44	; 0x2c
   16da4:	add	r1, sp, #56	; 0x38
   16da8:	mov	r0, r4
   16dac:	bl	11460 <__gmpz_inits@plt>
   16db0:	mov	r2, #1
   16db4:	mov	r1, r6
   16db8:	add	r0, sp, #44	; 0x2c
   16dbc:	bl	113a0 <__gmpz_sub_ui@plt>
   16dc0:	mov	r1, r5
   16dc4:	add	r0, sp, #44	; 0x2c
   16dc8:	bl	11364 <__gmpz_scan1@plt>
   16dcc:	mov	sl, r0
   16dd0:	mov	r2, r0
   16dd4:	add	r1, sp, #44	; 0x2c
   16dd8:	mov	r0, r4
   16ddc:	bl	1161c <__gmpz_tdiv_q_2exp@plt>
   16de0:	mov	r1, #2
   16de4:	add	r0, sp, #56	; 0x38
   16de8:	bl	113d0 <__gmpz_set_ui@plt>
   16dec:	str	sl, [sp, #4]
   16df0:	str	r4, [sp]
   16df4:	add	r3, sp, #32
   16df8:	add	r2, sp, #56	; 0x38
   16dfc:	add	r1, sp, #44	; 0x2c
   16e00:	mov	r0, r6
   16e04:	bl	12e98 <__assert_fail@plt+0x1744>
   16e08:	subs	r3, r0, #0
   16e0c:	str	r3, [sp, #12]
   16e10:	beq	16f20 <__assert_fail@plt+0x57cc>
   16e14:	add	r1, sp, #44	; 0x2c
   16e18:	add	r0, sp, #32
   16e1c:	bl	1146c <__gmpz_set@plt>
   16e20:	add	r1, sp, #20
   16e24:	add	r0, sp, #32
   16e28:	bl	1663c <__assert_fail@plt+0x4ee8>
   16e2c:	ldr	r3, [pc, #304]	; 16f64 <__assert_fail@plt+0x5810>
   16e30:	sub	r8, r3, #1
   16e34:	add	r3, r3, #664	; 0x298
   16e38:	add	r9, r3, #3
   16e3c:	mov	r7, #1
   16e40:	add	fp, sp, #68	; 0x44
   16e44:	b	16e8c <__assert_fail@plt+0x5738>
   16e48:	cmp	r0, #0
   16e4c:	bne	16f18 <__assert_fail@plt+0x57c4>
   16e50:	ldrb	r2, [r8, #1]!
   16e54:	add	r1, sp, #56	; 0x38
   16e58:	mov	r0, r1
   16e5c:	bl	11568 <__gmpz_add_ui@plt>
   16e60:	str	sl, [sp, #4]
   16e64:	str	fp, [sp]
   16e68:	add	r3, sp, #32
   16e6c:	add	r2, sp, #56	; 0x38
   16e70:	add	r1, sp, #44	; 0x2c
   16e74:	mov	r0, r6
   16e78:	bl	12e98 <__assert_fail@plt+0x1744>
   16e7c:	cmp	r0, #0
   16e80:	beq	16f14 <__assert_fail@plt+0x57c0>
   16e84:	cmp	r9, r8
   16e88:	beq	16ef0 <__assert_fail@plt+0x579c>
   16e8c:	ldr	r3, [sp, #28]
   16e90:	cmp	r3, #0
   16e94:	beq	16f18 <__assert_fail@plt+0x57c4>
   16e98:	mov	r4, #0
   16e9c:	mov	r5, r4
   16ea0:	ldr	r2, [sp, #20]
   16ea4:	add	r2, r2, r4
   16ea8:	add	r1, sp, #44	; 0x2c
   16eac:	add	r0, sp, #32
   16eb0:	bl	11454 <__gmpz_divexact@plt>
   16eb4:	mov	r3, r6
   16eb8:	add	r2, sp, #32
   16ebc:	add	r1, sp, #56	; 0x38
   16ec0:	mov	r0, r2
   16ec4:	bl	1143c <__gmpz_powm@plt>
   16ec8:	mov	r1, r7
   16ecc:	add	r0, sp, #32
   16ed0:	bl	1170c <__gmpz_cmp_ui@plt>
   16ed4:	add	r5, r5, #1
   16ed8:	add	r4, r4, #12
   16edc:	ldr	r3, [sp, #28]
   16ee0:	cmp	r0, #0
   16ee4:	cmpne	r3, r5
   16ee8:	bhi	16ea0 <__assert_fail@plt+0x574c>
   16eec:	b	16e48 <__assert_fail@plt+0x56f4>
   16ef0:	mov	r2, #5
   16ef4:	ldr	r1, [pc, #108]	; 16f68 <__assert_fail@plt+0x5814>
   16ef8:	mov	r0, #0
   16efc:	bl	11430 <dcgettext@plt>
   16f00:	mov	r2, r0
   16f04:	mov	r1, #0
   16f08:	mov	r0, r1
   16f0c:	bl	11520 <error@plt>
   16f10:	bl	11748 <abort@plt>
   16f14:	str	r0, [sp, #12]
   16f18:	add	r0, sp, #20
   16f1c:	bl	11b04 <__assert_fail@plt+0x3b0>
   16f20:	mov	r3, #0
   16f24:	str	r3, [sp]
   16f28:	add	r3, sp, #32
   16f2c:	add	r2, sp, #44	; 0x2c
   16f30:	add	r1, sp, #56	; 0x38
   16f34:	add	r0, sp, #68	; 0x44
   16f38:	bl	113ac <__gmpz_clears@plt>
   16f3c:	ldr	r0, [sp, #12]
   16f40:	add	sp, sp, #84	; 0x54
   16f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f48:	mov	r3, #0
   16f4c:	str	r3, [sp, #12]
   16f50:	b	16f3c <__assert_fail@plt+0x57e8>
   16f54:	mov	r3, #1
   16f58:	str	r3, [sp, #12]
   16f5c:	b	16f3c <__assert_fail@plt+0x57e8>
   16f60:	cmneq	sp, r9, ror sp
   16f64:	andeq	lr, r1, r8, ror r0
   16f68:	andeq	r1, r2, r8, lsl r2
   16f6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f70:	sub	sp, sp, #100	; 0x64
   16f74:	mov	sl, r0
   16f78:	mov	fp, r1
   16f7c:	str	r2, [sp, #20]
   16f80:	ldr	r3, [pc, #792]	; 172a0 <__assert_fail@plt+0x5b4c>
   16f84:	ldrb	r3, [r3, #8]
   16f88:	cmp	r3, #0
   16f8c:	bne	16fe4 <__assert_fail@plt+0x5890>
   16f90:	mov	r2, #0
   16f94:	add	r1, sp, #24
   16f98:	add	r0, sp, #36	; 0x24
   16f9c:	bl	11460 <__gmpz_inits@plt>
   16fa0:	mov	r1, #2
   16fa4:	add	r0, sp, #60	; 0x3c
   16fa8:	bl	1155c <__gmpz_init_set_si@plt>
   16fac:	mov	r1, #2
   16fb0:	add	r0, sp, #84	; 0x54
   16fb4:	bl	1155c <__gmpz_init_set_si@plt>
   16fb8:	mov	r1, #2
   16fbc:	add	r0, sp, #72	; 0x48
   16fc0:	bl	1155c <__gmpz_init_set_si@plt>
   16fc4:	mov	r1, #1
   16fc8:	add	r0, sp, #48	; 0x30
   16fcc:	bl	11694 <__gmpz_init_set_ui@plt>
   16fd0:	mov	r6, #1
   16fd4:	mov	r7, #0
   16fd8:	mov	r4, r6
   16fdc:	mov	r5, r7
   16fe0:	b	1721c <__assert_fail@plt+0x5ac8>
   16fe4:	mov	r3, r1
   16fe8:	ldr	r2, [pc, #692]	; 172a4 <__assert_fail@plt+0x5b50>
   16fec:	mov	r1, #1
   16ff0:	ldr	r0, [pc, #688]	; 172a8 <__assert_fail@plt+0x5b54>
   16ff4:	ldr	r0, [r0]
   16ff8:	bl	1164c <__fprintf_chk@plt>
   16ffc:	b	16f90 <__assert_fail@plt+0x583c>
   17000:	subs	r4, r4, #1
   17004:	sbc	r5, r5, #0
   17008:	orrs	r3, r4, r5
   1700c:	beq	170b8 <__assert_fail@plt+0x5964>
   17010:	add	r2, sp, #84	; 0x54
   17014:	mov	r1, r2
   17018:	add	r0, sp, #36	; 0x24
   1701c:	bl	11484 <__gmpz_mul@plt>
   17020:	mov	r2, sl
   17024:	add	r1, sp, #36	; 0x24
   17028:	add	r0, sp, #84	; 0x54
   1702c:	bl	11688 <__gmpz_mod@plt>
   17030:	mov	r2, fp
   17034:	add	r1, sp, #84	; 0x54
   17038:	mov	r0, r1
   1703c:	bl	11568 <__gmpz_add_ui@plt>
   17040:	add	r2, sp, #84	; 0x54
   17044:	add	r1, sp, #72	; 0x48
   17048:	add	r0, sp, #36	; 0x24
   1704c:	bl	11400 <__gmpz_sub@plt>
   17050:	add	r2, sp, #36	; 0x24
   17054:	add	r1, sp, #48	; 0x30
   17058:	add	r0, sp, #24
   1705c:	bl	11484 <__gmpz_mul@plt>
   17060:	mov	r2, sl
   17064:	add	r1, sp, #24
   17068:	add	r0, sp, #48	; 0x30
   1706c:	bl	11688 <__gmpz_mod@plt>
   17070:	and	r2, r4, #31
   17074:	mov	r3, #0
   17078:	cmp	r3, #0
   1707c:	cmpeq	r2, #1
   17080:	bne	17000 <__assert_fail@plt+0x58ac>
   17084:	mov	r2, sl
   17088:	add	r1, sp, #48	; 0x30
   1708c:	add	r0, sp, #36	; 0x24
   17090:	bl	116e8 <__gmpz_gcd@plt>
   17094:	mov	r1, #1
   17098:	add	r0, sp, #36	; 0x24
   1709c:	bl	1170c <__gmpz_cmp_ui@plt>
   170a0:	cmp	r0, #0
   170a4:	bne	17138 <__assert_fail@plt+0x59e4>
   170a8:	add	r1, sp, #84	; 0x54
   170ac:	add	r0, sp, #60	; 0x3c
   170b0:	bl	1146c <__gmpz_set@plt>
   170b4:	b	17000 <__assert_fail@plt+0x58ac>
   170b8:	add	r1, sp, #84	; 0x54
   170bc:	add	r0, sp, #72	; 0x48
   170c0:	bl	1146c <__gmpz_set@plt>
   170c4:	adds	r8, r6, r6
   170c8:	adc	r9, r7, r7
   170cc:	orrs	r3, r6, r7
   170d0:	beq	17118 <__assert_fail@plt+0x59c4>
   170d4:	add	r2, sp, #84	; 0x54
   170d8:	mov	r1, r2
   170dc:	add	r0, sp, #36	; 0x24
   170e0:	bl	11484 <__gmpz_mul@plt>
   170e4:	mov	r2, sl
   170e8:	add	r1, sp, #36	; 0x24
   170ec:	add	r0, sp, #84	; 0x54
   170f0:	bl	11688 <__gmpz_mod@plt>
   170f4:	mov	r2, fp
   170f8:	add	r1, sp, #84	; 0x54
   170fc:	mov	r0, r1
   17100:	bl	11568 <__gmpz_add_ui@plt>
   17104:	adds	r4, r4, #1
   17108:	adc	r5, r5, #0
   1710c:	cmp	r5, r7
   17110:	cmpeq	r4, r6
   17114:	bne	170d4 <__assert_fail@plt+0x5980>
   17118:	add	r1, sp, #84	; 0x54
   1711c:	add	r0, sp, #60	; 0x3c
   17120:	bl	1146c <__gmpz_set@plt>
   17124:	mov	r4, r6
   17128:	mov	r5, r7
   1712c:	mov	r6, r8
   17130:	mov	r7, r9
   17134:	b	17010 <__assert_fail@plt+0x58bc>
   17138:	add	r2, sp, #60	; 0x3c
   1713c:	mov	r1, r2
   17140:	add	r0, sp, #36	; 0x24
   17144:	bl	11484 <__gmpz_mul@plt>
   17148:	mov	r2, sl
   1714c:	add	r1, sp, #36	; 0x24
   17150:	add	r0, sp, #60	; 0x3c
   17154:	bl	11688 <__gmpz_mod@plt>
   17158:	mov	r2, fp
   1715c:	add	r1, sp, #60	; 0x3c
   17160:	mov	r0, r1
   17164:	bl	11568 <__gmpz_add_ui@plt>
   17168:	add	r2, sp, #60	; 0x3c
   1716c:	add	r1, sp, #72	; 0x48
   17170:	add	r0, sp, #36	; 0x24
   17174:	bl	11400 <__gmpz_sub@plt>
   17178:	mov	r2, sl
   1717c:	add	r1, sp, #36	; 0x24
   17180:	mov	r0, r1
   17184:	bl	116e8 <__gmpz_gcd@plt>
   17188:	mov	r1, #1
   1718c:	add	r0, sp, #36	; 0x24
   17190:	bl	1170c <__gmpz_cmp_ui@plt>
   17194:	cmp	r0, #0
   17198:	beq	17138 <__assert_fail@plt+0x59e4>
   1719c:	add	r2, sp, #36	; 0x24
   171a0:	mov	r1, sl
   171a4:	mov	r0, sl
   171a8:	bl	11454 <__gmpz_divexact@plt>
   171ac:	add	r0, sp, #36	; 0x24
   171b0:	bl	16d60 <__assert_fail@plt+0x560c>
   171b4:	cmp	r0, #0
   171b8:	bne	17250 <__assert_fail@plt+0x5afc>
   171bc:	ldr	r3, [pc, #220]	; 172a0 <__assert_fail@plt+0x5b4c>
   171c0:	ldrb	r3, [r3, #8]
   171c4:	cmp	r3, #0
   171c8:	bne	17234 <__assert_fail@plt+0x5ae0>
   171cc:	ldr	r2, [sp, #20]
   171d0:	add	r1, fp, #1
   171d4:	add	r0, sp, #36	; 0x24
   171d8:	bl	16f6c <__assert_fail@plt+0x5818>
   171dc:	mov	r0, sl
   171e0:	bl	16d60 <__assert_fail@plt+0x560c>
   171e4:	cmp	r0, #0
   171e8:	bne	17260 <__assert_fail@plt+0x5b0c>
   171ec:	mov	r2, sl
   171f0:	add	r1, sp, #84	; 0x54
   171f4:	mov	r0, r1
   171f8:	bl	11688 <__gmpz_mod@plt>
   171fc:	mov	r2, sl
   17200:	add	r1, sp, #72	; 0x48
   17204:	mov	r0, r1
   17208:	bl	11688 <__gmpz_mod@plt>
   1720c:	mov	r2, sl
   17210:	add	r1, sp, #60	; 0x3c
   17214:	mov	r0, r1
   17218:	bl	11688 <__gmpz_mod@plt>
   1721c:	mov	r1, #1
   17220:	mov	r0, sl
   17224:	bl	1170c <__gmpz_cmp_ui@plt>
   17228:	cmp	r0, #0
   1722c:	bne	17010 <__assert_fail@plt+0x58bc>
   17230:	b	1726c <__assert_fail@plt+0x5b18>
   17234:	ldr	r3, [pc, #108]	; 172a8 <__assert_fail@plt+0x5b54>
   17238:	ldr	r3, [r3]
   1723c:	mov	r2, #43	; 0x2b
   17240:	mov	r1, #1
   17244:	ldr	r0, [pc, #96]	; 172ac <__assert_fail@plt+0x5b58>
   17248:	bl	114d8 <fwrite@plt>
   1724c:	b	171cc <__assert_fail@plt+0x5a78>
   17250:	add	r1, sp, #36	; 0x24
   17254:	ldr	r0, [sp, #20]
   17258:	bl	12f74 <__assert_fail@plt+0x1820>
   1725c:	b	171dc <__assert_fail@plt+0x5a88>
   17260:	mov	r1, sl
   17264:	ldr	r0, [sp, #20]
   17268:	bl	12f74 <__assert_fail@plt+0x1820>
   1726c:	mov	r3, #0
   17270:	str	r3, [sp, #8]
   17274:	add	r3, sp, #60	; 0x3c
   17278:	str	r3, [sp, #4]
   1727c:	add	r3, sp, #84	; 0x54
   17280:	str	r3, [sp]
   17284:	add	r3, sp, #72	; 0x48
   17288:	add	r2, sp, #36	; 0x24
   1728c:	add	r1, sp, #24
   17290:	add	r0, sp, #48	; 0x30
   17294:	bl	113ac <__gmpz_clears@plt>
   17298:	add	sp, sp, #100	; 0x64
   1729c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172a0:	andeq	r2, r3, ip, ror #3
   172a4:	strdeq	r1, [r2], -ip
   172a8:	ldrdeq	r2, [r3], -r8
   172ac:	andeq	r1, r2, r4, lsl r3
   172b0:	push	{lr}		; (str lr, [sp, #-4]!)
   172b4:	sub	sp, sp, #60	; 0x3c
   172b8:	subs	r6, r0, #0
   172bc:	beq	172f8 <__assert_fail@plt+0x5ba4>
   172c0:	ldr	r3, [pc, #684]	; 17574 <__assert_fail@plt+0x5e20>
   172c4:	ldr	r4, [r3]
   172c8:	mov	r2, #5
   172cc:	ldr	r1, [pc, #676]	; 17578 <__assert_fail@plt+0x5e24>
   172d0:	mov	r0, #0
   172d4:	bl	11430 <dcgettext@plt>
   172d8:	ldr	r3, [pc, #668]	; 1757c <__assert_fail@plt+0x5e28>
   172dc:	ldr	r3, [r3]
   172e0:	mov	r2, r0
   172e4:	mov	r1, #1
   172e8:	mov	r0, r4
   172ec:	bl	1164c <__fprintf_chk@plt>
   172f0:	mov	r0, r6
   172f4:	bl	11598 <exit@plt>
   172f8:	mov	r2, #5
   172fc:	ldr	r1, [pc, #636]	; 17580 <__assert_fail@plt+0x5e2c>
   17300:	mov	r0, #0
   17304:	bl	11430 <dcgettext@plt>
   17308:	ldr	r3, [pc, #620]	; 1757c <__assert_fail@plt+0x5e28>
   1730c:	ldr	r2, [r3]
   17310:	mov	r3, r2
   17314:	mov	r1, r0
   17318:	mov	r0, #1
   1731c:	bl	11628 <__printf_chk@plt>
   17320:	mov	r2, #5
   17324:	ldr	r1, [pc, #600]	; 17584 <__assert_fail@plt+0x5e30>
   17328:	mov	r0, #0
   1732c:	bl	11430 <dcgettext@plt>
   17330:	ldr	r4, [pc, #592]	; 17588 <__assert_fail@plt+0x5e34>
   17334:	ldr	r1, [r4]
   17338:	bl	1134c <fputs_unlocked@plt>
   1733c:	mov	r2, #5
   17340:	ldr	r1, [pc, #580]	; 1758c <__assert_fail@plt+0x5e38>
   17344:	mov	r0, #0
   17348:	bl	11430 <dcgettext@plt>
   1734c:	ldr	r1, [r4]
   17350:	bl	1134c <fputs_unlocked@plt>
   17354:	mov	r2, #5
   17358:	ldr	r1, [pc, #560]	; 17590 <__assert_fail@plt+0x5e3c>
   1735c:	mov	r0, #0
   17360:	bl	11430 <dcgettext@plt>
   17364:	ldr	r1, [r4]
   17368:	bl	1134c <fputs_unlocked@plt>
   1736c:	mov	ip, sp
   17370:	ldr	lr, [pc, #540]	; 17594 <__assert_fail@plt+0x5e40>
   17374:	ldm	lr!, {r0, r1, r2, r3}
   17378:	stmia	ip!, {r0, r1, r2, r3}
   1737c:	ldm	lr!, {r0, r1, r2, r3}
   17380:	stmia	ip!, {r0, r1, r2, r3}
   17384:	ldm	lr!, {r0, r1, r2, r3}
   17388:	stmia	ip!, {r0, r1, r2, r3}
   1738c:	ldm	lr, {r0, r1}
   17390:	stm	ip, {r0, r1}
   17394:	ldr	r1, [sp]
   17398:	cmp	r1, #0
   1739c:	moveq	r4, sp
   173a0:	beq	173c8 <__assert_fail@plt+0x5c74>
   173a4:	mov	r4, sp
   173a8:	ldr	r5, [pc, #488]	; 17598 <__assert_fail@plt+0x5e44>
   173ac:	mov	r0, r5
   173b0:	bl	11388 <strcmp@plt>
   173b4:	cmp	r0, #0
   173b8:	beq	173c8 <__assert_fail@plt+0x5c74>
   173bc:	ldr	r1, [r4, #8]!
   173c0:	cmp	r1, #0
   173c4:	bne	173ac <__assert_fail@plt+0x5c58>
   173c8:	ldr	r4, [r4, #4]
   173cc:	cmp	r4, #0
   173d0:	beq	174e4 <__assert_fail@plt+0x5d90>
   173d4:	mov	r2, #5
   173d8:	ldr	r1, [pc, #444]	; 1759c <__assert_fail@plt+0x5e48>
   173dc:	mov	r0, #0
   173e0:	bl	11430 <dcgettext@plt>
   173e4:	ldr	r3, [pc, #436]	; 175a0 <__assert_fail@plt+0x5e4c>
   173e8:	ldr	r2, [pc, #436]	; 175a4 <__assert_fail@plt+0x5e50>
   173ec:	mov	r1, r0
   173f0:	mov	r0, #1
   173f4:	bl	11628 <__printf_chk@plt>
   173f8:	mov	r1, #0
   173fc:	mov	r0, #5
   17400:	bl	116c4 <setlocale@plt>
   17404:	cmp	r0, #0
   17408:	beq	17420 <__assert_fail@plt+0x5ccc>
   1740c:	mov	r2, #3
   17410:	ldr	r1, [pc, #400]	; 175a8 <__assert_fail@plt+0x5e54>
   17414:	bl	1173c <strncmp@plt>
   17418:	cmp	r0, #0
   1741c:	bne	17480 <__assert_fail@plt+0x5d2c>
   17420:	mov	r2, #5
   17424:	ldr	r1, [pc, #384]	; 175ac <__assert_fail@plt+0x5e58>
   17428:	mov	r0, #0
   1742c:	bl	11430 <dcgettext@plt>
   17430:	ldr	r5, [pc, #352]	; 17598 <__assert_fail@plt+0x5e44>
   17434:	mov	r3, r5
   17438:	ldr	r2, [pc, #352]	; 175a0 <__assert_fail@plt+0x5e4c>
   1743c:	mov	r1, r0
   17440:	mov	r0, #1
   17444:	bl	11628 <__printf_chk@plt>
   17448:	mov	r2, #5
   1744c:	ldr	r1, [pc, #348]	; 175b0 <__assert_fail@plt+0x5e5c>
   17450:	mov	r0, #0
   17454:	bl	11430 <dcgettext@plt>
   17458:	mov	r1, r0
   1745c:	ldr	r2, [pc, #336]	; 175b4 <__assert_fail@plt+0x5e60>
   17460:	ldr	r3, [pc, #336]	; 175b8 <__assert_fail@plt+0x5e64>
   17464:	cmp	r4, r5
   17468:	movne	r3, r2
   1746c:	mov	r2, r4
   17470:	mov	r0, #1
   17474:	bl	11628 <__printf_chk@plt>
   17478:	b	172f0 <__assert_fail@plt+0x5b9c>
   1747c:	ldr	r4, [pc, #276]	; 17598 <__assert_fail@plt+0x5e44>
   17480:	mov	r2, #5
   17484:	ldr	r1, [pc, #304]	; 175bc <__assert_fail@plt+0x5e68>
   17488:	mov	r0, #0
   1748c:	bl	11430 <dcgettext@plt>
   17490:	ldr	r3, [pc, #240]	; 17588 <__assert_fail@plt+0x5e34>
   17494:	ldr	r1, [r3]
   17498:	bl	1134c <fputs_unlocked@plt>
   1749c:	b	17420 <__assert_fail@plt+0x5ccc>
   174a0:	mov	r2, #5
   174a4:	ldr	r1, [pc, #256]	; 175ac <__assert_fail@plt+0x5e58>
   174a8:	mov	r0, #0
   174ac:	bl	11430 <dcgettext@plt>
   174b0:	ldr	r4, [pc, #224]	; 17598 <__assert_fail@plt+0x5e44>
   174b4:	mov	r3, r4
   174b8:	ldr	r2, [pc, #224]	; 175a0 <__assert_fail@plt+0x5e4c>
   174bc:	mov	r1, r0
   174c0:	mov	r0, #1
   174c4:	bl	11628 <__printf_chk@plt>
   174c8:	mov	r2, #5
   174cc:	ldr	r1, [pc, #220]	; 175b0 <__assert_fail@plt+0x5e5c>
   174d0:	mov	r0, #0
   174d4:	bl	11430 <dcgettext@plt>
   174d8:	mov	r1, r0
   174dc:	ldr	r3, [pc, #212]	; 175b8 <__assert_fail@plt+0x5e64>
   174e0:	b	1746c <__assert_fail@plt+0x5d18>
   174e4:	mov	r2, #5
   174e8:	ldr	r1, [pc, #172]	; 1759c <__assert_fail@plt+0x5e48>
   174ec:	mov	r0, #0
   174f0:	bl	11430 <dcgettext@plt>
   174f4:	ldr	r3, [pc, #164]	; 175a0 <__assert_fail@plt+0x5e4c>
   174f8:	ldr	r2, [pc, #164]	; 175a4 <__assert_fail@plt+0x5e50>
   174fc:	mov	r1, r0
   17500:	mov	r0, #1
   17504:	bl	11628 <__printf_chk@plt>
   17508:	mov	r1, #0
   1750c:	mov	r0, #5
   17510:	bl	116c4 <setlocale@plt>
   17514:	cmp	r0, #0
   17518:	beq	174a0 <__assert_fail@plt+0x5d4c>
   1751c:	mov	r2, #3
   17520:	ldr	r1, [pc, #128]	; 175a8 <__assert_fail@plt+0x5e54>
   17524:	bl	1173c <strncmp@plt>
   17528:	cmp	r0, #0
   1752c:	bne	1747c <__assert_fail@plt+0x5d28>
   17530:	mov	r2, #5
   17534:	ldr	r1, [pc, #112]	; 175ac <__assert_fail@plt+0x5e58>
   17538:	mov	r0, #0
   1753c:	bl	11430 <dcgettext@plt>
   17540:	ldr	r4, [pc, #80]	; 17598 <__assert_fail@plt+0x5e44>
   17544:	mov	r3, r4
   17548:	ldr	r2, [pc, #80]	; 175a0 <__assert_fail@plt+0x5e4c>
   1754c:	mov	r1, r0
   17550:	mov	r0, #1
   17554:	bl	11628 <__printf_chk@plt>
   17558:	mov	r2, #5
   1755c:	ldr	r1, [pc, #76]	; 175b0 <__assert_fail@plt+0x5e5c>
   17560:	mov	r0, #0
   17564:	bl	11430 <dcgettext@plt>
   17568:	mov	r1, r0
   1756c:	ldr	r3, [pc, #68]	; 175b8 <__assert_fail@plt+0x5e64>
   17570:	b	1746c <__assert_fail@plt+0x5d18>
   17574:	ldrdeq	r2, [r3], -r8
   17578:	andeq	r1, r2, r8, asr #6
   1757c:	andeq	r2, r3, r0, lsl #4
   17580:	andeq	r1, r2, r0, ror r3
   17584:	muleq	r2, r8, r3
   17588:	andeq	r2, r3, r4, ror #3
   1758c:	andeq	r1, r2, r0, lsr #8
   17590:	andeq	r1, r2, r0, asr r4
   17594:	ldrdeq	r1, [r2], -ip
   17598:	andeq	r1, r2, r0, asr #6
   1759c:	andeq	r1, r2, r8, lsl #9
   175a0:	andeq	r1, r2, r0, lsr #9
   175a4:	andeq	r1, r2, r8, asr #9
   175a8:	ldrdeq	r1, [r2], -r8
   175ac:	andeq	r1, r2, r4, lsr #10
   175b0:	andeq	r1, r2, r0, asr #10
   175b4:	andeq	r1, r2, ip, asr #8
   175b8:	andeq	r1, r2, ip, ror #11
   175bc:	ldrdeq	r1, [r2], -ip
   175c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   175c4:	sub	sp, sp, #24
   175c8:	mov	r6, r0
   175cc:	mov	r4, r1
   175d0:	ldr	r0, [r1]
   175d4:	bl	17a10 <__assert_fail@plt+0x62bc>
   175d8:	ldr	r1, [pc, #424]	; 17788 <__assert_fail@plt+0x6034>
   175dc:	mov	r0, #6
   175e0:	bl	116c4 <setlocale@plt>
   175e4:	ldr	r5, [pc, #416]	; 1778c <__assert_fail@plt+0x6038>
   175e8:	ldr	r1, [pc, #416]	; 17790 <__assert_fail@plt+0x603c>
   175ec:	mov	r0, r5
   175f0:	bl	11700 <bindtextdomain@plt>
   175f4:	mov	r0, r5
   175f8:	bl	1149c <textdomain@plt>
   175fc:	ldr	r3, [pc, #400]	; 17794 <__assert_fail@plt+0x6040>
   17600:	ldr	r3, [r3]
   17604:	cmp	r3, #0
   17608:	beq	17670 <__assert_fail@plt+0x5f1c>
   1760c:	ldr	r0, [pc, #388]	; 17798 <__assert_fail@plt+0x6044>
   17610:	bl	1e050 <__assert_fail@plt+0xc8fc>
   17614:	ldr	r0, [pc, #384]	; 1779c <__assert_fail@plt+0x6048>
   17618:	bl	1e050 <__assert_fail@plt+0xc8fc>
   1761c:	ldr	r8, [pc, #380]	; 177a0 <__assert_fail@plt+0x604c>
   17620:	ldr	r7, [pc, #352]	; 17788 <__assert_fail@plt+0x6034>
   17624:	mov	r5, #0
   17628:	ldr	sl, [pc, #356]	; 17794 <__assert_fail@plt+0x6040>
   1762c:	mov	r9, #1
   17630:	str	r5, [sp]
   17634:	mov	r3, r8
   17638:	mov	r2, r7
   1763c:	mov	r1, r4
   17640:	mov	r0, r6
   17644:	bl	11580 <getopt_long@plt>
   17648:	cmn	r0, #1
   1764c:	beq	176f8 <__assert_fail@plt+0x5fa4>
   17650:	cmn	r0, #2
   17654:	beq	17690 <__assert_fail@plt+0x5f3c>
   17658:	cmp	r0, #256	; 0x100
   1765c:	beq	17688 <__assert_fail@plt+0x5f34>
   17660:	cmn	r0, #3
   17664:	beq	17698 <__assert_fail@plt+0x5f44>
   17668:	mov	r0, #1
   1766c:	bl	172b0 <__assert_fail@plt+0x5b5c>
   17670:	mov	r0, #1024	; 0x400
   17674:	bl	1af04 <__assert_fail@plt+0x97b0>
   17678:	ldr	r3, [pc, #276]	; 17794 <__assert_fail@plt+0x6040>
   1767c:	str	r0, [r3]
   17680:	str	r0, [r3, #4]
   17684:	b	1760c <__assert_fail@plt+0x5eb8>
   17688:	strb	r9, [sl, #8]
   1768c:	b	17630 <__assert_fail@plt+0x5edc>
   17690:	mov	r0, #0
   17694:	bl	172b0 <__assert_fail@plt+0x5b5c>
   17698:	ldr	r3, [pc, #260]	; 177a4 <__assert_fail@plt+0x6050>
   1769c:	ldr	r5, [r3]
   176a0:	ldr	r3, [pc, #256]	; 177a8 <__assert_fail@plt+0x6054>
   176a4:	ldr	r6, [r3]
   176a8:	ldr	r1, [pc, #252]	; 177ac <__assert_fail@plt+0x6058>
   176ac:	ldr	r0, [pc, #252]	; 177b0 <__assert_fail@plt+0x605c>
   176b0:	bl	183c4 <__assert_fail@plt+0x6c70>
   176b4:	mov	r7, r0
   176b8:	ldr	r1, [pc, #244]	; 177b4 <__assert_fail@plt+0x6060>
   176bc:	ldr	r0, [pc, #244]	; 177b8 <__assert_fail@plt+0x6064>
   176c0:	bl	183c4 <__assert_fail@plt+0x6c70>
   176c4:	mov	r4, #0
   176c8:	str	r4, [sp, #12]
   176cc:	str	r0, [sp, #8]
   176d0:	str	r7, [sp, #4]
   176d4:	ldr	r3, [pc, #224]	; 177bc <__assert_fail@plt+0x6068>
   176d8:	str	r3, [sp]
   176dc:	mov	r3, r6
   176e0:	ldr	r2, [pc, #216]	; 177c0 <__assert_fail@plt+0x606c>
   176e4:	ldr	r1, [pc, #216]	; 177c4 <__assert_fail@plt+0x6070>
   176e8:	mov	r0, r5
   176ec:	bl	1ae38 <__assert_fail@plt+0x96e4>
   176f0:	mov	r0, r4
   176f4:	bl	11598 <exit@plt>
   176f8:	ldr	r3, [pc, #200]	; 177c8 <__assert_fail@plt+0x6074>
   176fc:	ldr	r5, [r3]
   17700:	cmp	r6, r5
   17704:	movgt	r7, #1
   17708:	ble	17738 <__assert_fail@plt+0x5fe4>
   1770c:	ldr	r0, [r4, r5, lsl #2]
   17710:	bl	16804 <__assert_fail@plt+0x50b0>
   17714:	cmp	r0, #0
   17718:	moveq	r7, #0
   1771c:	add	r5, r5, #1
   17720:	cmp	r6, r5
   17724:	bne	1770c <__assert_fail@plt+0x5fb8>
   17728:	eor	r0, r7, #1
   1772c:	uxtb	r0, r0
   17730:	add	sp, sp, #24
   17734:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17738:	add	r0, sp, #16
   1773c:	bl	1a0d8 <__assert_fail@plt+0x8984>
   17740:	mov	r7, #1
   17744:	ldr	r5, [pc, #128]	; 177cc <__assert_fail@plt+0x6078>
   17748:	ldr	r4, [pc, #128]	; 177d0 <__assert_fail@plt+0x607c>
   1774c:	add	r3, sp, #16
   17750:	mov	r2, #3
   17754:	mov	r1, r5
   17758:	ldr	r0, [r4]
   1775c:	bl	1a0e8 <__assert_fail@plt+0x8994>
   17760:	cmn	r0, #1
   17764:	beq	1777c <__assert_fail@plt+0x6028>
   17768:	ldr	r0, [sp, #20]
   1776c:	bl	16804 <__assert_fail@plt+0x50b0>
   17770:	and	r7, r7, r0
   17774:	uxtb	r7, r7
   17778:	b	1774c <__assert_fail@plt+0x5ff8>
   1777c:	ldr	r0, [sp, #20]
   17780:	bl	178e8 <__assert_fail@plt+0x6194>
   17784:	b	17728 <__assert_fail@plt+0x5fd4>
   17788:	andeq	r1, r2, ip, asr #8
   1778c:	andeq	r1, r2, ip, asr #9
   17790:	andeq	r1, r2, r4, ror r5
   17794:	andeq	r2, r3, ip, ror #3
   17798:	strdeq	r7, [r1], -r4
   1779c:	muleq	r1, r4, sl
   177a0:	andeq	r1, r2, r4, lsl r1
   177a4:	andeq	r2, r3, r4, ror #3
   177a8:	andeq	r2, r3, ip, ror r1
   177ac:	andeq	r1, r2, ip, lsl #11
   177b0:	andeq	r1, r2, r0, lsr #11
   177b4:			; <UNDEFINED> instruction: 0x000215b4
   177b8:	andeq	r1, r2, r4, asr #11
   177bc:	ldrdeq	r1, [r2], -r4
   177c0:	andeq	r1, r2, r8, asr #9
   177c4:	andeq	r1, r2, r0, asr #6
   177c8:	ldrdeq	r2, [r3], -r0
   177cc:	andeq	r1, r2, r0, ror #11
   177d0:	andeq	r2, r3, r0, ror #3
   177d4:	ldr	r3, [pc, #4]	; 177e0 <__assert_fail@plt+0x608c>
   177d8:	str	r0, [r3]
   177dc:	bx	lr
   177e0:	strdeq	r2, [r3], -r8
   177e4:	ldr	r3, [pc, #4]	; 177f0 <__assert_fail@plt+0x609c>
   177e8:	strb	r0, [r3, #4]
   177ec:	bx	lr
   177f0:	strdeq	r2, [r3], -r8
   177f4:	push	{r4, r5, r6, lr}
   177f8:	sub	sp, sp, #8
   177fc:	ldr	r3, [pc, #200]	; 178cc <__assert_fail@plt+0x6178>
   17800:	ldr	r0, [r3]
   17804:	bl	1b6b0 <__assert_fail@plt+0x9f5c>
   17808:	cmp	r0, #0
   1780c:	beq	17830 <__assert_fail@plt+0x60dc>
   17810:	ldr	r3, [pc, #184]	; 178d0 <__assert_fail@plt+0x617c>
   17814:	ldrb	r3, [r3, #4]
   17818:	cmp	r3, #0
   1781c:	beq	1784c <__assert_fail@plt+0x60f8>
   17820:	bl	115e0 <__errno_location@plt>
   17824:	ldr	r3, [r0]
   17828:	cmp	r3, #32
   1782c:	bne	1784c <__assert_fail@plt+0x60f8>
   17830:	ldr	r3, [pc, #156]	; 178d4 <__assert_fail@plt+0x6180>
   17834:	ldr	r0, [r3]
   17838:	bl	1b6b0 <__assert_fail@plt+0x9f5c>
   1783c:	cmp	r0, #0
   17840:	bne	178c0 <__assert_fail@plt+0x616c>
   17844:	add	sp, sp, #8
   17848:	pop	{r4, r5, r6, pc}
   1784c:	mov	r2, #5
   17850:	ldr	r1, [pc, #128]	; 178d8 <__assert_fail@plt+0x6184>
   17854:	mov	r0, #0
   17858:	bl	11430 <dcgettext@plt>
   1785c:	mov	r4, r0
   17860:	ldr	r3, [pc, #104]	; 178d0 <__assert_fail@plt+0x617c>
   17864:	ldr	r5, [r3]
   17868:	cmp	r5, #0
   1786c:	beq	178a4 <__assert_fail@plt+0x6150>
   17870:	bl	115e0 <__errno_location@plt>
   17874:	ldr	r6, [r0]
   17878:	mov	r0, r5
   1787c:	bl	19f3c <__assert_fail@plt+0x87e8>
   17880:	str	r4, [sp]
   17884:	mov	r3, r0
   17888:	ldr	r2, [pc, #76]	; 178dc <__assert_fail@plt+0x6188>
   1788c:	mov	r1, r6
   17890:	mov	r0, #0
   17894:	bl	11520 <error@plt>
   17898:	ldr	r3, [pc, #64]	; 178e0 <__assert_fail@plt+0x618c>
   1789c:	ldr	r0, [r3]
   178a0:	bl	113e8 <_exit@plt>
   178a4:	bl	115e0 <__errno_location@plt>
   178a8:	mov	r3, r4
   178ac:	ldr	r2, [pc, #48]	; 178e4 <__assert_fail@plt+0x6190>
   178b0:	ldr	r1, [r0]
   178b4:	mov	r0, #0
   178b8:	bl	11520 <error@plt>
   178bc:	b	17898 <__assert_fail@plt+0x6144>
   178c0:	ldr	r3, [pc, #24]	; 178e0 <__assert_fail@plt+0x618c>
   178c4:	ldr	r0, [r3]
   178c8:	bl	113e8 <_exit@plt>
   178cc:	andeq	r2, r3, r4, ror #3
   178d0:	strdeq	r2, [r3], -r8
   178d4:	ldrdeq	r2, [r3], -r8
   178d8:	andeq	r1, r2, r4, asr r1
   178dc:	andeq	r1, r2, r8, ror r6
   178e0:	andeq	r2, r3, r0, lsl #3
   178e4:	andeq	r1, r2, ip, ror r6
   178e8:	push	{r4, r5, lr}
   178ec:	sub	sp, sp, #12
   178f0:	mov	r5, r0
   178f4:	bl	115e0 <__errno_location@plt>
   178f8:	mov	r4, r0
   178fc:	ldr	r3, [r0]
   17900:	str	r3, [sp]
   17904:	str	r3, [sp, #4]
   17908:	mov	r3, #0
   1790c:	str	r3, [r0]
   17910:	mov	r0, r5
   17914:	bl	113dc <free@plt>
   17918:	ldr	r3, [r4]
   1791c:	cmp	r3, #0
   17920:	moveq	r3, #4
   17924:	movne	r3, #0
   17928:	add	r2, sp, #8
   1792c:	add	r3, r2, r3
   17930:	ldr	r3, [r3, #-8]
   17934:	str	r3, [r4]
   17938:	add	sp, sp, #12
   1793c:	pop	{r4, r5, pc}
   17940:	push	{r4, r5, r6, r7, r8, lr}
   17944:	subs	r4, r2, #0
   17948:	beq	179a0 <__assert_fail@plt+0x624c>
   1794c:	mov	r7, r0
   17950:	mov	r5, r1
   17954:	mov	r6, #0
   17958:	mov	r2, r4
   1795c:	mov	r1, r5
   17960:	mov	r0, r7
   17964:	bl	1a400 <__assert_fail@plt+0x8cac>
   17968:	cmn	r0, #1
   1796c:	beq	17998 <__assert_fail@plt+0x6244>
   17970:	cmp	r0, #0
   17974:	beq	1798c <__assert_fail@plt+0x6238>
   17978:	add	r6, r6, r0
   1797c:	add	r5, r5, r0
   17980:	subs	r4, r4, r0
   17984:	bne	17958 <__assert_fail@plt+0x6204>
   17988:	b	17998 <__assert_fail@plt+0x6244>
   1798c:	bl	115e0 <__errno_location@plt>
   17990:	mov	r3, #28
   17994:	str	r3, [r0]
   17998:	mov	r0, r6
   1799c:	pop	{r4, r5, r6, r7, r8, pc}
   179a0:	mov	r6, r4
   179a4:	b	17998 <__assert_fail@plt+0x6244>
   179a8:	push	{r4, r5, r6, r8, r9, lr}
   179ac:	mov	r4, r0
   179b0:	mov	r5, r1
   179b4:	add	r6, r2, #20
   179b8:	mov	r3, #0
   179bc:	strb	r3, [r2, #20]
   179c0:	mov	r8, #10
   179c4:	mov	r9, #0
   179c8:	mov	r2, r8
   179cc:	mov	r3, r9
   179d0:	mov	r0, r4
   179d4:	mov	r1, r5
   179d8:	bl	1de78 <__assert_fail@plt+0xc724>
   179dc:	add	r2, r2, #48	; 0x30
   179e0:	strb	r2, [r6, #-1]!
   179e4:	mov	r2, r8
   179e8:	mov	r3, r9
   179ec:	mov	r0, r4
   179f0:	mov	r1, r5
   179f4:	bl	1de78 <__assert_fail@plt+0xc724>
   179f8:	mov	r4, r0
   179fc:	mov	r5, r1
   17a00:	orrs	r3, r4, r5
   17a04:	bne	179c8 <__assert_fail@plt+0x6274>
   17a08:	mov	r0, r6
   17a0c:	pop	{r4, r5, r6, r8, r9, pc}
   17a10:	push	{r4, r5, r6, lr}
   17a14:	subs	r4, r0, #0
   17a18:	beq	17a90 <__assert_fail@plt+0x633c>
   17a1c:	mov	r1, #47	; 0x2f
   17a20:	mov	r0, r4
   17a24:	bl	116d0 <strrchr@plt>
   17a28:	cmp	r0, #0
   17a2c:	addne	r5, r0, #1
   17a30:	moveq	r5, r4
   17a34:	sub	r3, r5, r4
   17a38:	cmp	r3, #6
   17a3c:	ble	17a7c <__assert_fail@plt+0x6328>
   17a40:	mov	r2, #7
   17a44:	ldr	r1, [pc, #96]	; 17aac <__assert_fail@plt+0x6358>
   17a48:	sub	r0, r5, #7
   17a4c:	bl	1173c <strncmp@plt>
   17a50:	cmp	r0, #0
   17a54:	bne	17a7c <__assert_fail@plt+0x6328>
   17a58:	mov	r2, #3
   17a5c:	ldr	r1, [pc, #76]	; 17ab0 <__assert_fail@plt+0x635c>
   17a60:	mov	r0, r5
   17a64:	bl	1173c <strncmp@plt>
   17a68:	cmp	r0, #0
   17a6c:	addeq	r4, r5, #3
   17a70:	ldreq	r3, [pc, #60]	; 17ab4 <__assert_fail@plt+0x6360>
   17a74:	streq	r4, [r3]
   17a78:	movne	r4, r5
   17a7c:	ldr	r3, [pc, #52]	; 17ab8 <__assert_fail@plt+0x6364>
   17a80:	str	r4, [r3]
   17a84:	ldr	r3, [pc, #48]	; 17abc <__assert_fail@plt+0x6368>
   17a88:	str	r4, [r3]
   17a8c:	pop	{r4, r5, r6, pc}
   17a90:	ldr	r3, [pc, #40]	; 17ac0 <__assert_fail@plt+0x636c>
   17a94:	ldr	r3, [r3]
   17a98:	mov	r2, #55	; 0x37
   17a9c:	mov	r1, #1
   17aa0:	ldr	r0, [pc, #28]	; 17ac4 <__assert_fail@plt+0x6370>
   17aa4:	bl	114d8 <fwrite@plt>
   17aa8:	bl	11748 <abort@plt>
   17aac:			; <UNDEFINED> instruction: 0x000216b8
   17ab0:	andeq	r1, r2, r0, asr #13
   17ab4:	andeq	r2, r3, r8, asr #3
   17ab8:	andeq	r2, r3, r0, lsl #4
   17abc:	andeq	r2, r3, ip, asr #3
   17ac0:	ldrdeq	r2, [r3], -r8
   17ac4:	andeq	r1, r2, r0, lsl #13
   17ac8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17acc:	sub	sp, sp, #116	; 0x74
   17ad0:	mov	r9, r0
   17ad4:	mov	r0, r1
   17ad8:	mov	r1, #2
   17adc:	bl	1a4a0 <__assert_fail@plt+0x8d4c>
   17ae0:	mov	r8, r0
   17ae4:	mov	r4, #1
   17ae8:	mov	r5, #0
   17aec:	ldr	r6, [pc, #2092]	; 18320 <__assert_fail@plt+0x6bcc>
   17af0:	b	18034 <__assert_fail@plt+0x68e0>
   17af4:	add	r0, sp, #4
   17af8:	bl	1140c <mbsinit@plt>
   17afc:	cmp	r0, #0
   17b00:	beq	17c08 <__assert_fail@plt+0x64b4>
   17b04:	strb	r4, [sp]
   17b08:	ldr	r9, [sp, #16]
   17b0c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   17b10:	mov	r1, r0
   17b14:	mov	r0, r9
   17b18:	bl	1a474 <__assert_fail@plt+0x8d20>
   17b1c:	add	r3, sp, #4
   17b20:	mov	r2, r0
   17b24:	mov	r1, r9
   17b28:	add	r0, sp, #28
   17b2c:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   17b30:	str	r0, [sp, #20]
   17b34:	cmn	r0, #1
   17b38:	streq	r4, [sp, #20]
   17b3c:	strbeq	r5, [sp, #24]
   17b40:	beq	17b88 <__assert_fail@plt+0x6434>
   17b44:	cmn	r0, #2
   17b48:	beq	17c1c <__assert_fail@plt+0x64c8>
   17b4c:	cmp	r0, #0
   17b50:	bne	17b74 <__assert_fail@plt+0x6420>
   17b54:	str	r4, [sp, #20]
   17b58:	ldr	r3, [sp, #16]
   17b5c:	ldrb	r3, [r3]
   17b60:	cmp	r3, #0
   17b64:	bne	17c30 <__assert_fail@plt+0x64dc>
   17b68:	ldr	r3, [sp, #28]
   17b6c:	cmp	r3, #0
   17b70:	bne	17c44 <__assert_fail@plt+0x64f0>
   17b74:	strb	r4, [sp, #24]
   17b78:	add	r0, sp, #4
   17b7c:	bl	1140c <mbsinit@plt>
   17b80:	cmp	r0, #0
   17b84:	strbne	r5, [sp]
   17b88:	strb	r4, [sp, #12]
   17b8c:	ldrb	r3, [sp, #24]
   17b90:	cmp	r3, #0
   17b94:	bne	17c58 <__assert_fail@plt+0x6504>
   17b98:	ldrb	r1, [sp, #24]
   17b9c:	ldr	r0, [sp, #28]
   17ba0:	ldr	r2, [sp, #20]
   17ba4:	ldr	r3, [sp, #16]
   17ba8:	add	r3, r3, r2
   17bac:	str	r3, [sp, #16]
   17bb0:	strb	r5, [sp, #12]
   17bb4:	cmp	r7, r3
   17bb8:	bls	17c68 <__assert_fail@plt+0x6514>
   17bbc:	ldrb	r3, [sp, #12]
   17bc0:	cmp	r3, #0
   17bc4:	bne	17b8c <__assert_fail@plt+0x6438>
   17bc8:	ldrb	r3, [sp]
   17bcc:	cmp	r3, #0
   17bd0:	bne	17b08 <__assert_fail@plt+0x63b4>
   17bd4:	ldr	r1, [sp, #16]
   17bd8:	ldrb	r3, [r1]
   17bdc:	lsr	r2, r3, #5
   17be0:	and	r3, r3, #31
   17be4:	ldr	r2, [r6, r2, lsl #2]
   17be8:	lsr	r3, r2, r3
   17bec:	tst	r3, #1
   17bf0:	beq	17af4 <__assert_fail@plt+0x63a0>
   17bf4:	str	r4, [sp, #20]
   17bf8:	ldrb	r3, [r1]
   17bfc:	str	r3, [sp, #28]
   17c00:	strb	r4, [sp, #24]
   17c04:	b	17b88 <__assert_fail@plt+0x6434>
   17c08:	ldr	r3, [pc, #1812]	; 18324 <__assert_fail@plt+0x6bd0>
   17c0c:	mov	r2, #143	; 0x8f
   17c10:	ldr	r1, [pc, #1808]	; 18328 <__assert_fail@plt+0x6bd4>
   17c14:	ldr	r0, [pc, #1808]	; 1832c <__assert_fail@plt+0x6bd8>
   17c18:	bl	11754 <__assert_fail@plt>
   17c1c:	ldr	r0, [sp, #16]
   17c20:	bl	115b0 <strlen@plt>
   17c24:	str	r0, [sp, #20]
   17c28:	strb	r5, [sp, #24]
   17c2c:	b	17b88 <__assert_fail@plt+0x6434>
   17c30:	ldr	r3, [pc, #1772]	; 18324 <__assert_fail@plt+0x6bd0>
   17c34:	mov	r2, #171	; 0xab
   17c38:	ldr	r1, [pc, #1768]	; 18328 <__assert_fail@plt+0x6bd4>
   17c3c:	ldr	r0, [pc, #1772]	; 18330 <__assert_fail@plt+0x6bdc>
   17c40:	bl	11754 <__assert_fail@plt>
   17c44:	ldr	r3, [pc, #1752]	; 18324 <__assert_fail@plt+0x6bd0>
   17c48:	mov	r2, #172	; 0xac
   17c4c:	ldr	r1, [pc, #1748]	; 18328 <__assert_fail@plt+0x6bd4>
   17c50:	ldr	r0, [pc, #1756]	; 18334 <__assert_fail@plt+0x6be0>
   17c54:	bl	11754 <__assert_fail@plt>
   17c58:	ldr	r3, [sp, #28]
   17c5c:	cmp	r3, #0
   17c60:	bne	17b98 <__assert_fail@plt+0x6444>
   17c64:	bl	11748 <abort@plt>
   17c68:	cmp	r1, #0
   17c6c:	moveq	r9, r4
   17c70:	beq	17c80 <__assert_fail@plt+0x652c>
   17c74:	bl	115ec <iswalnum@plt>
   17c78:	clz	r9, r0
   17c7c:	lsr	r9, r9, #5
   17c80:	str	r7, [sp, #16]
   17c84:	strb	r5, [sp]
   17c88:	str	r5, [sp, #4]
   17c8c:	str	r5, [sp, #8]
   17c90:	strb	r5, [sp, #12]
   17c94:	str	r8, [sp, #72]	; 0x48
   17c98:	strb	r5, [sp, #56]	; 0x38
   17c9c:	str	r5, [sp, #60]	; 0x3c
   17ca0:	str	r5, [sp, #64]	; 0x40
   17ca4:	strb	r5, [sp, #68]	; 0x44
   17ca8:	b	17d78 <__assert_fail@plt+0x6624>
   17cac:	add	r0, sp, #4
   17cb0:	bl	1140c <mbsinit@plt>
   17cb4:	cmp	r0, #0
   17cb8:	beq	17e1c <__assert_fail@plt+0x66c8>
   17cbc:	strb	r4, [sp]
   17cc0:	ldr	sl, [sp, #16]
   17cc4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   17cc8:	mov	r1, r0
   17ccc:	mov	r0, sl
   17cd0:	bl	1a474 <__assert_fail@plt+0x8d20>
   17cd4:	add	r3, sp, #4
   17cd8:	mov	r2, r0
   17cdc:	mov	r1, sl
   17ce0:	add	r0, sp, #28
   17ce4:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   17ce8:	str	r0, [sp, #20]
   17cec:	cmn	r0, #1
   17cf0:	streq	r4, [sp, #20]
   17cf4:	strbeq	r5, [sp, #24]
   17cf8:	beq	17d40 <__assert_fail@plt+0x65ec>
   17cfc:	cmn	r0, #2
   17d00:	beq	17e30 <__assert_fail@plt+0x66dc>
   17d04:	cmp	r0, #0
   17d08:	bne	17d2c <__assert_fail@plt+0x65d8>
   17d0c:	str	r4, [sp, #20]
   17d10:	ldr	r3, [sp, #16]
   17d14:	ldrb	r3, [r3]
   17d18:	cmp	r3, #0
   17d1c:	bne	17e44 <__assert_fail@plt+0x66f0>
   17d20:	ldr	r3, [sp, #28]
   17d24:	cmp	r3, #0
   17d28:	bne	17e58 <__assert_fail@plt+0x6704>
   17d2c:	strb	r4, [sp, #24]
   17d30:	add	r0, sp, #4
   17d34:	bl	1140c <mbsinit@plt>
   17d38:	cmp	r0, #0
   17d3c:	strbne	r5, [sp]
   17d40:	strb	r4, [sp, #12]
   17d44:	ldrb	r3, [sp, #24]
   17d48:	cmp	r3, #0
   17d4c:	bne	17e6c <__assert_fail@plt+0x6718>
   17d50:	ldr	r2, [sp, #20]
   17d54:	ldr	r3, [sp, #16]
   17d58:	add	r3, r3, r2
   17d5c:	str	r3, [sp, #16]
   17d60:	strb	r5, [sp, #12]
   17d64:	ldr	r2, [sp, #76]	; 0x4c
   17d68:	ldr	r3, [sp, #72]	; 0x48
   17d6c:	add	r3, r3, r2
   17d70:	str	r3, [sp, #72]	; 0x48
   17d74:	strb	r5, [sp, #68]	; 0x44
   17d78:	ldrb	r3, [sp, #68]	; 0x44
   17d7c:	cmp	r3, #0
   17d80:	bne	17dc4 <__assert_fail@plt+0x6670>
   17d84:	ldrb	r3, [sp, #56]	; 0x38
   17d88:	cmp	r3, #0
   17d8c:	bne	17e90 <__assert_fail@plt+0x673c>
   17d90:	ldr	r1, [sp, #72]	; 0x48
   17d94:	ldrb	r3, [r1]
   17d98:	lsr	r2, r3, #5
   17d9c:	and	r3, r3, #31
   17da0:	ldr	r2, [r6, r2, lsl #2]
   17da4:	lsr	r3, r2, r3
   17da8:	tst	r3, #1
   17dac:	beq	17e7c <__assert_fail@plt+0x6728>
   17db0:	str	r4, [sp, #76]	; 0x4c
   17db4:	ldrb	r3, [r1]
   17db8:	str	r3, [sp, #84]	; 0x54
   17dbc:	strb	r4, [sp, #80]	; 0x50
   17dc0:	strb	r4, [sp, #68]	; 0x44
   17dc4:	ldrb	sl, [sp, #80]	; 0x50
   17dc8:	cmp	sl, #0
   17dcc:	bne	17f64 <__assert_fail@plt+0x6810>
   17dd0:	ldrb	r3, [sp, #12]
   17dd4:	cmp	r3, #0
   17dd8:	bne	17d44 <__assert_fail@plt+0x65f0>
   17ddc:	ldrb	r3, [sp]
   17de0:	cmp	r3, #0
   17de4:	bne	17cc0 <__assert_fail@plt+0x656c>
   17de8:	ldr	r1, [sp, #16]
   17dec:	ldrb	r3, [r1]
   17df0:	lsr	r2, r3, #5
   17df4:	and	r3, r3, #31
   17df8:	ldr	r2, [r6, r2, lsl #2]
   17dfc:	lsr	r3, r2, r3
   17e00:	tst	r3, #1
   17e04:	beq	17cac <__assert_fail@plt+0x6558>
   17e08:	str	r4, [sp, #20]
   17e0c:	ldrb	r3, [r1]
   17e10:	str	r3, [sp, #28]
   17e14:	strb	r4, [sp, #24]
   17e18:	b	17d40 <__assert_fail@plt+0x65ec>
   17e1c:	ldr	r3, [pc, #1280]	; 18324 <__assert_fail@plt+0x6bd0>
   17e20:	mov	r2, #143	; 0x8f
   17e24:	ldr	r1, [pc, #1276]	; 18328 <__assert_fail@plt+0x6bd4>
   17e28:	ldr	r0, [pc, #1276]	; 1832c <__assert_fail@plt+0x6bd8>
   17e2c:	bl	11754 <__assert_fail@plt>
   17e30:	ldr	r0, [sp, #16]
   17e34:	bl	115b0 <strlen@plt>
   17e38:	str	r0, [sp, #20]
   17e3c:	strb	r5, [sp, #24]
   17e40:	b	17d40 <__assert_fail@plt+0x65ec>
   17e44:	ldr	r3, [pc, #1240]	; 18324 <__assert_fail@plt+0x6bd0>
   17e48:	mov	r2, #171	; 0xab
   17e4c:	ldr	r1, [pc, #1236]	; 18328 <__assert_fail@plt+0x6bd4>
   17e50:	ldr	r0, [pc, #1240]	; 18330 <__assert_fail@plt+0x6bdc>
   17e54:	bl	11754 <__assert_fail@plt>
   17e58:	ldr	r3, [pc, #1220]	; 18324 <__assert_fail@plt+0x6bd0>
   17e5c:	mov	r2, #172	; 0xac
   17e60:	ldr	r1, [pc, #1216]	; 18328 <__assert_fail@plt+0x6bd4>
   17e64:	ldr	r0, [pc, #1224]	; 18334 <__assert_fail@plt+0x6be0>
   17e68:	bl	11754 <__assert_fail@plt>
   17e6c:	ldr	r3, [sp, #28]
   17e70:	cmp	r3, #0
   17e74:	bne	17d50 <__assert_fail@plt+0x65fc>
   17e78:	bl	11748 <abort@plt>
   17e7c:	add	r0, sp, #60	; 0x3c
   17e80:	bl	1140c <mbsinit@plt>
   17e84:	cmp	r0, #0
   17e88:	beq	17f14 <__assert_fail@plt+0x67c0>
   17e8c:	strb	r4, [sp, #56]	; 0x38
   17e90:	ldr	sl, [sp, #72]	; 0x48
   17e94:	bl	114fc <__ctype_get_mb_cur_max@plt>
   17e98:	mov	r1, r0
   17e9c:	mov	r0, sl
   17ea0:	bl	1a474 <__assert_fail@plt+0x8d20>
   17ea4:	add	r3, sp, #60	; 0x3c
   17ea8:	mov	r2, r0
   17eac:	mov	r1, sl
   17eb0:	add	r0, sp, #84	; 0x54
   17eb4:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   17eb8:	str	r0, [sp, #76]	; 0x4c
   17ebc:	cmn	r0, #1
   17ec0:	streq	r4, [sp, #76]	; 0x4c
   17ec4:	strbeq	r5, [sp, #80]	; 0x50
   17ec8:	beq	17dc0 <__assert_fail@plt+0x666c>
   17ecc:	cmn	r0, #2
   17ed0:	beq	17f28 <__assert_fail@plt+0x67d4>
   17ed4:	cmp	r0, #0
   17ed8:	bne	17efc <__assert_fail@plt+0x67a8>
   17edc:	str	r4, [sp, #76]	; 0x4c
   17ee0:	ldr	r3, [sp, #72]	; 0x48
   17ee4:	ldrb	r3, [r3]
   17ee8:	cmp	r3, #0
   17eec:	bne	17f3c <__assert_fail@plt+0x67e8>
   17ef0:	ldr	r3, [sp, #84]	; 0x54
   17ef4:	cmp	r3, #0
   17ef8:	bne	17f50 <__assert_fail@plt+0x67fc>
   17efc:	strb	r4, [sp, #80]	; 0x50
   17f00:	add	r0, sp, #60	; 0x3c
   17f04:	bl	1140c <mbsinit@plt>
   17f08:	cmp	r0, #0
   17f0c:	strbne	r5, [sp, #56]	; 0x38
   17f10:	b	17dc0 <__assert_fail@plt+0x666c>
   17f14:	ldr	r3, [pc, #1032]	; 18324 <__assert_fail@plt+0x6bd0>
   17f18:	mov	r2, #143	; 0x8f
   17f1c:	ldr	r1, [pc, #1028]	; 18328 <__assert_fail@plt+0x6bd4>
   17f20:	ldr	r0, [pc, #1028]	; 1832c <__assert_fail@plt+0x6bd8>
   17f24:	bl	11754 <__assert_fail@plt>
   17f28:	ldr	r0, [sp, #72]	; 0x48
   17f2c:	bl	115b0 <strlen@plt>
   17f30:	str	r0, [sp, #76]	; 0x4c
   17f34:	strb	r5, [sp, #80]	; 0x50
   17f38:	b	17dc0 <__assert_fail@plt+0x666c>
   17f3c:	ldr	r3, [pc, #992]	; 18324 <__assert_fail@plt+0x6bd0>
   17f40:	mov	r2, #171	; 0xab
   17f44:	ldr	r1, [pc, #988]	; 18328 <__assert_fail@plt+0x6bd4>
   17f48:	ldr	r0, [pc, #992]	; 18330 <__assert_fail@plt+0x6bdc>
   17f4c:	bl	11754 <__assert_fail@plt>
   17f50:	ldr	r3, [pc, #972]	; 18324 <__assert_fail@plt+0x6bd0>
   17f54:	mov	r2, #172	; 0xac
   17f58:	ldr	r1, [pc, #968]	; 18328 <__assert_fail@plt+0x6bd4>
   17f5c:	ldr	r0, [pc, #976]	; 18334 <__assert_fail@plt+0x6be0>
   17f60:	bl	11754 <__assert_fail@plt>
   17f64:	ldr	r3, [sp, #84]	; 0x54
   17f68:	cmp	r3, #0
   17f6c:	bne	17dd0 <__assert_fail@plt+0x667c>
   17f70:	ldrb	r3, [sp, #12]
   17f74:	cmp	r3, #0
   17f78:	bne	17fbc <__assert_fail@plt+0x6868>
   17f7c:	ldrb	r3, [sp]
   17f80:	cmp	r3, #0
   17f84:	bne	18098 <__assert_fail@plt+0x6944>
   17f88:	ldr	r1, [sp, #16]
   17f8c:	ldrb	r3, [r1]
   17f90:	lsr	r2, r3, #5
   17f94:	and	r3, r3, #31
   17f98:	ldr	r2, [r6, r2, lsl #2]
   17f9c:	lsr	r3, r2, r3
   17fa0:	tst	r3, #1
   17fa4:	beq	18084 <__assert_fail@plt+0x6930>
   17fa8:	str	r4, [sp, #20]
   17fac:	ldrb	r3, [r1]
   17fb0:	str	r3, [sp, #28]
   17fb4:	strb	r4, [sp, #24]
   17fb8:	strb	r4, [sp, #12]
   17fbc:	ldrb	r0, [sp, #24]
   17fc0:	cmp	r0, #0
   17fc4:	beq	1816c <__assert_fail@plt+0x6a18>
   17fc8:	ldr	r3, [sp, #28]
   17fcc:	cmp	r3, #0
   17fd0:	bne	1816c <__assert_fail@plt+0x6a18>
   17fd4:	ands	r9, r9, r0
   17fd8:	bne	18304 <__assert_fail@plt+0x6bb0>
   17fdc:	str	r7, [sp, #16]
   17fe0:	strb	r5, [sp]
   17fe4:	str	r5, [sp, #4]
   17fe8:	str	r5, [sp, #8]
   17fec:	strb	r5, [sp, #12]
   17ff0:	ldrb	r3, [r7]
   17ff4:	lsr	r2, r3, #5
   17ff8:	and	r3, r3, #31
   17ffc:	ldr	r2, [r6, r2, lsl #2]
   18000:	lsr	r3, r2, r3
   18004:	tst	r3, #1
   18008:	beq	18190 <__assert_fail@plt+0x6a3c>
   1800c:	str	r4, [sp, #20]
   18010:	ldrb	r3, [r7]
   18014:	str	r3, [sp, #28]
   18018:	strb	r4, [sp, #24]
   1801c:	strb	r4, [sp, #12]
   18020:	ldrb	r3, [sp, #24]
   18024:	cmp	r3, #0
   18028:	bne	18274 <__assert_fail@plt+0x6b20>
   1802c:	ldr	r9, [sp, #20]
   18030:	add	r9, r7, r9
   18034:	ldrb	r3, [r9]
   18038:	cmp	r3, #0
   1803c:	beq	18300 <__assert_fail@plt+0x6bac>
   18040:	mov	r1, r8
   18044:	mov	r0, r9
   18048:	bl	1c43c <__assert_fail@plt+0xace8>
   1804c:	subs	r7, r0, #0
   18050:	beq	18318 <__assert_fail@plt+0x6bc4>
   18054:	bl	114fc <__ctype_get_mb_cur_max@plt>
   18058:	cmp	r0, #1
   1805c:	bls	18284 <__assert_fail@plt+0x6b30>
   18060:	str	r9, [sp, #16]
   18064:	strb	r5, [sp]
   18068:	str	r5, [sp, #4]
   1806c:	str	r5, [sp, #8]
   18070:	strb	r5, [sp, #12]
   18074:	cmp	r9, r7
   18078:	bcc	17bbc <__assert_fail@plt+0x6468>
   1807c:	mov	r9, r4
   18080:	b	17c80 <__assert_fail@plt+0x652c>
   18084:	add	r0, sp, #4
   18088:	bl	1140c <mbsinit@plt>
   1808c:	cmp	r0, #0
   18090:	beq	1811c <__assert_fail@plt+0x69c8>
   18094:	strb	r4, [sp]
   18098:	ldr	fp, [sp, #16]
   1809c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   180a0:	mov	r1, r0
   180a4:	mov	r0, fp
   180a8:	bl	1a474 <__assert_fail@plt+0x8d20>
   180ac:	add	r3, sp, #4
   180b0:	mov	r2, r0
   180b4:	mov	r1, fp
   180b8:	add	r0, sp, #28
   180bc:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   180c0:	str	r0, [sp, #20]
   180c4:	cmn	r0, #1
   180c8:	streq	r4, [sp, #20]
   180cc:	strbeq	r5, [sp, #24]
   180d0:	beq	17fb8 <__assert_fail@plt+0x6864>
   180d4:	cmn	r0, #2
   180d8:	beq	18130 <__assert_fail@plt+0x69dc>
   180dc:	cmp	r0, #0
   180e0:	bne	18104 <__assert_fail@plt+0x69b0>
   180e4:	str	r4, [sp, #20]
   180e8:	ldr	r3, [sp, #16]
   180ec:	ldrb	r3, [r3]
   180f0:	cmp	r3, #0
   180f4:	bne	18144 <__assert_fail@plt+0x69f0>
   180f8:	ldr	r3, [sp, #28]
   180fc:	cmp	r3, #0
   18100:	bne	18158 <__assert_fail@plt+0x6a04>
   18104:	strb	r4, [sp, #24]
   18108:	add	r0, sp, #4
   1810c:	bl	1140c <mbsinit@plt>
   18110:	cmp	r0, #0
   18114:	strbne	r5, [sp]
   18118:	b	17fb8 <__assert_fail@plt+0x6864>
   1811c:	ldr	r3, [pc, #512]	; 18324 <__assert_fail@plt+0x6bd0>
   18120:	mov	r2, #143	; 0x8f
   18124:	ldr	r1, [pc, #508]	; 18328 <__assert_fail@plt+0x6bd4>
   18128:	ldr	r0, [pc, #508]	; 1832c <__assert_fail@plt+0x6bd8>
   1812c:	bl	11754 <__assert_fail@plt>
   18130:	ldr	r0, [sp, #16]
   18134:	bl	115b0 <strlen@plt>
   18138:	str	r0, [sp, #20]
   1813c:	strb	r5, [sp, #24]
   18140:	b	17fb8 <__assert_fail@plt+0x6864>
   18144:	ldr	r3, [pc, #472]	; 18324 <__assert_fail@plt+0x6bd0>
   18148:	mov	r2, #171	; 0xab
   1814c:	ldr	r1, [pc, #468]	; 18328 <__assert_fail@plt+0x6bd4>
   18150:	ldr	r0, [pc, #472]	; 18330 <__assert_fail@plt+0x6bdc>
   18154:	bl	11754 <__assert_fail@plt>
   18158:	ldr	r3, [pc, #452]	; 18324 <__assert_fail@plt+0x6bd0>
   1815c:	mov	r2, #172	; 0xac
   18160:	ldr	r1, [pc, #448]	; 18328 <__assert_fail@plt+0x6bd4>
   18164:	ldr	r0, [pc, #456]	; 18334 <__assert_fail@plt+0x6be0>
   18168:	bl	11754 <__assert_fail@plt>
   1816c:	ldrb	r3, [sp, #24]
   18170:	cmp	r3, #0
   18174:	moveq	r0, sl
   18178:	beq	17fd4 <__assert_fail@plt+0x6880>
   1817c:	ldr	r0, [sp, #28]
   18180:	bl	115ec <iswalnum@plt>
   18184:	clz	r0, r0
   18188:	lsr	r0, r0, #5
   1818c:	b	17fd4 <__assert_fail@plt+0x6880>
   18190:	add	r0, sp, #4
   18194:	bl	1140c <mbsinit@plt>
   18198:	cmp	r0, #0
   1819c:	beq	18224 <__assert_fail@plt+0x6ad0>
   181a0:	strb	r4, [sp]
   181a4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   181a8:	mov	r1, r0
   181ac:	mov	r0, r7
   181b0:	bl	1a474 <__assert_fail@plt+0x8d20>
   181b4:	add	r3, sp, #4
   181b8:	mov	r2, r0
   181bc:	mov	r1, r7
   181c0:	add	r0, sp, #28
   181c4:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   181c8:	str	r0, [sp, #20]
   181cc:	cmn	r0, #1
   181d0:	streq	r4, [sp, #20]
   181d4:	strbeq	r5, [sp, #24]
   181d8:	beq	1801c <__assert_fail@plt+0x68c8>
   181dc:	cmn	r0, #2
   181e0:	beq	18238 <__assert_fail@plt+0x6ae4>
   181e4:	cmp	r0, #0
   181e8:	bne	1820c <__assert_fail@plt+0x6ab8>
   181ec:	str	r4, [sp, #20]
   181f0:	ldr	r3, [sp, #16]
   181f4:	ldrb	r3, [r3]
   181f8:	cmp	r3, #0
   181fc:	bne	1824c <__assert_fail@plt+0x6af8>
   18200:	ldr	r3, [sp, #28]
   18204:	cmp	r3, #0
   18208:	bne	18260 <__assert_fail@plt+0x6b0c>
   1820c:	strb	r4, [sp, #24]
   18210:	add	r0, sp, #4
   18214:	bl	1140c <mbsinit@plt>
   18218:	cmp	r0, #0
   1821c:	strbne	r5, [sp]
   18220:	b	1801c <__assert_fail@plt+0x68c8>
   18224:	ldr	r3, [pc, #248]	; 18324 <__assert_fail@plt+0x6bd0>
   18228:	mov	r2, #143	; 0x8f
   1822c:	ldr	r1, [pc, #244]	; 18328 <__assert_fail@plt+0x6bd4>
   18230:	ldr	r0, [pc, #244]	; 1832c <__assert_fail@plt+0x6bd8>
   18234:	bl	11754 <__assert_fail@plt>
   18238:	ldr	r0, [sp, #16]
   1823c:	bl	115b0 <strlen@plt>
   18240:	str	r0, [sp, #20]
   18244:	strb	r5, [sp, #24]
   18248:	b	1801c <__assert_fail@plt+0x68c8>
   1824c:	ldr	r3, [pc, #208]	; 18324 <__assert_fail@plt+0x6bd0>
   18250:	mov	r2, #171	; 0xab
   18254:	ldr	r1, [pc, #204]	; 18328 <__assert_fail@plt+0x6bd4>
   18258:	ldr	r0, [pc, #208]	; 18330 <__assert_fail@plt+0x6bdc>
   1825c:	bl	11754 <__assert_fail@plt>
   18260:	ldr	r3, [pc, #188]	; 18324 <__assert_fail@plt+0x6bd0>
   18264:	mov	r2, #172	; 0xac
   18268:	ldr	r1, [pc, #184]	; 18328 <__assert_fail@plt+0x6bd4>
   1826c:	ldr	r0, [pc, #192]	; 18334 <__assert_fail@plt+0x6be0>
   18270:	bl	11754 <__assert_fail@plt>
   18274:	ldr	r3, [sp, #28]
   18278:	cmp	r3, #0
   1827c:	bne	1802c <__assert_fail@plt+0x68d8>
   18280:	b	18304 <__assert_fail@plt+0x6bb0>
   18284:	cmp	r9, r7
   18288:	movcs	sl, r4
   1828c:	bcs	182b0 <__assert_fail@plt+0x6b5c>
   18290:	bl	1158c <__ctype_b_loc@plt>
   18294:	ldrb	r3, [r7, #-1]
   18298:	ldr	r2, [r0]
   1829c:	lsl	r3, r3, #1
   182a0:	ldrh	sl, [r2, r3]
   182a4:	lsr	sl, sl, #3
   182a8:	eor	sl, sl, #1
   182ac:	and	sl, sl, #1
   182b0:	mov	r0, r8
   182b4:	bl	115b0 <strlen@plt>
   182b8:	ldrb	r9, [r7, r0]
   182bc:	cmp	r9, #0
   182c0:	moveq	r9, r4
   182c4:	beq	182e4 <__assert_fail@plt+0x6b90>
   182c8:	bl	1158c <__ctype_b_loc@plt>
   182cc:	ldr	r3, [r0]
   182d0:	lsl	r9, r9, #1
   182d4:	ldrh	r9, [r3, r9]
   182d8:	lsr	r9, r9, #3
   182dc:	eor	r9, r9, #1
   182e0:	and	r9, r9, #1
   182e4:	ands	r9, sl, r9
   182e8:	bne	18304 <__assert_fail@plt+0x6bb0>
   182ec:	ldrb	r3, [r7]
   182f0:	cmp	r3, #0
   182f4:	beq	18304 <__assert_fail@plt+0x6bb0>
   182f8:	add	r9, r7, #1
   182fc:	b	18034 <__assert_fail@plt+0x68e0>
   18300:	mov	r9, #0
   18304:	mov	r0, r8
   18308:	bl	178e8 <__assert_fail@plt+0x6194>
   1830c:	mov	r0, r9
   18310:	add	sp, sp, #116	; 0x74
   18314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18318:	mov	r9, #0
   1831c:	b	18304 <__assert_fail@plt+0x6bb0>
   18320:	andeq	r1, r2, ip, ror fp
   18324:	andeq	r1, r2, r4, asr #13
   18328:	ldrdeq	r1, [r2], -r8
   1832c:	andeq	r1, r2, r8, ror #13
   18330:	andeq	r1, r2, r0, lsl #14
   18334:	andeq	r1, r2, r8, lsl r7
   18338:	push	{r4, r5, r6, lr}
   1833c:	sub	sp, sp, #8
   18340:	mov	r5, r0
   18344:	mov	r2, #5
   18348:	mov	r1, r0
   1834c:	mov	r0, #0
   18350:	bl	11430 <dcgettext@plt>
   18354:	mov	r4, r0
   18358:	cmp	r5, r0
   1835c:	beq	18370 <__assert_fail@plt+0x6c1c>
   18360:	mov	r1, r5
   18364:	bl	17ac8 <__assert_fail@plt+0x6374>
   18368:	cmp	r0, #0
   1836c:	beq	1837c <__assert_fail@plt+0x6c28>
   18370:	mov	r0, r4
   18374:	add	sp, sp, #8
   18378:	pop	{r4, r5, r6, pc}
   1837c:	mov	r0, r4
   18380:	bl	115b0 <strlen@plt>
   18384:	mov	r6, r0
   18388:	mov	r0, r5
   1838c:	bl	115b0 <strlen@plt>
   18390:	add	r0, r6, r0
   18394:	add	r0, r0, #4
   18398:	bl	1af04 <__assert_fail@plt+0x97b0>
   1839c:	mov	r6, r0
   183a0:	str	r5, [sp, #4]
   183a4:	str	r4, [sp]
   183a8:	ldr	r3, [pc, #16]	; 183c0 <__assert_fail@plt+0x6c6c>
   183ac:	mvn	r2, #0
   183b0:	mov	r1, #1
   183b4:	bl	115f8 <__sprintf_chk@plt>
   183b8:	mov	r4, r6
   183bc:	b	18370 <__assert_fail@plt+0x6c1c>
   183c0:	andeq	r1, r2, ip, lsr #14
   183c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   183c8:	sub	sp, sp, #12
   183cc:	mov	r7, r0
   183d0:	mov	r5, r1
   183d4:	mov	r2, #5
   183d8:	mov	r1, r0
   183dc:	mov	r0, #0
   183e0:	bl	11430 <dcgettext@plt>
   183e4:	mov	r9, r0
   183e8:	bl	1b8dc <__assert_fail@plt+0xa188>
   183ec:	mov	fp, r0
   183f0:	ldr	r1, [pc, #552]	; 18620 <__assert_fail@plt+0x6ecc>
   183f4:	bl	1b64c <__assert_fail@plt+0x9ef8>
   183f8:	cmp	r0, #0
   183fc:	moveq	sl, r5
   18400:	moveq	r4, #0
   18404:	moveq	r8, r4
   18408:	bne	18450 <__assert_fail@plt+0x6cfc>
   1840c:	cmp	r5, #0
   18410:	movne	r6, r5
   18414:	beq	18518 <__assert_fail@plt+0x6dc4>
   18418:	mov	r1, r7
   1841c:	mov	r0, r9
   18420:	bl	11388 <strcmp@plt>
   18424:	cmp	r0, #0
   18428:	bne	18528 <__assert_fail@plt+0x6dd4>
   1842c:	cmp	r8, #0
   18430:	cmpne	r8, r6
   18434:	bne	18608 <__assert_fail@plt+0x6eb4>
   18438:	cmp	r4, #0
   1843c:	cmpne	r4, r6
   18440:	bne	18614 <__assert_fail@plt+0x6ec0>
   18444:	mov	r0, r6
   18448:	add	sp, sp, #12
   1844c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18450:	ldr	sl, [pc, #456]	; 18620 <__assert_fail@plt+0x6ecc>
   18454:	mov	r2, fp
   18458:	mov	r1, sl
   1845c:	mov	r0, r5
   18460:	bl	1b550 <__assert_fail@plt+0x9dfc>
   18464:	mov	r8, r0
   18468:	mov	r0, fp
   1846c:	bl	115b0 <strlen@plt>
   18470:	mov	r4, r0
   18474:	add	r0, r0, #11
   18478:	bl	1af04 <__assert_fail@plt+0x97b0>
   1847c:	mov	r6, r0
   18480:	mov	r2, r4
   18484:	mov	r1, fp
   18488:	bl	113f4 <memcpy@plt>
   1848c:	add	r2, r6, r4
   18490:	ldr	r3, [pc, #396]	; 18624 <__assert_fail@plt+0x6ed0>
   18494:	ldm	r3!, {r0, r1}
   18498:	str	r0, [r6, r4]
   1849c:	str	r1, [r2, #4]
   184a0:	ldrh	r1, [r3]
   184a4:	ldrb	r3, [r3, #2]
   184a8:	strh	r1, [r2, #8]
   184ac:	strb	r3, [r2, #10]
   184b0:	mov	r2, r6
   184b4:	mov	r1, sl
   184b8:	mov	r0, r5
   184bc:	bl	1b550 <__assert_fail@plt+0x9dfc>
   184c0:	mov	r4, r0
   184c4:	mov	r0, r6
   184c8:	bl	178e8 <__assert_fail@plt+0x6194>
   184cc:	cmp	r4, #0
   184d0:	beq	18500 <__assert_fail@plt+0x6dac>
   184d4:	mov	r1, #63	; 0x3f
   184d8:	mov	r0, r4
   184dc:	bl	115bc <strchr@plt>
   184e0:	cmp	r0, #0
   184e4:	beq	1850c <__assert_fail@plt+0x6db8>
   184e8:	mov	r0, r4
   184ec:	bl	178e8 <__assert_fail@plt+0x6194>
   184f0:	mov	r5, r8
   184f4:	mov	r4, #0
   184f8:	mov	sl, r4
   184fc:	b	1840c <__assert_fail@plt+0x6cb8>
   18500:	mov	r5, r8
   18504:	mov	sl, #0
   18508:	b	1840c <__assert_fail@plt+0x6cb8>
   1850c:	mov	sl, r4
   18510:	mov	r5, r8
   18514:	b	1840c <__assert_fail@plt+0x6cb8>
   18518:	cmp	sl, #0
   1851c:	movne	r6, sl
   18520:	moveq	r6, r7
   18524:	b	18418 <__assert_fail@plt+0x6cc4>
   18528:	mov	r1, r7
   1852c:	mov	r0, r9
   18530:	bl	17ac8 <__assert_fail@plt+0x6374>
   18534:	cmp	r0, #0
   18538:	bne	18574 <__assert_fail@plt+0x6e20>
   1853c:	cmp	r5, #0
   18540:	beq	18558 <__assert_fail@plt+0x6e04>
   18544:	mov	r1, r5
   18548:	mov	r0, r9
   1854c:	bl	17ac8 <__assert_fail@plt+0x6374>
   18550:	cmp	r0, #0
   18554:	bne	18574 <__assert_fail@plt+0x6e20>
   18558:	cmp	sl, #0
   1855c:	beq	185a0 <__assert_fail@plt+0x6e4c>
   18560:	mov	r1, sl
   18564:	mov	r0, r9
   18568:	bl	17ac8 <__assert_fail@plt+0x6374>
   1856c:	cmp	r0, #0
   18570:	beq	185a0 <__assert_fail@plt+0x6e4c>
   18574:	cmp	r8, #0
   18578:	beq	18584 <__assert_fail@plt+0x6e30>
   1857c:	mov	r0, r8
   18580:	bl	178e8 <__assert_fail@plt+0x6194>
   18584:	cmp	r4, #0
   18588:	moveq	r6, r9
   1858c:	beq	18444 <__assert_fail@plt+0x6cf0>
   18590:	mov	r0, r4
   18594:	bl	178e8 <__assert_fail@plt+0x6194>
   18598:	mov	r6, r9
   1859c:	b	18444 <__assert_fail@plt+0x6cf0>
   185a0:	mov	r0, r9
   185a4:	bl	115b0 <strlen@plt>
   185a8:	mov	r5, r0
   185ac:	mov	r0, r6
   185b0:	bl	115b0 <strlen@plt>
   185b4:	add	r0, r5, r0
   185b8:	add	r0, r0, #4
   185bc:	bl	1af04 <__assert_fail@plt+0x97b0>
   185c0:	mov	r5, r0
   185c4:	str	r6, [sp, #4]
   185c8:	str	r9, [sp]
   185cc:	ldr	r3, [pc, #84]	; 18628 <__assert_fail@plt+0x6ed4>
   185d0:	mvn	r2, #0
   185d4:	mov	r1, #1
   185d8:	bl	115f8 <__sprintf_chk@plt>
   185dc:	cmp	r8, #0
   185e0:	beq	185ec <__assert_fail@plt+0x6e98>
   185e4:	mov	r0, r8
   185e8:	bl	178e8 <__assert_fail@plt+0x6194>
   185ec:	cmp	r4, #0
   185f0:	moveq	r6, r5
   185f4:	beq	18444 <__assert_fail@plt+0x6cf0>
   185f8:	mov	r0, r4
   185fc:	bl	178e8 <__assert_fail@plt+0x6194>
   18600:	mov	r6, r5
   18604:	b	18444 <__assert_fail@plt+0x6cf0>
   18608:	mov	r0, r8
   1860c:	bl	178e8 <__assert_fail@plt+0x6194>
   18610:	b	18438 <__assert_fail@plt+0x6ce4>
   18614:	mov	r0, r4
   18618:	bl	178e8 <__assert_fail@plt+0x6194>
   1861c:	b	18444 <__assert_fail@plt+0x6cf0>
   18620:	andeq	r1, r2, r4, lsr r7
   18624:	andeq	r1, r2, ip, lsr r7
   18628:	andeq	r1, r2, ip, lsr #14
   1862c:	push	{r4, r5, r6, lr}
   18630:	mov	r5, r0
   18634:	mov	r4, r1
   18638:	mov	r2, #48	; 0x30
   1863c:	mov	r1, #0
   18640:	bl	11610 <memset@plt>
   18644:	cmp	r4, #10
   18648:	beq	18658 <__assert_fail@plt+0x6f04>
   1864c:	str	r4, [r5]
   18650:	mov	r0, r5
   18654:	pop	{r4, r5, r6, pc}
   18658:	bl	11748 <abort@plt>
   1865c:	push	{r4, r5, r6, lr}
   18660:	mov	r4, r0
   18664:	mov	r5, r1
   18668:	mov	r2, #5
   1866c:	mov	r1, r0
   18670:	mov	r0, #0
   18674:	bl	11430 <dcgettext@plt>
   18678:	cmp	r4, r0
   1867c:	popne	{r4, r5, r6, pc}
   18680:	bl	1b8dc <__assert_fail@plt+0xa188>
   18684:	ldrb	r3, [r0]
   18688:	bic	r3, r3, #32
   1868c:	cmp	r3, #85	; 0x55
   18690:	beq	1870c <__assert_fail@plt+0x6fb8>
   18694:	cmp	r3, #71	; 0x47
   18698:	bne	18768 <__assert_fail@plt+0x7014>
   1869c:	ldrb	r3, [r0, #1]
   186a0:	bic	r3, r3, #32
   186a4:	cmp	r3, #66	; 0x42
   186a8:	bne	18768 <__assert_fail@plt+0x7014>
   186ac:	ldrb	r3, [r0, #2]
   186b0:	cmp	r3, #49	; 0x31
   186b4:	bne	18768 <__assert_fail@plt+0x7014>
   186b8:	ldrb	r3, [r0, #3]
   186bc:	cmp	r3, #56	; 0x38
   186c0:	bne	18768 <__assert_fail@plt+0x7014>
   186c4:	ldrb	r3, [r0, #4]
   186c8:	cmp	r3, #48	; 0x30
   186cc:	bne	18768 <__assert_fail@plt+0x7014>
   186d0:	ldrb	r3, [r0, #5]
   186d4:	cmp	r3, #51	; 0x33
   186d8:	bne	18768 <__assert_fail@plt+0x7014>
   186dc:	ldrb	r3, [r0, #6]
   186e0:	cmp	r3, #48	; 0x30
   186e4:	bne	18768 <__assert_fail@plt+0x7014>
   186e8:	ldrb	r3, [r0, #7]
   186ec:	cmp	r3, #0
   186f0:	bne	18768 <__assert_fail@plt+0x7014>
   186f4:	ldrb	r2, [r4]
   186f8:	ldr	r3, [pc, #124]	; 1877c <__assert_fail@plt+0x7028>
   186fc:	ldr	r0, [pc, #124]	; 18780 <__assert_fail@plt+0x702c>
   18700:	cmp	r2, #96	; 0x60
   18704:	movne	r0, r3
   18708:	pop	{r4, r5, r6, pc}
   1870c:	ldrb	r3, [r0, #1]
   18710:	bic	r3, r3, #32
   18714:	cmp	r3, #84	; 0x54
   18718:	bne	18768 <__assert_fail@plt+0x7014>
   1871c:	ldrb	r3, [r0, #2]
   18720:	bic	r3, r3, #32
   18724:	cmp	r3, #70	; 0x46
   18728:	bne	18768 <__assert_fail@plt+0x7014>
   1872c:	ldrb	r3, [r0, #3]
   18730:	cmp	r3, #45	; 0x2d
   18734:	bne	18768 <__assert_fail@plt+0x7014>
   18738:	ldrb	r3, [r0, #4]
   1873c:	cmp	r3, #56	; 0x38
   18740:	bne	18768 <__assert_fail@plt+0x7014>
   18744:	ldrb	r3, [r0, #5]
   18748:	cmp	r3, #0
   1874c:	bne	18768 <__assert_fail@plt+0x7014>
   18750:	ldrb	r2, [r4]
   18754:	ldr	r3, [pc, #40]	; 18784 <__assert_fail@plt+0x7030>
   18758:	ldr	r0, [pc, #40]	; 18788 <__assert_fail@plt+0x7034>
   1875c:	cmp	r2, #96	; 0x60
   18760:	movne	r0, r3
   18764:	pop	{r4, r5, r6, pc}
   18768:	ldr	r3, [pc, #28]	; 1878c <__assert_fail@plt+0x7038>
   1876c:	ldr	r0, [pc, #28]	; 18790 <__assert_fail@plt+0x703c>
   18770:	cmp	r5, #9
   18774:	movne	r0, r3
   18778:	pop	{r4, r5, r6, pc}
   1877c:	andeq	r1, r2, r0, lsr #15
   18780:	andeq	r1, r2, ip, lsr #15
   18784:	muleq	r2, ip, r7
   18788:			; <UNDEFINED> instruction: 0x000217b0
   1878c:	andeq	r1, r2, r4, lsr #15
   18790:	andeq	r1, r2, r8, lsr #15
   18794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18798:	sub	sp, sp, #116	; 0x74
   1879c:	str	r0, [sp, #36]	; 0x24
   187a0:	mov	sl, r1
   187a4:	str	r2, [sp, #52]	; 0x34
   187a8:	str	r3, [sp, #28]
   187ac:	ldr	r8, [sp, #152]	; 0x98
   187b0:	bl	114fc <__ctype_get_mb_cur_max@plt>
   187b4:	str	r0, [sp, #84]	; 0x54
   187b8:	ldr	r3, [sp, #156]	; 0x9c
   187bc:	lsr	r3, r3, #1
   187c0:	and	r3, r3, #1
   187c4:	str	r3, [sp, #32]
   187c8:	mov	r3, #1
   187cc:	str	r3, [sp, #40]	; 0x28
   187d0:	mov	r3, #0
   187d4:	str	r3, [sp, #80]	; 0x50
   187d8:	str	r3, [sp, #44]	; 0x2c
   187dc:	str	r3, [sp, #48]	; 0x30
   187e0:	str	r3, [sp, #60]	; 0x3c
   187e4:	str	r3, [sp, #72]	; 0x48
   187e8:	str	r3, [sp, #76]	; 0x4c
   187ec:	mov	r7, sl
   187f0:	mov	sl, r8
   187f4:	cmp	sl, #10
   187f8:	ldrls	pc, [pc, sl, lsl #2]
   187fc:	b	189b4 <__assert_fail@plt+0x7260>
   18800:	andeq	r8, r1, r4, ror #16
   18804:	andeq	r8, r1, r4, lsr r8
   18808:	muleq	r1, r0, r9
   1880c:	andeq	r8, r1, ip, lsr #16
   18810:	andeq	r8, r1, r4, asr #18
   18814:	andeq	r8, r1, r4, ror r8
   18818:	andeq	r9, r1, r0, ror #17
   1881c:			; <UNDEFINED> instruction: 0x000189b8
   18820:			; <UNDEFINED> instruction: 0x000188b0
   18824:			; <UNDEFINED> instruction: 0x000188b0
   18828:			; <UNDEFINED> instruction: 0x000188b0
   1882c:	mov	r3, #1
   18830:	str	r3, [sp, #48]	; 0x30
   18834:	mov	r3, #1
   18838:	str	r3, [sp, #32]
   1883c:	str	r3, [sp, #60]	; 0x3c
   18840:	ldr	r3, [pc, #4068]	; 1982c <__assert_fail@plt+0x80d8>
   18844:	str	r3, [sp, #72]	; 0x48
   18848:	mov	fp, #0
   1884c:	mov	sl, #2
   18850:	mov	r6, #0
   18854:	ldr	r3, [sp, #48]	; 0x30
   18858:	eor	r3, r3, #1
   1885c:	str	r3, [sp, #68]	; 0x44
   18860:	b	19148 <__assert_fail@plt+0x79f4>
   18864:	mov	r3, #0
   18868:	str	r3, [sp, #32]
   1886c:	mov	fp, r3
   18870:	b	18850 <__assert_fail@plt+0x70fc>
   18874:	ldr	r3, [sp, #32]
   18878:	cmp	r3, #0
   1887c:	bne	189d0 <__assert_fail@plt+0x727c>
   18880:	cmp	r7, #0
   18884:	beq	189f0 <__assert_fail@plt+0x729c>
   18888:	ldr	r3, [sp, #36]	; 0x24
   1888c:	mov	r2, #34	; 0x22
   18890:	strb	r2, [r3]
   18894:	mov	r3, #1
   18898:	str	r3, [sp, #48]	; 0x30
   1889c:	str	r3, [sp, #60]	; 0x3c
   188a0:	ldr	r3, [pc, #3980]	; 19834 <__assert_fail@plt+0x80e0>
   188a4:	str	r3, [sp, #72]	; 0x48
   188a8:	mov	fp, #1
   188ac:	b	18850 <__assert_fail@plt+0x70fc>
   188b0:	cmp	sl, #10
   188b4:	beq	188d8 <__assert_fail@plt+0x7184>
   188b8:	mov	r1, sl
   188bc:	ldr	r0, [pc, #3948]	; 19830 <__assert_fail@plt+0x80dc>
   188c0:	bl	1865c <__assert_fail@plt+0x6f08>
   188c4:	str	r0, [sp, #164]	; 0xa4
   188c8:	mov	r1, sl
   188cc:	ldr	r0, [pc, #3928]	; 1982c <__assert_fail@plt+0x80d8>
   188d0:	bl	1865c <__assert_fail@plt+0x6f08>
   188d4:	str	r0, [sp, #168]	; 0xa8
   188d8:	ldr	r3, [sp, #32]
   188dc:	cmp	r3, #0
   188e0:	movne	fp, #0
   188e4:	bne	1891c <__assert_fail@plt+0x71c8>
   188e8:	ldr	r3, [sp, #164]	; 0xa4
   188ec:	ldrb	r3, [r3]
   188f0:	cmp	r3, #0
   188f4:	beq	1893c <__assert_fail@plt+0x71e8>
   188f8:	ldr	r2, [sp, #164]	; 0xa4
   188fc:	mov	fp, #0
   18900:	ldr	r1, [sp, #36]	; 0x24
   18904:	cmp	r7, fp
   18908:	strbhi	r3, [r1, fp]
   1890c:	add	fp, fp, #1
   18910:	ldrb	r3, [r2, #1]!
   18914:	cmp	r3, #0
   18918:	bne	18904 <__assert_fail@plt+0x71b0>
   1891c:	ldr	r0, [sp, #168]	; 0xa8
   18920:	bl	115b0 <strlen@plt>
   18924:	str	r0, [sp, #60]	; 0x3c
   18928:	ldr	r3, [sp, #168]	; 0xa8
   1892c:	str	r3, [sp, #72]	; 0x48
   18930:	mov	r3, #1
   18934:	str	r3, [sp, #48]	; 0x30
   18938:	b	18850 <__assert_fail@plt+0x70fc>
   1893c:	mov	fp, #0
   18940:	b	1891c <__assert_fail@plt+0x71c8>
   18944:	ldr	r3, [sp, #32]
   18948:	cmp	r3, #0
   1894c:	bne	18a0c <__assert_fail@plt+0x72b8>
   18950:	mov	r3, #1
   18954:	str	r3, [sp, #48]	; 0x30
   18958:	cmp	r7, #0
   1895c:	beq	18a28 <__assert_fail@plt+0x72d4>
   18960:	ldr	r3, [sp, #36]	; 0x24
   18964:	mov	r2, #39	; 0x27
   18968:	strb	r2, [r3]
   1896c:	mov	r3, #0
   18970:	str	r3, [sp, #32]
   18974:	mov	r3, #1
   18978:	str	r3, [sp, #60]	; 0x3c
   1897c:	ldr	r3, [pc, #3752]	; 1982c <__assert_fail@plt+0x80d8>
   18980:	str	r3, [sp, #72]	; 0x48
   18984:	mov	fp, #1
   18988:	mov	sl, #2
   1898c:	b	18850 <__assert_fail@plt+0x70fc>
   18990:	ldr	r3, [sp, #32]
   18994:	cmp	r3, #0
   18998:	beq	18958 <__assert_fail@plt+0x7204>
   1899c:	mov	r3, #1
   189a0:	str	r3, [sp, #60]	; 0x3c
   189a4:	ldr	r3, [pc, #3712]	; 1982c <__assert_fail@plt+0x80d8>
   189a8:	str	r3, [sp, #72]	; 0x48
   189ac:	mov	fp, #0
   189b0:	b	18850 <__assert_fail@plt+0x70fc>
   189b4:	bl	11748 <abort@plt>
   189b8:	mov	r3, #0
   189bc:	str	r3, [sp, #32]
   189c0:	mov	r3, #1
   189c4:	str	r3, [sp, #48]	; 0x30
   189c8:	mov	fp, #0
   189cc:	b	18850 <__assert_fail@plt+0x70fc>
   189d0:	ldr	r3, [sp, #32]
   189d4:	str	r3, [sp, #48]	; 0x30
   189d8:	mov	r3, #1
   189dc:	str	r3, [sp, #60]	; 0x3c
   189e0:	ldr	r3, [pc, #3660]	; 19834 <__assert_fail@plt+0x80e0>
   189e4:	str	r3, [sp, #72]	; 0x48
   189e8:	mov	fp, #0
   189ec:	b	18850 <__assert_fail@plt+0x70fc>
   189f0:	mov	r3, #1
   189f4:	str	r3, [sp, #48]	; 0x30
   189f8:	str	r3, [sp, #60]	; 0x3c
   189fc:	ldr	r3, [pc, #3632]	; 19834 <__assert_fail@plt+0x80e0>
   18a00:	str	r3, [sp, #72]	; 0x48
   18a04:	mov	fp, #1
   18a08:	b	18850 <__assert_fail@plt+0x70fc>
   18a0c:	mov	r3, #1
   18a10:	str	r3, [sp, #60]	; 0x3c
   18a14:	ldr	r3, [pc, #3600]	; 1982c <__assert_fail@plt+0x80d8>
   18a18:	str	r3, [sp, #72]	; 0x48
   18a1c:	mov	fp, #0
   18a20:	mov	sl, #2
   18a24:	b	18850 <__assert_fail@plt+0x70fc>
   18a28:	mov	r3, #0
   18a2c:	str	r3, [sp, #32]
   18a30:	mov	r3, #1
   18a34:	str	r3, [sp, #60]	; 0x3c
   18a38:	ldr	r3, [pc, #3564]	; 1982c <__assert_fail@plt+0x80d8>
   18a3c:	str	r3, [sp, #72]	; 0x48
   18a40:	mov	fp, #1
   18a44:	mov	sl, #2
   18a48:	b	18850 <__assert_fail@plt+0x70fc>
   18a4c:	mov	r3, #0
   18a50:	str	r3, [sp, #56]	; 0x38
   18a54:	ldr	r3, [sp, #52]	; 0x34
   18a58:	add	r2, r3, r6
   18a5c:	str	r2, [sp, #64]	; 0x40
   18a60:	ldrb	r4, [r3, r6]
   18a64:	cmp	r4, #126	; 0x7e
   18a68:	ldrls	pc, [pc, r4, lsl #2]
   18a6c:	b	192a8 <__assert_fail@plt+0x7b54>
   18a70:	andeq	r8, r1, r8, lsl #25
   18a74:	andeq	r9, r1, r8, lsr #5
   18a78:	andeq	r9, r1, r8, lsr #5
   18a7c:	andeq	r9, r1, r8, lsr #5
   18a80:	andeq	r9, r1, r8, lsr #5
   18a84:	andeq	r9, r1, r8, lsr #5
   18a88:	andeq	r9, r1, r8, lsr #5
   18a8c:	andeq	r8, r1, r4, ror #31
   18a90:	andeq	r8, r1, r0, lsl #25
   18a94:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   18a98:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   18a9c:	andeq	r8, r1, r4, lsl #30
   18aa0:	strdeq	r8, [r1], -ip
   18aa4:	andeq	r8, r1, r8, ror ip
   18aa8:	andeq	r9, r1, r8, lsr #5
   18aac:	andeq	r9, r1, r8, lsr #5
   18ab0:	andeq	r9, r1, r8, lsr #5
   18ab4:	andeq	r9, r1, r8, lsr #5
   18ab8:	andeq	r9, r1, r8, lsr #5
   18abc:	andeq	r9, r1, r8, lsr #5
   18ac0:	andeq	r9, r1, r8, lsr #5
   18ac4:	andeq	r9, r1, r8, lsr #5
   18ac8:	andeq	r9, r1, r8, lsr #5
   18acc:	andeq	r9, r1, r8, lsr #5
   18ad0:	andeq	r9, r1, r8, lsr #5
   18ad4:	andeq	r9, r1, r8, lsr #5
   18ad8:	andeq	r9, r1, r8, lsr #5
   18adc:	andeq	r9, r1, r8, lsr #5
   18ae0:	andeq	r9, r1, r8, lsr #5
   18ae4:	andeq	r9, r1, r8, lsr #5
   18ae8:	andeq	r9, r1, r8, lsr #5
   18aec:	andeq	r9, r1, r8, lsr #5
   18af0:	andeq	r9, r1, r8, lsr r0
   18af4:	andeq	r9, r1, r4, lsr r0
   18af8:	andeq	r9, r1, r4, lsr r0
   18afc:	andeq	r9, r1, ip
   18b00:	andeq	r9, r1, r4, lsr r0
   18b04:	andeq	r9, r1, ip, ror r6
   18b08:	andeq	r9, r1, r4, lsr r0
   18b0c:	andeq	r9, r1, ip, lsl #4
   18b10:	andeq	r9, r1, r4, lsr r0
   18b14:	andeq	r9, r1, r4, lsr r0
   18b18:	andeq	r9, r1, r4, lsr r0
   18b1c:	andeq	r9, r1, ip, ror r6
   18b20:	andeq	r9, r1, ip, ror r6
   18b24:	andeq	r9, r1, ip, ror r6
   18b28:	andeq	r9, r1, ip, ror r6
   18b2c:	andeq	r9, r1, ip, ror r6
   18b30:	andeq	r9, r1, ip, ror r6
   18b34:	andeq	r9, r1, ip, ror r6
   18b38:	andeq	r9, r1, ip, ror r6
   18b3c:	andeq	r9, r1, ip, ror r6
   18b40:	andeq	r9, r1, ip, ror r6
   18b44:	andeq	r9, r1, ip, ror r6
   18b48:	andeq	r9, r1, ip, ror r6
   18b4c:	andeq	r9, r1, ip, ror r6
   18b50:	andeq	r9, r1, ip, ror r6
   18b54:	andeq	r9, r1, ip, ror r6
   18b58:	andeq	r9, r1, ip, ror r6
   18b5c:	andeq	r9, r1, r4, lsr r0
   18b60:	andeq	r9, r1, r4, lsr r0
   18b64:	andeq	r9, r1, r4, lsr r0
   18b68:	andeq	r9, r1, r4, lsr r0
   18b6c:	muleq	r1, r0, sp
   18b70:	andeq	r9, r1, r8, lsr #5
   18b74:	andeq	r9, r1, ip, ror r6
   18b78:	andeq	r9, r1, ip, ror r6
   18b7c:	andeq	r9, r1, ip, ror r6
   18b80:	andeq	r9, r1, ip, ror r6
   18b84:	andeq	r9, r1, ip, ror r6
   18b88:	andeq	r9, r1, ip, ror r6
   18b8c:	andeq	r9, r1, ip, ror r6
   18b90:	andeq	r9, r1, ip, ror r6
   18b94:	andeq	r9, r1, ip, ror r6
   18b98:	andeq	r9, r1, ip, ror r6
   18b9c:	andeq	r9, r1, ip, ror r6
   18ba0:	andeq	r9, r1, ip, ror r6
   18ba4:	andeq	r9, r1, ip, ror r6
   18ba8:	andeq	r9, r1, ip, ror r6
   18bac:	andeq	r9, r1, ip, ror r6
   18bb0:	andeq	r9, r1, ip, ror r6
   18bb4:	andeq	r9, r1, ip, ror r6
   18bb8:	andeq	r9, r1, ip, ror r6
   18bbc:	andeq	r9, r1, ip, ror r6
   18bc0:	andeq	r9, r1, ip, ror r6
   18bc4:	andeq	r9, r1, ip, ror r6
   18bc8:	andeq	r9, r1, ip, ror r6
   18bcc:	andeq	r9, r1, ip, ror r6
   18bd0:	andeq	r9, r1, ip, ror r6
   18bd4:	andeq	r9, r1, ip, ror r6
   18bd8:	andeq	r9, r1, ip, ror r6
   18bdc:	andeq	r9, r1, r4, lsr r0
   18be0:	andeq	r8, r1, ip, lsl #30
   18be4:	andeq	r9, r1, ip, ror r6
   18be8:	andeq	r9, r1, r4, lsr r0
   18bec:	andeq	r9, r1, ip, ror r6
   18bf0:	andeq	r9, r1, r4, lsr r0
   18bf4:	andeq	r9, r1, ip, ror r6
   18bf8:	andeq	r9, r1, ip, ror r6
   18bfc:	andeq	r9, r1, ip, ror r6
   18c00:	andeq	r9, r1, ip, ror r6
   18c04:	andeq	r9, r1, ip, ror r6
   18c08:	andeq	r9, r1, ip, ror r6
   18c0c:	andeq	r9, r1, ip, ror r6
   18c10:	andeq	r9, r1, ip, ror r6
   18c14:	andeq	r9, r1, ip, ror r6
   18c18:	andeq	r9, r1, ip, ror r6
   18c1c:	andeq	r9, r1, ip, ror r6
   18c20:	andeq	r9, r1, ip, ror r6
   18c24:	andeq	r9, r1, ip, ror r6
   18c28:	andeq	r9, r1, ip, ror r6
   18c2c:	andeq	r9, r1, ip, ror r6
   18c30:	andeq	r9, r1, ip, ror r6
   18c34:	andeq	r9, r1, ip, ror r6
   18c38:	andeq	r9, r1, ip, ror r6
   18c3c:	andeq	r9, r1, ip, ror r6
   18c40:	andeq	r9, r1, ip, ror r6
   18c44:	andeq	r9, r1, ip, ror r6
   18c48:	andeq	r9, r1, ip, ror r6
   18c4c:	andeq	r9, r1, ip, ror r6
   18c50:	andeq	r9, r1, ip, ror r6
   18c54:	andeq	r9, r1, ip, ror r6
   18c58:	andeq	r9, r1, ip, ror r6
   18c5c:	andeq	r8, r1, ip, ror #31
   18c60:	andeq	r9, r1, r4, lsr r0
   18c64:	andeq	r8, r1, ip, ror #31
   18c68:	andeq	r9, r1, ip
   18c6c:	mov	r3, #0
   18c70:	str	r3, [sp, #56]	; 0x38
   18c74:	b	18a54 <__assert_fail@plt+0x7300>
   18c78:	mov	r3, #114	; 0x72
   18c7c:	b	18fa0 <__assert_fail@plt+0x784c>
   18c80:	mov	r3, #98	; 0x62
   18c84:	b	18fb8 <__assert_fail@plt+0x7864>
   18c88:	ldr	r3, [sp, #48]	; 0x30
   18c8c:	cmp	r3, #0
   18c90:	beq	18d78 <__assert_fail@plt+0x7624>
   18c94:	ldr	r3, [sp, #32]
   18c98:	cmp	r3, #0
   18c9c:	bne	19800 <__assert_fail@plt+0x80ac>
   18ca0:	ldr	r3, [sp, #44]	; 0x2c
   18ca4:	eor	r3, r3, #1
   18ca8:	cmp	sl, #2
   18cac:	movne	r3, #0
   18cb0:	andeq	r3, r3, #1
   18cb4:	cmp	r3, #0
   18cb8:	moveq	r2, fp
   18cbc:	beq	18d00 <__assert_fail@plt+0x75ac>
   18cc0:	cmp	r7, fp
   18cc4:	ldrhi	r2, [sp, #36]	; 0x24
   18cc8:	movhi	r1, #39	; 0x27
   18ccc:	strbhi	r1, [r2, fp]
   18cd0:	add	r2, fp, #1
   18cd4:	cmp	r7, r2
   18cd8:	ldrhi	r1, [sp, #36]	; 0x24
   18cdc:	movhi	r0, #36	; 0x24
   18ce0:	strbhi	r0, [r1, r2]
   18ce4:	add	r2, fp, #2
   18ce8:	cmp	r7, r2
   18cec:	ldrhi	r1, [sp, #36]	; 0x24
   18cf0:	movhi	r0, #39	; 0x27
   18cf4:	strbhi	r0, [r1, r2]
   18cf8:	add	r2, fp, #3
   18cfc:	str	r3, [sp, #44]	; 0x2c
   18d00:	cmp	r7, r2
   18d04:	ldrhi	r3, [sp, #36]	; 0x24
   18d08:	movhi	r1, #92	; 0x5c
   18d0c:	strbhi	r1, [r3, r2]
   18d10:	add	fp, r2, #1
   18d14:	cmp	r5, #0
   18d18:	beq	19684 <__assert_fail@plt+0x7f30>
   18d1c:	add	r3, r6, #1
   18d20:	ldr	r1, [sp, #28]
   18d24:	cmp	r1, r3
   18d28:	bls	19694 <__assert_fail@plt+0x7f40>
   18d2c:	ldr	r1, [sp, #52]	; 0x34
   18d30:	ldrb	r3, [r1, r3]
   18d34:	sub	r3, r3, #48	; 0x30
   18d38:	uxtb	r3, r3
   18d3c:	cmp	r3, #9
   18d40:	bhi	196a0 <__assert_fail@plt+0x7f4c>
   18d44:	cmp	r7, fp
   18d48:	movhi	r3, #48	; 0x30
   18d4c:	ldrhi	r1, [sp, #36]	; 0x24
   18d50:	strbhi	r3, [r1, fp]
   18d54:	add	r3, r2, #2
   18d58:	cmp	r7, r3
   18d5c:	movhi	r1, #48	; 0x30
   18d60:	ldrhi	r0, [sp, #36]	; 0x24
   18d64:	strbhi	r1, [r0, r3]
   18d68:	add	fp, r2, #3
   18d6c:	ldr	r8, [sp, #32]
   18d70:	mov	r4, #48	; 0x30
   18d74:	b	19050 <__assert_fail@plt+0x78fc>
   18d78:	ldr	r3, [sp, #156]	; 0x9c
   18d7c:	tst	r3, #1
   18d80:	bne	19144 <__assert_fail@plt+0x79f0>
   18d84:	ldr	r5, [sp, #48]	; 0x30
   18d88:	mov	r8, r5
   18d8c:	b	19050 <__assert_fail@plt+0x78fc>
   18d90:	cmp	sl, #2
   18d94:	beq	18dac <__assert_fail@plt+0x7658>
   18d98:	cmp	sl, #5
   18d9c:	beq	18dc4 <__assert_fail@plt+0x7670>
   18da0:	mov	r8, #0
   18da4:	mov	r5, r8
   18da8:	b	19050 <__assert_fail@plt+0x78fc>
   18dac:	ldr	r3, [sp, #32]
   18db0:	cmp	r3, #0
   18db4:	bne	19814 <__assert_fail@plt+0x80c0>
   18db8:	mov	r8, r3
   18dbc:	mov	r5, r3
   18dc0:	b	19050 <__assert_fail@plt+0x78fc>
   18dc4:	ldr	r3, [sp, #156]	; 0x9c
   18dc8:	tst	r3, #4
   18dcc:	beq	196ac <__assert_fail@plt+0x7f58>
   18dd0:	add	r3, r6, #2
   18dd4:	ldr	r2, [sp, #28]
   18dd8:	cmp	r2, r3
   18ddc:	bls	196b8 <__assert_fail@plt+0x7f64>
   18de0:	ldr	r2, [sp, #52]	; 0x34
   18de4:	add	r2, r2, r6
   18de8:	ldrb	r2, [r2, #1]
   18dec:	cmp	r2, #63	; 0x3f
   18df0:	movne	r8, #0
   18df4:	movne	r5, r8
   18df8:	bne	19050 <__assert_fail@plt+0x78fc>
   18dfc:	ldr	r2, [sp, #52]	; 0x34
   18e00:	ldrb	r2, [r2, r3]
   18e04:	sub	r1, r2, #33	; 0x21
   18e08:	cmp	r1, #29
   18e0c:	ldrls	pc, [pc, r1, lsl #2]
   18e10:	b	196c4 <__assert_fail@plt+0x7f70>
   18e14:	andeq	r8, r1, ip, lsl #29
   18e18:	andeq	r9, r1, r4, asr #13
   18e1c:	andeq	r9, r1, r4, asr #13
   18e20:	andeq	r9, r1, r4, asr #13
   18e24:	andeq	r9, r1, r4, asr #13
   18e28:	andeq	r9, r1, r4, asr #13
   18e2c:	andeq	r8, r1, ip, lsl #29
   18e30:	andeq	r8, r1, ip, lsl #29
   18e34:	andeq	r8, r1, ip, lsl #29
   18e38:	andeq	r9, r1, r4, asr #13
   18e3c:	andeq	r9, r1, r4, asr #13
   18e40:	andeq	r9, r1, r4, asr #13
   18e44:	andeq	r8, r1, ip, lsl #29
   18e48:	andeq	r9, r1, r4, asr #13
   18e4c:	andeq	r8, r1, ip, lsl #29
   18e50:	andeq	r9, r1, r4, asr #13
   18e54:	andeq	r9, r1, r4, asr #13
   18e58:	andeq	r9, r1, r4, asr #13
   18e5c:	andeq	r9, r1, r4, asr #13
   18e60:	andeq	r9, r1, r4, asr #13
   18e64:	andeq	r9, r1, r4, asr #13
   18e68:	andeq	r9, r1, r4, asr #13
   18e6c:	andeq	r9, r1, r4, asr #13
   18e70:	andeq	r9, r1, r4, asr #13
   18e74:	andeq	r9, r1, r4, asr #13
   18e78:	andeq	r9, r1, r4, asr #13
   18e7c:	andeq	r9, r1, r4, asr #13
   18e80:	andeq	r8, r1, ip, lsl #29
   18e84:	andeq	r8, r1, ip, lsl #29
   18e88:	andeq	r8, r1, ip, lsl #29
   18e8c:	ldr	r1, [sp, #32]
   18e90:	cmp	r1, #0
   18e94:	bne	198d4 <__assert_fail@plt+0x8180>
   18e98:	cmp	r7, fp
   18e9c:	movhi	r1, #63	; 0x3f
   18ea0:	ldrhi	r0, [sp, #36]	; 0x24
   18ea4:	strbhi	r1, [r0, fp]
   18ea8:	add	r1, fp, #1
   18eac:	cmp	r7, r1
   18eb0:	ldrhi	r0, [sp, #36]	; 0x24
   18eb4:	movhi	ip, #34	; 0x22
   18eb8:	strbhi	ip, [r0, r1]
   18ebc:	add	r1, fp, #2
   18ec0:	cmp	r7, r1
   18ec4:	ldrhi	r0, [sp, #36]	; 0x24
   18ec8:	movhi	ip, #34	; 0x22
   18ecc:	strbhi	ip, [r0, r1]
   18ed0:	add	r1, fp, #3
   18ed4:	cmp	r7, r1
   18ed8:	movhi	r0, #63	; 0x3f
   18edc:	ldrhi	ip, [sp, #36]	; 0x24
   18ee0:	strbhi	r0, [ip, r1]
   18ee4:	add	fp, fp, #4
   18ee8:	ldr	r5, [sp, #32]
   18eec:	mov	r8, r5
   18ef0:	mov	r4, r2
   18ef4:	mov	r6, r3
   18ef8:	b	19050 <__assert_fail@plt+0x78fc>
   18efc:	mov	r3, #102	; 0x66
   18f00:	b	18fb8 <__assert_fail@plt+0x7864>
   18f04:	mov	r3, #118	; 0x76
   18f08:	b	18fb8 <__assert_fail@plt+0x7864>
   18f0c:	cmp	sl, #2
   18f10:	beq	18f7c <__assert_fail@plt+0x7828>
   18f14:	ldr	r3, [sp, #48]	; 0x30
   18f18:	ldr	r2, [sp, #32]
   18f1c:	and	r3, r3, r2
   18f20:	tst	r9, r3
   18f24:	moveq	r3, r4
   18f28:	beq	18fb8 <__assert_fail@plt+0x7864>
   18f2c:	mov	r8, #0
   18f30:	mov	r5, r8
   18f34:	eor	r5, r5, #1
   18f38:	ldr	r3, [sp, #44]	; 0x2c
   18f3c:	and	r5, r5, r3
   18f40:	tst	r5, #255	; 0xff
   18f44:	beq	19124 <__assert_fail@plt+0x79d0>
   18f48:	cmp	r7, fp
   18f4c:	ldrhi	r3, [sp, #36]	; 0x24
   18f50:	movhi	r2, #39	; 0x27
   18f54:	strbhi	r2, [r3, fp]
   18f58:	add	r3, fp, #1
   18f5c:	cmp	r7, r3
   18f60:	ldrhi	r2, [sp, #36]	; 0x24
   18f64:	movhi	r1, #39	; 0x27
   18f68:	strbhi	r1, [r2, r3]
   18f6c:	add	fp, fp, #2
   18f70:	mov	r3, #0
   18f74:	str	r3, [sp, #44]	; 0x2c
   18f78:	b	19124 <__assert_fail@plt+0x79d0>
   18f7c:	ldr	r3, [sp, #32]
   18f80:	cmp	r3, #0
   18f84:	bne	19820 <__assert_fail@plt+0x80cc>
   18f88:	mov	r8, r3
   18f8c:	mov	r5, r3
   18f90:	b	18f34 <__assert_fail@plt+0x77e0>
   18f94:	mov	r3, #110	; 0x6e
   18f98:	b	18fa0 <__assert_fail@plt+0x784c>
   18f9c:	mov	r3, #116	; 0x74
   18fa0:	ldr	r2, [sp, #32]
   18fa4:	cmp	sl, #2
   18fa8:	movne	r2, #0
   18fac:	andeq	r2, r2, #1
   18fb0:	cmp	r2, #0
   18fb4:	bne	18fd8 <__assert_fail@plt+0x7884>
   18fb8:	ldr	r2, [sp, #48]	; 0x30
   18fbc:	cmp	r2, #0
   18fc0:	moveq	r8, r2
   18fc4:	moveq	r5, r2
   18fc8:	beq	19050 <__assert_fail@plt+0x78fc>
   18fcc:	mov	r4, r3
   18fd0:	mov	r8, #0
   18fd4:	b	190a8 <__assert_fail@plt+0x7954>
   18fd8:	mov	r8, sl
   18fdc:	mov	sl, r7
   18fe0:	b	1984c <__assert_fail@plt+0x80f8>
   18fe4:	mov	r3, #97	; 0x61
   18fe8:	b	18fb8 <__assert_fail@plt+0x7864>
   18fec:	ldr	r3, [sp, #28]
   18ff0:	cmn	r3, #1
   18ff4:	beq	19020 <__assert_fail@plt+0x78cc>
   18ff8:	ldr	r3, [sp, #28]
   18ffc:	subs	r3, r3, #1
   19000:	movne	r3, #1
   19004:	cmp	r3, #0
   19008:	bne	196d0 <__assert_fail@plt+0x7f7c>
   1900c:	cmp	r6, #0
   19010:	beq	19038 <__assert_fail@plt+0x78e4>
   19014:	mov	r8, #0
   19018:	mov	r5, r8
   1901c:	b	19050 <__assert_fail@plt+0x78fc>
   19020:	ldr	r3, [sp, #52]	; 0x34
   19024:	ldrb	r3, [r3, #1]
   19028:	adds	r3, r3, #0
   1902c:	movne	r3, #1
   19030:	b	19004 <__assert_fail@plt+0x78b0>
   19034:	mov	r8, #0
   19038:	ldr	r5, [sp, #32]
   1903c:	cmp	sl, #2
   19040:	movne	r5, #0
   19044:	andeq	r5, r5, #1
   19048:	cmp	r5, #0
   1904c:	bne	19200 <__assert_fail@plt+0x7aac>
   19050:	ldr	r3, [sp, #68]	; 0x44
   19054:	cmp	sl, #2
   19058:	orreq	r3, r3, #1
   1905c:	eor	r3, r3, #1
   19060:	ldr	r2, [sp, #32]
   19064:	orr	r3, r2, r3
   19068:	tst	r3, #255	; 0xff
   1906c:	beq	1909c <__assert_fail@plt+0x7948>
   19070:	ldr	r3, [sp, #160]	; 0xa0
   19074:	cmp	r3, #0
   19078:	beq	1909c <__assert_fail@plt+0x7948>
   1907c:	lsr	r2, r4, #5
   19080:	uxtb	r2, r2
   19084:	and	r3, r4, #31
   19088:	ldr	r1, [sp, #160]	; 0xa0
   1908c:	ldr	r2, [r1, r2, lsl #2]
   19090:	lsr	r3, r2, r3
   19094:	tst	r3, #1
   19098:	bne	190a8 <__assert_fail@plt+0x7954>
   1909c:	ldr	r3, [sp, #56]	; 0x38
   190a0:	cmp	r3, #0
   190a4:	beq	18f34 <__assert_fail@plt+0x77e0>
   190a8:	ldr	r3, [sp, #32]
   190ac:	cmp	r3, #0
   190b0:	bne	198bc <__assert_fail@plt+0x8168>
   190b4:	ldr	r3, [sp, #44]	; 0x2c
   190b8:	eor	r3, r3, #1
   190bc:	cmp	sl, #2
   190c0:	movne	r3, #0
   190c4:	andeq	r3, r3, #1
   190c8:	cmp	r3, #0
   190cc:	beq	19110 <__assert_fail@plt+0x79bc>
   190d0:	cmp	r7, fp
   190d4:	ldrhi	r2, [sp, #36]	; 0x24
   190d8:	movhi	r1, #39	; 0x27
   190dc:	strbhi	r1, [r2, fp]
   190e0:	add	r2, fp, #1
   190e4:	cmp	r7, r2
   190e8:	ldrhi	r1, [sp, #36]	; 0x24
   190ec:	movhi	r0, #36	; 0x24
   190f0:	strbhi	r0, [r1, r2]
   190f4:	add	r2, fp, #2
   190f8:	cmp	r7, r2
   190fc:	ldrhi	r1, [sp, #36]	; 0x24
   19100:	movhi	r0, #39	; 0x27
   19104:	strbhi	r0, [r1, r2]
   19108:	add	fp, fp, #3
   1910c:	str	r3, [sp, #44]	; 0x2c
   19110:	cmp	r7, fp
   19114:	ldrhi	r3, [sp, #36]	; 0x24
   19118:	movhi	r2, #92	; 0x5c
   1911c:	strbhi	r2, [r3, fp]
   19120:	add	fp, fp, #1
   19124:	cmp	fp, r7
   19128:	ldrcc	r3, [sp, #36]	; 0x24
   1912c:	strbcc	r4, [r3, fp]
   19130:	add	fp, fp, #1
   19134:	ldr	r3, [sp, #40]	; 0x28
   19138:	cmp	r8, #0
   1913c:	moveq	r3, #0
   19140:	str	r3, [sp, #40]	; 0x28
   19144:	add	r6, r6, #1
   19148:	ldr	r3, [sp, #28]
   1914c:	cmn	r3, #1
   19150:	beq	196dc <__assert_fail@plt+0x7f88>
   19154:	ldr	r3, [sp, #28]
   19158:	subs	r8, r3, r6
   1915c:	movne	r8, #1
   19160:	cmp	r8, #0
   19164:	beq	196f0 <__assert_fail@plt+0x7f9c>
   19168:	ldr	r5, [sp, #48]	; 0x30
   1916c:	cmp	sl, #2
   19170:	moveq	r5, #0
   19174:	andne	r5, r5, #1
   19178:	ldr	r3, [sp, #60]	; 0x3c
   1917c:	adds	r9, r3, #0
   19180:	movne	r9, #1
   19184:	ands	r2, r5, r9
   19188:	str	r2, [sp, #56]	; 0x38
   1918c:	beq	18a54 <__assert_fail@plt+0x7300>
   19190:	add	r4, r6, r3
   19194:	ldr	r2, [sp, #28]
   19198:	cmp	r3, #1
   1919c:	movls	r3, #0
   191a0:	movhi	r3, #1
   191a4:	cmn	r2, #1
   191a8:	movne	r3, #0
   191ac:	cmp	r3, #0
   191b0:	beq	191c0 <__assert_fail@plt+0x7a6c>
   191b4:	ldr	r0, [sp, #52]	; 0x34
   191b8:	bl	115b0 <strlen@plt>
   191bc:	str	r0, [sp, #28]
   191c0:	ldr	r3, [sp, #28]
   191c4:	cmp	r3, r4
   191c8:	bcc	18a4c <__assert_fail@plt+0x72f8>
   191cc:	ldr	r2, [sp, #60]	; 0x3c
   191d0:	ldr	r1, [sp, #72]	; 0x48
   191d4:	ldr	r3, [sp, #52]	; 0x34
   191d8:	add	r0, r3, r6
   191dc:	bl	11418 <memcmp@plt>
   191e0:	cmp	r0, #0
   191e4:	bne	18c6c <__assert_fail@plt+0x7518>
   191e8:	ldr	r3, [sp, #32]
   191ec:	cmp	r3, #0
   191f0:	beq	18a54 <__assert_fail@plt+0x7300>
   191f4:	mov	r8, sl
   191f8:	mov	sl, r7
   191fc:	b	1984c <__assert_fail@plt+0x80f8>
   19200:	mov	r8, sl
   19204:	mov	sl, r7
   19208:	b	1984c <__assert_fail@plt+0x80f8>
   1920c:	cmp	sl, #2
   19210:	strne	r8, [sp, #80]	; 0x50
   19214:	movne	r5, #0
   19218:	bne	19050 <__assert_fail@plt+0x78fc>
   1921c:	ldr	r3, [sp, #32]
   19220:	cmp	r3, #0
   19224:	bne	19838 <__assert_fail@plt+0x80e4>
   19228:	ldr	r2, [sp, #76]	; 0x4c
   1922c:	adds	r3, r7, #0
   19230:	movne	r3, #1
   19234:	cmp	r2, #0
   19238:	movne	r3, #0
   1923c:	cmp	r3, #0
   19240:	movne	r3, #0
   19244:	bne	19274 <__assert_fail@plt+0x7b20>
   19248:	cmp	r7, fp
   1924c:	ldrhi	r3, [sp, #36]	; 0x24
   19250:	movhi	r2, #39	; 0x27
   19254:	strbhi	r2, [r3, fp]
   19258:	add	r3, fp, #1
   1925c:	cmp	r7, r3
   19260:	ldrhi	r2, [sp, #36]	; 0x24
   19264:	movhi	r1, #92	; 0x5c
   19268:	strbhi	r1, [r2, r3]
   1926c:	mov	r3, r7
   19270:	ldr	r7, [sp, #76]	; 0x4c
   19274:	add	r2, fp, #2
   19278:	cmp	r2, r3
   1927c:	ldrcc	r1, [sp, #36]	; 0x24
   19280:	movcc	r0, #39	; 0x27
   19284:	strbcc	r0, [r1, r2]
   19288:	add	fp, fp, #3
   1928c:	ldr	r2, [sp, #32]
   19290:	mov	r5, r2
   19294:	str	r8, [sp, #80]	; 0x50
   19298:	str	r2, [sp, #44]	; 0x2c
   1929c:	str	r7, [sp, #76]	; 0x4c
   192a0:	mov	r7, r3
   192a4:	b	19050 <__assert_fail@plt+0x78fc>
   192a8:	ldr	r5, [sp, #84]	; 0x54
   192ac:	cmp	r5, #1
   192b0:	beq	192e0 <__assert_fail@plt+0x7b8c>
   192b4:	mov	r3, #0
   192b8:	str	r3, [sp, #104]	; 0x68
   192bc:	str	r3, [sp, #108]	; 0x6c
   192c0:	ldr	r3, [sp, #28]
   192c4:	cmn	r3, #1
   192c8:	beq	19314 <__assert_fail@plt+0x7bc0>
   192cc:	mov	r3, #0
   192d0:	str	r4, [sp, #88]	; 0x58
   192d4:	str	fp, [sp, #92]	; 0x5c
   192d8:	mov	fp, r3
   192dc:	b	1943c <__assert_fail@plt+0x7ce8>
   192e0:	bl	1158c <__ctype_b_loc@plt>
   192e4:	ldr	r2, [r0]
   192e8:	lsl	r3, r4, #1
   192ec:	ldrh	r8, [r2, r3]
   192f0:	lsr	r8, r8, #14
   192f4:	and	r8, r8, #1
   192f8:	mov	r2, r5
   192fc:	eor	r5, r8, #1
   19300:	ldr	r3, [sp, #48]	; 0x30
   19304:	and	r5, r5, r3
   19308:	ands	r5, r5, #255	; 0xff
   1930c:	beq	19050 <__assert_fail@plt+0x78fc>
   19310:	b	194d4 <__assert_fail@plt+0x7d80>
   19314:	ldr	r0, [sp, #52]	; 0x34
   19318:	bl	115b0 <strlen@plt>
   1931c:	str	r0, [sp, #28]
   19320:	b	192cc <__assert_fail@plt+0x7b78>
   19324:	mov	r2, fp
   19328:	mov	r1, r4
   1932c:	ldr	r4, [sp, #88]	; 0x58
   19330:	ldr	fp, [sp, #92]	; 0x5c
   19334:	ldr	r0, [sp, #28]
   19338:	cmp	r0, r5
   1933c:	bls	19508 <__assert_fail@plt+0x7db4>
   19340:	ldrb	r3, [r1]
   19344:	cmp	r3, #0
   19348:	beq	19510 <__assert_fail@plt+0x7dbc>
   1934c:	mov	r3, r1
   19350:	add	r2, r2, #1
   19354:	add	r1, r6, r2
   19358:	cmp	r0, r1
   1935c:	bls	19518 <__assert_fail@plt+0x7dc4>
   19360:	ldrb	r1, [r3, #1]!
   19364:	cmp	r1, #0
   19368:	bne	19350 <__assert_fail@plt+0x7bfc>
   1936c:	mov	r8, #0
   19370:	b	194cc <__assert_fail@plt+0x7d78>
   19374:	cmp	r4, r5
   19378:	beq	19418 <__assert_fail@plt+0x7cc4>
   1937c:	ldrb	r3, [r4, #1]!
   19380:	sub	r3, r3, #91	; 0x5b
   19384:	cmp	r3, #33	; 0x21
   19388:	ldrls	pc, [pc, r3, lsl #2]
   1938c:	b	19374 <__assert_fail@plt+0x7c20>
   19390:	andeq	r9, r1, r4, asr #16
   19394:	andeq	r9, r1, r4, asr #16
   19398:	andeq	r9, r1, r4, ror r3
   1939c:	andeq	r9, r1, r4, asr #16
   193a0:	andeq	r9, r1, r4, ror r3
   193a4:	andeq	r9, r1, r4, asr #16
   193a8:	andeq	r9, r1, r4, ror r3
   193ac:	andeq	r9, r1, r4, ror r3
   193b0:	andeq	r9, r1, r4, ror r3
   193b4:	andeq	r9, r1, r4, ror r3
   193b8:	andeq	r9, r1, r4, ror r3
   193bc:	andeq	r9, r1, r4, ror r3
   193c0:	andeq	r9, r1, r4, ror r3
   193c4:	andeq	r9, r1, r4, ror r3
   193c8:	andeq	r9, r1, r4, ror r3
   193cc:	andeq	r9, r1, r4, ror r3
   193d0:	andeq	r9, r1, r4, ror r3
   193d4:	andeq	r9, r1, r4, ror r3
   193d8:	andeq	r9, r1, r4, ror r3
   193dc:	andeq	r9, r1, r4, ror r3
   193e0:	andeq	r9, r1, r4, ror r3
   193e4:	andeq	r9, r1, r4, ror r3
   193e8:	andeq	r9, r1, r4, ror r3
   193ec:	andeq	r9, r1, r4, ror r3
   193f0:	andeq	r9, r1, r4, ror r3
   193f4:	andeq	r9, r1, r4, ror r3
   193f8:	andeq	r9, r1, r4, ror r3
   193fc:	andeq	r9, r1, r4, ror r3
   19400:	andeq	r9, r1, r4, ror r3
   19404:	andeq	r9, r1, r4, ror r3
   19408:	andeq	r9, r1, r4, ror r3
   1940c:	andeq	r9, r1, r4, ror r3
   19410:	andeq	r9, r1, r4, ror r3
   19414:	andeq	r9, r1, r4, asr #16
   19418:	ldr	r0, [sp, #100]	; 0x64
   1941c:	bl	114cc <iswprint@plt>
   19420:	cmp	r0, #0
   19424:	moveq	r8, #0
   19428:	add	fp, fp, r9
   1942c:	add	r0, sp, #104	; 0x68
   19430:	bl	1140c <mbsinit@plt>
   19434:	cmp	r0, #0
   19438:	bne	194ac <__assert_fail@plt+0x7d58>
   1943c:	add	r5, r6, fp
   19440:	ldr	r3, [sp, #52]	; 0x34
   19444:	add	r4, r3, r5
   19448:	add	r3, sp, #104	; 0x68
   1944c:	ldr	r2, [sp, #28]
   19450:	sub	r2, r2, r5
   19454:	mov	r1, r4
   19458:	add	r0, sp, #100	; 0x64
   1945c:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   19460:	subs	r9, r0, #0
   19464:	beq	19520 <__assert_fail@plt+0x7dcc>
   19468:	cmn	r9, #1
   1946c:	beq	194bc <__assert_fail@plt+0x7d68>
   19470:	cmn	r9, #2
   19474:	beq	19324 <__assert_fail@plt+0x7bd0>
   19478:	ldr	r3, [sp, #32]
   1947c:	cmp	sl, #2
   19480:	movne	r3, #0
   19484:	andeq	r3, r3, #1
   19488:	cmp	r3, #0
   1948c:	beq	19418 <__assert_fail@plt+0x7cc4>
   19490:	cmp	r9, #1
   19494:	bls	19418 <__assert_fail@plt+0x7cc4>
   19498:	sub	r3, r9, #1
   1949c:	add	r5, r3, r5
   194a0:	ldr	r3, [sp, #52]	; 0x34
   194a4:	add	r5, r3, r5
   194a8:	b	1937c <__assert_fail@plt+0x7c28>
   194ac:	ldr	r4, [sp, #88]	; 0x58
   194b0:	mov	r2, fp
   194b4:	ldr	fp, [sp, #92]	; 0x5c
   194b8:	b	194cc <__assert_fail@plt+0x7d78>
   194bc:	ldr	r4, [sp, #88]	; 0x58
   194c0:	mov	r2, fp
   194c4:	ldr	fp, [sp, #92]	; 0x5c
   194c8:	mov	r8, #0
   194cc:	cmp	r2, #1
   194d0:	bls	192fc <__assert_fail@plt+0x7ba8>
   194d4:	add	r1, r6, r2
   194d8:	ldr	ip, [sp, #64]	; 0x40
   194dc:	mov	r5, #0
   194e0:	eor	r3, r8, #1
   194e4:	ldr	r2, [sp, #48]	; 0x30
   194e8:	and	r3, r3, r2
   194ec:	uxtb	r3, r3
   194f0:	ldr	r9, [sp, #32]
   194f4:	ldr	lr, [sp, #44]	; 0x2c
   194f8:	ldr	r2, [sp, #56]	; 0x38
   194fc:	str	r8, [sp, #56]	; 0x38
   19500:	ldr	r0, [sp, #36]	; 0x24
   19504:	b	195a0 <__assert_fail@plt+0x7e4c>
   19508:	mov	r8, #0
   1950c:	b	194cc <__assert_fail@plt+0x7d78>
   19510:	mov	r8, #0
   19514:	b	194cc <__assert_fail@plt+0x7d78>
   19518:	mov	r8, #0
   1951c:	b	194cc <__assert_fail@plt+0x7d78>
   19520:	ldr	r4, [sp, #88]	; 0x58
   19524:	mov	r2, fp
   19528:	ldr	fp, [sp, #92]	; 0x5c
   1952c:	b	194cc <__assert_fail@plt+0x7d78>
   19530:	cmp	r2, #0
   19534:	beq	19548 <__assert_fail@plt+0x7df4>
   19538:	cmp	r7, fp
   1953c:	movhi	r2, #92	; 0x5c
   19540:	strbhi	r2, [r0, fp]
   19544:	add	fp, fp, #1
   19548:	add	r8, r6, #1
   1954c:	cmp	r1, r8
   19550:	bls	19658 <__assert_fail@plt+0x7f04>
   19554:	eor	r2, r5, #1
   19558:	and	r2, r2, lr
   1955c:	ands	r2, r2, #255	; 0xff
   19560:	beq	19674 <__assert_fail@plt+0x7f20>
   19564:	cmp	r7, fp
   19568:	movhi	r2, #39	; 0x27
   1956c:	strbhi	r2, [r0, fp]
   19570:	add	r2, fp, #1
   19574:	cmp	r7, r2
   19578:	movhi	lr, #39	; 0x27
   1957c:	strbhi	lr, [r0, r2]
   19580:	add	fp, fp, #2
   19584:	mov	r6, r8
   19588:	mov	r2, r3
   1958c:	mov	lr, r3
   19590:	cmp	r7, fp
   19594:	strbhi	r4, [r0, fp]
   19598:	add	fp, fp, #1
   1959c:	ldrb	r4, [ip, #1]!
   195a0:	cmp	r3, #0
   195a4:	beq	19530 <__assert_fail@plt+0x7ddc>
   195a8:	cmp	r9, #0
   195ac:	bne	198b0 <__assert_fail@plt+0x815c>
   195b0:	eor	r5, lr, #1
   195b4:	cmp	sl, #2
   195b8:	movne	r5, #0
   195bc:	andeq	r5, r5, #1
   195c0:	cmp	r5, #0
   195c4:	beq	195fc <__assert_fail@plt+0x7ea8>
   195c8:	cmp	r7, fp
   195cc:	movhi	lr, #39	; 0x27
   195d0:	strbhi	lr, [r0, fp]
   195d4:	add	lr, fp, #1
   195d8:	cmp	r7, lr
   195dc:	movhi	r8, #36	; 0x24
   195e0:	strbhi	r8, [r0, lr]
   195e4:	add	lr, fp, #2
   195e8:	cmp	r7, lr
   195ec:	movhi	r8, #39	; 0x27
   195f0:	strbhi	r8, [r0, lr]
   195f4:	add	fp, fp, #3
   195f8:	mov	lr, r5
   195fc:	cmp	r7, fp
   19600:	movhi	r5, #92	; 0x5c
   19604:	strbhi	r5, [r0, fp]
   19608:	add	r5, fp, #1
   1960c:	cmp	r7, r5
   19610:	lsrhi	r8, r4, #6
   19614:	addhi	r8, r8, #48	; 0x30
   19618:	strbhi	r8, [r0, r5]
   1961c:	add	r8, fp, #2
   19620:	cmp	r7, r8
   19624:	lsrhi	r5, r4, #3
   19628:	andhi	r5, r5, #7
   1962c:	addhi	r5, r5, #48	; 0x30
   19630:	strbhi	r5, [r0, r8]
   19634:	add	fp, fp, #3
   19638:	and	r4, r4, #7
   1963c:	add	r4, r4, #48	; 0x30
   19640:	add	r5, r6, #1
   19644:	cmp	r1, r5
   19648:	bls	19664 <__assert_fail@plt+0x7f10>
   1964c:	mov	r6, r5
   19650:	mov	r5, r3
   19654:	b	19590 <__assert_fail@plt+0x7e3c>
   19658:	str	lr, [sp, #44]	; 0x2c
   1965c:	ldr	r8, [sp, #56]	; 0x38
   19660:	b	18f34 <__assert_fail@plt+0x77e0>
   19664:	str	lr, [sp, #44]	; 0x2c
   19668:	ldr	r8, [sp, #56]	; 0x38
   1966c:	mov	r5, r3
   19670:	b	18f34 <__assert_fail@plt+0x77e0>
   19674:	mov	r6, r8
   19678:	b	19590 <__assert_fail@plt+0x7e3c>
   1967c:	mov	r5, #0
   19680:	b	19050 <__assert_fail@plt+0x78fc>
   19684:	mov	r8, r5
   19688:	ldr	r5, [sp, #48]	; 0x30
   1968c:	mov	r4, #48	; 0x30
   19690:	b	19050 <__assert_fail@plt+0x78fc>
   19694:	ldr	r8, [sp, #32]
   19698:	mov	r4, #48	; 0x30
   1969c:	b	19050 <__assert_fail@plt+0x78fc>
   196a0:	ldr	r8, [sp, #32]
   196a4:	mov	r4, #48	; 0x30
   196a8:	b	19050 <__assert_fail@plt+0x78fc>
   196ac:	mov	r8, #0
   196b0:	mov	r5, r8
   196b4:	b	19050 <__assert_fail@plt+0x78fc>
   196b8:	mov	r8, #0
   196bc:	mov	r5, r8
   196c0:	b	19050 <__assert_fail@plt+0x78fc>
   196c4:	mov	r8, #0
   196c8:	mov	r5, r8
   196cc:	b	19050 <__assert_fail@plt+0x78fc>
   196d0:	mov	r8, #0
   196d4:	mov	r5, r8
   196d8:	b	19050 <__assert_fail@plt+0x78fc>
   196dc:	ldr	r3, [sp, #52]	; 0x34
   196e0:	ldrb	r8, [r3, r6]
   196e4:	adds	r8, r8, #0
   196e8:	movne	r8, #1
   196ec:	b	19160 <__assert_fail@plt+0x7a0c>
   196f0:	cmp	sl, #2
   196f4:	movne	r3, #0
   196f8:	moveq	r3, #1
   196fc:	ldr	r1, [sp, #32]
   19700:	mov	r2, r1
   19704:	and	r2, r2, r3
   19708:	cmp	fp, #0
   1970c:	movne	r2, #0
   19710:	andeq	r2, r2, #1
   19714:	cmp	r2, #0
   19718:	bne	198c8 <__assert_fail@plt+0x8174>
   1971c:	eor	r2, r1, #1
   19720:	and	r3, r3, r2
   19724:	ldr	r1, [sp, #80]	; 0x50
   19728:	tst	r1, r3
   1972c:	beq	197a4 <__assert_fail@plt+0x8050>
   19730:	ldr	r3, [sp, #40]	; 0x28
   19734:	cmp	r3, #0
   19738:	bne	19760 <__assert_fail@plt+0x800c>
   1973c:	ldr	r1, [sp, #76]	; 0x4c
   19740:	clz	r3, r7
   19744:	lsr	r3, r3, #5
   19748:	cmp	r1, #0
   1974c:	moveq	r3, #0
   19750:	cmp	r3, #0
   19754:	beq	197a4 <__assert_fail@plt+0x8050>
   19758:	ldr	r7, [sp, #76]	; 0x4c
   1975c:	b	187f4 <__assert_fail@plt+0x70a0>
   19760:	ldr	r3, [sp, #168]	; 0xa8
   19764:	str	r3, [sp, #16]
   19768:	ldr	r3, [sp, #164]	; 0xa4
   1976c:	str	r3, [sp, #12]
   19770:	ldr	r3, [sp, #160]	; 0xa0
   19774:	str	r3, [sp, #8]
   19778:	ldr	r3, [sp, #156]	; 0x9c
   1977c:	str	r3, [sp, #4]
   19780:	mov	r3, #5
   19784:	str	r3, [sp]
   19788:	ldr	r3, [sp, #28]
   1978c:	ldr	r2, [sp, #52]	; 0x34
   19790:	ldr	r1, [sp, #76]	; 0x4c
   19794:	ldr	r0, [sp, #36]	; 0x24
   19798:	bl	18794 <__assert_fail@plt+0x7040>
   1979c:	mov	fp, r0
   197a0:	b	198a4 <__assert_fail@plt+0x8150>
   197a4:	mov	sl, r7
   197a8:	ldr	r3, [sp, #72]	; 0x48
   197ac:	cmp	r3, #0
   197b0:	moveq	r2, #0
   197b4:	andne	r2, r2, #1
   197b8:	cmp	r2, #0
   197bc:	beq	197ec <__assert_fail@plt+0x8098>
   197c0:	mov	r2, r3
   197c4:	ldrb	r3, [r3]
   197c8:	cmp	r3, #0
   197cc:	beq	197ec <__assert_fail@plt+0x8098>
   197d0:	ldr	r1, [sp, #36]	; 0x24
   197d4:	cmp	sl, fp
   197d8:	strbhi	r3, [r1, fp]
   197dc:	add	fp, fp, #1
   197e0:	ldrb	r3, [r2, #1]!
   197e4:	cmp	r3, #0
   197e8:	bne	197d4 <__assert_fail@plt+0x8080>
   197ec:	cmp	sl, fp
   197f0:	movhi	r3, #0
   197f4:	ldrhi	r2, [sp, #36]	; 0x24
   197f8:	strbhi	r3, [r2, fp]
   197fc:	b	198a4 <__assert_fail@plt+0x8150>
   19800:	mov	r8, sl
   19804:	mov	sl, r7
   19808:	ldr	r3, [sp, #32]
   1980c:	str	r3, [sp, #48]	; 0x30
   19810:	b	1984c <__assert_fail@plt+0x80f8>
   19814:	mov	r8, sl
   19818:	mov	sl, r7
   1981c:	b	1984c <__assert_fail@plt+0x80f8>
   19820:	mov	r8, sl
   19824:	mov	sl, r7
   19828:	b	1984c <__assert_fail@plt+0x80f8>
   1982c:	andeq	r1, r2, r4, lsr #15
   19830:			; <UNDEFINED> instruction: 0x000217b4
   19834:	andeq	r1, r2, r8, lsr #15
   19838:	mov	r8, sl
   1983c:	mov	sl, r7
   19840:	b	1984c <__assert_fail@plt+0x80f8>
   19844:	mov	r8, sl
   19848:	mov	sl, r7
   1984c:	ldr	r3, [sp, #48]	; 0x30
   19850:	cmp	r8, #2
   19854:	movne	r3, #0
   19858:	andeq	r3, r3, #1
   1985c:	cmp	r3, #0
   19860:	movne	r8, #4
   19864:	ldr	r3, [sp, #168]	; 0xa8
   19868:	str	r3, [sp, #16]
   1986c:	ldr	r3, [sp, #164]	; 0xa4
   19870:	str	r3, [sp, #12]
   19874:	mov	r3, #0
   19878:	str	r3, [sp, #8]
   1987c:	ldr	r3, [sp, #156]	; 0x9c
   19880:	bic	r3, r3, #2
   19884:	str	r3, [sp, #4]
   19888:	str	r8, [sp]
   1988c:	ldr	r3, [sp, #28]
   19890:	ldr	r2, [sp, #52]	; 0x34
   19894:	mov	r1, sl
   19898:	ldr	r0, [sp, #36]	; 0x24
   1989c:	bl	18794 <__assert_fail@plt+0x7040>
   198a0:	mov	fp, r0
   198a4:	mov	r0, fp
   198a8:	add	sp, sp, #116	; 0x74
   198ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198b0:	mov	r8, sl
   198b4:	mov	sl, r7
   198b8:	b	1984c <__assert_fail@plt+0x80f8>
   198bc:	mov	r8, sl
   198c0:	mov	sl, r7
   198c4:	b	1984c <__assert_fail@plt+0x80f8>
   198c8:	mov	r8, sl
   198cc:	mov	sl, r7
   198d0:	b	1984c <__assert_fail@plt+0x80f8>
   198d4:	mov	r8, sl
   198d8:	mov	sl, r7
   198dc:	b	19864 <__assert_fail@plt+0x8110>
   198e0:	mov	r3, #1
   198e4:	str	r3, [sp, #32]
   198e8:	str	r3, [sp, #48]	; 0x30
   198ec:	str	r3, [sp, #60]	; 0x3c
   198f0:	ldr	r3, [pc, #-196]	; 19834 <__assert_fail@plt+0x80e0>
   198f4:	str	r3, [sp, #72]	; 0x48
   198f8:	mov	fp, #0
   198fc:	mov	sl, #5
   19900:	b	18850 <__assert_fail@plt+0x70fc>
   19904:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19908:	sub	sp, sp, #52	; 0x34
   1990c:	mov	r5, r0
   19910:	str	r1, [sp, #24]
   19914:	str	r2, [sp, #28]
   19918:	mov	r4, r3
   1991c:	bl	115e0 <__errno_location@plt>
   19920:	str	r0, [sp, #32]
   19924:	ldr	r3, [r0]
   19928:	str	r3, [sp, #36]	; 0x24
   1992c:	ldr	r3, [pc, #396]	; 19ac0 <__assert_fail@plt+0x836c>
   19930:	ldr	r6, [r3]
   19934:	cmn	r5, #-2147483647	; 0x80000001
   19938:	movne	r3, #0
   1993c:	moveq	r3, #1
   19940:	orrs	r3, r3, r5, lsr #31
   19944:	bne	19a84 <__assert_fail@plt+0x8330>
   19948:	ldr	r3, [pc, #368]	; 19ac0 <__assert_fail@plt+0x836c>
   1994c:	ldr	r2, [r3, #4]
   19950:	cmp	r5, r2
   19954:	blt	199bc <__assert_fail@plt+0x8268>
   19958:	str	r2, [sp, #44]	; 0x2c
   1995c:	add	r3, r3, #8
   19960:	cmp	r6, r3
   19964:	beq	19a88 <__assert_fail@plt+0x8334>
   19968:	sub	r2, r5, r2
   1996c:	mov	r3, #8
   19970:	str	r3, [sp]
   19974:	mvn	r3, #-2147483648	; 0x80000000
   19978:	add	r2, r2, #1
   1997c:	add	r1, sp, #44	; 0x2c
   19980:	mov	r0, r6
   19984:	bl	1b0b0 <__assert_fail@plt+0x995c>
   19988:	mov	r6, r0
   1998c:	ldr	r3, [pc, #300]	; 19ac0 <__assert_fail@plt+0x836c>
   19990:	str	r0, [r3]
   19994:	ldr	r7, [pc, #292]	; 19ac0 <__assert_fail@plt+0x836c>
   19998:	ldr	r0, [r7, #4]
   1999c:	ldr	r2, [sp, #44]	; 0x2c
   199a0:	sub	r2, r2, r0
   199a4:	lsl	r2, r2, #3
   199a8:	mov	r1, #0
   199ac:	add	r0, r6, r0, lsl #3
   199b0:	bl	11610 <memset@plt>
   199b4:	ldr	r3, [sp, #44]	; 0x2c
   199b8:	str	r3, [r7, #4]
   199bc:	add	fp, r6, r5, lsl #3
   199c0:	ldr	r8, [r6, r5, lsl #3]
   199c4:	ldr	r7, [fp, #4]
   199c8:	ldr	r9, [r4, #4]
   199cc:	orr	r9, r9, #1
   199d0:	add	sl, r4, #8
   199d4:	ldr	r3, [r4, #44]	; 0x2c
   199d8:	str	r3, [sp, #16]
   199dc:	ldr	r3, [r4, #40]	; 0x28
   199e0:	str	r3, [sp, #12]
   199e4:	str	sl, [sp, #8]
   199e8:	str	r9, [sp, #4]
   199ec:	ldr	r3, [r4]
   199f0:	str	r3, [sp]
   199f4:	ldr	r3, [sp, #28]
   199f8:	ldr	r2, [sp, #24]
   199fc:	mov	r1, r8
   19a00:	mov	r0, r7
   19a04:	bl	18794 <__assert_fail@plt+0x7040>
   19a08:	cmp	r8, r0
   19a0c:	bhi	19a6c <__assert_fail@plt+0x8318>
   19a10:	add	r8, r0, #1
   19a14:	str	r8, [r6, r5, lsl #3]
   19a18:	ldr	r3, [pc, #164]	; 19ac4 <__assert_fail@plt+0x8370>
   19a1c:	cmp	r7, r3
   19a20:	beq	19a2c <__assert_fail@plt+0x82d8>
   19a24:	mov	r0, r7
   19a28:	bl	178e8 <__assert_fail@plt+0x6194>
   19a2c:	mov	r0, r8
   19a30:	bl	1af2c <__assert_fail@plt+0x97d8>
   19a34:	mov	r7, r0
   19a38:	str	r0, [fp, #4]
   19a3c:	ldr	r3, [r4, #44]	; 0x2c
   19a40:	str	r3, [sp, #16]
   19a44:	ldr	r3, [r4, #40]	; 0x28
   19a48:	str	r3, [sp, #12]
   19a4c:	str	sl, [sp, #8]
   19a50:	str	r9, [sp, #4]
   19a54:	ldr	r3, [r4]
   19a58:	str	r3, [sp]
   19a5c:	ldr	r3, [sp, #28]
   19a60:	ldr	r2, [sp, #24]
   19a64:	mov	r1, r8
   19a68:	bl	18794 <__assert_fail@plt+0x7040>
   19a6c:	ldr	r3, [sp, #32]
   19a70:	ldr	r2, [sp, #36]	; 0x24
   19a74:	str	r2, [r3]
   19a78:	mov	r0, r7
   19a7c:	add	sp, sp, #52	; 0x34
   19a80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a84:	bl	11748 <abort@plt>
   19a88:	sub	r2, r5, r2
   19a8c:	mov	r3, #8
   19a90:	str	r3, [sp]
   19a94:	mvn	r3, #-2147483648	; 0x80000000
   19a98:	add	r2, r2, #1
   19a9c:	add	r1, sp, #44	; 0x2c
   19aa0:	mov	r0, #0
   19aa4:	bl	1b0b0 <__assert_fail@plt+0x995c>
   19aa8:	mov	r6, r0
   19aac:	ldr	r3, [pc, #12]	; 19ac0 <__assert_fail@plt+0x836c>
   19ab0:	str	r0, [r3], #8
   19ab4:	ldm	r3, {r0, r1}
   19ab8:	stm	r6, {r0, r1}
   19abc:	b	19994 <__assert_fail@plt+0x8240>
   19ac0:	andeq	r2, r3, r4, lsl #3
   19ac4:	andeq	r2, r3, r4, lsl #4
   19ac8:	push	{r4, r5, r6, lr}
   19acc:	mov	r4, r0
   19ad0:	bl	115e0 <__errno_location@plt>
   19ad4:	mov	r5, r0
   19ad8:	ldr	r6, [r0]
   19adc:	cmp	r4, #0
   19ae0:	ldr	r3, [pc, #20]	; 19afc <__assert_fail@plt+0x83a8>
   19ae4:	moveq	r4, r3
   19ae8:	mov	r1, #48	; 0x30
   19aec:	mov	r0, r4
   19af0:	bl	1b418 <__assert_fail@plt+0x9cc4>
   19af4:	str	r6, [r5]
   19af8:	pop	{r4, r5, r6, pc}
   19afc:	andeq	r2, r3, r4, lsl #6
   19b00:	subs	r3, r0, #0
   19b04:	ldr	r2, [pc, #8]	; 19b14 <__assert_fail@plt+0x83c0>
   19b08:	moveq	r3, r2
   19b0c:	ldr	r0, [r3]
   19b10:	bx	lr
   19b14:	andeq	r2, r3, r4, lsl #6
   19b18:	subs	r3, r0, #0
   19b1c:	ldr	r2, [pc, #8]	; 19b2c <__assert_fail@plt+0x83d8>
   19b20:	moveq	r3, r2
   19b24:	str	r1, [r3]
   19b28:	bx	lr
   19b2c:	andeq	r2, r3, r4, lsl #6
   19b30:	push	{lr}		; (str lr, [sp, #-4]!)
   19b34:	subs	r3, r0, #0
   19b38:	ldr	r0, [pc, #44]	; 19b6c <__assert_fail@plt+0x8418>
   19b3c:	moveq	r3, r0
   19b40:	add	r3, r3, #8
   19b44:	lsr	lr, r1, #5
   19b48:	and	r1, r1, #31
   19b4c:	ldr	ip, [r3, lr, lsl #2]
   19b50:	lsr	r0, ip, r1
   19b54:	eor	r2, r2, r0
   19b58:	and	r2, r2, #1
   19b5c:	eor	r1, ip, r2, lsl r1
   19b60:	str	r1, [r3, lr, lsl #2]
   19b64:	and	r0, r0, #1
   19b68:	pop	{pc}		; (ldr pc, [sp], #4)
   19b6c:	andeq	r2, r3, r4, lsl #6
   19b70:	subs	r3, r0, #0
   19b74:	ldr	r2, [pc, #12]	; 19b88 <__assert_fail@plt+0x8434>
   19b78:	moveq	r3, r2
   19b7c:	ldr	r0, [r3, #4]
   19b80:	str	r1, [r3, #4]
   19b84:	bx	lr
   19b88:	andeq	r2, r3, r4, lsl #6
   19b8c:	subs	r3, r0, #0
   19b90:	ldr	r0, [pc, #40]	; 19bc0 <__assert_fail@plt+0x846c>
   19b94:	moveq	r3, r0
   19b98:	mov	r0, #10
   19b9c:	str	r0, [r3]
   19ba0:	cmp	r2, #0
   19ba4:	cmpne	r1, #0
   19ba8:	beq	19bb8 <__assert_fail@plt+0x8464>
   19bac:	str	r1, [r3, #40]	; 0x28
   19bb0:	str	r2, [r3, #44]	; 0x2c
   19bb4:	bx	lr
   19bb8:	push	{r4, lr}
   19bbc:	bl	11748 <abort@plt>
   19bc0:	andeq	r2, r3, r4, lsl #6
   19bc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19bc8:	sub	sp, sp, #24
   19bcc:	mov	r7, r0
   19bd0:	mov	r8, r1
   19bd4:	mov	r9, r2
   19bd8:	mov	sl, r3
   19bdc:	ldr	r4, [sp, #56]	; 0x38
   19be0:	cmp	r4, #0
   19be4:	ldr	r3, [pc, #84]	; 19c40 <__assert_fail@plt+0x84ec>
   19be8:	moveq	r4, r3
   19bec:	bl	115e0 <__errno_location@plt>
   19bf0:	mov	r5, r0
   19bf4:	ldr	r6, [r0]
   19bf8:	ldr	r3, [r4, #44]	; 0x2c
   19bfc:	str	r3, [sp, #16]
   19c00:	ldr	r3, [r4, #40]	; 0x28
   19c04:	str	r3, [sp, #12]
   19c08:	add	r3, r4, #8
   19c0c:	str	r3, [sp, #8]
   19c10:	ldr	r3, [r4, #4]
   19c14:	str	r3, [sp, #4]
   19c18:	ldr	r3, [r4]
   19c1c:	str	r3, [sp]
   19c20:	mov	r3, sl
   19c24:	mov	r2, r9
   19c28:	mov	r1, r8
   19c2c:	mov	r0, r7
   19c30:	bl	18794 <__assert_fail@plt+0x7040>
   19c34:	str	r6, [r5]
   19c38:	add	sp, sp, #24
   19c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c40:	andeq	r2, r3, r4, lsl #6
   19c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c48:	sub	sp, sp, #44	; 0x2c
   19c4c:	str	r0, [sp, #28]
   19c50:	str	r1, [sp, #32]
   19c54:	mov	r6, r2
   19c58:	subs	r4, r3, #0
   19c5c:	ldr	r3, [pc, #172]	; 19d10 <__assert_fail@plt+0x85bc>
   19c60:	moveq	r4, r3
   19c64:	bl	115e0 <__errno_location@plt>
   19c68:	mov	r7, r0
   19c6c:	ldr	fp, [r0]
   19c70:	ldr	r5, [r4, #4]
   19c74:	cmp	r6, #0
   19c78:	orreq	r5, r5, #1
   19c7c:	add	r9, r4, #8
   19c80:	ldr	r3, [r4, #44]	; 0x2c
   19c84:	str	r3, [sp, #16]
   19c88:	ldr	r3, [r4, #40]	; 0x28
   19c8c:	str	r3, [sp, #12]
   19c90:	str	r9, [sp, #8]
   19c94:	str	r5, [sp, #4]
   19c98:	ldr	r3, [r4]
   19c9c:	str	r3, [sp]
   19ca0:	ldr	r3, [sp, #32]
   19ca4:	ldr	r2, [sp, #28]
   19ca8:	mov	r1, #0
   19cac:	mov	r0, r1
   19cb0:	bl	18794 <__assert_fail@plt+0x7040>
   19cb4:	mov	sl, r0
   19cb8:	add	r8, r0, #1
   19cbc:	mov	r0, r8
   19cc0:	bl	1af2c <__assert_fail@plt+0x97d8>
   19cc4:	str	r0, [sp, #36]	; 0x24
   19cc8:	ldr	r3, [r4, #44]	; 0x2c
   19ccc:	str	r3, [sp, #16]
   19cd0:	ldr	r3, [r4, #40]	; 0x28
   19cd4:	str	r3, [sp, #12]
   19cd8:	str	r9, [sp, #8]
   19cdc:	str	r5, [sp, #4]
   19ce0:	ldr	r3, [r4]
   19ce4:	str	r3, [sp]
   19ce8:	ldr	r3, [sp, #32]
   19cec:	ldr	r2, [sp, #28]
   19cf0:	mov	r1, r8
   19cf4:	bl	18794 <__assert_fail@plt+0x7040>
   19cf8:	str	fp, [r7]
   19cfc:	cmp	r6, #0
   19d00:	strne	sl, [r6]
   19d04:	ldr	r0, [sp, #36]	; 0x24
   19d08:	add	sp, sp, #44	; 0x2c
   19d0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d10:	andeq	r2, r3, r4, lsl #6
   19d14:	push	{r4, lr}
   19d18:	mov	r3, r2
   19d1c:	mov	r2, #0
   19d20:	bl	19c44 <__assert_fail@plt+0x84f0>
   19d24:	pop	{r4, pc}
   19d28:	push	{r4, r5, r6, r7, r8, lr}
   19d2c:	ldr	r3, [pc, #140]	; 19dc0 <__assert_fail@plt+0x866c>
   19d30:	ldr	r7, [r3]
   19d34:	ldr	r3, [r3, #4]
   19d38:	cmp	r3, #1
   19d3c:	ble	19d68 <__assert_fail@plt+0x8614>
   19d40:	mov	r5, r7
   19d44:	mov	r4, #1
   19d48:	ldr	r6, [pc, #112]	; 19dc0 <__assert_fail@plt+0x866c>
   19d4c:	ldr	r0, [r5, #12]
   19d50:	bl	178e8 <__assert_fail@plt+0x6194>
   19d54:	add	r4, r4, #1
   19d58:	add	r5, r5, #8
   19d5c:	ldr	r3, [r6, #4]
   19d60:	cmp	r3, r4
   19d64:	bgt	19d4c <__assert_fail@plt+0x85f8>
   19d68:	ldr	r0, [r7, #4]
   19d6c:	ldr	r3, [pc, #80]	; 19dc4 <__assert_fail@plt+0x8670>
   19d70:	cmp	r0, r3
   19d74:	beq	19d90 <__assert_fail@plt+0x863c>
   19d78:	bl	178e8 <__assert_fail@plt+0x6194>
   19d7c:	ldr	r3, [pc, #60]	; 19dc0 <__assert_fail@plt+0x866c>
   19d80:	mov	r2, #256	; 0x100
   19d84:	str	r2, [r3, #8]
   19d88:	ldr	r2, [pc, #52]	; 19dc4 <__assert_fail@plt+0x8670>
   19d8c:	str	r2, [r3, #12]
   19d90:	ldr	r3, [pc, #48]	; 19dc8 <__assert_fail@plt+0x8674>
   19d94:	cmp	r7, r3
   19d98:	beq	19db0 <__assert_fail@plt+0x865c>
   19d9c:	mov	r0, r7
   19da0:	bl	178e8 <__assert_fail@plt+0x6194>
   19da4:	ldr	r3, [pc, #20]	; 19dc0 <__assert_fail@plt+0x866c>
   19da8:	add	r2, r3, #8
   19dac:	str	r2, [r3]
   19db0:	mov	r2, #1
   19db4:	ldr	r3, [pc, #4]	; 19dc0 <__assert_fail@plt+0x866c>
   19db8:	str	r2, [r3, #4]
   19dbc:	pop	{r4, r5, r6, r7, r8, pc}
   19dc0:	andeq	r2, r3, r4, lsl #3
   19dc4:	andeq	r2, r3, r4, lsl #4
   19dc8:	andeq	r2, r3, ip, lsl #3
   19dcc:	push	{r4, lr}
   19dd0:	ldr	r3, [pc, #8]	; 19de0 <__assert_fail@plt+0x868c>
   19dd4:	mvn	r2, #0
   19dd8:	bl	19904 <__assert_fail@plt+0x81b0>
   19ddc:	pop	{r4, pc}
   19de0:	andeq	r2, r3, r4, lsl #6
   19de4:	push	{r4, lr}
   19de8:	ldr	r3, [pc, #4]	; 19df4 <__assert_fail@plt+0x86a0>
   19dec:	bl	19904 <__assert_fail@plt+0x81b0>
   19df0:	pop	{r4, pc}
   19df4:	andeq	r2, r3, r4, lsl #6
   19df8:	push	{r4, lr}
   19dfc:	mov	r1, r0
   19e00:	mov	r0, #0
   19e04:	bl	19dcc <__assert_fail@plt+0x8678>
   19e08:	pop	{r4, pc}
   19e0c:	push	{r4, lr}
   19e10:	mov	r2, r1
   19e14:	mov	r1, r0
   19e18:	mov	r0, #0
   19e1c:	bl	19de4 <__assert_fail@plt+0x8690>
   19e20:	pop	{r4, pc}
   19e24:	push	{r4, r5, lr}
   19e28:	sub	sp, sp, #52	; 0x34
   19e2c:	mov	r4, r0
   19e30:	mov	r5, r2
   19e34:	mov	r0, sp
   19e38:	bl	1862c <__assert_fail@plt+0x6ed8>
   19e3c:	mov	r3, sp
   19e40:	mvn	r2, #0
   19e44:	mov	r1, r5
   19e48:	mov	r0, r4
   19e4c:	bl	19904 <__assert_fail@plt+0x81b0>
   19e50:	add	sp, sp, #52	; 0x34
   19e54:	pop	{r4, r5, pc}
   19e58:	push	{r4, r5, r6, lr}
   19e5c:	sub	sp, sp, #48	; 0x30
   19e60:	mov	r4, r0
   19e64:	mov	r5, r2
   19e68:	mov	r6, r3
   19e6c:	mov	r0, sp
   19e70:	bl	1862c <__assert_fail@plt+0x6ed8>
   19e74:	mov	r3, sp
   19e78:	mov	r2, r6
   19e7c:	mov	r1, r5
   19e80:	mov	r0, r4
   19e84:	bl	19904 <__assert_fail@plt+0x81b0>
   19e88:	add	sp, sp, #48	; 0x30
   19e8c:	pop	{r4, r5, r6, pc}
   19e90:	push	{r4, lr}
   19e94:	mov	r2, r1
   19e98:	mov	r1, r0
   19e9c:	mov	r0, #0
   19ea0:	bl	19e24 <__assert_fail@plt+0x86d0>
   19ea4:	pop	{r4, pc}
   19ea8:	push	{r4, lr}
   19eac:	mov	r3, r2
   19eb0:	mov	r2, r1
   19eb4:	mov	r1, r0
   19eb8:	mov	r0, #0
   19ebc:	bl	19e58 <__assert_fail@plt+0x8704>
   19ec0:	pop	{r4, pc}
   19ec4:	push	{r4, r5, r6, lr}
   19ec8:	sub	sp, sp, #48	; 0x30
   19ecc:	mov	r4, r0
   19ed0:	mov	r5, r1
   19ed4:	mov	r6, r2
   19ed8:	mov	ip, sp
   19edc:	ldr	lr, [pc, #64]	; 19f24 <__assert_fail@plt+0x87d0>
   19ee0:	ldm	lr!, {r0, r1, r2, r3}
   19ee4:	stmia	ip!, {r0, r1, r2, r3}
   19ee8:	ldm	lr!, {r0, r1, r2, r3}
   19eec:	stmia	ip!, {r0, r1, r2, r3}
   19ef0:	ldm	lr, {r0, r1, r2, r3}
   19ef4:	stm	ip, {r0, r1, r2, r3}
   19ef8:	mov	r2, #1
   19efc:	mov	r1, r6
   19f00:	mov	r0, sp
   19f04:	bl	19b30 <__assert_fail@plt+0x83dc>
   19f08:	mov	r3, sp
   19f0c:	mov	r2, r5
   19f10:	mov	r1, r4
   19f14:	mov	r0, #0
   19f18:	bl	19904 <__assert_fail@plt+0x81b0>
   19f1c:	add	sp, sp, #48	; 0x30
   19f20:	pop	{r4, r5, r6, pc}
   19f24:	andeq	r2, r3, r4, lsl #6
   19f28:	push	{r4, lr}
   19f2c:	mov	r2, r1
   19f30:	mvn	r1, #0
   19f34:	bl	19ec4 <__assert_fail@plt+0x8770>
   19f38:	pop	{r4, pc}
   19f3c:	push	{r4, lr}
   19f40:	mov	r1, #58	; 0x3a
   19f44:	bl	19f28 <__assert_fail@plt+0x87d4>
   19f48:	pop	{r4, pc}
   19f4c:	push	{r4, lr}
   19f50:	mov	r2, #58	; 0x3a
   19f54:	bl	19ec4 <__assert_fail@plt+0x8770>
   19f58:	pop	{r4, pc}
   19f5c:	push	{r4, r5, lr}
   19f60:	sub	sp, sp, #100	; 0x64
   19f64:	mov	r4, r0
   19f68:	mov	r5, r2
   19f6c:	mov	r0, sp
   19f70:	bl	1862c <__assert_fail@plt+0x6ed8>
   19f74:	add	lr, sp, #48	; 0x30
   19f78:	mov	ip, sp
   19f7c:	ldm	ip!, {r0, r1, r2, r3}
   19f80:	stmia	lr!, {r0, r1, r2, r3}
   19f84:	ldm	ip!, {r0, r1, r2, r3}
   19f88:	stmia	lr!, {r0, r1, r2, r3}
   19f8c:	ldm	ip, {r0, r1, r2, r3}
   19f90:	stm	lr, {r0, r1, r2, r3}
   19f94:	mov	r2, #1
   19f98:	mov	r1, #58	; 0x3a
   19f9c:	add	r0, sp, #48	; 0x30
   19fa0:	bl	19b30 <__assert_fail@plt+0x83dc>
   19fa4:	add	r3, sp, #48	; 0x30
   19fa8:	mvn	r2, #0
   19fac:	mov	r1, r5
   19fb0:	mov	r0, r4
   19fb4:	bl	19904 <__assert_fail@plt+0x81b0>
   19fb8:	add	sp, sp, #100	; 0x64
   19fbc:	pop	{r4, r5, pc}
   19fc0:	push	{r4, r5, r6, r7, lr}
   19fc4:	sub	sp, sp, #52	; 0x34
   19fc8:	mov	r4, r0
   19fcc:	mov	r6, r1
   19fd0:	mov	r7, r2
   19fd4:	mov	r5, r3
   19fd8:	mov	ip, sp
   19fdc:	ldr	lr, [pc, #64]	; 1a024 <__assert_fail@plt+0x88d0>
   19fe0:	ldm	lr!, {r0, r1, r2, r3}
   19fe4:	stmia	ip!, {r0, r1, r2, r3}
   19fe8:	ldm	lr!, {r0, r1, r2, r3}
   19fec:	stmia	ip!, {r0, r1, r2, r3}
   19ff0:	ldm	lr, {r0, r1, r2, r3}
   19ff4:	stm	ip, {r0, r1, r2, r3}
   19ff8:	mov	r2, r7
   19ffc:	mov	r1, r6
   1a000:	mov	r0, sp
   1a004:	bl	19b8c <__assert_fail@plt+0x8438>
   1a008:	mov	r3, sp
   1a00c:	ldr	r2, [sp, #72]	; 0x48
   1a010:	mov	r1, r5
   1a014:	mov	r0, r4
   1a018:	bl	19904 <__assert_fail@plt+0x81b0>
   1a01c:	add	sp, sp, #52	; 0x34
   1a020:	pop	{r4, r5, r6, r7, pc}
   1a024:	andeq	r2, r3, r4, lsl #6
   1a028:	push	{lr}		; (str lr, [sp, #-4]!)
   1a02c:	sub	sp, sp, #12
   1a030:	mvn	ip, #0
   1a034:	str	ip, [sp]
   1a038:	bl	19fc0 <__assert_fail@plt+0x886c>
   1a03c:	add	sp, sp, #12
   1a040:	pop	{pc}		; (ldr pc, [sp], #4)
   1a044:	push	{r4, lr}
   1a048:	mov	r3, r2
   1a04c:	mov	r2, r1
   1a050:	mov	r1, r0
   1a054:	mov	r0, #0
   1a058:	bl	1a028 <__assert_fail@plt+0x88d4>
   1a05c:	pop	{r4, pc}
   1a060:	push	{lr}		; (str lr, [sp, #-4]!)
   1a064:	sub	sp, sp, #12
   1a068:	str	r3, [sp]
   1a06c:	mov	r3, r2
   1a070:	mov	r2, r1
   1a074:	mov	r1, r0
   1a078:	mov	r0, #0
   1a07c:	bl	19fc0 <__assert_fail@plt+0x886c>
   1a080:	add	sp, sp, #12
   1a084:	pop	{pc}		; (ldr pc, [sp], #4)
   1a088:	push	{r4, lr}
   1a08c:	ldr	r3, [pc, #4]	; 1a098 <__assert_fail@plt+0x8944>
   1a090:	bl	19904 <__assert_fail@plt+0x81b0>
   1a094:	pop	{r4, pc}
   1a098:	muleq	r3, r4, r1
   1a09c:	push	{r4, lr}
   1a0a0:	mov	r2, r1
   1a0a4:	mov	r1, r0
   1a0a8:	mov	r0, #0
   1a0ac:	bl	1a088 <__assert_fail@plt+0x8934>
   1a0b0:	pop	{r4, pc}
   1a0b4:	push	{r4, lr}
   1a0b8:	mvn	r2, #0
   1a0bc:	bl	1a088 <__assert_fail@plt+0x8934>
   1a0c0:	pop	{r4, pc}
   1a0c4:	push	{r4, lr}
   1a0c8:	mov	r1, r0
   1a0cc:	mov	r0, #0
   1a0d0:	bl	1a0b4 <__assert_fail@plt+0x8960>
   1a0d4:	pop	{r4, pc}
   1a0d8:	mov	r3, #0
   1a0dc:	str	r3, [r0]
   1a0e0:	str	r3, [r0, #4]
   1a0e4:	bx	lr
   1a0e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0ec:	sub	sp, sp, #52	; 0x34
   1a0f0:	mov	r5, r0
   1a0f4:	mov	r4, r1
   1a0f8:	mov	r6, r2
   1a0fc:	mov	r9, r3
   1a100:	mov	r2, #32
   1a104:	mov	r1, #0
   1a108:	add	r0, sp, #16
   1a10c:	bl	11610 <memset@plt>
   1a110:	cmp	r6, #0
   1a114:	beq	1a148 <__assert_fail@plt+0x89f4>
   1a118:	mov	ip, r4
   1a11c:	add	r2, r4, r6
   1a120:	add	r4, sp, #16
   1a124:	mov	r1, #1
   1a128:	ldrb	r3, [ip], #1
   1a12c:	lsr	lr, r3, #5
   1a130:	and	r3, r3, #31
   1a134:	ldr	r0, [r4, lr, lsl #2]
   1a138:	orr	r3, r0, r1, lsl r3
   1a13c:	str	r3, [r4, lr, lsl #2]
   1a140:	cmp	ip, r2
   1a144:	bne	1a128 <__assert_fail@plt+0x89d4>
   1a148:	ldr	r3, [r5, #4]
   1a14c:	ldr	r2, [r5, #8]
   1a150:	cmp	r3, r2
   1a154:	bcs	1a188 <__assert_fail@plt+0x8a34>
   1a158:	add	r2, r3, #1
   1a15c:	str	r2, [r5, #4]
   1a160:	ldrb	r4, [r3]
   1a164:	lsr	r2, r4, #5
   1a168:	add	r3, sp, #48	; 0x30
   1a16c:	add	r2, r3, r2, lsl #2
   1a170:	and	r3, r4, #31
   1a174:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1a178:	lsr	r3, r2, r3
   1a17c:	tst	r3, #1
   1a180:	bne	1a1e8 <__assert_fail@plt+0x8a94>
   1a184:	b	1a198 <__assert_fail@plt+0x8a44>
   1a188:	mov	r0, r5
   1a18c:	bl	116ac <__uflow@plt>
   1a190:	subs	r4, r0, #0
   1a194:	bge	1a164 <__assert_fail@plt+0x8a10>
   1a198:	ldr	r7, [r9, #4]
   1a19c:	ldr	r3, [r9]
   1a1a0:	add	r8, sp, #48	; 0x30
   1a1a4:	str	r3, [r8, #-36]!	; 0xffffffdc
   1a1a8:	mov	r6, #0
   1a1ac:	mov	sl, #1
   1a1b0:	mvn	fp, #0
   1a1b4:	b	1a264 <__assert_fail@plt+0x8b10>
   1a1b8:	mov	r0, r5
   1a1bc:	bl	116ac <__uflow@plt>
   1a1c0:	subs	r4, r0, #0
   1a1c4:	blt	1a198 <__assert_fail@plt+0x8a44>
   1a1c8:	lsr	r2, r4, #5
   1a1cc:	add	r3, sp, #48	; 0x30
   1a1d0:	add	r2, r3, r2, lsl #2
   1a1d4:	and	r3, r4, #31
   1a1d8:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1a1dc:	lsr	r3, r2, r3
   1a1e0:	tst	r3, #1
   1a1e4:	beq	1a198 <__assert_fail@plt+0x8a44>
   1a1e8:	ldr	r3, [r5, #4]
   1a1ec:	ldr	r2, [r5, #8]
   1a1f0:	cmp	r3, r2
   1a1f4:	bcs	1a1b8 <__assert_fail@plt+0x8a64>
   1a1f8:	add	r2, r3, #1
   1a1fc:	str	r2, [r5, #4]
   1a200:	ldrb	r4, [r3]
   1a204:	b	1a1c8 <__assert_fail@plt+0x8a74>
   1a208:	str	sl, [sp]
   1a20c:	mov	r3, fp
   1a210:	mov	r2, sl
   1a214:	mov	r1, r8
   1a218:	mov	r0, r7
   1a21c:	bl	1b0b0 <__assert_fail@plt+0x995c>
   1a220:	mov	r7, r0
   1a224:	b	1a280 <__assert_fail@plt+0x8b2c>
   1a228:	mov	r3, #0
   1a22c:	strb	r3, [r7, r6]
   1a230:	str	r7, [r9, #4]
   1a234:	ldr	r3, [sp, #12]
   1a238:	str	r3, [r9]
   1a23c:	mov	r0, r6
   1a240:	add	sp, sp, #52	; 0x34
   1a244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a248:	mov	r3, #0
   1a24c:	strb	r3, [r7, r6]
   1a250:	b	1a230 <__assert_fail@plt+0x8adc>
   1a254:	mov	r0, r5
   1a258:	bl	116ac <__uflow@plt>
   1a25c:	mov	r4, r0
   1a260:	add	r6, r6, #1
   1a264:	clz	r3, r6
   1a268:	lsr	r3, r3, #5
   1a26c:	ands	r3, r3, r4, lsr #31
   1a270:	bne	1a2cc <__assert_fail@plt+0x8b78>
   1a274:	ldr	r3, [sp, #12]
   1a278:	cmp	r6, r3
   1a27c:	beq	1a208 <__assert_fail@plt+0x8ab4>
   1a280:	cmp	r4, #0
   1a284:	blt	1a228 <__assert_fail@plt+0x8ad4>
   1a288:	lsr	r2, r4, #5
   1a28c:	add	r3, sp, #48	; 0x30
   1a290:	add	r2, r3, r2, lsl #2
   1a294:	and	r3, r4, #31
   1a298:	ldr	r2, [r2, #-32]	; 0xffffffe0
   1a29c:	lsr	r3, r2, r3
   1a2a0:	tst	r3, #1
   1a2a4:	bne	1a248 <__assert_fail@plt+0x8af4>
   1a2a8:	strb	r4, [r7, r6]
   1a2ac:	ldr	r3, [r5, #4]
   1a2b0:	ldr	r2, [r5, #8]
   1a2b4:	cmp	r3, r2
   1a2b8:	bcs	1a254 <__assert_fail@plt+0x8b00>
   1a2bc:	add	r2, r3, #1
   1a2c0:	str	r2, [r5, #4]
   1a2c4:	ldrb	r4, [r3]
   1a2c8:	b	1a260 <__assert_fail@plt+0x8b0c>
   1a2cc:	mvn	r0, #0
   1a2d0:	b	1a240 <__assert_fail@plt+0x8aec>
   1a2d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a2d8:	sub	sp, sp, #36	; 0x24
   1a2dc:	mov	sl, r0
   1a2e0:	str	r2, [sp, #8]
   1a2e4:	str	r3, [sp, #12]
   1a2e8:	cmp	r1, #0
   1a2ec:	addne	r0, r1, #1
   1a2f0:	moveq	r0, #64	; 0x40
   1a2f4:	str	r0, [sp, #20]
   1a2f8:	mov	r1, #4
   1a2fc:	bl	1affc <__assert_fail@plt+0x98a8>
   1a300:	mov	r7, r0
   1a304:	mov	r1, #4
   1a308:	ldr	r0, [sp, #20]
   1a30c:	bl	1affc <__assert_fail@plt+0x98a8>
   1a310:	mov	r8, r0
   1a314:	mov	r4, #0
   1a318:	str	r4, [sp, #24]
   1a31c:	str	r4, [sp, #28]
   1a320:	mov	fp, #4
   1a324:	mov	r9, #1
   1a328:	b	1a35c <__assert_fail@plt+0x8c08>
   1a32c:	cmn	r5, #1
   1a330:	beq	1a3b4 <__assert_fail@plt+0x8c60>
   1a334:	add	r6, r5, #1
   1a338:	mov	r1, r9
   1a33c:	mov	r0, r6
   1a340:	bl	1affc <__assert_fail@plt+0x98a8>
   1a344:	str	r5, [r8, r4, lsl #2]
   1a348:	mov	r2, r6
   1a34c:	ldr	r1, [sp, #28]
   1a350:	bl	113f4 <memcpy@plt>
   1a354:	str	r0, [r7, r4, lsl #2]
   1a358:	add	r4, r4, #1
   1a35c:	add	r3, sp, #24
   1a360:	ldr	r2, [sp, #12]
   1a364:	ldr	r1, [sp, #8]
   1a368:	mov	r0, sl
   1a36c:	bl	1a0e8 <__assert_fail@plt+0x8994>
   1a370:	mov	r5, r0
   1a374:	ldr	r3, [sp, #20]
   1a378:	cmp	r4, r3
   1a37c:	blt	1a32c <__assert_fail@plt+0x8bd8>
   1a380:	str	fp, [sp]
   1a384:	mvn	r3, #0
   1a388:	mov	r2, r9
   1a38c:	add	r1, sp, #20
   1a390:	mov	r0, r7
   1a394:	bl	1b0b0 <__assert_fail@plt+0x995c>
   1a398:	mov	r7, r0
   1a39c:	mov	r2, fp
   1a3a0:	ldr	r1, [sp, #20]
   1a3a4:	mov	r0, r8
   1a3a8:	bl	1af88 <__assert_fail@plt+0x9834>
   1a3ac:	mov	r8, r0
   1a3b0:	b	1a32c <__assert_fail@plt+0x8bd8>
   1a3b4:	mov	r5, r4
   1a3b8:	mov	r3, #0
   1a3bc:	str	r3, [r7, r4, lsl #2]
   1a3c0:	str	r3, [r8, r4, lsl #2]
   1a3c4:	ldr	r0, [sp, #28]
   1a3c8:	bl	178e8 <__assert_fail@plt+0x6194>
   1a3cc:	ldr	r3, [sp, #72]	; 0x48
   1a3d0:	str	r7, [r3]
   1a3d4:	ldr	r3, [sp, #76]	; 0x4c
   1a3d8:	cmp	r3, #0
   1a3dc:	ldrne	r3, [sp, #76]	; 0x4c
   1a3e0:	strne	r8, [r3]
   1a3e4:	beq	1a3f4 <__assert_fail@plt+0x8ca0>
   1a3e8:	mov	r0, r5
   1a3ec:	add	sp, sp, #36	; 0x24
   1a3f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3f4:	mov	r0, r8
   1a3f8:	bl	178e8 <__assert_fail@plt+0x6194>
   1a3fc:	b	1a3e8 <__assert_fail@plt+0x8c94>
   1a400:	push	{r4, r5, r6, r7, r8, lr}
   1a404:	mov	r8, r0
   1a408:	mov	r7, r1
   1a40c:	mov	r4, r2
   1a410:	ldr	r5, [pc, #88]	; 1a470 <__assert_fail@plt+0x8d1c>
   1a414:	b	1a41c <__assert_fail@plt+0x8cc8>
   1a418:	mov	r4, r5
   1a41c:	mov	r2, r4
   1a420:	mov	r1, r7
   1a424:	mov	r0, r8
   1a428:	bl	11634 <write@plt>
   1a42c:	subs	r6, r0, #0
   1a430:	bge	1a468 <__assert_fail@plt+0x8d14>
   1a434:	bl	115e0 <__errno_location@plt>
   1a438:	ldr	r3, [r0]
   1a43c:	cmp	r3, #4
   1a440:	beq	1a41c <__assert_fail@plt+0x8cc8>
   1a444:	cmp	r4, r5
   1a448:	movls	r4, #0
   1a44c:	movhi	r4, #1
   1a450:	cmp	r3, #22
   1a454:	movne	r4, #0
   1a458:	cmp	r4, #0
   1a45c:	bne	1a418 <__assert_fail@plt+0x8cc4>
   1a460:	mov	r0, r6
   1a464:	pop	{r4, r5, r6, r7, r8, pc}
   1a468:	mov	r0, r6
   1a46c:	pop	{r4, r5, r6, r7, r8, pc}
   1a470:	svcvc	0x00f00000	; IMB
   1a474:	push	{r4, r5, r6, lr}
   1a478:	mov	r5, r0
   1a47c:	mov	r4, r1
   1a480:	mov	r2, r1
   1a484:	mov	r1, #0
   1a488:	bl	11658 <memchr@plt>
   1a48c:	cmp	r0, #0
   1a490:	subne	r0, r0, r5
   1a494:	addne	r0, r0, #1
   1a498:	moveq	r0, r4
   1a49c:	pop	{r4, r5, r6, pc}
   1a4a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4a4:	sub	sp, sp, #68	; 0x44
   1a4a8:	mov	r6, r1
   1a4ac:	bl	11448 <strdup@plt>
   1a4b0:	subs	r9, r0, #0
   1a4b4:	beq	1a518 <__assert_fail@plt+0x8dc4>
   1a4b8:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1a4bc:	cmp	r0, #1
   1a4c0:	bls	1a8c0 <__assert_fail@plt+0x916c>
   1a4c4:	cmp	r6, #0
   1a4c8:	bne	1a51c <__assert_fail@plt+0x8dc8>
   1a4cc:	str	r9, [sp, #24]
   1a4d0:	mov	r0, r9
   1a4d4:	bl	115b0 <strlen@plt>
   1a4d8:	add	r6, r9, r0
   1a4dc:	str	r6, [sp, #4]
   1a4e0:	mov	r3, #0
   1a4e4:	strb	r3, [sp, #8]
   1a4e8:	str	r3, [sp, #12]
   1a4ec:	str	r3, [sp, #16]
   1a4f0:	strb	r3, [sp, #20]
   1a4f4:	cmp	r9, r6
   1a4f8:	bcs	1a8b4 <__assert_fail@plt+0x9160>
   1a4fc:	mov	r4, r9
   1a500:	mov	fp, #0
   1a504:	mov	r5, fp
   1a508:	mov	r7, #1
   1a50c:	mov	r8, fp
   1a510:	ldr	sl, [pc, #1104]	; 1a968 <__assert_fail@plt+0x9214>
   1a514:	b	1a724 <__assert_fail@plt+0x8fd0>
   1a518:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1a51c:	str	r9, [sp, #24]
   1a520:	mov	r0, r9
   1a524:	bl	115b0 <strlen@plt>
   1a528:	add	sl, r9, r0
   1a52c:	str	sl, [sp, #4]
   1a530:	mov	r3, #0
   1a534:	strb	r3, [sp, #8]
   1a538:	str	r3, [sp, #12]
   1a53c:	str	r3, [sp, #16]
   1a540:	strb	r3, [sp, #20]
   1a544:	cmp	r9, sl
   1a548:	bcs	1a6bc <__assert_fail@plt+0x8f68>
   1a54c:	mov	r4, r9
   1a550:	mov	r5, #1
   1a554:	mov	r7, #0
   1a558:	ldr	r8, [pc, #1032]	; 1a968 <__assert_fail@plt+0x9214>
   1a55c:	b	1a620 <__assert_fail@plt+0x8ecc>
   1a560:	add	r0, sp, #12
   1a564:	bl	1140c <mbsinit@plt>
   1a568:	cmp	r0, #0
   1a56c:	beq	1a668 <__assert_fail@plt+0x8f14>
   1a570:	strb	r5, [sp, #8]
   1a574:	add	r3, sp, #12
   1a578:	sub	r2, sl, r4
   1a57c:	mov	r1, r4
   1a580:	add	r0, sp, #36	; 0x24
   1a584:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1a588:	str	r0, [sp, #28]
   1a58c:	cmn	r0, #1
   1a590:	streq	r5, [sp, #28]
   1a594:	strbeq	r7, [sp, #32]
   1a598:	beq	1a5e0 <__assert_fail@plt+0x8e8c>
   1a59c:	cmn	r0, #2
   1a5a0:	beq	1a67c <__assert_fail@plt+0x8f28>
   1a5a4:	cmp	r0, #0
   1a5a8:	bne	1a5cc <__assert_fail@plt+0x8e78>
   1a5ac:	str	r5, [sp, #28]
   1a5b0:	ldr	r3, [sp, #24]
   1a5b4:	ldrb	r3, [r3]
   1a5b8:	cmp	r3, #0
   1a5bc:	bne	1a694 <__assert_fail@plt+0x8f40>
   1a5c0:	ldr	r3, [sp, #36]	; 0x24
   1a5c4:	cmp	r3, #0
   1a5c8:	bne	1a6a8 <__assert_fail@plt+0x8f54>
   1a5cc:	strb	r5, [sp, #32]
   1a5d0:	add	r0, sp, #12
   1a5d4:	bl	1140c <mbsinit@plt>
   1a5d8:	cmp	r0, #0
   1a5dc:	strbne	r7, [sp, #8]
   1a5e0:	strb	r5, [sp, #20]
   1a5e4:	ldrb	r3, [sp, #32]
   1a5e8:	cmp	r3, #0
   1a5ec:	beq	1a6bc <__assert_fail@plt+0x8f68>
   1a5f0:	ldr	r0, [sp, #36]	; 0x24
   1a5f4:	bl	115a4 <iswspace@plt>
   1a5f8:	cmp	r0, #0
   1a5fc:	beq	1a6bc <__assert_fail@plt+0x8f68>
   1a600:	ldr	r3, [sp, #28]
   1a604:	ldr	r4, [sp, #24]
   1a608:	add	r4, r4, r3
   1a60c:	str	r4, [sp, #24]
   1a610:	strb	r7, [sp, #20]
   1a614:	ldr	sl, [sp, #4]
   1a618:	cmp	sl, r4
   1a61c:	bls	1a6bc <__assert_fail@plt+0x8f68>
   1a620:	ldrb	r3, [sp, #20]
   1a624:	cmp	r3, #0
   1a628:	bne	1a5e4 <__assert_fail@plt+0x8e90>
   1a62c:	ldrb	r3, [sp, #8]
   1a630:	cmp	r3, #0
   1a634:	bne	1a574 <__assert_fail@plt+0x8e20>
   1a638:	ldrb	r3, [r4]
   1a63c:	lsr	r2, r3, #5
   1a640:	and	r3, r3, #31
   1a644:	ldr	r2, [r8, r2, lsl #2]
   1a648:	lsr	r3, r2, r3
   1a64c:	tst	r3, #1
   1a650:	beq	1a560 <__assert_fail@plt+0x8e0c>
   1a654:	str	r5, [sp, #28]
   1a658:	ldrb	r3, [r4]
   1a65c:	str	r3, [sp, #36]	; 0x24
   1a660:	strb	r5, [sp, #32]
   1a664:	b	1a5e0 <__assert_fail@plt+0x8e8c>
   1a668:	ldr	r3, [pc, #764]	; 1a96c <__assert_fail@plt+0x9218>
   1a66c:	mov	r2, #135	; 0x87
   1a670:	ldr	r1, [pc, #760]	; 1a970 <__assert_fail@plt+0x921c>
   1a674:	ldr	r0, [pc, #760]	; 1a974 <__assert_fail@plt+0x9220>
   1a678:	bl	11754 <__assert_fail@plt>
   1a67c:	ldr	r2, [sp, #24]
   1a680:	ldr	r3, [sp, #4]
   1a684:	sub	r3, r3, r2
   1a688:	str	r3, [sp, #28]
   1a68c:	strb	r7, [sp, #32]
   1a690:	b	1a5e0 <__assert_fail@plt+0x8e8c>
   1a694:	ldr	r3, [pc, #720]	; 1a96c <__assert_fail@plt+0x9218>
   1a698:	mov	r2, #162	; 0xa2
   1a69c:	ldr	r1, [pc, #716]	; 1a970 <__assert_fail@plt+0x921c>
   1a6a0:	ldr	r0, [pc, #720]	; 1a978 <__assert_fail@plt+0x9224>
   1a6a4:	bl	11754 <__assert_fail@plt>
   1a6a8:	ldr	r3, [pc, #700]	; 1a96c <__assert_fail@plt+0x9218>
   1a6ac:	mov	r2, #163	; 0xa3
   1a6b0:	ldr	r1, [pc, #696]	; 1a970 <__assert_fail@plt+0x921c>
   1a6b4:	ldr	r0, [pc, #704]	; 1a97c <__assert_fail@plt+0x9228>
   1a6b8:	bl	11754 <__assert_fail@plt>
   1a6bc:	ldr	r4, [sp, #24]
   1a6c0:	mov	r0, r4
   1a6c4:	bl	115b0 <strlen@plt>
   1a6c8:	add	r2, r0, #1
   1a6cc:	mov	r1, r4
   1a6d0:	mov	r0, r9
   1a6d4:	bl	113c4 <memmove@plt>
   1a6d8:	cmp	r6, #1
   1a6dc:	beq	1a8b4 <__assert_fail@plt+0x9160>
   1a6e0:	b	1a4cc <__assert_fail@plt+0x8d78>
   1a6e4:	ldrb	r3, [sp, #32]
   1a6e8:	cmp	r3, #0
   1a6ec:	moveq	r5, #1
   1a6f0:	beq	1a704 <__assert_fail@plt+0x8fb0>
   1a6f4:	ldr	r0, [sp, #36]	; 0x24
   1a6f8:	bl	115a4 <iswspace@plt>
   1a6fc:	clz	r5, r0
   1a700:	lsr	r5, r5, #5
   1a704:	ldr	r3, [sp, #28]
   1a708:	ldr	r4, [sp, #24]
   1a70c:	add	r4, r4, r3
   1a710:	str	r4, [sp, #24]
   1a714:	strb	r8, [sp, #20]
   1a718:	ldr	r6, [sp, #4]
   1a71c:	cmp	r6, r4
   1a720:	bls	1a8a8 <__assert_fail@plt+0x9154>
   1a724:	ldrb	r3, [sp, #20]
   1a728:	cmp	r3, #0
   1a72c:	bne	1a76c <__assert_fail@plt+0x9018>
   1a730:	ldrb	r3, [sp, #8]
   1a734:	cmp	r3, #0
   1a738:	bne	1a7e4 <__assert_fail@plt+0x9090>
   1a73c:	ldrb	r3, [r4]
   1a740:	lsr	r2, r3, #5
   1a744:	and	r3, r3, #31
   1a748:	ldr	r2, [sl, r2, lsl #2]
   1a74c:	lsr	r3, r2, r3
   1a750:	tst	r3, #1
   1a754:	beq	1a7d0 <__assert_fail@plt+0x907c>
   1a758:	str	r7, [sp, #28]
   1a75c:	ldrb	r3, [r4]
   1a760:	str	r3, [sp, #36]	; 0x24
   1a764:	strb	r7, [sp, #32]
   1a768:	strb	r7, [sp, #20]
   1a76c:	cmp	r5, #0
   1a770:	beq	1a6e4 <__assert_fail@plt+0x8f90>
   1a774:	cmp	r5, #1
   1a778:	beq	1a7ac <__assert_fail@plt+0x9058>
   1a77c:	cmp	r5, #2
   1a780:	movne	r5, #1
   1a784:	bne	1a704 <__assert_fail@plt+0x8fb0>
   1a788:	ldrb	r3, [sp, #32]
   1a78c:	cmp	r3, #0
   1a790:	moveq	r5, #1
   1a794:	beq	1a704 <__assert_fail@plt+0x8fb0>
   1a798:	ldr	r0, [sp, #36]	; 0x24
   1a79c:	bl	115a4 <iswspace@plt>
   1a7a0:	cmp	r0, #0
   1a7a4:	moveq	r5, #1
   1a7a8:	b	1a704 <__assert_fail@plt+0x8fb0>
   1a7ac:	ldrb	r3, [sp, #32]
   1a7b0:	cmp	r3, #0
   1a7b4:	beq	1a704 <__assert_fail@plt+0x8fb0>
   1a7b8:	ldr	r0, [sp, #36]	; 0x24
   1a7bc:	bl	115a4 <iswspace@plt>
   1a7c0:	cmp	r0, #0
   1a7c4:	ldrne	fp, [sp, #24]
   1a7c8:	movne	r5, #2
   1a7cc:	b	1a704 <__assert_fail@plt+0x8fb0>
   1a7d0:	add	r0, sp, #12
   1a7d4:	bl	1140c <mbsinit@plt>
   1a7d8:	cmp	r0, #0
   1a7dc:	beq	1a854 <__assert_fail@plt+0x9100>
   1a7e0:	strb	r7, [sp, #8]
   1a7e4:	add	r3, sp, #12
   1a7e8:	sub	r2, r6, r4
   1a7ec:	mov	r1, r4
   1a7f0:	add	r0, sp, #36	; 0x24
   1a7f4:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1a7f8:	str	r0, [sp, #28]
   1a7fc:	cmn	r0, #1
   1a800:	streq	r7, [sp, #28]
   1a804:	strbeq	r8, [sp, #32]
   1a808:	beq	1a768 <__assert_fail@plt+0x9014>
   1a80c:	cmn	r0, #2
   1a810:	beq	1a868 <__assert_fail@plt+0x9114>
   1a814:	cmp	r0, #0
   1a818:	bne	1a83c <__assert_fail@plt+0x90e8>
   1a81c:	str	r7, [sp, #28]
   1a820:	ldr	r3, [sp, #24]
   1a824:	ldrb	r3, [r3]
   1a828:	cmp	r3, #0
   1a82c:	bne	1a880 <__assert_fail@plt+0x912c>
   1a830:	ldr	r3, [sp, #36]	; 0x24
   1a834:	cmp	r3, #0
   1a838:	bne	1a894 <__assert_fail@plt+0x9140>
   1a83c:	strb	r7, [sp, #32]
   1a840:	add	r0, sp, #12
   1a844:	bl	1140c <mbsinit@plt>
   1a848:	cmp	r0, #0
   1a84c:	strbne	r8, [sp, #8]
   1a850:	b	1a768 <__assert_fail@plt+0x9014>
   1a854:	ldr	r3, [pc, #272]	; 1a96c <__assert_fail@plt+0x9218>
   1a858:	mov	r2, #135	; 0x87
   1a85c:	ldr	r1, [pc, #268]	; 1a970 <__assert_fail@plt+0x921c>
   1a860:	ldr	r0, [pc, #268]	; 1a974 <__assert_fail@plt+0x9220>
   1a864:	bl	11754 <__assert_fail@plt>
   1a868:	ldr	r2, [sp, #24]
   1a86c:	ldr	r3, [sp, #4]
   1a870:	sub	r3, r3, r2
   1a874:	str	r3, [sp, #28]
   1a878:	strb	r8, [sp, #32]
   1a87c:	b	1a768 <__assert_fail@plt+0x9014>
   1a880:	ldr	r3, [pc, #228]	; 1a96c <__assert_fail@plt+0x9218>
   1a884:	mov	r2, #162	; 0xa2
   1a888:	ldr	r1, [pc, #224]	; 1a970 <__assert_fail@plt+0x921c>
   1a88c:	ldr	r0, [pc, #228]	; 1a978 <__assert_fail@plt+0x9224>
   1a890:	bl	11754 <__assert_fail@plt>
   1a894:	ldr	r3, [pc, #208]	; 1a96c <__assert_fail@plt+0x9218>
   1a898:	mov	r2, #163	; 0xa3
   1a89c:	ldr	r1, [pc, #204]	; 1a970 <__assert_fail@plt+0x921c>
   1a8a0:	ldr	r0, [pc, #212]	; 1a97c <__assert_fail@plt+0x9228>
   1a8a4:	bl	11754 <__assert_fail@plt>
   1a8a8:	cmp	r5, #2
   1a8ac:	moveq	r3, #0
   1a8b0:	strbeq	r3, [fp]
   1a8b4:	mov	r0, r9
   1a8b8:	add	sp, sp, #68	; 0x44
   1a8bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8c0:	cmp	r6, #0
   1a8c4:	beq	1a91c <__assert_fail@plt+0x91c8>
   1a8c8:	ldrb	r4, [r9]
   1a8cc:	cmp	r4, #0
   1a8d0:	beq	1a960 <__assert_fail@plt+0x920c>
   1a8d4:	bl	1158c <__ctype_b_loc@plt>
   1a8d8:	ldr	r2, [r0]
   1a8dc:	mov	r5, r9
   1a8e0:	lsl	r4, r4, #1
   1a8e4:	ldrh	r3, [r2, r4]
   1a8e8:	tst	r3, #8192	; 0x2000
   1a8ec:	beq	1a8fc <__assert_fail@plt+0x91a8>
   1a8f0:	ldrb	r4, [r5, #1]!
   1a8f4:	cmp	r4, #0
   1a8f8:	bne	1a8e0 <__assert_fail@plt+0x918c>
   1a8fc:	mov	r0, r5
   1a900:	bl	115b0 <strlen@plt>
   1a904:	add	r2, r0, #1
   1a908:	mov	r1, r5
   1a90c:	mov	r0, r9
   1a910:	bl	113c4 <memmove@plt>
   1a914:	cmp	r6, #1
   1a918:	beq	1a8b4 <__assert_fail@plt+0x9160>
   1a91c:	mov	r0, r9
   1a920:	bl	115b0 <strlen@plt>
   1a924:	sub	r0, r0, #1
   1a928:	adds	r4, r9, r0
   1a92c:	bcs	1a8b4 <__assert_fail@plt+0x9160>
   1a930:	bl	1158c <__ctype_b_loc@plt>
   1a934:	ldr	r2, [r0]
   1a938:	mov	r1, #0
   1a93c:	ldrb	r3, [r4]
   1a940:	lsl	r3, r3, #1
   1a944:	ldrh	r3, [r2, r3]
   1a948:	tst	r3, #8192	; 0x2000
   1a94c:	beq	1a8b4 <__assert_fail@plt+0x9160>
   1a950:	strb	r1, [r4], #-1
   1a954:	cmp	r9, r4
   1a958:	bls	1a93c <__assert_fail@plt+0x91e8>
   1a95c:	b	1a8b4 <__assert_fail@plt+0x9160>
   1a960:	mov	r5, r9
   1a964:	b	1a8fc <__assert_fail@plt+0x91a8>
   1a968:	andeq	r1, r2, ip, ror fp
   1a96c:	andeq	r1, r2, r0, lsr #16
   1a970:	andeq	r1, r2, r4, lsr r8
   1a974:	andeq	r1, r2, r8, ror #13
   1a978:	andeq	r1, r2, r0, lsl #14
   1a97c:	andeq	r1, r2, r8, lsl r7
   1a980:	push	{r4, r5, r6, lr}
   1a984:	sub	sp, sp, #32
   1a988:	mov	r4, r0
   1a98c:	ldr	r5, [sp, #48]	; 0x30
   1a990:	ldr	r6, [sp, #52]	; 0x34
   1a994:	cmp	r1, #0
   1a998:	beq	1aa50 <__assert_fail@plt+0x92fc>
   1a99c:	str	r3, [sp, #4]
   1a9a0:	str	r2, [sp]
   1a9a4:	mov	r3, r1
   1a9a8:	ldr	r2, [pc, #940]	; 1ad5c <__assert_fail@plt+0x9608>
   1a9ac:	mov	r1, #1
   1a9b0:	bl	1164c <__fprintf_chk@plt>
   1a9b4:	mov	r2, #5
   1a9b8:	ldr	r1, [pc, #928]	; 1ad60 <__assert_fail@plt+0x960c>
   1a9bc:	mov	r0, #0
   1a9c0:	bl	11430 <dcgettext@plt>
   1a9c4:	ldr	r3, [pc, #920]	; 1ad64 <__assert_fail@plt+0x9610>
   1a9c8:	str	r3, [sp]
   1a9cc:	mov	r3, r0
   1a9d0:	ldr	r2, [pc, #912]	; 1ad68 <__assert_fail@plt+0x9614>
   1a9d4:	mov	r1, #1
   1a9d8:	mov	r0, r4
   1a9dc:	bl	1164c <__fprintf_chk@plt>
   1a9e0:	mov	r1, r4
   1a9e4:	mov	r0, #10
   1a9e8:	bl	11424 <fputc_unlocked@plt>
   1a9ec:	mov	r2, #5
   1a9f0:	ldr	r1, [pc, #884]	; 1ad6c <__assert_fail@plt+0x9618>
   1a9f4:	mov	r0, #0
   1a9f8:	bl	11430 <dcgettext@plt>
   1a9fc:	ldr	r3, [pc, #876]	; 1ad70 <__assert_fail@plt+0x961c>
   1aa00:	mov	r2, r0
   1aa04:	mov	r1, #1
   1aa08:	mov	r0, r4
   1aa0c:	bl	1164c <__fprintf_chk@plt>
   1aa10:	mov	r1, r4
   1aa14:	mov	r0, #10
   1aa18:	bl	11424 <fputc_unlocked@plt>
   1aa1c:	cmp	r6, #9
   1aa20:	ldrls	pc, [pc, r6, lsl #2]
   1aa24:	b	1acf4 <__assert_fail@plt+0x95a0>
   1aa28:	andeq	sl, r1, ip, lsl #21
   1aa2c:	andeq	sl, r1, r8, ror #20
   1aa30:	muleq	r1, r4, sl
   1aa34:	andeq	sl, r1, r4, asr #21
   1aa38:	strdeq	sl, [r1], -ip
   1aa3c:	andeq	sl, r1, ip, lsr fp
   1aa40:	andeq	sl, r1, r4, lsl #23
   1aa44:	ldrdeq	sl, [r1], -r4
   1aa48:	andeq	sl, r1, ip, lsr #24
   1aa4c:	andeq	sl, r1, ip, lsl #25
   1aa50:	str	r3, [sp]
   1aa54:	mov	r3, r2
   1aa58:	ldr	r2, [pc, #788]	; 1ad74 <__assert_fail@plt+0x9620>
   1aa5c:	mov	r1, #1
   1aa60:	bl	1164c <__fprintf_chk@plt>
   1aa64:	b	1a9b4 <__assert_fail@plt+0x9260>
   1aa68:	mov	r2, #5
   1aa6c:	ldr	r1, [pc, #772]	; 1ad78 <__assert_fail@plt+0x9624>
   1aa70:	mov	r0, #0
   1aa74:	bl	11430 <dcgettext@plt>
   1aa78:	ldr	r3, [r5]
   1aa7c:	mov	r2, r0
   1aa80:	mov	r1, #1
   1aa84:	mov	r0, r4
   1aa88:	bl	1164c <__fprintf_chk@plt>
   1aa8c:	add	sp, sp, #32
   1aa90:	pop	{r4, r5, r6, pc}
   1aa94:	mov	r2, #5
   1aa98:	ldr	r1, [pc, #732]	; 1ad7c <__assert_fail@plt+0x9628>
   1aa9c:	mov	r0, #0
   1aaa0:	bl	11430 <dcgettext@plt>
   1aaa4:	ldr	r3, [r5]
   1aaa8:	ldr	r2, [r5, #4]
   1aaac:	str	r2, [sp]
   1aab0:	mov	r2, r0
   1aab4:	mov	r1, #1
   1aab8:	mov	r0, r4
   1aabc:	bl	1164c <__fprintf_chk@plt>
   1aac0:	b	1aa8c <__assert_fail@plt+0x9338>
   1aac4:	mov	r2, #5
   1aac8:	ldr	r1, [pc, #688]	; 1ad80 <__assert_fail@plt+0x962c>
   1aacc:	mov	r0, #0
   1aad0:	bl	11430 <dcgettext@plt>
   1aad4:	ldr	r3, [r5]
   1aad8:	ldr	r2, [r5, #8]
   1aadc:	str	r2, [sp, #4]
   1aae0:	ldr	r2, [r5, #4]
   1aae4:	str	r2, [sp]
   1aae8:	mov	r2, r0
   1aaec:	mov	r1, #1
   1aaf0:	mov	r0, r4
   1aaf4:	bl	1164c <__fprintf_chk@plt>
   1aaf8:	b	1aa8c <__assert_fail@plt+0x9338>
   1aafc:	mov	r2, #5
   1ab00:	ldr	r1, [pc, #636]	; 1ad84 <__assert_fail@plt+0x9630>
   1ab04:	mov	r0, #0
   1ab08:	bl	11430 <dcgettext@plt>
   1ab0c:	ldr	r3, [r5]
   1ab10:	ldr	r2, [r5, #12]
   1ab14:	str	r2, [sp, #8]
   1ab18:	ldr	r2, [r5, #8]
   1ab1c:	str	r2, [sp, #4]
   1ab20:	ldr	r2, [r5, #4]
   1ab24:	str	r2, [sp]
   1ab28:	mov	r2, r0
   1ab2c:	mov	r1, #1
   1ab30:	mov	r0, r4
   1ab34:	bl	1164c <__fprintf_chk@plt>
   1ab38:	b	1aa8c <__assert_fail@plt+0x9338>
   1ab3c:	mov	r2, #5
   1ab40:	ldr	r1, [pc, #576]	; 1ad88 <__assert_fail@plt+0x9634>
   1ab44:	mov	r0, #0
   1ab48:	bl	11430 <dcgettext@plt>
   1ab4c:	ldr	r3, [r5]
   1ab50:	ldr	r2, [r5, #16]
   1ab54:	str	r2, [sp, #12]
   1ab58:	ldr	r2, [r5, #12]
   1ab5c:	str	r2, [sp, #8]
   1ab60:	ldr	r2, [r5, #8]
   1ab64:	str	r2, [sp, #4]
   1ab68:	ldr	r2, [r5, #4]
   1ab6c:	str	r2, [sp]
   1ab70:	mov	r2, r0
   1ab74:	mov	r1, #1
   1ab78:	mov	r0, r4
   1ab7c:	bl	1164c <__fprintf_chk@plt>
   1ab80:	b	1aa8c <__assert_fail@plt+0x9338>
   1ab84:	mov	r2, #5
   1ab88:	ldr	r1, [pc, #508]	; 1ad8c <__assert_fail@plt+0x9638>
   1ab8c:	mov	r0, #0
   1ab90:	bl	11430 <dcgettext@plt>
   1ab94:	ldr	r3, [r5]
   1ab98:	ldr	r2, [r5, #20]
   1ab9c:	str	r2, [sp, #16]
   1aba0:	ldr	r2, [r5, #16]
   1aba4:	str	r2, [sp, #12]
   1aba8:	ldr	r2, [r5, #12]
   1abac:	str	r2, [sp, #8]
   1abb0:	ldr	r2, [r5, #8]
   1abb4:	str	r2, [sp, #4]
   1abb8:	ldr	r2, [r5, #4]
   1abbc:	str	r2, [sp]
   1abc0:	mov	r2, r0
   1abc4:	mov	r1, #1
   1abc8:	mov	r0, r4
   1abcc:	bl	1164c <__fprintf_chk@plt>
   1abd0:	b	1aa8c <__assert_fail@plt+0x9338>
   1abd4:	mov	r2, #5
   1abd8:	ldr	r1, [pc, #432]	; 1ad90 <__assert_fail@plt+0x963c>
   1abdc:	mov	r0, #0
   1abe0:	bl	11430 <dcgettext@plt>
   1abe4:	ldr	r3, [r5]
   1abe8:	ldr	r2, [r5, #24]
   1abec:	str	r2, [sp, #20]
   1abf0:	ldr	r2, [r5, #20]
   1abf4:	str	r2, [sp, #16]
   1abf8:	ldr	r2, [r5, #16]
   1abfc:	str	r2, [sp, #12]
   1ac00:	ldr	r2, [r5, #12]
   1ac04:	str	r2, [sp, #8]
   1ac08:	ldr	r2, [r5, #8]
   1ac0c:	str	r2, [sp, #4]
   1ac10:	ldr	r2, [r5, #4]
   1ac14:	str	r2, [sp]
   1ac18:	mov	r2, r0
   1ac1c:	mov	r1, #1
   1ac20:	mov	r0, r4
   1ac24:	bl	1164c <__fprintf_chk@plt>
   1ac28:	b	1aa8c <__assert_fail@plt+0x9338>
   1ac2c:	mov	r2, #5
   1ac30:	ldr	r1, [pc, #348]	; 1ad94 <__assert_fail@plt+0x9640>
   1ac34:	mov	r0, #0
   1ac38:	bl	11430 <dcgettext@plt>
   1ac3c:	ldr	r3, [r5]
   1ac40:	ldr	r2, [r5, #28]
   1ac44:	str	r2, [sp, #24]
   1ac48:	ldr	r2, [r5, #24]
   1ac4c:	str	r2, [sp, #20]
   1ac50:	ldr	r2, [r5, #20]
   1ac54:	str	r2, [sp, #16]
   1ac58:	ldr	r2, [r5, #16]
   1ac5c:	str	r2, [sp, #12]
   1ac60:	ldr	r2, [r5, #12]
   1ac64:	str	r2, [sp, #8]
   1ac68:	ldr	r2, [r5, #8]
   1ac6c:	str	r2, [sp, #4]
   1ac70:	ldr	r2, [r5, #4]
   1ac74:	str	r2, [sp]
   1ac78:	mov	r2, r0
   1ac7c:	mov	r1, #1
   1ac80:	mov	r0, r4
   1ac84:	bl	1164c <__fprintf_chk@plt>
   1ac88:	b	1aa8c <__assert_fail@plt+0x9338>
   1ac8c:	mov	r2, #5
   1ac90:	ldr	r1, [pc, #256]	; 1ad98 <__assert_fail@plt+0x9644>
   1ac94:	mov	r0, #0
   1ac98:	bl	11430 <dcgettext@plt>
   1ac9c:	ldr	r3, [r5]
   1aca0:	ldr	r2, [r5, #32]
   1aca4:	str	r2, [sp, #28]
   1aca8:	ldr	r2, [r5, #28]
   1acac:	str	r2, [sp, #24]
   1acb0:	ldr	r2, [r5, #24]
   1acb4:	str	r2, [sp, #20]
   1acb8:	ldr	r2, [r5, #20]
   1acbc:	str	r2, [sp, #16]
   1acc0:	ldr	r2, [r5, #16]
   1acc4:	str	r2, [sp, #12]
   1acc8:	ldr	r2, [r5, #12]
   1accc:	str	r2, [sp, #8]
   1acd0:	ldr	r2, [r5, #8]
   1acd4:	str	r2, [sp, #4]
   1acd8:	ldr	r2, [r5, #4]
   1acdc:	str	r2, [sp]
   1ace0:	mov	r2, r0
   1ace4:	mov	r1, #1
   1ace8:	mov	r0, r4
   1acec:	bl	1164c <__fprintf_chk@plt>
   1acf0:	b	1aa8c <__assert_fail@plt+0x9338>
   1acf4:	mov	r2, #5
   1acf8:	ldr	r1, [pc, #156]	; 1ad9c <__assert_fail@plt+0x9648>
   1acfc:	mov	r0, #0
   1ad00:	bl	11430 <dcgettext@plt>
   1ad04:	ldr	r3, [r5]
   1ad08:	ldr	r2, [r5, #32]
   1ad0c:	str	r2, [sp, #28]
   1ad10:	ldr	r2, [r5, #28]
   1ad14:	str	r2, [sp, #24]
   1ad18:	ldr	r2, [r5, #24]
   1ad1c:	str	r2, [sp, #20]
   1ad20:	ldr	r2, [r5, #20]
   1ad24:	str	r2, [sp, #16]
   1ad28:	ldr	r2, [r5, #16]
   1ad2c:	str	r2, [sp, #12]
   1ad30:	ldr	r2, [r5, #12]
   1ad34:	str	r2, [sp, #8]
   1ad38:	ldr	r2, [r5, #8]
   1ad3c:	str	r2, [sp, #4]
   1ad40:	ldr	r2, [r5, #4]
   1ad44:	str	r2, [sp]
   1ad48:	mov	r2, r0
   1ad4c:	mov	r1, #1
   1ad50:	mov	r0, r4
   1ad54:	bl	1164c <__fprintf_chk@plt>
   1ad58:	b	1aa8c <__assert_fail@plt+0x9338>
   1ad5c:	andeq	r1, r2, r4, asr #16
   1ad60:	andeq	r1, r2, r8, asr r8
   1ad64:	andeq	r0, r0, r6, ror #15
   1ad68:	andeq	r1, r2, r0, lsr fp
   1ad6c:	andeq	r1, r2, ip, asr r8
   1ad70:	andeq	r1, r2, r8, lsl #18
   1ad74:	andeq	r1, r2, r0, asr r8
   1ad78:	andeq	r1, r2, ip, lsr #18
   1ad7c:	andeq	r1, r2, ip, lsr r9
   1ad80:	andeq	r1, r2, r4, asr r9
   1ad84:	andeq	r1, r2, r0, ror r9
   1ad88:	muleq	r2, r0, r9
   1ad8c:			; <UNDEFINED> instruction: 0x000219b4
   1ad90:	ldrdeq	r1, [r2], -ip
   1ad94:	andeq	r1, r2, r8, lsl #20
   1ad98:	andeq	r1, r2, r8, lsr sl
   1ad9c:	andeq	r1, r2, ip, ror #20
   1ada0:	push	{r4, r5, lr}
   1ada4:	sub	sp, sp, #12
   1ada8:	ldr	r5, [sp, #24]
   1adac:	ldr	ip, [r5]
   1adb0:	cmp	ip, #0
   1adb4:	beq	1ade4 <__assert_fail@plt+0x9690>
   1adb8:	mov	lr, r5
   1adbc:	mov	ip, #0
   1adc0:	add	ip, ip, #1
   1adc4:	ldr	r4, [lr, #4]!
   1adc8:	cmp	r4, #0
   1adcc:	bne	1adc0 <__assert_fail@plt+0x966c>
   1add0:	str	ip, [sp, #4]
   1add4:	str	r5, [sp]
   1add8:	bl	1a980 <__assert_fail@plt+0x922c>
   1addc:	add	sp, sp, #12
   1ade0:	pop	{r4, r5, pc}
   1ade4:	mov	ip, #0
   1ade8:	b	1add0 <__assert_fail@plt+0x967c>
   1adec:	push	{r4, r5, lr}
   1adf0:	sub	sp, sp, #52	; 0x34
   1adf4:	ldr	r4, [sp, #64]	; 0x40
   1adf8:	sub	r4, r4, #4
   1adfc:	add	r5, sp, #4
   1ae00:	mov	ip, #0
   1ae04:	ldr	lr, [r4, #4]!
   1ae08:	str	lr, [r5, #4]!
   1ae0c:	cmp	lr, #0
   1ae10:	beq	1ae20 <__assert_fail@plt+0x96cc>
   1ae14:	add	ip, ip, #1
   1ae18:	cmp	ip, #10
   1ae1c:	bne	1ae04 <__assert_fail@plt+0x96b0>
   1ae20:	str	ip, [sp, #4]
   1ae24:	add	ip, sp, #8
   1ae28:	str	ip, [sp]
   1ae2c:	bl	1a980 <__assert_fail@plt+0x922c>
   1ae30:	add	sp, sp, #52	; 0x34
   1ae34:	pop	{r4, r5, pc}
   1ae38:	push	{r3}		; (str r3, [sp, #-4]!)
   1ae3c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae40:	sub	sp, sp, #16
   1ae44:	add	r3, sp, #24
   1ae48:	str	r3, [sp, #12]
   1ae4c:	str	r3, [sp]
   1ae50:	ldr	r3, [sp, #20]
   1ae54:	bl	1adec <__assert_fail@plt+0x9698>
   1ae58:	add	sp, sp, #16
   1ae5c:	pop	{lr}		; (ldr lr, [sp], #4)
   1ae60:	add	sp, sp, #4
   1ae64:	bx	lr
   1ae68:	push	{r4, lr}
   1ae6c:	ldr	r3, [pc, #112]	; 1aee4 <__assert_fail@plt+0x9790>
   1ae70:	ldr	r1, [r3]
   1ae74:	mov	r0, #10
   1ae78:	bl	11424 <fputc_unlocked@plt>
   1ae7c:	mov	r2, #5
   1ae80:	ldr	r1, [pc, #96]	; 1aee8 <__assert_fail@plt+0x9794>
   1ae84:	mov	r0, #0
   1ae88:	bl	11430 <dcgettext@plt>
   1ae8c:	ldr	r2, [pc, #88]	; 1aeec <__assert_fail@plt+0x9798>
   1ae90:	mov	r1, r0
   1ae94:	mov	r0, #1
   1ae98:	bl	11628 <__printf_chk@plt>
   1ae9c:	mov	r2, #5
   1aea0:	ldr	r1, [pc, #72]	; 1aef0 <__assert_fail@plt+0x979c>
   1aea4:	mov	r0, #0
   1aea8:	bl	11430 <dcgettext@plt>
   1aeac:	ldr	r3, [pc, #64]	; 1aef4 <__assert_fail@plt+0x97a0>
   1aeb0:	ldr	r2, [pc, #64]	; 1aef8 <__assert_fail@plt+0x97a4>
   1aeb4:	mov	r1, r0
   1aeb8:	mov	r0, #1
   1aebc:	bl	11628 <__printf_chk@plt>
   1aec0:	mov	r2, #5
   1aec4:	ldr	r1, [pc, #48]	; 1aefc <__assert_fail@plt+0x97a8>
   1aec8:	mov	r0, #0
   1aecc:	bl	11430 <dcgettext@plt>
   1aed0:	ldr	r2, [pc, #40]	; 1af00 <__assert_fail@plt+0x97ac>
   1aed4:	mov	r1, r0
   1aed8:	mov	r0, #1
   1aedc:	bl	11628 <__printf_chk@plt>
   1aee0:	pop	{r4, pc}
   1aee4:	andeq	r2, r3, r4, ror #3
   1aee8:	andeq	r1, r2, r8, lsr #21
   1aeec:			; <UNDEFINED> instruction: 0x00021abc
   1aef0:	ldrdeq	r1, [r2], -r4
   1aef4:	andeq	r1, r2, r0, lsr #9
   1aef8:	andeq	r1, r2, r8, asr #9
   1aefc:	andeq	r1, r2, r8, ror #21
   1af00:	andeq	r1, r2, r0, lsl fp
   1af04:	push	{r4, lr}
   1af08:	bl	1b5cc <__assert_fail@plt+0x9e78>
   1af0c:	cmp	r0, #0
   1af10:	popne	{r4, pc}
   1af14:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1af18:	push	{r4, lr}
   1af1c:	bl	1b5cc <__assert_fail@plt+0x9e78>
   1af20:	cmp	r0, #0
   1af24:	popne	{r4, pc}
   1af28:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1af2c:	push	{r4, lr}
   1af30:	bl	1af04 <__assert_fail@plt+0x97b0>
   1af34:	pop	{r4, pc}
   1af38:	push	{r4, r5, r6, lr}
   1af3c:	mov	r5, r0
   1af40:	mov	r4, r1
   1af44:	bl	1b5fc <__assert_fail@plt+0x9ea8>
   1af48:	cmp	r0, #0
   1af4c:	popne	{r4, r5, r6, pc}
   1af50:	adds	r4, r4, #0
   1af54:	movne	r4, #1
   1af58:	cmp	r5, #0
   1af5c:	orreq	r4, r4, #1
   1af60:	cmp	r4, #0
   1af64:	popeq	{r4, r5, r6, pc}
   1af68:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1af6c:	push	{r4, lr}
   1af70:	cmp	r1, #0
   1af74:	orreq	r1, r1, #1
   1af78:	bl	1b5fc <__assert_fail@plt+0x9ea8>
   1af7c:	cmp	r0, #0
   1af80:	popne	{r4, pc}
   1af84:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1af88:	push	{r4, r5, r6, lr}
   1af8c:	mov	r6, r0
   1af90:	mov	r5, r1
   1af94:	mov	r4, r2
   1af98:	bl	1d194 <__assert_fail@plt+0xba40>
   1af9c:	cmp	r0, #0
   1afa0:	popne	{r4, r5, r6, pc}
   1afa4:	cmp	r6, #0
   1afa8:	beq	1afb8 <__assert_fail@plt+0x9864>
   1afac:	cmp	r5, #0
   1afb0:	cmpne	r4, #0
   1afb4:	popeq	{r4, r5, r6, pc}
   1afb8:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1afbc:	push	{r4, lr}
   1afc0:	bl	1af88 <__assert_fail@plt+0x9834>
   1afc4:	pop	{r4, pc}
   1afc8:	push	{r4, lr}
   1afcc:	mov	ip, r1
   1afd0:	mov	r3, r2
   1afd4:	cmp	r2, #0
   1afd8:	cmpne	r1, #0
   1afdc:	moveq	r3, #1
   1afe0:	moveq	ip, r3
   1afe4:	mov	r2, r3
   1afe8:	mov	r1, ip
   1afec:	bl	1d194 <__assert_fail@plt+0xba40>
   1aff0:	cmp	r0, #0
   1aff4:	popne	{r4, pc}
   1aff8:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1affc:	push	{r4, lr}
   1b000:	mov	r2, r1
   1b004:	mov	r1, r0
   1b008:	mov	r0, #0
   1b00c:	bl	1af88 <__assert_fail@plt+0x9834>
   1b010:	pop	{r4, pc}
   1b014:	push	{r4, lr}
   1b018:	mov	r2, r1
   1b01c:	mov	r1, r0
   1b020:	mov	r0, #0
   1b024:	bl	1afc8 <__assert_fail@plt+0x9874>
   1b028:	pop	{r4, pc}
   1b02c:	push	{r4, r5, r6, r7, r8, lr}
   1b030:	mov	r5, r1
   1b034:	mov	r6, r2
   1b038:	ldr	r4, [r1]
   1b03c:	subs	r7, r0, #0
   1b040:	beq	1b05c <__assert_fail@plt+0x9908>
   1b044:	lsr	r2, r4, #1
   1b048:	add	r3, r2, #1
   1b04c:	mvn	r3, r3
   1b050:	cmp	r4, r3
   1b054:	bls	1b080 <__assert_fail@plt+0x992c>
   1b058:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1b05c:	cmp	r4, #0
   1b060:	bne	1b088 <__assert_fail@plt+0x9934>
   1b064:	mov	r1, r2
   1b068:	mov	r0, #64	; 0x40
   1b06c:	bl	1da2c <__assert_fail@plt+0xc2d8>
   1b070:	cmp	r0, #0
   1b074:	movne	r4, r0
   1b078:	addeq	r4, r0, #1
   1b07c:	b	1b088 <__assert_fail@plt+0x9934>
   1b080:	add	r4, r4, #1
   1b084:	add	r4, r4, r2
   1b088:	mov	r2, r6
   1b08c:	mov	r1, r4
   1b090:	mov	r0, r7
   1b094:	bl	1af88 <__assert_fail@plt+0x9834>
   1b098:	str	r4, [r5]
   1b09c:	pop	{r4, r5, r6, r7, r8, pc}
   1b0a0:	push	{r4, lr}
   1b0a4:	mov	r2, #1
   1b0a8:	bl	1b02c <__assert_fail@plt+0x98d8>
   1b0ac:	pop	{r4, pc}
   1b0b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0b4:	sub	sp, sp, #12
   1b0b8:	mov	fp, r0
   1b0bc:	mov	sl, r1
   1b0c0:	mov	r9, r2
   1b0c4:	mov	r7, r3
   1b0c8:	ldr	r6, [sp, #48]	; 0x30
   1b0cc:	ldr	r5, [r1]
   1b0d0:	asrs	r4, r5, #1
   1b0d4:	bmi	1b230 <__assert_fail@plt+0x9adc>
   1b0d8:	cmp	r5, #0
   1b0dc:	blt	1b244 <__assert_fail@plt+0x9af0>
   1b0e0:	mvn	r3, #-2147483648	; 0x80000000
   1b0e4:	sub	r3, r3, r4
   1b0e8:	cmp	r5, r3
   1b0ec:	movle	r3, #0
   1b0f0:	movgt	r3, #1
   1b0f4:	cmp	r3, #0
   1b0f8:	addeq	r4, r4, r5
   1b0fc:	mvnne	r4, #-2147483648	; 0x80000000
   1b100:	mvn	r8, r7
   1b104:	lsr	r8, r8, #31
   1b108:	cmp	r7, r4
   1b10c:	movge	r3, #0
   1b110:	andlt	r3, r8, #1
   1b114:	cmp	r3, #0
   1b118:	movne	r4, r7
   1b11c:	cmp	r6, #0
   1b120:	blt	1b258 <__assert_fail@plt+0x9b04>
   1b124:	cmp	r6, #0
   1b128:	beq	1b304 <__assert_fail@plt+0x9bb0>
   1b12c:	cmp	r4, #0
   1b130:	blt	1b2b4 <__assert_fail@plt+0x9b60>
   1b134:	mov	r1, r6
   1b138:	mvn	r0, #-2147483648	; 0x80000000
   1b13c:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b140:	cmp	r0, r4
   1b144:	movge	r0, #0
   1b148:	movlt	r0, #1
   1b14c:	cmp	r0, #0
   1b150:	mvnne	r3, #-2147483648	; 0x80000000
   1b154:	strne	r3, [sp, #4]
   1b158:	beq	1b2ec <__assert_fail@plt+0x9b98>
   1b15c:	mov	r1, r6
   1b160:	ldr	r0, [sp, #4]
   1b164:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b168:	mov	r4, r0
   1b16c:	mov	r1, r6
   1b170:	ldr	r0, [sp, #4]
   1b174:	bl	1de58 <__assert_fail@plt+0xc704>
   1b178:	ldr	r3, [sp, #4]
   1b17c:	sub	r1, r3, r1
   1b180:	cmp	fp, #0
   1b184:	moveq	r3, #0
   1b188:	streq	r3, [sl]
   1b18c:	sub	r3, r4, r5
   1b190:	cmp	r3, r9
   1b194:	bge	1b21c <__assert_fail@plt+0x9ac8>
   1b198:	cmp	r9, #0
   1b19c:	blt	1b310 <__assert_fail@plt+0x9bbc>
   1b1a0:	cmp	r5, #0
   1b1a4:	blt	1b324 <__assert_fail@plt+0x9bd0>
   1b1a8:	mvn	r3, #-2147483648	; 0x80000000
   1b1ac:	sub	r3, r3, r9
   1b1b0:	cmp	r5, r3
   1b1b4:	movle	r3, #0
   1b1b8:	movgt	r3, #1
   1b1bc:	cmp	r3, #0
   1b1c0:	bne	1b3cc <__assert_fail@plt+0x9c78>
   1b1c4:	add	r5, r5, r9
   1b1c8:	mov	r4, r5
   1b1cc:	cmp	r7, r5
   1b1d0:	movge	r7, #0
   1b1d4:	andlt	r7, r8, #1
   1b1d8:	cmp	r7, #0
   1b1dc:	bne	1b3cc <__assert_fail@plt+0x9c78>
   1b1e0:	cmp	r6, #0
   1b1e4:	blt	1b338 <__assert_fail@plt+0x9be4>
   1b1e8:	cmp	r6, #0
   1b1ec:	beq	1b218 <__assert_fail@plt+0x9ac4>
   1b1f0:	cmp	r5, #0
   1b1f4:	blt	1b394 <__assert_fail@plt+0x9c40>
   1b1f8:	mov	r1, r6
   1b1fc:	mvn	r0, #-2147483648	; 0x80000000
   1b200:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b204:	cmp	r5, r0
   1b208:	movle	r0, #0
   1b20c:	movgt	r0, #1
   1b210:	cmp	r0, #0
   1b214:	bne	1b3cc <__assert_fail@plt+0x9c78>
   1b218:	mul	r1, r5, r6
   1b21c:	mov	r0, fp
   1b220:	bl	1af38 <__assert_fail@plt+0x97e4>
   1b224:	str	r4, [sl]
   1b228:	add	sp, sp, #12
   1b22c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b230:	rsb	r3, r4, #-2147483648	; 0x80000000
   1b234:	cmp	r5, r3
   1b238:	movge	r3, #0
   1b23c:	movlt	r3, #1
   1b240:	b	1b0f4 <__assert_fail@plt+0x99a0>
   1b244:	rsb	r3, r5, #-2147483648	; 0x80000000
   1b248:	cmp	r4, r3
   1b24c:	movge	r3, #0
   1b250:	movlt	r3, #1
   1b254:	b	1b0f4 <__assert_fail@plt+0x99a0>
   1b258:	cmp	r4, #0
   1b25c:	blt	1b284 <__assert_fail@plt+0x9b30>
   1b260:	cmn	r6, #1
   1b264:	beq	1b2a0 <__assert_fail@plt+0x9b4c>
   1b268:	mov	r1, r6
   1b26c:	mov	r0, #-2147483648	; 0x80000000
   1b270:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b274:	cmp	r0, r4
   1b278:	movge	r0, #0
   1b27c:	movlt	r0, #1
   1b280:	b	1b14c <__assert_fail@plt+0x99f8>
   1b284:	mov	r1, r6
   1b288:	mvn	r0, #-2147483648	; 0x80000000
   1b28c:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b290:	cmp	r0, r4
   1b294:	movle	r0, #0
   1b298:	movgt	r0, #1
   1b29c:	b	1b14c <__assert_fail@plt+0x99f8>
   1b2a0:	add	r0, r4, #-2147483648	; 0x80000000
   1b2a4:	cmp	r0, #0
   1b2a8:	movle	r0, #0
   1b2ac:	movgt	r0, #1
   1b2b0:	b	1b14c <__assert_fail@plt+0x99f8>
   1b2b4:	cmn	r4, #1
   1b2b8:	beq	1b2d8 <__assert_fail@plt+0x9b84>
   1b2bc:	mov	r1, r4
   1b2c0:	mov	r0, #-2147483648	; 0x80000000
   1b2c4:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b2c8:	cmp	r6, r0
   1b2cc:	movle	r0, #0
   1b2d0:	movgt	r0, #1
   1b2d4:	b	1b14c <__assert_fail@plt+0x99f8>
   1b2d8:	add	r0, r6, #-2147483648	; 0x80000000
   1b2dc:	cmp	r0, #0
   1b2e0:	movle	r0, #0
   1b2e4:	movgt	r0, #1
   1b2e8:	b	1b14c <__assert_fail@plt+0x99f8>
   1b2ec:	mul	r1, r6, r4
   1b2f0:	cmp	r1, #63	; 0x3f
   1b2f4:	movle	r3, #64	; 0x40
   1b2f8:	strle	r3, [sp, #4]
   1b2fc:	bgt	1b180 <__assert_fail@plt+0x9a2c>
   1b300:	b	1b15c <__assert_fail@plt+0x9a08>
   1b304:	mov	r3, #64	; 0x40
   1b308:	str	r3, [sp, #4]
   1b30c:	b	1b15c <__assert_fail@plt+0x9a08>
   1b310:	rsb	r3, r9, #-2147483648	; 0x80000000
   1b314:	cmp	r5, r3
   1b318:	movge	r3, #0
   1b31c:	movlt	r3, #1
   1b320:	b	1b1bc <__assert_fail@plt+0x9a68>
   1b324:	rsb	r3, r5, #-2147483648	; 0x80000000
   1b328:	cmp	r9, r3
   1b32c:	movge	r3, #0
   1b330:	movlt	r3, #1
   1b334:	b	1b1bc <__assert_fail@plt+0x9a68>
   1b338:	cmp	r5, #0
   1b33c:	blt	1b364 <__assert_fail@plt+0x9c10>
   1b340:	cmn	r6, #1
   1b344:	beq	1b380 <__assert_fail@plt+0x9c2c>
   1b348:	mov	r1, r6
   1b34c:	mov	r0, #-2147483648	; 0x80000000
   1b350:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b354:	cmp	r5, r0
   1b358:	movle	r0, #0
   1b35c:	movgt	r0, #1
   1b360:	b	1b210 <__assert_fail@plt+0x9abc>
   1b364:	mov	r1, r6
   1b368:	mvn	r0, #-2147483648	; 0x80000000
   1b36c:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b370:	cmp	r5, r0
   1b374:	movge	r0, #0
   1b378:	movlt	r0, #1
   1b37c:	b	1b210 <__assert_fail@plt+0x9abc>
   1b380:	add	r0, r5, #-2147483648	; 0x80000000
   1b384:	cmp	r0, #0
   1b388:	movle	r0, #0
   1b38c:	movgt	r0, #1
   1b390:	b	1b210 <__assert_fail@plt+0x9abc>
   1b394:	cmn	r5, #1
   1b398:	beq	1b3b8 <__assert_fail@plt+0x9c64>
   1b39c:	mov	r1, r5
   1b3a0:	mov	r0, #-2147483648	; 0x80000000
   1b3a4:	bl	1dc38 <__assert_fail@plt+0xc4e4>
   1b3a8:	cmp	r6, r0
   1b3ac:	movle	r0, #0
   1b3b0:	movgt	r0, #1
   1b3b4:	b	1b210 <__assert_fail@plt+0x9abc>
   1b3b8:	add	r0, r6, #-2147483648	; 0x80000000
   1b3bc:	cmp	r0, #0
   1b3c0:	movle	r0, #0
   1b3c4:	movgt	r0, #1
   1b3c8:	b	1b210 <__assert_fail@plt+0x9abc>
   1b3cc:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1b3d0:	push	{r4, lr}
   1b3d4:	bl	1b57c <__assert_fail@plt+0x9e28>
   1b3d8:	cmp	r0, #0
   1b3dc:	popne	{r4, pc}
   1b3e0:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1b3e4:	push	{r4, lr}
   1b3e8:	mov	r1, #1
   1b3ec:	bl	1b3d0 <__assert_fail@plt+0x9c7c>
   1b3f0:	pop	{r4, pc}
   1b3f4:	push	{r4, lr}
   1b3f8:	bl	1b57c <__assert_fail@plt+0x9e28>
   1b3fc:	cmp	r0, #0
   1b400:	popne	{r4, pc}
   1b404:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1b408:	push	{r4, lr}
   1b40c:	mov	r1, #1
   1b410:	bl	1b3f4 <__assert_fail@plt+0x9ca0>
   1b414:	pop	{r4, pc}
   1b418:	push	{r4, r5, r6, lr}
   1b41c:	mov	r5, r0
   1b420:	mov	r4, r1
   1b424:	mov	r0, r1
   1b428:	bl	1af04 <__assert_fail@plt+0x97b0>
   1b42c:	mov	r2, r4
   1b430:	mov	r1, r5
   1b434:	bl	113f4 <memcpy@plt>
   1b438:	pop	{r4, r5, r6, pc}
   1b43c:	push	{r4, r5, r6, lr}
   1b440:	mov	r5, r0
   1b444:	mov	r4, r1
   1b448:	mov	r0, r1
   1b44c:	bl	1af18 <__assert_fail@plt+0x97c4>
   1b450:	mov	r2, r4
   1b454:	mov	r1, r5
   1b458:	bl	113f4 <memcpy@plt>
   1b45c:	pop	{r4, r5, r6, pc}
   1b460:	push	{r4, r5, r6, lr}
   1b464:	mov	r5, r0
   1b468:	mov	r4, r1
   1b46c:	add	r0, r1, #1
   1b470:	bl	1af18 <__assert_fail@plt+0x97c4>
   1b474:	mov	r2, #0
   1b478:	strb	r2, [r0, r4]
   1b47c:	mov	r2, r4
   1b480:	mov	r1, r5
   1b484:	bl	113f4 <memcpy@plt>
   1b488:	pop	{r4, r5, r6, pc}
   1b48c:	push	{r4, lr}
   1b490:	mov	r4, r0
   1b494:	bl	115b0 <strlen@plt>
   1b498:	add	r1, r0, #1
   1b49c:	mov	r0, r4
   1b4a0:	bl	1b418 <__assert_fail@plt+0x9cc4>
   1b4a4:	pop	{r4, pc}
   1b4a8:	push	{r4, lr}
   1b4ac:	ldr	r3, [pc, #40]	; 1b4dc <__assert_fail@plt+0x9d88>
   1b4b0:	ldr	r4, [r3]
   1b4b4:	mov	r2, #5
   1b4b8:	ldr	r1, [pc, #32]	; 1b4e0 <__assert_fail@plt+0x9d8c>
   1b4bc:	mov	r0, #0
   1b4c0:	bl	11430 <dcgettext@plt>
   1b4c4:	mov	r3, r0
   1b4c8:	ldr	r2, [pc, #20]	; 1b4e4 <__assert_fail@plt+0x9d90>
   1b4cc:	mov	r1, #0
   1b4d0:	mov	r0, r4
   1b4d4:	bl	11520 <error@plt>
   1b4d8:	bl	11748 <abort@plt>
   1b4dc:	andeq	r2, r3, r0, lsl #3
   1b4e0:	andeq	r1, r2, r0, ror #22
   1b4e4:	andeq	r1, r2, ip, ror r6
   1b4e8:	push	{r4, lr}
   1b4ec:	sub	sp, sp, #8
   1b4f0:	ldr	ip, [sp, #16]
   1b4f4:	str	ip, [sp]
   1b4f8:	bl	1d1e0 <__assert_fail@plt+0xba8c>
   1b4fc:	subs	r4, r0, #0
   1b500:	blt	1b510 <__assert_fail@plt+0x9dbc>
   1b504:	mov	r0, r4
   1b508:	add	sp, sp, #8
   1b50c:	pop	{r4, pc}
   1b510:	bl	115e0 <__errno_location@plt>
   1b514:	ldr	r3, [r0]
   1b518:	cmp	r3, #12
   1b51c:	bne	1b504 <__assert_fail@plt+0x9db0>
   1b520:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1b524:	push	{r4, lr}
   1b528:	bl	1d428 <__assert_fail@plt+0xbcd4>
   1b52c:	subs	r4, r0, #0
   1b530:	beq	1b53c <__assert_fail@plt+0x9de8>
   1b534:	mov	r0, r4
   1b538:	pop	{r4, pc}
   1b53c:	bl	115e0 <__errno_location@plt>
   1b540:	ldr	r3, [r0]
   1b544:	cmp	r3, #12
   1b548:	bne	1b534 <__assert_fail@plt+0x9de0>
   1b54c:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1b550:	push	{r4, lr}
   1b554:	bl	1d618 <__assert_fail@plt+0xbec4>
   1b558:	subs	r4, r0, #0
   1b55c:	beq	1b568 <__assert_fail@plt+0x9e14>
   1b560:	mov	r0, r4
   1b564:	pop	{r4, pc}
   1b568:	bl	115e0 <__errno_location@plt>
   1b56c:	ldr	r3, [r0]
   1b570:	cmp	r3, #12
   1b574:	bne	1b560 <__assert_fail@plt+0x9e0c>
   1b578:	bl	1b4a8 <__assert_fail@plt+0x9d54>
   1b57c:	push	{r4, lr}
   1b580:	mov	r2, r0
   1b584:	mov	r3, r1
   1b588:	cmp	r1, #0
   1b58c:	cmpne	r0, #0
   1b590:	moveq	r3, #1
   1b594:	moveq	r2, r3
   1b598:	umull	r0, r1, r2, r3
   1b59c:	cmp	r0, #0
   1b5a0:	cmpge	r1, #0
   1b5a4:	bne	1b5b8 <__assert_fail@plt+0x9e64>
   1b5a8:	mov	r1, r3
   1b5ac:	mov	r0, r2
   1b5b0:	bl	11340 <calloc@plt>
   1b5b4:	pop	{r4, pc}
   1b5b8:	bl	115e0 <__errno_location@plt>
   1b5bc:	mov	r3, #12
   1b5c0:	str	r3, [r0]
   1b5c4:	mov	r0, #0
   1b5c8:	pop	{r4, pc}
   1b5cc:	push	{r4, lr}
   1b5d0:	cmp	r0, #0
   1b5d4:	moveq	r0, #1
   1b5d8:	cmp	r0, #0
   1b5dc:	blt	1b5e8 <__assert_fail@plt+0x9e94>
   1b5e0:	bl	1152c <malloc@plt>
   1b5e4:	pop	{r4, pc}
   1b5e8:	bl	115e0 <__errno_location@plt>
   1b5ec:	mov	r3, #12
   1b5f0:	str	r3, [r0]
   1b5f4:	mov	r0, #0
   1b5f8:	pop	{r4, pc}
   1b5fc:	push	{r4, lr}
   1b600:	cmp	r0, #0
   1b604:	beq	1b620 <__assert_fail@plt+0x9ecc>
   1b608:	cmp	r1, #0
   1b60c:	beq	1b62c <__assert_fail@plt+0x9ed8>
   1b610:	cmp	r1, #0
   1b614:	blt	1b638 <__assert_fail@plt+0x9ee4>
   1b618:	bl	11478 <realloc@plt>
   1b61c:	pop	{r4, pc}
   1b620:	mov	r0, r1
   1b624:	bl	1b5cc <__assert_fail@plt+0x9e78>
   1b628:	pop	{r4, pc}
   1b62c:	bl	178e8 <__assert_fail@plt+0x6194>
   1b630:	mov	r0, #0
   1b634:	pop	{r4, pc}
   1b638:	bl	115e0 <__errno_location@plt>
   1b63c:	mov	r3, #12
   1b640:	str	r3, [r0]
   1b644:	mov	r0, #0
   1b648:	pop	{r4, pc}
   1b64c:	cmp	r0, r1
   1b650:	beq	1b6a8 <__assert_fail@plt+0x9f54>
   1b654:	push	{lr}		; (str lr, [sp, #-4]!)
   1b658:	sub	ip, r0, #1
   1b65c:	sub	r1, r1, #1
   1b660:	ldrb	r3, [ip, #1]!
   1b664:	sub	r2, r3, #65	; 0x41
   1b668:	cmp	r2, #25
   1b66c:	addls	r3, r3, #32
   1b670:	uxtb	r2, r3
   1b674:	ldrb	r0, [r1, #1]!
   1b678:	sub	lr, r0, #65	; 0x41
   1b67c:	cmp	lr, #25
   1b680:	addls	r0, r0, #32
   1b684:	uxtb	lr, r0
   1b688:	cmp	r2, #0
   1b68c:	beq	1b698 <__assert_fail@plt+0x9f44>
   1b690:	cmp	r2, lr
   1b694:	beq	1b660 <__assert_fail@plt+0x9f0c>
   1b698:	uxtb	r3, r3
   1b69c:	uxtb	r0, r0
   1b6a0:	sub	r0, r3, r0
   1b6a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1b6a8:	mov	r0, #0
   1b6ac:	bx	lr
   1b6b0:	push	{r4, r5, r6, lr}
   1b6b4:	mov	r5, r0
   1b6b8:	bl	11508 <__fpending@plt>
   1b6bc:	mov	r6, r0
   1b6c0:	ldr	r4, [r5]
   1b6c4:	and	r4, r4, #32
   1b6c8:	mov	r0, r5
   1b6cc:	bl	1b728 <__assert_fail@plt+0x9fd4>
   1b6d0:	cmp	r4, #0
   1b6d4:	bne	1b6fc <__assert_fail@plt+0x9fa8>
   1b6d8:	cmp	r0, #0
   1b6dc:	popeq	{r4, r5, r6, pc}
   1b6e0:	cmp	r6, #0
   1b6e4:	bne	1b718 <__assert_fail@plt+0x9fc4>
   1b6e8:	bl	115e0 <__errno_location@plt>
   1b6ec:	ldr	r0, [r0]
   1b6f0:	subs	r0, r0, #9
   1b6f4:	mvnne	r0, #0
   1b6f8:	pop	{r4, r5, r6, pc}
   1b6fc:	cmp	r0, #0
   1b700:	bne	1b720 <__assert_fail@plt+0x9fcc>
   1b704:	bl	115e0 <__errno_location@plt>
   1b708:	mov	r3, #0
   1b70c:	str	r3, [r0]
   1b710:	mvn	r0, #0
   1b714:	pop	{r4, r5, r6, pc}
   1b718:	mvn	r0, #0
   1b71c:	pop	{r4, r5, r6, pc}
   1b720:	mvn	r0, #0
   1b724:	pop	{r4, r5, r6, pc}
   1b728:	push	{r4, r5, r6, lr}
   1b72c:	sub	sp, sp, #8
   1b730:	mov	r4, r0
   1b734:	bl	11640 <fileno@plt>
   1b738:	cmp	r0, #0
   1b73c:	blt	1b7b4 <__assert_fail@plt+0xa060>
   1b740:	mov	r0, r4
   1b744:	bl	11550 <__freading@plt>
   1b748:	cmp	r0, #0
   1b74c:	beq	1b780 <__assert_fail@plt+0xa02c>
   1b750:	mov	r0, r4
   1b754:	bl	11640 <fileno@plt>
   1b758:	mov	r3, #1
   1b75c:	str	r3, [sp]
   1b760:	mov	r2, #0
   1b764:	mov	r3, #0
   1b768:	bl	114e4 <lseek64@plt>
   1b76c:	mvn	r2, #0
   1b770:	mvn	r3, #0
   1b774:	cmp	r1, r3
   1b778:	cmpeq	r0, r2
   1b77c:	beq	1b7c0 <__assert_fail@plt+0xa06c>
   1b780:	mov	r0, r4
   1b784:	bl	1b7d0 <__assert_fail@plt+0xa07c>
   1b788:	cmp	r0, #0
   1b78c:	beq	1b7c0 <__assert_fail@plt+0xa06c>
   1b790:	bl	115e0 <__errno_location@plt>
   1b794:	mov	r5, r0
   1b798:	ldr	r6, [r0]
   1b79c:	mov	r0, r4
   1b7a0:	bl	11664 <fclose@plt>
   1b7a4:	cmp	r6, #0
   1b7a8:	strne	r6, [r5]
   1b7ac:	mvnne	r0, #0
   1b7b0:	b	1b7c8 <__assert_fail@plt+0xa074>
   1b7b4:	mov	r0, r4
   1b7b8:	bl	11664 <fclose@plt>
   1b7bc:	b	1b7c8 <__assert_fail@plt+0xa074>
   1b7c0:	mov	r0, r4
   1b7c4:	bl	11664 <fclose@plt>
   1b7c8:	add	sp, sp, #8
   1b7cc:	pop	{r4, r5, r6, pc}
   1b7d0:	push	{r4, lr}
   1b7d4:	sub	sp, sp, #8
   1b7d8:	subs	r4, r0, #0
   1b7dc:	beq	1b7f0 <__assert_fail@plt+0xa09c>
   1b7e0:	mov	r0, r4
   1b7e4:	bl	11550 <__freading@plt>
   1b7e8:	cmp	r0, #0
   1b7ec:	bne	1b800 <__assert_fail@plt+0xa0ac>
   1b7f0:	mov	r0, r4
   1b7f4:	bl	11394 <fflush@plt>
   1b7f8:	add	sp, sp, #8
   1b7fc:	pop	{r4, pc}
   1b800:	ldr	r3, [r4]
   1b804:	tst	r3, #256	; 0x100
   1b808:	bne	1b818 <__assert_fail@plt+0xa0c4>
   1b80c:	mov	r0, r4
   1b810:	bl	11394 <fflush@plt>
   1b814:	b	1b7f8 <__assert_fail@plt+0xa0a4>
   1b818:	mov	r3, #1
   1b81c:	str	r3, [sp]
   1b820:	mov	r2, #0
   1b824:	mov	r3, #0
   1b828:	mov	r0, r4
   1b82c:	bl	1b834 <__assert_fail@plt+0xa0e0>
   1b830:	b	1b80c <__assert_fail@plt+0xa0b8>
   1b834:	push	{r4, r5, r6, r7, lr}
   1b838:	sub	sp, sp, #12
   1b83c:	mov	r4, r0
   1b840:	mov	r6, r2
   1b844:	mov	r7, r3
   1b848:	ldr	r5, [sp, #32]
   1b84c:	ldr	r2, [r0, #8]
   1b850:	ldr	r3, [r0, #4]
   1b854:	cmp	r2, r3
   1b858:	beq	1b878 <__assert_fail@plt+0xa124>
   1b85c:	str	r5, [sp]
   1b860:	mov	r2, r6
   1b864:	mov	r3, r7
   1b868:	mov	r0, r4
   1b86c:	bl	1167c <fseeko64@plt>
   1b870:	add	sp, sp, #12
   1b874:	pop	{r4, r5, r6, r7, pc}
   1b878:	ldr	r2, [r0, #20]
   1b87c:	ldr	r3, [r0, #16]
   1b880:	cmp	r2, r3
   1b884:	bne	1b85c <__assert_fail@plt+0xa108>
   1b888:	ldr	r3, [r0, #36]	; 0x24
   1b88c:	cmp	r3, #0
   1b890:	bne	1b85c <__assert_fail@plt+0xa108>
   1b894:	bl	11640 <fileno@plt>
   1b898:	str	r5, [sp]
   1b89c:	mov	r2, r6
   1b8a0:	mov	r3, r7
   1b8a4:	bl	114e4 <lseek64@plt>
   1b8a8:	mvn	r2, #0
   1b8ac:	mvn	r3, #0
   1b8b0:	cmp	r1, r3
   1b8b4:	cmpeq	r0, r2
   1b8b8:	beq	1b8d4 <__assert_fail@plt+0xa180>
   1b8bc:	ldr	r3, [r4]
   1b8c0:	bic	r3, r3, #16
   1b8c4:	str	r3, [r4]
   1b8c8:	strd	r0, [r4, #80]	; 0x50
   1b8cc:	mov	r0, #0
   1b8d0:	b	1b870 <__assert_fail@plt+0xa11c>
   1b8d4:	mvn	r0, #0
   1b8d8:	b	1b870 <__assert_fail@plt+0xa11c>
   1b8dc:	push	{r4, lr}
   1b8e0:	mov	r0, #14
   1b8e4:	bl	116dc <nl_langinfo@plt>
   1b8e8:	cmp	r0, #0
   1b8ec:	beq	1b904 <__assert_fail@plt+0xa1b0>
   1b8f0:	ldrb	r2, [r0]
   1b8f4:	ldr	r3, [pc, #16]	; 1b90c <__assert_fail@plt+0xa1b8>
   1b8f8:	cmp	r2, #0
   1b8fc:	moveq	r0, r3
   1b900:	pop	{r4, pc}
   1b904:	ldr	r0, [pc]	; 1b90c <__assert_fail@plt+0xa1b8>
   1b908:	pop	{r4, pc}
   1b90c:	andeq	r1, r2, r4, ror fp
   1b910:	push	{r4, lr}
   1b914:	mov	r4, r0
   1b918:	bl	113b8 <wcwidth@plt>
   1b91c:	cmp	r0, #0
   1b920:	popge	{r4, pc}
   1b924:	mov	r0, r4
   1b928:	bl	114a8 <iswcntrl@plt>
   1b92c:	clz	r0, r0
   1b930:	lsr	r0, r0, #5
   1b934:	pop	{r4, pc}
   1b938:	push	{r4, r5, r6, lr}
   1b93c:	mov	r5, r0
   1b940:	mov	r4, r1
   1b944:	mov	r3, r1
   1b948:	ldr	r1, [r3], #16
   1b94c:	cmp	r1, r3
   1b950:	strne	r1, [r0]
   1b954:	beq	1b978 <__assert_fail@plt+0xa224>
   1b958:	ldr	r3, [r4, #4]
   1b95c:	str	r3, [r5, #4]
   1b960:	ldrb	r3, [r4, #8]
   1b964:	strb	r3, [r5, #8]
   1b968:	cmp	r3, #0
   1b96c:	ldrne	r3, [r4, #12]
   1b970:	strne	r3, [r5, #12]
   1b974:	pop	{r4, r5, r6, pc}
   1b978:	add	r6, r0, #16
   1b97c:	ldr	r2, [r4, #4]
   1b980:	mov	r0, r6
   1b984:	bl	113f4 <memcpy@plt>
   1b988:	str	r6, [r5]
   1b98c:	b	1b958 <__assert_fail@plt+0xa204>
   1b990:	lsr	r2, r0, #5
   1b994:	and	r0, r0, #31
   1b998:	ldr	r3, [pc, #12]	; 1b9ac <__assert_fail@plt+0xa258>
   1b99c:	ldr	r3, [r3, r2, lsl #2]
   1b9a0:	lsr	r0, r3, r0
   1b9a4:	and	r0, r0, #1
   1b9a8:	bx	lr
   1b9ac:	andeq	r1, r2, ip, ror fp
   1b9b0:	push	{r4, r5, r6, r7, lr}
   1b9b4:	sub	sp, sp, #12
   1b9b8:	mov	r7, r1
   1b9bc:	mov	r5, r2
   1b9c0:	subs	r6, r0, #0
   1b9c4:	addeq	r6, sp, #4
   1b9c8:	mov	r0, r6
   1b9cc:	bl	11514 <mbrtowc@plt>
   1b9d0:	mov	r4, r0
   1b9d4:	cmp	r5, #0
   1b9d8:	cmnne	r0, #3
   1b9dc:	bhi	1b9ec <__assert_fail@plt+0xa298>
   1b9e0:	mov	r0, r4
   1b9e4:	add	sp, sp, #12
   1b9e8:	pop	{r4, r5, r6, r7, pc}
   1b9ec:	mov	r0, #0
   1b9f0:	bl	1d6e0 <__assert_fail@plt+0xbf8c>
   1b9f4:	cmp	r0, #0
   1b9f8:	ldrbeq	r3, [r7]
   1b9fc:	streq	r3, [r6]
   1ba00:	moveq	r4, #1
   1ba04:	b	1b9e0 <__assert_fail@plt+0xa28c>
   1ba08:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ba0c:	add	fp, sp, #28
   1ba10:	mov	r7, r3
   1ba14:	lsr	r8, r2, #30
   1ba18:	lsl	r3, r2, #2
   1ba1c:	adds	r8, r8, #0
   1ba20:	movne	r8, #1
   1ba24:	cmp	r3, #0
   1ba28:	movlt	r8, #1
   1ba2c:	cmp	r8, #0
   1ba30:	movne	r8, #0
   1ba34:	bne	1bb54 <__assert_fail@plt+0xa400>
   1ba38:	mov	r5, r0
   1ba3c:	mov	r4, r1
   1ba40:	mov	r6, r2
   1ba44:	mov	r0, r3
   1ba48:	cmp	r3, #4016	; 0xfb0
   1ba4c:	bhi	1ba90 <__assert_fail@plt+0xa33c>
   1ba50:	add	r3, r3, #29
   1ba54:	bic	r3, r3, #7
   1ba58:	sub	sp, sp, r3
   1ba5c:	add	r0, sp, #15
   1ba60:	bic	r0, r0, #15
   1ba64:	cmp	r0, #0
   1ba68:	beq	1bb54 <__assert_fail@plt+0xa400>
   1ba6c:	mov	r3, #1
   1ba70:	str	r3, [r0, #4]
   1ba74:	cmp	r6, #2
   1ba78:	bls	1baf4 <__assert_fail@plt+0xa3a0>
   1ba7c:	mov	r8, r4
   1ba80:	add	lr, r0, #8
   1ba84:	mov	r3, #0
   1ba88:	mov	ip, #2
   1ba8c:	b	1bab4 <__assert_fail@plt+0xa360>
   1ba90:	bl	1d740 <__assert_fail@plt+0xbfec>
   1ba94:	b	1ba64 <__assert_fail@plt+0xa310>
   1ba98:	add	r3, r3, #1
   1ba9c:	sub	r2, ip, r3
   1baa0:	str	r2, [lr]
   1baa4:	add	ip, ip, #1
   1baa8:	add	lr, lr, #4
   1baac:	cmp	r6, ip
   1bab0:	beq	1baf4 <__assert_fail@plt+0xa3a0>
   1bab4:	ldrb	r1, [r8, #1]!
   1bab8:	ldrb	r2, [r4, r3]
   1babc:	cmp	r2, r1
   1bac0:	beq	1ba98 <__assert_fail@plt+0xa344>
   1bac4:	cmp	r3, #0
   1bac8:	beq	1bae8 <__assert_fail@plt+0xa394>
   1bacc:	ldr	r2, [r0, r3, lsl #2]
   1bad0:	sub	r3, r3, r2
   1bad4:	ldrb	r2, [r4, r3]
   1bad8:	cmp	r2, r1
   1badc:	beq	1ba98 <__assert_fail@plt+0xa344>
   1bae0:	cmp	r3, #0
   1bae4:	bne	1bacc <__assert_fail@plt+0xa378>
   1bae8:	str	ip, [lr]
   1baec:	mov	r3, #0
   1baf0:	b	1baa4 <__assert_fail@plt+0xa350>
   1baf4:	mov	r3, #0
   1baf8:	str	r3, [r7]
   1bafc:	mov	r1, r5
   1bb00:	b	1bb14 <__assert_fail@plt+0xa3c0>
   1bb04:	add	r3, r3, #1
   1bb08:	add	r1, r1, #1
   1bb0c:	cmp	r6, r3
   1bb10:	beq	1bb48 <__assert_fail@plt+0xa3f4>
   1bb14:	ldrb	r2, [r1]
   1bb18:	cmp	r2, #0
   1bb1c:	beq	1bb4c <__assert_fail@plt+0xa3f8>
   1bb20:	ldrb	ip, [r4, r3]
   1bb24:	cmp	ip, r2
   1bb28:	beq	1bb04 <__assert_fail@plt+0xa3b0>
   1bb2c:	cmp	r3, #0
   1bb30:	ldrne	r2, [r0, r3, lsl #2]
   1bb34:	addne	r5, r5, r2
   1bb38:	subne	r3, r3, r2
   1bb3c:	addeq	r5, r5, #1
   1bb40:	addeq	r1, r1, #1
   1bb44:	b	1bb14 <__assert_fail@plt+0xa3c0>
   1bb48:	str	r5, [r7]
   1bb4c:	bl	1d788 <__assert_fail@plt+0xc034>
   1bb50:	mov	r8, #1
   1bb54:	mov	r0, r8
   1bb58:	sub	sp, fp, #28
   1bb5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb64:	add	fp, sp, #32
   1bb68:	sub	sp, sp, #140	; 0x8c
   1bb6c:	str	r0, [fp, #-172]	; 0xffffff54
   1bb70:	mov	r4, r1
   1bb74:	str	r2, [fp, #-168]	; 0xffffff58
   1bb78:	mov	r0, r1
   1bb7c:	bl	1d7b0 <__assert_fail@plt+0xc05c>
   1bb80:	str	r0, [fp, #-160]	; 0xffffff60
   1bb84:	mov	r2, #44	; 0x2c
   1bb88:	umull	r2, r3, r0, r2
   1bb8c:	adds	r3, r3, #0
   1bb90:	movne	r3, #1
   1bb94:	mov	r1, r3
   1bb98:	cmp	r2, #0
   1bb9c:	movlt	r1, #1
   1bba0:	str	r1, [fp, #-152]	; 0xffffff68
   1bba4:	cmp	r1, #0
   1bba8:	bne	1c40c <__assert_fail@plt+0xacb8>
   1bbac:	mov	ip, r0
   1bbb0:	mov	r0, #44	; 0x2c
   1bbb4:	mul	r0, r0, ip
   1bbb8:	cmp	r0, #4016	; 0xfb0
   1bbbc:	bhi	1bc14 <__assert_fail@plt+0xa4c0>
   1bbc0:	add	r3, r0, #29
   1bbc4:	bic	r3, r3, #7
   1bbc8:	sub	sp, sp, r3
   1bbcc:	add	r3, sp, #15
   1bbd0:	bic	r9, r3, #15
   1bbd4:	cmp	r9, #0
   1bbd8:	beq	1c418 <__assert_fail@plt+0xacc4>
   1bbdc:	ldr	r3, [fp, #-160]	; 0xffffff60
   1bbe0:	add	sl, r3, r3, lsl #2
   1bbe4:	add	sl, r9, sl, lsl #3
   1bbe8:	str	r4, [fp, #-76]	; 0xffffffb4
   1bbec:	mov	r3, #0
   1bbf0:	strb	r3, [fp, #-92]	; 0xffffffa4
   1bbf4:	str	r3, [fp, #-88]	; 0xffffffa8
   1bbf8:	str	r3, [fp, #-84]	; 0xffffffac
   1bbfc:	strb	r3, [fp, #-80]	; 0xffffffb0
   1bc00:	add	r4, r9, #16
   1bc04:	mov	r5, #1
   1bc08:	mov	r6, r3
   1bc0c:	sub	r7, fp, #60	; 0x3c
   1bc10:	b	1bd1c <__assert_fail@plt+0xa5c8>
   1bc14:	bl	1d740 <__assert_fail@plt+0xbfec>
   1bc18:	mov	r9, r0
   1bc1c:	b	1bbd4 <__assert_fail@plt+0xa480>
   1bc20:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bc24:	mov	r1, r7
   1bc28:	mov	r0, r4
   1bc2c:	bl	113f4 <memcpy@plt>
   1bc30:	str	r4, [r4, #-16]
   1bc34:	b	1bcec <__assert_fail@plt+0xa598>
   1bc38:	sub	r0, fp, #88	; 0x58
   1bc3c:	bl	1140c <mbsinit@plt>
   1bc40:	cmp	r0, #0
   1bc44:	beq	1bd6c <__assert_fail@plt+0xa618>
   1bc48:	strb	r5, [fp, #-92]	; 0xffffffa4
   1bc4c:	ldr	r8, [fp, #-76]	; 0xffffffb4
   1bc50:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1bc54:	mov	r1, r0
   1bc58:	mov	r0, r8
   1bc5c:	bl	1a474 <__assert_fail@plt+0x8d20>
   1bc60:	sub	r3, fp, #88	; 0x58
   1bc64:	mov	r2, r0
   1bc68:	mov	r1, r8
   1bc6c:	sub	r0, fp, #64	; 0x40
   1bc70:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1bc74:	str	r0, [fp, #-72]	; 0xffffffb8
   1bc78:	cmn	r0, #1
   1bc7c:	streq	r5, [fp, #-72]	; 0xffffffb8
   1bc80:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   1bc84:	beq	1bccc <__assert_fail@plt+0xa578>
   1bc88:	cmn	r0, #2
   1bc8c:	beq	1bd80 <__assert_fail@plt+0xa62c>
   1bc90:	cmp	r0, #0
   1bc94:	bne	1bcb8 <__assert_fail@plt+0xa564>
   1bc98:	str	r5, [fp, #-72]	; 0xffffffb8
   1bc9c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bca0:	ldrb	r3, [r3]
   1bca4:	cmp	r3, #0
   1bca8:	bne	1bd94 <__assert_fail@plt+0xa640>
   1bcac:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1bcb0:	cmp	r3, #0
   1bcb4:	bne	1bda8 <__assert_fail@plt+0xa654>
   1bcb8:	strb	r5, [fp, #-68]	; 0xffffffbc
   1bcbc:	sub	r0, fp, #88	; 0x58
   1bcc0:	bl	1140c <mbsinit@plt>
   1bcc4:	cmp	r0, #0
   1bcc8:	strbne	r6, [fp, #-92]	; 0xffffffa4
   1bccc:	strb	r5, [fp, #-80]	; 0xffffffb0
   1bcd0:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1bcd4:	cmp	r3, #0
   1bcd8:	bne	1bdbc <__assert_fail@plt+0xa668>
   1bcdc:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bce0:	cmp	r3, r7
   1bce4:	strne	r3, [r4, #-16]
   1bce8:	beq	1bc20 <__assert_fail@plt+0xa4cc>
   1bcec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1bcf0:	str	r2, [r4, #-12]
   1bcf4:	ldrb	r3, [fp, #-68]	; 0xffffffbc
   1bcf8:	strb	r3, [r4, #-8]
   1bcfc:	cmp	r3, #0
   1bd00:	ldrne	r3, [fp, #-64]	; 0xffffffc0
   1bd04:	strne	r3, [r4, #-4]
   1bd08:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1bd0c:	add	r3, r3, r2
   1bd10:	str	r3, [fp, #-76]	; 0xffffffb4
   1bd14:	strb	r6, [fp, #-80]	; 0xffffffb0
   1bd18:	add	r4, r4, #40	; 0x28
   1bd1c:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   1bd20:	cmp	r3, #0
   1bd24:	bne	1bcd0 <__assert_fail@plt+0xa57c>
   1bd28:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1bd2c:	cmp	r3, #0
   1bd30:	bne	1bc4c <__assert_fail@plt+0xa4f8>
   1bd34:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1bd38:	ldrb	r3, [r1]
   1bd3c:	lsr	r2, r3, #5
   1bd40:	and	r3, r3, #31
   1bd44:	ldr	r0, [pc, #1752]	; 1c424 <__assert_fail@plt+0xacd0>
   1bd48:	ldr	r2, [r0, r2, lsl #2]
   1bd4c:	lsr	r3, r2, r3
   1bd50:	tst	r3, #1
   1bd54:	beq	1bc38 <__assert_fail@plt+0xa4e4>
   1bd58:	str	r5, [fp, #-72]	; 0xffffffb8
   1bd5c:	ldrb	r3, [r1]
   1bd60:	str	r3, [fp, #-64]	; 0xffffffc0
   1bd64:	strb	r5, [fp, #-68]	; 0xffffffbc
   1bd68:	b	1bccc <__assert_fail@plt+0xa578>
   1bd6c:	ldr	r3, [pc, #1716]	; 1c428 <__assert_fail@plt+0xacd4>
   1bd70:	mov	r2, #143	; 0x8f
   1bd74:	ldr	r1, [pc, #1712]	; 1c42c <__assert_fail@plt+0xacd8>
   1bd78:	ldr	r0, [pc, #1712]	; 1c430 <__assert_fail@plt+0xacdc>
   1bd7c:	bl	11754 <__assert_fail@plt>
   1bd80:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1bd84:	bl	115b0 <strlen@plt>
   1bd88:	str	r0, [fp, #-72]	; 0xffffffb8
   1bd8c:	strb	r6, [fp, #-68]	; 0xffffffbc
   1bd90:	b	1bccc <__assert_fail@plt+0xa578>
   1bd94:	ldr	r3, [pc, #1676]	; 1c428 <__assert_fail@plt+0xacd4>
   1bd98:	mov	r2, #171	; 0xab
   1bd9c:	ldr	r1, [pc, #1672]	; 1c42c <__assert_fail@plt+0xacd8>
   1bda0:	ldr	r0, [pc, #1676]	; 1c434 <__assert_fail@plt+0xace0>
   1bda4:	bl	11754 <__assert_fail@plt>
   1bda8:	ldr	r3, [pc, #1656]	; 1c428 <__assert_fail@plt+0xacd4>
   1bdac:	mov	r2, #172	; 0xac
   1bdb0:	ldr	r1, [pc, #1652]	; 1c42c <__assert_fail@plt+0xacd8>
   1bdb4:	ldr	r0, [pc, #1660]	; 1c438 <__assert_fail@plt+0xace4>
   1bdb8:	bl	11754 <__assert_fail@plt>
   1bdbc:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1bdc0:	cmp	r2, #0
   1bdc4:	bne	1bcdc <__assert_fail@plt+0xa588>
   1bdc8:	str	r3, [fp, #-164]	; 0xffffff5c
   1bdcc:	mov	r3, #1
   1bdd0:	str	r3, [sl, #4]
   1bdd4:	ldr	r3, [fp, #-160]	; 0xffffff60
   1bdd8:	cmp	r3, #2
   1bddc:	bls	1bec0 <__assert_fail@plt+0xa76c>
   1bde0:	mov	r8, r9
   1bde4:	add	r3, sl, #8
   1bde8:	str	r3, [fp, #-156]	; 0xffffff64
   1bdec:	mov	r4, #0
   1bdf0:	mov	r7, #2
   1bdf4:	b	1bea8 <__assert_fail@plt+0xa754>
   1bdf8:	ldr	r2, [r5, #44]	; 0x2c
   1bdfc:	add	r3, r4, r4, lsl #2
   1be00:	add	r1, r9, r3, lsl #3
   1be04:	ldr	r1, [r1, #4]
   1be08:	cmp	r2, r1
   1be0c:	ldrne	r0, [fp, #-152]	; 0xffffff68
   1be10:	beq	1be60 <__assert_fail@plt+0xa70c>
   1be14:	cmp	r0, #0
   1be18:	bne	1be78 <__assert_fail@plt+0xa724>
   1be1c:	cmp	r4, #0
   1be20:	beq	1beb4 <__assert_fail@plt+0xa760>
   1be24:	ldr	r3, [sl, r4, lsl #2]
   1be28:	sub	r4, r4, r3
   1be2c:	cmp	r6, #0
   1be30:	beq	1bdf8 <__assert_fail@plt+0xa6a4>
   1be34:	add	r3, r4, r4, lsl #2
   1be38:	add	r3, r9, r3, lsl #3
   1be3c:	ldrb	r2, [r3, #8]
   1be40:	cmp	r2, #0
   1be44:	beq	1bdf8 <__assert_fail@plt+0xa6a4>
   1be48:	ldr	r0, [r5, #52]	; 0x34
   1be4c:	ldr	r3, [r3, #12]
   1be50:	cmp	r0, r3
   1be54:	movne	r0, #0
   1be58:	moveq	r0, #1
   1be5c:	b	1be14 <__assert_fail@plt+0xa6c0>
   1be60:	ldr	r1, [r9, r3, lsl #3]
   1be64:	ldr	r0, [r5, #40]	; 0x28
   1be68:	bl	11418 <memcmp@plt>
   1be6c:	clz	r0, r0
   1be70:	lsr	r0, r0, #5
   1be74:	b	1be14 <__assert_fail@plt+0xa6c0>
   1be78:	add	r4, r4, #1
   1be7c:	sub	r3, r7, r4
   1be80:	ldr	r2, [fp, #-156]	; 0xffffff64
   1be84:	str	r3, [r2]
   1be88:	add	r7, r7, #1
   1be8c:	add	r8, r8, #40	; 0x28
   1be90:	ldr	r3, [fp, #-156]	; 0xffffff64
   1be94:	add	r3, r3, #4
   1be98:	str	r3, [fp, #-156]	; 0xffffff64
   1be9c:	ldr	r3, [fp, #-160]	; 0xffffff60
   1bea0:	cmp	r3, r7
   1bea4:	beq	1bec0 <__assert_fail@plt+0xa76c>
   1bea8:	mov	r5, r8
   1beac:	ldrb	r6, [r8, #48]	; 0x30
   1beb0:	b	1be2c <__assert_fail@plt+0xa6d8>
   1beb4:	ldr	r3, [fp, #-156]	; 0xffffff64
   1beb8:	str	r7, [r3]
   1bebc:	b	1be88 <__assert_fail@plt+0xa734>
   1bec0:	mov	r8, #0
   1bec4:	ldr	r3, [fp, #-168]	; 0xffffff58
   1bec8:	str	r8, [r3]
   1becc:	ldr	r3, [fp, #-172]	; 0xffffff54
   1bed0:	str	r3, [fp, #-132]	; 0xffffff7c
   1bed4:	strb	r8, [fp, #-148]	; 0xffffff6c
   1bed8:	str	r8, [fp, #-144]	; 0xffffff70
   1bedc:	str	r8, [fp, #-140]	; 0xffffff74
   1bee0:	strb	r8, [fp, #-136]	; 0xffffff78
   1bee4:	str	r3, [fp, #-76]	; 0xffffffb4
   1bee8:	strb	r8, [fp, #-92]	; 0xffffffa4
   1beec:	str	r8, [fp, #-88]	; 0xffffffa8
   1bef0:	str	r8, [fp, #-84]	; 0xffffffac
   1bef4:	strb	r8, [fp, #-80]	; 0xffffffb0
   1bef8:	mov	r5, #1
   1befc:	mov	r6, r8
   1bf00:	ldr	r7, [pc, #1308]	; 1c424 <__assert_fail@plt+0xacd0>
   1bf04:	str	sl, [fp, #-156]	; 0xffffff64
   1bf08:	b	1c338 <__assert_fail@plt+0xabe4>
   1bf0c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1bf10:	ldr	r0, [r3]
   1bf14:	bl	11418 <memcmp@plt>
   1bf18:	clz	r0, r0
   1bf1c:	lsr	r0, r0, #5
   1bf20:	b	1c30c <__assert_fail@plt+0xabb8>
   1bf24:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1bf28:	ldr	r2, [fp, #-168]	; 0xffffff58
   1bf2c:	str	r3, [r2]
   1bf30:	mov	r0, r9
   1bf34:	bl	1d788 <__assert_fail@plt+0xc034>
   1bf38:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1bf3c:	sub	sp, fp, #32
   1bf40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bf44:	cmp	r8, #0
   1bf48:	beq	1c0d0 <__assert_fail@plt+0xa97c>
   1bf4c:	ldr	r3, [fp, #-156]	; 0xffffff64
   1bf50:	ldr	r4, [r3, r8, lsl #2]
   1bf54:	sub	r8, r8, r4
   1bf58:	cmp	r4, #0
   1bf5c:	bne	1c024 <__assert_fail@plt+0xa8d0>
   1bf60:	b	1c338 <__assert_fail@plt+0xabe4>
   1bf64:	sub	r0, fp, #144	; 0x90
   1bf68:	bl	1140c <mbsinit@plt>
   1bf6c:	cmp	r0, #0
   1bf70:	beq	1c070 <__assert_fail@plt+0xa91c>
   1bf74:	strb	r5, [fp, #-148]	; 0xffffff6c
   1bf78:	ldr	sl, [fp, #-132]	; 0xffffff7c
   1bf7c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1bf80:	mov	r1, r0
   1bf84:	mov	r0, sl
   1bf88:	bl	1a474 <__assert_fail@plt+0x8d20>
   1bf8c:	sub	r3, fp, #144	; 0x90
   1bf90:	mov	r2, r0
   1bf94:	mov	r1, sl
   1bf98:	sub	r0, fp, #120	; 0x78
   1bf9c:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1bfa0:	str	r0, [fp, #-128]	; 0xffffff80
   1bfa4:	cmn	r0, #1
   1bfa8:	streq	r5, [fp, #-128]	; 0xffffff80
   1bfac:	strbeq	r6, [fp, #-124]	; 0xffffff84
   1bfb0:	beq	1bff8 <__assert_fail@plt+0xa8a4>
   1bfb4:	cmn	r0, #2
   1bfb8:	beq	1c084 <__assert_fail@plt+0xa930>
   1bfbc:	cmp	r0, #0
   1bfc0:	bne	1bfe4 <__assert_fail@plt+0xa890>
   1bfc4:	str	r5, [fp, #-128]	; 0xffffff80
   1bfc8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1bfcc:	ldrb	r3, [r3]
   1bfd0:	cmp	r3, #0
   1bfd4:	bne	1c098 <__assert_fail@plt+0xa944>
   1bfd8:	ldr	r3, [fp, #-120]	; 0xffffff88
   1bfdc:	cmp	r3, #0
   1bfe0:	bne	1c0ac <__assert_fail@plt+0xa958>
   1bfe4:	strb	r5, [fp, #-124]	; 0xffffff84
   1bfe8:	sub	r0, fp, #144	; 0x90
   1bfec:	bl	1140c <mbsinit@plt>
   1bff0:	cmp	r0, #0
   1bff4:	strbne	r6, [fp, #-148]	; 0xffffff6c
   1bff8:	strb	r5, [fp, #-136]	; 0xffffff78
   1bffc:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1c000:	cmp	r3, #0
   1c004:	bne	1c0c0 <__assert_fail@plt+0xa96c>
   1c008:	ldr	r2, [fp, #-128]	; 0xffffff80
   1c00c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1c010:	add	r3, r3, r2
   1c014:	str	r3, [fp, #-132]	; 0xffffff7c
   1c018:	strb	r6, [fp, #-136]	; 0xffffff78
   1c01c:	subs	r4, r4, #1
   1c020:	beq	1c338 <__assert_fail@plt+0xabe4>
   1c024:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1c028:	cmp	r3, #0
   1c02c:	bne	1bffc <__assert_fail@plt+0xa8a8>
   1c030:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1c034:	cmp	r3, #0
   1c038:	bne	1bf78 <__assert_fail@plt+0xa824>
   1c03c:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1c040:	ldrb	r3, [r1]
   1c044:	lsr	r2, r3, #5
   1c048:	and	r3, r3, #31
   1c04c:	ldr	r2, [r7, r2, lsl #2]
   1c050:	lsr	r3, r2, r3
   1c054:	tst	r3, #1
   1c058:	beq	1bf64 <__assert_fail@plt+0xa810>
   1c05c:	str	r5, [fp, #-128]	; 0xffffff80
   1c060:	ldrb	r3, [r1]
   1c064:	str	r3, [fp, #-120]	; 0xffffff88
   1c068:	strb	r5, [fp, #-124]	; 0xffffff84
   1c06c:	b	1bff8 <__assert_fail@plt+0xa8a4>
   1c070:	ldr	r3, [pc, #944]	; 1c428 <__assert_fail@plt+0xacd4>
   1c074:	mov	r2, #143	; 0x8f
   1c078:	ldr	r1, [pc, #940]	; 1c42c <__assert_fail@plt+0xacd8>
   1c07c:	ldr	r0, [pc, #940]	; 1c430 <__assert_fail@plt+0xacdc>
   1c080:	bl	11754 <__assert_fail@plt>
   1c084:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1c088:	bl	115b0 <strlen@plt>
   1c08c:	str	r0, [fp, #-128]	; 0xffffff80
   1c090:	strb	r6, [fp, #-124]	; 0xffffff84
   1c094:	b	1bff8 <__assert_fail@plt+0xa8a4>
   1c098:	ldr	r3, [pc, #904]	; 1c428 <__assert_fail@plt+0xacd4>
   1c09c:	mov	r2, #171	; 0xab
   1c0a0:	ldr	r1, [pc, #900]	; 1c42c <__assert_fail@plt+0xacd8>
   1c0a4:	ldr	r0, [pc, #904]	; 1c434 <__assert_fail@plt+0xace0>
   1c0a8:	bl	11754 <__assert_fail@plt>
   1c0ac:	ldr	r3, [pc, #884]	; 1c428 <__assert_fail@plt+0xacd4>
   1c0b0:	mov	r2, #172	; 0xac
   1c0b4:	ldr	r1, [pc, #880]	; 1c42c <__assert_fail@plt+0xacd8>
   1c0b8:	ldr	r0, [pc, #888]	; 1c438 <__assert_fail@plt+0xace4>
   1c0bc:	bl	11754 <__assert_fail@plt>
   1c0c0:	ldr	r3, [fp, #-120]	; 0xffffff88
   1c0c4:	cmp	r3, #0
   1c0c8:	bne	1c008 <__assert_fail@plt+0xa8b4>
   1c0cc:	bl	11748 <abort@plt>
   1c0d0:	ldrb	r3, [fp, #-136]	; 0xffffff78
   1c0d4:	cmp	r3, #0
   1c0d8:	bne	1c11c <__assert_fail@plt+0xa9c8>
   1c0dc:	ldrb	r3, [fp, #-148]	; 0xffffff6c
   1c0e0:	cmp	r3, #0
   1c0e4:	bne	1c168 <__assert_fail@plt+0xaa14>
   1c0e8:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1c0ec:	ldrb	r3, [r1]
   1c0f0:	lsr	r2, r3, #5
   1c0f4:	and	r3, r3, #31
   1c0f8:	ldr	r2, [r7, r2, lsl #2]
   1c0fc:	lsr	r3, r2, r3
   1c100:	tst	r3, #1
   1c104:	beq	1c154 <__assert_fail@plt+0xaa00>
   1c108:	str	r5, [fp, #-128]	; 0xffffff80
   1c10c:	ldrb	r3, [r1]
   1c110:	str	r3, [fp, #-120]	; 0xffffff88
   1c114:	strb	r5, [fp, #-124]	; 0xffffff84
   1c118:	strb	r5, [fp, #-136]	; 0xffffff78
   1c11c:	ldrb	r3, [fp, #-124]	; 0xffffff84
   1c120:	cmp	r3, #0
   1c124:	bne	1c23c <__assert_fail@plt+0xaae8>
   1c128:	ldr	r2, [fp, #-128]	; 0xffffff80
   1c12c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1c130:	add	r3, r3, r2
   1c134:	str	r3, [fp, #-132]	; 0xffffff7c
   1c138:	strb	r6, [fp, #-136]	; 0xffffff78
   1c13c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1c140:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1c144:	add	r3, r3, r2
   1c148:	str	r3, [fp, #-76]	; 0xffffffb4
   1c14c:	strb	r6, [fp, #-80]	; 0xffffffb0
   1c150:	b	1c338 <__assert_fail@plt+0xabe4>
   1c154:	sub	r0, fp, #144	; 0x90
   1c158:	bl	1140c <mbsinit@plt>
   1c15c:	cmp	r0, #0
   1c160:	beq	1c1ec <__assert_fail@plt+0xaa98>
   1c164:	strb	r5, [fp, #-148]	; 0xffffff6c
   1c168:	ldr	r4, [fp, #-132]	; 0xffffff7c
   1c16c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1c170:	mov	r1, r0
   1c174:	mov	r0, r4
   1c178:	bl	1a474 <__assert_fail@plt+0x8d20>
   1c17c:	sub	r3, fp, #144	; 0x90
   1c180:	mov	r2, r0
   1c184:	mov	r1, r4
   1c188:	sub	r0, fp, #120	; 0x78
   1c18c:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1c190:	str	r0, [fp, #-128]	; 0xffffff80
   1c194:	cmn	r0, #1
   1c198:	streq	r5, [fp, #-128]	; 0xffffff80
   1c19c:	strbeq	r6, [fp, #-124]	; 0xffffff84
   1c1a0:	beq	1c118 <__assert_fail@plt+0xa9c4>
   1c1a4:	cmn	r0, #2
   1c1a8:	beq	1c200 <__assert_fail@plt+0xaaac>
   1c1ac:	cmp	r0, #0
   1c1b0:	bne	1c1d4 <__assert_fail@plt+0xaa80>
   1c1b4:	str	r5, [fp, #-128]	; 0xffffff80
   1c1b8:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1c1bc:	ldrb	r3, [r3]
   1c1c0:	cmp	r3, #0
   1c1c4:	bne	1c214 <__assert_fail@plt+0xaac0>
   1c1c8:	ldr	r3, [fp, #-120]	; 0xffffff88
   1c1cc:	cmp	r3, #0
   1c1d0:	bne	1c228 <__assert_fail@plt+0xaad4>
   1c1d4:	strb	r5, [fp, #-124]	; 0xffffff84
   1c1d8:	sub	r0, fp, #144	; 0x90
   1c1dc:	bl	1140c <mbsinit@plt>
   1c1e0:	cmp	r0, #0
   1c1e4:	strbne	r6, [fp, #-148]	; 0xffffff6c
   1c1e8:	b	1c118 <__assert_fail@plt+0xa9c4>
   1c1ec:	ldr	r3, [pc, #564]	; 1c428 <__assert_fail@plt+0xacd4>
   1c1f0:	mov	r2, #143	; 0x8f
   1c1f4:	ldr	r1, [pc, #560]	; 1c42c <__assert_fail@plt+0xacd8>
   1c1f8:	ldr	r0, [pc, #560]	; 1c430 <__assert_fail@plt+0xacdc>
   1c1fc:	bl	11754 <__assert_fail@plt>
   1c200:	ldr	r0, [fp, #-132]	; 0xffffff7c
   1c204:	bl	115b0 <strlen@plt>
   1c208:	str	r0, [fp, #-128]	; 0xffffff80
   1c20c:	strb	r6, [fp, #-124]	; 0xffffff84
   1c210:	b	1c118 <__assert_fail@plt+0xa9c4>
   1c214:	ldr	r3, [pc, #524]	; 1c428 <__assert_fail@plt+0xacd4>
   1c218:	mov	r2, #171	; 0xab
   1c21c:	ldr	r1, [pc, #520]	; 1c42c <__assert_fail@plt+0xacd8>
   1c220:	ldr	r0, [pc, #524]	; 1c434 <__assert_fail@plt+0xace0>
   1c224:	bl	11754 <__assert_fail@plt>
   1c228:	ldr	r3, [pc, #504]	; 1c428 <__assert_fail@plt+0xacd4>
   1c22c:	mov	r2, #172	; 0xac
   1c230:	ldr	r1, [pc, #500]	; 1c42c <__assert_fail@plt+0xacd8>
   1c234:	ldr	r0, [pc, #508]	; 1c438 <__assert_fail@plt+0xace4>
   1c238:	bl	11754 <__assert_fail@plt>
   1c23c:	ldr	r3, [fp, #-120]	; 0xffffff88
   1c240:	cmp	r3, #0
   1c244:	bne	1c128 <__assert_fail@plt+0xa9d4>
   1c248:	bl	11748 <abort@plt>
   1c24c:	sub	r0, fp, #88	; 0x58
   1c250:	bl	1140c <mbsinit@plt>
   1c254:	cmp	r0, #0
   1c258:	beq	1c384 <__assert_fail@plt+0xac30>
   1c25c:	strb	r5, [fp, #-92]	; 0xffffffa4
   1c260:	ldr	r4, [fp, #-76]	; 0xffffffb4
   1c264:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1c268:	mov	r1, r0
   1c26c:	mov	r0, r4
   1c270:	bl	1a474 <__assert_fail@plt+0x8d20>
   1c274:	sub	r3, fp, #88	; 0x58
   1c278:	mov	r2, r0
   1c27c:	mov	r1, r4
   1c280:	sub	r0, fp, #64	; 0x40
   1c284:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1c288:	str	r0, [fp, #-72]	; 0xffffffb8
   1c28c:	cmn	r0, #1
   1c290:	streq	r5, [fp, #-72]	; 0xffffffb8
   1c294:	strbeq	r6, [fp, #-68]	; 0xffffffbc
   1c298:	beq	1c2e0 <__assert_fail@plt+0xab8c>
   1c29c:	cmn	r0, #2
   1c2a0:	beq	1c398 <__assert_fail@plt+0xac44>
   1c2a4:	cmp	r0, #0
   1c2a8:	bne	1c2cc <__assert_fail@plt+0xab78>
   1c2ac:	str	r5, [fp, #-72]	; 0xffffffb8
   1c2b0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1c2b4:	ldrb	r3, [r3]
   1c2b8:	cmp	r3, #0
   1c2bc:	bne	1c3ac <__assert_fail@plt+0xac58>
   1c2c0:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1c2c4:	cmp	r3, #0
   1c2c8:	bne	1c3c0 <__assert_fail@plt+0xac6c>
   1c2cc:	strb	r5, [fp, #-68]	; 0xffffffbc
   1c2d0:	sub	r0, fp, #88	; 0x58
   1c2d4:	bl	1140c <mbsinit@plt>
   1c2d8:	cmp	r0, #0
   1c2dc:	strbne	r6, [fp, #-92]	; 0xffffffa4
   1c2e0:	strb	r5, [fp, #-80]	; 0xffffffb0
   1c2e4:	ldrb	r2, [fp, #-68]	; 0xffffffbc
   1c2e8:	cmp	r2, #0
   1c2ec:	addeq	r3, r8, r8, lsl #2
   1c2f0:	addeq	r3, r9, r3, lsl #3
   1c2f4:	bne	1c3d4 <__assert_fail@plt+0xac80>
   1c2f8:	ldr	r2, [r3, #4]
   1c2fc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c300:	cmp	r2, r1
   1c304:	ldrne	r0, [fp, #-152]	; 0xffffff68
   1c308:	beq	1bf0c <__assert_fail@plt+0xa7b8>
   1c30c:	cmp	r0, #0
   1c310:	beq	1bf44 <__assert_fail@plt+0xa7f0>
   1c314:	add	r8, r8, #1
   1c318:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1c31c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1c320:	add	r3, r3, r2
   1c324:	str	r3, [fp, #-76]	; 0xffffffb4
   1c328:	strb	r6, [fp, #-80]	; 0xffffffb0
   1c32c:	ldr	r3, [fp, #-160]	; 0xffffff60
   1c330:	cmp	r3, r8
   1c334:	beq	1bf24 <__assert_fail@plt+0xa7d0>
   1c338:	ldrb	r3, [fp, #-80]	; 0xffffffb0
   1c33c:	cmp	r3, #0
   1c340:	bne	1c2e4 <__assert_fail@plt+0xab90>
   1c344:	ldrb	r3, [fp, #-92]	; 0xffffffa4
   1c348:	cmp	r3, #0
   1c34c:	bne	1c260 <__assert_fail@plt+0xab0c>
   1c350:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1c354:	ldrb	r3, [r1]
   1c358:	lsr	r2, r3, #5
   1c35c:	and	r3, r3, #31
   1c360:	ldr	r2, [r7, r2, lsl #2]
   1c364:	lsr	r3, r2, r3
   1c368:	tst	r3, #1
   1c36c:	beq	1c24c <__assert_fail@plt+0xaaf8>
   1c370:	str	r5, [fp, #-72]	; 0xffffffb8
   1c374:	ldrb	r3, [r1]
   1c378:	str	r3, [fp, #-64]	; 0xffffffc0
   1c37c:	strb	r5, [fp, #-68]	; 0xffffffbc
   1c380:	b	1c2e0 <__assert_fail@plt+0xab8c>
   1c384:	ldr	r3, [pc, #156]	; 1c428 <__assert_fail@plt+0xacd4>
   1c388:	mov	r2, #143	; 0x8f
   1c38c:	ldr	r1, [pc, #152]	; 1c42c <__assert_fail@plt+0xacd8>
   1c390:	ldr	r0, [pc, #152]	; 1c430 <__assert_fail@plt+0xacdc>
   1c394:	bl	11754 <__assert_fail@plt>
   1c398:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1c39c:	bl	115b0 <strlen@plt>
   1c3a0:	str	r0, [fp, #-72]	; 0xffffffb8
   1c3a4:	strb	r6, [fp, #-68]	; 0xffffffbc
   1c3a8:	b	1c2e0 <__assert_fail@plt+0xab8c>
   1c3ac:	ldr	r3, [pc, #116]	; 1c428 <__assert_fail@plt+0xacd4>
   1c3b0:	mov	r2, #171	; 0xab
   1c3b4:	ldr	r1, [pc, #112]	; 1c42c <__assert_fail@plt+0xacd8>
   1c3b8:	ldr	r0, [pc, #116]	; 1c434 <__assert_fail@plt+0xace0>
   1c3bc:	bl	11754 <__assert_fail@plt>
   1c3c0:	ldr	r3, [pc, #96]	; 1c428 <__assert_fail@plt+0xacd4>
   1c3c4:	mov	r2, #172	; 0xac
   1c3c8:	ldr	r1, [pc, #92]	; 1c42c <__assert_fail@plt+0xacd8>
   1c3cc:	ldr	r0, [pc, #100]	; 1c438 <__assert_fail@plt+0xace4>
   1c3d0:	bl	11754 <__assert_fail@plt>
   1c3d4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1c3d8:	cmp	r3, #0
   1c3dc:	beq	1bf30 <__assert_fail@plt+0xa7dc>
   1c3e0:	add	r3, r8, r8, lsl #2
   1c3e4:	add	r3, r9, r3, lsl #3
   1c3e8:	ldrb	r1, [r3, #8]
   1c3ec:	tst	r2, r1
   1c3f0:	beq	1c2f8 <__assert_fail@plt+0xaba4>
   1c3f4:	ldr	r0, [r3, #12]
   1c3f8:	ldr	r3, [fp, #-64]	; 0xffffffc0
   1c3fc:	cmp	r0, r3
   1c400:	movne	r0, #0
   1c404:	moveq	r0, #1
   1c408:	b	1c30c <__assert_fail@plt+0xabb8>
   1c40c:	mov	r3, #0
   1c410:	str	r3, [fp, #-164]	; 0xffffff5c
   1c414:	b	1bf38 <__assert_fail@plt+0xa7e4>
   1c418:	ldr	r3, [fp, #-152]	; 0xffffff68
   1c41c:	str	r3, [fp, #-164]	; 0xffffff5c
   1c420:	b	1bf38 <__assert_fail@plt+0xa7e4>
   1c424:	andeq	r1, r2, ip, ror fp
   1c428:	muleq	r2, ip, fp
   1c42c:	ldrdeq	r1, [r2], -r8
   1c430:	andeq	r1, r2, r8, ror #13
   1c434:	andeq	r1, r2, r0, lsl #14
   1c438:	andeq	r1, r2, r8, lsl r7
   1c43c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c440:	sub	sp, sp, #300	; 0x12c
   1c444:	str	r0, [sp, #4]
   1c448:	mov	sl, r1
   1c44c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1c450:	cmp	r0, #1
   1c454:	bls	1cffc <__assert_fail@plt+0xb8a8>
   1c458:	str	sl, [sp, #32]
   1c45c:	mov	r3, #0
   1c460:	strb	r3, [sp, #16]
   1c464:	str	r3, [sp, #20]
   1c468:	str	r3, [sp, #24]
   1c46c:	strb	r3, [sp, #28]
   1c470:	ldrb	r2, [sl]
   1c474:	lsr	r0, r2, #5
   1c478:	and	r1, r2, #31
   1c47c:	ldr	r3, [pc, #3320]	; 1d17c <__assert_fail@plt+0xba28>
   1c480:	ldr	r3, [r3, r0, lsl #2]
   1c484:	lsr	r3, r3, r1
   1c488:	tst	r3, #1
   1c48c:	beq	1c4cc <__assert_fail@plt+0xad78>
   1c490:	mov	r3, #1
   1c494:	str	r3, [sp, #36]	; 0x24
   1c498:	str	r2, [sp, #44]	; 0x2c
   1c49c:	strb	r3, [sp, #40]	; 0x28
   1c4a0:	mov	r3, #1
   1c4a4:	strb	r3, [sp, #28]
   1c4a8:	ldrb	r3, [sp, #40]	; 0x28
   1c4ac:	cmp	r3, #0
   1c4b0:	beq	1c5d0 <__assert_fail@plt+0xae7c>
   1c4b4:	ldr	r3, [sp, #44]	; 0x2c
   1c4b8:	cmp	r3, #0
   1c4bc:	ldreq	r0, [sp, #4]
   1c4c0:	bne	1c5d0 <__assert_fail@plt+0xae7c>
   1c4c4:	add	sp, sp, #300	; 0x12c
   1c4c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c4cc:	add	r0, sp, #20
   1c4d0:	bl	1140c <mbsinit@plt>
   1c4d4:	cmp	r0, #0
   1c4d8:	beq	1c568 <__assert_fail@plt+0xae14>
   1c4dc:	mov	r3, #1
   1c4e0:	strb	r3, [sp, #16]
   1c4e4:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1c4e8:	mov	r1, r0
   1c4ec:	mov	r0, sl
   1c4f0:	bl	1a474 <__assert_fail@plt+0x8d20>
   1c4f4:	add	r3, sp, #20
   1c4f8:	mov	r2, r0
   1c4fc:	mov	r1, sl
   1c500:	add	r0, sp, #44	; 0x2c
   1c504:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1c508:	str	r0, [sp, #36]	; 0x24
   1c50c:	cmn	r0, #1
   1c510:	beq	1c57c <__assert_fail@plt+0xae28>
   1c514:	cmn	r0, #2
   1c518:	beq	1c590 <__assert_fail@plt+0xae3c>
   1c51c:	cmp	r0, #0
   1c520:	bne	1c548 <__assert_fail@plt+0xadf4>
   1c524:	mov	r3, #1
   1c528:	str	r3, [sp, #36]	; 0x24
   1c52c:	ldr	r3, [sp, #32]
   1c530:	ldrb	r3, [r3]
   1c534:	cmp	r3, #0
   1c538:	bne	1c5a8 <__assert_fail@plt+0xae54>
   1c53c:	ldr	r3, [sp, #44]	; 0x2c
   1c540:	cmp	r3, #0
   1c544:	bne	1c5bc <__assert_fail@plt+0xae68>
   1c548:	mov	r3, #1
   1c54c:	strb	r3, [sp, #40]	; 0x28
   1c550:	add	r0, sp, #20
   1c554:	bl	1140c <mbsinit@plt>
   1c558:	cmp	r0, #0
   1c55c:	movne	r3, #0
   1c560:	strbne	r3, [sp, #16]
   1c564:	b	1c4a0 <__assert_fail@plt+0xad4c>
   1c568:	ldr	r3, [pc, #3088]	; 1d180 <__assert_fail@plt+0xba2c>
   1c56c:	mov	r2, #143	; 0x8f
   1c570:	ldr	r1, [pc, #3084]	; 1d184 <__assert_fail@plt+0xba30>
   1c574:	ldr	r0, [pc, #3084]	; 1d188 <__assert_fail@plt+0xba34>
   1c578:	bl	11754 <__assert_fail@plt>
   1c57c:	mov	r3, #1
   1c580:	str	r3, [sp, #36]	; 0x24
   1c584:	mov	r3, #0
   1c588:	strb	r3, [sp, #40]	; 0x28
   1c58c:	b	1c4a0 <__assert_fail@plt+0xad4c>
   1c590:	ldr	r0, [sp, #32]
   1c594:	bl	115b0 <strlen@plt>
   1c598:	str	r0, [sp, #36]	; 0x24
   1c59c:	mov	r3, #0
   1c5a0:	strb	r3, [sp, #40]	; 0x28
   1c5a4:	b	1c4a0 <__assert_fail@plt+0xad4c>
   1c5a8:	ldr	r3, [pc, #3024]	; 1d180 <__assert_fail@plt+0xba2c>
   1c5ac:	mov	r2, #171	; 0xab
   1c5b0:	ldr	r1, [pc, #3020]	; 1d184 <__assert_fail@plt+0xba30>
   1c5b4:	ldr	r0, [pc, #3024]	; 1d18c <__assert_fail@plt+0xba38>
   1c5b8:	bl	11754 <__assert_fail@plt>
   1c5bc:	ldr	r3, [pc, #3004]	; 1d180 <__assert_fail@plt+0xba2c>
   1c5c0:	mov	r2, #172	; 0xac
   1c5c4:	ldr	r1, [pc, #3000]	; 1d184 <__assert_fail@plt+0xba30>
   1c5c8:	ldr	r0, [pc, #3008]	; 1d190 <__assert_fail@plt+0xba3c>
   1c5cc:	bl	11754 <__assert_fail@plt>
   1c5d0:	str	sl, [sp, #88]	; 0x58
   1c5d4:	mov	r7, #0
   1c5d8:	strb	r7, [sp, #72]	; 0x48
   1c5dc:	str	r7, [sp, #76]	; 0x4c
   1c5e0:	str	r7, [sp, #80]	; 0x50
   1c5e4:	strb	r7, [sp, #84]	; 0x54
   1c5e8:	ldr	r3, [sp, #4]
   1c5ec:	str	r3, [sp, #144]	; 0x90
   1c5f0:	strb	r7, [sp, #128]	; 0x80
   1c5f4:	str	r7, [sp, #132]	; 0x84
   1c5f8:	str	r7, [sp, #136]	; 0x88
   1c5fc:	strb	r7, [sp, #140]	; 0x8c
   1c600:	str	r7, [sp, #12]
   1c604:	mov	fp, r7
   1c608:	mov	r3, #1
   1c60c:	mov	r4, r3
   1c610:	mov	r5, r7
   1c614:	ldr	r8, [pc, #2912]	; 1d17c <__assert_fail@plt+0xba28>
   1c618:	str	sl, [sp, #8]
   1c61c:	mov	sl, r3
   1c620:	b	1ce9c <__assert_fail@plt+0xb748>
   1c624:	add	r0, sp, #132	; 0x84
   1c628:	bl	1140c <mbsinit@plt>
   1c62c:	cmp	r0, #0
   1c630:	beq	1c6bc <__assert_fail@plt+0xaf68>
   1c634:	strb	r4, [sp, #128]	; 0x80
   1c638:	ldr	r6, [sp, #144]	; 0x90
   1c63c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1c640:	mov	r1, r0
   1c644:	mov	r0, r6
   1c648:	bl	1a474 <__assert_fail@plt+0x8d20>
   1c64c:	add	r3, sp, #132	; 0x84
   1c650:	mov	r2, r0
   1c654:	mov	r1, r6
   1c658:	add	r0, sp, #156	; 0x9c
   1c65c:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1c660:	str	r0, [sp, #148]	; 0x94
   1c664:	cmn	r0, #1
   1c668:	streq	r4, [sp, #148]	; 0x94
   1c66c:	strbeq	r5, [sp, #152]	; 0x98
   1c670:	beq	1cee4 <__assert_fail@plt+0xb790>
   1c674:	cmn	r0, #2
   1c678:	beq	1c6d0 <__assert_fail@plt+0xaf7c>
   1c67c:	cmp	r0, #0
   1c680:	bne	1c6a4 <__assert_fail@plt+0xaf50>
   1c684:	str	r4, [sp, #148]	; 0x94
   1c688:	ldr	r3, [sp, #144]	; 0x90
   1c68c:	ldrb	r3, [r3]
   1c690:	cmp	r3, #0
   1c694:	bne	1c6e4 <__assert_fail@plt+0xaf90>
   1c698:	ldr	r3, [sp, #156]	; 0x9c
   1c69c:	cmp	r3, #0
   1c6a0:	bne	1c6f8 <__assert_fail@plt+0xafa4>
   1c6a4:	strb	r4, [sp, #152]	; 0x98
   1c6a8:	add	r0, sp, #132	; 0x84
   1c6ac:	bl	1140c <mbsinit@plt>
   1c6b0:	cmp	r0, #0
   1c6b4:	strbne	r5, [sp, #128]	; 0x80
   1c6b8:	b	1cee4 <__assert_fail@plt+0xb790>
   1c6bc:	ldr	r3, [pc, #2748]	; 1d180 <__assert_fail@plt+0xba2c>
   1c6c0:	mov	r2, #143	; 0x8f
   1c6c4:	ldr	r1, [pc, #2744]	; 1d184 <__assert_fail@plt+0xba30>
   1c6c8:	ldr	r0, [pc, #2744]	; 1d188 <__assert_fail@plt+0xba34>
   1c6cc:	bl	11754 <__assert_fail@plt>
   1c6d0:	ldr	r0, [sp, #144]	; 0x90
   1c6d4:	bl	115b0 <strlen@plt>
   1c6d8:	str	r0, [sp, #148]	; 0x94
   1c6dc:	strb	r5, [sp, #152]	; 0x98
   1c6e0:	b	1cee4 <__assert_fail@plt+0xb790>
   1c6e4:	ldr	r3, [pc, #2708]	; 1d180 <__assert_fail@plt+0xba2c>
   1c6e8:	mov	r2, #171	; 0xab
   1c6ec:	ldr	r1, [pc, #2704]	; 1d184 <__assert_fail@plt+0xba30>
   1c6f0:	ldr	r0, [pc, #2708]	; 1d18c <__assert_fail@plt+0xba38>
   1c6f4:	bl	11754 <__assert_fail@plt>
   1c6f8:	ldr	r3, [pc, #2688]	; 1d180 <__assert_fail@plt+0xba2c>
   1c6fc:	mov	r2, #172	; 0xac
   1c700:	ldr	r1, [pc, #2684]	; 1d184 <__assert_fail@plt+0xba30>
   1c704:	ldr	r0, [pc, #2692]	; 1d190 <__assert_fail@plt+0xba3c>
   1c708:	bl	11754 <__assert_fail@plt>
   1c70c:	ldr	r3, [sp, #156]	; 0x9c
   1c710:	cmp	r3, #0
   1c714:	beq	1cff4 <__assert_fail@plt+0xb8a0>
   1c718:	cmp	r7, #9
   1c71c:	movls	r3, #0
   1c720:	andhi	r3, sl, #1
   1c724:	cmp	r3, #0
   1c728:	beq	1d170 <__assert_fail@plt+0xba1c>
   1c72c:	add	r3, r7, r7, lsl #2
   1c730:	cmp	fp, r3
   1c734:	bcc	1c7a0 <__assert_fail@plt+0xb04c>
   1c738:	ldr	r3, [sp, #12]
   1c73c:	subs	r6, fp, r3
   1c740:	bne	1c898 <__assert_fail@plt+0xb144>
   1c744:	ldrb	r3, [sp, #84]	; 0x54
   1c748:	cmp	r3, #0
   1c74c:	bne	1c790 <__assert_fail@plt+0xb03c>
   1c750:	ldrb	r3, [sp, #72]	; 0x48
   1c754:	cmp	r3, #0
   1c758:	bne	1c98c <__assert_fail@plt+0xb238>
   1c75c:	ldr	r1, [sp, #88]	; 0x58
   1c760:	ldrb	r3, [r1]
   1c764:	lsr	r2, r3, #5
   1c768:	and	r3, r3, #31
   1c76c:	ldr	r2, [r8, r2, lsl #2]
   1c770:	lsr	r3, r2, r3
   1c774:	tst	r3, #1
   1c778:	beq	1c978 <__assert_fail@plt+0xb224>
   1c77c:	str	r4, [sp, #92]	; 0x5c
   1c780:	ldrb	r3, [r1]
   1c784:	str	r3, [sp, #100]	; 0x64
   1c788:	strb	r4, [sp, #96]	; 0x60
   1c78c:	strb	r4, [sp, #84]	; 0x54
   1c790:	ldrb	r3, [sp, #96]	; 0x60
   1c794:	cmp	r3, #0
   1c798:	streq	fp, [sp, #12]
   1c79c:	bne	1c94c <__assert_fail@plt+0xb1f8>
   1c7a0:	add	r7, r7, #1
   1c7a4:	add	r6, fp, #1
   1c7a8:	ldrb	r3, [sp, #152]	; 0x98
   1c7ac:	cmp	r3, #0
   1c7b0:	beq	1cf10 <__assert_fail@plt+0xb7bc>
   1c7b4:	ldrb	r3, [sp, #40]	; 0x28
   1c7b8:	cmp	r3, #0
   1c7bc:	beq	1cf10 <__assert_fail@plt+0xb7bc>
   1c7c0:	ldr	r3, [sp, #44]	; 0x2c
   1c7c4:	ldr	r0, [sp, #156]	; 0x9c
   1c7c8:	cmp	r0, r3
   1c7cc:	movne	r0, #0
   1c7d0:	moveq	r0, #1
   1c7d4:	b	1cf24 <__assert_fail@plt+0xb7d0>
   1c7d8:	add	r0, sp, #76	; 0x4c
   1c7dc:	bl	1140c <mbsinit@plt>
   1c7e0:	cmp	r0, #0
   1c7e4:	beq	1c8e4 <__assert_fail@plt+0xb190>
   1c7e8:	strb	r4, [sp, #72]	; 0x48
   1c7ec:	ldr	r9, [sp, #88]	; 0x58
   1c7f0:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1c7f4:	mov	r1, r0
   1c7f8:	mov	r0, r9
   1c7fc:	bl	1a474 <__assert_fail@plt+0x8d20>
   1c800:	add	r3, sp, #76	; 0x4c
   1c804:	mov	r2, r0
   1c808:	mov	r1, r9
   1c80c:	add	r0, sp, #100	; 0x64
   1c810:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1c814:	str	r0, [sp, #92]	; 0x5c
   1c818:	cmn	r0, #1
   1c81c:	streq	r4, [sp, #92]	; 0x5c
   1c820:	strbeq	r5, [sp, #96]	; 0x60
   1c824:	beq	1c86c <__assert_fail@plt+0xb118>
   1c828:	cmn	r0, #2
   1c82c:	beq	1c8f8 <__assert_fail@plt+0xb1a4>
   1c830:	cmp	r0, #0
   1c834:	bne	1c858 <__assert_fail@plt+0xb104>
   1c838:	str	r4, [sp, #92]	; 0x5c
   1c83c:	ldr	r3, [sp, #88]	; 0x58
   1c840:	ldrb	r3, [r3]
   1c844:	cmp	r3, #0
   1c848:	bne	1c90c <__assert_fail@plt+0xb1b8>
   1c84c:	ldr	r3, [sp, #100]	; 0x64
   1c850:	cmp	r3, #0
   1c854:	bne	1c920 <__assert_fail@plt+0xb1cc>
   1c858:	strb	r4, [sp, #96]	; 0x60
   1c85c:	add	r0, sp, #76	; 0x4c
   1c860:	bl	1140c <mbsinit@plt>
   1c864:	cmp	r0, #0
   1c868:	strbne	r5, [sp, #72]	; 0x48
   1c86c:	strb	r4, [sp, #84]	; 0x54
   1c870:	ldrb	r3, [sp, #96]	; 0x60
   1c874:	cmp	r3, #0
   1c878:	bne	1c934 <__assert_fail@plt+0xb1e0>
   1c87c:	ldr	r2, [sp, #92]	; 0x5c
   1c880:	ldr	r3, [sp, #88]	; 0x58
   1c884:	add	r3, r3, r2
   1c888:	str	r3, [sp, #88]	; 0x58
   1c88c:	strb	r5, [sp, #84]	; 0x54
   1c890:	subs	r6, r6, #1
   1c894:	beq	1c750 <__assert_fail@plt+0xaffc>
   1c898:	ldrb	r3, [sp, #84]	; 0x54
   1c89c:	cmp	r3, #0
   1c8a0:	bne	1c870 <__assert_fail@plt+0xb11c>
   1c8a4:	ldrb	r3, [sp, #72]	; 0x48
   1c8a8:	cmp	r3, #0
   1c8ac:	bne	1c7ec <__assert_fail@plt+0xb098>
   1c8b0:	ldr	r1, [sp, #88]	; 0x58
   1c8b4:	ldrb	r3, [r1]
   1c8b8:	lsr	r2, r3, #5
   1c8bc:	and	r3, r3, #31
   1c8c0:	ldr	r2, [r8, r2, lsl #2]
   1c8c4:	lsr	r3, r2, r3
   1c8c8:	tst	r3, #1
   1c8cc:	beq	1c7d8 <__assert_fail@plt+0xb084>
   1c8d0:	str	r4, [sp, #92]	; 0x5c
   1c8d4:	ldrb	r3, [r1]
   1c8d8:	str	r3, [sp, #100]	; 0x64
   1c8dc:	strb	r4, [sp, #96]	; 0x60
   1c8e0:	b	1c86c <__assert_fail@plt+0xb118>
   1c8e4:	ldr	r3, [pc, #2196]	; 1d180 <__assert_fail@plt+0xba2c>
   1c8e8:	mov	r2, #143	; 0x8f
   1c8ec:	ldr	r1, [pc, #2192]	; 1d184 <__assert_fail@plt+0xba30>
   1c8f0:	ldr	r0, [pc, #2192]	; 1d188 <__assert_fail@plt+0xba34>
   1c8f4:	bl	11754 <__assert_fail@plt>
   1c8f8:	ldr	r0, [sp, #88]	; 0x58
   1c8fc:	bl	115b0 <strlen@plt>
   1c900:	str	r0, [sp, #92]	; 0x5c
   1c904:	strb	r5, [sp, #96]	; 0x60
   1c908:	b	1c86c <__assert_fail@plt+0xb118>
   1c90c:	ldr	r3, [pc, #2156]	; 1d180 <__assert_fail@plt+0xba2c>
   1c910:	mov	r2, #171	; 0xab
   1c914:	ldr	r1, [pc, #2152]	; 1d184 <__assert_fail@plt+0xba30>
   1c918:	ldr	r0, [pc, #2156]	; 1d18c <__assert_fail@plt+0xba38>
   1c91c:	bl	11754 <__assert_fail@plt>
   1c920:	ldr	r3, [pc, #2136]	; 1d180 <__assert_fail@plt+0xba2c>
   1c924:	mov	r2, #172	; 0xac
   1c928:	ldr	r1, [pc, #2132]	; 1d184 <__assert_fail@plt+0xba30>
   1c92c:	ldr	r0, [pc, #2140]	; 1d190 <__assert_fail@plt+0xba3c>
   1c930:	bl	11754 <__assert_fail@plt>
   1c934:	ldr	r3, [sp, #100]	; 0x64
   1c938:	cmp	r3, #0
   1c93c:	bne	1c87c <__assert_fail@plt+0xb128>
   1c940:	ldrb	r3, [sp, #84]	; 0x54
   1c944:	cmp	r3, #0
   1c948:	beq	1c750 <__assert_fail@plt+0xaffc>
   1c94c:	ldr	r3, [sp, #100]	; 0x64
   1c950:	cmp	r3, #0
   1c954:	bne	1ca68 <__assert_fail@plt+0xb314>
   1c958:	add	r2, sp, #240	; 0xf0
   1c95c:	ldr	r1, [sp, #8]
   1c960:	ldr	r0, [sp, #4]
   1c964:	bl	1bb60 <__assert_fail@plt+0xa40c>
   1c968:	subs	sl, r0, #0
   1c96c:	bne	1ca60 <__assert_fail@plt+0xb30c>
   1c970:	str	fp, [sp, #12]
   1c974:	b	1c7a0 <__assert_fail@plt+0xb04c>
   1c978:	add	r0, sp, #76	; 0x4c
   1c97c:	bl	1140c <mbsinit@plt>
   1c980:	cmp	r0, #0
   1c984:	beq	1ca10 <__assert_fail@plt+0xb2bc>
   1c988:	strb	r4, [sp, #72]	; 0x48
   1c98c:	ldr	r6, [sp, #88]	; 0x58
   1c990:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1c994:	mov	r1, r0
   1c998:	mov	r0, r6
   1c99c:	bl	1a474 <__assert_fail@plt+0x8d20>
   1c9a0:	add	r3, sp, #76	; 0x4c
   1c9a4:	mov	r2, r0
   1c9a8:	mov	r1, r6
   1c9ac:	add	r0, sp, #100	; 0x64
   1c9b0:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1c9b4:	str	r0, [sp, #92]	; 0x5c
   1c9b8:	cmn	r0, #1
   1c9bc:	streq	r4, [sp, #92]	; 0x5c
   1c9c0:	strbeq	r5, [sp, #96]	; 0x60
   1c9c4:	beq	1c78c <__assert_fail@plt+0xb038>
   1c9c8:	cmn	r0, #2
   1c9cc:	beq	1ca24 <__assert_fail@plt+0xb2d0>
   1c9d0:	cmp	r0, #0
   1c9d4:	bne	1c9f8 <__assert_fail@plt+0xb2a4>
   1c9d8:	str	r4, [sp, #92]	; 0x5c
   1c9dc:	ldr	r3, [sp, #88]	; 0x58
   1c9e0:	ldrb	r3, [r3]
   1c9e4:	cmp	r3, #0
   1c9e8:	bne	1ca38 <__assert_fail@plt+0xb2e4>
   1c9ec:	ldr	r3, [sp, #100]	; 0x64
   1c9f0:	cmp	r3, #0
   1c9f4:	bne	1ca4c <__assert_fail@plt+0xb2f8>
   1c9f8:	strb	r4, [sp, #96]	; 0x60
   1c9fc:	add	r0, sp, #76	; 0x4c
   1ca00:	bl	1140c <mbsinit@plt>
   1ca04:	cmp	r0, #0
   1ca08:	strbne	r5, [sp, #72]	; 0x48
   1ca0c:	b	1c78c <__assert_fail@plt+0xb038>
   1ca10:	ldr	r3, [pc, #1896]	; 1d180 <__assert_fail@plt+0xba2c>
   1ca14:	mov	r2, #143	; 0x8f
   1ca18:	ldr	r1, [pc, #1892]	; 1d184 <__assert_fail@plt+0xba30>
   1ca1c:	ldr	r0, [pc, #1892]	; 1d188 <__assert_fail@plt+0xba34>
   1ca20:	bl	11754 <__assert_fail@plt>
   1ca24:	ldr	r0, [sp, #88]	; 0x58
   1ca28:	bl	115b0 <strlen@plt>
   1ca2c:	str	r0, [sp, #92]	; 0x5c
   1ca30:	strb	r5, [sp, #96]	; 0x60
   1ca34:	b	1c78c <__assert_fail@plt+0xb038>
   1ca38:	ldr	r3, [pc, #1856]	; 1d180 <__assert_fail@plt+0xba2c>
   1ca3c:	mov	r2, #171	; 0xab
   1ca40:	ldr	r1, [pc, #1852]	; 1d184 <__assert_fail@plt+0xba30>
   1ca44:	ldr	r0, [pc, #1856]	; 1d18c <__assert_fail@plt+0xba38>
   1ca48:	bl	11754 <__assert_fail@plt>
   1ca4c:	ldr	r3, [pc, #1836]	; 1d180 <__assert_fail@plt+0xba2c>
   1ca50:	mov	r2, #172	; 0xac
   1ca54:	ldr	r1, [pc, #1832]	; 1d184 <__assert_fail@plt+0xba30>
   1ca58:	ldr	r0, [pc, #1840]	; 1d190 <__assert_fail@plt+0xba3c>
   1ca5c:	bl	11754 <__assert_fail@plt>
   1ca60:	ldr	r0, [sp, #240]	; 0xf0
   1ca64:	b	1c4c4 <__assert_fail@plt+0xad70>
   1ca68:	str	fp, [sp, #12]
   1ca6c:	b	1c7a0 <__assert_fail@plt+0xb04c>
   1ca70:	ldr	r1, [sp, #32]
   1ca74:	ldr	r0, [sp, #144]	; 0x90
   1ca78:	bl	11418 <memcmp@plt>
   1ca7c:	clz	r0, r0
   1ca80:	lsr	r0, r0, #5
   1ca84:	b	1cf24 <__assert_fail@plt+0xb7d0>
   1ca88:	add	r0, sp, #244	; 0xf4
   1ca8c:	bl	1140c <mbsinit@plt>
   1ca90:	cmp	r0, #0
   1ca94:	beq	1cb20 <__assert_fail@plt+0xb3cc>
   1ca98:	strb	r4, [sp, #240]	; 0xf0
   1ca9c:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1caa0:	mov	r1, r0
   1caa4:	ldr	r6, [sp, #8]
   1caa8:	mov	r0, r6
   1caac:	bl	1a474 <__assert_fail@plt+0x8d20>
   1cab0:	add	r3, sp, #244	; 0xf4
   1cab4:	mov	r2, r0
   1cab8:	mov	r1, r6
   1cabc:	add	r0, sp, #268	; 0x10c
   1cac0:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1cac4:	str	r0, [sp, #260]	; 0x104
   1cac8:	cmn	r0, #1
   1cacc:	streq	r4, [sp, #260]	; 0x104
   1cad0:	strbeq	r5, [sp, #264]	; 0x108
   1cad4:	beq	1cfa8 <__assert_fail@plt+0xb854>
   1cad8:	cmn	r0, #2
   1cadc:	beq	1cb34 <__assert_fail@plt+0xb3e0>
   1cae0:	cmp	r0, #0
   1cae4:	bne	1cb08 <__assert_fail@plt+0xb3b4>
   1cae8:	str	r4, [sp, #260]	; 0x104
   1caec:	ldr	r3, [sp, #256]	; 0x100
   1caf0:	ldrb	r3, [r3]
   1caf4:	cmp	r3, #0
   1caf8:	bne	1cb48 <__assert_fail@plt+0xb3f4>
   1cafc:	ldr	r3, [sp, #268]	; 0x10c
   1cb00:	cmp	r3, #0
   1cb04:	bne	1cb5c <__assert_fail@plt+0xb408>
   1cb08:	strb	r4, [sp, #264]	; 0x108
   1cb0c:	add	r0, sp, #244	; 0xf4
   1cb10:	bl	1140c <mbsinit@plt>
   1cb14:	cmp	r0, #0
   1cb18:	strbne	r5, [sp, #240]	; 0xf0
   1cb1c:	b	1cfa8 <__assert_fail@plt+0xb854>
   1cb20:	ldr	r3, [pc, #1624]	; 1d180 <__assert_fail@plt+0xba2c>
   1cb24:	mov	r2, #143	; 0x8f
   1cb28:	ldr	r1, [pc, #1620]	; 1d184 <__assert_fail@plt+0xba30>
   1cb2c:	ldr	r0, [pc, #1620]	; 1d188 <__assert_fail@plt+0xba34>
   1cb30:	bl	11754 <__assert_fail@plt>
   1cb34:	ldr	r0, [sp, #256]	; 0x100
   1cb38:	bl	115b0 <strlen@plt>
   1cb3c:	str	r0, [sp, #260]	; 0x104
   1cb40:	strb	r5, [sp, #264]	; 0x108
   1cb44:	b	1cfa8 <__assert_fail@plt+0xb854>
   1cb48:	ldr	r3, [pc, #1584]	; 1d180 <__assert_fail@plt+0xba2c>
   1cb4c:	mov	r2, #171	; 0xab
   1cb50:	ldr	r1, [pc, #1580]	; 1d184 <__assert_fail@plt+0xba30>
   1cb54:	ldr	r0, [pc, #1584]	; 1d18c <__assert_fail@plt+0xba38>
   1cb58:	bl	11754 <__assert_fail@plt>
   1cb5c:	ldr	r3, [pc, #1564]	; 1d180 <__assert_fail@plt+0xba2c>
   1cb60:	mov	r2, #172	; 0xac
   1cb64:	ldr	r1, [pc, #1560]	; 1d184 <__assert_fail@plt+0xba30>
   1cb68:	ldr	r0, [pc, #1568]	; 1d190 <__assert_fail@plt+0xba3c>
   1cb6c:	bl	11754 <__assert_fail@plt>
   1cb70:	ldr	r3, [sp, #268]	; 0x10c
   1cb74:	cmp	r3, #0
   1cb78:	bne	1cfb8 <__assert_fail@plt+0xb864>
   1cb7c:	bl	11748 <abort@plt>
   1cb80:	add	r0, sp, #244	; 0xf4
   1cb84:	bl	1140c <mbsinit@plt>
   1cb88:	cmp	r0, #0
   1cb8c:	beq	1cc18 <__assert_fail@plt+0xb4c4>
   1cb90:	strb	r4, [sp, #240]	; 0xf0
   1cb94:	ldr	r9, [sp, #256]	; 0x100
   1cb98:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1cb9c:	mov	r1, r0
   1cba0:	mov	r0, r9
   1cba4:	bl	1a474 <__assert_fail@plt+0x8d20>
   1cba8:	add	r3, sp, #244	; 0xf4
   1cbac:	mov	r2, r0
   1cbb0:	mov	r1, r9
   1cbb4:	add	r0, sp, #268	; 0x10c
   1cbb8:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1cbbc:	str	r0, [sp, #260]	; 0x104
   1cbc0:	cmn	r0, #1
   1cbc4:	streq	r4, [sp, #260]	; 0x104
   1cbc8:	strbeq	r5, [sp, #264]	; 0x108
   1cbcc:	beq	1ce0c <__assert_fail@plt+0xb6b8>
   1cbd0:	cmn	r0, #2
   1cbd4:	beq	1cc2c <__assert_fail@plt+0xb4d8>
   1cbd8:	cmp	r0, #0
   1cbdc:	bne	1cc00 <__assert_fail@plt+0xb4ac>
   1cbe0:	str	r4, [sp, #260]	; 0x104
   1cbe4:	ldr	r3, [sp, #256]	; 0x100
   1cbe8:	ldrb	r3, [r3]
   1cbec:	cmp	r3, #0
   1cbf0:	bne	1cc40 <__assert_fail@plt+0xb4ec>
   1cbf4:	ldr	r3, [sp, #268]	; 0x10c
   1cbf8:	cmp	r3, #0
   1cbfc:	bne	1cc54 <__assert_fail@plt+0xb500>
   1cc00:	strb	r4, [sp, #264]	; 0x108
   1cc04:	add	r0, sp, #244	; 0xf4
   1cc08:	bl	1140c <mbsinit@plt>
   1cc0c:	cmp	r0, #0
   1cc10:	strbne	r5, [sp, #240]	; 0xf0
   1cc14:	b	1ce0c <__assert_fail@plt+0xb6b8>
   1cc18:	ldr	r3, [pc, #1376]	; 1d180 <__assert_fail@plt+0xba2c>
   1cc1c:	mov	r2, #143	; 0x8f
   1cc20:	ldr	r1, [pc, #1372]	; 1d184 <__assert_fail@plt+0xba30>
   1cc24:	ldr	r0, [pc, #1372]	; 1d188 <__assert_fail@plt+0xba34>
   1cc28:	bl	11754 <__assert_fail@plt>
   1cc2c:	ldr	r0, [sp, #256]	; 0x100
   1cc30:	bl	115b0 <strlen@plt>
   1cc34:	str	r0, [sp, #260]	; 0x104
   1cc38:	strb	r5, [sp, #264]	; 0x108
   1cc3c:	b	1ce0c <__assert_fail@plt+0xb6b8>
   1cc40:	ldr	r3, [pc, #1336]	; 1d180 <__assert_fail@plt+0xba2c>
   1cc44:	mov	r2, #171	; 0xab
   1cc48:	ldr	r1, [pc, #1332]	; 1d184 <__assert_fail@plt+0xba30>
   1cc4c:	ldr	r0, [pc, #1336]	; 1d18c <__assert_fail@plt+0xba38>
   1cc50:	bl	11754 <__assert_fail@plt>
   1cc54:	ldr	r3, [pc, #1316]	; 1d180 <__assert_fail@plt+0xba2c>
   1cc58:	mov	r2, #172	; 0xac
   1cc5c:	ldr	r1, [pc, #1312]	; 1d184 <__assert_fail@plt+0xba30>
   1cc60:	ldr	r0, [pc, #1320]	; 1d190 <__assert_fail@plt+0xba3c>
   1cc64:	bl	11754 <__assert_fail@plt>
   1cc68:	ldr	r3, [sp, #268]	; 0x10c
   1cc6c:	cmp	r3, #0
   1cc70:	bne	1ce1c <__assert_fail@plt+0xb6c8>
   1cc74:	ldr	r0, [sp, #144]	; 0x90
   1cc78:	b	1c4c4 <__assert_fail@plt+0xad70>
   1cc7c:	add	r0, sp, #188	; 0xbc
   1cc80:	bl	1140c <mbsinit@plt>
   1cc84:	cmp	r0, #0
   1cc88:	beq	1cd14 <__assert_fail@plt+0xb5c0>
   1cc8c:	strb	r4, [sp, #184]	; 0xb8
   1cc90:	ldr	r9, [sp, #200]	; 0xc8
   1cc94:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1cc98:	mov	r1, r0
   1cc9c:	mov	r0, r9
   1cca0:	bl	1a474 <__assert_fail@plt+0x8d20>
   1cca4:	add	r3, sp, #188	; 0xbc
   1cca8:	mov	r2, r0
   1ccac:	mov	r1, r9
   1ccb0:	add	r0, sp, #212	; 0xd4
   1ccb4:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1ccb8:	str	r0, [sp, #204]	; 0xcc
   1ccbc:	cmn	r0, #1
   1ccc0:	streq	r4, [sp, #204]	; 0xcc
   1ccc4:	strbeq	r5, [sp, #208]	; 0xd0
   1ccc8:	beq	1ce64 <__assert_fail@plt+0xb710>
   1cccc:	cmn	r0, #2
   1ccd0:	beq	1cd28 <__assert_fail@plt+0xb5d4>
   1ccd4:	cmp	r0, #0
   1ccd8:	bne	1ccfc <__assert_fail@plt+0xb5a8>
   1ccdc:	str	r4, [sp, #204]	; 0xcc
   1cce0:	ldr	r3, [sp, #200]	; 0xc8
   1cce4:	ldrb	r3, [r3]
   1cce8:	cmp	r3, #0
   1ccec:	bne	1cd3c <__assert_fail@plt+0xb5e8>
   1ccf0:	ldr	r3, [sp, #212]	; 0xd4
   1ccf4:	cmp	r3, #0
   1ccf8:	bne	1cd50 <__assert_fail@plt+0xb5fc>
   1ccfc:	strb	r4, [sp, #208]	; 0xd0
   1cd00:	add	r0, sp, #188	; 0xbc
   1cd04:	bl	1140c <mbsinit@plt>
   1cd08:	cmp	r0, #0
   1cd0c:	strbne	r5, [sp, #184]	; 0xb8
   1cd10:	b	1ce64 <__assert_fail@plt+0xb710>
   1cd14:	ldr	r3, [pc, #1124]	; 1d180 <__assert_fail@plt+0xba2c>
   1cd18:	mov	r2, #143	; 0x8f
   1cd1c:	ldr	r1, [pc, #1120]	; 1d184 <__assert_fail@plt+0xba30>
   1cd20:	ldr	r0, [pc, #1120]	; 1d188 <__assert_fail@plt+0xba34>
   1cd24:	bl	11754 <__assert_fail@plt>
   1cd28:	ldr	r0, [sp, #200]	; 0xc8
   1cd2c:	bl	115b0 <strlen@plt>
   1cd30:	str	r0, [sp, #204]	; 0xcc
   1cd34:	strb	r5, [sp, #208]	; 0xd0
   1cd38:	b	1ce64 <__assert_fail@plt+0xb710>
   1cd3c:	ldr	r3, [pc, #1084]	; 1d180 <__assert_fail@plt+0xba2c>
   1cd40:	mov	r2, #171	; 0xab
   1cd44:	ldr	r1, [pc, #1080]	; 1d184 <__assert_fail@plt+0xba30>
   1cd48:	ldr	r0, [pc, #1084]	; 1d18c <__assert_fail@plt+0xba38>
   1cd4c:	bl	11754 <__assert_fail@plt>
   1cd50:	ldr	r3, [pc, #1064]	; 1d180 <__assert_fail@plt+0xba2c>
   1cd54:	mov	r2, #172	; 0xac
   1cd58:	ldr	r1, [pc, #1060]	; 1d184 <__assert_fail@plt+0xba30>
   1cd5c:	ldr	r0, [pc, #1068]	; 1d190 <__assert_fail@plt+0xba3c>
   1cd60:	bl	11754 <__assert_fail@plt>
   1cd64:	ldr	r3, [sp, #212]	; 0xd4
   1cd68:	cmp	r3, #0
   1cd6c:	beq	1cfec <__assert_fail@plt+0xb898>
   1cd70:	ldrb	r3, [sp, #264]	; 0x108
   1cd74:	cmp	r3, #0
   1cd78:	beq	1ce74 <__assert_fail@plt+0xb720>
   1cd7c:	ldr	r3, [sp, #268]	; 0x10c
   1cd80:	ldr	r0, [sp, #212]	; 0xd4
   1cd84:	subs	r0, r0, r3
   1cd88:	movne	r0, #1
   1cd8c:	add	r2, r6, #1
   1cd90:	cmp	r0, #0
   1cd94:	bne	1ce84 <__assert_fail@plt+0xb730>
   1cd98:	ldr	r1, [sp, #204]	; 0xcc
   1cd9c:	ldr	r3, [sp, #200]	; 0xc8
   1cda0:	add	r3, r3, r1
   1cda4:	str	r3, [sp, #200]	; 0xc8
   1cda8:	strb	r5, [sp, #196]	; 0xc4
   1cdac:	ldr	r1, [sp, #260]	; 0x104
   1cdb0:	ldr	r3, [sp, #256]	; 0x100
   1cdb4:	add	r3, r3, r1
   1cdb8:	str	r3, [sp, #256]	; 0x100
   1cdbc:	strb	r5, [sp, #252]	; 0xfc
   1cdc0:	mov	r6, r2
   1cdc4:	ldrb	r3, [sp, #252]	; 0xfc
   1cdc8:	cmp	r3, #0
   1cdcc:	bne	1ce10 <__assert_fail@plt+0xb6bc>
   1cdd0:	ldrb	r3, [sp, #240]	; 0xf0
   1cdd4:	cmp	r3, #0
   1cdd8:	bne	1cb94 <__assert_fail@plt+0xb440>
   1cddc:	ldr	r1, [sp, #256]	; 0x100
   1cde0:	ldrb	r3, [r1]
   1cde4:	lsr	r2, r3, #5
   1cde8:	and	r3, r3, #31
   1cdec:	ldr	r2, [r8, r2, lsl #2]
   1cdf0:	lsr	r3, r2, r3
   1cdf4:	tst	r3, #1
   1cdf8:	beq	1cb80 <__assert_fail@plt+0xb42c>
   1cdfc:	str	r4, [sp, #260]	; 0x104
   1ce00:	ldrb	r3, [r1]
   1ce04:	str	r3, [sp, #268]	; 0x10c
   1ce08:	strb	r4, [sp, #264]	; 0x108
   1ce0c:	strb	r4, [sp, #252]	; 0xfc
   1ce10:	ldrb	r3, [sp, #264]	; 0x108
   1ce14:	cmp	r3, #0
   1ce18:	bne	1cc68 <__assert_fail@plt+0xb514>
   1ce1c:	ldrb	r3, [sp, #196]	; 0xc4
   1ce20:	cmp	r3, #0
   1ce24:	bne	1ce68 <__assert_fail@plt+0xb714>
   1ce28:	ldrb	r3, [sp, #184]	; 0xb8
   1ce2c:	cmp	r3, #0
   1ce30:	bne	1cc90 <__assert_fail@plt+0xb53c>
   1ce34:	ldr	r1, [sp, #200]	; 0xc8
   1ce38:	ldrb	r3, [r1]
   1ce3c:	lsr	r2, r3, #5
   1ce40:	and	r3, r3, #31
   1ce44:	ldr	r2, [r8, r2, lsl #2]
   1ce48:	lsr	r3, r2, r3
   1ce4c:	tst	r3, #1
   1ce50:	beq	1cc7c <__assert_fail@plt+0xb528>
   1ce54:	str	r4, [sp, #204]	; 0xcc
   1ce58:	ldrb	r3, [r1]
   1ce5c:	str	r3, [sp, #212]	; 0xd4
   1ce60:	strb	r4, [sp, #208]	; 0xd0
   1ce64:	strb	r4, [sp, #196]	; 0xc4
   1ce68:	ldrb	r3, [sp, #208]	; 0xd0
   1ce6c:	cmp	r3, #0
   1ce70:	bne	1cd64 <__assert_fail@plt+0xb610>
   1ce74:	ldr	r2, [sp, #204]	; 0xcc
   1ce78:	ldr	r3, [sp, #260]	; 0x104
   1ce7c:	cmp	r2, r3
   1ce80:	beq	1cfd4 <__assert_fail@plt+0xb880>
   1ce84:	ldr	r2, [sp, #148]	; 0x94
   1ce88:	ldr	r3, [sp, #144]	; 0x90
   1ce8c:	add	r3, r3, r2
   1ce90:	str	r3, [sp, #144]	; 0x90
   1ce94:	strb	r5, [sp, #140]	; 0x8c
   1ce98:	mov	fp, r6
   1ce9c:	ldrb	r3, [sp, #140]	; 0x8c
   1cea0:	cmp	r3, #0
   1cea4:	bne	1cee8 <__assert_fail@plt+0xb794>
   1cea8:	ldrb	r3, [sp, #128]	; 0x80
   1ceac:	cmp	r3, #0
   1ceb0:	bne	1c638 <__assert_fail@plt+0xaee4>
   1ceb4:	ldr	r1, [sp, #144]	; 0x90
   1ceb8:	ldrb	r3, [r1]
   1cebc:	lsr	r2, r3, #5
   1cec0:	and	r3, r3, #31
   1cec4:	ldr	r2, [r8, r2, lsl #2]
   1cec8:	lsr	r3, r2, r3
   1cecc:	tst	r3, #1
   1ced0:	beq	1c624 <__assert_fail@plt+0xaed0>
   1ced4:	str	r4, [sp, #148]	; 0x94
   1ced8:	ldrb	r3, [r1]
   1cedc:	str	r3, [sp, #156]	; 0x9c
   1cee0:	strb	r4, [sp, #152]	; 0x98
   1cee4:	strb	r4, [sp, #140]	; 0x8c
   1cee8:	ldrb	r3, [sp, #152]	; 0x98
   1ceec:	cmp	r3, #0
   1cef0:	bne	1c70c <__assert_fail@plt+0xafb8>
   1cef4:	cmp	r7, #9
   1cef8:	movls	r3, #0
   1cefc:	andhi	r3, sl, #1
   1cf00:	cmp	r3, #0
   1cf04:	addeq	r7, r7, #1
   1cf08:	addeq	r6, fp, #1
   1cf0c:	bne	1c72c <__assert_fail@plt+0xafd8>
   1cf10:	ldr	r2, [sp, #148]	; 0x94
   1cf14:	ldr	r3, [sp, #36]	; 0x24
   1cf18:	cmp	r2, r3
   1cf1c:	movne	r0, r5
   1cf20:	beq	1ca70 <__assert_fail@plt+0xb31c>
   1cf24:	cmp	r0, #0
   1cf28:	beq	1ce84 <__assert_fail@plt+0xb730>
   1cf2c:	add	ip, sp, #184	; 0xb8
   1cf30:	add	lr, sp, #128	; 0x80
   1cf34:	ldm	lr!, {r0, r1, r2, r3}
   1cf38:	stmia	ip!, {r0, r1, r2, r3}
   1cf3c:	ldm	lr!, {r0, r1, r2, r3}
   1cf40:	stmia	ip!, {r0, r1, r2, r3}
   1cf44:	ldm	lr!, {r0, r1, r2, r3}
   1cf48:	stmia	ip!, {r0, r1, r2, r3}
   1cf4c:	ldm	lr, {r0, r1}
   1cf50:	stm	ip, {r0, r1}
   1cf54:	ldr	r2, [sp, #204]	; 0xcc
   1cf58:	ldr	r3, [sp, #200]	; 0xc8
   1cf5c:	add	r3, r3, r2
   1cf60:	str	r3, [sp, #200]	; 0xc8
   1cf64:	strb	r5, [sp, #196]	; 0xc4
   1cf68:	ldr	r3, [sp, #8]
   1cf6c:	str	r3, [sp, #256]	; 0x100
   1cf70:	strb	r5, [sp, #240]	; 0xf0
   1cf74:	str	r5, [sp, #244]	; 0xf4
   1cf78:	str	r5, [sp, #248]	; 0xf8
   1cf7c:	strb	r5, [sp, #252]	; 0xfc
   1cf80:	ldrb	r2, [r3]
   1cf84:	lsr	r3, r2, #5
   1cf88:	and	r1, r2, #31
   1cf8c:	ldr	r3, [r8, r3, lsl #2]
   1cf90:	lsr	r3, r3, r1
   1cf94:	tst	r3, #1
   1cf98:	beq	1ca88 <__assert_fail@plt+0xb334>
   1cf9c:	str	r4, [sp, #260]	; 0x104
   1cfa0:	str	r2, [sp, #268]	; 0x10c
   1cfa4:	strb	r4, [sp, #264]	; 0x108
   1cfa8:	strb	r4, [sp, #252]	; 0xfc
   1cfac:	ldrb	r3, [sp, #264]	; 0x108
   1cfb0:	cmp	r3, #0
   1cfb4:	bne	1cb70 <__assert_fail@plt+0xb41c>
   1cfb8:	ldr	r2, [sp, #260]	; 0x104
   1cfbc:	ldr	r3, [sp, #256]	; 0x100
   1cfc0:	add	r3, r3, r2
   1cfc4:	str	r3, [sp, #256]	; 0x100
   1cfc8:	strb	r5, [sp, #252]	; 0xfc
   1cfcc:	add	r6, fp, #2
   1cfd0:	b	1cdc4 <__assert_fail@plt+0xb670>
   1cfd4:	ldr	r1, [sp, #256]	; 0x100
   1cfd8:	ldr	r0, [sp, #200]	; 0xc8
   1cfdc:	bl	11418 <memcmp@plt>
   1cfe0:	adds	r0, r0, #0
   1cfe4:	movne	r0, #1
   1cfe8:	b	1cd8c <__assert_fail@plt+0xb638>
   1cfec:	mov	r0, #0
   1cff0:	b	1c4c4 <__assert_fail@plt+0xad70>
   1cff4:	mov	r0, #0
   1cff8:	b	1c4c4 <__assert_fail@plt+0xad70>
   1cffc:	ldrb	r7, [sl]
   1d000:	cmp	r7, #0
   1d004:	beq	1d120 <__assert_fail@plt+0xb9cc>
   1d008:	add	r3, sl, #1
   1d00c:	str	r3, [sp, #8]
   1d010:	ldr	r5, [sp, #4]
   1d014:	ldrb	r3, [r5]
   1d018:	cmp	r3, #0
   1d01c:	beq	1d128 <__assert_fail@plt+0xb9d4>
   1d020:	mov	r8, sl
   1d024:	mov	r4, #0
   1d028:	mov	r6, r4
   1d02c:	mov	r9, r4
   1d030:	mov	fp, #1
   1d034:	mov	r0, r5
   1d038:	add	r6, r6, #1
   1d03c:	add	r5, r5, #1
   1d040:	ldrb	r3, [r0]
   1d044:	cmp	r3, r7
   1d048:	beq	1d0bc <__assert_fail@plt+0xb968>
   1d04c:	str	r5, [sp, #4]
   1d050:	ldrb	r3, [r5]
   1d054:	cmp	r3, #0
   1d058:	beq	1d118 <__assert_fail@plt+0xb9c4>
   1d05c:	add	r4, r4, #1
   1d060:	cmp	r6, #9
   1d064:	movls	r3, #0
   1d068:	andhi	r3, fp, #1
   1d06c:	cmp	r3, #0
   1d070:	beq	1d034 <__assert_fail@plt+0xb8e0>
   1d074:	add	r3, r6, r6, lsl #2
   1d078:	cmp	r3, r4
   1d07c:	bhi	1d034 <__assert_fail@plt+0xb8e0>
   1d080:	cmp	r8, #0
   1d084:	beq	1d144 <__assert_fail@plt+0xb9f0>
   1d088:	sub	r1, r4, r9
   1d08c:	mov	r0, r8
   1d090:	bl	11670 <strnlen@plt>
   1d094:	ldrb	r3, [r8, r0]!
   1d098:	cmp	r3, #0
   1d09c:	beq	1d140 <__assert_fail@plt+0xb9ec>
   1d0a0:	cmp	r8, #0
   1d0a4:	movne	r9, r4
   1d0a8:	bne	1d034 <__assert_fail@plt+0xb8e0>
   1d0ac:	mov	r9, r4
   1d0b0:	b	1d144 <__assert_fail@plt+0xb9f0>
   1d0b4:	ldr	r0, [sp, #240]	; 0xf0
   1d0b8:	b	1c4c4 <__assert_fail@plt+0xad70>
   1d0bc:	ldrb	r3, [sl, #1]
   1d0c0:	cmp	r3, #0
   1d0c4:	beq	1c4c4 <__assert_fail@plt+0xad70>
   1d0c8:	mov	lr, r5
   1d0cc:	ldrb	r2, [r5]
   1d0d0:	cmp	r2, #0
   1d0d4:	beq	1d130 <__assert_fail@plt+0xb9dc>
   1d0d8:	add	r4, r4, #2
   1d0dc:	cmp	r3, r2
   1d0e0:	bne	1d110 <__assert_fail@plt+0xb9bc>
   1d0e4:	mov	ip, r5
   1d0e8:	ldr	r1, [sp, #8]
   1d0ec:	ldrb	r3, [r1, #1]!
   1d0f0:	cmp	r3, #0
   1d0f4:	beq	1c4c4 <__assert_fail@plt+0xad70>
   1d0f8:	ldrb	r2, [ip, #1]!
   1d0fc:	cmp	r2, #0
   1d100:	beq	1d138 <__assert_fail@plt+0xb9e4>
   1d104:	add	r4, r4, #1
   1d108:	cmp	r3, r2
   1d10c:	beq	1d0ec <__assert_fail@plt+0xb998>
   1d110:	str	lr, [sp, #4]
   1d114:	b	1d060 <__assert_fail@plt+0xb90c>
   1d118:	mov	r0, #0
   1d11c:	b	1c4c4 <__assert_fail@plt+0xad70>
   1d120:	ldr	r0, [sp, #4]
   1d124:	b	1c4c4 <__assert_fail@plt+0xad70>
   1d128:	mov	r0, #0
   1d12c:	b	1c4c4 <__assert_fail@plt+0xad70>
   1d130:	mov	r0, #0
   1d134:	b	1c4c4 <__assert_fail@plt+0xad70>
   1d138:	mov	r0, #0
   1d13c:	b	1c4c4 <__assert_fail@plt+0xad70>
   1d140:	mov	r9, r4
   1d144:	mov	r0, sl
   1d148:	bl	115b0 <strlen@plt>
   1d14c:	add	r3, sp, #240	; 0xf0
   1d150:	mov	r2, r0
   1d154:	mov	r1, sl
   1d158:	ldr	r0, [sp, #4]
   1d15c:	bl	1ba08 <__assert_fail@plt+0xa2b4>
   1d160:	subs	fp, r0, #0
   1d164:	bne	1d0b4 <__assert_fail@plt+0xb960>
   1d168:	mov	r8, #0
   1d16c:	b	1d034 <__assert_fail@plt+0xb8e0>
   1d170:	add	r7, r7, #1
   1d174:	add	r6, fp, #1
   1d178:	b	1c7b4 <__assert_fail@plt+0xb060>
   1d17c:	andeq	r1, r2, ip, ror fp
   1d180:	muleq	r2, ip, fp
   1d184:	ldrdeq	r1, [r2], -r8
   1d188:	andeq	r1, r2, r8, ror #13
   1d18c:	andeq	r1, r2, r0, lsl #14
   1d190:	andeq	r1, r2, r8, lsl r7
   1d194:	push	{r4, r5, r6, lr}
   1d198:	mov	r6, r0
   1d19c:	mov	r5, r1
   1d1a0:	subs	r4, r2, #0
   1d1a4:	beq	1d1d0 <__assert_fail@plt+0xba7c>
   1d1a8:	mov	r1, r4
   1d1ac:	mvn	r0, #0
   1d1b0:	bl	1da2c <__assert_fail@plt+0xc2d8>
   1d1b4:	cmp	r0, r5
   1d1b8:	bcs	1d1d0 <__assert_fail@plt+0xba7c>
   1d1bc:	bl	115e0 <__errno_location@plt>
   1d1c0:	mov	r3, #12
   1d1c4:	str	r3, [r0]
   1d1c8:	mov	r0, #0
   1d1cc:	pop	{r4, r5, r6, pc}
   1d1d0:	mul	r1, r5, r4
   1d1d4:	mov	r0, r6
   1d1d8:	bl	1b5fc <__assert_fail@plt+0x9ea8>
   1d1dc:	pop	{r4, r5, r6, pc}
   1d1e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1e4:	sub	sp, sp, #4096	; 0x1000
   1d1e8:	sub	sp, sp, #28
   1d1ec:	mov	fp, r0
   1d1f0:	mov	r9, r1
   1d1f4:	mov	r6, r2
   1d1f8:	mov	sl, r3
   1d1fc:	mov	r1, #0
   1d200:	str	r1, [sp]
   1d204:	mov	r3, r1
   1d208:	mov	r2, r1
   1d20c:	mov	r0, r6
   1d210:	bl	1137c <iconv@plt>
   1d214:	str	fp, [sp, #8]
   1d218:	str	r9, [sp, #12]
   1d21c:	cmp	r9, #0
   1d220:	beq	1d39c <__assert_fail@plt+0xbc48>
   1d224:	mov	r5, #0
   1d228:	add	r4, sp, #24
   1d22c:	mov	r8, #4096	; 0x1000
   1d230:	sub	r7, r4, #4
   1d234:	b	1d250 <__assert_fail@plt+0xbafc>
   1d238:	ldr	r3, [r4, #-8]
   1d23c:	sub	r3, r3, r4
   1d240:	add	r5, r5, r3
   1d244:	ldr	r3, [r4, #-12]
   1d248:	cmp	r3, #0
   1d24c:	beq	1d290 <__assert_fail@plt+0xbb3c>
   1d250:	str	r4, [r4, #-8]
   1d254:	str	r8, [r4, #-4]
   1d258:	str	r7, [sp]
   1d25c:	add	r3, sp, #16
   1d260:	add	r2, sp, #12
   1d264:	add	r1, sp, #8
   1d268:	mov	r0, r6
   1d26c:	bl	1137c <iconv@plt>
   1d270:	cmn	r0, #1
   1d274:	bne	1d238 <__assert_fail@plt+0xbae4>
   1d278:	bl	115e0 <__errno_location@plt>
   1d27c:	ldr	r3, [r0]
   1d280:	cmp	r3, #7
   1d284:	beq	1d238 <__assert_fail@plt+0xbae4>
   1d288:	cmp	r3, #22
   1d28c:	bne	1d3a4 <__assert_fail@plt+0xbc50>
   1d290:	add	r3, sp, #24
   1d294:	str	r3, [r3, #-8]
   1d298:	mov	r2, #4096	; 0x1000
   1d29c:	str	r2, [r3, #-4]
   1d2a0:	sub	r2, r3, #4
   1d2a4:	str	r2, [sp]
   1d2a8:	sub	r3, r3, #8
   1d2ac:	mov	r2, #0
   1d2b0:	mov	r1, r2
   1d2b4:	mov	r0, r6
   1d2b8:	bl	1137c <iconv@plt>
   1d2bc:	cmn	r0, #1
   1d2c0:	beq	1d3a4 <__assert_fail@plt+0xbc50>
   1d2c4:	add	r2, sp, #24
   1d2c8:	ldr	r3, [sp, #16]
   1d2cc:	sub	r3, r3, r2
   1d2d0:	adds	r5, r3, r5
   1d2d4:	beq	1d3ac <__assert_fail@plt+0xbc58>
   1d2d8:	ldr	r8, [sl]
   1d2dc:	cmp	r8, #0
   1d2e0:	beq	1d2f8 <__assert_fail@plt+0xbba4>
   1d2e4:	add	r3, sp, #4160	; 0x1040
   1d2e8:	ldr	r3, [r3]
   1d2ec:	ldr	r3, [r3]
   1d2f0:	cmp	r5, r3
   1d2f4:	bls	1d308 <__assert_fail@plt+0xbbb4>
   1d2f8:	mov	r0, r5
   1d2fc:	bl	1b5cc <__assert_fail@plt+0x9e78>
   1d300:	subs	r8, r0, #0
   1d304:	beq	1d3c8 <__assert_fail@plt+0xbc74>
   1d308:	mov	r1, #0
   1d30c:	str	r1, [sp]
   1d310:	mov	r3, r1
   1d314:	mov	r2, r1
   1d318:	mov	r0, r6
   1d31c:	bl	1137c <iconv@plt>
   1d320:	str	fp, [sp, #12]
   1d324:	str	r9, [sp, #16]
   1d328:	str	r8, [sp, #20]
   1d32c:	str	r5, [sp, #24]
   1d330:	add	r4, sp, #24
   1d334:	sub	fp, r4, #4
   1d338:	sub	r9, r4, #8
   1d33c:	sub	r7, r4, #12
   1d340:	ldr	r3, [r4, #-8]
   1d344:	cmp	r3, #0
   1d348:	beq	1d3dc <__assert_fail@plt+0xbc88>
   1d34c:	str	r4, [sp]
   1d350:	mov	r3, fp
   1d354:	mov	r2, r9
   1d358:	mov	r1, r7
   1d35c:	mov	r0, r6
   1d360:	bl	1137c <iconv@plt>
   1d364:	cmn	r0, #1
   1d368:	bne	1d340 <__assert_fail@plt+0xbbec>
   1d36c:	bl	115e0 <__errno_location@plt>
   1d370:	ldr	r3, [r0]
   1d374:	cmp	r3, #22
   1d378:	beq	1d3dc <__assert_fail@plt+0xbc88>
   1d37c:	ldr	r3, [sl]
   1d380:	cmp	r8, r3
   1d384:	mvneq	r0, #0
   1d388:	beq	1d3bc <__assert_fail@plt+0xbc68>
   1d38c:	mov	r0, r8
   1d390:	bl	178e8 <__assert_fail@plt+0x6194>
   1d394:	mvn	r0, #0
   1d398:	b	1d3bc <__assert_fail@plt+0xbc68>
   1d39c:	mov	r5, r9
   1d3a0:	b	1d290 <__assert_fail@plt+0xbb3c>
   1d3a4:	mvn	r0, #0
   1d3a8:	b	1d3bc <__assert_fail@plt+0xbc68>
   1d3ac:	mov	r0, #0
   1d3b0:	add	r3, sp, #4160	; 0x1040
   1d3b4:	ldr	r3, [r3]
   1d3b8:	str	r0, [r3]
   1d3bc:	add	sp, sp, #4096	; 0x1000
   1d3c0:	add	sp, sp, #28
   1d3c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3c8:	bl	115e0 <__errno_location@plt>
   1d3cc:	mov	r3, #12
   1d3d0:	str	r3, [r0]
   1d3d4:	mvn	r0, #0
   1d3d8:	b	1d3bc <__assert_fail@plt+0xbc68>
   1d3dc:	add	r3, sp, #24
   1d3e0:	str	r3, [sp]
   1d3e4:	add	r3, sp, #20
   1d3e8:	mov	r2, #0
   1d3ec:	mov	r1, r2
   1d3f0:	mov	r0, r6
   1d3f4:	bl	1137c <iconv@plt>
   1d3f8:	cmn	r0, #1
   1d3fc:	beq	1d37c <__assert_fail@plt+0xbc28>
   1d400:	ldr	r3, [sp, #24]
   1d404:	cmp	r3, #0
   1d408:	bne	1d424 <__assert_fail@plt+0xbcd0>
   1d40c:	str	r8, [sl]
   1d410:	add	r3, sp, #4160	; 0x1040
   1d414:	ldr	r3, [r3]
   1d418:	str	r5, [r3]
   1d41c:	mov	r0, #0
   1d420:	b	1d3bc <__assert_fail@plt+0xbc68>
   1d424:	bl	11748 <abort@plt>
   1d428:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d42c:	sub	sp, sp, #28
   1d430:	mov	r8, r1
   1d434:	str	r0, [sp, #20]
   1d438:	bl	115b0 <strlen@plt>
   1d43c:	mov	r4, r0
   1d440:	str	r0, [sp, #16]
   1d444:	cmp	r0, #4096	; 0x1000
   1d448:	lslcc	r4, r0, #4
   1d44c:	add	r7, r4, #1
   1d450:	mov	r0, r7
   1d454:	bl	1b5cc <__assert_fail@plt+0x9e78>
   1d458:	subs	r6, r0, #0
   1d45c:	beq	1d508 <__assert_fail@plt+0xbdb4>
   1d460:	mov	r1, #0
   1d464:	str	r1, [sp]
   1d468:	mov	r3, r1
   1d46c:	mov	r2, r1
   1d470:	mov	r0, r8
   1d474:	bl	1137c <iconv@plt>
   1d478:	str	r6, [sp, #8]
   1d47c:	str	r4, [sp, #12]
   1d480:	add	r9, sp, #12
   1d484:	str	r9, [sp]
   1d488:	add	r3, sp, #8
   1d48c:	add	r2, sp, #16
   1d490:	add	r1, sp, #20
   1d494:	mov	r0, r8
   1d498:	bl	1137c <iconv@plt>
   1d49c:	cmn	r0, #1
   1d4a0:	bne	1d544 <__assert_fail@plt+0xbdf0>
   1d4a4:	bl	115e0 <__errno_location@plt>
   1d4a8:	mov	sl, r0
   1d4ac:	ldr	r3, [r0]
   1d4b0:	cmp	r3, #22
   1d4b4:	beq	1d544 <__assert_fail@plt+0xbdf0>
   1d4b8:	cmp	r3, #7
   1d4bc:	bne	1d520 <__assert_fail@plt+0xbdcc>
   1d4c0:	ldr	r4, [sp, #8]
   1d4c4:	sub	r4, r4, r6
   1d4c8:	lsl	r5, r7, #1
   1d4cc:	cmp	r7, r5
   1d4d0:	bcs	1d518 <__assert_fail@plt+0xbdc4>
   1d4d4:	mov	r1, r5
   1d4d8:	mov	r0, r6
   1d4dc:	bl	1b5fc <__assert_fail@plt+0x9ea8>
   1d4e0:	cmp	r0, #0
   1d4e4:	beq	1d538 <__assert_fail@plt+0xbde4>
   1d4e8:	add	r3, r0, r4
   1d4ec:	str	r3, [sp, #8]
   1d4f0:	sub	r3, r5, #1
   1d4f4:	sub	r4, r3, r4
   1d4f8:	str	r4, [sp, #12]
   1d4fc:	mov	r6, r0
   1d500:	mov	r7, r5
   1d504:	b	1d484 <__assert_fail@plt+0xbd30>
   1d508:	bl	115e0 <__errno_location@plt>
   1d50c:	mov	r3, #12
   1d510:	str	r3, [r0]
   1d514:	b	1d52c <__assert_fail@plt+0xbdd8>
   1d518:	mov	r3, #12
   1d51c:	str	r3, [r0]
   1d520:	mov	r0, r6
   1d524:	bl	178e8 <__assert_fail@plt+0x6194>
   1d528:	mov	r6, #0
   1d52c:	mov	r0, r6
   1d530:	add	sp, sp, #28
   1d534:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d538:	mov	r3, #12
   1d53c:	str	r3, [sl]
   1d540:	b	1d520 <__assert_fail@plt+0xbdcc>
   1d544:	add	sl, sp, #12
   1d548:	mov	r9, #0
   1d54c:	str	sl, [sp]
   1d550:	add	r3, sp, #8
   1d554:	mov	r2, r9
   1d558:	mov	r1, r9
   1d55c:	mov	r0, r8
   1d560:	bl	1137c <iconv@plt>
   1d564:	cmn	r0, #1
   1d568:	bne	1d5e0 <__assert_fail@plt+0xbe8c>
   1d56c:	bl	115e0 <__errno_location@plt>
   1d570:	mov	fp, r0
   1d574:	ldr	r3, [r0]
   1d578:	cmp	r3, #7
   1d57c:	bne	1d520 <__assert_fail@plt+0xbdcc>
   1d580:	ldr	r4, [sp, #8]
   1d584:	sub	r4, r4, r6
   1d588:	lsl	r5, r7, #1
   1d58c:	cmp	r7, r5
   1d590:	bcs	1d5c8 <__assert_fail@plt+0xbe74>
   1d594:	mov	r1, r5
   1d598:	mov	r0, r6
   1d59c:	bl	1b5fc <__assert_fail@plt+0x9ea8>
   1d5a0:	cmp	r0, #0
   1d5a4:	beq	1d5d4 <__assert_fail@plt+0xbe80>
   1d5a8:	add	r3, r0, r4
   1d5ac:	str	r3, [sp, #8]
   1d5b0:	sub	r3, r5, #1
   1d5b4:	sub	r4, r3, r4
   1d5b8:	str	r4, [sp, #12]
   1d5bc:	mov	r6, r0
   1d5c0:	mov	r7, r5
   1d5c4:	b	1d54c <__assert_fail@plt+0xbdf8>
   1d5c8:	mov	r3, #12
   1d5cc:	str	r3, [r0]
   1d5d0:	b	1d520 <__assert_fail@plt+0xbdcc>
   1d5d4:	mov	r3, #12
   1d5d8:	str	r3, [fp]
   1d5dc:	b	1d520 <__assert_fail@plt+0xbdcc>
   1d5e0:	ldr	r3, [sp, #8]
   1d5e4:	add	r2, r3, #1
   1d5e8:	str	r2, [sp, #8]
   1d5ec:	mov	r2, #0
   1d5f0:	strb	r2, [r3]
   1d5f4:	ldr	r1, [sp, #8]
   1d5f8:	sub	r1, r1, r6
   1d5fc:	cmp	r7, r1
   1d600:	bls	1d52c <__assert_fail@plt+0xbdd8>
   1d604:	mov	r0, r6
   1d608:	bl	1b5fc <__assert_fail@plt+0x9ea8>
   1d60c:	cmp	r0, #0
   1d610:	movne	r6, r0
   1d614:	b	1d52c <__assert_fail@plt+0xbdd8>
   1d618:	push	{r4, r5, r6, r7, r8, lr}
   1d61c:	mov	r4, r0
   1d620:	ldrb	r3, [r0]
   1d624:	cmp	r3, #0
   1d628:	beq	1d648 <__assert_fail@plt+0xbef4>
   1d62c:	mov	r6, r1
   1d630:	mov	r5, r2
   1d634:	mov	r1, r2
   1d638:	mov	r0, r6
   1d63c:	bl	1b64c <__assert_fail@plt+0x9ef8>
   1d640:	cmp	r0, #0
   1d644:	bne	1d670 <__assert_fail@plt+0xbf1c>
   1d648:	mov	r0, r4
   1d64c:	bl	11448 <strdup@plt>
   1d650:	subs	r4, r0, #0
   1d654:	beq	1d660 <__assert_fail@plt+0xbf0c>
   1d658:	mov	r0, r4
   1d65c:	pop	{r4, r5, r6, r7, r8, pc}
   1d660:	bl	115e0 <__errno_location@plt>
   1d664:	mov	r3, #12
   1d668:	str	r3, [r0]
   1d66c:	b	1d658 <__assert_fail@plt+0xbf04>
   1d670:	mov	r1, r6
   1d674:	mov	r0, r5
   1d678:	bl	11538 <iconv_open@plt>
   1d67c:	mov	r5, r0
   1d680:	cmn	r0, #1
   1d684:	beq	1d6d8 <__assert_fail@plt+0xbf84>
   1d688:	mov	r1, r0
   1d68c:	mov	r0, r4
   1d690:	bl	1d428 <__assert_fail@plt+0xbcd4>
   1d694:	subs	r4, r0, #0
   1d698:	beq	1d6bc <__assert_fail@plt+0xbf68>
   1d69c:	mov	r0, r5
   1d6a0:	bl	11370 <iconv_close@plt>
   1d6a4:	cmp	r0, #0
   1d6a8:	bge	1d658 <__assert_fail@plt+0xbf04>
   1d6ac:	mov	r0, r4
   1d6b0:	bl	178e8 <__assert_fail@plt+0x6194>
   1d6b4:	mov	r4, #0
   1d6b8:	b	1d658 <__assert_fail@plt+0xbf04>
   1d6bc:	bl	115e0 <__errno_location@plt>
   1d6c0:	mov	r6, r0
   1d6c4:	ldr	r7, [r0]
   1d6c8:	mov	r0, r5
   1d6cc:	bl	11370 <iconv_close@plt>
   1d6d0:	str	r7, [r6]
   1d6d4:	b	1d658 <__assert_fail@plt+0xbf04>
   1d6d8:	mov	r4, #0
   1d6dc:	b	1d658 <__assert_fail@plt+0xbf04>
   1d6e0:	push	{lr}		; (str lr, [sp, #-4]!)
   1d6e4:	sub	sp, sp, #268	; 0x10c
   1d6e8:	ldr	r2, [pc, #68]	; 1d734 <__assert_fail@plt+0xbfe0>
   1d6ec:	add	r1, sp, #4
   1d6f0:	bl	1d984 <__assert_fail@plt+0xc230>
   1d6f4:	cmp	r0, #0
   1d6f8:	movne	r0, #0
   1d6fc:	bne	1d72c <__assert_fail@plt+0xbfd8>
   1d700:	ldr	r1, [pc, #48]	; 1d738 <__assert_fail@plt+0xbfe4>
   1d704:	add	r0, sp, #4
   1d708:	bl	11388 <strcmp@plt>
   1d70c:	cmp	r0, #0
   1d710:	moveq	r0, #0
   1d714:	beq	1d72c <__assert_fail@plt+0xbfd8>
   1d718:	ldr	r1, [pc, #28]	; 1d73c <__assert_fail@plt+0xbfe8>
   1d71c:	add	r0, sp, #4
   1d720:	bl	11388 <strcmp@plt>
   1d724:	adds	r0, r0, #0
   1d728:	movne	r0, #1
   1d72c:	add	sp, sp, #268	; 0x10c
   1d730:	pop	{pc}		; (ldr pc, [sp], #4)
   1d734:	andeq	r0, r0, r1, lsl #2
   1d738:			; <UNDEFINED> instruction: 0x00021bb0
   1d73c:			; <UNDEFINED> instruction: 0x00021bb4
   1d740:	cmn	r0, #-2147483631	; 0x80000011
   1d744:	bhi	1d778 <__assert_fail@plt+0xc024>
   1d748:	push	{r4, lr}
   1d74c:	add	r0, r0, #16
   1d750:	bl	1152c <malloc@plt>
   1d754:	cmp	r0, #0
   1d758:	beq	1d780 <__assert_fail@plt+0xc02c>
   1d75c:	add	r3, r0, #8
   1d760:	bic	r3, r3, #15
   1d764:	rsb	r2, r0, #8
   1d768:	add	r3, r3, r2
   1d76c:	add	r0, r0, r3
   1d770:	strb	r3, [r0, #-1]
   1d774:	pop	{r4, pc}
   1d778:	mov	r0, #0
   1d77c:	bx	lr
   1d780:	mov	r0, #0
   1d784:	pop	{r4, pc}
   1d788:	push	{r4, lr}
   1d78c:	tst	r0, #7
   1d790:	bne	1d7ac <__assert_fail@plt+0xc058>
   1d794:	tst	r0, #8
   1d798:	popeq	{r4, pc}
   1d79c:	ldrb	r3, [r0, #-1]
   1d7a0:	sub	r0, r0, r3
   1d7a4:	bl	178e8 <__assert_fail@plt+0x6194>
   1d7a8:	pop	{r4, pc}
   1d7ac:	bl	11748 <abort@plt>
   1d7b0:	push	{r4, r5, r6, r7, r8, lr}
   1d7b4:	sub	sp, sp, #56	; 0x38
   1d7b8:	mov	r4, r0
   1d7bc:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d7c0:	cmp	r0, #1
   1d7c4:	bls	1d95c <__assert_fail@plt+0xc208>
   1d7c8:	str	r4, [sp, #16]
   1d7cc:	mov	r4, #0
   1d7d0:	strb	r4, [sp]
   1d7d4:	str	r4, [sp, #4]
   1d7d8:	str	r4, [sp, #8]
   1d7dc:	strb	r4, [sp, #12]
   1d7e0:	mov	r6, #1
   1d7e4:	mov	r5, r4
   1d7e8:	ldr	r7, [pc, #380]	; 1d96c <__assert_fail@plt+0xc218>
   1d7ec:	b	1d8a8 <__assert_fail@plt+0xc154>
   1d7f0:	add	r0, sp, #4
   1d7f4:	bl	1140c <mbsinit@plt>
   1d7f8:	cmp	r0, #0
   1d7fc:	beq	1d8f4 <__assert_fail@plt+0xc1a0>
   1d800:	strb	r6, [sp]
   1d804:	ldr	r8, [sp, #16]
   1d808:	bl	114fc <__ctype_get_mb_cur_max@plt>
   1d80c:	mov	r1, r0
   1d810:	mov	r0, r8
   1d814:	bl	1a474 <__assert_fail@plt+0x8d20>
   1d818:	add	r3, sp, #4
   1d81c:	mov	r2, r0
   1d820:	mov	r1, r8
   1d824:	add	r0, sp, #28
   1d828:	bl	1b9b0 <__assert_fail@plt+0xa25c>
   1d82c:	str	r0, [sp, #20]
   1d830:	cmn	r0, #1
   1d834:	streq	r6, [sp, #20]
   1d838:	strbeq	r5, [sp, #24]
   1d83c:	beq	1d884 <__assert_fail@plt+0xc130>
   1d840:	cmn	r0, #2
   1d844:	beq	1d908 <__assert_fail@plt+0xc1b4>
   1d848:	cmp	r0, #0
   1d84c:	bne	1d870 <__assert_fail@plt+0xc11c>
   1d850:	str	r6, [sp, #20]
   1d854:	ldr	r3, [sp, #16]
   1d858:	ldrb	r3, [r3]
   1d85c:	cmp	r3, #0
   1d860:	bne	1d91c <__assert_fail@plt+0xc1c8>
   1d864:	ldr	r3, [sp, #28]
   1d868:	cmp	r3, #0
   1d86c:	bne	1d930 <__assert_fail@plt+0xc1dc>
   1d870:	strb	r6, [sp, #24]
   1d874:	add	r0, sp, #4
   1d878:	bl	1140c <mbsinit@plt>
   1d87c:	cmp	r0, #0
   1d880:	strbne	r5, [sp]
   1d884:	ldrb	r3, [sp, #24]
   1d888:	cmp	r3, #0
   1d88c:	bne	1d944 <__assert_fail@plt+0xc1f0>
   1d890:	add	r4, r4, #1
   1d894:	ldr	r2, [sp, #20]
   1d898:	ldr	r3, [sp, #16]
   1d89c:	add	r3, r3, r2
   1d8a0:	str	r3, [sp, #16]
   1d8a4:	strb	r5, [sp, #12]
   1d8a8:	ldrb	r3, [sp, #12]
   1d8ac:	cmp	r3, #0
   1d8b0:	bne	1d884 <__assert_fail@plt+0xc130>
   1d8b4:	ldrb	r3, [sp]
   1d8b8:	cmp	r3, #0
   1d8bc:	bne	1d804 <__assert_fail@plt+0xc0b0>
   1d8c0:	ldr	r1, [sp, #16]
   1d8c4:	ldrb	r3, [r1]
   1d8c8:	lsr	r2, r3, #5
   1d8cc:	and	r3, r3, #31
   1d8d0:	ldr	r2, [r7, r2, lsl #2]
   1d8d4:	lsr	r3, r2, r3
   1d8d8:	tst	r3, #1
   1d8dc:	beq	1d7f0 <__assert_fail@plt+0xc09c>
   1d8e0:	str	r6, [sp, #20]
   1d8e4:	ldrb	r3, [r1]
   1d8e8:	str	r3, [sp, #28]
   1d8ec:	strb	r6, [sp, #24]
   1d8f0:	b	1d884 <__assert_fail@plt+0xc130>
   1d8f4:	ldr	r3, [pc, #116]	; 1d970 <__assert_fail@plt+0xc21c>
   1d8f8:	mov	r2, #143	; 0x8f
   1d8fc:	ldr	r1, [pc, #112]	; 1d974 <__assert_fail@plt+0xc220>
   1d900:	ldr	r0, [pc, #112]	; 1d978 <__assert_fail@plt+0xc224>
   1d904:	bl	11754 <__assert_fail@plt>
   1d908:	ldr	r0, [sp, #16]
   1d90c:	bl	115b0 <strlen@plt>
   1d910:	str	r0, [sp, #20]
   1d914:	strb	r5, [sp, #24]
   1d918:	b	1d884 <__assert_fail@plt+0xc130>
   1d91c:	ldr	r3, [pc, #76]	; 1d970 <__assert_fail@plt+0xc21c>
   1d920:	mov	r2, #171	; 0xab
   1d924:	ldr	r1, [pc, #72]	; 1d974 <__assert_fail@plt+0xc220>
   1d928:	ldr	r0, [pc, #76]	; 1d97c <__assert_fail@plt+0xc228>
   1d92c:	bl	11754 <__assert_fail@plt>
   1d930:	ldr	r3, [pc, #56]	; 1d970 <__assert_fail@plt+0xc21c>
   1d934:	mov	r2, #172	; 0xac
   1d938:	ldr	r1, [pc, #52]	; 1d974 <__assert_fail@plt+0xc220>
   1d93c:	ldr	r0, [pc, #60]	; 1d980 <__assert_fail@plt+0xc22c>
   1d940:	bl	11754 <__assert_fail@plt>
   1d944:	ldr	r3, [sp, #28]
   1d948:	cmp	r3, #0
   1d94c:	bne	1d890 <__assert_fail@plt+0xc13c>
   1d950:	mov	r0, r4
   1d954:	add	sp, sp, #56	; 0x38
   1d958:	pop	{r4, r5, r6, r7, r8, pc}
   1d95c:	mov	r0, r4
   1d960:	bl	115b0 <strlen@plt>
   1d964:	mov	r4, r0
   1d968:	b	1d950 <__assert_fail@plt+0xc1fc>
   1d96c:	andeq	r1, r2, ip, ror fp
   1d970:			; <UNDEFINED> instruction: 0x00021bbc
   1d974:	ldrdeq	r1, [r2], -r8
   1d978:	andeq	r1, r2, r8, ror #13
   1d97c:	andeq	r1, r2, r0, lsl #14
   1d980:	andeq	r1, r2, r8, lsl r7
   1d984:	push	{r4, r5, r6, lr}
   1d988:	mov	r6, r1
   1d98c:	mov	r4, r2
   1d990:	mov	r1, #0
   1d994:	bl	116c4 <setlocale@plt>
   1d998:	subs	r5, r0, #0
   1d99c:	beq	1d9c0 <__assert_fail@plt+0xc26c>
   1d9a0:	mov	r0, r5
   1d9a4:	bl	115b0 <strlen@plt>
   1d9a8:	cmp	r4, r0
   1d9ac:	bhi	1d9d8 <__assert_fail@plt+0xc284>
   1d9b0:	cmp	r4, #0
   1d9b4:	bne	1d9f0 <__assert_fail@plt+0xc29c>
   1d9b8:	mov	r0, #34	; 0x22
   1d9bc:	pop	{r4, r5, r6, pc}
   1d9c0:	cmp	r4, #0
   1d9c4:	beq	1da14 <__assert_fail@plt+0xc2c0>
   1d9c8:	mov	r3, #0
   1d9cc:	strb	r3, [r6]
   1d9d0:	mov	r0, #22
   1d9d4:	pop	{r4, r5, r6, pc}
   1d9d8:	add	r2, r0, #1
   1d9dc:	mov	r1, r5
   1d9e0:	mov	r0, r6
   1d9e4:	bl	113f4 <memcpy@plt>
   1d9e8:	mov	r0, #0
   1d9ec:	pop	{r4, r5, r6, pc}
   1d9f0:	sub	r4, r4, #1
   1d9f4:	mov	r2, r4
   1d9f8:	mov	r1, r5
   1d9fc:	mov	r0, r6
   1da00:	bl	113f4 <memcpy@plt>
   1da04:	mov	r3, #0
   1da08:	strb	r3, [r6, r4]
   1da0c:	mov	r0, #34	; 0x22
   1da10:	pop	{r4, r5, r6, pc}
   1da14:	mov	r0, #22
   1da18:	pop	{r4, r5, r6, pc}
   1da1c:	push	{r4, lr}
   1da20:	mov	r1, #0
   1da24:	bl	116c4 <setlocale@plt>
   1da28:	pop	{r4, pc}
   1da2c:	subs	r2, r1, #1
   1da30:	bxeq	lr
   1da34:	bcc	1dc0c <__assert_fail@plt+0xc4b8>
   1da38:	cmp	r0, r1
   1da3c:	bls	1dbf0 <__assert_fail@plt+0xc49c>
   1da40:	tst	r1, r2
   1da44:	beq	1dbfc <__assert_fail@plt+0xc4a8>
   1da48:	clz	r3, r0
   1da4c:	clz	r2, r1
   1da50:	sub	r3, r2, r3
   1da54:	rsbs	r3, r3, #31
   1da58:	addne	r3, r3, r3, lsl #1
   1da5c:	mov	r2, #0
   1da60:	addne	pc, pc, r3, lsl #2
   1da64:	nop			; (mov r0, r0)
   1da68:	cmp	r0, r1, lsl #31
   1da6c:	adc	r2, r2, r2
   1da70:	subcs	r0, r0, r1, lsl #31
   1da74:	cmp	r0, r1, lsl #30
   1da78:	adc	r2, r2, r2
   1da7c:	subcs	r0, r0, r1, lsl #30
   1da80:	cmp	r0, r1, lsl #29
   1da84:	adc	r2, r2, r2
   1da88:	subcs	r0, r0, r1, lsl #29
   1da8c:	cmp	r0, r1, lsl #28
   1da90:	adc	r2, r2, r2
   1da94:	subcs	r0, r0, r1, lsl #28
   1da98:	cmp	r0, r1, lsl #27
   1da9c:	adc	r2, r2, r2
   1daa0:	subcs	r0, r0, r1, lsl #27
   1daa4:	cmp	r0, r1, lsl #26
   1daa8:	adc	r2, r2, r2
   1daac:	subcs	r0, r0, r1, lsl #26
   1dab0:	cmp	r0, r1, lsl #25
   1dab4:	adc	r2, r2, r2
   1dab8:	subcs	r0, r0, r1, lsl #25
   1dabc:	cmp	r0, r1, lsl #24
   1dac0:	adc	r2, r2, r2
   1dac4:	subcs	r0, r0, r1, lsl #24
   1dac8:	cmp	r0, r1, lsl #23
   1dacc:	adc	r2, r2, r2
   1dad0:	subcs	r0, r0, r1, lsl #23
   1dad4:	cmp	r0, r1, lsl #22
   1dad8:	adc	r2, r2, r2
   1dadc:	subcs	r0, r0, r1, lsl #22
   1dae0:	cmp	r0, r1, lsl #21
   1dae4:	adc	r2, r2, r2
   1dae8:	subcs	r0, r0, r1, lsl #21
   1daec:	cmp	r0, r1, lsl #20
   1daf0:	adc	r2, r2, r2
   1daf4:	subcs	r0, r0, r1, lsl #20
   1daf8:	cmp	r0, r1, lsl #19
   1dafc:	adc	r2, r2, r2
   1db00:	subcs	r0, r0, r1, lsl #19
   1db04:	cmp	r0, r1, lsl #18
   1db08:	adc	r2, r2, r2
   1db0c:	subcs	r0, r0, r1, lsl #18
   1db10:	cmp	r0, r1, lsl #17
   1db14:	adc	r2, r2, r2
   1db18:	subcs	r0, r0, r1, lsl #17
   1db1c:	cmp	r0, r1, lsl #16
   1db20:	adc	r2, r2, r2
   1db24:	subcs	r0, r0, r1, lsl #16
   1db28:	cmp	r0, r1, lsl #15
   1db2c:	adc	r2, r2, r2
   1db30:	subcs	r0, r0, r1, lsl #15
   1db34:	cmp	r0, r1, lsl #14
   1db38:	adc	r2, r2, r2
   1db3c:	subcs	r0, r0, r1, lsl #14
   1db40:	cmp	r0, r1, lsl #13
   1db44:	adc	r2, r2, r2
   1db48:	subcs	r0, r0, r1, lsl #13
   1db4c:	cmp	r0, r1, lsl #12
   1db50:	adc	r2, r2, r2
   1db54:	subcs	r0, r0, r1, lsl #12
   1db58:	cmp	r0, r1, lsl #11
   1db5c:	adc	r2, r2, r2
   1db60:	subcs	r0, r0, r1, lsl #11
   1db64:	cmp	r0, r1, lsl #10
   1db68:	adc	r2, r2, r2
   1db6c:	subcs	r0, r0, r1, lsl #10
   1db70:	cmp	r0, r1, lsl #9
   1db74:	adc	r2, r2, r2
   1db78:	subcs	r0, r0, r1, lsl #9
   1db7c:	cmp	r0, r1, lsl #8
   1db80:	adc	r2, r2, r2
   1db84:	subcs	r0, r0, r1, lsl #8
   1db88:	cmp	r0, r1, lsl #7
   1db8c:	adc	r2, r2, r2
   1db90:	subcs	r0, r0, r1, lsl #7
   1db94:	cmp	r0, r1, lsl #6
   1db98:	adc	r2, r2, r2
   1db9c:	subcs	r0, r0, r1, lsl #6
   1dba0:	cmp	r0, r1, lsl #5
   1dba4:	adc	r2, r2, r2
   1dba8:	subcs	r0, r0, r1, lsl #5
   1dbac:	cmp	r0, r1, lsl #4
   1dbb0:	adc	r2, r2, r2
   1dbb4:	subcs	r0, r0, r1, lsl #4
   1dbb8:	cmp	r0, r1, lsl #3
   1dbbc:	adc	r2, r2, r2
   1dbc0:	subcs	r0, r0, r1, lsl #3
   1dbc4:	cmp	r0, r1, lsl #2
   1dbc8:	adc	r2, r2, r2
   1dbcc:	subcs	r0, r0, r1, lsl #2
   1dbd0:	cmp	r0, r1, lsl #1
   1dbd4:	adc	r2, r2, r2
   1dbd8:	subcs	r0, r0, r1, lsl #1
   1dbdc:	cmp	r0, r1
   1dbe0:	adc	r2, r2, r2
   1dbe4:	subcs	r0, r0, r1
   1dbe8:	mov	r0, r2
   1dbec:	bx	lr
   1dbf0:	moveq	r0, #1
   1dbf4:	movne	r0, #0
   1dbf8:	bx	lr
   1dbfc:	clz	r2, r1
   1dc00:	rsb	r2, r2, #31
   1dc04:	lsr	r0, r0, r2
   1dc08:	bx	lr
   1dc0c:	cmp	r0, #0
   1dc10:	mvnne	r0, #0
   1dc14:	b	1deb4 <__assert_fail@plt+0xc760>
   1dc18:	cmp	r1, #0
   1dc1c:	beq	1dc0c <__assert_fail@plt+0xc4b8>
   1dc20:	push	{r0, r1, lr}
   1dc24:	bl	1da2c <__assert_fail@plt+0xc2d8>
   1dc28:	pop	{r1, r2, lr}
   1dc2c:	mul	r3, r2, r0
   1dc30:	sub	r1, r1, r3
   1dc34:	bx	lr
   1dc38:	cmp	r1, #0
   1dc3c:	beq	1de48 <__assert_fail@plt+0xc6f4>
   1dc40:	eor	ip, r0, r1
   1dc44:	rsbmi	r1, r1, #0
   1dc48:	subs	r2, r1, #1
   1dc4c:	beq	1de14 <__assert_fail@plt+0xc6c0>
   1dc50:	movs	r3, r0
   1dc54:	rsbmi	r3, r0, #0
   1dc58:	cmp	r3, r1
   1dc5c:	bls	1de20 <__assert_fail@plt+0xc6cc>
   1dc60:	tst	r1, r2
   1dc64:	beq	1de30 <__assert_fail@plt+0xc6dc>
   1dc68:	clz	r2, r3
   1dc6c:	clz	r0, r1
   1dc70:	sub	r2, r0, r2
   1dc74:	rsbs	r2, r2, #31
   1dc78:	addne	r2, r2, r2, lsl #1
   1dc7c:	mov	r0, #0
   1dc80:	addne	pc, pc, r2, lsl #2
   1dc84:	nop			; (mov r0, r0)
   1dc88:	cmp	r3, r1, lsl #31
   1dc8c:	adc	r0, r0, r0
   1dc90:	subcs	r3, r3, r1, lsl #31
   1dc94:	cmp	r3, r1, lsl #30
   1dc98:	adc	r0, r0, r0
   1dc9c:	subcs	r3, r3, r1, lsl #30
   1dca0:	cmp	r3, r1, lsl #29
   1dca4:	adc	r0, r0, r0
   1dca8:	subcs	r3, r3, r1, lsl #29
   1dcac:	cmp	r3, r1, lsl #28
   1dcb0:	adc	r0, r0, r0
   1dcb4:	subcs	r3, r3, r1, lsl #28
   1dcb8:	cmp	r3, r1, lsl #27
   1dcbc:	adc	r0, r0, r0
   1dcc0:	subcs	r3, r3, r1, lsl #27
   1dcc4:	cmp	r3, r1, lsl #26
   1dcc8:	adc	r0, r0, r0
   1dccc:	subcs	r3, r3, r1, lsl #26
   1dcd0:	cmp	r3, r1, lsl #25
   1dcd4:	adc	r0, r0, r0
   1dcd8:	subcs	r3, r3, r1, lsl #25
   1dcdc:	cmp	r3, r1, lsl #24
   1dce0:	adc	r0, r0, r0
   1dce4:	subcs	r3, r3, r1, lsl #24
   1dce8:	cmp	r3, r1, lsl #23
   1dcec:	adc	r0, r0, r0
   1dcf0:	subcs	r3, r3, r1, lsl #23
   1dcf4:	cmp	r3, r1, lsl #22
   1dcf8:	adc	r0, r0, r0
   1dcfc:	subcs	r3, r3, r1, lsl #22
   1dd00:	cmp	r3, r1, lsl #21
   1dd04:	adc	r0, r0, r0
   1dd08:	subcs	r3, r3, r1, lsl #21
   1dd0c:	cmp	r3, r1, lsl #20
   1dd10:	adc	r0, r0, r0
   1dd14:	subcs	r3, r3, r1, lsl #20
   1dd18:	cmp	r3, r1, lsl #19
   1dd1c:	adc	r0, r0, r0
   1dd20:	subcs	r3, r3, r1, lsl #19
   1dd24:	cmp	r3, r1, lsl #18
   1dd28:	adc	r0, r0, r0
   1dd2c:	subcs	r3, r3, r1, lsl #18
   1dd30:	cmp	r3, r1, lsl #17
   1dd34:	adc	r0, r0, r0
   1dd38:	subcs	r3, r3, r1, lsl #17
   1dd3c:	cmp	r3, r1, lsl #16
   1dd40:	adc	r0, r0, r0
   1dd44:	subcs	r3, r3, r1, lsl #16
   1dd48:	cmp	r3, r1, lsl #15
   1dd4c:	adc	r0, r0, r0
   1dd50:	subcs	r3, r3, r1, lsl #15
   1dd54:	cmp	r3, r1, lsl #14
   1dd58:	adc	r0, r0, r0
   1dd5c:	subcs	r3, r3, r1, lsl #14
   1dd60:	cmp	r3, r1, lsl #13
   1dd64:	adc	r0, r0, r0
   1dd68:	subcs	r3, r3, r1, lsl #13
   1dd6c:	cmp	r3, r1, lsl #12
   1dd70:	adc	r0, r0, r0
   1dd74:	subcs	r3, r3, r1, lsl #12
   1dd78:	cmp	r3, r1, lsl #11
   1dd7c:	adc	r0, r0, r0
   1dd80:	subcs	r3, r3, r1, lsl #11
   1dd84:	cmp	r3, r1, lsl #10
   1dd88:	adc	r0, r0, r0
   1dd8c:	subcs	r3, r3, r1, lsl #10
   1dd90:	cmp	r3, r1, lsl #9
   1dd94:	adc	r0, r0, r0
   1dd98:	subcs	r3, r3, r1, lsl #9
   1dd9c:	cmp	r3, r1, lsl #8
   1dda0:	adc	r0, r0, r0
   1dda4:	subcs	r3, r3, r1, lsl #8
   1dda8:	cmp	r3, r1, lsl #7
   1ddac:	adc	r0, r0, r0
   1ddb0:	subcs	r3, r3, r1, lsl #7
   1ddb4:	cmp	r3, r1, lsl #6
   1ddb8:	adc	r0, r0, r0
   1ddbc:	subcs	r3, r3, r1, lsl #6
   1ddc0:	cmp	r3, r1, lsl #5
   1ddc4:	adc	r0, r0, r0
   1ddc8:	subcs	r3, r3, r1, lsl #5
   1ddcc:	cmp	r3, r1, lsl #4
   1ddd0:	adc	r0, r0, r0
   1ddd4:	subcs	r3, r3, r1, lsl #4
   1ddd8:	cmp	r3, r1, lsl #3
   1dddc:	adc	r0, r0, r0
   1dde0:	subcs	r3, r3, r1, lsl #3
   1dde4:	cmp	r3, r1, lsl #2
   1dde8:	adc	r0, r0, r0
   1ddec:	subcs	r3, r3, r1, lsl #2
   1ddf0:	cmp	r3, r1, lsl #1
   1ddf4:	adc	r0, r0, r0
   1ddf8:	subcs	r3, r3, r1, lsl #1
   1ddfc:	cmp	r3, r1
   1de00:	adc	r0, r0, r0
   1de04:	subcs	r3, r3, r1
   1de08:	cmp	ip, #0
   1de0c:	rsbmi	r0, r0, #0
   1de10:	bx	lr
   1de14:	teq	ip, r0
   1de18:	rsbmi	r0, r0, #0
   1de1c:	bx	lr
   1de20:	movcc	r0, #0
   1de24:	asreq	r0, ip, #31
   1de28:	orreq	r0, r0, #1
   1de2c:	bx	lr
   1de30:	clz	r2, r1
   1de34:	rsb	r2, r2, #31
   1de38:	cmp	ip, #0
   1de3c:	lsr	r0, r3, r2
   1de40:	rsbmi	r0, r0, #0
   1de44:	bx	lr
   1de48:	cmp	r0, #0
   1de4c:	mvngt	r0, #-2147483648	; 0x80000000
   1de50:	movlt	r0, #-2147483648	; 0x80000000
   1de54:	b	1deb4 <__assert_fail@plt+0xc760>
   1de58:	cmp	r1, #0
   1de5c:	beq	1de48 <__assert_fail@plt+0xc6f4>
   1de60:	push	{r0, r1, lr}
   1de64:	bl	1dc40 <__assert_fail@plt+0xc4ec>
   1de68:	pop	{r1, r2, lr}
   1de6c:	mul	r3, r2, r0
   1de70:	sub	r1, r1, r3
   1de74:	bx	lr
   1de78:	cmp	r3, #0
   1de7c:	cmpeq	r2, #0
   1de80:	bne	1de98 <__assert_fail@plt+0xc744>
   1de84:	cmp	r1, #0
   1de88:	cmpeq	r0, #0
   1de8c:	mvnne	r1, #0
   1de90:	mvnne	r0, #0
   1de94:	b	1deb4 <__assert_fail@plt+0xc760>
   1de98:	sub	sp, sp, #8
   1de9c:	push	{sp, lr}
   1dea0:	bl	1dec4 <__assert_fail@plt+0xc770>
   1dea4:	ldr	lr, [sp, #4]
   1dea8:	add	sp, sp, #8
   1deac:	pop	{r2, r3}
   1deb0:	bx	lr
   1deb4:	push	{r1, lr}
   1deb8:	mov	r0, #8
   1debc:	bl	11358 <raise@plt>
   1dec0:	pop	{r1, pc}
   1dec4:	cmp	r1, r3
   1dec8:	push	{r4, r5, r6, r7, r8, r9, lr}
   1decc:	cmpeq	r0, r2
   1ded0:	mov	r4, r0
   1ded4:	mov	r5, r1
   1ded8:	ldr	r9, [sp, #28]
   1dedc:	movcc	r0, #0
   1dee0:	movcc	r1, #0
   1dee4:	bcc	1dfdc <__assert_fail@plt+0xc888>
   1dee8:	cmp	r3, #0
   1deec:	clzeq	ip, r2
   1def0:	clzne	ip, r3
   1def4:	addeq	ip, ip, #32
   1def8:	cmp	r5, #0
   1defc:	clzeq	r1, r4
   1df00:	addeq	r1, r1, #32
   1df04:	clzne	r1, r5
   1df08:	sub	ip, ip, r1
   1df0c:	sub	lr, ip, #32
   1df10:	lsl	r7, r3, ip
   1df14:	rsb	r8, ip, #32
   1df18:	orr	r7, r7, r2, lsl lr
   1df1c:	orr	r7, r7, r2, lsr r8
   1df20:	lsl	r6, r2, ip
   1df24:	cmp	r5, r7
   1df28:	cmpeq	r4, r6
   1df2c:	movcc	r0, #0
   1df30:	movcc	r1, #0
   1df34:	bcc	1df50 <__assert_fail@plt+0xc7fc>
   1df38:	mov	r3, #1
   1df3c:	subs	r4, r4, r6
   1df40:	lsl	r1, r3, lr
   1df44:	lsl	r0, r3, ip
   1df48:	orr	r1, r1, r3, lsr r8
   1df4c:	sbc	r5, r5, r7
   1df50:	cmp	ip, #0
   1df54:	beq	1dfdc <__assert_fail@plt+0xc888>
   1df58:	lsrs	r3, r7, #1
   1df5c:	rrx	r2, r6
   1df60:	mov	r6, ip
   1df64:	b	1df88 <__assert_fail@plt+0xc834>
   1df68:	subs	r4, r4, r2
   1df6c:	sbc	r5, r5, r3
   1df70:	adds	r4, r4, r4
   1df74:	adc	r5, r5, r5
   1df78:	adds	r4, r4, #1
   1df7c:	adc	r5, r5, #0
   1df80:	subs	r6, r6, #1
   1df84:	beq	1dfa4 <__assert_fail@plt+0xc850>
   1df88:	cmp	r5, r3
   1df8c:	cmpeq	r4, r2
   1df90:	bcs	1df68 <__assert_fail@plt+0xc814>
   1df94:	adds	r4, r4, r4
   1df98:	adc	r5, r5, r5
   1df9c:	subs	r6, r6, #1
   1dfa0:	bne	1df88 <__assert_fail@plt+0xc834>
   1dfa4:	lsr	r6, r4, ip
   1dfa8:	lsr	r7, r5, ip
   1dfac:	orr	r6, r6, r5, lsl r8
   1dfb0:	adds	r2, r0, r4
   1dfb4:	orr	r6, r6, r5, lsr lr
   1dfb8:	adc	r3, r1, r5
   1dfbc:	lsl	r1, r7, ip
   1dfc0:	orr	r1, r1, r6, lsl lr
   1dfc4:	lsl	r0, r6, ip
   1dfc8:	orr	r1, r1, r6, lsr r8
   1dfcc:	subs	r0, r2, r0
   1dfd0:	mov	r4, r6
   1dfd4:	mov	r5, r7
   1dfd8:	sbc	r1, r3, r1
   1dfdc:	cmp	r9, #0
   1dfe0:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1dfe4:	strd	r4, [r9]
   1dfe8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1dfec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1dff0:	mov	r7, r0
   1dff4:	ldr	r6, [pc, #72]	; 1e044 <__assert_fail@plt+0xc8f0>
   1dff8:	ldr	r5, [pc, #72]	; 1e048 <__assert_fail@plt+0xc8f4>
   1dffc:	add	r6, pc, r6
   1e000:	add	r5, pc, r5
   1e004:	sub	r6, r6, r5
   1e008:	mov	r8, r1
   1e00c:	mov	r9, r2
   1e010:	bl	11320 <calloc@plt-0x20>
   1e014:	asrs	r6, r6, #2
   1e018:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e01c:	mov	r4, #0
   1e020:	add	r4, r4, #1
   1e024:	ldr	r3, [r5], #4
   1e028:	mov	r2, r9
   1e02c:	mov	r1, r8
   1e030:	mov	r0, r7
   1e034:	blx	r3
   1e038:	cmp	r6, r4
   1e03c:	bne	1e020 <__assert_fail@plt+0xc8cc>
   1e040:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e044:	andeq	r3, r1, r4, lsl #30
   1e048:	strdeq	r3, [r1], -ip
   1e04c:	bx	lr
   1e050:	ldr	r3, [pc, #12]	; 1e064 <__assert_fail@plt+0xc910>
   1e054:	mov	r1, #0
   1e058:	add	r3, pc, r3
   1e05c:	ldr	r2, [r3]
   1e060:	b	11604 <__cxa_atexit@plt>
   1e064:	andeq	r4, r1, r4, lsl r1

Disassembly of section .fini:

0001e068 <.fini>:
   1e068:	push	{r3, lr}
   1e06c:	pop	{r3, pc}
