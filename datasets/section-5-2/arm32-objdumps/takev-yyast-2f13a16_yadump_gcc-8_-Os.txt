
../repos/takev-yyast-2f13a16/yyast/yadump:     file format elf32-littlearm


Disassembly of section .init:

000104ac <.init>:
   104ac:	push	{r3, lr}
   104b0:	bl	106b4 <close@plt+0x140>
   104b4:	pop	{r3, pc}

Disassembly of section .plt:

000104b8 <free@plt-0x14>:
   104b8:	push	{lr}		; (str lr, [sp, #-4]!)
   104bc:	ldr	lr, [pc, #4]	; 104c8 <free@plt-0x4>
   104c0:	add	lr, pc, lr
   104c4:	ldr	pc, [lr, #8]!
   104c8:	andeq	r0, r1, r8, lsr fp

000104cc <free@plt>:
   104cc:	add	ip, pc, #0, 12
   104d0:	add	ip, ip, #16, 20	; 0x10000
   104d4:	ldr	pc, [ip, #2872]!	; 0xb38

000104d8 <strndup@plt>:
   104d8:	add	ip, pc, #0, 12
   104dc:	add	ip, ip, #16, 20	; 0x10000
   104e0:	ldr	pc, [ip, #2864]!	; 0xb30

000104e4 <perror@plt>:
   104e4:	add	ip, pc, #0, 12
   104e8:	add	ip, ip, #16, 20	; 0x10000
   104ec:	ldr	pc, [ip, #2856]!	; 0xb28

000104f0 <__libc_start_main@plt>:
   104f0:	add	ip, pc, #0, 12
   104f4:	add	ip, ip, #16, 20	; 0x10000
   104f8:	ldr	pc, [ip, #2848]!	; 0xb20

000104fc <__fxstat@plt>:
   104fc:	add	ip, pc, #0, 12
   10500:	add	ip, ip, #16, 20	; 0x10000
   10504:	ldr	pc, [ip, #2840]!	; 0xb18

00010508 <__gmon_start__@plt>:
   10508:	add	ip, pc, #0, 12
   1050c:	add	ip, ip, #16, 20	; 0x10000
   10510:	ldr	pc, [ip, #2832]!	; 0xb10

00010514 <open@plt>:
   10514:	add	ip, pc, #0, 12
   10518:	add	ip, ip, #16, 20	; 0x10000
   1051c:	ldr	pc, [ip, #2824]!	; 0xb08

00010520 <exit@plt>:
   10520:	add	ip, pc, #0, 12
   10524:	add	ip, ip, #16, 20	; 0x10000
   10528:	ldr	pc, [ip, #2816]!	; 0xb00

0001052c <mmap@plt>:
   1052c:	add	ip, pc, #0, 12
   10530:	add	ip, ip, #16, 20	; 0x10000
   10534:	ldr	pc, [ip, #2808]!	; 0xaf8

00010538 <fprintf@plt>:
   10538:	add	ip, pc, #0, 12
   1053c:	add	ip, ip, #16, 20	; 0x10000
   10540:	ldr	pc, [ip, #2800]!	; 0xaf0

00010544 <munmap@plt>:
   10544:	add	ip, pc, #0, 12
   10548:	add	ip, ip, #16, 20	; 0x10000
   1054c:	ldr	pc, [ip, #2792]!	; 0xae8

00010550 <fputc@plt>:
   10550:	add	ip, pc, #0, 12
   10554:	add	ip, ip, #16, 20	; 0x10000
   10558:	ldr	pc, [ip, #2784]!	; 0xae0

0001055c <fputs@plt>:
   1055c:	add	ip, pc, #0, 12
   10560:	add	ip, ip, #16, 20	; 0x10000
   10564:	ldr	pc, [ip, #2776]!	; 0xad8

00010568 <abort@plt>:
   10568:	add	ip, pc, #0, 12
   1056c:	add	ip, ip, #16, 20	; 0x10000
   10570:	ldr	pc, [ip, #2768]!	; 0xad0

00010574 <close@plt>:
   10574:	add	ip, pc, #0, 12
   10578:	add	ip, ip, #16, 20	; 0x10000
   1057c:	ldr	pc, [ip, #2760]!	; 0xac8

Disassembly of section .text:

00010580 <.text>:
   10580:	cmp	r0, #2
   10584:	push	{r4, r5, r6, r7, lr}
   10588:	sub	sp, sp, #100	; 0x64
   1058c:	beq	105a8 <close@plt+0x34>
   10590:	ldr	r3, [pc, #196]	; 1065c <close@plt+0xe8>
   10594:	ldr	r0, [pc, #196]	; 10660 <close@plt+0xec>
   10598:	ldr	r1, [r3]
   1059c:	bl	1055c <fputs@plt>
   105a0:	mov	r0, #1
   105a4:	bl	10520 <exit@plt>
   105a8:	mov	r3, r1
   105ac:	mov	r1, #0
   105b0:	ldr	r0, [r3, #4]
   105b4:	bl	10514 <open@plt>
   105b8:	cmn	r0, #1
   105bc:	mov	r5, r0
   105c0:	bne	105d0 <close@plt+0x5c>
   105c4:	ldr	r0, [pc, #152]	; 10664 <close@plt+0xf0>
   105c8:	bl	104e4 <perror@plt>
   105cc:	b	105a0 <close@plt+0x2c>
   105d0:	add	r1, sp, #8
   105d4:	bl	10ad0 <close@plt+0x55c>
   105d8:	cmn	r0, #1
   105dc:	ldreq	r0, [pc, #132]	; 10668 <close@plt+0xf4>
   105e0:	beq	105c8 <close@plt+0x54>
   105e4:	mov	r4, #0
   105e8:	mov	r3, #1
   105ec:	str	r5, [sp]
   105f0:	ldr	r6, [sp, #52]	; 0x34
   105f4:	mov	r2, r3
   105f8:	mov	r0, r4
   105fc:	str	r4, [sp, #4]
   10600:	mov	r1, r6
   10604:	bl	1052c <mmap@plt>
   10608:	cmn	r0, #1
   1060c:	mov	r7, r0
   10610:	ldreq	r0, [pc, #84]	; 1066c <close@plt+0xf8>
   10614:	beq	105c8 <close@plt+0x54>
   10618:	mov	r2, r4
   1061c:	mov	r1, r6
   10620:	bl	107fc <close@plt+0x288>
   10624:	mov	r1, r6
   10628:	mov	r0, r7
   1062c:	bl	10544 <munmap@plt>
   10630:	cmn	r0, #1
   10634:	ldreq	r0, [pc, #52]	; 10670 <close@plt+0xfc>
   10638:	beq	105c8 <close@plt+0x54>
   1063c:	mov	r0, r5
   10640:	bl	10574 <close@plt>
   10644:	cmn	r0, #1
   10648:	ldreq	r0, [pc, #36]	; 10674 <close@plt+0x100>
   1064c:	beq	105c8 <close@plt+0x54>
   10650:	mov	r0, r4
   10654:	add	sp, sp, #100	; 0x64
   10658:	pop	{r4, r5, r6, r7, pc}
   1065c:	andeq	r1, r2, r8, asr r0
   10660:	andeq	r0, r1, r9, asr #23
   10664:	andeq	r0, r1, r9, ror #23
   10668:	strdeq	r0, [r1], -lr
   1066c:	andeq	r0, r1, r7, lsl ip
   10670:	andeq	r0, r1, r9, lsr ip
   10674:	andeq	r0, r1, pc, asr ip
   10678:	mov	fp, #0
   1067c:	mov	lr, #0
   10680:	pop	{r1}		; (ldr r1, [sp], #4)
   10684:	mov	r2, sp
   10688:	push	{r2}		; (str r2, [sp, #-4]!)
   1068c:	push	{r0}		; (str r0, [sp, #-4]!)
   10690:	ldr	ip, [pc, #16]	; 106a8 <close@plt+0x134>
   10694:	push	{ip}		; (str ip, [sp, #-4]!)
   10698:	ldr	r0, [pc, #12]	; 106ac <close@plt+0x138>
   1069c:	ldr	r3, [pc, #12]	; 106b0 <close@plt+0x13c>
   106a0:	bl	104f0 <__libc_start_main@plt>
   106a4:	bl	10568 <abort@plt>
   106a8:	andeq	r0, r1, ip, asr #21
   106ac:	andeq	r0, r1, r0, lsl #11
   106b0:	andeq	r0, r1, ip, ror #20
   106b4:	ldr	r3, [pc, #20]	; 106d0 <close@plt+0x15c>
   106b8:	ldr	r2, [pc, #20]	; 106d4 <close@plt+0x160>
   106bc:	add	r3, pc, r3
   106c0:	ldr	r2, [r3, r2]
   106c4:	cmp	r2, #0
   106c8:	bxeq	lr
   106cc:	b	10508 <__gmon_start__@plt>
   106d0:	andeq	r0, r1, ip, lsr r9
   106d4:	andeq	r0, r0, r8, asr #32
   106d8:	ldr	r0, [pc, #24]	; 106f8 <close@plt+0x184>
   106dc:	ldr	r3, [pc, #24]	; 106fc <close@plt+0x188>
   106e0:	cmp	r3, r0
   106e4:	bxeq	lr
   106e8:	ldr	r3, [pc, #16]	; 10700 <close@plt+0x18c>
   106ec:	cmp	r3, #0
   106f0:	bxeq	lr
   106f4:	bx	r3
   106f8:	andeq	r1, r2, r4, asr r0
   106fc:	andeq	r1, r2, r4, asr r0
   10700:	andeq	r0, r0, r0
   10704:	ldr	r0, [pc, #36]	; 10730 <close@plt+0x1bc>
   10708:	ldr	r1, [pc, #36]	; 10734 <close@plt+0x1c0>
   1070c:	sub	r1, r1, r0
   10710:	asr	r1, r1, #2
   10714:	add	r1, r1, r1, lsr #31
   10718:	asrs	r1, r1, #1
   1071c:	bxeq	lr
   10720:	ldr	r3, [pc, #16]	; 10738 <close@plt+0x1c4>
   10724:	cmp	r3, #0
   10728:	bxeq	lr
   1072c:	bx	r3
   10730:	andeq	r1, r2, r4, asr r0
   10734:	andeq	r1, r2, r4, asr r0
   10738:	andeq	r0, r0, r0
   1073c:	push	{r4, lr}
   10740:	ldr	r4, [pc, #24]	; 10760 <close@plt+0x1ec>
   10744:	ldrb	r3, [r4]
   10748:	cmp	r3, #0
   1074c:	popne	{r4, pc}
   10750:	bl	106d8 <close@plt+0x164>
   10754:	mov	r3, #1
   10758:	strb	r3, [r4]
   1075c:	pop	{r4, pc}
   10760:	andeq	r1, r2, r0, rrx
   10764:	b	10704 <close@plt+0x190>
   10768:	push	{r4, r5, r6, r7, r8, lr}
   1076c:	mov	r5, r0
   10770:	mov	r4, #0
   10774:	ldr	r6, [pc, #28]	; 10798 <close@plt+0x224>
   10778:	ldr	r7, [pc, #28]	; 1079c <close@plt+0x228>
   1077c:	cmp	r4, r5
   10780:	popeq	{r4, r5, r6, r7, r8, pc}
   10784:	mov	r0, r7
   10788:	add	r4, r4, #1
   1078c:	ldr	r1, [r6]
   10790:	bl	1055c <fputs@plt>
   10794:	b	1077c <close@plt+0x208>
   10798:	andeq	r1, r2, ip, asr r0
   1079c:	andeq	r0, r1, r8, ror fp
   107a0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   107a4:	uxtb	r3, r0
   107a8:	lsr	r2, r1, #24
   107ac:	str	r3, [sp, #20]
   107b0:	ubfx	r3, r0, #8, #8
   107b4:	str	r3, [sp, #16]
   107b8:	ubfx	r3, r0, #16, #8
   107bc:	lsr	r0, r0, #24
   107c0:	str	r3, [sp, #12]
   107c4:	uxtb	r3, r1
   107c8:	str	r3, [sp, #4]
   107cc:	ubfx	r3, r1, #8, #8
   107d0:	str	r0, [sp, #8]
   107d4:	ldr	r0, [pc, #24]	; 107f4 <close@plt+0x280>
   107d8:	str	r3, [sp]
   107dc:	ubfx	r3, r1, #16, #8
   107e0:	ldr	r1, [pc, #16]	; 107f8 <close@plt+0x284>
   107e4:	ldr	r0, [r0]
   107e8:	bl	10538 <fprintf@plt>
   107ec:	add	sp, sp, #28
   107f0:	pop	{pc}		; (ldr pc, [sp], #4)
   107f4:	andeq	r1, r2, ip, asr r0
   107f8:	andeq	r0, r1, ip, ror #21
   107fc:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   10800:	cmp	r1, #31
   10804:	mov	r4, r0
   10808:	ldr	r6, [pc, #540]	; 10a2c <close@plt+0x4b8>
   1080c:	ldr	r0, [r6]
   10810:	bhi	10828 <close@plt+0x2b4>
   10814:	mov	r1, r0
   10818:	ldr	r0, [pc, #528]	; 10a30 <close@plt+0x4bc>
   1081c:	bl	1055c <fputs@plt>
   10820:	mov	r0, #1
   10824:	bl	10520 <exit@plt>
   10828:	mov	r7, r2
   1082c:	ldrd	r8, [r4]
   10830:	mov	r3, #0
   10834:	ldr	r5, [r4, #12]
   10838:	ldr	r2, [r4, #24]
   1083c:	rev	r8, r8
   10840:	rev	r9, r9
   10844:	ldrb	sl, [r4, #31]
   10848:	rev	r5, r5
   1084c:	sub	r5, r5, #32
   10850:	cmp	r1, r5
   10854:	rev	r2, r2
   10858:	bcs	10870 <close@plt+0x2fc>
   1085c:	mov	r2, r5
   10860:	stm	sp, {r1, r3}
   10864:	ldr	r1, [pc, #456]	; 10a34 <close@plt+0x4c0>
   10868:	bl	10538 <fprintf@plt>
   1086c:	b	10820 <close@plt+0x2ac>
   10870:	cmn	r2, #1
   10874:	beq	108f0 <close@plt+0x37c>
   10878:	ldr	r3, [r4, #16]
   1087c:	ldr	r1, [r4, #20]
   10880:	rev	r3, r3
   10884:	rev	r1, r1
   10888:	str	r1, [sp]
   1088c:	ldr	r1, [pc, #420]	; 10a38 <close@plt+0x4c4>
   10890:	bl	10538 <fprintf@plt>
   10894:	mov	r2, r5
   10898:	mov	r3, #0
   1089c:	ldr	r1, [pc, #408]	; 10a3c <close@plt+0x4c8>
   108a0:	ldr	r0, [r6]
   108a4:	bl	10538 <fprintf@plt>
   108a8:	mov	r0, r7
   108ac:	bl	10768 <close@plt+0x1f4>
   108b0:	mov	r0, #32
   108b4:	ldr	r1, [r6]
   108b8:	bl	10550 <fputc@plt>
   108bc:	mov	r0, r9
   108c0:	mov	r1, r8
   108c4:	bl	107a0 <close@plt+0x22c>
   108c8:	cmp	sl, #6
   108cc:	ldrls	pc, [pc, sl, lsl #2]
   108d0:	b	10a1c <close@plt+0x4a8>
   108d4:	ldrdeq	r0, [r1], -r4
   108d8:	andeq	r0, r1, ip, lsl sl
   108dc:	andeq	r0, r1, r4, ror #19
   108e0:	andeq	r0, r1, r8, lsr #19
   108e4:	andeq	r0, r1, r0, lsl #18
   108e8:	andeq	r0, r1, r4, asr #18
   108ec:	andeq	r0, r1, r0, ror r9
   108f0:	mov	r1, r0
   108f4:	ldr	r0, [pc, #324]	; 10a40 <close@plt+0x4cc>
   108f8:	bl	1055c <fputs@plt>
   108fc:	b	10894 <close@plt+0x320>
   10900:	cmp	r5, #8
   10904:	ldr	r0, [r6]
   10908:	movne	r2, r5
   1090c:	ldrne	r1, [pc, #304]	; 10a44 <close@plt+0x4d0>
   10910:	bne	109a0 <close@plt+0x42c>
   10914:	ldr	r3, [r4, #32]
   10918:	ldr	r2, [r4, #36]	; 0x24
   1091c:	ldr	r1, [pc, #292]	; 10a48 <close@plt+0x4d4>
   10920:	rev	r3, r3
   10924:	rev	r2, r2
   10928:	bl	10538 <fprintf@plt>
   1092c:	ldr	r0, [r4, #12]
   10930:	rev	r0, r0
   10934:	add	r0, r0, #7
   10938:	bic	r0, r0, #7
   1093c:	add	sp, sp, #8
   10940:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10944:	cmp	r5, #8
   10948:	ldr	r0, [r6]
   1094c:	movne	r2, r5
   10950:	ldrne	r1, [pc, #244]	; 10a4c <close@plt+0x4d8>
   10954:	bne	109a0 <close@plt+0x42c>
   10958:	ldr	r3, [r4, #32]
   1095c:	ldr	r2, [r4, #36]	; 0x24
   10960:	ldr	r1, [pc, #232]	; 10a50 <close@plt+0x4dc>
   10964:	rev	r3, r3
   10968:	rev	r2, r2
   1096c:	b	10928 <close@plt+0x3b4>
   10970:	cmp	r5, #8
   10974:	ldr	r0, [r6]
   10978:	movne	r2, r5
   1097c:	ldrne	r1, [pc, #208]	; 10a54 <close@plt+0x4e0>
   10980:	bne	109a0 <close@plt+0x42c>
   10984:	ldr	r1, [r4, #32]
   10988:	ldr	ip, [r4, #36]	; 0x24
   1098c:	rev	r3, r1
   10990:	ldr	r1, [pc, #192]	; 10a58 <close@plt+0x4e4>
   10994:	rev	r2, ip
   10998:	bl	10538 <fprintf@plt>
   1099c:	b	1092c <close@plt+0x3b8>
   109a0:	bl	10538 <fprintf@plt>
   109a4:	b	1092c <close@plt+0x3b8>
   109a8:	mov	r1, r5
   109ac:	add	r0, r4, #32
   109b0:	bl	104d8 <strndup@plt>
   109b4:	mov	r5, r0
   109b8:	mov	r2, r0
   109bc:	ldr	r1, [pc, #152]	; 10a5c <close@plt+0x4e8>
   109c0:	ldr	r0, [r6]
   109c4:	bl	10538 <fprintf@plt>
   109c8:	mov	r0, r5
   109cc:	bl	104cc <free@plt>
   109d0:	b	1092c <close@plt+0x3b8>
   109d4:	ldr	r0, [pc, #132]	; 10a60 <close@plt+0x4ec>
   109d8:	ldr	r1, [r6]
   109dc:	bl	1055c <fputs@plt>
   109e0:	b	1092c <close@plt+0x3b8>
   109e4:	mov	r0, #10
   109e8:	add	r7, r7, #1
   109ec:	ldr	r1, [r6]
   109f0:	mov	r6, #0
   109f4:	bl	10550 <fputc@plt>
   109f8:	cmp	r6, r5
   109fc:	bcs	1092c <close@plt+0x3b8>
   10a00:	add	r0, r6, #32
   10a04:	sub	r1, r5, r6
   10a08:	mov	r2, r7
   10a0c:	add	r0, r4, r0
   10a10:	bl	107fc <close@plt+0x288>
   10a14:	add	r6, r6, r0
   10a18:	b	109f8 <close@plt+0x484>
   10a1c:	ldr	r3, [pc, #64]	; 10a64 <close@plt+0x4f0>
   10a20:	ldr	r0, [pc, #64]	; 10a68 <close@plt+0x4f4>
   10a24:	ldr	r1, [r3]
   10a28:	b	109dc <close@plt+0x468>
   10a2c:	andeq	r1, r2, ip, asr r0
   10a30:	strdeq	r0, [r1], -pc	; <UNPREDICTABLE>
   10a34:	andeq	r0, r1, r7, lsr #22
   10a38:	andeq	r0, r1, r0, ror #22
   10a3c:	andeq	r0, r1, fp, ror fp
   10a40:	andeq	r0, r1, pc, ror #22
   10a44:	andeq	r0, r1, ip, lsl #23
   10a48:	andeq	r0, r1, r4, lsl #23
   10a4c:	muleq	r1, fp, fp
   10a50:	muleq	r1, r3, fp
   10a54:	andeq	r0, r1, r8, lsr #23
   10a58:	andeq	r0, r1, r2, lsr #23
   10a5c:	andeq	r0, r1, pc, lsr #23
   10a60:			; <UNDEFINED> instruction: 0x00010bb6
   10a64:	andeq	r1, r2, r8, asr r0
   10a68:			; <UNDEFINED> instruction: 0x00010bbd
   10a6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a70:	mov	r7, r0
   10a74:	ldr	r6, [pc, #72]	; 10ac4 <close@plt+0x550>
   10a78:	ldr	r5, [pc, #72]	; 10ac8 <close@plt+0x554>
   10a7c:	add	r6, pc, r6
   10a80:	add	r5, pc, r5
   10a84:	sub	r6, r6, r5
   10a88:	mov	r8, r1
   10a8c:	mov	r9, r2
   10a90:	bl	104ac <free@plt-0x20>
   10a94:	asrs	r6, r6, #2
   10a98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a9c:	mov	r4, #0
   10aa0:	add	r4, r4, #1
   10aa4:	ldr	r3, [r5], #4
   10aa8:	mov	r2, r9
   10aac:	mov	r1, r8
   10ab0:	mov	r0, r7
   10ab4:	blx	r3
   10ab8:	cmp	r6, r4
   10abc:	bne	10aa0 <close@plt+0x52c>
   10ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ac4:	muleq	r1, r0, r4
   10ac8:	andeq	r0, r1, r8, lsl #9
   10acc:	bx	lr
   10ad0:	mov	r2, r1
   10ad4:	mov	r1, r0
   10ad8:	mov	r0, #3
   10adc:	b	104fc <__fxstat@plt>

Disassembly of section .fini:

00010ae0 <.fini>:
   10ae0:	push	{r3, lr}
   10ae4:	pop	{r3, pc}
