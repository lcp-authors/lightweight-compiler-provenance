
../repos/dvidelabs-flatcc-3b39ef7/test/emit_test/emit_test:     file format elf32-littlearm


Disassembly of section .init:

000123c4 <.init>:
   123c4:	push	{r3, lr}
   123c8:	bl	124f8 <_start@@Base+0x3c>
   123cc:	pop	{r3, pc}

Disassembly of section .plt:

000123d0 <printf@plt-0x14>:
   123d0:	push	{lr}		; (str lr, [sp, #-4]!)
   123d4:	ldr	lr, [pc, #4]	; 123e0 <printf@plt-0x4>
   123d8:	add	lr, pc, lr
   123dc:	ldr	pc, [lr, #8]!
   123e0:	andeq	r7, r1, r0, lsr #24

000123e4 <printf@plt>:
   123e4:	add	ip, pc, #0, 12
   123e8:	add	ip, ip, #94208	; 0x17000
   123ec:	ldr	pc, [ip, #3104]!	; 0xc20

000123f0 <free@plt>:
   123f0:	add	ip, pc, #0, 12
   123f4:	add	ip, ip, #94208	; 0x17000
   123f8:	ldr	pc, [ip, #3096]!	; 0xc18

000123fc <memcpy@plt>:
   123fc:	add	ip, pc, #0, 12
   12400:	add	ip, ip, #94208	; 0x17000
   12404:	ldr	pc, [ip, #3088]!	; 0xc10

00012408 <realloc@plt>:
   12408:	add	ip, pc, #0, 12
   1240c:	add	ip, ip, #94208	; 0x17000
   12410:	ldr	pc, [ip, #3080]!	; 0xc08

00012414 <fwrite@plt>:
   12414:	add	ip, pc, #0, 12
   12418:	add	ip, ip, #94208	; 0x17000
   1241c:	ldr	pc, [ip, #3072]!	; 0xc00

00012420 <puts@plt>:
   12420:	add	ip, pc, #0, 12
   12424:	add	ip, ip, #94208	; 0x17000
   12428:	ldr	pc, [ip, #3064]!	; 0xbf8

0001242c <malloc@plt>:
   1242c:	add	ip, pc, #0, 12
   12430:	add	ip, ip, #94208	; 0x17000
   12434:	ldr	pc, [ip, #3056]!	; 0xbf0

00012438 <__libc_start_main@plt>:
   12438:	add	ip, pc, #0, 12
   1243c:	add	ip, ip, #94208	; 0x17000
   12440:	ldr	pc, [ip, #3048]!	; 0xbe8

00012444 <__gmon_start__@plt>:
   12444:	add	ip, pc, #0, 12
   12448:	add	ip, ip, #94208	; 0x17000
   1244c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012450 <bcmp@plt>:
   12450:	add	ip, pc, #0, 12
   12454:	add	ip, ip, #94208	; 0x17000
   12458:	ldr	pc, [ip, #3032]!	; 0xbd8

0001245c <strlen@plt>:
   1245c:	add	ip, pc, #0, 12
   12460:	add	ip, ip, #94208	; 0x17000
   12464:	ldr	pc, [ip, #3024]!	; 0xbd0

00012468 <fprintf@plt>:
   12468:	add	ip, pc, #0, 12
   1246c:	add	ip, ip, #94208	; 0x17000
   12470:	ldr	pc, [ip, #3016]!	; 0xbc8

00012474 <posix_memalign@plt>:
   12474:	add	ip, pc, #0, 12
   12478:	add	ip, ip, #94208	; 0x17000
   1247c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012480 <memset@plt>:
   12480:	add	ip, pc, #0, 12
   12484:	add	ip, ip, #94208	; 0x17000
   12488:	ldr	pc, [ip, #3000]!	; 0xbb8

0001248c <memchr@plt>:
   1248c:	add	ip, pc, #0, 12
   12490:	add	ip, ip, #94208	; 0x17000
   12494:	ldr	pc, [ip, #2992]!	; 0xbb0

00012498 <fputc@plt>:
   12498:	add	ip, pc, #0, 12
   1249c:	add	ip, ip, #94208	; 0x17000
   124a0:	ldr	pc, [ip, #2984]!	; 0xba8

000124a4 <abort@plt>:
   124a4:	add	ip, pc, #0, 12
   124a8:	add	ip, ip, #94208	; 0x17000
   124ac:	ldr	pc, [ip, #2976]!	; 0xba0

000124b0 <__assert_fail@plt>:
   124b0:	add	ip, pc, #0, 12
   124b4:	add	ip, ip, #94208	; 0x17000
   124b8:	ldr	pc, [ip, #2968]!	; 0xb98

Disassembly of section .text:

000124bc <_start@@Base>:
   124bc:	mov	fp, #0
   124c0:	mov	lr, #0
   124c4:	pop	{r1}		; (ldr r1, [sp], #4)
   124c8:	mov	r2, sp
   124cc:	push	{r2}		; (str r2, [sp, #-4]!)
   124d0:	push	{r0}		; (str r0, [sp, #-4]!)
   124d4:	ldr	ip, [pc, #16]	; 124ec <_start@@Base+0x30>
   124d8:	push	{ip}		; (str ip, [sp, #-4]!)
   124dc:	ldr	r0, [pc, #12]	; 124f0 <_start@@Base+0x34>
   124e0:	ldr	r3, [pc, #12]	; 124f4 <_start@@Base+0x38>
   124e4:	bl	12438 <__libc_start_main@plt>
   124e8:	bl	124a4 <abort@plt>
   124ec:	andeq	r8, r1, r8
   124f0:	andeq	r2, r1, ip, lsr #23
   124f4:	andeq	r7, r1, r8, lsr #31
   124f8:	ldr	r3, [pc, #20]	; 12514 <_start@@Base+0x58>
   124fc:	ldr	r2, [pc, #20]	; 12518 <_start@@Base+0x5c>
   12500:	add	r3, pc, r3
   12504:	ldr	r2, [r3, r2]
   12508:	cmp	r2, #0
   1250c:	bxeq	lr
   12510:	b	12444 <__gmon_start__@plt>
   12514:	strdeq	r7, [r1], -r8
   12518:	andeq	r0, r0, r4, asr r0
   1251c:	ldr	r0, [pc, #24]	; 1253c <_start@@Base+0x80>
   12520:	ldr	r3, [pc, #24]	; 12540 <_start@@Base+0x84>
   12524:	cmp	r3, r0
   12528:	bxeq	lr
   1252c:	ldr	r3, [pc, #16]	; 12544 <_start@@Base+0x88>
   12530:	cmp	r3, #0
   12534:	bxeq	lr
   12538:	bx	r3
   1253c:	andeq	sl, r2, r0, rrx
   12540:	andeq	sl, r2, r0, rrx
   12544:	andeq	r0, r0, r0
   12548:	ldr	r0, [pc, #36]	; 12574 <_start@@Base+0xb8>
   1254c:	ldr	r1, [pc, #36]	; 12578 <_start@@Base+0xbc>
   12550:	sub	r1, r1, r0
   12554:	asr	r1, r1, #2
   12558:	add	r1, r1, r1, lsr #31
   1255c:	asrs	r1, r1, #1
   12560:	bxeq	lr
   12564:	ldr	r3, [pc, #16]	; 1257c <_start@@Base+0xc0>
   12568:	cmp	r3, #0
   1256c:	bxeq	lr
   12570:	bx	r3
   12574:	andeq	sl, r2, r0, rrx
   12578:	andeq	sl, r2, r0, rrx
   1257c:	andeq	r0, r0, r0
   12580:	push	{r4, lr}
   12584:	ldr	r4, [pc, #24]	; 125a4 <_start@@Base+0xe8>
   12588:	ldrb	r3, [r4]
   1258c:	cmp	r3, #0
   12590:	popne	{r4, pc}
   12594:	bl	1251c <_start@@Base+0x60>
   12598:	mov	r3, #1
   1259c:	strb	r3, [r4]
   125a0:	pop	{r4, pc}
   125a4:	andeq	sl, r2, r4, rrx
   125a8:	b	12548 <_start@@Base+0x8c>

000125ac <dbg_emitter@@Base>:
   125ac:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   125b0:	add	fp, sp, #24
   125b4:	mov	r4, r3
   125b8:	ldr	r3, [fp, #8]
   125bc:	movw	r0, #32796	; 0x801c
   125c0:	mov	r6, r1
   125c4:	mov	r5, r2
   125c8:	mov	r1, r2
   125cc:	movt	r0, #1
   125d0:	mov	r2, r4
   125d4:	bl	123e4 <printf@plt>
   125d8:	cmp	r5, #1
   125dc:	blt	12664 <dbg_emitter@@Base+0xb8>
   125e0:	movw	r7, #33480	; 0x82c8
   125e4:	movw	r8, #32845	; 0x804d
   125e8:	movw	r9, #32878	; 0x806e
   125ec:	add	r6, r6, #4
   125f0:	movt	r7, #1
   125f4:	movt	r8, #1
   125f8:	movt	r9, #1
   125fc:	ldr	r0, [r6, #-4]
   12600:	cmp	r0, r7
   12604:	bne	12628 <dbg_emitter@@Base+0x7c>
   12608:	b	12634 <dbg_emitter@@Base+0x88>
   1260c:	ldr	r0, [r6], #8
   12610:	subs	r5, r5, #1
   12614:	add	r4, r0, r4
   12618:	beq	12664 <dbg_emitter@@Base+0xb8>
   1261c:	ldr	r0, [r6, #-4]
   12620:	cmp	r0, r7
   12624:	beq	12634 <dbg_emitter@@Base+0x88>
   12628:	cmp	r0, #0
   1262c:	bne	1260c <dbg_emitter@@Base+0x60>
   12630:	b	12650 <dbg_emitter@@Base+0xa4>
   12634:	ldr	r2, [r6]
   12638:	mov	r0, r8
   1263c:	mov	r1, r4
   12640:	bl	123e4 <printf@plt>
   12644:	ldr	r0, [r6, #-4]
   12648:	cmp	r0, #0
   1264c:	bne	1260c <dbg_emitter@@Base+0x60>
   12650:	ldr	r2, [r6]
   12654:	mov	r0, r9
   12658:	mov	r1, r4
   1265c:	bl	123e4 <printf@plt>
   12660:	b	1260c <dbg_emitter@@Base+0x60>
   12664:	mov	r0, #0
   12668:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}

0001266c <debug_test@@Base>:
   1266c:	push	{r4, r5, r6, r7, fp, lr}
   12670:	add	fp, sp, #16
   12674:	sub	sp, sp, #280	; 0x118
   12678:	vmov.i32	q8, #0	; 0x00000000
   1267c:	add	r4, sp, #8
   12680:	mov	r5, #0
   12684:	add	r0, r4, #16
   12688:	mov	r1, r4
   1268c:	str	r5, [sp, #40]	; 0x28
   12690:	vst1.64	{d16-d17}, [r0]
   12694:	mov	r0, #36	; 0x24
   12698:	vst1.64	{d16-d17}, [r1], r0
   1269c:	movw	r0, #33317	; 0x8225
   126a0:	movt	r0, #1
   126a4:	str	r5, [r1]
   126a8:	bl	12420 <puts@plt>
   126ac:	movw	r1, #9644	; 0x25ac
   126b0:	str	r5, [sp]
   126b4:	add	r5, sp, #48	; 0x30
   126b8:	mov	r2, #0
   126bc:	mov	r3, #0
   126c0:	movt	r1, #1
   126c4:	mov	r0, r5
   126c8:	bl	12da4 <flatcc_builder_custom_init@@Base>
   126cc:	mvn	r0, #-1073741824	; 0xc0000000
   126d0:	mov	r1, #4
   126d4:	mov	r2, #10
   126d8:	mov	r3, #4
   126dc:	str	r1, [sp]
   126e0:	str	r0, [sp, #4]
   126e4:	mov	r0, r5
   126e8:	mov	r1, r4
   126ec:	bl	15e8c <flatcc_builder_create_vector@@Base>
   126f0:	mov	r1, r0
   126f4:	mov	r0, r5
   126f8:	bl	12710 <debug_test@@Base+0xa4>
   126fc:	mov	r0, r5
   12700:	bl	133b8 <flatcc_builder_clear@@Base>
   12704:	mov	r0, #0
   12708:	sub	sp, fp, #16
   1270c:	pop	{r4, r5, r6, r7, fp, pc}
   12710:	push	{r4, r5, r6, r7, fp, lr}
   12714:	add	fp, sp, #16
   12718:	mov	r5, r1
   1271c:	mov	r1, #0
   12720:	mov	r2, #0
   12724:	mov	r3, #0
   12728:	mov	r4, r0
   1272c:	mov	r7, #0
   12730:	bl	13d28 <flatcc_builder_start_buffer@@Base>
   12734:	cmp	r0, #0
   12738:	popne	{r4, r5, r6, r7, fp, pc}
   1273c:	mov	r0, r4
   12740:	mov	r1, #3
   12744:	bl	15324 <flatcc_builder_start_table@@Base>
   12748:	cmp	r0, #0
   1274c:	bne	12780 <debug_test@@Base+0x114>
   12750:	mov	r0, r4
   12754:	mov	r1, #0
   12758:	mov	r2, #8
   1275c:	mov	r3, #8
   12760:	mov	r7, #0
   12764:	bl	16678 <flatcc_builder_table_add@@Base>
   12768:	cmp	r0, #0
   1276c:	movne	r7, #0
   12770:	movne	r6, #42	; 0x2a
   12774:	strdne	r6, [r0]
   12778:	cmpne	r5, #0
   1277c:	bne	12790 <debug_test@@Base+0x124>
   12780:	mov	r0, r4
   12784:	mov	r1, r7
   12788:	pop	{r4, r5, r6, r7, fp, lr}
   1278c:	b	13f18 <flatcc_builder_end_buffer@@Base>
   12790:	mov	r0, r4
   12794:	mov	r1, #2
   12798:	bl	164e8 <flatcc_builder_table_add_offset@@Base>
   1279c:	cmp	r0, #0
   127a0:	beq	12780 <debug_test@@Base+0x114>
   127a4:	str	r5, [r0]
   127a8:	mov	r0, r4
   127ac:	mov	r1, #1
   127b0:	mov	r2, #1
   127b4:	mov	r3, #1
   127b8:	mov	r5, #1
   127bc:	bl	16678 <flatcc_builder_table_add@@Base>
   127c0:	cmp	r0, #0
   127c4:	beq	12780 <debug_test@@Base+0x114>
   127c8:	movw	r1, #33460	; 0x82b4
   127cc:	strb	r5, [r0]
   127d0:	mov	r0, r4
   127d4:	mov	r2, #0
   127d8:	movt	r1, #1
   127dc:	bl	15c4c <flatcc_builder_check_required@@Base>
   127e0:	cmp	r0, #0
   127e4:	beq	12804 <debug_test@@Base+0x198>
   127e8:	mov	r0, r4
   127ec:	bl	15ccc <flatcc_builder_end_table@@Base>
   127f0:	mov	r7, r0
   127f4:	mov	r0, r4
   127f8:	mov	r1, r7
   127fc:	pop	{r4, r5, r6, r7, fp, lr}
   12800:	b	13f18 <flatcc_builder_end_buffer@@Base>
   12804:	movw	r0, #33042	; 0x8112
   12808:	movw	r1, #33150	; 0x817e
   1280c:	movw	r3, #33243	; 0x81db
   12810:	mov	r2, #21
   12814:	movt	r0, #1
   12818:	movt	r1, #1
   1281c:	movt	r3, #1
   12820:	bl	124b0 <__assert_fail@plt>

00012824 <emit_test@@Base>:
   12824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12828:	add	fp, sp, #28
   1282c:	sub	sp, sp, #284	; 0x11c
   12830:	movw	r0, #33464	; 0x82b8
   12834:	add	r6, sp, #28
   12838:	add	r4, sp, #8
   1283c:	movt	r0, #1
   12840:	vld1.64	{d16-d17}, [r0]
   12844:	mov	r0, r6
   12848:	vst1.64	{d16-d17}, [r4]
   1284c:	bl	12e10 <flatcc_builder_init@@Base>
   12850:	mov	r0, r6
   12854:	bl	179f4 <flatcc_builder_get_emit_context@@Base>
   12858:	mov	r5, r0
   1285c:	mvn	r0, #-1073741824	; 0xc0000000
   12860:	mov	r1, #4
   12864:	mov	r2, #4
   12868:	mov	r3, #4
   1286c:	str	r1, [sp]
   12870:	str	r0, [sp, #4]
   12874:	mov	r0, r6
   12878:	mov	r1, r4
   1287c:	bl	15e8c <flatcc_builder_create_vector@@Base>
   12880:	mov	r1, r0
   12884:	mov	r0, r6
   12888:	bl	12710 <debug_test@@Base+0xa4>
   1288c:	ldm	r5, {r1, r2}
   12890:	mvn	r0, #0
   12894:	cmp	r1, r2
   12898:	bne	12ac0 <emit_test@@Base+0x29c>
   1289c:	ldr	r4, [r5, #8]
   128a0:	cmp	r4, #0
   128a4:	beq	12ac0 <emit_test@@Base+0x29c>
   128a8:	ldr	r5, [r5, #24]
   128ac:	add	r0, sp, #28
   128b0:	bl	176d4 <flatcc_builder_get_buffer_size@@Base>
   128b4:	cmp	r5, r0
   128b8:	bne	12b28 <emit_test@@Base+0x304>
   128bc:	movw	r6, #41056	; 0xa060
   128c0:	movw	r1, #33015	; 0x80f7
   128c4:	mov	r2, r5
   128c8:	movt	r6, #2
   128cc:	movt	r1, #1
   128d0:	ldr	r0, [r6]
   128d4:	bl	12468 <fprintf@plt>
   128d8:	ldr	r6, [r6]
   128dc:	movw	r1, #33288	; 0x8208
   128e0:	movw	r2, #33032	; 0x8108
   128e4:	movt	r1, #1
   128e8:	movt	r2, #1
   128ec:	mov	r0, r6
   128f0:	bl	12468 <fprintf@plt>
   128f4:	cmp	r5, #0
   128f8:	beq	129e4 <emit_test@@Base+0x1c0>
   128fc:	movw	sl, #33307	; 0x821b
   12900:	sub	r7, fp, #49	; 0x31
   12904:	mov	r8, #0
   12908:	movt	sl, #1
   1290c:	ands	r9, r8, #15
   12910:	bne	12994 <emit_test@@Base+0x170>
   12914:	b	12974 <emit_test@@Base+0x150>
   12918:	movw	r1, #33299	; 0x8213
   1291c:	mov	r0, r6
   12920:	mov	r2, r8
   12924:	movt	r1, #1
   12928:	bl	12468 <fprintf@plt>
   1292c:	ldrb	r2, [r4, r8]
   12930:	mov	r0, r6
   12934:	mov	r1, sl
   12938:	bl	12468 <fprintf@plt>
   1293c:	ldrb	r0, [r4, r8]
   12940:	add	r8, r8, #1
   12944:	sub	r1, r0, #32
   12948:	uxtb	r1, r1
   1294c:	cmp	r1, #94	; 0x5e
   12950:	mov	r1, #0
   12954:	movwhi	r0, #46	; 0x2e
   12958:	cmp	r5, r8
   1295c:	strb	r0, [r7, r9]
   12960:	add	r0, r7, r9
   12964:	strb	r1, [r0, #1]
   12968:	beq	129ac <emit_test@@Base+0x188>
   1296c:	ands	r9, r8, #15
   12970:	bne	12994 <emit_test@@Base+0x170>
   12974:	cmp	r8, #0
   12978:	beq	12918 <emit_test@@Base+0xf4>
   1297c:	movw	r1, #33293	; 0x820d
   12980:	mov	r0, r6
   12984:	mov	r2, r7
   12988:	movt	r1, #1
   1298c:	bl	12468 <fprintf@plt>
   12990:	b	12918 <emit_test@@Base+0xf4>
   12994:	tst	r8, #7
   12998:	bne	1292c <emit_test@@Base+0x108>
   1299c:	mov	r0, #32
   129a0:	mov	r1, r6
   129a4:	bl	12498 <fputc@plt>
   129a8:	b	1292c <emit_test@@Base+0x108>
   129ac:	tst	r5, #15
   129b0:	beq	129e4 <emit_test@@Base+0x1c0>
   129b4:	movw	r8, #33313	; 0x8221
   129b8:	add	r7, r5, #1
   129bc:	movt	r8, #1
   129c0:	mov	r0, r8
   129c4:	mov	r1, #3
   129c8:	mov	r2, #1
   129cc:	mov	r3, r6
   129d0:	bl	12414 <fwrite@plt>
   129d4:	add	r0, r7, #1
   129d8:	tst	r7, #15
   129dc:	mov	r7, r0
   129e0:	bne	129c0 <emit_test@@Base+0x19c>
   129e4:	movw	r1, #33293	; 0x820d
   129e8:	sub	r2, fp, #49	; 0x31
   129ec:	mov	r0, r6
   129f0:	movt	r1, #1
   129f4:	bl	12468 <fprintf@plt>
   129f8:	cmp	r5, #58	; 0x3a
   129fc:	bne	12b48 <emit_test@@Base+0x324>
   12a00:	movw	r1, #33400	; 0x8278
   12a04:	mov	r0, r4
   12a08:	mov	r2, #58	; 0x3a
   12a0c:	movt	r1, #1
   12a10:	bl	12450 <bcmp@plt>
   12a14:	cmp	r0, #0
   12a18:	bne	12b68 <emit_test@@Base+0x344>
   12a1c:	ldr	r0, [r4]
   12a20:	ldr	r1, [r4, r0]!
   12a24:	mov	r0, r4
   12a28:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   12a2c:	cmp	r1, #6
   12a30:	bcc	12ac8 <emit_test@@Base+0x2a4>
   12a34:	ldrh	r2, [r0, #4]
   12a38:	cmp	r2, #0
   12a3c:	beq	12ac8 <emit_test@@Base+0x2a4>
   12a40:	mov	r3, r4
   12a44:	ldr	r2, [r3, r2]!
   12a48:	ldr	r3, [r3, #4]
   12a4c:	eor	r2, r2, #42	; 0x2a
   12a50:	orrs	r2, r2, r3
   12a54:	bne	12ac8 <emit_test@@Base+0x2a4>
   12a58:	cmp	r1, #8
   12a5c:	bcc	12ae8 <emit_test@@Base+0x2c4>
   12a60:	ldrh	r2, [r0, #6]
   12a64:	cmp	r2, #0
   12a68:	beq	12ae8 <emit_test@@Base+0x2c4>
   12a6c:	ldrb	r2, [r4, r2]
   12a70:	cmp	r2, #1
   12a74:	bne	12ae8 <emit_test@@Base+0x2c4>
   12a78:	cmp	r1, #10
   12a7c:	bcc	12b08 <emit_test@@Base+0x2e4>
   12a80:	ldrh	r0, [r0, #8]
   12a84:	cmp	r0, #0
   12a88:	beq	12b08 <emit_test@@Base+0x2e4>
   12a8c:	ldr	r0, [r4, r0]!
   12a90:	ldr	r0, [r4, r0]!
   12a94:	cmp	r0, #4
   12a98:	bne	12b08 <emit_test@@Base+0x2e4>
   12a9c:	add	r0, r4, #4
   12aa0:	vldr	s0, [pc, #256]	; 12ba8 <emit_test@@Base+0x384>
   12aa4:	vldr	s2, [r0, #8]
   12aa8:	vcmp.f32	s2, s0
   12aac:	vmrs	APSR_nzcv, fpscr
   12ab0:	bne	12b88 <emit_test@@Base+0x364>
   12ab4:	add	r0, sp, #28
   12ab8:	bl	133b8 <flatcc_builder_clear@@Base>
   12abc:	mov	r0, #0
   12ac0:	sub	sp, fp, #28
   12ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ac8:	movw	r0, #38528	; 0x9680
   12acc:	movw	r1, #32924	; 0x809c
   12ad0:	movw	r3, #32999	; 0x80e7
   12ad4:	mov	r2, #112	; 0x70
   12ad8:	movt	r0, #1
   12adc:	movt	r1, #1
   12ae0:	movt	r3, #1
   12ae4:	bl	124b0 <__assert_fail@plt>
   12ae8:	movw	r0, #38528	; 0x9680
   12aec:	movw	r1, #32924	; 0x809c
   12af0:	movw	r3, #32999	; 0x80e7
   12af4:	mov	r2, #113	; 0x71
   12af8:	movt	r0, #1
   12afc:	movt	r1, #1
   12b00:	movt	r3, #1
   12b04:	bl	124b0 <__assert_fail@plt>
   12b08:	movw	r0, #38528	; 0x9680
   12b0c:	movw	r1, #32924	; 0x809c
   12b10:	movw	r3, #32999	; 0x80e7
   12b14:	mov	r2, #114	; 0x72
   12b18:	movt	r0, #1
   12b1c:	movt	r1, #1
   12b20:	movt	r3, #1
   12b24:	bl	124b0 <__assert_fail@plt>
   12b28:	movw	r0, #38528	; 0x9680
   12b2c:	movw	r1, #32924	; 0x809c
   12b30:	movw	r3, #32999	; 0x80e7
   12b34:	mov	r2, #101	; 0x65
   12b38:	movt	r0, #1
   12b3c:	movt	r1, #1
   12b40:	movt	r3, #1
   12b44:	bl	124b0 <__assert_fail@plt>
   12b48:	movw	r0, #38528	; 0x9680
   12b4c:	movw	r1, #32924	; 0x809c
   12b50:	movw	r3, #32999	; 0x80e7
   12b54:	mov	r2, #106	; 0x6a
   12b58:	movt	r0, #1
   12b5c:	movt	r1, #1
   12b60:	movt	r3, #1
   12b64:	bl	124b0 <__assert_fail@plt>
   12b68:	movw	r0, #38528	; 0x9680
   12b6c:	movw	r1, #32924	; 0x809c
   12b70:	movw	r3, #32999	; 0x80e7
   12b74:	mov	r2, #108	; 0x6c
   12b78:	movt	r0, #1
   12b7c:	movt	r1, #1
   12b80:	movt	r3, #1
   12b84:	bl	124b0 <__assert_fail@plt>
   12b88:	movw	r0, #38528	; 0x9680
   12b8c:	movw	r1, #32924	; 0x809c
   12b90:	movw	r3, #32999	; 0x80e7
   12b94:	mov	r2, #115	; 0x73
   12b98:	movt	r0, #1
   12b9c:	movt	r1, #1
   12ba0:	movt	r3, #1
   12ba4:	bl	124b0 <__assert_fail@plt>
   12ba8:	svccc	0x0099999a

00012bac <main@@Base>:
   12bac:	push	{r4, r5, r6, r7, fp, lr}
   12bb0:	add	fp, sp, #16
   12bb4:	sub	sp, sp, #280	; 0x118
   12bb8:	vmov.i32	q8, #0	; 0x00000000
   12bbc:	add	r4, sp, #8
   12bc0:	mov	r5, #0
   12bc4:	add	r0, r4, #16
   12bc8:	mov	r1, r4
   12bcc:	str	r5, [sp, #40]	; 0x28
   12bd0:	vst1.64	{d16-d17}, [r0]
   12bd4:	mov	r0, #36	; 0x24
   12bd8:	vst1.64	{d16-d17}, [r1], r0
   12bdc:	movw	r0, #33317	; 0x8225
   12be0:	movt	r0, #1
   12be4:	str	r5, [r1]
   12be8:	bl	12420 <puts@plt>
   12bec:	movw	r1, #9644	; 0x25ac
   12bf0:	str	r5, [sp]
   12bf4:	add	r5, sp, #48	; 0x30
   12bf8:	mov	r2, #0
   12bfc:	mov	r3, #0
   12c00:	movt	r1, #1
   12c04:	mov	r0, r5
   12c08:	bl	12da4 <flatcc_builder_custom_init@@Base>
   12c0c:	mvn	r0, #-1073741824	; 0xc0000000
   12c10:	mov	r1, #4
   12c14:	mov	r2, #10
   12c18:	mov	r3, #4
   12c1c:	str	r1, [sp]
   12c20:	str	r0, [sp, #4]
   12c24:	mov	r0, r5
   12c28:	mov	r1, r4
   12c2c:	bl	15e8c <flatcc_builder_create_vector@@Base>
   12c30:	mov	r1, r0
   12c34:	mov	r0, r5
   12c38:	bl	12710 <debug_test@@Base+0xa4>
   12c3c:	mov	r0, r5
   12c40:	bl	133b8 <flatcc_builder_clear@@Base>
   12c44:	bl	12824 <emit_test@@Base>
   12c48:	sub	sp, fp, #16
   12c4c:	pop	{r4, r5, r6, r7, fp, pc}

00012c50 <flatcc_builder_default_alloc@@Base>:
   12c50:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c54:	add	fp, sp, #24
   12c58:	mov	r4, r1
   12c5c:	cmp	r2, #0
   12c60:	beq	12ca8 <flatcc_builder_default_alloc@@Base+0x58>
   12c64:	ldr	r0, [fp, #8]
   12c68:	mov	r8, r3
   12c6c:	sub	r1, r0, #1
   12c70:	cmp	r1, #6
   12c74:	bhi	12cd8 <flatcc_builder_default_alloc@@Base+0x88>
   12c78:	add	r3, pc, #4
   12c7c:	mov	r0, #256	; 0x100
   12c80:	ldr	pc, [r3, r1, lsl #2]
   12c84:	andeq	r2, r1, ip, ror #25
   12c88:	ldrdeq	r2, [r1], -r8
   12c8c:	ldrdeq	r2, [r1], -r8
   12c90:	andeq	r2, r1, r0, lsr #25
   12c94:	andeq	r2, r1, r0, ror #25
   12c98:	ldrdeq	r2, [r1], -r8
   12c9c:	andeq	r2, r1, r8, ror #25
   12ca0:	mov	r0, #288	; 0x120
   12ca4:	b	12cec <flatcc_builder_default_alloc@@Base+0x9c>
   12ca8:	ldr	r0, [r4]
   12cac:	cmp	r0, #0
   12cb0:	beq	12ccc <flatcc_builder_default_alloc@@Base+0x7c>
   12cb4:	bl	123f0 <free@plt>
   12cb8:	mov	r6, #0
   12cbc:	mov	r0, r6
   12cc0:	str	r6, [r4]
   12cc4:	str	r6, [r4, #4]
   12cc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12ccc:	mov	r6, #0
   12cd0:	mov	r0, r6
   12cd4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cd8:	mov	r0, #32
   12cdc:	b	12cec <flatcc_builder_default_alloc@@Base+0x9c>
   12ce0:	mov	r0, r2
   12ce4:	b	12cec <flatcc_builder_default_alloc@@Base+0x9c>
   12ce8:	mov	r0, #64	; 0x40
   12cec:	mov	r7, r0
   12cf0:	lsl	r0, r0, #1
   12cf4:	cmp	r7, r2
   12cf8:	bcc	12cec <flatcc_builder_default_alloc@@Base+0x9c>
   12cfc:	ldr	r0, [r4, #4]
   12d00:	mov	r6, #0
   12d04:	cmp	r0, r2
   12d08:	lsrcs	r0, r0, #1
   12d0c:	cmpcs	r0, r7
   12d10:	bcs	12d54 <flatcc_builder_default_alloc@@Base+0x104>
   12d14:	ldr	r0, [r4]
   12d18:	mov	r1, r7
   12d1c:	bl	12408 <realloc@plt>
   12d20:	cmp	r0, #0
   12d24:	beq	12d5c <flatcc_builder_default_alloc@@Base+0x10c>
   12d28:	mov	r5, r0
   12d2c:	cmp	r8, #0
   12d30:	beq	12d50 <flatcc_builder_default_alloc@@Base+0x100>
   12d34:	ldr	r1, [r4, #4]
   12d38:	cmp	r7, r1
   12d3c:	bls	12d50 <flatcc_builder_default_alloc@@Base+0x100>
   12d40:	add	r0, r5, r1
   12d44:	sub	r2, r7, r1
   12d48:	mov	r1, #0
   12d4c:	bl	12480 <memset@plt>
   12d50:	stm	r4, {r5, r7}
   12d54:	mov	r0, r6
   12d58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d5c:	mvn	r6, #0
   12d60:	mov	r0, r6
   12d64:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00012d68 <flatcc_builder_flush_vtable_cache@@Base>:
   12d68:	push	{r4, r5, fp, lr}
   12d6c:	add	fp, sp, #8
   12d70:	mov	r4, r0
   12d74:	ldr	r0, [r0, #116]	; 0x74
   12d78:	cmp	r0, #0
   12d7c:	popeq	{r4, r5, fp, pc}
   12d80:	ldr	r0, [r4, #92]	; 0x5c
   12d84:	ldr	r2, [r4, #96]	; 0x60
   12d88:	mov	r1, #0
   12d8c:	mov	r5, #0
   12d90:	bl	12480 <memset@plt>
   12d94:	mov	r0, #16
   12d98:	str	r5, [r4, #120]	; 0x78
   12d9c:	str	r0, [r4, #124]	; 0x7c
   12da0:	pop	{r4, r5, fp, pc}

00012da4 <flatcc_builder_custom_init@@Base>:
   12da4:	push	{r4, r5, r6, r7, fp, lr}
   12da8:	add	fp, sp, #16
   12dac:	mov	r6, r2
   12db0:	mov	r7, r1
   12db4:	mov	r1, #0
   12db8:	mov	r2, #232	; 0xe8
   12dbc:	mov	r5, r3
   12dc0:	mov	r4, r0
   12dc4:	bl	12480 <memset@plt>
   12dc8:	ldr	r0, [fp, #8]
   12dcc:	cmp	r7, #0
   12dd0:	bne	12de8 <flatcc_builder_custom_init@@Base+0x44>
   12dd4:	movw	r7, #31624	; 0x7b88
   12dd8:	mov	r1, #1
   12ddc:	add	r6, r4, #188	; 0xbc
   12de0:	movt	r7, #1
   12de4:	str	r1, [r4, #184]	; 0xb8
   12de8:	movw	r1, #11344	; 0x2c50
   12dec:	cmp	r5, #0
   12df0:	str	r6, [r4, #36]	; 0x24
   12df4:	str	r0, [r4, #40]	; 0x28
   12df8:	mov	r0, #0
   12dfc:	str	r7, [r4, #44]	; 0x2c
   12e00:	movt	r1, #1
   12e04:	movne	r1, r5
   12e08:	str	r1, [r4, #48]	; 0x30
   12e0c:	pop	{r4, r5, r6, r7, fp, pc}

00012e10 <flatcc_builder_init@@Base>:
   12e10:	push	{r4, r5, fp, lr}
   12e14:	add	fp, sp, #8
   12e18:	mov	r1, #0
   12e1c:	mov	r2, #232	; 0xe8
   12e20:	mov	r4, r0
   12e24:	mov	r5, #0
   12e28:	bl	12480 <memset@plt>
   12e2c:	mov	r0, #1
   12e30:	movw	r1, #31624	; 0x7b88
   12e34:	add	r2, r4, #188	; 0xbc
   12e38:	str	r0, [r4, #184]	; 0xb8
   12e3c:	movw	r0, #11344	; 0x2c50
   12e40:	movt	r1, #1
   12e44:	str	r2, [r4, #36]	; 0x24
   12e48:	str	r5, [r4, #40]	; 0x28
   12e4c:	movt	r0, #1
   12e50:	str	r1, [r4, #44]	; 0x2c
   12e54:	str	r0, [r4, #48]	; 0x30
   12e58:	mov	r0, #0
   12e5c:	pop	{r4, r5, fp, pc}

00012e60 <flatcc_builder_custom_reset@@Base>:
   12e60:	push	{r4, r5, r6, sl, fp, lr}
   12e64:	add	fp, sp, #16
   12e68:	sub	sp, sp, #8
   12e6c:	mov	r5, r1
   12e70:	mov	r4, r0
   12e74:	cmp	r2, #0
   12e78:	beq	12ed8 <flatcc_builder_custom_reset@@Base+0x78>
   12e7c:	mov	r1, r4
   12e80:	ldr	r0, [r1, #52]!	; 0x34
   12e84:	cmp	r0, #0
   12e88:	beq	12f04 <flatcc_builder_custom_reset@@Base+0xa4>
   12e8c:	ldr	r0, [r4, #40]	; 0x28
   12e90:	ldr	r6, [r4, #48]	; 0x30
   12e94:	mov	r2, #0
   12e98:	mov	r3, #1
   12e9c:	str	r2, [sp]
   12ea0:	mov	r2, #1
   12ea4:	blx	r6
   12ea8:	mvn	r6, #0
   12eac:	cmp	r0, #0
   12eb0:	bne	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   12eb4:	ldr	r0, [r4, #52]	; 0x34
   12eb8:	ldr	r2, [r4, #56]	; 0x38
   12ebc:	mov	r1, #0
   12ec0:	bl	12480 <memset@plt>
   12ec4:	mov	r1, r4
   12ec8:	ldr	r0, [r1, #60]!	; 0x3c
   12ecc:	cmp	r0, #0
   12ed0:	bne	12f20 <flatcc_builder_custom_reset@@Base+0xc0>
   12ed4:	b	12f6c <flatcc_builder_custom_reset@@Base+0x10c>
   12ed8:	ldr	r0, [r4, #52]	; 0x34
   12edc:	ldr	r2, [r4, #56]	; 0x38
   12ee0:	cmp	r0, #0
   12ee4:	beq	12fd4 <flatcc_builder_custom_reset@@Base+0x174>
   12ee8:	mov	r1, #0
   12eec:	bl	12480 <memset@plt>
   12ef0:	ldr	r0, [r4, #60]	; 0x3c
   12ef4:	ldr	r2, [r4, #64]	; 0x40
   12ef8:	cmp	r0, #0
   12efc:	bne	12fec <flatcc_builder_custom_reset@@Base+0x18c>
   12f00:	b	13008 <flatcc_builder_custom_reset@@Base+0x1a8>
   12f04:	ldr	r0, [r4, #56]	; 0x38
   12f08:	cmp	r0, #0
   12f0c:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   12f10:	mov	r1, r4
   12f14:	ldr	r0, [r1, #60]!	; 0x3c
   12f18:	cmp	r0, #0
   12f1c:	beq	12f6c <flatcc_builder_custom_reset@@Base+0x10c>
   12f20:	ldr	r0, [r4, #40]	; 0x28
   12f24:	ldr	r6, [r4, #48]	; 0x30
   12f28:	mov	r2, #1
   12f2c:	mov	r3, #1
   12f30:	str	r2, [sp]
   12f34:	mov	r2, #1
   12f38:	blx	r6
   12f3c:	mvn	r6, #0
   12f40:	cmp	r0, #0
   12f44:	bne	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   12f48:	ldr	r0, [r4, #60]	; 0x3c
   12f4c:	ldr	r2, [r4, #64]	; 0x40
   12f50:	mov	r1, #0
   12f54:	bl	12480 <memset@plt>
   12f58:	mov	r1, r4
   12f5c:	ldr	r0, [r1, #68]!	; 0x44
   12f60:	cmp	r0, #0
   12f64:	bne	12f88 <flatcc_builder_custom_reset@@Base+0x128>
   12f68:	b	131c4 <flatcc_builder_custom_reset@@Base+0x364>
   12f6c:	ldr	r0, [r4, #64]	; 0x40
   12f70:	cmp	r0, #0
   12f74:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   12f78:	mov	r1, r4
   12f7c:	ldr	r0, [r1, #68]!	; 0x44
   12f80:	cmp	r0, #0
   12f84:	beq	131c4 <flatcc_builder_custom_reset@@Base+0x364>
   12f88:	ldr	r0, [r4, #40]	; 0x28
   12f8c:	ldr	r6, [r4, #48]	; 0x30
   12f90:	mov	r2, #2
   12f94:	mov	r3, #1
   12f98:	str	r2, [sp]
   12f9c:	mov	r2, #1
   12fa0:	blx	r6
   12fa4:	mvn	r6, #0
   12fa8:	cmp	r0, #0
   12fac:	bne	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   12fb0:	ldr	r0, [r4, #68]	; 0x44
   12fb4:	ldr	r2, [r4, #72]	; 0x48
   12fb8:	mov	r1, #0
   12fbc:	bl	12480 <memset@plt>
   12fc0:	mov	r1, r4
   12fc4:	ldr	r0, [r1, #76]!	; 0x4c
   12fc8:	cmp	r0, #0
   12fcc:	bne	131e0 <flatcc_builder_custom_reset@@Base+0x380>
   12fd0:	b	1322c <flatcc_builder_custom_reset@@Base+0x3cc>
   12fd4:	cmp	r2, #0
   12fd8:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   12fdc:	ldr	r0, [r4, #60]	; 0x3c
   12fe0:	ldr	r2, [r4, #64]	; 0x40
   12fe4:	cmp	r0, #0
   12fe8:	beq	13008 <flatcc_builder_custom_reset@@Base+0x1a8>
   12fec:	mov	r1, #0
   12ff0:	bl	12480 <memset@plt>
   12ff4:	ldr	r0, [r4, #68]	; 0x44
   12ff8:	ldr	r2, [r4, #72]	; 0x48
   12ffc:	cmp	r0, #0
   13000:	bne	13020 <flatcc_builder_custom_reset@@Base+0x1c0>
   13004:	b	1303c <flatcc_builder_custom_reset@@Base+0x1dc>
   13008:	cmp	r2, #0
   1300c:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   13010:	ldr	r0, [r4, #68]	; 0x44
   13014:	ldr	r2, [r4, #72]	; 0x48
   13018:	cmp	r0, #0
   1301c:	beq	1303c <flatcc_builder_custom_reset@@Base+0x1dc>
   13020:	mov	r1, #0
   13024:	bl	12480 <memset@plt>
   13028:	ldr	r0, [r4, #76]	; 0x4c
   1302c:	ldr	r2, [r4, #80]	; 0x50
   13030:	cmp	r0, #0
   13034:	bne	13054 <flatcc_builder_custom_reset@@Base+0x1f4>
   13038:	b	13070 <flatcc_builder_custom_reset@@Base+0x210>
   1303c:	cmp	r2, #0
   13040:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   13044:	ldr	r0, [r4, #76]	; 0x4c
   13048:	ldr	r2, [r4, #80]	; 0x50
   1304c:	cmp	r0, #0
   13050:	beq	13070 <flatcc_builder_custom_reset@@Base+0x210>
   13054:	mov	r1, #0
   13058:	bl	12480 <memset@plt>
   1305c:	ldr	r0, [r4, #84]	; 0x54
   13060:	ldr	r2, [r4, #88]	; 0x58
   13064:	cmp	r0, #0
   13068:	bne	13088 <flatcc_builder_custom_reset@@Base+0x228>
   1306c:	b	130a4 <flatcc_builder_custom_reset@@Base+0x244>
   13070:	cmp	r2, #0
   13074:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   13078:	ldr	r0, [r4, #84]	; 0x54
   1307c:	ldr	r2, [r4, #88]	; 0x58
   13080:	cmp	r0, #0
   13084:	beq	130a4 <flatcc_builder_custom_reset@@Base+0x244>
   13088:	mov	r1, #0
   1308c:	bl	12480 <memset@plt>
   13090:	ldr	r0, [r4, #92]	; 0x5c
   13094:	ldr	r2, [r4, #96]	; 0x60
   13098:	cmp	r0, #0
   1309c:	bne	130bc <flatcc_builder_custom_reset@@Base+0x25c>
   130a0:	b	130d8 <flatcc_builder_custom_reset@@Base+0x278>
   130a4:	cmp	r2, #0
   130a8:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   130ac:	ldr	r0, [r4, #92]	; 0x5c
   130b0:	ldr	r2, [r4, #96]	; 0x60
   130b4:	cmp	r0, #0
   130b8:	beq	130d8 <flatcc_builder_custom_reset@@Base+0x278>
   130bc:	mov	r1, #0
   130c0:	bl	12480 <memset@plt>
   130c4:	ldr	r0, [r4, #100]	; 0x64
   130c8:	ldr	r2, [r4, #104]	; 0x68
   130cc:	cmp	r0, #0
   130d0:	bne	130f0 <flatcc_builder_custom_reset@@Base+0x290>
   130d4:	b	1310c <flatcc_builder_custom_reset@@Base+0x2ac>
   130d8:	cmp	r2, #0
   130dc:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   130e0:	ldr	r0, [r4, #100]	; 0x64
   130e4:	ldr	r2, [r4, #104]	; 0x68
   130e8:	cmp	r0, #0
   130ec:	beq	1310c <flatcc_builder_custom_reset@@Base+0x2ac>
   130f0:	mov	r1, #0
   130f4:	bl	12480 <memset@plt>
   130f8:	ldr	r0, [r4, #108]	; 0x6c
   130fc:	ldr	r2, [r4, #112]	; 0x70
   13100:	cmp	r0, #0
   13104:	bne	13124 <flatcc_builder_custom_reset@@Base+0x2c4>
   13108:	b	13130 <flatcc_builder_custom_reset@@Base+0x2d0>
   1310c:	cmp	r2, #0
   13110:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   13114:	ldr	r0, [r4, #108]	; 0x6c
   13118:	ldr	r2, [r4, #112]	; 0x70
   1311c:	cmp	r0, #0
   13120:	beq	13130 <flatcc_builder_custom_reset@@Base+0x2d0>
   13124:	mov	r1, #0
   13128:	bl	12480 <memset@plt>
   1312c:	b	13138 <flatcc_builder_custom_reset@@Base+0x2d8>
   13130:	cmp	r2, #0
   13134:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   13138:	mov	r0, #0
   1313c:	vmov.i32	q8, #0	; 0x00000000
   13140:	mov	r6, #0
   13144:	str	r0, [r4, #120]	; 0x78
   13148:	ldr	r1, [r4, #124]	; 0x7c
   1314c:	cmp	r1, #0
   13150:	movne	r1, #16
   13154:	strne	r1, [r4, #124]	; 0x7c
   13158:	add	r1, r4, #148	; 0x94
   1315c:	str	r0, [r4, #136]	; 0x88
   13160:	str	r0, [r4, #140]	; 0x8c
   13164:	strh	r0, [r4, #128]	; 0x80
   13168:	str	r0, [r4, #32]
   1316c:	cmp	r5, #0
   13170:	vst1.32	{d16-d17}, [r1]
   13174:	ldr	r2, [r4, #60]	; 0x3c
   13178:	ldr	r1, [r4, #52]	; 0x34
   1317c:	ldr	r3, [r4, #76]	; 0x4c
   13180:	str	r2, [r4, #16]
   13184:	str	r0, [r4, #20]
   13188:	str	r0, [r4, #24]
   1318c:	movne	r0, #0
   13190:	str	r3, [r4]
   13194:	str	r1, [r4, #4]
   13198:	strne	r0, [r4, #172]	; 0xac
   1319c:	strne	r0, [r4, #176]	; 0xb0
   131a0:	strne	r0, [r4, #180]	; 0xb4
   131a4:	ldr	r0, [r4, #184]	; 0xb8
   131a8:	cmp	r0, #0
   131ac:	beq	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   131b0:	add	r0, r4, #188	; 0xbc
   131b4:	bl	17a50 <flatcc_emitter_reset@@Base>
   131b8:	mov	r0, r6
   131bc:	sub	sp, fp, #16
   131c0:	pop	{r4, r5, r6, sl, fp, pc}
   131c4:	ldr	r0, [r4, #72]	; 0x48
   131c8:	cmp	r0, #0
   131cc:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   131d0:	mov	r1, r4
   131d4:	ldr	r0, [r1, #76]!	; 0x4c
   131d8:	cmp	r0, #0
   131dc:	beq	1322c <flatcc_builder_custom_reset@@Base+0x3cc>
   131e0:	ldr	r0, [r4, #40]	; 0x28
   131e4:	ldr	r6, [r4, #48]	; 0x30
   131e8:	mov	r2, #3
   131ec:	mov	r3, #1
   131f0:	str	r2, [sp]
   131f4:	mov	r2, #1
   131f8:	blx	r6
   131fc:	mvn	r6, #0
   13200:	cmp	r0, #0
   13204:	bne	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   13208:	ldr	r0, [r4, #76]	; 0x4c
   1320c:	ldr	r2, [r4, #80]	; 0x50
   13210:	mov	r1, #0
   13214:	bl	12480 <memset@plt>
   13218:	mov	r1, r4
   1321c:	ldr	r0, [r1, #84]!	; 0x54
   13220:	cmp	r0, #0
   13224:	bne	13248 <flatcc_builder_custom_reset@@Base+0x3e8>
   13228:	b	13294 <flatcc_builder_custom_reset@@Base+0x434>
   1322c:	ldr	r0, [r4, #80]	; 0x50
   13230:	cmp	r0, #0
   13234:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   13238:	mov	r1, r4
   1323c:	ldr	r0, [r1, #84]!	; 0x54
   13240:	cmp	r0, #0
   13244:	beq	13294 <flatcc_builder_custom_reset@@Base+0x434>
   13248:	ldr	r0, [r4, #40]	; 0x28
   1324c:	ldr	r6, [r4, #48]	; 0x30
   13250:	mov	r2, #4
   13254:	mov	r3, #1
   13258:	str	r2, [sp]
   1325c:	mov	r2, #1
   13260:	blx	r6
   13264:	mvn	r6, #0
   13268:	cmp	r0, #0
   1326c:	bne	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   13270:	ldr	r0, [r4, #84]	; 0x54
   13274:	ldr	r2, [r4, #88]	; 0x58
   13278:	mov	r1, #0
   1327c:	bl	12480 <memset@plt>
   13280:	ldr	r0, [r4, #92]	; 0x5c
   13284:	ldr	r2, [r4, #96]	; 0x60
   13288:	cmp	r0, #0
   1328c:	bne	132b0 <flatcc_builder_custom_reset@@Base+0x450>
   13290:	b	132cc <flatcc_builder_custom_reset@@Base+0x46c>
   13294:	ldr	r0, [r4, #88]	; 0x58
   13298:	cmp	r0, #0
   1329c:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   132a0:	ldr	r0, [r4, #92]	; 0x5c
   132a4:	ldr	r2, [r4, #96]	; 0x60
   132a8:	cmp	r0, #0
   132ac:	beq	132cc <flatcc_builder_custom_reset@@Base+0x46c>
   132b0:	mov	r1, #0
   132b4:	bl	12480 <memset@plt>
   132b8:	mov	r1, r4
   132bc:	ldr	r0, [r1, #100]!	; 0x64
   132c0:	cmp	r0, #0
   132c4:	bne	132e4 <flatcc_builder_custom_reset@@Base+0x484>
   132c8:	b	13330 <flatcc_builder_custom_reset@@Base+0x4d0>
   132cc:	cmp	r2, #0
   132d0:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   132d4:	mov	r1, r4
   132d8:	ldr	r0, [r1, #100]!	; 0x64
   132dc:	cmp	r0, #0
   132e0:	beq	13330 <flatcc_builder_custom_reset@@Base+0x4d0>
   132e4:	ldr	r0, [r4, #40]	; 0x28
   132e8:	ldr	r6, [r4, #48]	; 0x30
   132ec:	mov	r2, #6
   132f0:	mov	r3, #1
   132f4:	str	r2, [sp]
   132f8:	mov	r2, #1
   132fc:	blx	r6
   13300:	mvn	r6, #0
   13304:	cmp	r0, #0
   13308:	bne	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   1330c:	ldr	r0, [r4, #100]	; 0x64
   13310:	ldr	r2, [r4, #104]	; 0x68
   13314:	mov	r1, #0
   13318:	bl	12480 <memset@plt>
   1331c:	mov	r1, r4
   13320:	ldr	r0, [r1, #108]!	; 0x6c
   13324:	cmp	r0, #0
   13328:	bne	1334c <flatcc_builder_custom_reset@@Base+0x4ec>
   1332c:	b	13380 <flatcc_builder_custom_reset@@Base+0x520>
   13330:	ldr	r0, [r4, #104]	; 0x68
   13334:	cmp	r0, #0
   13338:	bne	1338c <flatcc_builder_custom_reset@@Base+0x52c>
   1333c:	mov	r1, r4
   13340:	ldr	r0, [r1, #108]!	; 0x6c
   13344:	cmp	r0, #0
   13348:	beq	13380 <flatcc_builder_custom_reset@@Base+0x520>
   1334c:	ldr	r0, [r4, #40]	; 0x28
   13350:	ldr	r6, [r4, #48]	; 0x30
   13354:	mov	r2, #7
   13358:	mov	r3, #1
   1335c:	str	r2, [sp]
   13360:	mov	r2, #1
   13364:	blx	r6
   13368:	mvn	r6, #0
   1336c:	cmp	r0, #0
   13370:	bne	131b8 <flatcc_builder_custom_reset@@Base+0x358>
   13374:	ldr	r0, [r4, #108]	; 0x6c
   13378:	ldr	r2, [r4, #112]	; 0x70
   1337c:	b	13124 <flatcc_builder_custom_reset@@Base+0x2c4>
   13380:	ldr	r0, [r4, #112]	; 0x70
   13384:	cmp	r0, #0
   13388:	beq	13138 <flatcc_builder_custom_reset@@Base+0x2d8>
   1338c:	movw	r0, #33992	; 0x84c8
   13390:	movw	r1, #34010	; 0x84da
   13394:	movw	r3, #34080	; 0x8520
   13398:	movw	r2, #434	; 0x1b2
   1339c:	movt	r0, #1
   133a0:	movt	r1, #1
   133a4:	movt	r3, #1
   133a8:	bl	124b0 <__assert_fail@plt>

000133ac <flatcc_builder_reset@@Base>:
   133ac:	mov	r1, #0
   133b0:	mov	r2, #0
   133b4:	b	12e60 <flatcc_builder_custom_reset@@Base>

000133b8 <flatcc_builder_clear@@Base>:
   133b8:	push	{r4, sl, fp, lr}
   133bc:	add	fp, sp, #8
   133c0:	sub	sp, sp, #8
   133c4:	mov	r4, r0
   133c8:	ldr	r0, [r0, #40]	; 0x28
   133cc:	mov	r1, #0
   133d0:	mov	r2, #0
   133d4:	mov	r3, #0
   133d8:	ldr	ip, [r4, #48]	; 0x30
   133dc:	str	r1, [sp]
   133e0:	add	r1, r4, #52	; 0x34
   133e4:	blx	ip
   133e8:	ldr	r0, [r4, #40]	; 0x28
   133ec:	ldr	ip, [r4, #48]	; 0x30
   133f0:	mov	r1, #1
   133f4:	mov	r2, #0
   133f8:	mov	r3, #0
   133fc:	str	r1, [sp]
   13400:	add	r1, r4, #60	; 0x3c
   13404:	blx	ip
   13408:	ldr	r0, [r4, #40]	; 0x28
   1340c:	ldr	ip, [r4, #48]	; 0x30
   13410:	mov	r1, #2
   13414:	mov	r2, #0
   13418:	mov	r3, #0
   1341c:	str	r1, [sp]
   13420:	add	r1, r4, #68	; 0x44
   13424:	blx	ip
   13428:	ldr	r0, [r4, #40]	; 0x28
   1342c:	ldr	ip, [r4, #48]	; 0x30
   13430:	mov	r1, #3
   13434:	mov	r2, #0
   13438:	mov	r3, #0
   1343c:	str	r1, [sp]
   13440:	add	r1, r4, #76	; 0x4c
   13444:	blx	ip
   13448:	ldr	r0, [r4, #40]	; 0x28
   1344c:	ldr	ip, [r4, #48]	; 0x30
   13450:	mov	r1, #4
   13454:	mov	r2, #0
   13458:	mov	r3, #0
   1345c:	str	r1, [sp]
   13460:	add	r1, r4, #84	; 0x54
   13464:	blx	ip
   13468:	ldr	r0, [r4, #40]	; 0x28
   1346c:	ldr	ip, [r4, #48]	; 0x30
   13470:	mov	r1, #5
   13474:	mov	r2, #0
   13478:	mov	r3, #0
   1347c:	str	r1, [sp]
   13480:	add	r1, r4, #92	; 0x5c
   13484:	blx	ip
   13488:	ldr	r0, [r4, #40]	; 0x28
   1348c:	ldr	ip, [r4, #48]	; 0x30
   13490:	mov	r1, #6
   13494:	mov	r2, #0
   13498:	mov	r3, #0
   1349c:	str	r1, [sp]
   134a0:	add	r1, r4, #100	; 0x64
   134a4:	blx	ip
   134a8:	ldr	r0, [r4, #40]	; 0x28
   134ac:	ldr	ip, [r4, #48]	; 0x30
   134b0:	mov	r1, #7
   134b4:	mov	r2, #0
   134b8:	mov	r3, #0
   134bc:	str	r1, [sp]
   134c0:	add	r1, r4, #108	; 0x6c
   134c4:	blx	ip
   134c8:	ldr	r0, [r4, #184]	; 0xb8
   134cc:	cmp	r0, #0
   134d0:	beq	134dc <flatcc_builder_clear@@Base+0x124>
   134d4:	add	r0, r4, #188	; 0xbc
   134d8:	bl	17b1c <flatcc_emitter_clear@@Base>
   134dc:	mov	r0, r4
   134e0:	mov	r1, #0
   134e4:	mov	r2, #232	; 0xe8
   134e8:	sub	sp, fp, #8
   134ec:	pop	{r4, sl, fp, lr}
   134f0:	b	12480 <memset@plt>

000134f4 <flatcc_builder_enter_user_frame_ptr@@Base>:
   134f4:	push	{r4, r5, r6, r7, fp, lr}
   134f8:	add	fp, sp, #16
   134fc:	sub	sp, sp, #8
   13500:	mov	r4, r0
   13504:	ldr	r0, [r0, #112]	; 0x70
   13508:	add	r1, r1, #7
   1350c:	ldr	r7, [r4, #228]	; 0xe4
   13510:	bic	r5, r1, #3
   13514:	add	r6, r4, #108	; 0x6c
   13518:	add	r2, r7, r5
   1351c:	cmp	r2, r0
   13520:	bls	13548 <flatcc_builder_enter_user_frame_ptr@@Base+0x54>
   13524:	ldr	r0, [r4, #40]	; 0x28
   13528:	ldr	ip, [r4, #48]	; 0x30
   1352c:	mov	r1, #7
   13530:	mov	r3, #0
   13534:	str	r1, [sp]
   13538:	mov	r1, r6
   1353c:	blx	ip
   13540:	cmp	r0, #0
   13544:	bne	1359c <flatcc_builder_enter_user_frame_ptr@@Base+0xa8>
   13548:	ldr	r0, [r6]
   1354c:	adds	r6, r0, r7
   13550:	beq	1358c <flatcc_builder_enter_user_frame_ptr@@Base+0x98>
   13554:	mov	r0, r6
   13558:	mov	r1, #0
   1355c:	mov	r2, r5
   13560:	bl	12480 <memset@plt>
   13564:	ldr	r0, [r4, #224]	; 0xe0
   13568:	str	r0, [r6], #4
   1356c:	ldr	r0, [r4, #228]	; 0xe4
   13570:	add	r1, r0, #4
   13574:	add	r0, r0, r5
   13578:	str	r1, [r4, #224]	; 0xe0
   1357c:	str	r0, [r4, #228]	; 0xe4
   13580:	mov	r0, r6
   13584:	sub	sp, fp, #16
   13588:	pop	{r4, r5, r6, r7, fp, pc}
   1358c:	mov	r6, #0
   13590:	mov	r0, r6
   13594:	sub	sp, fp, #16
   13598:	pop	{r4, r5, r6, r7, fp, pc}
   1359c:	movw	r0, #38528	; 0x9680
   135a0:	movw	r1, #34010	; 0x84da
   135a4:	movw	r3, #38074	; 0x94ba
   135a8:	mov	r2, #308	; 0x134
   135ac:	movt	r0, #1
   135b0:	movt	r1, #1
   135b4:	movt	r3, #1
   135b8:	bl	124b0 <__assert_fail@plt>

000135bc <flatcc_builder_enter_user_frame@@Base>:
   135bc:	push	{r4, r5, r6, r7, fp, lr}
   135c0:	add	fp, sp, #16
   135c4:	sub	sp, sp, #8
   135c8:	mov	r4, r0
   135cc:	ldr	r0, [r0, #112]	; 0x70
   135d0:	add	r1, r1, #7
   135d4:	ldr	r7, [r4, #228]	; 0xe4
   135d8:	bic	r5, r1, #3
   135dc:	add	r6, r4, #108	; 0x6c
   135e0:	add	r2, r7, r5
   135e4:	cmp	r2, r0
   135e8:	bls	13610 <flatcc_builder_enter_user_frame@@Base+0x54>
   135ec:	ldr	r0, [r4, #40]	; 0x28
   135f0:	ldr	ip, [r4, #48]	; 0x30
   135f4:	mov	r1, #7
   135f8:	mov	r3, #0
   135fc:	str	r1, [sp]
   13600:	mov	r1, r6
   13604:	blx	ip
   13608:	cmp	r0, #0
   1360c:	bne	1365c <flatcc_builder_enter_user_frame@@Base+0xa0>
   13610:	ldr	r0, [r6]
   13614:	adds	r6, r0, r7
   13618:	beq	13650 <flatcc_builder_enter_user_frame@@Base+0x94>
   1361c:	mov	r0, r6
   13620:	mov	r1, #0
   13624:	mov	r2, r5
   13628:	bl	12480 <memset@plt>
   1362c:	ldr	r0, [r4, #224]	; 0xe0
   13630:	str	r0, [r6]
   13634:	ldr	r1, [r4, #228]	; 0xe4
   13638:	add	r0, r1, #4
   1363c:	add	r1, r1, r5
   13640:	str	r0, [r4, #224]	; 0xe0
   13644:	str	r1, [r4, #228]	; 0xe4
   13648:	sub	sp, fp, #16
   1364c:	pop	{r4, r5, r6, r7, fp, pc}
   13650:	mov	r0, #0
   13654:	sub	sp, fp, #16
   13658:	pop	{r4, r5, r6, r7, fp, pc}
   1365c:	movw	r0, #38528	; 0x9680
   13660:	movw	r1, #34010	; 0x84da
   13664:	movw	r3, #38074	; 0x94ba
   13668:	mov	r2, #308	; 0x134
   1366c:	movt	r0, #1
   13670:	movt	r1, #1
   13674:	movt	r3, #1
   13678:	bl	124b0 <__assert_fail@plt>

0001367c <flatcc_builder_exit_user_frame@@Base>:
   1367c:	push	{fp, lr}
   13680:	mov	fp, sp
   13684:	ldr	r1, [r0, #224]	; 0xe0
   13688:	cmp	r1, #0
   1368c:	subne	r2, r1, #4
   13690:	strne	r2, [r0, #228]	; 0xe4
   13694:	ldrne	r2, [r0, #108]	; 0x6c
   13698:	addne	r1, r2, r1
   1369c:	ldrne	r1, [r1, #-4]
   136a0:	strne	r1, [r0, #224]	; 0xe0
   136a4:	movne	r0, r1
   136a8:	popne	{fp, pc}
   136ac:	movw	r0, #34142	; 0x855e
   136b0:	movw	r1, #34010	; 0x84da
   136b4:	movw	r3, #34167	; 0x8577
   136b8:	movw	r2, #542	; 0x21e
   136bc:	movt	r0, #1
   136c0:	movt	r1, #1
   136c4:	movt	r3, #1
   136c8:	bl	124b0 <__assert_fail@plt>

000136cc <flatcc_builder_exit_user_frame_at@@Base>:
   136cc:	push	{fp, lr}
   136d0:	mov	fp, sp
   136d4:	ldr	r2, [r0, #224]	; 0xe0
   136d8:	cmp	r2, r1
   136dc:	bcc	13728 <flatcc_builder_exit_user_frame_at@@Base+0x5c>
   136e0:	cmp	r1, #0
   136e4:	str	r1, [r0, #224]	; 0xe0
   136e8:	subne	r2, r1, #4
   136ec:	strne	r2, [r0, #228]	; 0xe4
   136f0:	ldrne	r2, [r0, #108]	; 0x6c
   136f4:	addne	r1, r2, r1
   136f8:	ldrne	r1, [r1, #-4]
   136fc:	strne	r1, [r0, #224]	; 0xe0
   13700:	movne	r0, r1
   13704:	popne	{fp, pc}
   13708:	movw	r0, #34142	; 0x855e
   1370c:	movw	r1, #34010	; 0x84da
   13710:	movw	r3, #34167	; 0x8577
   13714:	movw	r2, #542	; 0x21e
   13718:	movt	r0, #1
   1371c:	movt	r1, #1
   13720:	movt	r3, #1
   13724:	bl	124b0 <__assert_fail@plt>
   13728:	movw	r0, #34225	; 0x85b1
   1372c:	movw	r1, #34010	; 0x84da
   13730:	movw	r3, #34256	; 0x85d0
   13734:	movw	r2, #551	; 0x227
   13738:	movt	r0, #1
   1373c:	movt	r1, #1
   13740:	movt	r3, #1
   13744:	bl	124b0 <__assert_fail@plt>

00013748 <flatcc_builder_get_current_user_frame@@Base>:
   13748:	ldr	r0, [r0, #224]	; 0xe0
   1374c:	bx	lr

00013750 <flatcc_builder_get_user_frame_ptr@@Base>:
   13750:	ldr	r0, [r0, #108]	; 0x6c
   13754:	add	r0, r0, r1
   13758:	bx	lr

0001375c <flatcc_builder_embed_buffer@@Base>:
   1375c:	push	{r4, r5, r6, r7, fp, lr}
   13760:	add	fp, sp, #16
   13764:	sub	sp, sp, #88	; 0x58
   13768:	mov	r4, r0
   1376c:	ldr	r0, [fp, #8]
   13770:	mov	r5, r3
   13774:	mov	r7, r2
   13778:	mov	r2, r1
   1377c:	sub	r1, fp, #18
   13780:	strh	r0, [fp, #-18]	; 0xffffffee
   13784:	mov	r0, r4
   13788:	ldr	r3, [r4, #152]	; 0x98
   1378c:	cmp	r3, #0
   13790:	movwne	r3, #1
   13794:	bl	138cc <flatcc_builder_embed_buffer@@Base+0x170>
   13798:	ldr	r1, [fp, #12]
   1379c:	ldrh	r3, [fp, #-18]	; 0xffffffee
   137a0:	ldr	r0, [r4, #136]	; 0x88
   137a4:	mov	r2, #0
   137a8:	str	r2, [sp, #12]
   137ac:	str	r2, [sp, #8]
   137b0:	and	r1, r1, #2
   137b4:	sub	r3, r3, #1
   137b8:	add	r1, r5, r1, lsl #1
   137bc:	sub	r1, r0, r1
   137c0:	and	r3, r3, r1
   137c4:	add	r1, r3, r5
   137c8:	str	r1, [fp, #-24]	; 0xffffffe8
   137cc:	ldr	r1, [r4, #152]	; 0x98
   137d0:	cmp	r1, #0
   137d4:	mov	r1, #0
   137d8:	beq	137f8 <flatcc_builder_embed_buffer@@Base+0x9c>
   137dc:	mov	r1, #4
   137e0:	sub	r2, fp, #24
   137e4:	str	r1, [sp, #20]
   137e8:	str	r2, [sp, #16]
   137ec:	mov	r2, #1
   137f0:	str	r1, [sp, #8]
   137f4:	str	r2, [sp, #12]
   137f8:	cmp	r5, #0
   137fc:	beq	13820 <flatcc_builder_embed_buffer@@Base+0xc4>
   13800:	add	r6, sp, #8
   13804:	add	r1, r1, r5
   13808:	add	r6, r6, r2, lsl #3
   1380c:	add	r2, r2, #1
   13810:	str	r1, [sp, #8]
   13814:	str	r7, [r6, #8]
   13818:	str	r5, [r6, #12]
   1381c:	str	r2, [sp, #12]
   13820:	cmp	r3, #0
   13824:	beq	13850 <flatcc_builder_embed_buffer@@Base+0xf4>
   13828:	add	r7, sp, #8
   1382c:	movw	r6, #33480	; 0x82c8
   13830:	add	r1, r1, r3
   13834:	add	r7, r7, r2, lsl #3
   13838:	movt	r6, #1
   1383c:	add	r2, r2, #1
   13840:	str	r1, [sp, #8]
   13844:	str	r6, [r7, #8]
   13848:	str	r3, [r7, #12]
   1384c:	str	r2, [sp, #12]
   13850:	cmp	r1, #0
   13854:	ble	138ac <flatcc_builder_embed_buffer@@Base+0x150>
   13858:	sub	r5, r0, r1
   1385c:	ldr	r0, [r4, #36]	; 0x24
   13860:	ldr	r7, [r4, #44]	; 0x2c
   13864:	str	r1, [sp]
   13868:	add	r1, sp, #8
   1386c:	add	r1, r1, #8
   13870:	mov	r3, r5
   13874:	blx	r7
   13878:	cmp	r0, #0
   1387c:	streq	r5, [r4, #136]	; 0x88
   13880:	moveq	r0, r5
   13884:	subeq	sp, fp, #16
   13888:	popeq	{r4, r5, r6, r7, fp, pc}
   1388c:	movw	r0, #38528	; 0x9680
   13890:	movw	r1, #34010	; 0x84da
   13894:	movw	r3, #38207	; 0x953f
   13898:	movw	r2, #651	; 0x28b
   1389c:	movt	r0, #1
   138a0:	movt	r1, #1
   138a4:	movt	r3, #1
   138a8:	bl	124b0 <__assert_fail@plt>
   138ac:	movw	r0, #38528	; 0x9680
   138b0:	movw	r1, #34010	; 0x84da
   138b4:	movw	r3, #38207	; 0x953f
   138b8:	movw	r2, #647	; 0x287
   138bc:	movt	r0, #1
   138c0:	movt	r1, #1
   138c4:	movt	r3, #1
   138c8:	bl	124b0 <__assert_fail@plt>
   138cc:	push	{r4, sl, fp, lr}
   138d0:	add	fp, sp, #8
   138d4:	sub	sp, sp, #80	; 0x50
   138d8:	cmp	r2, #0
   138dc:	bne	138ec <flatcc_builder_embed_buffer@@Base+0x190>
   138e0:	ldrh	r2, [r0, #132]	; 0x84
   138e4:	cmp	r2, #0
   138e8:	movweq	r2, #1
   138ec:	ldrh	r4, [r1]
   138f0:	cmp	r4, #4
   138f4:	movwcc	r4, #4
   138f8:	cmpcs	r4, r2
   138fc:	bcs	1390c <flatcc_builder_embed_buffer@@Base+0x1b0>
   13900:	cmp	r4, r2
   13904:	movcc	r4, r2
   13908:	strh	r4, [r1]
   1390c:	cmp	r3, #0
   13910:	bne	13984 <flatcc_builder_embed_buffer@@Base+0x228>
   13914:	ldr	r4, [r0, #140]	; 0x8c
   13918:	sub	r1, r2, #1
   1391c:	ands	r1, r4, r1
   13920:	beq	13984 <flatcc_builder_embed_buffer@@Base+0x228>
   13924:	movw	r2, #33480	; 0x82c8
   13928:	str	r1, [sp, #20]
   1392c:	cmn	r1, #1
   13930:	movt	r2, #1
   13934:	str	r2, [sp, #16]
   13938:	mov	r2, #1
   1393c:	str	r1, [sp, #8]
   13940:	str	r2, [sp, #12]
   13944:	add	r2, r4, r1
   13948:	str	r2, [r0, #140]	; 0x8c
   1394c:	ble	1398c <flatcc_builder_embed_buffer@@Base+0x230>
   13950:	ldr	r2, [r0, #36]	; 0x24
   13954:	ldr	ip, [r0, #44]	; 0x2c
   13958:	add	r0, sp, #8
   1395c:	str	r1, [sp]
   13960:	mov	r3, r4
   13964:	add	r1, r0, #8
   13968:	mov	r0, r2
   1396c:	mov	r2, #1
   13970:	blx	ip
   13974:	cmp	r0, #0
   13978:	bne	139ac <flatcc_builder_embed_buffer@@Base+0x250>
   1397c:	cmn	r4, #1
   13980:	beq	139cc <flatcc_builder_embed_buffer@@Base+0x270>
   13984:	sub	sp, fp, #8
   13988:	pop	{r4, sl, fp, pc}
   1398c:	movw	r0, #38528	; 0x9680
   13990:	movw	r1, #34010	; 0x84da
   13994:	movw	r3, #38395	; 0x95fb
   13998:	movw	r2, #673	; 0x2a1
   1399c:	movt	r0, #1
   139a0:	movt	r1, #1
   139a4:	movt	r3, #1
   139a8:	bl	124b0 <__assert_fail@plt>
   139ac:	movw	r0, #38528	; 0x9680
   139b0:	movw	r1, #34010	; 0x84da
   139b4:	movw	r3, #38395	; 0x95fb
   139b8:	movw	r2, #677	; 0x2a5
   139bc:	movt	r0, #1
   139c0:	movt	r1, #1
   139c4:	movt	r3, #1
   139c8:	bl	124b0 <__assert_fail@plt>
   139cc:	movw	r0, #38528	; 0x9680
   139d0:	movw	r1, #34010	; 0x84da
   139d4:	movw	r3, #38141	; 0x94fd
   139d8:	movw	r2, #702	; 0x2be
   139dc:	movt	r0, #1
   139e0:	movt	r1, #1
   139e4:	movt	r3, #1
   139e8:	bl	124b0 <__assert_fail@plt>

000139ec <flatcc_builder_create_buffer@@Base>:
   139ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139f0:	add	fp, sp, #28
   139f4:	sub	sp, sp, #100	; 0x64
   139f8:	ldr	sl, [fp, #12]
   139fc:	mov	r4, r0
   13a00:	ldr	r0, [fp, #8]
   13a04:	mov	r7, r1
   13a08:	mov	r5, #0
   13a0c:	mov	r6, r3
   13a10:	sub	r1, fp, #30
   13a14:	str	r5, [sp, #12]
   13a18:	and	r9, sl, #1
   13a1c:	strh	r0, [fp, #-30]	; 0xffffffe2
   13a20:	mov	r0, r4
   13a24:	mov	r3, r9
   13a28:	bl	138cc <flatcc_builder_embed_buffer@@Base+0x170>
   13a2c:	ldrh	r0, [r4, #128]	; 0x80
   13a30:	ldrh	r1, [fp, #-30]	; 0xffffffe2
   13a34:	str	r6, [sp, #8]
   13a38:	cmp	r0, r1
   13a3c:	strhcc	r1, [r4, #128]	; 0x80
   13a40:	cmp	r7, #0
   13a44:	beq	13a60 <flatcc_builder_create_buffer@@Base+0x74>
   13a48:	ldr	r5, [r7]
   13a4c:	cmp	r5, #0
   13a50:	str	r5, [sp, #12]
   13a54:	movwne	r5, #1
   13a58:	lsl	r7, r5, #2
   13a5c:	b	13a64 <flatcc_builder_create_buffer@@Base+0x78>
   13a60:	mov	r7, #0
   13a64:	ldr	r0, [r4, #136]	; 0x88
   13a68:	and	r2, sl, #2
   13a6c:	mov	r3, #0
   13a70:	sub	r6, r1, #1
   13a74:	ands	ip, sl, #3
   13a78:	mov	sl, #4
   13a7c:	mov	r1, #4
   13a80:	str	r3, [sp, #20]
   13a84:	str	r3, [sp, #16]
   13a88:	sub	r2, r0, r2, lsl #1
   13a8c:	sub	r2, r2, r7
   13a90:	sub	r2, r2, #4
   13a94:	beq	13ab8 <flatcc_builder_create_buffer@@Base+0xcc>
   13a98:	mov	r1, #4
   13a9c:	sub	r3, fp, #40	; 0x28
   13aa0:	str	r1, [sp, #28]
   13aa4:	str	r3, [sp, #24]
   13aa8:	str	r1, [sp, #16]
   13aac:	mov	r3, #1
   13ab0:	mov	r1, #8
   13ab4:	str	r3, [sp, #20]
   13ab8:	add	lr, sp, #16
   13abc:	and	r6, r2, r6
   13ac0:	sub	r8, fp, #36	; 0x24
   13ac4:	str	r1, [sp, #16]
   13ac8:	cmp	r5, #0
   13acc:	add	r2, lr, r3, lsl #3
   13ad0:	str	r8, [r2, #8]
   13ad4:	str	sl, [r2, #12]
   13ad8:	add	r2, r3, #1
   13adc:	str	r2, [sp, #20]
   13ae0:	beq	13b04 <flatcc_builder_create_buffer@@Base+0x118>
   13ae4:	add	r2, lr, r2, lsl #3
   13ae8:	add	r1, r1, r7
   13aec:	add	r5, sp, #12
   13af0:	str	r1, [sp, #16]
   13af4:	str	r5, [r2, #8]
   13af8:	str	r7, [r2, #12]
   13afc:	orr	r2, r3, #2
   13b00:	str	r2, [sp, #20]
   13b04:	cmp	r6, #0
   13b08:	beq	13b30 <flatcc_builder_create_buffer@@Base+0x144>
   13b0c:	movw	r5, #33480	; 0x82c8
   13b10:	add	r3, lr, r2, lsl #3
   13b14:	add	r1, r1, r6
   13b18:	add	r2, r2, #1
   13b1c:	movt	r5, #1
   13b20:	str	r1, [sp, #16]
   13b24:	str	r5, [r3, #8]
   13b28:	str	r6, [r3, #12]
   13b2c:	str	r2, [sp, #20]
   13b30:	sub	r7, r0, r1
   13b34:	cmp	ip, #0
   13b38:	mov	r6, #144	; 0x90
   13b3c:	ldr	r3, [sp, #8]
   13b40:	mov	r0, r7
   13b44:	addne	r0, r0, #4
   13b48:	cmp	r9, #0
   13b4c:	movweq	r6, #140	; 0x8c
   13b50:	cmp	r1, #0
   13b54:	ldr	r6, [r4, r6]
   13b58:	sub	r3, r3, r0
   13b5c:	str	r3, [fp, #-36]	; 0xffffffdc
   13b60:	sub	r0, r6, r0
   13b64:	str	r0, [fp, #-40]	; 0xffffffd8
   13b68:	ble	13bc0 <flatcc_builder_create_buffer@@Base+0x1d4>
   13b6c:	ldr	r0, [r4, #36]	; 0x24
   13b70:	ldr	r6, [r4, #44]	; 0x2c
   13b74:	str	r1, [sp]
   13b78:	add	r1, lr, #8
   13b7c:	mov	r3, r7
   13b80:	blx	r6
   13b84:	cmp	r0, #0
   13b88:	bne	13be0 <flatcc_builder_create_buffer@@Base+0x1f4>
   13b8c:	cmp	r7, #0
   13b90:	str	r7, [r4, #136]	; 0x88
   13b94:	movne	r0, r7
   13b98:	subne	sp, fp, #28
   13b9c:	popne	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ba0:	movw	r0, #38528	; 0x9680
   13ba4:	movw	r1, #34010	; 0x84da
   13ba8:	movw	r3, #34325	; 0x8615
   13bac:	mov	r2, #772	; 0x304
   13bb0:	movt	r0, #1
   13bb4:	movt	r1, #1
   13bb8:	movt	r3, #1
   13bbc:	bl	124b0 <__assert_fail@plt>
   13bc0:	movw	r0, #38528	; 0x9680
   13bc4:	movw	r1, #34010	; 0x84da
   13bc8:	movw	r3, #38207	; 0x953f
   13bcc:	movw	r2, #647	; 0x287
   13bd0:	movt	r0, #1
   13bd4:	movt	r1, #1
   13bd8:	movt	r3, #1
   13bdc:	bl	124b0 <__assert_fail@plt>
   13be0:	movw	r0, #38528	; 0x9680
   13be4:	movw	r1, #34010	; 0x84da
   13be8:	movw	r3, #38207	; 0x953f
   13bec:	movw	r2, #651	; 0x28b
   13bf0:	movt	r0, #1
   13bf4:	movt	r1, #1
   13bf8:	movt	r3, #1
   13bfc:	bl	124b0 <__assert_fail@plt>

00013c00 <flatcc_builder_create_struct@@Base>:
   13c00:	push	{r4, r5, r6, sl, fp, lr}
   13c04:	add	fp, sp, #16
   13c08:	sub	sp, sp, #80	; 0x50
   13c0c:	cmp	r3, #0
   13c10:	beq	13ce8 <flatcc_builder_create_struct@@Base+0xe8>
   13c14:	mov	r5, r0
   13c18:	ldrh	r0, [r0, #128]	; 0x80
   13c1c:	mov	r4, #0
   13c20:	cmp	r0, r3
   13c24:	strhcc	r3, [r5, #128]	; 0x80
   13c28:	sub	r3, r3, #1
   13c2c:	cmp	r2, #0
   13c30:	ldr	r0, [r5, #136]	; 0x88
   13c34:	str	r4, [sp, #12]
   13c38:	str	r4, [sp, #8]
   13c3c:	movne	r4, #1
   13c40:	strne	r2, [sp, #20]
   13c44:	strne	r1, [sp, #16]
   13c48:	strne	r2, [sp, #8]
   13c4c:	strne	r4, [sp, #12]
   13c50:	sub	r6, r0, r2
   13c54:	and	r3, r6, r3
   13c58:	cmp	r3, #0
   13c5c:	beq	13c88 <flatcc_builder_create_struct@@Base+0x88>
   13c60:	add	r1, sp, #8
   13c64:	movw	r6, #33480	; 0x82c8
   13c68:	add	r2, r3, r2
   13c6c:	add	r1, r1, r4, lsl #3
   13c70:	movt	r6, #1
   13c74:	add	r4, r4, #1
   13c78:	str	r2, [sp, #8]
   13c7c:	str	r6, [r1, #8]
   13c80:	str	r3, [r1, #12]
   13c84:	str	r4, [sp, #12]
   13c88:	cmp	r2, #0
   13c8c:	ble	13d08 <flatcc_builder_create_struct@@Base+0x108>
   13c90:	sub	r6, r0, r2
   13c94:	ldr	r0, [r5, #36]	; 0x24
   13c98:	ldr	ip, [r5, #44]	; 0x2c
   13c9c:	add	r1, sp, #8
   13ca0:	str	r2, [sp]
   13ca4:	mov	r2, r4
   13ca8:	add	r1, r1, #8
   13cac:	mov	r3, r6
   13cb0:	blx	ip
   13cb4:	cmp	r0, #0
   13cb8:	streq	r6, [r5, #136]	; 0x88
   13cbc:	moveq	r0, r6
   13cc0:	subeq	sp, fp, #16
   13cc4:	popeq	{r4, r5, r6, sl, fp, pc}
   13cc8:	movw	r0, #38528	; 0x9680
   13ccc:	movw	r1, #34010	; 0x84da
   13cd0:	movw	r3, #38207	; 0x953f
   13cd4:	movw	r2, #651	; 0x28b
   13cd8:	movt	r0, #1
   13cdc:	movt	r1, #1
   13ce0:	movt	r3, #1
   13ce4:	bl	124b0 <__assert_fail@plt>
   13ce8:	movw	r0, #34456	; 0x8698
   13cec:	movw	r1, #34010	; 0x84da
   13cf0:	movw	r3, #34467	; 0x86a3
   13cf4:	movw	r2, #783	; 0x30f
   13cf8:	movt	r0, #1
   13cfc:	movt	r1, #1
   13d00:	movt	r3, #1
   13d04:	bl	124b0 <__assert_fail@plt>
   13d08:	movw	r0, #38528	; 0x9680
   13d0c:	movw	r1, #34010	; 0x84da
   13d10:	movw	r3, #38207	; 0x953f
   13d14:	movw	r2, #647	; 0x287
   13d18:	movt	r0, #1
   13d1c:	movt	r1, #1
   13d20:	movt	r3, #1
   13d24:	bl	124b0 <__assert_fail@plt>

00013d28 <flatcc_builder_start_buffer@@Base>:
   13d28:	push	{r4, r5, r6, r7, fp, lr}
   13d2c:	add	fp, sp, #16
   13d30:	mov	r5, r1
   13d34:	ldrh	r1, [r0, #128]	; 0x80
   13d38:	mov	r6, r3
   13d3c:	mov	r7, r2
   13d40:	mov	r4, r0
   13d44:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   13d48:	mov	r1, r0
   13d4c:	mvn	r0, #0
   13d50:	cmp	r1, #0
   13d54:	popne	{r4, r5, r6, r7, fp, pc}
   13d58:	mov	r0, #1
   13d5c:	cmp	r5, #0
   13d60:	strh	r0, [r4, #128]	; 0x80
   13d64:	ldrh	r1, [r4, #132]	; 0x84
   13d68:	ldr	r2, [r4, #32]
   13d6c:	strh	r1, [r2, #34]	; 0x22
   13d70:	strh	r7, [r4, #132]	; 0x84
   13d74:	ldrh	r1, [r4, #164]	; 0xa4
   13d78:	ldr	r2, [r4, #32]
   13d7c:	strh	r1, [r2, #32]
   13d80:	strh	r6, [r4, #164]	; 0xa4
   13d84:	ldr	r1, [r4, #32]
   13d88:	ldr	r2, [r4, #144]	; 0x90
   13d8c:	str	r2, [r1, #20]
   13d90:	ldr	r1, [r4, #32]
   13d94:	ldr	r2, [r4, #152]	; 0x98
   13d98:	str	r2, [r1, #28]
   13d9c:	ldr	r3, [r4, #148]	; 0x94
   13da0:	ldr	r1, [r4, #32]
   13da4:	ldr	r2, [r4, #136]	; 0x88
   13da8:	ldr	r7, [r4, #168]	; 0xa8
   13dac:	add	r6, r3, #1
   13db0:	str	r2, [r4, #144]	; 0x90
   13db4:	str	r6, [r4, #148]	; 0x94
   13db8:	str	r3, [r4, #152]	; 0x98
   13dbc:	str	r7, [r1, #16]
   13dc0:	movw	r1, #33480	; 0x82c8
   13dc4:	movt	r1, #1
   13dc8:	movne	r1, r5
   13dcc:	ldr	r1, [r1]
   13dd0:	str	r1, [r4, #168]	; 0xa8
   13dd4:	ldr	r1, [r4, #32]
   13dd8:	strh	r0, [r1, #14]
   13ddc:	mov	r0, #0
   13de0:	pop	{r4, r5, r6, r7, fp, pc}
   13de4:	push	{r4, r5, r6, r7, fp, lr}
   13de8:	add	fp, sp, #16
   13dec:	sub	sp, sp, #8
   13df0:	mov	r5, r1
   13df4:	ldr	r1, [r0, #156]	; 0x9c
   13df8:	ldr	r2, [r0, #160]	; 0xa0
   13dfc:	mov	r4, r0
   13e00:	add	r0, r1, #1
   13e04:	cmp	r1, r2
   13e08:	str	r0, [r4, #156]	; 0x9c
   13e0c:	bge	13e20 <flatcc_builder_start_buffer@@Base+0xf8>
   13e10:	ldr	r0, [r4, #32]
   13e14:	add	r0, r0, #36	; 0x24
   13e18:	str	r0, [r4, #32]
   13e1c:	b	13eb4 <flatcc_builder_start_buffer@@Base+0x18c>
   13e20:	ldr	r2, [r4, #176]	; 0xb0
   13e24:	mvn	r6, #0
   13e28:	cmp	r2, #1
   13e2c:	cmpge	r1, r2
   13e30:	bge	13eec <flatcc_builder_start_buffer@@Base+0x1c4>
   13e34:	add	r7, r0, r0, lsl #3
   13e38:	ldr	r0, [r4, #88]	; 0x58
   13e3c:	lsl	r2, r7, #2
   13e40:	cmp	r2, r0
   13e44:	bls	13e6c <flatcc_builder_start_buffer@@Base+0x144>
   13e48:	ldr	r0, [r4, #40]	; 0x28
   13e4c:	ldr	ip, [r4, #48]	; 0x30
   13e50:	mov	r3, #4
   13e54:	add	r1, r4, #84	; 0x54
   13e58:	str	r3, [sp]
   13e5c:	mov	r3, #0
   13e60:	blx	ip
   13e64:	cmp	r0, #0
   13e68:	bne	13ef8 <flatcc_builder_start_buffer@@Base+0x1d0>
   13e6c:	ldr	r1, [r4, #84]	; 0x54
   13e70:	mvn	r0, #35	; 0x23
   13e74:	add	r0, r0, r7, lsl #2
   13e78:	adds	r0, r0, r1
   13e7c:	str	r0, [r4, #32]
   13e80:	beq	13eec <flatcc_builder_start_buffer@@Base+0x1c4>
   13e84:	ldr	r1, [r4, #88]	; 0x58
   13e88:	movw	r3, #36409	; 0x8e39
   13e8c:	ldr	r2, [r4, #176]	; 0xb0
   13e90:	movt	r3, #14563	; 0x38e3
   13e94:	umull	r1, r3, r1, r3
   13e98:	cmp	r2, r3, lsr #3
   13e9c:	lsr	r1, r3, #3
   13ea0:	mov	r3, r1
   13ea4:	movlt	r3, r2
   13ea8:	cmp	r2, #0
   13eac:	movle	r3, r1
   13eb0:	str	r3, [r4, #160]	; 0xa0
   13eb4:	ldr	r1, [r4, #20]
   13eb8:	mvn	r3, #3
   13ebc:	mov	r6, #0
   13ec0:	str	r1, [r0, #8]
   13ec4:	ldrh	r2, [r4, #130]	; 0x82
   13ec8:	strh	r2, [r0, #12]
   13ecc:	strh	r5, [r4, #130]	; 0x82
   13ed0:	ldr	r2, [r4, #28]
   13ed4:	stm	r0, {r2, r3}
   13ed8:	add	r0, r1, r2
   13edc:	str	r6, [r4, #20]
   13ee0:	add	r0, r0, #7
   13ee4:	bic	r0, r0, #7
   13ee8:	str	r0, [r4, #28]
   13eec:	mov	r0, r6
   13ef0:	sub	sp, fp, #16
   13ef4:	pop	{r4, r5, r6, r7, fp, pc}
   13ef8:	movw	r0, #38528	; 0x9680
   13efc:	movw	r1, #34010	; 0x84da
   13f00:	movw	r3, #38074	; 0x94ba
   13f04:	mov	r2, #308	; 0x134
   13f08:	movt	r0, #1
   13f0c:	movt	r1, #1
   13f10:	movt	r3, #1
   13f14:	bl	124b0 <__assert_fail@plt>

00013f18 <flatcc_builder_end_buffer@@Base>:
   13f18:	push	{r4, r5, r6, sl, fp, lr}
   13f1c:	add	fp, sp, #16
   13f20:	sub	sp, sp, #8
   13f24:	mov	r4, r0
   13f28:	ldr	r0, [r0, #32]
   13f2c:	ldrh	r0, [r0, #14]
   13f30:	cmp	r0, #1
   13f34:	bne	14028 <flatcc_builder_end_buffer@@Base+0x110>
   13f38:	mov	r3, r1
   13f3c:	ldr	r1, [r4, #152]	; 0x98
   13f40:	ldrh	r0, [r4, #164]	; 0xa4
   13f44:	ldrh	r2, [r4, #132]	; 0x84
   13f48:	cmp	r1, #0
   13f4c:	ldrh	r1, [r4, #128]	; 0x80
   13f50:	and	r0, r0, #2
   13f54:	orrne	r0, r0, #1
   13f58:	cmp	r1, r2
   13f5c:	movcc	r1, r2
   13f60:	strhcc	r2, [r4, #128]	; 0x80
   13f64:	str	r0, [sp, #4]
   13f68:	mov	r0, r4
   13f6c:	str	r1, [sp]
   13f70:	add	r1, r4, #168	; 0xa8
   13f74:	bl	139ec <flatcc_builder_create_buffer@@Base>
   13f78:	mov	r6, r0
   13f7c:	cmp	r0, #0
   13f80:	beq	1401c <flatcc_builder_end_buffer@@Base+0x104>
   13f84:	ldr	r1, [r4, #32]
   13f88:	ldr	r0, [r4, #16]
   13f8c:	ldr	r2, [r4, #20]
   13f90:	ldr	r3, [r1, #20]
   13f94:	str	r3, [r4, #144]	; 0x90
   13f98:	ldr	r3, [r1, #28]
   13f9c:	str	r3, [r4, #152]	; 0x98
   13fa0:	ldr	r3, [r1, #16]
   13fa4:	str	r3, [r4, #168]	; 0xa8
   13fa8:	ldrh	r1, [r1, #32]
   13fac:	strh	r1, [r4, #164]	; 0xa4
   13fb0:	mov	r1, #0
   13fb4:	bl	12480 <memset@plt>
   13fb8:	ldr	r0, [r4, #32]
   13fbc:	ldr	r1, [r4, #60]	; 0x3c
   13fc0:	ldr	r2, [r4, #64]	; 0x40
   13fc4:	ldr	r3, [r0, #8]
   13fc8:	str	r3, [r4, #20]
   13fcc:	ldr	r3, [r0]
   13fd0:	str	r3, [r4, #28]
   13fd4:	add	r1, r1, r3
   13fd8:	ldr	r5, [r0, #4]
   13fdc:	str	r1, [r4, #16]
   13fe0:	sub	r1, r2, r3
   13fe4:	cmp	r1, r5
   13fe8:	movhi	r1, r5
   13fec:	str	r1, [r4, #24]
   13ff0:	ldrh	r1, [r4, #130]	; 0x82
   13ff4:	ldrh	r2, [r4, #128]	; 0x80
   13ff8:	cmp	r2, r1
   13ffc:	strhcc	r1, [r4, #128]	; 0x80
   14000:	ldrh	r1, [r0, #12]
   14004:	sub	r0, r0, #36	; 0x24
   14008:	str	r0, [r4, #32]
   1400c:	strh	r1, [r4, #130]	; 0x82
   14010:	ldr	r0, [r4, #156]	; 0x9c
   14014:	sub	r0, r0, #1
   14018:	str	r0, [r4, #156]	; 0x9c
   1401c:	mov	r0, r6
   14020:	sub	sp, fp, #16
   14024:	pop	{r4, r5, r6, sl, fp, pc}
   14028:	movw	r0, #34569	; 0x8709
   1402c:	movw	r1, #34010	; 0x84da
   14030:	movw	r3, #34613	; 0x8735
   14034:	movw	r2, #838	; 0x346
   14038:	movt	r0, #1
   1403c:	movt	r1, #1
   14040:	movt	r3, #1
   14044:	bl	124b0 <__assert_fail@plt>

00014048 <flatcc_builder_start_struct@@Base>:
   14048:	push	{r4, r5, r6, r7, fp, lr}
   1404c:	add	fp, sp, #16
   14050:	sub	sp, sp, #8
   14054:	mov	r6, r1
   14058:	mov	r1, r2
   1405c:	mov	r4, r0
   14060:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   14064:	mov	r5, #0
   14068:	cmp	r0, #0
   1406c:	bne	140e8 <flatcc_builder_start_struct@@Base+0xa0>
   14070:	ldr	r2, [r4, #32]
   14074:	mov	r0, #2
   14078:	mvn	r7, #3
   1407c:	strh	r0, [r2, #14]
   14080:	ldr	r1, [r4, #28]
   14084:	ldr	r3, [r4, #64]	; 0x40
   14088:	ldr	r0, [r4, #60]	; 0x3c
   1408c:	sub	r3, r3, r1
   14090:	add	r0, r0, r1
   14094:	cmn	r3, #4
   14098:	str	r0, [r4, #16]
   1409c:	movcs	r3, r7
   140a0:	str	r3, [r4, #24]
   140a4:	str	r7, [r2, #4]
   140a8:	ldr	r7, [r4, #20]
   140ac:	add	r2, r7, r6
   140b0:	cmp	r2, r3
   140b4:	str	r2, [r4, #20]
   140b8:	bcc	14124 <flatcc_builder_start_struct@@Base+0xdc>
   140bc:	ldr	r0, [r4, #40]	; 0x28
   140c0:	ldr	r6, [r4, #48]	; 0x30
   140c4:	add	r1, r1, r2
   140c8:	mov	r3, #1
   140cc:	str	r3, [sp]
   140d0:	add	r2, r1, #1
   140d4:	add	r1, r4, #60	; 0x3c
   140d8:	mov	r3, #1
   140dc:	blx	r6
   140e0:	cmp	r0, #0
   140e4:	beq	140f4 <flatcc_builder_start_struct@@Base+0xac>
   140e8:	mov	r0, r5
   140ec:	sub	sp, fp, #16
   140f0:	pop	{r4, r5, r6, r7, fp, pc}
   140f4:	ldr	r1, [r4, #28]
   140f8:	ldr	r0, [r4, #60]	; 0x3c
   140fc:	ldr	r3, [r4, #64]	; 0x40
   14100:	ldr	r2, [r4, #32]
   14104:	add	r0, r0, r1
   14108:	sub	r1, r3, r1
   1410c:	mvn	r3, #3
   14110:	cmn	r1, #4
   14114:	str	r0, [r4, #16]
   14118:	movcs	r1, r3
   1411c:	str	r1, [r4, #24]
   14120:	str	r3, [r2, #4]
   14124:	add	r5, r0, r7
   14128:	mov	r0, r5
   1412c:	sub	sp, fp, #16
   14130:	pop	{r4, r5, r6, r7, fp, pc}

00014134 <flatcc_builder_struct_edit@@Base>:
   14134:	ldr	r0, [r0, #16]
   14138:	bx	lr

0001413c <flatcc_builder_end_struct@@Base>:
   1413c:	push	{r4, r5, fp, lr}
   14140:	add	fp, sp, #8
   14144:	mov	r4, r0
   14148:	ldr	r0, [r0, #32]
   1414c:	ldrh	r0, [r0, #14]
   14150:	cmp	r0, #2
   14154:	bne	141f4 <flatcc_builder_end_struct@@Base+0xb8>
   14158:	ldrh	r3, [r4, #130]	; 0x82
   1415c:	ldr	r1, [r4, #16]
   14160:	ldr	r2, [r4, #20]
   14164:	mov	r0, r4
   14168:	bl	13c00 <flatcc_builder_create_struct@@Base>
   1416c:	mov	r5, r0
   14170:	cmp	r0, #0
   14174:	beq	141ec <flatcc_builder_end_struct@@Base+0xb0>
   14178:	ldr	r0, [r4, #16]
   1417c:	ldr	r2, [r4, #20]
   14180:	mov	r1, #0
   14184:	bl	12480 <memset@plt>
   14188:	ldr	r0, [r4, #32]
   1418c:	ldr	r1, [r4, #60]	; 0x3c
   14190:	ldr	ip, [r4, #64]	; 0x40
   14194:	ldr	r3, [r0, #8]
   14198:	str	r3, [r4, #20]
   1419c:	ldr	r3, [r0]
   141a0:	str	r3, [r4, #28]
   141a4:	add	r1, r1, r3
   141a8:	ldr	r2, [r0, #4]
   141ac:	str	r1, [r4, #16]
   141b0:	sub	r1, ip, r3
   141b4:	cmp	r1, r2
   141b8:	movhi	r1, r2
   141bc:	str	r1, [r4, #24]
   141c0:	ldrh	r1, [r4, #130]	; 0x82
   141c4:	ldrh	r2, [r4, #128]	; 0x80
   141c8:	cmp	r2, r1
   141cc:	strhcc	r1, [r4, #128]	; 0x80
   141d0:	ldrh	r1, [r0, #12]
   141d4:	sub	r0, r0, #36	; 0x24
   141d8:	str	r0, [r4, #32]
   141dc:	strh	r1, [r4, #130]	; 0x82
   141e0:	ldr	r0, [r4, #156]	; 0x9c
   141e4:	sub	r0, r0, #1
   141e8:	str	r0, [r4, #156]	; 0x9c
   141ec:	mov	r0, r5
   141f0:	pop	{r4, r5, fp, pc}
   141f4:	movw	r0, #34702	; 0x878e
   141f8:	movw	r1, #34010	; 0x84da
   141fc:	movw	r3, #34746	; 0x87ba
   14200:	mov	r2, #872	; 0x368
   14204:	movt	r0, #1
   14208:	movt	r1, #1
   1420c:	movt	r3, #1
   14210:	bl	124b0 <__assert_fail@plt>

00014214 <flatcc_builder_extend_vector@@Base>:
   14214:	push	{r4, r5, fp, lr}
   14218:	add	fp, sp, #8
   1421c:	sub	sp, sp, #8
   14220:	mov	r4, r0
   14224:	ldr	r0, [r0, #32]
   14228:	ldr	r2, [r0, #20]
   1422c:	adds	r2, r2, r1
   14230:	bcs	142f0 <flatcc_builder_extend_vector@@Base+0xdc>
   14234:	ldr	r3, [r0, #24]
   14238:	cmp	r2, r3
   1423c:	bhi	142f0 <flatcc_builder_extend_vector@@Base+0xdc>
   14240:	str	r2, [r0, #20]
   14244:	ldr	r2, [r4, #32]
   14248:	ldr	r5, [r4, #20]
   1424c:	ldr	r0, [r4, #24]
   14250:	ldr	r2, [r2, #16]
   14254:	mla	r1, r2, r1, r5
   14258:	cmp	r1, r0
   1425c:	str	r1, [r4, #20]
   14260:	bcs	14274 <flatcc_builder_extend_vector@@Base+0x60>
   14264:	ldr	r0, [r4, #16]
   14268:	add	r0, r0, r5
   1426c:	sub	sp, fp, #8
   14270:	pop	{r4, r5, fp, pc}
   14274:	ldr	r2, [r4, #28]
   14278:	ldr	r0, [r4, #40]	; 0x28
   1427c:	ldr	ip, [r4, #48]	; 0x30
   14280:	mov	r3, #1
   14284:	str	r3, [sp]
   14288:	mov	r3, #1
   1428c:	add	r1, r1, r2
   14290:	add	r2, r1, #1
   14294:	add	r1, r4, #60	; 0x3c
   14298:	blx	ip
   1429c:	mov	r1, r0
   142a0:	mov	r0, #0
   142a4:	cmp	r1, #0
   142a8:	beq	142b4 <flatcc_builder_extend_vector@@Base+0xa0>
   142ac:	sub	sp, fp, #8
   142b0:	pop	{r4, r5, fp, pc}
   142b4:	ldr	r1, [r4, #28]
   142b8:	ldr	r0, [r4, #60]	; 0x3c
   142bc:	ldr	r3, [r4, #64]	; 0x40
   142c0:	ldr	r2, [r4, #32]
   142c4:	add	r0, r0, r1
   142c8:	sub	r1, r3, r1
   142cc:	mvn	r3, #3
   142d0:	cmn	r1, #4
   142d4:	str	r0, [r4, #16]
   142d8:	movcs	r1, r3
   142dc:	str	r1, [r4, #24]
   142e0:	str	r3, [r2, #4]
   142e4:	add	r0, r0, r5
   142e8:	sub	sp, fp, #8
   142ec:	pop	{r4, r5, fp, pc}
   142f0:	movw	r0, #38281	; 0x9589
   142f4:	movw	r1, #34010	; 0x84da
   142f8:	movw	r3, #38308	; 0x95a4
   142fc:	mov	r2, #892	; 0x37c
   14300:	movt	r0, #1
   14304:	movt	r1, #1
   14308:	movt	r3, #1
   1430c:	bl	124b0 <__assert_fail@plt>

00014310 <flatcc_builder_vector_push@@Base>:
   14310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14314:	add	fp, sp, #24
   14318:	sub	sp, sp, #8
   1431c:	mov	r5, r0
   14320:	ldr	r0, [r0, #32]
   14324:	mov	r8, r1
   14328:	ldrh	r1, [r0, #14]
   1432c:	cmp	r1, #4
   14330:	bne	1441c <flatcc_builder_vector_push@@Base+0x10c>
   14334:	ldr	r1, [r0, #20]
   14338:	ldr	r2, [r0, #24]
   1433c:	cmp	r1, r2
   14340:	bhi	1443c <flatcc_builder_vector_push@@Base+0x12c>
   14344:	add	r1, r1, #1
   14348:	str	r1, [r0, #20]
   1434c:	ldr	r1, [r5, #32]
   14350:	ldr	r4, [r5, #20]
   14354:	ldr	r0, [r5, #24]
   14358:	ldr	r6, [r1, #16]
   1435c:	add	r1, r4, r6
   14360:	cmp	r1, r0
   14364:	str	r1, [r5, #20]
   14368:	bcs	14394 <flatcc_builder_vector_push@@Base+0x84>
   1436c:	ldr	r0, [r5, #16]
   14370:	adds	r7, r0, r4
   14374:	beq	1440c <flatcc_builder_vector_push@@Base+0xfc>
   14378:	mov	r0, r7
   1437c:	mov	r1, r8
   14380:	mov	r2, r6
   14384:	bl	123fc <memcpy@plt>
   14388:	mov	r0, r7
   1438c:	sub	sp, fp, #24
   14390:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14394:	ldr	r2, [r5, #28]
   14398:	ldr	r0, [r5, #40]	; 0x28
   1439c:	ldr	r7, [r5, #48]	; 0x30
   143a0:	mov	r3, #1
   143a4:	str	r3, [sp]
   143a8:	mov	r3, #1
   143ac:	add	r1, r1, r2
   143b0:	add	r2, r1, #1
   143b4:	add	r1, r5, #60	; 0x3c
   143b8:	blx	r7
   143bc:	mov	r7, #0
   143c0:	cmp	r0, #0
   143c4:	beq	143d4 <flatcc_builder_vector_push@@Base+0xc4>
   143c8:	mov	r0, r7
   143cc:	sub	sp, fp, #24
   143d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143d4:	ldr	r1, [r5, #28]
   143d8:	ldr	r0, [r5, #60]	; 0x3c
   143dc:	ldr	r3, [r5, #64]	; 0x40
   143e0:	ldr	r2, [r5, #32]
   143e4:	add	r0, r0, r1
   143e8:	sub	r1, r3, r1
   143ec:	mvn	r3, #3
   143f0:	cmn	r1, #4
   143f4:	str	r0, [r5, #16]
   143f8:	movcs	r1, r3
   143fc:	str	r1, [r5, #24]
   14400:	str	r3, [r2, #4]
   14404:	adds	r7, r0, r4
   14408:	bne	14378 <flatcc_builder_vector_push@@Base+0x68>
   1440c:	mov	r7, #0
   14410:	mov	r0, r7
   14414:	sub	sp, fp, #24
   14418:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1441c:	movw	r0, #34813	; 0x87fd
   14420:	movw	r1, #34010	; 0x84da
   14424:	movw	r3, #34857	; 0x8829
   14428:	movw	r2, #907	; 0x38b
   1442c:	movt	r0, #1
   14430:	movt	r1, #1
   14434:	movt	r3, #1
   14438:	bl	124b0 <__assert_fail@plt>
   1443c:	movw	r0, #34924	; 0x886c
   14440:	movw	r1, #34010	; 0x84da
   14444:	movw	r3, #34857	; 0x8829
   14448:	mov	r2, #908	; 0x38c
   1444c:	movt	r0, #1
   14450:	movt	r1, #1
   14454:	movt	r3, #1
   14458:	bl	124b0 <__assert_fail@plt>

0001445c <flatcc_builder_append_vector@@Base>:
   1445c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14460:	add	fp, sp, #24
   14464:	sub	sp, sp, #8
   14468:	mov	r6, r0
   1446c:	ldr	r0, [r0, #32]
   14470:	mov	r8, r1
   14474:	ldrh	r1, [r0, #14]
   14478:	cmp	r1, #4
   1447c:	bne	14590 <flatcc_builder_append_vector@@Base+0x134>
   14480:	ldr	r1, [r0, #20]
   14484:	mov	r5, r2
   14488:	adds	r1, r1, r2
   1448c:	bcs	14570 <flatcc_builder_append_vector@@Base+0x114>
   14490:	ldr	r2, [r0, #24]
   14494:	cmp	r1, r2
   14498:	bhi	14570 <flatcc_builder_append_vector@@Base+0x114>
   1449c:	str	r1, [r0, #20]
   144a0:	ldr	r1, [r6, #32]
   144a4:	ldr	r4, [r6, #20]
   144a8:	ldr	r0, [r6, #24]
   144ac:	ldr	r9, [r1, #16]
   144b0:	mla	r1, r9, r5, r4
   144b4:	cmp	r1, r0
   144b8:	str	r1, [r6, #20]
   144bc:	bcs	144e8 <flatcc_builder_append_vector@@Base+0x8c>
   144c0:	ldr	r0, [r6, #16]
   144c4:	adds	r7, r0, r4
   144c8:	beq	14560 <flatcc_builder_append_vector@@Base+0x104>
   144cc:	mul	r2, r9, r5
   144d0:	mov	r0, r7
   144d4:	mov	r1, r8
   144d8:	bl	123fc <memcpy@plt>
   144dc:	mov	r0, r7
   144e0:	sub	sp, fp, #24
   144e4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   144e8:	ldr	r2, [r6, #28]
   144ec:	ldr	r0, [r6, #40]	; 0x28
   144f0:	ldr	r7, [r6, #48]	; 0x30
   144f4:	mov	r3, #1
   144f8:	str	r3, [sp]
   144fc:	mov	r3, #1
   14500:	add	r1, r1, r2
   14504:	add	r2, r1, #1
   14508:	add	r1, r6, #60	; 0x3c
   1450c:	blx	r7
   14510:	mov	r7, #0
   14514:	cmp	r0, #0
   14518:	beq	14528 <flatcc_builder_append_vector@@Base+0xcc>
   1451c:	mov	r0, r7
   14520:	sub	sp, fp, #24
   14524:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14528:	ldr	r1, [r6, #28]
   1452c:	ldr	r0, [r6, #60]	; 0x3c
   14530:	ldr	r3, [r6, #64]	; 0x40
   14534:	ldr	r2, [r6, #32]
   14538:	add	r0, r0, r1
   1453c:	sub	r1, r3, r1
   14540:	mvn	r3, #3
   14544:	cmn	r1, #4
   14548:	str	r0, [r6, #16]
   1454c:	movcs	r1, r3
   14550:	str	r1, [r6, #24]
   14554:	str	r3, [r2, #4]
   14558:	adds	r7, r0, r4
   1455c:	bne	144cc <flatcc_builder_append_vector@@Base+0x70>
   14560:	mov	r7, #0
   14564:	mov	r0, r7
   14568:	sub	sp, fp, #24
   1456c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14570:	movw	r0, #38281	; 0x9589
   14574:	movw	r1, #34010	; 0x84da
   14578:	movw	r3, #38308	; 0x95a4
   1457c:	mov	r2, #892	; 0x37c
   14580:	movt	r0, #1
   14584:	movt	r1, #1
   14588:	movt	r3, #1
   1458c:	bl	124b0 <__assert_fail@plt>
   14590:	movw	r0, #34813	; 0x87fd
   14594:	movw	r1, #34010	; 0x84da
   14598:	movw	r3, #34985	; 0x88a9
   1459c:	movw	r2, #915	; 0x393
   145a0:	movt	r0, #1
   145a4:	movt	r1, #1
   145a8:	movt	r3, #1
   145ac:	bl	124b0 <__assert_fail@plt>

000145b0 <flatcc_builder_extend_offset_vector@@Base>:
   145b0:	push	{r4, r5, fp, lr}
   145b4:	add	fp, sp, #8
   145b8:	sub	sp, sp, #8
   145bc:	mov	r4, r0
   145c0:	ldr	r0, [r0, #32]
   145c4:	ldr	r2, [r0, #20]
   145c8:	adds	r2, r2, r1
   145cc:	cmpcc	r2, #1073741824	; 0x40000000
   145d0:	bcc	145f4 <flatcc_builder_extend_offset_vector@@Base+0x44>
   145d4:	movw	r0, #38281	; 0x9589
   145d8:	movw	r1, #34010	; 0x84da
   145dc:	movw	r3, #38308	; 0x95a4
   145e0:	mov	r2, #892	; 0x37c
   145e4:	movt	r0, #1
   145e8:	movt	r1, #1
   145ec:	movt	r3, #1
   145f0:	bl	124b0 <__assert_fail@plt>
   145f4:	str	r2, [r0, #20]
   145f8:	ldr	r5, [r4, #20]
   145fc:	ldr	r0, [r4, #24]
   14600:	add	r1, r5, r1, lsl #2
   14604:	cmp	r1, r0
   14608:	str	r1, [r4, #20]
   1460c:	bcs	14620 <flatcc_builder_extend_offset_vector@@Base+0x70>
   14610:	ldr	r0, [r4, #16]
   14614:	add	r0, r0, r5
   14618:	sub	sp, fp, #8
   1461c:	pop	{r4, r5, fp, pc}
   14620:	ldr	r2, [r4, #28]
   14624:	ldr	r0, [r4, #40]	; 0x28
   14628:	ldr	ip, [r4, #48]	; 0x30
   1462c:	mov	r3, #1
   14630:	str	r3, [sp]
   14634:	mov	r3, #1
   14638:	add	r1, r1, r2
   1463c:	add	r2, r1, #1
   14640:	add	r1, r4, #60	; 0x3c
   14644:	blx	ip
   14648:	mov	r1, r0
   1464c:	mov	r0, #0
   14650:	cmp	r1, #0
   14654:	beq	14660 <flatcc_builder_extend_offset_vector@@Base+0xb0>
   14658:	sub	sp, fp, #8
   1465c:	pop	{r4, r5, fp, pc}
   14660:	ldr	r1, [r4, #28]
   14664:	ldr	r0, [r4, #60]	; 0x3c
   14668:	ldr	r3, [r4, #64]	; 0x40
   1466c:	ldr	r2, [r4, #32]
   14670:	add	r0, r0, r1
   14674:	sub	r1, r3, r1
   14678:	mvn	r3, #3
   1467c:	cmn	r1, #4
   14680:	str	r0, [r4, #16]
   14684:	movcs	r1, r3
   14688:	str	r1, [r4, #24]
   1468c:	str	r3, [r2, #4]
   14690:	add	r0, r0, r5
   14694:	sub	sp, fp, #8
   14698:	pop	{r4, r5, fp, pc}

0001469c <flatcc_builder_offset_vector_push@@Base>:
   1469c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   146a0:	add	fp, sp, #24
   146a4:	sub	sp, sp, #8
   146a8:	mov	r6, r0
   146ac:	ldr	r0, [r0, #32]
   146b0:	mov	r8, r1
   146b4:	ldrh	r1, [r0, #14]
   146b8:	cmp	r1, #5
   146bc:	bne	1477c <flatcc_builder_offset_vector_push@@Base+0xe0>
   146c0:	ldr	r1, [r0, #20]
   146c4:	mov	r5, #0
   146c8:	cmn	r1, #-1073741823	; 0xc0000001
   146cc:	beq	14728 <flatcc_builder_offset_vector_push@@Base+0x8c>
   146d0:	add	r1, r1, #1
   146d4:	str	r1, [r0, #20]
   146d8:	ldr	r7, [r6, #20]
   146dc:	ldr	r0, [r6, #24]
   146e0:	add	r1, r7, #4
   146e4:	cmp	r1, r0
   146e8:	str	r1, [r6, #20]
   146ec:	bcs	146f8 <flatcc_builder_offset_vector_push@@Base+0x5c>
   146f0:	ldr	r0, [r6, #16]
   146f4:	b	14764 <flatcc_builder_offset_vector_push@@Base+0xc8>
   146f8:	ldr	r1, [r6, #28]
   146fc:	ldr	r0, [r6, #40]	; 0x28
   14700:	ldr	r4, [r6, #48]	; 0x30
   14704:	mov	r2, #1
   14708:	mov	r3, #1
   1470c:	str	r2, [sp]
   14710:	add	r1, r7, r1
   14714:	add	r2, r1, #5
   14718:	add	r1, r6, #60	; 0x3c
   1471c:	blx	r4
   14720:	cmp	r0, #0
   14724:	beq	14734 <flatcc_builder_offset_vector_push@@Base+0x98>
   14728:	mov	r0, r5
   1472c:	sub	sp, fp, #24
   14730:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14734:	ldr	r1, [r6, #28]
   14738:	ldr	r0, [r6, #60]	; 0x3c
   1473c:	ldr	r3, [r6, #64]	; 0x40
   14740:	ldr	r2, [r6, #32]
   14744:	add	r0, r0, r1
   14748:	sub	r1, r3, r1
   1474c:	mvn	r3, #3
   14750:	cmn	r1, #4
   14754:	str	r0, [r6, #16]
   14758:	movcs	r1, r3
   1475c:	str	r1, [r6, #24]
   14760:	str	r3, [r2, #4]
   14764:	adds	r0, r0, r7
   14768:	movne	r5, r0
   1476c:	strne	r8, [r0]
   14770:	mov	r0, r5
   14774:	sub	sp, fp, #24
   14778:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1477c:	movw	r0, #35062	; 0x88f6
   14780:	movw	r1, #34010	; 0x84da
   14784:	movw	r3, #35113	; 0x8929
   14788:	movw	r2, #934	; 0x3a6
   1478c:	movt	r0, #1
   14790:	movt	r1, #1
   14794:	movt	r3, #1
   14798:	bl	124b0 <__assert_fail@plt>

0001479c <flatcc_builder_append_offset_vector@@Base>:
   1479c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147a0:	add	fp, sp, #24
   147a4:	sub	sp, sp, #8
   147a8:	mov	r6, r0
   147ac:	ldr	r0, [r0, #32]
   147b0:	mov	r8, r1
   147b4:	ldrh	r1, [r0, #14]
   147b8:	cmp	r1, #5
   147bc:	bne	148c0 <flatcc_builder_append_offset_vector@@Base+0x124>
   147c0:	ldr	r1, [r0, #20]
   147c4:	mov	r5, r2
   147c8:	adds	r1, r1, r2
   147cc:	cmpcc	r1, #1073741824	; 0x40000000
   147d0:	bcc	147f4 <flatcc_builder_append_offset_vector@@Base+0x58>
   147d4:	movw	r0, #38281	; 0x9589
   147d8:	movw	r1, #34010	; 0x84da
   147dc:	movw	r3, #38308	; 0x95a4
   147e0:	mov	r2, #892	; 0x37c
   147e4:	movt	r0, #1
   147e8:	movt	r1, #1
   147ec:	movt	r3, #1
   147f0:	bl	124b0 <__assert_fail@plt>
   147f4:	str	r1, [r0, #20]
   147f8:	ldr	r4, [r6, #20]
   147fc:	ldr	r0, [r6, #24]
   14800:	add	r1, r4, r5, lsl #2
   14804:	cmp	r1, r0
   14808:	str	r1, [r6, #20]
   1480c:	bcs	14838 <flatcc_builder_append_offset_vector@@Base+0x9c>
   14810:	ldr	r0, [r6, #16]
   14814:	adds	r7, r0, r4
   14818:	beq	148b0 <flatcc_builder_append_offset_vector@@Base+0x114>
   1481c:	lsl	r2, r5, #2
   14820:	mov	r0, r7
   14824:	mov	r1, r8
   14828:	bl	123fc <memcpy@plt>
   1482c:	mov	r0, r7
   14830:	sub	sp, fp, #24
   14834:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14838:	ldr	r2, [r6, #28]
   1483c:	ldr	r0, [r6, #40]	; 0x28
   14840:	ldr	r7, [r6, #48]	; 0x30
   14844:	mov	r3, #1
   14848:	str	r3, [sp]
   1484c:	mov	r3, #1
   14850:	add	r1, r1, r2
   14854:	add	r2, r1, #1
   14858:	add	r1, r6, #60	; 0x3c
   1485c:	blx	r7
   14860:	mov	r7, #0
   14864:	cmp	r0, #0
   14868:	beq	14878 <flatcc_builder_append_offset_vector@@Base+0xdc>
   1486c:	mov	r0, r7
   14870:	sub	sp, fp, #24
   14874:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14878:	ldr	r1, [r6, #28]
   1487c:	ldr	r0, [r6, #60]	; 0x3c
   14880:	ldr	r3, [r6, #64]	; 0x40
   14884:	ldr	r2, [r6, #32]
   14888:	add	r0, r0, r1
   1488c:	sub	r1, r3, r1
   14890:	mvn	r3, #3
   14894:	cmn	r1, #4
   14898:	str	r0, [r6, #16]
   1489c:	movcs	r1, r3
   148a0:	str	r1, [r6, #24]
   148a4:	str	r3, [r2, #4]
   148a8:	adds	r7, r0, r4
   148ac:	bne	1481c <flatcc_builder_append_offset_vector@@Base+0x80>
   148b0:	mov	r7, #0
   148b4:	mov	r0, r7
   148b8:	sub	sp, fp, #24
   148bc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148c0:	movw	r0, #35062	; 0x88f6
   148c4:	movw	r1, #34010	; 0x84da
   148c8:	movw	r3, #35211	; 0x898b
   148cc:	mov	r2, #948	; 0x3b4
   148d0:	movt	r0, #1
   148d4:	movt	r1, #1
   148d8:	movt	r3, #1
   148dc:	bl	124b0 <__assert_fail@plt>

000148e0 <flatcc_builder_extend_string@@Base>:
   148e0:	push	{r4, r5, fp, lr}
   148e4:	add	fp, sp, #8
   148e8:	sub	sp, sp, #8
   148ec:	mov	r4, r0
   148f0:	ldr	r0, [r0, #32]
   148f4:	ldrh	r2, [r0, #14]
   148f8:	cmp	r2, #6
   148fc:	bne	149b4 <flatcc_builder_extend_string@@Base+0xd4>
   14900:	ldr	r2, [r0, #20]
   14904:	adds	r2, r2, r1
   14908:	bcs	149d4 <flatcc_builder_extend_string@@Base+0xf4>
   1490c:	str	r2, [r0, #20]
   14910:	ldr	r5, [r4, #20]
   14914:	ldr	r0, [r4, #24]
   14918:	add	r1, r5, r1
   1491c:	cmp	r1, r0
   14920:	str	r1, [r4, #20]
   14924:	bcs	14938 <flatcc_builder_extend_string@@Base+0x58>
   14928:	ldr	r0, [r4, #16]
   1492c:	add	r0, r0, r5
   14930:	sub	sp, fp, #8
   14934:	pop	{r4, r5, fp, pc}
   14938:	ldr	r2, [r4, #28]
   1493c:	ldr	r0, [r4, #40]	; 0x28
   14940:	ldr	ip, [r4, #48]	; 0x30
   14944:	mov	r3, #1
   14948:	str	r3, [sp]
   1494c:	mov	r3, #1
   14950:	add	r1, r1, r2
   14954:	add	r2, r1, #1
   14958:	add	r1, r4, #60	; 0x3c
   1495c:	blx	ip
   14960:	mov	r1, r0
   14964:	mov	r0, #0
   14968:	cmp	r1, #0
   1496c:	beq	14978 <flatcc_builder_extend_string@@Base+0x98>
   14970:	sub	sp, fp, #8
   14974:	pop	{r4, r5, fp, pc}
   14978:	ldr	r1, [r4, #28]
   1497c:	ldr	r0, [r4, #60]	; 0x3c
   14980:	ldr	r3, [r4, #64]	; 0x40
   14984:	ldr	r2, [r4, #32]
   14988:	add	r0, r0, r1
   1498c:	sub	r1, r3, r1
   14990:	mvn	r3, #3
   14994:	cmn	r1, #4
   14998:	str	r0, [r4, #16]
   1499c:	movcs	r1, r3
   149a0:	str	r1, [r4, #24]
   149a4:	str	r3, [r2, #4]
   149a8:	add	r0, r0, r5
   149ac:	sub	sp, fp, #8
   149b0:	pop	{r4, r5, fp, pc}
   149b4:	movw	r0, #35327	; 0x89ff
   149b8:	movw	r1, #34010	; 0x84da
   149bc:	movw	r3, #35371	; 0x8a2b
   149c0:	movw	r2, #957	; 0x3bd
   149c4:	movt	r0, #1
   149c8:	movt	r1, #1
   149cc:	movt	r3, #1
   149d0:	bl	124b0 <__assert_fail@plt>
   149d4:	movw	r0, #38281	; 0x9589
   149d8:	movw	r1, #34010	; 0x84da
   149dc:	movw	r3, #38308	; 0x95a4
   149e0:	mov	r2, #892	; 0x37c
   149e4:	movt	r0, #1
   149e8:	movt	r1, #1
   149ec:	movt	r3, #1
   149f0:	bl	124b0 <__assert_fail@plt>

000149f4 <flatcc_builder_append_string@@Base>:
   149f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   149f8:	add	fp, sp, #24
   149fc:	sub	sp, sp, #8
   14a00:	mov	r6, r0
   14a04:	ldr	r0, [r0, #32]
   14a08:	mov	r8, r1
   14a0c:	ldrh	r1, [r0, #14]
   14a10:	cmp	r1, #6
   14a14:	bne	14af4 <flatcc_builder_append_string@@Base+0x100>
   14a18:	ldr	r1, [r0, #20]
   14a1c:	mov	r4, r2
   14a20:	adds	r1, r1, r2
   14a24:	bcs	14b14 <flatcc_builder_append_string@@Base+0x120>
   14a28:	str	r1, [r0, #20]
   14a2c:	ldr	r5, [r6, #20]
   14a30:	ldr	r0, [r6, #24]
   14a34:	add	r1, r5, r4
   14a38:	cmp	r1, r0
   14a3c:	str	r1, [r6, #20]
   14a40:	bcs	14a6c <flatcc_builder_append_string@@Base+0x78>
   14a44:	ldr	r0, [r6, #16]
   14a48:	adds	r7, r0, r5
   14a4c:	beq	14ae4 <flatcc_builder_append_string@@Base+0xf0>
   14a50:	mov	r0, r7
   14a54:	mov	r1, r8
   14a58:	mov	r2, r4
   14a5c:	bl	123fc <memcpy@plt>
   14a60:	mov	r0, r7
   14a64:	sub	sp, fp, #24
   14a68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14a6c:	ldr	r2, [r6, #28]
   14a70:	ldr	r0, [r6, #40]	; 0x28
   14a74:	ldr	r7, [r6, #48]	; 0x30
   14a78:	mov	r3, #1
   14a7c:	str	r3, [sp]
   14a80:	mov	r3, #1
   14a84:	add	r1, r1, r2
   14a88:	add	r2, r1, #1
   14a8c:	add	r1, r6, #60	; 0x3c
   14a90:	blx	r7
   14a94:	mov	r7, #0
   14a98:	cmp	r0, #0
   14a9c:	beq	14aac <flatcc_builder_append_string@@Base+0xb8>
   14aa0:	mov	r0, r7
   14aa4:	sub	sp, fp, #24
   14aa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14aac:	ldr	r1, [r6, #28]
   14ab0:	ldr	r0, [r6, #60]	; 0x3c
   14ab4:	ldr	r3, [r6, #64]	; 0x40
   14ab8:	ldr	r2, [r6, #32]
   14abc:	add	r0, r0, r1
   14ac0:	sub	r1, r3, r1
   14ac4:	mvn	r3, #3
   14ac8:	cmn	r1, #4
   14acc:	str	r0, [r6, #16]
   14ad0:	movcs	r1, r3
   14ad4:	str	r1, [r6, #24]
   14ad8:	str	r3, [r2, #4]
   14adc:	adds	r7, r0, r5
   14ae0:	bne	14a50 <flatcc_builder_append_string@@Base+0x5c>
   14ae4:	mov	r7, #0
   14ae8:	mov	r0, r7
   14aec:	sub	sp, fp, #24
   14af0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14af4:	movw	r0, #35327	; 0x89ff
   14af8:	movw	r1, #34010	; 0x84da
   14afc:	movw	r3, #35434	; 0x8a6a
   14b00:	movw	r2, #966	; 0x3c6
   14b04:	movt	r0, #1
   14b08:	movt	r1, #1
   14b0c:	movt	r3, #1
   14b10:	bl	124b0 <__assert_fail@plt>
   14b14:	movw	r0, #38281	; 0x9589
   14b18:	movw	r1, #34010	; 0x84da
   14b1c:	movw	r3, #38308	; 0x95a4
   14b20:	mov	r2, #892	; 0x37c
   14b24:	movt	r0, #1
   14b28:	movt	r1, #1
   14b2c:	movt	r3, #1
   14b30:	bl	124b0 <__assert_fail@plt>

00014b34 <flatcc_builder_append_string_str@@Base>:
   14b34:	push	{r4, r5, fp, lr}
   14b38:	add	fp, sp, #8
   14b3c:	mov	r5, r0
   14b40:	mov	r0, r1
   14b44:	mov	r4, r1
   14b48:	bl	1245c <strlen@plt>
   14b4c:	mov	r2, r0
   14b50:	mov	r0, r5
   14b54:	mov	r1, r4
   14b58:	pop	{r4, r5, fp, lr}
   14b5c:	b	149f4 <flatcc_builder_append_string@@Base>

00014b60 <flatcc_builder_append_string_strn@@Base>:
   14b60:	push	{r4, r5, r6, sl, fp, lr}
   14b64:	add	fp, sp, #16
   14b68:	mov	r6, r0
   14b6c:	mov	r5, r1
   14b70:	mov	r0, r1
   14b74:	mov	r1, #0
   14b78:	mov	r4, r2
   14b7c:	bl	1248c <memchr@plt>
   14b80:	cmp	r0, #0
   14b84:	mov	r1, r5
   14b88:	subne	r4, r0, r5
   14b8c:	mov	r0, r6
   14b90:	mov	r2, r4
   14b94:	pop	{r4, r5, r6, sl, fp, lr}
   14b98:	b	149f4 <flatcc_builder_append_string@@Base>

00014b9c <flatcc_builder_truncate_vector@@Base>:
   14b9c:	push	{fp, lr}
   14ba0:	mov	fp, sp
   14ba4:	ldr	r2, [r0, #32]
   14ba8:	ldrh	r3, [r2, #14]
   14bac:	cmp	r3, #4
   14bb0:	bne	14bf8 <flatcc_builder_truncate_vector@@Base+0x5c>
   14bb4:	ldr	r3, [r2, #20]
   14bb8:	cmp	r3, r1
   14bbc:	bcc	14c18 <flatcc_builder_truncate_vector@@Base+0x7c>
   14bc0:	sub	r3, r3, r1
   14bc4:	str	r3, [r2, #20]
   14bc8:	ldr	r2, [r0, #32]
   14bcc:	ldr	r3, [r0, #20]
   14bd0:	ldr	ip, [r0, #16]
   14bd4:	ldr	r2, [r2, #16]
   14bd8:	mls	r3, r2, r1, r3
   14bdc:	mul	r2, r2, r1
   14be0:	mov	r1, #0
   14be4:	str	r3, [r0, #20]
   14be8:	add	r0, ip, r3
   14bec:	bl	12480 <memset@plt>
   14bf0:	mov	r0, #0
   14bf4:	pop	{fp, pc}
   14bf8:	movw	r0, #34813	; 0x87fd
   14bfc:	movw	r1, #34010	; 0x84da
   14c00:	movw	r3, #35511	; 0x8ab7
   14c04:	movw	r2, #985	; 0x3d9
   14c08:	movt	r0, #1
   14c0c:	movt	r1, #1
   14c10:	movt	r3, #1
   14c14:	bl	124b0 <__assert_fail@plt>
   14c18:	movw	r0, #35574	; 0x8af6
   14c1c:	movw	r1, #34010	; 0x84da
   14c20:	movw	r3, #35511	; 0x8ab7
   14c24:	movw	r2, #986	; 0x3da
   14c28:	movt	r0, #1
   14c2c:	movt	r1, #1
   14c30:	movt	r3, #1
   14c34:	bl	124b0 <__assert_fail@plt>

00014c38 <flatcc_builder_truncate_offset_vector@@Base>:
   14c38:	push	{fp, lr}
   14c3c:	mov	fp, sp
   14c40:	ldr	r2, [r0, #32]
   14c44:	ldrh	r3, [r2, #14]
   14c48:	cmp	r3, #5
   14c4c:	bne	14c94 <flatcc_builder_truncate_offset_vector@@Base+0x5c>
   14c50:	ldr	r3, [r2, #20]
   14c54:	cmp	r3, r1
   14c58:	bcc	14cb4 <flatcc_builder_truncate_offset_vector@@Base+0x7c>
   14c5c:	sub	r3, r3, r1
   14c60:	str	r3, [r2, #20]
   14c64:	ldr	r2, [r0, #32]
   14c68:	ldr	r3, [r0, #20]
   14c6c:	ldr	ip, [r0, #16]
   14c70:	ldr	r2, [r2, #16]
   14c74:	mls	r3, r2, r1, r3
   14c78:	mul	r2, r2, r1
   14c7c:	mov	r1, #0
   14c80:	str	r3, [r0, #20]
   14c84:	add	r0, ip, r3
   14c88:	bl	12480 <memset@plt>
   14c8c:	mov	r0, #0
   14c90:	pop	{fp, pc}
   14c94:	movw	r0, #35062	; 0x88f6
   14c98:	movw	r1, #34010	; 0x84da
   14c9c:	movw	r3, #35610	; 0x8b1a
   14ca0:	movw	r2, #994	; 0x3e2
   14ca4:	movt	r0, #1
   14ca8:	movt	r1, #1
   14cac:	movt	r3, #1
   14cb0:	bl	124b0 <__assert_fail@plt>
   14cb4:	movw	r0, #35680	; 0x8b60
   14cb8:	movw	r1, #34010	; 0x84da
   14cbc:	movw	r3, #35610	; 0x8b1a
   14cc0:	movw	r2, #995	; 0x3e3
   14cc4:	movt	r0, #1
   14cc8:	movt	r1, #1
   14ccc:	movt	r3, #1
   14cd0:	bl	124b0 <__assert_fail@plt>

00014cd4 <flatcc_builder_truncate_string@@Base>:
   14cd4:	push	{fp, lr}
   14cd8:	mov	fp, sp
   14cdc:	mov	r2, r1
   14ce0:	ldr	r1, [r0, #32]
   14ce4:	ldrh	r3, [r1, #14]
   14ce8:	cmp	r3, #6
   14cec:	bne	14d28 <flatcc_builder_truncate_string@@Base+0x54>
   14cf0:	ldr	r3, [r1, #20]
   14cf4:	cmp	r3, r2
   14cf8:	bcc	14d48 <flatcc_builder_truncate_string@@Base+0x74>
   14cfc:	sub	r3, r3, r2
   14d00:	str	r3, [r1, #20]
   14d04:	ldr	r3, [r0, #20]
   14d08:	ldr	r1, [r0, #16]
   14d0c:	sub	r3, r3, r2
   14d10:	str	r3, [r0, #20]
   14d14:	add	r0, r1, r3
   14d18:	mov	r1, #0
   14d1c:	bl	12480 <memset@plt>
   14d20:	mov	r0, #0
   14d24:	pop	{fp, pc}
   14d28:	movw	r0, #35327	; 0x89ff
   14d2c:	movw	r1, #34010	; 0x84da
   14d30:	movw	r3, #35739	; 0x8b9b
   14d34:	movw	r2, #1003	; 0x3eb
   14d38:	movt	r0, #1
   14d3c:	movt	r1, #1
   14d40:	movt	r3, #1
   14d44:	bl	124b0 <__assert_fail@plt>
   14d48:	movw	r0, #35802	; 0x8bda
   14d4c:	movw	r1, #34010	; 0x84da
   14d50:	movw	r3, #35739	; 0x8b9b
   14d54:	mov	r2, #1004	; 0x3ec
   14d58:	movt	r0, #1
   14d5c:	movt	r1, #1
   14d60:	movt	r3, #1
   14d64:	bl	124b0 <__assert_fail@plt>

00014d68 <flatcc_builder_start_vector@@Base>:
   14d68:	push	{r4, r5, r6, r7, fp, lr}
   14d6c:	add	fp, sp, #16
   14d70:	mov	r7, #4
   14d74:	cmp	r2, #4
   14d78:	mov	r6, r1
   14d7c:	mov	r5, r3
   14d80:	mov	r4, r0
   14d84:	movls	r2, r7
   14d88:	mov	r1, r2
   14d8c:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   14d90:	mov	r1, r0
   14d94:	mvn	r0, #0
   14d98:	cmp	r1, #0
   14d9c:	popne	{r4, r5, r6, r7, fp, pc}
   14da0:	ldr	r0, [r4, #32]
   14da4:	str	r6, [r0, #16]
   14da8:	mov	r0, #0
   14dac:	ldr	r1, [r4, #32]
   14db0:	str	r0, [r1, #20]
   14db4:	ldr	r1, [r4, #32]
   14db8:	str	r5, [r1, #24]
   14dbc:	ldr	r1, [r4, #32]
   14dc0:	strh	r7, [r1, #14]
   14dc4:	ldr	r2, [r4, #28]
   14dc8:	ldr	r3, [r4, #60]	; 0x3c
   14dcc:	ldr	r7, [r4, #64]	; 0x40
   14dd0:	add	r3, r3, r2
   14dd4:	sub	r2, r7, r2
   14dd8:	str	r3, [r4, #16]
   14ddc:	mvn	r3, #3
   14de0:	cmn	r2, #4
   14de4:	movcs	r2, r3
   14de8:	str	r2, [r4, #24]
   14dec:	str	r3, [r1, #4]
   14df0:	pop	{r4, r5, r6, r7, fp, pc}

00014df4 <flatcc_builder_start_offset_vector@@Base>:
   14df4:	push	{r4, r5, fp, lr}
   14df8:	add	fp, sp, #8
   14dfc:	mov	r1, #4
   14e00:	mov	r4, r0
   14e04:	mov	r5, #4
   14e08:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   14e0c:	mov	r1, r0
   14e10:	mvn	r0, #0
   14e14:	cmp	r1, #0
   14e18:	popne	{r4, r5, fp, pc}
   14e1c:	ldr	r0, [r4, #32]
   14e20:	mov	r2, #5
   14e24:	str	r5, [r0, #16]
   14e28:	mov	r0, #0
   14e2c:	ldr	r1, [r4, #32]
   14e30:	str	r0, [r1, #20]
   14e34:	ldr	r1, [r4, #32]
   14e38:	strh	r2, [r1, #14]
   14e3c:	ldr	r2, [r4, #28]
   14e40:	ldr	r3, [r4, #60]	; 0x3c
   14e44:	ldr	r5, [r4, #64]	; 0x40
   14e48:	add	r3, r3, r2
   14e4c:	sub	r2, r5, r2
   14e50:	str	r3, [r4, #16]
   14e54:	mvn	r3, #3
   14e58:	cmn	r2, #4
   14e5c:	movcs	r2, r3
   14e60:	str	r2, [r4, #24]
   14e64:	str	r3, [r1, #4]
   14e68:	pop	{r4, r5, fp, pc}

00014e6c <flatcc_builder_create_offset_vector@@Base>:
   14e6c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14e70:	add	fp, sp, #24
   14e74:	sub	sp, sp, #8
   14e78:	mov	r8, r1
   14e7c:	mov	r1, #4
   14e80:	mov	r6, r2
   14e84:	mov	r4, r0
   14e88:	mov	r5, #4
   14e8c:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   14e90:	mov	r7, #0
   14e94:	cmp	r0, #0
   14e98:	beq	14ea8 <flatcc_builder_create_offset_vector@@Base+0x3c>
   14e9c:	mov	r0, r7
   14ea0:	sub	sp, fp, #24
   14ea4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ea8:	ldr	r0, [r4, #32]
   14eac:	mov	r1, #0
   14eb0:	str	r5, [r0, #16]
   14eb4:	ldr	r0, [r4, #32]
   14eb8:	str	r1, [r0, #20]
   14ebc:	mov	r1, #5
   14ec0:	ldr	r0, [r4, #32]
   14ec4:	strh	r1, [r0, #14]
   14ec8:	ldr	r1, [r4, #28]
   14ecc:	ldr	r2, [r4, #60]	; 0x3c
   14ed0:	ldr	r3, [r4, #64]	; 0x40
   14ed4:	add	r2, r2, r1
   14ed8:	sub	r1, r3, r1
   14edc:	str	r2, [r4, #16]
   14ee0:	mvn	r2, #3
   14ee4:	cmn	r1, #4
   14ee8:	movcs	r1, r2
   14eec:	str	r1, [r4, #24]
   14ef0:	str	r2, [r0, #4]
   14ef4:	ldr	r1, [r0, #20]
   14ef8:	adds	r1, r1, r6
   14efc:	cmpcc	r1, #1073741824	; 0x40000000
   14f00:	bcc	14f24 <flatcc_builder_create_offset_vector@@Base+0xb8>
   14f04:	movw	r0, #38281	; 0x9589
   14f08:	movw	r1, #34010	; 0x84da
   14f0c:	movw	r3, #38308	; 0x95a4
   14f10:	mov	r2, #892	; 0x37c
   14f14:	movt	r0, #1
   14f18:	movt	r1, #1
   14f1c:	movt	r3, #1
   14f20:	bl	124b0 <__assert_fail@plt>
   14f24:	str	r1, [r0, #20]
   14f28:	ldr	r5, [r4, #20]
   14f2c:	ldr	r0, [r4, #24]
   14f30:	add	r1, r5, r6, lsl #2
   14f34:	cmp	r1, r0
   14f38:	str	r1, [r4, #20]
   14f3c:	bcs	15010 <flatcc_builder_create_offset_vector@@Base+0x1a4>
   14f40:	ldr	r0, [r4, #16]
   14f44:	adds	r0, r0, r5
   14f48:	beq	1507c <flatcc_builder_create_offset_vector@@Base+0x210>
   14f4c:	lsl	r2, r6, #2
   14f50:	mov	r1, r8
   14f54:	bl	123fc <memcpy@plt>
   14f58:	ldr	r0, [r4, #32]
   14f5c:	ldrh	r1, [r0, #14]
   14f60:	cmp	r1, #5
   14f64:	bne	1508c <flatcc_builder_create_offset_vector@@Base+0x220>
   14f68:	ldr	r2, [r0, #20]
   14f6c:	ldr	r1, [r4, #16]
   14f70:	mov	r0, r4
   14f74:	mov	r3, #0
   14f78:	mov	r7, #0
   14f7c:	bl	160ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   14f80:	cmp	r0, #0
   14f84:	beq	14e9c <flatcc_builder_create_offset_vector@@Base+0x30>
   14f88:	mov	r5, r0
   14f8c:	ldr	r0, [r4, #16]
   14f90:	ldr	r2, [r4, #20]
   14f94:	mov	r1, #0
   14f98:	bl	12480 <memset@plt>
   14f9c:	ldr	r0, [r4, #32]
   14fa0:	ldr	r1, [r4, #60]	; 0x3c
   14fa4:	ldr	r2, [r4, #64]	; 0x40
   14fa8:	ldr	r3, [r0, #8]
   14fac:	str	r3, [r4, #20]
   14fb0:	ldr	r3, [r0]
   14fb4:	str	r3, [r4, #28]
   14fb8:	add	r1, r1, r3
   14fbc:	ldr	r7, [r0, #4]
   14fc0:	str	r1, [r4, #16]
   14fc4:	sub	r1, r2, r3
   14fc8:	cmp	r1, r7
   14fcc:	movhi	r1, r7
   14fd0:	mov	r7, r5
   14fd4:	str	r1, [r4, #24]
   14fd8:	ldrh	r1, [r4, #130]	; 0x82
   14fdc:	ldrh	r2, [r4, #128]	; 0x80
   14fe0:	cmp	r2, r1
   14fe4:	strhcc	r1, [r4, #128]	; 0x80
   14fe8:	ldrh	r1, [r0, #12]
   14fec:	sub	r0, r0, #36	; 0x24
   14ff0:	str	r0, [r4, #32]
   14ff4:	strh	r1, [r4, #130]	; 0x82
   14ff8:	ldr	r0, [r4, #156]	; 0x9c
   14ffc:	sub	r0, r0, #1
   15000:	str	r0, [r4, #156]	; 0x9c
   15004:	mov	r0, r7
   15008:	sub	sp, fp, #24
   1500c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15010:	ldr	r2, [r4, #28]
   15014:	ldr	r0, [r4, #40]	; 0x28
   15018:	ldr	r7, [r4, #48]	; 0x30
   1501c:	mov	r3, #1
   15020:	str	r3, [sp]
   15024:	mov	r3, #1
   15028:	add	r1, r1, r2
   1502c:	add	r2, r1, #1
   15030:	add	r1, r4, #60	; 0x3c
   15034:	blx	r7
   15038:	mov	r7, #0
   1503c:	cmp	r0, #0
   15040:	bne	14e9c <flatcc_builder_create_offset_vector@@Base+0x30>
   15044:	ldr	r1, [r4, #28]
   15048:	ldr	r0, [r4, #60]	; 0x3c
   1504c:	ldr	r3, [r4, #64]	; 0x40
   15050:	ldr	r2, [r4, #32]
   15054:	add	r0, r0, r1
   15058:	sub	r1, r3, r1
   1505c:	mvn	r3, #3
   15060:	cmn	r1, #4
   15064:	str	r0, [r4, #16]
   15068:	movcs	r1, r3
   1506c:	str	r1, [r4, #24]
   15070:	str	r3, [r2, #4]
   15074:	adds	r0, r0, r5
   15078:	bne	14f4c <flatcc_builder_create_offset_vector@@Base+0xe0>
   1507c:	mov	r7, #0
   15080:	mov	r0, r7
   15084:	sub	sp, fp, #24
   15088:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1508c:	movw	r0, #35062	; 0x88f6
   15090:	movw	r1, #34010	; 0x84da
   15094:	movw	r3, #36645	; 0x8f25
   15098:	movw	r2, #1480	; 0x5c8
   1509c:	movt	r0, #1
   150a0:	movt	r1, #1
   150a4:	movt	r3, #1
   150a8:	bl	124b0 <__assert_fail@plt>

000150ac <flatcc_builder_end_offset_vector@@Base>:
   150ac:	push	{r4, r5, fp, lr}
   150b0:	add	fp, sp, #8
   150b4:	mov	r4, r0
   150b8:	ldr	r0, [r0, #32]
   150bc:	ldrh	r1, [r0, #14]
   150c0:	cmp	r1, #5
   150c4:	bne	15164 <flatcc_builder_end_offset_vector@@Base+0xb8>
   150c8:	ldr	r2, [r0, #20]
   150cc:	ldr	r1, [r4, #16]
   150d0:	mov	r0, r4
   150d4:	mov	r3, #0
   150d8:	bl	160ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   150dc:	mov	r5, r0
   150e0:	cmp	r0, #0
   150e4:	beq	1515c <flatcc_builder_end_offset_vector@@Base+0xb0>
   150e8:	ldr	r0, [r4, #16]
   150ec:	ldr	r2, [r4, #20]
   150f0:	mov	r1, #0
   150f4:	bl	12480 <memset@plt>
   150f8:	ldr	r0, [r4, #32]
   150fc:	ldr	r1, [r4, #60]	; 0x3c
   15100:	ldr	ip, [r4, #64]	; 0x40
   15104:	ldr	r3, [r0, #8]
   15108:	str	r3, [r4, #20]
   1510c:	ldr	r3, [r0]
   15110:	str	r3, [r4, #28]
   15114:	add	r1, r1, r3
   15118:	ldr	r2, [r0, #4]
   1511c:	str	r1, [r4, #16]
   15120:	sub	r1, ip, r3
   15124:	cmp	r1, r2
   15128:	movhi	r1, r2
   1512c:	str	r1, [r4, #24]
   15130:	ldrh	r1, [r4, #130]	; 0x82
   15134:	ldrh	r2, [r4, #128]	; 0x80
   15138:	cmp	r2, r1
   1513c:	strhcc	r1, [r4, #128]	; 0x80
   15140:	ldrh	r1, [r0, #12]
   15144:	sub	r0, r0, #36	; 0x24
   15148:	str	r0, [r4, #32]
   1514c:	strh	r1, [r4, #130]	; 0x82
   15150:	ldr	r0, [r4, #156]	; 0x9c
   15154:	sub	r0, r0, #1
   15158:	str	r0, [r4, #156]	; 0x9c
   1515c:	mov	r0, r5
   15160:	pop	{r4, r5, fp, pc}
   15164:	movw	r0, #35062	; 0x88f6
   15168:	movw	r1, #34010	; 0x84da
   1516c:	movw	r3, #36645	; 0x8f25
   15170:	movw	r2, #1480	; 0x5c8
   15174:	movt	r0, #1
   15178:	movt	r1, #1
   1517c:	movt	r3, #1
   15180:	bl	124b0 <__assert_fail@plt>

00015184 <flatcc_builder_start_string@@Base>:
   15184:	push	{r4, r5, fp, lr}
   15188:	add	fp, sp, #8
   1518c:	mov	r1, #1
   15190:	mov	r4, r0
   15194:	mov	r5, #1
   15198:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   1519c:	mov	r1, r0
   151a0:	mvn	r0, #0
   151a4:	cmp	r1, #0
   151a8:	popne	{r4, r5, fp, pc}
   151ac:	ldr	r0, [r4, #32]
   151b0:	mov	r2, #6
   151b4:	str	r5, [r0, #16]
   151b8:	mov	r0, #0
   151bc:	ldr	r1, [r4, #32]
   151c0:	str	r0, [r1, #20]
   151c4:	ldr	r1, [r4, #32]
   151c8:	strh	r2, [r1, #14]
   151cc:	ldr	r2, [r4, #28]
   151d0:	ldr	r3, [r4, #60]	; 0x3c
   151d4:	ldr	r5, [r4, #64]	; 0x40
   151d8:	add	r3, r3, r2
   151dc:	sub	r2, r5, r2
   151e0:	str	r3, [r4, #16]
   151e4:	mvn	r3, #3
   151e8:	cmn	r2, #4
   151ec:	movcs	r2, r3
   151f0:	str	r2, [r4, #24]
   151f4:	str	r3, [r1, #4]
   151f8:	pop	{r4, r5, fp, pc}

000151fc <flatcc_builder_reserve_table@@Base>:
   151fc:	push	{r4, r5, r6, sl, fp, lr}
   15200:	add	fp, sp, #16
   15204:	sub	sp, sp, #8
   15208:	cmn	r1, #1
   1520c:	ble	152e4 <flatcc_builder_reserve_table@@Base+0xe8>
   15210:	mov	r4, r0
   15214:	ldr	r0, [r0, #32]
   15218:	mov	r5, r1
   1521c:	ldr	r1, [r4, #56]	; 0x38
   15220:	ldrh	r2, [r0, #28]
   15224:	ldr	r0, [r0, #16]
   15228:	add	r6, r0, r2, lsl #1
   1522c:	add	r0, r6, r5, lsl #1
   15230:	add	r2, r0, #4
   15234:	cmp	r2, r1
   15238:	bls	15260 <flatcc_builder_reserve_table@@Base+0x64>
   1523c:	ldr	r0, [r4, #40]	; 0x28
   15240:	ldr	ip, [r4, #48]	; 0x30
   15244:	mov	r3, #0
   15248:	add	r1, r4, #52	; 0x34
   1524c:	str	r3, [sp]
   15250:	mov	r3, #1
   15254:	blx	ip
   15258:	cmp	r0, #0
   1525c:	bne	15304 <flatcc_builder_reserve_table@@Base+0x108>
   15260:	ldr	r0, [r4, #52]	; 0x34
   15264:	adds	r0, r0, r6
   15268:	str	r0, [r4, #4]
   1526c:	beq	152d8 <flatcc_builder_reserve_table@@Base+0xdc>
   15270:	add	r0, r0, #4
   15274:	lsl	r1, r5, #1
   15278:	str	r0, [r4, #4]
   1527c:	ldr	r0, [r4, #32]
   15280:	ldr	r3, [r4, #80]	; 0x50
   15284:	ldr	r5, [r0, #20]
   15288:	orr	r0, r1, #1
   1528c:	add	r2, r5, r0
   15290:	cmp	r2, r3
   15294:	bls	152bc <flatcc_builder_reserve_table@@Base+0xc0>
   15298:	ldr	r0, [r4, #40]	; 0x28
   1529c:	ldr	r6, [r4, #48]	; 0x30
   152a0:	mov	r3, #3
   152a4:	add	r1, r4, #76	; 0x4c
   152a8:	str	r3, [sp]
   152ac:	mov	r3, #0
   152b0:	blx	r6
   152b4:	cmp	r0, #0
   152b8:	bne	15304 <flatcc_builder_reserve_table@@Base+0x108>
   152bc:	ldr	r0, [r4, #76]	; 0x4c
   152c0:	adds	r0, r0, r5
   152c4:	str	r0, [r4]
   152c8:	mov	r0, #0
   152cc:	mvneq	r0, #0
   152d0:	sub	sp, fp, #16
   152d4:	pop	{r4, r5, r6, sl, fp, pc}
   152d8:	mvn	r0, #0
   152dc:	sub	sp, fp, #16
   152e0:	pop	{r4, r5, r6, sl, fp, pc}
   152e4:	movw	r0, #35901	; 0x8c3d
   152e8:	movw	r1, #34010	; 0x84da
   152ec:	movw	r3, #35836	; 0x8bfc
   152f0:	movw	r2, #1065	; 0x429
   152f4:	movt	r0, #1
   152f8:	movt	r1, #1
   152fc:	movt	r3, #1
   15300:	bl	124b0 <__assert_fail@plt>
   15304:	movw	r0, #38528	; 0x9680
   15308:	movw	r1, #34010	; 0x84da
   1530c:	movw	r3, #38074	; 0x94ba
   15310:	mov	r2, #308	; 0x134
   15314:	movt	r0, #1
   15318:	movt	r1, #1
   1531c:	movt	r3, #1
   15320:	bl	124b0 <__assert_fail@plt>

00015324 <flatcc_builder_start_table@@Base>:
   15324:	push	{r4, r5, r6, r7, fp, lr}
   15328:	add	fp, sp, #16
   1532c:	sub	sp, sp, #8
   15330:	mov	r6, r1
   15334:	mov	r1, #4
   15338:	mov	r4, r0
   1533c:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   15340:	mvn	r5, #0
   15344:	cmp	r0, #0
   15348:	beq	15358 <flatcc_builder_start_table@@Base+0x34>
   1534c:	mov	r0, r5
   15350:	sub	sp, fp, #16
   15354:	pop	{r4, r5, r6, r7, fp, pc}
   15358:	mov	r1, r4
   1535c:	ldr	r2, [r4, #4]
   15360:	ldr	r3, [r4, #32]
   15364:	ldr	r0, [r1, #52]!	; 0x34
   15368:	sub	r0, r2, r0
   1536c:	str	r0, [r3, #16]
   15370:	ldr	r0, [r4]
   15374:	ldr	r3, [r4, #76]	; 0x4c
   15378:	ldr	r2, [r4, #32]
   1537c:	sub	r0, r0, r3
   15380:	mov	r3, #0
   15384:	str	r0, [r2, #20]
   15388:	ldr	r0, [r4, #12]
   1538c:	ldr	r2, [r4, #32]
   15390:	str	r0, [r2, #24]
   15394:	ldr	r0, [r4, #32]
   15398:	ldrh	r2, [r4, #8]
   1539c:	strh	r2, [r0, #28]
   153a0:	movw	r0, #15186	; 0x3b52
   153a4:	strh	r3, [r4, #8]
   153a8:	mov	r2, #3
   153ac:	movt	r0, #12137	; 0x2f69
   153b0:	str	r0, [r4, #12]
   153b4:	ldr	r0, [r4, #32]
   153b8:	strh	r2, [r0, #14]
   153bc:	ldrh	r2, [r0, #28]
   153c0:	ldr	r0, [r0, #16]
   153c4:	add	r7, r0, r2, lsl #1
   153c8:	add	r0, r7, r6, lsl #1
   153cc:	add	r2, r0, #4
   153d0:	ldr	r0, [r4, #56]	; 0x38
   153d4:	cmp	r2, r0
   153d8:	bls	153f8 <flatcc_builder_start_table@@Base+0xd4>
   153dc:	ldr	r0, [r4, #40]	; 0x28
   153e0:	ldr	ip, [r4, #48]	; 0x30
   153e4:	str	r3, [sp]
   153e8:	mov	r3, #1
   153ec:	blx	ip
   153f0:	cmp	r0, #0
   153f4:	bne	154a4 <flatcc_builder_start_table@@Base+0x180>
   153f8:	ldr	r0, [r4, #52]	; 0x34
   153fc:	adds	r0, r0, r7
   15400:	str	r0, [r4, #4]
   15404:	beq	1534c <flatcc_builder_start_table@@Base+0x28>
   15408:	add	r0, r0, #4
   1540c:	lsl	r1, r6, #1
   15410:	str	r0, [r4, #4]
   15414:	ldr	r0, [r4, #32]
   15418:	ldr	r3, [r4, #80]	; 0x50
   1541c:	ldr	r6, [r0, #20]
   15420:	orr	r0, r1, #1
   15424:	add	r2, r6, r0
   15428:	cmp	r2, r3
   1542c:	bls	15454 <flatcc_builder_start_table@@Base+0x130>
   15430:	ldr	r0, [r4, #40]	; 0x28
   15434:	ldr	r7, [r4, #48]	; 0x30
   15438:	mov	r3, #3
   1543c:	add	r1, r4, #76	; 0x4c
   15440:	str	r3, [sp]
   15444:	mov	r3, #0
   15448:	blx	r7
   1544c:	cmp	r0, #0
   15450:	bne	154a4 <flatcc_builder_start_table@@Base+0x180>
   15454:	ldr	r0, [r4, #76]	; 0x4c
   15458:	adds	r0, r0, r6
   1545c:	str	r0, [r4]
   15460:	beq	1534c <flatcc_builder_start_table@@Base+0x28>
   15464:	ldr	r0, [r4, #28]
   15468:	ldr	r2, [r4, #60]	; 0x3c
   1546c:	ldr	r3, [r4, #64]	; 0x40
   15470:	ldr	r1, [r4, #32]
   15474:	mov	r5, #0
   15478:	add	r2, r2, r0
   1547c:	sub	r0, r3, r0
   15480:	str	r2, [r4, #16]
   15484:	movw	r2, #65532	; 0xfffc
   15488:	cmp	r0, r2
   1548c:	movcs	r0, r2
   15490:	str	r0, [r4, #24]
   15494:	str	r2, [r1, #4]
   15498:	mov	r0, r5
   1549c:	sub	sp, fp, #16
   154a0:	pop	{r4, r5, r6, r7, fp, pc}
   154a4:	movw	r0, #38528	; 0x9680
   154a8:	movw	r1, #34010	; 0x84da
   154ac:	movw	r3, #38074	; 0x94ba
   154b0:	mov	r2, #308	; 0x134
   154b4:	movt	r0, #1
   154b8:	movt	r1, #1
   154bc:	movt	r3, #1
   154c0:	bl	124b0 <__assert_fail@plt>

000154c4 <flatcc_builder_create_vtable@@Base>:
   154c4:	push	{r4, r5, fp, lr}
   154c8:	add	fp, sp, #8
   154cc:	sub	sp, sp, #80	; 0x50
   154d0:	mov	r3, r2
   154d4:	mov	r2, #0
   154d8:	mov	r4, r0
   154dc:	cmp	r3, #0
   154e0:	str	r2, [sp, #12]
   154e4:	str	r2, [sp, #8]
   154e8:	movne	r2, #1
   154ec:	strne	r3, [sp, #20]
   154f0:	strne	r1, [sp, #16]
   154f4:	strne	r3, [sp, #8]
   154f8:	strne	r2, [sp, #12]
   154fc:	ldr	r0, [r4, #152]	; 0x98
   15500:	cmp	r0, #0
   15504:	bne	15514 <flatcc_builder_create_vtable@@Base+0x50>
   15508:	ldr	r0, [r4, #180]	; 0xb4
   1550c:	cmp	r0, #0
   15510:	beq	15570 <flatcc_builder_create_vtable@@Base+0xac>
   15514:	cmp	r3, #0
   15518:	beq	155b4 <flatcc_builder_create_vtable@@Base+0xf0>
   1551c:	ldr	r0, [r4, #136]	; 0x88
   15520:	ldr	ip, [r4, #44]	; 0x2c
   15524:	add	r1, sp, #8
   15528:	add	r1, r1, #8
   1552c:	sub	r5, r0, r3
   15530:	ldr	r0, [r4, #36]	; 0x24
   15534:	str	r3, [sp]
   15538:	mov	r3, r5
   1553c:	blx	ip
   15540:	cmp	r0, #0
   15544:	bne	155d4 <flatcc_builder_create_vtable@@Base+0x110>
   15548:	cmp	r5, #0
   1554c:	str	r5, [r4, #136]	; 0x88
   15550:	beq	15564 <flatcc_builder_create_vtable@@Base+0xa0>
   15554:	add	r1, r5, #1
   15558:	mov	r0, r1
   1555c:	sub	sp, fp, #8
   15560:	pop	{r4, r5, fp, pc}
   15564:	mov	r0, #0
   15568:	sub	sp, fp, #8
   1556c:	pop	{r4, r5, fp, pc}
   15570:	ldr	r5, [r4, #140]	; 0x8c
   15574:	ldr	r0, [r4, #36]	; 0x24
   15578:	ldr	ip, [r4, #44]	; 0x2c
   1557c:	add	r1, r5, r3
   15580:	str	r1, [r4, #140]	; 0x8c
   15584:	add	r1, sp, #8
   15588:	str	r3, [sp]
   1558c:	mov	r3, r5
   15590:	add	r1, r1, #8
   15594:	blx	ip
   15598:	cmp	r0, #0
   1559c:	bne	155f4 <flatcc_builder_create_vtable@@Base+0x130>
   155a0:	adds	r1, r5, #1
   155a4:	mov	r0, #0
   155a8:	movcc	r0, r1
   155ac:	sub	sp, fp, #8
   155b0:	pop	{r4, r5, fp, pc}
   155b4:	movw	r0, #38528	; 0x9680
   155b8:	movw	r1, #34010	; 0x84da
   155bc:	movw	r3, #38207	; 0x953f
   155c0:	movw	r2, #647	; 0x287
   155c4:	movt	r0, #1
   155c8:	movt	r1, #1
   155cc:	movt	r3, #1
   155d0:	bl	124b0 <__assert_fail@plt>
   155d4:	movw	r0, #38528	; 0x9680
   155d8:	movw	r1, #34010	; 0x84da
   155dc:	movw	r3, #38207	; 0x953f
   155e0:	movw	r2, #651	; 0x28b
   155e4:	movt	r0, #1
   155e8:	movt	r1, #1
   155ec:	movt	r3, #1
   155f0:	bl	124b0 <__assert_fail@plt>
   155f4:	movw	r0, #38528	; 0x9680
   155f8:	movw	r1, #34010	; 0x84da
   155fc:	movw	r3, #38395	; 0x95fb
   15600:	movw	r2, #677	; 0x2a5
   15604:	movt	r0, #1
   15608:	movt	r1, #1
   1560c:	movt	r3, #1
   15610:	bl	124b0 <__assert_fail@plt>

00015614 <flatcc_builder_create_cached_vtable@@Base>:
   15614:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15618:	add	fp, sp, #28
   1561c:	sub	sp, sp, #20
   15620:	mov	sl, r0
   15624:	ldr	r0, [r0, #116]	; 0x74
   15628:	mov	r8, r3
   1562c:	mov	r5, r2
   15630:	str	r1, [sp, #16]
   15634:	cmp	r0, #0
   15638:	beq	156dc <flatcc_builder_create_cached_vtable@@Base+0xc8>
   1563c:	ldr	r1, [sl, #92]	; 0x5c
   15640:	rsb	r0, r0, #32
   15644:	lsr	r0, r8, r0
   15648:	add	r6, r1, r0, lsl #2
   1564c:	cmp	r6, #0
   15650:	beq	157a0 <flatcc_builder_create_cached_vtable@@Base+0x18c>
   15654:	ldr	r7, [r6]
   15658:	str	r6, [sp, #12]
   1565c:	cmp	r7, #0
   15660:	beq	157b0 <flatcc_builder_create_cached_vtable@@Base+0x19c>
   15664:	ldr	r4, [sl, #68]	; 0x44
   15668:	ldr	r8, [sl, #100]	; 0x64
   1566c:	mov	r0, #0
   15670:	str	r0, [sp, #8]
   15674:	b	15688 <flatcc_builder_create_cached_vtable@@Base+0x74>
   15678:	ldr	r7, [r9, #12]!
   1567c:	mov	r6, r9
   15680:	cmp	r7, #0
   15684:	beq	15798 <flatcc_builder_create_cached_vtable@@Base+0x184>
   15688:	add	r9, r8, r7
   1568c:	mov	r1, r4
   15690:	ldr	r0, [r9, #8]
   15694:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   15698:	cmp	r0, r5
   1569c:	bne	15678 <flatcc_builder_create_cached_vtable@@Base+0x64>
   156a0:	ldr	r0, [sp, #16]
   156a4:	mov	r2, r5
   156a8:	bl	12450 <bcmp@plt>
   156ac:	cmp	r0, #0
   156b0:	bne	15678 <flatcc_builder_create_cached_vtable@@Base+0x64>
   156b4:	ldr	r0, [sl, #152]	; 0x98
   156b8:	ldr	r1, [r9, #4]
   156bc:	cmp	r1, r0
   156c0:	beq	1591c <flatcc_builder_create_cached_vtable@@Base+0x308>
   156c4:	mov	r6, r9
   156c8:	mov	r0, r9
   156cc:	ldr	r7, [r6, #12]!
   156d0:	cmp	r7, #0
   156d4:	bne	15670 <flatcc_builder_create_cached_vtable@@Base+0x5c>
   156d8:	b	157b4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   156dc:	ldr	r0, [sl, #124]	; 0x7c
   156e0:	cmp	r0, #0
   156e4:	bne	15970 <flatcc_builder_create_cached_vtable@@Base+0x35c>
   156e8:	ldr	r0, [sl, #104]	; 0x68
   156ec:	add	r7, sl, #100	; 0x64
   156f0:	cmp	r0, #15
   156f4:	bhi	15720 <flatcc_builder_create_cached_vtable@@Base+0x10c>
   156f8:	ldr	r0, [sl, #40]	; 0x28
   156fc:	ldr	r6, [sl, #48]	; 0x30
   15700:	mov	r1, #6
   15704:	mov	r2, #16
   15708:	mov	r3, #0
   1570c:	str	r1, [sp]
   15710:	mov	r1, r7
   15714:	blx	r6
   15718:	cmp	r0, #0
   1571c:	bne	15950 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   15720:	ldr	r0, [r7]
   15724:	mov	r7, #0
   15728:	cmp	r0, #0
   1572c:	beq	15854 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15730:	mov	r0, #16
   15734:	mov	r2, #5
   15738:	add	r1, sl, #92	; 0x5c
   1573c:	mov	r3, #1
   15740:	mov	r4, #256	; 0x100
   15744:	str	r0, [sl, #124]	; 0x7c
   15748:	ldr	r0, [sl, #40]	; 0x28
   1574c:	ldr	r6, [sl, #48]	; 0x30
   15750:	str	r2, [sp]
   15754:	mov	r2, #256	; 0x100
   15758:	blx	r6
   1575c:	cmp	r0, #0
   15760:	bne	15854 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15764:	ldr	r0, [sl, #96]	; 0x60
   15768:	mov	r1, r4
   1576c:	lsl	r4, r4, #1
   15770:	cmp	r0, r1, lsl #1
   15774:	bcs	15768 <flatcc_builder_create_cached_vtable@@Base+0x154>
   15778:	lsr	r1, r1, #2
   1577c:	mvn	r0, #0
   15780:	mov	r2, #1
   15784:	add	r0, r0, #1
   15788:	cmp	r1, r2, lsl r0
   1578c:	bhi	15784 <flatcc_builder_create_cached_vtable@@Base+0x170>
   15790:	str	r0, [sl, #116]	; 0x74
   15794:	b	1563c <flatcc_builder_create_cached_vtable@@Base+0x28>
   15798:	ldr	r9, [sp, #8]
   1579c:	b	157b4 <flatcc_builder_create_cached_vtable@@Base+0x1a0>
   157a0:	mov	r7, #0
   157a4:	mov	r0, r7
   157a8:	sub	sp, fp, #28
   157ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157b0:	mov	r9, #0
   157b4:	ldr	r4, [sl, #124]	; 0x7c
   157b8:	ldr	r0, [sl, #104]	; 0x68
   157bc:	add	r7, sl, #100	; 0x64
   157c0:	add	r2, r4, #16
   157c4:	cmp	r2, r0
   157c8:	bls	157f0 <flatcc_builder_create_cached_vtable@@Base+0x1dc>
   157cc:	ldr	r0, [sl, #40]	; 0x28
   157d0:	ldr	r6, [sl, #48]	; 0x30
   157d4:	mov	r1, #6
   157d8:	mov	r3, #0
   157dc:	str	r1, [sp]
   157e0:	mov	r1, r7
   157e4:	blx	r6
   157e8:	cmp	r0, #0
   157ec:	bne	15950 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   157f0:	ldr	r0, [r7]
   157f4:	mov	r7, #0
   157f8:	adds	r4, r0, r4
   157fc:	beq	15854 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15800:	ldr	r0, [sl, #124]	; 0x7c
   15804:	ldr	r1, [sl, #152]	; 0x98
   15808:	add	r2, r0, #16
   1580c:	str	r2, [sl, #124]	; 0x7c
   15810:	ldr	r2, [sp, #12]
   15814:	str	r1, [r4, #4]
   15818:	ldr	r1, [r2]
   1581c:	str	r1, [r4, #12]
   15820:	ldr	r1, [sp, #16]
   15824:	str	r0, [r2]
   15828:	mov	r0, sl
   1582c:	mov	r2, r5
   15830:	bl	154c4 <flatcc_builder_create_vtable@@Base>
   15834:	cmp	r0, #0
   15838:	str	r0, [r4]
   1583c:	beq	15854 <flatcc_builder_create_cached_vtable@@Base+0x240>
   15840:	cmp	r9, #0
   15844:	beq	15860 <flatcc_builder_create_cached_vtable@@Base+0x24c>
   15848:	ldr	r0, [r9, #8]
   1584c:	str	r0, [r4, #8]
   15850:	ldr	r7, [r4]
   15854:	mov	r0, r7
   15858:	sub	sp, fp, #28
   1585c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15860:	ldr	r6, [sl, #120]	; 0x78
   15864:	ldr	r0, [sl, #172]	; 0xac
   15868:	add	r2, r6, r5
   1586c:	cmp	r0, #0
   15870:	beq	158ac <flatcc_builder_create_cached_vtable@@Base+0x298>
   15874:	cmp	r0, r2
   15878:	bcs	158ac <flatcc_builder_create_cached_vtable@@Base+0x298>
   1587c:	ldr	r0, [sl, #116]	; 0x74
   15880:	cmp	r0, #0
   15884:	beq	15850 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   15888:	ldr	r0, [sl, #92]	; 0x5c
   1588c:	ldr	r2, [sl, #96]	; 0x60
   15890:	mov	r1, #0
   15894:	mov	r5, #0
   15898:	bl	12480 <memset@plt>
   1589c:	mov	r0, #16
   158a0:	str	r5, [sl, #120]	; 0x78
   158a4:	str	r0, [sl, #124]	; 0x7c
   158a8:	b	15850 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   158ac:	ldr	r0, [sl, #72]	; 0x48
   158b0:	add	r7, sl, #68	; 0x44
   158b4:	cmp	r2, r0
   158b8:	bls	158e0 <flatcc_builder_create_cached_vtable@@Base+0x2cc>
   158bc:	ldr	r0, [sl, #40]	; 0x28
   158c0:	ldr	ip, [sl, #48]	; 0x30
   158c4:	mov	r1, #2
   158c8:	mov	r3, #0
   158cc:	str	r1, [sp]
   158d0:	mov	r1, r7
   158d4:	blx	ip
   158d8:	cmp	r0, #0
   158dc:	bne	15950 <flatcc_builder_create_cached_vtable@@Base+0x33c>
   158e0:	ldr	r0, [r7]
   158e4:	adds	r0, r0, r6
   158e8:	beq	1590c <flatcc_builder_create_cached_vtable@@Base+0x2f8>
   158ec:	ldr	r1, [sl, #120]	; 0x78
   158f0:	mov	r2, r5
   158f4:	str	r1, [r4, #8]
   158f8:	add	r1, r1, r5
   158fc:	str	r1, [sl, #120]	; 0x78
   15900:	ldr	r1, [sp, #16]
   15904:	bl	123fc <memcpy@plt>
   15908:	b	15850 <flatcc_builder_create_cached_vtable@@Base+0x23c>
   1590c:	mvn	r7, #0
   15910:	mov	r0, r7
   15914:	sub	sp, fp, #28
   15918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1591c:	ldr	r0, [sp, #12]
   15920:	cmp	r6, r0
   15924:	beq	15940 <flatcc_builder_create_cached_vtable@@Base+0x32c>
   15928:	mov	r1, r0
   1592c:	ldr	r0, [r9, #12]
   15930:	str	r0, [r6]
   15934:	ldr	r0, [r1]
   15938:	str	r0, [r9, #12]
   1593c:	str	r7, [r1]
   15940:	ldr	r7, [r9]
   15944:	mov	r0, r7
   15948:	sub	sp, fp, #28
   1594c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15950:	movw	r0, #38528	; 0x9680
   15954:	movw	r1, #34010	; 0x84da
   15958:	movw	r3, #38074	; 0x94ba
   1595c:	mov	r2, #308	; 0x134
   15960:	movt	r0, #1
   15964:	movt	r1, #1
   15968:	movt	r3, #1
   1596c:	bl	124b0 <__assert_fail@plt>
   15970:	movw	r0, #38468	; 0x9644
   15974:	movw	r1, #34010	; 0x84da
   15978:	movw	r3, #38483	; 0x9653
   1597c:	movw	r2, #342	; 0x156
   15980:	movt	r0, #1
   15984:	movt	r1, #1
   15988:	movt	r3, #1
   1598c:	bl	124b0 <__assert_fail@plt>

00015990 <flatcc_builder_create_table@@Base>:
   15990:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15994:	add	fp, sp, #24
   15998:	sub	sp, sp, #80	; 0x50
   1599c:	ldr	r5, [fp, #12]
   159a0:	cmn	r5, #1
   159a4:	ble	15af0 <flatcc_builder_create_table@@Base+0x160>
   159a8:	ldr	ip, [fp, #16]
   159ac:	tst	ip, #1
   159b0:	beq	15b10 <flatcc_builder_create_table@@Base+0x180>
   159b4:	mov	r8, r0
   159b8:	ldrh	r0, [r0, #128]	; 0x80
   159bc:	cmp	r3, #4
   159c0:	movls	r3, #4
   159c4:	cmp	r0, r3
   159c8:	strhcc	r3, [r8, #128]	; 0x80
   159cc:	cmp	r5, #1
   159d0:	ldr	r0, [r8, #136]	; 0x88
   159d4:	sub	r4, r0, r2
   159d8:	sub	r0, r3, #1
   159dc:	and	r0, r4, r0
   159e0:	sub	r4, r4, #4
   159e4:	add	r3, ip, r0
   159e8:	sub	r3, r4, r3
   159ec:	add	r3, r3, #1
   159f0:	str	r3, [fp, #-28]	; 0xffffffe4
   159f4:	blt	15a24 <flatcc_builder_create_table@@Base+0x94>
   159f8:	ldr	r3, [fp, #8]
   159fc:	sub	ip, r4, r0
   15a00:	mvn	r4, #3
   15a04:	sub	r4, r4, ip
   15a08:	ldrh	r6, [r3], #2
   15a0c:	subs	r5, r5, #1
   15a10:	ldr	r7, [r6, r1]
   15a14:	add	r7, r4, r7
   15a18:	sub	r7, r7, r6
   15a1c:	str	r7, [r6, r1]
   15a20:	bne	15a08 <flatcc_builder_create_table@@Base+0x78>
   15a24:	mov	r4, #4
   15a28:	sub	r3, fp, #28
   15a2c:	cmp	r2, #0
   15a30:	str	r4, [sp, #16]
   15a34:	str	r3, [sp, #12]
   15a38:	mov	r3, #1
   15a3c:	str	r4, [sp, #4]
   15a40:	addne	r4, r2, #4
   15a44:	str	r3, [sp, #8]
   15a48:	movne	r3, #2
   15a4c:	strne	r2, [sp, #24]
   15a50:	strne	r1, [sp, #20]
   15a54:	strne	r3, [sp, #8]
   15a58:	strne	r4, [sp, #4]
   15a5c:	cmp	r0, #0
   15a60:	beq	15a8c <flatcc_builder_create_table@@Base+0xfc>
   15a64:	add	r1, sp, #4
   15a68:	movw	r2, #33480	; 0x82c8
   15a6c:	add	r4, r4, r0
   15a70:	add	r1, r1, r3, lsl #3
   15a74:	movt	r2, #1
   15a78:	add	r3, r3, #1
   15a7c:	str	r4, [sp, #4]
   15a80:	str	r2, [r1, #8]
   15a84:	str	r0, [r1, #12]
   15a88:	str	r3, [sp, #8]
   15a8c:	cmp	r4, #0
   15a90:	ble	15b30 <flatcc_builder_create_table@@Base+0x1a0>
   15a94:	ldr	r0, [r8, #136]	; 0x88
   15a98:	ldr	r7, [r8, #44]	; 0x2c
   15a9c:	add	r1, sp, #4
   15aa0:	mov	r2, r3
   15aa4:	add	r1, r1, #8
   15aa8:	sub	r5, r0, r4
   15aac:	ldr	r0, [r8, #36]	; 0x24
   15ab0:	str	r4, [sp]
   15ab4:	mov	r3, r5
   15ab8:	blx	r7
   15abc:	cmp	r0, #0
   15ac0:	streq	r5, [r8, #136]	; 0x88
   15ac4:	moveq	r0, r5
   15ac8:	subeq	sp, fp, #24
   15acc:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   15ad0:	movw	r0, #38528	; 0x9680
   15ad4:	movw	r1, #34010	; 0x84da
   15ad8:	movw	r3, #38207	; 0x953f
   15adc:	movw	r2, #651	; 0x28b
   15ae0:	movt	r0, #1
   15ae4:	movt	r1, #1
   15ae8:	movt	r3, #1
   15aec:	bl	124b0 <__assert_fail@plt>
   15af0:	movw	r0, #35894	; 0x8c36
   15af4:	movw	r1, #34010	; 0x84da
   15af8:	movw	r3, #35912	; 0x8c48
   15afc:	movw	r2, #1237	; 0x4d5
   15b00:	movt	r0, #1
   15b04:	movt	r1, #1
   15b08:	movt	r3, #1
   15b0c:	bl	124b0 <__assert_fail@plt>
   15b10:	movw	r0, #36068	; 0x8ce4
   15b14:	movw	r1, #34010	; 0x84da
   15b18:	movw	r3, #35912	; 0x8c48
   15b1c:	movw	r2, #1243	; 0x4db
   15b20:	movt	r0, #1
   15b24:	movt	r1, #1
   15b28:	movt	r3, #1
   15b2c:	bl	124b0 <__assert_fail@plt>
   15b30:	movw	r0, #38528	; 0x9680
   15b34:	movw	r1, #34010	; 0x84da
   15b38:	movw	r3, #38207	; 0x953f
   15b3c:	movw	r2, #647	; 0x287
   15b40:	movt	r0, #1
   15b44:	movt	r1, #1
   15b48:	movt	r3, #1
   15b4c:	bl	124b0 <__assert_fail@plt>

00015b50 <flatcc_builder_check_required_field@@Base>:
   15b50:	push	{fp, lr}
   15b54:	mov	fp, sp
   15b58:	ldr	r2, [r0, #32]
   15b5c:	ldrh	r2, [r2, #14]
   15b60:	cmp	r2, #3
   15b64:	bne	15b94 <flatcc_builder_check_required_field@@Base+0x44>
   15b68:	ldrh	r3, [r0, #8]
   15b6c:	mov	r2, #0
   15b70:	cmp	r3, r1
   15b74:	bls	15b8c <flatcc_builder_check_required_field@@Base+0x3c>
   15b78:	ldr	r0, [r0, #4]
   15b7c:	add	r0, r0, r1, lsl #1
   15b80:	ldrh	r2, [r0]
   15b84:	cmp	r2, #0
   15b88:	movwne	r2, #1
   15b8c:	mov	r0, r2
   15b90:	pop	{fp, pc}
   15b94:	movw	r0, #36079	; 0x8cef
   15b98:	movw	r1, #34010	; 0x84da
   15b9c:	movw	r3, #36122	; 0x8d1a
   15ba0:	movw	r2, #1272	; 0x4f8
   15ba4:	movt	r0, #1
   15ba8:	movt	r1, #1
   15bac:	movt	r3, #1
   15bb0:	bl	124b0 <__assert_fail@plt>

00015bb4 <flatcc_builder_check_union_field@@Base>:
   15bb4:	push	{fp, lr}
   15bb8:	mov	fp, sp
   15bbc:	mov	r2, r0
   15bc0:	ldr	r0, [r0, #32]
   15bc4:	ldrh	r0, [r0, #14]
   15bc8:	cmp	r0, #3
   15bcc:	bne	15c2c <flatcc_builder_check_union_field@@Base+0x78>
   15bd0:	mov	r0, #0
   15bd4:	cmp	r1, #0
   15bd8:	beq	15c18 <flatcc_builder_check_union_field@@Base+0x64>
   15bdc:	ldrh	r3, [r2, #8]
   15be0:	cmp	r3, r1
   15be4:	popls	{fp, pc}
   15be8:	ldr	r0, [r2, #4]
   15bec:	add	r0, r0, r1, lsl #1
   15bf0:	ldrh	r1, [r0, #-2]
   15bf4:	cmp	r1, #0
   15bf8:	beq	15c1c <flatcc_builder_check_union_field@@Base+0x68>
   15bfc:	ldr	r2, [r2, #16]
   15c00:	ldrh	r0, [r0]
   15c04:	ldrb	r1, [r2, r1]
   15c08:	cmp	r1, #0
   15c0c:	beq	15c20 <flatcc_builder_check_union_field@@Base+0x6c>
   15c10:	cmp	r0, #0
   15c14:	movwne	r0, #1
   15c18:	pop	{fp, pc}
   15c1c:	ldrh	r0, [r0]
   15c20:	clz	r0, r0
   15c24:	lsr	r0, r0, #5
   15c28:	pop	{fp, pc}
   15c2c:	movw	r0, #36079	; 0x8cef
   15c30:	movw	r1, #34010	; 0x84da
   15c34:	movw	r3, #36205	; 0x8d6d
   15c38:	movw	r2, #1279	; 0x4ff
   15c3c:	movt	r0, #1
   15c40:	movt	r1, #1
   15c44:	movt	r3, #1
   15c48:	bl	124b0 <__assert_fail@plt>

00015c4c <flatcc_builder_check_required@@Base>:
   15c4c:	push	{fp, lr}
   15c50:	mov	fp, sp
   15c54:	mov	r3, r0
   15c58:	ldr	r0, [r0, #32]
   15c5c:	ldrh	r0, [r0, #14]
   15c60:	cmp	r0, #3
   15c64:	bne	15cac <flatcc_builder_check_required@@Base+0x60>
   15c68:	ldrh	ip, [r3, #8]
   15c6c:	mov	r0, #0
   15c70:	cmp	ip, r2
   15c74:	poplt	{fp, pc}
   15c78:	cmp	r2, #1
   15c7c:	blt	15ca4 <flatcc_builder_check_required@@Base+0x58>
   15c80:	ldr	ip, [r3, #4]
   15c84:	ldrh	r3, [r1]
   15c88:	add	r3, ip, r3, lsl #1
   15c8c:	ldrh	r3, [r3]
   15c90:	cmp	r3, #0
   15c94:	beq	15ca8 <flatcc_builder_check_required@@Base+0x5c>
   15c98:	add	r1, r1, #2
   15c9c:	subs	r2, r2, #1
   15ca0:	bne	15c84 <flatcc_builder_check_required@@Base+0x38>
   15ca4:	mov	r0, #1
   15ca8:	pop	{fp, pc}
   15cac:	movw	r0, #36079	; 0x8cef
   15cb0:	movw	r1, #34010	; 0x84da
   15cb4:	movw	r3, #36285	; 0x8dbd
   15cb8:	movw	r2, #1297	; 0x511
   15cbc:	movt	r0, #1
   15cc0:	movt	r1, #1
   15cc4:	movt	r3, #1
   15cc8:	bl	124b0 <__assert_fail@plt>

00015ccc <flatcc_builder_end_table@@Base>:
   15ccc:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cd0:	add	fp, sp, #24
   15cd4:	sub	sp, sp, #16
   15cd8:	mov	r4, r0
   15cdc:	ldr	r0, [r0, #32]
   15ce0:	ldrh	r0, [r0, #14]
   15ce4:	cmp	r0, #3
   15ce8:	bne	15e6c <flatcc_builder_end_table@@Base+0x1a0>
   15cec:	ldrh	r0, [r4, #8]
   15cf0:	ldr	r5, [r4, #4]
   15cf4:	mov	r1, #4
   15cf8:	movw	r2, #31153	; 0x79b1
   15cfc:	movt	r2, #40503	; 0x9e37
   15d00:	add	r0, r1, r0, lsl #1
   15d04:	strh	r0, [r5, #-4]!
   15d08:	ldrh	r1, [r4, #20]
   15d0c:	uxth	r6, r0
   15d10:	add	r1, r1, #4
   15d14:	strh	r1, [r5, #2]
   15d18:	uxth	r1, r1
   15d1c:	ldr	r0, [r4, #12]
   15d20:	eor	r0, r0, r6
   15d24:	mul	r0, r0, r2
   15d28:	eor	r0, r0, r1
   15d2c:	mov	r1, r5
   15d30:	mul	r3, r0, r2
   15d34:	mov	r0, r4
   15d38:	mov	r2, r6
   15d3c:	str	r3, [r4, #12]
   15d40:	bl	15614 <flatcc_builder_create_cached_vtable@@Base>
   15d44:	cmp	r0, #0
   15d48:	beq	15e5c <flatcc_builder_end_table@@Base+0x190>
   15d4c:	mov	r7, r0
   15d50:	mov	r0, r5
   15d54:	mov	r1, #0
   15d58:	mov	r2, r6
   15d5c:	mov	r8, #0
   15d60:	bl	12480 <memset@plt>
   15d64:	ldr	r5, [r4, #32]
   15d68:	ldr	r0, [r4, #76]	; 0x4c
   15d6c:	ldr	r6, [r4]
   15d70:	ldrh	r3, [r4, #130]	; 0x82
   15d74:	ldr	r1, [r4, #16]
   15d78:	ldr	r2, [r4, #20]
   15d7c:	ldr	r5, [r5, #20]
   15d80:	add	r0, r0, r5
   15d84:	sub	r6, r6, r0
   15d88:	asr	r6, r6, #1
   15d8c:	stm	sp, {r0, r6, r7}
   15d90:	mov	r0, r4
   15d94:	bl	15990 <flatcc_builder_create_table@@Base>
   15d98:	cmp	r0, #0
   15d9c:	beq	15e50 <flatcc_builder_end_table@@Base+0x184>
   15da0:	ldr	r1, [r4, #32]
   15da4:	mov	r5, r0
   15da8:	ldr	r0, [r4, #16]
   15dac:	ldr	r2, [r4, #20]
   15db0:	ldr	r3, [r4, #52]	; 0x34
   15db4:	ldr	r7, [r1, #24]
   15db8:	str	r7, [r4, #12]
   15dbc:	ldrh	r7, [r1, #28]
   15dc0:	strh	r7, [r4, #8]
   15dc4:	ldr	r7, [r1, #16]
   15dc8:	add	r3, r3, r7
   15dcc:	str	r3, [r4, #4]
   15dd0:	ldr	r3, [r4, #76]	; 0x4c
   15dd4:	ldr	r1, [r1, #20]
   15dd8:	add	r1, r3, r1
   15ddc:	str	r1, [r4]
   15de0:	mov	r1, #0
   15de4:	bl	12480 <memset@plt>
   15de8:	ldr	r0, [r4, #32]
   15dec:	ldr	r1, [r4, #60]	; 0x3c
   15df0:	ldr	r2, [r4, #64]	; 0x40
   15df4:	mov	r8, r5
   15df8:	ldr	r3, [r0, #8]
   15dfc:	str	r3, [r4, #20]
   15e00:	ldr	r3, [r0]
   15e04:	str	r3, [r4, #28]
   15e08:	add	r1, r1, r3
   15e0c:	ldr	r7, [r0, #4]
   15e10:	str	r1, [r4, #16]
   15e14:	sub	r1, r2, r3
   15e18:	cmp	r1, r7
   15e1c:	movhi	r1, r7
   15e20:	str	r1, [r4, #24]
   15e24:	ldrh	r1, [r4, #130]	; 0x82
   15e28:	ldrh	r2, [r4, #128]	; 0x80
   15e2c:	cmp	r2, r1
   15e30:	strhcc	r1, [r4, #128]	; 0x80
   15e34:	ldrh	r1, [r0, #12]
   15e38:	sub	r0, r0, #36	; 0x24
   15e3c:	str	r0, [r4, #32]
   15e40:	strh	r1, [r4, #130]	; 0x82
   15e44:	ldr	r0, [r4, #156]	; 0x9c
   15e48:	sub	r0, r0, #1
   15e4c:	str	r0, [r4, #156]	; 0x9c
   15e50:	mov	r0, r8
   15e54:	sub	sp, fp, #24
   15e58:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e5c:	mov	r8, #0
   15e60:	mov	r0, r8
   15e64:	sub	sp, fp, #24
   15e68:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e6c:	movw	r0, #36079	; 0x8cef
   15e70:	movw	r1, #34010	; 0x84da
   15e74:	movw	r3, #36375	; 0x8e17
   15e78:	movw	r2, #1317	; 0x525
   15e7c:	movt	r0, #1
   15e80:	movt	r1, #1
   15e84:	movt	r3, #1
   15e88:	bl	124b0 <__assert_fail@plt>

00015e8c <flatcc_builder_create_vector@@Base>:
   15e8c:	push	{r4, r5, r6, r7, fp, lr}
   15e90:	add	fp, sp, #16
   15e94:	sub	sp, sp, #80	; 0x50
   15e98:	mov	r7, r0
   15e9c:	ldr	r0, [fp, #12]
   15ea0:	cmp	r2, r0
   15ea4:	bhi	15fa0 <flatcc_builder_create_vector@@Base+0x114>
   15ea8:	ldr	r0, [fp, #8]
   15eac:	mov	r4, r2
   15eb0:	ldrh	r2, [r7, #128]	; 0x80
   15eb4:	mov	r5, #4
   15eb8:	cmp	r0, #4
   15ebc:	movls	r0, r5
   15ec0:	cmp	r2, r0
   15ec4:	sub	r2, fp, #20
   15ec8:	strhcc	r0, [r7, #128]	; 0x80
   15ecc:	str	r4, [fp, #-20]	; 0xffffffec
   15ed0:	sub	r0, r0, #1
   15ed4:	ldr	ip, [r7, #136]	; 0x88
   15ed8:	str	r5, [sp, #16]
   15edc:	str	r2, [sp, #12]
   15ee0:	mov	r2, #1
   15ee4:	str	r5, [sp, #4]
   15ee8:	str	r2, [sp, #8]
   15eec:	mls	r6, r3, r4, ip
   15ef0:	mul	r3, r3, r4
   15ef4:	cmp	r3, #0
   15ef8:	and	r0, r6, r0
   15efc:	movne	r2, #2
   15f00:	addne	r5, r3, #4
   15f04:	strne	r3, [sp, #24]
   15f08:	strne	r1, [sp, #20]
   15f0c:	strne	r2, [sp, #8]
   15f10:	strne	r5, [sp, #4]
   15f14:	cmp	r0, #0
   15f18:	beq	15f44 <flatcc_builder_create_vector@@Base+0xb8>
   15f1c:	add	r1, sp, #4
   15f20:	movw	r3, #33480	; 0x82c8
   15f24:	add	r5, r5, r0
   15f28:	add	r1, r1, r2, lsl #3
   15f2c:	movt	r3, #1
   15f30:	add	r2, r2, #1
   15f34:	str	r5, [sp, #4]
   15f38:	str	r3, [r1, #8]
   15f3c:	str	r0, [r1, #12]
   15f40:	str	r2, [sp, #8]
   15f44:	cmp	r5, #0
   15f48:	ble	15fc0 <flatcc_builder_create_vector@@Base+0x134>
   15f4c:	ldr	r0, [r7, #36]	; 0x24
   15f50:	ldr	r6, [r7, #44]	; 0x2c
   15f54:	add	r1, sp, #4
   15f58:	sub	r4, ip, r5
   15f5c:	str	r5, [sp]
   15f60:	add	r1, r1, #8
   15f64:	mov	r3, r4
   15f68:	blx	r6
   15f6c:	cmp	r0, #0
   15f70:	streq	r4, [r7, #136]	; 0x88
   15f74:	moveq	r0, r4
   15f78:	subeq	sp, fp, #16
   15f7c:	popeq	{r4, r5, r6, r7, fp, pc}
   15f80:	movw	r0, #38528	; 0x9680
   15f84:	movw	r1, #34010	; 0x84da
   15f88:	movw	r3, #38207	; 0x953f
   15f8c:	movw	r2, #651	; 0x28b
   15f90:	movt	r0, #1
   15f94:	movt	r1, #1
   15f98:	movt	r3, #1
   15f9c:	bl	124b0 <__assert_fail@plt>
   15fa0:	movw	r0, #36441	; 0x8e59
   15fa4:	movw	r1, #34010	; 0x84da
   15fa8:	movw	r3, #36460	; 0x8e6c
   15fac:	movw	r2, #1365	; 0x555
   15fb0:	movt	r0, #1
   15fb4:	movt	r1, #1
   15fb8:	movt	r3, #1
   15fbc:	bl	124b0 <__assert_fail@plt>
   15fc0:	movw	r0, #38528	; 0x9680
   15fc4:	movw	r1, #34010	; 0x84da
   15fc8:	movw	r3, #38207	; 0x953f
   15fcc:	movw	r2, #647	; 0x287
   15fd0:	movt	r0, #1
   15fd4:	movt	r1, #1
   15fd8:	movt	r3, #1
   15fdc:	bl	124b0 <__assert_fail@plt>

00015fe0 <flatcc_builder_end_vector@@Base>:
   15fe0:	push	{r4, r5, fp, lr}
   15fe4:	add	fp, sp, #8
   15fe8:	sub	sp, sp, #8
   15fec:	mov	r4, r0
   15ff0:	ldr	r0, [r0, #32]
   15ff4:	ldrh	r1, [r0, #14]
   15ff8:	cmp	r1, #4
   15ffc:	bne	160b0 <flatcc_builder_end_vector@@Base+0xd0>
   16000:	ldr	r3, [r0, #16]
   16004:	ldr	r2, [r0, #20]
   16008:	ldr	r0, [r0, #24]
   1600c:	ldr	r1, [r4, #16]
   16010:	ldrh	r5, [r4, #130]	; 0x82
   16014:	str	r0, [sp, #4]
   16018:	mov	r0, r4
   1601c:	str	r5, [sp]
   16020:	bl	15e8c <flatcc_builder_create_vector@@Base>
   16024:	mov	r5, r0
   16028:	cmp	r0, #0
   1602c:	beq	160a4 <flatcc_builder_end_vector@@Base+0xc4>
   16030:	ldr	r0, [r4, #16]
   16034:	ldr	r2, [r4, #20]
   16038:	mov	r1, #0
   1603c:	bl	12480 <memset@plt>
   16040:	ldr	r0, [r4, #32]
   16044:	ldr	r1, [r4, #60]	; 0x3c
   16048:	ldr	ip, [r4, #64]	; 0x40
   1604c:	ldr	r3, [r0, #8]
   16050:	str	r3, [r4, #20]
   16054:	ldr	r3, [r0]
   16058:	str	r3, [r4, #28]
   1605c:	add	r1, r1, r3
   16060:	ldr	r2, [r0, #4]
   16064:	str	r1, [r4, #16]
   16068:	sub	r1, ip, r3
   1606c:	cmp	r1, r2
   16070:	movhi	r1, r2
   16074:	str	r1, [r4, #24]
   16078:	ldrh	r1, [r4, #130]	; 0x82
   1607c:	ldrh	r2, [r4, #128]	; 0x80
   16080:	cmp	r2, r1
   16084:	strhcc	r1, [r4, #128]	; 0x80
   16088:	ldrh	r1, [r0, #12]
   1608c:	sub	r0, r0, #36	; 0x24
   16090:	str	r0, [r4, #32]
   16094:	strh	r1, [r4, #130]	; 0x82
   16098:	ldr	r0, [r4, #156]	; 0x9c
   1609c:	sub	r0, r0, #1
   160a0:	str	r0, [r4, #156]	; 0x9c
   160a4:	mov	r0, r5
   160a8:	sub	sp, fp, #8
   160ac:	pop	{r4, r5, fp, pc}
   160b0:	movw	r0, #34813	; 0x87fd
   160b4:	movw	r1, #34010	; 0x84da
   160b8:	movw	r3, #36578	; 0x8ee2
   160bc:	movw	r2, #1400	; 0x578
   160c0:	movt	r0, #1
   160c4:	movt	r1, #1
   160c8:	movt	r3, #1
   160cc:	bl	124b0 <__assert_fail@plt>

000160d0 <flatcc_builder_vector_count@@Base>:
   160d0:	ldr	r0, [r0, #32]
   160d4:	ldr	r0, [r0, #20]
   160d8:	bx	lr

000160dc <flatcc_builder_vector_edit@@Base>:
   160dc:	ldr	r0, [r0, #16]
   160e0:	bx	lr

000160e4 <flatcc_builder_create_offset_vector_direct@@Base>:
   160e4:	mov	r3, #0
   160e8:	b	160ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   160ec:	push	{r4, r5, r6, r7, fp, lr}
   160f0:	add	fp, sp, #16
   160f4:	sub	sp, sp, #80	; 0x50
   160f8:	mov	r5, #0
   160fc:	cmn	r2, #-1073741823	; 0xc0000001
   16100:	bhi	16270 <flatcc_builder_create_offset_vector_direct@@Base+0x18c>
   16104:	mov	r6, r0
   16108:	ldrh	r0, [r0, #128]	; 0x80
   1610c:	mov	r4, #4
   16110:	sub	r5, fp, #20
   16114:	mov	ip, #1
   16118:	cmp	r0, #3
   1611c:	movls	r0, #4
   16120:	strhls	r0, [r6, #128]	; 0x80
   16124:	str	r2, [fp, #-20]	; 0xffffffec
   16128:	mov	r0, #0
   1612c:	ldr	lr, [r6, #136]	; 0x88
   16130:	cmp	r0, r2, lsl #2
   16134:	str	r4, [sp, #16]
   16138:	str	r5, [sp, #12]
   1613c:	str	r4, [sp, #4]
   16140:	str	ip, [sp, #8]
   16144:	and	r5, lr, #3
   16148:	beq	16168 <flatcc_builder_create_offset_vector_direct@@Base+0x84>
   1614c:	lsl	r0, r2, #2
   16150:	mov	ip, #2
   16154:	add	r4, r0, #4
   16158:	str	r0, [sp, #24]
   1615c:	str	r1, [sp, #20]
   16160:	str	ip, [sp, #8]
   16164:	str	r4, [sp, #4]
   16168:	cmp	r5, #0
   1616c:	beq	16198 <flatcc_builder_create_offset_vector_direct@@Base+0xb4>
   16170:	add	r0, sp, #4
   16174:	movw	r7, #33480	; 0x82c8
   16178:	add	r4, r4, r5
   1617c:	add	r0, r0, ip, lsl #3
   16180:	movt	r7, #1
   16184:	add	ip, ip, #1
   16188:	str	r4, [sp, #4]
   1618c:	str	r7, [r0, #8]
   16190:	str	r5, [r0, #12]
   16194:	str	ip, [sp, #8]
   16198:	cmp	r2, #0
   1619c:	beq	16234 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   161a0:	sub	r0, r4, lr
   161a4:	cmp	r3, #0
   161a8:	sub	r0, r0, #4
   161ac:	bne	161f4 <flatcc_builder_create_offset_vector_direct@@Base+0x110>
   161b0:	ldr	r3, [r1]
   161b4:	cmp	r3, #0
   161b8:	beq	1627c <flatcc_builder_create_offset_vector_direct@@Base+0x198>
   161bc:	add	r3, r0, r3
   161c0:	sub	r0, r0, #4
   161c4:	subs	r2, r2, #1
   161c8:	str	r3, [r1], #4
   161cc:	bne	161b0 <flatcc_builder_create_offset_vector_direct@@Base+0xcc>
   161d0:	b	16234 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   161d4:	ldrb	r7, [r3]
   161d8:	cmp	r7, #0
   161dc:	bne	1629c <flatcc_builder_create_offset_vector_direct@@Base+0x1b8>
   161e0:	sub	r0, r0, #4
   161e4:	add	r1, r1, #4
   161e8:	add	r3, r3, #1
   161ec:	subs	r2, r2, #1
   161f0:	beq	16234 <flatcc_builder_create_offset_vector_direct@@Base+0x150>
   161f4:	ldr	r5, [r1]
   161f8:	cmp	r5, #0
   161fc:	beq	161d4 <flatcc_builder_create_offset_vector_direct@@Base+0xf0>
   16200:	add	r7, r0, r5
   16204:	str	r7, [r1]
   16208:	ldrb	r7, [r3]
   1620c:	cmp	r7, #0
   16210:	bne	161e0 <flatcc_builder_create_offset_vector_direct@@Base+0xfc>
   16214:	movw	r0, #38516	; 0x9674
   16218:	movw	r1, #34010	; 0x84da
   1621c:	movw	r3, #38530	; 0x9682
   16220:	movw	r2, #1457	; 0x5b1
   16224:	movt	r0, #1
   16228:	movt	r1, #1
   1622c:	movt	r3, #1
   16230:	bl	124b0 <__assert_fail@plt>
   16234:	cmp	r4, #0
   16238:	ble	162bc <flatcc_builder_create_offset_vector_direct@@Base+0x1d8>
   1623c:	ldr	r0, [r6, #136]	; 0x88
   16240:	ldr	r7, [r6, #44]	; 0x2c
   16244:	add	r1, sp, #4
   16248:	mov	r2, ip
   1624c:	add	r1, r1, #8
   16250:	sub	r5, r0, r4
   16254:	ldr	r0, [r6, #36]	; 0x24
   16258:	str	r4, [sp]
   1625c:	mov	r3, r5
   16260:	blx	r7
   16264:	cmp	r0, #0
   16268:	bne	162dc <flatcc_builder_create_offset_vector_direct@@Base+0x1f8>
   1626c:	str	r5, [r6, #136]	; 0x88
   16270:	mov	r0, r5
   16274:	sub	sp, fp, #16
   16278:	pop	{r4, r5, r6, r7, fp, pc}
   1627c:	movw	r0, #38528	; 0x9680
   16280:	movw	r1, #34010	; 0x84da
   16284:	movw	r3, #38530	; 0x9682
   16288:	movw	r2, #1463	; 0x5b7
   1628c:	movt	r0, #1
   16290:	movt	r1, #1
   16294:	movt	r3, #1
   16298:	bl	124b0 <__assert_fail@plt>
   1629c:	movw	r0, #38661	; 0x9705
   162a0:	movw	r1, #34010	; 0x84da
   162a4:	movw	r3, #38530	; 0x9682
   162a8:	movw	r2, #1461	; 0x5b5
   162ac:	movt	r0, #1
   162b0:	movt	r1, #1
   162b4:	movt	r3, #1
   162b8:	bl	124b0 <__assert_fail@plt>
   162bc:	movw	r0, #38528	; 0x9680
   162c0:	movw	r1, #34010	; 0x84da
   162c4:	movw	r3, #38207	; 0x953f
   162c8:	movw	r2, #647	; 0x287
   162cc:	movt	r0, #1
   162d0:	movt	r1, #1
   162d4:	movt	r3, #1
   162d8:	bl	124b0 <__assert_fail@plt>
   162dc:	movw	r0, #38528	; 0x9680
   162e0:	movw	r1, #34010	; 0x84da
   162e4:	movw	r3, #38207	; 0x953f
   162e8:	movw	r2, #651	; 0x28b
   162ec:	movt	r0, #1
   162f0:	movt	r1, #1
   162f4:	movt	r3, #1
   162f8:	bl	124b0 <__assert_fail@plt>

000162fc <flatcc_builder_end_offset_vector_for_unions@@Base>:
   162fc:	push	{r4, r5, fp, lr}
   16300:	add	fp, sp, #8
   16304:	mov	r4, r0
   16308:	ldr	r0, [r0, #32]
   1630c:	mov	r3, r1
   16310:	ldrh	r1, [r0, #14]
   16314:	cmp	r1, #5
   16318:	bne	163b4 <flatcc_builder_end_offset_vector_for_unions@@Base+0xb8>
   1631c:	ldr	r2, [r0, #20]
   16320:	ldr	r1, [r4, #16]
   16324:	mov	r0, r4
   16328:	bl	160ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   1632c:	mov	r5, r0
   16330:	cmp	r0, #0
   16334:	beq	163ac <flatcc_builder_end_offset_vector_for_unions@@Base+0xb0>
   16338:	ldr	r0, [r4, #16]
   1633c:	ldr	r2, [r4, #20]
   16340:	mov	r1, #0
   16344:	bl	12480 <memset@plt>
   16348:	ldr	r0, [r4, #32]
   1634c:	ldr	r1, [r4, #60]	; 0x3c
   16350:	ldr	ip, [r4, #64]	; 0x40
   16354:	ldr	r3, [r0, #8]
   16358:	str	r3, [r4, #20]
   1635c:	ldr	r3, [r0]
   16360:	str	r3, [r4, #28]
   16364:	add	r1, r1, r3
   16368:	ldr	r2, [r0, #4]
   1636c:	str	r1, [r4, #16]
   16370:	sub	r1, ip, r3
   16374:	cmp	r1, r2
   16378:	movhi	r1, r2
   1637c:	str	r1, [r4, #24]
   16380:	ldrh	r1, [r4, #130]	; 0x82
   16384:	ldrh	r2, [r4, #128]	; 0x80
   16388:	cmp	r2, r1
   1638c:	strhcc	r1, [r4, #128]	; 0x80
   16390:	ldrh	r1, [r0, #12]
   16394:	sub	r0, r0, #36	; 0x24
   16398:	str	r0, [r4, #32]
   1639c:	strh	r1, [r4, #130]	; 0x82
   163a0:	ldr	r0, [r4, #156]	; 0x9c
   163a4:	sub	r0, r0, #1
   163a8:	str	r0, [r4, #156]	; 0x9c
   163ac:	mov	r0, r5
   163b0:	pop	{r4, r5, fp, pc}
   163b4:	movw	r0, #35062	; 0x88f6
   163b8:	movw	r1, #34010	; 0x84da
   163bc:	movw	r3, #36719	; 0x8f6f
   163c0:	movw	r2, #1493	; 0x5d5
   163c4:	movt	r0, #1
   163c8:	movt	r1, #1
   163cc:	movt	r3, #1
   163d0:	bl	124b0 <__assert_fail@plt>

000163d4 <flatcc_builder_offset_vector_edit@@Base>:
   163d4:	ldr	r0, [r0, #16]
   163d8:	bx	lr

000163dc <flatcc_builder_offset_vector_count@@Base>:
   163dc:	ldr	r0, [r0, #32]
   163e0:	ldr	r0, [r0, #20]
   163e4:	bx	lr

000163e8 <flatcc_builder_table_add_union@@Base>:
   163e8:	push	{r4, r5, r6, r7, fp, lr}
   163ec:	add	fp, sp, #16
   163f0:	mov	r5, r0
   163f4:	ldr	r0, [r0, #32]
   163f8:	ldrh	r0, [r0, #14]
   163fc:	cmp	r0, #3
   16400:	bne	16488 <flatcc_builder_table_add_union@@Base+0xa0>
   16404:	mov	r7, r3
   16408:	mov	r4, r2
   1640c:	mov	r6, r1
   16410:	cmp	r3, #0
   16414:	beq	16424 <flatcc_builder_table_add_union@@Base+0x3c>
   16418:	uxtb	r0, r4
   1641c:	cmp	r0, #0
   16420:	beq	164a8 <flatcc_builder_table_add_union@@Base+0xc0>
   16424:	cmp	r7, #0
   16428:	beq	16444 <flatcc_builder_table_add_union@@Base+0x5c>
   1642c:	mov	r0, r5
   16430:	mov	r1, r6
   16434:	bl	164e8 <flatcc_builder_table_add_offset@@Base>
   16438:	cmp	r0, #0
   1643c:	beq	164c8 <flatcc_builder_table_add_union@@Base+0xe0>
   16440:	str	r7, [r0]
   16444:	sub	r1, r6, #1
   16448:	mov	r0, r5
   1644c:	mov	r2, #1
   16450:	mov	r3, #1
   16454:	bl	16678 <flatcc_builder_table_add@@Base>
   16458:	cmp	r0, #0
   1645c:	strbne	r4, [r0]
   16460:	movne	r0, #0
   16464:	popne	{r4, r5, r6, r7, fp, pc}
   16468:	movw	r0, #36965	; 0x9065
   1646c:	movw	r1, #34010	; 0x84da
   16470:	movw	r3, #36833	; 0x8fe1
   16474:	movw	r2, #1526	; 0x5f6
   16478:	movt	r0, #1
   1647c:	movt	r1, #1
   16480:	movt	r3, #1
   16484:	bl	124b0 <__assert_fail@plt>
   16488:	movw	r0, #36079	; 0x8cef
   1648c:	movw	r1, #34010	; 0x84da
   16490:	movw	r3, #36833	; 0x8fe1
   16494:	movw	r2, #1518	; 0x5ee
   16498:	movt	r0, #1
   1649c:	movt	r1, #1
   164a0:	movt	r3, #1
   164a4:	bl	124b0 <__assert_fail@plt>
   164a8:	movw	r0, #36921	; 0x9039
   164ac:	movw	r1, #34010	; 0x84da
   164b0:	movw	r3, #36833	; 0x8fe1
   164b4:	movw	r2, #1519	; 0x5ef
   164b8:	movt	r0, #1
   164bc:	movt	r1, #1
   164c0:	movt	r3, #1
   164c4:	bl	124b0 <__assert_fail@plt>
   164c8:	movw	r0, #36955	; 0x905b
   164cc:	movw	r1, #34010	; 0x84da
   164d0:	movw	r3, #36833	; 0x8fe1
   164d4:	movw	r2, #1522	; 0x5f2
   164d8:	movt	r0, #1
   164dc:	movt	r1, #1
   164e0:	movt	r3, #1
   164e4:	bl	124b0 <__assert_fail@plt>

000164e8 <flatcc_builder_table_add_offset@@Base>:
   164e8:	push	{r4, r5, r6, r7, fp, lr}
   164ec:	add	fp, sp, #16
   164f0:	sub	sp, sp, #8
   164f4:	mov	r4, r0
   164f8:	ldr	r0, [r0, #32]
   164fc:	ldrh	r0, [r0, #14]
   16500:	cmp	r0, #3
   16504:	bne	16618 <flatcc_builder_table_add_offset@@Base+0x130>
   16508:	movw	r0, #32765	; 0x7ffd
   1650c:	mov	r5, r1
   16510:	cmp	r1, r0
   16514:	bcs	16638 <flatcc_builder_table_add_offset@@Base+0x150>
   16518:	ldr	r0, [r4, #4]
   1651c:	add	r1, r0, r5, lsl #1
   16520:	ldrh	r1, [r1]
   16524:	cmp	r1, #0
   16528:	bne	16658 <flatcc_builder_table_add_offset@@Base+0x170>
   1652c:	ldr	r2, [r4, #20]
   16530:	ldr	r1, [r4, #12]
   16534:	ldr	r3, [r4, #24]
   16538:	add	r2, r2, #3
   1653c:	eor	r1, r1, r5
   16540:	bic	r6, r2, #3
   16544:	movw	r2, #31153	; 0x79b1
   16548:	movt	r2, #40503	; 0x9e37
   1654c:	add	r7, r6, #4
   16550:	cmp	r7, r3
   16554:	str	r7, [r4, #20]
   16558:	mul	r1, r1, r2
   1655c:	eor	r1, r1, #4
   16560:	mul	r1, r1, r2
   16564:	str	r1, [r4, #12]
   16568:	bls	165dc <flatcc_builder_table_add_offset@@Base+0xf4>
   1656c:	ldr	r1, [r4, #28]
   16570:	ldr	r0, [r4, #40]	; 0x28
   16574:	ldr	ip, [r4, #48]	; 0x30
   16578:	mov	r2, #1
   1657c:	mov	r3, #1
   16580:	str	r2, [sp]
   16584:	add	r2, r1, r7
   16588:	add	r1, r4, #60	; 0x3c
   1658c:	blx	ip
   16590:	mov	r1, r0
   16594:	mov	r0, #0
   16598:	cmp	r1, #0
   1659c:	beq	165a8 <flatcc_builder_table_add_offset@@Base+0xc0>
   165a0:	sub	sp, fp, #16
   165a4:	pop	{r4, r5, r6, r7, fp, pc}
   165a8:	ldr	r0, [r4, #28]
   165ac:	ldr	r2, [r4, #60]	; 0x3c
   165b0:	ldr	r3, [r4, #64]	; 0x40
   165b4:	ldr	r1, [r4, #32]
   165b8:	add	r2, r2, r0
   165bc:	sub	r0, r3, r0
   165c0:	str	r2, [r4, #16]
   165c4:	movw	r2, #65532	; 0xfffc
   165c8:	cmp	r0, r2
   165cc:	movcs	r0, r2
   165d0:	str	r0, [r4, #24]
   165d4:	str	r2, [r1, #4]
   165d8:	ldr	r0, [r4, #4]
   165dc:	uxth	r1, r5
   165e0:	add	r0, r0, r1, lsl #1
   165e4:	strh	r7, [r0]
   165e8:	ldrh	r0, [r4, #8]
   165ec:	cmp	r0, r1
   165f0:	addls	r0, r5, #1
   165f4:	strhls	r0, [r4, #8]
   165f8:	ldr	r0, [r4]
   165fc:	add	r1, r0, #2
   16600:	str	r1, [r4]
   16604:	strh	r6, [r0]
   16608:	ldr	r0, [r4, #16]
   1660c:	add	r0, r0, r6
   16610:	sub	sp, fp, #16
   16614:	pop	{r4, r5, r6, r7, fp, pc}
   16618:	movw	r0, #36079	; 0x8cef
   1661c:	movw	r1, #34010	; 0x84da
   16620:	movw	r3, #37859	; 0x93e3
   16624:	movw	r2, #1811	; 0x713
   16628:	movt	r0, #1
   1662c:	movt	r1, #1
   16630:	movt	r3, #1
   16634:	bl	124b0 <__assert_fail@plt>
   16638:	movw	r0, #37731	; 0x9363
   1663c:	movw	r1, #34010	; 0x84da
   16640:	movw	r3, #37859	; 0x93e3
   16644:	movw	r2, #1812	; 0x714
   16648:	movt	r0, #1
   1664c:	movt	r1, #1
   16650:	movt	r3, #1
   16654:	bl	124b0 <__assert_fail@plt>
   16658:	movw	r0, #38528	; 0x9680
   1665c:	movw	r1, #34010	; 0x84da
   16660:	movw	r3, #37859	; 0x93e3
   16664:	movw	r2, #1819	; 0x71b
   16668:	movt	r0, #1
   1666c:	movt	r1, #1
   16670:	movt	r3, #1
   16674:	bl	124b0 <__assert_fail@plt>

00016678 <flatcc_builder_table_add@@Base>:
   16678:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1667c:	add	fp, sp, #24
   16680:	sub	sp, sp, #8
   16684:	mov	r4, r0
   16688:	ldr	r0, [r0, #32]
   1668c:	ldrh	r0, [r0, #14]
   16690:	cmp	r0, #3
   16694:	bne	167b4 <flatcc_builder_table_add@@Base+0x13c>
   16698:	movw	r0, #32765	; 0x7ffd
   1669c:	mov	r8, r1
   166a0:	cmp	r1, r0
   166a4:	bcs	167d4 <flatcc_builder_table_add@@Base+0x15c>
   166a8:	ldrh	r0, [r4, #130]	; 0x82
   166ac:	cmp	r0, r3
   166b0:	strhcc	r3, [r4, #130]	; 0x82
   166b4:	ldr	r0, [r4, #4]
   166b8:	add	r1, r0, r8, lsl #1
   166bc:	ldrh	r1, [r1]
   166c0:	cmp	r1, #0
   166c4:	bne	167f4 <flatcc_builder_table_add@@Base+0x17c>
   166c8:	ldr	r1, [r4, #12]
   166cc:	movw	r7, #31153	; 0x79b1
   166d0:	ldr	r6, [r4, #20]
   166d4:	ldr	r5, [r4, #24]
   166d8:	movt	r7, #40503	; 0x9e37
   166dc:	eor	r1, r1, r8
   166e0:	mul	r1, r1, r7
   166e4:	eor	r1, r1, r2
   166e8:	mul	r1, r1, r7
   166ec:	str	r1, [r4, #12]
   166f0:	add	r1, r3, r6
   166f4:	rsb	r3, r3, #0
   166f8:	sub	r1, r1, #1
   166fc:	and	r6, r1, r3
   16700:	add	r1, r6, r2
   16704:	cmp	r1, r5
   16708:	str	r1, [r4, #20]
   1670c:	bcc	16784 <flatcc_builder_table_add@@Base+0x10c>
   16710:	ldr	r2, [r4, #28]
   16714:	ldr	r0, [r4, #40]	; 0x28
   16718:	ldr	r7, [r4, #48]	; 0x30
   1671c:	mov	r3, #1
   16720:	str	r3, [sp]
   16724:	mov	r3, #1
   16728:	add	r1, r1, r2
   1672c:	add	r2, r1, #1
   16730:	add	r1, r4, #60	; 0x3c
   16734:	blx	r7
   16738:	mov	r1, r0
   1673c:	mov	r0, #0
   16740:	cmp	r1, #0
   16744:	beq	16750 <flatcc_builder_table_add@@Base+0xd8>
   16748:	sub	sp, fp, #24
   1674c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16750:	ldr	r0, [r4, #28]
   16754:	ldr	r2, [r4, #60]	; 0x3c
   16758:	ldr	r3, [r4, #64]	; 0x40
   1675c:	ldr	r1, [r4, #32]
   16760:	add	r2, r2, r0
   16764:	sub	r0, r3, r0
   16768:	str	r2, [r4, #16]
   1676c:	movw	r2, #65532	; 0xfffc
   16770:	cmp	r0, r2
   16774:	movcs	r0, r2
   16778:	str	r0, [r4, #24]
   1677c:	str	r2, [r1, #4]
   16780:	ldr	r0, [r4, #4]
   16784:	uxth	r1, r8
   16788:	add	r2, r6, #4
   1678c:	add	r0, r0, r1, lsl #1
   16790:	strh	r2, [r0]
   16794:	ldrh	r0, [r4, #8]
   16798:	cmp	r0, r1
   1679c:	addls	r0, r8, #1
   167a0:	strhls	r0, [r4, #8]
   167a4:	ldr	r0, [r4, #16]
   167a8:	add	r0, r0, r6
   167ac:	sub	sp, fp, #24
   167b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   167b4:	movw	r0, #36079	; 0x8cef
   167b8:	movw	r1, #34010	; 0x84da
   167bc:	movw	r3, #37657	; 0x9319
   167c0:	movw	r2, #1773	; 0x6ed
   167c4:	movt	r0, #1
   167c8:	movt	r1, #1
   167cc:	movt	r3, #1
   167d0:	bl	124b0 <__assert_fail@plt>
   167d4:	movw	r0, #37731	; 0x9363
   167d8:	movw	r1, #34010	; 0x84da
   167dc:	movw	r3, #37657	; 0x9319
   167e0:	movw	r2, #1774	; 0x6ee
   167e4:	movt	r0, #1
   167e8:	movt	r1, #1
   167ec:	movt	r3, #1
   167f0:	bl	124b0 <__assert_fail@plt>
   167f4:	movw	r0, #38528	; 0x9680
   167f8:	movw	r1, #34010	; 0x84da
   167fc:	movw	r3, #37657	; 0x9319
   16800:	movw	r2, #1784	; 0x6f8
   16804:	movt	r0, #1
   16808:	movt	r1, #1
   1680c:	movt	r3, #1
   16810:	bl	124b0 <__assert_fail@plt>

00016814 <flatcc_builder_table_add_union_vector@@Base>:
   16814:	push	{r4, r5, r6, r7, fp, lr}
   16818:	add	fp, sp, #16
   1681c:	mov	r6, r0
   16820:	ldr	r0, [r0, #32]
   16824:	ldrh	r0, [r0, #14]
   16828:	cmp	r0, #3
   1682c:	bne	16898 <flatcc_builder_table_add_union_vector@@Base+0x84>
   16830:	mov	r5, r1
   16834:	clz	r1, r3
   16838:	cmp	r2, #0
   1683c:	mov	r0, r2
   16840:	mov	r4, r3
   16844:	mov	r7, r2
   16848:	movwne	r0, #1
   1684c:	lsr	r1, r1, #5
   16850:	teq	r1, r0
   16854:	beq	168b8 <flatcc_builder_table_add_union_vector@@Base+0xa4>
   16858:	cmp	r7, #0
   1685c:	beq	16890 <flatcc_builder_table_add_union_vector@@Base+0x7c>
   16860:	sub	r1, r5, #1
   16864:	mov	r0, r6
   16868:	bl	164e8 <flatcc_builder_table_add_offset@@Base>
   1686c:	cmp	r0, #0
   16870:	beq	168d8 <flatcc_builder_table_add_union_vector@@Base+0xc4>
   16874:	str	r7, [r0]
   16878:	mov	r0, r6
   1687c:	mov	r1, r5
   16880:	bl	164e8 <flatcc_builder_table_add_offset@@Base>
   16884:	cmp	r0, #0
   16888:	beq	168f8 <flatcc_builder_table_add_union_vector@@Base+0xe4>
   1688c:	str	r4, [r0]
   16890:	mov	r0, #0
   16894:	pop	{r4, r5, r6, r7, fp, pc}
   16898:	movw	r0, #36079	; 0x8cef
   1689c:	movw	r1, #34010	; 0x84da
   168a0:	movw	r3, #36977	; 0x9071
   168a4:	mov	r2, #1536	; 0x600
   168a8:	movt	r0, #1
   168ac:	movt	r1, #1
   168b0:	movt	r3, #1
   168b4:	bl	124b0 <__assert_fail@plt>
   168b8:	movw	r0, #37076	; 0x90d4
   168bc:	movw	r1, #34010	; 0x84da
   168c0:	movw	r3, #36977	; 0x9071
   168c4:	movw	r2, #1537	; 0x601
   168c8:	movt	r0, #1
   168cc:	movt	r1, #1
   168d0:	movt	r3, #1
   168d4:	bl	124b0 <__assert_fail@plt>
   168d8:	movw	r0, #36955	; 0x905b
   168dc:	movw	r1, #34010	; 0x84da
   168e0:	movw	r3, #36977	; 0x9071
   168e4:	movw	r2, #1540	; 0x604
   168e8:	movt	r0, #1
   168ec:	movt	r1, #1
   168f0:	movt	r3, #1
   168f4:	bl	124b0 <__assert_fail@plt>
   168f8:	movw	r0, #36955	; 0x905b
   168fc:	movw	r1, #34010	; 0x84da
   16900:	movw	r3, #36977	; 0x9071
   16904:	movw	r2, #1544	; 0x608
   16908:	movt	r0, #1
   1690c:	movt	r1, #1
   16910:	movt	r3, #1
   16914:	bl	124b0 <__assert_fail@plt>

00016918 <flatcc_builder_create_union_vector@@Base>:
   16918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1691c:	add	fp, sp, #28
   16920:	sub	sp, sp, #12
   16924:	mov	r6, #0
   16928:	mov	r4, r1
   1692c:	mov	r8, r0
   16930:	mov	sl, r3
   16934:	mov	r9, r2
   16938:	mov	r7, #4
   1693c:	str	r6, [r0]
   16940:	str	r6, [r0, #4]
   16944:	mov	r0, r1
   16948:	mov	r1, #4
   1694c:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   16950:	cmp	r0, #0
   16954:	beq	16960 <flatcc_builder_create_union_vector@@Base+0x48>
   16958:	sub	sp, fp, #28
   1695c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16960:	ldr	r0, [r4, #32]
   16964:	mov	r1, #5
   16968:	str	r7, [r0, #16]
   1696c:	ldr	r0, [r4, #32]
   16970:	str	r6, [r0, #20]
   16974:	ldr	r0, [r4, #32]
   16978:	strh	r1, [r0, #14]
   1697c:	ldr	r1, [r4, #28]
   16980:	ldr	r2, [r4, #60]	; 0x3c
   16984:	ldr	r3, [r4, #64]	; 0x40
   16988:	add	r2, r2, r1
   1698c:	sub	r1, r3, r1
   16990:	str	r2, [r4, #16]
   16994:	mvn	r2, #3
   16998:	cmn	r1, #4
   1699c:	movcs	r1, r2
   169a0:	str	r1, [r4, #24]
   169a4:	str	r2, [r0, #4]
   169a8:	ldr	r1, [r0, #20]
   169ac:	adds	r1, r1, sl
   169b0:	cmpcc	r1, #1073741824	; 0x40000000
   169b4:	bcc	169d8 <flatcc_builder_create_union_vector@@Base+0xc0>
   169b8:	movw	r0, #38281	; 0x9589
   169bc:	movw	r1, #34010	; 0x84da
   169c0:	movw	r3, #38308	; 0x95a4
   169c4:	mov	r2, #892	; 0x37c
   169c8:	movt	r0, #1
   169cc:	movt	r1, #1
   169d0:	movt	r3, #1
   169d4:	bl	124b0 <__assert_fail@plt>
   169d8:	str	r1, [r0, #20]
   169dc:	ldr	r7, [r4, #20]
   169e0:	ldr	r0, [r4, #24]
   169e4:	add	r1, r7, sl, lsl #2
   169e8:	cmp	r1, r0
   169ec:	str	r1, [r4, #20]
   169f0:	bcs	16a04 <flatcc_builder_create_union_vector@@Base+0xec>
   169f4:	ldr	r1, [r4, #16]
   169f8:	adds	r2, r1, r7
   169fc:	bne	16a6c <flatcc_builder_create_union_vector@@Base+0x154>
   16a00:	b	16958 <flatcc_builder_create_union_vector@@Base+0x40>
   16a04:	ldr	r2, [r4, #28]
   16a08:	ldr	r0, [r4, #40]	; 0x28
   16a0c:	ldr	r6, [r4, #48]	; 0x30
   16a10:	mov	r3, #1
   16a14:	str	r3, [sp]
   16a18:	mov	r3, #1
   16a1c:	add	r1, r1, r2
   16a20:	add	r2, r1, #1
   16a24:	add	r1, r4, #60	; 0x3c
   16a28:	blx	r6
   16a2c:	cmp	r0, #0
   16a30:	bne	16958 <flatcc_builder_create_union_vector@@Base+0x40>
   16a34:	ldr	r0, [r4, #28]
   16a38:	ldr	r1, [r4, #60]	; 0x3c
   16a3c:	ldr	r3, [r4, #64]	; 0x40
   16a40:	ldr	r2, [r4, #32]
   16a44:	add	r1, r1, r0
   16a48:	sub	r0, r3, r0
   16a4c:	mvn	r3, #3
   16a50:	cmn	r0, #4
   16a54:	str	r1, [r4, #16]
   16a58:	movcs	r0, r3
   16a5c:	str	r0, [r4, #24]
   16a60:	str	r3, [r2, #4]
   16a64:	adds	r2, r1, r7
   16a68:	beq	16958 <flatcc_builder_create_union_vector@@Base+0x40>
   16a6c:	ldr	r7, [r4, #20]
   16a70:	add	r2, r7, sl
   16a74:	cmp	r2, r0
   16a78:	str	r2, [r4, #20]
   16a7c:	bcc	16ae0 <flatcc_builder_create_union_vector@@Base+0x1c8>
   16a80:	ldr	r1, [r4, #28]
   16a84:	ldr	r0, [r4, #40]	; 0x28
   16a88:	ldr	r6, [r4, #48]	; 0x30
   16a8c:	mov	r3, #1
   16a90:	str	r3, [sp]
   16a94:	mov	r3, #1
   16a98:	add	r1, r2, r1
   16a9c:	add	r2, r1, #1
   16aa0:	add	r1, r4, #60	; 0x3c
   16aa4:	blx	r6
   16aa8:	cmp	r0, #0
   16aac:	bne	16958 <flatcc_builder_create_union_vector@@Base+0x40>
   16ab0:	ldr	r0, [r4, #28]
   16ab4:	ldr	r1, [r4, #60]	; 0x3c
   16ab8:	ldr	r3, [r4, #64]	; 0x40
   16abc:	ldr	r2, [r4, #32]
   16ac0:	add	r1, r1, r0
   16ac4:	sub	r0, r3, r0
   16ac8:	mvn	r3, #3
   16acc:	cmn	r0, #4
   16ad0:	str	r1, [r4, #16]
   16ad4:	movcs	r0, r3
   16ad8:	str	r0, [r4, #24]
   16adc:	str	r3, [r2, #4]
   16ae0:	adds	r5, r1, r7
   16ae4:	beq	16958 <flatcc_builder_create_union_vector@@Base+0x40>
   16ae8:	cmp	sl, #0
   16aec:	beq	16b74 <flatcc_builder_create_union_vector@@Base+0x25c>
   16af0:	and	ip, sl, #1
   16af4:	mov	r0, #0
   16af8:	cmp	sl, #1
   16afc:	str	r5, [sp, #8]
   16b00:	beq	16b58 <flatcc_builder_create_union_vector@@Base+0x240>
   16b04:	ldr	r0, [sp, #8]
   16b08:	sub	lr, sl, ip
   16b0c:	add	r2, r1, #4
   16b10:	add	r6, r9, #8
   16b14:	add	r7, r0, #1
   16b18:	mov	r0, #0
   16b1c:	ldrb	r3, [r6, #-8]
   16b20:	add	r5, r7, r0
   16b24:	strb	r3, [r5, #-1]
   16b28:	add	r3, r9, r0, lsl #3
   16b2c:	ldr	r5, [r3, #4]
   16b30:	str	r5, [r2, #-4]
   16b34:	ldrb	r5, [r6]
   16b38:	add	r6, r6, #16
   16b3c:	strb	r5, [r7, r0]
   16b40:	add	r0, r0, #2
   16b44:	ldr	r3, [r3, #12]
   16b48:	cmp	lr, r0
   16b4c:	str	r3, [r2]
   16b50:	add	r2, r2, #8
   16b54:	bne	16b1c <flatcc_builder_create_union_vector@@Base+0x204>
   16b58:	ldr	r5, [sp, #8]
   16b5c:	cmp	ip, #0
   16b60:	beq	16b74 <flatcc_builder_create_union_vector@@Base+0x25c>
   16b64:	ldrb	r2, [r9, r0, lsl #3]!
   16b68:	strb	r2, [r5, r0]
   16b6c:	ldr	r2, [r9, #4]
   16b70:	str	r2, [r1, r0, lsl #2]
   16b74:	mov	r0, r4
   16b78:	mov	r2, sl
   16b7c:	mov	r3, r5
   16b80:	bl	160ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16b84:	mov	r7, r0
   16b88:	mov	r6, #0
   16b8c:	cmp	r0, #0
   16b90:	beq	16bbc <flatcc_builder_create_union_vector@@Base+0x2a4>
   16b94:	mvn	r0, #0
   16b98:	mov	r1, #1
   16b9c:	mov	r2, sl
   16ba0:	mov	r3, #1
   16ba4:	str	r1, [sp]
   16ba8:	str	r0, [sp, #4]
   16bac:	mov	r0, r4
   16bb0:	mov	r1, r5
   16bb4:	bl	15e8c <flatcc_builder_create_vector@@Base>
   16bb8:	b	16bc0 <flatcc_builder_create_union_vector@@Base+0x2a8>
   16bbc:	mov	r0, #0
   16bc0:	orr	r1, r6, r7
   16bc4:	stm	r8, {r0, r1}
   16bc8:	mov	r1, #0
   16bcc:	ldr	r0, [r4, #16]
   16bd0:	ldr	r2, [r4, #20]
   16bd4:	bl	12480 <memset@plt>
   16bd8:	ldr	r0, [r4, #32]
   16bdc:	ldr	r1, [r4, #60]	; 0x3c
   16be0:	ldr	r2, [r4, #64]	; 0x40
   16be4:	ldr	r3, [r0, #8]
   16be8:	str	r3, [r4, #20]
   16bec:	ldr	r3, [r0]
   16bf0:	str	r3, [r4, #28]
   16bf4:	add	r1, r1, r3
   16bf8:	ldr	r7, [r0, #4]
   16bfc:	str	r1, [r4, #16]
   16c00:	sub	r1, r2, r3
   16c04:	cmp	r1, r7
   16c08:	movhi	r1, r7
   16c0c:	str	r1, [r4, #24]
   16c10:	ldrh	r1, [r4, #130]	; 0x82
   16c14:	ldrh	r2, [r4, #128]	; 0x80
   16c18:	cmp	r2, r1
   16c1c:	strhcc	r1, [r4, #128]	; 0x80
   16c20:	ldrh	r1, [r0, #12]
   16c24:	sub	r0, r0, #36	; 0x24
   16c28:	str	r0, [r4, #32]
   16c2c:	strh	r1, [r4, #130]	; 0x82
   16c30:	ldr	r0, [r4, #156]	; 0x9c
   16c34:	sub	r0, r0, #1
   16c38:	str	r0, [r4, #156]	; 0x9c
   16c3c:	sub	sp, fp, #28
   16c40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016c44 <flatcc_builder_create_union_vector_direct@@Base>:
   16c44:	push	{r4, r5, r6, r7, fp, lr}
   16c48:	add	fp, sp, #16
   16c4c:	sub	sp, sp, #8
   16c50:	ldr	r7, [fp, #8]
   16c54:	mov	r5, r2
   16c58:	mov	r4, r0
   16c5c:	mov	r0, #0
   16c60:	mov	r6, r1
   16c64:	str	r0, [r4]
   16c68:	str	r0, [r4, #4]
   16c6c:	mov	r0, r1
   16c70:	mov	r1, r3
   16c74:	mov	r3, r5
   16c78:	mov	r2, r7
   16c7c:	bl	160ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16c80:	cmp	r0, #0
   16c84:	str	r0, [r4, #4]
   16c88:	beq	16cb4 <flatcc_builder_create_union_vector_direct@@Base+0x70>
   16c8c:	mvn	r0, #0
   16c90:	mov	r1, #1
   16c94:	mov	r2, r7
   16c98:	mov	r3, #1
   16c9c:	str	r1, [sp]
   16ca0:	str	r0, [sp, #4]
   16ca4:	mov	r0, r6
   16ca8:	mov	r1, r5
   16cac:	bl	15e8c <flatcc_builder_create_vector@@Base>
   16cb0:	str	r0, [r4]
   16cb4:	sub	sp, fp, #16
   16cb8:	pop	{r4, r5, r6, r7, fp, pc}

00016cbc <flatcc_builder_start_union_vector@@Base>:
   16cbc:	push	{r4, sl, fp, lr}
   16cc0:	add	fp, sp, #8
   16cc4:	mov	r1, #4
   16cc8:	mov	r4, r0
   16ccc:	bl	13de4 <flatcc_builder_start_buffer@@Base+0xbc>
   16cd0:	mov	r1, r0
   16cd4:	mvn	r0, #0
   16cd8:	cmp	r1, #0
   16cdc:	popne	{r4, sl, fp, pc}
   16ce0:	ldr	r0, [r4, #32]
   16ce4:	mov	r1, #8
   16ce8:	mov	r2, #7
   16cec:	str	r1, [r0, #16]
   16cf0:	mov	r0, #0
   16cf4:	ldr	r1, [r4, #32]
   16cf8:	str	r0, [r1, #20]
   16cfc:	ldr	r1, [r4, #32]
   16d00:	strh	r2, [r1, #14]
   16d04:	ldr	r2, [r4, #28]
   16d08:	ldr	r3, [r4, #60]	; 0x3c
   16d0c:	ldr	ip, [r4, #64]	; 0x40
   16d10:	add	r3, r3, r2
   16d14:	sub	r2, ip, r2
   16d18:	str	r3, [r4, #16]
   16d1c:	mvn	r3, #3
   16d20:	cmn	r2, #4
   16d24:	movcs	r2, r3
   16d28:	str	r2, [r4, #24]
   16d2c:	str	r3, [r1, #4]
   16d30:	pop	{r4, sl, fp, pc}

00016d34 <flatcc_builder_end_union_vector@@Base>:
   16d34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d38:	add	fp, sp, #28
   16d3c:	sub	sp, sp, #20
   16d40:	mov	r4, r0
   16d44:	mov	r0, #0
   16d48:	mov	r8, r1
   16d4c:	str	r0, [r4]
   16d50:	str	r0, [r4, #4]
   16d54:	ldr	r0, [r1, #32]
   16d58:	ldrh	r1, [r0, #14]
   16d5c:	cmp	r1, #7
   16d60:	bne	16f68 <flatcc_builder_end_union_vector@@Base+0x234>
   16d64:	ldr	r9, [r0, #20]
   16d68:	ldr	r5, [r8, #20]
   16d6c:	ldr	r2, [r8, #24]
   16d70:	add	r0, r9, r9, lsl #2
   16d74:	add	r1, r5, r0
   16d78:	cmp	r1, r2
   16d7c:	str	r1, [r8, #20]
   16d80:	bcs	16e70 <flatcc_builder_end_union_vector@@Base+0x13c>
   16d84:	ldr	r0, [r8, #16]
   16d88:	adds	r1, r0, r5
   16d8c:	beq	16ed8 <flatcc_builder_end_union_vector@@Base+0x1a4>
   16d90:	add	sl, r1, r9, lsl #2
   16d94:	cmp	r9, #0
   16d98:	beq	16e28 <flatcc_builder_end_union_vector@@Base+0xf4>
   16d9c:	and	r2, r9, #1
   16da0:	cmp	r9, #1
   16da4:	str	r4, [sp, #12]
   16da8:	str	r2, [sp, #16]
   16dac:	mov	r2, #0
   16db0:	beq	16e08 <flatcc_builder_end_union_vector@@Base+0xd4>
   16db4:	ldr	r2, [sp, #16]
   16db8:	add	r5, r5, #4
   16dbc:	add	r6, r0, #8
   16dc0:	sub	lr, r9, r2
   16dc4:	mov	r2, #0
   16dc8:	ldrb	r7, [r6, #-8]
   16dcc:	mov	r4, sl
   16dd0:	add	r3, r0, r2, lsl #3
   16dd4:	strb	r7, [r4, r2]!
   16dd8:	add	r7, r0, r5
   16ddc:	add	r2, r2, #2
   16de0:	ldr	ip, [r3, #4]
   16de4:	cmp	lr, r2
   16de8:	str	ip, [r7, #-4]
   16dec:	ldrb	r7, [r6]
   16df0:	add	r6, r6, #16
   16df4:	strb	r7, [r4, #1]
   16df8:	ldr	r3, [r3, #12]
   16dfc:	str	r3, [r0, r5]
   16e00:	add	r5, r5, #8
   16e04:	bne	16dc8 <flatcc_builder_end_union_vector@@Base+0x94>
   16e08:	ldr	r3, [sp, #16]
   16e0c:	ldr	r4, [sp, #12]
   16e10:	cmp	r3, #0
   16e14:	beq	16e28 <flatcc_builder_end_union_vector@@Base+0xf4>
   16e18:	ldrb	r3, [r0, r2, lsl #3]!
   16e1c:	strb	r3, [sl, r2]
   16e20:	ldr	r0, [r0, #4]
   16e24:	str	r0, [r1, r2, lsl #2]
   16e28:	mov	r0, r8
   16e2c:	mov	r2, r9
   16e30:	mov	r3, sl
   16e34:	bl	160ec <flatcc_builder_create_offset_vector_direct@@Base+0x8>
   16e38:	mov	r5, r0
   16e3c:	mov	r6, #0
   16e40:	cmp	r0, #0
   16e44:	beq	16ee0 <flatcc_builder_end_union_vector@@Base+0x1ac>
   16e48:	mvn	r0, #0
   16e4c:	mov	r1, #1
   16e50:	mov	r2, r9
   16e54:	mov	r3, #1
   16e58:	str	r1, [sp]
   16e5c:	str	r0, [sp, #4]
   16e60:	mov	r0, r8
   16e64:	mov	r1, sl
   16e68:	bl	15e8c <flatcc_builder_create_vector@@Base>
   16e6c:	b	16ee4 <flatcc_builder_end_union_vector@@Base+0x1b0>
   16e70:	ldr	r2, [r8, #28]
   16e74:	ldr	r0, [r8, #40]	; 0x28
   16e78:	ldr	r7, [r8, #48]	; 0x30
   16e7c:	mov	r3, #1
   16e80:	str	r3, [sp]
   16e84:	mov	r3, #1
   16e88:	add	r1, r1, r2
   16e8c:	add	r2, r1, #1
   16e90:	add	r1, r8, #60	; 0x3c
   16e94:	blx	r7
   16e98:	cmp	r0, #0
   16e9c:	bne	16ed8 <flatcc_builder_end_union_vector@@Base+0x1a4>
   16ea0:	ldr	r1, [r8, #28]
   16ea4:	ldr	r0, [r8, #60]	; 0x3c
   16ea8:	ldr	r3, [r8, #64]	; 0x40
   16eac:	ldr	r2, [r8, #32]
   16eb0:	add	r0, r0, r1
   16eb4:	sub	r1, r3, r1
   16eb8:	mvn	r3, #3
   16ebc:	cmn	r1, #4
   16ec0:	str	r0, [r8, #16]
   16ec4:	movcs	r1, r3
   16ec8:	str	r1, [r8, #24]
   16ecc:	str	r3, [r2, #4]
   16ed0:	adds	r1, r0, r5
   16ed4:	bne	16d90 <flatcc_builder_end_union_vector@@Base+0x5c>
   16ed8:	sub	sp, fp, #28
   16edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ee0:	mov	r0, #0
   16ee4:	orr	r1, r6, r5
   16ee8:	stm	r4, {r0, r1}
   16eec:	mov	r1, #0
   16ef0:	ldr	r0, [r8, #16]
   16ef4:	ldr	r2, [r8, #20]
   16ef8:	bl	12480 <memset@plt>
   16efc:	ldr	r0, [r8, #32]
   16f00:	ldr	r1, [r8, #60]	; 0x3c
   16f04:	ldr	r2, [r8, #64]	; 0x40
   16f08:	ldr	r3, [r0, #8]
   16f0c:	str	r3, [r8, #20]
   16f10:	ldr	r3, [r0]
   16f14:	str	r3, [r8, #28]
   16f18:	add	r1, r1, r3
   16f1c:	ldr	r7, [r0, #4]
   16f20:	str	r1, [r8, #16]
   16f24:	sub	r1, r2, r3
   16f28:	cmp	r1, r7
   16f2c:	movhi	r1, r7
   16f30:	str	r1, [r8, #24]
   16f34:	ldrh	r1, [r8, #130]	; 0x82
   16f38:	ldrh	r2, [r8, #128]	; 0x80
   16f3c:	cmp	r2, r1
   16f40:	strhcc	r1, [r8, #128]	; 0x80
   16f44:	ldrh	r1, [r0, #12]
   16f48:	sub	r0, r0, #36	; 0x24
   16f4c:	str	r0, [r8, #32]
   16f50:	strh	r1, [r8, #130]	; 0x82
   16f54:	ldr	r0, [r8, #156]	; 0x9c
   16f58:	sub	r0, r0, #1
   16f5c:	str	r0, [r8, #156]	; 0x9c
   16f60:	sub	sp, fp, #28
   16f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f68:	movw	r0, #37116	; 0x90fc
   16f6c:	movw	r1, #34010	; 0x84da
   16f70:	movw	r3, #37166	; 0x912e
   16f74:	movw	r2, #1617	; 0x651
   16f78:	movt	r0, #1
   16f7c:	movt	r1, #1
   16f80:	movt	r3, #1
   16f84:	bl	124b0 <__assert_fail@plt>

00016f88 <flatcc_builder_union_vector_count@@Base>:
   16f88:	ldr	r0, [r0, #32]
   16f8c:	ldr	r0, [r0, #20]
   16f90:	bx	lr

00016f94 <flatcc_builder_union_vector_edit@@Base>:
   16f94:	ldr	r0, [r0, #16]
   16f98:	bx	lr

00016f9c <flatcc_builder_extend_union_vector@@Base>:
   16f9c:	push	{r4, r5, fp, lr}
   16fa0:	add	fp, sp, #8
   16fa4:	sub	sp, sp, #8
   16fa8:	mov	r4, r0
   16fac:	ldr	r0, [r0, #32]
   16fb0:	ldr	r2, [r0, #20]
   16fb4:	adds	r2, r2, r1
   16fb8:	cmpcc	r2, #536870912	; 0x20000000
   16fbc:	bcc	16fe0 <flatcc_builder_extend_union_vector@@Base+0x44>
   16fc0:	movw	r0, #38281	; 0x9589
   16fc4:	movw	r1, #34010	; 0x84da
   16fc8:	movw	r3, #38308	; 0x95a4
   16fcc:	mov	r2, #892	; 0x37c
   16fd0:	movt	r0, #1
   16fd4:	movt	r1, #1
   16fd8:	movt	r3, #1
   16fdc:	bl	124b0 <__assert_fail@plt>
   16fe0:	str	r2, [r0, #20]
   16fe4:	ldr	r5, [r4, #20]
   16fe8:	ldr	r0, [r4, #24]
   16fec:	add	r1, r5, r1, lsl #3
   16ff0:	cmp	r1, r0
   16ff4:	str	r1, [r4, #20]
   16ff8:	bcs	1700c <flatcc_builder_extend_union_vector@@Base+0x70>
   16ffc:	ldr	r0, [r4, #16]
   17000:	add	r0, r0, r5
   17004:	sub	sp, fp, #8
   17008:	pop	{r4, r5, fp, pc}
   1700c:	ldr	r2, [r4, #28]
   17010:	ldr	r0, [r4, #40]	; 0x28
   17014:	ldr	ip, [r4, #48]	; 0x30
   17018:	mov	r3, #1
   1701c:	str	r3, [sp]
   17020:	mov	r3, #1
   17024:	add	r1, r1, r2
   17028:	add	r2, r1, #1
   1702c:	add	r1, r4, #60	; 0x3c
   17030:	blx	ip
   17034:	mov	r1, r0
   17038:	mov	r0, #0
   1703c:	cmp	r1, #0
   17040:	beq	1704c <flatcc_builder_extend_union_vector@@Base+0xb0>
   17044:	sub	sp, fp, #8
   17048:	pop	{r4, r5, fp, pc}
   1704c:	ldr	r1, [r4, #28]
   17050:	ldr	r0, [r4, #60]	; 0x3c
   17054:	ldr	r3, [r4, #64]	; 0x40
   17058:	ldr	r2, [r4, #32]
   1705c:	add	r0, r0, r1
   17060:	sub	r1, r3, r1
   17064:	mvn	r3, #3
   17068:	cmn	r1, #4
   1706c:	str	r0, [r4, #16]
   17070:	movcs	r1, r3
   17074:	str	r1, [r4, #24]
   17078:	str	r3, [r2, #4]
   1707c:	add	r0, r0, r5
   17080:	sub	sp, fp, #8
   17084:	pop	{r4, r5, fp, pc}

00017088 <flatcc_builder_truncate_union_vector@@Base>:
   17088:	push	{fp, lr}
   1708c:	mov	fp, sp
   17090:	ldr	r2, [r0, #32]
   17094:	ldrh	r3, [r2, #14]
   17098:	cmp	r3, #7
   1709c:	bne	170e4 <flatcc_builder_truncate_union_vector@@Base+0x5c>
   170a0:	ldr	r3, [r2, #20]
   170a4:	cmp	r3, r1
   170a8:	bcc	17104 <flatcc_builder_truncate_union_vector@@Base+0x7c>
   170ac:	sub	r3, r3, r1
   170b0:	str	r3, [r2, #20]
   170b4:	ldr	r2, [r0, #32]
   170b8:	ldr	r3, [r0, #20]
   170bc:	ldr	ip, [r0, #16]
   170c0:	ldr	r2, [r2, #16]
   170c4:	mls	r3, r2, r1, r3
   170c8:	mul	r2, r2, r1
   170cc:	mov	r1, #0
   170d0:	str	r3, [r0, #20]
   170d4:	add	r0, ip, r3
   170d8:	bl	12480 <memset@plt>
   170dc:	mov	r0, #0
   170e0:	pop	{fp, pc}
   170e4:	movw	r0, #37116	; 0x90fc
   170e8:	movw	r1, #34010	; 0x84da
   170ec:	movw	r3, #37249	; 0x9181
   170f0:	movw	r2, #1665	; 0x681
   170f4:	movt	r0, #1
   170f8:	movt	r1, #1
   170fc:	movt	r3, #1
   17100:	bl	124b0 <__assert_fail@plt>
   17104:	movw	r0, #35680	; 0x8b60
   17108:	movw	r1, #34010	; 0x84da
   1710c:	movw	r3, #37249	; 0x9181
   17110:	movw	r2, #1666	; 0x682
   17114:	movt	r0, #1
   17118:	movt	r1, #1
   1711c:	movt	r3, #1
   17120:	bl	124b0 <__assert_fail@plt>

00017124 <flatcc_builder_union_vector_push@@Base>:
   17124:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17128:	add	fp, sp, #24
   1712c:	sub	sp, sp, #8
   17130:	mov	r7, r0
   17134:	ldr	r0, [r0, #32]
   17138:	mov	r9, r1
   1713c:	ldrh	r1, [r0, #14]
   17140:	cmp	r1, #7
   17144:	bne	1720c <flatcc_builder_union_vector_push@@Base+0xe8>
   17148:	ldr	r1, [r0, #20]
   1714c:	mov	r6, #0
   17150:	cmn	r1, #-536870911	; 0xe0000001
   17154:	beq	171b4 <flatcc_builder_union_vector_push@@Base+0x90>
   17158:	add	r1, r1, #1
   1715c:	mov	r8, r2
   17160:	str	r1, [r0, #20]
   17164:	ldr	r4, [r7, #20]
   17168:	ldr	r0, [r7, #24]
   1716c:	add	r1, r4, #8
   17170:	cmp	r1, r0
   17174:	str	r1, [r7, #20]
   17178:	bcs	17184 <flatcc_builder_union_vector_push@@Base+0x60>
   1717c:	ldr	r0, [r7, #16]
   17180:	b	171f0 <flatcc_builder_union_vector_push@@Base+0xcc>
   17184:	ldr	r1, [r7, #28]
   17188:	ldr	r0, [r7, #40]	; 0x28
   1718c:	ldr	r5, [r7, #48]	; 0x30
   17190:	mov	r2, #1
   17194:	mov	r3, #1
   17198:	str	r2, [sp]
   1719c:	add	r1, r4, r1
   171a0:	add	r2, r1, #9
   171a4:	add	r1, r7, #60	; 0x3c
   171a8:	blx	r5
   171ac:	cmp	r0, #0
   171b0:	beq	171c0 <flatcc_builder_union_vector_push@@Base+0x9c>
   171b4:	mov	r0, r6
   171b8:	sub	sp, fp, #24
   171bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   171c0:	ldr	r1, [r7, #28]
   171c4:	ldr	r0, [r7, #60]	; 0x3c
   171c8:	ldr	r3, [r7, #64]	; 0x40
   171cc:	ldr	r2, [r7, #32]
   171d0:	add	r0, r0, r1
   171d4:	sub	r1, r3, r1
   171d8:	mvn	r3, #3
   171dc:	cmn	r1, #4
   171e0:	str	r0, [r7, #16]
   171e4:	movcs	r1, r3
   171e8:	str	r1, [r7, #24]
   171ec:	str	r3, [r2, #4]
   171f0:	adds	r0, r0, r4
   171f4:	movne	r6, r0
   171f8:	strne	r9, [r0]
   171fc:	strne	r8, [r0, #4]
   17200:	mov	r0, r6
   17204:	sub	sp, fp, #24
   17208:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1720c:	movw	r0, #37116	; 0x90fc
   17210:	movw	r1, #34010	; 0x84da
   17214:	movw	r3, #37318	; 0x91c6
   17218:	movw	r2, #1677	; 0x68d
   1721c:	movt	r0, #1
   17220:	movt	r1, #1
   17224:	movt	r3, #1
   17228:	bl	124b0 <__assert_fail@plt>

0001722c <flatcc_builder_append_union_vector@@Base>:
   1722c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17230:	add	fp, sp, #24
   17234:	sub	sp, sp, #8
   17238:	mov	r6, r0
   1723c:	ldr	r0, [r0, #32]
   17240:	mov	r8, r1
   17244:	ldrh	r1, [r0, #14]
   17248:	cmp	r1, #7
   1724c:	bne	17350 <flatcc_builder_append_union_vector@@Base+0x124>
   17250:	ldr	r1, [r0, #20]
   17254:	mov	r5, r2
   17258:	adds	r1, r1, r2
   1725c:	cmpcc	r1, #536870912	; 0x20000000
   17260:	bcc	17284 <flatcc_builder_append_union_vector@@Base+0x58>
   17264:	movw	r0, #38281	; 0x9589
   17268:	movw	r1, #34010	; 0x84da
   1726c:	movw	r3, #38308	; 0x95a4
   17270:	mov	r2, #892	; 0x37c
   17274:	movt	r0, #1
   17278:	movt	r1, #1
   1727c:	movt	r3, #1
   17280:	bl	124b0 <__assert_fail@plt>
   17284:	str	r1, [r0, #20]
   17288:	ldr	r4, [r6, #20]
   1728c:	ldr	r0, [r6, #24]
   17290:	add	r1, r4, r5, lsl #3
   17294:	cmp	r1, r0
   17298:	str	r1, [r6, #20]
   1729c:	bcs	172c8 <flatcc_builder_append_union_vector@@Base+0x9c>
   172a0:	ldr	r0, [r6, #16]
   172a4:	adds	r7, r0, r4
   172a8:	beq	17340 <flatcc_builder_append_union_vector@@Base+0x114>
   172ac:	lsl	r2, r5, #3
   172b0:	mov	r0, r7
   172b4:	mov	r1, r8
   172b8:	bl	123fc <memcpy@plt>
   172bc:	mov	r0, r7
   172c0:	sub	sp, fp, #24
   172c4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172c8:	ldr	r2, [r6, #28]
   172cc:	ldr	r0, [r6, #40]	; 0x28
   172d0:	ldr	r7, [r6, #48]	; 0x30
   172d4:	mov	r3, #1
   172d8:	str	r3, [sp]
   172dc:	mov	r3, #1
   172e0:	add	r1, r1, r2
   172e4:	add	r2, r1, #1
   172e8:	add	r1, r6, #60	; 0x3c
   172ec:	blx	r7
   172f0:	mov	r7, #0
   172f4:	cmp	r0, #0
   172f8:	beq	17308 <flatcc_builder_append_union_vector@@Base+0xdc>
   172fc:	mov	r0, r7
   17300:	sub	sp, fp, #24
   17304:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17308:	ldr	r1, [r6, #28]
   1730c:	ldr	r0, [r6, #60]	; 0x3c
   17310:	ldr	r3, [r6, #64]	; 0x40
   17314:	ldr	r2, [r6, #32]
   17318:	add	r0, r0, r1
   1731c:	sub	r1, r3, r1
   17320:	mvn	r3, #3
   17324:	cmn	r1, #4
   17328:	str	r0, [r6, #16]
   1732c:	movcs	r1, r3
   17330:	str	r1, [r6, #24]
   17334:	str	r3, [r2, #4]
   17338:	adds	r7, r0, r4
   1733c:	bne	172ac <flatcc_builder_append_union_vector@@Base+0x80>
   17340:	mov	r7, #0
   17344:	mov	r0, r7
   17348:	sub	sp, fp, #24
   1734c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17350:	movw	r0, #37116	; 0x90fc
   17354:	movw	r1, #34010	; 0x84da
   17358:	movw	r3, #37427	; 0x9233
   1735c:	movw	r2, #1692	; 0x69c
   17360:	movt	r0, #1
   17364:	movt	r1, #1
   17368:	movt	r3, #1
   1736c:	bl	124b0 <__assert_fail@plt>

00017370 <flatcc_builder_create_string@@Base>:
   17370:	push	{r4, r5, r6, sl, fp, lr}
   17374:	add	fp, sp, #16
   17378:	sub	sp, sp, #80	; 0x50
   1737c:	str	r2, [fp, #-20]	; 0xffffffec
   17380:	mvn	r5, r2
   17384:	mov	r6, r0
   17388:	sub	r3, fp, #20
   1738c:	cmp	r2, #0
   17390:	add	lr, sp, #4
   17394:	ldr	ip, [r0, #136]	; 0x88
   17398:	mov	r0, #4
   1739c:	str	r0, [sp, #16]
   173a0:	str	r3, [sp, #12]
   173a4:	mov	r3, #1
   173a8:	str	r0, [sp, #4]
   173ac:	addne	r0, r2, #4
   173b0:	str	r3, [sp, #8]
   173b4:	strne	r2, [sp, #24]
   173b8:	movw	r2, #33480	; 0x82c8
   173bc:	movne	r3, #2
   173c0:	strne	r1, [sp, #20]
   173c4:	strne	r3, [sp, #8]
   173c8:	strne	r0, [sp, #4]
   173cc:	movt	r2, #1
   173d0:	add	r5, ip, r5
   173d4:	and	r5, r5, #3
   173d8:	add	r5, r5, #1
   173dc:	add	r1, r0, r5
   173e0:	add	r0, lr, r3, lsl #3
   173e4:	str	r1, [sp, #4]
   173e8:	cmp	r1, #0
   173ec:	str	r2, [r0, #8]
   173f0:	add	r2, r3, #1
   173f4:	str	r5, [r0, #12]
   173f8:	str	r2, [sp, #8]
   173fc:	ble	17450 <flatcc_builder_create_string@@Base+0xe0>
   17400:	ldr	r0, [r6, #36]	; 0x24
   17404:	ldr	r4, [r6, #44]	; 0x2c
   17408:	sub	r5, ip, r1
   1740c:	str	r1, [sp]
   17410:	add	r1, lr, #8
   17414:	mov	r3, r5
   17418:	blx	r4
   1741c:	cmp	r0, #0
   17420:	streq	r5, [r6, #136]	; 0x88
   17424:	moveq	r0, r5
   17428:	subeq	sp, fp, #16
   1742c:	popeq	{r4, r5, r6, sl, fp, pc}
   17430:	movw	r0, #38528	; 0x9680
   17434:	movw	r1, #34010	; 0x84da
   17438:	movw	r3, #38207	; 0x953f
   1743c:	movw	r2, #651	; 0x28b
   17440:	movt	r0, #1
   17444:	movt	r1, #1
   17448:	movt	r3, #1
   1744c:	bl	124b0 <__assert_fail@plt>
   17450:	movw	r0, #38528	; 0x9680
   17454:	movw	r1, #34010	; 0x84da
   17458:	movw	r3, #38207	; 0x953f
   1745c:	movw	r2, #647	; 0x287
   17460:	movt	r0, #1
   17464:	movt	r1, #1
   17468:	movt	r3, #1
   1746c:	bl	124b0 <__assert_fail@plt>

00017470 <flatcc_builder_create_string_str@@Base>:
   17470:	push	{r4, r5, fp, lr}
   17474:	add	fp, sp, #8
   17478:	mov	r5, r0
   1747c:	mov	r0, r1
   17480:	mov	r4, r1
   17484:	bl	1245c <strlen@plt>
   17488:	mov	r2, r0
   1748c:	mov	r0, r5
   17490:	mov	r1, r4
   17494:	pop	{r4, r5, fp, lr}
   17498:	b	17370 <flatcc_builder_create_string@@Base>

0001749c <flatcc_builder_create_string_strn@@Base>:
   1749c:	push	{r4, r5, r6, sl, fp, lr}
   174a0:	add	fp, sp, #16
   174a4:	mov	r6, r0
   174a8:	mov	r5, r1
   174ac:	mov	r0, r1
   174b0:	mov	r1, #0
   174b4:	mov	r4, r2
   174b8:	bl	1248c <memchr@plt>
   174bc:	cmp	r0, #0
   174c0:	mov	r1, r5
   174c4:	subne	r4, r0, r5
   174c8:	mov	r0, r6
   174cc:	mov	r2, r4
   174d0:	pop	{r4, r5, r6, sl, fp, lr}
   174d4:	b	17370 <flatcc_builder_create_string@@Base>

000174d8 <flatcc_builder_end_string@@Base>:
   174d8:	push	{r4, r5, fp, lr}
   174dc:	add	fp, sp, #8
   174e0:	mov	r4, r0
   174e4:	ldr	r0, [r0, #32]
   174e8:	ldrh	r1, [r0, #14]
   174ec:	cmp	r1, #6
   174f0:	bne	17598 <flatcc_builder_end_string@@Base+0xc0>
   174f4:	ldr	r2, [r0, #20]
   174f8:	ldr	r0, [r4, #20]
   174fc:	cmp	r2, r0
   17500:	bne	175b8 <flatcc_builder_end_string@@Base+0xe0>
   17504:	ldr	r1, [r4, #16]
   17508:	mov	r0, r4
   1750c:	bl	17370 <flatcc_builder_create_string@@Base>
   17510:	mov	r5, r0
   17514:	cmp	r0, #0
   17518:	beq	17590 <flatcc_builder_end_string@@Base+0xb8>
   1751c:	ldr	r0, [r4, #16]
   17520:	ldr	r2, [r4, #20]
   17524:	mov	r1, #0
   17528:	bl	12480 <memset@plt>
   1752c:	ldr	r0, [r4, #32]
   17530:	ldr	r1, [r4, #60]	; 0x3c
   17534:	ldr	ip, [r4, #64]	; 0x40
   17538:	ldr	r3, [r0, #8]
   1753c:	str	r3, [r4, #20]
   17540:	ldr	r3, [r0]
   17544:	str	r3, [r4, #28]
   17548:	add	r1, r1, r3
   1754c:	ldr	r2, [r0, #4]
   17550:	str	r1, [r4, #16]
   17554:	sub	r1, ip, r3
   17558:	cmp	r1, r2
   1755c:	movhi	r1, r2
   17560:	str	r1, [r4, #24]
   17564:	ldrh	r1, [r4, #130]	; 0x82
   17568:	ldrh	r2, [r4, #128]	; 0x80
   1756c:	cmp	r2, r1
   17570:	strhcc	r1, [r4, #128]	; 0x80
   17574:	ldrh	r1, [r0, #12]
   17578:	sub	r0, r0, #36	; 0x24
   1757c:	str	r0, [r4, #32]
   17580:	strh	r1, [r4, #130]	; 0x82
   17584:	ldr	r0, [r4, #156]	; 0x9c
   17588:	sub	r0, r0, #1
   1758c:	str	r0, [r4, #156]	; 0x9c
   17590:	mov	r0, r5
   17594:	pop	{r4, r5, fp, pc}
   17598:	movw	r0, #35327	; 0x89ff
   1759c:	movw	r1, #34010	; 0x84da
   175a0:	movw	r3, #37554	; 0x92b2
   175a4:	movw	r2, #1732	; 0x6c4
   175a8:	movt	r0, #1
   175ac:	movt	r1, #1
   175b0:	movt	r3, #1
   175b4:	bl	124b0 <__assert_fail@plt>
   175b8:	movw	r0, #37621	; 0x92f5
   175bc:	movw	r1, #34010	; 0x84da
   175c0:	movw	r3, #37554	; 0x92b2
   175c4:	movw	r2, #1733	; 0x6c5
   175c8:	movt	r0, #1
   175cc:	movt	r1, #1
   175d0:	movt	r3, #1
   175d4:	bl	124b0 <__assert_fail@plt>

000175d8 <flatcc_builder_string_edit@@Base>:
   175d8:	ldr	r0, [r0, #16]
   175dc:	bx	lr

000175e0 <flatcc_builder_string_len@@Base>:
   175e0:	ldr	r0, [r0, #32]
   175e4:	ldr	r0, [r0, #20]
   175e8:	bx	lr

000175ec <flatcc_builder_table_edit@@Base>:
   175ec:	push	{fp, lr}
   175f0:	mov	fp, sp
   175f4:	ldr	r2, [r0, #32]
   175f8:	ldrh	r2, [r2, #14]
   175fc:	cmp	r2, #3
   17600:	ldreq	r2, [r0, #16]
   17604:	ldreq	r0, [r0, #20]
   17608:	addeq	r0, r2, r0
   1760c:	subeq	r0, r0, r1
   17610:	popeq	{fp, pc}
   17614:	movw	r0, #36079	; 0x8cef
   17618:	movw	r1, #34010	; 0x84da
   1761c:	movw	r3, #37799	; 0x93a7
   17620:	movw	r2, #1794	; 0x702
   17624:	movt	r0, #1
   17628:	movt	r1, #1
   1762c:	movt	r3, #1
   17630:	bl	124b0 <__assert_fail@plt>

00017634 <flatcc_builder_table_add_copy@@Base>:
   17634:	push	{r4, r5, r6, sl, fp, lr}
   17638:	add	fp, sp, #16
   1763c:	mov	r4, r3
   17640:	ldr	r3, [fp, #8]
   17644:	mov	r5, r2
   17648:	mov	r2, r4
   1764c:	bl	16678 <flatcc_builder_table_add@@Base>
   17650:	mov	r6, r0
   17654:	cmp	r0, #0
   17658:	beq	1766c <flatcc_builder_table_add_copy@@Base+0x38>
   1765c:	mov	r0, r6
   17660:	mov	r1, r5
   17664:	mov	r2, r4
   17668:	bl	123fc <memcpy@plt>
   1766c:	mov	r0, r6
   17670:	pop	{r4, r5, r6, sl, fp, pc}

00017674 <flatcc_builder_push_buffer_alignment@@Base>:
   17674:	ldrh	r1, [r0, #128]	; 0x80
   17678:	mov	r2, #4
   1767c:	strh	r2, [r0, #128]	; 0x80
   17680:	mov	r0, r1
   17684:	bx	lr

00017688 <flatcc_builder_pop_buffer_alignment@@Base>:
   17688:	ldrh	r2, [r0, #128]	; 0x80
   1768c:	cmp	r2, r1
   17690:	strhcc	r1, [r0, #128]	; 0x80
   17694:	bx	lr

00017698 <flatcc_builder_get_buffer_alignment@@Base>:
   17698:	ldrh	r0, [r0, #128]	; 0x80
   1769c:	bx	lr

000176a0 <flatcc_builder_set_vtable_clustering@@Base>:
   176a0:	clz	r1, r1
   176a4:	lsr	r1, r1, #5
   176a8:	str	r1, [r0, #180]	; 0xb4
   176ac:	bx	lr

000176b0 <flatcc_builder_set_block_align@@Base>:
   176b0:	strh	r1, [r0, #132]	; 0x84
   176b4:	bx	lr

000176b8 <flatcc_builder_get_level@@Base>:
   176b8:	ldr	r0, [r0, #156]	; 0x9c
   176bc:	bx	lr

000176c0 <flatcc_builder_set_max_level@@Base>:
   176c0:	str	r1, [r0, #176]	; 0xb0
   176c4:	ldr	r2, [r0, #160]	; 0xa0
   176c8:	cmp	r2, r1
   176cc:	strlt	r1, [r0, #160]	; 0xa0
   176d0:	bx	lr

000176d4 <flatcc_builder_get_buffer_size@@Base>:
   176d4:	ldr	r1, [r0, #136]	; 0x88
   176d8:	ldr	r0, [r0, #140]	; 0x8c
   176dc:	sub	r0, r0, r1
   176e0:	bx	lr

000176e4 <flatcc_builder_get_buffer_start@@Base>:
   176e4:	ldr	r0, [r0, #136]	; 0x88
   176e8:	bx	lr

000176ec <flatcc_builder_get_buffer_end@@Base>:
   176ec:	ldr	r0, [r0, #140]	; 0x8c
   176f0:	bx	lr

000176f4 <flatcc_builder_set_vtable_cache_limit@@Base>:
   176f4:	str	r1, [r0, #172]	; 0xac
   176f8:	bx	lr

000176fc <flatcc_builder_set_identifier@@Base>:
   176fc:	movw	r2, #33480	; 0x82c8
   17700:	cmp	r1, #0
   17704:	movt	r2, #1
   17708:	movne	r2, r1
   1770c:	ldr	r1, [r2]
   17710:	str	r1, [r0, #168]	; 0xa8
   17714:	bx	lr

00017718 <flatcc_builder_get_type@@Base>:
   17718:	ldr	r0, [r0, #32]
   1771c:	cmp	r0, #0
   17720:	ldrhne	r0, [r0, #14]
   17724:	moveq	r0, #0
   17728:	bx	lr

0001772c <flatcc_builder_get_type_at@@Base>:
   1772c:	mov	r2, r0
   17730:	mov	r0, #0
   17734:	cmp	r1, #1
   17738:	blt	1775c <flatcc_builder_get_type_at@@Base+0x30>
   1773c:	ldr	r3, [r2, #156]	; 0x9c
   17740:	cmp	r3, r1
   17744:	bxlt	lr
   17748:	sub	r0, r1, r3
   1774c:	ldr	r1, [r2, #32]
   17750:	add	r0, r0, r0, lsl #3
   17754:	add	r0, r1, r0, lsl #2
   17758:	ldrh	r0, [r0, #14]
   1775c:	bx	lr

00017760 <flatcc_builder_get_direct_buffer@@Base>:
   17760:	ldr	r2, [r0, #184]	; 0xb8
   17764:	cmp	r2, #0
   17768:	beq	1777c <flatcc_builder_get_direct_buffer@@Base+0x1c>
   1776c:	ldr	r2, [r0, #188]	; 0xbc
   17770:	ldr	r3, [r0, #192]	; 0xc0
   17774:	cmp	r2, r3
   17778:	beq	17794 <flatcc_builder_get_direct_buffer@@Base+0x34>
   1777c:	cmp	r1, #0
   17780:	moveq	r0, #0
   17784:	bxeq	lr
   17788:	mov	r0, #0
   1778c:	str	r0, [r1]
   17790:	bx	lr
   17794:	cmp	r1, #0
   17798:	ldrne	r2, [r0, #212]	; 0xd4
   1779c:	strne	r2, [r1]
   177a0:	ldr	r0, [r0, #196]	; 0xc4
   177a4:	bx	lr

000177a8 <flatcc_builder_copy_buffer@@Base>:
   177a8:	push	{fp, lr}
   177ac:	mov	fp, sp
   177b0:	ldr	r3, [r0, #184]	; 0xb8
   177b4:	cmp	r3, #0
   177b8:	beq	177ec <flatcc_builder_copy_buffer@@Base+0x44>
   177bc:	add	r0, r0, #188	; 0xbc
   177c0:	bl	17eec <flatcc_emitter_copy_buffer@@Base>
   177c4:	cmp	r0, #0
   177c8:	popne	{fp, pc}
   177cc:	movw	r0, #33392	; 0x8270
   177d0:	movw	r1, #34010	; 0x84da
   177d4:	movw	r3, #37938	; 0x9432
   177d8:	movw	r2, #1926	; 0x786
   177dc:	movt	r0, #1
   177e0:	movt	r1, #1
   177e4:	movt	r3, #1
   177e8:	bl	124b0 <__assert_fail@plt>
   177ec:	mov	r0, #0
   177f0:	pop	{fp, pc}

000177f4 <flatcc_builder_finalize_buffer@@Base>:
   177f4:	push	{r4, r5, r6, sl, fp, lr}
   177f8:	add	fp, sp, #16
   177fc:	mov	r5, r0
   17800:	ldr	r0, [r0, #136]	; 0x88
   17804:	cmp	r1, #0
   17808:	ldr	r2, [r5, #140]	; 0x8c
   1780c:	sub	r4, r2, r0
   17810:	mov	r0, r4
   17814:	strne	r4, [r1]
   17818:	bl	1242c <malloc@plt>
   1781c:	cmp	r0, #0
   17820:	beq	17870 <flatcc_builder_finalize_buffer@@Base+0x7c>
   17824:	mov	r6, r0
   17828:	ldr	r0, [r5, #184]	; 0xb8
   1782c:	cmp	r0, #0
   17830:	beq	17890 <flatcc_builder_finalize_buffer@@Base+0x9c>
   17834:	add	r0, r5, #188	; 0xbc
   17838:	mov	r1, r6
   1783c:	mov	r2, r4
   17840:	bl	17eec <flatcc_emitter_copy_buffer@@Base>
   17844:	cmp	r0, #0
   17848:	movne	r0, r6
   1784c:	popne	{r4, r5, r6, sl, fp, pc}
   17850:	movw	r0, #33392	; 0x8270
   17854:	movw	r1, #34010	; 0x84da
   17858:	movw	r3, #37938	; 0x9432
   1785c:	movw	r2, #1926	; 0x786
   17860:	movt	r0, #1
   17864:	movt	r1, #1
   17868:	movt	r3, #1
   1786c:	bl	124b0 <__assert_fail@plt>
   17870:	movw	r0, #38528	; 0x9680
   17874:	movw	r1, #34010	; 0x84da
   17878:	movw	r3, #38007	; 0x9477
   1787c:	movw	r2, #1944	; 0x798
   17880:	movt	r0, #1
   17884:	movt	r1, #1
   17888:	movt	r3, #1
   1788c:	bl	124b0 <__assert_fail@plt>
   17890:	movw	r0, #38528	; 0x9680
   17894:	movw	r1, #34010	; 0x84da
   17898:	movw	r3, #38007	; 0x9477
   1789c:	movw	r2, #1948	; 0x79c
   178a0:	movt	r0, #1
   178a4:	movt	r1, #1
   178a8:	movt	r3, #1
   178ac:	bl	124b0 <__assert_fail@plt>

000178b0 <flatcc_builder_finalize_aligned_buffer@@Base>:
   178b0:	push	{r4, r5, r6, r7, fp, lr}
   178b4:	add	fp, sp, #16
   178b8:	sub	sp, sp, #8
   178bc:	mov	r5, r0
   178c0:	mov	r4, r1
   178c4:	ldr	r0, [r0, #136]	; 0x88
   178c8:	ldr	r1, [r5, #140]	; 0x8c
   178cc:	cmp	r4, #0
   178d0:	sub	r0, r1, r0
   178d4:	mov	r1, #0
   178d8:	strne	r0, [r4]
   178dc:	ldrh	r2, [r5, #128]	; 0x80
   178e0:	str	r1, [sp, #4]
   178e4:	add	r0, r0, r2
   178e8:	cmp	r2, #4
   178ec:	mov	r1, r2
   178f0:	rsb	r2, r2, #0
   178f4:	sub	r0, r0, #1
   178f8:	movls	r1, #4
   178fc:	and	r7, r0, r2
   17900:	add	r0, sp, #4
   17904:	mov	r2, r7
   17908:	bl	12474 <posix_memalign@plt>
   1790c:	ldr	r6, [sp, #4]
   17910:	cmp	r0, #0
   17914:	cmpne	r6, #0
   17918:	bne	17954 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   1791c:	cmp	r6, #0
   17920:	beq	1795c <flatcc_builder_finalize_aligned_buffer@@Base+0xac>
   17924:	ldr	r0, [r5, #184]	; 0xb8
   17928:	cmp	r0, #0
   1792c:	beq	17954 <flatcc_builder_finalize_aligned_buffer@@Base+0xa4>
   17930:	add	r0, r5, #188	; 0xbc
   17934:	mov	r1, r6
   17938:	mov	r2, r7
   1793c:	bl	17eec <flatcc_emitter_copy_buffer@@Base>
   17940:	cmp	r0, #0
   17944:	beq	17974 <flatcc_builder_finalize_aligned_buffer@@Base+0xc4>
   17948:	mov	r0, r6
   1794c:	sub	sp, fp, #16
   17950:	pop	{r4, r5, r6, r7, fp, pc}
   17954:	mov	r0, r6
   17958:	bl	123f0 <free@plt>
   1795c:	mov	r6, #0
   17960:	cmp	r4, #0
   17964:	strne	r6, [r4]
   17968:	mov	r0, r6
   1796c:	sub	sp, fp, #16
   17970:	pop	{r4, r5, r6, r7, fp, pc}
   17974:	movw	r0, #33392	; 0x8270
   17978:	movw	r1, #34010	; 0x84da
   1797c:	movw	r3, #37938	; 0x9432
   17980:	movw	r2, #1926	; 0x786
   17984:	movt	r0, #1
   17988:	movt	r1, #1
   1798c:	movt	r3, #1
   17990:	bl	124b0 <__assert_fail@plt>

00017994 <flatcc_builder_aligned_alloc@@Base>:
   17994:	push	{fp, lr}
   17998:	mov	fp, sp
   1799c:	sub	sp, sp, #8
   179a0:	mov	r2, r1
   179a4:	mov	r1, r0
   179a8:	mov	r0, #0
   179ac:	cmp	r1, #4
   179b0:	str	r0, [sp, #4]
   179b4:	add	r0, sp, #4
   179b8:	movls	r1, #4
   179bc:	bl	12474 <posix_memalign@plt>
   179c0:	mov	r1, r0
   179c4:	ldr	r0, [sp, #4]
   179c8:	cmp	r1, #0
   179cc:	cmpne	r0, #0
   179d0:	bne	179dc <flatcc_builder_aligned_alloc@@Base+0x48>
   179d4:	mov	sp, fp
   179d8:	pop	{fp, pc}
   179dc:	bl	123f0 <free@plt>
   179e0:	mov	r0, #0
   179e4:	str	r0, [sp, #4]
   179e8:	mov	sp, fp
   179ec:	pop	{fp, pc}

000179f0 <flatcc_builder_aligned_free@@Base>:
   179f0:	b	123f0 <free@plt>

000179f4 <flatcc_builder_get_emit_context@@Base>:
   179f4:	ldr	r0, [r0, #36]	; 0x24
   179f8:	bx	lr

000179fc <flatcc_emitter_recycle_page@@Base>:
   179fc:	ldr	r3, [r0]
   17a00:	mov	r2, r0
   17a04:	mvn	r0, #0
   17a08:	cmp	r3, r1
   17a0c:	beq	17a4c <flatcc_emitter_recycle_page@@Base+0x50>
   17a10:	ldr	r2, [r2, #4]
   17a14:	cmp	r2, r1
   17a18:	bxeq	lr
   17a1c:	ldr	r0, [r1, #2944]	; 0xb80
   17a20:	ldr	r2, [r1, #2948]	; 0xb84
   17a24:	str	r2, [r0, #2948]	; 0xb84
   17a28:	ldr	r2, [r1, #2948]	; 0xb84
   17a2c:	str	r0, [r2, #2944]	; 0xb80
   17a30:	ldr	r0, [r3, #2948]	; 0xb84
   17a34:	str	r3, [r1, #2944]	; 0xb80
   17a38:	str	r0, [r1, #2948]	; 0xb84
   17a3c:	str	r1, [r0, #2944]	; 0xb80
   17a40:	ldr	r0, [r1, #2944]	; 0xb80
   17a44:	str	r1, [r0, #2948]	; 0xb84
   17a48:	mov	r0, #0
   17a4c:	bx	lr

00017a50 <flatcc_emitter_reset@@Base>:
   17a50:	push	{r4, sl, fp, lr}
   17a54:	add	fp, sp, #8
   17a58:	ldr	r1, [r0]
   17a5c:	cmp	r1, #0
   17a60:	beq	17b18 <flatcc_emitter_reset@@Base+0xc8>
   17a64:	mov	r4, r0
   17a68:	add	r2, r1, #1472	; 0x5c0
   17a6c:	mov	r0, #1472	; 0x5c0
   17a70:	mov	r3, #0
   17a74:	stmib	r4, {r1, r2}
   17a78:	str	r0, [r4, #12]
   17a7c:	str	r2, [r4, #16]
   17a80:	str	r0, [r4, #20]
   17a84:	movw	r0, #64064	; 0xfa40
   17a88:	movt	r0, #65535	; 0xffff
   17a8c:	str	r0, [r1, #2952]	; 0xb88
   17a90:	ldr	r2, [r4, #32]
   17a94:	ldr	r0, [r4, #24]
   17a98:	cmp	r2, #0
   17a9c:	moveq	r2, r0
   17aa0:	streq	r0, [r4, #32]
   17aa4:	str	r3, [r4, #24]
   17aa8:	add	r2, r2, r2, lsl #1
   17aac:	lsr	r2, r2, #2
   17ab0:	add	r0, r2, r0, lsr #2
   17ab4:	str	r0, [r4, #32]
   17ab8:	ldr	r2, [r4, #28]
   17abc:	cmp	r2, r0, lsl #1
   17ac0:	bls	17b18 <flatcc_emitter_reset@@Base+0xc8>
   17ac4:	mov	r2, r1
   17ac8:	ldr	r0, [r2, #2944]!	; 0xb80
   17acc:	cmp	r0, r1
   17ad0:	popeq	{r4, sl, fp, pc}
   17ad4:	ldr	r3, [r0, #2944]	; 0xb80
   17ad8:	str	r3, [r2]
   17adc:	ldr	r2, [r0, #2944]	; 0xb80
   17ae0:	str	r1, [r2, #2948]	; 0xb84
   17ae4:	bl	123f0 <free@plt>
   17ae8:	ldr	r0, [r4, #28]
   17aec:	ldr	r1, [r4, #32]
   17af0:	sub	r0, r0, #2944	; 0xb80
   17af4:	cmp	r0, r1, lsl #1
   17af8:	str	r0, [r4, #28]
   17afc:	bls	17b18 <flatcc_emitter_reset@@Base+0xc8>
   17b00:	ldr	r1, [r4, #4]
   17b04:	ldr	r3, [r4]
   17b08:	mov	r2, r1
   17b0c:	ldr	r0, [r2, #2944]!	; 0xb80
   17b10:	cmp	r0, r3
   17b14:	bne	17ad4 <flatcc_emitter_reset@@Base+0x84>
   17b18:	pop	{r4, sl, fp, pc}

00017b1c <flatcc_emitter_clear@@Base>:
   17b1c:	push	{r4, r5, r6, sl, fp, lr}
   17b20:	add	fp, sp, #16
   17b24:	ldr	r5, [r0]
   17b28:	cmp	r5, #0
   17b2c:	beq	17b84 <flatcc_emitter_clear@@Base+0x68>
   17b30:	mov	r4, r0
   17b34:	ldr	r0, [r5, #2948]	; 0xb84
   17b38:	mov	r6, #0
   17b3c:	str	r6, [r0, #2944]	; 0xb80
   17b40:	ldr	r0, [r5, #2944]	; 0xb80
   17b44:	cmp	r0, #0
   17b48:	beq	17b64 <flatcc_emitter_clear@@Base+0x48>
   17b4c:	mov	r5, r0
   17b50:	ldr	r0, [r0, #2948]	; 0xb84
   17b54:	bl	123f0 <free@plt>
   17b58:	ldr	r0, [r5, #2944]	; 0xb80
   17b5c:	cmp	r0, #0
   17b60:	bne	17b4c <flatcc_emitter_clear@@Base+0x30>
   17b64:	mov	r0, r5
   17b68:	bl	123f0 <free@plt>
   17b6c:	vmov.i32	q8, #0	; 0x00000000
   17b70:	add	r0, r4, #16
   17b74:	vst1.32	{d16-d17}, [r0]
   17b78:	mov	r0, #32
   17b7c:	vst1.32	{d16-d17}, [r4], r0
   17b80:	str	r6, [r4]
   17b84:	pop	{r4, r5, r6, sl, fp, pc}

00017b88 <flatcc_emitter@@Base>:
   17b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b8c:	add	fp, sp, #28
   17b90:	sub	sp, sp, #4
   17b94:	mov	r6, r0
   17b98:	mov	r7, r1
   17b9c:	ldr	r0, [r0, #24]
   17ba0:	ldr	r1, [fp, #8]
   17ba4:	mov	r4, r2
   17ba8:	cmn	r3, #1
   17bac:	mov	r9, r6
   17bb0:	add	r0, r0, r1
   17bb4:	str	r0, [r6, #24]
   17bb8:	ble	17d20 <flatcc_emitter@@Base+0x198>
   17bbc:	ldr	r0, [r9, #20]!
   17bc0:	cmp	r0, r1
   17bc4:	bcs	17e80 <flatcc_emitter@@Base+0x2f8>
   17bc8:	mov	r8, #0
   17bcc:	cmp	r4, #0
   17bd0:	beq	17ee0 <flatcc_emitter@@Base+0x358>
   17bd4:	movw	sl, #64064	; 0xfa40
   17bd8:	movt	sl, #65535	; 0xffff
   17bdc:	ldr	r8, [r7, #4]
   17be0:	cmp	r8, #0
   17be4:	beq	17d04 <flatcc_emitter@@Base+0x17c>
   17be8:	ldr	r9, [r7]
   17bec:	cmp	r8, r0
   17bf0:	mov	r5, r8
   17bf4:	bls	17c00 <flatcc_emitter@@Base+0x78>
   17bf8:	b	17c40 <flatcc_emitter@@Base+0xb8>
   17bfc:	mov	r5, r8
   17c00:	ldr	r0, [r6, #16]
   17c04:	mov	r1, r9
   17c08:	mov	r2, r5
   17c0c:	bl	123fc <memcpy@plt>
   17c10:	ldr	r0, [r6, #16]
   17c14:	ldr	r1, [r6, #20]
   17c18:	add	r9, r9, r5
   17c1c:	subs	r8, r8, r5
   17c20:	add	r2, r0, r5
   17c24:	sub	r0, r1, r5
   17c28:	str	r2, [r6, #16]
   17c2c:	str	r0, [r6, #20]
   17c30:	beq	17d04 <flatcc_emitter@@Base+0x17c>
   17c34:	cmp	r8, r0
   17c38:	mov	r5, r8
   17c3c:	bls	17c00 <flatcc_emitter@@Base+0x78>
   17c40:	mov	r5, r0
   17c44:	cmp	r5, #0
   17c48:	beq	17c94 <flatcc_emitter@@Base+0x10c>
   17c4c:	b	17c00 <flatcc_emitter@@Base+0x78>
   17c50:	ldr	r1, [r6]
   17c54:	str	r1, [r0, #2944]	; 0xb80
   17c58:	str	r5, [r0, #2948]	; 0xb84
   17c5c:	str	r0, [r1, #2948]	; 0xb84
   17c60:	str	r0, [r5, #2944]	; 0xb80
   17c64:	mov	r5, #2944	; 0xb80
   17c68:	str	r0, [r6, #4]
   17c6c:	str	r0, [r6, #16]
   17c70:	str	r5, [r6, #20]
   17c74:	ldr	r1, [r0, #2948]	; 0xb84
   17c78:	ldr	r1, [r1, #2952]	; 0xb88
   17c7c:	add	r1, r1, #2944	; 0xb80
   17c80:	str	r1, [r0, #2952]	; 0xb88
   17c84:	cmp	r8, r5
   17c88:	bls	17bfc <flatcc_emitter@@Base+0x74>
   17c8c:	cmp	r5, #0
   17c90:	bne	17c00 <flatcc_emitter@@Base+0x78>
   17c94:	ldr	r5, [r6, #4]
   17c98:	cmp	r5, #0
   17c9c:	beq	17cb0 <flatcc_emitter@@Base+0x128>
   17ca0:	ldr	r0, [r5, #2944]	; 0xb80
   17ca4:	ldr	r1, [r6]
   17ca8:	cmp	r0, r1
   17cac:	bne	17c64 <flatcc_emitter@@Base+0xdc>
   17cb0:	movw	r0, #2956	; 0xb8c
   17cb4:	bl	1242c <malloc@plt>
   17cb8:	cmp	r0, #0
   17cbc:	beq	17e90 <flatcc_emitter@@Base+0x308>
   17cc0:	ldr	r1, [r6, #28]
   17cc4:	cmp	r5, #0
   17cc8:	add	r1, r1, #2944	; 0xb80
   17ccc:	str	r1, [r6, #28]
   17cd0:	bne	17c50 <flatcc_emitter@@Base+0xc8>
   17cd4:	add	r1, r0, #1472	; 0x5c0
   17cd8:	mov	r5, #1472	; 0x5c0
   17cdc:	str	r0, [r6]
   17ce0:	stmib	r6, {r0, r1, r5}
   17ce4:	str	r1, [r6, #16]
   17ce8:	str	r5, [r6, #20]
   17cec:	str	r0, [r0, #2944]	; 0xb80
   17cf0:	str	r0, [r0, #2948]	; 0xb84
   17cf4:	str	sl, [r0, #2952]	; 0xb88
   17cf8:	cmp	r8, r5
   17cfc:	bhi	17c8c <flatcc_emitter@@Base+0x104>
   17d00:	b	17bfc <flatcc_emitter@@Base+0x74>
   17d04:	subs	r4, r4, #1
   17d08:	add	r7, r7, #8
   17d0c:	bne	17bdc <flatcc_emitter@@Base+0x54>
   17d10:	mov	r8, #0
   17d14:	mov	r0, r8
   17d18:	sub	sp, fp, #28
   17d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d20:	ldr	r0, [r9, #12]!
   17d24:	cmp	r0, r1
   17d28:	bcs	17ea0 <flatcc_emitter@@Base+0x318>
   17d2c:	mov	r8, #0
   17d30:	cmp	r4, #0
   17d34:	beq	17ee0 <flatcc_emitter@@Base+0x358>
   17d38:	add	r0, r7, r4, lsl #3
   17d3c:	ldr	sl, [r0, #-4]
   17d40:	sub	r1, r0, #8
   17d44:	str	r1, [sp]
   17d48:	cmp	sl, #0
   17d4c:	beq	17e70 <flatcc_emitter@@Base+0x2e8>
   17d50:	ldr	r0, [sp]
   17d54:	ldr	r0, [r0]
   17d58:	add	r7, r0, sl
   17d5c:	ldr	r1, [r9]
   17d60:	cmp	sl, r1
   17d64:	bhi	17da4 <flatcc_emitter@@Base+0x21c>
   17d68:	b	17e40 <flatcc_emitter@@Base+0x2b8>
   17d6c:	ldr	r1, [r5, #2952]	; 0xb88
   17d70:	sub	r1, r1, #2944	; 0xb80
   17d74:	str	r1, [r0, #2952]	; 0xb88
   17d78:	mov	r1, #2944	; 0xb80
   17d7c:	add	r2, r0, #2944	; 0xb80
   17d80:	str	r0, [r6]
   17d84:	str	r2, [r6, #8]
   17d88:	str	r1, [r6, #12]
   17d8c:	ldr	r2, [r0, #2944]	; 0xb80
   17d90:	ldr	r2, [r2, #2952]	; 0xb88
   17d94:	sub	r2, r2, #2944	; 0xb80
   17d98:	str	r2, [r0, #2952]	; 0xb88
   17d9c:	cmp	sl, r1
   17da0:	bls	17e40 <flatcc_emitter@@Base+0x2b8>
   17da4:	cmp	r1, #0
   17da8:	mov	r5, r1
   17dac:	bne	17e44 <flatcc_emitter@@Base+0x2bc>
   17db0:	ldr	r5, [r6]
   17db4:	cmp	r5, #0
   17db8:	beq	17dcc <flatcc_emitter@@Base+0x244>
   17dbc:	ldr	r0, [r5, #2948]	; 0xb84
   17dc0:	ldr	r1, [r6, #4]
   17dc4:	cmp	r0, r1
   17dc8:	bne	17d6c <flatcc_emitter@@Base+0x1e4>
   17dcc:	movw	r0, #2956	; 0xb8c
   17dd0:	bl	1242c <malloc@plt>
   17dd4:	cmp	r0, #0
   17dd8:	beq	17e90 <flatcc_emitter@@Base+0x308>
   17ddc:	ldr	r1, [r6, #28]
   17de0:	cmp	r5, #0
   17de4:	add	r1, r1, #2944	; 0xb80
   17de8:	str	r1, [r6, #28]
   17dec:	beq	17e08 <flatcc_emitter@@Base+0x280>
   17df0:	ldr	r1, [r6, #4]
   17df4:	str	r5, [r0, #2944]	; 0xb80
   17df8:	str	r1, [r0, #2948]	; 0xb84
   17dfc:	str	r0, [r5, #2948]	; 0xb84
   17e00:	str	r0, [r1, #2944]	; 0xb80
   17e04:	b	17d78 <flatcc_emitter@@Base+0x1f0>
   17e08:	add	r2, r0, #1472	; 0x5c0
   17e0c:	mov	r1, #1472	; 0x5c0
   17e10:	str	r0, [r6]
   17e14:	stmib	r6, {r0, r2}
   17e18:	str	r1, [r6, #12]
   17e1c:	str	r2, [r6, #16]
   17e20:	movw	r2, #64064	; 0xfa40
   17e24:	str	r1, [r6, #20]
   17e28:	str	r0, [r0, #2944]	; 0xb80
   17e2c:	str	r0, [r0, #2948]	; 0xb84
   17e30:	movt	r2, #65535	; 0xffff
   17e34:	str	r2, [r0, #2952]	; 0xb88
   17e38:	cmp	sl, r1
   17e3c:	bhi	17da4 <flatcc_emitter@@Base+0x21c>
   17e40:	mov	r5, sl
   17e44:	sub	r0, r1, r5
   17e48:	sub	r7, r7, r5
   17e4c:	mov	r2, r5
   17e50:	str	r0, [r6, #12]
   17e54:	mov	r1, r7
   17e58:	ldr	r0, [r6, #8]
   17e5c:	sub	r0, r0, r5
   17e60:	str	r0, [r6, #8]
   17e64:	bl	123fc <memcpy@plt>
   17e68:	subs	sl, sl, r5
   17e6c:	bne	17d5c <flatcc_emitter@@Base+0x1d4>
   17e70:	ldr	r0, [sp]
   17e74:	subs	r4, r4, #1
   17e78:	bne	17d3c <flatcc_emitter@@Base+0x1b4>
   17e7c:	b	17ee0 <flatcc_emitter@@Base+0x358>
   17e80:	ldr	r5, [r6, #16]
   17e84:	add	r2, r5, r1
   17e88:	str	r2, [r6, #16]
   17e8c:	b	17eac <flatcc_emitter@@Base+0x324>
   17e90:	mvn	r8, #0
   17e94:	mov	r0, r8
   17e98:	sub	sp, fp, #28
   17e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ea0:	ldr	r2, [r6, #8]
   17ea4:	sub	r5, r2, r1
   17ea8:	str	r5, [r6, #8]
   17eac:	sub	r0, r0, r1
   17eb0:	mov	r8, #0
   17eb4:	cmp	r4, #0
   17eb8:	str	r0, [r9]
   17ebc:	beq	17ee0 <flatcc_emitter@@Base+0x358>
   17ec0:	ldm	r7, {r1, r2}
   17ec4:	mov	r0, r5
   17ec8:	bl	123fc <memcpy@plt>
   17ecc:	ldr	r0, [r7, #4]
   17ed0:	add	r7, r7, #8
   17ed4:	subs	r4, r4, #1
   17ed8:	add	r5, r5, r0
   17edc:	bne	17ec0 <flatcc_emitter@@Base+0x338>
   17ee0:	mov	r0, r8
   17ee4:	sub	sp, fp, #28
   17ee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017eec <flatcc_emitter_copy_buffer@@Base>:
   17eec:	push	{r4, r5, r6, sl, fp, lr}
   17ef0:	add	fp, sp, #16
   17ef4:	mov	r3, r2
   17ef8:	ldr	r2, [r0, #24]
   17efc:	mov	r5, #0
   17f00:	cmp	r2, r3
   17f04:	bhi	17f8c <flatcc_emitter_copy_buffer@@Base+0xa0>
   17f08:	mov	r4, r0
   17f0c:	ldr	r0, [r0]
   17f10:	cmp	r0, #0
   17f14:	beq	17f8c <flatcc_emitter_copy_buffer@@Base+0xa0>
   17f18:	mov	r6, r1
   17f1c:	ldr	r1, [r4, #4]
   17f20:	cmp	r0, r1
   17f24:	beq	17f94 <flatcc_emitter_copy_buffer@@Base+0xa8>
   17f28:	ldr	r0, [r4, #12]
   17f2c:	ldr	r1, [r4, #8]
   17f30:	rsb	r5, r0, #2944	; 0xb80
   17f34:	mov	r0, r6
   17f38:	mov	r2, r5
   17f3c:	bl	123fc <memcpy@plt>
   17f40:	ldm	r4, {r0, r1}
   17f44:	add	r5, r6, r5
   17f48:	ldr	r6, [r0, #2944]	; 0xb80
   17f4c:	cmp	r6, r1
   17f50:	beq	17f78 <flatcc_emitter_copy_buffer@@Base+0x8c>
   17f54:	mov	r0, r5
   17f58:	mov	r1, r6
   17f5c:	mov	r2, #2944	; 0xb80
   17f60:	bl	123fc <memcpy@plt>
   17f64:	ldr	r6, [r6, #2944]	; 0xb80
   17f68:	ldr	r0, [r4, #4]
   17f6c:	add	r5, r5, #2944	; 0xb80
   17f70:	cmp	r6, r0
   17f74:	bne	17f54 <flatcc_emitter_copy_buffer@@Base+0x68>
   17f78:	ldr	r0, [r4, #20]
   17f7c:	mov	r1, r6
   17f80:	rsb	r2, r0, #2944	; 0xb80
   17f84:	mov	r0, r5
   17f88:	bl	123fc <memcpy@plt>
   17f8c:	mov	r0, r5
   17f90:	pop	{r4, r5, r6, sl, fp, pc}
   17f94:	ldr	r1, [r4, #8]
   17f98:	mov	r0, r6
   17f9c:	bl	123fc <memcpy@plt>
   17fa0:	mov	r0, r6
   17fa4:	pop	{r4, r5, r6, sl, fp, pc}

00017fa8 <__libc_csu_init@@Base>:
   17fa8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17fac:	mov	r7, r0
   17fb0:	ldr	r6, [pc, #72]	; 18000 <__libc_csu_init@@Base+0x58>
   17fb4:	ldr	r5, [pc, #72]	; 18004 <__libc_csu_init@@Base+0x5c>
   17fb8:	add	r6, pc, r6
   17fbc:	add	r5, pc, r5
   17fc0:	sub	r6, r6, r5
   17fc4:	mov	r8, r1
   17fc8:	mov	r9, r2
   17fcc:	bl	123c4 <printf@plt-0x20>
   17fd0:	asrs	r6, r6, #2
   17fd4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17fd8:	mov	r4, #0
   17fdc:	add	r4, r4, #1
   17fe0:	ldr	r3, [r5], #4
   17fe4:	mov	r2, r9
   17fe8:	mov	r1, r8
   17fec:	mov	r0, r7
   17ff0:	blx	r3
   17ff4:	cmp	r6, r4
   17ff8:	bne	17fdc <__libc_csu_init@@Base+0x34>
   17ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18000:	andeq	r1, r1, ip, asr #30
   18004:	andeq	r1, r1, r4, asr #30

00018008 <__libc_csu_fini@@Base>:
   18008:	bx	lr

Disassembly of section .fini:

0001800c <.fini>:
   1800c:	push	{r3, lr}
   18010:	pop	{r3, pc}
