
../repos/prog2/1.1.3:     file format elf32-littlearm


Disassembly of section .init:

000105c0 <.init>:
   105c0:	push	{r3, lr}
   105c4:	bl	10670 <_start@@Base+0x3c>
   105c8:	pop	{r3, pc}

Disassembly of section .plt:

000105cc <printf@plt-0x14>:
   105cc:	push	{lr}		; (str lr, [sp, #-4]!)
   105d0:	ldr	lr, [pc, #4]	; 105dc <printf@plt-0x4>
   105d4:	add	lr, pc, lr
   105d8:	ldr	pc, [lr, #8]!
   105dc:	andeq	r0, r1, r4, lsr #20

000105e0 <printf@plt>:
   105e0:	add	ip, pc, #0, 12
   105e4:	add	ip, ip, #16, 20	; 0x10000
   105e8:	ldr	pc, [ip, #2596]!	; 0xa24

000105ec <fopen@plt>:
   105ec:	add	ip, pc, #0, 12
   105f0:	add	ip, ip, #16, 20	; 0x10000
   105f4:	ldr	pc, [ip, #2588]!	; 0xa1c

000105f8 <__libc_start_main@plt>:
   105f8:	add	ip, pc, #0, 12
   105fc:	add	ip, ip, #16, 20	; 0x10000
   10600:	ldr	pc, [ip, #2580]!	; 0xa14

00010604 <__gmon_start__@plt>:
   10604:	add	ip, pc, #0, 12
   10608:	add	ip, ip, #16, 20	; 0x10000
   1060c:	ldr	pc, [ip, #2572]!	; 0xa0c

00010610 <fclose@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2564]!	; 0xa04

0001061c <abort@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2556]!	; 0x9fc

00010628 <getc@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2548]!	; 0x9f4

Disassembly of section .text:

00010634 <_start@@Base>:
   10634:	mov	fp, #0
   10638:	mov	lr, #0
   1063c:	pop	{r1}		; (ldr r1, [sp], #4)
   10640:	mov	r2, sp
   10644:	push	{r2}		; (str r2, [sp, #-4]!)
   10648:	push	{r0}		; (str r0, [sp, #-4]!)
   1064c:	ldr	ip, [pc, #16]	; 10664 <_start@@Base+0x30>
   10650:	push	{ip}		; (str ip, [sp, #-4]!)
   10654:	ldr	r0, [pc, #12]	; 10668 <_start@@Base+0x34>
   10658:	ldr	r3, [pc, #12]	; 1066c <_start@@Base+0x38>
   1065c:	bl	105f8 <__libc_start_main@plt>
   10660:	bl	1061c <abort@plt>
   10664:	andeq	r0, r1, r8, asr r9
   10668:	andeq	r0, r1, ip, lsr #15
   1066c:	strdeq	r0, [r1], -r8
   10670:	ldr	r3, [pc, #20]	; 1068c <_start@@Base+0x58>
   10674:	ldr	r2, [pc, #20]	; 10690 <_start@@Base+0x5c>
   10678:	add	r3, pc, r3
   1067c:	ldr	r2, [r3, r2]
   10680:	cmp	r2, #0
   10684:	bxeq	lr
   10688:	b	10604 <__gmon_start__@plt>
   1068c:	andeq	r0, r1, r0, lsl #19
   10690:	andeq	r0, r0, r8, lsr #32
   10694:	ldr	r3, [pc, #28]	; 106b8 <_start@@Base+0x84>
   10698:	ldr	r0, [pc, #28]	; 106bc <_start@@Base+0x88>
   1069c:	sub	r3, r3, r0
   106a0:	cmp	r3, #6
   106a4:	bxls	lr
   106a8:	ldr	r3, [pc, #16]	; 106c0 <_start@@Base+0x8c>
   106ac:	cmp	r3, #0
   106b0:	bxeq	lr
   106b4:	bx	r3
   106b8:	andeq	r1, r2, r7, lsr r0
   106bc:	andeq	r1, r2, r4, lsr r0
   106c0:	andeq	r0, r0, r0
   106c4:	ldr	r1, [pc, #36]	; 106f0 <_start@@Base+0xbc>
   106c8:	ldr	r0, [pc, #36]	; 106f4 <_start@@Base+0xc0>
   106cc:	sub	r1, r1, r0
   106d0:	asr	r1, r1, #2
   106d4:	add	r1, r1, r1, lsr #31
   106d8:	asrs	r1, r1, #1
   106dc:	bxeq	lr
   106e0:	ldr	r3, [pc, #16]	; 106f8 <_start@@Base+0xc4>
   106e4:	cmp	r3, #0
   106e8:	bxeq	lr
   106ec:	bx	r3
   106f0:	andeq	r1, r2, r4, lsr r0
   106f4:	andeq	r1, r2, r4, lsr r0
   106f8:	andeq	r0, r0, r0
   106fc:	push	{r4, lr}
   10700:	ldr	r4, [pc, #24]	; 10720 <_start@@Base+0xec>
   10704:	ldrb	r3, [r4]
   10708:	cmp	r3, #0
   1070c:	popne	{r4, pc}
   10710:	bl	10694 <_start@@Base+0x60>
   10714:	mov	r3, #1
   10718:	strb	r3, [r4]
   1071c:	pop	{r4, pc}
   10720:	andeq	r1, r2, r4, lsr r0
   10724:	ldr	r0, [pc, #40]	; 10754 <_start@@Base+0x120>
   10728:	ldr	r3, [r0]
   1072c:	cmp	r3, #0
   10730:	bne	10738 <_start@@Base+0x104>
   10734:	b	106c4 <_start@@Base+0x90>
   10738:	ldr	r3, [pc, #24]	; 10758 <_start@@Base+0x124>
   1073c:	cmp	r3, #0
   10740:	beq	10734 <_start@@Base+0x100>
   10744:	push	{r4, lr}
   10748:	blx	r3
   1074c:	pop	{r4, lr}
   10750:	b	106c4 <_start@@Base+0x90>
   10754:	andeq	r0, r2, r4, lsl pc
   10758:	andeq	r0, r0, r0

0001075c <in_array@@Base>:
   1075c:	cmp	r2, #0
   10760:	blt	1079c <in_array@@Base+0x40>
   10764:	ldr	r3, [r1]
   10768:	cmp	r0, r3
   1076c:	beq	107a4 <in_array@@Base+0x48>
   10770:	mov	r3, #0
   10774:	add	r3, r3, #1
   10778:	cmp	r2, r3
   1077c:	blt	10794 <in_array@@Base+0x38>
   10780:	ldr	ip, [r1, #4]!
   10784:	cmp	ip, r0
   10788:	bne	10774 <in_array@@Base+0x18>
   1078c:	mov	r0, #1
   10790:	bx	lr
   10794:	mov	r0, #0
   10798:	bx	lr
   1079c:	mov	r0, #0
   107a0:	bx	lr
   107a4:	mov	r0, #1
   107a8:	bx	lr

000107ac <main@@Base>:
   107ac:	push	{r4, r5, r6, lr}
   107b0:	sub	sp, sp, #40	; 0x28
   107b4:	mov	r3, #131	; 0x83
   107b8:	str	r3, [sp, #32]
   107bc:	mov	r3, #163	; 0xa3
   107c0:	str	r3, [sp, #36]	; 0x24
   107c4:	mov	r3, #149	; 0x95
   107c8:	str	r3, [sp, #24]
   107cc:	mov	r3, #181	; 0xb5
   107d0:	str	r3, [sp, #28]
   107d4:	mov	r3, #135	; 0x87
   107d8:	str	r3, [sp, #16]
   107dc:	mov	r3, #167	; 0xa7
   107e0:	str	r3, [sp, #20]
   107e4:	ldr	r1, [pc, #252]	; 108e8 <main@@Base+0x13c>
   107e8:	ldr	r0, [pc, #252]	; 108ec <main@@Base+0x140>
   107ec:	bl	105ec <fopen@plt>
   107f0:	mov	r4, r0
   107f4:	mov	r3, #0
   107f8:	str	r3, [sp, #4]
   107fc:	str	r3, [sp, #8]
   10800:	str	r3, [sp, #12]
   10804:	mov	r5, #2
   10808:	mov	r0, r4
   1080c:	bl	10628 <getc@plt>
   10810:	cmp	r0, #195	; 0xc3
   10814:	beq	10868 <main@@Base+0xbc>
   10818:	cmn	r0, #1
   1081c:	bne	10808 <main@@Base+0x5c>
   10820:	mov	r0, r4
   10824:	bl	10610 <fclose@plt>
   10828:	ldr	r4, [pc, #192]	; 108f0 <main@@Base+0x144>
   1082c:	ldr	r2, [sp, #4]
   10830:	mov	r1, #65	; 0x41
   10834:	mov	r0, r4
   10838:	bl	105e0 <printf@plt>
   1083c:	ldr	r2, [sp, #8]
   10840:	mov	r1, #79	; 0x4f
   10844:	mov	r0, r4
   10848:	bl	105e0 <printf@plt>
   1084c:	ldr	r2, [sp, #12]
   10850:	mov	r1, #67	; 0x43
   10854:	ldr	r0, [pc, #152]	; 108f4 <main@@Base+0x148>
   10858:	bl	105e0 <printf@plt>
   1085c:	mov	r0, #0
   10860:	add	sp, sp, #40	; 0x28
   10864:	pop	{r4, r5, r6, pc}
   10868:	mov	r0, r4
   1086c:	bl	10628 <getc@plt>
   10870:	mov	r6, r0
   10874:	mov	r2, r5
   10878:	add	r1, sp, #32
   1087c:	bl	1075c <in_array@@Base>
   10880:	cmp	r0, #0
   10884:	beq	108a0 <main@@Base+0xf4>
   10888:	ldr	r3, [sp, #4]
   1088c:	add	r3, r3, #1
   10890:	str	r3, [sp, #4]
   10894:	cmn	r6, #1
   10898:	bne	10808 <main@@Base+0x5c>
   1089c:	b	10820 <main@@Base+0x74>
   108a0:	mov	r2, r5
   108a4:	add	r1, sp, #24
   108a8:	mov	r0, r6
   108ac:	bl	1075c <in_array@@Base>
   108b0:	cmp	r0, #0
   108b4:	ldrne	r3, [sp, #8]
   108b8:	addne	r3, r3, #1
   108bc:	strne	r3, [sp, #8]
   108c0:	bne	10894 <main@@Base+0xe8>
   108c4:	mov	r2, r5
   108c8:	add	r1, sp, #16
   108cc:	mov	r0, r6
   108d0:	bl	1075c <in_array@@Base>
   108d4:	cmp	r0, #0
   108d8:	ldrne	r3, [sp, #12]
   108dc:	addne	r3, r3, #1
   108e0:	strne	r3, [sp, #12]
   108e4:	b	10894 <main@@Base+0xe8>
   108e8:	andeq	r0, r1, r8, ror #18
   108ec:	andeq	r0, r1, ip, ror #18
   108f0:	andeq	r0, r1, r8, lsl #19
   108f4:	andeq	r0, r1, r0, lsr #19

000108f8 <__libc_csu_init@@Base>:
   108f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   108fc:	mov	r7, r0
   10900:	ldr	r6, [pc, #72]	; 10950 <__libc_csu_init@@Base+0x58>
   10904:	ldr	r5, [pc, #72]	; 10954 <__libc_csu_init@@Base+0x5c>
   10908:	add	r6, pc, r6
   1090c:	add	r5, pc, r5
   10910:	sub	r6, r6, r5
   10914:	mov	r8, r1
   10918:	mov	r9, r2
   1091c:	bl	105c0 <printf@plt-0x20>
   10920:	asrs	r6, r6, #2
   10924:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10928:	mov	r4, #0
   1092c:	add	r4, r4, #1
   10930:	ldr	r3, [r5], #4
   10934:	mov	r2, r9
   10938:	mov	r1, r8
   1093c:	mov	r0, r7
   10940:	blx	r3
   10944:	cmp	r6, r4
   10948:	bne	1092c <__libc_csu_init@@Base+0x34>
   1094c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10950:	andeq	r0, r1, r0, lsl #12
   10954:	strdeq	r0, [r1], -r8

00010958 <__libc_csu_fini@@Base>:
   10958:	bx	lr

Disassembly of section .fini:

0001095c <.fini>:
   1095c:	push	{r3, lr}
   10960:	pop	{r3, pc}
