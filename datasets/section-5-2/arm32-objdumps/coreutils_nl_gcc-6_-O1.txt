
../repos/coreutils/src/nl:     file format elf32-littlearm


Disassembly of section .init:

00010f94 <.init>:
   10f94:	push	{r3, lr}
   10f98:	bl	11320 <__assert_fail@plt+0x48>
   10f9c:	pop	{r3, pc}

Disassembly of section .plt:

00010fa0 <pthread_mutex_unlock@plt-0x14>:
   10fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   10fa4:	ldr	lr, [pc, #4]	; 10fb0 <pthread_mutex_unlock@plt-0x4>
   10fa8:	add	lr, pc, lr
   10fac:	ldr	pc, [lr, #8]!
   10fb0:	andeq	r4, r2, r0, asr r0

00010fb4 <pthread_mutex_unlock@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #36, 20	; 0x24000
   10fbc:	ldr	pc, [ip, #80]!	; 0x50

00010fc0 <calloc@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #36, 20	; 0x24000
   10fc8:	ldr	pc, [ip, #72]!	; 0x48

00010fcc <fputs_unlocked@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #36, 20	; 0x24000
   10fd4:	ldr	pc, [ip, #64]!	; 0x40

00010fd8 <wctype@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #36, 20	; 0x24000
   10fe0:	ldr	pc, [ip, #56]!	; 0x38

00010fe4 <raise@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #36, 20	; 0x24000
   10fec:	ldr	pc, [ip, #48]!	; 0x30

00010ff0 <wcrtomb@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #36, 20	; 0x24000
   10ff8:	ldr	pc, [ip, #40]!	; 0x28

00010ffc <iswctype@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #36, 20	; 0x24000
   11004:	ldr	pc, [ip, #32]!

00011008 <strcmp@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #36, 20	; 0x24000
   11010:	ldr	pc, [ip, #24]!

00011014 <posix_fadvise64@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #36, 20	; 0x24000
   1101c:	ldr	pc, [ip, #16]!

00011020 <pthread_mutex_destroy@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #36, 20	; 0x24000
   11028:	ldr	pc, [ip, #8]!

0001102c <fflush@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #36, 20	; 0x24000
   11034:	ldr	pc, [ip, #0]!

00011038 <memmove@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #143360	; 0x23000
   11040:	ldr	pc, [ip, #4088]!	; 0xff8

00011044 <free@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #143360	; 0x23000
   1104c:	ldr	pc, [ip, #4080]!	; 0xff0

00011050 <pthread_mutex_lock@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #143360	; 0x23000
   11058:	ldr	pc, [ip, #4072]!	; 0xfe8

0001105c <_exit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #143360	; 0x23000
   11064:	ldr	pc, [ip, #4064]!	; 0xfe0

00011068 <memcpy@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #143360	; 0x23000
   11070:	ldr	pc, [ip, #4056]!	; 0xfd8

00011074 <pthread_mutex_init@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #143360	; 0x23000
   1107c:	ldr	pc, [ip, #4048]!	; 0xfd0

00011080 <towlower@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #143360	; 0x23000
   11088:	ldr	pc, [ip, #4040]!	; 0xfc8

0001108c <mbsinit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #143360	; 0x23000
   11094:	ldr	pc, [ip, #4032]!	; 0xfc0

00011098 <fwrite_unlocked@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #143360	; 0x23000
   110a0:	ldr	pc, [ip, #4024]!	; 0xfb8

000110a4 <memcmp@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #143360	; 0x23000
   110ac:	ldr	pc, [ip, #4016]!	; 0xfb0

000110b0 <stpcpy@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #143360	; 0x23000
   110b8:	ldr	pc, [ip, #4008]!	; 0xfa8

000110bc <fputc_unlocked@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #143360	; 0x23000
   110c4:	ldr	pc, [ip, #4000]!	; 0xfa0

000110c8 <dcgettext@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #143360	; 0x23000
   110d0:	ldr	pc, [ip, #3992]!	; 0xf98

000110d4 <realloc@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #143360	; 0x23000
   110dc:	ldr	pc, [ip, #3984]!	; 0xf90

000110e0 <textdomain@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #143360	; 0x23000
   110e8:	ldr	pc, [ip, #3976]!	; 0xf88

000110ec <iswprint@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #143360	; 0x23000
   110f4:	ldr	pc, [ip, #3968]!	; 0xf80

000110f8 <fwrite@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #143360	; 0x23000
   11100:	ldr	pc, [ip, #3960]!	; 0xf78

00011104 <lseek64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #143360	; 0x23000
   1110c:	ldr	pc, [ip, #3952]!	; 0xf70

00011110 <__ctype_get_mb_cur_max@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #143360	; 0x23000
   11118:	ldr	pc, [ip, #3944]!	; 0xf68

0001111c <strcpy@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #143360	; 0x23000
   11124:	ldr	pc, [ip, #3936]!	; 0xf60

00011128 <__fpending@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #143360	; 0x23000
   11130:	ldr	pc, [ip, #3928]!	; 0xf58

00011134 <mbrtowc@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #143360	; 0x23000
   1113c:	ldr	pc, [ip, #3920]!	; 0xf50

00011140 <error@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #143360	; 0x23000
   11148:	ldr	pc, [ip, #3912]!	; 0xf48

0001114c <malloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #143360	; 0x23000
   11154:	ldr	pc, [ip, #3904]!	; 0xf40

00011158 <__libc_start_main@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #143360	; 0x23000
   11160:	ldr	pc, [ip, #3896]!	; 0xf38

00011164 <__freading@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #143360	; 0x23000
   1116c:	ldr	pc, [ip, #3888]!	; 0xf30

00011170 <__ctype_tolower_loc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #143360	; 0x23000
   11178:	ldr	pc, [ip, #3880]!	; 0xf28

0001117c <__ctype_toupper_loc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #143360	; 0x23000
   11184:	ldr	pc, [ip, #3872]!	; 0xf20

00011188 <__gmon_start__@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #143360	; 0x23000
   11190:	ldr	pc, [ip, #3864]!	; 0xf18

00011194 <getopt_long@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #143360	; 0x23000
   1119c:	ldr	pc, [ip, #3856]!	; 0xf10

000111a0 <__ctype_b_loc@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #143360	; 0x23000
   111a8:	ldr	pc, [ip, #3848]!	; 0xf08

000111ac <exit@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #143360	; 0x23000
   111b4:	ldr	pc, [ip, #3840]!	; 0xf00

000111b8 <strlen@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #143360	; 0x23000
   111c0:	ldr	pc, [ip, #3832]!	; 0xef8

000111c4 <strchr@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #143360	; 0x23000
   111cc:	ldr	pc, [ip, #3824]!	; 0xef0

000111d0 <__errno_location@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #143360	; 0x23000
   111d8:	ldr	pc, [ip, #3816]!	; 0xee8

000111dc <iswalnum@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #143360	; 0x23000
   111e4:	ldr	pc, [ip, #3808]!	; 0xee0

000111e8 <__cxa_atexit@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #143360	; 0x23000
   111f0:	ldr	pc, [ip, #3800]!	; 0xed8

000111f4 <memset@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #143360	; 0x23000
   111fc:	ldr	pc, [ip, #3792]!	; 0xed0

00011200 <btowc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #143360	; 0x23000
   11208:	ldr	pc, [ip, #3784]!	; 0xec8

0001120c <__printf_chk@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #143360	; 0x23000
   11214:	ldr	pc, [ip, #3776]!	; 0xec0

00011218 <fileno@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #143360	; 0x23000
   11220:	ldr	pc, [ip, #3768]!	; 0xeb8

00011224 <__fprintf_chk@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #143360	; 0x23000
   1122c:	ldr	pc, [ip, #3760]!	; 0xeb0

00011230 <fclose@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #143360	; 0x23000
   11238:	ldr	pc, [ip, #3752]!	; 0xea8

0001123c <fseeko64@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #143360	; 0x23000
   11244:	ldr	pc, [ip, #3744]!	; 0xea0

00011248 <__uflow@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #143360	; 0x23000
   11250:	ldr	pc, [ip, #3736]!	; 0xe98

00011254 <__overflow@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #143360	; 0x23000
   1125c:	ldr	pc, [ip, #3728]!	; 0xe90

00011260 <setlocale@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #143360	; 0x23000
   11268:	ldr	pc, [ip, #3720]!	; 0xe88

0001126c <strrchr@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #143360	; 0x23000
   11274:	ldr	pc, [ip, #3712]!	; 0xe80

00011278 <nl_langinfo@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #143360	; 0x23000
   11280:	ldr	pc, [ip, #3704]!	; 0xe78

00011284 <clearerr_unlocked@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #143360	; 0x23000
   1128c:	ldr	pc, [ip, #3696]!	; 0xe70

00011290 <__strtoll_internal@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #143360	; 0x23000
   11298:	ldr	pc, [ip, #3688]!	; 0xe68

0001129c <fopen64@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #143360	; 0x23000
   112a4:	ldr	pc, [ip, #3680]!	; 0xe60

000112a8 <bindtextdomain@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #143360	; 0x23000
   112b0:	ldr	pc, [ip, #3672]!	; 0xe58

000112b4 <towupper@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #143360	; 0x23000
   112bc:	ldr	pc, [ip, #3664]!	; 0xe50

000112c0 <strncmp@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #143360	; 0x23000
   112c8:	ldr	pc, [ip, #3656]!	; 0xe48

000112cc <abort@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #143360	; 0x23000
   112d4:	ldr	pc, [ip, #3648]!	; 0xe40

000112d8 <__assert_fail@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #143360	; 0x23000
   112e0:	ldr	pc, [ip, #3640]!	; 0xe38

Disassembly of section .text:

000112e4 <.text>:
   112e4:	mov	fp, #0
   112e8:	mov	lr, #0
   112ec:	pop	{r1}		; (ldr r1, [sp], #4)
   112f0:	mov	r2, sp
   112f4:	push	{r2}		; (str r2, [sp, #-4]!)
   112f8:	push	{r0}		; (str r0, [sp, #-4]!)
   112fc:	ldr	ip, [pc, #16]	; 11314 <__assert_fail@plt+0x3c>
   11300:	push	{ip}		; (str ip, [sp, #-4]!)
   11304:	ldr	r0, [pc, #12]	; 11318 <__assert_fail@plt+0x40>
   11308:	ldr	r3, [pc, #12]	; 1131c <__assert_fail@plt+0x44>
   1130c:	bl	11158 <__libc_start_main@plt>
   11310:	bl	112cc <abort@plt>
   11314:	strdeq	r3, [r2], -r0
   11318:	andeq	r1, r1, r4, asr #29
   1131c:	muleq	r2, r0, r7
   11320:	ldr	r3, [pc, #20]	; 1133c <__assert_fail@plt+0x64>
   11324:	ldr	r2, [pc, #20]	; 11340 <__assert_fail@plt+0x68>
   11328:	add	r3, pc, r3
   1132c:	ldr	r2, [r3, r2]
   11330:	cmp	r2, #0
   11334:	bxeq	lr
   11338:	b	11188 <__gmon_start__@plt>
   1133c:	ldrdeq	r3, [r2], -r0
   11340:	andeq	r0, r0, ip, lsl r1
   11344:	ldr	r3, [pc, #28]	; 11368 <__assert_fail@plt+0x90>
   11348:	ldr	r0, [pc, #28]	; 1136c <__assert_fail@plt+0x94>
   1134c:	sub	r3, r3, r0
   11350:	cmp	r3, #6
   11354:	bxls	lr
   11358:	ldr	r3, [pc, #16]	; 11370 <__assert_fail@plt+0x98>
   1135c:	cmp	r3, #0
   11360:	bxeq	lr
   11364:	bx	r3
   11368:			; <UNDEFINED> instruction: 0x000351bb
   1136c:			; <UNDEFINED> instruction: 0x000351b8
   11370:	andeq	r0, r0, r0
   11374:	ldr	r1, [pc, #36]	; 113a0 <__assert_fail@plt+0xc8>
   11378:	ldr	r0, [pc, #36]	; 113a4 <__assert_fail@plt+0xcc>
   1137c:	sub	r1, r1, r0
   11380:	asr	r1, r1, #2
   11384:	add	r1, r1, r1, lsr #31
   11388:	asrs	r1, r1, #1
   1138c:	bxeq	lr
   11390:	ldr	r3, [pc, #16]	; 113a8 <__assert_fail@plt+0xd0>
   11394:	cmp	r3, #0
   11398:	bxeq	lr
   1139c:	bx	r3
   113a0:			; <UNDEFINED> instruction: 0x000351b8
   113a4:			; <UNDEFINED> instruction: 0x000351b8
   113a8:	andeq	r0, r0, r0
   113ac:	push	{r4, lr}
   113b0:	ldr	r4, [pc, #24]	; 113d0 <__assert_fail@plt+0xf8>
   113b4:	ldrb	r3, [r4]
   113b8:	cmp	r3, #0
   113bc:	popne	{r4, pc}
   113c0:	bl	11344 <__assert_fail@plt+0x6c>
   113c4:	mov	r3, #1
   113c8:	strb	r3, [r4]
   113cc:	pop	{r4, pc}
   113d0:	ldrdeq	r5, [r3], -ip
   113d4:	ldr	r0, [pc, #40]	; 11404 <__assert_fail@plt+0x12c>
   113d8:	ldr	r3, [r0]
   113dc:	cmp	r3, #0
   113e0:	bne	113e8 <__assert_fail@plt+0x110>
   113e4:	b	11374 <__assert_fail@plt+0x9c>
   113e8:	ldr	r3, [pc, #24]	; 11408 <__assert_fail@plt+0x130>
   113ec:	cmp	r3, #0
   113f0:	beq	113e4 <__assert_fail@plt+0x10c>
   113f4:	push	{r4, lr}
   113f8:	blx	r3
   113fc:	pop	{r4, lr}
   11400:	b	11374 <__assert_fail@plt+0x9c>
   11404:	andeq	r4, r3, r4, lsl pc
   11408:	andeq	r0, r0, r0
   1140c:	ldr	r3, [pc, #36]	; 11438 <__assert_fail@plt+0x160>
   11410:	ldrb	r3, [r3]
   11414:	cmp	r3, #0
   11418:	bxeq	lr
   1141c:	ldr	r3, [pc, #24]	; 1143c <__assert_fail@plt+0x164>
   11420:	ldr	r2, [pc, #16]	; 11438 <__assert_fail@plt+0x160>
   11424:	ldrd	r0, [r2, #8]
   11428:	strd	r0, [r3]
   1142c:	mov	r2, #0
   11430:	strb	r2, [r3, #8]
   11434:	bx	lr
   11438:	andeq	r5, r3, r8, lsr #2
   1143c:	andeq	r5, r3, r0, ror #3
   11440:	push	{r4, r5, r6, r7, r8, r9, lr}
   11444:	sub	sp, sp, #20
   11448:	ldr	r3, [pc, #296]	; 11578 <__assert_fail@plt+0x2a0>
   1144c:	ldrb	r3, [r3, #8]
   11450:	cmp	r3, #0
   11454:	bne	114f0 <__assert_fail@plt+0x218>
   11458:	ldr	r4, [pc, #284]	; 1157c <__assert_fail@plt+0x2a4>
   1145c:	ldr	r3, [r4, #24]
   11460:	str	r3, [sp, #8]
   11464:	ldr	r3, [pc, #268]	; 11578 <__assert_fail@plt+0x2a0>
   11468:	ldrd	r2, [r3]
   1146c:	strd	r2, [sp]
   11470:	ldr	r2, [r4, #16]
   11474:	ldr	r1, [r4, #20]
   11478:	mov	r0, #1
   1147c:	bl	1120c <__printf_chk@plt>
   11480:	ldrd	r6, [r4, #32]
   11484:	cmp	r6, #0
   11488:	sbcs	r3, r7, #0
   1148c:	blt	11510 <__assert_fail@plt+0x238>
   11490:	ldr	r1, [pc, #224]	; 11578 <__assert_fail@plt+0x2a0>
   11494:	ldrd	r8, [r1]
   11498:	cmp	r8, #0
   1149c:	sbcs	r3, r9, #0
   114a0:	blt	1153c <__assert_fail@plt+0x264>
   114a4:	mvn	r4, #0
   114a8:	mvn	r5, #-2147483648	; 0x80000000
   114ac:	subs	r2, r4, r6
   114b0:	sbc	r3, r5, r7
   114b4:	cmp	r2, r8
   114b8:	sbcs	r3, r3, r9
   114bc:	movlt	r1, #1
   114c0:	movge	r1, #0
   114c4:	cmp	r1, #0
   114c8:	beq	11560 <__assert_fail@plt+0x288>
   114cc:	ldr	r1, [pc, #164]	; 11578 <__assert_fail@plt+0x2a0>
   114d0:	ldrd	r4, [r1]
   114d4:	adds	r2, r6, r4
   114d8:	adc	r3, r7, r5
   114dc:	strd	r2, [r1]
   114e0:	mov	r3, #1
   114e4:	strb	r3, [r1, #8]
   114e8:	add	sp, sp, #20
   114ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   114f0:	mov	r2, #5
   114f4:	ldr	r1, [pc, #132]	; 11580 <__assert_fail@plt+0x2a8>
   114f8:	mov	r0, #0
   114fc:	bl	110c8 <dcgettext@plt>
   11500:	mov	r2, r0
   11504:	mov	r1, #0
   11508:	mov	r0, #1
   1150c:	bl	11140 <error@plt>
   11510:	mov	r0, #0
   11514:	mov	r1, #-2147483648	; 0x80000000
   11518:	subs	r2, r0, r6
   1151c:	sbc	r3, r1, r7
   11520:	ldr	ip, [pc, #80]	; 11578 <__assert_fail@plt+0x2a0>
   11524:	ldrd	r4, [ip]
   11528:	cmp	r4, r2
   1152c:	sbcs	r3, r5, r3
   11530:	movlt	r1, #1
   11534:	movge	r1, #0
   11538:	b	114c4 <__assert_fail@plt+0x1ec>
   1153c:	mov	r4, #0
   11540:	mov	r5, #-2147483648	; 0x80000000
   11544:	subs	r0, r4, r8
   11548:	sbc	r1, r5, r9
   1154c:	cmp	r6, r0
   11550:	sbcs	r3, r7, r1
   11554:	movlt	r1, #1
   11558:	movge	r1, #0
   1155c:	b	114c4 <__assert_fail@plt+0x1ec>
   11560:	ldr	ip, [pc, #16]	; 11578 <__assert_fail@plt+0x2a0>
   11564:	ldrd	r0, [ip]
   11568:	adds	r2, r6, r0
   1156c:	adc	r3, r7, r1
   11570:	strd	r2, [ip]
   11574:	b	114e8 <__assert_fail@plt+0x210>
   11578:	andeq	r5, r3, r0, ror #3
   1157c:	andeq	r5, r3, r8, lsr #2
   11580:	andeq	r3, r2, r0, asr r9
   11584:	ldr	r3, [pc, #240]	; 1167c <__assert_fail@plt+0x3a4>
   11588:	ldr	ip, [r3]
   1158c:	ldrb	r3, [ip]
   11590:	sub	r3, r3, #97	; 0x61
   11594:	cmp	r3, #19
   11598:	ldrls	pc, [pc, r3, lsl #2]
   1159c:	b	11674 <__assert_fail@plt+0x39c>
   115a0:	strdeq	r1, [r1], -r0
   115a4:	andeq	r1, r1, r4, ror r6
   115a8:	andeq	r1, r1, r4, ror r6
   115ac:	andeq	r1, r1, r4, ror r6
   115b0:	andeq	r1, r1, r4, ror r6
   115b4:	andeq	r1, r1, r4, ror r6
   115b8:	andeq	r1, r1, r4, ror r6
   115bc:	andeq	r1, r1, r4, ror r6
   115c0:	andeq	r1, r1, r4, ror r6
   115c4:	andeq	r1, r1, r4, ror r6
   115c8:	andeq	r1, r1, r4, ror r6
   115cc:	andeq	r1, r1, r4, ror r6
   115d0:	andeq	r1, r1, r4, ror r6
   115d4:	strdeq	r1, [r1], -r0
   115d8:	andeq	r1, r1, r4, ror r6
   115dc:	strdeq	r1, [r1], -ip
   115e0:	andeq	r1, r1, r4, ror r6
   115e4:	andeq	r1, r1, r4, ror r6
   115e8:	andeq	r1, r1, r4, ror r6
   115ec:	strdeq	r1, [r1], -r0
   115f0:	str	ip, [r0]
   115f4:	mov	r0, #1
   115f8:	bx	lr
   115fc:	push	{r4, r5, r6, lr}
   11600:	mov	r4, r1
   11604:	ldr	r1, [pc, #112]	; 1167c <__assert_fail@plt+0x3a4>
   11608:	add	r3, ip, #1
   1160c:	str	r3, [r1]
   11610:	str	ip, [r0]
   11614:	mov	r3, #0
   11618:	str	r3, [r4]
   1161c:	str	r3, [r4, #4]
   11620:	str	r2, [r4, #16]
   11624:	str	r3, [r4, #20]
   11628:	ldr	r2, [pc, #80]	; 11680 <__assert_fail@plt+0x3a8>
   1162c:	ldr	r3, [pc, #80]	; 11684 <__assert_fail@plt+0x3ac>
   11630:	str	r2, [r3]
   11634:	ldr	r5, [r1]
   11638:	mov	r0, r5
   1163c:	bl	111b8 <strlen@plt>
   11640:	mov	r2, r4
   11644:	mov	r1, r0
   11648:	mov	r0, r5
   1164c:	bl	20fcc <__assert_fail@plt+0xfcf4>
   11650:	cmp	r0, #0
   11654:	bne	11660 <__assert_fail@plt+0x388>
   11658:	mov	r0, #1
   1165c:	pop	{r4, r5, r6, pc}
   11660:	mov	r3, r0
   11664:	ldr	r2, [pc, #28]	; 11688 <__assert_fail@plt+0x3b0>
   11668:	mov	r1, #0
   1166c:	mov	r0, #1
   11670:	bl	11140 <error@plt>
   11674:	mov	r0, #0
   11678:	bx	lr
   1167c:	ldrdeq	r5, [r3], -r8
   11680:	andeq	r0, r0, r6, asr #5
   11684:	andeq	r5, r3, r0, asr #13
   11688:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1168c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11690:	sub	sp, sp, #20
   11694:	str	r0, [sp, #12]
   11698:	ldr	r1, [pc, #1044]	; 11ab4 <__assert_fail@plt+0x7dc>
   1169c:	bl	11008 <strcmp@plt>
   116a0:	cmp	r0, #0
   116a4:	bne	116d8 <__assert_fail@plt+0x400>
   116a8:	mov	r2, #1
   116ac:	ldr	r3, [pc, #1028]	; 11ab8 <__assert_fail@plt+0x7e0>
   116b0:	strb	r2, [r3, #9]
   116b4:	ldr	r3, [pc, #1024]	; 11abc <__assert_fail@plt+0x7e4>
   116b8:	ldr	r8, [r3]
   116bc:	mov	r1, #2
   116c0:	mov	r0, r8
   116c4:	bl	1280c <__assert_fail@plt+0x1534>
   116c8:	ldr	r4, [pc, #1000]	; 11ab8 <__assert_fail@plt+0x7e0>
   116cc:	ldr	fp, [pc, #1004]	; 11ac0 <__assert_fail@plt+0x7e8>
   116d0:	ldr	sl, [pc, #1004]	; 11ac4 <__assert_fail@plt+0x7ec>
   116d4:	b	118f4 <__assert_fail@plt+0x61c>
   116d8:	ldr	r1, [pc, #1000]	; 11ac8 <__assert_fail@plt+0x7f0>
   116dc:	ldr	r0, [sp, #12]
   116e0:	bl	1129c <fopen64@plt>
   116e4:	subs	r8, r0, #0
   116e8:	bne	116bc <__assert_fail@plt+0x3e4>
   116ec:	bl	111d0 <__errno_location@plt>
   116f0:	ldr	r4, [r0]
   116f4:	ldr	r2, [sp, #12]
   116f8:	mov	r1, #3
   116fc:	mov	r0, #0
   11700:	bl	14520 <__assert_fail@plt+0x3248>
   11704:	mov	r3, r0
   11708:	ldr	r2, [pc, #956]	; 11acc <__assert_fail@plt+0x7f4>
   1170c:	mov	r1, r4
   11710:	mov	r0, #0
   11714:	bl	11140 <error@plt>
   11718:	mov	r0, #0
   1171c:	b	11a58 <__assert_fail@plt+0x780>
   11720:	ldr	r3, [r4, #28]
   11724:	cmp	r5, r3
   11728:	beq	1179c <__assert_fail@plt+0x4c4>
   1172c:	ldr	r3, [r4, #36]	; 0x24
   11730:	cmp	r5, r3
   11734:	beq	117f8 <__assert_fail@plt+0x520>
   11738:	cmp	r5, r7
   1173c:	bne	11940 <__assert_fail@plt+0x668>
   11740:	mov	r2, r7
   11744:	ldr	r1, [r4, #44]	; 0x2c
   11748:	mov	r0, r9
   1174c:	bl	110a4 <memcmp@plt>
   11750:	cmp	r0, #0
   11754:	bne	11940 <__assert_fail@plt+0x668>
   11758:	ldr	r3, [sl, #60]	; 0x3c
   1175c:	str	r3, [r4, #64]	; 0x40
   11760:	add	r3, r4, #100	; 0x64
   11764:	str	r3, [r4, #60]	; 0x3c
   11768:	bl	1140c <__assert_fail@plt+0x134>
   1176c:	ldr	r0, [fp]
   11770:	ldr	r3, [r0, #20]
   11774:	ldr	r2, [r0, #24]
   11778:	cmp	r3, r2
   1177c:	addcc	r2, r3, #1
   11780:	strcc	r2, [r0, #20]
   11784:	movcc	r2, #10
   11788:	strbcc	r2, [r3]
   1178c:	bcc	118f4 <__assert_fail@plt+0x61c>
   11790:	mov	r1, #10
   11794:	bl	11254 <__overflow@plt>
   11798:	b	118f4 <__assert_fail@plt+0x61c>
   1179c:	mov	r2, r5
   117a0:	ldr	r1, [r4, #32]
   117a4:	mov	r0, r9
   117a8:	bl	110a4 <memcmp@plt>
   117ac:	cmp	r0, #0
   117b0:	bne	1172c <__assert_fail@plt+0x454>
   117b4:	ldr	r3, [sl, #64]	; 0x40
   117b8:	str	r3, [r4, #64]	; 0x40
   117bc:	add	r3, r4, #132	; 0x84
   117c0:	str	r3, [r4, #60]	; 0x3c
   117c4:	bl	1140c <__assert_fail@plt+0x134>
   117c8:	ldr	r0, [fp]
   117cc:	ldr	r3, [r0, #20]
   117d0:	ldr	r2, [r0, #24]
   117d4:	cmp	r3, r2
   117d8:	addcc	r2, r3, #1
   117dc:	strcc	r2, [r0, #20]
   117e0:	movcc	r2, #10
   117e4:	strbcc	r2, [r3]
   117e8:	bcc	118f4 <__assert_fail@plt+0x61c>
   117ec:	mov	r1, #10
   117f0:	bl	11254 <__overflow@plt>
   117f4:	b	118f4 <__assert_fail@plt+0x61c>
   117f8:	mov	r2, r5
   117fc:	ldr	r1, [r4, #40]	; 0x28
   11800:	mov	r0, r9
   11804:	bl	110a4 <memcmp@plt>
   11808:	cmp	r0, #0
   1180c:	bne	11738 <__assert_fail@plt+0x460>
   11810:	ldr	r3, [sl, #56]	; 0x38
   11814:	str	r3, [r4, #64]	; 0x40
   11818:	add	r3, r4, #68	; 0x44
   1181c:	str	r3, [r4, #60]	; 0x3c
   11820:	bl	1140c <__assert_fail@plt+0x134>
   11824:	ldr	r0, [fp]
   11828:	ldr	r3, [r0, #20]
   1182c:	ldr	r2, [r0, #24]
   11830:	cmp	r3, r2
   11834:	addcc	r2, r3, #1
   11838:	strcc	r2, [r0, #20]
   1183c:	movcc	r2, #10
   11840:	strbcc	r2, [r3]
   11844:	bcc	118f4 <__assert_fail@plt+0x61c>
   11848:	mov	r1, #10
   1184c:	bl	11254 <__overflow@plt>
   11850:	b	118f4 <__assert_fail@plt+0x61c>
   11854:	ldrd	r0, [sl, #48]	; 0x30
   11858:	cmp	r0, #2
   1185c:	sbcs	r3, r1, #0
   11860:	blt	118ac <__assert_fail@plt+0x5d4>
   11864:	cmp	r6, #1
   11868:	ble	11880 <__assert_fail@plt+0x5a8>
   1186c:	bl	11440 <__assert_fail@plt+0x168>
   11870:	mov	r2, #0
   11874:	mov	r3, #0
   11878:	strd	r2, [r4, #48]	; 0x30
   1187c:	b	118e0 <__assert_fail@plt+0x608>
   11880:	ldrd	r2, [r4, #48]	; 0x30
   11884:	adds	r6, r2, #1
   11888:	adc	r7, r3, #0
   1188c:	strd	r6, [r4, #48]	; 0x30
   11890:	cmp	r1, r7
   11894:	cmpeq	r0, r6
   11898:	beq	1186c <__assert_fail@plt+0x594>
   1189c:	ldr	r1, [fp]
   118a0:	ldr	r0, [r4, #56]	; 0x38
   118a4:	bl	10fcc <fputs_unlocked@plt>
   118a8:	b	118e0 <__assert_fail@plt+0x608>
   118ac:	bl	11440 <__assert_fail@plt+0x168>
   118b0:	b	118e0 <__assert_fail@plt+0x608>
   118b4:	cmp	r6, #1
   118b8:	ble	118c4 <__assert_fail@plt+0x5ec>
   118bc:	bl	11440 <__assert_fail@plt+0x168>
   118c0:	b	118e0 <__assert_fail@plt+0x608>
   118c4:	ldr	r1, [fp]
   118c8:	ldr	r0, [r4, #56]	; 0x38
   118cc:	bl	10fcc <fputs_unlocked@plt>
   118d0:	b	118e0 <__assert_fail@plt+0x608>
   118d4:	ldr	r1, [fp]
   118d8:	ldr	r0, [r4, #56]	; 0x38
   118dc:	bl	10fcc <fputs_unlocked@plt>
   118e0:	ldr	r3, [fp]
   118e4:	ldr	r2, [r4, #16]
   118e8:	mov	r1, #1
   118ec:	ldr	r0, [r4, #20]
   118f0:	bl	11098 <fwrite_unlocked@plt>
   118f4:	mov	r1, r8
   118f8:	ldr	r0, [pc, #464]	; 11ad0 <__assert_fail@plt+0x7f8>
   118fc:	bl	12b18 <__assert_fail@plt+0x1840>
   11900:	cmp	r0, #0
   11904:	beq	11a14 <__assert_fail@plt+0x73c>
   11908:	ldr	r6, [r4, #16]
   1190c:	sub	r5, r6, #1
   11910:	cmp	r5, #1
   11914:	bls	11940 <__assert_fail@plt+0x668>
   11918:	ldr	r7, [r4, #24]
   1191c:	cmp	r7, #1
   11920:	bls	11940 <__assert_fail@plt+0x668>
   11924:	ldr	r9, [r4, #20]
   11928:	mov	r2, #2
   1192c:	ldr	r1, [sl, #40]	; 0x28
   11930:	mov	r0, r9
   11934:	bl	110a4 <memcmp@plt>
   11938:	cmp	r0, #0
   1193c:	beq	11720 <__assert_fail@plt+0x448>
   11940:	ldr	r3, [r4, #64]	; 0x40
   11944:	ldrb	r3, [r3]
   11948:	sub	r3, r3, #97	; 0x61
   1194c:	cmp	r3, #19
   11950:	ldrls	pc, [pc, r3, lsl #2]
   11954:	b	118e0 <__assert_fail@plt+0x608>
   11958:	andeq	r1, r1, r4, asr r8
   1195c:	andeq	r1, r1, r0, ror #17
   11960:	andeq	r1, r1, r0, ror #17
   11964:	andeq	r1, r1, r0, ror #17
   11968:	andeq	r1, r1, r0, ror #17
   1196c:	andeq	r1, r1, r0, ror #17
   11970:	andeq	r1, r1, r0, ror #17
   11974:	andeq	r1, r1, r0, ror #17
   11978:	andeq	r1, r1, r0, ror #17
   1197c:	andeq	r1, r1, r0, ror #17
   11980:	andeq	r1, r1, r0, ror #17
   11984:	andeq	r1, r1, r0, ror #17
   11988:	andeq	r1, r1, r0, ror #17
   1198c:	ldrdeq	r1, [r1], -r4
   11990:	andeq	r1, r1, r0, ror #17
   11994:	andeq	r1, r1, r8, lsr #19
   11998:	andeq	r1, r1, r0, ror #17
   1199c:	andeq	r1, r1, r0, ror #17
   119a0:	andeq	r1, r1, r0, ror #17
   119a4:			; <UNDEFINED> instruction: 0x000118b4
   119a8:	mov	r3, #0
   119ac:	str	r3, [sp, #4]
   119b0:	str	r5, [sp]
   119b4:	mov	r2, r5
   119b8:	ldr	r1, [r4, #20]
   119bc:	ldr	r0, [r4, #60]	; 0x3c
   119c0:	bl	218ec <__assert_fail@plt+0x10614>
   119c4:	cmn	r0, #2
   119c8:	beq	119dc <__assert_fail@plt+0x704>
   119cc:	cmn	r0, #1
   119d0:	beq	11a04 <__assert_fail@plt+0x72c>
   119d4:	bl	11440 <__assert_fail@plt+0x168>
   119d8:	b	118e0 <__assert_fail@plt+0x608>
   119dc:	bl	111d0 <__errno_location@plt>
   119e0:	ldr	r4, [r0]
   119e4:	mov	r2, #5
   119e8:	ldr	r1, [pc, #228]	; 11ad4 <__assert_fail@plt+0x7fc>
   119ec:	mov	r0, #0
   119f0:	bl	110c8 <dcgettext@plt>
   119f4:	mov	r2, r0
   119f8:	mov	r1, r4
   119fc:	mov	r0, #1
   11a00:	bl	11140 <error@plt>
   11a04:	ldr	r1, [fp]
   11a08:	ldr	r0, [r4, #56]	; 0x38
   11a0c:	bl	10fcc <fputs_unlocked@plt>
   11a10:	b	118e0 <__assert_fail@plt+0x608>
   11a14:	bl	111d0 <__errno_location@plt>
   11a18:	mov	r5, r0
   11a1c:	ldr	r4, [r0]
   11a20:	ldr	r3, [r8]
   11a24:	and	r3, r3, #32
   11a28:	cmp	r3, #0
   11a2c:	moveq	r4, #0
   11a30:	ldr	r1, [pc, #124]	; 11ab4 <__assert_fail@plt+0x7dc>
   11a34:	ldr	r0, [sp, #12]
   11a38:	bl	11008 <strcmp@plt>
   11a3c:	cmp	r0, #0
   11a40:	bne	11a60 <__assert_fail@plt+0x788>
   11a44:	mov	r0, r8
   11a48:	bl	11284 <clearerr_unlocked@plt>
   11a4c:	cmp	r4, #0
   11a50:	moveq	r0, #1
   11a54:	bne	11a88 <__assert_fail@plt+0x7b0>
   11a58:	add	sp, sp, #20
   11a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a60:	mov	r0, r8
   11a64:	bl	12840 <__assert_fail@plt+0x1568>
   11a68:	clz	r3, r4
   11a6c:	lsr	r3, r3, #5
   11a70:	cmp	r0, #0
   11a74:	moveq	r3, #0
   11a78:	mov	r0, r3
   11a7c:	cmp	r3, #0
   11a80:	ldrne	r4, [r5]
   11a84:	b	11a4c <__assert_fail@plt+0x774>
   11a88:	ldr	r2, [sp, #12]
   11a8c:	mov	r1, #3
   11a90:	mov	r0, #0
   11a94:	bl	14520 <__assert_fail@plt+0x3248>
   11a98:	mov	r3, r0
   11a9c:	ldr	r2, [pc, #40]	; 11acc <__assert_fail@plt+0x7f4>
   11aa0:	mov	r1, r4
   11aa4:	mov	r0, #0
   11aa8:	bl	11140 <error@plt>
   11aac:	mov	r0, #0
   11ab0:	b	11a58 <__assert_fail@plt+0x780>
   11ab4:	andeq	r3, r2, r8, ror #18
   11ab8:	andeq	r5, r3, r0, ror #3
   11abc:	ldrdeq	r5, [r3], -r0
   11ac0:	ldrdeq	r5, [r3], -r4
   11ac4:	andeq	r5, r3, r8, lsr #2
   11ac8:	andeq	r4, r2, r0, lsr #15
   11acc:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   11ad0:	andeq	r5, r3, ip, ror #3
   11ad4:	andeq	r3, r2, ip, ror #18
   11ad8:	push	{lr}		; (str lr, [sp, #-4]!)
   11adc:	sub	sp, sp, #60	; 0x3c
   11ae0:	subs	r6, r0, #0
   11ae4:	beq	11b20 <__assert_fail@plt+0x848>
   11ae8:	ldr	r3, [pc, #872]	; 11e58 <__assert_fail@plt+0xb80>
   11aec:	ldr	r4, [r3]
   11af0:	mov	r2, #5
   11af4:	ldr	r1, [pc, #864]	; 11e5c <__assert_fail@plt+0xb84>
   11af8:	mov	r0, #0
   11afc:	bl	110c8 <dcgettext@plt>
   11b00:	ldr	r3, [pc, #856]	; 11e60 <__assert_fail@plt+0xb88>
   11b04:	ldr	r3, [r3]
   11b08:	mov	r2, r0
   11b0c:	mov	r1, #1
   11b10:	mov	r0, r4
   11b14:	bl	11224 <__fprintf_chk@plt>
   11b18:	mov	r0, r6
   11b1c:	bl	111ac <exit@plt>
   11b20:	mov	r2, #5
   11b24:	ldr	r1, [pc, #824]	; 11e64 <__assert_fail@plt+0xb8c>
   11b28:	mov	r0, #0
   11b2c:	bl	110c8 <dcgettext@plt>
   11b30:	ldr	r3, [pc, #808]	; 11e60 <__assert_fail@plt+0xb88>
   11b34:	ldr	r2, [r3]
   11b38:	mov	r1, r0
   11b3c:	mov	r0, #1
   11b40:	bl	1120c <__printf_chk@plt>
   11b44:	mov	r2, #5
   11b48:	ldr	r1, [pc, #792]	; 11e68 <__assert_fail@plt+0xb90>
   11b4c:	mov	r0, #0
   11b50:	bl	110c8 <dcgettext@plt>
   11b54:	ldr	r4, [pc, #784]	; 11e6c <__assert_fail@plt+0xb94>
   11b58:	ldr	r1, [r4]
   11b5c:	bl	10fcc <fputs_unlocked@plt>
   11b60:	mov	r2, #5
   11b64:	ldr	r1, [pc, #772]	; 11e70 <__assert_fail@plt+0xb98>
   11b68:	mov	r0, #0
   11b6c:	bl	110c8 <dcgettext@plt>
   11b70:	ldr	r1, [r4]
   11b74:	bl	10fcc <fputs_unlocked@plt>
   11b78:	mov	r2, #5
   11b7c:	ldr	r1, [pc, #752]	; 11e74 <__assert_fail@plt+0xb9c>
   11b80:	mov	r0, #0
   11b84:	bl	110c8 <dcgettext@plt>
   11b88:	ldr	r1, [r4]
   11b8c:	bl	10fcc <fputs_unlocked@plt>
   11b90:	mov	r2, #5
   11b94:	ldr	r1, [pc, #732]	; 11e78 <__assert_fail@plt+0xba0>
   11b98:	mov	r0, #0
   11b9c:	bl	110c8 <dcgettext@plt>
   11ba0:	ldr	r1, [r4]
   11ba4:	bl	10fcc <fputs_unlocked@plt>
   11ba8:	mov	r2, #5
   11bac:	ldr	r1, [pc, #712]	; 11e7c <__assert_fail@plt+0xba4>
   11bb0:	mov	r0, #0
   11bb4:	bl	110c8 <dcgettext@plt>
   11bb8:	ldr	r1, [r4]
   11bbc:	bl	10fcc <fputs_unlocked@plt>
   11bc0:	mov	r2, #5
   11bc4:	ldr	r1, [pc, #692]	; 11e80 <__assert_fail@plt+0xba8>
   11bc8:	mov	r0, #0
   11bcc:	bl	110c8 <dcgettext@plt>
   11bd0:	ldr	r1, [r4]
   11bd4:	bl	10fcc <fputs_unlocked@plt>
   11bd8:	mov	r2, #5
   11bdc:	ldr	r1, [pc, #672]	; 11e84 <__assert_fail@plt+0xbac>
   11be0:	mov	r0, #0
   11be4:	bl	110c8 <dcgettext@plt>
   11be8:	ldr	r1, [r4]
   11bec:	bl	10fcc <fputs_unlocked@plt>
   11bf0:	mov	r2, #5
   11bf4:	ldr	r1, [pc, #652]	; 11e88 <__assert_fail@plt+0xbb0>
   11bf8:	mov	r0, #0
   11bfc:	bl	110c8 <dcgettext@plt>
   11c00:	ldr	r1, [r4]
   11c04:	bl	10fcc <fputs_unlocked@plt>
   11c08:	mov	r2, #5
   11c0c:	ldr	r1, [pc, #632]	; 11e8c <__assert_fail@plt+0xbb4>
   11c10:	mov	r0, #0
   11c14:	bl	110c8 <dcgettext@plt>
   11c18:	ldr	r1, [r4]
   11c1c:	bl	10fcc <fputs_unlocked@plt>
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #612]	; 11e90 <__assert_fail@plt+0xbb8>
   11c28:	mov	r0, #0
   11c2c:	bl	110c8 <dcgettext@plt>
   11c30:	ldr	r1, [r4]
   11c34:	bl	10fcc <fputs_unlocked@plt>
   11c38:	mov	r2, #5
   11c3c:	ldr	r1, [pc, #592]	; 11e94 <__assert_fail@plt+0xbbc>
   11c40:	mov	r0, #0
   11c44:	bl	110c8 <dcgettext@plt>
   11c48:	ldr	r1, [r4]
   11c4c:	bl	10fcc <fputs_unlocked@plt>
   11c50:	mov	ip, sp
   11c54:	ldr	lr, [pc, #572]	; 11e98 <__assert_fail@plt+0xbc0>
   11c58:	ldm	lr!, {r0, r1, r2, r3}
   11c5c:	stmia	ip!, {r0, r1, r2, r3}
   11c60:	ldm	lr!, {r0, r1, r2, r3}
   11c64:	stmia	ip!, {r0, r1, r2, r3}
   11c68:	ldm	lr!, {r0, r1, r2, r3}
   11c6c:	stmia	ip!, {r0, r1, r2, r3}
   11c70:	ldm	lr, {r0, r1}
   11c74:	stm	ip, {r0, r1}
   11c78:	ldr	r1, [sp]
   11c7c:	cmp	r1, #0
   11c80:	moveq	r4, sp
   11c84:	beq	11cac <__assert_fail@plt+0x9d4>
   11c88:	mov	r4, sp
   11c8c:	ldr	r5, [pc, #520]	; 11e9c <__assert_fail@plt+0xbc4>
   11c90:	mov	r0, r5
   11c94:	bl	11008 <strcmp@plt>
   11c98:	cmp	r0, #0
   11c9c:	beq	11cac <__assert_fail@plt+0x9d4>
   11ca0:	ldr	r1, [r4, #8]!
   11ca4:	cmp	r1, #0
   11ca8:	bne	11c90 <__assert_fail@plt+0x9b8>
   11cac:	ldr	r4, [r4, #4]
   11cb0:	cmp	r4, #0
   11cb4:	beq	11dc8 <__assert_fail@plt+0xaf0>
   11cb8:	mov	r2, #5
   11cbc:	ldr	r1, [pc, #476]	; 11ea0 <__assert_fail@plt+0xbc8>
   11cc0:	mov	r0, #0
   11cc4:	bl	110c8 <dcgettext@plt>
   11cc8:	ldr	r3, [pc, #468]	; 11ea4 <__assert_fail@plt+0xbcc>
   11ccc:	ldr	r2, [pc, #468]	; 11ea8 <__assert_fail@plt+0xbd0>
   11cd0:	mov	r1, r0
   11cd4:	mov	r0, #1
   11cd8:	bl	1120c <__printf_chk@plt>
   11cdc:	mov	r1, #0
   11ce0:	mov	r0, #5
   11ce4:	bl	11260 <setlocale@plt>
   11ce8:	cmp	r0, #0
   11cec:	beq	11d04 <__assert_fail@plt+0xa2c>
   11cf0:	mov	r2, #3
   11cf4:	ldr	r1, [pc, #432]	; 11eac <__assert_fail@plt+0xbd4>
   11cf8:	bl	112c0 <strncmp@plt>
   11cfc:	cmp	r0, #0
   11d00:	bne	11d64 <__assert_fail@plt+0xa8c>
   11d04:	mov	r2, #5
   11d08:	ldr	r1, [pc, #416]	; 11eb0 <__assert_fail@plt+0xbd8>
   11d0c:	mov	r0, #0
   11d10:	bl	110c8 <dcgettext@plt>
   11d14:	ldr	r5, [pc, #384]	; 11e9c <__assert_fail@plt+0xbc4>
   11d18:	mov	r3, r5
   11d1c:	ldr	r2, [pc, #384]	; 11ea4 <__assert_fail@plt+0xbcc>
   11d20:	mov	r1, r0
   11d24:	mov	r0, #1
   11d28:	bl	1120c <__printf_chk@plt>
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #380]	; 11eb4 <__assert_fail@plt+0xbdc>
   11d34:	mov	r0, #0
   11d38:	bl	110c8 <dcgettext@plt>
   11d3c:	mov	r1, r0
   11d40:	ldr	r2, [pc, #368]	; 11eb8 <__assert_fail@plt+0xbe0>
   11d44:	ldr	r3, [pc, #368]	; 11ebc <__assert_fail@plt+0xbe4>
   11d48:	cmp	r4, r5
   11d4c:	movne	r3, r2
   11d50:	mov	r2, r4
   11d54:	mov	r0, #1
   11d58:	bl	1120c <__printf_chk@plt>
   11d5c:	b	11b18 <__assert_fail@plt+0x840>
   11d60:	ldr	r4, [pc, #308]	; 11e9c <__assert_fail@plt+0xbc4>
   11d64:	mov	r2, #5
   11d68:	ldr	r1, [pc, #336]	; 11ec0 <__assert_fail@plt+0xbe8>
   11d6c:	mov	r0, #0
   11d70:	bl	110c8 <dcgettext@plt>
   11d74:	ldr	r3, [pc, #240]	; 11e6c <__assert_fail@plt+0xb94>
   11d78:	ldr	r1, [r3]
   11d7c:	bl	10fcc <fputs_unlocked@plt>
   11d80:	b	11d04 <__assert_fail@plt+0xa2c>
   11d84:	mov	r2, #5
   11d88:	ldr	r1, [pc, #288]	; 11eb0 <__assert_fail@plt+0xbd8>
   11d8c:	mov	r0, #0
   11d90:	bl	110c8 <dcgettext@plt>
   11d94:	ldr	r4, [pc, #256]	; 11e9c <__assert_fail@plt+0xbc4>
   11d98:	mov	r3, r4
   11d9c:	ldr	r2, [pc, #256]	; 11ea4 <__assert_fail@plt+0xbcc>
   11da0:	mov	r1, r0
   11da4:	mov	r0, #1
   11da8:	bl	1120c <__printf_chk@plt>
   11dac:	mov	r2, #5
   11db0:	ldr	r1, [pc, #252]	; 11eb4 <__assert_fail@plt+0xbdc>
   11db4:	mov	r0, #0
   11db8:	bl	110c8 <dcgettext@plt>
   11dbc:	mov	r1, r0
   11dc0:	ldr	r3, [pc, #244]	; 11ebc <__assert_fail@plt+0xbe4>
   11dc4:	b	11d50 <__assert_fail@plt+0xa78>
   11dc8:	mov	r2, #5
   11dcc:	ldr	r1, [pc, #204]	; 11ea0 <__assert_fail@plt+0xbc8>
   11dd0:	mov	r0, #0
   11dd4:	bl	110c8 <dcgettext@plt>
   11dd8:	ldr	r3, [pc, #196]	; 11ea4 <__assert_fail@plt+0xbcc>
   11ddc:	ldr	r2, [pc, #196]	; 11ea8 <__assert_fail@plt+0xbd0>
   11de0:	mov	r1, r0
   11de4:	mov	r0, #1
   11de8:	bl	1120c <__printf_chk@plt>
   11dec:	mov	r1, #0
   11df0:	mov	r0, #5
   11df4:	bl	11260 <setlocale@plt>
   11df8:	cmp	r0, #0
   11dfc:	beq	11d84 <__assert_fail@plt+0xaac>
   11e00:	mov	r2, #3
   11e04:	ldr	r1, [pc, #160]	; 11eac <__assert_fail@plt+0xbd4>
   11e08:	bl	112c0 <strncmp@plt>
   11e0c:	cmp	r0, #0
   11e10:	bne	11d60 <__assert_fail@plt+0xa88>
   11e14:	mov	r2, #5
   11e18:	ldr	r1, [pc, #144]	; 11eb0 <__assert_fail@plt+0xbd8>
   11e1c:	mov	r0, #0
   11e20:	bl	110c8 <dcgettext@plt>
   11e24:	ldr	r4, [pc, #112]	; 11e9c <__assert_fail@plt+0xbc4>
   11e28:	mov	r3, r4
   11e2c:	ldr	r2, [pc, #112]	; 11ea4 <__assert_fail@plt+0xbcc>
   11e30:	mov	r1, r0
   11e34:	mov	r0, #1
   11e38:	bl	1120c <__printf_chk@plt>
   11e3c:	mov	r2, #5
   11e40:	ldr	r1, [pc, #108]	; 11eb4 <__assert_fail@plt+0xbdc>
   11e44:	mov	r0, #0
   11e48:	bl	110c8 <dcgettext@plt>
   11e4c:	mov	r1, r0
   11e50:	ldr	r3, [pc, #100]	; 11ebc <__assert_fail@plt+0xbe4>
   11e54:	b	11d50 <__assert_fail@plt+0xa78>
   11e58:	andeq	r5, r3, r8, asr #3
   11e5c:	muleq	r2, r4, r9
   11e60:	andeq	r5, r3, ip, lsl #11
   11e64:			; <UNDEFINED> instruction: 0x000239bc
   11e68:	andeq	r3, r2, r0, ror #19
   11e6c:	ldrdeq	r5, [r3], -r4
   11e70:	andeq	r3, r2, r0, lsr #20
   11e74:	andeq	r3, r2, r8, asr sl
   11e78:	andeq	r3, r2, r4, lsr #21
   11e7c:	andeq	r3, r2, r8, ror fp
   11e80:	andeq	r3, r2, r4, lsr sp
   11e84:	andeq	r3, r2, r4, asr #27
   11e88:	strdeq	r3, [r2], -r4
   11e8c:	andeq	r3, r2, ip, lsr #28
   11e90:	andeq	r3, r2, r0, ror pc
   11e94:	andeq	r4, r2, ip, lsr r0
   11e98:	andeq	r3, r2, r8, lsl r8
   11e9c:	muleq	r2, r0, r9
   11ea0:	ldrdeq	r4, [r2], -r0
   11ea4:	andeq	r4, r2, r8, ror #1
   11ea8:	andeq	r4, r2, r0, lsl r1
   11eac:	andeq	r4, r2, r0, lsr #2
   11eb0:	andeq	r4, r2, ip, ror #2
   11eb4:	andeq	r4, r2, r8, lsl #3
   11eb8:	ldrdeq	r3, [r2], -ip
   11ebc:	andeq	r4, r2, r4, lsr r3
   11ec0:	andeq	r4, r2, r4, lsr #2
   11ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ec8:	sub	sp, sp, #44	; 0x2c
   11ecc:	str	r0, [sp, #24]
   11ed0:	mov	r7, r1
   11ed4:	ldr	r0, [r1]
   11ed8:	bl	12b38 <__assert_fail@plt+0x1860>
   11edc:	ldr	r1, [pc, #1916]	; 12660 <__assert_fail@plt+0x1388>
   11ee0:	mov	r0, #6
   11ee4:	bl	11260 <setlocale@plt>
   11ee8:	ldr	r4, [pc, #1908]	; 12664 <__assert_fail@plt+0x138c>
   11eec:	ldr	r1, [pc, #1908]	; 12668 <__assert_fail@plt+0x1390>
   11ef0:	mov	r0, r4
   11ef4:	bl	112a8 <bindtextdomain@plt>
   11ef8:	mov	r0, r4
   11efc:	bl	110e0 <textdomain@plt>
   11f00:	ldr	r0, [pc, #1892]	; 1266c <__assert_fail@plt+0x1394>
   11f04:	bl	237f4 <__assert_fail@plt+0x1251c>
   11f08:	mov	r2, #0
   11f0c:	ldr	r3, [pc, #1884]	; 12670 <__assert_fail@plt+0x1398>
   11f10:	strb	r2, [r3, #9]
   11f14:	mov	sl, #1
   11f18:	ldr	r9, [pc, #1876]	; 12674 <__assert_fail@plt+0x139c>
   11f1c:	ldr	fp, [pc, #1876]	; 12678 <__assert_fail@plt+0x13a0>
   11f20:	add	r3, r9, #76	; 0x4c
   11f24:	str	r3, [sp, #36]	; 0x24
   11f28:	ldr	r8, [pc, #1856]	; 12670 <__assert_fail@plt+0x1398>
   11f2c:	add	r3, r8, #676	; 0x2a4
   11f30:	str	r3, [sp, #28]
   11f34:	add	r3, fp, #60	; 0x3c
   11f38:	str	r3, [sp, #32]
   11f3c:	add	r6, r9, #88	; 0x58
   11f40:	ldr	r5, [pc, #1844]	; 1267c <__assert_fail@plt+0x13a4>
   11f44:	mov	r4, #0
   11f48:	str	r4, [sp]
   11f4c:	mov	r3, r6
   11f50:	mov	r2, r5
   11f54:	mov	r1, r7
   11f58:	ldr	r0, [sp, #24]
   11f5c:	bl	11194 <getopt_long@plt>
   11f60:	cmn	r0, #1
   11f64:	beq	124ec <__assert_fail@plt+0x1214>
   11f68:	add	r0, r0, #3
   11f6c:	cmp	r0, #122	; 0x7a
   11f70:	ldrls	pc, [pc, r0, lsl #2]
   11f74:	b	124e4 <__assert_fail@plt+0x120c>
   11f78:	andeq	r2, r1, r8, lsr #9
   11f7c:	andeq	r2, r1, r0, lsr #9
   11f80:	andeq	r2, r1, r4, ror #9
   11f84:	andeq	r2, r1, r4, ror #9
   11f88:	andeq	r2, r1, r4, ror #9
   11f8c:	andeq	r2, r1, r4, ror #9
   11f90:	andeq	r2, r1, r4, ror #9
   11f94:	andeq	r2, r1, r4, ror #9
   11f98:	andeq	r2, r1, r4, ror #9
   11f9c:	andeq	r2, r1, r4, ror #9
   11fa0:	andeq	r2, r1, r4, ror #9
   11fa4:	andeq	r2, r1, r4, ror #9
   11fa8:	andeq	r2, r1, r4, ror #9
   11fac:	andeq	r2, r1, r4, ror #9
   11fb0:	andeq	r2, r1, r4, ror #9
   11fb4:	andeq	r2, r1, r4, ror #9
   11fb8:	andeq	r2, r1, r4, ror #9
   11fbc:	andeq	r2, r1, r4, ror #9
   11fc0:	andeq	r2, r1, r4, ror #9
   11fc4:	andeq	r2, r1, r4, ror #9
   11fc8:	andeq	r2, r1, r4, ror #9
   11fcc:	andeq	r2, r1, r4, ror #9
   11fd0:	andeq	r2, r1, r4, ror #9
   11fd4:	andeq	r2, r1, r4, ror #9
   11fd8:	andeq	r2, r1, r4, ror #9
   11fdc:	andeq	r2, r1, r4, ror #9
   11fe0:	andeq	r2, r1, r4, ror #9
   11fe4:	andeq	r2, r1, r4, ror #9
   11fe8:	andeq	r2, r1, r4, ror #9
   11fec:	andeq	r2, r1, r4, ror #9
   11ff0:	andeq	r2, r1, r4, ror #9
   11ff4:	andeq	r2, r1, r4, ror #9
   11ff8:	andeq	r2, r1, r4, ror #9
   11ffc:	andeq	r2, r1, r4, ror #9
   12000:	andeq	r2, r1, r4, ror #9
   12004:	andeq	r2, r1, r4, ror #9
   12008:	andeq	r2, r1, r4, ror #9
   1200c:	andeq	r2, r1, r4, ror #9
   12010:	andeq	r2, r1, r4, ror #9
   12014:	andeq	r2, r1, r4, ror #9
   12018:	andeq	r2, r1, r4, ror #9
   1201c:	andeq	r2, r1, r4, ror #9
   12020:	andeq	r2, r1, r4, ror #9
   12024:	andeq	r2, r1, r4, ror #9
   12028:	andeq	r2, r1, r4, ror #9
   1202c:	andeq	r2, r1, r4, ror #9
   12030:	andeq	r2, r1, r4, ror #9
   12034:	andeq	r2, r1, r4, ror #9
   12038:	andeq	r2, r1, r4, ror #9
   1203c:	andeq	r2, r1, r4, ror #9
   12040:	andeq	r2, r1, r4, ror #9
   12044:	andeq	r2, r1, r4, ror #9
   12048:	andeq	r2, r1, r4, ror #9
   1204c:	andeq	r2, r1, r4, ror #9
   12050:	andeq	r2, r1, r4, ror #9
   12054:	andeq	r2, r1, r4, ror #9
   12058:	andeq	r2, r1, r4, ror #9
   1205c:	andeq	r2, r1, r4, ror #9
   12060:	andeq	r2, r1, r4, ror #9
   12064:	andeq	r2, r1, r4, ror #9
   12068:	andeq	r2, r1, r4, ror #9
   1206c:	andeq	r2, r1, r4, ror #9
   12070:	andeq	r2, r1, r4, ror #9
   12074:	andeq	r2, r1, r4, ror #9
   12078:	andeq	r2, r1, r4, ror #9
   1207c:	andeq	r2, r1, r4, ror #9
   12080:	andeq	r2, r1, r4, ror #9
   12084:	andeq	r2, r1, r4, ror #9
   12088:	andeq	r2, r1, r4, ror #9
   1208c:	andeq	r2, r1, r4, ror #9
   12090:	andeq	r2, r1, r4, ror #9
   12094:	andeq	r2, r1, r4, ror #9
   12098:	andeq	r2, r1, r4, ror #9
   1209c:	andeq	r2, r1, r4, ror #9
   120a0:	andeq	r2, r1, r4, ror #9
   120a4:	andeq	r2, r1, r4, ror #9
   120a8:	andeq	r2, r1, r4, ror #9
   120ac:	andeq	r2, r1, r4, ror #9
   120b0:	andeq	r2, r1, r4, ror #9
   120b4:	andeq	r2, r1, r4, ror #9
   120b8:	andeq	r2, r1, r4, ror #9
   120bc:	andeq	r2, r1, r4, ror #9
   120c0:	andeq	r2, r1, r4, ror #9
   120c4:	andeq	r2, r1, r4, ror #9
   120c8:	andeq	r2, r1, r4, ror #9
   120cc:	andeq	r2, r1, r4, ror #9
   120d0:	andeq	r2, r1, r4, ror #9
   120d4:	andeq	r2, r1, r4, ror #9
   120d8:	andeq	r2, r1, r4, ror #9
   120dc:	andeq	r2, r1, r4, ror #9
   120e0:	andeq	r2, r1, r4, ror #9
   120e4:	andeq	r2, r1, r4, ror #9
   120e8:	andeq	r2, r1, r4, ror #9
   120ec:	andeq	r2, r1, r4, ror #9
   120f0:	andeq	r2, r1, r4, ror #9
   120f4:	andeq	r2, r1, r4, ror #9
   120f8:	andeq	r2, r1, r4, ror #9
   120fc:	andeq	r2, r1, r4, ror #9
   12100:	andeq	r2, r1, r4, ror #9
   12104:	andeq	r2, r1, r4, ror #9
   12108:	andeq	r2, r1, r4, ror #9
   1210c:			; <UNDEFINED> instruction: 0x000121b4
   12110:	andeq	r2, r1, r4, ror #9
   12114:	andeq	r2, r1, r8, asr #8
   12118:	andeq	r2, r1, r4, ror #9
   1211c:	andeq	r2, r1, r4, lsl #4
   12120:	andeq	r2, r1, r4, ror #9
   12124:	andeq	r2, r1, r4, ror #2
   12128:	andeq	r2, r1, r4, lsr #5
   1212c:	andeq	r2, r1, r4, ror #9
   12130:	andeq	r2, r1, r4, ror #9
   12134:	andeq	r2, r1, r0, lsl #6
   12138:	andeq	r2, r1, r4, ror #9
   1213c:			; <UNDEFINED> instruction: 0x000123b0
   12140:	andeq	r2, r1, r4, ror #9
   12144:	strdeq	r2, [r1], -r4
   12148:	andeq	r2, r1, r4, ror #9
   1214c:	andeq	r2, r1, r4, ror #9
   12150:	andeq	r2, r1, r0, asr r3
   12154:	andeq	r2, r1, r4, ror #9
   12158:	andeq	r2, r1, r4, ror #9
   1215c:	andeq	r2, r1, r4, asr r2
   12160:	andeq	r2, r1, r0, ror #6
   12164:	add	r2, r8, #164	; 0xa4
   12168:	add	r1, r8, #132	; 0x84
   1216c:	add	r0, fp, #64	; 0x40
   12170:	bl	11584 <__assert_fail@plt+0x2ac>
   12174:	subs	r4, r0, #0
   12178:	bne	11f3c <__assert_fail@plt+0xc64>
   1217c:	mov	r2, #5
   12180:	ldr	r1, [pc, #1272]	; 12680 <__assert_fail@plt+0x13a8>
   12184:	bl	110c8 <dcgettext@plt>
   12188:	mov	r5, r0
   1218c:	ldr	r3, [pc, #1264]	; 12684 <__assert_fail@plt+0x13ac>
   12190:	ldr	r0, [r3]
   12194:	bl	14688 <__assert_fail@plt+0x33b0>
   12198:	mov	r3, r0
   1219c:	mov	r2, r5
   121a0:	mov	r1, #0
   121a4:	mov	r0, r1
   121a8:	bl	11140 <error@plt>
   121ac:	mov	sl, r4
   121b0:	b	11f3c <__assert_fail@plt+0xc64>
   121b4:	add	r2, r8, #420	; 0x1a4
   121b8:	add	r1, r8, #68	; 0x44
   121bc:	add	r0, fp, #56	; 0x38
   121c0:	bl	11584 <__assert_fail@plt+0x2ac>
   121c4:	subs	r4, r0, #0
   121c8:	bne	11f3c <__assert_fail@plt+0xc64>
   121cc:	mov	r2, #5
   121d0:	ldr	r1, [pc, #1200]	; 12688 <__assert_fail@plt+0x13b0>
   121d4:	bl	110c8 <dcgettext@plt>
   121d8:	mov	r5, r0
   121dc:	ldr	r3, [pc, #1184]	; 12684 <__assert_fail@plt+0x13ac>
   121e0:	ldr	r0, [r3]
   121e4:	bl	14688 <__assert_fail@plt+0x33b0>
   121e8:	mov	r3, r0
   121ec:	mov	r2, r5
   121f0:	mov	r1, #0
   121f4:	mov	r0, r1
   121f8:	bl	11140 <error@plt>
   121fc:	mov	sl, r4
   12200:	b	11f3c <__assert_fail@plt+0xc64>
   12204:	ldr	r2, [sp, #28]
   12208:	add	r1, r8, #100	; 0x64
   1220c:	ldr	r0, [sp, #32]
   12210:	bl	11584 <__assert_fail@plt+0x2ac>
   12214:	subs	r4, r0, #0
   12218:	bne	11f3c <__assert_fail@plt+0xc64>
   1221c:	mov	r2, #5
   12220:	ldr	r1, [pc, #1124]	; 1268c <__assert_fail@plt+0x13b4>
   12224:	bl	110c8 <dcgettext@plt>
   12228:	mov	r5, r0
   1222c:	ldr	r3, [pc, #1104]	; 12684 <__assert_fail@plt+0x13ac>
   12230:	ldr	r0, [r3]
   12234:	bl	14688 <__assert_fail@plt+0x33b0>
   12238:	mov	r3, r0
   1223c:	mov	r2, r5
   12240:	mov	r1, #0
   12244:	mov	r0, r1
   12248:	bl	11140 <error@plt>
   1224c:	mov	sl, r4
   12250:	b	11f3c <__assert_fail@plt+0xc64>
   12254:	ldr	r3, [pc, #1064]	; 12684 <__assert_fail@plt+0x13ac>
   12258:	ldr	r4, [r3]
   1225c:	mov	r2, #5
   12260:	ldr	r1, [pc, #1064]	; 12690 <__assert_fail@plt+0x13b8>
   12264:	mov	r0, #0
   12268:	bl	110c8 <dcgettext@plt>
   1226c:	mov	r3, #0
   12270:	str	r3, [sp, #16]
   12274:	str	r0, [sp, #12]
   12278:	ldr	r3, [pc, #992]	; 12660 <__assert_fail@plt+0x1388>
   1227c:	str	r3, [sp, #8]
   12280:	mvn	r2, #0
   12284:	mvn	r3, #-2147483648	; 0x80000000
   12288:	strd	r2, [sp]
   1228c:	mov	r2, #0
   12290:	mov	r3, #-2147483648	; 0x80000000
   12294:	mov	r0, r4
   12298:	bl	226ac <__assert_fail@plt+0x113d4>
   1229c:	strd	r0, [fp, #8]
   122a0:	b	11f3c <__assert_fail@plt+0xc64>
   122a4:	ldr	r3, [pc, #984]	; 12684 <__assert_fail@plt+0x13ac>
   122a8:	ldr	r4, [r3]
   122ac:	mov	r2, #5
   122b0:	ldr	r1, [pc, #988]	; 12694 <__assert_fail@plt+0x13bc>
   122b4:	mov	r0, #0
   122b8:	bl	110c8 <dcgettext@plt>
   122bc:	mov	r3, #0
   122c0:	str	r3, [sp, #16]
   122c4:	str	r0, [sp, #12]
   122c8:	ldr	r3, [pc, #912]	; 12660 <__assert_fail@plt+0x1388>
   122cc:	str	r3, [sp, #8]
   122d0:	mvn	r2, #0
   122d4:	mvn	r3, #-2147483648	; 0x80000000
   122d8:	strd	r2, [sp]
   122dc:	mov	r2, #0
   122e0:	mov	r3, #-2147483648	; 0x80000000
   122e4:	mov	r0, r4
   122e8:	bl	226ac <__assert_fail@plt+0x113d4>
   122ec:	strd	r0, [fp, #32]
   122f0:	b	11f3c <__assert_fail@plt+0xc64>
   122f4:	mov	r3, #0
   122f8:	strb	r3, [fp]
   122fc:	b	11f3c <__assert_fail@plt+0xc64>
   12300:	ldr	r3, [pc, #892]	; 12684 <__assert_fail@plt+0x13ac>
   12304:	ldr	r4, [r3]
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #900]	; 12698 <__assert_fail@plt+0x13c0>
   12310:	mov	r0, #0
   12314:	bl	110c8 <dcgettext@plt>
   12318:	mov	r3, #0
   1231c:	str	r3, [sp, #16]
   12320:	str	r0, [sp, #12]
   12324:	ldr	r3, [pc, #820]	; 12660 <__assert_fail@plt+0x1388>
   12328:	str	r3, [sp, #8]
   1232c:	mvn	r2, #0
   12330:	mvn	r3, #-2147483648	; 0x80000000
   12334:	strd	r2, [sp]
   12338:	mov	r2, #1
   1233c:	mov	r3, #0
   12340:	mov	r0, r4
   12344:	bl	226ac <__assert_fail@plt+0x113d4>
   12348:	strd	r0, [fp, #48]	; 0x30
   1234c:	b	11f3c <__assert_fail@plt+0xc64>
   12350:	ldr	r3, [pc, #812]	; 12684 <__assert_fail@plt+0x13ac>
   12354:	ldr	r3, [r3]
   12358:	str	r3, [fp, #24]
   1235c:	b	11f3c <__assert_fail@plt+0xc64>
   12360:	ldr	r3, [pc, #796]	; 12684 <__assert_fail@plt+0x13ac>
   12364:	ldr	r4, [r3]
   12368:	mov	r2, #5
   1236c:	ldr	r1, [pc, #808]	; 1269c <__assert_fail@plt+0x13c4>
   12370:	mov	r0, #0
   12374:	bl	110c8 <dcgettext@plt>
   12378:	mov	r3, #0
   1237c:	str	r3, [sp, #16]
   12380:	str	r0, [sp, #12]
   12384:	ldr	r3, [pc, #724]	; 12660 <__assert_fail@plt+0x1388>
   12388:	str	r3, [sp, #8]
   1238c:	mvn	r2, #-2147483648	; 0x80000000
   12390:	mov	r3, #0
   12394:	strd	r2, [sp]
   12398:	mov	r2, #1
   1239c:	mov	r3, #0
   123a0:	mov	r0, r4
   123a4:	bl	226ac <__assert_fail@plt+0x113d4>
   123a8:	str	r0, [fp, #16]
   123ac:	b	11f3c <__assert_fail@plt+0xc64>
   123b0:	ldr	r3, [pc, #716]	; 12684 <__assert_fail@plt+0x13ac>
   123b4:	ldr	r4, [r3]
   123b8:	ldr	r1, [pc, #736]	; 126a0 <__assert_fail@plt+0x13c8>
   123bc:	mov	r0, r4
   123c0:	bl	11008 <strcmp@plt>
   123c4:	cmp	r0, #0
   123c8:	addeq	r3, r9, #56	; 0x38
   123cc:	streq	r3, [fp, #20]
   123d0:	beq	11f3c <__assert_fail@plt+0xc64>
   123d4:	ldr	r1, [pc, #712]	; 126a4 <__assert_fail@plt+0x13cc>
   123d8:	mov	r0, r4
   123dc:	bl	11008 <strcmp@plt>
   123e0:	cmp	r0, #0
   123e4:	addeq	r3, r9, #68	; 0x44
   123e8:	streq	r3, [fp, #20]
   123ec:	beq	11f3c <__assert_fail@plt+0xc64>
   123f0:	ldr	r1, [pc, #688]	; 126a8 <__assert_fail@plt+0x13d0>
   123f4:	mov	r0, r4
   123f8:	bl	11008 <strcmp@plt>
   123fc:	cmp	r0, #0
   12400:	ldreq	r3, [sp, #36]	; 0x24
   12404:	streq	r3, [fp, #20]
   12408:	beq	11f3c <__assert_fail@plt+0xc64>
   1240c:	mov	r2, #5
   12410:	ldr	r1, [pc, #660]	; 126ac <__assert_fail@plt+0x13d4>
   12414:	mov	r0, #0
   12418:	bl	110c8 <dcgettext@plt>
   1241c:	mov	r4, r0
   12420:	ldr	r3, [pc, #604]	; 12684 <__assert_fail@plt+0x13ac>
   12424:	ldr	r0, [r3]
   12428:	bl	14688 <__assert_fail@plt+0x33b0>
   1242c:	mov	r3, r0
   12430:	mov	r2, r4
   12434:	mov	r1, #0
   12438:	mov	r0, r1
   1243c:	bl	11140 <error@plt>
   12440:	mov	sl, #0
   12444:	b	11f3c <__assert_fail@plt+0xc64>
   12448:	ldr	r3, [pc, #564]	; 12684 <__assert_fail@plt+0x13ac>
   1244c:	ldr	r4, [r3]
   12450:	mov	r0, r4
   12454:	bl	111b8 <strlen@plt>
   12458:	sub	r0, r0, #1
   1245c:	cmp	r0, #1
   12460:	strhi	r4, [fp, #40]	; 0x28
   12464:	bhi	11f3c <__assert_fail@plt+0xc64>
   12468:	ldr	r3, [fp, #40]	; 0x28
   1246c:	ldrb	r2, [r4]
   12470:	cmp	r2, #0
   12474:	beq	11f3c <__assert_fail@plt+0xc64>
   12478:	ldr	r2, [pc, #516]	; 12684 <__assert_fail@plt+0x13ac>
   1247c:	add	r1, r4, #1
   12480:	str	r1, [r2]
   12484:	ldrb	r1, [r4]
   12488:	strb	r1, [r3], #1
   1248c:	ldr	r4, [r2]
   12490:	ldrb	r1, [r4]
   12494:	cmp	r1, #0
   12498:	bne	1247c <__assert_fail@plt+0x11a4>
   1249c:	b	11f3c <__assert_fail@plt+0xc64>
   124a0:	mov	r0, #0
   124a4:	bl	11ad8 <__assert_fail@plt+0x800>
   124a8:	mov	r4, #0
   124ac:	str	r4, [sp, #8]
   124b0:	ldr	r3, [pc, #504]	; 126b0 <__assert_fail@plt+0x13d8>
   124b4:	str	r3, [sp, #4]
   124b8:	ldr	r3, [pc, #500]	; 126b4 <__assert_fail@plt+0x13dc>
   124bc:	str	r3, [sp]
   124c0:	ldr	r3, [pc, #496]	; 126b8 <__assert_fail@plt+0x13e0>
   124c4:	ldr	r3, [r3]
   124c8:	ldr	r2, [pc, #492]	; 126bc <__assert_fail@plt+0x13e4>
   124cc:	ldr	r1, [pc, #492]	; 126c0 <__assert_fail@plt+0x13e8>
   124d0:	ldr	r0, [pc, #492]	; 126c4 <__assert_fail@plt+0x13ec>
   124d4:	ldr	r0, [r0]
   124d8:	bl	21ea8 <__assert_fail@plt+0x10bd0>
   124dc:	mov	r0, r4
   124e0:	bl	111ac <exit@plt>
   124e4:	mov	sl, r4
   124e8:	b	11f48 <__assert_fail@plt+0xc70>
   124ec:	cmp	sl, #0
   124f0:	beq	12620 <__assert_fail@plt+0x1348>
   124f4:	ldr	r5, [pc, #380]	; 12678 <__assert_fail@plt+0x13a0>
   124f8:	ldr	r0, [r5, #40]	; 0x28
   124fc:	bl	111b8 <strlen@plt>
   12500:	mov	r9, r0
   12504:	lsl	fp, r0, #1
   12508:	add	r0, fp, r0
   1250c:	ldr	r4, [pc, #348]	; 12670 <__assert_fail@plt+0x1398>
   12510:	str	r0, [r4, #28]
   12514:	add	r0, r0, #1
   12518:	bl	21f74 <__assert_fail@plt+0x10c9c>
   1251c:	mov	r6, r0
   12520:	str	r0, [r4, #32]
   12524:	ldr	r3, [r5, #40]	; 0x28
   12528:	mov	r8, r3
   1252c:	mov	r1, r3
   12530:	bl	110b0 <stpcpy@plt>
   12534:	mov	r1, r8
   12538:	bl	110b0 <stpcpy@plt>
   1253c:	mov	r1, r8
   12540:	bl	1111c <strcpy@plt>
   12544:	str	fp, [r4, #36]	; 0x24
   12548:	add	r6, r6, r9
   1254c:	str	r6, [r4, #40]	; 0x28
   12550:	str	r9, [r4, #24]
   12554:	add	r6, r6, r9
   12558:	str	r6, [r4, #44]	; 0x2c
   1255c:	add	r0, r4, #12
   12560:	bl	129f4 <__assert_fail@plt+0x171c>
   12564:	ldr	r0, [r5, #24]
   12568:	bl	111b8 <strlen@plt>
   1256c:	mov	r6, r0
   12570:	ldr	r0, [r5, #16]
   12574:	add	r0, r0, #1
   12578:	add	r0, r0, r6
   1257c:	bl	21f74 <__assert_fail@plt+0x10c9c>
   12580:	mov	r9, r0
   12584:	str	r0, [r4, #56]	; 0x38
   12588:	ldr	r3, [r5, #16]
   1258c:	add	r6, r6, r3
   12590:	mov	r2, r6
   12594:	mov	r1, #32
   12598:	bl	111f4 <memset@plt>
   1259c:	mov	r3, #0
   125a0:	strb	r3, [r9, r6]
   125a4:	ldrd	r2, [r5, #8]
   125a8:	strd	r2, [r4]
   125ac:	ldr	r3, [r5, #56]	; 0x38
   125b0:	str	r3, [r4, #64]	; 0x40
   125b4:	add	r3, r4, #68	; 0x44
   125b8:	str	r3, [r4, #60]	; 0x3c
   125bc:	ldr	r3, [pc, #260]	; 126c8 <__assert_fail@plt+0x13f0>
   125c0:	ldr	r3, [r3]
   125c4:	ldr	r2, [sp, #24]
   125c8:	cmp	r2, r3
   125cc:	beq	12628 <__assert_fail@plt+0x1350>
   125d0:	ldrgt	r4, [pc, #240]	; 126c8 <__assert_fail@plt+0x13f0>
   125d4:	ldrgt	r5, [sp, #24]
   125d8:	ble	12600 <__assert_fail@plt+0x1328>
   125dc:	ldr	r0, [r7, r3, lsl #2]
   125e0:	bl	1168c <__assert_fail@plt+0x3b4>
   125e4:	and	sl, sl, r0
   125e8:	uxtb	sl, sl
   125ec:	ldr	r3, [r4]
   125f0:	add	r3, r3, #1
   125f4:	str	r3, [r4]
   125f8:	cmp	r5, r3
   125fc:	bgt	125dc <__assert_fail@plt+0x1304>
   12600:	ldr	r3, [pc, #104]	; 12670 <__assert_fail@plt+0x1398>
   12604:	ldrb	r3, [r3, #9]
   12608:	cmp	r3, #0
   1260c:	bne	12638 <__assert_fail@plt+0x1360>
   12610:	eor	r0, sl, #1
   12614:	uxtb	r0, r0
   12618:	add	sp, sp, #44	; 0x2c
   1261c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12620:	mov	r0, #1
   12624:	bl	11ad8 <__assert_fail@plt+0x800>
   12628:	ldr	r0, [pc, #156]	; 126cc <__assert_fail@plt+0x13f4>
   1262c:	bl	1168c <__assert_fail@plt+0x3b4>
   12630:	mov	sl, r0
   12634:	b	12600 <__assert_fail@plt+0x1328>
   12638:	ldr	r3, [pc, #144]	; 126d0 <__assert_fail@plt+0x13f8>
   1263c:	ldr	r0, [r3]
   12640:	bl	12840 <__assert_fail@plt+0x1568>
   12644:	cmn	r0, #1
   12648:	bne	12610 <__assert_fail@plt+0x1338>
   1264c:	bl	111d0 <__errno_location@plt>
   12650:	ldr	r2, [pc, #116]	; 126cc <__assert_fail@plt+0x13f4>
   12654:	ldr	r1, [r0]
   12658:	mov	r0, #1
   1265c:	bl	11140 <error@plt>
   12660:	ldrdeq	r3, [r2], -ip
   12664:	andeq	r4, r2, r4, lsl r1
   12668:			; <UNDEFINED> instruction: 0x000241bc
   1266c:	strdeq	r2, [r1], -r4
   12670:	andeq	r5, r3, r0, ror #3
   12674:	andeq	r3, r2, r8, lsl r8
   12678:	andeq	r5, r3, r8, lsr #2
   1267c:	andeq	r4, r2, r4, lsl r3
   12680:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   12684:	ldrdeq	r5, [r3], -r8
   12688:	strdeq	r4, [r2], -r8
   1268c:	andeq	r4, r2, ip, lsl r2
   12690:	andeq	r4, r2, r0, asr #4
   12694:	andeq	r4, r2, r0, ror #4
   12698:	andeq	r4, r2, r0, lsl #5
   1269c:	andeq	r4, r2, r4, lsr #5
   126a0:	andeq	r4, r2, r4, asr #5
   126a4:	andeq	r4, r2, r8, asr #5
   126a8:	andeq	r4, r2, ip, asr #5
   126ac:	ldrdeq	r4, [r2], -r0
   126b0:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   126b4:	andeq	r4, r2, r4, lsl #6
   126b8:	andeq	r5, r3, r0, ror r1
   126bc:	andeq	r4, r2, r0, lsl r1
   126c0:	muleq	r2, r0, r9
   126c4:	ldrdeq	r5, [r3], -r4
   126c8:	andeq	r5, r3, r0, asr #3
   126cc:	andeq	r3, r2, r8, ror #18
   126d0:	ldrdeq	r5, [r3], -r0
   126d4:	ldr	r3, [pc, #4]	; 126e0 <__assert_fail@plt+0x1408>
   126d8:	str	r0, [r3]
   126dc:	bx	lr
   126e0:	andeq	r5, r3, r4, lsl #11
   126e4:	ldr	r3, [pc, #4]	; 126f0 <__assert_fail@plt+0x1418>
   126e8:	strb	r0, [r3, #4]
   126ec:	bx	lr
   126f0:	andeq	r5, r3, r4, lsl #11
   126f4:	push	{r4, r5, r6, lr}
   126f8:	sub	sp, sp, #8
   126fc:	ldr	r3, [pc, #200]	; 127cc <__assert_fail@plt+0x14f4>
   12700:	ldr	r0, [r3]
   12704:	bl	22dbc <__assert_fail@plt+0x11ae4>
   12708:	cmp	r0, #0
   1270c:	beq	12730 <__assert_fail@plt+0x1458>
   12710:	ldr	r3, [pc, #184]	; 127d0 <__assert_fail@plt+0x14f8>
   12714:	ldrb	r3, [r3, #4]
   12718:	cmp	r3, #0
   1271c:	beq	1274c <__assert_fail@plt+0x1474>
   12720:	bl	111d0 <__errno_location@plt>
   12724:	ldr	r3, [r0]
   12728:	cmp	r3, #32
   1272c:	bne	1274c <__assert_fail@plt+0x1474>
   12730:	ldr	r3, [pc, #156]	; 127d4 <__assert_fail@plt+0x14fc>
   12734:	ldr	r0, [r3]
   12738:	bl	22dbc <__assert_fail@plt+0x11ae4>
   1273c:	cmp	r0, #0
   12740:	bne	127c0 <__assert_fail@plt+0x14e8>
   12744:	add	sp, sp, #8
   12748:	pop	{r4, r5, r6, pc}
   1274c:	mov	r2, #5
   12750:	ldr	r1, [pc, #128]	; 127d8 <__assert_fail@plt+0x1500>
   12754:	mov	r0, #0
   12758:	bl	110c8 <dcgettext@plt>
   1275c:	mov	r4, r0
   12760:	ldr	r3, [pc, #104]	; 127d0 <__assert_fail@plt+0x14f8>
   12764:	ldr	r5, [r3]
   12768:	cmp	r5, #0
   1276c:	beq	127a4 <__assert_fail@plt+0x14cc>
   12770:	bl	111d0 <__errno_location@plt>
   12774:	ldr	r6, [r0]
   12778:	mov	r0, r5
   1277c:	bl	14500 <__assert_fail@plt+0x3228>
   12780:	str	r4, [sp]
   12784:	mov	r3, r0
   12788:	ldr	r2, [pc, #76]	; 127dc <__assert_fail@plt+0x1504>
   1278c:	mov	r1, r6
   12790:	mov	r0, #0
   12794:	bl	11140 <error@plt>
   12798:	ldr	r3, [pc, #64]	; 127e0 <__assert_fail@plt+0x1508>
   1279c:	ldr	r0, [r3]
   127a0:	bl	1105c <_exit@plt>
   127a4:	bl	111d0 <__errno_location@plt>
   127a8:	mov	r3, r4
   127ac:	ldr	r2, [pc, #48]	; 127e4 <__assert_fail@plt+0x150c>
   127b0:	ldr	r1, [r0]
   127b4:	mov	r0, #0
   127b8:	bl	11140 <error@plt>
   127bc:	b	12798 <__assert_fail@plt+0x14c0>
   127c0:	ldr	r3, [pc, #24]	; 127e0 <__assert_fail@plt+0x1508>
   127c4:	ldr	r0, [r3]
   127c8:	bl	1105c <_exit@plt>
   127cc:	ldrdeq	r5, [r3], -r4
   127d0:	andeq	r5, r3, r4, lsl #11
   127d4:	andeq	r5, r3, r8, asr #3
   127d8:	andeq	r4, r2, r4, lsl #9
   127dc:	muleq	r2, r0, r4
   127e0:	andeq	r5, r3, r4, ror r1
   127e4:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   127e8:	push	{r4, r5, lr}
   127ec:	sub	sp, sp, #20
   127f0:	ldr	r1, [sp, #40]	; 0x28
   127f4:	str	r1, [sp, #8]
   127f8:	ldrd	r4, [sp, #32]
   127fc:	strd	r4, [sp]
   12800:	bl	11014 <posix_fadvise64@plt>
   12804:	add	sp, sp, #20
   12808:	pop	{r4, r5, pc}
   1280c:	cmp	r0, #0
   12810:	bxeq	lr
   12814:	push	{r4, lr}
   12818:	sub	sp, sp, #16
   1281c:	mov	r4, r1
   12820:	bl	11218 <fileno@plt>
   12824:	str	r4, [sp, #8]
   12828:	mov	r2, #0
   1282c:	mov	r3, #0
   12830:	strd	r2, [sp]
   12834:	bl	11014 <posix_fadvise64@plt>
   12838:	add	sp, sp, #16
   1283c:	pop	{r4, pc}
   12840:	push	{r4, r5, r6, lr}
   12844:	sub	sp, sp, #8
   12848:	mov	r4, r0
   1284c:	bl	11218 <fileno@plt>
   12850:	cmp	r0, #0
   12854:	blt	128cc <__assert_fail@plt+0x15f4>
   12858:	mov	r0, r4
   1285c:	bl	11164 <__freading@plt>
   12860:	cmp	r0, #0
   12864:	beq	12898 <__assert_fail@plt+0x15c0>
   12868:	mov	r0, r4
   1286c:	bl	11218 <fileno@plt>
   12870:	mov	r3, #1
   12874:	str	r3, [sp]
   12878:	mov	r2, #0
   1287c:	mov	r3, #0
   12880:	bl	11104 <lseek64@plt>
   12884:	mvn	r2, #0
   12888:	mvn	r3, #0
   1288c:	cmp	r1, r3
   12890:	cmpeq	r0, r2
   12894:	beq	128d8 <__assert_fail@plt+0x1600>
   12898:	mov	r0, r4
   1289c:	bl	128e8 <__assert_fail@plt+0x1610>
   128a0:	cmp	r0, #0
   128a4:	beq	128d8 <__assert_fail@plt+0x1600>
   128a8:	bl	111d0 <__errno_location@plt>
   128ac:	mov	r5, r0
   128b0:	ldr	r6, [r0]
   128b4:	mov	r0, r4
   128b8:	bl	11230 <fclose@plt>
   128bc:	cmp	r6, #0
   128c0:	strne	r6, [r5]
   128c4:	mvnne	r0, #0
   128c8:	b	128e0 <__assert_fail@plt+0x1608>
   128cc:	mov	r0, r4
   128d0:	bl	11230 <fclose@plt>
   128d4:	b	128e0 <__assert_fail@plt+0x1608>
   128d8:	mov	r0, r4
   128dc:	bl	11230 <fclose@plt>
   128e0:	add	sp, sp, #8
   128e4:	pop	{r4, r5, r6, pc}
   128e8:	push	{r4, lr}
   128ec:	sub	sp, sp, #8
   128f0:	subs	r4, r0, #0
   128f4:	beq	12908 <__assert_fail@plt+0x1630>
   128f8:	mov	r0, r4
   128fc:	bl	11164 <__freading@plt>
   12900:	cmp	r0, #0
   12904:	bne	12918 <__assert_fail@plt+0x1640>
   12908:	mov	r0, r4
   1290c:	bl	1102c <fflush@plt>
   12910:	add	sp, sp, #8
   12914:	pop	{r4, pc}
   12918:	ldr	r3, [r4]
   1291c:	tst	r3, #256	; 0x100
   12920:	bne	12930 <__assert_fail@plt+0x1658>
   12924:	mov	r0, r4
   12928:	bl	1102c <fflush@plt>
   1292c:	b	12910 <__assert_fail@plt+0x1638>
   12930:	mov	r3, #1
   12934:	str	r3, [sp]
   12938:	mov	r2, #0
   1293c:	mov	r3, #0
   12940:	mov	r0, r4
   12944:	bl	1294c <__assert_fail@plt+0x1674>
   12948:	b	12924 <__assert_fail@plt+0x164c>
   1294c:	push	{r4, r5, r6, r7, lr}
   12950:	sub	sp, sp, #12
   12954:	mov	r4, r0
   12958:	mov	r6, r2
   1295c:	mov	r7, r3
   12960:	ldr	r5, [sp, #32]
   12964:	ldr	r2, [r0, #8]
   12968:	ldr	r3, [r0, #4]
   1296c:	cmp	r2, r3
   12970:	beq	12990 <__assert_fail@plt+0x16b8>
   12974:	str	r5, [sp]
   12978:	mov	r2, r6
   1297c:	mov	r3, r7
   12980:	mov	r0, r4
   12984:	bl	1123c <fseeko64@plt>
   12988:	add	sp, sp, #12
   1298c:	pop	{r4, r5, r6, r7, pc}
   12990:	ldr	r2, [r0, #20]
   12994:	ldr	r3, [r0, #16]
   12998:	cmp	r2, r3
   1299c:	bne	12974 <__assert_fail@plt+0x169c>
   129a0:	ldr	r3, [r0, #36]	; 0x24
   129a4:	cmp	r3, #0
   129a8:	bne	12974 <__assert_fail@plt+0x169c>
   129ac:	bl	11218 <fileno@plt>
   129b0:	str	r5, [sp]
   129b4:	mov	r2, r6
   129b8:	mov	r3, r7
   129bc:	bl	11104 <lseek64@plt>
   129c0:	mvn	r2, #0
   129c4:	mvn	r3, #0
   129c8:	cmp	r1, r3
   129cc:	cmpeq	r0, r2
   129d0:	beq	129ec <__assert_fail@plt+0x1714>
   129d4:	ldr	r3, [r4]
   129d8:	bic	r3, r3, #16
   129dc:	str	r3, [r4]
   129e0:	strd	r0, [r4, #80]	; 0x50
   129e4:	mov	r0, #0
   129e8:	b	12988 <__assert_fail@plt+0x16b0>
   129ec:	mvn	r0, #0
   129f0:	b	12988 <__assert_fail@plt+0x16b0>
   129f4:	mov	r3, #0
   129f8:	str	r3, [r0]
   129fc:	str	r3, [r0, #4]
   12a00:	str	r3, [r0, #8]
   12a04:	bx	lr
   12a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a0c:	sub	sp, sp, #12
   12a10:	ldr	r9, [r0, #8]
   12a14:	ldr	r8, [r0]
   12a18:	add	r8, r9, r8
   12a1c:	ldr	r3, [r1]
   12a20:	tst	r3, #16
   12a24:	bne	12b00 <__assert_fail@plt+0x1828>
   12a28:	mov	r7, r2
   12a2c:	mov	r6, r1
   12a30:	mov	sl, r0
   12a34:	mov	r5, r9
   12a38:	mov	fp, #1
   12a3c:	b	12a6c <__assert_fail@plt+0x1794>
   12a40:	mov	r0, r6
   12a44:	bl	11248 <__uflow@plt>
   12a48:	mov	r4, r0
   12a4c:	b	12a88 <__assert_fail@plt+0x17b0>
   12a50:	cmp	r5, r8
   12a54:	movne	r3, r5
   12a58:	beq	12ab8 <__assert_fail@plt+0x17e0>
   12a5c:	add	r5, r3, #1
   12a60:	strb	r4, [r3]
   12a64:	cmp	r4, r7
   12a68:	beq	12aec <__assert_fail@plt+0x1814>
   12a6c:	ldr	r3, [r6, #4]
   12a70:	ldr	r2, [r6, #8]
   12a74:	cmp	r3, r2
   12a78:	bcs	12a40 <__assert_fail@plt+0x1768>
   12a7c:	add	r2, r3, #1
   12a80:	str	r2, [r6, #4]
   12a84:	ldrb	r4, [r3]
   12a88:	cmn	r4, #1
   12a8c:	bne	12a50 <__assert_fail@plt+0x1778>
   12a90:	cmp	r9, r5
   12a94:	beq	12b08 <__assert_fail@plt+0x1830>
   12a98:	ldr	r3, [r6]
   12a9c:	tst	r3, #32
   12aa0:	bne	12b10 <__assert_fail@plt+0x1838>
   12aa4:	ldrb	r3, [r5, #-1]
   12aa8:	cmp	r3, r7
   12aac:	beq	12aec <__assert_fail@plt+0x1814>
   12ab0:	mov	r4, r7
   12ab4:	b	12a50 <__assert_fail@plt+0x1778>
   12ab8:	ldr	r5, [sl]
   12abc:	str	fp, [sp]
   12ac0:	mvn	r3, #0
   12ac4:	mov	r2, fp
   12ac8:	mov	r1, sl
   12acc:	mov	r0, r9
   12ad0:	bl	22120 <__assert_fail@plt+0x10e48>
   12ad4:	mov	r9, r0
   12ad8:	add	r3, r0, r5
   12adc:	str	r0, [sl, #8]
   12ae0:	ldr	r8, [sl]
   12ae4:	add	r8, r0, r8
   12ae8:	b	12a5c <__assert_fail@plt+0x1784>
   12aec:	sub	r5, r5, r9
   12af0:	str	r5, [sl, #4]
   12af4:	mov	r0, sl
   12af8:	add	sp, sp, #12
   12afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b00:	mov	r0, #0
   12b04:	b	12af8 <__assert_fail@plt+0x1820>
   12b08:	mov	r0, #0
   12b0c:	b	12af8 <__assert_fail@plt+0x1820>
   12b10:	mov	r0, #0
   12b14:	b	12af8 <__assert_fail@plt+0x1820>
   12b18:	push	{r4, lr}
   12b1c:	mov	r2, #10
   12b20:	bl	12a08 <__assert_fail@plt+0x1730>
   12b24:	pop	{r4, pc}
   12b28:	push	{r4, lr}
   12b2c:	ldr	r0, [r0, #8]
   12b30:	bl	22f00 <__assert_fail@plt+0x11c28>
   12b34:	pop	{r4, pc}
   12b38:	push	{r4, r5, r6, lr}
   12b3c:	subs	r4, r0, #0
   12b40:	beq	12bb8 <__assert_fail@plt+0x18e0>
   12b44:	mov	r1, #47	; 0x2f
   12b48:	mov	r0, r4
   12b4c:	bl	1126c <strrchr@plt>
   12b50:	cmp	r0, #0
   12b54:	addne	r5, r0, #1
   12b58:	moveq	r5, r4
   12b5c:	sub	r3, r5, r4
   12b60:	cmp	r3, #6
   12b64:	ble	12ba4 <__assert_fail@plt+0x18cc>
   12b68:	mov	r2, #7
   12b6c:	ldr	r1, [pc, #96]	; 12bd4 <__assert_fail@plt+0x18fc>
   12b70:	sub	r0, r5, #7
   12b74:	bl	112c0 <strncmp@plt>
   12b78:	cmp	r0, #0
   12b7c:	bne	12ba4 <__assert_fail@plt+0x18cc>
   12b80:	mov	r2, #3
   12b84:	ldr	r1, [pc, #76]	; 12bd8 <__assert_fail@plt+0x1900>
   12b88:	mov	r0, r5
   12b8c:	bl	112c0 <strncmp@plt>
   12b90:	cmp	r0, #0
   12b94:	addeq	r4, r5, #3
   12b98:	ldreq	r3, [pc, #60]	; 12bdc <__assert_fail@plt+0x1904>
   12b9c:	streq	r4, [r3]
   12ba0:	movne	r4, r5
   12ba4:	ldr	r3, [pc, #52]	; 12be0 <__assert_fail@plt+0x1908>
   12ba8:	str	r4, [r3]
   12bac:	ldr	r3, [pc, #48]	; 12be4 <__assert_fail@plt+0x190c>
   12bb0:	str	r4, [r3]
   12bb4:	pop	{r4, r5, r6, pc}
   12bb8:	ldr	r3, [pc, #40]	; 12be8 <__assert_fail@plt+0x1910>
   12bbc:	ldr	r3, [r3]
   12bc0:	mov	r2, #55	; 0x37
   12bc4:	mov	r1, #1
   12bc8:	ldr	r0, [pc, #28]	; 12bec <__assert_fail@plt+0x1914>
   12bcc:	bl	110f8 <fwrite@plt>
   12bd0:	bl	112cc <abort@plt>
   12bd4:	ldrdeq	r4, [r2], -r0
   12bd8:	ldrdeq	r4, [r2], -r8
   12bdc:			; <UNDEFINED> instruction: 0x000351b8
   12be0:	andeq	r5, r3, ip, lsl #11
   12be4:			; <UNDEFINED> instruction: 0x000351bc
   12be8:	andeq	r5, r3, r8, asr #3
   12bec:	muleq	r2, r8, r4
   12bf0:	push	{r4, r5, r6, lr}
   12bf4:	mov	r5, r0
   12bf8:	mov	r4, r1
   12bfc:	mov	r2, #48	; 0x30
   12c00:	mov	r1, #0
   12c04:	bl	111f4 <memset@plt>
   12c08:	cmp	r4, #10
   12c0c:	beq	12c1c <__assert_fail@plt+0x1944>
   12c10:	str	r4, [r5]
   12c14:	mov	r0, r5
   12c18:	pop	{r4, r5, r6, pc}
   12c1c:	bl	112cc <abort@plt>
   12c20:	push	{r4, r5, r6, lr}
   12c24:	mov	r4, r0
   12c28:	mov	r5, r1
   12c2c:	mov	r2, #5
   12c30:	mov	r1, r0
   12c34:	mov	r0, #0
   12c38:	bl	110c8 <dcgettext@plt>
   12c3c:	cmp	r4, r0
   12c40:	popne	{r4, r5, r6, pc}
   12c44:	bl	22f58 <__assert_fail@plt+0x11c80>
   12c48:	ldrb	r3, [r0]
   12c4c:	bic	r3, r3, #32
   12c50:	cmp	r3, #85	; 0x55
   12c54:	beq	12cd0 <__assert_fail@plt+0x19f8>
   12c58:	cmp	r3, #71	; 0x47
   12c5c:	bne	12d2c <__assert_fail@plt+0x1a54>
   12c60:	ldrb	r3, [r0, #1]
   12c64:	bic	r3, r3, #32
   12c68:	cmp	r3, #66	; 0x42
   12c6c:	bne	12d2c <__assert_fail@plt+0x1a54>
   12c70:	ldrb	r3, [r0, #2]
   12c74:	cmp	r3, #49	; 0x31
   12c78:	bne	12d2c <__assert_fail@plt+0x1a54>
   12c7c:	ldrb	r3, [r0, #3]
   12c80:	cmp	r3, #56	; 0x38
   12c84:	bne	12d2c <__assert_fail@plt+0x1a54>
   12c88:	ldrb	r3, [r0, #4]
   12c8c:	cmp	r3, #48	; 0x30
   12c90:	bne	12d2c <__assert_fail@plt+0x1a54>
   12c94:	ldrb	r3, [r0, #5]
   12c98:	cmp	r3, #51	; 0x33
   12c9c:	bne	12d2c <__assert_fail@plt+0x1a54>
   12ca0:	ldrb	r3, [r0, #6]
   12ca4:	cmp	r3, #48	; 0x30
   12ca8:	bne	12d2c <__assert_fail@plt+0x1a54>
   12cac:	ldrb	r3, [r0, #7]
   12cb0:	cmp	r3, #0
   12cb4:	bne	12d2c <__assert_fail@plt+0x1a54>
   12cb8:	ldrb	r2, [r4]
   12cbc:	ldr	r3, [pc, #124]	; 12d40 <__assert_fail@plt+0x1a68>
   12cc0:	ldr	r0, [pc, #124]	; 12d44 <__assert_fail@plt+0x1a6c>
   12cc4:	cmp	r2, #96	; 0x60
   12cc8:	movne	r0, r3
   12ccc:	pop	{r4, r5, r6, pc}
   12cd0:	ldrb	r3, [r0, #1]
   12cd4:	bic	r3, r3, #32
   12cd8:	cmp	r3, #84	; 0x54
   12cdc:	bne	12d2c <__assert_fail@plt+0x1a54>
   12ce0:	ldrb	r3, [r0, #2]
   12ce4:	bic	r3, r3, #32
   12ce8:	cmp	r3, #70	; 0x46
   12cec:	bne	12d2c <__assert_fail@plt+0x1a54>
   12cf0:	ldrb	r3, [r0, #3]
   12cf4:	cmp	r3, #45	; 0x2d
   12cf8:	bne	12d2c <__assert_fail@plt+0x1a54>
   12cfc:	ldrb	r3, [r0, #4]
   12d00:	cmp	r3, #56	; 0x38
   12d04:	bne	12d2c <__assert_fail@plt+0x1a54>
   12d08:	ldrb	r3, [r0, #5]
   12d0c:	cmp	r3, #0
   12d10:	bne	12d2c <__assert_fail@plt+0x1a54>
   12d14:	ldrb	r2, [r4]
   12d18:	ldr	r3, [pc, #40]	; 12d48 <__assert_fail@plt+0x1a70>
   12d1c:	ldr	r0, [pc, #40]	; 12d4c <__assert_fail@plt+0x1a74>
   12d20:	cmp	r2, #96	; 0x60
   12d24:	movne	r0, r3
   12d28:	pop	{r4, r5, r6, pc}
   12d2c:	ldr	r3, [pc, #28]	; 12d50 <__assert_fail@plt+0x1a78>
   12d30:	ldr	r0, [pc, #28]	; 12d54 <__assert_fail@plt+0x1a7c>
   12d34:	cmp	r5, #9
   12d38:	movne	r0, r3
   12d3c:	pop	{r4, r5, r6, pc}
   12d40:	andeq	r4, r2, r4, lsr r5
   12d44:	andeq	r4, r2, r0, asr #10
   12d48:	andeq	r4, r2, r0, lsr r5
   12d4c:	andeq	r4, r2, r4, asr #10
   12d50:	andeq	r4, r2, r8, lsr r5
   12d54:	andeq	r4, r2, ip, lsr r5
   12d58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d5c:	sub	sp, sp, #116	; 0x74
   12d60:	str	r0, [sp, #36]	; 0x24
   12d64:	mov	sl, r1
   12d68:	str	r2, [sp, #52]	; 0x34
   12d6c:	str	r3, [sp, #28]
   12d70:	ldr	r8, [sp, #152]	; 0x98
   12d74:	bl	11110 <__ctype_get_mb_cur_max@plt>
   12d78:	str	r0, [sp, #84]	; 0x54
   12d7c:	ldr	r3, [sp, #156]	; 0x9c
   12d80:	lsr	r3, r3, #1
   12d84:	and	r3, r3, #1
   12d88:	str	r3, [sp, #32]
   12d8c:	mov	r3, #1
   12d90:	str	r3, [sp, #40]	; 0x28
   12d94:	mov	r3, #0
   12d98:	str	r3, [sp, #80]	; 0x50
   12d9c:	str	r3, [sp, #44]	; 0x2c
   12da0:	str	r3, [sp, #48]	; 0x30
   12da4:	str	r3, [sp, #60]	; 0x3c
   12da8:	str	r3, [sp, #72]	; 0x48
   12dac:	str	r3, [sp, #76]	; 0x4c
   12db0:	mov	r7, sl
   12db4:	mov	sl, r8
   12db8:	cmp	sl, #10
   12dbc:	ldrls	pc, [pc, sl, lsl #2]
   12dc0:	b	12f78 <__assert_fail@plt+0x1ca0>
   12dc4:	andeq	r2, r1, r8, lsr #28
   12dc8:	strdeq	r2, [r1], -r8
   12dcc:	andeq	r2, r1, r4, asr pc
   12dd0:	strdeq	r2, [r1], -r0
   12dd4:	andeq	r2, r1, r8, lsl #30
   12dd8:	andeq	r2, r1, r8, lsr lr
   12ddc:	andeq	r3, r1, r4, lsr #29
   12de0:	andeq	r2, r1, ip, ror pc
   12de4:	andeq	r2, r1, r4, ror lr
   12de8:	andeq	r2, r1, r4, ror lr
   12dec:	andeq	r2, r1, r4, ror lr
   12df0:	mov	r3, #1
   12df4:	str	r3, [sp, #48]	; 0x30
   12df8:	mov	r3, #1
   12dfc:	str	r3, [sp, #32]
   12e00:	str	r3, [sp, #60]	; 0x3c
   12e04:	ldr	r3, [pc, #4068]	; 13df0 <__assert_fail@plt+0x2b18>
   12e08:	str	r3, [sp, #72]	; 0x48
   12e0c:	mov	fp, #0
   12e10:	mov	sl, #2
   12e14:	mov	r6, #0
   12e18:	ldr	r3, [sp, #48]	; 0x30
   12e1c:	eor	r3, r3, #1
   12e20:	str	r3, [sp, #68]	; 0x44
   12e24:	b	1370c <__assert_fail@plt+0x2434>
   12e28:	mov	r3, #0
   12e2c:	str	r3, [sp, #32]
   12e30:	mov	fp, r3
   12e34:	b	12e14 <__assert_fail@plt+0x1b3c>
   12e38:	ldr	r3, [sp, #32]
   12e3c:	cmp	r3, #0
   12e40:	bne	12f94 <__assert_fail@plt+0x1cbc>
   12e44:	cmp	r7, #0
   12e48:	beq	12fb4 <__assert_fail@plt+0x1cdc>
   12e4c:	ldr	r3, [sp, #36]	; 0x24
   12e50:	mov	r2, #34	; 0x22
   12e54:	strb	r2, [r3]
   12e58:	mov	r3, #1
   12e5c:	str	r3, [sp, #48]	; 0x30
   12e60:	str	r3, [sp, #60]	; 0x3c
   12e64:	ldr	r3, [pc, #3980]	; 13df8 <__assert_fail@plt+0x2b20>
   12e68:	str	r3, [sp, #72]	; 0x48
   12e6c:	mov	fp, #1
   12e70:	b	12e14 <__assert_fail@plt+0x1b3c>
   12e74:	cmp	sl, #10
   12e78:	beq	12e9c <__assert_fail@plt+0x1bc4>
   12e7c:	mov	r1, sl
   12e80:	ldr	r0, [pc, #3948]	; 13df4 <__assert_fail@plt+0x2b1c>
   12e84:	bl	12c20 <__assert_fail@plt+0x1948>
   12e88:	str	r0, [sp, #164]	; 0xa4
   12e8c:	mov	r1, sl
   12e90:	ldr	r0, [pc, #3928]	; 13df0 <__assert_fail@plt+0x2b18>
   12e94:	bl	12c20 <__assert_fail@plt+0x1948>
   12e98:	str	r0, [sp, #168]	; 0xa8
   12e9c:	ldr	r3, [sp, #32]
   12ea0:	cmp	r3, #0
   12ea4:	movne	fp, #0
   12ea8:	bne	12ee0 <__assert_fail@plt+0x1c08>
   12eac:	ldr	r3, [sp, #164]	; 0xa4
   12eb0:	ldrb	r3, [r3]
   12eb4:	cmp	r3, #0
   12eb8:	beq	12f00 <__assert_fail@plt+0x1c28>
   12ebc:	ldr	r2, [sp, #164]	; 0xa4
   12ec0:	mov	fp, #0
   12ec4:	ldr	r1, [sp, #36]	; 0x24
   12ec8:	cmp	r7, fp
   12ecc:	strbhi	r3, [r1, fp]
   12ed0:	add	fp, fp, #1
   12ed4:	ldrb	r3, [r2, #1]!
   12ed8:	cmp	r3, #0
   12edc:	bne	12ec8 <__assert_fail@plt+0x1bf0>
   12ee0:	ldr	r0, [sp, #168]	; 0xa8
   12ee4:	bl	111b8 <strlen@plt>
   12ee8:	str	r0, [sp, #60]	; 0x3c
   12eec:	ldr	r3, [sp, #168]	; 0xa8
   12ef0:	str	r3, [sp, #72]	; 0x48
   12ef4:	mov	r3, #1
   12ef8:	str	r3, [sp, #48]	; 0x30
   12efc:	b	12e14 <__assert_fail@plt+0x1b3c>
   12f00:	mov	fp, #0
   12f04:	b	12ee0 <__assert_fail@plt+0x1c08>
   12f08:	ldr	r3, [sp, #32]
   12f0c:	cmp	r3, #0
   12f10:	bne	12fd0 <__assert_fail@plt+0x1cf8>
   12f14:	mov	r3, #1
   12f18:	str	r3, [sp, #48]	; 0x30
   12f1c:	cmp	r7, #0
   12f20:	beq	12fec <__assert_fail@plt+0x1d14>
   12f24:	ldr	r3, [sp, #36]	; 0x24
   12f28:	mov	r2, #39	; 0x27
   12f2c:	strb	r2, [r3]
   12f30:	mov	r3, #0
   12f34:	str	r3, [sp, #32]
   12f38:	mov	r3, #1
   12f3c:	str	r3, [sp, #60]	; 0x3c
   12f40:	ldr	r3, [pc, #3752]	; 13df0 <__assert_fail@plt+0x2b18>
   12f44:	str	r3, [sp, #72]	; 0x48
   12f48:	mov	fp, #1
   12f4c:	mov	sl, #2
   12f50:	b	12e14 <__assert_fail@plt+0x1b3c>
   12f54:	ldr	r3, [sp, #32]
   12f58:	cmp	r3, #0
   12f5c:	beq	12f1c <__assert_fail@plt+0x1c44>
   12f60:	mov	r3, #1
   12f64:	str	r3, [sp, #60]	; 0x3c
   12f68:	ldr	r3, [pc, #3712]	; 13df0 <__assert_fail@plt+0x2b18>
   12f6c:	str	r3, [sp, #72]	; 0x48
   12f70:	mov	fp, #0
   12f74:	b	12e14 <__assert_fail@plt+0x1b3c>
   12f78:	bl	112cc <abort@plt>
   12f7c:	mov	r3, #0
   12f80:	str	r3, [sp, #32]
   12f84:	mov	r3, #1
   12f88:	str	r3, [sp, #48]	; 0x30
   12f8c:	mov	fp, #0
   12f90:	b	12e14 <__assert_fail@plt+0x1b3c>
   12f94:	ldr	r3, [sp, #32]
   12f98:	str	r3, [sp, #48]	; 0x30
   12f9c:	mov	r3, #1
   12fa0:	str	r3, [sp, #60]	; 0x3c
   12fa4:	ldr	r3, [pc, #3660]	; 13df8 <__assert_fail@plt+0x2b20>
   12fa8:	str	r3, [sp, #72]	; 0x48
   12fac:	mov	fp, #0
   12fb0:	b	12e14 <__assert_fail@plt+0x1b3c>
   12fb4:	mov	r3, #1
   12fb8:	str	r3, [sp, #48]	; 0x30
   12fbc:	str	r3, [sp, #60]	; 0x3c
   12fc0:	ldr	r3, [pc, #3632]	; 13df8 <__assert_fail@plt+0x2b20>
   12fc4:	str	r3, [sp, #72]	; 0x48
   12fc8:	mov	fp, #1
   12fcc:	b	12e14 <__assert_fail@plt+0x1b3c>
   12fd0:	mov	r3, #1
   12fd4:	str	r3, [sp, #60]	; 0x3c
   12fd8:	ldr	r3, [pc, #3600]	; 13df0 <__assert_fail@plt+0x2b18>
   12fdc:	str	r3, [sp, #72]	; 0x48
   12fe0:	mov	fp, #0
   12fe4:	mov	sl, #2
   12fe8:	b	12e14 <__assert_fail@plt+0x1b3c>
   12fec:	mov	r3, #0
   12ff0:	str	r3, [sp, #32]
   12ff4:	mov	r3, #1
   12ff8:	str	r3, [sp, #60]	; 0x3c
   12ffc:	ldr	r3, [pc, #3564]	; 13df0 <__assert_fail@plt+0x2b18>
   13000:	str	r3, [sp, #72]	; 0x48
   13004:	mov	fp, #1
   13008:	mov	sl, #2
   1300c:	b	12e14 <__assert_fail@plt+0x1b3c>
   13010:	mov	r3, #0
   13014:	str	r3, [sp, #56]	; 0x38
   13018:	ldr	r3, [sp, #52]	; 0x34
   1301c:	add	r2, r3, r6
   13020:	str	r2, [sp, #64]	; 0x40
   13024:	ldrb	r4, [r3, r6]
   13028:	cmp	r4, #126	; 0x7e
   1302c:	ldrls	pc, [pc, r4, lsl #2]
   13030:	b	1386c <__assert_fail@plt+0x2594>
   13034:	andeq	r3, r1, ip, asr #4
   13038:	andeq	r3, r1, ip, ror #16
   1303c:	andeq	r3, r1, ip, ror #16
   13040:	andeq	r3, r1, ip, ror #16
   13044:	andeq	r3, r1, ip, ror #16
   13048:	andeq	r3, r1, ip, ror #16
   1304c:	andeq	r3, r1, ip, ror #16
   13050:	andeq	r3, r1, r8, lsr #11
   13054:	andeq	r3, r1, r4, asr #4
   13058:	andeq	r3, r1, r0, ror #10
   1305c:	andeq	r3, r1, r8, asr r5
   13060:	andeq	r3, r1, r8, asr #9
   13064:	andeq	r3, r1, r0, asr #9
   13068:	andeq	r3, r1, ip, lsr r2
   1306c:	andeq	r3, r1, ip, ror #16
   13070:	andeq	r3, r1, ip, ror #16
   13074:	andeq	r3, r1, ip, ror #16
   13078:	andeq	r3, r1, ip, ror #16
   1307c:	andeq	r3, r1, ip, ror #16
   13080:	andeq	r3, r1, ip, ror #16
   13084:	andeq	r3, r1, ip, ror #16
   13088:	andeq	r3, r1, ip, ror #16
   1308c:	andeq	r3, r1, ip, ror #16
   13090:	andeq	r3, r1, ip, ror #16
   13094:	andeq	r3, r1, ip, ror #16
   13098:	andeq	r3, r1, ip, ror #16
   1309c:	andeq	r3, r1, ip, ror #16
   130a0:	andeq	r3, r1, ip, ror #16
   130a4:	andeq	r3, r1, ip, ror #16
   130a8:	andeq	r3, r1, ip, ror #16
   130ac:	andeq	r3, r1, ip, ror #16
   130b0:	andeq	r3, r1, ip, ror #16
   130b4:	strdeq	r3, [r1], -ip
   130b8:	strdeq	r3, [r1], -r8
   130bc:	strdeq	r3, [r1], -r8
   130c0:	ldrdeq	r3, [r1], -r0
   130c4:	strdeq	r3, [r1], -r8
   130c8:	andeq	r3, r1, r0, asr #24
   130cc:	strdeq	r3, [r1], -r8
   130d0:	ldrdeq	r3, [r1], -r0
   130d4:	strdeq	r3, [r1], -r8
   130d8:	strdeq	r3, [r1], -r8
   130dc:	strdeq	r3, [r1], -r8
   130e0:	andeq	r3, r1, r0, asr #24
   130e4:	andeq	r3, r1, r0, asr #24
   130e8:	andeq	r3, r1, r0, asr #24
   130ec:	andeq	r3, r1, r0, asr #24
   130f0:	andeq	r3, r1, r0, asr #24
   130f4:	andeq	r3, r1, r0, asr #24
   130f8:	andeq	r3, r1, r0, asr #24
   130fc:	andeq	r3, r1, r0, asr #24
   13100:	andeq	r3, r1, r0, asr #24
   13104:	andeq	r3, r1, r0, asr #24
   13108:	andeq	r3, r1, r0, asr #24
   1310c:	andeq	r3, r1, r0, asr #24
   13110:	andeq	r3, r1, r0, asr #24
   13114:	andeq	r3, r1, r0, asr #24
   13118:	andeq	r3, r1, r0, asr #24
   1311c:	andeq	r3, r1, r0, asr #24
   13120:	strdeq	r3, [r1], -r8
   13124:	strdeq	r3, [r1], -r8
   13128:	strdeq	r3, [r1], -r8
   1312c:	strdeq	r3, [r1], -r8
   13130:	andeq	r3, r1, r4, asr r3
   13134:	andeq	r3, r1, ip, ror #16
   13138:	andeq	r3, r1, r0, asr #24
   1313c:	andeq	r3, r1, r0, asr #24
   13140:	andeq	r3, r1, r0, asr #24
   13144:	andeq	r3, r1, r0, asr #24
   13148:	andeq	r3, r1, r0, asr #24
   1314c:	andeq	r3, r1, r0, asr #24
   13150:	andeq	r3, r1, r0, asr #24
   13154:	andeq	r3, r1, r0, asr #24
   13158:	andeq	r3, r1, r0, asr #24
   1315c:	andeq	r3, r1, r0, asr #24
   13160:	andeq	r3, r1, r0, asr #24
   13164:	andeq	r3, r1, r0, asr #24
   13168:	andeq	r3, r1, r0, asr #24
   1316c:	andeq	r3, r1, r0, asr #24
   13170:	andeq	r3, r1, r0, asr #24
   13174:	andeq	r3, r1, r0, asr #24
   13178:	andeq	r3, r1, r0, asr #24
   1317c:	andeq	r3, r1, r0, asr #24
   13180:	andeq	r3, r1, r0, asr #24
   13184:	andeq	r3, r1, r0, asr #24
   13188:	andeq	r3, r1, r0, asr #24
   1318c:	andeq	r3, r1, r0, asr #24
   13190:	andeq	r3, r1, r0, asr #24
   13194:	andeq	r3, r1, r0, asr #24
   13198:	andeq	r3, r1, r0, asr #24
   1319c:	andeq	r3, r1, r0, asr #24
   131a0:	strdeq	r3, [r1], -r8
   131a4:	ldrdeq	r3, [r1], -r0
   131a8:	andeq	r3, r1, r0, asr #24
   131ac:	strdeq	r3, [r1], -r8
   131b0:	andeq	r3, r1, r0, asr #24
   131b4:	strdeq	r3, [r1], -r8
   131b8:	andeq	r3, r1, r0, asr #24
   131bc:	andeq	r3, r1, r0, asr #24
   131c0:	andeq	r3, r1, r0, asr #24
   131c4:	andeq	r3, r1, r0, asr #24
   131c8:	andeq	r3, r1, r0, asr #24
   131cc:	andeq	r3, r1, r0, asr #24
   131d0:	andeq	r3, r1, r0, asr #24
   131d4:	andeq	r3, r1, r0, asr #24
   131d8:	andeq	r3, r1, r0, asr #24
   131dc:	andeq	r3, r1, r0, asr #24
   131e0:	andeq	r3, r1, r0, asr #24
   131e4:	andeq	r3, r1, r0, asr #24
   131e8:	andeq	r3, r1, r0, asr #24
   131ec:	andeq	r3, r1, r0, asr #24
   131f0:	andeq	r3, r1, r0, asr #24
   131f4:	andeq	r3, r1, r0, asr #24
   131f8:	andeq	r3, r1, r0, asr #24
   131fc:	andeq	r3, r1, r0, asr #24
   13200:	andeq	r3, r1, r0, asr #24
   13204:	andeq	r3, r1, r0, asr #24
   13208:	andeq	r3, r1, r0, asr #24
   1320c:	andeq	r3, r1, r0, asr #24
   13210:	andeq	r3, r1, r0, asr #24
   13214:	andeq	r3, r1, r0, asr #24
   13218:	andeq	r3, r1, r0, asr #24
   1321c:	andeq	r3, r1, r0, asr #24
   13220:			; <UNDEFINED> instruction: 0x000135b0
   13224:	strdeq	r3, [r1], -r8
   13228:			; <UNDEFINED> instruction: 0x000135b0
   1322c:	ldrdeq	r3, [r1], -r0
   13230:	mov	r3, #0
   13234:	str	r3, [sp, #56]	; 0x38
   13238:	b	13018 <__assert_fail@plt+0x1d40>
   1323c:	mov	r3, #114	; 0x72
   13240:	b	13564 <__assert_fail@plt+0x228c>
   13244:	mov	r3, #98	; 0x62
   13248:	b	1357c <__assert_fail@plt+0x22a4>
   1324c:	ldr	r3, [sp, #48]	; 0x30
   13250:	cmp	r3, #0
   13254:	beq	1333c <__assert_fail@plt+0x2064>
   13258:	ldr	r3, [sp, #32]
   1325c:	cmp	r3, #0
   13260:	bne	13dc4 <__assert_fail@plt+0x2aec>
   13264:	ldr	r3, [sp, #44]	; 0x2c
   13268:	eor	r3, r3, #1
   1326c:	cmp	sl, #2
   13270:	movne	r3, #0
   13274:	andeq	r3, r3, #1
   13278:	cmp	r3, #0
   1327c:	moveq	r2, fp
   13280:	beq	132c4 <__assert_fail@plt+0x1fec>
   13284:	cmp	r7, fp
   13288:	ldrhi	r2, [sp, #36]	; 0x24
   1328c:	movhi	r1, #39	; 0x27
   13290:	strbhi	r1, [r2, fp]
   13294:	add	r2, fp, #1
   13298:	cmp	r7, r2
   1329c:	ldrhi	r1, [sp, #36]	; 0x24
   132a0:	movhi	r0, #36	; 0x24
   132a4:	strbhi	r0, [r1, r2]
   132a8:	add	r2, fp, #2
   132ac:	cmp	r7, r2
   132b0:	ldrhi	r1, [sp, #36]	; 0x24
   132b4:	movhi	r0, #39	; 0x27
   132b8:	strbhi	r0, [r1, r2]
   132bc:	add	r2, fp, #3
   132c0:	str	r3, [sp, #44]	; 0x2c
   132c4:	cmp	r7, r2
   132c8:	ldrhi	r3, [sp, #36]	; 0x24
   132cc:	movhi	r1, #92	; 0x5c
   132d0:	strbhi	r1, [r3, r2]
   132d4:	add	fp, r2, #1
   132d8:	cmp	r5, #0
   132dc:	beq	13c48 <__assert_fail@plt+0x2970>
   132e0:	add	r3, r6, #1
   132e4:	ldr	r1, [sp, #28]
   132e8:	cmp	r1, r3
   132ec:	bls	13c58 <__assert_fail@plt+0x2980>
   132f0:	ldr	r1, [sp, #52]	; 0x34
   132f4:	ldrb	r3, [r1, r3]
   132f8:	sub	r3, r3, #48	; 0x30
   132fc:	uxtb	r3, r3
   13300:	cmp	r3, #9
   13304:	bhi	13c64 <__assert_fail@plt+0x298c>
   13308:	cmp	r7, fp
   1330c:	movhi	r3, #48	; 0x30
   13310:	ldrhi	r1, [sp, #36]	; 0x24
   13314:	strbhi	r3, [r1, fp]
   13318:	add	r3, r2, #2
   1331c:	cmp	r7, r3
   13320:	movhi	r1, #48	; 0x30
   13324:	ldrhi	r0, [sp, #36]	; 0x24
   13328:	strbhi	r1, [r0, r3]
   1332c:	add	fp, r2, #3
   13330:	ldr	r8, [sp, #32]
   13334:	mov	r4, #48	; 0x30
   13338:	b	13614 <__assert_fail@plt+0x233c>
   1333c:	ldr	r3, [sp, #156]	; 0x9c
   13340:	tst	r3, #1
   13344:	bne	13708 <__assert_fail@plt+0x2430>
   13348:	ldr	r5, [sp, #48]	; 0x30
   1334c:	mov	r8, r5
   13350:	b	13614 <__assert_fail@plt+0x233c>
   13354:	cmp	sl, #2
   13358:	beq	13370 <__assert_fail@plt+0x2098>
   1335c:	cmp	sl, #5
   13360:	beq	13388 <__assert_fail@plt+0x20b0>
   13364:	mov	r8, #0
   13368:	mov	r5, r8
   1336c:	b	13614 <__assert_fail@plt+0x233c>
   13370:	ldr	r3, [sp, #32]
   13374:	cmp	r3, #0
   13378:	bne	13dd8 <__assert_fail@plt+0x2b00>
   1337c:	mov	r8, r3
   13380:	mov	r5, r3
   13384:	b	13614 <__assert_fail@plt+0x233c>
   13388:	ldr	r3, [sp, #156]	; 0x9c
   1338c:	tst	r3, #4
   13390:	beq	13c70 <__assert_fail@plt+0x2998>
   13394:	add	r3, r6, #2
   13398:	ldr	r2, [sp, #28]
   1339c:	cmp	r2, r3
   133a0:	bls	13c7c <__assert_fail@plt+0x29a4>
   133a4:	ldr	r2, [sp, #52]	; 0x34
   133a8:	add	r2, r2, r6
   133ac:	ldrb	r2, [r2, #1]
   133b0:	cmp	r2, #63	; 0x3f
   133b4:	movne	r8, #0
   133b8:	movne	r5, r8
   133bc:	bne	13614 <__assert_fail@plt+0x233c>
   133c0:	ldr	r2, [sp, #52]	; 0x34
   133c4:	ldrb	r2, [r2, r3]
   133c8:	sub	r1, r2, #33	; 0x21
   133cc:	cmp	r1, #29
   133d0:	ldrls	pc, [pc, r1, lsl #2]
   133d4:	b	13c88 <__assert_fail@plt+0x29b0>
   133d8:	andeq	r3, r1, r0, asr r4
   133dc:	andeq	r3, r1, r8, lsl #25
   133e0:	andeq	r3, r1, r8, lsl #25
   133e4:	andeq	r3, r1, r8, lsl #25
   133e8:	andeq	r3, r1, r8, lsl #25
   133ec:	andeq	r3, r1, r8, lsl #25
   133f0:	andeq	r3, r1, r0, asr r4
   133f4:	andeq	r3, r1, r0, asr r4
   133f8:	andeq	r3, r1, r0, asr r4
   133fc:	andeq	r3, r1, r8, lsl #25
   13400:	andeq	r3, r1, r8, lsl #25
   13404:	andeq	r3, r1, r8, lsl #25
   13408:	andeq	r3, r1, r0, asr r4
   1340c:	andeq	r3, r1, r8, lsl #25
   13410:	andeq	r3, r1, r0, asr r4
   13414:	andeq	r3, r1, r8, lsl #25
   13418:	andeq	r3, r1, r8, lsl #25
   1341c:	andeq	r3, r1, r8, lsl #25
   13420:	andeq	r3, r1, r8, lsl #25
   13424:	andeq	r3, r1, r8, lsl #25
   13428:	andeq	r3, r1, r8, lsl #25
   1342c:	andeq	r3, r1, r8, lsl #25
   13430:	andeq	r3, r1, r8, lsl #25
   13434:	andeq	r3, r1, r8, lsl #25
   13438:	andeq	r3, r1, r8, lsl #25
   1343c:	andeq	r3, r1, r8, lsl #25
   13440:	andeq	r3, r1, r8, lsl #25
   13444:	andeq	r3, r1, r0, asr r4
   13448:	andeq	r3, r1, r0, asr r4
   1344c:	andeq	r3, r1, r0, asr r4
   13450:	ldr	r1, [sp, #32]
   13454:	cmp	r1, #0
   13458:	bne	13e98 <__assert_fail@plt+0x2bc0>
   1345c:	cmp	r7, fp
   13460:	movhi	r1, #63	; 0x3f
   13464:	ldrhi	r0, [sp, #36]	; 0x24
   13468:	strbhi	r1, [r0, fp]
   1346c:	add	r1, fp, #1
   13470:	cmp	r7, r1
   13474:	ldrhi	r0, [sp, #36]	; 0x24
   13478:	movhi	ip, #34	; 0x22
   1347c:	strbhi	ip, [r0, r1]
   13480:	add	r1, fp, #2
   13484:	cmp	r7, r1
   13488:	ldrhi	r0, [sp, #36]	; 0x24
   1348c:	movhi	ip, #34	; 0x22
   13490:	strbhi	ip, [r0, r1]
   13494:	add	r1, fp, #3
   13498:	cmp	r7, r1
   1349c:	movhi	r0, #63	; 0x3f
   134a0:	ldrhi	ip, [sp, #36]	; 0x24
   134a4:	strbhi	r0, [ip, r1]
   134a8:	add	fp, fp, #4
   134ac:	ldr	r5, [sp, #32]
   134b0:	mov	r8, r5
   134b4:	mov	r4, r2
   134b8:	mov	r6, r3
   134bc:	b	13614 <__assert_fail@plt+0x233c>
   134c0:	mov	r3, #102	; 0x66
   134c4:	b	1357c <__assert_fail@plt+0x22a4>
   134c8:	mov	r3, #118	; 0x76
   134cc:	b	1357c <__assert_fail@plt+0x22a4>
   134d0:	cmp	sl, #2
   134d4:	beq	13540 <__assert_fail@plt+0x2268>
   134d8:	ldr	r3, [sp, #48]	; 0x30
   134dc:	ldr	r2, [sp, #32]
   134e0:	and	r3, r3, r2
   134e4:	tst	r9, r3
   134e8:	moveq	r3, r4
   134ec:	beq	1357c <__assert_fail@plt+0x22a4>
   134f0:	mov	r8, #0
   134f4:	mov	r5, r8
   134f8:	eor	r5, r5, #1
   134fc:	ldr	r3, [sp, #44]	; 0x2c
   13500:	and	r5, r5, r3
   13504:	tst	r5, #255	; 0xff
   13508:	beq	136e8 <__assert_fail@plt+0x2410>
   1350c:	cmp	r7, fp
   13510:	ldrhi	r3, [sp, #36]	; 0x24
   13514:	movhi	r2, #39	; 0x27
   13518:	strbhi	r2, [r3, fp]
   1351c:	add	r3, fp, #1
   13520:	cmp	r7, r3
   13524:	ldrhi	r2, [sp, #36]	; 0x24
   13528:	movhi	r1, #39	; 0x27
   1352c:	strbhi	r1, [r2, r3]
   13530:	add	fp, fp, #2
   13534:	mov	r3, #0
   13538:	str	r3, [sp, #44]	; 0x2c
   1353c:	b	136e8 <__assert_fail@plt+0x2410>
   13540:	ldr	r3, [sp, #32]
   13544:	cmp	r3, #0
   13548:	bne	13de4 <__assert_fail@plt+0x2b0c>
   1354c:	mov	r8, r3
   13550:	mov	r5, r3
   13554:	b	134f8 <__assert_fail@plt+0x2220>
   13558:	mov	r3, #110	; 0x6e
   1355c:	b	13564 <__assert_fail@plt+0x228c>
   13560:	mov	r3, #116	; 0x74
   13564:	ldr	r2, [sp, #32]
   13568:	cmp	sl, #2
   1356c:	movne	r2, #0
   13570:	andeq	r2, r2, #1
   13574:	cmp	r2, #0
   13578:	bne	1359c <__assert_fail@plt+0x22c4>
   1357c:	ldr	r2, [sp, #48]	; 0x30
   13580:	cmp	r2, #0
   13584:	moveq	r8, r2
   13588:	moveq	r5, r2
   1358c:	beq	13614 <__assert_fail@plt+0x233c>
   13590:	mov	r4, r3
   13594:	mov	r8, #0
   13598:	b	1366c <__assert_fail@plt+0x2394>
   1359c:	mov	r8, sl
   135a0:	mov	sl, r7
   135a4:	b	13e10 <__assert_fail@plt+0x2b38>
   135a8:	mov	r3, #97	; 0x61
   135ac:	b	1357c <__assert_fail@plt+0x22a4>
   135b0:	ldr	r3, [sp, #28]
   135b4:	cmn	r3, #1
   135b8:	beq	135e4 <__assert_fail@plt+0x230c>
   135bc:	ldr	r3, [sp, #28]
   135c0:	subs	r3, r3, #1
   135c4:	movne	r3, #1
   135c8:	cmp	r3, #0
   135cc:	bne	13c94 <__assert_fail@plt+0x29bc>
   135d0:	cmp	r6, #0
   135d4:	beq	135fc <__assert_fail@plt+0x2324>
   135d8:	mov	r8, #0
   135dc:	mov	r5, r8
   135e0:	b	13614 <__assert_fail@plt+0x233c>
   135e4:	ldr	r3, [sp, #52]	; 0x34
   135e8:	ldrb	r3, [r3, #1]
   135ec:	adds	r3, r3, #0
   135f0:	movne	r3, #1
   135f4:	b	135c8 <__assert_fail@plt+0x22f0>
   135f8:	mov	r8, #0
   135fc:	ldr	r5, [sp, #32]
   13600:	cmp	sl, #2
   13604:	movne	r5, #0
   13608:	andeq	r5, r5, #1
   1360c:	cmp	r5, #0
   13610:	bne	137c4 <__assert_fail@plt+0x24ec>
   13614:	ldr	r3, [sp, #68]	; 0x44
   13618:	cmp	sl, #2
   1361c:	orreq	r3, r3, #1
   13620:	eor	r3, r3, #1
   13624:	ldr	r2, [sp, #32]
   13628:	orr	r3, r2, r3
   1362c:	tst	r3, #255	; 0xff
   13630:	beq	13660 <__assert_fail@plt+0x2388>
   13634:	ldr	r3, [sp, #160]	; 0xa0
   13638:	cmp	r3, #0
   1363c:	beq	13660 <__assert_fail@plt+0x2388>
   13640:	lsr	r2, r4, #5
   13644:	uxtb	r2, r2
   13648:	and	r3, r4, #31
   1364c:	ldr	r1, [sp, #160]	; 0xa0
   13650:	ldr	r2, [r1, r2, lsl #2]
   13654:	lsr	r3, r2, r3
   13658:	tst	r3, #1
   1365c:	bne	1366c <__assert_fail@plt+0x2394>
   13660:	ldr	r3, [sp, #56]	; 0x38
   13664:	cmp	r3, #0
   13668:	beq	134f8 <__assert_fail@plt+0x2220>
   1366c:	ldr	r3, [sp, #32]
   13670:	cmp	r3, #0
   13674:	bne	13e80 <__assert_fail@plt+0x2ba8>
   13678:	ldr	r3, [sp, #44]	; 0x2c
   1367c:	eor	r3, r3, #1
   13680:	cmp	sl, #2
   13684:	movne	r3, #0
   13688:	andeq	r3, r3, #1
   1368c:	cmp	r3, #0
   13690:	beq	136d4 <__assert_fail@plt+0x23fc>
   13694:	cmp	r7, fp
   13698:	ldrhi	r2, [sp, #36]	; 0x24
   1369c:	movhi	r1, #39	; 0x27
   136a0:	strbhi	r1, [r2, fp]
   136a4:	add	r2, fp, #1
   136a8:	cmp	r7, r2
   136ac:	ldrhi	r1, [sp, #36]	; 0x24
   136b0:	movhi	r0, #36	; 0x24
   136b4:	strbhi	r0, [r1, r2]
   136b8:	add	r2, fp, #2
   136bc:	cmp	r7, r2
   136c0:	ldrhi	r1, [sp, #36]	; 0x24
   136c4:	movhi	r0, #39	; 0x27
   136c8:	strbhi	r0, [r1, r2]
   136cc:	add	fp, fp, #3
   136d0:	str	r3, [sp, #44]	; 0x2c
   136d4:	cmp	r7, fp
   136d8:	ldrhi	r3, [sp, #36]	; 0x24
   136dc:	movhi	r2, #92	; 0x5c
   136e0:	strbhi	r2, [r3, fp]
   136e4:	add	fp, fp, #1
   136e8:	cmp	fp, r7
   136ec:	ldrcc	r3, [sp, #36]	; 0x24
   136f0:	strbcc	r4, [r3, fp]
   136f4:	add	fp, fp, #1
   136f8:	ldr	r3, [sp, #40]	; 0x28
   136fc:	cmp	r8, #0
   13700:	moveq	r3, #0
   13704:	str	r3, [sp, #40]	; 0x28
   13708:	add	r6, r6, #1
   1370c:	ldr	r3, [sp, #28]
   13710:	cmn	r3, #1
   13714:	beq	13ca0 <__assert_fail@plt+0x29c8>
   13718:	ldr	r3, [sp, #28]
   1371c:	subs	r8, r3, r6
   13720:	movne	r8, #1
   13724:	cmp	r8, #0
   13728:	beq	13cb4 <__assert_fail@plt+0x29dc>
   1372c:	ldr	r5, [sp, #48]	; 0x30
   13730:	cmp	sl, #2
   13734:	moveq	r5, #0
   13738:	andne	r5, r5, #1
   1373c:	ldr	r3, [sp, #60]	; 0x3c
   13740:	adds	r9, r3, #0
   13744:	movne	r9, #1
   13748:	ands	r2, r5, r9
   1374c:	str	r2, [sp, #56]	; 0x38
   13750:	beq	13018 <__assert_fail@plt+0x1d40>
   13754:	add	r4, r6, r3
   13758:	ldr	r2, [sp, #28]
   1375c:	cmp	r3, #1
   13760:	movls	r3, #0
   13764:	movhi	r3, #1
   13768:	cmn	r2, #1
   1376c:	movne	r3, #0
   13770:	cmp	r3, #0
   13774:	beq	13784 <__assert_fail@plt+0x24ac>
   13778:	ldr	r0, [sp, #52]	; 0x34
   1377c:	bl	111b8 <strlen@plt>
   13780:	str	r0, [sp, #28]
   13784:	ldr	r3, [sp, #28]
   13788:	cmp	r3, r4
   1378c:	bcc	13010 <__assert_fail@plt+0x1d38>
   13790:	ldr	r2, [sp, #60]	; 0x3c
   13794:	ldr	r1, [sp, #72]	; 0x48
   13798:	ldr	r3, [sp, #52]	; 0x34
   1379c:	add	r0, r3, r6
   137a0:	bl	110a4 <memcmp@plt>
   137a4:	cmp	r0, #0
   137a8:	bne	13230 <__assert_fail@plt+0x1f58>
   137ac:	ldr	r3, [sp, #32]
   137b0:	cmp	r3, #0
   137b4:	beq	13018 <__assert_fail@plt+0x1d40>
   137b8:	mov	r8, sl
   137bc:	mov	sl, r7
   137c0:	b	13e10 <__assert_fail@plt+0x2b38>
   137c4:	mov	r8, sl
   137c8:	mov	sl, r7
   137cc:	b	13e10 <__assert_fail@plt+0x2b38>
   137d0:	cmp	sl, #2
   137d4:	strne	r8, [sp, #80]	; 0x50
   137d8:	movne	r5, #0
   137dc:	bne	13614 <__assert_fail@plt+0x233c>
   137e0:	ldr	r3, [sp, #32]
   137e4:	cmp	r3, #0
   137e8:	bne	13dfc <__assert_fail@plt+0x2b24>
   137ec:	ldr	r2, [sp, #76]	; 0x4c
   137f0:	adds	r3, r7, #0
   137f4:	movne	r3, #1
   137f8:	cmp	r2, #0
   137fc:	movne	r3, #0
   13800:	cmp	r3, #0
   13804:	movne	r3, #0
   13808:	bne	13838 <__assert_fail@plt+0x2560>
   1380c:	cmp	r7, fp
   13810:	ldrhi	r3, [sp, #36]	; 0x24
   13814:	movhi	r2, #39	; 0x27
   13818:	strbhi	r2, [r3, fp]
   1381c:	add	r3, fp, #1
   13820:	cmp	r7, r3
   13824:	ldrhi	r2, [sp, #36]	; 0x24
   13828:	movhi	r1, #92	; 0x5c
   1382c:	strbhi	r1, [r2, r3]
   13830:	mov	r3, r7
   13834:	ldr	r7, [sp, #76]	; 0x4c
   13838:	add	r2, fp, #2
   1383c:	cmp	r2, r3
   13840:	ldrcc	r1, [sp, #36]	; 0x24
   13844:	movcc	r0, #39	; 0x27
   13848:	strbcc	r0, [r1, r2]
   1384c:	add	fp, fp, #3
   13850:	ldr	r2, [sp, #32]
   13854:	mov	r5, r2
   13858:	str	r8, [sp, #80]	; 0x50
   1385c:	str	r2, [sp, #44]	; 0x2c
   13860:	str	r7, [sp, #76]	; 0x4c
   13864:	mov	r7, r3
   13868:	b	13614 <__assert_fail@plt+0x233c>
   1386c:	ldr	r5, [sp, #84]	; 0x54
   13870:	cmp	r5, #1
   13874:	beq	138a4 <__assert_fail@plt+0x25cc>
   13878:	mov	r3, #0
   1387c:	str	r3, [sp, #104]	; 0x68
   13880:	str	r3, [sp, #108]	; 0x6c
   13884:	ldr	r3, [sp, #28]
   13888:	cmn	r3, #1
   1388c:	beq	138d8 <__assert_fail@plt+0x2600>
   13890:	mov	r3, #0
   13894:	str	r4, [sp, #88]	; 0x58
   13898:	str	fp, [sp, #92]	; 0x5c
   1389c:	mov	fp, r3
   138a0:	b	13a00 <__assert_fail@plt+0x2728>
   138a4:	bl	111a0 <__ctype_b_loc@plt>
   138a8:	ldr	r2, [r0]
   138ac:	lsl	r3, r4, #1
   138b0:	ldrh	r8, [r2, r3]
   138b4:	lsr	r8, r8, #14
   138b8:	and	r8, r8, #1
   138bc:	mov	r2, r5
   138c0:	eor	r5, r8, #1
   138c4:	ldr	r3, [sp, #48]	; 0x30
   138c8:	and	r5, r5, r3
   138cc:	ands	r5, r5, #255	; 0xff
   138d0:	beq	13614 <__assert_fail@plt+0x233c>
   138d4:	b	13a98 <__assert_fail@plt+0x27c0>
   138d8:	ldr	r0, [sp, #52]	; 0x34
   138dc:	bl	111b8 <strlen@plt>
   138e0:	str	r0, [sp, #28]
   138e4:	b	13890 <__assert_fail@plt+0x25b8>
   138e8:	mov	r2, fp
   138ec:	mov	r1, r4
   138f0:	ldr	r4, [sp, #88]	; 0x58
   138f4:	ldr	fp, [sp, #92]	; 0x5c
   138f8:	ldr	r0, [sp, #28]
   138fc:	cmp	r0, r5
   13900:	bls	13acc <__assert_fail@plt+0x27f4>
   13904:	ldrb	r3, [r1]
   13908:	cmp	r3, #0
   1390c:	beq	13ad4 <__assert_fail@plt+0x27fc>
   13910:	mov	r3, r1
   13914:	add	r2, r2, #1
   13918:	add	r1, r6, r2
   1391c:	cmp	r0, r1
   13920:	bls	13adc <__assert_fail@plt+0x2804>
   13924:	ldrb	r1, [r3, #1]!
   13928:	cmp	r1, #0
   1392c:	bne	13914 <__assert_fail@plt+0x263c>
   13930:	mov	r8, #0
   13934:	b	13a90 <__assert_fail@plt+0x27b8>
   13938:	cmp	r4, r5
   1393c:	beq	139dc <__assert_fail@plt+0x2704>
   13940:	ldrb	r3, [r4, #1]!
   13944:	sub	r3, r3, #91	; 0x5b
   13948:	cmp	r3, #33	; 0x21
   1394c:	ldrls	pc, [pc, r3, lsl #2]
   13950:	b	13938 <__assert_fail@plt+0x2660>
   13954:	andeq	r3, r1, r8, lsl #28
   13958:	andeq	r3, r1, r8, lsl #28
   1395c:	andeq	r3, r1, r8, lsr r9
   13960:	andeq	r3, r1, r8, lsl #28
   13964:	andeq	r3, r1, r8, lsr r9
   13968:	andeq	r3, r1, r8, lsl #28
   1396c:	andeq	r3, r1, r8, lsr r9
   13970:	andeq	r3, r1, r8, lsr r9
   13974:	andeq	r3, r1, r8, lsr r9
   13978:	andeq	r3, r1, r8, lsr r9
   1397c:	andeq	r3, r1, r8, lsr r9
   13980:	andeq	r3, r1, r8, lsr r9
   13984:	andeq	r3, r1, r8, lsr r9
   13988:	andeq	r3, r1, r8, lsr r9
   1398c:	andeq	r3, r1, r8, lsr r9
   13990:	andeq	r3, r1, r8, lsr r9
   13994:	andeq	r3, r1, r8, lsr r9
   13998:	andeq	r3, r1, r8, lsr r9
   1399c:	andeq	r3, r1, r8, lsr r9
   139a0:	andeq	r3, r1, r8, lsr r9
   139a4:	andeq	r3, r1, r8, lsr r9
   139a8:	andeq	r3, r1, r8, lsr r9
   139ac:	andeq	r3, r1, r8, lsr r9
   139b0:	andeq	r3, r1, r8, lsr r9
   139b4:	andeq	r3, r1, r8, lsr r9
   139b8:	andeq	r3, r1, r8, lsr r9
   139bc:	andeq	r3, r1, r8, lsr r9
   139c0:	andeq	r3, r1, r8, lsr r9
   139c4:	andeq	r3, r1, r8, lsr r9
   139c8:	andeq	r3, r1, r8, lsr r9
   139cc:	andeq	r3, r1, r8, lsr r9
   139d0:	andeq	r3, r1, r8, lsr r9
   139d4:	andeq	r3, r1, r8, lsr r9
   139d8:	andeq	r3, r1, r8, lsl #28
   139dc:	ldr	r0, [sp, #100]	; 0x64
   139e0:	bl	110ec <iswprint@plt>
   139e4:	cmp	r0, #0
   139e8:	moveq	r8, #0
   139ec:	add	fp, fp, r9
   139f0:	add	r0, sp, #104	; 0x68
   139f4:	bl	1108c <mbsinit@plt>
   139f8:	cmp	r0, #0
   139fc:	bne	13a70 <__assert_fail@plt+0x2798>
   13a00:	add	r5, r6, fp
   13a04:	ldr	r3, [sp, #52]	; 0x34
   13a08:	add	r4, r3, r5
   13a0c:	add	r3, sp, #104	; 0x68
   13a10:	ldr	r2, [sp, #28]
   13a14:	sub	r2, r2, r5
   13a18:	mov	r1, r4
   13a1c:	add	r0, sp, #100	; 0x64
   13a20:	bl	22f8c <__assert_fail@plt+0x11cb4>
   13a24:	subs	r9, r0, #0
   13a28:	beq	13ae4 <__assert_fail@plt+0x280c>
   13a2c:	cmn	r9, #1
   13a30:	beq	13a80 <__assert_fail@plt+0x27a8>
   13a34:	cmn	r9, #2
   13a38:	beq	138e8 <__assert_fail@plt+0x2610>
   13a3c:	ldr	r3, [sp, #32]
   13a40:	cmp	sl, #2
   13a44:	movne	r3, #0
   13a48:	andeq	r3, r3, #1
   13a4c:	cmp	r3, #0
   13a50:	beq	139dc <__assert_fail@plt+0x2704>
   13a54:	cmp	r9, #1
   13a58:	bls	139dc <__assert_fail@plt+0x2704>
   13a5c:	sub	r3, r9, #1
   13a60:	add	r5, r3, r5
   13a64:	ldr	r3, [sp, #52]	; 0x34
   13a68:	add	r5, r3, r5
   13a6c:	b	13940 <__assert_fail@plt+0x2668>
   13a70:	ldr	r4, [sp, #88]	; 0x58
   13a74:	mov	r2, fp
   13a78:	ldr	fp, [sp, #92]	; 0x5c
   13a7c:	b	13a90 <__assert_fail@plt+0x27b8>
   13a80:	ldr	r4, [sp, #88]	; 0x58
   13a84:	mov	r2, fp
   13a88:	ldr	fp, [sp, #92]	; 0x5c
   13a8c:	mov	r8, #0
   13a90:	cmp	r2, #1
   13a94:	bls	138c0 <__assert_fail@plt+0x25e8>
   13a98:	add	r1, r6, r2
   13a9c:	ldr	ip, [sp, #64]	; 0x40
   13aa0:	mov	r5, #0
   13aa4:	eor	r3, r8, #1
   13aa8:	ldr	r2, [sp, #48]	; 0x30
   13aac:	and	r3, r3, r2
   13ab0:	uxtb	r3, r3
   13ab4:	ldr	r9, [sp, #32]
   13ab8:	ldr	lr, [sp, #44]	; 0x2c
   13abc:	ldr	r2, [sp, #56]	; 0x38
   13ac0:	str	r8, [sp, #56]	; 0x38
   13ac4:	ldr	r0, [sp, #36]	; 0x24
   13ac8:	b	13b64 <__assert_fail@plt+0x288c>
   13acc:	mov	r8, #0
   13ad0:	b	13a90 <__assert_fail@plt+0x27b8>
   13ad4:	mov	r8, #0
   13ad8:	b	13a90 <__assert_fail@plt+0x27b8>
   13adc:	mov	r8, #0
   13ae0:	b	13a90 <__assert_fail@plt+0x27b8>
   13ae4:	ldr	r4, [sp, #88]	; 0x58
   13ae8:	mov	r2, fp
   13aec:	ldr	fp, [sp, #92]	; 0x5c
   13af0:	b	13a90 <__assert_fail@plt+0x27b8>
   13af4:	cmp	r2, #0
   13af8:	beq	13b0c <__assert_fail@plt+0x2834>
   13afc:	cmp	r7, fp
   13b00:	movhi	r2, #92	; 0x5c
   13b04:	strbhi	r2, [r0, fp]
   13b08:	add	fp, fp, #1
   13b0c:	add	r8, r6, #1
   13b10:	cmp	r1, r8
   13b14:	bls	13c1c <__assert_fail@plt+0x2944>
   13b18:	eor	r2, r5, #1
   13b1c:	and	r2, r2, lr
   13b20:	ands	r2, r2, #255	; 0xff
   13b24:	beq	13c38 <__assert_fail@plt+0x2960>
   13b28:	cmp	r7, fp
   13b2c:	movhi	r2, #39	; 0x27
   13b30:	strbhi	r2, [r0, fp]
   13b34:	add	r2, fp, #1
   13b38:	cmp	r7, r2
   13b3c:	movhi	lr, #39	; 0x27
   13b40:	strbhi	lr, [r0, r2]
   13b44:	add	fp, fp, #2
   13b48:	mov	r6, r8
   13b4c:	mov	r2, r3
   13b50:	mov	lr, r3
   13b54:	cmp	r7, fp
   13b58:	strbhi	r4, [r0, fp]
   13b5c:	add	fp, fp, #1
   13b60:	ldrb	r4, [ip, #1]!
   13b64:	cmp	r3, #0
   13b68:	beq	13af4 <__assert_fail@plt+0x281c>
   13b6c:	cmp	r9, #0
   13b70:	bne	13e74 <__assert_fail@plt+0x2b9c>
   13b74:	eor	r5, lr, #1
   13b78:	cmp	sl, #2
   13b7c:	movne	r5, #0
   13b80:	andeq	r5, r5, #1
   13b84:	cmp	r5, #0
   13b88:	beq	13bc0 <__assert_fail@plt+0x28e8>
   13b8c:	cmp	r7, fp
   13b90:	movhi	lr, #39	; 0x27
   13b94:	strbhi	lr, [r0, fp]
   13b98:	add	lr, fp, #1
   13b9c:	cmp	r7, lr
   13ba0:	movhi	r8, #36	; 0x24
   13ba4:	strbhi	r8, [r0, lr]
   13ba8:	add	lr, fp, #2
   13bac:	cmp	r7, lr
   13bb0:	movhi	r8, #39	; 0x27
   13bb4:	strbhi	r8, [r0, lr]
   13bb8:	add	fp, fp, #3
   13bbc:	mov	lr, r5
   13bc0:	cmp	r7, fp
   13bc4:	movhi	r5, #92	; 0x5c
   13bc8:	strbhi	r5, [r0, fp]
   13bcc:	add	r5, fp, #1
   13bd0:	cmp	r7, r5
   13bd4:	lsrhi	r8, r4, #6
   13bd8:	addhi	r8, r8, #48	; 0x30
   13bdc:	strbhi	r8, [r0, r5]
   13be0:	add	r8, fp, #2
   13be4:	cmp	r7, r8
   13be8:	lsrhi	r5, r4, #3
   13bec:	andhi	r5, r5, #7
   13bf0:	addhi	r5, r5, #48	; 0x30
   13bf4:	strbhi	r5, [r0, r8]
   13bf8:	add	fp, fp, #3
   13bfc:	and	r4, r4, #7
   13c00:	add	r4, r4, #48	; 0x30
   13c04:	add	r5, r6, #1
   13c08:	cmp	r1, r5
   13c0c:	bls	13c28 <__assert_fail@plt+0x2950>
   13c10:	mov	r6, r5
   13c14:	mov	r5, r3
   13c18:	b	13b54 <__assert_fail@plt+0x287c>
   13c1c:	str	lr, [sp, #44]	; 0x2c
   13c20:	ldr	r8, [sp, #56]	; 0x38
   13c24:	b	134f8 <__assert_fail@plt+0x2220>
   13c28:	str	lr, [sp, #44]	; 0x2c
   13c2c:	ldr	r8, [sp, #56]	; 0x38
   13c30:	mov	r5, r3
   13c34:	b	134f8 <__assert_fail@plt+0x2220>
   13c38:	mov	r6, r8
   13c3c:	b	13b54 <__assert_fail@plt+0x287c>
   13c40:	mov	r5, #0
   13c44:	b	13614 <__assert_fail@plt+0x233c>
   13c48:	mov	r8, r5
   13c4c:	ldr	r5, [sp, #48]	; 0x30
   13c50:	mov	r4, #48	; 0x30
   13c54:	b	13614 <__assert_fail@plt+0x233c>
   13c58:	ldr	r8, [sp, #32]
   13c5c:	mov	r4, #48	; 0x30
   13c60:	b	13614 <__assert_fail@plt+0x233c>
   13c64:	ldr	r8, [sp, #32]
   13c68:	mov	r4, #48	; 0x30
   13c6c:	b	13614 <__assert_fail@plt+0x233c>
   13c70:	mov	r8, #0
   13c74:	mov	r5, r8
   13c78:	b	13614 <__assert_fail@plt+0x233c>
   13c7c:	mov	r8, #0
   13c80:	mov	r5, r8
   13c84:	b	13614 <__assert_fail@plt+0x233c>
   13c88:	mov	r8, #0
   13c8c:	mov	r5, r8
   13c90:	b	13614 <__assert_fail@plt+0x233c>
   13c94:	mov	r8, #0
   13c98:	mov	r5, r8
   13c9c:	b	13614 <__assert_fail@plt+0x233c>
   13ca0:	ldr	r3, [sp, #52]	; 0x34
   13ca4:	ldrb	r8, [r3, r6]
   13ca8:	adds	r8, r8, #0
   13cac:	movne	r8, #1
   13cb0:	b	13724 <__assert_fail@plt+0x244c>
   13cb4:	cmp	sl, #2
   13cb8:	movne	r3, #0
   13cbc:	moveq	r3, #1
   13cc0:	ldr	r1, [sp, #32]
   13cc4:	mov	r2, r1
   13cc8:	and	r2, r2, r3
   13ccc:	cmp	fp, #0
   13cd0:	movne	r2, #0
   13cd4:	andeq	r2, r2, #1
   13cd8:	cmp	r2, #0
   13cdc:	bne	13e8c <__assert_fail@plt+0x2bb4>
   13ce0:	eor	r2, r1, #1
   13ce4:	and	r3, r3, r2
   13ce8:	ldr	r1, [sp, #80]	; 0x50
   13cec:	tst	r1, r3
   13cf0:	beq	13d68 <__assert_fail@plt+0x2a90>
   13cf4:	ldr	r3, [sp, #40]	; 0x28
   13cf8:	cmp	r3, #0
   13cfc:	bne	13d24 <__assert_fail@plt+0x2a4c>
   13d00:	ldr	r1, [sp, #76]	; 0x4c
   13d04:	clz	r3, r7
   13d08:	lsr	r3, r3, #5
   13d0c:	cmp	r1, #0
   13d10:	moveq	r3, #0
   13d14:	cmp	r3, #0
   13d18:	beq	13d68 <__assert_fail@plt+0x2a90>
   13d1c:	ldr	r7, [sp, #76]	; 0x4c
   13d20:	b	12db8 <__assert_fail@plt+0x1ae0>
   13d24:	ldr	r3, [sp, #168]	; 0xa8
   13d28:	str	r3, [sp, #16]
   13d2c:	ldr	r3, [sp, #164]	; 0xa4
   13d30:	str	r3, [sp, #12]
   13d34:	ldr	r3, [sp, #160]	; 0xa0
   13d38:	str	r3, [sp, #8]
   13d3c:	ldr	r3, [sp, #156]	; 0x9c
   13d40:	str	r3, [sp, #4]
   13d44:	mov	r3, #5
   13d48:	str	r3, [sp]
   13d4c:	ldr	r3, [sp, #28]
   13d50:	ldr	r2, [sp, #52]	; 0x34
   13d54:	ldr	r1, [sp, #76]	; 0x4c
   13d58:	ldr	r0, [sp, #36]	; 0x24
   13d5c:	bl	12d58 <__assert_fail@plt+0x1a80>
   13d60:	mov	fp, r0
   13d64:	b	13e68 <__assert_fail@plt+0x2b90>
   13d68:	mov	sl, r7
   13d6c:	ldr	r3, [sp, #72]	; 0x48
   13d70:	cmp	r3, #0
   13d74:	moveq	r2, #0
   13d78:	andne	r2, r2, #1
   13d7c:	cmp	r2, #0
   13d80:	beq	13db0 <__assert_fail@plt+0x2ad8>
   13d84:	mov	r2, r3
   13d88:	ldrb	r3, [r3]
   13d8c:	cmp	r3, #0
   13d90:	beq	13db0 <__assert_fail@plt+0x2ad8>
   13d94:	ldr	r1, [sp, #36]	; 0x24
   13d98:	cmp	sl, fp
   13d9c:	strbhi	r3, [r1, fp]
   13da0:	add	fp, fp, #1
   13da4:	ldrb	r3, [r2, #1]!
   13da8:	cmp	r3, #0
   13dac:	bne	13d98 <__assert_fail@plt+0x2ac0>
   13db0:	cmp	sl, fp
   13db4:	movhi	r3, #0
   13db8:	ldrhi	r2, [sp, #36]	; 0x24
   13dbc:	strbhi	r3, [r2, fp]
   13dc0:	b	13e68 <__assert_fail@plt+0x2b90>
   13dc4:	mov	r8, sl
   13dc8:	mov	sl, r7
   13dcc:	ldr	r3, [sp, #32]
   13dd0:	str	r3, [sp, #48]	; 0x30
   13dd4:	b	13e10 <__assert_fail@plt+0x2b38>
   13dd8:	mov	r8, sl
   13ddc:	mov	sl, r7
   13de0:	b	13e10 <__assert_fail@plt+0x2b38>
   13de4:	mov	r8, sl
   13de8:	mov	sl, r7
   13dec:	b	13e10 <__assert_fail@plt+0x2b38>
   13df0:	andeq	r4, r2, r8, lsr r5
   13df4:	andeq	r4, r2, r8, asr #10
   13df8:	andeq	r4, r2, ip, lsr r5
   13dfc:	mov	r8, sl
   13e00:	mov	sl, r7
   13e04:	b	13e10 <__assert_fail@plt+0x2b38>
   13e08:	mov	r8, sl
   13e0c:	mov	sl, r7
   13e10:	ldr	r3, [sp, #48]	; 0x30
   13e14:	cmp	r8, #2
   13e18:	movne	r3, #0
   13e1c:	andeq	r3, r3, #1
   13e20:	cmp	r3, #0
   13e24:	movne	r8, #4
   13e28:	ldr	r3, [sp, #168]	; 0xa8
   13e2c:	str	r3, [sp, #16]
   13e30:	ldr	r3, [sp, #164]	; 0xa4
   13e34:	str	r3, [sp, #12]
   13e38:	mov	r3, #0
   13e3c:	str	r3, [sp, #8]
   13e40:	ldr	r3, [sp, #156]	; 0x9c
   13e44:	bic	r3, r3, #2
   13e48:	str	r3, [sp, #4]
   13e4c:	str	r8, [sp]
   13e50:	ldr	r3, [sp, #28]
   13e54:	ldr	r2, [sp, #52]	; 0x34
   13e58:	mov	r1, sl
   13e5c:	ldr	r0, [sp, #36]	; 0x24
   13e60:	bl	12d58 <__assert_fail@plt+0x1a80>
   13e64:	mov	fp, r0
   13e68:	mov	r0, fp
   13e6c:	add	sp, sp, #116	; 0x74
   13e70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e74:	mov	r8, sl
   13e78:	mov	sl, r7
   13e7c:	b	13e10 <__assert_fail@plt+0x2b38>
   13e80:	mov	r8, sl
   13e84:	mov	sl, r7
   13e88:	b	13e10 <__assert_fail@plt+0x2b38>
   13e8c:	mov	r8, sl
   13e90:	mov	sl, r7
   13e94:	b	13e10 <__assert_fail@plt+0x2b38>
   13e98:	mov	r8, sl
   13e9c:	mov	sl, r7
   13ea0:	b	13e28 <__assert_fail@plt+0x2b50>
   13ea4:	mov	r3, #1
   13ea8:	str	r3, [sp, #32]
   13eac:	str	r3, [sp, #48]	; 0x30
   13eb0:	str	r3, [sp, #60]	; 0x3c
   13eb4:	ldr	r3, [pc, #-196]	; 13df8 <__assert_fail@plt+0x2b20>
   13eb8:	str	r3, [sp, #72]	; 0x48
   13ebc:	mov	fp, #0
   13ec0:	mov	sl, #5
   13ec4:	b	12e14 <__assert_fail@plt+0x1b3c>
   13ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ecc:	sub	sp, sp, #52	; 0x34
   13ed0:	mov	r5, r0
   13ed4:	str	r1, [sp, #24]
   13ed8:	str	r2, [sp, #28]
   13edc:	mov	r4, r3
   13ee0:	bl	111d0 <__errno_location@plt>
   13ee4:	str	r0, [sp, #32]
   13ee8:	ldr	r3, [r0]
   13eec:	str	r3, [sp, #36]	; 0x24
   13ef0:	ldr	r3, [pc, #396]	; 14084 <__assert_fail@plt+0x2dac>
   13ef4:	ldr	r6, [r3]
   13ef8:	cmn	r5, #-2147483647	; 0x80000001
   13efc:	movne	r3, #0
   13f00:	moveq	r3, #1
   13f04:	orrs	r3, r3, r5, lsr #31
   13f08:	bne	14048 <__assert_fail@plt+0x2d70>
   13f0c:	ldr	r3, [pc, #368]	; 14084 <__assert_fail@plt+0x2dac>
   13f10:	ldr	r2, [r3, #4]
   13f14:	cmp	r5, r2
   13f18:	blt	13f80 <__assert_fail@plt+0x2ca8>
   13f1c:	str	r2, [sp, #44]	; 0x2c
   13f20:	add	r3, r3, #8
   13f24:	cmp	r6, r3
   13f28:	beq	1404c <__assert_fail@plt+0x2d74>
   13f2c:	sub	r2, r5, r2
   13f30:	mov	r3, #8
   13f34:	str	r3, [sp]
   13f38:	mvn	r3, #-2147483648	; 0x80000000
   13f3c:	add	r2, r2, #1
   13f40:	add	r1, sp, #44	; 0x2c
   13f44:	mov	r0, r6
   13f48:	bl	22120 <__assert_fail@plt+0x10e48>
   13f4c:	mov	r6, r0
   13f50:	ldr	r3, [pc, #300]	; 14084 <__assert_fail@plt+0x2dac>
   13f54:	str	r0, [r3]
   13f58:	ldr	r7, [pc, #292]	; 14084 <__assert_fail@plt+0x2dac>
   13f5c:	ldr	r0, [r7, #4]
   13f60:	ldr	r2, [sp, #44]	; 0x2c
   13f64:	sub	r2, r2, r0
   13f68:	lsl	r2, r2, #3
   13f6c:	mov	r1, #0
   13f70:	add	r0, r6, r0, lsl #3
   13f74:	bl	111f4 <memset@plt>
   13f78:	ldr	r3, [sp, #44]	; 0x2c
   13f7c:	str	r3, [r7, #4]
   13f80:	add	fp, r6, r5, lsl #3
   13f84:	ldr	r8, [r6, r5, lsl #3]
   13f88:	ldr	r7, [fp, #4]
   13f8c:	ldr	r9, [r4, #4]
   13f90:	orr	r9, r9, #1
   13f94:	add	sl, r4, #8
   13f98:	ldr	r3, [r4, #44]	; 0x2c
   13f9c:	str	r3, [sp, #16]
   13fa0:	ldr	r3, [r4, #40]	; 0x28
   13fa4:	str	r3, [sp, #12]
   13fa8:	str	sl, [sp, #8]
   13fac:	str	r9, [sp, #4]
   13fb0:	ldr	r3, [r4]
   13fb4:	str	r3, [sp]
   13fb8:	ldr	r3, [sp, #28]
   13fbc:	ldr	r2, [sp, #24]
   13fc0:	mov	r1, r8
   13fc4:	mov	r0, r7
   13fc8:	bl	12d58 <__assert_fail@plt+0x1a80>
   13fcc:	cmp	r8, r0
   13fd0:	bhi	14030 <__assert_fail@plt+0x2d58>
   13fd4:	add	r8, r0, #1
   13fd8:	str	r8, [r6, r5, lsl #3]
   13fdc:	ldr	r3, [pc, #164]	; 14088 <__assert_fail@plt+0x2db0>
   13fe0:	cmp	r7, r3
   13fe4:	beq	13ff0 <__assert_fail@plt+0x2d18>
   13fe8:	mov	r0, r7
   13fec:	bl	22f00 <__assert_fail@plt+0x11c28>
   13ff0:	mov	r0, r8
   13ff4:	bl	21f9c <__assert_fail@plt+0x10cc4>
   13ff8:	mov	r7, r0
   13ffc:	str	r0, [fp, #4]
   14000:	ldr	r3, [r4, #44]	; 0x2c
   14004:	str	r3, [sp, #16]
   14008:	ldr	r3, [r4, #40]	; 0x28
   1400c:	str	r3, [sp, #12]
   14010:	str	sl, [sp, #8]
   14014:	str	r9, [sp, #4]
   14018:	ldr	r3, [r4]
   1401c:	str	r3, [sp]
   14020:	ldr	r3, [sp, #28]
   14024:	ldr	r2, [sp, #24]
   14028:	mov	r1, r8
   1402c:	bl	12d58 <__assert_fail@plt+0x1a80>
   14030:	ldr	r3, [sp, #32]
   14034:	ldr	r2, [sp, #36]	; 0x24
   14038:	str	r2, [r3]
   1403c:	mov	r0, r7
   14040:	add	sp, sp, #52	; 0x34
   14044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14048:	bl	112cc <abort@plt>
   1404c:	sub	r2, r5, r2
   14050:	mov	r3, #8
   14054:	str	r3, [sp]
   14058:	mvn	r3, #-2147483648	; 0x80000000
   1405c:	add	r2, r2, #1
   14060:	add	r1, sp, #44	; 0x2c
   14064:	mov	r0, #0
   14068:	bl	22120 <__assert_fail@plt+0x10e48>
   1406c:	mov	r6, r0
   14070:	ldr	r3, [pc, #12]	; 14084 <__assert_fail@plt+0x2dac>
   14074:	str	r0, [r3], #8
   14078:	ldm	r3, {r0, r1}
   1407c:	stm	r6, {r0, r1}
   14080:	b	13f58 <__assert_fail@plt+0x2c80>
   14084:	andeq	r5, r3, r8, ror r1
   14088:	muleq	r3, r0, r5
   1408c:	push	{r4, r5, r6, lr}
   14090:	mov	r4, r0
   14094:	bl	111d0 <__errno_location@plt>
   14098:	mov	r5, r0
   1409c:	ldr	r6, [r0]
   140a0:	cmp	r4, #0
   140a4:	ldr	r3, [pc, #20]	; 140c0 <__assert_fail@plt+0x2de8>
   140a8:	moveq	r4, r3
   140ac:	mov	r1, #48	; 0x30
   140b0:	mov	r0, r4
   140b4:	bl	22488 <__assert_fail@plt+0x111b0>
   140b8:	str	r6, [r5]
   140bc:	pop	{r4, r5, r6, pc}
   140c0:	muleq	r3, r0, r6
   140c4:	subs	r3, r0, #0
   140c8:	ldr	r2, [pc, #8]	; 140d8 <__assert_fail@plt+0x2e00>
   140cc:	moveq	r3, r2
   140d0:	ldr	r0, [r3]
   140d4:	bx	lr
   140d8:	muleq	r3, r0, r6
   140dc:	subs	r3, r0, #0
   140e0:	ldr	r2, [pc, #8]	; 140f0 <__assert_fail@plt+0x2e18>
   140e4:	moveq	r3, r2
   140e8:	str	r1, [r3]
   140ec:	bx	lr
   140f0:	muleq	r3, r0, r6
   140f4:	push	{lr}		; (str lr, [sp, #-4]!)
   140f8:	subs	r3, r0, #0
   140fc:	ldr	r0, [pc, #44]	; 14130 <__assert_fail@plt+0x2e58>
   14100:	moveq	r3, r0
   14104:	add	r3, r3, #8
   14108:	lsr	lr, r1, #5
   1410c:	and	r1, r1, #31
   14110:	ldr	ip, [r3, lr, lsl #2]
   14114:	lsr	r0, ip, r1
   14118:	eor	r2, r2, r0
   1411c:	and	r2, r2, #1
   14120:	eor	r1, ip, r2, lsl r1
   14124:	str	r1, [r3, lr, lsl #2]
   14128:	and	r0, r0, #1
   1412c:	pop	{pc}		; (ldr pc, [sp], #4)
   14130:	muleq	r3, r0, r6
   14134:	subs	r3, r0, #0
   14138:	ldr	r2, [pc, #12]	; 1414c <__assert_fail@plt+0x2e74>
   1413c:	moveq	r3, r2
   14140:	ldr	r0, [r3, #4]
   14144:	str	r1, [r3, #4]
   14148:	bx	lr
   1414c:	muleq	r3, r0, r6
   14150:	subs	r3, r0, #0
   14154:	ldr	r0, [pc, #40]	; 14184 <__assert_fail@plt+0x2eac>
   14158:	moveq	r3, r0
   1415c:	mov	r0, #10
   14160:	str	r0, [r3]
   14164:	cmp	r2, #0
   14168:	cmpne	r1, #0
   1416c:	beq	1417c <__assert_fail@plt+0x2ea4>
   14170:	str	r1, [r3, #40]	; 0x28
   14174:	str	r2, [r3, #44]	; 0x2c
   14178:	bx	lr
   1417c:	push	{r4, lr}
   14180:	bl	112cc <abort@plt>
   14184:	muleq	r3, r0, r6
   14188:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1418c:	sub	sp, sp, #24
   14190:	mov	r7, r0
   14194:	mov	r8, r1
   14198:	mov	r9, r2
   1419c:	mov	sl, r3
   141a0:	ldr	r4, [sp, #56]	; 0x38
   141a4:	cmp	r4, #0
   141a8:	ldr	r3, [pc, #84]	; 14204 <__assert_fail@plt+0x2f2c>
   141ac:	moveq	r4, r3
   141b0:	bl	111d0 <__errno_location@plt>
   141b4:	mov	r5, r0
   141b8:	ldr	r6, [r0]
   141bc:	ldr	r3, [r4, #44]	; 0x2c
   141c0:	str	r3, [sp, #16]
   141c4:	ldr	r3, [r4, #40]	; 0x28
   141c8:	str	r3, [sp, #12]
   141cc:	add	r3, r4, #8
   141d0:	str	r3, [sp, #8]
   141d4:	ldr	r3, [r4, #4]
   141d8:	str	r3, [sp, #4]
   141dc:	ldr	r3, [r4]
   141e0:	str	r3, [sp]
   141e4:	mov	r3, sl
   141e8:	mov	r2, r9
   141ec:	mov	r1, r8
   141f0:	mov	r0, r7
   141f4:	bl	12d58 <__assert_fail@plt+0x1a80>
   141f8:	str	r6, [r5]
   141fc:	add	sp, sp, #24
   14200:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14204:	muleq	r3, r0, r6
   14208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1420c:	sub	sp, sp, #44	; 0x2c
   14210:	str	r0, [sp, #28]
   14214:	str	r1, [sp, #32]
   14218:	mov	r6, r2
   1421c:	subs	r4, r3, #0
   14220:	ldr	r3, [pc, #172]	; 142d4 <__assert_fail@plt+0x2ffc>
   14224:	moveq	r4, r3
   14228:	bl	111d0 <__errno_location@plt>
   1422c:	mov	r7, r0
   14230:	ldr	fp, [r0]
   14234:	ldr	r5, [r4, #4]
   14238:	cmp	r6, #0
   1423c:	orreq	r5, r5, #1
   14240:	add	r9, r4, #8
   14244:	ldr	r3, [r4, #44]	; 0x2c
   14248:	str	r3, [sp, #16]
   1424c:	ldr	r3, [r4, #40]	; 0x28
   14250:	str	r3, [sp, #12]
   14254:	str	r9, [sp, #8]
   14258:	str	r5, [sp, #4]
   1425c:	ldr	r3, [r4]
   14260:	str	r3, [sp]
   14264:	ldr	r3, [sp, #32]
   14268:	ldr	r2, [sp, #28]
   1426c:	mov	r1, #0
   14270:	mov	r0, r1
   14274:	bl	12d58 <__assert_fail@plt+0x1a80>
   14278:	mov	sl, r0
   1427c:	add	r8, r0, #1
   14280:	mov	r0, r8
   14284:	bl	21f9c <__assert_fail@plt+0x10cc4>
   14288:	str	r0, [sp, #36]	; 0x24
   1428c:	ldr	r3, [r4, #44]	; 0x2c
   14290:	str	r3, [sp, #16]
   14294:	ldr	r3, [r4, #40]	; 0x28
   14298:	str	r3, [sp, #12]
   1429c:	str	r9, [sp, #8]
   142a0:	str	r5, [sp, #4]
   142a4:	ldr	r3, [r4]
   142a8:	str	r3, [sp]
   142ac:	ldr	r3, [sp, #32]
   142b0:	ldr	r2, [sp, #28]
   142b4:	mov	r1, r8
   142b8:	bl	12d58 <__assert_fail@plt+0x1a80>
   142bc:	str	fp, [r7]
   142c0:	cmp	r6, #0
   142c4:	strne	sl, [r6]
   142c8:	ldr	r0, [sp, #36]	; 0x24
   142cc:	add	sp, sp, #44	; 0x2c
   142d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142d4:	muleq	r3, r0, r6
   142d8:	push	{r4, lr}
   142dc:	mov	r3, r2
   142e0:	mov	r2, #0
   142e4:	bl	14208 <__assert_fail@plt+0x2f30>
   142e8:	pop	{r4, pc}
   142ec:	push	{r4, r5, r6, r7, r8, lr}
   142f0:	ldr	r3, [pc, #140]	; 14384 <__assert_fail@plt+0x30ac>
   142f4:	ldr	r7, [r3]
   142f8:	ldr	r3, [r3, #4]
   142fc:	cmp	r3, #1
   14300:	ble	1432c <__assert_fail@plt+0x3054>
   14304:	mov	r5, r7
   14308:	mov	r4, #1
   1430c:	ldr	r6, [pc, #112]	; 14384 <__assert_fail@plt+0x30ac>
   14310:	ldr	r0, [r5, #12]
   14314:	bl	22f00 <__assert_fail@plt+0x11c28>
   14318:	add	r4, r4, #1
   1431c:	add	r5, r5, #8
   14320:	ldr	r3, [r6, #4]
   14324:	cmp	r3, r4
   14328:	bgt	14310 <__assert_fail@plt+0x3038>
   1432c:	ldr	r0, [r7, #4]
   14330:	ldr	r3, [pc, #80]	; 14388 <__assert_fail@plt+0x30b0>
   14334:	cmp	r0, r3
   14338:	beq	14354 <__assert_fail@plt+0x307c>
   1433c:	bl	22f00 <__assert_fail@plt+0x11c28>
   14340:	ldr	r3, [pc, #60]	; 14384 <__assert_fail@plt+0x30ac>
   14344:	mov	r2, #256	; 0x100
   14348:	str	r2, [r3, #8]
   1434c:	ldr	r2, [pc, #52]	; 14388 <__assert_fail@plt+0x30b0>
   14350:	str	r2, [r3, #12]
   14354:	ldr	r3, [pc, #48]	; 1438c <__assert_fail@plt+0x30b4>
   14358:	cmp	r7, r3
   1435c:	beq	14374 <__assert_fail@plt+0x309c>
   14360:	mov	r0, r7
   14364:	bl	22f00 <__assert_fail@plt+0x11c28>
   14368:	ldr	r3, [pc, #20]	; 14384 <__assert_fail@plt+0x30ac>
   1436c:	add	r2, r3, #8
   14370:	str	r2, [r3]
   14374:	mov	r2, #1
   14378:	ldr	r3, [pc, #4]	; 14384 <__assert_fail@plt+0x30ac>
   1437c:	str	r2, [r3, #4]
   14380:	pop	{r4, r5, r6, r7, r8, pc}
   14384:	andeq	r5, r3, r8, ror r1
   14388:	muleq	r3, r0, r5
   1438c:	andeq	r5, r3, r0, lsl #3
   14390:	push	{r4, lr}
   14394:	ldr	r3, [pc, #8]	; 143a4 <__assert_fail@plt+0x30cc>
   14398:	mvn	r2, #0
   1439c:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   143a0:	pop	{r4, pc}
   143a4:	muleq	r3, r0, r6
   143a8:	push	{r4, lr}
   143ac:	ldr	r3, [pc, #4]	; 143b8 <__assert_fail@plt+0x30e0>
   143b0:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   143b4:	pop	{r4, pc}
   143b8:	muleq	r3, r0, r6
   143bc:	push	{r4, lr}
   143c0:	mov	r1, r0
   143c4:	mov	r0, #0
   143c8:	bl	14390 <__assert_fail@plt+0x30b8>
   143cc:	pop	{r4, pc}
   143d0:	push	{r4, lr}
   143d4:	mov	r2, r1
   143d8:	mov	r1, r0
   143dc:	mov	r0, #0
   143e0:	bl	143a8 <__assert_fail@plt+0x30d0>
   143e4:	pop	{r4, pc}
   143e8:	push	{r4, r5, lr}
   143ec:	sub	sp, sp, #52	; 0x34
   143f0:	mov	r4, r0
   143f4:	mov	r5, r2
   143f8:	mov	r0, sp
   143fc:	bl	12bf0 <__assert_fail@plt+0x1918>
   14400:	mov	r3, sp
   14404:	mvn	r2, #0
   14408:	mov	r1, r5
   1440c:	mov	r0, r4
   14410:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   14414:	add	sp, sp, #52	; 0x34
   14418:	pop	{r4, r5, pc}
   1441c:	push	{r4, r5, r6, lr}
   14420:	sub	sp, sp, #48	; 0x30
   14424:	mov	r4, r0
   14428:	mov	r5, r2
   1442c:	mov	r6, r3
   14430:	mov	r0, sp
   14434:	bl	12bf0 <__assert_fail@plt+0x1918>
   14438:	mov	r3, sp
   1443c:	mov	r2, r6
   14440:	mov	r1, r5
   14444:	mov	r0, r4
   14448:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   1444c:	add	sp, sp, #48	; 0x30
   14450:	pop	{r4, r5, r6, pc}
   14454:	push	{r4, lr}
   14458:	mov	r2, r1
   1445c:	mov	r1, r0
   14460:	mov	r0, #0
   14464:	bl	143e8 <__assert_fail@plt+0x3110>
   14468:	pop	{r4, pc}
   1446c:	push	{r4, lr}
   14470:	mov	r3, r2
   14474:	mov	r2, r1
   14478:	mov	r1, r0
   1447c:	mov	r0, #0
   14480:	bl	1441c <__assert_fail@plt+0x3144>
   14484:	pop	{r4, pc}
   14488:	push	{r4, r5, r6, lr}
   1448c:	sub	sp, sp, #48	; 0x30
   14490:	mov	r4, r0
   14494:	mov	r5, r1
   14498:	mov	r6, r2
   1449c:	mov	ip, sp
   144a0:	ldr	lr, [pc, #64]	; 144e8 <__assert_fail@plt+0x3210>
   144a4:	ldm	lr!, {r0, r1, r2, r3}
   144a8:	stmia	ip!, {r0, r1, r2, r3}
   144ac:	ldm	lr!, {r0, r1, r2, r3}
   144b0:	stmia	ip!, {r0, r1, r2, r3}
   144b4:	ldm	lr, {r0, r1, r2, r3}
   144b8:	stm	ip, {r0, r1, r2, r3}
   144bc:	mov	r2, #1
   144c0:	mov	r1, r6
   144c4:	mov	r0, sp
   144c8:	bl	140f4 <__assert_fail@plt+0x2e1c>
   144cc:	mov	r3, sp
   144d0:	mov	r2, r5
   144d4:	mov	r1, r4
   144d8:	mov	r0, #0
   144dc:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   144e0:	add	sp, sp, #48	; 0x30
   144e4:	pop	{r4, r5, r6, pc}
   144e8:	muleq	r3, r0, r6
   144ec:	push	{r4, lr}
   144f0:	mov	r2, r1
   144f4:	mvn	r1, #0
   144f8:	bl	14488 <__assert_fail@plt+0x31b0>
   144fc:	pop	{r4, pc}
   14500:	push	{r4, lr}
   14504:	mov	r1, #58	; 0x3a
   14508:	bl	144ec <__assert_fail@plt+0x3214>
   1450c:	pop	{r4, pc}
   14510:	push	{r4, lr}
   14514:	mov	r2, #58	; 0x3a
   14518:	bl	14488 <__assert_fail@plt+0x31b0>
   1451c:	pop	{r4, pc}
   14520:	push	{r4, r5, lr}
   14524:	sub	sp, sp, #100	; 0x64
   14528:	mov	r4, r0
   1452c:	mov	r5, r2
   14530:	mov	r0, sp
   14534:	bl	12bf0 <__assert_fail@plt+0x1918>
   14538:	add	lr, sp, #48	; 0x30
   1453c:	mov	ip, sp
   14540:	ldm	ip!, {r0, r1, r2, r3}
   14544:	stmia	lr!, {r0, r1, r2, r3}
   14548:	ldm	ip!, {r0, r1, r2, r3}
   1454c:	stmia	lr!, {r0, r1, r2, r3}
   14550:	ldm	ip, {r0, r1, r2, r3}
   14554:	stm	lr, {r0, r1, r2, r3}
   14558:	mov	r2, #1
   1455c:	mov	r1, #58	; 0x3a
   14560:	add	r0, sp, #48	; 0x30
   14564:	bl	140f4 <__assert_fail@plt+0x2e1c>
   14568:	add	r3, sp, #48	; 0x30
   1456c:	mvn	r2, #0
   14570:	mov	r1, r5
   14574:	mov	r0, r4
   14578:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   1457c:	add	sp, sp, #100	; 0x64
   14580:	pop	{r4, r5, pc}
   14584:	push	{r4, r5, r6, r7, lr}
   14588:	sub	sp, sp, #52	; 0x34
   1458c:	mov	r4, r0
   14590:	mov	r6, r1
   14594:	mov	r7, r2
   14598:	mov	r5, r3
   1459c:	mov	ip, sp
   145a0:	ldr	lr, [pc, #64]	; 145e8 <__assert_fail@plt+0x3310>
   145a4:	ldm	lr!, {r0, r1, r2, r3}
   145a8:	stmia	ip!, {r0, r1, r2, r3}
   145ac:	ldm	lr!, {r0, r1, r2, r3}
   145b0:	stmia	ip!, {r0, r1, r2, r3}
   145b4:	ldm	lr, {r0, r1, r2, r3}
   145b8:	stm	ip, {r0, r1, r2, r3}
   145bc:	mov	r2, r7
   145c0:	mov	r1, r6
   145c4:	mov	r0, sp
   145c8:	bl	14150 <__assert_fail@plt+0x2e78>
   145cc:	mov	r3, sp
   145d0:	ldr	r2, [sp, #72]	; 0x48
   145d4:	mov	r1, r5
   145d8:	mov	r0, r4
   145dc:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   145e0:	add	sp, sp, #52	; 0x34
   145e4:	pop	{r4, r5, r6, r7, pc}
   145e8:	muleq	r3, r0, r6
   145ec:	push	{lr}		; (str lr, [sp, #-4]!)
   145f0:	sub	sp, sp, #12
   145f4:	mvn	ip, #0
   145f8:	str	ip, [sp]
   145fc:	bl	14584 <__assert_fail@plt+0x32ac>
   14600:	add	sp, sp, #12
   14604:	pop	{pc}		; (ldr pc, [sp], #4)
   14608:	push	{r4, lr}
   1460c:	mov	r3, r2
   14610:	mov	r2, r1
   14614:	mov	r1, r0
   14618:	mov	r0, #0
   1461c:	bl	145ec <__assert_fail@plt+0x3314>
   14620:	pop	{r4, pc}
   14624:	push	{lr}		; (str lr, [sp, #-4]!)
   14628:	sub	sp, sp, #12
   1462c:	str	r3, [sp]
   14630:	mov	r3, r2
   14634:	mov	r2, r1
   14638:	mov	r1, r0
   1463c:	mov	r0, #0
   14640:	bl	14584 <__assert_fail@plt+0x32ac>
   14644:	add	sp, sp, #12
   14648:	pop	{pc}		; (ldr pc, [sp], #4)
   1464c:	push	{r4, lr}
   14650:	ldr	r3, [pc, #4]	; 1465c <__assert_fail@plt+0x3384>
   14654:	bl	13ec8 <__assert_fail@plt+0x2bf0>
   14658:	pop	{r4, pc}
   1465c:	andeq	r5, r3, r8, lsl #3
   14660:	push	{r4, lr}
   14664:	mov	r2, r1
   14668:	mov	r1, r0
   1466c:	mov	r0, #0
   14670:	bl	1464c <__assert_fail@plt+0x3374>
   14674:	pop	{r4, pc}
   14678:	push	{r4, lr}
   1467c:	mvn	r2, #0
   14680:	bl	1464c <__assert_fail@plt+0x3374>
   14684:	pop	{r4, pc}
   14688:	push	{r4, lr}
   1468c:	mov	r1, r0
   14690:	mov	r0, #0
   14694:	bl	14678 <__assert_fail@plt+0x33a0>
   14698:	pop	{r4, pc}
   1469c:	ldr	r3, [r0, #80]	; 0x50
   146a0:	cmp	r3, #1
   146a4:	beq	146f8 <__assert_fail@plt+0x3420>
   146a8:	add	ip, r1, #1
   146ac:	ldr	r3, [r0, #28]
   146b0:	cmp	ip, r3
   146b4:	bge	14700 <__assert_fail@plt+0x3428>
   146b8:	ldr	r0, [r0, #8]
   146bc:	add	r2, r0, ip, lsl #2
   146c0:	ldr	r0, [r0, ip, lsl #2]
   146c4:	cmn	r0, #1
   146c8:	bne	14708 <__assert_fail@plt+0x3430>
   146cc:	sub	r1, r3, r1
   146d0:	mov	r3, #2
   146d4:	mov	r0, r3
   146d8:	cmp	r3, r1
   146dc:	beq	146f4 <__assert_fail@plt+0x341c>
   146e0:	add	r3, r3, #1
   146e4:	ldr	ip, [r2, #4]!
   146e8:	cmn	ip, #1
   146ec:	beq	146d4 <__assert_fail@plt+0x33fc>
   146f0:	bx	lr
   146f4:	bx	lr
   146f8:	mov	r0, #1
   146fc:	bx	lr
   14700:	mov	r0, #1
   14704:	bx	lr
   14708:	mov	r0, #1
   1470c:	bx	lr
   14710:	ldr	r3, [r0, #80]	; 0x50
   14714:	cmp	r3, #1
   14718:	ldreq	r3, [r0, #4]
   1471c:	ldrbeq	r0, [r3, r1]
   14720:	ldrne	r3, [r0, #8]
   14724:	ldrne	r0, [r3, r1, lsl #2]
   14728:	bx	lr
   1472c:	ldr	ip, [r0, #36]	; 0x24
   14730:	ldr	r3, [r0, #48]	; 0x30
   14734:	cmp	ip, r3
   14738:	movge	ip, r3
   1473c:	ldr	r3, [r0, #28]
   14740:	cmp	ip, r3
   14744:	ble	14774 <__assert_fail@plt+0x349c>
   14748:	ldr	r2, [r0]
   1474c:	ldr	r1, [r0, #24]
   14750:	add	r2, r2, r3
   14754:	ldrb	r2, [r2, r1]
   14758:	ldr	r1, [r0, #64]	; 0x40
   1475c:	ldrb	r1, [r1, r2]
   14760:	ldr	r2, [r0, #4]
   14764:	strb	r1, [r2, r3]
   14768:	add	r3, r3, #1
   1476c:	cmp	ip, r3
   14770:	bne	14748 <__assert_fail@plt+0x3470>
   14774:	str	r3, [r0, #28]
   14778:	str	r3, [r0, #32]
   1477c:	bx	lr
   14780:	push	{r4, r5, lr}
   14784:	mov	r4, r0
   14788:	cmp	r1, #0
   1478c:	cmpne	r0, #0
   14790:	moveq	r0, #1
   14794:	movne	r0, #0
   14798:	beq	147ec <__assert_fail@plt+0x3514>
   1479c:	mov	r5, r1
   147a0:	ldr	r2, [r4, #4]
   147a4:	ldr	r3, [r1, #4]
   147a8:	cmp	r2, r3
   147ac:	subeq	r3, r2, #1
   147b0:	lsleq	r3, r3, #2
   147b4:	beq	147bc <__assert_fail@plt+0x34e4>
   147b8:	pop	{r4, r5, pc}
   147bc:	subs	r2, r2, #1
   147c0:	bmi	147e4 <__assert_fail@plt+0x350c>
   147c4:	ldr	ip, [r4, #8]
   147c8:	ldr	lr, [ip, r3]
   147cc:	ldr	ip, [r5, #8]
   147d0:	ldr	ip, [ip, r3]
   147d4:	sub	r3, r3, #4
   147d8:	cmp	lr, ip
   147dc:	beq	147bc <__assert_fail@plt+0x34e4>
   147e0:	pop	{r4, r5, pc}
   147e4:	mov	r0, #1
   147e8:	pop	{r4, r5, pc}
   147ec:	mov	r0, #0
   147f0:	pop	{r4, r5, pc}
   147f4:	push	{r4, lr}
   147f8:	ldr	lr, [r0, #4]
   147fc:	cmp	lr, #0
   14800:	ble	14884 <__assert_fail@plt+0x35ac>
   14804:	sub	lr, lr, #1
   14808:	mov	ip, #0
   1480c:	cmp	ip, lr
   14810:	bcs	14864 <__assert_fail@plt+0x358c>
   14814:	add	r2, ip, lr
   14818:	lsr	r2, r2, #1
   1481c:	ldr	r4, [r0, #8]
   14820:	ldr	r3, [r4, r2, lsl #2]
   14824:	cmp	r1, r3
   14828:	bgt	14850 <__assert_fail@plt+0x3578>
   1482c:	cmp	ip, r2
   14830:	bcs	14864 <__assert_fail@plt+0x358c>
   14834:	add	r3, ip, r2
   14838:	lsr	r3, r3, #1
   1483c:	ldr	lr, [r4, r3, lsl #2]
   14840:	cmp	lr, r1
   14844:	blt	14858 <__assert_fail@plt+0x3580>
   14848:	mov	r2, r3
   1484c:	b	1482c <__assert_fail@plt+0x3554>
   14850:	mov	r3, r2
   14854:	mov	r2, lr
   14858:	add	ip, r3, #1
   1485c:	mov	lr, r2
   14860:	b	1480c <__assert_fail@plt+0x3534>
   14864:	ldr	r3, [r0, #8]
   14868:	ldr	r3, [r3, ip, lsl #2]
   1486c:	cmp	r1, r3
   14870:	beq	1487c <__assert_fail@plt+0x35a4>
   14874:	mov	r0, #0
   14878:	pop	{r4, pc}
   1487c:	add	r0, ip, #1
   14880:	pop	{r4, pc}
   14884:	mov	r0, #0
   14888:	pop	{r4, pc}
   1488c:	cmp	r1, #0
   14890:	bxlt	lr
   14894:	ldr	r3, [r0, #4]
   14898:	cmp	r1, r3
   1489c:	bxge	lr
   148a0:	sub	r3, r3, #1
   148a4:	str	r3, [r0, #4]
   148a8:	cmp	r1, r3
   148ac:	bxge	lr
   148b0:	push	{lr}		; (str lr, [sp, #-4]!)
   148b4:	lsl	r3, r1, #2
   148b8:	ldr	ip, [r0, #8]
   148bc:	add	r2, r3, #4
   148c0:	ldr	lr, [ip, r2]
   148c4:	str	lr, [ip, r3]
   148c8:	add	r1, r1, #1
   148cc:	mov	r3, r2
   148d0:	ldr	r2, [r0, #4]
   148d4:	cmp	r2, r1
   148d8:	bgt	148b8 <__assert_fail@plt+0x35e0>
   148dc:	pop	{pc}		; (ldr pc, [sp], #4)
   148e0:	ldrb	r3, [r1, #24]
   148e4:	cmp	r3, #4
   148e8:	beq	148fc <__assert_fail@plt+0x3624>
   148ec:	cmp	r3, #17
   148f0:	beq	14928 <__assert_fail@plt+0x3650>
   148f4:	mov	r0, #0
   148f8:	bx	lr
   148fc:	ldr	r3, [r0, #132]	; 0x84
   14900:	cmp	r3, #0
   14904:	beq	148f4 <__assert_fail@plt+0x361c>
   14908:	ldr	r2, [r1, #20]
   1490c:	ldr	r2, [r3, r2, lsl #2]
   14910:	str	r2, [r1, #20]
   14914:	ldr	r3, [r0, #80]	; 0x50
   14918:	mov	r1, #1
   1491c:	orr	r3, r3, r1, lsl r2
   14920:	str	r3, [r0, #80]	; 0x50
   14924:	b	148f4 <__assert_fail@plt+0x361c>
   14928:	ldr	r3, [r1, #4]
   1492c:	cmp	r3, #0
   14930:	beq	148f4 <__assert_fail@plt+0x361c>
   14934:	ldrb	r2, [r3, #24]
   14938:	cmp	r2, #17
   1493c:	bne	148f4 <__assert_fail@plt+0x361c>
   14940:	ldr	r2, [r3, #20]
   14944:	ldr	r3, [r3, #4]
   14948:	str	r3, [r1, #4]
   1494c:	cmp	r3, #0
   14950:	strne	r1, [r3]
   14954:	ldr	r3, [r0, #132]	; 0x84
   14958:	ldr	r1, [r1, #20]
   1495c:	ldr	r1, [r3, r1, lsl #2]
   14960:	str	r1, [r3, r2, lsl #2]
   14964:	cmp	r2, #31
   14968:	ldrle	r3, [r0, #80]	; 0x50
   1496c:	movle	r1, #1
   14970:	bicle	r2, r3, r1, lsl r2
   14974:	strle	r2, [r0, #80]	; 0x50
   14978:	b	148f4 <__assert_fail@plt+0x361c>
   1497c:	ldrb	r3, [r1, #24]
   14980:	cmp	r3, #11
   14984:	beq	149b4 <__assert_fail@plt+0x36dc>
   14988:	cmp	r3, #16
   1498c:	beq	149c4 <__assert_fail@plt+0x36ec>
   14990:	ldr	r3, [r1, #4]
   14994:	cmp	r3, #0
   14998:	ldrne	r2, [r1, #16]
   1499c:	strne	r2, [r3, #16]
   149a0:	ldr	r3, [r1, #8]
   149a4:	cmp	r3, #0
   149a8:	ldrne	r2, [r1, #16]
   149ac:	strne	r2, [r3, #16]
   149b0:	b	149bc <__assert_fail@plt+0x36e4>
   149b4:	ldr	r3, [r1, #4]
   149b8:	str	r1, [r3, #16]
   149bc:	mov	r0, #0
   149c0:	bx	lr
   149c4:	ldr	r3, [r1, #4]
   149c8:	ldr	r2, [r1, #8]
   149cc:	ldr	r2, [r2, #12]
   149d0:	str	r2, [r3, #16]
   149d4:	ldr	r3, [r1, #8]
   149d8:	ldr	r2, [r1, #16]
   149dc:	str	r2, [r3, #16]
   149e0:	b	149bc <__assert_fail@plt+0x36e4>
   149e4:	ldr	r3, [r1, #40]	; 0x28
   149e8:	ldr	ip, [r1, #56]	; 0x38
   149ec:	cmp	ip, r3
   149f0:	ble	14a68 <__assert_fail@plt+0x3790>
   149f4:	push	{lr}		; (str lr, [sp, #-4]!)
   149f8:	ldr	ip, [r1, #4]
   149fc:	ldrb	r3, [ip, r3]
   14a00:	strb	r3, [r0]
   14a04:	ldr	ip, [r1, #80]	; 0x50
   14a08:	cmp	ip, #1
   14a0c:	ble	14a30 <__assert_fail@plt+0x3758>
   14a10:	ldr	ip, [r1, #40]	; 0x28
   14a14:	ldr	lr, [r1, #28]
   14a18:	cmp	ip, lr
   14a1c:	beq	14a30 <__assert_fail@plt+0x3758>
   14a20:	ldr	lr, [r1, #8]
   14a24:	ldr	ip, [lr, ip, lsl #2]
   14a28:	cmn	ip, #1
   14a2c:	beq	14a78 <__assert_fail@plt+0x37a0>
   14a30:	cmp	r3, #92	; 0x5c
   14a34:	beq	14a88 <__assert_fail@plt+0x37b0>
   14a38:	cmp	r3, #91	; 0x5b
   14a3c:	beq	14ad4 <__assert_fail@plt+0x37fc>
   14a40:	cmp	r3, #93	; 0x5d
   14a44:	beq	14b60 <__assert_fail@plt+0x3888>
   14a48:	cmp	r3, #94	; 0x5e
   14a4c:	beq	14b70 <__assert_fail@plt+0x3898>
   14a50:	cmp	r3, #45	; 0x2d
   14a54:	bne	14aa4 <__assert_fail@plt+0x37cc>
   14a58:	mov	r3, #22
   14a5c:	strb	r3, [r0, #4]
   14a60:	mov	r0, #1
   14a64:	pop	{pc}		; (ldr pc, [sp], #4)
   14a68:	mov	r3, #2
   14a6c:	strb	r3, [r0, #4]
   14a70:	mov	r0, #0
   14a74:	bx	lr
   14a78:	mov	r3, #1
   14a7c:	strb	r3, [r0, #4]
   14a80:	mov	r0, r3
   14a84:	pop	{pc}		; (ldr pc, [sp], #4)
   14a88:	tst	r2, #1
   14a8c:	beq	14aa4 <__assert_fail@plt+0x37cc>
   14a90:	ldr	r3, [r1, #40]	; 0x28
   14a94:	add	r3, r3, #1
   14a98:	ldr	r2, [r1, #48]	; 0x30
   14a9c:	cmp	r3, r2
   14aa0:	blt	14ab4 <__assert_fail@plt+0x37dc>
   14aa4:	mov	r3, #1
   14aa8:	strb	r3, [r0, #4]
   14aac:	mov	r0, r3
   14ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ab4:	str	r3, [r1, #40]	; 0x28
   14ab8:	ldr	r2, [r1, #4]
   14abc:	ldrb	r3, [r2, r3]
   14ac0:	strb	r3, [r0]
   14ac4:	mov	r3, #1
   14ac8:	strb	r3, [r0, #4]
   14acc:	mov	r0, r3
   14ad0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad4:	ldr	r3, [r1, #40]	; 0x28
   14ad8:	add	lr, r3, #1
   14adc:	ldr	ip, [r1, #48]	; 0x30
   14ae0:	cmp	lr, ip
   14ae4:	bge	14b48 <__assert_fail@plt+0x3870>
   14ae8:	ldr	r1, [r1, #4]
   14aec:	add	r3, r1, r3
   14af0:	ldrb	r3, [r3, #1]
   14af4:	strb	r3, [r0]
   14af8:	cmp	r3, #58	; 0x3a
   14afc:	beq	14b30 <__assert_fail@plt+0x3858>
   14b00:	cmp	r3, #61	; 0x3d
   14b04:	beq	14b20 <__assert_fail@plt+0x3848>
   14b08:	cmp	r3, #46	; 0x2e
   14b0c:	bne	14b48 <__assert_fail@plt+0x3870>
   14b10:	mov	r3, #26
   14b14:	strb	r3, [r0, #4]
   14b18:	mov	r0, #2
   14b1c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b20:	mov	r3, #28
   14b24:	strb	r3, [r0, #4]
   14b28:	mov	r0, #2
   14b2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b30:	tst	r2, #4
   14b34:	beq	14b48 <__assert_fail@plt+0x3870>
   14b38:	mov	r3, #30
   14b3c:	strb	r3, [r0, #4]
   14b40:	mov	r0, #2
   14b44:	pop	{pc}		; (ldr pc, [sp], #4)
   14b48:	mov	r3, #1
   14b4c:	strb	r3, [r0, #4]
   14b50:	mov	r2, #91	; 0x5b
   14b54:	strb	r2, [r0]
   14b58:	mov	r0, r3
   14b5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b60:	mov	r3, #21
   14b64:	strb	r3, [r0, #4]
   14b68:	mov	r0, #1
   14b6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b70:	mov	r3, #25
   14b74:	strb	r3, [r0, #4]
   14b78:	mov	r0, #1
   14b7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14b80:	ldrb	r3, [r1, #24]
   14b84:	cmp	r3, #17
   14b88:	beq	14b94 <__assert_fail@plt+0x38bc>
   14b8c:	mov	r0, #0
   14b90:	bx	lr
   14b94:	ldr	r3, [r1, #20]
   14b98:	cmp	r0, r3
   14b9c:	ldrbeq	r3, [r1, #26]
   14ba0:	orreq	r3, r3, #8
   14ba4:	strbeq	r3, [r1, #26]
   14ba8:	b	14b8c <__assert_fail@plt+0x38b4>
   14bac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bb0:	sub	sp, sp, #52	; 0x34
   14bb4:	str	r0, [sp, #8]
   14bb8:	str	r1, [sp, #12]
   14bbc:	mov	r7, r2
   14bc0:	str	r3, [sp, #40]	; 0x28
   14bc4:	ldr	r9, [r0, #84]	; 0x54
   14bc8:	add	r3, r3, r3, lsl #1
   14bcc:	ldr	sl, [r9, #24]
   14bd0:	add	sl, sl, r3, lsl #2
   14bd4:	ldr	r3, [sl, #4]
   14bd8:	cmp	r3, #0
   14bdc:	ble	14d88 <__assert_fail@plt+0x3ab0>
   14be0:	ldr	r3, [sp, #88]	; 0x58
   14be4:	add	r3, r3, r3, lsl #1
   14be8:	lsl	r3, r3, #3
   14bec:	mov	r2, #1
   14bf0:	lsl	r2, r2, r7
   14bf4:	str	r2, [sp, #20]
   14bf8:	mvn	r2, r2
   14bfc:	str	r2, [sp, #24]
   14c00:	mov	r8, #0
   14c04:	mov	r2, r1
   14c08:	and	r1, r1, #1
   14c0c:	str	r1, [sp, #28]
   14c10:	and	r2, r2, #2
   14c14:	str	r2, [sp, #16]
   14c18:	add	r3, r3, #24
   14c1c:	str	r3, [sp, #44]	; 0x2c
   14c20:	b	14d04 <__assert_fail@plt+0x3a2c>
   14c24:	ldr	r3, [r9, #20]
   14c28:	add	r3, r3, fp
   14c2c:	ldr	r3, [r3, #8]
   14c30:	ldr	r3, [r3]
   14c34:	cmp	sl, r3
   14c38:	beq	14cbc <__assert_fail@plt+0x39e4>
   14c3c:	str	r8, [sp]
   14c40:	mov	r2, r7
   14c44:	ldr	r1, [sp, #12]
   14c48:	ldr	r0, [sp, #8]
   14c4c:	bl	14bac <__assert_fail@plt+0x38d4>
   14c50:	cmn	r0, #1
   14c54:	beq	14cc8 <__assert_fail@plt+0x39f0>
   14c58:	cmp	r0, #0
   14c5c:	bne	14c6c <__assert_fail@plt+0x3994>
   14c60:	ldr	r3, [sp, #16]
   14c64:	cmp	r3, #0
   14c68:	bne	14cc8 <__assert_fail@plt+0x39f0>
   14c6c:	cmp	r7, #31
   14c70:	ldrle	r3, [r6, #-8]
   14c74:	ldrle	r2, [sp, #24]
   14c78:	andle	r3, r3, r2
   14c7c:	strle	r3, [r6, #-8]
   14c80:	add	r4, r4, #24
   14c84:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   14c88:	cmp	r3, #0
   14c8c:	beq	14cd0 <__assert_fail@plt+0x39f8>
   14c90:	mov	r6, r4
   14c94:	ldr	r3, [r4, #-24]	; 0xffffffe8
   14c98:	cmp	r5, r3
   14c9c:	bne	14c80 <__assert_fail@plt+0x39a8>
   14ca0:	cmp	r7, #31
   14ca4:	bgt	14c24 <__assert_fail@plt+0x394c>
   14ca8:	ldr	r3, [r4, #-8]
   14cac:	ldr	r2, [sp, #20]
   14cb0:	tst	r2, r3
   14cb4:	beq	14c80 <__assert_fail@plt+0x39a8>
   14cb8:	b	14c24 <__assert_fail@plt+0x394c>
   14cbc:	ldr	r3, [sp, #12]
   14cc0:	ands	r0, r3, #1
   14cc4:	mvnne	r0, #0
   14cc8:	add	sp, sp, #52	; 0x34
   14ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cd0:	ldr	sl, [sp, #32]
   14cd4:	ldr	r8, [sp, #36]	; 0x24
   14cd8:	b	14cf4 <__assert_fail@plt+0x3a1c>
   14cdc:	ldr	r3, [sp, #28]
   14ce0:	cmp	r3, #0
   14ce4:	beq	14cf4 <__assert_fail@plt+0x3a1c>
   14ce8:	ldr	r3, [r2, r5, lsl #3]
   14cec:	cmp	r3, r7
   14cf0:	beq	14d98 <__assert_fail@plt+0x3ac0>
   14cf4:	add	r8, r8, #1
   14cf8:	ldr	r3, [sl, #4]
   14cfc:	cmp	r3, r8
   14d00:	ble	14d88 <__assert_fail@plt+0x3ab0>
   14d04:	ldr	r3, [sl, #8]
   14d08:	ldr	r5, [r3, r8, lsl #2]
   14d0c:	ldr	r2, [r9]
   14d10:	add	r3, r2, r5, lsl #3
   14d14:	ldrb	r3, [r3, #4]
   14d18:	cmp	r3, #8
   14d1c:	beq	14cdc <__assert_fail@plt+0x3a04>
   14d20:	cmp	r3, #9
   14d24:	beq	14d68 <__assert_fail@plt+0x3a90>
   14d28:	cmp	r3, #4
   14d2c:	bne	14cf4 <__assert_fail@plt+0x3a1c>
   14d30:	ldr	r3, [sp, #88]	; 0x58
   14d34:	cmn	r3, #1
   14d38:	beq	14cf4 <__assert_fail@plt+0x3a1c>
   14d3c:	add	fp, r5, r5, lsl #1
   14d40:	lsl	fp, fp, #2
   14d44:	ldr	r3, [sp, #8]
   14d48:	ldr	r4, [r3, #116]	; 0x74
   14d4c:	ldr	r3, [sp, #44]	; 0x2c
   14d50:	add	r4, r4, r3
   14d54:	str	sl, [sp, #32]
   14d58:	str	r8, [sp, #36]	; 0x24
   14d5c:	ldr	sl, [sp, #40]	; 0x28
   14d60:	ldr	r8, [sp, #88]	; 0x58
   14d64:	b	14c90 <__assert_fail@plt+0x39b8>
   14d68:	ldr	r3, [sp, #16]
   14d6c:	cmp	r3, #0
   14d70:	beq	14cf4 <__assert_fail@plt+0x3a1c>
   14d74:	ldr	r3, [r2, r5, lsl #3]
   14d78:	cmp	r7, r3
   14d7c:	bne	14cf4 <__assert_fail@plt+0x3a1c>
   14d80:	mov	r0, #0
   14d84:	b	14cc8 <__assert_fail@plt+0x39f0>
   14d88:	ldr	r3, [sp, #12]
   14d8c:	lsr	r0, r3, #1
   14d90:	and	r0, r0, #1
   14d94:	b	14cc8 <__assert_fail@plt+0x39f0>
   14d98:	mvn	r0, #0
   14d9c:	b	14cc8 <__assert_fail@plt+0x39f0>
   14da0:	push	{lr}		; (str lr, [sp, #-4]!)
   14da4:	sub	sp, sp, #12
   14da8:	ldr	lr, [sp, #16]
   14dac:	add	r1, r1, r1, lsl #1
   14db0:	ldr	ip, [r0, #116]	; 0x74
   14db4:	add	r1, ip, r1, lsl #3
   14db8:	ldr	ip, [r1, #8]
   14dbc:	cmp	ip, lr
   14dc0:	bgt	14e10 <__assert_fail@plt+0x3b38>
   14dc4:	ldr	r1, [r1, #12]
   14dc8:	cmp	lr, r1
   14dcc:	movgt	r1, #1
   14dd0:	bgt	14df0 <__assert_fail@plt+0x3b18>
   14dd4:	cmp	lr, r1
   14dd8:	moveq	r1, #2
   14ddc:	movne	r1, #0
   14de0:	cmp	ip, lr
   14de4:	orreq	r1, r1, #1
   14de8:	cmp	r1, #0
   14dec:	bne	14dfc <__assert_fail@plt+0x3b24>
   14df0:	mov	r0, r1
   14df4:	add	sp, sp, #12
   14df8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dfc:	ldr	ip, [sp, #20]
   14e00:	str	ip, [sp]
   14e04:	bl	14bac <__assert_fail@plt+0x38d4>
   14e08:	mov	r1, r0
   14e0c:	b	14df0 <__assert_fail@plt+0x3b18>
   14e10:	mvn	r1, #0
   14e14:	b	14df0 <__assert_fail@plt+0x3b18>
   14e18:	push	{r4, r5, lr}
   14e1c:	mov	r4, r0
   14e20:	ldr	r5, [r0, #108]	; 0x6c
   14e24:	mov	r2, r5
   14e28:	mov	r0, #0
   14e2c:	cmp	r0, r2
   14e30:	bge	14e9c <__assert_fail@plt+0x3bc4>
   14e34:	add	ip, r0, r2
   14e38:	add	ip, ip, ip, lsr #31
   14e3c:	asr	ip, ip, #1
   14e40:	ldr	lr, [r4, #116]	; 0x74
   14e44:	add	r3, ip, ip, lsl #1
   14e48:	add	r3, lr, r3, lsl #3
   14e4c:	ldr	r3, [r3, #4]
   14e50:	cmp	r1, r3
   14e54:	bgt	14e88 <__assert_fail@plt+0x3bb0>
   14e58:	cmp	r0, ip
   14e5c:	bge	14e9c <__assert_fail@plt+0x3bc4>
   14e60:	add	r3, r0, ip
   14e64:	add	r3, r3, r3, lsr #31
   14e68:	asr	r3, r3, #1
   14e6c:	add	r2, r3, r3, lsl #1
   14e70:	add	r2, lr, r2, lsl #3
   14e74:	ldr	r2, [r2, #4]
   14e78:	cmp	r2, r1
   14e7c:	blt	14e90 <__assert_fail@plt+0x3bb8>
   14e80:	mov	ip, r3
   14e84:	b	14e58 <__assert_fail@plt+0x3b80>
   14e88:	mov	r3, ip
   14e8c:	mov	ip, r2
   14e90:	add	r0, r3, #1
   14e94:	mov	r2, ip
   14e98:	b	14e2c <__assert_fail@plt+0x3b54>
   14e9c:	cmp	r5, r0
   14ea0:	ble	14ec0 <__assert_fail@plt+0x3be8>
   14ea4:	ldr	r3, [r4, #116]	; 0x74
   14ea8:	add	r2, r0, r0, lsl #1
   14eac:	add	r3, r3, r2, lsl #3
   14eb0:	ldr	r3, [r3, #4]
   14eb4:	cmp	r1, r3
   14eb8:	mvnne	r0, #0
   14ebc:	pop	{r4, r5, pc}
   14ec0:	mvn	r0, #0
   14ec4:	pop	{r4, r5, pc}
   14ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ecc:	sub	sp, sp, #20
   14ed0:	mov	r4, r0
   14ed4:	mov	r6, r1
   14ed8:	str	r2, [sp, #12]
   14edc:	mov	r8, r3
   14ee0:	ldr	sl, [r0, #84]	; 0x54
   14ee4:	mov	r1, r3
   14ee8:	bl	14e18 <__assert_fail@plt+0x3b40>
   14eec:	mov	fp, r0
   14ef0:	ldr	r1, [sp, #60]	; 0x3c
   14ef4:	mov	r0, r4
   14ef8:	bl	14e18 <__assert_fail@plt+0x3b40>
   14efc:	str	r0, [sp, #8]
   14f00:	ldr	r3, [r6, #4]
   14f04:	cmp	r3, #0
   14f08:	ble	14f9c <__assert_fail@plt+0x3cc4>
   14f0c:	mov	r5, #0
   14f10:	ldr	r3, [r6, #8]
   14f14:	ldr	r1, [r3, r5, lsl #2]
   14f18:	ldr	r3, [r4, #116]	; 0x74
   14f1c:	add	r2, r1, r1, lsl #1
   14f20:	ldr	r2, [r3, r2, lsl #3]
   14f24:	ldr	r3, [sl]
   14f28:	ldr	r7, [r3, r2, lsl #3]
   14f2c:	str	fp, [sp, #4]
   14f30:	str	r8, [sp]
   14f34:	ldr	r3, [sp, #12]
   14f38:	mov	r2, r7
   14f3c:	mov	r0, r4
   14f40:	bl	14da0 <__assert_fail@plt+0x3ac8>
   14f44:	mov	r9, r0
   14f48:	ldr	r3, [r6, #8]
   14f4c:	ldr	r1, [r3, r5, lsl #2]
   14f50:	ldr	r3, [sp, #8]
   14f54:	str	r3, [sp, #4]
   14f58:	ldr	r3, [sp, #60]	; 0x3c
   14f5c:	str	r3, [sp]
   14f60:	ldr	r3, [sp, #56]	; 0x38
   14f64:	mov	r2, r7
   14f68:	mov	r0, r4
   14f6c:	bl	14da0 <__assert_fail@plt+0x3ac8>
   14f70:	cmp	r9, r0
   14f74:	beq	14f84 <__assert_fail@plt+0x3cac>
   14f78:	mov	r0, #1
   14f7c:	add	sp, sp, #20
   14f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f84:	add	r5, r5, #1
   14f88:	ldr	r3, [r6, #4]
   14f8c:	cmp	r3, r5
   14f90:	bgt	14f10 <__assert_fail@plt+0x3c38>
   14f94:	mov	r0, #0
   14f98:	b	14f7c <__assert_fail@plt+0x3ca4>
   14f9c:	mov	r0, #0
   14fa0:	b	14f7c <__assert_fail@plt+0x3ca4>
   14fa4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14fa8:	sub	sp, sp, #8
   14fac:	mov	r5, r0
   14fb0:	mov	r4, r1
   14fb4:	mov	r8, r2
   14fb8:	mov	r9, r3
   14fbc:	ldr	r6, [r1, #40]	; 0x28
   14fc0:	mov	r1, r6
   14fc4:	mov	r0, r4
   14fc8:	bl	1469c <__assert_fail@plt+0x33c4>
   14fcc:	cmp	r0, #1
   14fd0:	ble	15008 <__assert_fail@plt+0x3d30>
   14fd4:	mov	r7, r0
   14fd8:	mov	r3, #1
   14fdc:	str	r3, [r5]
   14fe0:	ldr	r1, [r4, #40]	; 0x28
   14fe4:	mov	r0, r4
   14fe8:	bl	14710 <__assert_fail@plt+0x3438>
   14fec:	str	r0, [r5, #4]
   14ff0:	ldr	r3, [r4, #40]	; 0x28
   14ff4:	add	r7, r3, r7
   14ff8:	str	r7, [r4, #40]	; 0x28
   14ffc:	mov	r0, #0
   15000:	add	sp, sp, #8
   15004:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15008:	add	r6, r6, r9
   1500c:	str	r6, [r4, #40]	; 0x28
   15010:	ldrb	r3, [r8, #4]
   15014:	and	r2, r3, #251	; 0xfb
   15018:	cmp	r3, #28
   1501c:	cmpne	r2, #26
   15020:	beq	15050 <__assert_fail@plt+0x3d78>
   15024:	ldrb	r2, [sp, #48]	; 0x30
   15028:	cmp	r3, #22
   1502c:	moveq	r3, r2
   15030:	orrne	r3, r2, #1
   15034:	cmp	r3, #0
   15038:	beq	151f8 <__assert_fail@plt+0x3f20>
   1503c:	mov	r0, #0
   15040:	str	r0, [r5]
   15044:	ldrb	r3, [r8]
   15048:	strb	r3, [r5, #4]
   1504c:	b	15000 <__assert_fail@plt+0x3d28>
   15050:	ldr	r3, [r4, #56]	; 0x38
   15054:	cmp	r6, r3
   15058:	movge	r0, #7
   1505c:	bge	15000 <__assert_fail@plt+0x3d28>
   15060:	ldrb	r9, [r8]
   15064:	mov	r6, #0
   15068:	b	15150 <__assert_fail@plt+0x3e78>
   1506c:	ldrb	r3, [r4, #75]	; 0x4b
   15070:	cmp	r3, #0
   15074:	bne	15090 <__assert_fail@plt+0x3db8>
   15078:	ldr	r2, [r4, #4]
   1507c:	ldr	r3, [r4, #40]	; 0x28
   15080:	add	r1, r3, #1
   15084:	str	r1, [r4, #40]	; 0x28
   15088:	ldrb	r7, [r2, r3]
   1508c:	b	15170 <__assert_fail@plt+0x3e98>
   15090:	ldrb	r3, [r4, #76]	; 0x4c
   15094:	cmp	r3, #0
   15098:	beq	1511c <__assert_fail@plt+0x3e44>
   1509c:	ldr	sl, [r4, #40]	; 0x28
   150a0:	ldr	r3, [r4, #28]
   150a4:	cmp	sl, r3
   150a8:	beq	150bc <__assert_fail@plt+0x3de4>
   150ac:	ldr	r3, [r4, #8]
   150b0:	ldr	r3, [r3, sl, lsl #2]
   150b4:	cmn	r3, #1
   150b8:	beq	150f0 <__assert_fail@plt+0x3e18>
   150bc:	ldr	r2, [r4, #12]
   150c0:	ldr	r3, [r4]
   150c4:	ldr	r1, [r2, sl, lsl #2]
   150c8:	ldr	r2, [r4, #24]
   150cc:	add	r3, r3, r1
   150d0:	ldrb	r7, [r3, r2]
   150d4:	bics	r3, r7, #127	; 0x7f
   150d8:	beq	15104 <__assert_fail@plt+0x3e2c>
   150dc:	ldr	r3, [r4, #4]
   150e0:	add	r2, sl, #1
   150e4:	str	r2, [r4, #40]	; 0x28
   150e8:	ldrb	r7, [r3, sl]
   150ec:	b	15170 <__assert_fail@plt+0x3e98>
   150f0:	ldr	r3, [r4, #4]
   150f4:	add	r2, sl, #1
   150f8:	str	r2, [r4, #40]	; 0x28
   150fc:	ldrb	r7, [r3, sl]
   15100:	b	15170 <__assert_fail@plt+0x3e98>
   15104:	mov	r1, sl
   15108:	mov	r0, r4
   1510c:	bl	1469c <__assert_fail@plt+0x33c4>
   15110:	add	r0, sl, r0
   15114:	str	r0, [r4, #40]	; 0x28
   15118:	b	15170 <__assert_fail@plt+0x3e98>
   1511c:	ldr	r3, [r4]
   15120:	ldr	r1, [r4, #24]
   15124:	ldr	r2, [r4, #40]	; 0x28
   15128:	add	r0, r2, #1
   1512c:	str	r0, [r4, #40]	; 0x28
   15130:	add	r3, r3, r1
   15134:	ldrb	r7, [r3, r2]
   15138:	b	15170 <__assert_fail@plt+0x3e98>
   1513c:	ldr	r3, [r5, #4]
   15140:	strb	r7, [r3, r6]
   15144:	add	r6, r6, #1
   15148:	cmp	r6, #32
   1514c:	beq	15224 <__assert_fail@plt+0x3f4c>
   15150:	ldrb	r3, [r8, #4]
   15154:	cmp	r3, #30
   15158:	beq	1506c <__assert_fail@plt+0x3d94>
   1515c:	ldr	r2, [r4, #4]
   15160:	ldr	r3, [r4, #40]	; 0x28
   15164:	add	r1, r3, #1
   15168:	str	r1, [r4, #40]	; 0x28
   1516c:	ldrb	r7, [r2, r3]
   15170:	ldr	r3, [r4, #40]	; 0x28
   15174:	ldr	r2, [r4, #56]	; 0x38
   15178:	cmp	r2, r3
   1517c:	ble	1521c <__assert_fail@plt+0x3f44>
   15180:	cmp	r9, r7
   15184:	bne	1513c <__assert_fail@plt+0x3e64>
   15188:	ldr	r2, [r4, #4]
   1518c:	ldrb	r2, [r2, r3]
   15190:	cmp	r2, #93	; 0x5d
   15194:	bne	1513c <__assert_fail@plt+0x3e64>
   15198:	add	r3, r3, #1
   1519c:	str	r3, [r4, #40]	; 0x28
   151a0:	ldr	r3, [r5, #4]
   151a4:	mov	r2, #0
   151a8:	strb	r2, [r3, r6]
   151ac:	ldrb	r3, [r8, #4]
   151b0:	cmp	r3, #28
   151b4:	beq	151d8 <__assert_fail@plt+0x3f00>
   151b8:	cmp	r3, #30
   151bc:	beq	151e8 <__assert_fail@plt+0x3f10>
   151c0:	cmp	r3, #26
   151c4:	moveq	r3, #3
   151c8:	streq	r3, [r5]
   151cc:	moveq	r0, r2
   151d0:	movne	r0, #0
   151d4:	b	15000 <__assert_fail@plt+0x3d28>
   151d8:	mov	r3, #2
   151dc:	str	r3, [r5]
   151e0:	mov	r0, #0
   151e4:	b	15000 <__assert_fail@plt+0x3d28>
   151e8:	mov	r3, #4
   151ec:	str	r3, [r5]
   151f0:	mov	r0, #0
   151f4:	b	15000 <__assert_fail@plt+0x3d28>
   151f8:	ldr	r2, [sp, #44]	; 0x2c
   151fc:	mov	r1, r4
   15200:	mov	r0, sp
   15204:	bl	149e4 <__assert_fail@plt+0x370c>
   15208:	ldrb	r3, [sp, #4]
   1520c:	cmp	r3, #21
   15210:	movne	r0, #11
   15214:	bne	15000 <__assert_fail@plt+0x3d28>
   15218:	b	1503c <__assert_fail@plt+0x3d64>
   1521c:	mov	r0, #7
   15220:	b	15000 <__assert_fail@plt+0x3d28>
   15224:	mov	r0, #7
   15228:	b	15000 <__assert_fail@plt+0x3d28>
   1522c:	push	{r4, r5, r6, lr}
   15230:	mov	r4, r0
   15234:	mov	r6, r1
   15238:	mov	r5, r2
   1523c:	b	15244 <__assert_fail@plt+0x3f6c>
   15240:	mov	r4, r3
   15244:	ldr	r3, [r4, #4]
   15248:	cmp	r3, #0
   1524c:	bne	15240 <__assert_fail@plt+0x3f68>
   15250:	ldr	r3, [r4, #8]
   15254:	cmp	r3, #0
   15258:	bne	15240 <__assert_fail@plt+0x3f68>
   1525c:	mov	r1, r4
   15260:	mov	r0, r5
   15264:	blx	r6
   15268:	cmp	r0, #0
   1526c:	popne	{r4, r5, r6, pc}
   15270:	ldr	r2, [r4]
   15274:	cmp	r2, #0
   15278:	popeq	{r4, r5, r6, pc}
   1527c:	ldr	r3, [r2, #8]
   15280:	cmp	r4, r3
   15284:	cmpne	r3, #0
   15288:	moveq	r1, #1
   1528c:	movne	r1, #0
   15290:	mov	r4, r2
   15294:	cmp	r1, #0
   15298:	bne	1525c <__assert_fail@plt+0x3f84>
   1529c:	b	15240 <__assert_fail@plt+0x3f68>
   152a0:	push	{r4, r5, r6, r7, r8, lr}
   152a4:	mov	r4, r0
   152a8:	mov	r6, r1
   152ac:	mov	r5, r2
   152b0:	mov	r7, #0
   152b4:	b	152bc <__assert_fail@plt+0x3fe4>
   152b8:	mov	r4, r3
   152bc:	mov	r1, r4
   152c0:	mov	r0, r5
   152c4:	blx	r6
   152c8:	cmp	r0, #0
   152cc:	popne	{r4, r5, r6, r7, r8, pc}
   152d0:	ldr	r3, [r4, #4]
   152d4:	cmp	r3, #0
   152d8:	moveq	r2, r7
   152dc:	bne	152b8 <__assert_fail@plt+0x3fe0>
   152e0:	ldr	r3, [r4, #8]
   152e4:	cmp	r3, #0
   152e8:	cmpne	r2, r3
   152ec:	bne	152b8 <__assert_fail@plt+0x3fe0>
   152f0:	ldr	r3, [r4]
   152f4:	mov	r2, r4
   152f8:	cmp	r3, #0
   152fc:	popeq	{r4, r5, r6, r7, r8, pc}
   15300:	mov	r4, r3
   15304:	b	152e0 <__assert_fail@plt+0x4008>
   15308:	push	{r4, r5, r6, lr}
   1530c:	mov	r4, r0
   15310:	mov	r5, r1
   15314:	ldr	r3, [r0, #80]	; 0x50
   15318:	cmp	r3, #1
   1531c:	ble	15364 <__assert_fail@plt+0x408c>
   15320:	cmn	r1, #-1073741823	; 0xc0000001
   15324:	bhi	15398 <__assert_fail@plt+0x40c0>
   15328:	lsl	r6, r1, #2
   1532c:	mov	r1, r6
   15330:	ldr	r0, [r0, #8]
   15334:	bl	22d6c <__assert_fail@plt+0x11a94>
   15338:	cmp	r0, #0
   1533c:	beq	153a0 <__assert_fail@plt+0x40c8>
   15340:	str	r0, [r4, #8]
   15344:	ldr	r0, [r4, #12]
   15348:	cmp	r0, #0
   1534c:	beq	15364 <__assert_fail@plt+0x408c>
   15350:	mov	r1, r6
   15354:	bl	22d6c <__assert_fail@plt+0x11a94>
   15358:	cmp	r0, #0
   1535c:	beq	153a8 <__assert_fail@plt+0x40d0>
   15360:	str	r0, [r4, #12]
   15364:	ldrb	r3, [r4, #75]	; 0x4b
   15368:	cmp	r3, #0
   1536c:	bne	1537c <__assert_fail@plt+0x40a4>
   15370:	str	r5, [r4, #36]	; 0x24
   15374:	mov	r0, #0
   15378:	pop	{r4, r5, r6, pc}
   1537c:	mov	r1, r5
   15380:	ldr	r0, [r4, #4]
   15384:	bl	22d6c <__assert_fail@plt+0x11a94>
   15388:	cmp	r0, #0
   1538c:	beq	153b0 <__assert_fail@plt+0x40d8>
   15390:	str	r0, [r4, #4]
   15394:	b	15370 <__assert_fail@plt+0x4098>
   15398:	mov	r0, #12
   1539c:	pop	{r4, r5, r6, pc}
   153a0:	mov	r0, #12
   153a4:	pop	{r4, r5, r6, pc}
   153a8:	mov	r0, #12
   153ac:	pop	{r4, r5, r6, pc}
   153b0:	mov	r0, #12
   153b4:	pop	{r4, r5, r6, pc}
   153b8:	push	{r4, r5, r6, lr}
   153bc:	mov	r4, r0
   153c0:	mov	r5, r1
   153c4:	ldr	r1, [r0]
   153c8:	ldr	r3, [r0, #4]
   153cc:	cmp	r1, r3
   153d0:	beq	153f0 <__assert_fail@plt+0x4118>
   153d4:	ldr	r2, [r4, #8]
   153d8:	ldr	r3, [r4, #4]
   153dc:	add	r1, r3, #1
   153e0:	str	r1, [r4, #4]
   153e4:	str	r5, [r2, r3, lsl #2]
   153e8:	mov	r0, #1
   153ec:	pop	{r4, r5, r6, pc}
   153f0:	add	r1, r1, #1
   153f4:	lsl	r3, r1, #1
   153f8:	str	r3, [r0]
   153fc:	lsl	r1, r1, #3
   15400:	ldr	r0, [r0, #8]
   15404:	bl	22d6c <__assert_fail@plt+0x11a94>
   15408:	cmp	r0, #0
   1540c:	strne	r0, [r4, #8]
   15410:	bne	153d4 <__assert_fail@plt+0x40fc>
   15414:	mov	r0, #0
   15418:	pop	{r4, r5, r6, pc}
   1541c:	push	{r4, r5, r6, r7, r8, lr}
   15420:	mov	r7, r0
   15424:	mov	r5, r1
   15428:	mov	r4, r2
   1542c:	mov	r6, r3
   15430:	ldr	r3, [r0, #64]	; 0x40
   15434:	cmp	r3, #31
   15438:	beq	154ac <__assert_fail@plt+0x41d4>
   1543c:	ldr	r3, [r7, #56]	; 0x38
   15440:	ldr	r2, [r7, #64]	; 0x40
   15444:	add	r1, r2, #1
   15448:	str	r1, [r7, #64]	; 0x40
   1544c:	lsl	r2, r2, #5
   15450:	add	ip, r2, #4
   15454:	add	ip, r3, ip
   15458:	add	r3, r3, r2
   1545c:	mov	r2, #0
   15460:	str	r2, [r3, #4]
   15464:	str	r5, [r3, #8]
   15468:	str	r4, [r3, #12]
   1546c:	add	lr, r3, #24
   15470:	ldm	r6, {r0, r1}
   15474:	stm	lr, {r0, r1}
   15478:	ldrb	r1, [r3, #30]
   1547c:	and	r1, r1, #243	; 0xf3
   15480:	strb	r1, [r3, #30]
   15484:	str	r2, [r3, #16]
   15488:	str	r2, [r3, #20]
   1548c:	mvn	r2, #0
   15490:	str	r2, [r3, #32]
   15494:	cmp	r5, #0
   15498:	strne	ip, [r5]
   1549c:	cmp	r4, #0
   154a0:	strne	ip, [r4]
   154a4:	mov	r0, ip
   154a8:	pop	{r4, r5, r6, r7, r8, pc}
   154ac:	mov	r0, #996	; 0x3e4
   154b0:	bl	22d3c <__assert_fail@plt+0x11a64>
   154b4:	cmp	r0, #0
   154b8:	beq	154d4 <__assert_fail@plt+0x41fc>
   154bc:	ldr	r3, [r7, #56]	; 0x38
   154c0:	str	r3, [r0]
   154c4:	str	r0, [r7, #56]	; 0x38
   154c8:	mov	r3, #0
   154cc:	str	r3, [r7, #64]	; 0x40
   154d0:	b	1543c <__assert_fail@plt+0x4164>
   154d4:	mov	ip, #0
   154d8:	b	154a4 <__assert_fail@plt+0x41cc>
   154dc:	push	{r4, r5, r6, r7, r8, lr}
   154e0:	sub	sp, sp, #8
   154e4:	mov	r4, r0
   154e8:	mov	r8, r1
   154ec:	ldr	r5, [r0]
   154f0:	add	r6, sp, #4
   154f4:	mov	r7, #0
   154f8:	add	r3, r4, #20
   154fc:	mov	r2, r7
   15500:	mov	r1, r7
   15504:	mov	r0, r8
   15508:	bl	1541c <__assert_fail@plt+0x4144>
   1550c:	str	r0, [r6]
   15510:	cmp	r0, #0
   15514:	beq	1554c <__assert_fail@plt+0x4274>
   15518:	str	r5, [r0]
   1551c:	ldr	r2, [r6]
   15520:	ldrb	r3, [r2, #26]
   15524:	orr	r3, r3, #4
   15528:	strb	r3, [r2, #26]
   1552c:	ldr	r5, [r6]
   15530:	ldr	r3, [r4, #4]
   15534:	cmp	r3, #0
   15538:	beq	15554 <__assert_fail@plt+0x427c>
   1553c:	add	r6, r5, #4
   15540:	mov	r4, r3
   15544:	b	154f8 <__assert_fail@plt+0x4220>
   15548:	ldr	r0, [sp, #4]
   1554c:	add	sp, sp, #8
   15550:	pop	{r4, r5, r6, r7, r8, pc}
   15554:	mov	r2, r7
   15558:	ldr	r3, [r4, #8]
   1555c:	cmp	r3, #0
   15560:	cmpne	r2, r3
   15564:	bne	15584 <__assert_fail@plt+0x42ac>
   15568:	ldr	r3, [r4]
   1556c:	ldr	r5, [r5]
   15570:	mov	r2, r4
   15574:	cmp	r3, #0
   15578:	beq	15548 <__assert_fail@plt+0x4270>
   1557c:	mov	r4, r3
   15580:	b	15558 <__assert_fail@plt+0x4280>
   15584:	add	r6, r5, #8
   15588:	mov	r4, r3
   1558c:	b	154f8 <__assert_fail@plt+0x4220>
   15590:	push	{lr}		; (str lr, [sp, #-4]!)
   15594:	sub	sp, sp, #12
   15598:	mov	ip, #0
   1559c:	str	ip, [sp]
   155a0:	str	ip, [sp, #4]
   155a4:	strb	r3, [sp, #4]
   155a8:	mov	r3, sp
   155ac:	bl	1541c <__assert_fail@plt+0x4144>
   155b0:	add	sp, sp, #12
   155b4:	pop	{pc}		; (ldr pc, [sp], #4)
   155b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155bc:	ldr	r6, [r1]
   155c0:	ldr	r5, [r2, #4]
   155c4:	ldrb	r1, [r1, #28]
   155c8:	adds	r3, r5, #0
   155cc:	movne	r3, #1
   155d0:	ands	r3, r3, r1, lsr #4
   155d4:	beq	155f4 <__assert_fail@plt+0x431c>
   155d8:	ldr	r3, [r2, #20]
   155dc:	cmp	r3, #31
   155e0:	bgt	156bc <__assert_fail@plt+0x43e4>
   155e4:	ldr	r1, [r6, #80]	; 0x50
   155e8:	lsr	r3, r1, r3
   155ec:	tst	r3, #1
   155f0:	beq	156bc <__assert_fail@plt+0x43e4>
   155f4:	mov	r4, r2
   155f8:	mov	r9, r0
   155fc:	mov	r3, #8
   15600:	mov	r2, #0
   15604:	mov	r1, r2
   15608:	mov	r0, r6
   1560c:	bl	15590 <__assert_fail@plt+0x42b8>
   15610:	mov	r7, r0
   15614:	mov	r3, #9
   15618:	mov	r2, #0
   1561c:	mov	r1, r2
   15620:	mov	r0, r6
   15624:	bl	15590 <__assert_fail@plt+0x42b8>
   15628:	mov	r8, r0
   1562c:	cmp	r5, #0
   15630:	moveq	sl, r0
   15634:	beq	15650 <__assert_fail@plt+0x4378>
   15638:	mov	r3, #16
   1563c:	mov	r2, r0
   15640:	mov	r1, r5
   15644:	mov	r0, r6
   15648:	bl	15590 <__assert_fail@plt+0x42b8>
   1564c:	mov	sl, r0
   15650:	mov	r3, #16
   15654:	mov	r2, sl
   15658:	mov	r1, r7
   1565c:	mov	r0, r6
   15660:	bl	15590 <__assert_fail@plt+0x42b8>
   15664:	mov	r5, r0
   15668:	cmp	sl, #0
   1566c:	cmpne	r0, #0
   15670:	beq	156c4 <__assert_fail@plt+0x43ec>
   15674:	cmp	r8, #0
   15678:	cmpne	r7, #0
   1567c:	beq	156c4 <__assert_fail@plt+0x43ec>
   15680:	ldr	r3, [r4, #20]
   15684:	str	r3, [r8, #20]
   15688:	str	r3, [r7, #20]
   1568c:	ldrb	r3, [r4, #26]
   15690:	lsr	r3, r3, #3
   15694:	and	r3, r3, #1
   15698:	ldrb	r2, [r8, #26]
   1569c:	and	r1, r3, #1
   156a0:	bic	r2, r2, #8
   156a4:	orr	r2, r2, r1, lsl #3
   156a8:	strb	r2, [r8, #26]
   156ac:	ldrb	r2, [r7, #26]
   156b0:	bic	r2, r2, #8
   156b4:	orr	r3, r2, r1, lsl #3
   156b8:	strb	r3, [r7, #26]
   156bc:	mov	r0, r5
   156c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   156c4:	mov	r3, #12
   156c8:	str	r3, [r9]
   156cc:	mov	r5, #0
   156d0:	b	156bc <__assert_fail@plt+0x43e4>
   156d4:	push	{r4, r5, lr}
   156d8:	sub	sp, sp, #12
   156dc:	mov	r5, r0
   156e0:	mov	r4, r1
   156e4:	mov	r3, #0
   156e8:	str	r3, [sp, #4]
   156ec:	ldr	r2, [r1, #4]
   156f0:	cmp	r2, r3
   156f4:	beq	15704 <__assert_fail@plt+0x442c>
   156f8:	ldrb	r3, [r2, #24]
   156fc:	cmp	r3, #17
   15700:	beq	15728 <__assert_fail@plt+0x4450>
   15704:	ldr	r2, [r4, #8]
   15708:	cmp	r2, #0
   1570c:	beq	1571c <__assert_fail@plt+0x4444>
   15710:	ldrb	r3, [r2, #24]
   15714:	cmp	r3, #17
   15718:	beq	15744 <__assert_fail@plt+0x446c>
   1571c:	ldr	r0, [sp, #4]
   15720:	add	sp, sp, #12
   15724:	pop	{r4, r5, pc}
   15728:	mov	r1, r0
   1572c:	add	r0, sp, #4
   15730:	bl	155b8 <__assert_fail@plt+0x42e0>
   15734:	str	r0, [r4, #4]
   15738:	cmp	r0, #0
   1573c:	strne	r4, [r0]
   15740:	b	15704 <__assert_fail@plt+0x442c>
   15744:	mov	r1, r5
   15748:	add	r0, sp, #4
   1574c:	bl	155b8 <__assert_fail@plt+0x42e0>
   15750:	str	r0, [r4, #8]
   15754:	cmp	r0, #0
   15758:	strne	r4, [r0]
   1575c:	b	1571c <__assert_fail@plt+0x4444>
   15760:	push	{r4, r5, r6, lr}
   15764:	mov	r4, r0
   15768:	mov	r5, r1
   1576c:	mov	r3, #1
   15770:	str	r3, [r0]
   15774:	str	r3, [r0, #4]
   15778:	mov	r0, #4
   1577c:	bl	22d3c <__assert_fail@plt+0x11a64>
   15780:	str	r0, [r4, #8]
   15784:	cmp	r0, #0
   15788:	moveq	r3, #0
   1578c:	streq	r3, [r4, #4]
   15790:	streq	r3, [r4]
   15794:	moveq	r0, #12
   15798:	strne	r5, [r0]
   1579c:	movne	r0, #0
   157a0:	pop	{r4, r5, r6, pc}
   157a4:	push	{r4, lr}
   157a8:	mov	r4, r0
   157ac:	str	r1, [r0]
   157b0:	mov	r3, #0
   157b4:	str	r3, [r0, #4]
   157b8:	lsl	r0, r1, #2
   157bc:	bl	22d3c <__assert_fail@plt+0x11a64>
   157c0:	str	r0, [r4, #8]
   157c4:	cmp	r0, #0
   157c8:	moveq	r0, #12
   157cc:	movne	r0, #0
   157d0:	pop	{r4, pc}
   157d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   157d8:	mov	r6, r0
   157dc:	mov	r5, r1
   157e0:	mov	r7, r2
   157e4:	mov	r8, r1
   157e8:	str	r2, [r8], #16
   157ec:	ldr	r1, [r1, #8]
   157f0:	mov	r0, r8
   157f4:	bl	157a4 <__assert_fail@plt+0x44cc>
   157f8:	subs	r9, r0, #0
   157fc:	bne	158c4 <__assert_fail@plt+0x45ec>
   15800:	ldr	r3, [r5, #8]
   15804:	cmp	r3, #0
   15808:	ble	15858 <__assert_fail@plt+0x4580>
   1580c:	mov	r4, #0
   15810:	b	15824 <__assert_fail@plt+0x454c>
   15814:	add	r4, r4, #1
   15818:	ldr	r3, [r5, #8]
   1581c:	cmp	r3, r4
   15820:	ble	15858 <__assert_fail@plt+0x4580>
   15824:	ldr	r3, [r5, #12]
   15828:	ldr	r1, [r3, r4, lsl #2]
   1582c:	ldr	r3, [r6]
   15830:	add	r3, r3, r1, lsl #3
   15834:	ldrb	r3, [r3, #4]
   15838:	tst	r3, #8
   1583c:	bne	15814 <__assert_fail@plt+0x453c>
   15840:	mov	r0, r8
   15844:	bl	153b8 <__assert_fail@plt+0x40e0>
   15848:	cmp	r0, #0
   1584c:	bne	15814 <__assert_fail@plt+0x453c>
   15850:	mov	r9, #12
   15854:	b	15894 <__assert_fail@plt+0x45bc>
   15858:	ldr	r4, [r6, #68]	; 0x44
   1585c:	and	r7, r7, r4
   15860:	add	r7, r7, r7, lsl #1
   15864:	lsl	r4, r7, #2
   15868:	ldr	r6, [r6, #32]
   1586c:	add	r7, r6, r4
   15870:	ldr	r3, [r6, r4]
   15874:	ldr	r2, [r7, #4]
   15878:	cmp	r2, r3
   1587c:	ble	1589c <__assert_fail@plt+0x45c4>
   15880:	ldr	r2, [r7, #8]
   15884:	ldr	r3, [r6, r4]
   15888:	add	r1, r3, #1
   1588c:	str	r1, [r6, r4]
   15890:	str	r5, [r2, r3, lsl #2]
   15894:	mov	r0, r9
   15898:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1589c:	add	r3, r3, #1
   158a0:	lsl	r8, r3, #1
   158a4:	lsl	r1, r3, #3
   158a8:	ldr	r0, [r7, #8]
   158ac:	bl	22d6c <__assert_fail@plt+0x11a94>
   158b0:	cmp	r0, #0
   158b4:	beq	158cc <__assert_fail@plt+0x45f4>
   158b8:	str	r0, [r7, #8]
   158bc:	str	r8, [r7, #4]
   158c0:	b	15880 <__assert_fail@plt+0x45a8>
   158c4:	mov	r9, #12
   158c8:	b	15894 <__assert_fail@plt+0x45bc>
   158cc:	mov	r9, #12
   158d0:	b	15894 <__assert_fail@plt+0x45bc>
   158d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   158d8:	sub	sp, sp, #80	; 0x50
   158dc:	mov	r4, r0
   158e0:	ldr	r8, [r0, #36]	; 0x24
   158e4:	ldr	r3, [r0, #48]	; 0x30
   158e8:	cmp	r8, r3
   158ec:	movge	r8, r3
   158f0:	ldr	sl, [r0, #28]
   158f4:	cmp	r8, sl
   158f8:	ble	15a58 <__assert_fail@plt+0x4780>
   158fc:	add	r7, sp, #8
   15900:	add	r6, r0, #16
   15904:	mov	r9, #1
   15908:	mvn	r5, #0
   1590c:	b	159f0 <__assert_fail@plt+0x4718>
   15910:	ldr	r3, [r4, #80]	; 0x50
   15914:	cmp	r3, #0
   15918:	cmpgt	r2, #0
   1591c:	ble	15970 <__assert_fail@plt+0x4698>
   15920:	add	r0, sp, #15
   15924:	mov	r3, #0
   15928:	ldr	r1, [r4]
   1592c:	ldr	ip, [r4, #24]
   15930:	add	r1, r1, sl
   15934:	add	r1, r1, r3
   15938:	ldrb	r1, [r1, ip]
   1593c:	ldr	ip, [r4, #64]	; 0x40
   15940:	ldrb	ip, [ip, r1]
   15944:	ldr	r1, [r4, #4]
   15948:	add	r1, r1, sl
   1594c:	strb	ip, [r1, r3]
   15950:	strb	ip, [r0, #1]!
   15954:	add	r3, r3, #1
   15958:	ldr	r1, [r4, #80]	; 0x50
   1595c:	cmp	r1, r3
   15960:	cmpgt	r2, r3
   15964:	bgt	15928 <__assert_fail@plt+0x4650>
   15968:	add	r1, sp, #16
   1596c:	b	15a18 <__assert_fail@plt+0x4740>
   15970:	add	r1, sp, #16
   15974:	b	15a18 <__assert_fail@plt+0x4740>
   15978:	ldr	r3, [r4]
   1597c:	ldr	r2, [r4, #24]
   15980:	add	r3, r3, sl
   15984:	ldrb	r3, [r3, r2]
   15988:	str	r3, [sp, #4]
   1598c:	ldr	r2, [r4, #64]	; 0x40
   15990:	cmp	r2, #0
   15994:	ldrbne	r3, [r2, r3]
   15998:	strne	r3, [sp, #4]
   1599c:	ldm	r7, {r0, r1}
   159a0:	stm	r6, {r0, r1}
   159a4:	mov	r0, r9
   159a8:	add	r2, sl, #1
   159ac:	lsl	r3, sl, #2
   159b0:	ldr	r1, [r4, #8]
   159b4:	ldr	ip, [sp, #4]
   159b8:	str	ip, [r1, sl, lsl #2]
   159bc:	add	sl, sl, r0
   159c0:	mov	ip, sl
   159c4:	cmp	r2, sl
   159c8:	bge	15a68 <__assert_fail@plt+0x4790>
   159cc:	add	r3, r3, #4
   159d0:	add	r2, r2, #1
   159d4:	ldr	r1, [r4, #8]
   159d8:	str	r5, [r1, r3]
   159dc:	add	r3, r3, #4
   159e0:	cmp	ip, r2
   159e4:	bne	159d0 <__assert_fail@plt+0x46f8>
   159e8:	cmp	r8, sl
   159ec:	ble	15a58 <__assert_fail@plt+0x4780>
   159f0:	sub	r2, r8, sl
   159f4:	ldm	r6, {r0, r1}
   159f8:	stm	r7, {r0, r1}
   159fc:	ldr	r3, [r4, #64]	; 0x40
   15a00:	cmp	r3, #0
   15a04:	bne	15910 <__assert_fail@plt+0x4638>
   15a08:	ldr	r1, [r4, #24]
   15a0c:	add	r3, sl, r1
   15a10:	ldr	r1, [r4]
   15a14:	add	r1, r1, r3
   15a18:	mov	r3, r6
   15a1c:	add	r0, sp, #4
   15a20:	bl	22f8c <__assert_fail@plt+0x11cb4>
   15a24:	sub	r3, r0, #1
   15a28:	cmn	r3, #3
   15a2c:	bhi	15978 <__assert_fail@plt+0x46a0>
   15a30:	cmn	r0, #2
   15a34:	bne	159a8 <__assert_fail@plt+0x46d0>
   15a38:	ldr	r2, [r4, #36]	; 0x24
   15a3c:	ldr	r3, [r4, #48]	; 0x30
   15a40:	cmp	r2, r3
   15a44:	bge	15978 <__assert_fail@plt+0x46a0>
   15a48:	add	r3, r4, #16
   15a4c:	add	r2, sp, #8
   15a50:	ldm	r2, {r0, r1}
   15a54:	stm	r3, {r0, r1}
   15a58:	str	sl, [r4, #28]
   15a5c:	str	sl, [r4, #32]
   15a60:	add	sp, sp, #80	; 0x50
   15a64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15a68:	mov	sl, r2
   15a6c:	b	159e8 <__assert_fail@plt+0x4710>
   15a70:	ldr	r3, [r1, #4]
   15a74:	cmp	r3, #0
   15a78:	beq	15c10 <__assert_fail@plt+0x4938>
   15a7c:	ldr	ip, [r2, #4]
   15a80:	cmp	ip, #0
   15a84:	beq	15c18 <__assert_fail@plt+0x4940>
   15a88:	push	{r4, r5, r6, r7, r8, lr}
   15a8c:	mov	r6, r2
   15a90:	mov	r5, r1
   15a94:	mov	r7, r0
   15a98:	add	r3, r3, ip
   15a9c:	ldr	r4, [r0]
   15aa0:	ldr	r2, [r0, #4]
   15aa4:	add	r2, r3, r2
   15aa8:	cmp	r2, r4
   15aac:	bgt	15ad4 <__assert_fail@plt+0x47fc>
   15ab0:	ldr	r3, [r7, #4]
   15ab4:	ldr	r2, [r5, #4]
   15ab8:	ldr	r0, [r6, #4]
   15abc:	add	r1, r3, r2
   15ac0:	add	r1, r1, r0
   15ac4:	sub	r2, r2, #1
   15ac8:	sub	r0, r0, #1
   15acc:	sub	r3, r3, #1
   15ad0:	b	15b60 <__assert_fail@plt+0x4888>
   15ad4:	add	r4, r3, r4
   15ad8:	lsl	r1, r4, #2
   15adc:	ldr	r0, [r0, #8]
   15ae0:	bl	22d6c <__assert_fail@plt+0x11a94>
   15ae4:	cmp	r0, #0
   15ae8:	beq	15c20 <__assert_fail@plt+0x4948>
   15aec:	str	r0, [r7, #8]
   15af0:	str	r4, [r7]
   15af4:	b	15ab0 <__assert_fail@plt+0x47d8>
   15af8:	cmp	r3, #0
   15afc:	blt	15b38 <__assert_fail@plt+0x4860>
   15b00:	ldr	r8, [r7, #8]
   15b04:	add	ip, r8, r3, lsl #2
   15b08:	ldr	r4, [r8, r3, lsl #2]
   15b0c:	cmp	lr, r4
   15b10:	bge	15b2c <__assert_fail@plt+0x4854>
   15b14:	sub	r3, r3, #1
   15b18:	cmn	r3, #1
   15b1c:	beq	15c28 <__assert_fail@plt+0x4950>
   15b20:	ldr	r4, [ip, #-4]!
   15b24:	cmp	lr, r4
   15b28:	blt	15b14 <__assert_fail@plt+0x483c>
   15b2c:	ldr	ip, [r8, r3, lsl #2]
   15b30:	cmp	lr, ip
   15b34:	beq	15b44 <__assert_fail@plt+0x486c>
   15b38:	sub	r1, r1, #1
   15b3c:	ldr	ip, [r7, #8]
   15b40:	str	lr, [ip, r1, lsl #2]
   15b44:	subs	r2, r2, #1
   15b48:	bmi	15b88 <__assert_fail@plt+0x48b0>
   15b4c:	subs	r0, r0, #1
   15b50:	bpl	15b60 <__assert_fail@plt+0x4888>
   15b54:	b	15b88 <__assert_fail@plt+0x48b0>
   15b58:	subs	r2, r2, #1
   15b5c:	bmi	15b88 <__assert_fail@plt+0x48b0>
   15b60:	ldr	ip, [r5, #8]
   15b64:	ldr	lr, [ip, r2, lsl #2]
   15b68:	ldr	ip, [r6, #8]
   15b6c:	ldr	ip, [ip, r0, lsl #2]
   15b70:	cmp	lr, ip
   15b74:	beq	15af8 <__assert_fail@plt+0x4820>
   15b78:	cmp	lr, ip
   15b7c:	bge	15b58 <__assert_fail@plt+0x4880>
   15b80:	subs	r0, r0, #1
   15b84:	bpl	15b60 <__assert_fail@plt+0x4888>
   15b88:	ldr	r3, [r7, #4]
   15b8c:	sub	r0, r3, #1
   15b90:	ldr	r2, [r5, #4]
   15b94:	add	r2, r3, r2
   15b98:	ldr	ip, [r6, #4]
   15b9c:	add	r2, r2, ip
   15ba0:	sub	r4, r2, #1
   15ba4:	sub	r2, r2, r1
   15ba8:	add	r3, r3, r2
   15bac:	str	r3, [r7, #4]
   15bb0:	cmp	r0, #0
   15bb4:	cmpge	r2, #0
   15bb8:	bgt	15be4 <__assert_fail@plt+0x490c>
   15bbc:	ldr	r0, [r7, #8]
   15bc0:	lsl	r2, r2, #2
   15bc4:	add	r1, r0, r1, lsl #2
   15bc8:	bl	11068 <memcpy@plt>
   15bcc:	mov	r0, #0
   15bd0:	pop	{r4, r5, r6, r7, r8, pc}
   15bd4:	add	lr, r0, r2
   15bd8:	str	ip, [r3, lr, lsl #2]
   15bdc:	subs	r0, r0, #1
   15be0:	bmi	15bbc <__assert_fail@plt+0x48e4>
   15be4:	ldr	r3, [r7, #8]
   15be8:	ldr	lr, [r3, r4, lsl #2]
   15bec:	ldr	ip, [r3, r0, lsl #2]
   15bf0:	cmp	lr, ip
   15bf4:	ble	15bd4 <__assert_fail@plt+0x48fc>
   15bf8:	sub	r4, r4, #1
   15bfc:	add	ip, r0, r2
   15c00:	str	lr, [r3, ip, lsl #2]
   15c04:	subs	r2, r2, #1
   15c08:	bne	15be4 <__assert_fail@plt+0x490c>
   15c0c:	b	15bbc <__assert_fail@plt+0x48e4>
   15c10:	mov	r0, #0
   15c14:	bx	lr
   15c18:	mov	r0, #0
   15c1c:	bx	lr
   15c20:	mov	r0, #12
   15c24:	pop	{r4, r5, r6, r7, r8, pc}
   15c28:	mvn	r3, #0
   15c2c:	b	15b38 <__assert_fail@plt+0x4860>
   15c30:	ldr	r3, [r1, #4]
   15c34:	str	r3, [r0, #4]
   15c38:	ldr	r2, [r1, #4]
   15c3c:	cmp	r2, #0
   15c40:	ble	15c94 <__assert_fail@plt+0x49bc>
   15c44:	push	{r4, r5, r6, lr}
   15c48:	mov	r5, r1
   15c4c:	mov	r4, r0
   15c50:	str	r3, [r0]
   15c54:	lsl	r0, r3, #2
   15c58:	bl	22d3c <__assert_fail@plt+0x11a64>
   15c5c:	str	r0, [r4, #8]
   15c60:	cmp	r0, #0
   15c64:	beq	15c80 <__assert_fail@plt+0x49a8>
   15c68:	ldr	r2, [r5, #4]
   15c6c:	lsl	r2, r2, #2
   15c70:	ldr	r1, [r5, #8]
   15c74:	bl	11068 <memcpy@plt>
   15c78:	mov	r0, #0
   15c7c:	pop	{r4, r5, r6, pc}
   15c80:	mov	r3, #0
   15c84:	str	r3, [r4, #4]
   15c88:	str	r3, [r4]
   15c8c:	mov	r0, #12
   15c90:	pop	{r4, r5, r6, pc}
   15c94:	mov	r3, #0
   15c98:	str	r3, [r0]
   15c9c:	str	r3, [r0, #4]
   15ca0:	str	r3, [r0, #8]
   15ca4:	mov	r0, r3
   15ca8:	bx	lr
   15cac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15cb0:	mov	r8, r0
   15cb4:	mov	r5, r2
   15cb8:	subs	r7, r1, #0
   15cbc:	beq	15d14 <__assert_fail@plt+0x4a3c>
   15cc0:	ldr	r0, [r7, #4]
   15cc4:	cmp	r2, #0
   15cc8:	cmpne	r0, #0
   15ccc:	ble	15d0c <__assert_fail@plt+0x4a34>
   15cd0:	ldr	r3, [r2, #4]
   15cd4:	cmp	r3, #0
   15cd8:	ble	15d0c <__assert_fail@plt+0x4a34>
   15cdc:	add	r0, r0, r3
   15ce0:	str	r0, [r8]
   15ce4:	lsl	r0, r0, #2
   15ce8:	bl	22d3c <__assert_fail@plt+0x11a64>
   15cec:	str	r0, [r8, #8]
   15cf0:	cmp	r0, #0
   15cf4:	beq	15e30 <__assert_fail@plt+0x4b58>
   15cf8:	mov	r3, #0
   15cfc:	mov	r2, #1
   15d00:	mov	r4, r3
   15d04:	mov	r6, r3
   15d08:	b	15d78 <__assert_fail@plt+0x4aa0>
   15d0c:	cmp	r0, #0
   15d10:	bgt	15d38 <__assert_fail@plt+0x4a60>
   15d14:	cmp	r5, #0
   15d18:	beq	15d48 <__assert_fail@plt+0x4a70>
   15d1c:	ldr	r3, [r5, #4]
   15d20:	cmp	r3, #0
   15d24:	ble	15d48 <__assert_fail@plt+0x4a70>
   15d28:	mov	r1, r5
   15d2c:	mov	r0, r8
   15d30:	bl	15c30 <__assert_fail@plt+0x4958>
   15d34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d38:	mov	r1, r7
   15d3c:	mov	r0, r8
   15d40:	bl	15c30 <__assert_fail@plt+0x4958>
   15d44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d48:	mov	r0, #0
   15d4c:	str	r0, [r8]
   15d50:	str	r0, [r8, #4]
   15d54:	str	r0, [r8, #8]
   15d58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d5c:	cmp	r1, r0
   15d60:	addeq	r4, r4, #1
   15d64:	add	r6, r6, #1
   15d68:	ldr	r0, [r8, #8]
   15d6c:	str	r1, [r0, r3]
   15d70:	add	r2, r2, #1
   15d74:	add	r3, r3, #4
   15d78:	sub	r0, r2, #1
   15d7c:	mov	r9, r0
   15d80:	ldr	r1, [r7, #4]
   15d84:	cmp	r6, r1
   15d88:	bge	15dec <__assert_fail@plt+0x4b14>
   15d8c:	ldr	ip, [r5, #4]
   15d90:	cmp	r4, ip
   15d94:	bge	15dc0 <__assert_fail@plt+0x4ae8>
   15d98:	ldr	r1, [r7, #8]
   15d9c:	ldr	r1, [r1, r6, lsl #2]
   15da0:	ldr	r0, [r5, #8]
   15da4:	ldr	r0, [r0, r4, lsl #2]
   15da8:	cmp	r1, r0
   15dac:	ble	15d5c <__assert_fail@plt+0x4a84>
   15db0:	add	r4, r4, #1
   15db4:	ldr	r1, [r8, #8]
   15db8:	str	r0, [r1, r3]
   15dbc:	b	15d70 <__assert_fail@plt+0x4a98>
   15dc0:	ldr	r3, [r8, #8]
   15dc4:	sub	r2, r1, r6
   15dc8:	ldr	r1, [r7, #8]
   15dcc:	lsl	r2, r2, #2
   15dd0:	add	r1, r1, r6, lsl #2
   15dd4:	add	r0, r3, r0, lsl #2
   15dd8:	bl	11068 <memcpy@plt>
   15ddc:	ldr	r3, [r7, #4]
   15de0:	sub	r6, r3, r6
   15de4:	add	r9, r9, r6
   15de8:	b	15df8 <__assert_fail@plt+0x4b20>
   15dec:	ldr	r2, [r5, #4]
   15df0:	cmp	r4, r2
   15df4:	blt	15e04 <__assert_fail@plt+0x4b2c>
   15df8:	str	r9, [r8, #4]
   15dfc:	mov	r0, #0
   15e00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e04:	ldr	r3, [r8, #8]
   15e08:	sub	r2, r2, r4
   15e0c:	ldr	r1, [r5, #8]
   15e10:	lsl	r2, r2, #2
   15e14:	add	r1, r1, r4, lsl #2
   15e18:	add	r0, r3, r0, lsl #2
   15e1c:	bl	11068 <memcpy@plt>
   15e20:	ldr	r3, [r5, #4]
   15e24:	sub	r4, r3, r4
   15e28:	add	r9, r9, r4
   15e2c:	b	15df8 <__assert_fail@plt+0x4b20>
   15e30:	mov	r0, #12
   15e34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e3c:	sub	sp, sp, #92	; 0x5c
   15e40:	mov	r5, r0
   15e44:	ldr	r4, [r0, #28]
   15e48:	ldr	r6, [r0, #36]	; 0x24
   15e4c:	ldr	r3, [r0, #48]	; 0x30
   15e50:	cmp	r6, r3
   15e54:	movge	r6, r3
   15e58:	ldrb	r3, [r0, #74]	; 0x4a
   15e5c:	cmp	r3, #0
   15e60:	bne	15e70 <__assert_fail@plt+0x4b98>
   15e64:	ldr	r3, [r0, #64]	; 0x40
   15e68:	cmp	r3, #0
   15e6c:	beq	15e90 <__assert_fail@plt+0x4bb8>
   15e70:	ldr	r7, [r5, #32]
   15e74:	cmp	r4, r6
   15e78:	blt	15fd0 <__assert_fail@plt+0x4cf8>
   15e7c:	str	r4, [r5, #28]
   15e80:	str	r7, [r5, #32]
   15e84:	mov	r0, #0
   15e88:	add	sp, sp, #92	; 0x5c
   15e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e90:	ldrb	r3, [r0, #76]	; 0x4c
   15e94:	cmp	r3, #0
   15e98:	bne	15e70 <__assert_fail@plt+0x4b98>
   15e9c:	cmp	r4, r6
   15ea0:	bge	16158 <__assert_fail@plt+0x4e80>
   15ea4:	add	r3, r0, #16
   15ea8:	str	r3, [sp, #4]
   15eac:	mvn	r7, #0
   15eb0:	b	15f7c <__assert_fail@plt+0x4ca4>
   15eb4:	ldr	r3, [sp, #4]
   15eb8:	ldm	r3, {r0, r1}
   15ebc:	add	r2, sp, #80	; 0x50
   15ec0:	stm	r2, {r0, r1}
   15ec4:	mov	r9, r4
   15ec8:	add	r1, r8, r4
   15ecc:	sub	r2, r6, r4
   15ed0:	add	r1, fp, r1
   15ed4:	add	r0, sp, #12
   15ed8:	bl	22f8c <__assert_fail@plt+0x11cb4>
   15edc:	mov	r8, r0
   15ee0:	sub	r3, r0, #1
   15ee4:	cmn	r3, #4
   15ee8:	bhi	160e4 <__assert_fail@plt+0x4e0c>
   15eec:	ldr	fp, [sp, #12]
   15ef0:	mov	r0, fp
   15ef4:	bl	112b4 <towupper@plt>
   15ef8:	mov	sl, r0
   15efc:	cmp	fp, r0
   15f00:	beq	160c0 <__assert_fail@plt+0x4de8>
   15f04:	add	r2, sp, #80	; 0x50
   15f08:	mov	r1, r0
   15f0c:	add	r0, sp, #16
   15f10:	bl	10ff0 <wcrtomb@plt>
   15f14:	cmp	r8, r0
   15f18:	bne	15fcc <__assert_fail@plt+0x4cf4>
   15f1c:	ldr	r0, [r5, #4]
   15f20:	mov	r2, r8
   15f24:	add	r1, sp, #16
   15f28:	add	r0, r0, r4
   15f2c:	bl	11068 <memcpy@plt>
   15f30:	add	r4, r4, #1
   15f34:	lsl	r3, r9, #2
   15f38:	ldr	r2, [r5, #8]
   15f3c:	str	sl, [r2, r9, lsl #2]
   15f40:	sub	r2, r4, #1
   15f44:	add	r8, r2, r8
   15f48:	mov	r1, r8
   15f4c:	cmp	r4, r8
   15f50:	bge	15f74 <__assert_fail@plt+0x4c9c>
   15f54:	add	r3, r3, #4
   15f58:	add	r4, r4, #1
   15f5c:	ldr	r2, [r5, #8]
   15f60:	str	r7, [r2, r3]
   15f64:	add	r3, r3, #4
   15f68:	cmp	r1, r4
   15f6c:	bne	15f58 <__assert_fail@plt+0x4c80>
   15f70:	mov	r4, r8
   15f74:	cmp	r6, r4
   15f78:	ble	16158 <__assert_fail@plt+0x4e80>
   15f7c:	ldr	fp, [r5]
   15f80:	ldr	r8, [r5, #24]
   15f84:	add	r3, fp, r8
   15f88:	ldrb	sl, [r3, r4]
   15f8c:	bics	r3, sl, #127	; 0x7f
   15f90:	bne	15eb4 <__assert_fail@plt+0x4bdc>
   15f94:	ldr	r0, [sp, #4]
   15f98:	bl	1108c <mbsinit@plt>
   15f9c:	cmp	r0, #0
   15fa0:	beq	15eb4 <__assert_fail@plt+0x4bdc>
   15fa4:	mov	r0, sl
   15fa8:	bl	112b4 <towupper@plt>
   15fac:	bics	r3, r0, #127	; 0x7f
   15fb0:	bne	15eb4 <__assert_fail@plt+0x4bdc>
   15fb4:	ldr	r3, [r5, #4]
   15fb8:	strb	r0, [r3, r4]
   15fbc:	ldr	r3, [r5, #8]
   15fc0:	str	r0, [r3, r4, lsl #2]
   15fc4:	add	r4, r4, #1
   15fc8:	b	15f74 <__assert_fail@plt+0x4c9c>
   15fcc:	mov	r7, r4
   15fd0:	sub	r2, r6, r4
   15fd4:	add	r3, r5, #16
   15fd8:	ldm	r3, {r0, r1}
   15fdc:	add	r3, sp, #88	; 0x58
   15fe0:	stmdb	r3, {r0, r1}
   15fe4:	ldr	r1, [r5, #64]	; 0x40
   15fe8:	cmp	r1, #0
   15fec:	bne	16168 <__assert_fail@plt+0x4e90>
   15ff0:	ldr	r3, [r5, #24]
   15ff4:	add	r3, r7, r3
   15ff8:	ldr	r1, [r5]
   15ffc:	add	r3, r1, r3
   16000:	str	r3, [sp, #4]
   16004:	add	r3, r5, #16
   16008:	ldr	r1, [sp, #4]
   1600c:	add	r0, sp, #12
   16010:	bl	22f8c <__assert_fail@plt+0x11cb4>
   16014:	mov	r8, r0
   16018:	sub	fp, r0, #1
   1601c:	cmn	fp, #4
   16020:	bhi	1635c <__assert_fail@plt+0x5084>
   16024:	ldr	sl, [sp, #12]
   16028:	mov	r0, sl
   1602c:	bl	112b4 <towupper@plt>
   16030:	mov	r9, r0
   16034:	cmp	sl, r0
   16038:	beq	16314 <__assert_fail@plt+0x503c>
   1603c:	add	r2, sp, #80	; 0x50
   16040:	mov	r1, r0
   16044:	add	r0, sp, #16
   16048:	bl	10ff0 <wcrtomb@plt>
   1604c:	mov	sl, r0
   16050:	cmp	r8, r0
   16054:	bne	161c8 <__assert_fail@plt+0x4ef0>
   16058:	ldr	r0, [r5, #4]
   1605c:	mov	r2, r8
   16060:	add	r1, sp, #16
   16064:	add	r0, r0, r4
   16068:	bl	11068 <memcpy@plt>
   1606c:	ldrb	r3, [r5, #76]	; 0x4c
   16070:	cmp	r3, #0
   16074:	bne	1632c <__assert_fail@plt+0x5054>
   16078:	add	r7, r7, r8
   1607c:	add	r2, r4, #1
   16080:	lsl	r3, r4, #2
   16084:	ldr	r1, [r5, #8]
   16088:	str	r9, [r1, r4, lsl #2]
   1608c:	add	r4, r4, r8
   16090:	mov	ip, r4
   16094:	cmp	r2, r4
   16098:	bge	163f0 <__assert_fail@plt+0x5118>
   1609c:	add	r3, r3, #4
   160a0:	mvn	r0, #0
   160a4:	add	r2, r2, #1
   160a8:	ldr	r1, [r5, #8]
   160ac:	str	r0, [r1, r3]
   160b0:	add	r3, r3, #4
   160b4:	cmp	ip, r2
   160b8:	bne	160a4 <__assert_fail@plt+0x4dcc>
   160bc:	b	15e74 <__assert_fail@plt+0x4b9c>
   160c0:	ldr	r0, [r5, #4]
   160c4:	ldr	r3, [r5, #24]
   160c8:	add	r3, r4, r3
   160cc:	ldr	r1, [r5]
   160d0:	mov	r2, r8
   160d4:	add	r1, r1, r3
   160d8:	add	r0, r0, r4
   160dc:	bl	11068 <memcpy@plt>
   160e0:	b	15f30 <__assert_fail@plt+0x4c58>
   160e4:	cmn	r3, #3
   160e8:	bhi	1611c <__assert_fail@plt+0x4e44>
   160ec:	cmn	r0, #2
   160f0:	bne	16148 <__assert_fail@plt+0x4e70>
   160f4:	ldr	r2, [r5, #36]	; 0x24
   160f8:	ldr	r3, [r5, #48]	; 0x30
   160fc:	cmp	r2, r3
   16100:	blt	16148 <__assert_fail@plt+0x4e70>
   16104:	ldr	r3, [r5, #4]
   16108:	strb	sl, [r3, r4]
   1610c:	add	r4, r4, #1
   16110:	ldr	r3, [r5, #8]
   16114:	str	sl, [r3, r9, lsl #2]
   16118:	b	15f74 <__assert_fail@plt+0x4c9c>
   1611c:	ldr	r3, [r5, #4]
   16120:	strb	sl, [r3, r4]
   16124:	add	r4, r4, #1
   16128:	ldr	r3, [r5, #8]
   1612c:	str	sl, [r3, r9, lsl #2]
   16130:	cmn	r0, #1
   16134:	addeq	r3, sp, #80	; 0x50
   16138:	ldmeq	r3, {r0, r1}
   1613c:	ldreq	r3, [sp, #4]
   16140:	stmeq	r3, {r0, r1}
   16144:	b	15f74 <__assert_fail@plt+0x4c9c>
   16148:	add	r3, r5, #16
   1614c:	add	r2, sp, #88	; 0x58
   16150:	ldmdb	r2, {r0, r1}
   16154:	stm	r3, {r0, r1}
   16158:	str	r4, [r5, #28]
   1615c:	str	r4, [r5, #32]
   16160:	mov	r0, #0
   16164:	b	15e88 <__assert_fail@plt+0x4bb0>
   16168:	ldr	r8, [r5, #80]	; 0x50
   1616c:	cmp	r2, #0
   16170:	cmpgt	r8, #0
   16174:	ble	161bc <__assert_fail@plt+0x4ee4>
   16178:	ldr	r3, [r5, #24]
   1617c:	add	r3, r7, r3
   16180:	sub	r3, r3, #1
   16184:	ldr	r0, [r5]
   16188:	add	r0, r0, r3
   1618c:	add	ip, sp, #15
   16190:	mov	r3, #0
   16194:	ldrb	lr, [r0, #1]!
   16198:	ldrb	lr, [r1, lr]
   1619c:	strb	lr, [ip, #1]!
   161a0:	add	r3, r3, #1
   161a4:	cmp	r8, r3
   161a8:	cmpgt	r2, r3
   161ac:	bgt	16194 <__assert_fail@plt+0x4ebc>
   161b0:	add	r3, sp, #16
   161b4:	str	r3, [sp, #4]
   161b8:	b	16004 <__assert_fail@plt+0x4d2c>
   161bc:	add	r3, sp, #16
   161c0:	str	r3, [sp, #4]
   161c4:	b	16004 <__assert_fail@plt+0x4d2c>
   161c8:	cmn	r0, #1
   161cc:	beq	162fc <__assert_fail@plt+0x5024>
   161d0:	mov	r6, r4
   161d4:	add	r3, r4, r0
   161d8:	str	r3, [sp, #4]
   161dc:	ldr	r0, [r5, #36]	; 0x24
   161e0:	cmp	r3, r0
   161e4:	bls	161fc <__assert_fail@plt+0x4f24>
   161e8:	add	r3, r5, #16
   161ec:	add	r2, sp, #88	; 0x58
   161f0:	ldmdb	r2, {r0, r1}
   161f4:	stm	r3, {r0, r1}
   161f8:	b	15e7c <__assert_fail@plt+0x4ba4>
   161fc:	ldr	r3, [r5, #12]
   16200:	cmp	r3, #0
   16204:	beq	162e0 <__assert_fail@plt+0x5008>
   16208:	ldrb	r3, [r5, #76]	; 0x4c
   1620c:	cmp	r3, #0
   16210:	bne	16238 <__assert_fail@plt+0x4f60>
   16214:	cmp	r6, #0
   16218:	beq	16230 <__assert_fail@plt+0x4f58>
   1621c:	ldr	r2, [r5, #12]
   16220:	str	r3, [r2, r3, lsl #2]
   16224:	add	r3, r3, #1
   16228:	cmp	r6, r3
   1622c:	bne	1621c <__assert_fail@plt+0x4f44>
   16230:	mov	r3, #1
   16234:	strb	r3, [r5, #76]	; 0x4c
   16238:	ldr	r0, [r5, #4]
   1623c:	mov	r2, sl
   16240:	add	r1, sp, #16
   16244:	add	r0, r0, r6
   16248:	bl	11068 <memcpy@plt>
   1624c:	lsl	r3, r6, #2
   16250:	ldr	r2, [r5, #8]
   16254:	str	r9, [r2, r6, lsl #2]
   16258:	ldr	r2, [r5, #12]
   1625c:	str	r7, [r2, r6, lsl #2]
   16260:	cmp	sl, #1
   16264:	bls	162a4 <__assert_fail@plt+0x4fcc>
   16268:	add	r3, r3, #4
   1626c:	mov	r2, #1
   16270:	mvn	r0, #0
   16274:	ldr	ip, [r5, #12]
   16278:	cmp	r8, r2
   1627c:	movhi	r1, r2
   16280:	movls	r1, fp
   16284:	add	r1, r7, r1
   16288:	str	r1, [ip, r3]
   1628c:	ldr	r1, [r5, #8]
   16290:	str	r0, [r1, r3]
   16294:	add	r2, r2, #1
   16298:	add	r3, r3, #4
   1629c:	cmp	r2, sl
   162a0:	bne	16274 <__assert_fail@plt+0x4f9c>
   162a4:	sub	sl, sl, r8
   162a8:	ldr	r6, [r5, #48]	; 0x30
   162ac:	add	r6, sl, r6
   162b0:	str	r6, [r5, #48]	; 0x30
   162b4:	ldr	r3, [r5, #52]	; 0x34
   162b8:	cmp	r7, r3
   162bc:	ldrlt	r3, [r5, #56]	; 0x38
   162c0:	addlt	sl, r3, sl
   162c4:	strlt	sl, [r5, #56]	; 0x38
   162c8:	ldr	r3, [r5, #36]	; 0x24
   162cc:	cmp	r6, r3
   162d0:	movge	r6, r3
   162d4:	ldr	r4, [sp, #4]
   162d8:	add	r7, r7, r8
   162dc:	b	15e74 <__assert_fail@plt+0x4b9c>
   162e0:	lsl	r0, r0, #2
   162e4:	bl	22d3c <__assert_fail@plt+0x11a64>
   162e8:	str	r0, [r5, #12]
   162ec:	cmp	r0, #0
   162f0:	moveq	r0, #12
   162f4:	bne	16208 <__assert_fail@plt+0x4f30>
   162f8:	b	15e88 <__assert_fail@plt+0x4bb0>
   162fc:	ldr	r0, [r5, #4]
   16300:	mov	r2, r8
   16304:	ldr	r1, [sp, #4]
   16308:	add	r0, r0, r4
   1630c:	bl	11068 <memcpy@plt>
   16310:	b	1606c <__assert_fail@plt+0x4d94>
   16314:	ldr	r0, [r5, #4]
   16318:	mov	r2, r8
   1631c:	ldr	r1, [sp, #4]
   16320:	add	r0, r0, r4
   16324:	bl	11068 <memcpy@plt>
   16328:	b	1606c <__assert_fail@plt+0x4d94>
   1632c:	cmp	r8, #0
   16330:	beq	16078 <__assert_fail@plt+0x4da0>
   16334:	lsl	r2, r4, #2
   16338:	mov	r3, r7
   1633c:	add	r0, r8, r7
   16340:	ldr	r1, [r5, #12]
   16344:	str	r3, [r1, r2]
   16348:	add	r2, r2, #4
   1634c:	add	r3, r3, #1
   16350:	cmp	r3, r0
   16354:	bne	16340 <__assert_fail@plt+0x5068>
   16358:	b	16078 <__assert_fail@plt+0x4da0>
   1635c:	cmn	fp, #3
   16360:	bhi	16390 <__assert_fail@plt+0x50b8>
   16364:	cmn	r0, #2
   16368:	beq	16380 <__assert_fail@plt+0x50a8>
   1636c:	add	r3, r5, #16
   16370:	add	r2, sp, #88	; 0x58
   16374:	ldmdb	r2, {r0, r1}
   16378:	stm	r3, {r0, r1}
   1637c:	b	15e7c <__assert_fail@plt+0x4ba4>
   16380:	ldr	r2, [r5, #36]	; 0x24
   16384:	ldr	r3, [r5, #48]	; 0x30
   16388:	cmp	r2, r3
   1638c:	blt	1636c <__assert_fail@plt+0x5094>
   16390:	ldr	r3, [r5]
   16394:	ldr	r2, [r5, #24]
   16398:	add	r3, r3, r7
   1639c:	ldrb	r3, [r3, r2]
   163a0:	ldr	r2, [r5, #64]	; 0x40
   163a4:	cmp	r2, #0
   163a8:	ldrbne	r3, [r2, r3]
   163ac:	mov	r1, r4
   163b0:	ldr	r2, [r5, #4]
   163b4:	strb	r3, [r2, r4]
   163b8:	ldrb	r2, [r5, #76]	; 0x4c
   163bc:	cmp	r2, #0
   163c0:	ldrne	r2, [r5, #12]
   163c4:	strne	r7, [r2, r4, lsl #2]
   163c8:	add	r7, r7, #1
   163cc:	add	r4, r4, #1
   163d0:	ldr	r2, [r5, #8]
   163d4:	str	r3, [r2, r1, lsl #2]
   163d8:	cmn	r8, #1
   163dc:	addeq	r3, r5, #16
   163e0:	addeq	r2, sp, #88	; 0x58
   163e4:	ldmdbeq	r2, {r0, r1}
   163e8:	stmeq	r3, {r0, r1}
   163ec:	b	15e74 <__assert_fail@plt+0x4b9c>
   163f0:	mov	r4, r2
   163f4:	b	15e74 <__assert_fail@plt+0x4b9c>
   163f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163fc:	mov	r6, r0
   16400:	ldr	r8, [r0, #36]	; 0x24
   16404:	ldr	r3, [r0, #48]	; 0x30
   16408:	cmp	r8, r3
   1640c:	movge	r8, r3
   16410:	ldr	r4, [r0, #28]
   16414:	cmp	r8, r4
   16418:	ble	16474 <__assert_fail@plt+0x519c>
   1641c:	ldr	r9, [pc, #92]	; 16480 <__assert_fail@plt+0x51a8>
   16420:	b	16434 <__assert_fail@plt+0x515c>
   16424:	strb	r5, [r7]
   16428:	add	r4, r4, #1
   1642c:	cmp	r8, r4
   16430:	beq	16474 <__assert_fail@plt+0x519c>
   16434:	ldr	r3, [r6]
   16438:	ldr	r2, [r6, #24]
   1643c:	add	r3, r3, r4
   16440:	ldrb	r5, [r3, r2]
   16444:	ldr	r3, [r6, #64]	; 0x40
   16448:	cmp	r3, #0
   1644c:	ldrbne	r5, [r3, r5]
   16450:	ldr	r7, [r6, #4]
   16454:	add	r7, r7, r4
   16458:	add	r3, r5, #128	; 0x80
   1645c:	cmp	r3, r9
   16460:	bhi	16424 <__assert_fail@plt+0x514c>
   16464:	bl	1117c <__ctype_toupper_loc@plt>
   16468:	ldr	r3, [r0]
   1646c:	ldr	r5, [r3, r5, lsl #2]
   16470:	b	16424 <__assert_fail@plt+0x514c>
   16474:	str	r4, [r6, #28]
   16478:	str	r4, [r6, #32]
   1647c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16480:	andeq	r0, r0, pc, ror r1
   16484:	push	{r4, r5, r6, lr}
   16488:	ldr	r3, [r0, #36]	; 0x24
   1648c:	cmn	r3, #-536870910	; 0xe0000002
   16490:	bhi	1654c <__assert_fail@plt+0x5274>
   16494:	mov	r4, r0
   16498:	lsl	r3, r3, #1
   1649c:	ldr	r2, [r0, #48]	; 0x30
   164a0:	cmp	r3, r2
   164a4:	movge	r3, r2
   164a8:	cmp	r3, r1
   164ac:	movge	r1, r3
   164b0:	bl	15308 <__assert_fail@plt+0x4030>
   164b4:	subs	r5, r0, #0
   164b8:	bne	16508 <__assert_fail@plt+0x5230>
   164bc:	ldr	r0, [r4, #100]	; 0x64
   164c0:	cmp	r0, #0
   164c4:	beq	164e4 <__assert_fail@plt+0x520c>
   164c8:	ldr	r1, [r4, #36]	; 0x24
   164cc:	add	r1, r1, #1
   164d0:	lsl	r1, r1, #2
   164d4:	bl	22d6c <__assert_fail@plt+0x11a94>
   164d8:	cmp	r0, #0
   164dc:	beq	16554 <__assert_fail@plt+0x527c>
   164e0:	str	r0, [r4, #100]	; 0x64
   164e4:	ldrb	r3, [r4, #72]	; 0x48
   164e8:	cmp	r3, #0
   164ec:	beq	1651c <__assert_fail@plt+0x5244>
   164f0:	ldr	r3, [r4, #80]	; 0x50
   164f4:	cmp	r3, #1
   164f8:	ble	16510 <__assert_fail@plt+0x5238>
   164fc:	mov	r0, r4
   16500:	bl	15e38 <__assert_fail@plt+0x4b60>
   16504:	mov	r5, r0
   16508:	mov	r0, r5
   1650c:	pop	{r4, r5, r6, pc}
   16510:	mov	r0, r4
   16514:	bl	163f8 <__assert_fail@plt+0x5120>
   16518:	b	16508 <__assert_fail@plt+0x5230>
   1651c:	ldr	r3, [r4, #80]	; 0x50
   16520:	cmp	r3, #1
   16524:	bgt	16540 <__assert_fail@plt+0x5268>
   16528:	ldr	r3, [r4, #64]	; 0x40
   1652c:	cmp	r3, #0
   16530:	beq	16508 <__assert_fail@plt+0x5230>
   16534:	mov	r0, r4
   16538:	bl	1472c <__assert_fail@plt+0x3454>
   1653c:	b	16508 <__assert_fail@plt+0x5230>
   16540:	mov	r0, r4
   16544:	bl	158d4 <__assert_fail@plt+0x45fc>
   16548:	b	16508 <__assert_fail@plt+0x5230>
   1654c:	mov	r5, #12
   16550:	b	16508 <__assert_fail@plt+0x5230>
   16554:	mov	r5, #12
   16558:	b	16508 <__assert_fail@plt+0x5230>
   1655c:	ldr	r3, [r1, #40]	; 0x28
   16560:	ldr	ip, [r1, #56]	; 0x38
   16564:	cmp	ip, r3
   16568:	ble	167f4 <__assert_fail@plt+0x551c>
   1656c:	push	{r4, r5, r6, r7, r8, lr}
   16570:	sub	sp, sp, #8
   16574:	ldr	ip, [r1, #4]
   16578:	ldrb	r6, [ip, r3]
   1657c:	strb	r6, [r0]
   16580:	ldrb	r3, [r0, #6]
   16584:	and	r3, r3, #159	; 0x9f
   16588:	strb	r3, [r0, #6]
   1658c:	ldr	r3, [r1, #80]	; 0x50
   16590:	cmp	r3, #1
   16594:	ble	165b8 <__assert_fail@plt+0x52e0>
   16598:	ldr	ip, [r1, #40]	; 0x28
   1659c:	ldr	lr, [r1, #28]
   165a0:	cmp	ip, lr
   165a4:	beq	165b8 <__assert_fail@plt+0x52e0>
   165a8:	ldr	lr, [r1, #8]
   165ac:	ldr	ip, [lr, ip, lsl #2]
   165b0:	cmn	ip, #1
   165b4:	beq	16804 <__assert_fail@plt+0x552c>
   165b8:	mov	r7, r2
   165bc:	mov	r4, r1
   165c0:	mov	r5, r0
   165c4:	cmp	r6, #92	; 0x5c
   165c8:	beq	16824 <__assert_fail@plt+0x554c>
   165cc:	mov	r3, #1
   165d0:	strb	r3, [r0, #4]
   165d4:	ldr	r3, [r1, #80]	; 0x50
   165d8:	cmp	r3, #1
   165dc:	ble	16ce4 <__assert_fail@plt+0x5a0c>
   165e0:	ldr	r1, [r1, #40]	; 0x28
   165e4:	mov	r0, r4
   165e8:	bl	14710 <__assert_fail@plt+0x3438>
   165ec:	mov	r8, r0
   165f0:	bl	111dc <iswalnum@plt>
   165f4:	adds	r3, r0, #0
   165f8:	movne	r3, #1
   165fc:	ldrb	r0, [r5, #6]
   16600:	cmp	r8, #95	; 0x5f
   16604:	orreq	r3, r3, #1
   16608:	bic	r0, r0, #64	; 0x40
   1660c:	orr	r0, r0, r3, lsl #6
   16610:	strb	r0, [r5, #6]
   16614:	sub	r6, r6, #10
   16618:	cmp	r6, #115	; 0x73
   1661c:	ldrls	pc, [pc, r6, lsl #2]
   16620:	b	16ef4 <__assert_fail@plt+0x5c1c>
   16624:	andeq	r6, r1, r8, lsl sp
   16628:	strdeq	r6, [r1], -r4
   1662c:	strdeq	r6, [r1], -r4
   16630:	strdeq	r6, [r1], -r4
   16634:	strdeq	r6, [r1], -r4
   16638:	strdeq	r6, [r1], -r4
   1663c:	strdeq	r6, [r1], -r4
   16640:	strdeq	r6, [r1], -r4
   16644:	strdeq	r6, [r1], -r4
   16648:	strdeq	r6, [r1], -r4
   1664c:	strdeq	r6, [r1], -r4
   16650:	strdeq	r6, [r1], -r4
   16654:	strdeq	r6, [r1], -r4
   16658:	strdeq	r6, [r1], -r4
   1665c:	strdeq	r6, [r1], -r4
   16660:	strdeq	r6, [r1], -r4
   16664:	strdeq	r6, [r1], -r4
   16668:	strdeq	r6, [r1], -r4
   1666c:	strdeq	r6, [r1], -r4
   16670:	strdeq	r6, [r1], -r4
   16674:	strdeq	r6, [r1], -r4
   16678:	strdeq	r6, [r1], -r4
   1667c:	strdeq	r6, [r1], -r4
   16680:	strdeq	r6, [r1], -r4
   16684:	strdeq	r6, [r1], -r4
   16688:	strdeq	r6, [r1], -r4
   1668c:	andeq	r6, r1, r0, lsl #29
   16690:	strdeq	r6, [r1], -r4
   16694:	strdeq	r6, [r1], -r4
   16698:	strdeq	r6, [r1], -r4
   1669c:	ldrdeq	r6, [r1], -r4
   166a0:	andeq	r6, r1, ip, ror #27
   166a4:	andeq	r6, r1, ip, asr #26
   166a8:	andeq	r6, r1, ip, asr sp
   166ac:	strdeq	r6, [r1], -r4
   166b0:	strdeq	r6, [r1], -r4
   166b4:	andeq	r6, r1, r4, lsl lr
   166b8:	strdeq	r6, [r1], -r4
   166bc:	strdeq	r6, [r1], -r4
   166c0:	strdeq	r6, [r1], -r4
   166c4:	strdeq	r6, [r1], -r4
   166c8:	strdeq	r6, [r1], -r4
   166cc:	strdeq	r6, [r1], -r4
   166d0:	strdeq	r6, [r1], -r4
   166d4:	strdeq	r6, [r1], -r4
   166d8:	strdeq	r6, [r1], -r4
   166dc:	strdeq	r6, [r1], -r4
   166e0:	strdeq	r6, [r1], -r4
   166e4:	strdeq	r6, [r1], -r4
   166e8:	strdeq	r6, [r1], -r4
   166ec:	strdeq	r6, [r1], -r4
   166f0:	strdeq	r6, [r1], -r4
   166f4:	strdeq	r6, [r1], -r4
   166f8:	andeq	r6, r1, ip, ror sp
   166fc:	strdeq	r6, [r1], -r4
   16700:	strdeq	r6, [r1], -r4
   16704:	strdeq	r6, [r1], -r4
   16708:	strdeq	r6, [r1], -r4
   1670c:	strdeq	r6, [r1], -r4
   16710:	strdeq	r6, [r1], -r4
   16714:	strdeq	r6, [r1], -r4
   16718:	strdeq	r6, [r1], -r4
   1671c:	strdeq	r6, [r1], -r4
   16720:	strdeq	r6, [r1], -r4
   16724:	strdeq	r6, [r1], -r4
   16728:	strdeq	r6, [r1], -r4
   1672c:	strdeq	r6, [r1], -r4
   16730:	strdeq	r6, [r1], -r4
   16734:	strdeq	r6, [r1], -r4
   16738:	strdeq	r6, [r1], -r4
   1673c:	strdeq	r6, [r1], -r4
   16740:	strdeq	r6, [r1], -r4
   16744:	strdeq	r6, [r1], -r4
   16748:	strdeq	r6, [r1], -r4
   1674c:	strdeq	r6, [r1], -r4
   16750:	strdeq	r6, [r1], -r4
   16754:	strdeq	r6, [r1], -r4
   16758:	strdeq	r6, [r1], -r4
   1675c:	strdeq	r6, [r1], -r4
   16760:	strdeq	r6, [r1], -r4
   16764:	strdeq	r6, [r1], -r4
   16768:	andeq	r6, r1, r4, lsl #28
   1676c:	strdeq	r6, [r1], -r4
   16770:	strdeq	r6, [r1], -r4
   16774:	andeq	r6, r1, r4, lsr #28
   16778:	strdeq	r6, [r1], -r4
   1677c:	strdeq	r6, [r1], -r4
   16780:	strdeq	r6, [r1], -r4
   16784:	strdeq	r6, [r1], -r4
   16788:	strdeq	r6, [r1], -r4
   1678c:	strdeq	r6, [r1], -r4
   16790:	strdeq	r6, [r1], -r4
   16794:	strdeq	r6, [r1], -r4
   16798:	strdeq	r6, [r1], -r4
   1679c:	strdeq	r6, [r1], -r4
   167a0:	strdeq	r6, [r1], -r4
   167a4:	strdeq	r6, [r1], -r4
   167a8:	strdeq	r6, [r1], -r4
   167ac:	strdeq	r6, [r1], -r4
   167b0:	strdeq	r6, [r1], -r4
   167b4:	strdeq	r6, [r1], -r4
   167b8:	strdeq	r6, [r1], -r4
   167bc:	strdeq	r6, [r1], -r4
   167c0:	strdeq	r6, [r1], -r4
   167c4:	strdeq	r6, [r1], -r4
   167c8:	strdeq	r6, [r1], -r4
   167cc:	strdeq	r6, [r1], -r4
   167d0:	strdeq	r6, [r1], -r4
   167d4:	strdeq	r6, [r1], -r4
   167d8:	strdeq	r6, [r1], -r4
   167dc:	strdeq	r6, [r1], -r4
   167e0:	strdeq	r6, [r1], -r4
   167e4:	strdeq	r6, [r1], -r4
   167e8:	muleq	r1, ip, sp
   167ec:	andeq	r6, r1, r0, lsr sp
   167f0:			; <UNDEFINED> instruction: 0x00016db8
   167f4:	mov	r3, #2
   167f8:	strb	r3, [r0, #4]
   167fc:	mov	r0, #0
   16800:	bx	lr
   16804:	mov	r3, #1
   16808:	strb	r3, [r0, #4]
   1680c:	ldrb	r2, [r0, #6]
   16810:	orr	r2, r2, #32
   16814:	strb	r2, [r0, #6]
   16818:	mov	r0, r3
   1681c:	add	sp, sp, #8
   16820:	pop	{r4, r5, r6, r7, r8, pc}
   16824:	ldr	r1, [r1, #40]	; 0x28
   16828:	add	r2, r1, #1
   1682c:	ldr	r0, [r4, #48]	; 0x30
   16830:	cmp	r2, r0
   16834:	bge	16a08 <__assert_fail@plt+0x5730>
   16838:	ldrb	r0, [r4, #75]	; 0x4b
   1683c:	cmp	r0, #0
   16840:	bne	16a18 <__assert_fail@plt+0x5740>
   16844:	ldr	r3, [r4, #4]
   16848:	ldrb	r6, [r3, r2]
   1684c:	strb	r6, [r5]
   16850:	mov	r3, #1
   16854:	strb	r3, [r5, #4]
   16858:	ldr	r3, [r4, #80]	; 0x50
   1685c:	cmp	r3, #1
   16860:	ble	16a94 <__assert_fail@plt+0x57bc>
   16864:	ldr	r1, [r4, #40]	; 0x28
   16868:	add	r1, r1, #1
   1686c:	mov	r0, r4
   16870:	bl	14710 <__assert_fail@plt+0x3438>
   16874:	mov	r4, r0
   16878:	bl	111dc <iswalnum@plt>
   1687c:	adds	r3, r0, #0
   16880:	movne	r3, #1
   16884:	ldrb	r0, [r5, #6]
   16888:	cmp	r4, #95	; 0x5f
   1688c:	orreq	r3, r3, #1
   16890:	bic	r0, r0, #64	; 0x40
   16894:	orr	r0, r0, r3, lsl #6
   16898:	strb	r0, [r5, #6]
   1689c:	sub	r3, r6, #39	; 0x27
   168a0:	cmp	r3, #86	; 0x56
   168a4:	ldrls	pc, [pc, r3, lsl #2]
   168a8:	b	16eec <__assert_fail@plt+0x5c14>
   168ac:	andeq	r6, r1, r8, lsl ip
   168b0:	andeq	r6, r1, ip, lsr ip
   168b4:	andeq	r6, r1, r4, asr ip
   168b8:	andeq	r6, r1, ip, ror #29
   168bc:	andeq	r6, r1, ip, ror #24
   168c0:	andeq	r6, r1, ip, ror #29
   168c4:	andeq	r6, r1, ip, ror #29
   168c8:	andeq	r6, r1, ip, ror #29
   168cc:	andeq	r6, r1, ip, ror #29
   168d0:	andeq	r6, r1, ip, ror #29
   168d4:	andeq	r6, r1, r0, ror #21
   168d8:	andeq	r6, r1, r0, ror #21
   168dc:	andeq	r6, r1, r0, ror #21
   168e0:	andeq	r6, r1, r0, ror #21
   168e4:	andeq	r6, r1, r0, ror #21
   168e8:	andeq	r6, r1, r0, ror #21
   168ec:	andeq	r6, r1, r0, ror #21
   168f0:	andeq	r6, r1, r0, ror #21
   168f4:	andeq	r6, r1, r0, ror #21
   168f8:	andeq	r6, r1, ip, ror #29
   168fc:	andeq	r6, r1, ip, ror #29
   16900:	andeq	r6, r1, r4, lsl #22
   16904:	andeq	r6, r1, ip, ror #29
   16908:	andeq	r6, r1, r8, lsr #22
   1690c:	andeq	r6, r1, ip, lsl #25
   16910:	andeq	r6, r1, ip, ror #29
   16914:	andeq	r6, r1, ip, ror #29
   16918:	andeq	r6, r1, r0, ror fp
   1691c:	andeq	r6, r1, ip, ror #29
   16920:	andeq	r6, r1, ip, ror #29
   16924:	andeq	r6, r1, ip, ror #29
   16928:	andeq	r6, r1, ip, ror #29
   1692c:	andeq	r6, r1, ip, ror #29
   16930:	andeq	r6, r1, ip, ror #29
   16934:	andeq	r6, r1, ip, ror #29
   16938:	andeq	r6, r1, ip, ror #29
   1693c:	andeq	r6, r1, ip, ror #29
   16940:	andeq	r6, r1, ip, ror #29
   16944:	andeq	r6, r1, ip, ror #29
   16948:	andeq	r6, r1, ip, ror #29
   1694c:	andeq	r6, r1, ip, ror #29
   16950:	andeq	r6, r1, ip, ror #29
   16954:	andeq	r6, r1, ip, ror #29
   16958:	andeq	r6, r1, ip, ror #29
   1695c:	ldrdeq	r6, [r1], -ip
   16960:	andeq	r6, r1, ip, ror #29
   16964:	andeq	r6, r1, ip, ror #29
   16968:	andeq	r6, r1, ip, ror #29
   1696c:	andeq	r6, r1, ip, lsr #23
   16970:	andeq	r6, r1, ip, ror #29
   16974:	andeq	r6, r1, ip, ror #29
   16978:	andeq	r6, r1, ip, ror #29
   1697c:	andeq	r6, r1, ip, ror #29
   16980:	andeq	r6, r1, ip, ror #29
   16984:	andeq	r6, r1, ip, ror #29
   16988:	andeq	r6, r1, ip, ror #29
   1698c:	andeq	r6, r1, ip, ror #29
   16990:	strdeq	r6, [r1], -r4
   16994:	andeq	r6, r1, ip, ror #29
   16998:	andeq	r6, r1, ip, asr #22
   1699c:	andeq	r6, r1, ip, ror #29
   169a0:	andeq	r6, r1, ip, ror #29
   169a4:	andeq	r6, r1, ip, ror #29
   169a8:	andeq	r6, r1, ip, ror #29
   169ac:	andeq	r6, r1, ip, ror #29
   169b0:	andeq	r6, r1, ip, ror #29
   169b4:	andeq	r6, r1, ip, ror #29
   169b8:	andeq	r6, r1, ip, ror #29
   169bc:	andeq	r6, r1, ip, ror #29
   169c0:	andeq	r6, r1, ip, ror #29
   169c4:	andeq	r6, r1, ip, ror #29
   169c8:	andeq	r6, r1, ip, ror #29
   169cc:	andeq	r6, r1, ip, ror #29
   169d0:	andeq	r6, r1, ip, ror #29
   169d4:	andeq	r6, r1, ip, ror #29
   169d8:	andeq	r6, r1, ip, ror #29
   169dc:	andeq	r6, r1, r4, asr #23
   169e0:	andeq	r6, r1, ip, ror #29
   169e4:	andeq	r6, r1, ip, ror #29
   169e8:	andeq	r6, r1, ip, ror #29
   169ec:	muleq	r1, r4, fp
   169f0:	andeq	r6, r1, ip, ror #29
   169f4:	andeq	r6, r1, ip, ror #29
   169f8:	andeq	r6, r1, ip, ror #29
   169fc:	andeq	r6, r1, ip, lsr #25
   16a00:	andeq	r6, r1, r8, asr #21
   16a04:	andeq	r6, r1, r8, asr #25
   16a08:	mov	r3, #36	; 0x24
   16a0c:	strb	r3, [r5, #4]
   16a10:	mov	r0, #1
   16a14:	b	1681c <__assert_fail@plt+0x5544>
   16a18:	cmp	r3, #1
   16a1c:	ble	16a54 <__assert_fail@plt+0x577c>
   16a20:	ldr	r3, [r4, #8]
   16a24:	lsl	ip, r2, #2
   16a28:	ldr	r0, [r3, r2, lsl #2]
   16a2c:	cmn	r0, #1
   16a30:	beq	16a88 <__assert_fail@plt+0x57b0>
   16a34:	add	r1, r1, #2
   16a38:	ldr	r0, [r4, #28]
   16a3c:	cmp	r0, r1
   16a40:	beq	16a54 <__assert_fail@plt+0x577c>
   16a44:	add	r3, r3, ip
   16a48:	ldr	r3, [r3, #4]
   16a4c:	cmn	r3, #1
   16a50:	beq	16a88 <__assert_fail@plt+0x57b0>
   16a54:	ldrb	r3, [r4, #76]	; 0x4c
   16a58:	cmp	r3, #0
   16a5c:	beq	16efc <__assert_fail@plt+0x5c24>
   16a60:	ldr	r1, [r4, #12]
   16a64:	ldr	r3, [r4]
   16a68:	ldr	r0, [r1, r2, lsl #2]
   16a6c:	ldr	r1, [r4, #24]
   16a70:	add	r3, r3, r0
   16a74:	ldrb	r6, [r3, r1]
   16a78:	bics	r3, r6, #127	; 0x7f
   16a7c:	ldrne	r3, [r4, #4]
   16a80:	ldrbne	r6, [r3, r2]
   16a84:	b	1684c <__assert_fail@plt+0x5574>
   16a88:	ldr	r3, [r4, #4]
   16a8c:	ldrb	r6, [r3, r2]
   16a90:	b	1684c <__assert_fail@plt+0x5574>
   16a94:	bl	111a0 <__ctype_b_loc@plt>
   16a98:	ldr	r2, [r0]
   16a9c:	lsl	r3, r6, #1
   16aa0:	ldrh	r3, [r2, r3]
   16aa4:	lsr	r3, r3, #3
   16aa8:	and	r3, r3, #1
   16aac:	ldrb	r2, [r5, #6]
   16ab0:	cmp	r6, #95	; 0x5f
   16ab4:	orreq	r3, r3, #1
   16ab8:	bic	r2, r2, #64	; 0x40
   16abc:	orr	r3, r2, r3, lsl #6
   16ac0:	strb	r3, [r5, #6]
   16ac4:	b	1689c <__assert_fail@plt+0x55c4>
   16ac8:	tst	r7, #33792	; 0x8400
   16acc:	movne	r0, #2
   16ad0:	moveq	r3, #10
   16ad4:	strbeq	r3, [r5, #4]
   16ad8:	moveq	r0, #2
   16adc:	b	1681c <__assert_fail@plt+0x5544>
   16ae0:	tst	r7, #16384	; 0x4000
   16ae4:	movne	r0, #2
   16ae8:	bne	1681c <__assert_fail@plt+0x5544>
   16aec:	mov	r3, #4
   16af0:	strb	r3, [r5, #4]
   16af4:	sub	r6, r6, #49	; 0x31
   16af8:	str	r6, [r5]
   16afc:	mov	r0, #2
   16b00:	b	1681c <__assert_fail@plt+0x5544>
   16b04:	tst	r7, #524288	; 0x80000
   16b08:	movne	r0, #2
   16b0c:	bne	1681c <__assert_fail@plt+0x5544>
   16b10:	mov	r3, #12
   16b14:	strb	r3, [r5, #4]
   16b18:	mov	r3, #6
   16b1c:	str	r3, [r5]
   16b20:	mov	r0, #2
   16b24:	b	1681c <__assert_fail@plt+0x5544>
   16b28:	tst	r7, #524288	; 0x80000
   16b2c:	movne	r0, #2
   16b30:	bne	1681c <__assert_fail@plt+0x5544>
   16b34:	mov	r3, #12
   16b38:	strb	r3, [r5, #4]
   16b3c:	mov	r3, #9
   16b40:	str	r3, [r5]
   16b44:	mov	r0, #2
   16b48:	b	1681c <__assert_fail@plt+0x5544>
   16b4c:	tst	r7, #524288	; 0x80000
   16b50:	movne	r0, #2
   16b54:	bne	1681c <__assert_fail@plt+0x5544>
   16b58:	mov	r3, #12
   16b5c:	strb	r3, [r5, #4]
   16b60:	mov	r3, #256	; 0x100
   16b64:	str	r3, [r5]
   16b68:	mov	r0, #2
   16b6c:	b	1681c <__assert_fail@plt+0x5544>
   16b70:	tst	r7, #524288	; 0x80000
   16b74:	movne	r0, #2
   16b78:	bne	1681c <__assert_fail@plt+0x5544>
   16b7c:	mov	r3, #12
   16b80:	strb	r3, [r5, #4]
   16b84:	mov	r3, #512	; 0x200
   16b88:	str	r3, [r5]
   16b8c:	mov	r0, #2
   16b90:	b	1681c <__assert_fail@plt+0x5544>
   16b94:	tst	r7, #524288	; 0x80000
   16b98:	movne	r0, #2
   16b9c:	moveq	r3, #32
   16ba0:	strbeq	r3, [r5, #4]
   16ba4:	moveq	r0, #2
   16ba8:	b	1681c <__assert_fail@plt+0x5544>
   16bac:	tst	r7, #524288	; 0x80000
   16bb0:	movne	r0, #2
   16bb4:	moveq	r3, #33	; 0x21
   16bb8:	strbeq	r3, [r5, #4]
   16bbc:	moveq	r0, #2
   16bc0:	b	1681c <__assert_fail@plt+0x5544>
   16bc4:	tst	r7, #524288	; 0x80000
   16bc8:	movne	r0, #2
   16bcc:	moveq	r3, #34	; 0x22
   16bd0:	strbeq	r3, [r5, #4]
   16bd4:	moveq	r0, #2
   16bd8:	b	1681c <__assert_fail@plt+0x5544>
   16bdc:	tst	r7, #524288	; 0x80000
   16be0:	movne	r0, #2
   16be4:	moveq	r3, #35	; 0x23
   16be8:	strbeq	r3, [r5, #4]
   16bec:	moveq	r0, #2
   16bf0:	b	1681c <__assert_fail@plt+0x5544>
   16bf4:	tst	r7, #524288	; 0x80000
   16bf8:	movne	r0, #2
   16bfc:	bne	1681c <__assert_fail@plt+0x5544>
   16c00:	mov	r3, #12
   16c04:	strb	r3, [r5, #4]
   16c08:	mov	r3, #64	; 0x40
   16c0c:	str	r3, [r5]
   16c10:	mov	r0, #2
   16c14:	b	1681c <__assert_fail@plt+0x5544>
   16c18:	tst	r7, #524288	; 0x80000
   16c1c:	movne	r0, #2
   16c20:	bne	1681c <__assert_fail@plt+0x5544>
   16c24:	mov	r3, #12
   16c28:	strb	r3, [r5, #4]
   16c2c:	mov	r3, #128	; 0x80
   16c30:	str	r3, [r5]
   16c34:	mov	r0, #2
   16c38:	b	1681c <__assert_fail@plt+0x5544>
   16c3c:	tst	r7, #8192	; 0x2000
   16c40:	movne	r0, #2
   16c44:	moveq	r3, #8
   16c48:	strbeq	r3, [r5, #4]
   16c4c:	moveq	r0, #2
   16c50:	b	1681c <__assert_fail@plt+0x5544>
   16c54:	tst	r7, #8192	; 0x2000
   16c58:	movne	r0, #2
   16c5c:	moveq	r3, #9
   16c60:	strbeq	r3, [r5, #4]
   16c64:	moveq	r0, #2
   16c68:	b	1681c <__assert_fail@plt+0x5544>
   16c6c:	ldr	r3, [pc, #668]	; 16f10 <__assert_fail@plt+0x5c38>
   16c70:	and	r3, r3, r7
   16c74:	cmp	r3, #2
   16c78:	moveq	r3, #18
   16c7c:	strbeq	r3, [r5, #4]
   16c80:	moveq	r0, #2
   16c84:	movne	r0, #2
   16c88:	b	1681c <__assert_fail@plt+0x5544>
   16c8c:	ldr	r3, [pc, #636]	; 16f10 <__assert_fail@plt+0x5c38>
   16c90:	and	r3, r3, r7
   16c94:	cmp	r3, #2
   16c98:	moveq	r3, #19
   16c9c:	strbeq	r3, [r5, #4]
   16ca0:	moveq	r0, #2
   16ca4:	movne	r0, #2
   16ca8:	b	1681c <__assert_fail@plt+0x5544>
   16cac:	and	r7, r7, #4608	; 0x1200
   16cb0:	cmp	r7, #512	; 0x200
   16cb4:	moveq	r3, #23
   16cb8:	strbeq	r3, [r5, #4]
   16cbc:	moveq	r0, #2
   16cc0:	movne	r0, #2
   16cc4:	b	1681c <__assert_fail@plt+0x5544>
   16cc8:	and	r7, r7, #4608	; 0x1200
   16ccc:	cmp	r7, #512	; 0x200
   16cd0:	moveq	r3, #24
   16cd4:	strbeq	r3, [r5, #4]
   16cd8:	moveq	r0, #2
   16cdc:	movne	r0, #2
   16ce0:	b	1681c <__assert_fail@plt+0x5544>
   16ce4:	bl	111a0 <__ctype_b_loc@plt>
   16ce8:	ldr	r2, [r0]
   16cec:	lsl	r3, r6, #1
   16cf0:	ldrh	r3, [r2, r3]
   16cf4:	lsr	r3, r3, #3
   16cf8:	and	r3, r3, #1
   16cfc:	ldrb	r2, [r5, #6]
   16d00:	cmp	r6, #95	; 0x5f
   16d04:	orreq	r3, r3, #1
   16d08:	bic	r2, r2, #64	; 0x40
   16d0c:	orr	r3, r2, r3, lsl #6
   16d10:	strb	r3, [r5, #6]
   16d14:	b	16614 <__assert_fail@plt+0x533c>
   16d18:	tst	r7, #2048	; 0x800
   16d1c:	moveq	r0, #1
   16d20:	movne	r3, #10
   16d24:	strbne	r3, [r5, #4]
   16d28:	movne	r0, #1
   16d2c:	b	1681c <__assert_fail@plt+0x5544>
   16d30:	and	r7, r7, #33792	; 0x8400
   16d34:	cmp	r7, #32768	; 0x8000
   16d38:	moveq	r3, #10
   16d3c:	strbeq	r3, [r5, #4]
   16d40:	moveq	r0, #1
   16d44:	movne	r0, #1
   16d48:	b	1681c <__assert_fail@plt+0x5544>
   16d4c:	mov	r3, #11
   16d50:	strb	r3, [r5, #4]
   16d54:	mov	r0, #1
   16d58:	b	1681c <__assert_fail@plt+0x5544>
   16d5c:	ldr	r3, [pc, #428]	; 16f10 <__assert_fail@plt+0x5c38>
   16d60:	and	r3, r3, r7
   16d64:	cmp	r3, #0
   16d68:	movne	r0, #1
   16d6c:	moveq	r3, #18
   16d70:	strbeq	r3, [r5, #4]
   16d74:	moveq	r0, #1
   16d78:	b	1681c <__assert_fail@plt+0x5544>
   16d7c:	ldr	r3, [pc, #396]	; 16f10 <__assert_fail@plt+0x5c38>
   16d80:	and	r3, r3, r7
   16d84:	cmp	r3, #0
   16d88:	movne	r0, #1
   16d8c:	moveq	r3, #19
   16d90:	strbeq	r3, [r5, #4]
   16d94:	moveq	r0, #1
   16d98:	b	1681c <__assert_fail@plt+0x5544>
   16d9c:	and	r7, r7, #4608	; 0x1200
   16da0:	cmp	r7, #4608	; 0x1200
   16da4:	moveq	r3, #23
   16da8:	strbeq	r3, [r5, #4]
   16dac:	moveq	r0, #1
   16db0:	movne	r0, #1
   16db4:	b	1681c <__assert_fail@plt+0x5544>
   16db8:	and	r7, r7, #4608	; 0x1200
   16dbc:	cmp	r7, #4608	; 0x1200
   16dc0:	moveq	r3, #24
   16dc4:	strbeq	r3, [r5, #4]
   16dc8:	moveq	r0, #1
   16dcc:	movne	r0, #1
   16dd0:	b	1681c <__assert_fail@plt+0x5544>
   16dd4:	tst	r7, #8192	; 0x2000
   16dd8:	moveq	r0, #1
   16ddc:	movne	r3, #8
   16de0:	strbne	r3, [r5, #4]
   16de4:	movne	r0, #1
   16de8:	b	1681c <__assert_fail@plt+0x5544>
   16dec:	tst	r7, #8192	; 0x2000
   16df0:	moveq	r0, #1
   16df4:	movne	r3, #9
   16df8:	strbne	r3, [r5, #4]
   16dfc:	movne	r0, #1
   16e00:	b	1681c <__assert_fail@plt+0x5544>
   16e04:	mov	r3, #20
   16e08:	strb	r3, [r5, #4]
   16e0c:	mov	r0, #1
   16e10:	b	1681c <__assert_fail@plt+0x5544>
   16e14:	mov	r3, #5
   16e18:	strb	r3, [r5, #4]
   16e1c:	mov	r0, #1
   16e20:	b	1681c <__assert_fail@plt+0x5544>
   16e24:	ldr	r3, [pc, #232]	; 16f14 <__assert_fail@plt+0x5c3c>
   16e28:	and	r3, r3, r7
   16e2c:	cmp	r3, #0
   16e30:	bne	16e68 <__assert_fail@plt+0x5b90>
   16e34:	ldr	r3, [r4, #40]	; 0x28
   16e38:	cmp	r3, #0
   16e3c:	beq	16e68 <__assert_fail@plt+0x5b90>
   16e40:	ldr	r2, [r4, #4]
   16e44:	add	r3, r2, r3
   16e48:	ldrb	r2, [r3, #-1]
   16e4c:	lsr	r3, r7, #11
   16e50:	eor	r3, r3, #1
   16e54:	cmp	r2, #10
   16e58:	orrne	r3, r3, #1
   16e5c:	tst	r3, #1
   16e60:	movne	r0, #1
   16e64:	bne	1681c <__assert_fail@plt+0x5544>
   16e68:	mov	r3, #12
   16e6c:	strb	r3, [r5, #4]
   16e70:	mov	r3, #16
   16e74:	str	r3, [r5]
   16e78:	mov	r0, #1
   16e7c:	b	1681c <__assert_fail@plt+0x5544>
   16e80:	tst	r7, #8
   16e84:	bne	16ed4 <__assert_fail@plt+0x5bfc>
   16e88:	ldr	r3, [r4, #40]	; 0x28
   16e8c:	add	r3, r3, #1
   16e90:	ldr	r2, [r4, #48]	; 0x30
   16e94:	cmp	r3, r2
   16e98:	beq	16ed4 <__assert_fail@plt+0x5bfc>
   16e9c:	str	r3, [r4, #40]	; 0x28
   16ea0:	mov	r2, r7
   16ea4:	mov	r1, r4
   16ea8:	mov	r0, sp
   16eac:	bl	1655c <__assert_fail@plt+0x5284>
   16eb0:	ldr	r3, [r4, #40]	; 0x28
   16eb4:	sub	r3, r3, #1
   16eb8:	str	r3, [r4, #40]	; 0x28
   16ebc:	ldrb	r3, [sp, #4]
   16ec0:	sub	r3, r3, #9
   16ec4:	uxtb	r3, r3
   16ec8:	cmp	r3, #1
   16ecc:	movhi	r0, #1
   16ed0:	bhi	1681c <__assert_fail@plt+0x5544>
   16ed4:	mov	r3, #12
   16ed8:	strb	r3, [r5, #4]
   16edc:	mov	r3, #32
   16ee0:	str	r3, [r5]
   16ee4:	mov	r0, #1
   16ee8:	b	1681c <__assert_fail@plt+0x5544>
   16eec:	mov	r0, #2
   16ef0:	b	1681c <__assert_fail@plt+0x5544>
   16ef4:	mov	r0, #1
   16ef8:	b	1681c <__assert_fail@plt+0x5544>
   16efc:	ldr	r3, [r4]
   16f00:	ldr	r1, [r4, #24]
   16f04:	add	r2, r3, r2
   16f08:	ldrb	r6, [r2, r1]
   16f0c:	b	1684c <__assert_fail@plt+0x5574>
   16f10:	andeq	r0, r0, r2, lsl #8
   16f14:	addeq	r0, r0, r8
   16f18:	push	{r4, lr}
   16f1c:	mov	r4, r1
   16f20:	bl	1655c <__assert_fail@plt+0x5284>
   16f24:	ldr	r3, [r4, #40]	; 0x28
   16f28:	add	r0, r3, r0
   16f2c:	str	r0, [r4, #40]	; 0x28
   16f30:	pop	{r4, pc}
   16f34:	push	{r4, r5, r6, r7, r8, lr}
   16f38:	mov	r7, r0
   16f3c:	mov	r4, r1
   16f40:	mov	r6, r2
   16f44:	mvn	r5, #0
   16f48:	mov	r2, r6
   16f4c:	mov	r1, r7
   16f50:	mov	r0, r4
   16f54:	bl	16f18 <__assert_fail@plt+0x5c40>
   16f58:	ldrb	r2, [r4]
   16f5c:	ldrb	r3, [r4, #4]
   16f60:	cmp	r3, #2
   16f64:	beq	16fcc <__assert_fail@plt+0x5cf4>
   16f68:	cmp	r3, #24
   16f6c:	cmpne	r2, #44	; 0x2c
   16f70:	beq	16fd0 <__assert_fail@plt+0x5cf8>
   16f74:	cmp	r3, #1
   16f78:	mvnne	r5, #1
   16f7c:	bne	16f48 <__assert_fail@plt+0x5c70>
   16f80:	sub	r3, r2, #48	; 0x30
   16f84:	uxtb	r3, r3
   16f88:	cmp	r3, #9
   16f8c:	movhi	r3, #0
   16f90:	movls	r3, #1
   16f94:	cmn	r5, #2
   16f98:	moveq	r3, #0
   16f9c:	cmp	r3, #0
   16fa0:	mvneq	r5, #1
   16fa4:	beq	16f48 <__assert_fail@plt+0x5c70>
   16fa8:	cmn	r5, #1
   16fac:	subeq	r5, r2, #48	; 0x30
   16fb0:	beq	16f48 <__assert_fail@plt+0x5c70>
   16fb4:	add	r5, r5, r5, lsl #2
   16fb8:	add	r2, r2, r5, lsl #1
   16fbc:	sub	r5, r2, #48	; 0x30
   16fc0:	cmp	r5, #32768	; 0x8000
   16fc4:	movge	r5, #32768	; 0x8000
   16fc8:	b	16f48 <__assert_fail@plt+0x5c70>
   16fcc:	mvn	r5, #1
   16fd0:	mov	r0, r5
   16fd4:	pop	{r4, r5, r6, r7, r8, pc}
   16fd8:	push	{r4, lr}
   16fdc:	mov	r4, r0
   16fe0:	ldr	r0, [r0]
   16fe4:	bl	22f00 <__assert_fail@plt+0x11c28>
   16fe8:	ldr	r0, [r4, #4]
   16fec:	bl	22f00 <__assert_fail@plt+0x11c28>
   16ff0:	ldr	r0, [r4, #8]
   16ff4:	bl	22f00 <__assert_fail@plt+0x11c28>
   16ff8:	ldr	r0, [r4, #12]
   16ffc:	bl	22f00 <__assert_fail@plt+0x11c28>
   17000:	mov	r0, r4
   17004:	bl	22f00 <__assert_fail@plt+0x11c28>
   17008:	pop	{r4, pc}
   1700c:	push	{r4, lr}
   17010:	ldr	r2, [r0, #4]
   17014:	ldr	r3, [pc, #40]	; 17044 <__assert_fail@plt+0x5d6c>
   17018:	and	r3, r3, r2
   1701c:	cmp	r3, #6
   17020:	beq	17038 <__assert_fail@plt+0x5d60>
   17024:	cmp	r3, #3
   17028:	popne	{r4, pc}
   1702c:	ldr	r0, [r0]
   17030:	bl	22f00 <__assert_fail@plt+0x11c28>
   17034:	pop	{r4, pc}
   17038:	ldr	r0, [r0]
   1703c:	bl	16fd8 <__assert_fail@plt+0x5d00>
   17040:	pop	{r4, pc}
   17044:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   17048:	push	{r4, lr}
   1704c:	add	r0, r1, #20
   17050:	bl	1700c <__assert_fail@plt+0x5d34>
   17054:	mov	r0, #0
   17058:	pop	{r4, pc}
   1705c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17060:	sub	sp, sp, #8
   17064:	mov	r4, r0
   17068:	add	r3, sp, #8
   1706c:	stmdb	r3, {r1, r2}
   17070:	ldrb	r5, [sp, #4]
   17074:	ldr	r3, [r0, #4]
   17078:	ldr	r2, [r0, #8]
   1707c:	cmp	r2, r3
   17080:	bcs	17154 <__assert_fail@plt+0x5e7c>
   17084:	ldr	r2, [r4, #8]
   17088:	ldr	r3, [r4]
   1708c:	add	r3, r3, r2, lsl #3
   17090:	add	r2, sp, #8
   17094:	ldmdb	r2, {r0, r1}
   17098:	stm	r3, {r0, r1}
   1709c:	ldr	r3, [r4, #8]
   170a0:	ldr	r2, [r4]
   170a4:	add	r2, r2, r3, lsl #3
   170a8:	ldr	r3, [r2, #4]
   170ac:	bic	r3, r3, #261120	; 0x3fc00
   170b0:	bic	r3, r3, #768	; 0x300
   170b4:	str	r3, [r2, #4]
   170b8:	ldr	r3, [r4, #8]
   170bc:	ldr	r2, [r4]
   170c0:	add	r2, r2, r3, lsl #3
   170c4:	cmp	r5, #5
   170c8:	beq	17220 <__assert_fail@plt+0x5f48>
   170cc:	cmp	r5, #6
   170d0:	movne	r5, #0
   170d4:	moveq	r5, #1
   170d8:	ldrb	r3, [r2, #6]
   170dc:	and	r5, r5, #1
   170e0:	bic	r3, r3, #16
   170e4:	orr	r5, r3, r5, lsl #4
   170e8:	strb	r5, [r2, #6]
   170ec:	ldr	r2, [r4, #8]
   170f0:	ldr	r3, [r4, #12]
   170f4:	mvn	r1, #0
   170f8:	str	r1, [r3, r2, lsl #2]
   170fc:	ldr	r3, [r4, #8]
   17100:	add	r3, r3, r3, lsl #1
   17104:	lsl	r3, r3, #2
   17108:	ldr	r0, [r4, #20]
   1710c:	add	r1, r0, r3
   17110:	mov	r2, #0
   17114:	str	r2, [r0, r3]
   17118:	str	r2, [r1, #4]
   1711c:	str	r2, [r1, #8]
   17120:	ldr	r3, [r4, #8]
   17124:	add	r3, r3, r3, lsl #1
   17128:	lsl	r3, r3, #2
   1712c:	ldr	r0, [r4, #24]
   17130:	add	r1, r0, r3
   17134:	str	r2, [r0, r3]
   17138:	str	r2, [r1, #4]
   1713c:	str	r2, [r1, #8]
   17140:	ldr	r0, [r4, #8]
   17144:	add	r3, r0, #1
   17148:	str	r3, [r4, #8]
   1714c:	add	sp, sp, #8
   17150:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17154:	lsl	r6, r3, #1
   17158:	ldr	r3, [pc, #228]	; 17244 <__assert_fail@plt+0x5f6c>
   1715c:	cmp	r6, r3
   17160:	bhi	17234 <__assert_fail@plt+0x5f5c>
   17164:	lsl	r1, r6, #3
   17168:	ldr	r0, [r0]
   1716c:	bl	22d6c <__assert_fail@plt+0x11a94>
   17170:	cmp	r0, #0
   17174:	beq	1723c <__assert_fail@plt+0x5f64>
   17178:	str	r0, [r4]
   1717c:	lsl	r7, r6, #2
   17180:	mov	r1, r7
   17184:	ldr	r0, [r4, #12]
   17188:	bl	22d6c <__assert_fail@plt+0x11a94>
   1718c:	mov	r9, r0
   17190:	mov	r1, r7
   17194:	ldr	r0, [r4, #16]
   17198:	bl	22d6c <__assert_fail@plt+0x11a94>
   1719c:	mov	r8, r0
   171a0:	add	r7, r6, r6, lsl #1
   171a4:	lsl	r7, r7, #2
   171a8:	mov	r1, r7
   171ac:	ldr	r0, [r4, #20]
   171b0:	bl	22d6c <__assert_fail@plt+0x11a94>
   171b4:	mov	sl, r0
   171b8:	mov	r1, r7
   171bc:	ldr	r0, [r4, #24]
   171c0:	bl	22d6c <__assert_fail@plt+0x11a94>
   171c4:	mov	r7, r0
   171c8:	cmp	r8, #0
   171cc:	cmpne	r9, #0
   171d0:	beq	171f8 <__assert_fail@plt+0x5f20>
   171d4:	cmp	r0, #0
   171d8:	cmpne	sl, #0
   171dc:	beq	171f8 <__assert_fail@plt+0x5f20>
   171e0:	str	r9, [r4, #12]
   171e4:	str	r8, [r4, #16]
   171e8:	str	sl, [r4, #20]
   171ec:	str	r0, [r4, #24]
   171f0:	str	r6, [r4, #4]
   171f4:	b	17084 <__assert_fail@plt+0x5dac>
   171f8:	mov	r0, r9
   171fc:	bl	22f00 <__assert_fail@plt+0x11c28>
   17200:	mov	r0, r8
   17204:	bl	22f00 <__assert_fail@plt+0x11c28>
   17208:	mov	r0, sl
   1720c:	bl	22f00 <__assert_fail@plt+0x11c28>
   17210:	mov	r0, r7
   17214:	bl	22f00 <__assert_fail@plt+0x11c28>
   17218:	mvn	r0, #0
   1721c:	b	1714c <__assert_fail@plt+0x5e74>
   17220:	ldr	r3, [r4, #92]	; 0x5c
   17224:	cmp	r3, #1
   17228:	movgt	r5, #1
   1722c:	bgt	170d8 <__assert_fail@plt+0x5e00>
   17230:	b	170cc <__assert_fail@plt+0x5df4>
   17234:	mvn	r0, #0
   17238:	b	1714c <__assert_fail@plt+0x5e74>
   1723c:	mvn	r0, #0
   17240:	b	1714c <__assert_fail@plt+0x5e74>
   17244:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   17248:	ldrb	r3, [r1, #24]
   1724c:	cmp	r3, #16
   17250:	beq	17290 <__assert_fail@plt+0x5fb8>
   17254:	push	{r4, r5, r6, lr}
   17258:	mov	r4, r1
   1725c:	mov	r5, r0
   17260:	str	r1, [r4, #12]
   17264:	add	r3, r1, #20
   17268:	ldm	r3, {r1, r2}
   1726c:	bl	1705c <__assert_fail@plt+0x5d84>
   17270:	str	r0, [r4, #28]
   17274:	cmn	r0, #1
   17278:	beq	172d8 <__assert_fail@plt+0x6000>
   1727c:	ldrb	r3, [r4, #24]
   17280:	cmp	r3, #12
   17284:	beq	172ac <__assert_fail@plt+0x5fd4>
   17288:	mov	r0, #0
   1728c:	pop	{r4, r5, r6, pc}
   17290:	ldr	r3, [r1, #4]
   17294:	ldr	r2, [r3, #12]
   17298:	str	r2, [r1, #12]
   1729c:	ldr	r3, [r3, #28]
   172a0:	str	r3, [r1, #28]
   172a4:	mov	r0, #0
   172a8:	bx	lr
   172ac:	ldr	r3, [r5]
   172b0:	ldr	r2, [r4, #20]
   172b4:	add	r0, r3, r0, lsl #3
   172b8:	ldr	r3, [r0, #4]
   172bc:	ldr	r1, [pc, #28]	; 172e0 <__assert_fail@plt+0x6008>
   172c0:	and	r2, r2, r1
   172c4:	bic	r3, r3, r1, lsl #8
   172c8:	orr	r3, r3, r2, lsl #8
   172cc:	str	r3, [r0, #4]
   172d0:	mov	r0, #0
   172d4:	pop	{r4, r5, r6, pc}
   172d8:	mov	r0, #12
   172dc:	pop	{r4, r5, r6, pc}
   172e0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   172e4:	push	{r4, r5, r6, r7, r8, lr}
   172e8:	mov	r4, r0
   172ec:	mov	r5, r1
   172f0:	mov	r7, r2
   172f4:	lsl	r6, r1, #3
   172f8:	ldr	r3, [r0]
   172fc:	add	r3, r3, r6
   17300:	ldm	r3, {r1, r2}
   17304:	bl	1705c <__assert_fail@plt+0x5d84>
   17308:	cmn	r0, #1
   1730c:	popeq	{r4, r5, r6, r7, r8, pc}
   17310:	lsl	r1, r0, #3
   17314:	ldr	r2, [r4]
   17318:	add	r2, r2, r1
   1731c:	ldr	r3, [r2, #4]
   17320:	ldr	ip, [pc, #96]	; 17388 <__assert_fail@plt+0x60b0>
   17324:	and	r7, r7, ip
   17328:	lsl	ip, ip, #8
   1732c:	bic	r3, r3, ip
   17330:	orr	r3, r3, r7, lsl #8
   17334:	str	r3, [r2, #4]
   17338:	ldr	r3, [r4]
   1733c:	add	lr, r3, r1
   17340:	add	r6, r3, r6
   17344:	ldr	r2, [r6, #4]
   17348:	lsl	r6, r2, #14
   1734c:	ldr	r3, [lr, #4]
   17350:	lsl	r2, r3, #14
   17354:	lsr	r2, r2, #22
   17358:	orr	r2, r2, r6, lsr #22
   1735c:	bic	r3, r3, ip
   17360:	orr	r3, r3, r2, lsl #8
   17364:	str	r3, [lr, #4]
   17368:	ldr	r3, [r4]
   1736c:	add	r1, r3, r1
   17370:	ldrb	r3, [r1, #6]
   17374:	orr	r3, r3, #4
   17378:	strb	r3, [r1, #6]
   1737c:	ldr	r3, [r4, #16]
   17380:	str	r5, [r3, r0, lsl #2]
   17384:	pop	{r4, r5, r6, r7, r8, pc}
   17388:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1738c:	push	{r4, lr}
   17390:	mov	r4, r0
   17394:	ldr	r0, [r0, #24]
   17398:	bl	22f00 <__assert_fail@plt+0x11c28>
   1739c:	ldr	r0, [r4, #36]	; 0x24
   173a0:	bl	22f00 <__assert_fail@plt+0x11c28>
   173a4:	ldr	r3, [r4, #40]	; 0x28
   173a8:	add	r2, r4, #4
   173ac:	cmp	r3, r2
   173b0:	beq	173c4 <__assert_fail@plt+0x60ec>
   173b4:	ldr	r0, [r3, #8]
   173b8:	bl	22f00 <__assert_fail@plt+0x11c28>
   173bc:	ldr	r0, [r4, #40]	; 0x28
   173c0:	bl	22f00 <__assert_fail@plt+0x11c28>
   173c4:	ldr	r0, [r4, #12]
   173c8:	bl	22f00 <__assert_fail@plt+0x11c28>
   173cc:	ldr	r0, [r4, #48]	; 0x30
   173d0:	bl	22f00 <__assert_fail@plt+0x11c28>
   173d4:	ldr	r0, [r4, #44]	; 0x2c
   173d8:	bl	22f00 <__assert_fail@plt+0x11c28>
   173dc:	mov	r0, r4
   173e0:	bl	22f00 <__assert_fail@plt+0x11c28>
   173e4:	pop	{r4, pc}
   173e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173ec:	sub	sp, sp, #20
   173f0:	mov	ip, #0
   173f4:	str	ip, [r0]
   173f8:	ldr	r5, [r2, #4]
   173fc:	cmp	r5, ip
   17400:	beq	176cc <__assert_fail@plt+0x63f4>
   17404:	add	r8, r3, r5
   17408:	ble	17424 <__assert_fail@plt+0x614c>
   1740c:	ldr	ip, [r2, #8]
   17410:	add	r5, ip, r5, lsl #2
   17414:	ldr	lr, [ip], #4
   17418:	add	r8, r8, lr
   1741c:	cmp	r5, ip
   17420:	bne	17414 <__assert_fail@plt+0x613c>
   17424:	mov	r4, r3
   17428:	mov	r7, r2
   1742c:	mov	r9, r1
   17430:	str	r0, [sp, #12]
   17434:	ldr	r3, [r1, #68]	; 0x44
   17438:	and	r3, r3, r8
   1743c:	add	r3, r3, r3, lsl #1
   17440:	lsl	r3, r3, #2
   17444:	ldr	r2, [r1, #32]
   17448:	add	r1, r2, r3
   1744c:	ldr	fp, [r2, r3]
   17450:	cmp	fp, #0
   17454:	ble	174ac <__assert_fail@plt+0x61d4>
   17458:	ldr	sl, [r1, #8]
   1745c:	sub	sl, sl, #4
   17460:	mov	r5, #0
   17464:	b	17474 <__assert_fail@plt+0x619c>
   17468:	add	r5, r5, #1
   1746c:	cmp	r5, fp
   17470:	beq	174ac <__assert_fail@plt+0x61d4>
   17474:	ldr	r6, [sl, #4]!
   17478:	ldr	r3, [r6]
   1747c:	cmp	r3, r8
   17480:	bne	17468 <__assert_fail@plt+0x6190>
   17484:	ldrb	r3, [r6, #52]	; 0x34
   17488:	and	r3, r3, #15
   1748c:	cmp	r4, r3
   17490:	bne	17468 <__assert_fail@plt+0x6190>
   17494:	mov	r1, r7
   17498:	ldr	r0, [r6, #40]	; 0x28
   1749c:	bl	14780 <__assert_fail@plt+0x34a8>
   174a0:	cmp	r0, #0
   174a4:	beq	17468 <__assert_fail@plt+0x6190>
   174a8:	b	176b4 <__assert_fail@plt+0x63dc>
   174ac:	mov	r1, #1
   174b0:	mov	r0, #56	; 0x38
   174b4:	bl	22cec <__assert_fail@plt+0x11a14>
   174b8:	subs	r6, r0, #0
   174bc:	beq	1752c <__assert_fail@plt+0x6254>
   174c0:	add	fp, r6, #4
   174c4:	mov	r1, r7
   174c8:	mov	r0, fp
   174cc:	bl	15c30 <__assert_fail@plt+0x4958>
   174d0:	cmp	r0, #0
   174d4:	bne	17524 <__assert_fail@plt+0x624c>
   174d8:	ldrb	r2, [r6, #52]	; 0x34
   174dc:	and	r3, r4, #15
   174e0:	bic	r2, r2, #15
   174e4:	orr	r3, r3, r2
   174e8:	strb	r3, [r6, #52]	; 0x34
   174ec:	str	fp, [r6, #40]	; 0x28
   174f0:	ldr	r3, [r7, #4]
   174f4:	cmp	r3, #0
   174f8:	ble	1769c <__assert_fail@plt+0x63c4>
   174fc:	mov	sl, #0
   17500:	mov	r5, sl
   17504:	and	r3, r4, #4
   17508:	str	r3, [sp, #4]
   1750c:	and	r3, r4, #2
   17510:	str	r3, [sp]
   17514:	and	r3, r4, #1
   17518:	str	r8, [sp, #8]
   1751c:	mov	r8, r3
   17520:	b	175e8 <__assert_fail@plt+0x6310>
   17524:	mov	r0, r6
   17528:	bl	22f00 <__assert_fail@plt+0x11c28>
   1752c:	mov	r3, #12
   17530:	ldr	r2, [sp, #12]
   17534:	str	r3, [r2]
   17538:	mov	r6, #0
   1753c:	b	176b4 <__assert_fail@plt+0x63dc>
   17540:	mov	r0, #12
   17544:	bl	22d3c <__assert_fail@plt+0x11a64>
   17548:	cmp	r0, #0
   1754c:	beq	17578 <__assert_fail@plt+0x62a0>
   17550:	str	r0, [r6, #40]	; 0x28
   17554:	mov	r1, r7
   17558:	bl	15c30 <__assert_fail@plt+0x4958>
   1755c:	cmp	r0, #0
   17560:	bne	17584 <__assert_fail@plt+0x62ac>
   17564:	ldrb	r3, [r6, #52]	; 0x34
   17568:	orr	r3, r3, #128	; 0x80
   1756c:	strb	r3, [r6, #52]	; 0x34
   17570:	mov	sl, #0
   17574:	b	1767c <__assert_fail@plt+0x63a4>
   17578:	mov	r0, r6
   1757c:	bl	1738c <__assert_fail@plt+0x60b4>
   17580:	b	1752c <__assert_fail@plt+0x6254>
   17584:	mov	r0, r6
   17588:	bl	1738c <__assert_fail@plt+0x60b4>
   1758c:	b	1752c <__assert_fail@plt+0x6254>
   17590:	tst	r4, #2
   17594:	beq	175a0 <__assert_fail@plt+0x62c8>
   17598:	cmp	r8, #0
   1759c:	bne	175c8 <__assert_fail@plt+0x62f0>
   175a0:	tst	r4, #16
   175a4:	beq	175b4 <__assert_fail@plt+0x62dc>
   175a8:	ldr	r3, [sp]
   175ac:	cmp	r3, #0
   175b0:	beq	175c8 <__assert_fail@plt+0x62f0>
   175b4:	tst	r4, #64	; 0x40
   175b8:	beq	175d8 <__assert_fail@plt+0x6300>
   175bc:	ldr	r3, [sp, #4]
   175c0:	cmp	r3, #0
   175c4:	bne	175d8 <__assert_fail@plt+0x6300>
   175c8:	sub	r1, r5, sl
   175cc:	mov	r0, fp
   175d0:	bl	1488c <__assert_fail@plt+0x35b4>
   175d4:	add	sl, sl, #1
   175d8:	add	r5, r5, #1
   175dc:	ldr	r3, [r7, #4]
   175e0:	cmp	r5, r3
   175e4:	bge	17698 <__assert_fail@plt+0x63c0>
   175e8:	ldr	r3, [r7, #8]
   175ec:	ldr	r2, [r3, r5, lsl #2]
   175f0:	ldr	r3, [r9]
   175f4:	add	r3, r3, r2, lsl #3
   175f8:	ldrb	r2, [r3, #4]
   175fc:	ldr	r4, [r3, #4]
   17600:	lsl	r4, r4, #14
   17604:	lsrs	r4, r4, #22
   17608:	moveq	r1, #1
   1760c:	movne	r1, #0
   17610:	cmp	r2, #1
   17614:	movne	r1, #0
   17618:	andeq	r1, r1, #1
   1761c:	cmp	r1, #0
   17620:	bne	175d8 <__assert_fail@plt+0x6300>
   17624:	ldrb	r1, [r6, #52]	; 0x34
   17628:	ldrb	r3, [r3, #6]
   1762c:	lsr	r3, r3, #4
   17630:	orr	r3, r3, r1, lsr #5
   17634:	and	r3, r3, #1
   17638:	bic	r1, r1, #32
   1763c:	orr	r3, r1, r3, lsl #5
   17640:	strb	r3, [r6, #52]	; 0x34
   17644:	cmp	r2, #2
   17648:	uxtbeq	r3, r3
   1764c:	orreq	r3, r3, #16
   17650:	strbeq	r3, [r6, #52]	; 0x34
   17654:	beq	17668 <__assert_fail@plt+0x6390>
   17658:	cmp	r2, #4
   1765c:	ldrbeq	r3, [r6, #52]	; 0x34
   17660:	orreq	r3, r3, #64	; 0x40
   17664:	strbeq	r3, [r6, #52]	; 0x34
   17668:	cmp	r4, #0
   1766c:	beq	175d8 <__assert_fail@plt+0x6300>
   17670:	ldr	r3, [r6, #40]	; 0x28
   17674:	cmp	fp, r3
   17678:	beq	17540 <__assert_fail@plt+0x6268>
   1767c:	tst	r4, #1
   17680:	beq	17590 <__assert_fail@plt+0x62b8>
   17684:	cmp	r8, #0
   17688:	beq	175c8 <__assert_fail@plt+0x62f0>
   1768c:	tst	r4, #2
   17690:	bne	175c8 <__assert_fail@plt+0x62f0>
   17694:	b	175a0 <__assert_fail@plt+0x62c8>
   17698:	ldr	r8, [sp, #8]
   1769c:	mov	r2, r8
   176a0:	mov	r1, r6
   176a4:	mov	r0, r9
   176a8:	bl	157d4 <__assert_fail@plt+0x44fc>
   176ac:	cmp	r0, #0
   176b0:	bne	176c0 <__assert_fail@plt+0x63e8>
   176b4:	mov	r0, r6
   176b8:	add	sp, sp, #20
   176bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176c0:	mov	r0, r6
   176c4:	bl	1738c <__assert_fail@plt+0x60b4>
   176c8:	b	1752c <__assert_fail@plt+0x6254>
   176cc:	mov	r6, #0
   176d0:	b	176b4 <__assert_fail@plt+0x63dc>
   176d4:	push	{r4, r5, r6, lr}
   176d8:	ldr	r5, [r0]
   176dc:	ldr	r0, [r5, #56]	; 0x38
   176e0:	cmp	r0, #0
   176e4:	beq	176fc <__assert_fail@plt+0x6424>
   176e8:	ldr	r4, [r0]
   176ec:	bl	22f00 <__assert_fail@plt+0x11c28>
   176f0:	mov	r0, r4
   176f4:	cmp	r4, #0
   176f8:	bne	176e8 <__assert_fail@plt+0x6410>
   176fc:	mov	r4, #0
   17700:	str	r4, [r5, #56]	; 0x38
   17704:	mov	r3, #31
   17708:	str	r3, [r5, #64]	; 0x40
   1770c:	str	r4, [r5, #52]	; 0x34
   17710:	ldr	r0, [r5, #16]
   17714:	bl	22f00 <__assert_fail@plt+0x11c28>
   17718:	str	r4, [r5, #16]
   1771c:	pop	{r4, r5, r6, pc}
   17720:	push	{r4, lr}
   17724:	mov	r4, r0
   17728:	ldr	r0, [r0, #8]
   1772c:	bl	22f00 <__assert_fail@plt+0x11c28>
   17730:	ldr	r0, [r4, #12]
   17734:	bl	22f00 <__assert_fail@plt+0x11c28>
   17738:	ldrb	r3, [r4, #75]	; 0x4b
   1773c:	cmp	r3, #0
   17740:	popeq	{r4, pc}
   17744:	ldr	r0, [r4, #4]
   17748:	bl	22f00 <__assert_fail@plt+0x11c28>
   1774c:	pop	{r4, pc}
   17750:	push	{r4, r5, r6, r7, r8, lr}
   17754:	mov	r6, r0
   17758:	ldr	r3, [r0]
   1775c:	cmp	r3, #0
   17760:	beq	17790 <__assert_fail@plt+0x64b8>
   17764:	ldr	r3, [r0, #8]
   17768:	cmp	r3, #0
   1776c:	beq	17790 <__assert_fail@plt+0x64b8>
   17770:	mov	r4, #0
   17774:	ldr	r0, [r6]
   17778:	add	r0, r0, r4, lsl #3
   1777c:	bl	1700c <__assert_fail@plt+0x5d34>
   17780:	add	r4, r4, #1
   17784:	ldr	r3, [r6, #8]
   17788:	cmp	r3, r4
   1778c:	bhi	17774 <__assert_fail@plt+0x649c>
   17790:	ldr	r0, [r6, #12]
   17794:	bl	22f00 <__assert_fail@plt+0x11c28>
   17798:	ldr	r3, [r6, #8]
   1779c:	cmp	r3, #0
   177a0:	beq	17810 <__assert_fail@plt+0x6538>
   177a4:	mov	r4, #0
   177a8:	mov	r5, r4
   177ac:	b	177c4 <__assert_fail@plt+0x64ec>
   177b0:	add	r5, r5, #1
   177b4:	add	r4, r4, #12
   177b8:	ldr	r3, [r6, #8]
   177bc:	cmp	r3, r5
   177c0:	bls	17810 <__assert_fail@plt+0x6538>
   177c4:	ldr	r3, [r6, #24]
   177c8:	cmp	r3, #0
   177cc:	beq	177dc <__assert_fail@plt+0x6504>
   177d0:	add	r3, r3, r4
   177d4:	ldr	r0, [r3, #8]
   177d8:	bl	22f00 <__assert_fail@plt+0x11c28>
   177dc:	ldr	r3, [r6, #28]
   177e0:	cmp	r3, #0
   177e4:	beq	177f4 <__assert_fail@plt+0x651c>
   177e8:	add	r3, r3, r4
   177ec:	ldr	r0, [r3, #8]
   177f0:	bl	22f00 <__assert_fail@plt+0x11c28>
   177f4:	ldr	r3, [r6, #20]
   177f8:	cmp	r3, #0
   177fc:	beq	177b0 <__assert_fail@plt+0x64d8>
   17800:	add	r3, r3, r4
   17804:	ldr	r0, [r3, #8]
   17808:	bl	22f00 <__assert_fail@plt+0x11c28>
   1780c:	b	177b0 <__assert_fail@plt+0x64d8>
   17810:	ldr	r0, [r6, #20]
   17814:	bl	22f00 <__assert_fail@plt+0x11c28>
   17818:	ldr	r0, [r6, #24]
   1781c:	bl	22f00 <__assert_fail@plt+0x11c28>
   17820:	ldr	r0, [r6, #28]
   17824:	bl	22f00 <__assert_fail@plt+0x11c28>
   17828:	ldr	r0, [r6]
   1782c:	bl	22f00 <__assert_fail@plt+0x11c28>
   17830:	ldr	r3, [r6, #32]
   17834:	cmp	r3, #0
   17838:	beq	17894 <__assert_fail@plt+0x65bc>
   1783c:	mov	r7, #0
   17840:	mov	r8, r7
   17844:	ldr	r3, [r6, #32]
   17848:	add	r5, r3, r7
   1784c:	ldr	r3, [r3, r7]
   17850:	cmp	r3, #0
   17854:	ble	17878 <__assert_fail@plt+0x65a0>
   17858:	mov	r4, #0
   1785c:	ldr	r3, [r5, #8]
   17860:	ldr	r0, [r3, r4, lsl #2]
   17864:	bl	1738c <__assert_fail@plt+0x60b4>
   17868:	add	r4, r4, #1
   1786c:	ldr	r3, [r5]
   17870:	cmp	r3, r4
   17874:	bgt	1785c <__assert_fail@plt+0x6584>
   17878:	ldr	r0, [r5, #8]
   1787c:	bl	22f00 <__assert_fail@plt+0x11c28>
   17880:	add	r8, r8, #1
   17884:	add	r7, r7, #12
   17888:	ldr	r3, [r6, #68]	; 0x44
   1788c:	cmp	r3, r8
   17890:	bcs	17844 <__assert_fail@plt+0x656c>
   17894:	ldr	r0, [r6, #32]
   17898:	bl	22f00 <__assert_fail@plt+0x11c28>
   1789c:	ldr	r0, [r6, #60]	; 0x3c
   178a0:	ldr	r3, [pc, #28]	; 178c4 <__assert_fail@plt+0x65ec>
   178a4:	cmp	r0, r3
   178a8:	beq	178b0 <__assert_fail@plt+0x65d8>
   178ac:	bl	22f00 <__assert_fail@plt+0x11c28>
   178b0:	ldr	r0, [r6, #132]	; 0x84
   178b4:	bl	22f00 <__assert_fail@plt+0x11c28>
   178b8:	mov	r0, r6
   178bc:	bl	22f00 <__assert_fail@plt+0x11c28>
   178c0:	pop	{r4, r5, r6, r7, r8, pc}
   178c4:			; <UNDEFINED> instruction: 0x000245b0
   178c8:	push	{r4, r5, r6, r7, r8, lr}
   178cc:	mov	r8, r0
   178d0:	ldr	r3, [r0, #124]	; 0x7c
   178d4:	cmp	r3, #0
   178d8:	ble	17964 <__assert_fail@plt+0x668c>
   178dc:	mov	r7, #0
   178e0:	b	178fc <__assert_fail@plt+0x6624>
   178e4:	mov	r0, r6
   178e8:	bl	22f00 <__assert_fail@plt+0x11c28>
   178ec:	add	r7, r7, #1
   178f0:	ldr	r3, [r8, #124]	; 0x7c
   178f4:	cmp	r3, r7
   178f8:	ble	17964 <__assert_fail@plt+0x668c>
   178fc:	ldr	r3, [r8, #132]	; 0x84
   17900:	ldr	r6, [r3, r7, lsl #2]
   17904:	ldr	r3, [r6, #16]
   17908:	cmp	r3, #0
   1790c:	ble	1793c <__assert_fail@plt+0x6664>
   17910:	mov	r4, #0
   17914:	ldr	r3, [r6, #20]
   17918:	ldr	r5, [r3, r4, lsl #2]
   1791c:	ldr	r0, [r5, #16]
   17920:	bl	22f00 <__assert_fail@plt+0x11c28>
   17924:	mov	r0, r5
   17928:	bl	22f00 <__assert_fail@plt+0x11c28>
   1792c:	add	r4, r4, #1
   17930:	ldr	r3, [r6, #16]
   17934:	cmp	r3, r4
   17938:	bgt	17914 <__assert_fail@plt+0x663c>
   1793c:	ldr	r0, [r6, #20]
   17940:	bl	22f00 <__assert_fail@plt+0x11c28>
   17944:	ldr	r3, [r6, #8]
   17948:	cmp	r3, #0
   1794c:	beq	178e4 <__assert_fail@plt+0x660c>
   17950:	ldr	r0, [r3, #8]
   17954:	bl	22f00 <__assert_fail@plt+0x11c28>
   17958:	ldr	r0, [r6, #8]
   1795c:	bl	22f00 <__assert_fail@plt+0x11c28>
   17960:	b	178e4 <__assert_fail@plt+0x660c>
   17964:	mov	r3, #0
   17968:	str	r3, [r8, #124]	; 0x7c
   1796c:	str	r3, [r8, #108]	; 0x6c
   17970:	pop	{r4, r5, r6, r7, r8, pc}
   17974:	push	{r4, r5, r6, lr}
   17978:	mov	r4, r0
   1797c:	ldr	r0, [r0, #8]
   17980:	add	r5, r4, #12
   17984:	cmp	r0, r5
   17988:	beq	17990 <__assert_fail@plt+0x66b8>
   1798c:	bl	22f00 <__assert_fail@plt+0x11c28>
   17990:	mov	r3, #0
   17994:	str	r3, [r4]
   17998:	mov	r3, #16
   1799c:	str	r3, [r4, #4]
   179a0:	str	r5, [r4, #8]
   179a4:	pop	{r4, r5, r6, pc}
   179a8:	push	{r4, r5, r6, lr}
   179ac:	subs	r5, r0, #0
   179b0:	beq	17a04 <__assert_fail@plt+0x672c>
   179b4:	ldr	r3, [r5]
   179b8:	cmp	r3, #0
   179bc:	ble	179fc <__assert_fail@plt+0x6724>
   179c0:	mov	r4, #0
   179c4:	mov	r6, r4
   179c8:	ldr	r3, [r5, #8]
   179cc:	add	r3, r3, r4
   179d0:	ldr	r0, [r3, #20]
   179d4:	bl	22f00 <__assert_fail@plt+0x11c28>
   179d8:	ldr	r3, [r5, #8]
   179dc:	add	r3, r3, r4
   179e0:	ldr	r0, [r3, #8]
   179e4:	bl	22f00 <__assert_fail@plt+0x11c28>
   179e8:	add	r6, r6, #1
   179ec:	add	r4, r4, #24
   179f0:	ldr	r3, [r5]
   179f4:	cmp	r3, r6
   179f8:	bgt	179c8 <__assert_fail@plt+0x66f0>
   179fc:	ldr	r0, [r5, #8]
   17a00:	bl	22f00 <__assert_fail@plt+0x11c28>
   17a04:	mov	r0, #0
   17a08:	pop	{r4, r5, r6, pc}
   17a0c:	push	{r4, r5, r6, lr}
   17a10:	ldr	r2, [r1, #28]
   17a14:	ldrb	r3, [r1, #24]
   17a18:	sub	r3, r3, #2
   17a1c:	cmp	r3, #14
   17a20:	ldrls	pc, [pc, r3, lsl #2]
   17a24:	b	17b60 <__assert_fail@plt+0x6888>
   17a28:	andeq	r7, r1, r8, ror fp
   17a2c:	andeq	r7, r1, r0, ror #22
   17a30:	andeq	r7, r1, r0, lsr #22
   17a34:	andeq	r7, r1, r0, ror #22
   17a38:	andeq	r7, r1, r0, ror #22
   17a3c:	andeq	r7, r1, r0, ror #22
   17a40:	andeq	r7, r1, r4, lsl #22
   17a44:	andeq	r7, r1, r4, lsl #22
   17a48:	andeq	r7, r1, r4, ror #20
   17a4c:	andeq	r7, r1, r4, ror #20
   17a50:	andeq	r7, r1, r4, lsl #22
   17a54:	andeq	r7, r1, r0, ror #22
   17a58:	andeq	r7, r1, r0, ror #22
   17a5c:	andeq	r7, r1, r0, ror #22
   17a60:	andeq	r7, r1, r8, ror fp
   17a64:	ldrb	r3, [r0, #88]	; 0x58
   17a68:	orr	r3, r3, #1
   17a6c:	strb	r3, [r0, #88]	; 0x58
   17a70:	ldr	r3, [r1, #4]
   17a74:	cmp	r3, #0
   17a78:	ldrne	r3, [r3, #12]
   17a7c:	ldreq	r3, [r1, #16]
   17a80:	ldr	r4, [r3, #28]
   17a84:	ldr	r3, [r1, #8]
   17a88:	cmp	r3, #0
   17a8c:	ldrne	r3, [r3, #12]
   17a90:	ldreq	r3, [r1, #16]
   17a94:	ldr	r5, [r3, #28]
   17a98:	add	r2, r2, r2, lsl #1
   17a9c:	lsl	r2, r2, #2
   17aa0:	ldr	r3, [r0, #20]
   17aa4:	add	r6, r3, r2
   17aa8:	mov	r1, #2
   17aac:	str	r1, [r3, r2]
   17ab0:	mov	r0, #8
   17ab4:	bl	22d3c <__assert_fail@plt+0x11a64>
   17ab8:	str	r0, [r6, #8]
   17abc:	cmp	r0, #0
   17ac0:	beq	17b80 <__assert_fail@plt+0x68a8>
   17ac4:	cmp	r4, r5
   17ac8:	beq	17af0 <__assert_fail@plt+0x6818>
   17acc:	mov	r3, #2
   17ad0:	str	r3, [r6, #4]
   17ad4:	cmp	r4, r5
   17ad8:	strlt	r4, [r0]
   17adc:	strlt	r5, [r0, #4]
   17ae0:	strge	r5, [r0]
   17ae4:	strge	r4, [r0, #4]
   17ae8:	mov	r0, #0
   17aec:	pop	{r4, r5, r6, pc}
   17af0:	mov	r3, #1
   17af4:	str	r3, [r6, #4]
   17af8:	str	r4, [r0]
   17afc:	mov	r0, #0
   17b00:	pop	{r4, r5, r6, pc}
   17b04:	ldr	r1, [r1, #16]
   17b08:	add	r2, r2, r2, lsl #1
   17b0c:	ldr	r0, [r0, #20]
   17b10:	ldr	r1, [r1, #28]
   17b14:	add	r0, r0, r2, lsl #2
   17b18:	bl	15760 <__assert_fail@plt+0x4488>
   17b1c:	pop	{r4, r5, r6, pc}
   17b20:	ldr	r3, [r1, #16]
   17b24:	ldr	ip, [r3, #28]
   17b28:	ldr	r3, [r0, #12]
   17b2c:	str	ip, [r3, r2, lsl #2]
   17b30:	ldrb	r3, [r1, #24]
   17b34:	cmp	r3, #4
   17b38:	beq	17b44 <__assert_fail@plt+0x686c>
   17b3c:	mov	r0, #0
   17b40:	pop	{r4, r5, r6, pc}
   17b44:	ldr	r1, [r0, #12]
   17b48:	add	ip, r2, r2, lsl #1
   17b4c:	ldr	r0, [r0, #20]
   17b50:	ldr	r1, [r1, r2, lsl #2]
   17b54:	add	r0, r0, ip, lsl #2
   17b58:	bl	15760 <__assert_fail@plt+0x4488>
   17b5c:	pop	{r4, r5, r6, pc}
   17b60:	ldr	r3, [r1, #16]
   17b64:	ldr	r1, [r3, #28]
   17b68:	ldr	r3, [r0, #12]
   17b6c:	str	r1, [r3, r2, lsl #2]
   17b70:	mov	r0, #0
   17b74:	pop	{r4, r5, r6, pc}
   17b78:	mov	r0, #0
   17b7c:	pop	{r4, r5, r6, pc}
   17b80:	mov	r0, #12
   17b84:	pop	{r4, r5, r6, pc}
   17b88:	push	{r4, r5, r6, lr}
   17b8c:	mov	r4, r0
   17b90:	mov	r5, r1
   17b94:	ldr	r1, [r0]
   17b98:	cmp	r1, #0
   17b9c:	beq	17bc8 <__assert_fail@plt+0x68f0>
   17ba0:	ldr	r3, [r0, #4]
   17ba4:	cmp	r3, #0
   17ba8:	bne	17bdc <__assert_fail@plt+0x6904>
   17bac:	ldr	r3, [r0, #8]
   17bb0:	str	r5, [r3]
   17bb4:	ldr	r3, [r0, #4]
   17bb8:	add	r3, r3, #1
   17bbc:	str	r3, [r0, #4]
   17bc0:	mov	r0, #1
   17bc4:	pop	{r4, r5, r6, pc}
   17bc8:	mov	r1, r5
   17bcc:	bl	15760 <__assert_fail@plt+0x4488>
   17bd0:	clz	r0, r0
   17bd4:	lsr	r0, r0, #5
   17bd8:	pop	{r4, r5, r6, pc}
   17bdc:	cmp	r1, r3
   17be0:	beq	17c3c <__assert_fail@plt+0x6964>
   17be4:	ldr	r1, [r4, #8]
   17be8:	ldr	r3, [r1]
   17bec:	cmp	r5, r3
   17bf0:	bge	17c60 <__assert_fail@plt+0x6988>
   17bf4:	ldr	r3, [r4, #4]
   17bf8:	cmp	r3, #0
   17bfc:	ble	17c20 <__assert_fail@plt+0x6948>
   17c00:	lsl	r2, r3, #2
   17c04:	ldr	r1, [r4, #8]
   17c08:	add	r0, r1, r2
   17c0c:	ldr	r0, [r0, #-4]
   17c10:	str	r0, [r1, r2]
   17c14:	sub	r2, r2, #4
   17c18:	subs	r3, r3, #1
   17c1c:	bne	17c04 <__assert_fail@plt+0x692c>
   17c20:	ldr	r2, [r4, #8]
   17c24:	str	r5, [r2, r3, lsl #2]
   17c28:	ldr	r3, [r4, #4]
   17c2c:	add	r3, r3, #1
   17c30:	str	r3, [r4, #4]
   17c34:	mov	r0, #1
   17c38:	pop	{r4, r5, r6, pc}
   17c3c:	lsl	r3, r1, #1
   17c40:	str	r3, [r0]
   17c44:	lsl	r1, r1, #3
   17c48:	ldr	r0, [r0, #8]
   17c4c:	bl	22d6c <__assert_fail@plt+0x11a94>
   17c50:	cmp	r0, #0
   17c54:	beq	17ca0 <__assert_fail@plt+0x69c8>
   17c58:	str	r0, [r4, #8]
   17c5c:	b	17be4 <__assert_fail@plt+0x690c>
   17c60:	ldr	r3, [r4, #4]
   17c64:	sub	r0, r3, #-1073741823	; 0xc0000001
   17c68:	lsl	r2, r0, #2
   17c6c:	ldr	r0, [r1, r0, lsl #2]
   17c70:	cmp	r5, r0
   17c74:	bge	17c20 <__assert_fail@plt+0x6948>
   17c78:	add	r2, r2, #4
   17c7c:	str	r0, [r1, r2]
   17c80:	sub	r3, r3, #1
   17c84:	ldr	r1, [r4, #8]
   17c88:	add	r0, r1, r2
   17c8c:	ldr	r0, [r0, #-8]
   17c90:	sub	r2, r2, #4
   17c94:	cmp	r5, r0
   17c98:	blt	17c7c <__assert_fail@plt+0x69a4>
   17c9c:	b	17c20 <__assert_fail@plt+0x6948>
   17ca0:	mov	r0, #0
   17ca4:	pop	{r4, r5, r6, pc}
   17ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17cac:	sub	sp, sp, #20
   17cb0:	mov	r4, r0
   17cb4:	mov	r5, r1
   17cb8:	mov	r6, r2
   17cbc:	mov	r9, r3
   17cc0:	ldr	r7, [sp, #56]	; 0x38
   17cc4:	mov	r8, #0
   17cc8:	b	17e9c <__assert_fail@plt+0x6bc4>
   17ccc:	lsl	fp, r5, #2
   17cd0:	ldr	r3, [r4, #12]
   17cd4:	ldr	r5, [r3, r5, lsl #2]
   17cd8:	str	r6, [sp, #12]
   17cdc:	add	r6, r6, r6, lsl #1
   17ce0:	lsl	sl, r6, #2
   17ce4:	ldr	r3, [r4, #20]
   17ce8:	add	r3, r3, sl
   17cec:	str	r8, [r3, #4]
   17cf0:	mov	r2, r7
   17cf4:	mov	r1, r5
   17cf8:	mov	r0, r4
   17cfc:	bl	172e4 <__assert_fail@plt+0x600c>
   17d00:	mov	r6, r0
   17d04:	cmn	r0, #1
   17d08:	beq	17f8c <__assert_fail@plt+0x6cb4>
   17d0c:	ldr	r3, [r4, #12]
   17d10:	ldr	r2, [r3, fp]
   17d14:	ldr	r1, [sp, #12]
   17d18:	str	r2, [r3, r1, lsl #2]
   17d1c:	ldr	r0, [r4, #20]
   17d20:	mov	r1, r6
   17d24:	add	r0, r0, sl
   17d28:	bl	17b88 <__assert_fail@plt+0x68b0>
   17d2c:	cmp	r0, #0
   17d30:	bne	17e9c <__assert_fail@plt+0x6bc4>
   17d34:	mov	r0, #12
   17d38:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17d3c:	ldr	r3, [r4, #12]
   17d40:	ldr	r2, [r3, r5, lsl #2]
   17d44:	str	r2, [r3, r6, lsl #2]
   17d48:	mov	r0, #0
   17d4c:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17d50:	ldr	r2, [r2, #8]
   17d54:	ldr	fp, [r2]
   17d58:	add	sl, r6, r6, lsl #1
   17d5c:	lsl	sl, sl, #2
   17d60:	add	r3, r3, sl
   17d64:	str	r8, [r3, #4]
   17d68:	cmp	r5, r9
   17d6c:	movne	r3, #0
   17d70:	moveq	r3, #1
   17d74:	cmp	r5, r6
   17d78:	moveq	r3, #0
   17d7c:	cmp	r3, #0
   17d80:	bne	17dd4 <__assert_fail@plt+0x6afc>
   17d84:	ldr	r3, [r4]
   17d88:	add	ip, r3, ip
   17d8c:	ldr	r3, [ip, #4]
   17d90:	lsl	r3, r3, #14
   17d94:	orr	r7, r7, r3, lsr #22
   17d98:	mov	r2, r7
   17d9c:	mov	r1, fp
   17da0:	mov	r0, r4
   17da4:	bl	172e4 <__assert_fail@plt+0x600c>
   17da8:	mov	r6, r0
   17dac:	cmn	r0, #1
   17db0:	beq	17f94 <__assert_fail@plt+0x6cbc>
   17db4:	ldr	r0, [r4, #20]
   17db8:	mov	r1, r6
   17dbc:	add	r0, r0, sl
   17dc0:	bl	17b88 <__assert_fail@plt+0x68b0>
   17dc4:	cmp	r0, #0
   17dc8:	beq	17df4 <__assert_fail@plt+0x6b1c>
   17dcc:	mov	r5, fp
   17dd0:	b	17e9c <__assert_fail@plt+0x6bc4>
   17dd4:	ldr	r0, [r4, #20]
   17dd8:	mov	r1, fp
   17ddc:	add	r0, r0, sl
   17de0:	bl	17b88 <__assert_fail@plt+0x68b0>
   17de4:	cmp	r0, #0
   17de8:	moveq	r0, #12
   17dec:	movne	r0, #0
   17df0:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17df4:	mov	r0, #12
   17df8:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17dfc:	sub	r1, r1, #1
   17e00:	add	r3, r3, ip
   17e04:	add	r3, lr, r3
   17e08:	ldrb	r6, [r3, #6]
   17e0c:	cmp	r1, #0
   17e10:	movle	r0, #0
   17e14:	movgt	r0, #1
   17e18:	ands	r0, r0, r6, lsr #2
   17e1c:	beq	17f2c <__assert_fail@plt+0x6c54>
   17e20:	ldr	r0, [r2, #-4]!
   17e24:	cmp	r5, r0
   17e28:	bne	17dfc <__assert_fail@plt+0x6b24>
   17e2c:	ldr	r0, [r3, #4]
   17e30:	lsl	r0, r0, #14
   17e34:	cmp	r7, r0, lsr #22
   17e38:	bne	17dfc <__assert_fail@plt+0x6b24>
   17e3c:	cmn	r1, #1
   17e40:	beq	17f2c <__assert_fail@plt+0x6c54>
   17e44:	ldr	r0, [r4, #20]
   17e48:	add	r0, r0, fp
   17e4c:	bl	17b88 <__assert_fail@plt+0x68b0>
   17e50:	cmp	r0, #0
   17e54:	beq	17fac <__assert_fail@plt+0x6cd4>
   17e58:	ldr	r3, [r4, #20]
   17e5c:	add	sl, r3, sl
   17e60:	ldr	r3, [sl, #8]
   17e64:	ldr	r5, [r3, #4]
   17e68:	mov	r2, r7
   17e6c:	mov	r1, r5
   17e70:	mov	r0, r4
   17e74:	bl	172e4 <__assert_fail@plt+0x600c>
   17e78:	mov	r6, r0
   17e7c:	cmn	r0, #1
   17e80:	beq	17fb4 <__assert_fail@plt+0x6cdc>
   17e84:	ldr	r0, [r4, #20]
   17e88:	mov	r1, r6
   17e8c:	add	r0, r0, fp
   17e90:	bl	17b88 <__assert_fail@plt+0x68b0>
   17e94:	cmp	r0, #0
   17e98:	beq	17f84 <__assert_fail@plt+0x6cac>
   17e9c:	lsl	ip, r5, #3
   17ea0:	ldr	r3, [r4]
   17ea4:	add	r3, r3, ip
   17ea8:	ldrb	r3, [r3, #4]
   17eac:	cmp	r3, #4
   17eb0:	beq	17ccc <__assert_fail@plt+0x69f4>
   17eb4:	ldr	r3, [r4, #20]
   17eb8:	add	sl, r5, r5, lsl #1
   17ebc:	lsl	sl, sl, #2
   17ec0:	add	r2, r3, sl
   17ec4:	ldr	r1, [r2, #4]
   17ec8:	cmp	r1, #0
   17ecc:	beq	17d3c <__assert_fail@plt+0x6a64>
   17ed0:	cmp	r1, #1
   17ed4:	beq	17d50 <__assert_fail@plt+0x6a78>
   17ed8:	ldr	r2, [r2, #8]
   17edc:	ldr	r5, [r2]
   17ee0:	add	r6, r6, r6, lsl #1
   17ee4:	lsl	fp, r6, #2
   17ee8:	add	r3, r3, fp
   17eec:	str	r8, [r3, #4]
   17ef0:	ldr	ip, [r4, #8]
   17ef4:	sub	r1, ip, #1
   17ef8:	ldr	lr, [r4]
   17efc:	add	r3, lr, r1, lsl #3
   17f00:	ldrb	r0, [r3, #6]
   17f04:	cmp	r1, #0
   17f08:	movle	r2, #0
   17f0c:	movgt	r2, #1
   17f10:	ands	r2, r2, r0, lsr #2
   17f14:	beq	17f2c <__assert_fail@plt+0x6c54>
   17f18:	ldr	r2, [r4, #16]
   17f1c:	add	r2, r2, ip, lsl #2
   17f20:	rsb	ip, r3, ip, lsl #3
   17f24:	sub	ip, ip, #16
   17f28:	b	17e20 <__assert_fail@plt+0x6b48>
   17f2c:	mov	r2, r7
   17f30:	mov	r1, r5
   17f34:	mov	r0, r4
   17f38:	bl	172e4 <__assert_fail@plt+0x600c>
   17f3c:	mov	r6, r0
   17f40:	cmn	r0, #1
   17f44:	beq	17f9c <__assert_fail@plt+0x6cc4>
   17f48:	ldr	r0, [r4, #20]
   17f4c:	mov	r1, r6
   17f50:	add	r0, r0, fp
   17f54:	bl	17b88 <__assert_fail@plt+0x68b0>
   17f58:	cmp	r0, #0
   17f5c:	beq	17fa4 <__assert_fail@plt+0x6ccc>
   17f60:	str	r7, [sp]
   17f64:	mov	r3, r9
   17f68:	mov	r2, r6
   17f6c:	mov	r1, r5
   17f70:	mov	r0, r4
   17f74:	bl	17ca8 <__assert_fail@plt+0x69d0>
   17f78:	cmp	r0, #0
   17f7c:	beq	17e58 <__assert_fail@plt+0x6b80>
   17f80:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17f84:	mov	r0, #12
   17f88:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17f8c:	mov	r0, #12
   17f90:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17f94:	mov	r0, #12
   17f98:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17f9c:	mov	r0, #12
   17fa0:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17fa4:	mov	r0, #12
   17fa8:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17fac:	mov	r0, #12
   17fb0:	b	17fb8 <__assert_fail@plt+0x6ce0>
   17fb4:	mov	r0, #12
   17fb8:	add	sp, sp, #20
   17fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17fc0:	push	{r4, r5, r6, r7, r8, r9, lr}
   17fc4:	sub	sp, sp, #12
   17fc8:	mov	r6, r0
   17fcc:	mov	r7, r1
   17fd0:	mov	r4, r2
   17fd4:	mov	r9, r3
   17fd8:	ldr	r8, [sp, #40]	; 0x28
   17fdc:	b	18028 <__assert_fail@plt+0x6d50>
   17fe0:	mov	r1, r4
   17fe4:	mov	r0, r7
   17fe8:	bl	17b88 <__assert_fail@plt+0x68b0>
   17fec:	cmp	r0, #0
   17ff0:	beq	180b8 <__assert_fail@plt+0x6de0>
   17ff4:	add	r5, r5, r5, lsl #1
   17ff8:	lsl	r5, r5, #2
   17ffc:	ldr	r3, [r6, #20]
   18000:	add	r3, r3, r5
   18004:	ldr	r2, [r3, #4]
   18008:	cmp	r2, #0
   1800c:	beq	180c4 <__assert_fail@plt+0x6dec>
   18010:	cmp	r2, #2
   18014:	beq	18088 <__assert_fail@plt+0x6db0>
   18018:	ldr	r3, [r6, #20]
   1801c:	add	r5, r3, r5
   18020:	ldr	r3, [r5, #8]
   18024:	ldr	r4, [r3]
   18028:	mov	r1, r4
   1802c:	mov	r0, r7
   18030:	bl	147f4 <__assert_fail@plt+0x351c>
   18034:	cmp	r0, #0
   18038:	bne	180b0 <__assert_fail@plt+0x6dd8>
   1803c:	mov	r5, r4
   18040:	ldr	r3, [r6]
   18044:	add	r2, r3, r4, lsl #3
   18048:	ldrb	r2, [r2, #4]
   1804c:	cmp	r2, r8
   18050:	bne	17fe0 <__assert_fail@plt+0x6d08>
   18054:	ldr	r3, [r3, r4, lsl #3]
   18058:	cmp	r9, r3
   1805c:	bne	17fe0 <__assert_fail@plt+0x6d08>
   18060:	cmp	r2, #9
   18064:	movne	r0, #0
   18068:	bne	180bc <__assert_fail@plt+0x6de4>
   1806c:	mov	r1, r4
   18070:	mov	r0, r7
   18074:	bl	17b88 <__assert_fail@plt+0x68b0>
   18078:	cmp	r0, #0
   1807c:	moveq	r0, #12
   18080:	movne	r0, #0
   18084:	b	180bc <__assert_fail@plt+0x6de4>
   18088:	ldr	r3, [r3, #8]
   1808c:	ldr	r2, [r3, #4]
   18090:	str	r8, [sp]
   18094:	mov	r3, r9
   18098:	mov	r1, r7
   1809c:	mov	r0, r6
   180a0:	bl	17fc0 <__assert_fail@plt+0x6ce8>
   180a4:	cmp	r0, #0
   180a8:	beq	18018 <__assert_fail@plt+0x6d40>
   180ac:	b	180bc <__assert_fail@plt+0x6de4>
   180b0:	mov	r0, #0
   180b4:	b	180bc <__assert_fail@plt+0x6de4>
   180b8:	mov	r0, #12
   180bc:	add	sp, sp, #12
   180c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   180c4:	mov	r0, #0
   180c8:	b	180bc <__assert_fail@plt+0x6de4>
   180cc:	push	{r4, r5, r6, lr}
   180d0:	subs	r6, r1, #0
   180d4:	beq	18254 <__assert_fail@plt+0x6f7c>
   180d8:	ldr	r2, [r6, #4]
   180dc:	cmp	r2, #0
   180e0:	beq	1825c <__assert_fail@plt+0x6f84>
   180e4:	mov	r4, r0
   180e8:	ldr	r1, [r0]
   180ec:	ldr	r3, [r0, #4]
   180f0:	add	r0, r3, r2, lsl #1
   180f4:	cmp	r1, r0
   180f8:	blt	18158 <__assert_fail@plt+0x6e80>
   180fc:	cmp	r3, #0
   18100:	beq	1818c <__assert_fail@plt+0x6eb4>
   18104:	ldr	r2, [r6, #4]
   18108:	add	r5, r3, r2, lsl #1
   1810c:	sub	r2, r2, #1
   18110:	sub	r3, r3, #1
   18114:	cmp	r2, #0
   18118:	cmpge	r3, #0
   1811c:	blt	181b0 <__assert_fail@plt+0x6ed8>
   18120:	ldr	ip, [r4, #8]
   18124:	ldr	r0, [ip, r3, lsl #2]
   18128:	ldr	r1, [r6, #8]
   1812c:	ldr	r1, [r1, r2, lsl #2]
   18130:	cmp	r0, r1
   18134:	subeq	r2, r2, #1
   18138:	subeq	r3, r3, #1
   1813c:	beq	18114 <__assert_fail@plt+0x6e3c>
   18140:	cmp	r0, r1
   18144:	sublt	r5, r5, #1
   18148:	sublt	r2, r2, #1
   1814c:	strlt	r1, [ip, r5, lsl #2]
   18150:	subge	r3, r3, #1
   18154:	b	18114 <__assert_fail@plt+0x6e3c>
   18158:	add	r1, r2, r1
   1815c:	lsl	r5, r1, #1
   18160:	lsl	r1, r1, #3
   18164:	ldr	r0, [r4, #8]
   18168:	bl	22d6c <__assert_fail@plt+0x11a94>
   1816c:	cmp	r0, #0
   18170:	beq	18264 <__assert_fail@plt+0x6f8c>
   18174:	str	r0, [r4, #8]
   18178:	str	r5, [r4]
   1817c:	ldr	r3, [r4, #4]
   18180:	cmp	r3, #0
   18184:	bne	18104 <__assert_fail@plt+0x6e2c>
   18188:	b	18190 <__assert_fail@plt+0x6eb8>
   1818c:	ldr	r0, [r4, #8]
   18190:	ldr	r3, [r6, #4]
   18194:	str	r3, [r4, #4]
   18198:	ldr	r2, [r6, #4]
   1819c:	lsl	r2, r2, #2
   181a0:	ldr	r1, [r6, #8]
   181a4:	bl	11068 <memcpy@plt>
   181a8:	mov	r0, #0
   181ac:	pop	{r4, r5, r6, pc}
   181b0:	cmp	r2, #0
   181b4:	blt	181d4 <__assert_fail@plt+0x6efc>
   181b8:	add	r2, r2, #1
   181bc:	sub	r5, r5, r2
   181c0:	ldr	r0, [r4, #8]
   181c4:	lsl	r2, r2, #2
   181c8:	ldr	r1, [r6, #8]
   181cc:	add	r0, r0, r5, lsl #2
   181d0:	bl	11068 <memcpy@plt>
   181d4:	ldr	r3, [r4, #4]
   181d8:	ldr	r2, [r6, #4]
   181dc:	add	r2, r3, r2, lsl #1
   181e0:	sub	lr, r2, #1
   181e4:	subs	r2, r2, r5
   181e8:	beq	1826c <__assert_fail@plt+0x6f94>
   181ec:	sub	r1, r3, #1
   181f0:	add	r3, r3, r2
   181f4:	str	r3, [r4, #4]
   181f8:	b	1820c <__assert_fail@plt+0x6f34>
   181fc:	add	ip, r1, r2
   18200:	str	r0, [r3, ip, lsl #2]
   18204:	subs	r1, r1, #1
   18208:	bmi	1823c <__assert_fail@plt+0x6f64>
   1820c:	ldr	r3, [r4, #8]
   18210:	ldr	ip, [r3, lr, lsl #2]
   18214:	ldr	r0, [r3, r1, lsl #2]
   18218:	cmp	ip, r0
   1821c:	ble	181fc <__assert_fail@plt+0x6f24>
   18220:	sub	lr, lr, #1
   18224:	add	r0, r1, r2
   18228:	str	ip, [r3, r0, lsl #2]
   1822c:	subs	r2, r2, #1
   18230:	bne	1820c <__assert_fail@plt+0x6f34>
   18234:	mov	r0, #0
   18238:	pop	{r4, r5, r6, pc}
   1823c:	ldr	r0, [r4, #8]
   18240:	lsl	r2, r2, #2
   18244:	add	r1, r0, r5, lsl #2
   18248:	bl	11068 <memcpy@plt>
   1824c:	mov	r0, #0
   18250:	pop	{r4, r5, r6, pc}
   18254:	mov	r0, #0
   18258:	pop	{r4, r5, r6, pc}
   1825c:	mov	r0, #0
   18260:	pop	{r4, r5, r6, pc}
   18264:	mov	r0, #12
   18268:	pop	{r4, r5, r6, pc}
   1826c:	mov	r0, #0
   18270:	pop	{r4, r5, r6, pc}
   18274:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18278:	sub	sp, sp, #44	; 0x2c
   1827c:	mov	sl, r0
   18280:	mov	r5, r1
   18284:	mov	r4, r2
   18288:	str	r3, [sp, #12]
   1828c:	add	r8, r2, r2, lsl #1
   18290:	lsl	r8, r8, #2
   18294:	ldr	r3, [r1, #20]
   18298:	add	r3, r3, r8
   1829c:	ldr	r1, [r3, #4]
   182a0:	add	r1, r1, #1
   182a4:	add	r0, sp, #28
   182a8:	bl	157a4 <__assert_fail@plt+0x44cc>
   182ac:	subs	fp, r0, #0
   182b0:	bne	18478 <__assert_fail@plt+0x71a0>
   182b4:	mov	r9, r8
   182b8:	ldr	r3, [sp, #32]
   182bc:	add	r2, r3, #1
   182c0:	str	r2, [sp, #32]
   182c4:	ldr	r2, [sp, #36]	; 0x24
   182c8:	str	r4, [r2, r3, lsl #2]
   182cc:	ldr	r3, [r5, #24]
   182d0:	add	r3, r3, r8
   182d4:	mvn	r2, #0
   182d8:	str	r2, [r3, #4]
   182dc:	ldr	r2, [r5]
   182e0:	lsl	r6, r4, #3
   182e4:	add	r1, r2, r6
   182e8:	ldr	r0, [r1, #4]
   182ec:	ldr	r3, [pc, #424]	; 1849c <__assert_fail@plt+0x71c4>
   182f0:	and	r3, r3, r0
   182f4:	cmp	r3, #0
   182f8:	beq	18328 <__assert_fail@plt+0x7050>
   182fc:	ldr	r3, [r5, #20]
   18300:	add	r3, r3, r8
   18304:	ldr	r0, [r3, #4]
   18308:	cmp	r0, #0
   1830c:	beq	18484 <__assert_fail@plt+0x71ac>
   18310:	ldr	r3, [r3, #8]
   18314:	ldr	r3, [r3]
   18318:	add	r2, r2, r3, lsl #3
   1831c:	ldrb	r3, [r2, #6]
   18320:	tst	r3, #4
   18324:	beq	18364 <__assert_fail@plt+0x708c>
   18328:	ldr	r3, [r5]
   1832c:	add	r6, r3, r6
   18330:	ldrb	r3, [r6, #4]
   18334:	tst	r3, #8
   18338:	beq	18484 <__assert_fail@plt+0x71ac>
   1833c:	ldr	r3, [r5, #20]
   18340:	add	r3, r3, r8
   18344:	ldr	r2, [r3, #4]
   18348:	cmp	r2, #0
   1834c:	ble	18484 <__assert_fail@plt+0x71ac>
   18350:	mov	r2, #0
   18354:	str	r2, [sp, #8]
   18358:	mov	r6, r2
   1835c:	add	r7, sp, #16
   18360:	b	183d0 <__assert_fail@plt+0x70f8>
   18364:	ldr	r3, [r1, #4]
   18368:	lsl	r3, r3, #14
   1836c:	lsr	r3, r3, #22
   18370:	str	r3, [sp]
   18374:	mov	r3, r4
   18378:	mov	r2, r4
   1837c:	mov	r1, r4
   18380:	mov	r0, r5
   18384:	bl	17ca8 <__assert_fail@plt+0x69d0>
   18388:	cmp	r0, #0
   1838c:	beq	18328 <__assert_fail@plt+0x7050>
   18390:	mov	fp, r0
   18394:	b	18478 <__assert_fail@plt+0x71a0>
   18398:	mov	r3, #0
   1839c:	mov	r1, r5
   183a0:	mov	r0, r7
   183a4:	bl	18274 <__assert_fail@plt+0x6f9c>
   183a8:	cmp	r0, #0
   183ac:	beq	1840c <__assert_fail@plt+0x7134>
   183b0:	mov	fp, r0
   183b4:	b	18478 <__assert_fail@plt+0x71a0>
   183b8:	add	r6, r6, #1
   183bc:	ldr	r3, [r5, #20]
   183c0:	add	r3, r3, r9
   183c4:	ldr	r2, [r3, #4]
   183c8:	cmp	r2, r6
   183cc:	ble	18448 <__assert_fail@plt+0x7170>
   183d0:	ldr	r3, [r3, #8]
   183d4:	ldr	r2, [r3, r6, lsl #2]
   183d8:	add	r4, r2, r2, lsl #1
   183dc:	lsl	r4, r4, #2
   183e0:	ldr	r3, [r5, #24]
   183e4:	add	r3, r3, r4
   183e8:	ldr	r1, [r3, #4]
   183ec:	cmn	r1, #1
   183f0:	moveq	r3, #1
   183f4:	streq	r3, [sp, #8]
   183f8:	beq	183b8 <__assert_fail@plt+0x70e0>
   183fc:	cmp	r1, #0
   18400:	beq	18398 <__assert_fail@plt+0x70c0>
   18404:	ldm	r3, {r0, r1, r2}
   18408:	stm	r7, {r0, r1, r2}
   1840c:	mov	r1, r7
   18410:	add	r0, sp, #28
   18414:	bl	180cc <__assert_fail@plt+0x6df4>
   18418:	cmp	r0, #0
   1841c:	bne	183b0 <__assert_fail@plt+0x70d8>
   18420:	ldr	r3, [r5, #24]
   18424:	add	r4, r3, r4
   18428:	ldr	r3, [r4, #4]
   1842c:	cmp	r3, #0
   18430:	bne	183b8 <__assert_fail@plt+0x70e0>
   18434:	ldr	r0, [sp, #24]
   18438:	bl	22f00 <__assert_fail@plt+0x11c28>
   1843c:	mov	r3, #1
   18440:	str	r3, [sp, #8]
   18444:	b	183b8 <__assert_fail@plt+0x70e0>
   18448:	ldr	r3, [sp, #12]
   1844c:	eor	r3, r3, #1
   18450:	ldr	r2, [sp, #8]
   18454:	tst	r2, r3
   18458:	beq	18484 <__assert_fail@plt+0x71ac>
   1845c:	ldr	r3, [r5, #24]
   18460:	add	r8, r3, r8
   18464:	mov	r3, #0
   18468:	str	r3, [r8, #4]
   1846c:	add	r3, sp, #40	; 0x28
   18470:	ldmdb	r3, {r0, r1, r2}
   18474:	stm	sl, {r0, r1, r2}
   18478:	mov	r0, fp
   1847c:	add	sp, sp, #44	; 0x2c
   18480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18484:	ldr	r3, [r5, #24]
   18488:	add	r8, r3, r8
   1848c:	add	r3, sp, #40	; 0x28
   18490:	ldmdb	r3, {r0, r1, r2}
   18494:	stm	r8, {r0, r1, r2}
   18498:	b	1846c <__assert_fail@plt+0x7194>
   1849c:	andeq	pc, r3, r0, lsl #30
   184a0:	push	{r4, r5, r6, lr}
   184a4:	mov	r5, r0
   184a8:	cmp	r1, #0
   184ac:	blt	184f0 <__assert_fail@plt+0x7218>
   184b0:	ldr	r3, [r0, #48]	; 0x30
   184b4:	cmp	r1, r3
   184b8:	beq	184f8 <__assert_fail@plt+0x7220>
   184bc:	ldr	r3, [r0, #80]	; 0x50
   184c0:	cmp	r3, #1
   184c4:	ble	18564 <__assert_fail@plt+0x728c>
   184c8:	ldr	r3, [r0, #8]
   184cc:	add	r3, r3, r1, lsl #2
   184d0:	ldr	r4, [r3], #-4
   184d4:	cmn	r4, #1
   184d8:	bne	1850c <__assert_fail@plt+0x7234>
   184dc:	sub	r1, r1, #1
   184e0:	cmn	r1, #1
   184e4:	bne	184d0 <__assert_fail@plt+0x71f8>
   184e8:	ldr	r0, [r5, #60]	; 0x3c
   184ec:	pop	{r4, r5, r6, pc}
   184f0:	ldr	r0, [r0, #60]	; 0x3c
   184f4:	pop	{r4, r5, r6, pc}
   184f8:	and	r2, r2, #2
   184fc:	cmp	r2, #0
   18500:	movne	r0, #8
   18504:	moveq	r0, #10
   18508:	pop	{r4, r5, r6, pc}
   1850c:	ldrb	r3, [r5, #78]	; 0x4e
   18510:	cmp	r3, #0
   18514:	bne	18528 <__assert_fail@plt+0x7250>
   18518:	cmp	r4, #10
   1851c:	beq	18550 <__assert_fail@plt+0x7278>
   18520:	mov	r0, #0
   18524:	pop	{r4, r5, r6, pc}
   18528:	mov	r0, r4
   1852c:	bl	111dc <iswalnum@plt>
   18530:	adds	r3, r0, #0
   18534:	movne	r3, #1
   18538:	cmp	r4, #95	; 0x5f
   1853c:	orreq	r3, r3, #1
   18540:	cmp	r3, #0
   18544:	beq	18518 <__assert_fail@plt+0x7240>
   18548:	mov	r0, #1
   1854c:	pop	{r4, r5, r6, pc}
   18550:	ldrb	r0, [r5, #77]	; 0x4d
   18554:	cmp	r0, #0
   18558:	movne	r0, #2
   1855c:	moveq	r0, #0
   18560:	pop	{r4, r5, r6, pc}
   18564:	ldr	r3, [r0, #4]
   18568:	ldrb	r2, [r3, r1]
   1856c:	asr	r0, r2, #5
   18570:	ldr	r3, [r5, #68]	; 0x44
   18574:	and	r1, r2, #31
   18578:	ldr	r3, [r3, r0, lsl #2]
   1857c:	lsr	r3, r3, r1
   18580:	tst	r3, #1
   18584:	bne	185ac <__assert_fail@plt+0x72d4>
   18588:	cmp	r2, #10
   1858c:	beq	18598 <__assert_fail@plt+0x72c0>
   18590:	mov	r0, #0
   18594:	pop	{r4, r5, r6, pc}
   18598:	ldrb	r0, [r5, #77]	; 0x4d
   1859c:	cmp	r0, #0
   185a0:	movne	r0, #2
   185a4:	moveq	r0, #0
   185a8:	pop	{r4, r5, r6, pc}
   185ac:	mov	r0, #1
   185b0:	pop	{r4, r5, r6, pc}
   185b4:	push	{r4, lr}
   185b8:	ldr	r3, [r0, #4]
   185bc:	ldrb	ip, [r3, r2]
   185c0:	ldrb	r3, [r1, #4]
   185c4:	sub	r3, r3, #1
   185c8:	cmp	r3, #6
   185cc:	ldrls	pc, [pc, r3, lsl #2]
   185d0:	b	186f0 <__assert_fail@plt+0x7418>
   185d4:	strdeq	r8, [r1], -r0
   185d8:	strdeq	r8, [r1], -r0
   185dc:	andeq	r8, r1, r4, lsl #12
   185e0:	strdeq	r8, [r1], -r0
   185e4:	andeq	r8, r1, ip, ror r6
   185e8:	strdeq	r8, [r1], -r0
   185ec:	andeq	r8, r1, r4, ror r6
   185f0:	ldrb	r3, [r1]
   185f4:	cmp	r3, ip
   185f8:	beq	18620 <__assert_fail@plt+0x7348>
   185fc:	mov	r0, #0
   18600:	pop	{r4, pc}
   18604:	lsr	lr, ip, #5
   18608:	ldr	r3, [r1]
   1860c:	and	ip, ip, #31
   18610:	ldr	r3, [r3, lr, lsl #2]
   18614:	lsr	ip, r3, ip
   18618:	tst	ip, #1
   1861c:	beq	186f8 <__assert_fail@plt+0x7420>
   18620:	ldr	ip, [r1, #4]
   18624:	ldr	r3, [pc, #260]	; 18730 <__assert_fail@plt+0x7458>
   18628:	and	r3, r3, ip
   1862c:	cmp	r3, #0
   18630:	beq	18708 <__assert_fail@plt+0x7430>
   18634:	mov	r3, r2
   18638:	mov	r4, r1
   1863c:	ldr	r2, [r0, #88]	; 0x58
   18640:	mov	r1, r3
   18644:	bl	184a0 <__assert_fail@plt+0x71c8>
   18648:	ldr	r3, [r4, #4]
   1864c:	lsl	r3, r3, #14
   18650:	lsr	r3, r3, #22
   18654:	tst	r3, #4
   18658:	beq	186bc <__assert_fail@plt+0x73e4>
   1865c:	tst	r0, #1
   18660:	beq	18710 <__assert_fail@plt+0x7438>
   18664:	tst	r3, #8
   18668:	beq	186cc <__assert_fail@plt+0x73f4>
   1866c:	mov	r0, #0
   18670:	pop	{r4, pc}
   18674:	tst	ip, #128	; 0x80
   18678:	bne	18700 <__assert_fail@plt+0x7428>
   1867c:	cmp	ip, #10
   18680:	beq	186a4 <__assert_fail@plt+0x73cc>
   18684:	cmp	ip, #0
   18688:	bne	18620 <__assert_fail@plt+0x7348>
   1868c:	ldr	r3, [r0, #84]	; 0x54
   18690:	ldr	r3, [r3, #128]	; 0x80
   18694:	tst	r3, #128	; 0x80
   18698:	beq	18620 <__assert_fail@plt+0x7348>
   1869c:	mov	r0, #0
   186a0:	pop	{r4, pc}
   186a4:	ldr	r3, [r0, #84]	; 0x54
   186a8:	ldr	r3, [r3, #128]	; 0x80
   186ac:	tst	r3, #64	; 0x40
   186b0:	bne	18620 <__assert_fail@plt+0x7348>
   186b4:	mov	r0, #0
   186b8:	pop	{r4, pc}
   186bc:	tst	r3, #8
   186c0:	beq	186cc <__assert_fail@plt+0x73f4>
   186c4:	tst	r0, #1
   186c8:	bne	18718 <__assert_fail@plt+0x7440>
   186cc:	tst	r3, #32
   186d0:	beq	186dc <__assert_fail@plt+0x7404>
   186d4:	tst	r0, #2
   186d8:	beq	18720 <__assert_fail@plt+0x7448>
   186dc:	tst	r3, #128	; 0x80
   186e0:	beq	18728 <__assert_fail@plt+0x7450>
   186e4:	lsr	r0, r0, #3
   186e8:	and	r0, r0, #1
   186ec:	pop	{r4, pc}
   186f0:	mov	r0, #0
   186f4:	pop	{r4, pc}
   186f8:	mov	r0, #0
   186fc:	pop	{r4, pc}
   18700:	mov	r0, #0
   18704:	pop	{r4, pc}
   18708:	mov	r0, #1
   1870c:	pop	{r4, pc}
   18710:	mov	r0, #0
   18714:	pop	{r4, pc}
   18718:	mov	r0, #0
   1871c:	pop	{r4, pc}
   18720:	mov	r0, #0
   18724:	pop	{r4, pc}
   18728:	mov	r0, #1
   1872c:	pop	{r4, pc}
   18730:	andeq	pc, r3, r0, lsl #30
   18734:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18738:	ldr	r7, [r0, #84]	; 0x54
   1873c:	ldr	r3, [r1, #4]
   18740:	cmp	r3, #0
   18744:	ble	1882c <__assert_fail@plt+0x7554>
   18748:	mov	r9, r2
   1874c:	mov	r6, r1
   18750:	mov	r8, r0
   18754:	mov	r4, #0
   18758:	b	1878c <__assert_fail@plt+0x74b4>
   1875c:	lsl	sl, r1, #1
   18760:	lsl	r1, r1, #3
   18764:	bl	22d6c <__assert_fail@plt+0x11a94>
   18768:	cmp	r0, #0
   1876c:	beq	18834 <__assert_fail@plt+0x755c>
   18770:	str	r0, [r8, #132]	; 0x84
   18774:	str	sl, [r8, #128]	; 0x80
   18778:	b	187d8 <__assert_fail@plt+0x7500>
   1877c:	add	r4, r4, #1
   18780:	ldr	r3, [r6, #4]
   18784:	cmp	r3, r4
   18788:	ble	18824 <__assert_fail@plt+0x754c>
   1878c:	ldr	r3, [r6, #8]
   18790:	ldr	r5, [r3, r4, lsl #2]
   18794:	ldr	r3, [r7]
   18798:	add	r2, r3, r5, lsl #3
   1879c:	ldrb	r2, [r2, #4]
   187a0:	cmp	r2, #8
   187a4:	bne	1877c <__assert_fail@plt+0x74a4>
   187a8:	ldr	r3, [r3, r5, lsl #3]
   187ac:	cmp	r3, #31
   187b0:	bgt	1877c <__assert_fail@plt+0x74a4>
   187b4:	ldr	r2, [r7, #80]	; 0x50
   187b8:	lsr	r3, r2, r3
   187bc:	tst	r3, #1
   187c0:	beq	1877c <__assert_fail@plt+0x74a4>
   187c4:	ldr	r0, [r8, #132]	; 0x84
   187c8:	ldr	r1, [r8, #128]	; 0x80
   187cc:	ldr	r3, [r8, #124]	; 0x7c
   187d0:	cmp	r1, r3
   187d4:	beq	1875c <__assert_fail@plt+0x7484>
   187d8:	ldr	fp, [r8, #124]	; 0x7c
   187dc:	ldr	sl, [r8, #132]	; 0x84
   187e0:	mov	r1, #24
   187e4:	mov	r0, #1
   187e8:	bl	22cec <__assert_fail@plt+0x11a14>
   187ec:	str	r0, [sl, fp, lsl #2]
   187f0:	ldr	r2, [r8, #124]	; 0x7c
   187f4:	ldr	r3, [r8, #132]	; 0x84
   187f8:	ldr	r3, [r3, r2, lsl #2]
   187fc:	cmp	r3, #0
   18800:	beq	18834 <__assert_fail@plt+0x755c>
   18804:	str	r5, [r3, #4]
   18808:	ldr	r2, [r8, #132]	; 0x84
   1880c:	ldr	r3, [r8, #124]	; 0x7c
   18810:	add	r1, r3, #1
   18814:	str	r1, [r8, #124]	; 0x7c
   18818:	ldr	r3, [r2, r3, lsl #2]
   1881c:	str	r9, [r3]
   18820:	b	1877c <__assert_fail@plt+0x74a4>
   18824:	mov	r0, #0
   18828:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1882c:	mov	r0, #0
   18830:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18834:	mov	r0, #12
   18838:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1883c:	push	{r4, r5, r6, lr}
   18840:	mov	r4, r0
   18844:	mov	r5, r1
   18848:	ldr	r6, [r0, #104]	; 0x68
   1884c:	ldr	r3, [r0, #36]	; 0x24
   18850:	cmp	r3, r1
   18854:	bgt	18864 <__assert_fail@plt+0x758c>
   18858:	ldr	r2, [r0, #48]	; 0x30
   1885c:	cmp	r3, r2
   18860:	blt	1887c <__assert_fail@plt+0x75a4>
   18864:	ldr	r3, [r4, #28]
   18868:	cmp	r5, r3
   1886c:	blt	18890 <__assert_fail@plt+0x75b8>
   18870:	ldr	r2, [r4, #48]	; 0x30
   18874:	cmp	r3, r2
   18878:	bge	18890 <__assert_fail@plt+0x75b8>
   1887c:	add	r1, r5, #1
   18880:	mov	r0, r4
   18884:	bl	16484 <__assert_fail@plt+0x51ac>
   18888:	cmp	r0, #0
   1888c:	popne	{r4, r5, r6, pc}
   18890:	cmp	r6, r5
   18894:	bge	188c0 <__assert_fail@plt+0x75e8>
   18898:	sub	r2, r5, r6
   1889c:	add	r6, r6, #1
   188a0:	ldr	r0, [r4, #100]	; 0x64
   188a4:	lsl	r2, r2, #2
   188a8:	mov	r1, #0
   188ac:	add	r0, r0, r6, lsl #2
   188b0:	bl	111f4 <memset@plt>
   188b4:	str	r5, [r4, #104]	; 0x68
   188b8:	mov	r0, #0
   188bc:	pop	{r4, r5, r6, pc}
   188c0:	mov	r0, #0
   188c4:	pop	{r4, r5, r6, pc}
   188c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188cc:	sub	sp, sp, #28
   188d0:	mov	r7, r0
   188d4:	mov	r8, r1
   188d8:	mov	r5, r2
   188dc:	mov	r4, r3
   188e0:	ldr	r1, [r1, #4]
   188e4:	add	r0, sp, #12
   188e8:	bl	157a4 <__assert_fail@plt+0x44cc>
   188ec:	subs	r9, r0, #0
   188f0:	bne	189e8 <__assert_fail@plt+0x7710>
   188f4:	ldr	r3, [r8, #4]
   188f8:	cmp	r3, #0
   188fc:	ble	189cc <__assert_fail@plt+0x76f4>
   18900:	mov	r6, #0
   18904:	b	18968 <__assert_fail@plt+0x7690>
   18908:	add	r3, r3, #1
   1890c:	cmp	fp, r3
   18910:	beq	1899c <__assert_fail@plt+0x76c4>
   18914:	ldr	r0, [ip, #4]!
   18918:	add	lr, sl, r0, lsl #3
   1891c:	ldrb	lr, [lr, #4]
   18920:	cmp	r4, lr
   18924:	bne	18908 <__assert_fail@plt+0x7630>
   18928:	ldr	lr, [sl, r0, lsl #3]
   1892c:	cmp	r5, lr
   18930:	bne	18908 <__assert_fail@plt+0x7630>
   18934:	cmn	r0, #1
   18938:	beq	1899c <__assert_fail@plt+0x76c4>
   1893c:	str	r4, [sp]
   18940:	mov	r3, r5
   18944:	add	r1, sp, #12
   18948:	mov	r0, r7
   1894c:	bl	17fc0 <__assert_fail@plt+0x6ce8>
   18950:	subs	sl, r0, #0
   18954:	bne	189b8 <__assert_fail@plt+0x76e0>
   18958:	add	r6, r6, #1
   1895c:	ldr	r3, [r8, #4]
   18960:	cmp	r3, r6
   18964:	ble	189cc <__assert_fail@plt+0x76f4>
   18968:	ldr	r3, [r8, #8]
   1896c:	ldr	r2, [r3, r6, lsl #2]
   18970:	add	r3, r2, r2, lsl #1
   18974:	ldr	r1, [r7, #24]
   18978:	add	r1, r1, r3, lsl #2
   1897c:	ldr	fp, [r1, #4]
   18980:	cmp	fp, #0
   18984:	ble	1899c <__assert_fail@plt+0x76c4>
   18988:	ldr	sl, [r7]
   1898c:	ldr	ip, [r1, #8]
   18990:	sub	ip, ip, #4
   18994:	mov	r3, #0
   18998:	b	18914 <__assert_fail@plt+0x763c>
   1899c:	add	r0, sp, #12
   189a0:	bl	180cc <__assert_fail@plt+0x6df4>
   189a4:	subs	sl, r0, #0
   189a8:	beq	18958 <__assert_fail@plt+0x7680>
   189ac:	ldr	r0, [sp, #20]
   189b0:	bl	22f00 <__assert_fail@plt+0x11c28>
   189b4:	b	189c0 <__assert_fail@plt+0x76e8>
   189b8:	ldr	r0, [sp, #20]
   189bc:	bl	22f00 <__assert_fail@plt+0x11c28>
   189c0:	mov	r0, sl
   189c4:	add	sp, sp, #28
   189c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   189cc:	ldr	r0, [r8, #8]
   189d0:	bl	22f00 <__assert_fail@plt+0x11c28>
   189d4:	add	r3, sp, #24
   189d8:	ldmdb	r3, {r0, r1, r2}
   189dc:	stm	r8, {r0, r1, r2}
   189e0:	mov	sl, r9
   189e4:	b	189c0 <__assert_fail@plt+0x76e8>
   189e8:	mov	sl, r9
   189ec:	b	189c0 <__assert_fail@plt+0x76e8>
   189f0:	push	{r4, r5, r6, r7, r8, lr}
   189f4:	mov	r4, r0
   189f8:	mov	r5, r1
   189fc:	mov	r1, r2
   18a00:	ldr	r2, [r0, #88]	; 0x58
   18a04:	bl	184a0 <__assert_fail@plt+0x71c8>
   18a08:	ldr	lr, [r5, #8]
   18a0c:	cmp	lr, #0
   18a10:	ble	18ab8 <__assert_fail@plt+0x77e0>
   18a14:	ldr	r3, [r4, #84]	; 0x54
   18a18:	ldr	r4, [r3]
   18a1c:	ldr	ip, [r5, #12]
   18a20:	sub	ip, ip, #4
   18a24:	mov	r1, #0
   18a28:	and	r7, r0, #8
   18a2c:	and	r6, r0, #2
   18a30:	and	r5, r0, #1
   18a34:	b	18a74 <__assert_fail@plt+0x779c>
   18a38:	tst	r3, #8
   18a3c:	beq	18a48 <__assert_fail@plt+0x7770>
   18a40:	cmp	r5, #0
   18a44:	bne	18a68 <__assert_fail@plt+0x7790>
   18a48:	tst	r3, #32
   18a4c:	beq	18a58 <__assert_fail@plt+0x7780>
   18a50:	cmp	r6, #0
   18a54:	beq	18a68 <__assert_fail@plt+0x7790>
   18a58:	tst	r3, #128	; 0x80
   18a5c:	popeq	{r4, r5, r6, r7, r8, pc}
   18a60:	cmp	r7, #0
   18a64:	popne	{r4, r5, r6, r7, r8, pc}
   18a68:	add	r1, r1, #1
   18a6c:	cmp	lr, r1
   18a70:	beq	18ac0 <__assert_fail@plt+0x77e8>
   18a74:	ldr	r0, [ip, #4]!
   18a78:	add	r2, r4, r0, lsl #3
   18a7c:	ldr	r3, [r2, #4]
   18a80:	lsl	r3, r3, #14
   18a84:	lsr	r3, r3, #22
   18a88:	ldrb	r2, [r2, #4]
   18a8c:	cmp	r2, #2
   18a90:	bne	18a68 <__assert_fail@plt+0x7790>
   18a94:	cmp	r3, #0
   18a98:	popeq	{r4, r5, r6, r7, r8, pc}
   18a9c:	tst	r3, #4
   18aa0:	beq	18a38 <__assert_fail@plt+0x7760>
   18aa4:	cmp	r5, #0
   18aa8:	beq	18a68 <__assert_fail@plt+0x7790>
   18aac:	tst	r3, #8
   18ab0:	bne	18a68 <__assert_fail@plt+0x7790>
   18ab4:	b	18a48 <__assert_fail@plt+0x7770>
   18ab8:	mov	r0, #0
   18abc:	pop	{r4, r5, r6, r7, r8, pc}
   18ac0:	mov	r0, #0
   18ac4:	pop	{r4, r5, r6, r7, r8, pc}
   18ac8:	push	{r4, r5, r6, r7, r8, lr}
   18acc:	ldr	r7, [sp, #28]
   18ad0:	subs	r5, r0, #0
   18ad4:	beq	18b74 <__assert_fail@plt+0x789c>
   18ad8:	ldr	r4, [r5]
   18adc:	cmp	r4, #0
   18ae0:	beq	18b7c <__assert_fail@plt+0x78a4>
   18ae4:	mov	r0, r3
   18ae8:	sub	r4, r4, #1
   18aec:	str	r4, [r5]
   18af0:	add	r4, r4, r4, lsl #1
   18af4:	lsl	r4, r4, #3
   18af8:	ldr	r3, [r5, #8]
   18afc:	ldr	r3, [r3, r4]
   18b00:	str	r3, [r1]
   18b04:	lsl	r6, r2, #3
   18b08:	ldr	r3, [r5, #8]
   18b0c:	add	r3, r3, r4
   18b10:	mov	r2, r6
   18b14:	ldr	r1, [r3, #8]
   18b18:	bl	11068 <memcpy@plt>
   18b1c:	ldr	r3, [r5, #8]
   18b20:	add	r3, r3, r4
   18b24:	ldr	r1, [r3, #8]
   18b28:	mov	r2, r6
   18b2c:	add	r1, r1, r6
   18b30:	ldr	r0, [sp, #24]
   18b34:	bl	11068 <memcpy@plt>
   18b38:	ldr	r0, [r7, #8]
   18b3c:	bl	22f00 <__assert_fail@plt+0x11c28>
   18b40:	ldr	r3, [r5, #8]
   18b44:	add	r3, r3, r4
   18b48:	ldr	r0, [r3, #8]
   18b4c:	bl	22f00 <__assert_fail@plt+0x11c28>
   18b50:	ldr	r3, [r5, #8]
   18b54:	add	r3, r3, r4
   18b58:	add	r3, r3, #12
   18b5c:	ldm	r3, {r0, r1, r2}
   18b60:	stm	r7, {r0, r1, r2}
   18b64:	ldr	r3, [r5, #8]
   18b68:	add	r4, r3, r4
   18b6c:	ldr	r0, [r4, #4]
   18b70:	pop	{r4, r5, r6, r7, r8, pc}
   18b74:	mvn	r0, #0
   18b78:	pop	{r4, r5, r6, r7, r8, pc}
   18b7c:	mvn	r0, #0
   18b80:	pop	{r4, r5, r6, r7, r8, pc}
   18b84:	push	{r4, r5, r6, r7, r8, lr}
   18b88:	mov	r6, r0
   18b8c:	mov	r5, r1
   18b90:	mov	r4, r2
   18b94:	mov	r8, r3
   18b98:	ldr	r3, [sp, #28]
   18b9c:	tst	r3, #4194304	; 0x400000
   18ba0:	beq	18bd8 <__assert_fail@plt+0x7900>
   18ba4:	ldr	r1, [pc, #2780]	; 19688 <__assert_fail@plt+0x83b0>
   18ba8:	ldr	r0, [sp, #24]
   18bac:	bl	11008 <strcmp@plt>
   18bb0:	cmp	r0, #0
   18bb4:	beq	18c2c <__assert_fail@plt+0x7954>
   18bb8:	ldr	r1, [pc, #2764]	; 1968c <__assert_fail@plt+0x83b4>
   18bbc:	ldr	r0, [sp, #24]
   18bc0:	bl	11008 <strcmp@plt>
   18bc4:	ldr	r3, [pc, #2756]	; 19690 <__assert_fail@plt+0x83b8>
   18bc8:	ldr	r2, [sp, #24]
   18bcc:	cmp	r0, #0
   18bd0:	moveq	r2, r3
   18bd4:	str	r2, [sp, #24]
   18bd8:	ldr	r3, [r8]
   18bdc:	ldr	r2, [r4, #36]	; 0x24
   18be0:	cmp	r3, r2
   18be4:	beq	18c38 <__assert_fail@plt+0x7960>
   18be8:	ldr	r8, [r4, #12]
   18bec:	ldr	r7, [r4, #36]	; 0x24
   18bf0:	add	r3, r7, #1
   18bf4:	str	r3, [r4, #36]	; 0x24
   18bf8:	ldr	r0, [sp, #24]
   18bfc:	bl	10fd8 <wctype@plt>
   18c00:	str	r0, [r8, r7, lsl #2]
   18c04:	ldr	r1, [pc, #2696]	; 19694 <__assert_fail@plt+0x83bc>
   18c08:	ldr	r0, [sp, #24]
   18c0c:	bl	11008 <strcmp@plt>
   18c10:	subs	r4, r0, #0
   18c14:	bne	18d14 <__assert_fail@plt+0x7a3c>
   18c18:	cmp	r6, #0
   18c1c:	bne	18c60 <__assert_fail@plt+0x7988>
   18c20:	bl	111a0 <__ctype_b_loc@plt>
   18c24:	mov	ip, #1
   18c28:	b	18cc4 <__assert_fail@plt+0x79ec>
   18c2c:	ldr	r3, [pc, #2652]	; 19690 <__assert_fail@plt+0x83b8>
   18c30:	str	r3, [sp, #24]
   18c34:	b	18bd8 <__assert_fail@plt+0x7900>
   18c38:	lsl	r3, r3, #1
   18c3c:	add	r7, r3, #1
   18c40:	lsl	r1, r7, #2
   18c44:	ldr	r0, [r4, #12]
   18c48:	bl	22d6c <__assert_fail@plt+0x11a94>
   18c4c:	cmp	r0, #0
   18c50:	beq	19678 <__assert_fail@plt+0x83a0>
   18c54:	str	r0, [r4, #12]
   18c58:	str	r7, [r8]
   18c5c:	b	18be8 <__assert_fail@plt+0x7910>
   18c60:	bl	111a0 <__ctype_b_loc@plt>
   18c64:	mov	r2, r6
   18c68:	mov	r3, #0
   18c6c:	mov	r4, #1
   18c70:	b	18c84 <__assert_fail@plt+0x79ac>
   18c74:	add	r3, r3, #2
   18c78:	add	r2, r2, #1
   18c7c:	cmp	r3, #512	; 0x200
   18c80:	beq	18cb0 <__assert_fail@plt+0x79d8>
   18c84:	ldr	r1, [r0]
   18c88:	ldrh	r1, [r1, r3]
   18c8c:	tst	r1, #8
   18c90:	beq	18c74 <__assert_fail@plt+0x799c>
   18c94:	ldrb	r1, [r2]
   18c98:	asr	lr, r1, #5
   18c9c:	and	r1, r1, #31
   18ca0:	ldr	ip, [r5, lr, lsl #2]
   18ca4:	orr	r1, ip, r4, lsl r1
   18ca8:	str	r1, [r5, lr, lsl #2]
   18cac:	b	18c74 <__assert_fail@plt+0x799c>
   18cb0:	mov	r0, #0
   18cb4:	pop	{r4, r5, r6, r7, r8, pc}
   18cb8:	add	r4, r4, #1
   18cbc:	cmp	r4, #256	; 0x100
   18cc0:	beq	18d0c <__assert_fail@plt+0x7a34>
   18cc4:	ldr	r2, [r0]
   18cc8:	lsl	r3, r4, #1
   18ccc:	ldrh	r3, [r2, r3]
   18cd0:	tst	r3, #8
   18cd4:	beq	18cb8 <__assert_fail@plt+0x79e0>
   18cd8:	add	r3, r4, #31
   18cdc:	cmp	r4, #0
   18ce0:	movge	r3, r4
   18ce4:	asr	r3, r3, #5
   18ce8:	asr	r2, r4, #31
   18cec:	lsr	r1, r2, #27
   18cf0:	add	r2, r4, r1
   18cf4:	and	r2, r2, #31
   18cf8:	sub	r2, r2, r1
   18cfc:	ldr	r1, [r5, r3, lsl #2]
   18d00:	orr	r2, r1, ip, lsl r2
   18d04:	str	r2, [r5, r3, lsl #2]
   18d08:	b	18cb8 <__assert_fail@plt+0x79e0>
   18d0c:	mov	r0, #0
   18d10:	pop	{r4, r5, r6, r7, r8, pc}
   18d14:	ldr	r1, [pc, #2428]	; 19698 <__assert_fail@plt+0x83c0>
   18d18:	ldr	r0, [sp, #24]
   18d1c:	bl	11008 <strcmp@plt>
   18d20:	subs	r4, r0, #0
   18d24:	bne	18df0 <__assert_fail@plt+0x7b18>
   18d28:	cmp	r6, #0
   18d2c:	bne	18d3c <__assert_fail@plt+0x7a64>
   18d30:	bl	111a0 <__ctype_b_loc@plt>
   18d34:	mov	ip, #1
   18d38:	b	18da0 <__assert_fail@plt+0x7ac8>
   18d3c:	bl	111a0 <__ctype_b_loc@plt>
   18d40:	mov	r2, r6
   18d44:	mov	r3, #0
   18d48:	mov	r4, #1
   18d4c:	b	18d60 <__assert_fail@plt+0x7a88>
   18d50:	add	r3, r3, #2
   18d54:	add	r2, r2, #1
   18d58:	cmp	r3, #512	; 0x200
   18d5c:	beq	18d8c <__assert_fail@plt+0x7ab4>
   18d60:	ldr	r1, [r0]
   18d64:	ldrh	r1, [r1, r3]
   18d68:	tst	r1, #2
   18d6c:	beq	18d50 <__assert_fail@plt+0x7a78>
   18d70:	ldrb	r1, [r2]
   18d74:	asr	lr, r1, #5
   18d78:	and	r1, r1, #31
   18d7c:	ldr	ip, [r5, lr, lsl #2]
   18d80:	orr	r1, ip, r4, lsl r1
   18d84:	str	r1, [r5, lr, lsl #2]
   18d88:	b	18d50 <__assert_fail@plt+0x7a78>
   18d8c:	mov	r0, #0
   18d90:	pop	{r4, r5, r6, r7, r8, pc}
   18d94:	add	r4, r4, #1
   18d98:	cmp	r4, #256	; 0x100
   18d9c:	beq	18de8 <__assert_fail@plt+0x7b10>
   18da0:	ldr	r2, [r0]
   18da4:	lsl	r3, r4, #1
   18da8:	ldrh	r3, [r2, r3]
   18dac:	tst	r3, #2
   18db0:	beq	18d94 <__assert_fail@plt+0x7abc>
   18db4:	add	r3, r4, #31
   18db8:	cmp	r4, #0
   18dbc:	movge	r3, r4
   18dc0:	asr	r3, r3, #5
   18dc4:	asr	r2, r4, #31
   18dc8:	lsr	r1, r2, #27
   18dcc:	add	r2, r4, r1
   18dd0:	and	r2, r2, #31
   18dd4:	sub	r2, r2, r1
   18dd8:	ldr	r1, [r5, r3, lsl #2]
   18ddc:	orr	r2, r1, ip, lsl r2
   18de0:	str	r2, [r5, r3, lsl #2]
   18de4:	b	18d94 <__assert_fail@plt+0x7abc>
   18de8:	mov	r0, #0
   18dec:	pop	{r4, r5, r6, r7, r8, pc}
   18df0:	ldr	r1, [pc, #2196]	; 1968c <__assert_fail@plt+0x83b4>
   18df4:	ldr	r0, [sp, #24]
   18df8:	bl	11008 <strcmp@plt>
   18dfc:	subs	r4, r0, #0
   18e00:	bne	18ecc <__assert_fail@plt+0x7bf4>
   18e04:	cmp	r6, #0
   18e08:	bne	18e18 <__assert_fail@plt+0x7b40>
   18e0c:	bl	111a0 <__ctype_b_loc@plt>
   18e10:	mov	ip, #1
   18e14:	b	18e7c <__assert_fail@plt+0x7ba4>
   18e18:	bl	111a0 <__ctype_b_loc@plt>
   18e1c:	mov	r2, r6
   18e20:	mov	r3, #0
   18e24:	mov	r4, #1
   18e28:	b	18e3c <__assert_fail@plt+0x7b64>
   18e2c:	add	r3, r3, #2
   18e30:	add	r2, r2, #1
   18e34:	cmp	r3, #512	; 0x200
   18e38:	beq	18e68 <__assert_fail@plt+0x7b90>
   18e3c:	ldr	r1, [r0]
   18e40:	ldrh	r1, [r1, r3]
   18e44:	tst	r1, #512	; 0x200
   18e48:	beq	18e2c <__assert_fail@plt+0x7b54>
   18e4c:	ldrb	r1, [r2]
   18e50:	asr	lr, r1, #5
   18e54:	and	r1, r1, #31
   18e58:	ldr	ip, [r5, lr, lsl #2]
   18e5c:	orr	r1, ip, r4, lsl r1
   18e60:	str	r1, [r5, lr, lsl #2]
   18e64:	b	18e2c <__assert_fail@plt+0x7b54>
   18e68:	mov	r0, #0
   18e6c:	pop	{r4, r5, r6, r7, r8, pc}
   18e70:	add	r4, r4, #1
   18e74:	cmp	r4, #256	; 0x100
   18e78:	beq	18ec4 <__assert_fail@plt+0x7bec>
   18e7c:	ldr	r2, [r0]
   18e80:	lsl	r3, r4, #1
   18e84:	ldrh	r3, [r2, r3]
   18e88:	tst	r3, #512	; 0x200
   18e8c:	beq	18e70 <__assert_fail@plt+0x7b98>
   18e90:	add	r3, r4, #31
   18e94:	cmp	r4, #0
   18e98:	movge	r3, r4
   18e9c:	asr	r3, r3, #5
   18ea0:	asr	r2, r4, #31
   18ea4:	lsr	r1, r2, #27
   18ea8:	add	r2, r4, r1
   18eac:	and	r2, r2, #31
   18eb0:	sub	r2, r2, r1
   18eb4:	ldr	r1, [r5, r3, lsl #2]
   18eb8:	orr	r2, r1, ip, lsl r2
   18ebc:	str	r2, [r5, r3, lsl #2]
   18ec0:	b	18e70 <__assert_fail@plt+0x7b98>
   18ec4:	mov	r0, #0
   18ec8:	pop	{r4, r5, r6, r7, r8, pc}
   18ecc:	ldr	r1, [pc, #1992]	; 1969c <__assert_fail@plt+0x83c4>
   18ed0:	ldr	r0, [sp, #24]
   18ed4:	bl	11008 <strcmp@plt>
   18ed8:	subs	r4, r0, #0
   18edc:	bne	18fa8 <__assert_fail@plt+0x7cd0>
   18ee0:	cmp	r6, #0
   18ee4:	bne	18ef4 <__assert_fail@plt+0x7c1c>
   18ee8:	bl	111a0 <__ctype_b_loc@plt>
   18eec:	mov	ip, #1
   18ef0:	b	18f58 <__assert_fail@plt+0x7c80>
   18ef4:	bl	111a0 <__ctype_b_loc@plt>
   18ef8:	mov	r2, r6
   18efc:	mov	r3, #0
   18f00:	mov	r4, #1
   18f04:	b	18f18 <__assert_fail@plt+0x7c40>
   18f08:	add	r3, r3, #2
   18f0c:	add	r2, r2, #1
   18f10:	cmp	r3, #512	; 0x200
   18f14:	beq	18f44 <__assert_fail@plt+0x7c6c>
   18f18:	ldr	r1, [r0]
   18f1c:	ldrh	r1, [r1, r3]
   18f20:	tst	r1, #8192	; 0x2000
   18f24:	beq	18f08 <__assert_fail@plt+0x7c30>
   18f28:	ldrb	r1, [r2]
   18f2c:	asr	lr, r1, #5
   18f30:	and	r1, r1, #31
   18f34:	ldr	ip, [r5, lr, lsl #2]
   18f38:	orr	r1, ip, r4, lsl r1
   18f3c:	str	r1, [r5, lr, lsl #2]
   18f40:	b	18f08 <__assert_fail@plt+0x7c30>
   18f44:	mov	r0, #0
   18f48:	pop	{r4, r5, r6, r7, r8, pc}
   18f4c:	add	r4, r4, #1
   18f50:	cmp	r4, #256	; 0x100
   18f54:	beq	18fa0 <__assert_fail@plt+0x7cc8>
   18f58:	ldr	r2, [r0]
   18f5c:	lsl	r3, r4, #1
   18f60:	ldrh	r3, [r2, r3]
   18f64:	tst	r3, #8192	; 0x2000
   18f68:	beq	18f4c <__assert_fail@plt+0x7c74>
   18f6c:	add	r3, r4, #31
   18f70:	cmp	r4, #0
   18f74:	movge	r3, r4
   18f78:	asr	r3, r3, #5
   18f7c:	asr	r2, r4, #31
   18f80:	lsr	r1, r2, #27
   18f84:	add	r2, r4, r1
   18f88:	and	r2, r2, #31
   18f8c:	sub	r2, r2, r1
   18f90:	ldr	r1, [r5, r3, lsl #2]
   18f94:	orr	r2, r1, ip, lsl r2
   18f98:	str	r2, [r5, r3, lsl #2]
   18f9c:	b	18f4c <__assert_fail@plt+0x7c74>
   18fa0:	mov	r0, #0
   18fa4:	pop	{r4, r5, r6, r7, r8, pc}
   18fa8:	ldr	r1, [pc, #1760]	; 19690 <__assert_fail@plt+0x83b8>
   18fac:	ldr	r0, [sp, #24]
   18fb0:	bl	11008 <strcmp@plt>
   18fb4:	subs	r4, r0, #0
   18fb8:	bne	19084 <__assert_fail@plt+0x7dac>
   18fbc:	cmp	r6, #0
   18fc0:	bne	18fd0 <__assert_fail@plt+0x7cf8>
   18fc4:	bl	111a0 <__ctype_b_loc@plt>
   18fc8:	mov	ip, #1
   18fcc:	b	19034 <__assert_fail@plt+0x7d5c>
   18fd0:	bl	111a0 <__ctype_b_loc@plt>
   18fd4:	mov	r2, r6
   18fd8:	mov	r3, #0
   18fdc:	mov	r4, #1
   18fe0:	b	18ff4 <__assert_fail@plt+0x7d1c>
   18fe4:	add	r3, r3, #2
   18fe8:	add	r2, r2, #1
   18fec:	cmp	r3, #512	; 0x200
   18ff0:	beq	19020 <__assert_fail@plt+0x7d48>
   18ff4:	ldr	r1, [r0]
   18ff8:	ldrh	r1, [r1, r3]
   18ffc:	tst	r1, #1024	; 0x400
   19000:	beq	18fe4 <__assert_fail@plt+0x7d0c>
   19004:	ldrb	r1, [r2]
   19008:	asr	lr, r1, #5
   1900c:	and	r1, r1, #31
   19010:	ldr	ip, [r5, lr, lsl #2]
   19014:	orr	r1, ip, r4, lsl r1
   19018:	str	r1, [r5, lr, lsl #2]
   1901c:	b	18fe4 <__assert_fail@plt+0x7d0c>
   19020:	mov	r0, #0
   19024:	pop	{r4, r5, r6, r7, r8, pc}
   19028:	add	r4, r4, #1
   1902c:	cmp	r4, #256	; 0x100
   19030:	beq	1907c <__assert_fail@plt+0x7da4>
   19034:	ldr	r2, [r0]
   19038:	lsl	r3, r4, #1
   1903c:	ldrh	r3, [r2, r3]
   19040:	tst	r3, #1024	; 0x400
   19044:	beq	19028 <__assert_fail@plt+0x7d50>
   19048:	add	r3, r4, #31
   1904c:	cmp	r4, #0
   19050:	movge	r3, r4
   19054:	asr	r3, r3, #5
   19058:	asr	r2, r4, #31
   1905c:	lsr	r1, r2, #27
   19060:	add	r2, r4, r1
   19064:	and	r2, r2, #31
   19068:	sub	r2, r2, r1
   1906c:	ldr	r1, [r5, r3, lsl #2]
   19070:	orr	r2, r1, ip, lsl r2
   19074:	str	r2, [r5, r3, lsl #2]
   19078:	b	19028 <__assert_fail@plt+0x7d50>
   1907c:	mov	r0, #0
   19080:	pop	{r4, r5, r6, r7, r8, pc}
   19084:	ldr	r1, [pc, #1556]	; 196a0 <__assert_fail@plt+0x83c8>
   19088:	ldr	r0, [sp, #24]
   1908c:	bl	11008 <strcmp@plt>
   19090:	subs	r4, r0, #0
   19094:	bne	19160 <__assert_fail@plt+0x7e88>
   19098:	cmp	r6, #0
   1909c:	bne	190ac <__assert_fail@plt+0x7dd4>
   190a0:	bl	111a0 <__ctype_b_loc@plt>
   190a4:	mov	ip, #1
   190a8:	b	19110 <__assert_fail@plt+0x7e38>
   190ac:	bl	111a0 <__ctype_b_loc@plt>
   190b0:	mov	r2, r6
   190b4:	mov	r3, #0
   190b8:	mov	r4, #1
   190bc:	b	190d0 <__assert_fail@plt+0x7df8>
   190c0:	add	r3, r3, #2
   190c4:	add	r2, r2, #1
   190c8:	cmp	r3, #512	; 0x200
   190cc:	beq	190fc <__assert_fail@plt+0x7e24>
   190d0:	ldr	r1, [r0]
   190d4:	ldrh	r1, [r1, r3]
   190d8:	tst	r1, #2048	; 0x800
   190dc:	beq	190c0 <__assert_fail@plt+0x7de8>
   190e0:	ldrb	r1, [r2]
   190e4:	asr	lr, r1, #5
   190e8:	and	r1, r1, #31
   190ec:	ldr	ip, [r5, lr, lsl #2]
   190f0:	orr	r1, ip, r4, lsl r1
   190f4:	str	r1, [r5, lr, lsl #2]
   190f8:	b	190c0 <__assert_fail@plt+0x7de8>
   190fc:	mov	r0, #0
   19100:	pop	{r4, r5, r6, r7, r8, pc}
   19104:	add	r4, r4, #1
   19108:	cmp	r4, #256	; 0x100
   1910c:	beq	19158 <__assert_fail@plt+0x7e80>
   19110:	ldr	r2, [r0]
   19114:	lsl	r3, r4, #1
   19118:	ldrh	r3, [r2, r3]
   1911c:	tst	r3, #2048	; 0x800
   19120:	beq	19104 <__assert_fail@plt+0x7e2c>
   19124:	add	r3, r4, #31
   19128:	cmp	r4, #0
   1912c:	movge	r3, r4
   19130:	asr	r3, r3, #5
   19134:	asr	r2, r4, #31
   19138:	lsr	r1, r2, #27
   1913c:	add	r2, r4, r1
   19140:	and	r2, r2, #31
   19144:	sub	r2, r2, r1
   19148:	ldr	r1, [r5, r3, lsl #2]
   1914c:	orr	r2, r1, ip, lsl r2
   19150:	str	r2, [r5, r3, lsl #2]
   19154:	b	19104 <__assert_fail@plt+0x7e2c>
   19158:	mov	r0, #0
   1915c:	pop	{r4, r5, r6, r7, r8, pc}
   19160:	ldr	r1, [pc, #1340]	; 196a4 <__assert_fail@plt+0x83cc>
   19164:	ldr	r0, [sp, #24]
   19168:	bl	11008 <strcmp@plt>
   1916c:	subs	r4, r0, #0
   19170:	bne	1923c <__assert_fail@plt+0x7f64>
   19174:	cmp	r6, #0
   19178:	bne	19188 <__assert_fail@plt+0x7eb0>
   1917c:	bl	111a0 <__ctype_b_loc@plt>
   19180:	mov	ip, #1
   19184:	b	191ec <__assert_fail@plt+0x7f14>
   19188:	bl	111a0 <__ctype_b_loc@plt>
   1918c:	mov	r2, r6
   19190:	mov	r3, #0
   19194:	mov	r4, #1
   19198:	b	191ac <__assert_fail@plt+0x7ed4>
   1919c:	add	r3, r3, #2
   191a0:	add	r2, r2, #1
   191a4:	cmp	r3, #512	; 0x200
   191a8:	beq	191d8 <__assert_fail@plt+0x7f00>
   191ac:	ldr	r1, [r0]
   191b0:	ldrh	r1, [r1, r3]
   191b4:	tst	r1, #16384	; 0x4000
   191b8:	beq	1919c <__assert_fail@plt+0x7ec4>
   191bc:	ldrb	r1, [r2]
   191c0:	asr	lr, r1, #5
   191c4:	and	r1, r1, #31
   191c8:	ldr	ip, [r5, lr, lsl #2]
   191cc:	orr	r1, ip, r4, lsl r1
   191d0:	str	r1, [r5, lr, lsl #2]
   191d4:	b	1919c <__assert_fail@plt+0x7ec4>
   191d8:	mov	r0, #0
   191dc:	pop	{r4, r5, r6, r7, r8, pc}
   191e0:	add	r4, r4, #1
   191e4:	cmp	r4, #256	; 0x100
   191e8:	beq	19234 <__assert_fail@plt+0x7f5c>
   191ec:	ldr	r2, [r0]
   191f0:	lsl	r3, r4, #1
   191f4:	ldrh	r3, [r2, r3]
   191f8:	tst	r3, #16384	; 0x4000
   191fc:	beq	191e0 <__assert_fail@plt+0x7f08>
   19200:	add	r3, r4, #31
   19204:	cmp	r4, #0
   19208:	movge	r3, r4
   1920c:	asr	r3, r3, #5
   19210:	asr	r2, r4, #31
   19214:	lsr	r1, r2, #27
   19218:	add	r2, r4, r1
   1921c:	and	r2, r2, #31
   19220:	sub	r2, r2, r1
   19224:	ldr	r1, [r5, r3, lsl #2]
   19228:	orr	r2, r1, ip, lsl r2
   1922c:	str	r2, [r5, r3, lsl #2]
   19230:	b	191e0 <__assert_fail@plt+0x7f08>
   19234:	mov	r0, #0
   19238:	pop	{r4, r5, r6, r7, r8, pc}
   1923c:	ldr	r1, [pc, #1092]	; 19688 <__assert_fail@plt+0x83b0>
   19240:	ldr	r0, [sp, #24]
   19244:	bl	11008 <strcmp@plt>
   19248:	subs	r4, r0, #0
   1924c:	bne	19318 <__assert_fail@plt+0x8040>
   19250:	cmp	r6, #0
   19254:	bne	19264 <__assert_fail@plt+0x7f8c>
   19258:	bl	111a0 <__ctype_b_loc@plt>
   1925c:	mov	ip, #1
   19260:	b	192c8 <__assert_fail@plt+0x7ff0>
   19264:	bl	111a0 <__ctype_b_loc@plt>
   19268:	mov	r2, r6
   1926c:	mov	r3, #0
   19270:	mov	r4, #1
   19274:	b	19288 <__assert_fail@plt+0x7fb0>
   19278:	add	r3, r3, #2
   1927c:	add	r2, r2, #1
   19280:	cmp	r3, #512	; 0x200
   19284:	beq	192b4 <__assert_fail@plt+0x7fdc>
   19288:	ldr	r1, [r0]
   1928c:	ldrh	r1, [r1, r3]
   19290:	tst	r1, #256	; 0x100
   19294:	beq	19278 <__assert_fail@plt+0x7fa0>
   19298:	ldrb	r1, [r2]
   1929c:	asr	lr, r1, #5
   192a0:	and	r1, r1, #31
   192a4:	ldr	ip, [r5, lr, lsl #2]
   192a8:	orr	r1, ip, r4, lsl r1
   192ac:	str	r1, [r5, lr, lsl #2]
   192b0:	b	19278 <__assert_fail@plt+0x7fa0>
   192b4:	mov	r0, #0
   192b8:	pop	{r4, r5, r6, r7, r8, pc}
   192bc:	add	r4, r4, #1
   192c0:	cmp	r4, #256	; 0x100
   192c4:	beq	19310 <__assert_fail@plt+0x8038>
   192c8:	ldr	r2, [r0]
   192cc:	lsl	r3, r4, #1
   192d0:	ldrh	r3, [r2, r3]
   192d4:	tst	r3, #256	; 0x100
   192d8:	beq	192bc <__assert_fail@plt+0x7fe4>
   192dc:	add	r3, r4, #31
   192e0:	cmp	r4, #0
   192e4:	movge	r3, r4
   192e8:	asr	r3, r3, #5
   192ec:	asr	r2, r4, #31
   192f0:	lsr	r1, r2, #27
   192f4:	add	r2, r4, r1
   192f8:	and	r2, r2, #31
   192fc:	sub	r2, r2, r1
   19300:	ldr	r1, [r5, r3, lsl #2]
   19304:	orr	r2, r1, ip, lsl r2
   19308:	str	r2, [r5, r3, lsl #2]
   1930c:	b	192bc <__assert_fail@plt+0x7fe4>
   19310:	mov	r0, #0
   19314:	pop	{r4, r5, r6, r7, r8, pc}
   19318:	ldr	r1, [pc, #904]	; 196a8 <__assert_fail@plt+0x83d0>
   1931c:	ldr	r0, [sp, #24]
   19320:	bl	11008 <strcmp@plt>
   19324:	subs	r4, r0, #0
   19328:	bne	193f4 <__assert_fail@plt+0x811c>
   1932c:	cmp	r6, #0
   19330:	beq	1938c <__assert_fail@plt+0x80b4>
   19334:	bl	111a0 <__ctype_b_loc@plt>
   19338:	mov	r2, r6
   1933c:	mov	r3, #0
   19340:	mov	r4, #1
   19344:	b	19358 <__assert_fail@plt+0x8080>
   19348:	add	r3, r3, #2
   1934c:	add	r2, r2, #1
   19350:	cmp	r3, #512	; 0x200
   19354:	beq	19384 <__assert_fail@plt+0x80ac>
   19358:	ldr	r1, [r0]
   1935c:	ldrh	r1, [r1, r3]
   19360:	tst	r1, #1
   19364:	beq	19348 <__assert_fail@plt+0x8070>
   19368:	ldrb	r1, [r2]
   1936c:	asr	lr, r1, #5
   19370:	and	r1, r1, #31
   19374:	ldr	ip, [r5, lr, lsl #2]
   19378:	orr	r1, ip, r4, lsl r1
   1937c:	str	r1, [r5, lr, lsl #2]
   19380:	b	19348 <__assert_fail@plt+0x8070>
   19384:	mov	r0, #0
   19388:	pop	{r4, r5, r6, r7, r8, pc}
   1938c:	bl	111a0 <__ctype_b_loc@plt>
   19390:	mov	ip, #1
   19394:	b	193a4 <__assert_fail@plt+0x80cc>
   19398:	add	r4, r4, #1
   1939c:	cmp	r4, #256	; 0x100
   193a0:	beq	193ec <__assert_fail@plt+0x8114>
   193a4:	ldr	r2, [r0]
   193a8:	lsl	r3, r4, #1
   193ac:	ldrh	r3, [r2, r3]
   193b0:	tst	r3, #1
   193b4:	beq	19398 <__assert_fail@plt+0x80c0>
   193b8:	add	r3, r4, #31
   193bc:	cmp	r4, #0
   193c0:	movge	r3, r4
   193c4:	asr	r3, r3, #5
   193c8:	asr	r2, r4, #31
   193cc:	lsr	r1, r2, #27
   193d0:	add	r2, r4, r1
   193d4:	and	r2, r2, #31
   193d8:	sub	r2, r2, r1
   193dc:	ldr	r1, [r5, r3, lsl #2]
   193e0:	orr	r2, r1, ip, lsl r2
   193e4:	str	r2, [r5, r3, lsl #2]
   193e8:	b	19398 <__assert_fail@plt+0x80c0>
   193ec:	mov	r0, #0
   193f0:	pop	{r4, r5, r6, r7, r8, pc}
   193f4:	ldr	r1, [pc, #688]	; 196ac <__assert_fail@plt+0x83d4>
   193f8:	ldr	r0, [sp, #24]
   193fc:	bl	11008 <strcmp@plt>
   19400:	subs	r4, r0, #0
   19404:	bne	194d0 <__assert_fail@plt+0x81f8>
   19408:	cmp	r6, #0
   1940c:	beq	19468 <__assert_fail@plt+0x8190>
   19410:	bl	111a0 <__ctype_b_loc@plt>
   19414:	mov	r2, r6
   19418:	mov	r3, #0
   1941c:	mov	r4, #1
   19420:	b	19434 <__assert_fail@plt+0x815c>
   19424:	add	r3, r3, #2
   19428:	add	r2, r2, #1
   1942c:	cmp	r3, #512	; 0x200
   19430:	beq	19460 <__assert_fail@plt+0x8188>
   19434:	ldr	r1, [r0]
   19438:	ldrsh	r1, [r1, r3]
   1943c:	cmp	r1, #0
   19440:	bge	19424 <__assert_fail@plt+0x814c>
   19444:	ldrb	r1, [r2]
   19448:	asr	lr, r1, #5
   1944c:	and	r1, r1, #31
   19450:	ldr	ip, [r5, lr, lsl #2]
   19454:	orr	r1, ip, r4, lsl r1
   19458:	str	r1, [r5, lr, lsl #2]
   1945c:	b	19424 <__assert_fail@plt+0x814c>
   19460:	mov	r0, #0
   19464:	pop	{r4, r5, r6, r7, r8, pc}
   19468:	bl	111a0 <__ctype_b_loc@plt>
   1946c:	mov	ip, #1
   19470:	b	19480 <__assert_fail@plt+0x81a8>
   19474:	add	r4, r4, #1
   19478:	cmp	r4, #256	; 0x100
   1947c:	beq	194c8 <__assert_fail@plt+0x81f0>
   19480:	ldr	r2, [r0]
   19484:	lsl	r3, r4, #1
   19488:	ldrsh	r3, [r2, r3]
   1948c:	cmp	r3, #0
   19490:	bge	19474 <__assert_fail@plt+0x819c>
   19494:	add	r3, r4, #31
   19498:	cmp	r4, #0
   1949c:	movge	r3, r4
   194a0:	asr	r3, r3, #5
   194a4:	asr	r2, r4, #31
   194a8:	lsr	r1, r2, #27
   194ac:	add	r2, r4, r1
   194b0:	and	r2, r2, #31
   194b4:	sub	r2, r2, r1
   194b8:	ldr	r1, [r5, r3, lsl #2]
   194bc:	orr	r2, r1, ip, lsl r2
   194c0:	str	r2, [r5, r3, lsl #2]
   194c4:	b	19474 <__assert_fail@plt+0x819c>
   194c8:	mov	r0, #0
   194cc:	pop	{r4, r5, r6, r7, r8, pc}
   194d0:	ldr	r1, [pc, #472]	; 196b0 <__assert_fail@plt+0x83d8>
   194d4:	ldr	r0, [sp, #24]
   194d8:	bl	11008 <strcmp@plt>
   194dc:	subs	r4, r0, #0
   194e0:	bne	195a4 <__assert_fail@plt+0x82cc>
   194e4:	cmp	r6, #0
   194e8:	beq	1953c <__assert_fail@plt+0x8264>
   194ec:	bl	111a0 <__ctype_b_loc@plt>
   194f0:	mov	r2, r6
   194f4:	mov	r3, #0
   194f8:	mov	r4, #1
   194fc:	ldr	r1, [r0]
   19500:	ldrh	r1, [r1, r3]
   19504:	tst	r1, #4
   19508:	beq	19524 <__assert_fail@plt+0x824c>
   1950c:	ldrb	r1, [r2]
   19510:	asr	lr, r1, #5
   19514:	and	r1, r1, #31
   19518:	ldr	ip, [r5, lr, lsl #2]
   1951c:	orr	r1, ip, r4, lsl r1
   19520:	str	r1, [r5, lr, lsl #2]
   19524:	add	r3, r3, #2
   19528:	add	r2, r2, #1
   1952c:	cmp	r3, #512	; 0x200
   19530:	bne	194fc <__assert_fail@plt+0x8224>
   19534:	mov	r0, #0
   19538:	pop	{r4, r5, r6, r7, r8, pc}
   1953c:	bl	111a0 <__ctype_b_loc@plt>
   19540:	mov	ip, #1
   19544:	b	19554 <__assert_fail@plt+0x827c>
   19548:	add	r4, r4, #1
   1954c:	cmp	r4, #256	; 0x100
   19550:	beq	1959c <__assert_fail@plt+0x82c4>
   19554:	ldr	r2, [r0]
   19558:	lsl	r3, r4, #1
   1955c:	ldrh	r3, [r2, r3]
   19560:	tst	r3, #4
   19564:	beq	19548 <__assert_fail@plt+0x8270>
   19568:	add	r3, r4, #31
   1956c:	cmp	r4, #0
   19570:	movge	r3, r4
   19574:	asr	r3, r3, #5
   19578:	asr	r2, r4, #31
   1957c:	lsr	r1, r2, #27
   19580:	add	r2, r4, r1
   19584:	and	r2, r2, #31
   19588:	sub	r2, r2, r1
   1958c:	ldr	r1, [r5, r3, lsl #2]
   19590:	orr	r2, r1, ip, lsl r2
   19594:	str	r2, [r5, r3, lsl #2]
   19598:	b	19548 <__assert_fail@plt+0x8270>
   1959c:	mov	r0, #0
   195a0:	pop	{r4, r5, r6, r7, r8, pc}
   195a4:	ldr	r1, [pc, #264]	; 196b4 <__assert_fail@plt+0x83dc>
   195a8:	ldr	r0, [sp, #24]
   195ac:	bl	11008 <strcmp@plt>
   195b0:	subs	r4, r0, #0
   195b4:	bne	19680 <__assert_fail@plt+0x83a8>
   195b8:	cmp	r6, #0
   195bc:	beq	19610 <__assert_fail@plt+0x8338>
   195c0:	bl	111a0 <__ctype_b_loc@plt>
   195c4:	mov	r2, r6
   195c8:	mov	r3, #0
   195cc:	mov	r4, #1
   195d0:	ldr	r1, [r0]
   195d4:	ldrh	r1, [r1, r3]
   195d8:	tst	r1, #4096	; 0x1000
   195dc:	beq	195f8 <__assert_fail@plt+0x8320>
   195e0:	ldrb	r1, [r2]
   195e4:	asr	lr, r1, #5
   195e8:	and	r1, r1, #31
   195ec:	ldr	ip, [r5, lr, lsl #2]
   195f0:	orr	r1, ip, r4, lsl r1
   195f4:	str	r1, [r5, lr, lsl #2]
   195f8:	add	r3, r3, #2
   195fc:	add	r2, r2, #1
   19600:	cmp	r3, #512	; 0x200
   19604:	bne	195d0 <__assert_fail@plt+0x82f8>
   19608:	mov	r0, #0
   1960c:	pop	{r4, r5, r6, r7, r8, pc}
   19610:	bl	111a0 <__ctype_b_loc@plt>
   19614:	mov	ip, #1
   19618:	b	19628 <__assert_fail@plt+0x8350>
   1961c:	add	r4, r4, #1
   19620:	cmp	r4, #256	; 0x100
   19624:	beq	19670 <__assert_fail@plt+0x8398>
   19628:	ldr	r2, [r0]
   1962c:	lsl	r3, r4, #1
   19630:	ldrh	r3, [r2, r3]
   19634:	tst	r3, #4096	; 0x1000
   19638:	beq	1961c <__assert_fail@plt+0x8344>
   1963c:	add	r3, r4, #31
   19640:	cmp	r4, #0
   19644:	movge	r3, r4
   19648:	asr	r3, r3, #5
   1964c:	asr	r2, r4, #31
   19650:	lsr	r1, r2, #27
   19654:	add	r2, r4, r1
   19658:	and	r2, r2, #31
   1965c:	sub	r2, r2, r1
   19660:	ldr	r1, [r5, r3, lsl #2]
   19664:	orr	r2, r1, ip, lsl r2
   19668:	str	r2, [r5, r3, lsl #2]
   1966c:	b	1961c <__assert_fail@plt+0x8344>
   19670:	mov	r0, #0
   19674:	pop	{r4, r5, r6, r7, r8, pc}
   19678:	mov	r0, #12
   1967c:	pop	{r4, r5, r6, r7, r8, pc}
   19680:	mov	r0, #4
   19684:	pop	{r4, r5, r6, r7, r8, pc}
   19688:	muleq	r2, ip, r7
   1968c:	andeq	r4, r2, r4, lsr #15
   19690:	muleq	r2, r4, r7
   19694:	andeq	r4, r2, ip, lsr #15
   19698:			; <UNDEFINED> instruction: 0x000247b4
   1969c:			; <UNDEFINED> instruction: 0x000247bc
   196a0:	andeq	r4, r2, r4, asr #15
   196a4:	andeq	r4, r2, ip, asr #15
   196a8:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   196ac:	ldrdeq	r4, [r2], -ip
   196b0:	andeq	r4, r2, r4, ror #15
   196b4:	andeq	r4, r2, ip, ror #15
   196b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   196bc:	sub	sp, sp, #24
   196c0:	mov	r6, r0
   196c4:	mov	r9, r1
   196c8:	mov	sl, r2
   196cc:	mov	r5, r3
   196d0:	ldrb	r8, [sp, #56]	; 0x38
   196d4:	mov	r3, #0
   196d8:	str	r3, [sp, #20]
   196dc:	mov	r1, #1
   196e0:	mov	r0, #32
   196e4:	bl	22cec <__assert_fail@plt+0x11a14>
   196e8:	subs	r4, r0, #0
   196ec:	beq	19854 <__assert_fail@plt+0x857c>
   196f0:	mov	r1, #1
   196f4:	mov	r0, #40	; 0x28
   196f8:	bl	22cec <__assert_fail@plt+0x11a14>
   196fc:	subs	r7, r0, #0
   19700:	beq	19868 <__assert_fail@plt+0x8590>
   19704:	ldrb	r2, [r7, #16]
   19708:	and	r3, r8, #1
   1970c:	bic	r2, r2, #1
   19710:	orr	r3, r3, r2
   19714:	strb	r3, [r7, #16]
   19718:	mov	r3, #0
   1971c:	str	r3, [sp, #4]
   19720:	str	sl, [sp]
   19724:	add	r3, sp, #20
   19728:	mov	r2, r7
   1972c:	mov	r1, r4
   19730:	mov	r0, r9
   19734:	bl	18b84 <__assert_fail@plt+0x78ac>
   19738:	subs	r9, r0, #0
   1973c:	bne	19884 <__assert_fail@plt+0x85ac>
   19740:	ldrb	r3, [r5]
   19744:	cmp	r3, #0
   19748:	movne	r0, #1
   1974c:	beq	19770 <__assert_fail@plt+0x8498>
   19750:	lsr	r1, r3, #5
   19754:	and	r3, r3, #31
   19758:	ldr	r2, [r4, r1, lsl #2]
   1975c:	orr	r3, r2, r0, lsl r3
   19760:	str	r3, [r4, r1, lsl #2]
   19764:	ldrb	r3, [r5, #1]!
   19768:	cmp	r3, #0
   1976c:	bne	19750 <__assert_fail@plt+0x8478>
   19770:	cmp	r8, #0
   19774:	beq	19794 <__assert_fail@plt+0x84bc>
   19778:	sub	r3, r4, #4
   1977c:	add	r1, r4, #28
   19780:	ldr	r2, [r3, #4]
   19784:	mvn	r2, r2
   19788:	str	r2, [r3, #4]!
   1978c:	cmp	r3, r1
   19790:	bne	19780 <__assert_fail@plt+0x84a8>
   19794:	ldr	r3, [r6, #92]	; 0x5c
   19798:	cmp	r3, #1
   1979c:	ble	197c8 <__assert_fail@plt+0x84f0>
   197a0:	sub	r3, r4, #4
   197a4:	ldr	r1, [r6, #60]	; 0x3c
   197a8:	sub	r1, r1, #4
   197ac:	add	ip, r4, #28
   197b0:	ldr	r2, [r3, #4]
   197b4:	ldr	r0, [r1, #4]!
   197b8:	and	r2, r2, r0
   197bc:	str	r2, [r3, #4]!
   197c0:	cmp	r3, ip
   197c4:	bne	197b0 <__assert_fail@plt+0x84d8>
   197c8:	mov	r1, #0
   197cc:	str	r1, [sp, #16]
   197d0:	str	r4, [sp, #12]
   197d4:	mov	r3, #3
   197d8:	strb	r3, [sp, #16]
   197dc:	add	r3, sp, #12
   197e0:	mov	r2, r1
   197e4:	mov	r0, r6
   197e8:	bl	1541c <__assert_fail@plt+0x4144>
   197ec:	subs	r5, r0, #0
   197f0:	beq	198b0 <__assert_fail@plt+0x85d8>
   197f4:	ldr	r3, [r6, #92]	; 0x5c
   197f8:	cmp	r3, #1
   197fc:	ble	198a4 <__assert_fail@plt+0x85cc>
   19800:	mov	r3, #6
   19804:	strb	r3, [sp, #16]
   19808:	add	r3, sp, #24
   1980c:	str	r7, [r3, #-12]!
   19810:	ldrb	r2, [r6, #88]	; 0x58
   19814:	orr	r2, r2, #2
   19818:	strb	r2, [r6, #88]	; 0x58
   1981c:	mov	r2, #0
   19820:	mov	r1, r2
   19824:	mov	r0, r6
   19828:	bl	1541c <__assert_fail@plt+0x4144>
   1982c:	subs	r2, r0, #0
   19830:	beq	198b0 <__assert_fail@plt+0x85d8>
   19834:	mov	r3, #10
   19838:	mov	r1, r5
   1983c:	mov	r0, r6
   19840:	bl	15590 <__assert_fail@plt+0x42b8>
   19844:	mov	r5, r0
   19848:	mov	r0, r5
   1984c:	add	sp, sp, #24
   19850:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19854:	mov	r3, #12
   19858:	ldr	r2, [sp, #60]	; 0x3c
   1985c:	str	r3, [r2]
   19860:	mov	r5, #0
   19864:	b	19848 <__assert_fail@plt+0x8570>
   19868:	mov	r0, r4
   1986c:	bl	22f00 <__assert_fail@plt+0x11c28>
   19870:	mov	r3, #12
   19874:	ldr	r2, [sp, #60]	; 0x3c
   19878:	str	r3, [r2]
   1987c:	mov	r5, #0
   19880:	b	19848 <__assert_fail@plt+0x8570>
   19884:	mov	r0, r4
   19888:	bl	22f00 <__assert_fail@plt+0x11c28>
   1988c:	mov	r0, r7
   19890:	bl	16fd8 <__assert_fail@plt+0x5d00>
   19894:	ldr	r3, [sp, #60]	; 0x3c
   19898:	str	r9, [r3]
   1989c:	mov	r5, #0
   198a0:	b	19848 <__assert_fail@plt+0x8570>
   198a4:	mov	r0, r7
   198a8:	bl	16fd8 <__assert_fail@plt+0x5d00>
   198ac:	b	19848 <__assert_fail@plt+0x8570>
   198b0:	mov	r0, r4
   198b4:	bl	22f00 <__assert_fail@plt+0x11c28>
   198b8:	mov	r0, r7
   198bc:	bl	16fd8 <__assert_fail@plt+0x5d00>
   198c0:	mov	r3, #12
   198c4:	ldr	r2, [sp, #60]	; 0x3c
   198c8:	str	r3, [r2]
   198cc:	mov	r5, #0
   198d0:	b	19848 <__assert_fail@plt+0x8570>
   198d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198d8:	ldr	r9, [r0]
   198dc:	add	ip, r9, r1, lsl #3
   198e0:	ldrb	r8, [ip, #4]
   198e4:	cmp	r8, #7
   198e8:	beq	1993c <__assert_fail@plt+0x8664>
   198ec:	mov	r4, r3
   198f0:	mov	r5, r2
   198f4:	mov	r7, r1
   198f8:	mov	r6, r0
   198fc:	mov	r1, r3
   19900:	mov	r0, r2
   19904:	bl	1469c <__assert_fail@plt+0x33c4>
   19908:	mov	sl, r0
   1990c:	cmp	r8, #5
   19910:	beq	19a54 <__assert_fail@plt+0x877c>
   19914:	cmp	r8, #6
   19918:	movne	r8, #0
   1991c:	moveq	r8, #1
   19920:	cmp	r0, #1
   19924:	movle	r8, #0
   19928:	cmp	r8, #0
   1992c:	moveq	sl, #0
   19930:	bne	19a9c <__assert_fail@plt+0x87c4>
   19934:	mov	r0, sl
   19938:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1993c:	ldr	r0, [r2, #4]
   19940:	ldrb	r1, [r0, r3]
   19944:	cmp	r1, #193	; 0xc1
   19948:	movls	sl, #0
   1994c:	bls	19934 <__assert_fail@plt+0x865c>
   19950:	ldr	ip, [r2, #48]	; 0x30
   19954:	add	r2, r3, #2
   19958:	cmp	r2, ip
   1995c:	movgt	sl, #0
   19960:	bgt	19934 <__assert_fail@plt+0x865c>
   19964:	add	lr, r3, #1
   19968:	add	r2, r0, lr
   1996c:	ldrb	lr, [r0, lr]
   19970:	cmp	r1, #223	; 0xdf
   19974:	bhi	1998c <__assert_fail@plt+0x86b4>
   19978:	eor	lr, lr, #128	; 0x80
   1997c:	cmp	lr, #63	; 0x3f
   19980:	movls	sl, #2
   19984:	movhi	sl, #0
   19988:	b	19934 <__assert_fail@plt+0x865c>
   1998c:	cmp	r1, #239	; 0xef
   19990:	bhi	199f0 <__assert_fail@plt+0x8718>
   19994:	cmp	lr, #159	; 0x9f
   19998:	cmpls	r1, #224	; 0xe0
   1999c:	movne	sl, #3
   199a0:	beq	19bd4 <__assert_fail@plt+0x88fc>
   199a4:	add	r1, sl, r3
   199a8:	cmp	ip, r1
   199ac:	blt	19be4 <__assert_fail@plt+0x890c>
   199b0:	add	r3, r0, r3
   199b4:	ldrb	r3, [r3, #1]
   199b8:	eor	r3, r3, #128	; 0x80
   199bc:	cmp	r3, #63	; 0x3f
   199c0:	bhi	19bdc <__assert_fail@plt+0x8904>
   199c4:	mov	r1, r2
   199c8:	mov	r2, #1
   199cc:	add	r2, r2, #1
   199d0:	cmp	sl, r2
   199d4:	ble	19934 <__assert_fail@plt+0x865c>
   199d8:	ldrb	r3, [r1, #1]!
   199dc:	eor	r3, r3, #128	; 0x80
   199e0:	cmp	r3, #63	; 0x3f
   199e4:	bls	199cc <__assert_fail@plt+0x86f4>
   199e8:	mov	sl, #0
   199ec:	b	19934 <__assert_fail@plt+0x865c>
   199f0:	cmp	r1, #247	; 0xf7
   199f4:	bhi	19a10 <__assert_fail@plt+0x8738>
   199f8:	cmp	lr, #143	; 0x8f
   199fc:	cmpls	r1, #240	; 0xf0
   19a00:	movne	sl, #4
   19a04:	bne	199a4 <__assert_fail@plt+0x86cc>
   19a08:	mov	sl, #0
   19a0c:	b	19934 <__assert_fail@plt+0x865c>
   19a10:	cmp	r1, #251	; 0xfb
   19a14:	bhi	19a30 <__assert_fail@plt+0x8758>
   19a18:	cmp	lr, #135	; 0x87
   19a1c:	cmpls	r1, #248	; 0xf8
   19a20:	movne	sl, #5
   19a24:	bne	199a4 <__assert_fail@plt+0x86cc>
   19a28:	mov	sl, #0
   19a2c:	b	19934 <__assert_fail@plt+0x865c>
   19a30:	cmp	r1, #253	; 0xfd
   19a34:	movhi	sl, #0
   19a38:	bhi	19934 <__assert_fail@plt+0x865c>
   19a3c:	cmp	lr, #131	; 0x83
   19a40:	cmpls	r1, #252	; 0xfc
   19a44:	movne	sl, #6
   19a48:	bne	199a4 <__assert_fail@plt+0x86cc>
   19a4c:	mov	sl, #0
   19a50:	b	19934 <__assert_fail@plt+0x865c>
   19a54:	cmp	r0, #1
   19a58:	movle	sl, #0
   19a5c:	ble	19934 <__assert_fail@plt+0x865c>
   19a60:	ldr	r3, [r6, #128]	; 0x80
   19a64:	tst	r3, #64	; 0x40
   19a68:	bne	19a80 <__assert_fail@plt+0x87a8>
   19a6c:	ldr	r2, [r5, #4]
   19a70:	ldrb	r2, [r2, r4]
   19a74:	cmp	r2, #10
   19a78:	moveq	sl, #0
   19a7c:	beq	19934 <__assert_fail@plt+0x865c>
   19a80:	tst	r3, #128	; 0x80
   19a84:	beq	19934 <__assert_fail@plt+0x865c>
   19a88:	ldr	r3, [r5, #4]
   19a8c:	ldrb	r3, [r3, r4]
   19a90:	cmp	r3, #0
   19a94:	moveq	sl, #0
   19a98:	b	19934 <__assert_fail@plt+0x865c>
   19a9c:	ldr	r6, [r9, r7, lsl #3]
   19aa0:	ldr	r3, [r6, #32]
   19aa4:	cmp	r3, #0
   19aa8:	bne	19ae8 <__assert_fail@plt+0x8810>
   19aac:	ldr	r3, [r6, #36]	; 0x24
   19ab0:	cmp	r3, #0
   19ab4:	bne	19ae8 <__assert_fail@plt+0x8810>
   19ab8:	ldr	r3, [r6, #20]
   19abc:	cmp	r3, #0
   19ac0:	moveq	r4, #0
   19ac4:	beq	19b8c <__assert_fail@plt+0x88b4>
   19ac8:	mov	r1, r4
   19acc:	mov	r0, r5
   19ad0:	bl	14710 <__assert_fail@plt+0x3438>
   19ad4:	mov	r4, r0
   19ad8:	ldr	r0, [r6, #20]
   19adc:	cmp	r0, #0
   19ae0:	bgt	19b04 <__assert_fail@plt+0x882c>
   19ae4:	b	19b8c <__assert_fail@plt+0x88b4>
   19ae8:	mov	r1, r4
   19aec:	mov	r0, r5
   19af0:	bl	14710 <__assert_fail@plt+0x3438>
   19af4:	mov	r4, r0
   19af8:	ldr	r0, [r6, #20]
   19afc:	cmp	r0, #0
   19b00:	ble	19b54 <__assert_fail@plt+0x887c>
   19b04:	ldr	r2, [r6]
   19b08:	ldr	r3, [r2]
   19b0c:	cmp	r4, r3
   19b10:	beq	19b30 <__assert_fail@plt+0x8858>
   19b14:	mov	r3, #0
   19b18:	add	r3, r3, #1
   19b1c:	cmp	r0, r3
   19b20:	beq	19b54 <__assert_fail@plt+0x887c>
   19b24:	ldr	r1, [r2, #4]!
   19b28:	cmp	r4, r1
   19b2c:	bne	19b18 <__assert_fail@plt+0x8840>
   19b30:	ldrb	r3, [r6, #16]
   19b34:	tst	r3, #1
   19b38:	beq	19934 <__assert_fail@plt+0x865c>
   19b3c:	cmp	sl, #0
   19b40:	movgt	sl, #0
   19b44:	bgt	19934 <__assert_fail@plt+0x865c>
   19b48:	cmp	sl, #1
   19b4c:	movlt	sl, #1
   19b50:	b	19934 <__assert_fail@plt+0x865c>
   19b54:	ldr	r3, [r6, #36]	; 0x24
   19b58:	cmp	r3, #0
   19b5c:	ble	19b8c <__assert_fail@plt+0x88b4>
   19b60:	mov	r5, #0
   19b64:	ldr	r3, [r6, #12]
   19b68:	ldr	r1, [r3, r5, lsl #2]
   19b6c:	mov	r0, r4
   19b70:	bl	10ffc <iswctype@plt>
   19b74:	cmp	r0, #0
   19b78:	bne	19b30 <__assert_fail@plt+0x8858>
   19b7c:	add	r5, r5, #1
   19b80:	ldr	r3, [r6, #36]	; 0x24
   19b84:	cmp	r3, r5
   19b88:	bgt	19b64 <__assert_fail@plt+0x888c>
   19b8c:	ldr	r0, [r6, #32]
   19b90:	cmp	r0, #0
   19b94:	ble	19bec <__assert_fail@plt+0x8914>
   19b98:	ldr	r2, [r6, #4]
   19b9c:	sub	r2, r2, #4
   19ba0:	mov	r3, #0
   19ba4:	b	19bb4 <__assert_fail@plt+0x88dc>
   19ba8:	add	r3, r3, #1
   19bac:	cmp	r0, r3
   19bb0:	beq	19bec <__assert_fail@plt+0x8914>
   19bb4:	ldr	r1, [r2, #4]!
   19bb8:	cmp	r4, r1
   19bbc:	bcc	19ba8 <__assert_fail@plt+0x88d0>
   19bc0:	ldr	r1, [r6, #8]
   19bc4:	ldr	r1, [r1, r3, lsl #2]
   19bc8:	cmp	r4, r1
   19bcc:	bhi	19ba8 <__assert_fail@plt+0x88d0>
   19bd0:	b	19b30 <__assert_fail@plt+0x8858>
   19bd4:	mov	sl, #0
   19bd8:	b	19934 <__assert_fail@plt+0x865c>
   19bdc:	mov	sl, #0
   19be0:	b	19934 <__assert_fail@plt+0x865c>
   19be4:	mov	sl, #0
   19be8:	b	19934 <__assert_fail@plt+0x865c>
   19bec:	ldrb	r3, [r6, #16]
   19bf0:	tst	r3, #1
   19bf4:	bne	19b48 <__assert_fail@plt+0x8870>
   19bf8:	mov	sl, #0
   19bfc:	b	19934 <__assert_fail@plt+0x865c>
   19c00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c04:	sub	sp, sp, #28
   19c08:	str	r3, [sp, #4]
   19c0c:	add	r3, r1, r1, lsl #1
   19c10:	ldr	r6, [r0, #28]
   19c14:	add	r6, r6, r3, lsl #2
   19c18:	mov	r3, #0
   19c1c:	str	r3, [sp, #12]
   19c20:	str	r3, [sp, #16]
   19c24:	str	r3, [sp, #20]
   19c28:	ldr	r3, [r6, #4]
   19c2c:	cmp	r3, #0
   19c30:	ble	19cac <__assert_fail@plt+0x89d4>
   19c34:	mov	r7, r0
   19c38:	mov	r8, r1
   19c3c:	mov	fp, r2
   19c40:	mov	r5, #0
   19c44:	b	19d18 <__assert_fail@plt+0x8a40>
   19c48:	ldr	r0, [sp, #20]
   19c4c:	bl	22f00 <__assert_fail@plt+0x11c28>
   19c50:	b	19cb8 <__assert_fail@plt+0x89e0>
   19c54:	cmp	r3, #0
   19c58:	ble	19cac <__assert_fail@plt+0x89d4>
   19c5c:	mov	r4, #0
   19c60:	b	19c74 <__assert_fail@plt+0x899c>
   19c64:	add	r4, r4, #1
   19c68:	ldr	r3, [r6, #4]
   19c6c:	cmp	r3, r4
   19c70:	ble	19cac <__assert_fail@plt+0x89d4>
   19c74:	ldr	r3, [r6, #8]
   19c78:	ldr	r5, [r3, r4, lsl #2]
   19c7c:	mov	r1, r5
   19c80:	add	r0, sp, #12
   19c84:	bl	147f4 <__assert_fail@plt+0x351c>
   19c88:	cmp	r0, #0
   19c8c:	bne	19c64 <__assert_fail@plt+0x898c>
   19c90:	mov	r1, r5
   19c94:	mov	r0, fp
   19c98:	bl	147f4 <__assert_fail@plt+0x351c>
   19c9c:	sub	r1, r0, #1
   19ca0:	mov	r0, fp
   19ca4:	bl	1488c <__assert_fail@plt+0x35b4>
   19ca8:	b	19c64 <__assert_fail@plt+0x898c>
   19cac:	ldr	r0, [sp, #20]
   19cb0:	bl	22f00 <__assert_fail@plt+0x11c28>
   19cb4:	mov	r4, #0
   19cb8:	mov	r0, r4
   19cbc:	add	sp, sp, #28
   19cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19cc4:	mov	r1, r9
   19cc8:	mov	r0, r6
   19ccc:	bl	147f4 <__assert_fail@plt+0x351c>
   19cd0:	cmp	r0, #0
   19cd4:	bne	19d08 <__assert_fail@plt+0x8a30>
   19cd8:	mov	r1, r9
   19cdc:	mov	r0, fp
   19ce0:	bl	147f4 <__assert_fail@plt+0x351c>
   19ce4:	cmp	r0, #0
   19ce8:	beq	19d08 <__assert_fail@plt+0x8a30>
   19cec:	ldr	r2, [r7, #28]
   19cf0:	add	r2, r2, r4
   19cf4:	ldr	r1, [sp, #4]
   19cf8:	add	r0, sp, #12
   19cfc:	bl	15a70 <__assert_fail@plt+0x4798>
   19d00:	subs	r4, r0, #0
   19d04:	bne	19c48 <__assert_fail@plt+0x8970>
   19d08:	add	r5, r5, #1
   19d0c:	ldr	r3, [r6, #4]
   19d10:	cmp	r3, r5
   19d14:	ble	19c54 <__assert_fail@plt+0x897c>
   19d18:	ldr	r3, [r6, #8]
   19d1c:	ldr	r4, [r3, r5, lsl #2]
   19d20:	cmp	r8, r4
   19d24:	beq	19d08 <__assert_fail@plt+0x8a30>
   19d28:	ldr	r3, [r7]
   19d2c:	add	r3, r3, r4, lsl #3
   19d30:	ldrb	r3, [r3, #4]
   19d34:	tst	r3, #8
   19d38:	beq	19d08 <__assert_fail@plt+0x8a30>
   19d3c:	add	r4, r4, r4, lsl #1
   19d40:	lsl	r4, r4, #2
   19d44:	ldr	r3, [r7, #20]
   19d48:	add	r3, r3, r4
   19d4c:	ldr	r2, [r3, #8]
   19d50:	ldr	r9, [r2]
   19d54:	ldr	r3, [r3, #4]
   19d58:	cmp	r3, #1
   19d5c:	ble	19cc4 <__assert_fail@plt+0x89ec>
   19d60:	ldr	sl, [r2, #4]
   19d64:	mov	r1, r9
   19d68:	mov	r0, r6
   19d6c:	bl	147f4 <__assert_fail@plt+0x351c>
   19d70:	cmp	r0, #0
   19d74:	bne	19d8c <__assert_fail@plt+0x8ab4>
   19d78:	mov	r1, r9
   19d7c:	mov	r0, fp
   19d80:	bl	147f4 <__assert_fail@plt+0x351c>
   19d84:	cmp	r0, #0
   19d88:	bne	19cec <__assert_fail@plt+0x8a14>
   19d8c:	cmp	sl, #0
   19d90:	ble	19d08 <__assert_fail@plt+0x8a30>
   19d94:	mov	r1, sl
   19d98:	mov	r0, r6
   19d9c:	bl	147f4 <__assert_fail@plt+0x351c>
   19da0:	cmp	r0, #0
   19da4:	bne	19d08 <__assert_fail@plt+0x8a30>
   19da8:	mov	r1, sl
   19dac:	mov	r0, fp
   19db0:	bl	147f4 <__assert_fail@plt+0x351c>
   19db4:	cmp	r0, #0
   19db8:	beq	19d08 <__assert_fail@plt+0x8a30>
   19dbc:	b	19cec <__assert_fail@plt+0x8a14>
   19dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dc4:	sub	sp, sp, #36	; 0x24
   19dc8:	mov	r4, r0
   19dcc:	mov	r6, r1
   19dd0:	mov	r7, r2
   19dd4:	ldr	r5, [r0, #24]
   19dd8:	cmp	r5, r1
   19ddc:	suble	r5, r1, r5
   19de0:	ble	19e44 <__assert_fail@plt+0x8b6c>
   19de4:	ldr	r3, [r0, #80]	; 0x50
   19de8:	cmp	r3, #1
   19dec:	movgt	r3, #0
   19df0:	strgt	r3, [r0, #16]
   19df4:	strgt	r3, [r0, #20]
   19df8:	ldr	r3, [r0, #44]	; 0x2c
   19dfc:	str	r3, [r0, #48]	; 0x30
   19e00:	ldr	r3, [r0, #52]	; 0x34
   19e04:	str	r3, [r0, #56]	; 0x38
   19e08:	mov	r3, #0
   19e0c:	str	r3, [r0, #28]
   19e10:	str	r3, [r0, #24]
   19e14:	str	r3, [r0, #32]
   19e18:	strb	r3, [r0, #76]	; 0x4c
   19e1c:	and	r3, r2, #1
   19e20:	cmp	r3, #0
   19e24:	movne	r3, #4
   19e28:	moveq	r3, #6
   19e2c:	str	r3, [r0, #60]	; 0x3c
   19e30:	ldrb	r3, [r0, #75]	; 0x4b
   19e34:	cmp	r3, #0
   19e38:	ldreq	r3, [r0]
   19e3c:	streq	r3, [r0, #4]
   19e40:	mov	r5, r1
   19e44:	cmp	r5, #0
   19e48:	beq	19ed4 <__assert_fail@plt+0x8bfc>
   19e4c:	ldr	r3, [r4, #32]
   19e50:	cmp	r5, r3
   19e54:	bge	1a124 <__assert_fail@plt+0x8e4c>
   19e58:	ldrb	r3, [r4, #76]	; 0x4c
   19e5c:	cmp	r3, #0
   19e60:	bne	19f1c <__assert_fail@plt+0x8c44>
   19e64:	mov	r2, r7
   19e68:	sub	r1, r5, #1
   19e6c:	mov	r0, r4
   19e70:	bl	184a0 <__assert_fail@plt+0x71c8>
   19e74:	str	r0, [r4, #60]	; 0x3c
   19e78:	ldr	r3, [r4, #80]	; 0x50
   19e7c:	cmp	r3, #1
   19e80:	ble	19e9c <__assert_fail@plt+0x8bc4>
   19e84:	ldr	r0, [r4, #8]
   19e88:	ldr	r2, [r4, #28]
   19e8c:	sub	r2, r2, r5
   19e90:	lsl	r2, r2, #2
   19e94:	add	r1, r0, r5, lsl #2
   19e98:	bl	11038 <memmove@plt>
   19e9c:	ldrb	r3, [r4, #75]	; 0x4b
   19ea0:	cmp	r3, #0
   19ea4:	bne	1a10c <__assert_fail@plt+0x8e34>
   19ea8:	ldr	r3, [r4, #28]
   19eac:	sub	r3, r3, r5
   19eb0:	str	r3, [r4, #28]
   19eb4:	ldr	r3, [r4, #32]
   19eb8:	sub	r3, r3, r5
   19ebc:	str	r3, [r4, #32]
   19ec0:	ldrb	r3, [r4, #75]	; 0x4b
   19ec4:	cmp	r3, #0
   19ec8:	ldreq	r3, [r4, #4]
   19ecc:	addeq	r3, r3, r5
   19ed0:	streq	r3, [r4, #4]
   19ed4:	str	r6, [r4, #24]
   19ed8:	ldr	r3, [r4, #48]	; 0x30
   19edc:	sub	r3, r3, r5
   19ee0:	str	r3, [r4, #48]	; 0x30
   19ee4:	ldr	r2, [r4, #56]	; 0x38
   19ee8:	sub	r5, r2, r5
   19eec:	str	r5, [r4, #56]	; 0x38
   19ef0:	ldr	r2, [r4, #80]	; 0x50
   19ef4:	cmp	r2, #1
   19ef8:	ble	1a488 <__assert_fail@plt+0x91b0>
   19efc:	ldrb	r3, [r4, #72]	; 0x48
   19f00:	cmp	r3, #0
   19f04:	beq	1a470 <__assert_fail@plt+0x9198>
   19f08:	mov	r0, r4
   19f0c:	bl	15e38 <__assert_fail@plt+0x4b60>
   19f10:	cmp	r0, #0
   19f14:	beq	1a478 <__assert_fail@plt+0x91a0>
   19f18:	b	1a480 <__assert_fail@plt+0x91a8>
   19f1c:	ldr	sl, [r4, #28]
   19f20:	ldr	r9, [r4, #12]
   19f24:	mov	r2, sl
   19f28:	mov	r1, #0
   19f2c:	b	19f3c <__assert_fail@plt+0x8c64>
   19f30:	mov	r2, r8
   19f34:	cmp	r1, r2
   19f38:	bge	19f60 <__assert_fail@plt+0x8c88>
   19f3c:	add	r3, r1, r2
   19f40:	add	r3, r3, r3, lsr #31
   19f44:	asr	r8, r3, #1
   19f48:	ldr	r3, [r9, r8, lsl #2]
   19f4c:	cmp	r5, r3
   19f50:	blt	19f30 <__assert_fail@plt+0x8c58>
   19f54:	ble	19f68 <__assert_fail@plt+0x8c90>
   19f58:	add	r1, r8, #1
   19f5c:	b	19f34 <__assert_fail@plt+0x8c5c>
   19f60:	cmp	r5, r3
   19f64:	addgt	r8, r8, #1
   19f68:	mov	r2, r7
   19f6c:	sub	r1, r8, #1
   19f70:	mov	r0, r4
   19f74:	bl	184a0 <__assert_fail@plt+0x71c8>
   19f78:	str	r0, [r4, #60]	; 0x3c
   19f7c:	cmp	r5, sl
   19f80:	movge	r3, #0
   19f84:	movlt	r3, #1
   19f88:	cmp	r5, r8
   19f8c:	movne	r3, #0
   19f90:	cmp	r3, #0
   19f94:	bne	1a074 <__assert_fail@plt+0x8d9c>
   19f98:	ldr	r3, [r4, #44]	; 0x2c
   19f9c:	sub	r3, r3, r6
   19fa0:	add	r3, r3, r5
   19fa4:	str	r3, [r4, #48]	; 0x30
   19fa8:	ldr	r3, [r4, #52]	; 0x34
   19fac:	sub	r3, r3, r6
   19fb0:	add	r3, r3, r5
   19fb4:	str	r3, [r4, #56]	; 0x38
   19fb8:	mov	r3, #0
   19fbc:	strb	r3, [r4, #76]	; 0x4c
   19fc0:	cmp	r8, r3
   19fc4:	ble	19ff0 <__assert_fail@plt+0x8d18>
   19fc8:	sub	r2, r8, #-1073741823	; 0xc0000001
   19fcc:	add	r3, r9, r2, lsl #2
   19fd0:	ldr	r2, [r9, r2, lsl #2]
   19fd4:	cmp	r5, r2
   19fd8:	bne	19ff0 <__assert_fail@plt+0x8d18>
   19fdc:	subs	r8, r8, #1
   19fe0:	beq	19ff0 <__assert_fail@plt+0x8d18>
   19fe4:	ldr	r2, [r3, #-4]!
   19fe8:	cmp	r5, r2
   19fec:	beq	19fdc <__assert_fail@plt+0x8d04>
   19ff0:	cmp	sl, r8
   19ff4:	ble	1a0f8 <__assert_fail@plt+0x8e20>
   19ff8:	ldr	r2, [r4, #8]
   19ffc:	add	r3, r2, r8, lsl #2
   1a000:	ldr	r2, [r2, r8, lsl #2]
   1a004:	cmn	r2, #1
   1a008:	bne	1a024 <__assert_fail@plt+0x8d4c>
   1a00c:	add	r8, r8, #1
   1a010:	cmp	sl, r8
   1a014:	beq	1a100 <__assert_fail@plt+0x8e28>
   1a018:	ldr	r2, [r3, #4]!
   1a01c:	cmn	r2, #1
   1a020:	beq	1a00c <__assert_fail@plt+0x8d34>
   1a024:	ldr	r2, [r9, r8, lsl #2]
   1a028:	sub	r2, r2, r5
   1a02c:	str	r2, [r4, #28]
   1a030:	cmp	r2, #0
   1a034:	beq	1a068 <__assert_fail@plt+0x8d90>
   1a038:	ble	1a05c <__assert_fail@plt+0x8d84>
   1a03c:	mov	r3, #0
   1a040:	mvn	r1, #0
   1a044:	ldr	r2, [r4, #8]
   1a048:	str	r1, [r2, r3, lsl #2]
   1a04c:	add	r3, r3, #1
   1a050:	ldr	r2, [r4, #28]
   1a054:	cmp	r2, r3
   1a058:	bgt	1a044 <__assert_fail@plt+0x8d6c>
   1a05c:	mov	r1, #255	; 0xff
   1a060:	ldr	r0, [r4, #4]
   1a064:	bl	111f4 <memset@plt>
   1a068:	ldr	r3, [r4, #28]
   1a06c:	str	r3, [r4, #32]
   1a070:	b	19ec0 <__assert_fail@plt+0x8be8>
   1a074:	ldr	r3, [r9, r8, lsl #2]
   1a078:	cmp	r5, r3
   1a07c:	bne	19f98 <__assert_fail@plt+0x8cc0>
   1a080:	ldr	r0, [r4, #8]
   1a084:	lsl	r7, r5, #2
   1a088:	sub	r2, sl, r5
   1a08c:	lsl	r2, r2, #2
   1a090:	add	r1, r0, r7
   1a094:	bl	11038 <memmove@plt>
   1a098:	ldr	r0, [r4, #4]
   1a09c:	ldr	r2, [r4, #28]
   1a0a0:	sub	r2, r2, r5
   1a0a4:	add	r1, r0, r5
   1a0a8:	bl	11038 <memmove@plt>
   1a0ac:	ldr	r3, [r4, #28]
   1a0b0:	sub	r3, r3, r5
   1a0b4:	str	r3, [r4, #28]
   1a0b8:	ldr	r2, [r4, #32]
   1a0bc:	sub	r2, r2, r5
   1a0c0:	str	r2, [r4, #32]
   1a0c4:	cmp	r3, #0
   1a0c8:	ble	19ec0 <__assert_fail@plt+0x8be8>
   1a0cc:	mov	r3, #0
   1a0d0:	ldr	r1, [r4, #12]
   1a0d4:	ldr	r2, [r1, r7]
   1a0d8:	sub	r2, r2, r5
   1a0dc:	str	r2, [r1, r3, lsl #2]
   1a0e0:	add	r3, r3, #1
   1a0e4:	add	r7, r7, #4
   1a0e8:	ldr	r2, [r4, #28]
   1a0ec:	cmp	r2, r3
   1a0f0:	bgt	1a0d0 <__assert_fail@plt+0x8df8>
   1a0f4:	b	19ec0 <__assert_fail@plt+0x8be8>
   1a0f8:	cmp	sl, r8
   1a0fc:	bne	1a024 <__assert_fail@plt+0x8d4c>
   1a100:	mov	r3, #0
   1a104:	str	r3, [r4, #28]
   1a108:	b	1a068 <__assert_fail@plt+0x8d90>
   1a10c:	ldr	r0, [r4, #4]
   1a110:	ldr	r2, [r4, #28]
   1a114:	sub	r2, r2, r5
   1a118:	add	r1, r0, r5
   1a11c:	bl	11038 <memmove@plt>
   1a120:	b	19ea8 <__assert_fail@plt+0x8bd0>
   1a124:	ldr	fp, [r4, #28]
   1a128:	ldrb	r3, [r4, #76]	; 0x4c
   1a12c:	cmp	r3, #0
   1a130:	bne	1a238 <__assert_fail@plt+0x8f60>
   1a134:	mov	r3, #0
   1a138:	str	r3, [r4, #28]
   1a13c:	ldr	r3, [r4, #80]	; 0x50
   1a140:	cmp	r3, #1
   1a144:	ble	1a400 <__assert_fail@plt+0x9128>
   1a148:	ldrb	r2, [r4, #73]	; 0x49
   1a14c:	cmp	r2, #0
   1a150:	beq	1a214 <__assert_fail@plt+0x8f3c>
   1a154:	ldr	r0, [r4]
   1a158:	ldr	r8, [r4, #24]
   1a15c:	add	r8, r0, r8
   1a160:	sub	r3, r5, r3
   1a164:	add	r3, r8, r3
   1a168:	cmp	r0, r3
   1a16c:	movcc	r0, r3
   1a170:	mov	r9, r5
   1a174:	sub	r3, r5, #1
   1a178:	add	r1, r8, r3
   1a17c:	cmp	r1, r0
   1a180:	bcc	1a214 <__assert_fail@plt+0x8f3c>
   1a184:	ldrb	r3, [r8, r3]
   1a188:	and	r3, r3, #192	; 0xc0
   1a18c:	cmp	r3, #128	; 0x80
   1a190:	subeq	r3, r1, #1
   1a194:	subeq	r0, r0, #1
   1a198:	bne	1a1bc <__assert_fail@plt+0x8ee4>
   1a19c:	mov	r1, r3
   1a1a0:	cmp	r3, r0
   1a1a4:	beq	1a214 <__assert_fail@plt+0x8f3c>
   1a1a8:	sub	r3, r3, #1
   1a1ac:	ldrb	r2, [r1]
   1a1b0:	and	r2, r2, #192	; 0xc0
   1a1b4:	cmp	r2, #128	; 0x80
   1a1b8:	beq	1a19c <__assert_fail@plt+0x8ec4>
   1a1bc:	mov	sl, r1
   1a1c0:	ldr	r2, [r4, #48]	; 0x30
   1a1c4:	add	r2, r8, r2
   1a1c8:	sub	r2, r2, r1
   1a1cc:	ldr	r3, [r4, #64]	; 0x40
   1a1d0:	cmp	r3, #0
   1a1d4:	bne	1a264 <__assert_fail@plt+0x8f8c>
   1a1d8:	mov	r3, #0
   1a1dc:	str	r3, [sp, #24]
   1a1e0:	str	r3, [sp, #28]
   1a1e4:	add	r3, sp, #24
   1a1e8:	add	r0, sp, #12
   1a1ec:	bl	22f8c <__assert_fail@plt+0x11cb4>
   1a1f0:	add	r8, r8, r9
   1a1f4:	sub	sl, r8, sl
   1a1f8:	cmp	r0, sl
   1a1fc:	movcc	r3, #0
   1a200:	movcs	r3, #1
   1a204:	cmn	r0, #3
   1a208:	movhi	r3, #0
   1a20c:	cmp	r3, #0
   1a210:	bne	1a2a8 <__assert_fail@plt+0x8fd0>
   1a214:	ldr	ip, [r4, #24]
   1a218:	ldr	r3, [r4, #32]
   1a21c:	add	ip, ip, r3
   1a220:	cmp	r6, ip
   1a224:	ble	1a4c8 <__assert_fail@plt+0x91f0>
   1a228:	add	sl, sp, #24
   1a22c:	add	r9, r4, #16
   1a230:	str	r5, [sp, #4]
   1a234:	b	1a2d8 <__assert_fail@plt+0x9000>
   1a238:	ldr	r3, [r4, #44]	; 0x2c
   1a23c:	sub	r3, r3, r6
   1a240:	add	r3, r3, r5
   1a244:	str	r3, [r4, #48]	; 0x30
   1a248:	ldr	r3, [r4, #52]	; 0x34
   1a24c:	sub	r3, r3, r6
   1a250:	add	r3, r3, r5
   1a254:	str	r3, [r4, #56]	; 0x38
   1a258:	mov	r3, #0
   1a25c:	strb	r3, [r4, #76]	; 0x4c
   1a260:	b	1a134 <__assert_fail@plt+0x8e5c>
   1a264:	cmp	r2, #6
   1a268:	movlt	ip, r2
   1a26c:	movge	ip, #6
   1a270:	cmp	ip, #1
   1a274:	addmi	r1, sp, #16
   1a278:	bmi	1a1d8 <__assert_fail@plt+0x8f00>
   1a27c:	add	r0, r1, ip
   1a280:	add	lr, sp, #32
   1a284:	add	ip, lr, ip
   1a288:	sub	ip, ip, #17
   1a28c:	ldrb	lr, [r0, #-1]!
   1a290:	ldrb	lr, [r3, lr]
   1a294:	strb	lr, [ip], #-1
   1a298:	cmp	r0, r1
   1a29c:	bne	1a28c <__assert_fail@plt+0x8fb4>
   1a2a0:	add	r1, sp, #16
   1a2a4:	b	1a1d8 <__assert_fail@plt+0x8f00>
   1a2a8:	mov	r3, #0
   1a2ac:	str	r3, [r4, #16]
   1a2b0:	str	r3, [r4, #20]
   1a2b4:	sub	sl, r0, sl
   1a2b8:	str	sl, [r4, #28]
   1a2bc:	ldr	r8, [sp, #12]
   1a2c0:	cmn	r8, #1
   1a2c4:	bne	1a350 <__assert_fail@plt+0x9078>
   1a2c8:	b	1a214 <__assert_fail@plt+0x8f3c>
   1a2cc:	add	ip, r8, r0
   1a2d0:	cmp	r6, ip
   1a2d4:	ble	1a338 <__assert_fail@plt+0x9060>
   1a2d8:	ldr	r5, [r4, #44]	; 0x2c
   1a2dc:	sub	r5, r5, ip
   1a2e0:	ldm	r9, {r0, r1}
   1a2e4:	stm	sl, {r0, r1}
   1a2e8:	mov	r8, ip
   1a2ec:	ldr	r1, [r4]
   1a2f0:	mov	r3, r9
   1a2f4:	mov	r2, r5
   1a2f8:	add	r1, r1, ip
   1a2fc:	add	r0, sp, #16
   1a300:	bl	22f8c <__assert_fail@plt+0x11cb4>
   1a304:	sub	r3, r0, #1
   1a308:	cmn	r3, #4
   1a30c:	ldrls	r3, [sp, #16]
   1a310:	bls	1a2cc <__assert_fail@plt+0x8ff4>
   1a314:	cmp	r5, #0
   1a318:	cmpne	r0, #0
   1a31c:	ldrne	r3, [r4]
   1a320:	ldrbne	r3, [r3, r8]
   1a324:	moveq	r3, #0
   1a328:	ldm	sl, {r0, r1}
   1a32c:	stm	r9, {r0, r1}
   1a330:	mov	r0, #1
   1a334:	b	1a2cc <__assert_fail@plt+0x8ff4>
   1a338:	ldr	r5, [sp, #4]
   1a33c:	mov	r8, r3
   1a340:	sub	ip, ip, r6
   1a344:	str	ip, [r4, #28]
   1a348:	cmn	r3, #1
   1a34c:	beq	1a4d0 <__assert_fail@plt+0x91f8>
   1a350:	ldrb	r3, [r4, #78]	; 0x4e
   1a354:	cmp	r3, #0
   1a358:	bne	1a384 <__assert_fail@plt+0x90ac>
   1a35c:	cmp	r8, #10
   1a360:	movne	r3, #0
   1a364:	beq	1a3ac <__assert_fail@plt+0x90d4>
   1a368:	str	r3, [r4, #60]	; 0x3c
   1a36c:	ldr	r2, [r4, #28]
   1a370:	cmp	r2, #0
   1a374:	bne	1a3c0 <__assert_fail@plt+0x90e8>
   1a378:	ldr	r3, [r4, #28]
   1a37c:	str	r3, [r4, #32]
   1a380:	b	19ec0 <__assert_fail@plt+0x8be8>
   1a384:	mov	r0, r8
   1a388:	bl	111dc <iswalnum@plt>
   1a38c:	clz	r0, r0
   1a390:	lsr	r0, r0, #5
   1a394:	cmp	r8, #95	; 0x5f
   1a398:	moveq	r0, #0
   1a39c:	cmp	r0, #0
   1a3a0:	moveq	r3, #1
   1a3a4:	bne	1a35c <__assert_fail@plt+0x9084>
   1a3a8:	b	1a368 <__assert_fail@plt+0x9090>
   1a3ac:	ldrb	r3, [r4, #77]	; 0x4d
   1a3b0:	cmp	r3, #0
   1a3b4:	movne	r3, #2
   1a3b8:	moveq	r3, #0
   1a3bc:	b	1a368 <__assert_fail@plt+0x9090>
   1a3c0:	ble	1a3e4 <__assert_fail@plt+0x910c>
   1a3c4:	mov	r3, #0
   1a3c8:	mvn	r1, #0
   1a3cc:	ldr	r2, [r4, #8]
   1a3d0:	str	r1, [r2, r3, lsl #2]
   1a3d4:	add	r3, r3, #1
   1a3d8:	ldr	r2, [r4, #28]
   1a3dc:	cmp	r2, r3
   1a3e0:	bgt	1a3cc <__assert_fail@plt+0x90f4>
   1a3e4:	ldrb	r3, [r4, #75]	; 0x4b
   1a3e8:	cmp	r3, #0
   1a3ec:	beq	1a378 <__assert_fail@plt+0x90a0>
   1a3f0:	mov	r1, #255	; 0xff
   1a3f4:	ldr	r0, [r4, #4]
   1a3f8:	bl	111f4 <memset@plt>
   1a3fc:	b	1a378 <__assert_fail@plt+0x90a0>
   1a400:	ldr	r3, [r4]
   1a404:	ldr	r2, [r4, #24]
   1a408:	add	r3, r3, r5
   1a40c:	add	r3, r3, r2
   1a410:	ldrb	r3, [r3, #-1]
   1a414:	mov	r2, #0
   1a418:	str	r2, [r4, #32]
   1a41c:	ldr	r2, [r4, #64]	; 0x40
   1a420:	cmp	r2, #0
   1a424:	ldrbne	r3, [r2, r3]
   1a428:	lsr	r1, r3, #5
   1a42c:	ldr	r0, [r4, #68]	; 0x44
   1a430:	and	r2, r3, #31
   1a434:	ldr	r1, [r0, r1, lsl #2]
   1a438:	lsr	r2, r1, r2
   1a43c:	tst	r2, #1
   1a440:	movne	r3, #1
   1a444:	bne	1a454 <__assert_fail@plt+0x917c>
   1a448:	cmp	r3, #10
   1a44c:	movne	r3, #0
   1a450:	beq	1a45c <__assert_fail@plt+0x9184>
   1a454:	str	r3, [r4, #60]	; 0x3c
   1a458:	b	19ec0 <__assert_fail@plt+0x8be8>
   1a45c:	ldrb	r3, [r4, #77]	; 0x4d
   1a460:	cmp	r3, #0
   1a464:	movne	r3, #2
   1a468:	moveq	r3, #0
   1a46c:	b	1a454 <__assert_fail@plt+0x917c>
   1a470:	mov	r0, r4
   1a474:	bl	158d4 <__assert_fail@plt+0x45fc>
   1a478:	mov	r0, #0
   1a47c:	str	r0, [r4, #40]	; 0x28
   1a480:	add	sp, sp, #36	; 0x24
   1a484:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a488:	ldrb	r2, [r4, #75]	; 0x4b
   1a48c:	cmp	r2, #0
   1a490:	streq	r3, [r4, #28]
   1a494:	beq	1a478 <__assert_fail@plt+0x91a0>
   1a498:	ldrb	r3, [r4, #72]	; 0x48
   1a49c:	cmp	r3, #0
   1a4a0:	bne	1a4bc <__assert_fail@plt+0x91e4>
   1a4a4:	ldr	r3, [r4, #64]	; 0x40
   1a4a8:	cmp	r3, #0
   1a4ac:	beq	1a478 <__assert_fail@plt+0x91a0>
   1a4b0:	mov	r0, r4
   1a4b4:	bl	1472c <__assert_fail@plt+0x3454>
   1a4b8:	b	1a478 <__assert_fail@plt+0x91a0>
   1a4bc:	mov	r0, r4
   1a4c0:	bl	163f8 <__assert_fail@plt+0x5120>
   1a4c4:	b	1a478 <__assert_fail@plt+0x91a0>
   1a4c8:	sub	ip, ip, r6
   1a4cc:	str	ip, [r4, #28]
   1a4d0:	mov	r2, r7
   1a4d4:	sub	r1, fp, #1
   1a4d8:	mov	r0, r4
   1a4dc:	bl	184a0 <__assert_fail@plt+0x71c8>
   1a4e0:	str	r0, [r4, #60]	; 0x3c
   1a4e4:	b	1a36c <__assert_fail@plt+0x9094>
   1a4e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4ec:	sub	sp, sp, #14464	; 0x3880
   1a4f0:	sub	sp, sp, #52	; 0x34
   1a4f4:	mov	r9, r0
   1a4f8:	mov	r4, r1
   1a4fc:	str	r1, [sp, #4]
   1a500:	mov	r1, #0
   1a504:	str	r1, [r4, #44]	; 0x2c
   1a508:	str	r1, [r4, #48]	; 0x30
   1a50c:	mov	r2, #32
   1a510:	add	r0, sp, #32
   1a514:	bl	111f4 <memset@plt>
   1a518:	ldr	r3, [r4, #8]
   1a51c:	cmp	r3, #0
   1a520:	ble	1ab74 <__assert_fail@plt+0x989c>
   1a524:	mov	r8, #0
   1a528:	str	r8, [sp, #12]
   1a52c:	add	r3, sp, #8320	; 0x2080
   1a530:	str	r3, [sp, #24]
   1a534:	add	r3, sp, #32
   1a538:	str	r3, [sp, #28]
   1a53c:	str	r9, [sp, #20]
   1a540:	b	1a980 <__assert_fail@plt+0x96a8>
   1a544:	ldrb	r3, [r3, r2, lsl #3]
   1a548:	asr	r1, r3, #5
   1a54c:	and	r3, r3, #31
   1a550:	ldr	ip, [sp, #28]
   1a554:	ldr	r2, [ip, r1, lsl #2]
   1a558:	mov	r0, #1
   1a55c:	orr	r3, r2, r0, lsl r3
   1a560:	str	r3, [ip, r1, lsl #2]
   1a564:	cmp	r4, #0
   1a568:	beq	1a648 <__assert_fail@plt+0x9370>
   1a56c:	tst	r4, #32
   1a570:	bne	1a704 <__assert_fail@plt+0x942c>
   1a574:	tst	r4, #128	; 0x80
   1a578:	bne	1a730 <__assert_fail@plt+0x9458>
   1a57c:	tst	r4, #4
   1a580:	beq	1a5e4 <__assert_fail@plt+0x930c>
   1a584:	cmp	r9, #1
   1a588:	beq	1a744 <__assert_fail@plt+0x946c>
   1a58c:	ldr	r2, [sp, #20]
   1a590:	ldr	r3, [r2, #92]	; 0x5c
   1a594:	cmp	r3, #1
   1a598:	ble	1a768 <__assert_fail@plt+0x9490>
   1a59c:	add	r0, sp, #32
   1a5a0:	add	r1, r2, #96	; 0x60
   1a5a4:	ldr	lr, [r2, #60]	; 0x3c
   1a5a8:	sub	lr, lr, #4
   1a5ac:	add	r5, r2, #128	; 0x80
   1a5b0:	mov	ip, #0
   1a5b4:	ldr	r2, [r1], #4
   1a5b8:	ldr	r3, [lr, #4]!
   1a5bc:	mvn	r3, r3
   1a5c0:	orr	r3, r3, r2
   1a5c4:	ldr	r2, [r0]
   1a5c8:	and	r3, r3, r2
   1a5cc:	str	r3, [r0], #4
   1a5d0:	orr	ip, ip, r3
   1a5d4:	cmp	r1, r5
   1a5d8:	bne	1a5b4 <__assert_fail@plt+0x92dc>
   1a5dc:	cmp	ip, #0
   1a5e0:	beq	1a960 <__assert_fail@plt+0x9688>
   1a5e4:	tst	r4, #8
   1a5e8:	beq	1a648 <__assert_fail@plt+0x9370>
   1a5ec:	cmp	r9, #1
   1a5f0:	beq	1a79c <__assert_fail@plt+0x94c4>
   1a5f4:	ldr	r2, [sp, #20]
   1a5f8:	ldr	r3, [r2, #92]	; 0x5c
   1a5fc:	cmp	r3, #1
   1a600:	ble	1a7c0 <__assert_fail@plt+0x94e8>
   1a604:	add	ip, sp, #32
   1a608:	add	r0, r2, #96	; 0x60
   1a60c:	ldr	lr, [r2, #60]	; 0x3c
   1a610:	sub	lr, lr, #4
   1a614:	add	r4, r2, #128	; 0x80
   1a618:	mov	r1, #0
   1a61c:	ldr	r3, [r0], #4
   1a620:	ldr	r2, [lr, #4]!
   1a624:	and	r2, r2, r3
   1a628:	ldr	r3, [ip]
   1a62c:	bic	r3, r3, r2
   1a630:	str	r3, [ip], #4
   1a634:	orr	r1, r1, r3
   1a638:	cmp	r0, r4
   1a63c:	bne	1a61c <__assert_fail@plt+0x9344>
   1a640:	cmp	r1, #0
   1a644:	beq	1a960 <__assert_fail@plt+0x9688>
   1a648:	cmp	r8, #0
   1a64c:	ble	1a954 <__assert_fail@plt+0x967c>
   1a650:	add	r5, sp, #124	; 0x7c
   1a654:	add	r6, sp, #8320	; 0x2080
   1a658:	mov	r7, #0
   1a65c:	b	1a86c <__assert_fail@plt+0x9594>
   1a660:	ldr	ip, [r3, r2, lsl #3]
   1a664:	add	r0, sp, #32
   1a668:	sub	r1, ip, #4
   1a66c:	add	ip, ip, #28
   1a670:	ldr	r3, [r0]
   1a674:	ldr	r2, [r1, #4]!
   1a678:	orr	r3, r3, r2
   1a67c:	str	r3, [r0], #4
   1a680:	cmp	r1, ip
   1a684:	bne	1a670 <__assert_fail@plt+0x9398>
   1a688:	b	1a564 <__assert_fail@plt+0x928c>
   1a68c:	ldr	r2, [sp, #20]
   1a690:	ldr	r3, [r2, #92]	; 0x5c
   1a694:	cmp	r3, #1
   1a698:	ble	1a6f0 <__assert_fail@plt+0x9418>
   1a69c:	ldr	ip, [r2, #60]	; 0x3c
   1a6a0:	add	r0, sp, #32
   1a6a4:	sub	r1, ip, #4
   1a6a8:	add	ip, ip, #28
   1a6ac:	ldr	r3, [r0]
   1a6b0:	ldr	r2, [r1, #4]!
   1a6b4:	orr	r3, r3, r2
   1a6b8:	str	r3, [r0], #4
   1a6bc:	cmp	r1, ip
   1a6c0:	bne	1a6ac <__assert_fail@plt+0x93d4>
   1a6c4:	ldr	r3, [sp, #20]
   1a6c8:	ldr	r3, [r3, #128]	; 0x80
   1a6cc:	tst	r3, #64	; 0x40
   1a6d0:	ldreq	r2, [sp, #32]
   1a6d4:	biceq	r2, r2, #1024	; 0x400
   1a6d8:	streq	r2, [sp, #32]
   1a6dc:	tst	r3, #128	; 0x80
   1a6e0:	ldrne	r3, [sp, #32]
   1a6e4:	bicne	r3, r3, #1
   1a6e8:	strne	r3, [sp, #32]
   1a6ec:	b	1a564 <__assert_fail@plt+0x928c>
   1a6f0:	mov	r2, #32
   1a6f4:	mvn	r1, #0
   1a6f8:	ldr	r0, [sp, #28]
   1a6fc:	bl	111f4 <memset@plt>
   1a700:	b	1a6c4 <__assert_fail@plt+0x93ec>
   1a704:	ldr	r5, [sp, #32]
   1a708:	and	r5, r5, #1024	; 0x400
   1a70c:	mov	r2, #32
   1a710:	mov	r1, #0
   1a714:	ldr	r0, [sp, #28]
   1a718:	bl	111f4 <memset@plt>
   1a71c:	cmp	r5, #0
   1a720:	beq	1a960 <__assert_fail@plt+0x9688>
   1a724:	mov	r3, #1024	; 0x400
   1a728:	str	r3, [sp, #32]
   1a72c:	b	1a574 <__assert_fail@plt+0x929c>
   1a730:	mov	r2, #32
   1a734:	mov	r1, #0
   1a738:	ldr	r0, [sp, #28]
   1a73c:	bl	111f4 <memset@plt>
   1a740:	b	1a960 <__assert_fail@plt+0x9688>
   1a744:	ldr	r3, [sp, #16]
   1a748:	ldrb	r3, [r3, #6]
   1a74c:	tst	r3, #64	; 0x40
   1a750:	bne	1a58c <__assert_fail@plt+0x92b4>
   1a754:	mov	r2, #32
   1a758:	mov	r1, #0
   1a75c:	ldr	r0, [sp, #28]
   1a760:	bl	111f4 <memset@plt>
   1a764:	b	1a960 <__assert_fail@plt+0x9688>
   1a768:	add	r1, sp, #32
   1a76c:	ldr	r3, [sp, #20]
   1a770:	add	r2, r3, #96	; 0x60
   1a774:	add	r0, r3, #128	; 0x80
   1a778:	mov	ip, #0
   1a77c:	ldr	r3, [r2], #4
   1a780:	ldr	lr, [r1]
   1a784:	and	r3, r3, lr
   1a788:	str	r3, [r1], #4
   1a78c:	orr	ip, ip, r3
   1a790:	cmp	r2, r0
   1a794:	bne	1a77c <__assert_fail@plt+0x94a4>
   1a798:	b	1a5dc <__assert_fail@plt+0x9304>
   1a79c:	ldr	r3, [sp, #16]
   1a7a0:	ldrb	r3, [r3, #6]
   1a7a4:	tst	r3, #64	; 0x40
   1a7a8:	beq	1a5f4 <__assert_fail@plt+0x931c>
   1a7ac:	mov	r2, #32
   1a7b0:	mov	r1, #0
   1a7b4:	ldr	r0, [sp, #28]
   1a7b8:	bl	111f4 <memset@plt>
   1a7bc:	b	1a960 <__assert_fail@plt+0x9688>
   1a7c0:	add	r0, sp, #32
   1a7c4:	ldr	r3, [sp, #20]
   1a7c8:	add	r2, r3, #96	; 0x60
   1a7cc:	add	ip, r3, #128	; 0x80
   1a7d0:	mov	r1, #0
   1a7d4:	ldr	lr, [r2], #4
   1a7d8:	ldr	r3, [r0]
   1a7dc:	bic	r3, r3, lr
   1a7e0:	str	r3, [r0], #4
   1a7e4:	orr	r1, r1, r3
   1a7e8:	cmp	r2, ip
   1a7ec:	bne	1a7d4 <__assert_fail@plt+0x94fc>
   1a7f0:	b	1a640 <__assert_fail@plt+0x9368>
   1a7f4:	ldr	r3, [sp, #16]
   1a7f8:	ldrb	r2, [r3]
   1a7fc:	asr	r1, r2, #5
   1a800:	lsl	r3, r7, #5
   1a804:	add	r3, r3, r1, lsl #2
   1a808:	add	r1, sp, #14464	; 0x3880
   1a80c:	add	r1, r1, #48	; 0x30
   1a810:	add	r3, r1, r3
   1a814:	sub	r3, r3, #14336	; 0x3800
   1a818:	and	r2, r2, #31
   1a81c:	ldr	r3, [r3, #-48]	; 0xffffffd0
   1a820:	lsr	r2, r3, r2
   1a824:	tst	r2, #1
   1a828:	beq	1a858 <__assert_fail@plt+0x9580>
   1a82c:	b	1a874 <__assert_fail@plt+0x959c>
   1a830:	ldr	r3, [sp, #4]
   1a834:	ldr	r3, [r3, #12]
   1a838:	ldr	r2, [sp, #8]
   1a83c:	ldr	r1, [r3, r2]
   1a840:	mov	r0, r6
   1a844:	bl	17b88 <__assert_fail@plt+0x68b0>
   1a848:	cmp	r0, #0
   1a84c:	beq	1aa88 <__assert_fail@plt+0x97b0>
   1a850:	cmp	r4, #0
   1a854:	beq	1a958 <__assert_fail@plt+0x9680>
   1a858:	add	r7, r7, #1
   1a85c:	add	r5, r5, #32
   1a860:	add	r6, r6, #12
   1a864:	cmp	r7, r8
   1a868:	bge	1a958 <__assert_fail@plt+0x9680>
   1a86c:	cmp	r9, #1
   1a870:	beq	1a7f4 <__assert_fail@plt+0x951c>
   1a874:	add	r0, sp, #32
   1a878:	add	r4, sp, #64	; 0x40
   1a87c:	add	sl, r5, #32
   1a880:	mov	r1, r5
   1a884:	mov	lr, r0
   1a888:	mov	ip, #0
   1a88c:	ldr	r3, [lr], #4
   1a890:	ldr	r2, [r1, #4]!
   1a894:	and	r3, r3, r2
   1a898:	str	r3, [r4], #4
   1a89c:	orr	ip, ip, r3
   1a8a0:	cmp	r1, sl
   1a8a4:	bne	1a88c <__assert_fail@plt+0x95b4>
   1a8a8:	cmp	ip, #0
   1a8ac:	beq	1a858 <__assert_fail@plt+0x9580>
   1a8b0:	add	fp, sp, #96	; 0x60
   1a8b4:	mov	ip, r5
   1a8b8:	mov	r4, #0
   1a8bc:	mov	sl, r4
   1a8c0:	ldr	r3, [r0]
   1a8c4:	ldr	r2, [ip, #4]!
   1a8c8:	bic	lr, r2, r3
   1a8cc:	str	lr, [fp], #4
   1a8d0:	orr	sl, sl, lr
   1a8d4:	bic	r3, r3, r2
   1a8d8:	str	r3, [r0], #4
   1a8dc:	orr	r4, r4, r3
   1a8e0:	cmp	ip, r1
   1a8e4:	bne	1a8c0 <__assert_fail@plt+0x95e8>
   1a8e8:	cmp	sl, #0
   1a8ec:	beq	1a830 <__assert_fail@plt+0x9558>
   1a8f0:	add	r3, sp, #14464	; 0x3880
   1a8f4:	add	r3, r3, #48	; 0x30
   1a8f8:	add	ip, r3, r8, lsl #5
   1a8fc:	sub	ip, ip, #14336	; 0x3800
   1a900:	sub	ip, ip, #48	; 0x30
   1a904:	add	lr, sp, #96	; 0x60
   1a908:	ldm	lr!, {r0, r1, r2, r3}
   1a90c:	stmia	ip!, {r0, r1, r2, r3}
   1a910:	ldm	lr, {r0, r1, r2, r3}
   1a914:	stm	ip, {r0, r1, r2, r3}
   1a918:	add	ip, r5, #4
   1a91c:	add	lr, sp, #64	; 0x40
   1a920:	ldm	lr!, {r0, r1, r2, r3}
   1a924:	stmia	ip!, {r0, r1, r2, r3}
   1a928:	ldm	lr, {r0, r1, r2, r3}
   1a92c:	stm	ip, {r0, r1, r2, r3}
   1a930:	add	r0, r8, r8, lsl #1
   1a934:	mov	r1, r6
   1a938:	ldr	r3, [sp, #24]
   1a93c:	add	r0, r3, r0, lsl #2
   1a940:	bl	15c30 <__assert_fail@plt+0x4958>
   1a944:	cmp	r0, #0
   1a948:	bne	1aa88 <__assert_fail@plt+0x97b0>
   1a94c:	add	r8, r8, #1
   1a950:	b	1a830 <__assert_fail@plt+0x9558>
   1a954:	mov	r7, #0
   1a958:	cmp	r8, r7
   1a95c:	beq	1aa1c <__assert_fail@plt+0x9744>
   1a960:	ldr	r3, [sp, #12]
   1a964:	add	r3, r3, #1
   1a968:	mov	r2, r3
   1a96c:	str	r3, [sp, #12]
   1a970:	ldr	r3, [sp, #4]
   1a974:	ldr	r3, [r3, #8]
   1a978:	cmp	r2, r3
   1a97c:	bge	1aac0 <__assert_fail@plt+0x97e8>
   1a980:	ldr	r2, [sp, #12]
   1a984:	lsl	r3, r2, #2
   1a988:	str	r3, [sp, #8]
   1a98c:	ldr	r3, [sp, #4]
   1a990:	ldr	r3, [r3, #12]
   1a994:	ldr	r2, [r3, r2, lsl #2]
   1a998:	ldr	r3, [sp, #20]
   1a99c:	ldr	r3, [r3]
   1a9a0:	add	r1, r3, r2, lsl #3
   1a9a4:	str	r1, [sp, #16]
   1a9a8:	ldrb	r9, [r1, #4]
   1a9ac:	ldr	r4, [r1, #4]
   1a9b0:	lsl	r4, r4, #14
   1a9b4:	lsr	r4, r4, #22
   1a9b8:	cmp	r9, #1
   1a9bc:	beq	1a544 <__assert_fail@plt+0x926c>
   1a9c0:	cmp	r9, #3
   1a9c4:	beq	1a660 <__assert_fail@plt+0x9388>
   1a9c8:	cmp	r9, #5
   1a9cc:	beq	1a68c <__assert_fail@plt+0x93b4>
   1a9d0:	cmp	r9, #7
   1a9d4:	bne	1a960 <__assert_fail@plt+0x9688>
   1a9d8:	mvn	r3, #0
   1a9dc:	ldr	r2, [sp, #28]
   1a9e0:	str	r3, [r2]
   1a9e4:	str	r3, [r2, #4]
   1a9e8:	str	r3, [r2, #8]
   1a9ec:	str	r3, [r2, #12]
   1a9f0:	ldr	r3, [sp, #20]
   1a9f4:	ldr	r2, [r3, #128]	; 0x80
   1a9f8:	tst	r2, #64	; 0x40
   1a9fc:	ldreq	r3, [sp, #32]
   1aa00:	biceq	r3, r3, #1024	; 0x400
   1aa04:	streq	r3, [sp, #32]
   1aa08:	tst	r2, #128	; 0x80
   1aa0c:	ldrne	r3, [sp, #32]
   1aa10:	bicne	r3, r3, #1
   1aa14:	strne	r3, [sp, #32]
   1aa18:	b	1a564 <__assert_fail@plt+0x928c>
   1aa1c:	add	r3, sp, #14464	; 0x3880
   1aa20:	add	r3, r3, #48	; 0x30
   1aa24:	add	ip, r3, r8, lsl #5
   1aa28:	sub	ip, ip, #14336	; 0x3800
   1aa2c:	sub	ip, ip, #48	; 0x30
   1aa30:	add	lr, sp, #32
   1aa34:	ldm	lr!, {r0, r1, r2, r3}
   1aa38:	stmia	ip!, {r0, r1, r2, r3}
   1aa3c:	ldm	lr, {r0, r1, r2, r3}
   1aa40:	stm	ip, {r0, r1, r2, r3}
   1aa44:	ldr	r3, [sp, #4]
   1aa48:	ldr	r3, [r3, #12]
   1aa4c:	add	r0, r8, r8, lsl #1
   1aa50:	ldr	r2, [sp, #8]
   1aa54:	ldr	r1, [r3, r2]
   1aa58:	ldr	r3, [sp, #24]
   1aa5c:	add	r0, r3, r0, lsl #2
   1aa60:	bl	15760 <__assert_fail@plt+0x4488>
   1aa64:	cmp	r0, #0
   1aa68:	bne	1aa84 <__assert_fail@plt+0x97ac>
   1aa6c:	add	r8, r8, #1
   1aa70:	mov	r2, #32
   1aa74:	mov	r1, #0
   1aa78:	ldr	r0, [sp, #28]
   1aa7c:	bl	111f4 <memset@plt>
   1aa80:	b	1a960 <__assert_fail@plt+0x9688>
   1aa84:	mov	r8, r7
   1aa88:	cmp	r8, #0
   1aa8c:	ble	1aab0 <__assert_fail@plt+0x97d8>
   1aa90:	add	r4, sp, #8320	; 0x2080
   1aa94:	mov	r5, #0
   1aa98:	ldr	r0, [r4, #8]
   1aa9c:	bl	22f00 <__assert_fail@plt+0x11c28>
   1aaa0:	add	r5, r5, #1
   1aaa4:	add	r4, r4, #12
   1aaa8:	cmp	r5, r8
   1aaac:	bne	1aa98 <__assert_fail@plt+0x97c0>
   1aab0:	mov	r0, #0
   1aab4:	add	sp, sp, #14464	; 0x3880
   1aab8:	add	sp, sp, #52	; 0x34
   1aabc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aac0:	ldr	r9, [sp, #20]
   1aac4:	cmp	r8, #0
   1aac8:	ble	1ab6c <__assert_fail@plt+0x9894>
   1aacc:	add	r1, r8, #1
   1aad0:	add	r0, sp, #11392	; 0x2c80
   1aad4:	add	r0, r0, #32
   1aad8:	bl	157a4 <__assert_fail@plt+0x44cc>
   1aadc:	add	r3, sp, #14464	; 0x3880
   1aae0:	add	r3, r3, #44	; 0x2c
   1aae4:	str	r0, [r3]
   1aae8:	cmp	r0, #0
   1aaec:	bne	1abe8 <__assert_fail@plt+0x9910>
   1aaf0:	mov	r2, #32
   1aaf4:	mov	r1, #0
   1aaf8:	add	r0, sp, #11392	; 0x2c80
   1aafc:	bl	111f4 <memset@plt>
   1ab00:	add	r3, sp, #8320	; 0x2080
   1ab04:	str	r3, [sp, #20]
   1ab08:	add	r6, sp, #124	; 0x7c
   1ab0c:	add	r2, sp, #12416	; 0x3080
   1ab10:	add	r2, r2, #48	; 0x30
   1ab14:	sub	fp, r2, #4
   1ab18:	add	r2, sp, #13440	; 0x3480
   1ab1c:	add	r2, r2, #48	; 0x30
   1ab20:	sub	sl, r2, #8
   1ab24:	mov	r7, r3
   1ab28:	mov	r3, #0
   1ab2c:	str	r3, [sp, #16]
   1ab30:	str	r3, [sp, #8]
   1ab34:	add	r3, sp, #11392	; 0x2c80
   1ab38:	add	r3, r3, #48	; 0x30
   1ab3c:	sub	r3, r3, #4
   1ab40:	str	r3, [sp, #12]
   1ab44:	add	r3, sp, #11392	; 0x2c80
   1ab48:	add	r3, r3, #36	; 0x24
   1ab4c:	mov	r2, #0
   1ab50:	str	r2, [r3]
   1ab54:	mov	r5, r7
   1ab58:	ldr	r3, [r7, #4]
   1ab5c:	cmp	r3, r2
   1ab60:	ble	1ac20 <__assert_fail@plt+0x9948>
   1ab64:	mov	r4, r2
   1ab68:	b	1aba4 <__assert_fail@plt+0x98cc>
   1ab6c:	movne	r0, #0
   1ab70:	bne	1aab4 <__assert_fail@plt+0x97dc>
   1ab74:	mov	r1, #256	; 0x100
   1ab78:	mov	r0, #4
   1ab7c:	bl	22cec <__assert_fail@plt+0x11a14>
   1ab80:	ldr	r3, [sp, #4]
   1ab84:	str	r0, [r3, #44]	; 0x2c
   1ab88:	adds	r0, r0, #0
   1ab8c:	movne	r0, #1
   1ab90:	b	1aab4 <__assert_fail@plt+0x97dc>
   1ab94:	add	r4, r4, #1
   1ab98:	ldr	r3, [r5, #4]
   1ab9c:	cmp	r3, r4
   1aba0:	ble	1ac20 <__assert_fail@plt+0x9948>
   1aba4:	ldr	r3, [r5, #8]
   1aba8:	ldr	r2, [r3, r4, lsl #2]
   1abac:	ldr	r3, [r9, #12]
   1abb0:	ldr	r1, [r3, r2, lsl #2]
   1abb4:	cmn	r1, #1
   1abb8:	beq	1ab94 <__assert_fail@plt+0x98bc>
   1abbc:	add	r1, r1, r1, lsl #1
   1abc0:	ldr	r3, [r9, #24]
   1abc4:	add	r1, r3, r1, lsl #2
   1abc8:	add	r0, sp, #11392	; 0x2c80
   1abcc:	add	r0, r0, #32
   1abd0:	bl	180cc <__assert_fail@plt+0x6df4>
   1abd4:	add	r3, sp, #14464	; 0x3880
   1abd8:	add	r3, r3, #44	; 0x2c
   1abdc:	str	r0, [r3]
   1abe0:	cmp	r0, #0
   1abe4:	beq	1ab94 <__assert_fail@plt+0x98bc>
   1abe8:	add	r3, sp, #11392	; 0x2c80
   1abec:	add	r3, r3, #40	; 0x28
   1abf0:	ldr	r0, [r3]
   1abf4:	bl	22f00 <__assert_fail@plt+0x11c28>
   1abf8:	add	r4, sp, #8320	; 0x2080
   1abfc:	mov	r5, #0
   1ac00:	ldr	r0, [r4, #8]
   1ac04:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ac08:	add	r5, r5, #1
   1ac0c:	add	r4, r4, #12
   1ac10:	cmp	r5, r8
   1ac14:	bne	1ac00 <__assert_fail@plt+0x9928>
   1ac18:	mov	r0, #0
   1ac1c:	b	1aab4 <__assert_fail@plt+0x97dc>
   1ac20:	mov	r3, #0
   1ac24:	add	r2, sp, #11392	; 0x2c80
   1ac28:	add	r2, r2, #32
   1ac2c:	mov	r1, r9
   1ac30:	add	r0, sp, #14464	; 0x3880
   1ac34:	add	r0, r0, #44	; 0x2c
   1ac38:	bl	173e8 <__assert_fail@plt+0x6110>
   1ac3c:	mov	r4, r0
   1ac40:	str	r0, [sl, #4]!
   1ac44:	cmp	r0, #0
   1ac48:	beq	1ace8 <__assert_fail@plt+0x9a10>
   1ac4c:	ldrsb	r3, [r4, #52]	; 0x34
   1ac50:	cmp	r3, #0
   1ac54:	blt	1ad00 <__assert_fail@plt+0x9a28>
   1ac58:	str	r4, [fp]
   1ac5c:	ldr	r3, [sp, #12]
   1ac60:	ldr	r2, [sp, #8]
   1ac64:	str	r4, [r3, r2, lsl #2]
   1ac68:	add	r4, sp, #11392	; 0x2c80
   1ac6c:	add	r0, r6, #32
   1ac70:	mov	r1, r4
   1ac74:	ldr	r3, [r1]
   1ac78:	ldr	r2, [r6, #4]!
   1ac7c:	orr	r3, r3, r2
   1ac80:	str	r3, [r1], #4
   1ac84:	cmp	r0, r6
   1ac88:	bne	1ac74 <__assert_fail@plt+0x999c>
   1ac8c:	ldr	r3, [sp, #8]
   1ac90:	add	r3, r3, #1
   1ac94:	str	r3, [sp, #8]
   1ac98:	add	r7, r7, #12
   1ac9c:	add	fp, fp, #4
   1aca0:	mov	r6, r0
   1aca4:	cmp	r3, r8
   1aca8:	bne	1ab44 <__assert_fail@plt+0x986c>
   1acac:	ldr	r3, [sp, #16]
   1acb0:	cmp	r3, #0
   1acb4:	bne	1ae38 <__assert_fail@plt+0x9b60>
   1acb8:	mov	r1, #256	; 0x100
   1acbc:	mov	r0, #4
   1acc0:	bl	22cec <__assert_fail@plt+0x11a14>
   1acc4:	ldr	r3, [sp, #4]
   1acc8:	str	r0, [r3, #44]	; 0x2c
   1accc:	cmp	r0, #0
   1acd0:	beq	1abe8 <__assert_fail@plt+0x9910>
   1acd4:	mov	r2, r0
   1acd8:	add	r1, r9, #96	; 0x60
   1acdc:	add	r7, sp, #128	; 0x80
   1ace0:	add	sl, r0, #1024	; 0x400
   1ace4:	b	1ae20 <__assert_fail@plt+0x9b48>
   1ace8:	add	r3, sp, #14464	; 0x3880
   1acec:	add	r3, r3, #44	; 0x2c
   1acf0:	ldr	r3, [r3]
   1acf4:	cmp	r3, #0
   1acf8:	beq	1ac4c <__assert_fail@plt+0x9974>
   1acfc:	b	1abe8 <__assert_fail@plt+0x9910>
   1ad00:	mov	r3, #1
   1ad04:	add	r2, sp, #11392	; 0x2c80
   1ad08:	add	r2, r2, #32
   1ad0c:	mov	r1, r9
   1ad10:	add	r0, sp, #14464	; 0x3880
   1ad14:	add	r0, r0, #44	; 0x2c
   1ad18:	bl	173e8 <__assert_fail@plt+0x6110>
   1ad1c:	str	r0, [fp]
   1ad20:	cmp	r0, #0
   1ad24:	beq	1ad8c <__assert_fail@plt+0x9ab4>
   1ad28:	cmp	r4, r0
   1ad2c:	beq	1ad44 <__assert_fail@plt+0x9a6c>
   1ad30:	ldr	r3, [r9, #92]	; 0x5c
   1ad34:	ldr	r2, [sp, #16]
   1ad38:	cmp	r3, #1
   1ad3c:	movgt	r2, #1
   1ad40:	str	r2, [sp, #16]
   1ad44:	mov	r3, #2
   1ad48:	add	r2, sp, #11392	; 0x2c80
   1ad4c:	add	r2, r2, #32
   1ad50:	mov	r1, r9
   1ad54:	add	r0, sp, #14464	; 0x3880
   1ad58:	add	r0, r0, #44	; 0x2c
   1ad5c:	bl	173e8 <__assert_fail@plt+0x6110>
   1ad60:	ldr	r3, [sp, #12]
   1ad64:	ldr	r2, [sp, #8]
   1ad68:	str	r0, [r3, r2, lsl #2]
   1ad6c:	cmp	r0, #0
   1ad70:	bne	1ac68 <__assert_fail@plt+0x9990>
   1ad74:	add	r3, sp, #14464	; 0x3880
   1ad78:	add	r3, r3, #44	; 0x2c
   1ad7c:	ldr	r3, [r3]
   1ad80:	cmp	r3, #0
   1ad84:	beq	1ac68 <__assert_fail@plt+0x9990>
   1ad88:	b	1abe8 <__assert_fail@plt+0x9910>
   1ad8c:	add	r3, sp, #14464	; 0x3880
   1ad90:	add	r3, r3, #44	; 0x2c
   1ad94:	ldr	r3, [r3]
   1ad98:	cmp	r3, #0
   1ad9c:	beq	1ad28 <__assert_fail@plt+0x9a50>
   1ada0:	b	1abe8 <__assert_fail@plt+0x9910>
   1ada4:	mov	r3, #0
   1ada8:	b	1ade8 <__assert_fail@plt+0x9b10>
   1adac:	lsl	lr, lr, #1
   1adb0:	add	r8, r8, #4
   1adb4:	lsrs	r6, r6, #1
   1adb8:	beq	1ae0c <__assert_fail@plt+0x9b34>
   1adbc:	tst	r6, #1
   1adc0:	beq	1adac <__assert_fail@plt+0x9ad4>
   1adc4:	mov	r5, r7
   1adc8:	ldr	r3, [r7]
   1adcc:	tst	lr, r3
   1add0:	bne	1ada4 <__assert_fail@plt+0x9acc>
   1add4:	mov	r3, #0
   1add8:	add	r3, r3, #1
   1addc:	ldr	ip, [r5, r3, lsl #5]
   1ade0:	tst	lr, ip
   1ade4:	beq	1add8 <__assert_fail@plt+0x9b00>
   1ade8:	ldr	ip, [r1]
   1adec:	tst	lr, ip
   1adf0:	add	ip, sp, #14464	; 0x3880
   1adf4:	add	ip, ip, #48	; 0x30
   1adf8:	add	r3, ip, r3, lsl #2
   1adfc:	ldrne	r3, [r3, #-2052]	; 0xfffff7fc
   1ae00:	ldreq	r3, [r3, #-1028]	; 0xfffffbfc
   1ae04:	str	r3, [r8]
   1ae08:	b	1adac <__assert_fail@plt+0x9ad4>
   1ae0c:	add	r2, r2, #128	; 0x80
   1ae10:	add	r1, r1, #4
   1ae14:	add	r7, r7, #4
   1ae18:	cmp	r2, sl
   1ae1c:	beq	1ae9c <__assert_fail@plt+0x9bc4>
   1ae20:	ldr	r6, [r4], #4
   1ae24:	cmp	r6, #0
   1ae28:	beq	1ae0c <__assert_fail@plt+0x9b34>
   1ae2c:	mov	r8, r2
   1ae30:	mov	lr, #1
   1ae34:	b	1adbc <__assert_fail@plt+0x9ae4>
   1ae38:	mov	r1, #512	; 0x200
   1ae3c:	mov	r0, #4
   1ae40:	bl	22cec <__assert_fail@plt+0x11a14>
   1ae44:	ldr	r3, [sp, #4]
   1ae48:	str	r0, [r3, #48]	; 0x30
   1ae4c:	cmp	r0, #0
   1ae50:	beq	1abe8 <__assert_fail@plt+0x9910>
   1ae54:	mov	r5, r0
   1ae58:	add	ip, sp, #128	; 0x80
   1ae5c:	add	r7, r0, #1024	; 0x400
   1ae60:	ldr	r6, [r4], #4
   1ae64:	cmp	r6, #0
   1ae68:	beq	1ae8c <__assert_fail@plt+0x9bb4>
   1ae6c:	mov	r8, r5
   1ae70:	mov	r1, #1
   1ae74:	tst	r6, #1
   1ae78:	bne	1aec4 <__assert_fail@plt+0x9bec>
   1ae7c:	lsl	r1, r1, #1
   1ae80:	add	r8, r8, #4
   1ae84:	lsrs	r6, r6, #1
   1ae88:	bne	1ae74 <__assert_fail@plt+0x9b9c>
   1ae8c:	add	r5, r5, #128	; 0x80
   1ae90:	add	ip, ip, #4
   1ae94:	cmp	r7, r5
   1ae98:	bne	1ae60 <__assert_fail@plt+0x9b88>
   1ae9c:	add	r3, sp, #11392	; 0x2c80
   1aea0:	ldr	r3, [r3]
   1aea4:	tst	r3, #1024	; 0x400
   1aea8:	beq	1af54 <__assert_fail@plt+0x9c7c>
   1aeac:	ldr	r3, [sp, #128]	; 0x80
   1aeb0:	tst	r3, #1024	; 0x400
   1aeb4:	bne	1af30 <__assert_fail@plt+0x9c58>
   1aeb8:	mov	r3, #0
   1aebc:	add	r2, sp, #128	; 0x80
   1aec0:	b	1af1c <__assert_fail@plt+0x9c44>
   1aec4:	mov	lr, ip
   1aec8:	ldr	r3, [ip]
   1aecc:	tst	r1, r3
   1aed0:	bne	1af08 <__assert_fail@plt+0x9c30>
   1aed4:	mov	r3, #0
   1aed8:	add	r3, r3, #1
   1aedc:	ldr	r2, [lr, r3, lsl #5]
   1aee0:	tst	r1, r2
   1aee4:	beq	1aed8 <__assert_fail@plt+0x9c00>
   1aee8:	add	r2, sp, #14464	; 0x3880
   1aeec:	add	r2, r2, #48	; 0x30
   1aef0:	add	r3, r2, r3, lsl #2
   1aef4:	ldr	r2, [r3, #-1028]	; 0xfffffbfc
   1aef8:	str	r2, [r8]
   1aefc:	ldr	r3, [r3, #-2052]	; 0xfffff7fc
   1af00:	str	r3, [r8, #1024]	; 0x400
   1af04:	b	1ae7c <__assert_fail@plt+0x9ba4>
   1af08:	mov	r3, #0
   1af0c:	b	1aee8 <__assert_fail@plt+0x9c10>
   1af10:	ldr	r1, [r2, r3, lsl #5]
   1af14:	tst	r1, #1024	; 0x400
   1af18:	bne	1af34 <__assert_fail@plt+0x9c5c>
   1af1c:	add	r3, r3, #1
   1af20:	ldr	r1, [sp, #8]
   1af24:	cmp	r1, r3
   1af28:	bne	1af10 <__assert_fail@plt+0x9c38>
   1af2c:	b	1af54 <__assert_fail@plt+0x9c7c>
   1af30:	mov	r3, #0
   1af34:	add	r2, sp, #14464	; 0x3880
   1af38:	add	r2, r2, #48	; 0x30
   1af3c:	add	r3, r2, r3, lsl #2
   1af40:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   1af44:	str	r3, [r0, #40]	; 0x28
   1af48:	ldr	r2, [sp, #16]
   1af4c:	cmp	r2, #0
   1af50:	strne	r3, [r0, #1064]	; 0x428
   1af54:	add	r3, sp, #11392	; 0x2c80
   1af58:	add	r3, r3, #40	; 0x28
   1af5c:	ldr	r0, [r3]
   1af60:	bl	22f00 <__assert_fail@plt+0x11c28>
   1af64:	mov	r4, #0
   1af68:	ldr	r5, [sp, #20]
   1af6c:	ldr	r6, [sp, #8]
   1af70:	ldr	r0, [r5, #8]
   1af74:	bl	22f00 <__assert_fail@plt+0x11c28>
   1af78:	add	r4, r4, #1
   1af7c:	add	r5, r5, #12
   1af80:	cmp	r6, r4
   1af84:	bne	1af70 <__assert_fail@plt+0x9c98>
   1af88:	mov	r0, #1
   1af8c:	b	1aab4 <__assert_fail@plt+0x97dc>
   1af90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1af94:	sub	sp, sp, #300	; 0x12c
   1af98:	ldr	r3, [r0]
   1af9c:	str	r3, [sp, #4]
   1afa0:	ldr	r3, [r3, #92]	; 0x5c
   1afa4:	cmp	r3, #1
   1afa8:	ldreq	r3, [r0, #12]
   1afac:	lsreq	r3, r3, #22
   1afb0:	andeq	r3, r3, #1
   1afb4:	movne	r3, #0
   1afb8:	mov	sl, r3
   1afbc:	ldr	r3, [r1, #8]
   1afc0:	cmp	r3, #0
   1afc4:	ble	1b300 <__assert_fail@plt+0xa028>
   1afc8:	mov	r8, r2
   1afcc:	str	r1, [sp, #16]
   1afd0:	str	r0, [sp, #20]
   1afd4:	mov	r3, #0
   1afd8:	str	r3, [sp, #8]
   1afdc:	ldr	fp, [pc, #1020]	; 1b3e0 <__assert_fail@plt+0xa108>
   1afe0:	b	1b294 <__assert_fail@plt+0x9fbc>
   1afe4:	ldrb	r5, [r2, r4, lsl #3]
   1afe8:	strb	r3, [r8, r5]
   1afec:	cmp	sl, #0
   1aff0:	beq	1b014 <__assert_fail@plt+0x9d3c>
   1aff4:	add	r3, r5, #128	; 0x80
   1aff8:	cmp	r3, fp
   1affc:	bhi	1b00c <__assert_fail@plt+0x9d34>
   1b000:	bl	11170 <__ctype_tolower_loc@plt>
   1b004:	ldr	r3, [r0]
   1b008:	ldr	r5, [r3, r5, lsl #2]
   1b00c:	mov	r3, #1
   1b010:	strb	r3, [r8, r5]
   1b014:	ldr	r3, [sp, #20]
   1b018:	ldr	r3, [r3, #12]
   1b01c:	tst	r3, #4194304	; 0x400000
   1b020:	beq	1b274 <__assert_fail@plt+0x9f9c>
   1b024:	ldr	ip, [sp, #4]
   1b028:	ldr	r3, [ip, #92]	; 0x5c
   1b02c:	cmp	r3, #1
   1b030:	ble	1b274 <__assert_fail@plt+0x9f9c>
   1b034:	ldr	r3, [ip]
   1b038:	ldrb	r3, [r3, r4, lsl #3]
   1b03c:	strb	r3, [sp, #40]	; 0x28
   1b040:	add	r1, r4, #1
   1b044:	ldr	r3, [ip, #8]
   1b048:	cmp	r1, r3
   1b04c:	bcs	1b120 <__assert_fail@plt+0x9e48>
   1b050:	ldr	r0, [sp, #12]
   1b054:	add	r3, r0, #8
   1b058:	ldr	r2, [ip]
   1b05c:	add	r3, r2, r3
   1b060:	ldr	r2, [r3, #4]
   1b064:	bic	r2, r2, #-16777216	; 0xff000000
   1b068:	bic	r2, r2, #14614528	; 0xdf0000
   1b06c:	bic	r2, r2, #65280	; 0xff00
   1b070:	ldr	lr, [pc, #876]	; 1b3e4 <__assert_fail@plt+0xa10c>
   1b074:	cmp	r2, lr
   1b078:	bne	1b128 <__assert_fail@plt+0x9e50>
   1b07c:	add	r0, r0, #16
   1b080:	add	r4, sp, #41	; 0x29
   1b084:	ldrb	r3, [r3]
   1b088:	strb	r3, [r4], #1
   1b08c:	add	r1, r1, #1
   1b090:	ldr	r3, [ip, #8]
   1b094:	cmp	r1, r3
   1b098:	bcs	1b0c4 <__assert_fail@plt+0x9dec>
   1b09c:	ldr	r3, [ip]
   1b0a0:	add	r3, r3, r0
   1b0a4:	add	r0, r0, #8
   1b0a8:	ldr	r2, [r3, #4]
   1b0ac:	bic	r2, r2, #-16777216	; 0xff000000
   1b0b0:	bic	r2, r2, #14614528	; 0xdf0000
   1b0b4:	bic	r2, r2, #65280	; 0xff00
   1b0b8:	ldr	lr, [pc, #804]	; 1b3e4 <__assert_fail@plt+0xa10c>
   1b0bc:	cmp	r2, lr
   1b0c0:	beq	1b084 <__assert_fail@plt+0x9dac>
   1b0c4:	mov	r3, #0
   1b0c8:	str	r3, [sp, #32]
   1b0cc:	str	r3, [sp, #36]	; 0x24
   1b0d0:	add	r3, sp, #40	; 0x28
   1b0d4:	sub	r4, r4, r3
   1b0d8:	add	r3, sp, #32
   1b0dc:	mov	r2, r4
   1b0e0:	add	r1, sp, #40	; 0x28
   1b0e4:	add	r0, sp, #28
   1b0e8:	bl	22f8c <__assert_fail@plt+0x11cb4>
   1b0ec:	cmp	r4, r0
   1b0f0:	bne	1b274 <__assert_fail@plt+0x9f9c>
   1b0f4:	ldr	r0, [sp, #28]
   1b0f8:	bl	11080 <towlower@plt>
   1b0fc:	add	r2, sp, #32
   1b100:	mov	r1, r0
   1b104:	add	r0, sp, #40	; 0x28
   1b108:	bl	10ff0 <wcrtomb@plt>
   1b10c:	cmn	r0, #1
   1b110:	ldrbne	r3, [sp, #40]	; 0x28
   1b114:	movne	r2, #1
   1b118:	strbne	r2, [r8, r3]
   1b11c:	b	1b274 <__assert_fail@plt+0x9f9c>
   1b120:	add	r4, sp, #41	; 0x29
   1b124:	b	1b0c4 <__assert_fail@plt+0x9dec>
   1b128:	add	r4, sp, #41	; 0x29
   1b12c:	b	1b0c4 <__assert_fail@plt+0x9dec>
   1b130:	mov	r3, #0
   1b134:	str	r3, [sp]
   1b138:	mov	r9, #1
   1b13c:	b	1b1a4 <__assert_fail@plt+0x9ecc>
   1b140:	strb	r9, [r8, r3]
   1b144:	add	r4, r4, #1
   1b148:	add	r5, r5, #1
   1b14c:	add	r6, r6, #4
   1b150:	cmp	r4, #32
   1b154:	beq	1b190 <__assert_fail@plt+0x9eb8>
   1b158:	lsr	r3, r7, r4
   1b15c:	tst	r3, #1
   1b160:	beq	1b144 <__assert_fail@plt+0x9e6c>
   1b164:	strb	r9, [r8, r5]
   1b168:	cmp	sl, #0
   1b16c:	beq	1b144 <__assert_fail@plt+0x9e6c>
   1b170:	add	r3, r5, #128	; 0x80
   1b174:	cmp	r3, fp
   1b178:	movhi	r3, r5
   1b17c:	bhi	1b140 <__assert_fail@plt+0x9e68>
   1b180:	bl	11170 <__ctype_tolower_loc@plt>
   1b184:	ldr	r3, [r0]
   1b188:	ldr	r3, [r3, r6]
   1b18c:	b	1b140 <__assert_fail@plt+0x9e68>
   1b190:	ldr	r3, [sp]
   1b194:	add	r3, r3, #4
   1b198:	str	r3, [sp]
   1b19c:	cmp	r3, #32
   1b1a0:	beq	1b274 <__assert_fail@plt+0x9f9c>
   1b1a4:	ldr	r2, [sp]
   1b1a8:	lsl	r5, r2, #3
   1b1ac:	ldr	r3, [sp, #4]
   1b1b0:	ldr	r3, [r3]
   1b1b4:	ldr	r1, [sp, #12]
   1b1b8:	ldr	r3, [r3, r1]
   1b1bc:	ldr	r7, [r3, r2]
   1b1c0:	lsl	r6, r2, #5
   1b1c4:	mov	r4, #0
   1b1c8:	b	1b158 <__assert_fail@plt+0x9e80>
   1b1cc:	ldr	r5, [r2, r4, lsl #3]
   1b1d0:	ldr	r3, [sp, #4]
   1b1d4:	ldr	r3, [r3, #92]	; 0x5c
   1b1d8:	cmp	r3, #1
   1b1dc:	ble	1b204 <__assert_fail@plt+0x9f2c>
   1b1e0:	ldr	r3, [r5, #36]	; 0x24
   1b1e4:	cmp	r3, #0
   1b1e8:	bne	1b224 <__assert_fail@plt+0x9f4c>
   1b1ec:	ldrb	r3, [r5, #16]
   1b1f0:	tst	r3, #1
   1b1f4:	bne	1b224 <__assert_fail@plt+0x9f4c>
   1b1f8:	ldr	r3, [r5, #32]
   1b1fc:	cmp	r3, #0
   1b200:	bne	1b224 <__assert_fail@plt+0x9f4c>
   1b204:	ldr	r3, [r5, #20]
   1b208:	cmp	r3, #0
   1b20c:	ble	1b274 <__assert_fail@plt+0x9f9c>
   1b210:	mov	r4, #0
   1b214:	mov	r9, r4
   1b218:	str	sl, [sp]
   1b21c:	ldr	sl, [sp, #20]
   1b220:	b	1b368 <__assert_fail@plt+0xa090>
   1b224:	mov	r3, #0
   1b228:	strb	r3, [sp, #32]
   1b22c:	mov	r4, #0
   1b230:	mov	r5, #1
   1b234:	str	r4, [sp, #40]	; 0x28
   1b238:	str	r4, [sp, #44]	; 0x2c
   1b23c:	add	r3, sp, #40	; 0x28
   1b240:	mov	r2, r5
   1b244:	add	r1, sp, #32
   1b248:	mov	r0, r4
   1b24c:	bl	22f8c <__assert_fail@plt+0x11cb4>
   1b250:	cmn	r0, #2
   1b254:	ldrbeq	r3, [sp, #32]
   1b258:	strbeq	r5, [r8, r3]
   1b25c:	ldrb	r3, [sp, #32]
   1b260:	add	r3, r3, #1
   1b264:	uxtb	r3, r3
   1b268:	strb	r3, [sp, #32]
   1b26c:	cmp	r3, #0
   1b270:	bne	1b234 <__assert_fail@plt+0x9f5c>
   1b274:	ldr	r3, [sp, #8]
   1b278:	add	r3, r3, #1
   1b27c:	mov	r2, r3
   1b280:	str	r3, [sp, #8]
   1b284:	ldr	r3, [sp, #16]
   1b288:	ldr	r3, [r3, #8]
   1b28c:	cmp	r3, r2
   1b290:	ble	1b300 <__assert_fail@plt+0xa028>
   1b294:	ldr	r3, [sp, #16]
   1b298:	ldr	r3, [r3, #12]
   1b29c:	ldr	r2, [sp, #8]
   1b2a0:	ldr	r4, [r3, r2, lsl #2]
   1b2a4:	lsl	r3, r4, #3
   1b2a8:	str	r3, [sp, #12]
   1b2ac:	ldr	r2, [sp, #4]
   1b2b0:	ldr	r2, [r2]
   1b2b4:	add	r3, r2, r3
   1b2b8:	ldrb	r3, [r3, #4]
   1b2bc:	mov	r5, r3
   1b2c0:	cmp	r3, #1
   1b2c4:	beq	1afe4 <__assert_fail@plt+0x9d0c>
   1b2c8:	cmp	r3, #3
   1b2cc:	beq	1b130 <__assert_fail@plt+0x9e58>
   1b2d0:	cmp	r3, #6
   1b2d4:	beq	1b1cc <__assert_fail@plt+0x9ef4>
   1b2d8:	and	r2, r3, #253	; 0xfd
   1b2dc:	cmp	r3, #2
   1b2e0:	cmpne	r2, #5
   1b2e4:	bne	1b274 <__assert_fail@plt+0x9f9c>
   1b2e8:	mov	r2, #256	; 0x100
   1b2ec:	mov	r1, #1
   1b2f0:	mov	r0, r8
   1b2f4:	bl	111f4 <memset@plt>
   1b2f8:	cmp	r5, #2
   1b2fc:	beq	1b3cc <__assert_fail@plt+0xa0f4>
   1b300:	add	sp, sp, #300	; 0x12c
   1b304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b308:	mov	r3, #1
   1b30c:	strb	r3, [r8, r6]
   1b310:	ldr	r3, [sl, #12]
   1b314:	tst	r3, #4194304	; 0x400000
   1b318:	beq	1b358 <__assert_fail@plt+0xa080>
   1b31c:	ldr	r3, [sp, #4]
   1b320:	ldr	r3, [r3, #92]	; 0x5c
   1b324:	cmp	r3, #1
   1b328:	ble	1b358 <__assert_fail@plt+0xa080>
   1b32c:	ldr	r3, [r5]
   1b330:	ldr	r0, [r3, r7]
   1b334:	bl	11080 <towlower@plt>
   1b338:	add	r2, sp, #32
   1b33c:	mov	r1, r0
   1b340:	add	r0, sp, #40	; 0x28
   1b344:	bl	10ff0 <wcrtomb@plt>
   1b348:	cmn	r0, #1
   1b34c:	ldrbne	r3, [sp, #40]	; 0x28
   1b350:	movne	r2, #1
   1b354:	strbne	r2, [r8, r3]
   1b358:	add	r4, r4, #1
   1b35c:	ldr	r3, [r5, #20]
   1b360:	cmp	r3, r4
   1b364:	ble	1b3c4 <__assert_fail@plt+0xa0ec>
   1b368:	str	r9, [sp, #32]
   1b36c:	str	r9, [sp, #36]	; 0x24
   1b370:	lsl	r7, r4, #2
   1b374:	ldr	r3, [r5]
   1b378:	add	r2, sp, #32
   1b37c:	ldr	r1, [r3, r4, lsl #2]
   1b380:	add	r0, sp, #40	; 0x28
   1b384:	bl	10ff0 <wcrtomb@plt>
   1b388:	cmn	r0, #1
   1b38c:	beq	1b310 <__assert_fail@plt+0xa038>
   1b390:	ldrb	r6, [sp, #40]	; 0x28
   1b394:	mov	r3, #1
   1b398:	strb	r3, [r8, r6]
   1b39c:	ldr	r3, [sp]
   1b3a0:	cmp	r3, #0
   1b3a4:	beq	1b310 <__assert_fail@plt+0xa038>
   1b3a8:	add	r3, r6, #128	; 0x80
   1b3ac:	cmp	r3, fp
   1b3b0:	bhi	1b308 <__assert_fail@plt+0xa030>
   1b3b4:	bl	11170 <__ctype_tolower_loc@plt>
   1b3b8:	ldr	r3, [r0]
   1b3bc:	ldr	r6, [r3, r6, lsl #2]
   1b3c0:	b	1b308 <__assert_fail@plt+0xa030>
   1b3c4:	ldr	sl, [sp]
   1b3c8:	b	1b274 <__assert_fail@plt+0x9f9c>
   1b3cc:	ldr	r2, [sp, #20]
   1b3d0:	ldrb	r3, [r2, #28]
   1b3d4:	orr	r3, r3, #1
   1b3d8:	strb	r3, [r2, #28]
   1b3dc:	b	1b300 <__assert_fail@plt+0xa028>
   1b3e0:	andeq	r0, r0, pc, ror r1
   1b3e4:	eoreq	r0, r0, r1
   1b3e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b3ec:	mov	r3, #0
   1b3f0:	str	r3, [r0]
   1b3f4:	ldr	lr, [r2, #4]
   1b3f8:	cmp	lr, r3
   1b3fc:	beq	1b5e4 <__assert_fail@plt+0xa30c>
   1b400:	mov	r6, lr
   1b404:	ble	1b420 <__assert_fail@plt+0xa148>
   1b408:	ldr	r3, [r2, #8]
   1b40c:	add	lr, r3, lr, lsl #2
   1b410:	ldr	ip, [r3], #4
   1b414:	add	r6, r6, ip
   1b418:	cmp	r3, lr
   1b41c:	bne	1b410 <__assert_fail@plt+0xa138>
   1b420:	mov	sl, r2
   1b424:	mov	r7, r1
   1b428:	mov	r8, r0
   1b42c:	ldr	r3, [r1, #68]	; 0x44
   1b430:	and	r3, r3, r6
   1b434:	add	r3, r3, r3, lsl #1
   1b438:	lsl	r3, r3, #2
   1b43c:	ldr	r2, [r1, #32]
   1b440:	add	r1, r2, r3
   1b444:	ldr	fp, [r2, r3]
   1b448:	cmp	fp, #0
   1b44c:	ble	1b494 <__assert_fail@plt+0xa1bc>
   1b450:	ldr	r9, [r1, #8]
   1b454:	sub	r9, r9, #4
   1b458:	mov	r5, #0
   1b45c:	b	1b46c <__assert_fail@plt+0xa194>
   1b460:	add	r5, r5, #1
   1b464:	cmp	r5, fp
   1b468:	beq	1b494 <__assert_fail@plt+0xa1bc>
   1b46c:	ldr	r4, [r9, #4]!
   1b470:	ldr	r3, [r4]
   1b474:	cmp	r6, r3
   1b478:	bne	1b460 <__assert_fail@plt+0xa188>
   1b47c:	mov	r1, sl
   1b480:	add	r0, r4, #4
   1b484:	bl	14780 <__assert_fail@plt+0x34a8>
   1b488:	cmp	r0, #0
   1b48c:	beq	1b460 <__assert_fail@plt+0xa188>
   1b490:	b	1b5d0 <__assert_fail@plt+0xa2f8>
   1b494:	mov	r1, #1
   1b498:	mov	r0, #56	; 0x38
   1b49c:	bl	22cec <__assert_fail@plt+0x11a14>
   1b4a0:	subs	r4, r0, #0
   1b4a4:	beq	1b4ec <__assert_fail@plt+0xa214>
   1b4a8:	add	r5, r4, #4
   1b4ac:	mov	r1, sl
   1b4b0:	mov	r0, r5
   1b4b4:	bl	15c30 <__assert_fail@plt+0x4958>
   1b4b8:	cmp	r0, #0
   1b4bc:	bne	1b4e4 <__assert_fail@plt+0xa20c>
   1b4c0:	str	r5, [r4, #40]	; 0x28
   1b4c4:	ldr	lr, [sl, #4]
   1b4c8:	cmp	lr, #0
   1b4cc:	ble	1b5b8 <__assert_fail@plt+0xa2e0>
   1b4d0:	ldr	r5, [r7]
   1b4d4:	ldr	ip, [sl, #8]
   1b4d8:	add	lr, ip, lr, lsl #2
   1b4dc:	ldr	r9, [pc, #264]	; 1b5ec <__assert_fail@plt+0xa314>
   1b4e0:	b	1b550 <__assert_fail@plt+0xa278>
   1b4e4:	mov	r0, r4
   1b4e8:	bl	22f00 <__assert_fail@plt+0x11c28>
   1b4ec:	mov	r3, #12
   1b4f0:	str	r3, [r8]
   1b4f4:	mov	r4, #0
   1b4f8:	b	1b5d0 <__assert_fail@plt+0xa2f8>
   1b4fc:	ldr	r3, [r2, #4]
   1b500:	tst	r3, r9
   1b504:	beq	1b548 <__assert_fail@plt+0xa270>
   1b508:	ldrb	r0, [r2, #6]
   1b50c:	ldrb	r3, [r4, #52]	; 0x34
   1b510:	lsr	r1, r3, #5
   1b514:	orr	r1, r1, r0, lsr #4
   1b518:	and	r1, r1, #1
   1b51c:	bic	r3, r3, #32
   1b520:	orr	r3, r3, r1, lsl #5
   1b524:	strb	r3, [r4, #52]	; 0x34
   1b528:	b	1b5a8 <__assert_fail@plt+0xa2d0>
   1b52c:	ldrb	r3, [r4, #52]	; 0x34
   1b530:	orr	r3, r3, #64	; 0x40
   1b534:	strb	r3, [r4, #52]	; 0x34
   1b538:	b	1b548 <__assert_fail@plt+0xa270>
   1b53c:	ldrb	r3, [r4, #52]	; 0x34
   1b540:	orr	r3, r3, #128	; 0x80
   1b544:	strb	r3, [r4, #52]	; 0x34
   1b548:	cmp	ip, lr
   1b54c:	beq	1b5b8 <__assert_fail@plt+0xa2e0>
   1b550:	ldr	r2, [ip], #4
   1b554:	add	r2, r5, r2, lsl #3
   1b558:	ldrb	r0, [r2, #4]
   1b55c:	cmp	r0, #1
   1b560:	beq	1b4fc <__assert_fail@plt+0xa224>
   1b564:	ldrb	r1, [r4, #52]	; 0x34
   1b568:	ldrb	r3, [r2, #6]
   1b56c:	lsr	r3, r3, #4
   1b570:	orr	r3, r3, r1, lsr #5
   1b574:	and	r3, r3, #1
   1b578:	bic	r1, r1, #32
   1b57c:	orr	r3, r1, r3, lsl #5
   1b580:	strb	r3, [r4, #52]	; 0x34
   1b584:	cmp	r0, #2
   1b588:	uxtbeq	r3, r3
   1b58c:	orreq	r3, r3, #16
   1b590:	strbeq	r3, [r4, #52]	; 0x34
   1b594:	beq	1b548 <__assert_fail@plt+0xa270>
   1b598:	cmp	r0, #4
   1b59c:	beq	1b52c <__assert_fail@plt+0xa254>
   1b5a0:	cmp	r0, #12
   1b5a4:	beq	1b53c <__assert_fail@plt+0xa264>
   1b5a8:	ldr	r3, [r2, #4]
   1b5ac:	tst	r3, r9
   1b5b0:	beq	1b548 <__assert_fail@plt+0xa270>
   1b5b4:	b	1b53c <__assert_fail@plt+0xa264>
   1b5b8:	mov	r2, r6
   1b5bc:	mov	r1, r4
   1b5c0:	mov	r0, r7
   1b5c4:	bl	157d4 <__assert_fail@plt+0x44fc>
   1b5c8:	cmp	r0, #0
   1b5cc:	bne	1b5d8 <__assert_fail@plt+0xa300>
   1b5d0:	mov	r0, r4
   1b5d4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5d8:	mov	r0, r4
   1b5dc:	bl	1738c <__assert_fail@plt+0x60b4>
   1b5e0:	b	1b4ec <__assert_fail@plt+0xa214>
   1b5e4:	mov	r4, #0
   1b5e8:	b	1b5d0 <__assert_fail@plt+0xa2f8>
   1b5ec:	andeq	pc, r3, r0, lsl #30
   1b5f0:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b5f4:	sub	sp, sp, #20
   1b5f8:	subs	r8, r3, #0
   1b5fc:	ble	1b69c <__assert_fail@plt+0xa3c4>
   1b600:	mov	r9, r0
   1b604:	mov	r4, r1
   1b608:	mov	r5, r2
   1b60c:	mov	r6, #0
   1b610:	b	1b630 <__assert_fail@plt+0xa358>
   1b614:	ldr	r3, [r5]
   1b618:	str	r3, [r4]
   1b61c:	add	r6, r6, #1
   1b620:	add	r4, r4, #4
   1b624:	add	r5, r5, #4
   1b628:	cmp	r8, r6
   1b62c:	beq	1b694 <__assert_fail@plt+0xa3bc>
   1b630:	ldr	r1, [r4]
   1b634:	cmp	r1, #0
   1b638:	beq	1b614 <__assert_fail@plt+0xa33c>
   1b63c:	ldr	r2, [r5]
   1b640:	cmp	r2, #0
   1b644:	beq	1b61c <__assert_fail@plt+0xa344>
   1b648:	add	r2, r2, #4
   1b64c:	add	r1, r1, #4
   1b650:	mov	r0, sp
   1b654:	bl	15cac <__assert_fail@plt+0x49d4>
   1b658:	str	r0, [sp, #12]
   1b65c:	cmp	r0, #0
   1b660:	bne	1b68c <__assert_fail@plt+0xa3b4>
   1b664:	mov	r2, sp
   1b668:	mov	r1, r9
   1b66c:	add	r0, sp, #12
   1b670:	bl	1b3e8 <__assert_fail@plt+0xa110>
   1b674:	str	r0, [r4]
   1b678:	ldr	r0, [sp, #8]
   1b67c:	bl	22f00 <__assert_fail@plt+0x11c28>
   1b680:	ldr	r0, [sp, #12]
   1b684:	cmp	r0, #0
   1b688:	beq	1b61c <__assert_fail@plt+0xa344>
   1b68c:	add	sp, sp, #20
   1b690:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b694:	mov	r0, #0
   1b698:	b	1b68c <__assert_fail@plt+0xa3b4>
   1b69c:	mov	r0, #0
   1b6a0:	b	1b68c <__assert_fail@plt+0xa3b4>
   1b6a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b6a8:	sub	sp, sp, #28
   1b6ac:	mov	sl, r0
   1b6b0:	mov	r7, r1
   1b6b4:	mov	r8, r2
   1b6b8:	str	r3, [sp, #4]
   1b6bc:	mov	r1, r2
   1b6c0:	bl	14e18 <__assert_fail@plt+0x3b40>
   1b6c4:	cmn	r0, #1
   1b6c8:	moveq	r0, #0
   1b6cc:	beq	1b8a4 <__assert_fail@plt+0xa5cc>
   1b6d0:	ldr	fp, [sl, #84]	; 0x54
   1b6d4:	add	r0, r0, r0, lsl #1
   1b6d8:	lsl	r0, r0, #3
   1b6dc:	add	r3, r0, #24
   1b6e0:	str	r3, [sp]
   1b6e4:	b	1b844 <__assert_fail@plt+0xa56c>
   1b6e8:	ldr	r3, [fp, #20]
   1b6ec:	add	r6, r6, r6, lsl #1
   1b6f0:	add	r6, r3, r6, lsl #2
   1b6f4:	ldr	r3, [r6, #8]
   1b6f8:	ldr	r5, [r3]
   1b6fc:	mov	r1, r5
   1b700:	mov	r0, r7
   1b704:	bl	147f4 <__assert_fail@plt+0x351c>
   1b708:	cmp	r0, #0
   1b70c:	beq	1b7f4 <__assert_fail@plt+0xa51c>
   1b710:	add	r4, r4, #24
   1b714:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1b718:	cmp	r3, #0
   1b71c:	beq	1b8a0 <__assert_fail@plt+0xa5c8>
   1b720:	ldr	r6, [r4, #-24]	; 0xffffffe8
   1b724:	mov	r1, r6
   1b728:	mov	r0, r7
   1b72c:	bl	147f4 <__assert_fail@plt+0x351c>
   1b730:	cmp	r0, #0
   1b734:	beq	1b710 <__assert_fail@plt+0xa438>
   1b738:	ldr	r5, [r4, #-12]
   1b73c:	add	r5, r8, r5
   1b740:	ldr	r3, [r4, #-16]
   1b744:	sub	r5, r5, r3
   1b748:	cmp	r8, r5
   1b74c:	beq	1b6e8 <__assert_fail@plt+0xa410>
   1b750:	ldr	r3, [fp, #12]
   1b754:	ldr	r9, [r3, r6, lsl #2]
   1b758:	ldr	r3, [sl, #100]	; 0x64
   1b75c:	ldr	r6, [r3, r5, lsl #2]
   1b760:	cmp	r6, #0
   1b764:	beq	1b884 <__assert_fail@plt+0xa5ac>
   1b768:	add	r6, r6, #4
   1b76c:	mov	r1, r9
   1b770:	mov	r0, r6
   1b774:	bl	147f4 <__assert_fail@plt+0x351c>
   1b778:	cmp	r0, #0
   1b77c:	bne	1b710 <__assert_fail@plt+0xa438>
   1b780:	mov	r1, r6
   1b784:	add	r0, sp, #8
   1b788:	bl	15c30 <__assert_fail@plt+0x4958>
   1b78c:	str	r0, [sp, #20]
   1b790:	mov	r1, r9
   1b794:	add	r0, sp, #8
   1b798:	bl	17b88 <__assert_fail@plt+0x68b0>
   1b79c:	eor	r0, r0, #1
   1b7a0:	ldr	r3, [sp, #20]
   1b7a4:	cmp	r3, #0
   1b7a8:	orrne	r0, r0, #1
   1b7ac:	tst	r0, #255	; 0xff
   1b7b0:	bne	1b86c <__assert_fail@plt+0xa594>
   1b7b4:	ldr	r6, [sl, #100]	; 0x64
   1b7b8:	add	r2, sp, #8
   1b7bc:	mov	r1, fp
   1b7c0:	add	r0, sp, #20
   1b7c4:	bl	1b3e8 <__assert_fail@plt+0xa110>
   1b7c8:	str	r0, [r6, r5, lsl #2]
   1b7cc:	ldr	r0, [sp, #16]
   1b7d0:	bl	22f00 <__assert_fail@plt+0x11c28>
   1b7d4:	ldr	r3, [sl, #100]	; 0x64
   1b7d8:	ldr	r3, [r3, r5, lsl #2]
   1b7dc:	cmp	r3, #0
   1b7e0:	bne	1b710 <__assert_fail@plt+0xa438>
   1b7e4:	ldr	r0, [sp, #20]
   1b7e8:	cmp	r0, #0
   1b7ec:	beq	1b710 <__assert_fail@plt+0xa438>
   1b7f0:	b	1b8a4 <__assert_fail@plt+0xa5cc>
   1b7f4:	mov	r1, r5
   1b7f8:	add	r0, sp, #8
   1b7fc:	bl	15760 <__assert_fail@plt+0x4488>
   1b800:	str	r0, [sp, #20]
   1b804:	ldr	r3, [sp, #64]	; 0x40
   1b808:	ldr	r2, [sp, #4]
   1b80c:	add	r1, sp, #8
   1b810:	mov	r0, fp
   1b814:	bl	188c8 <__assert_fail@plt+0x75f0>
   1b818:	mov	r4, r0
   1b81c:	add	r1, sp, #8
   1b820:	mov	r0, r7
   1b824:	bl	180cc <__assert_fail@plt+0x6df4>
   1b828:	mov	r5, r0
   1b82c:	ldr	r0, [sp, #16]
   1b830:	bl	22f00 <__assert_fail@plt+0x11c28>
   1b834:	ldr	r0, [sp, #20]
   1b838:	orr	r3, r4, r5
   1b83c:	orrs	r3, r3, r0
   1b840:	bne	1b854 <__assert_fail@plt+0xa57c>
   1b844:	ldr	r4, [sl, #116]	; 0x74
   1b848:	ldr	r3, [sp]
   1b84c:	add	r4, r4, r3
   1b850:	b	1b720 <__assert_fail@plt+0xa448>
   1b854:	cmp	r0, #0
   1b858:	bne	1b8a4 <__assert_fail@plt+0xa5cc>
   1b85c:	cmp	r4, #0
   1b860:	movne	r0, r4
   1b864:	moveq	r0, r5
   1b868:	b	1b8a4 <__assert_fail@plt+0xa5cc>
   1b86c:	ldr	r0, [sp, #16]
   1b870:	bl	22f00 <__assert_fail@plt+0x11c28>
   1b874:	ldr	r0, [sp, #20]
   1b878:	cmp	r0, #0
   1b87c:	moveq	r0, #12
   1b880:	b	1b8a4 <__assert_fail@plt+0xa5cc>
   1b884:	mov	r1, r9
   1b888:	add	r0, sp, #8
   1b88c:	bl	15760 <__assert_fail@plt+0x4488>
   1b890:	str	r0, [sp, #20]
   1b894:	cmp	r0, #0
   1b898:	beq	1b7b4 <__assert_fail@plt+0xa4dc>
   1b89c:	b	1b8a4 <__assert_fail@plt+0xa5cc>
   1b8a0:	mov	r0, #0
   1b8a4:	add	sp, sp, #28
   1b8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8b0:	sub	sp, sp, #92	; 0x5c
   1b8b4:	mov	sl, r0
   1b8b8:	str	r1, [sp, #44]	; 0x2c
   1b8bc:	mov	r7, r2
   1b8c0:	mov	r5, r3
   1b8c4:	ldr	r3, [r0, #84]	; 0x54
   1b8c8:	mov	r2, r3
   1b8cc:	str	r3, [sp, #36]	; 0x24
   1b8d0:	mov	r3, #0
   1b8d4:	str	r3, [sp, #84]	; 0x54
   1b8d8:	ldr	r3, [r2]
   1b8dc:	ldr	r3, [r3, r7, lsl #3]
   1b8e0:	str	r3, [sp, #40]	; 0x28
   1b8e4:	ldr	r6, [r1, #4]
   1b8e8:	ldr	r4, [r0, #120]	; 0x78
   1b8ec:	ldr	r3, [sp, #132]	; 0x84
   1b8f0:	add	r4, r3, r4
   1b8f4:	add	r4, r4, #1
   1b8f8:	cmp	r6, r4
   1b8fc:	blt	1ba14 <__assert_fail@plt+0xa73c>
   1b900:	ldr	r3, [sp, #44]	; 0x2c
   1b904:	ldr	fp, [r3]
   1b908:	cmp	fp, #0
   1b90c:	beq	1be84 <__assert_fail@plt+0xabac>
   1b910:	ldr	r2, [sl, #100]	; 0x64
   1b914:	str	r2, [sp, #48]	; 0x30
   1b918:	ldr	r2, [sl, #40]	; 0x28
   1b91c:	str	r2, [sp, #52]	; 0x34
   1b920:	ldr	r6, [r3, #8]
   1b924:	str	r6, [sl, #100]	; 0x64
   1b928:	str	fp, [sl, #40]	; 0x28
   1b92c:	str	sl, [sp, #20]
   1b930:	ldr	r2, [sl, #88]	; 0x58
   1b934:	sub	r1, fp, #1
   1b938:	mov	r0, sl
   1b93c:	bl	184a0 <__assert_fail@plt+0x71c8>
   1b940:	mov	r4, r0
   1b944:	cmp	fp, r5
   1b948:	beq	1bebc <__assert_fail@plt+0xabe4>
   1b94c:	ldr	r6, [r6, fp, lsl #2]
   1b950:	cmp	r6, #0
   1b954:	beq	1bf28 <__assert_fail@plt+0xac50>
   1b958:	ldrb	r3, [r6, #52]	; 0x34
   1b95c:	tst	r3, #64	; 0x40
   1b960:	bne	1ba64 <__assert_fail@plt+0xa78c>
   1b964:	mov	r3, #0
   1b968:	str	r3, [sp, #72]	; 0x48
   1b96c:	str	r3, [sp, #76]	; 0x4c
   1b970:	str	r3, [sp, #80]	; 0x50
   1b974:	ldrb	r3, [r6, #52]	; 0x34
   1b978:	tst	r3, #64	; 0x40
   1b97c:	beq	1b9d8 <__assert_fail@plt+0xa700>
   1b980:	ldr	r3, [sp, #76]	; 0x4c
   1b984:	cmp	r3, #0
   1b988:	beq	1b9b4 <__assert_fail@plt+0xa6dc>
   1b98c:	ldr	r3, [sp, #136]	; 0x88
   1b990:	str	r3, [sp]
   1b994:	ldr	r3, [sp, #40]	; 0x28
   1b998:	mov	r2, fp
   1b99c:	add	r1, sp, #72	; 0x48
   1b9a0:	mov	r0, sl
   1b9a4:	bl	1b6a4 <__assert_fail@plt+0xa3cc>
   1b9a8:	str	r0, [sp, #84]	; 0x54
   1b9ac:	cmp	r0, #0
   1b9b0:	bne	1ba80 <__assert_fail@plt+0xa7a8>
   1b9b4:	mov	r3, r4
   1b9b8:	add	r2, sp, #72	; 0x48
   1b9bc:	ldr	r1, [sp, #36]	; 0x24
   1b9c0:	add	r0, sp, #84	; 0x54
   1b9c4:	bl	173e8 <__assert_fail@plt+0x6110>
   1b9c8:	subs	r6, r0, #0
   1b9cc:	beq	1ba90 <__assert_fail@plt+0xa7b8>
   1b9d0:	ldr	r3, [sl, #100]	; 0x64
   1b9d4:	str	r6, [r3, fp, lsl #2]
   1b9d8:	ldr	r3, [sp, #132]	; 0x84
   1b9dc:	cmp	r3, fp
   1b9e0:	ble	1be54 <__assert_fail@plt+0xab7c>
   1b9e4:	ldr	r3, [sl, #120]	; 0x78
   1b9e8:	cmp	r3, #0
   1b9ec:	blt	1be5c <__assert_fail@plt+0xab84>
   1b9f0:	add	r3, fp, #1
   1b9f4:	lsl	r3, r3, #2
   1b9f8:	str	r3, [sp, #16]
   1b9fc:	mov	r3, #0
   1ba00:	str	r3, [sp, #32]
   1ba04:	mov	r9, r3
   1ba08:	str	fp, [sp, #12]
   1ba0c:	mov	fp, sl
   1ba10:	b	1bd24 <__assert_fail@plt+0xaa4c>
   1ba14:	mvn	r3, #-2147483648	; 0x80000000
   1ba18:	sub	r3, r3, r6
   1ba1c:	cmp	r4, r3
   1ba20:	bgt	1be6c <__assert_fail@plt+0xab94>
   1ba24:	add	r8, r6, r4
   1ba28:	cmn	r8, #-1073741823	; 0xc0000001
   1ba2c:	bhi	1be74 <__assert_fail@plt+0xab9c>
   1ba30:	lsl	r1, r8, #2
   1ba34:	ldr	r9, [sp, #44]	; 0x2c
   1ba38:	ldr	r0, [r9, #8]
   1ba3c:	bl	22d6c <__assert_fail@plt+0x11a94>
   1ba40:	cmp	r0, #0
   1ba44:	beq	1be7c <__assert_fail@plt+0xaba4>
   1ba48:	str	r0, [r9, #8]
   1ba4c:	str	r8, [r9, #4]
   1ba50:	lsl	r2, r4, #2
   1ba54:	mov	r1, #0
   1ba58:	add	r0, r0, r6, lsl #2
   1ba5c:	bl	111f4 <memset@plt>
   1ba60:	b	1b900 <__assert_fail@plt+0xa628>
   1ba64:	add	r1, r6, #4
   1ba68:	add	r0, sp, #72	; 0x48
   1ba6c:	bl	15c30 <__assert_fail@plt+0x4958>
   1ba70:	str	r0, [sp, #84]	; 0x54
   1ba74:	cmp	r0, #0
   1ba78:	beq	1b974 <__assert_fail@plt+0xa69c>
   1ba7c:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1ba80:	ldr	r0, [sp, #80]	; 0x50
   1ba84:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ba88:	ldr	r0, [sp, #84]	; 0x54
   1ba8c:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1ba90:	ldr	r3, [sp, #84]	; 0x54
   1ba94:	cmp	r3, #0
   1ba98:	beq	1b9d0 <__assert_fail@plt+0xa6f8>
   1ba9c:	ldr	r0, [sp, #80]	; 0x50
   1baa0:	bl	22f00 <__assert_fail@plt+0x11c28>
   1baa4:	ldr	r0, [sp, #84]	; 0x54
   1baa8:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1baac:	ldr	r0, [sp, #80]	; 0x50
   1bab0:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bab4:	ldr	r0, [sp, #84]	; 0x54
   1bab8:	add	sp, sp, #92	; 0x5c
   1babc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bac0:	ldr	r3, [sp, #12]
   1bac4:	ldr	r2, [sp, #20]
   1bac8:	mov	r0, r5
   1bacc:	bl	198d4 <__assert_fail@plt+0x85fc>
   1bad0:	mov	r8, r0
   1bad4:	cmp	r0, #1
   1bad8:	ble	1bb6c <__assert_fail@plt+0xa894>
   1badc:	ldr	r3, [r5, #12]
   1bae0:	ldr	r2, [r3, fp, lsl #2]
   1bae4:	str	r2, [sp, #24]
   1bae8:	ldr	r3, [sp, #12]
   1baec:	add	r3, r3, r0
   1baf0:	mov	r2, r3
   1baf4:	str	r3, [sp, #28]
   1baf8:	ldr	r3, [sl, #100]	; 0x64
   1bafc:	ldr	r1, [r3, r2, lsl #2]
   1bb00:	str	r9, [sp, #64]	; 0x40
   1bb04:	cmp	r1, #0
   1bb08:	beq	1bb24 <__assert_fail@plt+0xa84c>
   1bb0c:	add	r1, r1, #4
   1bb10:	add	r0, sp, #60	; 0x3c
   1bb14:	bl	180cc <__assert_fail@plt+0x6df4>
   1bb18:	str	r0, [sp, #56]	; 0x38
   1bb1c:	cmp	r0, #0
   1bb20:	bne	1bbe0 <__assert_fail@plt+0xa908>
   1bb24:	ldr	r1, [sp, #24]
   1bb28:	add	r0, sp, #60	; 0x3c
   1bb2c:	bl	17b88 <__assert_fail@plt+0x68b0>
   1bb30:	cmp	r0, #0
   1bb34:	beq	1bc00 <__assert_fail@plt+0xa928>
   1bb38:	ldr	r3, [sl, #100]	; 0x64
   1bb3c:	str	r3, [sp, #24]
   1bb40:	add	r2, sp, #60	; 0x3c
   1bb44:	mov	r1, r5
   1bb48:	add	r0, sp, #56	; 0x38
   1bb4c:	bl	1b3e8 <__assert_fail@plt+0xa110>
   1bb50:	ldr	r1, [sp, #24]
   1bb54:	ldr	r2, [sp, #28]
   1bb58:	str	r0, [r1, r2, lsl #2]
   1bb5c:	ldr	r3, [sl, #100]	; 0x64
   1bb60:	ldr	r3, [r3, r2, lsl #2]
   1bb64:	cmp	r3, #0
   1bb68:	beq	1bc0c <__assert_fail@plt+0xa934>
   1bb6c:	cmp	r8, #0
   1bb70:	beq	1bbc0 <__assert_fail@plt+0xa8e8>
   1bb74:	ldr	r3, [r5, #12]
   1bb78:	ldr	r1, [r3, fp, lsl #2]
   1bb7c:	add	r0, sp, #72	; 0x48
   1bb80:	bl	17b88 <__assert_fail@plt+0x68b0>
   1bb84:	cmp	r0, #0
   1bb88:	beq	1bc2c <__assert_fail@plt+0xa954>
   1bb8c:	add	r4, r4, #1
   1bb90:	ldr	r3, [r6, #20]
   1bb94:	cmp	r4, r3
   1bb98:	bge	1bc4c <__assert_fail@plt+0xa974>
   1bb9c:	ldr	r3, [r6, #24]
   1bba0:	ldr	r1, [r3, r4, lsl #2]
   1bba4:	mov	fp, r1
   1bba8:	lsl	r7, r1, #3
   1bbac:	ldr	r3, [r5]
   1bbb0:	add	r3, r3, r7
   1bbb4:	ldrb	r3, [r3, #6]
   1bbb8:	tst	r3, #16
   1bbbc:	bne	1bac0 <__assert_fail@plt+0xa7e8>
   1bbc0:	ldr	r1, [r5]
   1bbc4:	ldr	r2, [sp, #12]
   1bbc8:	add	r1, r1, r7
   1bbcc:	mov	r0, sl
   1bbd0:	bl	185b4 <__assert_fail@plt+0x72dc>
   1bbd4:	cmp	r0, #0
   1bbd8:	beq	1bb8c <__assert_fail@plt+0xa8b4>
   1bbdc:	b	1bb74 <__assert_fail@plt+0xa89c>
   1bbe0:	mov	fp, sl
   1bbe4:	ldr	r0, [sp, #68]	; 0x44
   1bbe8:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bbec:	ldr	r3, [sp, #56]	; 0x38
   1bbf0:	str	r3, [sp, #84]	; 0x54
   1bbf4:	cmp	r3, #0
   1bbf8:	beq	1bc5c <__assert_fail@plt+0xa984>
   1bbfc:	b	1bc3c <__assert_fail@plt+0xa964>
   1bc00:	ldr	r0, [sp, #68]	; 0x44
   1bc04:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bc08:	b	1bc34 <__assert_fail@plt+0xa95c>
   1bc0c:	ldr	r3, [sp, #56]	; 0x38
   1bc10:	cmp	r3, #0
   1bc14:	beq	1bb6c <__assert_fail@plt+0xa894>
   1bc18:	mov	fp, sl
   1bc1c:	ldr	r0, [sp, #68]	; 0x44
   1bc20:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bc24:	ldr	r3, [sp, #56]	; 0x38
   1bc28:	b	1bbf0 <__assert_fail@plt+0xa918>
   1bc2c:	ldr	r0, [sp, #68]	; 0x44
   1bc30:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bc34:	mov	r3, #12
   1bc38:	str	r3, [sp, #84]	; 0x54
   1bc3c:	ldr	r0, [sp, #80]	; 0x50
   1bc40:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bc44:	ldr	r0, [sp, #84]	; 0x54
   1bc48:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1bc4c:	mov	fp, sl
   1bc50:	ldr	r0, [sp, #68]	; 0x44
   1bc54:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bc58:	str	r9, [sp, #84]	; 0x54
   1bc5c:	ldr	r3, [sp, #12]
   1bc60:	add	r4, r3, #1
   1bc64:	ldr	r3, [sp, #76]	; 0x4c
   1bc68:	cmp	r3, #0
   1bc6c:	beq	1bcb8 <__assert_fail@plt+0xa9e0>
   1bc70:	ldr	r3, [sp, #136]	; 0x88
   1bc74:	ldr	r2, [sp, #40]	; 0x28
   1bc78:	add	r1, sp, #72	; 0x48
   1bc7c:	ldr	r0, [sp, #36]	; 0x24
   1bc80:	bl	188c8 <__assert_fail@plt+0x75f0>
   1bc84:	str	r0, [sp, #84]	; 0x54
   1bc88:	cmp	r0, #0
   1bc8c:	bne	1bda4 <__assert_fail@plt+0xaacc>
   1bc90:	ldr	r3, [sp, #136]	; 0x88
   1bc94:	str	r3, [sp]
   1bc98:	ldr	r3, [sp, #40]	; 0x28
   1bc9c:	mov	r2, r4
   1bca0:	add	r1, sp, #72	; 0x48
   1bca4:	mov	r0, fp
   1bca8:	bl	1b6a4 <__assert_fail@plt+0xa3cc>
   1bcac:	str	r0, [sp, #84]	; 0x54
   1bcb0:	cmp	r0, #0
   1bcb4:	bne	1bdb4 <__assert_fail@plt+0xaadc>
   1bcb8:	ldr	r2, [fp, #88]	; 0x58
   1bcbc:	ldr	r1, [sp, #12]
   1bcc0:	ldr	r0, [sp, #20]
   1bcc4:	bl	184a0 <__assert_fail@plt+0x71c8>
   1bcc8:	mov	r3, r0
   1bccc:	add	r2, sp, #72	; 0x48
   1bcd0:	ldr	r1, [sp, #36]	; 0x24
   1bcd4:	add	r0, sp, #84	; 0x54
   1bcd8:	bl	173e8 <__assert_fail@plt+0x6110>
   1bcdc:	subs	r6, r0, #0
   1bce0:	beq	1bdc4 <__assert_fail@plt+0xaaec>
   1bce4:	ldr	r3, [fp, #100]	; 0x64
   1bce8:	ldr	r2, [sp, #16]
   1bcec:	str	r6, [r3, r2]
   1bcf0:	mov	r3, #0
   1bcf4:	str	r3, [sp, #32]
   1bcf8:	ldr	r3, [sp, #132]	; 0x84
   1bcfc:	cmp	r3, r4
   1bd00:	ble	1be64 <__assert_fail@plt+0xab8c>
   1bd04:	ldr	r3, [sp, #16]
   1bd08:	add	r3, r3, #4
   1bd0c:	str	r3, [sp, #16]
   1bd10:	ldr	r3, [fp, #120]	; 0x78
   1bd14:	ldr	r2, [sp, #32]
   1bd18:	cmp	r2, r3
   1bd1c:	bgt	1bdfc <__assert_fail@plt+0xab24>
   1bd20:	str	r4, [sp, #12]
   1bd24:	str	r9, [sp, #76]	; 0x4c
   1bd28:	ldr	r3, [fp, #100]	; 0x64
   1bd2c:	ldr	r2, [sp, #16]
   1bd30:	ldr	r1, [r3, r2]
   1bd34:	cmp	r1, #0
   1bd38:	beq	1bf3c <__assert_fail@plt+0xac64>
   1bd3c:	add	r1, r1, #4
   1bd40:	add	r0, sp, #72	; 0x48
   1bd44:	bl	180cc <__assert_fail@plt+0x6df4>
   1bd48:	str	r0, [sp, #84]	; 0x54
   1bd4c:	cmp	r0, #0
   1bd50:	bne	1baac <__assert_fail@plt+0xa7d4>
   1bd54:	cmp	r6, #0
   1bd58:	beq	1bc5c <__assert_fail@plt+0xa984>
   1bd5c:	ldr	r5, [fp, #84]	; 0x54
   1bd60:	str	r9, [sp, #56]	; 0x38
   1bd64:	str	r9, [sp, #60]	; 0x3c
   1bd68:	str	r9, [sp, #64]	; 0x40
   1bd6c:	str	r9, [sp, #68]	; 0x44
   1bd70:	ldr	r3, [r6, #20]
   1bd74:	cmp	r3, #0
   1bd78:	ble	1bc50 <__assert_fail@plt+0xa978>
   1bd7c:	ldr	r3, [r6, #24]
   1bd80:	ldr	r1, [r3]
   1bd84:	lsl	r7, r1, #3
   1bd88:	ldr	r3, [r5]
   1bd8c:	add	r3, r3, r7
   1bd90:	mov	r4, #0
   1bd94:	mov	r2, fp
   1bd98:	mov	fp, r1
   1bd9c:	mov	sl, r2
   1bda0:	b	1bbb4 <__assert_fail@plt+0xa8dc>
   1bda4:	ldr	r0, [sp, #80]	; 0x50
   1bda8:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bdac:	ldr	r0, [sp, #84]	; 0x54
   1bdb0:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1bdb4:	ldr	r0, [sp, #80]	; 0x50
   1bdb8:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bdbc:	ldr	r0, [sp, #84]	; 0x54
   1bdc0:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1bdc4:	ldr	r3, [sp, #84]	; 0x54
   1bdc8:	cmp	r3, #0
   1bdcc:	bne	1bdec <__assert_fail@plt+0xab14>
   1bdd0:	ldr	r3, [fp, #100]	; 0x64
   1bdd4:	ldr	r2, [sp, #16]
   1bdd8:	str	r9, [r3, r2]
   1bddc:	ldr	r3, [sp, #32]
   1bde0:	add	r3, r3, #1
   1bde4:	str	r3, [sp, #32]
   1bde8:	b	1bcf8 <__assert_fail@plt+0xaa20>
   1bdec:	ldr	r0, [sp, #80]	; 0x50
   1bdf0:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bdf4:	ldr	r0, [sp, #84]	; 0x54
   1bdf8:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1bdfc:	mov	sl, fp
   1be00:	ldr	r0, [sp, #80]	; 0x50
   1be04:	bl	22f00 <__assert_fail@plt+0x11c28>
   1be08:	ldr	r3, [sl, #100]	; 0x64
   1be0c:	ldr	r2, [sp, #132]	; 0x84
   1be10:	ldr	r3, [r3, r2, lsl #2]
   1be14:	cmp	r3, #0
   1be18:	beq	1bf08 <__assert_fail@plt+0xac30>
   1be1c:	ldr	r2, [sp, #44]	; 0x2c
   1be20:	str	r4, [r2]
   1be24:	ldr	r2, [sp, #48]	; 0x30
   1be28:	str	r2, [sl, #100]	; 0x64
   1be2c:	ldr	r2, [sp, #52]	; 0x34
   1be30:	str	r2, [sl, #40]	; 0x28
   1be34:	adds	r0, r3, #4
   1be38:	moveq	r0, #1
   1be3c:	beq	1bab8 <__assert_fail@plt+0xa7e0>
   1be40:	ldr	r1, [sp, #128]	; 0x80
   1be44:	bl	147f4 <__assert_fail@plt+0x351c>
   1be48:	clz	r0, r0
   1be4c:	lsr	r0, r0, #5
   1be50:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1be54:	mov	r4, fp
   1be58:	b	1be00 <__assert_fail@plt+0xab28>
   1be5c:	mov	r4, fp
   1be60:	b	1be00 <__assert_fail@plt+0xab28>
   1be64:	mov	sl, fp
   1be68:	b	1be00 <__assert_fail@plt+0xab28>
   1be6c:	mov	r0, #12
   1be70:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1be74:	mov	r0, #12
   1be78:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1be7c:	mov	r0, #12
   1be80:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1be84:	ldr	r3, [sl, #100]	; 0x64
   1be88:	str	r3, [sp, #48]	; 0x30
   1be8c:	ldr	r3, [sl, #40]	; 0x28
   1be90:	str	r3, [sp, #52]	; 0x34
   1be94:	ldr	r3, [sp, #44]	; 0x2c
   1be98:	ldr	r3, [r3, #8]
   1be9c:	str	r3, [sl, #100]	; 0x64
   1bea0:	str	r5, [sl, #40]	; 0x28
   1bea4:	str	sl, [sp, #20]
   1bea8:	ldr	r2, [sl, #88]	; 0x58
   1beac:	sub	r1, r5, #1
   1beb0:	mov	r0, sl
   1beb4:	bl	184a0 <__assert_fail@plt+0x71c8>
   1beb8:	mov	r4, r0
   1bebc:	mov	r1, r7
   1bec0:	add	r0, sp, #72	; 0x48
   1bec4:	bl	15760 <__assert_fail@plt+0x4488>
   1bec8:	str	r0, [sp, #84]	; 0x54
   1becc:	cmp	r0, #0
   1bed0:	bne	1bab8 <__assert_fail@plt+0xa7e0>
   1bed4:	ldr	r3, [sp, #136]	; 0x88
   1bed8:	ldr	r2, [sp, #40]	; 0x28
   1bedc:	add	r1, sp, #72	; 0x48
   1bee0:	ldr	r0, [sp, #36]	; 0x24
   1bee4:	bl	188c8 <__assert_fail@plt+0x75f0>
   1bee8:	str	r0, [sp, #84]	; 0x54
   1beec:	cmp	r0, #0
   1bef0:	moveq	fp, r5
   1bef4:	beq	1b980 <__assert_fail@plt+0xa6a8>
   1bef8:	ldr	r0, [sp, #80]	; 0x50
   1befc:	bl	22f00 <__assert_fail@plt+0x11c28>
   1bf00:	ldr	r0, [sp, #84]	; 0x54
   1bf04:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1bf08:	ldr	r3, [sp, #44]	; 0x2c
   1bf0c:	str	r4, [r3]
   1bf10:	ldr	r3, [sp, #48]	; 0x30
   1bf14:	str	r3, [sl, #100]	; 0x64
   1bf18:	ldr	r3, [sp, #52]	; 0x34
   1bf1c:	str	r3, [sl, #40]	; 0x28
   1bf20:	mov	r0, #1
   1bf24:	b	1bab8 <__assert_fail@plt+0xa7e0>
   1bf28:	mov	r3, #0
   1bf2c:	str	r3, [sp, #72]	; 0x48
   1bf30:	str	r3, [sp, #76]	; 0x4c
   1bf34:	str	r3, [sp, #80]	; 0x50
   1bf38:	b	1b9d8 <__assert_fail@plt+0xa700>
   1bf3c:	cmp	r6, #0
   1bf40:	bne	1bd5c <__assert_fail@plt+0xaa84>
   1bf44:	ldr	r3, [sp, #12]
   1bf48:	add	r4, r3, #1
   1bf4c:	b	1bcb8 <__assert_fail@plt+0xa9e0>
   1bf50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1bf54:	sub	sp, sp, #16
   1bf58:	mov	r4, r0
   1bf5c:	mov	r8, r1
   1bf60:	mov	r6, r2
   1bf64:	mov	r9, r3
   1bf68:	ldr	r5, [sp, #48]	; 0x30
   1bf6c:	mov	r1, r2
   1bf70:	ldr	r2, [r1], #8
   1bf74:	mov	r3, #8
   1bf78:	str	r3, [sp, #8]
   1bf7c:	str	r5, [sp, #4]
   1bf80:	str	r9, [sp]
   1bf84:	ldr	r3, [r6, #4]
   1bf88:	bl	1b8ac <__assert_fail@plt+0xa5d4>
   1bf8c:	cmp	r0, #0
   1bf90:	beq	1bf9c <__assert_fail@plt+0xacc4>
   1bf94:	add	sp, sp, #16
   1bf98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1bf9c:	ldr	sl, [r8]
   1bfa0:	ldr	r7, [r6, #4]
   1bfa4:	ldr	r1, [r4, #112]	; 0x70
   1bfa8:	ldr	r3, [r4, #108]	; 0x6c
   1bfac:	cmp	r3, r1
   1bfb0:	bge	1c09c <__assert_fail@plt+0xadc4>
   1bfb4:	ldr	r3, [r4, #108]	; 0x6c
   1bfb8:	cmp	r3, #0
   1bfbc:	ble	1bfe4 <__assert_fail@plt+0xad0c>
   1bfc0:	add	r3, r3, r3, lsl #1
   1bfc4:	lsl	r3, r3, #3
   1bfc8:	sub	r3, r3, #24
   1bfcc:	ldr	r2, [r4, #116]	; 0x74
   1bfd0:	add	r3, r2, r3
   1bfd4:	ldr	r2, [r3, #4]
   1bfd8:	cmp	r5, r2
   1bfdc:	moveq	r2, #1
   1bfe0:	strbeq	r2, [r3, #20]
   1bfe4:	ldr	r3, [r4, #108]	; 0x6c
   1bfe8:	ldr	r2, [r4, #116]	; 0x74
   1bfec:	add	r3, r3, r3, lsl #1
   1bff0:	str	r9, [r2, r3, lsl #3]
   1bff4:	ldr	r3, [r4, #108]	; 0x6c
   1bff8:	ldr	r2, [r4, #116]	; 0x74
   1bffc:	add	r3, r3, r3, lsl #1
   1c000:	add	r3, r2, r3, lsl #3
   1c004:	str	r5, [r3, #4]
   1c008:	ldr	r3, [r4, #108]	; 0x6c
   1c00c:	ldr	r2, [r4, #116]	; 0x74
   1c010:	add	r3, r3, r3, lsl #1
   1c014:	add	r3, r2, r3, lsl #3
   1c018:	str	sl, [r3, #8]
   1c01c:	ldr	r3, [r4, #108]	; 0x6c
   1c020:	ldr	r2, [r4, #116]	; 0x74
   1c024:	add	r3, r3, r3, lsl #1
   1c028:	add	r3, r2, r3, lsl #3
   1c02c:	str	r7, [r3, #12]
   1c030:	ldr	r3, [r4, #108]	; 0x6c
   1c034:	ldr	r2, [r4, #116]	; 0x74
   1c038:	add	r3, r3, r3, lsl #1
   1c03c:	add	r3, r2, r3, lsl #3
   1c040:	cmp	sl, r7
   1c044:	movne	r2, #0
   1c048:	mvneq	r2, #0
   1c04c:	str	r2, [r3, #16]
   1c050:	ldr	r2, [r4, #116]	; 0x74
   1c054:	ldr	r3, [r4, #108]	; 0x6c
   1c058:	add	r1, r3, #1
   1c05c:	str	r1, [r4, #108]	; 0x6c
   1c060:	add	r3, r3, r3, lsl #1
   1c064:	add	r3, r2, r3, lsl #3
   1c068:	mov	r2, #0
   1c06c:	strb	r2, [r3, #20]
   1c070:	sub	r7, r7, sl
   1c074:	ldr	r3, [r4, #120]	; 0x78
   1c078:	cmp	r3, r7
   1c07c:	strlt	r7, [r4, #120]	; 0x78
   1c080:	ldr	r1, [r6, #4]
   1c084:	add	r5, r5, r1
   1c088:	ldr	r1, [r8]
   1c08c:	sub	r1, r5, r1
   1c090:	mov	r0, r4
   1c094:	bl	1883c <__assert_fail@plt+0x7564>
   1c098:	b	1bf94 <__assert_fail@plt+0xacbc>
   1c09c:	add	r1, r1, r1, lsl #1
   1c0a0:	lsl	r1, r1, #4
   1c0a4:	ldr	r0, [r4, #116]	; 0x74
   1c0a8:	bl	22d6c <__assert_fail@plt+0x11a94>
   1c0ac:	cmp	r0, #0
   1c0b0:	beq	1c0e8 <__assert_fail@plt+0xae10>
   1c0b4:	str	r0, [r4, #116]	; 0x74
   1c0b8:	ldr	r2, [r4, #112]	; 0x70
   1c0bc:	add	r2, r2, r2, lsl #1
   1c0c0:	ldr	r3, [r4, #108]	; 0x6c
   1c0c4:	add	r3, r3, r3, lsl #1
   1c0c8:	lsl	r2, r2, #3
   1c0cc:	mov	r1, #0
   1c0d0:	add	r0, r0, r3, lsl #3
   1c0d4:	bl	111f4 <memset@plt>
   1c0d8:	ldr	r3, [r4, #112]	; 0x70
   1c0dc:	lsl	r3, r3, #1
   1c0e0:	str	r3, [r4, #112]	; 0x70
   1c0e4:	b	1bfb4 <__assert_fail@plt+0xacdc>
   1c0e8:	ldr	r0, [r4, #116]	; 0x74
   1c0ec:	bl	22f00 <__assert_fail@plt+0x11c28>
   1c0f0:	mov	r0, #12
   1c0f4:	b	1bf94 <__assert_fail@plt+0xacbc>
   1c0f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0fc:	sub	sp, sp, #84	; 0x54
   1c100:	ldr	r3, [r0, #84]	; 0x54
   1c104:	str	r3, [sp, #32]
   1c108:	ldr	r3, [r0, #40]	; 0x28
   1c10c:	mov	r2, r3
   1c110:	str	r3, [sp, #28]
   1c114:	ldr	r3, [r1, #4]
   1c118:	cmp	r3, #0
   1c11c:	ble	1c7e4 <__assert_fail@plt+0xb50c>
   1c120:	mov	sl, r0
   1c124:	lsl	r3, r2, #2
   1c128:	str	r3, [sp, #44]	; 0x2c
   1c12c:	mov	r3, #0
   1c130:	str	r3, [sp, #20]
   1c134:	mov	r8, r1
   1c138:	b	1c778 <__assert_fail@plt+0xb4a0>
   1c13c:	tst	r3, #8
   1c140:	beq	1c14c <__assert_fail@plt+0xae74>
   1c144:	tst	r0, #1
   1c148:	bne	1c75c <__assert_fail@plt+0xb484>
   1c14c:	tst	r3, #32
   1c150:	beq	1c15c <__assert_fail@plt+0xae84>
   1c154:	tst	r0, #2
   1c158:	beq	1c75c <__assert_fail@plt+0xb484>
   1c15c:	tst	r3, #128	; 0x80
   1c160:	beq	1c16c <__assert_fail@plt+0xae94>
   1c164:	tst	r0, #8
   1c168:	beq	1c75c <__assert_fail@plt+0xb484>
   1c16c:	ldr	fp, [sl, #108]	; 0x6c
   1c170:	ldr	r1, [sp, #28]
   1c174:	mov	r0, sl
   1c178:	bl	14e18 <__assert_fail@plt+0x3b40>
   1c17c:	cmn	r0, #1
   1c180:	beq	1c1b4 <__assert_fail@plt+0xaedc>
   1c184:	add	r0, r0, r0, lsl #1
   1c188:	lsl	r3, r0, #3
   1c18c:	add	r2, r3, #24
   1c190:	ldr	r3, [sl, #116]	; 0x74
   1c194:	add	r3, r3, r2
   1c198:	ldr	r2, [r3, #-24]	; 0xffffffe8
   1c19c:	cmp	r9, r2
   1c1a0:	beq	1c524 <__assert_fail@plt+0xb24c>
   1c1a4:	add	r3, r3, #24
   1c1a8:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   1c1ac:	cmp	r2, #0
   1c1b0:	bne	1c198 <__assert_fail@plt+0xaec0>
   1c1b4:	ldr	r3, [sl, #84]	; 0x54
   1c1b8:	str	r3, [sp, #48]	; 0x30
   1c1bc:	ldr	r3, [r3]
   1c1c0:	ldr	r3, [r3, r9, lsl #3]
   1c1c4:	str	r3, [sp, #52]	; 0x34
   1c1c8:	ldr	r3, [sl, #124]	; 0x7c
   1c1cc:	cmp	r3, #0
   1c1d0:	ble	1c524 <__assert_fail@plt+0xb24c>
   1c1d4:	ldr	r3, [sl, #4]
   1c1d8:	mov	r2, #0
   1c1dc:	str	r2, [sp, #40]	; 0x28
   1c1e0:	str	r9, [sp, #36]	; 0x24
   1c1e4:	str	fp, [sp, #56]	; 0x38
   1c1e8:	str	r8, [sp, #60]	; 0x3c
   1c1ec:	mov	r8, r3
   1c1f0:	b	1c2c8 <__assert_fail@plt+0xaff0>
   1c1f4:	mov	r2, r5
   1c1f8:	ldr	r3, [sp, #24]
   1c1fc:	add	r1, r8, r3
   1c200:	add	r0, r8, r6
   1c204:	bl	110a4 <memcmp@plt>
   1c208:	cmp	r0, #0
   1c20c:	bne	1c2a0 <__assert_fail@plt+0xafc8>
   1c210:	add	r6, r6, r5
   1c214:	ldr	r3, [sp, #28]
   1c218:	str	r3, [sp]
   1c21c:	ldr	r3, [sp, #36]	; 0x24
   1c220:	mov	r2, r9
   1c224:	mov	r1, r4
   1c228:	mov	r0, sl
   1c22c:	bl	1bf50 <__assert_fail@plt+0xac78>
   1c230:	ldr	r8, [sl, #4]
   1c234:	cmp	r0, #1
   1c238:	bhi	1c530 <__assert_fail@plt+0xb258>
   1c23c:	add	r7, r7, #1
   1c240:	str	fp, [sp, #24]
   1c244:	ldr	r3, [r4, #16]
   1c248:	cmp	r7, r3
   1c24c:	bge	1c314 <__assert_fail@plt+0xb03c>
   1c250:	ldr	r3, [r4, #20]
   1c254:	ldr	r9, [r3, r7, lsl #2]
   1c258:	ldr	fp, [r9, #4]
   1c25c:	ldr	r3, [sp, #24]
   1c260:	sub	r5, fp, r3
   1c264:	cmp	r5, #0
   1c268:	ble	1c210 <__assert_fail@plt+0xaf38>
   1c26c:	add	r1, r6, r5
   1c270:	ldr	r3, [sl, #28]
   1c274:	cmp	r1, r3
   1c278:	ble	1c1f4 <__assert_fail@plt+0xaf1c>
   1c27c:	ldr	r3, [sl, #48]	; 0x30
   1c280:	cmp	r1, r3
   1c284:	bgt	1c2a0 <__assert_fail@plt+0xafc8>
   1c288:	mov	r0, sl
   1c28c:	bl	1883c <__assert_fail@plt+0x7564>
   1c290:	cmp	r0, #0
   1c294:	bne	1c4e8 <__assert_fail@plt+0xb210>
   1c298:	ldr	r8, [sl, #4]
   1c29c:	b	1c1f4 <__assert_fail@plt+0xaf1c>
   1c2a0:	ldr	r3, [r4, #16]
   1c2a4:	cmp	r3, r7
   1c2a8:	ble	1c310 <__assert_fail@plt+0xb038>
   1c2ac:	ldr	r3, [sp, #40]	; 0x28
   1c2b0:	add	r3, r3, #1
   1c2b4:	mov	r2, r3
   1c2b8:	str	r3, [sp, #40]	; 0x28
   1c2bc:	ldr	r3, [sl, #124]	; 0x7c
   1c2c0:	cmp	r2, r3
   1c2c4:	bge	1c518 <__assert_fail@plt+0xb240>
   1c2c8:	ldr	r3, [sl, #132]	; 0x84
   1c2cc:	ldr	r2, [sp, #40]	; 0x28
   1c2d0:	ldr	r4, [r3, r2, lsl #2]
   1c2d4:	ldr	r2, [r4, #4]
   1c2d8:	ldr	r3, [sp, #48]	; 0x30
   1c2dc:	ldr	r3, [r3]
   1c2e0:	ldr	r3, [r3, r2, lsl #3]
   1c2e4:	ldr	r2, [sp, #52]	; 0x34
   1c2e8:	cmp	r2, r3
   1c2ec:	bne	1c2ac <__assert_fail@plt+0xafd4>
   1c2f0:	ldr	r3, [r4]
   1c2f4:	str	r3, [sp, #24]
   1c2f8:	ldr	r3, [r4, #16]
   1c2fc:	cmp	r3, #0
   1c300:	ble	1c334 <__assert_fail@plt+0xb05c>
   1c304:	ldr	r6, [sp, #28]
   1c308:	mov	r7, #0
   1c30c:	b	1c250 <__assert_fail@plt+0xaf78>
   1c310:	ldr	fp, [sp, #24]
   1c314:	cmp	r7, #0
   1c318:	addgt	fp, fp, #1
   1c31c:	ldr	r3, [sp, #28]
   1c320:	cmp	r3, fp
   1c324:	blt	1c2ac <__assert_fail@plt+0xafd4>
   1c328:	lsl	r9, fp, #2
   1c32c:	ldr	r7, [sp, #52]	; 0x34
   1c330:	b	1c458 <__assert_fail@plt+0xb180>
   1c334:	ldr	r6, [sp, #28]
   1c338:	ldr	fp, [sp, #24]
   1c33c:	b	1c31c <__assert_fail@plt+0xb044>
   1c340:	ldr	r3, [sl, #48]	; 0x30
   1c344:	cmp	r3, r6
   1c348:	ble	1c2ac <__assert_fail@plt+0xafd4>
   1c34c:	add	r1, r6, #1
   1c350:	mov	r0, sl
   1c354:	bl	16484 <__assert_fail@plt+0x51ac>
   1c358:	cmp	r0, #0
   1c35c:	bne	1c4e8 <__assert_fail@plt+0xb210>
   1c360:	ldr	r8, [sl, #4]
   1c364:	b	1c474 <__assert_fail@plt+0xb19c>
   1c368:	add	r3, r3, #1
   1c36c:	cmp	ip, r3
   1c370:	beq	1c444 <__assert_fail@plt+0xb16c>
   1c374:	ldr	r5, [r2, #4]!
   1c378:	add	r1, r0, r5, lsl #3
   1c37c:	ldrb	r1, [r1, #4]
   1c380:	cmp	r1, #9
   1c384:	bne	1c368 <__assert_fail@plt+0xb090>
   1c388:	ldr	r1, [r0, r5, lsl #3]
   1c38c:	cmp	r7, r1
   1c390:	bne	1c368 <__assert_fail@plt+0xb090>
   1c394:	cmn	r5, #1
   1c398:	beq	1c444 <__assert_fail@plt+0xb16c>
   1c39c:	ldr	r3, [r4, #8]
   1c3a0:	cmp	r3, #0
   1c3a4:	beq	1c4c4 <__assert_fail@plt+0xb1ec>
   1c3a8:	ldr	r3, [r4]
   1c3ac:	ldr	r2, [r4, #4]
   1c3b0:	ldr	r1, [r4, #8]
   1c3b4:	mov	r0, #9
   1c3b8:	str	r0, [sp, #8]
   1c3bc:	str	fp, [sp, #4]
   1c3c0:	str	r5, [sp]
   1c3c4:	mov	r0, sl
   1c3c8:	bl	1b8ac <__assert_fail@plt+0xa5d4>
   1c3cc:	cmp	r0, #1
   1c3d0:	beq	1c444 <__assert_fail@plt+0xb16c>
   1c3d4:	cmp	r0, #0
   1c3d8:	bne	1c4e8 <__assert_fail@plt+0xb210>
   1c3dc:	ldr	r3, [r4, #16]
   1c3e0:	ldr	r2, [r4, #12]
   1c3e4:	cmp	r3, r2
   1c3e8:	beq	1c4f0 <__assert_fail@plt+0xb218>
   1c3ec:	mov	r1, #20
   1c3f0:	mov	r0, #1
   1c3f4:	bl	22cec <__assert_fail@plt+0x11a14>
   1c3f8:	subs	r2, r0, #0
   1c3fc:	beq	1c7f0 <__assert_fail@plt+0xb518>
   1c400:	ldr	r1, [r4, #16]
   1c404:	ldr	r3, [r4, #20]
   1c408:	str	r2, [r3, r1, lsl #2]
   1c40c:	str	r5, [r2]
   1c410:	str	fp, [r2, #4]
   1c414:	ldr	r3, [r4, #16]
   1c418:	add	r3, r3, #1
   1c41c:	str	r3, [r4, #16]
   1c420:	ldr	r3, [sp, #28]
   1c424:	str	r3, [sp]
   1c428:	ldr	r3, [sp, #36]	; 0x24
   1c42c:	mov	r1, r4
   1c430:	mov	r0, sl
   1c434:	bl	1bf50 <__assert_fail@plt+0xac78>
   1c438:	ldr	r8, [sl, #4]
   1c43c:	cmp	r0, #1
   1c440:	bhi	1c580 <__assert_fail@plt+0xb2a8>
   1c444:	add	fp, fp, #1
   1c448:	add	r9, r9, #4
   1c44c:	ldr	r3, [sp, #28]
   1c450:	cmp	r3, fp
   1c454:	blt	1c2ac <__assert_fail@plt+0xafd4>
   1c458:	ldr	r3, [r4]
   1c45c:	sub	r3, fp, r3
   1c460:	cmp	r3, #0
   1c464:	ble	1c490 <__assert_fail@plt+0xb1b8>
   1c468:	ldr	r3, [sl, #28]
   1c46c:	cmp	r3, r6
   1c470:	ble	1c340 <__assert_fail@plt+0xb068>
   1c474:	add	r2, r6, #1
   1c478:	add	r3, r8, fp
   1c47c:	ldrb	r1, [r8, r6]
   1c480:	ldrb	r3, [r3, #-1]
   1c484:	cmp	r1, r3
   1c488:	bne	1c2ac <__assert_fail@plt+0xafd4>
   1c48c:	mov	r6, r2
   1c490:	ldr	r3, [sl, #100]	; 0x64
   1c494:	ldr	r3, [r3, r9]
   1c498:	cmp	r3, #0
   1c49c:	beq	1c444 <__assert_fail@plt+0xb16c>
   1c4a0:	ldr	ip, [r3, #8]
   1c4a4:	cmp	ip, #0
   1c4a8:	ble	1c444 <__assert_fail@plt+0xb16c>
   1c4ac:	ldr	r2, [sp, #48]	; 0x30
   1c4b0:	ldr	r0, [r2]
   1c4b4:	ldr	r2, [r3, #12]
   1c4b8:	sub	r2, r2, #4
   1c4bc:	mov	r3, #0
   1c4c0:	b	1c374 <__assert_fail@plt+0xb09c>
   1c4c4:	ldr	r1, [r4]
   1c4c8:	sub	r1, fp, r1
   1c4cc:	add	r1, r1, #1
   1c4d0:	mov	r0, #12
   1c4d4:	bl	22cec <__assert_fail@plt+0x11a14>
   1c4d8:	str	r0, [r4, #8]
   1c4dc:	cmp	r0, #0
   1c4e0:	bne	1c3a8 <__assert_fail@plt+0xb0d0>
   1c4e4:	mov	r0, #12
   1c4e8:	str	r0, [sp, #76]	; 0x4c
   1c4ec:	b	1c5d0 <__assert_fail@plt+0xb2f8>
   1c4f0:	lsl	r3, r3, #1
   1c4f4:	add	r8, r3, #1
   1c4f8:	lsl	r1, r8, #2
   1c4fc:	ldr	r0, [r4, #20]
   1c500:	bl	22d6c <__assert_fail@plt+0x11a94>
   1c504:	cmp	r0, #0
   1c508:	beq	1c7f0 <__assert_fail@plt+0xb518>
   1c50c:	str	r0, [r4, #20]
   1c510:	str	r8, [r4, #12]
   1c514:	b	1c3ec <__assert_fail@plt+0xb114>
   1c518:	ldr	r9, [sp, #36]	; 0x24
   1c51c:	ldr	fp, [sp, #56]	; 0x38
   1c520:	ldr	r8, [sp, #60]	; 0x3c
   1c524:	mov	r3, #0
   1c528:	str	r3, [sp, #76]	; 0x4c
   1c52c:	b	1c548 <__assert_fail@plt+0xb270>
   1c530:	ldr	r9, [sp, #36]	; 0x24
   1c534:	ldr	fp, [sp, #56]	; 0x38
   1c538:	ldr	r8, [sp, #60]	; 0x3c
   1c53c:	str	r0, [sp, #76]	; 0x4c
   1c540:	cmp	r0, #0
   1c544:	bne	1c5d0 <__assert_fail@plt+0xb2f8>
   1c548:	lsl	r3, r9, #2
   1c54c:	str	r3, [sp, #52]	; 0x34
   1c550:	ldr	r3, [sl, #108]	; 0x6c
   1c554:	cmp	fp, r3
   1c558:	bge	1c75c <__assert_fail@plt+0xb484>
   1c55c:	add	r3, r9, r9, lsl #1
   1c560:	lsl	r3, r3, #2
   1c564:	str	r3, [sp, #56]	; 0x38
   1c568:	add	r4, fp, fp, lsl #1
   1c56c:	lsl	r4, r4, #3
   1c570:	ldr	r6, [sp, #28]
   1c574:	str	r8, [sp, #60]	; 0x3c
   1c578:	ldr	r8, [sp, #32]
   1c57c:	b	1c600 <__assert_fail@plt+0xb328>
   1c580:	ldr	r9, [sp, #36]	; 0x24
   1c584:	ldr	fp, [sp, #56]	; 0x38
   1c588:	ldr	r8, [sp, #60]	; 0x3c
   1c58c:	b	1c53c <__assert_fail@plt+0xb264>
   1c590:	ldr	r3, [sp, #40]	; 0x28
   1c594:	ldr	r2, [sp, #24]
   1c598:	mov	r1, r8
   1c59c:	add	r0, sp, #76	; 0x4c
   1c5a0:	bl	173e8 <__assert_fail@plt+0x6110>
   1c5a4:	str	r0, [r7, r5, lsl #2]
   1c5a8:	ldr	r3, [sl, #100]	; 0x64
   1c5ac:	ldr	r3, [r3, r5, lsl #2]
   1c5b0:	cmp	r3, #0
   1c5b4:	bne	1c6f4 <__assert_fail@plt+0xb41c>
   1c5b8:	ldr	r3, [sp, #76]	; 0x4c
   1c5bc:	cmp	r3, #0
   1c5c0:	beq	1c6f4 <__assert_fail@plt+0xb41c>
   1c5c4:	b	1c5d0 <__assert_fail@plt+0xb2f8>
   1c5c8:	ldr	r0, [sp, #72]	; 0x48
   1c5cc:	bl	22f00 <__assert_fail@plt+0x11c28>
   1c5d0:	ldr	r0, [sp, #76]	; 0x4c
   1c5d4:	add	sp, sp, #84	; 0x54
   1c5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5dc:	ldr	r3, [sp, #76]	; 0x4c
   1c5e0:	cmp	r3, #0
   1c5e4:	beq	1c6f4 <__assert_fail@plt+0xb41c>
   1c5e8:	b	1c5d0 <__assert_fail@plt+0xb2f8>
   1c5ec:	add	fp, fp, #1
   1c5f0:	add	r4, r4, #24
   1c5f4:	ldr	r3, [sl, #108]	; 0x6c
   1c5f8:	cmp	r3, fp
   1c5fc:	ble	1c758 <__assert_fail@plt+0xb480>
   1c600:	ldr	r3, [sl, #116]	; 0x74
   1c604:	add	r2, r3, r4
   1c608:	ldr	r3, [r3, r4]
   1c60c:	cmp	r9, r3
   1c610:	bne	1c5ec <__assert_fail@plt+0xb314>
   1c614:	ldr	r3, [r2, #4]
   1c618:	cmp	r6, r3
   1c61c:	bne	1c5ec <__assert_fail@plt+0xb314>
   1c620:	ldr	r3, [r2, #12]
   1c624:	ldr	r5, [r2, #8]
   1c628:	subs	r2, r3, r5
   1c62c:	str	r2, [sp, #36]	; 0x24
   1c630:	ldreq	r2, [r8, #20]
   1c634:	ldreq	r1, [sp, #56]	; 0x38
   1c638:	addeq	r2, r2, r1
   1c63c:	ldreq	r2, [r2, #8]
   1c640:	ldreq	r2, [r2]
   1c644:	ldrne	r2, [r8, #12]
   1c648:	ldrne	r1, [sp, #52]	; 0x34
   1c64c:	ldrne	r2, [r2, r1]
   1c650:	add	r2, r2, r2, lsl #1
   1c654:	ldr	r1, [r8, #24]
   1c658:	add	r2, r1, r2, lsl #2
   1c65c:	str	r2, [sp, #24]
   1c660:	add	r3, r6, r3
   1c664:	sub	r5, r3, r5
   1c668:	ldr	r2, [sl, #88]	; 0x58
   1c66c:	sub	r1, r5, #1
   1c670:	mov	r0, sl
   1c674:	bl	184a0 <__assert_fail@plt+0x71c8>
   1c678:	str	r0, [sp, #40]	; 0x28
   1c67c:	ldr	r7, [sl, #100]	; 0x64
   1c680:	ldr	r3, [r7, r5, lsl #2]
   1c684:	ldr	r2, [sp, #44]	; 0x2c
   1c688:	ldr	r2, [r7, r2]
   1c68c:	cmp	r2, #0
   1c690:	ldrne	r2, [r2, #8]
   1c694:	moveq	r2, #0
   1c698:	str	r2, [sp, #48]	; 0x30
   1c69c:	cmp	r3, #0
   1c6a0:	beq	1c590 <__assert_fail@plt+0xb2b8>
   1c6a4:	ldr	r2, [sp, #24]
   1c6a8:	ldr	r1, [r3, #40]	; 0x28
   1c6ac:	add	r0, sp, #64	; 0x40
   1c6b0:	bl	15cac <__assert_fail@plt+0x49d4>
   1c6b4:	str	r0, [sp, #76]	; 0x4c
   1c6b8:	cmp	r0, #0
   1c6bc:	bne	1c5c8 <__assert_fail@plt+0xb2f0>
   1c6c0:	ldr	r7, [sl, #100]	; 0x64
   1c6c4:	ldr	r3, [sp, #40]	; 0x28
   1c6c8:	add	r2, sp, #64	; 0x40
   1c6cc:	mov	r1, r8
   1c6d0:	add	r0, sp, #76	; 0x4c
   1c6d4:	bl	173e8 <__assert_fail@plt+0x6110>
   1c6d8:	str	r0, [r7, r5, lsl #2]
   1c6dc:	ldr	r0, [sp, #72]	; 0x48
   1c6e0:	bl	22f00 <__assert_fail@plt+0x11c28>
   1c6e4:	ldr	r3, [sl, #100]	; 0x64
   1c6e8:	ldr	r3, [r3, r5, lsl #2]
   1c6ec:	cmp	r3, #0
   1c6f0:	beq	1c5dc <__assert_fail@plt+0xb304>
   1c6f4:	ldr	r3, [sp, #36]	; 0x24
   1c6f8:	cmp	r3, #0
   1c6fc:	bne	1c5ec <__assert_fail@plt+0xb314>
   1c700:	ldr	r3, [sl, #100]	; 0x64
   1c704:	ldr	r2, [sp, #44]	; 0x2c
   1c708:	ldr	r3, [r3, r2]
   1c70c:	ldr	r3, [r3, #8]
   1c710:	ldr	r2, [sp, #48]	; 0x30
   1c714:	cmp	r2, r3
   1c718:	bge	1c5ec <__assert_fail@plt+0xb314>
   1c71c:	mov	r2, r6
   1c720:	ldr	r5, [sp, #24]
   1c724:	mov	r1, r5
   1c728:	mov	r0, sl
   1c72c:	bl	18734 <__assert_fail@plt+0x745c>
   1c730:	str	r0, [sp, #76]	; 0x4c
   1c734:	cmp	r0, #0
   1c738:	bne	1c5d0 <__assert_fail@plt+0xb2f8>
   1c73c:	mov	r1, r5
   1c740:	mov	r0, sl
   1c744:	bl	1c0f8 <__assert_fail@plt+0xae20>
   1c748:	str	r0, [sp, #76]	; 0x4c
   1c74c:	cmp	r0, #0
   1c750:	beq	1c5ec <__assert_fail@plt+0xb314>
   1c754:	b	1c5d0 <__assert_fail@plt+0xb2f8>
   1c758:	ldr	r8, [sp, #60]	; 0x3c
   1c75c:	ldr	r3, [sp, #20]
   1c760:	add	r3, r3, #1
   1c764:	mov	r2, r3
   1c768:	str	r3, [sp, #20]
   1c76c:	ldr	r3, [r8, #4]
   1c770:	cmp	r3, r2
   1c774:	ble	1c7e4 <__assert_fail@plt+0xb50c>
   1c778:	ldr	r3, [r8, #8]
   1c77c:	ldr	r2, [sp, #20]
   1c780:	ldr	r9, [r3, r2, lsl #2]
   1c784:	ldr	r3, [sp, #32]
   1c788:	ldr	r4, [r3]
   1c78c:	add	r4, r4, r9, lsl #3
   1c790:	ldrb	r3, [r4, #4]
   1c794:	cmp	r3, #4
   1c798:	bne	1c75c <__assert_fail@plt+0xb484>
   1c79c:	ldr	r3, [r4, #4]
   1c7a0:	ldr	r2, [pc, #84]	; 1c7fc <__assert_fail@plt+0xb524>
   1c7a4:	tst	r3, r2
   1c7a8:	beq	1c16c <__assert_fail@plt+0xae94>
   1c7ac:	ldr	r2, [sl, #88]	; 0x58
   1c7b0:	ldr	r1, [sp, #28]
   1c7b4:	mov	r0, sl
   1c7b8:	bl	184a0 <__assert_fail@plt+0x71c8>
   1c7bc:	ldr	r3, [r4, #4]
   1c7c0:	lsl	r3, r3, #14
   1c7c4:	lsr	r3, r3, #22
   1c7c8:	tst	r3, #4
   1c7cc:	beq	1c13c <__assert_fail@plt+0xae64>
   1c7d0:	tst	r0, #1
   1c7d4:	beq	1c75c <__assert_fail@plt+0xb484>
   1c7d8:	tst	r3, #8
   1c7dc:	bne	1c75c <__assert_fail@plt+0xb484>
   1c7e0:	b	1c14c <__assert_fail@plt+0xae74>
   1c7e4:	mov	r3, #0
   1c7e8:	str	r3, [sp, #76]	; 0x4c
   1c7ec:	b	1c5d0 <__assert_fail@plt+0xb2f8>
   1c7f0:	mov	r3, #12
   1c7f4:	str	r3, [sp, #76]	; 0x4c
   1c7f8:	b	1c5d0 <__assert_fail@plt+0xb2f8>
   1c7fc:	andeq	pc, r3, r0, lsl #30
   1c800:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c804:	sub	sp, sp, #16
   1c808:	mov	r8, r0
   1c80c:	mov	r4, r1
   1c810:	mov	r5, r2
   1c814:	ldr	r7, [r1, #84]	; 0x54
   1c818:	ldr	r6, [r1, #40]	; 0x28
   1c81c:	ldr	r3, [r1, #104]	; 0x68
   1c820:	cmp	r6, r3
   1c824:	ble	1c880 <__assert_fail@plt+0xb5a8>
   1c828:	ldr	r3, [r1, #100]	; 0x64
   1c82c:	str	r2, [r3, r6, lsl #2]
   1c830:	str	r6, [r1, #104]	; 0x68
   1c834:	ldr	r3, [r7, #76]	; 0x4c
   1c838:	cmp	r3, #0
   1c83c:	cmpne	r5, #0
   1c840:	moveq	r0, r5
   1c844:	beq	1c878 <__assert_fail@plt+0xb5a0>
   1c848:	add	r7, r5, #4
   1c84c:	mov	r2, r6
   1c850:	mov	r1, r7
   1c854:	mov	r0, r4
   1c858:	bl	18734 <__assert_fail@plt+0x745c>
   1c85c:	str	r0, [r8]
   1c860:	cmp	r0, #0
   1c864:	bne	1c968 <__assert_fail@plt+0xb690>
   1c868:	ldrb	r3, [r5, #52]	; 0x34
   1c86c:	tst	r3, #64	; 0x40
   1c870:	moveq	r0, r5
   1c874:	bne	1c944 <__assert_fail@plt+0xb66c>
   1c878:	add	sp, sp, #16
   1c87c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c880:	ldr	r9, [r1, #100]	; 0x64
   1c884:	ldr	r3, [r9, r6, lsl #2]
   1c888:	cmp	r3, #0
   1c88c:	streq	r2, [r9, r6, lsl #2]
   1c890:	beq	1c834 <__assert_fail@plt+0xb55c>
   1c894:	ldr	r2, [r3, #40]	; 0x28
   1c898:	cmp	r5, #0
   1c89c:	beq	1c908 <__assert_fail@plt+0xb630>
   1c8a0:	ldr	r9, [r5, #40]	; 0x28
   1c8a4:	mov	r1, r9
   1c8a8:	add	r0, sp, #4
   1c8ac:	bl	15cac <__assert_fail@plt+0x49d4>
   1c8b0:	str	r0, [r8]
   1c8b4:	cmp	r0, #0
   1c8b8:	movne	r0, #0
   1c8bc:	bne	1c878 <__assert_fail@plt+0xb5a0>
   1c8c0:	ldr	r1, [r4, #40]	; 0x28
   1c8c4:	ldr	r2, [r4, #88]	; 0x58
   1c8c8:	sub	r1, r1, #1
   1c8cc:	mov	r0, r4
   1c8d0:	bl	184a0 <__assert_fail@plt+0x71c8>
   1c8d4:	ldr	sl, [r4, #100]	; 0x64
   1c8d8:	mov	r3, r0
   1c8dc:	add	r2, sp, #4
   1c8e0:	mov	r1, r7
   1c8e4:	mov	r0, r8
   1c8e8:	bl	173e8 <__assert_fail@plt+0x6110>
   1c8ec:	mov	r5, r0
   1c8f0:	str	r0, [sl, r6, lsl #2]
   1c8f4:	cmp	r9, #0
   1c8f8:	beq	1c834 <__assert_fail@plt+0xb55c>
   1c8fc:	ldr	r0, [sp, #12]
   1c900:	bl	22f00 <__assert_fail@plt+0x11c28>
   1c904:	b	1c834 <__assert_fail@plt+0xb55c>
   1c908:	add	r5, sp, #4
   1c90c:	ldm	r2, {r0, r1, r2}
   1c910:	stm	r5, {r0, r1, r2}
   1c914:	ldr	r2, [r4, #88]	; 0x58
   1c918:	sub	r1, r6, #1
   1c91c:	mov	r0, r4
   1c920:	bl	184a0 <__assert_fail@plt+0x71c8>
   1c924:	mov	r3, r0
   1c928:	mov	r2, r5
   1c92c:	mov	r1, r7
   1c930:	mov	r0, r8
   1c934:	bl	173e8 <__assert_fail@plt+0x6110>
   1c938:	mov	r5, r0
   1c93c:	str	r0, [r9, r6, lsl #2]
   1c940:	b	1c834 <__assert_fail@plt+0xb55c>
   1c944:	mov	r1, r7
   1c948:	mov	r0, r4
   1c94c:	bl	1c0f8 <__assert_fail@plt+0xae20>
   1c950:	str	r0, [r8]
   1c954:	cmp	r0, #0
   1c958:	bne	1c970 <__assert_fail@plt+0xb698>
   1c95c:	ldr	r3, [r4, #100]	; 0x64
   1c960:	ldr	r0, [r3, r6, lsl #2]
   1c964:	b	1c878 <__assert_fail@plt+0xb5a0>
   1c968:	mov	r0, #0
   1c96c:	b	1c878 <__assert_fail@plt+0xb5a0>
   1c970:	mov	r0, #0
   1c974:	b	1c878 <__assert_fail@plt+0xb5a0>
   1c978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c97c:	sub	sp, sp, #92	; 0x5c
   1c980:	str	r0, [sp, #28]
   1c984:	mov	sl, r1
   1c988:	mov	fp, r2
   1c98c:	mov	r5, r3
   1c990:	ldr	r6, [r0, #84]	; 0x54
   1c994:	mov	r3, #0
   1c998:	str	r3, [sp, #84]	; 0x54
   1c99c:	lsl	r3, r2, #2
   1c9a0:	str	r3, [sp, #32]
   1c9a4:	ldr	r3, [r0, #100]	; 0x64
   1c9a8:	ldr	r3, [r3, r2, lsl #2]
   1c9ac:	cmp	r3, #0
   1c9b0:	addne	r3, r3, #4
   1c9b4:	moveq	r3, #0
   1c9b8:	str	r3, [sp, #12]
   1c9bc:	ldr	r3, [r5, #4]
   1c9c0:	cmp	r3, #0
   1c9c4:	bne	1ca0c <__assert_fail@plt+0xb734>
   1c9c8:	ldr	r3, [r1]
   1c9cc:	mov	r2, #0
   1c9d0:	str	r2, [r3, fp, lsl #2]
   1c9d4:	ldr	r3, [sp, #12]
   1c9d8:	cmp	r3, #0
   1c9dc:	moveq	r4, #0
   1c9e0:	beq	1ca00 <__assert_fail@plt+0xb728>
   1c9e4:	ldr	r3, [sp, #28]
   1c9e8:	ldr	r3, [r3, #100]	; 0x64
   1c9ec:	ldr	r3, [r3, fp, lsl #2]
   1c9f0:	ldrb	r3, [r3, #52]	; 0x34
   1c9f4:	tst	r3, #64	; 0x40
   1c9f8:	moveq	r4, #0
   1c9fc:	bne	1ccb4 <__assert_fail@plt+0xb9dc>
   1ca00:	mov	r0, r4
   1ca04:	add	sp, sp, #92	; 0x5c
   1ca08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ca0c:	ldr	r3, [sp, #12]
   1ca10:	cmp	r3, #0
   1ca14:	beq	1cc8c <__assert_fail@plt+0xb9b4>
   1ca18:	add	r0, sp, #88	; 0x58
   1ca1c:	mov	r3, #0
   1ca20:	str	r3, [r0, #-32]!	; 0xffffffe0
   1ca24:	mov	r2, r5
   1ca28:	mov	r1, r6
   1ca2c:	bl	1b3e8 <__assert_fail@plt+0xa110>
   1ca30:	mov	r7, r0
   1ca34:	ldr	r4, [sp, #56]	; 0x38
   1ca38:	cmp	r4, #0
   1ca3c:	bne	1ca00 <__assert_fail@plt+0xb728>
   1ca40:	ldr	r3, [r0, #28]
   1ca44:	cmp	r3, #0
   1ca48:	bne	1caac <__assert_fail@plt+0xb7d4>
   1ca4c:	add	r8, r0, #28
   1ca50:	ldr	r1, [r5, #4]
   1ca54:	mov	r0, r8
   1ca58:	bl	157a4 <__assert_fail@plt+0x44cc>
   1ca5c:	str	r0, [sp, #56]	; 0x38
   1ca60:	cmp	r0, #0
   1ca64:	bne	1cf74 <__assert_fail@plt+0xbc9c>
   1ca68:	ldr	r3, [r5, #4]
   1ca6c:	cmp	r3, #0
   1ca70:	ble	1caac <__assert_fail@plt+0xb7d4>
   1ca74:	ldr	r3, [r5, #8]
   1ca78:	ldr	r1, [r3, r4, lsl #2]
   1ca7c:	add	r1, r1, r1, lsl #1
   1ca80:	ldr	r3, [r6, #28]
   1ca84:	add	r1, r3, r1, lsl #2
   1ca88:	mov	r0, r8
   1ca8c:	bl	180cc <__assert_fail@plt+0x6df4>
   1ca90:	str	r0, [sp, #56]	; 0x38
   1ca94:	cmp	r0, #0
   1ca98:	bne	1cf7c <__assert_fail@plt+0xbca4>
   1ca9c:	add	r4, r4, #1
   1caa0:	ldr	r3, [r5, #4]
   1caa4:	cmp	r4, r3
   1caa8:	blt	1ca74 <__assert_fail@plt+0xb79c>
   1caac:	add	r2, r7, #28
   1cab0:	ldr	r1, [sp, #12]
   1cab4:	mov	r0, r5
   1cab8:	bl	15a70 <__assert_fail@plt+0x4798>
   1cabc:	mov	r4, r0
   1cac0:	str	r0, [sp, #84]	; 0x54
   1cac4:	cmp	r0, #0
   1cac8:	bne	1ca00 <__assert_fail@plt+0xb728>
   1cacc:	ldr	r3, [sl, #20]
   1cad0:	cmp	r3, #0
   1cad4:	bne	1cb00 <__assert_fail@plt+0xb828>
   1cad8:	ldr	r4, [sl]
   1cadc:	mov	r2, r5
   1cae0:	mov	r1, r6
   1cae4:	add	r0, sp, #84	; 0x54
   1cae8:	bl	1b3e8 <__assert_fail@plt+0xa110>
   1caec:	str	r0, [r4, fp, lsl #2]
   1caf0:	ldr	r4, [sp, #84]	; 0x54
   1caf4:	cmp	r4, #0
   1caf8:	beq	1c9e4 <__assert_fail@plt+0xb70c>
   1cafc:	b	1ca00 <__assert_fail@plt+0xb728>
   1cb00:	ldr	r3, [sp, #28]
   1cb04:	ldr	r3, [r3, #116]	; 0x74
   1cb08:	str	r3, [sp, #20]
   1cb0c:	ble	1cf84 <__assert_fail@plt+0xbcac>
   1cb10:	mov	r7, #0
   1cb14:	b	1cfd0 <__assert_fail@plt+0xbcf8>
   1cb18:	ldr	lr, [r5, #4]
   1cb1c:	cmp	lr, #0
   1cb20:	ble	1cfc0 <__assert_fail@plt+0xbce8>
   1cb24:	ldr	r3, [r5, #8]
   1cb28:	add	lr, r3, lr, lsl #2
   1cb2c:	mvn	r2, #0
   1cb30:	mov	r4, r2
   1cb34:	mov	r1, r2
   1cb38:	b	1cb50 <__assert_fail@plt+0xb878>
   1cb3c:	ldr	ip, [r0, r2, lsl #3]
   1cb40:	cmp	r8, ip
   1cb44:	moveq	r1, r2
   1cb48:	cmp	lr, r3
   1cb4c:	beq	1cb7c <__assert_fail@plt+0xb8a4>
   1cb50:	ldr	r2, [r3], #4
   1cb54:	add	ip, r0, r2, lsl #3
   1cb58:	ldrb	ip, [ip, #4]
   1cb5c:	cmp	ip, #8
   1cb60:	beq	1cb3c <__assert_fail@plt+0xb864>
   1cb64:	cmp	ip, #9
   1cb68:	bne	1cb48 <__assert_fail@plt+0xb870>
   1cb6c:	ldr	ip, [r0, r2, lsl #3]
   1cb70:	cmp	r8, ip
   1cb74:	moveq	r4, r2
   1cb78:	b	1cb48 <__assert_fail@plt+0xb870>
   1cb7c:	str	r4, [sp, #16]
   1cb80:	cmp	r1, #0
   1cb84:	blt	1cfb4 <__assert_fail@plt+0xbcdc>
   1cb88:	ldr	r3, [sp, #12]
   1cb8c:	mov	r2, r5
   1cb90:	mov	r0, r6
   1cb94:	bl	19c00 <__assert_fail@plt+0x8928>
   1cb98:	cmp	r0, #0
   1cb9c:	bne	1d028 <__assert_fail@plt+0xbd50>
   1cba0:	cmp	r4, #0
   1cba4:	blt	1cfc0 <__assert_fail@plt+0xbce8>
   1cba8:	ldr	r3, [r5, #4]
   1cbac:	cmp	r3, #0
   1cbb0:	ble	1cfc0 <__assert_fail@plt+0xbce8>
   1cbb4:	mov	r8, #0
   1cbb8:	b	1cbcc <__assert_fail@plt+0xb8f4>
   1cbbc:	add	r8, r8, #1
   1cbc0:	ldr	r3, [r5, #4]
   1cbc4:	cmp	r8, r3
   1cbc8:	bge	1cfc0 <__assert_fail@plt+0xbce8>
   1cbcc:	ldr	r3, [r5, #8]
   1cbd0:	ldr	r9, [r3, r8, lsl #2]
   1cbd4:	add	r4, r9, r9, lsl #1
   1cbd8:	lsl	r4, r4, #2
   1cbdc:	ldr	r0, [r6, #28]
   1cbe0:	ldr	r1, [sp, #16]
   1cbe4:	add	r0, r0, r4
   1cbe8:	bl	147f4 <__assert_fail@plt+0x351c>
   1cbec:	cmp	r0, #0
   1cbf0:	bne	1cbbc <__assert_fail@plt+0xb8e4>
   1cbf4:	ldr	r0, [r6, #24]
   1cbf8:	ldr	r1, [sp, #16]
   1cbfc:	add	r0, r0, r4
   1cc00:	bl	147f4 <__assert_fail@plt+0x351c>
   1cc04:	cmp	r0, #0
   1cc08:	bne	1cbbc <__assert_fail@plt+0xb8e4>
   1cc0c:	ldr	r3, [sp, #12]
   1cc10:	mov	r2, r5
   1cc14:	mov	r1, r9
   1cc18:	mov	r0, r6
   1cc1c:	bl	19c00 <__assert_fail@plt+0x8928>
   1cc20:	cmp	r0, #0
   1cc24:	bne	1d030 <__assert_fail@plt+0xbd58>
   1cc28:	sub	r8, r8, #1
   1cc2c:	b	1cbbc <__assert_fail@plt+0xb8e4>
   1cc30:	add	r9, r9, #1
   1cc34:	ldr	r3, [r5, #4]
   1cc38:	cmp	r9, r3
   1cc3c:	bge	1cfc0 <__assert_fail@plt+0xbce8>
   1cc40:	ldr	r3, [r5, #8]
   1cc44:	ldr	r1, [r3, r9, lsl #2]
   1cc48:	ldr	r2, [r6]
   1cc4c:	add	r3, r2, r1, lsl #3
   1cc50:	ldrb	r3, [r3, #4]
   1cc54:	sub	r3, r3, #8
   1cc58:	cmp	r3, #1
   1cc5c:	bhi	1cc30 <__assert_fail@plt+0xb958>
   1cc60:	ldr	r3, [r2, r1, lsl #3]
   1cc64:	cmp	r8, r3
   1cc68:	bne	1cc30 <__assert_fail@plt+0xb958>
   1cc6c:	ldr	r3, [sp, #12]
   1cc70:	mov	r2, r5
   1cc74:	mov	r0, r6
   1cc78:	bl	19c00 <__assert_fail@plt+0x8928>
   1cc7c:	cmp	r0, #0
   1cc80:	beq	1cc30 <__assert_fail@plt+0xb958>
   1cc84:	mov	r4, r0
   1cc88:	b	1ca00 <__assert_fail@plt+0xb728>
   1cc8c:	ldr	r4, [r1]
   1cc90:	mov	r2, r5
   1cc94:	mov	r1, r6
   1cc98:	add	r0, sp, #84	; 0x54
   1cc9c:	bl	1b3e8 <__assert_fail@plt+0xa110>
   1cca0:	str	r0, [r4, fp, lsl #2]
   1cca4:	ldr	r4, [sp, #84]	; 0x54
   1cca8:	cmp	r4, #0
   1ccac:	beq	1c9d4 <__assert_fail@plt+0xb6fc>
   1ccb0:	b	1ca00 <__assert_fail@plt+0xb728>
   1ccb4:	mov	r1, fp
   1ccb8:	ldr	r4, [sp, #28]
   1ccbc:	mov	r0, r4
   1ccc0:	bl	14e18 <__assert_fail@plt+0x3b40>
   1ccc4:	str	r0, [sp, #44]	; 0x2c
   1ccc8:	cmn	r0, #1
   1cccc:	moveq	r4, #0
   1ccd0:	beq	1ca00 <__assert_fail@plt+0xb728>
   1ccd4:	ldr	r9, [r4, #84]	; 0x54
   1ccd8:	mov	r3, #0
   1ccdc:	str	r3, [sp, #56]	; 0x38
   1cce0:	ldr	r1, [sp, #12]
   1cce4:	ldr	r3, [r1, #4]
   1cce8:	cmp	r3, #0
   1ccec:	ble	1cf6c <__assert_fail@plt+0xbc94>
   1ccf0:	add	r3, r0, r0, lsl #1
   1ccf4:	lsl	r3, r3, #3
   1ccf8:	str	r3, [sp, #48]	; 0x30
   1ccfc:	mov	r3, #0
   1cd00:	str	r3, [sp, #16]
   1cd04:	add	r3, sl, #16
   1cd08:	str	r3, [sp, #40]	; 0x28
   1cd0c:	add	r3, fp, #1
   1cd10:	str	r3, [sp, #52]	; 0x34
   1cd14:	str	fp, [sp, #12]
   1cd18:	mov	fp, r1
   1cd1c:	b	1cee4 <__assert_fail@plt+0xbc0c>
   1cd20:	ldr	r3, [sl, #12]
   1cd24:	ldr	r1, [sp, #12]
   1cd28:	cmp	r1, r3
   1cd2c:	bne	1cf08 <__assert_fail@plt+0xbc30>
   1cd30:	b	1cec8 <__assert_fail@plt+0xbbf0>
   1cd34:	add	ip, sp, #56	; 0x38
   1cd38:	mov	lr, sl
   1cd3c:	ldm	lr!, {r0, r1, r2, r3}
   1cd40:	stmia	ip!, {r0, r1, r2, r3}
   1cd44:	ldm	lr, {r0, r1, r2}
   1cd48:	stm	ip, {r0, r1, r2}
   1cd4c:	ldr	r1, [sp, #40]	; 0x28
   1cd50:	add	r0, sp, #72	; 0x48
   1cd54:	bl	15c30 <__assert_fail@plt+0x4958>
   1cd58:	cmp	r0, #0
   1cd5c:	beq	1ce58 <__assert_fail@plt+0xbb80>
   1cd60:	mov	r4, r0
   1cd64:	b	1cf44 <__assert_fail@plt+0xbc6c>
   1cd68:	ldr	r3, [sp, #56]	; 0x38
   1cd6c:	ldr	r2, [sp, #32]
   1cd70:	str	r4, [r3, r2]
   1cd74:	mov	r1, r5
   1cd78:	add	r0, sp, #72	; 0x48
   1cd7c:	bl	147f4 <__assert_fail@plt+0x351c>
   1cd80:	sub	r1, r0, #1
   1cd84:	add	r0, sp, #72	; 0x48
   1cd88:	bl	1488c <__assert_fail@plt+0x35b4>
   1cd8c:	ldr	r3, [sp, #28]
   1cd90:	ldr	r4, [r3, #116]	; 0x74
   1cd94:	add	r4, r4, r6
   1cd98:	add	r5, r5, #1
   1cd9c:	add	r2, r4, #24
   1cda0:	add	r6, r6, #24
   1cda4:	ldrb	r3, [r4, #20]
   1cda8:	cmp	r3, #0
   1cdac:	beq	1cec4 <__assert_fail@plt+0xbbec>
   1cdb0:	mov	r4, r2
   1cdb4:	ldr	r3, [r4]
   1cdb8:	cmp	r7, r3
   1cdbc:	bne	1cd98 <__assert_fail@plt+0xbac0>
   1cdc0:	ldr	r3, [r4, #12]
   1cdc4:	ldr	r2, [r4, #8]
   1cdc8:	sub	r3, r3, r2
   1cdcc:	ldr	r2, [sp, #12]
   1cdd0:	add	r8, r2, r3
   1cdd4:	cmp	r3, #0
   1cdd8:	ldrne	r3, [r9, #12]
   1cddc:	ldrne	r2, [sp, #20]
   1cde0:	ldrne	fp, [r3, r2]
   1cde4:	ldreq	r3, [r9, #20]
   1cde8:	ldreq	r2, [sp, #24]
   1cdec:	addeq	r3, r3, r2
   1cdf0:	ldreq	r3, [r3, #8]
   1cdf4:	ldreq	fp, [r3]
   1cdf8:	ldr	r3, [sl, #12]
   1cdfc:	cmp	r8, r3
   1ce00:	bgt	1cd98 <__assert_fail@plt+0xbac0>
   1ce04:	ldr	r3, [sl]
   1ce08:	ldr	r0, [r3, r8, lsl #2]
   1ce0c:	cmp	r0, #0
   1ce10:	beq	1cd98 <__assert_fail@plt+0xbac0>
   1ce14:	mov	r1, fp
   1ce18:	add	r0, r0, #4
   1ce1c:	bl	147f4 <__assert_fail@plt+0x351c>
   1ce20:	cmp	r0, #0
   1ce24:	beq	1cd98 <__assert_fail@plt+0xbac0>
   1ce28:	str	r8, [sp, #4]
   1ce2c:	str	fp, [sp]
   1ce30:	ldr	r3, [sp, #12]
   1ce34:	mov	r2, r7
   1ce38:	ldr	r1, [sp, #40]	; 0x28
   1ce3c:	ldr	r0, [sp, #28]
   1ce40:	bl	14ec8 <__assert_fail@plt+0x3bf0>
   1ce44:	cmp	r0, #0
   1ce48:	bne	1cd98 <__assert_fail@plt+0xbac0>
   1ce4c:	ldr	r3, [sp, #56]	; 0x38
   1ce50:	cmp	r3, #0
   1ce54:	beq	1cd34 <__assert_fail@plt+0xba5c>
   1ce58:	str	r7, [sp, #64]	; 0x40
   1ce5c:	ldr	r3, [sp, #12]
   1ce60:	str	r3, [sp, #68]	; 0x44
   1ce64:	mov	r1, r5
   1ce68:	add	r0, sp, #72	; 0x48
   1ce6c:	bl	17b88 <__assert_fail@plt+0x68b0>
   1ce70:	cmp	r0, #0
   1ce74:	beq	1cf5c <__assert_fail@plt+0xbc84>
   1ce78:	ldr	r3, [sp, #56]	; 0x38
   1ce7c:	ldr	r2, [sp, #32]
   1ce80:	ldr	r4, [r3, r2]
   1ce84:	add	r1, sp, #56	; 0x38
   1ce88:	ldr	r0, [sp, #28]
   1ce8c:	bl	1d038 <__assert_fail@plt+0xbd60>
   1ce90:	cmp	r0, #0
   1ce94:	bne	1cf64 <__assert_fail@plt+0xbc8c>
   1ce98:	ldr	r1, [sl, #4]
   1ce9c:	cmp	r1, #0
   1cea0:	beq	1cd68 <__assert_fail@plt+0xba90>
   1cea4:	ldr	r3, [sp, #52]	; 0x34
   1cea8:	ldr	r2, [sp, #56]	; 0x38
   1ceac:	mov	r0, r9
   1ceb0:	bl	1b5f0 <__assert_fail@plt+0xa318>
   1ceb4:	cmp	r0, #0
   1ceb8:	beq	1cd68 <__assert_fail@plt+0xba90>
   1cebc:	mov	r4, r0
   1cec0:	b	1cf44 <__assert_fail@plt+0xbc6c>
   1cec4:	ldr	fp, [sp, #36]	; 0x24
   1cec8:	ldr	r3, [sp, #16]
   1cecc:	add	r3, r3, #1
   1ced0:	mov	r2, r3
   1ced4:	str	r3, [sp, #16]
   1ced8:	ldr	r3, [fp, #4]
   1cedc:	cmp	r2, r3
   1cee0:	bge	1cf40 <__assert_fail@plt+0xbc68>
   1cee4:	ldr	r3, [fp, #8]
   1cee8:	ldr	r2, [sp, #16]
   1ceec:	ldr	r7, [r3, r2, lsl #2]
   1cef0:	ldr	r3, [r9]
   1cef4:	add	r3, r3, r7, lsl #3
   1cef8:	ldrb	r2, [r3, #4]
   1cefc:	ldr	r3, [sl, #8]
   1cf00:	cmp	r7, r3
   1cf04:	beq	1cd20 <__assert_fail@plt+0xba48>
   1cf08:	cmp	r2, #4
   1cf0c:	bne	1cec8 <__assert_fail@plt+0xbbf0>
   1cf10:	ldr	r3, [sp, #28]
   1cf14:	ldr	r4, [r3, #116]	; 0x74
   1cf18:	ldr	r6, [sp, #48]	; 0x30
   1cf1c:	add	r4, r4, r6
   1cf20:	add	r3, r7, r7, lsl #1
   1cf24:	lsl	r3, r3, #2
   1cf28:	str	r3, [sp, #24]
   1cf2c:	lsl	r3, r7, #2
   1cf30:	str	r3, [sp, #20]
   1cf34:	ldr	r5, [sp, #44]	; 0x2c
   1cf38:	str	fp, [sp, #36]	; 0x24
   1cf3c:	b	1cdb4 <__assert_fail@plt+0xbadc>
   1cf40:	mov	r4, #0
   1cf44:	ldr	r3, [sp, #56]	; 0x38
   1cf48:	cmp	r3, #0
   1cf4c:	beq	1ca00 <__assert_fail@plt+0xb728>
   1cf50:	ldr	r0, [sp, #80]	; 0x50
   1cf54:	bl	22f00 <__assert_fail@plt+0x11c28>
   1cf58:	b	1ca00 <__assert_fail@plt+0xb728>
   1cf5c:	mov	r4, #12
   1cf60:	b	1cf44 <__assert_fail@plt+0xbc6c>
   1cf64:	mov	r4, r0
   1cf68:	b	1cf44 <__assert_fail@plt+0xbc6c>
   1cf6c:	mov	r4, #0
   1cf70:	b	1ca00 <__assert_fail@plt+0xb728>
   1cf74:	mov	r4, #12
   1cf78:	b	1ca00 <__assert_fail@plt+0xb728>
   1cf7c:	mov	r4, #12
   1cf80:	b	1ca00 <__assert_fail@plt+0xb728>
   1cf84:	add	r0, sp, #88	; 0x58
   1cf88:	mov	r3, #0
   1cf8c:	str	r3, [r0, #-4]!
   1cf90:	ldr	r4, [sl]
   1cf94:	mov	r2, r5
   1cf98:	mov	r1, r6
   1cf9c:	bl	1b3e8 <__assert_fail@plt+0xa110>
   1cfa0:	str	r0, [r4, fp, lsl #2]
   1cfa4:	ldr	r4, [sp, #84]	; 0x54
   1cfa8:	cmp	r4, #0
   1cfac:	beq	1c9e4 <__assert_fail@plt+0xb70c>
   1cfb0:	b	1ca00 <__assert_fail@plt+0xb728>
   1cfb4:	ldr	r3, [sp, #16]
   1cfb8:	cmp	r3, #0
   1cfbc:	bge	1cbb4 <__assert_fail@plt+0xb8dc>
   1cfc0:	add	r7, r7, #1
   1cfc4:	ldr	r3, [sl, #20]
   1cfc8:	cmp	r7, r3
   1cfcc:	bge	1cf84 <__assert_fail@plt+0xbcac>
   1cfd0:	ldr	r3, [sl, #24]
   1cfd4:	ldr	r3, [r3, r7, lsl #2]
   1cfd8:	add	r3, r3, r3, lsl #1
   1cfdc:	ldr	ip, [sp, #20]
   1cfe0:	add	r2, ip, r3, lsl #3
   1cfe4:	ldr	r1, [r2, #8]
   1cfe8:	cmp	fp, r1
   1cfec:	ble	1cfc0 <__assert_fail@plt+0xbce8>
   1cff0:	ldr	r1, [r2, #4]
   1cff4:	cmp	fp, r1
   1cff8:	bgt	1cfc0 <__assert_fail@plt+0xbce8>
   1cffc:	ldr	r0, [r6]
   1d000:	ldr	r3, [ip, r3, lsl #3]
   1d004:	ldr	r8, [r0, r3, lsl #3]
   1d008:	ldr	r3, [r2, #12]
   1d00c:	cmp	fp, r3
   1d010:	beq	1cb18 <__assert_fail@plt+0xb840>
   1d014:	ldr	r3, [r5, #4]
   1d018:	cmp	r3, #0
   1d01c:	movgt	r9, #0
   1d020:	bgt	1cc40 <__assert_fail@plt+0xb968>
   1d024:	b	1cfc0 <__assert_fail@plt+0xbce8>
   1d028:	mov	r4, r0
   1d02c:	b	1ca00 <__assert_fail@plt+0xb728>
   1d030:	mov	r4, r0
   1d034:	b	1ca00 <__assert_fail@plt+0xb728>
   1d038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d03c:	sub	sp, sp, #60	; 0x3c
   1d040:	mov	r5, r0
   1d044:	str	r0, [sp, #12]
   1d048:	mov	r9, r1
   1d04c:	ldr	fp, [r1, #12]
   1d050:	lsl	r3, fp, #2
   1d054:	str	r3, [sp, #16]
   1d058:	ldr	r1, [r1, #8]
   1d05c:	add	r0, sp, #44	; 0x2c
   1d060:	bl	15760 <__assert_fail@plt+0x4488>
   1d064:	subs	r4, r0, #0
   1d068:	bne	1d2fc <__assert_fail@plt+0xc024>
   1d06c:	add	r3, sp, #44	; 0x2c
   1d070:	mov	r2, fp
   1d074:	mov	r1, r9
   1d078:	mov	r0, r5
   1d07c:	bl	1c978 <__assert_fail@plt+0xb6a0>
   1d080:	subs	r3, r0, #0
   1d084:	str	r3, [sp, #36]	; 0x24
   1d088:	bne	1d2e8 <__assert_fail@plt+0xc010>
   1d08c:	cmp	fp, #0
   1d090:	ldrle	r4, [sp, #36]	; 0x24
   1d094:	ble	1d2f4 <__assert_fail@plt+0xc01c>
   1d098:	mov	r3, #0
   1d09c:	str	r3, [sp, #32]
   1d0a0:	add	r3, r9, #16
   1d0a4:	str	r3, [sp, #28]
   1d0a8:	mov	sl, fp
   1d0ac:	mov	fp, r9
   1d0b0:	b	1d24c <__assert_fail@plt+0xbf74>
   1d0b4:	ldr	r2, [sp, #16]
   1d0b8:	mov	r1, #0
   1d0bc:	bl	111f4 <memset@plt>
   1d0c0:	ldr	r0, [sp, #52]	; 0x34
   1d0c4:	bl	22f00 <__assert_fail@plt+0x11c28>
   1d0c8:	ldr	r4, [sp, #36]	; 0x24
   1d0cc:	b	1d2fc <__assert_fail@plt+0xc024>
   1d0d0:	ldr	r3, [fp, #12]
   1d0d4:	str	r3, [sp, #20]
   1d0d8:	ldr	r2, [sp, #12]
   1d0dc:	ldr	r3, [r2, #84]	; 0x54
   1d0e0:	mov	r0, r3
   1d0e4:	mov	r3, sl
   1d0e8:	mov	r1, r4
   1d0ec:	str	r0, [sp, #24]
   1d0f0:	bl	198d4 <__assert_fail@plt+0x85fc>
   1d0f4:	subs	r9, r0, #0
   1d0f8:	ble	1d140 <__assert_fail@plt+0xbe68>
   1d0fc:	add	r3, sl, r9
   1d100:	ldr	r2, [sp, #20]
   1d104:	cmp	r2, r3
   1d108:	blt	1d148 <__assert_fail@plt+0xbe70>
   1d10c:	ldr	r2, [fp]
   1d110:	ldr	r0, [r2, r3, lsl #2]
   1d114:	cmp	r0, #0
   1d118:	beq	1d1c8 <__assert_fail@plt+0xbef0>
   1d11c:	ldr	r3, [sp, #24]
   1d120:	ldr	r3, [r3, #12]
   1d124:	ldr	r2, [sp, #8]
   1d128:	ldr	r1, [r3, r2, lsl #2]
   1d12c:	add	r0, r0, #4
   1d130:	bl	147f4 <__assert_fail@plt+0x351c>
   1d134:	cmp	r0, #0
   1d138:	beq	1d1c8 <__assert_fail@plt+0xbef0>
   1d13c:	b	1d148 <__assert_fail@plt+0xbe70>
   1d140:	cmp	r9, #0
   1d144:	beq	1d1c8 <__assert_fail@plt+0xbef0>
   1d148:	ldr	r3, [fp, #20]
   1d14c:	cmp	r3, #0
   1d150:	beq	1d180 <__assert_fail@plt+0xbea8>
   1d154:	ldr	r3, [r8, #12]
   1d158:	ldr	r2, [sp, #8]
   1d15c:	ldr	r2, [r3, r2, lsl #2]
   1d160:	str	sl, [sp, #4]
   1d164:	str	r4, [sp]
   1d168:	add	r3, sl, r9
   1d16c:	ldr	r1, [sp, #28]
   1d170:	ldr	r0, [sp, #12]
   1d174:	bl	14ec8 <__assert_fail@plt+0x3bf0>
   1d178:	cmp	r0, #0
   1d17c:	bne	1d194 <__assert_fail@plt+0xbebc>
   1d180:	mov	r1, r4
   1d184:	add	r0, sp, #44	; 0x2c
   1d188:	bl	17b88 <__assert_fail@plt+0x68b0>
   1d18c:	cmp	r0, #0
   1d190:	beq	1d2f0 <__assert_fail@plt+0xc018>
   1d194:	add	r5, r5, #1
   1d198:	ldr	r3, [r7, #20]
   1d19c:	cmp	r5, r3
   1d1a0:	bge	1d21c <__assert_fail@plt+0xbf44>
   1d1a4:	ldr	r3, [r7, #24]
   1d1a8:	ldr	r4, [r3, r5, lsl #2]
   1d1ac:	str	r4, [sp, #8]
   1d1b0:	lsl	r6, r4, #3
   1d1b4:	ldr	r3, [r8]
   1d1b8:	add	r3, r3, r6
   1d1bc:	ldrb	r3, [r3, #6]
   1d1c0:	tst	r3, #16
   1d1c4:	bne	1d0d0 <__assert_fail@plt+0xbdf8>
   1d1c8:	ldr	r1, [r8]
   1d1cc:	mov	r2, sl
   1d1d0:	add	r1, r1, r6
   1d1d4:	ldr	r0, [sp, #12]
   1d1d8:	bl	185b4 <__assert_fail@plt+0x72dc>
   1d1dc:	cmp	r0, #0
   1d1e0:	beq	1d194 <__assert_fail@plt+0xbebc>
   1d1e4:	ldr	r3, [fp]
   1d1e8:	ldr	r2, [sp, #16]
   1d1ec:	ldr	r0, [r3, r2]
   1d1f0:	cmp	r0, #0
   1d1f4:	beq	1d194 <__assert_fail@plt+0xbebc>
   1d1f8:	ldr	r3, [r8, #12]
   1d1fc:	ldr	r2, [sp, #8]
   1d200:	ldr	r1, [r3, r2, lsl #2]
   1d204:	add	r0, r0, #4
   1d208:	bl	147f4 <__assert_fail@plt+0x351c>
   1d20c:	cmp	r0, #0
   1d210:	beq	1d194 <__assert_fail@plt+0xbebc>
   1d214:	mov	r9, #1
   1d218:	b	1d148 <__assert_fail@plt+0xbe70>
   1d21c:	add	r3, sp, #44	; 0x2c
   1d220:	mov	r2, sl
   1d224:	mov	r1, fp
   1d228:	ldr	r0, [sp, #12]
   1d22c:	bl	1c978 <__assert_fail@plt+0xb6a0>
   1d230:	cmp	r0, #0
   1d234:	bne	1d2d8 <__assert_fail@plt+0xc000>
   1d238:	ldr	r3, [sp, #16]
   1d23c:	sub	r3, r3, #4
   1d240:	str	r3, [sp, #16]
   1d244:	cmp	sl, #0
   1d248:	beq	1d2e0 <__assert_fail@plt+0xc008>
   1d24c:	ldr	r0, [fp]
   1d250:	ldr	r3, [sp, #16]
   1d254:	ldr	r3, [r0, r3]
   1d258:	cmp	r3, #0
   1d25c:	ldreq	r3, [sp, #32]
   1d260:	addeq	r3, r3, #1
   1d264:	movne	r3, #0
   1d268:	str	r3, [sp, #32]
   1d26c:	ldr	r3, [sp, #12]
   1d270:	ldr	r3, [r3, #120]	; 0x78
   1d274:	ldr	r2, [sp, #32]
   1d278:	cmp	r2, r3
   1d27c:	bgt	1d0b4 <__assert_fail@plt+0xbddc>
   1d280:	mov	r3, #0
   1d284:	str	r3, [sp, #48]	; 0x30
   1d288:	sub	sl, sl, #1
   1d28c:	ldr	r2, [sp, #12]
   1d290:	ldr	r3, [r2, #100]	; 0x64
   1d294:	ldr	r1, [sp, #16]
   1d298:	add	r3, r3, r1
   1d29c:	ldr	r7, [r3, #-4]
   1d2a0:	cmp	r7, #0
   1d2a4:	beq	1d21c <__assert_fail@plt+0xbf44>
   1d2a8:	ldr	r8, [r2, #84]	; 0x54
   1d2ac:	ldr	r3, [r7, #20]
   1d2b0:	cmp	r3, #0
   1d2b4:	ble	1d21c <__assert_fail@plt+0xbf44>
   1d2b8:	ldr	r3, [r7, #24]
   1d2bc:	ldr	r4, [r3]
   1d2c0:	str	r4, [sp, #8]
   1d2c4:	lsl	r6, r4, #3
   1d2c8:	ldr	r3, [r8]
   1d2cc:	add	r3, r3, r6
   1d2d0:	mov	r5, #0
   1d2d4:	b	1d1bc <__assert_fail@plt+0xbee4>
   1d2d8:	mov	r4, r0
   1d2dc:	b	1d2f4 <__assert_fail@plt+0xc01c>
   1d2e0:	mov	r4, r0
   1d2e4:	b	1d2f4 <__assert_fail@plt+0xc01c>
   1d2e8:	ldr	r4, [sp, #36]	; 0x24
   1d2ec:	b	1d2f4 <__assert_fail@plt+0xc01c>
   1d2f0:	mov	r4, #12
   1d2f4:	ldr	r0, [sp, #52]	; 0x34
   1d2f8:	bl	22f00 <__assert_fail@plt+0x11c28>
   1d2fc:	mov	r0, r4
   1d300:	add	sp, sp, #60	; 0x3c
   1d304:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d30c:	sub	sp, sp, #412	; 0x19c
   1d310:	mov	r6, r0
   1d314:	str	r0, [sp, #24]
   1d318:	str	r1, [sp, #36]	; 0x24
   1d31c:	str	r2, [sp, #48]	; 0x30
   1d320:	mov	r4, r3
   1d324:	ldr	r5, [sp, #448]	; 0x1c0
   1d328:	ldr	fp, [r0]
   1d32c:	mov	r2, #136	; 0x88
   1d330:	mov	r1, #0
   1d334:	add	r0, sp, #268	; 0x10c
   1d338:	bl	111f4 <memset@plt>
   1d33c:	str	fp, [sp, #352]	; 0x160
   1d340:	ldr	r2, [r6, #16]
   1d344:	cmp	r2, #0
   1d348:	beq	1d6e4 <__assert_fail@plt+0xc40c>
   1d34c:	ldrb	r3, [r6, #28]
   1d350:	subs	r1, r4, r5
   1d354:	movne	r1, #1
   1d358:	ands	r1, r1, r3, lsr #3
   1d35c:	beq	1d6f0 <__assert_fail@plt+0xc418>
   1d360:	and	r3, r3, #1
   1d364:	cmp	r3, #0
   1d368:	movne	r2, #0
   1d36c:	str	r2, [sp, #52]	; 0x34
   1d370:	ldr	r3, [sp, #24]
   1d374:	ldr	r3, [r3, #24]
   1d378:	ldr	r2, [sp, #456]	; 0x1c8
   1d37c:	cmp	r3, r2
   1d380:	subcc	r2, r2, #1
   1d384:	subcc	r3, r2, r3
   1d388:	movcs	r3, #0
   1d38c:	str	r3, [sp, #64]	; 0x40
   1d390:	ldr	r2, [sp, #24]
   1d394:	ldr	r3, [r2, #8]
   1d398:	cmp	r3, #0
   1d39c:	beq	1e8ec <__assert_fail@plt+0xd614>
   1d3a0:	ldr	r3, [fp, #36]	; 0x24
   1d3a4:	cmp	r3, #0
   1d3a8:	moveq	r3, #1
   1d3ac:	streq	r3, [sp, #28]
   1d3b0:	beq	1e970 <__assert_fail@plt+0xd698>
   1d3b4:	ldr	r3, [fp, #40]	; 0x28
   1d3b8:	cmp	r3, #0
   1d3bc:	beq	1e8f8 <__assert_fail@plt+0xd620>
   1d3c0:	ldr	r3, [fp, #44]	; 0x2c
   1d3c4:	cmp	r3, #0
   1d3c8:	moveq	r3, #1
   1d3cc:	streq	r3, [sp, #28]
   1d3d0:	beq	1e970 <__assert_fail@plt+0xd698>
   1d3d4:	ldr	r3, [fp, #48]	; 0x30
   1d3d8:	cmp	r3, #0
   1d3dc:	beq	1e904 <__assert_fail@plt+0xd62c>
   1d3e0:	ldr	r3, [fp, #36]	; 0x24
   1d3e4:	ldr	r3, [r3, #8]
   1d3e8:	cmp	r3, #0
   1d3ec:	bne	1d438 <__assert_fail@plt+0xc160>
   1d3f0:	ldr	r3, [fp, #40]	; 0x28
   1d3f4:	ldr	r3, [r3, #8]
   1d3f8:	cmp	r3, #0
   1d3fc:	bne	1d438 <__assert_fail@plt+0xc160>
   1d400:	ldr	r3, [fp, #44]	; 0x2c
   1d404:	ldr	r3, [r3, #8]
   1d408:	cmp	r3, #0
   1d40c:	beq	1d41c <__assert_fail@plt+0xc144>
   1d410:	ldrsb	r3, [r2, #28]
   1d414:	cmp	r3, #0
   1d418:	blt	1d438 <__assert_fail@plt+0xc160>
   1d41c:	cmp	r4, #0
   1d420:	cmpne	r5, #0
   1d424:	movne	r3, #1
   1d428:	strne	r3, [sp, #28]
   1d42c:	bne	1e970 <__assert_fail@plt+0xd698>
   1d430:	mov	r5, #0
   1d434:	mov	r4, r5
   1d438:	ldr	r3, [sp, #456]	; 0x1c8
   1d43c:	ldr	r2, [sp, #64]	; 0x40
   1d440:	subs	r3, r3, r2
   1d444:	str	r3, [sp, #60]	; 0x3c
   1d448:	movne	r3, #1
   1d44c:	strne	r3, [sp, #16]
   1d450:	bne	1d464 <__assert_fail@plt+0xc18c>
   1d454:	ldr	r3, [fp, #76]	; 0x4c
   1d458:	adds	r3, r3, #0
   1d45c:	movne	r3, #1
   1d460:	str	r3, [sp, #16]
   1d464:	ldr	r2, [sp, #24]
   1d468:	ldr	r3, [r2, #20]
   1d46c:	mov	lr, r3
   1d470:	str	r3, [sp, #76]	; 0x4c
   1d474:	ldr	r3, [r2, #12]
   1d478:	lsr	r3, r3, #22
   1d47c:	and	r3, r3, #1
   1d480:	ldr	r0, [fp, #92]	; 0x5c
   1d484:	ldr	r2, [fp, #8]
   1d488:	add	r2, r2, #1
   1d48c:	cmp	r2, r0
   1d490:	movlt	r2, r0
   1d494:	ldr	ip, [sp, #48]	; 0x30
   1d498:	add	r1, ip, #1
   1d49c:	ldr	r6, [sp, #36]	; 0x24
   1d4a0:	str	r6, [sp, #268]	; 0x10c
   1d4a4:	str	ip, [sp, #316]	; 0x13c
   1d4a8:	str	ip, [sp, #312]	; 0x138
   1d4ac:	str	lr, [sp, #332]	; 0x14c
   1d4b0:	strb	r3, [sp, #340]	; 0x154
   1d4b4:	adds	r6, lr, #0
   1d4b8:	movne	r6, #1
   1d4bc:	orr	r3, r3, r6
   1d4c0:	strb	r3, [sp, #343]	; 0x157
   1d4c4:	str	r0, [sp, #348]	; 0x15c
   1d4c8:	ldrb	r3, [fp, #88]	; 0x58
   1d4cc:	lsr	r0, r3, #2
   1d4d0:	and	r0, r0, #1
   1d4d4:	strb	r0, [sp, #341]	; 0x155
   1d4d8:	lsr	r3, r3, #3
   1d4dc:	and	r3, r3, #1
   1d4e0:	strb	r3, [sp, #342]	; 0x156
   1d4e4:	str	ip, [sp, #324]	; 0x144
   1d4e8:	str	ip, [sp, #320]	; 0x140
   1d4ec:	cmp	r2, r1
   1d4f0:	movlt	r1, r2
   1d4f4:	add	r0, sp, #268	; 0x10c
   1d4f8:	bl	15308 <__assert_fail@plt+0x4030>
   1d4fc:	subs	r3, r0, #0
   1d500:	str	r3, [sp, #28]
   1d504:	bne	1e954 <__assert_fail@plt+0xd67c>
   1d508:	add	r3, fp, #96	; 0x60
   1d50c:	str	r3, [sp, #336]	; 0x150
   1d510:	ldrb	r3, [fp, #88]	; 0x58
   1d514:	lsr	r3, r3, #4
   1d518:	and	r3, r3, #1
   1d51c:	strb	r3, [sp, #346]	; 0x15a
   1d520:	ldrb	r3, [sp, #343]	; 0x157
   1d524:	cmp	r3, #0
   1d528:	beq	1e910 <__assert_fail@plt+0xd638>
   1d52c:	mov	r3, #0
   1d530:	str	r3, [sp, #296]	; 0x128
   1d534:	str	r3, [sp, #300]	; 0x12c
   1d538:	ldr	r3, [sp, #452]	; 0x1c4
   1d53c:	str	r3, [sp, #324]	; 0x144
   1d540:	str	r3, [sp, #320]	; 0x140
   1d544:	ldr	r3, [sp, #24]
   1d548:	ldrb	r3, [r3, #28]
   1d54c:	lsr	r3, r3, #7
   1d550:	strb	r3, [sp, #345]	; 0x159
   1d554:	ldr	r7, [fp, #76]	; 0x4c
   1d558:	lsl	r7, r7, #1
   1d55c:	ldr	r3, [sp, #464]	; 0x1d0
   1d560:	str	r3, [sp, #356]	; 0x164
   1d564:	mvn	r3, #0
   1d568:	str	r3, [sp, #360]	; 0x168
   1d56c:	cmp	r7, #0
   1d570:	ble	1d5ac <__assert_fail@plt+0xc2d4>
   1d574:	ldr	r3, [pc, #4000]	; 1e51c <__assert_fail@plt+0xd244>
   1d578:	cmp	r7, r3
   1d57c:	bhi	1e930 <__assert_fail@plt+0xd658>
   1d580:	add	r0, r7, r7, lsl #1
   1d584:	lsl	r0, r0, #3
   1d588:	bl	22d3c <__assert_fail@plt+0x11a64>
   1d58c:	str	r0, [sp, #384]	; 0x180
   1d590:	lsl	r0, r7, #2
   1d594:	bl	22d3c <__assert_fail@plt+0x11a64>
   1d598:	str	r0, [sp, #400]	; 0x190
   1d59c:	ldr	r3, [sp, #384]	; 0x180
   1d5a0:	cmp	r0, #0
   1d5a4:	cmpne	r3, #0
   1d5a8:	beq	1e930 <__assert_fail@plt+0xd658>
   1d5ac:	str	r7, [sp, #380]	; 0x17c
   1d5b0:	mov	r3, #1
   1d5b4:	str	r3, [sp, #388]	; 0x184
   1d5b8:	str	r7, [sp, #396]	; 0x18c
   1d5bc:	ldr	r3, [sp, #60]	; 0x3c
   1d5c0:	cmp	r3, #1
   1d5c4:	bls	1d6fc <__assert_fail@plt+0xc424>
   1d5c8:	ldr	r3, [sp, #304]	; 0x130
   1d5cc:	cmn	r3, #-1073741822	; 0xc0000002
   1d5d0:	bhi	1e888 <__assert_fail@plt+0xd5b0>
   1d5d4:	add	r3, r3, #1
   1d5d8:	lsl	r0, r3, #2
   1d5dc:	bl	22d3c <__assert_fail@plt+0x11a64>
   1d5e0:	str	r0, [sp, #368]	; 0x170
   1d5e4:	cmp	r0, #0
   1d5e8:	beq	1e894 <__assert_fail@plt+0xd5bc>
   1d5ec:	str	r4, [sp, #404]	; 0x194
   1d5f0:	ldr	r3, [sp, #464]	; 0x1d0
   1d5f4:	and	r3, r3, #1
   1d5f8:	cmp	r3, #0
   1d5fc:	movne	r3, #4
   1d600:	moveq	r3, #6
   1d604:	str	r3, [sp, #328]	; 0x148
   1d608:	cmp	r4, r5
   1d60c:	mvngt	r3, #0
   1d610:	movle	r3, #1
   1d614:	str	r3, [sp, #84]	; 0x54
   1d618:	movlt	r3, r4
   1d61c:	movge	r3, r5
   1d620:	str	r3, [sp, #56]	; 0x38
   1d624:	movge	r3, r4
   1d628:	movlt	r3, r5
   1d62c:	str	r3, [sp, #44]	; 0x2c
   1d630:	ldr	r3, [fp, #92]	; 0x5c
   1d634:	str	r3, [sp, #80]	; 0x50
   1d638:	ldr	r2, [sp, #52]	; 0x34
   1d63c:	cmp	r2, #0
   1d640:	moveq	r3, #8
   1d644:	beq	1d68c <__assert_fail@plt+0xc3b4>
   1d648:	cmp	r3, #1
   1d64c:	moveq	r3, #4
   1d650:	beq	1d678 <__assert_fail@plt+0xc3a0>
   1d654:	ldr	r3, [sp, #24]
   1d658:	ldr	r3, [r3, #12]
   1d65c:	lsr	r3, r3, #22
   1d660:	eor	r3, r3, #1
   1d664:	ldr	r2, [sp, #76]	; 0x4c
   1d668:	cmp	r2, #0
   1d66c:	movne	r3, #0
   1d670:	andeq	r3, r3, #1
   1d674:	lsl	r3, r3, #2
   1d678:	cmp	r4, r5
   1d67c:	movle	r2, #2
   1d680:	movgt	r2, #0
   1d684:	orr	r3, r6, r3
   1d688:	orr	r3, r3, r2
   1d68c:	ldr	r2, [sp, #56]	; 0x38
   1d690:	cmp	r4, r2
   1d694:	movge	r2, #0
   1d698:	movlt	r2, #1
   1d69c:	ldr	r1, [sp, #44]	; 0x2c
   1d6a0:	cmp	r4, r1
   1d6a4:	orrgt	r2, r2, #1
   1d6a8:	str	r2, [sp, #68]	; 0x44
   1d6ac:	cmp	r2, #0
   1d6b0:	bne	1e8a0 <__assert_fail@plt+0xd5c8>
   1d6b4:	add	r2, sp, #408	; 0x198
   1d6b8:	cmp	r4, r5
   1d6bc:	suble	r2, r2, #4
   1d6c0:	movgt	r2, #0
   1d6c4:	str	r2, [sp, #88]	; 0x58
   1d6c8:	adds	r2, r2, #0
   1d6cc:	movne	r2, #1
   1d6d0:	str	r2, [sp, #92]	; 0x5c
   1d6d4:	sub	r3, r3, #4
   1d6d8:	str	r3, [sp, #72]	; 0x48
   1d6dc:	str	fp, [sp, #40]	; 0x28
   1d6e0:	b	1ec54 <__assert_fail@plt+0xd97c>
   1d6e4:	mov	r3, #0
   1d6e8:	str	r3, [sp, #52]	; 0x34
   1d6ec:	b	1d370 <__assert_fail@plt+0xc098>
   1d6f0:	mov	r3, #0
   1d6f4:	str	r3, [sp, #52]	; 0x34
   1d6f8:	b	1d370 <__assert_fail@plt+0xc098>
   1d6fc:	ldrb	r3, [fp, #88]	; 0x58
   1d700:	tst	r3, #2
   1d704:	beq	1d5ec <__assert_fail@plt+0xc314>
   1d708:	b	1d5c8 <__assert_fail@plt+0xc2f0>
   1d70c:	ldr	r3, [sp, #404]	; 0x194
   1d710:	ldr	r2, [sp, #44]	; 0x2c
   1d714:	cmp	r2, r3
   1d718:	ble	1d890 <__assert_fail@plt+0xc5b8>
   1d71c:	ldr	r1, [sp, #36]	; 0x24
   1d720:	add	r2, r1, r3
   1d724:	ldrb	r1, [r1, r3]
   1d728:	ldr	r0, [sp, #76]	; 0x4c
   1d72c:	ldrb	r1, [r0, r1]
   1d730:	ldr	r0, [sp, #52]	; 0x34
   1d734:	ldrb	r1, [r0, r1]
   1d738:	cmp	r1, #0
   1d73c:	bne	1d8b8 <__assert_fail@plt+0xc5e0>
   1d740:	ldr	ip, [sp, #52]	; 0x34
   1d744:	ldr	lr, [sp, #76]	; 0x4c
   1d748:	ldr	r0, [sp, #44]	; 0x2c
   1d74c:	add	r3, r3, #1
   1d750:	cmp	r0, r3
   1d754:	beq	1d840 <__assert_fail@plt+0xc568>
   1d758:	ldrb	r1, [r2, #1]!
   1d75c:	ldrb	r1, [lr, r1]
   1d760:	ldrb	r1, [ip, r1]
   1d764:	cmp	r1, #0
   1d768:	beq	1d74c <__assert_fail@plt+0xc474>
   1d76c:	str	r3, [sp, #404]	; 0x194
   1d770:	b	1d8b8 <__assert_fail@plt+0xc5e0>
   1d774:	ldr	r3, [sp, #404]	; 0x194
   1d778:	ldr	r2, [sp, #44]	; 0x2c
   1d77c:	cmp	r2, r3
   1d780:	ble	1d890 <__assert_fail@plt+0xc5b8>
   1d784:	ldr	r1, [sp, #36]	; 0x24
   1d788:	add	r2, r1, r3
   1d78c:	ldrb	r1, [r1, r3]
   1d790:	ldr	r0, [sp, #52]	; 0x34
   1d794:	ldrb	r1, [r0, r1]
   1d798:	cmp	r1, #0
   1d79c:	bne	1d8b8 <__assert_fail@plt+0xc5e0>
   1d7a0:	ldr	ip, [sp, #52]	; 0x34
   1d7a4:	ldr	r0, [sp, #44]	; 0x2c
   1d7a8:	add	r3, r3, #1
   1d7ac:	cmp	r0, r3
   1d7b0:	beq	1d888 <__assert_fail@plt+0xc5b0>
   1d7b4:	ldrb	r1, [r2, #1]!
   1d7b8:	ldrb	r1, [ip, r1]
   1d7bc:	cmp	r1, #0
   1d7c0:	beq	1d7a8 <__assert_fail@plt+0xc4d0>
   1d7c4:	str	r3, [sp, #404]	; 0x194
   1d7c8:	b	1d8b8 <__assert_fail@plt+0xc5e0>
   1d7cc:	ldr	r3, [sp, #404]	; 0x194
   1d7d0:	ldr	r2, [sp, #56]	; 0x38
   1d7d4:	cmp	r2, r3
   1d7d8:	bgt	1d838 <__assert_fail@plt+0xc560>
   1d7dc:	ldr	r1, [sp, #68]	; 0x44
   1d7e0:	ldr	ip, [sp, #52]	; 0x34
   1d7e4:	ldr	r0, [sp, #76]	; 0x4c
   1d7e8:	ldr	r4, [sp, #56]	; 0x38
   1d7ec:	ldr	r5, [sp, #36]	; 0x24
   1d7f0:	ldr	lr, [sp, #48]	; 0x30
   1d7f4:	cmp	lr, r3
   1d7f8:	ldrbgt	r2, [r5, r3]
   1d7fc:	movle	r2, #0
   1d800:	cmp	r0, #0
   1d804:	ldrbne	r2, [r0, r2]
   1d808:	ldrb	r2, [ip, r2]
   1d80c:	cmp	r2, #0
   1d810:	bne	1d8a4 <__assert_fail@plt+0xc5cc>
   1d814:	sub	r3, r3, #1
   1d818:	mov	r1, #1
   1d81c:	cmp	r4, r3
   1d820:	ble	1d7f4 <__assert_fail@plt+0xc51c>
   1d824:	ldr	fp, [sp, #40]	; 0x28
   1d828:	str	r3, [sp, #404]	; 0x194
   1d82c:	mov	r3, #1
   1d830:	str	r3, [sp, #28]
   1d834:	b	1e954 <__assert_fail@plt+0xd67c>
   1d838:	ldr	fp, [sp, #40]	; 0x28
   1d83c:	b	1d82c <__assert_fail@plt+0xc554>
   1d840:	str	r3, [sp, #404]	; 0x194
   1d844:	ldr	r2, [sp, #48]	; 0x30
   1d848:	ldr	r3, [sp, #44]	; 0x2c
   1d84c:	cmp	r2, r3
   1d850:	ldrgt	r2, [sp, #36]	; 0x24
   1d854:	ldrbgt	r3, [r2, r3]
   1d858:	movle	r3, #0
   1d85c:	ldr	r2, [sp, #76]	; 0x4c
   1d860:	cmp	r2, #0
   1d864:	ldrbne	r3, [r2, r3]
   1d868:	ldr	r2, [sp, #52]	; 0x34
   1d86c:	ldrb	r3, [r2, r3]
   1d870:	cmp	r3, #0
   1d874:	bne	1d8b8 <__assert_fail@plt+0xc5e0>
   1d878:	ldr	fp, [sp, #40]	; 0x28
   1d87c:	mov	r3, #1
   1d880:	str	r3, [sp, #28]
   1d884:	b	1e954 <__assert_fail@plt+0xd67c>
   1d888:	str	r3, [sp, #404]	; 0x194
   1d88c:	b	1d844 <__assert_fail@plt+0xc56c>
   1d890:	ldr	r3, [sp, #404]	; 0x194
   1d894:	ldr	r2, [sp, #44]	; 0x2c
   1d898:	cmp	r2, r3
   1d89c:	bne	1d8b8 <__assert_fail@plt+0xc5e0>
   1d8a0:	b	1d844 <__assert_fail@plt+0xc56c>
   1d8a4:	cmp	r1, #0
   1d8a8:	strne	r3, [sp, #404]	; 0x194
   1d8ac:	ldr	r2, [sp, #56]	; 0x38
   1d8b0:	cmp	r2, r3
   1d8b4:	bgt	1d978 <__assert_fail@plt+0xc6a0>
   1d8b8:	ldr	r2, [sp, #464]	; 0x1d0
   1d8bc:	ldr	r1, [sp, #404]	; 0x194
   1d8c0:	add	r0, sp, #268	; 0x10c
   1d8c4:	bl	19dc0 <__assert_fail@plt+0x8ae8>
   1d8c8:	subs	r3, r0, #0
   1d8cc:	str	r3, [sp, #28]
   1d8d0:	bne	1e8c8 <__assert_fail@plt+0xd5f0>
   1d8d4:	ldr	r3, [sp, #80]	; 0x50
   1d8d8:	cmp	r3, #1
   1d8dc:	beq	1d8fc <__assert_fail@plt+0xc624>
   1d8e0:	ldr	r3, [sp, #296]	; 0x128
   1d8e4:	cmp	r3, #0
   1d8e8:	beq	1d8fc <__assert_fail@plt+0xc624>
   1d8ec:	ldr	r3, [sp, #276]	; 0x114
   1d8f0:	ldr	r3, [r3]
   1d8f4:	cmn	r3, #1
   1d8f8:	beq	1ec1c <__assert_fail@plt+0xd944>
   1d8fc:	mov	r3, #0
   1d900:	str	r3, [sp, #388]	; 0x184
   1d904:	str	r3, [sp, #376]	; 0x178
   1d908:	str	r3, [sp, #372]	; 0x174
   1d90c:	ldr	r4, [sp, #352]	; 0x160
   1d910:	ldr	r3, [sp, #308]	; 0x134
   1d914:	str	r3, [sp, #32]
   1d918:	mov	r3, #0
   1d91c:	str	r3, [sp, #104]	; 0x68
   1d920:	ldr	r6, [r4, #36]	; 0x24
   1d924:	ldrsb	r3, [r6, #52]	; 0x34
   1d928:	cmp	r3, #0
   1d92c:	blt	1da30 <__assert_fail@plt+0xc758>
   1d930:	ldr	r3, [sp, #368]	; 0x170
   1d934:	cmp	r3, #0
   1d938:	beq	1daf0 <__assert_fail@plt+0xc818>
   1d93c:	ldr	r2, [sp, #32]
   1d940:	str	r6, [r3, r2, lsl #2]
   1d944:	ldr	r3, [r4, #76]	; 0x4c
   1d948:	cmp	r3, #0
   1d94c:	ldreq	fp, [sp, #92]	; 0x5c
   1d950:	bne	1daa0 <__assert_fail@plt+0xc7c8>
   1d954:	ldrb	r3, [r6, #52]	; 0x34
   1d958:	tst	r3, #16
   1d95c:	bne	1daf8 <__assert_fail@plt+0xc820>
   1d960:	mvn	sl, #0
   1d964:	mov	r3, #0
   1d968:	str	r3, [sp, #12]
   1d96c:	ldr	r3, [sp, #88]	; 0x58
   1d970:	str	r3, [sp, #20]
   1d974:	b	1de94 <__assert_fail@plt+0xcbbc>
   1d978:	ldr	fp, [sp, #40]	; 0x28
   1d97c:	mov	r3, #1
   1d980:	str	r3, [sp, #28]
   1d984:	b	1e954 <__assert_fail@plt+0xd67c>
   1d988:	ldr	r5, [sp, #52]	; 0x34
   1d98c:	ldr	r6, [sp, #84]	; 0x54
   1d990:	ldr	r7, [sp, #56]	; 0x38
   1d994:	ldr	r8, [sp, #44]	; 0x2c
   1d998:	b	1d9e4 <__assert_fail@plt+0xc70c>
   1d99c:	ldr	r2, [sp, #296]	; 0x128
   1d9a0:	cmp	r3, r2
   1d9a4:	ldrcc	r2, [sp, #272]	; 0x110
   1d9a8:	ldrbcc	r3, [r2, r3]
   1d9ac:	movcs	r3, #0
   1d9b0:	ldrb	r3, [r5, r3]
   1d9b4:	cmp	r3, #0
   1d9b8:	bne	1d8b8 <__assert_fail@plt+0xc5e0>
   1d9bc:	add	r3, r6, r4
   1d9c0:	str	r3, [sp, #404]	; 0x194
   1d9c4:	cmp	r8, r3
   1d9c8:	movge	r2, #0
   1d9cc:	movlt	r2, #1
   1d9d0:	cmp	r7, r3
   1d9d4:	movle	r3, r2
   1d9d8:	orrgt	r3, r2, #1
   1d9dc:	cmp	r3, #0
   1d9e0:	bne	1da20 <__assert_fail@plt+0xc748>
   1d9e4:	ldr	r4, [sp, #404]	; 0x194
   1d9e8:	ldr	r3, [sp, #292]	; 0x124
   1d9ec:	sub	r3, r4, r3
   1d9f0:	ldr	r2, [sp, #300]	; 0x12c
   1d9f4:	cmp	r3, r2
   1d9f8:	bcc	1d99c <__assert_fail@plt+0xc6c4>
   1d9fc:	ldr	r2, [sp, #464]	; 0x1d0
   1da00:	mov	r1, r4
   1da04:	add	r0, sp, #268	; 0x10c
   1da08:	bl	19dc0 <__assert_fail@plt+0x8ae8>
   1da0c:	cmp	r0, #0
   1da10:	bne	1e8bc <__assert_fail@plt+0xd5e4>
   1da14:	ldr	r3, [sp, #292]	; 0x124
   1da18:	sub	r3, r4, r3
   1da1c:	b	1d99c <__assert_fail@plt+0xc6c4>
   1da20:	ldr	fp, [sp, #40]	; 0x28
   1da24:	mov	r3, #1
   1da28:	str	r3, [sp, #28]
   1da2c:	b	1e954 <__assert_fail@plt+0xd67c>
   1da30:	ldr	r2, [sp, #356]	; 0x164
   1da34:	ldr	r3, [sp, #32]
   1da38:	sub	r1, r3, #1
   1da3c:	add	r0, sp, #268	; 0x10c
   1da40:	bl	184a0 <__assert_fail@plt+0x71c8>
   1da44:	tst	r0, #1
   1da48:	ldrne	r6, [r4, #40]	; 0x28
   1da4c:	bne	1d930 <__assert_fail@plt+0xc658>
   1da50:	cmp	r0, #0
   1da54:	beq	1d930 <__assert_fail@plt+0xc658>
   1da58:	and	r3, r0, #6
   1da5c:	cmp	r3, #6
   1da60:	ldreq	r6, [r4, #48]	; 0x30
   1da64:	beq	1d930 <__assert_fail@plt+0xc658>
   1da68:	tst	r0, #2
   1da6c:	ldrne	r6, [r4, #44]	; 0x2c
   1da70:	bne	1d930 <__assert_fail@plt+0xc658>
   1da74:	tst	r0, #4
   1da78:	beq	1d930 <__assert_fail@plt+0xc658>
   1da7c:	mov	r3, r0
   1da80:	ldr	r2, [r6, #40]	; 0x28
   1da84:	mov	r1, r4
   1da88:	add	r0, sp, #104	; 0x68
   1da8c:	bl	173e8 <__assert_fail@plt+0x6110>
   1da90:	subs	r6, r0, #0
   1da94:	bne	1d930 <__assert_fail@plt+0xc658>
   1da98:	ldr	fp, [sp, #40]	; 0x28
   1da9c:	b	1e94c <__assert_fail@plt+0xd674>
   1daa0:	add	r4, r6, #4
   1daa4:	mov	r2, #0
   1daa8:	mov	r1, r4
   1daac:	add	r0, sp, #268	; 0x10c
   1dab0:	bl	18734 <__assert_fail@plt+0x745c>
   1dab4:	str	r0, [sp, #104]	; 0x68
   1dab8:	cmp	r0, #0
   1dabc:	bne	1df50 <__assert_fail@plt+0xcc78>
   1dac0:	ldrb	r3, [r6, #52]	; 0x34
   1dac4:	tst	r3, #64	; 0x40
   1dac8:	ldreq	fp, [sp, #68]	; 0x44
   1dacc:	beq	1d954 <__assert_fail@plt+0xc67c>
   1dad0:	mov	r1, r4
   1dad4:	add	r0, sp, #268	; 0x10c
   1dad8:	bl	1c0f8 <__assert_fail@plt+0xae20>
   1dadc:	str	r0, [sp, #104]	; 0x68
   1dae0:	cmp	r0, #0
   1dae4:	bne	1df58 <__assert_fail@plt+0xcc80>
   1dae8:	ldr	fp, [sp, #68]	; 0x44
   1daec:	b	1d954 <__assert_fail@plt+0xc67c>
   1daf0:	ldr	fp, [sp, #92]	; 0x5c
   1daf4:	b	1d954 <__assert_fail@plt+0xc67c>
   1daf8:	ldrsb	r3, [r6, #52]	; 0x34
   1dafc:	cmp	r3, #0
   1db00:	blt	1db20 <__assert_fail@plt+0xc848>
   1db04:	ldr	r3, [sp, #16]
   1db08:	cmp	r3, #0
   1db0c:	beq	1db48 <__assert_fail@plt+0xc870>
   1db10:	ldr	sl, [sp, #32]
   1db14:	mov	r3, #1
   1db18:	str	r3, [sp, #12]
   1db1c:	b	1d96c <__assert_fail@plt+0xc694>
   1db20:	ldr	r2, [sp, #32]
   1db24:	mov	r1, r6
   1db28:	add	r0, sp, #268	; 0x10c
   1db2c:	bl	189f0 <__assert_fail@plt+0x7718>
   1db30:	cmp	r0, #0
   1db34:	bne	1db04 <__assert_fail@plt+0xc82c>
   1db38:	mvn	sl, #0
   1db3c:	mov	r3, #0
   1db40:	str	r3, [sp, #12]
   1db44:	b	1d96c <__assert_fail@plt+0xc694>
   1db48:	ldr	sl, [sp, #32]
   1db4c:	b	1ea6c <__assert_fail@plt+0xd794>
   1db50:	ldr	r2, [sp, #316]	; 0x13c
   1db54:	cmp	r3, r2
   1db58:	bge	1deb4 <__assert_fail@plt+0xcbdc>
   1db5c:	add	r1, r1, #2
   1db60:	add	r0, sp, #268	; 0x10c
   1db64:	bl	16484 <__assert_fail@plt+0x51ac>
   1db68:	str	r0, [sp, #104]	; 0x68
   1db6c:	cmp	r0, #0
   1db70:	beq	1dec0 <__assert_fail@plt+0xcbe8>
   1db74:	ldr	fp, [sp, #40]	; 0x28
   1db78:	b	1e94c <__assert_fail@plt+0xd674>
   1db7c:	ldr	r2, [sp, #316]	; 0x13c
   1db80:	cmp	r3, r2
   1db84:	bge	1dec0 <__assert_fail@plt+0xcbe8>
   1db88:	b	1db5c <__assert_fail@plt+0xc884>
   1db8c:	ldr	r8, [sp, #352]	; 0x160
   1db90:	ldr	r3, [r6, #8]
   1db94:	cmp	r3, #0
   1db98:	ble	1e93c <__assert_fail@plt+0xd664>
   1db9c:	mov	r5, #0
   1dba0:	b	1dc00 <__assert_fail@plt+0xc928>
   1dba4:	tst	r3, #8
   1dba8:	beq	1dbb4 <__assert_fail@plt+0xc8dc>
   1dbac:	tst	r0, #1
   1dbb0:	bne	1dbf0 <__assert_fail@plt+0xc918>
   1dbb4:	tst	r3, #32
   1dbb8:	beq	1dbc4 <__assert_fail@plt+0xc8ec>
   1dbbc:	tst	r0, #2
   1dbc0:	beq	1dbf0 <__assert_fail@plt+0xc918>
   1dbc4:	tst	r3, #128	; 0x80
   1dbc8:	beq	1dbd4 <__assert_fail@plt+0xc8fc>
   1dbcc:	tst	r0, #8
   1dbd0:	beq	1dbf0 <__assert_fail@plt+0xc918>
   1dbd4:	ldr	r3, [sp, #308]	; 0x134
   1dbd8:	add	r2, sp, #268	; 0x10c
   1dbdc:	mov	r1, r7
   1dbe0:	mov	r0, r8
   1dbe4:	bl	198d4 <__assert_fail@plt+0x85fc>
   1dbe8:	cmp	r0, #0
   1dbec:	bne	1dc64 <__assert_fail@plt+0xc98c>
   1dbf0:	add	r5, r5, #1
   1dbf4:	ldr	r3, [r6, #8]
   1dbf8:	cmp	r5, r3
   1dbfc:	bge	1e93c <__assert_fail@plt+0xd664>
   1dc00:	ldr	r3, [r6, #12]
   1dc04:	ldr	r7, [r3, r5, lsl #2]
   1dc08:	ldr	r4, [r8]
   1dc0c:	add	r4, r4, r7, lsl #3
   1dc10:	ldrb	r3, [r4, #6]
   1dc14:	tst	r3, #16
   1dc18:	beq	1dbf0 <__assert_fail@plt+0xc918>
   1dc1c:	ldr	r3, [r4, #4]
   1dc20:	ldr	r2, [pc, #2296]	; 1e520 <__assert_fail@plt+0xd248>
   1dc24:	tst	r3, r2
   1dc28:	beq	1dbd4 <__assert_fail@plt+0xc8fc>
   1dc2c:	ldr	r2, [sp, #356]	; 0x164
   1dc30:	ldr	r1, [sp, #308]	; 0x134
   1dc34:	add	r0, sp, #268	; 0x10c
   1dc38:	bl	184a0 <__assert_fail@plt+0x71c8>
   1dc3c:	ldr	r3, [r4, #4]
   1dc40:	lsl	r3, r3, #14
   1dc44:	lsr	r3, r3, #22
   1dc48:	tst	r3, #4
   1dc4c:	beq	1dba4 <__assert_fail@plt+0xc8cc>
   1dc50:	tst	r0, #1
   1dc54:	beq	1dbf0 <__assert_fail@plt+0xc918>
   1dc58:	tst	r3, #8
   1dc5c:	bne	1dbf0 <__assert_fail@plt+0xc918>
   1dc60:	b	1dbb4 <__assert_fail@plt+0xc8dc>
   1dc64:	ldr	r4, [sp, #308]	; 0x134
   1dc68:	add	r4, r0, r4
   1dc6c:	ldr	r3, [sp, #388]	; 0x184
   1dc70:	cmp	r3, r0
   1dc74:	movge	r0, r3
   1dc78:	str	r0, [sp, #388]	; 0x184
   1dc7c:	mov	r1, r4
   1dc80:	add	r0, sp, #268	; 0x10c
   1dc84:	bl	1883c <__assert_fail@plt+0x7564>
   1dc88:	str	r0, [sp, #116]	; 0x74
   1dc8c:	cmp	r0, #0
   1dc90:	bne	1dd20 <__assert_fail@plt+0xca48>
   1dc94:	ldr	r3, [r8, #12]
   1dc98:	ldr	r2, [r3, r7, lsl #2]
   1dc9c:	add	r2, r2, r2, lsl #1
   1dca0:	ldr	r3, [r8, #24]
   1dca4:	add	r2, r3, r2, lsl #2
   1dca8:	ldr	r7, [sp, #368]	; 0x170
   1dcac:	ldr	r3, [r7, r4, lsl #2]
   1dcb0:	cmp	r3, #0
   1dcb4:	beq	1dd38 <__assert_fail@plt+0xca60>
   1dcb8:	ldr	r1, [r3, #40]	; 0x28
   1dcbc:	add	r0, sp, #128	; 0x80
   1dcc0:	bl	15cac <__assert_fail@plt+0x49d4>
   1dcc4:	str	r0, [sp, #116]	; 0x74
   1dcc8:	cmp	r0, #0
   1dccc:	bne	1dd20 <__assert_fail@plt+0xca48>
   1dcd0:	ldr	r2, [sp, #356]	; 0x164
   1dcd4:	sub	r1, r4, #1
   1dcd8:	add	r0, sp, #268	; 0x10c
   1dcdc:	bl	184a0 <__assert_fail@plt+0x71c8>
   1dce0:	ldr	r7, [sp, #368]	; 0x170
   1dce4:	mov	r3, r0
   1dce8:	add	r2, sp, #128	; 0x80
   1dcec:	mov	r1, r8
   1dcf0:	add	r0, sp, #116	; 0x74
   1dcf4:	bl	173e8 <__assert_fail@plt+0x6110>
   1dcf8:	str	r0, [r7, r4, lsl #2]
   1dcfc:	ldr	r0, [sp, #136]	; 0x88
   1dd00:	bl	22f00 <__assert_fail@plt+0x11c28>
   1dd04:	ldr	r3, [sp, #368]	; 0x170
   1dd08:	ldr	r3, [r3, r4, lsl #2]
   1dd0c:	cmp	r3, #0
   1dd10:	bne	1dbf0 <__assert_fail@plt+0xc918>
   1dd14:	ldr	r0, [sp, #116]	; 0x74
   1dd18:	cmp	r0, #0
   1dd1c:	beq	1dbf0 <__assert_fail@plt+0xc918>
   1dd20:	str	r0, [sp, #104]	; 0x68
   1dd24:	ldr	r3, [sp, #368]	; 0x170
   1dd28:	cmp	r3, #0
   1dd2c:	beq	1ea48 <__assert_fail@plt+0xd770>
   1dd30:	mov	r4, #0
   1dd34:	b	1defc <__assert_fail@plt+0xcc24>
   1dd38:	ldm	r2, {r0, r1, r2}
   1dd3c:	add	r3, sp, #128	; 0x80
   1dd40:	stm	r3, {r0, r1, r2}
   1dd44:	ldr	r2, [sp, #356]	; 0x164
   1dd48:	sub	r1, r4, #1
   1dd4c:	add	r0, sp, #268	; 0x10c
   1dd50:	bl	184a0 <__assert_fail@plt+0x71c8>
   1dd54:	mov	r3, r0
   1dd58:	add	r2, sp, #128	; 0x80
   1dd5c:	mov	r1, r8
   1dd60:	add	r0, sp, #116	; 0x74
   1dd64:	bl	173e8 <__assert_fail@plt+0x6110>
   1dd68:	str	r0, [r7, r4, lsl #2]
   1dd6c:	b	1dd04 <__assert_fail@plt+0xca2c>
   1dd70:	ldr	r5, [r6, #48]	; 0x30
   1dd74:	cmp	r5, #0
   1dd78:	beq	1dda0 <__assert_fail@plt+0xcac8>
   1dd7c:	ldr	r2, [sp, #356]	; 0x164
   1dd80:	ldr	r1, [sp, #308]	; 0x134
   1dd84:	sub	r1, r1, #1
   1dd88:	add	r0, sp, #268	; 0x10c
   1dd8c:	bl	184a0 <__assert_fail@plt+0x71c8>
   1dd90:	tst	r0, #1
   1dd94:	addne	r4, r4, #256	; 0x100
   1dd98:	ldr	r4, [r5, r4, lsl #2]
   1dd9c:	b	1def0 <__assert_fail@plt+0xcc18>
   1dda0:	mov	r1, r6
   1dda4:	ldr	r0, [sp, #352]	; 0x160
   1dda8:	bl	1a4e8 <__assert_fail@plt+0x9210>
   1ddac:	cmp	r0, #0
   1ddb0:	bne	1dee0 <__assert_fail@plt+0xcc08>
   1ddb4:	mov	r3, #12
   1ddb8:	str	r3, [sp, #104]	; 0x68
   1ddbc:	b	1dd24 <__assert_fail@plt+0xca4c>
   1ddc0:	ldr	r3, [sp, #104]	; 0x68
   1ddc4:	cmp	r3, #0
   1ddc8:	bne	1e948 <__assert_fail@plt+0xd670>
   1ddcc:	ldr	r3, [sp, #368]	; 0x170
   1ddd0:	cmp	r3, #0
   1ddd4:	beq	1ea54 <__assert_fail@plt+0xd77c>
   1ddd8:	ldr	r3, [sp, #16]
   1dddc:	eor	r3, r3, #1
   1dde0:	ldr	r2, [sp, #12]
   1dde4:	tst	r2, r3
   1dde8:	bne	1ea54 <__assert_fail@plt+0xd77c>
   1ddec:	ldr	r0, [sp, #372]	; 0x174
   1ddf0:	ldr	r2, [sp, #308]	; 0x134
   1ddf4:	ldr	r1, [sp, #368]	; 0x170
   1ddf8:	add	r1, r1, r2, lsl #2
   1ddfc:	add	r2, r2, #1
   1de00:	cmp	r0, r2
   1de04:	blt	1ea54 <__assert_fail@plt+0xd77c>
   1de08:	ldr	r3, [sp, #308]	; 0x134
   1de0c:	add	r3, r3, #1
   1de10:	str	r3, [sp, #308]	; 0x134
   1de14:	ldr	r3, [r1, #4]!
   1de18:	cmp	r3, #0
   1de1c:	beq	1ddfc <__assert_fail@plt+0xcb24>
   1de20:	mov	r2, #0
   1de24:	add	r1, sp, #268	; 0x10c
   1de28:	add	r0, sp, #104	; 0x68
   1de2c:	bl	1c800 <__assert_fail@plt+0xb528>
   1de30:	mov	r4, r0
   1de34:	ldr	r3, [sp, #104]	; 0x68
   1de38:	cmp	r3, #0
   1de3c:	cmpeq	r0, #0
   1de40:	beq	1ddec <__assert_fail@plt+0xcb14>
   1de44:	cmp	r0, #0
   1de48:	bne	1df18 <__assert_fail@plt+0xcc40>
   1de4c:	b	1ea54 <__assert_fail@plt+0xd77c>
   1de50:	ldr	r3, [sp, #68]	; 0x44
   1de54:	cmp	r6, r4
   1de58:	movne	fp, r3
   1de5c:	ldr	r3, [sp, #32]
   1de60:	cmp	r6, r4
   1de64:	moveq	r3, r9
   1de68:	str	r3, [sp, #32]
   1de6c:	b	1df20 <__assert_fail@plt+0xcc48>
   1de70:	ldr	sl, [sp, #308]	; 0x134
   1de74:	ldr	r3, [sp, #16]
   1de78:	cmp	r3, #0
   1de7c:	beq	1ea6c <__assert_fail@plt+0xd794>
   1de80:	mov	r3, #1
   1de84:	str	r3, [sp, #12]
   1de88:	mov	r3, #0
   1de8c:	str	r3, [sp, #20]
   1de90:	mov	r6, r4
   1de94:	ldr	r1, [sp, #308]	; 0x134
   1de98:	ldr	r3, [sp, #324]	; 0x144
   1de9c:	cmp	r1, r3
   1dea0:	bge	1ea54 <__assert_fail@plt+0xd77c>
   1dea4:	add	r9, r1, #1
   1dea8:	ldr	r3, [sp, #304]	; 0x130
   1deac:	cmp	r9, r3
   1deb0:	bge	1db50 <__assert_fail@plt+0xc878>
   1deb4:	ldr	r3, [sp, #296]	; 0x128
   1deb8:	cmp	r9, r3
   1debc:	bge	1db7c <__assert_fail@plt+0xc8a4>
   1dec0:	ldrb	r3, [r6, #52]	; 0x34
   1dec4:	tst	r3, #32
   1dec8:	bne	1db8c <__assert_fail@plt+0xc8b4>
   1decc:	ldr	r3, [sp, #308]	; 0x134
   1ded0:	add	r2, r3, #1
   1ded4:	str	r2, [sp, #308]	; 0x134
   1ded8:	ldr	r2, [sp, #272]	; 0x110
   1dedc:	ldrb	r4, [r2, r3]
   1dee0:	ldr	r3, [r6, #44]	; 0x2c
   1dee4:	cmp	r3, #0
   1dee8:	beq	1dd70 <__assert_fail@plt+0xca98>
   1deec:	ldr	r4, [r3, r4, lsl #2]
   1def0:	ldr	r3, [sp, #368]	; 0x170
   1def4:	cmp	r3, #0
   1def8:	beq	1df10 <__assert_fail@plt+0xcc38>
   1defc:	mov	r2, r4
   1df00:	add	r1, sp, #268	; 0x10c
   1df04:	add	r0, sp, #104	; 0x68
   1df08:	bl	1c800 <__assert_fail@plt+0xb528>
   1df0c:	mov	r4, r0
   1df10:	cmp	r4, #0
   1df14:	beq	1ddc0 <__assert_fail@plt+0xcae8>
   1df18:	cmp	fp, #0
   1df1c:	bne	1de50 <__assert_fail@plt+0xcb78>
   1df20:	ldrb	r3, [r4, #52]	; 0x34
   1df24:	tst	r3, #16
   1df28:	beq	1de90 <__assert_fail@plt+0xcbb8>
   1df2c:	tst	r3, #128	; 0x80
   1df30:	beq	1de70 <__assert_fail@plt+0xcb98>
   1df34:	ldr	r2, [sp, #308]	; 0x134
   1df38:	mov	r1, r4
   1df3c:	add	r0, sp, #268	; 0x10c
   1df40:	bl	189f0 <__assert_fail@plt+0x7718>
   1df44:	cmp	r0, #0
   1df48:	beq	1de90 <__assert_fail@plt+0xcbb8>
   1df4c:	b	1de70 <__assert_fail@plt+0xcb98>
   1df50:	mov	sl, r0
   1df54:	b	1ea6c <__assert_fail@plt+0xd794>
   1df58:	mov	sl, r0
   1df5c:	b	1ea6c <__assert_fail@plt+0xd794>
   1df60:	ldr	r2, [sp, #40]	; 0x28
   1df64:	ldr	r3, [r2, #76]	; 0x4c
   1df68:	cmp	r3, #0
   1df6c:	bne	1ebdc <__assert_fail@plt+0xd904>
   1df70:	mov	r9, fp
   1df74:	mov	fp, r2
   1df78:	b	1e028 <__assert_fail@plt+0xcd50>
   1df7c:	mov	r3, fp
   1df80:	ldr	fp, [sp, #12]
   1df84:	mov	r2, r6
   1df88:	mov	r1, r5
   1df8c:	mov	r0, r9
   1df90:	bl	1b5f0 <__assert_fail@plt+0xa318>
   1df94:	mov	r8, r0
   1df98:	mov	r0, r6
   1df9c:	bl	22f00 <__assert_fail@plt+0x11c28>
   1dfa0:	cmp	r8, #0
   1dfa4:	beq	1dffc <__assert_fail@plt+0xcd24>
   1dfa8:	mov	r6, #0
   1dfac:	b	1ebfc <__assert_fail@plt+0xd924>
   1dfb0:	str	r5, [sp, #128]	; 0x80
   1dfb4:	mov	r3, #0
   1dfb8:	str	r3, [sp, #132]	; 0x84
   1dfbc:	str	r7, [sp, #136]	; 0x88
   1dfc0:	str	sl, [sp, #140]	; 0x8c
   1dfc4:	str	r3, [sp, #144]	; 0x90
   1dfc8:	str	r3, [sp, #148]	; 0x94
   1dfcc:	str	r3, [sp, #152]	; 0x98
   1dfd0:	add	r1, sp, #128	; 0x80
   1dfd4:	add	r0, sp, #268	; 0x10c
   1dfd8:	bl	1d038 <__assert_fail@plt+0xbd60>
   1dfdc:	mov	r8, r0
   1dfe0:	ldr	r0, [sp, #152]	; 0x98
   1dfe4:	bl	22f00 <__assert_fail@plt+0x11c28>
   1dfe8:	cmp	r8, #0
   1dfec:	bne	1ebf8 <__assert_fail@plt+0xd920>
   1dff0:	ldr	r3, [r5]
   1dff4:	cmp	r3, #0
   1dff8:	beq	1eca4 <__assert_fail@plt+0xd9cc>
   1dffc:	mov	r9, fp
   1e000:	ldr	fp, [sp, #40]	; 0x28
   1e004:	ldr	r0, [sp, #368]	; 0x170
   1e008:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e00c:	str	r5, [sp, #368]	; 0x170
   1e010:	str	r7, [sp, #364]	; 0x16c
   1e014:	str	sl, [sp, #360]	; 0x168
   1e018:	mov	r0, #0
   1e01c:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e020:	mov	r0, #0
   1e024:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e028:	ldr	r3, [sp, #60]	; 0x3c
   1e02c:	cmp	r3, #0
   1e030:	beq	1e954 <__assert_fail@plt+0xd67c>
   1e034:	cmp	r3, #1
   1e038:	bls	1e98c <__assert_fail@plt+0xd6b4>
   1e03c:	ldr	r2, [sp, #460]	; 0x1cc
   1e040:	str	r2, [sp, #36]	; 0x24
   1e044:	sub	r4, r3, #-536870911	; 0xe0000001
   1e048:	lsl	r4, r4, #3
   1e04c:	mov	r3, r2
   1e050:	add	r1, r2, r4
   1e054:	mvn	r2, #0
   1e058:	str	r2, [r3, #12]
   1e05c:	str	r2, [r3, #8]!
   1e060:	cmp	r3, r1
   1e064:	bne	1e058 <__assert_fail@plt+0xcd80>
   1e068:	mov	r3, #0
   1e06c:	ldr	r2, [sp, #460]	; 0x1cc
   1e070:	str	r3, [r2]
   1e074:	ldr	r3, [sp, #360]	; 0x168
   1e078:	str	r3, [r2, #4]
   1e07c:	ldr	r3, [sp, #24]
   1e080:	ldrb	r3, [r3, #28]
   1e084:	eor	r3, r3, #16
   1e088:	ands	r3, r9, r3, lsr #4
   1e08c:	beq	1e384 <__assert_fail@plt+0xd0ac>
   1e090:	ldrb	r3, [fp, #88]	; 0x58
   1e094:	tst	r3, #1
   1e098:	beq	1e9a4 <__assert_fail@plt+0xd6cc>
   1e09c:	ldr	r3, [fp, #76]	; 0x4c
   1e0a0:	cmp	r3, #0
   1e0a4:	ble	1e9a4 <__assert_fail@plt+0xd6cc>
   1e0a8:	ldr	r3, [sp, #24]
   1e0ac:	ldr	r3, [r3]
   1e0b0:	str	r3, [sp, #24]
   1e0b4:	mov	r3, #0
   1e0b8:	str	r3, [sp, #116]	; 0x74
   1e0bc:	mov	r2, #2
   1e0c0:	str	r2, [sp, #120]	; 0x78
   1e0c4:	str	r3, [sp, #124]	; 0x7c
   1e0c8:	str	r3, [sp, #128]	; 0x80
   1e0cc:	mov	r3, #16
   1e0d0:	str	r3, [sp, #132]	; 0x84
   1e0d4:	add	r3, sp, #140	; 0x8c
   1e0d8:	str	r3, [sp, #136]	; 0x88
   1e0dc:	mov	r0, #48	; 0x30
   1e0e0:	bl	22d3c <__assert_fail@plt+0x11a64>
   1e0e4:	str	r0, [sp, #124]	; 0x7c
   1e0e8:	cmp	r0, #0
   1e0ec:	addne	r9, sp, #116	; 0x74
   1e0f0:	beq	1ea3c <__assert_fail@plt+0xd764>
   1e0f4:	ldr	r3, [sp, #24]
   1e0f8:	ldr	sl, [r3, #72]	; 0x48
   1e0fc:	mov	r3, #0
   1e100:	str	r3, [sp, #104]	; 0x68
   1e104:	str	r3, [sp, #108]	; 0x6c
   1e108:	str	r3, [sp, #112]	; 0x70
   1e10c:	ldr	r3, [sp, #128]	; 0x80
   1e110:	ldr	r2, [sp, #60]	; 0x3c
   1e114:	cmp	r2, r3
   1e118:	bhi	1e190 <__assert_fail@plt+0xceb8>
   1e11c:	ldr	r3, [sp, #60]	; 0x3c
   1e120:	str	r3, [sp, #128]	; 0x80
   1e124:	ldr	r3, [sp, #136]	; 0x88
   1e128:	str	r3, [sp, #16]
   1e12c:	add	r2, r4, #8
   1e130:	str	r2, [sp, #32]
   1e134:	ldr	r1, [sp, #460]	; 0x1cc
   1e138:	mov	r0, r3
   1e13c:	bl	11068 <memcpy@plt>
   1e140:	ldr	r3, [sp, #460]	; 0x1cc
   1e144:	ldr	r3, [r3]
   1e148:	add	r2, sp, #408	; 0x198
   1e14c:	str	r3, [r2, #-308]!	; 0xfffffecc
   1e150:	str	r2, [sp, #40]	; 0x28
   1e154:	ldr	r3, [sp, #60]	; 0x3c
   1e158:	mov	r2, r3
   1e15c:	lsl	r3, r3, #4
   1e160:	str	r3, [sp, #44]	; 0x2c
   1e164:	str	fp, [sp, #12]
   1e168:	mov	fp, r2
   1e16c:	ldr	r4, [sp, #460]	; 0x1cc
   1e170:	b	1e5c4 <__assert_fail@plt+0xd2ec>
   1e174:	ldr	fp, [sp, #40]	; 0x28
   1e178:	mov	r3, #1
   1e17c:	str	r3, [sp, #28]
   1e180:	b	1e954 <__assert_fail@plt+0xd67c>
   1e184:	mov	r9, fp
   1e188:	ldr	fp, [sp, #40]	; 0x28
   1e18c:	b	1e028 <__assert_fail@plt+0xcd50>
   1e190:	mov	r3, #8
   1e194:	add	r2, sp, #140	; 0x8c
   1e198:	ldr	r1, [sp, #60]	; 0x3c
   1e19c:	add	r0, sp, #128	; 0x80
   1e1a0:	bl	22e34 <__assert_fail@plt+0x11b5c>
   1e1a4:	cmp	r0, #0
   1e1a8:	bne	1e124 <__assert_fail@plt+0xce4c>
   1e1ac:	ldr	r0, [sp, #136]	; 0x88
   1e1b0:	add	r3, sp, #140	; 0x8c
   1e1b4:	cmp	r0, r3
   1e1b8:	beq	1e1c0 <__assert_fail@plt+0xcee8>
   1e1bc:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e1c0:	add	r3, sp, #140	; 0x8c
   1e1c4:	str	r3, [sp, #136]	; 0x88
   1e1c8:	mov	r3, #0
   1e1cc:	str	r3, [sp, #128]	; 0x80
   1e1d0:	mvn	r3, #0
   1e1d4:	str	r3, [sp, #132]	; 0x84
   1e1d8:	add	r0, sp, #128	; 0x80
   1e1dc:	bl	17974 <__assert_fail@plt+0x669c>
   1e1e0:	mov	r0, r9
   1e1e4:	bl	179a8 <__assert_fail@plt+0x66d0>
   1e1e8:	mov	r3, #12
   1e1ec:	str	r3, [sp, #28]
   1e1f0:	b	1e954 <__assert_fail@plt+0xd67c>
   1e1f4:	ldr	r3, [r3, sl, lsl #3]
   1e1f8:	add	r3, r3, #1
   1e1fc:	cmp	fp, r3
   1e200:	addgt	r1, r4, r3, lsl #3
   1e204:	strgt	r2, [r4, r3, lsl #3]
   1e208:	mvngt	r3, #0
   1e20c:	strgt	r3, [r1, #4]
   1e210:	ldr	r2, [r4, #4]
   1e214:	ldr	r3, [sp, #100]	; 0x64
   1e218:	cmp	r2, r3
   1e21c:	beq	1e2d4 <__assert_fail@plt+0xcffc>
   1e220:	cmp	r9, #0
   1e224:	beq	1e23c <__assert_fail@plt+0xcf64>
   1e228:	mov	r1, sl
   1e22c:	add	r0, sp, #104	; 0x68
   1e230:	bl	147f4 <__assert_fail@plt+0x351c>
   1e234:	cmp	r0, #0
   1e238:	bne	1e2f4 <__assert_fail@plt+0xd01c>
   1e23c:	ldr	r5, [sp, #352]	; 0x160
   1e240:	mov	r7, sl
   1e244:	lsl	r8, sl, #3
   1e248:	ldr	r3, [r5]
   1e24c:	add	r1, r3, r8
   1e250:	ldrb	r2, [r1, #4]
   1e254:	tst	r2, #8
   1e258:	beq	1e524 <__assert_fail@plt+0xd24c>
   1e25c:	ldr	r3, [sp, #368]	; 0x170
   1e260:	ldr	r2, [sp, #100]	; 0x64
   1e264:	ldr	r3, [r3, r2, lsl #2]
   1e268:	add	r3, r3, #4
   1e26c:	str	r3, [sp, #20]
   1e270:	add	r3, sl, sl, lsl #1
   1e274:	ldr	r5, [r5, #20]
   1e278:	add	r5, r5, r3, lsl #2
   1e27c:	mov	r1, sl
   1e280:	add	r0, sp, #104	; 0x68
   1e284:	bl	147f4 <__assert_fail@plt+0x351c>
   1e288:	cmp	r0, #0
   1e28c:	beq	1e3b8 <__assert_fail@plt+0xd0e0>
   1e290:	ldr	r8, [r5, #4]
   1e294:	cmp	r8, #0
   1e298:	mvnle	sl, #0
   1e29c:	ble	1e9e0 <__assert_fail@plt+0xd708>
   1e2a0:	ldr	r7, [r5, #8]
   1e2a4:	sub	r7, r7, #4
   1e2a8:	mvn	sl, #0
   1e2ac:	mov	r5, #0
   1e2b0:	b	1e4f4 <__assert_fail@plt+0xd21c>
   1e2b4:	str	r2, [r1, #4]
   1e2b8:	ldr	r2, [sp, #32]
   1e2bc:	mov	r1, r4
   1e2c0:	ldr	r0, [sp, #16]
   1e2c4:	bl	11068 <memcpy@plt>
   1e2c8:	b	1e210 <__assert_fail@plt+0xcf38>
   1e2cc:	str	r2, [r1, #4]
   1e2d0:	b	1e210 <__assert_fail@plt+0xcf38>
   1e2d4:	ldr	r3, [sp, #364]	; 0x16c
   1e2d8:	cmp	sl, r3
   1e2dc:	bne	1e220 <__assert_fail@plt+0xcf48>
   1e2e0:	cmp	r9, #0
   1e2e4:	beq	1e3b0 <__assert_fail@plt+0xd0d8>
   1e2e8:	ldr	r2, [sp, #36]	; 0x24
   1e2ec:	mov	r3, #0
   1e2f0:	b	1e310 <__assert_fail@plt+0xd038>
   1e2f4:	ldr	r2, [sp, #36]	; 0x24
   1e2f8:	mov	r3, #0
   1e2fc:	b	1e310 <__assert_fail@plt+0xd038>
   1e300:	add	r3, r3, #1
   1e304:	add	r2, r2, #8
   1e308:	cmp	fp, r3
   1e30c:	beq	1e35c <__assert_fail@plt+0xd084>
   1e310:	ldr	r1, [r4, r3, lsl #3]
   1e314:	cmp	r1, #0
   1e318:	blt	1e300 <__assert_fail@plt+0xd028>
   1e31c:	ldr	r1, [r2, #4]
   1e320:	cmn	r1, #1
   1e324:	bne	1e300 <__assert_fail@plt+0xd028>
   1e328:	add	r3, sp, #104	; 0x68
   1e32c:	str	r3, [sp, #4]
   1e330:	ldr	r3, [sp, #16]
   1e334:	str	r3, [sp]
   1e338:	mov	r3, r4
   1e33c:	mov	r2, fp
   1e340:	ldr	r1, [sp, #40]	; 0x28
   1e344:	mov	r0, r9
   1e348:	bl	18ac8 <__assert_fail@plt+0x77f0>
   1e34c:	subs	sl, r0, #0
   1e350:	bge	1e23c <__assert_fail@plt+0xcf64>
   1e354:	ldr	fp, [sp, #12]
   1e358:	b	1e360 <__assert_fail@plt+0xd088>
   1e35c:	ldr	fp, [sp, #12]
   1e360:	ldr	r0, [sp, #112]	; 0x70
   1e364:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e368:	add	r0, sp, #128	; 0x80
   1e36c:	bl	17974 <__assert_fail@plt+0x669c>
   1e370:	mov	r0, r9
   1e374:	bl	179a8 <__assert_fail@plt+0x66d0>
   1e378:	cmp	r0, #0
   1e37c:	strne	r0, [sp, #28]
   1e380:	bne	1e954 <__assert_fail@plt+0xd67c>
   1e384:	ldrb	r4, [sp, #344]	; 0x158
   1e388:	ldr	r7, [sp, #296]	; 0x128
   1e38c:	ldr	r8, [sp, #280]	; 0x118
   1e390:	ldr	r9, [sp, #300]	; 0x12c
   1e394:	ldr	ip, [sp, #404]	; 0x194
   1e398:	ldr	r1, [sp, #460]	; 0x1cc
   1e39c:	mov	r3, r1
   1e3a0:	add	r2, r1, #4
   1e3a4:	ldr	r0, [sp, #60]	; 0x3c
   1e3a8:	add	lr, r1, r0, lsl #3
   1e3ac:	b	1e7b4 <__assert_fail@plt+0xd4dc>
   1e3b0:	ldr	fp, [sp, #12]
   1e3b4:	b	1e360 <__assert_fail@plt+0xd088>
   1e3b8:	mov	r1, sl
   1e3bc:	add	r0, sp, #104	; 0x68
   1e3c0:	bl	17b88 <__assert_fail@plt+0x68b0>
   1e3c4:	cmp	r0, #0
   1e3c8:	bne	1e290 <__assert_fail@plt+0xcfb8>
   1e3cc:	ldr	fp, [sp, #12]
   1e3d0:	ldr	r0, [sp, #112]	; 0x70
   1e3d4:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e3d8:	add	r0, sp, #128	; 0x80
   1e3dc:	bl	17974 <__assert_fail@plt+0x669c>
   1e3e0:	mov	r0, r9
   1e3e4:	bl	179a8 <__assert_fail@plt+0x66d0>
   1e3e8:	mov	r3, #12
   1e3ec:	str	r3, [sp, #28]
   1e3f0:	b	1e954 <__assert_fail@plt+0xd67c>
   1e3f4:	mov	r1, sl
   1e3f8:	add	r0, sp, #104	; 0x68
   1e3fc:	bl	147f4 <__assert_fail@plt+0x351c>
   1e400:	cmp	r0, #0
   1e404:	bne	1e754 <__assert_fail@plt+0xd47c>
   1e408:	cmp	r9, #0
   1e40c:	beq	1e5bc <__assert_fail@plt+0xd2e4>
   1e410:	ldr	r7, [sp, #100]	; 0x64
   1e414:	ldr	r5, [r9]
   1e418:	add	r1, r5, #1
   1e41c:	str	r1, [r9]
   1e420:	ldr	r3, [r9, #4]
   1e424:	cmp	r1, r3
   1e428:	bne	1e454 <__assert_fail@plt+0xd17c>
   1e42c:	add	r1, r1, r1, lsl #1
   1e430:	lsl	r1, r1, #4
   1e434:	ldr	r0, [r9, #8]
   1e438:	bl	22d6c <__assert_fail@plt+0x11a94>
   1e43c:	cmp	r0, #0
   1e440:	beq	1e9dc <__assert_fail@plt+0xd704>
   1e444:	ldr	r3, [r9, #4]
   1e448:	lsl	r3, r3, #1
   1e44c:	str	r3, [r9, #4]
   1e450:	str	r0, [r9, #8]
   1e454:	add	r5, r5, r5, lsl #1
   1e458:	lsl	r8, r5, #3
   1e45c:	ldr	r3, [r9, #8]
   1e460:	str	r7, [r3, r5, lsl #3]
   1e464:	ldr	r3, [r9, #8]
   1e468:	add	r3, r3, r8
   1e46c:	str	r6, [r3, #4]
   1e470:	ldr	r5, [r9, #8]
   1e474:	add	r5, r5, r8
   1e478:	ldr	r0, [sp, #44]	; 0x2c
   1e47c:	bl	22d3c <__assert_fail@plt+0x11a64>
   1e480:	str	r0, [r5, #8]
   1e484:	ldr	r3, [r9, #8]
   1e488:	add	r3, r3, r8
   1e48c:	ldr	r0, [r3, #8]
   1e490:	cmp	r0, #0
   1e494:	beq	1e9dc <__assert_fail@plt+0xd704>
   1e498:	ldr	r5, [sp, #32]
   1e49c:	mov	r2, r5
   1e4a0:	mov	r1, r4
   1e4a4:	bl	11068 <memcpy@plt>
   1e4a8:	ldr	r3, [r9, #8]
   1e4ac:	add	r3, r3, r8
   1e4b0:	ldr	r0, [r3, #8]
   1e4b4:	mov	r2, r5
   1e4b8:	ldr	r1, [sp, #16]
   1e4bc:	add	r0, r0, r5
   1e4c0:	bl	11068 <memcpy@plt>
   1e4c4:	ldr	r0, [r9, #8]
   1e4c8:	add	r0, r0, r8
   1e4cc:	add	r1, sp, #104	; 0x68
   1e4d0:	add	r0, r0, #12
   1e4d4:	bl	15c30 <__assert_fail@plt+0x4958>
   1e4d8:	cmp	r0, #0
   1e4dc:	beq	1e5bc <__assert_fail@plt+0xd2e4>
   1e4e0:	ldr	fp, [sp, #12]
   1e4e4:	b	1e3d0 <__assert_fail@plt+0xd0f8>
   1e4e8:	add	r5, r5, #1
   1e4ec:	cmp	r8, r5
   1e4f0:	beq	1e5bc <__assert_fail@plt+0xd2e4>
   1e4f4:	ldr	r6, [r7, #4]!
   1e4f8:	mov	r1, r6
   1e4fc:	ldr	r0, [sp, #20]
   1e500:	bl	147f4 <__assert_fail@plt+0x351c>
   1e504:	cmp	r0, #0
   1e508:	beq	1e4e8 <__assert_fail@plt+0xd210>
   1e50c:	cmn	sl, #1
   1e510:	bne	1e3f4 <__assert_fail@plt+0xd11c>
   1e514:	mov	sl, r6
   1e518:	b	1e4e8 <__assert_fail@plt+0xd210>
   1e51c:	beq	feac8fcc <optarg@@GLIBC_2.4+0xfea93df4>
   1e520:	andeq	pc, r3, r0, lsl #30
   1e524:	ldrb	r1, [r1, #6]
   1e528:	tst	r1, #16
   1e52c:	bne	1e648 <__assert_fail@plt+0xd370>
   1e530:	cmp	r2, #4
   1e534:	bne	1e6c4 <__assert_fail@plt+0xd3ec>
   1e538:	ldr	r3, [r3, r8]
   1e53c:	add	r3, r3, #1
   1e540:	cmp	fp, r3
   1e544:	ble	1e670 <__assert_fail@plt+0xd398>
   1e548:	add	r2, r4, r3, lsl #3
   1e54c:	ldr	r6, [r2, #4]
   1e550:	ldr	r2, [r4, r3, lsl #3]
   1e554:	sub	r6, r6, r2
   1e558:	cmp	r9, #0
   1e55c:	bne	1e6f8 <__assert_fail@plt+0xd420>
   1e560:	cmp	r6, #0
   1e564:	beq	1e67c <__assert_fail@plt+0xd3a4>
   1e568:	ldr	r3, [r5, #12]
   1e56c:	ldr	sl, [r3, sl, lsl #2]
   1e570:	ldr	r3, [sp, #100]	; 0x64
   1e574:	add	r6, r6, r3
   1e578:	str	r6, [sp, #100]	; 0x64
   1e57c:	cmp	r9, #0
   1e580:	beq	1e5b4 <__assert_fail@plt+0xd2dc>
   1e584:	ldr	r3, [sp, #360]	; 0x168
   1e588:	cmp	r6, r3
   1e58c:	bgt	1ecd4 <__assert_fail@plt+0xd9fc>
   1e590:	ldr	r3, [sp, #368]	; 0x170
   1e594:	ldr	r0, [r3, r6, lsl #2]
   1e598:	cmp	r0, #0
   1e59c:	beq	1ecdc <__assert_fail@plt+0xda04>
   1e5a0:	mov	r1, sl
   1e5a4:	add	r0, r0, #4
   1e5a8:	bl	147f4 <__assert_fail@plt+0x351c>
   1e5ac:	cmp	r0, #0
   1e5b0:	beq	1ece4 <__assert_fail@plt+0xda0c>
   1e5b4:	mov	r3, #0
   1e5b8:	str	r3, [sp, #108]	; 0x6c
   1e5bc:	cmp	sl, #0
   1e5c0:	blt	1e9e0 <__assert_fail@plt+0xd708>
   1e5c4:	ldr	r2, [sp, #100]	; 0x64
   1e5c8:	ldr	r3, [r4, #4]
   1e5cc:	cmp	r2, r3
   1e5d0:	bgt	1e76c <__assert_fail@plt+0xd494>
   1e5d4:	lsl	r1, sl, #3
   1e5d8:	ldr	r3, [sp, #24]
   1e5dc:	ldr	r3, [r3]
   1e5e0:	add	r0, r3, r1
   1e5e4:	ldrb	ip, [r0, #4]
   1e5e8:	cmp	ip, #8
   1e5ec:	beq	1e1f4 <__assert_fail@plt+0xcf1c>
   1e5f0:	cmp	ip, #9
   1e5f4:	bne	1e210 <__assert_fail@plt+0xcf38>
   1e5f8:	ldr	r3, [r3, r1]
   1e5fc:	add	r3, r3, #1
   1e600:	cmp	fp, r3
   1e604:	ble	1e210 <__assert_fail@plt+0xcf38>
   1e608:	add	r1, r4, r3, lsl #3
   1e60c:	ldr	ip, [r4, r3, lsl #3]
   1e610:	cmp	r2, ip
   1e614:	bgt	1e2b4 <__assert_fail@plt+0xcfdc>
   1e618:	ldrb	r0, [r0, #6]
   1e61c:	tst	r0, #8
   1e620:	beq	1e2cc <__assert_fail@plt+0xcff4>
   1e624:	ldr	r0, [sp, #16]
   1e628:	ldr	r3, [r0, r3, lsl #3]
   1e62c:	cmn	r3, #1
   1e630:	beq	1e2cc <__assert_fail@plt+0xcff4>
   1e634:	ldr	r2, [sp, #32]
   1e638:	mov	r1, r0
   1e63c:	mov	r0, r4
   1e640:	bl	11068 <memcpy@plt>
   1e644:	b	1e210 <__assert_fail@plt+0xcf38>
   1e648:	ldr	r3, [sp, #100]	; 0x64
   1e64c:	add	r2, sp, #268	; 0x10c
   1e650:	mov	r1, sl
   1e654:	mov	r0, r5
   1e658:	bl	198d4 <__assert_fail@plt+0x85fc>
   1e65c:	subs	r6, r0, #0
   1e660:	beq	1e6c4 <__assert_fail@plt+0xd3ec>
   1e664:	ldr	r3, [r5, #12]
   1e668:	ldr	sl, [r3, r7, lsl #2]
   1e66c:	b	1e570 <__assert_fail@plt+0xd298>
   1e670:	cmp	r9, #0
   1e674:	mvnne	sl, #0
   1e678:	bne	1e5bc <__assert_fail@plt+0xd2e4>
   1e67c:	mov	r1, sl
   1e680:	add	r0, sp, #104	; 0x68
   1e684:	bl	17b88 <__assert_fail@plt+0x68b0>
   1e688:	cmp	r0, #0
   1e68c:	beq	1e764 <__assert_fail@plt+0xd48c>
   1e690:	ldr	r3, [r5, #20]
   1e694:	add	r2, r7, r7, lsl #1
   1e698:	add	r3, r3, r2, lsl #2
   1e69c:	ldr	r3, [r3, #8]
   1e6a0:	ldr	sl, [r3]
   1e6a4:	ldr	r3, [sp, #368]	; 0x170
   1e6a8:	ldr	r2, [sp, #100]	; 0x64
   1e6ac:	ldr	r0, [r3, r2, lsl #2]
   1e6b0:	mov	r1, sl
   1e6b4:	add	r0, r0, #4
   1e6b8:	bl	147f4 <__assert_fail@plt+0x351c>
   1e6bc:	cmp	r0, #0
   1e6c0:	bne	1e5bc <__assert_fail@plt+0xd2e4>
   1e6c4:	ldr	r1, [r5]
   1e6c8:	ldr	r2, [sp, #100]	; 0x64
   1e6cc:	add	r1, r1, r8
   1e6d0:	add	r0, sp, #268	; 0x10c
   1e6d4:	bl	185b4 <__assert_fail@plt+0x72dc>
   1e6d8:	cmp	r0, #0
   1e6dc:	mvneq	sl, #0
   1e6e0:	beq	1e9e0 <__assert_fail@plt+0xd708>
   1e6e4:	ldr	r3, [r5, #12]
   1e6e8:	ldr	sl, [r3, r7, lsl #2]
   1e6ec:	ldr	r6, [sp, #100]	; 0x64
   1e6f0:	add	r6, r6, #1
   1e6f4:	b	1e578 <__assert_fail@plt+0xd2a0>
   1e6f8:	add	r2, r4, r3, lsl #3
   1e6fc:	ldr	r0, [r4, r3, lsl #3]
   1e700:	cmn	r0, #1
   1e704:	beq	1ecbc <__assert_fail@plt+0xd9e4>
   1e708:	ldr	r3, [r2, #4]
   1e70c:	cmn	r3, #1
   1e710:	beq	1ecc4 <__assert_fail@plt+0xd9ec>
   1e714:	cmp	r6, #0
   1e718:	beq	1e67c <__assert_fail@plt+0xd3a4>
   1e71c:	ldr	ip, [sp, #272]	; 0x110
   1e720:	ldr	r1, [sp, #100]	; 0x64
   1e724:	ldr	r3, [sp, #296]	; 0x128
   1e728:	sub	r3, r3, r1
   1e72c:	cmp	r6, r3
   1e730:	bgt	1eccc <__assert_fail@plt+0xd9f4>
   1e734:	mov	r2, r6
   1e738:	add	r1, ip, r1
   1e73c:	add	r0, ip, r0
   1e740:	bl	110a4 <memcmp@plt>
   1e744:	cmp	r0, #0
   1e748:	beq	1e664 <__assert_fail@plt+0xd38c>
   1e74c:	mvn	sl, #0
   1e750:	b	1e9e0 <__assert_fail@plt+0xd708>
   1e754:	mov	sl, r6
   1e758:	b	1e5bc <__assert_fail@plt+0xd2e4>
   1e75c:	ldr	fp, [sp, #12]
   1e760:	b	1e3d0 <__assert_fail@plt+0xd0f8>
   1e764:	ldr	fp, [sp, #12]
   1e768:	b	1e3d0 <__assert_fail@plt+0xd0f8>
   1e76c:	ldr	fp, [sp, #12]
   1e770:	ldr	r0, [sp, #112]	; 0x70
   1e774:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e778:	add	r0, sp, #128	; 0x80
   1e77c:	bl	17974 <__assert_fail@plt+0x669c>
   1e780:	mov	r0, r9
   1e784:	bl	179a8 <__assert_fail@plt+0x66d0>
   1e788:	b	1e378 <__assert_fail@plt+0xd0a0>
   1e78c:	ldr	r5, [r0, #-4]
   1e790:	add	r5, r5, ip
   1e794:	str	r5, [r0, #-4]
   1e798:	ldr	r0, [r3, #4]
   1e79c:	add	r0, r0, ip
   1e7a0:	str	r0, [r3, #4]
   1e7a4:	add	r3, r3, #8
   1e7a8:	add	r2, r2, #8
   1e7ac:	cmp	r3, lr
   1e7b0:	beq	1e7f4 <__assert_fail@plt+0xd51c>
   1e7b4:	mov	r0, r2
   1e7b8:	ldr	r5, [r2, #-4]
   1e7bc:	cmn	r5, #1
   1e7c0:	beq	1e7a4 <__assert_fail@plt+0xd4cc>
   1e7c4:	cmp	r4, #0
   1e7c8:	beq	1e78c <__assert_fail@plt+0xd4b4>
   1e7cc:	cmp	r5, r7
   1e7d0:	ldrne	r5, [r8, r5, lsl #2]
   1e7d4:	moveq	r5, r9
   1e7d8:	str	r5, [r2, #-4]
   1e7dc:	ldr	r5, [r3, #4]
   1e7e0:	cmp	r7, r5
   1e7e4:	ldrne	r5, [r8, r5, lsl #2]
   1e7e8:	moveq	r5, r9
   1e7ec:	str	r5, [r3, #4]
   1e7f0:	b	1e78c <__assert_fail@plt+0xd4b4>
   1e7f4:	ldr	r2, [sp, #64]	; 0x40
   1e7f8:	cmp	r2, #0
   1e7fc:	ble	1e824 <__assert_fail@plt+0xd54c>
   1e800:	ldr	r2, [sp, #460]	; 0x1cc
   1e804:	ldr	r0, [sp, #456]	; 0x1c8
   1e808:	add	r0, r2, r0, lsl #3
   1e80c:	mvn	r2, #0
   1e810:	str	r2, [r3]
   1e814:	str	r2, [r3, #4]
   1e818:	add	r3, r3, #8
   1e81c:	cmp	r0, r3
   1e820:	bne	1e810 <__assert_fail@plt+0xd538>
   1e824:	ldr	r3, [fp, #132]	; 0x84
   1e828:	cmp	r3, #0
   1e82c:	beq	1e954 <__assert_fail@plt+0xd67c>
   1e830:	ldr	r3, [sp, #60]	; 0x3c
   1e834:	sub	r0, r3, #1
   1e838:	mov	r3, #0
   1e83c:	ldr	ip, [sp, #460]	; 0x1cc
   1e840:	b	1e86c <__assert_fail@plt+0xd594>
   1e844:	add	r2, r2, #1
   1e848:	ldr	r2, [ip, r2, lsl #3]
   1e84c:	str	r2, [r1, #8]
   1e850:	ldr	r2, [fp, #132]	; 0x84
   1e854:	ldr	r2, [r2, r3, lsl #2]
   1e858:	add	r2, ip, r2, lsl #3
   1e85c:	ldr	r2, [r2, #12]
   1e860:	str	r2, [r1, #12]
   1e864:	add	r3, r3, #1
   1e868:	add	r1, r1, #8
   1e86c:	cmp	r0, r3
   1e870:	beq	1e954 <__assert_fail@plt+0xd67c>
   1e874:	ldr	r2, [fp, #132]	; 0x84
   1e878:	ldr	r2, [r2, r3, lsl #2]
   1e87c:	cmp	r3, r2
   1e880:	bne	1e844 <__assert_fail@plt+0xd56c>
   1e884:	b	1e864 <__assert_fail@plt+0xd58c>
   1e888:	mov	r3, #12
   1e88c:	str	r3, [sp, #28]
   1e890:	b	1e954 <__assert_fail@plt+0xd67c>
   1e894:	mov	r3, #12
   1e898:	str	r3, [sp, #28]
   1e89c:	b	1e954 <__assert_fail@plt+0xd67c>
   1e8a0:	mov	r3, #1
   1e8a4:	str	r3, [sp, #28]
   1e8a8:	b	1e954 <__assert_fail@plt+0xd67c>
   1e8ac:	ldr	fp, [sp, #40]	; 0x28
   1e8b0:	mov	r3, #12
   1e8b4:	str	r3, [sp, #28]
   1e8b8:	b	1e954 <__assert_fail@plt+0xd67c>
   1e8bc:	ldr	fp, [sp, #40]	; 0x28
   1e8c0:	str	r0, [sp, #28]
   1e8c4:	b	1e954 <__assert_fail@plt+0xd67c>
   1e8c8:	ldr	fp, [sp, #40]	; 0x28
   1e8cc:	b	1e954 <__assert_fail@plt+0xd67c>
   1e8d0:	add	r0, sp, #268	; 0x10c
   1e8d4:	bl	178c8 <__assert_fail@plt+0x65f0>
   1e8d8:	ldr	r0, [sp, #400]	; 0x190
   1e8dc:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e8e0:	ldr	r0, [sp, #384]	; 0x180
   1e8e4:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e8e8:	b	1e968 <__assert_fail@plt+0xd690>
   1e8ec:	mov	r3, #1
   1e8f0:	str	r3, [sp, #28]
   1e8f4:	b	1e970 <__assert_fail@plt+0xd698>
   1e8f8:	mov	r3, #1
   1e8fc:	str	r3, [sp, #28]
   1e900:	b	1e970 <__assert_fail@plt+0xd698>
   1e904:	mov	r3, #1
   1e908:	str	r3, [sp, #28]
   1e90c:	b	1e970 <__assert_fail@plt+0xd698>
   1e910:	ldr	r3, [sp, #36]	; 0x24
   1e914:	str	r3, [sp, #272]	; 0x110
   1e918:	ldr	r3, [fp, #92]	; 0x5c
   1e91c:	ldr	r2, [sp, #48]	; 0x30
   1e920:	cmp	r3, #1
   1e924:	movgt	r2, #0
   1e928:	mov	r3, r2
   1e92c:	b	1d530 <__assert_fail@plt+0xc258>
   1e930:	mov	r3, #12
   1e934:	str	r3, [sp, #28]
   1e938:	b	1e954 <__assert_fail@plt+0xd67c>
   1e93c:	mov	r3, #0
   1e940:	str	r3, [sp, #104]	; 0x68
   1e944:	b	1decc <__assert_fail@plt+0xcbf4>
   1e948:	ldr	fp, [sp, #40]	; 0x28
   1e94c:	mov	r3, #12
   1e950:	str	r3, [sp, #28]
   1e954:	ldr	r0, [sp, #368]	; 0x170
   1e958:	bl	22f00 <__assert_fail@plt+0x11c28>
   1e95c:	ldr	r3, [fp, #76]	; 0x4c
   1e960:	cmp	r3, #0
   1e964:	bne	1e8d0 <__assert_fail@plt+0xd5f8>
   1e968:	add	r0, sp, #268	; 0x10c
   1e96c:	bl	17720 <__assert_fail@plt+0x6448>
   1e970:	ldr	r0, [sp, #28]
   1e974:	add	sp, sp, #412	; 0x19c
   1e978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e97c:	ldr	fp, [sp, #40]	; 0x28
   1e980:	mov	r3, #12
   1e984:	str	r3, [sp, #28]
   1e988:	b	1e954 <__assert_fail@plt+0xd67c>
   1e98c:	mov	r3, #0
   1e990:	ldr	r2, [sp, #460]	; 0x1cc
   1e994:	str	r3, [r2]
   1e998:	ldr	r3, [sp, #360]	; 0x168
   1e99c:	str	r3, [r2, #4]
   1e9a0:	b	1e384 <__assert_fail@plt+0xd0ac>
   1e9a4:	ldr	r3, [sp, #24]
   1e9a8:	ldr	r3, [r3]
   1e9ac:	str	r3, [sp, #24]
   1e9b0:	mov	r9, #0
   1e9b4:	str	r9, [sp, #116]	; 0x74
   1e9b8:	mov	r3, #2
   1e9bc:	str	r3, [sp, #120]	; 0x78
   1e9c0:	str	r9, [sp, #124]	; 0x7c
   1e9c4:	str	r9, [sp, #128]	; 0x80
   1e9c8:	mov	r3, #16
   1e9cc:	str	r3, [sp, #132]	; 0x84
   1e9d0:	add	r3, sp, #140	; 0x8c
   1e9d4:	str	r3, [sp, #136]	; 0x88
   1e9d8:	b	1e0f4 <__assert_fail@plt+0xce1c>
   1e9dc:	mvn	sl, #1
   1e9e0:	cmn	sl, #2
   1e9e4:	beq	1e75c <__assert_fail@plt+0xd484>
   1e9e8:	add	r3, sp, #104	; 0x68
   1e9ec:	str	r3, [sp, #4]
   1e9f0:	ldr	r3, [sp, #16]
   1e9f4:	str	r3, [sp]
   1e9f8:	mov	r3, r4
   1e9fc:	mov	r2, fp
   1ea00:	ldr	r1, [sp, #40]	; 0x28
   1ea04:	mov	r0, r9
   1ea08:	bl	18ac8 <__assert_fail@plt+0x77f0>
   1ea0c:	subs	sl, r0, #0
   1ea10:	bge	1e5c4 <__assert_fail@plt+0xd2ec>
   1ea14:	ldr	fp, [sp, #12]
   1ea18:	ldr	r0, [sp, #112]	; 0x70
   1ea1c:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ea20:	add	r0, sp, #128	; 0x80
   1ea24:	bl	17974 <__assert_fail@plt+0x669c>
   1ea28:	mov	r0, r9
   1ea2c:	bl	179a8 <__assert_fail@plt+0x66d0>
   1ea30:	mov	r3, #1
   1ea34:	str	r3, [sp, #28]
   1ea38:	b	1e954 <__assert_fail@plt+0xd67c>
   1ea3c:	mov	r3, #12
   1ea40:	str	r3, [sp, #28]
   1ea44:	b	1e954 <__assert_fail@plt+0xd67c>
   1ea48:	ldr	r3, [sp, #104]	; 0x68
   1ea4c:	cmp	r3, #0
   1ea50:	bne	1ebd4 <__assert_fail@plt+0xd8fc>
   1ea54:	ldr	r2, [sp, #20]
   1ea58:	cmp	r2, #0
   1ea5c:	ldrne	r3, [r2]
   1ea60:	ldrne	r1, [sp, #32]
   1ea64:	addne	r3, r3, r1
   1ea68:	strne	r3, [r2]
   1ea6c:	cmn	sl, #1
   1ea70:	beq	1ec14 <__assert_fail@plt+0xd93c>
   1ea74:	cmn	sl, #2
   1ea78:	beq	1e8ac <__assert_fail@plt+0xd5d4>
   1ea7c:	str	sl, [sp, #360]	; 0x168
   1ea80:	ldr	r3, [sp, #60]	; 0x3c
   1ea84:	cmp	r3, #1
   1ea88:	movls	fp, #0
   1ea8c:	movhi	fp, #1
   1ea90:	ldr	r3, [sp, #24]
   1ea94:	ldrb	r3, [r3, #28]
   1ea98:	eor	r3, r3, #16
   1ea9c:	ands	r3, fp, r3, lsr #4
   1eaa0:	beq	1df60 <__assert_fail@plt+0xcc88>
   1eaa4:	mov	r2, sl
   1eaa8:	ldr	r3, [sp, #368]	; 0x170
   1eaac:	ldr	r1, [r3, sl, lsl #2]
   1eab0:	add	r0, sp, #268	; 0x10c
   1eab4:	bl	189f0 <__assert_fail@plt+0x7718>
   1eab8:	str	r0, [sp, #364]	; 0x16c
   1eabc:	ldr	r3, [sp, #40]	; 0x28
   1eac0:	ldrb	r3, [r3, #88]	; 0x58
   1eac4:	tst	r3, #1
   1eac8:	bne	1eadc <__assert_fail@plt+0xd804>
   1eacc:	ldr	r3, [sp, #40]	; 0x28
   1ead0:	ldr	r3, [r3, #76]	; 0x4c
   1ead4:	cmp	r3, #0
   1ead8:	beq	1e184 <__assert_fail@plt+0xceac>
   1eadc:	ldr	r9, [sp, #352]	; 0x160
   1eae0:	ldr	r7, [sp, #364]	; 0x16c
   1eae4:	cmn	sl, #-1073741822	; 0xc0000002
   1eae8:	bhi	1e97c <__assert_fail@plt+0xd6a4>
   1eaec:	add	r4, sl, #1
   1eaf0:	lsl	r4, r4, #2
   1eaf4:	mov	r0, r4
   1eaf8:	bl	22d3c <__assert_fail@plt+0x11a64>
   1eafc:	subs	r5, r0, #0
   1eb00:	beq	1ec84 <__assert_fail@plt+0xd9ac>
   1eb04:	ldr	r3, [r9, #76]	; 0x4c
   1eb08:	cmp	r3, #0
   1eb0c:	beq	1dfb0 <__assert_fail@plt+0xccd8>
   1eb10:	mov	r0, r4
   1eb14:	bl	22d3c <__assert_fail@plt+0x11a64>
   1eb18:	subs	r6, r0, #0
   1eb1c:	beq	1ec84 <__assert_fail@plt+0xd9ac>
   1eb20:	str	fp, [sp, #12]
   1eb24:	add	fp, sl, #1
   1eb28:	lsl	r4, fp, #2
   1eb2c:	mov	r2, r4
   1eb30:	mov	r1, #0
   1eb34:	mov	r0, r6
   1eb38:	bl	111f4 <memset@plt>
   1eb3c:	str	r5, [sp, #128]	; 0x80
   1eb40:	str	r6, [sp, #132]	; 0x84
   1eb44:	str	r7, [sp, #136]	; 0x88
   1eb48:	str	sl, [sp, #140]	; 0x8c
   1eb4c:	mov	r3, #0
   1eb50:	str	r3, [sp, #144]	; 0x90
   1eb54:	str	r3, [sp, #148]	; 0x94
   1eb58:	str	r3, [sp, #152]	; 0x98
   1eb5c:	add	r1, sp, #128	; 0x80
   1eb60:	add	r0, sp, #268	; 0x10c
   1eb64:	bl	1d038 <__assert_fail@plt+0xbd60>
   1eb68:	mov	r8, r0
   1eb6c:	ldr	r0, [sp, #152]	; 0x98
   1eb70:	bl	22f00 <__assert_fail@plt+0x11c28>
   1eb74:	cmp	r8, #0
   1eb78:	bne	1ebfc <__assert_fail@plt+0xd924>
   1eb7c:	ldr	r3, [r5]
   1eb80:	cmp	r3, #0
   1eb84:	bne	1df7c <__assert_fail@plt+0xcca4>
   1eb88:	ldr	r3, [r6]
   1eb8c:	cmp	r3, #0
   1eb90:	bne	1df7c <__assert_fail@plt+0xcca4>
   1eb94:	sub	r4, r4, #4
   1eb98:	ldr	r3, [sp, #368]	; 0x170
   1eb9c:	add	r3, r3, r4
   1eba0:	subs	sl, sl, #1
   1eba4:	bmi	1eca8 <__assert_fail@plt+0xd9d0>
   1eba8:	ldr	r1, [r3, #-4]!
   1ebac:	cmp	r1, #0
   1ebb0:	beq	1eba0 <__assert_fail@plt+0xd8c8>
   1ebb4:	ldrb	r2, [r1, #52]	; 0x34
   1ebb8:	tst	r2, #16
   1ebbc:	beq	1eba0 <__assert_fail@plt+0xd8c8>
   1ebc0:	mov	r2, sl
   1ebc4:	add	r0, sp, #268	; 0x10c
   1ebc8:	bl	189f0 <__assert_fail@plt+0x7718>
   1ebcc:	mov	r7, r0
   1ebd0:	b	1eb24 <__assert_fail@plt+0xd84c>
   1ebd4:	ldr	fp, [sp, #40]	; 0x28
   1ebd8:	b	1e94c <__assert_fail@plt+0xd674>
   1ebdc:	mov	r2, sl
   1ebe0:	ldr	r3, [sp, #368]	; 0x170
   1ebe4:	ldr	r1, [r3, sl, lsl #2]
   1ebe8:	add	r0, sp, #268	; 0x10c
   1ebec:	bl	189f0 <__assert_fail@plt+0x7718>
   1ebf0:	str	r0, [sp, #364]	; 0x16c
   1ebf4:	b	1eacc <__assert_fail@plt+0xd7f4>
   1ebf8:	mov	r6, #0
   1ebfc:	mov	r0, r5
   1ec00:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ec04:	mov	r0, r6
   1ec08:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ec0c:	cmp	r8, #1
   1ec10:	bne	1ec78 <__assert_fail@plt+0xd9a0>
   1ec14:	add	r0, sp, #268	; 0x10c
   1ec18:	bl	178c8 <__assert_fail@plt+0x65f0>
   1ec1c:	ldr	r3, [sp, #404]	; 0x194
   1ec20:	ldr	r2, [sp, #84]	; 0x54
   1ec24:	add	r3, r2, r3
   1ec28:	str	r3, [sp, #404]	; 0x194
   1ec2c:	ldr	r2, [sp, #44]	; 0x2c
   1ec30:	cmp	r2, r3
   1ec34:	movge	r2, #0
   1ec38:	movlt	r2, #1
   1ec3c:	ldr	r1, [sp, #56]	; 0x38
   1ec40:	cmp	r1, r3
   1ec44:	movle	r3, r2
   1ec48:	orrgt	r3, r2, #1
   1ec4c:	cmp	r3, #0
   1ec50:	bne	1e174 <__assert_fail@plt+0xce9c>
   1ec54:	ldr	r3, [sp, #72]	; 0x48
   1ec58:	cmp	r3, #4
   1ec5c:	ldrls	pc, [pc, r3, lsl #2]
   1ec60:	b	1d988 <__assert_fail@plt+0xc6b0>
   1ec64:	andeq	sp, r1, ip, asr #15
   1ec68:	andeq	sp, r1, ip, asr #15
   1ec6c:	andeq	sp, r1, r4, ror r7
   1ec70:	andeq	sp, r1, ip, lsl #14
   1ec74:			; <UNDEFINED> instruction: 0x0001d8b8
   1ec78:	ldr	fp, [sp, #40]	; 0x28
   1ec7c:	mov	r3, r8
   1ec80:	b	1ec9c <__assert_fail@plt+0xd9c4>
   1ec84:	ldr	fp, [sp, #40]	; 0x28
   1ec88:	mov	r0, r5
   1ec8c:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ec90:	mov	r0, #0
   1ec94:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ec98:	mov	r3, #12
   1ec9c:	str	r3, [sp, #28]
   1eca0:	b	1e954 <__assert_fail@plt+0xd67c>
   1eca4:	mov	r6, #0
   1eca8:	mov	r0, r5
   1ecac:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ecb0:	mov	r0, r6
   1ecb4:	bl	22f00 <__assert_fail@plt+0x11c28>
   1ecb8:	b	1ec14 <__assert_fail@plt+0xd93c>
   1ecbc:	mvn	sl, #0
   1ecc0:	b	1e9e0 <__assert_fail@plt+0xd708>
   1ecc4:	mvn	sl, #0
   1ecc8:	b	1e9e0 <__assert_fail@plt+0xd708>
   1eccc:	mvn	sl, #0
   1ecd0:	b	1e9e0 <__assert_fail@plt+0xd708>
   1ecd4:	mvn	sl, #0
   1ecd8:	b	1e9e0 <__assert_fail@plt+0xd708>
   1ecdc:	mvn	sl, #0
   1ece0:	b	1e9e0 <__assert_fail@plt+0xd708>
   1ece4:	mvn	sl, #0
   1ece8:	b	1e9e0 <__assert_fail@plt+0xd708>
   1ecec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ecf0:	sub	sp, sp, #156	; 0x9c
   1ecf4:	mov	r9, r0
   1ecf8:	mov	r4, r1
   1ecfc:	mov	r8, r2
   1ed00:	str	r3, [sp, #24]
   1ed04:	ldr	sl, [sp, #196]	; 0xc4
   1ed08:	ldr	r3, [r1]
   1ed0c:	str	r3, [sp, #20]
   1ed10:	ldrb	r2, [r2, #4]
   1ed14:	sub	r3, r2, #1
   1ed18:	cmp	r3, #35	; 0x23
   1ed1c:	ldrls	pc, [pc, r3, lsl #2]
   1ed20:	b	1fb40 <__assert_fail@plt+0xe868>
   1ed24:			; <UNDEFINED> instruction: 0x0001edb4
   1ed28:	andeq	pc, r1, ip, lsl #31
   1ed2c:	andeq	pc, r1, r0, asr #22
   1ed30:	andeq	pc, r1, r4, lsl r7	; <UNPREDICTABLE>
   1ed34:	andeq	pc, r1, r0, asr sl	; <UNPREDICTABLE>
   1ed38:	andeq	pc, r1, r0, asr #22
   1ed3c:	andeq	pc, r1, r0, asr #22
   1ed40:	andeq	lr, r1, ip, ror lr
   1ed44:	andeq	pc, r1, r8, asr #15
   1ed48:	andeq	pc, r1, ip, lsl #31
   1ed4c:	andeq	pc, r1, r4, lsr #15
   1ed50:	andeq	pc, r1, r8, ror #16
   1ed54:	andeq	pc, r1, r0, asr #22
   1ed58:	andeq	pc, r1, r0, asr #22
   1ed5c:	andeq	pc, r1, r0, asr #22
   1ed60:	andeq	pc, r1, r0, asr #22
   1ed64:	andeq	pc, r1, r0, asr #22
   1ed68:	andeq	pc, r1, r4, lsr #15
   1ed6c:	andeq	pc, r1, r4, lsr #15
   1ed70:	andeq	lr, r1, r8, asr pc
   1ed74:	andeq	pc, r1, r0, asr #22
   1ed78:	andeq	pc, r1, r0, asr #22
   1ed7c:	andeq	pc, r1, ip, lsl #15
   1ed80:	ldrdeq	pc, [r1], -r0
   1ed84:	andeq	pc, r1, r0, asr #22
   1ed88:	andeq	pc, r1, r0, asr #22
   1ed8c:	andeq	pc, r1, r0, asr #22
   1ed90:	andeq	pc, r1, r0, asr #22
   1ed94:	andeq	pc, r1, r0, asr #22
   1ed98:	andeq	pc, r1, r0, asr #22
   1ed9c:	andeq	pc, r1, r0, asr #22
   1eda0:	muleq	r1, r0, sl
   1eda4:	muleq	r1, r0, sl
   1eda8:	andeq	pc, r1, r0, ror #21
   1edac:	andeq	pc, r1, r0, ror #21
   1edb0:	andeq	pc, r1, r0, lsr fp	; <UNPREDICTABLE>
   1edb4:	mov	r3, r8
   1edb8:	mov	r2, #0
   1edbc:	mov	r1, r2
   1edc0:	ldr	r0, [sp, #20]
   1edc4:	bl	1541c <__assert_fail@plt+0x4144>
   1edc8:	subs	fp, r0, #0
   1edcc:	moveq	r3, #12
   1edd0:	streq	r3, [sl]
   1edd4:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1edd8:	ldr	r3, [sp, #20]
   1eddc:	ldr	r3, [r3, #92]	; 0x5c
   1ede0:	cmp	r3, #1
   1ede4:	movgt	r6, #0
   1ede8:	movgt	r5, #16
   1edec:	ble	1f7fc <__assert_fail@plt+0xe524>
   1edf0:	ldr	r3, [r9, #40]	; 0x28
   1edf4:	ldr	r2, [r9, #56]	; 0x38
   1edf8:	cmp	r2, r3
   1edfc:	ble	1f7fc <__assert_fail@plt+0xe524>
   1ee00:	ldr	r2, [r9, #28]
   1ee04:	cmp	r3, r2
   1ee08:	beq	1f7fc <__assert_fail@plt+0xe524>
   1ee0c:	ldr	r2, [r9, #8]
   1ee10:	ldr	r3, [r2, r3, lsl #2]
   1ee14:	cmn	r3, #1
   1ee18:	bne	1f7fc <__assert_fail@plt+0xe524>
   1ee1c:	ldr	r2, [sp, #24]
   1ee20:	mov	r1, r9
   1ee24:	mov	r0, r8
   1ee28:	bl	16f18 <__assert_fail@plt+0x5c40>
   1ee2c:	mov	r3, r8
   1ee30:	mov	r2, r6
   1ee34:	mov	r1, r6
   1ee38:	ldr	r7, [sp, #20]
   1ee3c:	mov	r0, r7
   1ee40:	bl	1541c <__assert_fail@plt+0x4144>
   1ee44:	mov	r4, r0
   1ee48:	mov	r3, r5
   1ee4c:	mov	r2, r0
   1ee50:	mov	r1, fp
   1ee54:	mov	r0, r7
   1ee58:	bl	15590 <__assert_fail@plt+0x42b8>
   1ee5c:	mov	fp, r0
   1ee60:	cmp	r0, #0
   1ee64:	cmpne	r4, #0
   1ee68:	bne	1edf0 <__assert_fail@plt+0xdb18>
   1ee6c:	mov	r3, #12
   1ee70:	str	r3, [sl]
   1ee74:	mov	fp, #0
   1ee78:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1ee7c:	ldr	r5, [r1, #24]
   1ee80:	add	r3, r5, #1
   1ee84:	str	r3, [r1, #24]
   1ee88:	ldr	r6, [sp, #24]
   1ee8c:	orr	r2, r6, #8388608	; 0x800000
   1ee90:	mov	r1, r0
   1ee94:	mov	r0, r8
   1ee98:	bl	16f18 <__assert_fail@plt+0x5c40>
   1ee9c:	ldrb	r3, [r8, #4]
   1eea0:	cmp	r3, #9
   1eea4:	beq	1ef0c <__assert_fail@plt+0xdc34>
   1eea8:	str	sl, [sp, #4]
   1eeac:	ldr	r3, [sp, #192]	; 0xc0
   1eeb0:	add	r3, r3, #1
   1eeb4:	str	r3, [sp]
   1eeb8:	mov	r3, r6
   1eebc:	mov	r2, r8
   1eec0:	mov	r1, r4
   1eec4:	mov	r0, r9
   1eec8:	bl	201f8 <__assert_fail@plt+0xef20>
   1eecc:	ldr	r3, [sl]
   1eed0:	cmp	r3, #0
   1eed4:	beq	1eee0 <__assert_fail@plt+0xdc08>
   1eed8:	mov	fp, #0
   1eedc:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1eee0:	ldrb	r3, [r8, #4]
   1eee4:	cmp	r3, #9
   1eee8:	beq	1ef10 <__assert_fail@plt+0xdc38>
   1eeec:	cmp	r0, #0
   1eef0:	beq	1ef00 <__assert_fail@plt+0xdc28>
   1eef4:	mov	r2, #0
   1eef8:	ldr	r1, [pc, #3880]	; 1fe28 <__assert_fail@plt+0xeb50>
   1eefc:	bl	1522c <__assert_fail@plt+0x3f54>
   1ef00:	mov	r3, #8
   1ef04:	str	r3, [sl]
   1ef08:	b	1eed8 <__assert_fail@plt+0xdc00>
   1ef0c:	mov	r0, #0
   1ef10:	cmp	r5, #8
   1ef14:	bhi	1ef2c <__assert_fail@plt+0xdc54>
   1ef18:	ldr	r1, [sp, #20]
   1ef1c:	ldr	r3, [r1, #84]	; 0x54
   1ef20:	mov	r2, #1
   1ef24:	orr	r3, r3, r2, lsl r5
   1ef28:	str	r3, [r1, #84]	; 0x54
   1ef2c:	mov	r3, #17
   1ef30:	mov	r2, #0
   1ef34:	mov	r1, r0
   1ef38:	ldr	r0, [sp, #20]
   1ef3c:	bl	15590 <__assert_fail@plt+0x42b8>
   1ef40:	subs	fp, r0, #0
   1ef44:	moveq	r3, #12
   1ef48:	streq	r3, [sl]
   1ef4c:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1ef50:	str	r5, [fp, #20]
   1ef54:	b	1f7fc <__assert_fail@plt+0xe524>
   1ef58:	mov	r3, #0
   1ef5c:	str	r3, [sp, #60]	; 0x3c
   1ef60:	mov	r1, #1
   1ef64:	mov	r0, #32
   1ef68:	bl	22cec <__assert_fail@plt+0x11a14>
   1ef6c:	mov	r5, r0
   1ef70:	mov	r1, #1
   1ef74:	mov	r0, #40	; 0x28
   1ef78:	bl	22cec <__assert_fail@plt+0x11a14>
   1ef7c:	mov	r7, r0
   1ef80:	cmp	r0, #0
   1ef84:	cmpne	r5, #0
   1ef88:	moveq	r3, #1
   1ef8c:	movne	r3, #0
   1ef90:	str	r3, [sp, #40]	; 0x28
   1ef94:	beq	1f004 <__assert_fail@plt+0xdd2c>
   1ef98:	ldr	r2, [sp, #24]
   1ef9c:	mov	r1, r9
   1efa0:	mov	r0, r8
   1efa4:	bl	149e4 <__assert_fail@plt+0x370c>
   1efa8:	str	r0, [sp, #28]
   1efac:	ldrb	r3, [r8, #4]
   1efb0:	cmp	r3, #2
   1efb4:	streq	r3, [sl]
   1efb8:	beq	1f14c <__assert_fail@plt+0xde74>
   1efbc:	cmp	r3, #25
   1efc0:	beq	1f020 <__assert_fail@plt+0xdd48>
   1efc4:	ldr	r3, [sp, #40]	; 0x28
   1efc8:	str	r3, [sp, #44]	; 0x2c
   1efcc:	ldrb	r3, [r8, #4]
   1efd0:	cmp	r3, #21
   1efd4:	moveq	r3, #1
   1efd8:	strbeq	r3, [r8, #4]
   1efdc:	mov	fp, #0
   1efe0:	mov	r3, #1
   1efe4:	str	fp, [sp, #36]	; 0x24
   1efe8:	ldr	r2, [sp, #24]
   1efec:	lsr	r2, r2, #16
   1eff0:	and	r2, r2, r3
   1eff4:	str	r2, [sp, #52]	; 0x34
   1eff8:	str	sl, [sp, #196]	; 0xc4
   1effc:	ldr	sl, [sp, #20]
   1f000:	b	1f3fc <__assert_fail@plt+0xe124>
   1f004:	mov	r0, r5
   1f008:	bl	22f00 <__assert_fail@plt+0x11c28>
   1f00c:	mov	r0, r7
   1f010:	bl	22f00 <__assert_fail@plt+0x11c28>
   1f014:	mov	r3, #12
   1f018:	str	r3, [sl]
   1f01c:	b	1f15c <__assert_fail@plt+0xde84>
   1f020:	ldrb	r3, [r7, #16]
   1f024:	orr	r3, r3, #1
   1f028:	strb	r3, [r7, #16]
   1f02c:	ldr	r3, [sp, #24]
   1f030:	tst	r3, #256	; 0x100
   1f034:	ldrne	r3, [r5]
   1f038:	orrne	r3, r3, #1024	; 0x400
   1f03c:	strne	r3, [r5]
   1f040:	ldr	r3, [r9, #40]	; 0x28
   1f044:	ldr	r2, [sp, #28]
   1f048:	add	r3, r3, r2
   1f04c:	str	r3, [r9, #40]	; 0x28
   1f050:	ldr	r2, [sp, #24]
   1f054:	mov	r1, r9
   1f058:	mov	r0, r8
   1f05c:	bl	149e4 <__assert_fail@plt+0x370c>
   1f060:	str	r0, [sp, #28]
   1f064:	ldrb	r3, [r8, #4]
   1f068:	cmp	r3, #2
   1f06c:	streq	r3, [sl]
   1f070:	beq	1f14c <__assert_fail@plt+0xde74>
   1f074:	mov	r3, #1
   1f078:	str	r3, [sp, #44]	; 0x2c
   1f07c:	b	1efcc <__assert_fail@plt+0xdcf4>
   1f080:	ldr	sl, [sp, #196]	; 0xc4
   1f084:	str	r0, [sl]
   1f088:	b	1f14c <__assert_fail@plt+0xde74>
   1f08c:	ldr	sl, [sp, #196]	; 0xc4
   1f090:	mov	r3, #7
   1f094:	str	r3, [sl]
   1f098:	b	1f14c <__assert_fail@plt+0xde74>
   1f09c:	ldr	r3, [r9, #40]	; 0x28
   1f0a0:	ldr	r2, [sp, #28]
   1f0a4:	add	r3, r3, r2
   1f0a8:	str	r3, [r9, #40]	; 0x28
   1f0ac:	ldr	r2, [sp, #24]
   1f0b0:	mov	r1, r9
   1f0b4:	add	r0, sp, #80	; 0x50
   1f0b8:	bl	149e4 <__assert_fail@plt+0x370c>
   1f0bc:	mov	r3, r0
   1f0c0:	ldrb	r2, [sp, #84]	; 0x54
   1f0c4:	cmp	r2, #2
   1f0c8:	beq	1f170 <__assert_fail@plt+0xde98>
   1f0cc:	cmp	r2, #21
   1f0d0:	beq	1f180 <__assert_fail@plt+0xdea8>
   1f0d4:	add	r2, sp, #120	; 0x78
   1f0d8:	str	r2, [sp, #76]	; 0x4c
   1f0dc:	mov	r2, #3
   1f0e0:	str	r2, [sp, #72]	; 0x48
   1f0e4:	mov	r2, #1
   1f0e8:	str	r2, [sp, #8]
   1f0ec:	ldr	r2, [sp, #24]
   1f0f0:	str	r2, [sp, #4]
   1f0f4:	str	sl, [sp]
   1f0f8:	add	r2, sp, #80	; 0x50
   1f0fc:	mov	r1, r9
   1f100:	add	r0, sp, #72	; 0x48
   1f104:	bl	14fa4 <__assert_fail@plt+0x3ccc>
   1f108:	cmp	r0, #0
   1f10c:	bne	1ff9c <__assert_fail@plt+0xecc4>
   1f110:	ldr	r2, [sp, #24]
   1f114:	mov	r1, r9
   1f118:	mov	r0, r8
   1f11c:	bl	149e4 <__assert_fail@plt+0x370c>
   1f120:	str	r0, [sp, #28]
   1f124:	ldr	r6, [sp, #64]	; 0x40
   1f128:	sub	r3, r6, #2
   1f12c:	bics	r3, r3, #2
   1f130:	beq	1f3b8 <__assert_fail@plt+0xe0e0>
   1f134:	ldr	r4, [sp, #72]	; 0x48
   1f138:	cmp	r4, #2
   1f13c:	bne	1f19c <__assert_fail@plt+0xdec4>
   1f140:	ldr	sl, [sp, #196]	; 0xc4
   1f144:	mov	r3, #11
   1f148:	str	r3, [sl]
   1f14c:	mov	r0, r5
   1f150:	bl	22f00 <__assert_fail@plt+0x11c28>
   1f154:	mov	r0, r7
   1f158:	bl	16fd8 <__assert_fail@plt+0x5d00>
   1f15c:	ldr	r3, [sl]
   1f160:	cmp	r3, #0
   1f164:	bne	1ff94 <__assert_fail@plt+0xecbc>
   1f168:	mov	fp, #0
   1f16c:	b	1f7fc <__assert_fail@plt+0xe524>
   1f170:	ldr	sl, [sp, #196]	; 0xc4
   1f174:	mov	r3, #7
   1f178:	str	r3, [sl]
   1f17c:	b	1f14c <__assert_fail@plt+0xde74>
   1f180:	ldr	r3, [r9, #40]	; 0x28
   1f184:	ldr	r2, [sp, #28]
   1f188:	sub	r3, r3, r2
   1f18c:	str	r3, [r9, #40]	; 0x28
   1f190:	mov	r3, #1
   1f194:	strb	r3, [r8, #4]
   1f198:	b	1f470 <__assert_fail@plt+0xe198>
   1f19c:	cmp	r4, #4
   1f1a0:	beq	1ffa8 <__assert_fail@plt+0xecd0>
   1f1a4:	cmp	r6, #3
   1f1a8:	beq	1f1d4 <__assert_fail@plt+0xdefc>
   1f1ac:	cmp	r4, #3
   1f1b0:	beq	20080 <__assert_fail@plt+0xeda8>
   1f1b4:	cmp	r6, #0
   1f1b8:	beq	1f1f0 <__assert_fail@plt+0xdf18>
   1f1bc:	cmp	r6, #3
   1f1c0:	movne	r0, #0
   1f1c4:	bne	1f1f4 <__assert_fail@plt+0xdf1c>
   1f1c8:	ldr	r3, [sp, #68]	; 0x44
   1f1cc:	ldrb	r0, [r3]
   1f1d0:	b	1f1f4 <__assert_fail@plt+0xdf1c>
   1f1d4:	ldr	r0, [sp, #68]	; 0x44
   1f1d8:	bl	111b8 <strlen@plt>
   1f1dc:	cmp	r0, #1
   1f1e0:	bls	20078 <__assert_fail@plt+0xeda0>
   1f1e4:	ldr	sl, [sp, #196]	; 0xc4
   1f1e8:	mov	r3, #3
   1f1ec:	b	1f3c0 <__assert_fail@plt+0xe0e8>
   1f1f0:	ldrb	r0, [sp, #68]	; 0x44
   1f1f4:	cmp	r4, #0
   1f1f8:	bne	1f2e8 <__assert_fail@plt+0xe010>
   1f1fc:	ldrb	r3, [sp, #76]	; 0x4c
   1f200:	str	r3, [sp, #32]
   1f204:	cmp	r6, #0
   1f208:	cmpne	r6, #3
   1f20c:	ldrne	r6, [sp, #68]	; 0x44
   1f210:	bne	1f228 <__assert_fail@plt+0xdf50>
   1f214:	ldr	r3, [sl, #92]	; 0x5c
   1f218:	cmp	r3, #1
   1f21c:	ble	1f300 <__assert_fail@plt+0xe028>
   1f220:	bl	11200 <btowc@plt>
   1f224:	mov	r6, r0
   1f228:	ldr	r3, [sp, #72]	; 0x48
   1f22c:	cmp	r3, #3
   1f230:	cmpne	r3, #0
   1f234:	bne	1f318 <__assert_fail@plt+0xe040>
   1f238:	ldr	r3, [sl, #92]	; 0x5c
   1f23c:	cmp	r3, #1
   1f240:	ble	1f310 <__assert_fail@plt+0xe038>
   1f244:	ldr	r0, [sp, #32]
   1f248:	bl	11200 <btowc@plt>
   1f24c:	mov	r4, r0
   1f250:	cmn	r6, #1
   1f254:	cmnne	r4, #1
   1f258:	beq	1ffb4 <__assert_fail@plt+0xecdc>
   1f25c:	ldr	r3, [sp, #52]	; 0x34
   1f260:	cmp	r4, r6
   1f264:	movcs	r3, #0
   1f268:	andcc	r3, r3, #1
   1f26c:	cmp	r3, #0
   1f270:	bne	1ffc0 <__assert_fail@plt+0xece8>
   1f274:	ldr	r3, [sl, #92]	; 0x5c
   1f278:	cmp	r3, #1
   1f27c:	ble	1f350 <__assert_fail@plt+0xe078>
   1f280:	ldr	r3, [r7, #32]
   1f284:	cmp	r3, fp
   1f288:	bne	1f330 <__assert_fail@plt+0xe058>
   1f28c:	lsl	fp, fp, #1
   1f290:	add	fp, fp, #1
   1f294:	lsl	r3, fp, #2
   1f298:	str	r3, [sp, #48]	; 0x30
   1f29c:	mov	r1, r3
   1f2a0:	ldr	r0, [r7, #4]
   1f2a4:	bl	22d6c <__assert_fail@plt+0x11a94>
   1f2a8:	str	r0, [sp, #32]
   1f2ac:	ldr	r1, [sp, #48]	; 0x30
   1f2b0:	ldr	r0, [r7, #8]
   1f2b4:	bl	22d6c <__assert_fail@plt+0x11a94>
   1f2b8:	str	r0, [sp, #48]	; 0x30
   1f2bc:	ldr	r3, [sp, #32]
   1f2c0:	cmp	r0, #0
   1f2c4:	cmpne	r3, #0
   1f2c8:	bne	1f320 <__assert_fail@plt+0xe048>
   1f2cc:	ldr	sl, [sp, #196]	; 0xc4
   1f2d0:	mov	r0, r3
   1f2d4:	bl	22f00 <__assert_fail@plt+0x11c28>
   1f2d8:	ldr	r0, [sp, #48]	; 0x30
   1f2dc:	bl	22f00 <__assert_fail@plt+0x11c28>
   1f2e0:	mov	r3, #12
   1f2e4:	b	1f148 <__assert_fail@plt+0xde70>
   1f2e8:	cmp	r4, #3
   1f2ec:	ldreq	r3, [sp, #76]	; 0x4c
   1f2f0:	ldrbeq	r3, [r3]
   1f2f4:	movne	r3, #0
   1f2f8:	str	r3, [sp, #32]
   1f2fc:	b	1f204 <__assert_fail@plt+0xdf2c>
   1f300:	uxtb	r6, r0
   1f304:	cmp	r4, #3
   1f308:	cmpne	r4, #0
   1f30c:	bne	1f318 <__assert_fail@plt+0xe040>
   1f310:	ldrb	r4, [sp, #32]
   1f314:	b	1f250 <__assert_fail@plt+0xdf78>
   1f318:	ldr	r4, [sp, #76]	; 0x4c
   1f31c:	b	1f250 <__assert_fail@plt+0xdf78>
   1f320:	ldr	r3, [sp, #32]
   1f324:	str	r3, [r7, #4]
   1f328:	ldr	r3, [sp, #48]	; 0x30
   1f32c:	str	r3, [r7, #8]
   1f330:	ldr	r2, [r7, #32]
   1f334:	ldr	r3, [r7, #4]
   1f338:	str	r6, [r3, r2, lsl #2]
   1f33c:	ldr	r2, [r7, #8]
   1f340:	ldr	r3, [r7, #32]
   1f344:	add	r1, r3, #1
   1f348:	str	r1, [r7, #32]
   1f34c:	str	r4, [r2, r3, lsl #2]
   1f350:	mov	r1, #0
   1f354:	mov	ip, #1
   1f358:	b	1f368 <__assert_fail@plt+0xe090>
   1f35c:	add	r1, r1, #1
   1f360:	cmp	r1, #256	; 0x100
   1f364:	beq	1ffcc <__assert_fail@plt+0xecf4>
   1f368:	cmp	r1, r6
   1f36c:	movcc	r3, #0
   1f370:	movcs	r3, #1
   1f374:	cmp	r1, r4
   1f378:	movhi	r3, #0
   1f37c:	cmp	r3, #0
   1f380:	beq	1f35c <__assert_fail@plt+0xe084>
   1f384:	add	r3, r1, #31
   1f388:	cmp	r1, #0
   1f38c:	movge	r3, r1
   1f390:	asr	r3, r3, #5
   1f394:	asr	r2, r1, #31
   1f398:	lsr	r0, r2, #27
   1f39c:	add	r2, r1, r0
   1f3a0:	and	r2, r2, #31
   1f3a4:	sub	r2, r2, r0
   1f3a8:	ldr	r0, [r5, r3, lsl #2]
   1f3ac:	orr	r2, r0, ip, lsl r2
   1f3b0:	str	r2, [r5, r3, lsl #2]
   1f3b4:	b	1f35c <__assert_fail@plt+0xe084>
   1f3b8:	ldr	sl, [sp, #196]	; 0xc4
   1f3bc:	mov	r3, #11
   1f3c0:	str	r3, [sl]
   1f3c4:	b	1f14c <__assert_fail@plt+0xde74>
   1f3c8:	ldrb	r3, [sp, #68]	; 0x44
   1f3cc:	asr	r1, r3, #5
   1f3d0:	and	r3, r3, #31
   1f3d4:	ldr	r2, [r5, r1, lsl #2]
   1f3d8:	mov	r0, #1
   1f3dc:	orr	r3, r2, r0, lsl r3
   1f3e0:	str	r3, [r5, r1, lsl #2]
   1f3e4:	ldrb	r3, [r8, #4]
   1f3e8:	cmp	r3, #2
   1f3ec:	beq	1f59c <__assert_fail@plt+0xe2c4>
   1f3f0:	cmp	r3, #21
   1f3f4:	beq	1f5ac <__assert_fail@plt+0xe2d4>
   1f3f8:	ldr	r3, [sp, #40]	; 0x28
   1f3fc:	add	r2, sp, #88	; 0x58
   1f400:	str	r2, [sp, #68]	; 0x44
   1f404:	mov	r2, #3
   1f408:	str	r2, [sp, #64]	; 0x40
   1f40c:	str	r3, [sp, #8]
   1f410:	ldr	r3, [sp, #24]
   1f414:	str	r3, [sp, #4]
   1f418:	str	sl, [sp]
   1f41c:	ldr	r3, [sp, #28]
   1f420:	mov	r2, r8
   1f424:	mov	r1, r9
   1f428:	add	r0, sp, #64	; 0x40
   1f42c:	bl	14fa4 <__assert_fail@plt+0x3ccc>
   1f430:	cmp	r0, #0
   1f434:	bne	1f080 <__assert_fail@plt+0xdda8>
   1f438:	ldr	r2, [sp, #24]
   1f43c:	mov	r1, r9
   1f440:	mov	r0, r8
   1f444:	bl	149e4 <__assert_fail@plt+0x370c>
   1f448:	str	r0, [sp, #28]
   1f44c:	ldr	r3, [sp, #64]	; 0x40
   1f450:	sub	r3, r3, #2
   1f454:	bics	r3, r3, #2
   1f458:	beq	1f470 <__assert_fail@plt+0xe198>
   1f45c:	ldrb	r3, [r8, #4]
   1f460:	cmp	r3, #2
   1f464:	beq	1f08c <__assert_fail@plt+0xddb4>
   1f468:	cmp	r3, #22
   1f46c:	beq	1f09c <__assert_fail@plt+0xddc4>
   1f470:	ldr	r3, [sp, #64]	; 0x40
   1f474:	cmp	r3, #4
   1f478:	ldrls	pc, [pc, r3, lsl #2]
   1f47c:	b	1f59c <__assert_fail@plt+0xe2c4>
   1f480:	andeq	pc, r1, r8, asr #7
   1f484:	muleq	r1, r4, r4
   1f488:	andeq	pc, r1, r8, ror #9
   1f48c:	andeq	pc, r1, r4, lsr #10
   1f490:	andeq	pc, r1, r0, ror #10
   1f494:	ldr	r3, [r7, #20]
   1f498:	ldr	r2, [sp, #36]	; 0x24
   1f49c:	cmp	r3, r2
   1f4a0:	beq	1f4c0 <__assert_fail@plt+0xe1e8>
   1f4a4:	ldr	r2, [r7]
   1f4a8:	ldr	r3, [r7, #20]
   1f4ac:	add	r1, r3, #1
   1f4b0:	str	r1, [r7, #20]
   1f4b4:	ldr	r1, [sp, #68]	; 0x44
   1f4b8:	str	r1, [r2, r3, lsl #2]
   1f4bc:	b	1f3e4 <__assert_fail@plt+0xe10c>
   1f4c0:	lsl	r3, r2, #1
   1f4c4:	add	r3, r3, #1
   1f4c8:	str	r3, [sp, #36]	; 0x24
   1f4cc:	lsl	r1, r3, #2
   1f4d0:	ldr	r0, [r7]
   1f4d4:	bl	22d6c <__assert_fail@plt+0x11a94>
   1f4d8:	cmp	r0, #0
   1f4dc:	beq	1f70c <__assert_fail@plt+0xe434>
   1f4e0:	str	r0, [r7]
   1f4e4:	b	1f4a4 <__assert_fail@plt+0xe1cc>
   1f4e8:	ldr	r4, [sp, #68]	; 0x44
   1f4ec:	mov	r0, r4
   1f4f0:	bl	111b8 <strlen@plt>
   1f4f4:	cmp	r0, #1
   1f4f8:	bne	1ffdc <__assert_fail@plt+0xed04>
   1f4fc:	ldrb	r3, [r4]
   1f500:	asr	r1, r3, #5
   1f504:	and	r3, r3, #31
   1f508:	ldr	r2, [r5, r1, lsl #2]
   1f50c:	orr	r3, r2, r0, lsl r3
   1f510:	str	r3, [r5, r1, lsl #2]
   1f514:	mov	r3, #0
   1f518:	ldr	r2, [sp, #196]	; 0xc4
   1f51c:	str	r3, [r2]
   1f520:	b	1f3e4 <__assert_fail@plt+0xe10c>
   1f524:	ldr	r4, [sp, #68]	; 0x44
   1f528:	mov	r0, r4
   1f52c:	bl	111b8 <strlen@plt>
   1f530:	cmp	r0, #1
   1f534:	bne	1ffec <__assert_fail@plt+0xed14>
   1f538:	ldrb	r3, [r4]
   1f53c:	asr	r1, r3, #5
   1f540:	and	r3, r3, #31
   1f544:	ldr	r2, [r5, r1, lsl #2]
   1f548:	orr	r3, r2, r0, lsl r3
   1f54c:	str	r3, [r5, r1, lsl #2]
   1f550:	mov	r3, #0
   1f554:	ldr	r2, [sp, #196]	; 0xc4
   1f558:	str	r3, [r2]
   1f55c:	b	1f3e4 <__assert_fail@plt+0xe10c>
   1f560:	ldr	r3, [sp, #24]
   1f564:	str	r3, [sp, #4]
   1f568:	ldr	r3, [sp, #68]	; 0x44
   1f56c:	str	r3, [sp]
   1f570:	add	r3, sp, #60	; 0x3c
   1f574:	mov	r2, r7
   1f578:	mov	r1, r5
   1f57c:	ldr	r0, [r9, #64]	; 0x40
   1f580:	bl	18b84 <__assert_fail@plt+0x78ac>
   1f584:	ldr	r3, [sp, #196]	; 0xc4
   1f588:	str	r0, [r3]
   1f58c:	cmp	r0, #0
   1f590:	beq	1f3e4 <__assert_fail@plt+0xe10c>
   1f594:	mov	sl, r3
   1f598:	b	1f14c <__assert_fail@plt+0xde74>
   1f59c:	ldr	sl, [sp, #196]	; 0xc4
   1f5a0:	mov	r3, #7
   1f5a4:	str	r3, [sl]
   1f5a8:	b	1f14c <__assert_fail@plt+0xde74>
   1f5ac:	ldr	sl, [sp, #196]	; 0xc4
   1f5b0:	ldr	r3, [r9, #40]	; 0x28
   1f5b4:	ldr	r2, [sp, #28]
   1f5b8:	add	r3, r3, r2
   1f5bc:	str	r3, [r9, #40]	; 0x28
   1f5c0:	ldr	r3, [sp, #44]	; 0x2c
   1f5c4:	cmp	r3, #0
   1f5c8:	beq	1f5e8 <__assert_fail@plt+0xe310>
   1f5cc:	sub	r3, r5, #4
   1f5d0:	add	r1, r5, #28
   1f5d4:	ldr	r2, [r3, #4]
   1f5d8:	mvn	r2, r2
   1f5dc:	str	r2, [r3, #4]!
   1f5e0:	cmp	r1, r3
   1f5e4:	bne	1f5d4 <__assert_fail@plt+0xe2fc>
   1f5e8:	ldr	r3, [sp, #20]
   1f5ec:	ldr	ip, [r3, #92]	; 0x5c
   1f5f0:	cmp	ip, #1
   1f5f4:	ble	1f620 <__assert_fail@plt+0xe348>
   1f5f8:	sub	r0, r5, #4
   1f5fc:	ldr	r1, [r3, #60]	; 0x3c
   1f600:	sub	r1, r1, #4
   1f604:	add	lr, r5, #28
   1f608:	ldr	r3, [r0, #4]
   1f60c:	ldr	r2, [r1, #4]!
   1f610:	and	r3, r3, r2
   1f614:	str	r3, [r0, #4]!
   1f618:	cmp	r0, lr
   1f61c:	bne	1f608 <__assert_fail@plt+0xe330>
   1f620:	ldr	r3, [r7, #20]
   1f624:	cmp	r3, #0
   1f628:	bne	1f670 <__assert_fail@plt+0xe398>
   1f62c:	ldr	r3, [r7, #24]
   1f630:	cmp	r3, #0
   1f634:	bne	1f670 <__assert_fail@plt+0xe398>
   1f638:	ldr	r3, [r7, #28]
   1f63c:	cmp	r3, #0
   1f640:	bne	1f670 <__assert_fail@plt+0xe398>
   1f644:	ldr	r3, [r7, #32]
   1f648:	cmp	r3, #0
   1f64c:	bne	1f670 <__assert_fail@plt+0xe398>
   1f650:	cmp	ip, #1
   1f654:	ble	1f6d8 <__assert_fail@plt+0xe400>
   1f658:	ldr	r3, [r7, #36]	; 0x24
   1f65c:	cmp	r3, #0
   1f660:	bne	1f670 <__assert_fail@plt+0xe398>
   1f664:	ldrb	r3, [r7, #16]
   1f668:	tst	r3, #1
   1f66c:	beq	1f6d8 <__assert_fail@plt+0xe400>
   1f670:	ldr	r0, [sp, #20]
   1f674:	ldrb	r3, [r0, #88]	; 0x58
   1f678:	orr	r3, r3, #2
   1f67c:	strb	r3, [r0, #88]	; 0x58
   1f680:	mov	r3, #6
   1f684:	strb	r3, [sp, #124]	; 0x7c
   1f688:	add	r3, sp, #152	; 0x98
   1f68c:	str	r7, [r3, #-32]!	; 0xffffffe0
   1f690:	mov	r2, #0
   1f694:	mov	r1, r2
   1f698:	bl	1541c <__assert_fail@plt+0x4144>
   1f69c:	subs	fp, r0, #0
   1f6a0:	beq	2003c <__assert_fail@plt+0xed64>
   1f6a4:	ldr	r3, [r5]
   1f6a8:	cmp	r3, #0
   1f6ac:	bne	1fffc <__assert_fail@plt+0xed24>
   1f6b0:	mov	r3, r5
   1f6b4:	add	r2, r5, #28
   1f6b8:	ldr	r1, [r3, #4]!
   1f6bc:	cmp	r1, #0
   1f6c0:	bne	1fffc <__assert_fail@plt+0xed24>
   1f6c4:	cmp	r3, r2
   1f6c8:	bne	1f6b8 <__assert_fail@plt+0xe3e0>
   1f6cc:	mov	r0, r5
   1f6d0:	bl	22f00 <__assert_fail@plt+0x11c28>
   1f6d4:	b	1f7fc <__assert_fail@plt+0xe524>
   1f6d8:	mov	r0, r7
   1f6dc:	bl	16fd8 <__assert_fail@plt+0x5d00>
   1f6e0:	mov	r3, #3
   1f6e4:	strb	r3, [sp, #124]	; 0x7c
   1f6e8:	add	r3, sp, #152	; 0x98
   1f6ec:	str	r5, [r3, #-32]!	; 0xffffffe0
   1f6f0:	mov	r2, #0
   1f6f4:	mov	r1, r2
   1f6f8:	ldr	r0, [sp, #20]
   1f6fc:	bl	1541c <__assert_fail@plt+0x4144>
   1f700:	subs	fp, r0, #0
   1f704:	bne	1f7fc <__assert_fail@plt+0xe524>
   1f708:	b	2003c <__assert_fail@plt+0xed64>
   1f70c:	ldr	sl, [sp, #196]	; 0xc4
   1f710:	b	2003c <__assert_fail@plt+0xed64>
   1f714:	ldr	r2, [r8]
   1f718:	mov	r3, #1
   1f71c:	lsl	r3, r3, r2
   1f720:	ldr	r2, [sp, #20]
   1f724:	ldr	r2, [r2, #84]	; 0x54
   1f728:	tst	r3, r2
   1f72c:	moveq	r3, #6
   1f730:	streq	r3, [sl]
   1f734:	moveq	fp, #0
   1f738:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1f73c:	ldr	r0, [sp, #20]
   1f740:	ldr	r2, [r0, #80]	; 0x50
   1f744:	orr	r3, r2, r3
   1f748:	str	r3, [r0, #80]	; 0x50
   1f74c:	mov	r3, r8
   1f750:	mov	r2, #0
   1f754:	mov	r1, r2
   1f758:	bl	1541c <__assert_fail@plt+0x4144>
   1f75c:	subs	fp, r0, #0
   1f760:	moveq	r3, #12
   1f764:	streq	r3, [sl]
   1f768:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1f76c:	ldr	r2, [sp, #20]
   1f770:	ldr	r3, [r2, #76]	; 0x4c
   1f774:	add	r3, r3, #1
   1f778:	str	r3, [r2, #76]	; 0x4c
   1f77c:	ldrb	r3, [r2, #88]	; 0x58
   1f780:	orr	r3, r3, #2
   1f784:	strb	r3, [r2, #88]	; 0x58
   1f788:	b	1f7fc <__assert_fail@plt+0xe524>
   1f78c:	ldr	r3, [sp, #24]
   1f790:	tst	r3, #16777216	; 0x1000000
   1f794:	movne	r3, #13
   1f798:	strne	r3, [sl]
   1f79c:	movne	fp, #0
   1f7a0:	bne	1fdc4 <__assert_fail@plt+0xeaec>
   1f7a4:	ldr	r3, [sp, #24]
   1f7a8:	tst	r3, #32
   1f7ac:	movne	r3, #13
   1f7b0:	strne	r3, [sl]
   1f7b4:	movne	fp, #0
   1f7b8:	bne	1fdc4 <__assert_fail@plt+0xeaec>
   1f7bc:	ldr	r3, [sp, #24]
   1f7c0:	tst	r3, #16
   1f7c4:	bne	1f810 <__assert_fail@plt+0xe538>
   1f7c8:	cmp	r2, #9
   1f7cc:	beq	1f84c <__assert_fail@plt+0xe574>
   1f7d0:	mov	r3, #1
   1f7d4:	strb	r3, [r8, #4]
   1f7d8:	mov	r3, r8
   1f7dc:	mov	r2, #0
   1f7e0:	mov	r1, r2
   1f7e4:	ldr	r0, [sp, #20]
   1f7e8:	bl	1541c <__assert_fail@plt+0x4144>
   1f7ec:	subs	fp, r0, #0
   1f7f0:	moveq	r3, #12
   1f7f4:	streq	r3, [sl]
   1f7f8:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1f7fc:	ldr	r2, [sp, #24]
   1f800:	mov	r1, r9
   1f804:	mov	r0, r8
   1f808:	bl	16f18 <__assert_fail@plt+0x5c40>
   1f80c:	b	1fe54 <__assert_fail@plt+0xeb7c>
   1f810:	mov	r5, r3
   1f814:	mov	r2, r3
   1f818:	mov	r1, r9
   1f81c:	mov	r0, r8
   1f820:	bl	16f18 <__assert_fail@plt+0x5c40>
   1f824:	str	sl, [sp, #4]
   1f828:	ldr	r3, [sp, #192]	; 0xc0
   1f82c:	str	r3, [sp]
   1f830:	mov	r3, r5
   1f834:	mov	r2, r8
   1f838:	mov	r1, r4
   1f83c:	mov	r0, r9
   1f840:	bl	1ecec <__assert_fail@plt+0xda14>
   1f844:	mov	fp, r0
   1f848:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1f84c:	ldr	r3, [sp, #24]
   1f850:	tst	r3, #131072	; 0x20000
   1f854:	moveq	r3, #16
   1f858:	streq	r3, [sl]
   1f85c:	moveq	fp, #0
   1f860:	bne	1f7d0 <__assert_fail@plt+0xe4f8>
   1f864:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1f868:	ldr	r2, [r8]
   1f86c:	ldr	r3, [pc, #1464]	; 1fe2c <__assert_fail@plt+0xeb54>
   1f870:	and	r3, r3, r2
   1f874:	cmp	r3, #0
   1f878:	beq	1f88c <__assert_fail@plt+0xe5b4>
   1f87c:	ldr	r3, [sp, #20]
   1f880:	ldrb	r3, [r3, #88]	; 0x58
   1f884:	tst	r3, #16
   1f888:	beq	1f940 <__assert_fail@plt+0xe668>
   1f88c:	ldr	r3, [r8]
   1f890:	sub	r2, r3, #256	; 0x100
   1f894:	bics	r2, r2, #256	; 0x100
   1f898:	bne	1fa28 <__assert_fail@plt+0xe750>
   1f89c:	cmp	r3, #256	; 0x100
   1f8a0:	beq	1f9fc <__assert_fail@plt+0xe724>
   1f8a4:	mov	r3, #5
   1f8a8:	str	r3, [r8]
   1f8ac:	mov	r3, r8
   1f8b0:	mov	r2, #0
   1f8b4:	mov	r1, r2
   1f8b8:	ldr	r0, [sp, #20]
   1f8bc:	bl	1541c <__assert_fail@plt+0x4144>
   1f8c0:	mov	r4, r0
   1f8c4:	mov	r3, #10
   1f8c8:	str	r3, [r8]
   1f8cc:	mov	r3, r8
   1f8d0:	mov	r2, #0
   1f8d4:	mov	r1, r2
   1f8d8:	ldr	r6, [sp, #20]
   1f8dc:	mov	r0, r6
   1f8e0:	bl	1541c <__assert_fail@plt+0x4144>
   1f8e4:	mov	r5, r0
   1f8e8:	mov	r3, #10
   1f8ec:	mov	r2, r0
   1f8f0:	mov	r1, r4
   1f8f4:	mov	r0, r6
   1f8f8:	bl	15590 <__assert_fail@plt+0x42b8>
   1f8fc:	cmp	r5, #0
   1f900:	cmpne	r4, #0
   1f904:	moveq	r4, #1
   1f908:	movne	r4, #0
   1f90c:	mov	fp, r0
   1f910:	cmp	r0, #0
   1f914:	orreq	r4, r4, #1
   1f918:	cmp	r4, #0
   1f91c:	movne	r3, #12
   1f920:	strne	r3, [sl]
   1f924:	movne	fp, #0
   1f928:	bne	1fdc4 <__assert_fail@plt+0xeaec>
   1f92c:	ldr	r2, [sp, #24]
   1f930:	mov	r1, r9
   1f934:	mov	r0, r8
   1f938:	bl	16f18 <__assert_fail@plt+0x5c40>
   1f93c:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1f940:	ldr	r1, [sp, #20]
   1f944:	ldrb	r3, [r1, #88]	; 0x58
   1f948:	orr	r3, r3, #16
   1f94c:	strb	r3, [r1, #88]	; 0x58
   1f950:	tst	r3, #8
   1f954:	bne	20048 <__assert_fail@plt+0xed70>
   1f958:	mov	r3, #0
   1f95c:	str	r3, [r1, #96]	; 0x60
   1f960:	ldr	r3, [pc, #1224]	; 1fe30 <__assert_fail@plt+0xeb58>
   1f964:	str	r3, [r1, #100]	; 0x64
   1f968:	mvn	r3, #2013265921	; 0x78000001
   1f96c:	str	r3, [r1, #104]	; 0x68
   1f970:	mvn	r3, #-134217727	; 0xf8000001
   1f974:	str	r3, [r1, #108]	; 0x6c
   1f978:	ldrb	r3, [r1, #88]	; 0x58
   1f97c:	tst	r3, #4
   1f980:	beq	2006c <__assert_fail@plt+0xed94>
   1f984:	add	r3, r1, #112	; 0x70
   1f988:	mov	r2, #0
   1f98c:	str	r2, [r1, #112]	; 0x70
   1f990:	str	r2, [r3, #4]
   1f994:	str	r2, [r3, #8]
   1f998:	str	r2, [r3, #12]
   1f99c:	b	1f88c <__assert_fail@plt+0xe5b4>
   1f9a0:	add	r4, r4, #32
   1f9a4:	add	r5, r5, #1
   1f9a8:	add	r7, r7, #64	; 0x40
   1f9ac:	add	lr, lr, #4
   1f9b0:	cmp	r5, #7
   1f9b4:	bgt	1f88c <__assert_fail@plt+0xe5b4>
   1f9b8:	mov	ip, r7
   1f9bc:	mov	r1, #0
   1f9c0:	ldr	r3, [r0]
   1f9c4:	ldrh	r3, [r3, ip]
   1f9c8:	lsr	r3, r3, #3
   1f9cc:	add	r2, r4, r1
   1f9d0:	cmp	r2, #95	; 0x5f
   1f9d4:	orreq	r3, r3, #1
   1f9d8:	tst	r3, #1
   1f9dc:	ldrne	r3, [lr]
   1f9e0:	orrne	r3, r3, r6, lsl r1
   1f9e4:	strne	r3, [lr]
   1f9e8:	add	r1, r1, #1
   1f9ec:	add	ip, ip, #2
   1f9f0:	cmp	r1, #32
   1f9f4:	bne	1f9c0 <__assert_fail@plt+0xe6e8>
   1f9f8:	b	1f9a0 <__assert_fail@plt+0xe6c8>
   1f9fc:	mov	r3, #6
   1fa00:	str	r3, [r8]
   1fa04:	mov	r3, r8
   1fa08:	mov	r2, #0
   1fa0c:	mov	r1, r2
   1fa10:	ldr	r0, [sp, #20]
   1fa14:	bl	1541c <__assert_fail@plt+0x4144>
   1fa18:	mov	r4, r0
   1fa1c:	mov	r3, #9
   1fa20:	str	r3, [r8]
   1fa24:	b	1f8cc <__assert_fail@plt+0xe5f4>
   1fa28:	mov	r3, r8
   1fa2c:	mov	r2, #0
   1fa30:	mov	r1, r2
   1fa34:	ldr	r0, [sp, #20]
   1fa38:	bl	1541c <__assert_fail@plt+0x4144>
   1fa3c:	subs	fp, r0, #0
   1fa40:	moveq	r3, #12
   1fa44:	streq	r3, [sl]
   1fa48:	bne	1f92c <__assert_fail@plt+0xe654>
   1fa4c:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1fa50:	mov	r3, r8
   1fa54:	mov	r2, #0
   1fa58:	mov	r1, r2
   1fa5c:	ldr	r0, [sp, #20]
   1fa60:	bl	1541c <__assert_fail@plt+0x4144>
   1fa64:	subs	fp, r0, #0
   1fa68:	moveq	r3, #12
   1fa6c:	streq	r3, [sl]
   1fa70:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1fa74:	ldr	r2, [sp, #20]
   1fa78:	ldr	r3, [r2, #92]	; 0x5c
   1fa7c:	cmp	r3, #1
   1fa80:	ldrbgt	r3, [r2, #88]	; 0x58
   1fa84:	orrgt	r3, r3, #2
   1fa88:	strbgt	r3, [r2, #88]	; 0x58
   1fa8c:	b	1f7fc <__assert_fail@plt+0xe524>
   1fa90:	str	sl, [sp, #4]
   1fa94:	cmp	r2, #33	; 0x21
   1fa98:	movne	r2, #0
   1fa9c:	moveq	r2, #1
   1faa0:	str	r2, [sp]
   1faa4:	ldr	r3, [pc, #904]	; 1fe34 <__assert_fail@plt+0xeb5c>
   1faa8:	ldr	r2, [pc, #904]	; 1fe38 <__assert_fail@plt+0xeb60>
   1faac:	ldr	r1, [r0, #64]	; 0x40
   1fab0:	ldr	r0, [sp, #20]
   1fab4:	bl	196b8 <__assert_fail@plt+0x83e0>
   1fab8:	ldr	r2, [sl]
   1fabc:	mov	fp, r0
   1fac0:	adds	r3, r2, #0
   1fac4:	movne	r3, #1
   1fac8:	cmp	r0, #0
   1facc:	movne	r3, #0
   1fad0:	cmp	r3, #0
   1fad4:	beq	1f7fc <__assert_fail@plt+0xe524>
   1fad8:	mov	fp, #0
   1fadc:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1fae0:	str	sl, [sp, #4]
   1fae4:	cmp	r2, #35	; 0x23
   1fae8:	movne	r2, #0
   1faec:	moveq	r2, #1
   1faf0:	str	r2, [sp]
   1faf4:	ldr	r3, [pc, #832]	; 1fe3c <__assert_fail@plt+0xeb64>
   1faf8:	ldr	r2, [pc, #832]	; 1fe40 <__assert_fail@plt+0xeb68>
   1fafc:	ldr	r1, [r0, #64]	; 0x40
   1fb00:	ldr	r0, [sp, #20]
   1fb04:	bl	196b8 <__assert_fail@plt+0x83e0>
   1fb08:	ldr	r2, [sl]
   1fb0c:	mov	fp, r0
   1fb10:	adds	r3, r2, #0
   1fb14:	movne	r3, #1
   1fb18:	cmp	r0, #0
   1fb1c:	movne	r3, #0
   1fb20:	cmp	r3, #0
   1fb24:	beq	1f7fc <__assert_fail@plt+0xe524>
   1fb28:	mov	fp, #0
   1fb2c:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1fb30:	mov	r3, #5
   1fb34:	str	r3, [sl]
   1fb38:	mov	fp, #0
   1fb3c:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1fb40:	ldr	r2, [sp, #24]
   1fb44:	mov	r1, r8
   1fb48:	mov	r0, r9
   1fb4c:	bl	16f34 <__assert_fail@plt+0x5c5c>
   1fb50:	mov	r7, r0
   1fb54:	cmn	r0, #1
   1fb58:	beq	1fba4 <__assert_fail@plt+0xe8cc>
   1fb5c:	cmn	r0, #2
   1fb60:	beq	1fb7c <__assert_fail@plt+0xe8a4>
   1fb64:	ldrb	r3, [r8, #4]
   1fb68:	cmp	r3, #24
   1fb6c:	beq	1fc80 <__assert_fail@plt+0xe9a8>
   1fb70:	cmp	r3, #1
   1fb74:	moveq	r5, r0
   1fb78:	beq	1fbc0 <__assert_fail@plt+0xe8e8>
   1fb7c:	ldr	r3, [sp, #24]
   1fb80:	tst	r3, #2097152	; 0x200000
   1fb84:	bne	1fbd8 <__assert_fail@plt+0xe900>
   1fb88:	ldrb	r3, [r8, #4]
   1fb8c:	cmp	r3, #2
   1fb90:	bne	1fc70 <__assert_fail@plt+0xe998>
   1fb94:	mov	r3, #9
   1fb98:	str	r3, [sl]
   1fb9c:	mov	r6, #0
   1fba0:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fba4:	ldrb	r3, [r8, #4]
   1fba8:	cmp	r3, #1
   1fbac:	bne	1fbf8 <__assert_fail@plt+0xe920>
   1fbb0:	ldrb	r3, [r8]
   1fbb4:	cmp	r3, #44	; 0x2c
   1fbb8:	moveq	r5, #0
   1fbbc:	bne	1fbf8 <__assert_fail@plt+0xe920>
   1fbc0:	ldrb	r3, [r8]
   1fbc4:	cmp	r3, #44	; 0x2c
   1fbc8:	beq	1fc08 <__assert_fail@plt+0xe930>
   1fbcc:	ldr	r3, [sp, #24]
   1fbd0:	tst	r3, #2097152	; 0x200000
   1fbd4:	beq	1fc70 <__assert_fail@plt+0xe998>
   1fbd8:	str	r4, [r9, #40]	; 0x28
   1fbdc:	add	r3, sp, #120	; 0x78
   1fbe0:	ldm	r3, {r0, r1}
   1fbe4:	stm	r8, {r0, r1}
   1fbe8:	mov	r3, #1
   1fbec:	strb	r3, [r8, #4]
   1fbf0:	mov	r6, fp
   1fbf4:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fbf8:	mov	r3, #10
   1fbfc:	str	r3, [sl]
   1fc00:	mov	r6, #0
   1fc04:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fc08:	ldr	r2, [sp, #24]
   1fc0c:	mov	r1, r8
   1fc10:	mov	r0, r9
   1fc14:	bl	16f34 <__assert_fail@plt+0x5c5c>
   1fc18:	mov	r7, r0
   1fc1c:	cmn	r5, #2
   1fc20:	cmnne	r0, #2
   1fc24:	beq	1fb7c <__assert_fail@plt+0xe8a4>
   1fc28:	cmn	r0, #1
   1fc2c:	cmpne	r5, r0
   1fc30:	bgt	1fc88 <__assert_fail@plt+0xe9b0>
   1fc34:	ldrb	r3, [r8, #4]
   1fc38:	cmp	r3, #24
   1fc3c:	bne	1fc88 <__assert_fail@plt+0xe9b0>
   1fc40:	cmn	r7, #1
   1fc44:	beq	1fc98 <__assert_fail@plt+0xe9c0>
   1fc48:	ldr	r3, [pc, #500]	; 1fe44 <__assert_fail@plt+0xeb6c>
   1fc4c:	cmp	r7, r3
   1fc50:	movle	r3, #0
   1fc54:	movgt	r3, #1
   1fc58:	cmp	r3, #0
   1fc5c:	movne	r3, #15
   1fc60:	strne	r3, [sl]
   1fc64:	movne	r6, #0
   1fc68:	beq	1fcb0 <__assert_fail@plt+0xe9d8>
   1fc6c:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fc70:	mov	r3, #10
   1fc74:	str	r3, [sl]
   1fc78:	mov	r6, #0
   1fc7c:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fc80:	mov	r5, r0
   1fc84:	b	1fc34 <__assert_fail@plt+0xe95c>
   1fc88:	mov	r3, #10
   1fc8c:	str	r3, [sl]
   1fc90:	mov	r6, #0
   1fc94:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fc98:	ldr	r3, [pc, #420]	; 1fe44 <__assert_fail@plt+0xeb6c>
   1fc9c:	cmp	r5, r3
   1fca0:	movle	r3, #0
   1fca4:	movgt	r3, #1
   1fca8:	b	1fc58 <__assert_fail@plt+0xe980>
   1fcac:	mov	r7, #1
   1fcb0:	ldr	r2, [sp, #24]
   1fcb4:	mov	r1, r9
   1fcb8:	mov	r0, r8
   1fcbc:	bl	16f18 <__assert_fail@plt+0x5c40>
   1fcc0:	cmp	fp, #0
   1fcc4:	beq	1fdf0 <__assert_fail@plt+0xeb18>
   1fcc8:	orrs	r3, r5, r7
   1fccc:	bne	1feb8 <__assert_fail@plt+0xebe0>
   1fcd0:	mov	r2, #0
   1fcd4:	ldr	r1, [pc, #332]	; 1fe28 <__assert_fail@plt+0xeb50>
   1fcd8:	mov	r0, fp
   1fcdc:	bl	1522c <__assert_fail@plt+0x3f54>
   1fce0:	mov	r6, #0
   1fce4:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fce8:	cmp	r5, #1
   1fcec:	ble	1fdd0 <__assert_fail@plt+0xeaf8>
   1fcf0:	str	fp, [sp, #28]
   1fcf4:	mov	r4, fp
   1fcf8:	mov	r6, #2
   1fcfc:	ldr	r1, [sp, #20]
   1fd00:	mov	r0, r4
   1fd04:	bl	154dc <__assert_fail@plt+0x4204>
   1fd08:	mov	r4, r0
   1fd0c:	mov	r3, #16
   1fd10:	mov	r2, r0
   1fd14:	ldr	r1, [sp, #28]
   1fd18:	ldr	r0, [sp, #20]
   1fd1c:	bl	15590 <__assert_fail@plt+0x42b8>
   1fd20:	str	r0, [sp, #28]
   1fd24:	cmp	r0, #0
   1fd28:	cmpne	r4, #0
   1fd2c:	beq	1fd58 <__assert_fail@plt+0xea80>
   1fd30:	add	r6, r6, #1
   1fd34:	cmp	r5, r6
   1fd38:	bge	1fcfc <__assert_fail@plt+0xea24>
   1fd3c:	cmp	r5, r7
   1fd40:	beq	1fdf8 <__assert_fail@plt+0xeb20>
   1fd44:	ldr	r1, [sp, #20]
   1fd48:	mov	r0, r4
   1fd4c:	bl	154dc <__assert_fail@plt+0x4204>
   1fd50:	subs	r4, r0, #0
   1fd54:	bne	1fecc <__assert_fail@plt+0xebf4>
   1fd58:	mov	r3, #12
   1fd5c:	str	r3, [sl]
   1fd60:	mov	r6, #0
   1fd64:	ldr	r2, [sl]
   1fd68:	adds	r3, r2, #0
   1fd6c:	movne	r3, #1
   1fd70:	cmp	r6, #0
   1fd74:	movne	r3, #0
   1fd78:	cmp	r3, #0
   1fd7c:	bne	1fe08 <__assert_fail@plt+0xeb30>
   1fd80:	ldr	r3, [sp, #24]
   1fd84:	tst	r3, #16777216	; 0x1000000
   1fd88:	beq	1fe50 <__assert_fail@plt+0xeb78>
   1fd8c:	ldrb	r3, [r8, #4]
   1fd90:	mov	fp, r6
   1fd94:	cmp	r3, #23
   1fd98:	cmpne	r3, #11
   1fd9c:	bne	1fe54 <__assert_fail@plt+0xeb7c>
   1fda0:	cmp	r6, #0
   1fda4:	beq	1fdb8 <__assert_fail@plt+0xeae0>
   1fda8:	mov	r2, #0
   1fdac:	ldr	r1, [pc, #116]	; 1fe28 <__assert_fail@plt+0xeb50>
   1fdb0:	mov	r0, r6
   1fdb4:	bl	1522c <__assert_fail@plt+0x3f54>
   1fdb8:	mov	r3, #13
   1fdbc:	str	r3, [sl]
   1fdc0:	mov	fp, #0
   1fdc4:	mov	r0, fp
   1fdc8:	add	sp, sp, #156	; 0x9c
   1fdcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fdd0:	str	fp, [sp, #28]
   1fdd4:	mov	r4, fp
   1fdd8:	b	1fd3c <__assert_fail@plt+0xea64>
   1fddc:	ldr	r2, [r4, #20]
   1fde0:	ldr	r1, [pc, #96]	; 1fe48 <__assert_fail@plt+0xeb70>
   1fde4:	mov	r0, r4
   1fde8:	bl	1522c <__assert_fail@plt+0x3f54>
   1fdec:	b	1fed8 <__assert_fail@plt+0xec00>
   1fdf0:	mov	r6, fp
   1fdf4:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fdf8:	ldr	r6, [sp, #28]
   1fdfc:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fe00:	mov	r6, fp
   1fe04:	b	1fd64 <__assert_fail@plt+0xea8c>
   1fe08:	cmp	fp, #0
   1fe0c:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1fe10:	mov	r2, #0
   1fe14:	ldr	r1, [pc, #12]	; 1fe28 <__assert_fail@plt+0xeb50>
   1fe18:	mov	r0, fp
   1fe1c:	bl	1522c <__assert_fail@plt+0x3f54>
   1fe20:	mov	fp, #0
   1fe24:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1fe28:	andeq	r7, r1, r8, asr #32
   1fe2c:	andeq	r0, r0, pc, lsl #6
   1fe30:	mvnseq	r0, #0
   1fe34:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1fe38:	andeq	r4, r2, ip, lsr #15
   1fe3c:	ldrdeq	r3, [r2], -ip
   1fe40:			; <UNDEFINED> instruction: 0x000247bc
   1fe44:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   1fe48:	andeq	r4, r1, r0, lsl #23
   1fe4c:	addeq	r0, ip, r0, lsl #16
   1fe50:	mov	fp, r6
   1fe54:	ldrb	r3, [r8, #4]
   1fe58:	cmp	r3, #23
   1fe5c:	bhi	1fdc4 <__assert_fail@plt+0xeaec>
   1fe60:	cmp	r3, #18
   1fe64:	movne	r5, #0
   1fe68:	moveq	r5, #1
   1fe6c:	ldr	r2, [pc, #-40]	; 1fe4c <__assert_fail@plt+0xeb74>
   1fe70:	lsr	r2, r2, r3
   1fe74:	tst	r2, #1
   1fe78:	beq	1fdc4 <__assert_fail@plt+0xeaec>
   1fe7c:	ldr	r4, [r9, #40]	; 0x28
   1fe80:	ldm	r8, {r0, r1}
   1fe84:	add	r2, sp, #120	; 0x78
   1fe88:	stm	r2, {r0, r1}
   1fe8c:	cmp	r3, #23
   1fe90:	beq	1fb40 <__assert_fail@plt+0xe868>
   1fe94:	cmp	r3, #19
   1fe98:	beq	1fcac <__assert_fail@plt+0xe9d4>
   1fe9c:	ldr	r2, [sp, #24]
   1fea0:	mov	r1, r9
   1fea4:	mov	r0, r8
   1fea8:	bl	16f18 <__assert_fail@plt+0x5c40>
   1feac:	cmp	fp, #0
   1feb0:	beq	1fe00 <__assert_fail@plt+0xeb28>
   1feb4:	mvn	r7, #0
   1feb8:	cmp	r5, #0
   1febc:	movle	r4, fp
   1fec0:	movle	r3, #0
   1fec4:	strle	r3, [sp, #28]
   1fec8:	bgt	1fce8 <__assert_fail@plt+0xea10>
   1fecc:	ldrb	r3, [r4, #24]
   1fed0:	cmp	r3, #17
   1fed4:	beq	1fddc <__assert_fail@plt+0xeb04>
   1fed8:	cmn	r7, #1
   1fedc:	moveq	r3, #11
   1fee0:	movne	r3, #10
   1fee4:	mov	r2, #0
   1fee8:	mov	r1, r4
   1feec:	ldr	r0, [sp, #20]
   1fef0:	bl	15590 <__assert_fail@plt+0x42b8>
   1fef4:	subs	r6, r0, #0
   1fef8:	beq	1fd58 <__assert_fail@plt+0xea80>
   1fefc:	add	r5, r5, #2
   1ff00:	cmp	r7, r5
   1ff04:	blt	1ff64 <__assert_fail@plt+0xec8c>
   1ff08:	ldr	r1, [sp, #20]
   1ff0c:	mov	r0, r4
   1ff10:	bl	154dc <__assert_fail@plt+0x4204>
   1ff14:	mov	r4, r0
   1ff18:	mov	r3, #16
   1ff1c:	mov	r2, r0
   1ff20:	mov	r1, r6
   1ff24:	ldr	r6, [sp, #20]
   1ff28:	mov	r0, r6
   1ff2c:	bl	15590 <__assert_fail@plt+0x42b8>
   1ff30:	mov	r1, r0
   1ff34:	cmp	r0, #0
   1ff38:	cmpne	r4, #0
   1ff3c:	beq	1fd58 <__assert_fail@plt+0xea80>
   1ff40:	mov	r3, #10
   1ff44:	mov	r2, #0
   1ff48:	mov	r0, r6
   1ff4c:	bl	15590 <__assert_fail@plt+0x42b8>
   1ff50:	subs	r6, r0, #0
   1ff54:	beq	1fd58 <__assert_fail@plt+0xea80>
   1ff58:	add	r5, r5, #1
   1ff5c:	cmp	r7, r5
   1ff60:	bge	1ff08 <__assert_fail@plt+0xec30>
   1ff64:	ldr	r3, [sp, #28]
   1ff68:	cmp	r3, #0
   1ff6c:	beq	1fd80 <__assert_fail@plt+0xeaa8>
   1ff70:	mov	r3, #16
   1ff74:	mov	r2, r6
   1ff78:	ldr	r1, [sp, #28]
   1ff7c:	ldr	r0, [sp, #20]
   1ff80:	bl	15590 <__assert_fail@plt+0x42b8>
   1ff84:	mov	r6, r0
   1ff88:	b	1fd64 <__assert_fail@plt+0xea8c>
   1ff8c:	mov	fp, #0
   1ff90:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1ff94:	mov	fp, #0
   1ff98:	b	1fdc4 <__assert_fail@plt+0xeaec>
   1ff9c:	ldr	sl, [sp, #196]	; 0xc4
   1ffa0:	str	r0, [sl]
   1ffa4:	b	1f14c <__assert_fail@plt+0xde74>
   1ffa8:	ldr	sl, [sp, #196]	; 0xc4
   1ffac:	mov	r3, #11
   1ffb0:	b	1f148 <__assert_fail@plt+0xde70>
   1ffb4:	ldr	sl, [sp, #196]	; 0xc4
   1ffb8:	mov	r3, #3
   1ffbc:	b	1f148 <__assert_fail@plt+0xde70>
   1ffc0:	ldr	sl, [sp, #196]	; 0xc4
   1ffc4:	mov	r3, #11
   1ffc8:	b	1f148 <__assert_fail@plt+0xde70>
   1ffcc:	mov	r3, #0
   1ffd0:	ldr	r2, [sp, #196]	; 0xc4
   1ffd4:	str	r3, [r2]
   1ffd8:	b	1f3e4 <__assert_fail@plt+0xe10c>
   1ffdc:	ldr	sl, [sp, #196]	; 0xc4
   1ffe0:	mov	r3, #3
   1ffe4:	str	r3, [sl]
   1ffe8:	b	1f14c <__assert_fail@plt+0xde74>
   1ffec:	ldr	sl, [sp, #196]	; 0xc4
   1fff0:	mov	r3, #3
   1fff4:	str	r3, [sl]
   1fff8:	b	1f14c <__assert_fail@plt+0xde74>
   1fffc:	mov	r3, #3
   20000:	strb	r3, [sp, #124]	; 0x7c
   20004:	add	r3, sp, #152	; 0x98
   20008:	str	r5, [r3, #-32]!	; 0xffffffe0
   2000c:	mov	r2, #0
   20010:	mov	r1, r2
   20014:	ldr	r0, [sp, #20]
   20018:	bl	1541c <__assert_fail@plt+0x4144>
   2001c:	subs	r1, r0, #0
   20020:	beq	2003c <__assert_fail@plt+0xed64>
   20024:	mov	r3, #10
   20028:	mov	r2, fp
   2002c:	ldr	r0, [sp, #20]
   20030:	bl	15590 <__assert_fail@plt+0x42b8>
   20034:	subs	fp, r0, #0
   20038:	bne	1f7fc <__assert_fail@plt+0xe524>
   2003c:	mov	r3, #12
   20040:	str	r3, [sl]
   20044:	b	1f14c <__assert_fail@plt+0xde74>
   20048:	mov	r4, #0
   2004c:	mov	r5, r4
   20050:	bl	111a0 <__ctype_b_loc@plt>
   20054:	lsl	r7, r4, #1
   20058:	add	lr, r5, #24
   2005c:	ldr	r3, [sp, #20]
   20060:	add	lr, r3, lr, lsl #2
   20064:	mov	r6, #1
   20068:	b	1f9b8 <__assert_fail@plt+0xe6e0>
   2006c:	mov	r4, #128	; 0x80
   20070:	mov	r5, #4
   20074:	b	20050 <__assert_fail@plt+0xed78>
   20078:	cmp	r4, #3
   2007c:	bne	1f1c8 <__assert_fail@plt+0xdef0>
   20080:	ldr	r0, [sp, #76]	; 0x4c
   20084:	bl	111b8 <strlen@plt>
   20088:	cmp	r0, #1
   2008c:	bls	1f1b4 <__assert_fail@plt+0xdedc>
   20090:	ldr	sl, [sp, #196]	; 0xc4
   20094:	mov	r3, #3
   20098:	b	1f3c0 <__assert_fail@plt+0xe0e8>
   2009c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200a0:	sub	sp, sp, #20
   200a4:	mov	fp, r0
   200a8:	mov	r9, r1
   200ac:	mov	r7, r2
   200b0:	mov	sl, r3
   200b4:	ldr	r8, [sp, #56]	; 0x38
   200b8:	ldr	r6, [sp, #60]	; 0x3c
   200bc:	ldr	ip, [r1]
   200c0:	str	ip, [sp, #12]
   200c4:	str	r6, [sp, #4]
   200c8:	str	r8, [sp]
   200cc:	bl	1ecec <__assert_fail@plt+0xda14>
   200d0:	ldr	r3, [r6]
   200d4:	mov	r4, r0
   200d8:	adds	r2, r3, #0
   200dc:	movne	r2, #1
   200e0:	cmp	r0, #0
   200e4:	movne	r2, #0
   200e8:	cmp	r2, #0
   200ec:	beq	20140 <__assert_fail@plt+0xee68>
   200f0:	mov	r4, #0
   200f4:	b	20114 <__assert_fail@plt+0xee3c>
   200f8:	cmp	r4, #0
   200fc:	beq	20114 <__assert_fail@plt+0xee3c>
   20100:	mov	r2, #0
   20104:	ldr	r1, [pc, #232]	; 201f4 <__assert_fail@plt+0xef1c>
   20108:	mov	r0, r4
   2010c:	bl	1522c <__assert_fail@plt+0x3f54>
   20110:	mov	r4, #0
   20114:	mov	r0, r4
   20118:	add	sp, sp, #20
   2011c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20120:	mov	r3, #16
   20124:	mov	r2, r5
   20128:	mov	r1, r4
   2012c:	ldr	r0, [sp, #12]
   20130:	bl	15590 <__assert_fail@plt+0x42b8>
   20134:	cmp	r0, #0
   20138:	beq	201bc <__assert_fail@plt+0xeee4>
   2013c:	mov	r4, r0
   20140:	ldrb	r3, [r7, #4]
   20144:	and	r2, r3, #247	; 0xf7
   20148:	cmp	r2, #2
   2014c:	beq	20114 <__assert_fail@plt+0xee3c>
   20150:	subs	r3, r3, #9
   20154:	movne	r3, #1
   20158:	cmp	r8, #0
   2015c:	orreq	r3, r3, #1
   20160:	cmp	r3, #0
   20164:	beq	20114 <__assert_fail@plt+0xee3c>
   20168:	str	r6, [sp, #4]
   2016c:	str	r8, [sp]
   20170:	mov	r3, sl
   20174:	mov	r2, r7
   20178:	mov	r1, r9
   2017c:	mov	r0, fp
   20180:	bl	1ecec <__assert_fail@plt+0xda14>
   20184:	ldr	r3, [r6]
   20188:	mov	r5, r0
   2018c:	adds	r2, r3, #0
   20190:	movne	r2, #1
   20194:	cmp	r0, #0
   20198:	movne	r2, #0
   2019c:	cmp	r2, #0
   201a0:	bne	200f8 <__assert_fail@plt+0xee20>
   201a4:	cmp	r4, #0
   201a8:	cmpne	r5, #0
   201ac:	bne	20120 <__assert_fail@plt+0xee48>
   201b0:	cmp	r4, #0
   201b4:	moveq	r4, r5
   201b8:	b	20140 <__assert_fail@plt+0xee68>
   201bc:	mov	fp, r0
   201c0:	ldr	r7, [pc, #44]	; 201f4 <__assert_fail@plt+0xef1c>
   201c4:	mov	r2, #0
   201c8:	mov	r1, r7
   201cc:	mov	r0, r5
   201d0:	bl	1522c <__assert_fail@plt+0x3f54>
   201d4:	mov	r2, #0
   201d8:	mov	r1, r7
   201dc:	mov	r0, r4
   201e0:	bl	1522c <__assert_fail@plt+0x3f54>
   201e4:	mov	r3, #12
   201e8:	str	r3, [r6]
   201ec:	mov	r4, fp
   201f0:	b	20114 <__assert_fail@plt+0xee3c>
   201f4:	andeq	r7, r1, r8, asr #32
   201f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   201fc:	sub	sp, sp, #28
   20200:	str	r0, [sp, #12]
   20204:	str	r1, [sp, #16]
   20208:	mov	r4, r2
   2020c:	mov	r6, r3
   20210:	str	r3, [sp, #20]
   20214:	ldr	r9, [sp, #64]	; 0x40
   20218:	ldr	r8, [sp, #68]	; 0x44
   2021c:	ldr	r5, [r1]
   20220:	ldr	fp, [r5, #84]	; 0x54
   20224:	str	r8, [sp, #4]
   20228:	str	r9, [sp]
   2022c:	bl	2009c <__assert_fail@plt+0xedc4>
   20230:	ldr	r3, [r8]
   20234:	mov	r7, r0
   20238:	adds	r2, r3, #0
   2023c:	movne	r2, #1
   20240:	cmp	r0, #0
   20244:	movne	r2, #0
   20248:	cmp	r2, #0
   2024c:	bne	20348 <__assert_fail@plt+0xf070>
   20250:	orr	sl, r6, #8388608	; 0x800000
   20254:	b	202c0 <__assert_fail@plt+0xefe8>
   20258:	ldr	r6, [r5, #84]	; 0x54
   2025c:	str	fp, [r5, #84]	; 0x54
   20260:	str	r8, [sp, #4]
   20264:	str	r9, [sp]
   20268:	ldr	r3, [sp, #20]
   2026c:	mov	r2, r4
   20270:	ldr	r1, [sp, #16]
   20274:	ldr	r0, [sp, #12]
   20278:	bl	2009c <__assert_fail@plt+0xedc4>
   2027c:	ldr	r3, [r8]
   20280:	mov	r2, r0
   20284:	adds	r1, r3, #0
   20288:	movne	r1, #1
   2028c:	cmp	r0, #0
   20290:	movne	r1, #0
   20294:	cmp	r1, #0
   20298:	bne	2030c <__assert_fail@plt+0xf034>
   2029c:	ldr	r3, [r5, #84]	; 0x54
   202a0:	orr	r6, r3, r6
   202a4:	str	r6, [r5, #84]	; 0x54
   202a8:	mov	r3, #10
   202ac:	mov	r1, r7
   202b0:	mov	r0, r5
   202b4:	bl	15590 <__assert_fail@plt+0x42b8>
   202b8:	subs	r7, r0, #0
   202bc:	beq	20334 <__assert_fail@plt+0xf05c>
   202c0:	ldrb	r3, [r4, #4]
   202c4:	cmp	r3, #10
   202c8:	bne	2033c <__assert_fail@plt+0xf064>
   202cc:	mov	r2, sl
   202d0:	ldr	r1, [sp, #12]
   202d4:	mov	r0, r4
   202d8:	bl	16f18 <__assert_fail@plt+0x5c40>
   202dc:	ldrb	r2, [r4, #4]
   202e0:	and	r3, r2, #247	; 0xf7
   202e4:	cmp	r3, #2
   202e8:	beq	2032c <__assert_fail@plt+0xf054>
   202ec:	clz	r3, r9
   202f0:	lsr	r3, r3, #5
   202f4:	cmp	r2, #9
   202f8:	orrne	r3, r3, #1
   202fc:	cmp	r3, #0
   20300:	bne	20258 <__assert_fail@plt+0xef80>
   20304:	mov	r2, #0
   20308:	b	202a8 <__assert_fail@plt+0xefd0>
   2030c:	cmp	r7, #0
   20310:	beq	2033c <__assert_fail@plt+0xf064>
   20314:	mov	r2, #0
   20318:	ldr	r1, [pc, #48]	; 20350 <__assert_fail@plt+0xf078>
   2031c:	mov	r0, r7
   20320:	bl	1522c <__assert_fail@plt+0x3f54>
   20324:	mov	r7, #0
   20328:	b	2033c <__assert_fail@plt+0xf064>
   2032c:	mov	r2, #0
   20330:	b	202a8 <__assert_fail@plt+0xefd0>
   20334:	mov	r3, #12
   20338:	str	r3, [r8]
   2033c:	mov	r0, r7
   20340:	add	sp, sp, #28
   20344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20348:	mov	r7, #0
   2034c:	b	2033c <__assert_fail@plt+0xf064>
   20350:	andeq	r7, r1, r8, asr #32
   20354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20358:	sub	sp, sp, #124	; 0x7c
   2035c:	mov	sl, r0
   20360:	str	r1, [sp, #12]
   20364:	mov	r9, r2
   20368:	mov	fp, r3
   2036c:	mov	r2, #0
   20370:	str	r2, [sp, #116]	; 0x74
   20374:	ldrb	r3, [r0, #28]
   20378:	str	fp, [r0, #12]
   2037c:	str	r2, [r0, #8]
   20380:	str	r2, [r0, #24]
   20384:	and	r3, r3, #144	; 0x90
   20388:	strb	r3, [r0, #28]
   2038c:	ldr	r6, [r0]
   20390:	ldr	r3, [r0, #4]
   20394:	cmp	r3, #159	; 0x9f
   20398:	bls	205f4 <__assert_fail@plt+0xf31c>
   2039c:	mov	r2, #160	; 0xa0
   203a0:	str	r2, [sl, #8]
   203a4:	mov	r1, #0
   203a8:	mov	r0, r6
   203ac:	bl	111f4 <memset@plt>
   203b0:	mov	r3, #31
   203b4:	str	r3, [r6, #64]	; 0x40
   203b8:	ldr	r3, [pc, #3044]	; 20fa4 <__assert_fail@plt+0xfccc>
   203bc:	cmp	r9, r3
   203c0:	bhi	20edc <__assert_fail@plt+0xfc04>
   203c4:	add	r0, r9, #1
   203c8:	str	r0, [r6, #4]
   203cc:	lsl	r0, r0, #3
   203d0:	bl	22d3c <__assert_fail@plt+0x11a64>
   203d4:	str	r0, [r6]
   203d8:	cmp	r9, #0
   203dc:	beq	20618 <__assert_fail@plt+0xf340>
   203e0:	mov	r4, #1
   203e4:	lsl	r4, r4, #1
   203e8:	cmp	r9, r4
   203ec:	bcs	203e4 <__assert_fail@plt+0xf10c>
   203f0:	mov	r1, r4
   203f4:	mov	r0, #12
   203f8:	bl	22cec <__assert_fail@plt+0x11a14>
   203fc:	str	r0, [r6, #32]
   20400:	sub	r4, r4, #1
   20404:	str	r4, [r6, #68]	; 0x44
   20408:	bl	11110 <__ctype_get_mb_cur_max@plt>
   2040c:	str	r0, [r6, #92]	; 0x5c
   20410:	mov	r0, #14
   20414:	bl	11278 <nl_langinfo@plt>
   20418:	ldrb	r3, [r0]
   2041c:	and	r3, r3, #223	; 0xdf
   20420:	cmp	r3, #85	; 0x55
   20424:	bne	20474 <__assert_fail@plt+0xf19c>
   20428:	ldrb	r3, [r0, #1]
   2042c:	and	r3, r3, #223	; 0xdf
   20430:	cmp	r3, #84	; 0x54
   20434:	bne	20474 <__assert_fail@plt+0xf19c>
   20438:	ldrb	r3, [r0, #2]
   2043c:	and	r3, r3, #223	; 0xdf
   20440:	cmp	r3, #70	; 0x46
   20444:	bne	20474 <__assert_fail@plt+0xf19c>
   20448:	ldrb	r3, [r0, #3]
   2044c:	cmp	r3, #45	; 0x2d
   20450:	moveq	r3, #4
   20454:	movne	r3, #3
   20458:	ldr	r1, [pc, #2888]	; 20fa8 <__assert_fail@plt+0xfcd0>
   2045c:	add	r0, r0, r3
   20460:	bl	11008 <strcmp@plt>
   20464:	cmp	r0, #0
   20468:	ldrbeq	r3, [r6, #88]	; 0x58
   2046c:	orreq	r3, r3, #4
   20470:	strbeq	r3, [r6, #88]	; 0x58
   20474:	ldrb	r3, [r6, #88]	; 0x58
   20478:	bic	r3, r3, #8
   2047c:	strb	r3, [r6, #88]	; 0x58
   20480:	ldr	r3, [r6, #92]	; 0x5c
   20484:	cmp	r3, #1
   20488:	ble	204a0 <__assert_fail@plt+0xf1c8>
   2048c:	ldrb	r3, [r6, #88]	; 0x58
   20490:	tst	r3, #4
   20494:	beq	20620 <__assert_fail@plt+0xf348>
   20498:	ldr	r3, [pc, #2828]	; 20fac <__assert_fail@plt+0xfcd4>
   2049c:	str	r3, [r6, #60]	; 0x3c
   204a0:	ldr	r3, [r6]
   204a4:	cmp	r3, #0
   204a8:	beq	20edc <__assert_fail@plt+0xfc04>
   204ac:	ldr	r3, [r6, #32]
   204b0:	cmp	r3, #0
   204b4:	beq	20edc <__assert_fail@plt+0xfc04>
   204b8:	mov	r3, #0
   204bc:	str	r3, [sp, #116]	; 0x74
   204c0:	mov	r3, #1
   204c4:	ldr	r2, [pc, #2788]	; 20fb0 <__assert_fail@plt+0xfcd8>
   204c8:	cmp	r2, #0
   204cc:	moveq	r3, #0
   204d0:	mov	r2, #1
   204d4:	ldr	r1, [pc, #2776]	; 20fb4 <__assert_fail@plt+0xfcdc>
   204d8:	cmp	r1, #0
   204dc:	moveq	r2, #0
   204e0:	orr	r3, r3, r2
   204e4:	tst	r3, #255	; 0xff
   204e8:	bne	206a4 <__assert_fail@plt+0xf3cc>
   204ec:	mov	r7, r9
   204f0:	ldr	r5, [sl, #20]
   204f4:	ands	r8, fp, #4194304	; 0x400000
   204f8:	movne	r4, #1
   204fc:	moveq	r4, #0
   20500:	mov	r2, #84	; 0x54
   20504:	mov	r1, #0
   20508:	add	r0, sp, #32
   2050c:	bl	111f4 <memset@plt>
   20510:	ldr	r3, [sp, #12]
   20514:	str	r3, [sp, #32]
   20518:	str	r9, [sp, #80]	; 0x50
   2051c:	str	r9, [sp, #76]	; 0x4c
   20520:	str	r5, [sp, #96]	; 0x60
   20524:	strb	r4, [sp, #104]	; 0x68
   20528:	cmp	r5, #0
   2052c:	orrne	r4, r4, #1
   20530:	strb	r4, [sp, #107]	; 0x6b
   20534:	ldr	r3, [r6, #92]	; 0x5c
   20538:	str	r3, [sp, #112]	; 0x70
   2053c:	ldrb	r3, [r6, #88]	; 0x58
   20540:	lsr	r2, r3, #2
   20544:	and	r2, r2, #1
   20548:	strb	r2, [sp, #105]	; 0x69
   2054c:	lsr	r3, r3, #3
   20550:	and	r3, r3, #1
   20554:	strb	r3, [sp, #106]	; 0x6a
   20558:	str	r9, [sp, #88]	; 0x58
   2055c:	str	r9, [sp, #84]	; 0x54
   20560:	cmp	r9, #0
   20564:	ble	2057c <__assert_fail@plt+0xf2a4>
   20568:	add	r1, r9, #1
   2056c:	add	r0, sp, #32
   20570:	bl	15308 <__assert_fail@plt+0x4030>
   20574:	cmp	r0, #0
   20578:	bne	205ec <__assert_fail@plt+0xf314>
   2057c:	ldrb	r3, [sp, #107]	; 0x6b
   20580:	cmp	r3, #0
   20584:	ldrne	r3, [sp, #36]	; 0x24
   20588:	ldreq	r3, [sp, #12]
   2058c:	str	r3, [sp, #36]	; 0x24
   20590:	cmp	r8, #0
   20594:	beq	206dc <__assert_fail@plt+0xf404>
   20598:	ldr	r3, [r6, #92]	; 0x5c
   2059c:	cmp	r3, #1
   205a0:	ble	206d0 <__assert_fail@plt+0xf3f8>
   205a4:	add	r0, sp, #32
   205a8:	bl	15e38 <__assert_fail@plt+0x4b60>
   205ac:	cmp	r0, #0
   205b0:	bne	205ec <__assert_fail@plt+0xf314>
   205b4:	ldr	r3, [sp, #64]	; 0x40
   205b8:	cmp	r7, r3
   205bc:	ble	20704 <__assert_fail@plt+0xf42c>
   205c0:	ldr	r1, [sp, #68]	; 0x44
   205c4:	ldr	r2, [r6, #92]	; 0x5c
   205c8:	ldr	r3, [sp, #60]	; 0x3c
   205cc:	add	r3, r3, r2
   205d0:	cmp	r1, r3
   205d4:	bgt	20704 <__assert_fail@plt+0xf42c>
   205d8:	lsl	r1, r1, #1
   205dc:	add	r0, sp, #32
   205e0:	bl	15308 <__assert_fail@plt+0x4030>
   205e4:	cmp	r0, #0
   205e8:	beq	205a4 <__assert_fail@plt+0xf2cc>
   205ec:	str	r0, [sp, #116]	; 0x74
   205f0:	b	20f44 <__assert_fail@plt+0xfc6c>
   205f4:	mov	r1, #160	; 0xa0
   205f8:	mov	r0, r6
   205fc:	bl	22d6c <__assert_fail@plt+0x11a94>
   20600:	subs	r6, r0, #0
   20604:	beq	20ed4 <__assert_fail@plt+0xfbfc>
   20608:	mov	r3, #160	; 0xa0
   2060c:	str	r3, [sl, #4]
   20610:	str	r6, [sl]
   20614:	b	2039c <__assert_fail@plt+0xf0c4>
   20618:	mov	r4, #1
   2061c:	b	203f0 <__assert_fail@plt+0xf118>
   20620:	mov	r1, #1
   20624:	mov	r0, #32
   20628:	bl	22cec <__assert_fail@plt+0x11a14>
   2062c:	str	r0, [r6, #60]	; 0x3c
   20630:	cmp	r0, #0
   20634:	beq	20edc <__assert_fail@plt+0xfc04>
   20638:	mov	r7, #0
   2063c:	mov	r8, #1
   20640:	b	20698 <__assert_fail@plt+0xf3c0>
   20644:	add	r5, r5, #1
   20648:	add	r4, r4, #1
   2064c:	cmp	r5, #32
   20650:	beq	2068c <__assert_fail@plt+0xf3b4>
   20654:	mov	r0, r4
   20658:	bl	11200 <btowc@plt>
   2065c:	cmn	r0, #1
   20660:	ldrne	r2, [r6, #60]	; 0x3c
   20664:	ldrne	r3, [r2, r7]
   20668:	orrne	r3, r3, r8, lsl r5
   2066c:	strne	r3, [r2, r7]
   20670:	bics	r3, r4, #127	; 0x7f
   20674:	bne	20644 <__assert_fail@plt+0xf36c>
   20678:	cmp	r0, r4
   2067c:	ldrbne	r3, [r6, #88]	; 0x58
   20680:	orrne	r3, r3, #8
   20684:	strbne	r3, [r6, #88]	; 0x58
   20688:	b	20644 <__assert_fail@plt+0xf36c>
   2068c:	add	r7, r7, #4
   20690:	cmp	r7, #32
   20694:	beq	204a0 <__assert_fail@plt+0xf1c8>
   20698:	lsl	r4, r7, #3
   2069c:	mov	r5, #0
   206a0:	b	20654 <__assert_fail@plt+0xf37c>
   206a4:	mov	r1, #0
   206a8:	add	r0, r6, #136	; 0x88
   206ac:	bl	11074 <pthread_mutex_init@plt>
   206b0:	cmp	r0, #0
   206b4:	movne	r3, #12
   206b8:	strne	r3, [sp, #116]	; 0x74
   206bc:	bne	20ee4 <__assert_fail@plt+0xfc0c>
   206c0:	ldr	r3, [sp, #116]	; 0x74
   206c4:	cmp	r3, #0
   206c8:	beq	204ec <__assert_fail@plt+0xf214>
   206cc:	b	20ee4 <__assert_fail@plt+0xfc0c>
   206d0:	add	r0, sp, #32
   206d4:	bl	163f8 <__assert_fail@plt+0x5120>
   206d8:	b	20704 <__assert_fail@plt+0xf42c>
   206dc:	ldr	r3, [r6, #92]	; 0x5c
   206e0:	cmp	r3, #1
   206e4:	bgt	206fc <__assert_fail@plt+0xf424>
   206e8:	cmp	r4, #0
   206ec:	beq	2095c <__assert_fail@plt+0xf684>
   206f0:	add	r0, sp, #32
   206f4:	bl	1472c <__assert_fail@plt+0x3454>
   206f8:	b	20704 <__assert_fail@plt+0xf42c>
   206fc:	add	r0, sp, #32
   20700:	bl	158d4 <__assert_fail@plt+0x45fc>
   20704:	mov	r4, #0
   20708:	str	r4, [sp, #116]	; 0x74
   2070c:	str	r4, [sl, #24]
   20710:	ldr	r5, [sl]
   20714:	str	fp, [r5, #128]	; 0x80
   20718:	orr	r2, fp, #8388608	; 0x800000
   2071c:	add	r1, sp, #32
   20720:	add	r0, sp, #20
   20724:	bl	16f18 <__assert_fail@plt+0x5c40>
   20728:	add	r3, sp, #116	; 0x74
   2072c:	str	r3, [sp, #4]
   20730:	str	r4, [sp]
   20734:	mov	r3, fp
   20738:	add	r2, sp, #20
   2073c:	mov	r1, sl
   20740:	add	r0, sp, #32
   20744:	bl	201f8 <__assert_fail@plt+0xef20>
   20748:	mov	r7, r0
   2074c:	ldr	r3, [sp, #116]	; 0x74
   20750:	subs	r2, r3, r4
   20754:	movne	r2, #1
   20758:	cmp	r0, r4
   2075c:	movne	r2, #0
   20760:	cmp	r2, r4
   20764:	bne	20f00 <__assert_fail@plt+0xfc28>
   20768:	mov	r3, #2
   2076c:	mov	r2, #0
   20770:	mov	r1, r2
   20774:	mov	r0, r5
   20778:	bl	15590 <__assert_fail@plt+0x42b8>
   2077c:	mov	r4, r0
   20780:	cmp	r7, #0
   20784:	beq	2079c <__assert_fail@plt+0xf4c4>
   20788:	mov	r3, #16
   2078c:	mov	r2, r4
   20790:	mov	r1, r7
   20794:	mov	r0, r5
   20798:	bl	15590 <__assert_fail@plt+0x42b8>
   2079c:	cmp	r0, #0
   207a0:	cmpne	r4, #0
   207a4:	moveq	r3, #12
   207a8:	streq	r3, [sp, #116]	; 0x74
   207ac:	beq	20f00 <__assert_fail@plt+0xfc28>
   207b0:	str	r0, [r6, #52]	; 0x34
   207b4:	cmp	r0, #0
   207b8:	beq	20f44 <__assert_fail@plt+0xfc6c>
   207bc:	ldr	r4, [sl]
   207c0:	ldr	r0, [r4, #4]
   207c4:	lsl	r0, r0, #2
   207c8:	bl	22d3c <__assert_fail@plt+0x11a64>
   207cc:	str	r0, [r4, #12]
   207d0:	ldr	r0, [r4, #4]
   207d4:	lsl	r0, r0, #2
   207d8:	bl	22d3c <__assert_fail@plt+0x11a64>
   207dc:	str	r0, [r4, #16]
   207e0:	ldr	r0, [r4, #4]
   207e4:	add	r0, r0, r0, lsl #1
   207e8:	lsl	r0, r0, #2
   207ec:	bl	22d3c <__assert_fail@plt+0x11a64>
   207f0:	str	r0, [r4, #20]
   207f4:	ldr	r0, [r4, #4]
   207f8:	add	r0, r0, r0, lsl #1
   207fc:	lsl	r0, r0, #2
   20800:	bl	22d3c <__assert_fail@plt+0x11a64>
   20804:	str	r0, [r4, #24]
   20808:	ldr	r3, [r4, #12]
   2080c:	cmp	r3, #0
   20810:	beq	20f0c <__assert_fail@plt+0xfc34>
   20814:	ldr	r3, [r4, #16]
   20818:	cmp	r3, #0
   2081c:	beq	20f3c <__assert_fail@plt+0xfc64>
   20820:	ldr	fp, [r4, #20]
   20824:	cmp	r0, #0
   20828:	cmpne	fp, #0
   2082c:	moveq	fp, #1
   20830:	movne	fp, #0
   20834:	beq	20f14 <__assert_fail@plt+0xfc3c>
   20838:	ldr	r0, [sl, #24]
   2083c:	lsl	r0, r0, #2
   20840:	bl	22d3c <__assert_fail@plt+0x11a64>
   20844:	str	r0, [r4, #132]	; 0x84
   20848:	cmp	r0, #0
   2084c:	beq	208bc <__assert_fail@plt+0xf5e4>
   20850:	ldr	r3, [sl, #24]
   20854:	cmp	r3, #0
   20858:	beq	20878 <__assert_fail@plt+0xf5a0>
   2085c:	mov	r3, #0
   20860:	ldr	r2, [r4, #132]	; 0x84
   20864:	str	r3, [r2, r3, lsl #2]
   20868:	add	r3, r3, #1
   2086c:	ldr	r2, [sl, #24]
   20870:	cmp	r3, r2
   20874:	bcc	20860 <__assert_fail@plt+0xf588>
   20878:	mov	r2, r4
   2087c:	ldr	r1, [pc, #1844]	; 20fb8 <__assert_fail@plt+0xfce0>
   20880:	ldr	r0, [r4, #52]	; 0x34
   20884:	bl	152a0 <__assert_fail@plt+0x3fc8>
   20888:	ldr	r1, [sl, #24]
   2088c:	cmp	r1, #0
   20890:	beq	20970 <__assert_fail@plt+0xf698>
   20894:	ldr	r0, [r4, #132]	; 0x84
   20898:	ldr	r3, [r0]
   2089c:	cmp	r3, #0
   208a0:	bne	208bc <__assert_fail@plt+0xf5e4>
   208a4:	add	r3, r3, #1
   208a8:	cmp	r1, r3
   208ac:	bls	2096c <__assert_fail@plt+0xf694>
   208b0:	ldr	r2, [r0, r3, lsl #2]
   208b4:	cmp	r2, r3
   208b8:	beq	208a4 <__assert_fail@plt+0xf5cc>
   208bc:	mov	r2, sl
   208c0:	ldr	r1, [pc, #1780]	; 20fbc <__assert_fail@plt+0xfce4>
   208c4:	ldr	r0, [r4, #52]	; 0x34
   208c8:	bl	1522c <__assert_fail@plt+0x3f54>
   208cc:	cmp	r0, #0
   208d0:	bne	20f28 <__assert_fail@plt+0xfc50>
   208d4:	mov	r2, r4
   208d8:	ldr	r1, [pc, #1760]	; 20fc0 <__assert_fail@plt+0xfce8>
   208dc:	ldr	r0, [r4, #52]	; 0x34
   208e0:	bl	1522c <__assert_fail@plt+0x3f54>
   208e4:	cmp	r0, #0
   208e8:	bne	20f28 <__assert_fail@plt+0xfc50>
   208ec:	mov	r2, r4
   208f0:	ldr	r1, [pc, #1740]	; 20fc4 <__assert_fail@plt+0xfcec>
   208f4:	ldr	r0, [r4, #52]	; 0x34
   208f8:	bl	152a0 <__assert_fail@plt+0x3fc8>
   208fc:	mov	r2, r4
   20900:	ldr	r1, [pc, #1728]	; 20fc8 <__assert_fail@plt+0xfcf0>
   20904:	ldr	r0, [r4, #52]	; 0x34
   20908:	bl	152a0 <__assert_fail@plt+0x3fc8>
   2090c:	cmp	r0, #0
   20910:	bne	20f28 <__assert_fail@plt+0xfc50>
   20914:	mov	r5, fp
   20918:	mov	r7, #0
   2091c:	add	r9, r7, r7, lsl #1
   20920:	lsl	r9, r9, #2
   20924:	ldr	r3, [r4, #24]
   20928:	add	r3, r3, r9
   2092c:	ldr	r3, [r3, #4]
   20930:	cmp	r3, #0
   20934:	beq	20984 <__assert_fail@plt+0xf6ac>
   20938:	add	r7, r7, #1
   2093c:	ldr	r3, [r4, #8]
   20940:	cmp	r3, r7
   20944:	bne	2091c <__assert_fail@plt+0xf644>
   20948:	cmp	r5, #0
   2094c:	beq	209c4 <__assert_fail@plt+0xf6ec>
   20950:	mov	r5, fp
   20954:	mov	r7, #0
   20958:	b	2091c <__assert_fail@plt+0xf644>
   2095c:	ldr	r3, [sp, #68]	; 0x44
   20960:	str	r3, [sp, #60]	; 0x3c
   20964:	str	r3, [sp, #64]	; 0x40
   20968:	b	20704 <__assert_fail@plt+0xf42c>
   2096c:	bne	208bc <__assert_fail@plt+0xf5e4>
   20970:	ldr	r0, [r4, #132]	; 0x84
   20974:	bl	22f00 <__assert_fail@plt+0x11c28>
   20978:	mov	r3, #0
   2097c:	str	r3, [r4, #132]	; 0x84
   20980:	b	208bc <__assert_fail@plt+0xf5e4>
   20984:	mov	r3, #1
   20988:	mov	r2, r7
   2098c:	mov	r1, r4
   20990:	add	r0, sp, #20
   20994:	bl	18274 <__assert_fail@plt+0x6f9c>
   20998:	cmp	r0, #0
   2099c:	bne	20f40 <__assert_fail@plt+0xfc68>
   209a0:	ldr	r3, [r4, #24]
   209a4:	add	r9, r3, r9
   209a8:	ldr	r3, [r9, #4]
   209ac:	cmp	r3, #0
   209b0:	bne	20938 <__assert_fail@plt+0xf660>
   209b4:	ldr	r0, [sp, #28]
   209b8:	bl	22f00 <__assert_fail@plt+0x11c28>
   209bc:	mov	r5, #1
   209c0:	b	20938 <__assert_fail@plt+0xf660>
   209c4:	ldrb	r3, [sl, #28]
   209c8:	tst	r3, #16
   209cc:	beq	20b38 <__assert_fail@plt+0xf860>
   209d0:	ldr	r3, [r4, #76]	; 0x4c
   209d4:	cmp	r3, #0
   209d8:	beq	20abc <__assert_fail@plt+0xf7e4>
   209dc:	ldr	r0, [r4, #8]
   209e0:	add	r0, r0, r0, lsl #1
   209e4:	lsl	r0, r0, #2
   209e8:	bl	22d3c <__assert_fail@plt+0x11a64>
   209ec:	str	r0, [r4, #28]
   209f0:	cmp	r0, #0
   209f4:	beq	20f1c <__assert_fail@plt+0xfc44>
   209f8:	ldr	r3, [r4, #8]
   209fc:	cmp	r3, #0
   20a00:	beq	20f30 <__assert_fail@plt+0xfc58>
   20a04:	mov	r3, #0
   20a08:	mov	r1, r3
   20a0c:	mov	r2, r3
   20a10:	ldr	ip, [r4, #28]
   20a14:	add	r0, ip, r3
   20a18:	str	r2, [ip, r3]
   20a1c:	str	r2, [r0, #4]
   20a20:	str	r2, [r0, #8]
   20a24:	add	r1, r1, #1
   20a28:	ldr	r0, [r4, #8]
   20a2c:	add	r3, r3, #12
   20a30:	cmp	r1, r0
   20a34:	bcc	20a10 <__assert_fail@plt+0xf738>
   20a38:	cmp	r0, #0
   20a3c:	beq	20abc <__assert_fail@plt+0xf7e4>
   20a40:	mov	fp, #0
   20a44:	str	r5, [sp, #12]
   20a48:	mov	r5, fp
   20a4c:	ldr	r3, [r4, #24]
   20a50:	add	r3, r3, fp
   20a54:	ldr	r9, [r3, #8]
   20a58:	ldr	r3, [r3, #4]
   20a5c:	cmp	r3, #0
   20a60:	ble	20aa4 <__assert_fail@plt+0xf7cc>
   20a64:	sub	r9, r9, #4
   20a68:	mov	r7, #0
   20a6c:	ldr	r0, [r9, #4]!
   20a70:	add	r0, r0, r0, lsl #1
   20a74:	ldr	r3, [r4, #28]
   20a78:	mov	r1, r5
   20a7c:	add	r0, r3, r0, lsl #2
   20a80:	bl	153b8 <__assert_fail@plt+0x40e0>
   20a84:	cmp	r0, #0
   20a88:	beq	20f24 <__assert_fail@plt+0xfc4c>
   20a8c:	add	r7, r7, #1
   20a90:	ldr	r3, [r4, #24]
   20a94:	add	r3, r3, fp
   20a98:	ldr	r3, [r3, #4]
   20a9c:	cmp	r7, r3
   20aa0:	blt	20a6c <__assert_fail@plt+0xf794>
   20aa4:	add	r5, r5, #1
   20aa8:	add	fp, fp, #12
   20aac:	ldr	r3, [r4, #8]
   20ab0:	cmp	r5, r3
   20ab4:	bcc	20a4c <__assert_fail@plt+0xf774>
   20ab8:	ldr	r5, [sp, #12]
   20abc:	mov	r3, #0
   20ac0:	str	r3, [sp, #116]	; 0x74
   20ac4:	ldrb	r3, [r6, #88]	; 0x58
   20ac8:	clz	r8, r8
   20acc:	lsr	r8, r8, #5
   20ad0:	ands	r8, r8, r3, lsr #2
   20ad4:	beq	20ae4 <__assert_fail@plt+0xf80c>
   20ad8:	ldr	r3, [sl, #20]
   20adc:	cmp	r3, #0
   20ae0:	beq	20b54 <__assert_fail@plt+0xf87c>
   20ae4:	ldr	r3, [r6, #52]	; 0x34
   20ae8:	ldr	r3, [r3, #12]
   20aec:	ldr	r1, [r3, #28]
   20af0:	str	r1, [r6, #72]	; 0x48
   20af4:	add	r1, r1, r1, lsl #1
   20af8:	ldr	r3, [r6, #24]
   20afc:	add	r1, r3, r1, lsl #2
   20b00:	add	r0, sp, #20
   20b04:	bl	15c30 <__assert_fail@plt+0x4958>
   20b08:	mov	r5, r0
   20b0c:	str	r0, [sp, #16]
   20b10:	cmp	r0, #0
   20b14:	bne	20de8 <__assert_fail@plt+0xfb10>
   20b18:	ldr	r3, [r6, #76]	; 0x4c
   20b1c:	cmp	r3, #0
   20b20:	ble	20da4 <__assert_fail@plt+0xfacc>
   20b24:	ldr	lr, [sp, #24]
   20b28:	cmp	lr, #0
   20b2c:	ble	20da4 <__assert_fail@plt+0xfacc>
   20b30:	mov	r4, #0
   20b34:	b	20d4c <__assert_fail@plt+0xfa74>
   20b38:	ldr	r3, [sl, #24]
   20b3c:	cmp	r3, #0
   20b40:	beq	209d0 <__assert_fail@plt+0xf6f8>
   20b44:	ldrb	r3, [r4, #88]	; 0x58
   20b48:	tst	r3, #1
   20b4c:	bne	209dc <__assert_fail@plt+0xf704>
   20b50:	b	209d0 <__assert_fail@plt+0xf6f8>
   20b54:	ldr	r3, [r6, #8]
   20b58:	cmp	r3, #0
   20b5c:	beq	20cd4 <__assert_fail@plt+0xf9fc>
   20b60:	ldr	ip, [r6]
   20b64:	mov	lr, ip
   20b68:	mov	r0, r3
   20b6c:	mov	r3, r5
   20b70:	mov	r2, #0
   20b74:	b	20b8c <__assert_fail@plt+0xf8b4>
   20b78:	mov	r3, r8
   20b7c:	add	r2, r2, #1
   20b80:	add	lr, lr, #8
   20b84:	cmp	r2, r0
   20b88:	beq	20c4c <__assert_fail@plt+0xf974>
   20b8c:	ldrb	r1, [lr, #4]
   20b90:	sub	r1, r1, #1
   20b94:	cmp	r1, #11
   20b98:	ldrls	pc, [pc, r1, lsl #2]
   20b9c:	b	20c48 <__assert_fail@plt+0xf970>
   20ba0:	andeq	r0, r2, r8, lsl #24
   20ba4:	andeq	r0, r2, ip, ror fp
   20ba8:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   20bac:	andeq	r0, r2, ip, ror fp
   20bb0:	andeq	r0, r2, r8, ror fp
   20bb4:	andeq	r0, r2, r4, ror #21
   20bb8:	andeq	r0, r2, r8, asr #24
   20bbc:	andeq	r0, r2, ip, ror fp
   20bc0:	andeq	r0, r2, ip, ror fp
   20bc4:	andeq	r0, r2, ip, ror fp
   20bc8:	andeq	r0, r2, ip, ror fp
   20bcc:	andeq	r0, r2, r8, lsl ip
   20bd0:	ldr	r1, [ip, r2, lsl #3]
   20bd4:	ldr	r4, [r1, #16]
   20bd8:	cmp	r4, #0
   20bdc:	bne	20ae4 <__assert_fail@plt+0xf80c>
   20be0:	ldr	r4, [r1, #20]
   20be4:	cmp	r4, #0
   20be8:	bne	20ae4 <__assert_fail@plt+0xf80c>
   20bec:	ldr	r4, [r1, #24]
   20bf0:	cmp	r4, #0
   20bf4:	bne	20ae4 <__assert_fail@plt+0xf80c>
   20bf8:	ldr	r1, [r1, #28]
   20bfc:	cmp	r1, #0
   20c00:	beq	20b7c <__assert_fail@plt+0xf8a4>
   20c04:	b	20ae4 <__assert_fail@plt+0xf80c>
   20c08:	ldrb	r1, [ip, r2, lsl #3]
   20c0c:	lsrs	r1, r1, #7
   20c10:	movne	r5, r8
   20c14:	b	20b7c <__assert_fail@plt+0xf8a4>
   20c18:	ldr	r1, [ip, r2, lsl #3]
   20c1c:	cmp	r1, #32
   20c20:	beq	20b7c <__assert_fail@plt+0xf8a4>
   20c24:	bls	20c3c <__assert_fail@plt+0xf964>
   20c28:	cmp	r1, #64	; 0x40
   20c2c:	beq	20b7c <__assert_fail@plt+0xf8a4>
   20c30:	cmp	r1, #128	; 0x80
   20c34:	beq	20b7c <__assert_fail@plt+0xf8a4>
   20c38:	b	20ae4 <__assert_fail@plt+0xf80c>
   20c3c:	cmp	r1, #16
   20c40:	beq	20b7c <__assert_fail@plt+0xf8a4>
   20c44:	b	20ae4 <__assert_fail@plt+0xf80c>
   20c48:	bl	112cc <abort@plt>
   20c4c:	orr	r5, r5, r3
   20c50:	tst	r5, #255	; 0xff
   20c54:	beq	20c90 <__assert_fail@plt+0xf9b8>
   20c58:	mov	r2, #0
   20c5c:	mov	r4, #7
   20c60:	lsl	ip, r2, #3
   20c64:	ldr	lr, [r6]
   20c68:	add	r1, lr, ip
   20c6c:	ldrb	r0, [r1, #4]
   20c70:	cmp	r0, #1
   20c74:	beq	20cbc <__assert_fail@plt+0xf9e4>
   20c78:	cmp	r0, #5
   20c7c:	strbeq	r4, [r1, #4]
   20c80:	add	r2, r2, #1
   20c84:	ldr	r1, [r6, #8]
   20c88:	cmp	r2, r1
   20c8c:	bcc	20c60 <__assert_fail@plt+0xf988>
   20c90:	mov	r2, #1
   20c94:	str	r2, [r6, #92]	; 0x5c
   20c98:	ldrb	r2, [r6, #88]	; 0x58
   20c9c:	ldr	r1, [r6, #76]	; 0x4c
   20ca0:	cmp	r1, #0
   20ca4:	orrgt	r3, r3, #1
   20ca8:	and	r3, r3, #1
   20cac:	and	r2, r2, #249	; 0xf9
   20cb0:	orr	r3, r2, r3, lsl #1
   20cb4:	strb	r3, [r6, #88]	; 0x58
   20cb8:	b	20ae4 <__assert_fail@plt+0xf80c>
   20cbc:	ldrsb	r0, [lr, ip]
   20cc0:	cmp	r0, #0
   20cc4:	ldrblt	r0, [r1, #6]
   20cc8:	biclt	r0, r0, #32
   20ccc:	strblt	r0, [r1, #6]
   20cd0:	b	20c80 <__assert_fail@plt+0xf9a8>
   20cd4:	mov	r3, r5
   20cd8:	b	20c90 <__assert_fail@plt+0xf9b8>
   20cdc:	add	r3, r3, #1
   20ce0:	cmp	lr, r3
   20ce4:	beq	20d3c <__assert_fail@plt+0xfa64>
   20ce8:	ldr	r1, [r2, #4]!
   20cec:	add	r0, ip, r1, lsl #3
   20cf0:	ldrb	r0, [r0, #4]
   20cf4:	cmp	r0, #9
   20cf8:	bne	20cdc <__assert_fail@plt+0xfa04>
   20cfc:	ldr	r0, [ip, r1, lsl #3]
   20d00:	ldr	r1, [r7]
   20d04:	cmp	r0, r1
   20d08:	bne	20cdc <__assert_fail@plt+0xfa04>
   20d0c:	cmp	lr, r3
   20d10:	beq	20d3c <__assert_fail@plt+0xfa64>
   20d14:	ldr	r3, [r6, #20]
   20d18:	add	r8, r8, r8, lsl #1
   20d1c:	add	r8, r3, r8, lsl #2
   20d20:	ldr	r3, [r8, #8]
   20d24:	ldr	r7, [r3]
   20d28:	mov	r1, r7
   20d2c:	add	r0, sp, #20
   20d30:	bl	147f4 <__assert_fail@plt+0x351c>
   20d34:	cmp	r0, #0
   20d38:	beq	20d80 <__assert_fail@plt+0xfaa8>
   20d3c:	add	r4, r4, #1
   20d40:	ldr	lr, [sp, #24]
   20d44:	cmp	lr, r4
   20d48:	ble	20da4 <__assert_fail@plt+0xfacc>
   20d4c:	ldr	r2, [sp, #28]
   20d50:	ldr	ip, [r6]
   20d54:	ldr	r8, [r2, r4, lsl #2]
   20d58:	add	r7, ip, r8, lsl #3
   20d5c:	ldrb	r3, [r7, #4]
   20d60:	cmp	r3, #4
   20d64:	bne	20d3c <__assert_fail@plt+0xfa64>
   20d68:	cmp	lr, #0
   20d6c:	subgt	r2, r2, #4
   20d70:	movgt	r3, #0
   20d74:	bgt	20ce8 <__assert_fail@plt+0xfa10>
   20d78:	mov	r3, #0
   20d7c:	b	20d0c <__assert_fail@plt+0xfa34>
   20d80:	add	r7, r7, r7, lsl #1
   20d84:	ldr	r1, [r6, #24]
   20d88:	add	r1, r1, r7, lsl #2
   20d8c:	add	r0, sp, #20
   20d90:	bl	180cc <__assert_fail@plt+0x6df4>
   20d94:	cmp	r0, #0
   20d98:	bne	20e80 <__assert_fail@plt+0xfba8>
   20d9c:	mov	r4, #0
   20da0:	b	20d3c <__assert_fail@plt+0xfa64>
   20da4:	mov	r3, #0
   20da8:	add	r2, sp, #20
   20dac:	mov	r1, r6
   20db0:	add	r0, sp, #16
   20db4:	bl	173e8 <__assert_fail@plt+0x6110>
   20db8:	str	r0, [r6, #36]	; 0x24
   20dbc:	cmp	r0, #0
   20dc0:	ldreq	r5, [sp, #16]
   20dc4:	beq	20de8 <__assert_fail@plt+0xfb10>
   20dc8:	ldrsb	r3, [r0, #52]	; 0x34
   20dcc:	cmp	r3, #0
   20dd0:	strge	r0, [r6, #48]	; 0x30
   20dd4:	strge	r0, [r6, #44]	; 0x2c
   20dd8:	strge	r0, [r6, #40]	; 0x28
   20ddc:	blt	20e14 <__assert_fail@plt+0xfb3c>
   20de0:	ldr	r0, [sp, #28]
   20de4:	bl	22f00 <__assert_fail@plt+0x11c28>
   20de8:	str	r5, [sp, #116]	; 0x74
   20dec:	mov	r0, sl
   20df0:	bl	176d4 <__assert_fail@plt+0x63fc>
   20df4:	add	r0, sp, #32
   20df8:	bl	17720 <__assert_fail@plt+0x6448>
   20dfc:	ldr	r3, [sp, #116]	; 0x74
   20e00:	cmp	r3, #0
   20e04:	bne	20e88 <__assert_fail@plt+0xfbb0>
   20e08:	ldr	r0, [sp, #116]	; 0x74
   20e0c:	add	sp, sp, #124	; 0x7c
   20e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e14:	mov	r3, #1
   20e18:	add	r2, sp, #20
   20e1c:	mov	r1, r6
   20e20:	add	r0, sp, #16
   20e24:	bl	173e8 <__assert_fail@plt+0x6110>
   20e28:	str	r0, [r6, #40]	; 0x28
   20e2c:	mov	r3, #2
   20e30:	add	r2, sp, #20
   20e34:	mov	r1, r6
   20e38:	add	r0, sp, #16
   20e3c:	bl	173e8 <__assert_fail@plt+0x6110>
   20e40:	str	r0, [r6, #44]	; 0x2c
   20e44:	mov	r3, #6
   20e48:	add	r2, sp, #20
   20e4c:	mov	r1, r6
   20e50:	add	r0, sp, #16
   20e54:	bl	173e8 <__assert_fail@plt+0x6110>
   20e58:	str	r0, [r6, #48]	; 0x30
   20e5c:	ldr	r3, [r6, #40]	; 0x28
   20e60:	cmp	r3, #0
   20e64:	beq	20e78 <__assert_fail@plt+0xfba0>
   20e68:	ldr	r3, [r6, #44]	; 0x2c
   20e6c:	cmp	r0, #0
   20e70:	cmpne	r3, #0
   20e74:	bne	20de0 <__assert_fail@plt+0xfb08>
   20e78:	ldr	r5, [sp, #16]
   20e7c:	b	20de8 <__assert_fail@plt+0xfb10>
   20e80:	mov	r5, r0
   20e84:	b	20de8 <__assert_fail@plt+0xfb10>
   20e88:	mov	r3, #1
   20e8c:	ldr	r2, [pc, #288]	; 20fb4 <__assert_fail@plt+0xfcdc>
   20e90:	cmp	r2, #0
   20e94:	moveq	r3, #0
   20e98:	mov	r2, #1
   20e9c:	ldr	r1, [pc, #268]	; 20fb0 <__assert_fail@plt+0xfcd8>
   20ea0:	cmp	r1, #0
   20ea4:	moveq	r2, #0
   20ea8:	orr	r3, r3, r2
   20eac:	tst	r3, #255	; 0xff
   20eb0:	beq	20ebc <__assert_fail@plt+0xfbe4>
   20eb4:	add	r0, r6, #136	; 0x88
   20eb8:	bl	11020 <pthread_mutex_destroy@plt>
   20ebc:	mov	r0, r6
   20ec0:	bl	17750 <__assert_fail@plt+0x6478>
   20ec4:	mov	r3, #0
   20ec8:	str	r3, [sl]
   20ecc:	str	r3, [sl, #4]
   20ed0:	b	20e08 <__assert_fail@plt+0xfb30>
   20ed4:	mov	r0, #12
   20ed8:	b	20e0c <__assert_fail@plt+0xfb34>
   20edc:	mov	r3, #12
   20ee0:	str	r3, [sp, #116]	; 0x74
   20ee4:	mov	r0, r6
   20ee8:	bl	17750 <__assert_fail@plt+0x6478>
   20eec:	mov	r3, #0
   20ef0:	str	r3, [sl]
   20ef4:	str	r3, [sl, #4]
   20ef8:	ldr	r0, [sp, #116]	; 0x74
   20efc:	b	20e0c <__assert_fail@plt+0xfb34>
   20f00:	mov	r3, #0
   20f04:	str	r3, [r6, #52]	; 0x34
   20f08:	b	20f44 <__assert_fail@plt+0xfc6c>
   20f0c:	mov	r0, #12
   20f10:	b	20f28 <__assert_fail@plt+0xfc50>
   20f14:	mov	r0, #12
   20f18:	b	20f28 <__assert_fail@plt+0xfc50>
   20f1c:	mov	r0, #12
   20f20:	b	20f28 <__assert_fail@plt+0xfc50>
   20f24:	mov	r0, #12
   20f28:	str	r0, [sp, #116]	; 0x74
   20f2c:	b	20f44 <__assert_fail@plt+0xfc6c>
   20f30:	mov	r3, #0
   20f34:	str	r3, [sp, #116]	; 0x74
   20f38:	b	20ac4 <__assert_fail@plt+0xf7ec>
   20f3c:	mov	r0, #12
   20f40:	str	r0, [sp, #116]	; 0x74
   20f44:	mov	r0, sl
   20f48:	bl	176d4 <__assert_fail@plt+0x63fc>
   20f4c:	add	r0, sp, #32
   20f50:	bl	17720 <__assert_fail@plt+0x6448>
   20f54:	mov	r3, #1
   20f58:	ldr	r2, [pc, #80]	; 20fb0 <__assert_fail@plt+0xfcd8>
   20f5c:	cmp	r2, #0
   20f60:	moveq	r3, #0
   20f64:	mov	r2, #1
   20f68:	ldr	r1, [pc, #68]	; 20fb4 <__assert_fail@plt+0xfcdc>
   20f6c:	cmp	r1, #0
   20f70:	moveq	r2, #0
   20f74:	orr	r3, r3, r2
   20f78:	tst	r3, #255	; 0xff
   20f7c:	beq	20f88 <__assert_fail@plt+0xfcb0>
   20f80:	add	r0, r6, #136	; 0x88
   20f84:	bl	11020 <pthread_mutex_destroy@plt>
   20f88:	mov	r0, r6
   20f8c:	bl	17750 <__assert_fail@plt+0x6478>
   20f90:	mov	r3, #0
   20f94:	str	r3, [sl]
   20f98:	str	r3, [sl, #4]
   20f9c:	ldr	r0, [sp, #116]	; 0x74
   20fa0:	b	20e0c <__assert_fail@plt+0xfb34>
   20fa4:	beq	feacba50 <optarg@@GLIBC_2.4+0xfea96878>
   20fa8:	strdeq	r4, [r2], -r8
   20fac:			; <UNDEFINED> instruction: 0x000245b0
	...
   20fb8:	andeq	r4, r1, r0, ror #17
   20fbc:	ldrdeq	r5, [r1], -r4
   20fc0:	andeq	r7, r1, r8, asr #4
   20fc4:	andeq	r4, r1, ip, ror r9
   20fc8:	andeq	r7, r1, ip, lsl #20
   20fcc:	push	{r4, lr}
   20fd0:	mov	ip, r2
   20fd4:	ldr	r3, [pc, #96]	; 2103c <__assert_fail@plt+0xfd64>
   20fd8:	ldr	r3, [r3]
   20fdc:	lsr	lr, r3, #21
   20fe0:	ldrb	r2, [r2, #28]
   20fe4:	and	lr, lr, #16
   20fe8:	and	r2, r2, #239	; 0xef
   20fec:	orr	r2, r2, lr
   20ff0:	orr	r2, r2, #128	; 0x80
   20ff4:	strb	r2, [ip, #28]
   20ff8:	mov	r2, r1
   20ffc:	mov	r1, r0
   21000:	mov	r0, ip
   21004:	bl	20354 <__assert_fail@plt+0xf07c>
   21008:	cmp	r0, #0
   2100c:	beq	21034 <__assert_fail@plt+0xfd5c>
   21010:	ldr	r3, [pc, #40]	; 21040 <__assert_fail@plt+0xfd68>
   21014:	add	r1, r3, #32
   21018:	add	r3, r3, r0, lsl #2
   2101c:	ldr	r3, [r3, #416]	; 0x1a0
   21020:	mov	r2, #5
   21024:	add	r1, r1, r3
   21028:	mov	r0, #0
   2102c:	bl	110c8 <dcgettext@plt>
   21030:	pop	{r4, pc}
   21034:	mov	r0, #0
   21038:	pop	{r4, pc}
   2103c:	andeq	r5, r3, r0, asr #13
   21040:			; <UNDEFINED> instruction: 0x000245b0
   21044:	ldr	r3, [pc, #12]	; 21058 <__assert_fail@plt+0xfd80>
   21048:	ldr	r2, [r3]
   2104c:	str	r0, [r3]
   21050:	mov	r0, r2
   21054:	bx	lr
   21058:	andeq	r5, r3, r0, asr #13
   2105c:	push	{r4, r5, r6, lr}
   21060:	mov	r4, r0
   21064:	ldr	r5, [r0]
   21068:	ldr	r6, [r0, #16]
   2106c:	mov	r2, #256	; 0x100
   21070:	mov	r1, #0
   21074:	mov	r0, r6
   21078:	bl	111f4 <memset@plt>
   2107c:	mov	r2, r6
   21080:	ldr	r1, [r5, #36]	; 0x24
   21084:	mov	r0, r4
   21088:	bl	1af90 <__assert_fail@plt+0x9cb8>
   2108c:	ldr	r1, [r5, #40]	; 0x28
   21090:	ldr	r3, [r5, #36]	; 0x24
   21094:	cmp	r3, r1
   21098:	beq	210a8 <__assert_fail@plt+0xfdd0>
   2109c:	mov	r2, r6
   210a0:	mov	r0, r4
   210a4:	bl	1af90 <__assert_fail@plt+0x9cb8>
   210a8:	ldr	r1, [r5, #44]	; 0x2c
   210ac:	ldr	r3, [r5, #36]	; 0x24
   210b0:	cmp	r3, r1
   210b4:	beq	210c4 <__assert_fail@plt+0xfdec>
   210b8:	mov	r2, r6
   210bc:	mov	r0, r4
   210c0:	bl	1af90 <__assert_fail@plt+0x9cb8>
   210c4:	ldr	r1, [r5, #48]	; 0x30
   210c8:	ldr	r3, [r5, #36]	; 0x24
   210cc:	cmp	r3, r1
   210d0:	beq	210e0 <__assert_fail@plt+0xfe08>
   210d4:	mov	r2, r6
   210d8:	mov	r0, r4
   210dc:	bl	1af90 <__assert_fail@plt+0x9cb8>
   210e0:	ldrb	r3, [r4, #28]
   210e4:	orr	r3, r3, #8
   210e8:	strb	r3, [r4, #28]
   210ec:	mov	r0, #0
   210f0:	pop	{r4, r5, r6, pc}
   210f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210f8:	sub	sp, sp, #44	; 0x2c
   210fc:	ldr	ip, [sp, #80]	; 0x50
   21100:	ldr	r4, [sp, #88]	; 0x58
   21104:	ldr	fp, [r0]
   21108:	add	r7, r3, ip
   2110c:	cmp	r3, r2
   21110:	movle	lr, #0
   21114:	movgt	lr, #1
   21118:	orrs	lr, lr, r3, lsr #31
   2111c:	bne	2147c <__assert_fail@plt+0x101a4>
   21120:	cmp	r7, r2
   21124:	bgt	21274 <__assert_fail@plt+0xff9c>
   21128:	cmp	ip, #0
   2112c:	cmpge	r3, r7
   21130:	bgt	2127c <__assert_fail@plt+0xffa4>
   21134:	cmp	r7, #0
   21138:	blt	21284 <__assert_fail@plt+0xffac>
   2113c:	cmp	r3, r7
   21140:	movgt	lr, #0
   21144:	movle	lr, #1
   21148:	and	ip, lr, ip, lsr #31
   2114c:	cmp	ip, #0
   21150:	movne	r7, #0
   21154:	mov	r8, #1
   21158:	ldr	ip, [pc, #812]	; 2148c <__assert_fail@plt+0x101b4>
   2115c:	cmp	ip, #0
   21160:	moveq	r8, #0
   21164:	mov	ip, #1
   21168:	ldr	lr, [pc, #800]	; 21490 <__assert_fail@plt+0x101b8>
   2116c:	cmp	lr, #0
   21170:	moveq	ip, #0
   21174:	str	r3, [sp, #24]
   21178:	str	r2, [sp, #32]
   2117c:	str	r1, [sp, #28]
   21180:	mov	r6, r0
   21184:	orr	r8, r8, ip
   21188:	ands	r8, r8, #255	; 0xff
   2118c:	beq	21198 <__assert_fail@plt+0xfec0>
   21190:	add	r0, fp, #136	; 0x88
   21194:	bl	11050 <pthread_mutex_lock@plt>
   21198:	ldrb	r3, [r6, #28]
   2119c:	lsl	r2, r3, #26
   211a0:	and	sl, r3, #64	; 0x40
   211a4:	cmp	sl, #0
   211a8:	movne	sl, #2
   211ac:	moveq	sl, #0
   211b0:	orr	sl, sl, r2, lsr #31
   211b4:	ldr	r2, [sp, #24]
   211b8:	cmp	r7, r2
   211bc:	ble	211d4 <__assert_fail@plt+0xfefc>
   211c0:	ldr	r2, [r6, #16]
   211c4:	cmp	r2, #0
   211c8:	beq	211d4 <__assert_fail@plt+0xfefc>
   211cc:	tst	r3, #8
   211d0:	beq	2128c <__assert_fail@plt+0xffb4>
   211d4:	ldrb	r3, [r6, #28]
   211d8:	tst	r3, #16
   211dc:	bne	212c0 <__assert_fail@plt+0xffe8>
   211e0:	cmp	r4, #0
   211e4:	beq	212cc <__assert_fail@plt+0xfff4>
   211e8:	and	r3, r3, #6
   211ec:	cmp	r3, #4
   211f0:	beq	21298 <__assert_fail@plt+0xffc0>
   211f4:	ldr	r5, [r6, #24]
   211f8:	add	r5, r5, #1
   211fc:	str	r5, [sp, #36]	; 0x24
   21200:	lsl	r0, r5, #3
   21204:	bl	22d3c <__assert_fail@plt+0x11a64>
   21208:	subs	r9, r0, #0
   2120c:	beq	21474 <__assert_fail@plt+0x1019c>
   21210:	str	sl, [sp, #16]
   21214:	str	r9, [sp, #12]
   21218:	str	r5, [sp, #8]
   2121c:	ldr	r3, [sp, #84]	; 0x54
   21220:	str	r3, [sp, #4]
   21224:	str	r7, [sp]
   21228:	ldr	r3, [sp, #24]
   2122c:	ldr	r2, [sp, #32]
   21230:	ldr	r1, [sp, #28]
   21234:	mov	r0, r6
   21238:	bl	1d308 <__assert_fail@plt+0xc030>
   2123c:	cmp	r0, #0
   21240:	beq	212d4 <__assert_fail@plt+0xfffc>
   21244:	cmp	r0, #1
   21248:	mvneq	r4, #0
   2124c:	mvnne	r4, #1
   21250:	mov	r0, r9
   21254:	bl	22f00 <__assert_fail@plt+0x11c28>
   21258:	cmp	r8, #0
   2125c:	beq	21268 <__assert_fail@plt+0xff90>
   21260:	add	r0, fp, #136	; 0x88
   21264:	bl	10fb4 <pthread_mutex_unlock@plt>
   21268:	mov	r0, r4
   2126c:	add	sp, sp, #44	; 0x2c
   21270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21274:	mov	r7, r2
   21278:	b	21154 <__assert_fail@plt+0xfe7c>
   2127c:	mov	r7, r2
   21280:	b	21154 <__assert_fail@plt+0xfe7c>
   21284:	mov	r7, #0
   21288:	b	21154 <__assert_fail@plt+0xfe7c>
   2128c:	mov	r0, r6
   21290:	bl	2105c <__assert_fail@plt+0xfd84>
   21294:	b	211d4 <__assert_fail@plt+0xfefc>
   21298:	ldr	r3, [r4]
   2129c:	ldr	r2, [r6, #24]
   212a0:	cmp	r3, r2
   212a4:	bhi	211f4 <__assert_fail@plt+0xff1c>
   212a8:	cmp	r3, #0
   212ac:	movgt	r5, r3
   212b0:	movle	r5, #1
   212b4:	cmp	r3, #0
   212b8:	movle	r4, #0
   212bc:	b	211fc <__assert_fail@plt+0xff24>
   212c0:	mov	r5, #1
   212c4:	mov	r4, #0
   212c8:	b	211fc <__assert_fail@plt+0xff24>
   212cc:	mov	r5, #1
   212d0:	b	211fc <__assert_fail@plt+0xff24>
   212d4:	cmp	r4, #0
   212d8:	beq	21390 <__assert_fail@plt+0x100b8>
   212dc:	ldrb	sl, [r6, #28]
   212e0:	lsr	sl, sl, #1
   212e4:	add	r7, r5, #1
   212e8:	ands	sl, sl, #3
   212ec:	beq	213a4 <__assert_fail@plt+0x100cc>
   212f0:	cmp	sl, #1
   212f4:	movne	sl, #2
   212f8:	beq	213e8 <__assert_fail@plt+0x10110>
   212fc:	cmp	r5, #0
   21300:	ble	2144c <__assert_fail@plt+0x10174>
   21304:	mov	r2, r9
   21308:	ldr	r3, [sp, #36]	; 0x24
   2130c:	lsl	ip, r3, #2
   21310:	mov	r3, #0
   21314:	ldr	r0, [r9, r3, lsl #1]
   21318:	ldr	r1, [r4, #4]
   2131c:	str	r0, [r1, r3]
   21320:	ldr	r0, [r2, #4]
   21324:	ldr	r1, [r4, #8]
   21328:	str	r0, [r1, r3]
   2132c:	add	r3, r3, #4
   21330:	add	r2, r2, #8
   21334:	cmp	ip, r3
   21338:	bne	21314 <__assert_fail@plt+0x1003c>
   2133c:	ldr	r3, [r4]
   21340:	cmp	r3, r5
   21344:	bls	21374 <__assert_fail@plt+0x1009c>
   21348:	lsl	r3, r5, #2
   2134c:	mvn	r2, #0
   21350:	ldr	r1, [r4, #4]
   21354:	ldr	r0, [r4, #8]
   21358:	str	r2, [r0, r3]
   2135c:	str	r2, [r1, r3]
   21360:	add	r5, r5, #1
   21364:	add	r3, r3, #4
   21368:	ldr	r1, [r4]
   2136c:	cmp	r5, r1
   21370:	bcc	21350 <__assert_fail@plt+0x10078>
   21374:	ldrb	r3, [r6, #28]
   21378:	and	sl, sl, #3
   2137c:	bic	r3, r3, #6
   21380:	orr	sl, r3, sl, lsl #1
   21384:	strb	sl, [r6, #28]
   21388:	tst	sl, #6
   2138c:	beq	21484 <__assert_fail@plt+0x101ac>
   21390:	ldrb	r3, [sp, #92]	; 0x5c
   21394:	cmp	r3, #0
   21398:	bne	21464 <__assert_fail@plt+0x1018c>
   2139c:	ldr	r4, [r9]
   213a0:	b	21250 <__assert_fail@plt+0xff78>
   213a4:	lsl	sl, r7, #2
   213a8:	mov	r0, sl
   213ac:	bl	22d3c <__assert_fail@plt+0x11a64>
   213b0:	str	r0, [r4, #4]
   213b4:	cmp	r0, #0
   213b8:	beq	21454 <__assert_fail@plt+0x1017c>
   213bc:	mov	r0, sl
   213c0:	bl	22d3c <__assert_fail@plt+0x11a64>
   213c4:	str	r0, [r4, #8]
   213c8:	cmp	r0, #0
   213cc:	strne	r7, [r4]
   213d0:	movne	sl, #1
   213d4:	bne	212fc <__assert_fail@plt+0x10024>
   213d8:	ldr	r0, [r4, #4]
   213dc:	bl	22f00 <__assert_fail@plt+0x11c28>
   213e0:	mov	sl, #0
   213e4:	b	21374 <__assert_fail@plt+0x1009c>
   213e8:	ldr	r3, [r4]
   213ec:	cmp	r3, r7
   213f0:	bcs	212fc <__assert_fail@plt+0x10024>
   213f4:	lsl	r3, r7, #2
   213f8:	str	r3, [sp, #32]
   213fc:	mov	r1, r3
   21400:	ldr	r0, [r4, #4]
   21404:	bl	22d6c <__assert_fail@plt+0x11a94>
   21408:	subs	r2, r0, #0
   2140c:	str	r2, [sp, #28]
   21410:	beq	2145c <__assert_fail@plt+0x10184>
   21414:	ldr	r1, [sp, #32]
   21418:	ldr	r0, [r4, #8]
   2141c:	bl	22d6c <__assert_fail@plt+0x11a94>
   21420:	cmp	r0, #0
   21424:	beq	2143c <__assert_fail@plt+0x10164>
   21428:	ldr	r3, [sp, #28]
   2142c:	str	r3, [r4, #4]
   21430:	str	r0, [r4, #8]
   21434:	str	r7, [r4]
   21438:	b	212fc <__assert_fail@plt+0x10024>
   2143c:	ldr	r0, [sp, #28]
   21440:	bl	22f00 <__assert_fail@plt+0x11c28>
   21444:	mov	sl, #0
   21448:	b	21374 <__assert_fail@plt+0x1009c>
   2144c:	mov	r5, #0
   21450:	b	2133c <__assert_fail@plt+0x10064>
   21454:	mov	sl, #0
   21458:	b	21374 <__assert_fail@plt+0x1009c>
   2145c:	mov	sl, #0
   21460:	b	21374 <__assert_fail@plt+0x1009c>
   21464:	ldr	r4, [r9, #4]
   21468:	ldr	r3, [sp, #24]
   2146c:	sub	r4, r4, r3
   21470:	b	21250 <__assert_fail@plt+0xff78>
   21474:	mvn	r4, #1
   21478:	b	21258 <__assert_fail@plt+0xff80>
   2147c:	mvn	r4, #0
   21480:	b	21268 <__assert_fail@plt+0xff90>
   21484:	mvn	r4, #1
   21488:	b	21250 <__assert_fail@plt+0xff78>
	...
   21494:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21498:	sub	sp, sp, #20
   2149c:	mov	r5, r2
   214a0:	mov	r7, r3
   214a4:	ldr	r4, [sp, #56]	; 0x38
   214a8:	ldr	r6, [sp, #72]	; 0x48
   214ac:	lsr	r3, r4, #31
   214b0:	orr	r3, r3, r2, lsr #31
   214b4:	orrs	r2, r3, r6, lsr #31
   214b8:	bne	215c0 <__assert_fail@plt+0x102e8>
   214bc:	mov	r8, r0
   214c0:	mov	r9, r1
   214c4:	cmp	r4, #0
   214c8:	blt	21540 <__assert_fail@plt+0x10268>
   214cc:	cmp	r3, #0
   214d0:	bne	21554 <__assert_fail@plt+0x1027c>
   214d4:	mvn	r3, #-2147483648	; 0x80000000
   214d8:	sub	r3, r3, r4
   214dc:	cmp	r5, r3
   214e0:	movle	r3, #0
   214e4:	movgt	r3, #1
   214e8:	cmp	r3, #0
   214ec:	mvnne	r4, #1
   214f0:	bne	215b4 <__assert_fail@plt+0x102dc>
   214f4:	add	fp, r5, r4
   214f8:	cmp	r4, #0
   214fc:	ble	21568 <__assert_fail@plt+0x10290>
   21500:	cmp	r5, #0
   21504:	ble	21574 <__assert_fail@plt+0x1029c>
   21508:	mov	r0, fp
   2150c:	bl	22d3c <__assert_fail@plt+0x11a64>
   21510:	subs	sl, r0, #0
   21514:	beq	215c8 <__assert_fail@plt+0x102f0>
   21518:	mov	r2, r5
   2151c:	mov	r1, r9
   21520:	mov	r0, sl
   21524:	bl	11068 <memcpy@plt>
   21528:	mov	r2, r4
   2152c:	mov	r1, r7
   21530:	add	r0, sl, r5
   21534:	bl	11068 <memcpy@plt>
   21538:	mov	r7, sl
   2153c:	b	21578 <__assert_fail@plt+0x102a0>
   21540:	rsb	r3, r4, #-2147483648	; 0x80000000
   21544:	cmp	r5, r3
   21548:	movge	r3, #0
   2154c:	movlt	r3, #1
   21550:	b	214e8 <__assert_fail@plt+0x10210>
   21554:	rsb	r3, r5, #-2147483648	; 0x80000000
   21558:	cmp	r4, r3
   2155c:	movge	r3, #0
   21560:	movlt	r3, #1
   21564:	b	214e8 <__assert_fail@plt+0x10210>
   21568:	mov	r7, r9
   2156c:	mov	sl, #0
   21570:	b	21578 <__assert_fail@plt+0x102a0>
   21574:	mov	sl, #0
   21578:	ldrb	r3, [sp, #76]	; 0x4c
   2157c:	str	r3, [sp, #12]
   21580:	ldr	r3, [sp, #68]	; 0x44
   21584:	str	r3, [sp, #8]
   21588:	str	r6, [sp, #4]
   2158c:	ldr	r3, [sp, #64]	; 0x40
   21590:	str	r3, [sp]
   21594:	ldr	r3, [sp, #60]	; 0x3c
   21598:	mov	r2, fp
   2159c:	mov	r1, r7
   215a0:	mov	r0, r8
   215a4:	bl	210f4 <__assert_fail@plt+0xfe1c>
   215a8:	mov	r4, r0
   215ac:	mov	r0, sl
   215b0:	bl	22f00 <__assert_fail@plt+0x11c28>
   215b4:	mov	r0, r4
   215b8:	add	sp, sp, #20
   215bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   215c0:	mvn	r4, #1
   215c4:	b	215b4 <__assert_fail@plt+0x102dc>
   215c8:	mvn	r4, #1
   215cc:	b	215b4 <__assert_fail@plt+0x102dc>
   215d0:	push	{r4, r5, r6, r7, r8, lr}
   215d4:	mov	r4, r0
   215d8:	mov	r7, r1
   215dc:	mov	r5, r2
   215e0:	and	r2, r2, #1
   215e4:	ldr	r3, [pc, #228]	; 216d0 <__assert_fail@plt+0x103f8>
   215e8:	ldr	r6, [pc, #228]	; 216d4 <__assert_fail@plt+0x103fc>
   215ec:	cmp	r2, #0
   215f0:	moveq	r6, r3
   215f4:	mov	r3, #0
   215f8:	str	r3, [r0]
   215fc:	str	r3, [r0, #4]
   21600:	str	r3, [r0, #8]
   21604:	mov	r0, #256	; 0x100
   21608:	bl	22d3c <__assert_fail@plt+0x11a64>
   2160c:	str	r0, [r4, #16]
   21610:	cmp	r0, #0
   21614:	beq	216c8 <__assert_fail@plt+0x103f0>
   21618:	and	r3, r5, #2
   2161c:	cmp	r3, #0
   21620:	movne	r3, #4194304	; 0x400000
   21624:	moveq	r3, #0
   21628:	orr	r6, r6, r3
   2162c:	tst	r5, #4
   21630:	bicne	r6, r6, #64	; 0x40
   21634:	orrne	r6, r6, #256	; 0x100
   21638:	ldrbne	r3, [r4, #28]
   2163c:	orrne	r3, r3, #128	; 0x80
   21640:	ldrbeq	r3, [r4, #28]
   21644:	biceq	r3, r3, #128	; 0x80
   21648:	strb	r3, [r4, #28]
   2164c:	lsl	r5, r5, #1
   21650:	ldrb	r3, [r4, #28]
   21654:	bic	r3, r3, #16
   21658:	and	r5, r5, #16
   2165c:	orr	r5, r5, r3
   21660:	strb	r5, [r4, #28]
   21664:	mov	r3, #0
   21668:	str	r3, [r4, #20]
   2166c:	mov	r0, r7
   21670:	bl	111b8 <strlen@plt>
   21674:	mov	r3, r6
   21678:	mov	r2, r0
   2167c:	mov	r1, r7
   21680:	mov	r0, r4
   21684:	bl	20354 <__assert_fail@plt+0xf07c>
   21688:	mov	r5, r0
   2168c:	cmp	r0, #16
   21690:	beq	216ac <__assert_fail@plt+0x103d4>
   21694:	cmp	r0, #0
   21698:	bne	216b0 <__assert_fail@plt+0x103d8>
   2169c:	mov	r0, r4
   216a0:	bl	2105c <__assert_fail@plt+0xfd84>
   216a4:	mov	r0, #0
   216a8:	pop	{r4, r5, r6, r7, r8, pc}
   216ac:	mov	r5, #8
   216b0:	ldr	r0, [r4, #16]
   216b4:	bl	22f00 <__assert_fail@plt+0x11c28>
   216b8:	mov	r3, #0
   216bc:	str	r3, [r4, #16]
   216c0:	mov	r0, r5
   216c4:	pop	{r4, r5, r6, r7, r8, pc}
   216c8:	mov	r0, #12
   216cc:	pop	{r4, r5, r6, r7, r8, pc}
   216d0:	smlabteq	r1, r6, r2, r0
   216d4:	strdeq	fp, [r3], -ip
   216d8:	push	{r4, r5, r6, r7, r8, lr}
   216dc:	cmp	r0, #16
   216e0:	bhi	21748 <__assert_fail@plt+0x10470>
   216e4:	mov	r6, r2
   216e8:	mov	r4, r3
   216ec:	ldr	r3, [pc, #88]	; 2174c <__assert_fail@plt+0x10474>
   216f0:	add	r1, r3, #32
   216f4:	add	r3, r3, r0, lsl #2
   216f8:	ldr	r3, [r3, #416]	; 0x1a0
   216fc:	mov	r2, #5
   21700:	add	r1, r1, r3
   21704:	mov	r0, #0
   21708:	bl	110c8 <dcgettext@plt>
   2170c:	mov	r7, r0
   21710:	bl	111b8 <strlen@plt>
   21714:	add	r5, r0, #1
   21718:	cmp	r4, #0
   2171c:	beq	21740 <__assert_fail@plt+0x10468>
   21720:	cmp	r5, r4
   21724:	subhi	r2, r4, #1
   21728:	movhi	r3, #0
   2172c:	strbhi	r3, [r6, r2]
   21730:	movls	r2, r5
   21734:	mov	r1, r7
   21738:	mov	r0, r6
   2173c:	bl	11068 <memcpy@plt>
   21740:	mov	r0, r5
   21744:	pop	{r4, r5, r6, r7, r8, pc}
   21748:	bl	112cc <abort@plt>
   2174c:			; <UNDEFINED> instruction: 0x000245b0
   21750:	push	{r4, r5, r6, lr}
   21754:	mov	r4, r0
   21758:	ldr	r5, [r0]
   2175c:	cmp	r5, #0
   21760:	beq	217a0 <__assert_fail@plt+0x104c8>
   21764:	mov	r3, #1
   21768:	ldr	r2, [pc, #88]	; 217c8 <__assert_fail@plt+0x104f0>
   2176c:	cmp	r2, #0
   21770:	moveq	r3, #0
   21774:	mov	r2, #1
   21778:	ldr	r1, [pc, #76]	; 217cc <__assert_fail@plt+0x104f4>
   2177c:	cmp	r1, #0
   21780:	moveq	r2, #0
   21784:	orr	r3, r3, r2
   21788:	tst	r3, #255	; 0xff
   2178c:	beq	21798 <__assert_fail@plt+0x104c0>
   21790:	add	r0, r5, #136	; 0x88
   21794:	bl	11020 <pthread_mutex_destroy@plt>
   21798:	mov	r0, r5
   2179c:	bl	17750 <__assert_fail@plt+0x6478>
   217a0:	mov	r5, #0
   217a4:	str	r5, [r4]
   217a8:	str	r5, [r4, #4]
   217ac:	ldr	r0, [r4, #16]
   217b0:	bl	22f00 <__assert_fail@plt+0x11c28>
   217b4:	str	r5, [r4, #16]
   217b8:	ldr	r0, [r4, #20]
   217bc:	bl	22f00 <__assert_fail@plt+0x11c28>
   217c0:	str	r5, [r4, #20]
   217c4:	pop	{r4, r5, r6, pc}
	...
   217d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   217d4:	sub	sp, sp, #36	; 0x24
   217d8:	ldr	r4, [sp, #72]	; 0x48
   217dc:	bics	ip, r4, #7
   217e0:	movne	r0, #2
   217e4:	beq	217f0 <__assert_fail@plt+0x10518>
   217e8:	add	sp, sp, #36	; 0x24
   217ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   217f0:	mov	r7, r3
   217f4:	mov	r8, r2
   217f8:	str	r1, [sp, #28]
   217fc:	mov	r5, r0
   21800:	ands	fp, r4, #4
   21804:	beq	218a4 <__assert_fail@plt+0x105cc>
   21808:	ldr	fp, [r3]
   2180c:	ldr	r9, [r3, #4]
   21810:	ldr	sl, [r5]
   21814:	mov	r6, #1
   21818:	ldr	r3, [pc, #148]	; 218b4 <__assert_fail@plt+0x105dc>
   2181c:	cmp	r3, #0
   21820:	moveq	r6, #0
   21824:	mov	r3, #1
   21828:	ldr	r2, [pc, #136]	; 218b8 <__assert_fail@plt+0x105e0>
   2182c:	cmp	r2, #0
   21830:	moveq	r3, #0
   21834:	orr	r6, r6, r3
   21838:	ands	r6, r6, #255	; 0xff
   2183c:	beq	21848 <__assert_fail@plt+0x10570>
   21840:	add	r0, sl, #136	; 0x88
   21844:	bl	11050 <pthread_mutex_lock@plt>
   21848:	ldrb	r3, [r5, #28]
   2184c:	tst	r3, #16
   21850:	str	r4, [sp, #16]
   21854:	movne	r3, #0
   21858:	strne	r3, [sp, #12]
   2185c:	strne	r3, [sp, #8]
   21860:	streq	r7, [sp, #12]
   21864:	streq	r8, [sp, #8]
   21868:	str	r9, [sp, #4]
   2186c:	str	r9, [sp]
   21870:	mov	r3, fp
   21874:	mov	r2, r9
   21878:	ldr	r1, [sp, #28]
   2187c:	mov	r0, r5
   21880:	bl	1d308 <__assert_fail@plt+0xc030>
   21884:	mov	r4, r0
   21888:	cmp	r6, #0
   2188c:	beq	21898 <__assert_fail@plt+0x105c0>
   21890:	add	r0, sl, #136	; 0x88
   21894:	bl	10fb4 <pthread_mutex_unlock@plt>
   21898:	adds	r0, r4, #0
   2189c:	movne	r0, #1
   218a0:	b	217e8 <__assert_fail@plt+0x10510>
   218a4:	ldr	r0, [sp, #28]
   218a8:	bl	111b8 <strlen@plt>
   218ac:	mov	r9, r0
   218b0:	b	21810 <__assert_fail@plt+0x10538>
	...
   218bc:	push	{lr}		; (str lr, [sp, #-4]!)
   218c0:	sub	sp, sp, #20
   218c4:	mov	ip, #1
   218c8:	str	ip, [sp, #12]
   218cc:	ldr	ip, [sp, #24]
   218d0:	str	ip, [sp, #8]
   218d4:	str	r2, [sp, #4]
   218d8:	mov	ip, #0
   218dc:	str	ip, [sp]
   218e0:	bl	210f4 <__assert_fail@plt+0xfe1c>
   218e4:	add	sp, sp, #20
   218e8:	pop	{pc}		; (ldr pc, [sp], #4)
   218ec:	push	{lr}		; (str lr, [sp, #-4]!)
   218f0:	sub	sp, sp, #20
   218f4:	mov	ip, #0
   218f8:	str	ip, [sp, #12]
   218fc:	ldr	ip, [sp, #28]
   21900:	str	ip, [sp, #8]
   21904:	str	r2, [sp, #4]
   21908:	ldr	ip, [sp, #24]
   2190c:	str	ip, [sp]
   21910:	bl	210f4 <__assert_fail@plt+0xfe1c>
   21914:	add	sp, sp, #20
   21918:	pop	{pc}		; (ldr pc, [sp], #4)
   2191c:	push	{lr}		; (str lr, [sp, #-4]!)
   21920:	sub	sp, sp, #28
   21924:	mov	ip, #1
   21928:	str	ip, [sp, #20]
   2192c:	ldr	ip, [sp, #44]	; 0x2c
   21930:	str	ip, [sp, #16]
   21934:	ldr	ip, [sp, #40]	; 0x28
   21938:	str	ip, [sp, #12]
   2193c:	mov	ip, #0
   21940:	str	ip, [sp, #8]
   21944:	ldr	ip, [sp, #36]	; 0x24
   21948:	str	ip, [sp, #4]
   2194c:	ldr	ip, [sp, #32]
   21950:	str	ip, [sp]
   21954:	bl	21494 <__assert_fail@plt+0x101bc>
   21958:	add	sp, sp, #28
   2195c:	pop	{pc}		; (ldr pc, [sp], #4)
   21960:	push	{lr}		; (str lr, [sp, #-4]!)
   21964:	sub	sp, sp, #28
   21968:	mov	ip, #0
   2196c:	str	ip, [sp, #20]
   21970:	ldr	ip, [sp, #48]	; 0x30
   21974:	str	ip, [sp, #16]
   21978:	ldr	ip, [sp, #44]	; 0x2c
   2197c:	str	ip, [sp, #12]
   21980:	ldr	ip, [sp, #40]	; 0x28
   21984:	str	ip, [sp, #8]
   21988:	ldr	ip, [sp, #36]	; 0x24
   2198c:	str	ip, [sp, #4]
   21990:	ldr	ip, [sp, #32]
   21994:	str	ip, [sp]
   21998:	bl	21494 <__assert_fail@plt+0x101bc>
   2199c:	add	sp, sp, #28
   219a0:	pop	{pc}		; (ldr pc, [sp], #4)
   219a4:	cmp	r2, #0
   219a8:	bne	219cc <__assert_fail@plt+0x106f4>
   219ac:	ldrb	r3, [r0, #28]
   219b0:	bic	r3, r3, #6
   219b4:	strb	r3, [r0, #28]
   219b8:	mov	r3, #0
   219bc:	str	r3, [r1]
   219c0:	str	r3, [r1, #8]
   219c4:	str	r3, [r1, #4]
   219c8:	bx	lr
   219cc:	ldrb	ip, [r0, #28]
   219d0:	bic	ip, ip, #4
   219d4:	orr	ip, ip, #2
   219d8:	strb	ip, [r0, #28]
   219dc:	str	r2, [r1]
   219e0:	str	r3, [r1, #4]
   219e4:	ldr	r3, [sp]
   219e8:	str	r3, [r1, #8]
   219ec:	bx	lr
   219f0:	push	{r4, r5, r6, lr}
   219f4:	sub	sp, sp, #32
   219f8:	mov	r4, r0
   219fc:	ldr	r5, [sp, #48]	; 0x30
   21a00:	ldr	r6, [sp, #52]	; 0x34
   21a04:	cmp	r1, #0
   21a08:	beq	21ac0 <__assert_fail@plt+0x107e8>
   21a0c:	str	r3, [sp, #4]
   21a10:	str	r2, [sp]
   21a14:	mov	r3, r1
   21a18:	ldr	r2, [pc, #940]	; 21dcc <__assert_fail@plt+0x10af4>
   21a1c:	mov	r1, #1
   21a20:	bl	11224 <__fprintf_chk@plt>
   21a24:	mov	r2, #5
   21a28:	ldr	r1, [pc, #928]	; 21dd0 <__assert_fail@plt+0x10af8>
   21a2c:	mov	r0, #0
   21a30:	bl	110c8 <dcgettext@plt>
   21a34:	ldr	r3, [pc, #920]	; 21dd4 <__assert_fail@plt+0x10afc>
   21a38:	str	r3, [sp]
   21a3c:	mov	r3, r0
   21a40:	ldr	r2, [pc, #912]	; 21dd8 <__assert_fail@plt+0x10b00>
   21a44:	mov	r1, #1
   21a48:	mov	r0, r4
   21a4c:	bl	11224 <__fprintf_chk@plt>
   21a50:	mov	r1, r4
   21a54:	mov	r0, #10
   21a58:	bl	110bc <fputc_unlocked@plt>
   21a5c:	mov	r2, #5
   21a60:	ldr	r1, [pc, #884]	; 21ddc <__assert_fail@plt+0x10b04>
   21a64:	mov	r0, #0
   21a68:	bl	110c8 <dcgettext@plt>
   21a6c:	ldr	r3, [pc, #876]	; 21de0 <__assert_fail@plt+0x10b08>
   21a70:	mov	r2, r0
   21a74:	mov	r1, #1
   21a78:	mov	r0, r4
   21a7c:	bl	11224 <__fprintf_chk@plt>
   21a80:	mov	r1, r4
   21a84:	mov	r0, #10
   21a88:	bl	110bc <fputc_unlocked@plt>
   21a8c:	cmp	r6, #9
   21a90:	ldrls	pc, [pc, r6, lsl #2]
   21a94:	b	21d64 <__assert_fail@plt+0x10a8c>
   21a98:	strdeq	r1, [r2], -ip
   21a9c:	ldrdeq	r1, [r2], -r8
   21aa0:	andeq	r1, r2, r4, lsl #22
   21aa4:	andeq	r1, r2, r4, lsr fp
   21aa8:	andeq	r1, r2, ip, ror #22
   21aac:	andeq	r1, r2, ip, lsr #23
   21ab0:	strdeq	r1, [r2], -r4
   21ab4:	andeq	r1, r2, r4, asr #24
   21ab8:	muleq	r2, ip, ip
   21abc:	strdeq	r1, [r2], -ip
   21ac0:	str	r3, [sp]
   21ac4:	mov	r3, r2
   21ac8:	ldr	r2, [pc, #788]	; 21de4 <__assert_fail@plt+0x10b0c>
   21acc:	mov	r1, #1
   21ad0:	bl	11224 <__fprintf_chk@plt>
   21ad4:	b	21a24 <__assert_fail@plt+0x1074c>
   21ad8:	mov	r2, #5
   21adc:	ldr	r1, [pc, #772]	; 21de8 <__assert_fail@plt+0x10b10>
   21ae0:	mov	r0, #0
   21ae4:	bl	110c8 <dcgettext@plt>
   21ae8:	ldr	r3, [r5]
   21aec:	mov	r2, r0
   21af0:	mov	r1, #1
   21af4:	mov	r0, r4
   21af8:	bl	11224 <__fprintf_chk@plt>
   21afc:	add	sp, sp, #32
   21b00:	pop	{r4, r5, r6, pc}
   21b04:	mov	r2, #5
   21b08:	ldr	r1, [pc, #732]	; 21dec <__assert_fail@plt+0x10b14>
   21b0c:	mov	r0, #0
   21b10:	bl	110c8 <dcgettext@plt>
   21b14:	ldr	r3, [r5]
   21b18:	ldr	r2, [r5, #4]
   21b1c:	str	r2, [sp]
   21b20:	mov	r2, r0
   21b24:	mov	r1, #1
   21b28:	mov	r0, r4
   21b2c:	bl	11224 <__fprintf_chk@plt>
   21b30:	b	21afc <__assert_fail@plt+0x10824>
   21b34:	mov	r2, #5
   21b38:	ldr	r1, [pc, #688]	; 21df0 <__assert_fail@plt+0x10b18>
   21b3c:	mov	r0, #0
   21b40:	bl	110c8 <dcgettext@plt>
   21b44:	ldr	r3, [r5]
   21b48:	ldr	r2, [r5, #8]
   21b4c:	str	r2, [sp, #4]
   21b50:	ldr	r2, [r5, #4]
   21b54:	str	r2, [sp]
   21b58:	mov	r2, r0
   21b5c:	mov	r1, #1
   21b60:	mov	r0, r4
   21b64:	bl	11224 <__fprintf_chk@plt>
   21b68:	b	21afc <__assert_fail@plt+0x10824>
   21b6c:	mov	r2, #5
   21b70:	ldr	r1, [pc, #636]	; 21df4 <__assert_fail@plt+0x10b1c>
   21b74:	mov	r0, #0
   21b78:	bl	110c8 <dcgettext@plt>
   21b7c:	ldr	r3, [r5]
   21b80:	ldr	r2, [r5, #12]
   21b84:	str	r2, [sp, #8]
   21b88:	ldr	r2, [r5, #8]
   21b8c:	str	r2, [sp, #4]
   21b90:	ldr	r2, [r5, #4]
   21b94:	str	r2, [sp]
   21b98:	mov	r2, r0
   21b9c:	mov	r1, #1
   21ba0:	mov	r0, r4
   21ba4:	bl	11224 <__fprintf_chk@plt>
   21ba8:	b	21afc <__assert_fail@plt+0x10824>
   21bac:	mov	r2, #5
   21bb0:	ldr	r1, [pc, #576]	; 21df8 <__assert_fail@plt+0x10b20>
   21bb4:	mov	r0, #0
   21bb8:	bl	110c8 <dcgettext@plt>
   21bbc:	ldr	r3, [r5]
   21bc0:	ldr	r2, [r5, #16]
   21bc4:	str	r2, [sp, #12]
   21bc8:	ldr	r2, [r5, #12]
   21bcc:	str	r2, [sp, #8]
   21bd0:	ldr	r2, [r5, #8]
   21bd4:	str	r2, [sp, #4]
   21bd8:	ldr	r2, [r5, #4]
   21bdc:	str	r2, [sp]
   21be0:	mov	r2, r0
   21be4:	mov	r1, #1
   21be8:	mov	r0, r4
   21bec:	bl	11224 <__fprintf_chk@plt>
   21bf0:	b	21afc <__assert_fail@plt+0x10824>
   21bf4:	mov	r2, #5
   21bf8:	ldr	r1, [pc, #508]	; 21dfc <__assert_fail@plt+0x10b24>
   21bfc:	mov	r0, #0
   21c00:	bl	110c8 <dcgettext@plt>
   21c04:	ldr	r3, [r5]
   21c08:	ldr	r2, [r5, #20]
   21c0c:	str	r2, [sp, #16]
   21c10:	ldr	r2, [r5, #16]
   21c14:	str	r2, [sp, #12]
   21c18:	ldr	r2, [r5, #12]
   21c1c:	str	r2, [sp, #8]
   21c20:	ldr	r2, [r5, #8]
   21c24:	str	r2, [sp, #4]
   21c28:	ldr	r2, [r5, #4]
   21c2c:	str	r2, [sp]
   21c30:	mov	r2, r0
   21c34:	mov	r1, #1
   21c38:	mov	r0, r4
   21c3c:	bl	11224 <__fprintf_chk@plt>
   21c40:	b	21afc <__assert_fail@plt+0x10824>
   21c44:	mov	r2, #5
   21c48:	ldr	r1, [pc, #432]	; 21e00 <__assert_fail@plt+0x10b28>
   21c4c:	mov	r0, #0
   21c50:	bl	110c8 <dcgettext@plt>
   21c54:	ldr	r3, [r5]
   21c58:	ldr	r2, [r5, #24]
   21c5c:	str	r2, [sp, #20]
   21c60:	ldr	r2, [r5, #20]
   21c64:	str	r2, [sp, #16]
   21c68:	ldr	r2, [r5, #16]
   21c6c:	str	r2, [sp, #12]
   21c70:	ldr	r2, [r5, #12]
   21c74:	str	r2, [sp, #8]
   21c78:	ldr	r2, [r5, #8]
   21c7c:	str	r2, [sp, #4]
   21c80:	ldr	r2, [r5, #4]
   21c84:	str	r2, [sp]
   21c88:	mov	r2, r0
   21c8c:	mov	r1, #1
   21c90:	mov	r0, r4
   21c94:	bl	11224 <__fprintf_chk@plt>
   21c98:	b	21afc <__assert_fail@plt+0x10824>
   21c9c:	mov	r2, #5
   21ca0:	ldr	r1, [pc, #348]	; 21e04 <__assert_fail@plt+0x10b2c>
   21ca4:	mov	r0, #0
   21ca8:	bl	110c8 <dcgettext@plt>
   21cac:	ldr	r3, [r5]
   21cb0:	ldr	r2, [r5, #28]
   21cb4:	str	r2, [sp, #24]
   21cb8:	ldr	r2, [r5, #24]
   21cbc:	str	r2, [sp, #20]
   21cc0:	ldr	r2, [r5, #20]
   21cc4:	str	r2, [sp, #16]
   21cc8:	ldr	r2, [r5, #16]
   21ccc:	str	r2, [sp, #12]
   21cd0:	ldr	r2, [r5, #12]
   21cd4:	str	r2, [sp, #8]
   21cd8:	ldr	r2, [r5, #8]
   21cdc:	str	r2, [sp, #4]
   21ce0:	ldr	r2, [r5, #4]
   21ce4:	str	r2, [sp]
   21ce8:	mov	r2, r0
   21cec:	mov	r1, #1
   21cf0:	mov	r0, r4
   21cf4:	bl	11224 <__fprintf_chk@plt>
   21cf8:	b	21afc <__assert_fail@plt+0x10824>
   21cfc:	mov	r2, #5
   21d00:	ldr	r1, [pc, #256]	; 21e08 <__assert_fail@plt+0x10b30>
   21d04:	mov	r0, #0
   21d08:	bl	110c8 <dcgettext@plt>
   21d0c:	ldr	r3, [r5]
   21d10:	ldr	r2, [r5, #32]
   21d14:	str	r2, [sp, #28]
   21d18:	ldr	r2, [r5, #28]
   21d1c:	str	r2, [sp, #24]
   21d20:	ldr	r2, [r5, #24]
   21d24:	str	r2, [sp, #20]
   21d28:	ldr	r2, [r5, #20]
   21d2c:	str	r2, [sp, #16]
   21d30:	ldr	r2, [r5, #16]
   21d34:	str	r2, [sp, #12]
   21d38:	ldr	r2, [r5, #12]
   21d3c:	str	r2, [sp, #8]
   21d40:	ldr	r2, [r5, #8]
   21d44:	str	r2, [sp, #4]
   21d48:	ldr	r2, [r5, #4]
   21d4c:	str	r2, [sp]
   21d50:	mov	r2, r0
   21d54:	mov	r1, #1
   21d58:	mov	r0, r4
   21d5c:	bl	11224 <__fprintf_chk@plt>
   21d60:	b	21afc <__assert_fail@plt+0x10824>
   21d64:	mov	r2, #5
   21d68:	ldr	r1, [pc, #156]	; 21e0c <__assert_fail@plt+0x10b34>
   21d6c:	mov	r0, #0
   21d70:	bl	110c8 <dcgettext@plt>
   21d74:	ldr	r3, [r5]
   21d78:	ldr	r2, [r5, #32]
   21d7c:	str	r2, [sp, #28]
   21d80:	ldr	r2, [r5, #28]
   21d84:	str	r2, [sp, #24]
   21d88:	ldr	r2, [r5, #24]
   21d8c:	str	r2, [sp, #20]
   21d90:	ldr	r2, [r5, #20]
   21d94:	str	r2, [sp, #16]
   21d98:	ldr	r2, [r5, #16]
   21d9c:	str	r2, [sp, #12]
   21da0:	ldr	r2, [r5, #12]
   21da4:	str	r2, [sp, #8]
   21da8:	ldr	r2, [r5, #8]
   21dac:	str	r2, [sp, #4]
   21db0:	ldr	r2, [r5, #4]
   21db4:	str	r2, [sp]
   21db8:	mov	r2, r0
   21dbc:	mov	r1, #1
   21dc0:	mov	r0, r4
   21dc4:	bl	11224 <__fprintf_chk@plt>
   21dc8:	b	21afc <__assert_fail@plt+0x10824>
   21dcc:	strdeq	r4, [r2], -ip
   21dd0:	andeq	r4, r2, r0, lsl r8
   21dd4:	andeq	r0, r0, r6, ror #15
   21dd8:	andeq	r4, r2, r8, ror #21
   21ddc:	andeq	r4, r2, r4, lsl r8
   21de0:	andeq	r4, r2, r0, asr #17
   21de4:	andeq	r4, r2, r8, lsl #16
   21de8:	andeq	r4, r2, r4, ror #17
   21dec:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   21df0:	andeq	r4, r2, ip, lsl #18
   21df4:	andeq	r4, r2, r8, lsr #18
   21df8:	andeq	r4, r2, r8, asr #18
   21dfc:	andeq	r4, r2, ip, ror #18
   21e00:	muleq	r2, r4, r9
   21e04:	andeq	r4, r2, r0, asr #19
   21e08:	strdeq	r4, [r2], -r0
   21e0c:	andeq	r4, r2, r4, lsr #20
   21e10:	push	{r4, r5, lr}
   21e14:	sub	sp, sp, #12
   21e18:	ldr	r5, [sp, #24]
   21e1c:	ldr	ip, [r5]
   21e20:	cmp	ip, #0
   21e24:	beq	21e54 <__assert_fail@plt+0x10b7c>
   21e28:	mov	lr, r5
   21e2c:	mov	ip, #0
   21e30:	add	ip, ip, #1
   21e34:	ldr	r4, [lr, #4]!
   21e38:	cmp	r4, #0
   21e3c:	bne	21e30 <__assert_fail@plt+0x10b58>
   21e40:	str	ip, [sp, #4]
   21e44:	str	r5, [sp]
   21e48:	bl	219f0 <__assert_fail@plt+0x10718>
   21e4c:	add	sp, sp, #12
   21e50:	pop	{r4, r5, pc}
   21e54:	mov	ip, #0
   21e58:	b	21e40 <__assert_fail@plt+0x10b68>
   21e5c:	push	{r4, r5, lr}
   21e60:	sub	sp, sp, #52	; 0x34
   21e64:	ldr	r4, [sp, #64]	; 0x40
   21e68:	sub	r4, r4, #4
   21e6c:	add	r5, sp, #4
   21e70:	mov	ip, #0
   21e74:	ldr	lr, [r4, #4]!
   21e78:	str	lr, [r5, #4]!
   21e7c:	cmp	lr, #0
   21e80:	beq	21e90 <__assert_fail@plt+0x10bb8>
   21e84:	add	ip, ip, #1
   21e88:	cmp	ip, #10
   21e8c:	bne	21e74 <__assert_fail@plt+0x10b9c>
   21e90:	str	ip, [sp, #4]
   21e94:	add	ip, sp, #8
   21e98:	str	ip, [sp]
   21e9c:	bl	219f0 <__assert_fail@plt+0x10718>
   21ea0:	add	sp, sp, #52	; 0x34
   21ea4:	pop	{r4, r5, pc}
   21ea8:	push	{r3}		; (str r3, [sp, #-4]!)
   21eac:	push	{lr}		; (str lr, [sp, #-4]!)
   21eb0:	sub	sp, sp, #16
   21eb4:	add	r3, sp, #24
   21eb8:	str	r3, [sp, #12]
   21ebc:	str	r3, [sp]
   21ec0:	ldr	r3, [sp, #20]
   21ec4:	bl	21e5c <__assert_fail@plt+0x10b84>
   21ec8:	add	sp, sp, #16
   21ecc:	pop	{lr}		; (ldr lr, [sp], #4)
   21ed0:	add	sp, sp, #4
   21ed4:	bx	lr
   21ed8:	push	{r4, lr}
   21edc:	ldr	r3, [pc, #112]	; 21f54 <__assert_fail@plt+0x10c7c>
   21ee0:	ldr	r1, [r3]
   21ee4:	mov	r0, #10
   21ee8:	bl	110bc <fputc_unlocked@plt>
   21eec:	mov	r2, #5
   21ef0:	ldr	r1, [pc, #96]	; 21f58 <__assert_fail@plt+0x10c80>
   21ef4:	mov	r0, #0
   21ef8:	bl	110c8 <dcgettext@plt>
   21efc:	ldr	r2, [pc, #88]	; 21f5c <__assert_fail@plt+0x10c84>
   21f00:	mov	r1, r0
   21f04:	mov	r0, #1
   21f08:	bl	1120c <__printf_chk@plt>
   21f0c:	mov	r2, #5
   21f10:	ldr	r1, [pc, #72]	; 21f60 <__assert_fail@plt+0x10c88>
   21f14:	mov	r0, #0
   21f18:	bl	110c8 <dcgettext@plt>
   21f1c:	ldr	r3, [pc, #64]	; 21f64 <__assert_fail@plt+0x10c8c>
   21f20:	ldr	r2, [pc, #64]	; 21f68 <__assert_fail@plt+0x10c90>
   21f24:	mov	r1, r0
   21f28:	mov	r0, #1
   21f2c:	bl	1120c <__printf_chk@plt>
   21f30:	mov	r2, #5
   21f34:	ldr	r1, [pc, #48]	; 21f6c <__assert_fail@plt+0x10c94>
   21f38:	mov	r0, #0
   21f3c:	bl	110c8 <dcgettext@plt>
   21f40:	ldr	r2, [pc, #40]	; 21f70 <__assert_fail@plt+0x10c98>
   21f44:	mov	r1, r0
   21f48:	mov	r0, #1
   21f4c:	bl	1120c <__printf_chk@plt>
   21f50:	pop	{r4, pc}
   21f54:	ldrdeq	r5, [r3], -r4
   21f58:	andeq	r4, r2, r0, ror #20
   21f5c:	andeq	r4, r2, r4, ror sl
   21f60:	andeq	r4, r2, ip, lsl #21
   21f64:	andeq	r4, r2, r8, ror #1
   21f68:	andeq	r4, r2, r0, lsl r1
   21f6c:	andeq	r4, r2, r0, lsr #21
   21f70:	andeq	r4, r2, r8, asr #21
   21f74:	push	{r4, lr}
   21f78:	bl	22d3c <__assert_fail@plt+0x11a64>
   21f7c:	cmp	r0, #0
   21f80:	popne	{r4, pc}
   21f84:	bl	22518 <__assert_fail@plt+0x11240>
   21f88:	push	{r4, lr}
   21f8c:	bl	22d3c <__assert_fail@plt+0x11a64>
   21f90:	cmp	r0, #0
   21f94:	popne	{r4, pc}
   21f98:	bl	22518 <__assert_fail@plt+0x11240>
   21f9c:	push	{r4, lr}
   21fa0:	bl	21f74 <__assert_fail@plt+0x10c9c>
   21fa4:	pop	{r4, pc}
   21fa8:	push	{r4, r5, r6, lr}
   21fac:	mov	r5, r0
   21fb0:	mov	r4, r1
   21fb4:	bl	22d6c <__assert_fail@plt+0x11a94>
   21fb8:	cmp	r0, #0
   21fbc:	popne	{r4, r5, r6, pc}
   21fc0:	adds	r4, r4, #0
   21fc4:	movne	r4, #1
   21fc8:	cmp	r5, #0
   21fcc:	orreq	r4, r4, #1
   21fd0:	cmp	r4, #0
   21fd4:	popeq	{r4, r5, r6, pc}
   21fd8:	bl	22518 <__assert_fail@plt+0x11240>
   21fdc:	push	{r4, lr}
   21fe0:	cmp	r1, #0
   21fe4:	orreq	r1, r1, #1
   21fe8:	bl	22d6c <__assert_fail@plt+0x11a94>
   21fec:	cmp	r0, #0
   21ff0:	popne	{r4, pc}
   21ff4:	bl	22518 <__assert_fail@plt+0x11240>
   21ff8:	push	{r4, r5, r6, lr}
   21ffc:	mov	r6, r0
   22000:	mov	r5, r1
   22004:	mov	r4, r2
   22008:	bl	22fe4 <__assert_fail@plt+0x11d0c>
   2200c:	cmp	r0, #0
   22010:	popne	{r4, r5, r6, pc}
   22014:	cmp	r6, #0
   22018:	beq	22028 <__assert_fail@plt+0x10d50>
   2201c:	cmp	r5, #0
   22020:	cmpne	r4, #0
   22024:	popeq	{r4, r5, r6, pc}
   22028:	bl	22518 <__assert_fail@plt+0x11240>
   2202c:	push	{r4, lr}
   22030:	bl	21ff8 <__assert_fail@plt+0x10d20>
   22034:	pop	{r4, pc}
   22038:	push	{r4, lr}
   2203c:	mov	ip, r1
   22040:	mov	r3, r2
   22044:	cmp	r2, #0
   22048:	cmpne	r1, #0
   2204c:	moveq	r3, #1
   22050:	moveq	ip, r3
   22054:	mov	r2, r3
   22058:	mov	r1, ip
   2205c:	bl	22fe4 <__assert_fail@plt+0x11d0c>
   22060:	cmp	r0, #0
   22064:	popne	{r4, pc}
   22068:	bl	22518 <__assert_fail@plt+0x11240>
   2206c:	push	{r4, lr}
   22070:	mov	r2, r1
   22074:	mov	r1, r0
   22078:	mov	r0, #0
   2207c:	bl	21ff8 <__assert_fail@plt+0x10d20>
   22080:	pop	{r4, pc}
   22084:	push	{r4, lr}
   22088:	mov	r2, r1
   2208c:	mov	r1, r0
   22090:	mov	r0, #0
   22094:	bl	22038 <__assert_fail@plt+0x10d60>
   22098:	pop	{r4, pc}
   2209c:	push	{r4, r5, r6, r7, r8, lr}
   220a0:	mov	r5, r1
   220a4:	mov	r6, r2
   220a8:	ldr	r4, [r1]
   220ac:	subs	r7, r0, #0
   220b0:	beq	220cc <__assert_fail@plt+0x10df4>
   220b4:	lsr	r2, r4, #1
   220b8:	add	r3, r2, #1
   220bc:	mvn	r3, r3
   220c0:	cmp	r4, r3
   220c4:	bls	220f0 <__assert_fail@plt+0x10e18>
   220c8:	bl	22518 <__assert_fail@plt+0x11240>
   220cc:	cmp	r4, #0
   220d0:	bne	220f8 <__assert_fail@plt+0x10e20>
   220d4:	mov	r1, r2
   220d8:	mov	r0, #64	; 0x40
   220dc:	bl	23138 <__assert_fail@plt+0x11e60>
   220e0:	cmp	r0, #0
   220e4:	movne	r4, r0
   220e8:	addeq	r4, r0, #1
   220ec:	b	220f8 <__assert_fail@plt+0x10e20>
   220f0:	add	r4, r4, #1
   220f4:	add	r4, r4, r2
   220f8:	mov	r2, r6
   220fc:	mov	r1, r4
   22100:	mov	r0, r7
   22104:	bl	21ff8 <__assert_fail@plt+0x10d20>
   22108:	str	r4, [r5]
   2210c:	pop	{r4, r5, r6, r7, r8, pc}
   22110:	push	{r4, lr}
   22114:	mov	r2, #1
   22118:	bl	2209c <__assert_fail@plt+0x10dc4>
   2211c:	pop	{r4, pc}
   22120:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22124:	sub	sp, sp, #12
   22128:	mov	fp, r0
   2212c:	mov	sl, r1
   22130:	mov	r9, r2
   22134:	mov	r7, r3
   22138:	ldr	r6, [sp, #48]	; 0x30
   2213c:	ldr	r5, [r1]
   22140:	asrs	r4, r5, #1
   22144:	bmi	222a0 <__assert_fail@plt+0x10fc8>
   22148:	cmp	r5, #0
   2214c:	blt	222b4 <__assert_fail@plt+0x10fdc>
   22150:	mvn	r3, #-2147483648	; 0x80000000
   22154:	sub	r3, r3, r4
   22158:	cmp	r5, r3
   2215c:	movle	r3, #0
   22160:	movgt	r3, #1
   22164:	cmp	r3, #0
   22168:	addeq	r4, r4, r5
   2216c:	mvnne	r4, #-2147483648	; 0x80000000
   22170:	mvn	r8, r7
   22174:	lsr	r8, r8, #31
   22178:	cmp	r7, r4
   2217c:	movge	r3, #0
   22180:	andlt	r3, r8, #1
   22184:	cmp	r3, #0
   22188:	movne	r4, r7
   2218c:	cmp	r6, #0
   22190:	blt	222c8 <__assert_fail@plt+0x10ff0>
   22194:	cmp	r6, #0
   22198:	beq	22374 <__assert_fail@plt+0x1109c>
   2219c:	cmp	r4, #0
   221a0:	blt	22324 <__assert_fail@plt+0x1104c>
   221a4:	mov	r1, r6
   221a8:	mvn	r0, #-2147483648	; 0x80000000
   221ac:	bl	23344 <__assert_fail@plt+0x1206c>
   221b0:	cmp	r0, r4
   221b4:	movge	r0, #0
   221b8:	movlt	r0, #1
   221bc:	cmp	r0, #0
   221c0:	mvnne	r3, #-2147483648	; 0x80000000
   221c4:	strne	r3, [sp, #4]
   221c8:	beq	2235c <__assert_fail@plt+0x11084>
   221cc:	mov	r1, r6
   221d0:	ldr	r0, [sp, #4]
   221d4:	bl	23344 <__assert_fail@plt+0x1206c>
   221d8:	mov	r4, r0
   221dc:	mov	r1, r6
   221e0:	ldr	r0, [sp, #4]
   221e4:	bl	23564 <__assert_fail@plt+0x1228c>
   221e8:	ldr	r3, [sp, #4]
   221ec:	sub	r1, r3, r1
   221f0:	cmp	fp, #0
   221f4:	moveq	r3, #0
   221f8:	streq	r3, [sl]
   221fc:	sub	r3, r4, r5
   22200:	cmp	r3, r9
   22204:	bge	2228c <__assert_fail@plt+0x10fb4>
   22208:	cmp	r9, #0
   2220c:	blt	22380 <__assert_fail@plt+0x110a8>
   22210:	cmp	r5, #0
   22214:	blt	22394 <__assert_fail@plt+0x110bc>
   22218:	mvn	r3, #-2147483648	; 0x80000000
   2221c:	sub	r3, r3, r9
   22220:	cmp	r5, r3
   22224:	movle	r3, #0
   22228:	movgt	r3, #1
   2222c:	cmp	r3, #0
   22230:	bne	2243c <__assert_fail@plt+0x11164>
   22234:	add	r5, r5, r9
   22238:	mov	r4, r5
   2223c:	cmp	r7, r5
   22240:	movge	r7, #0
   22244:	andlt	r7, r8, #1
   22248:	cmp	r7, #0
   2224c:	bne	2243c <__assert_fail@plt+0x11164>
   22250:	cmp	r6, #0
   22254:	blt	223a8 <__assert_fail@plt+0x110d0>
   22258:	cmp	r6, #0
   2225c:	beq	22288 <__assert_fail@plt+0x10fb0>
   22260:	cmp	r5, #0
   22264:	blt	22404 <__assert_fail@plt+0x1112c>
   22268:	mov	r1, r6
   2226c:	mvn	r0, #-2147483648	; 0x80000000
   22270:	bl	23344 <__assert_fail@plt+0x1206c>
   22274:	cmp	r5, r0
   22278:	movle	r0, #0
   2227c:	movgt	r0, #1
   22280:	cmp	r0, #0
   22284:	bne	2243c <__assert_fail@plt+0x11164>
   22288:	mul	r1, r5, r6
   2228c:	mov	r0, fp
   22290:	bl	21fa8 <__assert_fail@plt+0x10cd0>
   22294:	str	r4, [sl]
   22298:	add	sp, sp, #12
   2229c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   222a0:	rsb	r3, r4, #-2147483648	; 0x80000000
   222a4:	cmp	r5, r3
   222a8:	movge	r3, #0
   222ac:	movlt	r3, #1
   222b0:	b	22164 <__assert_fail@plt+0x10e8c>
   222b4:	rsb	r3, r5, #-2147483648	; 0x80000000
   222b8:	cmp	r4, r3
   222bc:	movge	r3, #0
   222c0:	movlt	r3, #1
   222c4:	b	22164 <__assert_fail@plt+0x10e8c>
   222c8:	cmp	r4, #0
   222cc:	blt	222f4 <__assert_fail@plt+0x1101c>
   222d0:	cmn	r6, #1
   222d4:	beq	22310 <__assert_fail@plt+0x11038>
   222d8:	mov	r1, r6
   222dc:	mov	r0, #-2147483648	; 0x80000000
   222e0:	bl	23344 <__assert_fail@plt+0x1206c>
   222e4:	cmp	r0, r4
   222e8:	movge	r0, #0
   222ec:	movlt	r0, #1
   222f0:	b	221bc <__assert_fail@plt+0x10ee4>
   222f4:	mov	r1, r6
   222f8:	mvn	r0, #-2147483648	; 0x80000000
   222fc:	bl	23344 <__assert_fail@plt+0x1206c>
   22300:	cmp	r0, r4
   22304:	movle	r0, #0
   22308:	movgt	r0, #1
   2230c:	b	221bc <__assert_fail@plt+0x10ee4>
   22310:	add	r0, r4, #-2147483648	; 0x80000000
   22314:	cmp	r0, #0
   22318:	movle	r0, #0
   2231c:	movgt	r0, #1
   22320:	b	221bc <__assert_fail@plt+0x10ee4>
   22324:	cmn	r4, #1
   22328:	beq	22348 <__assert_fail@plt+0x11070>
   2232c:	mov	r1, r4
   22330:	mov	r0, #-2147483648	; 0x80000000
   22334:	bl	23344 <__assert_fail@plt+0x1206c>
   22338:	cmp	r6, r0
   2233c:	movle	r0, #0
   22340:	movgt	r0, #1
   22344:	b	221bc <__assert_fail@plt+0x10ee4>
   22348:	add	r0, r6, #-2147483648	; 0x80000000
   2234c:	cmp	r0, #0
   22350:	movle	r0, #0
   22354:	movgt	r0, #1
   22358:	b	221bc <__assert_fail@plt+0x10ee4>
   2235c:	mul	r1, r6, r4
   22360:	cmp	r1, #63	; 0x3f
   22364:	movle	r3, #64	; 0x40
   22368:	strle	r3, [sp, #4]
   2236c:	bgt	221f0 <__assert_fail@plt+0x10f18>
   22370:	b	221cc <__assert_fail@plt+0x10ef4>
   22374:	mov	r3, #64	; 0x40
   22378:	str	r3, [sp, #4]
   2237c:	b	221cc <__assert_fail@plt+0x10ef4>
   22380:	rsb	r3, r9, #-2147483648	; 0x80000000
   22384:	cmp	r5, r3
   22388:	movge	r3, #0
   2238c:	movlt	r3, #1
   22390:	b	2222c <__assert_fail@plt+0x10f54>
   22394:	rsb	r3, r5, #-2147483648	; 0x80000000
   22398:	cmp	r9, r3
   2239c:	movge	r3, #0
   223a0:	movlt	r3, #1
   223a4:	b	2222c <__assert_fail@plt+0x10f54>
   223a8:	cmp	r5, #0
   223ac:	blt	223d4 <__assert_fail@plt+0x110fc>
   223b0:	cmn	r6, #1
   223b4:	beq	223f0 <__assert_fail@plt+0x11118>
   223b8:	mov	r1, r6
   223bc:	mov	r0, #-2147483648	; 0x80000000
   223c0:	bl	23344 <__assert_fail@plt+0x1206c>
   223c4:	cmp	r5, r0
   223c8:	movle	r0, #0
   223cc:	movgt	r0, #1
   223d0:	b	22280 <__assert_fail@plt+0x10fa8>
   223d4:	mov	r1, r6
   223d8:	mvn	r0, #-2147483648	; 0x80000000
   223dc:	bl	23344 <__assert_fail@plt+0x1206c>
   223e0:	cmp	r5, r0
   223e4:	movge	r0, #0
   223e8:	movlt	r0, #1
   223ec:	b	22280 <__assert_fail@plt+0x10fa8>
   223f0:	add	r0, r5, #-2147483648	; 0x80000000
   223f4:	cmp	r0, #0
   223f8:	movle	r0, #0
   223fc:	movgt	r0, #1
   22400:	b	22280 <__assert_fail@plt+0x10fa8>
   22404:	cmn	r5, #1
   22408:	beq	22428 <__assert_fail@plt+0x11150>
   2240c:	mov	r1, r5
   22410:	mov	r0, #-2147483648	; 0x80000000
   22414:	bl	23344 <__assert_fail@plt+0x1206c>
   22418:	cmp	r6, r0
   2241c:	movle	r0, #0
   22420:	movgt	r0, #1
   22424:	b	22280 <__assert_fail@plt+0x10fa8>
   22428:	add	r0, r6, #-2147483648	; 0x80000000
   2242c:	cmp	r0, #0
   22430:	movle	r0, #0
   22434:	movgt	r0, #1
   22438:	b	22280 <__assert_fail@plt+0x10fa8>
   2243c:	bl	22518 <__assert_fail@plt+0x11240>
   22440:	push	{r4, lr}
   22444:	bl	22cec <__assert_fail@plt+0x11a14>
   22448:	cmp	r0, #0
   2244c:	popne	{r4, pc}
   22450:	bl	22518 <__assert_fail@plt+0x11240>
   22454:	push	{r4, lr}
   22458:	mov	r1, #1
   2245c:	bl	22440 <__assert_fail@plt+0x11168>
   22460:	pop	{r4, pc}
   22464:	push	{r4, lr}
   22468:	bl	22cec <__assert_fail@plt+0x11a14>
   2246c:	cmp	r0, #0
   22470:	popne	{r4, pc}
   22474:	bl	22518 <__assert_fail@plt+0x11240>
   22478:	push	{r4, lr}
   2247c:	mov	r1, #1
   22480:	bl	22464 <__assert_fail@plt+0x1118c>
   22484:	pop	{r4, pc}
   22488:	push	{r4, r5, r6, lr}
   2248c:	mov	r5, r0
   22490:	mov	r4, r1
   22494:	mov	r0, r1
   22498:	bl	21f74 <__assert_fail@plt+0x10c9c>
   2249c:	mov	r2, r4
   224a0:	mov	r1, r5
   224a4:	bl	11068 <memcpy@plt>
   224a8:	pop	{r4, r5, r6, pc}
   224ac:	push	{r4, r5, r6, lr}
   224b0:	mov	r5, r0
   224b4:	mov	r4, r1
   224b8:	mov	r0, r1
   224bc:	bl	21f88 <__assert_fail@plt+0x10cb0>
   224c0:	mov	r2, r4
   224c4:	mov	r1, r5
   224c8:	bl	11068 <memcpy@plt>
   224cc:	pop	{r4, r5, r6, pc}
   224d0:	push	{r4, r5, r6, lr}
   224d4:	mov	r5, r0
   224d8:	mov	r4, r1
   224dc:	add	r0, r1, #1
   224e0:	bl	21f88 <__assert_fail@plt+0x10cb0>
   224e4:	mov	r2, #0
   224e8:	strb	r2, [r0, r4]
   224ec:	mov	r2, r4
   224f0:	mov	r1, r5
   224f4:	bl	11068 <memcpy@plt>
   224f8:	pop	{r4, r5, r6, pc}
   224fc:	push	{r4, lr}
   22500:	mov	r4, r0
   22504:	bl	111b8 <strlen@plt>
   22508:	add	r1, r0, #1
   2250c:	mov	r0, r4
   22510:	bl	22488 <__assert_fail@plt+0x111b0>
   22514:	pop	{r4, pc}
   22518:	push	{r4, lr}
   2251c:	ldr	r3, [pc, #40]	; 2254c <__assert_fail@plt+0x11274>
   22520:	ldr	r4, [r3]
   22524:	mov	r2, #5
   22528:	ldr	r1, [pc, #32]	; 22550 <__assert_fail@plt+0x11278>
   2252c:	mov	r0, #0
   22530:	bl	110c8 <dcgettext@plt>
   22534:	mov	r3, r0
   22538:	ldr	r2, [pc, #20]	; 22554 <__assert_fail@plt+0x1127c>
   2253c:	mov	r1, #0
   22540:	mov	r0, r4
   22544:	bl	11140 <error@plt>
   22548:	bl	112cc <abort@plt>
   2254c:	andeq	r5, r3, r4, ror r1
   22550:	andeq	r4, r2, r8, lsl fp
   22554:	strdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   22558:	push	{r4, r5, r6, r7, lr}
   2255c:	sub	sp, sp, #20
   22560:	mov	r7, r0
   22564:	mov	r4, r2
   22568:	mov	r5, r3
   2256c:	ldr	r6, [sp, #56]	; 0x38
   22570:	ldr	r3, [sp, #48]	; 0x30
   22574:	str	r3, [sp]
   22578:	add	r3, sp, #8
   2257c:	mov	r2, r1
   22580:	mov	r1, #0
   22584:	bl	228a8 <__assert_fail@plt+0x115d0>
   22588:	cmp	r0, #0
   2258c:	bne	22628 <__assert_fail@plt+0x11350>
   22590:	ldrd	r0, [sp, #8]
   22594:	ldrd	r2, [sp, #40]	; 0x28
   22598:	cmp	r2, r0
   2259c:	sbcs	r3, r3, r1
   225a0:	movlt	r3, #1
   225a4:	movge	r3, #0
   225a8:	cmp	r0, r4
   225ac:	sbcs	r2, r1, r5
   225b0:	orrlt	r3, r3, #1
   225b4:	cmp	r3, #0
   225b8:	beq	226a0 <__assert_fail@plt+0x113c8>
   225bc:	cmp	r0, #1073741824	; 0x40000000
   225c0:	sbcs	r3, r1, #0
   225c4:	blt	225f4 <__assert_fail@plt+0x1131c>
   225c8:	bl	111d0 <__errno_location@plt>
   225cc:	mov	r3, #75	; 0x4b
   225d0:	str	r3, [r0]
   225d4:	cmp	r6, #0
   225d8:	bne	22694 <__assert_fail@plt+0x113bc>
   225dc:	mov	r6, #1
   225e0:	bl	111d0 <__errno_location@plt>
   225e4:	ldr	r4, [r0]
   225e8:	cmp	r4, #22
   225ec:	moveq	r4, #0
   225f0:	b	22664 <__assert_fail@plt+0x1138c>
   225f4:	mov	r2, #-1073741824	; 0xc0000000
   225f8:	mvn	r3, #0
   225fc:	cmp	r0, r2
   22600:	sbcs	r3, r1, r3
   22604:	bge	22618 <__assert_fail@plt+0x11340>
   22608:	bl	111d0 <__errno_location@plt>
   2260c:	mov	r3, #75	; 0x4b
   22610:	str	r3, [r0]
   22614:	b	225d4 <__assert_fail@plt+0x112fc>
   22618:	bl	111d0 <__errno_location@plt>
   2261c:	mov	r3, #34	; 0x22
   22620:	str	r3, [r0]
   22624:	b	225d4 <__assert_fail@plt+0x112fc>
   22628:	cmp	r0, #1
   2262c:	beq	22644 <__assert_fail@plt+0x1136c>
   22630:	cmp	r0, #3
   22634:	beq	22684 <__assert_fail@plt+0x113ac>
   22638:	cmp	r6, #0
   2263c:	moveq	r6, #1
   22640:	b	225e0 <__assert_fail@plt+0x11308>
   22644:	bl	111d0 <__errno_location@plt>
   22648:	mov	r3, #75	; 0x4b
   2264c:	str	r3, [r0]
   22650:	cmp	r6, #0
   22654:	bne	225e0 <__assert_fail@plt+0x11308>
   22658:	bl	111d0 <__errno_location@plt>
   2265c:	ldr	r4, [r0]
   22660:	mov	r6, #1
   22664:	mov	r0, r7
   22668:	bl	14688 <__assert_fail@plt+0x33b0>
   2266c:	str	r0, [sp]
   22670:	ldr	r3, [sp, #52]	; 0x34
   22674:	ldr	r2, [pc, #44]	; 226a8 <__assert_fail@plt+0x113d0>
   22678:	mov	r1, r4
   2267c:	mov	r0, r6
   22680:	bl	11140 <error@plt>
   22684:	bl	111d0 <__errno_location@plt>
   22688:	mov	r3, #0
   2268c:	str	r3, [r0]
   22690:	b	22650 <__assert_fail@plt+0x11378>
   22694:	bl	111d0 <__errno_location@plt>
   22698:	ldr	r4, [r0]
   2269c:	b	22664 <__assert_fail@plt+0x1138c>
   226a0:	add	sp, sp, #20
   226a4:	pop	{r4, r5, r6, r7, pc}
   226a8:	muleq	r2, r0, r4
   226ac:	push	{r4, r5, lr}
   226b0:	sub	sp, sp, #28
   226b4:	ldr	r1, [sp, #56]	; 0x38
   226b8:	str	r1, [sp, #16]
   226bc:	ldr	r1, [sp, #52]	; 0x34
   226c0:	str	r1, [sp, #12]
   226c4:	ldr	r1, [sp, #48]	; 0x30
   226c8:	str	r1, [sp, #8]
   226cc:	ldrd	r4, [sp, #40]	; 0x28
   226d0:	strd	r4, [sp]
   226d4:	mov	r1, #10
   226d8:	bl	22558 <__assert_fail@plt+0x11280>
   226dc:	add	sp, sp, #28
   226e0:	pop	{r4, r5, pc}
   226e4:	push	{r4, r5, r6, r7, r8, lr}
   226e8:	mov	r5, r0
   226ec:	subs	r4, r1, #0
   226f0:	blt	2274c <__assert_fail@plt+0x11474>
   226f4:	cmp	r4, #0
   226f8:	beq	227c0 <__assert_fail@plt+0x114e8>
   226fc:	ldrd	r6, [r0]
   22700:	cmp	r6, #0
   22704:	sbcs	r3, r7, #0
   22708:	blt	22804 <__assert_fail@plt+0x1152c>
   2270c:	mov	r2, r4
   22710:	asr	r3, r4, #31
   22714:	mvn	r0, #0
   22718:	mvn	r1, #-2147483648	; 0x80000000
   2271c:	bl	23584 <__assert_fail@plt+0x122ac>
   22720:	cmp	r0, r6
   22724:	sbcs	r3, r1, r7
   22728:	movlt	r3, #1
   2272c:	movge	r3, #0
   22730:	cmp	r3, #0
   22734:	mvnne	r2, #0
   22738:	mvnne	r3, #-2147483648	; 0x80000000
   2273c:	beq	227c0 <__assert_fail@plt+0x114e8>
   22740:	strd	r2, [r5]
   22744:	mov	r0, #1
   22748:	pop	{r4, r5, r6, r7, r8, pc}
   2274c:	ldrd	r6, [r0]
   22750:	cmp	r6, #0
   22754:	sbcs	r3, r7, #0
   22758:	blt	2278c <__assert_fail@plt+0x114b4>
   2275c:	cmn	r4, #1
   22760:	beq	227e8 <__assert_fail@plt+0x11510>
   22764:	mov	r2, r4
   22768:	asr	r3, r4, #31
   2276c:	mov	r0, #0
   22770:	mov	r1, #-2147483648	; 0x80000000
   22774:	bl	23584 <__assert_fail@plt+0x122ac>
   22778:	cmp	r0, r6
   2277c:	sbcs	r3, r1, r7
   22780:	movlt	r3, #1
   22784:	movge	r3, #0
   22788:	b	22730 <__assert_fail@plt+0x11458>
   2278c:	mov	r2, r4
   22790:	asr	r3, r4, #31
   22794:	mvn	r0, #0
   22798:	mvn	r1, #-2147483648	; 0x80000000
   2279c:	bl	23584 <__assert_fail@plt+0x122ac>
   227a0:	cmp	r6, r0
   227a4:	sbcs	r3, r7, r1
   227a8:	movlt	r3, #1
   227ac:	movge	r3, #0
   227b0:	cmp	r3, #0
   227b4:	movne	r2, #0
   227b8:	movne	r3, #-2147483648	; 0x80000000
   227bc:	bne	22740 <__assert_fail@plt+0x11468>
   227c0:	asr	r3, r4, #31
   227c4:	ldr	r1, [r5, #4]
   227c8:	ldr	r2, [r5]
   227cc:	mul	r3, r3, r2
   227d0:	mla	r1, r4, r1, r3
   227d4:	umull	r2, r3, r2, r4
   227d8:	add	r3, r1, r3
   227dc:	strd	r2, [r5]
   227e0:	mov	r0, #0
   227e4:	pop	{r4, r5, r6, r7, r8, pc}
   227e8:	adds	r6, r6, #0
   227ec:	adc	r7, r7, #-2147483648	; 0x80000000
   227f0:	cmp	r6, #1
   227f4:	sbcs	r3, r7, #0
   227f8:	movge	r3, #1
   227fc:	movlt	r3, #0
   22800:	b	22730 <__assert_fail@plt+0x11458>
   22804:	mvn	r2, #0
   22808:	mvn	r3, #0
   2280c:	cmp	r7, r3
   22810:	cmpeq	r6, r2
   22814:	beq	22848 <__assert_fail@plt+0x11570>
   22818:	mov	r2, r6
   2281c:	mov	r3, r7
   22820:	mov	r0, #0
   22824:	mov	r1, #-2147483648	; 0x80000000
   22828:	bl	23584 <__assert_fail@plt+0x122ac>
   2282c:	mov	r2, r4
   22830:	asr	r3, r4, #31
   22834:	cmp	r0, r4
   22838:	sbcs	r3, r1, r3
   2283c:	movlt	r3, #1
   22840:	movge	r3, #0
   22844:	b	227b0 <__assert_fail@plt+0x114d8>
   22848:	asr	r3, r4, #31
   2284c:	adds	r2, r4, #0
   22850:	adc	r3, r3, #-2147483648	; 0x80000000
   22854:	cmp	r2, #1
   22858:	sbcs	r3, r3, #0
   2285c:	movge	r3, #1
   22860:	movlt	r3, #0
   22864:	b	227b0 <__assert_fail@plt+0x114d8>
   22868:	push	{r4, r5, r6, r7, r8, lr}
   2286c:	subs	r4, r2, #0
   22870:	beq	228a0 <__assert_fail@plt+0x115c8>
   22874:	mov	r7, r1
   22878:	mov	r6, r0
   2287c:	mov	r5, #0
   22880:	mov	r1, r7
   22884:	mov	r0, r6
   22888:	bl	226e4 <__assert_fail@plt+0x1140c>
   2288c:	orr	r5, r5, r0
   22890:	subs	r4, r4, #1
   22894:	bne	22880 <__assert_fail@plt+0x115a8>
   22898:	mov	r0, r5
   2289c:	pop	{r4, r5, r6, r7, r8, pc}
   228a0:	mov	r5, #0
   228a4:	b	22898 <__assert_fail@plt+0x115c0>
   228a8:	push	{r4, r5, r6, r7, r8, lr}
   228ac:	sub	sp, sp, #16
   228b0:	cmp	r2, #36	; 0x24
   228b4:	bhi	22920 <__assert_fail@plt+0x11648>
   228b8:	mov	r6, r0
   228bc:	mov	r4, r1
   228c0:	mov	r5, r2
   228c4:	mov	r8, r3
   228c8:	cmp	r1, #0
   228cc:	addeq	r4, sp, #12
   228d0:	bl	111d0 <__errno_location@plt>
   228d4:	mov	r7, r0
   228d8:	mov	r3, #0
   228dc:	str	r3, [r0]
   228e0:	mov	r2, r5
   228e4:	mov	r1, r4
   228e8:	mov	r0, r6
   228ec:	bl	11290 <__strtoll_internal@plt>
   228f0:	strd	r0, [sp]
   228f4:	ldr	r5, [r4]
   228f8:	cmp	r6, r5
   228fc:	beq	22934 <__assert_fail@plt+0x1165c>
   22900:	ldr	r3, [r7]
   22904:	cmp	r3, #0
   22908:	beq	2297c <__assert_fail@plt+0x116a4>
   2290c:	cmp	r3, #34	; 0x22
   22910:	moveq	r6, #1
   22914:	beq	22980 <__assert_fail@plt+0x116a8>
   22918:	mov	r6, #4
   2291c:	b	22cd4 <__assert_fail@plt+0x119fc>
   22920:	ldr	r3, [pc, #952]	; 22ce0 <__assert_fail@plt+0x11a08>
   22924:	mov	r2, #85	; 0x55
   22928:	ldr	r1, [pc, #948]	; 22ce4 <__assert_fail@plt+0x11a0c>
   2292c:	ldr	r0, [pc, #948]	; 22ce8 <__assert_fail@plt+0x11a10>
   22930:	bl	112d8 <__assert_fail@plt>
   22934:	ldr	r3, [sp, #40]	; 0x28
   22938:	cmp	r3, #0
   2293c:	moveq	r6, #4
   22940:	beq	22cd4 <__assert_fail@plt+0x119fc>
   22944:	ldrb	r1, [r5]
   22948:	cmp	r1, #0
   2294c:	moveq	r6, #4
   22950:	beq	22cd4 <__assert_fail@plt+0x119fc>
   22954:	mov	r0, r3
   22958:	bl	111c4 <strchr@plt>
   2295c:	cmp	r0, #0
   22960:	moveq	r6, #4
   22964:	beq	22cd4 <__assert_fail@plt+0x119fc>
   22968:	mov	r2, #1
   2296c:	mov	r3, #0
   22970:	strd	r2, [sp]
   22974:	mov	r6, #0
   22978:	b	2298c <__assert_fail@plt+0x116b4>
   2297c:	mov	r6, #0
   22980:	ldr	r3, [sp, #40]	; 0x28
   22984:	cmp	r3, #0
   22988:	beq	22a7c <__assert_fail@plt+0x117a4>
   2298c:	ldrb	r7, [r5]
   22990:	cmp	r7, #0
   22994:	beq	22ccc <__assert_fail@plt+0x119f4>
   22998:	mov	r1, r7
   2299c:	ldr	r0, [sp, #40]	; 0x28
   229a0:	bl	111c4 <strchr@plt>
   229a4:	cmp	r0, #0
   229a8:	beq	22a84 <__assert_fail@plt+0x117ac>
   229ac:	sub	r3, r7, #69	; 0x45
   229b0:	cmp	r3, #47	; 0x2f
   229b4:	ldrls	pc, [pc, r3, lsl #2]
   229b8:	b	22af0 <__assert_fail@plt+0x11818>
   229bc:	muleq	r2, r4, sl
   229c0:	strdeq	r2, [r2], -r0
   229c4:	muleq	r2, r4, sl
   229c8:	strdeq	r2, [r2], -r0
   229cc:	strdeq	r2, [r2], -r0
   229d0:	strdeq	r2, [r2], -r0
   229d4:	muleq	r2, r4, sl
   229d8:	strdeq	r2, [r2], -r0
   229dc:	muleq	r2, r4, sl
   229e0:	strdeq	r2, [r2], -r0
   229e4:	strdeq	r2, [r2], -r0
   229e8:	muleq	r2, r4, sl
   229ec:	strdeq	r2, [r2], -r0
   229f0:	strdeq	r2, [r2], -r0
   229f4:	strdeq	r2, [r2], -r0
   229f8:	muleq	r2, r4, sl
   229fc:	strdeq	r2, [r2], -r0
   22a00:	strdeq	r2, [r2], -r0
   22a04:	strdeq	r2, [r2], -r0
   22a08:	strdeq	r2, [r2], -r0
   22a0c:	muleq	r2, r4, sl
   22a10:	muleq	r2, r4, sl
   22a14:	strdeq	r2, [r2], -r0
   22a18:	strdeq	r2, [r2], -r0
   22a1c:	strdeq	r2, [r2], -r0
   22a20:	strdeq	r2, [r2], -r0
   22a24:	strdeq	r2, [r2], -r0
   22a28:	strdeq	r2, [r2], -r0
   22a2c:	strdeq	r2, [r2], -r0
   22a30:	strdeq	r2, [r2], -r0
   22a34:	strdeq	r2, [r2], -r0
   22a38:	strdeq	r2, [r2], -r0
   22a3c:	strdeq	r2, [r2], -r0
   22a40:	strdeq	r2, [r2], -r0
   22a44:	muleq	r2, r4, sl
   22a48:	strdeq	r2, [r2], -r0
   22a4c:	strdeq	r2, [r2], -r0
   22a50:	strdeq	r2, [r2], -r0
   22a54:	muleq	r2, r4, sl
   22a58:	strdeq	r2, [r2], -r0
   22a5c:	muleq	r2, r4, sl
   22a60:	strdeq	r2, [r2], -r0
   22a64:	strdeq	r2, [r2], -r0
   22a68:	strdeq	r2, [r2], -r0
   22a6c:	strdeq	r2, [r2], -r0
   22a70:	strdeq	r2, [r2], -r0
   22a74:	strdeq	r2, [r2], -r0
   22a78:	muleq	r2, r4, sl
   22a7c:	strd	r0, [r8]
   22a80:	b	22cd4 <__assert_fail@plt+0x119fc>
   22a84:	ldrd	r2, [sp]
   22a88:	strd	r2, [r8]
   22a8c:	orr	r6, r6, #2
   22a90:	b	22cd4 <__assert_fail@plt+0x119fc>
   22a94:	mov	r1, #48	; 0x30
   22a98:	ldr	r0, [sp, #40]	; 0x28
   22a9c:	bl	111c4 <strchr@plt>
   22aa0:	cmp	r0, #0
   22aa4:	beq	22be0 <__assert_fail@plt+0x11908>
   22aa8:	ldrb	r3, [r5, #1]
   22aac:	cmp	r3, #68	; 0x44
   22ab0:	beq	22acc <__assert_fail@plt+0x117f4>
   22ab4:	cmp	r3, #105	; 0x69
   22ab8:	beq	22ad8 <__assert_fail@plt+0x11800>
   22abc:	cmp	r3, #66	; 0x42
   22ac0:	movne	r5, #1
   22ac4:	movne	r1, #1024	; 0x400
   22ac8:	bne	22af8 <__assert_fail@plt+0x11820>
   22acc:	mov	r5, #2
   22ad0:	mov	r1, #1000	; 0x3e8
   22ad4:	b	22af8 <__assert_fail@plt+0x11820>
   22ad8:	ldrb	r5, [r5, #2]
   22adc:	cmp	r5, #66	; 0x42
   22ae0:	movne	r5, #1
   22ae4:	moveq	r5, #3
   22ae8:	mov	r1, #1024	; 0x400
   22aec:	b	22af8 <__assert_fail@plt+0x11820>
   22af0:	mov	r5, #1
   22af4:	mov	r1, #1024	; 0x400
   22af8:	sub	r7, r7, #66	; 0x42
   22afc:	cmp	r7, #53	; 0x35
   22b00:	ldrls	pc, [pc, r7, lsl #2]
   22b04:	b	22c9c <__assert_fail@plt+0x119c4>
   22b08:	strdeq	r2, [r2], -ip
   22b0c:	muleq	r2, ip, ip
   22b10:	muleq	r2, ip, ip
   22b14:	andeq	r2, r2, ip, lsl #24
   22b18:	muleq	r2, ip, ip
   22b1c:	andeq	r2, r2, ip, lsl ip
   22b20:	muleq	r2, ip, ip
   22b24:	muleq	r2, ip, ip
   22b28:	muleq	r2, ip, ip
   22b2c:	andeq	r2, r2, ip, lsr #24
   22b30:	muleq	r2, ip, ip
   22b34:	andeq	r2, r2, ip, lsr ip
   22b38:	muleq	r2, ip, ip
   22b3c:	muleq	r2, ip, ip
   22b40:	andeq	r2, r2, ip, asr #24
   22b44:	muleq	r2, ip, ip
   22b48:	muleq	r2, ip, ip
   22b4c:	muleq	r2, ip, ip
   22b50:	andeq	r2, r2, ip, asr ip
   22b54:	muleq	r2, ip, ip
   22b58:	muleq	r2, ip, ip
   22b5c:	muleq	r2, ip, ip
   22b60:	muleq	r2, ip, ip
   22b64:	andeq	r2, r2, ip, ror ip
   22b68:	andeq	r2, r2, ip, lsl #25
   22b6c:	muleq	r2, ip, ip
   22b70:	muleq	r2, ip, ip
   22b74:	muleq	r2, ip, ip
   22b78:	muleq	r2, ip, ip
   22b7c:	muleq	r2, ip, ip
   22b80:	muleq	r2, ip, ip
   22b84:	muleq	r2, ip, ip
   22b88:	andeq	r2, r2, ip, ror #23
   22b8c:	andeq	r2, r2, ip, lsr #25
   22b90:	muleq	r2, ip, ip
   22b94:	muleq	r2, ip, ip
   22b98:	muleq	r2, ip, ip
   22b9c:	andeq	r2, r2, ip, lsl ip
   22ba0:	muleq	r2, ip, ip
   22ba4:	muleq	r2, ip, ip
   22ba8:	muleq	r2, ip, ip
   22bac:	andeq	r2, r2, ip, lsr #24
   22bb0:	muleq	r2, ip, ip
   22bb4:	andeq	r2, r2, ip, lsr ip
   22bb8:	muleq	r2, ip, ip
   22bbc:	muleq	r2, ip, ip
   22bc0:	muleq	r2, ip, ip
   22bc4:	muleq	r2, ip, ip
   22bc8:	muleq	r2, ip, ip
   22bcc:	muleq	r2, ip, ip
   22bd0:	andeq	r2, r2, ip, asr ip
   22bd4:	muleq	r2, ip, ip
   22bd8:	muleq	r2, ip, ip
   22bdc:	andeq	r2, r2, ip, ror #24
   22be0:	mov	r5, #1
   22be4:	mov	r1, #1024	; 0x400
   22be8:	b	22af8 <__assert_fail@plt+0x11820>
   22bec:	mov	r1, #512	; 0x200
   22bf0:	mov	r0, sp
   22bf4:	bl	226e4 <__assert_fail@plt+0x1140c>
   22bf8:	b	22cb0 <__assert_fail@plt+0x119d8>
   22bfc:	mov	r1, #1024	; 0x400
   22c00:	mov	r0, sp
   22c04:	bl	226e4 <__assert_fail@plt+0x1140c>
   22c08:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c0c:	mov	r2, #6
   22c10:	mov	r0, sp
   22c14:	bl	22868 <__assert_fail@plt+0x11590>
   22c18:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c1c:	mov	r2, #3
   22c20:	mov	r0, sp
   22c24:	bl	22868 <__assert_fail@plt+0x11590>
   22c28:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c2c:	mov	r2, #1
   22c30:	mov	r0, sp
   22c34:	bl	22868 <__assert_fail@plt+0x11590>
   22c38:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c3c:	mov	r2, #2
   22c40:	mov	r0, sp
   22c44:	bl	22868 <__assert_fail@plt+0x11590>
   22c48:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c4c:	mov	r2, #5
   22c50:	mov	r0, sp
   22c54:	bl	22868 <__assert_fail@plt+0x11590>
   22c58:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c5c:	mov	r2, #4
   22c60:	mov	r0, sp
   22c64:	bl	22868 <__assert_fail@plt+0x11590>
   22c68:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c6c:	mov	r1, #2
   22c70:	mov	r0, sp
   22c74:	bl	226e4 <__assert_fail@plt+0x1140c>
   22c78:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c7c:	mov	r2, #8
   22c80:	mov	r0, sp
   22c84:	bl	22868 <__assert_fail@plt+0x11590>
   22c88:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c8c:	mov	r2, #7
   22c90:	mov	r0, sp
   22c94:	bl	22868 <__assert_fail@plt+0x11590>
   22c98:	b	22cb0 <__assert_fail@plt+0x119d8>
   22c9c:	ldrd	r2, [sp]
   22ca0:	strd	r2, [r8]
   22ca4:	orr	r6, r6, #2
   22ca8:	b	22cd4 <__assert_fail@plt+0x119fc>
   22cac:	mov	r0, #0
   22cb0:	orr	r6, r6, r0
   22cb4:	ldr	r3, [r4]
   22cb8:	add	r2, r3, r5
   22cbc:	str	r2, [r4]
   22cc0:	ldrb	r3, [r3, r5]
   22cc4:	cmp	r3, #0
   22cc8:	orrne	r6, r6, #2
   22ccc:	ldrd	r2, [sp]
   22cd0:	strd	r2, [r8]
   22cd4:	mov	r0, r6
   22cd8:	add	sp, sp, #16
   22cdc:	pop	{r4, r5, r6, r7, r8, pc}
   22ce0:	andeq	r4, r2, ip, lsr #22
   22ce4:	andeq	r4, r2, r8, lsr fp
   22ce8:	andeq	r4, r2, r8, asr #22
   22cec:	push	{r4, lr}
   22cf0:	mov	r2, r0
   22cf4:	mov	r3, r1
   22cf8:	cmp	r1, #0
   22cfc:	cmpne	r0, #0
   22d00:	moveq	r3, #1
   22d04:	moveq	r2, r3
   22d08:	umull	r0, r1, r2, r3
   22d0c:	cmp	r0, #0
   22d10:	cmpge	r1, #0
   22d14:	bne	22d28 <__assert_fail@plt+0x11a50>
   22d18:	mov	r1, r3
   22d1c:	mov	r0, r2
   22d20:	bl	10fc0 <calloc@plt>
   22d24:	pop	{r4, pc}
   22d28:	bl	111d0 <__errno_location@plt>
   22d2c:	mov	r3, #12
   22d30:	str	r3, [r0]
   22d34:	mov	r0, #0
   22d38:	pop	{r4, pc}
   22d3c:	push	{r4, lr}
   22d40:	cmp	r0, #0
   22d44:	moveq	r0, #1
   22d48:	cmp	r0, #0
   22d4c:	blt	22d58 <__assert_fail@plt+0x11a80>
   22d50:	bl	1114c <malloc@plt>
   22d54:	pop	{r4, pc}
   22d58:	bl	111d0 <__errno_location@plt>
   22d5c:	mov	r3, #12
   22d60:	str	r3, [r0]
   22d64:	mov	r0, #0
   22d68:	pop	{r4, pc}
   22d6c:	push	{r4, lr}
   22d70:	cmp	r0, #0
   22d74:	beq	22d90 <__assert_fail@plt+0x11ab8>
   22d78:	cmp	r1, #0
   22d7c:	beq	22d9c <__assert_fail@plt+0x11ac4>
   22d80:	cmp	r1, #0
   22d84:	blt	22da8 <__assert_fail@plt+0x11ad0>
   22d88:	bl	110d4 <realloc@plt>
   22d8c:	pop	{r4, pc}
   22d90:	mov	r0, r1
   22d94:	bl	22d3c <__assert_fail@plt+0x11a64>
   22d98:	pop	{r4, pc}
   22d9c:	bl	22f00 <__assert_fail@plt+0x11c28>
   22da0:	mov	r0, #0
   22da4:	pop	{r4, pc}
   22da8:	bl	111d0 <__errno_location@plt>
   22dac:	mov	r3, #12
   22db0:	str	r3, [r0]
   22db4:	mov	r0, #0
   22db8:	pop	{r4, pc}
   22dbc:	push	{r4, r5, r6, lr}
   22dc0:	mov	r5, r0
   22dc4:	bl	11128 <__fpending@plt>
   22dc8:	mov	r6, r0
   22dcc:	ldr	r4, [r5]
   22dd0:	and	r4, r4, #32
   22dd4:	mov	r0, r5
   22dd8:	bl	12840 <__assert_fail@plt+0x1568>
   22ddc:	cmp	r4, #0
   22de0:	bne	22e08 <__assert_fail@plt+0x11b30>
   22de4:	cmp	r0, #0
   22de8:	popeq	{r4, r5, r6, pc}
   22dec:	cmp	r6, #0
   22df0:	bne	22e24 <__assert_fail@plt+0x11b4c>
   22df4:	bl	111d0 <__errno_location@plt>
   22df8:	ldr	r0, [r0]
   22dfc:	subs	r0, r0, #9
   22e00:	mvnne	r0, #0
   22e04:	pop	{r4, r5, r6, pc}
   22e08:	cmp	r0, #0
   22e0c:	bne	22e2c <__assert_fail@plt+0x11b54>
   22e10:	bl	111d0 <__errno_location@plt>
   22e14:	mov	r3, #0
   22e18:	str	r3, [r0]
   22e1c:	mvn	r0, #0
   22e20:	pop	{r4, r5, r6, pc}
   22e24:	mvn	r0, #0
   22e28:	pop	{r4, r5, r6, pc}
   22e2c:	mvn	r0, #0
   22e30:	pop	{r4, r5, r6, pc}
   22e34:	ldr	ip, [r0, #4]
   22e38:	cmp	ip, r1
   22e3c:	bcs	22e84 <__assert_fail@plt+0x11bac>
   22e40:	push	{r4, r5, r6, r7, r8, lr}
   22e44:	mov	r6, r3
   22e48:	mov	r7, r2
   22e4c:	mov	r5, r1
   22e50:	mov	r4, r0
   22e54:	cmp	r3, #0
   22e58:	beq	22e90 <__assert_fail@plt+0x11bb8>
   22e5c:	mov	r1, r3
   22e60:	mvn	r0, #0
   22e64:	bl	23138 <__assert_fail@plt+0x11e60>
   22e68:	cmp	r5, r0
   22e6c:	bls	22e90 <__assert_fail@plt+0x11bb8>
   22e70:	bl	111d0 <__errno_location@plt>
   22e74:	mov	r3, #12
   22e78:	str	r3, [r0]
   22e7c:	mov	r0, #0
   22e80:	pop	{r4, r5, r6, r7, r8, pc}
   22e84:	str	r1, [r0]
   22e88:	mov	r0, #1
   22e8c:	bx	lr
   22e90:	mul	r1, r6, r5
   22e94:	ldr	r0, [r4, #8]
   22e98:	cmp	r0, r7
   22e9c:	beq	22ec0 <__assert_fail@plt+0x11be8>
   22ea0:	bl	22d6c <__assert_fail@plt+0x11a94>
   22ea4:	subs	r7, r0, #0
   22ea8:	beq	22ef8 <__assert_fail@plt+0x11c20>
   22eac:	str	r7, [r4, #8]
   22eb0:	str	r5, [r4, #4]
   22eb4:	str	r5, [r4]
   22eb8:	mov	r0, #1
   22ebc:	pop	{r4, r5, r6, r7, r8, pc}
   22ec0:	mov	r0, r1
   22ec4:	bl	22d3c <__assert_fail@plt+0x11a64>
   22ec8:	subs	r7, r0, #0
   22ecc:	beq	22ef0 <__assert_fail@plt+0x11c18>
   22ed0:	ldr	r1, [r4, #8]
   22ed4:	cmp	r1, #0
   22ed8:	beq	22eac <__assert_fail@plt+0x11bd4>
   22edc:	ldr	r2, [r4]
   22ee0:	mul	r2, r2, r6
   22ee4:	mov	r0, r7
   22ee8:	bl	11068 <memcpy@plt>
   22eec:	b	22eac <__assert_fail@plt+0x11bd4>
   22ef0:	mov	r0, #0
   22ef4:	pop	{r4, r5, r6, r7, r8, pc}
   22ef8:	mov	r0, #0
   22efc:	pop	{r4, r5, r6, r7, r8, pc}
   22f00:	push	{r4, r5, lr}
   22f04:	sub	sp, sp, #12
   22f08:	mov	r5, r0
   22f0c:	bl	111d0 <__errno_location@plt>
   22f10:	mov	r4, r0
   22f14:	ldr	r3, [r0]
   22f18:	str	r3, [sp]
   22f1c:	str	r3, [sp, #4]
   22f20:	mov	r3, #0
   22f24:	str	r3, [r0]
   22f28:	mov	r0, r5
   22f2c:	bl	11044 <free@plt>
   22f30:	ldr	r3, [r4]
   22f34:	cmp	r3, #0
   22f38:	moveq	r3, #4
   22f3c:	movne	r3, #0
   22f40:	add	r2, sp, #8
   22f44:	add	r3, r2, r3
   22f48:	ldr	r3, [r3, #-8]
   22f4c:	str	r3, [r4]
   22f50:	add	sp, sp, #12
   22f54:	pop	{r4, r5, pc}
   22f58:	push	{r4, lr}
   22f5c:	mov	r0, #14
   22f60:	bl	11278 <nl_langinfo@plt>
   22f64:	cmp	r0, #0
   22f68:	beq	22f80 <__assert_fail@plt+0x11ca8>
   22f6c:	ldrb	r2, [r0]
   22f70:	ldr	r3, [pc, #16]	; 22f88 <__assert_fail@plt+0x11cb0>
   22f74:	cmp	r2, #0
   22f78:	moveq	r0, r3
   22f7c:	pop	{r4, pc}
   22f80:	ldr	r0, [pc]	; 22f88 <__assert_fail@plt+0x11cb0>
   22f84:	pop	{r4, pc}
   22f88:	andeq	r4, r2, r0, ror fp
   22f8c:	push	{r4, r5, r6, r7, lr}
   22f90:	sub	sp, sp, #12
   22f94:	mov	r7, r1
   22f98:	mov	r5, r2
   22f9c:	subs	r6, r0, #0
   22fa0:	addeq	r6, sp, #4
   22fa4:	mov	r0, r6
   22fa8:	bl	11134 <mbrtowc@plt>
   22fac:	mov	r4, r0
   22fb0:	cmp	r5, #0
   22fb4:	cmnne	r0, #3
   22fb8:	bhi	22fc8 <__assert_fail@plt+0x11cf0>
   22fbc:	mov	r0, r4
   22fc0:	add	sp, sp, #12
   22fc4:	pop	{r4, r5, r6, r7, pc}
   22fc8:	mov	r0, #0
   22fcc:	bl	23030 <__assert_fail@plt+0x11d58>
   22fd0:	cmp	r0, #0
   22fd4:	ldrbeq	r3, [r7]
   22fd8:	streq	r3, [r6]
   22fdc:	moveq	r4, #1
   22fe0:	b	22fbc <__assert_fail@plt+0x11ce4>
   22fe4:	push	{r4, r5, r6, lr}
   22fe8:	mov	r6, r0
   22fec:	mov	r5, r1
   22ff0:	subs	r4, r2, #0
   22ff4:	beq	23020 <__assert_fail@plt+0x11d48>
   22ff8:	mov	r1, r4
   22ffc:	mvn	r0, #0
   23000:	bl	23138 <__assert_fail@plt+0x11e60>
   23004:	cmp	r0, r5
   23008:	bcs	23020 <__assert_fail@plt+0x11d48>
   2300c:	bl	111d0 <__errno_location@plt>
   23010:	mov	r3, #12
   23014:	str	r3, [r0]
   23018:	mov	r0, #0
   2301c:	pop	{r4, r5, r6, pc}
   23020:	mul	r1, r5, r4
   23024:	mov	r0, r6
   23028:	bl	22d6c <__assert_fail@plt+0x11a94>
   2302c:	pop	{r4, r5, r6, pc}
   23030:	push	{lr}		; (str lr, [sp, #-4]!)
   23034:	sub	sp, sp, #268	; 0x10c
   23038:	ldr	r2, [pc, #68]	; 23084 <__assert_fail@plt+0x11dac>
   2303c:	add	r1, sp, #4
   23040:	bl	23090 <__assert_fail@plt+0x11db8>
   23044:	cmp	r0, #0
   23048:	movne	r0, #0
   2304c:	bne	2307c <__assert_fail@plt+0x11da4>
   23050:	ldr	r1, [pc, #48]	; 23088 <__assert_fail@plt+0x11db0>
   23054:	add	r0, sp, #4
   23058:	bl	11008 <strcmp@plt>
   2305c:	cmp	r0, #0
   23060:	moveq	r0, #0
   23064:	beq	2307c <__assert_fail@plt+0x11da4>
   23068:	ldr	r1, [pc, #28]	; 2308c <__assert_fail@plt+0x11db4>
   2306c:	add	r0, sp, #4
   23070:	bl	11008 <strcmp@plt>
   23074:	adds	r0, r0, #0
   23078:	movne	r0, #1
   2307c:	add	sp, sp, #268	; 0x10c
   23080:	pop	{pc}		; (ldr pc, [sp], #4)
   23084:	andeq	r0, r0, r1, lsl #2
   23088:	andeq	r4, r2, r8, ror fp
   2308c:	andeq	r4, r2, ip, ror fp
   23090:	push	{r4, r5, r6, lr}
   23094:	mov	r6, r1
   23098:	mov	r4, r2
   2309c:	mov	r1, #0
   230a0:	bl	11260 <setlocale@plt>
   230a4:	subs	r5, r0, #0
   230a8:	beq	230cc <__assert_fail@plt+0x11df4>
   230ac:	mov	r0, r5
   230b0:	bl	111b8 <strlen@plt>
   230b4:	cmp	r4, r0
   230b8:	bhi	230e4 <__assert_fail@plt+0x11e0c>
   230bc:	cmp	r4, #0
   230c0:	bne	230fc <__assert_fail@plt+0x11e24>
   230c4:	mov	r0, #34	; 0x22
   230c8:	pop	{r4, r5, r6, pc}
   230cc:	cmp	r4, #0
   230d0:	beq	23120 <__assert_fail@plt+0x11e48>
   230d4:	mov	r3, #0
   230d8:	strb	r3, [r6]
   230dc:	mov	r0, #22
   230e0:	pop	{r4, r5, r6, pc}
   230e4:	add	r2, r0, #1
   230e8:	mov	r1, r5
   230ec:	mov	r0, r6
   230f0:	bl	11068 <memcpy@plt>
   230f4:	mov	r0, #0
   230f8:	pop	{r4, r5, r6, pc}
   230fc:	sub	r4, r4, #1
   23100:	mov	r2, r4
   23104:	mov	r1, r5
   23108:	mov	r0, r6
   2310c:	bl	11068 <memcpy@plt>
   23110:	mov	r3, #0
   23114:	strb	r3, [r6, r4]
   23118:	mov	r0, #34	; 0x22
   2311c:	pop	{r4, r5, r6, pc}
   23120:	mov	r0, #22
   23124:	pop	{r4, r5, r6, pc}
   23128:	push	{r4, lr}
   2312c:	mov	r1, #0
   23130:	bl	11260 <setlocale@plt>
   23134:	pop	{r4, pc}
   23138:	subs	r2, r1, #1
   2313c:	bxeq	lr
   23140:	bcc	23318 <__assert_fail@plt+0x12040>
   23144:	cmp	r0, r1
   23148:	bls	232fc <__assert_fail@plt+0x12024>
   2314c:	tst	r1, r2
   23150:	beq	23308 <__assert_fail@plt+0x12030>
   23154:	clz	r3, r0
   23158:	clz	r2, r1
   2315c:	sub	r3, r2, r3
   23160:	rsbs	r3, r3, #31
   23164:	addne	r3, r3, r3, lsl #1
   23168:	mov	r2, #0
   2316c:	addne	pc, pc, r3, lsl #2
   23170:	nop			; (mov r0, r0)
   23174:	cmp	r0, r1, lsl #31
   23178:	adc	r2, r2, r2
   2317c:	subcs	r0, r0, r1, lsl #31
   23180:	cmp	r0, r1, lsl #30
   23184:	adc	r2, r2, r2
   23188:	subcs	r0, r0, r1, lsl #30
   2318c:	cmp	r0, r1, lsl #29
   23190:	adc	r2, r2, r2
   23194:	subcs	r0, r0, r1, lsl #29
   23198:	cmp	r0, r1, lsl #28
   2319c:	adc	r2, r2, r2
   231a0:	subcs	r0, r0, r1, lsl #28
   231a4:	cmp	r0, r1, lsl #27
   231a8:	adc	r2, r2, r2
   231ac:	subcs	r0, r0, r1, lsl #27
   231b0:	cmp	r0, r1, lsl #26
   231b4:	adc	r2, r2, r2
   231b8:	subcs	r0, r0, r1, lsl #26
   231bc:	cmp	r0, r1, lsl #25
   231c0:	adc	r2, r2, r2
   231c4:	subcs	r0, r0, r1, lsl #25
   231c8:	cmp	r0, r1, lsl #24
   231cc:	adc	r2, r2, r2
   231d0:	subcs	r0, r0, r1, lsl #24
   231d4:	cmp	r0, r1, lsl #23
   231d8:	adc	r2, r2, r2
   231dc:	subcs	r0, r0, r1, lsl #23
   231e0:	cmp	r0, r1, lsl #22
   231e4:	adc	r2, r2, r2
   231e8:	subcs	r0, r0, r1, lsl #22
   231ec:	cmp	r0, r1, lsl #21
   231f0:	adc	r2, r2, r2
   231f4:	subcs	r0, r0, r1, lsl #21
   231f8:	cmp	r0, r1, lsl #20
   231fc:	adc	r2, r2, r2
   23200:	subcs	r0, r0, r1, lsl #20
   23204:	cmp	r0, r1, lsl #19
   23208:	adc	r2, r2, r2
   2320c:	subcs	r0, r0, r1, lsl #19
   23210:	cmp	r0, r1, lsl #18
   23214:	adc	r2, r2, r2
   23218:	subcs	r0, r0, r1, lsl #18
   2321c:	cmp	r0, r1, lsl #17
   23220:	adc	r2, r2, r2
   23224:	subcs	r0, r0, r1, lsl #17
   23228:	cmp	r0, r1, lsl #16
   2322c:	adc	r2, r2, r2
   23230:	subcs	r0, r0, r1, lsl #16
   23234:	cmp	r0, r1, lsl #15
   23238:	adc	r2, r2, r2
   2323c:	subcs	r0, r0, r1, lsl #15
   23240:	cmp	r0, r1, lsl #14
   23244:	adc	r2, r2, r2
   23248:	subcs	r0, r0, r1, lsl #14
   2324c:	cmp	r0, r1, lsl #13
   23250:	adc	r2, r2, r2
   23254:	subcs	r0, r0, r1, lsl #13
   23258:	cmp	r0, r1, lsl #12
   2325c:	adc	r2, r2, r2
   23260:	subcs	r0, r0, r1, lsl #12
   23264:	cmp	r0, r1, lsl #11
   23268:	adc	r2, r2, r2
   2326c:	subcs	r0, r0, r1, lsl #11
   23270:	cmp	r0, r1, lsl #10
   23274:	adc	r2, r2, r2
   23278:	subcs	r0, r0, r1, lsl #10
   2327c:	cmp	r0, r1, lsl #9
   23280:	adc	r2, r2, r2
   23284:	subcs	r0, r0, r1, lsl #9
   23288:	cmp	r0, r1, lsl #8
   2328c:	adc	r2, r2, r2
   23290:	subcs	r0, r0, r1, lsl #8
   23294:	cmp	r0, r1, lsl #7
   23298:	adc	r2, r2, r2
   2329c:	subcs	r0, r0, r1, lsl #7
   232a0:	cmp	r0, r1, lsl #6
   232a4:	adc	r2, r2, r2
   232a8:	subcs	r0, r0, r1, lsl #6
   232ac:	cmp	r0, r1, lsl #5
   232b0:	adc	r2, r2, r2
   232b4:	subcs	r0, r0, r1, lsl #5
   232b8:	cmp	r0, r1, lsl #4
   232bc:	adc	r2, r2, r2
   232c0:	subcs	r0, r0, r1, lsl #4
   232c4:	cmp	r0, r1, lsl #3
   232c8:	adc	r2, r2, r2
   232cc:	subcs	r0, r0, r1, lsl #3
   232d0:	cmp	r0, r1, lsl #2
   232d4:	adc	r2, r2, r2
   232d8:	subcs	r0, r0, r1, lsl #2
   232dc:	cmp	r0, r1, lsl #1
   232e0:	adc	r2, r2, r2
   232e4:	subcs	r0, r0, r1, lsl #1
   232e8:	cmp	r0, r1
   232ec:	adc	r2, r2, r2
   232f0:	subcs	r0, r0, r1
   232f4:	mov	r0, r2
   232f8:	bx	lr
   232fc:	moveq	r0, #1
   23300:	movne	r0, #0
   23304:	bx	lr
   23308:	clz	r2, r1
   2330c:	rsb	r2, r2, #31
   23310:	lsr	r0, r0, r2
   23314:	bx	lr
   23318:	cmp	r0, #0
   2331c:	mvnne	r0, #0
   23320:	b	23658 <__assert_fail@plt+0x12380>
   23324:	cmp	r1, #0
   23328:	beq	23318 <__assert_fail@plt+0x12040>
   2332c:	push	{r0, r1, lr}
   23330:	bl	23138 <__assert_fail@plt+0x11e60>
   23334:	pop	{r1, r2, lr}
   23338:	mul	r3, r2, r0
   2333c:	sub	r1, r1, r3
   23340:	bx	lr
   23344:	cmp	r1, #0
   23348:	beq	23554 <__assert_fail@plt+0x1227c>
   2334c:	eor	ip, r0, r1
   23350:	rsbmi	r1, r1, #0
   23354:	subs	r2, r1, #1
   23358:	beq	23520 <__assert_fail@plt+0x12248>
   2335c:	movs	r3, r0
   23360:	rsbmi	r3, r0, #0
   23364:	cmp	r3, r1
   23368:	bls	2352c <__assert_fail@plt+0x12254>
   2336c:	tst	r1, r2
   23370:	beq	2353c <__assert_fail@plt+0x12264>
   23374:	clz	r2, r3
   23378:	clz	r0, r1
   2337c:	sub	r2, r0, r2
   23380:	rsbs	r2, r2, #31
   23384:	addne	r2, r2, r2, lsl #1
   23388:	mov	r0, #0
   2338c:	addne	pc, pc, r2, lsl #2
   23390:	nop			; (mov r0, r0)
   23394:	cmp	r3, r1, lsl #31
   23398:	adc	r0, r0, r0
   2339c:	subcs	r3, r3, r1, lsl #31
   233a0:	cmp	r3, r1, lsl #30
   233a4:	adc	r0, r0, r0
   233a8:	subcs	r3, r3, r1, lsl #30
   233ac:	cmp	r3, r1, lsl #29
   233b0:	adc	r0, r0, r0
   233b4:	subcs	r3, r3, r1, lsl #29
   233b8:	cmp	r3, r1, lsl #28
   233bc:	adc	r0, r0, r0
   233c0:	subcs	r3, r3, r1, lsl #28
   233c4:	cmp	r3, r1, lsl #27
   233c8:	adc	r0, r0, r0
   233cc:	subcs	r3, r3, r1, lsl #27
   233d0:	cmp	r3, r1, lsl #26
   233d4:	adc	r0, r0, r0
   233d8:	subcs	r3, r3, r1, lsl #26
   233dc:	cmp	r3, r1, lsl #25
   233e0:	adc	r0, r0, r0
   233e4:	subcs	r3, r3, r1, lsl #25
   233e8:	cmp	r3, r1, lsl #24
   233ec:	adc	r0, r0, r0
   233f0:	subcs	r3, r3, r1, lsl #24
   233f4:	cmp	r3, r1, lsl #23
   233f8:	adc	r0, r0, r0
   233fc:	subcs	r3, r3, r1, lsl #23
   23400:	cmp	r3, r1, lsl #22
   23404:	adc	r0, r0, r0
   23408:	subcs	r3, r3, r1, lsl #22
   2340c:	cmp	r3, r1, lsl #21
   23410:	adc	r0, r0, r0
   23414:	subcs	r3, r3, r1, lsl #21
   23418:	cmp	r3, r1, lsl #20
   2341c:	adc	r0, r0, r0
   23420:	subcs	r3, r3, r1, lsl #20
   23424:	cmp	r3, r1, lsl #19
   23428:	adc	r0, r0, r0
   2342c:	subcs	r3, r3, r1, lsl #19
   23430:	cmp	r3, r1, lsl #18
   23434:	adc	r0, r0, r0
   23438:	subcs	r3, r3, r1, lsl #18
   2343c:	cmp	r3, r1, lsl #17
   23440:	adc	r0, r0, r0
   23444:	subcs	r3, r3, r1, lsl #17
   23448:	cmp	r3, r1, lsl #16
   2344c:	adc	r0, r0, r0
   23450:	subcs	r3, r3, r1, lsl #16
   23454:	cmp	r3, r1, lsl #15
   23458:	adc	r0, r0, r0
   2345c:	subcs	r3, r3, r1, lsl #15
   23460:	cmp	r3, r1, lsl #14
   23464:	adc	r0, r0, r0
   23468:	subcs	r3, r3, r1, lsl #14
   2346c:	cmp	r3, r1, lsl #13
   23470:	adc	r0, r0, r0
   23474:	subcs	r3, r3, r1, lsl #13
   23478:	cmp	r3, r1, lsl #12
   2347c:	adc	r0, r0, r0
   23480:	subcs	r3, r3, r1, lsl #12
   23484:	cmp	r3, r1, lsl #11
   23488:	adc	r0, r0, r0
   2348c:	subcs	r3, r3, r1, lsl #11
   23490:	cmp	r3, r1, lsl #10
   23494:	adc	r0, r0, r0
   23498:	subcs	r3, r3, r1, lsl #10
   2349c:	cmp	r3, r1, lsl #9
   234a0:	adc	r0, r0, r0
   234a4:	subcs	r3, r3, r1, lsl #9
   234a8:	cmp	r3, r1, lsl #8
   234ac:	adc	r0, r0, r0
   234b0:	subcs	r3, r3, r1, lsl #8
   234b4:	cmp	r3, r1, lsl #7
   234b8:	adc	r0, r0, r0
   234bc:	subcs	r3, r3, r1, lsl #7
   234c0:	cmp	r3, r1, lsl #6
   234c4:	adc	r0, r0, r0
   234c8:	subcs	r3, r3, r1, lsl #6
   234cc:	cmp	r3, r1, lsl #5
   234d0:	adc	r0, r0, r0
   234d4:	subcs	r3, r3, r1, lsl #5
   234d8:	cmp	r3, r1, lsl #4
   234dc:	adc	r0, r0, r0
   234e0:	subcs	r3, r3, r1, lsl #4
   234e4:	cmp	r3, r1, lsl #3
   234e8:	adc	r0, r0, r0
   234ec:	subcs	r3, r3, r1, lsl #3
   234f0:	cmp	r3, r1, lsl #2
   234f4:	adc	r0, r0, r0
   234f8:	subcs	r3, r3, r1, lsl #2
   234fc:	cmp	r3, r1, lsl #1
   23500:	adc	r0, r0, r0
   23504:	subcs	r3, r3, r1, lsl #1
   23508:	cmp	r3, r1
   2350c:	adc	r0, r0, r0
   23510:	subcs	r3, r3, r1
   23514:	cmp	ip, #0
   23518:	rsbmi	r0, r0, #0
   2351c:	bx	lr
   23520:	teq	ip, r0
   23524:	rsbmi	r0, r0, #0
   23528:	bx	lr
   2352c:	movcc	r0, #0
   23530:	asreq	r0, ip, #31
   23534:	orreq	r0, r0, #1
   23538:	bx	lr
   2353c:	clz	r2, r1
   23540:	rsb	r2, r2, #31
   23544:	cmp	ip, #0
   23548:	lsr	r0, r3, r2
   2354c:	rsbmi	r0, r0, #0
   23550:	bx	lr
   23554:	cmp	r0, #0
   23558:	mvngt	r0, #-2147483648	; 0x80000000
   2355c:	movlt	r0, #-2147483648	; 0x80000000
   23560:	b	23658 <__assert_fail@plt+0x12380>
   23564:	cmp	r1, #0
   23568:	beq	23554 <__assert_fail@plt+0x1227c>
   2356c:	push	{r0, r1, lr}
   23570:	bl	2334c <__assert_fail@plt+0x12074>
   23574:	pop	{r1, r2, lr}
   23578:	mul	r3, r2, r0
   2357c:	sub	r1, r1, r3
   23580:	bx	lr
   23584:	cmp	r3, #0
   23588:	cmpeq	r2, #0
   2358c:	bne	235b0 <__assert_fail@plt+0x122d8>
   23590:	cmp	r1, #0
   23594:	movlt	r1, #-2147483648	; 0x80000000
   23598:	movlt	r0, #0
   2359c:	blt	235ac <__assert_fail@plt+0x122d4>
   235a0:	cmpeq	r0, #0
   235a4:	mvnne	r1, #-2147483648	; 0x80000000
   235a8:	mvnne	r0, #0
   235ac:	b	23658 <__assert_fail@plt+0x12380>
   235b0:	sub	sp, sp, #8
   235b4:	push	{sp, lr}
   235b8:	cmp	r1, #0
   235bc:	blt	235dc <__assert_fail@plt+0x12304>
   235c0:	cmp	r3, #0
   235c4:	blt	23610 <__assert_fail@plt+0x12338>
   235c8:	bl	23668 <__assert_fail@plt+0x12390>
   235cc:	ldr	lr, [sp, #4]
   235d0:	add	sp, sp, #8
   235d4:	pop	{r2, r3}
   235d8:	bx	lr
   235dc:	rsbs	r0, r0, #0
   235e0:	sbc	r1, r1, r1, lsl #1
   235e4:	cmp	r3, #0
   235e8:	blt	23634 <__assert_fail@plt+0x1235c>
   235ec:	bl	23668 <__assert_fail@plt+0x12390>
   235f0:	ldr	lr, [sp, #4]
   235f4:	add	sp, sp, #8
   235f8:	pop	{r2, r3}
   235fc:	rsbs	r0, r0, #0
   23600:	sbc	r1, r1, r1, lsl #1
   23604:	rsbs	r2, r2, #0
   23608:	sbc	r3, r3, r3, lsl #1
   2360c:	bx	lr
   23610:	rsbs	r2, r2, #0
   23614:	sbc	r3, r3, r3, lsl #1
   23618:	bl	23668 <__assert_fail@plt+0x12390>
   2361c:	ldr	lr, [sp, #4]
   23620:	add	sp, sp, #8
   23624:	pop	{r2, r3}
   23628:	rsbs	r0, r0, #0
   2362c:	sbc	r1, r1, r1, lsl #1
   23630:	bx	lr
   23634:	rsbs	r2, r2, #0
   23638:	sbc	r3, r3, r3, lsl #1
   2363c:	bl	23668 <__assert_fail@plt+0x12390>
   23640:	ldr	lr, [sp, #4]
   23644:	add	sp, sp, #8
   23648:	pop	{r2, r3}
   2364c:	rsbs	r2, r2, #0
   23650:	sbc	r3, r3, r3, lsl #1
   23654:	bx	lr
   23658:	push	{r1, lr}
   2365c:	mov	r0, #8
   23660:	bl	10fe4 <raise@plt>
   23664:	pop	{r1, pc}
   23668:	cmp	r1, r3
   2366c:	push	{r4, r5, r6, r7, r8, r9, lr}
   23670:	cmpeq	r0, r2
   23674:	mov	r4, r0
   23678:	mov	r5, r1
   2367c:	ldr	r9, [sp, #28]
   23680:	movcc	r0, #0
   23684:	movcc	r1, #0
   23688:	bcc	23780 <__assert_fail@plt+0x124a8>
   2368c:	cmp	r3, #0
   23690:	clzeq	ip, r2
   23694:	clzne	ip, r3
   23698:	addeq	ip, ip, #32
   2369c:	cmp	r5, #0
   236a0:	clzeq	r1, r4
   236a4:	addeq	r1, r1, #32
   236a8:	clzne	r1, r5
   236ac:	sub	ip, ip, r1
   236b0:	sub	lr, ip, #32
   236b4:	lsl	r7, r3, ip
   236b8:	rsb	r8, ip, #32
   236bc:	orr	r7, r7, r2, lsl lr
   236c0:	orr	r7, r7, r2, lsr r8
   236c4:	lsl	r6, r2, ip
   236c8:	cmp	r5, r7
   236cc:	cmpeq	r4, r6
   236d0:	movcc	r0, #0
   236d4:	movcc	r1, #0
   236d8:	bcc	236f4 <__assert_fail@plt+0x1241c>
   236dc:	mov	r3, #1
   236e0:	subs	r4, r4, r6
   236e4:	lsl	r1, r3, lr
   236e8:	lsl	r0, r3, ip
   236ec:	orr	r1, r1, r3, lsr r8
   236f0:	sbc	r5, r5, r7
   236f4:	cmp	ip, #0
   236f8:	beq	23780 <__assert_fail@plt+0x124a8>
   236fc:	lsrs	r3, r7, #1
   23700:	rrx	r2, r6
   23704:	mov	r6, ip
   23708:	b	2372c <__assert_fail@plt+0x12454>
   2370c:	subs	r4, r4, r2
   23710:	sbc	r5, r5, r3
   23714:	adds	r4, r4, r4
   23718:	adc	r5, r5, r5
   2371c:	adds	r4, r4, #1
   23720:	adc	r5, r5, #0
   23724:	subs	r6, r6, #1
   23728:	beq	23748 <__assert_fail@plt+0x12470>
   2372c:	cmp	r5, r3
   23730:	cmpeq	r4, r2
   23734:	bcs	2370c <__assert_fail@plt+0x12434>
   23738:	adds	r4, r4, r4
   2373c:	adc	r5, r5, r5
   23740:	subs	r6, r6, #1
   23744:	bne	2372c <__assert_fail@plt+0x12454>
   23748:	lsr	r6, r4, ip
   2374c:	lsr	r7, r5, ip
   23750:	orr	r6, r6, r5, lsl r8
   23754:	adds	r2, r0, r4
   23758:	orr	r6, r6, r5, lsr lr
   2375c:	adc	r3, r1, r5
   23760:	lsl	r1, r7, ip
   23764:	orr	r1, r1, r6, lsl lr
   23768:	lsl	r0, r6, ip
   2376c:	orr	r1, r1, r6, lsr r8
   23770:	subs	r0, r2, r0
   23774:	mov	r4, r6
   23778:	mov	r5, r7
   2377c:	sbc	r1, r3, r1
   23780:	cmp	r9, #0
   23784:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   23788:	strd	r4, [r9]
   2378c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23790:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23794:	mov	r7, r0
   23798:	ldr	r6, [pc, #72]	; 237e8 <__assert_fail@plt+0x12510>
   2379c:	ldr	r5, [pc, #72]	; 237ec <__assert_fail@plt+0x12514>
   237a0:	add	r6, pc, r6
   237a4:	add	r5, pc, r5
   237a8:	sub	r6, r6, r5
   237ac:	mov	r8, r1
   237b0:	mov	r9, r2
   237b4:	bl	10f94 <pthread_mutex_unlock@plt-0x20>
   237b8:	asrs	r6, r6, #2
   237bc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   237c0:	mov	r4, #0
   237c4:	add	r4, r4, #1
   237c8:	ldr	r3, [r5], #4
   237cc:	mov	r2, r9
   237d0:	mov	r1, r8
   237d4:	mov	r0, r7
   237d8:	blx	r3
   237dc:	cmp	r6, r4
   237e0:	bne	237c4 <__assert_fail@plt+0x124ec>
   237e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   237e8:	andeq	r1, r1, r8, ror #14
   237ec:	andeq	r1, r1, r0, ror #14
   237f0:	bx	lr
   237f4:	ldr	r3, [pc, #12]	; 23808 <__assert_fail@plt+0x12530>
   237f8:	mov	r1, #0
   237fc:	add	r3, pc, r3
   23800:	ldr	r2, [r3]
   23804:	b	111e8 <__cxa_atexit@plt>
   23808:	andeq	r1, r1, r0, lsr #18

Disassembly of section .fini:

0002380c <.fini>:
   2380c:	push	{r3, lr}
   23810:	pop	{r3, pc}
