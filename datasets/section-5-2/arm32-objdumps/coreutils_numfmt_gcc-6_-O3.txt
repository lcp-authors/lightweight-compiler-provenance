
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00010e18 <.init>:
   10e18:	push	{r3, lr}
   10e1c:	bl	11e10 <__assert_fail@plt+0xd14>
   10e20:	pop	{r3, pc}

Disassembly of section .plt:

00010e24 <calloc@plt-0x14>:
   10e24:	push	{lr}		; (str lr, [sp, #-4]!)
   10e28:	ldr	lr, [pc, #4]	; 10e34 <calloc@plt-0x4>
   10e2c:	add	lr, pc, lr
   10e30:	ldr	pc, [lr, #8]!
   10e34:	andeq	lr, r1, ip, asr #3

00010e38 <calloc@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #122880	; 0x1e000
   10e40:	ldr	pc, [ip, #460]!	; 0x1cc

00010e44 <fputs_unlocked@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #122880	; 0x1e000
   10e4c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e50 <raise@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #122880	; 0x1e000
   10e58:	ldr	pc, [ip, #444]!	; 0x1bc

00010e5c <__strncat_chk@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #122880	; 0x1e000
   10e64:	ldr	pc, [ip, #436]!	; 0x1b4

00010e68 <strcmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #122880	; 0x1e000
   10e70:	ldr	pc, [ip, #428]!	; 0x1ac

00010e74 <strtol@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #122880	; 0x1e000
   10e7c:	ldr	pc, [ip, #420]!	; 0x1a4

00010e80 <fflush@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #122880	; 0x1e000
   10e88:	ldr	pc, [ip, #412]!	; 0x19c

00010e8c <wcwidth@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #122880	; 0x1e000
   10e94:	ldr	pc, [ip, #404]!	; 0x194

00010e98 <memmove@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #122880	; 0x1e000
   10ea0:	ldr	pc, [ip, #396]!	; 0x18c

00010ea4 <free@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #122880	; 0x1e000
   10eac:	ldr	pc, [ip, #388]!	; 0x184

00010eb0 <_exit@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #122880	; 0x1e000
   10eb8:	ldr	pc, [ip, #380]!	; 0x17c

00010ebc <memcpy@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #122880	; 0x1e000
   10ec4:	ldr	pc, [ip, #372]!	; 0x174

00010ec8 <__strtoull_internal@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #122880	; 0x1e000
   10ed0:	ldr	pc, [ip, #364]!	; 0x16c

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #122880	; 0x1e000
   10edc:	ldr	pc, [ip, #356]!	; 0x164

00010ee0 <memcmp@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #122880	; 0x1e000
   10ee8:	ldr	pc, [ip, #348]!	; 0x15c

00010eec <fputc_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #122880	; 0x1e000
   10ef4:	ldr	pc, [ip, #340]!	; 0x154

00010ef8 <dcgettext@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #122880	; 0x1e000
   10f00:	ldr	pc, [ip, #332]!	; 0x14c

00010f04 <realloc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #122880	; 0x1e000
   10f0c:	ldr	pc, [ip, #324]!	; 0x144

00010f10 <textdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #122880	; 0x1e000
   10f18:	ldr	pc, [ip, #316]!	; 0x13c

00010f1c <iswprint@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #122880	; 0x1e000
   10f24:	ldr	pc, [ip, #308]!	; 0x134

00010f28 <fwrite@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #122880	; 0x1e000
   10f30:	ldr	pc, [ip, #300]!	; 0x12c

00010f34 <lseek64@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #122880	; 0x1e000
   10f3c:	ldr	pc, [ip, #292]!	; 0x124

00010f40 <__ctype_get_mb_cur_max@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #122880	; 0x1e000
   10f48:	ldr	pc, [ip, #284]!	; 0x11c

00010f4c <strcpy@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #122880	; 0x1e000
   10f54:	ldr	pc, [ip, #276]!	; 0x114

00010f58 <__fpending@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #122880	; 0x1e000
   10f60:	ldr	pc, [ip, #268]!	; 0x10c

00010f64 <mbrtowc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #122880	; 0x1e000
   10f6c:	ldr	pc, [ip, #260]!	; 0x104

00010f70 <wcstombs@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #122880	; 0x1e000
   10f78:	ldr	pc, [ip, #252]!	; 0xfc

00010f7c <error@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #122880	; 0x1e000
   10f84:	ldr	pc, [ip, #244]!	; 0xf4

00010f88 <malloc@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #122880	; 0x1e000
   10f90:	ldr	pc, [ip, #236]!	; 0xec

00010f94 <__libc_start_main@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #122880	; 0x1e000
   10f9c:	ldr	pc, [ip, #228]!	; 0xe4

00010fa0 <__freading@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #122880	; 0x1e000
   10fa8:	ldr	pc, [ip, #220]!	; 0xdc

00010fac <__gmon_start__@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #122880	; 0x1e000
   10fb4:	ldr	pc, [ip, #212]!	; 0xd4

00010fb8 <mempcpy@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #122880	; 0x1e000
   10fc0:	ldr	pc, [ip, #204]!	; 0xcc

00010fc4 <getopt_long@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #122880	; 0x1e000
   10fcc:	ldr	pc, [ip, #196]!	; 0xc4

00010fd0 <__ctype_b_loc@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #122880	; 0x1e000
   10fd8:	ldr	pc, [ip, #188]!	; 0xbc

00010fdc <exit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #122880	; 0x1e000
   10fe4:	ldr	pc, [ip, #180]!	; 0xb4

00010fe8 <strlen@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #122880	; 0x1e000
   10ff0:	ldr	pc, [ip, #172]!	; 0xac

00010ff4 <strchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #122880	; 0x1e000
   10ffc:	ldr	pc, [ip, #164]!	; 0xa4

00011000 <__errno_location@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #122880	; 0x1e000
   11008:	ldr	pc, [ip, #156]!	; 0x9c

0001100c <__cxa_atexit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #122880	; 0x1e000
   11014:	ldr	pc, [ip, #148]!	; 0x94

00011018 <memset@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #122880	; 0x1e000
   11020:	ldr	pc, [ip, #140]!	; 0x8c

00011024 <__printf_chk@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #122880	; 0x1e000
   1102c:	ldr	pc, [ip, #132]!	; 0x84

00011030 <fileno@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #122880	; 0x1e000
   11038:	ldr	pc, [ip, #124]!	; 0x7c

0001103c <__fprintf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #122880	; 0x1e000
   11044:	ldr	pc, [ip, #116]!	; 0x74

00011048 <fclose@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #122880	; 0x1e000
   11050:	ldr	pc, [ip, #108]!	; 0x6c

00011054 <fseeko64@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #122880	; 0x1e000
   1105c:	ldr	pc, [ip, #100]!	; 0x64

00011060 <__overflow@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #122880	; 0x1e000
   11068:	ldr	pc, [ip, #92]!	; 0x5c

0001106c <setlocale@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #122880	; 0x1e000
   11074:	ldr	pc, [ip, #84]!	; 0x54

00011078 <wcswidth@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #122880	; 0x1e000
   11080:	ldr	pc, [ip, #76]!	; 0x4c

00011084 <strrchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #122880	; 0x1e000
   1108c:	ldr	pc, [ip, #68]!	; 0x44

00011090 <nl_langinfo@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #122880	; 0x1e000
   11098:	ldr	pc, [ip, #60]!	; 0x3c

0001109c <mbstowcs@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #122880	; 0x1e000
   110a4:	ldr	pc, [ip, #52]!	; 0x34

000110a8 <qsort@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #122880	; 0x1e000
   110b0:	ldr	pc, [ip, #44]!	; 0x2c

000110b4 <bindtextdomain@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #122880	; 0x1e000
   110bc:	ldr	pc, [ip, #36]!	; 0x24

000110c0 <getdelim@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #122880	; 0x1e000
   110c8:	ldr	pc, [ip, #28]!

000110cc <strncmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #122880	; 0x1e000
   110d4:	ldr	pc, [ip, #20]!

000110d8 <abort@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #122880	; 0x1e000
   110e0:	ldr	pc, [ip, #12]!

000110e4 <__snprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #122880	; 0x1e000
   110ec:	ldr	pc, [ip, #4]!

000110f0 <strspn@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #118784	; 0x1d000
   110f8:	ldr	pc, [ip, #4092]!	; 0xffc

000110fc <__assert_fail@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #118784	; 0x1d000
   11104:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

00011108 <.text>:
   11108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1110c:	mov	fp, r0
   11110:	sub	sp, sp, #52	; 0x34
   11114:	ldr	r0, [r1]
   11118:	mov	r6, r1
   1111c:	bl	15468 <__assert_fail@plt+0x436c>
   11120:	ldr	r1, [pc, #3004]	; 11ce4 <__assert_fail@plt+0xbe8>
   11124:	mov	r0, #6
   11128:	bl	1106c <setlocale@plt>
   1112c:	ldr	r1, [pc, #2996]	; 11ce8 <__assert_fail@plt+0xbec>
   11130:	ldr	r5, [pc, #2996]	; 11cec <__assert_fail@plt+0xbf0>
   11134:	str	r0, [sp, #28]
   11138:	ldr	r0, [pc, #2992]	; 11cf0 <__assert_fail@plt+0xbf4>
   1113c:	bl	110b4 <bindtextdomain@plt>
   11140:	ldr	r0, [pc, #2984]	; 11cf0 <__assert_fail@plt+0xbf4>
   11144:	bl	10f10 <textdomain@plt>
   11148:	mov	r0, #65536	; 0x10000
   1114c:	bl	11090 <nl_langinfo@plt>
   11150:	cmp	r0, #0
   11154:	str	r0, [r5, #28]
   11158:	beq	11210 <__assert_fail@plt+0x114>
   1115c:	ldrb	r3, [r0]
   11160:	cmp	r3, #0
   11164:	beq	11210 <__assert_fail@plt+0x114>
   11168:	bl	10fe8 <strlen@plt>
   1116c:	ldr	r3, [pc, #2944]	; 11cf4 <__assert_fail@plt+0xbf8>
   11170:	ldr	r8, [pc, #2944]	; 11cf8 <__assert_fail@plt+0xbfc>
   11174:	ldr	r9, [pc, #2944]	; 11cfc <__assert_fail@plt+0xc00>
   11178:	ldr	sl, [pc, #2944]	; 11d00 <__assert_fail@plt+0xc04>
   1117c:	add	r7, r3, #180	; 0xb4
   11180:	str	r0, [r5, #32]
   11184:	ldr	r0, [pc, #2936]	; 11d04 <__assert_fail@plt+0xc08>
   11188:	bl	1c9c4 <__assert_fail@plt+0xb8c8>
   1118c:	mov	r4, #0
   11190:	str	r4, [sp]
   11194:	mov	r3, r7
   11198:	mov	r2, r8
   1119c:	mov	r1, r6
   111a0:	mov	r0, fp
   111a4:	bl	10fc4 <getopt_long@plt>
   111a8:	cmn	r0, #1
   111ac:	beq	11540 <__assert_fail@plt+0x444>
   111b0:	cmp	r0, #260	; 0x104
   111b4:	beq	114ec <__assert_fail@plt+0x3f0>
   111b8:	ble	11220 <__assert_fail@plt+0x124>
   111bc:	ldr	r3, [pc, #2884]	; 11d08 <__assert_fail@plt+0xc0c>
   111c0:	cmp	r0, r3
   111c4:	beq	114e0 <__assert_fail@plt+0x3e4>
   111c8:	bgt	11268 <__assert_fail@plt+0x16c>
   111cc:	sub	r3, r3, #3
   111d0:	cmp	r0, r3
   111d4:	beq	114d4 <__assert_fail@plt+0x3d8>
   111d8:	blt	114c8 <__assert_fail@plt+0x3cc>
   111dc:	add	r3, r3, #1
   111e0:	cmp	r0, r3
   111e4:	beq	11360 <__assert_fail@plt+0x264>
   111e8:	cmp	r0, #264	; 0x108
   111ec:	bne	112e4 <__assert_fail@plt+0x1e8>
   111f0:	ldr	r3, [pc, #2836]	; 11d0c <__assert_fail@plt+0xc10>
   111f4:	ldr	r3, [r3]
   111f8:	cmp	r3, #0
   111fc:	bne	11c50 <__assert_fail@plt+0xb54>
   11200:	mov	r1, #1
   11204:	ldr	r0, [r9]
   11208:	bl	13d7c <__assert_fail@plt+0x2c80>
   1120c:	b	1118c <__assert_fail@plt+0x90>
   11210:	ldr	r3, [pc, #2808]	; 11d10 <__assert_fail@plt+0xc14>
   11214:	str	r3, [r5, #28]
   11218:	mov	r0, r3
   1121c:	b	11168 <__assert_fail@plt+0x6c>
   11220:	cmp	r0, #122	; 0x7a
   11224:	beq	114a0 <__assert_fail@plt+0x3a4>
   11228:	ble	112cc <__assert_fail@plt+0x1d0>
   1122c:	ldr	r3, [pc, #2784]	; 11d14 <__assert_fail@plt+0xc18>
   11230:	cmp	r0, r3
   11234:	beq	114ac <__assert_fail@plt+0x3b0>
   11238:	ble	113e0 <__assert_fail@plt+0x2e4>
   1123c:	ldr	r3, [pc, #2772]	; 11d18 <__assert_fail@plt+0xc1c>
   11240:	cmp	r0, r3
   11244:	beq	112ec <__assert_fail@plt+0x1f0>
   11248:	add	r3, r3, #1
   1124c:	cmp	r0, r3
   11250:	bne	112e4 <__assert_fail@plt+0x1e8>
   11254:	ldr	r0, [r9]
   11258:	bl	11f00 <__assert_fail@plt+0xe04>
   1125c:	ldr	r3, [pc, #2744]	; 11d1c <__assert_fail@plt+0xc20>
   11260:	strd	r0, [r3, #16]
   11264:	b	1118c <__assert_fail@plt+0x90>
   11268:	ldr	r3, [pc, #2736]	; 11d20 <__assert_fail@plt+0xc24>
   1126c:	cmp	r0, r3
   11270:	beq	11438 <__assert_fail@plt+0x33c>
   11274:	blt	11428 <__assert_fail@plt+0x32c>
   11278:	cmp	r0, #268	; 0x10c
   1127c:	beq	11354 <__assert_fail@plt+0x258>
   11280:	add	r3, r3, #2
   11284:	cmp	r0, r3
   11288:	bne	112e4 <__assert_fail@plt+0x1e8>
   1128c:	ldr	r2, [sl]
   11290:	ldr	r3, [pc, #2700]	; 11d24 <__assert_fail@plt+0xc28>
   11294:	mov	r0, #1
   11298:	mov	r1, #4
   1129c:	str	r2, [sp, #4]
   112a0:	str	r0, [sp, #8]
   112a4:	add	r2, r3, #16
   112a8:	str	r1, [sp]
   112ac:	ldr	r0, [pc, #2676]	; 11d28 <__assert_fail@plt+0xc2c>
   112b0:	ldr	r1, [r9]
   112b4:	bl	14874 <__assert_fail@plt+0x3778>
   112b8:	ldr	r3, [pc, #2612]	; 11cf4 <__assert_fail@plt+0xbf8>
   112bc:	add	r0, r3, r0, lsl #2
   112c0:	ldr	r3, [r0, #608]	; 0x260
   112c4:	str	r3, [r5, #36]	; 0x24
   112c8:	b	1118c <__assert_fail@plt+0x90>
   112cc:	cmn	r0, #2
   112d0:	beq	114c0 <__assert_fail@plt+0x3c4>
   112d4:	cmp	r0, #100	; 0x64
   112d8:	beq	1132c <__assert_fail@plt+0x230>
   112dc:	cmn	r0, #3
   112e0:	beq	113b0 <__assert_fail@plt+0x2b4>
   112e4:	mov	r0, #1
   112e8:	bl	13784 <__assert_fail@plt+0x2688>
   112ec:	ldr	r2, [sl]
   112f0:	ldr	r3, [pc, #2612]	; 11d2c <__assert_fail@plt+0xc30>
   112f4:	mov	r0, #1
   112f8:	mov	r1, #4
   112fc:	str	r2, [sp, #4]
   11300:	str	r0, [sp, #8]
   11304:	add	r2, r3, #16
   11308:	str	r1, [sp]
   1130c:	ldr	r0, [pc, #2588]	; 11d30 <__assert_fail@plt+0xc34>
   11310:	ldr	r1, [r9]
   11314:	bl	14874 <__assert_fail@plt+0x3778>
   11318:	ldr	r3, [pc, #2516]	; 11cf4 <__assert_fail@plt+0xbf8>
   1131c:	add	r0, r3, r0, lsl #2
   11320:	ldr	r3, [r0, #528]	; 0x210
   11324:	str	r3, [r5, #44]	; 0x2c
   11328:	b	1118c <__assert_fail@plt+0x90>
   1132c:	ldr	r2, [r9]
   11330:	ldrb	r3, [r2]
   11334:	cmp	r3, #0
   11338:	beq	11348 <__assert_fail@plt+0x24c>
   1133c:	ldrb	r2, [r2, #1]
   11340:	cmp	r2, #0
   11344:	bne	11b94 <__assert_fail@plt+0xa98>
   11348:	ldr	r2, [pc, #2508]	; 11d1c <__assert_fail@plt+0xc20>
   1134c:	str	r3, [r2, #36]	; 0x24
   11350:	b	1118c <__assert_fail@plt+0x90>
   11354:	ldr	r3, [r9]
   11358:	str	r3, [r5, #72]	; 0x48
   1135c:	b	1118c <__assert_fail@plt+0x90>
   11360:	ldr	r3, [pc, #2428]	; 11ce4 <__assert_fail@plt+0xbe8>
   11364:	mov	r1, r4
   11368:	str	r3, [sp]
   1136c:	mov	r2, #10
   11370:	ldr	r3, [pc, #2492]	; 11d34 <__assert_fail@plt+0xc38>
   11374:	ldr	r0, [r9]
   11378:	bl	1a578 <__assert_fail@plt+0x947c>
   1137c:	cmp	r0, #0
   11380:	bne	11c2c <__assert_fail@plt+0xb30>
   11384:	ldr	r3, [r5, #12]
   11388:	bics	r2, r3, #-2147483648	; 0x80000000
   1138c:	beq	11c2c <__assert_fail@plt+0xb30>
   11390:	cmp	r3, #0
   11394:	bge	1118c <__assert_fail@plt+0x90>
   11398:	rsb	r3, r3, #0
   1139c:	str	r3, [r5, #12]
   113a0:	ldr	r3, [pc, #2420]	; 11d1c <__assert_fail@plt+0xc20>
   113a4:	mov	r2, #0
   113a8:	str	r2, [r3, #32]
   113ac:	b	1118c <__assert_fail@plt+0x90>
   113b0:	ldr	r1, [pc, #2432]	; 11d38 <__assert_fail@plt+0xc3c>
   113b4:	ldr	r3, [pc, #2432]	; 11d3c <__assert_fail@plt+0xc40>
   113b8:	ldr	r2, [pc, #2432]	; 11d40 <__assert_fail@plt+0xc44>
   113bc:	str	r4, [sp, #4]
   113c0:	ldr	r0, [r1]
   113c4:	ldr	r3, [r3]
   113c8:	ldr	r1, [pc, #2420]	; 11d44 <__assert_fail@plt+0xc48>
   113cc:	str	r2, [sp]
   113d0:	ldr	r2, [pc, #2416]	; 11d48 <__assert_fail@plt+0xc4c>
   113d4:	bl	19d08 <__assert_fail@plt+0x8c0c>
   113d8:	mov	r0, r4
   113dc:	bl	10fdc <exit@plt>
   113e0:	cmp	r0, #256	; 0x100
   113e4:	bne	112e4 <__assert_fail@plt+0x1e8>
   113e8:	ldr	r2, [sl]
   113ec:	ldr	r3, [pc, #2392]	; 11d4c <__assert_fail@plt+0xc50>
   113f0:	mov	r0, #1
   113f4:	mov	r1, #4
   113f8:	str	r2, [sp, #4]
   113fc:	str	r0, [sp, #8]
   11400:	add	r2, r3, #20
   11404:	str	r1, [sp]
   11408:	ldr	r0, [pc, #2368]	; 11d50 <__assert_fail@plt+0xc54>
   1140c:	ldr	r1, [r9]
   11410:	bl	14874 <__assert_fail@plt+0x3778>
   11414:	ldr	r3, [pc, #2264]	; 11cf4 <__assert_fail@plt+0xbf8>
   11418:	add	r0, r3, r0, lsl #2
   1141c:	ldr	r3, [r0, #484]	; 0x1e4
   11420:	str	r3, [r5, #24]
   11424:	b	1118c <__assert_fail@plt+0x90>
   11428:	mov	r3, #1
   1142c:	strb	r3, [r5, #4]
   11430:	strb	r3, [r5, #40]	; 0x28
   11434:	b	1118c <__assert_fail@plt+0x90>
   11438:	ldr	r0, [r9]
   1143c:	cmp	r0, #0
   11440:	beq	11530 <__assert_fail@plt+0x434>
   11444:	ldr	r3, [pc, #2200]	; 11ce4 <__assert_fail@plt+0xbe8>
   11448:	mov	r1, r4
   1144c:	str	r3, [sp]
   11450:	mov	r2, #10
   11454:	ldr	r3, [pc, #2296]	; 11d54 <__assert_fail@plt+0xc58>
   11458:	bl	1ae58 <__assert_fail@plt+0x9d5c>
   1145c:	cmp	r0, #0
   11460:	bne	11470 <__assert_fail@plt+0x374>
   11464:	ldrd	r2, [r5, #64]	; 0x40
   11468:	orrs	r3, r2, r3
   1146c:	bne	1118c <__assert_fail@plt+0x90>
   11470:	ldr	r1, [pc, #2272]	; 11d58 <__assert_fail@plt+0xc5c>
   11474:	mov	r2, #5
   11478:	mov	r0, #0
   1147c:	bl	10ef8 <dcgettext@plt>
   11480:	mov	r4, r0
   11484:	ldr	r0, [r9]
   11488:	bl	19334 <__assert_fail@plt+0x8238>
   1148c:	mov	r2, r4
   11490:	mov	r1, #0
   11494:	mov	r3, r0
   11498:	mov	r0, #1
   1149c:	bl	10f7c <error@plt>
   114a0:	ldr	r3, [pc, #2164]	; 11d1c <__assert_fail@plt+0xc20>
   114a4:	strb	r4, [r3, #40]	; 0x28
   114a8:	b	1118c <__assert_fail@plt+0x90>
   114ac:	ldr	r0, [r9]
   114b0:	bl	11f00 <__assert_fail@plt+0xe04>
   114b4:	ldr	r3, [pc, #2144]	; 11d1c <__assert_fail@plt+0xc20>
   114b8:	strd	r0, [r3, #8]
   114bc:	b	1118c <__assert_fail@plt+0x90>
   114c0:	mov	r0, r4
   114c4:	bl	13784 <__assert_fail@plt+0x2688>
   114c8:	ldr	r3, [r9]
   114cc:	str	r3, [r5]
   114d0:	b	1118c <__assert_fail@plt+0x90>
   114d4:	mov	r3, #1
   114d8:	str	r3, [r5, #48]	; 0x30
   114dc:	b	1118c <__assert_fail@plt+0x90>
   114e0:	mov	r3, #1
   114e4:	strb	r3, [r5, #40]	; 0x28
   114e8:	b	1118c <__assert_fail@plt+0x90>
   114ec:	ldr	r2, [sl]
   114f0:	ldr	r3, [pc, #2148]	; 11d5c <__assert_fail@plt+0xc60>
   114f4:	mov	r0, #1
   114f8:	mov	r1, #4
   114fc:	str	r2, [sp, #4]
   11500:	str	r0, [sp, #8]
   11504:	add	r2, r3, #20
   11508:	str	r1, [sp]
   1150c:	ldr	r0, [pc, #2124]	; 11d60 <__assert_fail@plt+0xc64>
   11510:	ldr	r1, [r9]
   11514:	bl	14874 <__assert_fail@plt+0x3778>
   11518:	ldr	r3, [pc, #2004]	; 11cf4 <__assert_fail@plt+0xbf8>
   1151c:	ldr	r2, [pc, #2040]	; 11d1c <__assert_fail@plt+0xc20>
   11520:	add	r0, r3, r0, lsl #2
   11524:	ldr	r3, [r0, #564]	; 0x234
   11528:	str	r3, [r2, #28]
   1152c:	b	1118c <__assert_fail@plt+0x90>
   11530:	mov	r2, #1
   11534:	mov	r3, #0
   11538:	strd	r2, [r5, #64]	; 0x40
   1153c:	b	1118c <__assert_fail@plt+0x90>
   11540:	ldr	r3, [r5, #72]	; 0x48
   11544:	cmp	r3, #0
   11548:	beq	11560 <__assert_fail@plt+0x464>
   1154c:	ldr	r3, [r5, #48]	; 0x30
   11550:	cmp	r3, #0
   11554:	movne	r2, #5
   11558:	ldrne	r1, [pc, #2052]	; 11d64 <__assert_fail@plt+0xc68>
   1155c:	bne	11b9c <__assert_fail@plt+0xaa0>
   11560:	ldrb	r3, [r5, #40]	; 0x28
   11564:	ldr	r2, [sp, #28]
   11568:	cmp	r2, #0
   1156c:	movne	r3, #0
   11570:	andeq	r3, r3, #1
   11574:	cmp	r3, #0
   11578:	bne	11ca8 <__assert_fail@plt+0xbac>
   1157c:	ldrb	r3, [r5, #40]	; 0x28
   11580:	cmp	r3, #0
   11584:	beq	115e4 <__assert_fail@plt+0x4e8>
   11588:	ldr	r3, [r5, #24]
   1158c:	cmp	r3, #0
   11590:	bne	115e4 <__assert_fail@plt+0x4e8>
   11594:	ldr	r3, [r5, #44]	; 0x2c
   11598:	cmp	r3, #0
   1159c:	bne	115e4 <__assert_fail@plt+0x4e8>
   115a0:	ldr	r3, [r5, #48]	; 0x30
   115a4:	cmp	r3, #0
   115a8:	bne	11c5c <__assert_fail@plt+0xb60>
   115ac:	ldr	r3, [r5, #12]
   115b0:	ldr	r4, [r5, #72]	; 0x48
   115b4:	cmp	r3, #0
   115b8:	bne	11c9c <__assert_fail@plt+0xba0>
   115bc:	cmp	r4, #0
   115c0:	bne	115f0 <__assert_fail@plt+0x4f4>
   115c4:	mov	r2, #5
   115c8:	ldr	r1, [pc, #1944]	; 11d68 <__assert_fail@plt+0xc6c>
   115cc:	mov	r0, r4
   115d0:	bl	10ef8 <dcgettext@plt>
   115d4:	mov	r1, r4
   115d8:	mov	r2, r0
   115dc:	mov	r0, r4
   115e0:	bl	10f7c <error@plt>
   115e4:	ldr	r4, [r5, #72]	; 0x48
   115e8:	cmp	r4, #0
   115ec:	beq	11718 <__assert_fail@plt+0x61c>
   115f0:	mov	r3, #0
   115f4:	mov	r2, #1
   115f8:	str	r3, [sp, #44]	; 0x2c
   115fc:	mov	r0, r2
   11600:	mov	lr, #2
   11604:	b	1161c <__assert_fail@plt+0x520>
   11608:	cmp	r8, #0
   1160c:	beq	11ccc <__assert_fail@plt+0xbd0>
   11610:	mov	r1, r0
   11614:	add	r3, r3, r1
   11618:	add	r2, r2, #1
   1161c:	ldrb	r8, [r4, r3]
   11620:	sub	r7, r2, #1
   11624:	cmp	r8, #37	; 0x25
   11628:	bne	11608 <__assert_fail@plt+0x50c>
   1162c:	add	r1, r3, #1
   11630:	ldrb	ip, [r4, r1]
   11634:	cmp	ip, #37	; 0x25
   11638:	bne	117f0 <__assert_fail@plt+0x6f4>
   1163c:	mov	r1, lr
   11640:	b	11614 <__assert_fail@plt+0x518>
   11644:	cmp	r7, #0
   11648:	beq	11ae8 <__assert_fail@plt+0x9ec>
   1164c:	mov	r1, r7
   11650:	mov	r0, r4
   11654:	bl	1a4c4 <__assert_fail@plt+0x93c8>
   11658:	ldrb	r3, [r8]
   1165c:	cmp	r3, #0
   11660:	str	r0, [r5, #60]	; 0x3c
   11664:	bne	11ae8 <__assert_fail@plt+0x9ec>
   11668:	ldrb	r3, [r5, #4]
   1166c:	cmp	r3, #0
   11670:	beq	11718 <__assert_fail@plt+0x61c>
   11674:	ldr	r3, [pc, #1776]	; 11d6c <__assert_fail@plt+0xc70>
   11678:	mov	r1, r4
   1167c:	mov	r0, #0
   11680:	ldr	sl, [r3]
   11684:	bl	19180 <__assert_fail@plt+0x8084>
   11688:	ldr	r8, [pc, #1676]	; 11d1c <__assert_fail@plt+0xc20>
   1168c:	ldr	r1, [r5, #60]	; 0x3c
   11690:	ldr	r9, [pc, #1612]	; 11ce4 <__assert_fail@plt+0xbe8>
   11694:	cmp	r1, #0
   11698:	ldr	r3, [pc, #1744]	; 11d70 <__assert_fail@plt+0xc74>
   1169c:	ldr	r2, [r5, #48]	; 0x30
   116a0:	moveq	r1, r9
   116a4:	ldr	r7, [pc, #1736]	; 11d74 <__assert_fail@plt+0xc78>
   116a8:	ldr	r4, [pc, #1736]	; 11d78 <__assert_fail@plt+0xc7c>
   116ac:	str	r0, [sp, #28]
   116b0:	ldr	r0, [r8, #32]
   116b4:	ldr	r8, [r5, #12]
   116b8:	cmp	r0, #0
   116bc:	moveq	r7, r3
   116c0:	ldr	r3, [pc, #1716]	; 11d7c <__assert_fail@plt+0xc80>
   116c4:	cmp	r2, #0
   116c8:	mov	r0, #1
   116cc:	movne	r4, r3
   116d0:	bl	19180 <__assert_fail@plt+0x8084>
   116d4:	ldr	r1, [r5, #56]	; 0x38
   116d8:	cmp	r1, #0
   116dc:	moveq	r1, r9
   116e0:	str	r0, [sp, #32]
   116e4:	mov	r0, #2
   116e8:	bl	19180 <__assert_fail@plt+0x8084>
   116ec:	ldr	r3, [sp, #32]
   116f0:	str	r7, [sp, #8]
   116f4:	str	r3, [sp, #12]
   116f8:	str	r4, [sp]
   116fc:	str	r8, [sp, #4]
   11700:	ldr	r3, [sp, #28]
   11704:	ldr	r2, [pc, #1652]	; 11d80 <__assert_fail@plt+0xc84>
   11708:	mov	r1, #1
   1170c:	str	r0, [sp, #16]
   11710:	mov	r0, sl
   11714:	bl	1103c <__fprintf_chk@plt>
   11718:	ldr	r3, [r5, #48]	; 0x30
   1171c:	cmp	r3, #0
   11720:	bne	11984 <__assert_fail@plt+0x888>
   11724:	ldr	r3, [r5, #12]
   11728:	ldr	r2, [r5, #16]
   1172c:	cmp	r3, r2
   11730:	bcs	11acc <__assert_fail@plt+0x9d0>
   11734:	ldr	r3, [r5, #12]
   11738:	ldr	r2, [r5, #36]	; 0x24
   1173c:	cmp	r3, #0
   11740:	movne	r3, #0
   11744:	ldreq	r8, [pc, #1488]	; 11d1c <__assert_fail@plt+0xc20>
   11748:	ldr	r7, [pc, #1588]	; 11d84 <__assert_fail@plt+0xc88>
   1174c:	ldreq	r3, [r8, #36]	; 0x24
   11750:	subeq	r3, r3, #256	; 0x100
   11754:	clzeq	r3, r3
   11758:	lsreq	r3, r3, #5
   1175c:	cmp	r2, #0
   11760:	str	r3, [r5, #8]
   11764:	ldrne	r8, [pc, #1456]	; 11d1c <__assert_fail@plt+0xc20>
   11768:	movne	r3, #0
   1176c:	strne	r3, [r8]
   11770:	ldr	r3, [r7]
   11774:	cmp	fp, r3
   11778:	ble	119dc <__assert_fail@plt+0x8e0>
   1177c:	ldrb	r3, [r5, #40]	; 0x28
   11780:	cmp	r3, #0
   11784:	beq	11794 <__assert_fail@plt+0x698>
   11788:	ldrd	r2, [r5, #64]	; 0x40
   1178c:	orrs	r3, r2, r3
   11790:	bne	11c6c <__assert_fail@plt+0xb70>
   11794:	mov	r4, #1
   11798:	mov	r8, r4
   1179c:	b	117bc <__assert_fail@plt+0x6c0>
   117a0:	ldr	r0, [r6, r3, lsl #2]
   117a4:	mov	r1, r8
   117a8:	bl	135bc <__assert_fail@plt+0x24c0>
   117ac:	ldr	r3, [r7]
   117b0:	add	r3, r3, #1
   117b4:	str	r3, [r7]
   117b8:	and	r4, r4, r0
   117bc:	ldr	r3, [r7]
   117c0:	cmp	fp, r3
   117c4:	bgt	117a0 <__assert_fail@plt+0x6a4>
   117c8:	ldrb	r3, [r5, #40]	; 0x28
   117cc:	cmp	r4, #0
   117d0:	movne	r3, #0
   117d4:	andeq	r3, r3, #1
   117d8:	cmp	r3, #0
   117dc:	bne	11bb4 <__assert_fail@plt+0xab8>
   117e0:	cmp	r4, #0
   117e4:	beq	11bd4 <__assert_fail@plt+0xad8>
   117e8:	mov	r0, #0
   117ec:	bl	10fdc <exit@plt>
   117f0:	add	r3, r4, r1
   117f4:	ldr	r9, [pc, #1420]	; 11d88 <__assert_fail@plt+0xc8c>
   117f8:	mov	sl, r1
   117fc:	mov	r0, r3
   11800:	mov	r2, #0
   11804:	str	r2, [sp, #28]
   11808:	mov	r1, r9
   1180c:	bl	110f0 <strspn@plt>
   11810:	add	sl, sl, r0
   11814:	mov	r8, r0
   11818:	ldrb	r2, [r4, sl]
   1181c:	add	r0, r4, sl
   11820:	cmp	r2, #39	; 0x27
   11824:	beq	1195c <__assert_fail@plt+0x860>
   11828:	cmp	r2, #48	; 0x30
   1182c:	beq	11970 <__assert_fail@plt+0x874>
   11830:	cmp	r8, #0
   11834:	bne	11808 <__assert_fail@plt+0x70c>
   11838:	str	r0, [sp, #36]	; 0x24
   1183c:	bl	11000 <__errno_location@plt>
   11840:	ldr	r3, [sp, #36]	; 0x24
   11844:	add	r9, sp, #44	; 0x2c
   11848:	mov	r1, r9
   1184c:	mov	r2, #10
   11850:	str	r0, [sp, #32]
   11854:	str	r8, [r0]
   11858:	mov	r0, r3
   1185c:	bl	10e74 <strtol@plt>
   11860:	ldr	r3, [sp, #32]
   11864:	ldr	r2, [r3]
   11868:	cmp	r0, #-2147483648	; 0x80000000
   1186c:	cmpne	r2, #34	; 0x22
   11870:	moveq	r3, #1
   11874:	movne	r3, #0
   11878:	mov	sl, r0
   1187c:	moveq	r2, #5
   11880:	mov	r0, r3
   11884:	ldreq	r1, [pc, #1280]	; 11d8c <__assert_fail@plt+0xc90>
   11888:	ldr	r3, [sp, #36]	; 0x24
   1188c:	beq	11b6c <__assert_fail@plt+0xa70>
   11890:	ldr	r2, [sp, #44]	; 0x2c
   11894:	cmp	r2, r3
   11898:	cmpne	sl, #0
   1189c:	beq	118d4 <__assert_fail@plt+0x7d8>
   118a0:	ldrb	r3, [r5, #40]	; 0x28
   118a4:	cmp	r3, #0
   118a8:	beq	11c10 <__assert_fail@plt+0xb14>
   118ac:	ldr	r3, [r5, #12]
   118b0:	cmp	r3, #0
   118b4:	beq	11c10 <__assert_fail@plt+0xb14>
   118b8:	ldr	r3, [sp, #28]
   118bc:	eor	r3, r3, #1
   118c0:	cmp	sl, #0
   118c4:	orrle	r3, r3, #1
   118c8:	cmp	r3, #0
   118cc:	bne	11bec <__assert_fail@plt+0xaf0>
   118d0:	str	sl, [r5, #52]	; 0x34
   118d4:	ldrb	r8, [r2]
   118d8:	sub	r3, r2, r4
   118dc:	cmp	r8, #0
   118e0:	moveq	r2, #5
   118e4:	ldreq	r1, [pc, #1188]	; 11d90 <__assert_fail@plt+0xc94>
   118e8:	beq	11b6c <__assert_fail@plt+0xa70>
   118ec:	cmp	r8, #46	; 0x2e
   118f0:	beq	11af8 <__assert_fail@plt+0x9fc>
   118f4:	ldrb	r2, [r4, r3]
   118f8:	cmp	r2, #102	; 0x66
   118fc:	movne	r2, #5
   11900:	ldrne	r1, [pc, #1164]	; 11d94 <__assert_fail@plt+0xc98>
   11904:	bne	11b6c <__assert_fail@plt+0xa70>
   11908:	add	r3, r3, #1
   1190c:	add	r8, r4, r3
   11910:	ldrb	r2, [r4, r3]
   11914:	cmp	r2, #0
   11918:	beq	11c90 <__assert_fail@plt+0xb94>
   1191c:	mov	r1, #1
   11920:	mov	r0, #2
   11924:	b	11938 <__assert_fail@plt+0x83c>
   11928:	add	r3, r3, r2
   1192c:	ldrb	r2, [r4, r3]
   11930:	cmp	r2, #0
   11934:	beq	11644 <__assert_fail@plt+0x548>
   11938:	cmp	r2, #37	; 0x25
   1193c:	movne	r2, r1
   11940:	bne	11928 <__assert_fail@plt+0x82c>
   11944:	add	r2, r4, r3
   11948:	ldrb	r2, [r2, #1]
   1194c:	cmp	r2, #37	; 0x25
   11950:	bne	11cd8 <__assert_fail@plt+0xbdc>
   11954:	mov	r2, r0
   11958:	b	11928 <__assert_fail@plt+0x82c>
   1195c:	add	sl, sl, #1
   11960:	mov	r3, #1
   11964:	str	r3, [r5, #48]	; 0x30
   11968:	add	r0, r4, sl
   1196c:	b	11808 <__assert_fail@plt+0x70c>
   11970:	add	sl, sl, #1
   11974:	mov	r3, #1
   11978:	add	r0, r4, sl
   1197c:	str	r3, [sp, #28]
   11980:	b	11808 <__assert_fail@plt+0x70c>
   11984:	ldr	r3, [r5, #44]	; 0x2c
   11988:	cmp	r3, #0
   1198c:	movne	r2, #5
   11990:	ldrne	r1, [pc, #1024]	; 11d98 <__assert_fail@plt+0xc9c>
   11994:	bne	11b9c <__assert_fail@plt+0xaa0>
   11998:	ldrb	r3, [r5, #40]	; 0x28
   1199c:	cmp	r3, #0
   119a0:	beq	11724 <__assert_fail@plt+0x628>
   119a4:	ldr	r0, [pc, #1008]	; 11d9c <__assert_fail@plt+0xca0>
   119a8:	bl	11090 <nl_langinfo@plt>
   119ac:	ldrb	r4, [r0]
   119b0:	cmp	r4, #0
   119b4:	bne	11724 <__assert_fail@plt+0x628>
   119b8:	mov	r2, #5
   119bc:	ldr	r1, [pc, #988]	; 11da0 <__assert_fail@plt+0xca4>
   119c0:	mov	r0, r4
   119c4:	bl	10ef8 <dcgettext@plt>
   119c8:	mov	r1, r4
   119cc:	mov	r2, r0
   119d0:	mov	r0, r4
   119d4:	bl	10f7c <error@plt>
   119d8:	b	11724 <__assert_fail@plt+0x628>
   119dc:	add	r9, sp, #48	; 0x30
   119e0:	mov	r3, #0
   119e4:	str	r3, [r9, #-4]!
   119e8:	str	r3, [sp, #40]	; 0x28
   119ec:	ldr	r8, [pc, #808]	; 11d1c <__assert_fail@plt+0xc20>
   119f0:	ldr	r6, [pc, #940]	; 11da4 <__assert_fail@plt+0xca8>
   119f4:	ldr	r4, [pc, #828]	; 11d38 <__assert_fail@plt+0xc3c>
   119f8:	b	11a24 <__assert_fail@plt+0x928>
   119fc:	ldr	r3, [r6]
   11a00:	ldrb	r2, [r8, #40]	; 0x28
   11a04:	mov	r1, r9
   11a08:	add	r0, sp, #40	; 0x28
   11a0c:	bl	110c0 <getdelim@plt>
   11a10:	cmp	r0, #0
   11a14:	ble	11a3c <__assert_fail@plt+0x940>
   11a18:	ldr	r1, [r4]
   11a1c:	ldr	r0, [sp, #40]	; 0x28
   11a20:	bl	10e44 <fputs_unlocked@plt>
   11a24:	ldrd	r2, [r5, #64]	; 0x40
   11a28:	subs	r0, r2, #1
   11a2c:	sbc	r1, r3, #0
   11a30:	orrs	r3, r2, r3
   11a34:	strd	r0, [r5, #64]	; 0x40
   11a38:	bne	119fc <__assert_fail@plt+0x900>
   11a3c:	mov	r4, #1
   11a40:	mov	r7, #0
   11a44:	b	11a74 <__assert_fail@plt+0x978>
   11a48:	ldr	r3, [sp, #40]	; 0x28
   11a4c:	sub	r0, r0, #1
   11a50:	ldrb	r2, [r8, #40]	; 0x28
   11a54:	ldrb	r1, [r3, r0]
   11a58:	cmp	r1, r2
   11a5c:	strbeq	r7, [r3, r0]
   11a60:	moveq	r1, #1
   11a64:	movne	r1, #0
   11a68:	ldr	r0, [sp, #40]	; 0x28
   11a6c:	bl	135bc <__assert_fail@plt+0x24c0>
   11a70:	and	r4, r4, r0
   11a74:	ldr	r3, [r6]
   11a78:	ldrb	r2, [r8, #40]	; 0x28
   11a7c:	mov	r1, r9
   11a80:	add	r0, sp, #40	; 0x28
   11a84:	bl	110c0 <getdelim@plt>
   11a88:	cmp	r0, #0
   11a8c:	bgt	11a48 <__assert_fail@plt+0x94c>
   11a90:	ldr	r3, [r6]
   11a94:	ldr	r3, [r3]
   11a98:	tst	r3, #32
   11a9c:	beq	117c8 <__assert_fail@plt+0x6cc>
   11aa0:	bl	11000 <__errno_location@plt>
   11aa4:	mov	r2, #5
   11aa8:	ldr	r1, [pc, #760]	; 11da8 <__assert_fail@plt+0xcac>
   11aac:	ldr	r6, [r0]
   11ab0:	mov	r0, #0
   11ab4:	bl	10ef8 <dcgettext@plt>
   11ab8:	mov	r1, r6
   11abc:	mov	r2, r0
   11ac0:	mov	r0, #0
   11ac4:	bl	10f7c <error@plt>
   11ac8:	b	117c8 <__assert_fail@plt+0x6cc>
   11acc:	add	r3, r3, #1
   11ad0:	mov	r1, r3
   11ad4:	ldr	r0, [r5, #20]
   11ad8:	str	r3, [r5, #16]
   11adc:	bl	19f2c <__assert_fail@plt+0x8e30>
   11ae0:	str	r0, [r5, #20]
   11ae4:	b	11734 <__assert_fail@plt+0x638>
   11ae8:	mov	r0, r8
   11aec:	bl	1a500 <__assert_fail@plt+0x9404>
   11af0:	str	r0, [r5, #56]	; 0x38
   11af4:	b	11668 <__assert_fail@plt+0x56c>
   11af8:	ldr	r8, [sp, #32]
   11afc:	add	sl, r3, #1
   11b00:	mov	r3, #0
   11b04:	str	r3, [r8]
   11b08:	mov	r1, r9
   11b0c:	add	r0, r4, sl
   11b10:	mov	r2, #10
   11b14:	bl	10e74 <strtol@plt>
   11b18:	ldr	r3, [r8]
   11b1c:	ldr	r8, [pc, #504]	; 11d1c <__assert_fail@plt+0xc20>
   11b20:	sub	r3, r3, #34	; 0x22
   11b24:	clz	r3, r3
   11b28:	lsr	r3, r3, #5
   11b2c:	orrs	r3, r3, r0, lsr #31
   11b30:	str	r0, [r8, #24]
   11b34:	bne	11b64 <__assert_fail@plt+0xa68>
   11b38:	bl	10fd0 <__ctype_b_loc@plt>
   11b3c:	ldrb	r2, [r4, sl]
   11b40:	lsl	r3, r2, #1
   11b44:	ldr	r1, [r0]
   11b48:	ldrh	r3, [r1, r3]
   11b4c:	cmp	r2, #43	; 0x2b
   11b50:	orreq	r3, r3, #1
   11b54:	tst	r3, #1
   11b58:	ldreq	r3, [sp, #44]	; 0x2c
   11b5c:	subeq	r3, r3, r4
   11b60:	beq	118f4 <__assert_fail@plt+0x7f8>
   11b64:	ldr	r1, [pc, #576]	; 11dac <__assert_fail@plt+0xcb0>
   11b68:	mov	r2, #5
   11b6c:	mov	r0, #0
   11b70:	bl	10ef8 <dcgettext@plt>
   11b74:	mov	r5, r0
   11b78:	mov	r0, r4
   11b7c:	bl	19334 <__assert_fail@plt+0x8238>
   11b80:	mov	r2, r5
   11b84:	mov	r1, #0
   11b88:	mov	r3, r0
   11b8c:	mov	r0, #1
   11b90:	bl	10f7c <error@plt>
   11b94:	ldr	r1, [pc, #532]	; 11db0 <__assert_fail@plt+0xcb4>
   11b98:	mov	r2, #5
   11b9c:	mov	r0, #0
   11ba0:	bl	10ef8 <dcgettext@plt>
   11ba4:	mov	r1, #0
   11ba8:	mov	r2, r0
   11bac:	mov	r0, #1
   11bb0:	bl	10f7c <error@plt>
   11bb4:	mov	r2, #5
   11bb8:	ldr	r1, [pc, #500]	; 11db4 <__assert_fail@plt+0xcb8>
   11bbc:	mov	r0, #0
   11bc0:	bl	10ef8 <dcgettext@plt>
   11bc4:	mov	r1, #0
   11bc8:	mov	r2, r0
   11bcc:	mov	r0, r1
   11bd0:	bl	10f7c <error@plt>
   11bd4:	ldr	r3, [r5, #36]	; 0x24
   11bd8:	sub	r3, r3, #2
   11bdc:	cmp	r3, #1
   11be0:	bls	117e8 <__assert_fail@plt+0x6ec>
   11be4:	mov	r0, #2
   11be8:	b	117ec <__assert_fail@plt+0x6f0>
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #448]	; 11db8 <__assert_fail@plt+0xcbc>
   11bf4:	mov	r8, r0
   11bf8:	bl	10ef8 <dcgettext@plt>
   11bfc:	mov	r1, r8
   11c00:	mov	r2, r0
   11c04:	mov	r0, r8
   11c08:	bl	10f7c <error@plt>
   11c0c:	ldr	r2, [sp, #44]	; 0x2c
   11c10:	cmp	sl, #0
   11c14:	blt	11c38 <__assert_fail@plt+0xb3c>
   11c18:	ldr	r3, [sp, #28]
   11c1c:	cmp	r3, #0
   11c20:	streq	sl, [r5, #12]
   11c24:	beq	118d4 <__assert_fail@plt+0x7d8>
   11c28:	b	118d0 <__assert_fail@plt+0x7d4>
   11c2c:	mov	r2, #5
   11c30:	ldr	r1, [pc, #388]	; 11dbc <__assert_fail@plt+0xcc0>
   11c34:	b	11478 <__assert_fail@plt+0x37c>
   11c38:	ldr	r8, [pc, #220]	; 11d1c <__assert_fail@plt+0xc20>
   11c3c:	rsb	sl, sl, #0
   11c40:	mov	r3, #0
   11c44:	str	sl, [r5, #12]
   11c48:	str	r3, [r8, #32]
   11c4c:	b	118d4 <__assert_fail@plt+0x7d8>
   11c50:	mov	r2, #5
   11c54:	ldr	r1, [pc, #356]	; 11dc0 <__assert_fail@plt+0xcc4>
   11c58:	b	11b9c <__assert_fail@plt+0xaa0>
   11c5c:	ldr	r4, [r5, #72]	; 0x48
   11c60:	cmp	r4, #0
   11c64:	bne	115f0 <__assert_fail@plt+0x4f4>
   11c68:	b	11998 <__assert_fail@plt+0x89c>
   11c6c:	mov	r2, #5
   11c70:	ldr	r1, [pc, #332]	; 11dc4 <__assert_fail@plt+0xcc8>
   11c74:	mov	r0, #0
   11c78:	bl	10ef8 <dcgettext@plt>
   11c7c:	mov	r1, #0
   11c80:	mov	r2, r0
   11c84:	mov	r0, r1
   11c88:	bl	10f7c <error@plt>
   11c8c:	b	11794 <__assert_fail@plt+0x698>
   11c90:	cmp	r7, #0
   11c94:	beq	11668 <__assert_fail@plt+0x56c>
   11c98:	b	1164c <__assert_fail@plt+0x550>
   11c9c:	cmp	r4, #0
   11ca0:	bne	115f0 <__assert_fail@plt+0x4f4>
   11ca4:	b	11724 <__assert_fail@plt+0x628>
   11ca8:	mov	r2, #5
   11cac:	ldr	r1, [pc, #276]	; 11dc8 <__assert_fail@plt+0xccc>
   11cb0:	mov	r0, #0
   11cb4:	bl	10ef8 <dcgettext@plt>
   11cb8:	mov	r1, #0
   11cbc:	mov	r2, r0
   11cc0:	mov	r0, r1
   11cc4:	bl	10f7c <error@plt>
   11cc8:	b	1157c <__assert_fail@plt+0x480>
   11ccc:	mov	r2, #5
   11cd0:	ldr	r1, [pc, #244]	; 11dcc <__assert_fail@plt+0xcd0>
   11cd4:	b	11b6c <__assert_fail@plt+0xa70>
   11cd8:	mov	r2, #5
   11cdc:	ldr	r1, [pc, #236]	; 11dd0 <__assert_fail@plt+0xcd4>
   11ce0:	b	11b6c <__assert_fail@plt+0xa70>
   11ce4:	andeq	sp, r1, r8, lsr #24
   11ce8:	andeq	lr, r1, r4, lsl r3
   11cec:	andeq	pc, r2, r8, lsr #3
   11cf0:	andeq	lr, r1, r4, asr r2
   11cf4:	andeq	ip, r1, r8, ror #19
   11cf8:	andeq	lr, r1, r0, lsr r3
   11cfc:	andeq	pc, r2, r0, lsr #3
   11d00:	andeq	pc, r2, r8, lsr r1	; <UNPREDICTABLE>
   11d04:	andeq	r4, r1, ip, lsr fp
   11d08:	andeq	r0, r0, r9, lsl #2
   11d0c:	strdeq	pc, [r2], -r4
   11d10:	andeq	lr, r1, ip, lsr #6
   11d14:	andeq	r0, r0, r1, lsl #2
   11d18:	andeq	r0, r0, r2, lsl #2
   11d1c:	andeq	pc, r2, r8, lsl #2
   11d20:	andeq	r0, r0, fp, lsl #2
   11d24:	andeq	ip, r1, r8, asr #24
   11d28:	andeq	lr, r1, ip, asr #7
   11d2c:	strdeq	ip, [r1], -r8
   11d30:	andeq	lr, r1, ip, lsr r3
   11d34:			; <UNDEFINED> instruction: 0x0002f1b4
   11d38:	muleq	r2, ip, r1
   11d3c:	andeq	pc, r2, r4, lsr r1	; <UNPREDICTABLE>
   11d40:	ldrdeq	lr, [r1], -r8
   11d44:	andeq	sp, r1, ip, lsr r1
   11d48:	andeq	lr, r1, r0, asr r2
   11d4c:	andeq	ip, r1, ip, asr #23
   11d50:	andeq	lr, r1, r4, lsr r3
   11d54:	andeq	pc, r2, r8, ror #3
   11d58:			; <UNDEFINED> instruction: 0x0001e3b4
   11d5c:	andeq	ip, r1, ip, lsl ip
   11d60:	andeq	lr, r1, r4, asr #6
   11d64:	andeq	lr, r1, r8, ror #7
   11d68:	andeq	lr, r1, ip, lsr #8
   11d6c:	muleq	r2, r0, r1
   11d70:	andeq	lr, r1, r4, lsl #6
   11d74:	andeq	lr, r1, ip, lsl #6
   11d78:	andeq	lr, r1, r0, lsl #6
   11d7c:	strdeq	lr, [r1], -ip
   11d80:	andeq	lr, r1, r8, asr r5
   11d84:	andeq	pc, r2, r8, lsl #3
   11d88:	andeq	lr, r1, ip, ror #8
   11d8c:	andeq	lr, r1, r0, ror r4
   11d90:			; <UNDEFINED> instruction: 0x0001e4bc
   11d94:	strdeq	lr, [r1], -r4
   11d98:	andeq	lr, r1, r4, asr #11
   11d9c:	andeq	r0, r1, r1
   11da0:	andeq	lr, r1, ip, ror #11
   11da4:	muleq	r2, r8, r1
   11da8:	andeq	lr, r1, r0, asr #12
   11dac:	ldrdeq	lr, [r1], -r4
   11db0:	andeq	lr, r1, r8, lsl #7
   11db4:	andeq	lr, r1, r4, asr r6
   11db8:	muleq	r1, r4, r4
   11dbc:	andeq	lr, r1, ip, asr #6
   11dc0:	andeq	lr, r1, r8, ror #6
   11dc4:	andeq	lr, r1, r4, lsl r6
   11dc8:	andeq	lr, r1, r4, lsl r4
   11dcc:	andeq	lr, r1, ip, asr #8
   11dd0:	andeq	lr, r1, r0, lsr r5
   11dd4:	mov	fp, #0
   11dd8:	mov	lr, #0
   11ddc:	pop	{r1}		; (ldr r1, [sp], #4)
   11de0:	mov	r2, sp
   11de4:	push	{r2}		; (str r2, [sp, #-4]!)
   11de8:	push	{r0}		; (str r0, [sp, #-4]!)
   11dec:	ldr	ip, [pc, #16]	; 11e04 <__assert_fail@plt+0xd08>
   11df0:	push	{ip}		; (str ip, [sp, #-4]!)
   11df4:	ldr	r0, [pc, #12]	; 11e08 <__assert_fail@plt+0xd0c>
   11df8:	ldr	r3, [pc, #12]	; 11e0c <__assert_fail@plt+0xd10>
   11dfc:	bl	10f94 <__libc_start_main@plt>
   11e00:	bl	110d8 <abort@plt>
   11e04:	andeq	ip, r1, r0, asr #19
   11e08:	andeq	r1, r1, r8, lsl #2
   11e0c:	andeq	ip, r1, r0, ror #18
   11e10:	ldr	r3, [pc, #20]	; 11e2c <__assert_fail@plt+0xd30>
   11e14:	ldr	r2, [pc, #20]	; 11e30 <__assert_fail@plt+0xd34>
   11e18:	add	r3, pc, r3
   11e1c:	ldr	r2, [r3, r2]
   11e20:	cmp	r2, #0
   11e24:	bxeq	lr
   11e28:	b	10fac <__gmon_start__@plt>
   11e2c:	andeq	sp, r1, r0, ror #3
   11e30:	strdeq	r0, [r0], -ip
   11e34:	ldr	r3, [pc, #28]	; 11e58 <__assert_fail@plt+0xd5c>
   11e38:	ldr	r0, [pc, #28]	; 11e5c <__assert_fail@plt+0xd60>
   11e3c:	sub	r3, r3, r0
   11e40:	cmp	r3, #6
   11e44:	bxls	lr
   11e48:	ldr	r3, [pc, #16]	; 11e60 <__assert_fail@plt+0xd64>
   11e4c:	cmp	r3, #0
   11e50:	bxeq	lr
   11e54:	bx	r3
   11e58:	andeq	pc, r2, r3, lsl #3
   11e5c:	andeq	pc, r2, r0, lsl #3
   11e60:	andeq	r0, r0, r0
   11e64:	ldr	r1, [pc, #36]	; 11e90 <__assert_fail@plt+0xd94>
   11e68:	ldr	r0, [pc, #36]	; 11e94 <__assert_fail@plt+0xd98>
   11e6c:	sub	r1, r1, r0
   11e70:	asr	r1, r1, #2
   11e74:	add	r1, r1, r1, lsr #31
   11e78:	asrs	r1, r1, #1
   11e7c:	bxeq	lr
   11e80:	ldr	r3, [pc, #16]	; 11e98 <__assert_fail@plt+0xd9c>
   11e84:	cmp	r3, #0
   11e88:	bxeq	lr
   11e8c:	bx	r3
   11e90:	andeq	pc, r2, r0, lsl #3
   11e94:	andeq	pc, r2, r0, lsl #3
   11e98:	andeq	r0, r0, r0
   11e9c:	push	{r4, lr}
   11ea0:	ldr	r4, [pc, #24]	; 11ec0 <__assert_fail@plt+0xdc4>
   11ea4:	ldrb	r3, [r4]
   11ea8:	cmp	r3, #0
   11eac:	popne	{r4, pc}
   11eb0:	bl	11e34 <__assert_fail@plt+0xd38>
   11eb4:	mov	r3, #1
   11eb8:	strb	r3, [r4]
   11ebc:	pop	{r4, pc}
   11ec0:	andeq	pc, r2, r4, lsr #3
   11ec4:	ldr	r0, [pc, #40]	; 11ef4 <__assert_fail@plt+0xdf8>
   11ec8:	ldr	r3, [r0]
   11ecc:	cmp	r3, #0
   11ed0:	bne	11ed8 <__assert_fail@plt+0xddc>
   11ed4:	b	11e64 <__assert_fail@plt+0xd68>
   11ed8:	ldr	r3, [pc, #24]	; 11ef8 <__assert_fail@plt+0xdfc>
   11edc:	cmp	r3, #0
   11ee0:	beq	11ed4 <__assert_fail@plt+0xdd8>
   11ee4:	push	{r4, lr}
   11ee8:	blx	r3
   11eec:	pop	{r4, lr}
   11ef0:	b	11e64 <__assert_fail@plt+0xd68>
   11ef4:	andeq	lr, r2, r4, lsl pc
	...
   11f00:	push	{r4, r5, r6, r7, r8, r9, lr}
   11f04:	sub	sp, sp, #28
   11f08:	mov	r6, r0
   11f0c:	bl	10fe8 <strlen@plt>
   11f10:	mov	r7, #0
   11f14:	str	r7, [sp, #12]
   11f18:	subs	r4, r0, #0
   11f1c:	beq	11f94 <__assert_fail@plt+0xe98>
   11f20:	sub	r8, r4, #1
   11f24:	ldrb	r3, [r6, r8]
   11f28:	sub	r3, r3, #48	; 0x30
   11f2c:	cmp	r3, #9
   11f30:	bls	11fec <__assert_fail@plt+0xef0>
   11f34:	add	r0, r4, #2
   11f38:	bl	19ef0 <__assert_fail@plt+0x8df4>
   11f3c:	mov	r2, r4
   11f40:	mov	r1, r6
   11f44:	mov	r5, r0
   11f48:	add	r9, r0, r8
   11f4c:	str	r9, [sp, #12]
   11f50:	bl	10ebc <memcpy@plt>
   11f54:	ldrb	r3, [r5, r8]
   11f58:	cmp	r4, #1
   11f5c:	sub	r3, r3, #105	; 0x69
   11f60:	clz	r3, r3
   11f64:	lsr	r3, r3, #5
   11f68:	movls	r3, #0
   11f6c:	cmp	r3, #0
   11f70:	beq	11ffc <__assert_fail@plt+0xf00>
   11f74:	ldrb	r3, [r9, #-1]
   11f78:	sub	r3, r3, #48	; 0x30
   11f7c:	cmp	r3, #9
   11f80:	bls	11ffc <__assert_fail@plt+0xf00>
   11f84:	strb	r7, [r9]
   11f88:	mov	r0, r5
   11f8c:	ldr	r3, [pc, #196]	; 12058 <__assert_fail@plt+0xf5c>
   11f90:	b	11fa0 <__assert_fail@plt+0xea4>
   11f94:	ldr	r3, [pc, #188]	; 12058 <__assert_fail@plt+0xf5c>
   11f98:	mov	r5, r4
   11f9c:	mov	r0, r6
   11fa0:	str	r3, [sp]
   11fa4:	mov	r2, #10
   11fa8:	add	r3, sp, #16
   11fac:	add	r1, sp, #12
   11fb0:	bl	1ae58 <__assert_fail@plt+0x9d5c>
   11fb4:	cmp	r0, #0
   11fb8:	bne	12020 <__assert_fail@plt+0xf24>
   11fbc:	ldr	r3, [sp, #12]
   11fc0:	ldrb	r3, [r3]
   11fc4:	cmp	r3, #0
   11fc8:	bne	12020 <__assert_fail@plt+0xf24>
   11fcc:	ldrd	r2, [sp, #16]
   11fd0:	orrs	r3, r2, r3
   11fd4:	beq	12020 <__assert_fail@plt+0xf24>
   11fd8:	mov	r0, r5
   11fdc:	bl	14c20 <__assert_fail@plt+0x3b24>
   11fe0:	ldrd	r0, [sp, #16]
   11fe4:	add	sp, sp, #28
   11fe8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11fec:	ldr	r3, [pc, #100]	; 12058 <__assert_fail@plt+0xf5c>
   11ff0:	mov	r5, r7
   11ff4:	mov	r0, r6
   11ff8:	b	11fa0 <__assert_fail@plt+0xea4>
   11ffc:	mov	r3, #0
   12000:	mov	r1, #66	; 0x42
   12004:	add	r2, r9, #2
   12008:	strb	r3, [r9, #2]
   1200c:	strb	r1, [r9, #1]
   12010:	str	r2, [sp, #12]
   12014:	mov	r0, r5
   12018:	ldr	r3, [pc, #60]	; 1205c <__assert_fail@plt+0xf60>
   1201c:	b	11fa0 <__assert_fail@plt+0xea4>
   12020:	mov	r0, r5
   12024:	bl	14c20 <__assert_fail@plt+0x3b24>
   12028:	mov	r2, #5
   1202c:	ldr	r1, [pc, #44]	; 12060 <__assert_fail@plt+0xf64>
   12030:	mov	r0, #0
   12034:	bl	10ef8 <dcgettext@plt>
   12038:	mov	r4, r0
   1203c:	mov	r0, r6
   12040:	bl	19334 <__assert_fail@plt+0x8238>
   12044:	mov	r2, r4
   12048:	mov	r1, #0
   1204c:	mov	r3, r0
   12050:	mov	r0, #1
   12054:	bl	10f7c <error@plt>
   12058:	andeq	ip, r1, ip, ror #24
   1205c:	andeq	ip, r1, r8, ror ip
   12060:	andeq	ip, r1, r4, lsl #25
   12064:	ldr	r1, [pc, #1340]	; 125a8 <__assert_fail@plt+0x14ac>
   12068:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1206c:	vpush	{d8-d11}
   12070:	ldr	ip, [r1]
   12074:	mov	r8, r0
   12078:	cmp	ip, #0
   1207c:	sub	sp, sp, #260	; 0x104
   12080:	mov	r6, r2
   12084:	mov	r7, r3
   12088:	beq	120f0 <__assert_fail@plt+0xff4>
   1208c:	ldrd	r2, [ip]
   12090:	mvn	r1, #0
   12094:	mvn	r0, #0
   12098:	cmp	r3, r1
   1209c:	cmpeq	r2, r0
   120a0:	beq	120d0 <__assert_fail@plt+0xfd4>
   120a4:	cmp	r7, r3
   120a8:	cmpeq	r6, r2
   120ac:	bcc	120c0 <__assert_fail@plt+0xfc4>
   120b0:	ldrd	r2, [ip, #8]
   120b4:	cmp	r7, r3
   120b8:	cmpeq	r6, r2
   120bc:	bls	120fc <__assert_fail@plt+0x1000>
   120c0:	ldrd	r2, [ip, #16]!
   120c4:	cmp	r3, r1
   120c8:	cmpeq	r2, r0
   120cc:	bne	120a4 <__assert_fail@plt+0xfa8>
   120d0:	ldr	r3, [pc, #1236]	; 125ac <__assert_fail@plt+0x14b0>
   120d4:	mov	r0, r8
   120d8:	ldr	r1, [r3]
   120dc:	bl	10e44 <fputs_unlocked@plt>
   120e0:	mov	r0, #1
   120e4:	add	sp, sp, #260	; 0x104
   120e8:	vpop	{d8-d11}
   120ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120f0:	cmp	r3, #0
   120f4:	cmpeq	r2, #1
   120f8:	bne	120d0 <__assert_fail@plt+0xfd4>
   120fc:	ldr	r9, [pc, #1196]	; 125b0 <__assert_fail@plt+0x14b4>
   12100:	ldr	r4, [r9]
   12104:	cmp	r4, #0
   12108:	beq	12150 <__assert_fail@plt+0x1054>
   1210c:	mov	r0, r8
   12110:	bl	10fe8 <strlen@plt>
   12114:	mov	r5, r0
   12118:	mov	r0, r4
   1211c:	bl	10fe8 <strlen@plt>
   12120:	cmp	r5, r0
   12124:	bls	12150 <__assert_fail@plt+0x1054>
   12128:	sub	r5, r5, r0
   1212c:	add	r1, r8, r5
   12130:	mov	r0, r4
   12134:	bl	10e68 <strcmp@plt>
   12138:	ldrb	r3, [r9, #4]
   1213c:	cmp	r0, #0
   12140:	bne	123fc <__assert_fail@plt+0x1300>
   12144:	cmp	r3, #0
   12148:	strb	r0, [r8, r5]
   1214c:	bne	12558 <__assert_fail@plt+0x145c>
   12150:	ldrb	r4, [r8]
   12154:	cmp	r4, #0
   12158:	beq	12580 <__assert_fail@plt+0x1484>
   1215c:	bl	10fd0 <__ctype_b_loc@plt>
   12160:	mov	r5, r8
   12164:	ldr	r2, [r0]
   12168:	b	12178 <__assert_fail@plt+0x107c>
   1216c:	ldrb	r4, [r5, #1]!
   12170:	cmp	r4, #0
   12174:	beq	12188 <__assert_fail@plt+0x108c>
   12178:	lsl	r4, r4, #1
   1217c:	ldrh	r3, [r2, r4]
   12180:	tst	r3, #1
   12184:	bne	1216c <__assert_fail@plt+0x1070>
   12188:	ldr	r3, [r9, #8]
   1218c:	cmp	r3, #0
   12190:	beq	12378 <__assert_fail@plt+0x127c>
   12194:	cmp	r6, #1
   12198:	cmple	r8, r5
   1219c:	moveq	r6, #0
   121a0:	movne	r6, #1
   121a4:	streq	r6, [r9, #12]
   121a8:	beq	121c4 <__assert_fail@plt+0x10c8>
   121ac:	mov	r0, r8
   121b0:	bl	10fe8 <strlen@plt>
   121b4:	ldr	r3, [r9, #16]
   121b8:	cmp	r0, r3
   121bc:	str	r0, [r9, #12]
   121c0:	bcs	1253c <__assert_fail@plt+0x1440>
   121c4:	ldrb	r3, [r9, #4]
   121c8:	cmp	r3, #0
   121cc:	bne	12360 <__assert_fail@plt+0x1264>
   121d0:	ldr	sl, [r9, #24]
   121d4:	sub	r2, sl, #3
   121d8:	cmp	r2, #1
   121dc:	movhi	r3, #1000	; 0x3e8
   121e0:	strhi	r3, [sp, #32]
   121e4:	bhi	1223c <__assert_fail@plt+0x1140>
   121e8:	mov	r2, #1024	; 0x400
   121ec:	str	r2, [sp, #32]
   121f0:	cmp	r3, #0
   121f4:	beq	1223c <__assert_fail@plt+0x1140>
   121f8:	ldr	r3, [pc, #948]	; 125b4 <__assert_fail@plt+0x14b8>
   121fc:	mov	r1, r5
   12200:	mov	r0, #0
   12204:	ldr	r4, [r3]
   12208:	bl	19180 <__assert_fail@plt+0x8084>
   1220c:	ldr	r1, [r9, #28]
   12210:	mov	r6, r0
   12214:	mov	r0, #1
   12218:	bl	19180 <__assert_fail@plt+0x8084>
   1221c:	mov	r2, #15
   12220:	str	r2, [sp, #4]
   12224:	mov	r3, r6
   12228:	ldr	r2, [pc, #904]	; 125b8 <__assert_fail@plt+0x14bc>
   1222c:	mov	r1, #1
   12230:	str	r0, [sp]
   12234:	mov	r0, r4
   12238:	bl	1103c <__fprintf_chk@plt>
   1223c:	ldrb	r4, [r5]
   12240:	vldr	d8, [pc, #832]	; 12588 <__assert_fail@plt+0x148c>
   12244:	vldr	d7, [pc, #836]	; 12590 <__assert_fail@plt+0x1494>
   12248:	cmp	r4, #45	; 0x2d
   1224c:	mov	r0, #0
   12250:	ldrbeq	r4, [r5, #1]
   12254:	addeq	r7, r5, #1
   12258:	moveq	r3, #1
   1225c:	movne	r7, r5
   12260:	movne	r3, #0
   12264:	mov	r1, r0
   12268:	mov	ip, #1
   1226c:	str	r0, [sp, #24]
   12270:	sub	r2, r4, #48	; 0x30
   12274:	cmp	r2, #9
   12278:	bhi	1239c <__assert_fail@plt+0x12a0>
   1227c:	vcmp.f64	d8, #0.0
   12280:	vmrs	APSR_nzcv, fpscr
   12284:	movne	r0, #1
   12288:	moveq	r0, #0
   1228c:	cmp	r2, #0
   12290:	orrne	r0, r0, #1
   12294:	cmp	r0, #0
   12298:	addne	r1, r1, #1
   1229c:	cmp	r1, #15
   122a0:	bls	123e0 <__assert_fail@plt+0x12e4>
   122a4:	cmp	r1, #27
   122a8:	bls	123dc <__assert_fail@plt+0x12e0>
   122ac:	vldr	d8, [pc, #724]	; 12588 <__assert_fail@plt+0x148c>
   122b0:	ldr	r1, [pc, #772]	; 125bc <__assert_fail@plt+0x14c0>
   122b4:	mov	r6, #0
   122b8:	mov	r3, #2
   122bc:	str	r3, [sp, #24]
   122c0:	ldr	r3, [r9, #36]	; 0x24
   122c4:	ldr	r4, [pc, #756]	; 125c0 <__assert_fail@plt+0x14c4>
   122c8:	cmp	r3, #3
   122cc:	beq	12300 <__assert_fail@plt+0x1204>
   122d0:	mov	r2, #5
   122d4:	mov	r0, #0
   122d8:	ldr	r7, [r4]
   122dc:	bl	10ef8 <dcgettext@plt>
   122e0:	mov	sl, r0
   122e4:	mov	r0, r5
   122e8:	bl	19334 <__assert_fail@plt+0x8238>
   122ec:	mov	r2, sl
   122f0:	mov	r1, #0
   122f4:	mov	r3, r0
   122f8:	mov	r0, r7
   122fc:	bl	10f7c <error@plt>
   12300:	ldrd	r0, [r4, #8]
   12304:	ldrd	sl, [r4, #16]
   12308:	cmp	r1, #0
   1230c:	cmpeq	r0, #1
   12310:	beq	1252c <__assert_fail@plt+0x1430>
   12314:	bl	1c868 <__assert_fail@plt+0xb76c>
   12318:	vmov	d7, r0, r1
   1231c:	mov	r0, sl
   12320:	mov	r1, fp
   12324:	vmul.f64	d9, d7, d8
   12328:	bl	1c868 <__assert_fail@plt+0xb76c>
   1232c:	vmov	d7, r0, r1
   12330:	vdiv.f64	d8, d9, d7
   12334:	ldr	r3, [sp, #24]
   12338:	cmp	r3, #1
   1233c:	bls	12420 <__assert_fail@plt+0x1324>
   12340:	ldr	r3, [pc, #612]	; 125ac <__assert_fail@plt+0x14b0>
   12344:	mov	r0, r8
   12348:	ldr	r1, [r3]
   1234c:	bl	10e44 <fputs_unlocked@plt>
   12350:	mov	r0, #0
   12354:	add	sp, sp, #260	; 0x104
   12358:	vpop	{d8-d11}
   1235c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12360:	ldr	r1, [pc, #588]	; 125b4 <__assert_fail@plt+0x14b8>
   12364:	ldr	r3, [r9, #12]
   12368:	ldr	r2, [pc, #596]	; 125c4 <__assert_fail@plt+0x14c8>
   1236c:	ldr	r0, [r1]
   12370:	mov	r1, #1
   12374:	bl	1103c <__fprintf_chk@plt>
   12378:	ldr	sl, [r9, #24]
   1237c:	sub	r3, sl, #3
   12380:	cmp	r3, #1
   12384:	movhi	r2, #1000	; 0x3e8
   12388:	ldrb	r3, [r9, #4]
   1238c:	strhi	r2, [sp, #32]
   12390:	movls	r2, #1024	; 0x400
   12394:	strls	r2, [sp, #32]
   12398:	b	121f0 <__assert_fail@plt+0x10f4>
   1239c:	cmp	r0, #0
   123a0:	bne	125e8 <__assert_fail@plt+0x14ec>
   123a4:	ldr	r2, [r9, #32]
   123a8:	ldr	r1, [r9, #28]
   123ac:	mov	r0, r7
   123b0:	str	r3, [sp, #44]	; 0x2c
   123b4:	bl	110cc <strncmp@plt>
   123b8:	ldr	r3, [sp, #44]	; 0x2c
   123bc:	cmp	r0, #0
   123c0:	beq	125e8 <__assert_fail@plt+0x14ec>
   123c4:	vldr	d8, [pc, #444]	; 12588 <__assert_fail@plt+0x148c>
   123c8:	mov	r3, #3
   123cc:	mov	r6, #0
   123d0:	str	r3, [sp, #24]
   123d4:	ldr	r1, [pc, #492]	; 125c8 <__assert_fail@plt+0x14cc>
   123d8:	b	122c0 <__assert_fail@plt+0x11c4>
   123dc:	str	ip, [sp, #24]
   123e0:	vmov	s13, r2
   123e4:	ldrb	r4, [r7, #1]!
   123e8:	mov	r0, ip
   123ec:	vcvt.f64.s32	d6, s13
   123f0:	vmla.f64	d6, d8, d7
   123f4:	vmov.f64	d8, d6
   123f8:	b	12270 <__assert_fail@plt+0x1174>
   123fc:	cmp	r3, #0
   12400:	beq	12150 <__assert_fail@plt+0x1054>
   12404:	ldr	r3, [pc, #424]	; 125b4 <__assert_fail@plt+0x14b8>
   12408:	mov	r2, #22
   1240c:	mov	r1, #1
   12410:	ldr	r3, [r3]
   12414:	ldr	r0, [pc, #432]	; 125cc <__assert_fail@plt+0x14d0>
   12418:	bl	10f28 <fwrite@plt>
   1241c:	b	12150 <__assert_fail@plt+0x1054>
   12420:	vldr	d7, [pc, #368]	; 12598 <__assert_fail@plt+0x149c>
   12424:	ldr	r3, [r4, #24]
   12428:	cmn	r3, #1
   1242c:	vcmpe.f64	d8, d7
   12430:	movne	r6, r3
   12434:	vmrs	APSR_nzcv, fpscr
   12438:	blt	124d0 <__assert_fail@plt+0x13d4>
   1243c:	vldr	d7, [pc, #348]	; 125a0 <__assert_fail@plt+0x14a4>
   12440:	vcmpe.f64	d8, d7
   12444:	vmrs	APSR_nzcv, fpscr
   12448:	bhi	124d0 <__assert_fail@plt+0x13d4>
   1244c:	vmov.f64	d7, d8
   12450:	mov	r3, #0
   12454:	vldr	d4, [pc, #300]	; 12588 <__assert_fail@plt+0x148c>
   12458:	vldr	d6, [pc, #304]	; 12590 <__assert_fail@plt+0x1494>
   1245c:	b	12468 <__assert_fail@plt+0x136c>
   12460:	vdiv.f64	d7, d7, d6
   12464:	add	r3, r3, #1
   12468:	vcmpe.f64	d7, d4
   1246c:	vmrs	APSR_nzcv, fpscr
   12470:	vnegmi.f64	d5, d7
   12474:	vmovpl.f64	d5, d7
   12478:	vcmpe.f64	d5, d6
   1247c:	vmrs	APSR_nzcv, fpscr
   12480:	bge	12460 <__assert_fail@plt+0x1364>
   12484:	ldr	r5, [r9, #44]	; 0x2c
   12488:	cmp	r5, #0
   1248c:	beq	13434 <__assert_fail@plt+0x2338>
   12490:	cmp	r3, #26
   12494:	bls	1290c <__assert_fail@plt+0x1810>
   12498:	ldr	r3, [r9, #36]	; 0x24
   1249c:	cmp	r3, #3
   124a0:	beq	12340 <__assert_fail@plt+0x1244>
   124a4:	ldr	r1, [pc, #292]	; 125d0 <__assert_fail@plt+0x14d4>
   124a8:	mov	r2, #5
   124ac:	mov	r0, #0
   124b0:	ldr	r4, [r4]
   124b4:	bl	10ef8 <dcgettext@plt>
   124b8:	vstr	d8, [sp]
   124bc:	mov	r1, #0
   124c0:	mov	r2, r0
   124c4:	mov	r0, r4
   124c8:	bl	10f7c <error@plt>
   124cc:	b	12340 <__assert_fail@plt+0x1244>
   124d0:	ldr	r5, [r9, #44]	; 0x2c
   124d4:	cmp	r5, #0
   124d8:	bne	1290c <__assert_fail@plt+0x1810>
   124dc:	cmp	r6, #15
   124e0:	bls	1290c <__assert_fail@plt+0x1810>
   124e4:	ldr	r3, [r9, #36]	; 0x24
   124e8:	cmp	r3, #3
   124ec:	beq	12340 <__assert_fail@plt+0x1244>
   124f0:	cmp	r6, #0
   124f4:	mov	r2, #5
   124f8:	beq	13080 <__assert_fail@plt+0x1f84>
   124fc:	ldr	r1, [pc, #208]	; 125d4 <__assert_fail@plt+0x14d8>
   12500:	mov	r0, #0
   12504:	ldr	r4, [r4]
   12508:	bl	10ef8 <dcgettext@plt>
   1250c:	mov	r1, #0
   12510:	str	r6, [sp, #8]
   12514:	vstr	d8, [sp]
   12518:	str	r1, [sp, #12]
   1251c:	mov	r2, r0
   12520:	mov	r0, r4
   12524:	bl	10f7c <error@plt>
   12528:	b	12340 <__assert_fail@plt+0x1244>
   1252c:	cmp	fp, #0
   12530:	cmpeq	sl, #1
   12534:	bne	12314 <__assert_fail@plt+0x1218>
   12538:	b	12334 <__assert_fail@plt+0x1238>
   1253c:	add	r3, r0, #1
   12540:	mov	r1, r3
   12544:	ldr	r0, [r9, #20]
   12548:	str	r3, [r9, #16]
   1254c:	bl	19f2c <__assert_fail@plt+0x8e30>
   12550:	str	r0, [r9, #20]
   12554:	b	121c4 <__assert_fail@plt+0x10c8>
   12558:	ldr	r3, [pc, #84]	; 125b4 <__assert_fail@plt+0x14b8>
   1255c:	mov	r0, r4
   12560:	ldr	r4, [r3]
   12564:	bl	19334 <__assert_fail@plt+0x8238>
   12568:	ldr	r2, [pc, #104]	; 125d8 <__assert_fail@plt+0x14dc>
   1256c:	mov	r1, #1
   12570:	mov	r3, r0
   12574:	mov	r0, r4
   12578:	bl	1103c <__fprintf_chk@plt>
   1257c:	b	12150 <__assert_fail@plt+0x1054>
   12580:	mov	r5, r8
   12584:	b	12188 <__assert_fail@plt+0x108c>
	...
   12594:	eormi	r0, r4, r0
   12598:			; <UNDEFINED> instruction: 0xffffffff
   1259c:			; <UNDEFINED> instruction: 0xffefffff
   125a0:			; <UNDEFINED> instruction: 0xffffffff
   125a4:	svcvc	0x00efffff
   125a8:	strdeq	pc, [r2], -ip
   125ac:	muleq	r2, ip, r1
   125b0:	andeq	pc, r2, r8, lsr #3
   125b4:	muleq	r2, r0, r1
   125b8:	andeq	ip, r1, r0, lsl lr
   125bc:	muleq	r1, ip, ip
   125c0:	andeq	pc, r2, r8, lsl #2
   125c4:	andeq	ip, r1, r8, ror #27
   125c8:	andeq	ip, r1, r0, asr #25
   125cc:	ldrdeq	ip, [r1], -r0
   125d0:	andeq	ip, r1, ip, ror #31
   125d4:	andeq	ip, r1, r4, ror #30
   125d8:			; <UNDEFINED> instruction: 0x0001cdbc
   125dc:	andeq	ip, r1, ip, ror #24
   125e0:	ldrdeq	ip, [r1], -r4
   125e4:	andeq	ip, r1, r8, lsr #26
   125e8:	cmp	r3, #0
   125ec:	str	r3, [sp, #44]	; 0x2c
   125f0:	ldr	r3, [sp, #24]
   125f4:	vnegne.f64	d8, d8
   125f8:	cmp	r3, #1
   125fc:	bhi	1347c <__assert_fail@plt+0x2380>
   12600:	ldr	r3, [r9, #28]
   12604:	ldr	fp, [r9, #32]
   12608:	mov	r1, r3
   1260c:	mov	r2, fp
   12610:	mov	r0, r7
   12614:	str	r3, [sp, #48]	; 0x30
   12618:	bl	110cc <strncmp@plt>
   1261c:	ldr	r3, [sp, #44]	; 0x2c
   12620:	cmp	r0, #0
   12624:	movne	r6, #0
   12628:	beq	126b0 <__assert_fail@plt+0x15b4>
   1262c:	ldrb	r3, [r9, #4]
   12630:	cmp	r3, #0
   12634:	bne	127e8 <__assert_fail@plt+0x16ec>
   12638:	cmp	r4, #0
   1263c:	beq	12698 <__assert_fail@plt+0x159c>
   12640:	bl	10fd0 <__ctype_b_loc@plt>
   12644:	mov	r3, r7
   12648:	ldr	r1, [r0]
   1264c:	ldrb	r7, [r3]
   12650:	mov	fp, r3
   12654:	add	r3, r3, #1
   12658:	lsl	r2, r7, #1
   1265c:	ldrh	r2, [r1, r2]
   12660:	ands	r2, r2, #1
   12664:	bne	1264c <__assert_fail@plt+0x1550>
   12668:	mov	r1, r7
   1266c:	ldr	r0, [pc, #-152]	; 125dc <__assert_fail@plt+0x14e0>
   12670:	mov	r4, r2
   12674:	bl	10ff4 <strchr@plt>
   12678:	cmp	r0, #0
   1267c:	beq	128fc <__assert_fail@plt+0x1800>
   12680:	cmp	sl, #0
   12684:	bne	12cbc <__assert_fail@plt+0x1bc0>
   12688:	mov	r3, #4
   1268c:	str	r3, [sp, #24]
   12690:	ldr	r1, [pc, #-184]	; 125e0 <__assert_fail@plt+0x14e4>
   12694:	b	122c0 <__assert_fail@plt+0x11c4>
   12698:	cmp	sl, #4
   1269c:	bne	1280c <__assert_fail@plt+0x1710>
   126a0:	mov	r3, #6
   126a4:	str	r3, [sp, #24]
   126a8:	ldr	r1, [pc, #-204]	; 125e4 <__assert_fail@plt+0x14e8>
   126ac:	b	122c0 <__assert_fail@plt+0x11c4>
   126b0:	ldrb	r2, [r7, fp]
   126b4:	vldr	d9, [pc, #772]	; 129c0 <__assert_fail@plt+0x18c4>
   126b8:	vldr	d7, [pc, #776]	; 129c8 <__assert_fail@plt+0x18cc>
   126bc:	cmp	r2, #45	; 0x2d
   126c0:	add	r1, r7, fp
   126c4:	mov	ip, #0
   126c8:	moveq	r2, r1
   126cc:	strne	r0, [sp, #56]	; 0x38
   126d0:	movne	r6, r1
   126d4:	mov	r0, ip
   126d8:	mov	lr, #1
   126dc:	addeq	r6, r2, #1
   126e0:	moveq	r2, #1
   126e4:	str	r1, [sp, #44]	; 0x2c
   126e8:	streq	r2, [sp, #56]	; 0x38
   126ec:	str	ip, [sp, #52]	; 0x34
   126f0:	mov	r1, r6
   126f4:	mov	r7, r6
   126f8:	ldrb	r4, [r1], #1
   126fc:	sub	r2, r4, #48	; 0x30
   12700:	cmp	r2, #9
   12704:	bhi	12758 <__assert_fail@plt+0x165c>
   12708:	vcmp.f64	d9, #0.0
   1270c:	vmrs	APSR_nzcv, fpscr
   12710:	movne	ip, #1
   12714:	moveq	ip, #0
   12718:	cmp	r2, #0
   1271c:	orrne	ip, ip, #1
   12720:	cmp	ip, #0
   12724:	addne	r0, r0, #1
   12728:	cmp	r0, #15
   1272c:	bls	1273c <__assert_fail@plt+0x1640>
   12730:	cmp	r0, #27
   12734:	bhi	122b0 <__assert_fail@plt+0x11b4>
   12738:	str	lr, [sp, #52]	; 0x34
   1273c:	vmov	s13, r2
   12740:	mov	r6, r1
   12744:	mov	ip, lr
   12748:	vcvt.f64.s32	d6, s13
   1274c:	vmla.f64	d6, d9, d7
   12750:	vmov.f64	d9, d6
   12754:	b	126f0 <__assert_fail@plt+0x15f4>
   12758:	cmp	ip, #0
   1275c:	bne	12780 <__assert_fail@plt+0x1684>
   12760:	mov	r2, fp
   12764:	ldr	r1, [sp, #48]	; 0x30
   12768:	mov	r0, r6
   1276c:	str	r3, [sp, #60]	; 0x3c
   12770:	bl	110cc <strncmp@plt>
   12774:	ldr	r3, [sp, #60]	; 0x3c
   12778:	cmp	r0, #0
   1277c:	bne	123c8 <__assert_fail@plt+0x12cc>
   12780:	ldr	r2, [sp, #56]	; 0x38
   12784:	ldr	r1, [sp, #24]
   12788:	cmp	r2, #0
   1278c:	ldr	r2, [sp, #52]	; 0x34
   12790:	vnegne.f64	d9, d9
   12794:	cmp	r2, #1
   12798:	moveq	r1, r2
   1279c:	ldr	r2, [sp, #56]	; 0x38
   127a0:	str	r1, [sp, #24]
   127a4:	cmp	r2, #0
   127a8:	bne	123c8 <__assert_fail@plt+0x12cc>
   127ac:	ldr	r2, [sp, #44]	; 0x2c
   127b0:	subs	r6, r6, r2
   127b4:	beq	131bc <__assert_fail@plt+0x20c0>
   127b8:	subs	r2, r6, #1
   127bc:	vldr	d7, [pc, #516]	; 129c8 <__assert_fail@plt+0x18cc>
   127c0:	beq	127d4 <__assert_fail@plt+0x16d8>
   127c4:	vmov.f64	d6, d7
   127c8:	subs	r2, r2, #1
   127cc:	vmul.f64	d7, d7, d6
   127d0:	bne	127c8 <__assert_fail@plt+0x16cc>
   127d4:	vdiv.f64	d6, d9, d7
   127d8:	cmp	r3, #0
   127dc:	vsubne.f64	d8, d8, d6
   127e0:	vaddeq.f64	d8, d8, d6
   127e4:	b	1262c <__assert_fail@plt+0x1530>
   127e8:	vstr	d8, [sp]
   127ec:	ldr	r3, [pc, #532]	; 12a08 <__assert_fail@plt+0x190c>
   127f0:	str	r6, [sp, #8]
   127f4:	ldr	r2, [pc, #492]	; 129e8 <__assert_fail@plt+0x18ec>
   127f8:	ldr	r0, [r3]
   127fc:	mov	r1, #1
   12800:	bl	1103c <__fprintf_chk@plt>
   12804:	ldrb	r4, [r7]
   12808:	b	12638 <__assert_fail@plt+0x153c>
   1280c:	ldrb	r3, [r9, #4]
   12810:	vldr	d9, [pc, #440]	; 129d0 <__assert_fail@plt+0x18d4>
   12814:	cmp	r3, #0
   12818:	vmuleq.f64	d8, d8, d9
   1281c:	bne	12c70 <__assert_fail@plt+0x1b74>
   12820:	cmp	r7, #0
   12824:	beq	128a4 <__assert_fail@plt+0x17a8>
   12828:	ldrb	r3, [r7]
   1282c:	cmp	r3, #0
   12830:	beq	128a4 <__assert_fail@plt+0x17a8>
   12834:	ldr	r3, [r9, #36]	; 0x24
   12838:	ldr	r4, [pc, #428]	; 129ec <__assert_fail@plt+0x18f0>
   1283c:	cmp	r3, #3
   12840:	moveq	r3, #5
   12844:	streq	r3, [sp, #24]
   12848:	beq	12300 <__assert_fail@plt+0x1204>
   1284c:	mov	r2, #5
   12850:	ldr	r1, [pc, #408]	; 129f0 <__assert_fail@plt+0x18f4>
   12854:	mov	r0, #0
   12858:	ldr	sl, [r4]
   1285c:	bl	10ef8 <dcgettext@plt>
   12860:	mov	r1, r5
   12864:	mov	fp, r0
   12868:	mov	r0, #0
   1286c:	bl	19180 <__assert_fail@plt+0x8084>
   12870:	mov	r1, r7
   12874:	mov	r5, r0
   12878:	mov	r0, #1
   1287c:	bl	19180 <__assert_fail@plt+0x8084>
   12880:	mov	ip, #5
   12884:	mov	r3, r5
   12888:	mov	r2, fp
   1288c:	mov	r1, #0
   12890:	str	ip, [sp, #24]
   12894:	str	r0, [sp]
   12898:	mov	r0, sl
   1289c:	bl	10f7c <error@plt>
   128a0:	b	12300 <__assert_fail@plt+0x1204>
   128a4:	ldr	r3, [sp, #24]
   128a8:	cmp	r3, #1
   128ac:	bne	128bc <__assert_fail@plt+0x17c0>
   128b0:	ldrb	r3, [r9, #40]	; 0x28
   128b4:	cmp	r3, #0
   128b8:	bne	128c4 <__assert_fail@plt+0x17c8>
   128bc:	ldr	r4, [pc, #296]	; 129ec <__assert_fail@plt+0x18f0>
   128c0:	b	12300 <__assert_fail@plt+0x1204>
   128c4:	mov	r2, #5
   128c8:	ldr	r1, [pc, #292]	; 129f4 <__assert_fail@plt+0x18f8>
   128cc:	mov	r0, #0
   128d0:	bl	10ef8 <dcgettext@plt>
   128d4:	mov	r4, r0
   128d8:	mov	r0, r5
   128dc:	bl	19334 <__assert_fail@plt+0x8238>
   128e0:	mov	r1, #0
   128e4:	mov	r2, r4
   128e8:	mov	r3, r0
   128ec:	mov	r0, r1
   128f0:	bl	10f7c <error@plt>
   128f4:	b	128bc <__assert_fail@plt+0x17c0>
   128f8:	mov	r6, #0
   128fc:	mov	r3, #5
   12900:	str	r3, [sp, #24]
   12904:	ldr	r1, [pc, #236]	; 129f8 <__assert_fail@plt+0x18fc>
   12908:	b	122c0 <__assert_fail@plt+0x11c4>
   1290c:	ldr	r7, [r9, #48]	; 0x30
   12910:	mov	r3, #37	; 0x25
   12914:	cmp	r7, #0
   12918:	strb	r3, [sp, #64]	; 0x40
   1291c:	movne	r3, #39	; 0x27
   12920:	strbne	r3, [sp, #65]	; 0x41
   12924:	ldr	r3, [r9, #52]	; 0x34
   12928:	addne	sl, sp, #66	; 0x42
   1292c:	addeq	sl, sp, #65	; 0x41
   12930:	cmp	r3, #0
   12934:	ldr	r8, [r4, #28]
   12938:	bne	130a8 <__assert_fail@plt+0x1fac>
   1293c:	ldrb	fp, [r9, #4]
   12940:	cmp	fp, #0
   12944:	bne	13088 <__assert_fail@plt+0x1f8c>
   12948:	cmp	r5, #0
   1294c:	bne	12d1c <__assert_fail@plt+0x1c20>
   12950:	cmp	r6, #0
   12954:	beq	130f8 <__assert_fail@plt+0x1ffc>
   12958:	subs	r5, r6, #1
   1295c:	vldr	d9, [pc, #100]	; 129c8 <__assert_fail@plt+0x18cc>
   12960:	beq	133c8 <__assert_fail@plt+0x22cc>
   12964:	vmov.f64	d6, d9
   12968:	mov	r3, r5
   1296c:	subs	r3, r3, #1
   12970:	vmul.f64	d9, d9, d6
   12974:	bne	1296c <__assert_fail@plt+0x1870>
   12978:	vmul.f64	d9, d9, d8
   1297c:	vldr	d7, [pc, #84]	; 129d8 <__assert_fail@plt+0x18dc>
   12980:	vldr	d10, [pc, #88]	; 129e0 <__assert_fail@plt+0x18e4>
   12984:	vmul.f64	d7, d9, d7
   12988:	vmov	r0, r1, d7
   1298c:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12990:	bl	1c87c <__assert_fail@plt+0xb780>
   12994:	vmov	d7, r0, r1
   12998:	vmul.f64	d10, d7, d10
   1299c:	vsub.f64	d9, d9, d10
   129a0:	cmp	r8, #4
   129a4:	ldrls	pc, [pc, r8, lsl #2]
   129a8:	b	13444 <__assert_fail@plt+0x2348>
   129ac:			; <UNDEFINED> instruction: 0x00012bbc
   129b0:	andeq	r2, r1, r4, lsl sl
   129b4:	andeq	r2, r1, r8, lsr ip
   129b8:	andeq	r2, r1, r4, lsr #24
   129bc:	strdeq	r2, [r1], -ip
	...
   129cc:	eormi	r0, r4, r0
   129d0:	andeq	r0, r0, r0
   129d4:	svccc	0x00f00000	; IMB
   129d8:	andeq	r0, r0, r0
   129dc:	stccc	0, cr0, [r0], {-0}
   129e0:	andeq	r0, r0, r0
   129e4:	mvnmi	r0, #0
   129e8:	andeq	ip, r1, r0, ror lr
   129ec:	andeq	pc, r2, r8, lsl #2
   129f0:	andeq	ip, r1, r4, lsl pc
   129f4:	andeq	ip, r1, r4, lsr pc
   129f8:	andeq	ip, r1, ip, lsl #26
   129fc:	andeq	ip, r1, r8, asr sp
   12a00:	andeq	ip, r1, ip, lsl #27
   12a04:	andeq	sp, r1, ip, asr #32
   12a08:	muleq	r2, r0, r1
   12a0c:	strdeq	sp, [r1], -r0
   12a10:	muleq	r2, ip, r1
   12a14:	vneg.f64	d9, d9
   12a18:	vmov	r0, r1, d9
   12a1c:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12a20:	mov	r2, r0
   12a24:	mov	r3, r1
   12a28:	strd	r2, [sp, #24]
   12a2c:	bl	1c87c <__assert_fail@plt+0xb780>
   12a30:	ldrd	r2, [sp, #24]
   12a34:	vmov	d7, r0, r1
   12a38:	vcmpe.f64	d9, d7
   12a3c:	vmrs	APSR_nzcv, fpscr
   12a40:	ble	12a4c <__assert_fail@plt+0x1950>
   12a44:	adds	r2, r2, #1
   12a48:	adc	r3, r3, #0
   12a4c:	rsbs	r0, r2, #0
   12a50:	rsc	r1, r3, #0
   12a54:	bl	1c87c <__assert_fail@plt+0xb780>
   12a58:	vmov	d7, r0, r1
   12a5c:	cmp	r6, #0
   12a60:	vadd.f64	d10, d10, d7
   12a64:	bne	13198 <__assert_fail@plt+0x209c>
   12a68:	cmp	fp, #0
   12a6c:	beq	12a98 <__assert_fail@plt+0x199c>
   12a70:	ldr	r1, [pc, #-112]	; 12a08 <__assert_fail@plt+0x190c>
   12a74:	ldr	r3, [pc, #-128]	; 129fc <__assert_fail@plt+0x1900>
   12a78:	cmp	r7, #0
   12a7c:	ldr	r0, [r1]
   12a80:	ldr	r2, [pc, #-136]	; 12a00 <__assert_fail@plt+0x1904>
   12a84:	vstr	d10, [sp]
   12a88:	movne	r2, r3
   12a8c:	mov	r1, #1
   12a90:	mov	r3, r6
   12a94:	bl	1103c <__fprintf_chk@plt>
   12a98:	ldr	r3, [pc, #-156]	; 12a04 <__assert_fail@plt+0x1908>
   12a9c:	add	r8, sp, #128	; 0x80
   12aa0:	add	fp, sp, #64	; 0x40
   12aa4:	ldrb	r2, [r3, #4]
   12aa8:	ldr	r0, [r3]
   12aac:	mov	r3, #128	; 0x80
   12ab0:	vstr	d10, [sp, #8]
   12ab4:	str	r6, [sp, #4]
   12ab8:	mov	r1, r3
   12abc:	str	r0, [sl]
   12ac0:	str	fp, [sp]
   12ac4:	mov	r0, r8
   12ac8:	strb	r2, [sl, #4]
   12acc:	mov	r2, #1
   12ad0:	bl	110e4 <__snprintf_chk@plt>
   12ad4:	cmp	r0, #127	; 0x7f
   12ad8:	bhi	13548 <__assert_fail@plt+0x244c>
   12adc:	ldr	r6, [r9]
   12ae0:	ldrb	r5, [r9, #4]
   12ae4:	cmp	r6, #0
   12ae8:	beq	12b08 <__assert_fail@plt+0x1a0c>
   12aec:	mov	r0, r8
   12af0:	bl	10fe8 <strlen@plt>
   12af4:	mov	r1, r6
   12af8:	mov	r3, #128	; 0x80
   12afc:	rsb	r2, r0, #127	; 0x7f
   12b00:	mov	r0, r8
   12b04:	bl	10e5c <__strncat_chk@plt>
   12b08:	cmp	r5, #0
   12b0c:	beq	12b38 <__assert_fail@plt+0x1a3c>
   12b10:	ldr	r3, [pc, #-272]	; 12a08 <__assert_fail@plt+0x190c>
   12b14:	mov	r0, r8
   12b18:	ldr	r5, [r3]
   12b1c:	bl	19334 <__assert_fail@plt+0x8238>
   12b20:	vstr	d8, [sp]
   12b24:	ldr	r2, [pc, #-288]	; 12a0c <__assert_fail@plt+0x1910>
   12b28:	mov	r1, #1
   12b2c:	str	r0, [sp, #8]
   12b30:	mov	r0, r5
   12b34:	bl	1103c <__fprintf_chk@plt>
   12b38:	ldr	r5, [r9, #12]
   12b3c:	mov	r0, r8
   12b40:	cmp	r5, #0
   12b44:	beq	12d14 <__assert_fail@plt+0x1c18>
   12b48:	bl	10fe8 <strlen@plt>
   12b4c:	cmp	r0, r5
   12b50:	bcc	132b4 <__assert_fail@plt+0x21b8>
   12b54:	ldr	r3, [r9, #16]
   12b58:	add	r2, r0, #1
   12b5c:	cmp	r2, r3
   12b60:	bcs	130dc <__assert_fail@plt+0x1fe0>
   12b64:	ldr	r0, [r9, #20]
   12b68:	mov	r1, r8
   12b6c:	bl	10f4c <strcpy@plt>
   12b70:	ldr	r0, [r9, #60]	; 0x3c
   12b74:	ldr	r4, [pc, #-364]	; 12a10 <__assert_fail@plt+0x1914>
   12b78:	cmp	r0, #0
   12b7c:	beq	12b88 <__assert_fail@plt+0x1a8c>
   12b80:	ldr	r1, [r4]
   12b84:	bl	10e44 <fputs_unlocked@plt>
   12b88:	ldr	r1, [r4]
   12b8c:	ldr	r0, [r9, #20]
   12b90:	bl	10e44 <fputs_unlocked@plt>
   12b94:	ldr	r0, [r9, #56]	; 0x38
   12b98:	cmp	r0, #0
   12b9c:	moveq	r0, #1
   12ba0:	beq	120e4 <__assert_fail@plt+0xfe8>
   12ba4:	ldr	r1, [r4]
   12ba8:	bl	10e44 <fputs_unlocked@plt>
   12bac:	mov	r0, #1
   12bb0:	add	sp, sp, #260	; 0x104
   12bb4:	vpop	{d8-d11}
   12bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12bbc:	vmov	r0, r1, d9
   12bc0:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12bc4:	mov	r2, r0
   12bc8:	mov	r3, r1
   12bcc:	strd	r2, [sp, #24]
   12bd0:	bl	1c87c <__assert_fail@plt+0xb780>
   12bd4:	vmov	d7, r0, r1
   12bd8:	vcmpe.f64	d7, d9
   12bdc:	vmrs	APSR_nzcv, fpscr
   12be0:	bpl	12a5c <__assert_fail@plt+0x1960>
   12be4:	ldrd	r2, [sp, #24]
   12be8:	adds	r0, r2, #1
   12bec:	adc	r1, r3, #0
   12bf0:	bl	1c87c <__assert_fail@plt+0xb780>
   12bf4:	vmov	d7, r0, r1
   12bf8:	b	12a5c <__assert_fail@plt+0x1960>
   12bfc:	vcmpe.f64	d9, #0.0
   12c00:	vldr	d7, [pc, #944]	; 12fb8 <__assert_fail@plt+0x1ebc>
   12c04:	vmrs	APSR_nzcv, fpscr
   12c08:	vsubmi.f64	d7, d9, d7
   12c0c:	vaddpl.f64	d7, d9, d7
   12c10:	vmov	r0, r1, d7
   12c14:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12c18:	bl	1c87c <__assert_fail@plt+0xb780>
   12c1c:	vmov	d7, r0, r1
   12c20:	b	12a5c <__assert_fail@plt+0x1960>
   12c24:	vmov	r0, r1, d9
   12c28:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12c2c:	bl	1c87c <__assert_fail@plt+0xb780>
   12c30:	vmov	d7, r0, r1
   12c34:	b	12a5c <__assert_fail@plt+0x1960>
   12c38:	vcmpe.f64	d9, #0.0
   12c3c:	vmrs	APSR_nzcv, fpscr
   12c40:	bmi	12a14 <__assert_fail@plt+0x1918>
   12c44:	vmov	r0, r1, d9
   12c48:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12c4c:	mov	r2, r0
   12c50:	mov	r3, r1
   12c54:	strd	r2, [sp, #24]
   12c58:	bl	1c87c <__assert_fail@plt+0xb780>
   12c5c:	vmov	d7, r0, r1
   12c60:	vcmpe.f64	d9, d7
   12c64:	vmrs	APSR_nzcv, fpscr
   12c68:	ble	12a5c <__assert_fail@plt+0x1960>
   12c6c:	b	12be4 <__assert_fail@plt+0x1ae8>
   12c70:	vstr	d9, [sp, #8]
   12c74:	ldr	sl, [pc, #928]	; 1301c <__assert_fail@plt+0x1f20>
   12c78:	str	r4, [sp]
   12c7c:	ldr	r3, [sp, #32]
   12c80:	ldr	r0, [sl]
   12c84:	ldr	r2, [pc, #884]	; 13000 <__assert_fail@plt+0x1f04>
   12c88:	mov	r1, #1
   12c8c:	bl	1103c <__fprintf_chk@plt>
   12c90:	ldrb	r3, [r9, #4]
   12c94:	vmul.f64	d8, d8, d9
   12c98:	cmp	r3, #0
   12c9c:	beq	12820 <__assert_fail@plt+0x1724>
   12ca0:	ldr	r0, [sl]
   12ca4:	ldr	r2, [pc, #856]	; 13004 <__assert_fail@plt+0x1f08>
   12ca8:	vstr	d8, [sp, #8]
   12cac:	vstr	d8, [sp]
   12cb0:	mov	r1, #1
   12cb4:	bl	1103c <__fprintf_chk@plt>
   12cb8:	b	12820 <__assert_fail@plt+0x1724>
   12cbc:	sub	r3, r7, #69	; 0x45
   12cc0:	add	r7, fp, #1
   12cc4:	uxtb	r3, r3
   12cc8:	cmp	r3, #21
   12ccc:	ldrls	r2, [pc, #820]	; 13008 <__assert_fail@plt+0x1f0c>
   12cd0:	ldrls	r4, [r2, r3, lsl #2]
   12cd4:	cmp	sl, #1
   12cd8:	beq	1313c <__assert_fail@plt+0x2040>
   12cdc:	cmp	sl, #4
   12ce0:	beq	13578 <__assert_fail@plt+0x247c>
   12ce4:	vldr	s15, [sp, #32]
   12ce8:	ldrb	r3, [r9, #4]
   12cec:	vcvt.f64.s32	d7, s15
   12cf0:	cmp	r4, #0
   12cf4:	beq	1356c <__assert_fail@plt+0x2470>
   12cf8:	subs	r6, r4, #1
   12cfc:	vmov.f64	d9, d7
   12d00:	beq	12814 <__assert_fail@plt+0x1718>
   12d04:	subs	r6, r6, #1
   12d08:	vmul.f64	d9, d9, d7
   12d0c:	bne	12d04 <__assert_fail@plt+0x1c08>
   12d10:	b	12814 <__assert_fail@plt+0x1718>
   12d14:	bl	10fe8 <strlen@plt>
   12d18:	b	12b54 <__assert_fail@plt+0x1a58>
   12d1c:	vldr	d6, [pc, #668]	; 12fc0 <__assert_fail@plt+0x1ec4>
   12d20:	vldr	d10, [pc, #672]	; 12fc8 <__assert_fail@plt+0x1ecc>
   12d24:	vldr	d7, [pc, #676]	; 12fd0 <__assert_fail@plt+0x1ed4>
   12d28:	sub	r3, r5, #3
   12d2c:	vcmpe.f64	d8, d6
   12d30:	cmp	r3, #1
   12d34:	vmovls.f64	d10, d7
   12d38:	vmrs	APSR_nzcv, fpscr
   12d3c:	blt	130cc <__assert_fail@plt+0x1fd0>
   12d40:	vldr	d7, [pc, #656]	; 12fd8 <__assert_fail@plt+0x1edc>
   12d44:	mov	r3, #0
   12d48:	vmov.f64	d9, d8
   12d4c:	vcmpe.f64	d8, d7
   12d50:	vmrs	APSR_nzcv, fpscr
   12d54:	movhi	r7, r3
   12d58:	bhi	12d8c <__assert_fail@plt+0x1c90>
   12d5c:	vldr	d6, [pc, #636]	; 12fe0 <__assert_fail@plt+0x1ee4>
   12d60:	mov	r7, r3
   12d64:	b	12d70 <__assert_fail@plt+0x1c74>
   12d68:	vdiv.f64	d9, d9, d10
   12d6c:	add	r7, r7, #1
   12d70:	vcmpe.f64	d9, d6
   12d74:	vmrs	APSR_nzcv, fpscr
   12d78:	vnegmi.f64	d7, d9
   12d7c:	vmovpl.f64	d7, d9
   12d80:	vcmpe.f64	d7, d10
   12d84:	vmrs	APSR_nzcv, fpscr
   12d88:	bge	12d68 <__assert_fail@plt+0x1c6c>
   12d8c:	cmp	fp, #0
   12d90:	bne	1337c <__assert_fail@plt+0x2280>
   12d94:	ldr	r3, [r4, #24]
   12d98:	cmn	r3, #1
   12d9c:	str	r3, [sp, #24]
   12da0:	beq	13310 <__assert_fail@plt+0x2214>
   12da4:	add	r6, r7, r7, lsl #1
   12da8:	cmp	r6, r3
   12dac:	movcs	r6, r3
   12db0:	cmp	r6, #0
   12db4:	bne	131fc <__assert_fail@plt+0x2100>
   12db8:	vldr	d7, [pc, #552]	; 12fe8 <__assert_fail@plt+0x1eec>
   12dbc:	vldr	d11, [pc, #556]	; 12ff0 <__assert_fail@plt+0x1ef4>
   12dc0:	vmul.f64	d7, d9, d7
   12dc4:	vmov	r0, r1, d7
   12dc8:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12dcc:	bl	1c87c <__assert_fail@plt+0xb780>
   12dd0:	vmov	d7, r0, r1
   12dd4:	vmul.f64	d11, d7, d11
   12dd8:	vsub.f64	d9, d9, d11
   12ddc:	cmp	r8, #4
   12de0:	ldrls	pc, [pc, r8, lsl #2]
   12de4:	b	133b4 <__assert_fail@plt+0x22b8>
   12de8:	andeq	r3, r1, r8, lsr #32
   12dec:	andeq	r2, r1, r8, ror #30
   12df0:	andeq	r3, r1, ip, rrx
   12df4:	andeq	r2, r1, r0, asr pc
   12df8:	strdeq	r2, [r1], -ip
   12dfc:	mov	r6, #0
   12e00:	vcmpe.f64	d9, #0.0
   12e04:	vldr	d7, [pc, #428]	; 12fb8 <__assert_fail@plt+0x1ebc>
   12e08:	vmrs	APSR_nzcv, fpscr
   12e0c:	vsubmi.f64	d7, d9, d7
   12e10:	vaddpl.f64	d7, d9, d7
   12e14:	vmov	r0, r1, d7
   12e18:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12e1c:	bl	1c87c <__assert_fail@plt+0xb780>
   12e20:	vmov	d7, r0, r1
   12e24:	cmp	r6, #0
   12e28:	vadd.f64	d11, d11, d7
   12e2c:	beq	13168 <__assert_fail@plt+0x206c>
   12e30:	subs	r2, r6, #1
   12e34:	beq	134c4 <__assert_fail@plt+0x23c8>
   12e38:	vldr	d7, [pc, #440]	; 12ff8 <__assert_fail@plt+0x1efc>
   12e3c:	vmov.f64	d6, d7
   12e40:	subs	r2, r2, #1
   12e44:	vmul.f64	d7, d7, d6
   12e48:	bne	12e40 <__assert_fail@plt+0x1d44>
   12e4c:	vdiv.f64	d9, d11, d7
   12e50:	vcmpe.f64	d9, #0.0
   12e54:	vmrs	APSR_nzcv, fpscr
   12e58:	bmi	1326c <__assert_fail@plt+0x2170>
   12e5c:	vcmpe.f64	d9, d10
   12e60:	vmrs	APSR_nzcv, fpscr
   12e64:	blt	12e74 <__assert_fail@plt+0x1d78>
   12e68:	vdiv.f64	d9, d9, d10
   12e6c:	add	r3, r7, #1
   12e70:	mov	r7, r3
   12e74:	vldr	d7, [pc, #356]	; 12fe0 <__assert_fail@plt+0x1ee4>
   12e78:	vcmp.f64	d9, d7
   12e7c:	vmrs	APSR_nzcv, fpscr
   12e80:	bne	131c4 <__assert_fail@plt+0x20c8>
   12e84:	mov	r6, #0
   12e88:	cmp	fp, #0
   12e8c:	bne	13288 <__assert_fail@plt+0x218c>
   12e90:	ldr	r2, [sp, #24]
   12e94:	ldr	r3, [pc, #368]	; 1300c <__assert_fail@plt+0x1f10>
   12e98:	cmn	r2, #1
   12e9c:	moveq	r2, r6
   12ea0:	mov	r6, r2
   12ea4:	ldrb	r2, [r3, #6]
   12ea8:	cmp	r7, #8
   12eac:	ldrh	r1, [r3, #4]
   12eb0:	ldr	r0, [r3]
   12eb4:	strb	r2, [sl, #6]
   12eb8:	ldrls	r3, [pc, #328]	; 13008 <__assert_fail@plt+0x1f0c>
   12ebc:	movls	r2, r7
   12ec0:	ldrhi	r3, [pc, #328]	; 13010 <__assert_fail@plt+0x1f14>
   12ec4:	addls	r3, r3, r2, lsl #2
   12ec8:	add	r8, sp, #128	; 0x80
   12ecc:	ldrls	r3, [r3, #88]	; 0x58
   12ed0:	add	fp, sp, #64	; 0x40
   12ed4:	strh	r1, [sl, #4]
   12ed8:	str	r0, [sl]
   12edc:	mov	r2, #1
   12ee0:	str	r3, [sp, #16]
   12ee4:	vstr	d9, [sp, #8]
   12ee8:	str	r6, [sp, #4]
   12eec:	mov	r0, r8
   12ef0:	str	fp, [sp]
   12ef4:	mov	r3, #128	; 0x80
   12ef8:	mov	r1, #127	; 0x7f
   12efc:	bl	110e4 <__snprintf_chk@plt>
   12f00:	cmp	r0, #126	; 0x7e
   12f04:	bhi	13410 <__assert_fail@plt+0x2314>
   12f08:	adds	r7, r7, #0
   12f0c:	movne	r7, #1
   12f10:	cmp	r5, #4
   12f14:	movne	r7, #0
   12f18:	cmp	r7, #0
   12f1c:	beq	12f34 <__assert_fail@plt+0x1e38>
   12f20:	rsb	r2, r0, #127	; 0x7f
   12f24:	mov	r3, #128	; 0x80
   12f28:	ldr	r1, [pc, #228]	; 13014 <__assert_fail@plt+0x1f18>
   12f2c:	mov	r0, r8
   12f30:	bl	10e5c <__strncat_chk@plt>
   12f34:	ldrb	r5, [r9, #4]
   12f38:	cmp	r5, #0
   12f3c:	bne	13170 <__assert_fail@plt+0x2074>
   12f40:	ldr	r6, [r9]
   12f44:	cmp	r6, #0
   12f48:	bne	12aec <__assert_fail@plt+0x19f0>
   12f4c:	b	12b38 <__assert_fail@plt+0x1a3c>
   12f50:	mov	r6, #0
   12f54:	vmov	r0, r1, d9
   12f58:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12f5c:	bl	1c87c <__assert_fail@plt+0xb780>
   12f60:	vmov	d7, r0, r1
   12f64:	b	12e24 <__assert_fail@plt+0x1d28>
   12f68:	mov	r6, #0
   12f6c:	vneg.f64	d9, d9
   12f70:	vmov	r0, r1, d9
   12f74:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   12f78:	mov	r2, r0
   12f7c:	mov	r3, r1
   12f80:	strd	r2, [sp, #32]
   12f84:	bl	1c87c <__assert_fail@plt+0xb780>
   12f88:	ldrd	r2, [sp, #32]
   12f8c:	vmov	d7, r0, r1
   12f90:	vcmpe.f64	d9, d7
   12f94:	vmrs	APSR_nzcv, fpscr
   12f98:	ble	12fa4 <__assert_fail@plt+0x1ea8>
   12f9c:	adds	r2, r2, #1
   12fa0:	adc	r3, r3, #0
   12fa4:	rsbs	r0, r2, #0
   12fa8:	rsc	r1, r3, #0
   12fac:	bl	1c87c <__assert_fail@plt+0xb780>
   12fb0:	vmov	d7, r0, r1
   12fb4:	b	12e24 <__assert_fail@plt+0x1d28>
   12fb8:	andeq	r0, r0, r0
   12fbc:	svccc	0x00e00000
   12fc0:			; <UNDEFINED> instruction: 0xffffffff
   12fc4:			; <UNDEFINED> instruction: 0xffefffff
   12fc8:	andeq	r0, r0, r0
   12fcc:	addmi	r4, pc, r0
   12fd0:	andeq	r0, r0, r0
   12fd4:	addsmi	r0, r0, r0
   12fd8:			; <UNDEFINED> instruction: 0xffffffff
   12fdc:	svcvc	0x00efffff
	...
   12fec:	stccc	0, cr0, [r0], {-0}
   12ff0:	andeq	r0, r0, r0
   12ff4:	mvnmi	r0, #0
   12ff8:	andeq	r0, r0, r0
   12ffc:	eormi	r0, r4, r0
   13000:	ldrdeq	ip, [r1], -r8
   13004:	strdeq	ip, [r1], -r4
   13008:	andeq	ip, r1, r8, ror #19
   1300c:	ldrdeq	sp, [r1], -r0
   13010:			; <UNDEFINED> instruction: 0x0001cdb4
   13014:	andeq	lr, r1, r0, lsl r8
   13018:			; <UNDEFINED> instruction: 0x0001cfb0
   1301c:	muleq	r2, r0, r1
   13020:	andeq	sp, r1, r8, lsr r0
   13024:	andeq	sp, r1, r0, lsr r0
   13028:	mov	r6, #0
   1302c:	vmov	r0, r1, d9
   13030:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   13034:	mov	r2, r0
   13038:	mov	r3, r1
   1303c:	strd	r2, [sp, #32]
   13040:	bl	1c87c <__assert_fail@plt+0xb780>
   13044:	vmov	d7, r0, r1
   13048:	vcmpe.f64	d7, d9
   1304c:	vmrs	APSR_nzcv, fpscr
   13050:	bpl	12e24 <__assert_fail@plt+0x1d28>
   13054:	ldrd	r2, [sp, #32]
   13058:	adds	r0, r2, #1
   1305c:	adc	r1, r3, #0
   13060:	bl	1c87c <__assert_fail@plt+0xb780>
   13064:	vmov	d7, r0, r1
   13068:	b	12e24 <__assert_fail@plt+0x1d28>
   1306c:	mov	r6, #0
   13070:	vcmpe.f64	d9, #0.0
   13074:	vmrs	APSR_nzcv, fpscr
   13078:	bpl	1302c <__assert_fail@plt+0x1f30>
   1307c:	b	12f6c <__assert_fail@plt+0x1e70>
   13080:	ldr	r1, [pc, #-112]	; 13018 <__assert_fail@plt+0x1f1c>
   13084:	b	124ac <__assert_fail@plt+0x13b0>
   13088:	ldr	r3, [pc, #-116]	; 1301c <__assert_fail@plt+0x1f20>
   1308c:	mov	r2, #17
   13090:	mov	r1, #1
   13094:	ldr	r3, [r3]
   13098:	ldr	r0, [pc, #-128]	; 13020 <__assert_fail@plt+0x1f24>
   1309c:	bl	10f28 <fwrite@plt>
   130a0:	ldrb	fp, [r9, #4]
   130a4:	b	12948 <__assert_fail@plt+0x184c>
   130a8:	ldr	r2, [pc, #-140]	; 13024 <__assert_fail@plt+0x1f28>
   130ac:	mov	r0, sl
   130b0:	mov	r1, #62	; 0x3e
   130b4:	stm	sp, {r2, r3}
   130b8:	mov	r3, #63	; 0x3f
   130bc:	mov	r2, #1
   130c0:	bl	110e4 <__snprintf_chk@plt>
   130c4:	add	sl, sl, r0
   130c8:	b	1293c <__assert_fail@plt+0x1840>
   130cc:	mov	r3, #0
   130d0:	vmov.f64	d9, d8
   130d4:	mov	r7, r3
   130d8:	b	12d8c <__assert_fail@plt+0x1c90>
   130dc:	add	r3, r0, #2
   130e0:	mov	r1, r3
   130e4:	ldr	r0, [r9, #20]
   130e8:	str	r3, [r9, #16]
   130ec:	bl	19f2c <__assert_fail@plt+0x8e30>
   130f0:	str	r0, [r9, #20]
   130f4:	b	12b68 <__assert_fail@plt+0x1a6c>
   130f8:	vldr	d7, [pc, #976]	; 134d0 <__assert_fail@plt+0x23d4>
   130fc:	vldr	d10, [pc, #980]	; 134d8 <__assert_fail@plt+0x23dc>
   13100:	vmul.f64	d7, d8, d7
   13104:	vmov	r0, r1, d7
   13108:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   1310c:	bl	1c87c <__assert_fail@plt+0xb780>
   13110:	vmov	d7, r0, r1
   13114:	vmul.f64	d10, d7, d10
   13118:	vsub.f64	d9, d8, d10
   1311c:	cmp	r8, #4
   13120:	ldrls	pc, [pc, r8, lsl #2]
   13124:	b	13598 <__assert_fail@plt+0x249c>
   13128:			; <UNDEFINED> instruction: 0x00012bbc
   1312c:	andeq	r2, r1, r4, lsl sl
   13130:	andeq	r2, r1, r8, lsr ip
   13134:	andeq	r2, r1, r4, lsr #24
   13138:	strdeq	r2, [r1], -ip
   1313c:	ldrb	r3, [fp, #1]
   13140:	cmp	r3, #105	; 0x69
   13144:	bne	12ce4 <__assert_fail@plt+0x1be8>
   13148:	ldrb	r3, [r9, #4]
   1314c:	add	r7, fp, #2
   13150:	cmp	r3, #0
   13154:	bne	1351c <__assert_fail@plt+0x2420>
   13158:	mov	r2, #1024	; 0x400
   1315c:	vldr	d7, [pc, #892]	; 134e0 <__assert_fail@plt+0x23e4>
   13160:	str	r2, [sp, #32]
   13164:	b	12cf0 <__assert_fail@plt+0x1bf4>
   13168:	vldr	d7, [pc, #888]	; 134e8 <__assert_fail@plt+0x23ec>
   1316c:	b	12e4c <__assert_fail@plt+0x1d50>
   13170:	ldr	r3, [pc, #924]	; 13514 <__assert_fail@plt+0x2418>
   13174:	mov	r0, r8
   13178:	ldr	r5, [r3]
   1317c:	bl	19334 <__assert_fail@plt+0x8238>
   13180:	ldr	r2, [pc, #888]	; 13500 <__assert_fail@plt+0x2404>
   13184:	mov	r1, #1
   13188:	mov	r3, r0
   1318c:	mov	r0, r5
   13190:	bl	1103c <__fprintf_chk@plt>
   13194:	b	12adc <__assert_fail@plt+0x19e0>
   13198:	subs	r5, r6, #1
   1319c:	beq	133a8 <__assert_fail@plt+0x22ac>
   131a0:	vldr	d7, [pc, #840]	; 134f0 <__assert_fail@plt+0x23f4>
   131a4:	vmov.f64	d6, d7
   131a8:	subs	r5, r5, #1
   131ac:	vmul.f64	d7, d7, d6
   131b0:	bne	131a8 <__assert_fail@plt+0x20ac>
   131b4:	vdiv.f64	d10, d10, d7
   131b8:	b	12a68 <__assert_fail@plt+0x196c>
   131bc:	vldr	d7, [pc, #804]	; 134e8 <__assert_fail@plt+0x23ec>
   131c0:	b	127d4 <__assert_fail@plt+0x16d8>
   131c4:	vcmpe.f64	d9, d7
   131c8:	vmrs	APSR_nzcv, fpscr
   131cc:	vmovpl.f64	d6, d9
   131d0:	bmi	134a0 <__assert_fail@plt+0x23a4>
   131d4:	vldr	d7, [pc, #788]	; 134f0 <__assert_fail@plt+0x23f4>
   131d8:	vcmpe.f64	d9, d7
   131dc:	vmov.f64	d9, d6
   131e0:	vmrs	APSR_nzcv, fpscr
   131e4:	movmi	r6, #1
   131e8:	movpl	r6, #0
   131ec:	cmp	r7, #0
   131f0:	moveq	r6, #0
   131f4:	andne	r6, r6, #1
   131f8:	b	12e88 <__assert_fail@plt+0x1d8c>
   131fc:	subs	r2, r6, #1
   13200:	beq	13330 <__assert_fail@plt+0x2234>
   13204:	vldr	d7, [pc, #740]	; 134f0 <__assert_fail@plt+0x23f4>
   13208:	mov	r3, r2
   1320c:	vmov.f64	d6, d7
   13210:	subs	r3, r3, #1
   13214:	vmul.f64	d7, d7, d6
   13218:	bne	13210 <__assert_fail@plt+0x2114>
   1321c:	vmul.f64	d9, d9, d7
   13220:	vldr	d7, [pc, #680]	; 134d0 <__assert_fail@plt+0x23d4>
   13224:	str	r2, [sp, #32]
   13228:	vldr	d11, [pc, #680]	; 134d8 <__assert_fail@plt+0x23dc>
   1322c:	vmul.f64	d7, d9, d7
   13230:	vmov	r0, r1, d7
   13234:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   13238:	bl	1c87c <__assert_fail@plt+0xb780>
   1323c:	ldr	r2, [sp, #32]
   13240:	vmov	d7, r0, r1
   13244:	vmul.f64	d11, d7, d11
   13248:	vsub.f64	d9, d9, d11
   1324c:	cmp	r8, #4
   13250:	ldrls	pc, [pc, r8, lsl #2]
   13254:	b	1344c <__assert_fail@plt+0x2350>
   13258:	andeq	r3, r1, ip, lsr #32
   1325c:	andeq	r2, r1, ip, ror #30
   13260:	andeq	r3, r1, r0, ror r0
   13264:	andeq	r2, r1, r4, asr pc
   13268:	andeq	r2, r1, r0, lsl #28
   1326c:	vneg.f64	d7, d9
   13270:	vcmpe.f64	d7, d10
   13274:	vmrs	APSR_nzcv, fpscr
   13278:	bge	12e68 <__assert_fail@plt+0x1d6c>
   1327c:	vmov.f64	d6, d9
   13280:	vmov.f64	d9, d7
   13284:	b	131d4 <__assert_fail@plt+0x20d8>
   13288:	vstr	d10, [sp, #8]
   1328c:	ldr	r3, [pc, #640]	; 13514 <__assert_fail@plt+0x2418>
   13290:	str	r7, [sp, #16]
   13294:	ldr	r2, [pc, #616]	; 13504 <__assert_fail@plt+0x2408>
   13298:	ldr	r0, [r3]
   1329c:	mov	r1, #1
   132a0:	vstr	d9, [sp]
   132a4:	bl	1103c <__fprintf_chk@plt>
   132a8:	ldr	r3, [r4, #24]
   132ac:	str	r3, [sp, #24]
   132b0:	b	12e90 <__assert_fail@plt+0x1d94>
   132b4:	ldr	r3, [r4, #32]
   132b8:	mov	ip, #2
   132bc:	str	r3, [sp]
   132c0:	ldr	r2, [r9, #16]
   132c4:	mov	r3, fp
   132c8:	ldr	r1, [r9, #20]
   132cc:	mov	r0, r8
   132d0:	str	ip, [sp, #4]
   132d4:	str	r5, [sp, #64]	; 0x40
   132d8:	bl	14c78 <__assert_fail@plt+0x3b7c>
   132dc:	ldrb	r3, [r9, #4]
   132e0:	cmp	r3, #0
   132e4:	beq	12b70 <__assert_fail@plt+0x1a74>
   132e8:	ldr	r3, [pc, #548]	; 13514 <__assert_fail@plt+0x2418>
   132ec:	ldr	r0, [r9, #20]
   132f0:	ldr	r4, [r3]
   132f4:	bl	19334 <__assert_fail@plt+0x8238>
   132f8:	ldr	r2, [pc, #520]	; 13508 <__assert_fail@plt+0x240c>
   132fc:	mov	r1, #1
   13300:	mov	r3, r0
   13304:	mov	r0, r4
   13308:	bl	1103c <__fprintf_chk@plt>
   1330c:	b	12b70 <__assert_fail@plt+0x1a74>
   13310:	vcmpe.f64	d9, #0.0
   13314:	vldr	d6, [pc, #468]	; 134f0 <__assert_fail@plt+0x23f4>
   13318:	vmrs	APSR_nzcv, fpscr
   1331c:	vnegmi.f64	d7, d9
   13320:	vmovpl.f64	d7, d9
   13324:	vcmpe.f64	d7, d6
   13328:	vmrs	APSR_nzcv, fpscr
   1332c:	bpl	12db8 <__assert_fail@plt+0x1cbc>
   13330:	vldr	d6, [pc, #440]	; 134f0 <__assert_fail@plt+0x23f4>
   13334:	vldr	d7, [pc, #404]	; 134d0 <__assert_fail@plt+0x23d4>
   13338:	vldr	d11, [pc, #408]	; 134d8 <__assert_fail@plt+0x23dc>
   1333c:	vmul.f64	d9, d9, d6
   13340:	vmul.f64	d7, d9, d7
   13344:	vmov	r0, r1, d7
   13348:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   1334c:	bl	1c87c <__assert_fail@plt+0xb780>
   13350:	vmov	d7, r0, r1
   13354:	vmul.f64	d11, d7, d11
   13358:	vsub.f64	d9, d9, d11
   1335c:	cmp	r8, #4
   13360:	ldrls	pc, [pc, r8, lsl #2]
   13364:	b	133b4 <__assert_fail@plt+0x22b8>
   13368:	andeq	r3, r1, r4, ror r4
   1336c:	andeq	r3, r1, ip, ror #8
   13370:	andeq	r3, r1, r4, ror #8
   13374:	andeq	r3, r1, ip, asr r4
   13378:	andeq	r3, r1, r4, asr r4
   1337c:	vstr	d10, [sp, #8]
   13380:	ldr	r3, [pc, #396]	; 13514 <__assert_fail@plt+0x2418>
   13384:	str	r7, [sp, #16]
   13388:	ldr	r2, [pc, #380]	; 1350c <__assert_fail@plt+0x2410>
   1338c:	ldr	r0, [r3]
   13390:	mov	r1, #1
   13394:	vstr	d9, [sp]
   13398:	bl	1103c <__fprintf_chk@plt>
   1339c:	ldrb	fp, [r9, #4]
   133a0:	b	12d94 <__assert_fail@plt+0x1c98>
   133a4:	vldr	d10, [pc, #332]	; 134f8 <__assert_fail@plt+0x23fc>
   133a8:	vldr	d7, [pc, #320]	; 134f0 <__assert_fail@plt+0x23f4>
   133ac:	vdiv.f64	d10, d10, d7
   133b0:	b	12a68 <__assert_fail@plt+0x196c>
   133b4:	vldr	d9, [pc, #316]	; 134f8 <__assert_fail@plt+0x23fc>
   133b8:	vcmpe.f64	d10, d9
   133bc:	vmrs	APSR_nzcv, fpscr
   133c0:	bls	12e68 <__assert_fail@plt+0x1d6c>
   133c4:	b	12e84 <__assert_fail@plt+0x1d88>
   133c8:	vmul.f64	d9, d8, d9
   133cc:	vldr	d7, [pc, #252]	; 134d0 <__assert_fail@plt+0x23d4>
   133d0:	vldr	d10, [pc, #256]	; 134d8 <__assert_fail@plt+0x23dc>
   133d4:	vmul.f64	d7, d9, d7
   133d8:	vmov	r0, r1, d7
   133dc:	bl	1c8ec <__assert_fail@plt+0xb7f0>
   133e0:	bl	1c87c <__assert_fail@plt+0xb780>
   133e4:	vmov	d7, r0, r1
   133e8:	vmul.f64	d10, d7, d10
   133ec:	vsub.f64	d9, d9, d10
   133f0:	cmp	r8, #4
   133f4:	ldrls	pc, [pc, r8, lsl #2]
   133f8:	b	133a4 <__assert_fail@plt+0x22a8>
   133fc:			; <UNDEFINED> instruction: 0x00012bbc
   13400:	andeq	r2, r1, r4, lsl sl
   13404:	andeq	r2, r1, r8, lsr ip
   13408:	andeq	r2, r1, r4, lsr #24
   1340c:	strdeq	r2, [r1], -ip
   13410:	mov	r2, #5
   13414:	ldr	r1, [pc, #244]	; 13510 <__assert_fail@plt+0x2414>
   13418:	mov	r0, #0
   1341c:	bl	10ef8 <dcgettext@plt>
   13420:	vstr	d9, [sp]
   13424:	mov	r1, #0
   13428:	mov	r2, r0
   1342c:	mov	r0, #1
   13430:	bl	10f7c <error@plt>
   13434:	add	r2, r3, r6
   13438:	cmp	r2, #15
   1343c:	bls	12490 <__assert_fail@plt+0x1394>
   13440:	b	124e4 <__assert_fail@plt+0x13e8>
   13444:	vldr	d10, [pc, #172]	; 134f8 <__assert_fail@plt+0x23fc>
   13448:	b	131a0 <__assert_fail@plt+0x20a4>
   1344c:	vldr	d11, [pc, #164]	; 134f8 <__assert_fail@plt+0x23fc>
   13450:	b	12e38 <__assert_fail@plt+0x1d3c>
   13454:	mov	r6, #1
   13458:	b	12e00 <__assert_fail@plt+0x1d04>
   1345c:	mov	r6, #1
   13460:	b	12f54 <__assert_fail@plt+0x1e58>
   13464:	mov	r6, #1
   13468:	b	13070 <__assert_fail@plt+0x1f74>
   1346c:	mov	r6, #1
   13470:	b	12f6c <__assert_fail@plt+0x1e70>
   13474:	mov	r6, #1
   13478:	b	1302c <__assert_fail@plt+0x1f30>
   1347c:	sub	r3, r3, #2
   13480:	cmp	r3, #4
   13484:	ldrls	pc, [pc, r3, lsl #2]
   13488:	b	134b8 <__assert_fail@plt+0x23bc>
   1348c:			; <UNDEFINED> instruction: 0x000122b0
   13490:	andeq	r2, r1, r8, asr #7
   13494:	andeq	r3, r1, r8, lsr #9
   13498:	strdeq	r2, [r1], -r8
   1349c:			; <UNDEFINED> instruction: 0x000134b0
   134a0:	vneg.f64	d7, d9
   134a4:	b	1327c <__assert_fail@plt+0x2180>
   134a8:	mov	r6, #0
   134ac:	b	12688 <__assert_fail@plt+0x158c>
   134b0:	mov	r6, #0
   134b4:	b	126a0 <__assert_fail@plt+0x15a4>
   134b8:	mov	r6, #0
   134bc:	mov	r1, r6
   134c0:	b	122c0 <__assert_fail@plt+0x11c4>
   134c4:	vldr	d7, [pc, #36]	; 134f0 <__assert_fail@plt+0x23f4>
   134c8:	b	12e4c <__assert_fail@plt+0x1d50>
   134cc:	nop			; (mov r0, r0)
   134d0:	andeq	r0, r0, r0
   134d4:	stccc	0, cr0, [r0], {-0}
   134d8:	andeq	r0, r0, r0
   134dc:	mvnmi	r0, #0
   134e0:	andeq	r0, r0, r0
   134e4:	addsmi	r0, r0, r0
   134e8:	andeq	r0, r0, r0
   134ec:	svccc	0x00f00000	; IMB
   134f0:	andeq	r0, r0, r0
   134f4:	eormi	r0, r4, r0
	...
   13500:	ldrdeq	sp, [r1], -r8
   13504:	andeq	sp, r1, r4, lsr #1
   13508:	andeq	sp, r1, r4, lsr #2
   1350c:	andeq	sp, r1, r0, lsl #1
   13510:	andeq	sp, r1, r4, asr r0
   13514:	muleq	r2, r0, r1
   13518:	andeq	ip, r1, r4, lsr #29
   1351c:	ldr	r2, [pc, #-16]	; 13514 <__assert_fail@plt+0x2418>
   13520:	mov	r3, #1024	; 0x400
   13524:	mov	r1, sl
   13528:	ldr	r0, [r2]
   1352c:	ldr	r2, [pc, #-28]	; 13518 <__assert_fail@plt+0x241c>
   13530:	bl	1103c <__fprintf_chk@plt>
   13534:	mov	r3, #1024	; 0x400
   13538:	str	r3, [sp, #32]
   1353c:	vldr	d7, [pc, #92]	; 135a0 <__assert_fail@plt+0x24a4>
   13540:	ldrb	r3, [r9, #4]
   13544:	b	12cf0 <__assert_fail@plt+0x1bf4>
   13548:	mov	r2, #5
   1354c:	ldr	r1, [pc, #100]	; 135b8 <__assert_fail@plt+0x24bc>
   13550:	mov	r0, #0
   13554:	bl	10ef8 <dcgettext@plt>
   13558:	vstr	d10, [sp]
   1355c:	mov	r1, #0
   13560:	mov	r2, r0
   13564:	mov	r0, #1
   13568:	bl	10f7c <error@plt>
   1356c:	mov	r6, r4
   13570:	vldr	d9, [pc, #48]	; 135a8 <__assert_fail@plt+0x24ac>
   13574:	b	12814 <__assert_fail@plt+0x1718>
   13578:	ldrb	r3, [fp, #1]
   1357c:	cmp	r3, #105	; 0x69
   13580:	bne	134b0 <__assert_fail@plt+0x23b4>
   13584:	vldr	s15, [sp, #32]
   13588:	ldrb	r3, [r9, #4]
   1358c:	add	r7, fp, #2
   13590:	vcvt.f64.s32	d7, s15
   13594:	b	12cf0 <__assert_fail@plt+0x1bf4>
   13598:	vldr	d10, [pc, #16]	; 135b0 <__assert_fail@plt+0x24b4>
   1359c:	b	12a68 <__assert_fail@plt+0x196c>
   135a0:	andeq	r0, r0, r0
   135a4:	addsmi	r0, r0, r0
   135a8:	andeq	r0, r0, r0
   135ac:	svccc	0x00f00000	; IMB
	...
   135b8:	andeq	sp, r1, r4, asr r0
   135bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135c0:	mov	r5, r0
   135c4:	ldr	r9, [pc, #432]	; 1377c <__assert_fail@plt+0x2680>
   135c8:	ldr	fp, [pc, #432]	; 13780 <__assert_fail@plt+0x2684>
   135cc:	sub	sp, sp, #12
   135d0:	ldr	r2, [r9, #36]	; 0x24
   135d4:	mov	r8, #1
   135d8:	mov	r6, #0
   135dc:	mov	r7, #0
   135e0:	mov	sl, #0
   135e4:	str	r1, [sp, #4]
   135e8:	adds	r6, r6, #1
   135ec:	adc	r7, r7, #0
   135f0:	cmp	r2, #256	; 0x100
   135f4:	ldrb	r3, [r5]
   135f8:	beq	13680 <__assert_fail@plt+0x2584>
   135fc:	cmp	r3, r2
   13600:	beq	13758 <__assert_fail@plt+0x265c>
   13604:	cmp	r3, #0
   13608:	beq	13628 <__assert_fail@plt+0x252c>
   1360c:	mov	r4, r5
   13610:	b	1361c <__assert_fail@plt+0x2520>
   13614:	cmp	r3, r2
   13618:	beq	136f4 <__assert_fail@plt+0x25f8>
   1361c:	ldrb	r3, [r4, #1]!
   13620:	cmp	r3, #0
   13624:	bne	13614 <__assert_fail@plt+0x2518>
   13628:	mov	r3, r7
   1362c:	mov	r2, r6
   13630:	mov	r0, r5
   13634:	bl	12064 <__assert_fail@plt+0xf68>
   13638:	ldr	r3, [sp, #4]
   1363c:	cmp	r0, #0
   13640:	moveq	r8, #0
   13644:	cmp	r3, #0
   13648:	beq	13674 <__assert_fail@plt+0x2578>
   1364c:	ldr	r3, [pc, #300]	; 13780 <__assert_fail@plt+0x2684>
   13650:	ldrb	r1, [r9, #40]	; 0x28
   13654:	ldr	r0, [r3]
   13658:	ldr	r3, [r0, #20]
   1365c:	ldr	r2, [r0, #24]
   13660:	cmp	r3, r2
   13664:	addcc	r2, r3, #1
   13668:	strcc	r2, [r0, #20]
   1366c:	strbcc	r1, [r3]
   13670:	bcs	13774 <__assert_fail@plt+0x2678>
   13674:	mov	r0, r8
   13678:	add	sp, sp, #12
   1367c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13680:	cmp	r3, #0
   13684:	beq	13628 <__assert_fail@plt+0x252c>
   13688:	str	r3, [sp]
   1368c:	bl	10fd0 <__ctype_b_loc@plt>
   13690:	ldr	r3, [sp]
   13694:	mov	r4, r5
   13698:	ldr	r1, [r0]
   1369c:	sxth	r2, r3
   136a0:	lsl	r0, r2, #1
   136a4:	ldrh	r0, [r1, r0]
   136a8:	cmp	r3, #10
   136ac:	orreq	r0, r0, #1
   136b0:	tst	r0, #1
   136b4:	beq	136cc <__assert_fail@plt+0x25d0>
   136b8:	b	13748 <__assert_fail@plt+0x264c>
   136bc:	ldrb	r3, [r4, #1]!
   136c0:	cmp	r3, #0
   136c4:	beq	13628 <__assert_fail@plt+0x252c>
   136c8:	sxth	r2, r3
   136cc:	lsl	r2, r2, #1
   136d0:	ldrh	r2, [r1, r2]
   136d4:	cmp	r3, #10
   136d8:	movne	r3, r2
   136dc:	orreq	r3, r2, #1
   136e0:	tst	r3, #1
   136e4:	beq	136bc <__assert_fail@plt+0x25c0>
   136e8:	ldrb	r3, [r4]
   136ec:	cmp	r3, #0
   136f0:	beq	13628 <__assert_fail@plt+0x252c>
   136f4:	mov	r2, r6
   136f8:	mov	r3, r7
   136fc:	strb	sl, [r4]
   13700:	mov	r0, r5
   13704:	bl	12064 <__assert_fail@plt+0xf68>
   13708:	ldr	r3, [fp]
   1370c:	ldr	r2, [r9, #36]	; 0x24
   13710:	ldr	ip, [r3, #20]
   13714:	cmp	r2, #256	; 0x100
   13718:	ldr	lr, [r3, #24]
   1371c:	movne	r1, r2
   13720:	moveq	r1, #32
   13724:	cmp	r0, #0
   13728:	moveq	r8, #0
   1372c:	cmp	ip, lr
   13730:	addcc	r0, ip, #1
   13734:	strcc	r0, [r3, #20]
   13738:	strbcc	r1, [ip]
   1373c:	bcs	13760 <__assert_fail@plt+0x2664>
   13740:	add	r5, r4, #1
   13744:	b	135e8 <__assert_fail@plt+0x24ec>
   13748:	ldrb	r3, [r4, #1]!
   1374c:	cmp	r3, #0
   13750:	bne	1369c <__assert_fail@plt+0x25a0>
   13754:	b	13628 <__assert_fail@plt+0x252c>
   13758:	mov	r4, r5
   1375c:	b	136ec <__assert_fail@plt+0x25f0>
   13760:	uxtb	r1, r1
   13764:	mov	r0, r3
   13768:	bl	11060 <__overflow@plt>
   1376c:	ldr	r2, [r9, #36]	; 0x24
   13770:	b	13740 <__assert_fail@plt+0x2644>
   13774:	bl	11060 <__overflow@plt>
   13778:	b	13674 <__assert_fail@plt+0x2578>
   1377c:	andeq	pc, r2, r8, lsl #2
   13780:	muleq	r2, ip, r1
   13784:	subs	r4, r0, #0
   13788:	push	{r7, lr}
   1378c:	sub	sp, sp, #88	; 0x58
   13790:	beq	137cc <__assert_fail@plt+0x26d0>
   13794:	ldr	r3, [pc, #1284]	; 13ca0 <__assert_fail@plt+0x2ba4>
   13798:	mov	r2, #5
   1379c:	ldr	r1, [pc, #1280]	; 13ca4 <__assert_fail@plt+0x2ba8>
   137a0:	mov	r0, #0
   137a4:	ldr	r5, [r3]
   137a8:	bl	10ef8 <dcgettext@plt>
   137ac:	ldr	r3, [pc, #1268]	; 13ca8 <__assert_fail@plt+0x2bac>
   137b0:	mov	r1, #1
   137b4:	ldr	r3, [r3]
   137b8:	mov	r2, r0
   137bc:	mov	r0, r5
   137c0:	bl	1103c <__fprintf_chk@plt>
   137c4:	mov	r0, r4
   137c8:	bl	10fdc <exit@plt>
   137cc:	mov	r2, #5
   137d0:	ldr	r1, [pc, #1236]	; 13cac <__assert_fail@plt+0x2bb0>
   137d4:	bl	10ef8 <dcgettext@plt>
   137d8:	ldr	r6, [pc, #1224]	; 13ca8 <__assert_fail@plt+0x2bac>
   137dc:	ldr	r5, [pc, #1228]	; 13cb0 <__assert_fail@plt+0x2bb4>
   137e0:	ldr	r2, [r6]
   137e4:	mov	r1, r0
   137e8:	mov	r0, #1
   137ec:	bl	11024 <__printf_chk@plt>
   137f0:	mov	r2, #5
   137f4:	ldr	r1, [pc, #1208]	; 13cb4 <__assert_fail@plt+0x2bb8>
   137f8:	mov	r0, r4
   137fc:	bl	10ef8 <dcgettext@plt>
   13800:	ldr	r1, [r5]
   13804:	bl	10e44 <fputs_unlocked@plt>
   13808:	mov	r2, #5
   1380c:	ldr	r1, [pc, #1188]	; 13cb8 <__assert_fail@plt+0x2bbc>
   13810:	mov	r0, r4
   13814:	bl	10ef8 <dcgettext@plt>
   13818:	ldr	r1, [r5]
   1381c:	bl	10e44 <fputs_unlocked@plt>
   13820:	mov	r2, #5
   13824:	ldr	r1, [pc, #1168]	; 13cbc <__assert_fail@plt+0x2bc0>
   13828:	mov	r0, r4
   1382c:	bl	10ef8 <dcgettext@plt>
   13830:	ldr	r1, [r5]
   13834:	bl	10e44 <fputs_unlocked@plt>
   13838:	mov	r2, #5
   1383c:	ldr	r1, [pc, #1148]	; 13cc0 <__assert_fail@plt+0x2bc4>
   13840:	mov	r0, r4
   13844:	bl	10ef8 <dcgettext@plt>
   13848:	ldr	r1, [r5]
   1384c:	bl	10e44 <fputs_unlocked@plt>
   13850:	mov	r2, #5
   13854:	ldr	r1, [pc, #1128]	; 13cc4 <__assert_fail@plt+0x2bc8>
   13858:	mov	r0, r4
   1385c:	bl	10ef8 <dcgettext@plt>
   13860:	ldr	r1, [r5]
   13864:	bl	10e44 <fputs_unlocked@plt>
   13868:	mov	r2, #5
   1386c:	ldr	r1, [pc, #1108]	; 13cc8 <__assert_fail@plt+0x2bcc>
   13870:	mov	r0, r4
   13874:	bl	10ef8 <dcgettext@plt>
   13878:	ldr	r1, [r5]
   1387c:	bl	10e44 <fputs_unlocked@plt>
   13880:	mov	r2, #5
   13884:	ldr	r1, [pc, #1088]	; 13ccc <__assert_fail@plt+0x2bd0>
   13888:	mov	r0, r4
   1388c:	bl	10ef8 <dcgettext@plt>
   13890:	ldr	r1, [r5]
   13894:	bl	10e44 <fputs_unlocked@plt>
   13898:	mov	r2, #5
   1389c:	ldr	r1, [pc, #1068]	; 13cd0 <__assert_fail@plt+0x2bd4>
   138a0:	mov	r0, r4
   138a4:	bl	10ef8 <dcgettext@plt>
   138a8:	ldr	r1, [r5]
   138ac:	bl	10e44 <fputs_unlocked@plt>
   138b0:	mov	r2, #5
   138b4:	ldr	r1, [pc, #1048]	; 13cd4 <__assert_fail@plt+0x2bd8>
   138b8:	mov	r0, r4
   138bc:	bl	10ef8 <dcgettext@plt>
   138c0:	ldr	r1, [r5]
   138c4:	bl	10e44 <fputs_unlocked@plt>
   138c8:	mov	r2, #5
   138cc:	ldr	r1, [pc, #1028]	; 13cd8 <__assert_fail@plt+0x2bdc>
   138d0:	mov	r0, r4
   138d4:	bl	10ef8 <dcgettext@plt>
   138d8:	ldr	r1, [r5]
   138dc:	bl	10e44 <fputs_unlocked@plt>
   138e0:	mov	r2, #5
   138e4:	ldr	r1, [pc, #1008]	; 13cdc <__assert_fail@plt+0x2be0>
   138e8:	mov	r0, r4
   138ec:	bl	10ef8 <dcgettext@plt>
   138f0:	ldr	r1, [r5]
   138f4:	bl	10e44 <fputs_unlocked@plt>
   138f8:	mov	r2, #5
   138fc:	ldr	r1, [pc, #988]	; 13ce0 <__assert_fail@plt+0x2be4>
   13900:	mov	r0, r4
   13904:	bl	10ef8 <dcgettext@plt>
   13908:	ldr	r1, [r5]
   1390c:	bl	10e44 <fputs_unlocked@plt>
   13910:	mov	r2, #5
   13914:	ldr	r1, [pc, #968]	; 13ce4 <__assert_fail@plt+0x2be8>
   13918:	mov	r0, r4
   1391c:	bl	10ef8 <dcgettext@plt>
   13920:	ldr	r1, [r5]
   13924:	bl	10e44 <fputs_unlocked@plt>
   13928:	mov	r2, #5
   1392c:	ldr	r1, [pc, #948]	; 13ce8 <__assert_fail@plt+0x2bec>
   13930:	mov	r0, r4
   13934:	bl	10ef8 <dcgettext@plt>
   13938:	ldr	r1, [r5]
   1393c:	bl	10e44 <fputs_unlocked@plt>
   13940:	mov	r2, #5
   13944:	ldr	r1, [pc, #928]	; 13cec <__assert_fail@plt+0x2bf0>
   13948:	mov	r0, r4
   1394c:	bl	10ef8 <dcgettext@plt>
   13950:	ldr	r1, [r5]
   13954:	bl	10e44 <fputs_unlocked@plt>
   13958:	mov	r2, #5
   1395c:	ldr	r1, [pc, #908]	; 13cf0 <__assert_fail@plt+0x2bf4>
   13960:	mov	r0, r4
   13964:	bl	10ef8 <dcgettext@plt>
   13968:	ldr	r1, [r5]
   1396c:	bl	10e44 <fputs_unlocked@plt>
   13970:	mov	r2, #5
   13974:	ldr	r1, [pc, #888]	; 13cf4 <__assert_fail@plt+0x2bf8>
   13978:	mov	r0, r4
   1397c:	bl	10ef8 <dcgettext@plt>
   13980:	ldr	r1, [r5]
   13984:	bl	10e44 <fputs_unlocked@plt>
   13988:	mov	r2, #5
   1398c:	ldr	r1, [pc, #868]	; 13cf8 <__assert_fail@plt+0x2bfc>
   13990:	mov	r0, r4
   13994:	bl	10ef8 <dcgettext@plt>
   13998:	ldr	r1, [r5]
   1399c:	bl	10e44 <fputs_unlocked@plt>
   139a0:	mov	r2, #5
   139a4:	ldr	r1, [pc, #848]	; 13cfc <__assert_fail@plt+0x2c00>
   139a8:	mov	r0, r4
   139ac:	bl	10ef8 <dcgettext@plt>
   139b0:	ldr	r1, [r5]
   139b4:	bl	10e44 <fputs_unlocked@plt>
   139b8:	mov	r2, #5
   139bc:	ldr	r1, [pc, #828]	; 13d00 <__assert_fail@plt+0x2c04>
   139c0:	mov	r0, r4
   139c4:	bl	10ef8 <dcgettext@plt>
   139c8:	ldr	r1, [r5]
   139cc:	bl	10e44 <fputs_unlocked@plt>
   139d0:	mov	r2, #5
   139d4:	ldr	r1, [pc, #808]	; 13d04 <__assert_fail@plt+0x2c08>
   139d8:	mov	r0, r4
   139dc:	bl	10ef8 <dcgettext@plt>
   139e0:	ldr	r1, [r5]
   139e4:	bl	10e44 <fputs_unlocked@plt>
   139e8:	mov	r2, #5
   139ec:	ldr	r1, [pc, #788]	; 13d08 <__assert_fail@plt+0x2c0c>
   139f0:	mov	r0, r4
   139f4:	bl	10ef8 <dcgettext@plt>
   139f8:	ldr	r1, [r5]
   139fc:	bl	10e44 <fputs_unlocked@plt>
   13a00:	mov	r2, #5
   13a04:	ldr	r1, [pc, #768]	; 13d0c <__assert_fail@plt+0x2c10>
   13a08:	mov	r0, r4
   13a0c:	bl	10ef8 <dcgettext@plt>
   13a10:	ldr	r1, [r5]
   13a14:	bl	10e44 <fputs_unlocked@plt>
   13a18:	mov	r2, #5
   13a1c:	ldr	r1, [pc, #748]	; 13d10 <__assert_fail@plt+0x2c14>
   13a20:	mov	r0, r4
   13a24:	bl	10ef8 <dcgettext@plt>
   13a28:	ldr	r1, [r5]
   13a2c:	bl	10e44 <fputs_unlocked@plt>
   13a30:	mov	r2, #5
   13a34:	ldr	r1, [pc, #728]	; 13d14 <__assert_fail@plt+0x2c18>
   13a38:	mov	r0, r4
   13a3c:	bl	10ef8 <dcgettext@plt>
   13a40:	ldr	r1, [r5]
   13a44:	bl	10e44 <fputs_unlocked@plt>
   13a48:	mov	r2, #5
   13a4c:	ldr	r1, [pc, #708]	; 13d18 <__assert_fail@plt+0x2c1c>
   13a50:	mov	r0, r4
   13a54:	bl	10ef8 <dcgettext@plt>
   13a58:	ldr	r1, [r5]
   13a5c:	bl	10e44 <fputs_unlocked@plt>
   13a60:	mov	r2, #5
   13a64:	ldr	r1, [pc, #688]	; 13d1c <__assert_fail@plt+0x2c20>
   13a68:	mov	r0, r4
   13a6c:	bl	10ef8 <dcgettext@plt>
   13a70:	ldr	r1, [r5]
   13a74:	bl	10e44 <fputs_unlocked@plt>
   13a78:	mov	r2, #5
   13a7c:	ldr	r1, [pc, #668]	; 13d20 <__assert_fail@plt+0x2c24>
   13a80:	mov	r0, r4
   13a84:	bl	10ef8 <dcgettext@plt>
   13a88:	ldr	r2, [r6]
   13a8c:	mov	r1, r0
   13a90:	mov	r0, #1
   13a94:	bl	11024 <__printf_chk@plt>
   13a98:	mov	r2, #5
   13a9c:	ldr	r1, [pc, #640]	; 13d24 <__assert_fail@plt+0x2c28>
   13aa0:	mov	r0, r4
   13aa4:	bl	10ef8 <dcgettext@plt>
   13aa8:	ldr	r3, [r6]
   13aac:	ldr	r6, [pc, #628]	; 13d28 <__assert_fail@plt+0x2c2c>
   13ab0:	str	r3, [sp, #24]
   13ab4:	str	r3, [sp, #20]
   13ab8:	str	r3, [sp, #16]
   13abc:	str	r3, [sp, #12]
   13ac0:	str	r3, [sp, #8]
   13ac4:	str	r3, [sp, #4]
   13ac8:	str	r3, [sp]
   13acc:	mov	r2, r3
   13ad0:	mov	r1, r0
   13ad4:	mov	r0, #1
   13ad8:	bl	11024 <__printf_chk@plt>
   13adc:	ldm	r6!, {r0, r1, r2, r3}
   13ae0:	add	lr, sp, #32
   13ae4:	stmia	lr!, {r0, r1, r2, r3}
   13ae8:	ldm	r6!, {r0, r1, r2, r3}
   13aec:	ldr	ip, [sp, #32]
   13af0:	stmia	lr!, {r0, r1, r2, r3}
   13af4:	cmp	ip, #0
   13af8:	ldm	r6!, {r0, r1, r2, r3}
   13afc:	stmia	lr!, {r0, r1, r2, r3}
   13b00:	ldm	r6, {r0, r1}
   13b04:	addeq	r6, sp, #32
   13b08:	stm	lr, {r0, r1}
   13b0c:	beq	13b3c <__assert_fail@plt+0x2a40>
   13b10:	ldr	r7, [pc, #532]	; 13d2c <__assert_fail@plt+0x2c30>
   13b14:	add	r6, sp, #32
   13b18:	b	13b28 <__assert_fail@plt+0x2a2c>
   13b1c:	ldr	ip, [r6, #8]!
   13b20:	cmp	ip, #0
   13b24:	beq	13b3c <__assert_fail@plt+0x2a40>
   13b28:	mov	r1, ip
   13b2c:	mov	r0, r7
   13b30:	bl	10e68 <strcmp@plt>
   13b34:	cmp	r0, #0
   13b38:	bne	13b1c <__assert_fail@plt+0x2a20>
   13b3c:	ldr	r6, [r6, #4]
   13b40:	mov	r2, #5
   13b44:	cmp	r6, #0
   13b48:	ldr	r1, [pc, #480]	; 13d30 <__assert_fail@plt+0x2c34>
   13b4c:	beq	13bf4 <__assert_fail@plt+0x2af8>
   13b50:	mov	r0, #0
   13b54:	bl	10ef8 <dcgettext@plt>
   13b58:	ldr	r3, [pc, #468]	; 13d34 <__assert_fail@plt+0x2c38>
   13b5c:	ldr	r2, [pc, #468]	; 13d38 <__assert_fail@plt+0x2c3c>
   13b60:	mov	r1, r0
   13b64:	mov	r0, #1
   13b68:	bl	11024 <__printf_chk@plt>
   13b6c:	mov	r1, #0
   13b70:	mov	r0, #5
   13b74:	bl	1106c <setlocale@plt>
   13b78:	cmp	r0, #0
   13b7c:	ldreq	r7, [pc, #424]	; 13d2c <__assert_fail@plt+0x2c30>
   13b80:	beq	13b9c <__assert_fail@plt+0x2aa0>
   13b84:	mov	r2, #3
   13b88:	ldr	r1, [pc, #428]	; 13d3c <__assert_fail@plt+0x2c40>
   13b8c:	bl	110cc <strncmp@plt>
   13b90:	ldr	r7, [pc, #404]	; 13d2c <__assert_fail@plt+0x2c30>
   13b94:	cmp	r0, #0
   13b98:	bne	13c84 <__assert_fail@plt+0x2b88>
   13b9c:	mov	r2, #5
   13ba0:	ldr	r1, [pc, #408]	; 13d40 <__assert_fail@plt+0x2c44>
   13ba4:	mov	r0, #0
   13ba8:	bl	10ef8 <dcgettext@plt>
   13bac:	ldr	r3, [pc, #376]	; 13d2c <__assert_fail@plt+0x2c30>
   13bb0:	ldr	r2, [pc, #380]	; 13d34 <__assert_fail@plt+0x2c38>
   13bb4:	mov	r1, r0
   13bb8:	mov	r0, #1
   13bbc:	bl	11024 <__printf_chk@plt>
   13bc0:	mov	r2, #5
   13bc4:	ldr	r1, [pc, #376]	; 13d44 <__assert_fail@plt+0x2c48>
   13bc8:	mov	r0, #0
   13bcc:	bl	10ef8 <dcgettext@plt>
   13bd0:	ldr	r2, [pc, #368]	; 13d48 <__assert_fail@plt+0x2c4c>
   13bd4:	cmp	r6, r7
   13bd8:	ldr	r3, [pc, #364]	; 13d4c <__assert_fail@plt+0x2c50>
   13bdc:	movne	r3, r2
   13be0:	mov	r1, r0
   13be4:	mov	r2, r6
   13be8:	mov	r0, #1
   13bec:	bl	11024 <__printf_chk@plt>
   13bf0:	b	137c4 <__assert_fail@plt+0x26c8>
   13bf4:	mov	r0, r6
   13bf8:	bl	10ef8 <dcgettext@plt>
   13bfc:	ldr	r3, [pc, #304]	; 13d34 <__assert_fail@plt+0x2c38>
   13c00:	ldr	r2, [pc, #304]	; 13d38 <__assert_fail@plt+0x2c3c>
   13c04:	mov	r1, r0
   13c08:	mov	r0, #1
   13c0c:	bl	11024 <__printf_chk@plt>
   13c10:	mov	r1, r6
   13c14:	mov	r0, #5
   13c18:	bl	1106c <setlocale@plt>
   13c1c:	cmp	r0, #0
   13c20:	beq	13c38 <__assert_fail@plt+0x2b3c>
   13c24:	mov	r2, #3
   13c28:	ldr	r1, [pc, #268]	; 13d3c <__assert_fail@plt+0x2c40>
   13c2c:	bl	110cc <strncmp@plt>
   13c30:	cmp	r0, #0
   13c34:	bne	13c7c <__assert_fail@plt+0x2b80>
   13c38:	mov	r2, #5
   13c3c:	ldr	r1, [pc, #252]	; 13d40 <__assert_fail@plt+0x2c44>
   13c40:	mov	r0, #0
   13c44:	bl	10ef8 <dcgettext@plt>
   13c48:	ldr	r3, [pc, #220]	; 13d2c <__assert_fail@plt+0x2c30>
   13c4c:	ldr	r2, [pc, #224]	; 13d34 <__assert_fail@plt+0x2c38>
   13c50:	mov	r6, r3
   13c54:	mov	r1, r0
   13c58:	mov	r0, #1
   13c5c:	bl	11024 <__printf_chk@plt>
   13c60:	ldr	r1, [pc, #220]	; 13d44 <__assert_fail@plt+0x2c48>
   13c64:	mov	r2, #5
   13c68:	mov	r0, #0
   13c6c:	bl	10ef8 <dcgettext@plt>
   13c70:	ldr	r3, [pc, #212]	; 13d4c <__assert_fail@plt+0x2c50>
   13c74:	mov	r1, r0
   13c78:	b	13be4 <__assert_fail@plt+0x2ae8>
   13c7c:	ldr	r7, [pc, #168]	; 13d2c <__assert_fail@plt+0x2c30>
   13c80:	mov	r6, r7
   13c84:	mov	r2, #5
   13c88:	ldr	r1, [pc, #192]	; 13d50 <__assert_fail@plt+0x2c54>
   13c8c:	mov	r0, #0
   13c90:	bl	10ef8 <dcgettext@plt>
   13c94:	ldr	r1, [r5]
   13c98:	bl	10e44 <fputs_unlocked@plt>
   13c9c:	b	13b9c <__assert_fail@plt+0x2aa0>
   13ca0:	muleq	r2, r0, r1
   13ca4:	andeq	sp, r1, r4, asr #2
   13ca8:	andeq	pc, r2, ip, lsl #4
   13cac:	andeq	sp, r1, ip, ror #2
   13cb0:	muleq	r2, ip, r1
   13cb4:	muleq	r1, r0, r1
   13cb8:	andeq	sp, r1, r0, ror #3
   13cbc:	andeq	sp, r1, ip, lsr #4
   13cc0:	andeq	sp, r1, r8, ror #4
   13cc4:			; <UNDEFINED> instruction: 0x0001d2b0
   13cc8:	andeq	sp, r1, ip, lsr #6
   13ccc:	andeq	sp, r1, r4, lsr #7
   13cd0:	andeq	sp, r1, ip, lsl r4
   13cd4:	andeq	sp, r1, ip, ror #8
   13cd8:	andeq	sp, r1, r8, lsl #10
   13cdc:	muleq	r1, r0, r5
   13ce0:	andeq	sp, r1, r4, lsl r6
   13ce4:	andeq	sp, r1, r8, asr r7
   13ce8:	strdeq	sp, [r1], -r4
   13cec:	andeq	sp, r1, r0, ror r8
   13cf0:			; <UNDEFINED> instruction: 0x0001d8bc
   13cf4:	andeq	sp, r1, r4, lsl #18
   13cf8:	andeq	sp, r1, r4, asr #18
   13cfc:	andeq	sp, r1, r4, ror r9
   13d00:	andeq	sp, r1, ip, lsr #19
   13d04:			; <UNDEFINED> instruction: 0x0001d9bc
   13d08:	andeq	sp, r1, r4, lsl #20
   13d0c:	andeq	sp, r1, ip, lsr #21
   13d10:	andeq	sp, r1, ip, lsr #22
   13d14:	andeq	sp, r1, ip, lsr #23
   13d18:	andeq	sp, r1, ip, lsr #24
   13d1c:	andeq	sp, r1, r0, asr #26
   13d20:			; <UNDEFINED> instruction: 0x0001deb4
   13d24:	andeq	lr, r1, r0, asr r0
   13d28:	andeq	ip, r1, r4, ror #20
   13d2c:	andeq	sp, r1, ip, lsr r1
   13d30:	andeq	lr, r1, r0, lsl r2
   13d34:	andeq	lr, r1, r8, lsr #4
   13d38:	andeq	lr, r1, r0, asr r2
   13d3c:	andeq	lr, r1, r0, ror #4
   13d40:	andeq	lr, r1, ip, lsr #5
   13d44:	andeq	lr, r1, r8, asr #5
   13d48:	andeq	sp, r1, r8, lsr #24
   13d4c:	andeq	lr, r1, r8, lsr #13
   13d50:	andeq	lr, r1, r4, ror #4
   13d54:	andeq	r0, r0, r0
   13d58:	ldr	r2, [r0]
   13d5c:	ldr	r3, [r1]
   13d60:	cmp	r2, r3
   13d64:	blt	13d74 <__assert_fail@plt+0x2c78>
   13d68:	movgt	r0, #1
   13d6c:	movle	r0, #0
   13d70:	bx	lr
   13d74:	mvn	r0, #0
   13d78:	bx	lr
   13d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d80:	sub	sp, sp, #28
   13d84:	ands	r3, r1, #1
   13d88:	str	r1, [sp, #20]
   13d8c:	str	r3, [sp, #16]
   13d90:	mov	r6, r0
   13d94:	beq	13dbc <__assert_fail@plt+0x2cc0>
   13d98:	ldr	r1, [pc, #1104]	; 141f0 <__assert_fail@plt+0x30f4>
   13d9c:	bl	10e68 <strcmp@plt>
   13da0:	cmp	r0, #0
   13da4:	bne	14254 <__assert_fail@plt+0x3158>
   13da8:	add	r6, r6, #1
   13dac:	mov	r4, #1
   13db0:	mov	r5, #0
   13db4:	mov	r9, #1
   13db8:	b	13dc8 <__assert_fail@plt+0x2ccc>
   13dbc:	mov	r9, r3
   13dc0:	mov	r4, #0
   13dc4:	mov	r5, #0
   13dc8:	mov	r0, #1
   13dcc:	mov	r1, #0
   13dd0:	mov	r3, #0
   13dd4:	mov	sl, r9
   13dd8:	mov	r7, r9
   13ddc:	ldr	fp, [pc, #1040]	; 141f4 <__assert_fail@plt+0x30f8>
   13de0:	add	r6, r6, #1
   13de4:	strd	r0, [sp, #8]
   13de8:	mov	r8, r3
   13dec:	mov	r9, r3
   13df0:	b	13eb8 <__assert_fail@plt+0x2dbc>
   13df4:	cmp	r3, #44	; 0x2c
   13df8:	str	r1, [sp, #4]
   13dfc:	str	r3, [sp]
   13e00:	beq	13f0c <__assert_fail@plt+0x2e10>
   13e04:	bl	10fd0 <__ctype_b_loc@plt>
   13e08:	ldr	r3, [sp]
   13e0c:	ldr	r1, [sp, #4]
   13e10:	lsl	ip, r3, #1
   13e14:	ldr	r0, [r0]
   13e18:	ldrh	r0, [r0, ip]
   13e1c:	and	r0, r0, #1
   13e20:	cmp	r3, #0
   13e24:	orreq	r0, r0, #1
   13e28:	cmp	r0, #0
   13e2c:	bne	13f0c <__assert_fail@plt+0x2e10>
   13e30:	sub	ip, r3, #48	; 0x30
   13e34:	cmp	ip, #9
   13e38:	bhi	14500 <__assert_fail@plt+0x3404>
   13e3c:	cmp	r9, #0
   13e40:	beq	14198 <__assert_fail@plt+0x309c>
   13e44:	ldr	r3, [fp, #12]
   13e48:	cmp	r3, #0
   13e4c:	beq	14198 <__assert_fail@plt+0x309c>
   13e50:	add	r1, pc, #912	; 0x390
   13e54:	ldrd	r0, [r1]
   13e58:	cmp	r7, #0
   13e5c:	movne	r8, r7
   13e60:	moveq	sl, #1
   13e64:	cmp	r5, r1
   13e68:	cmpeq	r4, r0
   13e6c:	bhi	14448 <__assert_fail@plt+0x334c>
   13e70:	mov	lr, #10
   13e74:	umull	r0, r1, r4, lr
   13e78:	mla	r1, lr, r5, r1
   13e7c:	adds	r0, r0, ip
   13e80:	adc	r1, r1, ip, asr #31
   13e84:	and	ip, r0, r1
   13e88:	cmn	ip, #1
   13e8c:	movne	ip, #0
   13e90:	moveq	ip, #1
   13e94:	cmp	r1, r5
   13e98:	cmpeq	r0, r4
   13e9c:	orrcc	ip, ip, #1
   13ea0:	cmp	ip, #0
   13ea4:	bne	14448 <__assert_fail@plt+0x334c>
   13ea8:	mov	r4, r0
   13eac:	mov	r5, r1
   13eb0:	mov	r9, #1
   13eb4:	add	r6, r6, #1
   13eb8:	ldrb	r3, [r6, #-1]
   13ebc:	sub	r1, r6, #1
   13ec0:	cmp	r3, #45	; 0x2d
   13ec4:	bne	13df4 <__assert_fail@plt+0x2cf8>
   13ec8:	cmp	r7, #0
   13ecc:	bne	14428 <__assert_fail@plt+0x332c>
   13ed0:	orrs	r3, r4, r5
   13ed4:	movne	r9, #0
   13ed8:	andeq	r9, sl, #1
   13edc:	cmp	r9, #0
   13ee0:	bne	143f4 <__assert_fail@plt+0x32f8>
   13ee4:	cmp	sl, #0
   13ee8:	bne	14184 <__assert_fail@plt+0x3088>
   13eec:	mov	r2, #1
   13ef0:	mov	r3, #0
   13ef4:	mov	r4, #0
   13ef8:	mov	r5, r4
   13efc:	mov	r9, r4
   13f00:	mov	r7, #1
   13f04:	strd	r2, [sp, #8]
   13f08:	b	13eb4 <__assert_fail@plt+0x2db8>
   13f0c:	cmp	r7, #0
   13f10:	beq	13f98 <__assert_fail@plt+0x2e9c>
   13f14:	orr	sl, sl, r8
   13f18:	tst	sl, #255	; 0xff
   13f1c:	bne	14138 <__assert_fail@plt+0x303c>
   13f20:	ldr	r3, [sp, #16]
   13f24:	cmp	r3, #0
   13f28:	beq	14550 <__assert_fail@plt+0x3454>
   13f2c:	mov	r2, #1
   13f30:	mov	r3, #0
   13f34:	strd	r2, [sp, #8]
   13f38:	ldr	r3, [fp]
   13f3c:	ldr	r2, [fp, #4]
   13f40:	cmp	r3, r2
   13f44:	beq	14234 <__assert_fail@plt+0x3138>
   13f48:	ldr	ip, [fp, #8]
   13f4c:	lsl	r2, r3, #4
   13f50:	ldrd	r4, [sp, #8]
   13f54:	add	lr, ip, r2
   13f58:	mvn	r0, #0
   13f5c:	mvn	r1, #0
   13f60:	add	r3, r3, #1
   13f64:	strd	r4, [ip, r2]
   13f68:	str	r3, [fp]
   13f6c:	strd	r0, [lr, #8]
   13f70:	ldrb	r2, [r6, #-1]
   13f74:	cmp	r2, #0
   13f78:	beq	13fd8 <__assert_fail@plt+0x2edc>
   13f7c:	mov	r7, #0
   13f80:	mov	r4, r7
   13f84:	mov	r5, r7
   13f88:	mov	r8, r7
   13f8c:	mov	sl, r7
   13f90:	mov	r9, r7
   13f94:	b	13eb4 <__assert_fail@plt+0x2db8>
   13f98:	orrs	r3, r4, r5
   13f9c:	beq	143f4 <__assert_fail@plt+0x32f8>
   13fa0:	ldr	r3, [fp]
   13fa4:	ldr	r2, [fp, #4]
   13fa8:	cmp	r3, r2
   13fac:	beq	141a4 <__assert_fail@plt+0x30a8>
   13fb0:	ldr	ip, [fp, #8]
   13fb4:	lsl	r2, r3, #4
   13fb8:	add	r1, ip, r2
   13fbc:	add	r3, r3, #1
   13fc0:	strd	r4, [ip, r2]
   13fc4:	strd	r4, [r1, #8]
   13fc8:	str	r3, [fp]
   13fcc:	ldrb	r2, [r6, #-1]
   13fd0:	cmp	r2, #0
   13fd4:	bne	13f7c <__assert_fail@plt+0x2e80>
   13fd8:	mov	r1, r3
   13fdc:	cmp	r1, #0
   13fe0:	beq	144e0 <__assert_fail@plt+0x33e4>
   13fe4:	mov	r9, r2
   13fe8:	ldr	r3, [pc, #520]	; 141f8 <__assert_fail@plt+0x30fc>
   13fec:	mov	r2, #16
   13ff0:	mov	r0, ip
   13ff4:	bl	110a8 <qsort@plt>
   13ff8:	ldr	sl, [fp]
   13ffc:	ldr	r4, [fp, #8]
   14000:	mov	r2, sl
   14004:	mov	r3, r9
   14008:	cmp	r3, r2
   1400c:	mov	r8, r9
   14010:	str	r9, [sp]
   14014:	mov	r1, r4
   14018:	str	r9, [sp, #4]
   1401c:	bcs	140e4 <__assert_fail@plt+0x2fe8>
   14020:	add	r3, r3, #1
   14024:	cmp	r3, r2
   14028:	str	r3, [sp]
   1402c:	mov	ip, r3
   14030:	bcs	140cc <__assert_fail@plt+0x2fd0>
   14034:	ldr	lr, [sp, #4]
   14038:	lsl	r5, r3, #4
   1403c:	add	r3, r1, lr
   14040:	ldrd	r6, [r1, r5]
   14044:	ldrd	r8, [r3, #8]
   14048:	add	r0, r1, r5
   1404c:	cmp	r9, r7
   14050:	cmpeq	r8, r6
   14054:	bcc	140cc <__assert_fail@plt+0x2fd0>
   14058:	mvn	sl, #-268435456	; 0xf0000000
   1405c:	add	r4, lr, #32
   14060:	sub	sl, sl, ip
   14064:	b	14088 <__assert_fail@plt+0x2f8c>
   14068:	ldr	r3, [sp, #4]
   1406c:	ldrd	r6, [r1, r5]
   14070:	add	r3, r1, r3
   14074:	add	r0, r1, r5
   14078:	ldrd	r8, [r3, #8]
   1407c:	cmp	r7, r9
   14080:	cmpeq	r6, r8
   14084:	bhi	140cc <__assert_fail@plt+0x2fd0>
   14088:	ldrd	r6, [r0, #8]
   1408c:	add	r2, r2, sl
   14090:	add	r1, r1, r4
   14094:	cmp	r7, r9
   14098:	cmpeq	r6, r8
   1409c:	movcc	r6, r8
   140a0:	movcc	r7, r9
   140a4:	lsl	r2, r2, #4
   140a8:	strd	r6, [r3, #8]
   140ac:	bl	10e98 <memmove@plt>
   140b0:	ldr	r2, [fp]
   140b4:	ldr	r3, [sp]
   140b8:	sub	r2, r2, #1
   140bc:	cmp	r3, r2
   140c0:	str	r2, [fp]
   140c4:	ldr	r1, [fp, #8]
   140c8:	bcc	14068 <__assert_fail@plt+0x2f6c>
   140cc:	ldr	r3, [sp, #4]
   140d0:	add	r3, r3, #16
   140d4:	str	r3, [sp, #4]
   140d8:	ldr	r3, [sp]
   140dc:	cmp	r3, r2
   140e0:	bcc	14020 <__assert_fail@plt+0x2f24>
   140e4:	ldr	r3, [sp, #20]
   140e8:	mov	r4, r1
   140ec:	tst	r3, #2
   140f0:	mov	sl, r2
   140f4:	bne	14264 <__assert_fail@plt+0x3168>
   140f8:	add	sl, sl, #1
   140fc:	mov	r0, r4
   14100:	lsl	r1, sl, #4
   14104:	str	sl, [fp]
   14108:	bl	19f2c <__assert_fail@plt+0x8e30>
   1410c:	ldr	r3, [fp]
   14110:	mvn	r4, #0
   14114:	sub	r3, r3, #-268435455	; 0xf0000001
   14118:	mvn	r5, #0
   1411c:	lsl	r3, r3, #4
   14120:	add	r2, r0, r3
   14124:	str	r0, [fp, #8]
   14128:	strd	r4, [r2, #8]
   1412c:	strd	r4, [r0, r3]
   14130:	add	sp, sp, #28
   14134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14138:	cmp	r8, #0
   1413c:	beq	13f38 <__assert_fail@plt+0x2e3c>
   14140:	ldrd	r2, [sp, #8]
   14144:	cmp	r3, r5
   14148:	cmpeq	r2, r4
   1414c:	bhi	144b8 <__assert_fail@plt+0x33bc>
   14150:	ldr	r3, [fp]
   14154:	ldr	r2, [fp, #4]
   14158:	cmp	r3, r2
   1415c:	beq	141c4 <__assert_fail@plt+0x30c8>
   14160:	ldr	ip, [fp, #8]
   14164:	lsl	r2, r3, #4
   14168:	ldrd	r8, [sp, #8]
   1416c:	add	r1, ip, r2
   14170:	add	r3, r3, #1
   14174:	strd	r8, [ip, r2]
   14178:	strd	r4, [r1, #8]
   1417c:	str	r3, [fp]
   14180:	b	13f70 <__assert_fail@plt+0x2e74>
   14184:	strd	r4, [sp, #8]
   14188:	mov	r4, #0
   1418c:	mov	r5, r4
   14190:	mov	r7, sl
   14194:	b	13eb4 <__assert_fail@plt+0x2db8>
   14198:	mov	r3, r1
   1419c:	str	r1, [fp, #12]
   141a0:	b	13e50 <__assert_fail@plt+0x2d54>
   141a4:	mov	r2, #16
   141a8:	ldr	r1, [pc, #76]	; 141fc <__assert_fail@plt+0x3100>
   141ac:	ldr	r0, [fp, #8]
   141b0:	bl	1a0a0 <__assert_fail@plt+0x8fa4>
   141b4:	ldr	r3, [fp]
   141b8:	mov	ip, r0
   141bc:	str	r0, [fp, #8]
   141c0:	b	13fb4 <__assert_fail@plt+0x2eb8>
   141c4:	mov	r2, #16
   141c8:	ldr	r1, [pc, #44]	; 141fc <__assert_fail@plt+0x3100>
   141cc:	ldr	r0, [fp, #8]
   141d0:	bl	1a0a0 <__assert_fail@plt+0x8fa4>
   141d4:	ldr	r3, [fp]
   141d8:	mov	ip, r0
   141dc:	str	r0, [fp, #8]
   141e0:	b	14164 <__assert_fail@plt+0x3068>
   141e4:	nop			; (mov r0, r0)
   141e8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   141ec:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   141f0:			; <UNDEFINED> instruction: 0x0001e8bc
   141f4:	strdeq	pc, [r2], -r4
   141f8:	andeq	r3, r1, r8, asr sp
   141fc:	strdeq	pc, [r2], -r8
   14200:	andeq	lr, r1, r0, asr r8
   14204:	andeq	lr, r1, r0, lsl #17
   14208:	andeq	lr, r1, ip, lsl r8
   1420c:	andeq	lr, r1, ip, lsr r8
   14210:	ldrdeq	lr, [r1], -ip
   14214:	andeq	lr, r1, r8, ror #17
   14218:	andeq	lr, r1, r0, lsl r9
   1421c:	andeq	lr, r1, r0, asr #17
   14220:	andeq	lr, r1, ip, ror #18
   14224:	muleq	r1, r8, r9
   14228:	andeq	lr, r1, r0, lsr r9
   1422c:	andeq	lr, r1, r4, asr r9
   14230:	muleq	r1, ip, r8
   14234:	mov	r2, #16
   14238:	ldr	r1, [pc, #-68]	; 141fc <__assert_fail@plt+0x3100>
   1423c:	ldr	r0, [fp, #8]
   14240:	bl	1a0a0 <__assert_fail@plt+0x8fa4>
   14244:	ldr	r3, [fp]
   14248:	mov	ip, r0
   1424c:	str	r0, [fp, #8]
   14250:	b	13f4c <__assert_fail@plt+0x2e50>
   14254:	mov	r4, #0
   14258:	mov	r5, #0
   1425c:	mov	r9, #0
   14260:	b	13dc8 <__assert_fail@plt+0x2ccc>
   14264:	ldrd	r6, [r1]
   14268:	mov	r0, #0
   1426c:	str	r0, [fp, #8]
   14270:	cmp	r7, #0
   14274:	cmpeq	r6, #1
   14278:	str	r0, [fp]
   1427c:	str	r0, [fp, #4]
   14280:	bls	142c0 <__assert_fail@plt+0x31c4>
   14284:	mov	r2, #16
   14288:	ldr	r1, [pc, #-148]	; 141fc <__assert_fail@plt+0x3100>
   1428c:	bl	1a0a0 <__assert_fail@plt+0x8fa4>
   14290:	ldr	r3, [fp]
   14294:	subs	r6, r6, #1
   14298:	sbc	r7, r7, #0
   1429c:	lsl	r2, r3, #4
   142a0:	mov	r8, #1
   142a4:	mov	r9, #0
   142a8:	add	r3, r3, #1
   142ac:	add	r1, r0, r2
   142b0:	str	r0, [fp, #8]
   142b4:	strd	r8, [r0, r2]
   142b8:	strd	r6, [r1, #8]
   142bc:	str	r3, [fp]
   142c0:	cmp	sl, #1
   142c4:	movhi	r8, #1
   142c8:	movhi	r5, r4
   142cc:	strhi	r8, [sp]
   142d0:	bhi	14314 <__assert_fail@plt+0x3218>
   142d4:	b	14368 <__assert_fail@plt+0x326c>
   142d8:	ldr	r1, [fp, #8]
   142dc:	lsl	r2, r3, #4
   142e0:	add	r0, r1, r2
   142e4:	strd	r6, [r1, r2]
   142e8:	mov	r6, r8
   142ec:	mov	r7, r9
   142f0:	add	r3, r3, #1
   142f4:	strd	r6, [r0, #8]
   142f8:	str	r3, [fp]
   142fc:	ldr	r3, [sp]
   14300:	add	r5, r5, #16
   14304:	add	r3, r3, #1
   14308:	cmp	r3, sl
   1430c:	str	r3, [sp]
   14310:	beq	14368 <__assert_fail@plt+0x326c>
   14314:	ldrd	r6, [r5, #8]
   14318:	ldrd	r0, [r5, #16]
   1431c:	adds	r6, r6, #1
   14320:	adc	r7, r7, #0
   14324:	cmp	r7, r1
   14328:	cmpeq	r6, r0
   1432c:	beq	142fc <__assert_fail@plt+0x3200>
   14330:	ldr	r3, [fp]
   14334:	ldr	r2, [fp, #4]
   14338:	subs	r8, r0, #1
   1433c:	sbc	r9, r1, #0
   14340:	cmp	r3, r2
   14344:	bne	142d8 <__assert_fail@plt+0x31dc>
   14348:	ldr	r1, [pc, #-340]	; 141fc <__assert_fail@plt+0x3100>
   1434c:	mov	r2, #16
   14350:	ldr	r0, [fp, #8]
   14354:	bl	1a0a0 <__assert_fail@plt+0x8fa4>
   14358:	ldr	r3, [fp]
   1435c:	mov	r1, r0
   14360:	str	r0, [fp, #8]
   14364:	b	142dc <__assert_fail@plt+0x31e0>
   14368:	add	sl, r4, sl, lsl #4
   1436c:	mvn	r3, #0
   14370:	ldrd	r6, [sl, #-8]
   14374:	mvn	r2, #0
   14378:	cmp	r7, r3
   1437c:	cmpeq	r6, r2
   14380:	beq	143c0 <__assert_fail@plt+0x32c4>
   14384:	ldr	r3, [fp]
   14388:	ldr	r2, [fp, #4]
   1438c:	adds	r6, r6, #1
   14390:	adc	r7, r7, #0
   14394:	cmp	r3, r2
   14398:	beq	143d4 <__assert_fail@plt+0x32d8>
   1439c:	ldr	r1, [fp, #8]
   143a0:	lsl	r2, r3, #4
   143a4:	add	r0, r1, r2
   143a8:	strd	r6, [r1, r2]
   143ac:	mvn	r6, #0
   143b0:	mvn	r7, #0
   143b4:	add	r3, r3, #1
   143b8:	str	r3, [fp]
   143bc:	strd	r6, [r0, #8]
   143c0:	mov	r0, r4
   143c4:	bl	14c20 <__assert_fail@plt+0x3b24>
   143c8:	ldr	sl, [fp]
   143cc:	ldr	r4, [fp, #8]
   143d0:	b	140f8 <__assert_fail@plt+0x2ffc>
   143d4:	ldr	r1, [pc, #-480]	; 141fc <__assert_fail@plt+0x3100>
   143d8:	mov	r2, #16
   143dc:	ldr	r0, [fp, #8]
   143e0:	bl	1a0a0 <__assert_fail@plt+0x8fa4>
   143e4:	ldr	r3, [fp]
   143e8:	mov	r1, r0
   143ec:	str	r0, [fp, #8]
   143f0:	b	143a0 <__assert_fail@plt+0x32a4>
   143f4:	ldr	r3, [sp, #20]
   143f8:	mov	r0, r7
   143fc:	tst	r3, #4
   14400:	mov	r2, #5
   14404:	ldrne	r1, [pc, #-524]	; 14200 <__assert_fail@plt+0x3104>
   14408:	ldreq	r1, [pc, #-524]	; 14204 <__assert_fail@plt+0x3108>
   1440c:	bl	10ef8 <dcgettext@plt>
   14410:	mov	r1, #0
   14414:	mov	r2, r0
   14418:	mov	r0, r1
   1441c:	bl	10f7c <error@plt>
   14420:	mov	r0, #1
   14424:	bl	13784 <__assert_fail@plt+0x2688>
   14428:	ldr	r3, [sp, #20]
   1442c:	mov	r2, #5
   14430:	ands	r0, r3, #4
   14434:	movne	r0, #0
   14438:	ldrne	r1, [pc, #-568]	; 14208 <__assert_fail@plt+0x310c>
   1443c:	ldreq	r1, [pc, #-568]	; 1420c <__assert_fail@plt+0x3110>
   14440:	bl	10ef8 <dcgettext@plt>
   14444:	b	14410 <__assert_fail@plt+0x3314>
   14448:	ldr	r1, [pc, #-576]	; 14210 <__assert_fail@plt+0x3114>
   1444c:	mov	r0, r3
   14450:	str	r3, [sp]
   14454:	bl	110f0 <strspn@plt>
   14458:	ldr	r3, [sp]
   1445c:	mov	r1, r0
   14460:	mov	r0, r3
   14464:	bl	1a4c4 <__assert_fail@plt+0x93c8>
   14468:	ldr	r3, [sp, #20]
   1446c:	mov	r2, #5
   14470:	mov	r4, r0
   14474:	ands	r0, r3, #4
   14478:	movne	r0, #0
   1447c:	ldrne	r1, [pc, #-624]	; 14214 <__assert_fail@plt+0x3118>
   14480:	ldreq	r1, [pc, #-624]	; 14218 <__assert_fail@plt+0x311c>
   14484:	bl	10ef8 <dcgettext@plt>
   14488:	mov	r5, r0
   1448c:	mov	r0, r4
   14490:	bl	19334 <__assert_fail@plt+0x8238>
   14494:	mov	r1, #0
   14498:	mov	r2, r5
   1449c:	mov	r3, r0
   144a0:	mov	r0, r1
   144a4:	bl	10f7c <error@plt>
   144a8:	mov	r0, r4
   144ac:	bl	14c20 <__assert_fail@plt+0x3b24>
   144b0:	mov	r0, #1
   144b4:	bl	13784 <__assert_fail@plt+0x2688>
   144b8:	ldr	r1, [pc, #-676]	; 1421c <__assert_fail@plt+0x3120>
   144bc:	mov	r2, #5
   144c0:	mov	r0, #0
   144c4:	bl	10ef8 <dcgettext@plt>
   144c8:	mov	r1, #0
   144cc:	mov	r2, r0
   144d0:	mov	r0, r1
   144d4:	bl	10f7c <error@plt>
   144d8:	mov	r0, #1
   144dc:	bl	13784 <__assert_fail@plt+0x2688>
   144e0:	ldr	r3, [sp, #20]
   144e4:	mov	r0, r1
   144e8:	tst	r3, #4
   144ec:	mov	r2, #5
   144f0:	ldrne	r1, [pc, #-728]	; 14220 <__assert_fail@plt+0x3124>
   144f4:	ldreq	r1, [pc, #-728]	; 14224 <__assert_fail@plt+0x3128>
   144f8:	bl	10ef8 <dcgettext@plt>
   144fc:	b	14410 <__assert_fail@plt+0x3314>
   14500:	ldr	r3, [sp, #20]
   14504:	mov	sl, r1
   14508:	mov	r1, r0
   1450c:	ands	r0, r3, #4
   14510:	movne	r0, r1
   14514:	movne	r2, #5
   14518:	ldrne	r1, [pc, #-760]	; 14228 <__assert_fail@plt+0x312c>
   1451c:	moveq	r2, #5
   14520:	ldreq	r1, [pc, #-764]	; 1422c <__assert_fail@plt+0x3130>
   14524:	bl	10ef8 <dcgettext@plt>
   14528:	mov	r4, r0
   1452c:	mov	r0, sl
   14530:	bl	19334 <__assert_fail@plt+0x8238>
   14534:	mov	r1, #0
   14538:	mov	r2, r4
   1453c:	mov	r3, r0
   14540:	mov	r0, r1
   14544:	bl	10f7c <error@plt>
   14548:	mov	r0, #1
   1454c:	bl	13784 <__assert_fail@plt+0x2688>
   14550:	mov	r2, #5
   14554:	ldr	r1, [pc, #-812]	; 14230 <__assert_fail@plt+0x3134>
   14558:	b	144c0 <__assert_fail@plt+0x33c4>
   1455c:	mov	r0, #1
   14560:	b	13784 <__assert_fail@plt+0x2688>
   14564:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14568:	mov	r4, r1
   1456c:	sub	sp, sp, #12
   14570:	mov	r5, r2
   14574:	str	r2, [sp, #4]
   14578:	mov	r7, r3
   1457c:	mov	sl, r0
   14580:	bl	10fe8 <strlen@plt>
   14584:	ldr	fp, [r4]
   14588:	cmp	fp, #0
   1458c:	beq	146a0 <__assert_fail@plt+0x35a4>
   14590:	cmp	r5, #0
   14594:	mov	r8, r0
   14598:	mov	r3, r5
   1459c:	beq	14648 <__assert_fail@plt+0x354c>
   145a0:	mov	r2, #0
   145a4:	mov	r5, r2
   145a8:	mov	r6, r3
   145ac:	mvn	r9, #0
   145b0:	str	r2, [sp]
   145b4:	mov	r2, r8
   145b8:	mov	r1, sl
   145bc:	mov	r0, fp
   145c0:	bl	110cc <strncmp@plt>
   145c4:	cmp	r0, #0
   145c8:	mov	r0, fp
   145cc:	bne	1460c <__assert_fail@plt+0x3510>
   145d0:	bl	10fe8 <strlen@plt>
   145d4:	ldr	r3, [sp, #4]
   145d8:	mov	r2, r7
   145dc:	mov	r1, r6
   145e0:	cmp	r8, r0
   145e4:	mla	r0, r7, r9, r3
   145e8:	beq	14638 <__assert_fail@plt+0x353c>
   145ec:	cmn	r9, #1
   145f0:	moveq	r9, r5
   145f4:	beq	1460c <__assert_fail@plt+0x3510>
   145f8:	bl	10ee0 <memcmp@plt>
   145fc:	ldr	r3, [sp]
   14600:	cmp	r0, #0
   14604:	movne	r3, #1
   14608:	str	r3, [sp]
   1460c:	ldr	fp, [r4, #4]!
   14610:	add	r5, r5, #1
   14614:	cmp	fp, #0
   14618:	add	r6, r6, r7
   1461c:	bne	145b4 <__assert_fail@plt+0x34b8>
   14620:	ldr	r3, [sp]
   14624:	cmp	r3, #0
   14628:	mvnne	r9, #1
   1462c:	mov	r0, r9
   14630:	add	sp, sp, #12
   14634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14638:	mov	r9, r5
   1463c:	mov	r0, r9
   14640:	add	sp, sp, #12
   14644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14648:	mov	r6, r5
   1464c:	mvn	r9, #0
   14650:	mov	r2, r8
   14654:	mov	r1, sl
   14658:	mov	r0, fp
   1465c:	bl	110cc <strncmp@plt>
   14660:	cmp	r0, #0
   14664:	mov	r0, fp
   14668:	bne	14684 <__assert_fail@plt+0x3588>
   1466c:	bl	10fe8 <strlen@plt>
   14670:	cmp	r8, r0
   14674:	beq	14638 <__assert_fail@plt+0x353c>
   14678:	cmn	r9, #1
   1467c:	moveq	r9, r5
   14680:	movne	r6, #1
   14684:	ldr	fp, [r4, #4]!
   14688:	add	r5, r5, #1
   1468c:	cmp	fp, #0
   14690:	bne	14650 <__assert_fail@plt+0x3554>
   14694:	str	r6, [sp]
   14698:	mov	r3, r6
   1469c:	b	14624 <__assert_fail@plt+0x3528>
   146a0:	mvn	r9, #0
   146a4:	b	1462c <__assert_fail@plt+0x3530>
   146a8:	push	{r4, r5, r6, lr}
   146ac:	mov	r6, r0
   146b0:	ldr	r0, [r1]
   146b4:	cmp	r0, #0
   146b8:	beq	146f0 <__assert_fail@plt+0x35f4>
   146bc:	mov	r4, r1
   146c0:	mov	r5, #0
   146c4:	b	146d8 <__assert_fail@plt+0x35dc>
   146c8:	ldr	r0, [r4, #4]!
   146cc:	add	r5, r5, #1
   146d0:	cmp	r0, #0
   146d4:	beq	146f0 <__assert_fail@plt+0x35f4>
   146d8:	mov	r1, r6
   146dc:	bl	10e68 <strcmp@plt>
   146e0:	cmp	r0, #0
   146e4:	bne	146c8 <__assert_fail@plt+0x35cc>
   146e8:	mov	r0, r5
   146ec:	pop	{r4, r5, r6, pc}
   146f0:	mvn	r0, #0
   146f4:	pop	{r4, r5, r6, pc}
   146f8:	cmn	r2, #1
   146fc:	push	{r4, r5, r6, lr}
   14700:	mov	r2, #5
   14704:	sub	sp, sp, #8
   14708:	mov	r4, r1
   1470c:	mov	r5, r0
   14710:	ldreq	r1, [pc, #76]	; 14764 <__assert_fail@plt+0x3668>
   14714:	ldrne	r1, [pc, #76]	; 14768 <__assert_fail@plt+0x366c>
   14718:	mov	r0, #0
   1471c:	bl	10ef8 <dcgettext@plt>
   14720:	mov	r2, r4
   14724:	mov	r1, #8
   14728:	mov	r6, r0
   1472c:	mov	r0, #0
   14730:	bl	175e4 <__assert_fail@plt+0x64e8>
   14734:	mov	r1, r5
   14738:	mov	r4, r0
   1473c:	mov	r0, #1
   14740:	bl	19180 <__assert_fail@plt+0x8084>
   14744:	mov	r1, #0
   14748:	mov	r3, r4
   1474c:	mov	r2, r6
   14750:	str	r0, [sp]
   14754:	mov	r0, r1
   14758:	bl	10f7c <error@plt>
   1475c:	add	sp, sp, #8
   14760:	pop	{r4, r5, r6, pc}
   14764:	andeq	lr, r1, r0, asr #19
   14768:	ldrdeq	lr, [r1], -ip
   1476c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14770:	mov	r6, r0
   14774:	ldr	r9, [pc, #232]	; 14864 <__assert_fail@plt+0x3768>
   14778:	mov	r4, r1
   1477c:	mov	r7, r2
   14780:	ldr	r1, [pc, #224]	; 14868 <__assert_fail@plt+0x376c>
   14784:	mov	r2, #5
   14788:	mov	r0, #0
   1478c:	bl	10ef8 <dcgettext@plt>
   14790:	ldr	r1, [r9]
   14794:	bl	10e44 <fputs_unlocked@plt>
   14798:	ldr	fp, [r6]
   1479c:	cmp	fp, #0
   147a0:	movne	r8, #0
   147a4:	movne	r5, r8
   147a8:	movne	sl, #1
   147ac:	bne	147ec <__assert_fail@plt+0x36f0>
   147b0:	b	14830 <__assert_fail@plt+0x3734>
   147b4:	mov	r0, fp
   147b8:	ldr	r8, [r9]
   147bc:	bl	19334 <__assert_fail@plt+0x8238>
   147c0:	ldr	r2, [pc, #164]	; 1486c <__assert_fail@plt+0x3770>
   147c4:	mov	r1, sl
   147c8:	mov	r3, r0
   147cc:	mov	r0, r8
   147d0:	bl	1103c <__fprintf_chk@plt>
   147d4:	mov	r8, r4
   147d8:	ldr	fp, [r6, #4]!
   147dc:	add	r5, r5, #1
   147e0:	cmp	fp, #0
   147e4:	add	r4, r4, r7
   147e8:	beq	14830 <__assert_fail@plt+0x3734>
   147ec:	cmp	r5, #0
   147f0:	mov	r1, r4
   147f4:	mov	r2, r7
   147f8:	mov	r0, r8
   147fc:	beq	147b4 <__assert_fail@plt+0x36b8>
   14800:	bl	10ee0 <memcmp@plt>
   14804:	cmp	r0, #0
   14808:	bne	147b4 <__assert_fail@plt+0x36b8>
   1480c:	mov	r0, fp
   14810:	ldr	fp, [r9]
   14814:	bl	19334 <__assert_fail@plt+0x8238>
   14818:	ldr	r2, [pc, #80]	; 14870 <__assert_fail@plt+0x3774>
   1481c:	mov	r1, sl
   14820:	mov	r3, r0
   14824:	mov	r0, fp
   14828:	bl	1103c <__fprintf_chk@plt>
   1482c:	b	147d8 <__assert_fail@plt+0x36dc>
   14830:	ldr	r0, [r9]
   14834:	ldr	r3, [r0, #20]
   14838:	ldr	r2, [r0, #24]
   1483c:	cmp	r3, r2
   14840:	bcs	14858 <__assert_fail@plt+0x375c>
   14844:	add	r1, r3, #1
   14848:	mov	r2, #10
   1484c:	str	r1, [r0, #20]
   14850:	strb	r2, [r3]
   14854:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14858:	mov	r1, #10
   1485c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14860:	b	11060 <__overflow@plt>
   14864:	muleq	r2, r0, r1
   14868:	strdeq	lr, [r1], -ip
   1486c:	andeq	lr, r1, r4, lsl sl
   14870:	andeq	lr, r1, ip, lsl sl
   14874:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14878:	sub	sp, sp, #36	; 0x24
   1487c:	mov	r6, r1
   14880:	ldrb	ip, [sp, #80]	; 0x50
   14884:	str	r0, [sp, #28]
   14888:	str	r2, [sp, #24]
   1488c:	cmp	ip, #0
   14890:	str	ip, [sp, #20]
   14894:	str	r3, [sp, #12]
   14898:	ldr	r7, [sp, #72]	; 0x48
   1489c:	bne	14954 <__assert_fail@plt+0x3858>
   148a0:	ldr	r0, [r2]
   148a4:	cmp	r0, #0
   148a8:	movne	sl, ip
   148ac:	movne	r4, r2
   148b0:	bne	14938 <__assert_fail@plt+0x383c>
   148b4:	mov	r2, #5
   148b8:	ldr	r1, [pc, #512]	; 14ac0 <__assert_fail@plt+0x39c4>
   148bc:	mov	r0, #0
   148c0:	bl	10ef8 <dcgettext@plt>
   148c4:	mov	r4, r0
   148c8:	mov	r2, r6
   148cc:	mov	r1, #8
   148d0:	mov	r0, #0
   148d4:	bl	175e4 <__assert_fail@plt+0x64e8>
   148d8:	ldr	r1, [sp, #28]
   148dc:	mvn	sl, #0
   148e0:	mov	r5, r0
   148e4:	mov	r0, #1
   148e8:	bl	19180 <__assert_fail@plt+0x8084>
   148ec:	mov	r1, #0
   148f0:	mov	r3, r5
   148f4:	mov	r2, r4
   148f8:	str	r0, [sp]
   148fc:	mov	r0, r1
   14900:	bl	10f7c <error@plt>
   14904:	ldr	r0, [sp, #24]
   14908:	mov	r2, r7
   1490c:	ldr	r1, [sp, #12]
   14910:	bl	1476c <__assert_fail@plt+0x3670>
   14914:	ldr	r3, [sp, #76]	; 0x4c
   14918:	blx	r3
   1491c:	mov	r0, sl
   14920:	add	sp, sp, #36	; 0x24
   14924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14928:	ldr	r0, [r4, #4]!
   1492c:	add	sl, sl, #1
   14930:	cmp	r0, #0
   14934:	beq	148b4 <__assert_fail@plt+0x37b8>
   14938:	mov	r1, r6
   1493c:	bl	10e68 <strcmp@plt>
   14940:	cmp	r0, #0
   14944:	bne	14928 <__assert_fail@plt+0x382c>
   14948:	mov	r0, sl
   1494c:	add	sp, sp, #36	; 0x24
   14950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14954:	mov	r0, r1
   14958:	bl	10fe8 <strlen@plt>
   1495c:	ldr	r3, [sp, #24]
   14960:	ldr	fp, [r3]
   14964:	cmp	fp, #0
   14968:	mov	r9, r0
   1496c:	beq	148b4 <__assert_fail@plt+0x37b8>
   14970:	ldr	r2, [sp, #12]
   14974:	cmp	r2, #0
   14978:	beq	14a34 <__assert_fail@plt+0x3938>
   1497c:	mov	r1, #0
   14980:	mov	r4, r1
   14984:	mov	r8, r3
   14988:	mov	r5, r2
   1498c:	mvn	sl, #0
   14990:	str	r1, [sp, #16]
   14994:	mov	r2, r9
   14998:	mov	r1, r6
   1499c:	mov	r0, fp
   149a0:	bl	110cc <strncmp@plt>
   149a4:	cmp	r0, #0
   149a8:	mov	r0, fp
   149ac:	bne	149f0 <__assert_fail@plt+0x38f4>
   149b0:	bl	10fe8 <strlen@plt>
   149b4:	ldr	r3, [sp, #12]
   149b8:	mov	r2, r7
   149bc:	mov	r1, r5
   149c0:	cmp	r9, r0
   149c4:	mla	r0, r7, sl, r3
   149c8:	beq	14a24 <__assert_fail@plt+0x3928>
   149cc:	cmn	sl, #1
   149d0:	moveq	sl, r4
   149d4:	beq	149f0 <__assert_fail@plt+0x38f4>
   149d8:	bl	10ee0 <memcmp@plt>
   149dc:	ldr	r2, [sp, #20]
   149e0:	ldr	r3, [sp, #16]
   149e4:	cmp	r0, #0
   149e8:	movne	r3, r2
   149ec:	str	r3, [sp, #16]
   149f0:	ldr	fp, [r8, #4]!
   149f4:	add	r4, r4, #1
   149f8:	cmp	fp, #0
   149fc:	add	r5, r5, r7
   14a00:	bne	14994 <__assert_fail@plt+0x3898>
   14a04:	ldr	r3, [sp, #16]
   14a08:	cmp	r3, #0
   14a0c:	bne	14aa8 <__assert_fail@plt+0x39ac>
   14a10:	cmn	sl, #1
   14a14:	beq	148b4 <__assert_fail@plt+0x37b8>
   14a18:	mov	r0, sl
   14a1c:	add	sp, sp, #36	; 0x24
   14a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a24:	mov	sl, r4
   14a28:	mov	r0, sl
   14a2c:	add	sp, sp, #36	; 0x24
   14a30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a34:	mov	r5, r3
   14a38:	ldr	r3, [sp, #12]
   14a3c:	str	r7, [sp, #72]	; 0x48
   14a40:	mov	r7, fp
   14a44:	ldr	fp, [sp, #20]
   14a48:	mov	r8, r3
   14a4c:	mvn	sl, #0
   14a50:	mov	r4, r3
   14a54:	mov	r2, r9
   14a58:	mov	r1, r6
   14a5c:	mov	r0, r7
   14a60:	bl	110cc <strncmp@plt>
   14a64:	cmp	r0, #0
   14a68:	mov	r0, r7
   14a6c:	bne	14a88 <__assert_fail@plt+0x398c>
   14a70:	bl	10fe8 <strlen@plt>
   14a74:	cmp	r9, r0
   14a78:	beq	14a24 <__assert_fail@plt+0x3928>
   14a7c:	cmn	sl, #1
   14a80:	moveq	sl, r4
   14a84:	movne	r8, fp
   14a88:	ldr	r7, [r5, #4]!
   14a8c:	add	r4, r4, #1
   14a90:	cmp	r7, #0
   14a94:	bne	14a54 <__assert_fail@plt+0x3958>
   14a98:	str	r8, [sp, #16]
   14a9c:	ldr	r7, [sp, #72]	; 0x48
   14aa0:	mov	r3, r8
   14aa4:	b	14a08 <__assert_fail@plt+0x390c>
   14aa8:	mov	r2, #5
   14aac:	ldr	r1, [pc, #16]	; 14ac4 <__assert_fail@plt+0x39c8>
   14ab0:	mov	r0, #0
   14ab4:	bl	10ef8 <dcgettext@plt>
   14ab8:	mov	r4, r0
   14abc:	b	148c8 <__assert_fail@plt+0x37cc>
   14ac0:	andeq	lr, r1, r0, asr #19
   14ac4:	ldrdeq	lr, [r1], -ip
   14ac8:	push	{r4, r5, r6, r7, r8, lr}
   14acc:	ldr	r7, [r1]
   14ad0:	cmp	r7, #0
   14ad4:	beq	14b14 <__assert_fail@plt+0x3a18>
   14ad8:	mov	r6, r3
   14adc:	mov	r8, r0
   14ae0:	mov	r4, r2
   14ae4:	mov	r5, r1
   14ae8:	b	14af8 <__assert_fail@plt+0x39fc>
   14aec:	ldr	r7, [r5, #4]!
   14af0:	cmp	r7, #0
   14af4:	beq	14b14 <__assert_fail@plt+0x3a18>
   14af8:	mov	r1, r4
   14afc:	mov	r2, r6
   14b00:	mov	r0, r8
   14b04:	bl	10ee0 <memcmp@plt>
   14b08:	add	r4, r4, r6
   14b0c:	cmp	r0, #0
   14b10:	bne	14aec <__assert_fail@plt+0x39f0>
   14b14:	mov	r0, r7
   14b18:	pop	{r4, r5, r6, r7, r8, pc}
   14b1c:	ldr	r3, [pc, #4]	; 14b28 <__assert_fail@plt+0x3a2c>
   14b20:	str	r0, [r3]
   14b24:	bx	lr
   14b28:	andeq	pc, r2, r4, lsl #4
   14b2c:	ldr	r3, [pc, #4]	; 14b38 <__assert_fail@plt+0x3a3c>
   14b30:	strb	r0, [r3, #4]
   14b34:	bx	lr
   14b38:	andeq	pc, r2, r4, lsl #4
   14b3c:	ldr	r3, [pc, #192]	; 14c04 <__assert_fail@plt+0x3b08>
   14b40:	push	{r4, r5, r6, lr}
   14b44:	sub	sp, sp, #8
   14b48:	ldr	r0, [r3]
   14b4c:	bl	1bcf4 <__assert_fail@plt+0xabf8>
   14b50:	cmp	r0, #0
   14b54:	beq	14b78 <__assert_fail@plt+0x3a7c>
   14b58:	ldr	r4, [pc, #168]	; 14c08 <__assert_fail@plt+0x3b0c>
   14b5c:	ldrb	r3, [r4, #4]
   14b60:	cmp	r3, #0
   14b64:	beq	14b94 <__assert_fail@plt+0x3a98>
   14b68:	bl	11000 <__errno_location@plt>
   14b6c:	ldr	r3, [r0]
   14b70:	cmp	r3, #32
   14b74:	bne	14b94 <__assert_fail@plt+0x3a98>
   14b78:	ldr	r3, [pc, #140]	; 14c0c <__assert_fail@plt+0x3b10>
   14b7c:	ldr	r0, [r3]
   14b80:	bl	1bcf4 <__assert_fail@plt+0xabf8>
   14b84:	cmp	r0, #0
   14b88:	bne	14bdc <__assert_fail@plt+0x3ae0>
   14b8c:	add	sp, sp, #8
   14b90:	pop	{r4, r5, r6, pc}
   14b94:	mov	r2, #5
   14b98:	ldr	r1, [pc, #112]	; 14c10 <__assert_fail@plt+0x3b14>
   14b9c:	mov	r0, #0
   14ba0:	bl	10ef8 <dcgettext@plt>
   14ba4:	ldr	r4, [r4]
   14ba8:	cmp	r4, #0
   14bac:	mov	r5, r0
   14bb0:	beq	14be8 <__assert_fail@plt+0x3aec>
   14bb4:	bl	11000 <__errno_location@plt>
   14bb8:	ldr	r6, [r0]
   14bbc:	mov	r0, r4
   14bc0:	bl	180d4 <__assert_fail@plt+0x6fd8>
   14bc4:	mov	r1, r6
   14bc8:	str	r5, [sp]
   14bcc:	ldr	r2, [pc, #64]	; 14c14 <__assert_fail@plt+0x3b18>
   14bd0:	mov	r3, r0
   14bd4:	mov	r0, #0
   14bd8:	bl	10f7c <error@plt>
   14bdc:	ldr	r3, [pc, #52]	; 14c18 <__assert_fail@plt+0x3b1c>
   14be0:	ldr	r0, [r3]
   14be4:	bl	10eb0 <_exit@plt>
   14be8:	bl	11000 <__errno_location@plt>
   14bec:	mov	r3, r5
   14bf0:	ldr	r2, [pc, #36]	; 14c1c <__assert_fail@plt+0x3b20>
   14bf4:	ldr	r1, [r0]
   14bf8:	mov	r0, r4
   14bfc:	bl	10f7c <error@plt>
   14c00:	b	14bdc <__assert_fail@plt+0x3ae0>
   14c04:	muleq	r2, ip, r1
   14c08:	andeq	pc, r2, r4, lsl #4
   14c0c:	muleq	r2, r0, r1
   14c10:	andeq	lr, r1, r4, lsr #20
   14c14:	andeq	ip, r1, ip, lsr #30
   14c18:	andeq	pc, r2, ip, lsr r1	; <UNPREDICTABLE>
   14c1c:	ldrdeq	ip, [r1], -r0
   14c20:	push	{r4, r5, lr}
   14c24:	sub	sp, sp, #12
   14c28:	mov	r5, r0
   14c2c:	bl	11000 <__errno_location@plt>
   14c30:	mov	r2, #0
   14c34:	mov	r4, r0
   14c38:	ldr	r3, [r0]
   14c3c:	str	r2, [r4]
   14c40:	mov	r0, r5
   14c44:	str	r3, [sp]
   14c48:	str	r3, [sp, #4]
   14c4c:	bl	10ea4 <free@plt>
   14c50:	ldr	r3, [r4]
   14c54:	add	r2, sp, #8
   14c58:	cmp	r3, #0
   14c5c:	moveq	r3, #4
   14c60:	movne	r3, #0
   14c64:	add	r3, r2, r3
   14c68:	ldr	r3, [r3, #-8]
   14c6c:	str	r3, [r4]
   14c70:	add	sp, sp, #12
   14c74:	pop	{r4, r5, pc}
   14c78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c7c:	sub	sp, sp, #12
   14c80:	mov	r9, r3
   14c84:	mov	r4, r1
   14c88:	str	r2, [sp]
   14c8c:	mov	fp, r0
   14c90:	bl	10fe8 <strlen@plt>
   14c94:	ldr	r3, [sp, #52]	; 0x34
   14c98:	ands	r5, r3, #2
   14c9c:	mov	r7, r0
   14ca0:	beq	14e00 <__assert_fail@plt+0x3d04>
   14ca4:	mov	r8, #0
   14ca8:	mov	sl, r8
   14cac:	mov	r5, r7
   14cb0:	ldr	r2, [r9]
   14cb4:	cmp	r5, r2
   14cb8:	movhi	r7, r2
   14cbc:	movhi	r6, #0
   14cc0:	bls	14dc0 <__assert_fail@plt+0x3cc4>
   14cc4:	ldr	r3, [sp, #48]	; 0x30
   14cc8:	str	r2, [r9]
   14ccc:	cmp	r3, #0
   14cd0:	beq	14de4 <__assert_fail@plt+0x3ce8>
   14cd4:	cmp	r3, #1
   14cd8:	moveq	r9, #0
   14cdc:	bne	14df0 <__assert_fail@plt+0x3cf4>
   14ce0:	ldr	r3, [sp, #52]	; 0x34
   14ce4:	tst	r3, #4
   14ce8:	movne	r6, #0
   14cec:	tst	r3, #8
   14cf0:	ldr	r3, [sp]
   14cf4:	movne	r9, #0
   14cf8:	cmp	r3, #0
   14cfc:	beq	14d98 <__assert_fail@plt+0x3c9c>
   14d00:	sub	r5, r3, #1
   14d04:	add	r5, r4, r5
   14d08:	cmp	r6, #0
   14d0c:	cmpne	r4, r5
   14d10:	sub	r3, r6, #1
   14d14:	bcs	14d3c <__assert_fail@plt+0x3c40>
   14d18:	mov	r1, #32
   14d1c:	strb	r1, [r4], #1
   14d20:	cmp	r3, #0
   14d24:	cmpne	r5, r4
   14d28:	movhi	r2, #1
   14d2c:	movls	r2, #0
   14d30:	cmp	r2, #0
   14d34:	sub	r3, r3, #1
   14d38:	bne	14d1c <__assert_fail@plt+0x3c20>
   14d3c:	sub	r2, r5, r4
   14d40:	cmp	r2, r7
   14d44:	mov	r3, #0
   14d48:	movcs	r2, r7
   14d4c:	strb	r3, [r4]
   14d50:	mov	r1, fp
   14d54:	mov	r0, r4
   14d58:	bl	10fb8 <mempcpy@plt>
   14d5c:	sub	r3, r9, #1
   14d60:	cmp	r9, #0
   14d64:	cmpne	r5, r0
   14d68:	bls	14d90 <__assert_fail@plt+0x3c94>
   14d6c:	mov	r1, #32
   14d70:	strb	r1, [r0], #1
   14d74:	cmp	r3, #0
   14d78:	cmpne	r5, r0
   14d7c:	movhi	r2, #1
   14d80:	movls	r2, #0
   14d84:	cmp	r2, #0
   14d88:	sub	r3, r3, #1
   14d8c:	bne	14d70 <__assert_fail@plt+0x3c74>
   14d90:	mov	r3, #0
   14d94:	strb	r3, [r0]
   14d98:	add	r6, r6, r7
   14d9c:	add	r9, r6, r9
   14da0:	mov	r0, r8
   14da4:	bl	14c20 <__assert_fail@plt+0x3b24>
   14da8:	mov	r0, sl
   14dac:	bl	14c20 <__assert_fail@plt+0x3b24>
   14db0:	mov	r0, r9
   14db4:	add	sp, sp, #12
   14db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14dbc:	mov	sl, #0
   14dc0:	ldr	r3, [sp, #48]	; 0x30
   14dc4:	cmp	r5, r2
   14dc8:	movcs	r2, r5
   14dcc:	subcc	r6, r2, r5
   14dd0:	movcs	r6, #0
   14dd4:	movcc	r2, r5
   14dd8:	cmp	r3, #0
   14ddc:	str	r2, [r9]
   14de0:	bne	14cd4 <__assert_fail@plt+0x3bd8>
   14de4:	mov	r9, r6
   14de8:	ldr	r6, [sp, #48]	; 0x30
   14dec:	b	14ce0 <__assert_fail@plt+0x3be4>
   14df0:	lsr	r9, r6, #1
   14df4:	and	r6, r6, #1
   14df8:	add	r6, r6, r9
   14dfc:	b	14ce0 <__assert_fail@plt+0x3be4>
   14e00:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   14e04:	cmp	r0, #1
   14e08:	bls	14ca4 <__assert_fail@plt+0x3ba8>
   14e0c:	mov	r2, r5
   14e10:	mov	r1, fp
   14e14:	mov	r0, r5
   14e18:	bl	1109c <mbstowcs@plt>
   14e1c:	cmn	r0, #1
   14e20:	bne	14e40 <__assert_fail@plt+0x3d44>
   14e24:	ldr	r3, [sp, #52]	; 0x34
   14e28:	tst	r3, #1
   14e2c:	bne	14ca4 <__assert_fail@plt+0x3ba8>
   14e30:	mov	r8, #0
   14e34:	mov	sl, r8
   14e38:	mvn	r9, #0
   14e3c:	b	14da0 <__assert_fail@plt+0x3ca4>
   14e40:	add	sl, r0, #1
   14e44:	lsl	r6, sl, #2
   14e48:	mov	r0, r6
   14e4c:	bl	1bc6c <__assert_fail@plt+0xab70>
   14e50:	subs	r8, r0, #0
   14e54:	beq	14fc4 <__assert_fail@plt+0x3ec8>
   14e58:	mov	r2, sl
   14e5c:	mov	r1, fp
   14e60:	bl	1109c <mbstowcs@plt>
   14e64:	cmp	r0, #0
   14e68:	beq	14f70 <__assert_fail@plt+0x3e74>
   14e6c:	add	r6, r8, r6
   14e70:	str	r5, [r6, #-4]
   14e74:	ldr	r6, [r8]
   14e78:	cmp	r6, #0
   14e7c:	beq	14f7c <__assert_fail@plt+0x3e80>
   14e80:	mov	r3, r5
   14e84:	mov	r0, r6
   14e88:	mov	r5, r8
   14e8c:	mov	r6, r3
   14e90:	bl	10f1c <iswprint@plt>
   14e94:	cmp	r0, #0
   14e98:	moveq	r6, #1
   14e9c:	ldreq	r3, [pc, #324]	; 14fe8 <__assert_fail@plt+0x3eec>
   14ea0:	streq	r3, [r5]
   14ea4:	ldr	r0, [r5, #4]!
   14ea8:	cmp	r0, #0
   14eac:	bne	14e90 <__assert_fail@plt+0x3d94>
   14eb0:	str	r6, [sp, #4]
   14eb4:	mov	r1, sl
   14eb8:	mov	r6, r0
   14ebc:	mov	r0, r8
   14ec0:	bl	11078 <wcswidth@plt>
   14ec4:	ldr	r3, [sp, #4]
   14ec8:	cmp	r3, #0
   14ecc:	mov	r5, r0
   14ed0:	beq	14f8c <__assert_fail@plt+0x3e90>
   14ed4:	mov	r2, r6
   14ed8:	mov	r1, r8
   14edc:	mov	r0, r6
   14ee0:	bl	10f70 <wcstombs@plt>
   14ee4:	add	r3, r0, #1
   14ee8:	mov	r0, r3
   14eec:	str	r3, [sp, #4]
   14ef0:	bl	1bc6c <__assert_fail@plt+0xab70>
   14ef4:	subs	sl, r0, #0
   14ef8:	beq	14fb0 <__assert_fail@plt+0x3eb4>
   14efc:	ldr	r0, [r8]
   14f00:	ldr	r6, [r9]
   14f04:	cmp	r0, #0
   14f08:	beq	14fdc <__assert_fail@plt+0x3ee0>
   14f0c:	mov	r7, r8
   14f10:	mov	r5, #0
   14f14:	mov	fp, #1
   14f18:	b	14f2c <__assert_fail@plt+0x3e30>
   14f1c:	ldr	r0, [r7, #4]!
   14f20:	mov	r5, r3
   14f24:	cmp	r0, #0
   14f28:	beq	14f4c <__assert_fail@plt+0x3e50>
   14f2c:	bl	10e8c <wcwidth@plt>
   14f30:	cmn	r0, #1
   14f34:	moveq	r0, fp
   14f38:	ldreq	r3, [pc, #168]	; 14fe8 <__assert_fail@plt+0x3eec>
   14f3c:	streq	r3, [r7]
   14f40:	add	r3, r5, r0
   14f44:	cmp	r6, r3
   14f48:	bcs	14f1c <__assert_fail@plt+0x3e20>
   14f4c:	mov	r0, #0
   14f50:	str	r0, [r7]
   14f54:	ldr	r2, [sp, #4]
   14f58:	mov	r1, r8
   14f5c:	mov	r0, sl
   14f60:	bl	10f70 <wcstombs@plt>
   14f64:	mov	fp, sl
   14f68:	mov	r7, r0
   14f6c:	b	14cb0 <__assert_fail@plt+0x3bb4>
   14f70:	mov	sl, r0
   14f74:	mov	r5, r7
   14f78:	b	14cb0 <__assert_fail@plt+0x3bb4>
   14f7c:	mov	r1, sl
   14f80:	mov	r0, r8
   14f84:	bl	11078 <wcswidth@plt>
   14f88:	mov	r5, r0
   14f8c:	ldr	r2, [r9]
   14f90:	cmp	r2, r5
   14f94:	bcs	14dbc <__assert_fail@plt+0x3cc0>
   14f98:	add	r3, r7, #1
   14f9c:	mov	r0, r3
   14fa0:	str	r3, [sp, #4]
   14fa4:	bl	1bc6c <__assert_fail@plt+0xab70>
   14fa8:	subs	sl, r0, #0
   14fac:	bne	14efc <__assert_fail@plt+0x3e00>
   14fb0:	ldr	r3, [sp, #52]	; 0x34
   14fb4:	tst	r3, #1
   14fb8:	mvneq	r9, #0
   14fbc:	beq	14da0 <__assert_fail@plt+0x3ca4>
   14fc0:	b	14cb0 <__assert_fail@plt+0x3bb4>
   14fc4:	ldr	r3, [sp, #52]	; 0x34
   14fc8:	tst	r3, #1
   14fcc:	beq	14e30 <__assert_fail@plt+0x3d34>
   14fd0:	mov	r5, r7
   14fd4:	mov	sl, r8
   14fd8:	b	14cb0 <__assert_fail@plt+0x3bb4>
   14fdc:	mov	r5, r0
   14fe0:	mov	r7, r8
   14fe4:	b	14f4c <__assert_fail@plt+0x3e50>
   14fe8:	strdeq	pc, [r0], -sp
   14fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ff0:	sub	sp, sp, #44	; 0x2c
   14ff4:	mov	r4, #0
   14ff8:	str	r1, [sp, #4]
   14ffc:	ldr	r1, [r1]
   15000:	str	r2, [sp, #20]
   15004:	and	r2, r3, #2
   15008:	str	r2, [sp, #16]
   1500c:	mov	r5, r1
   15010:	and	r2, r3, #1
   15014:	mov	r6, #32
   15018:	str	r2, [sp, #36]	; 0x24
   1501c:	and	r2, r3, #4
   15020:	and	r3, r3, #8
   15024:	str	r1, [sp, #12]
   15028:	str	r0, [sp, #8]
   1502c:	str	r2, [sp, #24]
   15030:	str	r3, [sp, #28]
   15034:	add	r7, r5, #1
   15038:	mov	r1, r7
   1503c:	mov	r0, r4
   15040:	bl	1bc98 <__assert_fail@plt+0xab9c>
   15044:	subs	r8, r0, #0
   15048:	beq	15450 <__assert_fail@plt+0x4354>
   1504c:	ldr	r3, [sp, #4]
   15050:	ldr	r2, [sp, #12]
   15054:	ldr	r0, [sp, #8]
   15058:	str	r2, [r3]
   1505c:	bl	10fe8 <strlen@plt>
   15060:	ldr	r3, [sp, #16]
   15064:	cmp	r3, #0
   15068:	mov	r4, r0
   1506c:	beq	15204 <__assert_fail@plt+0x4108>
   15070:	mov	r3, #0
   15074:	ldr	r2, [sp, #12]
   15078:	ldr	r1, [sp, #8]
   1507c:	mov	r9, r0
   15080:	mov	sl, r3
   15084:	str	r3, [sp]
   15088:	cmp	r9, r2
   1508c:	movhi	r4, r2
   15090:	movhi	fp, #0
   15094:	bls	151e0 <__assert_fail@plt+0x40e4>
   15098:	ldr	r3, [sp, #20]
   1509c:	ldr	r0, [sp, #4]
   150a0:	cmp	r3, #0
   150a4:	str	r2, [r0]
   150a8:	beq	151f8 <__assert_fail@plt+0x40fc>
   150ac:	cmp	r3, #1
   150b0:	moveq	r3, #0
   150b4:	lsrne	r3, fp, #1
   150b8:	andne	fp, fp, #1
   150bc:	addne	fp, fp, r3
   150c0:	ldr	r2, [sp, #24]
   150c4:	cmp	r2, #0
   150c8:	ldr	r2, [sp, #28]
   150cc:	movne	fp, #0
   150d0:	cmp	r2, #0
   150d4:	movne	r3, #0
   150d8:	cmp	r7, #0
   150dc:	beq	151a0 <__assert_fail@plt+0x40a4>
   150e0:	add	r5, r8, r5
   150e4:	cmp	fp, #0
   150e8:	cmpne	r8, r5
   150ec:	mov	r0, r8
   150f0:	sub	r2, fp, #1
   150f4:	bcs	15118 <__assert_fail@plt+0x401c>
   150f8:	strb	r6, [r0], #1
   150fc:	cmp	r2, #0
   15100:	cmpne	r5, r0
   15104:	movhi	ip, #1
   15108:	movls	ip, #0
   1510c:	cmp	ip, #0
   15110:	sub	r2, r2, #1
   15114:	bne	150f8 <__assert_fail@plt+0x3ffc>
   15118:	sub	r2, r5, r0
   1511c:	cmp	r2, r4
   15120:	str	r3, [sp, #32]
   15124:	mov	r3, #0
   15128:	movcs	r2, r4
   1512c:	strb	r3, [r0]
   15130:	bl	10fb8 <mempcpy@plt>
   15134:	ldr	r3, [sp, #32]
   15138:	sub	r2, r3, #1
   1513c:	cmp	r3, #0
   15140:	cmpne	r5, r0
   15144:	bls	15168 <__assert_fail@plt+0x406c>
   15148:	strb	r6, [r0], #1
   1514c:	cmp	r2, #0
   15150:	cmpne	r5, r0
   15154:	movhi	r1, #1
   15158:	movls	r1, #0
   1515c:	cmp	r1, #0
   15160:	sub	r2, r2, #1
   15164:	bne	15148 <__assert_fail@plt+0x404c>
   15168:	mov	r2, #0
   1516c:	strb	r2, [r0]
   15170:	add	r5, fp, r4
   15174:	ldr	r0, [sp]
   15178:	add	r5, r5, r3
   1517c:	bl	14c20 <__assert_fail@plt+0x3b24>
   15180:	mov	r0, sl
   15184:	bl	14c20 <__assert_fail@plt+0x3b24>
   15188:	cmn	r5, #1
   1518c:	beq	15244 <__assert_fail@plt+0x4148>
   15190:	cmp	r7, r5
   15194:	bhi	151cc <__assert_fail@plt+0x40d0>
   15198:	mov	r4, r8
   1519c:	b	15034 <__assert_fail@plt+0x3f38>
   151a0:	ldr	r0, [sp]
   151a4:	add	r5, fp, r4
   151a8:	add	r5, r5, r3
   151ac:	bl	14c20 <__assert_fail@plt+0x3b24>
   151b0:	mov	r0, sl
   151b4:	bl	14c20 <__assert_fail@plt+0x3b24>
   151b8:	cmn	r5, #1
   151bc:	bne	15198 <__assert_fail@plt+0x409c>
   151c0:	mov	r0, r8
   151c4:	bl	14c20 <__assert_fail@plt+0x3b24>
   151c8:	mov	r8, #0
   151cc:	mov	r0, r8
   151d0:	add	sp, sp, #44	; 0x2c
   151d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151d8:	ldr	r1, [sp, #8]
   151dc:	mov	sl, #0
   151e0:	cmp	r2, r9
   151e4:	subhi	fp, r2, r9
   151e8:	movls	r2, r9
   151ec:	movhi	r2, r9
   151f0:	movls	fp, #0
   151f4:	b	15098 <__assert_fail@plt+0x3f9c>
   151f8:	mov	r3, fp
   151fc:	ldr	fp, [sp, #20]
   15200:	b	150c0 <__assert_fail@plt+0x3fc4>
   15204:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   15208:	cmp	r0, #1
   1520c:	bls	1525c <__assert_fail@plt+0x4160>
   15210:	mov	r2, #0
   15214:	ldr	r1, [sp, #8]
   15218:	ldr	r0, [sp, #16]
   1521c:	bl	1109c <mbstowcs@plt>
   15220:	cmn	r0, #1
   15224:	bne	1527c <__assert_fail@plt+0x4180>
   15228:	ldr	r3, [sp, #36]	; 0x24
   1522c:	cmp	r3, #0
   15230:	bne	1525c <__assert_fail@plt+0x4160>
   15234:	mov	r0, #0
   15238:	bl	14c20 <__assert_fail@plt+0x3b24>
   1523c:	mov	r0, #0
   15240:	bl	14c20 <__assert_fail@plt+0x3b24>
   15244:	mov	r0, r8
   15248:	bl	14c20 <__assert_fail@plt+0x3b24>
   1524c:	mov	r8, #0
   15250:	mov	r0, r8
   15254:	add	sp, sp, #44	; 0x2c
   15258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1525c:	ldr	r3, [sp, #4]
   15260:	mov	r9, r4
   15264:	ldr	r1, [sp, #8]
   15268:	ldr	r2, [r3]
   1526c:	mov	r3, #0
   15270:	str	r3, [sp]
   15274:	ldr	sl, [sp, #16]
   15278:	b	15088 <__assert_fail@plt+0x3f8c>
   1527c:	add	fp, r0, #1
   15280:	lsl	sl, fp, #2
   15284:	mov	r0, sl
   15288:	bl	1bc6c <__assert_fail@plt+0xab70>
   1528c:	subs	r3, r0, #0
   15290:	str	r3, [sp]
   15294:	beq	153c4 <__assert_fail@plt+0x42c8>
   15298:	mov	r2, fp
   1529c:	ldr	r1, [sp, #8]
   152a0:	bl	1109c <mbstowcs@plt>
   152a4:	cmp	r0, #0
   152a8:	beq	153d0 <__assert_fail@plt+0x42d4>
   152ac:	ldr	r3, [sp]
   152b0:	ldr	r2, [sp, #16]
   152b4:	add	sl, r3, sl
   152b8:	str	r2, [sl, #-4]
   152bc:	ldr	sl, [r3]
   152c0:	cmp	sl, #0
   152c4:	beq	153e8 <__assert_fail@plt+0x42ec>
   152c8:	mov	r9, r3
   152cc:	mov	r3, #0
   152d0:	mov	r0, sl
   152d4:	mov	sl, r3
   152d8:	bl	10f1c <iswprint@plt>
   152dc:	cmp	r0, #0
   152e0:	moveq	sl, #1
   152e4:	ldreq	r3, [pc, #376]	; 15464 <__assert_fail@plt+0x4368>
   152e8:	streq	r3, [r9]
   152ec:	ldr	r0, [r9, #4]!
   152f0:	cmp	r0, #0
   152f4:	bne	152d8 <__assert_fail@plt+0x41dc>
   152f8:	str	sl, [sp, #32]
   152fc:	mov	r1, fp
   15300:	mov	sl, r0
   15304:	ldr	r0, [sp]
   15308:	bl	11078 <wcswidth@plt>
   1530c:	ldr	r3, [sp, #32]
   15310:	cmp	r3, #0
   15314:	mov	r9, r0
   15318:	beq	153f8 <__assert_fail@plt+0x42fc>
   1531c:	mov	r0, sl
   15320:	mov	r2, #0
   15324:	ldr	r1, [sp]
   15328:	bl	10f70 <wcstombs@plt>
   1532c:	add	r3, r0, #1
   15330:	mov	r0, r3
   15334:	str	r3, [sp, #32]
   15338:	bl	1bc6c <__assert_fail@plt+0xab70>
   1533c:	subs	sl, r0, #0
   15340:	beq	15420 <__assert_fail@plt+0x4324>
   15344:	ldr	r3, [sp]
   15348:	ldr	r2, [sp, #4]
   1534c:	mov	fp, r3
   15350:	ldr	r0, [r3]
   15354:	ldr	r4, [r2]
   15358:	cmp	r0, #0
   1535c:	mov	r9, #0
   15360:	bne	15378 <__assert_fail@plt+0x427c>
   15364:	b	15398 <__assert_fail@plt+0x429c>
   15368:	ldr	r0, [fp, #4]!
   1536c:	mov	r9, r3
   15370:	cmp	r0, #0
   15374:	beq	15398 <__assert_fail@plt+0x429c>
   15378:	bl	10e8c <wcwidth@plt>
   1537c:	cmn	r0, #1
   15380:	moveq	r0, #1
   15384:	ldreq	r3, [pc, #216]	; 15464 <__assert_fail@plt+0x4368>
   15388:	streq	r3, [fp]
   1538c:	add	r3, r0, r9
   15390:	cmp	r4, r3
   15394:	bcs	15368 <__assert_fail@plt+0x426c>
   15398:	mov	r3, #0
   1539c:	str	r3, [fp]
   153a0:	ldr	r2, [sp, #32]
   153a4:	ldr	r1, [sp]
   153a8:	mov	r0, sl
   153ac:	bl	10f70 <wcstombs@plt>
   153b0:	ldr	r3, [sp, #4]
   153b4:	mov	r1, sl
   153b8:	ldr	r2, [r3]
   153bc:	mov	r4, r0
   153c0:	b	15088 <__assert_fail@plt+0x3f8c>
   153c4:	ldr	r3, [sp, #36]	; 0x24
   153c8:	cmp	r3, #0
   153cc:	beq	15234 <__assert_fail@plt+0x4138>
   153d0:	ldr	r3, [sp, #4]
   153d4:	mov	r9, r4
   153d8:	ldr	r1, [sp, #8]
   153dc:	ldr	r2, [r3]
   153e0:	mov	sl, #0
   153e4:	b	15088 <__assert_fail@plt+0x3f8c>
   153e8:	mov	r0, r3
   153ec:	mov	r1, fp
   153f0:	bl	11078 <wcswidth@plt>
   153f4:	mov	r9, r0
   153f8:	ldr	r3, [sp, #4]
   153fc:	ldr	r2, [r3]
   15400:	cmp	r2, r9
   15404:	bcs	151d8 <__assert_fail@plt+0x40dc>
   15408:	add	r3, r4, #1
   1540c:	mov	r0, r3
   15410:	str	r3, [sp, #32]
   15414:	bl	1bc6c <__assert_fail@plt+0xab70>
   15418:	subs	sl, r0, #0
   1541c:	bne	15344 <__assert_fail@plt+0x4248>
   15420:	ldr	r3, [sp, #36]	; 0x24
   15424:	cmp	r3, #0
   15428:	bne	15440 <__assert_fail@plt+0x4344>
   1542c:	ldr	r0, [sp]
   15430:	bl	14c20 <__assert_fail@plt+0x3b24>
   15434:	ldr	r0, [sp, #36]	; 0x24
   15438:	bl	14c20 <__assert_fail@plt+0x3b24>
   1543c:	b	15244 <__assert_fail@plt+0x4148>
   15440:	ldr	r3, [sp, #4]
   15444:	ldr	r1, [sp, #8]
   15448:	ldr	r2, [r3]
   1544c:	b	15088 <__assert_fail@plt+0x3f8c>
   15450:	mov	r0, r4
   15454:	bl	14c20 <__assert_fail@plt+0x3b24>
   15458:	mov	r0, r8
   1545c:	add	sp, sp, #44	; 0x2c
   15460:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15464:	strdeq	pc, [r0], -sp
   15468:	push	{r4, r5, r6, lr}
   1546c:	subs	r4, r0, #0
   15470:	beq	154e4 <__assert_fail@plt+0x43e8>
   15474:	mov	r1, #47	; 0x2f
   15478:	bl	11084 <strrchr@plt>
   1547c:	subs	r5, r0, #0
   15480:	beq	154d0 <__assert_fail@plt+0x43d4>
   15484:	add	r6, r5, #1
   15488:	sub	r3, r6, r4
   1548c:	cmp	r3, #6
   15490:	ble	154d0 <__assert_fail@plt+0x43d4>
   15494:	mov	r2, #7
   15498:	ldr	r1, [pc, #96]	; 15500 <__assert_fail@plt+0x4404>
   1549c:	sub	r0, r5, #6
   154a0:	bl	110cc <strncmp@plt>
   154a4:	cmp	r0, #0
   154a8:	bne	154d0 <__assert_fail@plt+0x43d4>
   154ac:	mov	r2, #3
   154b0:	ldr	r1, [pc, #76]	; 15504 <__assert_fail@plt+0x4408>
   154b4:	mov	r0, r6
   154b8:	bl	110cc <strncmp@plt>
   154bc:	cmp	r0, #0
   154c0:	movne	r4, r6
   154c4:	ldreq	r3, [pc, #60]	; 15508 <__assert_fail@plt+0x440c>
   154c8:	addeq	r4, r5, #4
   154cc:	streq	r4, [r3]
   154d0:	ldr	r2, [pc, #52]	; 1550c <__assert_fail@plt+0x4410>
   154d4:	ldr	r3, [pc, #52]	; 15510 <__assert_fail@plt+0x4414>
   154d8:	str	r4, [r2]
   154dc:	str	r4, [r3]
   154e0:	pop	{r4, r5, r6, pc}
   154e4:	ldr	r3, [pc, #40]	; 15514 <__assert_fail@plt+0x4418>
   154e8:	mov	r2, #55	; 0x37
   154ec:	mov	r1, #1
   154f0:	ldr	r3, [r3]
   154f4:	ldr	r0, [pc, #28]	; 15518 <__assert_fail@plt+0x441c>
   154f8:	bl	10f28 <fwrite@plt>
   154fc:	bl	110d8 <abort@plt>
   15500:	andeq	lr, r1, r8, ror #20
   15504:	andeq	lr, r1, r0, ror sl
   15508:	andeq	pc, r2, r0, lsl #3
   1550c:	andeq	pc, r2, ip, lsl #4
   15510:	andeq	pc, r2, r4, lsl #3
   15514:	muleq	r2, r0, r1
   15518:	andeq	lr, r1, r0, lsr sl
   1551c:	push	{r4, r5, r6, lr}
   15520:	mov	r4, r0
   15524:	mov	r5, r1
   15528:	bl	1bf10 <__assert_fail@plt+0xae14>
   1552c:	ldrb	r3, [r0]
   15530:	bic	r3, r3, #32
   15534:	cmp	r3, #85	; 0x55
   15538:	bne	15598 <__assert_fail@plt+0x449c>
   1553c:	ldrb	r3, [r0, #1]
   15540:	bic	r3, r3, #32
   15544:	cmp	r3, #84	; 0x54
   15548:	bne	155d4 <__assert_fail@plt+0x44d8>
   1554c:	ldrb	r3, [r0, #2]
   15550:	bic	r3, r3, #32
   15554:	cmp	r3, #70	; 0x46
   15558:	bne	155d4 <__assert_fail@plt+0x44d8>
   1555c:	ldrb	r3, [r0, #3]
   15560:	cmp	r3, #45	; 0x2d
   15564:	bne	155d4 <__assert_fail@plt+0x44d8>
   15568:	ldrb	r3, [r0, #4]
   1556c:	cmp	r3, #56	; 0x38
   15570:	bne	155d4 <__assert_fail@plt+0x44d8>
   15574:	ldrb	r3, [r0, #5]
   15578:	cmp	r3, #0
   1557c:	bne	155d4 <__assert_fail@plt+0x44d8>
   15580:	ldrb	r2, [r4]
   15584:	ldr	r3, [pc, #152]	; 15624 <__assert_fail@plt+0x4528>
   15588:	ldr	r0, [pc, #152]	; 15628 <__assert_fail@plt+0x452c>
   1558c:	cmp	r2, #96	; 0x60
   15590:	movne	r0, r3
   15594:	pop	{r4, r5, r6, pc}
   15598:	cmp	r3, #71	; 0x47
   1559c:	bne	155d4 <__assert_fail@plt+0x44d8>
   155a0:	ldrb	r3, [r0, #1]
   155a4:	bic	r3, r3, #32
   155a8:	cmp	r3, #66	; 0x42
   155ac:	bne	155d4 <__assert_fail@plt+0x44d8>
   155b0:	ldrb	r3, [r0, #2]
   155b4:	cmp	r3, #49	; 0x31
   155b8:	bne	155d4 <__assert_fail@plt+0x44d8>
   155bc:	ldrb	r3, [r0, #3]
   155c0:	cmp	r3, #56	; 0x38
   155c4:	bne	155d4 <__assert_fail@plt+0x44d8>
   155c8:	ldrb	r3, [r0, #4]
   155cc:	cmp	r3, #48	; 0x30
   155d0:	beq	155e8 <__assert_fail@plt+0x44ec>
   155d4:	ldr	r3, [pc, #80]	; 1562c <__assert_fail@plt+0x4530>
   155d8:	cmp	r5, #9
   155dc:	ldr	r0, [pc, #76]	; 15630 <__assert_fail@plt+0x4534>
   155e0:	movne	r0, r3
   155e4:	pop	{r4, r5, r6, pc}
   155e8:	ldrb	r3, [r0, #5]
   155ec:	cmp	r3, #51	; 0x33
   155f0:	bne	155d4 <__assert_fail@plt+0x44d8>
   155f4:	ldrb	r3, [r0, #6]
   155f8:	cmp	r3, #48	; 0x30
   155fc:	bne	155d4 <__assert_fail@plt+0x44d8>
   15600:	ldrb	r3, [r0, #7]
   15604:	cmp	r3, #0
   15608:	bne	155d4 <__assert_fail@plt+0x44d8>
   1560c:	ldrb	r2, [r4]
   15610:	ldr	r3, [pc, #28]	; 15634 <__assert_fail@plt+0x4538>
   15614:	ldr	r0, [pc, #28]	; 15638 <__assert_fail@plt+0x453c>
   15618:	cmp	r2, #96	; 0x60
   1561c:	movne	r0, r3
   15620:	pop	{r4, r5, r6, pc}
   15624:	andeq	lr, r1, ip, asr #21
   15628:	andeq	lr, r1, r8, asr #21
   1562c:	ldrdeq	lr, [r1], -ip
   15630:	ldrdeq	lr, [r1], -r8
   15634:	ldrdeq	lr, [r1], -r4
   15638:	ldrdeq	lr, [r1], -r0
   1563c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15640:	sub	sp, sp, #140	; 0x8c
   15644:	mov	r9, r1
   15648:	str	r3, [sp, #24]
   1564c:	mov	r3, #1
   15650:	mov	sl, r0
   15654:	str	r2, [sp, #44]	; 0x2c
   15658:	str	r3, [sp, #28]
   1565c:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   15660:	ldr	r3, [sp, #180]	; 0xb4
   15664:	mov	fp, r9
   15668:	mov	r9, sl
   1566c:	lsr	r3, r3, #1
   15670:	and	r3, r3, #1
   15674:	str	r3, [sp, #40]	; 0x28
   15678:	ldr	r3, [sp, #180]	; 0xb4
   1567c:	mov	r2, #0
   15680:	and	r3, r3, #4
   15684:	str	r3, [sp, #100]	; 0x64
   15688:	ldr	r3, [sp, #180]	; 0xb4
   1568c:	str	r2, [sp, #76]	; 0x4c
   15690:	and	r3, r3, #1
   15694:	str	r3, [sp, #96]	; 0x60
   15698:	str	r2, [sp, #36]	; 0x24
   1569c:	str	r2, [sp, #56]	; 0x38
   156a0:	str	r2, [sp, #68]	; 0x44
   156a4:	str	r2, [sp, #72]	; 0x48
   156a8:	str	r2, [sp, #84]	; 0x54
   156ac:	str	r0, [sp, #80]	; 0x50
   156b0:	ldr	r3, [sp, #176]	; 0xb0
   156b4:	cmp	r3, #10
   156b8:	ldrls	pc, [pc, r3, lsl #2]
   156bc:	b	16894 <__assert_fail@plt+0x5798>
   156c0:	andeq	r5, r1, ip, ror #13
   156c4:	andeq	r5, r1, ip, lsl #20
   156c8:	andeq	r5, r1, r4, ror #22
   156cc:	andeq	r5, r1, r0, asr #20
   156d0:			; <UNDEFINED> instruction: 0x00015bb8
   156d4:	muleq	r1, r8, fp
   156d8:	andeq	r5, r1, r0, ror #20
   156dc:	andeq	r5, r1, r4, lsl #21
   156e0:	andeq	r5, r1, ip, lsr #21
   156e4:	andeq	r5, r1, ip, lsr #21
   156e8:	andeq	r5, r1, ip, lsr #21
   156ec:	mov	r3, #0
   156f0:	ldr	r1, [sp, #56]	; 0x38
   156f4:	ldr	r2, [sp, #176]	; 0xb0
   156f8:	ldr	lr, [sp, #176]	; 0xb0
   156fc:	mov	r8, r3
   15700:	mov	ip, r3
   15704:	str	r3, [sp, #40]	; 0x28
   15708:	mov	r3, r1
   1570c:	cmp	r2, #2
   15710:	moveq	r3, #0
   15714:	andne	r3, r3, #1
   15718:	mov	r0, r3
   1571c:	str	r3, [sp, #92]	; 0x5c
   15720:	ldr	r3, [sp, #68]	; 0x44
   15724:	sub	lr, lr, #2
   15728:	adds	r2, r3, #0
   1572c:	movne	r2, #1
   15730:	and	r3, r1, ip
   15734:	and	r3, r2, r3
   15738:	clz	lr, lr
   1573c:	str	r3, [sp, #88]	; 0x58
   15740:	lsr	lr, lr, #5
   15744:	mov	r3, ip
   15748:	and	r3, r3, lr
   1574c:	mov	sl, #0
   15750:	and	r0, r2, r0
   15754:	str	r3, [sp, #64]	; 0x40
   15758:	eor	r3, r1, #1
   1575c:	str	lr, [sp, #52]	; 0x34
   15760:	str	r0, [sp, #48]	; 0x30
   15764:	str	r3, [sp, #60]	; 0x3c
   15768:	ldr	r3, [sp, #24]
   1576c:	cmn	r3, #1
   15770:	beq	15ca0 <__assert_fail@plt+0x4ba4>
   15774:	subs	r7, r3, sl
   15778:	movne	r7, #1
   1577c:	cmp	r7, #0
   15780:	beq	15cb8 <__assert_fail@plt+0x4bbc>
   15784:	ldr	r3, [sp, #48]	; 0x30
   15788:	cmp	r3, #0
   1578c:	beq	16024 <__assert_fail@plt+0x4f28>
   15790:	ldr	r2, [sp, #68]	; 0x44
   15794:	ldr	r1, [sp, #24]
   15798:	cmp	r2, #1
   1579c:	mov	r3, r2
   157a0:	movls	r3, #0
   157a4:	movhi	r3, #1
   157a8:	cmn	r1, #1
   157ac:	movne	r3, #0
   157b0:	cmp	r3, #0
   157b4:	add	r4, sl, r2
   157b8:	beq	157c8 <__assert_fail@plt+0x46cc>
   157bc:	ldr	r0, [sp, #44]	; 0x2c
   157c0:	bl	10fe8 <strlen@plt>
   157c4:	str	r0, [sp, #24]
   157c8:	ldr	r3, [sp, #24]
   157cc:	cmp	r3, r4
   157d0:	ldr	r3, [sp, #44]	; 0x2c
   157d4:	add	r5, r3, sl
   157d8:	bcc	1602c <__assert_fail@plt+0x4f30>
   157dc:	mov	r0, r5
   157e0:	ldr	r2, [sp, #68]	; 0x44
   157e4:	ldr	r1, [sp, #72]	; 0x48
   157e8:	bl	10ee0 <memcmp@plt>
   157ec:	cmp	r0, #0
   157f0:	bne	1602c <__assert_fail@plt+0x4f30>
   157f4:	ldr	r3, [sp, #40]	; 0x28
   157f8:	cmp	r3, #0
   157fc:	bne	169e8 <__assert_fail@plt+0x58ec>
   15800:	ldrb	r4, [r5]
   15804:	cmp	r4, #126	; 0x7e
   15808:	ldrls	pc, [pc, r4, lsl #2]
   1580c:	b	16924 <__assert_fail@plt+0x5828>
   15810:	andeq	r5, r1, r4, ror #29
   15814:	andeq	r6, r1, r4, lsr #18
   15818:	andeq	r6, r1, r4, lsr #18
   1581c:	andeq	r6, r1, r4, lsr #18
   15820:	andeq	r6, r1, r4, lsr #18
   15824:	andeq	r6, r1, r4, lsr #18
   15828:	andeq	r6, r1, r4, lsr #18
   1582c:	ldrdeq	r5, [r1], -r0
   15830:			; <UNDEFINED> instruction: 0x00015ebc
   15834:	muleq	r1, r8, lr
   15838:	andeq	r5, r1, r8, ror lr
   1583c:	andeq	r5, r1, r8, lsr #29
   15840:	andeq	r5, r1, r0, ror #27
   15844:	andeq	r6, r1, r4, lsl r0
   15848:	andeq	r6, r1, r4, lsr #18
   1584c:	andeq	r6, r1, r4, lsr #18
   15850:	andeq	r6, r1, r4, lsr #18
   15854:	andeq	r6, r1, r4, lsr #18
   15858:	andeq	r6, r1, r4, lsr #18
   1585c:	andeq	r6, r1, r4, lsr #18
   15860:	andeq	r6, r1, r4, lsr #18
   15864:	andeq	r6, r1, r4, lsr #18
   15868:	andeq	r6, r1, r4, lsr #18
   1586c:	andeq	r6, r1, r4, lsr #18
   15870:	andeq	r6, r1, r4, lsr #18
   15874:	andeq	r6, r1, r4, lsr #18
   15878:	andeq	r6, r1, r4, lsr #18
   1587c:	andeq	r6, r1, r4, lsr #18
   15880:	andeq	r6, r1, r4, lsr #18
   15884:	andeq	r6, r1, r4, lsr #18
   15888:	andeq	r6, r1, r4, lsr #18
   1588c:	andeq	r6, r1, r4, lsr #18
   15890:	andeq	r6, r1, r4
   15894:	andeq	r5, r1, r4, ror #31
   15898:	andeq	r5, r1, r4, ror #31
   1589c:	andeq	r5, r1, r4, asr #31
   158a0:	andeq	r5, r1, r4, ror #31
   158a4:	ldrdeq	r5, [r1], -r0
   158a8:	andeq	r5, r1, r4, ror #31
   158ac:	andeq	r5, r1, ip, lsr #27
   158b0:	andeq	r5, r1, r4, ror #31
   158b4:	andeq	r5, r1, r4, ror #31
   158b8:	andeq	r5, r1, r4, ror #31
   158bc:	ldrdeq	r5, [r1], -r0
   158c0:	ldrdeq	r5, [r1], -r0
   158c4:	ldrdeq	r5, [r1], -r0
   158c8:	ldrdeq	r5, [r1], -r0
   158cc:	ldrdeq	r5, [r1], -r0
   158d0:	ldrdeq	r5, [r1], -r0
   158d4:	ldrdeq	r5, [r1], -r0
   158d8:	ldrdeq	r5, [r1], -r0
   158dc:	ldrdeq	r5, [r1], -r0
   158e0:	ldrdeq	r5, [r1], -r0
   158e4:	ldrdeq	r5, [r1], -r0
   158e8:	ldrdeq	r5, [r1], -r0
   158ec:	ldrdeq	r5, [r1], -r0
   158f0:	ldrdeq	r5, [r1], -r0
   158f4:	ldrdeq	r5, [r1], -r0
   158f8:	ldrdeq	r5, [r1], -r0
   158fc:	andeq	r5, r1, r4, ror #31
   15900:	andeq	r5, r1, r4, ror #31
   15904:	andeq	r5, r1, r4, ror #31
   15908:	andeq	r5, r1, r4, ror #31
   1590c:	andeq	r5, r1, ip, asr sp
   15910:	andeq	r6, r1, r4, lsr #18
   15914:	ldrdeq	r5, [r1], -r0
   15918:	ldrdeq	r5, [r1], -r0
   1591c:	ldrdeq	r5, [r1], -r0
   15920:	ldrdeq	r5, [r1], -r0
   15924:	ldrdeq	r5, [r1], -r0
   15928:	ldrdeq	r5, [r1], -r0
   1592c:	ldrdeq	r5, [r1], -r0
   15930:	ldrdeq	r5, [r1], -r0
   15934:	ldrdeq	r5, [r1], -r0
   15938:	ldrdeq	r5, [r1], -r0
   1593c:	ldrdeq	r5, [r1], -r0
   15940:	ldrdeq	r5, [r1], -r0
   15944:	ldrdeq	r5, [r1], -r0
   15948:	ldrdeq	r5, [r1], -r0
   1594c:	ldrdeq	r5, [r1], -r0
   15950:	ldrdeq	r5, [r1], -r0
   15954:	ldrdeq	r5, [r1], -r0
   15958:	ldrdeq	r5, [r1], -r0
   1595c:	ldrdeq	r5, [r1], -r0
   15960:	ldrdeq	r5, [r1], -r0
   15964:	ldrdeq	r5, [r1], -r0
   15968:	ldrdeq	r5, [r1], -r0
   1596c:	ldrdeq	r5, [r1], -r0
   15970:	ldrdeq	r5, [r1], -r0
   15974:	ldrdeq	r5, [r1], -r0
   15978:	ldrdeq	r5, [r1], -r0
   1597c:	andeq	r5, r1, r4, ror #31
   15980:	andeq	r5, r1, r8, lsr #26
   15984:	ldrdeq	r5, [r1], -r0
   15988:	andeq	r5, r1, r4, ror #31
   1598c:	ldrdeq	r5, [r1], -r0
   15990:	andeq	r5, r1, r4, ror #31
   15994:	ldrdeq	r5, [r1], -r0
   15998:	ldrdeq	r5, [r1], -r0
   1599c:	ldrdeq	r5, [r1], -r0
   159a0:	ldrdeq	r5, [r1], -r0
   159a4:	ldrdeq	r5, [r1], -r0
   159a8:	ldrdeq	r5, [r1], -r0
   159ac:	ldrdeq	r5, [r1], -r0
   159b0:	ldrdeq	r5, [r1], -r0
   159b4:	ldrdeq	r5, [r1], -r0
   159b8:	ldrdeq	r5, [r1], -r0
   159bc:	ldrdeq	r5, [r1], -r0
   159c0:	ldrdeq	r5, [r1], -r0
   159c4:	ldrdeq	r5, [r1], -r0
   159c8:	ldrdeq	r5, [r1], -r0
   159cc:	ldrdeq	r5, [r1], -r0
   159d0:	ldrdeq	r5, [r1], -r0
   159d4:	ldrdeq	r5, [r1], -r0
   159d8:	ldrdeq	r5, [r1], -r0
   159dc:	ldrdeq	r5, [r1], -r0
   159e0:	ldrdeq	r5, [r1], -r0
   159e4:	ldrdeq	r5, [r1], -r0
   159e8:	ldrdeq	r5, [r1], -r0
   159ec:	ldrdeq	r5, [r1], -r0
   159f0:	ldrdeq	r5, [r1], -r0
   159f4:	ldrdeq	r5, [r1], -r0
   159f8:	ldrdeq	r5, [r1], -r0
   159fc:	andeq	r5, r1, r0, ror #23
   15a00:	andeq	r5, r1, r4, ror #31
   15a04:	andeq	r5, r1, r0, ror #23
   15a08:	andeq	r5, r1, r4, asr #31
   15a0c:	mov	r3, #1
   15a10:	str	r3, [sp, #40]	; 0x28
   15a14:	str	r3, [sp, #68]	; 0x44
   15a18:	mov	r8, #0
   15a1c:	ldr	r3, [pc, #4056]	; 169fc <__assert_fail@plt+0x5900>
   15a20:	str	r3, [sp, #72]	; 0x48
   15a24:	mov	r3, #2
   15a28:	str	r3, [sp, #176]	; 0xb0
   15a2c:	ldr	r1, [sp, #56]	; 0x38
   15a30:	mov	r2, r3
   15a34:	ldr	ip, [sp, #40]	; 0x28
   15a38:	mov	lr, r3
   15a3c:	b	15708 <__assert_fail@plt+0x460c>
   15a40:	mov	r3, #1
   15a44:	str	r3, [sp, #56]	; 0x38
   15a48:	str	r3, [sp, #68]	; 0x44
   15a4c:	str	r3, [sp, #40]	; 0x28
   15a50:	ldr	r3, [pc, #4004]	; 169fc <__assert_fail@plt+0x5900>
   15a54:	mov	r8, #0
   15a58:	str	r3, [sp, #72]	; 0x48
   15a5c:	b	15a24 <__assert_fail@plt+0x4928>
   15a60:	mov	r3, #1
   15a64:	str	r3, [sp, #56]	; 0x38
   15a68:	str	r3, [sp, #68]	; 0x44
   15a6c:	str	r3, [sp, #40]	; 0x28
   15a70:	ldr	r3, [pc, #3976]	; 16a00 <__assert_fail@plt+0x5904>
   15a74:	mov	r8, #0
   15a78:	str	r3, [sp, #72]	; 0x48
   15a7c:	mov	r3, #5
   15a80:	b	15a28 <__assert_fail@plt+0x492c>
   15a84:	mov	r3, #0
   15a88:	str	r3, [sp, #40]	; 0x28
   15a8c:	mov	r3, #1
   15a90:	str	r3, [sp, #56]	; 0x38
   15a94:	mov	r8, #0
   15a98:	mov	r1, r3
   15a9c:	ldr	r2, [sp, #176]	; 0xb0
   15aa0:	ldr	ip, [sp, #40]	; 0x28
   15aa4:	ldr	lr, [sp, #176]	; 0xb0
   15aa8:	b	15708 <__assert_fail@plt+0x460c>
   15aac:	ldr	r3, [sp, #176]	; 0xb0
   15ab0:	cmp	r3, #10
   15ab4:	beq	15af8 <__assert_fail@plt+0x49fc>
   15ab8:	mov	r2, #5
   15abc:	ldr	r1, [pc, #3904]	; 16a04 <__assert_fail@plt+0x5908>
   15ac0:	mov	r0, #0
   15ac4:	bl	10ef8 <dcgettext@plt>
   15ac8:	ldr	r2, [pc, #3892]	; 16a04 <__assert_fail@plt+0x5908>
   15acc:	cmp	r0, r2
   15ad0:	str	r0, [sp, #188]	; 0xbc
   15ad4:	beq	16b90 <__assert_fail@plt+0x5a94>
   15ad8:	mov	r2, #5
   15adc:	ldr	r1, [pc, #3864]	; 169fc <__assert_fail@plt+0x5900>
   15ae0:	mov	r0, #0
   15ae4:	bl	10ef8 <dcgettext@plt>
   15ae8:	ldr	r2, [pc, #3852]	; 169fc <__assert_fail@plt+0x5900>
   15aec:	cmp	r0, r2
   15af0:	str	r0, [sp, #192]	; 0xc0
   15af4:	beq	16b80 <__assert_fail@plt+0x5a84>
   15af8:	ldr	r8, [sp, #40]	; 0x28
   15afc:	cmp	r8, #0
   15b00:	movne	r8, #0
   15b04:	bne	15b34 <__assert_fail@plt+0x4a38>
   15b08:	ldr	r3, [sp, #188]	; 0xbc
   15b0c:	ldrb	r3, [r3]
   15b10:	cmp	r3, #0
   15b14:	beq	15b34 <__assert_fail@plt+0x4a38>
   15b18:	ldr	r2, [sp, #188]	; 0xbc
   15b1c:	cmp	fp, r8
   15b20:	strbhi	r3, [r9, r8]
   15b24:	ldrb	r3, [r2, #1]!
   15b28:	add	r8, r8, #1
   15b2c:	cmp	r3, #0
   15b30:	bne	15b1c <__assert_fail@plt+0x4a20>
   15b34:	ldr	r0, [sp, #192]	; 0xc0
   15b38:	bl	10fe8 <strlen@plt>
   15b3c:	ldr	r3, [sp, #192]	; 0xc0
   15b40:	ldr	r2, [sp, #176]	; 0xb0
   15b44:	str	r3, [sp, #72]	; 0x48
   15b48:	mov	r3, #1
   15b4c:	str	r3, [sp, #56]	; 0x38
   15b50:	mov	r1, r3
   15b54:	ldr	ip, [sp, #40]	; 0x28
   15b58:	ldr	lr, [sp, #176]	; 0xb0
   15b5c:	str	r0, [sp, #68]	; 0x44
   15b60:	b	15708 <__assert_fail@plt+0x460c>
   15b64:	ldr	r3, [sp, #40]	; 0x28
   15b68:	cmp	r3, #0
   15b6c:	beq	16814 <__assert_fail@plt+0x5718>
   15b70:	mov	r3, #1
   15b74:	str	r3, [sp, #68]	; 0x44
   15b78:	ldr	r3, [pc, #3708]	; 169fc <__assert_fail@plt+0x5900>
   15b7c:	str	r3, [sp, #72]	; 0x48
   15b80:	mov	r8, #0
   15b84:	ldr	r1, [sp, #56]	; 0x38
   15b88:	ldr	r2, [sp, #176]	; 0xb0
   15b8c:	ldr	ip, [sp, #40]	; 0x28
   15b90:	ldr	lr, [sp, #176]	; 0xb0
   15b94:	b	15708 <__assert_fail@plt+0x460c>
   15b98:	ldr	r3, [sp, #40]	; 0x28
   15b9c:	cmp	r3, #0
   15ba0:	beq	16898 <__assert_fail@plt+0x579c>
   15ba4:	str	r3, [sp, #56]	; 0x38
   15ba8:	mov	r3, #1
   15bac:	str	r3, [sp, #68]	; 0x44
   15bb0:	ldr	r3, [pc, #3656]	; 16a00 <__assert_fail@plt+0x5904>
   15bb4:	b	15b7c <__assert_fail@plt+0x4a80>
   15bb8:	ldr	r3, [sp, #40]	; 0x28
   15bbc:	cmp	r3, #0
   15bc0:	mov	r3, #1
   15bc4:	streq	r3, [sp, #56]	; 0x38
   15bc8:	beq	16814 <__assert_fail@plt+0x5718>
   15bcc:	str	r3, [sp, #68]	; 0x44
   15bd0:	ldr	r3, [pc, #3620]	; 169fc <__assert_fail@plt+0x5900>
   15bd4:	mov	r8, #0
   15bd8:	str	r3, [sp, #72]	; 0x48
   15bdc:	b	15a24 <__assert_fail@plt+0x4928>
   15be0:	ldr	r3, [sp, #24]
   15be4:	ldr	r6, [sp, #48]	; 0x30
   15be8:	cmn	r3, #1
   15bec:	beq	16248 <__assert_fail@plt+0x514c>
   15bf0:	subs	r3, r3, #1
   15bf4:	movne	r3, #1
   15bf8:	cmp	r3, #0
   15bfc:	beq	15fc8 <__assert_fail@plt+0x4ecc>
   15c00:	ldr	r1, [sp, #52]	; 0x34
   15c04:	mov	r7, r3
   15c08:	mov	r3, #0
   15c0c:	str	r3, [sp, #32]
   15c10:	ldr	r3, [sp, #60]	; 0x3c
   15c14:	orr	r2, r1, r3
   15c18:	ldr	r3, [sp, #40]	; 0x28
   15c1c:	eor	r2, r2, #1
   15c20:	orr	r2, r3, r2
   15c24:	tst	r2, #255	; 0xff
   15c28:	bne	1654c <__assert_fail@plt+0x5450>
   15c2c:	cmp	r6, #0
   15c30:	bne	15e0c <__assert_fail@plt+0x4d10>
   15c34:	ldr	r3, [sp, #36]	; 0x24
   15c38:	add	sl, sl, #1
   15c3c:	and	r3, r3, r7
   15c40:	uxtb	r6, r3
   15c44:	cmp	r6, #0
   15c48:	beq	15c74 <__assert_fail@plt+0x4b78>
   15c4c:	cmp	fp, r8
   15c50:	movhi	r3, #39	; 0x27
   15c54:	strbhi	r3, [r9, r8]
   15c58:	add	r3, r8, #1
   15c5c:	cmp	fp, r3
   15c60:	movhi	r2, #39	; 0x27
   15c64:	add	r8, r8, #2
   15c68:	strbhi	r2, [r9, r3]
   15c6c:	mov	r3, #0
   15c70:	str	r3, [sp, #36]	; 0x24
   15c74:	ldr	r2, [sp, #32]
   15c78:	cmp	r8, fp
   15c7c:	ldr	r3, [sp, #28]
   15c80:	strbcc	r4, [r9, r8]
   15c84:	cmp	r2, #0
   15c88:	moveq	r3, #0
   15c8c:	str	r3, [sp, #28]
   15c90:	ldr	r3, [sp, #24]
   15c94:	add	r8, r8, #1
   15c98:	cmn	r3, #1
   15c9c:	bne	15774 <__assert_fail@plt+0x4678>
   15ca0:	ldr	r3, [sp, #44]	; 0x2c
   15ca4:	ldrb	r3, [r3, sl]
   15ca8:	adds	r7, r3, #0
   15cac:	movne	r7, #1
   15cb0:	cmp	r7, #0
   15cb4:	bne	15784 <__assert_fail@plt+0x4688>
   15cb8:	ldr	r3, [sp, #64]	; 0x40
   15cbc:	cmp	r8, #0
   15cc0:	movne	r3, #0
   15cc4:	andeq	r3, r3, #1
   15cc8:	cmp	r3, #0
   15ccc:	str	r3, [sp, #64]	; 0x40
   15cd0:	bne	16774 <__assert_fail@plt+0x5678>
   15cd4:	ldr	r3, [sp, #40]	; 0x28
   15cd8:	ldr	r2, [sp, #52]	; 0x34
   15cdc:	eor	r3, r3, #1
   15ce0:	ands	r2, r2, r3
   15ce4:	beq	16ba0 <__assert_fail@plt+0x5aa4>
   15ce8:	ldr	r3, [sp, #76]	; 0x4c
   15cec:	cmp	r3, #0
   15cf0:	beq	16b70 <__assert_fail@plt+0x5a74>
   15cf4:	ldr	r3, [sp, #28]
   15cf8:	cmp	r3, #0
   15cfc:	bne	16b2c <__assert_fail@plt+0x5a30>
   15d00:	ldr	r2, [sp, #84]	; 0x54
   15d04:	clz	r3, fp
   15d08:	cmp	r2, #0
   15d0c:	lsr	r3, r3, #5
   15d10:	moveq	r3, #0
   15d14:	cmp	r3, #0
   15d18:	beq	16acc <__assert_fail@plt+0x59d0>
   15d1c:	mov	fp, r2
   15d20:	str	r3, [sp, #76]	; 0x4c
   15d24:	b	156b0 <__assert_fail@plt+0x45b4>
   15d28:	ldr	r3, [sp, #176]	; 0xb0
   15d2c:	ldr	r6, [sp, #48]	; 0x30
   15d30:	cmp	r3, #2
   15d34:	beq	1626c <__assert_fail@plt+0x5170>
   15d38:	ldr	r3, [sp, #88]	; 0x58
   15d3c:	cmp	r3, #0
   15d40:	beq	167f0 <__assert_fail@plt+0x56f4>
   15d44:	mov	r3, #0
   15d48:	add	sl, sl, #1
   15d4c:	ldr	r6, [sp, #36]	; 0x24
   15d50:	str	r3, [sp, #32]
   15d54:	mov	r4, #92	; 0x5c
   15d58:	b	15c44 <__assert_fail@plt+0x4b48>
   15d5c:	ldr	r3, [sp, #176]	; 0xb0
   15d60:	ldr	r6, [sp, #48]	; 0x30
   15d64:	cmp	r3, #2
   15d68:	beq	1629c <__assert_fail@plt+0x51a0>
   15d6c:	cmp	r3, #5
   15d70:	bne	16800 <__assert_fail@plt+0x5704>
   15d74:	ldr	r3, [sp, #100]	; 0x64
   15d78:	cmp	r3, #0
   15d7c:	beq	16864 <__assert_fail@plt+0x5768>
   15d80:	ldr	r2, [sp, #24]
   15d84:	add	r3, sl, #2
   15d88:	cmp	r2, r3
   15d8c:	bls	15d9c <__assert_fail@plt+0x4ca0>
   15d90:	ldrb	r4, [r5, #1]
   15d94:	cmp	r4, #63	; 0x3f
   15d98:	beq	16a0c <__assert_fail@plt+0x5910>
   15d9c:	mov	r1, #0
   15da0:	str	r1, [sp, #32]
   15da4:	mov	r4, #63	; 0x3f
   15da8:	b	15c10 <__assert_fail@plt+0x4b14>
   15dac:	ldr	r3, [sp, #176]	; 0xb0
   15db0:	ldr	r6, [sp, #48]	; 0x30
   15db4:	cmp	r3, #2
   15db8:	beq	162c8 <__assert_fail@plt+0x51cc>
   15dbc:	str	r7, [sp, #32]
   15dc0:	str	r7, [sp, #76]	; 0x4c
   15dc4:	mov	r1, #0
   15dc8:	mov	r4, #39	; 0x27
   15dcc:	b	15c10 <__assert_fail@plt+0x4b14>
   15dd0:	ldr	r6, [sp, #48]	; 0x30
   15dd4:	ldr	r1, [sp, #52]	; 0x34
   15dd8:	str	r7, [sp, #32]
   15ddc:	b	15c10 <__assert_fail@plt+0x4b14>
   15de0:	ldr	r6, [sp, #48]	; 0x30
   15de4:	ldr	r1, [sp, #52]	; 0x34
   15de8:	mov	r4, #12
   15dec:	mov	r3, #102	; 0x66
   15df0:	ldr	r2, [sp, #56]	; 0x38
   15df4:	cmp	r2, #0
   15df8:	streq	r2, [sp, #32]
   15dfc:	beq	15c10 <__assert_fail@plt+0x4b14>
   15e00:	mov	r4, r3
   15e04:	mov	r3, #0
   15e08:	str	r3, [sp, #32]
   15e0c:	ldr	r3, [sp, #40]	; 0x28
   15e10:	cmp	r3, #0
   15e14:	bne	16584 <__assert_fail@plt+0x5488>
   15e18:	ldr	r3, [sp, #36]	; 0x24
   15e1c:	eor	r3, r3, #1
   15e20:	and	r3, r3, r1
   15e24:	ands	r3, r3, #255	; 0xff
   15e28:	beq	15e60 <__assert_fail@plt+0x4d64>
   15e2c:	cmp	fp, r8
   15e30:	movhi	r2, #39	; 0x27
   15e34:	strbhi	r2, [r9, r8]
   15e38:	add	r2, r8, #1
   15e3c:	cmp	fp, r2
   15e40:	movhi	r1, #36	; 0x24
   15e44:	strbhi	r1, [r9, r2]
   15e48:	add	r2, r8, #2
   15e4c:	cmp	fp, r2
   15e50:	add	r8, r8, #3
   15e54:	movhi	r1, #39	; 0x27
   15e58:	strbhi	r1, [r9, r2]
   15e5c:	str	r3, [sp, #36]	; 0x24
   15e60:	cmp	fp, r8
   15e64:	movhi	r3, #92	; 0x5c
   15e68:	strbhi	r3, [r9, r8]
   15e6c:	add	sl, sl, #1
   15e70:	add	r8, r8, #1
   15e74:	b	15c74 <__assert_fail@plt+0x4b78>
   15e78:	ldr	r6, [sp, #48]	; 0x30
   15e7c:	mov	r4, #10
   15e80:	mov	r3, #110	; 0x6e
   15e84:	ldr	r2, [sp, #64]	; 0x40
   15e88:	cmp	r2, #0
   15e8c:	bne	1690c <__assert_fail@plt+0x5810>
   15e90:	ldr	r1, [sp, #52]	; 0x34
   15e94:	b	15df0 <__assert_fail@plt+0x4cf4>
   15e98:	ldr	r6, [sp, #48]	; 0x30
   15e9c:	ldr	r1, [sp, #52]	; 0x34
   15ea0:	mov	r3, #116	; 0x74
   15ea4:	b	15df0 <__assert_fail@plt+0x4cf4>
   15ea8:	ldr	r6, [sp, #48]	; 0x30
   15eac:	ldr	r1, [sp, #52]	; 0x34
   15eb0:	mov	r4, #11
   15eb4:	mov	r3, #118	; 0x76
   15eb8:	b	15df0 <__assert_fail@plt+0x4cf4>
   15ebc:	ldr	r6, [sp, #48]	; 0x30
   15ec0:	ldr	r1, [sp, #52]	; 0x34
   15ec4:	mov	r4, #8
   15ec8:	mov	r3, #98	; 0x62
   15ecc:	b	15df0 <__assert_fail@plt+0x4cf4>
   15ed0:	ldr	r6, [sp, #48]	; 0x30
   15ed4:	ldr	r1, [sp, #52]	; 0x34
   15ed8:	mov	r4, #7
   15edc:	mov	r3, #97	; 0x61
   15ee0:	b	15df0 <__assert_fail@plt+0x4cf4>
   15ee4:	ldr	r3, [sp, #56]	; 0x38
   15ee8:	ldr	r6, [sp, #48]	; 0x30
   15eec:	cmp	r3, #0
   15ef0:	beq	163b4 <__assert_fail@plt+0x52b8>
   15ef4:	ldr	r3, [sp, #40]	; 0x28
   15ef8:	cmp	r3, #0
   15efc:	bne	169e8 <__assert_fail@plt+0x58ec>
   15f00:	ldr	r3, [sp, #36]	; 0x24
   15f04:	ldr	r2, [sp, #52]	; 0x34
   15f08:	eor	r3, r3, #1
   15f0c:	ands	r3, r2, r3
   15f10:	moveq	r2, r8
   15f14:	beq	15f4c <__assert_fail@plt+0x4e50>
   15f18:	cmp	fp, r8
   15f1c:	movhi	r2, #39	; 0x27
   15f20:	strbhi	r2, [r9, r8]
   15f24:	add	r2, r8, #1
   15f28:	cmp	fp, r2
   15f2c:	movhi	r1, #36	; 0x24
   15f30:	strbhi	r1, [r9, r2]
   15f34:	add	r2, r8, #2
   15f38:	cmp	fp, r2
   15f3c:	movhi	r1, #39	; 0x27
   15f40:	strbhi	r1, [r9, r2]
   15f44:	add	r2, r8, #3
   15f48:	str	r3, [sp, #36]	; 0x24
   15f4c:	cmp	fp, r2
   15f50:	movhi	r3, #92	; 0x5c
   15f54:	strbhi	r3, [r9, r2]
   15f58:	ldr	r3, [sp, #92]	; 0x5c
   15f5c:	add	r8, r2, #1
   15f60:	cmp	r3, #0
   15f64:	beq	168e8 <__assert_fail@plt+0x57ec>
   15f68:	ldr	r1, [sp, #24]
   15f6c:	add	r3, sl, #1
   15f70:	cmp	r1, r3
   15f74:	bls	15fac <__assert_fail@plt+0x4eb0>
   15f78:	ldr	r1, [sp, #44]	; 0x2c
   15f7c:	ldrb	r3, [r1, r3]
   15f80:	sub	r3, r3, #48	; 0x30
   15f84:	cmp	r3, #9
   15f88:	bhi	15fac <__assert_fail@plt+0x4eb0>
   15f8c:	cmp	fp, r8
   15f90:	movhi	r3, #48	; 0x30
   15f94:	strbhi	r3, [r9, r8]
   15f98:	add	r3, r2, #2
   15f9c:	cmp	fp, r3
   15fa0:	add	r8, r2, #3
   15fa4:	movhi	r1, #48	; 0x30
   15fa8:	strbhi	r1, [r9, r3]
   15fac:	ldr	r3, [sp, #40]	; 0x28
   15fb0:	ldr	r1, [sp, #52]	; 0x34
   15fb4:	mov	r7, r3
   15fb8:	str	r3, [sp, #32]
   15fbc:	mov	r4, #48	; 0x30
   15fc0:	b	15c10 <__assert_fail@plt+0x4b14>
   15fc4:	ldr	r6, [sp, #48]	; 0x30
   15fc8:	cmp	sl, #0
   15fcc:	streq	r7, [sp, #32]
   15fd0:	beq	15ff0 <__assert_fail@plt+0x4ef4>
   15fd4:	mov	r3, #0
   15fd8:	ldr	r1, [sp, #52]	; 0x34
   15fdc:	str	r3, [sp, #32]
   15fe0:	b	15c10 <__assert_fail@plt+0x4b14>
   15fe4:	ldr	r6, [sp, #48]	; 0x30
   15fe8:	mov	r3, #0
   15fec:	str	r3, [sp, #32]
   15ff0:	ldr	r3, [sp, #64]	; 0x40
   15ff4:	cmp	r3, #0
   15ff8:	bne	16774 <__assert_fail@plt+0x5678>
   15ffc:	ldr	r1, [sp, #52]	; 0x34
   16000:	b	15c10 <__assert_fail@plt+0x4b14>
   16004:	ldr	r3, [sp, #48]	; 0x30
   16008:	mov	r6, r3
   1600c:	str	r3, [sp, #32]
   16010:	b	15ff0 <__assert_fail@plt+0x4ef4>
   16014:	ldr	r6, [sp, #48]	; 0x30
   16018:	mov	r4, #13
   1601c:	mov	r3, #114	; 0x72
   16020:	b	15e84 <__assert_fail@plt+0x4d88>
   16024:	ldr	r3, [sp, #44]	; 0x2c
   16028:	add	r5, r3, sl
   1602c:	ldrb	r4, [r5]
   16030:	cmp	r4, #126	; 0x7e
   16034:	ldrls	pc, [pc, r4, lsl #2]
   16038:	b	163d4 <__assert_fail@plt+0x52d8>
   1603c:	andeq	r6, r1, r4, lsr #7
   16040:	ldrdeq	r6, [r1], -r4
   16044:	ldrdeq	r6, [r1], -r4
   16048:	ldrdeq	r6, [r1], -r4
   1604c:	ldrdeq	r6, [r1], -r4
   16050:	ldrdeq	r6, [r1], -r4
   16054:	ldrdeq	r6, [r1], -r4
   16058:	muleq	r1, ip, r3
   1605c:	muleq	r1, r4, r3
   16060:	andeq	r6, r1, r8, lsl #7
   16064:	andeq	r6, r1, r0, lsl #7
   16068:	andeq	r6, r1, r8, ror r3
   1606c:	andeq	r6, r1, r0, ror r3
   16070:	andeq	r6, r1, r8, ror #6
   16074:	ldrdeq	r6, [r1], -r4
   16078:	ldrdeq	r6, [r1], -r4
   1607c:	ldrdeq	r6, [r1], -r4
   16080:	ldrdeq	r6, [r1], -r4
   16084:	ldrdeq	r6, [r1], -r4
   16088:	ldrdeq	r6, [r1], -r4
   1608c:	ldrdeq	r6, [r1], -r4
   16090:	ldrdeq	r6, [r1], -r4
   16094:	ldrdeq	r6, [r1], -r4
   16098:	ldrdeq	r6, [r1], -r4
   1609c:	ldrdeq	r6, [r1], -r4
   160a0:	ldrdeq	r6, [r1], -r4
   160a4:	ldrdeq	r6, [r1], -r4
   160a8:	ldrdeq	r6, [r1], -r4
   160ac:	ldrdeq	r6, [r1], -r4
   160b0:	ldrdeq	r6, [r1], -r4
   160b4:	ldrdeq	r6, [r1], -r4
   160b8:	ldrdeq	r6, [r1], -r4
   160bc:	andeq	r6, r1, ip, asr r3
   160c0:	andeq	r6, r1, r4, asr r3
   160c4:	andeq	r6, r1, r4, asr r3
   160c8:	andeq	r6, r1, ip, asr #6
   160cc:	andeq	r6, r1, r4, asr r3
   160d0:	andeq	r6, r1, r4, asr #6
   160d4:	andeq	r6, r1, r4, asr r3
   160d8:			; <UNDEFINED> instruction: 0x000162b8
   160dc:	andeq	r6, r1, r4, asr r3
   160e0:	andeq	r6, r1, r4, asr r3
   160e4:	andeq	r6, r1, r4, asr r3
   160e8:	andeq	r6, r1, r4, asr #6
   160ec:	andeq	r6, r1, r4, asr #6
   160f0:	andeq	r6, r1, r4, asr #6
   160f4:	andeq	r6, r1, r4, asr #6
   160f8:	andeq	r6, r1, r4, asr #6
   160fc:	andeq	r6, r1, r4, asr #6
   16100:	andeq	r6, r1, r4, asr #6
   16104:	andeq	r6, r1, r4, asr #6
   16108:	andeq	r6, r1, r4, asr #6
   1610c:	andeq	r6, r1, r4, asr #6
   16110:	andeq	r6, r1, r4, asr #6
   16114:	andeq	r6, r1, r4, asr #6
   16118:	andeq	r6, r1, r4, asr #6
   1611c:	andeq	r6, r1, r4, asr #6
   16120:	andeq	r6, r1, r4, asr #6
   16124:	andeq	r6, r1, r4, asr #6
   16128:	andeq	r6, r1, r4, asr r3
   1612c:	andeq	r6, r1, r4, asr r3
   16130:	andeq	r6, r1, r4, asr r3
   16134:	andeq	r6, r1, r4, asr r3
   16138:	andeq	r6, r1, ip, lsl #5
   1613c:	ldrdeq	r6, [r1], -r4
   16140:	andeq	r6, r1, r4, asr #6
   16144:	andeq	r6, r1, r4, asr #6
   16148:	andeq	r6, r1, r4, asr #6
   1614c:	andeq	r6, r1, r4, asr #6
   16150:	andeq	r6, r1, r4, asr #6
   16154:	andeq	r6, r1, r4, asr #6
   16158:	andeq	r6, r1, r4, asr #6
   1615c:	andeq	r6, r1, r4, asr #6
   16160:	andeq	r6, r1, r4, asr #6
   16164:	andeq	r6, r1, r4, asr #6
   16168:	andeq	r6, r1, r4, asr #6
   1616c:	andeq	r6, r1, r4, asr #6
   16170:	andeq	r6, r1, r4, asr #6
   16174:	andeq	r6, r1, r4, asr #6
   16178:	andeq	r6, r1, r4, asr #6
   1617c:	andeq	r6, r1, r4, asr #6
   16180:	andeq	r6, r1, r4, asr #6
   16184:	andeq	r6, r1, r4, asr #6
   16188:	andeq	r6, r1, r4, asr #6
   1618c:	andeq	r6, r1, r4, asr #6
   16190:	andeq	r6, r1, r4, asr #6
   16194:	andeq	r6, r1, r4, asr #6
   16198:	andeq	r6, r1, r4, asr #6
   1619c:	andeq	r6, r1, r4, asr #6
   161a0:	andeq	r6, r1, r4, asr #6
   161a4:	andeq	r6, r1, r4, asr #6
   161a8:	andeq	r6, r1, r4, asr r3
   161ac:	andeq	r6, r1, ip, asr r2
   161b0:	andeq	r6, r1, r4, asr #6
   161b4:	andeq	r6, r1, r4, asr r3
   161b8:	andeq	r6, r1, r4, asr #6
   161bc:	andeq	r6, r1, r4, asr r3
   161c0:	andeq	r6, r1, r4, asr #6
   161c4:	andeq	r6, r1, r4, asr #6
   161c8:	andeq	r6, r1, r4, asr #6
   161cc:	andeq	r6, r1, r4, asr #6
   161d0:	andeq	r6, r1, r4, asr #6
   161d4:	andeq	r6, r1, r4, asr #6
   161d8:	andeq	r6, r1, r4, asr #6
   161dc:	andeq	r6, r1, r4, asr #6
   161e0:	andeq	r6, r1, r4, asr #6
   161e4:	andeq	r6, r1, r4, asr #6
   161e8:	andeq	r6, r1, r4, asr #6
   161ec:	andeq	r6, r1, r4, asr #6
   161f0:	andeq	r6, r1, r4, asr #6
   161f4:	andeq	r6, r1, r4, asr #6
   161f8:	andeq	r6, r1, r4, asr #6
   161fc:	andeq	r6, r1, r4, asr #6
   16200:	andeq	r6, r1, r4, asr #6
   16204:	andeq	r6, r1, r4, asr #6
   16208:	andeq	r6, r1, r4, asr #6
   1620c:	andeq	r6, r1, r4, asr #6
   16210:	andeq	r6, r1, r4, asr #6
   16214:	andeq	r6, r1, r4, asr #6
   16218:	andeq	r6, r1, r4, asr #6
   1621c:	andeq	r6, r1, r4, asr #6
   16220:	andeq	r6, r1, r4, asr #6
   16224:	andeq	r6, r1, r4, asr #6
   16228:	andeq	r6, r1, r8, lsr r2
   1622c:	andeq	r6, r1, r4, asr r3
   16230:	andeq	r6, r1, r8, lsr r2
   16234:	andeq	r6, r1, ip, asr #6
   16238:	ldr	r3, [sp, #24]
   1623c:	mov	r6, #0
   16240:	cmn	r3, #1
   16244:	bne	15bf0 <__assert_fail@plt+0x4af4>
   16248:	ldr	r3, [sp, #44]	; 0x2c
   1624c:	ldrb	r3, [r3, #1]
   16250:	adds	r3, r3, #0
   16254:	movne	r3, #1
   16258:	b	15bf8 <__assert_fail@plt+0x4afc>
   1625c:	ldr	r3, [sp, #176]	; 0xb0
   16260:	mov	r6, #0
   16264:	cmp	r3, #2
   16268:	bne	15d38 <__assert_fail@plt+0x4c3c>
   1626c:	ldr	r3, [sp, #64]	; 0x40
   16270:	cmp	r3, #0
   16274:	bne	16aac <__assert_fail@plt+0x59b0>
   16278:	add	sl, sl, #1
   1627c:	ldr	r6, [sp, #36]	; 0x24
   16280:	str	r3, [sp, #32]
   16284:	mov	r4, #92	; 0x5c
   16288:	b	15c44 <__assert_fail@plt+0x4b48>
   1628c:	ldr	r3, [sp, #176]	; 0xb0
   16290:	mov	r6, #0
   16294:	cmp	r3, #2
   16298:	bne	15d6c <__assert_fail@plt+0x4c70>
   1629c:	ldr	r3, [sp, #40]	; 0x28
   162a0:	cmp	r3, #0
   162a4:	bne	16588 <__assert_fail@plt+0x548c>
   162a8:	mov	r1, r7
   162ac:	str	r3, [sp, #32]
   162b0:	mov	r4, #63	; 0x3f
   162b4:	b	15c10 <__assert_fail@plt+0x4b14>
   162b8:	ldr	r3, [sp, #176]	; 0xb0
   162bc:	mov	r6, #0
   162c0:	cmp	r3, #2
   162c4:	bne	15dbc <__assert_fail@plt+0x4cc0>
   162c8:	ldr	r3, [sp, #64]	; 0x40
   162cc:	cmp	r3, #0
   162d0:	bne	16aac <__assert_fail@plt+0x59b0>
   162d4:	ldr	r2, [sp, #84]	; 0x54
   162d8:	adds	r3, fp, #0
   162dc:	movne	r3, #1
   162e0:	cmp	r2, #0
   162e4:	movne	r3, #0
   162e8:	cmp	r3, #0
   162ec:	strne	fp, [sp, #84]	; 0x54
   162f0:	movne	fp, #0
   162f4:	bne	16324 <__assert_fail@plt+0x5228>
   162f8:	cmp	fp, r8
   162fc:	movhi	r3, #39	; 0x27
   16300:	strbhi	r3, [r9, r8]
   16304:	add	r3, r8, #1
   16308:	cmp	fp, r3
   1630c:	movhi	r2, #92	; 0x5c
   16310:	strbhi	r2, [r9, r3]
   16314:	add	r3, r8, #2
   16318:	cmp	fp, r3
   1631c:	movhi	r2, #39	; 0x27
   16320:	strbhi	r2, [r9, r3]
   16324:	ldr	r3, [sp, #64]	; 0x40
   16328:	add	r8, r8, #3
   1632c:	mov	r1, r7
   16330:	str	r7, [sp, #32]
   16334:	str	r7, [sp, #76]	; 0x4c
   16338:	str	r3, [sp, #36]	; 0x24
   1633c:	mov	r4, #39	; 0x27
   16340:	b	15c10 <__assert_fail@plt+0x4b14>
   16344:	mov	r6, #0
   16348:	b	15dd4 <__assert_fail@plt+0x4cd8>
   1634c:	mov	r6, #0
   16350:	b	15fc8 <__assert_fail@plt+0x4ecc>
   16354:	mov	r6, #0
   16358:	b	15fe8 <__assert_fail@plt+0x4eec>
   1635c:	str	r7, [sp, #32]
   16360:	mov	r6, #0
   16364:	b	15ff0 <__assert_fail@plt+0x4ef4>
   16368:	mov	r6, #0
   1636c:	b	16018 <__assert_fail@plt+0x4f1c>
   16370:	mov	r6, #0
   16374:	b	15de4 <__assert_fail@plt+0x4ce8>
   16378:	mov	r6, #0
   1637c:	b	15eac <__assert_fail@plt+0x4db0>
   16380:	mov	r6, #0
   16384:	b	15e7c <__assert_fail@plt+0x4d80>
   16388:	mov	r6, #0
   1638c:	mov	r3, #116	; 0x74
   16390:	b	15e84 <__assert_fail@plt+0x4d88>
   16394:	mov	r6, #0
   16398:	b	15ec0 <__assert_fail@plt+0x4dc4>
   1639c:	mov	r6, #0
   163a0:	b	15ed4 <__assert_fail@plt+0x4dd8>
   163a4:	ldr	r3, [sp, #56]	; 0x38
   163a8:	mov	r6, #0
   163ac:	cmp	r3, #0
   163b0:	bne	15ef4 <__assert_fail@plt+0x4df8>
   163b4:	ldr	r3, [sp, #96]	; 0x60
   163b8:	cmp	r3, #0
   163bc:	addne	sl, sl, #1
   163c0:	bne	15768 <__assert_fail@plt+0x466c>
   163c4:	ldr	r1, [sp, #52]	; 0x34
   163c8:	str	r3, [sp, #32]
   163cc:	mov	r4, r3
   163d0:	b	15c10 <__assert_fail@plt+0x4b14>
   163d4:	mov	r6, #0
   163d8:	ldr	r3, [sp, #80]	; 0x50
   163dc:	cmp	r3, #1
   163e0:	bne	165d0 <__assert_fail@plt+0x54d4>
   163e4:	bl	10fd0 <__ctype_b_loc@plt>
   163e8:	ldr	r2, [sp, #80]	; 0x50
   163ec:	sxth	r3, r4
   163f0:	mov	r1, r2
   163f4:	lsl	r3, r3, #1
   163f8:	ldr	r2, [r0]
   163fc:	ldrh	r3, [r2, r3]
   16400:	and	r3, r3, #16384	; 0x4000
   16404:	cmp	r3, #0
   16408:	movne	r3, #1
   1640c:	moveq	r3, #0
   16410:	str	r3, [sp, #32]
   16414:	moveq	r3, #1
   16418:	movne	r3, #0
   1641c:	ldr	r2, [sp, #56]	; 0x38
   16420:	and	r3, r3, r2
   16424:	ands	r3, r3, #255	; 0xff
   16428:	beq	15ffc <__assert_fail@plt+0x4f00>
   1642c:	add	r1, sl, r1
   16430:	mov	r0, #0
   16434:	ldr	r7, [sp, #40]	; 0x28
   16438:	ldr	r2, [sp, #36]	; 0x24
   1643c:	ldr	lr, [sp, #52]	; 0x34
   16440:	b	164f0 <__assert_fail@plt+0x53f4>
   16444:	cmp	r7, #0
   16448:	bne	16844 <__assert_fail@plt+0x5748>
   1644c:	eor	r0, r2, #1
   16450:	ands	r0, lr, r0
   16454:	beq	1648c <__assert_fail@plt+0x5390>
   16458:	cmp	fp, r8
   1645c:	movhi	r2, #39	; 0x27
   16460:	strbhi	r2, [r9, r8]
   16464:	add	r2, r8, #1
   16468:	cmp	fp, r2
   1646c:	movhi	ip, #36	; 0x24
   16470:	strbhi	ip, [r9, r2]
   16474:	add	r2, r8, #2
   16478:	cmp	fp, r2
   1647c:	movhi	ip, #39	; 0x27
   16480:	strbhi	ip, [r9, r2]
   16484:	add	r8, r8, #3
   16488:	mov	r2, r0
   1648c:	cmp	fp, r8
   16490:	movhi	r0, #92	; 0x5c
   16494:	strbhi	r0, [r9, r8]
   16498:	add	r0, r8, #1
   1649c:	cmp	fp, r0
   164a0:	lsrhi	ip, r4, #6
   164a4:	addhi	ip, ip, #48	; 0x30
   164a8:	strbhi	ip, [r9, r0]
   164ac:	add	ip, r8, #2
   164b0:	cmp	fp, ip
   164b4:	lsrhi	r0, r4, #3
   164b8:	andhi	r0, r0, #7
   164bc:	addhi	r0, r0, #48	; 0x30
   164c0:	add	sl, sl, #1
   164c4:	strbhi	r0, [r9, ip]
   164c8:	and	r4, r4, #7
   164cc:	cmp	sl, r1
   164d0:	add	r4, r4, #48	; 0x30
   164d4:	add	r8, r8, #3
   164d8:	bcs	1685c <__assert_fail@plt+0x5760>
   164dc:	mov	r0, r3
   164e0:	cmp	fp, r8
   164e4:	strbhi	r4, [r9, r8]
   164e8:	ldrb	r4, [r5, #1]!
   164ec:	add	r8, r8, #1
   164f0:	cmp	r3, #0
   164f4:	bne	16444 <__assert_fail@plt+0x5348>
   164f8:	cmp	r6, #0
   164fc:	bne	165a0 <__assert_fail@plt+0x54a4>
   16500:	eor	r6, r0, #1
   16504:	and	r6, r6, r2
   16508:	add	sl, sl, #1
   1650c:	cmp	r1, sl
   16510:	uxtb	r6, r6
   16514:	bls	165c8 <__assert_fail@plt+0x54cc>
   16518:	cmp	r6, #0
   1651c:	beq	164e0 <__assert_fail@plt+0x53e4>
   16520:	cmp	fp, r8
   16524:	movhi	r2, #39	; 0x27
   16528:	strbhi	r2, [r9, r8]
   1652c:	add	r2, r8, #1
   16530:	cmp	fp, r2
   16534:	movhi	ip, #39	; 0x27
   16538:	strbhi	ip, [r9, r2]
   1653c:	add	r8, r8, #2
   16540:	mov	r6, r3
   16544:	mov	r2, r3
   16548:	b	164e0 <__assert_fail@plt+0x53e4>
   1654c:	ldr	r3, [sp, #184]	; 0xb8
   16550:	cmp	r3, #0
   16554:	beq	15c2c <__assert_fail@plt+0x4b30>
   16558:	lsr	r2, r4, #5
   1655c:	mov	r0, r3
   16560:	uxtb	r2, r2
   16564:	and	r3, r4, #31
   16568:	ldr	r2, [r0, r2, lsl #2]
   1656c:	lsr	r3, r2, r3
   16570:	tst	r3, #1
   16574:	beq	15c2c <__assert_fail@plt+0x4b30>
   16578:	ldr	r3, [sp, #40]	; 0x28
   1657c:	cmp	r3, #0
   16580:	beq	15e18 <__assert_fail@plt+0x4d1c>
   16584:	mov	r3, r1
   16588:	str	r3, [sp, #64]	; 0x40
   1658c:	mov	sl, r9
   16590:	ldr	r3, [sp, #56]	; 0x38
   16594:	mov	r9, fp
   16598:	ldr	r2, [sp, #64]	; 0x40
   1659c:	b	1678c <__assert_fail@plt+0x5690>
   165a0:	cmp	fp, r8
   165a4:	eor	r6, r0, #1
   165a8:	movhi	ip, #92	; 0x5c
   165ac:	and	r6, r6, r2
   165b0:	add	sl, sl, #1
   165b4:	strbhi	ip, [r9, r8]
   165b8:	cmp	r1, sl
   165bc:	add	r8, r8, #1
   165c0:	uxtb	r6, r6
   165c4:	bhi	16518 <__assert_fail@plt+0x541c>
   165c8:	str	r2, [sp, #36]	; 0x24
   165cc:	b	15c44 <__assert_fail@plt+0x4b48>
   165d0:	ldr	r3, [sp, #24]
   165d4:	cmn	r3, #1
   165d8:	mov	r3, #0
   165dc:	str	r3, [sp, #128]	; 0x80
   165e0:	str	r3, [sp, #132]	; 0x84
   165e4:	beq	168d8 <__assert_fail@plt+0x57dc>
   165e8:	mov	r2, r7
   165ec:	mov	r3, #0
   165f0:	str	r7, [sp, #104]	; 0x68
   165f4:	str	r5, [sp, #116]	; 0x74
   165f8:	mov	r7, r3
   165fc:	mov	r5, r2
   16600:	str	r4, [sp, #32]
   16604:	str	r6, [sp, #108]	; 0x6c
   16608:	str	r8, [sp, #112]	; 0x70
   1660c:	ldr	r3, [sp, #44]	; 0x2c
   16610:	add	r6, sl, r7
   16614:	add	r4, r3, r6
   16618:	ldr	r3, [sp, #24]
   1661c:	mov	r1, r4
   16620:	sub	r2, r3, r6
   16624:	add	r0, sp, #124	; 0x7c
   16628:	add	r3, sp, #128	; 0x80
   1662c:	bl	1bf44 <__assert_fail@plt+0xae48>
   16630:	subs	r8, r0, #0
   16634:	beq	169bc <__assert_fail@plt+0x58c0>
   16638:	cmn	r8, #1
   1663c:	beq	16994 <__assert_fail@plt+0x5898>
   16640:	cmn	r8, #2
   16644:	beq	1692c <__assert_fail@plt+0x5830>
   16648:	ldr	r3, [sp, #64]	; 0x40
   1664c:	cmp	r3, #0
   16650:	beq	16710 <__assert_fail@plt+0x5614>
   16654:	cmp	r8, #1
   16658:	beq	16710 <__assert_fail@plt+0x5614>
   1665c:	sub	r3, r8, #1
   16660:	add	r6, r3, r6
   16664:	ldr	r3, [sp, #44]	; 0x2c
   16668:	add	r6, r3, r6
   1666c:	ldrb	r3, [r4, #1]!
   16670:	sub	r3, r3, #91	; 0x5b
   16674:	cmp	r3, #33	; 0x21
   16678:	ldrls	pc, [pc, r3, lsl #2]
   1667c:	b	16708 <__assert_fail@plt+0x560c>
   16680:	andeq	r6, r1, r4, ror r7
   16684:	andeq	r6, r1, r4, ror r7
   16688:	andeq	r6, r1, r8, lsl #14
   1668c:	andeq	r6, r1, r4, ror r7
   16690:	andeq	r6, r1, r8, lsl #14
   16694:	andeq	r6, r1, r4, ror r7
   16698:	andeq	r6, r1, r8, lsl #14
   1669c:	andeq	r6, r1, r8, lsl #14
   166a0:	andeq	r6, r1, r8, lsl #14
   166a4:	andeq	r6, r1, r8, lsl #14
   166a8:	andeq	r6, r1, r8, lsl #14
   166ac:	andeq	r6, r1, r8, lsl #14
   166b0:	andeq	r6, r1, r8, lsl #14
   166b4:	andeq	r6, r1, r8, lsl #14
   166b8:	andeq	r6, r1, r8, lsl #14
   166bc:	andeq	r6, r1, r8, lsl #14
   166c0:	andeq	r6, r1, r8, lsl #14
   166c4:	andeq	r6, r1, r8, lsl #14
   166c8:	andeq	r6, r1, r8, lsl #14
   166cc:	andeq	r6, r1, r8, lsl #14
   166d0:	andeq	r6, r1, r8, lsl #14
   166d4:	andeq	r6, r1, r8, lsl #14
   166d8:	andeq	r6, r1, r8, lsl #14
   166dc:	andeq	r6, r1, r8, lsl #14
   166e0:	andeq	r6, r1, r8, lsl #14
   166e4:	andeq	r6, r1, r8, lsl #14
   166e8:	andeq	r6, r1, r8, lsl #14
   166ec:	andeq	r6, r1, r8, lsl #14
   166f0:	andeq	r6, r1, r8, lsl #14
   166f4:	andeq	r6, r1, r8, lsl #14
   166f8:	andeq	r6, r1, r8, lsl #14
   166fc:	andeq	r6, r1, r8, lsl #14
   16700:	andeq	r6, r1, r8, lsl #14
   16704:	andeq	r6, r1, r4, ror r7
   16708:	cmp	r6, r4
   1670c:	bne	1666c <__assert_fail@plt+0x5570>
   16710:	ldr	r0, [sp, #124]	; 0x7c
   16714:	bl	10f1c <iswprint@plt>
   16718:	add	r7, r7, r8
   1671c:	cmp	r0, #0
   16720:	add	r0, sp, #128	; 0x80
   16724:	moveq	r5, #0
   16728:	bl	10ed4 <mbsinit@plt>
   1672c:	cmp	r0, #0
   16730:	beq	1660c <__assert_fail@plt+0x5510>
   16734:	ldr	r4, [sp, #32]
   16738:	str	r5, [sp, #32]
   1673c:	ldr	r3, [sp, #32]
   16740:	mov	r1, r7
   16744:	eor	r3, r3, #1
   16748:	ldr	r7, [sp, #104]	; 0x68
   1674c:	ldr	r6, [sp, #108]	; 0x6c
   16750:	ldr	r8, [sp, #112]	; 0x70
   16754:	ldr	r5, [sp, #116]	; 0x74
   16758:	uxtb	r3, r3
   1675c:	cmp	r1, #1
   16760:	bls	1641c <__assert_fail@plt+0x5320>
   16764:	ldr	r2, [sp, #56]	; 0x38
   16768:	and	r3, r3, r2
   1676c:	uxtb	r3, r3
   16770:	b	1642c <__assert_fail@plt+0x5330>
   16774:	mov	r3, #2
   16778:	str	r3, [sp, #176]	; 0xb0
   1677c:	ldr	r2, [sp, #64]	; 0x40
   16780:	ldr	r3, [sp, #56]	; 0x38
   16784:	mov	sl, r9
   16788:	mov	r9, fp
   1678c:	and	r3, r3, r2
   16790:	tst	r3, #255	; 0xff
   16794:	ldr	r3, [sp, #176]	; 0xb0
   16798:	movne	r3, #4
   1679c:	str	r3, [sp, #176]	; 0xb0
   167a0:	ldr	r3, [sp, #180]	; 0xb4
   167a4:	mov	ip, #0
   167a8:	bic	r3, r3, #2
   167ac:	str	r3, [sp, #4]
   167b0:	ldr	r3, [sp, #192]	; 0xc0
   167b4:	ldr	r2, [sp, #44]	; 0x2c
   167b8:	str	r3, [sp, #16]
   167bc:	ldr	r3, [sp, #188]	; 0xbc
   167c0:	mov	r1, r9
   167c4:	str	r3, [sp, #12]
   167c8:	ldr	r3, [sp, #176]	; 0xb0
   167cc:	mov	r0, sl
   167d0:	str	r3, [sp]
   167d4:	str	ip, [sp, #8]
   167d8:	ldr	r3, [sp, #24]
   167dc:	bl	1563c <__assert_fail@plt+0x4540>
   167e0:	mov	fp, r0
   167e4:	mov	r0, fp
   167e8:	add	sp, sp, #140	; 0x8c
   167ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167f0:	mov	r4, #92	; 0x5c
   167f4:	mov	r1, #0
   167f8:	mov	r3, r4
   167fc:	b	15df0 <__assert_fail@plt+0x4cf4>
   16800:	mov	r3, #0
   16804:	ldr	r1, [sp, #52]	; 0x34
   16808:	str	r3, [sp, #32]
   1680c:	mov	r4, #63	; 0x3f
   16810:	b	15c10 <__assert_fail@plt+0x4b14>
   16814:	cmp	fp, #0
   16818:	beq	16874 <__assert_fail@plt+0x5778>
   1681c:	mov	r3, #39	; 0x27
   16820:	strb	r3, [r9]
   16824:	mov	r3, #0
   16828:	str	r3, [sp, #40]	; 0x28
   1682c:	mov	r3, #1
   16830:	str	r3, [sp, #68]	; 0x44
   16834:	ldr	r3, [pc, #448]	; 169fc <__assert_fail@plt+0x5900>
   16838:	mov	r8, #1
   1683c:	str	r3, [sp, #72]	; 0x48
   16840:	b	15a24 <__assert_fail@plt+0x4928>
   16844:	ldr	r3, [sp, #40]	; 0x28
   16848:	mov	sl, r9
   1684c:	str	r3, [sp, #56]	; 0x38
   16850:	mov	r9, fp
   16854:	ldr	r2, [sp, #64]	; 0x40
   16858:	b	1678c <__assert_fail@plt+0x5690>
   1685c:	str	r2, [sp, #36]	; 0x24
   16860:	b	15c74 <__assert_fail@plt+0x4b78>
   16864:	mov	r1, #0
   16868:	str	r3, [sp, #32]
   1686c:	mov	r4, #63	; 0x3f
   16870:	b	15c10 <__assert_fail@plt+0x4b14>
   16874:	ldr	r3, [pc, #384]	; 169fc <__assert_fail@plt+0x5900>
   16878:	str	r3, [sp, #72]	; 0x48
   1687c:	mov	r3, #0
   16880:	str	r3, [sp, #40]	; 0x28
   16884:	mov	r3, #1
   16888:	str	r3, [sp, #68]	; 0x44
   1688c:	mov	r8, r3
   16890:	b	15a24 <__assert_fail@plt+0x4928>
   16894:	bl	110d8 <abort@plt>
   16898:	cmp	fp, #0
   1689c:	beq	168fc <__assert_fail@plt+0x5800>
   168a0:	mov	r2, #1
   168a4:	mov	r3, #34	; 0x22
   168a8:	strb	r3, [r9]
   168ac:	mov	r8, r2
   168b0:	mov	r3, r2
   168b4:	str	r2, [sp, #68]	; 0x44
   168b8:	str	r3, [sp, #56]	; 0x38
   168bc:	ldr	r3, [pc, #316]	; 16a00 <__assert_fail@plt+0x5904>
   168c0:	ldr	r1, [sp, #56]	; 0x38
   168c4:	str	r3, [sp, #72]	; 0x48
   168c8:	ldr	r2, [sp, #176]	; 0xb0
   168cc:	ldr	ip, [sp, #40]	; 0x28
   168d0:	ldr	lr, [sp, #176]	; 0xb0
   168d4:	b	15708 <__assert_fail@plt+0x460c>
   168d8:	ldr	r0, [sp, #44]	; 0x2c
   168dc:	bl	10fe8 <strlen@plt>
   168e0:	str	r0, [sp, #24]
   168e4:	b	165e8 <__assert_fail@plt+0x54ec>
   168e8:	mov	r7, #0
   168ec:	ldr	r1, [sp, #52]	; 0x34
   168f0:	str	r3, [sp, #32]
   168f4:	mov	r4, #48	; 0x30
   168f8:	b	15c10 <__assert_fail@plt+0x4b14>
   168fc:	mov	r3, #1
   16900:	str	r3, [sp, #68]	; 0x44
   16904:	mov	r8, r3
   16908:	b	168b8 <__assert_fail@plt+0x57bc>
   1690c:	mov	r3, #2
   16910:	mov	sl, r9
   16914:	str	r3, [sp, #176]	; 0xb0
   16918:	mov	r9, fp
   1691c:	ldr	r3, [sp, #56]	; 0x38
   16920:	b	1678c <__assert_fail@plt+0x5690>
   16924:	ldr	r6, [sp, #48]	; 0x30
   16928:	b	163d8 <__assert_fail@plt+0x52dc>
   1692c:	ldr	r0, [sp, #24]
   16930:	mov	ip, r6
   16934:	cmp	r0, ip
   16938:	mov	r1, r7
   1693c:	mov	r2, r4
   16940:	ldr	r7, [sp, #104]	; 0x68
   16944:	ldr	r4, [sp, #32]
   16948:	ldr	r6, [sp, #108]	; 0x6c
   1694c:	ldr	r8, [sp, #112]	; 0x70
   16950:	ldr	r5, [sp, #116]	; 0x74
   16954:	bls	16984 <__assert_fail@plt+0x5888>
   16958:	ldrb	r3, [r2]
   1695c:	cmp	r3, #0
   16960:	bne	16974 <__assert_fail@plt+0x5878>
   16964:	b	16a94 <__assert_fail@plt+0x5998>
   16968:	ldrb	r3, [r2, #1]!
   1696c:	cmp	r3, #0
   16970:	beq	16a94 <__assert_fail@plt+0x5998>
   16974:	add	r1, r1, #1
   16978:	add	r3, sl, r1
   1697c:	cmp	r0, r3
   16980:	bhi	16968 <__assert_fail@plt+0x586c>
   16984:	mov	r2, #0
   16988:	mov	r3, r7
   1698c:	str	r2, [sp, #32]
   16990:	b	1675c <__assert_fail@plt+0x5660>
   16994:	mov	r1, r7
   16998:	ldr	r7, [sp, #104]	; 0x68
   1699c:	mov	r2, #0
   169a0:	ldr	r4, [sp, #32]
   169a4:	ldr	r6, [sp, #108]	; 0x6c
   169a8:	ldr	r8, [sp, #112]	; 0x70
   169ac:	ldr	r5, [sp, #116]	; 0x74
   169b0:	mov	r3, r7
   169b4:	str	r2, [sp, #32]
   169b8:	b	1675c <__assert_fail@plt+0x5660>
   169bc:	mov	r3, r5
   169c0:	eor	r3, r3, #1
   169c4:	ldr	r4, [sp, #32]
   169c8:	mov	r1, r7
   169cc:	str	r5, [sp, #32]
   169d0:	ldr	r7, [sp, #104]	; 0x68
   169d4:	ldr	r6, [sp, #108]	; 0x6c
   169d8:	ldr	r8, [sp, #112]	; 0x70
   169dc:	ldr	r5, [sp, #116]	; 0x74
   169e0:	uxtb	r3, r3
   169e4:	b	1675c <__assert_fail@plt+0x5660>
   169e8:	mov	sl, r9
   169ec:	str	r3, [sp, #56]	; 0x38
   169f0:	mov	r9, fp
   169f4:	ldr	r2, [sp, #64]	; 0x40
   169f8:	b	1678c <__assert_fail@plt+0x5690>
   169fc:	ldrdeq	lr, [r1], -ip
   16a00:	ldrdeq	lr, [r1], -r8
   16a04:	andeq	lr, r1, r0, ror #21
   16a08:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   16a0c:	ldr	r2, [sp, #44]	; 0x2c
   16a10:	ldrb	r1, [r2, r3]
   16a14:	sub	r2, r1, #33	; 0x21
   16a18:	uxtb	r2, r2
   16a1c:	cmp	r2, #29
   16a20:	bhi	16aa0 <__assert_fail@plt+0x59a4>
   16a24:	ldr	r0, [pc, #-36]	; 16a08 <__assert_fail@plt+0x590c>
   16a28:	mov	ip, #1
   16a2c:	ands	r2, r0, ip, lsl r2
   16a30:	beq	16ac0 <__assert_fail@plt+0x59c4>
   16a34:	ldr	r2, [sp, #40]	; 0x28
   16a38:	cmp	r2, #0
   16a3c:	bne	16bb4 <__assert_fail@plt+0x5ab8>
   16a40:	add	r2, r8, #1
   16a44:	cmp	fp, r8
   16a48:	strbhi	r4, [r9, r8]
   16a4c:	cmp	fp, r2
   16a50:	movhi	r0, #34	; 0x22
   16a54:	strbhi	r0, [r9, r2]
   16a58:	add	r2, r8, #2
   16a5c:	cmp	fp, r2
   16a60:	movhi	r0, #34	; 0x22
   16a64:	strbhi	r0, [r9, r2]
   16a68:	add	r2, r8, #3
   16a6c:	cmp	fp, r2
   16a70:	mov	sl, r3
   16a74:	ldr	r3, [sp, #40]	; 0x28
   16a78:	movhi	r0, #63	; 0x3f
   16a7c:	mov	r4, r1
   16a80:	strbhi	r0, [r9, r2]
   16a84:	add	r8, r8, #4
   16a88:	mov	r1, r3
   16a8c:	str	r3, [sp, #32]
   16a90:	b	15c10 <__assert_fail@plt+0x4b14>
   16a94:	str	r3, [sp, #32]
   16a98:	mov	r3, r7
   16a9c:	b	1675c <__assert_fail@plt+0x5660>
   16aa0:	mov	r1, #0
   16aa4:	str	r1, [sp, #32]
   16aa8:	b	15c10 <__assert_fail@plt+0x4b14>
   16aac:	mov	sl, r9
   16ab0:	ldr	r3, [sp, #56]	; 0x38
   16ab4:	mov	r9, fp
   16ab8:	ldr	r2, [sp, #64]	; 0x40
   16abc:	b	1678c <__assert_fail@plt+0x5690>
   16ac0:	str	r2, [sp, #32]
   16ac4:	mov	r1, #0
   16ac8:	b	15c10 <__assert_fail@plt+0x4b14>
   16acc:	ldr	r2, [sp, #76]	; 0x4c
   16ad0:	mov	sl, r9
   16ad4:	mov	r9, fp
   16ad8:	mov	fp, r8
   16adc:	ldr	r1, [sp, #72]	; 0x48
   16ae0:	cmp	r1, #0
   16ae4:	moveq	r3, #0
   16ae8:	andne	r3, r2, #1
   16aec:	cmp	r3, #0
   16af0:	beq	16b1c <__assert_fail@plt+0x5a20>
   16af4:	ldrb	r3, [r1]
   16af8:	cmp	r3, #0
   16afc:	beq	16b1c <__assert_fail@plt+0x5a20>
   16b00:	mov	r2, r1
   16b04:	cmp	r9, fp
   16b08:	strbhi	r3, [sl, fp]
   16b0c:	ldrb	r3, [r2, #1]!
   16b10:	add	fp, fp, #1
   16b14:	cmp	r3, #0
   16b18:	bne	16b04 <__assert_fail@plt+0x5a08>
   16b1c:	cmp	r9, fp
   16b20:	movhi	r3, #0
   16b24:	strbhi	r3, [sl, fp]
   16b28:	b	167e4 <__assert_fail@plt+0x56e8>
   16b2c:	ldr	r3, [sp, #192]	; 0xc0
   16b30:	mov	ip, #5
   16b34:	str	r3, [sp, #16]
   16b38:	ldr	r3, [sp, #188]	; 0xbc
   16b3c:	ldr	r2, [sp, #44]	; 0x2c
   16b40:	str	r3, [sp, #12]
   16b44:	ldr	r3, [sp, #184]	; 0xb8
   16b48:	ldr	r1, [sp, #84]	; 0x54
   16b4c:	str	r3, [sp, #8]
   16b50:	ldr	r3, [sp, #180]	; 0xb4
   16b54:	mov	r0, r9
   16b58:	str	r3, [sp, #4]
   16b5c:	str	ip, [sp]
   16b60:	ldr	r3, [sp, #24]
   16b64:	bl	1563c <__assert_fail@plt+0x4540>
   16b68:	mov	fp, r0
   16b6c:	b	167e4 <__assert_fail@plt+0x56e8>
   16b70:	mov	sl, r9
   16b74:	mov	r9, fp
   16b78:	mov	fp, r8
   16b7c:	b	16adc <__assert_fail@plt+0x59e0>
   16b80:	ldr	r1, [sp, #176]	; 0xb0
   16b84:	bl	1551c <__assert_fail@plt+0x4420>
   16b88:	str	r0, [sp, #192]	; 0xc0
   16b8c:	b	15af8 <__assert_fail@plt+0x49fc>
   16b90:	ldr	r1, [sp, #176]	; 0xb0
   16b94:	bl	1551c <__assert_fail@plt+0x4420>
   16b98:	str	r0, [sp, #188]	; 0xbc
   16b9c:	b	15ad8 <__assert_fail@plt+0x49dc>
   16ba0:	mov	sl, r9
   16ba4:	mov	r2, r3
   16ba8:	mov	r9, fp
   16bac:	mov	fp, r8
   16bb0:	b	16adc <__assert_fail@plt+0x59e0>
   16bb4:	mov	sl, r9
   16bb8:	mov	r9, fp
   16bbc:	b	167a0 <__assert_fail@plt+0x56a4>
   16bc0:	push	{r4, r5, r6, lr}
   16bc4:	mov	r5, r0
   16bc8:	bl	11000 <__errno_location@plt>
   16bcc:	cmp	r5, #0
   16bd0:	mov	r1, #48	; 0x30
   16bd4:	mov	r4, r0
   16bd8:	ldr	r0, [pc, #16]	; 16bf0 <__assert_fail@plt+0x5af4>
   16bdc:	ldr	r6, [r4]
   16be0:	movne	r0, r5
   16be4:	bl	1a45c <__assert_fail@plt+0x9360>
   16be8:	str	r6, [r4]
   16bec:	pop	{r4, r5, r6, pc}
   16bf0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16bf4:	ldr	r3, [pc, #12]	; 16c08 <__assert_fail@plt+0x5b0c>
   16bf8:	cmp	r0, #0
   16bfc:	moveq	r0, r3
   16c00:	ldr	r0, [r0]
   16c04:	bx	lr
   16c08:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16c0c:	ldr	r3, [pc, #12]	; 16c20 <__assert_fail@plt+0x5b24>
   16c10:	cmp	r0, #0
   16c14:	moveq	r0, r3
   16c18:	str	r1, [r0]
   16c1c:	bx	lr
   16c20:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16c24:	ldr	r3, [pc, #52]	; 16c60 <__assert_fail@plt+0x5b64>
   16c28:	cmp	r0, #0
   16c2c:	moveq	r0, r3
   16c30:	add	r3, r0, #8
   16c34:	push	{lr}		; (str lr, [sp, #-4]!)
   16c38:	lsr	lr, r1, #5
   16c3c:	and	r1, r1, #31
   16c40:	ldr	ip, [r3, lr, lsl #2]
   16c44:	lsr	r0, ip, r1
   16c48:	eor	r2, r2, r0
   16c4c:	and	r2, r2, #1
   16c50:	and	r0, r0, #1
   16c54:	eor	r1, ip, r2, lsl r1
   16c58:	str	r1, [r3, lr, lsl #2]
   16c5c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c60:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16c64:	ldr	r3, [pc, #16]	; 16c7c <__assert_fail@plt+0x5b80>
   16c68:	cmp	r0, #0
   16c6c:	movne	r3, r0
   16c70:	ldr	r0, [r3, #4]
   16c74:	str	r1, [r3, #4]
   16c78:	bx	lr
   16c7c:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16c80:	ldr	r3, [pc, #44]	; 16cb4 <__assert_fail@plt+0x5bb8>
   16c84:	cmp	r0, #0
   16c88:	moveq	r0, r3
   16c8c:	mov	ip, #10
   16c90:	cmp	r2, #0
   16c94:	cmpne	r1, #0
   16c98:	str	ip, [r0]
   16c9c:	beq	16cac <__assert_fail@plt+0x5bb0>
   16ca0:	str	r1, [r0, #40]	; 0x28
   16ca4:	str	r2, [r0, #44]	; 0x2c
   16ca8:	bx	lr
   16cac:	push	{r4, lr}
   16cb0:	bl	110d8 <abort@plt>
   16cb4:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16cb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16cbc:	sub	sp, sp, #24
   16cc0:	ldr	ip, [pc, #108]	; 16d34 <__assert_fail@plt+0x5c38>
   16cc4:	ldr	r4, [sp, #56]	; 0x38
   16cc8:	mov	r9, r2
   16ccc:	cmp	r4, #0
   16cd0:	moveq	r4, ip
   16cd4:	mov	sl, r3
   16cd8:	mov	r7, r0
   16cdc:	mov	r8, r1
   16ce0:	bl	11000 <__errno_location@plt>
   16ce4:	ldr	r3, [r4, #44]	; 0x2c
   16ce8:	mov	r1, r8
   16cec:	ldr	r6, [r0]
   16cf0:	str	r3, [sp, #16]
   16cf4:	ldr	r2, [r4, #40]	; 0x28
   16cf8:	add	r3, r4, #8
   16cfc:	str	r3, [sp, #8]
   16d00:	str	r2, [sp, #12]
   16d04:	ldr	r2, [r4, #4]
   16d08:	mov	r5, r0
   16d0c:	str	r2, [sp, #4]
   16d10:	ldr	ip, [r4]
   16d14:	mov	r3, sl
   16d18:	mov	r2, r9
   16d1c:	mov	r0, r7
   16d20:	str	ip, [sp]
   16d24:	bl	1563c <__assert_fail@plt+0x4540>
   16d28:	str	r6, [r5]
   16d2c:	add	sp, sp, #24
   16d30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16d34:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16d38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d3c:	cmp	r2, #0
   16d40:	sub	sp, sp, #36	; 0x24
   16d44:	ldr	r4, [pc, #164]	; 16df0 <__assert_fail@plt+0x5cf4>
   16d48:	mov	r8, r1
   16d4c:	movne	r4, r2
   16d50:	mov	r7, r0
   16d54:	bl	11000 <__errno_location@plt>
   16d58:	ldr	r3, [r4, #44]	; 0x2c
   16d5c:	ldr	r5, [r4, #4]
   16d60:	add	r9, r4, #8
   16d64:	orr	r5, r5, #1
   16d68:	mov	r1, #0
   16d6c:	mov	r2, r7
   16d70:	ldr	fp, [r0]
   16d74:	str	r3, [sp, #16]
   16d78:	ldr	r3, [r4, #40]	; 0x28
   16d7c:	stmib	sp, {r5, r9}
   16d80:	str	r3, [sp, #12]
   16d84:	ldr	r3, [r4]
   16d88:	mov	r6, r0
   16d8c:	str	r3, [sp]
   16d90:	mov	r0, r1
   16d94:	mov	r3, r8
   16d98:	bl	1563c <__assert_fail@plt+0x4540>
   16d9c:	add	r1, r0, #1
   16da0:	mov	r0, r1
   16da4:	str	r1, [sp, #28]
   16da8:	bl	19f18 <__assert_fail@plt+0x8e1c>
   16dac:	ldr	r3, [r4, #44]	; 0x2c
   16db0:	ldr	r1, [sp, #28]
   16db4:	str	r3, [sp, #16]
   16db8:	ldr	r3, [r4, #40]	; 0x28
   16dbc:	str	r5, [sp, #4]
   16dc0:	str	r3, [sp, #12]
   16dc4:	str	r9, [sp, #8]
   16dc8:	ldr	ip, [r4]
   16dcc:	mov	r3, r8
   16dd0:	mov	r2, r7
   16dd4:	str	ip, [sp]
   16dd8:	mov	sl, r0
   16ddc:	bl	1563c <__assert_fail@plt+0x4540>
   16de0:	mov	r0, sl
   16de4:	str	fp, [r6]
   16de8:	add	sp, sp, #36	; 0x24
   16dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16df0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16df4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16df8:	cmp	r3, #0
   16dfc:	sub	sp, sp, #44	; 0x2c
   16e00:	ldr	r4, [pc, #192]	; 16ec8 <__assert_fail@plt+0x5dcc>
   16e04:	mov	r6, r2
   16e08:	movne	r4, r3
   16e0c:	mov	r9, r1
   16e10:	mov	r8, r0
   16e14:	bl	11000 <__errno_location@plt>
   16e18:	ldr	r3, [r4, #44]	; 0x2c
   16e1c:	ldr	r5, [r4, #4]
   16e20:	add	sl, r4, #8
   16e24:	cmp	r6, #0
   16e28:	orreq	r5, r5, #1
   16e2c:	mov	r1, #0
   16e30:	ldr	r2, [r0]
   16e34:	str	r3, [sp, #16]
   16e38:	ldr	r3, [r4, #40]	; 0x28
   16e3c:	stmib	sp, {r5, sl}
   16e40:	str	r3, [sp, #12]
   16e44:	ldr	r3, [r4]
   16e48:	mov	r7, r0
   16e4c:	str	r2, [sp, #28]
   16e50:	str	r3, [sp]
   16e54:	mov	r2, r8
   16e58:	mov	r3, r9
   16e5c:	mov	r0, r1
   16e60:	bl	1563c <__assert_fail@plt+0x4540>
   16e64:	add	r1, r0, #1
   16e68:	mov	fp, r0
   16e6c:	mov	r0, r1
   16e70:	str	r1, [sp, #36]	; 0x24
   16e74:	bl	19f18 <__assert_fail@plt+0x8e1c>
   16e78:	ldr	r3, [r4, #44]	; 0x2c
   16e7c:	mov	r2, r8
   16e80:	str	r3, [sp, #16]
   16e84:	ldr	r3, [r4, #40]	; 0x28
   16e88:	str	r5, [sp, #4]
   16e8c:	str	r3, [sp, #12]
   16e90:	str	sl, [sp, #8]
   16e94:	ldr	ip, [r4]
   16e98:	ldr	r1, [sp, #36]	; 0x24
   16e9c:	mov	r3, r9
   16ea0:	str	ip, [sp]
   16ea4:	str	r0, [sp, #32]
   16ea8:	bl	1563c <__assert_fail@plt+0x4540>
   16eac:	ldr	r2, [sp, #28]
   16eb0:	cmp	r6, #0
   16eb4:	str	r2, [r7]
   16eb8:	ldr	r0, [sp, #32]
   16ebc:	strne	fp, [r6]
   16ec0:	add	sp, sp, #44	; 0x2c
   16ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ec8:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   16ecc:	push	{r4, r5, r6, r7, r8, lr}
   16ed0:	ldr	r6, [pc, #116]	; 16f4c <__assert_fail@plt+0x5e50>
   16ed4:	ldr	r3, [r6, #4]
   16ed8:	ldr	r7, [r6]
   16edc:	cmp	r3, #1
   16ee0:	movgt	r5, r7
   16ee4:	movgt	r4, #1
   16ee8:	ble	16f08 <__assert_fail@plt+0x5e0c>
   16eec:	ldr	r0, [r5, #12]
   16ef0:	bl	14c20 <__assert_fail@plt+0x3b24>
   16ef4:	ldr	r3, [r6, #4]
   16ef8:	add	r4, r4, #1
   16efc:	cmp	r3, r4
   16f00:	add	r5, r5, #8
   16f04:	bgt	16eec <__assert_fail@plt+0x5df0>
   16f08:	ldr	r0, [r7, #4]
   16f0c:	ldr	r4, [pc, #60]	; 16f50 <__assert_fail@plt+0x5e54>
   16f10:	cmp	r0, r4
   16f14:	beq	16f28 <__assert_fail@plt+0x5e2c>
   16f18:	bl	14c20 <__assert_fail@plt+0x3b24>
   16f1c:	mov	r3, #256	; 0x100
   16f20:	str	r4, [r6, #12]
   16f24:	str	r3, [r6, #8]
   16f28:	ldr	r4, [pc, #36]	; 16f54 <__assert_fail@plt+0x5e58>
   16f2c:	cmp	r7, r4
   16f30:	beq	16f40 <__assert_fail@plt+0x5e44>
   16f34:	mov	r0, r7
   16f38:	bl	14c20 <__assert_fail@plt+0x3b24>
   16f3c:	str	r4, [r6]
   16f40:	mov	r3, #1
   16f44:	str	r3, [r6, #4]
   16f48:	pop	{r4, r5, r6, r7, r8, pc}
   16f4c:	andeq	pc, r2, r0, asr #2
   16f50:	andeq	pc, r2, r0, asr #4
   16f54:	andeq	pc, r2, r8, asr #2
   16f58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f5c:	sub	sp, sp, #44	; 0x2c
   16f60:	mov	r5, r0
   16f64:	mov	sl, r1
   16f68:	bl	11000 <__errno_location@plt>
   16f6c:	ldr	r4, [pc, #400]	; 17104 <__assert_fail@plt+0x6008>
   16f70:	cmn	r5, #-2147483647	; 0x80000001
   16f74:	ldr	r6, [r4]
   16f78:	mov	r8, r0
   16f7c:	movne	r0, #0
   16f80:	moveq	r0, #1
   16f84:	ldr	r3, [r8]
   16f88:	orrs	r0, r0, r5, lsr #31
   16f8c:	str	r3, [sp, #24]
   16f90:	bne	17100 <__assert_fail@plt+0x6004>
   16f94:	ldr	r2, [r4, #4]
   16f98:	cmp	r5, r2
   16f9c:	blt	16ffc <__assert_fail@plt+0x5f00>
   16fa0:	add	r7, r4, #8
   16fa4:	cmp	r6, r7
   16fa8:	str	r2, [sp, #36]	; 0x24
   16fac:	beq	170d0 <__assert_fail@plt+0x5fd4>
   16fb0:	mov	r3, #8
   16fb4:	sub	r2, r5, r2
   16fb8:	mov	r0, r6
   16fbc:	str	r3, [sp]
   16fc0:	add	r2, r2, #1
   16fc4:	mvn	r3, #-2147483648	; 0x80000000
   16fc8:	add	r1, sp, #36	; 0x24
   16fcc:	bl	1a134 <__assert_fail@plt+0x9038>
   16fd0:	mov	r6, r0
   16fd4:	str	r0, [r4]
   16fd8:	ldr	r0, [r4, #4]
   16fdc:	ldr	r2, [sp, #36]	; 0x24
   16fe0:	mov	r1, #0
   16fe4:	sub	r2, r2, r0
   16fe8:	add	r0, r6, r0, lsl #3
   16fec:	lsl	r2, r2, #3
   16ff0:	bl	11018 <memset@plt>
   16ff4:	ldr	r3, [sp, #36]	; 0x24
   16ff8:	str	r3, [r4, #4]
   16ffc:	ldr	r4, [pc, #260]	; 17108 <__assert_fail@plt+0x600c>
   17000:	add	fp, r6, r5, lsl #3
   17004:	ldr	r9, [r6, r5, lsl #3]
   17008:	ldr	r0, [r4, #4]
   1700c:	ldr	r3, [r4]
   17010:	ldr	r7, [fp, #4]
   17014:	ldr	r1, [r4, #44]	; 0x2c
   17018:	ldr	r2, [r4, #40]	; 0x28
   1701c:	orr	r0, r0, #1
   17020:	str	r3, [sp]
   17024:	add	r3, r4, #8
   17028:	str	r0, [sp, #28]
   1702c:	str	r0, [sp, #4]
   17030:	str	r1, [sp, #16]
   17034:	str	r2, [sp, #12]
   17038:	str	r3, [sp, #8]
   1703c:	mov	r0, r7
   17040:	mov	r1, r9
   17044:	mvn	r3, #0
   17048:	mov	r2, sl
   1704c:	bl	1563c <__assert_fail@plt+0x4540>
   17050:	cmp	r9, r0
   17054:	bhi	170bc <__assert_fail@plt+0x5fc0>
   17058:	add	r3, r4, #48	; 0x30
   1705c:	add	r9, r0, #1
   17060:	cmp	r7, r3
   17064:	str	r9, [r6, r5, lsl #3]
   17068:	beq	17074 <__assert_fail@plt+0x5f78>
   1706c:	mov	r0, r7
   17070:	bl	14c20 <__assert_fail@plt+0x3b24>
   17074:	mov	r0, r9
   17078:	bl	19f18 <__assert_fail@plt+0x8e1c>
   1707c:	ldr	ip, [r4, #44]	; 0x2c
   17080:	ldr	r3, [r4]
   17084:	ldr	lr, [r4, #40]	; 0x28
   17088:	ldr	r4, [pc, #124]	; 1710c <__assert_fail@plt+0x6010>
   1708c:	mov	r2, sl
   17090:	mov	r1, r9
   17094:	str	r0, [fp, #4]
   17098:	str	r4, [sp, #8]
   1709c:	ldr	r4, [sp, #28]
   170a0:	str	r3, [sp]
   170a4:	str	r4, [sp, #4]
   170a8:	str	ip, [sp, #16]
   170ac:	str	lr, [sp, #12]
   170b0:	mvn	r3, #0
   170b4:	mov	r7, r0
   170b8:	bl	1563c <__assert_fail@plt+0x4540>
   170bc:	ldr	r3, [sp, #24]
   170c0:	mov	r0, r7
   170c4:	str	r3, [r8]
   170c8:	add	sp, sp, #44	; 0x2c
   170cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   170d0:	mov	r3, #8
   170d4:	sub	r2, r5, r2
   170d8:	str	r3, [sp]
   170dc:	add	r1, sp, #36	; 0x24
   170e0:	add	r2, r2, #1
   170e4:	mvn	r3, #-2147483648	; 0x80000000
   170e8:	bl	1a134 <__assert_fail@plt+0x9038>
   170ec:	mov	r6, r0
   170f0:	ldm	r7, {r0, r1}
   170f4:	str	r6, [r4]
   170f8:	stm	r6, {r0, r1}
   170fc:	b	16fd8 <__assert_fail@plt+0x5edc>
   17100:	bl	110d8 <abort@plt>
   17104:	andeq	pc, r2, r0, asr #2
   17108:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   1710c:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   17110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17114:	sub	sp, sp, #52	; 0x34
   17118:	mov	r5, r0
   1711c:	mov	sl, r1
   17120:	mov	fp, r2
   17124:	bl	11000 <__errno_location@plt>
   17128:	ldr	r4, [pc, #408]	; 172c8 <__assert_fail@plt+0x61cc>
   1712c:	cmn	r5, #-2147483647	; 0x80000001
   17130:	ldr	r6, [r4]
   17134:	mov	r8, r0
   17138:	movne	r0, #0
   1713c:	moveq	r0, #1
   17140:	ldr	r3, [r8]
   17144:	orrs	r0, r0, r5, lsr #31
   17148:	str	r3, [sp, #28]
   1714c:	bne	172c4 <__assert_fail@plt+0x61c8>
   17150:	ldr	r2, [r4, #4]
   17154:	cmp	r5, r2
   17158:	blt	171b8 <__assert_fail@plt+0x60bc>
   1715c:	add	r7, r4, #8
   17160:	cmp	r6, r7
   17164:	str	r2, [sp, #44]	; 0x2c
   17168:	beq	17294 <__assert_fail@plt+0x6198>
   1716c:	mov	r3, #8
   17170:	sub	r2, r5, r2
   17174:	mov	r0, r6
   17178:	str	r3, [sp]
   1717c:	add	r2, r2, #1
   17180:	mvn	r3, #-2147483648	; 0x80000000
   17184:	add	r1, sp, #44	; 0x2c
   17188:	bl	1a134 <__assert_fail@plt+0x9038>
   1718c:	mov	r6, r0
   17190:	str	r0, [r4]
   17194:	ldr	r0, [r4, #4]
   17198:	ldr	r2, [sp, #44]	; 0x2c
   1719c:	mov	r1, #0
   171a0:	sub	r2, r2, r0
   171a4:	add	r0, r6, r0, lsl #3
   171a8:	lsl	r2, r2, #3
   171ac:	bl	11018 <memset@plt>
   171b0:	ldr	r3, [sp, #44]	; 0x2c
   171b4:	str	r3, [r4, #4]
   171b8:	ldr	r4, [pc, #268]	; 172cc <__assert_fail@plt+0x61d0>
   171bc:	add	r3, r6, r5, lsl #3
   171c0:	str	r3, [sp, #32]
   171c4:	ldr	r7, [r3, #4]
   171c8:	ldr	r0, [r4, #4]
   171cc:	ldr	r3, [r4]
   171d0:	ldr	r9, [r6, r5, lsl #3]
   171d4:	ldr	r1, [r4, #44]	; 0x2c
   171d8:	ldr	r2, [r4, #40]	; 0x28
   171dc:	orr	r0, r0, #1
   171e0:	str	r3, [sp]
   171e4:	add	r3, r4, #8
   171e8:	str	r0, [sp, #36]	; 0x24
   171ec:	str	r0, [sp, #4]
   171f0:	str	r1, [sp, #16]
   171f4:	str	r2, [sp, #12]
   171f8:	str	r3, [sp, #8]
   171fc:	mov	r0, r7
   17200:	mov	r1, r9
   17204:	mov	r3, fp
   17208:	mov	r2, sl
   1720c:	bl	1563c <__assert_fail@plt+0x4540>
   17210:	cmp	r9, r0
   17214:	bhi	17280 <__assert_fail@plt+0x6184>
   17218:	add	r3, r4, #48	; 0x30
   1721c:	add	r9, r0, #1
   17220:	cmp	r7, r3
   17224:	str	r9, [r6, r5, lsl #3]
   17228:	beq	17234 <__assert_fail@plt+0x6138>
   1722c:	mov	r0, r7
   17230:	bl	14c20 <__assert_fail@plt+0x3b24>
   17234:	mov	r0, r9
   17238:	bl	19f18 <__assert_fail@plt+0x8e1c>
   1723c:	ldr	ip, [sp, #32]
   17240:	ldr	lr, [r4, #44]	; 0x2c
   17244:	ldr	r5, [r4, #40]	; 0x28
   17248:	mov	r3, fp
   1724c:	mov	r2, sl
   17250:	mov	r1, r9
   17254:	str	r0, [ip, #4]
   17258:	ldr	ip, [r4]
   1725c:	ldr	r4, [pc, #108]	; 172d0 <__assert_fail@plt+0x61d4>
   17260:	str	lr, [sp, #16]
   17264:	str	r4, [sp, #8]
   17268:	ldr	r4, [sp, #36]	; 0x24
   1726c:	str	r5, [sp, #12]
   17270:	str	r4, [sp, #4]
   17274:	str	ip, [sp]
   17278:	mov	r7, r0
   1727c:	bl	1563c <__assert_fail@plt+0x4540>
   17280:	ldr	r3, [sp, #28]
   17284:	mov	r0, r7
   17288:	str	r3, [r8]
   1728c:	add	sp, sp, #52	; 0x34
   17290:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17294:	mov	r3, #8
   17298:	sub	r2, r5, r2
   1729c:	str	r3, [sp]
   172a0:	add	r1, sp, #44	; 0x2c
   172a4:	add	r2, r2, #1
   172a8:	mvn	r3, #-2147483648	; 0x80000000
   172ac:	bl	1a134 <__assert_fail@plt+0x9038>
   172b0:	mov	r6, r0
   172b4:	ldm	r7, {r0, r1}
   172b8:	str	r6, [r4]
   172bc:	stm	r6, {r0, r1}
   172c0:	b	17194 <__assert_fail@plt+0x6098>
   172c4:	bl	110d8 <abort@plt>
   172c8:	andeq	pc, r2, r0, asr #2
   172cc:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   172d0:	andeq	pc, r2, r8, lsl r2	; <UNPREDICTABLE>
   172d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172d8:	sub	sp, sp, #44	; 0x2c
   172dc:	mov	sl, r0
   172e0:	bl	11000 <__errno_location@plt>
   172e4:	ldr	r4, [pc, #352]	; 1744c <__assert_fail@plt+0x6350>
   172e8:	ldr	r2, [r4, #4]
   172ec:	ldr	r5, [r4]
   172f0:	cmp	r2, #0
   172f4:	ldr	r3, [r0]
   172f8:	mov	r8, r0
   172fc:	str	r3, [sp, #28]
   17300:	bgt	1735c <__assert_fail@plt+0x6260>
   17304:	add	r6, r4, #8
   17308:	cmp	r5, r6
   1730c:	str	r2, [sp, #36]	; 0x24
   17310:	beq	1741c <__assert_fail@plt+0x6320>
   17314:	mov	r3, #8
   17318:	mov	r0, r5
   1731c:	str	r3, [sp]
   17320:	rsb	r2, r2, #1
   17324:	mvn	r3, #-2147483648	; 0x80000000
   17328:	add	r1, sp, #36	; 0x24
   1732c:	bl	1a134 <__assert_fail@plt+0x9038>
   17330:	mov	r5, r0
   17334:	str	r0, [r4]
   17338:	ldr	r0, [r4, #4]
   1733c:	ldr	r2, [sp, #36]	; 0x24
   17340:	mov	r1, #0
   17344:	sub	r2, r2, r0
   17348:	add	r0, r5, r0, lsl #3
   1734c:	lsl	r2, r2, #3
   17350:	bl	11018 <memset@plt>
   17354:	ldr	r3, [sp, #36]	; 0x24
   17358:	str	r3, [r4, #4]
   1735c:	ldr	r4, [pc, #236]	; 17450 <__assert_fail@plt+0x6354>
   17360:	ldr	r9, [r5]
   17364:	ldr	r6, [r5, #4]
   17368:	ldr	r7, [r4, #4]
   1736c:	ldr	r1, [r4, #44]	; 0x2c
   17370:	ldr	r2, [r4, #40]	; 0x28
   17374:	ldr	r3, [r4]
   17378:	orr	r7, r7, #1
   1737c:	add	fp, r4, #8
   17380:	str	r1, [sp, #16]
   17384:	str	r2, [sp, #12]
   17388:	str	r3, [sp]
   1738c:	str	r7, [sp, #4]
   17390:	str	fp, [sp, #8]
   17394:	mov	r1, r9
   17398:	mov	r0, r6
   1739c:	mvn	r3, #0
   173a0:	mov	r2, sl
   173a4:	bl	1563c <__assert_fail@plt+0x4540>
   173a8:	cmp	r9, r0
   173ac:	bhi	17408 <__assert_fail@plt+0x630c>
   173b0:	add	r3, r4, #48	; 0x30
   173b4:	add	r9, r0, #1
   173b8:	cmp	r6, r3
   173bc:	str	r9, [r5]
   173c0:	beq	173cc <__assert_fail@plt+0x62d0>
   173c4:	mov	r0, r6
   173c8:	bl	14c20 <__assert_fail@plt+0x3b24>
   173cc:	mov	r0, r9
   173d0:	bl	19f18 <__assert_fail@plt+0x8e1c>
   173d4:	ldr	ip, [r4, #44]	; 0x2c
   173d8:	ldr	r3, [r4]
   173dc:	ldr	lr, [r4, #40]	; 0x28
   173e0:	mov	r2, sl
   173e4:	mov	r1, r9
   173e8:	str	r0, [r5, #4]
   173ec:	str	r3, [sp]
   173f0:	stmib	sp, {r7, fp}
   173f4:	str	ip, [sp, #16]
   173f8:	str	lr, [sp, #12]
   173fc:	mvn	r3, #0
   17400:	mov	r6, r0
   17404:	bl	1563c <__assert_fail@plt+0x4540>
   17408:	ldr	r3, [sp, #28]
   1740c:	mov	r0, r6
   17410:	str	r3, [r8]
   17414:	add	sp, sp, #44	; 0x2c
   17418:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1741c:	mov	r3, #8
   17420:	str	r3, [sp]
   17424:	add	r1, sp, #36	; 0x24
   17428:	rsb	r2, r2, #1
   1742c:	mvn	r3, #-2147483648	; 0x80000000
   17430:	mov	r0, #0
   17434:	bl	1a134 <__assert_fail@plt+0x9038>
   17438:	mov	r5, r0
   1743c:	ldm	r6, {r0, r1}
   17440:	str	r5, [r4]
   17444:	stm	r5, {r0, r1}
   17448:	b	17338 <__assert_fail@plt+0x623c>
   1744c:	andeq	pc, r2, r0, asr #2
   17450:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   17454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17458:	sub	sp, sp, #44	; 0x2c
   1745c:	mov	r9, r0
   17460:	mov	sl, r1
   17464:	bl	11000 <__errno_location@plt>
   17468:	ldr	r4, [pc, #364]	; 175dc <__assert_fail@plt+0x64e0>
   1746c:	ldr	r2, [r4, #4]
   17470:	ldr	r5, [r4]
   17474:	cmp	r2, #0
   17478:	ldr	r3, [r0]
   1747c:	mov	r7, r0
   17480:	str	r3, [sp, #24]
   17484:	bgt	174e0 <__assert_fail@plt+0x63e4>
   17488:	add	r6, r4, #8
   1748c:	cmp	r5, r6
   17490:	str	r2, [sp, #36]	; 0x24
   17494:	beq	175ac <__assert_fail@plt+0x64b0>
   17498:	mov	r3, #8
   1749c:	mov	r0, r5
   174a0:	str	r3, [sp]
   174a4:	rsb	r2, r2, #1
   174a8:	mvn	r3, #-2147483648	; 0x80000000
   174ac:	add	r1, sp, #36	; 0x24
   174b0:	bl	1a134 <__assert_fail@plt+0x9038>
   174b4:	mov	r5, r0
   174b8:	str	r0, [r4]
   174bc:	ldr	r0, [r4, #4]
   174c0:	ldr	r2, [sp, #36]	; 0x24
   174c4:	mov	r1, #0
   174c8:	sub	r2, r2, r0
   174cc:	add	r0, r5, r0, lsl #3
   174d0:	lsl	r2, r2, #3
   174d4:	bl	11018 <memset@plt>
   174d8:	ldr	r3, [sp, #36]	; 0x24
   174dc:	str	r3, [r4, #4]
   174e0:	ldr	r4, [pc, #248]	; 175e0 <__assert_fail@plt+0x64e4>
   174e4:	ldr	r8, [r5]
   174e8:	ldr	r6, [r5, #4]
   174ec:	ldr	r0, [r4, #4]
   174f0:	ldr	r1, [r4, #44]	; 0x2c
   174f4:	ldr	r2, [r4, #40]	; 0x28
   174f8:	ldr	r3, [r4]
   174fc:	orr	r0, r0, #1
   17500:	add	fp, r4, #8
   17504:	str	r0, [sp, #28]
   17508:	str	r0, [sp, #4]
   1750c:	str	r1, [sp, #16]
   17510:	str	r2, [sp, #12]
   17514:	str	r3, [sp]
   17518:	str	fp, [sp, #8]
   1751c:	mov	r1, r8
   17520:	mov	r0, r6
   17524:	mov	r3, sl
   17528:	mov	r2, r9
   1752c:	bl	1563c <__assert_fail@plt+0x4540>
   17530:	cmp	r8, r0
   17534:	bhi	17598 <__assert_fail@plt+0x649c>
   17538:	add	r3, r4, #48	; 0x30
   1753c:	add	r8, r0, #1
   17540:	cmp	r6, r3
   17544:	str	r8, [r5]
   17548:	beq	17554 <__assert_fail@plt+0x6458>
   1754c:	mov	r0, r6
   17550:	bl	14c20 <__assert_fail@plt+0x3b24>
   17554:	mov	r0, r8
   17558:	bl	19f18 <__assert_fail@plt+0x8e1c>
   1755c:	ldr	lr, [r4, #44]	; 0x2c
   17560:	ldr	ip, [r4]
   17564:	mov	r3, sl
   17568:	mov	r2, r9
   1756c:	mov	r1, r8
   17570:	str	r0, [r5, #4]
   17574:	ldr	r5, [r4, #40]	; 0x28
   17578:	ldr	r4, [sp, #28]
   1757c:	str	fp, [sp, #8]
   17580:	str	r4, [sp, #4]
   17584:	str	lr, [sp, #16]
   17588:	str	r5, [sp, #12]
   1758c:	str	ip, [sp]
   17590:	mov	r6, r0
   17594:	bl	1563c <__assert_fail@plt+0x4540>
   17598:	ldr	r3, [sp, #24]
   1759c:	mov	r0, r6
   175a0:	str	r3, [r7]
   175a4:	add	sp, sp, #44	; 0x2c
   175a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ac:	mov	r3, #8
   175b0:	str	r3, [sp]
   175b4:	add	r1, sp, #36	; 0x24
   175b8:	rsb	r2, r2, #1
   175bc:	mvn	r3, #-2147483648	; 0x80000000
   175c0:	mov	r0, #0
   175c4:	bl	1a134 <__assert_fail@plt+0x9038>
   175c8:	mov	r5, r0
   175cc:	ldm	r6, {r0, r1}
   175d0:	str	r5, [r4]
   175d4:	stm	r5, {r0, r1}
   175d8:	b	174bc <__assert_fail@plt+0x63c0>
   175dc:	andeq	pc, r2, r0, asr #2
   175e0:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   175e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175e8:	sub	sp, sp, #132	; 0x84
   175ec:	mov	r5, r1
   175f0:	mov	r4, r0
   175f4:	mov	r9, r2
   175f8:	add	r0, sp, #80	; 0x50
   175fc:	mov	r2, #48	; 0x30
   17600:	mov	r1, #0
   17604:	bl	11018 <memset@plt>
   17608:	cmp	r5, #10
   1760c:	beq	177c4 <__assert_fail@plt+0x66c8>
   17610:	add	lr, sp, #80	; 0x50
   17614:	str	r5, [sp, #80]	; 0x50
   17618:	ldm	lr!, {r0, r1, r2, r3}
   1761c:	add	ip, sp, #32
   17620:	ldr	r6, [pc, #416]	; 177c8 <__assert_fail@plt+0x66cc>
   17624:	stmia	ip!, {r0, r1, r2, r3}
   17628:	ldm	lr!, {r0, r1, r2, r3}
   1762c:	stmia	ip!, {r0, r1, r2, r3}
   17630:	ldm	lr, {r0, r1, r2, r3}
   17634:	stm	ip, {r0, r1, r2, r3}
   17638:	bl	11000 <__errno_location@plt>
   1763c:	cmn	r4, #-2147483647	; 0x80000001
   17640:	ldr	r5, [r6]
   17644:	mov	r7, r0
   17648:	movne	r0, #0
   1764c:	moveq	r0, #1
   17650:	ldr	r3, [r7]
   17654:	orrs	r0, r0, r4, lsr #31
   17658:	str	r3, [sp, #24]
   1765c:	bne	177c4 <__assert_fail@plt+0x66c8>
   17660:	ldr	r2, [r6, #4]
   17664:	cmp	r4, r2
   17668:	blt	176c8 <__assert_fail@plt+0x65cc>
   1766c:	add	r8, r6, #8
   17670:	cmp	r5, r8
   17674:	str	r2, [sp, #80]	; 0x50
   17678:	beq	17794 <__assert_fail@plt+0x6698>
   1767c:	mov	r3, #8
   17680:	sub	r2, r4, r2
   17684:	mov	r0, r5
   17688:	str	r3, [sp]
   1768c:	add	r2, r2, #1
   17690:	add	r1, sp, #80	; 0x50
   17694:	mvn	r3, #-2147483648	; 0x80000000
   17698:	bl	1a134 <__assert_fail@plt+0x9038>
   1769c:	mov	r5, r0
   176a0:	str	r0, [r6]
   176a4:	ldr	r0, [r6, #4]
   176a8:	ldr	r2, [sp, #80]	; 0x50
   176ac:	mov	r1, #0
   176b0:	sub	r2, r2, r0
   176b4:	add	r0, r5, r0, lsl #3
   176b8:	lsl	r2, r2, #3
   176bc:	bl	11018 <memset@plt>
   176c0:	ldr	r3, [sp, #80]	; 0x50
   176c4:	str	r3, [r6, #4]
   176c8:	add	fp, r5, r4, lsl #3
   176cc:	ldr	r1, [sp, #36]	; 0x24
   176d0:	ldr	r8, [r5, r4, lsl #3]
   176d4:	ldr	r6, [fp, #4]
   176d8:	ldr	r2, [sp, #72]	; 0x48
   176dc:	ldr	r3, [sp, #32]
   176e0:	ldr	ip, [sp, #76]	; 0x4c
   176e4:	orr	r1, r1, #1
   176e8:	add	sl, sp, #40	; 0x28
   176ec:	str	r1, [sp, #28]
   176f0:	str	r1, [sp, #4]
   176f4:	str	r2, [sp, #12]
   176f8:	str	r3, [sp]
   176fc:	mov	r0, r6
   17700:	mov	r1, r8
   17704:	str	ip, [sp, #16]
   17708:	str	sl, [sp, #8]
   1770c:	mvn	r3, #0
   17710:	mov	r2, r9
   17714:	bl	1563c <__assert_fail@plt+0x4540>
   17718:	cmp	r8, r0
   1771c:	bhi	17780 <__assert_fail@plt+0x6684>
   17720:	ldr	r3, [pc, #164]	; 177cc <__assert_fail@plt+0x66d0>
   17724:	add	r8, r0, #1
   17728:	cmp	r6, r3
   1772c:	str	r8, [r5, r4, lsl #3]
   17730:	beq	1773c <__assert_fail@plt+0x6640>
   17734:	mov	r0, r6
   17738:	bl	14c20 <__assert_fail@plt+0x3b24>
   1773c:	mov	r0, r8
   17740:	bl	19f18 <__assert_fail@plt+0x8e1c>
   17744:	ldr	lr, [sp, #76]	; 0x4c
   17748:	ldr	r3, [sp, #32]
   1774c:	ldr	ip, [sp, #72]	; 0x48
   17750:	ldr	r4, [sp, #28]
   17754:	mov	r2, r9
   17758:	mov	r1, r8
   1775c:	str	r0, [fp, #4]
   17760:	str	r3, [sp]
   17764:	str	sl, [sp, #8]
   17768:	str	r4, [sp, #4]
   1776c:	str	lr, [sp, #16]
   17770:	str	ip, [sp, #12]
   17774:	mvn	r3, #0
   17778:	mov	r6, r0
   1777c:	bl	1563c <__assert_fail@plt+0x4540>
   17780:	ldr	r3, [sp, #24]
   17784:	mov	r0, r6
   17788:	str	r3, [r7]
   1778c:	add	sp, sp, #132	; 0x84
   17790:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17794:	mov	r3, #8
   17798:	sub	r2, r4, r2
   1779c:	add	r1, sp, #80	; 0x50
   177a0:	str	r3, [sp]
   177a4:	add	r2, r2, #1
   177a8:	mvn	r3, #-2147483648	; 0x80000000
   177ac:	bl	1a134 <__assert_fail@plt+0x9038>
   177b0:	mov	r5, r0
   177b4:	ldm	r8, {r0, r1}
   177b8:	str	r5, [r6]
   177bc:	stm	r5, {r0, r1}
   177c0:	b	176a4 <__assert_fail@plt+0x65a8>
   177c4:	bl	110d8 <abort@plt>
   177c8:	andeq	pc, r2, r0, asr #2
   177cc:	andeq	pc, r2, r0, asr #4
   177d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177d4:	sub	sp, sp, #132	; 0x84
   177d8:	mov	r5, r1
   177dc:	mov	r4, r0
   177e0:	mov	r9, r2
   177e4:	add	r0, sp, #80	; 0x50
   177e8:	mov	r2, #48	; 0x30
   177ec:	mov	r1, #0
   177f0:	mov	sl, r3
   177f4:	bl	11018 <memset@plt>
   177f8:	cmp	r5, #10
   177fc:	beq	179b8 <__assert_fail@plt+0x68bc>
   17800:	add	lr, sp, #80	; 0x50
   17804:	str	r5, [sp, #80]	; 0x50
   17808:	ldm	lr!, {r0, r1, r2, r3}
   1780c:	add	ip, sp, #32
   17810:	ldr	r6, [pc, #420]	; 179bc <__assert_fail@plt+0x68c0>
   17814:	stmia	ip!, {r0, r1, r2, r3}
   17818:	ldm	lr!, {r0, r1, r2, r3}
   1781c:	stmia	ip!, {r0, r1, r2, r3}
   17820:	ldm	lr, {r0, r1, r2, r3}
   17824:	stm	ip, {r0, r1, r2, r3}
   17828:	bl	11000 <__errno_location@plt>
   1782c:	cmn	r4, #-2147483647	; 0x80000001
   17830:	ldr	r5, [r6]
   17834:	mov	r7, r0
   17838:	movne	r0, #0
   1783c:	moveq	r0, #1
   17840:	ldr	r3, [r7]
   17844:	orrs	r0, r0, r4, lsr #31
   17848:	str	r3, [sp, #24]
   1784c:	bne	179b8 <__assert_fail@plt+0x68bc>
   17850:	ldr	r2, [r6, #4]
   17854:	cmp	r4, r2
   17858:	blt	178b8 <__assert_fail@plt+0x67bc>
   1785c:	add	r8, r6, #8
   17860:	cmp	r5, r8
   17864:	str	r2, [sp, #80]	; 0x50
   17868:	beq	17988 <__assert_fail@plt+0x688c>
   1786c:	mov	r3, #8
   17870:	sub	r2, r4, r2
   17874:	mov	r0, r5
   17878:	str	r3, [sp]
   1787c:	add	r2, r2, #1
   17880:	add	r1, sp, #80	; 0x50
   17884:	mvn	r3, #-2147483648	; 0x80000000
   17888:	bl	1a134 <__assert_fail@plt+0x9038>
   1788c:	mov	r5, r0
   17890:	str	r0, [r6]
   17894:	ldr	r0, [r6, #4]
   17898:	ldr	r2, [sp, #80]	; 0x50
   1789c:	mov	r1, #0
   178a0:	sub	r2, r2, r0
   178a4:	add	r0, r5, r0, lsl #3
   178a8:	lsl	r2, r2, #3
   178ac:	bl	11018 <memset@plt>
   178b0:	ldr	r3, [sp, #80]	; 0x50
   178b4:	str	r3, [r6, #4]
   178b8:	add	fp, r5, r4, lsl #3
   178bc:	ldr	r3, [sp, #32]
   178c0:	ldr	r1, [sp, #36]	; 0x24
   178c4:	ldr	r8, [r5, r4, lsl #3]
   178c8:	ldr	r6, [fp, #4]
   178cc:	ldr	r2, [sp, #72]	; 0x48
   178d0:	ldr	ip, [sp, #76]	; 0x4c
   178d4:	orr	r1, r1, #1
   178d8:	str	r3, [sp]
   178dc:	add	r3, sp, #40	; 0x28
   178e0:	str	r1, [sp, #28]
   178e4:	str	r1, [sp, #4]
   178e8:	str	r2, [sp, #12]
   178ec:	str	r3, [sp, #8]
   178f0:	mov	r0, r6
   178f4:	mov	r1, r8
   178f8:	str	ip, [sp, #16]
   178fc:	mov	r3, sl
   17900:	mov	r2, r9
   17904:	bl	1563c <__assert_fail@plt+0x4540>
   17908:	cmp	r8, r0
   1790c:	bhi	17974 <__assert_fail@plt+0x6878>
   17910:	ldr	r3, [pc, #168]	; 179c0 <__assert_fail@plt+0x68c4>
   17914:	add	r8, r0, #1
   17918:	cmp	r6, r3
   1791c:	str	r8, [r5, r4, lsl #3]
   17920:	beq	1792c <__assert_fail@plt+0x6830>
   17924:	mov	r0, r6
   17928:	bl	14c20 <__assert_fail@plt+0x3b24>
   1792c:	mov	r0, r8
   17930:	bl	19f18 <__assert_fail@plt+0x8e1c>
   17934:	add	lr, sp, #40	; 0x28
   17938:	ldr	ip, [sp, #76]	; 0x4c
   1793c:	ldr	r4, [sp, #72]	; 0x48
   17940:	ldr	r5, [sp, #28]
   17944:	mov	r3, sl
   17948:	mov	r2, r9
   1794c:	mov	r1, r8
   17950:	str	r0, [fp, #4]
   17954:	str	lr, [sp, #8]
   17958:	ldr	lr, [sp, #32]
   1795c:	str	r5, [sp, #4]
   17960:	str	ip, [sp, #16]
   17964:	str	r4, [sp, #12]
   17968:	str	lr, [sp]
   1796c:	mov	r6, r0
   17970:	bl	1563c <__assert_fail@plt+0x4540>
   17974:	ldr	r3, [sp, #24]
   17978:	mov	r0, r6
   1797c:	str	r3, [r7]
   17980:	add	sp, sp, #132	; 0x84
   17984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17988:	mov	r3, #8
   1798c:	sub	r2, r4, r2
   17990:	add	r1, sp, #80	; 0x50
   17994:	str	r3, [sp]
   17998:	add	r2, r2, #1
   1799c:	mvn	r3, #-2147483648	; 0x80000000
   179a0:	bl	1a134 <__assert_fail@plt+0x9038>
   179a4:	mov	r5, r0
   179a8:	ldm	r8, {r0, r1}
   179ac:	str	r5, [r6]
   179b0:	stm	r5, {r0, r1}
   179b4:	b	17894 <__assert_fail@plt+0x6798>
   179b8:	bl	110d8 <abort@plt>
   179bc:	andeq	pc, r2, r0, asr #2
   179c0:	andeq	pc, r2, r0, asr #4
   179c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   179c8:	sub	sp, sp, #124	; 0x7c
   179cc:	mov	r4, r0
   179d0:	mov	r9, r1
   179d4:	add	r0, sp, #72	; 0x48
   179d8:	mov	r2, #48	; 0x30
   179dc:	mov	r1, #0
   179e0:	bl	11018 <memset@plt>
   179e4:	cmp	r4, #10
   179e8:	beq	17b74 <__assert_fail@plt+0x6a78>
   179ec:	add	lr, sp, #72	; 0x48
   179f0:	str	r4, [sp, #72]	; 0x48
   179f4:	ldm	lr!, {r0, r1, r2, r3}
   179f8:	add	ip, sp, #24
   179fc:	ldr	r5, [pc, #372]	; 17b78 <__assert_fail@plt+0x6a7c>
   17a00:	stmia	ip!, {r0, r1, r2, r3}
   17a04:	ldm	lr!, {r0, r1, r2, r3}
   17a08:	stmia	ip!, {r0, r1, r2, r3}
   17a0c:	ldm	lr, {r0, r1, r2, r3}
   17a10:	stm	ip, {r0, r1, r2, r3}
   17a14:	bl	11000 <__errno_location@plt>
   17a18:	ldr	r2, [r5, #4]
   17a1c:	ldr	r4, [r5]
   17a20:	cmp	r2, #0
   17a24:	mov	r7, r0
   17a28:	ldr	fp, [r0]
   17a2c:	bgt	17a88 <__assert_fail@plt+0x698c>
   17a30:	add	r6, r5, #8
   17a34:	cmp	r4, r6
   17a38:	str	r2, [sp, #72]	; 0x48
   17a3c:	beq	17b44 <__assert_fail@plt+0x6a48>
   17a40:	mov	r3, #8
   17a44:	mov	r0, r4
   17a48:	str	r3, [sp]
   17a4c:	rsb	r2, r2, #1
   17a50:	add	r1, sp, #72	; 0x48
   17a54:	mvn	r3, #-2147483648	; 0x80000000
   17a58:	bl	1a134 <__assert_fail@plt+0x9038>
   17a5c:	mov	r4, r0
   17a60:	str	r0, [r5]
   17a64:	ldr	r0, [r5, #4]
   17a68:	ldr	r2, [sp, #72]	; 0x48
   17a6c:	mov	r1, #0
   17a70:	sub	r2, r2, r0
   17a74:	add	r0, r4, r0, lsl #3
   17a78:	lsl	r2, r2, #3
   17a7c:	bl	11018 <memset@plt>
   17a80:	ldr	r3, [sp, #72]	; 0x48
   17a84:	str	r3, [r5, #4]
   17a88:	ldr	r6, [sp, #28]
   17a8c:	ldr	r8, [r4]
   17a90:	ldr	r5, [r4, #4]
   17a94:	ldr	r2, [sp, #64]	; 0x40
   17a98:	ldr	r3, [sp, #24]
   17a9c:	ldr	ip, [sp, #68]	; 0x44
   17aa0:	orr	r6, r6, #1
   17aa4:	add	sl, sp, #32
   17aa8:	str	r2, [sp, #12]
   17aac:	str	r3, [sp]
   17ab0:	str	r6, [sp, #4]
   17ab4:	mov	r1, r8
   17ab8:	mov	r0, r5
   17abc:	str	ip, [sp, #16]
   17ac0:	str	sl, [sp, #8]
   17ac4:	mvn	r3, #0
   17ac8:	mov	r2, r9
   17acc:	bl	1563c <__assert_fail@plt+0x4540>
   17ad0:	cmp	r8, r0
   17ad4:	bhi	17b34 <__assert_fail@plt+0x6a38>
   17ad8:	ldr	r3, [pc, #156]	; 17b7c <__assert_fail@plt+0x6a80>
   17adc:	add	r8, r0, #1
   17ae0:	cmp	r5, r3
   17ae4:	str	r8, [r4]
   17ae8:	beq	17af4 <__assert_fail@plt+0x69f8>
   17aec:	mov	r0, r5
   17af0:	bl	14c20 <__assert_fail@plt+0x3b24>
   17af4:	mov	r0, r8
   17af8:	bl	19f18 <__assert_fail@plt+0x8e1c>
   17afc:	ldr	lr, [sp, #68]	; 0x44
   17b00:	ldr	r3, [sp, #24]
   17b04:	ldr	ip, [sp, #64]	; 0x40
   17b08:	mov	r2, r9
   17b0c:	mov	r1, r8
   17b10:	str	r0, [r4, #4]
   17b14:	str	r3, [sp]
   17b18:	str	sl, [sp, #8]
   17b1c:	str	r6, [sp, #4]
   17b20:	str	lr, [sp, #16]
   17b24:	str	ip, [sp, #12]
   17b28:	mvn	r3, #0
   17b2c:	mov	r5, r0
   17b30:	bl	1563c <__assert_fail@plt+0x4540>
   17b34:	mov	r0, r5
   17b38:	str	fp, [r7]
   17b3c:	add	sp, sp, #124	; 0x7c
   17b40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17b44:	mov	r3, #8
   17b48:	add	r1, sp, #72	; 0x48
   17b4c:	str	r3, [sp]
   17b50:	rsb	r2, r2, #1
   17b54:	mvn	r3, #-2147483648	; 0x80000000
   17b58:	mov	r0, #0
   17b5c:	bl	1a134 <__assert_fail@plt+0x9038>
   17b60:	mov	r4, r0
   17b64:	ldm	r6, {r0, r1}
   17b68:	str	r4, [r5]
   17b6c:	stm	r4, {r0, r1}
   17b70:	b	17a64 <__assert_fail@plt+0x6968>
   17b74:	bl	110d8 <abort@plt>
   17b78:	andeq	pc, r2, r0, asr #2
   17b7c:	andeq	pc, r2, r0, asr #4
   17b80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17b84:	sub	sp, sp, #132	; 0x84
   17b88:	mov	r4, r0
   17b8c:	mov	r9, r1
   17b90:	mov	sl, r2
   17b94:	add	r0, sp, #80	; 0x50
   17b98:	mov	r2, #48	; 0x30
   17b9c:	mov	r1, #0
   17ba0:	bl	11018 <memset@plt>
   17ba4:	cmp	r4, #10
   17ba8:	beq	17d3c <__assert_fail@plt+0x6c40>
   17bac:	add	lr, sp, #80	; 0x50
   17bb0:	str	r4, [sp, #80]	; 0x50
   17bb4:	ldm	lr!, {r0, r1, r2, r3}
   17bb8:	add	ip, sp, #32
   17bbc:	ldr	r5, [pc, #380]	; 17d40 <__assert_fail@plt+0x6c44>
   17bc0:	stmia	ip!, {r0, r1, r2, r3}
   17bc4:	ldm	lr!, {r0, r1, r2, r3}
   17bc8:	stmia	ip!, {r0, r1, r2, r3}
   17bcc:	ldm	lr, {r0, r1, r2, r3}
   17bd0:	stm	ip, {r0, r1, r2, r3}
   17bd4:	bl	11000 <__errno_location@plt>
   17bd8:	ldr	r2, [r5, #4]
   17bdc:	ldr	r4, [r5]
   17be0:	cmp	r2, #0
   17be4:	ldr	r3, [r0]
   17be8:	mov	r7, r0
   17bec:	str	r3, [sp, #28]
   17bf0:	bgt	17c4c <__assert_fail@plt+0x6b50>
   17bf4:	add	r6, r5, #8
   17bf8:	cmp	r4, r6
   17bfc:	str	r2, [sp, #80]	; 0x50
   17c00:	beq	17d0c <__assert_fail@plt+0x6c10>
   17c04:	mov	r3, #8
   17c08:	mov	r0, r4
   17c0c:	str	r3, [sp]
   17c10:	rsb	r2, r2, #1
   17c14:	add	r1, sp, #80	; 0x50
   17c18:	mvn	r3, #-2147483648	; 0x80000000
   17c1c:	bl	1a134 <__assert_fail@plt+0x9038>
   17c20:	mov	r4, r0
   17c24:	str	r0, [r5]
   17c28:	ldr	r0, [r5, #4]
   17c2c:	ldr	r2, [sp, #80]	; 0x50
   17c30:	mov	r1, #0
   17c34:	sub	r2, r2, r0
   17c38:	add	r0, r4, r0, lsl #3
   17c3c:	lsl	r2, r2, #3
   17c40:	bl	11018 <memset@plt>
   17c44:	ldr	r3, [sp, #80]	; 0x50
   17c48:	str	r3, [r5, #4]
   17c4c:	ldr	r6, [sp, #36]	; 0x24
   17c50:	ldr	r8, [r4]
   17c54:	ldr	r5, [r4, #4]
   17c58:	ldr	r2, [sp, #72]	; 0x48
   17c5c:	ldr	r3, [sp, #32]
   17c60:	ldr	ip, [sp, #76]	; 0x4c
   17c64:	orr	r6, r6, #1
   17c68:	add	fp, sp, #40	; 0x28
   17c6c:	str	r2, [sp, #12]
   17c70:	str	r3, [sp]
   17c74:	str	r6, [sp, #4]
   17c78:	mov	r1, r8
   17c7c:	mov	r0, r5
   17c80:	str	ip, [sp, #16]
   17c84:	str	fp, [sp, #8]
   17c88:	mov	r3, sl
   17c8c:	mov	r2, r9
   17c90:	bl	1563c <__assert_fail@plt+0x4540>
   17c94:	cmp	r8, r0
   17c98:	bhi	17cf8 <__assert_fail@plt+0x6bfc>
   17c9c:	ldr	r3, [pc, #160]	; 17d44 <__assert_fail@plt+0x6c48>
   17ca0:	add	r8, r0, #1
   17ca4:	cmp	r5, r3
   17ca8:	str	r8, [r4]
   17cac:	beq	17cb8 <__assert_fail@plt+0x6bbc>
   17cb0:	mov	r0, r5
   17cb4:	bl	14c20 <__assert_fail@plt+0x3b24>
   17cb8:	mov	r0, r8
   17cbc:	bl	19f18 <__assert_fail@plt+0x8e1c>
   17cc0:	ldr	ip, [sp, #76]	; 0x4c
   17cc4:	ldr	lr, [sp, #32]
   17cc8:	mov	r3, sl
   17ccc:	mov	r2, r9
   17cd0:	mov	r1, r8
   17cd4:	str	r0, [r4, #4]
   17cd8:	ldr	r4, [sp, #72]	; 0x48
   17cdc:	str	fp, [sp, #8]
   17ce0:	str	r6, [sp, #4]
   17ce4:	str	ip, [sp, #16]
   17ce8:	str	r4, [sp, #12]
   17cec:	str	lr, [sp]
   17cf0:	mov	r5, r0
   17cf4:	bl	1563c <__assert_fail@plt+0x4540>
   17cf8:	ldr	r3, [sp, #28]
   17cfc:	mov	r0, r5
   17d00:	str	r3, [r7]
   17d04:	add	sp, sp, #132	; 0x84
   17d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17d0c:	mov	r3, #8
   17d10:	add	r1, sp, #80	; 0x50
   17d14:	str	r3, [sp]
   17d18:	rsb	r2, r2, #1
   17d1c:	mvn	r3, #-2147483648	; 0x80000000
   17d20:	mov	r0, #0
   17d24:	bl	1a134 <__assert_fail@plt+0x9038>
   17d28:	mov	r4, r0
   17d2c:	ldm	r6, {r0, r1}
   17d30:	str	r4, [r5]
   17d34:	stm	r4, {r0, r1}
   17d38:	b	17c28 <__assert_fail@plt+0x6b2c>
   17d3c:	bl	110d8 <abort@plt>
   17d40:	andeq	pc, r2, r0, asr #2
   17d44:	andeq	pc, r2, r0, asr #4
   17d48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17d4c:	mov	r4, r2
   17d50:	ldr	lr, [pc, #432]	; 17f08 <__assert_fail@plt+0x6e0c>
   17d54:	mov	sl, r0
   17d58:	mov	fp, r1
   17d5c:	ldm	lr!, {r0, r1, r2, r3}
   17d60:	sub	sp, sp, #92	; 0x5c
   17d64:	add	ip, sp, #40	; 0x28
   17d68:	lsr	r7, r4, #5
   17d6c:	stmia	ip!, {r0, r1, r2, r3}
   17d70:	add	r6, sp, #48	; 0x30
   17d74:	ldm	lr!, {r0, r1, r2, r3}
   17d78:	and	r4, r4, #31
   17d7c:	ldr	r5, [pc, #392]	; 17f0c <__assert_fail@plt+0x6e10>
   17d80:	stmia	ip!, {r0, r1, r2, r3}
   17d84:	ldm	lr, {r0, r1, r2, r3}
   17d88:	stm	ip, {r0, r1, r2, r3}
   17d8c:	ldr	r2, [r6, r7, lsl #2]
   17d90:	lsr	r3, r2, r4
   17d94:	eor	r3, r3, #1
   17d98:	and	r3, r3, #1
   17d9c:	eor	r4, r2, r3, lsl r4
   17da0:	str	r4, [r6, r7, lsl #2]
   17da4:	bl	11000 <__errno_location@plt>
   17da8:	ldr	r2, [r5, #4]
   17dac:	ldr	r4, [r5]
   17db0:	cmp	r2, #0
   17db4:	ldr	r3, [r0]
   17db8:	mov	r8, r0
   17dbc:	str	r3, [sp, #28]
   17dc0:	bgt	17e1c <__assert_fail@plt+0x6d20>
   17dc4:	add	r7, r5, #8
   17dc8:	cmp	r4, r7
   17dcc:	str	r2, [sp, #36]	; 0x24
   17dd0:	beq	17ed8 <__assert_fail@plt+0x6ddc>
   17dd4:	mov	r3, #8
   17dd8:	mov	r0, r4
   17ddc:	str	r3, [sp]
   17de0:	rsb	r2, r2, #1
   17de4:	mvn	r3, #-2147483648	; 0x80000000
   17de8:	add	r1, sp, #36	; 0x24
   17dec:	bl	1a134 <__assert_fail@plt+0x9038>
   17df0:	mov	r4, r0
   17df4:	str	r0, [r5]
   17df8:	ldr	r0, [r5, #4]
   17dfc:	ldr	r2, [sp, #36]	; 0x24
   17e00:	mov	r1, #0
   17e04:	sub	r2, r2, r0
   17e08:	add	r0, r4, r0, lsl #3
   17e0c:	lsl	r2, r2, #3
   17e10:	bl	11018 <memset@plt>
   17e14:	ldr	r3, [sp, #36]	; 0x24
   17e18:	str	r3, [r5, #4]
   17e1c:	ldr	r7, [sp, #44]	; 0x2c
   17e20:	ldr	r9, [r4]
   17e24:	ldr	r5, [r4, #4]
   17e28:	ldr	r2, [sp, #80]	; 0x50
   17e2c:	ldr	r3, [sp, #40]	; 0x28
   17e30:	ldr	ip, [sp, #84]	; 0x54
   17e34:	orr	r7, r7, #1
   17e38:	str	r2, [sp, #12]
   17e3c:	str	r3, [sp]
   17e40:	str	r7, [sp, #4]
   17e44:	str	r6, [sp, #8]
   17e48:	mov	r1, r9
   17e4c:	mov	r0, r5
   17e50:	str	ip, [sp, #16]
   17e54:	mov	r3, fp
   17e58:	mov	r2, sl
   17e5c:	bl	1563c <__assert_fail@plt+0x4540>
   17e60:	cmp	r9, r0
   17e64:	bhi	17ec4 <__assert_fail@plt+0x6dc8>
   17e68:	ldr	r3, [pc, #160]	; 17f10 <__assert_fail@plt+0x6e14>
   17e6c:	add	r9, r0, #1
   17e70:	cmp	r5, r3
   17e74:	str	r9, [r4]
   17e78:	beq	17e84 <__assert_fail@plt+0x6d88>
   17e7c:	mov	r0, r5
   17e80:	bl	14c20 <__assert_fail@plt+0x3b24>
   17e84:	mov	r0, r9
   17e88:	bl	19f18 <__assert_fail@plt+0x8e1c>
   17e8c:	ldr	ip, [sp, #84]	; 0x54
   17e90:	ldr	lr, [sp, #40]	; 0x28
   17e94:	mov	r3, fp
   17e98:	mov	r2, sl
   17e9c:	mov	r1, r9
   17ea0:	str	r0, [r4, #4]
   17ea4:	ldr	r4, [sp, #80]	; 0x50
   17ea8:	str	r6, [sp, #8]
   17eac:	str	r7, [sp, #4]
   17eb0:	str	ip, [sp, #16]
   17eb4:	str	r4, [sp, #12]
   17eb8:	str	lr, [sp]
   17ebc:	mov	r5, r0
   17ec0:	bl	1563c <__assert_fail@plt+0x4540>
   17ec4:	ldr	r3, [sp, #28]
   17ec8:	mov	r0, r5
   17ecc:	str	r3, [r8]
   17ed0:	add	sp, sp, #92	; 0x5c
   17ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ed8:	mov	r3, #8
   17edc:	str	r3, [sp]
   17ee0:	add	r1, sp, #36	; 0x24
   17ee4:	rsb	r2, r2, #1
   17ee8:	mvn	r3, #-2147483648	; 0x80000000
   17eec:	mov	r0, #0
   17ef0:	bl	1a134 <__assert_fail@plt+0x9038>
   17ef4:	mov	r4, r0
   17ef8:	ldm	r7, {r0, r1}
   17efc:	str	r4, [r5]
   17f00:	stm	r4, {r0, r1}
   17f04:	b	17df8 <__assert_fail@plt+0x6cfc>
   17f08:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   17f0c:	andeq	pc, r2, r0, asr #2
   17f10:	andeq	pc, r2, r0, asr #4
   17f14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f18:	mov	r4, r1
   17f1c:	ldr	lr, [pc, #420]	; 180c8 <__assert_fail@plt+0x6fcc>
   17f20:	mov	r6, r0
   17f24:	sub	sp, sp, #84	; 0x54
   17f28:	ldm	lr!, {r0, r1, r2, r3}
   17f2c:	add	ip, sp, #32
   17f30:	lsr	r8, r4, #5
   17f34:	add	r5, sp, #40	; 0x28
   17f38:	stmia	ip!, {r0, r1, r2, r3}
   17f3c:	and	r4, r4, #31
   17f40:	ldm	lr!, {r0, r1, r2, r3}
   17f44:	ldr	r7, [pc, #384]	; 180cc <__assert_fail@plt+0x6fd0>
   17f48:	stmia	ip!, {r0, r1, r2, r3}
   17f4c:	ldm	lr, {r0, r1, r2, r3}
   17f50:	stm	ip, {r0, r1, r2, r3}
   17f54:	ldr	r2, [r5, r8, lsl #2]
   17f58:	lsr	r3, r2, r4
   17f5c:	eor	r3, r3, #1
   17f60:	and	r3, r3, #1
   17f64:	eor	r4, r2, r3, lsl r4
   17f68:	str	r4, [r5, r8, lsl #2]
   17f6c:	bl	11000 <__errno_location@plt>
   17f70:	ldr	r2, [r7, #4]
   17f74:	ldr	r4, [r7]
   17f78:	cmp	r2, #0
   17f7c:	mov	r9, r0
   17f80:	ldr	sl, [r0]
   17f84:	bgt	17fe0 <__assert_fail@plt+0x6ee4>
   17f88:	add	r8, r7, #8
   17f8c:	cmp	r4, r8
   17f90:	str	r2, [sp, #28]
   17f94:	beq	18098 <__assert_fail@plt+0x6f9c>
   17f98:	mov	r3, #8
   17f9c:	mov	r0, r4
   17fa0:	str	r3, [sp]
   17fa4:	rsb	r2, r2, #1
   17fa8:	mvn	r3, #-2147483648	; 0x80000000
   17fac:	add	r1, sp, #28
   17fb0:	bl	1a134 <__assert_fail@plt+0x9038>
   17fb4:	mov	r4, r0
   17fb8:	str	r0, [r7]
   17fbc:	ldr	r0, [r7, #4]
   17fc0:	ldr	r2, [sp, #28]
   17fc4:	mov	r1, #0
   17fc8:	sub	r2, r2, r0
   17fcc:	add	r0, r4, r0, lsl #3
   17fd0:	lsl	r2, r2, #3
   17fd4:	bl	11018 <memset@plt>
   17fd8:	ldr	r3, [sp, #28]
   17fdc:	str	r3, [r7, #4]
   17fe0:	ldr	r8, [sp, #36]	; 0x24
   17fe4:	ldr	fp, [r4]
   17fe8:	ldr	r7, [r4, #4]
   17fec:	ldr	r2, [sp, #72]	; 0x48
   17ff0:	ldr	r3, [sp, #32]
   17ff4:	ldr	ip, [sp, #76]	; 0x4c
   17ff8:	orr	r8, r8, #1
   17ffc:	str	r2, [sp, #12]
   18000:	str	r3, [sp]
   18004:	str	r8, [sp, #4]
   18008:	str	r5, [sp, #8]
   1800c:	mov	r1, fp
   18010:	mov	r0, r7
   18014:	str	ip, [sp, #16]
   18018:	mvn	r3, #0
   1801c:	mov	r2, r6
   18020:	bl	1563c <__assert_fail@plt+0x4540>
   18024:	cmp	fp, r0
   18028:	bhi	18088 <__assert_fail@plt+0x6f8c>
   1802c:	ldr	r3, [pc, #156]	; 180d0 <__assert_fail@plt+0x6fd4>
   18030:	add	fp, r0, #1
   18034:	cmp	r7, r3
   18038:	str	fp, [r4]
   1803c:	beq	18048 <__assert_fail@plt+0x6f4c>
   18040:	mov	r0, r7
   18044:	bl	14c20 <__assert_fail@plt+0x3b24>
   18048:	mov	r0, fp
   1804c:	bl	19f18 <__assert_fail@plt+0x8e1c>
   18050:	ldr	lr, [sp, #76]	; 0x4c
   18054:	ldr	r3, [sp, #32]
   18058:	ldr	ip, [sp, #72]	; 0x48
   1805c:	mov	r2, r6
   18060:	mov	r1, fp
   18064:	str	r0, [r4, #4]
   18068:	str	r3, [sp]
   1806c:	str	r5, [sp, #8]
   18070:	str	r8, [sp, #4]
   18074:	str	lr, [sp, #16]
   18078:	str	ip, [sp, #12]
   1807c:	mvn	r3, #0
   18080:	mov	r7, r0
   18084:	bl	1563c <__assert_fail@plt+0x4540>
   18088:	mov	r0, r7
   1808c:	str	sl, [r9]
   18090:	add	sp, sp, #84	; 0x54
   18094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18098:	mov	r3, #8
   1809c:	str	r3, [sp]
   180a0:	add	r1, sp, #28
   180a4:	rsb	r2, r2, #1
   180a8:	mvn	r3, #-2147483648	; 0x80000000
   180ac:	mov	r0, #0
   180b0:	bl	1a134 <__assert_fail@plt+0x9038>
   180b4:	mov	r4, r0
   180b8:	ldm	r8, {r0, r1}
   180bc:	str	r4, [r7]
   180c0:	stm	r4, {r0, r1}
   180c4:	b	17fbc <__assert_fail@plt+0x6ec0>
   180c8:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   180cc:	andeq	pc, r2, r0, asr #2
   180d0:	andeq	pc, r2, r0, asr #4
   180d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   180d8:	mov	r6, r0
   180dc:	ldr	lr, [pc, #404]	; 18278 <__assert_fail@plt+0x717c>
   180e0:	sub	sp, sp, #84	; 0x54
   180e4:	add	ip, sp, #32
   180e8:	ldm	lr!, {r0, r1, r2, r3}
   180ec:	ldr	r5, [pc, #392]	; 1827c <__assert_fail@plt+0x7180>
   180f0:	stmia	ip!, {r0, r1, r2, r3}
   180f4:	ldm	lr!, {r0, r1, r2, r3}
   180f8:	ldr	r4, [sp, #44]	; 0x2c
   180fc:	stmia	ip!, {r0, r1, r2, r3}
   18100:	ldm	lr, {r0, r1, r2, r3}
   18104:	mvn	lr, r4
   18108:	and	lr, lr, #67108864	; 0x4000000
   1810c:	eor	lr, lr, r4
   18110:	stm	ip, {r0, r1, r2, r3}
   18114:	str	lr, [sp, #44]	; 0x2c
   18118:	bl	11000 <__errno_location@plt>
   1811c:	ldr	r2, [r5, #4]
   18120:	ldr	r4, [r5]
   18124:	cmp	r2, #0
   18128:	mov	r8, r0
   1812c:	ldr	sl, [r0]
   18130:	bgt	1818c <__assert_fail@plt+0x7090>
   18134:	add	r7, r5, #8
   18138:	cmp	r4, r7
   1813c:	str	r2, [sp, #28]
   18140:	beq	18248 <__assert_fail@plt+0x714c>
   18144:	mov	r3, #8
   18148:	mov	r0, r4
   1814c:	str	r3, [sp]
   18150:	rsb	r2, r2, #1
   18154:	mvn	r3, #-2147483648	; 0x80000000
   18158:	add	r1, sp, #28
   1815c:	bl	1a134 <__assert_fail@plt+0x9038>
   18160:	mov	r4, r0
   18164:	str	r0, [r5]
   18168:	ldr	r0, [r5, #4]
   1816c:	ldr	r2, [sp, #28]
   18170:	mov	r1, #0
   18174:	sub	r2, r2, r0
   18178:	add	r0, r4, r0, lsl #3
   1817c:	lsl	r2, r2, #3
   18180:	bl	11018 <memset@plt>
   18184:	ldr	r3, [sp, #28]
   18188:	str	r3, [r5, #4]
   1818c:	ldr	r7, [sp, #36]	; 0x24
   18190:	ldr	r9, [r4]
   18194:	ldr	r5, [r4, #4]
   18198:	ldr	r2, [sp, #72]	; 0x48
   1819c:	ldr	r3, [sp, #32]
   181a0:	ldr	ip, [sp, #76]	; 0x4c
   181a4:	orr	r7, r7, #1
   181a8:	add	fp, sp, #40	; 0x28
   181ac:	str	r2, [sp, #12]
   181b0:	str	r3, [sp]
   181b4:	str	r7, [sp, #4]
   181b8:	mov	r1, r9
   181bc:	mov	r0, r5
   181c0:	str	ip, [sp, #16]
   181c4:	str	fp, [sp, #8]
   181c8:	mvn	r3, #0
   181cc:	mov	r2, r6
   181d0:	bl	1563c <__assert_fail@plt+0x4540>
   181d4:	cmp	r9, r0
   181d8:	bhi	18238 <__assert_fail@plt+0x713c>
   181dc:	ldr	r3, [pc, #156]	; 18280 <__assert_fail@plt+0x7184>
   181e0:	add	r9, r0, #1
   181e4:	cmp	r5, r3
   181e8:	str	r9, [r4]
   181ec:	beq	181f8 <__assert_fail@plt+0x70fc>
   181f0:	mov	r0, r5
   181f4:	bl	14c20 <__assert_fail@plt+0x3b24>
   181f8:	mov	r0, r9
   181fc:	bl	19f18 <__assert_fail@plt+0x8e1c>
   18200:	ldr	lr, [sp, #76]	; 0x4c
   18204:	ldr	r3, [sp, #32]
   18208:	ldr	ip, [sp, #72]	; 0x48
   1820c:	mov	r2, r6
   18210:	mov	r1, r9
   18214:	str	r0, [r4, #4]
   18218:	str	r3, [sp]
   1821c:	str	fp, [sp, #8]
   18220:	str	r7, [sp, #4]
   18224:	str	lr, [sp, #16]
   18228:	str	ip, [sp, #12]
   1822c:	mvn	r3, #0
   18230:	mov	r5, r0
   18234:	bl	1563c <__assert_fail@plt+0x4540>
   18238:	mov	r0, r5
   1823c:	str	sl, [r8]
   18240:	add	sp, sp, #84	; 0x54
   18244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18248:	mov	r3, #8
   1824c:	str	r3, [sp]
   18250:	add	r1, sp, #28
   18254:	rsb	r2, r2, #1
   18258:	mvn	r3, #-2147483648	; 0x80000000
   1825c:	mov	r0, #0
   18260:	bl	1a134 <__assert_fail@plt+0x9038>
   18264:	mov	r4, r0
   18268:	ldm	r7, {r0, r1}
   1826c:	str	r4, [r5]
   18270:	stm	r4, {r0, r1}
   18274:	b	18168 <__assert_fail@plt+0x706c>
   18278:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   1827c:	andeq	pc, r2, r0, asr #2
   18280:	andeq	pc, r2, r0, asr #4
   18284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18288:	mov	r9, r0
   1828c:	ldr	lr, [pc, #416]	; 18434 <__assert_fail@plt+0x7338>
   18290:	mov	sl, r1
   18294:	sub	sp, sp, #92	; 0x5c
   18298:	ldm	lr!, {r0, r1, r2, r3}
   1829c:	add	ip, sp, #40	; 0x28
   182a0:	ldr	r5, [pc, #400]	; 18438 <__assert_fail@plt+0x733c>
   182a4:	stmia	ip!, {r0, r1, r2, r3}
   182a8:	ldm	lr!, {r0, r1, r2, r3}
   182ac:	ldr	r4, [sp, #52]	; 0x34
   182b0:	stmia	ip!, {r0, r1, r2, r3}
   182b4:	ldm	lr, {r0, r1, r2, r3}
   182b8:	mvn	lr, r4
   182bc:	and	lr, lr, #67108864	; 0x4000000
   182c0:	eor	lr, lr, r4
   182c4:	stm	ip, {r0, r1, r2, r3}
   182c8:	str	lr, [sp, #52]	; 0x34
   182cc:	bl	11000 <__errno_location@plt>
   182d0:	ldr	r2, [r5, #4]
   182d4:	ldr	r4, [r5]
   182d8:	cmp	r2, #0
   182dc:	ldr	r3, [r0]
   182e0:	mov	r7, r0
   182e4:	str	r3, [sp, #28]
   182e8:	bgt	18344 <__assert_fail@plt+0x7248>
   182ec:	add	r6, r5, #8
   182f0:	cmp	r4, r6
   182f4:	str	r2, [sp, #36]	; 0x24
   182f8:	beq	18404 <__assert_fail@plt+0x7308>
   182fc:	mov	r3, #8
   18300:	mov	r0, r4
   18304:	str	r3, [sp]
   18308:	rsb	r2, r2, #1
   1830c:	mvn	r3, #-2147483648	; 0x80000000
   18310:	add	r1, sp, #36	; 0x24
   18314:	bl	1a134 <__assert_fail@plt+0x9038>
   18318:	mov	r4, r0
   1831c:	str	r0, [r5]
   18320:	ldr	r0, [r5, #4]
   18324:	ldr	r2, [sp, #36]	; 0x24
   18328:	mov	r1, #0
   1832c:	sub	r2, r2, r0
   18330:	add	r0, r4, r0, lsl #3
   18334:	lsl	r2, r2, #3
   18338:	bl	11018 <memset@plt>
   1833c:	ldr	r3, [sp, #36]	; 0x24
   18340:	str	r3, [r5, #4]
   18344:	ldr	r6, [sp, #44]	; 0x2c
   18348:	ldr	r8, [r4]
   1834c:	ldr	r5, [r4, #4]
   18350:	ldr	r2, [sp, #80]	; 0x50
   18354:	ldr	r3, [sp, #40]	; 0x28
   18358:	ldr	ip, [sp, #84]	; 0x54
   1835c:	orr	r6, r6, #1
   18360:	add	fp, sp, #48	; 0x30
   18364:	str	r2, [sp, #12]
   18368:	str	r3, [sp]
   1836c:	str	r6, [sp, #4]
   18370:	mov	r1, r8
   18374:	mov	r0, r5
   18378:	str	ip, [sp, #16]
   1837c:	str	fp, [sp, #8]
   18380:	mov	r3, sl
   18384:	mov	r2, r9
   18388:	bl	1563c <__assert_fail@plt+0x4540>
   1838c:	cmp	r8, r0
   18390:	bhi	183f0 <__assert_fail@plt+0x72f4>
   18394:	ldr	r3, [pc, #160]	; 1843c <__assert_fail@plt+0x7340>
   18398:	add	r8, r0, #1
   1839c:	cmp	r5, r3
   183a0:	str	r8, [r4]
   183a4:	beq	183b0 <__assert_fail@plt+0x72b4>
   183a8:	mov	r0, r5
   183ac:	bl	14c20 <__assert_fail@plt+0x3b24>
   183b0:	mov	r0, r8
   183b4:	bl	19f18 <__assert_fail@plt+0x8e1c>
   183b8:	ldr	ip, [sp, #84]	; 0x54
   183bc:	ldr	lr, [sp, #40]	; 0x28
   183c0:	mov	r3, sl
   183c4:	mov	r2, r9
   183c8:	mov	r1, r8
   183cc:	str	r0, [r4, #4]
   183d0:	ldr	r4, [sp, #80]	; 0x50
   183d4:	str	fp, [sp, #8]
   183d8:	str	r6, [sp, #4]
   183dc:	str	ip, [sp, #16]
   183e0:	str	r4, [sp, #12]
   183e4:	str	lr, [sp]
   183e8:	mov	r5, r0
   183ec:	bl	1563c <__assert_fail@plt+0x4540>
   183f0:	ldr	r3, [sp, #28]
   183f4:	mov	r0, r5
   183f8:	str	r3, [r7]
   183fc:	add	sp, sp, #92	; 0x5c
   18400:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18404:	mov	r3, #8
   18408:	str	r3, [sp]
   1840c:	add	r1, sp, #36	; 0x24
   18410:	rsb	r2, r2, #1
   18414:	mvn	r3, #-2147483648	; 0x80000000
   18418:	mov	r0, #0
   1841c:	bl	1a134 <__assert_fail@plt+0x9038>
   18420:	mov	r4, r0
   18424:	ldm	r6, {r0, r1}
   18428:	str	r4, [r5]
   1842c:	stm	r4, {r0, r1}
   18430:	b	18320 <__assert_fail@plt+0x7224>
   18434:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18438:	andeq	pc, r2, r0, asr #2
   1843c:	andeq	pc, r2, r0, asr #4
   18440:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18444:	sub	sp, sp, #180	; 0xb4
   18448:	mov	r6, r1
   1844c:	mov	r4, r0
   18450:	mov	r9, r2
   18454:	add	r0, sp, #80	; 0x50
   18458:	mov	r2, #48	; 0x30
   1845c:	mov	r1, #0
   18460:	bl	11018 <memset@plt>
   18464:	cmp	r6, #10
   18468:	beq	18648 <__assert_fail@plt+0x754c>
   1846c:	add	r5, sp, #80	; 0x50
   18470:	str	r6, [sp, #80]	; 0x50
   18474:	ldm	r5!, {r0, r1, r2, r3}
   18478:	add	ip, sp, #128	; 0x80
   1847c:	mov	r7, ip
   18480:	add	lr, sp, #32
   18484:	stmia	ip!, {r0, r1, r2, r3}
   18488:	mov	r8, #67108864	; 0x4000000
   1848c:	ldm	r5!, {r0, r1, r2, r3}
   18490:	ldr	r6, [pc, #436]	; 1864c <__assert_fail@plt+0x7550>
   18494:	stmia	ip!, {r0, r1, r2, r3}
   18498:	ldm	r5, {r0, r1, r2, r3}
   1849c:	stm	ip, {r0, r1, r2, r3}
   184a0:	ldm	r7!, {r0, r1, r2, r3}
   184a4:	stmia	lr!, {r0, r1, r2, r3}
   184a8:	ldm	r7!, {r0, r1, r2, r3}
   184ac:	str	r8, [sp, #44]	; 0x2c
   184b0:	stmia	lr!, {r0, r1, r2, r3}
   184b4:	ldm	ip, {r0, r1, r2, r3}
   184b8:	stm	lr, {r0, r1, r2, r3}
   184bc:	bl	11000 <__errno_location@plt>
   184c0:	cmn	r4, #-2147483647	; 0x80000001
   184c4:	ldr	r5, [r6]
   184c8:	mov	r7, r0
   184cc:	movne	r0, #0
   184d0:	moveq	r0, #1
   184d4:	ldr	r3, [r7]
   184d8:	orrs	r0, r0, r4, lsr #31
   184dc:	str	r3, [sp, #24]
   184e0:	bne	18648 <__assert_fail@plt+0x754c>
   184e4:	ldr	r2, [r6, #4]
   184e8:	cmp	r4, r2
   184ec:	blt	1854c <__assert_fail@plt+0x7450>
   184f0:	add	r8, r6, #8
   184f4:	cmp	r5, r8
   184f8:	str	r2, [sp, #80]	; 0x50
   184fc:	beq	18618 <__assert_fail@plt+0x751c>
   18500:	mov	r3, #8
   18504:	sub	r2, r4, r2
   18508:	mov	r0, r5
   1850c:	str	r3, [sp]
   18510:	add	r2, r2, #1
   18514:	add	r1, sp, #80	; 0x50
   18518:	mvn	r3, #-2147483648	; 0x80000000
   1851c:	bl	1a134 <__assert_fail@plt+0x9038>
   18520:	mov	r5, r0
   18524:	str	r0, [r6]
   18528:	ldr	r0, [r6, #4]
   1852c:	ldr	r2, [sp, #80]	; 0x50
   18530:	mov	r1, #0
   18534:	sub	r2, r2, r0
   18538:	add	r0, r5, r0, lsl #3
   1853c:	lsl	r2, r2, #3
   18540:	bl	11018 <memset@plt>
   18544:	ldr	r3, [sp, #80]	; 0x50
   18548:	str	r3, [r6, #4]
   1854c:	add	fp, r5, r4, lsl #3
   18550:	ldr	r1, [sp, #36]	; 0x24
   18554:	ldr	r8, [r5, r4, lsl #3]
   18558:	ldr	r6, [fp, #4]
   1855c:	ldr	r2, [sp, #72]	; 0x48
   18560:	ldr	r3, [sp, #32]
   18564:	ldr	ip, [sp, #76]	; 0x4c
   18568:	orr	r1, r1, #1
   1856c:	add	sl, sp, #40	; 0x28
   18570:	str	r1, [sp, #28]
   18574:	str	r1, [sp, #4]
   18578:	str	r2, [sp, #12]
   1857c:	str	r3, [sp]
   18580:	mov	r0, r6
   18584:	mov	r1, r8
   18588:	str	ip, [sp, #16]
   1858c:	str	sl, [sp, #8]
   18590:	mvn	r3, #0
   18594:	mov	r2, r9
   18598:	bl	1563c <__assert_fail@plt+0x4540>
   1859c:	cmp	r8, r0
   185a0:	bhi	18604 <__assert_fail@plt+0x7508>
   185a4:	ldr	r3, [pc, #164]	; 18650 <__assert_fail@plt+0x7554>
   185a8:	add	r8, r0, #1
   185ac:	cmp	r6, r3
   185b0:	str	r8, [r5, r4, lsl #3]
   185b4:	beq	185c0 <__assert_fail@plt+0x74c4>
   185b8:	mov	r0, r6
   185bc:	bl	14c20 <__assert_fail@plt+0x3b24>
   185c0:	mov	r0, r8
   185c4:	bl	19f18 <__assert_fail@plt+0x8e1c>
   185c8:	ldr	lr, [sp, #76]	; 0x4c
   185cc:	ldr	r3, [sp, #32]
   185d0:	ldr	ip, [sp, #72]	; 0x48
   185d4:	ldr	r4, [sp, #28]
   185d8:	mov	r2, r9
   185dc:	mov	r1, r8
   185e0:	str	r0, [fp, #4]
   185e4:	str	r3, [sp]
   185e8:	str	sl, [sp, #8]
   185ec:	str	r4, [sp, #4]
   185f0:	str	lr, [sp, #16]
   185f4:	str	ip, [sp, #12]
   185f8:	mvn	r3, #0
   185fc:	mov	r6, r0
   18600:	bl	1563c <__assert_fail@plt+0x4540>
   18604:	ldr	r3, [sp, #24]
   18608:	mov	r0, r6
   1860c:	str	r3, [r7]
   18610:	add	sp, sp, #180	; 0xb4
   18614:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18618:	mov	r3, #8
   1861c:	sub	r2, r4, r2
   18620:	add	r1, sp, #80	; 0x50
   18624:	str	r3, [sp]
   18628:	add	r2, r2, #1
   1862c:	mvn	r3, #-2147483648	; 0x80000000
   18630:	bl	1a134 <__assert_fail@plt+0x9038>
   18634:	mov	r5, r0
   18638:	ldm	r8, {r0, r1}
   1863c:	str	r5, [r6]
   18640:	stm	r5, {r0, r1}
   18644:	b	18528 <__assert_fail@plt+0x742c>
   18648:	bl	110d8 <abort@plt>
   1864c:	andeq	pc, r2, r0, asr #2
   18650:	andeq	pc, r2, r0, asr #4
   18654:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18658:	mov	r7, r1
   1865c:	ldr	lr, [pc, #492]	; 18850 <__assert_fail@plt+0x7754>
   18660:	mov	r8, r2
   18664:	mov	r4, r0
   18668:	mov	fp, r3
   1866c:	ldm	lr!, {r0, r1, r2, r3}
   18670:	sub	sp, sp, #100	; 0x64
   18674:	add	ip, sp, #48	; 0x30
   18678:	mov	sl, #10
   1867c:	stmia	ip!, {r0, r1, r2, r3}
   18680:	cmp	r8, #0
   18684:	cmpne	r7, #0
   18688:	ldm	lr!, {r0, r1, r2, r3}
   1868c:	str	sl, [sp, #48]	; 0x30
   18690:	stmia	ip!, {r0, r1, r2, r3}
   18694:	ldm	lr, {r0, r1, r2, r3}
   18698:	stm	ip, {r0, r1, r2, r3}
   1869c:	beq	1884c <__assert_fail@plt+0x7750>
   186a0:	str	r7, [sp, #88]	; 0x58
   186a4:	str	r8, [sp, #92]	; 0x5c
   186a8:	bl	11000 <__errno_location@plt>
   186ac:	ldr	r6, [pc, #416]	; 18854 <__assert_fail@plt+0x7758>
   186b0:	cmn	r4, #-2147483647	; 0x80000001
   186b4:	ldr	r5, [r6]
   186b8:	mov	r9, r0
   186bc:	movne	r0, #0
   186c0:	moveq	r0, #1
   186c4:	ldr	r3, [r9]
   186c8:	orrs	r0, r0, r4, lsr #31
   186cc:	str	r3, [sp, #28]
   186d0:	bne	1884c <__assert_fail@plt+0x7750>
   186d4:	ldr	r2, [r6, #4]
   186d8:	cmp	r4, r2
   186dc:	movlt	r3, sl
   186e0:	blt	1874c <__assert_fail@plt+0x7650>
   186e4:	add	r7, r6, #8
   186e8:	cmp	r5, r7
   186ec:	str	r2, [sp, #44]	; 0x2c
   186f0:	beq	1881c <__assert_fail@plt+0x7720>
   186f4:	mov	r3, #8
   186f8:	sub	r2, r4, r2
   186fc:	mov	r0, r5
   18700:	str	r3, [sp]
   18704:	add	r2, r2, #1
   18708:	mvn	r3, #-2147483648	; 0x80000000
   1870c:	add	r1, sp, #44	; 0x2c
   18710:	bl	1a134 <__assert_fail@plt+0x9038>
   18714:	mov	r5, r0
   18718:	str	r0, [r6]
   1871c:	ldr	r0, [r6, #4]
   18720:	ldr	r2, [sp, #44]	; 0x2c
   18724:	mov	r1, #0
   18728:	sub	r2, r2, r0
   1872c:	add	r0, r5, r0, lsl #3
   18730:	lsl	r2, r2, #3
   18734:	bl	11018 <memset@plt>
   18738:	ldr	r3, [sp, #48]	; 0x30
   1873c:	ldr	r7, [sp, #88]	; 0x58
   18740:	ldr	r8, [sp, #92]	; 0x5c
   18744:	ldr	r2, [sp, #44]	; 0x2c
   18748:	str	r2, [r6, #4]
   1874c:	add	r2, r5, r4, lsl #3
   18750:	mov	r1, r2
   18754:	str	r2, [sp, #32]
   18758:	ldr	r2, [sp, #52]	; 0x34
   1875c:	ldr	r6, [r1, #4]
   18760:	ldr	sl, [r5, r4, lsl #3]
   18764:	orr	r2, r2, #1
   18768:	str	r3, [sp]
   1876c:	add	r3, sp, #56	; 0x38
   18770:	str	r2, [sp, #36]	; 0x24
   18774:	str	r2, [sp, #4]
   18778:	str	r3, [sp, #8]
   1877c:	mov	r0, r6
   18780:	str	r8, [sp, #16]
   18784:	str	r7, [sp, #12]
   18788:	mov	r1, sl
   1878c:	mvn	r3, #0
   18790:	mov	r2, fp
   18794:	bl	1563c <__assert_fail@plt+0x4540>
   18798:	cmp	sl, r0
   1879c:	bhi	18808 <__assert_fail@plt+0x770c>
   187a0:	ldr	r3, [pc, #176]	; 18858 <__assert_fail@plt+0x775c>
   187a4:	add	r7, r0, #1
   187a8:	cmp	r6, r3
   187ac:	str	r7, [r5, r4, lsl #3]
   187b0:	beq	187bc <__assert_fail@plt+0x76c0>
   187b4:	mov	r0, r6
   187b8:	bl	14c20 <__assert_fail@plt+0x3b24>
   187bc:	mov	r0, r7
   187c0:	bl	19f18 <__assert_fail@plt+0x8e1c>
   187c4:	ldr	r3, [sp, #32]
   187c8:	ldr	lr, [sp, #92]	; 0x5c
   187cc:	ldr	ip, [sp, #88]	; 0x58
   187d0:	ldr	r4, [sp, #36]	; 0x24
   187d4:	mov	r2, fp
   187d8:	mov	r1, r7
   187dc:	str	r0, [r3, #4]
   187e0:	add	r3, sp, #56	; 0x38
   187e4:	str	r3, [sp, #8]
   187e8:	ldr	r3, [sp, #48]	; 0x30
   187ec:	str	r4, [sp, #4]
   187f0:	str	r3, [sp]
   187f4:	str	lr, [sp, #16]
   187f8:	str	ip, [sp, #12]
   187fc:	mvn	r3, #0
   18800:	mov	r6, r0
   18804:	bl	1563c <__assert_fail@plt+0x4540>
   18808:	ldr	r3, [sp, #28]
   1880c:	mov	r0, r6
   18810:	str	r3, [r9]
   18814:	add	sp, sp, #100	; 0x64
   18818:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1881c:	mov	r3, #8
   18820:	sub	r2, r4, r2
   18824:	str	r3, [sp]
   18828:	add	r1, sp, #44	; 0x2c
   1882c:	add	r2, r2, #1
   18830:	mvn	r3, #-2147483648	; 0x80000000
   18834:	bl	1a134 <__assert_fail@plt+0x9038>
   18838:	mov	r5, r0
   1883c:	ldm	r7, {r0, r1}
   18840:	str	r5, [r6]
   18844:	stm	r5, {r0, r1}
   18848:	b	1871c <__assert_fail@plt+0x7620>
   1884c:	bl	110d8 <abort@plt>
   18850:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18854:	andeq	pc, r2, r0, asr #2
   18858:	andeq	pc, r2, r0, asr #4
   1885c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18860:	mov	r7, r1
   18864:	ldr	lr, [pc, #492]	; 18a58 <__assert_fail@plt+0x795c>
   18868:	mov	r8, r2
   1886c:	mov	r4, r0
   18870:	mov	fp, r3
   18874:	ldm	lr!, {r0, r1, r2, r3}
   18878:	sub	sp, sp, #100	; 0x64
   1887c:	add	ip, sp, #48	; 0x30
   18880:	mov	sl, #10
   18884:	stmia	ip!, {r0, r1, r2, r3}
   18888:	cmp	r8, #0
   1888c:	cmpne	r7, #0
   18890:	ldm	lr!, {r0, r1, r2, r3}
   18894:	str	sl, [sp, #48]	; 0x30
   18898:	stmia	ip!, {r0, r1, r2, r3}
   1889c:	ldm	lr, {r0, r1, r2, r3}
   188a0:	stm	ip, {r0, r1, r2, r3}
   188a4:	beq	18a54 <__assert_fail@plt+0x7958>
   188a8:	str	r7, [sp, #88]	; 0x58
   188ac:	str	r8, [sp, #92]	; 0x5c
   188b0:	bl	11000 <__errno_location@plt>
   188b4:	ldr	r6, [pc, #416]	; 18a5c <__assert_fail@plt+0x7960>
   188b8:	cmn	r4, #-2147483647	; 0x80000001
   188bc:	ldr	r5, [r6]
   188c0:	mov	r9, r0
   188c4:	movne	r0, #0
   188c8:	moveq	r0, #1
   188cc:	ldr	r3, [r9]
   188d0:	orrs	r0, r0, r4, lsr #31
   188d4:	str	r3, [sp, #28]
   188d8:	bne	18a54 <__assert_fail@plt+0x7958>
   188dc:	ldr	r2, [r6, #4]
   188e0:	cmp	r4, r2
   188e4:	movlt	r3, sl
   188e8:	blt	18954 <__assert_fail@plt+0x7858>
   188ec:	add	r7, r6, #8
   188f0:	cmp	r5, r7
   188f4:	str	r2, [sp, #44]	; 0x2c
   188f8:	beq	18a24 <__assert_fail@plt+0x7928>
   188fc:	mov	r3, #8
   18900:	sub	r2, r4, r2
   18904:	mov	r0, r5
   18908:	str	r3, [sp]
   1890c:	add	r2, r2, #1
   18910:	mvn	r3, #-2147483648	; 0x80000000
   18914:	add	r1, sp, #44	; 0x2c
   18918:	bl	1a134 <__assert_fail@plt+0x9038>
   1891c:	mov	r5, r0
   18920:	str	r0, [r6]
   18924:	ldr	r0, [r6, #4]
   18928:	ldr	r2, [sp, #44]	; 0x2c
   1892c:	mov	r1, #0
   18930:	sub	r2, r2, r0
   18934:	add	r0, r5, r0, lsl #3
   18938:	lsl	r2, r2, #3
   1893c:	bl	11018 <memset@plt>
   18940:	ldr	r3, [sp, #48]	; 0x30
   18944:	ldr	r7, [sp, #88]	; 0x58
   18948:	ldr	r8, [sp, #92]	; 0x5c
   1894c:	ldr	r2, [sp, #44]	; 0x2c
   18950:	str	r2, [r6, #4]
   18954:	add	r2, r5, r4, lsl #3
   18958:	mov	r1, r2
   1895c:	str	r2, [sp, #32]
   18960:	ldr	r2, [sp, #52]	; 0x34
   18964:	ldr	r6, [r1, #4]
   18968:	ldr	sl, [r5, r4, lsl #3]
   1896c:	orr	r2, r2, #1
   18970:	str	r3, [sp]
   18974:	add	r3, sp, #56	; 0x38
   18978:	str	r2, [sp, #36]	; 0x24
   1897c:	str	r2, [sp, #4]
   18980:	str	r3, [sp, #8]
   18984:	mov	r0, r6
   18988:	str	r8, [sp, #16]
   1898c:	str	r7, [sp, #12]
   18990:	mov	r1, sl
   18994:	ldr	r3, [sp, #136]	; 0x88
   18998:	mov	r2, fp
   1899c:	bl	1563c <__assert_fail@plt+0x4540>
   189a0:	cmp	sl, r0
   189a4:	bhi	18a10 <__assert_fail@plt+0x7914>
   189a8:	ldr	r3, [pc, #176]	; 18a60 <__assert_fail@plt+0x7964>
   189ac:	add	r7, r0, #1
   189b0:	cmp	r6, r3
   189b4:	str	r7, [r5, r4, lsl #3]
   189b8:	beq	189c4 <__assert_fail@plt+0x78c8>
   189bc:	mov	r0, r6
   189c0:	bl	14c20 <__assert_fail@plt+0x3b24>
   189c4:	mov	r0, r7
   189c8:	bl	19f18 <__assert_fail@plt+0x8e1c>
   189cc:	ldr	r3, [sp, #32]
   189d0:	ldr	lr, [sp, #92]	; 0x5c
   189d4:	ldr	ip, [sp, #88]	; 0x58
   189d8:	ldr	r4, [sp, #36]	; 0x24
   189dc:	mov	r2, fp
   189e0:	mov	r1, r7
   189e4:	str	r0, [r3, #4]
   189e8:	add	r3, sp, #56	; 0x38
   189ec:	str	r3, [sp, #8]
   189f0:	ldr	r3, [sp, #48]	; 0x30
   189f4:	str	r4, [sp, #4]
   189f8:	str	r3, [sp]
   189fc:	str	lr, [sp, #16]
   18a00:	str	ip, [sp, #12]
   18a04:	ldr	r3, [sp, #136]	; 0x88
   18a08:	mov	r6, r0
   18a0c:	bl	1563c <__assert_fail@plt+0x4540>
   18a10:	ldr	r3, [sp, #28]
   18a14:	mov	r0, r6
   18a18:	str	r3, [r9]
   18a1c:	add	sp, sp, #100	; 0x64
   18a20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a24:	mov	r3, #8
   18a28:	sub	r2, r4, r2
   18a2c:	str	r3, [sp]
   18a30:	add	r1, sp, #44	; 0x2c
   18a34:	add	r2, r2, #1
   18a38:	mvn	r3, #-2147483648	; 0x80000000
   18a3c:	bl	1a134 <__assert_fail@plt+0x9038>
   18a40:	mov	r5, r0
   18a44:	ldm	r7, {r0, r1}
   18a48:	str	r5, [r6]
   18a4c:	stm	r5, {r0, r1}
   18a50:	b	18924 <__assert_fail@plt+0x7828>
   18a54:	bl	110d8 <abort@plt>
   18a58:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18a5c:	andeq	pc, r2, r0, asr #2
   18a60:	andeq	pc, r2, r0, asr #4
   18a64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a68:	mov	r5, r0
   18a6c:	ldr	lr, [pc, #452]	; 18c38 <__assert_fail@plt+0x7b3c>
   18a70:	mov	r6, r1
   18a74:	mov	sl, r2
   18a78:	ldm	lr!, {r0, r1, r2, r3}
   18a7c:	sub	sp, sp, #92	; 0x5c
   18a80:	add	ip, sp, #40	; 0x28
   18a84:	cmp	r6, #0
   18a88:	cmpne	r5, #0
   18a8c:	stmia	ip!, {r0, r1, r2, r3}
   18a90:	mov	r9, #10
   18a94:	ldm	lr!, {r0, r1, r2, r3}
   18a98:	moveq	fp, #1
   18a9c:	movne	fp, #0
   18aa0:	str	r9, [sp, #40]	; 0x28
   18aa4:	stmia	ip!, {r0, r1, r2, r3}
   18aa8:	ldm	lr, {r0, r1, r2, r3}
   18aac:	stm	ip, {r0, r1, r2, r3}
   18ab0:	beq	18c34 <__assert_fail@plt+0x7b38>
   18ab4:	str	r5, [sp, #80]	; 0x50
   18ab8:	str	r6, [sp, #84]	; 0x54
   18abc:	bl	11000 <__errno_location@plt>
   18ac0:	ldr	r7, [pc, #372]	; 18c3c <__assert_fail@plt+0x7b40>
   18ac4:	ldr	r2, [r7, #4]
   18ac8:	ldr	r4, [r7]
   18acc:	cmp	r2, #0
   18ad0:	ldr	r3, [r0]
   18ad4:	mov	r8, r0
   18ad8:	str	r3, [sp, #24]
   18adc:	movgt	r3, r9
   18ae0:	bgt	18b48 <__assert_fail@plt+0x7a4c>
   18ae4:	add	r5, r7, #8
   18ae8:	cmp	r4, r5
   18aec:	str	r2, [sp, #36]	; 0x24
   18af0:	beq	18c04 <__assert_fail@plt+0x7b08>
   18af4:	mov	r3, #8
   18af8:	mov	r0, r4
   18afc:	str	r3, [sp]
   18b00:	rsb	r2, r2, #1
   18b04:	mvn	r3, #-2147483648	; 0x80000000
   18b08:	add	r1, sp, #36	; 0x24
   18b0c:	bl	1a134 <__assert_fail@plt+0x9038>
   18b10:	mov	r4, r0
   18b14:	str	r0, [r7]
   18b18:	ldr	r0, [r7, #4]
   18b1c:	ldr	r2, [sp, #36]	; 0x24
   18b20:	mov	r1, #0
   18b24:	sub	r2, r2, r0
   18b28:	add	r0, r4, r0, lsl #3
   18b2c:	lsl	r2, r2, #3
   18b30:	bl	11018 <memset@plt>
   18b34:	ldr	r3, [sp, #40]	; 0x28
   18b38:	ldr	r5, [sp, #80]	; 0x50
   18b3c:	ldr	r6, [sp, #84]	; 0x54
   18b40:	ldr	r2, [sp, #36]	; 0x24
   18b44:	str	r2, [r7, #4]
   18b48:	ldr	r2, [sp, #44]	; 0x2c
   18b4c:	ldr	r9, [r4]
   18b50:	ldr	r7, [r4, #4]
   18b54:	orr	r2, r2, #1
   18b58:	add	fp, sp, #48	; 0x30
   18b5c:	str	r2, [sp, #28]
   18b60:	str	r2, [sp, #4]
   18b64:	str	r3, [sp]
   18b68:	str	r6, [sp, #16]
   18b6c:	str	r5, [sp, #12]
   18b70:	mov	r1, r9
   18b74:	mov	r0, r7
   18b78:	str	fp, [sp, #8]
   18b7c:	mvn	r3, #0
   18b80:	mov	r2, sl
   18b84:	bl	1563c <__assert_fail@plt+0x4540>
   18b88:	cmp	r9, r0
   18b8c:	bhi	18bf0 <__assert_fail@plt+0x7af4>
   18b90:	ldr	r3, [pc, #168]	; 18c40 <__assert_fail@plt+0x7b44>
   18b94:	add	r5, r0, #1
   18b98:	cmp	r7, r3
   18b9c:	str	r5, [r4]
   18ba0:	beq	18bac <__assert_fail@plt+0x7ab0>
   18ba4:	mov	r0, r7
   18ba8:	bl	14c20 <__assert_fail@plt+0x3b24>
   18bac:	mov	r0, r5
   18bb0:	bl	19f18 <__assert_fail@plt+0x8e1c>
   18bb4:	ldr	lr, [sp, #84]	; 0x54
   18bb8:	ldr	r3, [sp, #40]	; 0x28
   18bbc:	ldr	ip, [sp, #80]	; 0x50
   18bc0:	mov	r2, sl
   18bc4:	mov	r1, r5
   18bc8:	str	r0, [r4, #4]
   18bcc:	ldr	r4, [sp, #28]
   18bd0:	str	r3, [sp]
   18bd4:	str	fp, [sp, #8]
   18bd8:	str	r4, [sp, #4]
   18bdc:	str	lr, [sp, #16]
   18be0:	str	ip, [sp, #12]
   18be4:	mvn	r3, #0
   18be8:	mov	r7, r0
   18bec:	bl	1563c <__assert_fail@plt+0x4540>
   18bf0:	ldr	r3, [sp, #24]
   18bf4:	mov	r0, r7
   18bf8:	str	r3, [r8]
   18bfc:	add	sp, sp, #92	; 0x5c
   18c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c04:	mov	r3, #8
   18c08:	str	r3, [sp]
   18c0c:	add	r1, sp, #36	; 0x24
   18c10:	rsb	r2, r2, #1
   18c14:	mov	r0, fp
   18c18:	mvn	r3, #-2147483648	; 0x80000000
   18c1c:	bl	1a134 <__assert_fail@plt+0x9038>
   18c20:	mov	r4, r0
   18c24:	ldm	r5, {r0, r1}
   18c28:	str	r4, [r7]
   18c2c:	stm	r4, {r0, r1}
   18c30:	b	18b18 <__assert_fail@plt+0x7a1c>
   18c34:	bl	110d8 <abort@plt>
   18c38:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18c3c:	andeq	pc, r2, r0, asr #2
   18c40:	andeq	pc, r2, r0, asr #4
   18c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c48:	mov	r5, r0
   18c4c:	ldr	lr, [pc, #464]	; 18e24 <__assert_fail@plt+0x7d28>
   18c50:	mov	r6, r1
   18c54:	mov	sl, r2
   18c58:	mov	fp, r3
   18c5c:	ldm	lr!, {r0, r1, r2, r3}
   18c60:	sub	sp, sp, #92	; 0x5c
   18c64:	add	ip, sp, #40	; 0x28
   18c68:	cmp	r6, #0
   18c6c:	cmpne	r5, #0
   18c70:	stmia	ip!, {r0, r1, r2, r3}
   18c74:	moveq	r4, #1
   18c78:	ldm	lr!, {r0, r1, r2, r3}
   18c7c:	movne	r4, #0
   18c80:	mov	r9, #10
   18c84:	str	r4, [sp, #28]
   18c88:	stmia	ip!, {r0, r1, r2, r3}
   18c8c:	ldm	lr, {r0, r1, r2, r3}
   18c90:	str	r9, [sp, #40]	; 0x28
   18c94:	stm	ip, {r0, r1, r2, r3}
   18c98:	beq	18e20 <__assert_fail@plt+0x7d24>
   18c9c:	str	r5, [sp, #80]	; 0x50
   18ca0:	str	r6, [sp, #84]	; 0x54
   18ca4:	bl	11000 <__errno_location@plt>
   18ca8:	ldr	r7, [pc, #376]	; 18e28 <__assert_fail@plt+0x7d2c>
   18cac:	ldr	r2, [r7, #4]
   18cb0:	ldr	r4, [r7]
   18cb4:	cmp	r2, #0
   18cb8:	ldr	r3, [r0]
   18cbc:	mov	r8, r0
   18cc0:	str	r3, [sp, #24]
   18cc4:	movgt	r3, r9
   18cc8:	bgt	18d30 <__assert_fail@plt+0x7c34>
   18ccc:	add	r5, r7, #8
   18cd0:	cmp	r4, r5
   18cd4:	str	r2, [sp, #36]	; 0x24
   18cd8:	beq	18df0 <__assert_fail@plt+0x7cf4>
   18cdc:	mov	r3, #8
   18ce0:	mov	r0, r4
   18ce4:	str	r3, [sp]
   18ce8:	rsb	r2, r2, #1
   18cec:	mvn	r3, #-2147483648	; 0x80000000
   18cf0:	add	r1, sp, #36	; 0x24
   18cf4:	bl	1a134 <__assert_fail@plt+0x9038>
   18cf8:	mov	r4, r0
   18cfc:	str	r0, [r7]
   18d00:	ldr	r0, [r7, #4]
   18d04:	ldr	r2, [sp, #36]	; 0x24
   18d08:	mov	r1, #0
   18d0c:	sub	r2, r2, r0
   18d10:	add	r0, r4, r0, lsl #3
   18d14:	lsl	r2, r2, #3
   18d18:	bl	11018 <memset@plt>
   18d1c:	ldr	r3, [sp, #40]	; 0x28
   18d20:	ldr	r5, [sp, #80]	; 0x50
   18d24:	ldr	r6, [sp, #84]	; 0x54
   18d28:	ldr	r2, [sp, #36]	; 0x24
   18d2c:	str	r2, [r7, #4]
   18d30:	ldr	r2, [sp, #44]	; 0x2c
   18d34:	ldr	r9, [r4]
   18d38:	ldr	r7, [r4, #4]
   18d3c:	orr	r2, r2, #1
   18d40:	str	r3, [sp]
   18d44:	add	r3, sp, #48	; 0x30
   18d48:	str	r2, [sp, #28]
   18d4c:	str	r2, [sp, #4]
   18d50:	str	r3, [sp, #8]
   18d54:	str	r6, [sp, #16]
   18d58:	str	r5, [sp, #12]
   18d5c:	mov	r1, r9
   18d60:	mov	r0, r7
   18d64:	mov	r3, fp
   18d68:	mov	r2, sl
   18d6c:	bl	1563c <__assert_fail@plt+0x4540>
   18d70:	cmp	r9, r0
   18d74:	bhi	18ddc <__assert_fail@plt+0x7ce0>
   18d78:	ldr	r3, [pc, #172]	; 18e2c <__assert_fail@plt+0x7d30>
   18d7c:	add	r5, r0, #1
   18d80:	cmp	r7, r3
   18d84:	str	r5, [r4]
   18d88:	beq	18d94 <__assert_fail@plt+0x7c98>
   18d8c:	mov	r0, r7
   18d90:	bl	14c20 <__assert_fail@plt+0x3b24>
   18d94:	mov	r0, r5
   18d98:	bl	19f18 <__assert_fail@plt+0x8e1c>
   18d9c:	add	lr, sp, #48	; 0x30
   18da0:	ldr	ip, [sp, #84]	; 0x54
   18da4:	mov	r1, r5
   18da8:	ldr	r5, [sp, #28]
   18dac:	mov	r3, fp
   18db0:	mov	r2, sl
   18db4:	str	r0, [r4, #4]
   18db8:	ldr	r4, [sp, #80]	; 0x50
   18dbc:	str	lr, [sp, #8]
   18dc0:	ldr	lr, [sp, #40]	; 0x28
   18dc4:	str	r5, [sp, #4]
   18dc8:	str	ip, [sp, #16]
   18dcc:	str	r4, [sp, #12]
   18dd0:	str	lr, [sp]
   18dd4:	mov	r7, r0
   18dd8:	bl	1563c <__assert_fail@plt+0x4540>
   18ddc:	ldr	r3, [sp, #24]
   18de0:	mov	r0, r7
   18de4:	str	r3, [r8]
   18de8:	add	sp, sp, #92	; 0x5c
   18dec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18df0:	mov	r3, #8
   18df4:	str	r3, [sp]
   18df8:	add	r1, sp, #36	; 0x24
   18dfc:	rsb	r2, r2, #1
   18e00:	ldr	r0, [sp, #28]
   18e04:	mvn	r3, #-2147483648	; 0x80000000
   18e08:	bl	1a134 <__assert_fail@plt+0x9038>
   18e0c:	mov	r4, r0
   18e10:	ldm	r5, {r0, r1}
   18e14:	str	r4, [r7]
   18e18:	stm	r4, {r0, r1}
   18e1c:	b	18d00 <__assert_fail@plt+0x7c04>
   18e20:	bl	110d8 <abort@plt>
   18e24:	andeq	pc, r2, r0, lsl r2	; <UNPREDICTABLE>
   18e28:	andeq	pc, r2, r0, asr #2
   18e2c:	andeq	pc, r2, r0, asr #4
   18e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e34:	sub	sp, sp, #52	; 0x34
   18e38:	mov	r5, r0
   18e3c:	mov	sl, r1
   18e40:	mov	fp, r2
   18e44:	bl	11000 <__errno_location@plt>
   18e48:	ldr	r4, [pc, #404]	; 18fe4 <__assert_fail@plt+0x7ee8>
   18e4c:	cmn	r5, #-2147483647	; 0x80000001
   18e50:	ldr	r6, [r4]
   18e54:	mov	r8, r0
   18e58:	movne	r0, #0
   18e5c:	moveq	r0, #1
   18e60:	ldr	r3, [r8]
   18e64:	orrs	r0, r0, r5, lsr #31
   18e68:	str	r3, [sp, #28]
   18e6c:	bne	18fe0 <__assert_fail@plt+0x7ee4>
   18e70:	ldr	r2, [r4, #4]
   18e74:	cmp	r5, r2
   18e78:	blt	18ed8 <__assert_fail@plt+0x7ddc>
   18e7c:	add	r7, r4, #8
   18e80:	cmp	r6, r7
   18e84:	str	r2, [sp, #44]	; 0x2c
   18e88:	beq	18fb0 <__assert_fail@plt+0x7eb4>
   18e8c:	mov	r3, #8
   18e90:	sub	r2, r5, r2
   18e94:	mov	r0, r6
   18e98:	str	r3, [sp]
   18e9c:	add	r2, r2, #1
   18ea0:	mvn	r3, #-2147483648	; 0x80000000
   18ea4:	add	r1, sp, #44	; 0x2c
   18ea8:	bl	1a134 <__assert_fail@plt+0x9038>
   18eac:	mov	r6, r0
   18eb0:	str	r0, [r4]
   18eb4:	ldr	r0, [r4, #4]
   18eb8:	ldr	r2, [sp, #44]	; 0x2c
   18ebc:	mov	r1, #0
   18ec0:	sub	r2, r2, r0
   18ec4:	add	r0, r6, r0, lsl #3
   18ec8:	lsl	r2, r2, #3
   18ecc:	bl	11018 <memset@plt>
   18ed0:	ldr	r3, [sp, #44]	; 0x2c
   18ed4:	str	r3, [r4, #4]
   18ed8:	ldr	r2, [r4, #56]	; 0x38
   18edc:	add	r3, r6, r5, lsl #3
   18ee0:	ldr	r1, [r4, #20]
   18ee4:	ldr	r7, [r3, #4]
   18ee8:	ldr	r9, [r6, r5, lsl #3]
   18eec:	ldr	ip, [r4, #60]	; 0x3c
   18ef0:	str	r3, [sp, #32]
   18ef4:	ldr	r3, [r4, #16]
   18ef8:	str	r2, [sp, #12]
   18efc:	ldr	r2, [pc, #228]	; 18fe8 <__assert_fail@plt+0x7eec>
   18f00:	orr	r1, r1, #1
   18f04:	str	r1, [sp, #36]	; 0x24
   18f08:	str	r1, [sp, #4]
   18f0c:	str	r2, [sp, #8]
   18f10:	str	r3, [sp]
   18f14:	mov	r0, r7
   18f18:	mov	r1, r9
   18f1c:	str	ip, [sp, #16]
   18f20:	mov	r3, fp
   18f24:	mov	r2, sl
   18f28:	bl	1563c <__assert_fail@plt+0x4540>
   18f2c:	cmp	r9, r0
   18f30:	bhi	18f9c <__assert_fail@plt+0x7ea0>
   18f34:	ldr	r3, [pc, #176]	; 18fec <__assert_fail@plt+0x7ef0>
   18f38:	add	r9, r0, #1
   18f3c:	cmp	r7, r3
   18f40:	str	r9, [r6, r5, lsl #3]
   18f44:	beq	18f50 <__assert_fail@plt+0x7e54>
   18f48:	mov	r0, r7
   18f4c:	bl	14c20 <__assert_fail@plt+0x3b24>
   18f50:	mov	r0, r9
   18f54:	bl	19f18 <__assert_fail@plt+0x8e1c>
   18f58:	ldr	ip, [sp, #32]
   18f5c:	ldr	lr, [r4, #60]	; 0x3c
   18f60:	ldr	r5, [r4, #56]	; 0x38
   18f64:	mov	r3, fp
   18f68:	mov	r2, sl
   18f6c:	mov	r1, r9
   18f70:	str	r0, [ip, #4]
   18f74:	ldr	ip, [r4, #16]
   18f78:	ldr	r4, [pc, #104]	; 18fe8 <__assert_fail@plt+0x7eec>
   18f7c:	str	lr, [sp, #16]
   18f80:	str	r4, [sp, #8]
   18f84:	ldr	r4, [sp, #36]	; 0x24
   18f88:	str	r5, [sp, #12]
   18f8c:	str	r4, [sp, #4]
   18f90:	str	ip, [sp]
   18f94:	mov	r7, r0
   18f98:	bl	1563c <__assert_fail@plt+0x4540>
   18f9c:	ldr	r3, [sp, #28]
   18fa0:	mov	r0, r7
   18fa4:	str	r3, [r8]
   18fa8:	add	sp, sp, #52	; 0x34
   18fac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fb0:	mov	r3, #8
   18fb4:	sub	r2, r5, r2
   18fb8:	str	r3, [sp]
   18fbc:	add	r1, sp, #44	; 0x2c
   18fc0:	add	r2, r2, #1
   18fc4:	mvn	r3, #-2147483648	; 0x80000000
   18fc8:	bl	1a134 <__assert_fail@plt+0x9038>
   18fcc:	mov	r6, r0
   18fd0:	ldm	r7, {r0, r1}
   18fd4:	str	r6, [r4]
   18fd8:	stm	r6, {r0, r1}
   18fdc:	b	18eb4 <__assert_fail@plt+0x7db8>
   18fe0:	bl	110d8 <abort@plt>
   18fe4:	andeq	pc, r2, r0, asr #2
   18fe8:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   18fec:	andeq	pc, r2, r0, asr #4
   18ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ff4:	sub	sp, sp, #44	; 0x2c
   18ff8:	mov	r9, r0
   18ffc:	mov	sl, r1
   19000:	bl	11000 <__errno_location@plt>
   19004:	ldr	r4, [pc, #360]	; 19174 <__assert_fail@plt+0x8078>
   19008:	ldr	r2, [r4, #4]
   1900c:	ldr	r5, [r4]
   19010:	cmp	r2, #0
   19014:	ldr	r3, [r0]
   19018:	mov	r7, r0
   1901c:	str	r3, [sp, #24]
   19020:	bgt	1907c <__assert_fail@plt+0x7f80>
   19024:	add	r6, r4, #8
   19028:	cmp	r5, r6
   1902c:	str	r2, [sp, #36]	; 0x24
   19030:	beq	19144 <__assert_fail@plt+0x8048>
   19034:	mov	r3, #8
   19038:	mov	r0, r5
   1903c:	str	r3, [sp]
   19040:	rsb	r2, r2, #1
   19044:	mvn	r3, #-2147483648	; 0x80000000
   19048:	add	r1, sp, #36	; 0x24
   1904c:	bl	1a134 <__assert_fail@plt+0x9038>
   19050:	mov	r5, r0
   19054:	str	r0, [r4]
   19058:	ldr	r0, [r4, #4]
   1905c:	ldr	r2, [sp, #36]	; 0x24
   19060:	mov	r1, #0
   19064:	sub	r2, r2, r0
   19068:	add	r0, r5, r0, lsl #3
   1906c:	lsl	r2, r2, #3
   19070:	bl	11018 <memset@plt>
   19074:	ldr	r3, [sp, #36]	; 0x24
   19078:	str	r3, [r4, #4]
   1907c:	ldr	r1, [r4, #20]
   19080:	ldr	r8, [r5]
   19084:	ldr	r6, [r5, #4]
   19088:	ldr	r2, [r4, #56]	; 0x38
   1908c:	ldr	r3, [r4, #16]
   19090:	ldr	ip, [r4, #60]	; 0x3c
   19094:	ldr	fp, [pc, #220]	; 19178 <__assert_fail@plt+0x807c>
   19098:	orr	r1, r1, #1
   1909c:	str	r1, [sp, #28]
   190a0:	str	r1, [sp, #4]
   190a4:	str	r2, [sp, #12]
   190a8:	str	r3, [sp]
   190ac:	mov	r1, r8
   190b0:	mov	r0, r6
   190b4:	str	ip, [sp, #16]
   190b8:	str	fp, [sp, #8]
   190bc:	mov	r3, sl
   190c0:	mov	r2, r9
   190c4:	bl	1563c <__assert_fail@plt+0x4540>
   190c8:	cmp	r8, r0
   190cc:	bhi	19130 <__assert_fail@plt+0x8034>
   190d0:	ldr	r3, [pc, #164]	; 1917c <__assert_fail@plt+0x8080>
   190d4:	add	r8, r0, #1
   190d8:	cmp	r6, r3
   190dc:	str	r8, [r5]
   190e0:	beq	190ec <__assert_fail@plt+0x7ff0>
   190e4:	mov	r0, r6
   190e8:	bl	14c20 <__assert_fail@plt+0x3b24>
   190ec:	mov	r0, r8
   190f0:	bl	19f18 <__assert_fail@plt+0x8e1c>
   190f4:	ldr	lr, [r4, #60]	; 0x3c
   190f8:	ldr	ip, [r4, #16]
   190fc:	mov	r3, sl
   19100:	mov	r2, r9
   19104:	mov	r1, r8
   19108:	str	r0, [r5, #4]
   1910c:	ldr	r5, [r4, #56]	; 0x38
   19110:	ldr	r4, [sp, #28]
   19114:	str	fp, [sp, #8]
   19118:	str	r4, [sp, #4]
   1911c:	str	lr, [sp, #16]
   19120:	str	r5, [sp, #12]
   19124:	str	ip, [sp]
   19128:	mov	r6, r0
   1912c:	bl	1563c <__assert_fail@plt+0x4540>
   19130:	ldr	r3, [sp, #24]
   19134:	mov	r0, r6
   19138:	str	r3, [r7]
   1913c:	add	sp, sp, #44	; 0x2c
   19140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19144:	mov	r3, #8
   19148:	str	r3, [sp]
   1914c:	add	r1, sp, #36	; 0x24
   19150:	rsb	r2, r2, #1
   19154:	mvn	r3, #-2147483648	; 0x80000000
   19158:	mov	r0, #0
   1915c:	bl	1a134 <__assert_fail@plt+0x9038>
   19160:	mov	r5, r0
   19164:	ldm	r6, {r0, r1}
   19168:	str	r5, [r4]
   1916c:	stm	r5, {r0, r1}
   19170:	b	19058 <__assert_fail@plt+0x7f5c>
   19174:	andeq	pc, r2, r0, asr #2
   19178:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   1917c:	andeq	pc, r2, r0, asr #4
   19180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19184:	sub	sp, sp, #44	; 0x2c
   19188:	mov	r5, r0
   1918c:	mov	sl, r1
   19190:	bl	11000 <__errno_location@plt>
   19194:	ldr	r4, [pc, #396]	; 19328 <__assert_fail@plt+0x822c>
   19198:	cmn	r5, #-2147483647	; 0x80000001
   1919c:	ldr	r6, [r4]
   191a0:	mov	r8, r0
   191a4:	movne	r0, #0
   191a8:	moveq	r0, #1
   191ac:	ldr	r3, [r8]
   191b0:	orrs	r0, r0, r5, lsr #31
   191b4:	str	r3, [sp, #24]
   191b8:	bne	19324 <__assert_fail@plt+0x8228>
   191bc:	ldr	r2, [r4, #4]
   191c0:	cmp	r5, r2
   191c4:	blt	19224 <__assert_fail@plt+0x8128>
   191c8:	add	r7, r4, #8
   191cc:	cmp	r6, r7
   191d0:	str	r2, [sp, #36]	; 0x24
   191d4:	beq	192f4 <__assert_fail@plt+0x81f8>
   191d8:	mov	r3, #8
   191dc:	sub	r2, r5, r2
   191e0:	mov	r0, r6
   191e4:	str	r3, [sp]
   191e8:	add	r2, r2, #1
   191ec:	mvn	r3, #-2147483648	; 0x80000000
   191f0:	add	r1, sp, #36	; 0x24
   191f4:	bl	1a134 <__assert_fail@plt+0x9038>
   191f8:	mov	r6, r0
   191fc:	str	r0, [r4]
   19200:	ldr	r0, [r4, #4]
   19204:	ldr	r2, [sp, #36]	; 0x24
   19208:	mov	r1, #0
   1920c:	sub	r2, r2, r0
   19210:	add	r0, r6, r0, lsl #3
   19214:	lsl	r2, r2, #3
   19218:	bl	11018 <memset@plt>
   1921c:	ldr	r3, [sp, #36]	; 0x24
   19220:	str	r3, [r4, #4]
   19224:	ldr	r2, [r4, #56]	; 0x38
   19228:	add	fp, r6, r5, lsl #3
   1922c:	ldr	r1, [r4, #20]
   19230:	ldr	r9, [r6, r5, lsl #3]
   19234:	ldr	r7, [fp, #4]
   19238:	ldr	r3, [r4, #16]
   1923c:	ldr	ip, [r4, #60]	; 0x3c
   19240:	str	r2, [sp, #12]
   19244:	ldr	r2, [pc, #224]	; 1932c <__assert_fail@plt+0x8230>
   19248:	orr	r1, r1, #1
   1924c:	str	r1, [sp, #28]
   19250:	str	r1, [sp, #4]
   19254:	str	r2, [sp, #8]
   19258:	str	r3, [sp]
   1925c:	mov	r0, r7
   19260:	mov	r1, r9
   19264:	str	ip, [sp, #16]
   19268:	mvn	r3, #0
   1926c:	mov	r2, sl
   19270:	bl	1563c <__assert_fail@plt+0x4540>
   19274:	cmp	r9, r0
   19278:	bhi	192e0 <__assert_fail@plt+0x81e4>
   1927c:	ldr	r3, [pc, #172]	; 19330 <__assert_fail@plt+0x8234>
   19280:	add	r9, r0, #1
   19284:	cmp	r7, r3
   19288:	str	r9, [r6, r5, lsl #3]
   1928c:	beq	19298 <__assert_fail@plt+0x819c>
   19290:	mov	r0, r7
   19294:	bl	14c20 <__assert_fail@plt+0x3b24>
   19298:	mov	r0, r9
   1929c:	bl	19f18 <__assert_fail@plt+0x8e1c>
   192a0:	ldr	ip, [r4, #60]	; 0x3c
   192a4:	ldr	r3, [r4, #16]
   192a8:	ldr	lr, [r4, #56]	; 0x38
   192ac:	ldr	r4, [pc, #120]	; 1932c <__assert_fail@plt+0x8230>
   192b0:	mov	r2, sl
   192b4:	mov	r1, r9
   192b8:	str	r0, [fp, #4]
   192bc:	str	r4, [sp, #8]
   192c0:	ldr	r4, [sp, #28]
   192c4:	str	r3, [sp]
   192c8:	str	r4, [sp, #4]
   192cc:	str	ip, [sp, #16]
   192d0:	str	lr, [sp, #12]
   192d4:	mvn	r3, #0
   192d8:	mov	r7, r0
   192dc:	bl	1563c <__assert_fail@plt+0x4540>
   192e0:	ldr	r3, [sp, #24]
   192e4:	mov	r0, r7
   192e8:	str	r3, [r8]
   192ec:	add	sp, sp, #44	; 0x2c
   192f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   192f4:	mov	r3, #8
   192f8:	sub	r2, r5, r2
   192fc:	str	r3, [sp]
   19300:	add	r1, sp, #36	; 0x24
   19304:	add	r2, r2, #1
   19308:	mvn	r3, #-2147483648	; 0x80000000
   1930c:	bl	1a134 <__assert_fail@plt+0x9038>
   19310:	mov	r6, r0
   19314:	ldm	r7, {r0, r1}
   19318:	str	r6, [r4]
   1931c:	stm	r6, {r0, r1}
   19320:	b	19200 <__assert_fail@plt+0x8104>
   19324:	bl	110d8 <abort@plt>
   19328:	andeq	pc, r2, r0, asr #2
   1932c:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   19330:	andeq	pc, r2, r0, asr #4
   19334:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19338:	sub	sp, sp, #44	; 0x2c
   1933c:	mov	sl, r0
   19340:	bl	11000 <__errno_location@plt>
   19344:	ldr	r4, [pc, #348]	; 194a8 <__assert_fail@plt+0x83ac>
   19348:	ldr	r2, [r4, #4]
   1934c:	ldr	r5, [r4]
   19350:	cmp	r2, #0
   19354:	ldr	r3, [r0]
   19358:	mov	r8, r0
   1935c:	str	r3, [sp, #28]
   19360:	bgt	193bc <__assert_fail@plt+0x82c0>
   19364:	add	r6, r4, #8
   19368:	cmp	r5, r6
   1936c:	str	r2, [sp, #36]	; 0x24
   19370:	beq	19478 <__assert_fail@plt+0x837c>
   19374:	mov	r3, #8
   19378:	mov	r0, r5
   1937c:	str	r3, [sp]
   19380:	rsb	r2, r2, #1
   19384:	mvn	r3, #-2147483648	; 0x80000000
   19388:	add	r1, sp, #36	; 0x24
   1938c:	bl	1a134 <__assert_fail@plt+0x9038>
   19390:	mov	r5, r0
   19394:	str	r0, [r4]
   19398:	ldr	r0, [r4, #4]
   1939c:	ldr	r2, [sp, #36]	; 0x24
   193a0:	mov	r1, #0
   193a4:	sub	r2, r2, r0
   193a8:	add	r0, r5, r0, lsl #3
   193ac:	lsl	r2, r2, #3
   193b0:	bl	11018 <memset@plt>
   193b4:	ldr	r3, [sp, #36]	; 0x24
   193b8:	str	r3, [r4, #4]
   193bc:	ldr	r7, [r4, #20]
   193c0:	ldr	r9, [r5]
   193c4:	ldr	r6, [r5, #4]
   193c8:	ldr	r2, [r4, #56]	; 0x38
   193cc:	ldr	r3, [r4, #16]
   193d0:	ldr	ip, [r4, #60]	; 0x3c
   193d4:	ldr	fp, [pc, #208]	; 194ac <__assert_fail@plt+0x83b0>
   193d8:	orr	r7, r7, #1
   193dc:	str	r2, [sp, #12]
   193e0:	str	r3, [sp]
   193e4:	str	r7, [sp, #4]
   193e8:	mov	r1, r9
   193ec:	mov	r0, r6
   193f0:	str	ip, [sp, #16]
   193f4:	str	fp, [sp, #8]
   193f8:	mvn	r3, #0
   193fc:	mov	r2, sl
   19400:	bl	1563c <__assert_fail@plt+0x4540>
   19404:	cmp	r9, r0
   19408:	bhi	19464 <__assert_fail@plt+0x8368>
   1940c:	ldr	r3, [pc, #156]	; 194b0 <__assert_fail@plt+0x83b4>
   19410:	add	r9, r0, #1
   19414:	cmp	r6, r3
   19418:	str	r9, [r5]
   1941c:	beq	19428 <__assert_fail@plt+0x832c>
   19420:	mov	r0, r6
   19424:	bl	14c20 <__assert_fail@plt+0x3b24>
   19428:	mov	r0, r9
   1942c:	bl	19f18 <__assert_fail@plt+0x8e1c>
   19430:	ldr	ip, [r4, #60]	; 0x3c
   19434:	ldr	r3, [r4, #16]
   19438:	ldr	lr, [r4, #56]	; 0x38
   1943c:	mov	r2, sl
   19440:	mov	r1, r9
   19444:	str	r0, [r5, #4]
   19448:	str	r3, [sp]
   1944c:	stmib	sp, {r7, fp}
   19450:	str	ip, [sp, #16]
   19454:	str	lr, [sp, #12]
   19458:	mvn	r3, #0
   1945c:	mov	r6, r0
   19460:	bl	1563c <__assert_fail@plt+0x4540>
   19464:	ldr	r3, [sp, #28]
   19468:	mov	r0, r6
   1946c:	str	r3, [r8]
   19470:	add	sp, sp, #44	; 0x2c
   19474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19478:	mov	r3, #8
   1947c:	str	r3, [sp]
   19480:	add	r1, sp, #36	; 0x24
   19484:	rsb	r2, r2, #1
   19488:	mvn	r3, #-2147483648	; 0x80000000
   1948c:	mov	r0, #0
   19490:	bl	1a134 <__assert_fail@plt+0x9038>
   19494:	mov	r5, r0
   19498:	ldm	r6, {r0, r1}
   1949c:	str	r5, [r4]
   194a0:	stm	r5, {r0, r1}
   194a4:	b	19398 <__assert_fail@plt+0x829c>
   194a8:	andeq	pc, r2, r0, asr #2
   194ac:	andeq	pc, r2, r8, asr r1	; <UNPREDICTABLE>
   194b0:	andeq	pc, r2, r0, asr #4
   194b4:	push	{r4, r5, r6, lr}
   194b8:	sub	sp, sp, #32
   194bc:	cmp	r1, #0
   194c0:	mov	r4, r0
   194c4:	ldr	r5, [sp, #48]	; 0x30
   194c8:	ldr	r6, [sp, #52]	; 0x34
   194cc:	beq	197e4 <__assert_fail@plt+0x86e8>
   194d0:	stm	sp, {r2, r3}
   194d4:	mov	r3, r1
   194d8:	ldr	r2, [pc, #808]	; 19808 <__assert_fail@plt+0x870c>
   194dc:	mov	r1, #1
   194e0:	bl	1103c <__fprintf_chk@plt>
   194e4:	mov	r2, #5
   194e8:	ldr	r1, [pc, #796]	; 1980c <__assert_fail@plt+0x8710>
   194ec:	mov	r0, #0
   194f0:	bl	10ef8 <dcgettext@plt>
   194f4:	ldr	r3, [pc, #788]	; 19810 <__assert_fail@plt+0x8714>
   194f8:	ldr	r2, [pc, #788]	; 19814 <__assert_fail@plt+0x8718>
   194fc:	str	r3, [sp]
   19500:	mov	r1, #1
   19504:	mov	r3, r0
   19508:	mov	r0, r4
   1950c:	bl	1103c <__fprintf_chk@plt>
   19510:	mov	r1, r4
   19514:	mov	r0, #10
   19518:	bl	10eec <fputc_unlocked@plt>
   1951c:	mov	r2, #5
   19520:	ldr	r1, [pc, #752]	; 19818 <__assert_fail@plt+0x871c>
   19524:	mov	r0, #0
   19528:	bl	10ef8 <dcgettext@plt>
   1952c:	mov	r1, #1
   19530:	ldr	r3, [pc, #740]	; 1981c <__assert_fail@plt+0x8720>
   19534:	mov	r2, r0
   19538:	mov	r0, r4
   1953c:	bl	1103c <__fprintf_chk@plt>
   19540:	mov	r1, r4
   19544:	mov	r0, #10
   19548:	bl	10eec <fputc_unlocked@plt>
   1954c:	cmp	r6, #9
   19550:	ldrls	pc, [pc, r6, lsl #2]
   19554:	b	197fc <__assert_fail@plt+0x8700>
   19558:	ldrdeq	r9, [r1], -ip
   1955c:	andeq	r9, r1, r4, ror #11
   19560:	andeq	r9, r1, r0, lsl r6
   19564:	andeq	r9, r1, r4, asr #12
   19568:	andeq	r9, r1, r0, lsl #13
   1956c:			; <UNDEFINED> instruction: 0x000196bc
   19570:	strdeq	r9, [r1], -r8
   19574:	andeq	r9, r1, ip, lsr r7
   19578:	andeq	r9, r1, ip, lsl #15
   1957c:	andeq	r9, r1, r0, lsl #11
   19580:	ldr	r1, [pc, #664]	; 19820 <__assert_fail@plt+0x8724>
   19584:	mov	r2, #5
   19588:	mov	r0, #0
   1958c:	bl	10ef8 <dcgettext@plt>
   19590:	ldr	ip, [r5, #32]
   19594:	ldr	r1, [r5, #28]
   19598:	ldr	r2, [r5, #24]
   1959c:	ldr	r3, [r5]
   195a0:	ldr	r6, [r5, #20]
   195a4:	str	ip, [sp, #28]
   195a8:	ldr	lr, [r5, #16]
   195ac:	str	r1, [sp, #24]
   195b0:	ldr	ip, [r5, #12]
   195b4:	str	r2, [sp, #20]
   195b8:	ldr	r1, [r5, #8]
   195bc:	ldr	r2, [r5, #4]
   195c0:	str	r6, [sp, #16]
   195c4:	stmib	sp, {r1, ip, lr}
   195c8:	mov	r1, #1
   195cc:	str	r2, [sp]
   195d0:	mov	r2, r0
   195d4:	mov	r0, r4
   195d8:	bl	1103c <__fprintf_chk@plt>
   195dc:	add	sp, sp, #32
   195e0:	pop	{r4, r5, r6, pc}
   195e4:	mov	r2, #5
   195e8:	ldr	r1, [pc, #564]	; 19824 <__assert_fail@plt+0x8728>
   195ec:	mov	r0, #0
   195f0:	bl	10ef8 <dcgettext@plt>
   195f4:	ldr	r3, [r5]
   195f8:	mov	r1, #1
   195fc:	mov	r2, r0
   19600:	mov	r0, r4
   19604:	add	sp, sp, #32
   19608:	pop	{r4, r5, r6, lr}
   1960c:	b	1103c <__fprintf_chk@plt>
   19610:	mov	r2, #5
   19614:	ldr	r1, [pc, #524]	; 19828 <__assert_fail@plt+0x872c>
   19618:	mov	r0, #0
   1961c:	bl	10ef8 <dcgettext@plt>
   19620:	ldr	r2, [r5, #4]
   19624:	ldr	r3, [r5]
   19628:	mov	r1, #1
   1962c:	str	r2, [sp, #48]	; 0x30
   19630:	mov	r2, r0
   19634:	mov	r0, r4
   19638:	add	sp, sp, #32
   1963c:	pop	{r4, r5, r6, lr}
   19640:	b	1103c <__fprintf_chk@plt>
   19644:	mov	r2, #5
   19648:	ldr	r1, [pc, #476]	; 1982c <__assert_fail@plt+0x8730>
   1964c:	mov	r0, #0
   19650:	bl	10ef8 <dcgettext@plt>
   19654:	ldr	r1, [r5, #8]
   19658:	ldr	r2, [r5, #4]
   1965c:	ldr	r3, [r5]
   19660:	str	r1, [sp, #52]	; 0x34
   19664:	str	r2, [sp, #48]	; 0x30
   19668:	mov	r1, #1
   1966c:	mov	r2, r0
   19670:	mov	r0, r4
   19674:	add	sp, sp, #32
   19678:	pop	{r4, r5, r6, lr}
   1967c:	b	1103c <__fprintf_chk@plt>
   19680:	mov	r2, #5
   19684:	ldr	r1, [pc, #420]	; 19830 <__assert_fail@plt+0x8734>
   19688:	mov	r0, #0
   1968c:	bl	10ef8 <dcgettext@plt>
   19690:	ldr	r1, [r5, #8]
   19694:	ldr	ip, [r5, #12]
   19698:	ldr	r2, [r5, #4]
   1969c:	ldr	r3, [r5]
   196a0:	stmib	sp, {r1, ip}
   196a4:	str	r2, [sp]
   196a8:	mov	r1, #1
   196ac:	mov	r2, r0
   196b0:	mov	r0, r4
   196b4:	bl	1103c <__fprintf_chk@plt>
   196b8:	b	195dc <__assert_fail@plt+0x84e0>
   196bc:	mov	r2, #5
   196c0:	ldr	r1, [pc, #364]	; 19834 <__assert_fail@plt+0x8738>
   196c4:	mov	r0, #0
   196c8:	bl	10ef8 <dcgettext@plt>
   196cc:	add	r1, r5, #8
   196d0:	ldr	r2, [r5, #4]
   196d4:	ldm	r1, {r1, ip, lr}
   196d8:	ldr	r3, [r5]
   196dc:	str	r2, [sp]
   196e0:	stmib	sp, {r1, ip, lr}
   196e4:	mov	r1, #1
   196e8:	mov	r2, r0
   196ec:	mov	r0, r4
   196f0:	bl	1103c <__fprintf_chk@plt>
   196f4:	b	195dc <__assert_fail@plt+0x84e0>
   196f8:	mov	r2, #5
   196fc:	ldr	r1, [pc, #308]	; 19838 <__assert_fail@plt+0x873c>
   19700:	mov	r0, #0
   19704:	bl	10ef8 <dcgettext@plt>
   19708:	add	r1, r5, #8
   1970c:	ldr	r2, [r5, #4]
   19710:	ldm	r1, {r1, ip, lr}
   19714:	ldr	r6, [r5, #20]
   19718:	ldr	r3, [r5]
   1971c:	stmib	sp, {r1, ip, lr}
   19720:	mov	r1, #1
   19724:	str	r2, [sp]
   19728:	str	r6, [sp, #16]
   1972c:	mov	r2, r0
   19730:	mov	r0, r4
   19734:	bl	1103c <__fprintf_chk@plt>
   19738:	b	195dc <__assert_fail@plt+0x84e0>
   1973c:	mov	r2, #5
   19740:	ldr	r1, [pc, #244]	; 1983c <__assert_fail@plt+0x8740>
   19744:	mov	r0, #0
   19748:	bl	10ef8 <dcgettext@plt>
   1974c:	ldr	r2, [r5, #24]
   19750:	ldr	r3, [r5]
   19754:	ldr	r6, [r5, #20]
   19758:	ldr	lr, [r5, #16]
   1975c:	ldr	ip, [r5, #12]
   19760:	str	r2, [sp, #20]
   19764:	ldr	r1, [r5, #8]
   19768:	ldr	r2, [r5, #4]
   1976c:	str	r6, [sp, #16]
   19770:	stmib	sp, {r1, ip, lr}
   19774:	mov	r1, #1
   19778:	str	r2, [sp]
   1977c:	mov	r2, r0
   19780:	mov	r0, r4
   19784:	bl	1103c <__fprintf_chk@plt>
   19788:	b	195dc <__assert_fail@plt+0x84e0>
   1978c:	mov	r2, #5
   19790:	ldr	r1, [pc, #168]	; 19840 <__assert_fail@plt+0x8744>
   19794:	mov	r0, #0
   19798:	bl	10ef8 <dcgettext@plt>
   1979c:	ldr	r1, [r5, #28]
   197a0:	ldr	r2, [r5, #24]
   197a4:	ldr	r3, [r5]
   197a8:	ldr	r6, [r5, #20]
   197ac:	ldr	lr, [r5, #16]
   197b0:	str	r1, [sp, #24]
   197b4:	ldr	ip, [r5, #12]
   197b8:	str	r2, [sp, #20]
   197bc:	ldr	r1, [r5, #8]
   197c0:	ldr	r2, [r5, #4]
   197c4:	str	r6, [sp, #16]
   197c8:	stmib	sp, {r1, ip, lr}
   197cc:	mov	r1, #1
   197d0:	str	r2, [sp]
   197d4:	mov	r2, r0
   197d8:	mov	r0, r4
   197dc:	bl	1103c <__fprintf_chk@plt>
   197e0:	b	195dc <__assert_fail@plt+0x84e0>
   197e4:	str	r3, [sp]
   197e8:	mov	r1, #1
   197ec:	mov	r3, r2
   197f0:	ldr	r2, [pc, #76]	; 19844 <__assert_fail@plt+0x8748>
   197f4:	bl	1103c <__fprintf_chk@plt>
   197f8:	b	194e4 <__assert_fail@plt+0x83e8>
   197fc:	mov	r2, #5
   19800:	ldr	r1, [pc, #64]	; 19848 <__assert_fail@plt+0x874c>
   19804:	b	19588 <__assert_fail@plt+0x848c>
   19808:	andeq	lr, r1, r8, asr #22
   1980c:	andeq	lr, r1, ip, asr fp
   19810:	andeq	r0, r0, r6, ror #15
   19814:	andeq	lr, r1, r4, lsr lr
   19818:	andeq	lr, r1, r0, ror #22
   1981c:	andeq	lr, r1, ip, lsl #24
   19820:	andeq	lr, r1, ip, lsr sp
   19824:	andeq	lr, r1, r0, lsr ip
   19828:	andeq	lr, r1, r0, asr #24
   1982c:	andeq	lr, r1, r8, asr ip
   19830:	andeq	lr, r1, r4, ror ip
   19834:	muleq	r1, r4, ip
   19838:			; <UNDEFINED> instruction: 0x0001ecb8
   1983c:	andeq	lr, r1, r0, ror #25
   19840:	andeq	lr, r1, ip, lsl #26
   19844:	andeq	lr, r1, r4, asr fp
   19848:	andeq	lr, r1, r0, ror sp
   1984c:	push	{r4, r5, lr}
   19850:	sub	sp, sp, #12
   19854:	ldr	r5, [sp, #24]
   19858:	ldr	ip, [r5]
   1985c:	cmp	ip, #0
   19860:	beq	1987c <__assert_fail@plt+0x8780>
   19864:	mov	lr, r5
   19868:	mov	ip, #0
   1986c:	ldr	r4, [lr, #4]!
   19870:	add	ip, ip, #1
   19874:	cmp	r4, #0
   19878:	bne	1986c <__assert_fail@plt+0x8770>
   1987c:	stm	sp, {r5, ip}
   19880:	bl	194b4 <__assert_fail@plt+0x83b8>
   19884:	add	sp, sp, #12
   19888:	pop	{r4, r5, pc}
   1988c:	push	{r4, r5, lr}
   19890:	sub	sp, sp, #76	; 0x4c
   19894:	mov	r5, r0
   19898:	ldr	ip, [sp, #88]	; 0x58
   1989c:	ldr	r0, [ip]
   198a0:	cmp	r0, #0
   198a4:	str	r0, [sp, #32]
   198a8:	beq	19c7c <__assert_fail@plt+0x8b80>
   198ac:	ldr	r0, [ip, #4]
   198b0:	cmp	r0, #0
   198b4:	str	r0, [sp, #36]	; 0x24
   198b8:	beq	19c84 <__assert_fail@plt+0x8b88>
   198bc:	ldr	r0, [ip, #8]
   198c0:	cmp	r0, #0
   198c4:	str	r0, [sp, #40]	; 0x28
   198c8:	beq	19c8c <__assert_fail@plt+0x8b90>
   198cc:	ldr	r0, [ip, #12]
   198d0:	cmp	r0, #0
   198d4:	str	r0, [sp, #44]	; 0x2c
   198d8:	beq	19c94 <__assert_fail@plt+0x8b98>
   198dc:	ldr	r0, [ip, #16]
   198e0:	cmp	r0, #0
   198e4:	str	r0, [sp, #48]	; 0x30
   198e8:	beq	19c9c <__assert_fail@plt+0x8ba0>
   198ec:	ldr	r0, [ip, #20]
   198f0:	cmp	r0, #0
   198f4:	str	r0, [sp, #52]	; 0x34
   198f8:	beq	19ca4 <__assert_fail@plt+0x8ba8>
   198fc:	ldr	r0, [ip, #24]
   19900:	cmp	r0, #0
   19904:	str	r0, [sp, #56]	; 0x38
   19908:	beq	19cac <__assert_fail@plt+0x8bb0>
   1990c:	ldr	r0, [ip, #28]
   19910:	cmp	r0, #0
   19914:	str	r0, [sp, #60]	; 0x3c
   19918:	beq	19cb4 <__assert_fail@plt+0x8bb8>
   1991c:	ldr	r0, [ip, #32]
   19920:	cmp	r0, #0
   19924:	str	r0, [sp, #64]	; 0x40
   19928:	beq	19cbc <__assert_fail@plt+0x8bc0>
   1992c:	ldr	r0, [ip, #36]	; 0x24
   19930:	cmp	r0, #0
   19934:	movne	r4, #10
   19938:	moveq	r4, #9
   1993c:	cmp	r1, #0
   19940:	beq	19c54 <__assert_fail@plt+0x8b58>
   19944:	stm	sp, {r2, r3}
   19948:	mov	r0, r5
   1994c:	mov	r3, r1
   19950:	ldr	r2, [pc, #876]	; 19cc4 <__assert_fail@plt+0x8bc8>
   19954:	mov	r1, #1
   19958:	bl	1103c <__fprintf_chk@plt>
   1995c:	mov	r2, #5
   19960:	ldr	r1, [pc, #864]	; 19cc8 <__assert_fail@plt+0x8bcc>
   19964:	mov	r0, #0
   19968:	bl	10ef8 <dcgettext@plt>
   1996c:	ldr	r3, [pc, #856]	; 19ccc <__assert_fail@plt+0x8bd0>
   19970:	ldr	r2, [pc, #856]	; 19cd0 <__assert_fail@plt+0x8bd4>
   19974:	str	r3, [sp]
   19978:	mov	r1, #1
   1997c:	mov	r3, r0
   19980:	mov	r0, r5
   19984:	bl	1103c <__fprintf_chk@plt>
   19988:	mov	r1, r5
   1998c:	mov	r0, #10
   19990:	bl	10eec <fputc_unlocked@plt>
   19994:	mov	r2, #5
   19998:	ldr	r1, [pc, #820]	; 19cd4 <__assert_fail@plt+0x8bd8>
   1999c:	mov	r0, #0
   199a0:	bl	10ef8 <dcgettext@plt>
   199a4:	mov	r1, #1
   199a8:	ldr	r3, [pc, #808]	; 19cd8 <__assert_fail@plt+0x8bdc>
   199ac:	mov	r2, r0
   199b0:	mov	r0, r5
   199b4:	bl	1103c <__fprintf_chk@plt>
   199b8:	mov	r1, r5
   199bc:	mov	r0, #10
   199c0:	bl	10eec <fputc_unlocked@plt>
   199c4:	cmp	r4, #9
   199c8:	ldrls	pc, [pc, r4, lsl #2]
   199cc:	b	19c70 <__assert_fail@plt+0x8b74>
   199d0:	andeq	r9, r1, r4, asr sl
   199d4:	andeq	r9, r1, ip, asr sl
   199d8:	andeq	r9, r1, r8, lsl #21
   199dc:			; <UNDEFINED> instruction: 0x00019abc
   199e0:	strdeq	r9, [r1], -r4
   199e4:	andeq	r9, r1, r0, lsr fp
   199e8:	andeq	r9, r1, ip, ror #22
   199ec:			; <UNDEFINED> instruction: 0x00019bb0
   199f0:	strdeq	r9, [r1], -ip
   199f4:	strdeq	r9, [r1], -r8
   199f8:	ldr	r1, [pc, #732]	; 19cdc <__assert_fail@plt+0x8be0>
   199fc:	mov	r2, #5
   19a00:	mov	r0, #0
   19a04:	bl	10ef8 <dcgettext@plt>
   19a08:	ldr	ip, [sp, #64]	; 0x40
   19a0c:	ldr	r1, [sp, #60]	; 0x3c
   19a10:	ldr	r2, [sp, #56]	; 0x38
   19a14:	ldr	lr, [sp, #48]	; 0x30
   19a18:	str	ip, [sp, #28]
   19a1c:	str	r1, [sp, #24]
   19a20:	ldr	ip, [sp, #44]	; 0x2c
   19a24:	ldr	r1, [sp, #40]	; 0x28
   19a28:	ldr	r4, [sp, #52]	; 0x34
   19a2c:	str	r2, [sp, #20]
   19a30:	ldr	r2, [sp, #36]	; 0x24
   19a34:	stmib	sp, {r1, ip, lr}
   19a38:	mov	r1, #1
   19a3c:	str	r2, [sp]
   19a40:	ldr	r3, [sp, #32]
   19a44:	str	r4, [sp, #16]
   19a48:	mov	r2, r0
   19a4c:	mov	r0, r5
   19a50:	bl	1103c <__fprintf_chk@plt>
   19a54:	add	sp, sp, #76	; 0x4c
   19a58:	pop	{r4, r5, pc}
   19a5c:	mov	r2, #5
   19a60:	ldr	r1, [pc, #632]	; 19ce0 <__assert_fail@plt+0x8be4>
   19a64:	mov	r0, #0
   19a68:	bl	10ef8 <dcgettext@plt>
   19a6c:	ldr	r3, [sp, #32]
   19a70:	mov	r1, #1
   19a74:	mov	r2, r0
   19a78:	mov	r0, r5
   19a7c:	add	sp, sp, #76	; 0x4c
   19a80:	pop	{r4, r5, lr}
   19a84:	b	1103c <__fprintf_chk@plt>
   19a88:	mov	r2, #5
   19a8c:	ldr	r1, [pc, #592]	; 19ce4 <__assert_fail@plt+0x8be8>
   19a90:	mov	r0, #0
   19a94:	bl	10ef8 <dcgettext@plt>
   19a98:	ldr	r2, [sp, #36]	; 0x24
   19a9c:	ldr	r3, [sp, #32]
   19aa0:	str	r2, [sp, #88]	; 0x58
   19aa4:	mov	r1, #1
   19aa8:	mov	r2, r0
   19aac:	mov	r0, r5
   19ab0:	add	sp, sp, #76	; 0x4c
   19ab4:	pop	{r4, r5, lr}
   19ab8:	b	1103c <__fprintf_chk@plt>
   19abc:	mov	r2, #5
   19ac0:	ldr	r1, [pc, #544]	; 19ce8 <__assert_fail@plt+0x8bec>
   19ac4:	mov	r0, #0
   19ac8:	bl	10ef8 <dcgettext@plt>
   19acc:	ldr	r1, [sp, #40]	; 0x28
   19ad0:	ldr	r2, [sp, #36]	; 0x24
   19ad4:	str	r1, [sp, #4]
   19ad8:	str	r2, [sp]
   19adc:	ldr	r3, [sp, #32]
   19ae0:	mov	r1, #1
   19ae4:	mov	r2, r0
   19ae8:	mov	r0, r5
   19aec:	bl	1103c <__fprintf_chk@plt>
   19af0:	b	19a54 <__assert_fail@plt+0x8958>
   19af4:	mov	r2, #5
   19af8:	ldr	r1, [pc, #492]	; 19cec <__assert_fail@plt+0x8bf0>
   19afc:	mov	r0, #0
   19b00:	bl	10ef8 <dcgettext@plt>
   19b04:	ldr	r1, [sp, #40]	; 0x28
   19b08:	ldr	ip, [sp, #44]	; 0x2c
   19b0c:	ldr	r2, [sp, #36]	; 0x24
   19b10:	ldr	r3, [sp, #32]
   19b14:	stmib	sp, {r1, ip}
   19b18:	str	r2, [sp]
   19b1c:	mov	r1, #1
   19b20:	mov	r2, r0
   19b24:	mov	r0, r5
   19b28:	bl	1103c <__fprintf_chk@plt>
   19b2c:	b	19a54 <__assert_fail@plt+0x8958>
   19b30:	mov	r2, #5
   19b34:	ldr	r1, [pc, #436]	; 19cf0 <__assert_fail@plt+0x8bf4>
   19b38:	mov	r0, #0
   19b3c:	bl	10ef8 <dcgettext@plt>
   19b40:	add	r1, sp, #40	; 0x28
   19b44:	ldr	r2, [sp, #36]	; 0x24
   19b48:	ldm	r1, {r1, ip, lr}
   19b4c:	ldr	r3, [sp, #32]
   19b50:	str	r2, [sp]
   19b54:	stmib	sp, {r1, ip, lr}
   19b58:	mov	r1, #1
   19b5c:	mov	r2, r0
   19b60:	mov	r0, r5
   19b64:	bl	1103c <__fprintf_chk@plt>
   19b68:	b	19a54 <__assert_fail@plt+0x8958>
   19b6c:	mov	r2, #5
   19b70:	ldr	r1, [pc, #380]	; 19cf4 <__assert_fail@plt+0x8bf8>
   19b74:	mov	r0, #0
   19b78:	bl	10ef8 <dcgettext@plt>
   19b7c:	add	r1, sp, #40	; 0x28
   19b80:	ldr	r2, [sp, #36]	; 0x24
   19b84:	ldm	r1, {r1, ip, lr}
   19b88:	ldr	r4, [sp, #52]	; 0x34
   19b8c:	str	r2, [sp]
   19b90:	stmib	sp, {r1, ip, lr}
   19b94:	mov	r1, #1
   19b98:	ldr	r3, [sp, #32]
   19b9c:	str	r4, [sp, #16]
   19ba0:	mov	r2, r0
   19ba4:	mov	r0, r5
   19ba8:	bl	1103c <__fprintf_chk@plt>
   19bac:	b	19a54 <__assert_fail@plt+0x8958>
   19bb0:	mov	r2, #5
   19bb4:	ldr	r1, [pc, #316]	; 19cf8 <__assert_fail@plt+0x8bfc>
   19bb8:	mov	r0, #0
   19bbc:	bl	10ef8 <dcgettext@plt>
   19bc0:	add	r1, sp, #40	; 0x28
   19bc4:	ldr	r2, [sp, #56]	; 0x38
   19bc8:	ldm	r1, {r1, ip, lr}
   19bcc:	ldr	r4, [sp, #52]	; 0x34
   19bd0:	str	r2, [sp, #20]
   19bd4:	ldr	r2, [sp, #36]	; 0x24
   19bd8:	stmib	sp, {r1, ip, lr}
   19bdc:	mov	r1, #1
   19be0:	str	r2, [sp]
   19be4:	ldr	r3, [sp, #32]
   19be8:	str	r4, [sp, #16]
   19bec:	mov	r2, r0
   19bf0:	mov	r0, r5
   19bf4:	bl	1103c <__fprintf_chk@plt>
   19bf8:	b	19a54 <__assert_fail@plt+0x8958>
   19bfc:	mov	r2, #5
   19c00:	ldr	r1, [pc, #244]	; 19cfc <__assert_fail@plt+0x8c00>
   19c04:	mov	r0, #0
   19c08:	bl	10ef8 <dcgettext@plt>
   19c0c:	ldr	r1, [sp, #60]	; 0x3c
   19c10:	ldr	r2, [sp, #56]	; 0x38
   19c14:	ldr	lr, [sp, #48]	; 0x30
   19c18:	ldr	ip, [sp, #44]	; 0x2c
   19c1c:	str	r1, [sp, #24]
   19c20:	ldr	r1, [sp, #40]	; 0x28
   19c24:	ldr	r4, [sp, #52]	; 0x34
   19c28:	str	r2, [sp, #20]
   19c2c:	ldr	r2, [sp, #36]	; 0x24
   19c30:	stmib	sp, {r1, ip, lr}
   19c34:	mov	r1, #1
   19c38:	str	r2, [sp]
   19c3c:	ldr	r3, [sp, #32]
   19c40:	str	r4, [sp, #16]
   19c44:	mov	r2, r0
   19c48:	mov	r0, r5
   19c4c:	bl	1103c <__fprintf_chk@plt>
   19c50:	b	19a54 <__assert_fail@plt+0x8958>
   19c54:	str	r3, [sp]
   19c58:	mov	r1, #1
   19c5c:	mov	r3, r2
   19c60:	mov	r0, r5
   19c64:	ldr	r2, [pc, #148]	; 19d00 <__assert_fail@plt+0x8c04>
   19c68:	bl	1103c <__fprintf_chk@plt>
   19c6c:	b	1995c <__assert_fail@plt+0x8860>
   19c70:	mov	r2, #5
   19c74:	ldr	r1, [pc, #136]	; 19d04 <__assert_fail@plt+0x8c08>
   19c78:	b	19a00 <__assert_fail@plt+0x8904>
   19c7c:	mov	r4, r0
   19c80:	b	1993c <__assert_fail@plt+0x8840>
   19c84:	mov	r4, #1
   19c88:	b	1993c <__assert_fail@plt+0x8840>
   19c8c:	mov	r4, #2
   19c90:	b	1993c <__assert_fail@plt+0x8840>
   19c94:	mov	r4, #3
   19c98:	b	1993c <__assert_fail@plt+0x8840>
   19c9c:	mov	r4, #4
   19ca0:	b	1993c <__assert_fail@plt+0x8840>
   19ca4:	mov	r4, #5
   19ca8:	b	1993c <__assert_fail@plt+0x8840>
   19cac:	mov	r4, #6
   19cb0:	b	1993c <__assert_fail@plt+0x8840>
   19cb4:	mov	r4, #7
   19cb8:	b	1993c <__assert_fail@plt+0x8840>
   19cbc:	mov	r4, #8
   19cc0:	b	1993c <__assert_fail@plt+0x8840>
   19cc4:	andeq	lr, r1, r8, asr #22
   19cc8:	andeq	lr, r1, ip, asr fp
   19ccc:	andeq	r0, r0, r6, ror #15
   19cd0:	andeq	lr, r1, r4, lsr lr
   19cd4:	andeq	lr, r1, r0, ror #22
   19cd8:	andeq	lr, r1, ip, lsl #24
   19cdc:	andeq	lr, r1, ip, lsr sp
   19ce0:	andeq	lr, r1, r0, lsr ip
   19ce4:	andeq	lr, r1, r0, asr #24
   19ce8:	andeq	lr, r1, r8, asr ip
   19cec:	andeq	lr, r1, r4, ror ip
   19cf0:	muleq	r1, r4, ip
   19cf4:			; <UNDEFINED> instruction: 0x0001ecb8
   19cf8:	andeq	lr, r1, r0, ror #25
   19cfc:	andeq	lr, r1, ip, lsl #26
   19d00:	andeq	lr, r1, r4, asr fp
   19d04:	andeq	lr, r1, r0, ror sp
   19d08:	push	{r3}		; (str r3, [sp, #-4]!)
   19d0c:	push	{lr}		; (str lr, [sp, #-4]!)
   19d10:	sub	sp, sp, #56	; 0x38
   19d14:	add	r3, sp, #64	; 0x40
   19d18:	ldr	ip, [sp, #64]	; 0x40
   19d1c:	str	r3, [sp, #12]
   19d20:	cmp	ip, #0
   19d24:	str	ip, [sp, #16]
   19d28:	beq	19dc0 <__assert_fail@plt+0x8cc4>
   19d2c:	ldr	ip, [sp, #68]	; 0x44
   19d30:	cmp	ip, #0
   19d34:	str	ip, [sp, #20]
   19d38:	beq	19de0 <__assert_fail@plt+0x8ce4>
   19d3c:	ldr	ip, [sp, #72]	; 0x48
   19d40:	cmp	ip, #0
   19d44:	str	ip, [sp, #24]
   19d48:	beq	19de8 <__assert_fail@plt+0x8cec>
   19d4c:	ldr	ip, [sp, #76]	; 0x4c
   19d50:	cmp	ip, #0
   19d54:	str	ip, [sp, #28]
   19d58:	beq	19df0 <__assert_fail@plt+0x8cf4>
   19d5c:	ldr	ip, [sp, #80]	; 0x50
   19d60:	cmp	ip, #0
   19d64:	str	ip, [sp, #32]
   19d68:	beq	19df8 <__assert_fail@plt+0x8cfc>
   19d6c:	ldr	ip, [sp, #84]	; 0x54
   19d70:	cmp	ip, #0
   19d74:	str	ip, [sp, #36]	; 0x24
   19d78:	beq	19e00 <__assert_fail@plt+0x8d04>
   19d7c:	ldr	ip, [sp, #88]	; 0x58
   19d80:	cmp	ip, #0
   19d84:	str	ip, [sp, #40]	; 0x28
   19d88:	beq	19e08 <__assert_fail@plt+0x8d0c>
   19d8c:	ldr	ip, [sp, #92]	; 0x5c
   19d90:	cmp	ip, #0
   19d94:	str	ip, [sp, #44]	; 0x2c
   19d98:	beq	19e10 <__assert_fail@plt+0x8d14>
   19d9c:	ldr	ip, [sp, #96]	; 0x60
   19da0:	cmp	ip, #0
   19da4:	str	ip, [sp, #48]	; 0x30
   19da8:	beq	19e18 <__assert_fail@plt+0x8d1c>
   19dac:	ldr	ip, [sp, #100]	; 0x64
   19db0:	cmp	ip, #0
   19db4:	str	ip, [sp, #52]	; 0x34
   19db8:	movne	ip, #10
   19dbc:	moveq	ip, #9
   19dc0:	add	r3, sp, #16
   19dc4:	stm	sp, {r3, ip}
   19dc8:	ldr	r3, [sp, #60]	; 0x3c
   19dcc:	bl	194b4 <__assert_fail@plt+0x83b8>
   19dd0:	add	sp, sp, #56	; 0x38
   19dd4:	pop	{lr}		; (ldr lr, [sp], #4)
   19dd8:	add	sp, sp, #4
   19ddc:	bx	lr
   19de0:	mov	ip, #1
   19de4:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19de8:	mov	ip, #2
   19dec:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19df0:	mov	ip, #3
   19df4:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19df8:	mov	ip, #4
   19dfc:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19e00:	mov	ip, #5
   19e04:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19e08:	mov	ip, #6
   19e0c:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19e10:	mov	ip, #7
   19e14:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19e18:	mov	ip, #8
   19e1c:	b	19dc0 <__assert_fail@plt+0x8cc4>
   19e20:	ldr	r3, [pc, #116]	; 19e9c <__assert_fail@plt+0x8da0>
   19e24:	push	{r4, lr}
   19e28:	mov	r0, #10
   19e2c:	ldr	r1, [r3]
   19e30:	bl	10eec <fputc_unlocked@plt>
   19e34:	mov	r2, #5
   19e38:	ldr	r1, [pc, #96]	; 19ea0 <__assert_fail@plt+0x8da4>
   19e3c:	mov	r0, #0
   19e40:	bl	10ef8 <dcgettext@plt>
   19e44:	ldr	r2, [pc, #88]	; 19ea4 <__assert_fail@plt+0x8da8>
   19e48:	mov	r1, r0
   19e4c:	mov	r0, #1
   19e50:	bl	11024 <__printf_chk@plt>
   19e54:	mov	r2, #5
   19e58:	ldr	r1, [pc, #72]	; 19ea8 <__assert_fail@plt+0x8dac>
   19e5c:	mov	r0, #0
   19e60:	bl	10ef8 <dcgettext@plt>
   19e64:	ldr	r3, [pc, #64]	; 19eac <__assert_fail@plt+0x8db0>
   19e68:	ldr	r2, [pc, #64]	; 19eb0 <__assert_fail@plt+0x8db4>
   19e6c:	mov	r1, r0
   19e70:	mov	r0, #1
   19e74:	bl	11024 <__printf_chk@plt>
   19e78:	mov	r2, #5
   19e7c:	ldr	r1, [pc, #48]	; 19eb4 <__assert_fail@plt+0x8db8>
   19e80:	mov	r0, #0
   19e84:	bl	10ef8 <dcgettext@plt>
   19e88:	ldr	r2, [pc, #40]	; 19eb8 <__assert_fail@plt+0x8dbc>
   19e8c:	pop	{r4, lr}
   19e90:	mov	r1, r0
   19e94:	mov	r0, #1
   19e98:	b	11024 <__printf_chk@plt>
   19e9c:	muleq	r2, ip, r1
   19ea0:	andeq	lr, r1, ip, lsr #27
   19ea4:	andeq	lr, r1, r0, asr #27
   19ea8:	ldrdeq	lr, [r1], -r8
   19eac:	andeq	lr, r1, r8, lsr #4
   19eb0:	andeq	lr, r1, r0, asr r2
   19eb4:	andeq	lr, r1, ip, ror #27
   19eb8:	andeq	lr, r1, r4, lsl lr
   19ebc:	push	{r4, r5, r6, lr}
   19ec0:	mov	r6, r0
   19ec4:	mov	r5, r1
   19ec8:	mov	r4, r2
   19ecc:	bl	1bf98 <__assert_fail@plt+0xae9c>
   19ed0:	cmp	r0, #0
   19ed4:	popne	{r4, r5, r6, pc}
   19ed8:	cmp	r6, #0
   19edc:	beq	19eec <__assert_fail@plt+0x8df0>
   19ee0:	cmp	r5, #0
   19ee4:	cmpne	r4, #0
   19ee8:	popeq	{r4, r5, r6, pc}
   19eec:	bl	1a538 <__assert_fail@plt+0x943c>
   19ef0:	push	{r4, lr}
   19ef4:	bl	1bc6c <__assert_fail@plt+0xab70>
   19ef8:	cmp	r0, #0
   19efc:	popne	{r4, pc}
   19f00:	bl	1a538 <__assert_fail@plt+0x943c>
   19f04:	push	{r4, lr}
   19f08:	bl	1bc6c <__assert_fail@plt+0xab70>
   19f0c:	cmp	r0, #0
   19f10:	popne	{r4, pc}
   19f14:	bl	1a538 <__assert_fail@plt+0x943c>
   19f18:	push	{r4, lr}
   19f1c:	bl	1bc6c <__assert_fail@plt+0xab70>
   19f20:	cmp	r0, #0
   19f24:	popne	{r4, pc}
   19f28:	bl	1a538 <__assert_fail@plt+0x943c>
   19f2c:	push	{r4, r5, r6, lr}
   19f30:	mov	r5, r0
   19f34:	mov	r4, r1
   19f38:	bl	1bc98 <__assert_fail@plt+0xab9c>
   19f3c:	cmp	r0, #0
   19f40:	popne	{r4, r5, r6, pc}
   19f44:	adds	r4, r4, #0
   19f48:	movne	r4, #1
   19f4c:	cmp	r5, #0
   19f50:	orreq	r4, r4, #1
   19f54:	cmp	r4, #0
   19f58:	popeq	{r4, r5, r6, pc}
   19f5c:	bl	1a538 <__assert_fail@plt+0x943c>
   19f60:	push	{r4, lr}
   19f64:	cmp	r1, #0
   19f68:	orreq	r1, r1, #1
   19f6c:	bl	1bc98 <__assert_fail@plt+0xab9c>
   19f70:	cmp	r0, #0
   19f74:	popne	{r4, pc}
   19f78:	bl	1a538 <__assert_fail@plt+0x943c>
   19f7c:	push	{r4, r5, r6, lr}
   19f80:	mov	r6, r0
   19f84:	mov	r5, r1
   19f88:	mov	r4, r2
   19f8c:	bl	1bf98 <__assert_fail@plt+0xae9c>
   19f90:	cmp	r0, #0
   19f94:	popne	{r4, r5, r6, pc}
   19f98:	cmp	r6, #0
   19f9c:	beq	19fac <__assert_fail@plt+0x8eb0>
   19fa0:	cmp	r5, #0
   19fa4:	cmpne	r4, #0
   19fa8:	popeq	{r4, r5, r6, pc}
   19fac:	bl	1a538 <__assert_fail@plt+0x943c>
   19fb0:	cmp	r2, #0
   19fb4:	cmpne	r1, #0
   19fb8:	moveq	r2, #1
   19fbc:	moveq	r1, r2
   19fc0:	push	{r4, lr}
   19fc4:	bl	1bf98 <__assert_fail@plt+0xae9c>
   19fc8:	cmp	r0, #0
   19fcc:	popne	{r4, pc}
   19fd0:	bl	1a538 <__assert_fail@plt+0x943c>
   19fd4:	push	{r4, lr}
   19fd8:	mov	r2, r1
   19fdc:	mov	r1, r0
   19fe0:	mov	r0, #0
   19fe4:	bl	1bf98 <__assert_fail@plt+0xae9c>
   19fe8:	cmp	r0, #0
   19fec:	popne	{r4, pc}
   19ff0:	bl	1a538 <__assert_fail@plt+0x943c>
   19ff4:	cmp	r1, #0
   19ff8:	cmpne	r0, #0
   19ffc:	moveq	r2, #1
   1a000:	movne	r2, r1
   1a004:	moveq	r1, r2
   1a008:	movne	r1, r0
   1a00c:	push	{r4, lr}
   1a010:	mov	r0, #0
   1a014:	bl	1bf98 <__assert_fail@plt+0xae9c>
   1a018:	cmp	r0, #0
   1a01c:	popne	{r4, pc}
   1a020:	bl	1a538 <__assert_fail@plt+0x943c>
   1a024:	cmp	r0, #0
   1a028:	push	{r4, r5, r6, lr}
   1a02c:	mov	r5, r1
   1a030:	ldr	r4, [r1]
   1a034:	beq	1a070 <__assert_fail@plt+0x8f74>
   1a038:	lsr	r2, r4, #1
   1a03c:	add	r3, r2, #1
   1a040:	mvn	r3, r3
   1a044:	cmp	r4, r3
   1a048:	bhi	1a08c <__assert_fail@plt+0x8f90>
   1a04c:	add	r4, r4, #1
   1a050:	add	r4, r4, r2
   1a054:	mov	r1, r4
   1a058:	mov	r2, #1
   1a05c:	bl	1bf98 <__assert_fail@plt+0xae9c>
   1a060:	cmp	r0, #0
   1a064:	beq	1a090 <__assert_fail@plt+0x8f94>
   1a068:	str	r4, [r5]
   1a06c:	pop	{r4, r5, r6, pc}
   1a070:	cmp	r4, #0
   1a074:	moveq	r4, #64	; 0x40
   1a078:	mov	r1, r4
   1a07c:	mov	r2, #1
   1a080:	bl	1bf98 <__assert_fail@plt+0xae9c>
   1a084:	cmp	r0, #0
   1a088:	bne	1a068 <__assert_fail@plt+0x8f6c>
   1a08c:	bl	1a538 <__assert_fail@plt+0x943c>
   1a090:	cmp	r4, #0
   1a094:	bne	1a08c <__assert_fail@plt+0x8f90>
   1a098:	str	r4, [r5]
   1a09c:	pop	{r4, r5, r6, pc}
   1a0a0:	cmp	r0, #0
   1a0a4:	push	{r4, r5, r6, lr}
   1a0a8:	mov	r5, r1
   1a0ac:	ldr	r4, [r1]
   1a0b0:	mov	r6, r2
   1a0b4:	beq	1a0f8 <__assert_fail@plt+0x8ffc>
   1a0b8:	lsr	r1, r4, #1
   1a0bc:	add	r3, r1, #1
   1a0c0:	mvn	r3, r3
   1a0c4:	cmp	r4, r3
   1a0c8:	bhi	1a130 <__assert_fail@plt+0x9034>
   1a0cc:	add	r4, r4, #1
   1a0d0:	add	r4, r4, r1
   1a0d4:	mov	r1, r4
   1a0d8:	bl	1bf98 <__assert_fail@plt+0xae9c>
   1a0dc:	cmp	r0, #0
   1a0e0:	bne	1a0f0 <__assert_fail@plt+0x8ff4>
   1a0e4:	cmp	r4, #0
   1a0e8:	cmpne	r6, #0
   1a0ec:	bne	1a130 <__assert_fail@plt+0x9034>
   1a0f0:	str	r4, [r5]
   1a0f4:	pop	{r4, r5, r6, pc}
   1a0f8:	cmp	r4, #0
   1a0fc:	bne	1a118 <__assert_fail@plt+0x901c>
   1a100:	mov	r1, r2
   1a104:	mov	r0, #64	; 0x40
   1a108:	bl	1c0d8 <__assert_fail@plt+0xafdc>
   1a10c:	cmp	r0, #0
   1a110:	movne	r4, r0
   1a114:	addeq	r4, r0, #1
   1a118:	mov	r2, r6
   1a11c:	mov	r1, r4
   1a120:	mov	r0, #0
   1a124:	bl	1bf98 <__assert_fail@plt+0xae9c>
   1a128:	cmp	r0, #0
   1a12c:	bne	1a0f0 <__assert_fail@plt+0x8ff4>
   1a130:	bl	1a538 <__assert_fail@plt+0x943c>
   1a134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a138:	sub	sp, sp, #12
   1a13c:	ldr	r6, [r1]
   1a140:	mov	r8, r1
   1a144:	mov	r9, r0
   1a148:	asrs	r4, r6, #1
   1a14c:	mov	sl, r2
   1a150:	mov	fp, r3
   1a154:	ldr	r7, [sp, #48]	; 0x30
   1a158:	bmi	1a2d4 <__assert_fail@plt+0x91d8>
   1a15c:	mvn	r1, #-2147483648	; 0x80000000
   1a160:	sub	r1, r1, r4
   1a164:	cmp	r6, r1
   1a168:	movle	r1, #0
   1a16c:	movgt	r1, #1
   1a170:	mvn	r3, fp
   1a174:	cmp	r1, #0
   1a178:	addeq	r4, r4, r6
   1a17c:	mvnne	r4, #-2147483648	; 0x80000000
   1a180:	lsr	r3, r3, #31
   1a184:	cmp	fp, r4
   1a188:	movge	r2, #0
   1a18c:	andlt	r2, r3, #1
   1a190:	cmp	r2, #0
   1a194:	beq	1a284 <__assert_fail@plt+0x9188>
   1a198:	cmp	r7, #0
   1a19c:	blt	1a36c <__assert_fail@plt+0x9270>
   1a1a0:	bne	1a364 <__assert_fail@plt+0x9268>
   1a1a4:	mov	r5, #64	; 0x40
   1a1a8:	mov	r1, r7
   1a1ac:	mov	r0, r5
   1a1b0:	str	r3, [sp, #4]
   1a1b4:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a1b8:	mov	r1, r7
   1a1bc:	mov	r4, r0
   1a1c0:	mov	r0, r5
   1a1c4:	bl	1c504 <__assert_fail@plt+0xb408>
   1a1c8:	ldr	r3, [sp, #4]
   1a1cc:	sub	r5, r5, r1
   1a1d0:	cmp	r9, #0
   1a1d4:	sub	r2, r4, r6
   1a1d8:	streq	r9, [r8]
   1a1dc:	cmp	r2, sl
   1a1e0:	bge	1a264 <__assert_fail@plt+0x9168>
   1a1e4:	cmp	sl, #0
   1a1e8:	blt	1a304 <__assert_fail@plt+0x9208>
   1a1ec:	cmp	r6, #0
   1a1f0:	blt	1a210 <__assert_fail@plt+0x9114>
   1a1f4:	mvn	r2, #-2147483648	; 0x80000000
   1a1f8:	sub	r2, r2, sl
   1a1fc:	cmp	r6, r2
   1a200:	movle	r2, #0
   1a204:	movgt	r2, #1
   1a208:	cmp	r2, #0
   1a20c:	bne	1a300 <__assert_fail@plt+0x9204>
   1a210:	add	r6, r6, sl
   1a214:	cmp	fp, r6
   1a218:	movge	r3, #0
   1a21c:	andlt	r3, r3, #1
   1a220:	cmp	r3, #0
   1a224:	mov	r4, r6
   1a228:	bne	1a300 <__assert_fail@plt+0x9204>
   1a22c:	cmp	r7, #0
   1a230:	blt	1a318 <__assert_fail@plt+0x921c>
   1a234:	beq	1a260 <__assert_fail@plt+0x9164>
   1a238:	cmp	r6, #0
   1a23c:	blt	1a3bc <__assert_fail@plt+0x92c0>
   1a240:	mov	r1, r7
   1a244:	mvn	r0, #-2147483648	; 0x80000000
   1a248:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a24c:	cmp	r6, r0
   1a250:	movle	r0, #0
   1a254:	movgt	r0, #1
   1a258:	cmp	r0, #0
   1a25c:	bne	1a300 <__assert_fail@plt+0x9204>
   1a260:	mul	r5, r6, r7
   1a264:	mov	r1, r5
   1a268:	mov	r0, r9
   1a26c:	bl	1bc98 <__assert_fail@plt+0xab9c>
   1a270:	cmp	r0, #0
   1a274:	beq	1a2e8 <__assert_fail@plt+0x91ec>
   1a278:	str	r4, [r8]
   1a27c:	add	sp, sp, #12
   1a280:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a284:	cmp	r7, #0
   1a288:	blt	1a344 <__assert_fail@plt+0x9248>
   1a28c:	beq	1a1a4 <__assert_fail@plt+0x90a8>
   1a290:	cmp	r4, #0
   1a294:	blt	1a374 <__assert_fail@plt+0x9278>
   1a298:	mov	r1, r7
   1a29c:	mvn	r0, #-2147483648	; 0x80000000
   1a2a0:	str	r3, [sp, #4]
   1a2a4:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a2a8:	ldr	r3, [sp, #4]
   1a2ac:	cmp	r0, r4
   1a2b0:	movge	r0, #0
   1a2b4:	movlt	r0, #1
   1a2b8:	cmp	r0, #0
   1a2bc:	mvnne	r5, #-2147483648	; 0x80000000
   1a2c0:	bne	1a1a8 <__assert_fail@plt+0x90ac>
   1a2c4:	mul	r5, r7, r4
   1a2c8:	cmp	r5, #63	; 0x3f
   1a2cc:	bgt	1a1d0 <__assert_fail@plt+0x90d4>
   1a2d0:	b	1a1a4 <__assert_fail@plt+0x90a8>
   1a2d4:	rsb	r1, r4, #-2147483648	; 0x80000000
   1a2d8:	cmp	r6, r1
   1a2dc:	movge	r1, #0
   1a2e0:	movlt	r1, #1
   1a2e4:	b	1a170 <__assert_fail@plt+0x9074>
   1a2e8:	adds	r5, r5, #0
   1a2ec:	movne	r5, #1
   1a2f0:	cmp	r9, #0
   1a2f4:	orreq	r5, r5, #1
   1a2f8:	cmp	r5, #0
   1a2fc:	beq	1a278 <__assert_fail@plt+0x917c>
   1a300:	bl	1a538 <__assert_fail@plt+0x943c>
   1a304:	rsb	r2, sl, #-2147483648	; 0x80000000
   1a308:	cmp	r6, r2
   1a30c:	movge	r2, #0
   1a310:	movlt	r2, #1
   1a314:	b	1a208 <__assert_fail@plt+0x910c>
   1a318:	cmp	r6, #0
   1a31c:	blt	1a3a0 <__assert_fail@plt+0x92a4>
   1a320:	cmn	r7, #1
   1a324:	beq	1a260 <__assert_fail@plt+0x9164>
   1a328:	mov	r1, r7
   1a32c:	mov	r0, #-2147483648	; 0x80000000
   1a330:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a334:	cmp	r6, r0
   1a338:	movle	r0, #0
   1a33c:	movgt	r0, #1
   1a340:	b	1a258 <__assert_fail@plt+0x915c>
   1a344:	cmp	r4, #0
   1a348:	blt	1a3e0 <__assert_fail@plt+0x92e4>
   1a34c:	cmn	r7, #1
   1a350:	beq	1a2c4 <__assert_fail@plt+0x91c8>
   1a354:	str	r3, [sp, #4]
   1a358:	mov	r1, r7
   1a35c:	mov	r0, #-2147483648	; 0x80000000
   1a360:	b	1a2a4 <__assert_fail@plt+0x91a8>
   1a364:	mov	r4, fp
   1a368:	b	1a298 <__assert_fail@plt+0x919c>
   1a36c:	mov	r4, fp
   1a370:	b	1a34c <__assert_fail@plt+0x9250>
   1a374:	cmn	r4, #1
   1a378:	beq	1a2c4 <__assert_fail@plt+0x91c8>
   1a37c:	mov	r1, r4
   1a380:	mov	r0, #-2147483648	; 0x80000000
   1a384:	str	r3, [sp, #4]
   1a388:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a38c:	ldr	r3, [sp, #4]
   1a390:	cmp	r7, r0
   1a394:	movle	r0, #0
   1a398:	movgt	r0, #1
   1a39c:	b	1a2b8 <__assert_fail@plt+0x91bc>
   1a3a0:	mov	r1, r7
   1a3a4:	mvn	r0, #-2147483648	; 0x80000000
   1a3a8:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a3ac:	cmp	r6, r0
   1a3b0:	movge	r0, #0
   1a3b4:	movlt	r0, #1
   1a3b8:	b	1a258 <__assert_fail@plt+0x915c>
   1a3bc:	cmn	r6, #1
   1a3c0:	beq	1a260 <__assert_fail@plt+0x9164>
   1a3c4:	mov	r1, r6
   1a3c8:	mov	r0, #-2147483648	; 0x80000000
   1a3cc:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a3d0:	cmp	r7, r0
   1a3d4:	movle	r0, #0
   1a3d8:	movgt	r0, #1
   1a3dc:	b	1a258 <__assert_fail@plt+0x915c>
   1a3e0:	mov	r1, r7
   1a3e4:	mvn	r0, #-2147483648	; 0x80000000
   1a3e8:	str	r3, [sp, #4]
   1a3ec:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1a3f0:	ldr	r3, [sp, #4]
   1a3f4:	cmp	r0, r4
   1a3f8:	movle	r0, #0
   1a3fc:	movgt	r0, #1
   1a400:	b	1a2b8 <__assert_fail@plt+0x91bc>
   1a404:	push	{r4, lr}
   1a408:	mov	r1, #1
   1a40c:	bl	1bc24 <__assert_fail@plt+0xab28>
   1a410:	cmp	r0, #0
   1a414:	popne	{r4, pc}
   1a418:	bl	1a538 <__assert_fail@plt+0x943c>
   1a41c:	push	{r4, lr}
   1a420:	mov	r1, #1
   1a424:	bl	1bc24 <__assert_fail@plt+0xab28>
   1a428:	cmp	r0, #0
   1a42c:	popne	{r4, pc}
   1a430:	bl	1a538 <__assert_fail@plt+0x943c>
   1a434:	push	{r4, lr}
   1a438:	bl	1bc24 <__assert_fail@plt+0xab28>
   1a43c:	cmp	r0, #0
   1a440:	popne	{r4, pc}
   1a444:	bl	1a538 <__assert_fail@plt+0x943c>
   1a448:	push	{r4, lr}
   1a44c:	bl	1bc24 <__assert_fail@plt+0xab28>
   1a450:	cmp	r0, #0
   1a454:	popne	{r4, pc}
   1a458:	bl	1a538 <__assert_fail@plt+0x943c>
   1a45c:	push	{r4, r5, r6, lr}
   1a460:	mov	r6, r0
   1a464:	mov	r0, r1
   1a468:	mov	r4, r1
   1a46c:	bl	1bc6c <__assert_fail@plt+0xab70>
   1a470:	subs	r5, r0, #0
   1a474:	beq	1a48c <__assert_fail@plt+0x9390>
   1a478:	mov	r2, r4
   1a47c:	mov	r1, r6
   1a480:	bl	10ebc <memcpy@plt>
   1a484:	mov	r0, r5
   1a488:	pop	{r4, r5, r6, pc}
   1a48c:	bl	1a538 <__assert_fail@plt+0x943c>
   1a490:	push	{r4, r5, r6, lr}
   1a494:	mov	r6, r0
   1a498:	mov	r0, r1
   1a49c:	mov	r4, r1
   1a4a0:	bl	1bc6c <__assert_fail@plt+0xab70>
   1a4a4:	subs	r5, r0, #0
   1a4a8:	beq	1a4c0 <__assert_fail@plt+0x93c4>
   1a4ac:	mov	r2, r4
   1a4b0:	mov	r1, r6
   1a4b4:	bl	10ebc <memcpy@plt>
   1a4b8:	mov	r0, r5
   1a4bc:	pop	{r4, r5, r6, pc}
   1a4c0:	bl	1a538 <__assert_fail@plt+0x943c>
   1a4c4:	push	{r4, r5, r6, lr}
   1a4c8:	mov	r6, r0
   1a4cc:	add	r0, r1, #1
   1a4d0:	mov	r4, r1
   1a4d4:	bl	1bc6c <__assert_fail@plt+0xab70>
   1a4d8:	subs	r5, r0, #0
   1a4dc:	beq	1a4fc <__assert_fail@plt+0x9400>
   1a4e0:	mov	r3, #0
   1a4e4:	mov	r1, r6
   1a4e8:	strb	r3, [r5, r4]
   1a4ec:	mov	r2, r4
   1a4f0:	bl	10ebc <memcpy@plt>
   1a4f4:	mov	r0, r5
   1a4f8:	pop	{r4, r5, r6, pc}
   1a4fc:	bl	1a538 <__assert_fail@plt+0x943c>
   1a500:	push	{r4, r5, r6, lr}
   1a504:	mov	r6, r0
   1a508:	bl	10fe8 <strlen@plt>
   1a50c:	add	r4, r0, #1
   1a510:	mov	r0, r4
   1a514:	bl	1bc6c <__assert_fail@plt+0xab70>
   1a518:	subs	r5, r0, #0
   1a51c:	beq	1a534 <__assert_fail@plt+0x9438>
   1a520:	mov	r2, r4
   1a524:	mov	r1, r6
   1a528:	bl	10ebc <memcpy@plt>
   1a52c:	mov	r0, r5
   1a530:	pop	{r4, r5, r6, pc}
   1a534:	bl	1a538 <__assert_fail@plt+0x943c>
   1a538:	ldr	r3, [pc, #44]	; 1a56c <__assert_fail@plt+0x9470>
   1a53c:	push	{r4, lr}
   1a540:	mov	r2, #5
   1a544:	ldr	r1, [pc, #36]	; 1a570 <__assert_fail@plt+0x9474>
   1a548:	mov	r0, #0
   1a54c:	ldr	r4, [r3]
   1a550:	bl	10ef8 <dcgettext@plt>
   1a554:	ldr	r2, [pc, #24]	; 1a574 <__assert_fail@plt+0x9478>
   1a558:	mov	r1, #0
   1a55c:	mov	r3, r0
   1a560:	mov	r0, r4
   1a564:	bl	10f7c <error@plt>
   1a568:	bl	110d8 <abort@plt>
   1a56c:	andeq	pc, r2, ip, lsr r1	; <UNPREDICTABLE>
   1a570:	andeq	lr, r1, r4, ror #28
   1a574:	ldrdeq	ip, [r1], -r0
   1a578:	cmp	r2, #36	; 0x24
   1a57c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a580:	sub	sp, sp, #28
   1a584:	bhi	1ae30 <__assert_fail@plt+0x9d34>
   1a588:	cmp	r1, #0
   1a58c:	mov	r5, r1
   1a590:	mov	r6, r2
   1a594:	addeq	r5, sp, #20
   1a598:	mov	r9, r0
   1a59c:	mov	r8, r3
   1a5a0:	bl	11000 <__errno_location@plt>
   1a5a4:	mov	r4, #0
   1a5a8:	mov	r2, r6
   1a5ac:	mov	r1, r5
   1a5b0:	str	r4, [r0]
   1a5b4:	mov	sl, r0
   1a5b8:	mov	r0, r9
   1a5bc:	bl	10e74 <strtol@plt>
   1a5c0:	ldr	r6, [r5]
   1a5c4:	cmp	r9, r6
   1a5c8:	mov	r7, r0
   1a5cc:	beq	1a61c <__assert_fail@plt+0x9520>
   1a5d0:	ldr	r4, [sl]
   1a5d4:	cmp	r4, #0
   1a5d8:	bne	1a604 <__assert_fail@plt+0x9508>
   1a5dc:	ldr	r3, [sp, #64]	; 0x40
   1a5e0:	cmp	r3, #0
   1a5e4:	beq	1a5f4 <__assert_fail@plt+0x94f8>
   1a5e8:	ldrb	r9, [r6]
   1a5ec:	cmp	r9, #0
   1a5f0:	bne	1a64c <__assert_fail@plt+0x9550>
   1a5f4:	str	r7, [r8]
   1a5f8:	mov	r0, r4
   1a5fc:	add	sp, sp, #28
   1a600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a604:	cmp	r4, #34	; 0x22
   1a608:	beq	1a86c <__assert_fail@plt+0x9770>
   1a60c:	mov	r4, #4
   1a610:	mov	r0, r4
   1a614:	add	sp, sp, #28
   1a618:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a61c:	ldr	r3, [sp, #64]	; 0x40
   1a620:	cmp	r3, r4
   1a624:	beq	1a60c <__assert_fail@plt+0x9510>
   1a628:	ldrb	r9, [r9]
   1a62c:	cmp	r9, r4
   1a630:	beq	1a60c <__assert_fail@plt+0x9510>
   1a634:	mov	r1, r9
   1a638:	mov	r0, r3
   1a63c:	bl	10ff4 <strchr@plt>
   1a640:	cmp	r0, r4
   1a644:	movne	r7, #1
   1a648:	beq	1a60c <__assert_fail@plt+0x9510>
   1a64c:	mov	r1, r9
   1a650:	ldr	r0, [sp, #64]	; 0x40
   1a654:	bl	10ff4 <strchr@plt>
   1a658:	cmp	r0, #0
   1a65c:	beq	1ab14 <__assert_fail@plt+0x9a18>
   1a660:	sub	r3, r9, #69	; 0x45
   1a664:	cmp	r3, #47	; 0x2f
   1a668:	ldrls	pc, [pc, r3, lsl #2]
   1a66c:	b	1a730 <__assert_fail@plt+0x9634>
   1a670:	andeq	sl, r1, r8, lsr #16
   1a674:	andeq	sl, r1, r0, lsr r7
   1a678:	andeq	sl, r1, r8, lsr #16
   1a67c:	andeq	sl, r1, r0, lsr r7
   1a680:	andeq	sl, r1, r0, lsr r7
   1a684:	andeq	sl, r1, r0, lsr r7
   1a688:	andeq	sl, r1, r8, lsr #16
   1a68c:	andeq	sl, r1, r0, lsr r7
   1a690:	andeq	sl, r1, r8, lsr #16
   1a694:	andeq	sl, r1, r0, lsr r7
   1a698:	andeq	sl, r1, r0, lsr r7
   1a69c:	andeq	sl, r1, r8, lsr #16
   1a6a0:	andeq	sl, r1, r0, lsr r7
   1a6a4:	andeq	sl, r1, r0, lsr r7
   1a6a8:	andeq	sl, r1, r0, lsr r7
   1a6ac:	andeq	sl, r1, r8, lsr #16
   1a6b0:	andeq	sl, r1, r0, lsr r7
   1a6b4:	andeq	sl, r1, r0, lsr r7
   1a6b8:	andeq	sl, r1, r0, lsr r7
   1a6bc:	andeq	sl, r1, r0, lsr r7
   1a6c0:	andeq	sl, r1, r8, lsr #16
   1a6c4:	andeq	sl, r1, r8, lsr #16
   1a6c8:	andeq	sl, r1, r0, lsr r7
   1a6cc:	andeq	sl, r1, r0, lsr r7
   1a6d0:	andeq	sl, r1, r0, lsr r7
   1a6d4:	andeq	sl, r1, r0, lsr r7
   1a6d8:	andeq	sl, r1, r0, lsr r7
   1a6dc:	andeq	sl, r1, r0, lsr r7
   1a6e0:	andeq	sl, r1, r0, lsr r7
   1a6e4:	andeq	sl, r1, r0, lsr r7
   1a6e8:	andeq	sl, r1, r0, lsr r7
   1a6ec:	andeq	sl, r1, r0, lsr r7
   1a6f0:	andeq	sl, r1, r0, lsr r7
   1a6f4:	andeq	sl, r1, r0, lsr r7
   1a6f8:	andeq	sl, r1, r8, lsr #16
   1a6fc:	andeq	sl, r1, r0, lsr r7
   1a700:	andeq	sl, r1, r0, lsr r7
   1a704:	andeq	sl, r1, r0, lsr r7
   1a708:	andeq	sl, r1, r8, lsr #16
   1a70c:	andeq	sl, r1, r0, lsr r7
   1a710:	andeq	sl, r1, r8, lsr #16
   1a714:	andeq	sl, r1, r0, lsr r7
   1a718:	andeq	sl, r1, r0, lsr r7
   1a71c:	andeq	sl, r1, r0, lsr r7
   1a720:	andeq	sl, r1, r0, lsr r7
   1a724:	andeq	sl, r1, r0, lsr r7
   1a728:	andeq	sl, r1, r0, lsr r7
   1a72c:	andeq	sl, r1, r8, lsr #16
   1a730:	ldr	r3, [pc, #1804]	; 1ae44 <__assert_fail@plt+0x9d48>
   1a734:	mov	sl, #1024	; 0x400
   1a738:	mov	fp, #1
   1a73c:	stm	sp, {r3, sl}
   1a740:	sub	r9, r9, #66	; 0x42
   1a744:	cmp	r9, #53	; 0x35
   1a748:	ldrls	pc, [pc, r9, lsl #2]
   1a74c:	b	1ab14 <__assert_fail@plt+0x9a18>
   1a750:	andeq	sl, r1, r0, asr #21
   1a754:	andeq	sl, r1, r4, lsl fp
   1a758:	andeq	sl, r1, r4, lsl fp
   1a75c:	andeq	sl, r1, r4, lsr #18
   1a760:	andeq	sl, r1, r4, lsl fp
   1a764:	andeq	sl, r1, ip, ror #17
   1a768:	andeq	sl, r1, r4, lsl fp
   1a76c:	andeq	sl, r1, r4, lsl fp
   1a770:	andeq	sl, r1, r4, lsl fp
   1a774:	andeq	sl, r1, r0, lsr #22
   1a778:	andeq	sl, r1, r4, lsl fp
   1a77c:			; <UNDEFINED> instruction: 0x0001a8b4
   1a780:	andeq	sl, r1, r4, lsl fp
   1a784:	andeq	sl, r1, r4, lsl fp
   1a788:	andeq	sl, r1, ip, lsl #20
   1a78c:	andeq	sl, r1, r4, lsl fp
   1a790:	andeq	sl, r1, r4, lsl fp
   1a794:	andeq	sl, r1, r4, lsl fp
   1a798:	ldrdeq	sl, [r1], -r4
   1a79c:	andeq	sl, r1, r4, lsl fp
   1a7a0:	andeq	sl, r1, r4, lsl fp
   1a7a4:	andeq	sl, r1, r4, lsl fp
   1a7a8:	andeq	sl, r1, r4, lsl fp
   1a7ac:	andeq	sl, r1, r4, asr #20
   1a7b0:	andeq	sl, r1, r0, lsl #19
   1a7b4:	andeq	sl, r1, r4, lsl fp
   1a7b8:	andeq	sl, r1, r4, lsl fp
   1a7bc:	andeq	sl, r1, r4, lsl fp
   1a7c0:	andeq	sl, r1, r4, lsl fp
   1a7c4:	andeq	sl, r1, r4, lsl fp
   1a7c8:	andeq	sl, r1, r4, lsl fp
   1a7cc:	andeq	sl, r1, r4, lsl fp
   1a7d0:	strdeq	sl, [r1], -r8
   1a7d4:	muleq	r1, r4, r8
   1a7d8:	andeq	sl, r1, r4, lsl fp
   1a7dc:	andeq	sl, r1, r4, lsl fp
   1a7e0:	andeq	sl, r1, r4, lsl fp
   1a7e4:	andeq	sl, r1, ip, ror #17
   1a7e8:	andeq	sl, r1, r4, lsl fp
   1a7ec:	andeq	sl, r1, r4, lsl fp
   1a7f0:	andeq	sl, r1, r4, lsl fp
   1a7f4:	andeq	sl, r1, r0, lsr #22
   1a7f8:	andeq	sl, r1, r4, lsl fp
   1a7fc:			; <UNDEFINED> instruction: 0x0001a8b4
   1a800:	andeq	sl, r1, r4, lsl fp
   1a804:	andeq	sl, r1, r4, lsl fp
   1a808:	andeq	sl, r1, r4, lsl fp
   1a80c:	andeq	sl, r1, r4, lsl fp
   1a810:	andeq	sl, r1, r4, lsl fp
   1a814:	andeq	sl, r1, r4, lsl fp
   1a818:	ldrdeq	sl, [r1], -r4
   1a81c:	andeq	sl, r1, r4, lsl fp
   1a820:	andeq	sl, r1, r4, lsl fp
   1a824:	ldrdeq	sl, [r1], -ip
   1a828:	mov	r1, #48	; 0x30
   1a82c:	ldr	r0, [sp, #64]	; 0x40
   1a830:	bl	10ff4 <strchr@plt>
   1a834:	cmp	r0, #0
   1a838:	beq	1a730 <__assert_fail@plt+0x9634>
   1a83c:	ldrb	r3, [r6, #1]
   1a840:	cmp	r3, #68	; 0x44
   1a844:	beq	1a858 <__assert_fail@plt+0x975c>
   1a848:	cmp	r3, #105	; 0x69
   1a84c:	beq	1a874 <__assert_fail@plt+0x9778>
   1a850:	cmp	r3, #66	; 0x42
   1a854:	bne	1a730 <__assert_fail@plt+0x9634>
   1a858:	ldr	r3, [pc, #1512]	; 1ae48 <__assert_fail@plt+0x9d4c>
   1a85c:	mov	sl, #1000	; 0x3e8
   1a860:	mov	fp, #2
   1a864:	stm	sp, {r3, sl}
   1a868:	b	1a740 <__assert_fail@plt+0x9644>
   1a86c:	mov	r4, #1
   1a870:	b	1a5dc <__assert_fail@plt+0x94e0>
   1a874:	ldrb	r3, [r6, #2]
   1a878:	mov	sl, #1024	; 0x400
   1a87c:	cmp	r3, #66	; 0x42
   1a880:	beq	1abf4 <__assert_fail@plt+0x9af8>
   1a884:	ldr	r3, [pc, #1464]	; 1ae44 <__assert_fail@plt+0x9d48>
   1a888:	mov	fp, #1
   1a88c:	stm	sp, {r3, sl}
   1a890:	b	1a740 <__assert_fail@plt+0x9644>
   1a894:	mov	r9, #0
   1a898:	add	r3, r6, fp
   1a89c:	str	r3, [r5]
   1a8a0:	ldrb	r3, [r6, fp]
   1a8a4:	orr	r4, r4, r9
   1a8a8:	cmp	r3, #0
   1a8ac:	orrne	r4, r4, #2
   1a8b0:	b	1a5f4 <__assert_fail@plt+0x94f8>
   1a8b4:	mov	r3, #1
   1a8b8:	mov	r2, r3
   1a8bc:	mov	r9, #0
   1a8c0:	cmp	r7, #0
   1a8c4:	ldrge	r1, [sp]
   1a8c8:	blt	1adb8 <__assert_fail@plt+0x9cbc>
   1a8cc:	cmp	r7, r1
   1a8d0:	ble	1ade8 <__assert_fail@plt+0x9cec>
   1a8d4:	sub	r3, r3, #1
   1a8d8:	cmn	r3, #1
   1a8dc:	mvn	r7, #-2147483648	; 0x80000000
   1a8e0:	mov	r9, r2
   1a8e4:	bne	1a8cc <__assert_fail@plt+0x97d0>
   1a8e8:	b	1aad0 <__assert_fail@plt+0x99d4>
   1a8ec:	mov	r3, #2
   1a8f0:	mov	r9, #0
   1a8f4:	mov	r2, #1
   1a8f8:	cmp	r7, #0
   1a8fc:	ldrge	r1, [sp]
   1a900:	blt	1ad6c <__assert_fail@plt+0x9c70>
   1a904:	cmp	r7, r1
   1a908:	ble	1ad54 <__assert_fail@plt+0x9c58>
   1a90c:	sub	r3, r3, #1
   1a910:	cmn	r3, #1
   1a914:	mvn	r7, #-2147483648	; 0x80000000
   1a918:	mov	r9, r2
   1a91c:	bne	1a904 <__assert_fail@plt+0x9808>
   1a920:	b	1aad0 <__assert_fail@plt+0x99d4>
   1a924:	mov	r3, #5
   1a928:	mov	r1, r8
   1a92c:	mov	r9, #0
   1a930:	mov	r8, r5
   1a934:	mov	r2, #1
   1a938:	mov	r5, r4
   1a93c:	mov	r4, sl
   1a940:	mov	sl, r3
   1a944:	mov	r3, r1
   1a948:	cmp	r7, #0
   1a94c:	ldrge	r1, [sp]
   1a950:	blt	1ab40 <__assert_fail@plt+0x9a44>
   1a954:	cmp	r7, r1
   1a958:	ble	1ab98 <__assert_fail@plt+0x9a9c>
   1a95c:	sub	sl, sl, #1
   1a960:	cmn	sl, #1
   1a964:	mvn	r7, #-2147483648	; 0x80000000
   1a968:	mov	r9, r2
   1a96c:	bne	1a954 <__assert_fail@plt+0x9858>
   1a970:	mov	r4, r5
   1a974:	mov	r5, r8
   1a978:	mov	r8, r3
   1a97c:	b	1aad0 <__assert_fail@plt+0x99d4>
   1a980:	mov	r3, #6
   1a984:	mov	r9, #0
   1a988:	mov	r1, r8
   1a98c:	mov	r2, #1
   1a990:	mov	r8, r5
   1a994:	mov	r5, r4
   1a998:	mov	r4, r9
   1a99c:	mov	r9, sl
   1a9a0:	mov	sl, r3
   1a9a4:	mov	r3, r1
   1a9a8:	cmp	r7, #0
   1a9ac:	ldrge	r1, [sp]
   1a9b0:	blt	1abac <__assert_fail@plt+0x9ab0>
   1a9b4:	cmp	r7, r1
   1a9b8:	ble	1ac30 <__assert_fail@plt+0x9b34>
   1a9bc:	sub	sl, sl, #1
   1a9c0:	cmn	sl, #1
   1a9c4:	mvn	r7, #-2147483648	; 0x80000000
   1a9c8:	mov	r4, r2
   1a9cc:	bne	1a9b4 <__assert_fail@plt+0x98b8>
   1a9d0:	b	1a970 <__assert_fail@plt+0x9874>
   1a9d4:	mov	r3, #3
   1a9d8:	mov	r9, #0
   1a9dc:	mov	r2, #1
   1a9e0:	cmp	r7, #0
   1a9e4:	ldrge	r1, [sp]
   1a9e8:	blt	1ad04 <__assert_fail@plt+0x9c08>
   1a9ec:	cmp	r7, r1
   1a9f0:	ble	1ad34 <__assert_fail@plt+0x9c38>
   1a9f4:	sub	r3, r3, #1
   1a9f8:	cmn	r3, #1
   1a9fc:	mvn	r7, #-2147483648	; 0x80000000
   1aa00:	mov	r9, r2
   1aa04:	bne	1a9ec <__assert_fail@plt+0x98f0>
   1aa08:	b	1aad0 <__assert_fail@plt+0x99d4>
   1aa0c:	mov	r3, #4
   1aa10:	mov	r9, #0
   1aa14:	mov	r2, #1
   1aa18:	cmp	r7, #0
   1aa1c:	ldrge	r1, [sp]
   1aa20:	blt	1ac7c <__assert_fail@plt+0x9b80>
   1aa24:	cmp	r1, r7
   1aa28:	bge	1acac <__assert_fail@plt+0x9bb0>
   1aa2c:	sub	r3, r3, #1
   1aa30:	cmn	r3, #1
   1aa34:	mov	r9, r2
   1aa38:	mvn	r7, #-2147483648	; 0x80000000
   1aa3c:	bne	1aa24 <__assert_fail@plt+0x9928>
   1aa40:	b	1aad0 <__assert_fail@plt+0x99d4>
   1aa44:	mov	r3, #7
   1aa48:	mov	r9, #0
   1aa4c:	mov	r1, r8
   1aa50:	mov	r2, #1
   1aa54:	mov	r8, r5
   1aa58:	mov	r5, r4
   1aa5c:	mov	r4, r9
   1aa60:	mov	r9, sl
   1aa64:	mov	sl, r3
   1aa68:	mov	r3, r1
   1aa6c:	cmp	r7, #0
   1aa70:	ldrge	r1, [sp]
   1aa74:	bge	1aa90 <__assert_fail@plt+0x9994>
   1aa78:	b	1ac48 <__assert_fail@plt+0x9b4c>
   1aa7c:	sub	sl, sl, #1
   1aa80:	cmn	sl, #1
   1aa84:	mvn	r7, #-2147483648	; 0x80000000
   1aa88:	mov	r4, r2
   1aa8c:	beq	1a970 <__assert_fail@plt+0x9874>
   1aa90:	cmp	r1, r7
   1aa94:	blt	1aa7c <__assert_fail@plt+0x9980>
   1aa98:	cmp	sl, #0
   1aa9c:	mov	r1, sl
   1aaa0:	mul	r7, r9, r7
   1aaa4:	sub	sl, sl, #1
   1aaa8:	bne	1aa6c <__assert_fail@plt+0x9970>
   1aaac:	mov	r9, r4
   1aab0:	mov	r4, r5
   1aab4:	mov	r5, r8
   1aab8:	mov	r8, r3
   1aabc:	b	1a898 <__assert_fail@plt+0x979c>
   1aac0:	cmp	r7, #0
   1aac4:	blt	1ac08 <__assert_fail@plt+0x9b0c>
   1aac8:	cmp	r7, #2097152	; 0x200000
   1aacc:	blt	1ac24 <__assert_fail@plt+0x9b28>
   1aad0:	mvn	r7, #-2147483648	; 0x80000000
   1aad4:	mov	r9, #1
   1aad8:	b	1a898 <__assert_fail@plt+0x979c>
   1aadc:	cmp	r7, #0
   1aae0:	blt	1acc4 <__assert_fail@plt+0x9bc8>
   1aae4:	cmn	r7, #-1073741823	; 0xc0000001
   1aae8:	bgt	1aad0 <__assert_fail@plt+0x99d4>
   1aaec:	lsl	r7, r7, #1
   1aaf0:	mov	r9, #0
   1aaf4:	b	1a898 <__assert_fail@plt+0x979c>
   1aaf8:	cmp	r7, #0
   1aafc:	blt	1ace4 <__assert_fail@plt+0x9be8>
   1ab00:	cmp	r7, #4194304	; 0x400000
   1ab04:	bge	1aad0 <__assert_fail@plt+0x99d4>
   1ab08:	lsl	r7, r7, #9
   1ab0c:	mov	r9, #0
   1ab10:	b	1a898 <__assert_fail@plt+0x979c>
   1ab14:	str	r7, [r8]
   1ab18:	orr	r4, r4, #2
   1ab1c:	b	1a5f8 <__assert_fail@plt+0x94fc>
   1ab20:	cmp	r7, #0
   1ab24:	blt	1ae00 <__assert_fail@plt+0x9d04>
   1ab28:	ldr	r3, [sp]
   1ab2c:	cmp	r7, r3
   1ab30:	bgt	1aad0 <__assert_fail@plt+0x99d4>
   1ab34:	mul	r7, sl, r7
   1ab38:	mov	r9, #0
   1ab3c:	b	1a898 <__assert_fail@plt+0x979c>
   1ab40:	cmn	r7, #1
   1ab44:	beq	1ab98 <__assert_fail@plt+0x9a9c>
   1ab48:	str	r4, [sp, #12]
   1ab4c:	mov	r4, r9
   1ab50:	mov	r9, r3
   1ab54:	b	1ab6c <__assert_fail@plt+0x9a70>
   1ab58:	sub	sl, sl, #1
   1ab5c:	cmn	sl, #1
   1ab60:	mov	r4, r2
   1ab64:	mov	r7, #-2147483648	; 0x80000000
   1ab68:	beq	1ae20 <__assert_fail@plt+0x9d24>
   1ab6c:	mov	r1, r7
   1ab70:	mov	r0, #-2147483648	; 0x80000000
   1ab74:	str	r2, [sp, #8]
   1ab78:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1ab7c:	ldr	r3, [sp, #4]
   1ab80:	ldr	r2, [sp, #8]
   1ab84:	cmp	r0, r3
   1ab88:	blt	1ab58 <__assert_fail@plt+0x9a5c>
   1ab8c:	mov	r3, r9
   1ab90:	mov	r9, r4
   1ab94:	ldr	r4, [sp, #12]
   1ab98:	cmp	sl, #0
   1ab9c:	mul	r7, r4, r7
   1aba0:	sub	sl, sl, #1
   1aba4:	bne	1a948 <__assert_fail@plt+0x984c>
   1aba8:	b	1aab0 <__assert_fail@plt+0x99b4>
   1abac:	cmn	r7, #1
   1abb0:	beq	1ac30 <__assert_fail@plt+0x9b34>
   1abb4:	mov	r1, r7
   1abb8:	mov	r0, #-2147483648	; 0x80000000
   1abbc:	str	r3, [sp, #12]
   1abc0:	str	r2, [sp, #8]
   1abc4:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1abc8:	ldr	r3, [sp, #4]
   1abcc:	ldr	r2, [sp, #8]
   1abd0:	cmp	r0, r3
   1abd4:	ldr	r3, [sp, #12]
   1abd8:	bge	1ac30 <__assert_fail@plt+0x9b34>
   1abdc:	mov	r4, r5
   1abe0:	mov	r5, r8
   1abe4:	mov	r8, r3
   1abe8:	mov	r7, #-2147483648	; 0x80000000
   1abec:	mov	r9, #1
   1abf0:	b	1a898 <__assert_fail@plt+0x979c>
   1abf4:	ldr	r3, [pc, #584]	; 1ae44 <__assert_fail@plt+0x9d48>
   1abf8:	str	sl, [sp, #4]
   1abfc:	str	r3, [sp]
   1ac00:	mov	fp, #3
   1ac04:	b	1a740 <__assert_fail@plt+0x9644>
   1ac08:	cmn	r7, #1
   1ac0c:	beq	1ac24 <__assert_fail@plt+0x9b28>
   1ac10:	mov	r1, r7
   1ac14:	mov	r0, #-2147483648	; 0x80000000
   1ac18:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1ac1c:	cmp	r0, #1024	; 0x400
   1ac20:	blt	1abe8 <__assert_fail@plt+0x9aec>
   1ac24:	lsl	r7, r7, #10
   1ac28:	mov	r9, #0
   1ac2c:	b	1a898 <__assert_fail@plt+0x979c>
   1ac30:	cmp	sl, #0
   1ac34:	mov	r1, sl
   1ac38:	mul	r7, r9, r7
   1ac3c:	sub	sl, sl, #1
   1ac40:	bne	1a9a8 <__assert_fail@plt+0x98ac>
   1ac44:	b	1aaac <__assert_fail@plt+0x99b0>
   1ac48:	cmn	r7, #1
   1ac4c:	beq	1aa98 <__assert_fail@plt+0x999c>
   1ac50:	mov	r1, r7
   1ac54:	mov	r0, #-2147483648	; 0x80000000
   1ac58:	str	r3, [sp, #12]
   1ac5c:	str	r2, [sp, #8]
   1ac60:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1ac64:	ldr	r3, [sp, #4]
   1ac68:	ldr	r2, [sp, #8]
   1ac6c:	cmp	r0, r3
   1ac70:	ldr	r3, [sp, #12]
   1ac74:	blt	1abdc <__assert_fail@plt+0x9ae0>
   1ac78:	b	1aa98 <__assert_fail@plt+0x999c>
   1ac7c:	cmn	r7, #1
   1ac80:	beq	1acac <__assert_fail@plt+0x9bb0>
   1ac84:	mov	r1, r7
   1ac88:	mov	r0, #-2147483648	; 0x80000000
   1ac8c:	str	r3, [sp, #12]
   1ac90:	str	r2, [sp, #8]
   1ac94:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1ac98:	ldr	r3, [sp, #4]
   1ac9c:	ldr	r2, [sp, #8]
   1aca0:	cmp	r0, r3
   1aca4:	ldr	r3, [sp, #12]
   1aca8:	blt	1abe8 <__assert_fail@plt+0x9aec>
   1acac:	cmp	r3, #0
   1acb0:	mov	r1, r3
   1acb4:	mul	r7, sl, r7
   1acb8:	sub	r3, r3, #1
   1acbc:	bne	1aa18 <__assert_fail@plt+0x991c>
   1acc0:	b	1a898 <__assert_fail@plt+0x979c>
   1acc4:	cmn	r7, #1
   1acc8:	beq	1aaec <__assert_fail@plt+0x99f0>
   1accc:	mov	r1, r7
   1acd0:	mov	r0, #-2147483648	; 0x80000000
   1acd4:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1acd8:	cmp	r0, #1
   1acdc:	beq	1abe8 <__assert_fail@plt+0x9aec>
   1ace0:	b	1aaec <__assert_fail@plt+0x99f0>
   1ace4:	cmn	r7, #1
   1ace8:	beq	1ab08 <__assert_fail@plt+0x9a0c>
   1acec:	mov	r1, r7
   1acf0:	mov	r0, #-2147483648	; 0x80000000
   1acf4:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1acf8:	cmp	r0, #512	; 0x200
   1acfc:	blt	1abe8 <__assert_fail@plt+0x9aec>
   1ad00:	b	1ab08 <__assert_fail@plt+0x9a0c>
   1ad04:	cmn	r7, #1
   1ad08:	beq	1ad34 <__assert_fail@plt+0x9c38>
   1ad0c:	mov	r1, r7
   1ad10:	mov	r0, #-2147483648	; 0x80000000
   1ad14:	str	r3, [sp, #12]
   1ad18:	str	r2, [sp, #8]
   1ad1c:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1ad20:	ldr	r3, [sp, #4]
   1ad24:	ldr	r2, [sp, #8]
   1ad28:	cmp	r0, r3
   1ad2c:	ldr	r3, [sp, #12]
   1ad30:	blt	1abe8 <__assert_fail@plt+0x9aec>
   1ad34:	cmp	r3, #0
   1ad38:	mov	r1, r3
   1ad3c:	mul	r7, sl, r7
   1ad40:	sub	r3, r3, #1
   1ad44:	bne	1a9e0 <__assert_fail@plt+0x98e4>
   1ad48:	b	1a898 <__assert_fail@plt+0x979c>
   1ad4c:	mov	r3, r6
   1ad50:	ldr	r6, [sp, #12]
   1ad54:	cmp	r3, #0
   1ad58:	mov	r1, r3
   1ad5c:	mul	r7, sl, r7
   1ad60:	sub	r3, r3, #1
   1ad64:	bne	1a8f8 <__assert_fail@plt+0x97fc>
   1ad68:	b	1a898 <__assert_fail@plt+0x979c>
   1ad6c:	cmn	r7, #1
   1ad70:	beq	1ad54 <__assert_fail@plt+0x9c58>
   1ad74:	str	r6, [sp, #12]
   1ad78:	mov	r6, r3
   1ad7c:	mov	r1, r7
   1ad80:	mov	r0, #-2147483648	; 0x80000000
   1ad84:	str	r2, [sp, #8]
   1ad88:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1ad8c:	ldr	r3, [sp, #4]
   1ad90:	ldr	r2, [sp, #8]
   1ad94:	cmp	r0, r3
   1ad98:	bge	1ad4c <__assert_fail@plt+0x9c50>
   1ad9c:	sub	r6, r6, #1
   1ada0:	cmn	r6, #1
   1ada4:	mov	r7, #-2147483648	; 0x80000000
   1ada8:	mov	r9, r2
   1adac:	bne	1ad7c <__assert_fail@plt+0x9c80>
   1adb0:	ldr	r6, [sp, #12]
   1adb4:	b	1abe8 <__assert_fail@plt+0x9aec>
   1adb8:	cmn	r7, #1
   1adbc:	beq	1ade8 <__assert_fail@plt+0x9cec>
   1adc0:	mov	r1, r7
   1adc4:	mov	r0, #-2147483648	; 0x80000000
   1adc8:	str	r3, [sp, #12]
   1adcc:	str	r2, [sp, #8]
   1add0:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1add4:	ldr	r3, [sp, #4]
   1add8:	ldr	r2, [sp, #8]
   1addc:	cmp	r0, r3
   1ade0:	ldr	r3, [sp, #12]
   1ade4:	blt	1abe8 <__assert_fail@plt+0x9aec>
   1ade8:	cmp	r3, #0
   1adec:	mov	r1, r3
   1adf0:	mul	r7, sl, r7
   1adf4:	sub	r3, r3, #1
   1adf8:	bne	1a8c0 <__assert_fail@plt+0x97c4>
   1adfc:	b	1a898 <__assert_fail@plt+0x979c>
   1ae00:	cmn	r7, #1
   1ae04:	beq	1ab34 <__assert_fail@plt+0x9a38>
   1ae08:	mov	r1, r7
   1ae0c:	mov	r0, #-2147483648	; 0x80000000
   1ae10:	bl	1c2e4 <__assert_fail@plt+0xb1e8>
   1ae14:	cmp	r0, sl
   1ae18:	blt	1abe8 <__assert_fail@plt+0x9aec>
   1ae1c:	b	1ab34 <__assert_fail@plt+0x9a38>
   1ae20:	mov	r4, r5
   1ae24:	mov	r5, r8
   1ae28:	mov	r8, r9
   1ae2c:	b	1abe8 <__assert_fail@plt+0x9aec>
   1ae30:	ldr	r3, [pc, #20]	; 1ae4c <__assert_fail@plt+0x9d50>
   1ae34:	mov	r2, #85	; 0x55
   1ae38:	ldr	r1, [pc, #16]	; 1ae50 <__assert_fail@plt+0x9d54>
   1ae3c:	ldr	r0, [pc, #16]	; 1ae54 <__assert_fail@plt+0x9d58>
   1ae40:	bl	110fc <__assert_fail@plt>
   1ae44:			; <UNDEFINED> instruction: 0x001fffff
   1ae48:	mlaeq	r0, fp, r4, ip
   1ae4c:	andeq	lr, r1, r8, ror lr
   1ae50:	andeq	lr, r1, r0, lsl #29
   1ae54:	muleq	r1, r0, lr
   1ae58:	cmp	r2, #36	; 0x24
   1ae5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae60:	sub	sp, sp, #52	; 0x34
   1ae64:	bhi	1bbf4 <__assert_fail@plt+0xaaf8>
   1ae68:	cmp	r1, #0
   1ae6c:	mov	r6, r2
   1ae70:	mov	sl, r0
   1ae74:	mov	r5, r1
   1ae78:	mov	r8, r3
   1ae7c:	addeq	r5, sp, #44	; 0x2c
   1ae80:	bl	11000 <__errno_location@plt>
   1ae84:	mov	r3, #0
   1ae88:	str	r3, [r0]
   1ae8c:	mov	fp, r0
   1ae90:	bl	10fd0 <__ctype_b_loc@plt>
   1ae94:	ldrb	r3, [sl]
   1ae98:	mov	r2, sl
   1ae9c:	ldr	r0, [r0]
   1aea0:	b	1aea8 <__assert_fail@plt+0x9dac>
   1aea4:	ldrb	r3, [r2, #1]!
   1aea8:	lsl	r1, r3, #1
   1aeac:	ldrh	r4, [r0, r1]
   1aeb0:	ands	r4, r4, #8192	; 0x2000
   1aeb4:	bne	1aea4 <__assert_fail@plt+0x9da8>
   1aeb8:	cmp	r3, #45	; 0x2d
   1aebc:	bne	1aed0 <__assert_fail@plt+0x9dd4>
   1aec0:	mov	r4, #4
   1aec4:	mov	r0, r4
   1aec8:	add	sp, sp, #52	; 0x34
   1aecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aed0:	mov	r2, r6
   1aed4:	mov	r3, r4
   1aed8:	mov	r1, r5
   1aedc:	mov	r0, sl
   1aee0:	bl	10ec8 <__strtoull_internal@plt>
   1aee4:	ldr	r9, [r5]
   1aee8:	cmp	sl, r9
   1aeec:	mov	r6, r0
   1aef0:	mov	r7, r1
   1aef4:	beq	1af3c <__assert_fail@plt+0x9e40>
   1aef8:	ldr	r4, [fp]
   1aefc:	cmp	r4, #0
   1af00:	bne	1af2c <__assert_fail@plt+0x9e30>
   1af04:	ldr	r3, [sp, #88]	; 0x58
   1af08:	cmp	r3, #0
   1af0c:	beq	1af1c <__assert_fail@plt+0x9e20>
   1af10:	ldrb	sl, [r9]
   1af14:	cmp	sl, #0
   1af18:	bne	1af70 <__assert_fail@plt+0x9e74>
   1af1c:	mov	r0, r4
   1af20:	strd	r6, [r8]
   1af24:	add	sp, sp, #52	; 0x34
   1af28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af2c:	cmp	r4, #34	; 0x22
   1af30:	bne	1aec0 <__assert_fail@plt+0x9dc4>
   1af34:	mov	r4, #1
   1af38:	b	1af04 <__assert_fail@plt+0x9e08>
   1af3c:	ldr	r3, [sp, #88]	; 0x58
   1af40:	cmp	r3, #0
   1af44:	beq	1aec0 <__assert_fail@plt+0x9dc4>
   1af48:	ldrb	sl, [r9]
   1af4c:	cmp	sl, #0
   1af50:	beq	1aec0 <__assert_fail@plt+0x9dc4>
   1af54:	mov	r1, sl
   1af58:	mov	r0, r3
   1af5c:	bl	10ff4 <strchr@plt>
   1af60:	cmp	r0, #0
   1af64:	movne	r6, #1
   1af68:	movne	r7, #0
   1af6c:	beq	1aec0 <__assert_fail@plt+0x9dc4>
   1af70:	mov	r1, sl
   1af74:	ldr	r0, [sp, #88]	; 0x58
   1af78:	bl	10ff4 <strchr@plt>
   1af7c:	cmp	r0, #0
   1af80:	beq	1bae0 <__assert_fail@plt+0xa9e4>
   1af84:	sub	r3, sl, #69	; 0x45
   1af88:	cmp	r3, #47	; 0x2f
   1af8c:	ldrls	pc, [pc, r3, lsl #2]
   1af90:	b	1b084 <__assert_fail@plt+0x9f88>
   1af94:	andeq	fp, r1, r4, asr r0
   1af98:	andeq	fp, r1, r4, lsl #1
   1af9c:	andeq	fp, r1, r4, asr r0
   1afa0:	andeq	fp, r1, r4, lsl #1
   1afa4:	andeq	fp, r1, r4, lsl #1
   1afa8:	andeq	fp, r1, r4, lsl #1
   1afac:	andeq	fp, r1, r4, asr r0
   1afb0:	andeq	fp, r1, r4, lsl #1
   1afb4:	andeq	fp, r1, r4, asr r0
   1afb8:	andeq	fp, r1, r4, lsl #1
   1afbc:	andeq	fp, r1, r4, lsl #1
   1afc0:	andeq	fp, r1, r4, asr r0
   1afc4:	andeq	fp, r1, r4, lsl #1
   1afc8:	andeq	fp, r1, r4, lsl #1
   1afcc:	andeq	fp, r1, r4, lsl #1
   1afd0:	andeq	fp, r1, r4, asr r0
   1afd4:	andeq	fp, r1, r4, lsl #1
   1afd8:	andeq	fp, r1, r4, lsl #1
   1afdc:	andeq	fp, r1, r4, lsl #1
   1afe0:	andeq	fp, r1, r4, lsl #1
   1afe4:	andeq	fp, r1, r4, asr r0
   1afe8:	andeq	fp, r1, r4, asr r0
   1afec:	andeq	fp, r1, r4, lsl #1
   1aff0:	andeq	fp, r1, r4, lsl #1
   1aff4:	andeq	fp, r1, r4, lsl #1
   1aff8:	andeq	fp, r1, r4, lsl #1
   1affc:	andeq	fp, r1, r4, lsl #1
   1b000:	andeq	fp, r1, r4, lsl #1
   1b004:	andeq	fp, r1, r4, lsl #1
   1b008:	andeq	fp, r1, r4, lsl #1
   1b00c:	andeq	fp, r1, r4, lsl #1
   1b010:	andeq	fp, r1, r4, lsl #1
   1b014:	andeq	fp, r1, r4, lsl #1
   1b018:	andeq	fp, r1, r4, lsl #1
   1b01c:	andeq	fp, r1, r4, asr r0
   1b020:	andeq	fp, r1, r4, lsl #1
   1b024:	andeq	fp, r1, r4, lsl #1
   1b028:	andeq	fp, r1, r4, lsl #1
   1b02c:	andeq	fp, r1, r4, asr r0
   1b030:	andeq	fp, r1, r4, lsl #1
   1b034:	andeq	fp, r1, r4, asr r0
   1b038:	andeq	fp, r1, r4, lsl #1
   1b03c:	andeq	fp, r1, r4, lsl #1
   1b040:	andeq	fp, r1, r4, lsl #1
   1b044:	andeq	fp, r1, r4, lsl #1
   1b048:	andeq	fp, r1, r4, lsl #1
   1b04c:	andeq	fp, r1, r4, lsl #1
   1b050:	andeq	fp, r1, r4, asr r0
   1b054:	mov	r1, #48	; 0x30
   1b058:	ldr	r0, [sp, #88]	; 0x58
   1b05c:	bl	10ff4 <strchr@plt>
   1b060:	cmp	r0, #0
   1b064:	beq	1bb74 <__assert_fail@plt+0xaa78>
   1b068:	ldrb	r3, [r9, #1]
   1b06c:	cmp	r3, #68	; 0x44
   1b070:	beq	1bb54 <__assert_fail@plt+0xaa58>
   1b074:	cmp	r3, #105	; 0x69
   1b078:	beq	1bb24 <__assert_fail@plt+0xaa28>
   1b07c:	cmp	r3, #66	; 0x42
   1b080:	beq	1bb54 <__assert_fail@plt+0xaa58>
   1b084:	ldr	r3, [pc, #2948]	; 1bc10 <__assert_fail@plt+0xab14>
   1b088:	mvn	r2, #0
   1b08c:	mov	r1, #1024	; 0x400
   1b090:	mov	lr, #0
   1b094:	strd	r2, [sp]
   1b098:	mov	r3, #1
   1b09c:	str	r3, [sp, #12]
   1b0a0:	sub	sl, sl, #66	; 0x42
   1b0a4:	cmp	sl, #53	; 0x35
   1b0a8:	ldrls	pc, [pc, sl, lsl #2]
   1b0ac:	b	1bae0 <__assert_fail@plt+0xa9e4>
   1b0b0:			; <UNDEFINED> instruction: 0x0001bab0
   1b0b4:	andeq	fp, r1, r0, ror #21
   1b0b8:	andeq	fp, r1, r0, ror #21
   1b0bc:	andeq	fp, r1, ip, lsr #18
   1b0c0:	andeq	fp, r1, r0, ror #21
   1b0c4:	andeq	fp, r1, r8, ror #16
   1b0c8:	andeq	fp, r1, r0, ror #21
   1b0cc:	andeq	fp, r1, r0, ror #21
   1b0d0:	andeq	fp, r1, r0, ror #21
   1b0d4:	andeq	fp, r1, ip, ror #21
   1b0d8:	andeq	fp, r1, r0, ror #21
   1b0dc:	andeq	fp, r1, r8, lsl #3
   1b0e0:	andeq	fp, r1, r0, ror #21
   1b0e4:	andeq	fp, r1, r0, ror #21
   1b0e8:	andeq	fp, r1, r4, lsl r2
   1b0ec:	andeq	fp, r1, r0, ror #21
   1b0f0:	andeq	fp, r1, r0, ror #21
   1b0f4:	andeq	fp, r1, r0, ror #21
   1b0f8:	muleq	r1, r4, r5
   1b0fc:	andeq	fp, r1, r0, ror #21
   1b100:	andeq	fp, r1, r0, ror #21
   1b104:	andeq	fp, r1, r0, ror #21
   1b108:	andeq	fp, r1, r0, ror #21
   1b10c:	andeq	fp, r1, ip, ror #6
   1b110:	andeq	fp, r1, r8, asr #13
   1b114:	andeq	fp, r1, r0, ror #21
   1b118:	andeq	fp, r1, r0, ror #21
   1b11c:	andeq	fp, r1, r0, ror #21
   1b120:	andeq	fp, r1, r0, ror #21
   1b124:	andeq	fp, r1, r0, ror #21
   1b128:	andeq	fp, r1, r0, ror #21
   1b12c:	andeq	fp, r1, r0, ror #21
   1b130:	muleq	r1, r8, r6
   1b134:	muleq	r1, r0, r6
   1b138:	andeq	fp, r1, r0, ror #21
   1b13c:	andeq	fp, r1, r0, ror #21
   1b140:	andeq	fp, r1, r0, ror #21
   1b144:	andeq	fp, r1, r8, ror #16
   1b148:	andeq	fp, r1, r0, ror #21
   1b14c:	andeq	fp, r1, r0, ror #21
   1b150:	andeq	fp, r1, r0, ror #21
   1b154:	andeq	fp, r1, ip, ror #21
   1b158:	andeq	fp, r1, r0, ror #21
   1b15c:	andeq	fp, r1, r8, lsl #3
   1b160:	andeq	fp, r1, r0, ror #21
   1b164:	andeq	fp, r1, r0, ror #21
   1b168:	andeq	fp, r1, r0, ror #21
   1b16c:	andeq	fp, r1, r0, ror #21
   1b170:	andeq	fp, r1, r0, ror #21
   1b174:	andeq	fp, r1, r0, ror #21
   1b178:	muleq	r1, r4, r5
   1b17c:	andeq	fp, r1, r0, ror #21
   1b180:	andeq	fp, r1, r0, ror #21
   1b184:	andeq	fp, r1, r4, ror r6
   1b188:	mul	r0, r6, lr
   1b18c:	ldrd	sl, [sp]
   1b190:	umull	r2, r3, r6, r1
   1b194:	mla	r0, r1, r7, r0
   1b198:	cmp	r7, fp
   1b19c:	cmpeq	r6, sl
   1b1a0:	add	r3, r0, r3
   1b1a4:	mvnhi	r3, #0
   1b1a8:	mvnhi	r2, #0
   1b1ac:	mul	r6, r1, r3
   1b1b0:	umull	r0, r1, r1, r2
   1b1b4:	mla	lr, lr, r2, r6
   1b1b8:	ldrd	r6, [sp]
   1b1bc:	movhi	ip, #1
   1b1c0:	movls	ip, #0
   1b1c4:	cmp	r7, r3
   1b1c8:	cmpeq	r6, r2
   1b1cc:	mvncc	r0, #0
   1b1d0:	add	r1, lr, r1
   1b1d4:	mov	sl, r6
   1b1d8:	movcc	r1, r0
   1b1dc:	mov	fp, r7
   1b1e0:	cmp	fp, r3
   1b1e4:	cmpeq	sl, r2
   1b1e8:	mov	r6, r0
   1b1ec:	mov	r7, r1
   1b1f0:	orrcc	ip, ip, #1
   1b1f4:	ldr	r2, [sp, #12]
   1b1f8:	orr	r4, r4, ip
   1b1fc:	add	r3, r9, r2
   1b200:	str	r3, [r5]
   1b204:	ldrb	r3, [r9, r2]
   1b208:	cmp	r3, #0
   1b20c:	orrne	r4, r4, #2
   1b210:	b	1af1c <__assert_fail@plt+0x9e20>
   1b214:	ldrd	sl, [sp]
   1b218:	umull	r2, r3, r6, r1
   1b21c:	mul	r0, r6, lr
   1b220:	cmp	r7, fp
   1b224:	cmpeq	r6, sl
   1b228:	mvnhi	r2, #0
   1b22c:	mla	r0, r1, r7, r0
   1b230:	umull	sl, fp, r2, r1
   1b234:	add	r3, r0, r3
   1b238:	mul	r0, lr, r2
   1b23c:	mvnhi	r3, #0
   1b240:	strd	sl, [sp, #16]
   1b244:	ldrd	sl, [sp]
   1b248:	mla	r0, r1, r3, r0
   1b24c:	ldr	ip, [sp, #20]
   1b250:	cmp	r3, fp
   1b254:	add	r0, r0, ip
   1b258:	cmpeq	r2, sl
   1b25c:	str	r0, [sp, #20]
   1b260:	bls	1b278 <__assert_fail@plt+0xa17c>
   1b264:	mvn	sl, #0
   1b268:	mvn	fp, #0
   1b26c:	strd	sl, [sp, #16]
   1b270:	ldr	r0, [sp, #20]
   1b274:	ldrd	sl, [sp]
   1b278:	cmp	r7, fp
   1b27c:	cmpeq	r6, sl
   1b280:	mul	r0, r1, r0
   1b284:	ldrd	r6, [sp, #16]
   1b288:	mla	ip, lr, r6, r0
   1b28c:	mov	r0, r6
   1b290:	movhi	r0, #1
   1b294:	movls	r0, #0
   1b298:	cmp	r3, fp
   1b29c:	cmpeq	r2, sl
   1b2a0:	ldrd	r2, [sp, #16]
   1b2a4:	umull	r6, r7, r1, r6
   1b2a8:	orrhi	r0, r0, #1
   1b2ac:	cmp	fp, r3
   1b2b0:	cmpeq	sl, r2
   1b2b4:	add	r7, ip, r7
   1b2b8:	bcc	1bbc4 <__assert_fail@plt+0xaac8>
   1b2bc:	mov	sl, r6
   1b2c0:	mov	fp, r7
   1b2c4:	strd	r6, [sp, #24]
   1b2c8:	mul	r3, r1, fp
   1b2cc:	umull	r6, r7, r1, sl
   1b2d0:	mla	ip, lr, sl, r3
   1b2d4:	ldrd	sl, [sp]
   1b2d8:	ldrd	r2, [sp, #16]
   1b2dc:	add	r7, ip, r7
   1b2e0:	cmp	fp, r3
   1b2e4:	cmpeq	sl, r2
   1b2e8:	mov	r3, fp
   1b2ec:	mov	r2, sl
   1b2f0:	ldrd	sl, [sp, #24]
   1b2f4:	orrcc	r0, r0, #1
   1b2f8:	str	r0, [sp, #16]
   1b2fc:	cmp	r3, fp
   1b300:	cmpeq	r2, sl
   1b304:	bcs	1b85c <__assert_fail@plt+0xa760>
   1b308:	mvn	r2, #0
   1b30c:	mvn	r3, #0
   1b310:	mul	ip, lr, r2
   1b314:	ldrd	sl, [sp]
   1b318:	mla	ip, r1, r3, ip
   1b31c:	umull	r6, r7, r2, r1
   1b320:	ldrd	r0, [sp, #24]
   1b324:	add	r7, ip, r7
   1b328:	cmp	fp, r1
   1b32c:	ldr	r1, [sp, #16]
   1b330:	cmpeq	sl, r0
   1b334:	orrcc	r1, r1, #1
   1b338:	cmp	r3, fp
   1b33c:	cmpeq	r2, sl
   1b340:	mvnhi	r0, #0
   1b344:	movls	ip, r7
   1b348:	movhi	ip, r0
   1b34c:	movls	r0, r6
   1b350:	cmp	r3, fp
   1b354:	cmpeq	r2, sl
   1b358:	mov	r7, ip
   1b35c:	mov	r6, r0
   1b360:	movls	ip, r1
   1b364:	orrhi	ip, r1, #1
   1b368:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1b36c:	ldrd	sl, [sp]
   1b370:	umull	r2, r3, r6, r1
   1b374:	mul	r0, r6, lr
   1b378:	cmp	r7, fp
   1b37c:	cmpeq	r6, sl
   1b380:	mvnhi	r2, #0
   1b384:	mla	r0, r1, r7, r0
   1b388:	umull	sl, fp, r2, r1
   1b38c:	add	r3, r0, r3
   1b390:	mul	r0, lr, r2
   1b394:	mvnhi	r3, #0
   1b398:	strd	sl, [sp, #16]
   1b39c:	ldrd	sl, [sp]
   1b3a0:	mla	r0, r1, r3, r0
   1b3a4:	ldr	ip, [sp, #20]
   1b3a8:	cmp	r3, fp
   1b3ac:	add	r0, r0, ip
   1b3b0:	cmpeq	r2, sl
   1b3b4:	str	r0, [sp, #20]
   1b3b8:	mvnhi	sl, #0
   1b3bc:	mvnhi	fp, #0
   1b3c0:	strdhi	sl, [sp, #16]
   1b3c4:	ldrdhi	sl, [sp]
   1b3c8:	ldr	r0, [sp, #16]
   1b3cc:	cmp	r3, fp
   1b3d0:	ldr	r3, [sp, #20]
   1b3d4:	mul	r0, lr, r0
   1b3d8:	cmpeq	r2, sl
   1b3dc:	mla	r0, r1, r3, r0
   1b3e0:	ldr	r3, [sp, #16]
   1b3e4:	umull	r2, r3, r3, r1
   1b3e8:	strd	r2, [sp, #24]
   1b3ec:	movhi	r3, #1
   1b3f0:	movls	r3, #0
   1b3f4:	cmp	r7, fp
   1b3f8:	cmpeq	r6, sl
   1b3fc:	ldrd	r6, [sp, #16]
   1b400:	ldr	r2, [sp, #28]
   1b404:	movls	ip, r3
   1b408:	orrhi	ip, r3, #1
   1b40c:	cmp	r7, fp
   1b410:	add	r2, r0, r2
   1b414:	cmpeq	r6, sl
   1b418:	str	r2, [sp, #28]
   1b41c:	mvnhi	r2, #0
   1b420:	mvnhi	r3, #0
   1b424:	strdhi	r2, [sp, #24]
   1b428:	ldrd	r6, [sp, #24]
   1b42c:	mul	r2, r1, r7
   1b430:	umull	sl, fp, r1, r6
   1b434:	mla	r3, lr, r6, r2
   1b438:	ldrd	r6, [sp]
   1b43c:	str	r3, [sp, #32]
   1b440:	ldrd	r2, [sp, #16]
   1b444:	cmp	r3, r7
   1b448:	cmpeq	r2, r6
   1b44c:	ldrd	r2, [sp, #24]
   1b450:	orrhi	ip, ip, #1
   1b454:	cmp	r3, r7
   1b458:	ldr	r3, [sp, #32]
   1b45c:	cmpeq	r2, r6
   1b460:	add	r2, r3, fp
   1b464:	mov	fp, r2
   1b468:	bhi	1bbac <__assert_fail@plt+0xaab0>
   1b46c:	strd	sl, [sp, #16]
   1b470:	mul	r2, r1, fp
   1b474:	umull	r6, r7, r1, sl
   1b478:	mla	r3, lr, sl, r2
   1b47c:	ldrd	sl, [sp]
   1b480:	str	r3, [sp, #32]
   1b484:	ldrd	r2, [sp, #24]
   1b488:	cmp	r3, fp
   1b48c:	cmpeq	r2, sl
   1b490:	ldrd	r2, [sp, #16]
   1b494:	orrhi	ip, ip, #1
   1b498:	cmp	fp, r3
   1b49c:	ldr	r3, [sp, #32]
   1b4a0:	cmpeq	sl, r2
   1b4a4:	add	r2, r3, r7
   1b4a8:	mov	r7, r2
   1b4ac:	mvncc	r7, #0
   1b4b0:	mvncc	r6, #0
   1b4b4:	mul	r2, r1, r7
   1b4b8:	mov	sl, r6
   1b4bc:	strd	r6, [sp, #24]
   1b4c0:	mla	r0, lr, sl, r2
   1b4c4:	ldrd	r2, [sp, #16]
   1b4c8:	ldrd	sl, [sp]
   1b4cc:	umull	r6, r7, r1, r6
   1b4d0:	cmp	fp, r3
   1b4d4:	cmpeq	sl, r2
   1b4d8:	mov	r3, fp
   1b4dc:	mov	r2, sl
   1b4e0:	ldrd	sl, [sp, #24]
   1b4e4:	orrcc	ip, ip, #1
   1b4e8:	add	r7, r0, r7
   1b4ec:	cmp	r3, fp
   1b4f0:	cmpeq	r2, sl
   1b4f4:	mvncc	r6, #0
   1b4f8:	mvncc	r7, #0
   1b4fc:	umull	sl, fp, r1, r6
   1b500:	mul	r3, r1, r7
   1b504:	strd	sl, [sp, #16]
   1b508:	mla	r0, lr, r6, r3
   1b50c:	ldrd	sl, [sp, #24]
   1b510:	ldrd	r2, [sp]
   1b514:	cmp	r3, fp
   1b518:	cmpeq	r2, sl
   1b51c:	orrcc	ip, ip, #1
   1b520:	cmp	r3, r7
   1b524:	ldr	r3, [sp, #20]
   1b528:	cmpeq	r2, r6
   1b52c:	add	r3, r0, r3
   1b530:	str	r3, [sp, #20]
   1b534:	mvncc	r2, #0
   1b538:	mvncc	r3, #0
   1b53c:	ldrdcs	r2, [sp, #16]
   1b540:	ldrd	sl, [sp]
   1b544:	mul	r0, r1, r3
   1b548:	cmp	fp, r7
   1b54c:	str	r0, [sp, #16]
   1b550:	cmpeq	sl, r6
   1b554:	ldr	r6, [sp, #16]
   1b558:	umull	r0, r1, r1, r2
   1b55c:	mla	lr, lr, r2, r6
   1b560:	orrcc	ip, ip, #1
   1b564:	cmp	r3, fp
   1b568:	cmpeq	r2, sl
   1b56c:	add	r1, lr, r1
   1b570:	bls	1b57c <__assert_fail@plt+0xa480>
   1b574:	mvn	r0, #0
   1b578:	mov	r1, r0
   1b57c:	cmp	r3, fp
   1b580:	cmpeq	r2, sl
   1b584:	mov	r6, r0
   1b588:	mov	r7, r1
   1b58c:	orrhi	ip, ip, #1
   1b590:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1b594:	ldrd	sl, [sp]
   1b598:	umull	r2, r3, r6, r1
   1b59c:	mul	r0, r6, lr
   1b5a0:	cmp	r7, fp
   1b5a4:	cmpeq	r6, sl
   1b5a8:	mvnhi	r2, #0
   1b5ac:	mla	r0, r1, r7, r0
   1b5b0:	umull	sl, fp, r1, r2
   1b5b4:	add	r3, r0, r3
   1b5b8:	mvnhi	r3, #0
   1b5bc:	strd	sl, [sp, #16]
   1b5c0:	mul	r0, r1, r3
   1b5c4:	ldrd	sl, [sp]
   1b5c8:	mla	r0, lr, r2, r0
   1b5cc:	ldr	ip, [sp, #20]
   1b5d0:	cmp	fp, r3
   1b5d4:	add	r0, r0, ip
   1b5d8:	cmpeq	sl, r2
   1b5dc:	str	r0, [sp, #20]
   1b5e0:	mvncc	sl, #0
   1b5e4:	mvncc	fp, #0
   1b5e8:	strdcc	sl, [sp, #16]
   1b5ec:	ldrdcc	sl, [sp]
   1b5f0:	ldr	r0, [sp, #16]
   1b5f4:	cmp	fp, r3
   1b5f8:	cmpeq	sl, r2
   1b5fc:	mul	r0, lr, r0
   1b600:	ldr	r2, [sp, #20]
   1b604:	ldr	r3, [sp, #16]
   1b608:	movcc	ip, #1
   1b60c:	movcs	ip, #0
   1b610:	cmp	r7, fp
   1b614:	cmpeq	r6, sl
   1b618:	ldrd	r6, [sp, #16]
   1b61c:	mla	r0, r1, r2, r0
   1b620:	umull	r2, r3, r3, r1
   1b624:	orrhi	ip, ip, #1
   1b628:	cmp	r7, fp
   1b62c:	cmpeq	r6, sl
   1b630:	add	r3, r0, r3
   1b634:	mvnhi	r3, #0
   1b638:	mvnhi	r2, #0
   1b63c:	mul	r0, r1, r3
   1b640:	cmp	r7, fp
   1b644:	str	r0, [sp, #24]
   1b648:	cmpeq	r6, sl
   1b64c:	ldr	r6, [sp, #24]
   1b650:	umull	r0, r1, r1, r2
   1b654:	mla	lr, lr, r2, r6
   1b658:	orrhi	ip, ip, #1
   1b65c:	cmp	fp, r3
   1b660:	cmpeq	sl, r2
   1b664:	mvncc	r0, #0
   1b668:	add	r1, lr, r1
   1b66c:	movcc	r1, r0
   1b670:	b	1b1e0 <__assert_fail@plt+0xa0e4>
   1b674:	cmp	r6, #0
   1b678:	sbcs	r3, r7, #0
   1b67c:	blt	1bb14 <__assert_fail@plt+0xaa18>
   1b680:	adds	r6, r6, r6
   1b684:	adc	r7, r7, r7
   1b688:	mov	ip, #0
   1b68c:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1b690:	mov	ip, #0
   1b694:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1b698:	ldr	r3, [pc, #1396]	; 1bc14 <__assert_fail@plt+0xab18>
   1b69c:	mvn	r2, #0
   1b6a0:	cmp	r7, r3
   1b6a4:	cmpeq	r6, r2
   1b6a8:	bhi	1bb14 <__assert_fail@plt+0xaa18>
   1b6ac:	lsl	r3, r7, #9
   1b6b0:	orr	r3, r3, r6, lsr #23
   1b6b4:	lsl	r2, r6, #9
   1b6b8:	mov	r6, r2
   1b6bc:	mov	r7, r3
   1b6c0:	mov	ip, #0
   1b6c4:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1b6c8:	ldrd	sl, [sp]
   1b6cc:	umull	r2, r3, r6, r1
   1b6d0:	mul	r0, r6, lr
   1b6d4:	cmp	r7, fp
   1b6d8:	cmpeq	r6, sl
   1b6dc:	mvnhi	r2, #0
   1b6e0:	mla	r0, r1, r7, r0
   1b6e4:	umull	sl, fp, r2, r1
   1b6e8:	add	r3, r0, r3
   1b6ec:	mul	r0, lr, r2
   1b6f0:	mvnhi	r3, #0
   1b6f4:	strd	sl, [sp, #16]
   1b6f8:	ldrd	sl, [sp]
   1b6fc:	mla	r0, r1, r3, r0
   1b700:	ldr	ip, [sp, #20]
   1b704:	cmp	r3, fp
   1b708:	add	r0, r0, ip
   1b70c:	cmpeq	r2, sl
   1b710:	str	r0, [sp, #20]
   1b714:	mvnhi	sl, #0
   1b718:	mvnhi	fp, #0
   1b71c:	strdhi	sl, [sp, #16]
   1b720:	ldrdhi	sl, [sp]
   1b724:	ldr	r0, [sp, #16]
   1b728:	cmp	r3, fp
   1b72c:	ldr	r3, [sp, #20]
   1b730:	mul	r0, lr, r0
   1b734:	cmpeq	r2, sl
   1b738:	mla	r0, r1, r3, r0
   1b73c:	ldr	r3, [sp, #16]
   1b740:	umull	r2, r3, r3, r1
   1b744:	strd	r2, [sp, #24]
   1b748:	movhi	r3, #1
   1b74c:	movls	r3, #0
   1b750:	cmp	r7, fp
   1b754:	cmpeq	r6, sl
   1b758:	ldrd	r6, [sp, #16]
   1b75c:	ldr	r2, [sp, #28]
   1b760:	movls	ip, r3
   1b764:	orrhi	ip, r3, #1
   1b768:	cmp	r7, fp
   1b76c:	add	r2, r0, r2
   1b770:	cmpeq	r6, sl
   1b774:	str	r2, [sp, #28]
   1b778:	mvnhi	r2, #0
   1b77c:	mvnhi	r3, #0
   1b780:	strdhi	r2, [sp, #24]
   1b784:	ldrd	r6, [sp, #24]
   1b788:	mul	r2, lr, r6
   1b78c:	umull	sl, fp, r6, r1
   1b790:	mla	r3, r1, r7, r2
   1b794:	ldrd	r6, [sp]
   1b798:	str	r3, [sp, #32]
   1b79c:	ldrd	r2, [sp, #16]
   1b7a0:	cmp	r3, r7
   1b7a4:	cmpeq	r2, r6
   1b7a8:	ldrd	r2, [sp, #24]
   1b7ac:	orrhi	ip, ip, #1
   1b7b0:	cmp	r3, r7
   1b7b4:	ldr	r3, [sp, #32]
   1b7b8:	cmpeq	r2, r6
   1b7bc:	add	r2, r3, fp
   1b7c0:	mov	fp, r2
   1b7c4:	bhi	1bbdc <__assert_fail@plt+0xaae0>
   1b7c8:	strd	sl, [sp, #16]
   1b7cc:	mul	r2, lr, sl
   1b7d0:	umull	r6, r7, sl, r1
   1b7d4:	mla	r3, r1, fp, r2
   1b7d8:	ldrd	sl, [sp]
   1b7dc:	str	r3, [sp, #32]
   1b7e0:	ldrd	r2, [sp, #24]
   1b7e4:	cmp	r3, fp
   1b7e8:	cmpeq	r2, sl
   1b7ec:	ldrd	r2, [sp, #16]
   1b7f0:	orrhi	ip, ip, #1
   1b7f4:	cmp	r3, fp
   1b7f8:	ldr	r3, [sp, #32]
   1b7fc:	cmpeq	r2, sl
   1b800:	add	r2, r3, r7
   1b804:	mov	r7, r2
   1b808:	mvnhi	r7, #0
   1b80c:	mvnhi	r6, #0
   1b810:	mul	r2, r1, r7
   1b814:	mov	sl, r6
   1b818:	strd	r6, [sp, #24]
   1b81c:	mla	r0, lr, sl, r2
   1b820:	ldrd	sl, [sp]
   1b824:	ldrd	r2, [sp, #16]
   1b828:	umull	r6, r7, r1, r6
   1b82c:	cmp	r3, fp
   1b830:	cmpeq	r2, sl
   1b834:	mov	r3, ip
   1b838:	orrhi	r3, r3, #1
   1b83c:	mov	r2, sl
   1b840:	str	r3, [sp, #16]
   1b844:	mov	r3, fp
   1b848:	ldrd	sl, [sp, #24]
   1b84c:	add	r7, r0, r7
   1b850:	cmp	r3, fp
   1b854:	cmpeq	r2, sl
   1b858:	bcc	1b308 <__assert_fail@plt+0xa20c>
   1b85c:	mov	r2, r6
   1b860:	mov	r3, r7
   1b864:	b	1b310 <__assert_fail@plt+0xa214>
   1b868:	ldrd	sl, [sp]
   1b86c:	umull	r2, r3, r6, r1
   1b870:	mul	r0, r6, lr
   1b874:	cmp	r7, fp
   1b878:	cmpeq	r6, sl
   1b87c:	mvnhi	r2, #0
   1b880:	mla	r0, r1, r7, r0
   1b884:	umull	sl, fp, r2, r1
   1b888:	add	r3, r0, r3
   1b88c:	mul	r0, lr, r2
   1b890:	mvnhi	r3, #0
   1b894:	strd	sl, [sp, #16]
   1b898:	ldrd	sl, [sp]
   1b89c:	mla	r0, r1, r3, r0
   1b8a0:	ldr	ip, [sp, #20]
   1b8a4:	cmp	r3, fp
   1b8a8:	add	r0, r0, ip
   1b8ac:	cmpeq	r2, sl
   1b8b0:	str	r0, [sp, #20]
   1b8b4:	mvnhi	sl, #0
   1b8b8:	mvnhi	fp, #0
   1b8bc:	strdhi	sl, [sp, #16]
   1b8c0:	ldrdhi	sl, [sp]
   1b8c4:	ldr	r0, [sp, #16]
   1b8c8:	cmp	r3, fp
   1b8cc:	ldr	ip, [sp, #20]
   1b8d0:	mul	r0, lr, r0
   1b8d4:	ldr	r3, [sp, #16]
   1b8d8:	cmpeq	r2, sl
   1b8dc:	mla	r0, r1, ip, r0
   1b8e0:	umull	r2, r3, r3, r1
   1b8e4:	movhi	r1, #1
   1b8e8:	movls	r1, #0
   1b8ec:	cmp	r7, fp
   1b8f0:	cmpeq	r6, sl
   1b8f4:	ldrd	r6, [sp, #16]
   1b8f8:	movls	ip, r1
   1b8fc:	orrhi	ip, r1, #1
   1b900:	cmp	r7, fp
   1b904:	cmpeq	r6, sl
   1b908:	mvnhi	r2, #0
   1b90c:	add	r3, r0, r3
   1b910:	movhi	r3, r2
   1b914:	cmp	r7, fp
   1b918:	cmpeq	r6, sl
   1b91c:	mov	r7, r3
   1b920:	mov	r6, r2
   1b924:	orrhi	ip, ip, #1
   1b928:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1b92c:	ldrd	sl, [sp]
   1b930:	umull	r2, r3, r6, r1
   1b934:	mul	r0, r6, lr
   1b938:	cmp	r7, fp
   1b93c:	cmpeq	r6, sl
   1b940:	mvnhi	r2, #0
   1b944:	mla	r0, r1, r7, r0
   1b948:	umull	sl, fp, r1, r2
   1b94c:	add	r3, r0, r3
   1b950:	mvnhi	r3, #0
   1b954:	strd	sl, [sp, #16]
   1b958:	mul	r0, r1, r3
   1b95c:	ldrd	sl, [sp]
   1b960:	mla	r0, lr, r2, r0
   1b964:	ldr	ip, [sp, #20]
   1b968:	cmp	fp, r3
   1b96c:	add	r0, r0, ip
   1b970:	cmpeq	sl, r2
   1b974:	str	r0, [sp, #20]
   1b978:	mvncc	sl, #0
   1b97c:	mvncc	fp, #0
   1b980:	strdcc	sl, [sp, #16]
   1b984:	ldrdcc	sl, [sp]
   1b988:	ldr	r0, [sp, #16]
   1b98c:	cmp	fp, r3
   1b990:	ldr	r3, [sp, #20]
   1b994:	mul	r0, lr, r0
   1b998:	cmpeq	sl, r2
   1b99c:	mla	r0, r1, r3, r0
   1b9a0:	ldr	r3, [sp, #16]
   1b9a4:	umull	r2, r3, r3, r1
   1b9a8:	strd	r2, [sp, #24]
   1b9ac:	movcc	r3, #1
   1b9b0:	movcs	r3, #0
   1b9b4:	cmp	r7, fp
   1b9b8:	cmpeq	r6, sl
   1b9bc:	movls	ip, r3
   1b9c0:	orrhi	ip, r3, #1
   1b9c4:	ldrd	r2, [sp, #16]
   1b9c8:	cmp	r3, fp
   1b9cc:	ldr	r3, [sp, #28]
   1b9d0:	cmpeq	r2, sl
   1b9d4:	add	r3, r0, r3
   1b9d8:	str	r3, [sp, #28]
   1b9dc:	bhi	1bb94 <__assert_fail@plt+0xaa98>
   1b9e0:	ldrd	r2, [sp, #24]
   1b9e4:	mov	sl, r2
   1b9e8:	mov	fp, r3
   1b9ec:	mul	r2, lr, sl
   1b9f0:	umull	r6, r7, sl, r1
   1b9f4:	mla	r0, r1, fp, r2
   1b9f8:	ldrd	r2, [sp]
   1b9fc:	add	r7, r0, r7
   1ba00:	mov	sl, r2
   1ba04:	mov	fp, r3
   1ba08:	strd	r2, [sp, #32]
   1ba0c:	ldrd	r2, [sp, #16]
   1ba10:	cmp	r3, fp
   1ba14:	cmpeq	r2, sl
   1ba18:	ldrd	r2, [sp, #32]
   1ba1c:	ldrd	sl, [sp, #24]
   1ba20:	orrhi	ip, ip, #1
   1ba24:	cmp	fp, r3
   1ba28:	cmpeq	sl, r2
   1ba2c:	mvnhi	r6, #0
   1ba30:	mvnhi	r7, #0
   1ba34:	umull	sl, fp, r6, r1
   1ba38:	mul	r3, lr, r6
   1ba3c:	strd	sl, [sp, #16]
   1ba40:	mla	r0, r1, r7, r3
   1ba44:	ldrd	sl, [sp, #24]
   1ba48:	ldrd	r2, [sp]
   1ba4c:	cmp	fp, r3
   1ba50:	cmpeq	sl, r2
   1ba54:	orrhi	ip, ip, #1
   1ba58:	cmp	r7, r3
   1ba5c:	ldr	r3, [sp, #20]
   1ba60:	cmpeq	r6, r2
   1ba64:	add	r3, r0, r3
   1ba68:	str	r3, [sp, #20]
   1ba6c:	mvnhi	r2, #0
   1ba70:	mvnhi	r3, #0
   1ba74:	ldrdls	r2, [sp, #16]
   1ba78:	ldrd	sl, [sp]
   1ba7c:	mul	r0, r1, r3
   1ba80:	cmp	r7, fp
   1ba84:	str	r0, [sp, #16]
   1ba88:	cmpeq	r6, sl
   1ba8c:	ldr	r6, [sp, #16]
   1ba90:	umull	r0, r1, r1, r2
   1ba94:	mla	lr, lr, r2, r6
   1ba98:	orrhi	ip, ip, #1
   1ba9c:	cmp	r3, fp
   1baa0:	cmpeq	r2, sl
   1baa4:	add	r1, lr, r1
   1baa8:	bls	1b57c <__assert_fail@plt+0xa480>
   1baac:	b	1b574 <__assert_fail@plt+0xa478>
   1bab0:	ldr	r3, [pc, #344]	; 1bc10 <__assert_fail@plt+0xab14>
   1bab4:	mvn	r2, #0
   1bab8:	cmp	r7, r3
   1babc:	cmpeq	r6, r2
   1bac0:	bhi	1bb14 <__assert_fail@plt+0xaa18>
   1bac4:	lsl	r3, r7, #10
   1bac8:	orr	r3, r3, r6, lsr #22
   1bacc:	lsl	r2, r6, #10
   1bad0:	mov	r6, r2
   1bad4:	mov	r7, r3
   1bad8:	mov	ip, #0
   1badc:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1bae0:	strd	r6, [r8]
   1bae4:	orr	r4, r4, #2
   1bae8:	b	1aec4 <__assert_fail@plt+0x9dc8>
   1baec:	ldrd	r2, [sp]
   1baf0:	cmp	r7, r3
   1baf4:	cmpeq	r6, r2
   1baf8:	bhi	1bb14 <__assert_fail@plt+0xaa18>
   1bafc:	mul	r3, r6, lr
   1bb00:	mov	ip, #0
   1bb04:	mla	r3, r1, r7, r3
   1bb08:	umull	r6, r7, r6, r1
   1bb0c:	add	r7, r3, r7
   1bb10:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1bb14:	mvn	r6, #0
   1bb18:	mvn	r7, #0
   1bb1c:	mov	ip, #1
   1bb20:	b	1b1f4 <__assert_fail@plt+0xa0f8>
   1bb24:	ldrb	r3, [r9, #2]
   1bb28:	mvn	r2, #0
   1bb2c:	mov	r1, #1024	; 0x400
   1bb30:	cmp	r3, #66	; 0x42
   1bb34:	ldr	r3, [pc, #212]	; 1bc10 <__assert_fail@plt+0xab14>
   1bb38:	mov	lr, #0
   1bb3c:	strd	r2, [sp]
   1bb40:	moveq	r3, #3
   1bb44:	streq	r3, [sp, #12]
   1bb48:	movne	r3, #1
   1bb4c:	strne	r3, [sp, #12]
   1bb50:	b	1b0a0 <__assert_fail@plt+0x9fa4>
   1bb54:	add	r3, pc, #172	; 0xac
   1bb58:	ldrd	r2, [r3]
   1bb5c:	mov	r1, #1000	; 0x3e8
   1bb60:	mov	lr, #0
   1bb64:	strd	r2, [sp]
   1bb68:	mov	r3, #2
   1bb6c:	str	r3, [sp, #12]
   1bb70:	b	1b0a0 <__assert_fail@plt+0x9fa4>
   1bb74:	ldr	r3, [pc, #148]	; 1bc10 <__assert_fail@plt+0xab14>
   1bb78:	mvn	r2, #0
   1bb7c:	mov	lr, r0
   1bb80:	strd	r2, [sp]
   1bb84:	mov	r3, #1
   1bb88:	mov	r1, #1024	; 0x400
   1bb8c:	str	r3, [sp, #12]
   1bb90:	b	1b0a0 <__assert_fail@plt+0x9fa4>
   1bb94:	mvn	r2, #0
   1bb98:	mvn	r3, #0
   1bb9c:	mov	sl, r2
   1bba0:	strd	r2, [sp, #24]
   1bba4:	mov	fp, r3
   1bba8:	b	1b9ec <__assert_fail@plt+0xa8f0>
   1bbac:	mvn	r2, #0
   1bbb0:	mvn	r3, #0
   1bbb4:	mov	sl, r2
   1bbb8:	strd	r2, [sp, #16]
   1bbbc:	mov	fp, r3
   1bbc0:	b	1b470 <__assert_fail@plt+0xa374>
   1bbc4:	mvn	r2, #0
   1bbc8:	mvn	r3, #0
   1bbcc:	mov	sl, r2
   1bbd0:	strd	r2, [sp, #24]
   1bbd4:	mov	fp, r3
   1bbd8:	b	1b2c8 <__assert_fail@plt+0xa1cc>
   1bbdc:	mvn	r2, #0
   1bbe0:	mvn	r3, #0
   1bbe4:	mov	sl, r2
   1bbe8:	strd	r2, [sp, #16]
   1bbec:	mov	fp, r3
   1bbf0:	b	1b7cc <__assert_fail@plt+0xa6d0>
   1bbf4:	ldr	r3, [pc, #28]	; 1bc18 <__assert_fail@plt+0xab1c>
   1bbf8:	mov	r2, #85	; 0x55
   1bbfc:	ldr	r1, [pc, #24]	; 1bc1c <__assert_fail@plt+0xab20>
   1bc00:	ldr	r0, [pc, #24]	; 1bc20 <__assert_fail@plt+0xab24>
   1bc04:	bl	110fc <__assert_fail@plt>
   1bc08:	blmi	ff1c5bcc <optarg@@GLIBC_2.4+0xff196a2c>
   1bc0c:	subeq	r8, r1, r7, lsr r9
   1bc10:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   1bc14:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1bc18:			; <UNDEFINED> instruction: 0x0001eeb8
   1bc1c:	andeq	lr, r1, r0, lsl #29
   1bc20:	muleq	r1, r0, lr
   1bc24:	cmp	r1, #0
   1bc28:	cmpne	r0, #0
   1bc2c:	moveq	r1, #1
   1bc30:	moveq	r0, r1
   1bc34:	umull	r2, r3, r0, r1
   1bc38:	adds	r3, r3, #0
   1bc3c:	movne	r3, #1
   1bc40:	cmp	r2, #0
   1bc44:	blt	1bc54 <__assert_fail@plt+0xab58>
   1bc48:	cmp	r3, #0
   1bc4c:	bne	1bc54 <__assert_fail@plt+0xab58>
   1bc50:	b	10e38 <calloc@plt>
   1bc54:	push	{r4, lr}
   1bc58:	bl	11000 <__errno_location@plt>
   1bc5c:	mov	r3, #12
   1bc60:	str	r3, [r0]
   1bc64:	mov	r0, #0
   1bc68:	pop	{r4, pc}
   1bc6c:	cmp	r0, #0
   1bc70:	moveq	r0, #1
   1bc74:	cmp	r0, #0
   1bc78:	blt	1bc80 <__assert_fail@plt+0xab84>
   1bc7c:	b	10f88 <malloc@plt>
   1bc80:	push	{r4, lr}
   1bc84:	bl	11000 <__errno_location@plt>
   1bc88:	mov	r3, #12
   1bc8c:	str	r3, [r0]
   1bc90:	mov	r0, #0
   1bc94:	pop	{r4, pc}
   1bc98:	cmp	r0, #0
   1bc9c:	beq	1bcc0 <__assert_fail@plt+0xabc4>
   1bca0:	cmp	r1, #0
   1bca4:	push	{lr}		; (str lr, [sp, #-4]!)
   1bca8:	sub	sp, sp, #12
   1bcac:	beq	1bcc8 <__assert_fail@plt+0xabcc>
   1bcb0:	blt	1bce0 <__assert_fail@plt+0xabe4>
   1bcb4:	add	sp, sp, #12
   1bcb8:	pop	{lr}		; (ldr lr, [sp], #4)
   1bcbc:	b	10f04 <realloc@plt>
   1bcc0:	mov	r0, r1
   1bcc4:	b	1bc6c <__assert_fail@plt+0xab70>
   1bcc8:	str	r1, [sp, #4]
   1bccc:	bl	14c20 <__assert_fail@plt+0x3b24>
   1bcd0:	ldr	r3, [sp, #4]
   1bcd4:	mov	r0, r3
   1bcd8:	add	sp, sp, #12
   1bcdc:	pop	{pc}		; (ldr pc, [sp], #4)
   1bce0:	bl	11000 <__errno_location@plt>
   1bce4:	mov	r2, #12
   1bce8:	mov	r3, #0
   1bcec:	str	r2, [r0]
   1bcf0:	b	1bcd4 <__assert_fail@plt+0xabd8>
   1bcf4:	push	{r4, r5, r6, lr}
   1bcf8:	mov	r4, r0
   1bcfc:	bl	10f58 <__fpending@plt>
   1bd00:	ldr	r5, [r4]
   1bd04:	and	r5, r5, #32
   1bd08:	mov	r6, r0
   1bd0c:	mov	r0, r4
   1bd10:	bl	1bd70 <__assert_fail@plt+0xac74>
   1bd14:	cmp	r5, #0
   1bd18:	mov	r4, r0
   1bd1c:	bne	1bd3c <__assert_fail@plt+0xac40>
   1bd20:	cmp	r0, #0
   1bd24:	beq	1bd34 <__assert_fail@plt+0xac38>
   1bd28:	cmp	r6, #0
   1bd2c:	beq	1bd58 <__assert_fail@plt+0xac5c>
   1bd30:	mvn	r4, #0
   1bd34:	mov	r0, r4
   1bd38:	pop	{r4, r5, r6, pc}
   1bd3c:	cmp	r0, #0
   1bd40:	bne	1bd30 <__assert_fail@plt+0xac34>
   1bd44:	bl	11000 <__errno_location@plt>
   1bd48:	str	r4, [r0]
   1bd4c:	mvn	r4, #0
   1bd50:	mov	r0, r4
   1bd54:	pop	{r4, r5, r6, pc}
   1bd58:	bl	11000 <__errno_location@plt>
   1bd5c:	ldr	r4, [r0]
   1bd60:	subs	r4, r4, #9
   1bd64:	mvnne	r4, #0
   1bd68:	mov	r0, r4
   1bd6c:	pop	{r4, r5, r6, pc}
   1bd70:	push	{r4, r5, lr}
   1bd74:	sub	sp, sp, #12
   1bd78:	mov	r4, r0
   1bd7c:	bl	11030 <fileno@plt>
   1bd80:	cmp	r0, #0
   1bd84:	mov	r0, r4
   1bd88:	blt	1be04 <__assert_fail@plt+0xad08>
   1bd8c:	bl	10fa0 <__freading@plt>
   1bd90:	cmp	r0, #0
   1bd94:	bne	1bdd0 <__assert_fail@plt+0xacd4>
   1bd98:	mov	r0, r4
   1bd9c:	bl	1be10 <__assert_fail@plt+0xad14>
   1bda0:	cmp	r0, #0
   1bda4:	beq	1be00 <__assert_fail@plt+0xad04>
   1bda8:	bl	11000 <__errno_location@plt>
   1bdac:	mov	r5, r0
   1bdb0:	mov	r0, r4
   1bdb4:	ldr	r4, [r5]
   1bdb8:	bl	11048 <fclose@plt>
   1bdbc:	cmp	r4, #0
   1bdc0:	mvnne	r0, #0
   1bdc4:	strne	r4, [r5]
   1bdc8:	add	sp, sp, #12
   1bdcc:	pop	{r4, r5, pc}
   1bdd0:	mov	r0, r4
   1bdd4:	bl	11030 <fileno@plt>
   1bdd8:	mov	r3, #1
   1bddc:	str	r3, [sp]
   1bde0:	mov	r2, #0
   1bde4:	mov	r3, #0
   1bde8:	bl	10f34 <lseek64@plt>
   1bdec:	mvn	r3, #0
   1bdf0:	mvn	r2, #0
   1bdf4:	cmp	r1, r3
   1bdf8:	cmpeq	r0, r2
   1bdfc:	bne	1bd98 <__assert_fail@plt+0xac9c>
   1be00:	mov	r0, r4
   1be04:	add	sp, sp, #12
   1be08:	pop	{r4, r5, lr}
   1be0c:	b	11048 <fclose@plt>
   1be10:	push	{r4, lr}
   1be14:	subs	r4, r0, #0
   1be18:	sub	sp, sp, #8
   1be1c:	beq	1be38 <__assert_fail@plt+0xad3c>
   1be20:	bl	10fa0 <__freading@plt>
   1be24:	cmp	r0, #0
   1be28:	beq	1be38 <__assert_fail@plt+0xad3c>
   1be2c:	ldr	r3, [r4]
   1be30:	tst	r3, #256	; 0x100
   1be34:	bne	1be48 <__assert_fail@plt+0xad4c>
   1be38:	mov	r0, r4
   1be3c:	add	sp, sp, #8
   1be40:	pop	{r4, lr}
   1be44:	b	10e80 <fflush@plt>
   1be48:	mov	r3, #1
   1be4c:	str	r3, [sp]
   1be50:	mov	r2, #0
   1be54:	mov	r3, #0
   1be58:	mov	r0, r4
   1be5c:	bl	1be70 <__assert_fail@plt+0xad74>
   1be60:	mov	r0, r4
   1be64:	add	sp, sp, #8
   1be68:	pop	{r4, lr}
   1be6c:	b	10e80 <fflush@plt>
   1be70:	push	{r4, r5, r6, r7, r8, lr}
   1be74:	sub	sp, sp, #8
   1be78:	ldmib	r0, {ip, lr}
   1be7c:	mov	r4, r0
   1be80:	ldr	r5, [sp, #32]
   1be84:	cmp	lr, ip
   1be88:	beq	1bea0 <__assert_fail@plt+0xada4>
   1be8c:	str	r5, [sp, #32]
   1be90:	mov	r0, r4
   1be94:	add	sp, sp, #8
   1be98:	pop	{r4, r5, r6, r7, r8, lr}
   1be9c:	b	11054 <fseeko64@plt>
   1bea0:	ldr	lr, [r0, #20]
   1bea4:	ldr	ip, [r0, #16]
   1bea8:	cmp	lr, ip
   1beac:	bne	1be8c <__assert_fail@plt+0xad90>
   1beb0:	ldr	r8, [r0, #36]	; 0x24
   1beb4:	cmp	r8, #0
   1beb8:	bne	1be8c <__assert_fail@plt+0xad90>
   1bebc:	mov	r6, r2
   1bec0:	mov	r7, r3
   1bec4:	bl	11030 <fileno@plt>
   1bec8:	mov	r2, r6
   1becc:	mov	r3, r7
   1bed0:	str	r5, [sp]
   1bed4:	bl	10f34 <lseek64@plt>
   1bed8:	mvn	r3, #0
   1bedc:	mvn	r2, #0
   1bee0:	cmp	r1, r3
   1bee4:	cmpeq	r0, r2
   1bee8:	beq	1bf08 <__assert_fail@plt+0xae0c>
   1beec:	ldr	r3, [r4]
   1bef0:	strd	r0, [r4, #80]	; 0x50
   1bef4:	mov	r0, r8
   1bef8:	bic	r3, r3, #16
   1befc:	str	r3, [r4]
   1bf00:	add	sp, sp, #8
   1bf04:	pop	{r4, r5, r6, r7, r8, pc}
   1bf08:	mvn	r0, #0
   1bf0c:	b	1bf00 <__assert_fail@plt+0xae04>
   1bf10:	push	{r4, lr}
   1bf14:	mov	r0, #14
   1bf18:	bl	11090 <nl_langinfo@plt>
   1bf1c:	cmp	r0, #0
   1bf20:	beq	1bf38 <__assert_fail@plt+0xae3c>
   1bf24:	ldrb	r2, [r0]
   1bf28:	ldr	r3, [pc, #16]	; 1bf40 <__assert_fail@plt+0xae44>
   1bf2c:	cmp	r2, #0
   1bf30:	moveq	r0, r3
   1bf34:	pop	{r4, pc}
   1bf38:	ldr	r0, [pc]	; 1bf40 <__assert_fail@plt+0xae44>
   1bf3c:	pop	{r4, pc}
   1bf40:	andeq	lr, r1, r4, asr #29
   1bf44:	push	{r4, r5, r6, r7, lr}
   1bf48:	subs	r6, r0, #0
   1bf4c:	sub	sp, sp, #12
   1bf50:	addeq	r6, sp, #4
   1bf54:	mov	r0, r6
   1bf58:	mov	r5, r2
   1bf5c:	mov	r7, r1
   1bf60:	bl	10f64 <mbrtowc@plt>
   1bf64:	cmp	r5, #0
   1bf68:	cmnne	r0, #3
   1bf6c:	mov	r4, r0
   1bf70:	bls	1bf8c <__assert_fail@plt+0xae90>
   1bf74:	mov	r0, #0
   1bf78:	bl	1bfe4 <__assert_fail@plt+0xaee8>
   1bf7c:	cmp	r0, #0
   1bf80:	moveq	r4, #1
   1bf84:	ldrbeq	r3, [r7]
   1bf88:	streq	r3, [r6]
   1bf8c:	mov	r0, r4
   1bf90:	add	sp, sp, #12
   1bf94:	pop	{r4, r5, r6, r7, pc}
   1bf98:	push	{r4, r5, r6, lr}
   1bf9c:	subs	r4, r2, #0
   1bfa0:	mov	r6, r0
   1bfa4:	mov	r5, r1
   1bfa8:	beq	1bfd4 <__assert_fail@plt+0xaed8>
   1bfac:	mov	r1, r4
   1bfb0:	mvn	r0, #0
   1bfb4:	bl	1c0d8 <__assert_fail@plt+0xafdc>
   1bfb8:	cmp	r0, r5
   1bfbc:	bcs	1bfd4 <__assert_fail@plt+0xaed8>
   1bfc0:	bl	11000 <__errno_location@plt>
   1bfc4:	mov	r3, #12
   1bfc8:	str	r3, [r0]
   1bfcc:	mov	r0, #0
   1bfd0:	pop	{r4, r5, r6, pc}
   1bfd4:	mul	r1, r5, r4
   1bfd8:	mov	r0, r6
   1bfdc:	pop	{r4, r5, r6, lr}
   1bfe0:	b	1bc98 <__assert_fail@plt+0xab9c>
   1bfe4:	push	{lr}		; (str lr, [sp, #-4]!)
   1bfe8:	sub	sp, sp, #268	; 0x10c
   1bfec:	add	r1, sp, #4
   1bff0:	ldr	r2, [pc, #60]	; 1c034 <__assert_fail@plt+0xaf38>
   1bff4:	bl	1c040 <__assert_fail@plt+0xaf44>
   1bff8:	cmp	r0, #0
   1bffc:	movne	r0, #0
   1c000:	bne	1c02c <__assert_fail@plt+0xaf30>
   1c004:	ldr	r1, [pc, #44]	; 1c038 <__assert_fail@plt+0xaf3c>
   1c008:	add	r0, sp, #4
   1c00c:	bl	10e68 <strcmp@plt>
   1c010:	cmp	r0, #0
   1c014:	beq	1c02c <__assert_fail@plt+0xaf30>
   1c018:	add	r0, sp, #4
   1c01c:	ldr	r1, [pc, #24]	; 1c03c <__assert_fail@plt+0xaf40>
   1c020:	bl	10e68 <strcmp@plt>
   1c024:	adds	r0, r0, #0
   1c028:	movne	r0, #1
   1c02c:	add	sp, sp, #268	; 0x10c
   1c030:	pop	{pc}		; (ldr pc, [sp], #4)
   1c034:	andeq	r0, r0, r1, lsl #2
   1c038:	andeq	lr, r1, ip, asr #29
   1c03c:	ldrdeq	lr, [r1], -r0
   1c040:	push	{r4, r5, r6, lr}
   1c044:	mov	r5, r1
   1c048:	mov	r1, #0
   1c04c:	mov	r4, r2
   1c050:	bl	1106c <setlocale@plt>
   1c054:	subs	r6, r0, #0
   1c058:	beq	1c0b4 <__assert_fail@plt+0xafb8>
   1c05c:	bl	10fe8 <strlen@plt>
   1c060:	cmp	r4, r0
   1c064:	bhi	1c09c <__assert_fail@plt+0xafa0>
   1c068:	cmp	r4, #0
   1c06c:	bne	1c078 <__assert_fail@plt+0xaf7c>
   1c070:	mov	r0, #34	; 0x22
   1c074:	pop	{r4, r5, r6, pc}
   1c078:	sub	r4, r4, #1
   1c07c:	mov	r1, r6
   1c080:	mov	r2, r4
   1c084:	mov	r0, r5
   1c088:	bl	10ebc <memcpy@plt>
   1c08c:	mov	r3, #0
   1c090:	strb	r3, [r5, r4]
   1c094:	mov	r0, #34	; 0x22
   1c098:	pop	{r4, r5, r6, pc}
   1c09c:	add	r2, r0, #1
   1c0a0:	mov	r1, r6
   1c0a4:	mov	r0, r5
   1c0a8:	bl	10ebc <memcpy@plt>
   1c0ac:	mov	r0, #0
   1c0b0:	pop	{r4, r5, r6, pc}
   1c0b4:	cmp	r4, #0
   1c0b8:	beq	1c0c8 <__assert_fail@plt+0xafcc>
   1c0bc:	strb	r6, [r5]
   1c0c0:	mov	r0, #22
   1c0c4:	pop	{r4, r5, r6, pc}
   1c0c8:	mov	r0, #22
   1c0cc:	pop	{r4, r5, r6, pc}
   1c0d0:	mov	r1, #0
   1c0d4:	b	1106c <setlocale@plt>
   1c0d8:	subs	r2, r1, #1
   1c0dc:	bxeq	lr
   1c0e0:	bcc	1c2b8 <__assert_fail@plt+0xb1bc>
   1c0e4:	cmp	r0, r1
   1c0e8:	bls	1c29c <__assert_fail@plt+0xb1a0>
   1c0ec:	tst	r1, r2
   1c0f0:	beq	1c2a8 <__assert_fail@plt+0xb1ac>
   1c0f4:	clz	r3, r0
   1c0f8:	clz	r2, r1
   1c0fc:	sub	r3, r2, r3
   1c100:	rsbs	r3, r3, #31
   1c104:	addne	r3, r3, r3, lsl #1
   1c108:	mov	r2, #0
   1c10c:	addne	pc, pc, r3, lsl #2
   1c110:	nop			; (mov r0, r0)
   1c114:	cmp	r0, r1, lsl #31
   1c118:	adc	r2, r2, r2
   1c11c:	subcs	r0, r0, r1, lsl #31
   1c120:	cmp	r0, r1, lsl #30
   1c124:	adc	r2, r2, r2
   1c128:	subcs	r0, r0, r1, lsl #30
   1c12c:	cmp	r0, r1, lsl #29
   1c130:	adc	r2, r2, r2
   1c134:	subcs	r0, r0, r1, lsl #29
   1c138:	cmp	r0, r1, lsl #28
   1c13c:	adc	r2, r2, r2
   1c140:	subcs	r0, r0, r1, lsl #28
   1c144:	cmp	r0, r1, lsl #27
   1c148:	adc	r2, r2, r2
   1c14c:	subcs	r0, r0, r1, lsl #27
   1c150:	cmp	r0, r1, lsl #26
   1c154:	adc	r2, r2, r2
   1c158:	subcs	r0, r0, r1, lsl #26
   1c15c:	cmp	r0, r1, lsl #25
   1c160:	adc	r2, r2, r2
   1c164:	subcs	r0, r0, r1, lsl #25
   1c168:	cmp	r0, r1, lsl #24
   1c16c:	adc	r2, r2, r2
   1c170:	subcs	r0, r0, r1, lsl #24
   1c174:	cmp	r0, r1, lsl #23
   1c178:	adc	r2, r2, r2
   1c17c:	subcs	r0, r0, r1, lsl #23
   1c180:	cmp	r0, r1, lsl #22
   1c184:	adc	r2, r2, r2
   1c188:	subcs	r0, r0, r1, lsl #22
   1c18c:	cmp	r0, r1, lsl #21
   1c190:	adc	r2, r2, r2
   1c194:	subcs	r0, r0, r1, lsl #21
   1c198:	cmp	r0, r1, lsl #20
   1c19c:	adc	r2, r2, r2
   1c1a0:	subcs	r0, r0, r1, lsl #20
   1c1a4:	cmp	r0, r1, lsl #19
   1c1a8:	adc	r2, r2, r2
   1c1ac:	subcs	r0, r0, r1, lsl #19
   1c1b0:	cmp	r0, r1, lsl #18
   1c1b4:	adc	r2, r2, r2
   1c1b8:	subcs	r0, r0, r1, lsl #18
   1c1bc:	cmp	r0, r1, lsl #17
   1c1c0:	adc	r2, r2, r2
   1c1c4:	subcs	r0, r0, r1, lsl #17
   1c1c8:	cmp	r0, r1, lsl #16
   1c1cc:	adc	r2, r2, r2
   1c1d0:	subcs	r0, r0, r1, lsl #16
   1c1d4:	cmp	r0, r1, lsl #15
   1c1d8:	adc	r2, r2, r2
   1c1dc:	subcs	r0, r0, r1, lsl #15
   1c1e0:	cmp	r0, r1, lsl #14
   1c1e4:	adc	r2, r2, r2
   1c1e8:	subcs	r0, r0, r1, lsl #14
   1c1ec:	cmp	r0, r1, lsl #13
   1c1f0:	adc	r2, r2, r2
   1c1f4:	subcs	r0, r0, r1, lsl #13
   1c1f8:	cmp	r0, r1, lsl #12
   1c1fc:	adc	r2, r2, r2
   1c200:	subcs	r0, r0, r1, lsl #12
   1c204:	cmp	r0, r1, lsl #11
   1c208:	adc	r2, r2, r2
   1c20c:	subcs	r0, r0, r1, lsl #11
   1c210:	cmp	r0, r1, lsl #10
   1c214:	adc	r2, r2, r2
   1c218:	subcs	r0, r0, r1, lsl #10
   1c21c:	cmp	r0, r1, lsl #9
   1c220:	adc	r2, r2, r2
   1c224:	subcs	r0, r0, r1, lsl #9
   1c228:	cmp	r0, r1, lsl #8
   1c22c:	adc	r2, r2, r2
   1c230:	subcs	r0, r0, r1, lsl #8
   1c234:	cmp	r0, r1, lsl #7
   1c238:	adc	r2, r2, r2
   1c23c:	subcs	r0, r0, r1, lsl #7
   1c240:	cmp	r0, r1, lsl #6
   1c244:	adc	r2, r2, r2
   1c248:	subcs	r0, r0, r1, lsl #6
   1c24c:	cmp	r0, r1, lsl #5
   1c250:	adc	r2, r2, r2
   1c254:	subcs	r0, r0, r1, lsl #5
   1c258:	cmp	r0, r1, lsl #4
   1c25c:	adc	r2, r2, r2
   1c260:	subcs	r0, r0, r1, lsl #4
   1c264:	cmp	r0, r1, lsl #3
   1c268:	adc	r2, r2, r2
   1c26c:	subcs	r0, r0, r1, lsl #3
   1c270:	cmp	r0, r1, lsl #2
   1c274:	adc	r2, r2, r2
   1c278:	subcs	r0, r0, r1, lsl #2
   1c27c:	cmp	r0, r1, lsl #1
   1c280:	adc	r2, r2, r2
   1c284:	subcs	r0, r0, r1, lsl #1
   1c288:	cmp	r0, r1
   1c28c:	adc	r2, r2, r2
   1c290:	subcs	r0, r0, r1
   1c294:	mov	r0, r2
   1c298:	bx	lr
   1c29c:	moveq	r0, #1
   1c2a0:	movne	r0, #0
   1c2a4:	bx	lr
   1c2a8:	clz	r2, r1
   1c2ac:	rsb	r2, r2, #31
   1c2b0:	lsr	r0, r0, r2
   1c2b4:	bx	lr
   1c2b8:	cmp	r0, #0
   1c2bc:	mvnne	r0, #0
   1c2c0:	b	1c8dc <__assert_fail@plt+0xb7e0>
   1c2c4:	cmp	r1, #0
   1c2c8:	beq	1c2b8 <__assert_fail@plt+0xb1bc>
   1c2cc:	push	{r0, r1, lr}
   1c2d0:	bl	1c0d8 <__assert_fail@plt+0xafdc>
   1c2d4:	pop	{r1, r2, lr}
   1c2d8:	mul	r3, r2, r0
   1c2dc:	sub	r1, r1, r3
   1c2e0:	bx	lr
   1c2e4:	cmp	r1, #0
   1c2e8:	beq	1c4f4 <__assert_fail@plt+0xb3f8>
   1c2ec:	eor	ip, r0, r1
   1c2f0:	rsbmi	r1, r1, #0
   1c2f4:	subs	r2, r1, #1
   1c2f8:	beq	1c4c0 <__assert_fail@plt+0xb3c4>
   1c2fc:	movs	r3, r0
   1c300:	rsbmi	r3, r0, #0
   1c304:	cmp	r3, r1
   1c308:	bls	1c4cc <__assert_fail@plt+0xb3d0>
   1c30c:	tst	r1, r2
   1c310:	beq	1c4dc <__assert_fail@plt+0xb3e0>
   1c314:	clz	r2, r3
   1c318:	clz	r0, r1
   1c31c:	sub	r2, r0, r2
   1c320:	rsbs	r2, r2, #31
   1c324:	addne	r2, r2, r2, lsl #1
   1c328:	mov	r0, #0
   1c32c:	addne	pc, pc, r2, lsl #2
   1c330:	nop			; (mov r0, r0)
   1c334:	cmp	r3, r1, lsl #31
   1c338:	adc	r0, r0, r0
   1c33c:	subcs	r3, r3, r1, lsl #31
   1c340:	cmp	r3, r1, lsl #30
   1c344:	adc	r0, r0, r0
   1c348:	subcs	r3, r3, r1, lsl #30
   1c34c:	cmp	r3, r1, lsl #29
   1c350:	adc	r0, r0, r0
   1c354:	subcs	r3, r3, r1, lsl #29
   1c358:	cmp	r3, r1, lsl #28
   1c35c:	adc	r0, r0, r0
   1c360:	subcs	r3, r3, r1, lsl #28
   1c364:	cmp	r3, r1, lsl #27
   1c368:	adc	r0, r0, r0
   1c36c:	subcs	r3, r3, r1, lsl #27
   1c370:	cmp	r3, r1, lsl #26
   1c374:	adc	r0, r0, r0
   1c378:	subcs	r3, r3, r1, lsl #26
   1c37c:	cmp	r3, r1, lsl #25
   1c380:	adc	r0, r0, r0
   1c384:	subcs	r3, r3, r1, lsl #25
   1c388:	cmp	r3, r1, lsl #24
   1c38c:	adc	r0, r0, r0
   1c390:	subcs	r3, r3, r1, lsl #24
   1c394:	cmp	r3, r1, lsl #23
   1c398:	adc	r0, r0, r0
   1c39c:	subcs	r3, r3, r1, lsl #23
   1c3a0:	cmp	r3, r1, lsl #22
   1c3a4:	adc	r0, r0, r0
   1c3a8:	subcs	r3, r3, r1, lsl #22
   1c3ac:	cmp	r3, r1, lsl #21
   1c3b0:	adc	r0, r0, r0
   1c3b4:	subcs	r3, r3, r1, lsl #21
   1c3b8:	cmp	r3, r1, lsl #20
   1c3bc:	adc	r0, r0, r0
   1c3c0:	subcs	r3, r3, r1, lsl #20
   1c3c4:	cmp	r3, r1, lsl #19
   1c3c8:	adc	r0, r0, r0
   1c3cc:	subcs	r3, r3, r1, lsl #19
   1c3d0:	cmp	r3, r1, lsl #18
   1c3d4:	adc	r0, r0, r0
   1c3d8:	subcs	r3, r3, r1, lsl #18
   1c3dc:	cmp	r3, r1, lsl #17
   1c3e0:	adc	r0, r0, r0
   1c3e4:	subcs	r3, r3, r1, lsl #17
   1c3e8:	cmp	r3, r1, lsl #16
   1c3ec:	adc	r0, r0, r0
   1c3f0:	subcs	r3, r3, r1, lsl #16
   1c3f4:	cmp	r3, r1, lsl #15
   1c3f8:	adc	r0, r0, r0
   1c3fc:	subcs	r3, r3, r1, lsl #15
   1c400:	cmp	r3, r1, lsl #14
   1c404:	adc	r0, r0, r0
   1c408:	subcs	r3, r3, r1, lsl #14
   1c40c:	cmp	r3, r1, lsl #13
   1c410:	adc	r0, r0, r0
   1c414:	subcs	r3, r3, r1, lsl #13
   1c418:	cmp	r3, r1, lsl #12
   1c41c:	adc	r0, r0, r0
   1c420:	subcs	r3, r3, r1, lsl #12
   1c424:	cmp	r3, r1, lsl #11
   1c428:	adc	r0, r0, r0
   1c42c:	subcs	r3, r3, r1, lsl #11
   1c430:	cmp	r3, r1, lsl #10
   1c434:	adc	r0, r0, r0
   1c438:	subcs	r3, r3, r1, lsl #10
   1c43c:	cmp	r3, r1, lsl #9
   1c440:	adc	r0, r0, r0
   1c444:	subcs	r3, r3, r1, lsl #9
   1c448:	cmp	r3, r1, lsl #8
   1c44c:	adc	r0, r0, r0
   1c450:	subcs	r3, r3, r1, lsl #8
   1c454:	cmp	r3, r1, lsl #7
   1c458:	adc	r0, r0, r0
   1c45c:	subcs	r3, r3, r1, lsl #7
   1c460:	cmp	r3, r1, lsl #6
   1c464:	adc	r0, r0, r0
   1c468:	subcs	r3, r3, r1, lsl #6
   1c46c:	cmp	r3, r1, lsl #5
   1c470:	adc	r0, r0, r0
   1c474:	subcs	r3, r3, r1, lsl #5
   1c478:	cmp	r3, r1, lsl #4
   1c47c:	adc	r0, r0, r0
   1c480:	subcs	r3, r3, r1, lsl #4
   1c484:	cmp	r3, r1, lsl #3
   1c488:	adc	r0, r0, r0
   1c48c:	subcs	r3, r3, r1, lsl #3
   1c490:	cmp	r3, r1, lsl #2
   1c494:	adc	r0, r0, r0
   1c498:	subcs	r3, r3, r1, lsl #2
   1c49c:	cmp	r3, r1, lsl #1
   1c4a0:	adc	r0, r0, r0
   1c4a4:	subcs	r3, r3, r1, lsl #1
   1c4a8:	cmp	r3, r1
   1c4ac:	adc	r0, r0, r0
   1c4b0:	subcs	r3, r3, r1
   1c4b4:	cmp	ip, #0
   1c4b8:	rsbmi	r0, r0, #0
   1c4bc:	bx	lr
   1c4c0:	teq	ip, r0
   1c4c4:	rsbmi	r0, r0, #0
   1c4c8:	bx	lr
   1c4cc:	movcc	r0, #0
   1c4d0:	asreq	r0, ip, #31
   1c4d4:	orreq	r0, r0, #1
   1c4d8:	bx	lr
   1c4dc:	clz	r2, r1
   1c4e0:	rsb	r2, r2, #31
   1c4e4:	cmp	ip, #0
   1c4e8:	lsr	r0, r3, r2
   1c4ec:	rsbmi	r0, r0, #0
   1c4f0:	bx	lr
   1c4f4:	cmp	r0, #0
   1c4f8:	mvngt	r0, #-2147483648	; 0x80000000
   1c4fc:	movlt	r0, #-2147483648	; 0x80000000
   1c500:	b	1c8dc <__assert_fail@plt+0xb7e0>
   1c504:	cmp	r1, #0
   1c508:	beq	1c4f4 <__assert_fail@plt+0xb3f8>
   1c50c:	push	{r0, r1, lr}
   1c510:	bl	1c2ec <__assert_fail@plt+0xb1f0>
   1c514:	pop	{r1, r2, lr}
   1c518:	mul	r3, r2, r0
   1c51c:	sub	r1, r1, r3
   1c520:	bx	lr
   1c524:	eor	r1, r1, #-2147483648	; 0x80000000
   1c528:	b	1c530 <__assert_fail@plt+0xb434>
   1c52c:	eor	r3, r3, #-2147483648	; 0x80000000
   1c530:	push	{r4, r5, lr}
   1c534:	lsl	r4, r1, #1
   1c538:	lsl	r5, r3, #1
   1c53c:	teq	r4, r5
   1c540:	teqeq	r0, r2
   1c544:	orrsne	ip, r4, r0
   1c548:	orrsne	ip, r5, r2
   1c54c:	mvnsne	ip, r4, asr #21
   1c550:	mvnsne	ip, r5, asr #21
   1c554:	beq	1c740 <__assert_fail@plt+0xb644>
   1c558:	lsr	r4, r4, #21
   1c55c:	rsbs	r5, r4, r5, lsr #21
   1c560:	rsblt	r5, r5, #0
   1c564:	ble	1c584 <__assert_fail@plt+0xb488>
   1c568:	add	r4, r4, r5
   1c56c:	eor	r2, r0, r2
   1c570:	eor	r3, r1, r3
   1c574:	eor	r0, r2, r0
   1c578:	eor	r1, r3, r1
   1c57c:	eor	r2, r0, r2
   1c580:	eor	r3, r1, r3
   1c584:	cmp	r5, #54	; 0x36
   1c588:	pophi	{r4, r5, pc}
   1c58c:	tst	r1, #-2147483648	; 0x80000000
   1c590:	lsl	r1, r1, #12
   1c594:	mov	ip, #1048576	; 0x100000
   1c598:	orr	r1, ip, r1, lsr #12
   1c59c:	beq	1c5a8 <__assert_fail@plt+0xb4ac>
   1c5a0:	rsbs	r0, r0, #0
   1c5a4:	rsc	r1, r1, #0
   1c5a8:	tst	r3, #-2147483648	; 0x80000000
   1c5ac:	lsl	r3, r3, #12
   1c5b0:	orr	r3, ip, r3, lsr #12
   1c5b4:	beq	1c5c0 <__assert_fail@plt+0xb4c4>
   1c5b8:	rsbs	r2, r2, #0
   1c5bc:	rsc	r3, r3, #0
   1c5c0:	teq	r4, r5
   1c5c4:	beq	1c728 <__assert_fail@plt+0xb62c>
   1c5c8:	sub	r4, r4, #1
   1c5cc:	rsbs	lr, r5, #32
   1c5d0:	blt	1c5ec <__assert_fail@plt+0xb4f0>
   1c5d4:	lsl	ip, r2, lr
   1c5d8:	adds	r0, r0, r2, lsr r5
   1c5dc:	adc	r1, r1, #0
   1c5e0:	adds	r0, r0, r3, lsl lr
   1c5e4:	adcs	r1, r1, r3, asr r5
   1c5e8:	b	1c608 <__assert_fail@plt+0xb50c>
   1c5ec:	sub	r5, r5, #32
   1c5f0:	add	lr, lr, #32
   1c5f4:	cmp	r2, #1
   1c5f8:	lsl	ip, r3, lr
   1c5fc:	orrcs	ip, ip, #2
   1c600:	adds	r0, r0, r3, asr r5
   1c604:	adcs	r1, r1, r3, asr #31
   1c608:	and	r5, r1, #-2147483648	; 0x80000000
   1c60c:	bpl	1c61c <__assert_fail@plt+0xb520>
   1c610:	rsbs	ip, ip, #0
   1c614:	rscs	r0, r0, #0
   1c618:	rsc	r1, r1, #0
   1c61c:	cmp	r1, #1048576	; 0x100000
   1c620:	bcc	1c660 <__assert_fail@plt+0xb564>
   1c624:	cmp	r1, #2097152	; 0x200000
   1c628:	bcc	1c648 <__assert_fail@plt+0xb54c>
   1c62c:	lsrs	r1, r1, #1
   1c630:	rrxs	r0, r0
   1c634:	rrx	ip, ip
   1c638:	add	r4, r4, #1
   1c63c:	lsl	r2, r4, #21
   1c640:	cmn	r2, #4194304	; 0x400000
   1c644:	bcs	1c7a0 <__assert_fail@plt+0xb6a4>
   1c648:	cmp	ip, #-2147483648	; 0x80000000
   1c64c:	lsrseq	ip, r0, #1
   1c650:	adcs	r0, r0, #0
   1c654:	adc	r1, r1, r4, lsl #20
   1c658:	orr	r1, r1, r5
   1c65c:	pop	{r4, r5, pc}
   1c660:	lsls	ip, ip, #1
   1c664:	adcs	r0, r0, r0
   1c668:	adc	r1, r1, r1
   1c66c:	tst	r1, #1048576	; 0x100000
   1c670:	sub	r4, r4, #1
   1c674:	bne	1c648 <__assert_fail@plt+0xb54c>
   1c678:	teq	r1, #0
   1c67c:	moveq	r1, r0
   1c680:	moveq	r0, #0
   1c684:	clz	r3, r1
   1c688:	addeq	r3, r3, #32
   1c68c:	sub	r3, r3, #11
   1c690:	subs	r2, r3, #32
   1c694:	bge	1c6b8 <__assert_fail@plt+0xb5bc>
   1c698:	adds	r2, r2, #12
   1c69c:	ble	1c6b4 <__assert_fail@plt+0xb5b8>
   1c6a0:	add	ip, r2, #20
   1c6a4:	rsb	r2, r2, #12
   1c6a8:	lsl	r0, r1, ip
   1c6ac:	lsr	r1, r1, r2
   1c6b0:	b	1c6c8 <__assert_fail@plt+0xb5cc>
   1c6b4:	add	r2, r2, #20
   1c6b8:	rsble	ip, r2, #32
   1c6bc:	lsl	r1, r1, r2
   1c6c0:	orrle	r1, r1, r0, lsr ip
   1c6c4:	lslle	r0, r0, r2
   1c6c8:	subs	r4, r4, r3
   1c6cc:	addge	r1, r1, r4, lsl #20
   1c6d0:	orrge	r1, r1, r5
   1c6d4:	popge	{r4, r5, pc}
   1c6d8:	mvn	r4, r4
   1c6dc:	subs	r4, r4, #31
   1c6e0:	bge	1c71c <__assert_fail@plt+0xb620>
   1c6e4:	adds	r4, r4, #12
   1c6e8:	bgt	1c704 <__assert_fail@plt+0xb608>
   1c6ec:	add	r4, r4, #20
   1c6f0:	rsb	r2, r4, #32
   1c6f4:	lsr	r0, r0, r4
   1c6f8:	orr	r0, r0, r1, lsl r2
   1c6fc:	orr	r1, r5, r1, lsr r4
   1c700:	pop	{r4, r5, pc}
   1c704:	rsb	r4, r4, #12
   1c708:	rsb	r2, r4, #32
   1c70c:	lsr	r0, r0, r2
   1c710:	orr	r0, r0, r1, lsl r4
   1c714:	mov	r1, r5
   1c718:	pop	{r4, r5, pc}
   1c71c:	lsr	r0, r1, r4
   1c720:	mov	r1, r5
   1c724:	pop	{r4, r5, pc}
   1c728:	teq	r4, #0
   1c72c:	eor	r3, r3, #1048576	; 0x100000
   1c730:	eoreq	r1, r1, #1048576	; 0x100000
   1c734:	addeq	r4, r4, #1
   1c738:	subne	r5, r5, #1
   1c73c:	b	1c5c8 <__assert_fail@plt+0xb4cc>
   1c740:	mvns	ip, r4, asr #21
   1c744:	mvnsne	ip, r5, asr #21
   1c748:	beq	1c7b0 <__assert_fail@plt+0xb6b4>
   1c74c:	teq	r4, r5
   1c750:	teqeq	r0, r2
   1c754:	beq	1c768 <__assert_fail@plt+0xb66c>
   1c758:	orrs	ip, r4, r0
   1c75c:	moveq	r1, r3
   1c760:	moveq	r0, r2
   1c764:	pop	{r4, r5, pc}
   1c768:	teq	r1, r3
   1c76c:	movne	r1, #0
   1c770:	movne	r0, #0
   1c774:	popne	{r4, r5, pc}
   1c778:	lsrs	ip, r4, #21
   1c77c:	bne	1c790 <__assert_fail@plt+0xb694>
   1c780:	lsls	r0, r0, #1
   1c784:	adcs	r1, r1, r1
   1c788:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1c78c:	pop	{r4, r5, pc}
   1c790:	adds	r4, r4, #4194304	; 0x400000
   1c794:	addcc	r1, r1, #1048576	; 0x100000
   1c798:	popcc	{r4, r5, pc}
   1c79c:	and	r5, r1, #-2147483648	; 0x80000000
   1c7a0:	orr	r1, r5, #2130706432	; 0x7f000000
   1c7a4:	orr	r1, r1, #15728640	; 0xf00000
   1c7a8:	mov	r0, #0
   1c7ac:	pop	{r4, r5, pc}
   1c7b0:	mvns	ip, r4, asr #21
   1c7b4:	movne	r1, r3
   1c7b8:	movne	r0, r2
   1c7bc:	mvnseq	ip, r5, asr #21
   1c7c0:	movne	r3, r1
   1c7c4:	movne	r2, r0
   1c7c8:	orrs	r4, r0, r1, lsl #12
   1c7cc:	orrseq	r5, r2, r3, lsl #12
   1c7d0:	teqeq	r1, r3
   1c7d4:	orrne	r1, r1, #524288	; 0x80000
   1c7d8:	pop	{r4, r5, pc}
   1c7dc:	teq	r0, #0
   1c7e0:	moveq	r1, #0
   1c7e4:	bxeq	lr
   1c7e8:	push	{r4, r5, lr}
   1c7ec:	mov	r4, #1024	; 0x400
   1c7f0:	add	r4, r4, #50	; 0x32
   1c7f4:	mov	r5, #0
   1c7f8:	mov	r1, #0
   1c7fc:	b	1c678 <__assert_fail@plt+0xb57c>
   1c800:	teq	r0, #0
   1c804:	moveq	r1, #0
   1c808:	bxeq	lr
   1c80c:	push	{r4, r5, lr}
   1c810:	mov	r4, #1024	; 0x400
   1c814:	add	r4, r4, #50	; 0x32
   1c818:	ands	r5, r0, #-2147483648	; 0x80000000
   1c81c:	rsbmi	r0, r0, #0
   1c820:	mov	r1, #0
   1c824:	b	1c678 <__assert_fail@plt+0xb57c>
   1c828:	lsls	r2, r0, #1
   1c82c:	asr	r1, r2, #3
   1c830:	rrx	r1, r1
   1c834:	lsl	r0, r2, #28
   1c838:	andsne	r3, r2, #-16777216	; 0xff000000
   1c83c:	teqne	r3, #-16777216	; 0xff000000
   1c840:	eorne	r1, r1, #939524096	; 0x38000000
   1c844:	bxne	lr
   1c848:	teq	r2, #0
   1c84c:	teqne	r3, #-16777216	; 0xff000000
   1c850:	bxeq	lr
   1c854:	push	{r4, r5, lr}
   1c858:	mov	r4, #896	; 0x380
   1c85c:	and	r5, r1, #-2147483648	; 0x80000000
   1c860:	bic	r1, r1, #-2147483648	; 0x80000000
   1c864:	b	1c678 <__assert_fail@plt+0xb57c>
   1c868:	orrs	r2, r0, r1
   1c86c:	bxeq	lr
   1c870:	push	{r4, r5, lr}
   1c874:	mov	r5, #0
   1c878:	b	1c898 <__assert_fail@plt+0xb79c>
   1c87c:	orrs	r2, r0, r1
   1c880:	bxeq	lr
   1c884:	push	{r4, r5, lr}
   1c888:	ands	r5, r1, #-2147483648	; 0x80000000
   1c88c:	bpl	1c898 <__assert_fail@plt+0xb79c>
   1c890:	rsbs	r0, r0, #0
   1c894:	rsc	r1, r1, #0
   1c898:	mov	r4, #1024	; 0x400
   1c89c:	add	r4, r4, #50	; 0x32
   1c8a0:	lsrs	ip, r1, #22
   1c8a4:	beq	1c61c <__assert_fail@plt+0xb520>
   1c8a8:	mov	r2, #3
   1c8ac:	lsrs	ip, ip, #3
   1c8b0:	addne	r2, r2, #3
   1c8b4:	lsrs	ip, ip, #3
   1c8b8:	addne	r2, r2, #3
   1c8bc:	add	r2, r2, ip, lsr #3
   1c8c0:	rsb	r3, r2, #32
   1c8c4:	lsl	ip, r0, r3
   1c8c8:	lsr	r0, r0, r2
   1c8cc:	orr	r0, r0, r1, lsl r3
   1c8d0:	lsr	r1, r1, r2
   1c8d4:	add	r4, r4, r2
   1c8d8:	b	1c61c <__assert_fail@plt+0xb520>
   1c8dc:	push	{r1, lr}
   1c8e0:	mov	r0, #8
   1c8e4:	bl	10e50 <raise@plt>
   1c8e8:	pop	{r1, pc}
   1c8ec:	vmov	d7, r0, r1
   1c8f0:	vcmpe.f64	d7, #0.0
   1c8f4:	vmrs	APSR_nzcv, fpscr
   1c8f8:	bmi	1c900 <__assert_fail@plt+0xb804>
   1c8fc:	b	1c918 <__assert_fail@plt+0xb81c>
   1c900:	push	{r4, lr}
   1c904:	eor	r1, r1, #-2147483648	; 0x80000000
   1c908:	bl	1c918 <__assert_fail@plt+0xb81c>
   1c90c:	rsbs	r0, r0, #0
   1c910:	rsc	r1, r1, #0
   1c914:	pop	{r4, pc}
   1c918:	vmov	d7, r0, r1
   1c91c:	vldr	d6, [pc, #44]	; 1c950 <__assert_fail@plt+0xb854>
   1c920:	vldr	d5, [pc, #48]	; 1c958 <__assert_fail@plt+0xb85c>
   1c924:	mov	r0, #0
   1c928:	vmul.f64	d6, d7, d6
   1c92c:	vcvt.u32.f64	s12, d6
   1c930:	vcvt.f64.u32	d4, s12
   1c934:	vmov	r1, s12
   1c938:	vmls.f64	d7, d4, d5
   1c93c:	vcvt.u32.f64	s14, d7
   1c940:	vmov	r3, s14
   1c944:	orr	r0, r0, r3
   1c948:	bx	lr
   1c94c:	nop			; (mov r0, r0)
   1c950:	andeq	r0, r0, r0
   1c954:	ldclcc	0, cr0, [r0]
   1c958:	andeq	r0, r0, r0
   1c95c:	mvnsmi	r0, r0
   1c960:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c964:	mov	r7, r0
   1c968:	ldr	r6, [pc, #72]	; 1c9b8 <__assert_fail@plt+0xb8bc>
   1c96c:	ldr	r5, [pc, #72]	; 1c9bc <__assert_fail@plt+0xb8c0>
   1c970:	add	r6, pc, r6
   1c974:	add	r5, pc, r5
   1c978:	sub	r6, r6, r5
   1c97c:	mov	r8, r1
   1c980:	mov	r9, r2
   1c984:	bl	10e18 <calloc@plt-0x20>
   1c988:	asrs	r6, r6, #2
   1c98c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c990:	mov	r4, #0
   1c994:	add	r4, r4, #1
   1c998:	ldr	r3, [r5], #4
   1c99c:	mov	r2, r9
   1c9a0:	mov	r1, r8
   1c9a4:	mov	r0, r7
   1c9a8:	blx	r3
   1c9ac:	cmp	r6, r4
   1c9b0:	bne	1c994 <__assert_fail@plt+0xb898>
   1c9b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c9b8:	muleq	r1, r8, r5
   1c9bc:	muleq	r1, r0, r5
   1c9c0:	bx	lr
   1c9c4:	ldr	r3, [pc, #12]	; 1c9d8 <__assert_fail@plt+0xb8dc>
   1c9c8:	mov	r1, #0
   1c9cc:	add	r3, pc, r3
   1c9d0:	ldr	r2, [r3]
   1c9d4:	b	1100c <__cxa_atexit@plt>
   1c9d8:	andeq	r2, r1, r0, lsr r7

Disassembly of section .fini:

0001c9dc <.fini>:
   1c9dc:	push	{r3, lr}
   1c9e0:	pop	{r3, pc}
