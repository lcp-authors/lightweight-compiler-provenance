
../repos/coreutils/src/factor:     file format elf32-littlearm


Disassembly of section .init:

00011644 <.init>:
   11644:	push	{r3, lr}
   11648:	bl	11ac0 <__assert_fail@plt+0x48>
   1164c:	pop	{r3, pc}

Disassembly of section .plt:

00011650 <calloc@plt-0x14>:
   11650:	push	{lr}		; (str lr, [sp, #-4]!)
   11654:	ldr	lr, [pc, #4]	; 11660 <calloc@plt-0x4>
   11658:	add	lr, pc, lr
   1165c:	ldr	pc, [lr, #8]!
   11660:	andeq	pc, r1, r0, lsr #19

00011664 <calloc@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #126976	; 0x1f000
   1166c:	ldr	pc, [ip, #2464]!	; 0x9a0

00011670 <fputs_unlocked@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #126976	; 0x1f000
   11678:	ldr	pc, [ip, #2456]!	; 0x998

0001167c <raise@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #126976	; 0x1f000
   11684:	ldr	pc, [ip, #2448]!	; 0x990

00011688 <__gmpz_scan1@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #126976	; 0x1f000
   11690:	ldr	pc, [ip, #2440]!	; 0x988

00011694 <iconv_close@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #126976	; 0x1f000
   1169c:	ldr	pc, [ip, #2432]!	; 0x980

000116a0 <iconv@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #126976	; 0x1f000
   116a8:	ldr	pc, [ip, #2424]!	; 0x978

000116ac <strcmp@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #126976	; 0x1f000
   116b4:	ldr	pc, [ip, #2416]!	; 0x970

000116b8 <fflush@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #126976	; 0x1f000
   116c0:	ldr	pc, [ip, #2408]!	; 0x968

000116c4 <__gmpz_sub_ui@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #126976	; 0x1f000
   116cc:	ldr	pc, [ip, #2400]!	; 0x960

000116d0 <__gmpz_clears@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #126976	; 0x1f000
   116d8:	ldr	pc, [ip, #2392]!	; 0x958

000116dc <wcwidth@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #126976	; 0x1f000
   116e4:	ldr	pc, [ip, #2384]!	; 0x950

000116e8 <memmove@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #126976	; 0x1f000
   116f0:	ldr	pc, [ip, #2376]!	; 0x948

000116f4 <__gmpz_set_ui@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #126976	; 0x1f000
   116fc:	ldr	pc, [ip, #2368]!	; 0x940

00011700 <free@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #126976	; 0x1f000
   11708:	ldr	pc, [ip, #2360]!	; 0x938

0001170c <_exit@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #126976	; 0x1f000
   11714:	ldr	pc, [ip, #2352]!	; 0x930

00011718 <memcpy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #126976	; 0x1f000
   11720:	ldr	pc, [ip, #2344]!	; 0x928

00011724 <__gmpz_sub@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #126976	; 0x1f000
   1172c:	ldr	pc, [ip, #2336]!	; 0x920

00011730 <mbsinit@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #126976	; 0x1f000
   11738:	ldr	pc, [ip, #2328]!	; 0x918

0001173c <memcmp@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #126976	; 0x1f000
   11744:	ldr	pc, [ip, #2320]!	; 0x910

00011748 <getc_unlocked@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #126976	; 0x1f000
   11750:	ldr	pc, [ip, #2312]!	; 0x908

00011754 <dcgettext@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #126976	; 0x1f000
   1175c:	ldr	pc, [ip, #2304]!	; 0x900

00011760 <__gmpz_powm@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #126976	; 0x1f000
   11768:	ldr	pc, [ip, #2296]!	; 0x8f8

0001176c <strdup@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #126976	; 0x1f000
   11774:	ldr	pc, [ip, #2288]!	; 0x8f0

00011778 <__gmpz_divexact@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #126976	; 0x1f000
   11780:	ldr	pc, [ip, #2280]!	; 0x8e8

00011784 <__gmpz_inits@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #126976	; 0x1f000
   1178c:	ldr	pc, [ip, #2272]!	; 0x8e0

00011790 <__gmpz_set@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #126976	; 0x1f000
   11798:	ldr	pc, [ip, #2264]!	; 0x8d8

0001179c <realloc@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #126976	; 0x1f000
   117a4:	ldr	pc, [ip, #2256]!	; 0x8d0

000117a8 <__gmpz_mul@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #126976	; 0x1f000
   117b0:	ldr	pc, [ip, #2248]!	; 0x8c8

000117b4 <__gmpz_tdiv_q_ui@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #126976	; 0x1f000
   117bc:	ldr	pc, [ip, #2240]!	; 0x8c0

000117c0 <textdomain@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #126976	; 0x1f000
   117c8:	ldr	pc, [ip, #2232]!	; 0x8b8

000117cc <iswcntrl@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #126976	; 0x1f000
   117d4:	ldr	pc, [ip, #2224]!	; 0x8b0

000117d8 <__gmpz_out_str@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #126976	; 0x1f000
   117e0:	ldr	pc, [ip, #2216]!	; 0x8a8

000117e4 <fflush_unlocked@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #126976	; 0x1f000
   117ec:	ldr	pc, [ip, #2208]!	; 0x8a0

000117f0 <iswprint@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #126976	; 0x1f000
   117f8:	ldr	pc, [ip, #2200]!	; 0x898

000117fc <fwrite@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #126976	; 0x1f000
   11804:	ldr	pc, [ip, #2192]!	; 0x890

00011808 <lseek64@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #126976	; 0x1f000
   11810:	ldr	pc, [ip, #2184]!	; 0x888

00011814 <__gmpz_fdiv_q_2exp@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #126976	; 0x1f000
   1181c:	ldr	pc, [ip, #2176]!	; 0x880

00011820 <__ctype_get_mb_cur_max@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #126976	; 0x1f000
   11828:	ldr	pc, [ip, #2168]!	; 0x878

0001182c <__fpending@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #126976	; 0x1f000
   11834:	ldr	pc, [ip, #2160]!	; 0x870

00011838 <ferror_unlocked@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #126976	; 0x1f000
   11840:	ldr	pc, [ip, #2152]!	; 0x868

00011844 <mbrtowc@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #126976	; 0x1f000
   1184c:	ldr	pc, [ip, #2144]!	; 0x860

00011850 <error@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #126976	; 0x1f000
   11858:	ldr	pc, [ip, #2136]!	; 0x858

0001185c <malloc@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #126976	; 0x1f000
   11864:	ldr	pc, [ip, #2128]!	; 0x850

00011868 <iconv_open@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #126976	; 0x1f000
   11870:	ldr	pc, [ip, #2120]!	; 0x848

00011874 <__libc_start_main@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #126976	; 0x1f000
   1187c:	ldr	pc, [ip, #2112]!	; 0x840

00011880 <__freading@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #126976	; 0x1f000
   11888:	ldr	pc, [ip, #2104]!	; 0x838

0001188c <__gmpz_init_set_si@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #126976	; 0x1f000
   11894:	ldr	pc, [ip, #2096]!	; 0x830

00011898 <__gmpz_add_ui@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #126976	; 0x1f000
   118a0:	ldr	pc, [ip, #2088]!	; 0x828

000118a4 <__gmon_start__@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #126976	; 0x1f000
   118ac:	ldr	pc, [ip, #2080]!	; 0x820

000118b0 <getopt_long@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #126976	; 0x1f000
   118b8:	ldr	pc, [ip, #2072]!	; 0x818

000118bc <__ctype_b_loc@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #126976	; 0x1f000
   118c4:	ldr	pc, [ip, #2064]!	; 0x810

000118c8 <exit@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #126976	; 0x1f000
   118d0:	ldr	pc, [ip, #2056]!	; 0x808

000118d4 <iswspace@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #126976	; 0x1f000
   118dc:	ldr	pc, [ip, #2048]!	; 0x800

000118e0 <strlen@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #126976	; 0x1f000
   118e8:	ldr	pc, [ip, #2040]!	; 0x7f8

000118ec <strchr@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #126976	; 0x1f000
   118f4:	ldr	pc, [ip, #2032]!	; 0x7f0

000118f8 <__gmpz_divisible_ui_p@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #126976	; 0x1f000
   11900:	ldr	pc, [ip, #2024]!	; 0x7e8

00011904 <__gmpz_clear@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #126976	; 0x1f000
   1190c:	ldr	pc, [ip, #2016]!	; 0x7e0

00011910 <__errno_location@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #126976	; 0x1f000
   11918:	ldr	pc, [ip, #2008]!	; 0x7d8

0001191c <iswalnum@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #126976	; 0x1f000
   11924:	ldr	pc, [ip, #2000]!	; 0x7d0

00011928 <__sprintf_chk@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #126976	; 0x1f000
   11930:	ldr	pc, [ip, #1992]!	; 0x7c8

00011934 <__cxa_atexit@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #126976	; 0x1f000
   1193c:	ldr	pc, [ip, #1984]!	; 0x7c0

00011940 <memset@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #126976	; 0x1f000
   11948:	ldr	pc, [ip, #1976]!	; 0x7b8

0001194c <__gmpz_tdiv_q_2exp@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #126976	; 0x1f000
   11954:	ldr	pc, [ip, #1968]!	; 0x7b0

00011958 <__printf_chk@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #126976	; 0x1f000
   11960:	ldr	pc, [ip, #1960]!	; 0x7a8

00011964 <write@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #126976	; 0x1f000
   1196c:	ldr	pc, [ip, #1952]!	; 0x7a0

00011970 <fileno@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #126976	; 0x1f000
   11978:	ldr	pc, [ip, #1944]!	; 0x798

0001197c <__fprintf_chk@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #126976	; 0x1f000
   11984:	ldr	pc, [ip, #1936]!	; 0x790

00011988 <memchr@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #126976	; 0x1f000
   11990:	ldr	pc, [ip, #1928]!	; 0x788

00011994 <fclose@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #126976	; 0x1f000
   1199c:	ldr	pc, [ip, #1920]!	; 0x780

000119a0 <strnlen@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #126976	; 0x1f000
   119a8:	ldr	pc, [ip, #1912]!	; 0x778

000119ac <fseeko64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #126976	; 0x1f000
   119b4:	ldr	pc, [ip, #1904]!	; 0x770

000119b8 <__gmpz_mod@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #126976	; 0x1f000
   119c0:	ldr	pc, [ip, #1896]!	; 0x768

000119c4 <__gmpz_init_set_ui@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #126976	; 0x1f000
   119cc:	ldr	pc, [ip, #1888]!	; 0x760

000119d0 <__gmpz_cmp@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #126976	; 0x1f000
   119d8:	ldr	pc, [ip, #1880]!	; 0x758

000119dc <setlocale@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #126976	; 0x1f000
   119e4:	ldr	pc, [ip, #1872]!	; 0x750

000119e8 <strrchr@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #126976	; 0x1f000
   119f0:	ldr	pc, [ip, #1864]!	; 0x748

000119f4 <nl_langinfo@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #126976	; 0x1f000
   119fc:	ldr	pc, [ip, #1856]!	; 0x740

00011a00 <__gmpz_gcd@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #126976	; 0x1f000
   11a08:	ldr	pc, [ip, #1848]!	; 0x738

00011a0c <__gmpz_init_set_str@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #126976	; 0x1f000
   11a14:	ldr	pc, [ip, #1840]!	; 0x730

00011a18 <bindtextdomain@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #126976	; 0x1f000
   11a20:	ldr	pc, [ip, #1832]!	; 0x728

00011a24 <__gmpz_cmp_ui@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #126976	; 0x1f000
   11a2c:	ldr	pc, [ip, #1824]!	; 0x720

00011a30 <__gmpz_init@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #126976	; 0x1f000
   11a38:	ldr	pc, [ip, #1816]!	; 0x718

00011a3c <__gmpz_powm_ui@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #126976	; 0x1f000
   11a44:	ldr	pc, [ip, #1808]!	; 0x710

00011a48 <isatty@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #126976	; 0x1f000
   11a50:	ldr	pc, [ip, #1800]!	; 0x708

00011a54 <strncmp@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #126976	; 0x1f000
   11a5c:	ldr	pc, [ip, #1792]!	; 0x700

00011a60 <abort@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #126976	; 0x1f000
   11a68:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a6c <putchar_unlocked@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #126976	; 0x1f000
   11a74:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a78 <__assert_fail@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #126976	; 0x1f000
   11a80:	ldr	pc, [ip, #1768]!	; 0x6e8

Disassembly of section .text:

00011a84 <.text>:
   11a84:	mov	fp, #0
   11a88:	mov	lr, #0
   11a8c:	pop	{r1}		; (ldr r1, [sp], #4)
   11a90:	mov	r2, sp
   11a94:	push	{r2}		; (str r2, [sp, #-4]!)
   11a98:	push	{r0}		; (str r0, [sp, #-4]!)
   11a9c:	ldr	ip, [pc, #16]	; 11ab4 <__assert_fail@plt+0x3c>
   11aa0:	push	{ip}		; (str ip, [sp, #-4]!)
   11aa4:	ldr	r0, [pc, #12]	; 11ab8 <__assert_fail@plt+0x40>
   11aa8:	ldr	r3, [pc, #12]	; 11abc <__assert_fail@plt+0x44>
   11aac:	bl	11874 <__libc_start_main@plt>
   11ab0:	bl	11a60 <abort@plt>
   11ab4:	andeq	ip, r1, ip, lsl #9
   11ab8:	andeq	r1, r1, r8, ror #27
   11abc:	andeq	ip, r1, ip, lsr #8
   11ac0:	ldr	r3, [pc, #20]	; 11adc <__assert_fail@plt+0x64>
   11ac4:	ldr	r2, [pc, #20]	; 11ae0 <__assert_fail@plt+0x68>
   11ac8:	add	r3, pc, r3
   11acc:	ldr	r2, [r3, r2]
   11ad0:	cmp	r2, #0
   11ad4:	bxeq	lr
   11ad8:	b	118a4 <__gmon_start__@plt>
   11adc:	andeq	pc, r1, r0, lsr r5	; <UNPREDICTABLE>
   11ae0:	andeq	r0, r0, ip, ror #2
   11ae4:	ldr	r0, [pc, #24]	; 11b04 <__assert_fail@plt+0x8c>
   11ae8:	ldr	r3, [pc, #24]	; 11b08 <__assert_fail@plt+0x90>
   11aec:	cmp	r3, r0
   11af0:	bxeq	lr
   11af4:	ldr	r3, [pc, #16]	; 11b0c <__assert_fail@plt+0x94>
   11af8:	cmp	r3, #0
   11afc:	bxeq	lr
   11b00:	bx	r3
   11b04:	andeq	r1, r3, r8, asr #3
   11b08:	andeq	r1, r3, r8, asr #3
   11b0c:	andeq	r0, r0, r0
   11b10:	ldr	r0, [pc, #36]	; 11b3c <__assert_fail@plt+0xc4>
   11b14:	ldr	r1, [pc, #36]	; 11b40 <__assert_fail@plt+0xc8>
   11b18:	sub	r1, r1, r0
   11b1c:	asr	r1, r1, #2
   11b20:	add	r1, r1, r1, lsr #31
   11b24:	asrs	r1, r1, #1
   11b28:	bxeq	lr
   11b2c:	ldr	r3, [pc, #16]	; 11b44 <__assert_fail@plt+0xcc>
   11b30:	cmp	r3, #0
   11b34:	bxeq	lr
   11b38:	bx	r3
   11b3c:	andeq	r1, r3, r8, asr #3
   11b40:	andeq	r1, r3, r8, asr #3
   11b44:	andeq	r0, r0, r0
   11b48:	push	{r4, lr}
   11b4c:	ldr	r4, [pc, #24]	; 11b6c <__assert_fail@plt+0xf4>
   11b50:	ldrb	r3, [r4]
   11b54:	cmp	r3, #0
   11b58:	popne	{r4, pc}
   11b5c:	bl	11ae4 <__assert_fail@plt+0x6c>
   11b60:	mov	r3, #1
   11b64:	strb	r3, [r4]
   11b68:	pop	{r4, pc}
   11b6c:	andeq	r1, r3, r8, ror #3
   11b70:	b	11b10 <__assert_fail@plt+0x98>
   11b74:	push	{fp, lr}
   11b78:	mov	fp, sp
   11b7c:	mov	r4, r0
   11b80:	cmp	r0, #0
   11b84:	bne	11c20 <__assert_fail@plt+0x1a8>
   11b88:	movw	r1, #50395	; 0xc4db
   11b8c:	movt	r1, #1
   11b90:	mov	r0, #0
   11b94:	mov	r2, #5
   11b98:	bl	11754 <dcgettext@plt>
   11b9c:	mov	r1, r0
   11ba0:	movw	r0, #4608	; 0x1200
   11ba4:	movt	r0, #3
   11ba8:	ldr	r2, [r0]
   11bac:	mov	r0, #1
   11bb0:	mov	r3, r2
   11bb4:	bl	11958 <__printf_chk@plt>
   11bb8:	movw	r1, #50435	; 0xc503
   11bbc:	movt	r1, #1
   11bc0:	mov	r0, #0
   11bc4:	mov	r2, #5
   11bc8:	bl	11754 <dcgettext@plt>
   11bcc:	movw	r5, #4580	; 0x11e4
   11bd0:	movt	r5, #3
   11bd4:	ldr	r1, [r5]
   11bd8:	bl	11670 <fputs_unlocked@plt>
   11bdc:	movw	r1, #50570	; 0xc58a
   11be0:	movt	r1, #1
   11be4:	mov	r0, #0
   11be8:	mov	r2, #5
   11bec:	bl	11754 <dcgettext@plt>
   11bf0:	ldr	r1, [r5]
   11bf4:	bl	11670 <fputs_unlocked@plt>
   11bf8:	movw	r1, #50615	; 0xc5b7
   11bfc:	movt	r1, #1
   11c00:	mov	r0, #0
   11c04:	mov	r2, #5
   11c08:	bl	11754 <dcgettext@plt>
   11c0c:	ldr	r1, [r5]
   11c10:	bl	11670 <fputs_unlocked@plt>
   11c14:	bl	11c64 <__assert_fail@plt+0x1ec>
   11c18:	mov	r0, r4
   11c1c:	bl	118c8 <exit@plt>
   11c20:	movw	r0, #4568	; 0x11d8
   11c24:	movt	r0, #3
   11c28:	ldr	r5, [r0]
   11c2c:	movw	r1, #50356	; 0xc4b4
   11c30:	movt	r1, #1
   11c34:	mov	r0, #0
   11c38:	mov	r2, #5
   11c3c:	bl	11754 <dcgettext@plt>
   11c40:	mov	r2, r0
   11c44:	movw	r0, #4608	; 0x1200
   11c48:	movt	r0, #3
   11c4c:	ldr	r3, [r0]
   11c50:	mov	r0, r5
   11c54:	mov	r1, #1
   11c58:	bl	1197c <__fprintf_chk@plt>
   11c5c:	mov	r0, r4
   11c60:	bl	118c8 <exit@plt>
   11c64:	push	{r4, r5, fp, lr}
   11c68:	add	fp, sp, #8
   11c6c:	sub	sp, sp, #56	; 0x38
   11c70:	movw	r0, #52064	; 0xcb60
   11c74:	movt	r0, #1
   11c78:	add	r1, r0, #32
   11c7c:	mov	r5, sp
   11c80:	mov	r2, #48	; 0x30
   11c84:	vld1.64	{d16-d17}, [r1]
   11c88:	add	r1, r5, #32
   11c8c:	add	r3, r0, #16
   11c90:	vld1.64	{d18-d19}, [r0], r2
   11c94:	vld1.64	{d20-d21}, [r3]
   11c98:	vldr	d22, [r0]
   11c9c:	vst1.64	{d16-d17}, [r1]
   11ca0:	add	r0, r5, #16
   11ca4:	vst1.64	{d20-d21}, [r0]
   11ca8:	mov	r0, r5
   11cac:	vst1.64	{d18-d19}, [r0], r2
   11cb0:	vstr	d22, [r0]
   11cb4:	ldr	r1, [sp]
   11cb8:	cmp	r1, #0
   11cbc:	beq	11ce4 <__assert_fail@plt+0x26c>
   11cc0:	mov	r5, sp
   11cc4:	movw	r4, #50669	; 0xc5ed
   11cc8:	movt	r4, #1
   11ccc:	mov	r0, r4
   11cd0:	bl	116ac <strcmp@plt>
   11cd4:	cmp	r0, #0
   11cd8:	ldrne	r1, [r5, #8]!
   11cdc:	cmpne	r1, #0
   11ce0:	bne	11ccc <__assert_fail@plt+0x254>
   11ce4:	ldr	r4, [r5, #4]
   11ce8:	movw	r1, #50884	; 0xc6c4
   11cec:	movt	r1, #1
   11cf0:	mov	r0, #0
   11cf4:	mov	r2, #5
   11cf8:	bl	11754 <dcgettext@plt>
   11cfc:	mov	r1, r0
   11d00:	movw	r2, #50700	; 0xc60c
   11d04:	movt	r2, #1
   11d08:	movw	r3, #50907	; 0xc6db
   11d0c:	movt	r3, #1
   11d10:	mov	r0, #1
   11d14:	bl	11958 <__printf_chk@plt>
   11d18:	movw	r5, #50669	; 0xc5ed
   11d1c:	movt	r5, #1
   11d20:	cmp	r4, #0
   11d24:	moveq	r4, r5
   11d28:	mov	r0, #5
   11d2c:	mov	r1, #0
   11d30:	bl	119dc <setlocale@plt>
   11d34:	cmp	r0, #0
   11d38:	beq	11d78 <__assert_fail@plt+0x300>
   11d3c:	movw	r1, #50947	; 0xc703
   11d40:	movt	r1, #1
   11d44:	mov	r2, #3
   11d48:	bl	11a54 <strncmp@plt>
   11d4c:	cmp	r0, #0
   11d50:	beq	11d78 <__assert_fail@plt+0x300>
   11d54:	movw	r1, #50951	; 0xc707
   11d58:	movt	r1, #1
   11d5c:	mov	r0, #0
   11d60:	mov	r2, #5
   11d64:	bl	11754 <dcgettext@plt>
   11d68:	movw	r1, #4580	; 0x11e4
   11d6c:	movt	r1, #3
   11d70:	ldr	r1, [r1]
   11d74:	bl	11670 <fputs_unlocked@plt>
   11d78:	movw	r1, #51022	; 0xc74e
   11d7c:	movt	r1, #1
   11d80:	mov	r0, #0
   11d84:	mov	r2, #5
   11d88:	bl	11754 <dcgettext@plt>
   11d8c:	mov	r1, r0
   11d90:	movw	r2, #50907	; 0xc6db
   11d94:	movt	r2, #1
   11d98:	mov	r0, #1
   11d9c:	mov	r3, r5
   11da0:	bl	11958 <__printf_chk@plt>
   11da4:	movw	r1, #51049	; 0xc769
   11da8:	movt	r1, #1
   11dac:	mov	r0, #0
   11db0:	mov	r2, #5
   11db4:	bl	11754 <dcgettext@plt>
   11db8:	mov	r1, r0
   11dbc:	movw	r0, #50817	; 0xc681
   11dc0:	movt	r0, #1
   11dc4:	movw	r3, #50569	; 0xc589
   11dc8:	movt	r3, #1
   11dcc:	cmp	r4, r5
   11dd0:	moveq	r3, r0
   11dd4:	mov	r0, #1
   11dd8:	mov	r2, r4
   11ddc:	bl	11958 <__printf_chk@plt>
   11de0:	sub	sp, fp, #8
   11de4:	pop	{r4, r5, fp, pc}
   11de8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dec:	add	fp, sp, #28
   11df0:	sub	sp, sp, #20
   11df4:	mov	r4, r1
   11df8:	mov	r5, r0
   11dfc:	ldr	r0, [r1]
   11e00:	bl	172fc <__assert_fail@plt+0x5884>
   11e04:	movw	r8, #50569	; 0xc589
   11e08:	movt	r8, #1
   11e0c:	mov	r0, #6
   11e10:	mov	r1, r8
   11e14:	bl	119dc <setlocale@plt>
   11e18:	movw	r7, #50704	; 0xc610
   11e1c:	movt	r7, #1
   11e20:	movw	r1, #50676	; 0xc5f4
   11e24:	movt	r1, #1
   11e28:	mov	r0, r7
   11e2c:	bl	11a18 <bindtextdomain@plt>
   11e30:	mov	r0, r7
   11e34:	bl	117c0 <textdomain@plt>
   11e38:	bl	11f94 <__assert_fail@plt+0x51c>
   11e3c:	movw	r0, #28956	; 0x711c
   11e40:	movt	r0, #1
   11e44:	bl	1c490 <__assert_fail@plt+0xaa18>
   11e48:	movw	r0, #8140	; 0x1fcc
   11e4c:	movt	r0, #1
   11e50:	bl	1c490 <__assert_fail@plt+0xaa18>
   11e54:	mov	r6, #0
   11e58:	movw	r7, #52000	; 0xcb20
   11e5c:	movt	r7, #1
   11e60:	movw	r9, #4588	; 0x11ec
   11e64:	movt	r9, #3
   11e68:	mov	sl, #1
   11e6c:	b	11e74 <__assert_fail@plt+0x3fc>
   11e70:	strb	sl, [r9]
   11e74:	str	r6, [sp]
   11e78:	mov	r0, r5
   11e7c:	mov	r1, r4
   11e80:	mov	r2, r8
   11e84:	mov	r3, r7
   11e88:	bl	118b0 <getopt_long@plt>
   11e8c:	cmp	r0, #255	; 0xff
   11e90:	ble	11ea0 <__assert_fail@plt+0x428>
   11e94:	cmp	r0, #256	; 0x100
   11e98:	beq	11e70 <__assert_fail@plt+0x3f8>
   11e9c:	b	11f8c <__assert_fail@plt+0x514>
   11ea0:	cmn	r0, #1
   11ea4:	bne	11ef4 <__assert_fail@plt+0x47c>
   11ea8:	movw	r0, #4560	; 0x11d0
   11eac:	movt	r0, #3
   11eb0:	ldr	r0, [r0]
   11eb4:	cmp	r0, r5
   11eb8:	bge	11ee0 <__assert_fail@plt+0x468>
   11ebc:	sub	r5, r5, r0
   11ec0:	add	r6, r4, r0, lsl #2
   11ec4:	mov	r4, #1
   11ec8:	ldr	r0, [r6], #4
   11ecc:	bl	120d8 <__assert_fail@plt+0x660>
   11ed0:	and	r4, r4, r0
   11ed4:	subs	r5, r5, #1
   11ed8:	bne	11ec8 <__assert_fail@plt+0x450>
   11edc:	b	11ee8 <__assert_fail@plt+0x470>
   11ee0:	bl	12040 <__assert_fail@plt+0x5c8>
   11ee4:	mov	r4, r0
   11ee8:	eor	r0, r4, #1
   11eec:	sub	sp, fp, #28
   11ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ef4:	cmn	r0, #3
   11ef8:	bne	11f7c <__assert_fail@plt+0x504>
   11efc:	movw	r0, #4476	; 0x117c
   11f00:	movt	r0, #3
   11f04:	ldr	r4, [r0]
   11f08:	movw	r0, #4580	; 0x11e4
   11f0c:	movt	r0, #3
   11f10:	ldr	r5, [r0]
   11f14:	movw	r0, #50725	; 0xc625
   11f18:	movt	r0, #1
   11f1c:	movw	r1, #50743	; 0xc637
   11f20:	movt	r1, #1
   11f24:	bl	17714 <__assert_fail@plt+0x5c9c>
   11f28:	mov	r6, r0
   11f2c:	movw	r0, #50762	; 0xc64a
   11f30:	movt	r0, #1
   11f34:	movw	r1, #50775	; 0xc657
   11f38:	movt	r1, #1
   11f3c:	bl	17714 <__assert_fail@plt+0x5c9c>
   11f40:	mov	r1, #0
   11f44:	movw	r2, #50714	; 0xc61a
   11f48:	movt	r2, #1
   11f4c:	stm	sp, {r2, r6}
   11f50:	str	r0, [sp, #8]
   11f54:	str	r1, [sp, #12]
   11f58:	movw	r1, #50669	; 0xc5ed
   11f5c:	movt	r1, #1
   11f60:	movw	r2, #50700	; 0xc60c
   11f64:	movt	r2, #1
   11f68:	mov	r0, r5
   11f6c:	mov	r3, r4
   11f70:	bl	19eac <__assert_fail@plt+0x8434>
   11f74:	mov	r0, #0
   11f78:	bl	118c8 <exit@plt>
   11f7c:	cmn	r0, #2
   11f80:	bne	11f8c <__assert_fail@plt+0x514>
   11f84:	mov	r0, #0
   11f88:	bl	11b74 <__assert_fail@plt+0xfc>
   11f8c:	mov	r0, #1
   11f90:	bl	11b74 <__assert_fail@plt+0xfc>
   11f94:	push	{r4, sl, fp, lr}
   11f98:	add	fp, sp, #8
   11f9c:	movw	r4, #4592	; 0x11f0
   11fa0:	movt	r4, #3
   11fa4:	ldr	r0, [r4]
   11fa8:	cmp	r0, #0
   11fac:	popne	{r4, sl, fp, pc}
   11fb0:	mov	r0, #1024	; 0x400
   11fb4:	bl	19fb4 <__assert_fail@plt+0x853c>
   11fb8:	str	r0, [r4]
   11fbc:	movw	r1, #4596	; 0x11f4
   11fc0:	movt	r1, #3
   11fc4:	str	r0, [r1]
   11fc8:	pop	{r4, sl, fp, pc}
   11fcc:	push	{r4, r5, r6, sl, fp, lr}
   11fd0:	add	fp, sp, #16
   11fd4:	movw	r5, #4592	; 0x11f0
   11fd8:	movt	r5, #3
   11fdc:	ldr	r1, [r5]
   11fe0:	movw	r6, #4596	; 0x11f4
   11fe4:	movt	r6, #3
   11fe8:	ldr	r0, [r6]
   11fec:	sub	r4, r0, r1
   11ff0:	mov	r0, #1
   11ff4:	mov	r2, r4
   11ff8:	bl	1722c <__assert_fail@plt+0x57b4>
   11ffc:	cmp	r0, r4
   12000:	ldreq	r0, [r5]
   12004:	streq	r0, [r6]
   12008:	popeq	{r4, r5, r6, sl, fp, pc}
   1200c:	bl	11910 <__errno_location@plt>
   12010:	ldr	r4, [r0]
   12014:	movw	r1, #51100	; 0xc79c
   12018:	movt	r1, #1
   1201c:	mov	r0, #0
   12020:	mov	r2, #5
   12024:	bl	11754 <dcgettext@plt>
   12028:	mov	r3, r0
   1202c:	movw	r2, #64417	; 0xfba1
   12030:	movt	r2, #1
   12034:	mov	r0, #1
   12038:	mov	r1, r4
   1203c:	bl	11850 <error@plt>
   12040:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12044:	add	fp, sp, #24
   12048:	sub	sp, sp, #8
   1204c:	mov	r4, sp
   12050:	mov	r0, r4
   12054:	bl	194e8 <__assert_fail@plt+0x7a70>
   12058:	movw	r8, #4576	; 0x11e0
   1205c:	movt	r8, #3
   12060:	ldr	r0, [r8]
   12064:	movw	r1, #51132	; 0xc7bc
   12068:	movt	r1, #1
   1206c:	mov	r2, #3
   12070:	mov	r3, r4
   12074:	bl	194f8 <__assert_fail@plt+0x7a80>
   12078:	mov	r1, r0
   1207c:	ldr	r0, [sp, #4]
   12080:	mov	r4, #1
   12084:	cmn	r1, #1
   12088:	beq	120c8 <__assert_fail@plt+0x650>
   1208c:	movw	r5, #51132	; 0xc7bc
   12090:	movt	r5, #1
   12094:	mov	r6, sp
   12098:	bl	120d8 <__assert_fail@plt+0x660>
   1209c:	mov	r7, r0
   120a0:	ldr	r0, [r8]
   120a4:	mov	r1, r5
   120a8:	mov	r2, #3
   120ac:	mov	r3, r6
   120b0:	bl	194f8 <__assert_fail@plt+0x7a80>
   120b4:	mov	r1, r0
   120b8:	and	r4, r4, r7
   120bc:	ldr	r0, [sp, #4]
   120c0:	cmn	r1, #1
   120c4:	bne	12098 <__assert_fail@plt+0x620>
   120c8:	bl	17204 <__assert_fail@plt+0x578c>
   120cc:	mov	r0, r4
   120d0:	sub	sp, fp, #24
   120d4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   120d8:	push	{r4, r5, r6, sl, fp, lr}
   120dc:	add	fp, sp, #16
   120e0:	sub	sp, sp, #40	; 0x28
   120e4:	mov	r5, r0
   120e8:	sub	r4, r0, #1
   120ec:	ldrb	r0, [r4, #1]!
   120f0:	cmp	r0, #32
   120f4:	beq	120ec <__assert_fail@plt+0x674>
   120f8:	cmp	r0, #43	; 0x2b
   120fc:	addeq	r4, r4, #1
   12100:	sub	r0, fp, #24
   12104:	add	r1, sp, #24
   12108:	mov	r2, r4
   1210c:	bl	122c0 <__assert_fail@plt+0x848>
   12110:	cmp	r0, #1
   12114:	beq	1217c <__assert_fail@plt+0x704>
   12118:	cmp	r0, #0
   1211c:	bne	1227c <__assert_fail@plt+0x804>
   12120:	ldr	r5, [fp, #-20]	; 0xffffffec
   12124:	cmp	r5, #0
   12128:	blt	1217c <__assert_fail@plt+0x704>
   1212c:	ldr	r4, [fp, #-24]	; 0xffffffe8
   12130:	movw	r0, #4588	; 0x11ec
   12134:	movt	r0, #3
   12138:	ldrb	r0, [r0]
   1213c:	cmp	r0, #1
   12140:	bne	12160 <__assert_fail@plt+0x6e8>
   12144:	movw	r0, #4568	; 0x11d8
   12148:	movt	r0, #3
   1214c:	ldr	r0, [r0]
   12150:	movw	r2, #51136	; 0xc7c0
   12154:	movt	r2, #1
   12158:	mov	r1, #1
   1215c:	bl	1197c <__fprintf_chk@plt>
   12160:	ldr	r2, [sp, #24]
   12164:	ldr	r3, [sp, #28]
   12168:	mov	r0, r4
   1216c:	mov	r1, r5
   12170:	bl	123f8 <__assert_fail@plt+0x980>
   12174:	mov	r4, #1
   12178:	b	122b4 <__assert_fail@plt+0x83c>
   1217c:	movw	r0, #4588	; 0x11ec
   12180:	movt	r0, #3
   12184:	ldrb	r0, [r0]
   12188:	cmp	r0, #1
   1218c:	bne	121ac <__assert_fail@plt+0x734>
   12190:	movw	r0, #4568	; 0x11d8
   12194:	movt	r0, #3
   12198:	ldr	r0, [r0]
   1219c:	movw	r2, #51208	; 0xc808
   121a0:	movt	r2, #1
   121a4:	mov	r1, #1
   121a8:	bl	1197c <__fprintf_chk@plt>
   121ac:	add	r5, sp, #12
   121b0:	mov	r0, r5
   121b4:	mov	r1, r4
   121b8:	mov	r2, #10
   121bc:	bl	11a0c <__gmpz_init_set_str@plt>
   121c0:	movw	r4, #4580	; 0x11e4
   121c4:	movt	r4, #3
   121c8:	ldr	r0, [r4]
   121cc:	mov	r1, #10
   121d0:	mov	r2, r5
   121d4:	bl	117d8 <__gmpz_out_str@plt>
   121d8:	mov	r0, #58	; 0x3a
   121dc:	bl	11a6c <putchar_unlocked@plt>
   121e0:	mov	r1, sp
   121e4:	mov	r0, r5
   121e8:	bl	124dc <__assert_fail@plt+0xa64>
   121ec:	ldr	r0, [sp, #8]
   121f0:	cmp	r0, #0
   121f4:	beq	12254 <__assert_fail@plt+0x7dc>
   121f8:	mov	r5, #0
   121fc:	ldr	r0, [sp, #4]
   12200:	ldr	r0, [r0, r5, lsl #2]
   12204:	cmp	r0, #0
   12208:	beq	12244 <__assert_fail@plt+0x7cc>
   1220c:	mov	r6, #0
   12210:	mov	r0, #32
   12214:	bl	11a6c <putchar_unlocked@plt>
   12218:	add	r0, r5, r5, lsl #1
   1221c:	ldr	r1, [sp]
   12220:	add	r2, r1, r0, lsl #2
   12224:	ldr	r0, [r4]
   12228:	mov	r1, #10
   1222c:	bl	117d8 <__gmpz_out_str@plt>
   12230:	ldr	r0, [sp, #4]
   12234:	ldr	r0, [r0, r5, lsl #2]
   12238:	add	r6, r6, #1
   1223c:	cmp	r6, r0
   12240:	bcc	12210 <__assert_fail@plt+0x798>
   12244:	add	r5, r5, #1
   12248:	ldr	r0, [sp, #8]
   1224c:	cmp	r5, r0
   12250:	bcc	121fc <__assert_fail@plt+0x784>
   12254:	mov	r0, sp
   12258:	bl	12588 <__assert_fail@plt+0xb10>
   1225c:	add	r0, sp, #12
   12260:	bl	11904 <__gmpz_clear@plt>
   12264:	mov	r0, #10
   12268:	bl	11a6c <putchar_unlocked@plt>
   1226c:	ldr	r0, [r4]
   12270:	bl	117e4 <fflush_unlocked@plt>
   12274:	mov	r4, #1
   12278:	b	122b4 <__assert_fail@plt+0x83c>
   1227c:	mov	r4, #0
   12280:	movw	r1, #51173	; 0xc7e5
   12284:	movt	r1, #1
   12288:	mov	r0, #0
   1228c:	mov	r2, #5
   12290:	bl	11754 <dcgettext@plt>
   12294:	mov	r6, r0
   12298:	mov	r0, r5
   1229c:	bl	190d4 <__assert_fail@plt+0x765c>
   122a0:	mov	r3, r0
   122a4:	mov	r0, #0
   122a8:	mov	r1, #0
   122ac:	mov	r2, r6
   122b0:	bl	11850 <error@plt>
   122b4:	mov	r0, r4
   122b8:	sub	sp, fp, #16
   122bc:	pop	{r4, r5, r6, sl, fp, pc}
   122c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122c4:	add	fp, sp, #28
   122c8:	push	{r0, r1}
   122cc:	ldrb	r7, [r2]
   122d0:	cmp	r7, #0
   122d4:	beq	12300 <__assert_fail@plt+0x888>
   122d8:	add	r3, r2, #1
   122dc:	mvn	r6, #47	; 0x2f
   122e0:	uxtab	r7, r6, r7
   122e4:	cmp	r7, #10
   122e8:	bcs	12318 <__assert_fail@plt+0x8a0>
   122ec:	ldrb	r7, [r3], #1
   122f0:	cmp	r7, #0
   122f4:	bne	122e0 <__assert_fail@plt+0x868>
   122f8:	mov	sl, #0
   122fc:	b	1231c <__assert_fail@plt+0x8a4>
   12300:	mov	r8, #0
   12304:	mov	sl, #4
   12308:	mov	r9, #0
   1230c:	mov	r6, #0
   12310:	mov	r7, #0
   12314:	b	123dc <__assert_fail@plt+0x964>
   12318:	mov	sl, #4
   1231c:	mov	r8, #0
   12320:	cmp	sl, #0
   12324:	mov	r9, #0
   12328:	mov	r6, #0
   1232c:	mov	r7, #0
   12330:	bne	123dc <__assert_fail@plt+0x964>
   12334:	mov	lr, #10
   12338:	mov	r8, #0
   1233c:	mov	r9, #0
   12340:	mov	r6, #0
   12344:	mov	r7, #0
   12348:	mov	sl, #1
   1234c:	ldrb	r3, [r2], #1
   12350:	cmp	r3, #0
   12354:	beq	123d8 <__assert_fail@plt+0x960>
   12358:	movw	r0, #39321	; 0x9999
   1235c:	movt	r0, #39321	; 0x9999
   12360:	subs	ip, r0, r8
   12364:	movw	r0, #39321	; 0x9999
   12368:	movt	r0, #6553	; 0x1999
   1236c:	sbcs	r1, r0, r9
   12370:	bcc	123dc <__assert_fail@plt+0x964>
   12374:	lsl	r1, r7, #1
   12378:	orr	r1, r1, r6, lsr #31
   1237c:	umull	r0, r4, r6, lr
   12380:	add	r5, r7, r7, lsl #2
   12384:	add	r5, r4, r5, lsl #1
   12388:	subs	r6, r0, r6, lsl #1
   1238c:	sbcs	r1, r5, r1
   12390:	mov	r1, #0
   12394:	movwcc	r1, #1
   12398:	lsr	r6, r7, #29
   1239c:	add	r4, r6, r7, lsr #31
   123a0:	sub	r3, r3, #48	; 0x30
   123a4:	adds	r6, r0, r3
   123a8:	adcs	r7, r5, #0
   123ac:	adc	r0, r4, r1
   123b0:	umull	r1, r3, r8, lr
   123b4:	add	r5, r9, r9, lsl #2
   123b8:	add	r3, r3, r5, lsl #1
   123bc:	adds	r8, r1, r0
   123c0:	adcs	r9, r3, #0
   123c4:	mov	r0, #0
   123c8:	adc	r0, r0, #0
   123cc:	cmp	r0, #1
   123d0:	bne	1234c <__assert_fail@plt+0x8d4>
   123d4:	b	123dc <__assert_fail@plt+0x964>
   123d8:	mov	sl, #0
   123dc:	ldr	r0, [sp]
   123e0:	strd	r8, [r0]
   123e4:	ldr	r0, [sp, #4]
   123e8:	strd	r6, [r0]
   123ec:	mov	r0, sl
   123f0:	sub	sp, fp, #28
   123f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   123fc:	add	fp, sp, #24
   12400:	sub	sp, sp, #272	; 0x110
   12404:	mov	r8, r3
   12408:	mov	r5, r2
   1240c:	mov	r6, r1
   12410:	mov	r7, r0
   12414:	bl	125dc <__assert_fail@plt+0xb64>
   12418:	mov	r0, #58	; 0x3a
   1241c:	bl	12724 <__assert_fail@plt+0xcac>
   12420:	add	r9, sp, #8
   12424:	str	r9, [sp]
   12428:	mov	r0, r7
   1242c:	mov	r1, r6
   12430:	mov	r2, r5
   12434:	mov	r3, r8
   12438:	bl	1280c <__assert_fail@plt+0xd94>
   1243c:	ldrb	r0, [sp, #258]	; 0x102
   12440:	cmp	r0, #0
   12444:	beq	124a0 <__assert_fail@plt+0xa28>
   12448:	mov	r5, #0
   1244c:	add	r6, r9, r5
   12450:	ldrb	r0, [r6, #224]!	; 0xe0
   12454:	cmp	r0, #0
   12458:	beq	12490 <__assert_fail@plt+0xa18>
   1245c:	add	r0, r9, r5, lsl #3
   12460:	add	r7, r0, #16
   12464:	mov	r4, #0
   12468:	mov	r0, #32
   1246c:	bl	12724 <__assert_fail@plt+0xcac>
   12470:	ldrd	r2, [r7]
   12474:	mov	r0, #0
   12478:	mov	r1, #0
   1247c:	bl	125dc <__assert_fail@plt+0xb64>
   12480:	add	r4, r4, #1
   12484:	ldrb	r0, [r6]
   12488:	cmp	r4, r0
   1248c:	bcc	12468 <__assert_fail@plt+0x9f0>
   12490:	add	r5, r5, #1
   12494:	ldrb	r0, [sp, #258]	; 0x102
   12498:	cmp	r5, r0
   1249c:	bcc	1244c <__assert_fail@plt+0x9d4>
   124a0:	ldr	r0, [sp, #16]
   124a4:	ldr	r1, [sp, #20]
   124a8:	orrs	r0, r0, r1
   124ac:	beq	124cc <__assert_fail@plt+0xa54>
   124b0:	add	r4, r9, #8
   124b4:	mov	r0, #32
   124b8:	bl	12724 <__assert_fail@plt+0xcac>
   124bc:	ldrd	r0, [r4]
   124c0:	ldr	r2, [sp, #8]
   124c4:	ldr	r3, [sp, #12]
   124c8:	bl	125dc <__assert_fail@plt+0xb64>
   124cc:	mov	r0, #10
   124d0:	bl	12724 <__assert_fail@plt+0xcac>
   124d4:	sub	sp, fp, #24
   124d8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   124dc:	push	{r4, r5, fp, lr}
   124e0:	add	fp, sp, #8
   124e4:	mov	r4, r1
   124e8:	mov	r5, r0
   124ec:	mov	r0, r1
   124f0:	bl	16798 <__assert_fail@plt+0x4d20>
   124f4:	ldr	r0, [r5, #4]
   124f8:	cmp	r0, #0
   124fc:	beq	12570 <__assert_fail@plt+0xaf8>
   12500:	mov	r0, r5
   12504:	mov	r1, r4
   12508:	bl	167ac <__assert_fail@plt+0x4d34>
   1250c:	mov	r0, r5
   12510:	mov	r1, #1
   12514:	bl	11a24 <__gmpz_cmp_ui@plt>
   12518:	cmp	r0, #0
   1251c:	popeq	{r4, r5, fp, pc}
   12520:	movw	r0, #4588	; 0x11ec
   12524:	movt	r0, #3
   12528:	ldrb	r0, [r0]
   1252c:	cmp	r0, #1
   12530:	bne	12550 <__assert_fail@plt+0xad8>
   12534:	movw	r0, #4568	; 0x11d8
   12538:	movt	r0, #3
   1253c:	ldr	r0, [r0]
   12540:	movw	r2, #51891	; 0xcab3
   12544:	movt	r2, #1
   12548:	mov	r1, #1
   1254c:	bl	1197c <__fprintf_chk@plt>
   12550:	mov	r0, r5
   12554:	bl	168b8 <__assert_fail@plt+0x4e40>
   12558:	cmp	r0, #0
   1255c:	beq	12574 <__assert_fail@plt+0xafc>
   12560:	mov	r0, r4
   12564:	mov	r1, r5
   12568:	pop	{r4, r5, fp, lr}
   1256c:	b	16ae0 <__assert_fail@plt+0x5068>
   12570:	pop	{r4, r5, fp, pc}
   12574:	mov	r0, r5
   12578:	mov	r1, #1
   1257c:	mov	r2, r4
   12580:	pop	{r4, r5, fp, lr}
   12584:	b	16c48 <__assert_fail@plt+0x51d0>
   12588:	push	{r4, r5, r6, sl, fp, lr}
   1258c:	add	fp, sp, #16
   12590:	mov	r4, r0
   12594:	ldr	r0, [r0, #8]
   12598:	cmp	r0, #0
   1259c:	beq	125c8 <__assert_fail@plt+0xb50>
   125a0:	mov	r5, #0
   125a4:	mov	r6, #0
   125a8:	ldr	r0, [r4]
   125ac:	add	r0, r0, r5
   125b0:	bl	11904 <__gmpz_clear@plt>
   125b4:	add	r5, r5, #12
   125b8:	add	r6, r6, #1
   125bc:	ldr	r0, [r4, #8]
   125c0:	cmp	r6, r0
   125c4:	bcc	125a8 <__assert_fail@plt+0xb30>
   125c8:	ldr	r0, [r4]
   125cc:	bl	17204 <__assert_fail@plt+0x578c>
   125d0:	ldr	r0, [r4, #4]
   125d4:	pop	{r4, r5, r6, sl, fp, lr}
   125d8:	b	17204 <__assert_fail@plt+0x578c>
   125dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e0:	add	fp, sp, #28
   125e4:	sub	sp, sp, #12
   125e8:	mov	r8, r3
   125ec:	mov	r5, r0
   125f0:	orrs	r0, r0, r1
   125f4:	beq	1270c <__assert_fail@plt+0xc94>
   125f8:	mov	r4, r1
   125fc:	str	r2, [sp, #8]
   12600:	movw	r7, #51712	; 0xca00
   12604:	movt	r7, #15258	; 0x3b9a
   12608:	mov	r9, #0
   1260c:	mov	r0, r5
   12610:	mov	r2, r7
   12614:	mov	r3, #0
   12618:	bl	1c2b8 <__assert_fail@plt+0xa840>
   1261c:	str	r0, [sp, #4]
   12620:	umull	r2, r3, r0, r7
   12624:	str	r1, [sp]
   12628:	mla	r3, r1, r7, r3
   1262c:	subs	sl, r5, r2
   12630:	sbc	ip, r4, r3
   12634:	mvn	r4, #63	; 0x3f
   12638:	mov	r3, #0
   1263c:	mov	r1, #0
   12640:	mov	lr, #0
   12644:	mov	r6, #0
   12648:	lsl	r3, r3, #1
   1264c:	orr	r3, r3, r9, lsr #31
   12650:	lsrs	r2, lr, #1
   12654:	rrx	r1, r1
   12658:	orr	lr, r2, r7, lsl #31
   1265c:	lsrs	r6, r6, #1
   12660:	rrx	r7, r7
   12664:	lsl	r9, r9, #1
   12668:	subs	r2, r7, sl
   1266c:	sbcs	r2, r6, ip
   12670:	bcc	1269c <__assert_fail@plt+0xc24>
   12674:	mov	r0, r8
   12678:	eor	r2, sl, r7
   1267c:	eor	r8, ip, r6
   12680:	orrs	r2, r2, r8
   12684:	bne	126e0 <__assert_fail@plt+0xc68>
   12688:	ldr	r2, [sp, #8]
   1268c:	subs	r2, r2, r1
   12690:	mov	r8, r0
   12694:	sbcs	r2, r0, lr
   12698:	bcc	126d4 <__assert_fail@plt+0xc5c>
   1269c:	subs	r2, sl, r7
   126a0:	sbc	r5, ip, r6
   126a4:	subs	sl, r2, #1
   126a8:	sbc	ip, r5, #0
   126ac:	ldr	r0, [sp, #8]
   126b0:	subs	r0, r0, r1
   126b4:	str	r0, [sp, #8]
   126b8:	sbcs	r8, r8, lr
   126bc:	mov	r0, #0
   126c0:	movwcc	r0, #1
   126c4:	cmp	r0, #0
   126c8:	moveq	sl, r2
   126cc:	moveq	ip, r5
   126d0:	orr	r9, r9, #1
   126d4:	adds	r4, r4, #1
   126d8:	bne	12648 <__assert_fail@plt+0xbd0>
   126dc:	b	126ec <__assert_fail@plt+0xc74>
   126e0:	mov	r8, r0
   126e4:	adds	r4, r4, #1
   126e8:	bne	12648 <__assert_fail@plt+0xbd0>
   126ec:	ldr	r0, [sp, #4]
   126f0:	ldr	r1, [sp]
   126f4:	mov	r2, r9
   126f8:	bl	125dc <__assert_fail@plt+0xb64>
   126fc:	ldr	r0, [sp, #8]
   12700:	mov	r1, r8
   12704:	mov	r2, #9
   12708:	b	12718 <__assert_fail@plt+0xca0>
   1270c:	mov	r0, r2
   12710:	mov	r1, r8
   12714:	mov	r2, #0
   12718:	sub	sp, fp, #28
   1271c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12720:	b	12908 <__assert_fail@plt+0xe90>
   12724:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12728:	add	fp, sp, #24
   1272c:	movw	r7, #4596	; 0x11f4
   12730:	movt	r7, #3
   12734:	ldr	r1, [r7]
   12738:	add	r2, r1, #1
   1273c:	str	r2, [r7]
   12740:	strb	r0, [r1]
   12744:	cmp	r0, #10
   12748:	bne	12808 <__assert_fail@plt+0xd90>
   1274c:	movw	r8, #4592	; 0x11f0
   12750:	movt	r8, #3
   12754:	ldr	r4, [r8]
   12758:	ldr	r5, [r7]
   1275c:	movw	r6, #4472	; 0x1178
   12760:	movt	r6, #3
   12764:	ldr	r0, [r6]
   12768:	cmn	r0, #1
   1276c:	beq	12780 <__assert_fail@plt+0xd08>
   12770:	cmp	r0, #0
   12774:	beq	127b4 <__assert_fail@plt+0xd3c>
   12778:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1277c:	b	11fcc <__assert_fail@plt+0x554>
   12780:	mov	r0, #0
   12784:	bl	11a48 <isatty@plt>
   12788:	mov	r1, r0
   1278c:	mov	r0, #1
   12790:	cmp	r1, #0
   12794:	bne	127a8 <__assert_fail@plt+0xd30>
   12798:	mov	r0, #1
   1279c:	bl	11a48 <isatty@plt>
   127a0:	cmp	r0, #0
   127a4:	movwne	r0, #1
   127a8:	str	r0, [r6]
   127ac:	cmp	r0, #0
   127b0:	bne	12778 <__assert_fail@plt+0xd00>
   127b4:	sub	r0, r5, r4
   127b8:	cmp	r0, #512	; 0x200
   127bc:	popcc	{r4, r5, r6, r7, r8, sl, fp, pc}
   127c0:	ldr	r0, [r8]
   127c4:	movw	r1, #513	; 0x201
   127c8:	add	r4, r0, r1
   127cc:	ldr	r5, [r7]
   127d0:	ldrb	r0, [r4, #-2]
   127d4:	sub	r4, r4, #1
   127d8:	cmp	r0, #10
   127dc:	bne	127d0 <__assert_fail@plt+0xd58>
   127e0:	str	r4, [r7]
   127e4:	bl	11fcc <__assert_fail@plt+0x554>
   127e8:	sub	r5, r5, r4
   127ec:	ldr	r6, [r8]
   127f0:	mov	r0, r6
   127f4:	mov	r1, r4
   127f8:	mov	r2, r5
   127fc:	bl	11718 <memcpy@plt>
   12800:	add	r0, r6, r5
   12804:	str	r0, [r7]
   12808:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1280c:	push	{r4, r5, r6, sl, fp, lr}
   12810:	add	fp, sp, #16
   12814:	sub	sp, sp, #24
   12818:	mov	r6, r0
   1281c:	str	r1, [sp, #20]
   12820:	str	r0, [sp, #16]
   12824:	ldr	r4, [fp, #8]
   12828:	mov	r0, #0
   1282c:	str	r0, [r4, #8]
   12830:	str	r0, [r4, #12]
   12834:	strb	r0, [r4, #250]	; 0xfa
   12838:	orrs	r0, r6, r1
   1283c:	bne	1284c <__assert_fail@plt+0xdd4>
   12840:	subs	r0, r2, #2
   12844:	sbcs	r0, r3, #0
   12848:	bcc	12884 <__assert_fail@plt+0xe0c>
   1284c:	stm	sp, {r2, r3, r4}
   12850:	add	r0, sp, #16
   12854:	mov	r2, r6
   12858:	mov	r3, r1
   1285c:	bl	12988 <__assert_fail@plt+0xf10>
   12860:	mov	r6, r0
   12864:	mov	r5, r1
   12868:	ldr	r0, [sp, #16]
   1286c:	ldr	r1, [sp, #20]
   12870:	rsbs	r2, r6, #1
   12874:	rscs	r2, r5, #0
   12878:	bcc	1288c <__assert_fail@plt+0xe14>
   1287c:	orrs	r2, r0, r1
   12880:	bne	1288c <__assert_fail@plt+0xe14>
   12884:	sub	sp, fp, #16
   12888:	pop	{r4, r5, r6, sl, fp, pc}
   1288c:	mov	r2, r6
   12890:	mov	r3, r5
   12894:	bl	131f4 <__assert_fail@plt+0x177c>
   12898:	ldr	r2, [sp, #16]
   1289c:	ldr	r3, [sp, #20]
   128a0:	cmp	r0, #0
   128a4:	beq	128c0 <__assert_fail@plt+0xe48>
   128a8:	str	r6, [sp]
   128ac:	str	r5, [sp, #4]
   128b0:	mov	r0, r4
   128b4:	bl	13bf4 <__assert_fail@plt+0x217c>
   128b8:	sub	sp, fp, #16
   128bc:	pop	{r4, r5, r6, sl, fp, pc}
   128c0:	orrs	r0, r2, r3
   128c4:	beq	128ec <__assert_fail@plt+0xe74>
   128c8:	mov	r0, #1
   128cc:	stm	sp, {r0, r4}
   128d0:	mov	r0, r2
   128d4:	mov	r1, r3
   128d8:	mov	r2, r6
   128dc:	mov	r3, r5
   128e0:	bl	14298 <__assert_fail@plt+0x2820>
   128e4:	sub	sp, fp, #16
   128e8:	pop	{r4, r5, r6, sl, fp, pc}
   128ec:	mov	r0, r6
   128f0:	mov	r1, r5
   128f4:	mov	r2, #1
   128f8:	mov	r3, r4
   128fc:	bl	13c70 <__assert_fail@plt+0x21f8>
   12900:	sub	sp, fp, #16
   12904:	pop	{r4, r5, r6, sl, fp, pc}
   12908:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1290c:	add	fp, sp, #24
   12910:	sub	sp, sp, #24
   12914:	mov	r7, r2
   12918:	add	r8, sp, #3
   1291c:	mov	r2, r8
   12920:	bl	172a0 <__assert_fail@plt+0x5828>
   12924:	mov	r5, r0
   12928:	sub	r0, r8, r0
   1292c:	add	r4, r0, #20
   12930:	movw	r9, #4596	; 0x11f4
   12934:	movt	r9, #3
   12938:	ldr	r6, [r9]
   1293c:	cmp	r4, r7
   12940:	bcs	12968 <__assert_fail@plt+0xef0>
   12944:	add	r0, r5, r7
   12948:	sub	r0, r0, #20
   1294c:	sub	r7, r0, r8
   12950:	mov	r0, r6
   12954:	mov	r1, #48	; 0x30
   12958:	mov	r2, r7
   1295c:	bl	11940 <memset@plt>
   12960:	add	r6, r6, r7
   12964:	str	r6, [r9]
   12968:	mov	r0, r6
   1296c:	mov	r1, r5
   12970:	mov	r2, r4
   12974:	bl	11718 <memcpy@plt>
   12978:	add	r0, r6, r4
   1297c:	str	r0, [r9]
   12980:	sub	sp, fp, #24
   12984:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1298c:	add	fp, sp, #28
   12990:	sub	sp, sp, #36	; 0x24
   12994:	ldr	ip, [fp, #12]
   12998:	ldr	r8, [fp, #8]
   1299c:	tst	r8, #1
   129a0:	str	r0, [sp, #12]
   129a4:	bne	12a54 <__assert_fail@plt+0xfdc>
   129a8:	orrs	r1, r8, ip
   129ac:	beq	12a5c <__assert_fail@plt+0xfe4>
   129b0:	mov	lr, r3
   129b4:	mov	r0, #0
   129b8:	tst	r8, #1
   129bc:	bne	129e4 <__assert_fail@plt+0xf6c>
   129c0:	mov	r0, #0
   129c4:	mov	r1, r8
   129c8:	mov	r3, ip
   129cc:	lsrs	r3, r3, #1
   129d0:	rrx	r7, r1
   129d4:	add	r0, r0, #1
   129d8:	tst	r1, #2
   129dc:	mov	r1, r7
   129e0:	beq	129cc <__assert_fail@plt+0xf54>
   129e4:	lsr	r1, r8, r0
   129e8:	rsb	r3, r0, #32
   129ec:	orr	r1, r1, ip, lsl r3
   129f0:	sub	r4, r0, #32
   129f4:	cmp	r4, #0
   129f8:	lsrge	r1, ip, r4
   129fc:	rsb	r6, r0, #64	; 0x40
   12a00:	lsl	r5, r2, r6
   12a04:	cmp	r3, #0
   12a08:	movwge	r5, #0
   12a0c:	orr	r8, r5, r1
   12a10:	rsb	r1, r6, #32
   12a14:	lsr	r1, r2, r1
   12a18:	mov	r5, lr
   12a1c:	orr	r1, r1, lr, lsl r6
   12a20:	cmp	r3, #0
   12a24:	lslge	r1, r2, r3
   12a28:	lsr	r6, ip, r0
   12a2c:	cmp	r4, #0
   12a30:	movwge	r6, #0
   12a34:	orr	r6, r1, r6
   12a38:	lsr	r1, r2, r0
   12a3c:	orr	r7, r1, lr, lsl r3
   12a40:	lsrge	r7, lr, r4
   12a44:	lsr	r5, lr, r0
   12a48:	cmp	r4, #0
   12a4c:	movwge	r5, #0
   12a50:	b	12ac0 <__assert_fail@plt+0x1048>
   12a54:	mov	r7, r2
   12a58:	b	12adc <__assert_fail@plt+0x1064>
   12a5c:	mov	r6, r3
   12a60:	mov	r7, #0
   12a64:	tst	r2, #1
   12a68:	mov	r0, #0
   12a6c:	bne	12a94 <__assert_fail@plt+0x101c>
   12a70:	mov	r0, #0
   12a74:	mov	r1, r2
   12a78:	mov	r3, r6
   12a7c:	lsrs	r3, r3, #1
   12a80:	rrx	r5, r1
   12a84:	add	r0, r0, #1
   12a88:	tst	r1, #2
   12a8c:	mov	r1, r5
   12a90:	beq	12a7c <__assert_fail@plt+0x1004>
   12a94:	lsr	r1, r2, r0
   12a98:	rsb	r2, r0, #32
   12a9c:	orr	r8, r1, r6, lsl r2
   12aa0:	sub	r1, r0, #32
   12aa4:	cmp	r1, #0
   12aa8:	lsrge	r8, r6, r1
   12aac:	lsr	r4, r6, r0
   12ab0:	movwge	r4, #0
   12ab4:	mov	r6, r4
   12ab8:	add	r0, r0, #64	; 0x40
   12abc:	mov	r5, #0
   12ac0:	str	r0, [sp]
   12ac4:	ldr	r0, [fp, #16]
   12ac8:	mov	r2, #2
   12acc:	mov	r3, #0
   12ad0:	bl	14f3c <__assert_fail@plt+0x34c4>
   12ad4:	mov	ip, r6
   12ad8:	mov	r3, r5
   12adc:	str	r8, [sp, #16]
   12ae0:	orrs	r0, r7, r3
   12ae4:	beq	12c2c <__assert_fail@plt+0x11b4>
   12ae8:	mov	r4, #0
   12aec:	mov	r0, #3
   12af0:	str	r0, [sp, #32]
   12af4:	mov	r5, #0
   12af8:	mov	r8, r7
   12afc:	str	r3, [sp, #24]
   12b00:	movw	r0, #52120	; 0xcb98
   12b04:	movt	r0, #1
   12b08:	str	r5, [sp, #28]
   12b0c:	ldr	r9, [r0, r5, lsl #4]!
   12b10:	add	r1, r0, #8
   12b14:	str	r1, [sp, #20]
   12b18:	ldr	sl, [r0, #4]
   12b1c:	b	12b50 <__assert_fail@plt+0x10d8>
   12b20:	mov	r0, #1
   12b24:	str	r0, [sp]
   12b28:	ldr	r0, [fp, #16]
   12b2c:	ldr	r2, [sp, #32]
   12b30:	str	ip, [sp, #8]
   12b34:	mov	r3, ip
   12b38:	bl	14f3c <__assert_fail@plt+0x34c4>
   12b3c:	str	r7, [sp, #16]
   12b40:	mov	ip, r6
   12b44:	mov	r8, r5
   12b48:	str	r4, [sp, #24]
   12b4c:	ldr	r4, [sp, #8]
   12b50:	ldr	r1, [sp, #16]
   12b54:	umull	r7, r0, r9, r1
   12b58:	mov	lr, ip
   12b5c:	mla	r0, r9, ip, r0
   12b60:	mla	r6, sl, r1, r0
   12b64:	umull	r0, r1, r7, r4
   12b68:	ldr	r5, [sp, #32]
   12b6c:	umlal	r0, r1, r6, r5
   12b70:	umull	r2, r3, r7, r5
   12b74:	adds	r0, r0, r3
   12b78:	adc	r1, r1, #0
   12b7c:	umull	r2, r3, r6, r5
   12b80:	subs	r0, r0, r2
   12b84:	sbcs	r0, r1, r3
   12b88:	mov	r0, #0
   12b8c:	movwcc	r0, #1
   12b90:	mov	ip, r4
   12b94:	umull	r2, r3, r6, r4
   12b98:	cmp	r0, #0
   12b9c:	addne	r3, r3, #1
   12ba0:	adds	r1, r2, r1
   12ba4:	adc	r0, r3, #0
   12ba8:	subs	r2, r8, r1
   12bac:	ldr	r3, [sp, #24]
   12bb0:	sbcs	r2, r3, r0
   12bb4:	bcc	12be4 <__assert_fail@plt+0x116c>
   12bb8:	mov	r4, r8
   12bbc:	subs	r1, r8, r1
   12bc0:	umull	r5, r2, r1, r9
   12bc4:	mla	r1, r1, sl, r2
   12bc8:	sbc	r0, r3, r0
   12bcc:	mla	r4, r0, r9, r1
   12bd0:	ldr	r0, [sp, #20]
   12bd4:	ldrd	r0, [r0]
   12bd8:	subs	r0, r0, r5
   12bdc:	sbcs	r0, r1, r4
   12be0:	bcs	12b20 <__assert_fail@plt+0x10a8>
   12be4:	ldr	r5, [sp, #28]
   12be8:	add	r5, r5, #1
   12bec:	movw	r0, #62920	; 0xf5c8
   12bf0:	movt	r0, #1
   12bf4:	ldrb	r0, [r0, r5]
   12bf8:	ldr	r1, [sp, #32]
   12bfc:	adds	r1, r1, r0
   12c00:	str	r1, [sp, #32]
   12c04:	mov	r4, ip
   12c08:	adc	r4, ip, #0
   12c0c:	lsr	r0, r5, #2
   12c10:	cmp	r0, #166	; 0xa6
   12c14:	bhi	12c48 <__assert_fail@plt+0x11d0>
   12c18:	mov	r7, r8
   12c1c:	orrs	r0, r8, r3
   12c20:	mov	ip, lr
   12c24:	bne	12af8 <__assert_fail@plt+0x1080>
   12c28:	b	12c50 <__assert_fail@plt+0x11d8>
   12c2c:	mov	r5, #0
   12c30:	mov	r0, #3
   12c34:	str	r0, [sp, #32]
   12c38:	mov	r4, #0
   12c3c:	mov	r7, #0
   12c40:	mov	r3, #0
   12c44:	b	12c50 <__assert_fail@plt+0x11d8>
   12c48:	mov	ip, lr
   12c4c:	mov	r7, r8
   12c50:	ldr	r0, [sp, #12]
   12c54:	cmp	r0, #0
   12c58:	strne	r7, [r0]
   12c5c:	strne	r3, [r0, #4]
   12c60:	lsr	r0, r5, #2
   12c64:	cmp	r0, #166	; 0xa6
   12c68:	ldr	r6, [sp, #16]
   12c6c:	bhi	131e4 <__assert_fail@plt+0x176c>
   12c70:	movw	lr, #52120	; 0xcb98
   12c74:	movt	lr, #1
   12c78:	b	13028 <__assert_fail@plt+0x15b0>
   12c7c:	add	r0, r5, #1
   12c80:	str	r0, [sp, #24]
   12c84:	str	r5, [sp, #28]
   12c88:	ldr	r0, [sp, #24]
   12c8c:	str	r0, [sp]
   12c90:	mov	r0, #0
   12c94:	str	r0, [sp, #4]
   12c98:	ldr	r0, [fp, #16]
   12c9c:	mov	r6, r2
   12ca0:	ldr	r2, [sp, #32]
   12ca4:	mov	r3, r4
   12ca8:	mov	r5, lr
   12cac:	bl	15034 <__assert_fail@plt+0x35bc>
   12cb0:	mov	lr, r5
   12cb4:	ldr	r5, [sp, #28]
   12cb8:	ldr	r0, [r8]
   12cbc:	umull	r1, r2, r0, r7
   12cc0:	mla	r0, r0, sl, r2
   12cc4:	mla	r0, r6, r7, r0
   12cc8:	ldrd	r2, [r9]
   12ccc:	subs	r2, r2, r1
   12cd0:	sbcs	r2, r3, r0
   12cd4:	mov	r2, r6
   12cd8:	mov	r6, r7
   12cdc:	mov	ip, sl
   12ce0:	mov	r7, r1
   12ce4:	mov	sl, r0
   12ce8:	bcc	13058 <__assert_fail@plt+0x15e0>
   12cec:	b	12c84 <__assert_fail@plt+0x120c>
   12cf0:	add	r0, r5, #1
   12cf4:	str	r0, [sp, #20]
   12cf8:	str	r2, [sp, #24]
   12cfc:	str	r5, [sp, #28]
   12d00:	ldr	r0, [sp, #20]
   12d04:	str	r0, [sp]
   12d08:	mov	r0, #1
   12d0c:	str	r0, [sp, #4]
   12d10:	ldr	r0, [fp, #16]
   12d14:	ldr	r2, [sp, #32]
   12d18:	mov	r6, r3
   12d1c:	mov	r3, r4
   12d20:	mov	r5, lr
   12d24:	bl	15034 <__assert_fail@plt+0x35bc>
   12d28:	mov	lr, r5
   12d2c:	ldr	r5, [sp, #28]
   12d30:	ldr	r0, [r7]
   12d34:	umull	r1, r2, r0, r6
   12d38:	mla	r0, r0, sl, r2
   12d3c:	ldr	r2, [sp, #24]
   12d40:	mla	r0, r2, r6, r0
   12d44:	ldrd	r2, [r9]
   12d48:	subs	r2, r2, r1
   12d4c:	sbcs	r2, r3, r0
   12d50:	ldr	r2, [sp, #24]
   12d54:	mov	ip, sl
   12d58:	mov	r3, r1
   12d5c:	mov	sl, r0
   12d60:	bcc	13088 <__assert_fail@plt+0x1610>
   12d64:	b	12cf8 <__assert_fail@plt+0x1280>
   12d68:	add	r0, r5, #1
   12d6c:	str	r0, [sp, #20]
   12d70:	str	r2, [sp, #24]
   12d74:	str	r5, [sp, #28]
   12d78:	ldr	r0, [sp, #20]
   12d7c:	str	r0, [sp]
   12d80:	mov	r0, #2
   12d84:	str	r0, [sp, #4]
   12d88:	ldr	r0, [fp, #16]
   12d8c:	ldr	r2, [sp, #32]
   12d90:	mov	r6, r3
   12d94:	mov	r3, r4
   12d98:	mov	r5, lr
   12d9c:	bl	15034 <__assert_fail@plt+0x35bc>
   12da0:	mov	lr, r5
   12da4:	ldr	r5, [sp, #28]
   12da8:	ldr	r0, [r7]
   12dac:	umull	r1, r2, r0, r6
   12db0:	mla	r0, r0, r9, r2
   12db4:	ldr	r2, [sp, #24]
   12db8:	mla	r0, r2, r6, r0
   12dbc:	ldrd	r2, [sl]
   12dc0:	subs	r2, r2, r1
   12dc4:	sbcs	r2, r3, r0
   12dc8:	ldr	r2, [sp, #24]
   12dcc:	mov	ip, r9
   12dd0:	mov	r3, r1
   12dd4:	mov	r9, r0
   12dd8:	bcc	130b8 <__assert_fail@plt+0x1640>
   12ddc:	b	12d70 <__assert_fail@plt+0x12f8>
   12de0:	add	r0, r5, #1
   12de4:	str	r0, [sp, #20]
   12de8:	str	r2, [sp, #24]
   12dec:	str	r5, [sp, #28]
   12df0:	ldr	r0, [sp, #20]
   12df4:	str	r0, [sp]
   12df8:	mov	r0, #3
   12dfc:	str	r0, [sp, #4]
   12e00:	ldr	r0, [fp, #16]
   12e04:	ldr	r2, [sp, #32]
   12e08:	mov	r6, r3
   12e0c:	mov	r3, r4
   12e10:	mov	r5, lr
   12e14:	bl	15034 <__assert_fail@plt+0x35bc>
   12e18:	mov	lr, r5
   12e1c:	ldr	r5, [sp, #28]
   12e20:	ldr	r0, [r7]
   12e24:	umull	r1, r2, r0, r6
   12e28:	mla	r0, r0, r9, r2
   12e2c:	ldr	r2, [sp, #24]
   12e30:	mla	r0, r2, r6, r0
   12e34:	ldrd	r2, [sl]
   12e38:	subs	r2, r2, r1
   12e3c:	sbcs	r2, r3, r0
   12e40:	ldr	r2, [sp, #24]
   12e44:	mov	ip, r9
   12e48:	mov	r3, r1
   12e4c:	mov	r9, r0
   12e50:	bcc	130e8 <__assert_fail@plt+0x1670>
   12e54:	b	12de8 <__assert_fail@plt+0x1370>
   12e58:	add	r0, r5, #1
   12e5c:	str	r0, [sp, #20]
   12e60:	str	r2, [sp, #24]
   12e64:	str	r5, [sp, #28]
   12e68:	ldr	r0, [sp, #20]
   12e6c:	str	r0, [sp]
   12e70:	mov	r0, #4
   12e74:	str	r0, [sp, #4]
   12e78:	ldr	r0, [fp, #16]
   12e7c:	ldr	r2, [sp, #32]
   12e80:	mov	r6, r3
   12e84:	mov	r3, r4
   12e88:	mov	r5, lr
   12e8c:	bl	15034 <__assert_fail@plt+0x35bc>
   12e90:	mov	lr, r5
   12e94:	ldr	r5, [sp, #28]
   12e98:	ldr	r0, [r7]
   12e9c:	umull	r1, r2, r0, r6
   12ea0:	mla	r0, r0, r9, r2
   12ea4:	ldr	r2, [sp, #24]
   12ea8:	mla	r0, r2, r6, r0
   12eac:	ldrd	r2, [sl]
   12eb0:	subs	r2, r2, r1
   12eb4:	sbcs	r2, r3, r0
   12eb8:	ldr	r2, [sp, #24]
   12ebc:	mov	ip, r9
   12ec0:	mov	r3, r1
   12ec4:	mov	r9, r0
   12ec8:	bcc	13118 <__assert_fail@plt+0x16a0>
   12ecc:	b	12e60 <__assert_fail@plt+0x13e8>
   12ed0:	add	r0, r5, #1
   12ed4:	str	r0, [sp, #20]
   12ed8:	str	r2, [sp, #24]
   12edc:	str	r5, [sp, #28]
   12ee0:	ldr	r0, [sp, #20]
   12ee4:	str	r0, [sp]
   12ee8:	mov	r0, #5
   12eec:	str	r0, [sp, #4]
   12ef0:	ldr	r0, [fp, #16]
   12ef4:	ldr	r2, [sp, #32]
   12ef8:	mov	r6, r3
   12efc:	mov	r3, r4
   12f00:	mov	r5, lr
   12f04:	bl	15034 <__assert_fail@plt+0x35bc>
   12f08:	mov	lr, r5
   12f0c:	ldr	r5, [sp, #28]
   12f10:	ldr	r0, [r7]
   12f14:	umull	r1, r2, r0, r6
   12f18:	mla	r0, r0, r9, r2
   12f1c:	ldr	r2, [sp, #24]
   12f20:	mla	r0, r2, r6, r0
   12f24:	ldrd	r2, [sl]
   12f28:	subs	r2, r2, r1
   12f2c:	sbcs	r2, r3, r0
   12f30:	ldr	r2, [sp, #24]
   12f34:	mov	ip, r9
   12f38:	mov	r3, r1
   12f3c:	mov	r9, r0
   12f40:	bcc	13148 <__assert_fail@plt+0x16d0>
   12f44:	b	12ed8 <__assert_fail@plt+0x1460>
   12f48:	add	r0, r5, #1
   12f4c:	str	r0, [sp, #20]
   12f50:	str	r2, [sp, #24]
   12f54:	str	r5, [sp, #28]
   12f58:	ldr	r0, [sp, #20]
   12f5c:	str	r0, [sp]
   12f60:	mov	r0, #6
   12f64:	str	r0, [sp, #4]
   12f68:	ldr	r0, [fp, #16]
   12f6c:	ldr	r2, [sp, #32]
   12f70:	mov	r6, r3
   12f74:	mov	r3, r4
   12f78:	mov	r5, lr
   12f7c:	bl	15034 <__assert_fail@plt+0x35bc>
   12f80:	mov	lr, r5
   12f84:	ldr	r5, [sp, #28]
   12f88:	ldr	r0, [r7]
   12f8c:	umull	r1, r2, r0, r6
   12f90:	mla	r0, r0, r9, r2
   12f94:	ldr	r2, [sp, #24]
   12f98:	mla	r0, r2, r6, r0
   12f9c:	ldrd	r2, [sl]
   12fa0:	subs	r2, r2, r1
   12fa4:	sbcs	r2, r3, r0
   12fa8:	ldr	r2, [sp, #24]
   12fac:	mov	ip, r9
   12fb0:	mov	r3, r1
   12fb4:	mov	r9, r0
   12fb8:	bcc	13178 <__assert_fail@plt+0x1700>
   12fbc:	b	12f50 <__assert_fail@plt+0x14d8>
   12fc0:	add	r2, r5, #1
   12fc4:	str	r2, [sp, #24]
   12fc8:	str	r1, [sp, #20]
   12fcc:	mov	r6, r0
   12fd0:	ldr	r0, [sp, #24]
   12fd4:	str	r0, [sp]
   12fd8:	mov	r0, #7
   12fdc:	str	r0, [sp, #4]
   12fe0:	ldr	r0, [fp, #16]
   12fe4:	ldr	r2, [sp, #32]
   12fe8:	mov	r3, r4
   12fec:	mov	sl, r5
   12ff0:	mov	r5, lr
   12ff4:	bl	15034 <__assert_fail@plt+0x35bc>
   12ff8:	mov	lr, r5
   12ffc:	ldr	ip, [sp, #20]
   13000:	mov	r5, sl
   13004:	ldr	r1, [r8]
   13008:	umull	r0, r2, r1, r6
   1300c:	mla	r1, r1, ip, r2
   13010:	mla	r1, r9, r6, r1
   13014:	ldrd	r2, [r7]
   13018:	subs	r2, r2, r0
   1301c:	sbcs	r2, r3, r1
   13020:	bcc	131a4 <__assert_fail@plt+0x172c>
   13024:	b	12fc8 <__assert_fail@plt+0x1550>
   13028:	mov	r8, lr
   1302c:	ldr	r0, [r8, r5, lsl #4]!
   13030:	umull	r7, r1, r0, r6
   13034:	mla	r0, r0, ip, r1
   13038:	ldr	r2, [r8, #4]
   1303c:	ldr	r1, [r8, #12]
   13040:	mla	sl, r2, r6, r0
   13044:	mov	r9, r8
   13048:	ldr	r0, [r9, #8]!
   1304c:	subs	r0, r0, r7
   13050:	sbcs	r0, r1, sl
   13054:	bcs	12c7c <__assert_fail@plt+0x1204>
   13058:	mov	r7, r8
   1305c:	ldr	r0, [r7, #16]!
   13060:	umull	r3, r1, r0, r6
   13064:	mla	r0, r0, ip, r1
   13068:	ldr	r2, [r7, #4]
   1306c:	ldr	r1, [r7, #12]
   13070:	mla	sl, r2, r6, r0
   13074:	mov	r9, r7
   13078:	ldr	r0, [r9, #8]!
   1307c:	subs	r0, r0, r3
   13080:	sbcs	r0, r1, sl
   13084:	bcs	12cf0 <__assert_fail@plt+0x1278>
   13088:	mov	r7, r8
   1308c:	ldr	r0, [r7, #32]!
   13090:	umull	r3, r1, r0, r6
   13094:	mla	r0, r0, ip, r1
   13098:	ldr	r2, [r7, #4]
   1309c:	ldr	r1, [r7, #12]
   130a0:	mla	r9, r2, r6, r0
   130a4:	mov	sl, r7
   130a8:	ldr	r0, [sl, #8]!
   130ac:	subs	r0, r0, r3
   130b0:	sbcs	r0, r1, r9
   130b4:	bcs	12d68 <__assert_fail@plt+0x12f0>
   130b8:	mov	r7, r8
   130bc:	ldr	r0, [r7, #48]!	; 0x30
   130c0:	umull	r3, r1, r0, r6
   130c4:	mla	r0, r0, ip, r1
   130c8:	ldr	r2, [r7, #4]
   130cc:	ldr	r1, [r7, #12]
   130d0:	mla	r9, r2, r6, r0
   130d4:	mov	sl, r7
   130d8:	ldr	r0, [sl, #8]!
   130dc:	subs	r0, r0, r3
   130e0:	sbcs	r0, r1, r9
   130e4:	bcs	12de0 <__assert_fail@plt+0x1368>
   130e8:	mov	r7, r8
   130ec:	ldr	r0, [r7, #64]!	; 0x40
   130f0:	umull	r3, r1, r0, r6
   130f4:	mla	r0, r0, ip, r1
   130f8:	ldr	r2, [r7, #4]
   130fc:	ldr	r1, [r7, #12]
   13100:	mla	r9, r2, r6, r0
   13104:	mov	sl, r7
   13108:	ldr	r0, [sl, #8]!
   1310c:	subs	r0, r0, r3
   13110:	sbcs	r0, r1, r9
   13114:	bcs	12e58 <__assert_fail@plt+0x13e0>
   13118:	mov	r7, r8
   1311c:	ldr	r0, [r7, #80]!	; 0x50
   13120:	umull	r3, r1, r0, r6
   13124:	mla	r0, r0, ip, r1
   13128:	ldr	r2, [r7, #4]
   1312c:	ldr	r1, [r7, #12]
   13130:	mla	r9, r2, r6, r0
   13134:	mov	sl, r7
   13138:	ldr	r0, [sl, #8]!
   1313c:	subs	r0, r0, r3
   13140:	sbcs	r0, r1, r9
   13144:	bcs	12ed0 <__assert_fail@plt+0x1458>
   13148:	mov	r7, r8
   1314c:	ldr	r0, [r7, #96]!	; 0x60
   13150:	umull	r3, r1, r0, r6
   13154:	mla	r0, r0, ip, r1
   13158:	ldr	r2, [r7, #4]
   1315c:	ldr	r1, [r7, #12]
   13160:	mla	r9, r2, r6, r0
   13164:	mov	sl, r7
   13168:	ldr	r0, [sl, #8]!
   1316c:	subs	r0, r0, r3
   13170:	sbcs	r0, r1, r9
   13174:	bcs	12f48 <__assert_fail@plt+0x14d0>
   13178:	ldr	r1, [r8, #112]!	; 0x70
   1317c:	umull	r0, r2, r1, r6
   13180:	mla	r1, r1, ip, r2
   13184:	ldr	r9, [r8, #4]
   13188:	ldr	r2, [r8, #12]
   1318c:	mla	r1, r9, r6, r1
   13190:	mov	r7, r8
   13194:	ldr	r3, [r7, #8]!
   13198:	subs	r3, r3, r0
   1319c:	sbcs	r2, r2, r1
   131a0:	bcs	12fc0 <__assert_fail@plt+0x1548>
   131a4:	movw	r0, #63595	; 0xf86b
   131a8:	movt	r0, #1
   131ac:	ldrb	r0, [r0, r5]
   131b0:	ldr	r2, [sp, #32]
   131b4:	adds	r2, r2, r0
   131b8:	adc	r4, r4, #0
   131bc:	umull	r0, r1, r2, r2
   131c0:	mla	r1, r2, r4, r1
   131c4:	str	r2, [sp, #32]
   131c8:	mla	r1, r2, r4, r1
   131cc:	subs	r0, r6, r0
   131d0:	sbcs	r0, ip, r1
   131d4:	bcc	131e4 <__assert_fail@plt+0x176c>
   131d8:	add	r5, r5, #8
   131dc:	cmp	r5, #668	; 0x29c
   131e0:	bcc	13028 <__assert_fail@plt+0x15b0>
   131e4:	mov	r0, r6
   131e8:	mov	r1, ip
   131ec:	sub	sp, fp, #28
   131f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131f8:	add	fp, sp, #28
   131fc:	sub	sp, sp, #516	; 0x204
   13200:	orrs	r7, r0, r1
   13204:	beq	13300 <__assert_fail@plt+0x1888>
   13208:	orr	r7, r2, r3
   1320c:	subs	ip, r0, #1
   13210:	sbc	lr, r1, #0
   13214:	cmp	r7, #0
   13218:	movne	lr, r1
   1321c:	movne	ip, r0
   13220:	subs	r6, r2, #1
   13224:	sbc	r5, r3, #0
   13228:	mov	r7, r5
   1322c:	str	r5, [sp, #92]	; 0x5c
   13230:	orrs	r7, r6, r5
   13234:	str	r1, [sp, #84]	; 0x54
   13238:	str	r0, [sp, #56]	; 0x38
   1323c:	str	ip, [sp, #80]	; 0x50
   13240:	str	lr, [sp, #76]	; 0x4c
   13244:	str	r6, [sp, #88]	; 0x58
   13248:	beq	13310 <__assert_fail@plt+0x1898>
   1324c:	mov	r4, #0
   13250:	tst	r6, #1
   13254:	bne	1327c <__assert_fail@plt+0x1804>
   13258:	mov	r4, #0
   1325c:	mov	r0, r6
   13260:	ldr	r1, [sp, #92]	; 0x5c
   13264:	lsrs	r1, r1, #1
   13268:	rrx	r7, r0
   1326c:	add	r4, r4, #1
   13270:	tst	r0, #2
   13274:	mov	r0, r7
   13278:	beq	13264 <__assert_fail@plt+0x17ec>
   1327c:	lsr	r0, lr, r4
   13280:	sub	r1, r4, #32
   13284:	cmp	r1, #0
   13288:	movwge	r0, #0
   1328c:	str	r0, [fp, #-36]	; 0xffffffdc
   13290:	lsr	r0, ip, r4
   13294:	rsb	r5, r4, #32
   13298:	orr	r0, r0, lr, lsl r5
   1329c:	cmp	r1, #0
   132a0:	lsrge	r0, lr, r1
   132a4:	str	r0, [fp, #-40]	; 0xffffffd8
   132a8:	lsr	r0, r6, r4
   132ac:	ldr	r8, [sp, #92]	; 0x5c
   132b0:	orr	r0, r0, r8, lsl r5
   132b4:	lsrge	r0, r8, r1
   132b8:	rsb	r6, r4, #64	; 0x40
   132bc:	lsl	r7, ip, r6
   132c0:	cmp	r5, #0
   132c4:	movwge	r7, #0
   132c8:	orr	r0, r7, r0
   132cc:	str	r0, [fp, #-48]	; 0xffffffd0
   132d0:	rsb	r0, r6, #32
   132d4:	lsr	r0, ip, r0
   132d8:	orr	r0, r0, lr, lsl r6
   132dc:	cmp	r5, #0
   132e0:	lslge	r0, ip, r5
   132e4:	str	r4, [sp, #32]
   132e8:	lsr	r7, r8, r4
   132ec:	cmp	r1, #0
   132f0:	movwge	r7, #0
   132f4:	orr	r0, r0, r7
   132f8:	str	r0, [fp, #-44]	; 0xffffffd4
   132fc:	b	13380 <__assert_fail@plt+0x1908>
   13300:	mov	r0, r2
   13304:	mov	r1, r3
   13308:	bl	15084 <__assert_fail@plt+0x360c>
   1330c:	b	13bac <__assert_fail@plt+0x2134>
   13310:	mov	r1, #0
   13314:	tst	ip, #1
   13318:	mov	r0, #0
   1331c:	bne	13344 <__assert_fail@plt+0x18cc>
   13320:	mov	r0, #0
   13324:	mov	r7, ip
   13328:	mov	r6, lr
   1332c:	lsrs	r6, r6, #1
   13330:	rrx	r5, r7
   13334:	add	r0, r0, #1
   13338:	tst	r7, #2
   1333c:	mov	r7, r5
   13340:	beq	1332c <__assert_fail@plt+0x18b4>
   13344:	str	r1, [fp, #-36]	; 0xffffffdc
   13348:	str	r1, [fp, #-40]	; 0xffffffd8
   1334c:	lsr	r1, lr, r0
   13350:	sub	r6, r0, #32
   13354:	cmp	r6, #0
   13358:	movwge	r1, #0
   1335c:	str	r1, [fp, #-44]	; 0xffffffd4
   13360:	lsr	r1, ip, r0
   13364:	rsb	r7, r0, #32
   13368:	orr	r1, r1, lr, lsl r7
   1336c:	cmp	r6, #0
   13370:	lsrge	r1, lr, r6
   13374:	str	r1, [fp, #-48]	; 0xffffffd0
   13378:	add	r0, r0, #64	; 0x40
   1337c:	str	r0, [sp, #32]
   13380:	ubfx	r0, r2, #1, #7
   13384:	movw	r1, #64270	; 0xfb0e
   13388:	movt	r1, #1
   1338c:	ldrb	r1, [r1, r0]
   13390:	umull	r0, r7, r1, r2
   13394:	mla	r7, r1, r3, r7
   13398:	rsbs	r0, r0, #2
   1339c:	rsc	r8, r7, #0
   133a0:	umull	r4, r7, r0, r1
   133a4:	umull	r0, sl, r4, r2
   133a8:	rsbs	r5, r0, #2
   133ac:	mov	r6, r2
   133b0:	umull	r9, lr, r4, r5
   133b4:	umull	ip, r0, r9, r2
   133b8:	mla	r0, r9, r3, r0
   133bc:	mla	r1, r8, r1, r7
   133c0:	str	r3, [sp, #52]	; 0x34
   133c4:	mla	r2, r4, r3, sl
   133c8:	mla	r2, r1, r6, r2
   133cc:	rsc	r2, r2, #0
   133d0:	mla	r2, r4, r2, lr
   133d4:	mla	lr, r1, r5, r2
   133d8:	str	r6, [sp, #48]	; 0x30
   133dc:	mla	r0, lr, r6, r0
   133e0:	rsbs	ip, ip, #2
   133e4:	rsc	r0, r0, #0
   133e8:	str	r0, [sp, #148]	; 0x94
   133ec:	mov	r3, #0
   133f0:	ldr	r4, [sp, #56]	; 0x38
   133f4:	rsbs	r0, r4, #1
   133f8:	ldr	sl, [sp, #84]	; 0x54
   133fc:	rscs	r0, sl, #0
   13400:	mov	r7, #0
   13404:	movwcc	r7, #1
   13408:	mov	r1, #127	; 0x7f
   1340c:	cmp	r7, #0
   13410:	movwne	r1, #63	; 0x3f
   13414:	subs	r0, r4, #2
   13418:	sbcs	r0, sl, #0
   1341c:	mov	r2, #0
   13420:	movwcc	r2, #1
   13424:	mov	r5, #0
   13428:	mov	r0, #0
   1342c:	str	r0, [sp, #156]	; 0x9c
   13430:	mov	r8, r3
   13434:	mov	r4, r1
   13438:	ldr	r3, [sp, #156]	; 0x9c
   1343c:	lsl	r0, r3, #1
   13440:	orr	r1, r0, r2, lsr #31
   13444:	lsl	r0, r5, #1
   13448:	orr	r5, r0, r7, lsr #31
   1344c:	lsl	r0, r7, #1
   13450:	orr	r7, r0, r3, lsr #31
   13454:	lsl	r2, r2, #1
   13458:	ldr	r6, [sp, #56]	; 0x38
   1345c:	subs	r0, r6, r7
   13460:	sbcs	r0, sl, r5
   13464:	bcc	13490 <__assert_fail@plt+0x1a18>
   13468:	ldr	r0, [sp, #48]	; 0x30
   1346c:	subs	r0, r2, r0
   13470:	ldr	r0, [sp, #52]	; 0x34
   13474:	sbcs	r0, r1, r0
   13478:	bcc	134cc <__assert_fail@plt+0x1a54>
   1347c:	ldr	r6, [sp, #56]	; 0x38
   13480:	eor	r0, r7, r6
   13484:	eor	r3, r5, sl
   13488:	orrs	r0, r0, r3
   1348c:	bne	134cc <__assert_fail@plt+0x1a54>
   13490:	subs	r0, r7, r6
   13494:	sbc	r3, r5, sl
   13498:	subs	r7, r0, #1
   1349c:	sbc	r5, r3, #0
   134a0:	ldr	r6, [sp, #48]	; 0x30
   134a4:	subs	r2, r2, r6
   134a8:	ldr	r6, [sp, #52]	; 0x34
   134ac:	sbcs	r1, r1, r6
   134b0:	str	r1, [sp, #156]	; 0x9c
   134b4:	mov	r1, #0
   134b8:	movwcc	r1, #1
   134bc:	cmp	r1, #0
   134c0:	moveq	r7, r0
   134c4:	moveq	r5, r3
   134c8:	b	134d0 <__assert_fail@plt+0x1a58>
   134cc:	str	r1, [sp, #156]	; 0x9c
   134d0:	subs	r1, r4, #1
   134d4:	sbc	r3, r8, #0
   134d8:	orrs	r0, r4, r8
   134dc:	bne	13430 <__assert_fail@plt+0x19b8>
   134e0:	str	r2, [fp, #-80]	; 0xffffffb0
   134e4:	str	r7, [fp, #-72]	; 0xffffffb8
   134e8:	ldr	r3, [sp, #156]	; 0x9c
   134ec:	str	r3, [fp, #-76]	; 0xffffffb4
   134f0:	str	r5, [fp, #-68]	; 0xffffffbc
   134f4:	lsl	r8, r2, #1
   134f8:	str	r8, [fp, #-64]	; 0xffffffc0
   134fc:	str	r5, [sp, #132]	; 0x84
   13500:	lsl	r0, r5, #1
   13504:	orr	r5, r0, r7, lsr #31
   13508:	str	r5, [fp, #-52]	; 0xffffffcc
   1350c:	lsl	r0, r3, #1
   13510:	orr	r1, r0, r2, lsr #31
   13514:	str	r1, [fp, #-60]	; 0xffffffc4
   13518:	mov	r4, #0
   1351c:	str	r2, [sp, #140]	; 0x8c
   13520:	rsbs	r0, r2, r2, lsl #1
   13524:	sbcs	r0, r1, r3
   13528:	mov	r0, #0
   1352c:	movwcc	r0, #1
   13530:	str	r7, [sp, #96]	; 0x60
   13534:	orr	r6, r0, r7, lsl #1
   13538:	str	r6, [fp, #-56]	; 0xffffffc8
   1353c:	umull	r2, r0, r9, ip
   13540:	str	r2, [sp, #152]	; 0x98
   13544:	ldr	r2, [sp, #148]	; 0x94
   13548:	mla	r0, r9, r2, r0
   1354c:	mla	r0, lr, ip, r0
   13550:	str	r0, [sp, #148]	; 0x94
   13554:	sub	r0, fp, #64	; 0x40
   13558:	add	r0, r0, #8
   1355c:	str	r0, [sp, #28]
   13560:	ldr	r7, [sp, #56]	; 0x38
   13564:	subs	r0, r7, r6
   13568:	sbcs	r0, sl, r5
   1356c:	ldr	ip, [sp, #52]	; 0x34
   13570:	ldr	r3, [sp, #48]	; 0x30
   13574:	bcc	13594 <__assert_fail@plt+0x1b1c>
   13578:	subs	r0, r8, r3
   1357c:	sbcs	r0, r1, ip
   13580:	bcc	135c8 <__assert_fail@plt+0x1b50>
   13584:	eor	r0, r6, r7
   13588:	eor	r2, r5, sl
   1358c:	orrs	r0, r0, r2
   13590:	bne	135c8 <__assert_fail@plt+0x1b50>
   13594:	subs	r0, r8, r3
   13598:	str	r0, [fp, #-64]	; 0xffffffc0
   1359c:	sbcs	r0, r1, ip
   135a0:	str	r0, [fp, #-60]	; 0xffffffc4
   135a4:	movwcc	r4, #1
   135a8:	cmp	r4, #0
   135ac:	mvnne	r4, #0
   135b0:	subs	r0, r4, r7
   135b4:	sbc	r1, r4, sl
   135b8:	adds	r0, r0, r6
   135bc:	adc	r1, r1, r5
   135c0:	ldr	r2, [sp, #28]
   135c4:	strd	r0, [r2]
   135c8:	str	r7, [fp, #-88]	; 0xffffffa8
   135cc:	str	r3, [fp, #-96]	; 0xffffffa0
   135d0:	str	sl, [fp, #-84]	; 0xffffffac
   135d4:	str	ip, [fp, #-92]	; 0xffffffa4
   135d8:	sub	r1, fp, #80	; 0x50
   135dc:	sub	r2, fp, #48	; 0x30
   135e0:	sub	r0, fp, #64	; 0x40
   135e4:	stm	sp, {r0, r2}
   135e8:	ldr	r0, [sp, #32]
   135ec:	str	r0, [sp, #8]
   135f0:	str	r1, [sp, #12]
   135f4:	sub	r0, fp, #96	; 0x60
   135f8:	ldr	r2, [sp, #152]	; 0x98
   135fc:	ldr	r3, [sp, #148]	; 0x94
   13600:	bl	155a4 <__assert_fail@plt+0x3b2c>
   13604:	mov	r1, r0
   13608:	mov	r0, #0
   1360c:	cmp	r1, #0
   13610:	beq	13bac <__assert_fail@plt+0x2134>
   13614:	add	r8, sp, #192	; 0xc0
   13618:	str	r8, [sp]
   1361c:	ldr	r5, [sp, #80]	; 0x50
   13620:	mov	r0, r5
   13624:	ldr	r6, [sp, #76]	; 0x4c
   13628:	mov	r1, r6
   1362c:	ldr	r7, [sp, #88]	; 0x58
   13630:	mov	r2, r7
   13634:	ldr	r4, [sp, #92]	; 0x5c
   13638:	mov	r3, r4
   1363c:	bl	1280c <__assert_fail@plt+0xd94>
   13640:	lsrs	r0, r6, #1
   13644:	str	r0, [sp, #72]	; 0x48
   13648:	rrx	r0, r5
   1364c:	str	r0, [sp, #68]	; 0x44
   13650:	lsrs	r0, r4, #1
   13654:	rrx	r1, r7
   13658:	str	r1, [sp, #64]	; 0x40
   1365c:	orr	r0, r0, r5, lsl #31
   13660:	str	r0, [sp, #60]	; 0x3c
   13664:	add	r0, sp, #176	; 0xb0
   13668:	add	r0, r0, #8
   1366c:	str	r0, [sp, #136]	; 0x88
   13670:	add	r0, sp, #160	; 0xa0
   13674:	add	r0, r0, #8
   13678:	str	r0, [sp, #144]	; 0x90
   1367c:	add	r0, r8, #16
   13680:	str	r0, [sp, #20]
   13684:	add	r0, r8, #8
   13688:	str	r0, [sp, #24]
   1368c:	mov	r0, #2
   13690:	str	r0, [sp, #40]	; 0x28
   13694:	mov	r0, #0
   13698:	str	r0, [sp, #36]	; 0x24
   1369c:	mov	r0, #0
   136a0:	str	r0, [sp, #44]	; 0x2c
   136a4:	ldr	r0, [sp, #24]
   136a8:	ldrd	r0, [r0]
   136ac:	orrs	r0, r0, r1
   136b0:	mov	r4, #1
   136b4:	mov	r8, sl
   136b8:	beq	137f8 <__assert_fail@plt+0x1d80>
   136bc:	ldr	r0, [sp, #192]	; 0xc0
   136c0:	ldr	ip, [sp, #196]	; 0xc4
   136c4:	ubfx	r2, r0, #1, #7
   136c8:	movw	r1, #64270	; 0xfb0e
   136cc:	movt	r1, #1
   136d0:	ldrb	r2, [r1, r2]
   136d4:	umull	r3, r7, r0, r2
   136d8:	rsbs	r3, r3, #2
   136dc:	umull	r3, r6, r3, r2
   136e0:	mla	r7, ip, r2, r7
   136e4:	rsc	r7, r7, #0
   136e8:	mla	r1, r7, r2, r6
   136ec:	str	r1, [sp, #108]	; 0x6c
   136f0:	umull	r7, r6, r3, r0
   136f4:	mla	r6, r3, ip, r6
   136f8:	mla	r6, r1, r0, r6
   136fc:	rsbs	r9, r7, #2
   13700:	rsc	r1, r6, #0
   13704:	str	r1, [sp, #128]	; 0x80
   13708:	umull	r5, r1, r3, r9
   1370c:	str	r1, [sp, #120]	; 0x78
   13710:	umull	r6, r1, r5, r0
   13714:	str	r1, [sp, #116]	; 0x74
   13718:	rsbs	sl, r6, #2
   1371c:	umull	r1, r2, r5, sl
   13720:	str	r2, [sp, #124]	; 0x7c
   13724:	ldr	r6, [sp, #88]	; 0x58
   13728:	umull	lr, r2, r1, r6
   1372c:	str	r2, [sp, #112]	; 0x70
   13730:	str	lr, [sp, #176]	; 0xb0
   13734:	ldr	r2, [sp, #92]	; 0x5c
   13738:	ldr	r7, [sp, #112]	; 0x70
   1373c:	mla	lr, r1, r2, r7
   13740:	ldr	r1, [sp, #116]	; 0x74
   13744:	mla	ip, r5, ip, r1
   13748:	ldr	r2, [sp, #128]	; 0x80
   1374c:	ldr	r1, [sp, #120]	; 0x78
   13750:	mla	r3, r3, r2, r1
   13754:	ldr	r1, [sp, #108]	; 0x6c
   13758:	mla	r2, r1, r9, r3
   1375c:	mla	r0, r2, r0, ip
   13760:	rsc	r0, r0, #0
   13764:	ldr	r1, [sp, #124]	; 0x7c
   13768:	mla	r0, r5, r0, r1
   1376c:	mla	r0, r2, sl, r0
   13770:	mla	r0, r0, r6, lr
   13774:	str	r0, [sp, #180]	; 0xb4
   13778:	ldr	r0, [sp, #136]	; 0x88
   1377c:	mov	r1, #0
   13780:	str	r1, [r0]
   13784:	str	r1, [r0, #4]
   13788:	ldr	r0, [sp, #152]	; 0x98
   1378c:	str	r0, [sp]
   13790:	ldr	r0, [sp, #148]	; 0x94
   13794:	str	r0, [sp, #4]
   13798:	sub	r0, fp, #80	; 0x50
   1379c:	str	r0, [sp, #8]
   137a0:	ldr	r0, [sp, #144]	; 0x90
   137a4:	sub	r1, fp, #64	; 0x40
   137a8:	add	r2, sp, #176	; 0xb0
   137ac:	sub	r3, fp, #96	; 0x60
   137b0:	bl	1577c <__assert_fail@plt+0x3d04>
   137b4:	str	r1, [sp, #164]	; 0xa4
   137b8:	str	r0, [sp, #160]	; 0xa0
   137bc:	ldr	r2, [sp, #156]	; 0x9c
   137c0:	eor	r1, r1, r2
   137c4:	ldr	r2, [sp, #140]	; 0x8c
   137c8:	eor	r0, r0, r2
   137cc:	orrs	r0, r0, r1
   137d0:	ldr	r9, [sp, #96]	; 0x60
   137d4:	bne	137fc <__assert_fail@plt+0x1d84>
   137d8:	ldr	r0, [sp, #144]	; 0x90
   137dc:	ldrd	r0, [r0]
   137e0:	ldr	r2, [sp, #132]	; 0x84
   137e4:	eor	r1, r1, r2
   137e8:	eor	r0, r0, r9
   137ec:	orrs	r4, r0, r1
   137f0:	movwne	r4, #1
   137f4:	b	137fc <__assert_fail@plt+0x1d84>
   137f8:	ldr	r9, [sp, #96]	; 0x60
   137fc:	cmp	r4, #0
   13800:	ldrbne	r0, [sp, #442]	; 0x1ba
   13804:	cmpne	r0, #0
   13808:	bne	13980 <__assert_fail@plt+0x1f08>
   1380c:	cmp	r4, #0
   13810:	bne	13bb4 <__assert_fail@plt+0x213c>
   13814:	movw	r0, #62920	; 0xf5c8
   13818:	movt	r0, #1
   1381c:	ldr	r1, [sp, #44]	; 0x2c
   13820:	ldrb	r0, [r0, r1]
   13824:	ldr	r7, [sp, #40]	; 0x28
   13828:	adds	r7, r7, r0
   1382c:	ldr	r6, [sp, #36]	; 0x24
   13830:	adc	r6, r6, #0
   13834:	mov	r2, #0
   13838:	ldr	r9, [sp, #56]	; 0x38
   1383c:	subs	r0, r7, r9
   13840:	mov	sl, r8
   13844:	sbcs	r0, r6, r8
   13848:	mov	r0, #0
   1384c:	movwcc	r0, #1
   13850:	cmp	r0, #0
   13854:	mov	r4, #127	; 0x7f
   13858:	movwne	r4, #63	; 0x3f
   1385c:	mov	r5, r6
   13860:	movwne	r5, #0
   13864:	mov	r1, r7
   13868:	movwne	r1, #0
   1386c:	mov	r3, r0
   13870:	str	r6, [sp, #36]	; 0x24
   13874:	movne	r3, r6
   13878:	str	r7, [sp, #40]	; 0x28
   1387c:	movne	r0, r7
   13880:	ldr	lr, [sp, #52]	; 0x34
   13884:	ldr	r8, [sp, #48]	; 0x30
   13888:	mov	ip, r2
   1388c:	mov	r7, r4
   13890:	lsl	r2, r5, #1
   13894:	orr	r2, r2, r1, lsr #31
   13898:	lsl	r3, r3, #1
   1389c:	orr	r3, r3, r0, lsr #31
   138a0:	lsr	r5, r5, #31
   138a4:	orr	r0, r5, r0, lsl #1
   138a8:	lsl	r1, r1, #1
   138ac:	subs	r5, r9, r0
   138b0:	sbcs	r5, sl, r3
   138b4:	bcc	138d4 <__assert_fail@plt+0x1e5c>
   138b8:	subs	r5, r1, r8
   138bc:	sbcs	r5, r2, lr
   138c0:	bcc	13904 <__assert_fail@plt+0x1e8c>
   138c4:	eor	r5, r0, r9
   138c8:	eor	r4, r3, sl
   138cc:	orrs	r5, r5, r4
   138d0:	bne	13904 <__assert_fail@plt+0x1e8c>
   138d4:	subs	r4, r0, r9
   138d8:	sbc	r6, r3, sl
   138dc:	subs	r0, r4, #1
   138e0:	sbc	r3, r6, #0
   138e4:	subs	r1, r1, r8
   138e8:	sbcs	r5, r2, lr
   138ec:	mov	r2, #0
   138f0:	movwcc	r2, #1
   138f4:	cmp	r2, #0
   138f8:	moveq	r0, r4
   138fc:	moveq	r3, r6
   13900:	b	13908 <__assert_fail@plt+0x1e90>
   13904:	mov	r5, r2
   13908:	subs	r4, r7, #1
   1390c:	sbc	r2, ip, #0
   13910:	orrs	r7, r7, ip
   13914:	bne	13888 <__assert_fail@plt+0x1e10>
   13918:	ldr	r2, [sp, #28]
   1391c:	stm	r2, {r0, r3}
   13920:	str	r5, [fp, #-60]	; 0xffffffc4
   13924:	str	r1, [fp, #-64]	; 0xffffffc0
   13928:	sub	r0, fp, #64	; 0x40
   1392c:	str	r0, [sp]
   13930:	sub	r0, fp, #48	; 0x30
   13934:	str	r0, [sp, #4]
   13938:	ldr	r0, [sp, #32]
   1393c:	str	r0, [sp, #8]
   13940:	sub	r0, fp, #80	; 0x50
   13944:	str	r0, [sp, #12]
   13948:	sub	r0, fp, #96	; 0x60
   1394c:	ldr	r2, [sp, #152]	; 0x98
   13950:	ldr	r3, [sp, #148]	; 0x94
   13954:	bl	155a4 <__assert_fail@plt+0x3b2c>
   13958:	cmp	r0, #0
   1395c:	beq	13bc0 <__assert_fail@plt+0x2148>
   13960:	ldr	r0, [sp, #44]	; 0x2c
   13964:	mov	r1, r0
   13968:	add	r1, r0, #1
   1396c:	mov	r0, r1
   13970:	str	r1, [sp, #44]	; 0x2c
   13974:	cmp	r1, #668	; 0x29c
   13978:	bcc	136a4 <__assert_fail@plt+0x1c2c>
   1397c:	b	13bcc <__assert_fail@plt+0x2154>
   13980:	mov	r6, #1
   13984:	ldr	r5, [sp, #20]
   13988:	ldrd	r0, [r5]
   1398c:	eor	r2, r0, #2
   13990:	orrs	r2, r2, r1
   13994:	bne	139c0 <__assert_fail@plt+0x1f48>
   13998:	ldr	r0, [sp, #64]	; 0x40
   1399c:	str	r0, [sp, #176]	; 0xb0
   139a0:	ldr	r0, [sp, #60]	; 0x3c
   139a4:	str	r0, [sp, #180]	; 0xb4
   139a8:	ldr	r0, [sp, #72]	; 0x48
   139ac:	ldr	r1, [sp, #68]	; 0x44
   139b0:	ldr	r2, [sp, #136]	; 0x88
   139b4:	str	r1, [r2]
   139b8:	str	r0, [r2, #4]
   139bc:	b	13b1c <__assert_fail@plt+0x20a4>
   139c0:	str	r6, [sp, #104]	; 0x68
   139c4:	ubfx	r2, r0, #1, #7
   139c8:	movw	r3, #64270	; 0xfb0e
   139cc:	movt	r3, #1
   139d0:	ldrb	r2, [r3, r2]
   139d4:	umull	r3, r7, r0, r2
   139d8:	rsbs	r3, r3, #2
   139dc:	umull	r6, r3, r3, r2
   139e0:	mla	r7, r1, r2, r7
   139e4:	rsc	r7, r7, #0
   139e8:	mla	sl, r7, r2, r3
   139ec:	umull	r2, r3, r6, r0
   139f0:	mla	r3, r6, r1, r3
   139f4:	mla	r3, sl, r0, r3
   139f8:	rsbs	r4, r2, #2
   139fc:	rsc	r2, r3, #0
   13a00:	str	r2, [sp, #124]	; 0x7c
   13a04:	umull	r2, r3, r6, r4
   13a08:	str	r3, [sp, #116]	; 0x74
   13a0c:	umull	r3, r7, r2, r0
   13a10:	str	r7, [sp, #108]	; 0x6c
   13a14:	rsbs	ip, r3, #2
   13a18:	umull	r8, r3, r2, ip
   13a1c:	str	r3, [sp, #120]	; 0x78
   13a20:	ldr	r9, [sp, #88]	; 0x58
   13a24:	umull	r3, lr, r8, r9
   13a28:	str	r3, [sp, #128]	; 0x80
   13a2c:	ldr	r3, [sp, #92]	; 0x5c
   13a30:	str	r8, [sp, #100]	; 0x64
   13a34:	mla	r3, r8, r3, lr
   13a38:	str	r3, [sp, #112]	; 0x70
   13a3c:	ldr	r3, [sp, #108]	; 0x6c
   13a40:	mla	r8, r2, r1, r3
   13a44:	ldr	r3, [sp, #124]	; 0x7c
   13a48:	ldr	lr, [sp, #116]	; 0x74
   13a4c:	mla	r6, r6, r3, lr
   13a50:	mla	r4, sl, r4, r6
   13a54:	mla	r3, r4, r0, r8
   13a58:	rsc	r3, r3, #0
   13a5c:	ldr	r6, [sp, #120]	; 0x78
   13a60:	mla	r2, r2, r3, r6
   13a64:	mla	ip, r4, ip, r2
   13a68:	ldr	r2, [sp, #112]	; 0x70
   13a6c:	mla	r6, ip, r9, r2
   13a70:	ldr	lr, [sp, #80]	; 0x50
   13a74:	subs	r2, lr, r0
   13a78:	ldr	r9, [sp, #76]	; 0x4c
   13a7c:	sbcs	r2, r9, r1
   13a80:	bcs	13aa4 <__assert_fail@plt+0x202c>
   13a84:	ldr	r0, [sp, #128]	; 0x80
   13a88:	str	r0, [sp, #176]	; 0xb0
   13a8c:	str	r6, [sp, #180]	; 0xb4
   13a90:	ldr	r0, [sp, #136]	; 0x88
   13a94:	mov	r1, #0
   13a98:	str	r1, [r0]
   13a9c:	str	r1, [r0, #4]
   13aa0:	b	13b10 <__assert_fail@plt+0x2098>
   13aa4:	ldr	r8, [sp, #128]	; 0x80
   13aa8:	umull	r2, r3, r8, r1
   13aac:	umlal	r2, r3, r6, r0
   13ab0:	umull	r4, r7, r8, r0
   13ab4:	adds	r2, r2, r7
   13ab8:	adc	r3, r3, #0
   13abc:	umull	r0, r7, r6, r0
   13ac0:	subs	r0, r2, r0
   13ac4:	sbcs	r0, r3, r7
   13ac8:	mov	r0, #0
   13acc:	movwcc	r0, #1
   13ad0:	umull	r1, r2, r6, r1
   13ad4:	cmp	r0, #0
   13ad8:	addne	r2, r2, #1
   13adc:	subs	r0, lr, r3
   13ae0:	sbc	r3, r9, #0
   13ae4:	subs	r0, r0, r1
   13ae8:	ldr	r7, [sp, #100]	; 0x64
   13aec:	umull	r4, r1, r0, r7
   13af0:	mla	r0, r0, ip, r1
   13af4:	sbc	r1, r3, r2
   13af8:	mla	r1, r1, r7, r0
   13afc:	ldr	r0, [sp, #136]	; 0x88
   13b00:	str	r4, [r0]
   13b04:	str	r1, [r0, #4]
   13b08:	str	r6, [sp, #180]	; 0xb4
   13b0c:	str	r8, [sp, #176]	; 0xb0
   13b10:	ldr	r8, [sp, #84]	; 0x54
   13b14:	ldr	r9, [sp, #96]	; 0x60
   13b18:	ldr	r6, [sp, #104]	; 0x68
   13b1c:	ldr	r0, [sp, #152]	; 0x98
   13b20:	str	r0, [sp]
   13b24:	ldr	r0, [sp, #148]	; 0x94
   13b28:	str	r0, [sp, #4]
   13b2c:	sub	r0, fp, #80	; 0x50
   13b30:	str	r0, [sp, #8]
   13b34:	ldr	r4, [sp, #144]	; 0x90
   13b38:	mov	r0, r4
   13b3c:	sub	r1, fp, #64	; 0x40
   13b40:	add	r2, sp, #176	; 0xb0
   13b44:	sub	r3, fp, #96	; 0x60
   13b48:	bl	1577c <__assert_fail@plt+0x3d04>
   13b4c:	str	r1, [sp, #164]	; 0xa4
   13b50:	str	r0, [sp, #160]	; 0xa0
   13b54:	ldr	r2, [sp, #156]	; 0x9c
   13b58:	eor	r1, r1, r2
   13b5c:	ldrd	r2, [r4]
   13b60:	ldr	r7, [sp, #132]	; 0x84
   13b64:	eor	r3, r3, r7
   13b68:	orr	r1, r1, r3
   13b6c:	ldr	r3, [sp, #140]	; 0x8c
   13b70:	eor	r0, r0, r3
   13b74:	eor	r2, r2, r9
   13b78:	orr	r0, r0, r2
   13b7c:	orrs	r0, r0, r1
   13b80:	mov	r4, r0
   13b84:	movwne	r4, #1
   13b88:	cmp	r0, #0
   13b8c:	beq	1380c <__assert_fail@plt+0x1d94>
   13b90:	add	r5, r5, #8
   13b94:	add	r0, r6, #1
   13b98:	ldrb	r1, [sp, #442]	; 0x1ba
   13b9c:	cmp	r6, r1
   13ba0:	mov	r6, r0
   13ba4:	bcc	13988 <__assert_fail@plt+0x1f10>
   13ba8:	b	1380c <__assert_fail@plt+0x1d94>
   13bac:	sub	sp, fp, #28
   13bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb4:	mov	r0, #1
   13bb8:	sub	sp, fp, #28
   13bbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bc0:	mov	r0, #0
   13bc4:	sub	sp, fp, #28
   13bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bcc:	movw	r1, #51261	; 0xc83d
   13bd0:	movt	r1, #1
   13bd4:	mov	r0, #0
   13bd8:	mov	r2, #5
   13bdc:	bl	11754 <dcgettext@plt>
   13be0:	mov	r2, r0
   13be4:	mov	r0, #0
   13be8:	mov	r1, #0
   13bec:	bl	11850 <error@plt>
   13bf0:	bl	11a60 <abort@plt>
   13bf4:	push	{r4, r5, r7, r9, fp, lr}
   13bf8:	add	fp, sp, #16
   13bfc:	sub	sp, sp, #8
   13c00:	mov	r4, r2
   13c04:	orrs	r1, r2, r3
   13c08:	ldr	r9, [fp, #12]
   13c0c:	ldr	r2, [fp, #8]
   13c10:	beq	13c58 <__assert_fail@plt+0x21e0>
   13c14:	mov	r1, r0
   13c18:	ldr	r5, [r1, #8]!
   13c1c:	ldr	r7, [r1, #4]
   13c20:	orrs	r7, r5, r7
   13c24:	stmeq	r0, {r2, r9}
   13c28:	streq	r4, [r1]
   13c2c:	streq	r3, [r1, #4]
   13c30:	subeq	sp, fp, #16
   13c34:	popeq	{r4, r5, r7, r9, fp, pc}
   13c38:	movw	r0, #51559	; 0xc967
   13c3c:	movt	r0, #1
   13c40:	movw	r1, #51248	; 0xc830
   13c44:	movt	r1, #1
   13c48:	movw	r3, #51583	; 0xc97f
   13c4c:	movt	r3, #1
   13c50:	movw	r2, #558	; 0x22e
   13c54:	bl	11a78 <__assert_fail@plt>
   13c58:	mov	r1, #1
   13c5c:	str	r1, [sp]
   13c60:	mov	r3, r9
   13c64:	bl	14f3c <__assert_fail@plt+0x34c4>
   13c68:	sub	sp, fp, #16
   13c6c:	pop	{r4, r5, r7, r9, fp, pc}
   13c70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c74:	add	fp, sp, #28
   13c78:	sub	sp, sp, #92	; 0x5c
   13c7c:	str	r3, [sp, #24]
   13c80:	str	r2, [sp, #28]
   13c84:	mov	sl, r0
   13c88:	subs	r0, r0, #2
   13c8c:	sbcs	r0, r1, #0
   13c90:	bcc	14230 <__assert_fail@plt+0x27b8>
   13c94:	mov	r2, r1
   13c98:	mvn	r0, #63	; 0x3f
   13c9c:	mov	r1, sl
   13ca0:	mov	r9, r2
   13ca4:	mov	r3, #0
   13ca8:	str	r3, [fp, #-36]	; 0xffffffdc
   13cac:	mov	r3, #0
   13cb0:	str	r3, [fp, #-40]	; 0xffffffd8
   13cb4:	mov	r7, #1
   13cb8:	mov	r6, #0
   13cbc:	mov	ip, #0
   13cc0:	mov	lr, #0
   13cc4:	lsrs	r5, lr, #1
   13cc8:	rrx	ip, ip
   13ccc:	orr	lr, r5, r1, lsl #31
   13cd0:	lsrs	r2, r2, #1
   13cd4:	rrx	r1, r1
   13cd8:	subs	r4, r1, r7
   13cdc:	sbcs	r4, r2, r6
   13ce0:	bcc	13d08 <__assert_fail@plt+0x2290>
   13ce4:	eor	r4, r7, r1
   13ce8:	eor	r3, r6, r2
   13cec:	orrs	r3, r4, r3
   13cf0:	bne	13d44 <__assert_fail@plt+0x22cc>
   13cf4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   13cf8:	subs	r3, r3, ip
   13cfc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13d00:	sbcs	r3, r3, lr
   13d04:	bcc	13d44 <__assert_fail@plt+0x22cc>
   13d08:	subs	r3, r7, r1
   13d0c:	sbc	r4, r6, r2
   13d10:	subs	r7, r3, #1
   13d14:	sbc	r6, r4, #0
   13d18:	ldr	r5, [fp, #-36]	; 0xffffffdc
   13d1c:	subs	r5, r5, ip
   13d20:	str	r5, [fp, #-36]	; 0xffffffdc
   13d24:	ldr	r5, [fp, #-40]	; 0xffffffd8
   13d28:	sbcs	r5, r5, lr
   13d2c:	str	r5, [fp, #-40]	; 0xffffffd8
   13d30:	mov	r5, #0
   13d34:	movwcc	r5, #1
   13d38:	cmp	r5, #0
   13d3c:	moveq	r7, r3
   13d40:	moveq	r6, r4
   13d44:	adds	r0, r0, #1
   13d48:	bne	13cc4 <__assert_fail@plt+0x224c>
   13d4c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   13d50:	subs	r0, sl, r2
   13d54:	ldr	r3, [fp, #-40]	; 0xffffffd8
   13d58:	sbc	r1, r9, r3
   13d5c:	subs	r0, r2, r0
   13d60:	sbcs	r1, r3, r1
   13d64:	mov	r2, #0
   13d68:	movwcc	r2, #1
   13d6c:	adds	r7, r0, sl
   13d70:	adc	r3, r1, r9
   13d74:	cmp	r2, #0
   13d78:	moveq	r3, r1
   13d7c:	str	r3, [sp, #36]	; 0x24
   13d80:	moveq	r7, r0
   13d84:	eor	r0, sl, #1
   13d88:	orrs	r0, r0, r9
   13d8c:	ldr	lr, [sp, #28]
   13d90:	beq	14250 <__assert_fail@plt+0x27d8>
   13d94:	add	r0, lr, #1
   13d98:	str	r0, [sp, #20]
   13d9c:	mov	r0, #1
   13da0:	str	r0, [fp, #-32]	; 0xffffffe0
   13da4:	str	r7, [sp, #60]	; 0x3c
   13da8:	ldr	r8, [sp, #36]	; 0x24
   13dac:	str	r8, [fp, #-56]	; 0xffffffc8
   13db0:	mov	r2, r7
   13db4:	mov	r0, #1
   13db8:	str	r0, [sp, #40]	; 0x28
   13dbc:	str	r7, [sp, #32]
   13dc0:	subs	r0, lr, sl
   13dc4:	rscs	r0, r9, #0
   13dc8:	bcs	14278 <__assert_fail@plt+0x2800>
   13dcc:	ubfx	r0, sl, #1, #7
   13dd0:	movw	r1, #64270	; 0xfb0e
   13dd4:	movt	r1, #1
   13dd8:	ldrb	r0, [r1, r0]
   13ddc:	umull	r1, r3, sl, r0
   13de0:	mla	r3, r9, r0, r3
   13de4:	rsbs	r1, r1, #2
   13de8:	rsc	r3, r3, #0
   13dec:	str	r3, [fp, #-44]	; 0xffffffd4
   13df0:	umull	r1, r3, r1, r0
   13df4:	str	r3, [sp, #56]	; 0x38
   13df8:	mov	r4, sl
   13dfc:	umull	r7, r5, r1, sl
   13e00:	rsbs	r7, r7, #2
   13e04:	umull	r6, r3, r1, r7
   13e08:	str	r3, [fp, #-52]	; 0xffffffcc
   13e0c:	umull	r3, ip, r6, sl
   13e10:	str	r3, [fp, #-48]	; 0xffffffd0
   13e14:	mla	ip, r6, r9, ip
   13e18:	ldr	sl, [fp, #-44]	; 0xffffffd4
   13e1c:	ldr	r3, [sp, #56]	; 0x38
   13e20:	mla	r0, sl, r0, r3
   13e24:	mla	r3, r1, r9, r5
   13e28:	mla	r3, r0, r4, r3
   13e2c:	rsc	r3, r3, #0
   13e30:	ldr	r5, [fp, #-52]	; 0xffffffcc
   13e34:	mla	r1, r1, r3, r5
   13e38:	mla	r0, r0, r7, r1
   13e3c:	mla	r1, r0, r4, ip
   13e40:	ldr	r3, [fp, #-48]	; 0xffffffd0
   13e44:	rsbs	r3, r3, #2
   13e48:	rsc	r1, r1, #0
   13e4c:	umull	r5, r7, r6, r3
   13e50:	str	r5, [sp, #56]	; 0x38
   13e54:	mla	r1, r6, r1, r7
   13e58:	mla	r1, r0, r3, r1
   13e5c:	subs	r0, r4, lr
   13e60:	str	r0, [sp, #52]	; 0x34
   13e64:	str	r9, [sp, #48]	; 0x30
   13e68:	sbc	r0, r9, #0
   13e6c:	str	r0, [sp, #44]	; 0x2c
   13e70:	mov	sl, r4
   13e74:	ldr	r5, [sp, #40]	; 0x28
   13e78:	ldr	r9, [sp, #32]
   13e7c:	ldr	r3, [sp, #36]	; 0x24
   13e80:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13e84:	str	r1, [fp, #-52]	; 0xffffffcc
   13e88:	b	13eb0 <__assert_fail@plt+0x2438>
   13e8c:	ldr	r0, [sp, #40]	; 0x28
   13e90:	str	r0, [fp, #-32]	; 0xffffffe0
   13e94:	ldr	r0, [sp, #32]
   13e98:	str	r0, [sp, #60]	; 0x3c
   13e9c:	ldr	r7, [sp, #36]	; 0x24
   13ea0:	mov	r9, r2
   13ea4:	mov	r3, r8
   13ea8:	mov	sl, r5
   13eac:	ldr	r5, [fp, #-44]	; 0xffffffd4
   13eb0:	str	r5, [sp, #40]	; 0x28
   13eb4:	ldr	r6, [fp, #-32]	; 0xffffffe0
   13eb8:	str	r7, [fp, #-56]	; 0xffffffc8
   13ebc:	str	r6, [fp, #-32]	; 0xffffffe0
   13ec0:	str	r8, [fp, #-48]	; 0xffffffd0
   13ec4:	str	r2, [fp, #-44]	; 0xffffffd4
   13ec8:	str	sl, [sp]
   13ecc:	ldr	r8, [sp, #48]	; 0x30
   13ed0:	str	r8, [sp, #4]
   13ed4:	ldr	r4, [sp, #56]	; 0x38
   13ed8:	str	r4, [sp, #8]
   13edc:	str	r1, [sp, #12]
   13ee0:	mov	r0, r9
   13ee4:	mov	r5, sl
   13ee8:	mov	sl, r1
   13eec:	mov	r1, r3
   13ef0:	mov	r2, r9
   13ef4:	bl	15c10 <__assert_fail@plt+0x4198>
   13ef8:	ldr	r2, [sp, #52]	; 0x34
   13efc:	subs	r0, r0, r2
   13f00:	ldr	r2, [sp, #44]	; 0x2c
   13f04:	sbcs	r1, r1, r2
   13f08:	mov	r2, #0
   13f0c:	movwcc	r2, #1
   13f10:	adds	r9, r0, r5
   13f14:	adc	r6, r1, r8
   13f18:	cmp	r2, #0
   13f1c:	moveq	r6, r1
   13f20:	moveq	r9, r0
   13f24:	ldr	r0, [sp, #60]	; 0x3c
   13f28:	subs	r0, r0, r9
   13f2c:	sbcs	r1, r7, r6
   13f30:	stm	sp, {r5, r8}
   13f34:	str	r4, [sp, #8]
   13f38:	str	sl, [sp, #12]
   13f3c:	mov	sl, r5
   13f40:	mov	r7, #0
   13f44:	movwcc	r7, #1
   13f48:	adds	r2, r0, r5
   13f4c:	adc	r3, r1, r8
   13f50:	cmp	r7, #0
   13f54:	moveq	r3, r1
   13f58:	moveq	r2, r0
   13f5c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   13f60:	ldr	r1, [fp, #-40]	; 0xffffffd8
   13f64:	bl	15c10 <__assert_fail@plt+0x4198>
   13f68:	mov	r7, r0
   13f6c:	ldr	r4, [fp, #-32]	; 0xffffffe0
   13f70:	and	r0, r4, #31
   13f74:	cmp	r0, #1
   13f78:	str	r7, [fp, #-36]	; 0xffffffdc
   13f7c:	str	r1, [fp, #-40]	; 0xffffffd8
   13f80:	bne	13fb8 <__assert_fail@plt+0x2540>
   13f84:	mov	r0, r7
   13f88:	mov	r2, sl
   13f8c:	mov	r3, r8
   13f90:	bl	162c8 <__assert_fail@plt+0x4850>
   13f94:	eor	r0, r0, #1
   13f98:	orrs	r0, r0, r1
   13f9c:	mov	r2, r9
   13fa0:	mov	r1, r6
   13fa4:	mov	r3, r6
   13fa8:	ldr	r6, [fp, #-44]	; 0xffffffd4
   13fac:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13fb0:	beq	13fc4 <__assert_fail@plt+0x254c>
   13fb4:	b	14074 <__assert_fail@plt+0x25fc>
   13fb8:	ldr	r2, [fp, #-44]	; 0xffffffd4
   13fbc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   13fc0:	mov	r3, r6
   13fc4:	subs	r4, r4, #1
   13fc8:	mov	r8, r1
   13fcc:	mov	r6, r4
   13fd0:	ldr	r7, [fp, #-56]	; 0xffffffc8
   13fd4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13fd8:	bne	13ebc <__assert_fail@plt+0x2444>
   13fdc:	ldr	r6, [sp, #40]	; 0x28
   13fe0:	lsl	r5, r6, #1
   13fe4:	cmp	r6, #0
   13fe8:	str	r6, [fp, #-32]	; 0xffffffe0
   13fec:	mov	r2, r9
   13ff0:	mov	r8, r3
   13ff4:	str	r9, [sp, #60]	; 0x3c
   13ff8:	mov	r7, r3
   13ffc:	beq	13eb0 <__assert_fail@plt+0x2438>
   14000:	str	r5, [fp, #-44]	; 0xffffffd4
   14004:	str	r9, [sp, #32]
   14008:	mov	r2, r9
   1400c:	str	r3, [sp, #36]	; 0x24
   14010:	mov	r8, r3
   14014:	ldr	r7, [sp, #48]	; 0x30
   14018:	mov	r5, sl
   1401c:	ldr	sl, [sp, #56]	; 0x38
   14020:	ldr	r9, [sp, #52]	; 0x34
   14024:	ldr	r4, [sp, #44]	; 0x2c
   14028:	stm	sp, {r5, r7, sl}
   1402c:	str	r1, [sp, #12]
   14030:	mov	r0, r2
   14034:	mov	r1, r8
   14038:	mov	r3, r8
   1403c:	bl	15c10 <__assert_fail@plt+0x4198>
   14040:	subs	r0, r0, r9
   14044:	sbcs	r1, r1, r4
   14048:	mov	r3, #0
   1404c:	movwcc	r3, #1
   14050:	adds	r2, r0, r5
   14054:	adc	r8, r1, r7
   14058:	cmp	r3, #0
   1405c:	moveq	r8, r1
   14060:	ldr	r1, [fp, #-52]	; 0xffffffcc
   14064:	moveq	r2, r0
   14068:	subs	r6, r6, #1
   1406c:	bne	14028 <__assert_fail@plt+0x25b0>
   14070:	b	13e8c <__assert_fail@plt+0x2414>
   14074:	str	r3, [sp, #36]	; 0x24
   14078:	str	r9, [sp, #32]
   1407c:	mov	r8, sl
   14080:	ldr	r9, [sp, #48]	; 0x30
   14084:	ldr	sl, [sp, #44]	; 0x2c
   14088:	stm	sp, {r8, r9}
   1408c:	ldr	r0, [sp, #56]	; 0x38
   14090:	str	r0, [sp, #8]
   14094:	ldr	r0, [fp, #-52]	; 0xffffffcc
   14098:	str	r0, [sp, #12]
   1409c:	mov	r0, r6
   140a0:	mov	r1, r5
   140a4:	mov	r2, r6
   140a8:	mov	r3, r5
   140ac:	bl	15c10 <__assert_fail@plt+0x4198>
   140b0:	ldr	r2, [sp, #52]	; 0x34
   140b4:	subs	r0, r0, r2
   140b8:	sbcs	r1, r1, sl
   140bc:	mov	r2, #0
   140c0:	movwcc	r2, #1
   140c4:	adds	r6, r0, r8
   140c8:	adc	r5, r1, r9
   140cc:	cmp	r2, #0
   140d0:	moveq	r5, r1
   140d4:	moveq	r6, r0
   140d8:	ldr	r0, [sp, #60]	; 0x3c
   140dc:	subs	r2, r0, r6
   140e0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   140e4:	sbcs	r3, r0, r5
   140e8:	mov	r7, #0
   140ec:	movwcc	r7, #1
   140f0:	adds	r0, r2, r8
   140f4:	adc	r1, r3, r9
   140f8:	cmp	r7, #0
   140fc:	moveq	r1, r3
   14100:	moveq	r0, r2
   14104:	mov	r2, r8
   14108:	mov	r3, r9
   1410c:	bl	162c8 <__assert_fail@plt+0x4850>
   14110:	mov	r4, r0
   14114:	eor	r0, r0, #1
   14118:	orrs	r0, r0, r1
   1411c:	beq	14088 <__assert_fail@plt+0x2610>
   14120:	mov	r7, r1
   14124:	eor	r0, r8, r4
   14128:	eor	r1, r9, r1
   1412c:	orrs	r0, r0, r1
   14130:	beq	14214 <__assert_fail@plt+0x279c>
   14134:	mov	r0, r8
   14138:	mov	r1, r9
   1413c:	mov	r2, r4
   14140:	mov	r3, r7
   14144:	bl	1c2b8 <__assert_fail@plt+0xa840>
   14148:	mov	r8, r0
   1414c:	mov	r9, r1
   14150:	mov	r0, r4
   14154:	mov	r1, r7
   14158:	bl	15084 <__assert_fail@plt+0x360c>
   1415c:	cmp	r0, #0
   14160:	beq	14180 <__assert_fail@plt+0x2708>
   14164:	mov	r0, #1
   14168:	str	r0, [sp]
   1416c:	ldr	r0, [sp, #24]
   14170:	mov	r2, r4
   14174:	mov	r3, r7
   14178:	bl	14f3c <__assert_fail@plt+0x34c4>
   1417c:	b	14194 <__assert_fail@plt+0x271c>
   14180:	mov	r0, r4
   14184:	mov	r1, r7
   14188:	ldr	r2, [sp, #20]
   1418c:	ldr	r3, [sp, #24]
   14190:	bl	13c70 <__assert_fail@plt+0x21f8>
   14194:	mov	r4, r8
   14198:	mov	r0, r8
   1419c:	mov	r1, r9
   141a0:	bl	15084 <__assert_fail@plt+0x360c>
   141a4:	cmp	r0, #0
   141a8:	ldr	r0, [sp, #32]
   141ac:	bne	14258 <__assert_fail@plt+0x27e0>
   141b0:	ldr	r1, [sp, #36]	; 0x24
   141b4:	mov	r2, r4
   141b8:	mov	r3, r9
   141bc:	bl	1c2b8 <__assert_fail@plt+0xa840>
   141c0:	mov	r7, r2
   141c4:	str	r3, [sp, #36]	; 0x24
   141c8:	ldr	r0, [sp, #60]	; 0x3c
   141cc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   141d0:	mov	r2, r4
   141d4:	mov	r3, r9
   141d8:	bl	1c2b8 <__assert_fail@plt+0xa840>
   141dc:	str	r2, [sp, #60]	; 0x3c
   141e0:	str	r3, [fp, #-56]	; 0xffffffc8
   141e4:	mov	r0, r6
   141e8:	mov	r1, r5
   141ec:	mov	r2, r4
   141f0:	mov	r3, r9
   141f4:	bl	1c2b8 <__assert_fail@plt+0xa840>
   141f8:	mov	r8, r3
   141fc:	eor	r0, r4, #1
   14200:	orrs	r0, r0, r9
   14204:	mov	sl, r4
   14208:	ldr	lr, [sp, #28]
   1420c:	bne	13dbc <__assert_fail@plt+0x2344>
   14210:	b	14250 <__assert_fail@plt+0x27d8>
   14214:	rsbs	r0, r8, #1
   14218:	rscs	r0, r9, #0
   1421c:	ldr	r0, [sp, #20]
   14220:	str	r0, [sp, #28]
   14224:	mov	r2, r9
   14228:	mov	sl, r8
   1422c:	bcc	13c98 <__assert_fail@plt+0x2220>
   14230:	movw	r0, #51311	; 0xc86f
   14234:	movt	r0, #1
   14238:	movw	r1, #51248	; 0xc830
   1423c:	movt	r1, #1
   14240:	movw	r3, #51648	; 0xc9c0
   14244:	movt	r3, #1
   14248:	movw	r2, #1466	; 0x5ba
   1424c:	bl	11a78 <__assert_fail@plt>
   14250:	sub	sp, fp, #28
   14254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14258:	mov	r0, #1
   1425c:	str	r0, [sp]
   14260:	ldr	r0, [sp, #24]
   14264:	mov	r2, r4
   14268:	mov	r3, r9
   1426c:	bl	14f3c <__assert_fail@plt+0x34c4>
   14270:	sub	sp, fp, #28
   14274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14278:	movw	r0, #51722	; 0xca0a
   1427c:	movt	r0, #1
   14280:	movw	r1, #51248	; 0xc830
   14284:	movt	r1, #1
   14288:	movw	r3, #51648	; 0xc9c0
   1428c:	movt	r3, #1
   14290:	mov	r2, #1472	; 0x5c0
   14294:	bl	11a78 <__assert_fail@plt>
   14298:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1429c:	add	fp, sp, #28
   142a0:	sub	sp, sp, #204	; 0xcc
   142a4:	mov	r8, r3
   142a8:	mov	r7, #0
   142ac:	subs	r3, r0, #2
   142b0:	sbcs	r3, r1, #0
   142b4:	mov	r9, #0
   142b8:	movwcc	r9, #1
   142bc:	str	r0, [fp, #-76]	; 0xffffffb4
   142c0:	rsbs	r0, r0, #1
   142c4:	str	r1, [sp, #112]	; 0x70
   142c8:	rscs	r0, r1, #0
   142cc:	mov	r6, #0
   142d0:	movwcc	r6, #1
   142d4:	mov	r3, #127	; 0x7f
   142d8:	cmp	r6, #0
   142dc:	movwne	r3, #63	; 0x3f
   142e0:	mov	r4, #0
   142e4:	mov	lr, #0
   142e8:	mov	ip, r7
   142ec:	mov	r1, r3
   142f0:	lsl	r3, lr, #1
   142f4:	orr	r5, r3, r9, lsr #31
   142f8:	lsl	r3, r4, #1
   142fc:	orr	r4, r3, r6, lsr #31
   14300:	lsl	r3, r6, #1
   14304:	orr	r6, r3, lr, lsr #31
   14308:	lsl	r9, r9, #1
   1430c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14310:	subs	r3, r0, r6
   14314:	ldr	r7, [sp, #112]	; 0x70
   14318:	sbcs	r3, r7, r4
   1431c:	bcc	14348 <__assert_fail@plt+0x28d0>
   14320:	subs	r3, r9, r2
   14324:	sbcs	r3, r5, r8
   14328:	bcc	14378 <__assert_fail@plt+0x2900>
   1432c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14330:	eor	r3, r6, r0
   14334:	ldr	r7, [sp, #112]	; 0x70
   14338:	eor	r7, r4, r7
   1433c:	orrs	r3, r3, r7
   14340:	ldr	r7, [sp, #112]	; 0x70
   14344:	bne	14378 <__assert_fail@plt+0x2900>
   14348:	subs	r3, r6, r0
   1434c:	sbc	r7, r4, r7
   14350:	subs	r6, r3, #1
   14354:	sbc	r4, r7, #0
   14358:	subs	r9, r9, r2
   1435c:	sbcs	lr, r5, r8
   14360:	mov	r5, #0
   14364:	movwcc	r5, #1
   14368:	cmp	r5, #0
   1436c:	moveq	r6, r3
   14370:	moveq	r4, r7
   14374:	b	1437c <__assert_fail@plt+0x2904>
   14378:	mov	lr, r5
   1437c:	subs	r3, r1, #1
   14380:	sbc	r7, ip, #0
   14384:	orrs	r0, r1, ip
   14388:	bne	142e8 <__assert_fail@plt+0x2870>
   1438c:	lsl	r0, r4, #1
   14390:	orr	r5, r0, r6, lsr #31
   14394:	str	r5, [fp, #-36]	; 0xffffffdc
   14398:	lsl	r1, lr, #1
   1439c:	orr	r7, r1, r9, lsr #31
   143a0:	mov	r1, #0
   143a4:	rsbs	r3, r9, r9, lsl #1
   143a8:	sbcs	r3, r7, lr
   143ac:	mov	r3, #0
   143b0:	movwcc	r3, #1
   143b4:	orr	ip, r3, r6, lsl #1
   143b8:	str	ip, [fp, #-40]	; 0xffffffd8
   143bc:	lsl	sl, r9, #1
   143c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   143c4:	subs	r3, r0, ip
   143c8:	ldr	r0, [sp, #112]	; 0x70
   143cc:	sbcs	r3, r0, r5
   143d0:	bcc	14408 <__assert_fail@plt+0x2990>
   143d4:	str	sl, [sp, #100]	; 0x64
   143d8:	subs	r3, sl, r2
   143dc:	str	r7, [sp, #104]	; 0x68
   143e0:	sbcs	r3, r7, r8
   143e4:	bcc	14450 <__assert_fail@plt+0x29d8>
   143e8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   143ec:	eor	r3, ip, r0
   143f0:	ldr	r0, [sp, #112]	; 0x70
   143f4:	eor	r7, r5, r0
   143f8:	orrs	r3, r3, r7
   143fc:	ldr	r7, [sp, #104]	; 0x68
   14400:	ldr	sl, [sp, #100]	; 0x64
   14404:	bne	14450 <__assert_fail@plt+0x29d8>
   14408:	mov	r3, r2
   1440c:	str	r2, [fp, #-80]	; 0xffffffb0
   14410:	subs	sl, sl, r2
   14414:	str	sl, [sp, #100]	; 0x64
   14418:	sbcs	r7, r7, r8
   1441c:	str	r7, [sp, #104]	; 0x68
   14420:	movwcc	r1, #1
   14424:	cmp	r1, #0
   14428:	mvnne	r1, #0
   1442c:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14430:	subs	r3, r1, r3
   14434:	sbc	r1, r1, r0
   14438:	adds	r3, r3, ip
   1443c:	str	r3, [fp, #-40]	; 0xffffffd8
   14440:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14444:	adc	r0, r1, r5
   14448:	str	r0, [fp, #-36]	; 0xffffffdc
   1444c:	b	14454 <__assert_fail@plt+0x29dc>
   14450:	mov	r3, r2
   14454:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14458:	ldr	r1, [fp, #-36]	; 0xffffffdc
   1445c:	str	r1, [fp, #-44]	; 0xffffffd4
   14460:	str	r0, [fp, #-48]	; 0xffffffd0
   14464:	str	r1, [fp, #-52]	; 0xffffffcc
   14468:	str	r0, [fp, #-56]	; 0xffffffc8
   1446c:	eor	r0, r3, #1
   14470:	orrs	r0, r0, r8
   14474:	ldreq	r0, [sp, #112]	; 0x70
   14478:	ldreq	r1, [fp, #-76]	; 0xffffffb4
   1447c:	orrseq	r0, r1, r0
   14480:	beq	14ebc <__assert_fail@plt+0x3444>
   14484:	str	lr, [sp, #84]	; 0x54
   14488:	add	r0, sp, #88	; 0x58
   1448c:	stm	r0, {r4, r6, r9}
   14490:	ldr	r0, [fp, #8]
   14494:	add	r0, r0, #1
   14498:	str	r0, [sp, #52]	; 0x34
   1449c:	ldr	r1, [sp, #100]	; 0x64
   144a0:	str	r1, [sp, #72]	; 0x48
   144a4:	ldr	r0, [sp, #104]	; 0x68
   144a8:	str	r0, [sp, #68]	; 0x44
   144ac:	str	r1, [fp, #-100]	; 0xffffff9c
   144b0:	str	r0, [fp, #-104]	; 0xffffff98
   144b4:	mov	r0, #1
   144b8:	str	r0, [fp, #-84]	; 0xffffffac
   144bc:	mov	r0, #1
   144c0:	str	r0, [fp, #-108]	; 0xffffff94
   144c4:	mov	r7, r2
   144c8:	b	14574 <__assert_fail@plt+0x2afc>
   144cc:	ldr	r0, [sp, #100]	; 0x64
   144d0:	str	r0, [sp]
   144d4:	ldr	r0, [sp, #104]	; 0x68
   144d8:	stmib	sp, {r0, sl}
   144dc:	str	r5, [sp, #12]
   144e0:	ldr	r7, [fp, #-88]	; 0xffffffa8
   144e4:	str	r7, [sp, #16]
   144e8:	str	r8, [sp, #20]
   144ec:	sub	r0, fp, #40	; 0x28
   144f0:	mov	r2, r4
   144f4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   144f8:	bl	16568 <__assert_fail@plt+0x4af0>
   144fc:	str	r0, [sp, #100]	; 0x64
   14500:	str	r1, [sp, #104]	; 0x68
   14504:	ldr	r0, [sp, #72]	; 0x48
   14508:	str	r0, [sp]
   1450c:	ldr	r0, [sp, #68]	; 0x44
   14510:	stmib	sp, {r0, sl}
   14514:	add	r0, sp, #12
   14518:	stm	r0, {r5, r7, r8}
   1451c:	sub	r0, fp, #48	; 0x30
   14520:	ldr	r2, [sp, #80]	; 0x50
   14524:	ldr	r3, [sp, #76]	; 0x4c
   14528:	bl	16568 <__assert_fail@plt+0x4af0>
   1452c:	str	r0, [sp, #72]	; 0x48
   14530:	str	r1, [sp, #68]	; 0x44
   14534:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14538:	str	r0, [sp]
   1453c:	ldr	r0, [fp, #-104]	; 0xffffff98
   14540:	stmib	sp, {r0, sl}
   14544:	add	r0, sp, #12
   14548:	stm	r0, {r5, r7, r8}
   1454c:	sub	r0, fp, #56	; 0x38
   14550:	ldr	r2, [fp, #-108]	; 0xffffff94
   14554:	ldr	r3, [fp, #-112]	; 0xffffff90
   14558:	bl	16568 <__assert_fail@plt+0x4af0>
   1455c:	str	r0, [fp, #-100]	; 0xffffff9c
   14560:	str	r1, [fp, #-104]	; 0xffffff98
   14564:	str	sl, [fp, #-76]	; 0xffffffb4
   14568:	str	r5, [sp, #112]	; 0x70
   1456c:	ldr	r0, [sp, #64]	; 0x40
   14570:	str	r0, [fp, #-108]	; 0xffffff94
   14574:	str	r7, [fp, #-80]	; 0xffffffb0
   14578:	str	r8, [sp, #116]	; 0x74
   1457c:	ubfx	r0, r7, #1, #7
   14580:	movw	r1, #64270	; 0xfb0e
   14584:	movt	r1, #1
   14588:	ldrb	r0, [r1, r0]
   1458c:	umull	r1, r2, r7, r0
   14590:	mla	r2, r8, r0, r2
   14594:	rsbs	r1, r1, #2
   14598:	rsc	r9, r2, #0
   1459c:	umull	r1, r3, r1, r0
   145a0:	umull	r6, r5, r1, r7
   145a4:	rsbs	r6, r6, #2
   145a8:	umull	r4, ip, r1, r6
   145ac:	ldr	r2, [fp, #-80]	; 0xffffffb0
   145b0:	umull	lr, r2, r4, r2
   145b4:	ldr	r7, [sp, #116]	; 0x74
   145b8:	mla	r2, r4, r7, r2
   145bc:	mla	r0, r9, r0, r3
   145c0:	ldr	sl, [sp, #116]	; 0x74
   145c4:	mla	r3, r1, sl, r5
   145c8:	ldr	r5, [fp, #-80]	; 0xffffffb0
   145cc:	mla	r3, r0, r5, r3
   145d0:	rsc	r3, r3, #0
   145d4:	mla	r1, r1, r3, ip
   145d8:	mla	r0, r0, r6, r1
   145dc:	ldr	r1, [fp, #-80]	; 0xffffffb0
   145e0:	mla	r1, r0, r1, r2
   145e4:	rsbs	r2, lr, #2
   145e8:	rsc	r1, r1, #0
   145ec:	umull	r7, r3, r4, r2
   145f0:	str	r7, [fp, #-88]	; 0xffffffa8
   145f4:	mla	r1, r4, r1, r3
   145f8:	mla	r0, r0, r2, r1
   145fc:	str	r0, [fp, #-92]	; 0xffffffa4
   14600:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14604:	ldr	r3, [fp, #-52]	; 0xffffffcc
   14608:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1460c:	str	r0, [sp, #80]	; 0x50
   14610:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14614:	str	r0, [sp, #76]	; 0x4c
   14618:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1461c:	str	r0, [sp, #108]	; 0x6c
   14620:	ldr	r0, [fp, #-36]	; 0xffffffdc
   14624:	str	r0, [fp, #-96]	; 0xffffffa0
   14628:	ldr	r9, [sp, #112]	; 0x70
   1462c:	ldr	ip, [sp, #104]	; 0x68
   14630:	ldr	lr, [sp, #100]	; 0x64
   14634:	ldr	r4, [fp, #-100]	; 0xffffff9c
   14638:	ldr	r7, [fp, #-104]	; 0xffffff98
   1463c:	b	1467c <__assert_fail@plt+0x2c04>
   14640:	ldr	r0, [sp, #108]	; 0x6c
   14644:	str	r0, [sp, #80]	; 0x50
   14648:	ldr	r0, [fp, #-96]	; 0xffffffa0
   1464c:	str	r0, [sp, #76]	; 0x4c
   14650:	str	r2, [sp, #108]	; 0x6c
   14654:	str	r3, [fp, #-96]	; 0xffffffa0
   14658:	ldr	r0, [sp, #64]	; 0x40
   1465c:	str	r0, [fp, #-84]	; 0xffffffac
   14660:	ldr	r0, [sp, #100]	; 0x64
   14664:	str	r0, [sp, #72]	; 0x48
   14668:	ldr	r0, [sp, #104]	; 0x68
   1466c:	str	r0, [sp, #68]	; 0x44
   14670:	mov	lr, r4
   14674:	mov	ip, r7
   14678:	ldr	sl, [sp, #116]	; 0x74
   1467c:	ldr	r5, [fp, #-108]	; 0xffffff94
   14680:	str	r5, [sp, #64]	; 0x40
   14684:	ldr	r6, [sp, #108]	; 0x6c
   14688:	str	r3, [fp, #-112]	; 0xffffff90
   1468c:	str	r2, [fp, #-108]	; 0xffffff94
   14690:	str	r7, [fp, #-104]	; 0xffffff98
   14694:	str	r4, [fp, #-100]	; 0xffffff9c
   14698:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1469c:	str	r1, [sp, #32]
   146a0:	str	sl, [sp, #36]	; 0x24
   146a4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   146a8:	str	r0, [sp, #40]	; 0x28
   146ac:	ldr	r0, [fp, #-92]	; 0xffffffa4
   146b0:	str	r0, [sp, #44]	; 0x2c
   146b4:	str	lr, [sp]
   146b8:	str	ip, [sp, #4]
   146bc:	str	r6, [sp, #8]
   146c0:	ldr	r3, [fp, #-96]	; 0xffffffa0
   146c4:	str	r3, [sp, #12]
   146c8:	str	lr, [sp, #16]
   146cc:	mov	r5, r1
   146d0:	str	ip, [sp, #20]
   146d4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   146d8:	str	r8, [sp, #24]
   146dc:	str	r9, [sp, #28]
   146e0:	sub	r0, fp, #72	; 0x48
   146e4:	mov	r2, r6
   146e8:	bl	15cf8 <__assert_fail@plt+0x4280>
   146ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   146f0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   146f4:	ldr	r7, [fp, #8]
   146f8:	adds	ip, r0, r7
   146fc:	adcs	r4, r1, #0
   14700:	adcs	r6, r2, #0
   14704:	adc	r7, r3, #0
   14708:	subs	r0, r8, r6
   1470c:	sbcs	r0, r9, r7
   14710:	ldr	r2, [sp, #92]	; 0x5c
   14714:	ldr	r3, [sp, #88]	; 0x58
   14718:	ldr	lr, [sp, #84]	; 0x54
   1471c:	bcc	14740 <__assert_fail@plt+0x2cc8>
   14720:	subs	r0, ip, r5
   14724:	sbcs	r0, r4, sl
   14728:	bcc	14768 <__assert_fail@plt+0x2cf0>
   1472c:	ldr	r8, [fp, #-76]	; 0xffffffb4
   14730:	eor	r0, r6, r8
   14734:	eor	r1, r7, r9
   14738:	orrs	r0, r0, r1
   1473c:	bne	14768 <__assert_fail@plt+0x2cf0>
   14740:	subs	ip, ip, r5
   14744:	sbcs	r4, r4, sl
   14748:	mov	r0, #0
   1474c:	movwcc	r0, #1
   14750:	cmp	r0, #0
   14754:	mvnne	r0, #0
   14758:	subs	r1, r0, r8
   1475c:	sbc	r0, r0, r9
   14760:	adds	r6, r1, r6
   14764:	adc	r7, r0, r7
   14768:	str	r6, [sp, #108]	; 0x6c
   1476c:	ldr	r0, [sp, #80]	; 0x50
   14770:	subs	r6, r0, r6
   14774:	str	r7, [fp, #-96]	; 0xffffffa0
   14778:	ldr	r0, [sp, #76]	; 0x4c
   1477c:	sbc	r7, r0, r7
   14780:	subs	r5, r6, #1
   14784:	sbc	r0, r7, #0
   14788:	str	ip, [sp, #100]	; 0x64
   1478c:	ldr	r1, [sp, #72]	; 0x48
   14790:	subs	ip, r1, ip
   14794:	str	r4, [sp, #104]	; 0x68
   14798:	ldr	r1, [sp, #68]	; 0x44
   1479c:	sbcs	r1, r1, r4
   147a0:	mov	r4, #0
   147a4:	movwcc	r4, #1
   147a8:	cmp	r4, #0
   147ac:	moveq	r5, r6
   147b0:	moveq	r0, r7
   147b4:	cmn	r0, #1
   147b8:	ble	147d4 <__assert_fail@plt+0x2d5c>
   147bc:	ldr	r4, [fp, #-80]	; 0xffffffb0
   147c0:	mov	r7, r4
   147c4:	ldr	r6, [sp, #112]	; 0x70
   147c8:	ldr	r8, [fp, #-76]	; 0xffffffb4
   147cc:	ldr	sl, [sp, #116]	; 0x74
   147d0:	b	14800 <__assert_fail@plt+0x2d88>
   147d4:	ldr	r8, [fp, #-76]	; 0xffffffb4
   147d8:	adds	r5, r5, r8
   147dc:	ldr	r6, [sp, #112]	; 0x70
   147e0:	adc	r0, r0, r6
   147e4:	ldr	r4, [fp, #-80]	; 0xffffffb0
   147e8:	mov	r7, r4
   147ec:	adds	ip, ip, r4
   147f0:	ldr	sl, [sp, #116]	; 0x74
   147f4:	adcs	r1, r1, sl
   147f8:	adcs	r5, r5, #0
   147fc:	adc	r0, r0, #0
   14800:	str	r7, [sp, #32]
   14804:	str	sl, [sp, #36]	; 0x24
   14808:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1480c:	str	r4, [sp, #40]	; 0x28
   14810:	ldr	r4, [fp, #-92]	; 0xffffffa4
   14814:	str	r4, [sp, #44]	; 0x2c
   14818:	ldr	r4, [sp, #96]	; 0x60
   1481c:	stm	sp, {r4, lr}
   14820:	str	r5, [sp, #8]
   14824:	str	r0, [sp, #12]
   14828:	str	ip, [sp, #16]
   1482c:	str	r1, [sp, #20]
   14830:	str	r8, [sp, #24]
   14834:	str	r6, [sp, #28]
   14838:	sub	r0, fp, #72	; 0x48
   1483c:	bl	15cf8 <__assert_fail@plt+0x4280>
   14840:	mov	r9, r0
   14844:	ldr	r0, [fp, #-84]	; 0xffffffac
   14848:	and	r0, r0, #31
   1484c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14850:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14854:	cmp	r0, #1
   14858:	mov	r4, r8
   1485c:	str	r9, [sp, #96]	; 0x60
   14860:	str	r2, [sp, #92]	; 0x5c
   14864:	str	r3, [sp, #88]	; 0x58
   14868:	str	r1, [sp, #84]	; 0x54
   1486c:	bne	148c8 <__assert_fail@plt+0x2e50>
   14870:	str	r9, [sp]
   14874:	stmib	sp, {r1, r4}
   14878:	mov	r5, r6
   1487c:	add	r0, sp, #12
   14880:	stm	r0, {r6, r7, sl}
   14884:	sub	r0, fp, #64	; 0x40
   14888:	bl	16364 <__assert_fail@plt+0x48ec>
   1488c:	eor	r0, r0, #1
   14890:	orrs	r0, r0, r1
   14894:	ldr	ip, [sp, #104]	; 0x68
   14898:	ldr	lr, [sp, #100]	; 0x64
   1489c:	ldr	r6, [sp, #108]	; 0x6c
   148a0:	bne	14a14 <__assert_fail@plt+0x2f9c>
   148a4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   148a8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   148ac:	orrs	r0, r0, r1
   148b0:	mov	r2, r6
   148b4:	ldr	r3, [fp, #-96]	; 0xffffffa0
   148b8:	mov	r0, lr
   148bc:	mov	r1, ip
   148c0:	beq	148e8 <__assert_fail@plt+0x2e70>
   148c4:	b	14a14 <__assert_fail@plt+0x2f9c>
   148c8:	mov	r5, r6
   148cc:	ldr	r2, [fp, #-108]	; 0xffffff94
   148d0:	ldr	r3, [fp, #-112]	; 0xffffff90
   148d4:	ldr	r0, [fp, #-100]	; 0xffffff9c
   148d8:	ldr	r1, [fp, #-104]	; 0xffffff98
   148dc:	ldr	ip, [sp, #104]	; 0x68
   148e0:	ldr	lr, [sp, #100]	; 0x64
   148e4:	ldr	r6, [sp, #108]	; 0x6c
   148e8:	str	r4, [fp, #-76]	; 0xffffffb4
   148ec:	ldr	r7, [fp, #-84]	; 0xffffffac
   148f0:	subs	r7, r7, #1
   148f4:	str	r7, [fp, #-84]	; 0xffffffac
   148f8:	mov	r4, r0
   148fc:	mov	r7, r1
   14900:	mov	r9, r5
   14904:	bne	14688 <__assert_fail@plt+0x2c10>
   14908:	mov	r0, r6
   1490c:	ldr	r6, [sp, #64]	; 0x40
   14910:	lsl	r5, r6, #1
   14914:	cmp	r6, #0
   14918:	mov	r2, r0
   1491c:	ldr	r1, [fp, #-96]	; 0xffffffa0
   14920:	mov	r3, r1
   14924:	str	r0, [sp, #80]	; 0x50
   14928:	str	r1, [sp, #76]	; 0x4c
   1492c:	str	r6, [fp, #-84]	; 0xffffffac
   14930:	mov	r4, lr
   14934:	mov	r7, ip
   14938:	str	lr, [sp, #72]	; 0x48
   1493c:	str	ip, [sp, #68]	; 0x44
   14940:	beq	14680 <__assert_fail@plt+0x2c08>
   14944:	str	r5, [fp, #-108]	; 0xffffff94
   14948:	ldr	r2, [sp, #108]	; 0x6c
   1494c:	ldr	r3, [fp, #-96]	; 0xffffffa0
   14950:	mov	r4, lr
   14954:	mov	r7, ip
   14958:	ldr	sl, [fp, #-76]	; 0xffffffb4
   1495c:	ldr	r8, [fp, #-80]	; 0xffffffb0
   14960:	str	r8, [sp, #32]
   14964:	ldr	r5, [sp, #116]	; 0x74
   14968:	str	r5, [sp, #36]	; 0x24
   1496c:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14970:	str	r0, [sp, #40]	; 0x28
   14974:	ldr	r0, [fp, #-92]	; 0xffffffa4
   14978:	str	r0, [sp, #44]	; 0x2c
   1497c:	stm	sp, {r4, r7}
   14980:	add	r0, sp, #8
   14984:	stm	r0, {r2, r3, r4, r7, sl}
   14988:	str	r9, [sp, #28]
   1498c:	sub	r0, fp, #72	; 0x48
   14990:	bl	15cf8 <__assert_fail@plt+0x4280>
   14994:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14998:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1499c:	ldr	r7, [fp, #8]
   149a0:	adds	r4, r0, r7
   149a4:	adcs	r7, r1, #0
   149a8:	adcs	r2, r2, #0
   149ac:	adc	r3, r3, #0
   149b0:	subs	r0, sl, r2
   149b4:	sbcs	r0, r9, r3
   149b8:	bcc	149e0 <__assert_fail@plt+0x2f68>
   149bc:	subs	r0, r4, r8
   149c0:	sbcs	r0, r7, r5
   149c4:	bcc	14a08 <__assert_fail@plt+0x2f90>
   149c8:	eor	r0, r2, sl
   149cc:	eor	r1, r3, r9
   149d0:	orrs	r0, r0, r1
   149d4:	ldr	r8, [fp, #-80]	; 0xffffffb0
   149d8:	ldr	r5, [sp, #116]	; 0x74
   149dc:	bne	14a08 <__assert_fail@plt+0x2f90>
   149e0:	subs	r4, r4, r8
   149e4:	sbcs	r7, r7, r5
   149e8:	mov	r0, #0
   149ec:	movwcc	r0, #1
   149f0:	cmp	r0, #0
   149f4:	mvnne	r0, #0
   149f8:	subs	r1, r0, sl
   149fc:	sbc	r0, r0, r9
   14a00:	adds	r2, r1, r2
   14a04:	adc	r3, r0, r3
   14a08:	subs	r6, r6, #1
   14a0c:	bne	1495c <__assert_fail@plt+0x2ee4>
   14a10:	b	14640 <__assert_fail@plt+0x2bc8>
   14a14:	str	r6, [fp, #-40]	; 0xffffffd8
   14a18:	ldr	r0, [sp, #80]	; 0x50
   14a1c:	str	r0, [fp, #-48]	; 0xffffffd0
   14a20:	ldr	r2, [fp, #-108]	; 0xffffff94
   14a24:	str	r2, [fp, #-56]	; 0xffffffc8
   14a28:	ldr	r0, [fp, #-96]	; 0xffffffa0
   14a2c:	str	r0, [fp, #-36]	; 0xffffffdc
   14a30:	ldr	r0, [sp, #76]	; 0x4c
   14a34:	str	r0, [fp, #-44]	; 0xffffffd4
   14a38:	ldr	r3, [fp, #-112]	; 0xffffff90
   14a3c:	str	r3, [fp, #-52]	; 0xffffffcc
   14a40:	mov	r7, r5
   14a44:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14a48:	str	r4, [sp, #32]
   14a4c:	ldr	r5, [sp, #116]	; 0x74
   14a50:	mov	r8, r5
   14a54:	str	r5, [sp, #36]	; 0x24
   14a58:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14a5c:	str	r0, [sp, #40]	; 0x28
   14a60:	ldr	r0, [fp, #-92]	; 0xffffffa4
   14a64:	str	r0, [sp, #44]	; 0x2c
   14a68:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14a6c:	str	r0, [sp]
   14a70:	ldr	r1, [fp, #-104]	; 0xffffff98
   14a74:	stmib	sp, {r1, r2, r3}
   14a78:	str	r0, [sp, #16]
   14a7c:	str	r1, [sp, #20]
   14a80:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14a84:	str	r6, [sp, #24]
   14a88:	str	r7, [sp, #28]
   14a8c:	sub	r0, fp, #72	; 0x48
   14a90:	bl	15cf8 <__assert_fail@plt+0x4280>
   14a94:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14a98:	ldr	r3, [fp, #-68]	; 0xffffffbc
   14a9c:	ldr	r7, [fp, #8]
   14aa0:	adds	ip, r0, r7
   14aa4:	ldr	r7, [sp, #112]	; 0x70
   14aa8:	adcs	r5, r1, #0
   14aac:	adcs	r2, r2, #0
   14ab0:	adc	r3, r3, #0
   14ab4:	subs	r0, r6, r2
   14ab8:	sbcs	r0, r7, r3
   14abc:	bcc	14ae0 <__assert_fail@plt+0x3068>
   14ac0:	subs	r0, ip, r4
   14ac4:	sbcs	r0, r5, r8
   14ac8:	bcc	14b08 <__assert_fail@plt+0x3090>
   14acc:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14ad0:	eor	r0, r2, r6
   14ad4:	eor	r1, r3, r7
   14ad8:	orrs	r0, r0, r1
   14adc:	bne	14b08 <__assert_fail@plt+0x3090>
   14ae0:	subs	ip, ip, r4
   14ae4:	sbcs	r5, r5, r8
   14ae8:	mov	r0, #0
   14aec:	movwcc	r0, #1
   14af0:	cmp	r0, #0
   14af4:	mvnne	r0, #0
   14af8:	subs	r1, r0, r6
   14afc:	sbc	r0, r0, r7
   14b00:	adds	r2, r1, r2
   14b04:	adc	r3, r0, r3
   14b08:	str	r2, [fp, #-108]	; 0xffffff94
   14b0c:	ldr	r0, [sp, #80]	; 0x50
   14b10:	subs	r7, r0, r2
   14b14:	str	r3, [fp, #-112]	; 0xffffff90
   14b18:	ldr	r0, [sp, #76]	; 0x4c
   14b1c:	sbc	r6, r0, r3
   14b20:	subs	r2, r7, #1
   14b24:	sbc	r3, r6, #0
   14b28:	ldr	r0, [sp, #72]	; 0x48
   14b2c:	subs	r0, r0, ip
   14b30:	ldr	r1, [sp, #68]	; 0x44
   14b34:	sbcs	r1, r1, r5
   14b38:	mov	r4, #0
   14b3c:	movwcc	r4, #1
   14b40:	cmp	r4, #0
   14b44:	moveq	r2, r7
   14b48:	moveq	r3, r6
   14b4c:	cmn	r3, #1
   14b50:	str	ip, [fp, #-100]	; 0xffffff9c
   14b54:	str	r5, [fp, #-104]	; 0xffffff98
   14b58:	ble	14b6c <__assert_fail@plt+0x30f4>
   14b5c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b60:	ldr	r7, [sp, #112]	; 0x70
   14b64:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14b68:	b	14b90 <__assert_fail@plt+0x3118>
   14b6c:	ldr	r6, [fp, #-76]	; 0xffffffb4
   14b70:	adds	r2, r2, r6
   14b74:	ldr	r7, [sp, #112]	; 0x70
   14b78:	adc	r3, r3, r7
   14b7c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14b80:	adds	r0, r0, r4
   14b84:	adcs	r1, r1, r8
   14b88:	adcs	r2, r2, #0
   14b8c:	adc	r3, r3, #0
   14b90:	stm	sp, {r0, r1, r6, r7}
   14b94:	str	r4, [sp, #16]
   14b98:	str	r8, [sp, #20]
   14b9c:	sub	r0, fp, #64	; 0x40
   14ba0:	bl	16364 <__assert_fail@plt+0x48ec>
   14ba4:	mov	r6, r0
   14ba8:	mov	r5, r1
   14bac:	eor	r0, r0, #1
   14bb0:	orrs	r0, r0, r1
   14bb4:	ldr	r9, [fp, #-64]	; 0xffffffc0
   14bb8:	ldr	r8, [fp, #-60]	; 0xffffffc4
   14bbc:	ldr	r2, [fp, #-108]	; 0xffffff94
   14bc0:	ldr	r3, [fp, #-112]	; 0xffffff90
   14bc4:	orrseq	r0, r9, r8
   14bc8:	beq	14a44 <__assert_fail@plt+0x2fcc>
   14bcc:	str	r2, [fp, #-56]	; 0xffffffc8
   14bd0:	str	r3, [fp, #-52]	; 0xffffffcc
   14bd4:	orrs	r0, r9, r8
   14bd8:	bne	14d84 <__assert_fail@plt+0x330c>
   14bdc:	ubfx	r0, r6, #1, #7
   14be0:	movw	r1, #64270	; 0xfb0e
   14be4:	movt	r1, #1
   14be8:	ldrb	r0, [r1, r0]
   14bec:	umull	r1, r2, r6, r0
   14bf0:	rsbs	r1, r1, #2
   14bf4:	umull	r1, r3, r1, r0
   14bf8:	mla	r2, r5, r0, r2
   14bfc:	rsc	r2, r2, #0
   14c00:	mla	r0, r2, r0, r3
   14c04:	umull	r2, r3, r1, r6
   14c08:	mla	r3, r1, r5, r3
   14c0c:	mla	r3, r0, r6, r3
   14c10:	rsbs	r7, r2, #2
   14c14:	rsc	r2, r3, #0
   14c18:	str	r2, [fp, #-92]	; 0xffffffa4
   14c1c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14c20:	mov	r9, r5
   14c24:	umull	r4, r8, r1, r7
   14c28:	umull	r3, lr, r4, r6
   14c2c:	rsbs	r3, r3, #2
   14c30:	umull	sl, r5, r4, r3
   14c34:	str	r5, [sp, #60]	; 0x3c
   14c38:	umull	r5, ip, sl, r2
   14c3c:	str	r5, [fp, #-88]	; 0xffffffa8
   14c40:	ldr	r5, [sp, #116]	; 0x74
   14c44:	str	sl, [sp, #56]	; 0x38
   14c48:	mla	ip, sl, r5, ip
   14c4c:	mla	lr, r4, r9, lr
   14c50:	ldr	r5, [fp, #-92]	; 0xffffffa4
   14c54:	mla	r1, r1, r5, r8
   14c58:	mla	r1, r0, r7, r1
   14c5c:	ldr	r7, [sp, #112]	; 0x70
   14c60:	mla	r0, r1, r6, lr
   14c64:	rsc	r0, r0, #0
   14c68:	ldr	r5, [sp, #60]	; 0x3c
   14c6c:	mla	r0, r4, r0, r5
   14c70:	mov	r4, r9
   14c74:	mla	r1, r1, r3, r0
   14c78:	mla	r8, r1, r2, ip
   14c7c:	mov	sl, #0
   14c80:	ldr	r3, [fp, #-76]	; 0xffffffb4
   14c84:	subs	r0, r3, r6
   14c88:	sbcs	r0, r7, r9
   14c8c:	mov	r5, #0
   14c90:	bcc	14cf8 <__assert_fail@plt+0x3280>
   14c94:	ldr	r5, [fp, #-88]	; 0xffffffa8
   14c98:	umull	r0, r2, r5, r4
   14c9c:	umlal	r0, r2, r8, r6
   14ca0:	mov	r4, r3
   14ca4:	mov	ip, r7
   14ca8:	umull	r3, r7, r5, r6
   14cac:	adds	r0, r0, r7
   14cb0:	adc	r2, r2, #0
   14cb4:	umull	r3, r7, r8, r6
   14cb8:	subs	r0, r0, r3
   14cbc:	sbcs	r0, r2, r7
   14cc0:	mov	r0, #0
   14cc4:	movwcc	r0, #1
   14cc8:	umull	r3, r7, r8, r9
   14ccc:	cmp	r0, #0
   14cd0:	addne	r7, r7, #1
   14cd4:	subs	r0, r4, r2
   14cd8:	mov	r4, r9
   14cdc:	sbc	r2, ip, #0
   14ce0:	subs	r0, r0, r3
   14ce4:	ldr	r5, [sp, #56]	; 0x38
   14ce8:	umull	sl, r3, r0, r5
   14cec:	mla	r0, r0, r1, r3
   14cf0:	sbc	r1, r2, r7
   14cf4:	mla	r5, r1, r5, r0
   14cf8:	mov	r0, r6
   14cfc:	mov	r1, r4
   14d00:	bl	15084 <__assert_fail@plt+0x360c>
   14d04:	cmp	r0, #0
   14d08:	beq	14d28 <__assert_fail@plt+0x32b0>
   14d0c:	mov	r0, #1
   14d10:	str	r0, [sp]
   14d14:	ldr	r0, [fp, #12]
   14d18:	mov	r2, r6
   14d1c:	mov	r3, r4
   14d20:	bl	14f3c <__assert_fail@plt+0x34c4>
   14d24:	b	14d3c <__assert_fail@plt+0x32c4>
   14d28:	mov	r0, r6
   14d2c:	mov	r1, r4
   14d30:	ldr	r2, [sp, #52]	; 0x34
   14d34:	ldr	r3, [fp, #12]
   14d38:	bl	13c70 <__assert_fail@plt+0x21f8>
   14d3c:	orrs	r0, sl, r5
   14d40:	ldr	r4, [sp, #108]	; 0x6c
   14d44:	beq	14e90 <__assert_fail@plt+0x3418>
   14d48:	mov	r0, sl
   14d4c:	mov	r1, r5
   14d50:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14d54:	mov	r3, r8
   14d58:	bl	131f4 <__assert_fail@plt+0x177c>
   14d5c:	cmp	r0, #0
   14d60:	beq	144cc <__assert_fail@plt+0x2a54>
   14d64:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14d68:	stm	sp, {r0, r8}
   14d6c:	ldr	r0, [fp, #12]
   14d70:	mov	r2, sl
   14d74:	mov	r3, r5
   14d78:	bl	13bf4 <__assert_fail@plt+0x217c>
   14d7c:	sub	sp, fp, #28
   14d80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d84:	ldr	r0, [fp, #-80]	; 0xffffffb0
   14d88:	eor	r0, r0, r6
   14d8c:	ldr	r1, [sp, #116]	; 0x74
   14d90:	eor	r1, r1, r5
   14d94:	orrs	r0, r0, r1
   14d98:	ldr	r2, [fp, #-76]	; 0xffffffb4
   14d9c:	eoreq	r0, r2, r9
   14da0:	eoreq	r1, r7, r8
   14da4:	orrseq	r0, r0, r1
   14da8:	beq	14e98 <__assert_fail@plt+0x3420>
   14dac:	ubfx	r0, r6, #1, #7
   14db0:	movw	r1, #64270	; 0xfb0e
   14db4:	movt	r1, #1
   14db8:	ldrb	r0, [r1, r0]
   14dbc:	umull	r1, r2, r6, r0
   14dc0:	rsbs	r1, r1, #2
   14dc4:	umull	r1, r3, r1, r0
   14dc8:	mla	r2, r5, r0, r2
   14dcc:	rsc	r2, r2, #0
   14dd0:	mla	r0, r2, r0, r3
   14dd4:	str	r0, [fp, #-76]	; 0xffffffb4
   14dd8:	umull	r2, r3, r1, r6
   14ddc:	mla	r3, r1, r5, r3
   14de0:	mla	r3, r0, r6, r3
   14de4:	rsbs	r2, r2, #2
   14de8:	rsc	r0, r3, #0
   14dec:	str	r0, [fp, #-84]	; 0xffffffac
   14df0:	umull	r7, r0, r1, r2
   14df4:	str	r0, [fp, #-96]	; 0xffffffa0
   14df8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   14dfc:	mov	r3, r5
   14e00:	umull	r4, r0, r7, r6
   14e04:	str	r0, [fp, #-100]	; 0xffffff9c
   14e08:	rsbs	r4, r4, #2
   14e0c:	umull	r5, r0, r7, r4
   14e10:	str	r0, [fp, #-92]	; 0xffffffa4
   14e14:	umull	r0, ip, r5, lr
   14e18:	str	r0, [fp, #-88]	; 0xffffffa8
   14e1c:	ldr	sl, [sp, #116]	; 0x74
   14e20:	mla	ip, r5, sl, ip
   14e24:	ldr	r0, [fp, #-100]	; 0xffffff9c
   14e28:	mla	sl, r7, r3, r0
   14e2c:	ldr	r0, [fp, #-84]	; 0xffffffac
   14e30:	ldr	r5, [fp, #-96]	; 0xffffffa0
   14e34:	mla	r1, r1, r0, r5
   14e38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14e3c:	mla	r0, r0, r2, r1
   14e40:	mla	r1, r0, r6, sl
   14e44:	rsc	r1, r1, #0
   14e48:	ldr	r2, [fp, #-92]	; 0xffffffa4
   14e4c:	mla	r1, r7, r1, r2
   14e50:	mov	r7, r3
   14e54:	mla	r0, r0, r4, r1
   14e58:	mla	r4, r0, lr, ip
   14e5c:	mov	r0, r9
   14e60:	mov	r1, r8
   14e64:	mov	r2, r6
   14e68:	bl	131f4 <__assert_fail@plt+0x177c>
   14e6c:	cmp	r0, #0
   14e70:	ldr	r5, [fp, #8]
   14e74:	beq	14ec4 <__assert_fail@plt+0x344c>
   14e78:	stm	sp, {r6, r7}
   14e7c:	ldr	r0, [fp, #12]
   14e80:	mov	r2, r9
   14e84:	mov	r3, r8
   14e88:	bl	13bf4 <__assert_fail@plt+0x217c>
   14e8c:	b	14ee8 <__assert_fail@plt+0x3470>
   14e90:	ldr	r5, [fp, #8]
   14e94:	b	14eec <__assert_fail@plt+0x3474>
   14e98:	ldr	r0, [sp, #52]	; 0x34
   14e9c:	str	r0, [sp]
   14ea0:	ldr	r0, [fp, #12]
   14ea4:	str	r0, [sp, #4]
   14ea8:	mov	r0, r2
   14eac:	mov	r1, r7
   14eb0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   14eb4:	ldr	r3, [sp, #116]	; 0x74
   14eb8:	bl	14298 <__assert_fail@plt+0x2820>
   14ebc:	sub	sp, fp, #28
   14ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec4:	ldr	r0, [sp, #52]	; 0x34
   14ec8:	str	r0, [sp]
   14ecc:	ldr	r0, [fp, #12]
   14ed0:	str	r0, [sp, #4]
   14ed4:	mov	r0, r9
   14ed8:	mov	r1, r8
   14edc:	mov	r2, r6
   14ee0:	mov	r3, r7
   14ee4:	bl	14298 <__assert_fail@plt+0x2820>
   14ee8:	mov	r8, r4
   14eec:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14ef0:	mov	r1, r8
   14ef4:	bl	15084 <__assert_fail@plt+0x360c>
   14ef8:	cmp	r0, #0
   14efc:	beq	14f20 <__assert_fail@plt+0x34a8>
   14f00:	mov	r0, #1
   14f04:	str	r0, [sp]
   14f08:	ldr	r0, [fp, #12]
   14f0c:	ldr	r2, [fp, #-88]	; 0xffffffa8
   14f10:	mov	r3, r8
   14f14:	bl	14f3c <__assert_fail@plt+0x34c4>
   14f18:	sub	sp, fp, #28
   14f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f20:	ldr	r0, [fp, #-88]	; 0xffffffa8
   14f24:	mov	r1, r8
   14f28:	mov	r2, r5
   14f2c:	ldr	r3, [fp, #12]
   14f30:	bl	13c70 <__assert_fail@plt+0x21f8>
   14f34:	sub	sp, fp, #28
   14f38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14f40:	add	fp, sp, #24
   14f44:	mov	r1, r3
   14f48:	mov	r4, r2
   14f4c:	ldrb	lr, [r0, #250]	; 0xfa
   14f50:	sub	r3, lr, #1
   14f54:	ldr	ip, [fp, #8]
   14f58:	cmp	lr, #0
   14f5c:	beq	15010 <__assert_fail@plt+0x3598>
   14f60:	mov	r2, #8
   14f64:	add	r5, r2, lr, lsl #3
   14f68:	add	r2, lr, #223	; 0xdf
   14f6c:	mov	r6, r0
   14f70:	ldr	r7, [r6, r5]!
   14f74:	ldr	r6, [r6, #4]
   14f78:	subs	r7, r4, r7
   14f7c:	sbcs	r6, r1, r6
   14f80:	bcs	14fac <__assert_fail@plt+0x3534>
   14f84:	sub	r5, r5, #8
   14f88:	sub	r6, r2, #1
   14f8c:	sub	r2, r2, #224	; 0xe0
   14f90:	cmp	r2, #0
   14f94:	mov	r2, r6
   14f98:	bgt	14f6c <__assert_fail@plt+0x34f4>
   14f9c:	sub	r2, r6, #224	; 0xe0
   14fa0:	cmp	r3, r2
   14fa4:	bgt	14fe0 <__assert_fail@plt+0x3568>
   14fa8:	b	1500c <__assert_fail@plt+0x3594>
   14fac:	mov	r6, r0
   14fb0:	ldr	r5, [r6, r5]!
   14fb4:	eor	r5, r5, r4
   14fb8:	ldr	r6, [r6, #4]
   14fbc:	eor	r6, r6, r1
   14fc0:	orrs	r5, r5, r6
   14fc4:	ldrbeq	r1, [r0, r2]
   14fc8:	addeq	r1, r1, ip
   14fcc:	strbeq	r1, [r0, r2]
   14fd0:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   14fd4:	sub	r2, r2, #224	; 0xe0
   14fd8:	cmp	r3, r2
   14fdc:	ble	1500c <__assert_fail@plt+0x3594>
   14fe0:	lsl	r5, lr, #3
   14fe4:	add	r6, r0, r5
   14fe8:	ldrd	r8, [r6, #8]
   14fec:	strd	r8, [r6, #16]
   14ff0:	add	r6, r0, r3
   14ff4:	ldrb	r7, [r6, #224]	; 0xe0
   14ff8:	strb	r7, [r6, #225]	; 0xe1
   14ffc:	sub	r5, r5, #8
   15000:	sub	r3, r3, #1
   15004:	cmp	r3, r2
   15008:	bgt	14fe4 <__assert_fail@plt+0x356c>
   1500c:	mov	r3, r2
   15010:	add	r2, r3, #1
   15014:	add	r3, r0, r2, lsl #3
   15018:	str	r4, [r3, #16]
   1501c:	str	r1, [r3, #20]
   15020:	add	r1, r0, r2
   15024:	strb	ip, [r1, #224]	; 0xe0
   15028:	add	r1, lr, #1
   1502c:	strb	r1, [r0, #250]	; 0xfa
   15030:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15034:	push	{fp, lr}
   15038:	mov	fp, sp
   1503c:	sub	sp, sp, #8
   15040:	ldr	ip, [fp, #12]
   15044:	cmp	ip, #0
   15048:	beq	15070 <__assert_fail@plt+0x35f8>
   1504c:	ldr	lr, [fp, #8]
   15050:	movw	r1, #62920	; 0xf5c8
   15054:	movt	r1, #1
   15058:	add	lr, r1, lr
   1505c:	ldrb	r1, [lr], #1
   15060:	adds	r2, r2, r1
   15064:	adc	r3, r3, #0
   15068:	subs	ip, ip, #1
   1506c:	bne	1505c <__assert_fail@plt+0x35e4>
   15070:	mov	r1, #1
   15074:	str	r1, [sp]
   15078:	bl	14f3c <__assert_fail@plt+0x34c4>
   1507c:	mov	sp, fp
   15080:	pop	{fp, pc}
   15084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15088:	add	fp, sp, #28
   1508c:	sub	sp, sp, #356	; 0x164
   15090:	mov	r5, #0
   15094:	subs	r2, r0, #2
   15098:	sbcs	r2, r1, #0
   1509c:	bcc	15530 <__assert_fail@plt+0x3ab8>
   150a0:	mov	r5, #1
   150a4:	movw	r2, #60793	; 0xed79
   150a8:	movt	r2, #381	; 0x17d
   150ac:	subs	r2, r0, r2
   150b0:	sbcs	r2, r1, #0
   150b4:	bcc	15530 <__assert_fail@plt+0x3ab8>
   150b8:	subs	r2, r0, #1
   150bc:	sbc	r3, r1, #0
   150c0:	mov	r7, #0
   150c4:	tst	r2, #1
   150c8:	str	r2, [sp, #76]	; 0x4c
   150cc:	mov	r6, r2
   150d0:	str	r3, [sp, #72]	; 0x48
   150d4:	bne	150fc <__assert_fail@plt+0x3684>
   150d8:	mov	r7, #0
   150dc:	ldr	r2, [sp, #76]	; 0x4c
   150e0:	ldr	r3, [sp, #72]	; 0x48
   150e4:	lsrs	r3, r3, #1
   150e8:	rrx	r6, r2
   150ec:	add	r7, r7, #1
   150f0:	tst	r2, #2
   150f4:	mov	r2, r6
   150f8:	beq	150e4 <__assert_fail@plt+0x366c>
   150fc:	str	r6, [sp, #48]	; 0x30
   15100:	str	r3, [sp, #52]	; 0x34
   15104:	str	r7, [sp, #56]	; 0x38
   15108:	ubfx	r3, r0, #1, #7
   1510c:	movw	r2, #64270	; 0xfb0e
   15110:	movt	r2, #1
   15114:	ldrb	r4, [r2, r3]
   15118:	umull	r3, r2, r4, r0
   1511c:	mla	r2, r4, r1, r2
   15120:	rsbs	r3, r3, #2
   15124:	rsc	lr, r2, #0
   15128:	mov	r5, r0
   1512c:	umull	r3, r7, r3, r4
   15130:	str	r1, [sp, #92]	; 0x5c
   15134:	umull	r0, r6, r3, r0
   15138:	rsbs	r9, r0, #2
   1513c:	umull	r0, r8, r3, r9
   15140:	umull	ip, r2, r0, r5
   15144:	ldr	r1, [sp, #92]	; 0x5c
   15148:	mla	r2, r0, r1, r2
   1514c:	mla	r1, lr, r4, r7
   15150:	ldr	r7, [sp, #92]	; 0x5c
   15154:	mla	r7, r3, r7, r6
   15158:	ldr	r6, [sp, #92]	; 0x5c
   1515c:	mla	r7, r1, r5, r7
   15160:	rsc	r7, r7, #0
   15164:	mla	r3, r3, r7, r8
   15168:	mla	r1, r1, r9, r3
   1516c:	mla	r3, r1, r5, r2
   15170:	rsbs	r2, ip, #2
   15174:	rsc	r3, r3, #0
   15178:	subs	r7, r5, #2
   1517c:	sbcs	r7, r6, #0
   15180:	bcc	15564 <__assert_fail@plt+0x3aec>
   15184:	umull	r4, r7, r0, r2
   15188:	str	r4, [sp, #84]	; 0x54
   1518c:	mla	r0, r0, r3, r7
   15190:	mla	r0, r1, r2, r0
   15194:	str	r0, [sp, #80]	; 0x50
   15198:	mov	ip, #0
   1519c:	mov	r2, #1
   151a0:	mvn	r1, #63	; 0x3f
   151a4:	str	r5, [sp, #88]	; 0x58
   151a8:	mov	r3, r5
   151ac:	mov	r5, r6
   151b0:	mov	lr, #0
   151b4:	mov	r7, #0
   151b8:	mov	r9, #0
   151bc:	mov	sl, #0
   151c0:	lsrs	r6, lr, #1
   151c4:	rrx	ip, ip
   151c8:	orr	lr, r6, r3, lsl #31
   151cc:	lsrs	r5, r5, #1
   151d0:	rrx	r3, r3
   151d4:	subs	r6, r3, r2
   151d8:	sbcs	r6, r5, r7
   151dc:	bcc	151fc <__assert_fail@plt+0x3784>
   151e0:	eor	r6, r2, r3
   151e4:	eor	r0, r7, r5
   151e8:	orrs	r0, r6, r0
   151ec:	bne	15228 <__assert_fail@plt+0x37b0>
   151f0:	subs	r0, r9, ip
   151f4:	sbcs	r0, sl, lr
   151f8:	bcc	15228 <__assert_fail@plt+0x37b0>
   151fc:	subs	r0, r2, r3
   15200:	sbc	r6, r7, r5
   15204:	subs	r2, r0, #1
   15208:	sbc	r7, r6, #0
   1520c:	subs	r9, r9, ip
   15210:	sbcs	sl, sl, lr
   15214:	mov	r4, #0
   15218:	movwcc	r4, #1
   1521c:	cmp	r4, #0
   15220:	moveq	r2, r0
   15224:	moveq	r7, r6
   15228:	adds	r1, r1, #1
   1522c:	bne	151c0 <__assert_fail@plt+0x3748>
   15230:	ldr	r0, [sp, #48]	; 0x30
   15234:	str	r0, [sp, #8]
   15238:	ldr	r0, [sp, #88]	; 0x58
   1523c:	subs	r3, r0, r9
   15240:	ldr	r1, [sp, #92]	; 0x5c
   15244:	sbc	r2, r1, sl
   15248:	subs	r7, r9, r3
   1524c:	sbcs	r3, sl, r2
   15250:	ldr	r2, [sp, #52]	; 0x34
   15254:	str	r2, [sp, #12]
   15258:	ldr	r2, [sp, #56]	; 0x38
   1525c:	str	r2, [sp, #16]
   15260:	str	r9, [sp, #24]
   15264:	str	sl, [sp, #28]
   15268:	mov	r5, #0
   1526c:	mov	r2, #0
   15270:	movwcc	r2, #1
   15274:	adds	r4, r7, r0
   15278:	adc	r8, r3, r1
   1527c:	cmp	r2, #0
   15280:	moveq	r8, r3
   15284:	str	r8, [sp, #4]
   15288:	moveq	r4, r7
   1528c:	str	r4, [sp]
   15290:	ldr	r2, [sp, #84]	; 0x54
   15294:	ldr	r3, [sp, #80]	; 0x50
   15298:	bl	15a44 <__assert_fail@plt+0x3fcc>
   1529c:	cmp	r0, #0
   152a0:	beq	15530 <__assert_fail@plt+0x3ab8>
   152a4:	add	r5, sp, #96	; 0x60
   152a8:	str	r5, [sp]
   152ac:	mov	r0, #0
   152b0:	str	r0, [sp, #64]	; 0x40
   152b4:	mov	r0, #0
   152b8:	mov	r1, #0
   152bc:	ldr	r2, [sp, #76]	; 0x4c
   152c0:	ldr	r3, [sp, #72]	; 0x48
   152c4:	bl	1280c <__assert_fail@plt+0xd94>
   152c8:	add	r0, r5, #16
   152cc:	str	r0, [sp, #44]	; 0x2c
   152d0:	mov	r0, #2
   152d4:	str	r0, [sp, #60]	; 0x3c
   152d8:	ldrb	r5, [sp, #346]	; 0x15a
   152dc:	mov	r0, #0
   152e0:	str	r0, [sp, #68]	; 0x44
   152e4:	cmp	r5, #0
   152e8:	beq	15524 <__assert_fail@plt+0x3aac>
   152ec:	mov	r6, #1
   152f0:	ldr	r7, [sp, #44]	; 0x2c
   152f4:	ldrd	r2, [r7]
   152f8:	ldr	r0, [sp, #76]	; 0x4c
   152fc:	ldr	r1, [sp, #72]	; 0x48
   15300:	bl	1c2b8 <__assert_fail@plt+0xa840>
   15304:	mov	r2, r0
   15308:	mov	r3, r1
   1530c:	ldr	r0, [sp, #88]	; 0x58
   15310:	str	r0, [sp]
   15314:	ldr	r0, [sp, #92]	; 0x5c
   15318:	str	r0, [sp, #4]
   1531c:	ldr	r0, [sp, #84]	; 0x54
   15320:	str	r0, [sp, #8]
   15324:	ldr	r0, [sp, #80]	; 0x50
   15328:	add	r1, sp, #12
   1532c:	stm	r1, {r0, r9, sl}
   15330:	mov	r0, r4
   15334:	mov	r1, r8
   15338:	bl	15b34 <__assert_fail@plt+0x40bc>
   1533c:	eor	r1, r1, sl
   15340:	eor	r0, r0, r9
   15344:	orrs	r0, r0, r1
   15348:	beq	15360 <__assert_fail@plt+0x38e8>
   1534c:	add	r7, r7, #8
   15350:	add	r1, r6, #1
   15354:	cmp	r6, r5
   15358:	mov	r6, r1
   1535c:	bcc	152f4 <__assert_fail@plt+0x387c>
   15360:	cmp	r0, #0
   15364:	bne	15524 <__assert_fail@plt+0x3aac>
   15368:	movw	r0, #62920	; 0xf5c8
   1536c:	movt	r0, #1
   15370:	ldr	r1, [sp, #68]	; 0x44
   15374:	ldrb	r0, [r0, r1]
   15378:	ldr	r7, [sp, #60]	; 0x3c
   1537c:	adds	r7, r7, r0
   15380:	ldr	r3, [sp, #64]	; 0x40
   15384:	adc	r3, r3, #0
   15388:	umull	r0, r1, r3, r9
   1538c:	umlal	r0, r1, r7, sl
   15390:	umull	r4, r2, r7, r9
   15394:	adds	r8, r0, r2
   15398:	adc	r0, r1, #0
   1539c:	str	r7, [sp, #60]	; 0x3c
   153a0:	umull	r1, r2, r7, sl
   153a4:	subs	r1, r8, r1
   153a8:	sbcs	r1, r0, r2
   153ac:	mov	r1, #0
   153b0:	movwcc	r1, #1
   153b4:	str	r3, [sp, #64]	; 0x40
   153b8:	umull	r2, r3, r3, sl
   153bc:	cmp	r1, #0
   153c0:	addne	r3, r3, #1
   153c4:	adds	r0, r2, r0
   153c8:	adc	r1, r3, #0
   153cc:	orrs	r2, r0, r1
   153d0:	bne	1545c <__assert_fail@plt+0x39e4>
   153d4:	mov	r0, r4
   153d8:	mov	r1, r8
   153dc:	ldr	r7, [sp, #88]	; 0x58
   153e0:	mov	r2, r7
   153e4:	ldr	r6, [sp, #92]	; 0x5c
   153e8:	mov	r3, r6
   153ec:	bl	1c2b8 <__assert_fail@plt+0xa840>
   153f0:	mov	r4, r2
   153f4:	mov	r8, r3
   153f8:	str	r9, [sp, #24]
   153fc:	str	sl, [sp, #28]
   15400:	stm	sp, {r4, r8}
   15404:	ldr	r0, [sp, #48]	; 0x30
   15408:	str	r0, [sp, #8]
   1540c:	ldr	r0, [sp, #52]	; 0x34
   15410:	str	r0, [sp, #12]
   15414:	ldr	r0, [sp, #56]	; 0x38
   15418:	str	r0, [sp, #16]
   1541c:	mov	r0, r7
   15420:	mov	r1, r6
   15424:	ldr	r2, [sp, #84]	; 0x54
   15428:	ldr	r3, [sp, #80]	; 0x50
   1542c:	bl	15a44 <__assert_fail@plt+0x3fcc>
   15430:	cmp	r0, #0
   15434:	beq	1552c <__assert_fail@plt+0x3ab4>
   15438:	ldr	r0, [sp, #68]	; 0x44
   1543c:	mov	r1, r0
   15440:	add	r1, r0, #1
   15444:	mov	r0, r1
   15448:	str	r1, [sp, #68]	; 0x44
   1544c:	lsr	r0, r1, #2
   15450:	cmp	r0, #166	; 0xa6
   15454:	bls	152e4 <__assert_fail@plt+0x386c>
   15458:	b	1553c <__assert_fail@plt+0x3ac4>
   1545c:	ldr	r7, [sp, #88]	; 0x58
   15460:	subs	r2, r0, r7
   15464:	ldr	ip, [sp, #92]	; 0x5c
   15468:	sbcs	r2, r1, ip
   1546c:	bcs	15584 <__assert_fail@plt+0x3b0c>
   15470:	mov	lr, #0
   15474:	mvn	r3, #63	; 0x3f
   15478:	mov	r2, r7
   1547c:	str	ip, [sp, #40]	; 0x28
   15480:	mov	ip, #0
   15484:	lsrs	r7, ip, #1
   15488:	rrx	lr, lr
   1548c:	orr	ip, r7, r2, lsl #31
   15490:	ldr	r7, [sp, #40]	; 0x28
   15494:	lsrs	r7, r7, #1
   15498:	rrx	r2, r2
   1549c:	subs	r6, r2, r0
   154a0:	sbcs	r6, r7, r1
   154a4:	str	r7, [sp, #40]	; 0x28
   154a8:	bcc	154cc <__assert_fail@plt+0x3a54>
   154ac:	eor	r6, r0, r2
   154b0:	eor	r7, r1, r7
   154b4:	orrs	r6, r6, r7
   154b8:	bne	15510 <__assert_fail@plt+0x3a98>
   154bc:	subs	r6, r4, lr
   154c0:	sbcs	r6, r8, ip
   154c4:	ldr	r7, [sp, #40]	; 0x28
   154c8:	bcc	15510 <__assert_fail@plt+0x3a98>
   154cc:	subs	r6, r0, r2
   154d0:	sbc	r7, r1, r7
   154d4:	subs	r0, r6, #1
   154d8:	sbc	r1, r7, #0
   154dc:	subs	r4, r4, lr
   154e0:	sbcs	r8, r8, ip
   154e4:	str	r2, [sp, #36]	; 0x24
   154e8:	mov	r2, ip
   154ec:	mov	ip, lr
   154f0:	mov	lr, #0
   154f4:	movwcc	lr, #1
   154f8:	cmp	lr, #0
   154fc:	mov	lr, ip
   15500:	mov	ip, r2
   15504:	ldr	r2, [sp, #36]	; 0x24
   15508:	moveq	r0, r6
   1550c:	moveq	r1, r7
   15510:	adds	r3, r3, #1
   15514:	ldr	r6, [sp, #92]	; 0x5c
   15518:	ldr	r7, [sp, #88]	; 0x58
   1551c:	bne	15484 <__assert_fail@plt+0x3a0c>
   15520:	b	153f8 <__assert_fail@plt+0x3980>
   15524:	mov	r5, #1
   15528:	b	15530 <__assert_fail@plt+0x3ab8>
   1552c:	mov	r5, #0
   15530:	mov	r0, r5
   15534:	sub	sp, fp, #28
   15538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1553c:	movw	r1, #51261	; 0xc83d
   15540:	movt	r1, #1
   15544:	mov	r0, #0
   15548:	mov	r2, #5
   1554c:	bl	11754 <dcgettext@plt>
   15550:	mov	r2, r0
   15554:	mov	r0, #0
   15558:	mov	r1, #0
   1555c:	bl	11850 <error@plt>
   15560:	bl	11a60 <abort@plt>
   15564:	movw	r0, #51311	; 0xc86f
   15568:	movt	r0, #1
   1556c:	movw	r1, #51248	; 0xc830
   15570:	movt	r1, #1
   15574:	movw	r3, #51321	; 0xc879
   15578:	movt	r3, #1
   1557c:	movw	r2, #1214	; 0x4be
   15580:	bl	11a78 <__assert_fail@plt>
   15584:	movw	r0, #51346	; 0xc892
   15588:	movt	r0, #1
   1558c:	movw	r1, #51248	; 0xc830
   15590:	movt	r1, #1
   15594:	movw	r3, #51321	; 0xc879
   15598:	movt	r3, #1
   1559c:	movw	r2, #1262	; 0x4ee
   155a0:	bl	11a78 <__assert_fail@plt>
   155a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155a8:	add	fp, sp, #28
   155ac:	sub	sp, sp, #84	; 0x54
   155b0:	mov	r7, r0
   155b4:	ldr	r6, [fp, #20]
   155b8:	str	r2, [fp, #-52]	; 0xffffffcc
   155bc:	str	r2, [sp]
   155c0:	str	r3, [fp, #-48]	; 0xffffffd0
   155c4:	stmib	sp, {r3, r6}
   155c8:	ldr	r1, [fp, #8]
   155cc:	ldr	r2, [fp, #12]
   155d0:	sub	r0, fp, #40	; 0x28
   155d4:	str	r7, [fp, #-44]	; 0xffffffd4
   155d8:	mov	r3, r7
   155dc:	bl	1577c <__assert_fail@plt+0x3d04>
   155e0:	ldr	ip, [r6]
   155e4:	ldr	sl, [r6, #4]
   155e8:	eor	r2, r1, sl
   155ec:	eor	r3, r0, ip
   155f0:	orrs	r2, r3, r2
   155f4:	ldr	r2, [fp, #-40]	; 0xffffffd8
   155f8:	ldr	r3, [fp, #-36]	; 0xffffffdc
   155fc:	bne	15624 <__assert_fail@plt+0x3bac>
   15600:	ldr	r7, [fp, #20]
   15604:	ldr	r6, [r7, #8]
   15608:	ldr	r9, [r7, #12]
   1560c:	eor	r5, r3, r9
   15610:	eor	r7, r2, r6
   15614:	ldr	r6, [fp, #20]
   15618:	orrs	r7, r7, r5
   1561c:	mov	r4, #1
   15620:	beq	15770 <__assert_fail@plt+0x3cf8>
   15624:	ldr	r5, [fp, #-44]	; 0xffffffd4
   15628:	ldr	lr, [r5]
   1562c:	ldr	r4, [r5, #4]
   15630:	str	r4, [sp, #48]	; 0x30
   15634:	ldr	r4, [r5, #12]
   15638:	mov	r7, r6
   1563c:	ldr	r6, [r7, #8]!
   15640:	str	r7, [sp, #52]	; 0x34
   15644:	ldr	r7, [r7, #4]
   15648:	ldr	r9, [r5, #8]!
   1564c:	str	r5, [sp, #56]	; 0x38
   15650:	subs	r6, r9, r6
   15654:	sbc	r7, r4, r7
   15658:	subs	r9, r6, #1
   1565c:	sbc	r8, r7, #0
   15660:	subs	lr, lr, ip
   15664:	ldr	r5, [sp, #48]	; 0x30
   15668:	sbcs	sl, r5, sl
   1566c:	mov	r4, #0
   15670:	movwcc	r4, #1
   15674:	cmp	r4, #0
   15678:	mov	r5, r9
   1567c:	mov	r9, lr
   15680:	moveq	r5, r6
   15684:	moveq	r8, r7
   15688:	eor	r7, r0, lr
   1568c:	eor	r6, r1, sl
   15690:	orrs	r7, r7, r6
   15694:	moveq	r4, #1
   15698:	eoreq	r7, r2, r5
   1569c:	eoreq	r6, r3, r8
   156a0:	orrseq	r7, r7, r6
   156a4:	beq	15770 <__assert_fail@plt+0x3cf8>
   156a8:	ldr	r7, [fp, #16]
   156ac:	cmp	r7, #2
   156b0:	bcc	15764 <__assert_fail@plt+0x3cec>
   156b4:	str	r5, [sp, #48]	; 0x30
   156b8:	mov	r7, #1
   156bc:	ldr	r6, [sp, #56]	; 0x38
   156c0:	ldm	r6, {r4, ip}
   156c4:	ldr	r6, [fp, #-44]	; 0xffffffd4
   156c8:	ldr	r5, [r6, #4]
   156cc:	ldr	r6, [r6]
   156d0:	str	r6, [sp, #32]
   156d4:	str	r5, [sp, #36]	; 0x24
   156d8:	ldr	r6, [fp, #-52]	; 0xffffffcc
   156dc:	str	r6, [sp, #40]	; 0x28
   156e0:	ldr	r6, [fp, #-48]	; 0xffffffd0
   156e4:	str	r6, [sp, #44]	; 0x2c
   156e8:	stm	sp, {r0, r1, r2, r3}
   156ec:	add	lr, sp, #16
   156f0:	stm	lr, {r0, r1, r4, ip}
   156f4:	sub	r0, fp, #40	; 0x28
   156f8:	bl	15cf8 <__assert_fail@plt+0x4280>
   156fc:	eor	r2, r1, sl
   15700:	eor	r3, r0, r9
   15704:	orrs	r2, r3, r2
   15708:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1570c:	ldr	r3, [fp, #-36]	; 0xffffffdc
   15710:	ldreq	r6, [sp, #48]	; 0x30
   15714:	eoreq	r6, r2, r6
   15718:	eoreq	r5, r3, r8
   1571c:	orrseq	r6, r6, r5
   15720:	beq	1576c <__assert_fail@plt+0x3cf4>
   15724:	ldr	r6, [fp, #20]
   15728:	ldrd	r4, [r6]
   1572c:	eor	r6, r1, r5
   15730:	eor	r5, r0, r4
   15734:	orrs	r6, r5, r6
   15738:	bne	15754 <__assert_fail@plt+0x3cdc>
   1573c:	ldr	r6, [sp, #52]	; 0x34
   15740:	ldrd	r4, [r6]
   15744:	eor	r6, r3, r5
   15748:	eor	r5, r2, r4
   1574c:	orrs	r6, r5, r6
   15750:	beq	15764 <__assert_fail@plt+0x3cec>
   15754:	add	r7, r7, #1
   15758:	ldr	r6, [fp, #16]
   1575c:	cmp	r7, r6
   15760:	bcc	156bc <__assert_fail@plt+0x3c44>
   15764:	mov	r4, #0
   15768:	b	15770 <__assert_fail@plt+0x3cf8>
   1576c:	mov	r4, #1
   15770:	mov	r0, r4
   15774:	sub	sp, fp, #28
   15778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1577c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15780:	add	fp, sp, #28
   15784:	sub	sp, sp, #100	; 0x64
   15788:	str	r0, [fp, #-40]	; 0xffffffd8
   1578c:	ldm	r1, {r5, lr}
   15790:	ldr	ip, [r1, #8]
   15794:	ldr	r6, [r1, #12]
   15798:	str	r2, [sp, #52]	; 0x34
   1579c:	ldr	r4, [r2]
   157a0:	ldr	r2, [r2, #4]
   157a4:	ldr	r0, [r3]
   157a8:	str	r0, [fp, #-44]	; 0xffffffd4
   157ac:	ldr	r8, [r3, #4]
   157b0:	ldr	r0, [r3, #8]
   157b4:	str	r0, [fp, #-32]	; 0xffffffe0
   157b8:	ldr	sl, [r3, #12]
   157bc:	ldr	r0, [fp, #16]
   157c0:	ldr	r1, [r0]
   157c4:	str	r1, [fp, #-56]	; 0xffffffc8
   157c8:	ldr	r1, [r0, #4]
   157cc:	str	r1, [fp, #-60]	; 0xffffffc4
   157d0:	ldr	r1, [r0, #8]
   157d4:	str	r1, [fp, #-52]	; 0xffffffcc
   157d8:	ldr	r0, [r0, #12]
   157dc:	str	r0, [fp, #-48]	; 0xffffffd0
   157e0:	mvn	r9, #63	; 0x3f
   157e4:	str	sl, [sp, #64]	; 0x40
   157e8:	str	r8, [sp, #60]	; 0x3c
   157ec:	str	r2, [fp, #-36]	; 0xffffffdc
   157f0:	tst	r4, #1
   157f4:	bne	15810 <__assert_fail@plt+0x3d98>
   157f8:	ldr	r7, [fp, #-40]	; 0xffffffd8
   157fc:	ldr	r8, [fp, #-44]	; 0xffffffd4
   15800:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15804:	ldr	r1, [fp, #12]
   15808:	ldr	r2, [fp, #8]
   1580c:	b	158a0 <__assert_fail@plt+0x3e28>
   15810:	mov	r0, r8
   15814:	ldr	r8, [fp, #-44]	; 0xffffffd4
   15818:	str	r8, [sp, #32]
   1581c:	str	r0, [sp, #36]	; 0x24
   15820:	ldr	r0, [fp, #8]
   15824:	str	r0, [sp, #40]	; 0x28
   15828:	ldr	r0, [fp, #12]
   1582c:	str	r0, [sp, #44]	; 0x2c
   15830:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15834:	str	r0, [sp]
   15838:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1583c:	stmib	sp, {r0, ip}
   15840:	str	r6, [sp, #12]
   15844:	str	r5, [sp, #16]
   15848:	str	lr, [sp, #20]
   1584c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15850:	str	r0, [sp, #24]
   15854:	str	sl, [sp, #28]
   15858:	ldr	r7, [fp, #-40]	; 0xffffffd8
   1585c:	mov	r0, r7
   15860:	ldr	r2, [fp, #-52]	; 0xffffffcc
   15864:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15868:	str	lr, [sp, #56]	; 0x38
   1586c:	mov	sl, ip
   15870:	bl	15cf8 <__assert_fail@plt+0x4280>
   15874:	mov	ip, sl
   15878:	ldr	lr, [sp, #56]	; 0x38
   1587c:	ldr	r2, [fp, #8]
   15880:	str	r0, [fp, #-56]	; 0xffffffc8
   15884:	str	r1, [fp, #-60]	; 0xffffffc4
   15888:	ldr	r1, [r7]
   1588c:	ldr	r0, [r7, #4]
   15890:	str	r1, [fp, #-52]	; 0xffffffcc
   15894:	ldr	r1, [fp, #12]
   15898:	str	r0, [fp, #-48]	; 0xffffffd0
   1589c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   158a0:	str	r8, [sp, #32]
   158a4:	ldr	r8, [sp, #60]	; 0x3c
   158a8:	str	r8, [sp, #36]	; 0x24
   158ac:	str	r2, [sp, #40]	; 0x28
   158b0:	str	r1, [sp, #44]	; 0x2c
   158b4:	stm	sp, {r5, lr}
   158b8:	str	ip, [sp, #8]
   158bc:	str	r6, [sp, #12]
   158c0:	str	r5, [sp, #16]
   158c4:	str	lr, [sp, #20]
   158c8:	str	r0, [sp, #24]
   158cc:	ldr	sl, [sp, #64]	; 0x40
   158d0:	str	sl, [sp, #28]
   158d4:	mov	r0, r7
   158d8:	mov	r2, ip
   158dc:	mov	r3, r6
   158e0:	bl	15cf8 <__assert_fail@plt+0x4280>
   158e4:	mov	r5, r0
   158e8:	mov	lr, r1
   158ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   158f0:	lsrs	r2, r2, #1
   158f4:	rrx	r4, r4
   158f8:	adds	r9, r9, #1
   158fc:	ldr	ip, [r7]
   15900:	ldr	r6, [r7, #4]
   15904:	bne	157ec <__assert_fail@plt+0x3d74>
   15908:	ldr	r0, [sp, #52]	; 0x34
   1590c:	ldr	r4, [r0, #8]
   15910:	ldr	r9, [r0, #12]
   15914:	orrs	r0, r4, r9
   15918:	beq	15a24 <__assert_fail@plt+0x3fac>
   1591c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15920:	tst	r4, #1
   15924:	ldr	r7, [fp, #-32]	; 0xffffffe0
   15928:	ldr	r1, [fp, #12]
   1592c:	ldr	r2, [fp, #8]
   15930:	bne	1593c <__assert_fail@plt+0x3ec4>
   15934:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15938:	b	159c0 <__assert_fail@plt+0x3f48>
   1593c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15940:	str	r0, [sp, #32]
   15944:	str	r8, [sp, #36]	; 0x24
   15948:	str	r2, [sp, #40]	; 0x28
   1594c:	str	r1, [sp, #44]	; 0x2c
   15950:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15954:	str	r1, [sp]
   15958:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1595c:	stmib	sp, {r1, ip}
   15960:	str	r6, [sp, #12]
   15964:	str	r5, [sp, #16]
   15968:	str	lr, [sp, #20]
   1596c:	str	r7, [sp, #24]
   15970:	str	sl, [sp, #28]
   15974:	mov	r0, r3
   15978:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1597c:	ldr	r3, [fp, #-48]	; 0xffffffd0
   15980:	mov	r7, lr
   15984:	str	ip, [fp, #-36]	; 0xffffffdc
   15988:	bl	15cf8 <__assert_fail@plt+0x4280>
   1598c:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15990:	ldr	ip, [fp, #-36]	; 0xffffffdc
   15994:	mov	lr, r7
   15998:	ldr	r2, [fp, #8]
   1599c:	str	r0, [fp, #-56]	; 0xffffffc8
   159a0:	ldr	r7, [fp, #-32]	; 0xffffffe0
   159a4:	str	r1, [fp, #-60]	; 0xffffffc4
   159a8:	ldr	r1, [r3]
   159ac:	ldr	r0, [r3, #4]
   159b0:	str	r0, [fp, #-48]	; 0xffffffd0
   159b4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   159b8:	str	r1, [fp, #-52]	; 0xffffffcc
   159bc:	ldr	r1, [fp, #12]
   159c0:	str	r0, [sp, #32]
   159c4:	str	r8, [sp, #36]	; 0x24
   159c8:	str	r2, [sp, #40]	; 0x28
   159cc:	str	r1, [sp, #44]	; 0x2c
   159d0:	stm	sp, {r5, lr}
   159d4:	str	ip, [sp, #8]
   159d8:	str	r6, [sp, #12]
   159dc:	str	r5, [sp, #16]
   159e0:	str	lr, [sp, #20]
   159e4:	str	r7, [sp, #24]
   159e8:	str	sl, [sp, #28]
   159ec:	mov	r0, r3
   159f0:	mov	r2, ip
   159f4:	mov	r3, r6
   159f8:	bl	15cf8 <__assert_fail@plt+0x4280>
   159fc:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a00:	mov	r5, r0
   15a04:	mov	lr, r1
   15a08:	lsrs	r9, r9, #1
   15a0c:	rrx	r4, r4
   15a10:	orrs	r0, r4, r9
   15a14:	ldr	ip, [r3]
   15a18:	ldr	r6, [r3, #4]
   15a1c:	bne	15920 <__assert_fail@plt+0x3ea8>
   15a20:	b	15a28 <__assert_fail@plt+0x3fb0>
   15a24:	ldr	r3, [fp, #-40]	; 0xffffffd8
   15a28:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15a2c:	ldr	r1, [fp, #-48]	; 0xffffffd0
   15a30:	strd	r0, [r3]
   15a34:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15a38:	ldr	r1, [fp, #-60]	; 0xffffffc4
   15a3c:	sub	sp, fp, #28
   15a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a48:	add	fp, sp, #28
   15a4c:	sub	sp, sp, #36	; 0x24
   15a50:	mov	r6, r1
   15a54:	mov	r7, r0
   15a58:	str	r3, [sp, #28]
   15a5c:	str	r2, [sp, #24]
   15a60:	stm	sp, {r0, r1, r2, r3}
   15a64:	ldr	r4, [fp, #36]	; 0x24
   15a68:	str	r4, [sp, #20]
   15a6c:	ldr	r5, [fp, #32]
   15a70:	str	r5, [sp, #16]
   15a74:	add	r3, fp, #8
   15a78:	ldm	r3, {r0, r1, r2, r3}
   15a7c:	bl	15b34 <__assert_fail@plt+0x40bc>
   15a80:	eor	r2, r1, r4
   15a84:	eor	r3, r0, r5
   15a88:	orr	r2, r3, r2
   15a8c:	subs	r8, r7, r5
   15a90:	str	r6, [sp, #32]
   15a94:	sbc	r9, r6, r4
   15a98:	mov	r5, #1
   15a9c:	cmp	r2, #0
   15aa0:	eorne	r2, r0, r8
   15aa4:	eorne	r3, r1, r9
   15aa8:	orrsne	r2, r2, r3
   15aac:	beq	15b28 <__assert_fail@plt+0x40b0>
   15ab0:	ldr	r6, [fp, #24]
   15ab4:	cmp	r6, #2
   15ab8:	bcc	15b1c <__assert_fail@plt+0x40a4>
   15abc:	mov	sl, #2
   15ac0:	ldr	r4, [sp, #28]
   15ac4:	ldr	r5, [sp, #24]
   15ac8:	str	r7, [sp]
   15acc:	ldr	r2, [sp, #32]
   15ad0:	stmib	sp, {r2, r5}
   15ad4:	str	r4, [sp, #12]
   15ad8:	mov	r2, r0
   15adc:	mov	r3, r1
   15ae0:	bl	15c10 <__assert_fail@plt+0x4198>
   15ae4:	eor	r2, r1, r9
   15ae8:	eor	r3, r0, r8
   15aec:	orrs	r2, r3, r2
   15af0:	beq	15b24 <__assert_fail@plt+0x40ac>
   15af4:	ldr	r2, [fp, #32]
   15af8:	eor	r2, r0, r2
   15afc:	ldr	r3, [fp, #36]	; 0x24
   15b00:	eor	r3, r1, r3
   15b04:	orrs	r2, r2, r3
   15b08:	beq	15b1c <__assert_fail@plt+0x40a4>
   15b0c:	add	r2, sl, #1
   15b10:	cmp	sl, r6
   15b14:	mov	sl, r2
   15b18:	bcc	15ac8 <__assert_fail@plt+0x4050>
   15b1c:	mov	r5, #0
   15b20:	b	15b28 <__assert_fail@plt+0x40b0>
   15b24:	mov	r5, #1
   15b28:	mov	r0, r5
   15b2c:	sub	sp, fp, #28
   15b30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b38:	add	fp, sp, #28
   15b3c:	sub	sp, sp, #28
   15b40:	mov	r5, r0
   15b44:	ands	r0, r2, #1
   15b48:	ldr	r0, [fp, #28]
   15b4c:	movne	r0, r1
   15b50:	str	r0, [sp, #24]
   15b54:	ldr	r0, [fp, #24]
   15b58:	movne	r0, r5
   15b5c:	str	r0, [sp, #20]
   15b60:	orrs	r0, r2, r3
   15b64:	beq	15c00 <__assert_fail@plt+0x4188>
   15b68:	mov	r7, r2
   15b6c:	mov	r4, r1
   15b70:	ldr	r0, [fp, #20]
   15b74:	add	r9, fp, #8
   15b78:	ldm	r9, {r6, r8, r9}
   15b7c:	stm	sp, {r6, r8, r9}
   15b80:	str	r0, [sp, #12]
   15b84:	mov	r0, r5
   15b88:	mov	r1, r4
   15b8c:	mov	r2, r5
   15b90:	mov	r5, r3
   15b94:	mov	r3, r4
   15b98:	bl	15c10 <__assert_fail@plt+0x4198>
   15b9c:	mov	r3, r5
   15ba0:	mov	r5, r0
   15ba4:	mov	r4, r1
   15ba8:	lsrs	r3, r3, #1
   15bac:	rrx	sl, r7
   15bb0:	tst	r7, #2
   15bb4:	beq	15be8 <__assert_fail@plt+0x4170>
   15bb8:	stm	sp, {r6, r8, r9}
   15bbc:	ldr	r0, [fp, #20]
   15bc0:	str	r0, [sp, #12]
   15bc4:	ldr	r0, [sp, #20]
   15bc8:	ldr	r1, [sp, #24]
   15bcc:	mov	r2, r5
   15bd0:	mov	r6, r3
   15bd4:	mov	r3, r4
   15bd8:	bl	15c10 <__assert_fail@plt+0x4198>
   15bdc:	mov	r3, r6
   15be0:	str	r0, [sp, #20]
   15be4:	str	r1, [sp, #24]
   15be8:	orrs	r0, sl, r3
   15bec:	mov	r7, sl
   15bf0:	ldr	r0, [fp, #20]
   15bf4:	add	r9, fp, #8
   15bf8:	ldm	r9, {r6, r8, r9}
   15bfc:	bne	15b7c <__assert_fail@plt+0x4104>
   15c00:	ldr	r0, [sp, #20]
   15c04:	ldr	r1, [sp, #24]
   15c08:	sub	sp, fp, #28
   15c0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c14:	add	fp, sp, #28
   15c18:	sub	sp, sp, #12
   15c1c:	mov	r4, r3
   15c20:	str	r3, [sp, #8]
   15c24:	mov	lr, r1
   15c28:	umull	ip, r3, r2, r0
   15c2c:	ldr	r1, [fp, #16]
   15c30:	umull	r5, r6, ip, r1
   15c34:	ldr	r7, [fp, #20]
   15c38:	mla	r7, ip, r7, r6
   15c3c:	umull	r0, r6, r4, r0
   15c40:	umlal	r0, r6, r2, lr
   15c44:	adds	ip, r0, r3
   15c48:	mla	r4, ip, r1, r7
   15c4c:	ldr	r0, [fp, #12]
   15c50:	umull	r1, r7, r4, r0
   15c54:	str	r1, [sp, #4]
   15c58:	ldr	r8, [fp, #8]
   15c5c:	umull	r9, sl, r4, r8
   15c60:	umull	r0, r1, r5, r0
   15c64:	umlal	r0, r1, r4, r8
   15c68:	adc	r4, r6, #0
   15c6c:	umull	r5, r6, r5, r8
   15c70:	adds	r0, r0, r6
   15c74:	adc	r1, r1, #0
   15c78:	mov	r5, #0
   15c7c:	subs	r0, r0, r9
   15c80:	sbcs	r0, r1, sl
   15c84:	mov	r0, #0
   15c88:	movwcc	r0, #1
   15c8c:	cmp	r0, #0
   15c90:	addne	r7, r7, #1
   15c94:	ldr	r0, [sp, #4]
   15c98:	adds	r0, r0, r1
   15c9c:	adc	r1, r7, #0
   15ca0:	umull	r2, r6, r2, lr
   15ca4:	subs	r2, ip, r2
   15ca8:	sbcs	r2, r4, r6
   15cac:	mov	r2, #0
   15cb0:	movwcc	r2, #1
   15cb4:	ldr	r3, [sp, #8]
   15cb8:	umull	r3, r7, r3, lr
   15cbc:	cmp	r2, #0
   15cc0:	addne	r7, r7, #1
   15cc4:	adds	r2, r3, r4
   15cc8:	adc	r3, r7, #0
   15ccc:	subs	r2, r2, r0
   15cd0:	sbcs	r3, r3, r1
   15cd4:	movwcc	r5, #1
   15cd8:	adds	r0, r2, r8
   15cdc:	ldr	r1, [fp, #12]
   15ce0:	adc	r1, r3, r1
   15ce4:	cmp	r5, #0
   15ce8:	moveq	r1, r3
   15cec:	moveq	r0, r2
   15cf0:	sub	sp, fp, #28
   15cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cfc:	add	fp, sp, #28
   15d00:	sub	sp, sp, #84	; 0x54
   15d04:	ldr	r6, [fp, #52]	; 0x34
   15d08:	ldr	r1, [fp, #48]	; 0x30
   15d0c:	rsbs	r7, r1, #0
   15d10:	rsc	r4, r6, #0
   15d14:	str	r3, [fp, #-32]	; 0xffffffe0
   15d18:	cmn	r3, #1
   15d1c:	ble	16268 <__assert_fail@plt+0x47f0>
   15d20:	mvn	r3, #0
   15d24:	ldr	r6, [fp, #20]
   15d28:	ldr	r1, [fp, #16]
   15d2c:	subs	r1, r3, r1
   15d30:	sbcs	r1, r3, r6
   15d34:	bge	16288 <__assert_fail@plt+0x4810>
   15d38:	str	r2, [fp, #-40]	; 0xffffffd8
   15d3c:	str	r0, [fp, #-36]	; 0xffffffdc
   15d40:	ldr	r0, [fp, #36]	; 0x24
   15d44:	ldr	r9, [fp, #32]
   15d48:	subs	r1, r3, r9
   15d4c:	sbcs	r0, r3, r0
   15d50:	bge	162a8 <__assert_fail@plt+0x4830>
   15d54:	ldr	r6, [fp, #44]	; 0x2c
   15d58:	ldr	r8, [fp, #40]	; 0x28
   15d5c:	ldr	sl, [fp, #28]
   15d60:	ldr	r3, [fp, #24]
   15d64:	ldr	lr, [fp, #12]
   15d68:	ldr	r5, [fp, #8]
   15d6c:	umull	r2, r0, r3, r5
   15d70:	str	r2, [sp, #32]
   15d74:	str	r7, [fp, #-48]	; 0xffffffd0
   15d78:	umull	ip, r1, r2, r7
   15d7c:	mla	r1, r2, r4, r1
   15d80:	str	r4, [fp, #-44]	; 0xffffffd4
   15d84:	umull	r2, r4, sl, r5
   15d88:	umlal	r2, r4, r3, lr
   15d8c:	mov	r3, lr
   15d90:	adds	r0, r2, r0
   15d94:	str	r0, [sp, #28]
   15d98:	mla	r7, r0, r7, r1
   15d9c:	umull	r0, r1, r7, r6
   15da0:	str	r1, [sp, #24]
   15da4:	str	r0, [sp, #36]	; 0x24
   15da8:	umull	r1, r0, r7, r8
   15dac:	str	r1, [sp, #16]
   15db0:	str	r0, [sp, #20]
   15db4:	umull	r1, r0, ip, r6
   15db8:	umlal	r1, r0, r7, r8
   15dbc:	str	r1, [sp, #8]
   15dc0:	str	r0, [sp, #12]
   15dc4:	ldr	r0, [fp, #36]	; 0x24
   15dc8:	umull	r0, r6, r7, r0
   15dcc:	str	r0, [sp, #4]
   15dd0:	umull	r5, sl, r7, r9
   15dd4:	ldr	r0, [fp, #36]	; 0x24
   15dd8:	umull	r0, lr, ip, r0
   15ddc:	ldr	r1, [fp, #32]
   15de0:	umlal	r0, lr, r7, r1
   15de4:	adc	r1, r4, #0
   15de8:	str	r1, [sp, #40]	; 0x28
   15dec:	ldr	r1, [fp, #32]
   15df0:	umull	r2, r1, ip, r1
   15df4:	str	r2, [sp, #48]	; 0x30
   15df8:	adds	r0, r0, r1
   15dfc:	str	r0, [sp, #44]	; 0x2c
   15e00:	adc	r8, lr, #0
   15e04:	subs	r0, r0, r5
   15e08:	sbcs	r0, r8, sl
   15e0c:	mov	r0, #0
   15e10:	movwcc	r0, #1
   15e14:	cmp	r0, #0
   15e18:	addne	r6, r6, #1
   15e1c:	ldr	r9, [fp, #20]
   15e20:	ldr	r7, [fp, #8]
   15e24:	umull	r4, r0, r9, r7
   15e28:	ldr	r1, [fp, #16]
   15e2c:	mov	r2, r1
   15e30:	umlal	r4, r0, r1, r3
   15e34:	umull	r1, r5, r1, r7
   15e38:	str	r1, [sp]
   15e3c:	adds	sl, r4, r5
   15e40:	adc	r1, r0, #0
   15e44:	umull	r5, r0, r2, r3
   15e48:	subs	r5, sl, r5
   15e4c:	sbcs	r0, r1, r0
   15e50:	mov	r7, #0
   15e54:	movwcc	r7, #1
   15e58:	umull	r5, r0, r9, r3
   15e5c:	cmp	r7, #0
   15e60:	addne	r0, r0, #1
   15e64:	adds	r3, r5, r1
   15e68:	adc	r2, r0, #0
   15e6c:	ldr	lr, [fp, #-40]	; 0xffffffd8
   15e70:	umull	r7, r5, r9, lr
   15e74:	ldr	r1, [fp, #16]
   15e78:	ldr	r0, [fp, #-32]	; 0xffffffe0
   15e7c:	umlal	r7, r5, r1, r0
   15e80:	umull	r1, r9, r1, lr
   15e84:	str	r1, [sp, #56]	; 0x38
   15e88:	adds	r7, r7, r9
   15e8c:	str	r7, [sp, #52]	; 0x34
   15e90:	adc	r0, r5, #0
   15e94:	str	r0, [fp, #-52]	; 0xffffffcc
   15e98:	adds	r3, r3, r1
   15e9c:	adc	r0, r2, r7
   15ea0:	adds	r1, r3, r8
   15ea4:	adc	r0, r0, #0
   15ea8:	ldr	r2, [sp, #4]
   15eac:	adds	r8, r1, r2
   15eb0:	adc	r1, r0, r6
   15eb4:	adds	r9, r8, #1
   15eb8:	adc	r0, r1, #0
   15ebc:	ldr	r2, [fp, #40]	; 0x28
   15ec0:	umull	r2, r7, ip, r2
   15ec4:	ldr	r2, [sp, #8]
   15ec8:	adds	r2, r2, r7
   15ecc:	ldr	r3, [sp, #12]
   15ed0:	adc	r7, r3, #0
   15ed4:	ldr	r3, [sp, #16]
   15ed8:	subs	r2, r2, r3
   15edc:	ldr	r2, [sp, #20]
   15ee0:	sbcs	r2, r7, r2
   15ee4:	mov	r2, #0
   15ee8:	movwcc	r2, #1
   15eec:	cmp	r2, #0
   15ef0:	ldr	r5, [sp, #24]
   15ef4:	addne	r5, r5, #1
   15ef8:	ldr	ip, [sp, #28]
   15efc:	ldr	r2, [sp, #32]
   15f00:	orrs	r2, r2, ip
   15f04:	mov	r2, #1
   15f08:	ldr	r3, [fp, #16]
   15f0c:	ldr	r6, [fp, #8]
   15f10:	umlal	r2, r4, r3, r6
   15f14:	moveq	r4, sl
   15f18:	ldr	r3, [sp]
   15f1c:	moveq	r2, r3
   15f20:	adds	r7, r7, r2
   15f24:	adc	r6, r4, #0
   15f28:	ldr	r3, [sp, #36]	; 0x24
   15f2c:	adds	r7, r7, r3
   15f30:	adc	r6, r6, r5
   15f34:	subs	r2, r7, r2
   15f38:	sbcs	r2, r6, r4
   15f3c:	mov	r2, #0
   15f40:	movwcc	r2, #1
   15f44:	cmp	r2, #0
   15f48:	moveq	r0, r1
   15f4c:	moveq	r9, r8
   15f50:	ldr	r1, [fp, #24]
   15f54:	ldr	r3, [fp, #12]
   15f58:	umull	r1, r2, r1, r3
   15f5c:	subs	r1, ip, r1
   15f60:	ldr	r5, [sp, #40]	; 0x28
   15f64:	sbcs	r1, r5, r2
   15f68:	mov	r1, #0
   15f6c:	movwcc	r1, #1
   15f70:	ldr	r4, [fp, #28]
   15f74:	umull	r2, r3, r4, r3
   15f78:	cmp	r1, #0
   15f7c:	addne	r3, r3, #1
   15f80:	adds	r1, r2, r5
   15f84:	adc	r2, r3, #0
   15f88:	adds	r1, r1, r7
   15f8c:	adcs	r2, r2, r6
   15f90:	adcs	r9, r9, #0
   15f94:	adc	ip, r0, #0
   15f98:	ldr	r0, [sp, #48]	; 0x30
   15f9c:	adds	sl, r1, r0
   15fa0:	ldr	r0, [sp, #44]	; 0x2c
   15fa4:	adcs	r2, r2, r0
   15fa8:	mrs	r8, CPSR
   15fac:	umull	r7, r6, r4, lr
   15fb0:	mov	r5, r4
   15fb4:	ldr	r3, [fp, #24]
   15fb8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   15fbc:	umlal	r7, r6, r3, r1
   15fc0:	umull	r4, r0, r3, lr
   15fc4:	adds	r0, r7, r0
   15fc8:	adc	r7, r6, #0
   15fcc:	umull	r6, r3, r3, r1
   15fd0:	subs	r6, r0, r6
   15fd4:	sbcs	r3, r7, r3
   15fd8:	mov	r3, #0
   15fdc:	movwcc	r3, #1
   15fe0:	umull	r6, r5, r5, r1
   15fe4:	cmp	r3, #0
   15fe8:	addne	r5, r5, #1
   15fec:	adds	r3, r6, r7
   15ff0:	adc	r5, r5, #0
   15ff4:	adds	r7, sl, r4
   15ff8:	str	r7, [sp, #36]	; 0x24
   15ffc:	adcs	r6, r2, r0
   16000:	str	r6, [sp, #32]
   16004:	adcs	r0, r3, #0
   16008:	str	r0, [fp, #-40]	; 0xffffffd8
   1600c:	adc	r0, r5, #0
   16010:	str	r0, [sp, #48]	; 0x30
   16014:	msr	CPSR_f, r8
   16018:	adcs	r5, r9, #0
   1601c:	str	r5, [sp, #16]
   16020:	adc	r8, ip, #0
   16024:	ldr	r2, [fp, #-48]	; 0xffffffd0
   16028:	umull	lr, r0, r7, r2
   1602c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   16030:	mla	r0, r7, r1, r0
   16034:	mla	r0, r6, r2, r0
   16038:	ldr	r1, [fp, #36]	; 0x24
   1603c:	umull	r1, r3, lr, r1
   16040:	ldr	r2, [fp, #32]
   16044:	umlal	r1, r3, r0, r2
   16048:	ldr	r2, [fp, #32]
   1604c:	umull	r2, r4, lr, r2
   16050:	str	r2, [fp, #-44]	; 0xffffffd4
   16054:	adds	r2, r1, r4
   16058:	str	r2, [fp, #-48]	; 0xffffffd0
   1605c:	adc	r9, r3, #0
   16060:	ldr	r1, [fp, #32]
   16064:	umull	r1, r3, r0, r1
   16068:	subs	r1, r2, r1
   1606c:	sbcs	r1, r9, r3
   16070:	mov	r3, #0
   16074:	movwcc	r3, #1
   16078:	ldr	r1, [fp, #44]	; 0x2c
   1607c:	umull	r2, r7, r0, r1
   16080:	str	r7, [sp, #40]	; 0x28
   16084:	str	r2, [sp, #44]	; 0x2c
   16088:	ldr	r6, [fp, #40]	; 0x28
   1608c:	umull	r7, r2, r0, r6
   16090:	str	r7, [sp, #24]
   16094:	str	r2, [sp, #28]
   16098:	umull	r4, sl, lr, r1
   1609c:	umlal	r4, sl, r0, r6
   160a0:	ldr	r1, [fp, #36]	; 0x24
   160a4:	umull	r0, ip, r0, r1
   160a8:	str	r0, [sp, #20]
   160ac:	cmp	r3, #0
   160b0:	addne	ip, ip, #1
   160b4:	ldr	r0, [sp, #56]	; 0x38
   160b8:	subs	r3, r5, r0
   160bc:	ldr	r5, [sp, #52]	; 0x34
   160c0:	sbcs	r3, r8, r5
   160c4:	mov	r6, r8
   160c8:	mov	r3, #0
   160cc:	movwcc	r3, #1
   160d0:	ldr	r0, [fp, #16]
   160d4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   160d8:	umull	r8, r1, r0, r2
   160dc:	subs	r7, r5, r8
   160e0:	ldr	r0, [fp, #-52]	; 0xffffffcc
   160e4:	sbcs	r1, r0, r1
   160e8:	mov	r1, #0
   160ec:	movwcc	r1, #1
   160f0:	ldr	r5, [fp, #20]
   160f4:	umull	r8, r7, r5, r2
   160f8:	cmp	r1, #0
   160fc:	addne	r7, r7, #1
   16100:	adds	r8, r8, r0
   16104:	adc	r7, r7, #0
   16108:	adds	r1, r8, #1
   1610c:	adc	r0, r7, #0
   16110:	cmp	r3, #0
   16114:	moveq	r0, r7
   16118:	moveq	r1, r8
   1611c:	adds	r1, r1, r9
   16120:	adc	r0, r0, #0
   16124:	ldr	r2, [sp, #20]
   16128:	adds	r8, r1, r2
   1612c:	adc	r1, r0, ip
   16130:	adds	r0, r8, #1
   16134:	adc	r9, r1, #0
   16138:	ldr	ip, [sp, #16]
   1613c:	adds	r2, ip, #1
   16140:	mov	r3, r6
   16144:	adc	r7, r6, #0
   16148:	ldr	r5, [sp, #36]	; 0x24
   1614c:	ldr	r6, [sp, #32]
   16150:	orrs	r5, r5, r6
   16154:	moveq	r7, r3
   16158:	moveq	r2, ip
   1615c:	ldr	r3, [fp, #40]	; 0x28
   16160:	umull	r5, r6, lr, r3
   16164:	adds	r6, r4, r6
   16168:	ldr	lr, [fp, #36]	; 0x24
   1616c:	adc	r5, sl, #0
   16170:	adds	r4, r5, r2
   16174:	adc	r3, r7, #0
   16178:	ldr	ip, [sp, #24]
   1617c:	subs	r6, r6, ip
   16180:	ldr	sl, [fp, #32]
   16184:	ldr	r6, [sp, #28]
   16188:	sbcs	r6, r5, r6
   1618c:	mov	r6, #0
   16190:	movwcc	r6, #1
   16194:	cmp	r6, #0
   16198:	ldr	r5, [sp, #40]	; 0x28
   1619c:	addne	r5, r5, #1
   161a0:	ldr	r6, [sp, #44]	; 0x2c
   161a4:	adds	r6, r4, r6
   161a8:	ldr	r4, [fp, #44]	; 0x2c
   161ac:	adc	r3, r3, r5
   161b0:	subs	r2, r6, r2
   161b4:	sbcs	r2, r3, r7
   161b8:	mov	r2, #0
   161bc:	movwcc	r2, #1
   161c0:	cmp	r2, #0
   161c4:	moveq	r9, r1
   161c8:	moveq	r0, r8
   161cc:	ldr	r1, [fp, #-40]	; 0xffffffd8
   161d0:	adds	r1, r1, r6
   161d4:	ldr	r2, [sp, #48]	; 0x30
   161d8:	adcs	r3, r2, r3
   161dc:	adcs	r0, r0, #0
   161e0:	adc	r7, r9, #0
   161e4:	ldr	r2, [fp, #-44]	; 0xffffffd4
   161e8:	adds	r2, r1, r2
   161ec:	ldr	r1, [fp, #-48]	; 0xffffffd0
   161f0:	adcs	r1, r3, r1
   161f4:	adcs	r0, r0, #0
   161f8:	adc	r3, r7, #0
   161fc:	subs	r7, sl, r0
   16200:	sbcs	r7, lr, r3
   16204:	bcc	16228 <__assert_fail@plt+0x47b0>
   16208:	ldr	r7, [fp, #40]	; 0x28
   1620c:	subs	r7, r2, r7
   16210:	sbcs	r7, r1, r4
   16214:	bcc	16254 <__assert_fail@plt+0x47dc>
   16218:	eor	r7, r0, sl
   1621c:	eor	r6, r3, lr
   16220:	orrs	r7, r7, r6
   16224:	bne	16254 <__assert_fail@plt+0x47dc>
   16228:	ldr	r7, [fp, #40]	; 0x28
   1622c:	subs	r2, r2, r7
   16230:	sbcs	r1, r1, r4
   16234:	mov	r4, #0
   16238:	movwcc	r4, #1
   1623c:	cmp	r4, #0
   16240:	mvnne	r4, #0
   16244:	subs	r7, r4, sl
   16248:	sbc	r6, r4, lr
   1624c:	adds	r0, r7, r0
   16250:	adc	r3, r6, r3
   16254:	ldr	r7, [fp, #-36]	; 0xffffffdc
   16258:	stm	r7, {r0, r3}
   1625c:	mov	r0, r2
   16260:	sub	sp, fp, #28
   16264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16268:	movw	r0, #51357	; 0xc89d
   1626c:	movt	r0, #1
   16270:	movw	r1, #51248	; 0xc830
   16274:	movt	r1, #1
   16278:	movw	r3, #51388	; 0xc8bc
   1627c:	movt	r3, #1
   16280:	movw	r2, #993	; 0x3e1
   16284:	bl	11a78 <__assert_fail@plt>
   16288:	movw	r0, #51497	; 0xc929
   1628c:	movt	r0, #1
   16290:	movw	r1, #51248	; 0xc830
   16294:	movt	r1, #1
   16298:	movw	r3, #51388	; 0xc8bc
   1629c:	movt	r3, #1
   162a0:	movw	r2, #994	; 0x3e2
   162a4:	bl	11a78 <__assert_fail@plt>
   162a8:	movw	r0, #51528	; 0xc948
   162ac:	movt	r0, #1
   162b0:	movw	r1, #51248	; 0xc830
   162b4:	movt	r1, #1
   162b8:	movw	r3, #51388	; 0xc8bc
   162bc:	movt	r3, #1
   162c0:	movw	r2, #995	; 0x3e3
   162c4:	bl	11a78 <__assert_fail@plt>
   162c8:	push	{r4, r5, r6, sl, fp, lr}
   162cc:	add	fp, sp, #16
   162d0:	mov	ip, r3
   162d4:	mov	lr, r2
   162d8:	ands	r2, r2, #1
   162dc:	mov	r3, r1
   162e0:	moveq	r3, ip
   162e4:	mov	r4, r0
   162e8:	moveq	r4, lr
   162ec:	orr	r2, r4, r3
   162f0:	moveq	ip, r1
   162f4:	moveq	lr, r0
   162f8:	cmp	r2, #0
   162fc:	beq	16358 <__assert_fail@plt+0x48e0>
   16300:	lsrs	r6, ip, #1
   16304:	rrx	r1, lr
   16308:	b	1632c <__assert_fail@plt+0x48b4>
   1630c:	eor	r2, r0, r5, asr #31
   16310:	eor	r3, r5, r5, asr #31
   16314:	subs	r4, r2, r5, asr #31
   16318:	sbc	r3, r3, r5, asr #31
   1631c:	and	r0, r0, r5, asr #31
   16320:	and	r2, r5, r5, asr #31
   16324:	adds	r1, r0, r1
   16328:	adc	r6, r2, r6
   1632c:	mov	ip, r3
   16330:	mov	r2, r4
   16334:	lsrs	r3, r3, #1
   16338:	rrx	r4, r4
   1633c:	tst	r2, #1
   16340:	beq	1632c <__assert_fail@plt+0x48b4>
   16344:	subs	r0, r4, r1
   16348:	sbc	r5, r3, r6
   1634c:	orrs	r3, r0, r5
   16350:	bne	1630c <__assert_fail@plt+0x4894>
   16354:	orr	lr, r2, #1
   16358:	mov	r0, lr
   1635c:	mov	r1, ip
   16360:	pop	{r4, r5, r6, sl, fp, pc}
   16364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16368:	add	fp, sp, #28
   1636c:	sub	sp, sp, #4
   16370:	ldr	ip, [fp, #24]
   16374:	tst	ip, #1
   16378:	beq	16548 <__assert_fail@plt+0x4ad0>
   1637c:	mov	r5, r3
   16380:	mov	lr, r2
   16384:	ldr	r1, [fp, #28]
   16388:	add	sl, fp, #12
   1638c:	ldm	sl, {r3, r9, sl}
   16390:	ldr	r8, [fp, #8]
   16394:	orr	r2, r8, r2
   16398:	orr	r4, r3, r5
   1639c:	orrs	r2, r2, r4
   163a0:	beq	163d8 <__assert_fail@plt+0x4960>
   163a4:	tst	r8, #1
   163a8:	str	r0, [sp]
   163ac:	bne	163e8 <__assert_fail@plt+0x4970>
   163b0:	lsrs	r5, r5, #1
   163b4:	rrx	r0, lr
   163b8:	lsrs	r3, r3, #1
   163bc:	rrx	r2, r8
   163c0:	orr	r3, r3, lr, lsl #31
   163c4:	tst	r8, #2
   163c8:	mov	lr, r0
   163cc:	mov	r8, r2
   163d0:	beq	163b0 <__assert_fail@plt+0x4938>
   163d4:	b	163f0 <__assert_fail@plt+0x4978>
   163d8:	stm	r0, {r9, sl}
   163dc:	mov	r0, ip
   163e0:	sub	sp, fp, #28
   163e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163e8:	mov	r2, r8
   163ec:	mov	r0, lr
   163f0:	orr	r6, r0, r9
   163f4:	orr	r4, r5, sl
   163f8:	orrs	r6, r6, r4
   163fc:	beq	16514 <__assert_fail@plt+0x4a9c>
   16400:	subs	r6, r9, r0
   16404:	sbcs	r6, sl, r5
   16408:	bcc	16428 <__assert_fail@plt+0x49b0>
   1640c:	subs	r6, ip, r2
   16410:	sbcs	r6, r1, r3
   16414:	bcs	1647c <__assert_fail@plt+0x4a04>
   16418:	eor	r6, r0, r9
   1641c:	eor	r4, r5, sl
   16420:	orrs	r6, r6, r4
   16424:	bne	1647c <__assert_fail@plt+0x4a04>
   16428:	subs	r7, r0, r9
   1642c:	sbc	lr, r5, sl
   16430:	subs	r4, r7, #1
   16434:	sbc	r5, lr, #0
   16438:	subs	r6, r2, ip
   1643c:	sbcs	r3, r3, r1
   16440:	mov	r2, #0
   16444:	movwcc	r2, #1
   16448:	cmp	r2, #0
   1644c:	moveq	r4, r7
   16450:	moveq	r5, lr
   16454:	lsrs	r5, r5, #1
   16458:	rrx	r0, r4
   1645c:	lsrs	r3, r3, #1
   16460:	rrx	r2, r6
   16464:	orr	r3, r3, r4, lsl #31
   16468:	tst	r6, #2
   1646c:	mov	r6, r2
   16470:	mov	r4, r0
   16474:	beq	16454 <__assert_fail@plt+0x49dc>
   16478:	b	16504 <__assert_fail@plt+0x4a8c>
   1647c:	subs	r6, r2, ip
   16480:	sbcs	r6, r3, r1
   16484:	mov	r6, #0
   16488:	movwcc	r6, #1
   1648c:	subs	r4, r0, r9
   16490:	sbcs	r4, r5, sl
   16494:	bcc	164b4 <__assert_fail@plt+0x4a3c>
   16498:	eor	lr, r0, r9
   1649c:	eor	r4, r5, sl
   164a0:	orr	r4, lr, r4
   164a4:	clz	r4, r4
   164a8:	lsr	r4, r4, #5
   164ac:	ands	r6, r6, r4
   164b0:	beq	16534 <__assert_fail@plt+0x4abc>
   164b4:	subs	lr, r9, r0
   164b8:	sbc	r8, sl, r5
   164bc:	subs	r6, lr, #1
   164c0:	sbc	sl, r8, #0
   164c4:	subs	r4, ip, r2
   164c8:	sbcs	r1, r1, r3
   164cc:	mov	r7, #0
   164d0:	movwcc	r7, #1
   164d4:	cmp	r7, #0
   164d8:	moveq	r6, lr
   164dc:	moveq	sl, r8
   164e0:	lsrs	sl, sl, #1
   164e4:	rrx	r9, r6
   164e8:	lsrs	r1, r1, #1
   164ec:	rrx	ip, r4
   164f0:	orr	r1, r1, r6, lsl #31
   164f4:	tst	r4, #2
   164f8:	mov	r6, r9
   164fc:	mov	r4, ip
   16500:	beq	164e0 <__assert_fail@plt+0x4a68>
   16504:	orr	r7, r0, r9
   16508:	orr	r6, r5, sl
   1650c:	orrs	r7, r7, r6
   16510:	bne	16400 <__assert_fail@plt+0x4988>
   16514:	mov	r7, #0
   16518:	ldr	r0, [sp]
   1651c:	str	r7, [r0]
   16520:	str	r7, [r0, #4]
   16524:	mov	r0, ip
   16528:	sub	sp, fp, #28
   1652c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16530:	b	162c8 <__assert_fail@plt+0x4850>
   16534:	ldr	r1, [sp]
   16538:	stm	r1, {r0, r5}
   1653c:	mov	ip, r2
   16540:	mov	r1, r3
   16544:	b	163dc <__assert_fail@plt+0x4964>
   16548:	movw	r0, #51728	; 0xca10
   1654c:	movt	r0, #1
   16550:	movw	r1, #51248	; 0xc830
   16554:	movt	r1, #1
   16558:	movw	r3, #51735	; 0xca17
   1655c:	movt	r3, #1
   16560:	mov	r2, #476	; 0x1dc
   16564:	bl	11a78 <__assert_fail@plt>
   16568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	add	fp, sp, #28
   16570:	push	{r0}		; (str r0, [sp, #-4]!)
   16574:	ldr	ip, [fp, #20]
   16578:	ldr	r0, [fp, #16]
   1657c:	orrs	r1, r0, ip
   16580:	beq	16778 <__assert_fail@plt+0x4d00>
   16584:	mov	sl, r3
   16588:	mov	r9, r2
   1658c:	ldr	r1, [fp, #12]
   16590:	ldr	r8, [fp, #8]
   16594:	orrs	r2, r2, r3
   16598:	beq	1675c <__assert_fail@plt+0x4ce4>
   1659c:	mov	r3, #0
   165a0:	cmp	r3, ip, lsr #24
   165a4:	mov	r4, r0
   165a8:	mov	r6, ip
   165ac:	bne	165d4 <__assert_fail@plt+0x4b5c>
   165b0:	mov	r3, #0
   165b4:	mov	r4, r0
   165b8:	mov	r6, ip
   165bc:	lsl	r2, r6, #8
   165c0:	orr	r6, r2, r4, lsr #24
   165c4:	lsl	r4, r4, #8
   165c8:	add	r3, r3, #8
   165cc:	cmp	r6, #16777216	; 0x1000000
   165d0:	bcc	165bc <__assert_fail@plt+0x4b44>
   165d4:	mvn	r2, #0
   165d8:	cmp	r6, #0
   165dc:	blt	16600 <__assert_fail@plt+0x4b88>
   165e0:	lsl	r5, r6, #1
   165e4:	orr	r6, r5, r4, lsr #31
   165e8:	lsl	r5, r4, #1
   165ec:	add	r3, r3, #1
   165f0:	subs	r4, r2, r4, lsl #1
   165f4:	sbcs	r4, r2, r6
   165f8:	mov	r4, r5
   165fc:	blt	165e0 <__assert_fail@plt+0x4b68>
   16600:	mov	r6, #0
   16604:	cmp	r6, sl, lsr #24
   16608:	mov	r4, r9
   1660c:	mov	r7, sl
   16610:	bne	16638 <__assert_fail@plt+0x4bc0>
   16614:	mov	r6, #0
   16618:	mov	r4, r9
   1661c:	mov	r7, sl
   16620:	lsl	r5, r7, #8
   16624:	orr	r7, r5, r4, lsr #24
   16628:	lsl	r4, r4, #8
   1662c:	add	r6, r6, #8
   16630:	cmp	r7, #16777216	; 0x1000000
   16634:	bcc	16620 <__assert_fail@plt+0x4ba8>
   16638:	subs	r5, r2, r4
   1663c:	sbcs	r5, r2, r7
   16640:	bge	16664 <__assert_fail@plt+0x4bec>
   16644:	lsl	r5, r7, #1
   16648:	orr	r7, r5, r4, lsr #31
   1664c:	lsl	r5, r4, #1
   16650:	add	r6, r6, #1
   16654:	subs	r4, r2, r4, lsl #1
   16658:	sbcs	r4, r2, r7
   1665c:	mov	r4, r5
   16660:	blt	16644 <__assert_fail@plt+0x4bcc>
   16664:	sub	lr, r3, r6
   16668:	cmp	lr, #1
   1666c:	blt	16764 <__assert_fail@plt+0x4cec>
   16670:	ldr	r7, [fp, #28]
   16674:	rsb	r6, lr, #32
   16678:	mov	r4, r0
   1667c:	lsr	r2, r0, r6
   16680:	orr	r2, r2, ip, lsl lr
   16684:	sub	r3, lr, #32
   16688:	cmp	r3, #0
   1668c:	lslge	r2, r0, r3
   16690:	rsb	r5, lr, #64	; 0x40
   16694:	lsr	ip, r7, r5
   16698:	cmp	r6, #0
   1669c:	movwge	ip, #0
   166a0:	orr	r2, ip, r2
   166a4:	ldr	ip, [fp, #24]
   166a8:	lsr	r0, ip, r5
   166ac:	rsb	r5, r5, #32
   166b0:	orr	r0, r0, r7, lsl r5
   166b4:	cmp	r6, #0
   166b8:	lsrge	r0, r7, r6
   166bc:	lsl	r5, r4, lr
   166c0:	cmp	r3, #0
   166c4:	movwge	r5, #0
   166c8:	orr	r5, r0, r5
   166cc:	lsr	r0, ip, r6
   166d0:	orr	r6, r0, r7, lsl lr
   166d4:	lslge	r6, ip, r3
   166d8:	lsl	r7, ip, lr
   166dc:	cmp	r3, #0
   166e0:	movwge	r7, #0
   166e4:	mov	r4, r5
   166e8:	subs	r0, r5, r9
   166ec:	sbcs	r0, r2, sl
   166f0:	bcc	16710 <__assert_fail@plt+0x4c98>
   166f4:	subs	r0, r8, r7
   166f8:	sbcs	r0, r1, r6
   166fc:	bcc	1673c <__assert_fail@plt+0x4cc4>
   16700:	eor	r0, r9, r4
   16704:	eor	r5, sl, r2
   16708:	orrs	r0, r0, r5
   1670c:	bne	1673c <__assert_fail@plt+0x4cc4>
   16710:	subs	r0, r9, r4
   16714:	sbc	r5, sl, r2
   16718:	subs	r9, r0, #1
   1671c:	sbc	sl, r5, #0
   16720:	subs	r8, r8, r7
   16724:	sbcs	r1, r1, r6
   16728:	mov	r3, #0
   1672c:	movwcc	r3, #1
   16730:	cmp	r3, #0
   16734:	moveq	r9, r0
   16738:	moveq	sl, r5
   1673c:	lsrs	r2, r2, #1
   16740:	rrx	r5, r4
   16744:	lsrs	r0, r6, #1
   16748:	rrx	r7, r7
   1674c:	orr	r6, r0, r4, lsl #31
   16750:	subs	lr, lr, #1
   16754:	bne	166e4 <__assert_fail@plt+0x4c6c>
   16758:	b	16764 <__assert_fail@plt+0x4cec>
   1675c:	mov	r9, #0
   16760:	mov	sl, #0
   16764:	ldr	r0, [sp]
   16768:	stm	r0, {r9, sl}
   1676c:	mov	r0, r8
   16770:	sub	sp, fp, #28
   16774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16778:	movw	r0, #51811	; 0xca63
   1677c:	movt	r0, #1
   16780:	movw	r1, #51248	; 0xc830
   16784:	movt	r1, #1
   16788:	movw	r3, #51819	; 0xca6b
   1678c:	movt	r3, #1
   16790:	movw	r2, #411	; 0x19b
   16794:	bl	11a78 <__assert_fail@plt>
   16798:	mov	r1, #0
   1679c:	str	r1, [r0]
   167a0:	str	r1, [r0, #4]
   167a4:	str	r1, [r0, #8]
   167a8:	bx	lr
   167ac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   167b0:	add	fp, sp, #24
   167b4:	sub	sp, sp, #16
   167b8:	mov	r4, r1
   167bc:	mov	r5, r0
   167c0:	movw	r0, #4588	; 0x11ec
   167c4:	movt	r0, #3
   167c8:	ldrb	r0, [r0]
   167cc:	cmp	r0, #1
   167d0:	bne	167f0 <__assert_fail@plt+0x4d78>
   167d4:	movw	r0, #4568	; 0x11d8
   167d8:	movt	r0, #3
   167dc:	ldr	r0, [r0]
   167e0:	movw	r2, #51911	; 0xcac7
   167e4:	movt	r2, #1
   167e8:	mov	r1, #1
   167ec:	bl	1197c <__fprintf_chk@plt>
   167f0:	add	r0, sp, #4
   167f4:	bl	11a30 <__gmpz_init@plt>
   167f8:	mov	r0, r5
   167fc:	mov	r1, #0
   16800:	bl	11688 <__gmpz_scan1@plt>
   16804:	mov	r6, r0
   16808:	mov	r0, r5
   1680c:	mov	r1, r5
   16810:	mov	r2, r6
   16814:	bl	11814 <__gmpz_fdiv_q_2exp@plt>
   16818:	cmp	r6, #0
   1681c:	beq	16834 <__assert_fail@plt+0x4dbc>
   16820:	mov	r0, r4
   16824:	mov	r1, #2
   16828:	bl	16ff8 <__assert_fail@plt+0x5580>
   1682c:	subs	r6, r6, #1
   16830:	bne	16820 <__assert_fail@plt+0x4da8>
   16834:	mov	r6, #3
   16838:	mov	r7, #1
   1683c:	movw	r8, #62920	; 0xf5c8
   16840:	movt	r8, #1
   16844:	mov	r0, r5
   16848:	mov	r1, r6
   1684c:	bl	118f8 <__gmpz_divisible_ui_p@plt>
   16850:	cmp	r0, #0
   16854:	beq	16880 <__assert_fail@plt+0x4e08>
   16858:	mov	r0, r5
   1685c:	mov	r1, r5
   16860:	mov	r2, r6
   16864:	bl	117b4 <__gmpz_tdiv_q_ui@plt>
   16868:	mov	r0, r4
   1686c:	mov	r1, r6
   16870:	bl	16ff8 <__assert_fail@plt+0x5580>
   16874:	cmp	r7, #668	; 0x29c
   16878:	bls	16844 <__assert_fail@plt+0x4dcc>
   1687c:	b	168a8 <__assert_fail@plt+0x4e30>
   16880:	ldrb	r0, [r8, r7]
   16884:	add	r6, r6, r0
   16888:	mul	r1, r6, r6
   1688c:	mov	r0, r5
   16890:	bl	11a24 <__gmpz_cmp_ui@plt>
   16894:	cmp	r0, #0
   16898:	blt	168a8 <__assert_fail@plt+0x4e30>
   1689c:	add	r7, r7, #1
   168a0:	cmp	r7, #668	; 0x29c
   168a4:	bls	16844 <__assert_fail@plt+0x4dcc>
   168a8:	add	r0, sp, #4
   168ac:	bl	11904 <__gmpz_clear@plt>
   168b0:	sub	sp, fp, #24
   168b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   168b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168bc:	add	fp, sp, #28
   168c0:	sub	sp, sp, #76	; 0x4c
   168c4:	mov	r4, r0
   168c8:	mov	r5, #1
   168cc:	mov	r1, #1
   168d0:	bl	11a24 <__gmpz_cmp_ui@plt>
   168d4:	cmp	r0, #1
   168d8:	blt	16a9c <__assert_fail@plt+0x5024>
   168dc:	movw	r1, #60793	; 0xed79
   168e0:	movt	r1, #381	; 0x17d
   168e4:	mov	r0, r4
   168e8:	bl	11a24 <__gmpz_cmp_ui@plt>
   168ec:	cmp	r0, #0
   168f0:	blt	16ad4 <__assert_fail@plt+0x505c>
   168f4:	mov	r6, #0
   168f8:	str	r6, [sp]
   168fc:	sub	sl, fp, #40	; 0x28
   16900:	add	r9, sp, #52	; 0x34
   16904:	add	r7, sp, #40	; 0x28
   16908:	add	r8, sp, #28
   1690c:	mov	r0, sl
   16910:	mov	r1, r9
   16914:	mov	r2, r7
   16918:	mov	r3, r8
   1691c:	bl	11784 <__gmpz_inits@plt>
   16920:	mov	r0, r7
   16924:	mov	r1, r4
   16928:	mov	r2, #1
   1692c:	bl	116c4 <__gmpz_sub_ui@plt>
   16930:	mov	r0, r7
   16934:	mov	r1, #0
   16938:	bl	11688 <__gmpz_scan1@plt>
   1693c:	mov	r5, r0
   16940:	mov	r0, sl
   16944:	mov	r1, r7
   16948:	mov	r2, r5
   1694c:	bl	1194c <__gmpz_tdiv_q_2exp@plt>
   16950:	mov	r0, r9
   16954:	mov	r1, #2
   16958:	bl	116f4 <__gmpz_set_ui@plt>
   1695c:	str	sl, [sp]
   16960:	str	r5, [sp, #12]
   16964:	str	r5, [sp, #4]
   16968:	mov	r0, r4
   1696c:	mov	r1, r7
   16970:	mov	r2, r9
   16974:	mov	r3, r8
   16978:	bl	17030 <__assert_fail@plt+0x55b8>
   1697c:	cmp	r0, #0
   16980:	mov	r5, #0
   16984:	beq	16abc <__assert_fail@plt+0x5044>
   16988:	add	r5, sp, #28
   1698c:	add	r6, sp, #40	; 0x28
   16990:	mov	r0, r5
   16994:	mov	r1, r6
   16998:	bl	11790 <__gmpz_set@plt>
   1699c:	add	r1, sp, #16
   169a0:	mov	r0, r5
   169a4:	bl	124dc <__assert_fail@plt+0xa64>
   169a8:	mov	r8, #0
   169ac:	add	r7, sp, #52	; 0x34
   169b0:	ldr	r0, [sp, #24]
   169b4:	cmp	r0, #0
   169b8:	beq	16aa4 <__assert_fail@plt+0x502c>
   169bc:	mov	sl, #1
   169c0:	mov	r9, #0
   169c4:	ldr	r0, [sp, #16]
   169c8:	add	r2, r0, r9
   169cc:	mov	r0, r5
   169d0:	mov	r1, r6
   169d4:	bl	11778 <__gmpz_divexact@plt>
   169d8:	mov	r0, r5
   169dc:	mov	r1, r7
   169e0:	mov	r2, r5
   169e4:	mov	r3, r4
   169e8:	bl	11760 <__gmpz_powm@plt>
   169ec:	mov	r0, r5
   169f0:	mov	r1, #1
   169f4:	bl	11a24 <__gmpz_cmp_ui@plt>
   169f8:	cmp	r0, #0
   169fc:	beq	16a18 <__assert_fail@plt+0x4fa0>
   16a00:	add	r9, r9, #12
   16a04:	add	r1, sl, #1
   16a08:	ldr	r2, [sp, #24]
   16a0c:	cmp	sl, r2
   16a10:	mov	sl, r1
   16a14:	bcc	169c4 <__assert_fail@plt+0x4f4c>
   16a18:	cmp	r0, #0
   16a1c:	bne	16aa4 <__assert_fail@plt+0x502c>
   16a20:	movw	r0, #62920	; 0xf5c8
   16a24:	movt	r0, #1
   16a28:	ldrb	r2, [r0, r8]
   16a2c:	mov	r0, r7
   16a30:	mov	r1, r7
   16a34:	bl	11898 <__gmpz_add_ui@plt>
   16a38:	sub	r0, fp, #40	; 0x28
   16a3c:	str	r0, [sp]
   16a40:	ldr	r0, [sp, #12]
   16a44:	str	r0, [sp, #4]
   16a48:	mov	r0, r4
   16a4c:	mov	r1, r6
   16a50:	mov	r2, r7
   16a54:	mov	r3, r5
   16a58:	bl	17030 <__assert_fail@plt+0x55b8>
   16a5c:	cmp	r0, #0
   16a60:	beq	16aac <__assert_fail@plt+0x5034>
   16a64:	add	r8, r8, #1
   16a68:	lsr	r0, r8, #2
   16a6c:	cmp	r0, #166	; 0xa6
   16a70:	bls	169b0 <__assert_fail@plt+0x4f38>
   16a74:	movw	r1, #51261	; 0xc83d
   16a78:	movt	r1, #1
   16a7c:	mov	r0, #0
   16a80:	mov	r2, #5
   16a84:	bl	11754 <dcgettext@plt>
   16a88:	mov	r2, r0
   16a8c:	mov	r0, #0
   16a90:	mov	r1, #0
   16a94:	bl	11850 <error@plt>
   16a98:	bl	11a60 <abort@plt>
   16a9c:	mov	r5, #0
   16aa0:	b	16ad4 <__assert_fail@plt+0x505c>
   16aa4:	mov	r5, #1
   16aa8:	b	16ab0 <__assert_fail@plt+0x5038>
   16aac:	mov	r5, #0
   16ab0:	add	r0, sp, #16
   16ab4:	bl	12588 <__assert_fail@plt+0xb10>
   16ab8:	mov	r6, #0
   16abc:	str	r6, [sp]
   16ac0:	sub	r0, fp, #40	; 0x28
   16ac4:	add	r1, sp, #52	; 0x34
   16ac8:	add	r2, sp, #40	; 0x28
   16acc:	add	r3, sp, #28
   16ad0:	bl	116d0 <__gmpz_clears@plt>
   16ad4:	mov	r0, r5
   16ad8:	sub	sp, fp, #28
   16adc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ae4:	add	fp, sp, #28
   16ae8:	sub	sp, sp, #20
   16aec:	mov	sl, r1
   16af0:	mov	r5, r0
   16af4:	ldr	r0, [r0]
   16af8:	ldr	r6, [r5, #4]
   16afc:	ldr	r4, [r5, #8]
   16b00:	sub	r8, r4, #1
   16b04:	cmp	r8, #0
   16b08:	mov	r9, r8
   16b0c:	blt	16b6c <__assert_fail@plt+0x50f4>
   16b10:	str	r6, [sp, #16]
   16b14:	add	r1, r8, r8, lsl #1
   16b18:	str	r0, [sp, #12]
   16b1c:	add	r6, r0, r1, lsl #2
   16b20:	mov	r7, r4
   16b24:	mov	r0, r6
   16b28:	mov	r1, sl
   16b2c:	bl	119d0 <__gmpz_cmp@plt>
   16b30:	cmp	r0, #1
   16b34:	blt	16b4c <__assert_fail@plt+0x50d4>
   16b38:	sub	r7, r7, #1
   16b3c:	sub	r6, r6, #12
   16b40:	cmp	r7, #0
   16b44:	bgt	16b24 <__assert_fail@plt+0x50ac>
   16b48:	b	16b60 <__assert_fail@plt+0x50e8>
   16b4c:	mov	r0, r6
   16b50:	mov	r1, sl
   16b54:	bl	119d0 <__gmpz_cmp@plt>
   16b58:	cmp	r0, #0
   16b5c:	beq	16c2c <__assert_fail@plt+0x51b4>
   16b60:	sub	r9, r7, #1
   16b64:	ldr	r6, [sp, #16]
   16b68:	ldr	r0, [sp, #12]
   16b6c:	str	r5, [sp, #12]
   16b70:	add	r5, r4, r4, lsl #1
   16b74:	mov	r1, #12
   16b78:	add	r1, r1, r5, lsl #2
   16b7c:	bl	19ff4 <__assert_fail@plt+0x857c>
   16b80:	mov	r7, r0
   16b84:	add	r0, r4, #1
   16b88:	str	r0, [sp, #8]
   16b8c:	lsl	r1, r0, #2
   16b90:	mov	r0, r6
   16b94:	bl	19ff4 <__assert_fail@plt+0x857c>
   16b98:	str	r0, [sp, #16]
   16b9c:	str	r7, [sp, #4]
   16ba0:	add	r6, r7, r5, lsl #2
   16ba4:	mov	r0, r6
   16ba8:	bl	11a30 <__gmpz_init@plt>
   16bac:	cmp	r8, r9
   16bb0:	ble	16bec <__assert_fail@plt+0x5174>
   16bb4:	ldr	r0, [sp, #16]
   16bb8:	add	r4, r0, r4, lsl #2
   16bbc:	mov	r5, r4
   16bc0:	sub	r7, r6, #12
   16bc4:	mov	r0, r6
   16bc8:	mov	r1, r7
   16bcc:	bl	11790 <__gmpz_set@plt>
   16bd0:	ldr	r0, [r5, #-4]!
   16bd4:	str	r0, [r4]
   16bd8:	sub	r8, r8, #1
   16bdc:	cmp	r8, r9
   16be0:	mov	r4, r5
   16be4:	mov	r6, r7
   16be8:	bgt	16bc0 <__assert_fail@plt+0x5148>
   16bec:	add	r4, r9, #1
   16bf0:	add	r0, r4, r4, lsl #1
   16bf4:	ldr	r5, [sp, #4]
   16bf8:	add	r0, r5, r0, lsl #2
   16bfc:	mov	r1, sl
   16c00:	bl	11790 <__gmpz_set@plt>
   16c04:	mov	r0, #1
   16c08:	ldr	r1, [sp, #16]
   16c0c:	str	r0, [r1, r4, lsl #2]
   16c10:	ldr	r0, [sp, #12]
   16c14:	str	r5, [r0]
   16c18:	str	r1, [r0, #4]
   16c1c:	ldr	r1, [sp, #8]
   16c20:	str	r1, [r0, #8]
   16c24:	sub	sp, fp, #28
   16c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c2c:	ldr	r0, [sp, #16]
   16c30:	add	r0, r0, r7, lsl #2
   16c34:	ldr	r1, [r0, #-4]
   16c38:	add	r1, r1, #1
   16c3c:	str	r1, [r0, #-4]
   16c40:	sub	sp, fp, #28
   16c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c4c:	add	fp, sp, #28
   16c50:	sub	sp, sp, #108	; 0x6c
   16c54:	str	r2, [sp, #20]
   16c58:	mov	r9, r1
   16c5c:	mov	r8, r0
   16c60:	movw	r0, #4588	; 0x11ec
   16c64:	movt	r0, #3
   16c68:	ldrb	r0, [r0]
   16c6c:	cmp	r0, #1
   16c70:	bne	16c94 <__assert_fail@plt+0x521c>
   16c74:	movw	r0, #4568	; 0x11d8
   16c78:	movt	r0, #3
   16c7c:	ldr	r0, [r0]
   16c80:	movw	r2, #51929	; 0xcad9
   16c84:	movt	r2, #1
   16c88:	mov	r1, #1
   16c8c:	mov	r3, r9
   16c90:	bl	1197c <__fprintf_chk@plt>
   16c94:	add	r0, sp, #48	; 0x30
   16c98:	add	r1, sp, #36	; 0x24
   16c9c:	mov	r6, #0
   16ca0:	mov	r2, #0
   16ca4:	bl	11784 <__gmpz_inits@plt>
   16ca8:	sub	r0, fp, #64	; 0x40
   16cac:	mov	r1, #2
   16cb0:	bl	1188c <__gmpz_init_set_si@plt>
   16cb4:	sub	r0, fp, #40	; 0x28
   16cb8:	mov	r1, #2
   16cbc:	bl	1188c <__gmpz_init_set_si@plt>
   16cc0:	sub	r0, fp, #52	; 0x34
   16cc4:	mov	r1, #2
   16cc8:	bl	1188c <__gmpz_init_set_si@plt>
   16ccc:	add	r0, sp, #60	; 0x3c
   16cd0:	mov	r4, #1
   16cd4:	mov	r1, #1
   16cd8:	bl	119c4 <__gmpz_init_set_ui@plt>
   16cdc:	mov	r0, r8
   16ce0:	mov	r1, #1
   16ce4:	bl	11a24 <__gmpz_cmp_ui@plt>
   16ce8:	cmp	r0, #0
   16cec:	beq	16fc4 <__assert_fail@plt+0x554c>
   16cf0:	add	r0, r9, #1
   16cf4:	str	r0, [sp, #16]
   16cf8:	add	r7, sp, #48	; 0x30
   16cfc:	sub	r5, fp, #40	; 0x28
   16d00:	mov	r0, #1
   16d04:	str	r0, [sp, #24]
   16d08:	mov	r0, #0
   16d0c:	str	r0, [sp, #28]
   16d10:	b	16d44 <__assert_fail@plt+0x52cc>
   16d14:	ldr	r0, [sp, #32]
   16d18:	orr	sl, r0, r6, lsr #31
   16d1c:	lsl	r0, r6, #1
   16d20:	str	r0, [sp, #32]
   16d24:	sub	r0, fp, #64	; 0x40
   16d28:	mov	r1, r5
   16d2c:	bl	11790 <__gmpz_set@plt>
   16d30:	mov	r4, r6
   16d34:	ldr	r6, [sp, #28]
   16d38:	ldr	r0, [sp, #32]
   16d3c:	str	r0, [sp, #24]
   16d40:	str	sl, [sp, #28]
   16d44:	str	r6, [sp, #32]
   16d48:	mov	r0, r7
   16d4c:	mov	r1, r5
   16d50:	mov	r2, r5
   16d54:	bl	117a8 <__gmpz_mul@plt>
   16d58:	mov	r0, r5
   16d5c:	mov	r1, r7
   16d60:	mov	r2, r8
   16d64:	bl	119b8 <__gmpz_mod@plt>
   16d68:	mov	r0, r5
   16d6c:	mov	r1, r5
   16d70:	mov	r2, r9
   16d74:	bl	11898 <__gmpz_add_ui@plt>
   16d78:	mov	r0, r7
   16d7c:	sub	r1, fp, #52	; 0x34
   16d80:	mov	r2, r5
   16d84:	bl	11724 <__gmpz_sub@plt>
   16d88:	add	r6, sp, #36	; 0x24
   16d8c:	mov	r0, r6
   16d90:	mov	sl, r5
   16d94:	add	r5, sp, #60	; 0x3c
   16d98:	mov	r1, r5
   16d9c:	mov	r2, r7
   16da0:	bl	117a8 <__gmpz_mul@plt>
   16da4:	mov	r0, r5
   16da8:	mov	r5, sl
   16dac:	mov	r1, r6
   16db0:	mov	r2, r8
   16db4:	bl	119b8 <__gmpz_mod@plt>
   16db8:	and	r0, r4, #31
   16dbc:	teq	r0, #1
   16dc0:	bne	16df8 <__assert_fail@plt+0x5380>
   16dc4:	mov	r0, r7
   16dc8:	add	r1, sp, #60	; 0x3c
   16dcc:	mov	r2, r8
   16dd0:	bl	11a00 <__gmpz_gcd@plt>
   16dd4:	mov	r0, r7
   16dd8:	mov	r1, #1
   16ddc:	bl	11a24 <__gmpz_cmp_ui@plt>
   16de0:	cmp	r0, #0
   16de4:	sub	r6, fp, #64	; 0x40
   16de8:	bne	16e88 <__assert_fail@plt+0x5410>
   16dec:	mov	r0, r6
   16df0:	mov	r1, r5
   16df4:	bl	11790 <__gmpz_set@plt>
   16df8:	subs	r4, r4, #1
   16dfc:	ldr	r6, [sp, #32]
   16e00:	sbc	r6, r6, #0
   16e04:	orrs	r0, r4, r6
   16e08:	bne	16d44 <__assert_fail@plt+0x52cc>
   16e0c:	sub	r0, fp, #52	; 0x34
   16e10:	mov	r1, r5
   16e14:	bl	11790 <__gmpz_set@plt>
   16e18:	ldr	r0, [sp, #28]
   16e1c:	lsl	r1, r0, #1
   16e20:	str	r1, [sp, #32]
   16e24:	ldr	r6, [sp, #24]
   16e28:	str	r0, [sp, #28]
   16e2c:	orrs	r0, r6, r0
   16e30:	beq	16d14 <__assert_fail@plt+0x529c>
   16e34:	mov	r4, #0
   16e38:	mov	sl, #0
   16e3c:	mov	r0, r7
   16e40:	mov	r1, r5
   16e44:	mov	r2, r5
   16e48:	bl	117a8 <__gmpz_mul@plt>
   16e4c:	mov	r0, r5
   16e50:	mov	r1, r7
   16e54:	mov	r2, r8
   16e58:	bl	119b8 <__gmpz_mod@plt>
   16e5c:	mov	r0, r5
   16e60:	mov	r1, r5
   16e64:	mov	r2, r9
   16e68:	bl	11898 <__gmpz_add_ui@plt>
   16e6c:	adds	r4, r4, #1
   16e70:	adc	sl, sl, #0
   16e74:	subs	r0, r4, r6
   16e78:	ldr	r0, [sp, #28]
   16e7c:	sbcs	r0, sl, r0
   16e80:	bcc	16e3c <__assert_fail@plt+0x53c4>
   16e84:	b	16d14 <__assert_fail@plt+0x529c>
   16e88:	mov	r0, r7
   16e8c:	mov	r1, r6
   16e90:	mov	r2, r6
   16e94:	bl	117a8 <__gmpz_mul@plt>
   16e98:	mov	r0, r6
   16e9c:	mov	r1, r7
   16ea0:	mov	r2, r8
   16ea4:	bl	119b8 <__gmpz_mod@plt>
   16ea8:	mov	r0, r6
   16eac:	mov	r1, r6
   16eb0:	mov	r2, r9
   16eb4:	bl	11898 <__gmpz_add_ui@plt>
   16eb8:	mov	r0, r7
   16ebc:	sub	r1, fp, #52	; 0x34
   16ec0:	mov	r2, r6
   16ec4:	bl	11724 <__gmpz_sub@plt>
   16ec8:	mov	r0, r7
   16ecc:	mov	r1, r7
   16ed0:	mov	r2, r8
   16ed4:	bl	11a00 <__gmpz_gcd@plt>
   16ed8:	mov	r0, r7
   16edc:	mov	r1, #1
   16ee0:	bl	11a24 <__gmpz_cmp_ui@plt>
   16ee4:	cmp	r0, #0
   16ee8:	beq	16e88 <__assert_fail@plt+0x5410>
   16eec:	mov	r0, r8
   16ef0:	mov	r1, r8
   16ef4:	mov	r2, r7
   16ef8:	bl	11778 <__gmpz_divexact@plt>
   16efc:	mov	r0, r7
   16f00:	bl	168b8 <__assert_fail@plt+0x4e40>
   16f04:	cmp	r0, #0
   16f08:	beq	16f1c <__assert_fail@plt+0x54a4>
   16f0c:	ldr	r0, [sp, #20]
   16f10:	mov	r1, r7
   16f14:	bl	16ae0 <__assert_fail@plt+0x5068>
   16f18:	b	16f5c <__assert_fail@plt+0x54e4>
   16f1c:	movw	r0, #4588	; 0x11ec
   16f20:	movt	r0, #3
   16f24:	ldrb	r0, [r0]
   16f28:	cmp	r0, #1
   16f2c:	bne	16f4c <__assert_fail@plt+0x54d4>
   16f30:	movw	r0, #4568	; 0x11d8
   16f34:	movt	r0, #3
   16f38:	ldr	r0, [r0]
   16f3c:	mov	r1, #1
   16f40:	movw	r2, #51950	; 0xcaee
   16f44:	movt	r2, #1
   16f48:	bl	1197c <__fprintf_chk@plt>
   16f4c:	mov	r0, r7
   16f50:	ldr	r1, [sp, #16]
   16f54:	ldr	r2, [sp, #20]
   16f58:	bl	16c48 <__assert_fail@plt+0x51d0>
   16f5c:	mov	r0, r8
   16f60:	bl	168b8 <__assert_fail@plt+0x4e40>
   16f64:	cmp	r0, #0
   16f68:	bne	16fb8 <__assert_fail@plt+0x5540>
   16f6c:	mov	r0, r5
   16f70:	mov	r1, r5
   16f74:	mov	r2, r8
   16f78:	bl	119b8 <__gmpz_mod@plt>
   16f7c:	sub	r0, fp, #52	; 0x34
   16f80:	mov	r1, r0
   16f84:	mov	r2, r8
   16f88:	bl	119b8 <__gmpz_mod@plt>
   16f8c:	mov	r0, r6
   16f90:	mov	r1, r6
   16f94:	mov	r2, r8
   16f98:	bl	119b8 <__gmpz_mod@plt>
   16f9c:	mov	r0, r8
   16fa0:	mov	r1, #1
   16fa4:	bl	11a24 <__gmpz_cmp_ui@plt>
   16fa8:	cmp	r0, #0
   16fac:	ldr	r6, [sp, #32]
   16fb0:	bne	16d44 <__assert_fail@plt+0x52cc>
   16fb4:	b	16fc4 <__assert_fail@plt+0x554c>
   16fb8:	ldr	r0, [sp, #20]
   16fbc:	mov	r1, r8
   16fc0:	bl	16ae0 <__assert_fail@plt+0x5068>
   16fc4:	mov	r0, #0
   16fc8:	sub	r1, fp, #40	; 0x28
   16fcc:	str	r1, [sp]
   16fd0:	sub	r1, fp, #64	; 0x40
   16fd4:	str	r1, [sp, #4]
   16fd8:	str	r0, [sp, #8]
   16fdc:	add	r0, sp, #60	; 0x3c
   16fe0:	add	r1, sp, #36	; 0x24
   16fe4:	add	r2, sp, #48	; 0x30
   16fe8:	sub	r3, fp, #52	; 0x34
   16fec:	bl	116d0 <__gmpz_clears@plt>
   16ff0:	sub	sp, fp, #28
   16ff4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ff8:	push	{r4, r5, fp, lr}
   16ffc:	add	fp, sp, #8
   17000:	sub	sp, sp, #16
   17004:	mov	r4, r0
   17008:	add	r5, sp, #4
   1700c:	mov	r0, r5
   17010:	bl	119c4 <__gmpz_init_set_ui@plt>
   17014:	mov	r0, r4
   17018:	mov	r1, r5
   1701c:	bl	16ae0 <__assert_fail@plt+0x5068>
   17020:	mov	r0, r5
   17024:	bl	11904 <__gmpz_clear@plt>
   17028:	sub	sp, fp, #8
   1702c:	pop	{r4, r5, fp, pc}
   17030:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17034:	add	fp, sp, #24
   17038:	mov	r4, r3
   1703c:	mov	r3, r2
   17040:	mov	r6, r1
   17044:	mov	r7, r0
   17048:	ldr	r2, [fp, #8]
   1704c:	mov	r0, r4
   17050:	mov	r1, r3
   17054:	mov	r3, r7
   17058:	bl	11760 <__gmpz_powm@plt>
   1705c:	mov	r8, #1
   17060:	mov	r0, r4
   17064:	mov	r1, #1
   17068:	bl	11a24 <__gmpz_cmp_ui@plt>
   1706c:	cmp	r0, #0
   17070:	beq	170e8 <__assert_fail@plt+0x5670>
   17074:	mov	r0, r4
   17078:	mov	r1, r6
   1707c:	bl	119d0 <__gmpz_cmp@plt>
   17080:	cmp	r0, #0
   17084:	beq	170e8 <__assert_fail@plt+0x5670>
   17088:	ldr	r9, [fp, #12]
   1708c:	mov	r8, #0
   17090:	cmp	r9, #2
   17094:	bcc	170e8 <__assert_fail@plt+0x5670>
   17098:	mov	r5, #2
   1709c:	mov	r0, r4
   170a0:	mov	r1, r4
   170a4:	mov	r2, #2
   170a8:	mov	r3, r7
   170ac:	bl	11a3c <__gmpz_powm_ui@plt>
   170b0:	mov	r0, r4
   170b4:	mov	r1, r6
   170b8:	bl	119d0 <__gmpz_cmp@plt>
   170bc:	cmp	r0, #0
   170c0:	beq	170f0 <__assert_fail@plt+0x5678>
   170c4:	mov	r0, r4
   170c8:	mov	r1, #1
   170cc:	bl	11a24 <__gmpz_cmp_ui@plt>
   170d0:	cmp	r0, #0
   170d4:	beq	170e8 <__assert_fail@plt+0x5670>
   170d8:	add	r0, r5, #1
   170dc:	cmp	r5, r9
   170e0:	mov	r5, r0
   170e4:	bcc	1709c <__assert_fail@plt+0x5624>
   170e8:	mov	r0, r8
   170ec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   170f0:	mov	r8, #1
   170f4:	mov	r0, r8
   170f8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   170fc:	movw	r1, #4600	; 0x11f8
   17100:	movt	r1, #3
   17104:	str	r0, [r1]
   17108:	bx	lr
   1710c:	movw	r1, #4604	; 0x11fc
   17110:	movt	r1, #3
   17114:	strb	r0, [r1]
   17118:	bx	lr
   1711c:	push	{r4, r5, r6, sl, fp, lr}
   17120:	add	fp, sp, #16
   17124:	sub	sp, sp, #8
   17128:	movw	r0, #4580	; 0x11e4
   1712c:	movt	r0, #3
   17130:	ldr	r0, [r0]
   17134:	bl	1a8ac <__assert_fail@plt+0x8e34>
   17138:	cmp	r0, #0
   1713c:	beq	17164 <__assert_fail@plt+0x56ec>
   17140:	movw	r0, #4604	; 0x11fc
   17144:	movt	r0, #3
   17148:	ldrb	r0, [r0]
   1714c:	cmp	r0, #0
   17150:	beq	17184 <__assert_fail@plt+0x570c>
   17154:	bl	11910 <__errno_location@plt>
   17158:	ldr	r0, [r0]
   1715c:	cmp	r0, #32
   17160:	bne	17184 <__assert_fail@plt+0x570c>
   17164:	movw	r0, #4568	; 0x11d8
   17168:	movt	r0, #3
   1716c:	ldr	r0, [r0]
   17170:	bl	1a8ac <__assert_fail@plt+0x8e34>
   17174:	cmp	r0, #0
   17178:	subeq	sp, fp, #16
   1717c:	popeq	{r4, r5, r6, sl, fp, pc}
   17180:	b	171f4 <__assert_fail@plt+0x577c>
   17184:	movw	r1, #51100	; 0xc79c
   17188:	movt	r1, #1
   1718c:	mov	r0, #0
   17190:	mov	r2, #5
   17194:	bl	11754 <dcgettext@plt>
   17198:	mov	r4, r0
   1719c:	movw	r0, #4600	; 0x11f8
   171a0:	movt	r0, #3
   171a4:	ldr	r6, [r0]
   171a8:	bl	11910 <__errno_location@plt>
   171ac:	ldr	r5, [r0]
   171b0:	cmp	r6, #0
   171b4:	bne	171d0 <__assert_fail@plt+0x5758>
   171b8:	movw	r2, #64417	; 0xfba1
   171bc:	movt	r2, #1
   171c0:	mov	r0, #0
   171c4:	mov	r1, r5
   171c8:	mov	r3, r4
   171cc:	b	171f0 <__assert_fail@plt+0x5778>
   171d0:	mov	r0, r6
   171d4:	bl	18f84 <__assert_fail@plt+0x750c>
   171d8:	mov	r3, r0
   171dc:	str	r4, [sp]
   171e0:	movw	r2, #64413	; 0xfb9d
   171e4:	movt	r2, #1
   171e8:	mov	r0, #0
   171ec:	mov	r1, r5
   171f0:	bl	11850 <error@plt>
   171f4:	movw	r0, #4480	; 0x1180
   171f8:	movt	r0, #3
   171fc:	ldr	r0, [r0]
   17200:	bl	1170c <_exit@plt>
   17204:	push	{r4, r5, r6, sl, fp, lr}
   17208:	add	fp, sp, #16
   1720c:	mov	r4, r0
   17210:	bl	11910 <__errno_location@plt>
   17214:	mov	r5, r0
   17218:	ldr	r6, [r0]
   1721c:	mov	r0, r4
   17220:	bl	11700 <free@plt>
   17224:	str	r6, [r5]
   17228:	pop	{r4, r5, r6, sl, fp, pc}
   1722c:	push	{r4, r5, r6, r7, fp, lr}
   17230:	add	fp, sp, #16
   17234:	cmp	r2, #0
   17238:	moveq	r4, #0
   1723c:	moveq	r0, r4
   17240:	popeq	{r4, r5, r6, r7, fp, pc}
   17244:	mov	r5, r2
   17248:	mov	r6, r1
   1724c:	mov	r7, r0
   17250:	mov	r4, #0
   17254:	mov	r0, r7
   17258:	mov	r1, r6
   1725c:	mov	r2, r5
   17260:	bl	19798 <__assert_fail@plt+0x7d20>
   17264:	cmn	r0, #1
   17268:	beq	17284 <__assert_fail@plt+0x580c>
   1726c:	cmp	r0, #0
   17270:	beq	1728c <__assert_fail@plt+0x5814>
   17274:	subs	r5, r5, r0
   17278:	add	r6, r6, r0
   1727c:	add	r4, r0, r4
   17280:	bne	17254 <__assert_fail@plt+0x57dc>
   17284:	mov	r0, r4
   17288:	pop	{r4, r5, r6, r7, fp, pc}
   1728c:	bl	11910 <__errno_location@plt>
   17290:	mov	r1, #28
   17294:	str	r1, [r0]
   17298:	mov	r0, r4
   1729c:	pop	{r4, r5, r6, r7, fp, pc}
   172a0:	push	{r4, r5, r6, sl, fp, lr}
   172a4:	add	fp, sp, #16
   172a8:	mov	r4, r1
   172ac:	mov	r5, r0
   172b0:	mov	r0, #0
   172b4:	strb	r0, [r2, #20]
   172b8:	add	r6, r2, #19
   172bc:	mov	r0, r5
   172c0:	mov	r1, r4
   172c4:	mov	r2, #10
   172c8:	mov	r3, #0
   172cc:	bl	1c2b8 <__assert_fail@plt+0xa840>
   172d0:	add	r2, r0, r0, lsl #2
   172d4:	sub	r2, r5, r2, lsl #1
   172d8:	orr	r2, r2, #48	; 0x30
   172dc:	strb	r2, [r6], #-1
   172e0:	rsbs	r2, r5, #9
   172e4:	rscs	r2, r4, #0
   172e8:	mov	r5, r0
   172ec:	mov	r4, r1
   172f0:	bcc	172bc <__assert_fail@plt+0x5844>
   172f4:	add	r0, r6, #1
   172f8:	pop	{r4, r5, r6, sl, fp, pc}
   172fc:	push	{r4, r5, fp, lr}
   17300:	add	fp, sp, #8
   17304:	cmp	r0, #0
   17308:	beq	1739c <__assert_fail@plt+0x5924>
   1730c:	mov	r4, r0
   17310:	mov	r1, #47	; 0x2f
   17314:	bl	119e8 <strrchr@plt>
   17318:	cmp	r0, #0
   1731c:	mov	r5, r4
   17320:	addne	r5, r0, #1
   17324:	sub	r0, r5, r4
   17328:	cmp	r0, #7
   1732c:	blt	17380 <__assert_fail@plt+0x5908>
   17330:	sub	r0, r5, #7
   17334:	movw	r1, #64476	; 0xfbdc
   17338:	movt	r1, #1
   1733c:	mov	r2, #7
   17340:	bl	11a54 <strncmp@plt>
   17344:	cmp	r0, #0
   17348:	bne	17380 <__assert_fail@plt+0x5908>
   1734c:	movw	r1, #64484	; 0xfbe4
   17350:	movt	r1, #1
   17354:	mov	r0, r5
   17358:	mov	r2, #3
   1735c:	bl	11a54 <strncmp@plt>
   17360:	cmp	r0, #0
   17364:	beq	17370 <__assert_fail@plt+0x58f8>
   17368:	mov	r4, r5
   1736c:	b	17380 <__assert_fail@plt+0x5908>
   17370:	add	r4, r5, #3
   17374:	movw	r0, #4552	; 0x11c8
   17378:	movt	r0, #3
   1737c:	str	r4, [r0]
   17380:	movw	r0, #4556	; 0x11cc
   17384:	movt	r0, #3
   17388:	str	r4, [r0]
   1738c:	movw	r0, #4608	; 0x1200
   17390:	movt	r0, #3
   17394:	str	r4, [r0]
   17398:	pop	{r4, r5, fp, pc}
   1739c:	movw	r0, #4568	; 0x11d8
   173a0:	movt	r0, #3
   173a4:	ldr	r3, [r0]
   173a8:	movw	r0, #64420	; 0xfba4
   173ac:	movt	r0, #1
   173b0:	mov	r1, #55	; 0x37
   173b4:	mov	r2, #1
   173b8:	bl	117fc <fwrite@plt>
   173bc:	bl	11a60 <abort@plt>
   173c0:	push	{r4, r5, r6, sl, fp, lr}
   173c4:	add	fp, sp, #16
   173c8:	sub	sp, sp, #8
   173cc:	mov	r4, r0
   173d0:	mov	r0, #0
   173d4:	mov	r1, r4
   173d8:	mov	r2, #5
   173dc:	bl	11754 <dcgettext@plt>
   173e0:	cmp	r0, r4
   173e4:	beq	17404 <__assert_fail@plt+0x598c>
   173e8:	mov	r5, r0
   173ec:	mov	r1, r4
   173f0:	bl	17458 <__assert_fail@plt+0x59e0>
   173f4:	cmp	r0, #0
   173f8:	beq	1740c <__assert_fail@plt+0x5994>
   173fc:	mov	r6, r5
   17400:	b	1744c <__assert_fail@plt+0x59d4>
   17404:	mov	r6, r4
   17408:	b	1744c <__assert_fail@plt+0x59d4>
   1740c:	mov	r0, r5
   17410:	bl	118e0 <strlen@plt>
   17414:	mov	r6, r0
   17418:	mov	r0, r4
   1741c:	bl	118e0 <strlen@plt>
   17420:	add	r0, r6, r0
   17424:	add	r0, r0, #4
   17428:	bl	19fb4 <__assert_fail@plt+0x853c>
   1742c:	mov	r6, r0
   17430:	str	r5, [sp]
   17434:	str	r4, [sp, #4]
   17438:	movw	r3, #64488	; 0xfbe8
   1743c:	movt	r3, #1
   17440:	mov	r1, #1
   17444:	mvn	r2, #0
   17448:	bl	11928 <__sprintf_chk@plt>
   1744c:	mov	r0, r6
   17450:	sub	sp, fp, #16
   17454:	pop	{r4, r5, r6, sl, fp, pc}
   17458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1745c:	add	fp, sp, #28
   17460:	sub	sp, sp, #124	; 0x7c
   17464:	mov	r4, r0
   17468:	mov	r0, r1
   1746c:	mov	r1, #2
   17470:	bl	1982c <__assert_fail@plt+0x7db4>
   17474:	mov	sl, r0
   17478:	ldrb	r0, [r4]
   1747c:	cmp	r0, #0
   17480:	beq	176ec <__assert_fail@plt+0x5c74>
   17484:	add	r5, sp, #12
   17488:	add	r0, r5, #4
   1748c:	str	r0, [sp, #4]
   17490:	add	r6, sp, #68	; 0x44
   17494:	add	r8, r6, #4
   17498:	mov	r9, #0
   1749c:	str	r8, [sp]
   174a0:	mov	r0, r4
   174a4:	mov	r1, sl
   174a8:	bl	1adb0 <__assert_fail@plt+0x9338>
   174ac:	cmp	r0, #0
   174b0:	beq	176ec <__assert_fail@plt+0x5c74>
   174b4:	mov	r7, r0
   174b8:	bl	11820 <__ctype_get_mb_cur_max@plt>
   174bc:	cmp	r0, #2
   174c0:	bcc	175d8 <__assert_fail@plt+0x5b60>
   174c4:	strb	r9, [sp, #68]	; 0x44
   174c8:	str	r4, [sp, #84]	; 0x54
   174cc:	str	r9, [r8]
   174d0:	str	r9, [r8, #4]
   174d4:	strb	r9, [sp, #80]	; 0x50
   174d8:	mov	r0, #1
   174dc:	str	r0, [sp, #8]
   174e0:	cmp	r4, r7
   174e4:	bcs	1753c <__assert_fail@plt+0x5ac4>
   174e8:	mov	r0, r6
   174ec:	bl	1b7bc <__assert_fail@plt+0x9d44>
   174f0:	ldr	r0, [sp, #96]	; 0x60
   174f4:	ldrb	r1, [sp, #92]	; 0x5c
   174f8:	cmp	r1, #0
   174fc:	beq	17508 <__assert_fail@plt+0x5a90>
   17500:	cmp	r0, #0
   17504:	beq	17710 <__assert_fail@plt+0x5c98>
   17508:	strb	r9, [sp, #80]	; 0x50
   1750c:	ldr	r2, [sp, #84]	; 0x54
   17510:	ldr	r3, [sp, #88]	; 0x58
   17514:	add	r2, r2, r3
   17518:	str	r2, [sp, #84]	; 0x54
   1751c:	cmp	r2, r7
   17520:	bcc	174e8 <__assert_fail@plt+0x5a70>
   17524:	cmp	r1, #0
   17528:	beq	1753c <__assert_fail@plt+0x5ac4>
   1752c:	bl	1191c <iswalnum@plt>
   17530:	clz	r0, r0
   17534:	lsr	r0, r0, #5
   17538:	str	r0, [sp, #8]
   1753c:	strb	r9, [sp, #68]	; 0x44
   17540:	str	r7, [sp, #84]	; 0x54
   17544:	str	r9, [r8]
   17548:	str	r9, [r8, #4]
   1754c:	strb	r9, [sp, #80]	; 0x50
   17550:	strb	r9, [sp, #12]
   17554:	str	sl, [sp, #28]
   17558:	ldr	r0, [sp, #4]
   1755c:	str	r9, [r0]
   17560:	str	r9, [r0, #4]
   17564:	strb	r9, [sp, #24]
   17568:	b	17594 <__assert_fail@plt+0x5b1c>
   1756c:	strb	r9, [sp, #80]	; 0x50
   17570:	strb	r9, [sp, #24]
   17574:	ldr	r0, [sp, #84]	; 0x54
   17578:	ldr	r1, [sp, #88]	; 0x58
   1757c:	add	r0, r0, r1
   17580:	str	r0, [sp, #84]	; 0x54
   17584:	ldr	r0, [sp, #28]
   17588:	ldr	r1, [sp, #32]
   1758c:	add	r0, r0, r1
   17590:	str	r0, [sp, #28]
   17594:	mov	r0, r5
   17598:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1759c:	ldrb	r0, [sp, #36]	; 0x24
   175a0:	cmp	r0, #0
   175a4:	beq	175b4 <__assert_fail@plt+0x5b3c>
   175a8:	ldr	r0, [sp, #40]	; 0x28
   175ac:	cmp	r0, #0
   175b0:	beq	1765c <__assert_fail@plt+0x5be4>
   175b4:	mov	r0, r6
   175b8:	bl	1b7bc <__assert_fail@plt+0x9d44>
   175bc:	ldrb	r0, [sp, #92]	; 0x5c
   175c0:	cmp	r0, #0
   175c4:	beq	1756c <__assert_fail@plt+0x5af4>
   175c8:	ldr	r0, [sp, #96]	; 0x60
   175cc:	cmp	r0, #0
   175d0:	bne	1756c <__assert_fail@plt+0x5af4>
   175d4:	b	17710 <__assert_fail@plt+0x5c98>
   175d8:	mov	r8, #1
   175dc:	cmp	r4, r7
   175e0:	mov	r4, #1
   175e4:	bcs	17604 <__assert_fail@plt+0x5b8c>
   175e8:	bl	118bc <__ctype_b_loc@plt>
   175ec:	ldrb	r1, [r7, #-1]
   175f0:	ldr	r0, [r0]
   175f4:	ldrb	r0, [r0, r1, lsl #1]
   175f8:	and	r0, r0, #8
   175fc:	mov	r1, #1
   17600:	eor	r4, r1, r0, lsr #3
   17604:	mov	r5, sl
   17608:	mov	r0, sl
   1760c:	bl	118e0 <strlen@plt>
   17610:	ldrb	sl, [r7, r0]
   17614:	cmp	sl, #0
   17618:	beq	17634 <__assert_fail@plt+0x5bbc>
   1761c:	bl	118bc <__ctype_b_loc@plt>
   17620:	ldr	r0, [r0]
   17624:	ldrb	r0, [r0, sl, lsl #1]
   17628:	and	r0, r0, #8
   1762c:	mov	r1, #1
   17630:	eor	r8, r1, r0, lsr #3
   17634:	tst	r4, r8
   17638:	bne	17704 <__assert_fail@plt+0x5c8c>
   1763c:	ldrb	r0, [r7], #1
   17640:	cmp	r0, #0
   17644:	mov	r4, r7
   17648:	mov	sl, r5
   1764c:	add	r5, sp, #12
   17650:	ldr	r8, [sp]
   17654:	bne	176e0 <__assert_fail@plt+0x5c68>
   17658:	b	176ec <__assert_fail@plt+0x5c74>
   1765c:	mov	r0, r6
   17660:	bl	1b7bc <__assert_fail@plt+0x9d44>
   17664:	mov	r4, #1
   17668:	ldrb	r0, [sp, #92]	; 0x5c
   1766c:	cmp	r0, #0
   17670:	mov	r1, #1
   17674:	beq	17694 <__assert_fail@plt+0x5c1c>
   17678:	ldr	r0, [sp, #96]	; 0x60
   1767c:	cmp	r0, #0
   17680:	mov	r1, #1
   17684:	beq	17694 <__assert_fail@plt+0x5c1c>
   17688:	bl	1191c <iswalnum@plt>
   1768c:	clz	r0, r0
   17690:	lsr	r1, r0, #5
   17694:	ldr	r0, [sp, #8]
   17698:	tst	r0, r1
   1769c:	bne	176f0 <__assert_fail@plt+0x5c78>
   176a0:	mov	r4, #0
   176a4:	strb	r4, [sp, #68]	; 0x44
   176a8:	str	r7, [sp, #84]	; 0x54
   176ac:	str	r4, [r8]
   176b0:	str	r4, [r8, #4]
   176b4:	strb	r4, [sp, #80]	; 0x50
   176b8:	mov	r0, r6
   176bc:	bl	1b7bc <__assert_fail@plt+0x9d44>
   176c0:	ldrb	r0, [sp, #92]	; 0x5c
   176c4:	cmp	r0, #0
   176c8:	beq	176d8 <__assert_fail@plt+0x5c60>
   176cc:	ldr	r0, [sp, #96]	; 0x60
   176d0:	cmp	r0, #0
   176d4:	beq	176f0 <__assert_fail@plt+0x5c78>
   176d8:	ldr	r0, [sp, #88]	; 0x58
   176dc:	add	r4, r7, r0
   176e0:	ldrb	r0, [r4]
   176e4:	cmp	r0, #0
   176e8:	bne	174a0 <__assert_fail@plt+0x5a28>
   176ec:	mov	r4, #0
   176f0:	mov	r0, sl
   176f4:	bl	17204 <__assert_fail@plt+0x578c>
   176f8:	mov	r0, r4
   176fc:	sub	sp, fp, #28
   17700:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17704:	mov	r4, #1
   17708:	mov	sl, r5
   1770c:	b	176f0 <__assert_fail@plt+0x5c78>
   17710:	bl	11a60 <abort@plt>
   17714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17718:	add	fp, sp, #28
   1771c:	sub	sp, sp, #12
   17720:	mov	r5, r1
   17724:	mov	r8, r0
   17728:	mov	sl, #0
   1772c:	mov	r0, #0
   17730:	mov	r1, r8
   17734:	mov	r2, #5
   17738:	bl	11754 <dcgettext@plt>
   1773c:	mov	r6, r0
   17740:	bl	1ab30 <__assert_fail@plt+0x90b8>
   17744:	mov	r4, r0
   17748:	movw	r1, #64496	; 0xfbf0
   1774c:	movt	r1, #1
   17750:	bl	1a850 <__assert_fail@plt+0x8dd8>
   17754:	cmp	r0, #0
   17758:	beq	1780c <__assert_fail@plt+0x5d94>
   1775c:	str	r6, [sp, #8]
   17760:	movw	sl, #64496	; 0xfbf0
   17764:	movt	sl, #1
   17768:	mov	r0, r5
   1776c:	mov	r1, sl
   17770:	mov	r2, r4
   17774:	bl	1a420 <__assert_fail@plt+0x89a8>
   17778:	mov	r7, r0
   1777c:	mov	r0, r4
   17780:	bl	118e0 <strlen@plt>
   17784:	mov	r6, r0
   17788:	add	r0, r0, #11
   1778c:	bl	19fb4 <__assert_fail@plt+0x853c>
   17790:	mov	r9, r0
   17794:	mov	r1, r4
   17798:	mov	r2, r6
   1779c:	bl	11718 <memcpy@plt>
   177a0:	add	r0, r9, r6
   177a4:	mov	r4, #0
   177a8:	movw	r1, #64632	; 0xfc78
   177ac:	movt	r1, #1
   177b0:	vldr	d16, [r1]
   177b4:	strb	r4, [r0, #10]
   177b8:	movw	r1, #21577	; 0x5449
   177bc:	strh	r1, [r0, #8]
   177c0:	vst1.8	{d16}, [r0]
   177c4:	mov	r0, r5
   177c8:	mov	r1, sl
   177cc:	mov	r2, r9
   177d0:	bl	1a420 <__assert_fail@plt+0x89a8>
   177d4:	mov	sl, r0
   177d8:	mov	r0, r9
   177dc:	bl	17204 <__assert_fail@plt+0x578c>
   177e0:	cmp	sl, #0
   177e4:	beq	17804 <__assert_fail@plt+0x5d8c>
   177e8:	mov	r0, sl
   177ec:	mov	r1, #63	; 0x3f
   177f0:	bl	118ec <strchr@plt>
   177f4:	cmp	r0, #0
   177f8:	beq	1781c <__assert_fail@plt+0x5da4>
   177fc:	mov	r0, sl
   17800:	bl	17204 <__assert_fail@plt+0x578c>
   17804:	mov	sl, #0
   17808:	b	17820 <__assert_fail@plt+0x5da8>
   1780c:	mov	r4, r5
   17810:	mov	r7, r5
   17814:	mov	r9, #0
   17818:	b	17828 <__assert_fail@plt+0x5db0>
   1781c:	mov	r4, sl
   17820:	mov	r9, r7
   17824:	ldr	r6, [sp, #8]
   17828:	cmp	r4, #0
   1782c:	mov	r5, r4
   17830:	moveq	r5, r8
   17834:	cmp	r7, #0
   17838:	movne	r5, r7
   1783c:	mov	r0, r6
   17840:	mov	r1, r8
   17844:	bl	116ac <strcmp@plt>
   17848:	cmp	r0, #0
   1784c:	beq	178c0 <__assert_fail@plt+0x5e48>
   17850:	mov	r0, r6
   17854:	mov	r1, r8
   17858:	bl	17458 <__assert_fail@plt+0x59e0>
   1785c:	cmp	r0, #0
   17860:	bne	1789c <__assert_fail@plt+0x5e24>
   17864:	cmp	r7, #0
   17868:	beq	17880 <__assert_fail@plt+0x5e08>
   1786c:	mov	r0, r6
   17870:	mov	r1, r7
   17874:	bl	17458 <__assert_fail@plt+0x59e0>
   17878:	cmp	r0, #0
   1787c:	bne	1789c <__assert_fail@plt+0x5e24>
   17880:	cmp	r4, #0
   17884:	beq	178f0 <__assert_fail@plt+0x5e78>
   17888:	mov	r0, r6
   1788c:	mov	r1, r4
   17890:	bl	17458 <__assert_fail@plt+0x59e0>
   17894:	cmp	r0, #0
   17898:	beq	178f0 <__assert_fail@plt+0x5e78>
   1789c:	cmp	r9, #0
   178a0:	beq	178ac <__assert_fail@plt+0x5e34>
   178a4:	mov	r0, r9
   178a8:	bl	17204 <__assert_fail@plt+0x578c>
   178ac:	cmp	sl, #0
   178b0:	beq	17954 <__assert_fail@plt+0x5edc>
   178b4:	mov	r0, sl
   178b8:	bl	17204 <__assert_fail@plt+0x578c>
   178bc:	b	17954 <__assert_fail@plt+0x5edc>
   178c0:	cmp	r9, #0
   178c4:	cmpne	r9, r5
   178c8:	beq	178d4 <__assert_fail@plt+0x5e5c>
   178cc:	mov	r0, r9
   178d0:	bl	17204 <__assert_fail@plt+0x578c>
   178d4:	cmp	sl, #0
   178d8:	cmpne	sl, r5
   178dc:	beq	178e8 <__assert_fail@plt+0x5e70>
   178e0:	mov	r0, sl
   178e4:	bl	17204 <__assert_fail@plt+0x578c>
   178e8:	mov	r6, r5
   178ec:	b	17954 <__assert_fail@plt+0x5edc>
   178f0:	mov	r0, r6
   178f4:	bl	118e0 <strlen@plt>
   178f8:	mov	r4, r0
   178fc:	mov	r0, r5
   17900:	bl	118e0 <strlen@plt>
   17904:	add	r0, r4, r0
   17908:	add	r0, r0, #4
   1790c:	bl	19fb4 <__assert_fail@plt+0x853c>
   17910:	mov	r4, r0
   17914:	str	r6, [sp]
   17918:	str	r5, [sp, #4]
   1791c:	movw	r3, #64488	; 0xfbe8
   17920:	movt	r3, #1
   17924:	mov	r1, #1
   17928:	mvn	r2, #0
   1792c:	bl	11928 <__sprintf_chk@plt>
   17930:	cmp	r9, #0
   17934:	beq	17940 <__assert_fail@plt+0x5ec8>
   17938:	mov	r0, r9
   1793c:	bl	17204 <__assert_fail@plt+0x578c>
   17940:	cmp	sl, #0
   17944:	beq	17950 <__assert_fail@plt+0x5ed8>
   17948:	mov	r0, sl
   1794c:	bl	17204 <__assert_fail@plt+0x578c>
   17950:	mov	r6, r4
   17954:	mov	r0, r6
   17958:	sub	sp, fp, #28
   1795c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17960:	push	{r4, r5, r6, sl, fp, lr}
   17964:	add	fp, sp, #16
   17968:	mov	r4, r0
   1796c:	movw	r0, #4616	; 0x1208
   17970:	movt	r0, #3
   17974:	cmp	r4, #0
   17978:	moveq	r4, r0
   1797c:	bl	11910 <__errno_location@plt>
   17980:	mov	r5, r0
   17984:	ldr	r6, [r0]
   17988:	mov	r0, r4
   1798c:	mov	r1, #48	; 0x30
   17990:	bl	1a2a8 <__assert_fail@plt+0x8830>
   17994:	str	r6, [r5]
   17998:	pop	{r4, r5, r6, sl, fp, pc}
   1799c:	movw	r1, #4616	; 0x1208
   179a0:	movt	r1, #3
   179a4:	cmp	r0, #0
   179a8:	movne	r1, r0
   179ac:	ldr	r0, [r1]
   179b0:	bx	lr
   179b4:	movw	r2, #4616	; 0x1208
   179b8:	movt	r2, #3
   179bc:	cmp	r0, #0
   179c0:	movne	r2, r0
   179c4:	str	r1, [r2]
   179c8:	bx	lr
   179cc:	movw	r3, #4616	; 0x1208
   179d0:	movt	r3, #3
   179d4:	cmp	r0, #0
   179d8:	movne	r3, r0
   179dc:	ubfx	r0, r1, #5, #3
   179e0:	add	r0, r3, r0, lsl #2
   179e4:	ldr	r3, [r0, #8]
   179e8:	and	r1, r1, #31
   179ec:	eor	r2, r2, r3, lsr r1
   179f0:	and	r2, r2, #1
   179f4:	eor	r2, r3, r2, lsl r1
   179f8:	str	r2, [r0, #8]
   179fc:	mov	r0, #1
   17a00:	and	r0, r0, r3, lsr r1
   17a04:	bx	lr
   17a08:	movw	r2, #4616	; 0x1208
   17a0c:	movt	r2, #3
   17a10:	cmp	r0, #0
   17a14:	movne	r2, r0
   17a18:	ldr	r0, [r2, #4]
   17a1c:	str	r1, [r2, #4]
   17a20:	bx	lr
   17a24:	movw	r3, #4616	; 0x1208
   17a28:	movt	r3, #3
   17a2c:	cmp	r0, #0
   17a30:	movne	r3, r0
   17a34:	mov	r0, #10
   17a38:	str	r0, [r3]
   17a3c:	cmp	r1, #0
   17a40:	cmpne	r2, #0
   17a44:	bne	17a54 <__assert_fail@plt+0x5fdc>
   17a48:	push	{fp, lr}
   17a4c:	mov	fp, sp
   17a50:	bl	11a60 <abort@plt>
   17a54:	str	r1, [r3, #40]	; 0x28
   17a58:	str	r2, [r3, #44]	; 0x2c
   17a5c:	bx	lr
   17a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a64:	add	fp, sp, #28
   17a68:	sub	sp, sp, #20
   17a6c:	mov	r8, r3
   17a70:	mov	r9, r2
   17a74:	mov	sl, r1
   17a78:	mov	r7, r0
   17a7c:	ldr	r0, [fp, #8]
   17a80:	movw	r5, #4616	; 0x1208
   17a84:	movt	r5, #3
   17a88:	cmp	r0, #0
   17a8c:	movne	r5, r0
   17a90:	bl	11910 <__errno_location@plt>
   17a94:	mov	r4, r0
   17a98:	ldm	r5, {r0, r1}
   17a9c:	ldr	r2, [r5, #40]	; 0x28
   17aa0:	ldr	r3, [r5, #44]	; 0x2c
   17aa4:	ldr	r6, [r4]
   17aa8:	add	r5, r5, #8
   17aac:	stm	sp, {r0, r1, r5}
   17ab0:	str	r2, [sp, #12]
   17ab4:	str	r3, [sp, #16]
   17ab8:	mov	r0, r7
   17abc:	mov	r1, sl
   17ac0:	mov	r2, r9
   17ac4:	mov	r3, r8
   17ac8:	bl	17ad8 <__assert_fail@plt+0x6060>
   17acc:	str	r6, [r4]
   17ad0:	sub	sp, fp, #28
   17ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ad8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17adc:	add	fp, sp, #28
   17ae0:	sub	sp, sp, #156	; 0x9c
   17ae4:	mov	r9, r3
   17ae8:	str	r2, [fp, #-84]	; 0xffffffac
   17aec:	mov	r6, r1
   17af0:	mov	r7, r0
   17af4:	ldr	r0, [fp, #12]
   17af8:	and	r1, r0, #4
   17afc:	str	r1, [sp, #32]
   17b00:	and	r1, r0, #1
   17b04:	str	r1, [sp, #36]	; 0x24
   17b08:	ubfx	sl, r0, #1, #1
   17b0c:	bl	11820 <__ctype_get_mb_cur_max@plt>
   17b10:	str	r0, [sp, #40]	; 0x28
   17b14:	ldr	r0, [fp, #24]
   17b18:	str	r0, [sp, #76]	; 0x4c
   17b1c:	ldr	r0, [fp, #20]
   17b20:	str	r0, [sp, #68]	; 0x44
   17b24:	ldr	r0, [fp, #8]
   17b28:	str	r0, [fp, #-60]	; 0xffffffc4
   17b2c:	mov	r0, #0
   17b30:	str	r0, [sp, #72]	; 0x48
   17b34:	mov	r0, #0
   17b38:	str	r0, [sp, #92]	; 0x5c
   17b3c:	mov	r0, #0
   17b40:	str	r0, [fp, #-72]	; 0xffffffb8
   17b44:	mov	r0, #0
   17b48:	mov	r1, #0
   17b4c:	str	r1, [fp, #-56]	; 0xffffffc8
   17b50:	mov	r1, #0
   17b54:	str	r1, [sp, #56]	; 0x38
   17b58:	mov	r5, #1
   17b5c:	str	r7, [sp, #80]	; 0x50
   17b60:	mov	r4, r6
   17b64:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17b68:	cmp	r6, #10
   17b6c:	bhi	18ad4 <__assert_fail@plt+0x705c>
   17b70:	add	r1, pc, #20
   17b74:	mov	r8, #0
   17b78:	mov	r2, #1
   17b7c:	mov	r3, #0
   17b80:	ldr	ip, [fp, #-84]	; 0xffffffac
   17b84:	mov	lr, r9
   17b88:	ldr	pc, [r1, r6, lsl #2]
   17b8c:	andeq	r7, r1, r4, ror #24
   17b90:	muleq	r1, r4, ip
   17b94:	andeq	r7, r1, r4, asr ip
   17b98:	andeq	r7, r1, ip, asr #24
   17b9c:	andeq	r7, r1, r8, lsl #25
   17ba0:	andeq	r7, r1, r8, ror #25
   17ba4:	andeq	r7, r1, r4, ror ip
   17ba8:	andeq	r7, r1, r4, asr #26
   17bac:			; <UNDEFINED> instruction: 0x00017bb8
   17bb0:			; <UNDEFINED> instruction: 0x00017bb8
   17bb4:	andeq	r7, r1, r0, ror #23
   17bb8:	movw	r0, #64726	; 0xfcd6
   17bbc:	movt	r0, #1
   17bc0:	mov	r1, r6
   17bc4:	bl	190e0 <__assert_fail@plt+0x7668>
   17bc8:	str	r0, [sp, #68]	; 0x44
   17bcc:	movw	r0, #64610	; 0xfc62
   17bd0:	movt	r0, #1
   17bd4:	mov	r1, r6
   17bd8:	bl	190e0 <__assert_fail@plt+0x7668>
   17bdc:	str	r0, [sp, #76]	; 0x4c
   17be0:	mov	r8, #0
   17be4:	tst	sl, #1
   17be8:	bne	17c20 <__assert_fail@plt+0x61a8>
   17bec:	ldr	r0, [sp, #68]	; 0x44
   17bf0:	ldrb	r0, [r0]
   17bf4:	cmp	r0, #0
   17bf8:	beq	17c20 <__assert_fail@plt+0x61a8>
   17bfc:	ldr	r1, [sp, #68]	; 0x44
   17c00:	add	r1, r1, #1
   17c04:	mov	r8, #0
   17c08:	cmp	r8, r4
   17c0c:	strbcc	r0, [r7, r8]
   17c10:	ldrb	r0, [r1, r8]
   17c14:	add	r8, r8, #1
   17c18:	cmp	r0, #0
   17c1c:	bne	17c08 <__assert_fail@plt+0x6190>
   17c20:	ldr	r6, [sp, #76]	; 0x4c
   17c24:	mov	r0, r6
   17c28:	bl	118e0 <strlen@plt>
   17c2c:	str	r0, [fp, #-72]	; 0xffffffb8
   17c30:	str	r6, [sp, #92]	; 0x5c
   17c34:	mov	r2, #1
   17c38:	mov	r3, sl
   17c3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17c40:	mov	lr, r9
   17c44:	ldr	r6, [fp, #-60]	; 0xffffffc4
   17c48:	b	17d44 <__assert_fail@plt+0x62cc>
   17c4c:	mov	r0, #1
   17c50:	b	17c94 <__assert_fail@plt+0x621c>
   17c54:	tst	sl, #1
   17c58:	bne	17c94 <__assert_fail@plt+0x621c>
   17c5c:	mov	r2, r0
   17c60:	b	17cbc <__assert_fail@plt+0x6244>
   17c64:	mov	r6, #0
   17c68:	mov	r8, #0
   17c6c:	mov	r2, r0
   17c70:	b	17d40 <__assert_fail@plt+0x62c8>
   17c74:	mov	r0, #1
   17c78:	str	r0, [fp, #-72]	; 0xffffffb8
   17c7c:	mov	r8, #0
   17c80:	mov	r6, #5
   17c84:	b	17d00 <__assert_fail@plt+0x6288>
   17c88:	mov	r2, #1
   17c8c:	tst	sl, #1
   17c90:	beq	17cbc <__assert_fail@plt+0x6244>
   17c94:	mov	r1, #1
   17c98:	str	r1, [fp, #-72]	; 0xffffffb8
   17c9c:	mov	r8, #0
   17ca0:	mov	r6, #2
   17ca4:	movw	r1, #64610	; 0xfc62
   17ca8:	movt	r1, #1
   17cac:	str	r1, [sp, #92]	; 0x5c
   17cb0:	mov	r2, r0
   17cb4:	mov	r3, #1
   17cb8:	b	17d44 <__assert_fail@plt+0x62cc>
   17cbc:	mov	r8, #1
   17cc0:	mov	r6, #2
   17cc4:	cmp	r4, #0
   17cc8:	movne	r0, #39	; 0x27
   17ccc:	strbne	r0, [r7]
   17cd0:	movw	r0, #64610	; 0xfc62
   17cd4:	movt	r0, #1
   17cd8:	str	r0, [sp, #92]	; 0x5c
   17cdc:	mov	r0, #1
   17ce0:	str	r0, [fp, #-72]	; 0xffffffb8
   17ce4:	b	17d40 <__assert_fail@plt+0x62c8>
   17ce8:	mov	r6, #5
   17cec:	tst	sl, #1
   17cf0:	beq	17d18 <__assert_fail@plt+0x62a0>
   17cf4:	mov	r0, #1
   17cf8:	str	r0, [fp, #-72]	; 0xffffffb8
   17cfc:	mov	r8, #0
   17d00:	movw	r0, #64724	; 0xfcd4
   17d04:	movt	r0, #1
   17d08:	str	r0, [sp, #92]	; 0x5c
   17d0c:	mov	r2, #1
   17d10:	mov	r3, #1
   17d14:	b	17d44 <__assert_fail@plt+0x62cc>
   17d18:	cmp	r4, #0
   17d1c:	movne	r0, #34	; 0x22
   17d20:	strbne	r0, [r7]
   17d24:	mov	r8, #1
   17d28:	movw	r0, #64724	; 0xfcd4
   17d2c:	movt	r0, #1
   17d30:	str	r0, [sp, #92]	; 0x5c
   17d34:	mov	r0, #1
   17d38:	str	r0, [fp, #-72]	; 0xffffffb8
   17d3c:	mov	r2, #1
   17d40:	mov	r3, #0
   17d44:	ldr	r0, [fp, #16]
   17d48:	cmp	r0, #0
   17d4c:	movwne	r0, #1
   17d50:	and	r0, r0, r3
   17d54:	str	r0, [fp, #-88]	; 0xffffffa8
   17d58:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17d5c:	cmp	r0, #0
   17d60:	movwne	r0, #1
   17d64:	and	r1, r0, r3
   17d68:	and	r1, r2, r1
   17d6c:	str	r1, [sp, #48]	; 0x30
   17d70:	str	r6, [fp, #-60]	; 0xffffffc4
   17d74:	subs	r6, r6, #2
   17d78:	clz	r1, r6
   17d7c:	lsr	r1, r1, #5
   17d80:	and	r1, r1, r3
   17d84:	str	r1, [sp, #60]	; 0x3c
   17d88:	str	r6, [fp, #-80]	; 0xffffffb0
   17d8c:	mov	r1, r6
   17d90:	movwne	r1, #1
   17d94:	str	r3, [fp, #-76]	; 0xffffffb4
   17d98:	eor	r3, r3, #1
   17d9c:	str	r3, [sp, #88]	; 0x58
   17da0:	orr	r3, r1, r3
   17da4:	str	r3, [sp, #64]	; 0x40
   17da8:	and	r1, r1, r2
   17dac:	str	r1, [fp, #-68]	; 0xffffffbc
   17db0:	and	r0, r0, r1
   17db4:	str	r0, [fp, #-64]	; 0xffffffc0
   17db8:	str	r2, [sp, #84]	; 0x54
   17dbc:	eor	r0, r2, #1
   17dc0:	str	r0, [sp, #52]	; 0x34
   17dc4:	mov	r6, #0
   17dc8:	cmn	lr, #1
   17dcc:	beq	17ddc <__assert_fail@plt+0x6364>
   17dd0:	cmp	r6, lr
   17dd4:	bne	17de8 <__assert_fail@plt+0x6370>
   17dd8:	b	18954 <__assert_fail@plt+0x6edc>
   17ddc:	ldrb	r0, [ip, r6]
   17de0:	cmp	r0, #0
   17de4:	beq	18954 <__assert_fail@plt+0x6edc>
   17de8:	str	r5, [fp, #-48]	; 0xffffffd0
   17dec:	mov	sl, #0
   17df0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17df4:	cmp	r0, #0
   17df8:	beq	17e2c <__assert_fail@plt+0x63b4>
   17dfc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17e00:	add	r5, r6, r0
   17e04:	cmp	r0, #2
   17e08:	bcc	17e24 <__assert_fail@plt+0x63ac>
   17e0c:	cmn	lr, #1
   17e10:	bne	17e24 <__assert_fail@plt+0x63ac>
   17e14:	mov	r0, ip
   17e18:	bl	118e0 <strlen@plt>
   17e1c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e20:	mov	lr, r0
   17e24:	cmp	r5, lr
   17e28:	bls	17e38 <__assert_fail@plt+0x63c0>
   17e2c:	mov	r0, #0
   17e30:	str	r0, [fp, #-52]	; 0xffffffcc
   17e34:	b	17e84 <__assert_fail@plt+0x640c>
   17e38:	mov	r5, r4
   17e3c:	mov	r4, lr
   17e40:	add	r0, ip, r6
   17e44:	ldr	r1, [sp, #92]	; 0x5c
   17e48:	ldr	r2, [fp, #-72]	; 0xffffffb8
   17e4c:	bl	1173c <memcmp@plt>
   17e50:	cmp	r0, #0
   17e54:	mov	r1, r0
   17e58:	movwne	r1, #1
   17e5c:	ldr	r2, [sp, #88]	; 0x58
   17e60:	orr	r1, r1, r2
   17e64:	tst	r1, #1
   17e68:	beq	18a18 <__assert_fail@plt+0x6fa0>
   17e6c:	clz	r0, r0
   17e70:	lsr	r0, r0, #5
   17e74:	str	r0, [fp, #-52]	; 0xffffffcc
   17e78:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e7c:	mov	lr, r4
   17e80:	mov	r4, r5
   17e84:	ldrb	r5, [ip, r6]
   17e88:	cmp	r5, #126	; 0x7e
   17e8c:	bhi	18248 <__assert_fail@plt+0x67d0>
   17e90:	mov	r9, #1
   17e94:	mov	r2, #110	; 0x6e
   17e98:	mov	r0, #97	; 0x61
   17e9c:	add	r3, pc, #4
   17ea0:	mov	r1, #0
   17ea4:	ldr	pc, [r3, r5, lsl #2]
   17ea8:	andeq	r8, r1, r0, asr #2
   17eac:	andeq	r8, r1, r8, asr #4
   17eb0:	andeq	r8, r1, r8, asr #4
   17eb4:	andeq	r8, r1, r8, asr #4
   17eb8:	andeq	r8, r1, r8, asr #4
   17ebc:	andeq	r8, r1, r8, asr #4
   17ec0:	andeq	r8, r1, r8, asr #4
   17ec4:	andeq	r8, r1, ip, lsl #6
   17ec8:	andeq	r8, r1, r0, lsr #2
   17ecc:	andeq	r8, r1, r8, lsl r1
   17ed0:	andeq	r8, r1, ip, lsr #2
   17ed4:			; <UNDEFINED> instruction: 0x000181b0
   17ed8:	andeq	r8, r1, r0, lsl r1
   17edc:	andeq	r8, r1, r8, lsr #2
   17ee0:	andeq	r8, r1, r8, asr #4
   17ee4:	andeq	r8, r1, r8, asr #4
   17ee8:	andeq	r8, r1, r8, asr #4
   17eec:	andeq	r8, r1, r8, asr #4
   17ef0:	andeq	r8, r1, r8, asr #4
   17ef4:	andeq	r8, r1, r8, asr #4
   17ef8:	andeq	r8, r1, r8, asr #4
   17efc:	andeq	r8, r1, r8, asr #4
   17f00:	andeq	r8, r1, r8, asr #4
   17f04:	andeq	r8, r1, r8, asr #4
   17f08:	andeq	r8, r1, r8, asr #4
   17f0c:	andeq	r8, r1, r8, asr #4
   17f10:	andeq	r8, r1, r8, asr #4
   17f14:	andeq	r8, r1, r8, asr #4
   17f18:	andeq	r8, r1, r8, asr #4
   17f1c:	andeq	r8, r1, r8, asr #4
   17f20:	andeq	r8, r1, r8, asr #4
   17f24:	andeq	r8, r1, r8, asr #4
   17f28:			; <UNDEFINED> instruction: 0x000182bc
   17f2c:	andeq	r8, r1, r0, asr #5
   17f30:	andeq	r8, r1, r0, asr #5
   17f34:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   17f38:	andeq	r8, r1, r0, asr #5
   17f3c:	andeq	r8, r1, r4, lsr #1
   17f40:	andeq	r8, r1, r0, asr #5
   17f44:			; <UNDEFINED> instruction: 0x000181b8
   17f48:	andeq	r8, r1, r0, asr #5
   17f4c:	andeq	r8, r1, r0, asr #5
   17f50:	andeq	r8, r1, r0, asr #5
   17f54:	andeq	r8, r1, r4, lsr #1
   17f58:	andeq	r8, r1, r4, lsr #1
   17f5c:	andeq	r8, r1, r4, lsr #1
   17f60:	andeq	r8, r1, r4, lsr #1
   17f64:	andeq	r8, r1, r4, lsr #1
   17f68:	andeq	r8, r1, r4, lsr #1
   17f6c:	andeq	r8, r1, r4, lsr #1
   17f70:	andeq	r8, r1, r4, lsr #1
   17f74:	andeq	r8, r1, r4, lsr #1
   17f78:	andeq	r8, r1, r4, lsr #1
   17f7c:	andeq	r8, r1, r4, lsr #1
   17f80:	andeq	r8, r1, r4, lsr #1
   17f84:	andeq	r8, r1, r4, lsr #1
   17f88:	andeq	r8, r1, r4, lsr #1
   17f8c:	andeq	r8, r1, r4, lsr #1
   17f90:	andeq	r8, r1, r4, lsr #1
   17f94:	andeq	r8, r1, r0, asr #5
   17f98:	andeq	r8, r1, r0, asr #5
   17f9c:	andeq	r8, r1, r0, asr #5
   17fa0:	andeq	r8, r1, r0, asr #5
   17fa4:	andeq	r8, r1, r0, lsl #3
   17fa8:	andeq	r8, r1, r8, asr #4
   17fac:	andeq	r8, r1, r4, lsr #1
   17fb0:	andeq	r8, r1, r4, lsr #1
   17fb4:	andeq	r8, r1, r4, lsr #1
   17fb8:	andeq	r8, r1, r4, lsr #1
   17fbc:	andeq	r8, r1, r4, lsr #1
   17fc0:	andeq	r8, r1, r4, lsr #1
   17fc4:	andeq	r8, r1, r4, lsr #1
   17fc8:	andeq	r8, r1, r4, lsr #1
   17fcc:	andeq	r8, r1, r4, lsr #1
   17fd0:	andeq	r8, r1, r4, lsr #1
   17fd4:	andeq	r8, r1, r4, lsr #1
   17fd8:	andeq	r8, r1, r4, lsr #1
   17fdc:	andeq	r8, r1, r4, lsr #1
   17fe0:	andeq	r8, r1, r4, lsr #1
   17fe4:	andeq	r8, r1, r4, lsr #1
   17fe8:	andeq	r8, r1, r4, lsr #1
   17fec:	andeq	r8, r1, r4, lsr #1
   17ff0:	andeq	r8, r1, r4, lsr #1
   17ff4:	andeq	r8, r1, r4, lsr #1
   17ff8:	andeq	r8, r1, r4, lsr #1
   17ffc:	andeq	r8, r1, r4, lsr #1
   18000:	andeq	r8, r1, r4, lsr #1
   18004:	andeq	r8, r1, r4, lsr #1
   18008:	andeq	r8, r1, r4, lsr #1
   1800c:	andeq	r8, r1, r4, lsr #1
   18010:	andeq	r8, r1, r4, lsr #1
   18014:	andeq	r8, r1, r0, asr #5
   18018:	andeq	r8, r1, ip, ror #1
   1801c:	andeq	r8, r1, r4, lsr #1
   18020:	andeq	r8, r1, r0, asr #5
   18024:	andeq	r8, r1, r4, lsr #1
   18028:	andeq	r8, r1, r0, asr #5
   1802c:	andeq	r8, r1, r4, lsr #1
   18030:	andeq	r8, r1, r4, lsr #1
   18034:	andeq	r8, r1, r4, lsr #1
   18038:	andeq	r8, r1, r4, lsr #1
   1803c:	andeq	r8, r1, r4, lsr #1
   18040:	andeq	r8, r1, r4, lsr #1
   18044:	andeq	r8, r1, r4, lsr #1
   18048:	andeq	r8, r1, r4, lsr #1
   1804c:	andeq	r8, r1, r4, lsr #1
   18050:	andeq	r8, r1, r4, lsr #1
   18054:	andeq	r8, r1, r4, lsr #1
   18058:	andeq	r8, r1, r4, lsr #1
   1805c:	andeq	r8, r1, r4, lsr #1
   18060:	andeq	r8, r1, r4, lsr #1
   18064:	andeq	r8, r1, r4, lsr #1
   18068:	andeq	r8, r1, r4, lsr #1
   1806c:	andeq	r8, r1, r4, lsr #1
   18070:	andeq	r8, r1, r4, lsr #1
   18074:	andeq	r8, r1, r4, lsr #1
   18078:	andeq	r8, r1, r4, lsr #1
   1807c:	andeq	r8, r1, r4, lsr #1
   18080:	andeq	r8, r1, r4, lsr #1
   18084:	andeq	r8, r1, r4, lsr #1
   18088:	andeq	r8, r1, r4, lsr #1
   1808c:	andeq	r8, r1, r4, lsr #1
   18090:	andeq	r8, r1, r4, lsr #1
   18094:	andeq	r8, r1, ip, asr #1
   18098:	andeq	r8, r1, r0, asr #5
   1809c:	andeq	r8, r1, ip, asr #1
   180a0:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   180a4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   180a8:	cmp	r0, #0
   180ac:	beq	18320 <__assert_fail@plt+0x68a8>
   180b0:	ldr	r0, [fp, #16]
   180b4:	b	18324 <__assert_fail@plt+0x68ac>
   180b8:	mov	r9, #0
   180bc:	cmp	r6, #0
   180c0:	beq	182bc <__assert_fail@plt+0x6844>
   180c4:	mov	sl, #0
   180c8:	b	180a4 <__assert_fail@plt+0x662c>
   180cc:	mov	r9, #0
   180d0:	cmn	lr, #1
   180d4:	beq	182a0 <__assert_fail@plt+0x6828>
   180d8:	cmp	r6, #0
   180dc:	bne	180c4 <__assert_fail@plt+0x664c>
   180e0:	cmp	lr, #1
   180e4:	beq	182bc <__assert_fail@plt+0x6844>
   180e8:	b	180c4 <__assert_fail@plt+0x664c>
   180ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   180f0:	cmp	r0, #2
   180f4:	bne	182e8 <__assert_fail@plt+0x6870>
   180f8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   180fc:	tst	r0, #1
   18100:	bne	18a30 <__assert_fail@plt+0x6fb8>
   18104:	mov	sl, #0
   18108:	mov	r0, #92	; 0x5c
   1810c:	b	182fc <__assert_fail@plt+0x6884>
   18110:	mov	r0, #102	; 0x66
   18114:	b	1830c <__assert_fail@plt+0x6894>
   18118:	mov	r2, #116	; 0x74
   1811c:	b	1812c <__assert_fail@plt+0x66b4>
   18120:	mov	r0, #98	; 0x62
   18124:	b	1830c <__assert_fail@plt+0x6894>
   18128:	mov	r2, #114	; 0x72
   1812c:	ldr	r0, [sp, #64]	; 0x40
   18130:	tst	r0, #1
   18134:	mov	r0, r2
   18138:	bne	1830c <__assert_fail@plt+0x6894>
   1813c:	b	18a30 <__assert_fail@plt+0x6fb8>
   18140:	ldr	r0, [sp, #84]	; 0x54
   18144:	tst	r0, #1
   18148:	beq	183fc <__assert_fail@plt+0x6984>
   1814c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   18150:	tst	r0, #1
   18154:	bne	18a30 <__assert_fail@plt+0x6fb8>
   18158:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1815c:	cmp	r0, #2
   18160:	ldr	r0, [fp, #-80]	; 0xffffffb0
   18164:	movwne	r0, #1
   18168:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1816c:	orr	r0, r0, r2
   18170:	tst	r0, #1
   18174:	beq	187f0 <__assert_fail@plt+0x6d78>
   18178:	mov	r0, r8
   1817c:	b	18824 <__assert_fail@plt+0x6dac>
   18180:	mov	sl, #0
   18184:	mov	r5, #63	; 0x3f
   18188:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1818c:	cmp	r0, #5
   18190:	beq	185b0 <__assert_fail@plt+0x6b38>
   18194:	cmp	r0, #2
   18198:	bne	18650 <__assert_fail@plt+0x6bd8>
   1819c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   181a0:	tst	r0, #1
   181a4:	mov	r9, #0
   181a8:	beq	180a4 <__assert_fail@plt+0x662c>
   181ac:	b	18a30 <__assert_fail@plt+0x6fb8>
   181b0:	mov	r0, #118	; 0x76
   181b4:	b	1830c <__assert_fail@plt+0x6894>
   181b8:	mov	r5, #39	; 0x27
   181bc:	mov	r0, #1
   181c0:	str	r0, [sp, #56]	; 0x38
   181c4:	ldr	r0, [fp, #-60]	; 0xffffffc4
   181c8:	cmp	r0, #2
   181cc:	bne	1841c <__assert_fail@plt+0x69a4>
   181d0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   181d4:	tst	r0, #1
   181d8:	bne	18a30 <__assert_fail@plt+0x6fb8>
   181dc:	ldr	r2, [sp, #72]	; 0x48
   181e0:	cmp	r2, #0
   181e4:	mov	r0, r2
   181e8:	movwne	r0, #1
   181ec:	clz	r1, r4
   181f0:	lsr	r1, r1, #5
   181f4:	orrs	r0, r0, r1
   181f8:	moveq	r2, r4
   181fc:	str	r2, [sp, #72]	; 0x48
   18200:	moveq	r4, r0
   18204:	cmp	r8, r4
   18208:	movcc	r0, #39	; 0x27
   1820c:	strbcc	r0, [r7, r8]
   18210:	add	r0, r8, #1
   18214:	cmp	r0, r4
   18218:	movcc	r1, #92	; 0x5c
   1821c:	strbcc	r1, [r7, r0]
   18220:	add	r0, r8, #2
   18224:	cmp	r0, r4
   18228:	movcc	r1, #39	; 0x27
   1822c:	strbcc	r1, [r7, r0]
   18230:	add	r8, r8, #3
   18234:	mov	r0, #0
   18238:	str	r0, [fp, #-56]	; 0xffffffc8
   1823c:	mov	sl, #0
   18240:	mov	r9, #1
   18244:	b	180a4 <__assert_fail@plt+0x662c>
   18248:	str	r4, [sp, #24]
   1824c:	ldr	r0, [sp, #40]	; 0x28
   18250:	cmp	r0, #1
   18254:	bne	18424 <__assert_fail@plt+0x69ac>
   18258:	str	lr, [sp, #28]
   1825c:	bl	118bc <__ctype_b_loc@plt>
   18260:	ldr	ip, [fp, #-84]	; 0xffffffac
   18264:	ldr	r0, [r0]
   18268:	add	r0, r0, r5, lsl #1
   1826c:	ldrb	r0, [r0, #1]
   18270:	ubfx	r9, r0, #6, #1
   18274:	mov	r1, #1
   18278:	ldr	r4, [sp, #24]
   1827c:	ldr	r0, [sp, #52]	; 0x34
   18280:	orr	r0, r9, r0
   18284:	mov	r2, r1
   18288:	cmp	r1, #1
   1828c:	bhi	18658 <__assert_fail@plt+0x6be0>
   18290:	tst	r0, #1
   18294:	beq	18658 <__assert_fail@plt+0x6be0>
   18298:	ldr	lr, [sp, #28]
   1829c:	b	180a4 <__assert_fail@plt+0x662c>
   182a0:	cmp	r6, #0
   182a4:	ldrbeq	r0, [ip, #1]
   182a8:	cmpeq	r0, #0
   182ac:	beq	182bc <__assert_fail@plt+0x6844>
   182b0:	mvn	lr, #0
   182b4:	mov	sl, #0
   182b8:	b	180a4 <__assert_fail@plt+0x662c>
   182bc:	mov	r1, #1
   182c0:	ldr	r0, [fp, #-60]	; 0xffffffc4
   182c4:	cmp	r0, #2
   182c8:	bne	182e0 <__assert_fail@plt+0x6868>
   182cc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   182d0:	tst	r0, #1
   182d4:	mov	r9, r1
   182d8:	beq	180a4 <__assert_fail@plt+0x662c>
   182dc:	b	18a30 <__assert_fail@plt+0x6fb8>
   182e0:	mov	r9, r1
   182e4:	b	180a4 <__assert_fail@plt+0x662c>
   182e8:	mov	sl, #0
   182ec:	mov	r0, #92	; 0x5c
   182f0:	ldr	r1, [sp, #48]	; 0x30
   182f4:	cmp	r1, #0
   182f8:	beq	1830c <__assert_fail@plt+0x6894>
   182fc:	mov	r9, #0
   18300:	cmp	sl, #0
   18304:	beq	188bc <__assert_fail@plt+0x6e44>
   18308:	b	188f8 <__assert_fail@plt+0x6e80>
   1830c:	mov	r9, #0
   18310:	ldr	r1, [sp, #84]	; 0x54
   18314:	tst	r1, #1
   18318:	mov	sl, #0
   1831c:	bne	1835c <__assert_fail@plt+0x68e4>
   18320:	ldr	r0, [fp, #-88]	; 0xffffffa8
   18324:	cmp	r0, #0
   18328:	mov	r0, r5
   1832c:	beq	18350 <__assert_fail@plt+0x68d8>
   18330:	ubfx	r0, r5, #5, #3
   18334:	ldr	r1, [fp, #16]
   18338:	ldr	r0, [r1, r0, lsl #2]
   1833c:	and	r1, r5, #31
   18340:	mov	r2, #1
   18344:	tst	r0, r2, lsl r1
   18348:	mov	r0, r5
   1834c:	bne	1835c <__assert_fail@plt+0x68e4>
   18350:	ldr	r1, [fp, #-52]	; 0xffffffcc
   18354:	cmp	r1, #0
   18358:	beq	188b4 <__assert_fail@plt+0x6e3c>
   1835c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18360:	tst	r1, #1
   18364:	bne	18a30 <__assert_fail@plt+0x6fb8>
   18368:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1836c:	cmp	r1, #2
   18370:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18374:	movwne	r1, #1
   18378:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1837c:	orr	r1, r1, r2
   18380:	tst	r1, #1
   18384:	beq	18390 <__assert_fail@plt+0x6918>
   18388:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1838c:	b	183cc <__assert_fail@plt+0x6954>
   18390:	cmp	r8, r4
   18394:	movcc	r1, #39	; 0x27
   18398:	strbcc	r1, [r7, r8]
   1839c:	add	r1, r8, #1
   183a0:	cmp	r1, r4
   183a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   183a8:	movcc	r2, #36	; 0x24
   183ac:	strbcc	r2, [r7, r1]
   183b0:	add	r1, r8, #2
   183b4:	cmp	r1, r4
   183b8:	movcc	r2, #39	; 0x27
   183bc:	strbcc	r2, [r7, r1]
   183c0:	add	r8, r8, #3
   183c4:	mov	r1, #1
   183c8:	str	r1, [fp, #-56]	; 0xffffffc8
   183cc:	cmp	r8, r4
   183d0:	movcc	r1, #92	; 0x5c
   183d4:	strbcc	r1, [r7, r8]
   183d8:	add	r8, r8, #1
   183dc:	cmp	r8, r4
   183e0:	strbcc	r0, [r7, r8]
   183e4:	and	r5, r5, r9
   183e8:	add	r8, r8, #1
   183ec:	add	r6, r6, #1
   183f0:	cmn	lr, #1
   183f4:	bne	17dd0 <__assert_fail@plt+0x6358>
   183f8:	b	17ddc <__assert_fail@plt+0x6364>
   183fc:	mov	r9, #0
   18400:	ldr	r0, [sp, #36]	; 0x24
   18404:	cmp	r0, #0
   18408:	mov	sl, #0
   1840c:	mov	r5, #0
   18410:	beq	18320 <__assert_fail@plt+0x68a8>
   18414:	ldr	r5, [fp, #-48]	; 0xffffffd0
   18418:	b	183ec <__assert_fail@plt+0x6974>
   1841c:	mov	r9, #1
   18420:	b	180a4 <__assert_fail@plt+0x662c>
   18424:	mov	r0, #0
   18428:	str	r0, [fp, #-36]	; 0xffffffdc
   1842c:	str	r0, [fp, #-40]	; 0xffffffd8
   18430:	cmn	lr, #1
   18434:	bne	18448 <__assert_fail@plt+0x69d0>
   18438:	mov	r0, ip
   1843c:	bl	118e0 <strlen@plt>
   18440:	ldr	ip, [fp, #-84]	; 0xffffffac
   18444:	mov	lr, r0
   18448:	add	r0, ip, r6
   1844c:	str	r0, [sp, #20]
   18450:	mov	r9, #1
   18454:	mov	r7, #0
   18458:	sub	r4, fp, #40	; 0x28
   1845c:	str	lr, [sp, #28]
   18460:	str	r7, [sp, #44]	; 0x2c
   18464:	add	r7, r7, r6
   18468:	add	r1, ip, r7
   1846c:	sub	r2, lr, r7
   18470:	sub	r0, fp, #44	; 0x2c
   18474:	mov	r3, r4
   18478:	bl	1ad50 <__assert_fail@plt+0x92d8>
   1847c:	cmp	r0, #0
   18480:	beq	18940 <__assert_fail@plt+0x6ec8>
   18484:	cmn	r0, #1
   18488:	beq	18900 <__assert_fail@plt+0x6e88>
   1848c:	cmn	r0, #2
   18490:	ldr	lr, [sp, #28]
   18494:	beq	18908 <__assert_fail@plt+0x6e90>
   18498:	cmp	r0, #2
   1849c:	mov	r1, #0
   184a0:	movwcc	r1, #1
   184a4:	ldr	r2, [sp, #60]	; 0x3c
   184a8:	eor	r2, r2, #1
   184ac:	orrs	r1, r2, r1
   184b0:	ldr	r4, [sp, #24]
   184b4:	bne	18574 <__assert_fail@plt+0x6afc>
   184b8:	ldr	r1, [sp, #44]	; 0x2c
   184bc:	ldr	r2, [sp, #20]
   184c0:	add	r1, r2, r1
   184c4:	mov	r2, #1
   184c8:	ldrb	r3, [r1, r2]
   184cc:	sub	r3, r3, #91	; 0x5b
   184d0:	cmp	r3, #33	; 0x21
   184d4:	bhi	18568 <__assert_fail@plt+0x6af0>
   184d8:	add	r7, pc, #0
   184dc:	ldr	pc, [r7, r3, lsl #2]
   184e0:	andeq	r8, r1, r8, lsr #20
   184e4:	andeq	r8, r1, r8, lsr #20
   184e8:	andeq	r8, r1, r8, ror #10
   184ec:	andeq	r8, r1, r8, lsr #20
   184f0:	andeq	r8, r1, r8, ror #10
   184f4:	andeq	r8, r1, r8, lsr #20
   184f8:	andeq	r8, r1, r8, ror #10
   184fc:	andeq	r8, r1, r8, ror #10
   18500:	andeq	r8, r1, r8, ror #10
   18504:	andeq	r8, r1, r8, ror #10
   18508:	andeq	r8, r1, r8, ror #10
   1850c:	andeq	r8, r1, r8, ror #10
   18510:	andeq	r8, r1, r8, ror #10
   18514:	andeq	r8, r1, r8, ror #10
   18518:	andeq	r8, r1, r8, ror #10
   1851c:	andeq	r8, r1, r8, ror #10
   18520:	andeq	r8, r1, r8, ror #10
   18524:	andeq	r8, r1, r8, ror #10
   18528:	andeq	r8, r1, r8, ror #10
   1852c:	andeq	r8, r1, r8, ror #10
   18530:	andeq	r8, r1, r8, ror #10
   18534:	andeq	r8, r1, r8, ror #10
   18538:	andeq	r8, r1, r8, ror #10
   1853c:	andeq	r8, r1, r8, ror #10
   18540:	andeq	r8, r1, r8, ror #10
   18544:	andeq	r8, r1, r8, ror #10
   18548:	andeq	r8, r1, r8, ror #10
   1854c:	andeq	r8, r1, r8, ror #10
   18550:	andeq	r8, r1, r8, ror #10
   18554:	andeq	r8, r1, r8, ror #10
   18558:	andeq	r8, r1, r8, ror #10
   1855c:	andeq	r8, r1, r8, ror #10
   18560:	andeq	r8, r1, r8, ror #10
   18564:	andeq	r8, r1, r8, lsr #20
   18568:	add	r2, r2, #1
   1856c:	cmp	r2, r0
   18570:	bcc	184c8 <__assert_fail@plt+0x6a50>
   18574:	ldr	r7, [sp, #44]	; 0x2c
   18578:	add	r7, r0, r7
   1857c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   18580:	bl	117f0 <iswprint@plt>
   18584:	cmp	r0, #0
   18588:	movwne	r0, #1
   1858c:	and	r9, r9, r0
   18590:	sub	r4, fp, #40	; 0x28
   18594:	mov	r0, r4
   18598:	bl	11730 <mbsinit@plt>
   1859c:	ldr	lr, [sp, #28]
   185a0:	cmp	r0, #0
   185a4:	ldr	ip, [fp, #-84]	; 0xffffffac
   185a8:	beq	18460 <__assert_fail@plt+0x69e8>
   185ac:	b	18948 <__assert_fail@plt+0x6ed0>
   185b0:	ldr	r0, [sp, #32]
   185b4:	cmp	r0, #0
   185b8:	beq	18650 <__assert_fail@plt+0x6bd8>
   185bc:	add	r0, r6, #2
   185c0:	cmp	r0, lr
   185c4:	bcs	18650 <__assert_fail@plt+0x6bd8>
   185c8:	add	r1, ip, r6
   185cc:	ldrb	r1, [r1, #1]
   185d0:	cmp	r1, #63	; 0x3f
   185d4:	bne	18650 <__assert_fail@plt+0x6bd8>
   185d8:	ldrb	r9, [ip, r0]
   185dc:	sub	r2, r9, #33	; 0x21
   185e0:	cmp	r2, #29
   185e4:	bhi	18650 <__assert_fail@plt+0x6bd8>
   185e8:	mov	r3, #1
   185ec:	movw	r1, #20929	; 0x51c1
   185f0:	movt	r1, #14336	; 0x3800
   185f4:	tst	r1, r3, lsl r2
   185f8:	beq	18650 <__assert_fail@plt+0x6bd8>
   185fc:	ldr	r1, [fp, #-76]	; 0xffffffb4
   18600:	tst	r1, #1
   18604:	bne	18a30 <__assert_fail@plt+0x6fb8>
   18608:	cmp	r8, r4
   1860c:	movcc	r1, #63	; 0x3f
   18610:	strbcc	r1, [r7, r8]
   18614:	add	r2, r8, #1
   18618:	cmp	r2, r4
   1861c:	movcc	r1, #34	; 0x22
   18620:	strbcc	r1, [r7, r2]
   18624:	add	r2, r8, #2
   18628:	cmp	r2, r4
   1862c:	movcc	r1, #34	; 0x22
   18630:	strbcc	r1, [r7, r2]
   18634:	add	r2, r8, #3
   18638:	cmp	r2, r4
   1863c:	movcc	r1, #63	; 0x3f
   18640:	strbcc	r1, [r7, r2]
   18644:	add	r8, r8, #4
   18648:	mov	r6, r0
   1864c:	mov	r5, r9
   18650:	mov	r9, #0
   18654:	b	180a4 <__assert_fail@plt+0x662c>
   18658:	add	r1, r2, r6
   1865c:	str	r1, [sp, #44]	; 0x2c
   18660:	add	r1, r6, #1
   18664:	mov	r3, #0
   18668:	ldr	lr, [sp, #28]
   1866c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   18670:	tst	r0, #1
   18674:	bne	18768 <__assert_fail@plt+0x6cf0>
   18678:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1867c:	tst	r2, #1
   18680:	bne	18a30 <__assert_fail@plt+0x6fb8>
   18684:	cmp	r6, #2
   18688:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1868c:	movwne	r3, #1
   18690:	ldr	r2, [fp, #-56]	; 0xffffffc8
   18694:	orr	r3, r3, r2
   18698:	tst	r3, #1
   1869c:	bne	186d8 <__assert_fail@plt+0x6c60>
   186a0:	cmp	r8, r4
   186a4:	movcc	r2, #39	; 0x27
   186a8:	strbcc	r2, [r7, r8]
   186ac:	add	r3, r8, #1
   186b0:	cmp	r3, r4
   186b4:	movcc	r2, #36	; 0x24
   186b8:	strbcc	r2, [r7, r3]
   186bc:	add	r3, r8, #2
   186c0:	cmp	r3, r4
   186c4:	movcc	r2, #39	; 0x27
   186c8:	strbcc	r2, [r7, r3]
   186cc:	add	r8, r8, #3
   186d0:	mov	r2, #1
   186d4:	str	r2, [fp, #-56]	; 0xffffffc8
   186d8:	cmp	r8, r4
   186dc:	movcc	r2, #92	; 0x5c
   186e0:	strbcc	r2, [r7, r8]
   186e4:	add	r3, r8, #1
   186e8:	cmp	r3, r4
   186ec:	bcs	1870c <__assert_fail@plt+0x6c94>
   186f0:	and	r7, r5, #192	; 0xc0
   186f4:	mov	r2, #48	; 0x30
   186f8:	orr	r7, r2, r7, lsr #6
   186fc:	ldr	r6, [sp, #80]	; 0x50
   18700:	strb	r7, [r6, r3]
   18704:	ldr	r6, [fp, #-60]	; 0xffffffc4
   18708:	ldr	r7, [sp, #80]	; 0x50
   1870c:	add	r3, r8, #2
   18710:	cmp	r3, r4
   18714:	bcs	18734 <__assert_fail@plt+0x6cbc>
   18718:	lsr	r7, r5, #3
   1871c:	mov	r2, #6
   18720:	bfi	r7, r2, #3, #29
   18724:	ldr	r6, [sp, #80]	; 0x50
   18728:	strb	r7, [r6, r3]
   1872c:	ldr	r6, [fp, #-60]	; 0xffffffc4
   18730:	ldr	r7, [sp, #80]	; 0x50
   18734:	mov	r2, #6
   18738:	bfi	r5, r2, #3, #29
   1873c:	add	r8, r8, #3
   18740:	mov	r3, #1
   18744:	b	1878c <__assert_fail@plt+0x6d14>
   18748:	ldr	r7, [sp, #80]	; 0x50
   1874c:	cmp	r8, r4
   18750:	strbcc	r5, [r7, r8]
   18754:	ldrb	r5, [ip, r1]
   18758:	add	r1, r1, #1
   1875c:	add	r8, r8, #1
   18760:	tst	r0, #1
   18764:	beq	18678 <__assert_fail@plt+0x6c00>
   18768:	ldr	r2, [fp, #-52]	; 0xffffffcc
   1876c:	tst	r2, #1
   18770:	beq	18784 <__assert_fail@plt+0x6d0c>
   18774:	cmp	r8, r4
   18778:	movcc	r2, #92	; 0x5c
   1877c:	strbcc	r2, [r7, r8]
   18780:	add	r8, r8, #1
   18784:	mov	r2, #0
   18788:	str	r2, [fp, #-52]	; 0xffffffcc
   1878c:	and	sl, r3, #1
   18790:	ldr	r2, [sp, #44]	; 0x2c
   18794:	cmp	r2, r1
   18798:	bls	188a4 <__assert_fail@plt+0x6e2c>
   1879c:	cmp	sl, #0
   187a0:	movwne	sl, #1
   187a4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   187a8:	mvn	r7, r2
   187ac:	orr	r7, r7, sl
   187b0:	tst	r7, #1
   187b4:	bne	18748 <__assert_fail@plt+0x6cd0>
   187b8:	cmp	r8, r4
   187bc:	ldrcc	r7, [sp, #80]	; 0x50
   187c0:	movcc	r2, #39	; 0x27
   187c4:	strbcc	r2, [r7, r8]
   187c8:	add	r7, r8, #1
   187cc:	cmp	r7, r4
   187d0:	ldrcc	r6, [sp, #80]	; 0x50
   187d4:	movcc	r2, #39	; 0x27
   187d8:	strbcc	r2, [r6, r7]
   187dc:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   187e0:	add	r8, r8, #2
   187e4:	mov	r2, #0
   187e8:	str	r2, [fp, #-56]	; 0xffffffc8
   187ec:	b	18748 <__assert_fail@plt+0x6cd0>
   187f0:	cmp	r8, r4
   187f4:	movcc	r0, #39	; 0x27
   187f8:	strbcc	r0, [r7, r8]
   187fc:	add	r0, r8, #1
   18800:	cmp	r0, r4
   18804:	movcc	r1, #36	; 0x24
   18808:	strbcc	r1, [r7, r0]
   1880c:	add	r0, r8, #2
   18810:	cmp	r0, r4
   18814:	movcc	r1, #39	; 0x27
   18818:	strbcc	r1, [r7, r0]
   1881c:	add	r0, r8, #3
   18820:	mov	r2, #1
   18824:	cmp	r0, r4
   18828:	movcc	r1, #92	; 0x5c
   1882c:	strbcc	r1, [r7, r0]
   18830:	str	r2, [fp, #-56]	; 0xffffffc8
   18834:	add	r8, r0, #1
   18838:	ldr	r1, [fp, #-60]	; 0xffffffc4
   1883c:	cmp	r1, #2
   18840:	beq	18894 <__assert_fail@plt+0x6e1c>
   18844:	add	r1, r6, #1
   18848:	mov	r9, #0
   1884c:	mov	sl, #1
   18850:	mov	r5, #48	; 0x30
   18854:	cmp	r1, lr
   18858:	bcs	180a4 <__assert_fail@plt+0x662c>
   1885c:	ldrb	r1, [ip, r1]
   18860:	sub	r1, r1, #48	; 0x30
   18864:	uxtb	r1, r1
   18868:	cmp	r1, #9
   1886c:	bhi	180a4 <__assert_fail@plt+0x662c>
   18870:	cmp	r8, r4
   18874:	movcc	r1, #48	; 0x30
   18878:	strbcc	r1, [r7, r8]
   1887c:	add	r1, r0, #2
   18880:	cmp	r1, r4
   18884:	movcc	r2, #48	; 0x30
   18888:	strbcc	r2, [r7, r1]
   1888c:	add	r8, r0, #3
   18890:	b	180a4 <__assert_fail@plt+0x662c>
   18894:	mov	r0, #48	; 0x30
   18898:	mov	sl, #1
   1889c:	mov	r9, #0
   188a0:	b	18350 <__assert_fail@plt+0x68d8>
   188a4:	sub	r6, r1, #1
   188a8:	cmp	sl, #0
   188ac:	movwne	sl, #1
   188b0:	mov	r0, r5
   188b4:	cmp	sl, #0
   188b8:	bne	188f8 <__assert_fail@plt+0x6e80>
   188bc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   188c0:	tst	r1, #1
   188c4:	beq	188f8 <__assert_fail@plt+0x6e80>
   188c8:	cmp	r8, r4
   188cc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   188d0:	movcc	r1, #39	; 0x27
   188d4:	strbcc	r1, [r7, r8]
   188d8:	add	r1, r8, #1
   188dc:	cmp	r1, r4
   188e0:	movcc	r2, #39	; 0x27
   188e4:	strbcc	r2, [r7, r1]
   188e8:	add	r8, r8, #2
   188ec:	mov	r1, #0
   188f0:	str	r1, [fp, #-56]	; 0xffffffc8
   188f4:	b	183dc <__assert_fail@plt+0x6964>
   188f8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   188fc:	b	183dc <__assert_fail@plt+0x6964>
   18900:	mov	r9, #0
   18904:	b	18940 <__assert_fail@plt+0x6ec8>
   18908:	mov	r9, #0
   1890c:	cmp	r7, lr
   18910:	bcs	18940 <__assert_fail@plt+0x6ec8>
   18914:	ldr	ip, [fp, #-84]	; 0xffffffac
   18918:	ldr	r7, [sp, #44]	; 0x2c
   1891c:	ldr	r0, [sp, #20]
   18920:	ldrb	r0, [r0, r7]
   18924:	cmp	r0, #0
   18928:	beq	18948 <__assert_fail@plt+0x6ed0>
   1892c:	add	r7, r7, #1
   18930:	add	r0, r6, r7
   18934:	cmp	r0, lr
   18938:	bcc	1891c <__assert_fail@plt+0x6ea4>
   1893c:	b	18948 <__assert_fail@plt+0x6ed0>
   18940:	ldr	ip, [fp, #-84]	; 0xffffffac
   18944:	ldr	r7, [sp, #44]	; 0x2c
   18948:	mov	r1, r7
   1894c:	ldr	r7, [sp, #80]	; 0x50
   18950:	b	18278 <__assert_fail@plt+0x6800>
   18954:	ldr	r1, [fp, #-60]	; 0xffffffc4
   18958:	eor	r0, r1, #2
   1895c:	orr	r0, r0, r8
   18960:	clz	r0, r0
   18964:	lsr	r0, r0, #5
   18968:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1896c:	tst	r2, r0
   18970:	bne	18a30 <__assert_fail@plt+0x6fb8>
   18974:	cmp	r1, #2
   18978:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1897c:	movwne	r0, #1
   18980:	orr	r0, r2, r0
   18984:	tst	r0, #1
   18988:	ldreq	r0, [sp, #56]	; 0x38
   1898c:	eoreq	r0, r0, #1
   18990:	tsteq	r0, #1
   18994:	bne	189c8 <__assert_fail@plt+0x6f50>
   18998:	mov	r9, lr
   1899c:	tst	r5, #1
   189a0:	bne	18a98 <__assert_fail@plt+0x7020>
   189a4:	ldr	r0, [sp, #72]	; 0x48
   189a8:	cmp	r0, #0
   189ac:	beq	189c8 <__assert_fail@plt+0x6f50>
   189b0:	mov	r5, #0
   189b4:	cmp	r4, #0
   189b8:	ldr	r0, [sp, #84]	; 0x54
   189bc:	mov	sl, r2
   189c0:	ldr	r6, [sp, #72]	; 0x48
   189c4:	beq	17b60 <__assert_fail@plt+0x60e8>
   189c8:	ldr	r1, [sp, #92]	; 0x5c
   189cc:	clz	r0, r1
   189d0:	lsr	r0, r0, #5
   189d4:	orr	r0, r0, r2
   189d8:	tst	r0, #1
   189dc:	bne	18a08 <__assert_fail@plt+0x6f90>
   189e0:	ldrb	r0, [r1]
   189e4:	cmp	r0, #0
   189e8:	beq	18a08 <__assert_fail@plt+0x6f90>
   189ec:	add	r1, r1, #1
   189f0:	cmp	r8, r4
   189f4:	strbcc	r0, [r7, r8]
   189f8:	add	r8, r8, #1
   189fc:	ldrb	r0, [r1], #1
   18a00:	cmp	r0, #0
   18a04:	bne	189f0 <__assert_fail@plt+0x6f78>
   18a08:	cmp	r8, r4
   18a0c:	movcc	r0, #0
   18a10:	strbcc	r0, [r7, r8]
   18a14:	b	18a8c <__assert_fail@plt+0x7014>
   18a18:	ldr	ip, [fp, #-84]	; 0xffffffac
   18a1c:	mov	lr, r4
   18a20:	mov	r4, r5
   18a24:	b	18a30 <__assert_fail@plt+0x6fb8>
   18a28:	ldr	r7, [sp, #80]	; 0x50
   18a2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   18a30:	mov	r0, #0
   18a34:	ldr	r1, [fp, #12]
   18a38:	bic	r1, r1, #2
   18a3c:	ldr	r2, [sp, #84]	; 0x54
   18a40:	tst	r2, #1
   18a44:	ldr	r3, [fp, #-60]	; 0xffffffc4
   18a48:	mov	r2, r3
   18a4c:	movwne	r2, #4
   18a50:	cmp	r3, #2
   18a54:	movne	r2, r3
   18a58:	str	r2, [sp]
   18a5c:	str	r1, [sp, #4]
   18a60:	str	r0, [sp, #8]
   18a64:	ldr	r0, [sp, #68]	; 0x44
   18a68:	str	r0, [sp, #12]
   18a6c:	ldr	r0, [sp, #76]	; 0x4c
   18a70:	str	r0, [sp, #16]
   18a74:	mov	r0, r7
   18a78:	mov	r1, r4
   18a7c:	mov	r2, ip
   18a80:	mov	r3, lr
   18a84:	bl	17ad8 <__assert_fail@plt+0x6060>
   18a88:	mov	r8, r0
   18a8c:	mov	r0, r8
   18a90:	sub	sp, fp, #28
   18a94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a98:	mov	r0, #5
   18a9c:	str	r0, [sp]
   18aa0:	ldr	r0, [fp, #12]
   18aa4:	str	r0, [sp, #4]
   18aa8:	ldr	r0, [fp, #16]
   18aac:	str	r0, [sp, #8]
   18ab0:	ldr	r0, [sp, #68]	; 0x44
   18ab4:	str	r0, [sp, #12]
   18ab8:	ldr	r0, [sp, #76]	; 0x4c
   18abc:	str	r0, [sp, #16]
   18ac0:	mov	r0, r7
   18ac4:	ldr	r1, [sp, #72]	; 0x48
   18ac8:	ldr	r2, [fp, #-84]	; 0xffffffac
   18acc:	mov	r3, r9
   18ad0:	b	18a84 <__assert_fail@plt+0x700c>
   18ad4:	bl	11a60 <abort@plt>
   18ad8:	mov	r3, r2
   18adc:	mov	r2, #0
   18ae0:	b	18ae4 <__assert_fail@plt+0x706c>
   18ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ae8:	add	fp, sp, #28
   18aec:	sub	sp, sp, #36	; 0x24
   18af0:	mov	r4, r2
   18af4:	str	r2, [sp, #24]
   18af8:	mov	r5, r1
   18afc:	mov	r6, r0
   18b00:	str	r0, [sp, #20]
   18b04:	movw	r8, #4616	; 0x1208
   18b08:	movt	r8, #3
   18b0c:	cmp	r3, #0
   18b10:	movne	r8, r3
   18b14:	bl	11910 <__errno_location@plt>
   18b18:	str	r0, [sp, #28]
   18b1c:	ldm	r8, {r3, r9}
   18b20:	ldr	r1, [r8, #40]	; 0x28
   18b24:	ldr	r2, [r8, #44]	; 0x2c
   18b28:	ldr	r7, [r0]
   18b2c:	str	r7, [sp, #32]
   18b30:	add	sl, r8, #8
   18b34:	cmp	r4, #0
   18b38:	orreq	r9, r9, #1
   18b3c:	stm	sp, {r3, r9, sl}
   18b40:	str	r1, [sp, #12]
   18b44:	str	r2, [sp, #16]
   18b48:	mov	r0, #0
   18b4c:	mov	r1, #0
   18b50:	mov	r2, r6
   18b54:	mov	r3, r5
   18b58:	mov	r7, r5
   18b5c:	bl	17ad8 <__assert_fail@plt+0x6060>
   18b60:	mov	r5, r0
   18b64:	add	r4, r0, #1
   18b68:	mov	r0, r4
   18b6c:	bl	19ff0 <__assert_fail@plt+0x8578>
   18b70:	mov	r6, r0
   18b74:	ldr	r0, [r8]
   18b78:	ldr	r1, [r8, #40]	; 0x28
   18b7c:	ldr	r2, [r8, #44]	; 0x2c
   18b80:	stm	sp, {r0, r9, sl}
   18b84:	str	r1, [sp, #12]
   18b88:	str	r2, [sp, #16]
   18b8c:	mov	r0, r6
   18b90:	mov	r1, r4
   18b94:	ldr	r2, [sp, #20]
   18b98:	mov	r3, r7
   18b9c:	bl	17ad8 <__assert_fail@plt+0x6060>
   18ba0:	ldr	r0, [sp, #24]
   18ba4:	ldr	r1, [sp, #32]
   18ba8:	ldr	r2, [sp, #28]
   18bac:	str	r1, [r2]
   18bb0:	cmp	r0, #0
   18bb4:	strne	r5, [r0]
   18bb8:	mov	r0, r6
   18bbc:	sub	sp, fp, #28
   18bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18bc4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   18bc8:	add	fp, sp, #24
   18bcc:	movw	r8, #4488	; 0x1188
   18bd0:	movt	r8, #3
   18bd4:	ldr	r4, [r8]
   18bd8:	movw	r5, #4492	; 0x118c
   18bdc:	movt	r5, #3
   18be0:	ldr	r0, [r5]
   18be4:	cmp	r0, #2
   18be8:	blt	18c14 <__assert_fail@plt+0x719c>
   18bec:	add	r7, r4, #12
   18bf0:	mov	r6, #0
   18bf4:	ldr	r0, [r7, r6, lsl #3]
   18bf8:	bl	17204 <__assert_fail@plt+0x578c>
   18bfc:	add	r0, r6, #1
   18c00:	ldr	r1, [r5]
   18c04:	add	r2, r6, #2
   18c08:	cmp	r2, r1
   18c0c:	mov	r6, r0
   18c10:	blt	18bf4 <__assert_fail@plt+0x717c>
   18c14:	ldr	r0, [r4, #4]
   18c18:	movw	r7, #4664	; 0x1238
   18c1c:	movt	r7, #3
   18c20:	cmp	r0, r7
   18c24:	beq	18c3c <__assert_fail@plt+0x71c4>
   18c28:	bl	17204 <__assert_fail@plt+0x578c>
   18c2c:	movw	r0, #4496	; 0x1190
   18c30:	movt	r0, #3
   18c34:	mov	r6, #256	; 0x100
   18c38:	strd	r6, [r0]
   18c3c:	movw	r6, #4496	; 0x1190
   18c40:	movt	r6, #3
   18c44:	cmp	r4, r6
   18c48:	beq	18c58 <__assert_fail@plt+0x71e0>
   18c4c:	mov	r0, r4
   18c50:	bl	17204 <__assert_fail@plt+0x578c>
   18c54:	str	r6, [r8]
   18c58:	mov	r0, #1
   18c5c:	str	r0, [r5]
   18c60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18c64:	movw	r3, #4616	; 0x1208
   18c68:	movt	r3, #3
   18c6c:	mvn	r2, #0
   18c70:	b	18c74 <__assert_fail@plt+0x71fc>
   18c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c78:	add	fp, sp, #28
   18c7c:	sub	sp, sp, #44	; 0x2c
   18c80:	mov	r7, r3
   18c84:	str	r2, [sp, #36]	; 0x24
   18c88:	str	r1, [sp, #32]
   18c8c:	mov	r5, r0
   18c90:	bl	11910 <__errno_location@plt>
   18c94:	cmp	r5, #0
   18c98:	blt	18e04 <__assert_fail@plt+0x738c>
   18c9c:	cmn	r5, #-2147483647	; 0x80000001
   18ca0:	beq	18e04 <__assert_fail@plt+0x738c>
   18ca4:	movw	r4, #4488	; 0x1188
   18ca8:	movt	r4, #3
   18cac:	ldr	r6, [r4]
   18cb0:	str	r0, [sp, #28]
   18cb4:	ldr	r0, [r0]
   18cb8:	str	r0, [sp, #24]
   18cbc:	movw	r8, #4492	; 0x118c
   18cc0:	movt	r8, #3
   18cc4:	ldr	r1, [r8]
   18cc8:	cmp	r1, r5
   18ccc:	ble	18cd8 <__assert_fail@plt+0x7260>
   18cd0:	mov	sl, r6
   18cd4:	b	18d40 <__assert_fail@plt+0x72c8>
   18cd8:	str	r1, [fp, #-32]	; 0xffffffe0
   18cdc:	mov	r0, #8
   18ce0:	str	r0, [sp]
   18ce4:	movw	r9, #4496	; 0x1190
   18ce8:	movt	r9, #3
   18cec:	subs	r0, r6, r9
   18cf0:	movne	r0, r6
   18cf4:	add	r2, r5, #1
   18cf8:	sub	r2, r2, r1
   18cfc:	sub	r1, fp, #32
   18d00:	mvn	r3, #-2147483648	; 0x80000000
   18d04:	bl	1a0d8 <__assert_fail@plt+0x8660>
   18d08:	mov	sl, r0
   18d0c:	str	r0, [r4]
   18d10:	cmp	r6, r9
   18d14:	ldrdeq	r0, [r9]
   18d18:	stmeq	sl, {r0, r1}
   18d1c:	ldr	r1, [r8]
   18d20:	add	r0, sl, r1, lsl #3
   18d24:	ldr	r2, [fp, #-32]	; 0xffffffe0
   18d28:	sub	r1, r2, r1
   18d2c:	lsl	r2, r1, #3
   18d30:	mov	r1, #0
   18d34:	bl	11940 <memset@plt>
   18d38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18d3c:	str	r0, [r8]
   18d40:	mov	r9, sl
   18d44:	ldr	r6, [r9, r5, lsl #3]!
   18d48:	ldr	r4, [r9, #4]!
   18d4c:	ldm	r7, {r0, r1}
   18d50:	ldr	r2, [r7, #40]	; 0x28
   18d54:	ldr	r3, [r7, #44]	; 0x2c
   18d58:	orr	r8, r1, #1
   18d5c:	add	r1, r7, #8
   18d60:	stm	sp, {r0, r8}
   18d64:	str	r1, [sp, #20]
   18d68:	add	r0, sp, #8
   18d6c:	stm	r0, {r1, r2, r3}
   18d70:	mov	r0, r4
   18d74:	mov	r1, r6
   18d78:	ldr	r2, [sp, #32]
   18d7c:	ldr	r3, [sp, #36]	; 0x24
   18d80:	bl	17ad8 <__assert_fail@plt+0x6060>
   18d84:	cmp	r6, r0
   18d88:	bhi	18dec <__assert_fail@plt+0x7374>
   18d8c:	add	r6, r0, #1
   18d90:	str	r6, [sl, r5, lsl #3]
   18d94:	movw	r0, #4664	; 0x1238
   18d98:	movt	r0, #3
   18d9c:	cmp	r4, r0
   18da0:	beq	18dac <__assert_fail@plt+0x7334>
   18da4:	mov	r0, r4
   18da8:	bl	17204 <__assert_fail@plt+0x578c>
   18dac:	mov	r0, r6
   18db0:	bl	19ff0 <__assert_fail@plt+0x8578>
   18db4:	mov	r4, r0
   18db8:	str	r0, [r9]
   18dbc:	ldr	r0, [r7]
   18dc0:	ldr	r1, [r7, #40]	; 0x28
   18dc4:	ldr	r2, [r7, #44]	; 0x2c
   18dc8:	stm	sp, {r0, r8}
   18dcc:	ldr	r0, [sp, #20]
   18dd0:	add	r3, sp, #8
   18dd4:	stm	r3, {r0, r1, r2}
   18dd8:	mov	r0, r4
   18ddc:	mov	r1, r6
   18de0:	ldr	r2, [sp, #32]
   18de4:	ldr	r3, [sp, #36]	; 0x24
   18de8:	bl	17ad8 <__assert_fail@plt+0x6060>
   18dec:	ldr	r0, [sp, #28]
   18df0:	ldr	r1, [sp, #24]
   18df4:	str	r1, [r0]
   18df8:	mov	r0, r4
   18dfc:	sub	sp, fp, #28
   18e00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e04:	bl	11a60 <abort@plt>
   18e08:	movw	r3, #4616	; 0x1208
   18e0c:	movt	r3, #3
   18e10:	b	18c74 <__assert_fail@plt+0x71fc>
   18e14:	mov	r1, r0
   18e18:	mov	r0, #0
   18e1c:	b	18c64 <__assert_fail@plt+0x71ec>
   18e20:	mov	r2, r1
   18e24:	mov	r1, r0
   18e28:	mov	r0, #0
   18e2c:	b	18e08 <__assert_fail@plt+0x7390>
   18e30:	push	{r4, r5, r6, sl, fp, lr}
   18e34:	add	fp, sp, #16
   18e38:	sub	sp, sp, #48	; 0x30
   18e3c:	mov	r4, r2
   18e40:	mov	r5, r0
   18e44:	mov	r6, sp
   18e48:	mov	r0, r6
   18e4c:	bl	18e6c <__assert_fail@plt+0x73f4>
   18e50:	mov	r0, r5
   18e54:	mov	r1, r4
   18e58:	mvn	r2, #0
   18e5c:	mov	r3, r6
   18e60:	bl	18c74 <__assert_fail@plt+0x71fc>
   18e64:	sub	sp, fp, #16
   18e68:	pop	{r4, r5, r6, sl, fp, pc}
   18e6c:	vmov.i32	q8, #0	; 0x00000000
   18e70:	mov	r2, #32
   18e74:	mov	r3, r0
   18e78:	vst1.32	{d16-d17}, [r3], r2
   18e7c:	vst1.32	{d16-d17}, [r3]
   18e80:	add	r2, r0, #16
   18e84:	vst1.32	{d16-d17}, [r2]
   18e88:	cmp	r1, #10
   18e8c:	strne	r1, [r0]
   18e90:	bxne	lr
   18e94:	push	{fp, lr}
   18e98:	mov	fp, sp
   18e9c:	bl	11a60 <abort@plt>
   18ea0:	push	{r4, r5, r6, r7, fp, lr}
   18ea4:	add	fp, sp, #16
   18ea8:	sub	sp, sp, #48	; 0x30
   18eac:	mov	r4, r3
   18eb0:	mov	r5, r2
   18eb4:	mov	r6, r0
   18eb8:	mov	r7, sp
   18ebc:	mov	r0, r7
   18ec0:	bl	18e6c <__assert_fail@plt+0x73f4>
   18ec4:	mov	r0, r6
   18ec8:	mov	r1, r5
   18ecc:	mov	r2, r4
   18ed0:	mov	r3, r7
   18ed4:	bl	18c74 <__assert_fail@plt+0x71fc>
   18ed8:	sub	sp, fp, #16
   18edc:	pop	{r4, r5, r6, r7, fp, pc}
   18ee0:	mov	r2, r1
   18ee4:	mov	r1, r0
   18ee8:	mov	r0, #0
   18eec:	b	18e30 <__assert_fail@plt+0x73b8>
   18ef0:	mov	r3, r2
   18ef4:	mov	r2, r1
   18ef8:	mov	r1, r0
   18efc:	mov	r0, #0
   18f00:	b	18ea0 <__assert_fail@plt+0x7428>
   18f04:	push	{r4, r5, r6, sl, fp, lr}
   18f08:	add	fp, sp, #16
   18f0c:	sub	sp, sp, #48	; 0x30
   18f10:	mov	r4, r1
   18f14:	mov	r5, r0
   18f18:	mov	r0, #32
   18f1c:	movw	r1, #4616	; 0x1208
   18f20:	movt	r1, #3
   18f24:	add	r3, r1, #16
   18f28:	vld1.64	{d16-d17}, [r1], r0
   18f2c:	mov	r6, sp
   18f30:	vld1.64	{d18-d19}, [r3]
   18f34:	add	r3, r6, #16
   18f38:	vld1.64	{d20-d21}, [r1]
   18f3c:	vst1.64	{d18-d19}, [r3]
   18f40:	mov	r1, r6
   18f44:	vst1.64	{d16-d17}, [r1], r0
   18f48:	vst1.64	{d20-d21}, [r1]
   18f4c:	mov	r0, r6
   18f50:	mov	r1, r2
   18f54:	mov	r2, #1
   18f58:	bl	179cc <__assert_fail@plt+0x5f54>
   18f5c:	mov	r0, #0
   18f60:	mov	r1, r5
   18f64:	mov	r2, r4
   18f68:	mov	r3, r6
   18f6c:	bl	18c74 <__assert_fail@plt+0x71fc>
   18f70:	sub	sp, fp, #16
   18f74:	pop	{r4, r5, r6, sl, fp, pc}
   18f78:	mov	r2, r1
   18f7c:	mvn	r1, #0
   18f80:	b	18f04 <__assert_fail@plt+0x748c>
   18f84:	mov	r1, #58	; 0x3a
   18f88:	b	18f78 <__assert_fail@plt+0x7500>
   18f8c:	mov	r2, #58	; 0x3a
   18f90:	b	18f04 <__assert_fail@plt+0x748c>
   18f94:	push	{r4, r5, r6, sl, fp, lr}
   18f98:	add	fp, sp, #16
   18f9c:	sub	sp, sp, #48	; 0x30
   18fa0:	mov	r4, r2
   18fa4:	mov	r5, r0
   18fa8:	mov	r6, sp
   18fac:	mov	r0, r6
   18fb0:	bl	18e6c <__assert_fail@plt+0x73f4>
   18fb4:	mov	r0, r6
   18fb8:	mov	r1, #58	; 0x3a
   18fbc:	mov	r2, #1
   18fc0:	bl	179cc <__assert_fail@plt+0x5f54>
   18fc4:	mov	r0, r5
   18fc8:	mov	r1, r4
   18fcc:	mvn	r2, #0
   18fd0:	mov	r3, r6
   18fd4:	bl	18c74 <__assert_fail@plt+0x71fc>
   18fd8:	sub	sp, fp, #16
   18fdc:	pop	{r4, r5, r6, sl, fp, pc}
   18fe0:	push	{fp, lr}
   18fe4:	mov	fp, sp
   18fe8:	sub	sp, sp, #8
   18fec:	mvn	ip, #0
   18ff0:	str	ip, [sp]
   18ff4:	bl	19000 <__assert_fail@plt+0x7588>
   18ff8:	mov	sp, fp
   18ffc:	pop	{fp, pc}
   19000:	push	{r4, r5, r6, r7, fp, lr}
   19004:	add	fp, sp, #16
   19008:	sub	sp, sp, #48	; 0x30
   1900c:	mov	r7, r3
   19010:	mov	r5, r0
   19014:	mov	r0, #32
   19018:	movw	r3, #4616	; 0x1208
   1901c:	movt	r3, #3
   19020:	add	r4, r3, #16
   19024:	vld1.64	{d16-d17}, [r3], r0
   19028:	mov	r6, sp
   1902c:	vld1.64	{d18-d19}, [r4]
   19030:	add	r4, r6, #16
   19034:	vld1.64	{d20-d21}, [r3]
   19038:	vst1.64	{d18-d19}, [r4]
   1903c:	mov	r3, r6
   19040:	vst1.64	{d16-d17}, [r3], r0
   19044:	vst1.64	{d20-d21}, [r3]
   19048:	mov	r0, r6
   1904c:	bl	17a24 <__assert_fail@plt+0x5fac>
   19050:	ldr	r2, [fp, #8]
   19054:	mov	r0, r5
   19058:	mov	r1, r7
   1905c:	mov	r3, r6
   19060:	bl	18c74 <__assert_fail@plt+0x71fc>
   19064:	sub	sp, fp, #16
   19068:	pop	{r4, r5, r6, r7, fp, pc}
   1906c:	mov	r3, r2
   19070:	mov	r2, r1
   19074:	mov	r1, r0
   19078:	mov	r0, #0
   1907c:	b	18fe0 <__assert_fail@plt+0x7568>
   19080:	push	{fp, lr}
   19084:	mov	fp, sp
   19088:	sub	sp, sp, #8
   1908c:	mov	ip, r2
   19090:	mov	r2, r1
   19094:	mov	r1, r0
   19098:	str	r3, [sp]
   1909c:	mov	r0, #0
   190a0:	mov	r3, ip
   190a4:	bl	19000 <__assert_fail@plt+0x7588>
   190a8:	mov	sp, fp
   190ac:	pop	{fp, pc}
   190b0:	movw	r3, #4504	; 0x1198
   190b4:	movt	r3, #3
   190b8:	b	18c74 <__assert_fail@plt+0x71fc>
   190bc:	mov	r2, r1
   190c0:	mov	r1, r0
   190c4:	mov	r0, #0
   190c8:	b	190b0 <__assert_fail@plt+0x7638>
   190cc:	mvn	r2, #0
   190d0:	b	190b0 <__assert_fail@plt+0x7638>
   190d4:	mov	r1, r0
   190d8:	mov	r0, #0
   190dc:	b	190cc <__assert_fail@plt+0x7654>
   190e0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   190e4:	add	fp, sp, #24
   190e8:	sub	sp, sp, #16
   190ec:	mov	r4, r1
   190f0:	mov	r5, r0
   190f4:	mov	r7, #0
   190f8:	mov	r0, #0
   190fc:	mov	r1, r5
   19100:	mov	r2, #5
   19104:	bl	11754 <dcgettext@plt>
   19108:	cmp	r0, r5
   1910c:	beq	19118 <__assert_fail@plt+0x76a0>
   19110:	sub	sp, fp, #24
   19114:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19118:	bl	1ab30 <__assert_fail@plt+0x90b8>
   1911c:	mov	r6, r0
   19120:	mov	r8, #56	; 0x38
   19124:	mov	r0, #45	; 0x2d
   19128:	stm	sp, {r0, r8}
   1912c:	str	r7, [sp, #8]
   19130:	str	r7, [sp, #12]
   19134:	mov	r0, r6
   19138:	mov	r1, #85	; 0x55
   1913c:	mov	r2, #84	; 0x54
   19140:	mov	r3, #70	; 0x46
   19144:	bl	191dc <__assert_fail@plt+0x7764>
   19148:	cmp	r0, #0
   1914c:	beq	19168 <__assert_fail@plt+0x76f0>
   19150:	ldrb	r1, [r5]
   19154:	movw	r2, #64728	; 0xfcd8
   19158:	movt	r2, #1
   1915c:	movw	r0, #64732	; 0xfcdc
   19160:	movt	r0, #1
   19164:	b	191ac <__assert_fail@plt+0x7734>
   19168:	mov	r0, #48	; 0x30
   1916c:	mov	r1, #51	; 0x33
   19170:	str	r8, [sp]
   19174:	stmib	sp, {r0, r1}
   19178:	str	r0, [sp, #12]
   1917c:	mov	r0, r6
   19180:	mov	r1, #71	; 0x47
   19184:	mov	r2, #66	; 0x42
   19188:	mov	r3, #49	; 0x31
   1918c:	bl	191dc <__assert_fail@plt+0x7764>
   19190:	cmp	r0, #0
   19194:	beq	191bc <__assert_fail@plt+0x7744>
   19198:	ldrb	r1, [r5]
   1919c:	movw	r2, #64736	; 0xfce0
   191a0:	movt	r2, #1
   191a4:	movw	r0, #64740	; 0xfce4
   191a8:	movt	r0, #1
   191ac:	cmp	r1, #96	; 0x60
   191b0:	moveq	r0, r2
   191b4:	sub	sp, fp, #24
   191b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191bc:	movw	r1, #64724	; 0xfcd4
   191c0:	movt	r1, #1
   191c4:	movw	r0, #64610	; 0xfc62
   191c8:	movt	r0, #1
   191cc:	cmp	r4, #9
   191d0:	moveq	r0, r1
   191d4:	sub	sp, fp, #24
   191d8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   191dc:	push	{r4, r5, r6, r7, fp, lr}
   191e0:	add	fp, sp, #16
   191e4:	sub	sp, sp, #16
   191e8:	mov	r4, r3
   191ec:	mov	r5, r2
   191f0:	mov	r7, r1
   191f4:	mov	r6, r0
   191f8:	mov	r0, r1
   191fc:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   19200:	ldrb	r1, [r6]
   19204:	cmp	r0, #0
   19208:	andne	r1, r1, #223	; 0xdf
   1920c:	mov	r0, #0
   19210:	cmp	r1, r7
   19214:	bne	19254 <__assert_fail@plt+0x77dc>
   19218:	cmp	r7, #0
   1921c:	moveq	r0, #1
   19220:	subeq	sp, fp, #16
   19224:	popeq	{r4, r5, r6, r7, fp, pc}
   19228:	ldr	r0, [fp, #20]
   1922c:	ldr	r1, [fp, #16]
   19230:	ldr	r2, [fp, #12]
   19234:	ldr	r3, [fp, #8]
   19238:	str	r2, [sp]
   1923c:	str	r1, [sp, #4]
   19240:	str	r0, [sp, #8]
   19244:	mov	r0, r6
   19248:	mov	r1, r5
   1924c:	mov	r2, r4
   19250:	bl	1925c <__assert_fail@plt+0x77e4>
   19254:	sub	sp, fp, #16
   19258:	pop	{r4, r5, r6, r7, fp, pc}
   1925c:	push	{r4, r5, r6, r7, fp, lr}
   19260:	add	fp, sp, #16
   19264:	sub	sp, sp, #8
   19268:	mov	r4, r3
   1926c:	mov	r5, r2
   19270:	mov	r7, r1
   19274:	mov	r6, r0
   19278:	mov	r0, r1
   1927c:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   19280:	ldrb	r1, [r6, #1]
   19284:	cmp	r0, #0
   19288:	andne	r1, r1, #223	; 0xdf
   1928c:	mov	r0, #0
   19290:	cmp	r1, r7
   19294:	bne	192cc <__assert_fail@plt+0x7854>
   19298:	cmp	r7, #0
   1929c:	moveq	r0, #1
   192a0:	subeq	sp, fp, #16
   192a4:	popeq	{r4, r5, r6, r7, fp, pc}
   192a8:	ldr	r0, [fp, #16]
   192ac:	ldr	r1, [fp, #12]
   192b0:	ldr	r3, [fp, #8]
   192b4:	str	r1, [sp]
   192b8:	str	r0, [sp, #4]
   192bc:	mov	r0, r6
   192c0:	mov	r1, r5
   192c4:	mov	r2, r4
   192c8:	bl	192d4 <__assert_fail@plt+0x785c>
   192cc:	sub	sp, fp, #16
   192d0:	pop	{r4, r5, r6, r7, fp, pc}
   192d4:	push	{r4, r5, r6, r7, fp, lr}
   192d8:	add	fp, sp, #16
   192dc:	sub	sp, sp, #8
   192e0:	mov	r4, r3
   192e4:	mov	r5, r2
   192e8:	mov	r7, r1
   192ec:	mov	r6, r0
   192f0:	mov	r0, r1
   192f4:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   192f8:	ldrb	r1, [r6, #2]
   192fc:	cmp	r0, #0
   19300:	andne	r1, r1, #223	; 0xdf
   19304:	mov	r0, #0
   19308:	cmp	r1, r7
   1930c:	bne	1933c <__assert_fail@plt+0x78c4>
   19310:	cmp	r7, #0
   19314:	moveq	r0, #1
   19318:	subeq	sp, fp, #16
   1931c:	popeq	{r4, r5, r6, r7, fp, pc}
   19320:	ldr	r0, [fp, #12]
   19324:	ldr	r3, [fp, #8]
   19328:	str	r0, [sp]
   1932c:	mov	r0, r6
   19330:	mov	r1, r5
   19334:	mov	r2, r4
   19338:	bl	19344 <__assert_fail@plt+0x78cc>
   1933c:	sub	sp, fp, #16
   19340:	pop	{r4, r5, r6, r7, fp, pc}
   19344:	push	{r4, r5, r6, r7, fp, lr}
   19348:	add	fp, sp, #16
   1934c:	mov	r4, r3
   19350:	mov	r5, r2
   19354:	mov	r7, r1
   19358:	mov	r6, r0
   1935c:	mov	r0, r1
   19360:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   19364:	ldrb	r1, [r6, #3]
   19368:	ldr	r3, [fp, #8]
   1936c:	cmp	r0, #0
   19370:	andne	r1, r1, #223	; 0xdf
   19374:	mov	r0, #0
   19378:	cmp	r1, r7
   1937c:	popne	{r4, r5, r6, r7, fp, pc}
   19380:	cmp	r7, #0
   19384:	beq	1939c <__assert_fail@plt+0x7924>
   19388:	mov	r0, r6
   1938c:	mov	r1, r5
   19390:	mov	r2, r4
   19394:	pop	{r4, r5, r6, r7, fp, lr}
   19398:	b	193a4 <__assert_fail@plt+0x792c>
   1939c:	mov	r0, #1
   193a0:	pop	{r4, r5, r6, r7, fp, pc}
   193a4:	push	{r4, r5, r6, r7, fp, lr}
   193a8:	add	fp, sp, #16
   193ac:	mov	r4, r3
   193b0:	mov	r5, r2
   193b4:	mov	r7, r1
   193b8:	mov	r6, r0
   193bc:	mov	r0, r1
   193c0:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   193c4:	ldrb	r1, [r6, #4]
   193c8:	cmp	r0, #0
   193cc:	andne	r1, r1, #223	; 0xdf
   193d0:	mov	r0, #0
   193d4:	cmp	r1, r7
   193d8:	popne	{r4, r5, r6, r7, fp, pc}
   193dc:	cmp	r7, #0
   193e0:	beq	193f8 <__assert_fail@plt+0x7980>
   193e4:	mov	r0, r6
   193e8:	mov	r1, r5
   193ec:	mov	r2, r4
   193f0:	pop	{r4, r5, r6, r7, fp, lr}
   193f4:	b	19400 <__assert_fail@plt+0x7988>
   193f8:	mov	r0, #1
   193fc:	pop	{r4, r5, r6, r7, fp, pc}
   19400:	push	{r4, r5, r6, sl, fp, lr}
   19404:	add	fp, sp, #16
   19408:	mov	r4, r2
   1940c:	mov	r6, r1
   19410:	mov	r5, r0
   19414:	mov	r0, r1
   19418:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   1941c:	ldrb	r1, [r5, #5]
   19420:	cmp	r0, #0
   19424:	andne	r1, r1, #223	; 0xdf
   19428:	mov	r0, #0
   1942c:	cmp	r1, r6
   19430:	popne	{r4, r5, r6, sl, fp, pc}
   19434:	cmp	r6, #0
   19438:	beq	1944c <__assert_fail@plt+0x79d4>
   1943c:	mov	r0, r5
   19440:	mov	r1, r4
   19444:	pop	{r4, r5, r6, sl, fp, lr}
   19448:	b	19454 <__assert_fail@plt+0x79dc>
   1944c:	mov	r0, #1
   19450:	pop	{r4, r5, r6, sl, fp, pc}
   19454:	push	{r4, r5, fp, lr}
   19458:	add	fp, sp, #8
   1945c:	mov	r5, r1
   19460:	mov	r4, r0
   19464:	mov	r0, r1
   19468:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   1946c:	ldrb	r1, [r4, #6]
   19470:	cmp	r0, #0
   19474:	andne	r1, r1, #223	; 0xdf
   19478:	mov	r0, #0
   1947c:	cmp	r1, r5
   19480:	popne	{r4, r5, fp, pc}
   19484:	cmp	r5, #0
   19488:	beq	19498 <__assert_fail@plt+0x7a20>
   1948c:	mov	r0, r4
   19490:	pop	{r4, r5, fp, lr}
   19494:	b	194a0 <__assert_fail@plt+0x7a28>
   19498:	mov	r0, #1
   1949c:	pop	{r4, r5, fp, pc}
   194a0:	push	{r4, sl, fp, lr}
   194a4:	add	fp, sp, #8
   194a8:	mov	r4, r0
   194ac:	mov	r0, #0
   194b0:	bl	1a7e0 <__assert_fail@plt+0x8d68>
   194b4:	ldrb	r1, [r4, #7]
   194b8:	cmp	r0, #0
   194bc:	beq	194d4 <__assert_fail@plt+0x7a5c>
   194c0:	tst	r1, #223	; 0xdf
   194c4:	moveq	r0, #1
   194c8:	popeq	{r4, sl, fp, pc}
   194cc:	mov	r0, #0
   194d0:	pop	{r4, sl, fp, pc}
   194d4:	cmp	r1, #0
   194d8:	moveq	r0, #1
   194dc:	popeq	{r4, sl, fp, pc}
   194e0:	mov	r0, #0
   194e4:	pop	{r4, sl, fp, pc}
   194e8:	mov	r1, #0
   194ec:	str	r1, [r0]
   194f0:	str	r1, [r0, #4]
   194f4:	bx	lr
   194f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194fc:	add	fp, sp, #28
   19500:	sub	sp, sp, #52	; 0x34
   19504:	mov	r8, r3
   19508:	mov	r5, r0
   1950c:	vmov.i32	q8, #0	; 0x00000000
   19510:	add	r0, sp, #16
   19514:	vst1.64	{d16-d17}, [r0]!
   19518:	vst1.64	{d16-d17}, [r0]
   1951c:	cmp	r2, #0
   19520:	beq	19544 <__assert_fail@plt+0x7acc>
   19524:	mov	r4, r2
   19528:	mov	r6, r1
   1952c:	add	r7, sp, #16
   19530:	ldrb	r0, [r6], #1
   19534:	mov	r1, r7
   19538:	bl	19634 <__assert_fail@plt+0x7bbc>
   1953c:	subs	r4, r4, #1
   19540:	bne	19530 <__assert_fail@plt+0x7ab8>
   19544:	mov	r0, r5
   19548:	bl	11748 <getc_unlocked@plt>
   1954c:	mov	r6, r0
   19550:	cmp	r0, #0
   19554:	blt	19584 <__assert_fail@plt+0x7b0c>
   19558:	add	r4, sp, #16
   1955c:	mov	r0, r6
   19560:	mov	r1, r4
   19564:	bl	19650 <__assert_fail@plt+0x7bd8>
   19568:	cmp	r0, #0
   1956c:	beq	19584 <__assert_fail@plt+0x7b0c>
   19570:	mov	r0, r5
   19574:	bl	11748 <getc_unlocked@plt>
   19578:	mov	r6, r0
   1957c:	cmn	r0, #1
   19580:	bgt	1955c <__assert_fail@plt+0x7ae4>
   19584:	ldm	r8, {r0, r7}
   19588:	str	r0, [sp, #12]
   1958c:	cmp	r6, #0
   19590:	blt	19624 <__assert_fail@plt+0x7bac>
   19594:	str	r8, [sp, #8]
   19598:	mov	r8, #0
   1959c:	add	r9, sp, #12
   195a0:	add	sl, sp, #16
   195a4:	mov	r4, #0
   195a8:	b	195c4 <__assert_fail@plt+0x7b4c>
   195ac:	strb	r6, [r7, r4]
   195b0:	add	r4, r4, #1
   195b4:	mov	r0, r5
   195b8:	bl	11748 <getc_unlocked@plt>
   195bc:	mov	r6, r0
   195c0:	lsr	r8, r0, #31
   195c4:	ldr	r0, [sp, #12]
   195c8:	cmp	r4, r0
   195cc:	bne	195f0 <__assert_fail@plt+0x7b78>
   195d0:	mov	r0, #1
   195d4:	str	r0, [sp]
   195d8:	mov	r0, r7
   195dc:	mov	r1, r9
   195e0:	mov	r2, #1
   195e4:	mvn	r3, #0
   195e8:	bl	1a0d8 <__assert_fail@plt+0x8660>
   195ec:	mov	r7, r0
   195f0:	tst	r8, #1
   195f4:	bne	1960c <__assert_fail@plt+0x7b94>
   195f8:	mov	r0, r6
   195fc:	mov	r1, sl
   19600:	bl	19650 <__assert_fail@plt+0x7bd8>
   19604:	cmp	r0, #0
   19608:	beq	195ac <__assert_fail@plt+0x7b34>
   1960c:	mov	r0, #0
   19610:	strb	r0, [r7, r4]
   19614:	ldr	r0, [sp, #12]
   19618:	ldr	r1, [sp, #8]
   1961c:	stm	r1, {r0, r7}
   19620:	b	19628 <__assert_fail@plt+0x7bb0>
   19624:	mvn	r4, #0
   19628:	mov	r0, r4
   1962c:	sub	sp, fp, #28
   19630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19634:	lsr	r2, r0, #5
   19638:	ldr	ip, [r1, r2, lsl #2]
   1963c:	and	r0, r0, #31
   19640:	mov	r3, #1
   19644:	orr	r0, ip, r3, lsl r0
   19648:	str	r0, [r1, r2, lsl #2]
   1964c:	bx	lr
   19650:	lsr	r2, r0, #5
   19654:	ldr	r1, [r1, r2, lsl #2]
   19658:	and	r0, r0, #31
   1965c:	mov	r2, #1
   19660:	and	r0, r1, r2, lsl r0
   19664:	cmp	r0, #0
   19668:	movwne	r0, #1
   1966c:	bx	lr
   19670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19674:	add	fp, sp, #28
   19678:	sub	sp, sp, #28
   1967c:	str	r3, [sp, #12]
   19680:	str	r2, [sp, #8]
   19684:	mov	r6, r0
   19688:	add	r4, r1, #1
   1968c:	cmp	r1, #0
   19690:	movweq	r4, #64	; 0x40
   19694:	str	r4, [sp, #16]
   19698:	mov	r0, r4
   1969c:	mov	r1, #4
   196a0:	bl	1a050 <__assert_fail@plt+0x85d8>
   196a4:	mov	r5, r0
   196a8:	mov	r0, r4
   196ac:	mov	r1, #4
   196b0:	bl	1a050 <__assert_fail@plt+0x85d8>
   196b4:	mov	r4, r0
   196b8:	add	r0, sp, #20
   196bc:	bl	194e8 <__assert_fail@plt+0x7a70>
   196c0:	mov	r7, #0
   196c4:	b	196f4 <__assert_fail@plt+0x7c7c>
   196c8:	add	r8, sl, #1
   196cc:	mov	r0, r8
   196d0:	mov	r1, #1
   196d4:	bl	1a050 <__assert_fail@plt+0x85d8>
   196d8:	mov	r9, r0
   196dc:	str	sl, [r4, r7, lsl #2]
   196e0:	ldr	r1, [sp, #24]
   196e4:	mov	r2, r8
   196e8:	bl	11718 <memcpy@plt>
   196ec:	str	r9, [r5, r7, lsl #2]
   196f0:	add	r7, r7, #1
   196f4:	mov	r0, r6
   196f8:	ldr	r1, [sp, #8]
   196fc:	ldr	r2, [sp, #12]
   19700:	add	r3, sp, #20
   19704:	bl	194f8 <__assert_fail@plt+0x7a80>
   19708:	mov	sl, r0
   1970c:	ldr	r0, [sp, #16]
   19710:	cmp	r7, r0
   19714:	blt	1974c <__assert_fail@plt+0x7cd4>
   19718:	mov	r0, #4
   1971c:	str	r0, [sp]
   19720:	mov	r0, r5
   19724:	add	r1, sp, #16
   19728:	mov	r2, #1
   1972c:	mvn	r3, #0
   19730:	bl	1a0d8 <__assert_fail@plt+0x8660>
   19734:	mov	r5, r0
   19738:	ldr	r1, [sp, #16]
   1973c:	mov	r0, r4
   19740:	mov	r2, #4
   19744:	bl	19f78 <__assert_fail@plt+0x8500>
   19748:	mov	r4, r0
   1974c:	cmn	sl, #1
   19750:	bne	196c8 <__assert_fail@plt+0x7c50>
   19754:	mov	r0, #0
   19758:	str	r0, [r5, r7, lsl #2]
   1975c:	str	r0, [r4, r7, lsl #2]
   19760:	ldr	r0, [sp, #24]
   19764:	bl	17204 <__assert_fail@plt+0x578c>
   19768:	ldr	r0, [fp, #8]
   1976c:	str	r5, [r0]
   19770:	ldr	r0, [fp, #12]
   19774:	cmp	r0, #0
   19778:	beq	19784 <__assert_fail@plt+0x7d0c>
   1977c:	str	r4, [r0]
   19780:	b	1978c <__assert_fail@plt+0x7d14>
   19784:	mov	r0, r4
   19788:	bl	17204 <__assert_fail@plt+0x578c>
   1978c:	mov	r0, r7
   19790:	sub	sp, fp, #28
   19794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19798:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1979c:	add	fp, sp, #24
   197a0:	mov	r7, r2
   197a4:	mov	r5, r1
   197a8:	mov	r6, r0
   197ac:	movw	r9, #0
   197b0:	movt	r9, #32752	; 0x7ff0
   197b4:	mov	r0, r6
   197b8:	mov	r1, r5
   197bc:	mov	r2, r7
   197c0:	bl	11964 <write@plt>
   197c4:	mov	r4, r0
   197c8:	cmn	r0, #1
   197cc:	movgt	r0, r4
   197d0:	popgt	{r4, r5, r6, r7, r8, r9, fp, pc}
   197d4:	bl	11910 <__errno_location@plt>
   197d8:	ldr	r0, [r0]
   197dc:	cmp	r0, #4
   197e0:	beq	197b4 <__assert_fail@plt+0x7d3c>
   197e4:	cmp	r7, r9
   197e8:	mov	r1, #0
   197ec:	movwhi	r1, #1
   197f0:	sub	r2, r0, #22
   197f4:	clz	r2, r2
   197f8:	lsr	r2, r2, #5
   197fc:	ands	r1, r1, r2
   19800:	moveq	r8, r4
   19804:	mov	r1, r7
   19808:	movwne	r1, #0
   1980c:	movtne	r1, #32752	; 0x7ff0
   19810:	cmp	r7, r9
   19814:	bls	19824 <__assert_fail@plt+0x7dac>
   19818:	cmp	r0, #22
   1981c:	mov	r7, r1
   19820:	beq	197b4 <__assert_fail@plt+0x7d3c>
   19824:	mov	r0, r8
   19828:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1982c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19830:	add	fp, sp, #24
   19834:	sub	sp, sp, #64	; 0x40
   19838:	mov	r5, r1
   1983c:	bl	1176c <strdup@plt>
   19840:	cmp	r0, #0
   19844:	beq	19aec <__assert_fail@plt+0x8074>
   19848:	mov	r4, r0
   1984c:	bl	11820 <__ctype_get_mb_cur_max@plt>
   19850:	cmp	r0, #2
   19854:	bcc	19940 <__assert_fail@plt+0x7ec8>
   19858:	cmp	r5, #0
   1985c:	beq	19900 <__assert_fail@plt+0x7e88>
   19860:	str	r4, [sp, #24]
   19864:	mov	r0, r4
   19868:	bl	118e0 <strlen@plt>
   1986c:	mov	r7, #0
   19870:	str	r7, [sp, #16]
   19874:	str	r7, [sp, #12]
   19878:	strb	r7, [sp, #8]
   1987c:	strb	r7, [sp, #20]
   19880:	add	r0, r4, r0
   19884:	str	r0, [sp, #4]
   19888:	ldr	r1, [sp, #24]
   1988c:	cmp	r1, r0
   19890:	bcs	198dc <__assert_fail@plt+0x7e64>
   19894:	add	r6, sp, #4
   19898:	mov	r0, r6
   1989c:	bl	1ab68 <__assert_fail@plt+0x90f0>
   198a0:	ldrb	r0, [sp, #32]
   198a4:	cmp	r0, #0
   198a8:	beq	198dc <__assert_fail@plt+0x7e64>
   198ac:	ldr	r0, [sp, #36]	; 0x24
   198b0:	bl	118d4 <iswspace@plt>
   198b4:	cmp	r0, #0
   198b8:	beq	198dc <__assert_fail@plt+0x7e64>
   198bc:	strb	r7, [sp, #20]
   198c0:	ldr	r0, [sp, #4]
   198c4:	ldr	r1, [sp, #24]
   198c8:	ldr	r2, [sp, #28]
   198cc:	add	r1, r1, r2
   198d0:	str	r1, [sp, #24]
   198d4:	cmp	r1, r0
   198d8:	bcc	19898 <__assert_fail@plt+0x7e20>
   198dc:	ldr	r6, [sp, #24]
   198e0:	mov	r0, r6
   198e4:	bl	118e0 <strlen@plt>
   198e8:	add	r2, r0, #1
   198ec:	mov	r0, r4
   198f0:	mov	r1, r6
   198f4:	bl	116e8 <memmove@plt>
   198f8:	cmp	r5, #1
   198fc:	beq	19ae0 <__assert_fail@plt+0x8068>
   19900:	str	r4, [sp, #24]
   19904:	mov	r0, r4
   19908:	bl	118e0 <strlen@plt>
   1990c:	mov	r6, #0
   19910:	str	r6, [sp, #16]
   19914:	str	r6, [sp, #12]
   19918:	strb	r6, [sp, #8]
   1991c:	strb	r6, [sp, #20]
   19920:	add	r0, r4, r0
   19924:	str	r0, [sp, #4]
   19928:	ldr	r1, [sp, #24]
   1992c:	cmp	r1, r0
   19930:	bcs	19ae0 <__assert_fail@plt+0x8068>
   19934:	add	r5, sp, #4
   19938:	mov	r7, #0
   1993c:	b	19a08 <__assert_fail@plt+0x7f90>
   19940:	cmp	r5, #0
   19944:	beq	199a0 <__assert_fail@plt+0x7f28>
   19948:	ldrb	r7, [r4]
   1994c:	cmp	r7, #0
   19950:	mov	r6, r4
   19954:	beq	19980 <__assert_fail@plt+0x7f08>
   19958:	bl	118bc <__ctype_b_loc@plt>
   1995c:	ldr	r0, [r0]
   19960:	mov	r6, r4
   19964:	uxtb	r1, r7
   19968:	add	r1, r0, r1, lsl #1
   1996c:	ldrb	r1, [r1, #1]
   19970:	tst	r1, #32
   19974:	ldrbne	r7, [r6, #1]!
   19978:	cmpne	r7, #0
   1997c:	bne	19964 <__assert_fail@plt+0x7eec>
   19980:	mov	r0, r6
   19984:	bl	118e0 <strlen@plt>
   19988:	add	r2, r0, #1
   1998c:	mov	r0, r4
   19990:	mov	r1, r6
   19994:	bl	116e8 <memmove@plt>
   19998:	cmp	r5, #1
   1999c:	beq	19ae0 <__assert_fail@plt+0x8068>
   199a0:	mov	r0, r4
   199a4:	bl	118e0 <strlen@plt>
   199a8:	add	r0, r4, r0
   199ac:	sub	r5, r0, #1
   199b0:	cmp	r5, r4
   199b4:	bcc	19ae0 <__assert_fail@plt+0x8068>
   199b8:	bl	118bc <__ctype_b_loc@plt>
   199bc:	mov	r1, #0
   199c0:	ldrb	r2, [r5]
   199c4:	ldr	r3, [r0]
   199c8:	add	r2, r3, r2, lsl #1
   199cc:	ldrb	r2, [r2, #1]
   199d0:	tst	r2, #32
   199d4:	beq	19ae0 <__assert_fail@plt+0x8068>
   199d8:	strb	r1, [r5], #-1
   199dc:	cmp	r5, r4
   199e0:	bcs	199c0 <__assert_fail@plt+0x7f48>
   199e4:	b	19ae0 <__assert_fail@plt+0x8068>
   199e8:	ldrb	r0, [sp, #32]
   199ec:	cmp	r0, #0
   199f0:	beq	19ab4 <__assert_fail@plt+0x803c>
   199f4:	ldr	r0, [sp, #36]	; 0x24
   199f8:	bl	118d4 <iswspace@plt>
   199fc:	cmp	r0, #0
   19a00:	movne	r7, #1
   19a04:	b	19ab4 <__assert_fail@plt+0x803c>
   19a08:	mov	r0, r5
   19a0c:	bl	1ab68 <__assert_fail@plt+0x90f0>
   19a10:	cmp	r7, #1
   19a14:	beq	19a48 <__assert_fail@plt+0x7fd0>
   19a18:	cmp	r7, #0
   19a1c:	bne	19a90 <__assert_fail@plt+0x8018>
   19a20:	mov	r7, #1
   19a24:	ldrb	r0, [sp, #32]
   19a28:	cmp	r0, #0
   19a2c:	beq	19ab4 <__assert_fail@plt+0x803c>
   19a30:	ldr	r0, [sp, #36]	; 0x24
   19a34:	bl	118d4 <iswspace@plt>
   19a38:	cmp	r0, #0
   19a3c:	beq	199e8 <__assert_fail@plt+0x7f70>
   19a40:	mov	r7, #0
   19a44:	b	19ab4 <__assert_fail@plt+0x803c>
   19a48:	mov	r7, #1
   19a4c:	ldrb	r0, [sp, #32]
   19a50:	cmp	r0, #0
   19a54:	beq	19ab4 <__assert_fail@plt+0x803c>
   19a58:	ldr	r0, [sp, #36]	; 0x24
   19a5c:	bl	118d4 <iswspace@plt>
   19a60:	cmp	r0, #0
   19a64:	beq	19ab4 <__assert_fail@plt+0x803c>
   19a68:	ldrb	r0, [sp, #32]
   19a6c:	cmp	r0, #0
   19a70:	beq	19ab0 <__assert_fail@plt+0x8038>
   19a74:	ldr	r0, [sp, #36]	; 0x24
   19a78:	bl	118d4 <iswspace@plt>
   19a7c:	cmp	r0, #0
   19a80:	beq	19ab0 <__assert_fail@plt+0x8038>
   19a84:	mov	r7, #2
   19a88:	ldr	r8, [sp, #24]
   19a8c:	b	19ab4 <__assert_fail@plt+0x803c>
   19a90:	ldrb	r0, [sp, #32]
   19a94:	cmp	r0, #0
   19a98:	beq	19ab0 <__assert_fail@plt+0x8038>
   19a9c:	ldr	r0, [sp, #36]	; 0x24
   19aa0:	bl	118d4 <iswspace@plt>
   19aa4:	mov	r7, #2
   19aa8:	cmp	r0, #0
   19aac:	bne	19ab4 <__assert_fail@plt+0x803c>
   19ab0:	mov	r7, #1
   19ab4:	strb	r6, [sp, #20]
   19ab8:	ldr	r0, [sp, #4]
   19abc:	ldr	r1, [sp, #24]
   19ac0:	ldr	r2, [sp, #28]
   19ac4:	add	r1, r1, r2
   19ac8:	str	r1, [sp, #24]
   19acc:	cmp	r1, r0
   19ad0:	bcc	19a08 <__assert_fail@plt+0x7f90>
   19ad4:	cmp	r7, #2
   19ad8:	moveq	r0, #0
   19adc:	strbeq	r0, [r8]
   19ae0:	mov	r0, r4
   19ae4:	sub	sp, fp, #24
   19ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19aec:	bl	1a364 <__assert_fail@plt+0x88ec>
   19af0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19af4:	add	fp, sp, #24
   19af8:	sub	sp, sp, #32
   19afc:	mov	r4, r2
   19b00:	mov	r8, r0
   19b04:	ldr	r6, [fp, #12]
   19b08:	ldr	r7, [fp, #8]
   19b0c:	cmp	r1, #0
   19b10:	beq	19b38 <__assert_fail@plt+0x80c0>
   19b14:	mov	r5, r1
   19b18:	str	r4, [sp]
   19b1c:	str	r3, [sp, #4]
   19b20:	movw	r2, #64889	; 0xfd79
   19b24:	movt	r2, #1
   19b28:	mov	r0, r8
   19b2c:	mov	r1, #1
   19b30:	mov	r3, r5
   19b34:	b	19b50 <__assert_fail@plt+0x80d8>
   19b38:	str	r3, [sp]
   19b3c:	movw	r2, #64901	; 0xfd85
   19b40:	movt	r2, #1
   19b44:	mov	r0, r8
   19b48:	mov	r1, #1
   19b4c:	mov	r3, r4
   19b50:	bl	1197c <__fprintf_chk@plt>
   19b54:	movw	r1, #64908	; 0xfd8c
   19b58:	movt	r1, #1
   19b5c:	mov	r0, #0
   19b60:	mov	r2, #5
   19b64:	bl	11754 <dcgettext@plt>
   19b68:	mov	r3, r0
   19b6c:	movw	r0, #2022	; 0x7e6
   19b70:	str	r0, [sp]
   19b74:	movw	r2, #90	; 0x5a
   19b78:	movt	r2, #2
   19b7c:	mov	r0, r8
   19b80:	mov	r1, #1
   19b84:	bl	1197c <__fprintf_chk@plt>
   19b88:	movw	r4, #50568	; 0xc588
   19b8c:	movt	r4, #1
   19b90:	mov	r0, r4
   19b94:	mov	r1, r8
   19b98:	bl	11670 <fputs_unlocked@plt>
   19b9c:	movw	r1, #64912	; 0xfd90
   19ba0:	movt	r1, #1
   19ba4:	mov	r0, #0
   19ba8:	mov	r2, #5
   19bac:	bl	11754 <dcgettext@plt>
   19bb0:	mov	r2, r0
   19bb4:	movw	r3, #65083	; 0xfe3b
   19bb8:	movt	r3, #1
   19bbc:	mov	r0, r8
   19bc0:	mov	r1, #1
   19bc4:	bl	1197c <__fprintf_chk@plt>
   19bc8:	mov	r0, r4
   19bcc:	mov	r1, r8
   19bd0:	bl	11670 <fputs_unlocked@plt>
   19bd4:	cmp	r6, #9
   19bd8:	bhi	19c14 <__assert_fail@plt+0x819c>
   19bdc:	add	r0, pc, #0
   19be0:	ldr	pc, [r0, r6, lsl #2]
   19be4:	andeq	r9, r1, ip, lsl #24
   19be8:	andeq	r9, r1, r0, lsr #24
   19bec:	andeq	r9, r1, r0, asr ip
   19bf0:	andeq	r9, r1, r8, ror ip
   19bf4:	andeq	r9, r1, r0, lsr #25
   19bf8:	andeq	r9, r1, r8, asr #25
   19bfc:	strdeq	r9, [r1], -r0
   19c00:	andeq	r9, r1, r8, lsr #26
   19c04:	andeq	r9, r1, r8, asr #27
   19c08:	andeq	r9, r1, r0, ror sp
   19c0c:	sub	sp, fp, #24
   19c10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19c14:	movw	r1, #65436	; 0xff9c
   19c18:	movt	r1, #1
   19c1c:	b	19d78 <__assert_fail@plt+0x8300>
   19c20:	movw	r1, #65117	; 0xfe5d
   19c24:	movt	r1, #1
   19c28:	mov	r0, #0
   19c2c:	mov	r2, #5
   19c30:	bl	11754 <dcgettext@plt>
   19c34:	mov	r2, r0
   19c38:	ldr	r3, [r7]
   19c3c:	mov	r0, r8
   19c40:	mov	r1, #1
   19c44:	sub	sp, fp, #24
   19c48:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19c4c:	b	1197c <__fprintf_chk@plt>
   19c50:	movw	r1, #65133	; 0xfe6d
   19c54:	movt	r1, #1
   19c58:	mov	r0, #0
   19c5c:	mov	r2, #5
   19c60:	bl	11754 <dcgettext@plt>
   19c64:	mov	r2, r0
   19c68:	ldr	r3, [r7]
   19c6c:	ldr	r0, [r7, #4]
   19c70:	str	r0, [sp]
   19c74:	b	19d64 <__assert_fail@plt+0x82ec>
   19c78:	movw	r1, #65156	; 0xfe84
   19c7c:	movt	r1, #1
   19c80:	mov	r0, #0
   19c84:	mov	r2, #5
   19c88:	bl	11754 <dcgettext@plt>
   19c8c:	mov	r2, r0
   19c90:	ldr	r3, [r7]
   19c94:	ldmib	r7, {r0, r1}
   19c98:	stm	sp, {r0, r1}
   19c9c:	b	19d64 <__assert_fail@plt+0x82ec>
   19ca0:	movw	r1, #65184	; 0xfea0
   19ca4:	movt	r1, #1
   19ca8:	mov	r0, #0
   19cac:	mov	r2, #5
   19cb0:	bl	11754 <dcgettext@plt>
   19cb4:	mov	r2, r0
   19cb8:	ldr	r3, [r7]
   19cbc:	ldmib	r7, {r0, r1, r7}
   19cc0:	stm	sp, {r0, r1, r7}
   19cc4:	b	19d64 <__assert_fail@plt+0x82ec>
   19cc8:	movw	r1, #65216	; 0xfec0
   19ccc:	movt	r1, #1
   19cd0:	mov	r0, #0
   19cd4:	mov	r2, #5
   19cd8:	bl	11754 <dcgettext@plt>
   19cdc:	mov	r2, r0
   19ce0:	ldr	r3, [r7]
   19ce4:	ldmib	r7, {r0, r1, r6, r7}
   19ce8:	stm	sp, {r0, r1, r6, r7}
   19cec:	b	19d64 <__assert_fail@plt+0x82ec>
   19cf0:	movw	r1, #65252	; 0xfee4
   19cf4:	movt	r1, #1
   19cf8:	mov	r0, #0
   19cfc:	mov	r2, #5
   19d00:	bl	11754 <dcgettext@plt>
   19d04:	mov	r2, r0
   19d08:	ldr	r3, [r7]
   19d0c:	ldmib	r7, {r0, r1, r6}
   19d10:	ldr	r5, [r7, #16]
   19d14:	ldr	r7, [r7, #20]
   19d18:	stm	sp, {r0, r1, r6}
   19d1c:	str	r5, [sp, #12]
   19d20:	str	r7, [sp, #16]
   19d24:	b	19d64 <__assert_fail@plt+0x82ec>
   19d28:	movw	r1, #65292	; 0xff0c
   19d2c:	movt	r1, #1
   19d30:	mov	r0, #0
   19d34:	mov	r2, #5
   19d38:	bl	11754 <dcgettext@plt>
   19d3c:	mov	r2, r0
   19d40:	ldr	r3, [r7]
   19d44:	ldmib	r7, {r0, r1, r6}
   19d48:	ldr	r5, [r7, #16]
   19d4c:	ldr	r4, [r7, #20]
   19d50:	ldr	r7, [r7, #24]
   19d54:	stm	sp, {r0, r1, r6}
   19d58:	str	r5, [sp, #12]
   19d5c:	str	r4, [sp, #16]
   19d60:	str	r7, [sp, #20]
   19d64:	mov	r0, r8
   19d68:	mov	r1, #1
   19d6c:	b	19e18 <__assert_fail@plt+0x83a0>
   19d70:	movw	r1, #65384	; 0xff68
   19d74:	movt	r1, #1
   19d78:	mov	r0, #0
   19d7c:	mov	r2, #5
   19d80:	bl	11754 <dcgettext@plt>
   19d84:	mov	ip, r0
   19d88:	ldr	r3, [r7]
   19d8c:	ldr	r0, [r7, #4]
   19d90:	ldr	r1, [r7, #8]
   19d94:	ldr	r6, [r7, #12]
   19d98:	ldr	r5, [r7, #16]
   19d9c:	ldr	r4, [r7, #20]
   19da0:	ldr	r2, [r7, #24]
   19da4:	ldr	lr, [r7, #28]
   19da8:	ldr	r7, [r7, #32]
   19dac:	stm	sp, {r0, r1, r6}
   19db0:	str	r5, [sp, #12]
   19db4:	str	r4, [sp, #16]
   19db8:	str	r2, [sp, #20]
   19dbc:	str	lr, [sp, #24]
   19dc0:	str	r7, [sp, #28]
   19dc4:	b	19e0c <__assert_fail@plt+0x8394>
   19dc8:	movw	r1, #65336	; 0xff38
   19dcc:	movt	r1, #1
   19dd0:	mov	r0, #0
   19dd4:	mov	r2, #5
   19dd8:	bl	11754 <dcgettext@plt>
   19ddc:	mov	ip, r0
   19de0:	ldr	r3, [r7]
   19de4:	ldmib	r7, {r0, r1, r6}
   19de8:	ldr	r5, [r7, #16]
   19dec:	ldr	r4, [r7, #20]
   19df0:	ldr	r2, [r7, #24]
   19df4:	ldr	r7, [r7, #28]
   19df8:	stm	sp, {r0, r1, r6}
   19dfc:	str	r5, [sp, #12]
   19e00:	str	r4, [sp, #16]
   19e04:	str	r2, [sp, #20]
   19e08:	str	r7, [sp, #24]
   19e0c:	mov	r0, r8
   19e10:	mov	r1, #1
   19e14:	mov	r2, ip
   19e18:	bl	1197c <__fprintf_chk@plt>
   19e1c:	sub	sp, fp, #24
   19e20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19e24:	push	{r4, sl, fp, lr}
   19e28:	add	fp, sp, #8
   19e2c:	sub	sp, sp, #8
   19e30:	mov	lr, #0
   19e34:	ldr	ip, [fp, #8]
   19e38:	ldr	r4, [ip, lr, lsl #2]
   19e3c:	add	lr, lr, #1
   19e40:	cmp	r4, #0
   19e44:	bne	19e38 <__assert_fail@plt+0x83c0>
   19e48:	sub	r4, lr, #1
   19e4c:	str	ip, [sp]
   19e50:	str	r4, [sp, #4]
   19e54:	bl	19af0 <__assert_fail@plt+0x8078>
   19e58:	sub	sp, fp, #8
   19e5c:	pop	{r4, sl, fp, pc}
   19e60:	push	{r4, r5, fp, lr}
   19e64:	add	fp, sp, #8
   19e68:	sub	sp, sp, #48	; 0x30
   19e6c:	mov	ip, #0
   19e70:	ldr	r4, [fp, #8]
   19e74:	add	lr, sp, #8
   19e78:	ldr	r5, [r4]
   19e7c:	str	r5, [lr, ip, lsl #2]
   19e80:	cmp	r5, #0
   19e84:	beq	19e98 <__assert_fail@plt+0x8420>
   19e88:	add	ip, ip, #1
   19e8c:	add	r4, r4, #4
   19e90:	cmp	ip, #10
   19e94:	bcc	19e78 <__assert_fail@plt+0x8400>
   19e98:	str	lr, [sp]
   19e9c:	str	ip, [sp, #4]
   19ea0:	bl	19af0 <__assert_fail@plt+0x8078>
   19ea4:	sub	sp, fp, #8
   19ea8:	pop	{r4, r5, fp, pc}
   19eac:	push	{fp, lr}
   19eb0:	mov	fp, sp
   19eb4:	sub	sp, sp, #8
   19eb8:	add	ip, fp, #8
   19ebc:	str	ip, [sp, #4]
   19ec0:	str	ip, [sp]
   19ec4:	bl	19e60 <__assert_fail@plt+0x83e8>
   19ec8:	mov	sp, fp
   19ecc:	pop	{fp, pc}
   19ed0:	push	{fp, lr}
   19ed4:	mov	fp, sp
   19ed8:	movw	r0, #4580	; 0x11e4
   19edc:	movt	r0, #3
   19ee0:	ldr	r1, [r0]
   19ee4:	movw	r0, #50568	; 0xc588
   19ee8:	movt	r0, #1
   19eec:	bl	11670 <fputs_unlocked@plt>
   19ef0:	movw	r1, #65496	; 0xffd8
   19ef4:	movt	r1, #1
   19ef8:	mov	r0, #0
   19efc:	mov	r2, #5
   19f00:	bl	11754 <dcgettext@plt>
   19f04:	mov	r1, r0
   19f08:	movw	r2, #65516	; 0xffec
   19f0c:	movt	r2, #1
   19f10:	mov	r0, #1
   19f14:	bl	11958 <__printf_chk@plt>
   19f18:	movw	r1, #2
   19f1c:	movt	r1, #2
   19f20:	mov	r0, #0
   19f24:	mov	r2, #5
   19f28:	bl	11754 <dcgettext@plt>
   19f2c:	mov	r1, r0
   19f30:	movw	r2, #50700	; 0xc60c
   19f34:	movt	r2, #1
   19f38:	movw	r3, #50907	; 0xc6db
   19f3c:	movt	r3, #1
   19f40:	mov	r0, #1
   19f44:	bl	11958 <__printf_chk@plt>
   19f48:	movw	r1, #22
   19f4c:	movt	r1, #2
   19f50:	mov	r0, #0
   19f54:	mov	r2, #5
   19f58:	bl	11754 <dcgettext@plt>
   19f5c:	mov	r1, r0
   19f60:	movw	r2, #61	; 0x3d
   19f64:	movt	r2, #2
   19f68:	mov	r0, #1
   19f6c:	pop	{fp, lr}
   19f70:	b	11958 <__printf_chk@plt>
   19f74:	b	19f78 <__assert_fail@plt+0x8500>
   19f78:	push	{r4, r5, r6, sl, fp, lr}
   19f7c:	add	fp, sp, #16
   19f80:	mov	r4, r2
   19f84:	mov	r5, r1
   19f88:	mov	r6, r0
   19f8c:	bl	1b99c <__assert_fail@plt+0x9f24>
   19f90:	cmp	r0, #0
   19f94:	popne	{r4, r5, r6, sl, fp, pc}
   19f98:	cmp	r6, #0
   19f9c:	beq	19fb0 <__assert_fail@plt+0x8538>
   19fa0:	cmp	r5, #0
   19fa4:	cmpne	r4, #0
   19fa8:	bne	19fb0 <__assert_fail@plt+0x8538>
   19fac:	pop	{r4, r5, r6, sl, fp, pc}
   19fb0:	bl	1a364 <__assert_fail@plt+0x88ec>
   19fb4:	push	{fp, lr}
   19fb8:	mov	fp, sp
   19fbc:	bl	1a4a8 <__assert_fail@plt+0x8a30>
   19fc0:	bl	19fc8 <__assert_fail@plt+0x8550>
   19fc4:	pop	{fp, pc}
   19fc8:	cmp	r0, #0
   19fcc:	bxne	lr
   19fd0:	push	{fp, lr}
   19fd4:	mov	fp, sp
   19fd8:	bl	1a364 <__assert_fail@plt+0x88ec>
   19fdc:	push	{fp, lr}
   19fe0:	mov	fp, sp
   19fe4:	bl	1aafc <__assert_fail@plt+0x9084>
   19fe8:	bl	19fc8 <__assert_fail@plt+0x8550>
   19fec:	pop	{fp, pc}
   19ff0:	b	19fb4 <__assert_fail@plt+0x853c>
   19ff4:	push	{r4, r5, fp, lr}
   19ff8:	add	fp, sp, #8
   19ffc:	mov	r4, r1
   1a000:	mov	r5, r0
   1a004:	bl	1a4d8 <__assert_fail@plt+0x8a60>
   1a008:	cmp	r0, #0
   1a00c:	popne	{r4, r5, fp, pc}
   1a010:	cmp	r5, #0
   1a014:	beq	1a024 <__assert_fail@plt+0x85ac>
   1a018:	cmp	r4, #0
   1a01c:	bne	1a024 <__assert_fail@plt+0x85ac>
   1a020:	pop	{r4, r5, fp, pc}
   1a024:	bl	1a364 <__assert_fail@plt+0x88ec>
   1a028:	push	{fp, lr}
   1a02c:	mov	fp, sp
   1a030:	bl	1ab00 <__assert_fail@plt+0x9088>
   1a034:	bl	19fc8 <__assert_fail@plt+0x8550>
   1a038:	pop	{fp, pc}
   1a03c:	push	{fp, lr}
   1a040:	mov	fp, sp
   1a044:	bl	1ab10 <__assert_fail@plt+0x9098>
   1a048:	bl	19fc8 <__assert_fail@plt+0x8550>
   1a04c:	pop	{fp, pc}
   1a050:	push	{fp, lr}
   1a054:	mov	fp, sp
   1a058:	mov	r2, r1
   1a05c:	mov	r1, r0
   1a060:	mov	r0, #0
   1a064:	bl	19f78 <__assert_fail@plt+0x8500>
   1a068:	pop	{fp, pc}
   1a06c:	mov	r2, r1
   1a070:	mov	r1, r0
   1a074:	mov	r0, #0
   1a078:	b	1a03c <__assert_fail@plt+0x85c4>
   1a07c:	mov	r2, #1
   1a080:	b	1a084 <__assert_fail@plt+0x860c>
   1a084:	push	{r4, r5, fp, lr}
   1a088:	add	fp, sp, #8
   1a08c:	mov	r4, r1
   1a090:	ldr	r5, [r1]
   1a094:	cmp	r0, #0
   1a098:	beq	1a0b0 <__assert_fail@plt+0x8638>
   1a09c:	mov	r1, #1
   1a0a0:	add	r1, r1, r5, lsr #1
   1a0a4:	adds	r5, r5, r1
   1a0a8:	bcc	1a0c8 <__assert_fail@plt+0x8650>
   1a0ac:	bl	1a364 <__assert_fail@plt+0x88ec>
   1a0b0:	cmp	r5, #0
   1a0b4:	bne	1a0c8 <__assert_fail@plt+0x8650>
   1a0b8:	mov	r1, #64	; 0x40
   1a0bc:	udiv	r5, r1, r2
   1a0c0:	cmp	r2, #64	; 0x40
   1a0c4:	addhi	r5, r5, #1
   1a0c8:	mov	r1, r5
   1a0cc:	bl	19f78 <__assert_fail@plt+0x8500>
   1a0d0:	str	r5, [r4]
   1a0d4:	pop	{r4, r5, fp, pc}
   1a0d8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a0dc:	add	fp, sp, #24
   1a0e0:	mov	r8, r1
   1a0e4:	ldr	r6, [r1]
   1a0e8:	add	r1, r6, r6, asr #1
   1a0ec:	cmp	r1, r6
   1a0f0:	mvnvs	r1, #-2147483648	; 0x80000000
   1a0f4:	cmp	r1, r3
   1a0f8:	mov	r5, r1
   1a0fc:	movgt	r5, r3
   1a100:	cmn	r3, #1
   1a104:	movle	r5, r1
   1a108:	ldr	r4, [fp, #8]
   1a10c:	cmn	r4, #1
   1a110:	ble	1a138 <__assert_fail@plt+0x86c0>
   1a114:	cmp	r4, #0
   1a118:	beq	1a18c <__assert_fail@plt+0x8714>
   1a11c:	cmn	r5, #1
   1a120:	ble	1a160 <__assert_fail@plt+0x86e8>
   1a124:	mvn	r7, #-2147483648	; 0x80000000
   1a128:	udiv	r1, r7, r4
   1a12c:	cmp	r1, r5
   1a130:	bge	1a18c <__assert_fail@plt+0x8714>
   1a134:	b	1a19c <__assert_fail@plt+0x8724>
   1a138:	cmn	r5, #1
   1a13c:	ble	1a17c <__assert_fail@plt+0x8704>
   1a140:	cmn	r4, #1
   1a144:	beq	1a18c <__assert_fail@plt+0x8714>
   1a148:	mov	r1, #-2147483648	; 0x80000000
   1a14c:	sdiv	r1, r1, r4
   1a150:	mvn	r7, #-2147483648	; 0x80000000
   1a154:	cmp	r1, r5
   1a158:	bge	1a18c <__assert_fail@plt+0x8714>
   1a15c:	b	1a19c <__assert_fail@plt+0x8724>
   1a160:	beq	1a18c <__assert_fail@plt+0x8714>
   1a164:	mov	r1, #-2147483648	; 0x80000000
   1a168:	sdiv	r1, r1, r5
   1a16c:	mvn	r7, #-2147483648	; 0x80000000
   1a170:	cmp	r1, r4
   1a174:	bge	1a18c <__assert_fail@plt+0x8714>
   1a178:	b	1a19c <__assert_fail@plt+0x8724>
   1a17c:	mvn	r7, #-2147483648	; 0x80000000
   1a180:	sdiv	r1, r7, r4
   1a184:	cmp	r5, r1
   1a188:	blt	1a19c <__assert_fail@plt+0x8724>
   1a18c:	mul	r1, r5, r4
   1a190:	mov	r7, #64	; 0x40
   1a194:	cmp	r1, #63	; 0x3f
   1a198:	bgt	1a1a4 <__assert_fail@plt+0x872c>
   1a19c:	sdiv	r5, r7, r4
   1a1a0:	mul	r1, r5, r4
   1a1a4:	cmp	r0, #0
   1a1a8:	moveq	r7, #0
   1a1ac:	streq	r7, [r8]
   1a1b0:	sub	r7, r5, r6
   1a1b4:	cmp	r7, r2
   1a1b8:	bge	1a264 <__assert_fail@plt+0x87ec>
   1a1bc:	add	r5, r6, r2
   1a1c0:	mov	r1, #0
   1a1c4:	cmp	r5, r3
   1a1c8:	mov	r2, #0
   1a1cc:	movwgt	r2, #1
   1a1d0:	cmn	r3, #1
   1a1d4:	movwgt	r1, #1
   1a1d8:	cmp	r5, r6
   1a1dc:	bvs	1a24c <__assert_fail@plt+0x87d4>
   1a1e0:	ands	r1, r1, r2
   1a1e4:	bne	1a24c <__assert_fail@plt+0x87d4>
   1a1e8:	cmn	r4, #1
   1a1ec:	ble	1a214 <__assert_fail@plt+0x879c>
   1a1f0:	cmp	r4, #0
   1a1f4:	beq	1a260 <__assert_fail@plt+0x87e8>
   1a1f8:	cmn	r5, #1
   1a1fc:	ble	1a238 <__assert_fail@plt+0x87c0>
   1a200:	mvn	r1, #-2147483648	; 0x80000000
   1a204:	udiv	r1, r1, r4
   1a208:	cmp	r1, r5
   1a20c:	bge	1a260 <__assert_fail@plt+0x87e8>
   1a210:	b	1a24c <__assert_fail@plt+0x87d4>
   1a214:	cmn	r5, #1
   1a218:	ble	1a250 <__assert_fail@plt+0x87d8>
   1a21c:	cmn	r4, #1
   1a220:	beq	1a260 <__assert_fail@plt+0x87e8>
   1a224:	mov	r1, #-2147483648	; 0x80000000
   1a228:	sdiv	r1, r1, r4
   1a22c:	cmp	r1, r5
   1a230:	bge	1a260 <__assert_fail@plt+0x87e8>
   1a234:	b	1a24c <__assert_fail@plt+0x87d4>
   1a238:	beq	1a260 <__assert_fail@plt+0x87e8>
   1a23c:	mov	r1, #-2147483648	; 0x80000000
   1a240:	sdiv	r1, r1, r5
   1a244:	cmp	r1, r4
   1a248:	bge	1a260 <__assert_fail@plt+0x87e8>
   1a24c:	bl	1a364 <__assert_fail@plt+0x88ec>
   1a250:	mvn	r1, #-2147483648	; 0x80000000
   1a254:	sdiv	r1, r1, r4
   1a258:	cmp	r5, r1
   1a25c:	blt	1a24c <__assert_fail@plt+0x87d4>
   1a260:	mul	r1, r5, r4
   1a264:	bl	19ff4 <__assert_fail@plt+0x857c>
   1a268:	str	r5, [r8]
   1a26c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1a270:	mov	r1, #1
   1a274:	b	1a278 <__assert_fail@plt+0x8800>
   1a278:	push	{fp, lr}
   1a27c:	mov	fp, sp
   1a280:	bl	1a454 <__assert_fail@plt+0x89dc>
   1a284:	bl	19fc8 <__assert_fail@plt+0x8550>
   1a288:	pop	{fp, pc}
   1a28c:	mov	r1, #1
   1a290:	b	1a294 <__assert_fail@plt+0x881c>
   1a294:	push	{fp, lr}
   1a298:	mov	fp, sp
   1a29c:	bl	1ab0c <__assert_fail@plt+0x9094>
   1a2a0:	bl	19fc8 <__assert_fail@plt+0x8550>
   1a2a4:	pop	{fp, pc}
   1a2a8:	push	{r4, r5, r6, sl, fp, lr}
   1a2ac:	add	fp, sp, #16
   1a2b0:	mov	r4, r1
   1a2b4:	mov	r5, r0
   1a2b8:	mov	r0, r1
   1a2bc:	bl	19fb4 <__assert_fail@plt+0x853c>
   1a2c0:	mov	r6, r0
   1a2c4:	mov	r1, r5
   1a2c8:	mov	r2, r4
   1a2cc:	bl	11718 <memcpy@plt>
   1a2d0:	mov	r0, r6
   1a2d4:	pop	{r4, r5, r6, sl, fp, pc}
   1a2d8:	push	{r4, r5, r6, sl, fp, lr}
   1a2dc:	add	fp, sp, #16
   1a2e0:	mov	r4, r1
   1a2e4:	mov	r5, r0
   1a2e8:	mov	r0, r1
   1a2ec:	bl	19fdc <__assert_fail@plt+0x8564>
   1a2f0:	mov	r6, r0
   1a2f4:	mov	r1, r5
   1a2f8:	mov	r2, r4
   1a2fc:	bl	11718 <memcpy@plt>
   1a300:	mov	r0, r6
   1a304:	pop	{r4, r5, r6, sl, fp, pc}
   1a308:	push	{r4, r5, r6, sl, fp, lr}
   1a30c:	add	fp, sp, #16
   1a310:	mov	r4, r1
   1a314:	mov	r5, r0
   1a318:	add	r0, r1, #1
   1a31c:	bl	19fdc <__assert_fail@plt+0x8564>
   1a320:	mov	r6, r0
   1a324:	mov	r0, #0
   1a328:	strb	r0, [r6, r4]
   1a32c:	mov	r0, r6
   1a330:	mov	r1, r5
   1a334:	mov	r2, r4
   1a338:	bl	11718 <memcpy@plt>
   1a33c:	mov	r0, r6
   1a340:	pop	{r4, r5, r6, sl, fp, pc}
   1a344:	push	{r4, sl, fp, lr}
   1a348:	add	fp, sp, #8
   1a34c:	mov	r4, r0
   1a350:	bl	118e0 <strlen@plt>
   1a354:	add	r1, r0, #1
   1a358:	mov	r0, r4
   1a35c:	pop	{r4, sl, fp, lr}
   1a360:	b	1a2a8 <__assert_fail@plt+0x8830>
   1a364:	push	{fp, lr}
   1a368:	mov	fp, sp
   1a36c:	movw	r0, #4480	; 0x1180
   1a370:	movt	r0, #3
   1a374:	ldr	r4, [r0]
   1a378:	movw	r1, #137	; 0x89
   1a37c:	movt	r1, #2
   1a380:	mov	r0, #0
   1a384:	mov	r2, #5
   1a388:	bl	11754 <dcgettext@plt>
   1a38c:	mov	r3, r0
   1a390:	movw	r2, #64417	; 0xfba1
   1a394:	movt	r2, #1
   1a398:	mov	r0, r4
   1a39c:	mov	r1, #0
   1a3a0:	bl	11850 <error@plt>
   1a3a4:	bl	11a60 <abort@plt>
   1a3a8:	push	{r4, sl, fp, lr}
   1a3ac:	add	fp, sp, #8
   1a3b0:	sub	sp, sp, #8
   1a3b4:	ldr	r4, [fp, #8]
   1a3b8:	str	r4, [sp]
   1a3bc:	bl	1b9d8 <__assert_fail@plt+0x9f60>
   1a3c0:	mov	r4, r0
   1a3c4:	cmn	r0, #1
   1a3c8:	bgt	1a3dc <__assert_fail@plt+0x8964>
   1a3cc:	bl	11910 <__errno_location@plt>
   1a3d0:	ldr	r0, [r0]
   1a3d4:	cmp	r0, #12
   1a3d8:	beq	1a3e8 <__assert_fail@plt+0x8970>
   1a3dc:	mov	r0, r4
   1a3e0:	sub	sp, fp, #8
   1a3e4:	pop	{r4, sl, fp, pc}
   1a3e8:	bl	1a364 <__assert_fail@plt+0x88ec>
   1a3ec:	push	{r4, sl, fp, lr}
   1a3f0:	add	fp, sp, #8
   1a3f4:	bl	1bc78 <__assert_fail@plt+0xa200>
   1a3f8:	mov	r4, r0
   1a3fc:	cmp	r0, #0
   1a400:	bne	1a414 <__assert_fail@plt+0x899c>
   1a404:	bl	11910 <__errno_location@plt>
   1a408:	ldr	r0, [r0]
   1a40c:	cmp	r0, #12
   1a410:	beq	1a41c <__assert_fail@plt+0x89a4>
   1a414:	mov	r0, r4
   1a418:	pop	{r4, sl, fp, pc}
   1a41c:	bl	1a364 <__assert_fail@plt+0x88ec>
   1a420:	push	{r4, sl, fp, lr}
   1a424:	add	fp, sp, #8
   1a428:	bl	1beac <__assert_fail@plt+0xa434>
   1a42c:	mov	r4, r0
   1a430:	cmp	r0, #0
   1a434:	bne	1a448 <__assert_fail@plt+0x89d0>
   1a438:	bl	11910 <__errno_location@plt>
   1a43c:	ldr	r0, [r0]
   1a440:	cmp	r0, #12
   1a444:	beq	1a450 <__assert_fail@plt+0x89d8>
   1a448:	mov	r0, r4
   1a44c:	pop	{r4, sl, fp, pc}
   1a450:	bl	1a364 <__assert_fail@plt+0x88ec>
   1a454:	clz	r2, r1
   1a458:	lsr	r2, r2, #5
   1a45c:	clz	r3, r0
   1a460:	lsr	r3, r3, #5
   1a464:	orrs	r2, r3, r2
   1a468:	movwne	r1, #1
   1a46c:	movwne	r0, #1
   1a470:	cmp	r1, #0
   1a474:	beq	1a4a4 <__assert_fail@plt+0x8a2c>
   1a478:	mvn	r2, #-2147483648	; 0x80000000
   1a47c:	udiv	r2, r2, r1
   1a480:	cmp	r2, r0
   1a484:	bcs	1a4a4 <__assert_fail@plt+0x8a2c>
   1a488:	push	{fp, lr}
   1a48c:	mov	fp, sp
   1a490:	bl	11910 <__errno_location@plt>
   1a494:	mov	r1, #12
   1a498:	str	r1, [r0]
   1a49c:	mov	r0, #0
   1a4a0:	pop	{fp, pc}
   1a4a4:	b	11664 <calloc@plt>
   1a4a8:	cmp	r0, #0
   1a4ac:	movweq	r0, #1
   1a4b0:	cmn	r0, #1
   1a4b4:	ble	1a4bc <__assert_fail@plt+0x8a44>
   1a4b8:	b	1185c <malloc@plt>
   1a4bc:	push	{fp, lr}
   1a4c0:	mov	fp, sp
   1a4c4:	bl	11910 <__errno_location@plt>
   1a4c8:	mov	r1, #12
   1a4cc:	str	r1, [r0]
   1a4d0:	mov	r0, #0
   1a4d4:	pop	{fp, pc}
   1a4d8:	push	{fp, lr}
   1a4dc:	mov	fp, sp
   1a4e0:	cmp	r0, #0
   1a4e4:	beq	1a500 <__assert_fail@plt+0x8a88>
   1a4e8:	cmp	r1, #0
   1a4ec:	beq	1a50c <__assert_fail@plt+0x8a94>
   1a4f0:	cmn	r1, #1
   1a4f4:	ble	1a518 <__assert_fail@plt+0x8aa0>
   1a4f8:	pop	{fp, lr}
   1a4fc:	b	1179c <realloc@plt>
   1a500:	mov	r0, r1
   1a504:	pop	{fp, lr}
   1a508:	b	1a4a8 <__assert_fail@plt+0x8a30>
   1a50c:	bl	17204 <__assert_fail@plt+0x578c>
   1a510:	mov	r0, #0
   1a514:	pop	{fp, pc}
   1a518:	bl	11910 <__errno_location@plt>
   1a51c:	mov	r1, #12
   1a520:	str	r1, [r0]
   1a524:	mov	r0, #0
   1a528:	pop	{fp, pc}
   1a52c:	mov	r1, r0
   1a530:	sub	r2, r0, #65	; 0x41
   1a534:	mov	r0, #1
   1a538:	cmp	r2, #26
   1a53c:	subcs	r2, r1, #97	; 0x61
   1a540:	cmpcs	r2, #26
   1a544:	bcs	1a54c <__assert_fail@plt+0x8ad4>
   1a548:	bx	lr
   1a54c:	sub	r1, r1, #48	; 0x30
   1a550:	cmp	r1, #10
   1a554:	movcs	r0, #0
   1a558:	bx	lr
   1a55c:	mov	r1, r0
   1a560:	sub	r2, r0, #65	; 0x41
   1a564:	mov	r0, #1
   1a568:	cmp	r2, #26
   1a56c:	subcs	r1, r1, #97	; 0x61
   1a570:	cmpcs	r1, #26
   1a574:	movcs	r0, #0
   1a578:	bx	lr
   1a57c:	mov	r1, #0
   1a580:	cmp	r0, #128	; 0x80
   1a584:	movwcc	r1, #1
   1a588:	mov	r0, r1
   1a58c:	bx	lr
   1a590:	sub	r1, r0, #9
   1a594:	clz	r1, r1
   1a598:	lsr	r1, r1, #5
   1a59c:	sub	r0, r0, #32
   1a5a0:	clz	r0, r0
   1a5a4:	lsr	r0, r0, #5
   1a5a8:	orr	r0, r0, r1
   1a5ac:	bx	lr
   1a5b0:	mov	r1, r0
   1a5b4:	mov	r0, #1
   1a5b8:	cmp	r1, #32
   1a5bc:	bxcc	lr
   1a5c0:	cmp	r1, #127	; 0x7f
   1a5c4:	movne	r0, #0
   1a5c8:	bx	lr
   1a5cc:	sub	r1, r0, #48	; 0x30
   1a5d0:	mov	r0, #0
   1a5d4:	cmp	r1, #10
   1a5d8:	movwcc	r0, #1
   1a5dc:	bx	lr
   1a5e0:	sub	r1, r0, #33	; 0x21
   1a5e4:	mov	r0, #0
   1a5e8:	cmp	r1, #94	; 0x5e
   1a5ec:	movwcc	r0, #1
   1a5f0:	bx	lr
   1a5f4:	sub	r1, r0, #97	; 0x61
   1a5f8:	mov	r0, #0
   1a5fc:	cmp	r1, #26
   1a600:	movwcc	r0, #1
   1a604:	bx	lr
   1a608:	sub	r1, r0, #32
   1a60c:	mov	r0, #0
   1a610:	cmp	r1, #95	; 0x5f
   1a614:	movwcc	r0, #1
   1a618:	bx	lr
   1a61c:	sub	r1, r0, #33	; 0x21
   1a620:	cmp	r1, #93	; 0x5d
   1a624:	bhi	1a7b0 <__assert_fail@plt+0x8d38>
   1a628:	mov	r0, #1
   1a62c:	add	r2, pc, #0
   1a630:	ldr	pc, [r2, r1, lsl #2]
   1a634:	andeq	sl, r1, ip, lsr #15
   1a638:	andeq	sl, r1, ip, lsr #15
   1a63c:	andeq	sl, r1, ip, lsr #15
   1a640:	andeq	sl, r1, ip, lsr #15
   1a644:	andeq	sl, r1, ip, lsr #15
   1a648:	andeq	sl, r1, ip, lsr #15
   1a64c:	andeq	sl, r1, ip, lsr #15
   1a650:	andeq	sl, r1, ip, lsr #15
   1a654:	andeq	sl, r1, ip, lsr #15
   1a658:	andeq	sl, r1, ip, lsr #15
   1a65c:	andeq	sl, r1, ip, lsr #15
   1a660:	andeq	sl, r1, ip, lsr #15
   1a664:	andeq	sl, r1, ip, lsr #15
   1a668:	andeq	sl, r1, ip, lsr #15
   1a66c:	andeq	sl, r1, ip, lsr #15
   1a670:			; <UNDEFINED> instruction: 0x0001a7b0
   1a674:			; <UNDEFINED> instruction: 0x0001a7b0
   1a678:			; <UNDEFINED> instruction: 0x0001a7b0
   1a67c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a680:			; <UNDEFINED> instruction: 0x0001a7b0
   1a684:			; <UNDEFINED> instruction: 0x0001a7b0
   1a688:			; <UNDEFINED> instruction: 0x0001a7b0
   1a68c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a690:			; <UNDEFINED> instruction: 0x0001a7b0
   1a694:			; <UNDEFINED> instruction: 0x0001a7b0
   1a698:	andeq	sl, r1, ip, lsr #15
   1a69c:	andeq	sl, r1, ip, lsr #15
   1a6a0:	andeq	sl, r1, ip, lsr #15
   1a6a4:	andeq	sl, r1, ip, lsr #15
   1a6a8:	andeq	sl, r1, ip, lsr #15
   1a6ac:	andeq	sl, r1, ip, lsr #15
   1a6b0:	andeq	sl, r1, ip, lsr #15
   1a6b4:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6b8:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6bc:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6c0:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6c4:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6c8:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6cc:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6d0:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6d4:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6d8:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6dc:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6e0:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6e4:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6e8:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6ec:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6f0:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6f4:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6f8:			; <UNDEFINED> instruction: 0x0001a7b0
   1a6fc:			; <UNDEFINED> instruction: 0x0001a7b0
   1a700:			; <UNDEFINED> instruction: 0x0001a7b0
   1a704:			; <UNDEFINED> instruction: 0x0001a7b0
   1a708:			; <UNDEFINED> instruction: 0x0001a7b0
   1a70c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a710:			; <UNDEFINED> instruction: 0x0001a7b0
   1a714:			; <UNDEFINED> instruction: 0x0001a7b0
   1a718:			; <UNDEFINED> instruction: 0x0001a7b0
   1a71c:	andeq	sl, r1, ip, lsr #15
   1a720:	andeq	sl, r1, ip, lsr #15
   1a724:	andeq	sl, r1, ip, lsr #15
   1a728:	andeq	sl, r1, ip, lsr #15
   1a72c:	andeq	sl, r1, ip, lsr #15
   1a730:	andeq	sl, r1, ip, lsr #15
   1a734:			; <UNDEFINED> instruction: 0x0001a7b0
   1a738:			; <UNDEFINED> instruction: 0x0001a7b0
   1a73c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a740:			; <UNDEFINED> instruction: 0x0001a7b0
   1a744:			; <UNDEFINED> instruction: 0x0001a7b0
   1a748:			; <UNDEFINED> instruction: 0x0001a7b0
   1a74c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a750:			; <UNDEFINED> instruction: 0x0001a7b0
   1a754:			; <UNDEFINED> instruction: 0x0001a7b0
   1a758:			; <UNDEFINED> instruction: 0x0001a7b0
   1a75c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a760:			; <UNDEFINED> instruction: 0x0001a7b0
   1a764:			; <UNDEFINED> instruction: 0x0001a7b0
   1a768:			; <UNDEFINED> instruction: 0x0001a7b0
   1a76c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a770:			; <UNDEFINED> instruction: 0x0001a7b0
   1a774:			; <UNDEFINED> instruction: 0x0001a7b0
   1a778:			; <UNDEFINED> instruction: 0x0001a7b0
   1a77c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a780:			; <UNDEFINED> instruction: 0x0001a7b0
   1a784:			; <UNDEFINED> instruction: 0x0001a7b0
   1a788:			; <UNDEFINED> instruction: 0x0001a7b0
   1a78c:			; <UNDEFINED> instruction: 0x0001a7b0
   1a790:			; <UNDEFINED> instruction: 0x0001a7b0
   1a794:			; <UNDEFINED> instruction: 0x0001a7b0
   1a798:			; <UNDEFINED> instruction: 0x0001a7b0
   1a79c:	andeq	sl, r1, ip, lsr #15
   1a7a0:	andeq	sl, r1, ip, lsr #15
   1a7a4:	andeq	sl, r1, ip, lsr #15
   1a7a8:	andeq	sl, r1, ip, lsr #15
   1a7ac:	bx	lr
   1a7b0:	mov	r0, #0
   1a7b4:	bx	lr
   1a7b8:	sub	r0, r0, #9
   1a7bc:	cmp	r0, #23
   1a7c0:	movhi	r0, #0
   1a7c4:	bxhi	lr
   1a7c8:	bic	r0, r0, #-16777216	; 0xff000000
   1a7cc:	movw	r1, #31
   1a7d0:	movt	r1, #128	; 0x80
   1a7d4:	mov	r2, #1
   1a7d8:	and	r0, r2, r1, lsr r0
   1a7dc:	bx	lr
   1a7e0:	sub	r1, r0, #65	; 0x41
   1a7e4:	mov	r0, #0
   1a7e8:	cmp	r1, #26
   1a7ec:	movwcc	r0, #1
   1a7f0:	bx	lr
   1a7f4:	mov	r1, r0
   1a7f8:	sub	r2, r0, #48	; 0x30
   1a7fc:	mov	r0, #1
   1a800:	cmp	r2, #22
   1a804:	bhi	1a81c <__assert_fail@plt+0x8da4>
   1a808:	mov	ip, #1
   1a80c:	movw	r3, #1023	; 0x3ff
   1a810:	movt	r3, #126	; 0x7e
   1a814:	tst	r3, ip, lsl r2
   1a818:	bxne	lr
   1a81c:	sub	r1, r1, #97	; 0x61
   1a820:	cmp	r1, #6
   1a824:	movcs	r0, #0
   1a828:	bxcs	lr
   1a82c:	bx	lr
   1a830:	sub	r1, r0, #65	; 0x41
   1a834:	cmp	r1, #26
   1a838:	addcc	r0, r0, #32
   1a83c:	bx	lr
   1a840:	sub	r1, r0, #97	; 0x61
   1a844:	cmp	r1, #26
   1a848:	subcc	r0, r0, #32
   1a84c:	bx	lr
   1a850:	push	{r4, r5, r6, sl, fp, lr}
   1a854:	add	fp, sp, #16
   1a858:	cmp	r0, r1
   1a85c:	moveq	r0, #0
   1a860:	popeq	{r4, r5, r6, sl, fp, pc}
   1a864:	mov	r4, r1
   1a868:	mov	r5, r0
   1a86c:	ldrb	r0, [r5]
   1a870:	bl	1a830 <__assert_fail@plt+0x8db8>
   1a874:	mov	r6, r0
   1a878:	ldrb	r0, [r4]
   1a87c:	bl	1a830 <__assert_fail@plt+0x8db8>
   1a880:	uxtb	r1, r6
   1a884:	cmp	r1, #0
   1a888:	beq	1a8a0 <__assert_fail@plt+0x8e28>
   1a88c:	add	r4, r4, #1
   1a890:	add	r5, r5, #1
   1a894:	uxtb	r2, r0
   1a898:	cmp	r1, r2
   1a89c:	beq	1a86c <__assert_fail@plt+0x8df4>
   1a8a0:	uxtb	r0, r0
   1a8a4:	sub	r0, r1, r0
   1a8a8:	pop	{r4, r5, r6, sl, fp, pc}
   1a8ac:	push	{r4, r5, r6, sl, fp, lr}
   1a8b0:	add	fp, sp, #16
   1a8b4:	mov	r4, r0
   1a8b8:	bl	1182c <__fpending@plt>
   1a8bc:	mov	r5, r0
   1a8c0:	mov	r0, r4
   1a8c4:	bl	11838 <ferror_unlocked@plt>
   1a8c8:	mov	r6, r0
   1a8cc:	mov	r0, r4
   1a8d0:	bl	1a934 <__assert_fail@plt+0x8ebc>
   1a8d4:	cmp	r6, #0
   1a8d8:	beq	1a8f8 <__assert_fail@plt+0x8e80>
   1a8dc:	mvn	r4, #0
   1a8e0:	cmp	r0, #0
   1a8e4:	bne	1a92c <__assert_fail@plt+0x8eb4>
   1a8e8:	bl	11910 <__errno_location@plt>
   1a8ec:	mov	r1, #0
   1a8f0:	str	r1, [r0]
   1a8f4:	b	1a92c <__assert_fail@plt+0x8eb4>
   1a8f8:	cmp	r0, #0
   1a8fc:	mov	r4, r0
   1a900:	mvnne	r4, #0
   1a904:	cmp	r5, #0
   1a908:	bne	1a92c <__assert_fail@plt+0x8eb4>
   1a90c:	cmp	r0, #0
   1a910:	beq	1a92c <__assert_fail@plt+0x8eb4>
   1a914:	bl	11910 <__errno_location@plt>
   1a918:	ldr	r0, [r0]
   1a91c:	subs	r4, r0, #9
   1a920:	mvnne	r4, #0
   1a924:	mov	r0, r4
   1a928:	pop	{r4, r5, r6, sl, fp, pc}
   1a92c:	mov	r0, r4
   1a930:	pop	{r4, r5, r6, sl, fp, pc}
   1a934:	push	{r4, r5, fp, lr}
   1a938:	add	fp, sp, #8
   1a93c:	sub	sp, sp, #8
   1a940:	mov	r4, r0
   1a944:	bl	11970 <fileno@plt>
   1a948:	cmn	r0, #1
   1a94c:	ble	1a9c4 <__assert_fail@plt+0x8f4c>
   1a950:	mov	r0, r4
   1a954:	bl	11880 <__freading@plt>
   1a958:	cmp	r0, #0
   1a95c:	beq	1a988 <__assert_fail@plt+0x8f10>
   1a960:	mov	r0, r4
   1a964:	bl	11970 <fileno@plt>
   1a968:	mov	r1, #1
   1a96c:	str	r1, [sp]
   1a970:	mov	r2, #0
   1a974:	mov	r3, #0
   1a978:	bl	11808 <lseek64@plt>
   1a97c:	and	r0, r0, r1
   1a980:	cmn	r0, #1
   1a984:	beq	1a9c4 <__assert_fail@plt+0x8f4c>
   1a988:	mov	r0, r4
   1a98c:	bl	1a9d4 <__assert_fail@plt+0x8f5c>
   1a990:	cmp	r0, #0
   1a994:	beq	1a9c4 <__assert_fail@plt+0x8f4c>
   1a998:	bl	11910 <__errno_location@plt>
   1a99c:	ldr	r5, [r0]
   1a9a0:	mov	r0, r4
   1a9a4:	bl	11994 <fclose@plt>
   1a9a8:	cmp	r5, #0
   1a9ac:	beq	1a9bc <__assert_fail@plt+0x8f44>
   1a9b0:	bl	11910 <__errno_location@plt>
   1a9b4:	str	r5, [r0]
   1a9b8:	mvn	r0, #0
   1a9bc:	sub	sp, fp, #8
   1a9c0:	pop	{r4, r5, fp, pc}
   1a9c4:	mov	r0, r4
   1a9c8:	sub	sp, fp, #8
   1a9cc:	pop	{r4, r5, fp, lr}
   1a9d0:	b	11994 <fclose@plt>
   1a9d4:	push	{r4, sl, fp, lr}
   1a9d8:	add	fp, sp, #8
   1a9dc:	mov	r4, r0
   1a9e0:	cmp	r0, #0
   1a9e4:	beq	1a9fc <__assert_fail@plt+0x8f84>
   1a9e8:	mov	r0, r4
   1a9ec:	bl	11880 <__freading@plt>
   1a9f0:	cmp	r0, #0
   1a9f4:	movne	r0, r4
   1a9f8:	blne	1aa08 <__assert_fail@plt+0x8f90>
   1a9fc:	mov	r0, r4
   1aa00:	pop	{r4, sl, fp, lr}
   1aa04:	b	116b8 <fflush@plt>
   1aa08:	ldrb	r1, [r0, #1]
   1aa0c:	tst	r1, #1
   1aa10:	bxeq	lr
   1aa14:	push	{fp, lr}
   1aa18:	mov	fp, sp
   1aa1c:	sub	sp, sp, #8
   1aa20:	mov	r1, #1
   1aa24:	str	r1, [sp]
   1aa28:	mov	r2, #0
   1aa2c:	mov	r3, #0
   1aa30:	bl	1aa3c <__assert_fail@plt+0x8fc4>
   1aa34:	mov	sp, fp
   1aa38:	pop	{fp, pc}
   1aa3c:	push	{r4, r5, r6, r7, fp, lr}
   1aa40:	add	fp, sp, #16
   1aa44:	sub	sp, sp, #8
   1aa48:	mov	r5, r3
   1aa4c:	mov	r6, r2
   1aa50:	mov	r4, r0
   1aa54:	ldr	r0, [r0, #4]
   1aa58:	ldr	r1, [r4, #8]
   1aa5c:	cmp	r1, r0
   1aa60:	bne	1aa7c <__assert_fail@plt+0x9004>
   1aa64:	ldrd	r0, [r4, #16]
   1aa68:	cmp	r1, r0
   1aa6c:	bne	1aa7c <__assert_fail@plt+0x9004>
   1aa70:	ldr	r0, [r4, #36]	; 0x24
   1aa74:	cmp	r0, #0
   1aa78:	beq	1aa94 <__assert_fail@plt+0x901c>
   1aa7c:	mov	r0, r4
   1aa80:	mov	r2, r6
   1aa84:	mov	r3, r5
   1aa88:	sub	sp, fp, #16
   1aa8c:	pop	{r4, r5, r6, r7, fp, lr}
   1aa90:	b	119ac <fseeko64@plt>
   1aa94:	ldr	r7, [fp, #8]
   1aa98:	mov	r0, r4
   1aa9c:	bl	11970 <fileno@plt>
   1aaa0:	str	r7, [sp]
   1aaa4:	mov	r2, r6
   1aaa8:	mov	r3, r5
   1aaac:	bl	11808 <lseek64@plt>
   1aab0:	and	r2, r0, r1
   1aab4:	cmn	r2, #1
   1aab8:	mvneq	r0, #0
   1aabc:	subeq	sp, fp, #16
   1aac0:	popeq	{r4, r5, r6, r7, fp, pc}
   1aac4:	strd	r0, [r4, #80]	; 0x50
   1aac8:	ldr	r0, [r4]
   1aacc:	bic	r0, r0, #16
   1aad0:	str	r0, [r4]
   1aad4:	mov	r0, #0
   1aad8:	sub	sp, fp, #16
   1aadc:	pop	{r4, r5, r6, r7, fp, pc}
   1aae0:	push	{fp, lr}
   1aae4:	mov	fp, sp
   1aae8:	bl	11910 <__errno_location@plt>
   1aaec:	mov	r1, #12
   1aaf0:	str	r1, [r0]
   1aaf4:	mov	r0, #0
   1aaf8:	pop	{fp, pc}
   1aafc:	b	1a4a8 <__assert_fail@plt+0x8a30>
   1ab00:	cmp	r1, #0
   1ab04:	orreq	r1, r1, #1
   1ab08:	b	1a4d8 <__assert_fail@plt+0x8a60>
   1ab0c:	b	1a454 <__assert_fail@plt+0x89dc>
   1ab10:	clz	r3, r2
   1ab14:	lsr	ip, r3, #5
   1ab18:	clz	r3, r1
   1ab1c:	lsr	r3, r3, #5
   1ab20:	orrs	r3, r3, ip
   1ab24:	movwne	r1, #1
   1ab28:	movwne	r2, #1
   1ab2c:	b	1b99c <__assert_fail@plt+0x9f24>
   1ab30:	push	{fp, lr}
   1ab34:	mov	fp, sp
   1ab38:	mov	r0, #14
   1ab3c:	bl	119f4 <nl_langinfo@plt>
   1ab40:	movw	r1, #50569	; 0xc589
   1ab44:	movt	r1, #1
   1ab48:	cmp	r0, #0
   1ab4c:	movne	r1, r0
   1ab50:	ldrb	r2, [r1]
   1ab54:	movw	r0, #154	; 0x9a
   1ab58:	movt	r0, #2
   1ab5c:	cmp	r2, #0
   1ab60:	movne	r0, r1
   1ab64:	pop	{fp, pc}
   1ab68:	push	{r4, r5, r6, sl, fp, lr}
   1ab6c:	add	fp, sp, #16
   1ab70:	mov	r4, r0
   1ab74:	ldrb	r0, [r0, #16]
   1ab78:	cmp	r0, #0
   1ab7c:	popne	{r4, r5, r6, sl, fp, pc}
   1ab80:	ldrb	r0, [r4, #4]
   1ab84:	cmp	r0, #0
   1ab88:	bne	1abd4 <__assert_fail@plt+0x915c>
   1ab8c:	ldr	r0, [r4, #20]
   1ab90:	ldrb	r0, [r0]
   1ab94:	bl	1c134 <__assert_fail@plt+0xa6bc>
   1ab98:	cmp	r0, #0
   1ab9c:	beq	1abbc <__assert_fail@plt+0x9144>
   1aba0:	mov	r0, #1
   1aba4:	str	r0, [r4, #24]
   1aba8:	ldr	r1, [r4, #20]
   1abac:	ldrb	r1, [r1]
   1abb0:	strb	r0, [r4, #28]
   1abb4:	str	r1, [r4, #32]
   1abb8:	b	1ac7c <__assert_fail@plt+0x9204>
   1abbc:	add	r0, r4, #8
   1abc0:	bl	11730 <mbsinit@plt>
   1abc4:	cmp	r0, #0
   1abc8:	beq	1ac88 <__assert_fail@plt+0x9210>
   1abcc:	mov	r0, #1
   1abd0:	strb	r0, [r4, #4]
   1abd4:	ldr	r0, [r4]
   1abd8:	ldr	r1, [r4, #20]
   1abdc:	add	r6, r4, #32
   1abe0:	add	r5, r4, #8
   1abe4:	sub	r2, r0, r1
   1abe8:	mov	r0, r6
   1abec:	mov	r3, r5
   1abf0:	bl	1ad50 <__assert_fail@plt+0x92d8>
   1abf4:	str	r0, [r4, #24]
   1abf8:	cmn	r0, #2
   1abfc:	beq	1ac64 <__assert_fail@plt+0x91ec>
   1ac00:	cmp	r0, #0
   1ac04:	beq	1ac20 <__assert_fail@plt+0x91a8>
   1ac08:	cmn	r0, #1
   1ac0c:	bne	1ac44 <__assert_fail@plt+0x91cc>
   1ac10:	mov	r0, #0
   1ac14:	strb	r0, [r4, #28]
   1ac18:	mov	r0, #1
   1ac1c:	b	1ac78 <__assert_fail@plt+0x9200>
   1ac20:	mov	r0, #1
   1ac24:	str	r0, [r4, #24]
   1ac28:	ldr	r0, [r4, #20]
   1ac2c:	ldrb	r0, [r0]
   1ac30:	cmp	r0, #0
   1ac34:	bne	1aca8 <__assert_fail@plt+0x9230>
   1ac38:	ldr	r0, [r6]
   1ac3c:	cmp	r0, #0
   1ac40:	bne	1acc8 <__assert_fail@plt+0x9250>
   1ac44:	mov	r0, #1
   1ac48:	strb	r0, [r4, #28]
   1ac4c:	mov	r0, r5
   1ac50:	bl	11730 <mbsinit@plt>
   1ac54:	cmp	r0, #0
   1ac58:	movne	r0, #0
   1ac5c:	strbne	r0, [r4, #4]
   1ac60:	b	1ac7c <__assert_fail@plt+0x9204>
   1ac64:	mov	r0, #0
   1ac68:	strb	r0, [r4, #28]
   1ac6c:	ldr	r0, [r4]
   1ac70:	ldr	r1, [r4, #20]
   1ac74:	sub	r0, r0, r1
   1ac78:	str	r0, [r4, #24]
   1ac7c:	mov	r0, #1
   1ac80:	strb	r0, [r4, #16]
   1ac84:	pop	{r4, r5, r6, sl, fp, pc}
   1ac88:	movw	r0, #64502	; 0xfbf6
   1ac8c:	movt	r0, #1
   1ac90:	movw	r1, #64828	; 0xfd3c
   1ac94:	movt	r1, #1
   1ac98:	movw	r3, #64843	; 0xfd4b
   1ac9c:	movt	r3, #1
   1aca0:	mov	r2, #135	; 0x87
   1aca4:	bl	11a78 <__assert_fail@plt>
   1aca8:	movw	r0, #64589	; 0xfc4d
   1acac:	movt	r0, #1
   1acb0:	movw	r1, #64828	; 0xfd3c
   1acb4:	movt	r1, #1
   1acb8:	movw	r3, #64843	; 0xfd4b
   1acbc:	movt	r3, #1
   1acc0:	mov	r2, #162	; 0xa2
   1acc4:	bl	11a78 <__assert_fail@plt>
   1acc8:	movw	r0, #64612	; 0xfc64
   1accc:	movt	r0, #1
   1acd0:	movw	r1, #64828	; 0xfd3c
   1acd4:	movt	r1, #1
   1acd8:	movw	r3, #64843	; 0xfd4b
   1acdc:	movt	r3, #1
   1ace0:	mov	r2, #163	; 0xa3
   1ace4:	bl	11a78 <__assert_fail@plt>
   1ace8:	ldr	r2, [r0]
   1acec:	ldr	r3, [r0, #20]
   1acf0:	add	r3, r3, r1
   1acf4:	str	r3, [r0, #20]
   1acf8:	add	r1, r2, r1
   1acfc:	str	r1, [r0]
   1ad00:	bx	lr
   1ad04:	ldr	r2, [r1]
   1ad08:	str	r2, [r0]
   1ad0c:	ldrb	r3, [r1, #4]
   1ad10:	strb	r3, [r0, #4]
   1ad14:	add	r2, r0, #8
   1ad18:	cmp	r3, #0
   1ad1c:	beq	1ad30 <__assert_fail@plt+0x92b8>
   1ad20:	ldr	r3, [r1, #8]
   1ad24:	ldr	ip, [r1, #12]
   1ad28:	stm	r2, {r3, ip}
   1ad2c:	b	1ad3c <__assert_fail@plt+0x92c4>
   1ad30:	mov	r3, #0
   1ad34:	str	r3, [r2]
   1ad38:	str	r3, [r2, #4]
   1ad3c:	ldrb	r2, [r1, #16]
   1ad40:	strb	r2, [r0, #16]
   1ad44:	add	r0, r0, #20
   1ad48:	add	r1, r1, #20
   1ad4c:	b	1c0e4 <__assert_fail@plt+0xa66c>
   1ad50:	push	{r4, r5, r6, r7, fp, lr}
   1ad54:	add	fp, sp, #16
   1ad58:	sub	sp, sp, #8
   1ad5c:	mov	r7, r2
   1ad60:	mov	r4, r1
   1ad64:	add	r5, sp, #4
   1ad68:	cmp	r0, #0
   1ad6c:	movne	r5, r0
   1ad70:	mov	r0, r5
   1ad74:	bl	11844 <mbrtowc@plt>
   1ad78:	mov	r6, r0
   1ad7c:	cmp	r7, #0
   1ad80:	beq	1ada4 <__assert_fail@plt+0x932c>
   1ad84:	cmn	r6, #2
   1ad88:	bcc	1ada4 <__assert_fail@plt+0x932c>
   1ad8c:	mov	r0, #0
   1ad90:	bl	1bfbc <__assert_fail@plt+0xa544>
   1ad94:	cmp	r0, #0
   1ad98:	ldrbeq	r0, [r4]
   1ad9c:	streq	r0, [r5]
   1ada0:	moveq	r6, #1
   1ada4:	mov	r0, r6
   1ada8:	sub	sp, fp, #16
   1adac:	pop	{r4, r5, r6, r7, fp, pc}
   1adb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1adb4:	add	fp, sp, #28
   1adb8:	sub	sp, sp, #300	; 0x12c
   1adbc:	mov	r5, r1
   1adc0:	mov	r6, r0
   1adc4:	bl	11820 <__ctype_get_mb_cur_max@plt>
   1adc8:	cmp	r0, #2
   1adcc:	bcc	1b15c <__assert_fail@plt+0x96e4>
   1add0:	mov	r4, #0
   1add4:	str	r4, [fp, #-80]	; 0xffffffb0
   1add8:	str	r4, [fp, #-84]	; 0xffffffac
   1addc:	strb	r4, [fp, #-88]	; 0xffffffa8
   1ade0:	str	r5, [fp, #-72]	; 0xffffffb8
   1ade4:	strb	r4, [fp, #-76]	; 0xffffffb4
   1ade8:	sub	r0, fp, #88	; 0x58
   1adec:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1adf0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1adf4:	cmp	r0, #0
   1adf8:	beq	1ae08 <__assert_fail@plt+0x9390>
   1adfc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1ae00:	cmp	r0, #0
   1ae04:	beq	1b25c <__assert_fail@plt+0x97e4>
   1ae08:	str	r4, [fp, #-136]	; 0xffffff78
   1ae0c:	str	r4, [fp, #-140]	; 0xffffff74
   1ae10:	str	r4, [sp, #136]	; 0x88
   1ae14:	str	r4, [sp, #132]	; 0x84
   1ae18:	strb	r4, [fp, #-144]	; 0xffffff70
   1ae1c:	str	r5, [fp, #-128]	; 0xffffff80
   1ae20:	strb	r4, [fp, #-132]	; 0xffffff7c
   1ae24:	str	r6, [sp, #144]	; 0x90
   1ae28:	strb	r4, [sp, #128]	; 0x80
   1ae2c:	strb	r4, [sp, #140]	; 0x8c
   1ae30:	add	r7, sp, #128	; 0x80
   1ae34:	mov	r0, r7
   1ae38:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1ae3c:	ldrb	r0, [sp, #152]	; 0x98
   1ae40:	cmp	r0, #0
   1ae44:	beq	1ae54 <__assert_fail@plt+0x93dc>
   1ae48:	ldr	r0, [sp, #156]	; 0x9c
   1ae4c:	cmp	r0, #0
   1ae50:	beq	1b268 <__assert_fail@plt+0x97f0>
   1ae54:	add	r0, sp, #16
   1ae58:	add	r0, r0, #4
   1ae5c:	str	r0, [sp, #4]
   1ae60:	mov	r0, #1
   1ae64:	str	r0, [sp, #8]
   1ae68:	mov	r8, #0
   1ae6c:	add	r0, r7, #16
   1ae70:	str	r0, [sp]
   1ae74:	mov	r0, #0
   1ae78:	str	r0, [sp, #12]
   1ae7c:	mov	sl, #0
   1ae80:	mov	r9, #0
   1ae84:	mov	r4, sl
   1ae88:	add	r0, r9, r9, lsl #2
   1ae8c:	cmp	sl, r0
   1ae90:	bcc	1af50 <__assert_fail@plt+0x94d8>
   1ae94:	ldr	r0, [sp, #8]
   1ae98:	tst	r0, #1
   1ae9c:	beq	1af50 <__assert_fail@plt+0x94d8>
   1aea0:	cmp	r9, #10
   1aea4:	bcc	1af50 <__assert_fail@plt+0x94d8>
   1aea8:	mov	sl, r7
   1aeac:	ldr	r1, [sp, #12]
   1aeb0:	subs	r0, r4, r1
   1aeb4:	beq	1aef8 <__assert_fail@plt+0x9480>
   1aeb8:	sub	r7, r1, r4
   1aebc:	sub	r0, fp, #144	; 0x90
   1aec0:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1aec4:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1aec8:	cmp	r0, #0
   1aecc:	beq	1aedc <__assert_fail@plt+0x9464>
   1aed0:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1aed4:	cmp	r0, #0
   1aed8:	beq	1aef8 <__assert_fail@plt+0x9480>
   1aedc:	strb	r8, [fp, #-132]	; 0xffffff7c
   1aee0:	ldr	r0, [fp, #-128]	; 0xffffff80
   1aee4:	ldr	r1, [fp, #-124]	; 0xffffff84
   1aee8:	add	r0, r0, r1
   1aeec:	str	r0, [fp, #-128]	; 0xffffff80
   1aef0:	adds	r7, r7, #1
   1aef4:	bne	1aebc <__assert_fail@plt+0x9444>
   1aef8:	sub	r0, fp, #144	; 0x90
   1aefc:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1af00:	ldrb	r0, [fp, #-120]	; 0xffffff88
   1af04:	cmp	r0, #0
   1af08:	beq	1af48 <__assert_fail@plt+0x94d0>
   1af0c:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1af10:	cmp	r0, #0
   1af14:	str	r4, [sp, #12]
   1af18:	mov	r7, sl
   1af1c:	bne	1af50 <__assert_fail@plt+0x94d8>
   1af20:	mov	r0, r6
   1af24:	mov	r1, r5
   1af28:	add	r2, sp, #72	; 0x48
   1af2c:	bl	1b290 <__assert_fail@plt+0x9818>
   1af30:	mov	r1, #0
   1af34:	str	r1, [sp, #8]
   1af38:	cmp	r0, #0
   1af3c:	str	r4, [sp, #12]
   1af40:	beq	1af50 <__assert_fail@plt+0x94d8>
   1af44:	b	1b284 <__assert_fail@plt+0x980c>
   1af48:	str	r4, [sp, #12]
   1af4c:	mov	r7, sl
   1af50:	add	sl, r4, #1
   1af54:	ldrb	r0, [sp, #152]	; 0x98
   1af58:	cmp	r0, #0
   1af5c:	ldrbne	r0, [fp, #-64]	; 0xffffffc0
   1af60:	cmpne	r0, #0
   1af64:	bne	1af90 <__assert_fail@plt+0x9518>
   1af68:	ldr	r2, [sp, #148]	; 0x94
   1af6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1af70:	cmp	r2, r0
   1af74:	bne	1b11c <__assert_fail@plt+0x96a4>
   1af78:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1af7c:	ldr	r0, [sp, #144]	; 0x90
   1af80:	bl	1173c <memcmp@plt>
   1af84:	cmp	r0, #0
   1af88:	bne	1b11c <__assert_fail@plt+0x96a4>
   1af8c:	b	1afa0 <__assert_fail@plt+0x9528>
   1af90:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1af94:	ldr	r1, [sp, #156]	; 0x9c
   1af98:	cmp	r1, r0
   1af9c:	bne	1b11c <__assert_fail@plt+0x96a4>
   1afa0:	mov	r0, r7
   1afa4:	mov	r1, #48	; 0x30
   1afa8:	vld1.64	{d16-d17}, [r0], r1
   1afac:	ldr	r1, [sp]
   1afb0:	vld1.64	{d18-d19}, [r1]
   1afb4:	add	r3, sp, #72	; 0x48
   1afb8:	add	r1, r3, #16
   1afbc:	add	r2, r7, #32
   1afc0:	vld1.64	{d20-d21}, [r2]
   1afc4:	vldr	d22, [r0]
   1afc8:	vst1.64	{d18-d19}, [r1]
   1afcc:	add	r0, r3, #32
   1afd0:	vst1.64	{d20-d21}, [r0]
   1afd4:	mov	r0, r3
   1afd8:	mov	r1, #12
   1afdc:	vst1.64	{d16-d17}, [r0], r1
   1afe0:	strb	r8, [r0]
   1afe4:	str	r5, [sp, #32]
   1afe8:	strb	r8, [sp, #16]
   1afec:	vstr	d22, [sp, #120]	; 0x78
   1aff0:	ldr	r0, [sp, #88]	; 0x58
   1aff4:	ldr	r1, [sp, #92]	; 0x5c
   1aff8:	add	r0, r0, r1
   1affc:	str	r0, [sp, #88]	; 0x58
   1b000:	ldr	r0, [sp, #4]
   1b004:	str	r8, [r0]
   1b008:	str	r8, [r0, #4]
   1b00c:	strb	r8, [sp, #28]
   1b010:	add	r0, sp, #16
   1b014:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b018:	ldrb	r0, [sp, #40]	; 0x28
   1b01c:	cmp	r0, #0
   1b020:	beq	1b030 <__assert_fail@plt+0x95b8>
   1b024:	ldr	r0, [sp, #44]	; 0x2c
   1b028:	cmp	r0, #0
   1b02c:	beq	1b28c <__assert_fail@plt+0x9814>
   1b030:	strb	r8, [sp, #28]
   1b034:	ldr	r0, [sp, #32]
   1b038:	ldr	r1, [sp, #36]	; 0x24
   1b03c:	add	r0, r0, r1
   1b040:	str	r0, [sp, #32]
   1b044:	add	r0, sp, #16
   1b048:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b04c:	ldrb	r0, [sp, #40]	; 0x28
   1b050:	cmp	r0, #0
   1b054:	beq	1b064 <__assert_fail@plt+0x95ec>
   1b058:	ldr	r0, [sp, #44]	; 0x2c
   1b05c:	cmp	r0, #0
   1b060:	beq	1b274 <__assert_fail@plt+0x97fc>
   1b064:	add	sl, r4, #2
   1b068:	add	r0, sp, #72	; 0x48
   1b06c:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b070:	ldr	r0, [sp, #100]	; 0x64
   1b074:	ldrb	r1, [sp, #96]	; 0x60
   1b078:	cmp	r0, #0
   1b07c:	bne	1b088 <__assert_fail@plt+0x9610>
   1b080:	cmp	r1, #0
   1b084:	bne	1b264 <__assert_fail@plt+0x97ec>
   1b088:	cmp	r1, #0
   1b08c:	ldrbne	r1, [sp, #40]	; 0x28
   1b090:	cmpne	r1, #0
   1b094:	bne	1b0c0 <__assert_fail@plt+0x9648>
   1b098:	ldr	r2, [sp, #92]	; 0x5c
   1b09c:	ldr	r0, [sp, #36]	; 0x24
   1b0a0:	cmp	r2, r0
   1b0a4:	bne	1b11c <__assert_fail@plt+0x96a4>
   1b0a8:	ldr	r1, [sp, #32]
   1b0ac:	ldr	r0, [sp, #88]	; 0x58
   1b0b0:	bl	1173c <memcmp@plt>
   1b0b4:	cmp	r0, #0
   1b0b8:	beq	1b0cc <__assert_fail@plt+0x9654>
   1b0bc:	b	1b11c <__assert_fail@plt+0x96a4>
   1b0c0:	ldr	r1, [sp, #44]	; 0x2c
   1b0c4:	cmp	r0, r1
   1b0c8:	bne	1b11c <__assert_fail@plt+0x96a4>
   1b0cc:	strb	r8, [sp, #84]	; 0x54
   1b0d0:	strb	r8, [sp, #28]
   1b0d4:	ldr	r0, [sp, #88]	; 0x58
   1b0d8:	ldr	r1, [sp, #92]	; 0x5c
   1b0dc:	add	r0, r0, r1
   1b0e0:	str	r0, [sp, #88]	; 0x58
   1b0e4:	ldr	r0, [sp, #32]
   1b0e8:	ldr	r1, [sp, #36]	; 0x24
   1b0ec:	add	r0, r0, r1
   1b0f0:	str	r0, [sp, #32]
   1b0f4:	add	r0, sp, #16
   1b0f8:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b0fc:	add	sl, sl, #1
   1b100:	ldrb	r0, [sp, #40]	; 0x28
   1b104:	cmp	r0, #0
   1b108:	beq	1b068 <__assert_fail@plt+0x95f0>
   1b10c:	ldr	r0, [sp, #44]	; 0x2c
   1b110:	cmp	r0, #0
   1b114:	bne	1b068 <__assert_fail@plt+0x95f0>
   1b118:	b	1b274 <__assert_fail@plt+0x97fc>
   1b11c:	add	r9, r9, #1
   1b120:	mov	r4, #0
   1b124:	strb	r4, [sp, #140]	; 0x8c
   1b128:	ldr	r0, [sp, #144]	; 0x90
   1b12c:	ldr	r1, [sp, #148]	; 0x94
   1b130:	add	r0, r0, r1
   1b134:	str	r0, [sp, #144]	; 0x90
   1b138:	mov	r0, r7
   1b13c:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b140:	ldrb	r0, [sp, #152]	; 0x98
   1b144:	cmp	r0, #0
   1b148:	beq	1ae84 <__assert_fail@plt+0x940c>
   1b14c:	ldr	r0, [sp, #156]	; 0x9c
   1b150:	cmp	r0, #0
   1b154:	bne	1ae84 <__assert_fail@plt+0x940c>
   1b158:	b	1b268 <__assert_fail@plt+0x97f0>
   1b15c:	ldrb	r9, [r5]
   1b160:	cmp	r9, #0
   1b164:	beq	1b25c <__assert_fail@plt+0x97e4>
   1b168:	ldrb	r0, [r6]
   1b16c:	cmp	r0, #0
   1b170:	beq	1b264 <__assert_fail@plt+0x97ec>
   1b174:	mov	r3, #1
   1b178:	mov	ip, #0
   1b17c:	mov	sl, r5
   1b180:	mov	r7, #0
   1b184:	mov	r8, #0
   1b188:	add	r0, r8, r8, lsl #2
   1b18c:	cmp	r7, r0
   1b190:	bcc	1b204 <__assert_fail@plt+0x978c>
   1b194:	tst	r3, #1
   1b198:	beq	1b204 <__assert_fail@plt+0x978c>
   1b19c:	cmp	r8, #10
   1b1a0:	bcc	1b204 <__assert_fail@plt+0x978c>
   1b1a4:	cmp	sl, #0
   1b1a8:	beq	1b1d0 <__assert_fail@plt+0x9758>
   1b1ac:	sub	r1, r7, ip
   1b1b0:	mov	r0, sl
   1b1b4:	mov	r4, r3
   1b1b8:	bl	119a0 <strnlen@plt>
   1b1bc:	mov	r3, r4
   1b1c0:	ldrb	r0, [sl, r0]!
   1b1c4:	cmp	r0, #0
   1b1c8:	mov	ip, r7
   1b1cc:	bne	1b204 <__assert_fail@plt+0x978c>
   1b1d0:	mov	r0, r5
   1b1d4:	mov	r4, ip
   1b1d8:	bl	118e0 <strlen@plt>
   1b1dc:	mov	r2, r0
   1b1e0:	mov	r0, r6
   1b1e4:	mov	r1, r5
   1b1e8:	sub	r3, fp, #88	; 0x58
   1b1ec:	bl	1b664 <__assert_fail@plt+0x9bec>
   1b1f0:	mov	ip, r4
   1b1f4:	mov	r3, #0
   1b1f8:	cmp	r0, #0
   1b1fc:	mov	sl, #0
   1b200:	bne	1b27c <__assert_fail@plt+0x9804>
   1b204:	ldrb	r0, [r6]
   1b208:	cmp	r0, r9
   1b20c:	bne	1b240 <__assert_fail@plt+0x97c8>
   1b210:	mov	r0, #1
   1b214:	ldrb	r1, [r5, r0]
   1b218:	cmp	r1, #0
   1b21c:	beq	1b25c <__assert_fail@plt+0x97e4>
   1b220:	ldrb	r2, [r6, r0]
   1b224:	cmp	r2, #0
   1b228:	beq	1b264 <__assert_fail@plt+0x97ec>
   1b22c:	add	r0, r0, #1
   1b230:	cmp	r2, r1
   1b234:	beq	1b214 <__assert_fail@plt+0x979c>
   1b238:	add	r7, r7, r0
   1b23c:	b	1b244 <__assert_fail@plt+0x97cc>
   1b240:	add	r7, r7, #1
   1b244:	add	r8, r8, #1
   1b248:	ldrb	r0, [r6, #1]!
   1b24c:	mov	r4, #0
   1b250:	cmp	r0, #0
   1b254:	bne	1b188 <__assert_fail@plt+0x9710>
   1b258:	b	1b268 <__assert_fail@plt+0x97f0>
   1b25c:	mov	r4, r6
   1b260:	b	1b268 <__assert_fail@plt+0x97f0>
   1b264:	mov	r4, #0
   1b268:	mov	r0, r4
   1b26c:	sub	sp, fp, #28
   1b270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b274:	ldr	r4, [sp, #144]	; 0x90
   1b278:	b	1b268 <__assert_fail@plt+0x97f0>
   1b27c:	ldr	r4, [fp, #-88]	; 0xffffffa8
   1b280:	b	1b268 <__assert_fail@plt+0x97f0>
   1b284:	ldr	r4, [sp, #72]	; 0x48
   1b288:	b	1b268 <__assert_fail@plt+0x97f0>
   1b28c:	bl	11a60 <abort@plt>
   1b290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b294:	add	fp, sp, #28
   1b298:	sub	sp, sp, #132	; 0x84
   1b29c:	mov	r5, r2
   1b2a0:	mov	r4, r1
   1b2a4:	mov	r8, r0
   1b2a8:	mov	r0, r1
   1b2ac:	bl	1c15c <__assert_fail@plt+0xa6e4>
   1b2b0:	mov	r6, r0
   1b2b4:	mov	r7, #0
   1b2b8:	movw	r0, #47662	; 0xba2e
   1b2bc:	movt	r0, #744	; 0x2e8
   1b2c0:	cmp	r6, r0
   1b2c4:	bhi	1b654 <__assert_fail@plt+0x9bdc>
   1b2c8:	mov	r0, #44	; 0x2c
   1b2cc:	mul	r0, r6, r0
   1b2d0:	cmp	r0, #4016	; 0xfb0
   1b2d4:	bhi	1b2fc <__assert_fail@plt+0x9884>
   1b2d8:	add	r0, r0, #22
   1b2dc:	bic	r0, r0, #7
   1b2e0:	sub	r0, sp, r0
   1b2e4:	add	r1, r0, #15
   1b2e8:	bic	sl, r1, #15
   1b2ec:	mov	sp, r0
   1b2f0:	cmp	sl, #0
   1b2f4:	bne	1b30c <__assert_fail@plt+0x9894>
   1b2f8:	b	1b654 <__assert_fail@plt+0x9bdc>
   1b2fc:	bl	1c020 <__assert_fail@plt+0xa5a8>
   1b300:	mov	sl, r0
   1b304:	cmp	sl, #0
   1b308:	beq	1b654 <__assert_fail@plt+0x9bdc>
   1b30c:	str	r5, [fp, #-156]	; 0xffffff64
   1b310:	mov	r9, #0
   1b314:	str	r9, [fp, #-80]	; 0xffffffb0
   1b318:	str	r9, [fp, #-84]	; 0xffffffac
   1b31c:	strb	r9, [fp, #-88]	; 0xffffffa8
   1b320:	str	r4, [fp, #-72]	; 0xffffffb8
   1b324:	strb	r9, [fp, #-76]	; 0xffffffb4
   1b328:	sub	r4, fp, #88	; 0x58
   1b32c:	mov	r0, r4
   1b330:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b334:	add	r0, r6, r6, lsl #2
   1b338:	add	r0, sl, r0, lsl #3
   1b33c:	str	r0, [fp, #-148]	; 0xffffff6c
   1b340:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b344:	cmp	r0, #0
   1b348:	beq	1b358 <__assert_fail@plt+0x98e0>
   1b34c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b350:	cmp	r0, #0
   1b354:	beq	1b3a8 <__assert_fail@plt+0x9930>
   1b358:	add	r4, r4, #16
   1b35c:	sub	r7, fp, #88	; 0x58
   1b360:	mov	r5, sl
   1b364:	mov	r0, r5
   1b368:	mov	r1, r4
   1b36c:	bl	1c0e4 <__assert_fail@plt+0xa66c>
   1b370:	strb	r9, [fp, #-76]	; 0xffffffb4
   1b374:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b378:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b37c:	add	r0, r0, r1
   1b380:	str	r0, [fp, #-72]	; 0xffffffb8
   1b384:	mov	r0, r7
   1b388:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b38c:	add	r5, r5, #40	; 0x28
   1b390:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b394:	ldrb	r1, [fp, #-64]	; 0xffffffc0
   1b398:	cmp	r1, #0
   1b39c:	beq	1b364 <__assert_fail@plt+0x98ec>
   1b3a0:	cmp	r0, #0
   1b3a4:	bne	1b364 <__assert_fail@plt+0x98ec>
   1b3a8:	str	r8, [fp, #-160]	; 0xffffff60
   1b3ac:	mov	r0, #1
   1b3b0:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b3b4:	str	r0, [r3, #4]
   1b3b8:	str	r6, [fp, #-152]	; 0xffffff68
   1b3bc:	cmp	r6, #3
   1b3c0:	bcc	1b488 <__assert_fail@plt+0x9a10>
   1b3c4:	mov	r4, #2
   1b3c8:	mov	r5, #0
   1b3cc:	add	r0, r4, r4, lsl #2
   1b3d0:	add	r0, sl, r0, lsl #3
   1b3d4:	sub	r7, r0, #28
   1b3d8:	sub	r9, r0, #40	; 0x28
   1b3dc:	sub	r6, r0, #36	; 0x24
   1b3e0:	ldrb	r8, [r0, #-32]	; 0xffffffe0
   1b3e4:	cmp	r8, #0
   1b3e8:	bne	1b400 <__assert_fail@plt+0x9988>
   1b3ec:	b	1b428 <__assert_fail@plt+0x99b0>
   1b3f0:	ldr	r0, [r3, r5, lsl #2]
   1b3f4:	sub	r5, r5, r0
   1b3f8:	cmp	r8, #0
   1b3fc:	beq	1b428 <__assert_fail@plt+0x99b0>
   1b400:	add	r0, r5, r5, lsl #2
   1b404:	add	r0, sl, r0, lsl #3
   1b408:	ldrb	r1, [r0, #8]
   1b40c:	cmp	r1, #0
   1b410:	beq	1b428 <__assert_fail@plt+0x99b0>
   1b414:	ldr	r0, [r0, #12]
   1b418:	ldr	r1, [r7]
   1b41c:	cmp	r1, r0
   1b420:	bne	1b458 <__assert_fail@plt+0x99e0>
   1b424:	b	1b46c <__assert_fail@plt+0x99f4>
   1b428:	add	r0, r5, r5, lsl #2
   1b42c:	add	r1, sl, r0, lsl #3
   1b430:	ldr	r1, [r1, #4]
   1b434:	ldr	r2, [r6]
   1b438:	cmp	r2, r1
   1b43c:	bne	1b458 <__assert_fail@plt+0x99e0>
   1b440:	ldr	r1, [sl, r0, lsl #3]
   1b444:	ldr	r0, [r9]
   1b448:	bl	1173c <memcmp@plt>
   1b44c:	ldr	r3, [fp, #-148]	; 0xffffff6c
   1b450:	cmp	r0, #0
   1b454:	beq	1b46c <__assert_fail@plt+0x99f4>
   1b458:	cmp	r5, #0
   1b45c:	bne	1b3f0 <__assert_fail@plt+0x9978>
   1b460:	mov	r5, #0
   1b464:	mov	r0, r4
   1b468:	b	1b474 <__assert_fail@plt+0x99fc>
   1b46c:	add	r5, r5, #1
   1b470:	sub	r0, r4, r5
   1b474:	str	r0, [r3, r4, lsl #2]
   1b478:	add	r4, r4, #1
   1b47c:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b480:	cmp	r4, r0
   1b484:	bne	1b3cc <__assert_fail@plt+0x9954>
   1b488:	mov	r5, #0
   1b48c:	ldr	r8, [fp, #-156]	; 0xffffff64
   1b490:	str	r5, [r8]
   1b494:	str	r5, [fp, #-80]	; 0xffffffb0
   1b498:	str	r5, [fp, #-84]	; 0xffffffac
   1b49c:	str	r5, [fp, #-136]	; 0xffffff78
   1b4a0:	str	r5, [fp, #-140]	; 0xffffff74
   1b4a4:	strb	r5, [fp, #-88]	; 0xffffffa8
   1b4a8:	ldr	r0, [fp, #-160]	; 0xffffff60
   1b4ac:	str	r0, [fp, #-72]	; 0xffffffb8
   1b4b0:	strb	r5, [fp, #-76]	; 0xffffffb4
   1b4b4:	str	r0, [fp, #-128]	; 0xffffff80
   1b4b8:	strb	r5, [fp, #-144]	; 0xffffff70
   1b4bc:	strb	r5, [fp, #-132]	; 0xffffff7c
   1b4c0:	sub	r0, fp, #144	; 0x90
   1b4c4:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b4c8:	ldrb	r1, [fp, #-120]	; 0xffffff88
   1b4cc:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b4d0:	cmp	r0, #0
   1b4d4:	bne	1b4e0 <__assert_fail@plt+0x9a68>
   1b4d8:	cmp	r1, #0
   1b4dc:	bne	1b648 <__assert_fail@plt+0x9bd0>
   1b4e0:	clz	r1, r1
   1b4e4:	lsr	r1, r1, #5
   1b4e8:	sub	r9, fp, #144	; 0x90
   1b4ec:	sub	r4, fp, #88	; 0x58
   1b4f0:	mov	r7, #0
   1b4f4:	add	r3, r7, r7, lsl #2
   1b4f8:	add	r2, sl, r3, lsl #3
   1b4fc:	tst	r1, #1
   1b500:	bne	1b520 <__assert_fail@plt+0x9aa8>
   1b504:	ldrb	r1, [r2, #8]
   1b508:	cmp	r1, #0
   1b50c:	beq	1b520 <__assert_fail@plt+0x9aa8>
   1b510:	ldr	r1, [r2, #12]
   1b514:	cmp	r1, r0
   1b518:	bne	1b544 <__assert_fail@plt+0x9acc>
   1b51c:	b	1b5a0 <__assert_fail@plt+0x9b28>
   1b520:	ldr	r2, [r2, #4]
   1b524:	ldr	r0, [fp, #-124]	; 0xffffff84
   1b528:	cmp	r2, r0
   1b52c:	bne	1b544 <__assert_fail@plt+0x9acc>
   1b530:	ldr	r0, [sl, r3, lsl #3]
   1b534:	ldr	r1, [fp, #-128]	; 0xffffff80
   1b538:	bl	1173c <memcmp@plt>
   1b53c:	cmp	r0, #0
   1b540:	beq	1b5a0 <__assert_fail@plt+0x9b28>
   1b544:	cmp	r7, #0
   1b548:	beq	1b5c8 <__assert_fail@plt+0x9b50>
   1b54c:	ldr	r0, [fp, #-148]	; 0xffffff6c
   1b550:	ldr	r6, [r0, r7, lsl #2]
   1b554:	sub	r7, r7, r6
   1b558:	cmp	r6, #0
   1b55c:	beq	1b614 <__assert_fail@plt+0x9b9c>
   1b560:	mov	r0, r4
   1b564:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b568:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b56c:	cmp	r0, #0
   1b570:	beq	1b580 <__assert_fail@plt+0x9b08>
   1b574:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b578:	cmp	r0, #0
   1b57c:	beq	1b660 <__assert_fail@plt+0x9be8>
   1b580:	strb	r5, [fp, #-76]	; 0xffffffb4
   1b584:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b588:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b58c:	add	r0, r0, r1
   1b590:	str	r0, [fp, #-72]	; 0xffffffb8
   1b594:	subs	r6, r6, #1
   1b598:	bne	1b560 <__assert_fail@plt+0x9ae8>
   1b59c:	b	1b614 <__assert_fail@plt+0x9b9c>
   1b5a0:	strb	r5, [fp, #-132]	; 0xffffff7c
   1b5a4:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b5a8:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b5ac:	add	r0, r0, r1
   1b5b0:	str	r0, [fp, #-128]	; 0xffffff80
   1b5b4:	add	r7, r7, #1
   1b5b8:	ldr	r0, [fp, #-152]	; 0xffffff68
   1b5bc:	cmp	r7, r0
   1b5c0:	bne	1b614 <__assert_fail@plt+0x9b9c>
   1b5c4:	b	1b640 <__assert_fail@plt+0x9bc8>
   1b5c8:	mov	r0, r4
   1b5cc:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b5d0:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   1b5d4:	cmp	r0, #0
   1b5d8:	beq	1b5e8 <__assert_fail@plt+0x9b70>
   1b5dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1b5e0:	cmp	r0, #0
   1b5e4:	beq	1b660 <__assert_fail@plt+0x9be8>
   1b5e8:	mov	r7, #0
   1b5ec:	strb	r7, [fp, #-76]	; 0xffffffb4
   1b5f0:	strb	r7, [fp, #-132]	; 0xffffff7c
   1b5f4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b5f8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   1b5fc:	add	r0, r0, r1
   1b600:	str	r0, [fp, #-72]	; 0xffffffb8
   1b604:	ldr	r0, [fp, #-128]	; 0xffffff80
   1b608:	ldr	r1, [fp, #-124]	; 0xffffff84
   1b60c:	add	r0, r0, r1
   1b610:	str	r0, [fp, #-128]	; 0xffffff80
   1b614:	mov	r0, r9
   1b618:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1b61c:	ldrb	r2, [fp, #-120]	; 0xffffff88
   1b620:	clz	r0, r2
   1b624:	lsr	r1, r0, #5
   1b628:	ldr	r0, [fp, #-116]	; 0xffffff8c
   1b62c:	cmp	r0, #0
   1b630:	bne	1b4f4 <__assert_fail@plt+0x9a7c>
   1b634:	cmp	r2, #0
   1b638:	beq	1b4f4 <__assert_fail@plt+0x9a7c>
   1b63c:	b	1b648 <__assert_fail@plt+0x9bd0>
   1b640:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1b644:	str	r0, [r8]
   1b648:	mov	r0, sl
   1b64c:	bl	1c090 <__assert_fail@plt+0xa618>
   1b650:	mov	r7, #1
   1b654:	mov	r0, r7
   1b658:	sub	sp, fp, #28
   1b65c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b660:	bl	11a60 <abort@plt>
   1b664:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b668:	add	fp, sp, #24
   1b66c:	mov	r4, #0
   1b670:	cmn	r2, #-536870911	; 0xe0000001
   1b674:	bhi	1b7b0 <__assert_fail@plt+0x9d38>
   1b678:	mov	r8, r3
   1b67c:	mov	r5, r2
   1b680:	mov	r6, r1
   1b684:	mov	r7, r0
   1b688:	lsl	r0, r2, #2
   1b68c:	cmp	r0, #4016	; 0xfb0
   1b690:	bhi	1b6b8 <__assert_fail@plt+0x9c40>
   1b694:	add	r0, r0, #22
   1b698:	bic	r0, r0, #7
   1b69c:	sub	r1, sp, r0
   1b6a0:	add	r0, r1, #15
   1b6a4:	bic	r0, r0, #15
   1b6a8:	mov	sp, r1
   1b6ac:	cmp	r0, #0
   1b6b0:	bne	1b6c4 <__assert_fail@plt+0x9c4c>
   1b6b4:	b	1b7b0 <__assert_fail@plt+0x9d38>
   1b6b8:	bl	1c020 <__assert_fail@plt+0xa5a8>
   1b6bc:	cmp	r0, #0
   1b6c0:	beq	1b7b0 <__assert_fail@plt+0x9d38>
   1b6c4:	mov	r1, #1
   1b6c8:	str	r1, [r0, #4]
   1b6cc:	cmp	r5, #3
   1b6d0:	bcc	1b734 <__assert_fail@plt+0x9cbc>
   1b6d4:	mov	r1, #2
   1b6d8:	mov	r2, #0
   1b6dc:	ldrb	r4, [r6, r2]
   1b6e0:	add	r3, r6, r1
   1b6e4:	ldrb	r3, [r3, #-1]
   1b6e8:	cmp	r3, r4
   1b6ec:	bne	1b708 <__assert_fail@plt+0x9c90>
   1b6f0:	b	1b71c <__assert_fail@plt+0x9ca4>
   1b6f4:	ldr	r4, [r0, r2, lsl #2]
   1b6f8:	sub	r2, r2, r4
   1b6fc:	ldrb	r4, [r6, r2]
   1b700:	cmp	r3, r4
   1b704:	beq	1b71c <__assert_fail@plt+0x9ca4>
   1b708:	cmp	r2, #0
   1b70c:	bne	1b6f4 <__assert_fail@plt+0x9c7c>
   1b710:	mov	r2, #0
   1b714:	mov	r3, r1
   1b718:	b	1b724 <__assert_fail@plt+0x9cac>
   1b71c:	add	r2, r2, #1
   1b720:	sub	r3, r1, r2
   1b724:	str	r3, [r0, r1, lsl #2]
   1b728:	add	r1, r1, #1
   1b72c:	cmp	r1, r5
   1b730:	bne	1b6dc <__assert_fail@plt+0x9c64>
   1b734:	mov	r1, #0
   1b738:	str	r1, [r8]
   1b73c:	ldrb	r3, [r7]
   1b740:	cmp	r3, #0
   1b744:	beq	1b7a8 <__assert_fail@plt+0x9d30>
   1b748:	mov	r2, r7
   1b74c:	ldrb	r4, [r6, r1]
   1b750:	uxtb	r3, r3
   1b754:	cmp	r4, r3
   1b758:	bne	1b770 <__assert_fail@plt+0x9cf8>
   1b75c:	add	r1, r1, #1
   1b760:	cmp	r1, r5
   1b764:	beq	1b7a4 <__assert_fail@plt+0x9d2c>
   1b768:	add	r7, r7, #1
   1b76c:	b	1b794 <__assert_fail@plt+0x9d1c>
   1b770:	cmp	r1, #0
   1b774:	beq	1b788 <__assert_fail@plt+0x9d10>
   1b778:	ldr	r3, [r0, r1, lsl #2]
   1b77c:	sub	r1, r1, r3
   1b780:	add	r2, r2, r3
   1b784:	b	1b794 <__assert_fail@plt+0x9d1c>
   1b788:	add	r7, r7, #1
   1b78c:	add	r2, r2, #1
   1b790:	mov	r1, #0
   1b794:	ldrb	r3, [r7]
   1b798:	cmp	r3, #0
   1b79c:	bne	1b74c <__assert_fail@plt+0x9cd4>
   1b7a0:	b	1b7a8 <__assert_fail@plt+0x9d30>
   1b7a4:	str	r2, [r8]
   1b7a8:	bl	1c090 <__assert_fail@plt+0xa618>
   1b7ac:	mov	r4, #1
   1b7b0:	mov	r0, r4
   1b7b4:	sub	sp, fp, #24
   1b7b8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b7bc:	push	{r4, r5, r6, r7, fp, lr}
   1b7c0:	add	fp, sp, #16
   1b7c4:	mov	r4, r0
   1b7c8:	ldrb	r0, [r0, #12]
   1b7cc:	cmp	r0, #0
   1b7d0:	popne	{r4, r5, r6, r7, fp, pc}
   1b7d4:	ldrb	r0, [r4]
   1b7d8:	cmp	r0, #0
   1b7dc:	bne	1b828 <__assert_fail@plt+0x9db0>
   1b7e0:	ldr	r0, [r4, #16]
   1b7e4:	ldrb	r0, [r0]
   1b7e8:	bl	1c134 <__assert_fail@plt+0xa6bc>
   1b7ec:	cmp	r0, #0
   1b7f0:	beq	1b810 <__assert_fail@plt+0x9d98>
   1b7f4:	mov	r0, #1
   1b7f8:	str	r0, [r4, #20]
   1b7fc:	ldr	r1, [r4, #16]
   1b800:	ldrb	r1, [r1]
   1b804:	strb	r0, [r4, #24]
   1b808:	str	r1, [r4, #28]
   1b80c:	b	1b8e0 <__assert_fail@plt+0x9e68>
   1b810:	add	r0, r4, #4
   1b814:	bl	11730 <mbsinit@plt>
   1b818:	cmp	r0, #0
   1b81c:	beq	1b8ec <__assert_fail@plt+0x9e74>
   1b820:	mov	r0, #1
   1b824:	strb	r0, [r4]
   1b828:	ldr	r7, [r4, #16]
   1b82c:	bl	11820 <__ctype_get_mb_cur_max@plt>
   1b830:	mov	r1, r0
   1b834:	mov	r0, r7
   1b838:	bl	1bf8c <__assert_fail@plt+0xa514>
   1b83c:	mov	r2, r0
   1b840:	add	r6, r4, #28
   1b844:	add	r5, r4, #4
   1b848:	mov	r0, r6
   1b84c:	mov	r1, r7
   1b850:	mov	r3, r5
   1b854:	bl	1ad50 <__assert_fail@plt+0x92d8>
   1b858:	str	r0, [r4, #20]
   1b85c:	cmn	r0, #2
   1b860:	beq	1b8cc <__assert_fail@plt+0x9e54>
   1b864:	cmp	r0, #0
   1b868:	beq	1b888 <__assert_fail@plt+0x9e10>
   1b86c:	cmn	r0, #1
   1b870:	bne	1b8ac <__assert_fail@plt+0x9e34>
   1b874:	mov	r0, #0
   1b878:	strb	r0, [r4, #24]
   1b87c:	mov	r0, #1
   1b880:	str	r0, [r4, #20]
   1b884:	b	1b8e0 <__assert_fail@plt+0x9e68>
   1b888:	mov	r0, #1
   1b88c:	str	r0, [r4, #20]
   1b890:	ldr	r0, [r4, #16]
   1b894:	ldrb	r0, [r0]
   1b898:	cmp	r0, #0
   1b89c:	bne	1b90c <__assert_fail@plt+0x9e94>
   1b8a0:	ldr	r0, [r6]
   1b8a4:	cmp	r0, #0
   1b8a8:	bne	1b92c <__assert_fail@plt+0x9eb4>
   1b8ac:	mov	r0, #1
   1b8b0:	strb	r0, [r4, #24]
   1b8b4:	mov	r0, r5
   1b8b8:	bl	11730 <mbsinit@plt>
   1b8bc:	cmp	r0, #0
   1b8c0:	movne	r0, #0
   1b8c4:	strbne	r0, [r4]
   1b8c8:	b	1b8e0 <__assert_fail@plt+0x9e68>
   1b8cc:	ldr	r0, [r4, #16]
   1b8d0:	bl	118e0 <strlen@plt>
   1b8d4:	str	r0, [r4, #20]
   1b8d8:	mov	r0, #0
   1b8dc:	strb	r0, [r4, #24]
   1b8e0:	mov	r0, #1
   1b8e4:	strb	r0, [r4, #12]
   1b8e8:	pop	{r4, r5, r6, r7, fp, pc}
   1b8ec:	movw	r0, #64502	; 0xfbf6
   1b8f0:	movt	r0, #1
   1b8f4:	movw	r1, #64525	; 0xfc0d
   1b8f8:	movt	r1, #1
   1b8fc:	movw	r3, #64541	; 0xfc1d
   1b900:	movt	r3, #1
   1b904:	mov	r2, #143	; 0x8f
   1b908:	bl	11a78 <__assert_fail@plt>
   1b90c:	movw	r0, #64589	; 0xfc4d
   1b910:	movt	r0, #1
   1b914:	movw	r1, #64525	; 0xfc0d
   1b918:	movt	r1, #1
   1b91c:	movw	r3, #64541	; 0xfc1d
   1b920:	movt	r3, #1
   1b924:	mov	r2, #171	; 0xab
   1b928:	bl	11a78 <__assert_fail@plt>
   1b92c:	movw	r0, #64612	; 0xfc64
   1b930:	movt	r0, #1
   1b934:	movw	r1, #64525	; 0xfc0d
   1b938:	movt	r1, #1
   1b93c:	movw	r3, #64541	; 0xfc1d
   1b940:	movt	r3, #1
   1b944:	mov	r2, #172	; 0xac
   1b948:	bl	11a78 <__assert_fail@plt>
   1b94c:	ldr	r2, [r0, #16]
   1b950:	add	r1, r2, r1
   1b954:	str	r1, [r0, #16]
   1b958:	bx	lr
   1b95c:	ldrb	r3, [r1]
   1b960:	mov	r2, r0
   1b964:	strb	r3, [r2], #4
   1b968:	cmp	r3, #0
   1b96c:	beq	1b97c <__assert_fail@plt+0x9f04>
   1b970:	ldmib	r1, {r3, ip}
   1b974:	stm	r2, {r3, ip}
   1b978:	b	1b988 <__assert_fail@plt+0x9f10>
   1b97c:	mov	r3, #0
   1b980:	str	r3, [r2]
   1b984:	str	r3, [r2, #4]
   1b988:	ldrb	r2, [r1, #12]
   1b98c:	strb	r2, [r0, #12]
   1b990:	add	r0, r0, #16
   1b994:	add	r1, r1, #16
   1b998:	b	1c0e4 <__assert_fail@plt+0xa66c>
   1b99c:	cmp	r2, #0
   1b9a0:	beq	1b9d0 <__assert_fail@plt+0x9f58>
   1b9a4:	mvn	r3, #0
   1b9a8:	udiv	r3, r3, r2
   1b9ac:	cmp	r3, r1
   1b9b0:	bcs	1b9d0 <__assert_fail@plt+0x9f58>
   1b9b4:	push	{fp, lr}
   1b9b8:	mov	fp, sp
   1b9bc:	bl	11910 <__errno_location@plt>
   1b9c0:	mov	r1, #12
   1b9c4:	str	r1, [r0]
   1b9c8:	mov	r0, #0
   1b9cc:	pop	{fp, pc}
   1b9d0:	mul	r1, r2, r1
   1b9d4:	b	1a4d8 <__assert_fail@plt+0x8a60>
   1b9d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b9dc:	add	fp, sp, #28
   1b9e0:	sub	sp, sp, #44	; 0x2c
   1b9e4:	sub	sp, sp, #4096	; 0x1000
   1b9e8:	str	r3, [sp, #16]
   1b9ec:	mov	r4, r1
   1b9f0:	mov	r6, r0
   1b9f4:	mov	r5, #0
   1b9f8:	str	r5, [sp]
   1b9fc:	str	r2, [sp, #20]
   1ba00:	mov	r0, r2
   1ba04:	mov	r1, #0
   1ba08:	mov	r2, #0
   1ba0c:	mov	r3, #0
   1ba10:	bl	116a0 <iconv@plt>
   1ba14:	str	r6, [sp, #8]
   1ba18:	str	r6, [sp, #36]	; 0x24
   1ba1c:	str	r4, [sp, #32]
   1ba20:	str	r4, [sp, #12]
   1ba24:	cmp	r4, #0
   1ba28:	beq	1ba98 <__assert_fail@plt+0xa020>
   1ba2c:	mov	r5, #0
   1ba30:	add	r4, sp, #40	; 0x28
   1ba34:	mov	r8, #4096	; 0x1000
   1ba38:	add	sl, sp, #24
   1ba3c:	add	r9, sp, #36	; 0x24
   1ba40:	add	r7, sp, #32
   1ba44:	add	r6, sp, #28
   1ba48:	str	r4, [sp, #28]
   1ba4c:	str	r8, [sp, #24]
   1ba50:	str	sl, [sp]
   1ba54:	ldr	r0, [sp, #20]
   1ba58:	mov	r1, r9
   1ba5c:	mov	r2, r7
   1ba60:	mov	r3, r6
   1ba64:	bl	116a0 <iconv@plt>
   1ba68:	cmn	r0, #1
   1ba6c:	bne	1ba80 <__assert_fail@plt+0xa008>
   1ba70:	bl	11910 <__errno_location@plt>
   1ba74:	ldr	r0, [r0]
   1ba78:	cmp	r0, #7
   1ba7c:	bne	1bae8 <__assert_fail@plt+0xa070>
   1ba80:	sub	r0, r5, r4
   1ba84:	ldr	r1, [sp, #28]
   1ba88:	add	r5, r0, r1
   1ba8c:	ldr	r0, [sp, #32]
   1ba90:	cmp	r0, #0
   1ba94:	bne	1ba48 <__assert_fail@plt+0x9fd0>
   1ba98:	add	r6, sp, #40	; 0x28
   1ba9c:	str	r6, [sp, #28]
   1baa0:	mov	r0, #4096	; 0x1000
   1baa4:	str	r0, [sp, #24]
   1baa8:	add	r0, sp, #24
   1baac:	str	r0, [sp]
   1bab0:	mov	r4, #0
   1bab4:	add	r3, sp, #28
   1bab8:	ldr	r0, [sp, #20]
   1babc:	mov	r1, #0
   1bac0:	mov	r2, #0
   1bac4:	bl	116a0 <iconv@plt>
   1bac8:	cmn	r0, #1
   1bacc:	beq	1bae0 <__assert_fail@plt+0xa068>
   1bad0:	sub	r0, r5, r6
   1bad4:	ldr	r1, [sp, #28]
   1bad8:	add	r5, r0, r1
   1badc:	b	1baf4 <__assert_fail@plt+0xa07c>
   1bae0:	mov	r4, #1
   1bae4:	b	1baf4 <__assert_fail@plt+0xa07c>
   1bae8:	cmp	r0, #22
   1baec:	beq	1ba98 <__assert_fail@plt+0xa020>
   1baf0:	mov	r4, #1
   1baf4:	mvn	r9, #0
   1baf8:	cmp	r4, #0
   1bafc:	beq	1bb0c <__assert_fail@plt+0xa094>
   1bb00:	mov	r0, r9
   1bb04:	sub	sp, fp, #28
   1bb08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb0c:	ldr	r1, [fp, #8]
   1bb10:	cmp	r5, #0
   1bb14:	beq	1bc34 <__assert_fail@plt+0xa1bc>
   1bb18:	ldr	r0, [sp, #16]
   1bb1c:	ldr	r4, [r0]
   1bb20:	cmp	r4, #0
   1bb24:	beq	1bb34 <__assert_fail@plt+0xa0bc>
   1bb28:	ldr	r0, [r1]
   1bb2c:	cmp	r0, r5
   1bb30:	bcs	1bb48 <__assert_fail@plt+0xa0d0>
   1bb34:	mov	r0, r5
   1bb38:	bl	1a4a8 <__assert_fail@plt+0x8a30>
   1bb3c:	mov	r4, r0
   1bb40:	cmp	r0, #0
   1bb44:	beq	1bc40 <__assert_fail@plt+0xa1c8>
   1bb48:	mov	r0, #0
   1bb4c:	str	r0, [sp]
   1bb50:	ldr	r0, [sp, #20]
   1bb54:	mov	r1, #0
   1bb58:	mov	r2, #0
   1bb5c:	mov	r3, #0
   1bb60:	bl	116a0 <iconv@plt>
   1bb64:	ldr	r0, [sp, #8]
   1bb68:	str	r0, [sp, #40]	; 0x28
   1bb6c:	ldr	r0, [sp, #12]
   1bb70:	str	r0, [sp, #36]	; 0x24
   1bb74:	mov	sl, r4
   1bb78:	str	r4, [sp, #32]
   1bb7c:	str	r5, [sp, #28]
   1bb80:	add	r8, sp, #28
   1bb84:	add	r7, sp, #40	; 0x28
   1bb88:	add	r6, sp, #36	; 0x24
   1bb8c:	add	r4, sp, #32
   1bb90:	ldr	r0, [sp, #36]	; 0x24
   1bb94:	cmp	r0, #0
   1bb98:	beq	1bbf0 <__assert_fail@plt+0xa178>
   1bb9c:	str	r8, [sp]
   1bba0:	ldr	r0, [sp, #20]
   1bba4:	mov	r1, r7
   1bba8:	mov	r2, r6
   1bbac:	mov	r3, r4
   1bbb0:	bl	116a0 <iconv@plt>
   1bbb4:	mov	r1, #0
   1bbb8:	cmn	r0, #1
   1bbbc:	beq	1bbcc <__assert_fail@plt+0xa154>
   1bbc0:	cmp	r1, #0
   1bbc4:	beq	1bb90 <__assert_fail@plt+0xa118>
   1bbc8:	b	1bbe8 <__assert_fail@plt+0xa170>
   1bbcc:	bl	11910 <__errno_location@plt>
   1bbd0:	ldr	r0, [r0]
   1bbd4:	cmp	r0, #22
   1bbd8:	mov	r1, #6
   1bbdc:	movweq	r1, #5
   1bbe0:	cmp	r1, #0
   1bbe4:	beq	1bb90 <__assert_fail@plt+0xa118>
   1bbe8:	cmp	r1, #5
   1bbec:	bne	1bc50 <__assert_fail@plt+0xa1d8>
   1bbf0:	str	r8, [sp]
   1bbf4:	add	r3, sp, #32
   1bbf8:	ldr	r0, [sp, #20]
   1bbfc:	mov	r1, #0
   1bc00:	mov	r2, #0
   1bc04:	bl	116a0 <iconv@plt>
   1bc08:	cmn	r0, #1
   1bc0c:	beq	1bc58 <__assert_fail@plt+0xa1e0>
   1bc10:	ldr	r0, [sp, #28]
   1bc14:	cmp	r0, #0
   1bc18:	bne	1bc74 <__assert_fail@plt+0xa1fc>
   1bc1c:	ldr	r0, [sp, #16]
   1bc20:	str	sl, [r0]
   1bc24:	ldr	r0, [fp, #8]
   1bc28:	str	r5, [r0]
   1bc2c:	mov	r9, #0
   1bc30:	b	1bb00 <__assert_fail@plt+0xa088>
   1bc34:	mov	r9, #0
   1bc38:	str	r9, [r1]
   1bc3c:	b	1bb00 <__assert_fail@plt+0xa088>
   1bc40:	bl	11910 <__errno_location@plt>
   1bc44:	mov	r1, #12
   1bc48:	str	r1, [r0]
   1bc4c:	b	1bb00 <__assert_fail@plt+0xa088>
   1bc50:	cmp	r1, #6
   1bc54:	bne	1bb00 <__assert_fail@plt+0xa088>
   1bc58:	ldr	r0, [sp, #16]
   1bc5c:	ldr	r0, [r0]
   1bc60:	cmp	sl, r0
   1bc64:	beq	1bb00 <__assert_fail@plt+0xa088>
   1bc68:	mov	r0, sl
   1bc6c:	bl	17204 <__assert_fail@plt+0x578c>
   1bc70:	b	1bb00 <__assert_fail@plt+0xa088>
   1bc74:	bl	11a60 <abort@plt>
   1bc78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc7c:	add	fp, sp, #28
   1bc80:	sub	sp, sp, #20
   1bc84:	mov	r5, r1
   1bc88:	str	r0, [sp, #16]
   1bc8c:	bl	118e0 <strlen@plt>
   1bc90:	mov	r7, r0
   1bc94:	str	r0, [sp, #12]
   1bc98:	cmp	r0, #4096	; 0x1000
   1bc9c:	lslcc	r7, r0, #4
   1bca0:	add	r4, r7, #1
   1bca4:	mov	r0, r4
   1bca8:	bl	1a4a8 <__assert_fail@plt+0x8a30>
   1bcac:	cmp	r0, #0
   1bcb0:	beq	1bde8 <__assert_fail@plt+0xa370>
   1bcb4:	mov	r6, r0
   1bcb8:	mov	r0, #0
   1bcbc:	str	r0, [sp]
   1bcc0:	mov	r0, r5
   1bcc4:	mov	r1, #0
   1bcc8:	mov	r2, #0
   1bccc:	mov	r3, #0
   1bcd0:	bl	116a0 <iconv@plt>
   1bcd4:	str	r6, [sp, #8]
   1bcd8:	str	r7, [sp, #4]
   1bcdc:	add	r9, sp, #4
   1bce0:	str	r9, [sp]
   1bce4:	add	r1, sp, #16
   1bce8:	add	r2, sp, #12
   1bcec:	add	r3, sp, #8
   1bcf0:	mov	r0, r5
   1bcf4:	bl	116a0 <iconv@plt>
   1bcf8:	cmn	r0, #1
   1bcfc:	beq	1bd6c <__assert_fail@plt+0xa2f4>
   1bd00:	mov	r7, r6
   1bd04:	str	r9, [sp]
   1bd08:	add	r3, sp, #8
   1bd0c:	mov	r0, r5
   1bd10:	mov	r1, #0
   1bd14:	mov	r2, #0
   1bd18:	bl	116a0 <iconv@plt>
   1bd1c:	cmn	r0, #1
   1bd20:	beq	1bdf8 <__assert_fail@plt+0xa380>
   1bd24:	mov	r6, r7
   1bd28:	ldr	r0, [sp, #8]
   1bd2c:	add	r1, r0, #1
   1bd30:	str	r1, [sp, #8]
   1bd34:	mov	r1, #0
   1bd38:	strb	r1, [r0]
   1bd3c:	ldr	r0, [sp, #8]
   1bd40:	sub	r1, r0, r6
   1bd44:	cmp	r1, r4
   1bd48:	movcs	r0, r6
   1bd4c:	subcs	sp, fp, #28
   1bd50:	popcs	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd54:	mov	r0, r6
   1bd58:	bl	1a4d8 <__assert_fail@plt+0x8a60>
   1bd5c:	cmp	r0, #0
   1bd60:	moveq	r0, r6
   1bd64:	sub	sp, fp, #28
   1bd68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd6c:	bl	11910 <__errno_location@plt>
   1bd70:	mov	r8, r0
   1bd74:	ldr	r0, [r0]
   1bd78:	cmp	r0, #7
   1bd7c:	bne	1bea0 <__assert_fail@plt+0xa428>
   1bd80:	cmp	r4, r4, lsl #1
   1bd84:	bcs	1be74 <__assert_fail@plt+0xa3fc>
   1bd88:	ldr	sl, [sp, #8]
   1bd8c:	lsl	r4, r4, #1
   1bd90:	mov	r0, r6
   1bd94:	mov	r1, r4
   1bd98:	bl	1a4d8 <__assert_fail@plt+0x8a60>
   1bd9c:	cmp	r0, #0
   1bda0:	beq	1be74 <__assert_fail@plt+0xa3fc>
   1bda4:	mov	r7, r0
   1bda8:	sub	r0, sl, r6
   1bdac:	add	r1, r7, r0
   1bdb0:	str	r1, [sp, #8]
   1bdb4:	mvn	r0, r0
   1bdb8:	add	r0, r4, r0
   1bdbc:	str	r0, [sp, #4]
   1bdc0:	str	r9, [sp]
   1bdc4:	mov	r0, r5
   1bdc8:	add	r1, sp, #16
   1bdcc:	add	r2, sp, #12
   1bdd0:	add	r3, sp, #8
   1bdd4:	bl	116a0 <iconv@plt>
   1bdd8:	cmn	r0, #1
   1bddc:	mov	r6, r7
   1bde0:	beq	1bd6c <__assert_fail@plt+0xa2f4>
   1bde4:	b	1bd04 <__assert_fail@plt+0xa28c>
   1bde8:	bl	11910 <__errno_location@plt>
   1bdec:	mov	r1, #12
   1bdf0:	str	r1, [r0]
   1bdf4:	b	1be94 <__assert_fail@plt+0xa41c>
   1bdf8:	bl	11910 <__errno_location@plt>
   1bdfc:	mov	r8, r0
   1be00:	ldr	r0, [r8]
   1be04:	cmp	r0, #7
   1be08:	bne	1be88 <__assert_fail@plt+0xa410>
   1be0c:	cmp	r4, r4, lsl #1
   1be10:	bcs	1be80 <__assert_fail@plt+0xa408>
   1be14:	ldr	sl, [sp, #8]
   1be18:	lsl	r4, r4, #1
   1be1c:	mov	r0, r7
   1be20:	mov	r1, r4
   1be24:	bl	1a4d8 <__assert_fail@plt+0x8a60>
   1be28:	cmp	r0, #0
   1be2c:	beq	1be80 <__assert_fail@plt+0xa408>
   1be30:	mov	r6, r0
   1be34:	sub	r0, sl, r7
   1be38:	add	r1, r6, r0
   1be3c:	str	r1, [sp, #8]
   1be40:	mvn	r0, r0
   1be44:	add	r0, r4, r0
   1be48:	str	r0, [sp, #4]
   1be4c:	str	r9, [sp]
   1be50:	mov	r0, r5
   1be54:	mov	r1, #0
   1be58:	mov	r2, #0
   1be5c:	add	r3, sp, #8
   1be60:	bl	116a0 <iconv@plt>
   1be64:	cmn	r0, #1
   1be68:	mov	r7, r6
   1be6c:	beq	1be00 <__assert_fail@plt+0xa388>
   1be70:	b	1bd28 <__assert_fail@plt+0xa2b0>
   1be74:	mov	r0, #12
   1be78:	str	r0, [r8]
   1be7c:	b	1be8c <__assert_fail@plt+0xa414>
   1be80:	mov	r0, #12
   1be84:	str	r0, [r8]
   1be88:	mov	r6, r7
   1be8c:	mov	r0, r6
   1be90:	bl	17204 <__assert_fail@plt+0x578c>
   1be94:	mov	r0, #0
   1be98:	sub	sp, fp, #28
   1be9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bea0:	cmp	r0, #22
   1bea4:	beq	1bd00 <__assert_fail@plt+0xa288>
   1bea8:	b	1be8c <__assert_fail@plt+0xa414>
   1beac:	push	{r4, r5, r6, r7, fp, lr}
   1beb0:	add	fp, sp, #16
   1beb4:	mov	r5, r0
   1beb8:	ldrb	r0, [r0]
   1bebc:	cmp	r0, #0
   1bec0:	beq	1bf38 <__assert_fail@plt+0xa4c0>
   1bec4:	mov	r6, r2
   1bec8:	mov	r4, r1
   1becc:	mov	r0, r1
   1bed0:	mov	r1, r2
   1bed4:	bl	1a850 <__assert_fail@plt+0x8dd8>
   1bed8:	cmp	r0, #0
   1bedc:	beq	1bf38 <__assert_fail@plt+0xa4c0>
   1bee0:	mov	r0, r6
   1bee4:	mov	r1, r4
   1bee8:	bl	11868 <iconv_open@plt>
   1beec:	mov	r4, #0
   1bef0:	cmn	r0, #1
   1bef4:	beq	1bf4c <__assert_fail@plt+0xa4d4>
   1bef8:	mov	r6, r0
   1befc:	mov	r0, r5
   1bf00:	mov	r1, r6
   1bf04:	bl	1bc78 <__assert_fail@plt+0xa200>
   1bf08:	cmp	r0, #0
   1bf0c:	beq	1bf6c <__assert_fail@plt+0xa4f4>
   1bf10:	mov	r5, r0
   1bf14:	mov	r0, r6
   1bf18:	bl	11694 <iconv_close@plt>
   1bf1c:	cmn	r0, #1
   1bf20:	movgt	r0, r5
   1bf24:	popgt	{r4, r5, r6, r7, fp, pc}
   1bf28:	mov	r0, r5
   1bf2c:	bl	17204 <__assert_fail@plt+0x578c>
   1bf30:	mov	r0, r4
   1bf34:	pop	{r4, r5, r6, r7, fp, pc}
   1bf38:	mov	r0, r5
   1bf3c:	bl	1176c <strdup@plt>
   1bf40:	mov	r4, r0
   1bf44:	cmp	r0, #0
   1bf48:	beq	1bf54 <__assert_fail@plt+0xa4dc>
   1bf4c:	mov	r0, r4
   1bf50:	pop	{r4, r5, r6, r7, fp, pc}
   1bf54:	bl	11910 <__errno_location@plt>
   1bf58:	mov	r1, #12
   1bf5c:	str	r1, [r0]
   1bf60:	mov	r4, #0
   1bf64:	mov	r0, r4
   1bf68:	pop	{r4, r5, r6, r7, fp, pc}
   1bf6c:	bl	11910 <__errno_location@plt>
   1bf70:	mov	r5, r0
   1bf74:	ldr	r7, [r0]
   1bf78:	mov	r0, r6
   1bf7c:	bl	11694 <iconv_close@plt>
   1bf80:	str	r7, [r5]
   1bf84:	mov	r0, r4
   1bf88:	pop	{r4, r5, r6, r7, fp, pc}
   1bf8c:	push	{r4, r5, fp, lr}
   1bf90:	add	fp, sp, #8
   1bf94:	mov	r4, r1
   1bf98:	mov	r5, r0
   1bf9c:	mov	r1, #0
   1bfa0:	mov	r2, r4
   1bfa4:	bl	11988 <memchr@plt>
   1bfa8:	rsb	r1, r5, #1
   1bfac:	cmp	r0, #0
   1bfb0:	addne	r4, r1, r0
   1bfb4:	mov	r0, r4
   1bfb8:	pop	{r4, r5, fp, pc}
   1bfbc:	push	{r4, sl, fp, lr}
   1bfc0:	add	fp, sp, #8
   1bfc4:	sub	sp, sp, #264	; 0x108
   1bfc8:	add	r1, sp, #7
   1bfcc:	movw	r2, #257	; 0x101
   1bfd0:	bl	1c210 <__assert_fail@plt+0xa798>
   1bfd4:	mov	r4, #0
   1bfd8:	cmp	r0, #0
   1bfdc:	bne	1c014 <__assert_fail@plt+0xa59c>
   1bfe0:	add	r0, sp, #7
   1bfe4:	movw	r1, #160	; 0xa0
   1bfe8:	movt	r1, #2
   1bfec:	bl	116ac <strcmp@plt>
   1bff0:	cmp	r0, #0
   1bff4:	beq	1c014 <__assert_fail@plt+0xa59c>
   1bff8:	add	r0, sp, #7
   1bffc:	movw	r1, #162	; 0xa2
   1c000:	movt	r1, #2
   1c004:	bl	116ac <strcmp@plt>
   1c008:	mov	r4, r0
   1c00c:	cmp	r0, #0
   1c010:	movwne	r4, #1
   1c014:	mov	r0, r4
   1c018:	sub	sp, fp, #8
   1c01c:	pop	{r4, sl, fp, pc}
   1c020:	push	{r4, sl, fp, lr}
   1c024:	add	fp, sp, #8
   1c028:	mov	r4, #0
   1c02c:	adds	r0, r0, #16
   1c030:	adc	r1, r4, #0
   1c034:	rsb	r2, r1, #0
   1c038:	eors	r2, r2, r1
   1c03c:	movwne	r2, #1
   1c040:	cmp	r0, #0
   1c044:	blt	1c064 <__assert_fail@plt+0xa5ec>
   1c048:	cmp	r2, #0
   1c04c:	asreq	r2, r0, #31
   1c050:	eoreq	r3, r0, r0
   1c054:	andeq	r2, r2, #1
   1c058:	eoreq	r1, r1, r2
   1c05c:	orrseq	r1, r3, r1
   1c060:	beq	1c06c <__assert_fail@plt+0xa5f4>
   1c064:	mov	r0, r4
   1c068:	pop	{r4, sl, fp, pc}
   1c06c:	bl	1185c <malloc@plt>
   1c070:	cmp	r0, #0
   1c074:	addne	r4, r0, #8
   1c078:	movne	r1, #8
   1c07c:	bfine	r4, r1, #0, #4
   1c080:	subne	r0, r4, r0
   1c084:	strbne	r0, [r4, #-1]
   1c088:	mov	r0, r4
   1c08c:	pop	{r4, sl, fp, pc}
   1c090:	tst	r0, #7
   1c094:	bne	1c0ac <__assert_fail@plt+0xa634>
   1c098:	tst	r0, #8
   1c09c:	bxeq	lr
   1c0a0:	ldrb	r1, [r0, #-1]
   1c0a4:	sub	r0, r0, r1
   1c0a8:	b	17204 <__assert_fail@plt+0x578c>
   1c0ac:	push	{fp, lr}
   1c0b0:	mov	fp, sp
   1c0b4:	bl	11a60 <abort@plt>
   1c0b8:	push	{r4, sl, fp, lr}
   1c0bc:	add	fp, sp, #8
   1c0c0:	mov	r4, r0
   1c0c4:	bl	116dc <wcwidth@plt>
   1c0c8:	cmn	r0, #1
   1c0cc:	popgt	{r4, sl, fp, pc}
   1c0d0:	mov	r0, r4
   1c0d4:	bl	117cc <iswcntrl@plt>
   1c0d8:	clz	r0, r0
   1c0dc:	lsr	r0, r0, #5
   1c0e0:	pop	{r4, sl, fp, pc}
   1c0e4:	push	{r4, r5, r6, sl, fp, lr}
   1c0e8:	add	fp, sp, #16
   1c0ec:	mov	r5, r1
   1c0f0:	mov	r4, r0
   1c0f4:	ldr	r6, [r1], #16
   1c0f8:	cmp	r6, r1
   1c0fc:	bne	1c110 <__assert_fail@plt+0xa698>
   1c100:	ldr	r2, [r5, #4]
   1c104:	add	r6, r4, #16
   1c108:	mov	r0, r6
   1c10c:	bl	11718 <memcpy@plt>
   1c110:	str	r6, [r4]
   1c114:	ldr	r0, [r5, #4]
   1c118:	str	r0, [r4, #4]
   1c11c:	ldrb	r0, [r5, #8]
   1c120:	strb	r0, [r4, #8]
   1c124:	cmp	r0, #0
   1c128:	ldrne	r0, [r5, #12]
   1c12c:	strne	r0, [r4, #12]
   1c130:	pop	{r4, r5, r6, sl, fp, pc}
   1c134:	ubfx	r1, r0, #5, #3
   1c138:	movw	r2, #168	; 0xa8
   1c13c:	movt	r2, #2
   1c140:	ldr	r1, [r2, r1, lsl #2]
   1c144:	and	r0, r0, #31
   1c148:	mov	r2, #1
   1c14c:	and	r0, r1, r2, lsl r0
   1c150:	cmp	r0, #0
   1c154:	movwne	r0, #1
   1c158:	bx	lr
   1c15c:	push	{r4, r5, r6, sl, fp, lr}
   1c160:	add	fp, sp, #16
   1c164:	sub	sp, sp, #56	; 0x38
   1c168:	mov	r5, r0
   1c16c:	bl	11820 <__ctype_get_mb_cur_max@plt>
   1c170:	cmp	r0, #2
   1c174:	bcc	1c200 <__assert_fail@plt+0xa788>
   1c178:	mov	r4, #0
   1c17c:	str	r4, [sp, #8]
   1c180:	str	r4, [sp, #4]
   1c184:	strb	r4, [sp]
   1c188:	str	r5, [sp, #16]
   1c18c:	strb	r4, [sp, #12]
   1c190:	mov	r0, sp
   1c194:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1c198:	ldrb	r0, [sp, #24]
   1c19c:	cmp	r0, #0
   1c1a0:	beq	1c1b0 <__assert_fail@plt+0xa738>
   1c1a4:	ldr	r0, [sp, #28]
   1c1a8:	cmp	r0, #0
   1c1ac:	beq	1c1f4 <__assert_fail@plt+0xa77c>
   1c1b0:	mov	r6, #0
   1c1b4:	mov	r5, sp
   1c1b8:	mov	r4, #0
   1c1bc:	strb	r6, [sp, #12]
   1c1c0:	ldr	r0, [sp, #16]
   1c1c4:	ldr	r1, [sp, #20]
   1c1c8:	add	r0, r0, r1
   1c1cc:	str	r0, [sp, #16]
   1c1d0:	mov	r0, r5
   1c1d4:	bl	1b7bc <__assert_fail@plt+0x9d44>
   1c1d8:	add	r4, r4, #1
   1c1dc:	ldr	r0, [sp, #28]
   1c1e0:	ldrb	r1, [sp, #24]
   1c1e4:	cmp	r1, #0
   1c1e8:	beq	1c1bc <__assert_fail@plt+0xa744>
   1c1ec:	cmp	r0, #0
   1c1f0:	bne	1c1bc <__assert_fail@plt+0xa744>
   1c1f4:	mov	r0, r4
   1c1f8:	sub	sp, fp, #16
   1c1fc:	pop	{r4, r5, r6, sl, fp, pc}
   1c200:	mov	r0, r5
   1c204:	sub	sp, fp, #16
   1c208:	pop	{r4, r5, r6, sl, fp, lr}
   1c20c:	b	118e0 <strlen@plt>
   1c210:	b	1c214 <__assert_fail@plt+0xa79c>
   1c214:	push	{r4, r5, r6, r7, fp, lr}
   1c218:	add	fp, sp, #16
   1c21c:	mov	r6, r2
   1c220:	mov	r4, r1
   1c224:	bl	1c2b0 <__assert_fail@plt+0xa838>
   1c228:	cmp	r0, #0
   1c22c:	beq	1c25c <__assert_fail@plt+0xa7e4>
   1c230:	mov	r7, r0
   1c234:	bl	118e0 <strlen@plt>
   1c238:	cmp	r0, r6
   1c23c:	bcs	1c27c <__assert_fail@plt+0xa804>
   1c240:	add	r2, r0, #1
   1c244:	mov	r0, r4
   1c248:	mov	r1, r7
   1c24c:	bl	11718 <memcpy@plt>
   1c250:	mov	r5, #0
   1c254:	mov	r0, r5
   1c258:	pop	{r4, r5, r6, r7, fp, pc}
   1c25c:	mov	r5, #22
   1c260:	cmp	r6, #0
   1c264:	movne	r0, #0
   1c268:	strbne	r0, [r4]
   1c26c:	movne	r0, r5
   1c270:	popne	{r4, r5, r6, r7, fp, pc}
   1c274:	mov	r0, r5
   1c278:	pop	{r4, r5, r6, r7, fp, pc}
   1c27c:	mov	r5, #34	; 0x22
   1c280:	cmp	r6, #0
   1c284:	beq	1c2a4 <__assert_fail@plt+0xa82c>
   1c288:	sub	r6, r6, #1
   1c28c:	mov	r0, r4
   1c290:	mov	r1, r7
   1c294:	mov	r2, r6
   1c298:	bl	11718 <memcpy@plt>
   1c29c:	mov	r0, #0
   1c2a0:	strb	r0, [r4, r6]
   1c2a4:	mov	r0, r5
   1c2a8:	pop	{r4, r5, r6, r7, fp, pc}
   1c2ac:	b	1c2b0 <__assert_fail@plt+0xa838>
   1c2b0:	mov	r1, #0
   1c2b4:	b	119dc <setlocale@plt>
   1c2b8:	cmp	r3, #0
   1c2bc:	cmpeq	r2, #0
   1c2c0:	bne	1c2d8 <__assert_fail@plt+0xa860>
   1c2c4:	cmp	r1, #0
   1c2c8:	cmpeq	r0, #0
   1c2cc:	mvnne	r1, #0
   1c2d0:	mvnne	r0, #0
   1c2d4:	b	1c2f4 <__assert_fail@plt+0xa87c>
   1c2d8:	sub	sp, sp, #8
   1c2dc:	push	{sp, lr}
   1c2e0:	bl	1c304 <__assert_fail@plt+0xa88c>
   1c2e4:	ldr	lr, [sp, #4]
   1c2e8:	add	sp, sp, #8
   1c2ec:	pop	{r2, r3}
   1c2f0:	bx	lr
   1c2f4:	push	{r1, lr}
   1c2f8:	mov	r0, #8
   1c2fc:	bl	1167c <raise@plt>
   1c300:	pop	{r1, pc}
   1c304:	cmp	r1, r3
   1c308:	cmpeq	r0, r2
   1c30c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c310:	mov	r4, r0
   1c314:	movcc	r0, #0
   1c318:	mov	r5, r1
   1c31c:	ldr	lr, [sp, #36]	; 0x24
   1c320:	movcc	r1, r0
   1c324:	bcc	1c420 <__assert_fail@plt+0xa9a8>
   1c328:	cmp	r3, #0
   1c32c:	clzeq	ip, r2
   1c330:	clzne	ip, r3
   1c334:	addeq	ip, ip, #32
   1c338:	cmp	r5, #0
   1c33c:	clzeq	r1, r4
   1c340:	addeq	r1, r1, #32
   1c344:	clzne	r1, r5
   1c348:	sub	ip, ip, r1
   1c34c:	sub	sl, ip, #32
   1c350:	lsl	r9, r3, ip
   1c354:	rsb	fp, ip, #32
   1c358:	orr	r9, r9, r2, lsl sl
   1c35c:	orr	r9, r9, r2, lsr fp
   1c360:	lsl	r8, r2, ip
   1c364:	cmp	r5, r9
   1c368:	cmpeq	r4, r8
   1c36c:	movcc	r0, #0
   1c370:	movcc	r1, r0
   1c374:	bcc	1c390 <__assert_fail@plt+0xa918>
   1c378:	mov	r0, #1
   1c37c:	subs	r4, r4, r8
   1c380:	lsl	r1, r0, sl
   1c384:	orr	r1, r1, r0, lsr fp
   1c388:	lsl	r0, r0, ip
   1c38c:	sbc	r5, r5, r9
   1c390:	cmp	ip, #0
   1c394:	beq	1c420 <__assert_fail@plt+0xa9a8>
   1c398:	lsr	r6, r8, #1
   1c39c:	orr	r6, r6, r9, lsl #31
   1c3a0:	lsr	r7, r9, #1
   1c3a4:	mov	r2, ip
   1c3a8:	b	1c3cc <__assert_fail@plt+0xa954>
   1c3ac:	subs	r3, r4, r6
   1c3b0:	sbc	r8, r5, r7
   1c3b4:	adds	r3, r3, r3
   1c3b8:	adc	r8, r8, r8
   1c3bc:	adds	r4, r3, #1
   1c3c0:	adc	r5, r8, #0
   1c3c4:	subs	r2, r2, #1
   1c3c8:	beq	1c3e8 <__assert_fail@plt+0xa970>
   1c3cc:	cmp	r5, r7
   1c3d0:	cmpeq	r4, r6
   1c3d4:	bcs	1c3ac <__assert_fail@plt+0xa934>
   1c3d8:	adds	r4, r4, r4
   1c3dc:	adc	r5, r5, r5
   1c3e0:	subs	r2, r2, #1
   1c3e4:	bne	1c3cc <__assert_fail@plt+0xa954>
   1c3e8:	lsr	r3, r4, ip
   1c3ec:	orr	r3, r3, r5, lsl fp
   1c3f0:	lsr	r2, r5, ip
   1c3f4:	orr	r3, r3, r5, lsr sl
   1c3f8:	adds	r0, r0, r4
   1c3fc:	mov	r4, r3
   1c400:	lsl	r3, r2, ip
   1c404:	orr	r3, r3, r4, lsl sl
   1c408:	lsl	ip, r4, ip
   1c40c:	orr	r3, r3, r4, lsr fp
   1c410:	adc	r1, r1, r5
   1c414:	subs	r0, r0, ip
   1c418:	mov	r5, r2
   1c41c:	sbc	r1, r1, r3
   1c420:	cmp	lr, #0
   1c424:	strdne	r4, [lr]
   1c428:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c42c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c430:	mov	r7, r0
   1c434:	ldr	r6, [pc, #72]	; 1c484 <__assert_fail@plt+0xaa0c>
   1c438:	ldr	r5, [pc, #72]	; 1c488 <__assert_fail@plt+0xaa10>
   1c43c:	add	r6, pc, r6
   1c440:	add	r5, pc, r5
   1c444:	sub	r6, r6, r5
   1c448:	mov	r8, r1
   1c44c:	mov	r9, r2
   1c450:	bl	11644 <calloc@plt-0x20>
   1c454:	asrs	r6, r6, #2
   1c458:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c45c:	mov	r4, #0
   1c460:	add	r4, r4, #1
   1c464:	ldr	r3, [r5], #4
   1c468:	mov	r2, r9
   1c46c:	mov	r1, r8
   1c470:	mov	r0, r7
   1c474:	blx	r3
   1c478:	cmp	r6, r4
   1c47c:	bne	1c460 <__assert_fail@plt+0xa9e8>
   1c480:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c484:	andeq	r4, r1, r0, asr #21
   1c488:			; <UNDEFINED> instruction: 0x00014ab8
   1c48c:	bx	lr
   1c490:	ldr	r3, [pc, #12]	; 1c4a4 <__assert_fail@plt+0xaa2c>
   1c494:	mov	r1, #0
   1c498:	add	r3, pc, r3
   1c49c:	ldr	r2, [r3]
   1c4a0:	b	11934 <__cxa_atexit@plt>
   1c4a4:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>

Disassembly of section .fini:

0001c4a8 <.fini>:
   1c4a8:	push	{r3, lr}
   1c4ac:	pop	{r3, pc}
