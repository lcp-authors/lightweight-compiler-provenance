
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010c80 <.init>:
   10c80:	push	{r3, lr}
   10c84:	bl	111e8 <__assert_fail@plt+0x2e4>
   10c88:	pop	{r3, pc}

Disassembly of section .plt:

00010c8c <calloc@plt-0x14>:
   10c8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c90:	ldr	lr, [pc, #4]	; 10c9c <calloc@plt-0x4>
   10c94:	add	lr, pc, lr
   10c98:	ldr	pc, [lr, #8]!
   10c9c:	andeq	r6, r1, r4, ror #6

00010ca0 <calloc@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #868]!	; 0x364

00010cac <fputs_unlocked@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #860]!	; 0x35c

00010cb8 <strcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #852]!	; 0x354

00010cc4 <posix_fadvise64@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #844]!	; 0x34c

00010cd0 <fflush@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #836]!	; 0x344

00010cdc <memmove@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #828]!	; 0x33c

00010ce8 <free@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #820]!	; 0x334

00010cf4 <_exit@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #812]!	; 0x32c

00010d00 <memcpy@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #804]!	; 0x324

00010d0c <__strtoull_internal@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #796]!	; 0x31c

00010d18 <mbsinit@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #788]!	; 0x314

00010d24 <fwrite_unlocked@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #780]!	; 0x30c

00010d30 <memcmp@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #772]!	; 0x304

00010d3c <fputc_unlocked@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #764]!	; 0x2fc

00010d48 <dcgettext@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #756]!	; 0x2f4

00010d54 <realloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d60 <textdomain@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #740]!	; 0x2e4

00010d6c <iswprint@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #732]!	; 0x2dc

00010d78 <fwrite@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #724]!	; 0x2d4

00010d84 <lseek64@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d90 <__ctype_get_mb_cur_max@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #708]!	; 0x2c4

00010d9c <__fpending@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #700]!	; 0x2bc

00010da8 <mbrtowc@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #692]!	; 0x2b4

00010db4 <error@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #684]!	; 0x2ac

00010dc0 <malloc@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dcc <__libc_start_main@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #668]!	; 0x29c

00010dd8 <__freading@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #660]!	; 0x294

00010de4 <__gmon_start__@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #652]!	; 0x28c

00010df0 <getopt_long@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #644]!	; 0x284

00010dfc <__ctype_b_loc@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #636]!	; 0x27c

00010e08 <exit@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #628]!	; 0x274

00010e14 <strlen@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #620]!	; 0x26c

00010e20 <strchr@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #612]!	; 0x264

00010e2c <__errno_location@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #604]!	; 0x25c

00010e38 <__cxa_atexit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #596]!	; 0x254

00010e44 <memset@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #588]!	; 0x24c

00010e50 <__printf_chk@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #580]!	; 0x244

00010e5c <fileno@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #572]!	; 0x23c

00010e68 <__fprintf_chk@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #564]!	; 0x234

00010e74 <fclose@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #556]!	; 0x22c

00010e80 <fseeko64@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #548]!	; 0x224

00010e8c <__uflow@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #540]!	; 0x21c

00010e98 <__overflow@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #532]!	; 0x214

00010ea4 <setlocale@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #524]!	; 0x20c

00010eb0 <strrchr@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #516]!	; 0x204

00010ebc <nl_langinfo@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #508]!	; 0x1fc

00010ec8 <clearerr_unlocked@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ed4 <fopen64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ee0 <bindtextdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #484]!	; 0x1e4

00010eec <strncmp@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ef8 <abort@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #468]!	; 0x1d4

00010f04 <__assert_fail@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #460]!	; 0x1cc

Disassembly of section .text:

00010f10 <.text>:
   10f10:	movw	r3, #24032	; 0x5de0
   10f14:	movt	r3, #1
   10f18:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10f1c:	strd	r6, [sp, #8]
   10f20:	mov	r7, r0
   10f24:	mov	r6, r1
   10f28:	strd	r8, [sp, #16]
   10f2c:	movw	r5, #29016	; 0x7158
   10f30:	movt	r5, #2
   10f34:	strd	sl, [sp, #24]
   10f38:	mov	fp, #80	; 0x50
   10f3c:	str	lr, [sp, #32]
   10f40:	sub	sp, sp, #44	; 0x2c
   10f44:	ldr	r0, [r1]
   10f48:	str	r3, [sp, #28]
   10f4c:	bl	11d34 <__assert_fail@plt+0xe30>
   10f50:	movw	r1, #23324	; 0x5b1c
   10f54:	movt	r1, #1
   10f58:	ldr	r8, [pc, #580]	; 111a4 <__assert_fail@plt+0x2a0>
   10f5c:	mov	r0, #6
   10f60:	mov	r9, r1
   10f64:	bl	10ea4 <setlocale@plt>
   10f68:	movw	r1, #24008	; 0x5dc8
   10f6c:	movt	r1, #1
   10f70:	movw	r0, #23840	; 0x5d20
   10f74:	movt	r0, #1
   10f78:	bl	10ee0 <bindtextdomain@plt>
   10f7c:	movw	r0, #23840	; 0x5d20
   10f80:	movt	r0, #1
   10f84:	bl	10d60 <textdomain@plt>
   10f88:	movw	r0, #6672	; 0x1a10
   10f8c:	movt	r0, #1
   10f90:	bl	159e4 <__assert_fail@plt+0x4ae0>
   10f94:	mov	r3, #0
   10f98:	strb	r3, [r5]
   10f9c:	strb	r3, [r5, #1]
   10fa0:	strb	r3, [r5, #12]
   10fa4:	mov	r4, #0
   10fa8:	mov	r3, r8
   10fac:	ldr	r2, [pc, #500]	; 111a8 <__assert_fail@plt+0x2a4>
   10fb0:	mov	r1, r6
   10fb4:	mov	r0, r7
   10fb8:	str	r4, [sp]
   10fbc:	bl	10df0 <getopt_long@plt>
   10fc0:	cmn	r0, #1
   10fc4:	beq	110e8 <__assert_fail@plt+0x1e4>
   10fc8:	cmp	r0, #57	; 0x39
   10fcc:	ble	1102c <__assert_fail@plt+0x128>
   10fd0:	cmp	r0, #115	; 0x73
   10fd4:	beq	1109c <__assert_fail@plt+0x198>
   10fd8:	cmp	r0, #119	; 0x77
   10fdc:	movweq	r3, #29008	; 0x7150
   10fe0:	movteq	r3, #2
   10fe4:	bne	1107c <__assert_fail@plt+0x178>
   10fe8:	ldr	r4, [r3]
   10fec:	mov	r2, #5
   10ff0:	mov	r0, #0
   10ff4:	mov	fp, #0
   10ff8:	mvn	sl, #9
   10ffc:	ldr	r1, [sp, #28]
   11000:	bl	10d48 <dcgettext@plt>
   11004:	mov	r1, #0
   11008:	mov	r2, #1
   1100c:	strd	sl, [sp]
   11010:	mov	r3, #0
   11014:	str	r9, [sp, #8]
   11018:	strd	r0, [sp, #12]
   1101c:	mov	r0, r4
   11020:	bl	14bd0 <__assert_fail@plt+0x3ccc>
   11024:	mov	fp, r0
   11028:	b	10fa4 <__assert_fail@plt+0xa0>
   1102c:	cmp	r0, #48	; 0x30
   11030:	bge	110a8 <__assert_fail@plt+0x1a4>
   11034:	cmn	r0, #3
   11038:	bne	1108c <__assert_fail@plt+0x188>
   1103c:	movw	r2, #24060	; 0x5dfc
   11040:	movt	r2, #1
   11044:	movw	r3, #28904	; 0x70e8
   11048:	movt	r3, #2
   1104c:	movw	r0, #29004	; 0x714c
   11050:	movt	r0, #2
   11054:	stm	sp, {r2, r4}
   11058:	movw	r1, #23244	; 0x5acc
   1105c:	movt	r1, #1
   11060:	ldr	r0, [r0]
   11064:	movw	r2, #23836	; 0x5d1c
   11068:	movt	r2, #1
   1106c:	ldr	r3, [r3]
   11070:	bl	144c0 <__assert_fail@plt+0x35bc>
   11074:	mov	r0, r4
   11078:	bl	10e08 <exit@plt>
   1107c:	cmp	r0, #98	; 0x62
   11080:	beq	110c8 <__assert_fail@plt+0x1c4>
   11084:	mov	r0, #1
   11088:	bl	11684 <__assert_fail@plt+0x780>
   1108c:	cmn	r0, #2
   11090:	bne	11084 <__assert_fail@plt+0x180>
   11094:	mov	r0, r4
   11098:	bl	11684 <__assert_fail@plt+0x780>
   1109c:	mov	r3, #1
   110a0:	strb	r3, [r5, #12]
   110a4:	b	10fa4 <__assert_fail@plt+0xa0>
   110a8:	movw	r3, #29008	; 0x7150
   110ac:	movt	r3, #2
   110b0:	ldr	r2, [r3]
   110b4:	cmp	r2, #0
   110b8:	beq	110d4 <__assert_fail@plt+0x1d0>
   110bc:	sub	r2, r2, #1
   110c0:	str	r2, [r3]
   110c4:	b	10fe8 <__assert_fail@plt+0xe4>
   110c8:	mov	r3, #1
   110cc:	strb	r3, [r5]
   110d0:	b	10fa4 <__assert_fail@plt+0xa0>
   110d4:	add	r1, sp, #36	; 0x24
   110d8:	strb	r0, [sp, #36]	; 0x24
   110dc:	strb	r2, [sp, #37]	; 0x25
   110e0:	str	r1, [r3]
   110e4:	b	10fe8 <__assert_fail@plt+0xe4>
   110e8:	movw	r3, #28984	; 0x7138
   110ec:	movt	r3, #2
   110f0:	ldr	r8, [r3]
   110f4:	cmp	r8, r7
   110f8:	beq	1118c <__assert_fail@plt+0x288>
   110fc:	movge	r4, #1
   11100:	bge	1112c <__assert_fail@plt+0x228>
   11104:	add	r8, r6, r8, lsl #2
   11108:	mov	r4, #1
   1110c:	add	r6, r6, r7, lsl #2
   11110:	ldr	r0, [r8], #4
   11114:	mov	r1, fp
   11118:	bl	112f4 <__assert_fail@plt+0x3f0>
   1111c:	and	r4, r4, r0
   11120:	uxtb	r4, r4
   11124:	cmp	r8, r6
   11128:	bne	11110 <__assert_fail@plt+0x20c>
   1112c:	ldrb	r3, [r5, #1]
   11130:	cmp	r3, #0
   11134:	bne	1115c <__assert_fail@plt+0x258>
   11138:	eor	r0, r4, #1
   1113c:	uxtb	r0, r0
   11140:	add	sp, sp, #44	; 0x2c
   11144:	ldrd	r4, [sp]
   11148:	ldrd	r6, [sp, #8]
   1114c:	ldrd	r8, [sp, #16]
   11150:	ldrd	sl, [sp, #24]
   11154:	add	sp, sp, #32
   11158:	pop	{pc}		; (ldr pc, [sp], #4)
   1115c:	movw	r3, #29000	; 0x7148
   11160:	movt	r3, #2
   11164:	ldr	r0, [r3]
   11168:	bl	11b50 <__assert_fail@plt+0xc4c>
   1116c:	cmn	r0, #1
   11170:	bne	11138 <__assert_fail@plt+0x234>
   11174:	bl	10e2c <__errno_location@plt>
   11178:	movw	r2, #23236	; 0x5ac4
   1117c:	movt	r2, #1
   11180:	ldr	r1, [r0]
   11184:	mov	r0, #1
   11188:	bl	10db4 <error@plt>
   1118c:	mov	r1, fp
   11190:	movw	r0, #23236	; 0x5ac4
   11194:	movt	r0, #1
   11198:	bl	112f4 <__assert_fail@plt+0x3f0>
   1119c:	mov	r4, r0
   111a0:	b	1112c <__assert_fail@plt+0x228>
   111a4:	andeq	r5, r1, r0, asr #20
   111a8:	andeq	r5, r1, r0, lsr #21
   111ac:	mov	fp, #0
   111b0:	mov	lr, #0
   111b4:	pop	{r1}		; (ldr r1, [sp], #4)
   111b8:	mov	r2, sp
   111bc:	push	{r2}		; (str r2, [sp, #-4]!)
   111c0:	push	{r0}		; (str r0, [sp, #-4]!)
   111c4:	ldr	ip, [pc, #16]	; 111dc <__assert_fail@plt+0x2d8>
   111c8:	push	{ip}		; (str ip, [sp, #-4]!)
   111cc:	ldr	r0, [pc, #12]	; 111e0 <__assert_fail@plt+0x2dc>
   111d0:	ldr	r3, [pc, #12]	; 111e4 <__assert_fail@plt+0x2e0>
   111d4:	bl	10dcc <__libc_start_main@plt>
   111d8:	bl	10ef8 <abort@plt>
   111dc:	andeq	r5, r1, r0, ror #19
   111e0:	andeq	r0, r1, r0, lsl pc
   111e4:	andeq	r5, r1, r0, lsl #19
   111e8:	ldr	r3, [pc, #20]	; 11204 <__assert_fail@plt+0x300>
   111ec:	ldr	r2, [pc, #20]	; 11208 <__assert_fail@plt+0x304>
   111f0:	add	r3, pc, r3
   111f4:	ldr	r2, [r3, r2]
   111f8:	cmp	r2, #0
   111fc:	bxeq	lr
   11200:	b	10de4 <__gmon_start__@plt>
   11204:	andeq	r5, r1, r8, lsl #28
   11208:	ldrdeq	r0, [r0], -ip
   1120c:	ldr	r0, [pc, #24]	; 1122c <__assert_fail@plt+0x328>
   11210:	ldr	r3, [pc, #24]	; 11230 <__assert_fail@plt+0x32c>
   11214:	cmp	r3, r0
   11218:	bxeq	lr
   1121c:	ldr	r3, [pc, #16]	; 11234 <__assert_fail@plt+0x330>
   11220:	cmp	r3, #0
   11224:	bxeq	lr
   11228:	bx	r3
   1122c:	andeq	r7, r2, r0, lsr r1
   11230:	andeq	r7, r2, r0, lsr r1
   11234:	andeq	r0, r0, r0
   11238:	ldr	r0, [pc, #36]	; 11264 <__assert_fail@plt+0x360>
   1123c:	ldr	r1, [pc, #36]	; 11268 <__assert_fail@plt+0x364>
   11240:	sub	r1, r1, r0
   11244:	asr	r1, r1, #2
   11248:	add	r1, r1, r1, lsr #31
   1124c:	asrs	r1, r1, #1
   11250:	bxeq	lr
   11254:	ldr	r3, [pc, #16]	; 1126c <__assert_fail@plt+0x368>
   11258:	cmp	r3, #0
   1125c:	bxeq	lr
   11260:	bx	r3
   11264:	andeq	r7, r2, r0, lsr r1
   11268:	andeq	r7, r2, r0, lsr r1
   1126c:	andeq	r0, r0, r0
   11270:	push	{r4, lr}
   11274:	ldr	r4, [pc, #24]	; 11294 <__assert_fail@plt+0x390>
   11278:	ldrb	r3, [r4]
   1127c:	cmp	r3, #0
   11280:	popne	{r4, pc}
   11284:	bl	1120c <__assert_fail@plt+0x308>
   11288:	mov	r3, #1
   1128c:	strb	r3, [r4]
   11290:	pop	{r4, pc}
   11294:	andeq	r7, r2, r4, asr r1
   11298:	b	11238 <__assert_fail@plt+0x334>
   1129c:	movw	r3, #29016	; 0x7158
   112a0:	movt	r3, #2
   112a4:	ldrb	r3, [r3]
   112a8:	cmp	r3, #0
   112ac:	bne	112c8 <__assert_fail@plt+0x3c4>
   112b0:	cmp	r1, #8
   112b4:	beq	112d0 <__assert_fail@plt+0x3cc>
   112b8:	cmp	r1, #13
   112bc:	beq	112ec <__assert_fail@plt+0x3e8>
   112c0:	cmp	r1, #9
   112c4:	beq	112e0 <__assert_fail@plt+0x3dc>
   112c8:	add	r0, r0, #1
   112cc:	bx	lr
   112d0:	cmp	r0, #0
   112d4:	beq	112f0 <__assert_fail@plt+0x3ec>
   112d8:	sub	r0, r0, #1
   112dc:	bx	lr
   112e0:	bic	r0, r0, #7
   112e4:	add	r0, r0, #8
   112e8:	bx	lr
   112ec:	mov	r0, r3
   112f0:	bx	lr
   112f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   112f8:	strd	r6, [sp, #8]
   112fc:	strd	r8, [sp, #16]
   11300:	strd	sl, [sp, #24]
   11304:	str	lr, [sp, #32]
   11308:	sub	sp, sp, #20
   1130c:	str	r1, [sp, #4]
   11310:	movw	r1, #23236	; 0x5ac4
   11314:	movt	r1, #1
   11318:	str	r0, [sp, #8]
   1131c:	bl	10cb8 <strcmp@plt>
   11320:	cmp	r0, #0
   11324:	bne	115e0 <__assert_fail@plt+0x6dc>
   11328:	movw	r3, #29000	; 0x7148
   1132c:	movt	r3, #2
   11330:	ldr	r9, [r3]
   11334:	mov	r1, #1
   11338:	movw	r2, #29016	; 0x7158
   1133c:	movt	r2, #2
   11340:	strb	r1, [r2, #1]
   11344:	bl	10e2c <__errno_location@plt>
   11348:	cmp	r9, #0
   1134c:	str	r0, [sp, #12]
   11350:	beq	11604 <__assert_fail@plt+0x700>
   11354:	mov	r4, #0
   11358:	mov	r1, #2
   1135c:	mov	r0, r9
   11360:	movw	r8, #29016	; 0x7158
   11364:	movt	r8, #2
   11368:	movw	sl, #29004	; 0x714c
   1136c:	movt	sl, #2
   11370:	mov	r5, r4
   11374:	bl	11b00 <__assert_fail@plt+0xbfc>
   11378:	ldr	r3, [r9, #4]
   1137c:	ldr	r2, [r9, #8]
   11380:	cmp	r3, r2
   11384:	bcs	11400 <__assert_fail@plt+0x4fc>
   11388:	add	r2, r3, #1
   1138c:	str	r2, [r9, #4]
   11390:	ldrb	r6, [r3]
   11394:	add	fp, r4, #1
   11398:	ldr	r7, [r8, #4]
   1139c:	ldr	r3, [r8, #8]
   113a0:	cmp	fp, r3
   113a4:	bcs	114e8 <__assert_fail@plt+0x5e4>
   113a8:	cmp	r6, #10
   113ac:	beq	114c4 <__assert_fail@plt+0x5c0>
   113b0:	uxtb	r6, r6
   113b4:	mov	fp, #10
   113b8:	mov	r0, r5
   113bc:	mov	r1, r6
   113c0:	bl	1129c <__assert_fail@plt+0x398>
   113c4:	ldr	r3, [sp, #4]
   113c8:	cmp	r0, r3
   113cc:	bls	115d0 <__assert_fail@plt+0x6cc>
   113d0:	ldrb	r3, [r8, #12]
   113d4:	cmp	r3, #0
   113d8:	bne	11500 <__assert_fail@plt+0x5fc>
   113dc:	cmp	r4, #0
   113e0:	bne	1149c <__assert_fail@plt+0x598>
   113e4:	strb	r6, [r7]
   113e8:	mov	r5, r0
   113ec:	mov	r4, #1
   113f0:	ldr	r3, [r9, #4]
   113f4:	ldr	r2, [r9, #8]
   113f8:	cmp	r3, r2
   113fc:	bcc	11388 <__assert_fail@plt+0x484>
   11400:	mov	r0, r9
   11404:	bl	10e8c <__uflow@plt>
   11408:	cmn	r0, #1
   1140c:	mov	r6, r0
   11410:	bne	11394 <__assert_fail@plt+0x490>
   11414:	ldr	r3, [r9]
   11418:	ldr	r2, [sp, #12]
   1141c:	tst	r3, #32
   11420:	ldr	r5, [r2]
   11424:	moveq	r5, #0
   11428:	cmp	r4, #0
   1142c:	beq	11454 <__assert_fail@plt+0x550>
   11430:	movw	r3, #29004	; 0x714c
   11434:	movt	r3, #2
   11438:	movw	r0, #29016	; 0x7158
   1143c:	movt	r0, #2
   11440:	ldr	r3, [r3]
   11444:	mov	r2, r4
   11448:	mov	r1, #1
   1144c:	ldr	r0, [r0, #4]
   11450:	bl	10d24 <fwrite_unlocked@plt>
   11454:	movw	r1, #23236	; 0x5ac4
   11458:	movt	r1, #1
   1145c:	ldr	r0, [sp, #8]
   11460:	bl	10cb8 <strcmp@plt>
   11464:	cmp	r0, #0
   11468:	mov	r0, r9
   1146c:	bne	115b0 <__assert_fail@plt+0x6ac>
   11470:	bl	10ec8 <clearerr_unlocked@plt>
   11474:	cmp	r5, #0
   11478:	moveq	r0, #1
   1147c:	bne	1163c <__assert_fail@plt+0x738>
   11480:	add	sp, sp, #20
   11484:	ldrd	r4, [sp]
   11488:	ldrd	r6, [sp, #8]
   1148c:	ldrd	r8, [sp, #16]
   11490:	ldrd	sl, [sp, #24]
   11494:	add	sp, sp, #32
   11498:	pop	{pc}		; (ldr pc, [sp], #4)
   1149c:	add	r2, r4, #1
   114a0:	mov	r0, r7
   114a4:	strb	fp, [r7, r4]
   114a8:	mov	r1, #1
   114ac:	mov	r4, #0
   114b0:	ldr	r3, [sl]
   114b4:	bl	10d24 <fwrite_unlocked@plt>
   114b8:	mov	r0, r4
   114bc:	ldr	r7, [r8, #4]
   114c0:	b	113bc <__assert_fail@plt+0x4b8>
   114c4:	mov	r2, fp
   114c8:	mov	r0, r7
   114cc:	strb	r6, [r7, r4]
   114d0:	mov	r1, #1
   114d4:	mov	r4, #0
   114d8:	ldr	r3, [sl]
   114dc:	mov	r5, r4
   114e0:	bl	10d24 <fwrite_unlocked@plt>
   114e4:	b	11378 <__assert_fail@plt+0x474>
   114e8:	mov	r0, r7
   114ec:	ldr	r1, [pc, #396]	; 11680 <__assert_fail@plt+0x77c>
   114f0:	bl	147c0 <__assert_fail@plt+0x38bc>
   114f4:	mov	r7, r0
   114f8:	str	r0, [r8, #4]
   114fc:	b	113a8 <__assert_fail@plt+0x4a4>
   11500:	cmp	r4, #0
   11504:	beq	113e4 <__assert_fail@plt+0x4e0>
   11508:	bl	10dfc <__ctype_b_loc@plt>
   1150c:	mov	r5, r4
   11510:	add	r1, r7, r4
   11514:	ldr	r0, [r0]
   11518:	b	11524 <__assert_fail@plt+0x620>
   1151c:	subs	r5, r2, #0
   11520:	beq	1149c <__assert_fail@plt+0x598>
   11524:	ldrb	r3, [r1, #-1]!
   11528:	sub	r2, r5, #1
   1152c:	lsl	r3, r3, #1
   11530:	ldrh	r3, [r0, r3]
   11534:	tst	r3, #1
   11538:	beq	1151c <__assert_fail@plt+0x618>
   1153c:	mov	r2, r5
   11540:	mov	r0, r7
   11544:	ldr	r3, [sl]
   11548:	mov	r1, #1
   1154c:	bl	10d24 <fwrite_unlocked@plt>
   11550:	ldr	r0, [sl]
   11554:	ldr	r3, [r0, #20]
   11558:	ldr	r2, [r0, #24]
   1155c:	cmp	r3, r2
   11560:	addcc	r2, r3, #1
   11564:	strcc	r2, [r0, #20]
   11568:	strbcc	fp, [r3]
   1156c:	bcs	11674 <__assert_fail@plt+0x770>
   11570:	ldr	r7, [r8, #4]
   11574:	sub	r4, r4, r5
   11578:	mov	r2, r4
   1157c:	add	r1, r7, r5
   11580:	mov	r0, r7
   11584:	bl	10cdc <memmove@plt>
   11588:	cmp	r4, #0
   1158c:	beq	1166c <__assert_fail@plt+0x768>
   11590:	sub	r5, r7, #1
   11594:	mov	r0, #0
   11598:	add	r2, r5, r4
   1159c:	ldrb	r1, [r5, #1]!
   115a0:	bl	1129c <__assert_fail@plt+0x398>
   115a4:	cmp	r2, r5
   115a8:	bne	1159c <__assert_fail@plt+0x698>
   115ac:	b	113bc <__assert_fail@plt+0x4b8>
   115b0:	bl	11b50 <__assert_fail@plt+0xc4c>
   115b4:	cmp	r0, #0
   115b8:	beq	11474 <__assert_fail@plt+0x570>
   115bc:	cmp	r5, #0
   115c0:	bne	1163c <__assert_fail@plt+0x738>
   115c4:	ldr	r3, [sp, #12]
   115c8:	ldr	r5, [r3]
   115cc:	b	11474 <__assert_fail@plt+0x570>
   115d0:	mov	r5, r0
   115d4:	strb	r6, [r7, r4]
   115d8:	add	r4, r4, #1
   115dc:	b	11378 <__assert_fail@plt+0x474>
   115e0:	movw	r1, #23240	; 0x5ac8
   115e4:	movt	r1, #1
   115e8:	ldr	r0, [sp, #8]
   115ec:	bl	10ed4 <fopen64@plt>
   115f0:	mov	r9, r0
   115f4:	bl	10e2c <__errno_location@plt>
   115f8:	cmp	r9, #0
   115fc:	str	r0, [sp, #12]
   11600:	bne	11354 <__assert_fail@plt+0x450>
   11604:	mov	r3, r0
   11608:	mov	r1, #3
   1160c:	ldr	r2, [sp, #8]
   11610:	mov	r0, r9
   11614:	ldr	r4, [r3]
   11618:	bl	13e4c <__assert_fail@plt+0x2f48>
   1161c:	mov	r3, r0
   11620:	movw	r2, #24256	; 0x5ec0
   11624:	movt	r2, #1
   11628:	mov	r0, r9
   1162c:	mov	r1, r4
   11630:	bl	10db4 <error@plt>
   11634:	mov	r0, r9
   11638:	b	11480 <__assert_fail@plt+0x57c>
   1163c:	mov	r1, #3
   11640:	mov	r0, #0
   11644:	ldr	r2, [sp, #8]
   11648:	bl	13e4c <__assert_fail@plt+0x2f48>
   1164c:	mov	r3, r0
   11650:	mov	r1, r5
   11654:	mov	r0, #0
   11658:	movw	r2, #24256	; 0x5ec0
   1165c:	movt	r2, #1
   11660:	bl	10db4 <error@plt>
   11664:	mov	r0, #0
   11668:	b	11480 <__assert_fail@plt+0x57c>
   1166c:	mov	r0, r4
   11670:	b	113bc <__assert_fail@plt+0x4b8>
   11674:	mov	r1, #10
   11678:	bl	10e98 <__overflow@plt>
   1167c:	b	11570 <__assert_fail@plt+0x66c>
   11680:	andeq	r7, r2, r0, ror #2
   11684:	subs	r6, r0, #0
   11688:	str	r7, [sp, #-8]!
   1168c:	str	lr, [sp, #4]
   11690:	sub	sp, sp, #56	; 0x38
   11694:	beq	116dc <__assert_fail@plt+0x7d8>
   11698:	movw	r3, #28992	; 0x7140
   1169c:	movt	r3, #2
   116a0:	ldr	r4, [r3]
   116a4:	mov	r2, #5
   116a8:	movw	r1, #23252	; 0x5ad4
   116ac:	movt	r1, #1
   116b0:	mov	r0, #0
   116b4:	bl	10d48 <dcgettext@plt>
   116b8:	movw	r3, #29040	; 0x7170
   116bc:	movt	r3, #2
   116c0:	mov	r2, r0
   116c4:	mov	r1, #1
   116c8:	ldr	r3, [r3]
   116cc:	mov	r0, r4
   116d0:	bl	10e68 <__fprintf_chk@plt>
   116d4:	mov	r0, r6
   116d8:	bl	10e08 <exit@plt>
   116dc:	mov	r2, #5
   116e0:	movw	r1, #23292	; 0x5afc
   116e4:	movt	r1, #1
   116e8:	movw	r7, #29004	; 0x714c
   116ec:	movt	r7, #2
   116f0:	bl	10d48 <dcgettext@plt>
   116f4:	movw	r3, #29040	; 0x7170
   116f8:	movt	r3, #2
   116fc:	mov	r1, r0
   11700:	mov	r0, #1
   11704:	ldr	r2, [r3]
   11708:	bl	10e50 <__printf_chk@plt>
   1170c:	mov	r2, #5
   11710:	movw	r1, #23328	; 0x5b20
   11714:	movt	r1, #1
   11718:	mov	r0, r6
   1171c:	bl	10d48 <dcgettext@plt>
   11720:	ldr	r1, [r7]
   11724:	bl	10cac <fputs_unlocked@plt>
   11728:	mov	r2, #5
   1172c:	movw	r1, #23388	; 0x5b5c
   11730:	movt	r1, #1
   11734:	mov	r0, r6
   11738:	bl	10d48 <dcgettext@plt>
   1173c:	ldr	r1, [r7]
   11740:	bl	10cac <fputs_unlocked@plt>
   11744:	mov	r2, #5
   11748:	movw	r1, #23444	; 0x5b94
   1174c:	movt	r1, #1
   11750:	mov	r0, r6
   11754:	bl	10d48 <dcgettext@plt>
   11758:	ldr	r1, [r7]
   1175c:	bl	10cac <fputs_unlocked@plt>
   11760:	mov	r2, #5
   11764:	movw	r1, #23520	; 0x5be0
   11768:	movt	r1, #1
   1176c:	mov	r0, r6
   11770:	bl	10d48 <dcgettext@plt>
   11774:	ldr	r1, [r7]
   11778:	bl	10cac <fputs_unlocked@plt>
   1177c:	mov	r2, #5
   11780:	movw	r1, #23668	; 0x5c74
   11784:	movt	r1, #1
   11788:	mov	r0, r6
   1178c:	bl	10d48 <dcgettext@plt>
   11790:	ldr	r1, [r7]
   11794:	bl	10cac <fputs_unlocked@plt>
   11798:	mov	r2, #5
   1179c:	movw	r1, #23716	; 0x5ca4
   117a0:	movt	r1, #1
   117a4:	mov	r0, r6
   117a8:	bl	10d48 <dcgettext@plt>
   117ac:	ldr	r1, [r7]
   117b0:	bl	10cac <fputs_unlocked@plt>
   117b4:	movw	lr, #23048	; 0x5a08
   117b8:	movt	lr, #1
   117bc:	ldr	ip, [lr]
   117c0:	ldr	r4, [lr, #4]
   117c4:	ldrd	r8, [lr, #8]
   117c8:	subs	r1, ip, #0
   117cc:	str	ip, [sp]
   117d0:	ldrd	r2, [lr, #16]
   117d4:	str	r4, [sp, #4]
   117d8:	ldrd	r4, [lr, #24]
   117dc:	strd	r8, [sp, #8]
   117e0:	ldrd	r8, [lr, #32]
   117e4:	strd	r2, [sp, #16]
   117e8:	ldrd	r2, [lr, #40]	; 0x28
   117ec:	strd	r4, [sp, #24]
   117f0:	ldrd	r4, [lr, #48]	; 0x30
   117f4:	strd	r8, [sp, #32]
   117f8:	strd	r2, [sp, #40]	; 0x28
   117fc:	strd	r4, [sp, #48]	; 0x30
   11800:	movwne	r5, #23244	; 0x5acc
   11804:	mov	r4, sp
   11808:	movtne	r5, #1
   1180c:	bne	11904 <__assert_fail@plt+0xa00>
   11810:	ldr	r4, [r4, #4]
   11814:	movw	r1, #23772	; 0x5cdc
   11818:	movt	r1, #1
   1181c:	mov	r2, #5
   11820:	cmp	r4, #0
   11824:	beq	11918 <__assert_fail@plt+0xa14>
   11828:	mov	r0, #0
   1182c:	bl	10d48 <dcgettext@plt>
   11830:	mov	r1, r0
   11834:	movw	r3, #23796	; 0x5cf4
   11838:	movt	r3, #1
   1183c:	movw	r2, #23836	; 0x5d1c
   11840:	movt	r2, #1
   11844:	mov	r0, #1
   11848:	bl	10e50 <__printf_chk@plt>
   1184c:	mov	r1, #0
   11850:	mov	r0, #5
   11854:	bl	10ea4 <setlocale@plt>
   11858:	cmp	r0, #0
   1185c:	movweq	r5, #23244	; 0x5acc
   11860:	movteq	r5, #1
   11864:	beq	11888 <__assert_fail@plt+0x984>
   11868:	movw	r1, #23852	; 0x5d2c
   1186c:	movt	r1, #1
   11870:	mov	r2, #3
   11874:	movw	r5, #23244	; 0x5acc
   11878:	movt	r5, #1
   1187c:	bl	10eec <strncmp@plt>
   11880:	cmp	r0, #0
   11884:	bne	119d0 <__assert_fail@plt+0xacc>
   11888:	mov	r2, #5
   1188c:	movw	r1, #23928	; 0x5d78
   11890:	movt	r1, #1
   11894:	mov	r0, #0
   11898:	bl	10d48 <dcgettext@plt>
   1189c:	mov	r1, r0
   118a0:	movw	r3, #23244	; 0x5acc
   118a4:	movt	r3, #1
   118a8:	movw	r2, #23796	; 0x5cf4
   118ac:	movt	r2, #1
   118b0:	mov	r0, #1
   118b4:	bl	10e50 <__printf_chk@plt>
   118b8:	mov	r2, #5
   118bc:	movw	r1, #23956	; 0x5d94
   118c0:	movt	r1, #1
   118c4:	mov	r0, #0
   118c8:	bl	10d48 <dcgettext@plt>
   118cc:	movw	r2, #24084	; 0x5e14
   118d0:	movt	r2, #1
   118d4:	cmp	r4, r5
   118d8:	movw	r3, #23324	; 0x5b1c
   118dc:	movt	r3, #1
   118e0:	mov	r1, r0
   118e4:	moveq	r3, r2
   118e8:	mov	r2, r4
   118ec:	mov	r0, #1
   118f0:	bl	10e50 <__printf_chk@plt>
   118f4:	b	116d4 <__assert_fail@plt+0x7d0>
   118f8:	ldr	r1, [r4, #8]!
   118fc:	cmp	r1, #0
   11900:	beq	11810 <__assert_fail@plt+0x90c>
   11904:	mov	r0, r5
   11908:	bl	10cb8 <strcmp@plt>
   1190c:	cmp	r0, #0
   11910:	bne	118f8 <__assert_fail@plt+0x9f4>
   11914:	b	11810 <__assert_fail@plt+0x90c>
   11918:	mov	r0, r4
   1191c:	bl	10d48 <dcgettext@plt>
   11920:	mov	r1, r0
   11924:	movw	r3, #23796	; 0x5cf4
   11928:	movt	r3, #1
   1192c:	movw	r2, #23836	; 0x5d1c
   11930:	movt	r2, #1
   11934:	mov	r0, #1
   11938:	bl	10e50 <__printf_chk@plt>
   1193c:	mov	r1, r4
   11940:	mov	r0, #5
   11944:	bl	10ea4 <setlocale@plt>
   11948:	cmp	r0, #0
   1194c:	beq	11968 <__assert_fail@plt+0xa64>
   11950:	movw	r1, #23852	; 0x5d2c
   11954:	movt	r1, #1
   11958:	mov	r2, #3
   1195c:	bl	10eec <strncmp@plt>
   11960:	cmp	r0, #0
   11964:	bne	119c4 <__assert_fail@plt+0xac0>
   11968:	mov	r2, #5
   1196c:	movw	r1, #23928	; 0x5d78
   11970:	movt	r1, #1
   11974:	mov	r0, #0
   11978:	bl	10d48 <dcgettext@plt>
   1197c:	mov	r1, r0
   11980:	movw	r3, #23244	; 0x5acc
   11984:	movt	r3, #1
   11988:	movw	r2, #23796	; 0x5cf4
   1198c:	movt	r2, #1
   11990:	mov	r0, #1
   11994:	bl	10e50 <__printf_chk@plt>
   11998:	movw	r1, #23956	; 0x5d94
   1199c:	movt	r1, #1
   119a0:	mov	r2, #5
   119a4:	mov	r0, #0
   119a8:	bl	10d48 <dcgettext@plt>
   119ac:	movw	r4, #23244	; 0x5acc
   119b0:	movt	r4, #1
   119b4:	movw	r3, #24084	; 0x5e14
   119b8:	movt	r3, #1
   119bc:	mov	r1, r0
   119c0:	b	118e8 <__assert_fail@plt+0x9e4>
   119c4:	movw	r5, #23244	; 0x5acc
   119c8:	movt	r5, #1
   119cc:	mov	r4, r5
   119d0:	mov	r2, #5
   119d4:	movw	r1, #23856	; 0x5d30
   119d8:	movt	r1, #1
   119dc:	mov	r0, #0
   119e0:	bl	10d48 <dcgettext@plt>
   119e4:	ldr	r1, [r7]
   119e8:	bl	10cac <fputs_unlocked@plt>
   119ec:	b	11888 <__assert_fail@plt+0x984>
   119f0:	movw	r3, #29032	; 0x7168
   119f4:	movt	r3, #2
   119f8:	str	r0, [r3]
   119fc:	bx	lr
   11a00:	movw	r3, #29032	; 0x7168
   11a04:	movt	r3, #2
   11a08:	strb	r0, [r3, #4]
   11a0c:	bx	lr
   11a10:	movw	r3, #29004	; 0x714c
   11a14:	movt	r3, #2
   11a18:	strd	r4, [sp, #-16]!
   11a1c:	ldr	r0, [r3]
   11a20:	str	r6, [sp, #8]
   11a24:	str	lr, [sp, #12]
   11a28:	sub	sp, sp, #8
   11a2c:	bl	15688 <__assert_fail@plt+0x4784>
   11a30:	cmp	r0, #0
   11a34:	beq	11a60 <__assert_fail@plt+0xb5c>
   11a38:	movw	r4, #29032	; 0x7168
   11a3c:	movt	r4, #2
   11a40:	ldrb	r6, [r4, #4]
   11a44:	bl	10e2c <__errno_location@plt>
   11a48:	mov	r5, r0
   11a4c:	cmp	r6, #0
   11a50:	beq	11a8c <__assert_fail@plt+0xb88>
   11a54:	ldr	r3, [r0]
   11a58:	cmp	r3, #32
   11a5c:	bne	11a8c <__assert_fail@plt+0xb88>
   11a60:	movw	r3, #28992	; 0x7140
   11a64:	movt	r3, #2
   11a68:	ldr	r0, [r3]
   11a6c:	bl	15688 <__assert_fail@plt+0x4784>
   11a70:	cmp	r0, #0
   11a74:	bne	11ad4 <__assert_fail@plt+0xbd0>
   11a78:	add	sp, sp, #8
   11a7c:	ldrd	r4, [sp]
   11a80:	ldr	r6, [sp, #8]
   11a84:	add	sp, sp, #12
   11a88:	pop	{pc}		; (ldr pc, [sp], #4)
   11a8c:	movw	r1, #24240	; 0x5eb0
   11a90:	movt	r1, #1
   11a94:	mov	r2, #5
   11a98:	mov	r0, #0
   11a9c:	bl	10d48 <dcgettext@plt>
   11aa0:	mov	r6, r0
   11aa4:	ldr	r0, [r4]
   11aa8:	cmp	r0, #0
   11aac:	beq	11ae4 <__assert_fail@plt+0xbe0>
   11ab0:	ldr	r4, [r5]
   11ab4:	bl	13e38 <__assert_fail@plt+0x2f34>
   11ab8:	mov	r3, r0
   11abc:	movw	r2, #24252	; 0x5ebc
   11ac0:	movt	r2, #1
   11ac4:	mov	r0, #0
   11ac8:	str	r6, [sp]
   11acc:	mov	r1, r4
   11ad0:	bl	10db4 <error@plt>
   11ad4:	movw	r3, #28908	; 0x70ec
   11ad8:	movt	r3, #2
   11adc:	ldr	r0, [r3]
   11ae0:	bl	10cf4 <_exit@plt>
   11ae4:	mov	r3, r6
   11ae8:	movw	r2, #24256	; 0x5ec0
   11aec:	movt	r2, #1
   11af0:	ldr	r1, [r5]
   11af4:	bl	10db4 <error@plt>
   11af8:	b	11ad4 <__assert_fail@plt+0xbd0>
   11afc:	b	10cc4 <posix_fadvise64@plt>
   11b00:	cmp	r0, #0
   11b04:	bxeq	lr
   11b08:	str	r4, [sp, #-16]!
   11b0c:	mov	r4, r1
   11b10:	strd	r6, [sp, #4]
   11b14:	mov	r6, #0
   11b18:	mov	r7, #0
   11b1c:	str	lr, [sp, #12]
   11b20:	sub	sp, sp, #16
   11b24:	bl	10e5c <fileno@plt>
   11b28:	mov	r2, r6
   11b2c:	mov	r3, r7
   11b30:	strd	r6, [sp]
   11b34:	str	r4, [sp, #8]
   11b38:	bl	10cc4 <posix_fadvise64@plt>
   11b3c:	add	sp, sp, #16
   11b40:	ldr	r4, [sp]
   11b44:	ldrd	r6, [sp, #4]
   11b48:	add	sp, sp, #12
   11b4c:	pop	{pc}		; (ldr pc, [sp], #4)
   11b50:	strd	r4, [sp, #-12]!
   11b54:	mov	r4, r0
   11b58:	str	lr, [sp, #8]
   11b5c:	sub	sp, sp, #12
   11b60:	bl	10e5c <fileno@plt>
   11b64:	cmp	r0, #0
   11b68:	mov	r0, r4
   11b6c:	blt	11bf0 <__assert_fail@plt+0xcec>
   11b70:	bl	10dd8 <__freading@plt>
   11b74:	cmp	r0, #0
   11b78:	bne	11bbc <__assert_fail@plt+0xcb8>
   11b7c:	mov	r0, r4
   11b80:	bl	11c04 <__assert_fail@plt+0xd00>
   11b84:	cmp	r0, #0
   11b88:	beq	11bec <__assert_fail@plt+0xce8>
   11b8c:	bl	10e2c <__errno_location@plt>
   11b90:	mov	r5, r0
   11b94:	mov	r0, r4
   11b98:	ldr	r4, [r5]
   11b9c:	bl	10e74 <fclose@plt>
   11ba0:	cmp	r4, #0
   11ba4:	mvnne	r0, #0
   11ba8:	strne	r4, [r5]
   11bac:	add	sp, sp, #12
   11bb0:	ldrd	r4, [sp]
   11bb4:	add	sp, sp, #8
   11bb8:	pop	{pc}		; (ldr pc, [sp], #4)
   11bbc:	mov	r0, r4
   11bc0:	bl	10e5c <fileno@plt>
   11bc4:	mov	r1, #1
   11bc8:	mov	r2, #0
   11bcc:	mov	r3, #0
   11bd0:	str	r1, [sp]
   11bd4:	bl	10d84 <lseek64@plt>
   11bd8:	mvn	r3, #0
   11bdc:	mvn	r2, #0
   11be0:	cmp	r1, r3
   11be4:	cmpeq	r0, r2
   11be8:	bne	11b7c <__assert_fail@plt+0xc78>
   11bec:	mov	r0, r4
   11bf0:	add	sp, sp, #12
   11bf4:	ldrd	r4, [sp]
   11bf8:	ldr	lr, [sp, #8]
   11bfc:	add	sp, sp, #12
   11c00:	b	10e74 <fclose@plt>
   11c04:	str	r4, [sp, #-8]!
   11c08:	subs	r4, r0, #0
   11c0c:	str	lr, [sp, #4]
   11c10:	sub	sp, sp, #8
   11c14:	beq	11c30 <__assert_fail@plt+0xd2c>
   11c18:	bl	10dd8 <__freading@plt>
   11c1c:	cmp	r0, #0
   11c20:	beq	11c30 <__assert_fail@plt+0xd2c>
   11c24:	ldr	r3, [r4]
   11c28:	tst	r3, #256	; 0x100
   11c2c:	bne	11c48 <__assert_fail@plt+0xd44>
   11c30:	mov	r0, r4
   11c34:	add	sp, sp, #8
   11c38:	ldr	r4, [sp]
   11c3c:	ldr	lr, [sp, #4]
   11c40:	add	sp, sp, #8
   11c44:	b	10cd0 <fflush@plt>
   11c48:	mov	r1, #1
   11c4c:	mov	r2, #0
   11c50:	mov	r3, #0
   11c54:	mov	r0, r4
   11c58:	str	r1, [sp]
   11c5c:	bl	11c64 <__assert_fail@plt+0xd60>
   11c60:	b	11c30 <__assert_fail@plt+0xd2c>
   11c64:	strd	r4, [sp, #-24]!	; 0xffffffe8
   11c68:	mov	r4, r0
   11c6c:	ldr	ip, [r0, #4]
   11c70:	strd	r6, [sp, #8]
   11c74:	str	lr, [sp, #20]
   11c78:	ldr	lr, [r0, #8]
   11c7c:	str	r8, [sp, #16]
   11c80:	sub	sp, sp, #8
   11c84:	ldr	r5, [sp, #32]
   11c88:	cmp	lr, ip
   11c8c:	beq	11cb4 <__assert_fail@plt+0xdb0>
   11c90:	mov	r0, r4
   11c94:	str	r5, [sp, #32]
   11c98:	add	sp, sp, #8
   11c9c:	ldrd	r4, [sp]
   11ca0:	ldrd	r6, [sp, #8]
   11ca4:	ldr	r8, [sp, #16]
   11ca8:	ldr	lr, [sp, #20]
   11cac:	add	sp, sp, #24
   11cb0:	b	10e80 <fseeko64@plt>
   11cb4:	ldr	ip, [r0, #16]
   11cb8:	ldr	lr, [r0, #20]
   11cbc:	cmp	lr, ip
   11cc0:	bne	11c90 <__assert_fail@plt+0xd8c>
   11cc4:	ldr	r8, [r0, #36]	; 0x24
   11cc8:	cmp	r8, #0
   11ccc:	bne	11c90 <__assert_fail@plt+0xd8c>
   11cd0:	mov	r6, r2
   11cd4:	mov	r7, r3
   11cd8:	bl	10e5c <fileno@plt>
   11cdc:	mov	r2, r6
   11ce0:	mov	r3, r7
   11ce4:	str	r5, [sp]
   11ce8:	bl	10d84 <lseek64@plt>
   11cec:	mvn	r3, #0
   11cf0:	mvn	r2, #0
   11cf4:	cmp	r1, r3
   11cf8:	cmpeq	r0, r2
   11cfc:	beq	11d2c <__assert_fail@plt+0xe28>
   11d00:	ldr	r3, [r4]
   11d04:	strd	r0, [r4, #80]	; 0x50
   11d08:	bic	r3, r3, #16
   11d0c:	str	r3, [r4]
   11d10:	mov	r0, r8
   11d14:	add	sp, sp, #8
   11d18:	ldrd	r4, [sp]
   11d1c:	ldrd	r6, [sp, #8]
   11d20:	ldr	r8, [sp, #16]
   11d24:	add	sp, sp, #20
   11d28:	pop	{pc}		; (ldr pc, [sp], #4)
   11d2c:	mvn	r8, #0
   11d30:	b	11d10 <__assert_fail@plt+0xe0c>
   11d34:	strd	r4, [sp, #-16]!
   11d38:	subs	r4, r0, #0
   11d3c:	str	r6, [sp, #8]
   11d40:	str	lr, [sp, #12]
   11d44:	beq	11ddc <__assert_fail@plt+0xed8>
   11d48:	mov	r1, #47	; 0x2f
   11d4c:	bl	10eb0 <strrchr@plt>
   11d50:	subs	r5, r0, #0
   11d54:	beq	11db4 <__assert_fail@plt+0xeb0>
   11d58:	add	r6, r5, #1
   11d5c:	sub	r3, r6, r4
   11d60:	cmp	r3, #6
   11d64:	ble	11db4 <__assert_fail@plt+0xeb0>
   11d68:	movw	r1, #24316	; 0x5efc
   11d6c:	movt	r1, #1
   11d70:	mov	r2, #7
   11d74:	sub	r0, r5, #6
   11d78:	bl	10eec <strncmp@plt>
   11d7c:	cmp	r0, #0
   11d80:	bne	11db4 <__assert_fail@plt+0xeb0>
   11d84:	movw	r1, #24324	; 0x5f04
   11d88:	movt	r1, #1
   11d8c:	mov	r2, #3
   11d90:	mov	r0, r6
   11d94:	bl	10eec <strncmp@plt>
   11d98:	cmp	r0, #0
   11d9c:	movne	r4, r6
   11da0:	bne	11db4 <__assert_fail@plt+0xeb0>
   11da4:	add	r4, r5, #4
   11da8:	movw	r3, #28976	; 0x7130
   11dac:	movt	r3, #2
   11db0:	str	r4, [r3]
   11db4:	movw	r2, #29040	; 0x7170
   11db8:	movt	r2, #2
   11dbc:	ldr	r6, [sp, #8]
   11dc0:	movw	r3, #28980	; 0x7134
   11dc4:	movt	r3, #2
   11dc8:	str	r4, [r2]
   11dcc:	str	r4, [r3]
   11dd0:	ldrd	r4, [sp]
   11dd4:	add	sp, sp, #12
   11dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   11ddc:	movw	r3, #28992	; 0x7140
   11de0:	movt	r3, #2
   11de4:	movw	r0, #24260	; 0x5ec4
   11de8:	movt	r0, #1
   11dec:	ldr	r3, [r3]
   11df0:	mov	r2, #55	; 0x37
   11df4:	mov	r1, #1
   11df8:	bl	10d78 <fwrite@plt>
   11dfc:	bl	10ef8 <abort@plt>
   11e00:	strd	r4, [sp, #-16]!
   11e04:	mov	r4, #0
   11e08:	mov	r5, #0
   11e0c:	cmp	r1, #10
   11e10:	str	r6, [sp, #8]
   11e14:	strd	r4, [r0]
   11e18:	strd	r4, [r0, #8]
   11e1c:	str	lr, [sp, #12]
   11e20:	strd	r4, [r0, #16]
   11e24:	strd	r4, [r0, #24]
   11e28:	strd	r4, [r0, #32]
   11e2c:	strd	r4, [r0, #40]	; 0x28
   11e30:	beq	11e48 <__assert_fail@plt+0xf44>
   11e34:	ldrd	r4, [sp]
   11e38:	str	r1, [r0]
   11e3c:	ldr	r6, [sp, #8]
   11e40:	add	sp, sp, #12
   11e44:	pop	{pc}		; (ldr pc, [sp], #4)
   11e48:	bl	10ef8 <abort@plt>
   11e4c:	mov	r2, #5
   11e50:	strd	r4, [sp, #-16]!
   11e54:	mov	r5, r0
   11e58:	str	r6, [sp, #8]
   11e5c:	mov	r6, r1
   11e60:	mov	r1, r0
   11e64:	mov	r0, #0
   11e68:	str	lr, [sp, #12]
   11e6c:	bl	10d48 <dcgettext@plt>
   11e70:	cmp	r5, r0
   11e74:	mov	r4, r0
   11e78:	beq	11e90 <__assert_fail@plt+0xf8c>
   11e7c:	mov	r0, r4
   11e80:	ldrd	r4, [sp]
   11e84:	ldr	r6, [sp, #8]
   11e88:	add	sp, sp, #12
   11e8c:	pop	{pc}		; (ldr pc, [sp], #4)
   11e90:	bl	15770 <__assert_fail@plt+0x486c>
   11e94:	ldrb	r3, [r0]
   11e98:	bic	r3, r3, #32
   11e9c:	cmp	r3, #85	; 0x55
   11ea0:	bne	11f08 <__assert_fail@plt+0x1004>
   11ea4:	ldrb	r3, [r0, #1]
   11ea8:	bic	r3, r3, #32
   11eac:	cmp	r3, #84	; 0x54
   11eb0:	bne	11f88 <__assert_fail@plt+0x1084>
   11eb4:	ldrb	r3, [r0, #2]
   11eb8:	bic	r3, r3, #32
   11ebc:	cmp	r3, #70	; 0x46
   11ec0:	bne	11f88 <__assert_fail@plt+0x1084>
   11ec4:	ldrb	r3, [r0, #3]
   11ec8:	cmp	r3, #45	; 0x2d
   11ecc:	bne	11f88 <__assert_fail@plt+0x1084>
   11ed0:	ldrb	r3, [r0, #4]
   11ed4:	cmp	r3, #56	; 0x38
   11ed8:	bne	11f88 <__assert_fail@plt+0x1084>
   11edc:	ldrb	r3, [r0, #5]
   11ee0:	cmp	r3, #0
   11ee4:	bne	11f88 <__assert_fail@plt+0x1084>
   11ee8:	ldrb	r2, [r4]
   11eec:	movw	r3, #24416	; 0x5f60
   11ef0:	movt	r3, #1
   11ef4:	movw	r4, #24428	; 0x5f6c
   11ef8:	movt	r4, #1
   11efc:	cmp	r2, #96	; 0x60
   11f00:	movne	r4, r3
   11f04:	b	11e7c <__assert_fail@plt+0xf78>
   11f08:	cmp	r3, #71	; 0x47
   11f0c:	bne	11f88 <__assert_fail@plt+0x1084>
   11f10:	ldrb	r3, [r0, #1]
   11f14:	bic	r3, r3, #32
   11f18:	cmp	r3, #66	; 0x42
   11f1c:	bne	11f88 <__assert_fail@plt+0x1084>
   11f20:	ldrb	r3, [r0, #2]
   11f24:	cmp	r3, #49	; 0x31
   11f28:	bne	11f88 <__assert_fail@plt+0x1084>
   11f2c:	ldrb	r3, [r0, #3]
   11f30:	cmp	r3, #56	; 0x38
   11f34:	bne	11f88 <__assert_fail@plt+0x1084>
   11f38:	ldrb	r3, [r0, #4]
   11f3c:	cmp	r3, #48	; 0x30
   11f40:	bne	11f88 <__assert_fail@plt+0x1084>
   11f44:	ldrb	r3, [r0, #5]
   11f48:	cmp	r3, #51	; 0x33
   11f4c:	bne	11f88 <__assert_fail@plt+0x1084>
   11f50:	ldrb	r3, [r0, #6]
   11f54:	cmp	r3, #48	; 0x30
   11f58:	bne	11f88 <__assert_fail@plt+0x1084>
   11f5c:	ldrb	r3, [r0, #7]
   11f60:	cmp	r3, #0
   11f64:	bne	11f88 <__assert_fail@plt+0x1084>
   11f68:	ldrb	r2, [r4]
   11f6c:	movw	r3, #24420	; 0x5f64
   11f70:	movt	r3, #1
   11f74:	movw	r4, #24424	; 0x5f68
   11f78:	movt	r4, #1
   11f7c:	cmp	r2, #96	; 0x60
   11f80:	movne	r4, r3
   11f84:	b	11e7c <__assert_fail@plt+0xf78>
   11f88:	movw	r3, #24432	; 0x5f70
   11f8c:	movt	r3, #1
   11f90:	cmp	r6, #9
   11f94:	movw	r4, #24412	; 0x5f5c
   11f98:	movt	r4, #1
   11f9c:	movne	r4, r3
   11fa0:	b	11e7c <__assert_fail@plt+0xf78>
   11fa4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11fa8:	strd	r6, [sp, #8]
   11fac:	strd	r8, [sp, #16]
   11fb0:	strd	sl, [sp, #24]
   11fb4:	mov	fp, r0
   11fb8:	mov	sl, r1
   11fbc:	str	lr, [sp, #32]
   11fc0:	sub	sp, sp, #116	; 0x74
   11fc4:	ldr	r8, [sp, #152]	; 0x98
   11fc8:	str	r3, [sp, #28]
   11fcc:	ldr	r3, [sp, #156]	; 0x9c
   11fd0:	str	r2, [sp, #32]
   11fd4:	and	r4, r3, #2
   11fd8:	ubfx	r3, r3, #1, #1
   11fdc:	str	r3, [sp, #44]	; 0x2c
   11fe0:	bl	10d90 <__ctype_get_mb_cur_max@plt>
   11fe4:	str	r0, [sp, #64]	; 0x40
   11fe8:	cmp	r8, #10
   11fec:	ldrls	pc, [pc, r8, lsl #2]
   11ff0:	b	13760 <__assert_fail@plt+0x285c>
   11ff4:	strdeq	r2, [r1], -r8
   11ff8:	muleq	r1, r4, r4
   11ffc:	andeq	r2, r1, r0, ror sl
   12000:			; <UNDEFINED> instruction: 0x000124b4
   12004:	andeq	r2, r1, ip, asr r3
   12008:	andeq	r2, r1, r8, lsr #7
   1200c:	andeq	r2, r1, r8, lsr #8
   12010:	andeq	r2, r1, r4, ror #8
   12014:	andeq	r2, r1, r0, lsr #32
   12018:	andeq	r2, r1, r0, lsr #32
   1201c:	andeq	r2, r1, r0, lsr #32
   12020:	cmp	r8, #10
   12024:	beq	12050 <__assert_fail@plt+0x114c>
   12028:	mov	r1, r8
   1202c:	movw	r0, #24436	; 0x5f74
   12030:	movt	r0, #1
   12034:	bl	11e4c <__assert_fail@plt+0xf48>
   12038:	mov	r1, r8
   1203c:	str	r0, [sp, #164]	; 0xa4
   12040:	movw	r0, #24432	; 0x5f70
   12044:	movt	r0, #1
   12048:	bl	11e4c <__assert_fail@plt+0xf48>
   1204c:	str	r0, [sp, #168]	; 0xa8
   12050:	cmp	r4, #0
   12054:	movne	r4, #0
   12058:	beq	1343c <__assert_fail@plt+0x2538>
   1205c:	mov	r3, #1
   12060:	mov	r5, #0
   12064:	ldr	r0, [sp, #168]	; 0xa8
   12068:	str	r3, [sp, #36]	; 0x24
   1206c:	str	r3, [sp, #40]	; 0x28
   12070:	str	r5, [sp, #68]	; 0x44
   12074:	bl	10e14 <strlen@plt>
   12078:	ldr	r3, [sp, #168]	; 0xa8
   1207c:	str	r5, [sp, #48]	; 0x30
   12080:	str	r0, [sp, #56]	; 0x38
   12084:	str	r3, [sp, #60]	; 0x3c
   12088:	str	r5, [sp, #72]	; 0x48
   1208c:	str	r8, [sp, #152]	; 0x98
   12090:	mov	r8, fp
   12094:	mov	r9, #0
   12098:	ldr	fp, [sp, #152]	; 0x98
   1209c:	ldr	r3, [sp, #28]
   120a0:	cmn	r3, #1
   120a4:	beq	12604 <__assert_fail@plt+0x1700>
   120a8:	ldr	r3, [sp, #28]
   120ac:	subs	r6, r3, r9
   120b0:	movne	r6, #1
   120b4:	cmp	r6, #0
   120b8:	beq	1261c <__assert_fail@plt+0x1718>
   120bc:	ldr	r0, [sp, #32]
   120c0:	ldr	r7, [sp, #40]	; 0x28
   120c4:	add	r3, r0, r9
   120c8:	cmp	fp, #2
   120cc:	moveq	r7, #0
   120d0:	andne	r7, r7, #1
   120d4:	str	r3, [sp, #52]	; 0x34
   120d8:	cmp	r7, #0
   120dc:	beq	12ab8 <__assert_fail@plt+0x1bb4>
   120e0:	ldr	r2, [sp, #56]	; 0x38
   120e4:	cmp	r2, #0
   120e8:	beq	12d54 <__assert_fail@plt+0x1e50>
   120ec:	ldr	r1, [sp, #28]
   120f0:	cmp	r2, #1
   120f4:	mov	r3, r2
   120f8:	movls	r3, #0
   120fc:	movhi	r3, #1
   12100:	add	r5, r9, r2
   12104:	cmn	r1, #1
   12108:	movne	r3, #0
   1210c:	cmp	r3, #0
   12110:	beq	1211c <__assert_fail@plt+0x1218>
   12114:	bl	10e14 <strlen@plt>
   12118:	str	r0, [sp, #28]
   1211c:	ldr	r3, [sp, #28]
   12120:	cmp	r5, r3
   12124:	bhi	12d54 <__assert_fail@plt+0x1e50>
   12128:	ldr	r0, [sp, #52]	; 0x34
   1212c:	ldr	r2, [sp, #56]	; 0x38
   12130:	ldr	r1, [sp, #60]	; 0x3c
   12134:	bl	10d30 <memcmp@plt>
   12138:	cmp	r0, #0
   1213c:	bne	12d54 <__assert_fail@plt+0x1e50>
   12140:	ldr	r3, [sp, #44]	; 0x2c
   12144:	cmp	r3, #0
   12148:	bne	13684 <__assert_fail@plt+0x2780>
   1214c:	ldr	r3, [sp, #52]	; 0x34
   12150:	ldrb	r5, [r3]
   12154:	cmp	r5, #126	; 0x7e
   12158:	ldrls	pc, [pc, r5, lsl #2]
   1215c:	b	12a14 <__assert_fail@plt+0x1b10>
   12160:	andeq	r2, r1, r8, lsl r9
   12164:	andeq	r2, r1, r4, lsl sl
   12168:	andeq	r2, r1, r4, lsl sl
   1216c:	andeq	r2, r1, r4, lsl sl
   12170:	andeq	r2, r1, r4, lsl sl
   12174:	andeq	r2, r1, r4, lsl sl
   12178:	andeq	r2, r1, r4, lsl sl
   1217c:	andeq	r2, r1, ip, ror #17
   12180:	andeq	r2, r1, r4, ror #17
   12184:	andeq	r2, r1, ip, lsr #16
   12188:	ldrdeq	r2, [r1], -r8
   1218c:	andeq	r2, r1, r4, lsr #16
   12190:			; <UNDEFINED> instruction: 0x000128b4
   12194:	andeq	r2, r1, r0, lsl #18
   12198:	andeq	r2, r1, r4, lsl sl
   1219c:	andeq	r2, r1, r4, lsl sl
   121a0:	andeq	r2, r1, r4, lsl sl
   121a4:	andeq	r2, r1, r4, lsl sl
   121a8:	andeq	r2, r1, r4, lsl sl
   121ac:	andeq	r2, r1, r4, lsl sl
   121b0:	andeq	r2, r1, r4, lsl sl
   121b4:	andeq	r2, r1, r4, lsl sl
   121b8:	andeq	r2, r1, r4, lsl sl
   121bc:	andeq	r2, r1, r4, lsl sl
   121c0:	andeq	r2, r1, r4, lsl sl
   121c4:	andeq	r2, r1, r4, lsl sl
   121c8:	andeq	r2, r1, r4, lsl sl
   121cc:	andeq	r2, r1, r4, lsl sl
   121d0:	andeq	r2, r1, r4, lsl sl
   121d4:	andeq	r2, r1, r4, lsl sl
   121d8:	andeq	r2, r1, r4, lsl sl
   121dc:	andeq	r2, r1, r4, lsl sl
   121e0:	strdeq	r2, [r1], -r0
   121e4:	strdeq	r2, [r1], -r8
   121e8:	strdeq	r2, [r1], -r8
   121ec:	ldrdeq	r2, [r1], -r4
   121f0:	strdeq	r2, [r1], -r8
   121f4:	andeq	r2, r1, r8, lsl #20
   121f8:	strdeq	r2, [r1], -r8
   121fc:	andeq	r2, r1, r4, asr r7
   12200:	strdeq	r2, [r1], -r8
   12204:	strdeq	r2, [r1], -r8
   12208:	strdeq	r2, [r1], -r8
   1220c:	andeq	r2, r1, r8, lsl #20
   12210:	andeq	r2, r1, r8, lsl #20
   12214:	andeq	r2, r1, r8, lsl #20
   12218:	andeq	r2, r1, r8, lsl #20
   1221c:	andeq	r2, r1, r8, lsl #20
   12220:	andeq	r2, r1, r8, lsl #20
   12224:	andeq	r2, r1, r8, lsl #20
   12228:	andeq	r2, r1, r8, lsl #20
   1222c:	andeq	r2, r1, r8, lsl #20
   12230:	andeq	r2, r1, r8, lsl #20
   12234:	andeq	r2, r1, r8, lsl #20
   12238:	andeq	r2, r1, r8, lsl #20
   1223c:	andeq	r2, r1, r8, lsl #20
   12240:	andeq	r2, r1, r8, lsl #20
   12244:	andeq	r2, r1, r8, lsl #20
   12248:	andeq	r2, r1, r8, lsl #20
   1224c:	strdeq	r2, [r1], -r8
   12250:	strdeq	r2, [r1], -r8
   12254:	strdeq	r2, [r1], -r8
   12258:	strdeq	r2, [r1], -r8
   1225c:	andeq	r2, r1, r8, lsr #14
   12260:	andeq	r2, r1, r4, lsl sl
   12264:	andeq	r2, r1, r8, lsl #20
   12268:	andeq	r2, r1, r8, lsl #20
   1226c:	andeq	r2, r1, r8, lsl #20
   12270:	andeq	r2, r1, r8, lsl #20
   12274:	andeq	r2, r1, r8, lsl #20
   12278:	andeq	r2, r1, r8, lsl #20
   1227c:	andeq	r2, r1, r8, lsl #20
   12280:	andeq	r2, r1, r8, lsl #20
   12284:	andeq	r2, r1, r8, lsl #20
   12288:	andeq	r2, r1, r8, lsl #20
   1228c:	andeq	r2, r1, r8, lsl #20
   12290:	andeq	r2, r1, r8, lsl #20
   12294:	andeq	r2, r1, r8, lsl #20
   12298:	andeq	r2, r1, r8, lsl #20
   1229c:	andeq	r2, r1, r8, lsl #20
   122a0:	andeq	r2, r1, r8, lsl #20
   122a4:	andeq	r2, r1, r8, lsl #20
   122a8:	andeq	r2, r1, r8, lsl #20
   122ac:	andeq	r2, r1, r8, lsl #20
   122b0:	andeq	r2, r1, r8, lsl #20
   122b4:	andeq	r2, r1, r8, lsl #20
   122b8:	andeq	r2, r1, r8, lsl #20
   122bc:	andeq	r2, r1, r8, lsl #20
   122c0:	andeq	r2, r1, r8, lsl #20
   122c4:	andeq	r2, r1, r8, lsl #20
   122c8:	andeq	r2, r1, r8, lsl #20
   122cc:	strdeq	r2, [r1], -r8
   122d0:	ldrdeq	r2, [r1], -r0
   122d4:	andeq	r2, r1, r8, lsl #20
   122d8:	strdeq	r2, [r1], -r8
   122dc:	andeq	r2, r1, r8, lsl #20
   122e0:	strdeq	r2, [r1], -r8
   122e4:	andeq	r2, r1, r8, lsl #20
   122e8:	andeq	r2, r1, r8, lsl #20
   122ec:	andeq	r2, r1, r8, lsl #20
   122f0:	andeq	r2, r1, r8, lsl #20
   122f4:	andeq	r2, r1, r8, lsl #20
   122f8:	andeq	r2, r1, r8, lsl #20
   122fc:	andeq	r2, r1, r8, lsl #20
   12300:	andeq	r2, r1, r8, lsl #20
   12304:	andeq	r2, r1, r8, lsl #20
   12308:	andeq	r2, r1, r8, lsl #20
   1230c:	andeq	r2, r1, r8, lsl #20
   12310:	andeq	r2, r1, r8, lsl #20
   12314:	andeq	r2, r1, r8, lsl #20
   12318:	andeq	r2, r1, r8, lsl #20
   1231c:	andeq	r2, r1, r8, lsl #20
   12320:	andeq	r2, r1, r8, lsl #20
   12324:	andeq	r2, r1, r8, lsl #20
   12328:	andeq	r2, r1, r8, lsl #20
   1232c:	andeq	r2, r1, r8, lsl #20
   12330:	andeq	r2, r1, r8, lsl #20
   12334:	andeq	r2, r1, r8, lsl #20
   12338:	andeq	r2, r1, r8, lsl #20
   1233c:	andeq	r2, r1, r8, lsl #20
   12340:	andeq	r2, r1, r8, lsl #20
   12344:	andeq	r2, r1, r8, lsl #20
   12348:	andeq	r2, r1, r8, lsl #20
   1234c:	strdeq	r2, [r1], -r4
   12350:	strdeq	r2, [r1], -r8
   12354:	strdeq	r2, [r1], -r4
   12358:	ldrdeq	r2, [r1], -r4
   1235c:	cmp	r4, #0
   12360:	moveq	r3, #1
   12364:	streq	r3, [sp, #40]	; 0x28
   12368:	beq	12a7c <__assert_fail@plt+0x1b78>
   1236c:	mov	r3, #0
   12370:	mov	r2, #1
   12374:	mov	r4, r3
   12378:	str	r2, [sp, #36]	; 0x24
   1237c:	str	r2, [sp, #44]	; 0x2c
   12380:	str	r2, [sp, #56]	; 0x38
   12384:	str	r3, [sp, #68]	; 0x44
   12388:	movw	r3, #24432	; 0x5f70
   1238c:	movt	r3, #1
   12390:	str	r4, [sp, #40]	; 0x28
   12394:	mov	r8, #2
   12398:	str	r4, [sp, #48]	; 0x30
   1239c:	str	r3, [sp, #60]	; 0x3c
   123a0:	str	r4, [sp, #72]	; 0x48
   123a4:	b	1208c <__assert_fail@plt+0x1188>
   123a8:	cmp	r4, #0
   123ac:	bne	135f8 <__assert_fail@plt+0x26f4>
   123b0:	cmp	sl, #0
   123b4:	beq	133b8 <__assert_fail@plt+0x24b4>
   123b8:	mov	r3, #34	; 0x22
   123bc:	mov	r1, r4
   123c0:	mov	r2, #1
   123c4:	strb	r3, [fp]
   123c8:	movw	r3, #24412	; 0x5f5c
   123cc:	movt	r3, #1
   123d0:	mov	r4, r2
   123d4:	str	r2, [sp, #36]	; 0x24
   123d8:	str	r2, [sp, #40]	; 0x28
   123dc:	str	r1, [sp, #44]	; 0x2c
   123e0:	str	r1, [sp, #48]	; 0x30
   123e4:	str	r2, [sp, #56]	; 0x38
   123e8:	str	r3, [sp, #60]	; 0x3c
   123ec:	str	r1, [sp, #68]	; 0x44
   123f0:	str	r1, [sp, #72]	; 0x48
   123f4:	b	1208c <__assert_fail@plt+0x1188>
   123f8:	mov	r3, #0
   123fc:	mov	r4, r8
   12400:	str	r3, [sp, #40]	; 0x28
   12404:	str	r3, [sp, #44]	; 0x2c
   12408:	str	r3, [sp, #48]	; 0x30
   1240c:	str	r8, [sp, #56]	; 0x38
   12410:	str	r3, [sp, #60]	; 0x3c
   12414:	str	r3, [sp, #68]	; 0x44
   12418:	mov	r3, #1
   1241c:	str	r3, [sp, #36]	; 0x24
   12420:	str	r8, [sp, #72]	; 0x48
   12424:	b	1208c <__assert_fail@plt+0x1188>
   12428:	mov	r3, #1
   1242c:	mov	r2, #0
   12430:	mov	r4, r2
   12434:	mov	r8, #5
   12438:	str	r3, [sp, #36]	; 0x24
   1243c:	str	r3, [sp, #40]	; 0x28
   12440:	str	r3, [sp, #44]	; 0x2c
   12444:	str	r2, [sp, #48]	; 0x30
   12448:	str	r3, [sp, #56]	; 0x38
   1244c:	movw	r3, #24412	; 0x5f5c
   12450:	movt	r3, #1
   12454:	str	r3, [sp, #60]	; 0x3c
   12458:	str	r2, [sp, #68]	; 0x44
   1245c:	str	r2, [sp, #72]	; 0x48
   12460:	b	1208c <__assert_fail@plt+0x1188>
   12464:	mov	r3, #0
   12468:	mov	r2, #1
   1246c:	mov	r4, r3
   12470:	str	r2, [sp, #36]	; 0x24
   12474:	str	r2, [sp, #40]	; 0x28
   12478:	str	r3, [sp, #44]	; 0x2c
   1247c:	str	r3, [sp, #48]	; 0x30
   12480:	str	r3, [sp, #56]	; 0x38
   12484:	str	r3, [sp, #60]	; 0x3c
   12488:	str	r3, [sp, #68]	; 0x44
   1248c:	str	r3, [sp, #72]	; 0x48
   12490:	b	1208c <__assert_fail@plt+0x1188>
   12494:	mov	r2, #1
   12498:	mov	r3, #0
   1249c:	mov	r4, r3
   124a0:	str	r2, [sp, #36]	; 0x24
   124a4:	str	r2, [sp, #44]	; 0x2c
   124a8:	str	r8, [sp, #56]	; 0x38
   124ac:	str	r3, [sp, #68]	; 0x44
   124b0:	b	12388 <__assert_fail@plt+0x1484>
   124b4:	mov	r3, #1
   124b8:	mov	r2, #0
   124bc:	mov	r4, r2
   124c0:	mov	r8, #2
   124c4:	str	r3, [sp, #36]	; 0x24
   124c8:	str	r3, [sp, #40]	; 0x28
   124cc:	str	r3, [sp, #44]	; 0x2c
   124d0:	str	r2, [sp, #48]	; 0x30
   124d4:	str	r3, [sp, #56]	; 0x38
   124d8:	movw	r3, #24432	; 0x5f70
   124dc:	movt	r3, #1
   124e0:	str	r3, [sp, #60]	; 0x3c
   124e4:	str	r2, [sp, #68]	; 0x44
   124e8:	str	r2, [sp, #72]	; 0x48
   124ec:	b	1208c <__assert_fail@plt+0x1188>
   124f0:	mov	r7, #0
   124f4:	ldr	r3, [sp, #28]
   124f8:	cmn	r3, #1
   124fc:	beq	12fd4 <__assert_fail@plt+0x20d0>
   12500:	ldr	r3, [sp, #28]
   12504:	subs	r2, r3, #1
   12508:	movne	r2, #1
   1250c:	sub	r3, fp, #2
   12510:	cmp	r2, #0
   12514:	clz	r3, r3
   12518:	lsr	r3, r3, #5
   1251c:	bne	12528 <__assert_fail@plt+0x1624>
   12520:	cmp	r9, #0
   12524:	beq	12d34 <__assert_fail@plt+0x1e30>
   12528:	mov	r6, #0
   1252c:	ldr	r2, [sp, #40]	; 0x28
   12530:	eor	r2, r2, #1
   12534:	orrs	r3, r3, r2
   12538:	bne	12710 <__assert_fail@plt+0x180c>
   1253c:	ldr	r2, [sp, #160]	; 0xa0
   12540:	cmp	r2, #0
   12544:	beq	12564 <__assert_fail@plt+0x1660>
   12548:	ldr	r0, [sp, #160]	; 0xa0
   1254c:	ubfx	r1, r5, #5, #8
   12550:	and	r2, r5, #31
   12554:	ldr	r1, [r0, r1, lsl #2]
   12558:	lsr	r2, r1, r2
   1255c:	tst	r2, #1
   12560:	bne	1256c <__assert_fail@plt+0x1668>
   12564:	cmp	r7, #0
   12568:	beq	127dc <__assert_fail@plt+0x18d8>
   1256c:	ldr	r2, [sp, #44]	; 0x2c
   12570:	sub	r3, fp, #2
   12574:	clz	r3, r3
   12578:	lsr	r3, r3, #5
   1257c:	cmp	r2, #0
   12580:	bne	13328 <__assert_fail@plt+0x2424>
   12584:	ldr	r2, [sp, #48]	; 0x30
   12588:	eor	r2, r2, #1
   1258c:	ands	r3, r3, r2
   12590:	beq	125c8 <__assert_fail@plt+0x16c4>
   12594:	cmp	sl, r4
   12598:	str	r3, [sp, #48]	; 0x30
   1259c:	movhi	r2, #39	; 0x27
   125a0:	strbhi	r2, [r8, r4]
   125a4:	add	r2, r4, #1
   125a8:	cmp	sl, r2
   125ac:	movhi	r1, #36	; 0x24
   125b0:	strbhi	r1, [r8, r2]
   125b4:	add	r2, r4, #2
   125b8:	add	r4, r4, #3
   125bc:	cmp	sl, r2
   125c0:	movhi	r1, #39	; 0x27
   125c4:	strbhi	r1, [r8, r2]
   125c8:	cmp	r4, sl
   125cc:	add	r9, r9, #1
   125d0:	movcc	r3, #92	; 0x5c
   125d4:	strbcc	r3, [r8, r4]
   125d8:	add	r4, r4, #1
   125dc:	cmp	r4, sl
   125e0:	ldr	r3, [sp, #36]	; 0x24
   125e4:	strbcc	r5, [r8, r4]
   125e8:	cmp	r6, #0
   125ec:	add	r4, r4, #1
   125f0:	moveq	r3, #0
   125f4:	str	r3, [sp, #36]	; 0x24
   125f8:	ldr	r3, [sp, #28]
   125fc:	cmn	r3, #1
   12600:	bne	120a8 <__assert_fail@plt+0x11a4>
   12604:	ldr	r3, [sp, #32]
   12608:	ldrb	r6, [r3, r9]
   1260c:	adds	r6, r6, #0
   12610:	movne	r6, #1
   12614:	cmp	r6, #0
   12618:	bne	120bc <__assert_fail@plt+0x11b8>
   1261c:	str	fp, [sp, #152]	; 0x98
   12620:	mov	fp, r8
   12624:	cmp	r4, #0
   12628:	ldr	r1, [sp, #44]	; 0x2c
   1262c:	movne	r3, #0
   12630:	ldr	r8, [sp, #152]	; 0x98
   12634:	sub	r2, r8, #2
   12638:	clz	r2, r2
   1263c:	lsr	r2, r2, #5
   12640:	andeq	r3, r2, r1
   12644:	cmp	r3, #0
   12648:	bne	13704 <__assert_fail@plt+0x2800>
   1264c:	eor	r3, r1, #1
   12650:	ands	r2, r2, r3
   12654:	beq	13630 <__assert_fail@plt+0x272c>
   12658:	ldr	r3, [sp, #68]	; 0x44
   1265c:	cmp	r3, #0
   12660:	beq	13634 <__assert_fail@plt+0x2730>
   12664:	ldr	r3, [sp, #36]	; 0x24
   12668:	cmp	r3, #0
   1266c:	bne	136c0 <__assert_fail@plt+0x27bc>
   12670:	ldr	r3, [sp, #72]	; 0x48
   12674:	adds	r3, r3, #0
   12678:	movne	r3, #1
   1267c:	cmp	sl, #0
   12680:	movne	r3, #0
   12684:	cmp	r3, #0
   12688:	ldreq	r2, [sp, #68]	; 0x44
   1268c:	beq	13634 <__assert_fail@plt+0x2730>
   12690:	ldr	r2, [sp, #72]	; 0x48
   12694:	str	r3, [sp, #68]	; 0x44
   12698:	movw	r3, #24432	; 0x5f70
   1269c:	movt	r3, #1
   126a0:	mov	r1, #39	; 0x27
   126a4:	mov	r4, #1
   126a8:	ldr	sl, [sp, #72]	; 0x48
   126ac:	mov	r8, #2
   126b0:	str	r3, [sp, #60]	; 0x3c
   126b4:	mov	r3, #0
   126b8:	strb	r1, [fp]
   126bc:	str	r3, [sp, #44]	; 0x2c
   126c0:	str	r4, [sp, #56]	; 0x38
   126c4:	str	r2, [sp, #72]	; 0x48
   126c8:	b	1208c <__assert_fail@plt+0x1188>
   126cc:	mov	r7, #0
   126d0:	cmp	fp, #2
   126d4:	beq	12fb4 <__assert_fail@plt+0x20b0>
   126d8:	ldr	r2, [sp, #40]	; 0x28
   126dc:	ldr	r3, [sp, #56]	; 0x38
   126e0:	ldr	r1, [sp, #44]	; 0x2c
   126e4:	cmp	r3, #0
   126e8:	moveq	r3, #0
   126ec:	andne	r3, r2, r1
   126f0:	cmp	r3, #0
   126f4:	moveq	r5, #92	; 0x5c
   126f8:	moveq	r3, r5
   126fc:	bne	12fc0 <__assert_fail@plt+0x20bc>
   12700:	ldr	r2, [sp, #40]	; 0x28
   12704:	cmp	r2, #0
   12708:	bne	133fc <__assert_fail@plt+0x24f8>
   1270c:	mov	r6, #0
   12710:	ldr	r3, [sp, #44]	; 0x2c
   12714:	cmp	r3, #0
   12718:	beq	12fac <__assert_fail@plt+0x20a8>
   1271c:	mov	r3, #0
   12720:	b	1253c <__assert_fail@plt+0x1638>
   12724:	mov	r7, #0
   12728:	cmp	fp, #2
   1272c:	beq	13024 <__assert_fail@plt+0x2120>
   12730:	cmp	fp, #5
   12734:	beq	12fe8 <__assert_fail@plt+0x20e4>
   12738:	sub	r3, fp, #2
   1273c:	mov	r6, #0
   12740:	clz	r3, r3
   12744:	mov	r5, #63	; 0x3f
   12748:	lsr	r3, r3, #5
   1274c:	b	1252c <__assert_fail@plt+0x1628>
   12750:	mov	r7, #0
   12754:	cmp	fp, #2
   12758:	movne	r3, #0
   1275c:	movne	r5, #39	; 0x27
   12760:	strne	r6, [sp, #68]	; 0x44
   12764:	bne	1252c <__assert_fail@plt+0x1628>
   12768:	ldr	r3, [sp, #44]	; 0x2c
   1276c:	cmp	r3, #0
   12770:	bne	1342c <__assert_fail@plt+0x2528>
   12774:	ldr	r3, [sp, #72]	; 0x48
   12778:	cmp	sl, #0
   1277c:	clz	r3, r3
   12780:	lsr	r3, r3, #5
   12784:	moveq	r3, #0
   12788:	cmp	r3, #0
   1278c:	bne	13358 <__assert_fail@plt+0x2454>
   12790:	cmp	sl, r4
   12794:	movhi	r3, #39	; 0x27
   12798:	strbhi	r3, [r8, r4]
   1279c:	add	r3, r4, #1
   127a0:	cmp	sl, r3
   127a4:	movhi	r2, #92	; 0x5c
   127a8:	strbhi	r2, [r8, r3]
   127ac:	add	r3, r4, #2
   127b0:	cmp	sl, r3
   127b4:	bls	127c0 <__assert_fail@plt+0x18bc>
   127b8:	mov	r2, #39	; 0x27
   127bc:	strb	r2, [r8, r3]
   127c0:	mov	r3, #0
   127c4:	cmp	r7, #0
   127c8:	add	r4, r4, #3
   127cc:	mov	r5, #39	; 0x27
   127d0:	str	r3, [sp, #48]	; 0x30
   127d4:	str	r6, [sp, #68]	; 0x44
   127d8:	bne	1256c <__assert_fail@plt+0x1668>
   127dc:	ldr	r2, [sp, #48]	; 0x30
   127e0:	eor	r3, r3, #1
   127e4:	add	r9, r9, #1
   127e8:	and	r3, r3, r2
   127ec:	uxtb	r3, r3
   127f0:	cmp	r3, #0
   127f4:	beq	125dc <__assert_fail@plt+0x16d8>
   127f8:	cmp	sl, r4
   127fc:	movhi	r3, #39	; 0x27
   12800:	strbhi	r3, [r8, r4]
   12804:	add	r3, r4, #1
   12808:	add	r4, r4, #2
   1280c:	cmp	sl, r3
   12810:	movhi	r2, #39	; 0x27
   12814:	strbhi	r2, [r8, r3]
   12818:	mov	r3, #0
   1281c:	str	r3, [sp, #48]	; 0x30
   12820:	b	125dc <__assert_fail@plt+0x16d8>
   12824:	mov	r3, #118	; 0x76
   12828:	b	12700 <__assert_fail@plt+0x17fc>
   1282c:	mov	r3, #116	; 0x74
   12830:	ldr	r2, [sp, #44]	; 0x2c
   12834:	cmp	fp, #2
   12838:	movne	r2, #0
   1283c:	andeq	r2, r2, #1
   12840:	cmp	r2, #0
   12844:	beq	12700 <__assert_fail@plt+0x17fc>
   12848:	mov	fp, r8
   1284c:	mov	r8, #2
   12850:	ldr	r3, [sp, #40]	; 0x28
   12854:	cmp	r3, #0
   12858:	movne	r8, #4
   1285c:	mov	lr, #0
   12860:	mov	r0, fp
   12864:	ldr	r2, [sp, #32]
   12868:	ldr	r3, [sp, #156]	; 0x9c
   1286c:	ldr	r1, [sp, #164]	; 0xa4
   12870:	bic	ip, r3, #2
   12874:	ldr	r3, [sp, #28]
   12878:	stm	sp, {r8, ip, lr}
   1287c:	ldr	ip, [sp, #168]	; 0xa8
   12880:	str	r1, [sp, #12]
   12884:	mov	r1, sl
   12888:	str	ip, [sp, #16]
   1288c:	bl	11fa4 <__assert_fail@plt+0x10a0>
   12890:	mov	r4, r0
   12894:	mov	r0, r4
   12898:	add	sp, sp, #116	; 0x74
   1289c:	ldrd	r4, [sp]
   128a0:	ldrd	r6, [sp, #8]
   128a4:	ldrd	r8, [sp, #16]
   128a8:	ldrd	sl, [sp, #24]
   128ac:	add	sp, sp, #32
   128b0:	pop	{pc}		; (ldr pc, [sp], #4)
   128b4:	mov	r5, #102	; 0x66
   128b8:	ldr	r2, [sp, #44]	; 0x2c
   128bc:	sub	r3, fp, #2
   128c0:	clz	r3, r3
   128c4:	lsr	r3, r3, #5
   128c8:	cmp	r2, #0
   128cc:	bne	13328 <__assert_fail@plt+0x2424>
   128d0:	mov	r6, r2
   128d4:	b	125c8 <__assert_fail@plt+0x16c4>
   128d8:	mov	r5, #110	; 0x6e
   128dc:	mov	r6, #0
   128e0:	b	1256c <__assert_fail@plt+0x1668>
   128e4:	mov	r5, #98	; 0x62
   128e8:	b	128b8 <__assert_fail@plt+0x19b4>
   128ec:	mov	r5, #97	; 0x61
   128f0:	b	128b8 <__assert_fail@plt+0x19b4>
   128f4:	mov	r7, #0
   128f8:	mov	r6, #0
   128fc:	b	1271c <__assert_fail@plt+0x1818>
   12900:	mov	r5, #114	; 0x72
   12904:	b	128dc <__assert_fail@plt+0x19d8>
   12908:	ldr	r3, [sp, #44]	; 0x2c
   1290c:	cmp	r3, #0
   12910:	bne	136a0 <__assert_fail@plt+0x279c>
   12914:	mov	r7, r3
   12918:	ldr	r3, [sp, #48]	; 0x30
   1291c:	sub	r2, fp, #2
   12920:	clz	r2, r2
   12924:	lsr	r2, r2, #5
   12928:	eor	r3, r3, #1
   1292c:	ands	r3, r2, r3
   12930:	beq	13344 <__assert_fail@plt+0x2440>
   12934:	cmp	sl, r4
   12938:	movhi	r1, #39	; 0x27
   1293c:	strbhi	r1, [r8, r4]
   12940:	add	r1, r4, #1
   12944:	cmp	sl, r1
   12948:	movhi	r0, #36	; 0x24
   1294c:	strbhi	r0, [r8, r1]
   12950:	add	r1, r4, #2
   12954:	cmp	sl, r1
   12958:	movhi	r0, #39	; 0x27
   1295c:	strbhi	r0, [r8, r1]
   12960:	add	r1, r4, #3
   12964:	cmp	sl, r1
   12968:	bls	1339c <__assert_fail@plt+0x2498>
   1296c:	mov	r4, r1
   12970:	mov	r1, #92	; 0x5c
   12974:	mov	r0, r4
   12978:	str	r3, [sp, #48]	; 0x30
   1297c:	strb	r1, [r8, r4]
   12980:	cmp	fp, #2
   12984:	add	r4, r4, #1
   12988:	beq	133ec <__assert_fail@plt+0x24e8>
   1298c:	ldr	r1, [sp, #28]
   12990:	add	r3, r9, #1
   12994:	cmp	r3, r1
   12998:	bcs	129b0 <__assert_fail@plt+0x1aac>
   1299c:	ldr	r1, [sp, #32]
   129a0:	ldrb	r3, [r1, r3]
   129a4:	sub	r3, r3, #48	; 0x30
   129a8:	cmp	r3, #9
   129ac:	bls	13404 <__assert_fail@plt+0x2500>
   129b0:	mov	r5, #48	; 0x30
   129b4:	ldr	r3, [sp, #40]	; 0x28
   129b8:	eor	r3, r3, #1
   129bc:	orrs	r2, r2, r3
   129c0:	mov	r3, r6
   129c4:	moveq	r6, r2
   129c8:	beq	1253c <__assert_fail@plt+0x1638>
   129cc:	mov	r6, #0
   129d0:	b	12564 <__assert_fail@plt+0x1660>
   129d4:	cmp	r9, #0
   129d8:	mov	r2, r7
   129dc:	bne	12f7c <__assert_fail@plt+0x2078>
   129e0:	mov	r6, r7
   129e4:	mov	r3, r9
   129e8:	mov	r7, r2
   129ec:	b	1252c <__assert_fail@plt+0x1628>
   129f0:	mov	r2, r7
   129f4:	mov	r6, r7
   129f8:	mov	r3, #0
   129fc:	mov	r7, r2
   12a00:	mov	r5, #32
   12a04:	b	1252c <__assert_fail@plt+0x1628>
   12a08:	mov	r6, r7
   12a0c:	b	1271c <__assert_fail@plt+0x1818>
   12a10:	mov	r7, #0
   12a14:	ldr	r3, [sp, #64]	; 0x40
   12a18:	cmp	r3, #1
   12a1c:	bne	1303c <__assert_fail@plt+0x2138>
   12a20:	bl	10dfc <__ctype_b_loc@plt>
   12a24:	ldr	r2, [r0]
   12a28:	sxth	r3, r5
   12a2c:	lsl	r3, r3, #1
   12a30:	ldr	r1, [sp, #64]	; 0x40
   12a34:	ldrh	r3, [r2, r3]
   12a38:	mov	ip, r1
   12a3c:	and	r3, r3, #16384	; 0x4000
   12a40:	cmp	r3, #0
   12a44:	ldr	r3, [sp, #40]	; 0x28
   12a48:	movne	r6, #1
   12a4c:	moveq	r6, #0
   12a50:	movne	r2, #0
   12a54:	andeq	r2, r3, #1
   12a58:	cmp	r2, #0
   12a5c:	bne	13384 <__assert_fail@plt+0x2480>
   12a60:	sub	r3, fp, #2
   12a64:	clz	r3, r3
   12a68:	lsr	r3, r3, #5
   12a6c:	b	1252c <__assert_fail@plt+0x1628>
   12a70:	cmp	r4, #0
   12a74:	bne	13714 <__assert_fail@plt+0x2810>
   12a78:	str	r4, [sp, #40]	; 0x28
   12a7c:	cmp	sl, #0
   12a80:	bne	13744 <__assert_fail@plt+0x2840>
   12a84:	mov	r3, #1
   12a88:	movw	r2, #24432	; 0x5f70
   12a8c:	movt	r2, #1
   12a90:	mov	r4, r3
   12a94:	mov	r8, #2
   12a98:	str	r3, [sp, #36]	; 0x24
   12a9c:	str	sl, [sp, #44]	; 0x2c
   12aa0:	str	sl, [sp, #48]	; 0x30
   12aa4:	str	r3, [sp, #56]	; 0x38
   12aa8:	str	r2, [sp, #60]	; 0x3c
   12aac:	str	sl, [sp, #68]	; 0x44
   12ab0:	str	sl, [sp, #72]	; 0x48
   12ab4:	b	1208c <__assert_fail@plt+0x1188>
   12ab8:	ldr	r3, [sp, #32]
   12abc:	ldrb	r5, [r3, r9]
   12ac0:	cmp	r5, #126	; 0x7e
   12ac4:	ldrls	pc, [pc, r5, lsl #2]
   12ac8:	b	12a14 <__assert_fail@plt+0x1b10>
   12acc:	strdeq	r2, [r1], -r0
   12ad0:	andeq	r2, r1, r4, lsl sl
   12ad4:	andeq	r2, r1, r4, lsl sl
   12ad8:	andeq	r2, r1, r4, lsl sl
   12adc:	andeq	r2, r1, r4, lsl sl
   12ae0:	andeq	r2, r1, r4, lsl sl
   12ae4:	andeq	r2, r1, r4, lsl sl
   12ae8:	andeq	r2, r1, r8, ror #25
   12aec:	andeq	r2, r1, r0, ror #25
   12af0:	andeq	r2, r1, ip, lsr #16
   12af4:	ldrdeq	r2, [r1], -r8
   12af8:	andeq	r2, r1, r4, lsr #16
   12afc:	ldrdeq	r2, [r1], -r0
   12b00:	andeq	r2, r1, r8, asr #25
   12b04:	andeq	r2, r1, r4, lsl sl
   12b08:	andeq	r2, r1, r4, lsl sl
   12b0c:	andeq	r2, r1, r4, lsl sl
   12b10:	andeq	r2, r1, r4, lsl sl
   12b14:	andeq	r2, r1, r4, lsl sl
   12b18:	andeq	r2, r1, r4, lsl sl
   12b1c:	andeq	r2, r1, r4, lsl sl
   12b20:	andeq	r2, r1, r4, lsl sl
   12b24:	andeq	r2, r1, r4, lsl sl
   12b28:	andeq	r2, r1, r4, lsl sl
   12b2c:	andeq	r2, r1, r4, lsl sl
   12b30:	andeq	r2, r1, r4, lsl sl
   12b34:	andeq	r2, r1, r4, lsl sl
   12b38:	andeq	r2, r1, r4, lsl sl
   12b3c:	andeq	r2, r1, r4, lsl sl
   12b40:	andeq	r2, r1, r4, lsl sl
   12b44:	andeq	r2, r1, r4, lsl sl
   12b48:	andeq	r2, r1, r4, lsl sl
   12b4c:	andeq	r2, r1, r4, asr #26
   12b50:	andeq	r2, r1, r4, lsr #26
   12b54:	andeq	r2, r1, r4, lsr #26
   12b58:	andeq	r2, r1, r4, lsl sp
   12b5c:	andeq	r2, r1, r4, lsr #26
   12b60:	andeq	r2, r1, r0, ror #20
   12b64:	andeq	r2, r1, r4, lsr #26
   12b68:	andeq	r2, r1, r4, asr r7
   12b6c:	andeq	r2, r1, r4, lsr #26
   12b70:	andeq	r2, r1, r4, lsr #26
   12b74:	andeq	r2, r1, r4, lsr #26
   12b78:	andeq	r2, r1, r0, ror #20
   12b7c:	andeq	r2, r1, r0, ror #20
   12b80:	andeq	r2, r1, r0, ror #20
   12b84:	andeq	r2, r1, r0, ror #20
   12b88:	andeq	r2, r1, r0, ror #20
   12b8c:	andeq	r2, r1, r0, ror #20
   12b90:	andeq	r2, r1, r0, ror #20
   12b94:	andeq	r2, r1, r0, ror #20
   12b98:	andeq	r2, r1, r0, ror #20
   12b9c:	andeq	r2, r1, r0, ror #20
   12ba0:	andeq	r2, r1, r0, ror #20
   12ba4:	andeq	r2, r1, r0, ror #20
   12ba8:	andeq	r2, r1, r0, ror #20
   12bac:	andeq	r2, r1, r0, ror #20
   12bb0:	andeq	r2, r1, r0, ror #20
   12bb4:	andeq	r2, r1, r0, ror #20
   12bb8:	andeq	r2, r1, r4, lsr #26
   12bbc:	andeq	r2, r1, r4, lsr #26
   12bc0:	andeq	r2, r1, r4, lsr #26
   12bc4:	andeq	r2, r1, r4, lsr #26
   12bc8:	andeq	r2, r1, r8, lsr #14
   12bcc:	andeq	r2, r1, r4, lsl sl
   12bd0:	andeq	r2, r1, r0, ror #20
   12bd4:	andeq	r2, r1, r0, ror #20
   12bd8:	andeq	r2, r1, r0, ror #20
   12bdc:	andeq	r2, r1, r0, ror #20
   12be0:	andeq	r2, r1, r0, ror #20
   12be4:	andeq	r2, r1, r0, ror #20
   12be8:	andeq	r2, r1, r0, ror #20
   12bec:	andeq	r2, r1, r0, ror #20
   12bf0:	andeq	r2, r1, r0, ror #20
   12bf4:	andeq	r2, r1, r0, ror #20
   12bf8:	andeq	r2, r1, r0, ror #20
   12bfc:	andeq	r2, r1, r0, ror #20
   12c00:	andeq	r2, r1, r0, ror #20
   12c04:	andeq	r2, r1, r0, ror #20
   12c08:	andeq	r2, r1, r0, ror #20
   12c0c:	andeq	r2, r1, r0, ror #20
   12c10:	andeq	r2, r1, r0, ror #20
   12c14:	andeq	r2, r1, r0, ror #20
   12c18:	andeq	r2, r1, r0, ror #20
   12c1c:	andeq	r2, r1, r0, ror #20
   12c20:	andeq	r2, r1, r0, ror #20
   12c24:	andeq	r2, r1, r0, ror #20
   12c28:	andeq	r2, r1, r0, ror #20
   12c2c:	andeq	r2, r1, r0, ror #20
   12c30:	andeq	r2, r1, r0, ror #20
   12c34:	andeq	r2, r1, r0, ror #20
   12c38:	andeq	r2, r1, r4, lsr #26
   12c3c:	ldrdeq	r2, [r1], -r0
   12c40:	andeq	r2, r1, r0, ror #20
   12c44:	andeq	r2, r1, r4, lsr #26
   12c48:	andeq	r2, r1, r0, ror #20
   12c4c:	andeq	r2, r1, r4, lsr #26
   12c50:	andeq	r2, r1, r0, ror #20
   12c54:	andeq	r2, r1, r0, ror #20
   12c58:	andeq	r2, r1, r0, ror #20
   12c5c:	andeq	r2, r1, r0, ror #20
   12c60:	andeq	r2, r1, r0, ror #20
   12c64:	andeq	r2, r1, r0, ror #20
   12c68:	andeq	r2, r1, r0, ror #20
   12c6c:	andeq	r2, r1, r0, ror #20
   12c70:	andeq	r2, r1, r0, ror #20
   12c74:	andeq	r2, r1, r0, ror #20
   12c78:	andeq	r2, r1, r0, ror #20
   12c7c:	andeq	r2, r1, r0, ror #20
   12c80:	andeq	r2, r1, r0, ror #20
   12c84:	andeq	r2, r1, r0, ror #20
   12c88:	andeq	r2, r1, r0, ror #20
   12c8c:	andeq	r2, r1, r0, ror #20
   12c90:	andeq	r2, r1, r0, ror #20
   12c94:	andeq	r2, r1, r0, ror #20
   12c98:	andeq	r2, r1, r0, ror #20
   12c9c:	andeq	r2, r1, r0, ror #20
   12ca0:	andeq	r2, r1, r0, ror #20
   12ca4:	andeq	r2, r1, r0, ror #20
   12ca8:	andeq	r2, r1, r0, ror #20
   12cac:	andeq	r2, r1, r0, ror #20
   12cb0:	andeq	r2, r1, r0, ror #20
   12cb4:	andeq	r2, r1, r0, ror #20
   12cb8:	strdeq	r2, [r1], -r4
   12cbc:	andeq	r2, r1, r4, lsr #26
   12cc0:	strdeq	r2, [r1], -r4
   12cc4:	andeq	r2, r1, r4, lsl sp
   12cc8:	mov	r3, #114	; 0x72
   12ccc:	b	12830 <__assert_fail@plt+0x192c>
   12cd0:	mov	r3, #102	; 0x66
   12cd4:	b	12700 <__assert_fail@plt+0x17fc>
   12cd8:	mov	r3, #110	; 0x6e
   12cdc:	b	12830 <__assert_fail@plt+0x192c>
   12ce0:	mov	r3, #98	; 0x62
   12ce4:	b	12700 <__assert_fail@plt+0x17fc>
   12ce8:	mov	r3, #97	; 0x61
   12cec:	b	12700 <__assert_fail@plt+0x17fc>
   12cf0:	ldr	r3, [sp, #40]	; 0x28
   12cf4:	cmp	r3, #0
   12cf8:	bne	12908 <__assert_fail@plt+0x1a04>
   12cfc:	ldr	r3, [sp, #156]	; 0x9c
   12d00:	tst	r3, #1
   12d04:	addne	r9, r9, #1
   12d08:	bne	1209c <__assert_fail@plt+0x1198>
   12d0c:	ldr	r7, [sp, #40]	; 0x28
   12d10:	b	1270c <__assert_fail@plt+0x1808>
   12d14:	sub	r3, fp, #2
   12d18:	clz	r3, r3
   12d1c:	lsr	r3, r3, #5
   12d20:	b	12520 <__assert_fail@plt+0x161c>
   12d24:	sub	r3, fp, #2
   12d28:	mov	r6, #0
   12d2c:	clz	r3, r3
   12d30:	lsr	r3, r3, #5
   12d34:	ldr	r2, [sp, #44]	; 0x2c
   12d38:	tst	r2, r3
   12d3c:	beq	1252c <__assert_fail@plt+0x1628>
   12d40:	b	12848 <__assert_fail@plt+0x1944>
   12d44:	sub	r3, fp, #2
   12d48:	clz	r3, r3
   12d4c:	lsr	r3, r3, #5
   12d50:	b	12d34 <__assert_fail@plt+0x1e30>
   12d54:	ldr	r3, [sp, #52]	; 0x34
   12d58:	ldrb	r5, [r3]
   12d5c:	cmp	r5, #126	; 0x7e
   12d60:	ldrls	pc, [pc, r5, lsl #2]
   12d64:	b	12a10 <__assert_fail@plt+0x1b0c>
   12d68:	andeq	r2, r1, r8, lsl #18
   12d6c:	andeq	r2, r1, r0, lsl sl
   12d70:	andeq	r2, r1, r0, lsl sl
   12d74:	andeq	r2, r1, r0, lsl sl
   12d78:	andeq	r2, r1, r0, lsl sl
   12d7c:	andeq	r2, r1, r0, lsl sl
   12d80:	andeq	r2, r1, r0, lsl sl
   12d84:	andeq	r2, r1, ip, ror #17
   12d88:	andeq	r2, r1, r4, ror #17
   12d8c:	andeq	r2, r1, r0, lsr #31
   12d90:	ldrdeq	r2, [r1], -r8
   12d94:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12d98:			; <UNDEFINED> instruction: 0x000128b4
   12d9c:	andeq	r2, r1, r0, lsl #18
   12da0:	andeq	r2, r1, r0, lsl sl
   12da4:	andeq	r2, r1, r0, lsl sl
   12da8:	andeq	r2, r1, r0, lsl sl
   12dac:	andeq	r2, r1, r0, lsl sl
   12db0:	andeq	r2, r1, r0, lsl sl
   12db4:	andeq	r2, r1, r0, lsl sl
   12db8:	andeq	r2, r1, r0, lsl sl
   12dbc:	andeq	r2, r1, r0, lsl sl
   12dc0:	andeq	r2, r1, r0, lsl sl
   12dc4:	andeq	r2, r1, r0, lsl sl
   12dc8:	andeq	r2, r1, r0, lsl sl
   12dcc:	andeq	r2, r1, r0, lsl sl
   12dd0:	andeq	r2, r1, r0, lsl sl
   12dd4:	andeq	r2, r1, r0, lsl sl
   12dd8:	andeq	r2, r1, r0, lsl sl
   12ddc:	andeq	r2, r1, r0, lsl sl
   12de0:	andeq	r2, r1, r0, lsl sl
   12de4:	andeq	r2, r1, r0, lsl sl
   12de8:	andeq	r2, r1, ip, lsl #31
   12dec:	strdeq	r2, [r1], -r4
   12df0:	strdeq	r2, [r1], -r4
   12df4:	andeq	r2, r1, r0, ror pc
   12df8:	strdeq	r2, [r1], -r4
   12dfc:	andeq	r2, r1, r4, ror #30
   12e00:	strdeq	r2, [r1], -r4
   12e04:	andeq	r2, r1, r0, asr r7
   12e08:	strdeq	r2, [r1], -r4
   12e0c:	strdeq	r2, [r1], -r4
   12e10:	strdeq	r2, [r1], -r4
   12e14:	andeq	r2, r1, r4, ror #30
   12e18:	andeq	r2, r1, r4, ror #30
   12e1c:	andeq	r2, r1, r4, ror #30
   12e20:	andeq	r2, r1, r4, ror #30
   12e24:	andeq	r2, r1, r4, ror #30
   12e28:	andeq	r2, r1, r4, ror #30
   12e2c:	andeq	r2, r1, r4, ror #30
   12e30:	andeq	r2, r1, r4, ror #30
   12e34:	andeq	r2, r1, r4, ror #30
   12e38:	andeq	r2, r1, r4, ror #30
   12e3c:	andeq	r2, r1, r4, ror #30
   12e40:	andeq	r2, r1, r4, ror #30
   12e44:	andeq	r2, r1, r4, ror #30
   12e48:	andeq	r2, r1, r4, ror #30
   12e4c:	andeq	r2, r1, r4, ror #30
   12e50:	andeq	r2, r1, r4, ror #30
   12e54:	strdeq	r2, [r1], -r4
   12e58:	strdeq	r2, [r1], -r4
   12e5c:	strdeq	r2, [r1], -r4
   12e60:	strdeq	r2, [r1], -r4
   12e64:	andeq	r2, r1, r4, lsr #14
   12e68:	andeq	r2, r1, r0, lsl sl
   12e6c:	andeq	r2, r1, r4, ror #30
   12e70:	andeq	r2, r1, r4, ror #30
   12e74:	andeq	r2, r1, r4, ror #30
   12e78:	andeq	r2, r1, r4, ror #30
   12e7c:	andeq	r2, r1, r4, ror #30
   12e80:	andeq	r2, r1, r4, ror #30
   12e84:	andeq	r2, r1, r4, ror #30
   12e88:	andeq	r2, r1, r4, ror #30
   12e8c:	andeq	r2, r1, r4, ror #30
   12e90:	andeq	r2, r1, r4, ror #30
   12e94:	andeq	r2, r1, r4, ror #30
   12e98:	andeq	r2, r1, r4, ror #30
   12e9c:	andeq	r2, r1, r4, ror #30
   12ea0:	andeq	r2, r1, r4, ror #30
   12ea4:	andeq	r2, r1, r4, ror #30
   12ea8:	andeq	r2, r1, r4, ror #30
   12eac:	andeq	r2, r1, r4, ror #30
   12eb0:	andeq	r2, r1, r4, ror #30
   12eb4:	andeq	r2, r1, r4, ror #30
   12eb8:	andeq	r2, r1, r4, ror #30
   12ebc:	andeq	r2, r1, r4, ror #30
   12ec0:	andeq	r2, r1, r4, ror #30
   12ec4:	andeq	r2, r1, r4, ror #30
   12ec8:	andeq	r2, r1, r4, ror #30
   12ecc:	andeq	r2, r1, r4, ror #30
   12ed0:	andeq	r2, r1, r4, ror #30
   12ed4:	strdeq	r2, [r1], -r4
   12ed8:	andeq	r2, r1, ip, asr #13
   12edc:	andeq	r2, r1, r4, ror #30
   12ee0:	strdeq	r2, [r1], -r4
   12ee4:	andeq	r2, r1, r4, ror #30
   12ee8:	strdeq	r2, [r1], -r4
   12eec:	andeq	r2, r1, r4, ror #30
   12ef0:	andeq	r2, r1, r4, ror #30
   12ef4:	andeq	r2, r1, r4, ror #30
   12ef8:	andeq	r2, r1, r4, ror #30
   12efc:	andeq	r2, r1, r4, ror #30
   12f00:	andeq	r2, r1, r4, ror #30
   12f04:	andeq	r2, r1, r4, ror #30
   12f08:	andeq	r2, r1, r4, ror #30
   12f0c:	andeq	r2, r1, r4, ror #30
   12f10:	andeq	r2, r1, r4, ror #30
   12f14:	andeq	r2, r1, r4, ror #30
   12f18:	andeq	r2, r1, r4, ror #30
   12f1c:	andeq	r2, r1, r4, ror #30
   12f20:	andeq	r2, r1, r4, ror #30
   12f24:	andeq	r2, r1, r4, ror #30
   12f28:	andeq	r2, r1, r4, ror #30
   12f2c:	andeq	r2, r1, r4, ror #30
   12f30:	andeq	r2, r1, r4, ror #30
   12f34:	andeq	r2, r1, r4, ror #30
   12f38:	andeq	r2, r1, r4, ror #30
   12f3c:	andeq	r2, r1, r4, ror #30
   12f40:	andeq	r2, r1, r4, ror #30
   12f44:	andeq	r2, r1, r4, ror #30
   12f48:	andeq	r2, r1, r4, ror #30
   12f4c:	andeq	r2, r1, r4, ror #30
   12f50:	andeq	r2, r1, r4, ror #30
   12f54:	strdeq	r2, [r1], -r0
   12f58:	strdeq	r2, [r1], -r4
   12f5c:	strdeq	r2, [r1], -r0
   12f60:	andeq	r2, r1, r0, ror pc
   12f64:	mov	r6, r7
   12f68:	mov	r7, #0
   12f6c:	b	1271c <__assert_fail@plt+0x1818>
   12f70:	cmp	r9, #0
   12f74:	mov	r2, #0
   12f78:	beq	129e0 <__assert_fail@plt+0x1adc>
   12f7c:	mov	r6, #0
   12f80:	mov	r7, r2
   12f84:	mov	r3, r6
   12f88:	b	1253c <__assert_fail@plt+0x1638>
   12f8c:	mov	r2, #0
   12f90:	b	129f4 <__assert_fail@plt+0x1af0>
   12f94:	mov	r7, #0
   12f98:	mov	r3, #118	; 0x76
   12f9c:	b	12700 <__assert_fail@plt+0x17fc>
   12fa0:	mov	r7, #0
   12fa4:	mov	r3, #116	; 0x74
   12fa8:	b	12830 <__assert_fail@plt+0x192c>
   12fac:	ldr	r3, [sp, #44]	; 0x2c
   12fb0:	b	12564 <__assert_fail@plt+0x1660>
   12fb4:	ldr	r3, [sp, #44]	; 0x2c
   12fb8:	cmp	r3, #0
   12fbc:	bne	1342c <__assert_fail@plt+0x2528>
   12fc0:	add	r9, r9, #1
   12fc4:	mov	r6, #0
   12fc8:	ldr	r3, [sp, #48]	; 0x30
   12fcc:	mov	r5, #92	; 0x5c
   12fd0:	b	127f0 <__assert_fail@plt+0x18ec>
   12fd4:	ldr	r3, [sp, #32]
   12fd8:	ldrb	r2, [r3, #1]
   12fdc:	adds	r2, r2, #0
   12fe0:	movne	r2, #1
   12fe4:	b	1250c <__assert_fail@plt+0x1608>
   12fe8:	ldr	r3, [sp, #156]	; 0x9c
   12fec:	ands	r3, r3, #4
   12ff0:	beq	13018 <__assert_fail@plt+0x2114>
   12ff4:	ldr	r2, [sp, #28]
   12ff8:	add	r3, r9, #2
   12ffc:	cmp	r3, r2
   13000:	bcs	13014 <__assert_fail@plt+0x2110>
   13004:	ldr	r2, [sp, #52]	; 0x34
   13008:	ldrb	r5, [r2, #1]
   1300c:	cmp	r5, #63	; 0x3f
   13010:	beq	13490 <__assert_fail@plt+0x258c>
   13014:	mov	r3, #0
   13018:	mov	r5, #63	; 0x3f
   1301c:	mov	r6, r3
   13020:	b	1252c <__assert_fail@plt+0x1628>
   13024:	ldr	r3, [sp, #44]	; 0x2c
   13028:	cmp	r3, #0
   1302c:	bne	1342c <__assert_fail@plt+0x2528>
   13030:	mov	r6, r3
   13034:	mov	r5, #63	; 0x3f
   13038:	b	12564 <__assert_fail@plt+0x1660>
   1303c:	ldr	r1, [sp, #28]
   13040:	mov	r2, #0
   13044:	mov	r3, #0
   13048:	strd	r2, [sp, #104]	; 0x68
   1304c:	cmn	r1, #1
   13050:	bne	13060 <__assert_fail@plt+0x215c>
   13054:	ldr	r0, [sp, #32]
   13058:	bl	10e14 <strlen@plt>
   1305c:	str	r0, [sp, #28]
   13060:	str	r8, [sp, #76]	; 0x4c
   13064:	mov	r3, #0
   13068:	str	sl, [sp, #80]	; 0x50
   1306c:	ldr	sl, [sp, #32]
   13070:	str	r5, [sp, #84]	; 0x54
   13074:	mov	r5, r3
   13078:	ldr	r8, [sp, #44]	; 0x2c
   1307c:	str	r7, [sp, #88]	; 0x58
   13080:	str	r4, [sp, #92]	; 0x5c
   13084:	ldr	r2, [sp, #28]
   13088:	add	r4, r9, r5
   1308c:	add	r3, sp, #104	; 0x68
   13090:	add	r7, sl, r4
   13094:	add	r0, sp, #100	; 0x64
   13098:	mov	r1, r7
   1309c:	sub	r2, r2, r4
   130a0:	bl	157bc <__assert_fail@plt+0x48b8>
   130a4:	subs	r1, r0, #0
   130a8:	beq	130f4 <__assert_fail@plt+0x21f0>
   130ac:	cmn	r1, #1
   130b0:	beq	1346c <__assert_fail@plt+0x2568>
   130b4:	cmn	r1, #2
   130b8:	beq	1358c <__assert_fail@plt+0x2688>
   130bc:	cmp	fp, #2
   130c0:	movne	r3, #0
   130c4:	andeq	r3, r8, #1
   130c8:	cmp	r3, #0
   130cc:	bne	13258 <__assert_fail@plt+0x2354>
   130d0:	ldr	r0, [sp, #100]	; 0x64
   130d4:	add	r5, r5, r1
   130d8:	bl	10d6c <iswprint@plt>
   130dc:	cmp	r0, #0
   130e0:	add	r0, sp, #104	; 0x68
   130e4:	moveq	r6, #0
   130e8:	bl	10d18 <mbsinit@plt>
   130ec:	cmp	r0, #0
   130f0:	beq	13084 <__assert_fail@plt+0x2180>
   130f4:	ldr	r3, [sp, #40]	; 0x28
   130f8:	mov	ip, r5
   130fc:	eor	r2, r6, #1
   13100:	ldr	r8, [sp, #76]	; 0x4c
   13104:	ldr	sl, [sp, #80]	; 0x50
   13108:	and	r2, r2, r3
   1310c:	ldr	r5, [sp, #84]	; 0x54
   13110:	ldr	r7, [sp, #88]	; 0x58
   13114:	ldr	r4, [sp, #92]	; 0x5c
   13118:	cmp	ip, #1
   1311c:	bls	12a58 <__assert_fail@plt+0x1b54>
   13120:	add	r1, ip, r9
   13124:	mov	r0, #39	; 0x27
   13128:	ldr	lr, [sp, #52]	; 0x34
   1312c:	mov	ip, #0
   13130:	str	r6, [sp, #52]	; 0x34
   13134:	ldr	r6, [sp, #48]	; 0x30
   13138:	b	131f4 <__assert_fail@plt+0x22f0>
   1313c:	ldr	ip, [sp, #44]	; 0x2c
   13140:	sub	r3, fp, #2
   13144:	clz	r3, r3
   13148:	lsr	r3, r3, #5
   1314c:	cmp	ip, #0
   13150:	bne	13364 <__assert_fail@plt+0x2460>
   13154:	eor	ip, r6, #1
   13158:	ands	r3, r3, ip
   1315c:	beq	1318c <__assert_fail@plt+0x2288>
   13160:	cmp	sl, r4
   13164:	add	ip, r4, #1
   13168:	strbhi	r0, [r8, r4]
   1316c:	cmp	sl, ip
   13170:	movhi	r6, #36	; 0x24
   13174:	strbhi	r6, [r8, ip]
   13178:	add	ip, r4, #2
   1317c:	mov	r6, r3
   13180:	cmp	sl, ip
   13184:	add	r4, r4, #3
   13188:	strbhi	r0, [r8, ip]
   1318c:	cmp	sl, r4
   13190:	movhi	r3, #92	; 0x5c
   13194:	strbhi	r3, [r8, r4]
   13198:	add	r3, r4, #1
   1319c:	cmp	sl, r3
   131a0:	bls	131b0 <__assert_fail@plt+0x22ac>
   131a4:	lsr	ip, r5, #6
   131a8:	add	ip, ip, #48	; 0x30
   131ac:	strb	ip, [r8, r3]
   131b0:	add	r3, r4, #2
   131b4:	cmp	sl, r3
   131b8:	bls	131c8 <__assert_fail@plt+0x22c4>
   131bc:	ubfx	ip, r5, #3, #3
   131c0:	add	ip, ip, #48	; 0x30
   131c4:	strb	ip, [r8, r3]
   131c8:	add	r9, r9, #1
   131cc:	and	r5, r5, #7
   131d0:	cmp	r9, r1
   131d4:	add	r5, r5, #48	; 0x30
   131d8:	add	r4, r4, #3
   131dc:	bcs	13390 <__assert_fail@plt+0x248c>
   131e0:	mov	ip, r2
   131e4:	cmp	sl, r4
   131e8:	strbhi	r5, [r8, r4]
   131ec:	add	r4, r4, #1
   131f0:	ldrb	r5, [lr, #1]!
   131f4:	cmp	r2, #0
   131f8:	bne	1313c <__assert_fail@plt+0x2238>
   131fc:	eor	r3, ip, #1
   13200:	cmp	r7, #0
   13204:	and	r3, r3, r6
   13208:	uxtb	r3, r3
   1320c:	beq	13220 <__assert_fail@plt+0x231c>
   13210:	cmp	sl, r4
   13214:	movhi	r7, #92	; 0x5c
   13218:	strbhi	r7, [r8, r4]
   1321c:	add	r4, r4, #1
   13220:	add	r9, r9, #1
   13224:	cmp	r9, r1
   13228:	bcs	13378 <__assert_fail@plt+0x2474>
   1322c:	cmp	r3, #0
   13230:	beq	133b0 <__assert_fail@plt+0x24ac>
   13234:	cmp	sl, r4
   13238:	add	r3, r4, #1
   1323c:	mov	r7, #0
   13240:	strbhi	r0, [r8, r4]
   13244:	cmp	sl, r3
   13248:	add	r4, r4, #2
   1324c:	mov	r6, r7
   13250:	strbhi	r0, [r8, r3]
   13254:	b	131e4 <__assert_fail@plt+0x22e0>
   13258:	cmp	r1, #1
   1325c:	beq	130d0 <__assert_fail@plt+0x21cc>
   13260:	add	r2, r4, #1
   13264:	add	r3, sl, r1
   13268:	add	r2, sl, r2
   1326c:	add	r4, r3, r4
   13270:	ldrb	r3, [r2], #1
   13274:	sub	r3, r3, #91	; 0x5b
   13278:	cmp	r3, #33	; 0x21
   1327c:	ldrls	pc, [pc, r3, lsl #2]
   13280:	b	1330c <__assert_fail@plt+0x2408>
   13284:	andeq	r3, r1, r8, lsl r3
   13288:	andeq	r3, r1, r8, lsl r3
   1328c:	andeq	r3, r1, ip, lsl #6
   13290:	andeq	r3, r1, r8, lsl r3
   13294:	andeq	r3, r1, ip, lsl #6
   13298:	andeq	r3, r1, r8, lsl r3
   1329c:	andeq	r3, r1, ip, lsl #6
   132a0:	andeq	r3, r1, ip, lsl #6
   132a4:	andeq	r3, r1, ip, lsl #6
   132a8:	andeq	r3, r1, ip, lsl #6
   132ac:	andeq	r3, r1, ip, lsl #6
   132b0:	andeq	r3, r1, ip, lsl #6
   132b4:	andeq	r3, r1, ip, lsl #6
   132b8:	andeq	r3, r1, ip, lsl #6
   132bc:	andeq	r3, r1, ip, lsl #6
   132c0:	andeq	r3, r1, ip, lsl #6
   132c4:	andeq	r3, r1, ip, lsl #6
   132c8:	andeq	r3, r1, ip, lsl #6
   132cc:	andeq	r3, r1, ip, lsl #6
   132d0:	andeq	r3, r1, ip, lsl #6
   132d4:	andeq	r3, r1, ip, lsl #6
   132d8:	andeq	r3, r1, ip, lsl #6
   132dc:	andeq	r3, r1, ip, lsl #6
   132e0:	andeq	r3, r1, ip, lsl #6
   132e4:	andeq	r3, r1, ip, lsl #6
   132e8:	andeq	r3, r1, ip, lsl #6
   132ec:	andeq	r3, r1, ip, lsl #6
   132f0:	andeq	r3, r1, ip, lsl #6
   132f4:	andeq	r3, r1, ip, lsl #6
   132f8:	andeq	r3, r1, ip, lsl #6
   132fc:	andeq	r3, r1, ip, lsl #6
   13300:	andeq	r3, r1, ip, lsl #6
   13304:	andeq	r3, r1, ip, lsl #6
   13308:	andeq	r3, r1, r8, lsl r3
   1330c:	cmp	r4, r2
   13310:	bne	13270 <__assert_fail@plt+0x236c>
   13314:	b	130d0 <__assert_fail@plt+0x21cc>
   13318:	mov	r8, #2
   1331c:	ldr	fp, [sp, #76]	; 0x4c
   13320:	ldr	sl, [sp, #80]	; 0x50
   13324:	b	12850 <__assert_fail@plt+0x194c>
   13328:	ldr	r2, [sp, #40]	; 0x28
   1332c:	str	fp, [sp, #152]	; 0x98
   13330:	mov	fp, r8
   13334:	ldr	r8, [sp, #152]	; 0x98
   13338:	and	r2, r2, r3
   1333c:	str	r2, [sp, #40]	; 0x28
   13340:	b	12850 <__assert_fail@plt+0x194c>
   13344:	cmp	sl, r4
   13348:	movls	r0, r4
   1334c:	bls	12980 <__assert_fail@plt+0x1a7c>
   13350:	ldr	r3, [sp, #48]	; 0x30
   13354:	b	12970 <__assert_fail@plt+0x1a6c>
   13358:	str	sl, [sp, #72]	; 0x48
   1335c:	ldr	sl, [sp, #44]	; 0x2c
   13360:	b	127c0 <__assert_fail@plt+0x18bc>
   13364:	str	r3, [sp, #40]	; 0x28
   13368:	str	fp, [sp, #152]	; 0x98
   1336c:	mov	fp, r8
   13370:	ldr	r8, [sp, #152]	; 0x98
   13374:	b	12850 <__assert_fail@plt+0x194c>
   13378:	str	r6, [sp, #48]	; 0x30
   1337c:	ldr	r6, [sp, #52]	; 0x34
   13380:	b	127f0 <__assert_fail@plt+0x18ec>
   13384:	mov	r6, #0
   13388:	ldr	r2, [sp, #40]	; 0x28
   1338c:	b	13120 <__assert_fail@plt+0x221c>
   13390:	str	r6, [sp, #48]	; 0x30
   13394:	ldr	r6, [sp, #52]	; 0x34
   13398:	b	125dc <__assert_fail@plt+0x16d8>
   1339c:	add	r4, r4, #4
   133a0:	mov	r6, #0
   133a4:	str	r3, [sp, #48]	; 0x30
   133a8:	mov	r5, #48	; 0x30
   133ac:	b	12564 <__assert_fail@plt+0x1660>
   133b0:	mov	r7, r3
   133b4:	b	131e4 <__assert_fail@plt+0x22e0>
   133b8:	mov	r3, #1
   133bc:	movw	r2, #24412	; 0x5f5c
   133c0:	movt	r2, #1
   133c4:	mov	r4, r3
   133c8:	str	r3, [sp, #36]	; 0x24
   133cc:	str	r3, [sp, #40]	; 0x28
   133d0:	str	sl, [sp, #44]	; 0x2c
   133d4:	str	sl, [sp, #48]	; 0x30
   133d8:	str	r3, [sp, #56]	; 0x38
   133dc:	str	r2, [sp, #60]	; 0x3c
   133e0:	str	sl, [sp, #68]	; 0x44
   133e4:	str	sl, [sp, #72]	; 0x48
   133e8:	b	1208c <__assert_fail@plt+0x1188>
   133ec:	mov	r3, r6
   133f0:	mov	r5, #48	; 0x30
   133f4:	mov	r6, #0
   133f8:	b	12564 <__assert_fail@plt+0x1660>
   133fc:	mov	r5, r3
   13400:	b	128dc <__assert_fail@plt+0x19d8>
   13404:	cmp	sl, r4
   13408:	mov	r5, #48	; 0x30
   1340c:	movhi	r3, #48	; 0x30
   13410:	strbhi	r3, [r8, r4]
   13414:	add	r3, r0, #2
   13418:	add	r4, r0, #3
   1341c:	cmp	sl, r3
   13420:	movhi	r1, #48	; 0x30
   13424:	strbhi	r1, [r8, r3]
   13428:	b	129b4 <__assert_fail@plt+0x1ab0>
   1342c:	str	fp, [sp, #152]	; 0x98
   13430:	mov	fp, r8
   13434:	ldr	r8, [sp, #152]	; 0x98
   13438:	b	12850 <__assert_fail@plt+0x194c>
   1343c:	ldr	r3, [sp, #164]	; 0xa4
   13440:	ldrb	r3, [r3]
   13444:	cmp	r3, #0
   13448:	beq	1205c <__assert_fail@plt+0x1158>
   1344c:	ldr	r2, [sp, #164]	; 0xa4
   13450:	cmp	sl, r4
   13454:	strbhi	r3, [fp, r4]
   13458:	add	r4, r4, #1
   1345c:	ldrb	r3, [r2, #1]!
   13460:	cmp	r3, #0
   13464:	bne	13450 <__assert_fail@plt+0x254c>
   13468:	b	1205c <__assert_fail@plt+0x1158>
   1346c:	mov	ip, r5
   13470:	mov	r6, #0
   13474:	ldr	r2, [sp, #40]	; 0x28
   13478:	ldr	r8, [sp, #76]	; 0x4c
   1347c:	ldr	sl, [sp, #80]	; 0x50
   13480:	ldr	r5, [sp, #84]	; 0x54
   13484:	ldr	r7, [sp, #88]	; 0x58
   13488:	ldr	r4, [sp, #92]	; 0x5c
   1348c:	b	13118 <__assert_fail@plt+0x2214>
   13490:	ldr	r2, [sp, #32]
   13494:	ldrb	r1, [r2, r3]
   13498:	sub	r2, r1, #33	; 0x21
   1349c:	cmp	r2, #29
   134a0:	ldrls	pc, [pc, r2, lsl #2]
   134a4:	b	13580 <__assert_fail@plt+0x267c>
   134a8:	andeq	r3, r1, r0, lsr #10
   134ac:	andeq	r3, r1, r0, lsl #11
   134b0:	andeq	r3, r1, r0, lsl #11
   134b4:	andeq	r3, r1, r0, lsl #11
   134b8:	andeq	r3, r1, r0, lsl #11
   134bc:	andeq	r3, r1, r0, lsl #11
   134c0:	andeq	r3, r1, r0, lsr #10
   134c4:	andeq	r3, r1, r0, lsr #10
   134c8:	andeq	r3, r1, r0, lsr #10
   134cc:	andeq	r3, r1, r0, lsl #11
   134d0:	andeq	r3, r1, r0, lsl #11
   134d4:	andeq	r3, r1, r0, lsl #11
   134d8:	andeq	r3, r1, r0, lsr #10
   134dc:	andeq	r3, r1, r0, lsl #11
   134e0:	andeq	r3, r1, r0, lsr #10
   134e4:	andeq	r3, r1, r0, lsl #11
   134e8:	andeq	r3, r1, r0, lsl #11
   134ec:	andeq	r3, r1, r0, lsl #11
   134f0:	andeq	r3, r1, r0, lsl #11
   134f4:	andeq	r3, r1, r0, lsl #11
   134f8:	andeq	r3, r1, r0, lsl #11
   134fc:	andeq	r3, r1, r0, lsl #11
   13500:	andeq	r3, r1, r0, lsl #11
   13504:	andeq	r3, r1, r0, lsl #11
   13508:	andeq	r3, r1, r0, lsl #11
   1350c:	andeq	r3, r1, r0, lsl #11
   13510:	andeq	r3, r1, r0, lsl #11
   13514:	andeq	r3, r1, r0, lsr #10
   13518:	andeq	r3, r1, r0, lsr #10
   1351c:	andeq	r3, r1, r0, lsr #10
   13520:	ldr	r2, [sp, #44]	; 0x2c
   13524:	cmp	r2, #0
   13528:	bne	13684 <__assert_fail@plt+0x2780>
   1352c:	cmp	sl, r4
   13530:	mov	r5, r1
   13534:	movhi	r2, #63	; 0x3f
   13538:	mov	r9, r3
   1353c:	strbhi	r2, [r8, r4]
   13540:	add	r2, r4, #1
   13544:	cmp	sl, r2
   13548:	movhi	r0, #34	; 0x22
   1354c:	strbhi	r0, [r8, r2]
   13550:	add	r2, r4, #2
   13554:	cmp	sl, r2
   13558:	movhi	r0, #34	; 0x22
   1355c:	strbhi	r0, [r8, r2]
   13560:	add	r2, r4, #3
   13564:	add	r4, r4, #4
   13568:	cmp	sl, r2
   1356c:	movhi	r0, #63	; 0x3f
   13570:	strbhi	r0, [r8, r2]
   13574:	mov	r2, #0
   13578:	mov	r6, r2
   1357c:	b	129b4 <__assert_fail@plt+0x1ab0>
   13580:	mov	r3, #0
   13584:	mov	r6, r3
   13588:	b	1252c <__assert_fail@plt+0x1628>
   1358c:	ldr	r0, [sp, #28]
   13590:	mov	r1, r4
   13594:	mov	r2, r7
   13598:	mov	r3, r5
   1359c:	mov	ip, r5
   135a0:	ldr	r8, [sp, #76]	; 0x4c
   135a4:	ldr	sl, [sp, #80]	; 0x50
   135a8:	cmp	r1, r0
   135ac:	ldr	r5, [sp, #84]	; 0x54
   135b0:	ldr	r7, [sp, #88]	; 0x58
   135b4:	ldr	r4, [sp, #92]	; 0x5c
   135b8:	bcs	135ec <__assert_fail@plt+0x26e8>
   135bc:	ldrb	r6, [r2]
   135c0:	cmp	r6, #0
   135c4:	bne	135d8 <__assert_fail@plt+0x26d4>
   135c8:	b	1370c <__assert_fail@plt+0x2808>
   135cc:	ldrb	r6, [r2, #1]!
   135d0:	cmp	r6, #0
   135d4:	beq	13694 <__assert_fail@plt+0x2790>
   135d8:	add	r3, r3, #1
   135dc:	add	r1, r9, r3
   135e0:	cmp	r1, r0
   135e4:	bcc	135cc <__assert_fail@plt+0x26c8>
   135e8:	mov	ip, r3
   135ec:	mov	r6, #0
   135f0:	ldr	r2, [sp, #40]	; 0x28
   135f4:	b	13118 <__assert_fail@plt+0x2214>
   135f8:	mov	r3, #1
   135fc:	mov	r2, #0
   13600:	mov	r4, r2
   13604:	str	r3, [sp, #36]	; 0x24
   13608:	str	r3, [sp, #40]	; 0x28
   1360c:	str	r3, [sp, #44]	; 0x2c
   13610:	str	r2, [sp, #48]	; 0x30
   13614:	str	r3, [sp, #56]	; 0x38
   13618:	movw	r3, #24412	; 0x5f5c
   1361c:	movt	r3, #1
   13620:	str	r3, [sp, #60]	; 0x3c
   13624:	str	r2, [sp, #68]	; 0x44
   13628:	str	r2, [sp, #72]	; 0x48
   1362c:	b	1208c <__assert_fail@plt+0x1188>
   13630:	mov	r2, r3
   13634:	ldr	r3, [sp, #60]	; 0x3c
   13638:	cmp	r3, #0
   1363c:	moveq	r2, #0
   13640:	andne	r2, r2, #1
   13644:	cmp	r2, #0
   13648:	beq	13674 <__assert_fail@plt+0x2770>
   1364c:	mov	r2, r3
   13650:	ldrb	r3, [r3]
   13654:	cmp	r3, #0
   13658:	beq	13674 <__assert_fail@plt+0x2770>
   1365c:	cmp	sl, r4
   13660:	strbhi	r3, [fp, r4]
   13664:	add	r4, r4, #1
   13668:	ldrb	r3, [r2, #1]!
   1366c:	cmp	r3, #0
   13670:	bne	1365c <__assert_fail@plt+0x2758>
   13674:	cmp	sl, r4
   13678:	movhi	r3, #0
   1367c:	strbhi	r3, [fp, r4]
   13680:	b	12894 <__assert_fail@plt+0x1990>
   13684:	str	fp, [sp, #152]	; 0x98
   13688:	mov	fp, r8
   1368c:	ldr	r8, [sp, #152]	; 0x98
   13690:	b	1285c <__assert_fail@plt+0x1958>
   13694:	mov	ip, r3
   13698:	ldr	r2, [sp, #40]	; 0x28
   1369c:	b	13118 <__assert_fail@plt+0x2214>
   136a0:	str	fp, [sp, #152]	; 0x98
   136a4:	mov	fp, r8
   136a8:	ldr	r8, [sp, #152]	; 0x98
   136ac:	sub	r3, r8, #2
   136b0:	clz	r3, r3
   136b4:	lsr	r3, r3, #5
   136b8:	str	r3, [sp, #40]	; 0x28
   136bc:	b	12850 <__assert_fail@plt+0x194c>
   136c0:	mov	ip, #5
   136c4:	ldr	r3, [sp, #28]
   136c8:	str	ip, [sp]
   136cc:	ldr	r2, [sp, #156]	; 0x9c
   136d0:	ldr	ip, [sp, #164]	; 0xa4
   136d4:	ldr	r0, [sp, #160]	; 0xa0
   136d8:	str	r2, [sp, #4]
   136dc:	ldr	r2, [sp, #32]
   136e0:	ldr	r1, [sp, #72]	; 0x48
   136e4:	str	ip, [sp, #12]
   136e8:	ldr	ip, [sp, #168]	; 0xa8
   136ec:	str	r0, [sp, #8]
   136f0:	mov	r0, fp
   136f4:	str	ip, [sp, #16]
   136f8:	bl	11fa4 <__assert_fail@plt+0x10a0>
   136fc:	mov	r4, r0
   13700:	b	12894 <__assert_fail@plt+0x1990>
   13704:	mov	r8, #2
   13708:	b	12850 <__assert_fail@plt+0x194c>
   1370c:	ldr	r2, [sp, #40]	; 0x28
   13710:	b	13118 <__assert_fail@plt+0x2214>
   13714:	mov	r3, #0
   13718:	mov	r2, #1
   1371c:	mov	r4, r3
   13720:	strd	r2, [sp, #36]	; 0x24
   13724:	strd	r2, [sp, #44]	; 0x2c
   13728:	str	r2, [sp, #56]	; 0x38
   1372c:	str	r3, [sp, #68]	; 0x44
   13730:	str	r3, [sp, #72]	; 0x48
   13734:	movw	r3, #24432	; 0x5f70
   13738:	movt	r3, #1
   1373c:	str	r3, [sp, #60]	; 0x3c
   13740:	b	1208c <__assert_fail@plt+0x1188>
   13744:	mov	r3, #0
   13748:	mov	r1, #1
   1374c:	mov	r2, r3
   13750:	str	r1, [sp, #36]	; 0x24
   13754:	str	r3, [sp, #48]	; 0x30
   13758:	str	sl, [sp, #72]	; 0x48
   1375c:	b	12694 <__assert_fail@plt+0x1790>
   13760:	bl	10ef8 <abort@plt>
   13764:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13768:	mov	r4, r0
   1376c:	mov	r5, r3
   13770:	strd	r6, [sp, #8]
   13774:	movw	r7, #28912	; 0x70f0
   13778:	movt	r7, #2
   1377c:	strd	r8, [sp, #16]
   13780:	strd	sl, [sp, #24]
   13784:	mov	sl, r1
   13788:	mov	fp, r2
   1378c:	str	lr, [sp, #32]
   13790:	sub	sp, sp, #60	; 0x3c
   13794:	bl	10e2c <__errno_location@plt>
   13798:	mov	r8, r0
   1379c:	cmn	r4, #-2147483647	; 0x80000001
   137a0:	ldr	r6, [r7]
   137a4:	movne	r0, #0
   137a8:	moveq	r0, #1
   137ac:	ldr	r3, [r8]
   137b0:	orrs	r0, r0, r4, lsr #31
   137b4:	str	r3, [sp, #28]
   137b8:	bne	13948 <__assert_fail@plt+0x2a44>
   137bc:	ldr	r3, [r7, #4]
   137c0:	cmp	r3, r4
   137c4:	bgt	13824 <__assert_fail@plt+0x2920>
   137c8:	add	r1, r7, #8
   137cc:	sub	r2, r4, r3
   137d0:	str	r3, [sp, #52]	; 0x34
   137d4:	cmp	r6, r1
   137d8:	add	r2, r2, #1
   137dc:	beq	13920 <__assert_fail@plt+0x2a1c>
   137e0:	mov	r1, #8
   137e4:	mov	r0, r6
   137e8:	mvn	r3, #-2147483648	; 0x80000000
   137ec:	str	r1, [sp]
   137f0:	add	r1, sp, #52	; 0x34
   137f4:	bl	147c8 <__assert_fail@plt+0x38c4>
   137f8:	mov	r6, r0
   137fc:	str	r0, [r7]
   13800:	ldr	r0, [r7, #4]
   13804:	mov	r1, #0
   13808:	ldr	r2, [sp, #52]	; 0x34
   1380c:	sub	r2, r2, r0
   13810:	add	r0, r6, r0, lsl #3
   13814:	lsl	r2, r2, #3
   13818:	bl	10e44 <memset@plt>
   1381c:	ldr	r3, [sp, #52]	; 0x34
   13820:	str	r3, [r7, #4]
   13824:	ldr	r1, [r5, #4]
   13828:	add	r0, r6, r4, lsl #3
   1382c:	add	ip, r5, #8
   13830:	mov	r3, fp
   13834:	mov	r2, sl
   13838:	ldr	r7, [r0, #4]
   1383c:	str	r0, [sp, #36]	; 0x24
   13840:	str	ip, [sp, #40]	; 0x28
   13844:	orr	r0, r1, #1
   13848:	ldr	r9, [r6, r4, lsl #3]
   1384c:	str	ip, [sp, #8]
   13850:	ldr	lr, [r5, #44]	; 0x2c
   13854:	str	r0, [sp, #4]
   13858:	ldr	ip, [r5]
   1385c:	mov	r1, r9
   13860:	str	ip, [sp, #32]
   13864:	ldr	ip, [r5, #40]	; 0x28
   13868:	str	ip, [sp, #12]
   1386c:	ldr	ip, [sp, #32]
   13870:	str	lr, [sp, #16]
   13874:	str	r0, [sp, #44]	; 0x2c
   13878:	mov	r0, r7
   1387c:	str	ip, [sp]
   13880:	bl	11fa4 <__assert_fail@plt+0x10a0>
   13884:	cmp	r9, r0
   13888:	bhi	138f8 <__assert_fail@plt+0x29f4>
   1388c:	add	r9, r0, #1
   13890:	movw	r3, #29044	; 0x7174
   13894:	movt	r3, #2
   13898:	cmp	r7, r3
   1389c:	str	r9, [r6, r4, lsl #3]
   138a0:	beq	138ac <__assert_fail@plt+0x29a8>
   138a4:	mov	r0, r7
   138a8:	bl	15710 <__assert_fail@plt+0x480c>
   138ac:	mov	r0, r9
   138b0:	bl	14618 <__assert_fail@plt+0x3714>
   138b4:	ldr	ip, [r5]
   138b8:	mov	r3, fp
   138bc:	mov	r2, sl
   138c0:	mov	r1, r9
   138c4:	mov	r7, r0
   138c8:	ldr	lr, [sp, #36]	; 0x24
   138cc:	ldr	r4, [r5, #40]	; 0x28
   138d0:	str	r0, [lr, #4]
   138d4:	ldr	lr, [r5, #44]	; 0x2c
   138d8:	str	ip, [sp]
   138dc:	ldr	ip, [sp, #44]	; 0x2c
   138e0:	str	ip, [sp, #4]
   138e4:	ldr	ip, [sp, #40]	; 0x28
   138e8:	str	r4, [sp, #12]
   138ec:	str	lr, [sp, #16]
   138f0:	str	ip, [sp, #8]
   138f4:	bl	11fa4 <__assert_fail@plt+0x10a0>
   138f8:	ldr	r3, [sp, #28]
   138fc:	mov	r0, r7
   13900:	str	r3, [r8]
   13904:	add	sp, sp, #60	; 0x3c
   13908:	ldrd	r4, [sp]
   1390c:	ldrd	r6, [sp, #8]
   13910:	ldrd	r8, [sp, #16]
   13914:	ldrd	sl, [sp, #24]
   13918:	add	sp, sp, #32
   1391c:	pop	{pc}		; (ldr pc, [sp], #4)
   13920:	mov	r1, #8
   13924:	mvn	r3, #-2147483648	; 0x80000000
   13928:	str	r1, [sp]
   1392c:	add	r1, sp, #52	; 0x34
   13930:	bl	147c8 <__assert_fail@plt+0x38c4>
   13934:	ldrd	r2, [r7, #8]
   13938:	mov	r6, r0
   1393c:	str	r0, [r7]
   13940:	strd	r2, [r0]
   13944:	b	13800 <__assert_fail@plt+0x28fc>
   13948:	bl	10ef8 <abort@plt>
   1394c:	strd	r4, [sp, #-16]!
   13950:	mov	r5, r0
   13954:	str	r6, [sp, #8]
   13958:	str	lr, [sp, #12]
   1395c:	bl	10e2c <__errno_location@plt>
   13960:	mov	r4, r0
   13964:	cmp	r5, #0
   13968:	ldr	r0, [pc, #32]	; 13990 <__assert_fail@plt+0x2a8c>
   1396c:	mov	r1, #48	; 0x30
   13970:	movne	r0, r5
   13974:	ldr	r6, [r4]
   13978:	bl	14940 <__assert_fail@plt+0x3a3c>
   1397c:	str	r6, [r4]
   13980:	ldrd	r4, [sp]
   13984:	ldr	r6, [sp, #8]
   13988:	add	sp, sp, #12
   1398c:	pop	{pc}		; (ldr pc, [sp], #4)
   13990:	andeq	r7, r2, r4, ror r2
   13994:	ldr	r3, [pc, #12]	; 139a8 <__assert_fail@plt+0x2aa4>
   13998:	cmp	r0, #0
   1399c:	moveq	r0, r3
   139a0:	ldr	r0, [r0]
   139a4:	bx	lr
   139a8:	andeq	r7, r2, r4, ror r2
   139ac:	ldr	r3, [pc, #12]	; 139c0 <__assert_fail@plt+0x2abc>
   139b0:	cmp	r0, #0
   139b4:	moveq	r0, r3
   139b8:	str	r1, [r0]
   139bc:	bx	lr
   139c0:	andeq	r7, r2, r4, ror r2
   139c4:	ldr	r3, [pc, #52]	; 13a00 <__assert_fail@plt+0x2afc>
   139c8:	cmp	r0, #0
   139cc:	push	{lr}		; (str lr, [sp, #-4]!)
   139d0:	lsr	lr, r1, #5
   139d4:	and	r1, r1, #31
   139d8:	moveq	r0, r3
   139dc:	add	r3, r0, #8
   139e0:	ldr	ip, [r3, lr, lsl #2]
   139e4:	lsr	r0, ip, r1
   139e8:	eor	r2, r2, r0
   139ec:	and	r0, r0, #1
   139f0:	and	r2, r2, #1
   139f4:	eor	r1, ip, r2, lsl r1
   139f8:	str	r1, [r3, lr, lsl #2]
   139fc:	pop	{pc}		; (ldr pc, [sp], #4)
   13a00:	andeq	r7, r2, r4, ror r2
   13a04:	ldr	r3, [pc, #16]	; 13a1c <__assert_fail@plt+0x2b18>
   13a08:	cmp	r0, #0
   13a0c:	movne	r3, r0
   13a10:	ldr	r0, [r3, #4]
   13a14:	str	r1, [r3, #4]
   13a18:	bx	lr
   13a1c:	andeq	r7, r2, r4, ror r2
   13a20:	ldr	r3, [pc, #48]	; 13a58 <__assert_fail@plt+0x2b54>
   13a24:	cmp	r0, #0
   13a28:	mov	ip, #10
   13a2c:	moveq	r0, r3
   13a30:	cmp	r2, #0
   13a34:	cmpne	r1, #0
   13a38:	str	ip, [r0]
   13a3c:	beq	13a4c <__assert_fail@plt+0x2b48>
   13a40:	str	r1, [r0, #40]	; 0x28
   13a44:	str	r2, [r0, #44]	; 0x2c
   13a48:	bx	lr
   13a4c:	str	r4, [sp, #-8]!
   13a50:	str	lr, [sp, #4]
   13a54:	bl	10ef8 <abort@plt>
   13a58:	andeq	r7, r2, r4, ror r2
   13a5c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13a60:	strd	r6, [sp, #8]
   13a64:	mov	r7, r0
   13a68:	mov	r6, r1
   13a6c:	strd	r8, [sp, #16]
   13a70:	mov	r8, r2
   13a74:	mov	r9, r3
   13a78:	str	lr, [sp, #24]
   13a7c:	sub	sp, sp, #28
   13a80:	ldr	r4, [sp, #56]	; 0x38
   13a84:	ldr	ip, [pc, #104]	; 13af4 <__assert_fail@plt+0x2bf0>
   13a88:	cmp	r4, #0
   13a8c:	moveq	r4, ip
   13a90:	bl	10e2c <__errno_location@plt>
   13a94:	ldr	ip, [r4, #44]	; 0x2c
   13a98:	mov	r5, r0
   13a9c:	mov	r1, r6
   13aa0:	add	lr, r4, #8
   13aa4:	mov	r3, r9
   13aa8:	ldr	r6, [r5]
   13aac:	mov	r2, r8
   13ab0:	mov	r0, r7
   13ab4:	str	ip, [sp, #16]
   13ab8:	ldr	ip, [r4, #40]	; 0x28
   13abc:	str	lr, [sp, #8]
   13ac0:	str	ip, [sp, #12]
   13ac4:	ldr	ip, [r4, #4]
   13ac8:	str	ip, [sp, #4]
   13acc:	ldr	ip, [r4]
   13ad0:	str	ip, [sp]
   13ad4:	bl	11fa4 <__assert_fail@plt+0x10a0>
   13ad8:	str	r6, [r5]
   13adc:	add	sp, sp, #28
   13ae0:	ldrd	r4, [sp]
   13ae4:	ldrd	r6, [sp, #8]
   13ae8:	ldrd	r8, [sp, #16]
   13aec:	add	sp, sp, #24
   13af0:	pop	{pc}		; (ldr pc, [sp], #4)
   13af4:	andeq	r7, r2, r4, ror r2
   13af8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13afc:	cmp	r3, #0
   13b00:	ldr	r4, [pc, #220]	; 13be4 <__assert_fail@plt+0x2ce0>
   13b04:	movne	r4, r3
   13b08:	strd	r6, [sp, #8]
   13b0c:	mov	r6, r2
   13b10:	strd	r8, [sp, #16]
   13b14:	mov	r9, r0
   13b18:	strd	sl, [sp, #24]
   13b1c:	mov	sl, r1
   13b20:	str	lr, [sp, #32]
   13b24:	sub	sp, sp, #44	; 0x2c
   13b28:	bl	10e2c <__errno_location@plt>
   13b2c:	ldr	r5, [r4, #4]
   13b30:	mov	r7, r0
   13b34:	mov	r1, #0
   13b38:	add	r8, r4, #8
   13b3c:	mov	r3, sl
   13b40:	ldr	ip, [r4, #44]	; 0x2c
   13b44:	mov	r2, r9
   13b48:	mov	r0, r1
   13b4c:	ldr	lr, [r7]
   13b50:	cmp	r6, r1
   13b54:	orreq	r5, r5, #1
   13b58:	str	ip, [sp, #16]
   13b5c:	ldr	ip, [r4, #40]	; 0x28
   13b60:	stmib	sp, {r5, r8, ip}
   13b64:	ldr	ip, [r4]
   13b68:	str	lr, [sp, #28]
   13b6c:	str	ip, [sp]
   13b70:	bl	11fa4 <__assert_fail@plt+0x10a0>
   13b74:	add	r1, r0, #1
   13b78:	mov	fp, r0
   13b7c:	mov	r0, r1
   13b80:	str	r1, [sp, #36]	; 0x24
   13b84:	bl	14618 <__assert_fail@plt+0x3714>
   13b88:	ldr	ip, [r4, #44]	; 0x2c
   13b8c:	mov	r3, sl
   13b90:	mov	r2, r9
   13b94:	ldr	r1, [sp, #36]	; 0x24
   13b98:	str	ip, [sp, #16]
   13b9c:	ldr	ip, [r4, #40]	; 0x28
   13ba0:	str	r0, [sp, #32]
   13ba4:	stmib	sp, {r5, r8, ip}
   13ba8:	ldr	ip, [r4]
   13bac:	str	ip, [sp]
   13bb0:	bl	11fa4 <__assert_fail@plt+0x10a0>
   13bb4:	ldr	lr, [sp, #28]
   13bb8:	cmp	r6, #0
   13bbc:	ldr	r0, [sp, #32]
   13bc0:	str	lr, [r7]
   13bc4:	strne	fp, [r6]
   13bc8:	add	sp, sp, #44	; 0x2c
   13bcc:	ldrd	r4, [sp]
   13bd0:	ldrd	r6, [sp, #8]
   13bd4:	ldrd	r8, [sp, #16]
   13bd8:	ldrd	sl, [sp, #24]
   13bdc:	add	sp, sp, #32
   13be0:	pop	{pc}		; (ldr pc, [sp], #4)
   13be4:	andeq	r7, r2, r4, ror r2
   13be8:	mov	r3, r2
   13bec:	mov	r2, #0
   13bf0:	b	13af8 <__assert_fail@plt+0x2bf4>
   13bf4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13bf8:	movw	r5, #28912	; 0x70f0
   13bfc:	movt	r5, #2
   13c00:	ldr	r3, [r5, #4]
   13c04:	strd	r6, [sp, #8]
   13c08:	str	r8, [sp, #16]
   13c0c:	str	lr, [sp, #20]
   13c10:	ldr	r7, [r5]
   13c14:	cmp	r3, #1
   13c18:	ble	13c3c <__assert_fail@plt+0x2d38>
   13c1c:	mov	r4, #1
   13c20:	add	r6, r7, #4
   13c24:	ldr	r0, [r6, r4, lsl #3]
   13c28:	add	r4, r4, #1
   13c2c:	bl	15710 <__assert_fail@plt+0x480c>
   13c30:	ldr	r3, [r5, #4]
   13c34:	cmp	r3, r4
   13c38:	bgt	13c24 <__assert_fail@plt+0x2d20>
   13c3c:	ldr	r0, [r7, #4]
   13c40:	movw	r4, #29044	; 0x7174
   13c44:	movt	r4, #2
   13c48:	cmp	r0, r4
   13c4c:	beq	13c60 <__assert_fail@plt+0x2d5c>
   13c50:	bl	15710 <__assert_fail@plt+0x480c>
   13c54:	mov	r3, #256	; 0x100
   13c58:	str	r3, [r5, #8]
   13c5c:	str	r4, [r5, #12]
   13c60:	ldr	r4, [pc, #44]	; 13c94 <__assert_fail@plt+0x2d90>
   13c64:	cmp	r7, r4
   13c68:	beq	13c78 <__assert_fail@plt+0x2d74>
   13c6c:	mov	r0, r7
   13c70:	bl	15710 <__assert_fail@plt+0x480c>
   13c74:	str	r4, [r5]
   13c78:	mov	r3, #1
   13c7c:	ldrd	r6, [sp, #8]
   13c80:	str	r3, [r5, #4]
   13c84:	ldrd	r4, [sp]
   13c88:	ldr	r8, [sp, #16]
   13c8c:	add	sp, sp, #20
   13c90:	pop	{pc}		; (ldr pc, [sp], #4)
   13c94:	strdeq	r7, [r2], -r8
   13c98:	ldr	r3, [pc, #4]	; 13ca4 <__assert_fail@plt+0x2da0>
   13c9c:	mvn	r2, #0
   13ca0:	b	13764 <__assert_fail@plt+0x2860>
   13ca4:	andeq	r7, r2, r4, ror r2
   13ca8:	ldr	r3, [pc]	; 13cb0 <__assert_fail@plt+0x2dac>
   13cac:	b	13764 <__assert_fail@plt+0x2860>
   13cb0:	andeq	r7, r2, r4, ror r2
   13cb4:	mov	r1, r0
   13cb8:	ldr	r3, [pc, #8]	; 13cc8 <__assert_fail@plt+0x2dc4>
   13cbc:	mvn	r2, #0
   13cc0:	mov	r0, #0
   13cc4:	b	13764 <__assert_fail@plt+0x2860>
   13cc8:	andeq	r7, r2, r4, ror r2
   13ccc:	mov	r2, r1
   13cd0:	ldr	r3, [pc, #8]	; 13ce0 <__assert_fail@plt+0x2ddc>
   13cd4:	mov	r1, r0
   13cd8:	mov	r0, #0
   13cdc:	b	13764 <__assert_fail@plt+0x2860>
   13ce0:	andeq	r7, r2, r4, ror r2
   13ce4:	strd	r4, [sp, #-12]!
   13ce8:	mov	r5, r2
   13cec:	mov	r4, r0
   13cf0:	str	lr, [sp, #8]
   13cf4:	sub	sp, sp, #52	; 0x34
   13cf8:	mov	r0, sp
   13cfc:	bl	11e00 <__assert_fail@plt+0xefc>
   13d00:	mov	r3, sp
   13d04:	mov	r1, r5
   13d08:	mov	r0, r4
   13d0c:	mvn	r2, #0
   13d10:	bl	13764 <__assert_fail@plt+0x2860>
   13d14:	add	sp, sp, #52	; 0x34
   13d18:	ldrd	r4, [sp]
   13d1c:	add	sp, sp, #8
   13d20:	pop	{pc}		; (ldr pc, [sp], #4)
   13d24:	strd	r4, [sp, #-16]!
   13d28:	mov	r5, r2
   13d2c:	mov	r4, r0
   13d30:	str	r6, [sp, #8]
   13d34:	mov	r6, r3
   13d38:	str	lr, [sp, #12]
   13d3c:	sub	sp, sp, #48	; 0x30
   13d40:	mov	r0, sp
   13d44:	bl	11e00 <__assert_fail@plt+0xefc>
   13d48:	mov	r3, sp
   13d4c:	mov	r2, r6
   13d50:	mov	r1, r5
   13d54:	mov	r0, r4
   13d58:	bl	13764 <__assert_fail@plt+0x2860>
   13d5c:	add	sp, sp, #48	; 0x30
   13d60:	ldrd	r4, [sp]
   13d64:	ldr	r6, [sp, #8]
   13d68:	add	sp, sp, #12
   13d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   13d70:	mov	r2, r1
   13d74:	mov	r1, r0
   13d78:	mov	r0, #0
   13d7c:	b	13ce4 <__assert_fail@plt+0x2de0>
   13d80:	mov	r3, r2
   13d84:	mov	r2, r1
   13d88:	mov	r1, r0
   13d8c:	mov	r0, #0
   13d90:	b	13d24 <__assert_fail@plt+0x2e20>
   13d94:	ldr	ip, [pc, #140]	; 13e28 <__assert_fail@plt+0x2f24>
   13d98:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13d9c:	ldrd	r4, [ip]
   13da0:	strd	r6, [sp, #8]
   13da4:	ldrd	r6, [ip, #8]
   13da8:	strd	r8, [sp, #16]
   13dac:	lsr	r9, r2, #5
   13db0:	str	lr, [sp, #24]
   13db4:	sub	sp, sp, #52	; 0x34
   13db8:	and	lr, r2, #31
   13dbc:	add	r8, sp, #8
   13dc0:	mov	r2, r1
   13dc4:	strd	r4, [sp]
   13dc8:	mov	r1, r0
   13dcc:	mov	r3, sp
   13dd0:	strd	r6, [sp, #8]
   13dd4:	mov	r0, #0
   13dd8:	ldrd	r4, [ip, #16]
   13ddc:	ldrd	r6, [ip, #24]
   13de0:	strd	r4, [sp, #16]
   13de4:	ldrd	r4, [ip, #32]
   13de8:	strd	r6, [sp, #24]
   13dec:	ldrd	r6, [ip, #40]	; 0x28
   13df0:	strd	r4, [sp, #32]
   13df4:	strd	r6, [sp, #40]	; 0x28
   13df8:	ldr	ip, [r8, r9, lsl #2]
   13dfc:	mvn	r4, ip, lsr lr
   13e00:	and	r4, r4, #1
   13e04:	eor	lr, ip, r4, lsl lr
   13e08:	str	lr, [r8, r9, lsl #2]
   13e0c:	bl	13764 <__assert_fail@plt+0x2860>
   13e10:	add	sp, sp, #52	; 0x34
   13e14:	ldrd	r4, [sp]
   13e18:	ldrd	r6, [sp, #8]
   13e1c:	ldrd	r8, [sp, #16]
   13e20:	add	sp, sp, #24
   13e24:	pop	{pc}		; (ldr pc, [sp], #4)
   13e28:	andeq	r7, r2, r4, ror r2
   13e2c:	mov	r2, r1
   13e30:	mvn	r1, #0
   13e34:	b	13d94 <__assert_fail@plt+0x2e90>
   13e38:	mov	r2, #58	; 0x3a
   13e3c:	mvn	r1, #0
   13e40:	b	13d94 <__assert_fail@plt+0x2e90>
   13e44:	mov	r2, #58	; 0x3a
   13e48:	b	13d94 <__assert_fail@plt+0x2e90>
   13e4c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13e50:	strd	r6, [sp, #8]
   13e54:	mov	r6, r0
   13e58:	mov	r7, r2
   13e5c:	str	lr, [sp, #16]
   13e60:	sub	sp, sp, #100	; 0x64
   13e64:	mov	r0, sp
   13e68:	bl	11e00 <__assert_fail@plt+0xefc>
   13e6c:	ldrd	r4, [sp, #8]
   13e70:	mov	r1, r7
   13e74:	mov	r0, r6
   13e78:	add	r3, sp, #48	; 0x30
   13e7c:	mvn	r2, #0
   13e80:	ldrd	r6, [sp]
   13e84:	strd	r4, [sp, #56]	; 0x38
   13e88:	ldrd	r4, [sp, #16]
   13e8c:	strd	r6, [sp, #48]	; 0x30
   13e90:	ldrd	r6, [sp, #32]
   13e94:	ldr	lr, [sp, #60]	; 0x3c
   13e98:	strd	r4, [sp, #64]	; 0x40
   13e9c:	ldrd	r4, [sp, #24]
   13ea0:	mvn	ip, lr
   13ea4:	and	ip, ip, #67108864	; 0x4000000
   13ea8:	strd	r4, [sp, #72]	; 0x48
   13eac:	eor	ip, ip, lr
   13eb0:	ldrd	r4, [sp, #40]	; 0x28
   13eb4:	str	ip, [sp, #60]	; 0x3c
   13eb8:	strd	r6, [sp, #80]	; 0x50
   13ebc:	strd	r4, [sp, #88]	; 0x58
   13ec0:	bl	13764 <__assert_fail@plt+0x2860>
   13ec4:	add	sp, sp, #100	; 0x64
   13ec8:	ldrd	r4, [sp]
   13ecc:	ldrd	r6, [sp, #8]
   13ed0:	add	sp, sp, #16
   13ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ed8:	ldr	ip, [pc, #156]	; 13f7c <__assert_fail@plt+0x3078>
   13edc:	cmp	r2, #0
   13ee0:	cmpne	r1, #0
   13ee4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13ee8:	strd	r6, [sp, #8]
   13eec:	mov	r6, r2
   13ef0:	str	r8, [sp, #16]
   13ef4:	mov	r8, r3
   13ef8:	strd	sl, [sp, #20]
   13efc:	ldrd	r4, [ip]
   13f00:	str	lr, [sp, #28]
   13f04:	sub	sp, sp, #48	; 0x30
   13f08:	mov	lr, #10
   13f0c:	ldrd	r2, [ip, #8]
   13f10:	ldrd	sl, [ip, #16]
   13f14:	strd	r4, [sp]
   13f18:	ldrd	r4, [ip, #32]
   13f1c:	str	lr, [sp]
   13f20:	strd	r2, [sp, #8]
   13f24:	strd	sl, [sp, #16]
   13f28:	ldrd	r2, [ip, #24]
   13f2c:	ldrd	sl, [ip, #40]	; 0x28
   13f30:	strd	r2, [sp, #24]
   13f34:	strd	r4, [sp, #32]
   13f38:	strd	sl, [sp, #40]	; 0x28
   13f3c:	beq	13f78 <__assert_fail@plt+0x3074>
   13f40:	ldr	r2, [sp, #80]	; 0x50
   13f44:	mov	r7, r1
   13f48:	mov	r3, sp
   13f4c:	mov	r1, r8
   13f50:	str	r7, [sp, #40]	; 0x28
   13f54:	str	r6, [sp, #44]	; 0x2c
   13f58:	bl	13764 <__assert_fail@plt+0x2860>
   13f5c:	add	sp, sp, #48	; 0x30
   13f60:	ldrd	r4, [sp]
   13f64:	ldrd	r6, [sp, #8]
   13f68:	ldr	r8, [sp, #16]
   13f6c:	ldrd	sl, [sp, #20]
   13f70:	add	sp, sp, #28
   13f74:	pop	{pc}		; (ldr pc, [sp], #4)
   13f78:	bl	10ef8 <abort@plt>
   13f7c:	andeq	r7, r2, r4, ror r2
   13f80:	mvn	ip, #0
   13f84:	push	{lr}		; (str lr, [sp, #-4]!)
   13f88:	sub	sp, sp, #12
   13f8c:	str	ip, [sp]
   13f90:	bl	13ed8 <__assert_fail@plt+0x2fd4>
   13f94:	add	sp, sp, #12
   13f98:	pop	{pc}		; (ldr pc, [sp], #4)
   13f9c:	mvn	ip, #0
   13fa0:	push	{lr}		; (str lr, [sp, #-4]!)
   13fa4:	sub	sp, sp, #12
   13fa8:	mov	r3, r2
   13fac:	mov	r2, r1
   13fb0:	mov	r1, r0
   13fb4:	mov	r0, #0
   13fb8:	str	ip, [sp]
   13fbc:	bl	13ed8 <__assert_fail@plt+0x2fd4>
   13fc0:	add	sp, sp, #12
   13fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fc8:	push	{lr}		; (str lr, [sp, #-4]!)
   13fcc:	sub	sp, sp, #12
   13fd0:	str	r3, [sp]
   13fd4:	mov	r3, r2
   13fd8:	mov	r2, r1
   13fdc:	mov	r1, r0
   13fe0:	mov	r0, #0
   13fe4:	bl	13ed8 <__assert_fail@plt+0x2fd4>
   13fe8:	add	sp, sp, #12
   13fec:	pop	{pc}		; (ldr pc, [sp], #4)
   13ff0:	ldr	r3, [pc]	; 13ff8 <__assert_fail@plt+0x30f4>
   13ff4:	b	13764 <__assert_fail@plt+0x2860>
   13ff8:	andeq	r7, r2, r0, lsl #2
   13ffc:	mov	r2, r1
   14000:	ldr	r3, [pc, #8]	; 14010 <__assert_fail@plt+0x310c>
   14004:	mov	r1, r0
   14008:	mov	r0, #0
   1400c:	b	13764 <__assert_fail@plt+0x2860>
   14010:	andeq	r7, r2, r0, lsl #2
   14014:	ldr	r3, [pc, #4]	; 14020 <__assert_fail@plt+0x311c>
   14018:	mvn	r2, #0
   1401c:	b	13764 <__assert_fail@plt+0x2860>
   14020:	andeq	r7, r2, r0, lsl #2
   14024:	mov	r1, r0
   14028:	ldr	r3, [pc, #8]	; 14038 <__assert_fail@plt+0x3134>
   1402c:	mvn	r2, #0
   14030:	mov	r0, #0
   14034:	b	13764 <__assert_fail@plt+0x2860>
   14038:	andeq	r7, r2, r0, lsl #2
   1403c:	cmp	r1, #0
   14040:	strd	r4, [sp, #-16]!
   14044:	mov	ip, r3
   14048:	str	r6, [sp, #8]
   1404c:	mov	r4, r0
   14050:	str	lr, [sp, #12]
   14054:	sub	sp, sp, #32
   14058:	ldr	r5, [sp, #48]	; 0x30
   1405c:	ldr	r6, [sp, #52]	; 0x34
   14060:	beq	141a4 <__assert_fail@plt+0x32a0>
   14064:	mov	r3, r1
   14068:	mov	r1, #1
   1406c:	stm	sp, {r2, ip}
   14070:	movw	r2, #24540	; 0x5fdc
   14074:	movt	r2, #1
   14078:	bl	10e68 <__fprintf_chk@plt>
   1407c:	mov	r2, #5
   14080:	movw	r1, #24560	; 0x5ff0
   14084:	movt	r1, #1
   14088:	mov	r0, #0
   1408c:	bl	10d48 <dcgettext@plt>
   14090:	movw	ip, #2022	; 0x7e6
   14094:	mov	r3, r0
   14098:	mov	r1, #1
   1409c:	movw	r2, #25288	; 0x62c8
   140a0:	movt	r2, #1
   140a4:	mov	r0, r4
   140a8:	str	ip, [sp]
   140ac:	bl	10e68 <__fprintf_chk@plt>
   140b0:	mov	r1, r4
   140b4:	mov	r0, #10
   140b8:	bl	10d3c <fputc_unlocked@plt>
   140bc:	mov	r2, #5
   140c0:	movw	r1, #24564	; 0x5ff4
   140c4:	movt	r1, #1
   140c8:	mov	r0, #0
   140cc:	bl	10d48 <dcgettext@plt>
   140d0:	mov	r2, r0
   140d4:	mov	r1, #1
   140d8:	movw	r3, #24736	; 0x60a0
   140dc:	movt	r3, #1
   140e0:	mov	r0, r4
   140e4:	bl	10e68 <__fprintf_chk@plt>
   140e8:	mov	r1, r4
   140ec:	mov	r0, #10
   140f0:	bl	10d3c <fputc_unlocked@plt>
   140f4:	cmp	r6, #9
   140f8:	ldrls	pc, [pc, r6, lsl #2]
   140fc:	b	14410 <__assert_fail@plt+0x350c>
   14100:	muleq	r1, r0, r1
   14104:	andeq	r4, r1, r0, asr #3
   14108:	strdeq	r4, [r1], -ip
   1410c:	andeq	r4, r1, ip, lsr r2
   14110:	andeq	r4, r1, r4, lsl #5
   14114:			; <UNDEFINED> instruction: 0x000142bc
   14118:	andeq	r4, r1, r4, lsl #6
   1411c:	andeq	r4, r1, r8, asr r3
   14120:			; <UNDEFINED> instruction: 0x000143b0
   14124:	andeq	r4, r1, r8, lsr #2
   14128:	movw	r1, #25040	; 0x61d0
   1412c:	movt	r1, #1
   14130:	mov	r2, #5
   14134:	mov	r0, #0
   14138:	bl	10d48 <dcgettext@plt>
   1413c:	ldr	lr, [r5, #4]
   14140:	mov	r2, r0
   14144:	mov	r1, #1
   14148:	mov	r0, r4
   1414c:	ldr	r3, [r5, #8]
   14150:	ldr	ip, [r5, #32]
   14154:	str	lr, [sp]
   14158:	ldr	lr, [r5, #12]
   1415c:	str	ip, [sp, #28]
   14160:	ldr	ip, [r5, #28]
   14164:	str	r3, [sp, #4]
   14168:	ldr	r3, [r5, #16]
   1416c:	str	lr, [sp, #8]
   14170:	ldr	lr, [r5, #20]
   14174:	str	ip, [sp, #24]
   14178:	ldr	ip, [r5, #24]
   1417c:	str	r3, [sp, #12]
   14180:	ldr	r3, [r5]
   14184:	str	lr, [sp, #16]
   14188:	str	ip, [sp, #20]
   1418c:	bl	10e68 <__fprintf_chk@plt>
   14190:	add	sp, sp, #32
   14194:	ldrd	r4, [sp]
   14198:	ldr	r6, [sp, #8]
   1419c:	add	sp, sp, #12
   141a0:	pop	{pc}		; (ldr pc, [sp], #4)
   141a4:	mov	r3, r2
   141a8:	mov	r1, #1
   141ac:	str	ip, [sp]
   141b0:	movw	r2, #24552	; 0x5fe8
   141b4:	movt	r2, #1
   141b8:	bl	10e68 <__fprintf_chk@plt>
   141bc:	b	1407c <__assert_fail@plt+0x3178>
   141c0:	mov	r2, #5
   141c4:	movw	r1, #24772	; 0x60c4
   141c8:	movt	r1, #1
   141cc:	mov	r0, #0
   141d0:	bl	10d48 <dcgettext@plt>
   141d4:	ldr	r3, [r5]
   141d8:	mov	r2, r0
   141dc:	mov	r1, #1
   141e0:	mov	r0, r4
   141e4:	add	sp, sp, #32
   141e8:	ldrd	r4, [sp]
   141ec:	ldr	r6, [sp, #8]
   141f0:	ldr	lr, [sp, #12]
   141f4:	add	sp, sp, #16
   141f8:	b	10e68 <__fprintf_chk@plt>
   141fc:	mov	r2, #5
   14200:	movw	r1, #24788	; 0x60d4
   14204:	movt	r1, #1
   14208:	mov	r0, #0
   1420c:	bl	10d48 <dcgettext@plt>
   14210:	ldm	r5, {r3, ip}
   14214:	mov	r2, r0
   14218:	mov	r1, #1
   1421c:	mov	r0, r4
   14220:	str	ip, [sp, #48]	; 0x30
   14224:	add	sp, sp, #32
   14228:	ldrd	r4, [sp]
   1422c:	ldr	r6, [sp, #8]
   14230:	ldr	lr, [sp, #12]
   14234:	add	sp, sp, #16
   14238:	b	10e68 <__fprintf_chk@plt>
   1423c:	mov	r2, #5
   14240:	movw	r1, #24812	; 0x60ec
   14244:	movt	r1, #1
   14248:	mov	r0, #0
   1424c:	bl	10d48 <dcgettext@plt>
   14250:	ldm	r5, {r3, lr}
   14254:	mov	r2, r0
   14258:	mov	r1, #1
   1425c:	mov	r0, r4
   14260:	ldr	ip, [r5, #8]
   14264:	str	lr, [sp, #48]	; 0x30
   14268:	str	ip, [sp, #52]	; 0x34
   1426c:	add	sp, sp, #32
   14270:	ldrd	r4, [sp]
   14274:	ldr	r6, [sp, #8]
   14278:	ldr	lr, [sp, #12]
   1427c:	add	sp, sp, #16
   14280:	b	10e68 <__fprintf_chk@plt>
   14284:	mov	r2, #5
   14288:	movw	r1, #24840	; 0x6108
   1428c:	movt	r1, #1
   14290:	mov	r0, #0
   14294:	bl	10d48 <dcgettext@plt>
   14298:	ldmib	r5, {r3, ip, lr}
   1429c:	mov	r2, r0
   142a0:	mov	r1, #1
   142a4:	mov	r0, r4
   142a8:	str	r3, [sp]
   142ac:	ldr	r3, [r5]
   142b0:	stmib	sp, {ip, lr}
   142b4:	bl	10e68 <__fprintf_chk@plt>
   142b8:	b	14190 <__assert_fail@plt+0x328c>
   142bc:	mov	r2, #5
   142c0:	movw	r1, #24872	; 0x6128
   142c4:	movt	r1, #1
   142c8:	mov	r0, #0
   142cc:	bl	10d48 <dcgettext@plt>
   142d0:	ldmib	r5, {ip, lr}
   142d4:	mov	r2, r0
   142d8:	mov	r1, #1
   142dc:	mov	r0, r4
   142e0:	ldr	r3, [r5, #16]
   142e4:	str	ip, [sp]
   142e8:	ldr	ip, [r5, #12]
   142ec:	str	r3, [sp, #12]
   142f0:	ldr	r3, [r5]
   142f4:	str	lr, [sp, #4]
   142f8:	str	ip, [sp, #8]
   142fc:	bl	10e68 <__fprintf_chk@plt>
   14300:	b	14190 <__assert_fail@plt+0x328c>
   14304:	mov	r2, #5
   14308:	movw	r1, #24908	; 0x614c
   1430c:	movt	r1, #1
   14310:	mov	r0, #0
   14314:	bl	10d48 <dcgettext@plt>
   14318:	ldr	lr, [r5, #4]
   1431c:	mov	r2, r0
   14320:	mov	r1, #1
   14324:	mov	r0, r4
   14328:	ldr	r3, [r5, #8]
   1432c:	ldr	ip, [r5, #20]
   14330:	str	lr, [sp]
   14334:	ldr	lr, [r5, #12]
   14338:	str	ip, [sp, #16]
   1433c:	ldr	ip, [r5, #16]
   14340:	str	r3, [sp, #4]
   14344:	ldr	r3, [r5]
   14348:	str	lr, [sp, #8]
   1434c:	str	ip, [sp, #12]
   14350:	bl	10e68 <__fprintf_chk@plt>
   14354:	b	14190 <__assert_fail@plt+0x328c>
   14358:	mov	r2, #5
   1435c:	movw	r1, #24948	; 0x6174
   14360:	movt	r1, #1
   14364:	mov	r0, #0
   14368:	bl	10d48 <dcgettext@plt>
   1436c:	ldmib	r5, {r3, ip}
   14370:	mov	r2, r0
   14374:	mov	r1, #1
   14378:	mov	r0, r4
   1437c:	ldr	lr, [r5, #24]
   14380:	str	r3, [sp]
   14384:	ldr	r3, [r5, #12]
   14388:	str	lr, [sp, #20]
   1438c:	ldr	lr, [r5, #20]
   14390:	str	ip, [sp, #4]
   14394:	ldr	ip, [r5, #16]
   14398:	str	r3, [sp, #8]
   1439c:	ldr	r3, [r5]
   143a0:	str	ip, [sp, #12]
   143a4:	str	lr, [sp, #16]
   143a8:	bl	10e68 <__fprintf_chk@plt>
   143ac:	b	14190 <__assert_fail@plt+0x328c>
   143b0:	mov	r2, #5
   143b4:	movw	r1, #24992	; 0x61a0
   143b8:	movt	r1, #1
   143bc:	mov	r0, #0
   143c0:	bl	10d48 <dcgettext@plt>
   143c4:	ldmib	r5, {ip, lr}
   143c8:	mov	r2, r0
   143cc:	mov	r1, #1
   143d0:	mov	r0, r4
   143d4:	ldr	r3, [r5, #28]
   143d8:	str	ip, [sp]
   143dc:	ldr	ip, [r5, #12]
   143e0:	str	r3, [sp, #24]
   143e4:	ldr	r3, [r5, #24]
   143e8:	str	lr, [sp, #4]
   143ec:	ldr	lr, [r5, #16]
   143f0:	str	ip, [sp, #8]
   143f4:	ldr	ip, [r5, #20]
   143f8:	str	r3, [sp, #20]
   143fc:	ldr	r3, [r5]
   14400:	str	lr, [sp, #12]
   14404:	str	ip, [sp, #16]
   14408:	bl	10e68 <__fprintf_chk@plt>
   1440c:	b	14190 <__assert_fail@plt+0x328c>
   14410:	movw	r1, #25092	; 0x6204
   14414:	movt	r1, #1
   14418:	b	14130 <__assert_fail@plt+0x322c>
   1441c:	strd	r4, [sp, #-12]!
   14420:	str	lr, [sp, #8]
   14424:	sub	sp, sp, #12
   14428:	ldr	r5, [sp, #24]
   1442c:	ldr	ip, [r5]
   14430:	cmp	ip, #0
   14434:	beq	14450 <__assert_fail@plt+0x354c>
   14438:	mov	lr, r5
   1443c:	mov	ip, #0
   14440:	ldr	r4, [lr, #4]!
   14444:	add	ip, ip, #1
   14448:	cmp	r4, #0
   1444c:	bne	14440 <__assert_fail@plt+0x353c>
   14450:	stm	sp, {r5, ip}
   14454:	bl	1403c <__assert_fail@plt+0x3138>
   14458:	add	sp, sp, #12
   1445c:	ldrd	r4, [sp]
   14460:	add	sp, sp, #8
   14464:	pop	{pc}		; (ldr pc, [sp], #4)
   14468:	strd	r4, [sp, #-16]!
   1446c:	mov	ip, #0
   14470:	str	r6, [sp, #8]
   14474:	str	lr, [sp, #12]
   14478:	sub	sp, sp, #48	; 0x30
   1447c:	ldr	r5, [sp, #64]	; 0x40
   14480:	add	r6, sp, #8
   14484:	mov	r4, r6
   14488:	ldr	lr, [r5], #4
   1448c:	cmp	lr, #0
   14490:	str	lr, [r4], #4
   14494:	beq	144a4 <__assert_fail@plt+0x35a0>
   14498:	add	ip, ip, #1
   1449c:	cmp	ip, #10
   144a0:	bne	14488 <__assert_fail@plt+0x3584>
   144a4:	stm	sp, {r6, ip}
   144a8:	bl	1403c <__assert_fail@plt+0x3138>
   144ac:	add	sp, sp, #48	; 0x30
   144b0:	ldrd	r4, [sp]
   144b4:	ldr	r6, [sp, #8]
   144b8:	add	sp, sp, #12
   144bc:	pop	{pc}		; (ldr pc, [sp], #4)
   144c0:	push	{r3}		; (str r3, [sp, #-4]!)
   144c4:	mov	ip, #0
   144c8:	strd	r4, [sp, #-12]!
   144cc:	str	lr, [sp, #8]
   144d0:	sub	sp, sp, #56	; 0x38
   144d4:	add	r3, sp, #72	; 0x48
   144d8:	add	r5, sp, #16
   144dc:	mov	r4, r3
   144e0:	mov	lr, r5
   144e4:	str	r3, [sp, #12]
   144e8:	ldr	r3, [r4], #4
   144ec:	cmp	r3, #0
   144f0:	str	r3, [lr], #4
   144f4:	beq	14504 <__assert_fail@plt+0x3600>
   144f8:	add	ip, ip, #1
   144fc:	cmp	ip, #10
   14500:	bne	144e8 <__assert_fail@plt+0x35e4>
   14504:	ldr	r3, [sp, #68]	; 0x44
   14508:	stm	sp, {r5, ip}
   1450c:	bl	1403c <__assert_fail@plt+0x3138>
   14510:	add	sp, sp, #56	; 0x38
   14514:	ldrd	r4, [sp]
   14518:	ldr	lr, [sp, #8]
   1451c:	add	sp, sp, #12
   14520:	add	sp, sp, #4
   14524:	bx	lr
   14528:	movw	r3, #29004	; 0x714c
   1452c:	movt	r3, #2
   14530:	str	r4, [sp, #-8]!
   14534:	mov	r0, #10
   14538:	ldr	r1, [r3]
   1453c:	str	lr, [sp, #4]
   14540:	bl	10d3c <fputc_unlocked@plt>
   14544:	mov	r2, #5
   14548:	movw	r1, #25152	; 0x6240
   1454c:	movt	r1, #1
   14550:	mov	r0, #0
   14554:	bl	10d48 <dcgettext@plt>
   14558:	mov	r1, r0
   1455c:	movw	r2, #25172	; 0x6254
   14560:	movt	r2, #1
   14564:	mov	r0, #1
   14568:	bl	10e50 <__printf_chk@plt>
   1456c:	mov	r2, #5
   14570:	movw	r1, #25196	; 0x626c
   14574:	movt	r1, #1
   14578:	mov	r0, #0
   1457c:	bl	10d48 <dcgettext@plt>
   14580:	mov	r1, r0
   14584:	movw	r3, #23796	; 0x5cf4
   14588:	movt	r3, #1
   1458c:	movw	r2, #23836	; 0x5d1c
   14590:	movt	r2, #1
   14594:	mov	r0, #1
   14598:	bl	10e50 <__printf_chk@plt>
   1459c:	mov	r2, #5
   145a0:	movw	r1, #25216	; 0x6280
   145a4:	movt	r1, #1
   145a8:	mov	r0, #0
   145ac:	bl	10d48 <dcgettext@plt>
   145b0:	mov	r1, r0
   145b4:	movw	r2, #25256	; 0x62a8
   145b8:	movt	r2, #1
   145bc:	mov	r0, #1
   145c0:	ldr	r4, [sp]
   145c4:	ldr	lr, [sp, #4]
   145c8:	add	sp, sp, #8
   145cc:	b	10e50 <__printf_chk@plt>
   145d0:	str	r4, [sp, #-8]!
   145d4:	str	lr, [sp, #4]
   145d8:	bl	155f4 <__assert_fail@plt+0x46f0>
   145dc:	cmp	r0, #0
   145e0:	beq	145f0 <__assert_fail@plt+0x36ec>
   145e4:	ldr	r4, [sp]
   145e8:	add	sp, sp, #4
   145ec:	pop	{pc}		; (ldr pc, [sp], #4)
   145f0:	bl	14a48 <__assert_fail@plt+0x3b44>
   145f4:	str	r4, [sp, #-8]!
   145f8:	str	lr, [sp, #4]
   145fc:	bl	155f4 <__assert_fail@plt+0x46f0>
   14600:	cmp	r0, #0
   14604:	beq	14614 <__assert_fail@plt+0x3710>
   14608:	ldr	r4, [sp]
   1460c:	add	sp, sp, #4
   14610:	pop	{pc}		; (ldr pc, [sp], #4)
   14614:	bl	14a48 <__assert_fail@plt+0x3b44>
   14618:	str	r4, [sp, #-8]!
   1461c:	str	lr, [sp, #4]
   14620:	bl	155f4 <__assert_fail@plt+0x46f0>
   14624:	cmp	r0, #0
   14628:	beq	14638 <__assert_fail@plt+0x3734>
   1462c:	ldr	r4, [sp]
   14630:	add	sp, sp, #4
   14634:	pop	{pc}		; (ldr pc, [sp], #4)
   14638:	bl	14a48 <__assert_fail@plt+0x3b44>
   1463c:	strd	r4, [sp, #-16]!
   14640:	mov	r5, r0
   14644:	mov	r4, r1
   14648:	str	r6, [sp, #8]
   1464c:	str	lr, [sp, #12]
   14650:	bl	15630 <__assert_fail@plt+0x472c>
   14654:	cmp	r0, #0
   14658:	beq	1466c <__assert_fail@plt+0x3768>
   1465c:	ldrd	r4, [sp]
   14660:	ldr	r6, [sp, #8]
   14664:	add	sp, sp, #12
   14668:	pop	{pc}		; (ldr pc, [sp], #4)
   1466c:	adds	r4, r4, #0
   14670:	movne	r4, #1
   14674:	cmp	r5, #0
   14678:	moveq	r4, #1
   1467c:	cmp	r4, #0
   14680:	beq	1465c <__assert_fail@plt+0x3758>
   14684:	bl	14a48 <__assert_fail@plt+0x3b44>
   14688:	cmp	r1, #0
   1468c:	orreq	r1, r1, #1
   14690:	str	r4, [sp, #-8]!
   14694:	str	lr, [sp, #4]
   14698:	bl	15630 <__assert_fail@plt+0x472c>
   1469c:	cmp	r0, #0
   146a0:	beq	146b0 <__assert_fail@plt+0x37ac>
   146a4:	ldr	r4, [sp]
   146a8:	add	sp, sp, #4
   146ac:	pop	{pc}		; (ldr pc, [sp], #4)
   146b0:	bl	14a48 <__assert_fail@plt+0x3b44>
   146b4:	strd	r4, [sp, #-16]!
   146b8:	mov	r4, r0
   146bc:	mov	r5, r2
   146c0:	str	r6, [sp, #8]
   146c4:	mov	r6, r1
   146c8:	str	lr, [sp, #12]
   146cc:	bl	1582c <__assert_fail@plt+0x4928>
   146d0:	cmp	r0, #0
   146d4:	beq	146e8 <__assert_fail@plt+0x37e4>
   146d8:	ldrd	r4, [sp]
   146dc:	ldr	r6, [sp, #8]
   146e0:	add	sp, sp, #12
   146e4:	pop	{pc}		; (ldr pc, [sp], #4)
   146e8:	cmp	r4, #0
   146ec:	beq	146fc <__assert_fail@plt+0x37f8>
   146f0:	cmp	r6, #0
   146f4:	cmpne	r5, #0
   146f8:	beq	146d8 <__assert_fail@plt+0x37d4>
   146fc:	bl	14a48 <__assert_fail@plt+0x3b44>
   14700:	b	146b4 <__assert_fail@plt+0x37b0>
   14704:	cmp	r2, #0
   14708:	cmpne	r1, #0
   1470c:	str	r4, [sp, #-8]!
   14710:	moveq	r2, #1
   14714:	str	lr, [sp, #4]
   14718:	moveq	r1, r2
   1471c:	bl	1582c <__assert_fail@plt+0x4928>
   14720:	cmp	r0, #0
   14724:	beq	14734 <__assert_fail@plt+0x3830>
   14728:	ldr	r4, [sp]
   1472c:	add	sp, sp, #4
   14730:	pop	{pc}		; (ldr pc, [sp], #4)
   14734:	bl	14a48 <__assert_fail@plt+0x3b44>
   14738:	mov	r2, r1
   1473c:	mov	r1, r0
   14740:	mov	r0, #0
   14744:	b	146b4 <__assert_fail@plt+0x37b0>
   14748:	mov	r2, r1
   1474c:	mov	r1, r0
   14750:	mov	r0, #0
   14754:	b	14704 <__assert_fail@plt+0x3800>
   14758:	cmp	r0, #0
   1475c:	strd	r4, [sp, #-16]!
   14760:	mov	r5, r1
   14764:	ldr	r4, [r1]
   14768:	str	r6, [sp, #8]
   1476c:	str	lr, [sp, #12]
   14770:	beq	147a0 <__assert_fail@plt+0x389c>
   14774:	lsr	r3, r4, #1
   14778:	add	r3, r3, #1
   1477c:	adds	r4, r4, r3
   14780:	bcs	147bc <__assert_fail@plt+0x38b8>
   14784:	mov	r1, r4
   14788:	bl	146b4 <__assert_fail@plt+0x37b0>
   1478c:	ldr	r6, [sp, #8]
   14790:	str	r4, [r5]
   14794:	ldrd	r4, [sp]
   14798:	add	sp, sp, #12
   1479c:	pop	{pc}		; (ldr pc, [sp], #4)
   147a0:	cmp	r4, #0
   147a4:	bne	14784 <__assert_fail@plt+0x3880>
   147a8:	mov	r4, #64	; 0x40
   147ac:	udiv	r4, r4, r2
   147b0:	cmp	r2, #64	; 0x40
   147b4:	addhi	r4, r4, #1
   147b8:	b	14784 <__assert_fail@plt+0x3880>
   147bc:	bl	14a48 <__assert_fail@plt+0x3b44>
   147c0:	mov	r2, #1
   147c4:	b	14758 <__assert_fail@plt+0x3854>
   147c8:	ldr	ip, [r1]
   147cc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   147d0:	mov	r5, r1
   147d4:	strd	r6, [sp, #8]
   147d8:	str	lr, [sp, #28]
   147dc:	strd	r8, [sp, #16]
   147e0:	asr	lr, ip, #1
   147e4:	ldr	r8, [sp, #32]
   147e8:	str	sl, [sp, #24]
   147ec:	adds	r4, ip, lr
   147f0:	mvn	lr, r3
   147f4:	lsr	lr, lr, #31
   147f8:	mvnvs	r4, #-2147483648	; 0x80000000
   147fc:	cmp	r3, r4
   14800:	movge	r1, #0
   14804:	andlt	r1, lr, #1
   14808:	cmp	r1, #0
   1480c:	movne	r4, r3
   14810:	smull	r6, r7, r4, r8
   14814:	cmp	r7, r6, asr #31
   14818:	bne	148a0 <__assert_fail@plt+0x399c>
   1481c:	cmp	r6, #63	; 0x3f
   14820:	mov	r1, r6
   14824:	ble	14888 <__assert_fail@plt+0x3984>
   14828:	cmp	r0, #0
   1482c:	sub	r6, r4, ip
   14830:	streq	r0, [r5]
   14834:	cmp	r6, r2
   14838:	bge	14868 <__assert_fail@plt+0x3964>
   1483c:	adds	r4, ip, r2
   14840:	bvs	1489c <__assert_fail@plt+0x3998>
   14844:	cmp	r4, r3
   14848:	movle	r3, #0
   1484c:	andgt	r3, lr, #1
   14850:	cmp	r3, #0
   14854:	bne	1489c <__assert_fail@plt+0x3998>
   14858:	smull	r8, r9, r4, r8
   1485c:	cmp	r9, r8, asr #31
   14860:	mov	r1, r8
   14864:	bne	1489c <__assert_fail@plt+0x3998>
   14868:	bl	1463c <__assert_fail@plt+0x3738>
   1486c:	ldrd	r6, [sp, #8]
   14870:	ldrd	r8, [sp, #16]
   14874:	ldr	sl, [sp, #24]
   14878:	str	r4, [r5]
   1487c:	ldrd	r4, [sp]
   14880:	add	sp, sp, #28
   14884:	pop	{pc}		; (ldr pc, [sp], #4)
   14888:	mov	r6, #64	; 0x40
   1488c:	sdiv	r4, r6, r8
   14890:	mls	r1, r8, r4, r6
   14894:	sub	r1, r6, r1
   14898:	b	14828 <__assert_fail@plt+0x3924>
   1489c:	bl	14a48 <__assert_fail@plt+0x3b44>
   148a0:	mvn	r6, #-2147483648	; 0x80000000
   148a4:	b	1488c <__assert_fail@plt+0x3988>
   148a8:	mov	r1, #1
   148ac:	str	r4, [sp, #-8]!
   148b0:	str	lr, [sp, #4]
   148b4:	bl	15580 <__assert_fail@plt+0x467c>
   148b8:	cmp	r0, #0
   148bc:	beq	148cc <__assert_fail@plt+0x39c8>
   148c0:	ldr	r4, [sp]
   148c4:	add	sp, sp, #4
   148c8:	pop	{pc}		; (ldr pc, [sp], #4)
   148cc:	bl	14a48 <__assert_fail@plt+0x3b44>
   148d0:	mov	r1, #1
   148d4:	str	r4, [sp, #-8]!
   148d8:	str	lr, [sp, #4]
   148dc:	bl	15580 <__assert_fail@plt+0x467c>
   148e0:	cmp	r0, #0
   148e4:	beq	148f4 <__assert_fail@plt+0x39f0>
   148e8:	ldr	r4, [sp]
   148ec:	add	sp, sp, #4
   148f0:	pop	{pc}		; (ldr pc, [sp], #4)
   148f4:	bl	14a48 <__assert_fail@plt+0x3b44>
   148f8:	str	r4, [sp, #-8]!
   148fc:	str	lr, [sp, #4]
   14900:	bl	15580 <__assert_fail@plt+0x467c>
   14904:	cmp	r0, #0
   14908:	beq	14918 <__assert_fail@plt+0x3a14>
   1490c:	ldr	r4, [sp]
   14910:	add	sp, sp, #4
   14914:	pop	{pc}		; (ldr pc, [sp], #4)
   14918:	bl	14a48 <__assert_fail@plt+0x3b44>
   1491c:	str	r4, [sp, #-8]!
   14920:	str	lr, [sp, #4]
   14924:	bl	15580 <__assert_fail@plt+0x467c>
   14928:	cmp	r0, #0
   1492c:	beq	1493c <__assert_fail@plt+0x3a38>
   14930:	ldr	r4, [sp]
   14934:	add	sp, sp, #4
   14938:	pop	{pc}		; (ldr pc, [sp], #4)
   1493c:	bl	14a48 <__assert_fail@plt+0x3b44>
   14940:	strd	r4, [sp, #-16]!
   14944:	mov	r4, r1
   14948:	str	r6, [sp, #8]
   1494c:	mov	r6, r0
   14950:	mov	r0, r1
   14954:	str	lr, [sp, #12]
   14958:	bl	155f4 <__assert_fail@plt+0x46f0>
   1495c:	subs	r5, r0, #0
   14960:	beq	14984 <__assert_fail@plt+0x3a80>
   14964:	mov	r2, r4
   14968:	mov	r1, r6
   1496c:	bl	10d00 <memcpy@plt>
   14970:	mov	r0, r5
   14974:	ldrd	r4, [sp]
   14978:	ldr	r6, [sp, #8]
   1497c:	add	sp, sp, #12
   14980:	pop	{pc}		; (ldr pc, [sp], #4)
   14984:	bl	14a48 <__assert_fail@plt+0x3b44>
   14988:	strd	r4, [sp, #-16]!
   1498c:	mov	r4, r1
   14990:	str	r6, [sp, #8]
   14994:	mov	r6, r0
   14998:	mov	r0, r1
   1499c:	str	lr, [sp, #12]
   149a0:	bl	155f4 <__assert_fail@plt+0x46f0>
   149a4:	subs	r5, r0, #0
   149a8:	beq	149cc <__assert_fail@plt+0x3ac8>
   149ac:	mov	r2, r4
   149b0:	mov	r1, r6
   149b4:	bl	10d00 <memcpy@plt>
   149b8:	mov	r0, r5
   149bc:	ldrd	r4, [sp]
   149c0:	ldr	r6, [sp, #8]
   149c4:	add	sp, sp, #12
   149c8:	pop	{pc}		; (ldr pc, [sp], #4)
   149cc:	bl	14a48 <__assert_fail@plt+0x3b44>
   149d0:	strd	r4, [sp, #-16]!
   149d4:	mov	r4, r1
   149d8:	str	r6, [sp, #8]
   149dc:	mov	r6, r0
   149e0:	add	r0, r1, #1
   149e4:	str	lr, [sp, #12]
   149e8:	bl	155f4 <__assert_fail@plt+0x46f0>
   149ec:	subs	r5, r0, #0
   149f0:	beq	14a1c <__assert_fail@plt+0x3b18>
   149f4:	mov	r3, #0
   149f8:	mov	r1, r6
   149fc:	mov	r2, r4
   14a00:	strb	r3, [r5, r4]
   14a04:	bl	10d00 <memcpy@plt>
   14a08:	mov	r0, r5
   14a0c:	ldrd	r4, [sp]
   14a10:	ldr	r6, [sp, #8]
   14a14:	add	sp, sp, #12
   14a18:	pop	{pc}		; (ldr pc, [sp], #4)
   14a1c:	bl	14a48 <__assert_fail@plt+0x3b44>
   14a20:	str	r4, [sp, #-8]!
   14a24:	mov	r4, r0
   14a28:	str	lr, [sp, #4]
   14a2c:	bl	10e14 <strlen@plt>
   14a30:	add	r1, r0, #1
   14a34:	mov	r0, r4
   14a38:	ldr	r4, [sp]
   14a3c:	ldr	lr, [sp, #4]
   14a40:	add	sp, sp, #8
   14a44:	b	14940 <__assert_fail@plt+0x3a3c>
   14a48:	movw	r3, #28908	; 0x70ec
   14a4c:	movt	r3, #2
   14a50:	str	r4, [sp, #-8]!
   14a54:	ldr	r4, [r3]
   14a58:	mov	r2, #5
   14a5c:	movw	r1, #25336	; 0x62f8
   14a60:	movt	r1, #1
   14a64:	mov	r0, #0
   14a68:	str	lr, [sp, #4]
   14a6c:	bl	10d48 <dcgettext@plt>
   14a70:	mov	r3, r0
   14a74:	movw	r2, #24256	; 0x5ec0
   14a78:	movt	r2, #1
   14a7c:	mov	r1, #0
   14a80:	mov	r0, r4
   14a84:	bl	10db4 <error@plt>
   14a88:	bl	10ef8 <abort@plt>
   14a8c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a90:	strd	r6, [sp, #8]
   14a94:	mov	r6, r2
   14a98:	mov	r7, r3
   14a9c:	str	r8, [sp, #16]
   14aa0:	mov	r2, r1
   14aa4:	mov	r1, #0
   14aa8:	str	lr, [sp, #20]
   14aac:	sub	sp, sp, #16
   14ab0:	mov	r8, r0
   14ab4:	ldr	ip, [sp, #48]	; 0x30
   14ab8:	add	r3, sp, #8
   14abc:	str	ip, [sp]
   14ac0:	bl	14bd8 <__assert_fail@plt+0x3cd4>
   14ac4:	subs	r4, r0, #0
   14ac8:	bne	14b18 <__assert_fail@plt+0x3c14>
   14acc:	ldrd	r4, [sp, #8]
   14ad0:	ldrd	r0, [sp, #40]	; 0x28
   14ad4:	cmp	r5, r7
   14ad8:	cmpeq	r4, r6
   14adc:	movcc	r3, #1
   14ae0:	movcs	r3, #0
   14ae4:	cmp	r5, r1
   14ae8:	cmpeq	r4, r0
   14aec:	orrhi	r3, r3, #1
   14af0:	cmp	r3, #0
   14af4:	bne	14b98 <__assert_fail@plt+0x3c94>
   14af8:	mov	r0, r4
   14afc:	mov	r1, r5
   14b00:	add	sp, sp, #16
   14b04:	ldrd	r4, [sp]
   14b08:	ldrd	r6, [sp, #8]
   14b0c:	ldr	r8, [sp, #16]
   14b10:	add	sp, sp, #20
   14b14:	pop	{pc}		; (ldr pc, [sp], #4)
   14b18:	bl	10e2c <__errno_location@plt>
   14b1c:	cmp	r4, #1
   14b20:	moveq	r3, #75	; 0x4b
   14b24:	moveq	r4, r3
   14b28:	streq	r3, [r0]
   14b2c:	beq	14b80 <__assert_fail@plt+0x3c7c>
   14b30:	cmp	r4, #3
   14b34:	beq	14b74 <__assert_fail@plt+0x3c70>
   14b38:	ldr	r3, [sp, #56]	; 0x38
   14b3c:	ldr	r4, [r0]
   14b40:	cmp	r3, #0
   14b44:	beq	14b8c <__assert_fail@plt+0x3c88>
   14b48:	cmp	r4, #22
   14b4c:	moveq	r4, #0
   14b50:	mov	r0, r8
   14b54:	bl	14024 <__assert_fail@plt+0x3120>
   14b58:	movw	r2, #24252	; 0x5ebc
   14b5c:	movt	r2, #1
   14b60:	str	r0, [sp]
   14b64:	mov	r1, r4
   14b68:	ldr	r3, [sp, #52]	; 0x34
   14b6c:	ldr	r0, [sp, #56]	; 0x38
   14b70:	bl	10db4 <error@plt>
   14b74:	mov	r3, #0
   14b78:	mov	r4, r3
   14b7c:	str	r3, [r0]
   14b80:	ldr	r3, [sp, #56]	; 0x38
   14b84:	cmp	r3, #0
   14b88:	bne	14b50 <__assert_fail@plt+0x3c4c>
   14b8c:	mov	r3, #1
   14b90:	str	r3, [sp, #56]	; 0x38
   14b94:	b	14b48 <__assert_fail@plt+0x3c44>
   14b98:	bl	10e2c <__errno_location@plt>
   14b9c:	mov	r3, #0
   14ba0:	mvn	r2, #-1073741824	; 0xc0000000
   14ba4:	cmp	r5, r3
   14ba8:	cmpeq	r4, r2
   14bac:	movhi	r3, #75	; 0x4b
   14bb0:	movls	r3, #34	; 0x22
   14bb4:	mov	r4, r3
   14bb8:	str	r3, [r0]
   14bbc:	ldr	r3, [sp, #56]	; 0x38
   14bc0:	cmp	r3, #0
   14bc4:	moveq	r3, #1
   14bc8:	str	r3, [sp, #56]	; 0x38
   14bcc:	b	14b50 <__assert_fail@plt+0x3c4c>
   14bd0:	mov	r1, #10
   14bd4:	b	14a8c <__assert_fail@plt+0x3b88>
   14bd8:	cmp	r2, #36	; 0x24
   14bdc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14be0:	strd	r6, [sp, #8]
   14be4:	strd	r8, [sp, #16]
   14be8:	strd	sl, [sp, #24]
   14bec:	str	lr, [sp, #32]
   14bf0:	sub	sp, sp, #36	; 0x24
   14bf4:	bhi	15484 <__assert_fail@plt+0x4580>
   14bf8:	cmp	r1, #0
   14bfc:	mov	r8, r2
   14c00:	mov	r6, r0
   14c04:	mov	r5, r1
   14c08:	mov	sl, r3
   14c0c:	addeq	r5, sp, #28
   14c10:	bl	10e2c <__errno_location@plt>
   14c14:	mov	r3, #0
   14c18:	mov	r7, r0
   14c1c:	str	r3, [r0]
   14c20:	bl	10dfc <__ctype_b_loc@plt>
   14c24:	ldrb	r3, [r6]
   14c28:	mov	r2, r6
   14c2c:	ldr	r0, [r0]
   14c30:	b	14c38 <__assert_fail@plt+0x3d34>
   14c34:	ldrb	r3, [r2, #1]!
   14c38:	lsl	r1, r3, #1
   14c3c:	ldrh	r4, [r0, r1]
   14c40:	ands	r4, r4, #8192	; 0x2000
   14c44:	bne	14c34 <__assert_fail@plt+0x3d30>
   14c48:	cmp	r3, #45	; 0x2d
   14c4c:	beq	14cec <__assert_fail@plt+0x3de8>
   14c50:	mov	r2, r8
   14c54:	mov	r3, r4
   14c58:	mov	r1, r5
   14c5c:	mov	r0, r6
   14c60:	bl	10d0c <__strtoull_internal@plt>
   14c64:	ldr	fp, [r5]
   14c68:	mov	r9, r0
   14c6c:	mov	r8, r1
   14c70:	cmp	fp, r6
   14c74:	beq	14cd4 <__assert_fail@plt+0x3dd0>
   14c78:	ldr	r4, [r7]
   14c7c:	cmp	r4, #0
   14c80:	bne	14cc4 <__assert_fail@plt+0x3dc0>
   14c84:	ldr	r3, [sp, #72]	; 0x48
   14c88:	cmp	r3, #0
   14c8c:	beq	14c9c <__assert_fail@plt+0x3d98>
   14c90:	ldrb	r6, [fp]
   14c94:	cmp	r6, #0
   14c98:	bne	14fdc <__assert_fail@plt+0x40d8>
   14c9c:	str	r9, [sl]
   14ca0:	str	r8, [sl, #4]
   14ca4:	mov	r0, r4
   14ca8:	add	sp, sp, #36	; 0x24
   14cac:	ldrd	r4, [sp]
   14cb0:	ldrd	r6, [sp, #8]
   14cb4:	ldrd	r8, [sp, #16]
   14cb8:	ldrd	sl, [sp, #24]
   14cbc:	add	sp, sp, #32
   14cc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cc4:	cmp	r4, #34	; 0x22
   14cc8:	bne	14cec <__assert_fail@plt+0x3de8>
   14ccc:	mov	r4, #1
   14cd0:	b	14c84 <__assert_fail@plt+0x3d80>
   14cd4:	ldr	r3, [sp, #72]	; 0x48
   14cd8:	cmp	r3, #0
   14cdc:	beq	14cec <__assert_fail@plt+0x3de8>
   14ce0:	ldrb	r6, [r6]
   14ce4:	cmp	r6, #0
   14ce8:	bne	14cf4 <__assert_fail@plt+0x3df0>
   14cec:	mov	r4, #4
   14cf0:	b	14ca4 <__assert_fail@plt+0x3da0>
   14cf4:	mov	r1, r6
   14cf8:	mov	r0, r3
   14cfc:	bl	10e20 <strchr@plt>
   14d00:	cmp	r0, #0
   14d04:	movne	r9, #1
   14d08:	movne	r8, #0
   14d0c:	beq	14cec <__assert_fail@plt+0x3de8>
   14d10:	sub	r3, r6, #69	; 0x45
   14d14:	cmp	r3, #47	; 0x2f
   14d18:	ldrls	pc, [pc, r3, lsl #2]
   14d1c:	b	14e24 <__assert_fail@plt+0x3f20>
   14d20:	andeq	r4, r1, r0, ror #27
   14d24:	andeq	r4, r1, r4, lsr #28
   14d28:	andeq	r4, r1, r0, ror #27
   14d2c:	andeq	r4, r1, r4, lsr #28
   14d30:	andeq	r4, r1, r4, lsr #28
   14d34:	andeq	r4, r1, r4, lsr #28
   14d38:	andeq	r4, r1, r0, ror #27
   14d3c:	andeq	r4, r1, r4, lsr #28
   14d40:	andeq	r4, r1, r0, ror #27
   14d44:	andeq	r4, r1, r4, lsr #28
   14d48:	andeq	r4, r1, r4, lsr #28
   14d4c:	andeq	r4, r1, r0, ror #27
   14d50:	andeq	r4, r1, r4, lsr #28
   14d54:	andeq	r4, r1, r4, lsr #28
   14d58:	andeq	r4, r1, r4, lsr #28
   14d5c:	andeq	r4, r1, r0, ror #27
   14d60:	andeq	r4, r1, r4, lsr #28
   14d64:	andeq	r4, r1, r4, lsr #28
   14d68:	andeq	r4, r1, r4, lsr #28
   14d6c:	andeq	r4, r1, r4, lsr #28
   14d70:	andeq	r4, r1, r0, ror #27
   14d74:	andeq	r4, r1, r0, ror #27
   14d78:	andeq	r4, r1, r4, lsr #28
   14d7c:	andeq	r4, r1, r4, lsr #28
   14d80:	andeq	r4, r1, r4, lsr #28
   14d84:	andeq	r4, r1, r4, lsr #28
   14d88:	andeq	r4, r1, r4, lsr #28
   14d8c:	andeq	r4, r1, r4, lsr #28
   14d90:	andeq	r4, r1, r4, lsr #28
   14d94:	andeq	r4, r1, r4, lsr #28
   14d98:	andeq	r4, r1, r4, lsr #28
   14d9c:	andeq	r4, r1, r4, lsr #28
   14da0:	andeq	r4, r1, r4, lsr #28
   14da4:	andeq	r4, r1, r4, lsr #28
   14da8:	andeq	r4, r1, r0, ror #27
   14dac:	andeq	r4, r1, r4, lsr #28
   14db0:	andeq	r4, r1, r4, lsr #28
   14db4:	andeq	r4, r1, r4, lsr #28
   14db8:	andeq	r4, r1, r0, ror #27
   14dbc:	andeq	r4, r1, r4, lsr #28
   14dc0:	andeq	r4, r1, r0, ror #27
   14dc4:	andeq	r4, r1, r4, lsr #28
   14dc8:	andeq	r4, r1, r4, lsr #28
   14dcc:	andeq	r4, r1, r4, lsr #28
   14dd0:	andeq	r4, r1, r4, lsr #28
   14dd4:	andeq	r4, r1, r4, lsr #28
   14dd8:	andeq	r4, r1, r4, lsr #28
   14ddc:	andeq	r4, r1, r0, ror #27
   14de0:	mov	r1, #48	; 0x30
   14de4:	ldr	r0, [sp, #72]	; 0x48
   14de8:	bl	10e20 <strchr@plt>
   14dec:	cmp	r0, #0
   14df0:	beq	14e24 <__assert_fail@plt+0x3f20>
   14df4:	ldrb	r3, [fp, #1]
   14df8:	cmp	r3, #68	; 0x44
   14dfc:	beq	15350 <__assert_fail@plt+0x444c>
   14e00:	cmp	r3, #105	; 0x69
   14e04:	beq	14ff4 <__assert_fail@plt+0x40f0>
   14e08:	cmp	r3, #66	; 0x42
   14e0c:	moveq	r3, #2
   14e10:	movne	r3, #1
   14e14:	moveq	r7, #1000	; 0x3e8
   14e18:	movne	r7, #1024	; 0x400
   14e1c:	str	r3, [sp, #4]
   14e20:	b	14e30 <__assert_fail@plt+0x3f2c>
   14e24:	mov	r3, #1
   14e28:	mov	r7, #1024	; 0x400
   14e2c:	str	r3, [sp, #4]
   14e30:	sub	r6, r6, #66	; 0x42
   14e34:	cmp	r6, #53	; 0x35
   14e38:	ldrls	pc, [pc, r6, lsl #2]
   14e3c:	b	14fa0 <__assert_fail@plt+0x409c>
   14e40:	strdeq	r5, [r1], -r8
   14e44:	andeq	r4, r1, r0, lsr #31
   14e48:	andeq	r4, r1, r0, lsr #31
   14e4c:	andeq	r5, r1, r4, lsl #2
   14e50:	andeq	r4, r1, r0, lsr #31
   14e54:	andeq	r4, r1, r8, lsl pc
   14e58:	andeq	r4, r1, r0, lsr #31
   14e5c:	andeq	r4, r1, r0, lsr #31
   14e60:	andeq	r4, r1, r0, lsr #31
   14e64:	andeq	r4, r1, r8, lsr #31
   14e68:	andeq	r4, r1, r0, lsr #31
   14e6c:	andeq	r5, r1, r4, lsr #5
   14e70:	andeq	r4, r1, r0, lsr #31
   14e74:	andeq	r4, r1, r0, lsr #31
   14e78:	strdeq	r5, [r1], -r4
   14e7c:	andeq	r4, r1, r0, lsr #31
   14e80:	andeq	r4, r1, r0, lsr #31
   14e84:	andeq	r4, r1, r0, lsr #31
   14e88:	andeq	r5, r1, ip, ror r1
   14e8c:	andeq	r4, r1, r0, lsr #31
   14e90:	andeq	r4, r1, r0, lsr #31
   14e94:	andeq	r4, r1, r0, lsr #31
   14e98:	andeq	r4, r1, r0, lsr #31
   14e9c:	andeq	r5, r1, ip, lsl #1
   14ea0:	andeq	r5, r1, r0, lsl r0
   14ea4:	andeq	r4, r1, r0, lsr #31
   14ea8:	andeq	r4, r1, r0, lsr #31
   14eac:	andeq	r4, r1, r0, lsr #31
   14eb0:	andeq	r4, r1, r0, lsr #31
   14eb4:	andeq	r4, r1, r0, lsr #31
   14eb8:	andeq	r4, r1, r0, lsr #31
   14ebc:	andeq	r4, r1, r0, lsr #31
   14ec0:	andeq	r5, r1, r4, lsl #5
   14ec4:	andeq	r4, r1, r8, lsl #31
   14ec8:	andeq	r4, r1, r0, lsr #31
   14ecc:	andeq	r4, r1, r0, lsr #31
   14ed0:	andeq	r4, r1, r0, lsr #31
   14ed4:	andeq	r4, r1, r8, lsl pc
   14ed8:	andeq	r4, r1, r0, lsr #31
   14edc:	andeq	r4, r1, r0, lsr #31
   14ee0:	andeq	r4, r1, r0, lsr #31
   14ee4:	andeq	r4, r1, r8, lsr #31
   14ee8:	andeq	r4, r1, r0, lsr #31
   14eec:	andeq	r5, r1, r4, lsr #5
   14ef0:	andeq	r4, r1, r0, lsr #31
   14ef4:	andeq	r4, r1, r0, lsr #31
   14ef8:	andeq	r4, r1, r0, lsr #31
   14efc:	andeq	r4, r1, r0, lsr #31
   14f00:	andeq	r4, r1, r0, lsr #31
   14f04:	andeq	r4, r1, r0, lsr #31
   14f08:	andeq	r5, r1, ip, ror r1
   14f0c:	andeq	r4, r1, r0, lsr #31
   14f10:	andeq	r4, r1, r0, lsr #31
   14f14:	andeq	r5, r1, ip, ror #4
   14f18:	asr	r3, r7, #31
   14f1c:	mov	r2, r7
   14f20:	cmp	r8, #0
   14f24:	umull	r0, r1, r9, r7
   14f28:	mov	ip, #0
   14f2c:	strd	r2, [sp, #8]
   14f30:	bne	15384 <__assert_fail@plt+0x4480>
   14f34:	mov	r2, r0
   14f38:	mov	r3, r1
   14f3c:	cmp	ip, #0
   14f40:	bne	14fcc <__assert_fail@plt+0x40c8>
   14f44:	cmp	r3, #0
   14f48:	mov	lr, ip
   14f4c:	bne	153e8 <__assert_fail@plt+0x44e4>
   14f50:	umull	r2, r3, r2, r7
   14f54:	mov	ip, r2
   14f58:	mov	r1, r3
   14f5c:	subs	r0, lr, #0
   14f60:	bne	14fcc <__assert_fail@plt+0x40c8>
   14f64:	cmp	r1, #0
   14f68:	bne	153c8 <__assert_fail@plt+0x44c4>
   14f6c:	umull	r2, r3, ip, r7
   14f70:	mov	r6, r2
   14f74:	mov	r2, r3
   14f78:	cmp	r0, #0
   14f7c:	mov	r9, r6
   14f80:	mov	r8, r2
   14f84:	bne	14fcc <__assert_fail@plt+0x40c8>
   14f88:	ldr	r2, [sp, #4]
   14f8c:	add	r3, fp, r2
   14f90:	str	r3, [r5]
   14f94:	ldrb	r3, [fp, r2]
   14f98:	cmp	r3, #0
   14f9c:	beq	14c9c <__assert_fail@plt+0x3d98>
   14fa0:	orr	r4, r4, #2
   14fa4:	b	14c9c <__assert_fail@plt+0x3d98>
   14fa8:	cmp	r8, #0
   14fac:	umull	r2, r3, r9, r7
   14fb0:	mov	ip, #0
   14fb4:	asr	r1, r7, #31
   14fb8:	bne	15320 <__assert_fail@plt+0x441c>
   14fbc:	mov	r9, r2
   14fc0:	mov	r8, r3
   14fc4:	cmp	ip, #0
   14fc8:	beq	14f88 <__assert_fail@plt+0x4084>
   14fcc:	mvn	r9, #0
   14fd0:	mov	r4, #1
   14fd4:	mov	r8, r9
   14fd8:	b	14f88 <__assert_fail@plt+0x4084>
   14fdc:	mov	r1, r6
   14fe0:	ldr	r0, [sp, #72]	; 0x48
   14fe4:	bl	10e20 <strchr@plt>
   14fe8:	cmp	r0, #0
   14fec:	bne	14d10 <__assert_fail@plt+0x3e0c>
   14ff0:	b	14fa0 <__assert_fail@plt+0x409c>
   14ff4:	ldrb	r3, [fp, #2]
   14ff8:	mov	r7, #1024	; 0x400
   14ffc:	cmp	r3, #66	; 0x42
   15000:	movne	r3, #1
   15004:	moveq	r3, #3
   15008:	str	r3, [sp, #4]
   1500c:	b	14e30 <__assert_fail@plt+0x3f2c>
   15010:	asr	r3, r7, #31
   15014:	mov	r2, r7
   15018:	mov	ip, #0
   1501c:	mov	r0, #7
   15020:	mov	lr, ip
   15024:	mov	r6, r4
   15028:	strd	r2, [sp, #8]
   1502c:	str	r5, [sp, #16]
   15030:	b	1505c <__assert_fail@plt+0x4158>
   15034:	umull	r2, r3, r9, r7
   15038:	mov	r9, r2
   1503c:	mov	r8, r3
   15040:	cmp	r1, #0
   15044:	beq	15054 <__assert_fail@plt+0x4150>
   15048:	mvn	r9, #0
   1504c:	mov	ip, #1
   15050:	mov	r8, r9
   15054:	subs	r0, r0, #1
   15058:	beq	15344 <__assert_fail@plt+0x4440>
   1505c:	cmp	r8, #0
   15060:	mov	r1, #0
   15064:	beq	15034 <__assert_fail@plt+0x4130>
   15068:	umull	r4, r5, r9, r7
   1506c:	mov	r3, lr
   15070:	mov	r2, r5
   15074:	umlal	r2, r3, r8, r7
   15078:	cmp	r3, #0
   1507c:	bne	154a4 <__assert_fail@plt+0x45a0>
   15080:	mov	r9, r4
   15084:	mov	r8, r2
   15088:	b	15040 <__assert_fail@plt+0x413c>
   1508c:	asr	r3, r7, #31
   15090:	mov	r2, r7
   15094:	mov	r6, #0
   15098:	mov	lr, #8
   1509c:	mov	r0, r4
   150a0:	mov	ip, r5
   150a4:	strd	r2, [sp, #8]
   150a8:	b	150d4 <__assert_fail@plt+0x41d0>
   150ac:	umull	r2, r3, r9, r7
   150b0:	mov	r9, r2
   150b4:	mov	r8, r3
   150b8:	cmp	r1, #0
   150bc:	beq	150cc <__assert_fail@plt+0x41c8>
   150c0:	mvn	r9, #0
   150c4:	mov	r6, #1
   150c8:	mov	r8, r9
   150cc:	subs	lr, lr, #1
   150d0:	beq	15314 <__assert_fail@plt+0x4410>
   150d4:	cmp	r8, #0
   150d8:	mov	r1, #0
   150dc:	beq	150ac <__assert_fail@plt+0x41a8>
   150e0:	umull	r4, r5, r9, r7
   150e4:	mov	r3, #0
   150e8:	mov	r2, r5
   150ec:	umlal	r2, r3, r8, r7
   150f0:	cmp	r3, #0
   150f4:	bne	154fc <__assert_fail@plt+0x45f8>
   150f8:	mov	r9, r4
   150fc:	mov	r8, r2
   15100:	b	150b8 <__assert_fail@plt+0x41b4>
   15104:	asr	r3, r7, #31
   15108:	mov	r2, r7
   1510c:	mov	r6, #0
   15110:	mov	lr, #6
   15114:	mov	r0, r4
   15118:	mov	ip, r5
   1511c:	strd	r2, [sp, #8]
   15120:	b	1514c <__assert_fail@plt+0x4248>
   15124:	umull	r2, r3, r9, r7
   15128:	mov	r9, r2
   1512c:	mov	r8, r3
   15130:	cmp	r1, #0
   15134:	beq	15144 <__assert_fail@plt+0x4240>
   15138:	mvn	r9, #0
   1513c:	mov	r6, #1
   15140:	mov	r8, r9
   15144:	subs	lr, lr, #1
   15148:	beq	15314 <__assert_fail@plt+0x4410>
   1514c:	cmp	r8, #0
   15150:	mov	r1, #0
   15154:	beq	15124 <__assert_fail@plt+0x4220>
   15158:	umull	r4, r5, r9, r7
   1515c:	mov	r3, #0
   15160:	mov	r2, r5
   15164:	umlal	r2, r3, r8, r7
   15168:	cmp	r3, #0
   1516c:	bne	154c4 <__assert_fail@plt+0x45c0>
   15170:	mov	r9, r4
   15174:	mov	r8, r2
   15178:	b	15130 <__assert_fail@plt+0x422c>
   1517c:	asr	r3, r7, #31
   15180:	mov	r2, r7
   15184:	mov	r6, #0
   15188:	mov	lr, #4
   1518c:	mov	r0, r4
   15190:	mov	ip, r5
   15194:	strd	r2, [sp, #8]
   15198:	b	151c4 <__assert_fail@plt+0x42c0>
   1519c:	umull	r2, r3, r9, r7
   151a0:	mov	r9, r2
   151a4:	mov	r8, r3
   151a8:	cmp	r1, #0
   151ac:	beq	151bc <__assert_fail@plt+0x42b8>
   151b0:	mvn	r9, #0
   151b4:	mov	r6, #1
   151b8:	mov	r8, r9
   151bc:	subs	lr, lr, #1
   151c0:	beq	15314 <__assert_fail@plt+0x4410>
   151c4:	cmp	r8, #0
   151c8:	mov	r1, #0
   151cc:	beq	1519c <__assert_fail@plt+0x4298>
   151d0:	umull	r4, r5, r9, r7
   151d4:	mov	r3, #0
   151d8:	mov	r2, r5
   151dc:	umlal	r2, r3, r8, r7
   151e0:	cmp	r3, #0
   151e4:	bne	154e0 <__assert_fail@plt+0x45dc>
   151e8:	mov	r9, r4
   151ec:	mov	r8, r2
   151f0:	b	151a8 <__assert_fail@plt+0x42a4>
   151f4:	asr	r3, r7, #31
   151f8:	mov	r2, r7
   151fc:	mov	r6, #0
   15200:	mov	lr, #5
   15204:	mov	r0, r4
   15208:	mov	ip, r5
   1520c:	strd	r2, [sp, #8]
   15210:	b	1523c <__assert_fail@plt+0x4338>
   15214:	umull	r2, r3, r9, r7
   15218:	mov	r9, r2
   1521c:	mov	r8, r3
   15220:	cmp	r1, #0
   15224:	beq	15234 <__assert_fail@plt+0x4330>
   15228:	mvn	r9, #0
   1522c:	mov	r6, #1
   15230:	mov	r8, r9
   15234:	subs	lr, lr, #1
   15238:	beq	15314 <__assert_fail@plt+0x4410>
   1523c:	cmp	r8, #0
   15240:	mov	r1, #0
   15244:	beq	15214 <__assert_fail@plt+0x4310>
   15248:	umull	r4, r5, r9, r7
   1524c:	mov	r3, #0
   15250:	mov	r2, r5
   15254:	umlal	r2, r3, r8, r7
   15258:	cmp	r3, #0
   1525c:	bne	1544c <__assert_fail@plt+0x4548>
   15260:	mov	r9, r4
   15264:	mov	r8, r2
   15268:	b	15220 <__assert_fail@plt+0x431c>
   1526c:	lsr	r3, r8, #31
   15270:	adds	r9, r9, r9
   15274:	adc	r8, r8, r8
   15278:	cmp	r3, #0
   1527c:	beq	14f88 <__assert_fail@plt+0x4084>
   15280:	b	14fcc <__assert_fail@plt+0x40c8>
   15284:	lsr	r3, r8, #23
   15288:	lsl	r8, r8, #9
   1528c:	cmp	r3, #0
   15290:	lsl	r3, r9, #9
   15294:	orr	r8, r8, r9, lsr #23
   15298:	bne	14fcc <__assert_fail@plt+0x40c8>
   1529c:	mov	r9, r3
   152a0:	b	14f88 <__assert_fail@plt+0x4084>
   152a4:	asr	r3, r7, #31
   152a8:	mov	r2, r7
   152ac:	cmp	r8, #0
   152b0:	mov	r1, #0
   152b4:	strd	r2, [sp, #8]
   152b8:	umull	r2, r3, r9, r7
   152bc:	bne	15360 <__assert_fail@plt+0x445c>
   152c0:	mov	r0, r2
   152c4:	mov	ip, r3
   152c8:	cmp	r1, #0
   152cc:	bne	14fcc <__assert_fail@plt+0x40c8>
   152d0:	cmp	ip, #0
   152d4:	bne	153a8 <__assert_fail@plt+0x44a4>
   152d8:	umull	r2, r3, r0, r7
   152dc:	mov	r6, r2
   152e0:	mov	r2, r3
   152e4:	cmp	r1, #0
   152e8:	mov	r9, r6
   152ec:	mov	r8, r2
   152f0:	beq	14f88 <__assert_fail@plt+0x4084>
   152f4:	b	14fcc <__assert_fail@plt+0x40c8>
   152f8:	lsr	r3, r8, #22
   152fc:	lsl	r8, r8, #10
   15300:	cmp	r3, #0
   15304:	lsl	r3, r9, #10
   15308:	orr	r8, r8, r9, lsr #22
   1530c:	beq	1529c <__assert_fail@plt+0x4398>
   15310:	b	14fcc <__assert_fail@plt+0x40c8>
   15314:	mov	r5, ip
   15318:	orr	r4, r0, r6
   1531c:	b	14f88 <__assert_fail@plt+0x4084>
   15320:	strd	r2, [sp, #8]
   15324:	mov	r3, ip
   15328:	ldr	r2, [sp, #12]
   1532c:	umlal	r2, r3, r8, r7
   15330:	cmp	r3, #0
   15334:	bne	15468 <__assert_fail@plt+0x4564>
   15338:	mov	r8, r2
   1533c:	ldr	r9, [sp, #8]
   15340:	b	14fc4 <__assert_fail@plt+0x40c0>
   15344:	orr	r4, r6, ip
   15348:	ldr	r5, [sp, #16]
   1534c:	b	14f88 <__assert_fail@plt+0x4084>
   15350:	mov	r3, #2
   15354:	mov	r7, #1000	; 0x3e8
   15358:	str	r3, [sp, #4]
   1535c:	b	14e30 <__assert_fail@plt+0x3f2c>
   15360:	strd	r2, [sp, #16]
   15364:	mov	r3, r1
   15368:	ldr	r2, [sp, #20]
   1536c:	umlal	r2, r3, r8, r7
   15370:	cmp	r3, #0
   15374:	bne	15538 <__assert_fail@plt+0x4634>
   15378:	mov	ip, r2
   1537c:	ldr	r0, [sp, #16]
   15380:	b	152c8 <__assert_fail@plt+0x43c4>
   15384:	mov	r2, r1
   15388:	mov	r3, ip
   1538c:	umlal	r2, r3, r8, r7
   15390:	cmp	r3, #0
   15394:	strd	r2, [sp, #16]
   15398:	bne	1540c <__assert_fail@plt+0x4508>
   1539c:	mov	r2, r0
   153a0:	ldr	r3, [sp, #16]
   153a4:	b	14f3c <__assert_fail@plt+0x4038>
   153a8:	umull	r8, r9, r0, r7
   153ac:	mov	r3, r1
   153b0:	mov	r2, r9
   153b4:	umlal	r2, r3, ip, r7
   153b8:	cmp	r3, #0
   153bc:	bne	15518 <__assert_fail@plt+0x4614>
   153c0:	mov	r6, r8
   153c4:	b	152e4 <__assert_fail@plt+0x43e0>
   153c8:	umull	r8, r9, ip, r7
   153cc:	mov	r3, r0
   153d0:	mov	r2, r9
   153d4:	umlal	r2, r3, r1, r7
   153d8:	cmp	r3, #0
   153dc:	bne	15560 <__assert_fail@plt+0x465c>
   153e0:	mov	r6, r8
   153e4:	b	14f78 <__assert_fail@plt+0x4074>
   153e8:	umull	r8, r9, r2, r7
   153ec:	mov	r1, ip
   153f0:	mov	r0, r9
   153f4:	umlal	r0, r1, r3, r7
   153f8:	cmp	r1, #0
   153fc:	bne	1542c <__assert_fail@plt+0x4528>
   15400:	mov	ip, r8
   15404:	mov	r1, r0
   15408:	b	14f5c <__assert_fail@plt+0x4058>
   1540c:	ldr	lr, [sp, #8]
   15410:	mov	r2, r0
   15414:	mov	ip, #1
   15418:	ldr	r3, [sp, #12]
   1541c:	mul	r3, r9, r3
   15420:	mla	r3, lr, r8, r3
   15424:	add	r3, r3, r1
   15428:	b	14f3c <__assert_fail@plt+0x4038>
   1542c:	ldr	r1, [sp, #12]
   15430:	mov	lr, #1
   15434:	mov	ip, r8
   15438:	mul	r1, r2, r1
   1543c:	ldr	r2, [sp, #8]
   15440:	mla	r1, r3, r2, r1
   15444:	add	r1, r1, r9
   15448:	b	14f5c <__assert_fail@plt+0x4058>
   1544c:	ldrd	r2, [sp, #8]
   15450:	mov	r1, #1
   15454:	mul	r3, r9, r3
   15458:	mov	r9, r4
   1545c:	mla	r8, r2, r8, r3
   15460:	add	r8, r8, r5
   15464:	b	15220 <__assert_fail@plt+0x431c>
   15468:	mul	r3, r9, r1
   1546c:	mov	ip, #1
   15470:	mla	r8, r7, r8, r3
   15474:	ldrd	r6, [sp, #8]
   15478:	mov	r9, r6
   1547c:	add	r8, r8, r7
   15480:	b	14fc4 <__assert_fail@plt+0x40c0>
   15484:	movw	r3, #25356	; 0x630c
   15488:	movt	r3, #1
   1548c:	movw	r1, #25368	; 0x6318
   15490:	movt	r1, #1
   15494:	movw	r0, #25384	; 0x6328
   15498:	movt	r0, #1
   1549c:	mov	r2, #85	; 0x55
   154a0:	bl	10f04 <__assert_fail@plt>
   154a4:	ldr	r3, [sp, #12]
   154a8:	mov	r1, #1
   154ac:	mul	r2, r9, r3
   154b0:	ldr	r3, [sp, #8]
   154b4:	mov	r9, r4
   154b8:	mla	r8, r3, r8, r2
   154bc:	add	r8, r8, r5
   154c0:	b	15040 <__assert_fail@plt+0x413c>
   154c4:	ldrd	r2, [sp, #8]
   154c8:	mov	r1, #1
   154cc:	mul	r3, r9, r3
   154d0:	mov	r9, r4
   154d4:	mla	r8, r2, r8, r3
   154d8:	add	r8, r8, r5
   154dc:	b	15130 <__assert_fail@plt+0x422c>
   154e0:	ldrd	r2, [sp, #8]
   154e4:	mov	r1, #1
   154e8:	mul	r3, r9, r3
   154ec:	mov	r9, r4
   154f0:	mla	r8, r2, r8, r3
   154f4:	add	r8, r8, r5
   154f8:	b	151a8 <__assert_fail@plt+0x42a4>
   154fc:	ldrd	r2, [sp, #8]
   15500:	mov	r1, #1
   15504:	mul	r3, r9, r3
   15508:	mov	r9, r4
   1550c:	mla	r8, r2, r8, r3
   15510:	add	r8, r8, r5
   15514:	b	150b8 <__assert_fail@plt+0x41b4>
   15518:	ldr	r3, [sp, #12]
   1551c:	mov	r6, r8
   15520:	mov	r1, #1
   15524:	mul	r2, r0, r3
   15528:	ldr	r3, [sp, #8]
   1552c:	mla	r2, ip, r3, r2
   15530:	add	r2, r2, r9
   15534:	b	152e4 <__assert_fail@plt+0x43e0>
   15538:	ldr	r3, [sp, #12]
   1553c:	mov	r1, #1
   15540:	ldr	r2, [sp, #16]
   15544:	mul	ip, r9, r3
   15548:	ldr	r3, [sp, #8]
   1554c:	mov	r0, r2
   15550:	mla	ip, r3, r8, ip
   15554:	ldr	r3, [sp, #20]
   15558:	add	ip, ip, r3
   1555c:	b	152c8 <__assert_fail@plt+0x43c4>
   15560:	ldr	r3, [sp, #12]
   15564:	mov	r6, r8
   15568:	mov	r0, #1
   1556c:	mul	r2, ip, r3
   15570:	ldr	r3, [sp, #8]
   15574:	mla	r2, r1, r3, r2
   15578:	add	r2, r2, r9
   1557c:	b	14f78 <__assert_fail@plt+0x4074>
   15580:	cmp	r1, #0
   15584:	cmpne	r0, #0
   15588:	beq	155d4 <__assert_fail@plt+0x46d0>
   1558c:	strd	r4, [sp, #-16]!
   15590:	umull	r4, r5, r0, r1
   15594:	str	r6, [sp, #8]
   15598:	str	lr, [sp, #12]
   1559c:	adds	r3, r5, #0
   155a0:	movne	r3, #1
   155a4:	cmp	r4, #0
   155a8:	blt	155b4 <__assert_fail@plt+0x46b0>
   155ac:	cmp	r3, #0
   155b0:	beq	155e0 <__assert_fail@plt+0x46dc>
   155b4:	bl	10e2c <__errno_location@plt>
   155b8:	mov	r3, #12
   155bc:	ldrd	r4, [sp]
   155c0:	ldr	r6, [sp, #8]
   155c4:	add	sp, sp, #12
   155c8:	str	r3, [r0]
   155cc:	mov	r0, #0
   155d0:	pop	{pc}		; (ldr pc, [sp], #4)
   155d4:	mov	r1, #1
   155d8:	mov	r0, r1
   155dc:	b	10ca0 <calloc@plt>
   155e0:	ldrd	r4, [sp]
   155e4:	ldr	r6, [sp, #8]
   155e8:	ldr	lr, [sp, #12]
   155ec:	add	sp, sp, #16
   155f0:	b	10ca0 <calloc@plt>
   155f4:	cmp	r0, #0
   155f8:	beq	15604 <__assert_fail@plt+0x4700>
   155fc:	blt	1560c <__assert_fail@plt+0x4708>
   15600:	b	10dc0 <malloc@plt>
   15604:	mov	r0, #1
   15608:	b	10dc0 <malloc@plt>
   1560c:	str	r4, [sp, #-8]!
   15610:	str	lr, [sp, #4]
   15614:	bl	10e2c <__errno_location@plt>
   15618:	mov	r3, #12
   1561c:	ldr	r4, [sp]
   15620:	add	sp, sp, #4
   15624:	str	r3, [r0]
   15628:	mov	r0, #0
   1562c:	pop	{pc}		; (ldr pc, [sp], #4)
   15630:	cmp	r0, #0
   15634:	beq	1565c <__assert_fail@plt+0x4758>
   15638:	cmp	r1, #0
   1563c:	str	r4, [sp, #-8]!
   15640:	str	lr, [sp, #4]
   15644:	beq	15664 <__assert_fail@plt+0x4760>
   15648:	blt	15678 <__assert_fail@plt+0x4774>
   1564c:	ldr	r4, [sp]
   15650:	ldr	lr, [sp, #4]
   15654:	add	sp, sp, #8
   15658:	b	10d54 <realloc@plt>
   1565c:	mov	r0, r1
   15660:	b	155f4 <__assert_fail@plt+0x46f0>
   15664:	bl	15710 <__assert_fail@plt+0x480c>
   15668:	ldr	r4, [sp]
   1566c:	add	sp, sp, #4
   15670:	mov	r0, #0
   15674:	pop	{pc}		; (ldr pc, [sp], #4)
   15678:	bl	10e2c <__errno_location@plt>
   1567c:	mov	r3, #12
   15680:	str	r3, [r0]
   15684:	b	15668 <__assert_fail@plt+0x4764>
   15688:	strd	r4, [sp, #-16]!
   1568c:	mov	r4, r0
   15690:	str	r6, [sp, #8]
   15694:	str	lr, [sp, #12]
   15698:	bl	10d9c <__fpending@plt>
   1569c:	ldr	r5, [r4]
   156a0:	mov	r6, r0
   156a4:	mov	r0, r4
   156a8:	bl	11b50 <__assert_fail@plt+0xc4c>
   156ac:	mov	r4, r0
   156b0:	and	r5, r5, #32
   156b4:	cmp	r5, #0
   156b8:	bne	156f0 <__assert_fail@plt+0x47ec>
   156bc:	cmp	r0, #0
   156c0:	beq	156dc <__assert_fail@plt+0x47d8>
   156c4:	cmp	r6, #0
   156c8:	bne	15708 <__assert_fail@plt+0x4804>
   156cc:	bl	10e2c <__errno_location@plt>
   156d0:	ldr	r4, [r0]
   156d4:	subs	r4, r4, #9
   156d8:	mvnne	r4, #0
   156dc:	mov	r0, r4
   156e0:	ldrd	r4, [sp]
   156e4:	ldr	r6, [sp, #8]
   156e8:	add	sp, sp, #12
   156ec:	pop	{pc}		; (ldr pc, [sp], #4)
   156f0:	cmp	r0, #0
   156f4:	bne	15708 <__assert_fail@plt+0x4804>
   156f8:	bl	10e2c <__errno_location@plt>
   156fc:	str	r4, [r0]
   15700:	mvn	r4, #0
   15704:	b	156dc <__assert_fail@plt+0x47d8>
   15708:	mvn	r4, #0
   1570c:	b	156dc <__assert_fail@plt+0x47d8>
   15710:	strd	r4, [sp, #-12]!
   15714:	mov	r5, r0
   15718:	str	lr, [sp, #8]
   1571c:	sub	sp, sp, #12
   15720:	bl	10e2c <__errno_location@plt>
   15724:	mov	r4, r0
   15728:	mov	r2, #0
   1572c:	ldr	r3, [r4]
   15730:	mov	r0, r5
   15734:	str	r2, [r4]
   15738:	str	r3, [sp]
   1573c:	str	r3, [sp, #4]
   15740:	bl	10ce8 <free@plt>
   15744:	ldr	r3, [r4]
   15748:	add	r2, sp, #8
   1574c:	clz	r3, r3
   15750:	lsr	r3, r3, #5
   15754:	add	r3, r2, r3, lsl #2
   15758:	ldr	r3, [r3, #-8]
   1575c:	str	r3, [r4]
   15760:	add	sp, sp, #12
   15764:	ldrd	r4, [sp]
   15768:	add	sp, sp, #8
   1576c:	pop	{pc}		; (ldr pc, [sp], #4)
   15770:	mov	r0, #14
   15774:	str	r4, [sp, #-8]!
   15778:	str	lr, [sp, #4]
   1577c:	bl	10ebc <nl_langinfo@plt>
   15780:	cmp	r0, #0
   15784:	beq	157a8 <__assert_fail@plt+0x48a4>
   15788:	ldrb	r2, [r0]
   1578c:	movw	r3, #25424	; 0x6350
   15790:	movt	r3, #1
   15794:	ldr	r4, [sp]
   15798:	add	sp, sp, #4
   1579c:	cmp	r2, #0
   157a0:	moveq	r0, r3
   157a4:	pop	{pc}		; (ldr pc, [sp], #4)
   157a8:	ldr	r4, [sp]
   157ac:	add	sp, sp, #4
   157b0:	movw	r0, #25424	; 0x6350
   157b4:	movt	r0, #1
   157b8:	pop	{pc}		; (ldr pc, [sp], #4)
   157bc:	strd	r4, [sp, #-20]!	; 0xffffffec
   157c0:	mov	r5, r2
   157c4:	strd	r6, [sp, #8]
   157c8:	subs	r6, r0, #0
   157cc:	mov	r7, r1
   157d0:	str	lr, [sp, #16]
   157d4:	sub	sp, sp, #12
   157d8:	addeq	r6, sp, #4
   157dc:	mov	r0, r6
   157e0:	bl	10da8 <mbrtowc@plt>
   157e4:	cmp	r5, #0
   157e8:	cmnne	r0, #3
   157ec:	mov	r4, r0
   157f0:	bhi	1580c <__assert_fail@plt+0x4908>
   157f4:	mov	r0, r4
   157f8:	add	sp, sp, #12
   157fc:	ldrd	r4, [sp]
   15800:	ldrd	r6, [sp, #8]
   15804:	add	sp, sp, #16
   15808:	pop	{pc}		; (ldr pc, [sp], #4)
   1580c:	mov	r0, #0
   15810:	bl	15864 <__assert_fail@plt+0x4960>
   15814:	cmp	r0, #0
   15818:	bne	157f4 <__assert_fail@plt+0x48f0>
   1581c:	ldrb	r3, [r7]
   15820:	mov	r4, #1
   15824:	str	r3, [r6]
   15828:	b	157f4 <__assert_fail@plt+0x48f0>
   1582c:	umull	r2, r3, r1, r2
   15830:	cmp	r3, #0
   15834:	bne	15840 <__assert_fail@plt+0x493c>
   15838:	mov	r1, r2
   1583c:	b	15630 <__assert_fail@plt+0x472c>
   15840:	str	r4, [sp, #-8]!
   15844:	str	lr, [sp, #4]
   15848:	bl	10e2c <__errno_location@plt>
   1584c:	mov	r3, #12
   15850:	ldr	r4, [sp]
   15854:	add	sp, sp, #4
   15858:	str	r3, [r0]
   1585c:	mov	r0, #0
   15860:	pop	{pc}		; (ldr pc, [sp], #4)
   15864:	push	{lr}		; (str lr, [sp, #-4]!)
   15868:	sub	sp, sp, #268	; 0x10c
   1586c:	movw	r2, #257	; 0x101
   15870:	add	r1, sp, #4
   15874:	bl	158bc <__assert_fail@plt+0x49b8>
   15878:	cmp	r0, #0
   1587c:	movne	r0, #0
   15880:	bne	158b4 <__assert_fail@plt+0x49b0>
   15884:	movw	r1, #25432	; 0x6358
   15888:	movt	r1, #1
   1588c:	add	r0, sp, #4
   15890:	bl	10cb8 <strcmp@plt>
   15894:	cmp	r0, #0
   15898:	beq	158b4 <__assert_fail@plt+0x49b0>
   1589c:	add	r0, sp, #4
   158a0:	movw	r1, #25436	; 0x635c
   158a4:	movt	r1, #1
   158a8:	bl	10cb8 <strcmp@plt>
   158ac:	adds	r0, r0, #0
   158b0:	movne	r0, #1
   158b4:	add	sp, sp, #268	; 0x10c
   158b8:	pop	{pc}		; (ldr pc, [sp], #4)
   158bc:	strd	r4, [sp, #-16]!
   158c0:	mov	r5, r1
   158c4:	mov	r1, #0
   158c8:	mov	r4, r2
   158cc:	str	r6, [sp, #8]
   158d0:	str	lr, [sp, #12]
   158d4:	bl	10ea4 <setlocale@plt>
   158d8:	subs	r6, r0, #0
   158dc:	beq	1595c <__assert_fail@plt+0x4a58>
   158e0:	bl	10e14 <strlen@plt>
   158e4:	cmp	r4, r0
   158e8:	bhi	15908 <__assert_fail@plt+0x4a04>
   158ec:	cmp	r4, #0
   158f0:	moveq	r0, #34	; 0x22
   158f4:	bne	1592c <__assert_fail@plt+0x4a28>
   158f8:	ldrd	r4, [sp]
   158fc:	ldr	r6, [sp, #8]
   15900:	add	sp, sp, #12
   15904:	pop	{pc}		; (ldr pc, [sp], #4)
   15908:	add	r2, r0, #1
   1590c:	mov	r1, r6
   15910:	mov	r0, r5
   15914:	bl	10d00 <memcpy@plt>
   15918:	ldrd	r4, [sp]
   1591c:	mov	r0, #0
   15920:	ldr	r6, [sp, #8]
   15924:	add	sp, sp, #12
   15928:	pop	{pc}		; (ldr pc, [sp], #4)
   1592c:	sub	r4, r4, #1
   15930:	mov	r1, r6
   15934:	mov	r2, r4
   15938:	mov	r0, r5
   1593c:	bl	10d00 <memcpy@plt>
   15940:	mov	r3, #0
   15944:	mov	r0, #34	; 0x22
   15948:	strb	r3, [r5, r4]
   1594c:	ldrd	r4, [sp]
   15950:	ldr	r6, [sp, #8]
   15954:	add	sp, sp, #12
   15958:	pop	{pc}		; (ldr pc, [sp], #4)
   1595c:	cmp	r4, #0
   15960:	mov	r0, #22
   15964:	strbne	r6, [r5]
   15968:	ldrd	r4, [sp]
   1596c:	ldr	r6, [sp, #8]
   15970:	add	sp, sp, #12
   15974:	pop	{pc}		; (ldr pc, [sp], #4)
   15978:	mov	r1, #0
   1597c:	b	10ea4 <setlocale@plt>
   15980:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15984:	mov	r7, r0
   15988:	ldr	r6, [pc, #72]	; 159d8 <__assert_fail@plt+0x4ad4>
   1598c:	ldr	r5, [pc, #72]	; 159dc <__assert_fail@plt+0x4ad8>
   15990:	add	r6, pc, r6
   15994:	add	r5, pc, r5
   15998:	sub	r6, r6, r5
   1599c:	mov	r8, r1
   159a0:	mov	r9, r2
   159a4:	bl	10c80 <calloc@plt-0x20>
   159a8:	asrs	r6, r6, #2
   159ac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   159b0:	mov	r4, #0
   159b4:	add	r4, r4, #1
   159b8:	ldr	r3, [r5], #4
   159bc:	mov	r2, r9
   159c0:	mov	r1, r8
   159c4:	mov	r0, r7
   159c8:	blx	r3
   159cc:	cmp	r6, r4
   159d0:	bne	159b4 <__assert_fail@plt+0x4ab0>
   159d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   159d8:	andeq	r1, r1, ip, ror r5
   159dc:	andeq	r1, r1, r4, ror r5
   159e0:	bx	lr
   159e4:	ldr	r3, [pc, #12]	; 159f8 <__assert_fail@plt+0x4af4>
   159e8:	mov	r1, #0
   159ec:	add	r3, pc, r3
   159f0:	ldr	r2, [r3]
   159f4:	b	10e38 <__cxa_atexit@plt>
   159f8:	strdeq	r1, [r1], -r0

Disassembly of section .fini:

000159fc <.fini>:
   159fc:	push	{r3, lr}
   15a00:	pop	{r3, pc}
