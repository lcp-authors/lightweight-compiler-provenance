
../repos/coreutils/src/split:     file format elf32-littlearm


Disassembly of section .init:

00011358 <.init>:
   11358:	push	{r3, lr}
   1135c:	bl	1175c <__assert_fail@plt+0x48>
   11360:	pop	{r3, pc}

Disassembly of section .plt:

00011364 <fdopen@plt-0x14>:
   11364:	push	{lr}		; (str lr, [sp, #-4]!)
   11368:	ldr	lr, [pc, #4]	; 11374 <fdopen@plt-0x4>
   1136c:	add	lr, pc, lr
   11370:	ldr	pc, [lr, #8]!
   11374:	andeq	r9, r1, ip, lsl #25

00011378 <fdopen@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #102400	; 0x19000
   11380:	ldr	pc, [ip, #3212]!	; 0xc8c

00011384 <calloc@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #102400	; 0x19000
   1138c:	ldr	pc, [ip, #3204]!	; 0xc84

00011390 <fputs_unlocked@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #102400	; 0x19000
   11398:	ldr	pc, [ip, #3196]!	; 0xc7c

0001139c <raise@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #102400	; 0x19000
   113a4:	ldr	pc, [ip, #3188]!	; 0xc74

000113a8 <strcmp@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #102400	; 0x19000
   113b0:	ldr	pc, [ip, #3180]!	; 0xc6c

000113b4 <strtol@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #102400	; 0x19000
   113bc:	ldr	pc, [ip, #3172]!	; 0xc64

000113c0 <read@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #102400	; 0x19000
   113c8:	ldr	pc, [ip, #3164]!	; 0xc5c

000113cc <fflush@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #102400	; 0x19000
   113d4:	ldr	pc, [ip, #3156]!	; 0xc54

000113d8 <sigprocmask@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #102400	; 0x19000
   113e0:	ldr	pc, [ip, #3148]!	; 0xc4c

000113e4 <memmove@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #102400	; 0x19000
   113ec:	ldr	pc, [ip, #3140]!	; 0xc44

000113f0 <free@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #102400	; 0x19000
   113f8:	ldr	pc, [ip, #3132]!	; 0xc3c

000113fc <_exit@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #102400	; 0x19000
   11404:	ldr	pc, [ip, #3124]!	; 0xc34

00011408 <memcpy@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #102400	; 0x19000
   11410:	ldr	pc, [ip, #3116]!	; 0xc2c

00011414 <__strtoull_internal@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #102400	; 0x19000
   1141c:	ldr	pc, [ip, #3108]!	; 0xc24

00011420 <mbsinit@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #102400	; 0x19000
   11428:	ldr	pc, [ip, #3100]!	; 0xc1c

0001142c <ftruncate64@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #102400	; 0x19000
   11434:	ldr	pc, [ip, #3092]!	; 0xc14

00011438 <fwrite_unlocked@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #102400	; 0x19000
   11440:	ldr	pc, [ip, #3084]!	; 0xc0c

00011444 <dcgettext@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #102400	; 0x19000
   1144c:	ldr	pc, [ip, #3076]!	; 0xc04

00011450 <dup2@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #102400	; 0x19000
   11458:	ldr	pc, [ip, #3068]!	; 0xbfc

0001145c <realloc@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #102400	; 0x19000
   11464:	ldr	pc, [ip, #3060]!	; 0xbf4

00011468 <textdomain@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #102400	; 0x19000
   11470:	ldr	pc, [ip, #3052]!	; 0xbec

00011474 <rawmemchr@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #102400	; 0x19000
   1147c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011480 <iswprint@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #102400	; 0x19000
   11488:	ldr	pc, [ip, #3036]!	; 0xbdc

0001148c <__fxstat64@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #102400	; 0x19000
   11494:	ldr	pc, [ip, #3028]!	; 0xbd4

00011498 <sigaction@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #102400	; 0x19000
   114a0:	ldr	pc, [ip, #3020]!	; 0xbcc

000114a4 <fwrite@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #102400	; 0x19000
   114ac:	ldr	pc, [ip, #3012]!	; 0xbc4

000114b0 <lseek64@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #102400	; 0x19000
   114b8:	ldr	pc, [ip, #3004]!	; 0xbbc

000114bc <waitpid@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #102400	; 0x19000
   114c4:	ldr	pc, [ip, #2996]!	; 0xbb4

000114c8 <__ctype_get_mb_cur_max@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #102400	; 0x19000
   114d0:	ldr	pc, [ip, #2988]!	; 0xbac

000114d4 <strcpy@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #102400	; 0x19000
   114dc:	ldr	pc, [ip, #2980]!	; 0xba4

000114e0 <__fpending@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #102400	; 0x19000
   114e8:	ldr	pc, [ip, #2972]!	; 0xb9c

000114ec <mbrtowc@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #102400	; 0x19000
   114f4:	ldr	pc, [ip, #2964]!	; 0xb94

000114f8 <error@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #102400	; 0x19000
   11500:	ldr	pc, [ip, #2956]!	; 0xb8c

00011504 <open64@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #102400	; 0x19000
   1150c:	ldr	pc, [ip, #2948]!	; 0xb84

00011510 <getenv@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #102400	; 0x19000
   11518:	ldr	pc, [ip, #2940]!	; 0xb7c

0001151c <malloc@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #102400	; 0x19000
   11524:	ldr	pc, [ip, #2932]!	; 0xb74

00011528 <sigaddset@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #102400	; 0x19000
   11530:	ldr	pc, [ip, #2924]!	; 0xb6c

00011534 <__libc_start_main@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #102400	; 0x19000
   1153c:	ldr	pc, [ip, #2916]!	; 0xb64

00011540 <__freading@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #102400	; 0x19000
   11548:	ldr	pc, [ip, #2908]!	; 0xb5c

0001154c <__gmon_start__@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #102400	; 0x19000
   11554:	ldr	pc, [ip, #2900]!	; 0xb54

00011558 <getopt_long@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #102400	; 0x19000
   11560:	ldr	pc, [ip, #2892]!	; 0xb4c

00011564 <__ctype_b_loc@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #102400	; 0x19000
   1156c:	ldr	pc, [ip, #2884]!	; 0xb44

00011570 <exit@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #102400	; 0x19000
   11578:	ldr	pc, [ip, #2876]!	; 0xb3c

0001157c <bcmp@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #102400	; 0x19000
   11584:	ldr	pc, [ip, #2868]!	; 0xb34

00011588 <strlen@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #102400	; 0x19000
   11590:	ldr	pc, [ip, #2860]!	; 0xb2c

00011594 <__libc_current_sigrtmax@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #102400	; 0x19000
   1159c:	ldr	pc, [ip, #2852]!	; 0xb24

000115a0 <strchr@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #102400	; 0x19000
   115a8:	ldr	pc, [ip, #2844]!	; 0xb1c

000115ac <setenv@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #102400	; 0x19000
   115b4:	ldr	pc, [ip, #2836]!	; 0xb14

000115b8 <memrchr@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #102400	; 0x19000
   115c0:	ldr	pc, [ip, #2828]!	; 0xb0c

000115c4 <getpagesize@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #102400	; 0x19000
   115cc:	ldr	pc, [ip, #2820]!	; 0xb04

000115d0 <__errno_location@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #102400	; 0x19000
   115d8:	ldr	pc, [ip, #2812]!	; 0xafc

000115dc <__sprintf_chk@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #102400	; 0x19000
   115e4:	ldr	pc, [ip, #2804]!	; 0xaf4

000115e8 <__cxa_atexit@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #102400	; 0x19000
   115f0:	ldr	pc, [ip, #2796]!	; 0xaec

000115f4 <memset@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #102400	; 0x19000
   115fc:	ldr	pc, [ip, #2788]!	; 0xae4

00011600 <__printf_chk@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #102400	; 0x19000
   11608:	ldr	pc, [ip, #2780]!	; 0xadc

0001160c <write@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #102400	; 0x19000
   11614:	ldr	pc, [ip, #2772]!	; 0xad4

00011618 <fileno@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #102400	; 0x19000
   11620:	ldr	pc, [ip, #2764]!	; 0xacc

00011624 <__fprintf_chk@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #102400	; 0x19000
   1162c:	ldr	pc, [ip, #2756]!	; 0xac4

00011630 <memchr@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #102400	; 0x19000
   11638:	ldr	pc, [ip, #2748]!	; 0xabc

0001163c <fclose@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #102400	; 0x19000
   11644:	ldr	pc, [ip, #2740]!	; 0xab4

00011648 <pipe@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #102400	; 0x19000
   11650:	ldr	pc, [ip, #2732]!	; 0xaac

00011654 <fseeko64@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #102400	; 0x19000
   1165c:	ldr	pc, [ip, #2724]!	; 0xaa4

00011660 <fcntl64@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #102400	; 0x19000
   11668:	ldr	pc, [ip, #2716]!	; 0xa9c

0001166c <setlocale@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #102400	; 0x19000
   11674:	ldr	pc, [ip, #2708]!	; 0xa94

00011678 <sigemptyset@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #102400	; 0x19000
   11680:	ldr	pc, [ip, #2700]!	; 0xa8c

00011684 <fork@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #102400	; 0x19000
   1168c:	ldr	pc, [ip, #2692]!	; 0xa84

00011690 <execl@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #102400	; 0x19000
   11698:	ldr	pc, [ip, #2684]!	; 0xa7c

0001169c <strrchr@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #102400	; 0x19000
   116a4:	ldr	pc, [ip, #2676]!	; 0xa74

000116a8 <nl_langinfo@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #102400	; 0x19000
   116b0:	ldr	pc, [ip, #2668]!	; 0xa6c

000116b4 <clearerr_unlocked@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #102400	; 0x19000
   116bc:	ldr	pc, [ip, #2660]!	; 0xa64

000116c0 <bindtextdomain@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #102400	; 0x19000
   116c8:	ldr	pc, [ip, #2652]!	; 0xa5c

000116cc <aligned_alloc@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #102400	; 0x19000
   116d4:	ldr	pc, [ip, #2644]!	; 0xa54

000116d8 <__libc_current_sigrtmin@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #102400	; 0x19000
   116e0:	ldr	pc, [ip, #2636]!	; 0xa4c

000116e4 <strncmp@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #102400	; 0x19000
   116ec:	ldr	pc, [ip, #2628]!	; 0xa44

000116f0 <abort@plt>:
   116f0:	add	ip, pc, #0, 12
   116f4:	add	ip, ip, #102400	; 0x19000
   116f8:	ldr	pc, [ip, #2620]!	; 0xa3c

000116fc <close@plt>:
   116fc:	add	ip, pc, #0, 12
   11700:	add	ip, ip, #102400	; 0x19000
   11704:	ldr	pc, [ip, #2612]!	; 0xa34

00011708 <strspn@plt>:
   11708:	add	ip, pc, #0, 12
   1170c:	add	ip, ip, #102400	; 0x19000
   11710:	ldr	pc, [ip, #2604]!	; 0xa2c

00011714 <__assert_fail@plt>:
   11714:	add	ip, pc, #0, 12
   11718:	add	ip, ip, #102400	; 0x19000
   1171c:	ldr	pc, [ip, #2596]!	; 0xa24

Disassembly of section .text:

00011720 <.text>:
   11720:	mov	fp, #0
   11724:	mov	lr, #0
   11728:	pop	{r1}		; (ldr r1, [sp], #4)
   1172c:	mov	r2, sp
   11730:	push	{r2}		; (str r2, [sp, #-4]!)
   11734:	push	{r0}		; (str r0, [sp, #-4]!)
   11738:	ldr	ip, [pc, #16]	; 11750 <__assert_fail@plt+0x3c>
   1173c:	push	{ip}		; (str ip, [sp, #-4]!)
   11740:	ldr	r0, [pc, #12]	; 11754 <__assert_fail@plt+0x40>
   11744:	ldr	r3, [pc, #12]	; 11758 <__assert_fail@plt+0x44>
   11748:	bl	11534 <__libc_start_main@plt>
   1174c:	bl	116f0 <abort@plt>
   11750:	andeq	r9, r1, ip, lsl #13
   11754:	andeq	r1, r1, ip, lsl #22
   11758:	andeq	r9, r1, ip, lsr #12
   1175c:	ldr	r3, [pc, #20]	; 11778 <__assert_fail@plt+0x64>
   11760:	ldr	r2, [pc, #20]	; 1177c <__assert_fail@plt+0x68>
   11764:	add	r3, pc, r3
   11768:	ldr	r2, [r3, r2]
   1176c:	cmp	r2, #0
   11770:	bxeq	lr
   11774:	b	1154c <__gmon_start__@plt>
   11778:	muleq	r1, r4, r8
   1177c:	andeq	r0, r0, r4, asr #2
   11780:	ldr	r0, [pc, #24]	; 117a0 <__assert_fail@plt+0x8c>
   11784:	ldr	r3, [pc, #24]	; 117a4 <__assert_fail@plt+0x90>
   11788:	cmp	r3, r0
   1178c:	bxeq	lr
   11790:	ldr	r3, [pc, #16]	; 117a8 <__assert_fail@plt+0x94>
   11794:	cmp	r3, #0
   11798:	bxeq	lr
   1179c:	bx	r3
   117a0:	andeq	fp, r2, ip, asr #6
   117a4:	andeq	fp, r2, ip, asr #6
   117a8:	andeq	r0, r0, r0
   117ac:	ldr	r0, [pc, #36]	; 117d8 <__assert_fail@plt+0xc4>
   117b0:	ldr	r1, [pc, #36]	; 117dc <__assert_fail@plt+0xc8>
   117b4:	sub	r1, r1, r0
   117b8:	asr	r1, r1, #2
   117bc:	add	r1, r1, r1, lsr #31
   117c0:	asrs	r1, r1, #1
   117c4:	bxeq	lr
   117c8:	ldr	r3, [pc, #16]	; 117e0 <__assert_fail@plt+0xcc>
   117cc:	cmp	r3, #0
   117d0:	bxeq	lr
   117d4:	bx	r3
   117d8:	andeq	fp, r2, ip, asr #6
   117dc:	andeq	fp, r2, ip, asr #6
   117e0:	andeq	r0, r0, r0
   117e4:	push	{r4, lr}
   117e8:	ldr	r4, [pc, #24]	; 11808 <__assert_fail@plt+0xf4>
   117ec:	ldrb	r3, [r4]
   117f0:	cmp	r3, #0
   117f4:	popne	{r4, pc}
   117f8:	bl	11780 <__assert_fail@plt+0x6c>
   117fc:	mov	r3, #1
   11800:	strb	r3, [r4]
   11804:	pop	{r4, pc}
   11808:	andeq	fp, r2, ip, ror #6
   1180c:	b	117ac <__assert_fail@plt+0x98>
   11810:	push	{fp, lr}
   11814:	mov	fp, sp
   11818:	sub	sp, sp, #56	; 0x38
   1181c:	mov	r4, r0
   11820:	cmp	r0, #0
   11824:	bne	11ac8 <__assert_fail@plt+0x3b4>
   11828:	movw	r1, #38619	; 0x96db
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11444 <dcgettext@plt>
   1183c:	mov	r1, r0
   11840:	movw	r0, #46388	; 0xb534
   11844:	movt	r0, #2
   11848:	ldr	r2, [r0]
   1184c:	mov	r0, #1
   11850:	bl	11600 <__printf_chk@plt>
   11854:	movw	r1, #38658	; 0x9702
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #1
   11864:	bl	11444 <dcgettext@plt>
   11868:	movw	r7, #45924	; 0xb364
   1186c:	movt	r7, #2
   11870:	ldr	r1, [r7]
   11874:	bl	11390 <fputs_unlocked@plt>
   11878:	movw	r1, #41175	; 0xa0d7
   1187c:	mov	r0, #0
   11880:	mov	r2, #5
   11884:	movt	r1, #1
   11888:	bl	11444 <dcgettext@plt>
   1188c:	ldr	r1, [r7]
   11890:	bl	11390 <fputs_unlocked@plt>
   11894:	movw	r1, #41231	; 0xa10f
   11898:	mov	r0, #0
   1189c:	mov	r2, #5
   118a0:	movt	r1, #1
   118a4:	bl	11444 <dcgettext@plt>
   118a8:	ldr	r1, [r7]
   118ac:	bl	11390 <fputs_unlocked@plt>
   118b0:	movw	r1, #38764	; 0x976c
   118b4:	ldr	r5, [r7]
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #1
   118c4:	bl	11444 <dcgettext@plt>
   118c8:	mov	r2, r0
   118cc:	mov	r0, r5
   118d0:	mov	r1, #1
   118d4:	mov	r3, #2
   118d8:	bl	11624 <__fprintf_chk@plt>
   118dc:	movw	r1, #39854	; 0x9bae
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11444 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	11390 <fputs_unlocked@plt>
   118f8:	movw	r1, #39967	; 0x9c1f
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11444 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	11390 <fputs_unlocked@plt>
   11914:	movw	r1, #40012	; 0x9c4c
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11444 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	11390 <fputs_unlocked@plt>
   11930:	movw	r1, #41306	; 0xa15a
   11934:	mov	r0, #0
   11938:	mov	r2, #5
   1193c:	movt	r1, #1
   11940:	bl	11444 <dcgettext@plt>
   11944:	ldr	r1, [r7]
   11948:	bl	11390 <fputs_unlocked@plt>
   1194c:	movw	r1, #40066	; 0x9c82
   11950:	mov	r0, #0
   11954:	mov	r2, #5
   11958:	movt	r1, #1
   1195c:	bl	11444 <dcgettext@plt>
   11960:	ldr	r1, [r7]
   11964:	bl	11390 <fputs_unlocked@plt>
   11968:	movw	r0, #43136	; 0xa880
   1196c:	mov	r2, #48	; 0x30
   11970:	mov	r6, sp
   11974:	movw	r5, #40406	; 0x9dd6
   11978:	movt	r0, #1
   1197c:	movt	r5, #1
   11980:	add	r1, r0, #32
   11984:	add	r3, r0, #16
   11988:	vld1.64	{d18-d19}, [r0], r2
   1198c:	vld1.64	{d16-d17}, [r1]
   11990:	vld1.64	{d20-d21}, [r3]
   11994:	vldr	d22, [r0]
   11998:	add	r1, r6, #32
   1199c:	add	r0, r6, #16
   119a0:	vst1.64	{d16-d17}, [r1]
   119a4:	movw	r1, #41518	; 0xa22e
   119a8:	vst1.64	{d20-d21}, [r0]
   119ac:	mov	r0, r6
   119b0:	movt	r1, #1
   119b4:	vst1.64	{d18-d19}, [r0], r2
   119b8:	vstr	d22, [r0]
   119bc:	mov	r0, r5
   119c0:	bl	113a8 <strcmp@plt>
   119c4:	cmp	r0, #0
   119c8:	ldrne	r1, [r6, #8]!
   119cc:	cmpne	r1, #0
   119d0:	bne	119bc <__assert_fail@plt+0x2a8>
   119d4:	movw	r1, #41613	; 0xa28d
   119d8:	ldr	r6, [r6, #4]
   119dc:	mov	r0, #0
   119e0:	mov	r2, #5
   119e4:	movt	r1, #1
   119e8:	bl	11444 <dcgettext@plt>
   119ec:	movw	r2, #40923	; 0x9fdb
   119f0:	movw	r3, #41636	; 0xa2a4
   119f4:	mov	r1, r0
   119f8:	mov	r0, #1
   119fc:	movt	r2, #1
   11a00:	movt	r3, #1
   11a04:	bl	11600 <__printf_chk@plt>
   11a08:	cmp	r6, #0
   11a0c:	mov	r0, #5
   11a10:	mov	r1, #0
   11a14:	moveq	r6, r5
   11a18:	bl	1166c <setlocale@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11a58 <__assert_fail@plt+0x344>
   11a24:	movw	r1, #41676	; 0xa2cc
   11a28:	mov	r2, #3
   11a2c:	movt	r1, #1
   11a30:	bl	116e4 <strncmp@plt>
   11a34:	cmp	r0, #0
   11a38:	beq	11a58 <__assert_fail@plt+0x344>
   11a3c:	movw	r1, #41680	; 0xa2d0
   11a40:	mov	r0, #0
   11a44:	mov	r2, #5
   11a48:	movt	r1, #1
   11a4c:	bl	11444 <dcgettext@plt>
   11a50:	ldr	r1, [r7]
   11a54:	bl	11390 <fputs_unlocked@plt>
   11a58:	movw	r1, #41751	; 0xa317
   11a5c:	mov	r0, #0
   11a60:	mov	r2, #5
   11a64:	movt	r1, #1
   11a68:	bl	11444 <dcgettext@plt>
   11a6c:	movw	r2, #41636	; 0xa2a4
   11a70:	mov	r1, r0
   11a74:	mov	r0, #1
   11a78:	mov	r3, r5
   11a7c:	movt	r2, #1
   11a80:	bl	11600 <__printf_chk@plt>
   11a84:	movw	r1, #41778	; 0xa332
   11a88:	mov	r0, #0
   11a8c:	mov	r2, #5
   11a90:	movt	r1, #1
   11a94:	bl	11444 <dcgettext@plt>
   11a98:	mov	r1, r0
   11a9c:	movw	r0, #41546	; 0xa24a
   11aa0:	movw	r3, #39853	; 0x9bad
   11aa4:	cmp	r6, r5
   11aa8:	mov	r2, r6
   11aac:	movt	r0, #1
   11ab0:	movt	r3, #1
   11ab4:	moveq	r3, r0
   11ab8:	mov	r0, #1
   11abc:	bl	11600 <__printf_chk@plt>
   11ac0:	mov	r0, r4
   11ac4:	bl	11570 <exit@plt>
   11ac8:	movw	r0, #45920	; 0xb360
   11acc:	movw	r1, #38580	; 0x96b4
   11ad0:	mov	r2, #5
   11ad4:	movt	r0, #2
   11ad8:	movt	r1, #1
   11adc:	ldr	r5, [r0]
   11ae0:	mov	r0, #0
   11ae4:	bl	11444 <dcgettext@plt>
   11ae8:	mov	r2, r0
   11aec:	movw	r0, #46388	; 0xb534
   11af0:	mov	r1, #1
   11af4:	movt	r0, #2
   11af8:	ldr	r3, [r0]
   11afc:	mov	r0, r5
   11b00:	bl	11624 <__fprintf_chk@plt>
   11b04:	mov	r0, r4
   11b08:	bl	11570 <exit@plt>
   11b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b10:	add	fp, sp, #28
   11b14:	sub	sp, sp, #252	; 0xfc
   11b18:	mov	r4, r1
   11b1c:	str	r0, [sp, #92]	; 0x5c
   11b20:	bl	115c4 <getpagesize@plt>
   11b24:	str	r0, [sp, #64]	; 0x40
   11b28:	ldr	r0, [r4]
   11b2c:	str	r4, [sp, #88]	; 0x58
   11b30:	bl	15480 <__assert_fail@plt+0x3d6c>
   11b34:	movw	r1, #39853	; 0x9bad
   11b38:	mov	r0, #6
   11b3c:	movt	r1, #1
   11b40:	bl	1166c <setlocale@plt>
   11b44:	movw	r4, #40927	; 0x9fdf
   11b48:	movw	r1, #40412	; 0x9ddc
   11b4c:	movt	r4, #1
   11b50:	movt	r1, #1
   11b54:	mov	r0, r4
   11b58:	bl	116c0 <bindtextdomain@plt>
   11b5c:	mov	r0, r4
   11b60:	bl	11468 <textdomain@plt>
   11b64:	movw	r0, #20568	; 0x5058
   11b68:	movt	r0, #1
   11b6c:	bl	19690 <__assert_fail@plt+0x7f7c>
   11b70:	movw	r1, #45936	; 0xb370
   11b74:	movw	r0, #43273	; 0xa909
   11b78:	mov	r9, #0
   11b7c:	mov	r7, #0
   11b80:	mov	sl, #0
   11b84:	movt	r1, #2
   11b88:	movt	r0, #1
   11b8c:	str	r0, [r1]
   11b90:	movw	r1, #45940	; 0xb374
   11b94:	movw	r0, #40852	; 0x9f94
   11b98:	movt	r1, #2
   11b9c:	movt	r0, #1
   11ba0:	str	r0, [r1]
   11ba4:	mov	r0, #0
   11ba8:	str	r0, [sp, #68]	; 0x44
   11bac:	mov	r0, #0
   11bb0:	str	r0, [sp, #72]	; 0x48
   11bb4:	mov	r0, #0
   11bb8:	str	r0, [sp, #80]	; 0x50
   11bbc:	mov	r0, #0
   11bc0:	str	r0, [sp, #84]	; 0x54
   11bc4:	b	11bd8 <__assert_fail@plt+0x4c4>
   11bc8:	sub	r0, r4, #48	; 0x30
   11bcc:	mov	sl, r6
   11bd0:	mov	r9, r0
   11bd4:	asr	r7, r0, #31
   11bd8:	movw	r0, #45912	; 0xb358
   11bdc:	ldr	r1, [sp, #88]	; 0x58
   11be0:	movw	r2, #40436	; 0x9df4
   11be4:	movw	r3, #42864	; 0xa770
   11be8:	movt	r0, #2
   11bec:	movt	r2, #1
   11bf0:	movt	r3, #1
   11bf4:	ldr	r6, [r0]
   11bf8:	mov	r0, #0
   11bfc:	str	r0, [sp]
   11c00:	ldr	r0, [sp, #92]	; 0x5c
   11c04:	bl	11558 <getopt_long@plt>
   11c08:	cmp	r6, #0
   11c0c:	mov	r4, r0
   11c10:	add	r0, r0, #3
   11c14:	movw	r1, #262	; 0x106
   11c18:	movweq	r6, #1
   11c1c:	cmp	r0, r1
   11c20:	bhi	13b48 <__assert_fail@plt+0x2434>
   11c24:	add	r1, pc, #0
   11c28:	ldr	pc, [r1, r0, lsl #2]
   11c2c:	andeq	r3, r1, r0, asr fp
   11c30:	andeq	r3, r1, r4, lsr #23
   11c34:	andeq	r2, r1, ip, lsr #12
   11c38:	andeq	r3, r1, r8, asr #22
   11c3c:	andeq	r3, r1, r8, asr #22
   11c40:	andeq	r3, r1, r8, asr #22
   11c44:	andeq	r3, r1, r8, asr #22
   11c48:	andeq	r3, r1, r8, asr #22
   11c4c:	andeq	r3, r1, r8, asr #22
   11c50:	andeq	r3, r1, r8, asr #22
   11c54:	andeq	r3, r1, r8, asr #22
   11c58:	andeq	r3, r1, r8, asr #22
   11c5c:	andeq	r3, r1, r8, asr #22
   11c60:	andeq	r3, r1, r8, asr #22
   11c64:	andeq	r3, r1, r8, asr #22
   11c68:	andeq	r3, r1, r8, asr #22
   11c6c:	andeq	r3, r1, r8, asr #22
   11c70:	andeq	r3, r1, r8, asr #22
   11c74:	andeq	r3, r1, r8, asr #22
   11c78:	andeq	r3, r1, r8, asr #22
   11c7c:	andeq	r3, r1, r8, asr #22
   11c80:	andeq	r3, r1, r8, asr #22
   11c84:	andeq	r3, r1, r8, asr #22
   11c88:	andeq	r3, r1, r8, asr #22
   11c8c:	andeq	r3, r1, r8, asr #22
   11c90:	andeq	r3, r1, r8, asr #22
   11c94:	andeq	r3, r1, r8, asr #22
   11c98:	andeq	r3, r1, r8, asr #22
   11c9c:	andeq	r3, r1, r8, asr #22
   11ca0:	andeq	r3, r1, r8, asr #22
   11ca4:	andeq	r3, r1, r8, asr #22
   11ca8:	andeq	r3, r1, r8, asr #22
   11cac:	andeq	r3, r1, r8, asr #22
   11cb0:	andeq	r3, r1, r8, asr #22
   11cb4:	andeq	r3, r1, r8, asr #22
   11cb8:	andeq	r3, r1, r8, asr #22
   11cbc:	andeq	r3, r1, r8, asr #22
   11cc0:	andeq	r3, r1, r8, asr #22
   11cc4:	andeq	r3, r1, r8, asr #22
   11cc8:	andeq	r3, r1, r8, asr #22
   11ccc:	andeq	r3, r1, r8, asr #22
   11cd0:	andeq	r3, r1, r8, asr #22
   11cd4:	andeq	r3, r1, r8, asr #22
   11cd8:	andeq	r3, r1, r8, asr #22
   11cdc:	andeq	r3, r1, r8, asr #22
   11ce0:	andeq	r3, r1, r8, asr #22
   11ce4:	andeq	r3, r1, r8, asr #22
   11ce8:	andeq	r3, r1, r8, asr #22
   11cec:	andeq	r3, r1, r8, asr #22
   11cf0:	andeq	r3, r1, r8, asr #22
   11cf4:	andeq	r3, r1, r8, asr #22
   11cf8:	andeq	r2, r1, r8, asr #32
   11cfc:	andeq	r2, r1, r8, asr #32
   11d00:	andeq	r2, r1, r8, asr #32
   11d04:	andeq	r2, r1, r8, asr #32
   11d08:	andeq	r2, r1, r8, asr #32
   11d0c:	andeq	r2, r1, r8, asr #32
   11d10:	andeq	r2, r1, r8, asr #32
   11d14:	andeq	r2, r1, r8, asr #32
   11d18:	andeq	r2, r1, r8, asr #32
   11d1c:	andeq	r2, r1, r8, asr #32
   11d20:	andeq	r3, r1, r8, asr #22
   11d24:	andeq	r3, r1, r8, asr #22
   11d28:	andeq	r3, r1, r8, asr #22
   11d2c:	andeq	r3, r1, r8, asr #22
   11d30:	andeq	r3, r1, r8, asr #22
   11d34:	andeq	r3, r1, r8, asr #22
   11d38:	andeq	r3, r1, r8, asr #22
   11d3c:	andeq	r3, r1, r8, asr #22
   11d40:	andeq	r3, r1, r8, asr #22
   11d44:	andeq	r2, r1, ip, asr #10
   11d48:	andeq	r3, r1, r8, asr #22
   11d4c:	andeq	r3, r1, r8, asr #22
   11d50:	andeq	r3, r1, r8, asr #22
   11d54:	andeq	r3, r1, r8, asr #22
   11d58:	andeq	r3, r1, r8, asr #22
   11d5c:	andeq	r3, r1, r8, asr #22
   11d60:	andeq	r3, r1, r8, asr #22
   11d64:	andeq	r3, r1, r8, asr #22
   11d68:	andeq	r3, r1, r8, asr #22
   11d6c:	andeq	r3, r1, r8, asr #22
   11d70:	andeq	r3, r1, r8, asr #22
   11d74:	andeq	r3, r1, r8, asr #22
   11d78:	andeq	r3, r1, r8, asr #22
   11d7c:	andeq	r3, r1, r8, asr #22
   11d80:	andeq	r3, r1, r8, asr #22
   11d84:	andeq	r3, r1, r8, asr #22
   11d88:	andeq	r3, r1, r8, asr #22
   11d8c:	andeq	r3, r1, r8, asr #22
   11d90:	andeq	r3, r1, r8, asr #22
   11d94:	andeq	r3, r1, r8, asr #22
   11d98:	andeq	r3, r1, r8, asr #22
   11d9c:	andeq	r3, r1, r8, asr #22
   11da0:	andeq	r3, r1, r8, asr #22
   11da4:	andeq	r3, r1, r8, asr #22
   11da8:	andeq	r3, r1, r8, asr #22
   11dac:	andeq	r3, r1, r8, asr #22
   11db0:	andeq	r3, r1, r8, asr #22
   11db4:	andeq	r3, r1, r8, asr #22
   11db8:	andeq	r3, r1, r8, asr #22
   11dbc:	andeq	r2, r1, r4, lsl #3
   11dc0:	andeq	r2, r1, r4, lsl r2
   11dc4:	andeq	r3, r1, r8, asr #22
   11dc8:	ldrdeq	r2, [r1], -r8
   11dcc:	andeq	r2, r1, r8, ror r1
   11dd0:	andeq	r3, r1, r8, asr #22
   11dd4:	andeq	r3, r1, r8, asr #22
   11dd8:	andeq	r3, r1, r8, asr #22
   11ddc:	andeq	r3, r1, r8, asr #22
   11de0:	andeq	r3, r1, r8, asr #22
   11de4:	andeq	r3, r1, r8, asr #22
   11de8:			; <UNDEFINED> instruction: 0x000125bc
   11dec:	andeq	r3, r1, r8, asr #22
   11df0:	muleq	r1, r8, r2
   11df4:	andeq	r3, r1, r8, asr #22
   11df8:	andeq	r3, r1, r8, asr #22
   11dfc:	andeq	r3, r1, r8, asr #22
   11e00:	andeq	r3, r1, r8, asr #22
   11e04:	andeq	r3, r1, r8, asr #22
   11e08:	andeq	r2, r1, r0, asr r3
   11e0c:	andeq	r2, r1, r0, ror r2
   11e10:	andeq	r3, r1, r8, asr #22
   11e14:	andeq	r3, r1, r8, asr #22
   11e18:	ldrdeq	r2, [r1], -r8
   11e1c:	andeq	r3, r1, r8, asr #22
   11e20:	andeq	r3, r1, r8, asr #22
   11e24:	andeq	r3, r1, r8, asr #22
   11e28:	andeq	r3, r1, r8, asr #22
   11e2c:	andeq	r3, r1, r8, asr #22
   11e30:	andeq	r3, r1, r8, asr #22
   11e34:	andeq	r3, r1, r8, asr #22
   11e38:	andeq	r3, r1, r8, asr #22
   11e3c:	andeq	r3, r1, r8, asr #22
   11e40:	andeq	r3, r1, r8, asr #22
   11e44:	andeq	r3, r1, r8, asr #22
   11e48:	andeq	r3, r1, r8, asr #22
   11e4c:	andeq	r3, r1, r8, asr #22
   11e50:	andeq	r3, r1, r8, asr #22
   11e54:	andeq	r3, r1, r8, asr #22
   11e58:	andeq	r3, r1, r8, asr #22
   11e5c:	andeq	r3, r1, r8, asr #22
   11e60:	andeq	r3, r1, r8, asr #22
   11e64:	andeq	r3, r1, r8, asr #22
   11e68:	andeq	r3, r1, r8, asr #22
   11e6c:	andeq	r3, r1, r8, asr #22
   11e70:	andeq	r3, r1, r8, asr #22
   11e74:	andeq	r3, r1, r8, asr #22
   11e78:	andeq	r3, r1, r8, asr #22
   11e7c:	andeq	r3, r1, r8, asr #22
   11e80:	andeq	r3, r1, r8, asr #22
   11e84:	andeq	r3, r1, r8, asr #22
   11e88:	andeq	r3, r1, r8, asr #22
   11e8c:	andeq	r3, r1, r8, asr #22
   11e90:	andeq	r3, r1, r8, asr #22
   11e94:	andeq	r3, r1, r8, asr #22
   11e98:	andeq	r3, r1, r8, asr #22
   11e9c:	andeq	r3, r1, r8, asr #22
   11ea0:	andeq	r3, r1, r8, asr #22
   11ea4:	andeq	r3, r1, r8, asr #22
   11ea8:	andeq	r3, r1, r8, asr #22
   11eac:	andeq	r3, r1, r8, asr #22
   11eb0:	andeq	r3, r1, r8, asr #22
   11eb4:	andeq	r3, r1, r8, asr #22
   11eb8:	andeq	r3, r1, r8, asr #22
   11ebc:	andeq	r3, r1, r8, asr #22
   11ec0:	andeq	r3, r1, r8, asr #22
   11ec4:	andeq	r3, r1, r8, asr #22
   11ec8:	andeq	r3, r1, r8, asr #22
   11ecc:	andeq	r3, r1, r8, asr #22
   11ed0:	andeq	r3, r1, r8, asr #22
   11ed4:	andeq	r3, r1, r8, asr #22
   11ed8:	andeq	r3, r1, r8, asr #22
   11edc:	andeq	r3, r1, r8, asr #22
   11ee0:	andeq	r3, r1, r8, asr #22
   11ee4:	andeq	r3, r1, r8, asr #22
   11ee8:	andeq	r3, r1, r8, asr #22
   11eec:	andeq	r3, r1, r8, asr #22
   11ef0:	andeq	r3, r1, r8, asr #22
   11ef4:	andeq	r3, r1, r8, asr #22
   11ef8:	andeq	r3, r1, r8, asr #22
   11efc:	andeq	r3, r1, r8, asr #22
   11f00:	andeq	r3, r1, r8, asr #22
   11f04:	andeq	r3, r1, r8, asr #22
   11f08:	andeq	r3, r1, r8, asr #22
   11f0c:	andeq	r3, r1, r8, asr #22
   11f10:	andeq	r3, r1, r8, asr #22
   11f14:	andeq	r3, r1, r8, asr #22
   11f18:	andeq	r3, r1, r8, asr #22
   11f1c:	andeq	r3, r1, r8, asr #22
   11f20:	andeq	r3, r1, r8, asr #22
   11f24:	andeq	r3, r1, r8, asr #22
   11f28:	andeq	r3, r1, r8, asr #22
   11f2c:	andeq	r3, r1, r8, asr #22
   11f30:	andeq	r3, r1, r8, asr #22
   11f34:	andeq	r3, r1, r8, asr #22
   11f38:	andeq	r3, r1, r8, asr #22
   11f3c:	andeq	r3, r1, r8, asr #22
   11f40:	andeq	r3, r1, r8, asr #22
   11f44:	andeq	r3, r1, r8, asr #22
   11f48:	andeq	r3, r1, r8, asr #22
   11f4c:	andeq	r3, r1, r8, asr #22
   11f50:	andeq	r3, r1, r8, asr #22
   11f54:	andeq	r3, r1, r8, asr #22
   11f58:	andeq	r3, r1, r8, asr #22
   11f5c:	andeq	r3, r1, r8, asr #22
   11f60:	andeq	r3, r1, r8, asr #22
   11f64:	andeq	r3, r1, r8, asr #22
   11f68:	andeq	r3, r1, r8, asr #22
   11f6c:	andeq	r3, r1, r8, asr #22
   11f70:	andeq	r3, r1, r8, asr #22
   11f74:	andeq	r3, r1, r8, asr #22
   11f78:	andeq	r3, r1, r8, asr #22
   11f7c:	andeq	r3, r1, r8, asr #22
   11f80:	andeq	r3, r1, r8, asr #22
   11f84:	andeq	r3, r1, r8, asr #22
   11f88:	andeq	r3, r1, r8, asr #22
   11f8c:	andeq	r3, r1, r8, asr #22
   11f90:	andeq	r3, r1, r8, asr #22
   11f94:	andeq	r3, r1, r8, asr #22
   11f98:	andeq	r3, r1, r8, asr #22
   11f9c:	andeq	r3, r1, r8, asr #22
   11fa0:	andeq	r3, r1, r8, asr #22
   11fa4:	andeq	r3, r1, r8, asr #22
   11fa8:	andeq	r3, r1, r8, asr #22
   11fac:	andeq	r3, r1, r8, asr #22
   11fb0:	andeq	r3, r1, r8, asr #22
   11fb4:	andeq	r3, r1, r8, asr #22
   11fb8:	andeq	r3, r1, r8, asr #22
   11fbc:	andeq	r3, r1, r8, asr #22
   11fc0:	andeq	r3, r1, r8, asr #22
   11fc4:	andeq	r3, r1, r8, asr #22
   11fc8:	andeq	r3, r1, r8, asr #22
   11fcc:	andeq	r3, r1, r8, asr #22
   11fd0:	andeq	r3, r1, r8, asr #22
   11fd4:	andeq	r3, r1, r8, asr #22
   11fd8:	andeq	r3, r1, r8, asr #22
   11fdc:	andeq	r3, r1, r8, asr #22
   11fe0:	andeq	r3, r1, r8, asr #22
   11fe4:	andeq	r3, r1, r8, asr #22
   11fe8:	andeq	r3, r1, r8, asr #22
   11fec:	andeq	r3, r1, r8, asr #22
   11ff0:	andeq	r3, r1, r8, asr #22
   11ff4:	andeq	r3, r1, r8, asr #22
   11ff8:	andeq	r3, r1, r8, asr #22
   11ffc:	andeq	r3, r1, r8, asr #22
   12000:	andeq	r3, r1, r8, asr #22
   12004:	andeq	r3, r1, r8, asr #22
   12008:	andeq	r3, r1, r8, asr #22
   1200c:	andeq	r3, r1, r8, asr #22
   12010:	andeq	r3, r1, r8, asr #22
   12014:	andeq	r3, r1, r8, asr #22
   12018:	andeq	r3, r1, r8, asr #22
   1201c:	andeq	r3, r1, r8, asr #22
   12020:	andeq	r3, r1, r8, asr #22
   12024:	andeq	r3, r1, r8, asr #22
   12028:	andeq	r3, r1, r8, asr #22
   1202c:	andeq	r3, r1, r8, asr #22
   12030:	andeq	r3, r1, r8, asr #22
   12034:	andeq	r3, r1, r8, asr #22
   12038:	andeq	r2, r1, r4, lsl #5
   1203c:	andeq	r2, r1, r4, lsr r3
   12040:			; <UNDEFINED> instruction: 0x000123b8
   12044:	andeq	r2, r1, r8, ror #3
   12048:	ldr	r0, [sp, #84]	; 0x54
   1204c:	cmp	r0, #0
   12050:	beq	1206c <__assert_fail@plt+0x958>
   12054:	mvn	r1, #4
   12058:	mov	r5, r9
   1205c:	mov	r8, r7
   12060:	tst	r0, r1
   12064:	beq	1207c <__assert_fail@plt+0x968>
   12068:	b	13c24 <__assert_fail@plt+0x2510>
   1206c:	mov	r0, #4
   12070:	mov	r5, #0
   12074:	mov	r8, #0
   12078:	str	r0, [sp, #84]	; 0x54
   1207c:	cmp	sl, #0
   12080:	cmpne	sl, r6
   12084:	bne	11bc8 <__assert_fail@plt+0x4b4>
   12088:	movw	r0, #39321	; 0x9999
   1208c:	movt	r0, #39321	; 0x9999
   12090:	subs	r0, r0, r5
   12094:	movw	r0, #39321	; 0x9999
   12098:	movt	r0, #6553	; 0x1999
   1209c:	sbcs	r0, r0, r8
   120a0:	bcc	13be4 <__assert_fail@plt+0x24d0>
   120a4:	mov	r0, #10
   120a8:	add	r2, r8, r8, lsl #2
   120ac:	mov	sl, r6
   120b0:	umull	r0, r1, r5, r0
   120b4:	add	r1, r1, r2, lsl #1
   120b8:	sub	r2, r4, #48	; 0x30
   120bc:	adds	r0, r0, r2
   120c0:	adc	r7, r1, r2, asr #31
   120c4:	mov	r9, r0
   120c8:	subs	r0, r0, r5
   120cc:	sbcs	r0, r7, r8
   120d0:	bcs	11bd8 <__assert_fail@plt+0x4c4>
   120d4:	b	13be4 <__assert_fail@plt+0x24d0>
   120d8:	movw	r0, #40781	; 0x9f4d
   120dc:	movw	r6, #40792	; 0x9f58
   120e0:	cmp	r4, #100	; 0x64
   120e4:	movt	r0, #1
   120e8:	movt	r6, #1
   120ec:	moveq	r6, r0
   120f0:	movw	r0, #45396	; 0xb154
   120f4:	movt	r0, #2
   120f8:	str	r6, [r0]
   120fc:	movw	r0, #45928	; 0xb368
   12100:	movt	r0, #2
   12104:	ldr	r5, [r0]
   12108:	cmp	r5, #0
   1210c:	beq	11bd8 <__assert_fail@plt+0x4c4>
   12110:	mov	r0, r5
   12114:	bl	11588 <strlen@plt>
   12118:	mov	r8, r0
   1211c:	mov	r0, r5
   12120:	mov	r1, r6
   12124:	bl	11708 <strspn@plt>
   12128:	cmp	r8, r0
   1212c:	bne	13c50 <__assert_fail@plt+0x253c>
   12130:	ldrb	r0, [r5]
   12134:	cmp	r0, #48	; 0x30
   12138:	bne	12168 <__assert_fail@plt+0xa54>
   1213c:	movw	r2, #45928	; 0xb368
   12140:	add	r0, r5, #1
   12144:	movt	r2, #2
   12148:	ldrb	r1, [r0]
   1214c:	cmp	r1, #0
   12150:	beq	12164 <__assert_fail@plt+0xa50>
   12154:	str	r0, [r2]
   12158:	ldrb	r1, [r0], #1
   1215c:	cmp	r1, #48	; 0x30
   12160:	beq	12148 <__assert_fail@plt+0xa34>
   12164:	sub	r5, r0, #1
   12168:	movw	r0, #45956	; 0xb384
   1216c:	movt	r0, #2
   12170:	str	r5, [r0]
   12174:	b	11bd8 <__assert_fail@plt+0x4c4>
   12178:	movw	r0, #45960	; 0xb388
   1217c:	movt	r0, #2
   12180:	b	12278 <__assert_fail@plt+0xb64>
   12184:	movw	r0, #45928	; 0xb368
   12188:	movw	r1, #40463	; 0x9e0f
   1218c:	mov	r2, #5
   12190:	movt	r0, #2
   12194:	movt	r1, #1
   12198:	ldr	r4, [r0]
   1219c:	mov	r0, #0
   121a0:	bl	11444 <dcgettext@plt>
   121a4:	mvn	r1, #-1073741824	; 0xc0000000
   121a8:	mov	r2, #0
   121ac:	str	r0, [sp, #12]
   121b0:	mov	r0, r4
   121b4:	mov	r3, #0
   121b8:	str	r1, [sp]
   121bc:	movw	r1, #39853	; 0x9bad
   121c0:	str	r2, [sp, #4]
   121c4:	str	r2, [sp, #16]
   121c8:	mov	r2, #0
   121cc:	movt	r1, #1
   121d0:	str	r1, [sp, #8]
   121d4:	bl	182e4 <__assert_fail@plt+0x6bd0>
   121d8:	movw	r1, #45944	; 0xb378
   121dc:	movt	r1, #2
   121e0:	str	r0, [r1]
   121e4:	b	11bd8 <__assert_fail@plt+0x4c4>
   121e8:	movw	r0, #45928	; 0xb368
   121ec:	movt	r0, #2
   121f0:	ldr	r4, [r0]
   121f4:	mov	r0, r4
   121f8:	bl	14fb4 <__assert_fail@plt+0x38a0>
   121fc:	cmp	r0, r4
   12200:	bne	13c6c <__assert_fail@plt+0x2558>
   12204:	movw	r0, #45948	; 0xb37c
   12208:	movt	r0, #2
   1220c:	str	r4, [r0]
   12210:	b	11bd8 <__assert_fail@plt+0x4c4>
   12214:	ldr	r0, [sp, #84]	; 0x54
   12218:	cmp	r0, #0
   1221c:	bne	13c24 <__assert_fail@plt+0x2510>
   12220:	movw	r0, #45928	; 0xb368
   12224:	movw	r1, #40567	; 0x9e77
   12228:	mov	r2, #5
   1222c:	movt	r0, #2
   12230:	movt	r1, #1
   12234:	ldr	r4, [r0]
   12238:	mov	r0, #0
   1223c:	bl	11444 <dcgettext@plt>
   12240:	mvn	r1, #0
   12244:	str	r0, [sp, #12]
   12248:	mov	r0, #0
   1224c:	str	r1, [sp]
   12250:	mvn	r1, #-2147483648	; 0x80000000
   12254:	str	r0, [sp, #16]
   12258:	mov	r0, #1
   1225c:	str	r1, [sp, #4]
   12260:	movw	r1, #42848	; 0xa760
   12264:	str	r0, [sp, #84]	; 0x54
   12268:	movt	r1, #1
   1226c:	b	1252c <__assert_fail@plt+0xe18>
   12270:	movw	r0, #45952	; 0xb380
   12274:	movt	r0, #2
   12278:	mov	r1, #1
   1227c:	strb	r1, [r0]
   12280:	b	11bd8 <__assert_fail@plt+0x4c4>
   12284:	movw	r1, #45968	; 0xb390
   12288:	mov	r0, #1
   1228c:	movt	r1, #2
   12290:	strb	r0, [r1]
   12294:	b	11bd8 <__assert_fail@plt+0x4c4>
   12298:	ldr	r0, [sp, #84]	; 0x54
   1229c:	cmp	r0, #0
   122a0:	bne	13c24 <__assert_fail@plt+0x2510>
   122a4:	bl	11564 <__ctype_b_loc@plt>
   122a8:	movw	r6, #45928	; 0xb368
   122ac:	ldr	r1, [r0]
   122b0:	movt	r6, #2
   122b4:	ldr	r4, [r6]
   122b8:	ldrb	r2, [r4]
   122bc:	add	r1, r1, r2, lsl #1
   122c0:	ldrb	r1, [r1, #1]
   122c4:	tst	r1, #32
   122c8:	beq	122f0 <__assert_fail@plt+0xbdc>
   122cc:	add	r1, r4, #1
   122d0:	str	r1, [r6]
   122d4:	ldrb	r2, [r1], #1
   122d8:	ldr	r3, [r0]
   122dc:	add	r2, r3, r2, lsl #1
   122e0:	ldrb	r2, [r2, #1]
   122e4:	tst	r2, #32
   122e8:	bne	122d0 <__assert_fail@plt+0xbbc>
   122ec:	sub	r4, r1, #1
   122f0:	movw	r1, #40615	; 0x9ea7
   122f4:	mov	r0, r4
   122f8:	mov	r2, #2
   122fc:	movt	r1, #1
   12300:	bl	116e4 <strncmp@plt>
   12304:	cmp	r0, #0
   12308:	beq	12414 <__assert_fail@plt+0xd00>
   1230c:	movw	r1, #40618	; 0x9eaa
   12310:	mov	r0, r4
   12314:	mov	r2, #2
   12318:	movt	r1, #1
   1231c:	bl	116e4 <strncmp@plt>
   12320:	mov	r1, #5
   12324:	cmp	r0, #0
   12328:	bne	12420 <__assert_fail@plt+0xd0c>
   1232c:	mov	r1, #6
   12330:	b	12418 <__assert_fail@plt+0xd04>
   12334:	movw	r0, #45928	; 0xb368
   12338:	movw	r1, #45964	; 0xb38c
   1233c:	movt	r0, #2
   12340:	movt	r1, #2
   12344:	ldr	r0, [r0]
   12348:	str	r0, [r1]
   1234c:	b	11bd8 <__assert_fail@plt+0x4c4>
   12350:	movw	r0, #45928	; 0xb368
   12354:	movt	r0, #2
   12358:	ldr	r0, [r0]
   1235c:	ldrb	r1, [r0]
   12360:	cmp	r1, #0
   12364:	beq	13cb0 <__assert_fail@plt+0x259c>
   12368:	ldrb	r2, [r0, #1]
   1236c:	cmp	r2, #0
   12370:	beq	1238c <__assert_fail@plt+0xc78>
   12374:	movw	r1, #40669	; 0x9edd
   12378:	movt	r1, #1
   1237c:	bl	113a8 <strcmp@plt>
   12380:	mov	r1, #0
   12384:	cmp	r0, #0
   12388:	bne	13cbc <__assert_fail@plt+0x25a8>
   1238c:	movw	r0, #45392	; 0xb150
   12390:	movt	r0, #2
   12394:	ldr	r0, [r0]
   12398:	cmp	r0, #0
   1239c:	bmi	123a8 <__assert_fail@plt+0xc94>
   123a0:	cmp	r0, r1
   123a4:	bne	13cf8 <__assert_fail@plt+0x25e4>
   123a8:	movw	r0, #45392	; 0xb150
   123ac:	movt	r0, #2
   123b0:	str	r1, [r0]
   123b4:	b	11bd8 <__assert_fail@plt+0x4c4>
   123b8:	movw	r0, #45928	; 0xb368
   123bc:	movw	r1, #40901	; 0x9fc5
   123c0:	mov	r2, #5
   123c4:	movt	r0, #2
   123c8:	movt	r1, #1
   123cc:	ldr	r4, [r0]
   123d0:	mov	r0, #0
   123d4:	bl	11444 <dcgettext@plt>
   123d8:	movw	r2, #42848	; 0xa760
   123dc:	mvn	r1, #-2147483647	; 0x80000001
   123e0:	str	r0, [sp, #12]
   123e4:	mov	r0, r4
   123e8:	mov	r3, #0
   123ec:	movt	r2, #1
   123f0:	str	r1, [sp]
   123f4:	mov	r1, #0
   123f8:	str	r1, [sp, #4]
   123fc:	str	r1, [sp, #16]
   12400:	str	r2, [sp, #8]
   12404:	mov	r2, #1
   12408:	bl	182e4 <__assert_fail@plt+0x6bd0>
   1240c:	str	r0, [sp, #80]	; 0x50
   12410:	b	11bd8 <__assert_fail@plt+0x4c4>
   12414:	mov	r1, #7
   12418:	add	r4, r4, #2
   1241c:	str	r4, [r6]
   12420:	str	r1, [sp, #84]	; 0x54
   12424:	mov	r0, r4
   12428:	mov	r1, #47	; 0x2f
   1242c:	bl	115a0 <strchr@plt>
   12430:	cmp	r0, #0
   12434:	beq	124f8 <__assert_fail@plt+0xde4>
   12438:	movw	r1, #40621	; 0x9ead
   1243c:	mov	r5, r0
   12440:	mov	r0, #0
   12444:	mov	r2, #5
   12448:	movt	r1, #1
   1244c:	bl	11444 <dcgettext@plt>
   12450:	mvn	r1, #0
   12454:	str	r0, [sp, #12]
   12458:	mov	r0, #0
   1245c:	mov	r2, #1
   12460:	mov	r3, #0
   12464:	str	r1, [sp]
   12468:	str	r1, [sp, #4]
   1246c:	movw	r1, #39853	; 0x9bad
   12470:	str	r0, [sp, #16]
   12474:	add	r0, r5, #1
   12478:	movt	r1, #1
   1247c:	str	r1, [sp, #8]
   12480:	bl	182e4 <__assert_fail@plt+0x6bd0>
   12484:	mov	r9, r0
   12488:	ldr	r0, [r6]
   1248c:	mov	r7, r1
   12490:	cmp	r0, r5
   12494:	beq	11bd8 <__assert_fail@plt+0x4c4>
   12498:	movw	r0, #45928	; 0xb368
   1249c:	mov	r6, #0
   124a0:	movw	r1, #41971	; 0xa3f3
   124a4:	mov	r2, #5
   124a8:	movt	r0, #2
   124ac:	strb	r6, [r5]
   124b0:	movt	r1, #1
   124b4:	ldr	r4, [r0]
   124b8:	mov	r0, #0
   124bc:	bl	11444 <dcgettext@plt>
   124c0:	movw	r1, #39853	; 0x9bad
   124c4:	str	r0, [sp, #12]
   124c8:	mov	r0, r4
   124cc:	mov	r2, #1
   124d0:	mov	r3, #0
   124d4:	str	r9, [sp]
   124d8:	str	r7, [sp, #4]
   124dc:	str	r6, [sp, #16]
   124e0:	movt	r1, #1
   124e4:	str	r1, [sp, #8]
   124e8:	bl	182e4 <__assert_fail@plt+0x6bd0>
   124ec:	str	r0, [sp, #68]	; 0x44
   124f0:	str	r1, [sp, #72]	; 0x48
   124f4:	b	11bd8 <__assert_fail@plt+0x4c4>
   124f8:	movw	r1, #40621	; 0x9ead
   124fc:	mov	r0, #0
   12500:	mov	r2, #5
   12504:	movt	r1, #1
   12508:	bl	11444 <dcgettext@plt>
   1250c:	mvn	r1, #0
   12510:	str	r0, [sp, #12]
   12514:	mov	r0, #0
   12518:	str	r1, [sp]
   1251c:	str	r1, [sp, #4]
   12520:	movw	r1, #39853	; 0x9bad
   12524:	str	r0, [sp, #16]
   12528:	movt	r1, #1
   1252c:	str	r1, [sp, #8]
   12530:	mov	r0, r4
   12534:	mov	r2, #1
   12538:	mov	r3, #0
   1253c:	bl	182e4 <__assert_fail@plt+0x6bd0>
   12540:	mov	r9, r0
   12544:	mov	r7, r1
   12548:	b	11bd8 <__assert_fail@plt+0x4c4>
   1254c:	ldr	r0, [sp, #84]	; 0x54
   12550:	cmp	r0, #0
   12554:	bne	13c24 <__assert_fail@plt+0x2510>
   12558:	movw	r0, #45928	; 0xb368
   1255c:	movw	r1, #40567	; 0x9e77
   12560:	mov	r2, #5
   12564:	movt	r0, #2
   12568:	movt	r1, #1
   1256c:	ldr	r4, [r0]
   12570:	mov	r0, #0
   12574:	bl	11444 <dcgettext@plt>
   12578:	movw	r2, #42848	; 0xa760
   1257c:	mvn	r1, #0
   12580:	str	r0, [sp, #12]
   12584:	mov	r0, r4
   12588:	mov	r3, #0
   1258c:	movt	r2, #1
   12590:	str	r1, [sp]
   12594:	mov	r1, #0
   12598:	str	r1, [sp, #4]
   1259c:	str	r1, [sp, #16]
   125a0:	str	r2, [sp, #8]
   125a4:	mov	r2, #1
   125a8:	bl	182e4 <__assert_fail@plt+0x6bd0>
   125ac:	mov	r9, r0
   125b0:	mov	r7, r1
   125b4:	mov	r0, #2
   125b8:	b	11bc0 <__assert_fail@plt+0x4ac>
   125bc:	ldr	r0, [sp, #84]	; 0x54
   125c0:	cmp	r0, #0
   125c4:	bne	13c24 <__assert_fail@plt+0x2510>
   125c8:	movw	r0, #45928	; 0xb368
   125cc:	movw	r1, #40591	; 0x9e8f
   125d0:	mov	r2, #5
   125d4:	movt	r0, #2
   125d8:	movt	r1, #1
   125dc:	ldr	r4, [r0]
   125e0:	mov	r0, #0
   125e4:	bl	11444 <dcgettext@plt>
   125e8:	mvn	r1, #0
   125ec:	str	r0, [sp, #12]
   125f0:	mov	r0, #0
   125f4:	mov	r2, #1
   125f8:	mov	r3, #0
   125fc:	str	r1, [sp]
   12600:	str	r1, [sp, #4]
   12604:	movw	r1, #39853	; 0x9bad
   12608:	str	r0, [sp, #16]
   1260c:	mov	r0, r4
   12610:	movt	r1, #1
   12614:	str	r1, [sp, #8]
   12618:	bl	182e4 <__assert_fail@plt+0x6bd0>
   1261c:	mov	r9, r0
   12620:	mov	r7, r1
   12624:	mov	r0, #3
   12628:	b	11bc0 <__assert_fail@plt+0x4ac>
   1262c:	ldr	r5, [sp, #68]	; 0x44
   12630:	ldr	r0, [sp, #72]	; 0x48
   12634:	orrs	r0, r5, r0
   12638:	str	r0, [sp, #76]	; 0x4c
   1263c:	beq	12654 <__assert_fail@plt+0xf40>
   12640:	movw	r0, #45964	; 0xb38c
   12644:	movt	r0, #2
   12648:	ldr	r0, [r0]
   1264c:	cmp	r0, #0
   12650:	bne	13d50 <__assert_fail@plt+0x263c>
   12654:	ldr	sl, [sp, #84]	; 0x54
   12658:	cmp	sl, #0
   1265c:	beq	126a8 <__assert_fail@plt+0xf94>
   12660:	orrs	r0, r9, r7
   12664:	bne	126b4 <__assert_fail@plt+0xfa0>
   12668:	movw	r1, #40591	; 0x9e8f
   1266c:	mov	r0, #0
   12670:	mov	r2, #5
   12674:	movt	r1, #1
   12678:	bl	11444 <dcgettext@plt>
   1267c:	mov	r4, r0
   12680:	movw	r0, #40670	; 0x9ede
   12684:	movt	r0, #1
   12688:	bl	170d4 <__assert_fail@plt+0x59c0>
   1268c:	movw	r2, #41029	; 0xa045
   12690:	str	r0, [sp]
   12694:	mov	r0, #0
   12698:	mov	r1, #0
   1269c:	mov	r3, r4
   126a0:	movt	r2, #1
   126a4:	b	13ca4 <__assert_fail@plt+0x2590>
   126a8:	mov	r7, #0
   126ac:	mov	r9, #1000	; 0x3e8
   126b0:	mov	sl, #3
   126b4:	movw	r0, #45392	; 0xb150
   126b8:	movt	r0, #2
   126bc:	ldr	r0, [r0]
   126c0:	cmn	r0, #1
   126c4:	bgt	126d8 <__assert_fail@plt+0xfc4>
   126c8:	movw	r1, #45392	; 0xb150
   126cc:	mov	r0, #10
   126d0:	movt	r1, #2
   126d4:	str	r0, [r1]
   126d8:	movw	r0, #45956	; 0xb384
   126dc:	movw	r2, #46344	; 0xb508
   126e0:	str	sl, [sp, #84]	; 0x54
   126e4:	sub	r8, sl, #5
   126e8:	mov	sl, r9
   126ec:	str	r9, [sp, #96]	; 0x60
   126f0:	movw	r9, #45944	; 0xb378
   126f4:	str	r7, [sp, #100]	; 0x64
   126f8:	mov	r7, #0
   126fc:	mov	r6, #0
   12700:	movt	r0, #2
   12704:	movt	r2, #2
   12708:	movt	r9, #2
   1270c:	ldr	r0, [r0]
   12710:	cmp	r0, #0
   12714:	movne	r1, #1
   12718:	strbne	r1, [r2]
   1271c:	cmp	r8, #2
   12720:	bhi	12818 <__assert_fail@plt+0x1104>
   12724:	ldr	r1, [sp, #100]	; 0x64
   12728:	subs	r6, sl, #1
   1272c:	sbc	r7, r1, #0
   12730:	cmp	r0, #0
   12734:	beq	12760 <__assert_fail@plt+0x104c>
   12738:	movw	r1, #39853	; 0x9bad
   1273c:	add	r3, sp, #104	; 0x68
   12740:	mov	r2, #10
   12744:	mov	r4, #0
   12748:	movt	r1, #1
   1274c:	str	r1, [sp]
   12750:	mov	r1, #0
   12754:	bl	182ec <__assert_fail@plt+0x6bd8>
   12758:	cmp	r0, #0
   1275c:	beq	1276c <__assert_fail@plt+0x1058>
   12760:	mov	r4, r6
   12764:	mov	r5, r7
   12768:	b	127b4 <__assert_fail@plt+0x10a0>
   1276c:	ldr	r0, [sp, #104]	; 0x68
   12770:	ldr	r1, [sp, #108]	; 0x6c
   12774:	ldr	r3, [sp, #100]	; 0x64
   12778:	mvn	r5, sl
   1277c:	subs	r2, r0, sl
   12780:	sbcs	r2, r1, r3
   12784:	mov	r2, #0
   12788:	mvn	r3, r3
   1278c:	movwcc	r2, #1
   12790:	subs	r5, r5, r0
   12794:	sbcs	r3, r3, r1
   12798:	movwcs	r4, #1
   1279c:	and	r2, r4, r2
   127a0:	adds	r4, r6, r0
   127a4:	adc	r5, r7, r1
   127a8:	cmp	r2, #0
   127ac:	moveq	r5, r7
   127b0:	moveq	r4, r6
   127b4:	movw	r0, #45396	; 0xb154
   127b8:	movt	r0, #2
   127bc:	ldr	r0, [r0]
   127c0:	bl	11588 <strlen@plt>
   127c4:	mov	sl, r0
   127c8:	mov	r7, #0
   127cc:	mov	r6, #0
   127d0:	mov	r0, r4
   127d4:	mov	r1, r5
   127d8:	mov	r2, sl
   127dc:	mov	r3, #0
   127e0:	bl	194b8 <__assert_fail@plt+0x7da4>
   127e4:	adds	r7, r7, #1
   127e8:	adc	r6, r6, #0
   127ec:	subs	r2, r4, sl
   127f0:	mov	r4, r0
   127f4:	sbcs	r2, r5, #0
   127f8:	mov	r5, r1
   127fc:	bcs	127d0 <__assert_fail@plt+0x10bc>
   12800:	ldr	sl, [sp, #96]	; 0x60
   12804:	ldr	r5, [sp, #68]	; 0x44
   12808:	movw	r2, #46344	; 0xb508
   1280c:	mov	r0, #1
   12810:	movt	r2, #2
   12814:	strb	r0, [r2]
   12818:	ldr	r4, [r9]
   1281c:	cmp	r4, #0
   12820:	beq	1283c <__assert_fail@plt+0x1128>
   12824:	subs	r0, r4, r7
   12828:	rscs	r0, r6, #0
   1282c:	bcc	13dd0 <__assert_fail@plt+0x26bc>
   12830:	mov	r0, #1
   12834:	strb	r0, [r2]
   12838:	b	12850 <__assert_fail@plt+0x113c>
   1283c:	rsbs	r0, r7, #2
   12840:	rscs	r0, r6, #0
   12844:	movcs	r7, #2
   12848:	mov	r4, r7
   1284c:	str	r7, [r9]
   12850:	movw	r6, #45912	; 0xb358
   12854:	ldr	r0, [sp, #92]	; 0x5c
   12858:	ldr	r9, [sp, #100]	; 0x64
   1285c:	movt	r6, #2
   12860:	ldr	r1, [r6]
   12864:	cmp	r1, r0
   12868:	bge	1288c <__assert_fail@plt+0x1178>
   1286c:	ldr	r2, [sp, #88]	; 0x58
   12870:	add	r0, r1, #1
   12874:	str	r0, [r6]
   12878:	ldr	r1, [r2, r1, lsl #2]
   1287c:	movw	r2, #45936	; 0xb370
   12880:	movt	r2, #2
   12884:	str	r1, [r2]
   12888:	b	12890 <__assert_fail@plt+0x117c>
   1288c:	mov	r0, r1
   12890:	ldr	r1, [sp, #92]	; 0x5c
   12894:	cmp	r0, r1
   12898:	bge	128bc <__assert_fail@plt+0x11a8>
   1289c:	ldr	r2, [sp, #88]	; 0x58
   128a0:	add	r1, r0, #1
   128a4:	str	r1, [r6]
   128a8:	ldr	r0, [r2, r0, lsl #2]
   128ac:	movw	r2, #45940	; 0xb374
   128b0:	movt	r2, #2
   128b4:	str	r0, [r2]
   128b8:	b	128c0 <__assert_fail@plt+0x11ac>
   128bc:	mov	r1, r0
   128c0:	ldr	r0, [sp, #92]	; 0x5c
   128c4:	cmp	r1, r0
   128c8:	blt	13d5c <__assert_fail@plt+0x2648>
   128cc:	movw	r0, #45956	; 0xb384
   128d0:	movt	r0, #2
   128d4:	ldr	r0, [r0]
   128d8:	cmp	r0, #0
   128dc:	beq	128ec <__assert_fail@plt+0x11d8>
   128e0:	bl	11588 <strlen@plt>
   128e4:	cmp	r0, r4
   128e8:	bhi	13df4 <__assert_fail@plt+0x26e0>
   128ec:	movw	r0, #45936	; 0xb370
   128f0:	movw	r1, #43273	; 0xa909
   128f4:	movt	r0, #2
   128f8:	movt	r1, #1
   128fc:	ldr	r4, [r0]
   12900:	mov	r0, r4
   12904:	bl	113a8 <strcmp@plt>
   12908:	cmp	r0, #0
   1290c:	beq	1292c <__assert_fail@plt+0x1218>
   12910:	mov	r0, #0
   12914:	mov	r1, r4
   12918:	mov	r2, #0
   1291c:	mov	r3, #0
   12920:	bl	15218 <__assert_fail@plt+0x3b04>
   12924:	cmn	r0, #1
   12928:	ble	13e00 <__assert_fail@plt+0x26ec>
   1292c:	movw	r4, #45976	; 0xb398
   12930:	mov	r0, #3
   12934:	mov	r1, #0
   12938:	movt	r4, #2
   1293c:	mov	r2, r4
   12940:	bl	1148c <__fxstat64@plt>
   12944:	cmp	r0, #0
   12948:	bne	13bac <__assert_fail@plt+0x2498>
   1294c:	ldr	r1, [sp, #80]	; 0x50
   12950:	cmp	r1, #0
   12954:	bne	1298c <__assert_fail@plt+0x1278>
   12958:	ldr	r0, [r4, #56]	; 0x38
   1295c:	mov	r2, #0
   12960:	mov	r1, #0
   12964:	cmp	r0, #536870913	; 0x20000001
   12968:	movwcc	r2, #1
   1296c:	cmp	r0, #0
   12970:	movwgt	r1, #1
   12974:	ands	r1, r1, r2
   12978:	mov	r1, r0
   1297c:	moveq	r1, #512	; 0x200
   12980:	moveq	r1, #131072	; 0x20000
   12984:	cmp	r0, #131072	; 0x20000
   12988:	movlt	r1, #131072	; 0x20000
   1298c:	ldr	r0, [sp, #64]	; 0x40
   12990:	str	r1, [sp, #80]	; 0x50
   12994:	add	r1, r1, #1
   12998:	bl	17be0 <__assert_fail@plt+0x64cc>
   1299c:	cmp	r8, #1
   129a0:	str	r0, [sp, #88]	; 0x58
   129a4:	bhi	12b60 <__assert_fail@plt+0x144c>
   129a8:	mov	r0, #1
   129ac:	mov	r2, #0
   129b0:	mov	r3, #0
   129b4:	mov	r8, #0
   129b8:	str	r0, [sp]
   129bc:	mov	r0, #0
   129c0:	bl	114b0 <lseek64@plt>
   129c4:	cmp	r1, #0
   129c8:	bmi	13e38 <__assert_fail@plt+0x2724>
   129cc:	ldr	r2, [sp, #80]	; 0x50
   129d0:	mov	r9, r0
   129d4:	mov	r6, r1
   129d8:	mov	r7, #0
   129dc:	ldr	r0, [sp, #88]	; 0x58
   129e0:	sub	r2, r2, r8
   129e4:	mov	r4, r8
   129e8:	add	r1, r0, r8
   129ec:	mov	r0, #0
   129f0:	bl	17220 <__assert_fail@plt+0x5b0c>
   129f4:	cmp	r0, #0
   129f8:	beq	12b1c <__assert_fail@plt+0x1408>
   129fc:	cmn	r0, #1
   12a00:	beq	13e4c <__assert_fail@plt+0x2738>
   12a04:	ldr	r2, [sp, #80]	; 0x50
   12a08:	mov	r8, r4
   12a0c:	adds	r8, r4, r0
   12a10:	adc	r7, r7, #0
   12a14:	subs	r0, r8, r2
   12a18:	sbcs	r0, r7, #0
   12a1c:	bcc	129dc <__assert_fail@plt+0x12c8>
   12a20:	movw	r3, #45976	; 0xb398
   12a24:	movt	r3, #2
   12a28:	ldrd	r0, [r3, #48]	; 0x30
   12a2c:	orrs	r2, r0, r1
   12a30:	beq	13f20 <__assert_fail@plt+0x280c>
   12a34:	ldr	r2, [r3, #16]
   12a38:	str	r8, [sp, #56]	; 0x38
   12a3c:	adds	r8, r8, r9
   12a40:	adc	r6, r7, r6
   12a44:	and	r2, r2, #53248	; 0xd000
   12a48:	orr	r2, r2, #8192	; 0x2000
   12a4c:	cmp	r2, #40960	; 0xa000
   12a50:	bne	12a60 <__assert_fail@plt+0x134c>
   12a54:	subs	r2, r0, r8
   12a58:	sbcs	r2, r1, r6
   12a5c:	bge	12ae8 <__assert_fail@plt+0x13d4>
   12a60:	mov	r0, #2
   12a64:	mov	r2, #0
   12a68:	mov	r3, #0
   12a6c:	str	r0, [sp]
   12a70:	mov	r0, #0
   12a74:	bl	114b0 <lseek64@plt>
   12a78:	cmp	r1, #0
   12a7c:	bmi	13e4c <__assert_fail@plt+0x2738>
   12a80:	mov	r2, r0
   12a84:	mov	r4, r1
   12a88:	eor	r0, r0, r8
   12a8c:	eor	r1, r1, r6
   12a90:	orrs	r0, r0, r1
   12a94:	mov	r0, r8
   12a98:	mov	r1, r6
   12a9c:	beq	12ae8 <__assert_fail@plt+0x13d4>
   12aa0:	mov	r9, #0
   12aa4:	str	r2, [sp, #92]	; 0x5c
   12aa8:	mov	r0, #0
   12aac:	mov	r2, r8
   12ab0:	mov	r3, r6
   12ab4:	str	r9, [sp]
   12ab8:	bl	114b0 <lseek64@plt>
   12abc:	ldr	r2, [sp, #92]	; 0x5c
   12ac0:	cmp	r1, #0
   12ac4:	bmi	13e4c <__assert_fail@plt+0x2738>
   12ac8:	subs	r0, r2, r8
   12acc:	sbcs	r0, r4, r6
   12ad0:	movwlt	r9, #1
   12ad4:	cmp	r9, #0
   12ad8:	movne	r4, r6
   12adc:	movne	r2, r8
   12ae0:	mov	r0, r2
   12ae4:	mov	r1, r4
   12ae8:	ldr	r2, [sp, #56]	; 0x38
   12aec:	subs	r0, r0, r8
   12af0:	sbc	r1, r1, r6
   12af4:	adds	r2, r0, r2
   12af8:	mvn	r0, #-2147483648	; 0x80000000
   12afc:	adc	r7, r1, r7
   12b00:	mvn	r1, r2
   12b04:	eor	r0, r7, r0
   12b08:	orrs	r0, r1, r0
   12b0c:	beq	13f20 <__assert_fail@plt+0x280c>
   12b10:	mov	r4, r2
   12b14:	cmn	r7, #1
   12b18:	ble	13e4c <__assert_fail@plt+0x2738>
   12b1c:	ldr	r9, [sp, #100]	; 0x64
   12b20:	ldr	r6, [sp, #80]	; 0x50
   12b24:	cmn	r9, #1
   12b28:	ble	13e98 <__assert_fail@plt+0x2784>
   12b2c:	subs	r0, r4, r6
   12b30:	sbcs	r0, r7, r6, asr #31
   12b34:	mov	r0, #0
   12b38:	movlt	r6, r4
   12b3c:	subs	r1, sl, r4
   12b40:	sbcs	r1, r9, r7
   12b44:	movwcc	r0, #1
   12b48:	cmp	r0, #0
   12b4c:	moveq	r7, r9
   12b50:	moveq	r4, sl
   12b54:	str	r7, [sp, #48]	; 0x30
   12b58:	str	r4, [sp, #56]	; 0x38
   12b5c:	b	12b74 <__assert_fail@plt+0x1460>
   12b60:	mvn	r0, #-2147483648	; 0x80000000
   12b64:	mvn	r6, #0
   12b68:	str	r0, [sp, #48]	; 0x30
   12b6c:	mvn	r0, #0
   12b70:	str	r0, [sp, #56]	; 0x38
   12b74:	movw	r0, #45964	; 0xb38c
   12b78:	ldr	r4, [sp, #84]	; 0x54
   12b7c:	movt	r0, #2
   12b80:	ldr	r0, [r0]
   12b84:	cmp	r0, #0
   12b88:	beq	12bdc <__assert_fail@plt+0x14c8>
   12b8c:	movw	r0, #46080	; 0xb400
   12b90:	movt	r0, #2
   12b94:	bl	11678 <sigemptyset@plt>
   12b98:	add	r2, sp, #104	; 0x68
   12b9c:	mov	r0, #13
   12ba0:	mov	r1, #0
   12ba4:	bl	11498 <sigaction@plt>
   12ba8:	ldr	r0, [sp, #104]	; 0x68
   12bac:	cmp	r0, #1
   12bb0:	beq	12bc4 <__assert_fail@plt+0x14b0>
   12bb4:	movw	r0, #46080	; 0xb400
   12bb8:	mov	r1, #13
   12bbc:	movt	r0, #2
   12bc0:	bl	11528 <sigaddset@plt>
   12bc4:	movw	r1, #46080	; 0xb400
   12bc8:	movw	r2, #46208	; 0xb480
   12bcc:	mov	r0, #0
   12bd0:	movt	r1, #2
   12bd4:	movt	r2, #2
   12bd8:	bl	113d8 <sigprocmask@plt>
   12bdc:	sub	r0, r4, #1
   12be0:	cmp	r0, #6
   12be4:	bhi	13d84 <__assert_fail@plt+0x2670>
   12be8:	movw	r7, #46340	; 0xb504
   12bec:	add	r1, pc, #4
   12bf0:	movt	r7, #2
   12bf4:	ldr	pc, [r1, r0, lsl #2]
   12bf8:	strdeq	r2, [r1], -r4
   12bfc:	andeq	r2, r1, r4, lsl sp
   12c00:	andeq	r2, r1, r4, lsl ip
   12c04:	andeq	r2, r1, r4, lsl ip
   12c08:	andeq	r3, r1, r0, ror #2
   12c0c:	muleq	r1, r0, r0
   12c10:	andeq	r3, r1, r0, asr r1
   12c14:	mov	r4, #0
   12c18:	mov	r9, #1
   12c1c:	mov	r7, #0
   12c20:	b	12c30 <__assert_fail@plt+0x151c>
   12c24:	ldr	r0, [sp, #92]	; 0x5c
   12c28:	cmp	r0, #0
   12c2c:	beq	13b00 <__assert_fail@plt+0x23ec>
   12c30:	ldr	sl, [sp, #88]	; 0x58
   12c34:	ldr	r2, [sp, #80]	; 0x50
   12c38:	mov	r0, #0
   12c3c:	mov	r1, sl
   12c40:	bl	17220 <__assert_fail@plt+0x5b0c>
   12c44:	cmn	r0, #1
   12c48:	beq	13bac <__assert_fail@plt+0x2498>
   12c4c:	mov	r1, r0
   12c50:	movw	r0, #45392	; 0xb150
   12c54:	mov	r8, sl
   12c58:	movt	r0, #2
   12c5c:	str	r1, [sp, #92]	; 0x5c
   12c60:	ldr	r6, [r0]
   12c64:	mov	r0, sl
   12c68:	strb	r6, [r8, r1]!
   12c6c:	b	12c74 <__assert_fail@plt+0x1560>
   12c70:	mov	r0, r5
   12c74:	mov	r1, r6
   12c78:	bl	11474 <rawmemchr@plt>
   12c7c:	cmp	r0, r8
   12c80:	beq	12cd4 <__assert_fail@plt+0x15c0>
   12c84:	add	r5, r0, #1
   12c88:	ldr	r0, [sp, #96]	; 0x60
   12c8c:	adds	r4, r4, #1
   12c90:	adc	r7, r7, #0
   12c94:	subs	r0, r4, r0
   12c98:	ldr	r0, [sp, #100]	; 0x64
   12c9c:	sbcs	r0, r7, r0
   12ca0:	bcc	12c70 <__assert_fail@plt+0x155c>
   12ca4:	sub	r2, r5, sl
   12ca8:	and	r0, r9, #1
   12cac:	mov	r1, sl
   12cb0:	bl	1443c <__assert_fail@plt+0x2d28>
   12cb4:	movw	r0, #45392	; 0xb150
   12cb8:	mov	r4, #0
   12cbc:	mov	r9, #1
   12cc0:	mov	sl, r5
   12cc4:	mov	r7, #0
   12cc8:	movt	r0, #2
   12ccc:	ldr	r6, [r0]
   12cd0:	b	12c70 <__assert_fail@plt+0x155c>
   12cd4:	cmp	r8, sl
   12cd8:	beq	12c24 <__assert_fail@plt+0x1510>
   12cdc:	sub	r2, r8, sl
   12ce0:	and	r0, r9, #1
   12ce4:	mov	r1, sl
   12ce8:	bl	1443c <__assert_fail@plt+0x2d28>
   12cec:	mov	r9, #0
   12cf0:	b	12c24 <__assert_fail@plt+0x1510>
   12cf4:	mov	r0, #0
   12cf8:	mov	r1, r9
   12cfc:	str	r0, [sp, #8]
   12d00:	str	r0, [sp, #12]
   12d04:	mvn	r0, #0
   12d08:	str	r0, [sp]
   12d0c:	mov	r0, sl
   12d10:	b	13624 <__assert_fail@plt+0x1f10>
   12d14:	ldr	r2, [sp, #80]	; 0x50
   12d18:	mov	r6, #0
   12d1c:	mov	r5, #0
   12d20:	mov	r7, #0
   12d24:	mvn	r0, r2
   12d28:	str	r0, [sp, #48]	; 0x30
   12d2c:	mov	r0, #0
   12d30:	str	r0, [sp, #64]	; 0x40
   12d34:	mov	r0, #0
   12d38:	str	r0, [sp, #60]	; 0x3c
   12d3c:	mov	r0, #0
   12d40:	str	r0, [sp, #92]	; 0x5c
   12d44:	ldr	r8, [sp, #88]	; 0x58
   12d48:	mov	r0, #0
   12d4c:	mov	r1, r8
   12d50:	bl	17220 <__assert_fail@plt+0x5b0c>
   12d54:	cmp	r0, #0
   12d58:	beq	1305c <__assert_fail@plt+0x1948>
   12d5c:	cmn	r0, #1
   12d60:	mov	r3, r0
   12d64:	str	r0, [sp, #44]	; 0x2c
   12d68:	bne	12da4 <__assert_fail@plt+0x1690>
   12d6c:	b	13bac <__assert_fail@plt+0x2498>
   12d70:	mov	r3, sl
   12d74:	ldr	sl, [sp, #96]	; 0x60
   12d78:	ldr	r5, [sp, #76]	; 0x4c
   12d7c:	cmp	r6, #0
   12d80:	ldr	r0, [sp, #92]	; 0x5c
   12d84:	movwne	r0, #0
   12d88:	movwne	r7, #0
   12d8c:	cmp	r3, #0
   12d90:	str	r0, [sp, #92]	; 0x5c
   12d94:	clz	r0, r6
   12d98:	lsr	r0, r0, #5
   12d9c:	and	r6, r4, r0
   12da0:	beq	1304c <__assert_fail@plt+0x1938>
   12da4:	ldr	r0, [sp, #92]	; 0x5c
   12da8:	ldr	r1, [sp, #100]	; 0x64
   12dac:	subs	r0, sl, r0
   12db0:	mov	sl, r3
   12db4:	sbc	r1, r1, r7
   12db8:	subs	r2, r0, r5
   12dbc:	sbc	r1, r1, #0
   12dc0:	subs	r0, r3, r2
   12dc4:	mov	r9, r2
   12dc8:	str	r2, [sp, #72]	; 0x48
   12dcc:	rscs	r0, r1, #0
   12dd0:	mov	r0, #0
   12dd4:	str	r1, [sp, #68]	; 0x44
   12dd8:	add	r1, r8, r2
   12ddc:	movwcc	r0, #1
   12de0:	sub	r1, r1, #1
   12de4:	cmp	r0, #0
   12de8:	movw	r0, #45392	; 0xb150
   12dec:	movt	r0, #2
   12df0:	movwne	r1, #0
   12df4:	movne	r2, r3
   12df8:	movwne	r9, #0
   12dfc:	str	r1, [sp, #84]	; 0x54
   12e00:	ldr	r1, [r0]
   12e04:	mov	r0, r8
   12e08:	bl	115b8 <memrchr@plt>
   12e0c:	mov	r4, r0
   12e10:	cmp	r5, #0
   12e14:	beq	12eb8 <__assert_fail@plt+0x17a4>
   12e18:	ldr	r0, [sp, #92]	; 0x5c
   12e1c:	orrs	r0, r0, r7
   12e20:	beq	12e2c <__assert_fail@plt+0x1718>
   12e24:	cmp	r4, #0
   12e28:	beq	12e98 <__assert_fail@plt+0x1784>
   12e2c:	str	r8, [sp, #56]	; 0x38
   12e30:	ldr	r8, [sp, #60]	; 0x3c
   12e34:	clz	r0, r0
   12e38:	mov	r2, r5
   12e3c:	str	r6, [sp, #52]	; 0x34
   12e40:	lsr	r0, r0, #5
   12e44:	mov	r1, r8
   12e48:	bl	1443c <__assert_fail@plt+0x2d28>
   12e4c:	ldr	r0, [sp, #92]	; 0x5c
   12e50:	ldr	r6, [sp, #80]	; 0x50
   12e54:	adds	r0, r0, r5
   12e58:	adc	r7, r7, #0
   12e5c:	cmp	r5, r6
   12e60:	str	r0, [sp, #92]	; 0x5c
   12e64:	str	r7, [sp, #76]	; 0x4c
   12e68:	bls	12e7c <__assert_fail@plt+0x1768>
   12e6c:	mov	r0, r8
   12e70:	mov	r1, r6
   12e74:	bl	17cb8 <__assert_fail@plt+0x65a4>
   12e78:	str	r0, [sp, #60]	; 0x3c
   12e7c:	str	r6, [sp, #64]	; 0x40
   12e80:	ldr	r8, [sp, #56]	; 0x38
   12e84:	ldr	r6, [sp, #52]	; 0x34
   12e88:	cmp	r4, #0
   12e8c:	bne	12ec4 <__assert_fail@plt+0x17b0>
   12e90:	ldr	r7, [sp, #76]	; 0x4c
   12e94:	mov	r5, #0
   12e98:	tst	r6, #1
   12e9c:	ldr	r6, [sp, #84]	; 0x54
   12ea0:	mov	r4, #1
   12ea4:	mov	r1, sl
   12ea8:	str	r5, [sp, #76]	; 0x4c
   12eac:	beq	12f30 <__assert_fail@plt+0x181c>
   12eb0:	mov	sl, r1
   12eb4:	b	12f88 <__assert_fail@plt+0x1874>
   12eb8:	str	r7, [sp, #76]	; 0x4c
   12ebc:	cmp	r4, #0
   12ec0:	beq	12e90 <__assert_fail@plt+0x177c>
   12ec4:	sub	r0, r4, r8
   12ec8:	mov	r1, r8
   12ecc:	ldr	r7, [sp, #92]	; 0x5c
   12ed0:	ldr	r8, [sp, #76]	; 0x4c
   12ed4:	add	r5, r0, #1
   12ed8:	mov	r2, r5
   12edc:	orr	r0, r7, r8
   12ee0:	clz	r0, r0
   12ee4:	lsr	r0, r0, #5
   12ee8:	bl	1443c <__assert_fail@plt+0x2d28>
   12eec:	ldr	r2, [sp, #72]	; 0x48
   12ef0:	ldr	r3, [sp, #68]	; 0x44
   12ef4:	ldr	r6, [sp, #84]	; 0x54
   12ef8:	mov	r1, sl
   12efc:	subs	r0, sl, r2
   12f00:	sub	sl, sl, r5
   12f04:	rscs	r0, r3, #0
   12f08:	mov	r0, #0
   12f0c:	subcs	r9, r9, r5
   12f10:	adds	r7, r7, r5
   12f14:	str	r0, [sp, #76]	; 0x4c
   12f18:	str	r7, [sp, #92]	; 0x5c
   12f1c:	mov	r7, r8
   12f20:	adc	r7, r8, #0
   12f24:	add	r8, r4, #1
   12f28:	mov	r4, #1
   12f2c:	b	12f90 <__assert_fail@plt+0x187c>
   12f30:	mov	r5, r8
   12f34:	ldr	r8, [sp, #92]	; 0x5c
   12f38:	cmp	r6, #0
   12f3c:	mov	r4, r1
   12f40:	movne	r4, r9
   12f44:	mov	r1, r5
   12f48:	mov	r2, r4
   12f4c:	orr	r0, r8, r7
   12f50:	clz	r0, r0
   12f54:	lsr	r0, r0, #5
   12f58:	bl	1443c <__assert_fail@plt+0x2d28>
   12f5c:	ldr	r6, [sp, #84]	; 0x54
   12f60:	adds	r8, r8, r4
   12f64:	mov	r1, sl
   12f68:	add	r5, r5, r4
   12f6c:	adc	r7, r7, #0
   12f70:	sub	sl, r1, r4
   12f74:	str	r8, [sp, #92]	; 0x5c
   12f78:	mov	r8, r5
   12f7c:	mov	r4, #0
   12f80:	cmp	r6, #0
   12f84:	movwne	r9, #0
   12f88:	ldr	r2, [sp, #72]	; 0x48
   12f8c:	ldr	r3, [sp, #68]	; 0x44
   12f90:	subs	r0, r1, r2
   12f94:	mov	r1, sl
   12f98:	mov	r2, r9
   12f9c:	rscs	r0, r3, #0
   12fa0:	mov	r0, #0
   12fa4:	mov	r3, r6
   12fa8:	movwcc	r0, #1
   12fac:	cmp	sl, #0
   12fb0:	movwne	r1, #1
   12fb4:	cmp	r9, #0
   12fb8:	movwne	r2, #1
   12fbc:	cmp	r6, #0
   12fc0:	movwne	r3, #1
   12fc4:	tst	r3, r2
   12fc8:	andseq	r0, r0, r1
   12fcc:	beq	12d70 <__assert_fail@plt+0x165c>
   12fd0:	ldr	r0, [sp, #64]	; 0x40
   12fd4:	ldr	r1, [sp, #76]	; 0x4c
   12fd8:	cmp	r6, #0
   12fdc:	moveq	r9, sl
   12fe0:	sub	r0, r0, r1
   12fe4:	cmp	r0, r9
   12fe8:	bcs	13018 <__assert_fail@plt+0x1904>
   12fec:	ldr	r0, [sp, #48]	; 0x30
   12ff0:	ldr	r1, [sp, #64]	; 0x40
   12ff4:	cmp	r1, r0
   12ff8:	bhi	13d1c <__assert_fail@plt+0x2608>
   12ffc:	ldr	r0, [sp, #80]	; 0x50
   13000:	ldr	r1, [sp, #64]	; 0x40
   13004:	add	r1, r1, r0
   13008:	ldr	r0, [sp, #60]	; 0x3c
   1300c:	str	r1, [sp, #64]	; 0x40
   13010:	bl	17cb8 <__assert_fail@plt+0x65a4>
   13014:	b	1301c <__assert_fail@plt+0x1908>
   13018:	ldr	r0, [sp, #60]	; 0x3c
   1301c:	ldr	r5, [sp, #76]	; 0x4c
   13020:	str	r0, [sp, #60]	; 0x3c
   13024:	mov	r1, r8
   13028:	mov	r2, r9
   1302c:	add	r0, r0, r5
   13030:	bl	11408 <memcpy@plt>
   13034:	sub	r3, sl, r9
   13038:	ldr	r6, [sp, #84]	; 0x54
   1303c:	ldr	sl, [sp, #96]	; 0x60
   13040:	add	r8, r8, r9
   13044:	add	r5, r9, r5
   13048:	b	12d7c <__assert_fail@plt+0x1668>
   1304c:	ldr	r0, [sp, #44]	; 0x2c
   13050:	ldr	r2, [sp, #80]	; 0x50
   13054:	cmp	r0, #0
   13058:	bne	12d44 <__assert_fail@plt+0x1630>
   1305c:	ldr	r4, [sp, #60]	; 0x3c
   13060:	cmp	r5, #0
   13064:	beq	13084 <__assert_fail@plt+0x1970>
   13068:	ldr	r0, [sp, #92]	; 0x5c
   1306c:	mov	r1, r4
   13070:	mov	r2, r5
   13074:	orr	r0, r0, r7
   13078:	clz	r0, r0
   1307c:	lsr	r0, r0, #5
   13080:	bl	1443c <__assert_fail@plt+0x2d28>
   13084:	mov	r0, r4
   13088:	bl	152dc <__assert_fail@plt+0x3bc8>
   1308c:	b	13b00 <__assert_fail@plt+0x23ec>
   13090:	subs	r7, sl, #1
   13094:	ldr	r1, [sp, #48]	; 0x30
   13098:	ldr	r0, [sp, #56]	; 0x38
   1309c:	sbc	r3, r9, #0
   130a0:	subs	r2, sl, r5
   130a4:	ldr	r2, [sp, #72]	; 0x48
   130a8:	sbcs	r2, r9, r2
   130ac:	bcc	13ee0 <__assert_fail@plt+0x27cc>
   130b0:	subs	r2, r7, r0
   130b4:	sbcs	r2, r3, r1
   130b8:	bcs	13ee0 <__assert_fail@plt+0x27cc>
   130bc:	mov	r2, sl
   130c0:	mov	r3, r9
   130c4:	bl	194b8 <__assert_fail@plt+0x7da4>
   130c8:	subs	r5, r0, #1
   130cc:	mov	r9, r1
   130d0:	ldr	r2, [sp, #72]	; 0x48
   130d4:	mov	r8, r0
   130d8:	mov	sl, #0
   130dc:	sbc	lr, r1, #0
   130e0:	ldr	r1, [sp, #68]	; 0x44
   130e4:	subs	r0, r1, #2
   130e8:	sbcs	r0, r2, #0
   130ec:	bcc	1321c <__assert_fail@plt+0x1b08>
   130f0:	subs	r3, r1, #1
   130f4:	umull	r0, r1, r8, r3
   130f8:	sbc	r2, r2, #0
   130fc:	str	r3, [sp, #40]	; 0x28
   13100:	str	r2, [sp, #84]	; 0x54
   13104:	mla	r1, r8, r2, r1
   13108:	mla	r1, r9, r3, r1
   1310c:	subs	r7, r0, #1
   13110:	sbc	sl, r1, #0
   13114:	subs	r0, r7, r6
   13118:	sbcs	r0, sl, #0
   1311c:	bge	13718 <__assert_fail@plt+0x2004>
   13120:	ldr	r0, [sp, #88]	; 0x58
   13124:	sub	r6, r6, r7
   13128:	mov	r2, r6
   1312c:	add	r1, r0, r7
   13130:	bl	113e4 <memmove@plt>
   13134:	ldr	r4, [sp, #40]	; 0x28
   13138:	mov	ip, r7
   1313c:	mov	r5, r7
   13140:	mov	lr, sl
   13144:	mov	r7, sl
   13148:	mov	sl, #0
   1314c:	b	13754 <__assert_fail@plt+0x2040>
   13150:	ldr	r0, [sp, #76]	; 0x4c
   13154:	cmp	r0, #0
   13158:	beq	13234 <__assert_fail@plt+0x1b20>
   1315c:	b	13290 <__assert_fail@plt+0x1b7c>
   13160:	ldr	r0, [sp, #76]	; 0x4c
   13164:	cmp	r0, #0
   13168:	ldr	r0, [sp, #72]	; 0x48
   1316c:	beq	13604 <__assert_fail@plt+0x1ef0>
   13170:	subs	r1, r5, #1
   13174:	sbc	r2, r0, #0
   13178:	subs	r0, r1, sl
   1317c:	str	r1, [sp, #100]	; 0x64
   13180:	ldr	r1, [sp, #48]	; 0x30
   13184:	mov	r0, r2
   13188:	sbcs	r0, r2, r9
   1318c:	ldr	r0, [sp, #56]	; 0x38
   13190:	str	r2, [sp, #92]	; 0x5c
   13194:	bcs	13f00 <__assert_fail@plt+0x27ec>
   13198:	subs	r2, r0, sl
   1319c:	sbcs	r2, r1, r9
   131a0:	bcc	13f00 <__assert_fail@plt+0x27ec>
   131a4:	mov	r2, sl
   131a8:	mov	r3, r9
   131ac:	str	r1, [sp, #48]	; 0x30
   131b0:	str	r0, [sp, #56]	; 0x38
   131b4:	bl	194b8 <__assert_fail@plt+0x7da4>
   131b8:	ldr	r5, [sp, #68]	; 0x44
   131bc:	ldr	r4, [sp, #72]	; 0x48
   131c0:	umull	r8, r2, r0, r5
   131c4:	eor	r3, r5, sl
   131c8:	eor	r7, r4, r9
   131cc:	ldr	sl, [sp, #48]	; 0x30
   131d0:	orrs	r3, r3, r7
   131d4:	ldr	r3, [sp, #100]	; 0x64
   131d8:	mla	r2, r0, r4, r2
   131dc:	mlane	sl, r1, r5, r2
   131e0:	ldr	r5, [sp, #92]	; 0x5c
   131e4:	umull	r7, r2, r0, r3
   131e8:	mla	r0, r0, r5, r2
   131ec:	mla	r5, r1, r3, r0
   131f0:	ldr	r0, [sp, #56]	; 0x38
   131f4:	moveq	r8, r0
   131f8:	subs	r0, r7, r6
   131fc:	sbcs	r0, r5, #0
   13200:	bge	13634 <__assert_fail@plt+0x1f20>
   13204:	ldr	r0, [sp, #88]	; 0x58
   13208:	sub	r4, r6, r7
   1320c:	mov	r2, r4
   13210:	add	r1, r0, r7
   13214:	bl	113e4 <memmove@plt>
   13218:	b	13658 <__assert_fail@plt+0x1f44>
   1321c:	mov	r0, #0
   13220:	mov	r4, #1
   13224:	mov	ip, #0
   13228:	mov	r7, #0
   1322c:	str	r0, [sp, #84]	; 0x54
   13230:	b	13754 <__assert_fail@plt+0x2040>
   13234:	cmp	r9, #0
   13238:	bne	13d1c <__assert_fail@plt+0x2608>
   1323c:	mov	r0, sl
   13240:	mov	r1, #16
   13244:	bl	17d40 <__assert_fail@plt+0x662c>
   13248:	mov	r5, r0
   1324c:	mov	r4, #0
   13250:	mvn	r8, #0
   13254:	mov	r6, #0
   13258:	bl	14554 <__assert_fail@plt+0x2e40>
   1325c:	ldr	r0, [r7]
   13260:	bl	18174 <__assert_fail@plt+0x6a60>
   13264:	mov	r1, r5
   13268:	str	r0, [r1, r6, lsl #4]!
   1326c:	add	r6, r6, #1
   13270:	subs	r0, r6, sl
   13274:	rscs	r0, r9, #0
   13278:	str	r8, [r1, #4]
   1327c:	str	r4, [r1, #8]
   13280:	str	r4, [r1, #12]
   13284:	bcc	13258 <__assert_fail@plt+0x1b44>
   13288:	str	r5, [sp, #48]	; 0x30
   1328c:	ldr	r5, [sp, #68]	; 0x44
   13290:	mov	r0, #1
   13294:	str	r0, [sp, #92]	; 0x5c
   13298:	mov	r0, #0
   1329c:	str	r0, [sp, #84]	; 0x54
   132a0:	mov	r0, #0
   132a4:	str	r0, [sp, #64]	; 0x40
   132a8:	mov	r0, #0
   132ac:	str	r0, [sp, #56]	; 0x38
   132b0:	mov	r0, #0
   132b4:	str	r0, [sp, #52]	; 0x34
   132b8:	mov	r0, #0
   132bc:	str	r0, [sp, #40]	; 0x28
   132c0:	ldr	r1, [sp, #88]	; 0x58
   132c4:	ldr	r2, [sp, #80]	; 0x50
   132c8:	mov	r0, #0
   132cc:	bl	17220 <__assert_fail@plt+0x5b0c>
   132d0:	cmp	r0, #0
   132d4:	beq	13564 <__assert_fail@plt+0x1e50>
   132d8:	cmn	r0, #1
   132dc:	beq	13bac <__assert_fail@plt+0x2498>
   132e0:	ldr	r8, [sp, #88]	; 0x58
   132e4:	str	sl, [sp, #96]	; 0x60
   132e8:	add	r6, r8, r0
   132ec:	str	r6, [sp, #60]	; 0x3c
   132f0:	b	13308 <__assert_fail@plt+0x1bf4>
   132f4:	ldr	r5, [sp, #68]	; 0x44
   132f8:	str	r2, [sp, #52]	; 0x34
   132fc:	ldr	r6, [sp, #60]	; 0x3c
   13300:	cmp	r8, r6
   13304:	beq	132c0 <__assert_fail@plt+0x1bac>
   13308:	movw	r0, #45392	; 0xb150
   1330c:	sub	r2, r6, r8
   13310:	mov	r7, r8
   13314:	movt	r0, #2
   13318:	ldr	r1, [r0]
   1331c:	mov	r0, r8
   13320:	bl	11630 <memchr@plt>
   13324:	cmp	r0, #0
   13328:	mov	r8, r6
   1332c:	mov	r4, r0
   13330:	addne	r8, r0, #1
   13334:	ldr	r0, [sp, #76]	; 0x4c
   13338:	sub	r9, r8, r7
   1333c:	cmp	r0, #0
   13340:	beq	13390 <__assert_fail@plt+0x1c7c>
   13344:	ldr	r0, [sp, #92]	; 0x5c
   13348:	ldr	r1, [sp, #72]	; 0x48
   1334c:	ldr	r2, [sp, #84]	; 0x54
   13350:	eor	r0, r0, r5
   13354:	eor	r1, r2, r1
   13358:	orrs	r0, r0, r1
   1335c:	bne	13518 <__assert_fail@plt+0x1e04>
   13360:	movw	r0, #45952	; 0xb380
   13364:	movt	r0, #2
   13368:	ldrb	r0, [r0]
   1336c:	cmp	r0, #1
   13370:	bne	134f4 <__assert_fail@plt+0x1de0>
   13374:	mov	r0, #1
   13378:	mov	r1, r7
   1337c:	mov	r2, r9
   13380:	bl	153ac <__assert_fail@plt+0x3c98>
   13384:	cmp	r0, r9
   13388:	beq	13518 <__assert_fail@plt+0x1e04>
   1338c:	b	13db0 <__assert_fail@plt+0x269c>
   13390:	ldr	r5, [sp, #48]	; 0x30
   13394:	ldr	r6, [sp, #64]	; 0x40
   13398:	mov	r2, sl
   1339c:	mov	r0, r5
   133a0:	mov	r1, r6
   133a4:	bl	14e38 <__assert_fail@plt+0x3724>
   133a8:	mov	sl, r0
   133ac:	movw	r0, #45952	; 0xb380
   133b0:	movt	r0, #2
   133b4:	ldrb	r0, [r0]
   133b8:	cmp	r0, #1
   133bc:	bne	133e0 <__assert_fail@plt+0x1ccc>
   133c0:	add	r0, r5, r6, lsl #4
   133c4:	mov	r1, r7
   133c8:	mov	r2, r9
   133cc:	ldr	r0, [r0, #4]
   133d0:	bl	153ac <__assert_fail@plt+0x3c98>
   133d4:	cmp	r0, r9
   133d8:	bne	13400 <__assert_fail@plt+0x1cec>
   133dc:	b	13424 <__assert_fail@plt+0x1d10>
   133e0:	add	r0, r5, r6, lsl #4
   133e4:	mov	r1, r9
   133e8:	mov	r2, #1
   133ec:	ldr	r3, [r0, #8]
   133f0:	mov	r0, r7
   133f4:	bl	11438 <fwrite_unlocked@plt>
   133f8:	cmp	r0, #1
   133fc:	beq	13424 <__assert_fail@plt+0x1d10>
   13400:	bl	115d0 <__errno_location@plt>
   13404:	ldr	r7, [r0]
   13408:	cmp	r7, #32
   1340c:	bne	13d20 <__assert_fail@plt+0x260c>
   13410:	movw	r0, #45964	; 0xb38c
   13414:	movt	r0, #2
   13418:	ldr	r0, [r0]
   1341c:	cmp	r0, #0
   13420:	beq	13d20 <__assert_fail@plt+0x260c>
   13424:	ldr	r6, [sp, #56]	; 0x38
   13428:	orr	r6, r6, sl
   1342c:	bl	115d0 <__errno_location@plt>
   13430:	mov	r1, r0
   13434:	ldr	r0, [r0]
   13438:	ldr	sl, [sp, #96]	; 0x60
   1343c:	str	r6, [sp, #56]	; 0x38
   13440:	subs	r7, r0, #32
   13444:	movw	r0, #45964	; 0xb38c
   13448:	movt	r0, #2
   1344c:	movwne	r7, #1
   13450:	tst	r6, #1
   13454:	ldr	r5, [r0]
   13458:	beq	13498 <__assert_fail@plt+0x1d84>
   1345c:	str	r1, [sp, #44]	; 0x2c
   13460:	ldr	r0, [sp, #48]	; 0x30
   13464:	ldr	r1, [sp, #64]	; 0x40
   13468:	mov	r9, sl
   1346c:	add	sl, r0, r1, lsl #4
   13470:	mov	r6, sl
   13474:	ldr	r0, [r6, #8]!
   13478:	bl	15140 <__assert_fail@plt+0x3a2c>
   1347c:	cmp	r0, #0
   13480:	bne	13d88 <__assert_fail@plt+0x2674>
   13484:	mov	r0, #0
   13488:	str	r0, [r6]
   1348c:	mvn	r0, #1
   13490:	str	r0, [sl, #4]
   13494:	mov	sl, r9
   13498:	ldr	r2, [sp, #52]	; 0x34
   1349c:	clz	r0, r5
   134a0:	cmp	r4, #0
   134a4:	lsr	r0, r0, #5
   134a8:	orr	r0, r7, r0
   134ac:	orr	r2, r2, r0
   134b0:	beq	132f4 <__assert_fail@plt+0x1be0>
   134b4:	ldr	r0, [sp, #64]	; 0x40
   134b8:	ldr	r1, [sp, #100]	; 0x64
   134bc:	ldr	r5, [sp, #68]	; 0x44
   134c0:	add	r6, r0, #1
   134c4:	eor	r0, sl, r6
   134c8:	orrs	r0, r0, r1
   134cc:	bne	13558 <__assert_fail@plt+0x1e44>
   134d0:	mov	r0, #1
   134d4:	tst	r2, #1
   134d8:	str	r0, [sp, #40]	; 0x28
   134dc:	mov	r0, #0
   134e0:	str	r0, [sp, #64]	; 0x40
   134e4:	mov	r0, #0
   134e8:	str	r0, [sp, #52]	; 0x34
   134ec:	bne	132fc <__assert_fail@plt+0x1be8>
   134f0:	b	13568 <__assert_fail@plt+0x1e54>
   134f4:	movw	r0, #45924	; 0xb364
   134f8:	mov	r1, r9
   134fc:	mov	r2, #1
   13500:	movt	r0, #2
   13504:	ldr	r3, [r0]
   13508:	mov	r0, r7
   1350c:	bl	11438 <fwrite_unlocked@plt>
   13510:	cmp	r0, #1
   13514:	bne	13da0 <__assert_fail@plt+0x268c>
   13518:	cmp	r4, #0
   1351c:	beq	132fc <__assert_fail@plt+0x1be8>
   13520:	ldr	r2, [sp, #92]	; 0x5c
   13524:	ldr	r1, [sp, #100]	; 0x64
   13528:	ldr	r3, [sp, #84]	; 0x54
   1352c:	eor	r0, r2, sl
   13530:	eor	r1, r3, r1
   13534:	adds	r2, r2, #1
   13538:	orr	r0, r0, r1
   1353c:	adc	r3, r3, #0
   13540:	cmp	r0, #0
   13544:	moveq	r3, r0
   13548:	movweq	r2, #1
   1354c:	str	r3, [sp, #84]	; 0x54
   13550:	str	r2, [sp, #92]	; 0x5c
   13554:	b	132fc <__assert_fail@plt+0x1be8>
   13558:	str	r2, [sp, #52]	; 0x34
   1355c:	str	r6, [sp, #64]	; 0x40
   13560:	b	132fc <__assert_fail@plt+0x1be8>
   13564:	ldr	r6, [sp, #64]	; 0x40
   13568:	ldr	r0, [sp, #76]	; 0x4c
   1356c:	ldr	r5, [sp, #48]	; 0x30
   13570:	cmp	r0, #0
   13574:	bne	13b00 <__assert_fail@plt+0x23ec>
   13578:	ldr	r0, [sp, #40]	; 0x28
   1357c:	mov	r4, #0
   13580:	mvn	r8, #1
   13584:	tst	r0, #1
   13588:	movne	r6, sl
   1358c:	cmp	r4, r6
   13590:	bcc	135dc <__assert_fail@plt+0x1ec8>
   13594:	b	135b8 <__assert_fail@plt+0x1ea4>
   13598:	add	r4, r4, #1
   1359c:	str	r8, [r7, #4]
   135a0:	subs	r0, r4, sl
   135a4:	ldr	r0, [sp, #100]	; 0x64
   135a8:	rscs	r0, r0, #0
   135ac:	bcs	13b00 <__assert_fail@plt+0x23ec>
   135b0:	cmp	r4, r6
   135b4:	bcc	135dc <__assert_fail@plt+0x1ec8>
   135b8:	movw	r0, #45960	; 0xb388
   135bc:	movt	r0, #2
   135c0:	ldrb	r0, [r0]
   135c4:	cmp	r0, #0
   135c8:	bne	135dc <__assert_fail@plt+0x1ec8>
   135cc:	mov	r0, r5
   135d0:	mov	r1, r4
   135d4:	mov	r2, sl
   135d8:	bl	14e38 <__assert_fail@plt+0x3724>
   135dc:	add	r7, r5, r4, lsl #4
   135e0:	ldr	r1, [r7, #4]
   135e4:	cmp	r1, #0
   135e8:	bmi	13598 <__assert_fail@plt+0x1e84>
   135ec:	mov	r2, r5
   135f0:	ldr	r3, [r2, r4, lsl #4]!
   135f4:	ldr	r0, [r2, #8]
   135f8:	ldr	r2, [r2, #12]
   135fc:	bl	141b0 <__assert_fail@plt+0x2a9c>
   13600:	b	13598 <__assert_fail@plt+0x1e84>
   13604:	ldr	r0, [sp, #56]	; 0x38
   13608:	ldr	r1, [sp, #48]	; 0x30
   1360c:	mov	r2, sl
   13610:	mov	r3, r9
   13614:	bl	194b8 <__assert_fail@plt+0x7da4>
   13618:	str	sl, [sp, #8]
   1361c:	str	r9, [sp, #12]
   13620:	str	r6, [sp]
   13624:	ldr	r2, [sp, #88]	; 0x58
   13628:	ldr	r3, [sp, #80]	; 0x50
   1362c:	bl	13f30 <__assert_fail@plt+0x281c>
   13630:	b	13b00 <__assert_fail@plt+0x23ec>
   13634:	mov	r0, #1
   13638:	subs	r2, r7, r6
   1363c:	str	r0, [sp]
   13640:	sbc	r3, r5, #0
   13644:	mov	r0, #0
   13648:	bl	114b0 <lseek64@plt>
   1364c:	mvn	r4, #0
   13650:	cmn	r1, #1
   13654:	ble	13bac <__assert_fail@plt+0x2498>
   13658:	subs	r0, r7, r8
   1365c:	sbcs	r0, r5, sl
   13660:	bge	13b00 <__assert_fail@plt+0x23ec>
   13664:	mov	r9, sl
   13668:	cmn	r4, #1
   1366c:	bne	136b0 <__assert_fail@plt+0x1f9c>
   13670:	b	13694 <__assert_fail@plt+0x1f80>
   13674:	adds	r7, r7, r6
   13678:	mvn	r4, #0
   1367c:	adc	r5, r5, #0
   13680:	subs	r0, r7, r8
   13684:	sbcs	r0, r5, sl
   13688:	bge	13b00 <__assert_fail@plt+0x23ec>
   1368c:	cmn	r4, #1
   13690:	bne	136b0 <__assert_fail@plt+0x1f9c>
   13694:	ldr	r1, [sp, #88]	; 0x58
   13698:	ldr	r2, [sp, #80]	; 0x50
   1369c:	mov	r0, #0
   136a0:	bl	17220 <__assert_fail@plt+0x5b0c>
   136a4:	mov	r4, r0
   136a8:	cmn	r0, #1
   136ac:	beq	13bac <__assert_fail@plt+0x2498>
   136b0:	cmp	r4, #0
   136b4:	beq	13b00 <__assert_fail@plt+0x23ec>
   136b8:	subs	r6, r8, r7
   136bc:	mov	sl, r9
   136c0:	sbc	r0, r9, r5
   136c4:	subs	r1, r4, r6
   136c8:	ldr	r1, [sp, #88]	; 0x58
   136cc:	rscs	r0, r0, #0
   136d0:	mov	r0, #1
   136d4:	movlt	r6, r4
   136d8:	mov	r2, r6
   136dc:	bl	153ac <__assert_fail@plt+0x3c98>
   136e0:	cmp	r0, r6
   136e4:	beq	13674 <__assert_fail@plt+0x1f60>
   136e8:	bl	115d0 <__errno_location@plt>
   136ec:	ldr	r4, [r0]
   136f0:	cmp	r4, #32
   136f4:	bne	1370c <__assert_fail@plt+0x1ff8>
   136f8:	movw	r0, #45964	; 0xb38c
   136fc:	movt	r0, #2
   13700:	ldr	r0, [r0]
   13704:	cmp	r0, #0
   13708:	bne	13674 <__assert_fail@plt+0x1f60>
   1370c:	movw	r2, #43273	; 0xa909
   13710:	movt	r2, #1
   13714:	b	13bc0 <__assert_fail@plt+0x24ac>
   13718:	mov	r0, #1
   1371c:	subs	r2, r7, r6
   13720:	str	r0, [sp]
   13724:	sbc	r3, sl, #0
   13728:	mov	r0, #0
   1372c:	bl	114b0 <lseek64@plt>
   13730:	ldr	r4, [sp, #40]	; 0x28
   13734:	mov	ip, r7
   13738:	mov	r5, r7
   1373c:	mvn	r6, #0
   13740:	cmn	r1, #1
   13744:	mov	lr, sl
   13748:	mov	r7, sl
   1374c:	mov	sl, #0
   13750:	ble	13bac <__assert_fail@plt+0x2498>
   13754:	ldr	r2, [sp, #56]	; 0x38
   13758:	ldr	r1, [sp, #48]	; 0x30
   1375c:	subs	r0, ip, r2
   13760:	sbcs	r0, r7, r1
   13764:	bge	13ab4 <__assert_fail@plt+0x23a0>
   13768:	subs	r0, r2, #1
   1376c:	mov	sl, #0
   13770:	mov	r3, #0
   13774:	str	r9, [sp, #36]	; 0x24
   13778:	str	r0, [sp, #64]	; 0x40
   1377c:	sbc	r0, r1, #0
   13780:	str	r0, [sp, #60]	; 0x3c
   13784:	mov	r0, #1
   13788:	str	r0, [sp, #44]	; 0x2c
   1378c:	cmn	r6, #1
   13790:	bne	137d0 <__assert_fail@plt+0x20bc>
   13794:	ldr	r1, [sp, #88]	; 0x58
   13798:	ldr	r2, [sp, #80]	; 0x50
   1379c:	mov	r0, #0
   137a0:	str	sl, [sp, #52]	; 0x34
   137a4:	mov	r6, ip
   137a8:	str	r3, [sp, #92]	; 0x5c
   137ac:	mov	sl, lr
   137b0:	bl	17220 <__assert_fail@plt+0x5b0c>
   137b4:	mov	lr, sl
   137b8:	ldr	sl, [sp, #52]	; 0x34
   137bc:	ldr	r3, [sp, #92]	; 0x5c
   137c0:	mov	ip, r6
   137c4:	mov	r6, r0
   137c8:	cmn	r0, #1
   137cc:	beq	13bac <__assert_fail@plt+0x2498>
   137d0:	cmp	r6, #0
   137d4:	beq	13ab8 <__assert_fail@plt+0x23a4>
   137d8:	ldr	r0, [sp, #56]	; 0x38
   137dc:	str	r4, [sp, #40]	; 0x28
   137e0:	subs	r3, r0, ip
   137e4:	ldr	r0, [sp, #48]	; 0x30
   137e8:	sbc	r0, r0, r7
   137ec:	subs	r1, r6, r3
   137f0:	rscs	r0, r0, #0
   137f4:	movlt	r3, r6
   137f8:	cmp	r3, #0
   137fc:	beq	13a70 <__assert_fail@plt+0x235c>
   13800:	ldr	sl, [sp, #88]	; 0x58
   13804:	ldr	r6, [sp, #84]	; 0x54
   13808:	ldr	r4, [sp, #44]	; 0x2c
   1380c:	add	r0, sl, r3
   13810:	str	r0, [sp, #92]	; 0x5c
   13814:	mov	r0, #0
   13818:	str	r0, [sp, #20]
   1381c:	b	1383c <__assert_fail@plt+0x2128>
   13820:	ldr	sl, [sp, #52]	; 0x34
   13824:	ldr	r3, [sp, #28]
   13828:	ldr	r0, [sp, #32]
   1382c:	sub	r3, r3, r0
   13830:	ldr	r0, [sp, #92]	; 0x5c
   13834:	cmp	sl, r0
   13838:	beq	13a80 <__assert_fail@plt+0x236c>
   1383c:	subs	r0, r5, ip
   13840:	str	r4, [sp, #24]
   13844:	mov	r4, sl
   13848:	str	ip, [sp, #84]	; 0x54
   1384c:	mov	sl, lr
   13850:	str	r3, [sp, #28]
   13854:	sbc	r1, lr, r7
   13858:	rsbs	r2, r0, #0
   1385c:	rscs	r2, r1, #0
   13860:	mov	r2, #0
   13864:	movwlt	r2, #1
   13868:	cmp	r2, #0
   1386c:	moveq	r1, r2
   13870:	movne	r2, r0
   13874:	subs	r0, r3, r2
   13878:	rscs	r0, r1, #0
   1387c:	movw	r1, #45392	; 0xb150
   13880:	movt	r1, #2
   13884:	movlt	r2, r3
   13888:	add	r0, r4, r2
   1388c:	sub	r2, r3, r2
   13890:	ldr	r1, [r1]
   13894:	bl	11630 <memchr@plt>
   13898:	cmp	r0, #0
   1389c:	ldr	r1, [sp, #92]	; 0x5c
   138a0:	ldr	r3, [sp, #40]	; 0x28
   138a4:	addne	r1, r0, #1
   138a8:	movwne	r0, #1
   138ac:	sub	r2, r1, r4
   138b0:	str	r1, [sp, #52]	; 0x34
   138b4:	ldr	r1, [sp, #72]	; 0x48
   138b8:	str	r0, [sp, #44]	; 0x2c
   138bc:	ldr	r0, [sp, #68]	; 0x44
   138c0:	str	r2, [sp, #32]
   138c4:	eor	r0, r3, r0
   138c8:	eor	r1, r6, r1
   138cc:	orrs	r0, r0, r1
   138d0:	bne	138f4 <__assert_fail@plt+0x21e0>
   138d4:	mov	r0, #1
   138d8:	mov	r1, r4
   138dc:	bl	153ac <__assert_fail@plt+0x3c98>
   138e0:	ldr	r2, [sp, #32]
   138e4:	ldr	r3, [sp, #40]	; 0x28
   138e8:	cmp	r0, r2
   138ec:	beq	13918 <__assert_fail@plt+0x2204>
   138f0:	b	13db0 <__assert_fail@plt+0x269c>
   138f4:	ldr	r0, [sp, #76]	; 0x4c
   138f8:	cmp	r0, #0
   138fc:	bne	13918 <__assert_fail@plt+0x2204>
   13900:	ldr	r0, [sp, #24]
   13904:	mov	r1, r4
   13908:	and	r0, r0, #1
   1390c:	bl	1443c <__assert_fail@plt+0x2d28>
   13910:	ldr	r2, [sp, #32]
   13914:	ldr	r3, [sp, #40]	; 0x28
   13918:	ldr	ip, [sp, #84]	; 0x54
   1391c:	ldr	r4, [sp, #44]	; 0x2c
   13920:	mov	lr, sl
   13924:	adds	ip, ip, r2
   13928:	eor	r1, r4, #1
   1392c:	adc	r7, r7, #0
   13930:	subs	r0, r5, ip
   13934:	sbcs	r0, sl, r7
   13938:	mov	r0, #0
   1393c:	movwge	r0, #1
   13940:	tst	r0, r1
   13944:	bne	13820 <__assert_fail@plt+0x210c>
   13948:	ldr	r2, [sp, #96]	; 0x60
   1394c:	ldr	sl, [sp, #52]	; 0x34
   13950:	ldr	r0, [sp, #92]	; 0x5c
   13954:	cmp	sl, r0
   13958:	tsteq	r4, #1
   1395c:	beq	13a5c <__assert_fail@plt+0x2348>
   13960:	ldr	r0, [sp, #76]	; 0x4c
   13964:	adds	r3, r3, #1
   13968:	adc	r6, r6, #0
   1396c:	cmp	r0, #0
   13970:	beq	13988 <__assert_fail@plt+0x2274>
   13974:	ldr	r0, [sp, #68]	; 0x44
   13978:	subs	r0, r0, r3
   1397c:	ldr	r0, [sp, #72]	; 0x48
   13980:	sbcs	r0, r0, r6
   13984:	bcc	13b00 <__assert_fail@plt+0x23ec>
   13988:	ldr	r1, [sp, #100]	; 0x64
   1398c:	eor	r0, r3, r2
   13990:	adds	r5, r5, r8
   13994:	adc	lr, lr, r9
   13998:	eor	r1, r6, r1
   1399c:	orr	r0, r0, r1
   139a0:	ldr	r1, [sp, #76]	; 0x4c
   139a4:	cmp	r0, #0
   139a8:	ldr	r0, [sp, #60]	; 0x3c
   139ac:	moveq	lr, r0
   139b0:	ldr	r0, [sp, #64]	; 0x40
   139b4:	moveq	r5, r0
   139b8:	subs	r0, r5, ip
   139bc:	sbcs	r0, lr, r7
   139c0:	mov	r0, #0
   139c4:	movwlt	r0, #1
   139c8:	cmp	r1, #0
   139cc:	and	r0, r4, r0
   139d0:	bne	13a38 <__assert_fail@plt+0x2324>
   139d4:	subs	r1, r5, ip
   139d8:	sbcs	r1, lr, r7
   139dc:	bge	13a38 <__assert_fail@plt+0x2324>
   139e0:	mov	r0, #1
   139e4:	mov	r1, #0
   139e8:	mov	r2, #0
   139ec:	str	r6, [sp, #84]	; 0x54
   139f0:	mov	r9, r8
   139f4:	mov	sl, r5
   139f8:	mov	r5, r7
   139fc:	mov	r8, r3
   13a00:	mov	r7, ip
   13a04:	mov	r6, lr
   13a08:	bl	1443c <__assert_fail@plt+0x2d28>
   13a0c:	mov	lr, r6
   13a10:	mov	ip, r7
   13a14:	mov	r7, r5
   13a18:	mov	r5, sl
   13a1c:	mov	r3, r8
   13a20:	mov	r8, r9
   13a24:	ldr	r2, [sp, #96]	; 0x60
   13a28:	ldr	sl, [sp, #52]	; 0x34
   13a2c:	ldr	r9, [sp, #36]	; 0x24
   13a30:	ldr	r6, [sp, #84]	; 0x54
   13a34:	mov	r0, r4
   13a38:	subs	r1, r5, ip
   13a3c:	mov	r4, r0
   13a40:	sbcs	r1, lr, r7
   13a44:	blt	13950 <__assert_fail@plt+0x223c>
   13a48:	tst	r0, #1
   13a4c:	mov	r4, r0
   13a50:	bne	13950 <__assert_fail@plt+0x223c>
   13a54:	str	r3, [sp, #40]	; 0x28
   13a58:	b	13a68 <__assert_fail@plt+0x2354>
   13a5c:	mov	r0, #1
   13a60:	str	r3, [sp, #40]	; 0x28
   13a64:	str	r0, [sp, #20]
   13a68:	ldr	r4, [sp, #44]	; 0x2c
   13a6c:	b	13824 <__assert_fail@plt+0x2110>
   13a70:	ldr	r6, [sp, #84]	; 0x54
   13a74:	ldr	r4, [sp, #44]	; 0x2c
   13a78:	mov	r0, #0
   13a7c:	str	r0, [sp, #20]
   13a80:	ldr	r0, [sp, #20]
   13a84:	str	r4, [sp, #44]	; 0x2c
   13a88:	ldr	r4, [sp, #40]	; 0x28
   13a8c:	str	r6, [sp, #84]	; 0x54
   13a90:	mvn	r6, #0
   13a94:	mov	r3, #0
   13a98:	and	sl, r0, #1
   13a9c:	ldr	r0, [sp, #56]	; 0x38
   13aa0:	subs	r0, ip, r0
   13aa4:	ldr	r0, [sp, #48]	; 0x30
   13aa8:	sbcs	r0, r7, r0
   13aac:	blt	1378c <__assert_fail@plt+0x2078>
   13ab0:	b	13ab8 <__assert_fail@plt+0x23a4>
   13ab4:	mov	r3, #0
   13ab8:	ldr	r0, [sp, #84]	; 0x54
   13abc:	adds	r4, r4, sl
   13ac0:	ldr	r6, [sp, #96]	; 0x60
   13ac4:	adc	r5, r0, r3
   13ac8:	ldr	r0, [sp, #76]	; 0x4c
   13acc:	cmp	r0, #0
   13ad0:	bne	13b00 <__assert_fail@plt+0x23ec>
   13ad4:	subs	r0, r6, r4
   13ad8:	ldr	r0, [sp, #100]	; 0x64
   13adc:	sbcs	r0, r0, r5
   13ae0:	bcc	13b00 <__assert_fail@plt+0x23ec>
   13ae4:	mov	r0, #1
   13ae8:	mov	r1, #0
   13aec:	mov	r2, #0
   13af0:	bl	1443c <__assert_fail@plt+0x2d28>
   13af4:	adds	r4, r4, #1
   13af8:	adc	r5, r5, #0
   13afc:	b	13ad4 <__assert_fail@plt+0x23c0>
   13b00:	mov	r0, #0
   13b04:	bl	116fc <close@plt>
   13b08:	cmp	r0, #0
   13b0c:	bne	13bac <__assert_fail@plt+0x2498>
   13b10:	movw	r0, #46340	; 0xb504
   13b14:	movt	r0, #2
   13b18:	ldr	r3, [r0]
   13b1c:	movw	r0, #46336	; 0xb500
   13b20:	movt	r0, #2
   13b24:	ldr	r2, [r0]
   13b28:	movw	r0, #45400	; 0xb158
   13b2c:	movt	r0, #2
   13b30:	ldr	r1, [r0]
   13b34:	mov	r0, #0
   13b38:	bl	141b0 <__assert_fail@plt+0x2a9c>
   13b3c:	mov	r0, #0
   13b40:	sub	sp, fp, #28
   13b44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b48:	mov	r0, #1
   13b4c:	bl	11810 <__assert_fail@plt+0xfc>
   13b50:	movw	r0, #45404	; 0xb15c
   13b54:	movw	r2, #40955	; 0x9ffb
   13b58:	mov	r1, #0
   13b5c:	movw	r7, #40937	; 0x9fe9
   13b60:	movt	r0, #2
   13b64:	movt	r2, #1
   13b68:	str	r1, [sp, #8]
   13b6c:	movw	r1, #40406	; 0x9dd6
   13b70:	movt	r7, #1
   13b74:	movt	r1, #1
   13b78:	ldr	r3, [r0]
   13b7c:	movw	r0, #45924	; 0xb364
   13b80:	str	r2, [sp, #4]
   13b84:	movw	r2, #40923	; 0x9fdb
   13b88:	str	r7, [sp]
   13b8c:	movt	r0, #2
   13b90:	movt	r2, #1
   13b94:	ldr	r0, [r0]
   13b98:	bl	17a24 <__assert_fail@plt+0x6310>
   13b9c:	mov	r0, #0
   13ba0:	bl	11570 <exit@plt>
   13ba4:	mov	r0, #0
   13ba8:	bl	11810 <__assert_fail@plt+0xfc>
   13bac:	bl	115d0 <__errno_location@plt>
   13bb0:	ldr	r4, [r0]
   13bb4:	movw	r0, #45936	; 0xb370
   13bb8:	movt	r0, #2
   13bbc:	ldr	r2, [r0]
   13bc0:	mov	r0, #0
   13bc4:	mov	r1, #3
   13bc8:	bl	16e28 <__assert_fail@plt+0x5714>
   13bcc:	movw	r2, #42810	; 0xa73a
   13bd0:	mov	r3, r0
   13bd4:	mov	r0, #1
   13bd8:	mov	r1, r4
   13bdc:	movt	r2, #1
   13be0:	bl	114f8 <error@plt>
   13be4:	movw	r1, #40741	; 0x9f25
   13be8:	mov	r0, #0
   13bec:	mov	r2, #5
   13bf0:	movt	r1, #1
   13bf4:	bl	11444 <dcgettext@plt>
   13bf8:	mov	r6, r0
   13bfc:	add	r2, sp, #104	; 0x68
   13c00:	mov	r0, r5
   13c04:	mov	r1, r8
   13c08:	bl	15424 <__assert_fail@plt+0x3d10>
   13c0c:	mov	r3, r0
   13c10:	mov	r0, #1
   13c14:	mov	r1, #0
   13c18:	mov	r2, r6
   13c1c:	str	r4, [sp]
   13c20:	bl	114f8 <error@plt>
   13c24:	movw	r1, #40533	; 0x9e55
   13c28:	movt	r1, #1
   13c2c:	mov	r0, #0
   13c30:	mov	r2, #5
   13c34:	bl	11444 <dcgettext@plt>
   13c38:	mov	r2, r0
   13c3c:	mov	r0, #0
   13c40:	mov	r1, #0
   13c44:	bl	114f8 <error@plt>
   13c48:	mov	r0, #1
   13c4c:	bl	11810 <__assert_fail@plt+0xfc>
   13c50:	movw	r0, #40809	; 0x9f69
   13c54:	movw	r1, #40854	; 0x9f96
   13c58:	cmp	r4, #100	; 0x64
   13c5c:	movt	r0, #1
   13c60:	movt	r1, #1
   13c64:	moveq	r1, r0
   13c68:	b	13c74 <__assert_fail@plt+0x2560>
   13c6c:	movw	r1, #40485	; 0x9e25
   13c70:	movt	r1, #1
   13c74:	mov	r0, #0
   13c78:	mov	r2, #5
   13c7c:	bl	11444 <dcgettext@plt>
   13c80:	mov	r4, r0
   13c84:	movw	r0, #45928	; 0xb368
   13c88:	movt	r0, #2
   13c8c:	ldr	r0, [r0]
   13c90:	bl	170d4 <__assert_fail@plt+0x59c0>
   13c94:	mov	r3, r0
   13c98:	mov	r0, #0
   13c9c:	mov	r1, #0
   13ca0:	mov	r2, r4
   13ca4:	bl	114f8 <error@plt>
   13ca8:	mov	r0, #1
   13cac:	bl	11810 <__assert_fail@plt+0xfc>
   13cb0:	movw	r1, #40646	; 0x9ec6
   13cb4:	movt	r1, #1
   13cb8:	b	13d00 <__assert_fail@plt+0x25ec>
   13cbc:	movw	r1, #40672	; 0x9ee0
   13cc0:	mov	r0, #0
   13cc4:	mov	r2, #5
   13cc8:	movt	r1, #1
   13ccc:	bl	11444 <dcgettext@plt>
   13cd0:	mov	r4, r0
   13cd4:	movw	r0, #45928	; 0xb368
   13cd8:	movt	r0, #2
   13cdc:	ldr	r0, [r0]
   13ce0:	bl	170d4 <__assert_fail@plt+0x59c0>
   13ce4:	mov	r3, r0
   13ce8:	mov	r0, #1
   13cec:	mov	r1, #0
   13cf0:	mov	r2, r4
   13cf4:	bl	114f8 <error@plt>
   13cf8:	movw	r1, #40701	; 0x9efd
   13cfc:	movt	r1, #1
   13d00:	mov	r0, #0
   13d04:	mov	r2, #5
   13d08:	bl	11444 <dcgettext@plt>
   13d0c:	mov	r2, r0
   13d10:	mov	r0, #1
   13d14:	mov	r1, #0
   13d18:	bl	114f8 <error@plt>
   13d1c:	bl	181ac <__assert_fail@plt+0x6a98>
   13d20:	ldr	r0, [sp, #48]	; 0x30
   13d24:	ldr	r1, [sp, #64]	; 0x40
   13d28:	ldr	r2, [r0, r1, lsl #4]
   13d2c:	mov	r0, #0
   13d30:	mov	r1, #3
   13d34:	bl	16e28 <__assert_fail@plt+0x5714>
   13d38:	movw	r2, #42810	; 0xa73a
   13d3c:	mov	r3, r0
   13d40:	mov	r0, #1
   13d44:	mov	r1, r7
   13d48:	movt	r2, #1
   13d4c:	bl	114f8 <error@plt>
   13d50:	movw	r1, #40975	; 0xa00f
   13d54:	movt	r1, #1
   13d58:	b	13c2c <__assert_fail@plt+0x2518>
   13d5c:	movw	r1, #41036	; 0xa04c
   13d60:	mov	r0, #0
   13d64:	mov	r2, #5
   13d68:	movt	r1, #1
   13d6c:	bl	11444 <dcgettext@plt>
   13d70:	mov	r4, r0
   13d74:	ldr	r0, [r6]
   13d78:	ldr	r1, [sp, #88]	; 0x58
   13d7c:	ldr	r0, [r1, r0, lsl #2]
   13d80:	b	13c90 <__assert_fail@plt+0x257c>
   13d84:	bl	116f0 <abort@plt>
   13d88:	ldr	r0, [sp, #48]	; 0x30
   13d8c:	ldr	r1, [sp, #64]	; 0x40
   13d90:	ldr	r2, [r0, r1, lsl #4]
   13d94:	ldr	r0, [sp, #44]	; 0x2c
   13d98:	ldr	r4, [r0]
   13d9c:	b	13bc0 <__assert_fail@plt+0x24ac>
   13da0:	movw	r0, #45924	; 0xb364
   13da4:	movt	r0, #2
   13da8:	ldr	r0, [r0]
   13dac:	bl	116b4 <clearerr_unlocked@plt>
   13db0:	bl	115d0 <__errno_location@plt>
   13db4:	movw	r1, #42690	; 0xa6c2
   13db8:	ldr	r4, [r0]
   13dbc:	mov	r0, #0
   13dc0:	mov	r2, #5
   13dc4:	movt	r1, #1
   13dc8:	bl	11444 <dcgettext@plt>
   13dcc:	b	13bcc <__assert_fail@plt+0x24b8>
   13dd0:	movw	r1, #42019	; 0xa423
   13dd4:	mov	r0, #0
   13dd8:	mov	r2, #5
   13ddc:	movt	r1, #1
   13de0:	bl	11444 <dcgettext@plt>
   13de4:	mov	r2, r0
   13de8:	str	r7, [sp]
   13dec:	str	r6, [sp, #4]
   13df0:	b	13d10 <__assert_fail@plt+0x25fc>
   13df4:	movw	r1, #41053	; 0xa05d
   13df8:	movt	r1, #1
   13dfc:	b	13c2c <__assert_fail@plt+0x2518>
   13e00:	bl	115d0 <__errno_location@plt>
   13e04:	movw	r1, #41117	; 0xa09d
   13e08:	ldr	r4, [r0]
   13e0c:	mov	r0, #0
   13e10:	mov	r2, #5
   13e14:	movt	r1, #1
   13e18:	bl	11444 <dcgettext@plt>
   13e1c:	mov	r5, r0
   13e20:	movw	r0, #45936	; 0xb370
   13e24:	movt	r0, #2
   13e28:	ldr	r1, [r0]
   13e2c:	mov	r0, #4
   13e30:	bl	16bac <__assert_fail@plt+0x5498>
   13e34:	b	13e84 <__assert_fail@plt+0x2770>
   13e38:	bl	115d0 <__errno_location@plt>
   13e3c:	ldr	r1, [r0]
   13e40:	cmp	r1, #29
   13e44:	moveq	r1, #0
   13e48:	streq	r1, [r0]
   13e4c:	bl	115d0 <__errno_location@plt>
   13e50:	movw	r1, #41144	; 0xa0b8
   13e54:	ldr	r4, [r0]
   13e58:	mov	r0, #0
   13e5c:	mov	r2, #5
   13e60:	movt	r1, #1
   13e64:	bl	11444 <dcgettext@plt>
   13e68:	mov	r5, r0
   13e6c:	movw	r0, #45936	; 0xb370
   13e70:	mov	r1, #3
   13e74:	movt	r0, #2
   13e78:	ldr	r2, [r0]
   13e7c:	mov	r0, #0
   13e80:	bl	16e28 <__assert_fail@plt+0x5714>
   13e84:	mov	r3, r0
   13e88:	mov	r0, #1
   13e8c:	mov	r1, r4
   13e90:	mov	r2, r5
   13e94:	bl	114f8 <error@plt>
   13e98:	movw	r1, #40621	; 0x9ead
   13e9c:	mov	r0, #0
   13ea0:	mov	r2, #5
   13ea4:	movt	r1, #1
   13ea8:	bl	11444 <dcgettext@plt>
   13eac:	mov	r4, r0
   13eb0:	add	r2, sp, #104	; 0x68
   13eb4:	mov	r0, sl
   13eb8:	mov	r1, r9
   13ebc:	bl	15424 <__assert_fail@plt+0x3d10>
   13ec0:	bl	170d4 <__assert_fail@plt+0x59c0>
   13ec4:	movw	r2, #41029	; 0xa045
   13ec8:	str	r0, [sp]
   13ecc:	mov	r0, #1
   13ed0:	mov	r1, #75	; 0x4b
   13ed4:	mov	r3, r4
   13ed8:	movt	r2, #1
   13edc:	bl	114f8 <error@plt>
   13ee0:	movw	r0, #42506	; 0xa60a
   13ee4:	movw	r1, #42071	; 0xa457
   13ee8:	movw	r3, #42614	; 0xa676
   13eec:	movw	r2, #867	; 0x363
   13ef0:	movt	r0, #1
   13ef4:	movt	r1, #1
   13ef8:	movt	r3, #1
   13efc:	bl	11714 <__assert_fail@plt>
   13f00:	movw	r0, #42501	; 0xa605
   13f04:	movw	r1, #42071	; 0xa457
   13f08:	movw	r3, #42536	; 0xa628
   13f0c:	mov	r2, #996	; 0x3e4
   13f10:	movt	r0, #1
   13f14:	movt	r1, #1
   13f18:	movt	r3, #1
   13f1c:	bl	11714 <__assert_fail@plt>
   13f20:	bl	115d0 <__errno_location@plt>
   13f24:	mov	r1, #75	; 0x4b
   13f28:	str	r1, [r0]
   13f2c:	b	13e4c <__assert_fail@plt+0x2738>
   13f30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f34:	add	fp, sp, #28
   13f38:	sub	sp, sp, #36	; 0x24
   13f3c:	str	r2, [sp, #12]
   13f40:	ldr	r2, [fp, #16]
   13f44:	mov	r7, r0
   13f48:	ldr	r0, [fp, #20]
   13f4c:	ldr	r6, [fp, #8]
   13f50:	str	r3, [sp, #8]
   13f54:	mov	r8, #0
   13f58:	mov	r4, #1
   13f5c:	mov	r5, #1
   13f60:	mov	r3, r1
   13f64:	mov	sl, #0
   13f68:	str	r1, [sp, #32]
   13f6c:	str	r7, [sp, #28]
   13f70:	subs	r2, r2, #1
   13f74:	sbc	r0, r0, #0
   13f78:	str	r2, [sp, #24]
   13f7c:	str	r0, [sp, #20]
   13f80:	cmn	r6, #1
   13f84:	beq	13f9c <__assert_fail@plt+0x2888>
   13f88:	ldr	r0, [sp, #8]
   13f8c:	cmp	r6, r0
   13f90:	mov	r0, #0
   13f94:	movwcc	r0, #1
   13f98:	b	14018 <__assert_fail@plt+0x2904>
   13f9c:	tst	r5, #1
   13fa0:	beq	13fac <__assert_fail@plt+0x2898>
   13fa4:	mov	r9, r3
   13fa8:	b	13ff0 <__assert_fail@plt+0x28dc>
   13fac:	mov	r0, #1
   13fb0:	mov	r2, r7
   13fb4:	mov	r6, r3
   13fb8:	str	r0, [sp]
   13fbc:	mov	r0, #0
   13fc0:	bl	114b0 <lseek64@plt>
   13fc4:	and	r0, r0, r1
   13fc8:	mvn	r1, #0
   13fcc:	subs	r1, r0, r1
   13fd0:	movwne	r1, #1
   13fd4:	cmn	r0, #1
   13fd8:	ldr	r0, [sp, #32]
   13fdc:	orr	r4, r4, r1
   13fe0:	movne	r6, r0
   13fe4:	ldr	r0, [sp, #28]
   13fe8:	mov	r9, r6
   13fec:	movne	r7, r0
   13ff0:	ldr	r1, [sp, #12]
   13ff4:	ldr	r2, [sp, #8]
   13ff8:	mov	r0, #0
   13ffc:	bl	17220 <__assert_fail@plt+0x5b0c>
   14000:	cmn	r0, #1
   14004:	beq	14178 <__assert_fail@plt+0x2a64>
   14008:	mov	r6, r0
   1400c:	clz	r0, r0
   14010:	mov	r3, r9
   14014:	lsr	r0, r0, #5
   14018:	str	r0, [sp, #16]
   1401c:	subs	r0, r6, r7
   14020:	rscs	r0, r3, #0
   14024:	bcs	14098 <__assert_fail@plt+0x2984>
   14028:	ldr	r9, [sp, #12]
   1402c:	cmp	r6, #0
   14030:	beq	14120 <__assert_fail@plt+0x2a0c>
   14034:	orr	r0, r4, r5
   14038:	mov	r5, #0
   1403c:	tst	r0, #1
   14040:	beq	14060 <__assert_fail@plt+0x294c>
   14044:	and	r0, r4, #1
   14048:	mov	r1, r9
   1404c:	mov	r2, r6
   14050:	mov	r5, r3
   14054:	bl	1443c <__assert_fail@plt+0x2d28>
   14058:	mov	r3, r5
   1405c:	mov	r5, r0
   14060:	ldr	r9, [fp, #16]
   14064:	ldr	r1, [fp, #20]
   14068:	and	r0, r4, #1
   1406c:	adds	r8, r8, r0
   14070:	adc	sl, sl, #0
   14074:	eor	r0, r8, r9
   14078:	eor	r1, sl, r1
   1407c:	orrs	r0, r0, r1
   14080:	cmpeq	r5, #0
   14084:	beq	14170 <__assert_fail@plt+0x2a5c>
   14088:	subs	r7, r7, r6
   1408c:	mov	r4, #0
   14090:	sbc	r3, r3, #0
   14094:	b	14124 <__assert_fail@plt+0x2a10>
   14098:	ldr	r9, [sp, #12]
   1409c:	tst	r4, #1
   140a0:	bne	140b0 <__assert_fail@plt+0x299c>
   140a4:	tst	r5, #1
   140a8:	mov	r5, #0
   140ac:	beq	140c4 <__assert_fail@plt+0x29b0>
   140b0:	and	r0, r4, #1
   140b4:	mov	r1, r9
   140b8:	mov	r2, r7
   140bc:	bl	1443c <__assert_fail@plt+0x2d28>
   140c0:	mov	r5, r0
   140c4:	and	r0, r4, #1
   140c8:	mov	r4, #0
   140cc:	adds	r8, r8, r0
   140d0:	ldr	r0, [sp, #24]
   140d4:	adc	sl, sl, #0
   140d8:	subs	r0, r0, r8
   140dc:	ldr	r0, [sp, #20]
   140e0:	sbcs	r0, r0, sl
   140e4:	movwcs	r4, #1
   140e8:	cmp	r4, #0
   140ec:	cmpeq	r5, #0
   140f0:	beq	14138 <__assert_fail@plt+0x2a24>
   140f4:	add	r9, r9, r7
   140f8:	sub	r6, r6, r7
   140fc:	ldr	r7, [sp, #28]
   14100:	subs	r0, r6, r7
   14104:	ldr	r0, [sp, #32]
   14108:	rscs	r0, r0, #0
   1410c:	bcs	1409c <__assert_fail@plt+0x2988>
   14110:	ldr	r7, [sp, #28]
   14114:	ldr	r3, [sp, #32]
   14118:	cmp	r6, #0
   1411c:	bne	14034 <__assert_fail@plt+0x2920>
   14120:	ldr	r9, [fp, #16]
   14124:	ldr	r0, [sp, #16]
   14128:	mvn	r6, #0
   1412c:	cmp	r0, #0
   14130:	beq	13f80 <__assert_fail@plt+0x286c>
   14134:	b	1413c <__assert_fail@plt+0x2a28>
   14138:	ldr	r9, [fp, #16]
   1413c:	ldr	r4, [fp, #20]
   14140:	subs	r0, r8, r9
   14144:	sbcs	r0, sl, r4
   14148:	bcs	14170 <__assert_fail@plt+0x2a5c>
   1414c:	mov	r0, #1
   14150:	mov	r1, #0
   14154:	mov	r2, #0
   14158:	bl	1443c <__assert_fail@plt+0x2d28>
   1415c:	adds	r8, r8, #1
   14160:	adc	sl, sl, #0
   14164:	subs	r0, r8, r9
   14168:	sbcs	r0, sl, r4
   1416c:	bcc	1414c <__assert_fail@plt+0x2a38>
   14170:	sub	sp, fp, #28
   14174:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14178:	bl	115d0 <__errno_location@plt>
   1417c:	ldr	r4, [r0]
   14180:	movw	r0, #45936	; 0xb370
   14184:	mov	r1, #3
   14188:	movt	r0, #2
   1418c:	ldr	r2, [r0]
   14190:	mov	r0, #0
   14194:	bl	16e28 <__assert_fail@plt+0x5714>
   14198:	movw	r2, #42810	; 0xa73a
   1419c:	mov	r3, r0
   141a0:	mov	r0, #1
   141a4:	mov	r1, r4
   141a8:	movt	r2, #1
   141ac:	bl	114f8 <error@plt>
   141b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   141b4:	add	fp, sp, #24
   141b8:	sub	sp, sp, #32
   141bc:	mov	r8, r3
   141c0:	mov	r5, r2
   141c4:	mov	r6, r1
   141c8:	mov	r7, r0
   141cc:	cmp	r0, #0
   141d0:	beq	14208 <__assert_fail@plt+0x2af4>
   141d4:	mov	r0, r7
   141d8:	bl	15140 <__assert_fail@plt+0x3a2c>
   141dc:	cmp	r0, #0
   141e0:	beq	14208 <__assert_fail@plt+0x2af4>
   141e4:	bl	115d0 <__errno_location@plt>
   141e8:	ldr	r4, [r0]
   141ec:	cmp	r4, #32
   141f0:	bne	143f0 <__assert_fail@plt+0x2cdc>
   141f4:	movw	r0, #45964	; 0xb38c
   141f8:	movt	r0, #2
   141fc:	ldr	r0, [r0]
   14200:	cmp	r0, #0
   14204:	beq	143f0 <__assert_fail@plt+0x2cdc>
   14208:	cmp	r6, #0
   1420c:	bmi	14264 <__assert_fail@plt+0x2b50>
   14210:	cmp	r7, #0
   14214:	bne	14228 <__assert_fail@plt+0x2b14>
   14218:	mov	r0, r6
   1421c:	bl	116fc <close@plt>
   14220:	cmn	r0, #1
   14224:	ble	143e8 <__assert_fail@plt+0x2cd4>
   14228:	movw	r0, #46368	; 0xb520
   1422c:	movt	r0, #2
   14230:	ldr	r1, [r0]
   14234:	cmp	r1, #0
   14238:	beq	14264 <__assert_fail@plt+0x2b50>
   1423c:	movw	r2, #46372	; 0xb524
   14240:	mov	r3, #0
   14244:	movt	r2, #2
   14248:	ldr	r2, [r2]
   1424c:	ldr	r7, [r2, r3, lsl #2]
   14250:	cmp	r7, r6
   14254:	beq	143a4 <__assert_fail@plt+0x2c90>
   14258:	add	r3, r3, #1
   1425c:	cmp	r3, r1
   14260:	bcc	1424c <__assert_fail@plt+0x2b38>
   14264:	cmp	r5, #1
   14268:	blt	1439c <__assert_fail@plt+0x2c88>
   1426c:	mov	r0, #0
   14270:	add	r1, sp, #28
   14274:	mov	r2, #0
   14278:	str	r0, [sp, #28]
   1427c:	mov	r0, r5
   14280:	bl	114bc <waitpid@plt>
   14284:	cmn	r0, #1
   14288:	bne	1429c <__assert_fail@plt+0x2b88>
   1428c:	bl	115d0 <__errno_location@plt>
   14290:	ldr	r4, [r0]
   14294:	cmp	r4, #10
   14298:	bne	14418 <__assert_fail@plt+0x2d04>
   1429c:	ldr	r0, [sp, #28]
   142a0:	mov	r1, #16777216	; 0x1000000
   142a4:	and	r5, r0, #127	; 0x7f
   142a8:	add	r1, r1, r5, lsl #24
   142ac:	cmp	r1, #33554432	; 0x2000000
   142b0:	blt	14338 <__assert_fail@plt+0x2c24>
   142b4:	cmp	r5, #13
   142b8:	beq	1439c <__assert_fail@plt+0x2c88>
   142bc:	add	r6, sp, #9
   142c0:	mov	r0, r5
   142c4:	mov	r1, r6
   142c8:	bl	17450 <__assert_fail@plt+0x5d3c>
   142cc:	cmp	r0, #0
   142d0:	beq	142f0 <__assert_fail@plt+0x2bdc>
   142d4:	movw	r3, #42730	; 0xa6ea
   142d8:	add	r0, sp, #9
   142dc:	mov	r1, #1
   142e0:	mov	r2, #19
   142e4:	str	r5, [sp]
   142e8:	movt	r3, #1
   142ec:	bl	115dc <__sprintf_chk@plt>
   142f0:	movw	r1, #42733	; 0xa6ed
   142f4:	mov	r0, #0
   142f8:	mov	r2, #5
   142fc:	movt	r1, #1
   14300:	bl	11444 <dcgettext@plt>
   14304:	mov	r4, r0
   14308:	mov	r0, #0
   1430c:	mov	r1, #3
   14310:	mov	r2, r8
   14314:	bl	16e28 <__assert_fail@plt+0x5714>
   14318:	mov	r3, r0
   1431c:	movw	r0, #45964	; 0xb38c
   14320:	str	r6, [sp]
   14324:	movt	r0, #2
   14328:	ldr	r0, [r0]
   1432c:	str	r0, [sp, #4]
   14330:	orr	r0, r5, #128	; 0x80
   14334:	b	14390 <__assert_fail@plt+0x2c7c>
   14338:	cmp	r5, #0
   1433c:	bne	143c0 <__assert_fail@plt+0x2cac>
   14340:	ubfx	r5, r0, #8, #8
   14344:	cmp	r5, #0
   14348:	beq	1439c <__assert_fail@plt+0x2c88>
   1434c:	movw	r1, #42774	; 0xa716
   14350:	mov	r0, #0
   14354:	mov	r2, #5
   14358:	movt	r1, #1
   1435c:	bl	11444 <dcgettext@plt>
   14360:	mov	r4, r0
   14364:	mov	r0, #0
   14368:	mov	r1, #3
   1436c:	mov	r2, r8
   14370:	bl	16e28 <__assert_fail@plt+0x5714>
   14374:	mov	r3, r0
   14378:	movw	r0, #45964	; 0xb38c
   1437c:	str	r5, [sp]
   14380:	movt	r0, #2
   14384:	ldr	r0, [r0]
   14388:	str	r0, [sp, #4]
   1438c:	mov	r0, r5
   14390:	mov	r1, #0
   14394:	mov	r2, r4
   14398:	bl	114f8 <error@plt>
   1439c:	sub	sp, fp, #24
   143a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   143a4:	sub	r1, r1, #1
   143a8:	str	r1, [r0]
   143ac:	ldr	r0, [r2, r1, lsl #2]
   143b0:	str	r0, [r2, r3, lsl #2]
   143b4:	cmp	r5, #1
   143b8:	bge	1426c <__assert_fail@plt+0x2b58>
   143bc:	b	1439c <__assert_fail@plt+0x2c88>
   143c0:	movw	r1, #42813	; 0xa73d
   143c4:	mov	r0, #0
   143c8:	mov	r2, #5
   143cc:	movt	r1, #1
   143d0:	bl	11444 <dcgettext@plt>
   143d4:	ldr	r3, [sp, #28]
   143d8:	mov	r2, r0
   143dc:	mov	r0, #1
   143e0:	mov	r1, #0
   143e4:	bl	114f8 <error@plt>
   143e8:	bl	115d0 <__errno_location@plt>
   143ec:	ldr	r4, [r0]
   143f0:	mov	r0, #0
   143f4:	mov	r1, #3
   143f8:	mov	r2, r8
   143fc:	bl	16e28 <__assert_fail@plt+0x5714>
   14400:	movw	r2, #42810	; 0xa73a
   14404:	mov	r3, r0
   14408:	mov	r0, #1
   1440c:	mov	r1, r4
   14410:	movt	r2, #1
   14414:	bl	114f8 <error@plt>
   14418:	movw	r1, #42704	; 0xa6d0
   1441c:	mov	r0, #0
   14420:	mov	r2, #5
   14424:	movt	r1, #1
   14428:	bl	11444 <dcgettext@plt>
   1442c:	mov	r2, r0
   14430:	mov	r0, #1
   14434:	mov	r1, r4
   14438:	bl	114f8 <error@plt>
   1443c:	push	{r4, r5, r6, r7, fp, lr}
   14440:	add	fp, sp, #16
   14444:	mov	r4, r2
   14448:	mov	r5, r1
   1444c:	cmp	r0, #0
   14450:	beq	144b4 <__assert_fail@plt+0x2da0>
   14454:	cmp	r5, #0
   14458:	cmpeq	r4, #0
   1445c:	beq	14538 <__assert_fail@plt+0x2e24>
   14460:	movw	r6, #46340	; 0xb504
   14464:	movw	r0, #46336	; 0xb500
   14468:	movw	r7, #45400	; 0xb158
   1446c:	movt	r6, #2
   14470:	movt	r0, #2
   14474:	movt	r7, #2
   14478:	ldr	r2, [r0]
   1447c:	ldr	r3, [r6]
   14480:	ldr	r1, [r7]
   14484:	mov	r0, #0
   14488:	bl	141b0 <__assert_fail@plt+0x2a9c>
   1448c:	bl	14554 <__assert_fail@plt+0x2e40>
   14490:	ldr	r0, [r6]
   14494:	bl	14978 <__assert_fail@plt+0x3264>
   14498:	cmn	r0, #1
   1449c:	str	r0, [r7]
   144a0:	bgt	144c0 <__assert_fail@plt+0x2dac>
   144a4:	bl	115d0 <__errno_location@plt>
   144a8:	ldr	r4, [r0]
   144ac:	ldr	r2, [r6]
   144b0:	b	14514 <__assert_fail@plt+0x2e00>
   144b4:	movw	r0, #45400	; 0xb158
   144b8:	movt	r0, #2
   144bc:	ldr	r0, [r0]
   144c0:	mov	r1, r5
   144c4:	mov	r2, r4
   144c8:	bl	153ac <__assert_fail@plt+0x3c98>
   144cc:	mov	r1, r0
   144d0:	mov	r0, #1
   144d4:	cmp	r1, r4
   144d8:	bne	144e0 <__assert_fail@plt+0x2dcc>
   144dc:	pop	{r4, r5, r6, r7, fp, pc}
   144e0:	bl	115d0 <__errno_location@plt>
   144e4:	ldr	r4, [r0]
   144e8:	cmp	r4, #32
   144ec:	bne	14508 <__assert_fail@plt+0x2df4>
   144f0:	movw	r0, #45964	; 0xb38c
   144f4:	movt	r0, #2
   144f8:	ldr	r1, [r0]
   144fc:	mov	r0, #0
   14500:	cmp	r1, #0
   14504:	popne	{r4, r5, r6, r7, fp, pc}
   14508:	movw	r0, #46340	; 0xb504
   1450c:	movt	r0, #2
   14510:	ldr	r2, [r0]
   14514:	mov	r0, #0
   14518:	mov	r1, #3
   1451c:	bl	16e28 <__assert_fail@plt+0x5714>
   14520:	movw	r2, #42810	; 0xa73a
   14524:	mov	r3, r0
   14528:	mov	r0, #1
   1452c:	mov	r1, r4
   14530:	movt	r2, #1
   14534:	bl	114f8 <error@plt>
   14538:	movw	r0, #45960	; 0xb388
   1453c:	movt	r0, #2
   14540:	ldrb	r1, [r0]
   14544:	mov	r0, #1
   14548:	cmp	r1, #0
   1454c:	beq	14460 <__assert_fail@plt+0x2d4c>
   14550:	b	144dc <__assert_fail@plt+0x2dc8>
   14554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14558:	add	fp, sp, #28
   1455c:	sub	sp, sp, #4
   14560:	movw	ip, #46340	; 0xb504
   14564:	movw	sl, #45944	; 0xb378
   14568:	movt	ip, #2
   1456c:	movt	sl, #2
   14570:	ldr	r8, [ip]
   14574:	cmp	r8, #0
   14578:	beq	14650 <__assert_fail@plt+0x2f3c>
   1457c:	ldr	r0, [sl]
   14580:	cmp	r0, #0
   14584:	beq	1462c <__assert_fail@plt+0x2f18>
   14588:	rsb	r4, r0, #1
   1458c:	movw	r0, #46364	; 0xb51c
   14590:	movw	r7, #46344	; 0xb508
   14594:	movw	r2, #45396	; 0xb154
   14598:	mov	r5, #0
   1459c:	movt	r0, #2
   145a0:	movt	r7, #2
   145a4:	movt	r2, #2
   145a8:	ldr	r1, [r0]
   145ac:	movw	r0, #46348	; 0xb50c
   145b0:	ldrb	r7, [r7]
   145b4:	ldr	r2, [r2]
   145b8:	movt	r0, #2
   145bc:	ldr	r3, [r0]
   145c0:	eor	r7, r7, #1
   145c4:	mvn	r7, r7
   145c8:	ldr	r6, [r3, -r4, lsl #2]
   145cc:	cmp	r4, #0
   145d0:	mov	r0, r4
   145d4:	movwne	r0, #1
   145d8:	orr	r0, r0, r7
   145dc:	tst	r0, #1
   145e0:	add	r6, r6, #1
   145e4:	str	r6, [r3, -r4, lsl #2]
   145e8:	bne	14600 <__assert_fail@plt+0x2eec>
   145ec:	ldr	r0, [r3]
   145f0:	add	r0, r0, r2
   145f4:	ldrb	r0, [r0, #1]
   145f8:	cmp	r0, #0
   145fc:	beq	14650 <__assert_fail@plt+0x2f3c>
   14600:	ldrb	r0, [r2, r6]
   14604:	cmp	r0, #0
   14608:	strb	r0, [r1, -r4]
   1460c:	bne	1494c <__assert_fail@plt+0x3238>
   14610:	rsb	r0, r4, #0
   14614:	str	r5, [r3, r0, lsl #2]
   14618:	ldrb	r0, [r2]
   1461c:	strb	r0, [r1, -r4]
   14620:	add	r4, r4, #1
   14624:	cmp	r4, #1
   14628:	bne	145c8 <__assert_fail@plt+0x2eb4>
   1462c:	movw	r1, #42109	; 0xa47d
   14630:	mov	r0, #0
   14634:	mov	r2, #5
   14638:	movt	r1, #1
   1463c:	bl	11444 <dcgettext@plt>
   14640:	mov	r2, r0
   14644:	mov	r0, #1
   14648:	mov	r1, #0
   1464c:	bl	114f8 <error@plt>
   14650:	movw	r6, #46356	; 0xb514
   14654:	movw	r4, #45948	; 0xb37c
   14658:	mov	r7, ip
   1465c:	movt	r6, #2
   14660:	movt	r4, #2
   14664:	ldr	r9, [r6]
   14668:	cmp	r9, #0
   1466c:	beq	14694 <__assert_fail@plt+0x2f80>
   14670:	ldr	r1, [sl]
   14674:	add	r0, r9, #2
   14678:	str	r0, [r6]
   1467c:	add	r1, r1, #1
   14680:	str	r1, [sl]
   14684:	movw	r1, #46352	; 0xb510
   14688:	movt	r1, #2
   1468c:	ldr	r5, [r1]
   14690:	b	146e8 <__assert_fail@plt+0x2fd4>
   14694:	movw	r0, #45940	; 0xb374
   14698:	movt	r0, #2
   1469c:	ldr	r0, [r0]
   146a0:	bl	11588 <strlen@plt>
   146a4:	mov	r5, r0
   146a8:	movw	r0, #46352	; 0xb510
   146ac:	movt	r0, #2
   146b0:	str	r5, [r0]
   146b4:	ldr	r0, [r4]
   146b8:	cmp	r0, #0
   146bc:	beq	146c8 <__assert_fail@plt+0x2fb4>
   146c0:	bl	11588 <strlen@plt>
   146c4:	b	146cc <__assert_fail@plt+0x2fb8>
   146c8:	mov	r0, #0
   146cc:	movw	r1, #46360	; 0xb518
   146d0:	movt	r1, #2
   146d4:	str	r0, [r1]
   146d8:	ldr	r1, [sl]
   146dc:	add	r0, r0, r5
   146e0:	add	r0, r0, r1
   146e4:	str	r0, [r6]
   146e8:	add	r1, r0, #1
   146ec:	cmp	r1, r5
   146f0:	bcc	14954 <__assert_fail@plt+0x3240>
   146f4:	mov	r0, r8
   146f8:	bl	17cb8 <__assert_fail@plt+0x65a4>
   146fc:	str	r0, [r7]
   14700:	mov	r4, r0
   14704:	mov	r7, r6
   14708:	cmp	r9, #0
   1470c:	beq	1474c <__assert_fail@plt+0x3038>
   14710:	movw	r1, #46348	; 0xb50c
   14714:	movw	r0, #45396	; 0xb154
   14718:	movw	r2, #46352	; 0xb510
   1471c:	movt	r1, #2
   14720:	movt	r0, #2
   14724:	movt	r2, #2
   14728:	ldr	r1, [r1]
   1472c:	ldr	r0, [r0]
   14730:	ldr	r3, [r2]
   14734:	ldr	r1, [r1]
   14738:	add	r5, r3, #1
   1473c:	ldrb	r1, [r0, r1]
   14740:	strb	r1, [r4, r3]
   14744:	str	r5, [r2]
   14748:	b	1477c <__assert_fail@plt+0x3068>
   1474c:	movw	r0, #46352	; 0xb510
   14750:	movt	r0, #2
   14754:	ldr	r5, [r0]
   14758:	movw	r0, #45940	; 0xb374
   1475c:	movt	r0, #2
   14760:	ldr	r1, [r0]
   14764:	mov	r0, r4
   14768:	mov	r2, r5
   1476c:	bl	11408 <memcpy@plt>
   14770:	movw	r0, #45396	; 0xb154
   14774:	movt	r0, #2
   14778:	ldr	r0, [r0]
   1477c:	movw	r1, #46364	; 0xb51c
   14780:	add	r5, r4, r5
   14784:	ldr	r6, [sl]
   14788:	movt	r1, #2
   1478c:	str	r5, [r1]
   14790:	ldrb	r1, [r0]
   14794:	mov	r0, r5
   14798:	mov	r2, r6
   1479c:	bl	115f4 <memset@plt>
   147a0:	movw	r0, #45948	; 0xb37c
   147a4:	movt	r0, #2
   147a8:	ldr	r1, [r0]
   147ac:	cmp	r1, #0
   147b0:	beq	147c8 <__assert_fail@plt+0x30b4>
   147b4:	movw	r2, #46360	; 0xb518
   147b8:	add	r0, r5, r6
   147bc:	movt	r2, #2
   147c0:	ldr	r2, [r2]
   147c4:	bl	11408 <memcpy@plt>
   147c8:	ldr	r0, [r7]
   147cc:	mov	r1, #0
   147d0:	strb	r1, [r4, r0]
   147d4:	movw	r0, #46348	; 0xb50c
   147d8:	movt	r0, #2
   147dc:	mov	r4, r0
   147e0:	ldr	r0, [r0]
   147e4:	bl	152dc <__assert_fail@plt+0x3bc8>
   147e8:	ldr	r0, [sl]
   147ec:	mov	r1, #4
   147f0:	bl	18084 <__assert_fail@plt+0x6970>
   147f4:	mov	r6, r0
   147f8:	str	r0, [r4]
   147fc:	movw	r0, #45956	; 0xb384
   14800:	movt	r0, #2
   14804:	ldr	r4, [r0]
   14808:	cmp	r4, #0
   1480c:	beq	1494c <__assert_fail@plt+0x3238>
   14810:	cmp	r9, #0
   14814:	bne	14958 <__assert_fail@plt+0x3244>
   14818:	mov	r0, r4
   1481c:	bl	11588 <strlen@plt>
   14820:	mov	r5, r0
   14824:	movw	r0, #46364	; 0xb51c
   14828:	ldr	r7, [sl]
   1482c:	mov	r1, r4
   14830:	movt	r0, #2
   14834:	mov	r2, r5
   14838:	ldr	r0, [r0]
   1483c:	add	r0, r0, r7
   14840:	sub	r0, r0, r5
   14844:	bl	11408 <memcpy@plt>
   14848:	cmp	r5, #0
   1484c:	beq	1494c <__assert_fail@plt+0x3238>
   14850:	add	lr, r6, r7, lsl #2
   14854:	cmp	r5, #4
   14858:	bcc	148f8 <__assert_fail@plt+0x31e4>
   1485c:	lsl	r1, r7, #2
   14860:	add	r0, r6, r7, lsl #2
   14864:	add	r2, r4, r5
   14868:	sub	r1, r1, r5, lsl #2
   1486c:	add	r1, r6, r1
   14870:	cmp	r1, r2
   14874:	cmpcc	r4, r0
   14878:	bcc	148f8 <__assert_fail@plt+0x31e4>
   1487c:	bic	ip, r5, #3
   14880:	vmov.i32	q8, #255	; 0x000000ff
   14884:	vmvn.i32	q9, #47	; 0x0000002f
   14888:	sub	r3, r0, #16
   1488c:	sub	r7, r2, #4
   14890:	mov	r6, sp
   14894:	mvn	r2, #15
   14898:	sub	lr, lr, ip, lsl #2
   1489c:	sub	r8, r5, ip
   148a0:	mov	r0, ip
   148a4:	ldr	r1, [r7], #-4
   148a8:	subs	r0, r0, #4
   148ac:	str	r1, [sp]
   148b0:	vld1.32	{d20[0]}, [r6 :32]
   148b4:	vmovl.u8	q10, d20
   148b8:	vrev64.16	d20, d20
   148bc:	vmovl.u16	q10, d20
   148c0:	vand	q10, q10, q8
   148c4:	vadd.i32	q10, q10, q9
   148c8:	vrev64.32	q10, q10
   148cc:	vext.8	q10, q10, q10, #8
   148d0:	vst1.32	{d20-d21}, [r3], r2
   148d4:	bne	148a4 <__assert_fail@plt+0x3190>
   148d8:	cmp	r5, ip
   148dc:	beq	1494c <__assert_fail@plt+0x3238>
   148e0:	tst	r8, #1
   148e4:	bne	14904 <__assert_fail@plt+0x31f0>
   148e8:	mov	r2, r8
   148ec:	cmp	r8, #1
   148f0:	beq	1494c <__assert_fail@plt+0x3238>
   148f4:	b	1491c <__assert_fail@plt+0x3208>
   148f8:	mov	r8, r5
   148fc:	tst	r8, #1
   14900:	beq	148e8 <__assert_fail@plt+0x31d4>
   14904:	sub	r2, r8, #1
   14908:	ldrb	r0, [r4, r2]
   1490c:	sub	r0, r0, #48	; 0x30
   14910:	str	r0, [lr, #-4]!
   14914:	cmp	r8, #1
   14918:	beq	1494c <__assert_fail@plt+0x3238>
   1491c:	sub	r0, lr, #4
   14920:	sub	r1, r4, #2
   14924:	add	r3, r1, r2
   14928:	ldrb	r3, [r3, #1]
   1492c:	sub	r3, r3, #48	; 0x30
   14930:	str	r3, [r0]
   14934:	ldrb	r3, [r1, r2]
   14938:	subs	r2, r2, #2
   1493c:	sub	r3, r3, #48	; 0x30
   14940:	str	r3, [r0, #-4]
   14944:	sub	r0, r0, #8
   14948:	bne	14924 <__assert_fail@plt+0x3210>
   1494c:	sub	sp, fp, #28
   14950:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14954:	bl	181ac <__assert_fail@plt+0x6a98>
   14958:	movw	r0, #42063	; 0xa44f
   1495c:	movw	r1, #42071	; 0xa457
   14960:	movw	r3, #42083	; 0xa463
   14964:	movw	r2, #409	; 0x199
   14968:	movt	r0, #1
   1496c:	movt	r1, #1
   14970:	movt	r3, #1
   14974:	bl	11714 <__assert_fail@plt>
   14978:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1497c:	add	fp, sp, #24
   14980:	sub	sp, sp, #112	; 0x70
   14984:	movw	r8, #45964	; 0xb38c
   14988:	mov	r4, r0
   1498c:	movt	r8, #2
   14990:	ldr	r0, [r8]
   14994:	cmp	r0, #0
   14998:	beq	14ac0 <__assert_fail@plt+0x33ac>
   1499c:	movw	r0, #42232	; 0xa4f8
   149a0:	movt	r0, #1
   149a4:	bl	11510 <getenv@plt>
   149a8:	mov	r6, r0
   149ac:	movw	r0, #42246	; 0xa506
   149b0:	mov	r1, r4
   149b4:	mov	r2, #1
   149b8:	movt	r0, #1
   149bc:	bl	115ac <setenv@plt>
   149c0:	movw	r5, #42238	; 0xa4fe
   149c4:	cmp	r6, #0
   149c8:	movt	r5, #1
   149cc:	movne	r5, r6
   149d0:	cmp	r0, #0
   149d4:	bne	14d70 <__assert_fail@plt+0x365c>
   149d8:	movw	r0, #45968	; 0xb390
   149dc:	movt	r0, #2
   149e0:	ldrb	r0, [r0]
   149e4:	cmp	r0, #1
   149e8:	bne	14a34 <__assert_fail@plt+0x3320>
   149ec:	movw	r0, #45924	; 0xb364
   149f0:	movw	r1, #42291	; 0xa533
   149f4:	mov	r2, #5
   149f8:	movt	r0, #2
   149fc:	movt	r1, #1
   14a00:	ldr	r6, [r0]
   14a04:	mov	r0, #0
   14a08:	bl	11444 <dcgettext@plt>
   14a0c:	mov	r7, r0
   14a10:	mov	r0, #0
   14a14:	mov	r1, #3
   14a18:	mov	r2, r4
   14a1c:	bl	16e28 <__assert_fail@plt+0x5714>
   14a20:	mov	r3, r0
   14a24:	mov	r0, r6
   14a28:	mov	r1, #1
   14a2c:	mov	r2, r7
   14a30:	bl	11624 <__fprintf_chk@plt>
   14a34:	add	r0, sp, #8
   14a38:	bl	11648 <pipe@plt>
   14a3c:	cmp	r0, #0
   14a40:	bne	14d84 <__assert_fail@plt+0x3670>
   14a44:	bl	11684 <fork@plt>
   14a48:	cmp	r0, #0
   14a4c:	beq	14be8 <__assert_fail@plt+0x34d4>
   14a50:	mov	r4, r0
   14a54:	cmn	r0, #1
   14a58:	beq	14d98 <__assert_fail@plt+0x3684>
   14a5c:	ldr	r0, [sp, #8]
   14a60:	bl	116fc <close@plt>
   14a64:	cmp	r0, #0
   14a68:	bne	14dac <__assert_fail@plt+0x3698>
   14a6c:	movw	r0, #46336	; 0xb500
   14a70:	movt	r0, #2
   14a74:	str	r4, [r0]
   14a78:	movw	r4, #46368	; 0xb520
   14a7c:	movw	r0, #46376	; 0xb528
   14a80:	movt	r0, #2
   14a84:	movt	r4, #2
   14a88:	ldr	r1, [r4]
   14a8c:	ldr	r0, [r0]
   14a90:	cmp	r1, r0
   14a94:	bne	14cbc <__assert_fail@plt+0x35a8>
   14a98:	movw	r5, #46372	; 0xb524
   14a9c:	movw	r1, #46376	; 0xb528
   14aa0:	mov	r2, #4
   14aa4:	movt	r5, #2
   14aa8:	movt	r1, #2
   14aac:	ldr	r0, [r5]
   14ab0:	bl	17e1c <__assert_fail@plt+0x6708>
   14ab4:	ldr	r1, [r4]
   14ab8:	str	r0, [r5]
   14abc:	b	14cc8 <__assert_fail@plt+0x35b4>
   14ac0:	movw	r0, #45968	; 0xb390
   14ac4:	movt	r0, #2
   14ac8:	ldrb	r0, [r0]
   14acc:	cmp	r0, #1
   14ad0:	bne	14b18 <__assert_fail@plt+0x3404>
   14ad4:	movw	r0, #45924	; 0xb364
   14ad8:	movw	r1, #42140	; 0xa49c
   14adc:	mov	r2, #5
   14ae0:	movt	r0, #2
   14ae4:	movt	r1, #1
   14ae8:	ldr	r5, [r0]
   14aec:	mov	r0, #0
   14af0:	bl	11444 <dcgettext@plt>
   14af4:	mov	r6, r0
   14af8:	mov	r0, #4
   14afc:	mov	r1, r4
   14b00:	bl	16bac <__assert_fail@plt+0x5498>
   14b04:	mov	r3, r0
   14b08:	mov	r0, r5
   14b0c:	mov	r1, #1
   14b10:	mov	r2, r6
   14b14:	bl	11624 <__fprintf_chk@plt>
   14b18:	mov	r0, r4
   14b1c:	mov	r1, #65	; 0x41
   14b20:	movw	r2, #438	; 0x1b6
   14b24:	bl	151dc <__assert_fail@plt+0x3ac8>
   14b28:	mov	r5, r0
   14b2c:	cmp	r0, #0
   14b30:	bmi	14cdc <__assert_fail@plt+0x35c8>
   14b34:	add	r2, sp, #8
   14b38:	mov	r0, #3
   14b3c:	mov	r1, r5
   14b40:	bl	1148c <__fxstat64@plt>
   14b44:	cmp	r0, #0
   14b48:	bne	14dc0 <__assert_fail@plt+0x36ac>
   14b4c:	movw	r0, #45976	; 0xb398
   14b50:	ldr	r1, [sp, #104]	; 0x68
   14b54:	ldr	r7, [sp, #108]	; 0x6c
   14b58:	movt	r0, #2
   14b5c:	ldrd	r2, [r0, #96]	; 0x60
   14b60:	eor	r3, r3, r7
   14b64:	eor	r1, r2, r1
   14b68:	orrs	r1, r1, r3
   14b6c:	bne	14b8c <__assert_fail@plt+0x3478>
   14b70:	ldrd	r0, [r0]
   14b74:	ldr	r2, [sp, #8]
   14b78:	ldr	r3, [sp, #12]
   14b7c:	eor	r1, r1, r3
   14b80:	eor	r0, r0, r2
   14b84:	orrs	r0, r0, r1
   14b88:	beq	14e00 <__assert_fail@plt+0x36ec>
   14b8c:	mov	r0, r5
   14b90:	mov	r2, #0
   14b94:	mov	r3, #0
   14b98:	bl	1142c <ftruncate64@plt>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14cdc <__assert_fail@plt+0x35c8>
   14ba4:	ldr	r0, [sp, #24]
   14ba8:	and	r0, r0, #61440	; 0xf000
   14bac:	cmp	r0, #32768	; 0x8000
   14bb0:	bne	14cdc <__assert_fail@plt+0x35c8>
   14bb4:	bl	115d0 <__errno_location@plt>
   14bb8:	movw	r1, #42211	; 0xa4e3
   14bbc:	ldr	r5, [r0]
   14bc0:	mov	r0, #0
   14bc4:	mov	r2, #5
   14bc8:	movt	r1, #1
   14bcc:	bl	11444 <dcgettext@plt>
   14bd0:	mov	r6, r0
   14bd4:	mov	r0, #0
   14bd8:	mov	r1, #3
   14bdc:	mov	r2, r4
   14be0:	bl	16e28 <__assert_fail@plt+0x5714>
   14be4:	b	14dec <__assert_fail@plt+0x36d8>
   14be8:	movw	r4, #46368	; 0xb520
   14bec:	movt	r4, #2
   14bf0:	ldr	r0, [r4]
   14bf4:	cmp	r0, #0
   14bf8:	beq	14c2c <__assert_fail@plt+0x3518>
   14bfc:	movw	r7, #46372	; 0xb524
   14c00:	mov	r6, #0
   14c04:	movt	r7, #2
   14c08:	ldr	r0, [r7]
   14c0c:	ldr	r0, [r0, r6, lsl #2]
   14c10:	bl	116fc <close@plt>
   14c14:	cmp	r0, #0
   14c18:	bne	14ce8 <__assert_fail@plt+0x35d4>
   14c1c:	ldr	r0, [r4]
   14c20:	add	r6, r6, #1
   14c24:	cmp	r6, r0
   14c28:	bcc	14c08 <__assert_fail@plt+0x34f4>
   14c2c:	ldr	r0, [sp, #12]
   14c30:	bl	116fc <close@plt>
   14c34:	cmp	r0, #0
   14c38:	bne	14cfc <__assert_fail@plt+0x35e8>
   14c3c:	ldr	r0, [sp, #8]
   14c40:	cmp	r0, #0
   14c44:	bne	14d28 <__assert_fail@plt+0x3614>
   14c48:	movw	r1, #46208	; 0xb480
   14c4c:	mov	r0, #2
   14c50:	mov	r2, #0
   14c54:	mov	r4, #0
   14c58:	movt	r1, #2
   14c5c:	bl	113d8 <sigprocmask@plt>
   14c60:	mov	r0, r5
   14c64:	bl	14fb4 <__assert_fail@plt+0x38a0>
   14c68:	ldr	r3, [r8]
   14c6c:	movw	r2, #42413	; 0xa5ad
   14c70:	mov	r1, r0
   14c74:	mov	r0, r5
   14c78:	str	r4, [sp]
   14c7c:	movt	r2, #1
   14c80:	bl	11690 <execl@plt>
   14c84:	bl	115d0 <__errno_location@plt>
   14c88:	movw	r1, #42416	; 0xa5b0
   14c8c:	ldr	r4, [r0]
   14c90:	mov	r0, #0
   14c94:	mov	r2, #5
   14c98:	movt	r1, #1
   14c9c:	bl	11444 <dcgettext@plt>
   14ca0:	mov	r2, r0
   14ca4:	ldr	r0, [r8]
   14ca8:	mov	r1, r4
   14cac:	mov	r3, r5
   14cb0:	str	r0, [sp]
   14cb4:	mov	r0, #1
   14cb8:	bl	114f8 <error@plt>
   14cbc:	movw	r0, #46372	; 0xb524
   14cc0:	movt	r0, #2
   14cc4:	ldr	r0, [r0]
   14cc8:	add	r2, r1, #1
   14ccc:	str	r2, [r4]
   14cd0:	ldr	r2, [sp, #12]
   14cd4:	str	r2, [r0, r1, lsl #2]
   14cd8:	ldr	r5, [sp, #12]
   14cdc:	mov	r0, r5
   14ce0:	sub	sp, fp, #24
   14ce4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14ce8:	bl	115d0 <__errno_location@plt>
   14cec:	ldr	r4, [r0]
   14cf0:	movw	r1, #42337	; 0xa561
   14cf4:	movt	r1, #1
   14cf8:	b	14d0c <__assert_fail@plt+0x35f8>
   14cfc:	bl	115d0 <__errno_location@plt>
   14d00:	ldr	r4, [r0]
   14d04:	movw	r1, #42356	; 0xa574
   14d08:	movt	r1, #1
   14d0c:	mov	r0, #0
   14d10:	mov	r2, #5
   14d14:	bl	11444 <dcgettext@plt>
   14d18:	mov	r2, r0
   14d1c:	mov	r0, #1
   14d20:	mov	r1, r4
   14d24:	bl	114f8 <error@plt>
   14d28:	mov	r1, #0
   14d2c:	bl	11450 <dup2@plt>
   14d30:	cmp	r0, #0
   14d34:	bne	14d5c <__assert_fail@plt+0x3648>
   14d38:	ldr	r0, [sp, #8]
   14d3c:	bl	116fc <close@plt>
   14d40:	cmp	r0, #0
   14d44:	beq	14c48 <__assert_fail@plt+0x3534>
   14d48:	bl	115d0 <__errno_location@plt>
   14d4c:	ldr	r4, [r0]
   14d50:	movw	r1, #42394	; 0xa59a
   14d54:	movt	r1, #1
   14d58:	b	14d0c <__assert_fail@plt+0x35f8>
   14d5c:	bl	115d0 <__errno_location@plt>
   14d60:	ldr	r4, [r0]
   14d64:	movw	r1, #42376	; 0xa588
   14d68:	movt	r1, #1
   14d6c:	b	14d0c <__assert_fail@plt+0x35f8>
   14d70:	bl	115d0 <__errno_location@plt>
   14d74:	ldr	r4, [r0]
   14d78:	movw	r1, #42251	; 0xa50b
   14d7c:	movt	r1, #1
   14d80:	b	14d0c <__assert_fail@plt+0x35f8>
   14d84:	bl	115d0 <__errno_location@plt>
   14d88:	ldr	r4, [r0]
   14d8c:	movw	r1, #42315	; 0xa54b
   14d90:	movt	r1, #1
   14d94:	b	14d0c <__assert_fail@plt+0x35f8>
   14d98:	bl	115d0 <__errno_location@plt>
   14d9c:	ldr	r4, [r0]
   14da0:	movw	r1, #42450	; 0xa5d2
   14da4:	movt	r1, #1
   14da8:	b	14d0c <__assert_fail@plt+0x35f8>
   14dac:	bl	115d0 <__errno_location@plt>
   14db0:	ldr	r4, [r0]
   14db4:	movw	r1, #42474	; 0xa5ea
   14db8:	movt	r1, #1
   14dbc:	b	14d0c <__assert_fail@plt+0x35f8>
   14dc0:	bl	115d0 <__errno_location@plt>
   14dc4:	movw	r1, #42158	; 0xa4ae
   14dc8:	ldr	r5, [r0]
   14dcc:	mov	r0, #0
   14dd0:	mov	r2, #5
   14dd4:	movt	r1, #1
   14dd8:	bl	11444 <dcgettext@plt>
   14ddc:	mov	r6, r0
   14de0:	mov	r0, #4
   14de4:	mov	r1, r4
   14de8:	bl	16bac <__assert_fail@plt+0x5498>
   14dec:	mov	r3, r0
   14df0:	mov	r0, #1
   14df4:	mov	r1, r5
   14df8:	mov	r2, r6
   14dfc:	bl	114f8 <error@plt>
   14e00:	movw	r1, #42176	; 0xa4c0
   14e04:	mov	r0, #0
   14e08:	mov	r2, #5
   14e0c:	movt	r1, #1
   14e10:	bl	11444 <dcgettext@plt>
   14e14:	mov	r5, r0
   14e18:	mov	r0, #4
   14e1c:	mov	r1, r4
   14e20:	bl	16bac <__assert_fail@plt+0x5498>
   14e24:	mov	r3, r0
   14e28:	mov	r0, #1
   14e2c:	mov	r1, #0
   14e30:	mov	r2, r5
   14e34:	bl	114f8 <error@plt>
   14e38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e3c:	add	fp, sp, #28
   14e40:	sub	sp, sp, #12
   14e44:	mov	r4, r0
   14e48:	add	r0, r0, r1, lsl #4
   14e4c:	mov	r5, r1
   14e50:	mov	r9, #0
   14e54:	mov	r7, r0
   14e58:	ldr	r1, [r7, #4]!
   14e5c:	cmn	r1, #1
   14e60:	bgt	14f5c <__assert_fail@plt+0x3848>
   14e64:	sub	r8, r2, #1
   14e68:	cmp	r5, #0
   14e6c:	mov	r9, #0
   14e70:	str	r0, [sp, #4]
   14e74:	str	r7, [sp, #8]
   14e78:	mov	r6, r8
   14e7c:	subne	r6, r5, #1
   14e80:	ldr	r0, [r4, r5, lsl #4]
   14e84:	cmn	r1, #1
   14e88:	beq	14ea0 <__assert_fail@plt+0x378c>
   14e8c:	movw	r1, #3073	; 0xc01
   14e90:	bl	151dc <__assert_fail@plt+0x3ac8>
   14e94:	cmn	r0, #1
   14e98:	ble	14eac <__assert_fail@plt+0x3798>
   14e9c:	b	14f24 <__assert_fail@plt+0x3810>
   14ea0:	bl	14978 <__assert_fail@plt+0x3264>
   14ea4:	cmn	r0, #1
   14ea8:	bgt	14f24 <__assert_fail@plt+0x3810>
   14eac:	bl	115d0 <__errno_location@plt>
   14eb0:	ldr	r1, [r0]
   14eb4:	mov	r7, r0
   14eb8:	sub	r0, r1, #23
   14ebc:	cmp	r0, #1
   14ec0:	bhi	14f68 <__assert_fail@plt+0x3854>
   14ec4:	add	sl, r4, r6, lsl #4
   14ec8:	mov	r9, sl
   14ecc:	ldr	r0, [r9, #4]!
   14ed0:	cmn	r0, #1
   14ed4:	bgt	14ef4 <__assert_fail@plt+0x37e0>
   14ed8:	cmp	r6, #0
   14edc:	mov	r0, r8
   14ee0:	subne	r0, r6, #1
   14ee4:	cmp	r0, r5
   14ee8:	mov	r6, r0
   14eec:	bne	14ec4 <__assert_fail@plt+0x37b0>
   14ef0:	b	14f68 <__assert_fail@plt+0x3854>
   14ef4:	ldr	r0, [sl, #8]!
   14ef8:	bl	15140 <__assert_fail@plt+0x3a2c>
   14efc:	cmp	r0, #0
   14f00:	bne	14f94 <__assert_fail@plt+0x3880>
   14f04:	ldr	r7, [sp, #8]
   14f08:	mov	r0, #0
   14f0c:	str	r0, [sl]
   14f10:	mvn	r0, #1
   14f14:	str	r0, [r9]
   14f18:	mov	r9, #1
   14f1c:	ldr	r1, [r7]
   14f20:	b	14e80 <__assert_fail@plt+0x376c>
   14f24:	movw	r1, #42702	; 0xa6ce
   14f28:	str	r0, [r7]
   14f2c:	movt	r1, #1
   14f30:	bl	11378 <fdopen@plt>
   14f34:	ldr	r2, [sp, #4]
   14f38:	cmp	r0, #0
   14f3c:	str	r0, [r2, #8]
   14f40:	beq	14fa4 <__assert_fail@plt+0x3890>
   14f44:	movw	r0, #46336	; 0xb500
   14f48:	movt	r0, #2
   14f4c:	ldr	r1, [r0]
   14f50:	str	r1, [r2, #12]
   14f54:	mov	r1, #0
   14f58:	str	r1, [r0]
   14f5c:	and	r0, r9, #1
   14f60:	sub	sp, fp, #28
   14f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f68:	ldr	r2, [r4, r5, lsl #4]
   14f6c:	mov	r0, #0
   14f70:	mov	r4, r1
   14f74:	mov	r1, #3
   14f78:	bl	16e28 <__assert_fail@plt+0x5714>
   14f7c:	movw	r2, #42810	; 0xa73a
   14f80:	mov	r3, r0
   14f84:	mov	r0, #1
   14f88:	mov	r1, r4
   14f8c:	movt	r2, #1
   14f90:	bl	114f8 <error@plt>
   14f94:	ldr	r2, [r4, r6, lsl #4]
   14f98:	ldr	r4, [r7]
   14f9c:	mov	r0, #0
   14fa0:	b	14f74 <__assert_fail@plt+0x3860>
   14fa4:	bl	115d0 <__errno_location@plt>
   14fa8:	ldr	r2, [r4, r5, lsl #4]
   14fac:	ldr	r4, [r0]
   14fb0:	b	14f9c <__assert_fail@plt+0x3888>
   14fb4:	sub	r0, r0, #1
   14fb8:	ldrb	r3, [r0, #1]!
   14fbc:	cmp	r3, #47	; 0x2f
   14fc0:	beq	14fb8 <__assert_fail@plt+0x38a4>
   14fc4:	mov	r2, #0
   14fc8:	mov	r1, r0
   14fcc:	b	14fd8 <__assert_fail@plt+0x38c4>
   14fd0:	ldrb	r3, [r1, #1]!
   14fd4:	mov	r2, #1
   14fd8:	uxtb	r3, r3
   14fdc:	cmp	r3, #47	; 0x2f
   14fe0:	beq	14fd0 <__assert_fail@plt+0x38bc>
   14fe4:	cmp	r3, #0
   14fe8:	bxeq	lr
   14fec:	tst	r2, #1
   14ff0:	mov	r2, #0
   14ff4:	movne	r0, r1
   14ff8:	ldrb	r3, [r1, #1]!
   14ffc:	b	14fd8 <__assert_fail@plt+0x38c4>
   15000:	push	{r4, sl, fp, lr}
   15004:	add	fp, sp, #8
   15008:	mov	r4, r0
   1500c:	bl	11588 <strlen@plt>
   15010:	mov	r1, r0
   15014:	sub	r2, r4, #1
   15018:	mov	r0, r1
   1501c:	cmp	r1, #2
   15020:	bcc	15034 <__assert_fail@plt+0x3920>
   15024:	ldrb	r3, [r2, r0]
   15028:	sub	r1, r0, #1
   1502c:	cmp	r3, #47	; 0x2f
   15030:	beq	15018 <__assert_fail@plt+0x3904>
   15034:	pop	{r4, sl, fp, pc}
   15038:	movw	r1, #46380	; 0xb52c
   1503c:	movt	r1, #2
   15040:	str	r0, [r1]
   15044:	bx	lr
   15048:	movw	r1, #46384	; 0xb530
   1504c:	movt	r1, #2
   15050:	strb	r0, [r1]
   15054:	bx	lr
   15058:	push	{r4, r5, r6, sl, fp, lr}
   1505c:	add	fp, sp, #16
   15060:	sub	sp, sp, #8
   15064:	movw	r0, #45924	; 0xb364
   15068:	movt	r0, #2
   1506c:	ldr	r0, [r0]
   15070:	bl	19064 <__assert_fail@plt+0x7950>
   15074:	cmp	r0, #0
   15078:	beq	150a0 <__assert_fail@plt+0x398c>
   1507c:	movw	r0, #46384	; 0xb530
   15080:	movt	r0, #2
   15084:	ldrb	r0, [r0]
   15088:	cmp	r0, #0
   1508c:	beq	150c0 <__assert_fail@plt+0x39ac>
   15090:	bl	115d0 <__errno_location@plt>
   15094:	ldr	r0, [r0]
   15098:	cmp	r0, #32
   1509c:	bne	150c0 <__assert_fail@plt+0x39ac>
   150a0:	movw	r0, #45920	; 0xb360
   150a4:	movt	r0, #2
   150a8:	ldr	r0, [r0]
   150ac:	bl	19064 <__assert_fail@plt+0x7950>
   150b0:	cmp	r0, #0
   150b4:	subeq	sp, fp, #16
   150b8:	popeq	{r4, r5, r6, sl, fp, pc}
   150bc:	b	15130 <__assert_fail@plt+0x3a1c>
   150c0:	movw	r1, #42690	; 0xa6c2
   150c4:	mov	r0, #0
   150c8:	mov	r2, #5
   150cc:	movt	r1, #1
   150d0:	bl	11444 <dcgettext@plt>
   150d4:	mov	r4, r0
   150d8:	movw	r0, #46380	; 0xb52c
   150dc:	movt	r0, #2
   150e0:	ldr	r6, [r0]
   150e4:	bl	115d0 <__errno_location@plt>
   150e8:	ldr	r5, [r0]
   150ec:	cmp	r6, #0
   150f0:	bne	1510c <__assert_fail@plt+0x39f8>
   150f4:	movw	r2, #42810	; 0xa73a
   150f8:	mov	r0, #0
   150fc:	mov	r1, r5
   15100:	mov	r3, r4
   15104:	movt	r2, #1
   15108:	b	1512c <__assert_fail@plt+0x3a18>
   1510c:	mov	r0, r6
   15110:	bl	16d4c <__assert_fail@plt+0x5638>
   15114:	movw	r2, #41029	; 0xa045
   15118:	mov	r3, r0
   1511c:	str	r4, [sp]
   15120:	mov	r0, #0
   15124:	mov	r1, r5
   15128:	movt	r2, #1
   1512c:	bl	114f8 <error@plt>
   15130:	movw	r0, #45408	; 0xb160
   15134:	movt	r0, #2
   15138:	ldr	r0, [r0]
   1513c:	bl	113fc <_exit@plt>
   15140:	push	{r4, r5, r6, sl, fp, lr}
   15144:	add	fp, sp, #16
   15148:	sub	sp, sp, #8
   1514c:	mov	r4, r0
   15150:	bl	11618 <fileno@plt>
   15154:	cmn	r0, #1
   15158:	ble	151cc <__assert_fail@plt+0x3ab8>
   1515c:	mov	r0, r4
   15160:	bl	11540 <__freading@plt>
   15164:	cmp	r0, #0
   15168:	beq	15194 <__assert_fail@plt+0x3a80>
   1516c:	mov	r0, r4
   15170:	bl	11618 <fileno@plt>
   15174:	mov	r1, #1
   15178:	mov	r2, #0
   1517c:	mov	r3, #0
   15180:	str	r1, [sp]
   15184:	bl	114b0 <lseek64@plt>
   15188:	and	r0, r0, r1
   1518c:	cmn	r0, #1
   15190:	beq	151cc <__assert_fail@plt+0x3ab8>
   15194:	mov	r0, r4
   15198:	bl	15280 <__assert_fail@plt+0x3b6c>
   1519c:	cmp	r0, #0
   151a0:	beq	151cc <__assert_fail@plt+0x3ab8>
   151a4:	bl	115d0 <__errno_location@plt>
   151a8:	ldr	r6, [r0]
   151ac:	mov	r5, r0
   151b0:	mov	r0, r4
   151b4:	bl	1163c <fclose@plt>
   151b8:	cmp	r6, #0
   151bc:	strne	r6, [r5]
   151c0:	mvnne	r0, #0
   151c4:	sub	sp, fp, #16
   151c8:	pop	{r4, r5, r6, sl, fp, pc}
   151cc:	mov	r0, r4
   151d0:	sub	sp, fp, #16
   151d4:	pop	{r4, r5, r6, sl, fp, lr}
   151d8:	b	1163c <fclose@plt>
   151dc:	sub	sp, sp, #8
   151e0:	push	{fp, lr}
   151e4:	mov	fp, sp
   151e8:	sub	sp, sp, #8
   151ec:	str	r2, [fp, #8]
   151f0:	str	r3, [fp, #12]
   151f4:	tst	r1, #64	; 0x40
   151f8:	mov	r2, #0
   151fc:	ldrne	r2, [fp, #8]
   15200:	bl	11504 <open64@plt>
   15204:	bl	17558 <__assert_fail@plt+0x5e44>
   15208:	mov	sp, fp
   1520c:	pop	{fp, lr}
   15210:	add	sp, sp, #8
   15214:	bx	lr
   15218:	push	{r4, r5, r6, r7, fp, lr}
   1521c:	add	fp, sp, #16
   15220:	mov	r5, r0
   15224:	mov	r0, r1
   15228:	mov	r1, r2
   1522c:	mov	r2, r3
   15230:	bl	11504 <open64@plt>
   15234:	mov	r4, r0
   15238:	cmp	r0, r5
   1523c:	beq	15278 <__assert_fail@plt+0x3b64>
   15240:	cmp	r4, #0
   15244:	bmi	15278 <__assert_fail@plt+0x3b64>
   15248:	mov	r0, r4
   1524c:	mov	r1, r5
   15250:	bl	11450 <dup2@plt>
   15254:	mov	r5, r0
   15258:	bl	115d0 <__errno_location@plt>
   1525c:	ldr	r7, [r0]
   15260:	mov	r6, r0
   15264:	mov	r0, r4
   15268:	bl	116fc <close@plt>
   1526c:	mov	r0, r5
   15270:	str	r7, [r6]
   15274:	pop	{r4, r5, r6, r7, fp, pc}
   15278:	mov	r0, r4
   1527c:	pop	{r4, r5, r6, r7, fp, pc}
   15280:	push	{r4, sl, fp, lr}
   15284:	add	fp, sp, #8
   15288:	sub	sp, sp, #8
   1528c:	mov	r4, r0
   15290:	cmp	r0, #0
   15294:	beq	152cc <__assert_fail@plt+0x3bb8>
   15298:	mov	r0, r4
   1529c:	bl	11540 <__freading@plt>
   152a0:	cmp	r0, #0
   152a4:	beq	152cc <__assert_fail@plt+0x3bb8>
   152a8:	ldrb	r0, [r4, #1]
   152ac:	tst	r0, #1
   152b0:	beq	152cc <__assert_fail@plt+0x3bb8>
   152b4:	mov	r0, #1
   152b8:	mov	r2, #0
   152bc:	mov	r3, #0
   152c0:	str	r0, [sp]
   152c4:	mov	r0, r4
   152c8:	bl	15304 <__assert_fail@plt+0x3bf0>
   152cc:	mov	r0, r4
   152d0:	sub	sp, fp, #8
   152d4:	pop	{r4, sl, fp, lr}
   152d8:	b	113cc <fflush@plt>
   152dc:	push	{r4, r5, r6, sl, fp, lr}
   152e0:	add	fp, sp, #16
   152e4:	mov	r4, r0
   152e8:	bl	115d0 <__errno_location@plt>
   152ec:	ldr	r6, [r0]
   152f0:	mov	r5, r0
   152f4:	mov	r0, r4
   152f8:	bl	113f0 <free@plt>
   152fc:	str	r6, [r5]
   15300:	pop	{r4, r5, r6, sl, fp, pc}
   15304:	push	{r4, r5, r6, r7, fp, lr}
   15308:	add	fp, sp, #16
   1530c:	sub	sp, sp, #8
   15310:	mov	r4, r0
   15314:	ldr	r0, [r0, #4]
   15318:	mov	r5, r3
   1531c:	mov	r6, r2
   15320:	ldr	r1, [r4, #8]
   15324:	cmp	r1, r0
   15328:	bne	15344 <__assert_fail@plt+0x3c30>
   1532c:	ldrd	r0, [r4, #16]
   15330:	cmp	r1, r0
   15334:	bne	15344 <__assert_fail@plt+0x3c30>
   15338:	ldr	r0, [r4, #36]	; 0x24
   1533c:	cmp	r0, #0
   15340:	beq	1535c <__assert_fail@plt+0x3c48>
   15344:	mov	r0, r4
   15348:	mov	r2, r6
   1534c:	mov	r3, r5
   15350:	sub	sp, fp, #16
   15354:	pop	{r4, r5, r6, r7, fp, lr}
   15358:	b	11654 <fseeko64@plt>
   1535c:	ldr	r7, [fp, #8]
   15360:	mov	r0, r4
   15364:	bl	11618 <fileno@plt>
   15368:	mov	r2, r6
   1536c:	mov	r3, r5
   15370:	str	r7, [sp]
   15374:	bl	114b0 <lseek64@plt>
   15378:	and	r2, r0, r1
   1537c:	cmn	r2, #1
   15380:	beq	153a0 <__assert_fail@plt+0x3c8c>
   15384:	strd	r0, [r4, #80]	; 0x50
   15388:	ldr	r0, [r4]
   1538c:	bic	r0, r0, #16
   15390:	str	r0, [r4]
   15394:	mov	r0, #0
   15398:	sub	sp, fp, #16
   1539c:	pop	{r4, r5, r6, r7, fp, pc}
   153a0:	mvn	r0, #0
   153a4:	sub	sp, fp, #16
   153a8:	pop	{r4, r5, r6, r7, fp, pc}
   153ac:	push	{r4, r5, r6, r7, fp, lr}
   153b0:	add	fp, sp, #16
   153b4:	cmp	r2, #0
   153b8:	beq	15404 <__assert_fail@plt+0x3cf0>
   153bc:	mov	r5, r2
   153c0:	mov	r6, r1
   153c4:	mov	r7, r0
   153c8:	mov	r4, #0
   153cc:	mov	r0, r7
   153d0:	mov	r1, r6
   153d4:	mov	r2, r5
   153d8:	bl	17284 <__assert_fail@plt+0x5b70>
   153dc:	cmn	r0, #1
   153e0:	beq	153fc <__assert_fail@plt+0x3ce8>
   153e4:	cmp	r0, #0
   153e8:	beq	15410 <__assert_fail@plt+0x3cfc>
   153ec:	subs	r5, r5, r0
   153f0:	add	r6, r6, r0
   153f4:	add	r4, r0, r4
   153f8:	bne	153cc <__assert_fail@plt+0x3cb8>
   153fc:	mov	r0, r4
   15400:	pop	{r4, r5, r6, r7, fp, pc}
   15404:	mov	r4, #0
   15408:	mov	r0, r4
   1540c:	pop	{r4, r5, r6, r7, fp, pc}
   15410:	bl	115d0 <__errno_location@plt>
   15414:	mov	r1, #28
   15418:	str	r1, [r0]
   1541c:	mov	r0, r4
   15420:	pop	{r4, r5, r6, r7, fp, pc}
   15424:	push	{r4, r5, r6, sl, fp, lr}
   15428:	add	fp, sp, #16
   1542c:	mov	r5, r0
   15430:	mov	r0, #0
   15434:	mov	r4, r1
   15438:	add	r6, r2, #19
   1543c:	strb	r0, [r2, #20]
   15440:	mov	r0, r5
   15444:	mov	r1, r4
   15448:	mov	r2, #10
   1544c:	mov	r3, #0
   15450:	bl	194b8 <__assert_fail@plt+0x7da4>
   15454:	add	r2, r0, r0, lsl #2
   15458:	sub	r2, r5, r2, lsl #1
   1545c:	orr	r2, r2, #48	; 0x30
   15460:	strb	r2, [r6], #-1
   15464:	rsbs	r2, r5, #9
   15468:	mov	r5, r0
   1546c:	rscs	r2, r4, #0
   15470:	mov	r4, r1
   15474:	bcc	15440 <__assert_fail@plt+0x3d2c>
   15478:	add	r0, r6, #1
   1547c:	pop	{r4, r5, r6, sl, fp, pc}
   15480:	push	{r4, r5, fp, lr}
   15484:	add	fp, sp, #8
   15488:	cmp	r0, #0
   1548c:	beq	15520 <__assert_fail@plt+0x3e0c>
   15490:	mov	r1, #47	; 0x2f
   15494:	mov	r4, r0
   15498:	bl	1169c <strrchr@plt>
   1549c:	cmp	r0, #0
   154a0:	mov	r5, r4
   154a4:	addne	r5, r0, #1
   154a8:	sub	r0, r5, r4
   154ac:	cmp	r0, #7
   154b0:	blt	15504 <__assert_fail@plt+0x3df0>
   154b4:	movw	r1, #43263	; 0xa8ff
   154b8:	sub	r0, r5, #7
   154bc:	mov	r2, #7
   154c0:	movt	r1, #1
   154c4:	bl	116e4 <strncmp@plt>
   154c8:	cmp	r0, #0
   154cc:	bne	15504 <__assert_fail@plt+0x3df0>
   154d0:	movw	r1, #43271	; 0xa907
   154d4:	mov	r0, r5
   154d8:	mov	r2, #3
   154dc:	movt	r1, #1
   154e0:	bl	116e4 <strncmp@plt>
   154e4:	cmp	r0, #0
   154e8:	beq	154f4 <__assert_fail@plt+0x3de0>
   154ec:	mov	r4, r5
   154f0:	b	15504 <__assert_fail@plt+0x3df0>
   154f4:	movw	r0, #45904	; 0xb350
   154f8:	add	r4, r5, #3
   154fc:	movt	r0, #2
   15500:	str	r4, [r0]
   15504:	movw	r0, #45908	; 0xb354
   15508:	movt	r0, #2
   1550c:	str	r4, [r0]
   15510:	movw	r0, #46388	; 0xb534
   15514:	movt	r0, #2
   15518:	str	r4, [r0]
   1551c:	pop	{r4, r5, fp, pc}
   15520:	movw	r0, #45920	; 0xb360
   15524:	mov	r1, #55	; 0x37
   15528:	mov	r2, #1
   1552c:	movt	r0, #2
   15530:	ldr	r3, [r0]
   15534:	movw	r0, #43207	; 0xa8c7
   15538:	movt	r0, #1
   1553c:	bl	114a4 <fwrite@plt>
   15540:	bl	116f0 <abort@plt>
   15544:	push	{r4, r5, r6, sl, fp, lr}
   15548:	add	fp, sp, #16
   1554c:	mov	r4, r0
   15550:	movw	r0, #46392	; 0xb538
   15554:	movt	r0, #2
   15558:	cmp	r4, #0
   1555c:	moveq	r4, r0
   15560:	bl	115d0 <__errno_location@plt>
   15564:	ldr	r6, [r0]
   15568:	mov	r5, r0
   1556c:	mov	r0, r4
   15570:	mov	r1, #48	; 0x30
   15574:	bl	180d0 <__assert_fail@plt+0x69bc>
   15578:	str	r6, [r5]
   1557c:	pop	{r4, r5, r6, sl, fp, pc}
   15580:	movw	r1, #46392	; 0xb538
   15584:	cmp	r0, #0
   15588:	movt	r1, #2
   1558c:	movne	r1, r0
   15590:	ldr	r0, [r1]
   15594:	bx	lr
   15598:	movw	r2, #46392	; 0xb538
   1559c:	cmp	r0, #0
   155a0:	movt	r2, #2
   155a4:	movne	r2, r0
   155a8:	str	r1, [r2]
   155ac:	bx	lr
   155b0:	movw	r3, #46392	; 0xb538
   155b4:	cmp	r0, #0
   155b8:	and	r2, r2, #1
   155bc:	movt	r3, #2
   155c0:	movne	r3, r0
   155c4:	ubfx	r0, r1, #5, #3
   155c8:	and	r1, r1, #31
   155cc:	add	ip, r3, r0, lsl #2
   155d0:	mov	r0, #1
   155d4:	ldr	r3, [ip, #8]
   155d8:	and	r0, r0, r3, lsr r1
   155dc:	eor	r2, r0, r2
   155e0:	eor	r1, r3, r2, lsl r1
   155e4:	str	r1, [ip, #8]
   155e8:	bx	lr
   155ec:	movw	r2, #46392	; 0xb538
   155f0:	cmp	r0, #0
   155f4:	movt	r2, #2
   155f8:	movne	r2, r0
   155fc:	ldr	r0, [r2, #4]
   15600:	str	r1, [r2, #4]
   15604:	bx	lr
   15608:	push	{fp, lr}
   1560c:	mov	fp, sp
   15610:	movw	r3, #46392	; 0xb538
   15614:	cmp	r0, #0
   15618:	movt	r3, #2
   1561c:	movne	r3, r0
   15620:	cmp	r1, #0
   15624:	mov	r0, #10
   15628:	cmpne	r2, #0
   1562c:	str	r0, [r3]
   15630:	bne	15638 <__assert_fail@plt+0x3f24>
   15634:	bl	116f0 <abort@plt>
   15638:	str	r1, [r3, #40]	; 0x28
   1563c:	str	r2, [r3, #44]	; 0x2c
   15640:	pop	{fp, pc}
   15644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15648:	add	fp, sp, #28
   1564c:	sub	sp, sp, #20
   15650:	mov	r7, r0
   15654:	ldr	r0, [fp, #8]
   15658:	movw	r5, #46392	; 0xb538
   1565c:	mov	r8, r3
   15660:	mov	r9, r2
   15664:	mov	sl, r1
   15668:	movt	r5, #2
   1566c:	cmp	r0, #0
   15670:	movne	r5, r0
   15674:	bl	115d0 <__errno_location@plt>
   15678:	ldr	r2, [r5, #40]	; 0x28
   1567c:	ldr	r3, [r5, #44]	; 0x2c
   15680:	mov	r4, r0
   15684:	ldm	r5, {r0, r1}
   15688:	add	r5, r5, #8
   1568c:	ldr	r6, [r4]
   15690:	stm	sp, {r0, r1, r5}
   15694:	mov	r0, r7
   15698:	mov	r1, sl
   1569c:	str	r2, [sp, #12]
   156a0:	str	r3, [sp, #16]
   156a4:	mov	r2, r9
   156a8:	mov	r3, r8
   156ac:	bl	156bc <__assert_fail@plt+0x3fa8>
   156b0:	str	r6, [r4]
   156b4:	sub	sp, fp, #28
   156b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156c0:	add	fp, sp, #28
   156c4:	sub	sp, sp, #156	; 0x9c
   156c8:	mov	r5, r0
   156cc:	add	r0, r2, #1
   156d0:	mov	r6, r1
   156d4:	mov	sl, r3
   156d8:	str	r2, [fp, #-80]	; 0xffffffb0
   156dc:	str	r0, [sp, #72]	; 0x48
   156e0:	ldr	r0, [fp, #12]
   156e4:	and	r1, r0, #1
   156e8:	str	r1, [sp, #36]	; 0x24
   156ec:	and	r1, r0, #4
   156f0:	str	r1, [sp, #32]
   156f4:	ubfx	r9, r0, #1, #1
   156f8:	bl	114c8 <__ctype_get_mb_cur_max@plt>
   156fc:	str	r0, [sp, #40]	; 0x28
   15700:	ldr	r0, [fp, #24]
   15704:	ldr	r7, [fp, #8]
   15708:	mov	r1, #0
   1570c:	str	r5, [fp, #-84]	; 0xffffffac
   15710:	str	r1, [fp, #-56]	; 0xffffffc8
   15714:	mov	r1, #0
   15718:	str	r1, [sp, #60]	; 0x3c
   1571c:	mov	r1, #1
   15720:	str	r1, [fp, #-48]	; 0xffffffd0
   15724:	str	r0, [sp, #80]	; 0x50
   15728:	ldr	r0, [fp, #20]
   1572c:	str	r0, [sp, #76]	; 0x4c
   15730:	mov	r0, #0
   15734:	str	r0, [sp, #56]	; 0x38
   15738:	mov	r0, #0
   1573c:	str	r0, [fp, #-88]	; 0xffffffa8
   15740:	mov	r0, #0
   15744:	str	r0, [fp, #-72]	; 0xffffffb8
   15748:	mov	r0, #0
   1574c:	cmp	r7, #10
   15750:	bhi	166e4 <__assert_fail@plt+0x4fd0>
   15754:	add	r1, pc, #24
   15758:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1575c:	mov	r4, r6
   15760:	mov	r8, #0
   15764:	mov	r2, #1
   15768:	mov	r3, #0
   1576c:	mov	lr, sl
   15770:	ldr	pc, [r1, r7, lsl #2]
   15774:	andeq	r5, r1, r8, lsr r8
   15778:	andeq	r5, r1, ip, lsl #17
   1577c:	andeq	r5, r1, ip, asr #16
   15780:	andeq	r5, r1, r0, lsr r8
   15784:	andeq	r5, r1, r0, lsl #17
   15788:			; <UNDEFINED> instruction: 0x000158b4
   1578c:	andeq	r5, r1, ip, asr r8
   15790:	andeq	r5, r1, r8, lsr r9
   15794:	andeq	r5, r1, r0, lsr #15
   15798:	andeq	r5, r1, r0, lsr #15
   1579c:	andeq	r5, r1, r8, asr #15
   157a0:	movw	r0, #43351	; 0xa957
   157a4:	mov	r1, r7
   157a8:	movt	r0, #1
   157ac:	bl	170ec <__assert_fail@plt+0x59d8>
   157b0:	str	r0, [sp, #76]	; 0x4c
   157b4:	movw	r0, #43353	; 0xa959
   157b8:	mov	r1, r7
   157bc:	movt	r0, #1
   157c0:	bl	170ec <__assert_fail@plt+0x59d8>
   157c4:	str	r0, [sp, #80]	; 0x50
   157c8:	mov	r8, #0
   157cc:	tst	r9, #1
   157d0:	bne	15808 <__assert_fail@plt+0x40f4>
   157d4:	ldr	r0, [sp, #76]	; 0x4c
   157d8:	ldrb	r0, [r0]
   157dc:	cmp	r0, #0
   157e0:	beq	15808 <__assert_fail@plt+0x40f4>
   157e4:	ldr	r1, [sp, #76]	; 0x4c
   157e8:	mov	r8, #0
   157ec:	add	r1, r1, #1
   157f0:	cmp	r8, r4
   157f4:	strbcc	r0, [r5, r8]
   157f8:	ldrb	r0, [r1, r8]
   157fc:	add	r8, r8, #1
   15800:	cmp	r0, #0
   15804:	bne	157f0 <__assert_fail@plt+0x40dc>
   15808:	ldr	r6, [sp, #80]	; 0x50
   1580c:	mov	r0, r6
   15810:	bl	11588 <strlen@plt>
   15814:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15818:	str	r0, [fp, #-72]	; 0xffffffb8
   1581c:	str	r6, [fp, #-88]	; 0xffffffa8
   15820:	mov	r2, #1
   15824:	mov	r3, r9
   15828:	mov	lr, sl
   1582c:	b	15938 <__assert_fail@plt+0x4224>
   15830:	mov	r0, #1
   15834:	b	1588c <__assert_fail@plt+0x4178>
   15838:	mov	r7, #0
   1583c:	mov	r8, #0
   15840:	mov	r2, r0
   15844:	mov	r3, #0
   15848:	b	15938 <__assert_fail@plt+0x4224>
   1584c:	tst	r9, #1
   15850:	bne	1588c <__assert_fail@plt+0x4178>
   15854:	mov	r2, r0
   15858:	b	158e4 <__assert_fail@plt+0x41d0>
   1585c:	mov	r0, #1
   15860:	mov	r8, #0
   15864:	mov	r7, #5
   15868:	mov	r2, #1
   1586c:	str	r0, [fp, #-72]	; 0xffffffb8
   15870:	movw	r0, #42448	; 0xa5d0
   15874:	movt	r0, #1
   15878:	str	r0, [fp, #-88]	; 0xffffffa8
   1587c:	b	158ac <__assert_fail@plt+0x4198>
   15880:	mov	r2, #1
   15884:	tst	r9, #1
   15888:	beq	158e4 <__assert_fail@plt+0x41d0>
   1588c:	mov	r1, #1
   15890:	mov	r8, #0
   15894:	mov	r7, #2
   15898:	mov	r2, r0
   1589c:	str	r1, [fp, #-72]	; 0xffffffb8
   158a0:	movw	r1, #43353	; 0xa959
   158a4:	movt	r1, #1
   158a8:	str	r1, [fp, #-88]	; 0xffffffa8
   158ac:	mov	r3, #1
   158b0:	b	15938 <__assert_fail@plt+0x4224>
   158b4:	tst	r9, #1
   158b8:	beq	15908 <__assert_fail@plt+0x41f4>
   158bc:	mov	r0, #1
   158c0:	mov	r8, #0
   158c4:	mov	r2, #1
   158c8:	mov	r3, #1
   158cc:	mov	r7, #5
   158d0:	str	r0, [fp, #-72]	; 0xffffffb8
   158d4:	movw	r0, #42448	; 0xa5d0
   158d8:	movt	r0, #1
   158dc:	str	r0, [fp, #-88]	; 0xffffffa8
   158e0:	b	15938 <__assert_fail@plt+0x4224>
   158e4:	cmp	r4, #0
   158e8:	mov	r8, #1
   158ec:	mov	r3, #0
   158f0:	mov	r7, #2
   158f4:	movne	r0, #39	; 0x27
   158f8:	strbne	r0, [r5]
   158fc:	movw	r0, #43353	; 0xa959
   15900:	movt	r0, #1
   15904:	b	1592c <__assert_fail@plt+0x4218>
   15908:	cmp	r4, #0
   1590c:	mov	r8, #1
   15910:	mov	r2, #1
   15914:	mov	r7, #5
   15918:	mov	r3, #0
   1591c:	movne	r0, #34	; 0x22
   15920:	strbne	r0, [r5]
   15924:	movw	r0, #42448	; 0xa5d0
   15928:	movt	r0, #1
   1592c:	str	r0, [fp, #-88]	; 0xffffffa8
   15930:	mov	r0, #1
   15934:	str	r0, [fp, #-72]	; 0xffffffb8
   15938:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1593c:	eor	r6, r3, #1
   15940:	str	r7, [fp, #-68]	; 0xffffffbc
   15944:	str	r3, [fp, #-76]	; 0xffffffb4
   15948:	str	r2, [sp, #84]	; 0x54
   1594c:	str	r6, [sp, #92]	; 0x5c
   15950:	cmp	r0, #0
   15954:	movwne	r0, #1
   15958:	and	r1, r0, r3
   1595c:	and	r1, r2, r1
   15960:	str	r1, [sp, #48]	; 0x30
   15964:	sub	r1, r7, #2
   15968:	clz	r1, r1
   1596c:	lsr	r1, r1, #5
   15970:	and	r1, r1, r3
   15974:	str	r1, [sp, #64]	; 0x40
   15978:	subs	r1, r7, #2
   1597c:	mov	r7, #0
   15980:	movwne	r1, #1
   15984:	orr	r6, r1, r6
   15988:	and	r1, r1, r2
   1598c:	and	r0, r0, r1
   15990:	str	r6, [sp, #68]	; 0x44
   15994:	str	r0, [fp, #-60]	; 0xffffffc4
   15998:	orr	r0, r1, r3
   1599c:	ldr	r1, [fp, #16]
   159a0:	eor	r0, r0, #1
   159a4:	clz	r1, r1
   159a8:	lsr	r1, r1, #5
   159ac:	orr	r0, r1, r0
   159b0:	str	r0, [fp, #-64]	; 0xffffffc0
   159b4:	eor	r0, r2, #1
   159b8:	str	r0, [sp, #52]	; 0x34
   159bc:	cmn	lr, #1
   159c0:	beq	159d0 <__assert_fail@plt+0x42bc>
   159c4:	cmp	r7, lr
   159c8:	bne	159dc <__assert_fail@plt+0x42c8>
   159cc:	b	16524 <__assert_fail@plt+0x4e10>
   159d0:	ldrb	r0, [ip, r7]
   159d4:	cmp	r0, #0
   159d8:	beq	1652c <__assert_fail@plt+0x4e18>
   159dc:	ldr	r0, [fp, #-60]	; 0xffffffc4
   159e0:	mov	sl, #0
   159e4:	cmp	r0, #0
   159e8:	beq	15a20 <__assert_fail@plt+0x430c>
   159ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   159f0:	add	r5, r7, r0
   159f4:	cmp	r0, #2
   159f8:	bcc	15a14 <__assert_fail@plt+0x4300>
   159fc:	cmn	lr, #1
   15a00:	bne	15a14 <__assert_fail@plt+0x4300>
   15a04:	mov	r0, ip
   15a08:	bl	11588 <strlen@plt>
   15a0c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15a10:	mov	lr, r0
   15a14:	cmp	r5, lr
   15a18:	bls	15a28 <__assert_fail@plt+0x4314>
   15a1c:	ldr	r5, [fp, #-84]	; 0xffffffac
   15a20:	mov	r0, #0
   15a24:	b	15a74 <__assert_fail@plt+0x4360>
   15a28:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15a2c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   15a30:	add	r0, ip, r7
   15a34:	mov	r6, r4
   15a38:	mov	r4, lr
   15a3c:	bl	1157c <bcmp@plt>
   15a40:	ldr	r2, [sp, #92]	; 0x5c
   15a44:	cmp	r0, #0
   15a48:	ldr	r5, [fp, #-84]	; 0xffffffac
   15a4c:	mov	r1, r0
   15a50:	movwne	r1, #1
   15a54:	orr	r1, r1, r2
   15a58:	tst	r1, #1
   15a5c:	beq	165b4 <__assert_fail@plt+0x4ea0>
   15a60:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15a64:	clz	r0, r0
   15a68:	mov	lr, r4
   15a6c:	mov	r4, r6
   15a70:	lsr	r0, r0, #5
   15a74:	str	r0, [fp, #-52]	; 0xffffffcc
   15a78:	ldrb	r6, [ip, r7]
   15a7c:	cmp	r6, #126	; 0x7e
   15a80:	bhi	15fb0 <__assert_fail@plt+0x489c>
   15a84:	add	r3, pc, #16
   15a88:	mov	r9, #1
   15a8c:	mov	r2, #110	; 0x6e
   15a90:	mov	r0, #97	; 0x61
   15a94:	mov	r1, #0
   15a98:	ldr	pc, [r3, r6, lsl #2]
   15a9c:	andeq	r5, r1, r0, lsl lr
   15aa0:			; <UNDEFINED> instruction: 0x00015fb0
   15aa4:			; <UNDEFINED> instruction: 0x00015fb0
   15aa8:			; <UNDEFINED> instruction: 0x00015fb0
   15aac:			; <UNDEFINED> instruction: 0x00015fb0
   15ab0:			; <UNDEFINED> instruction: 0x00015fb0
   15ab4:			; <UNDEFINED> instruction: 0x00015fb0
   15ab8:	andeq	r6, r1, ip, lsl #1
   15abc:	strdeq	r5, [r1], -r0
   15ac0:	andeq	r5, r1, r8, ror #27
   15ac4:	strdeq	r5, [r1], -ip
   15ac8:	andeq	r5, r1, r8, lsl pc
   15acc:	andeq	r5, r1, r0, ror #27
   15ad0:	strdeq	r5, [r1], -r8
   15ad4:			; <UNDEFINED> instruction: 0x00015fb0
   15ad8:			; <UNDEFINED> instruction: 0x00015fb0
   15adc:			; <UNDEFINED> instruction: 0x00015fb0
   15ae0:			; <UNDEFINED> instruction: 0x00015fb0
   15ae4:			; <UNDEFINED> instruction: 0x00015fb0
   15ae8:			; <UNDEFINED> instruction: 0x00015fb0
   15aec:			; <UNDEFINED> instruction: 0x00015fb0
   15af0:			; <UNDEFINED> instruction: 0x00015fb0
   15af4:			; <UNDEFINED> instruction: 0x00015fb0
   15af8:			; <UNDEFINED> instruction: 0x00015fb0
   15afc:			; <UNDEFINED> instruction: 0x00015fb0
   15b00:			; <UNDEFINED> instruction: 0x00015fb0
   15b04:			; <UNDEFINED> instruction: 0x00015fb0
   15b08:			; <UNDEFINED> instruction: 0x00015fb0
   15b0c:			; <UNDEFINED> instruction: 0x00015fb0
   15b10:			; <UNDEFINED> instruction: 0x00015fb0
   15b14:			; <UNDEFINED> instruction: 0x00015fb0
   15b18:			; <UNDEFINED> instruction: 0x00015fb0
   15b1c:	muleq	r1, r4, sp
   15b20:	muleq	r1, r8, sp
   15b24:	muleq	r1, r8, sp
   15b28:	andeq	r5, r1, r0, lsl #27
   15b2c:	muleq	r1, r8, sp
   15b30:	muleq	r1, r8, ip
   15b34:	muleq	r1, r8, sp
   15b38:	andeq	r5, r1, r0, lsr #30
   15b3c:	muleq	r1, r8, sp
   15b40:	muleq	r1, r8, sp
   15b44:	muleq	r1, r8, sp
   15b48:	muleq	r1, r8, ip
   15b4c:	muleq	r1, r8, ip
   15b50:	muleq	r1, r8, ip
   15b54:	muleq	r1, r8, ip
   15b58:	muleq	r1, r8, ip
   15b5c:	muleq	r1, r8, ip
   15b60:	muleq	r1, r8, ip
   15b64:	muleq	r1, r8, ip
   15b68:	muleq	r1, r8, ip
   15b6c:	muleq	r1, r8, ip
   15b70:	muleq	r1, r8, ip
   15b74:	muleq	r1, r8, ip
   15b78:	muleq	r1, r8, ip
   15b7c:	muleq	r1, r8, ip
   15b80:	muleq	r1, r8, ip
   15b84:	muleq	r1, r8, ip
   15b88:	muleq	r1, r8, sp
   15b8c:	muleq	r1, r8, sp
   15b90:	muleq	r1, r8, sp
   15b94:	muleq	r1, r8, sp
   15b98:	andeq	r5, r1, r8, ror #29
   15b9c:			; <UNDEFINED> instruction: 0x00015fb0
   15ba0:	muleq	r1, r8, ip
   15ba4:	muleq	r1, r8, ip
   15ba8:	muleq	r1, r8, ip
   15bac:	muleq	r1, r8, ip
   15bb0:	muleq	r1, r8, ip
   15bb4:	muleq	r1, r8, ip
   15bb8:	muleq	r1, r8, ip
   15bbc:	muleq	r1, r8, ip
   15bc0:	muleq	r1, r8, ip
   15bc4:	muleq	r1, r8, ip
   15bc8:	muleq	r1, r8, ip
   15bcc:	muleq	r1, r8, ip
   15bd0:	muleq	r1, r8, ip
   15bd4:	muleq	r1, r8, ip
   15bd8:	muleq	r1, r8, ip
   15bdc:	muleq	r1, r8, ip
   15be0:	muleq	r1, r8, ip
   15be4:	muleq	r1, r8, ip
   15be8:	muleq	r1, r8, ip
   15bec:	muleq	r1, r8, ip
   15bf0:	muleq	r1, r8, ip
   15bf4:	muleq	r1, r8, ip
   15bf8:	muleq	r1, r8, ip
   15bfc:	muleq	r1, r8, ip
   15c00:	muleq	r1, r8, ip
   15c04:	muleq	r1, r8, ip
   15c08:	muleq	r1, r8, sp
   15c0c:	andeq	r5, r1, r0, asr #27
   15c10:	muleq	r1, r8, ip
   15c14:	muleq	r1, r8, sp
   15c18:	muleq	r1, r8, ip
   15c1c:	muleq	r1, r8, sp
   15c20:	muleq	r1, r8, ip
   15c24:	muleq	r1, r8, ip
   15c28:	muleq	r1, r8, ip
   15c2c:	muleq	r1, r8, ip
   15c30:	muleq	r1, r8, ip
   15c34:	muleq	r1, r8, ip
   15c38:	muleq	r1, r8, ip
   15c3c:	muleq	r1, r8, ip
   15c40:	muleq	r1, r8, ip
   15c44:	muleq	r1, r8, ip
   15c48:	muleq	r1, r8, ip
   15c4c:	muleq	r1, r8, ip
   15c50:	muleq	r1, r8, ip
   15c54:	muleq	r1, r8, ip
   15c58:	muleq	r1, r8, ip
   15c5c:	muleq	r1, r8, ip
   15c60:	muleq	r1, r8, ip
   15c64:	muleq	r1, r8, ip
   15c68:	muleq	r1, r8, ip
   15c6c:	muleq	r1, r8, ip
   15c70:	muleq	r1, r8, ip
   15c74:	muleq	r1, r8, ip
   15c78:	muleq	r1, r8, ip
   15c7c:	muleq	r1, r8, ip
   15c80:	muleq	r1, r8, ip
   15c84:	muleq	r1, r8, ip
   15c88:	andeq	r5, r1, r4, asr sp
   15c8c:	muleq	r1, r8, sp
   15c90:	andeq	r5, r1, r4, asr sp
   15c94:	andeq	r5, r1, r0, lsl #27
   15c98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15c9c:	tst	r0, #1
   15ca0:	bne	15ccc <__assert_fail@plt+0x45b8>
   15ca4:	ldr	r1, [fp, #16]
   15ca8:	ubfx	r0, r6, #5, #3
   15cac:	mov	r2, #1
   15cb0:	ldr	r0, [r1, r0, lsl #2]
   15cb4:	and	r1, r6, #31
   15cb8:	tst	r0, r2, lsl r1
   15cbc:	beq	15ccc <__assert_fail@plt+0x45b8>
   15cc0:	mov	r0, r6
   15cc4:	mov	r1, r9
   15cc8:	b	15ce0 <__assert_fail@plt+0x45cc>
   15ccc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   15cd0:	mov	r1, r9
   15cd4:	cmp	r0, #0
   15cd8:	mov	r0, r6
   15cdc:	beq	16020 <__assert_fail@plt+0x490c>
   15ce0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15ce4:	tst	r2, #1
   15ce8:	bne	165f0 <__assert_fail@plt+0x4edc>
   15cec:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15cf0:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15cf4:	subs	r2, r2, #2
   15cf8:	movwne	r2, #1
   15cfc:	orr	r2, r2, r3
   15d00:	tst	r2, #1
   15d04:	bne	15d40 <__assert_fail@plt+0x462c>
   15d08:	cmp	r8, r4
   15d0c:	movcc	r2, #39	; 0x27
   15d10:	strbcc	r2, [r5, r8]
   15d14:	add	r2, r8, #1
   15d18:	cmp	r2, r4
   15d1c:	movcc	r3, #36	; 0x24
   15d20:	strbcc	r3, [r5, r2]
   15d24:	add	r2, r8, #2
   15d28:	add	r8, r8, #3
   15d2c:	cmp	r2, r4
   15d30:	movcc	r3, #39	; 0x27
   15d34:	strbcc	r3, [r5, r2]
   15d38:	mov	r2, #1
   15d3c:	str	r2, [fp, #-56]	; 0xffffffc8
   15d40:	cmp	r8, r4
   15d44:	movcc	r2, #92	; 0x5c
   15d48:	strbcc	r2, [r5, r8]
   15d4c:	add	r8, r8, #1
   15d50:	b	16064 <__assert_fail@plt+0x4950>
   15d54:	cmp	lr, #1
   15d58:	beq	15d80 <__assert_fail@plt+0x466c>
   15d5c:	mov	r9, #0
   15d60:	cmn	lr, #1
   15d64:	bne	15d8c <__assert_fail@plt+0x4678>
   15d68:	ldrb	r0, [ip, #1]
   15d6c:	cmp	r0, #0
   15d70:	beq	15d80 <__assert_fail@plt+0x466c>
   15d74:	mvn	lr, #0
   15d78:	mov	sl, #0
   15d7c:	b	15c98 <__assert_fail@plt+0x4584>
   15d80:	mov	r9, #0
   15d84:	cmp	r7, #0
   15d88:	beq	15d94 <__assert_fail@plt+0x4680>
   15d8c:	mov	sl, #0
   15d90:	b	15c98 <__assert_fail@plt+0x4584>
   15d94:	mov	r1, #1
   15d98:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15d9c:	cmp	r0, #2
   15da0:	bne	15db8 <__assert_fail@plt+0x46a4>
   15da4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15da8:	mov	r9, r1
   15dac:	tst	r0, #1
   15db0:	beq	15c98 <__assert_fail@plt+0x4584>
   15db4:	b	165f0 <__assert_fail@plt+0x4edc>
   15db8:	mov	r9, r1
   15dbc:	b	15c98 <__assert_fail@plt+0x4584>
   15dc0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15dc4:	cmp	r0, #2
   15dc8:	bne	16004 <__assert_fail@plt+0x48f0>
   15dcc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15dd0:	tst	r0, #1
   15dd4:	bne	165f0 <__assert_fail@plt+0x4edc>
   15dd8:	mov	sl, #0
   15ddc:	b	16018 <__assert_fail@plt+0x4904>
   15de0:	mov	r0, #102	; 0x66
   15de4:	b	1608c <__assert_fail@plt+0x4978>
   15de8:	mov	r2, #116	; 0x74
   15dec:	b	15dfc <__assert_fail@plt+0x46e8>
   15df0:	mov	r0, #98	; 0x62
   15df4:	b	1608c <__assert_fail@plt+0x4978>
   15df8:	mov	r2, #114	; 0x72
   15dfc:	ldr	r0, [sp, #68]	; 0x44
   15e00:	tst	r0, #1
   15e04:	mov	r0, r2
   15e08:	bne	1608c <__assert_fail@plt+0x4978>
   15e0c:	b	165f0 <__assert_fail@plt+0x4edc>
   15e10:	ldr	r0, [sp, #84]	; 0x54
   15e14:	tst	r0, #1
   15e18:	beq	160a8 <__assert_fail@plt+0x4994>
   15e1c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15e20:	tst	r0, #1
   15e24:	bne	166dc <__assert_fail@plt+0x4fc8>
   15e28:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15e2c:	ldr	r1, [fp, #-56]	; 0xffffffc8
   15e30:	subs	r0, r0, #2
   15e34:	movwne	r0, #1
   15e38:	orr	r0, r0, r1
   15e3c:	tst	r0, #1
   15e40:	bne	15e7c <__assert_fail@plt+0x4768>
   15e44:	cmp	r8, r4
   15e48:	movcc	r0, #39	; 0x27
   15e4c:	strbcc	r0, [r5, r8]
   15e50:	add	r0, r8, #1
   15e54:	cmp	r0, r4
   15e58:	movcc	r1, #36	; 0x24
   15e5c:	strbcc	r1, [r5, r0]
   15e60:	add	r0, r8, #2
   15e64:	add	r8, r8, #3
   15e68:	cmp	r0, r4
   15e6c:	movcc	r1, #39	; 0x27
   15e70:	strbcc	r1, [r5, r0]
   15e74:	mov	r0, #1
   15e78:	str	r0, [fp, #-56]	; 0xffffffc8
   15e7c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15e80:	cmp	r8, r4
   15e84:	mov	r9, #0
   15e88:	mov	sl, #1
   15e8c:	mov	r6, #48	; 0x30
   15e90:	movcc	r0, #92	; 0x5c
   15e94:	strbcc	r0, [r5, r8]
   15e98:	add	r0, r8, #1
   15e9c:	cmp	r1, #2
   15ea0:	beq	16270 <__assert_fail@plt+0x4b5c>
   15ea4:	add	r1, r7, #1
   15ea8:	cmp	r1, lr
   15eac:	bcs	16270 <__assert_fail@plt+0x4b5c>
   15eb0:	ldrb	r1, [ip, r1]
   15eb4:	sub	r1, r1, #48	; 0x30
   15eb8:	uxtb	r1, r1
   15ebc:	cmp	r1, #9
   15ec0:	bhi	16270 <__assert_fail@plt+0x4b5c>
   15ec4:	cmp	r0, r4
   15ec8:	movcc	r1, #48	; 0x30
   15ecc:	strbcc	r1, [r5, r0]
   15ed0:	add	r0, r8, #2
   15ed4:	add	r8, r8, #3
   15ed8:	cmp	r0, r4
   15edc:	movcc	r1, #48	; 0x30
   15ee0:	strbcc	r1, [r5, r0]
   15ee4:	b	15c98 <__assert_fail@plt+0x4584>
   15ee8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15eec:	mov	sl, #0
   15ef0:	mov	r6, #63	; 0x3f
   15ef4:	cmp	r0, #5
   15ef8:	beq	16278 <__assert_fail@plt+0x4b64>
   15efc:	cmp	r0, #2
   15f00:	bne	16320 <__assert_fail@plt+0x4c0c>
   15f04:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15f08:	mov	r9, #0
   15f0c:	tst	r0, #1
   15f10:	beq	15c98 <__assert_fail@plt+0x4584>
   15f14:	b	165f0 <__assert_fail@plt+0x4edc>
   15f18:	mov	r0, #118	; 0x76
   15f1c:	b	1608c <__assert_fail@plt+0x4978>
   15f20:	mov	r0, #1
   15f24:	mov	r6, #39	; 0x27
   15f28:	str	r0, [sp, #60]	; 0x3c
   15f2c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15f30:	cmp	r0, #2
   15f34:	bne	160c4 <__assert_fail@plt+0x49b0>
   15f38:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15f3c:	tst	r0, #1
   15f40:	bne	165f0 <__assert_fail@plt+0x4edc>
   15f44:	ldr	r2, [sp, #56]	; 0x38
   15f48:	clz	r1, r4
   15f4c:	mov	sl, #0
   15f50:	mov	r9, #1
   15f54:	lsr	r1, r1, #5
   15f58:	cmp	r2, #0
   15f5c:	mov	r0, r2
   15f60:	movwne	r0, #1
   15f64:	orrs	r0, r0, r1
   15f68:	moveq	r2, r4
   15f6c:	moveq	r4, r0
   15f70:	cmp	r8, r4
   15f74:	str	r2, [sp, #56]	; 0x38
   15f78:	movcc	r0, #39	; 0x27
   15f7c:	strbcc	r0, [r5, r8]
   15f80:	add	r0, r8, #1
   15f84:	cmp	r0, r4
   15f88:	movcc	r1, #92	; 0x5c
   15f8c:	strbcc	r1, [r5, r0]
   15f90:	add	r0, r8, #2
   15f94:	add	r8, r8, #3
   15f98:	cmp	r0, r4
   15f9c:	movcc	r1, #39	; 0x27
   15fa0:	strbcc	r1, [r5, r0]
   15fa4:	mov	r0, #0
   15fa8:	str	r0, [fp, #-56]	; 0xffffffc8
   15fac:	b	15c98 <__assert_fail@plt+0x4584>
   15fb0:	ldr	r0, [sp, #40]	; 0x28
   15fb4:	str	r4, [sp, #88]	; 0x58
   15fb8:	cmp	r0, #1
   15fbc:	bne	160cc <__assert_fail@plt+0x49b8>
   15fc0:	str	lr, [sp, #28]
   15fc4:	bl	11564 <__ctype_b_loc@plt>
   15fc8:	ldr	r0, [r0]
   15fcc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15fd0:	mov	r2, #1
   15fd4:	add	r0, r0, r6, lsl #1
   15fd8:	ldrb	r0, [r0, #1]
   15fdc:	ubfx	r9, r0, #6, #1
   15fe0:	ldr	r0, [sp, #52]	; 0x34
   15fe4:	cmp	r2, #1
   15fe8:	orr	r0, r9, r0
   15fec:	bhi	16328 <__assert_fail@plt+0x4c14>
   15ff0:	tst	r0, #1
   15ff4:	beq	16328 <__assert_fail@plt+0x4c14>
   15ff8:	ldr	lr, [sp, #28]
   15ffc:	ldr	r4, [sp, #88]	; 0x58
   16000:	b	15c98 <__assert_fail@plt+0x4584>
   16004:	ldr	r1, [sp, #48]	; 0x30
   16008:	mov	sl, #0
   1600c:	mov	r0, #92	; 0x5c
   16010:	cmp	r1, #0
   16014:	beq	1608c <__assert_fail@plt+0x4978>
   16018:	mov	r6, #92	; 0x5c
   1601c:	mov	r9, #0
   16020:	cmp	sl, #0
   16024:	bne	1605c <__assert_fail@plt+0x4948>
   16028:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1602c:	tst	r0, #1
   16030:	beq	1605c <__assert_fail@plt+0x4948>
   16034:	cmp	r8, r4
   16038:	movcc	r0, #39	; 0x27
   1603c:	strbcc	r0, [r5, r8]
   16040:	add	r0, r8, #1
   16044:	add	r8, r8, #2
   16048:	cmp	r0, r4
   1604c:	movcc	r1, #39	; 0x27
   16050:	strbcc	r1, [r5, r0]
   16054:	mov	r0, #0
   16058:	str	r0, [fp, #-56]	; 0xffffffc8
   1605c:	mov	r1, r9
   16060:	mov	r0, r6
   16064:	cmp	r8, r4
   16068:	strbcc	r0, [r5, r8]
   1606c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16070:	add	r8, r8, #1
   16074:	and	r0, r0, r1
   16078:	str	r0, [fp, #-48]	; 0xffffffd0
   1607c:	add	r7, r7, #1
   16080:	cmn	lr, #1
   16084:	bne	159c4 <__assert_fail@plt+0x42b0>
   16088:	b	159d0 <__assert_fail@plt+0x42bc>
   1608c:	ldr	r1, [sp, #84]	; 0x54
   16090:	mov	sl, #0
   16094:	mov	r9, #0
   16098:	tst	r1, #1
   1609c:	mov	r1, #0
   160a0:	beq	15c98 <__assert_fail@plt+0x4584>
   160a4:	b	15ce0 <__assert_fail@plt+0x45cc>
   160a8:	ldr	r0, [sp, #36]	; 0x24
   160ac:	mov	r6, #0
   160b0:	mov	sl, #0
   160b4:	mov	r9, #0
   160b8:	cmp	r0, #0
   160bc:	beq	15c98 <__assert_fail@plt+0x4584>
   160c0:	b	1607c <__assert_fail@plt+0x4968>
   160c4:	mov	r9, #1
   160c8:	b	15c98 <__assert_fail@plt+0x4584>
   160cc:	mov	r0, #0
   160d0:	cmn	lr, #1
   160d4:	sub	r4, fp, #40	; 0x28
   160d8:	str	r0, [fp, #-36]	; 0xffffffdc
   160dc:	str	r0, [fp, #-40]	; 0xffffffd8
   160e0:	bne	160f4 <__assert_fail@plt+0x49e0>
   160e4:	mov	r0, ip
   160e8:	bl	11588 <strlen@plt>
   160ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   160f0:	mov	lr, r0
   160f4:	ldr	r0, [sp, #72]	; 0x48
   160f8:	mov	r9, #1
   160fc:	mov	r2, #0
   16100:	str	lr, [sp, #28]
   16104:	add	r0, r0, r7
   16108:	str	r0, [sp, #20]
   1610c:	b	16150 <__assert_fail@plt+0x4a3c>
   16110:	ldr	r5, [sp, #44]	; 0x2c
   16114:	add	r5, r0, r5
   16118:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1611c:	bl	11480 <iswprint@plt>
   16120:	cmp	r0, #0
   16124:	sub	r4, fp, #40	; 0x28
   16128:	movwne	r0, #1
   1612c:	and	r9, r9, r0
   16130:	mov	r0, r4
   16134:	bl	11420 <mbsinit@plt>
   16138:	mov	r2, r5
   1613c:	ldr	lr, [sp, #28]
   16140:	ldr	r5, [fp, #-84]	; 0xffffffac
   16144:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16148:	cmp	r0, #0
   1614c:	bne	15fe0 <__assert_fail@plt+0x48cc>
   16150:	add	r0, r2, r7
   16154:	str	r2, [sp, #44]	; 0x2c
   16158:	mov	r3, r4
   1615c:	add	r1, ip, r0
   16160:	str	r0, [sp, #24]
   16164:	sub	r2, lr, r0
   16168:	sub	r0, fp, #44	; 0x2c
   1616c:	bl	19120 <__assert_fail@plt+0x7a0c>
   16170:	cmp	r0, #0
   16174:	beq	16518 <__assert_fail@plt+0x4e04>
   16178:	cmn	r0, #1
   1617c:	beq	164d4 <__assert_fail@plt+0x4dc0>
   16180:	ldr	lr, [sp, #28]
   16184:	cmn	r0, #2
   16188:	beq	164dc <__assert_fail@plt+0x4dc8>
   1618c:	ldr	r2, [sp, #64]	; 0x40
   16190:	ldr	r4, [sp, #88]	; 0x58
   16194:	ldr	ip, [sp, #84]	; 0x54
   16198:	cmp	r0, #2
   1619c:	mov	r1, #0
   161a0:	movwcc	r1, #1
   161a4:	eor	r2, r2, #1
   161a8:	orrs	r1, r2, r1
   161ac:	bne	16110 <__assert_fail@plt+0x49fc>
   161b0:	ldr	r1, [sp, #44]	; 0x2c
   161b4:	ldr	r2, [sp, #20]
   161b8:	add	r1, r2, r1
   161bc:	sub	r2, r0, #1
   161c0:	b	161d0 <__assert_fail@plt+0x4abc>
   161c4:	add	r1, r1, #1
   161c8:	subs	r2, r2, #1
   161cc:	beq	16110 <__assert_fail@plt+0x49fc>
   161d0:	ldrb	r3, [r1]
   161d4:	sub	r3, r3, #91	; 0x5b
   161d8:	cmp	r3, #33	; 0x21
   161dc:	bhi	161c4 <__assert_fail@plt+0x4ab0>
   161e0:	add	r5, pc, #0
   161e4:	ldr	pc, [r5, r3, lsl #2]
   161e8:	andeq	r6, r1, ip, asr #11
   161ec:	andeq	r6, r1, ip, asr #11
   161f0:	andeq	r6, r1, r4, asr #3
   161f4:	andeq	r6, r1, ip, asr #11
   161f8:	andeq	r6, r1, r4, asr #3
   161fc:	andeq	r6, r1, ip, asr #11
   16200:	andeq	r6, r1, r4, asr #3
   16204:	andeq	r6, r1, r4, asr #3
   16208:	andeq	r6, r1, r4, asr #3
   1620c:	andeq	r6, r1, r4, asr #3
   16210:	andeq	r6, r1, r4, asr #3
   16214:	andeq	r6, r1, r4, asr #3
   16218:	andeq	r6, r1, r4, asr #3
   1621c:	andeq	r6, r1, r4, asr #3
   16220:	andeq	r6, r1, r4, asr #3
   16224:	andeq	r6, r1, r4, asr #3
   16228:	andeq	r6, r1, r4, asr #3
   1622c:	andeq	r6, r1, r4, asr #3
   16230:	andeq	r6, r1, r4, asr #3
   16234:	andeq	r6, r1, r4, asr #3
   16238:	andeq	r6, r1, r4, asr #3
   1623c:	andeq	r6, r1, r4, asr #3
   16240:	andeq	r6, r1, r4, asr #3
   16244:	andeq	r6, r1, r4, asr #3
   16248:	andeq	r6, r1, r4, asr #3
   1624c:	andeq	r6, r1, r4, asr #3
   16250:	andeq	r6, r1, r4, asr #3
   16254:	andeq	r6, r1, r4, asr #3
   16258:	andeq	r6, r1, r4, asr #3
   1625c:	andeq	r6, r1, r4, asr #3
   16260:	andeq	r6, r1, r4, asr #3
   16264:	andeq	r6, r1, r4, asr #3
   16268:	andeq	r6, r1, r4, asr #3
   1626c:	andeq	r6, r1, ip, asr #11
   16270:	mov	r8, r0
   16274:	b	15c98 <__assert_fail@plt+0x4584>
   16278:	ldr	r0, [sp, #32]
   1627c:	cmp	r0, #0
   16280:	beq	16320 <__assert_fail@plt+0x4c0c>
   16284:	add	r0, r7, #2
   16288:	cmp	r0, lr
   1628c:	bcs	16320 <__assert_fail@plt+0x4c0c>
   16290:	add	r1, r7, ip
   16294:	ldrb	r1, [r1, #1]
   16298:	cmp	r1, #63	; 0x3f
   1629c:	bne	16320 <__assert_fail@plt+0x4c0c>
   162a0:	ldrb	r9, [ip, r0]
   162a4:	sub	r2, r9, #33	; 0x21
   162a8:	cmp	r2, #29
   162ac:	bhi	16320 <__assert_fail@plt+0x4c0c>
   162b0:	movw	r1, #20929	; 0x51c1
   162b4:	mov	r3, #1
   162b8:	movt	r1, #14336	; 0x3800
   162bc:	tst	r1, r3, lsl r2
   162c0:	beq	16320 <__assert_fail@plt+0x4c0c>
   162c4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   162c8:	tst	r1, #1
   162cc:	bne	165f0 <__assert_fail@plt+0x4edc>
   162d0:	cmp	r8, r4
   162d4:	add	r2, r8, #1
   162d8:	mov	r6, r9
   162dc:	mov	r7, r0
   162e0:	mov	r9, #0
   162e4:	movcc	r1, #63	; 0x3f
   162e8:	strbcc	r1, [r5, r8]
   162ec:	cmp	r2, r4
   162f0:	movcc	r1, #34	; 0x22
   162f4:	strbcc	r1, [r5, r2]
   162f8:	add	r2, r8, #2
   162fc:	cmp	r2, r4
   16300:	movcc	r1, #34	; 0x22
   16304:	strbcc	r1, [r5, r2]
   16308:	add	r2, r8, #3
   1630c:	add	r8, r8, #4
   16310:	cmp	r2, r4
   16314:	movcc	r1, #63	; 0x3f
   16318:	strbcc	r1, [r5, r2]
   1631c:	b	15c98 <__assert_fail@plt+0x4584>
   16320:	mov	r9, #0
   16324:	b	15c98 <__assert_fail@plt+0x4584>
   16328:	ldr	lr, [sp, #28]
   1632c:	ldr	r4, [fp, #-56]	; 0xffffffc8
   16330:	add	r1, r2, r7
   16334:	mov	r2, #0
   16338:	str	r1, [sp, #44]	; 0x2c
   1633c:	tst	r0, #1
   16340:	bne	1645c <__assert_fail@plt+0x4d48>
   16344:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16348:	tst	r1, #1
   1634c:	bne	165ec <__assert_fail@plt+0x4ed8>
   16350:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16354:	subs	r2, r1, #2
   16358:	movwne	r2, #1
   1635c:	orr	r2, r2, r4
   16360:	tst	r2, #1
   16364:	bne	163a8 <__assert_fail@plt+0x4c94>
   16368:	ldr	r1, [sp, #88]	; 0x58
   1636c:	add	r2, r8, #1
   16370:	mov	r4, #1
   16374:	cmp	r8, r1
   16378:	movcc	r1, #39	; 0x27
   1637c:	strbcc	r1, [r5, r8]
   16380:	ldr	r1, [sp, #88]	; 0x58
   16384:	cmp	r2, r1
   16388:	movcc	r1, #36	; 0x24
   1638c:	strbcc	r1, [r5, r2]
   16390:	ldr	r1, [sp, #88]	; 0x58
   16394:	add	r2, r8, #2
   16398:	add	r8, r8, #3
   1639c:	cmp	r2, r1
   163a0:	movcc	r1, #39	; 0x27
   163a4:	strbcc	r1, [r5, r2]
   163a8:	ldr	r1, [sp, #88]	; 0x58
   163ac:	add	r2, r8, #1
   163b0:	cmp	r8, r1
   163b4:	movcc	r1, #92	; 0x5c
   163b8:	strbcc	r1, [r5, r8]
   163bc:	ldr	r1, [sp, #88]	; 0x58
   163c0:	cmp	r2, r1
   163c4:	bcs	163d8 <__assert_fail@plt+0x4cc4>
   163c8:	uxtb	r3, r6
   163cc:	mov	r1, #48	; 0x30
   163d0:	orr	r3, r1, r3, lsr #6
   163d4:	strb	r3, [r5, r2]
   163d8:	ldr	r1, [sp, #88]	; 0x58
   163dc:	add	r2, r8, #2
   163e0:	add	r8, r8, #3
   163e4:	cmp	r2, r1
   163e8:	lsrcc	r3, r6, #3
   163ec:	movcc	r1, #6
   163f0:	bficc	r3, r1, #3, #29
   163f4:	mov	r1, #6
   163f8:	bfi	r6, r1, #3, #29
   163fc:	strbcc	r3, [r5, r2]
   16400:	mov	r2, #1
   16404:	b	16484 <__assert_fail@plt+0x4d70>
   16408:	ldr	r1, [sp, #88]	; 0x58
   1640c:	ldr	r5, [fp, #-84]	; 0xffffffac
   16410:	ldr	r4, [sp, #88]	; 0x58
   16414:	cmp	r8, r1
   16418:	movcc	r1, #39	; 0x27
   1641c:	strbcc	r1, [r5, r8]
   16420:	add	r1, r8, #1
   16424:	add	r8, r8, #2
   16428:	cmp	r1, r4
   1642c:	movcc	r4, #39	; 0x27
   16430:	strbcc	r4, [r5, r1]
   16434:	mov	r4, #0
   16438:	ldr	r1, [sp, #88]	; 0x58
   1643c:	cmp	r8, r1
   16440:	ldr	r1, [sp, #72]	; 0x48
   16444:	strbcc	r6, [r5, r8]
   16448:	add	r8, r8, #1
   1644c:	ldrb	r6, [r1, r7]
   16450:	mov	r7, r3
   16454:	tst	r0, #1
   16458:	beq	16344 <__assert_fail@plt+0x4c30>
   1645c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16460:	tst	r1, #1
   16464:	beq	1647c <__assert_fail@plt+0x4d68>
   16468:	ldr	r1, [sp, #88]	; 0x58
   1646c:	cmp	r8, r1
   16470:	movcc	r1, #92	; 0x5c
   16474:	strbcc	r1, [r5, r8]
   16478:	add	r8, r8, #1
   1647c:	mov	r1, #0
   16480:	str	r1, [fp, #-52]	; 0xffffffcc
   16484:	ldr	r1, [sp, #44]	; 0x2c
   16488:	add	r3, r7, #1
   1648c:	and	sl, r2, #1
   16490:	cmp	r1, r3
   16494:	bls	164b8 <__assert_fail@plt+0x4da4>
   16498:	cmp	sl, #0
   1649c:	mvn	r5, r4
   164a0:	movwne	sl, #1
   164a4:	orr	r5, r5, sl
   164a8:	tst	r5, #1
   164ac:	beq	16408 <__assert_fail@plt+0x4cf4>
   164b0:	ldr	r5, [fp, #-84]	; 0xffffffac
   164b4:	b	16438 <__assert_fail@plt+0x4d24>
   164b8:	str	r4, [fp, #-56]	; 0xffffffc8
   164bc:	ldr	r4, [sp, #88]	; 0x58
   164c0:	cmp	sl, #0
   164c4:	movwne	sl, #1
   164c8:	cmp	sl, #0
   164cc:	beq	16028 <__assert_fail@plt+0x4914>
   164d0:	b	1605c <__assert_fail@plt+0x4948>
   164d4:	mov	r9, #0
   164d8:	b	16518 <__assert_fail@plt+0x4e04>
   164dc:	ldr	r0, [sp, #24]
   164e0:	mov	r9, #0
   164e4:	cmp	lr, r0
   164e8:	bls	16518 <__assert_fail@plt+0x4e04>
   164ec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   164f0:	ldr	r2, [sp, #44]	; 0x2c
   164f4:	add	r0, ip, r7
   164f8:	ldrb	r1, [r0, r2]
   164fc:	cmp	r1, #0
   16500:	beq	15fe0 <__assert_fail@plt+0x48cc>
   16504:	add	r2, r2, #1
   16508:	add	r1, r7, r2
   1650c:	cmp	r1, lr
   16510:	bcc	164f8 <__assert_fail@plt+0x4de4>
   16514:	b	15fe0 <__assert_fail@plt+0x48cc>
   16518:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1651c:	ldr	r2, [sp, #44]	; 0x2c
   16520:	b	15fe0 <__assert_fail@plt+0x48cc>
   16524:	mov	lr, r7
   16528:	b	16530 <__assert_fail@plt+0x4e1c>
   1652c:	mvn	lr, #0
   16530:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16534:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16538:	eor	r0, r1, #2
   1653c:	orr	r0, r0, r8
   16540:	clz	r0, r0
   16544:	lsr	r0, r0, #5
   16548:	tst	r2, r0
   1654c:	bne	165f0 <__assert_fail@plt+0x4edc>
   16550:	subs	r0, r1, #2
   16554:	movwne	r0, #1
   16558:	orr	r0, r2, r0
   1655c:	tst	r0, #1
   16560:	ldreq	r0, [sp, #60]	; 0x3c
   16564:	eoreq	r0, r0, #1
   16568:	tsteq	r0, #1
   1656c:	bne	16684 <__assert_fail@plt+0x4f70>
   16570:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16574:	mov	sl, lr
   16578:	tst	r0, #1
   1657c:	bne	16650 <__assert_fail@plt+0x4f3c>
   16580:	ldr	r6, [sp, #56]	; 0x38
   16584:	mov	r9, #0
   16588:	cmp	r6, #0
   1658c:	beq	1667c <__assert_fail@plt+0x4f68>
   16590:	ldr	r0, [sp, #84]	; 0x54
   16594:	mov	r1, #0
   16598:	mov	r7, #2
   1659c:	cmp	r4, #0
   165a0:	str	r1, [fp, #-48]	; 0xffffffd0
   165a4:	mov	r1, #0
   165a8:	str	r1, [fp, #-76]	; 0xffffffb4
   165ac:	beq	1574c <__assert_fail@plt+0x4038>
   165b0:	b	16684 <__assert_fail@plt+0x4f70>
   165b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   165b8:	ldr	r1, [fp, #12]
   165bc:	ldr	r2, [fp, #-68]	; 0xffffffbc
   165c0:	mov	lr, r4
   165c4:	mov	r4, r6
   165c8:	b	16610 <__assert_fail@plt+0x4efc>
   165cc:	tst	ip, #1
   165d0:	ldr	r5, [fp, #-84]	; 0xffffffac
   165d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   165d8:	ldr	r1, [fp, #12]
   165dc:	mov	r0, #2
   165e0:	movwne	r0, #4
   165e4:	mov	r2, r0
   165e8:	b	16610 <__assert_fail@plt+0x4efc>
   165ec:	ldr	r4, [sp, #88]	; 0x58
   165f0:	ldr	r1, [sp, #84]	; 0x54
   165f4:	mov	r0, #2
   165f8:	tst	r1, #1
   165fc:	movwne	r0, #4
   16600:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16604:	ldr	r1, [fp, #12]
   16608:	cmp	r2, #2
   1660c:	moveq	r2, r0
   16610:	mov	r0, #0
   16614:	bic	r1, r1, #2
   16618:	str	r2, [sp]
   1661c:	mov	r2, ip
   16620:	mov	r3, lr
   16624:	str	r0, [sp, #8]
   16628:	ldr	r0, [sp, #76]	; 0x4c
   1662c:	str	r1, [sp, #4]
   16630:	mov	r1, r4
   16634:	str	r0, [sp, #12]
   16638:	ldr	r0, [sp, #80]	; 0x50
   1663c:	str	r0, [sp, #16]
   16640:	mov	r0, r5
   16644:	bl	156bc <__assert_fail@plt+0x3fa8>
   16648:	mov	r8, r0
   1664c:	b	166d0 <__assert_fail@plt+0x4fbc>
   16650:	mov	r0, #5
   16654:	ldr	r1, [sp, #56]	; 0x38
   16658:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1665c:	mov	r3, sl
   16660:	str	r0, [sp]
   16664:	ldr	r0, [fp, #12]
   16668:	str	r0, [sp, #4]
   1666c:	ldr	r0, [fp, #16]
   16670:	str	r0, [sp, #8]
   16674:	ldr	r0, [sp, #76]	; 0x4c
   16678:	b	16634 <__assert_fail@plt+0x4f20>
   1667c:	mov	r0, #0
   16680:	str	r0, [fp, #-76]	; 0xffffffb4
   16684:	ldr	r1, [fp, #-88]	; 0xffffffa8
   16688:	cmp	r1, #0
   1668c:	beq	166c4 <__assert_fail@plt+0x4fb0>
   16690:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16694:	tst	r0, #1
   16698:	bne	166c4 <__assert_fail@plt+0x4fb0>
   1669c:	ldrb	r0, [r1]
   166a0:	cmp	r0, #0
   166a4:	beq	166c4 <__assert_fail@plt+0x4fb0>
   166a8:	add	r1, r1, #1
   166ac:	cmp	r8, r4
   166b0:	strbcc	r0, [r5, r8]
   166b4:	add	r8, r8, #1
   166b8:	ldrb	r0, [r1], #1
   166bc:	cmp	r0, #0
   166c0:	bne	166ac <__assert_fail@plt+0x4f98>
   166c4:	cmp	r8, r4
   166c8:	movcc	r0, #0
   166cc:	strbcc	r0, [r5, r8]
   166d0:	mov	r0, r8
   166d4:	sub	sp, fp, #28
   166d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166dc:	mov	r0, #4
   166e0:	b	16600 <__assert_fail@plt+0x4eec>
   166e4:	bl	116f0 <abort@plt>
   166e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   166ec:	add	fp, sp, #28
   166f0:	sub	sp, sp, #28
   166f4:	movw	r5, #46392	; 0xb538
   166f8:	cmp	r2, #0
   166fc:	mov	r4, r1
   16700:	mov	r7, r0
   16704:	str	r0, [sp, #20]
   16708:	movt	r5, #2
   1670c:	movne	r5, r2
   16710:	bl	115d0 <__errno_location@plt>
   16714:	mov	sl, r0
   16718:	ldr	r2, [r5, #40]	; 0x28
   1671c:	ldr	r3, [r5, #44]	; 0x2c
   16720:	ldm	r5, {r0, r1}
   16724:	orr	r8, r1, #1
   16728:	add	r9, r5, #8
   1672c:	mov	r1, #0
   16730:	ldr	r6, [sl]
   16734:	stm	sp, {r0, r8, r9}
   16738:	mov	r0, #0
   1673c:	str	r2, [sp, #12]
   16740:	str	r3, [sp, #16]
   16744:	mov	r2, r7
   16748:	mov	r3, r4
   1674c:	str	r6, [sp, #24]
   16750:	mov	r6, r4
   16754:	bl	156bc <__assert_fail@plt+0x3fa8>
   16758:	add	r7, r0, #1
   1675c:	mov	r0, r7
   16760:	bl	17ca0 <__assert_fail@plt+0x658c>
   16764:	mov	r4, r0
   16768:	ldr	r0, [r5]
   1676c:	ldr	r2, [r5, #44]	; 0x2c
   16770:	ldr	r1, [r5, #40]	; 0x28
   16774:	mov	r3, r6
   16778:	stm	sp, {r0, r8, r9}
   1677c:	str	r2, [sp, #16]
   16780:	ldr	r2, [sp, #20]
   16784:	str	r1, [sp, #12]
   16788:	mov	r0, r4
   1678c:	mov	r1, r7
   16790:	bl	156bc <__assert_fail@plt+0x3fa8>
   16794:	ldr	r0, [sp, #24]
   16798:	str	r0, [sl]
   1679c:	mov	r0, r4
   167a0:	sub	sp, fp, #28
   167a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   167ac:	add	fp, sp, #28
   167b0:	sub	sp, sp, #36	; 0x24
   167b4:	movw	r8, #46392	; 0xb538
   167b8:	cmp	r3, #0
   167bc:	mov	r4, r2
   167c0:	str	r2, [sp, #24]
   167c4:	mov	r5, r1
   167c8:	mov	r6, r0
   167cc:	str	r0, [sp, #20]
   167d0:	movt	r8, #2
   167d4:	movne	r8, r3
   167d8:	bl	115d0 <__errno_location@plt>
   167dc:	str	r0, [sp, #28]
   167e0:	ldr	r1, [r8, #40]	; 0x28
   167e4:	ldr	r2, [r8, #44]	; 0x2c
   167e8:	ldr	r7, [r0]
   167ec:	cmp	r4, #0
   167f0:	add	sl, r8, #8
   167f4:	mov	r0, #0
   167f8:	ldm	r8, {r3, r9}
   167fc:	orreq	r9, r9, #1
   16800:	stm	sp, {r3, r9, sl}
   16804:	str	r1, [sp, #12]
   16808:	str	r2, [sp, #16]
   1680c:	mov	r1, #0
   16810:	mov	r2, r6
   16814:	mov	r3, r5
   16818:	str	r7, [sp, #32]
   1681c:	mov	r7, r5
   16820:	bl	156bc <__assert_fail@plt+0x3fa8>
   16824:	add	r4, r0, #1
   16828:	mov	r5, r0
   1682c:	mov	r0, r4
   16830:	bl	17ca0 <__assert_fail@plt+0x658c>
   16834:	mov	r6, r0
   16838:	ldr	r0, [r8]
   1683c:	ldr	r2, [r8, #44]	; 0x2c
   16840:	ldr	r1, [r8, #40]	; 0x28
   16844:	mov	r3, r7
   16848:	stm	sp, {r0, r9, sl}
   1684c:	str	r2, [sp, #16]
   16850:	ldr	r2, [sp, #20]
   16854:	str	r1, [sp, #12]
   16858:	mov	r0, r6
   1685c:	mov	r1, r4
   16860:	bl	156bc <__assert_fail@plt+0x3fa8>
   16864:	ldr	r0, [sp, #24]
   16868:	ldr	r1, [sp, #32]
   1686c:	ldr	r2, [sp, #28]
   16870:	cmp	r0, #0
   16874:	str	r1, [r2]
   16878:	strne	r5, [r0]
   1687c:	mov	r0, r6
   16880:	sub	sp, fp, #28
   16884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16888:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1688c:	add	fp, sp, #24
   16890:	movw	r5, #45420	; 0xb16c
   16894:	movw	r8, #45416	; 0xb168
   16898:	movt	r5, #2
   1689c:	movt	r8, #2
   168a0:	ldr	r0, [r5]
   168a4:	ldr	r4, [r8]
   168a8:	cmp	r0, #2
   168ac:	blt	168d8 <__assert_fail@plt+0x51c4>
   168b0:	add	r7, r4, #12
   168b4:	mov	r6, #0
   168b8:	ldr	r0, [r7, r6, lsl #3]
   168bc:	bl	152dc <__assert_fail@plt+0x3bc8>
   168c0:	ldr	r1, [r5]
   168c4:	add	r2, r6, #2
   168c8:	add	r0, r6, #1
   168cc:	mov	r6, r0
   168d0:	cmp	r2, r1
   168d4:	blt	168b8 <__assert_fail@plt+0x51a4>
   168d8:	ldr	r0, [r4, #4]
   168dc:	movw	r9, #46440	; 0xb568
   168e0:	movw	r7, #45424	; 0xb170
   168e4:	movt	r9, #2
   168e8:	movt	r7, #2
   168ec:	cmp	r0, r9
   168f0:	beq	16900 <__assert_fail@plt+0x51ec>
   168f4:	bl	152dc <__assert_fail@plt+0x3bc8>
   168f8:	mov	r0, #256	; 0x100
   168fc:	stm	r7, {r0, r9}
   16900:	cmp	r4, r7
   16904:	beq	16914 <__assert_fail@plt+0x5200>
   16908:	mov	r0, r4
   1690c:	bl	152dc <__assert_fail@plt+0x3bc8>
   16910:	str	r7, [r8]
   16914:	mov	r0, #1
   16918:	str	r0, [r5]
   1691c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16920:	movw	r3, #46392	; 0xb538
   16924:	mvn	r2, #0
   16928:	movt	r3, #2
   1692c:	b	16930 <__assert_fail@plt+0x521c>
   16930:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16934:	add	fp, sp, #28
   16938:	sub	sp, sp, #44	; 0x2c
   1693c:	mov	r7, r3
   16940:	str	r2, [sp, #36]	; 0x24
   16944:	str	r1, [sp, #32]
   16948:	mov	r5, r0
   1694c:	bl	115d0 <__errno_location@plt>
   16950:	cmp	r5, #0
   16954:	bmi	16ac4 <__assert_fail@plt+0x53b0>
   16958:	cmn	r5, #-2147483647	; 0x80000001
   1695c:	beq	16ac4 <__assert_fail@plt+0x53b0>
   16960:	movw	r8, #45420	; 0xb16c
   16964:	movw	r4, #45416	; 0xb168
   16968:	str	r0, [sp, #28]
   1696c:	ldr	r0, [r0]
   16970:	movt	r8, #2
   16974:	movt	r4, #2
   16978:	ldr	r1, [r8]
   1697c:	ldr	r6, [r4]
   16980:	str	r0, [sp, #24]
   16984:	cmp	r1, r5
   16988:	ble	16994 <__assert_fail@plt+0x5280>
   1698c:	mov	sl, r6
   16990:	b	16a00 <__assert_fail@plt+0x52ec>
   16994:	movw	r9, #45424	; 0xb170
   16998:	mov	r0, #8
   1699c:	str	r1, [fp, #-32]	; 0xffffffe0
   169a0:	sub	r1, r5, r1
   169a4:	mvn	r3, #-2147483648	; 0x80000000
   169a8:	movt	r9, #2
   169ac:	str	r0, [sp]
   169b0:	add	r2, r1, #1
   169b4:	sub	r1, fp, #32
   169b8:	subs	r0, r6, r9
   169bc:	movne	r0, r6
   169c0:	bl	17ea0 <__assert_fail@plt+0x678c>
   169c4:	mov	sl, r0
   169c8:	cmp	r6, r9
   169cc:	str	r0, [r4]
   169d0:	bne	169dc <__assert_fail@plt+0x52c8>
   169d4:	ldrd	r0, [r9]
   169d8:	stm	sl, {r0, r1}
   169dc:	ldr	r1, [r8]
   169e0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   169e4:	add	r0, sl, r1, lsl #3
   169e8:	sub	r1, r2, r1
   169ec:	lsl	r2, r1, #3
   169f0:	mov	r1, #0
   169f4:	bl	115f4 <memset@plt>
   169f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   169fc:	str	r0, [r8]
   16a00:	mov	r9, sl
   16a04:	ldm	r7, {r0, r1}
   16a08:	orr	r8, r1, #1
   16a0c:	add	r1, r7, #8
   16a10:	ldr	r2, [r7, #40]	; 0x28
   16a14:	ldr	r3, [r7, #44]	; 0x2c
   16a18:	ldr	r6, [r9, r5, lsl #3]!
   16a1c:	str	r1, [sp, #20]
   16a20:	ldr	r4, [r9, #4]!
   16a24:	stm	sp, {r0, r8}
   16a28:	add	r0, sp, #8
   16a2c:	stm	r0, {r1, r2, r3}
   16a30:	ldr	r2, [sp, #32]
   16a34:	ldr	r3, [sp, #36]	; 0x24
   16a38:	mov	r1, r6
   16a3c:	mov	r0, r4
   16a40:	bl	156bc <__assert_fail@plt+0x3fa8>
   16a44:	cmp	r6, r0
   16a48:	bhi	16aac <__assert_fail@plt+0x5398>
   16a4c:	add	r6, r0, #1
   16a50:	movw	r0, #46440	; 0xb568
   16a54:	movt	r0, #2
   16a58:	str	r6, [sl, r5, lsl #3]
   16a5c:	cmp	r4, r0
   16a60:	beq	16a6c <__assert_fail@plt+0x5358>
   16a64:	mov	r0, r4
   16a68:	bl	152dc <__assert_fail@plt+0x3bc8>
   16a6c:	mov	r0, r6
   16a70:	bl	17ca0 <__assert_fail@plt+0x658c>
   16a74:	str	r0, [r9]
   16a78:	mov	r4, r0
   16a7c:	add	r3, sp, #8
   16a80:	ldr	r0, [r7]
   16a84:	ldr	r1, [r7, #40]	; 0x28
   16a88:	ldr	r2, [r7, #44]	; 0x2c
   16a8c:	stm	sp, {r0, r8}
   16a90:	ldr	r0, [sp, #20]
   16a94:	stm	r3, {r0, r1, r2}
   16a98:	ldr	r2, [sp, #32]
   16a9c:	ldr	r3, [sp, #36]	; 0x24
   16aa0:	mov	r0, r4
   16aa4:	mov	r1, r6
   16aa8:	bl	156bc <__assert_fail@plt+0x3fa8>
   16aac:	ldr	r0, [sp, #28]
   16ab0:	ldr	r1, [sp, #24]
   16ab4:	str	r1, [r0]
   16ab8:	mov	r0, r4
   16abc:	sub	sp, fp, #28
   16ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ac4:	bl	116f0 <abort@plt>
   16ac8:	movw	r3, #46392	; 0xb538
   16acc:	movt	r3, #2
   16ad0:	b	16930 <__assert_fail@plt+0x521c>
   16ad4:	movw	r3, #46392	; 0xb538
   16ad8:	mov	r1, r0
   16adc:	mov	r0, #0
   16ae0:	mvn	r2, #0
   16ae4:	movt	r3, #2
   16ae8:	b	16930 <__assert_fail@plt+0x521c>
   16aec:	movw	r3, #46392	; 0xb538
   16af0:	mov	r2, r1
   16af4:	mov	r1, r0
   16af8:	mov	r0, #0
   16afc:	movt	r3, #2
   16b00:	b	16930 <__assert_fail@plt+0x521c>
   16b04:	push	{fp, lr}
   16b08:	mov	fp, sp
   16b0c:	sub	sp, sp, #48	; 0x30
   16b10:	vmov.i32	q8, #0	; 0x00000000
   16b14:	mov	ip, #32
   16b18:	mov	r3, sp
   16b1c:	mov	lr, r2
   16b20:	cmp	r1, #10
   16b24:	add	r2, r3, #16
   16b28:	vst1.64	{d16-d17}, [r3], ip
   16b2c:	vst1.64	{d16-d17}, [r2]
   16b30:	vst1.64	{d16-d17}, [r3]
   16b34:	beq	16b54 <__assert_fail@plt+0x5440>
   16b38:	str	r1, [sp]
   16b3c:	mov	r3, sp
   16b40:	mov	r1, lr
   16b44:	mvn	r2, #0
   16b48:	bl	16930 <__assert_fail@plt+0x521c>
   16b4c:	mov	sp, fp
   16b50:	pop	{fp, pc}
   16b54:	bl	116f0 <abort@plt>
   16b58:	push	{r4, sl, fp, lr}
   16b5c:	add	fp, sp, #8
   16b60:	sub	sp, sp, #48	; 0x30
   16b64:	vmov.i32	q8, #0	; 0x00000000
   16b68:	mov	ip, r3
   16b6c:	mov	r3, sp
   16b70:	mov	lr, #32
   16b74:	cmp	r1, #10
   16b78:	add	r4, r3, #16
   16b7c:	vst1.64	{d16-d17}, [r3], lr
   16b80:	vst1.64	{d16-d17}, [r4]
   16b84:	vst1.64	{d16-d17}, [r3]
   16b88:	beq	16ba8 <__assert_fail@plt+0x5494>
   16b8c:	str	r1, [sp]
   16b90:	mov	r1, r2
   16b94:	mov	r3, sp
   16b98:	mov	r2, ip
   16b9c:	bl	16930 <__assert_fail@plt+0x521c>
   16ba0:	sub	sp, fp, #8
   16ba4:	pop	{r4, sl, fp, pc}
   16ba8:	bl	116f0 <abort@plt>
   16bac:	push	{fp, lr}
   16bb0:	mov	fp, sp
   16bb4:	sub	sp, sp, #48	; 0x30
   16bb8:	vmov.i32	q8, #0	; 0x00000000
   16bbc:	mov	r3, sp
   16bc0:	mov	ip, #32
   16bc4:	cmp	r0, #10
   16bc8:	add	r2, r3, #16
   16bcc:	vst1.64	{d16-d17}, [r3], ip
   16bd0:	vst1.64	{d16-d17}, [r2]
   16bd4:	vst1.64	{d16-d17}, [r3]
   16bd8:	beq	16bf8 <__assert_fail@plt+0x54e4>
   16bdc:	str	r0, [sp]
   16be0:	mov	r3, sp
   16be4:	mov	r0, #0
   16be8:	mvn	r2, #0
   16bec:	bl	16930 <__assert_fail@plt+0x521c>
   16bf0:	mov	sp, fp
   16bf4:	pop	{fp, pc}
   16bf8:	bl	116f0 <abort@plt>
   16bfc:	push	{fp, lr}
   16c00:	mov	fp, sp
   16c04:	sub	sp, sp, #48	; 0x30
   16c08:	vmov.i32	q8, #0	; 0x00000000
   16c0c:	mov	r3, sp
   16c10:	mov	ip, #32
   16c14:	cmp	r0, #10
   16c18:	add	lr, r3, #16
   16c1c:	vst1.64	{d16-d17}, [r3], ip
   16c20:	vst1.64	{d16-d17}, [lr]
   16c24:	vst1.64	{d16-d17}, [r3]
   16c28:	beq	16c44 <__assert_fail@plt+0x5530>
   16c2c:	str	r0, [sp]
   16c30:	mov	r3, sp
   16c34:	mov	r0, #0
   16c38:	bl	16930 <__assert_fail@plt+0x521c>
   16c3c:	mov	sp, fp
   16c40:	pop	{fp, pc}
   16c44:	bl	116f0 <abort@plt>
   16c48:	push	{r4, sl, fp, lr}
   16c4c:	add	fp, sp, #8
   16c50:	sub	sp, sp, #48	; 0x30
   16c54:	mov	lr, r0
   16c58:	movw	r0, #46392	; 0xb538
   16c5c:	mov	ip, r1
   16c60:	mov	r1, #32
   16c64:	mov	r4, #1
   16c68:	movt	r0, #2
   16c6c:	add	r3, r0, #16
   16c70:	vld1.64	{d16-d17}, [r0], r1
   16c74:	vld1.64	{d20-d21}, [r0]
   16c78:	vld1.64	{d18-d19}, [r3]
   16c7c:	mov	r3, sp
   16c80:	add	r0, r3, #32
   16c84:	add	r1, r3, #16
   16c88:	vst1.64	{d20-d21}, [r0]
   16c8c:	mov	r0, #28
   16c90:	vst1.64	{d18-d19}, [r1]
   16c94:	mov	r1, r3
   16c98:	and	r0, r0, r2, lsr #3
   16c9c:	and	r2, r2, #31
   16ca0:	vst1.64	{d16-d17}, [r1], r0
   16ca4:	ldr	r0, [r1, #8]
   16ca8:	bic	r4, r4, r0, lsr r2
   16cac:	eor	r0, r0, r4, lsl r2
   16cb0:	mov	r2, ip
   16cb4:	str	r0, [r1, #8]
   16cb8:	mov	r0, #0
   16cbc:	mov	r1, lr
   16cc0:	bl	16930 <__assert_fail@plt+0x521c>
   16cc4:	sub	sp, fp, #8
   16cc8:	pop	{r4, sl, fp, pc}
   16ccc:	push	{fp, lr}
   16cd0:	mov	fp, sp
   16cd4:	sub	sp, sp, #48	; 0x30
   16cd8:	mov	ip, r0
   16cdc:	movw	r0, #46392	; 0xb538
   16ce0:	mov	r2, #32
   16ce4:	movt	r0, #2
   16ce8:	add	r3, r0, #16
   16cec:	vld1.64	{d16-d17}, [r0], r2
   16cf0:	vld1.64	{d20-d21}, [r0]
   16cf4:	vld1.64	{d18-d19}, [r3]
   16cf8:	mov	r3, sp
   16cfc:	add	r0, r3, #32
   16d00:	add	r2, r3, #16
   16d04:	vst1.64	{d20-d21}, [r0]
   16d08:	mov	r0, #28
   16d0c:	vst1.64	{d18-d19}, [r2]
   16d10:	mov	r2, r3
   16d14:	and	r0, r0, r1, lsr #3
   16d18:	and	r1, r1, #31
   16d1c:	vst1.64	{d16-d17}, [r2], r0
   16d20:	mov	r0, #1
   16d24:	ldr	lr, [r2, #8]
   16d28:	bic	r0, r0, lr, lsr r1
   16d2c:	eor	r0, lr, r0, lsl r1
   16d30:	mov	r1, ip
   16d34:	str	r0, [r2, #8]
   16d38:	mov	r0, #0
   16d3c:	mvn	r2, #0
   16d40:	bl	16930 <__assert_fail@plt+0x521c>
   16d44:	mov	sp, fp
   16d48:	pop	{fp, pc}
   16d4c:	push	{fp, lr}
   16d50:	mov	fp, sp
   16d54:	sub	sp, sp, #48	; 0x30
   16d58:	mov	r1, r0
   16d5c:	movw	r0, #46392	; 0xb538
   16d60:	mov	r3, #32
   16d64:	movt	r0, #2
   16d68:	add	r2, r0, #16
   16d6c:	vld1.64	{d16-d17}, [r0], r3
   16d70:	mov	r3, sp
   16d74:	vld1.64	{d18-d19}, [r2]
   16d78:	vld1.64	{d20-d21}, [r0]
   16d7c:	add	r2, r3, #16
   16d80:	add	r0, r3, #32
   16d84:	vst1.64	{d18-d19}, [r2]
   16d88:	vst1.64	{d20-d21}, [r0]
   16d8c:	mov	r0, #12
   16d90:	mov	r2, r3
   16d94:	vst1.64	{d16-d17}, [r2], r0
   16d98:	ldr	r0, [r2]
   16d9c:	orr	r0, r0, #67108864	; 0x4000000
   16da0:	str	r0, [r2]
   16da4:	mov	r0, #0
   16da8:	mvn	r2, #0
   16dac:	bl	16930 <__assert_fail@plt+0x521c>
   16db0:	mov	sp, fp
   16db4:	pop	{fp, pc}
   16db8:	push	{fp, lr}
   16dbc:	mov	fp, sp
   16dc0:	sub	sp, sp, #48	; 0x30
   16dc4:	mov	ip, r1
   16dc8:	mov	r1, r0
   16dcc:	movw	r0, #46392	; 0xb538
   16dd0:	mov	r2, #32
   16dd4:	movt	r0, #2
   16dd8:	add	r3, r0, #16
   16ddc:	vld1.64	{d16-d17}, [r0], r2
   16de0:	vld1.64	{d18-d19}, [r3]
   16de4:	vld1.64	{d20-d21}, [r0]
   16de8:	mov	r3, sp
   16dec:	add	r2, r3, #16
   16df0:	add	r0, r3, #32
   16df4:	vst1.64	{d18-d19}, [r2]
   16df8:	vst1.64	{d20-d21}, [r0]
   16dfc:	mov	r0, #12
   16e00:	mov	r2, r3
   16e04:	vst1.64	{d16-d17}, [r2], r0
   16e08:	ldr	r0, [r2]
   16e0c:	orr	r0, r0, #67108864	; 0x4000000
   16e10:	str	r0, [r2]
   16e14:	mov	r0, #0
   16e18:	mov	r2, ip
   16e1c:	bl	16930 <__assert_fail@plt+0x521c>
   16e20:	mov	sp, fp
   16e24:	pop	{fp, pc}
   16e28:	push	{r4, sl, fp, lr}
   16e2c:	add	fp, sp, #8
   16e30:	sub	sp, sp, #96	; 0x60
   16e34:	vmov.i32	q8, #0	; 0x00000000
   16e38:	mov	ip, r2
   16e3c:	mov	r2, sp
   16e40:	mov	r4, #28
   16e44:	cmp	r1, #10
   16e48:	mov	r3, r2
   16e4c:	add	lr, r2, #16
   16e50:	vst1.64	{d16-d17}, [r3], r4
   16e54:	vst1.64	{d16-d17}, [lr]
   16e58:	vst1.32	{d16-d17}, [r3]
   16e5c:	beq	16eac <__assert_fail@plt+0x5798>
   16e60:	vld1.64	{d16-d17}, [r2], r4
   16e64:	vld1.64	{d18-d19}, [lr]
   16e68:	add	r3, sp, #48	; 0x30
   16e6c:	vld1.32	{d20-d21}, [r2]
   16e70:	add	r2, r3, #20
   16e74:	add	r4, r3, #4
   16e78:	vst1.32	{d18-d19}, [r2]
   16e7c:	add	r2, r3, #32
   16e80:	vst1.32	{d16-d17}, [r4]
   16e84:	vst1.32	{d20-d21}, [r2]
   16e88:	str	r1, [sp, #48]	; 0x30
   16e8c:	mvn	r2, #0
   16e90:	ldr	r1, [sp, #60]	; 0x3c
   16e94:	orr	r1, r1, #67108864	; 0x4000000
   16e98:	str	r1, [sp, #60]	; 0x3c
   16e9c:	mov	r1, ip
   16ea0:	bl	16930 <__assert_fail@plt+0x521c>
   16ea4:	sub	sp, fp, #8
   16ea8:	pop	{r4, sl, fp, pc}
   16eac:	bl	116f0 <abort@plt>
   16eb0:	push	{r4, r5, r6, sl, fp, lr}
   16eb4:	add	fp, sp, #16
   16eb8:	sub	sp, sp, #48	; 0x30
   16ebc:	mov	ip, r3
   16ec0:	movw	r3, #46392	; 0xb538
   16ec4:	mov	r6, #32
   16ec8:	cmp	r1, #0
   16ecc:	mov	r4, sp
   16ed0:	movt	r3, #2
   16ed4:	cmpne	r2, #0
   16ed8:	add	r5, r4, #16
   16edc:	add	lr, r3, #16
   16ee0:	vld1.64	{d16-d17}, [r3], r6
   16ee4:	vld1.64	{d18-d19}, [lr]
   16ee8:	vld1.64	{d20-d21}, [r3]
   16eec:	mov	r3, #10
   16ef0:	vst1.64	{d16-d17}, [r4], r6
   16ef4:	vst1.64	{d18-d19}, [r5]
   16ef8:	vst1.64	{d20-d21}, [r4]
   16efc:	str	r3, [sp]
   16f00:	bne	16f08 <__assert_fail@plt+0x57f4>
   16f04:	bl	116f0 <abort@plt>
   16f08:	str	r2, [sp, #44]	; 0x2c
   16f0c:	str	r1, [sp, #40]	; 0x28
   16f10:	mov	r3, sp
   16f14:	mov	r1, ip
   16f18:	mvn	r2, #0
   16f1c:	bl	16930 <__assert_fail@plt+0x521c>
   16f20:	sub	sp, fp, #16
   16f24:	pop	{r4, r5, r6, sl, fp, pc}
   16f28:	push	{r4, r5, r6, sl, fp, lr}
   16f2c:	add	fp, sp, #16
   16f30:	sub	sp, sp, #48	; 0x30
   16f34:	mov	lr, r3
   16f38:	movw	r3, #46392	; 0xb538
   16f3c:	mov	r6, #32
   16f40:	cmp	r1, #0
   16f44:	mov	r4, sp
   16f48:	movt	r3, #2
   16f4c:	cmpne	r2, #0
   16f50:	add	r5, r4, #16
   16f54:	add	ip, r3, #16
   16f58:	vld1.64	{d16-d17}, [r3], r6
   16f5c:	vld1.64	{d18-d19}, [ip]
   16f60:	vld1.64	{d20-d21}, [r3]
   16f64:	mov	r3, #10
   16f68:	vst1.64	{d16-d17}, [r4], r6
   16f6c:	vst1.64	{d18-d19}, [r5]
   16f70:	vst1.64	{d20-d21}, [r4]
   16f74:	str	r3, [sp]
   16f78:	bne	16f80 <__assert_fail@plt+0x586c>
   16f7c:	bl	116f0 <abort@plt>
   16f80:	ldr	ip, [fp, #8]
   16f84:	str	r2, [sp, #44]	; 0x2c
   16f88:	str	r1, [sp, #40]	; 0x28
   16f8c:	mov	r3, sp
   16f90:	mov	r1, lr
   16f94:	mov	r2, ip
   16f98:	bl	16930 <__assert_fail@plt+0x521c>
   16f9c:	sub	sp, fp, #16
   16fa0:	pop	{r4, r5, r6, sl, fp, pc}
   16fa4:	push	{r4, sl, fp, lr}
   16fa8:	add	fp, sp, #8
   16fac:	sub	sp, sp, #48	; 0x30
   16fb0:	movw	r3, #46392	; 0xb538
   16fb4:	mov	lr, #32
   16fb8:	mov	ip, r2
   16fbc:	cmp	r0, #0
   16fc0:	movt	r3, #2
   16fc4:	cmpne	r1, #0
   16fc8:	add	r2, r3, #16
   16fcc:	vld1.64	{d16-d17}, [r3], lr
   16fd0:	vld1.64	{d20-d21}, [r3]
   16fd4:	vld1.64	{d18-d19}, [r2]
   16fd8:	mov	r2, sp
   16fdc:	add	r4, r2, #16
   16fe0:	vst1.64	{d16-d17}, [r2], lr
   16fe4:	vst1.64	{d20-d21}, [r2]
   16fe8:	mov	r2, #10
   16fec:	vst1.64	{d18-d19}, [r4]
   16ff0:	str	r2, [sp]
   16ff4:	bne	16ffc <__assert_fail@plt+0x58e8>
   16ff8:	bl	116f0 <abort@plt>
   16ffc:	str	r1, [sp, #44]	; 0x2c
   17000:	str	r0, [sp, #40]	; 0x28
   17004:	mov	r3, sp
   17008:	mov	r0, #0
   1700c:	mov	r1, ip
   17010:	mvn	r2, #0
   17014:	bl	16930 <__assert_fail@plt+0x521c>
   17018:	sub	sp, fp, #8
   1701c:	pop	{r4, sl, fp, pc}
   17020:	push	{r4, r5, fp, lr}
   17024:	add	fp, sp, #8
   17028:	sub	sp, sp, #48	; 0x30
   1702c:	mov	ip, r3
   17030:	movw	r3, #46392	; 0xb538
   17034:	mov	r4, #32
   17038:	mov	lr, r2
   1703c:	cmp	r0, #0
   17040:	movt	r3, #2
   17044:	cmpne	r1, #0
   17048:	add	r2, r3, #16
   1704c:	vld1.64	{d16-d17}, [r3], r4
   17050:	vld1.64	{d20-d21}, [r3]
   17054:	vld1.64	{d18-d19}, [r2]
   17058:	mov	r2, sp
   1705c:	add	r5, r2, #16
   17060:	vst1.64	{d16-d17}, [r2], r4
   17064:	vst1.64	{d20-d21}, [r2]
   17068:	mov	r2, #10
   1706c:	vst1.64	{d18-d19}, [r5]
   17070:	str	r2, [sp]
   17074:	bne	1707c <__assert_fail@plt+0x5968>
   17078:	bl	116f0 <abort@plt>
   1707c:	str	r1, [sp, #44]	; 0x2c
   17080:	str	r0, [sp, #40]	; 0x28
   17084:	mov	r3, sp
   17088:	mov	r0, #0
   1708c:	mov	r1, lr
   17090:	mov	r2, ip
   17094:	bl	16930 <__assert_fail@plt+0x521c>
   17098:	sub	sp, fp, #8
   1709c:	pop	{r4, r5, fp, pc}
   170a0:	movw	r3, #45432	; 0xb178
   170a4:	movt	r3, #2
   170a8:	b	16930 <__assert_fail@plt+0x521c>
   170ac:	movw	r3, #45432	; 0xb178
   170b0:	mov	r2, r1
   170b4:	mov	r1, r0
   170b8:	mov	r0, #0
   170bc:	movt	r3, #2
   170c0:	b	16930 <__assert_fail@plt+0x521c>
   170c4:	movw	r3, #45432	; 0xb178
   170c8:	mvn	r2, #0
   170cc:	movt	r3, #2
   170d0:	b	16930 <__assert_fail@plt+0x521c>
   170d4:	movw	r3, #45432	; 0xb178
   170d8:	mov	r1, r0
   170dc:	mov	r0, #0
   170e0:	mvn	r2, #0
   170e4:	movt	r3, #2
   170e8:	b	16930 <__assert_fail@plt+0x521c>
   170ec:	push	{r4, r5, fp, lr}
   170f0:	add	fp, sp, #8
   170f4:	mov	r5, r0
   170f8:	mov	r4, r1
   170fc:	mov	r0, #0
   17100:	mov	r2, #5
   17104:	mov	r1, r5
   17108:	bl	11444 <dcgettext@plt>
   1710c:	cmp	r0, r5
   17110:	popne	{r4, r5, fp, pc}
   17114:	bl	190e8 <__assert_fail@plt+0x79d4>
   17118:	ldrb	r1, [r0]
   1711c:	and	r1, r1, #223	; 0xdf
   17120:	cmp	r1, #71	; 0x47
   17124:	beq	1718c <__assert_fail@plt+0x5a78>
   17128:	cmp	r1, #85	; 0x55
   1712c:	bne	171e4 <__assert_fail@plt+0x5ad0>
   17130:	ldrb	r1, [r0, #1]
   17134:	and	r1, r1, #223	; 0xdf
   17138:	cmp	r1, #84	; 0x54
   1713c:	bne	171e4 <__assert_fail@plt+0x5ad0>
   17140:	ldrb	r1, [r0, #2]
   17144:	and	r1, r1, #223	; 0xdf
   17148:	cmp	r1, #70	; 0x46
   1714c:	bne	171e4 <__assert_fail@plt+0x5ad0>
   17150:	ldrb	r1, [r0, #3]
   17154:	cmp	r1, #45	; 0x2d
   17158:	bne	171e4 <__assert_fail@plt+0x5ad0>
   1715c:	ldrb	r1, [r0, #4]
   17160:	cmp	r1, #56	; 0x38
   17164:	bne	171e4 <__assert_fail@plt+0x5ad0>
   17168:	ldrb	r0, [r0, #5]
   1716c:	cmp	r0, #0
   17170:	bne	171e4 <__assert_fail@plt+0x5ad0>
   17174:	ldrb	r1, [r5]
   17178:	movw	r2, #43355	; 0xa95b
   1717c:	movw	r0, #43359	; 0xa95f
   17180:	movt	r2, #1
   17184:	movt	r0, #1
   17188:	b	17214 <__assert_fail@plt+0x5b00>
   1718c:	ldrb	r1, [r0, #1]
   17190:	and	r1, r1, #223	; 0xdf
   17194:	cmp	r1, #66	; 0x42
   17198:	bne	171e4 <__assert_fail@plt+0x5ad0>
   1719c:	ldrb	r1, [r0, #2]
   171a0:	cmp	r1, #49	; 0x31
   171a4:	bne	171e4 <__assert_fail@plt+0x5ad0>
   171a8:	ldrb	r1, [r0, #3]
   171ac:	cmp	r1, #56	; 0x38
   171b0:	bne	171e4 <__assert_fail@plt+0x5ad0>
   171b4:	ldrb	r1, [r0, #4]
   171b8:	cmp	r1, #48	; 0x30
   171bc:	bne	171e4 <__assert_fail@plt+0x5ad0>
   171c0:	ldrb	r1, [r0, #5]
   171c4:	cmp	r1, #51	; 0x33
   171c8:	bne	171e4 <__assert_fail@plt+0x5ad0>
   171cc:	ldrb	r1, [r0, #6]
   171d0:	cmp	r1, #48	; 0x30
   171d4:	bne	171e4 <__assert_fail@plt+0x5ad0>
   171d8:	ldrb	r0, [r0, #7]
   171dc:	cmp	r0, #0
   171e0:	beq	17200 <__assert_fail@plt+0x5aec>
   171e4:	movw	r1, #42448	; 0xa5d0
   171e8:	movw	r0, #43353	; 0xa959
   171ec:	cmp	r4, #9
   171f0:	movt	r1, #1
   171f4:	movt	r0, #1
   171f8:	moveq	r0, r1
   171fc:	pop	{r4, r5, fp, pc}
   17200:	ldrb	r1, [r5]
   17204:	movw	r2, #43363	; 0xa963
   17208:	movw	r0, #43367	; 0xa967
   1720c:	movt	r2, #1
   17210:	movt	r0, #1
   17214:	cmp	r1, #96	; 0x60
   17218:	moveq	r0, r2
   1721c:	pop	{r4, r5, fp, pc}
   17220:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17224:	add	fp, sp, #24
   17228:	movw	r8, #0
   1722c:	mov	r6, r2
   17230:	mov	r4, r1
   17234:	mov	r5, r0
   17238:	movt	r8, #32752	; 0x7ff0
   1723c:	mov	r0, r5
   17240:	mov	r1, r4
   17244:	mov	r2, r6
   17248:	bl	113c0 <read@plt>
   1724c:	mov	r7, r0
   17250:	cmn	r0, #1
   17254:	bgt	1727c <__assert_fail@plt+0x5b68>
   17258:	bl	115d0 <__errno_location@plt>
   1725c:	ldr	r0, [r0]
   17260:	cmp	r0, #4
   17264:	beq	1723c <__assert_fail@plt+0x5b28>
   17268:	cmp	r6, r8
   1726c:	bls	1727c <__assert_fail@plt+0x5b68>
   17270:	cmp	r0, #22
   17274:	mov	r6, r8
   17278:	beq	1723c <__assert_fail@plt+0x5b28>
   1727c:	mov	r0, r7
   17280:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17284:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17288:	add	fp, sp, #24
   1728c:	movw	r8, #0
   17290:	mov	r6, r2
   17294:	mov	r4, r1
   17298:	mov	r5, r0
   1729c:	movt	r8, #32752	; 0x7ff0
   172a0:	mov	r0, r5
   172a4:	mov	r1, r4
   172a8:	mov	r2, r6
   172ac:	bl	1160c <write@plt>
   172b0:	mov	r7, r0
   172b4:	cmn	r0, #1
   172b8:	bgt	172e0 <__assert_fail@plt+0x5bcc>
   172bc:	bl	115d0 <__errno_location@plt>
   172c0:	ldr	r0, [r0]
   172c4:	cmp	r0, #4
   172c8:	beq	172a0 <__assert_fail@plt+0x5b8c>
   172cc:	cmp	r6, r8
   172d0:	bls	172e0 <__assert_fail@plt+0x5bcc>
   172d4:	cmp	r0, #22
   172d8:	mov	r6, r8
   172dc:	beq	172a0 <__assert_fail@plt+0x5b8c>
   172e0:	mov	r0, r7
   172e4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   172e8:	push	{r4, r5, r6, r7, fp, lr}
   172ec:	add	fp, sp, #16
   172f0:	sub	sp, sp, #8
   172f4:	mov	r6, r0
   172f8:	ldrb	r0, [r0]
   172fc:	mov	r4, r1
   17300:	sub	r0, r0, #48	; 0x30
   17304:	cmp	r0, #10
   17308:	bcs	17338 <__assert_fail@plt+0x5c24>
   1730c:	add	r1, sp, #4
   17310:	mov	r0, r6
   17314:	mov	r2, #10
   17318:	bl	113b4 <strtol@plt>
   1731c:	cmp	r0, #64	; 0x40
   17320:	bgt	1743c <__assert_fail@plt+0x5d28>
   17324:	ldr	r1, [sp, #4]
   17328:	ldrb	r1, [r1]
   1732c:	cmp	r1, #0
   17330:	mvnne	r0, #0
   17334:	b	17440 <__assert_fail@plt+0x5d2c>
   17338:	movw	r7, #45480	; 0xb1a8
   1733c:	mov	r5, #0
   17340:	movt	r7, #2
   17344:	add	r0, r7, r5
   17348:	mov	r1, r6
   1734c:	add	r0, r0, #4
   17350:	bl	113a8 <strcmp@plt>
   17354:	cmp	r0, #0
   17358:	beq	173f8 <__assert_fail@plt+0x5ce4>
   1735c:	add	r5, r5, #12
   17360:	cmp	r5, #420	; 0x1a4
   17364:	bne	17344 <__assert_fail@plt+0x5c30>
   17368:	bl	116d8 <__libc_current_sigrtmin@plt>
   1736c:	mov	r5, r0
   17370:	bl	11594 <__libc_current_sigrtmax@plt>
   17374:	mov	r7, r0
   17378:	cmp	r5, #1
   1737c:	blt	1739c <__assert_fail@plt+0x5c88>
   17380:	movw	r1, #43456	; 0xa9c0
   17384:	mov	r0, r6
   17388:	mov	r2, #5
   1738c:	movt	r1, #1
   17390:	bl	116e4 <strncmp@plt>
   17394:	cmp	r0, #0
   17398:	beq	17400 <__assert_fail@plt+0x5cec>
   1739c:	cmp	r7, #1
   173a0:	blt	1743c <__assert_fail@plt+0x5d28>
   173a4:	movw	r1, #43462	; 0xa9c6
   173a8:	mov	r0, r6
   173ac:	mov	r2, #5
   173b0:	movt	r1, #1
   173b4:	bl	116e4 <strncmp@plt>
   173b8:	cmp	r0, #0
   173bc:	bne	1743c <__assert_fail@plt+0x5d28>
   173c0:	add	r0, r6, #5
   173c4:	mov	r1, sp
   173c8:	mov	r2, #10
   173cc:	bl	113b4 <strtol@plt>
   173d0:	ldr	r1, [sp]
   173d4:	ldrb	r1, [r1]
   173d8:	cmp	r1, #0
   173dc:	bne	1743c <__assert_fail@plt+0x5d28>
   173e0:	sub	r1, r5, r7
   173e4:	cmp	r1, r0
   173e8:	cmple	r0, #0
   173ec:	bgt	1743c <__assert_fail@plt+0x5d28>
   173f0:	add	r0, r0, r7
   173f4:	b	17440 <__assert_fail@plt+0x5d2c>
   173f8:	ldr	r0, [r7, r5]
   173fc:	b	17440 <__assert_fail@plt+0x5d2c>
   17400:	add	r0, r6, #5
   17404:	mov	r1, sp
   17408:	mov	r2, #10
   1740c:	bl	113b4 <strtol@plt>
   17410:	sub	r1, r7, r5
   17414:	cmp	r0, r1
   17418:	bgt	1743c <__assert_fail@plt+0x5d28>
   1741c:	cmp	r0, #0
   17420:	bmi	1743c <__assert_fail@plt+0x5d28>
   17424:	ldr	r1, [sp]
   17428:	ldrb	r1, [r1]
   1742c:	cmp	r1, #0
   17430:	bne	1743c <__assert_fail@plt+0x5d28>
   17434:	add	r0, r0, r5
   17438:	b	17440 <__assert_fail@plt+0x5d2c>
   1743c:	mvn	r0, #0
   17440:	str	r0, [r4]
   17444:	asr	r0, r0, #31
   17448:	sub	sp, fp, #16
   1744c:	pop	{r4, r5, r6, r7, fp, pc}
   17450:	push	{r4, r5, r6, r7, fp, lr}
   17454:	add	fp, sp, #16
   17458:	sub	sp, sp, #8
   1745c:	mov	r5, r0
   17460:	movw	r0, #45480	; 0xb1a8
   17464:	mov	r4, r1
   17468:	mov	r1, #0
   1746c:	movt	r0, #2
   17470:	add	r2, r0, #12
   17474:	ldr	r3, [r2, #-12]
   17478:	cmp	r3, r5
   1747c:	beq	174f4 <__assert_fail@plt+0x5de0>
   17480:	cmp	r1, #34	; 0x22
   17484:	beq	174a0 <__assert_fail@plt+0x5d8c>
   17488:	ldr	r3, [r2]
   1748c:	cmp	r3, r5
   17490:	beq	174f0 <__assert_fail@plt+0x5ddc>
   17494:	add	r2, r2, #24
   17498:	add	r1, r1, #2
   1749c:	b	17474 <__assert_fail@plt+0x5d60>
   174a0:	bl	116d8 <__libc_current_sigrtmin@plt>
   174a4:	mov	r7, r0
   174a8:	mvn	r6, #0
   174ac:	bl	11594 <__libc_current_sigrtmax@plt>
   174b0:	cmp	r7, r5
   174b4:	bgt	1750c <__assert_fail@plt+0x5df8>
   174b8:	cmp	r0, r5
   174bc:	blt	1750c <__assert_fail@plt+0x5df8>
   174c0:	sub	r1, r0, r7
   174c4:	add	r1, r1, r1, lsr #31
   174c8:	add	r1, r7, r1, asr #1
   174cc:	cmp	r1, r5
   174d0:	bge	17518 <__assert_fail@plt+0x5e04>
   174d4:	mov	r1, #88	; 0x58
   174d8:	mov	r7, r0
   174dc:	strh	r1, [r4, #4]
   174e0:	movw	r1, #21586	; 0x5452
   174e4:	movt	r1, #16717	; 0x414d
   174e8:	str	r1, [r4]
   174ec:	b	1752c <__assert_fail@plt+0x5e18>
   174f0:	add	r1, r1, #1
   174f4:	add	r1, r1, r1, lsl #1
   174f8:	add	r0, r0, r1, lsl #2
   174fc:	add	r1, r0, #4
   17500:	mov	r0, r4
   17504:	bl	114d4 <strcpy@plt>
   17508:	mov	r6, #0
   1750c:	mov	r0, r6
   17510:	sub	sp, fp, #16
   17514:	pop	{r4, r5, r6, r7, fp, pc}
   17518:	mov	r0, #78	; 0x4e
   1751c:	strh	r0, [r4, #4]
   17520:	movw	r0, #21586	; 0x5452
   17524:	movt	r0, #18765	; 0x494d
   17528:	str	r0, [r4]
   1752c:	subs	r0, r5, r7
   17530:	mov	r6, #0
   17534:	beq	1750c <__assert_fail@plt+0x5df8>
   17538:	movw	r3, #43468	; 0xa9cc
   1753c:	str	r0, [sp]
   17540:	add	r0, r4, #5
   17544:	mov	r1, #1
   17548:	mvn	r2, #0
   1754c:	movt	r3, #1
   17550:	bl	115dc <__sprintf_chk@plt>
   17554:	b	1750c <__assert_fail@plt+0x5df8>
   17558:	push	{r4, r5, r6, r7, fp, lr}
   1755c:	add	fp, sp, #16
   17560:	mov	r4, r0
   17564:	cmp	r0, #2
   17568:	bhi	17598 <__assert_fail@plt+0x5e84>
   1756c:	mov	r0, r4
   17570:	bl	191c0 <__assert_fail@plt+0x7aac>
   17574:	mov	r5, r0
   17578:	bl	115d0 <__errno_location@plt>
   1757c:	ldr	r7, [r0]
   17580:	mov	r6, r0
   17584:	mov	r0, r4
   17588:	bl	116fc <close@plt>
   1758c:	mov	r0, r5
   17590:	str	r7, [r6]
   17594:	pop	{r4, r5, r6, r7, fp, pc}
   17598:	mov	r0, r4
   1759c:	pop	{r4, r5, r6, r7, fp, pc}
   175a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   175a4:	add	fp, sp, #24
   175a8:	sub	sp, sp, #32
   175ac:	ldr	r6, [fp, #12]
   175b0:	ldr	r7, [fp, #8]
   175b4:	mov	r4, r2
   175b8:	mov	r8, r0
   175bc:	cmp	r1, #0
   175c0:	beq	175e8 <__assert_fail@plt+0x5ed4>
   175c4:	movw	r2, #43472	; 0xa9d0
   175c8:	mov	r5, r1
   175cc:	str	r3, [sp, #4]
   175d0:	str	r4, [sp]
   175d4:	mov	r0, r8
   175d8:	mov	r1, #1
   175dc:	movt	r2, #1
   175e0:	mov	r3, r5
   175e4:	b	17600 <__assert_fail@plt+0x5eec>
   175e8:	movw	r2, #43484	; 0xa9dc
   175ec:	str	r3, [sp]
   175f0:	mov	r0, r8
   175f4:	mov	r1, #1
   175f8:	mov	r3, r4
   175fc:	movt	r2, #1
   17600:	bl	11624 <__fprintf_chk@plt>
   17604:	movw	r1, #43491	; 0xa9e3
   17608:	mov	r0, #0
   1760c:	mov	r2, #5
   17610:	movt	r1, #1
   17614:	bl	11444 <dcgettext@plt>
   17618:	movw	r2, #44209	; 0xacb1
   1761c:	mov	r3, r0
   17620:	movw	r0, #2022	; 0x7e6
   17624:	mov	r1, #1
   17628:	movt	r2, #1
   1762c:	str	r0, [sp]
   17630:	mov	r0, r8
   17634:	bl	11624 <__fprintf_chk@plt>
   17638:	movw	r4, #39852	; 0x9bac
   1763c:	mov	r1, r8
   17640:	movt	r4, #1
   17644:	mov	r0, r4
   17648:	bl	11390 <fputs_unlocked@plt>
   1764c:	movw	r1, #43495	; 0xa9e7
   17650:	mov	r0, #0
   17654:	mov	r2, #5
   17658:	movt	r1, #1
   1765c:	bl	11444 <dcgettext@plt>
   17660:	movw	r3, #43666	; 0xaa92
   17664:	mov	r2, r0
   17668:	mov	r0, r8
   1766c:	mov	r1, #1
   17670:	movt	r3, #1
   17674:	bl	11624 <__fprintf_chk@plt>
   17678:	mov	r0, r4
   1767c:	mov	r1, r8
   17680:	bl	11390 <fputs_unlocked@plt>
   17684:	cmp	r6, #9
   17688:	bhi	176c4 <__assert_fail@plt+0x5fb0>
   1768c:	add	r0, pc, #0
   17690:	ldr	pc, [r0, r6, lsl #2]
   17694:			; <UNDEFINED> instruction: 0x000176bc
   17698:	ldrdeq	r7, [r1], -r0
   1769c:	andeq	r7, r1, r0, lsl #14
   176a0:	andeq	r7, r1, r8, lsr #14
   176a4:	andeq	r7, r1, r0, asr r7
   176a8:	andeq	r7, r1, r8, ror r7
   176ac:	andeq	r7, r1, r0, lsr #15
   176b0:	ldrdeq	r7, [r1], -r8
   176b4:	andeq	r7, r1, r8, ror r8
   176b8:	andeq	r7, r1, r0, lsr #16
   176bc:	sub	sp, fp, #24
   176c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   176c4:	movw	r1, #44019	; 0xabf3
   176c8:	movt	r1, #1
   176cc:	b	17828 <__assert_fail@plt+0x6114>
   176d0:	movw	r1, #43700	; 0xaab4
   176d4:	mov	r0, #0
   176d8:	mov	r2, #5
   176dc:	movt	r1, #1
   176e0:	bl	11444 <dcgettext@plt>
   176e4:	ldr	r3, [r7]
   176e8:	mov	r2, r0
   176ec:	mov	r0, r8
   176f0:	mov	r1, #1
   176f4:	sub	sp, fp, #24
   176f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   176fc:	b	11624 <__fprintf_chk@plt>
   17700:	movw	r1, #43716	; 0xaac4
   17704:	mov	r0, #0
   17708:	mov	r2, #5
   1770c:	movt	r1, #1
   17710:	bl	11444 <dcgettext@plt>
   17714:	mov	r2, r0
   17718:	ldr	r3, [r7]
   1771c:	ldr	r0, [r7, #4]
   17720:	str	r0, [sp]
   17724:	b	17814 <__assert_fail@plt+0x6100>
   17728:	movw	r1, #43739	; 0xaadb
   1772c:	mov	r0, #0
   17730:	mov	r2, #5
   17734:	movt	r1, #1
   17738:	bl	11444 <dcgettext@plt>
   1773c:	mov	r2, r0
   17740:	ldr	r3, [r7]
   17744:	ldmib	r7, {r0, r1}
   17748:	stm	sp, {r0, r1}
   1774c:	b	17814 <__assert_fail@plt+0x6100>
   17750:	movw	r1, #43767	; 0xaaf7
   17754:	mov	r0, #0
   17758:	mov	r2, #5
   1775c:	movt	r1, #1
   17760:	bl	11444 <dcgettext@plt>
   17764:	ldr	r3, [r7]
   17768:	mov	r2, r0
   1776c:	ldmib	r7, {r0, r1, r7}
   17770:	stm	sp, {r0, r1, r7}
   17774:	b	17814 <__assert_fail@plt+0x6100>
   17778:	movw	r1, #43799	; 0xab17
   1777c:	mov	r0, #0
   17780:	mov	r2, #5
   17784:	movt	r1, #1
   17788:	bl	11444 <dcgettext@plt>
   1778c:	ldr	r3, [r7]
   17790:	mov	r2, r0
   17794:	ldmib	r7, {r0, r1, r6, r7}
   17798:	stm	sp, {r0, r1, r6, r7}
   1779c:	b	17814 <__assert_fail@plt+0x6100>
   177a0:	movw	r1, #43835	; 0xab3b
   177a4:	mov	r0, #0
   177a8:	mov	r2, #5
   177ac:	movt	r1, #1
   177b0:	bl	11444 <dcgettext@plt>
   177b4:	mov	r2, r0
   177b8:	ldr	r3, [r7]
   177bc:	ldmib	r7, {r0, r1, r6}
   177c0:	ldr	r5, [r7, #16]
   177c4:	ldr	r7, [r7, #20]
   177c8:	stm	sp, {r0, r1, r6}
   177cc:	str	r5, [sp, #12]
   177d0:	str	r7, [sp, #16]
   177d4:	b	17814 <__assert_fail@plt+0x6100>
   177d8:	movw	r1, #43875	; 0xab63
   177dc:	mov	r0, #0
   177e0:	mov	r2, #5
   177e4:	movt	r1, #1
   177e8:	bl	11444 <dcgettext@plt>
   177ec:	mov	r2, r0
   177f0:	ldr	r3, [r7]
   177f4:	ldmib	r7, {r0, r1, r6}
   177f8:	ldr	r5, [r7, #16]
   177fc:	ldr	r4, [r7, #20]
   17800:	ldr	r7, [r7, #24]
   17804:	stm	sp, {r0, r1, r6}
   17808:	str	r5, [sp, #12]
   1780c:	str	r4, [sp, #16]
   17810:	str	r7, [sp, #20]
   17814:	mov	r0, r8
   17818:	mov	r1, #1
   1781c:	b	178c8 <__assert_fail@plt+0x61b4>
   17820:	movw	r1, #43967	; 0xabbf
   17824:	movt	r1, #1
   17828:	mov	r0, #0
   1782c:	mov	r2, #5
   17830:	bl	11444 <dcgettext@plt>
   17834:	mov	ip, r0
   17838:	ldr	r3, [r7]
   1783c:	ldr	r0, [r7, #4]
   17840:	ldr	r1, [r7, #8]
   17844:	ldr	r6, [r7, #12]
   17848:	ldr	r5, [r7, #16]
   1784c:	ldr	r4, [r7, #20]
   17850:	ldr	r2, [r7, #24]
   17854:	ldr	lr, [r7, #28]
   17858:	ldr	r7, [r7, #32]
   1785c:	stm	sp, {r0, r1, r6}
   17860:	str	r5, [sp, #12]
   17864:	str	r4, [sp, #16]
   17868:	str	r2, [sp, #20]
   1786c:	str	lr, [sp, #24]
   17870:	str	r7, [sp, #28]
   17874:	b	178bc <__assert_fail@plt+0x61a8>
   17878:	movw	r1, #43919	; 0xab8f
   1787c:	mov	r0, #0
   17880:	mov	r2, #5
   17884:	movt	r1, #1
   17888:	bl	11444 <dcgettext@plt>
   1788c:	mov	ip, r0
   17890:	ldr	r3, [r7]
   17894:	ldmib	r7, {r0, r1, r6}
   17898:	ldr	r5, [r7, #16]
   1789c:	ldr	r4, [r7, #20]
   178a0:	ldr	r2, [r7, #24]
   178a4:	ldr	r7, [r7, #28]
   178a8:	stm	sp, {r0, r1, r6}
   178ac:	str	r5, [sp, #12]
   178b0:	str	r4, [sp, #16]
   178b4:	str	r2, [sp, #20]
   178b8:	str	r7, [sp, #24]
   178bc:	mov	r0, r8
   178c0:	mov	r1, #1
   178c4:	mov	r2, ip
   178c8:	bl	11624 <__fprintf_chk@plt>
   178cc:	sub	sp, fp, #24
   178d0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178d4:	push	{r4, sl, fp, lr}
   178d8:	add	fp, sp, #8
   178dc:	sub	sp, sp, #8
   178e0:	ldr	ip, [fp, #8]
   178e4:	mov	lr, #0
   178e8:	ldr	r4, [ip, lr, lsl #2]
   178ec:	add	lr, lr, #1
   178f0:	cmp	r4, #0
   178f4:	bne	178e8 <__assert_fail@plt+0x61d4>
   178f8:	sub	r4, lr, #1
   178fc:	str	ip, [sp]
   17900:	str	r4, [sp, #4]
   17904:	bl	175a0 <__assert_fail@plt+0x5e8c>
   17908:	sub	sp, fp, #8
   1790c:	pop	{r4, sl, fp, pc}
   17910:	push	{fp, lr}
   17914:	mov	fp, sp
   17918:	sub	sp, sp, #48	; 0x30
   1791c:	ldr	ip, [fp, #8]
   17920:	ldr	lr, [ip]
   17924:	cmp	lr, #0
   17928:	str	lr, [sp, #8]
   1792c:	beq	179c8 <__assert_fail@plt+0x62b4>
   17930:	ldr	lr, [ip, #4]
   17934:	cmp	lr, #0
   17938:	str	lr, [sp, #12]
   1793c:	beq	179d0 <__assert_fail@plt+0x62bc>
   17940:	ldr	lr, [ip, #8]
   17944:	cmp	lr, #0
   17948:	str	lr, [sp, #16]
   1794c:	beq	179d8 <__assert_fail@plt+0x62c4>
   17950:	ldr	lr, [ip, #12]
   17954:	cmp	lr, #0
   17958:	str	lr, [sp, #20]
   1795c:	beq	179e0 <__assert_fail@plt+0x62cc>
   17960:	ldr	lr, [ip, #16]
   17964:	cmp	lr, #0
   17968:	str	lr, [sp, #24]
   1796c:	beq	179e8 <__assert_fail@plt+0x62d4>
   17970:	ldr	lr, [ip, #20]
   17974:	cmp	lr, #0
   17978:	str	lr, [sp, #28]
   1797c:	beq	179f0 <__assert_fail@plt+0x62dc>
   17980:	ldr	lr, [ip, #24]
   17984:	cmp	lr, #0
   17988:	str	lr, [sp, #32]
   1798c:	beq	179f8 <__assert_fail@plt+0x62e4>
   17990:	ldr	lr, [ip, #28]
   17994:	cmp	lr, #0
   17998:	str	lr, [sp, #36]	; 0x24
   1799c:	beq	17a00 <__assert_fail@plt+0x62ec>
   179a0:	ldr	lr, [ip, #32]
   179a4:	cmp	lr, #0
   179a8:	str	lr, [sp, #40]	; 0x28
   179ac:	beq	17a08 <__assert_fail@plt+0x62f4>
   179b0:	ldr	lr, [ip, #36]	; 0x24
   179b4:	mov	ip, #10
   179b8:	cmp	lr, #0
   179bc:	str	lr, [sp, #44]	; 0x2c
   179c0:	movweq	ip, #9
   179c4:	b	17a0c <__assert_fail@plt+0x62f8>
   179c8:	mov	ip, #0
   179cc:	b	17a0c <__assert_fail@plt+0x62f8>
   179d0:	mov	ip, #1
   179d4:	b	17a0c <__assert_fail@plt+0x62f8>
   179d8:	mov	ip, #2
   179dc:	b	17a0c <__assert_fail@plt+0x62f8>
   179e0:	mov	ip, #3
   179e4:	b	17a0c <__assert_fail@plt+0x62f8>
   179e8:	mov	ip, #4
   179ec:	b	17a0c <__assert_fail@plt+0x62f8>
   179f0:	mov	ip, #5
   179f4:	b	17a0c <__assert_fail@plt+0x62f8>
   179f8:	mov	ip, #6
   179fc:	b	17a0c <__assert_fail@plt+0x62f8>
   17a00:	mov	ip, #7
   17a04:	b	17a0c <__assert_fail@plt+0x62f8>
   17a08:	mov	ip, #8
   17a0c:	add	lr, sp, #8
   17a10:	str	ip, [sp, #4]
   17a14:	str	lr, [sp]
   17a18:	bl	175a0 <__assert_fail@plt+0x5e8c>
   17a1c:	mov	sp, fp
   17a20:	pop	{fp, pc}
   17a24:	push	{fp, lr}
   17a28:	mov	fp, sp
   17a2c:	sub	sp, sp, #56	; 0x38
   17a30:	add	ip, fp, #8
   17a34:	str	ip, [sp, #12]
   17a38:	ldr	lr, [fp, #8]
   17a3c:	cmp	lr, #0
   17a40:	str	lr, [sp, #16]
   17a44:	beq	17ae0 <__assert_fail@plt+0x63cc>
   17a48:	ldr	lr, [ip, #4]
   17a4c:	cmp	lr, #0
   17a50:	str	lr, [sp, #20]
   17a54:	beq	17ae8 <__assert_fail@plt+0x63d4>
   17a58:	ldr	lr, [ip, #8]
   17a5c:	cmp	lr, #0
   17a60:	str	lr, [sp, #24]
   17a64:	beq	17af0 <__assert_fail@plt+0x63dc>
   17a68:	ldr	lr, [ip, #12]
   17a6c:	cmp	lr, #0
   17a70:	str	lr, [sp, #28]
   17a74:	beq	17af8 <__assert_fail@plt+0x63e4>
   17a78:	ldr	lr, [ip, #16]
   17a7c:	cmp	lr, #0
   17a80:	str	lr, [sp, #32]
   17a84:	beq	17b00 <__assert_fail@plt+0x63ec>
   17a88:	ldr	lr, [ip, #20]
   17a8c:	cmp	lr, #0
   17a90:	str	lr, [sp, #36]	; 0x24
   17a94:	beq	17b08 <__assert_fail@plt+0x63f4>
   17a98:	ldr	lr, [ip, #24]
   17a9c:	cmp	lr, #0
   17aa0:	str	lr, [sp, #40]	; 0x28
   17aa4:	beq	17b10 <__assert_fail@plt+0x63fc>
   17aa8:	ldr	lr, [ip, #28]
   17aac:	cmp	lr, #0
   17ab0:	str	lr, [sp, #44]	; 0x2c
   17ab4:	beq	17b18 <__assert_fail@plt+0x6404>
   17ab8:	ldr	lr, [ip, #32]
   17abc:	cmp	lr, #0
   17ac0:	str	lr, [sp, #48]	; 0x30
   17ac4:	beq	17b20 <__assert_fail@plt+0x640c>
   17ac8:	ldr	lr, [ip, #36]	; 0x24
   17acc:	mov	ip, #10
   17ad0:	cmp	lr, #0
   17ad4:	str	lr, [sp, #52]	; 0x34
   17ad8:	movweq	ip, #9
   17adc:	b	17b24 <__assert_fail@plt+0x6410>
   17ae0:	mov	ip, #0
   17ae4:	b	17b24 <__assert_fail@plt+0x6410>
   17ae8:	mov	ip, #1
   17aec:	b	17b24 <__assert_fail@plt+0x6410>
   17af0:	mov	ip, #2
   17af4:	b	17b24 <__assert_fail@plt+0x6410>
   17af8:	mov	ip, #3
   17afc:	b	17b24 <__assert_fail@plt+0x6410>
   17b00:	mov	ip, #4
   17b04:	b	17b24 <__assert_fail@plt+0x6410>
   17b08:	mov	ip, #5
   17b0c:	b	17b24 <__assert_fail@plt+0x6410>
   17b10:	mov	ip, #6
   17b14:	b	17b24 <__assert_fail@plt+0x6410>
   17b18:	mov	ip, #7
   17b1c:	b	17b24 <__assert_fail@plt+0x6410>
   17b20:	mov	ip, #8
   17b24:	add	lr, sp, #16
   17b28:	str	ip, [sp, #4]
   17b2c:	str	lr, [sp]
   17b30:	bl	175a0 <__assert_fail@plt+0x5e8c>
   17b34:	mov	sp, fp
   17b38:	pop	{fp, pc}
   17b3c:	push	{fp, lr}
   17b40:	mov	fp, sp
   17b44:	movw	r0, #45924	; 0xb364
   17b48:	movt	r0, #2
   17b4c:	ldr	r1, [r0]
   17b50:	movw	r0, #39852	; 0x9bac
   17b54:	movt	r0, #1
   17b58:	bl	11390 <fputs_unlocked@plt>
   17b5c:	movw	r1, #44079	; 0xac2f
   17b60:	mov	r0, #0
   17b64:	mov	r2, #5
   17b68:	movt	r1, #1
   17b6c:	bl	11444 <dcgettext@plt>
   17b70:	movw	r2, #44099	; 0xac43
   17b74:	mov	r1, r0
   17b78:	mov	r0, #1
   17b7c:	movt	r2, #1
   17b80:	bl	11600 <__printf_chk@plt>
   17b84:	movw	r1, #44121	; 0xac59
   17b88:	mov	r0, #0
   17b8c:	mov	r2, #5
   17b90:	movt	r1, #1
   17b94:	bl	11444 <dcgettext@plt>
   17b98:	movw	r2, #40923	; 0x9fdb
   17b9c:	movw	r3, #41636	; 0xa2a4
   17ba0:	mov	r1, r0
   17ba4:	mov	r0, #1
   17ba8:	movt	r2, #1
   17bac:	movt	r3, #1
   17bb0:	bl	11600 <__printf_chk@plt>
   17bb4:	movw	r1, #44141	; 0xac6d
   17bb8:	mov	r0, #0
   17bbc:	mov	r2, #5
   17bc0:	movt	r1, #1
   17bc4:	bl	11444 <dcgettext@plt>
   17bc8:	movw	r2, #44180	; 0xac94
   17bcc:	mov	r1, r0
   17bd0:	mov	r0, #1
   17bd4:	movt	r2, #1
   17bd8:	pop	{fp, lr}
   17bdc:	b	11600 <__printf_chk@plt>
   17be0:	push	{fp, lr}
   17be4:	mov	fp, sp
   17be8:	bl	116cc <aligned_alloc@plt>
   17bec:	cmp	r0, #0
   17bf0:	popne	{fp, pc}
   17bf4:	bl	181ac <__assert_fail@plt+0x6a98>
   17bf8:	push	{r4, r5, r6, sl, fp, lr}
   17bfc:	add	fp, sp, #16
   17c00:	mov	r4, r2
   17c04:	mov	r5, r1
   17c08:	mov	r6, r0
   17c0c:	bl	19184 <__assert_fail@plt+0x7a70>
   17c10:	cmp	r0, #0
   17c14:	popne	{r4, r5, r6, sl, fp, pc}
   17c18:	cmp	r6, #0
   17c1c:	beq	17c30 <__assert_fail@plt+0x651c>
   17c20:	cmp	r5, #0
   17c24:	cmpne	r4, #0
   17c28:	bne	17c30 <__assert_fail@plt+0x651c>
   17c2c:	pop	{r4, r5, r6, sl, fp, pc}
   17c30:	bl	181ac <__assert_fail@plt+0x6a98>
   17c34:	push	{r4, r5, r6, sl, fp, lr}
   17c38:	add	fp, sp, #16
   17c3c:	mov	r4, r2
   17c40:	mov	r5, r1
   17c44:	mov	r6, r0
   17c48:	bl	19184 <__assert_fail@plt+0x7a70>
   17c4c:	cmp	r0, #0
   17c50:	popne	{r4, r5, r6, sl, fp, pc}
   17c54:	cmp	r6, #0
   17c58:	beq	17c6c <__assert_fail@plt+0x6558>
   17c5c:	cmp	r5, #0
   17c60:	cmpne	r4, #0
   17c64:	bne	17c6c <__assert_fail@plt+0x6558>
   17c68:	pop	{r4, r5, r6, sl, fp, pc}
   17c6c:	bl	181ac <__assert_fail@plt+0x6a98>
   17c70:	push	{fp, lr}
   17c74:	mov	fp, sp
   17c78:	bl	18fe0 <__assert_fail@plt+0x78cc>
   17c7c:	cmp	r0, #0
   17c80:	popne	{fp, pc}
   17c84:	bl	181ac <__assert_fail@plt+0x6a98>
   17c88:	push	{fp, lr}
   17c8c:	mov	fp, sp
   17c90:	bl	18fe0 <__assert_fail@plt+0x78cc>
   17c94:	cmp	r0, #0
   17c98:	popne	{fp, pc}
   17c9c:	bl	181ac <__assert_fail@plt+0x6a98>
   17ca0:	push	{fp, lr}
   17ca4:	mov	fp, sp
   17ca8:	bl	18fe0 <__assert_fail@plt+0x78cc>
   17cac:	cmp	r0, #0
   17cb0:	popne	{fp, pc}
   17cb4:	bl	181ac <__assert_fail@plt+0x6a98>
   17cb8:	push	{r4, r5, fp, lr}
   17cbc:	add	fp, sp, #8
   17cc0:	mov	r4, r1
   17cc4:	mov	r5, r0
   17cc8:	bl	19010 <__assert_fail@plt+0x78fc>
   17ccc:	cmp	r0, #0
   17cd0:	popne	{r4, r5, fp, pc}
   17cd4:	cmp	r5, #0
   17cd8:	beq	17ce8 <__assert_fail@plt+0x65d4>
   17cdc:	cmp	r4, #0
   17ce0:	bne	17ce8 <__assert_fail@plt+0x65d4>
   17ce4:	pop	{r4, r5, fp, pc}
   17ce8:	bl	181ac <__assert_fail@plt+0x6a98>
   17cec:	push	{fp, lr}
   17cf0:	mov	fp, sp
   17cf4:	cmp	r1, #0
   17cf8:	orreq	r1, r1, #1
   17cfc:	bl	19010 <__assert_fail@plt+0x78fc>
   17d00:	cmp	r0, #0
   17d04:	popne	{fp, pc}
   17d08:	bl	181ac <__assert_fail@plt+0x6a98>
   17d0c:	push	{fp, lr}
   17d10:	mov	fp, sp
   17d14:	clz	r3, r2
   17d18:	lsr	ip, r3, #5
   17d1c:	clz	r3, r1
   17d20:	lsr	r3, r3, #5
   17d24:	orrs	r3, r3, ip
   17d28:	movwne	r1, #1
   17d2c:	movwne	r2, #1
   17d30:	bl	19184 <__assert_fail@plt+0x7a70>
   17d34:	cmp	r0, #0
   17d38:	popne	{fp, pc}
   17d3c:	bl	181ac <__assert_fail@plt+0x6a98>
   17d40:	push	{fp, lr}
   17d44:	mov	fp, sp
   17d48:	mov	r2, r1
   17d4c:	mov	r1, r0
   17d50:	mov	r0, #0
   17d54:	bl	19184 <__assert_fail@plt+0x7a70>
   17d58:	cmp	r0, #0
   17d5c:	popne	{fp, pc}
   17d60:	bl	181ac <__assert_fail@plt+0x6a98>
   17d64:	push	{fp, lr}
   17d68:	mov	fp, sp
   17d6c:	mov	r2, r1
   17d70:	mov	r1, r0
   17d74:	clz	r0, r2
   17d78:	clz	r3, r1
   17d7c:	lsr	r0, r0, #5
   17d80:	lsr	r3, r3, #5
   17d84:	orrs	r0, r3, r0
   17d88:	mov	r0, #0
   17d8c:	movwne	r1, #1
   17d90:	movwne	r2, #1
   17d94:	bl	19184 <__assert_fail@plt+0x7a70>
   17d98:	cmp	r0, #0
   17d9c:	popne	{fp, pc}
   17da0:	bl	181ac <__assert_fail@plt+0x6a98>
   17da4:	push	{r4, r5, r6, sl, fp, lr}
   17da8:	add	fp, sp, #16
   17dac:	ldr	r5, [r1]
   17db0:	mov	r4, r1
   17db4:	mov	r6, r0
   17db8:	cmp	r0, #0
   17dbc:	beq	17dd4 <__assert_fail@plt+0x66c0>
   17dc0:	mov	r0, #1
   17dc4:	add	r0, r0, r5, lsr #1
   17dc8:	adds	r5, r5, r0
   17dcc:	bcc	17ddc <__assert_fail@plt+0x66c8>
   17dd0:	b	17e18 <__assert_fail@plt+0x6704>
   17dd4:	cmp	r5, #0
   17dd8:	movweq	r5, #64	; 0x40
   17ddc:	mov	r0, r6
   17de0:	mov	r1, r5
   17de4:	mov	r2, #1
   17de8:	bl	19184 <__assert_fail@plt+0x7a70>
   17dec:	cmp	r5, #0
   17df0:	mov	r1, r5
   17df4:	movwne	r1, #1
   17df8:	cmp	r0, #0
   17dfc:	bne	17e10 <__assert_fail@plt+0x66fc>
   17e00:	clz	r2, r6
   17e04:	lsr	r2, r2, #5
   17e08:	orrs	r1, r2, r1
   17e0c:	bne	17e18 <__assert_fail@plt+0x6704>
   17e10:	str	r5, [r4]
   17e14:	pop	{r4, r5, r6, sl, fp, pc}
   17e18:	bl	181ac <__assert_fail@plt+0x6a98>
   17e1c:	push	{r4, r5, r6, r7, fp, lr}
   17e20:	add	fp, sp, #16
   17e24:	ldr	r5, [r1]
   17e28:	mov	r6, r2
   17e2c:	mov	r4, r1
   17e30:	mov	r7, r0
   17e34:	cmp	r0, #0
   17e38:	beq	17e50 <__assert_fail@plt+0x673c>
   17e3c:	mov	r0, #1
   17e40:	add	r0, r0, r5, lsr #1
   17e44:	adds	r5, r5, r0
   17e48:	bcc	17e68 <__assert_fail@plt+0x6754>
   17e4c:	b	17e9c <__assert_fail@plt+0x6788>
   17e50:	cmp	r5, #0
   17e54:	bne	17e68 <__assert_fail@plt+0x6754>
   17e58:	mov	r0, #64	; 0x40
   17e5c:	cmp	r6, #64	; 0x40
   17e60:	udiv	r5, r0, r6
   17e64:	addhi	r5, r5, #1
   17e68:	mov	r0, r7
   17e6c:	mov	r1, r5
   17e70:	mov	r2, r6
   17e74:	bl	19184 <__assert_fail@plt+0x7a70>
   17e78:	cmp	r0, #0
   17e7c:	bne	17e94 <__assert_fail@plt+0x6780>
   17e80:	cmp	r7, #0
   17e84:	beq	17e9c <__assert_fail@plt+0x6788>
   17e88:	cmp	r6, #0
   17e8c:	cmpne	r5, #0
   17e90:	bne	17e9c <__assert_fail@plt+0x6788>
   17e94:	str	r5, [r4]
   17e98:	pop	{r4, r5, r6, r7, fp, pc}
   17e9c:	bl	181ac <__assert_fail@plt+0x6a98>
   17ea0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17ea4:	add	fp, sp, #24
   17ea8:	mov	r8, r1
   17eac:	ldr	r1, [r1]
   17eb0:	mov	r5, r0
   17eb4:	add	r0, r1, r1, asr #1
   17eb8:	cmp	r0, r1
   17ebc:	mvnvs	r0, #-2147483648	; 0x80000000
   17ec0:	cmp	r0, r3
   17ec4:	mov	r7, r0
   17ec8:	movgt	r7, r3
   17ecc:	cmn	r3, #1
   17ed0:	movle	r7, r0
   17ed4:	ldr	r0, [fp, #8]
   17ed8:	cmn	r0, #1
   17edc:	ble	17f04 <__assert_fail@plt+0x67f0>
   17ee0:	cmp	r0, #0
   17ee4:	beq	17f58 <__assert_fail@plt+0x6844>
   17ee8:	cmn	r7, #1
   17eec:	ble	17f2c <__assert_fail@plt+0x6818>
   17ef0:	mvn	r4, #-2147483648	; 0x80000000
   17ef4:	udiv	r6, r4, r0
   17ef8:	cmp	r6, r7
   17efc:	bge	17f58 <__assert_fail@plt+0x6844>
   17f00:	b	17f68 <__assert_fail@plt+0x6854>
   17f04:	cmn	r7, #1
   17f08:	ble	17f48 <__assert_fail@plt+0x6834>
   17f0c:	cmn	r0, #1
   17f10:	beq	17f58 <__assert_fail@plt+0x6844>
   17f14:	mov	r6, #-2147483648	; 0x80000000
   17f18:	mvn	r4, #-2147483648	; 0x80000000
   17f1c:	sdiv	r6, r6, r0
   17f20:	cmp	r6, r7
   17f24:	bge	17f58 <__assert_fail@plt+0x6844>
   17f28:	b	17f68 <__assert_fail@plt+0x6854>
   17f2c:	beq	17f58 <__assert_fail@plt+0x6844>
   17f30:	mov	r6, #-2147483648	; 0x80000000
   17f34:	mvn	r4, #-2147483648	; 0x80000000
   17f38:	sdiv	r6, r6, r7
   17f3c:	cmp	r6, r0
   17f40:	bge	17f58 <__assert_fail@plt+0x6844>
   17f44:	b	17f68 <__assert_fail@plt+0x6854>
   17f48:	mvn	r4, #-2147483648	; 0x80000000
   17f4c:	sdiv	r6, r4, r0
   17f50:	cmp	r7, r6
   17f54:	blt	17f68 <__assert_fail@plt+0x6854>
   17f58:	mul	r6, r7, r0
   17f5c:	mov	r4, #64	; 0x40
   17f60:	cmp	r6, #63	; 0x3f
   17f64:	bgt	17f70 <__assert_fail@plt+0x685c>
   17f68:	sdiv	r7, r4, r0
   17f6c:	mul	r6, r7, r0
   17f70:	cmp	r5, #0
   17f74:	moveq	r4, #0
   17f78:	streq	r4, [r8]
   17f7c:	sub	r4, r7, r1
   17f80:	cmp	r4, r2
   17f84:	bge	18030 <__assert_fail@plt+0x691c>
   17f88:	add	r7, r1, r2
   17f8c:	mov	r6, #0
   17f90:	mov	r2, #0
   17f94:	cmp	r7, r3
   17f98:	movwgt	r6, #1
   17f9c:	cmn	r3, #1
   17fa0:	movwgt	r2, #1
   17fa4:	cmp	r7, r1
   17fa8:	bvs	18064 <__assert_fail@plt+0x6950>
   17fac:	ands	r1, r2, r6
   17fb0:	bne	18064 <__assert_fail@plt+0x6950>
   17fb4:	cmn	r0, #1
   17fb8:	ble	17fe0 <__assert_fail@plt+0x68cc>
   17fbc:	cmp	r0, #0
   17fc0:	beq	1802c <__assert_fail@plt+0x6918>
   17fc4:	cmn	r7, #1
   17fc8:	ble	18004 <__assert_fail@plt+0x68f0>
   17fcc:	mvn	r1, #-2147483648	; 0x80000000
   17fd0:	udiv	r1, r1, r0
   17fd4:	cmp	r1, r7
   17fd8:	bge	1802c <__assert_fail@plt+0x6918>
   17fdc:	b	18064 <__assert_fail@plt+0x6950>
   17fe0:	cmn	r7, #1
   17fe4:	ble	1801c <__assert_fail@plt+0x6908>
   17fe8:	cmn	r0, #1
   17fec:	beq	1802c <__assert_fail@plt+0x6918>
   17ff0:	mov	r1, #-2147483648	; 0x80000000
   17ff4:	sdiv	r1, r1, r0
   17ff8:	cmp	r1, r7
   17ffc:	bge	1802c <__assert_fail@plt+0x6918>
   18000:	b	18064 <__assert_fail@plt+0x6950>
   18004:	beq	1802c <__assert_fail@plt+0x6918>
   18008:	mov	r1, #-2147483648	; 0x80000000
   1800c:	sdiv	r1, r1, r7
   18010:	cmp	r1, r0
   18014:	bge	1802c <__assert_fail@plt+0x6918>
   18018:	b	18064 <__assert_fail@plt+0x6950>
   1801c:	mvn	r1, #-2147483648	; 0x80000000
   18020:	sdiv	r1, r1, r0
   18024:	cmp	r7, r1
   18028:	blt	18064 <__assert_fail@plt+0x6950>
   1802c:	mul	r6, r7, r0
   18030:	mov	r0, r5
   18034:	mov	r1, r6
   18038:	bl	19010 <__assert_fail@plt+0x78fc>
   1803c:	cmp	r6, #0
   18040:	movwne	r6, #1
   18044:	cmp	r0, #0
   18048:	bne	1805c <__assert_fail@plt+0x6948>
   1804c:	clz	r1, r5
   18050:	lsr	r1, r1, #5
   18054:	orrs	r1, r1, r6
   18058:	bne	18064 <__assert_fail@plt+0x6950>
   1805c:	str	r7, [r8]
   18060:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18064:	bl	181ac <__assert_fail@plt+0x6a98>
   18068:	push	{fp, lr}
   1806c:	mov	fp, sp
   18070:	mov	r1, #1
   18074:	bl	18f8c <__assert_fail@plt+0x7878>
   18078:	cmp	r0, #0
   1807c:	popne	{fp, pc}
   18080:	bl	181ac <__assert_fail@plt+0x6a98>
   18084:	push	{fp, lr}
   18088:	mov	fp, sp
   1808c:	bl	18f8c <__assert_fail@plt+0x7878>
   18090:	cmp	r0, #0
   18094:	popne	{fp, pc}
   18098:	bl	181ac <__assert_fail@plt+0x6a98>
   1809c:	push	{fp, lr}
   180a0:	mov	fp, sp
   180a4:	mov	r1, #1
   180a8:	bl	18f8c <__assert_fail@plt+0x7878>
   180ac:	cmp	r0, #0
   180b0:	popne	{fp, pc}
   180b4:	bl	181ac <__assert_fail@plt+0x6a98>
   180b8:	push	{fp, lr}
   180bc:	mov	fp, sp
   180c0:	bl	18f8c <__assert_fail@plt+0x7878>
   180c4:	cmp	r0, #0
   180c8:	popne	{fp, pc}
   180cc:	bl	181ac <__assert_fail@plt+0x6a98>
   180d0:	push	{r4, r5, fp, lr}
   180d4:	add	fp, sp, #8
   180d8:	mov	r5, r0
   180dc:	mov	r0, r1
   180e0:	mov	r4, r1
   180e4:	bl	18fe0 <__assert_fail@plt+0x78cc>
   180e8:	cmp	r0, #0
   180ec:	beq	18100 <__assert_fail@plt+0x69ec>
   180f0:	mov	r1, r5
   180f4:	mov	r2, r4
   180f8:	pop	{r4, r5, fp, lr}
   180fc:	b	11408 <memcpy@plt>
   18100:	bl	181ac <__assert_fail@plt+0x6a98>
   18104:	push	{r4, r5, fp, lr}
   18108:	add	fp, sp, #8
   1810c:	mov	r5, r0
   18110:	mov	r0, r1
   18114:	mov	r4, r1
   18118:	bl	18fe0 <__assert_fail@plt+0x78cc>
   1811c:	cmp	r0, #0
   18120:	beq	18134 <__assert_fail@plt+0x6a20>
   18124:	mov	r1, r5
   18128:	mov	r2, r4
   1812c:	pop	{r4, r5, fp, lr}
   18130:	b	11408 <memcpy@plt>
   18134:	bl	181ac <__assert_fail@plt+0x6a98>
   18138:	push	{r4, r5, fp, lr}
   1813c:	add	fp, sp, #8
   18140:	mov	r5, r0
   18144:	add	r0, r1, #1
   18148:	mov	r4, r1
   1814c:	bl	18fe0 <__assert_fail@plt+0x78cc>
   18150:	cmp	r0, #0
   18154:	beq	18170 <__assert_fail@plt+0x6a5c>
   18158:	mov	r1, #0
   1815c:	mov	r2, r4
   18160:	strb	r1, [r0, r4]
   18164:	mov	r1, r5
   18168:	pop	{r4, r5, fp, lr}
   1816c:	b	11408 <memcpy@plt>
   18170:	bl	181ac <__assert_fail@plt+0x6a98>
   18174:	push	{r4, r5, fp, lr}
   18178:	add	fp, sp, #8
   1817c:	mov	r4, r0
   18180:	bl	11588 <strlen@plt>
   18184:	add	r5, r0, #1
   18188:	mov	r0, r5
   1818c:	bl	18fe0 <__assert_fail@plt+0x78cc>
   18190:	cmp	r0, #0
   18194:	beq	181a8 <__assert_fail@plt+0x6a94>
   18198:	mov	r1, r4
   1819c:	mov	r2, r5
   181a0:	pop	{r4, r5, fp, lr}
   181a4:	b	11408 <memcpy@plt>
   181a8:	bl	181ac <__assert_fail@plt+0x6a98>
   181ac:	push	{fp, lr}
   181b0:	mov	fp, sp
   181b4:	movw	r0, #45408	; 0xb160
   181b8:	movw	r1, #44256	; 0xace0
   181bc:	mov	r2, #5
   181c0:	movt	r0, #2
   181c4:	movt	r1, #1
   181c8:	ldr	r4, [r0]
   181cc:	mov	r0, #0
   181d0:	bl	11444 <dcgettext@plt>
   181d4:	movw	r2, #42810	; 0xa73a
   181d8:	mov	r3, r0
   181dc:	mov	r0, r4
   181e0:	mov	r1, #0
   181e4:	movt	r2, #1
   181e8:	bl	114f8 <error@plt>
   181ec:	bl	116f0 <abort@plt>
   181f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   181f4:	add	fp, sp, #24
   181f8:	sub	sp, sp, #16
   181fc:	mov	r8, r0
   18200:	ldr	r0, [fp, #16]
   18204:	mov	r5, r3
   18208:	mov	r6, r2
   1820c:	mov	r2, r1
   18210:	add	r3, sp, #8
   18214:	mov	r1, #0
   18218:	str	r0, [sp]
   1821c:	mov	r0, r8
   18220:	bl	182ec <__assert_fail@plt+0x6bd8>
   18224:	cmp	r0, #0
   18228:	bne	182b4 <__assert_fail@plt+0x6ba0>
   1822c:	ldr	r4, [sp, #8]
   18230:	ldr	r7, [sp, #12]
   18234:	subs	r0, r4, r6
   18238:	sbcs	r0, r7, r5
   1823c:	bcc	18260 <__assert_fail@plt+0x6b4c>
   18240:	ldr	r1, [fp, #8]
   18244:	ldr	r0, [fp, #12]
   18248:	subs	r1, r1, r4
   1824c:	sbcs	r0, r0, r7
   18250:	movcs	r0, r4
   18254:	movcs	r1, r7
   18258:	subcs	sp, fp, #24
   1825c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   18260:	bl	115d0 <__errno_location@plt>
   18264:	subs	r1, r4, #1073741824	; 0x40000000
   18268:	sbcs	r1, r7, #0
   1826c:	movcc	r1, #34	; 0x22
   18270:	movcs	r1, #75	; 0x4b
   18274:	str	r1, [r0]
   18278:	ldr	r6, [r0]
   1827c:	ldr	r4, [fp, #24]
   18280:	ldr	r5, [fp, #20]
   18284:	mov	r0, r8
   18288:	bl	170d4 <__assert_fail@plt+0x59c0>
   1828c:	subs	r1, r6, #22
   18290:	movw	r2, #41029	; 0xa045
   18294:	str	r0, [sp]
   18298:	mov	r3, r5
   1829c:	movne	r1, r6
   182a0:	cmp	r4, #0
   182a4:	movt	r2, #1
   182a8:	movweq	r4, #1
   182ac:	mov	r0, r4
   182b0:	bl	114f8 <error@plt>
   182b4:	cmp	r0, #1
   182b8:	beq	182d0 <__assert_fail@plt+0x6bbc>
   182bc:	cmp	r0, #3
   182c0:	bne	182dc <__assert_fail@plt+0x6bc8>
   182c4:	bl	115d0 <__errno_location@plt>
   182c8:	mov	r1, #0
   182cc:	b	18274 <__assert_fail@plt+0x6b60>
   182d0:	bl	115d0 <__errno_location@plt>
   182d4:	mov	r1, #75	; 0x4b
   182d8:	b	18274 <__assert_fail@plt+0x6b60>
   182dc:	bl	115d0 <__errno_location@plt>
   182e0:	b	18278 <__assert_fail@plt+0x6b64>
   182e4:	mov	r1, #10
   182e8:	b	181f0 <__assert_fail@plt+0x6adc>
   182ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182f0:	add	fp, sp, #28
   182f4:	sub	sp, sp, #44	; 0x2c
   182f8:	cmp	r2, #37	; 0x25
   182fc:	bcs	18f6c <__assert_fail@plt+0x7858>
   18300:	ldr	sl, [fp, #8]
   18304:	mov	r6, r2
   18308:	mov	r7, r1
   1830c:	mov	r4, r0
   18310:	str	r3, [sp, #36]	; 0x24
   18314:	bl	115d0 <__errno_location@plt>
   18318:	mov	r5, r0
   1831c:	mov	r0, #0
   18320:	str	r0, [r5]
   18324:	bl	11564 <__ctype_b_loc@plt>
   18328:	ldr	r1, [r0]
   1832c:	mov	r2, r4
   18330:	ldrb	r0, [r2], #1
   18334:	add	r3, r1, r0, lsl #1
   18338:	ldrb	r3, [r3, #1]
   1833c:	tst	r3, #32
   18340:	bne	18330 <__assert_fail@plt+0x6c1c>
   18344:	cmp	r7, #0
   18348:	sub	r9, fp, #32
   1834c:	mov	r8, #4
   18350:	movne	r9, r7
   18354:	cmp	r0, #45	; 0x2d
   18358:	beq	18f60 <__assert_fail@plt+0x784c>
   1835c:	mov	r0, r4
   18360:	mov	r1, r9
   18364:	mov	r2, r6
   18368:	mov	r3, #0
   1836c:	bl	11414 <__strtoull_internal@plt>
   18370:	mov	r7, r1
   18374:	ldr	r1, [r9]
   18378:	cmp	r1, r4
   1837c:	beq	183a8 <__assert_fail@plt+0x6c94>
   18380:	mov	r6, r0
   18384:	ldr	r0, [r5]
   18388:	cmp	r0, #0
   1838c:	beq	183e4 <__assert_fail@plt+0x6cd0>
   18390:	cmp	r0, #34	; 0x22
   18394:	bne	18f60 <__assert_fail@plt+0x784c>
   18398:	mov	r8, #1
   1839c:	cmp	sl, #0
   183a0:	bne	183f0 <__assert_fail@plt+0x6cdc>
   183a4:	b	18f58 <__assert_fail@plt+0x7844>
   183a8:	cmp	sl, #0
   183ac:	beq	18f60 <__assert_fail@plt+0x784c>
   183b0:	mov	r5, r1
   183b4:	ldrb	r1, [r4]
   183b8:	cmp	r1, #0
   183bc:	beq	18f60 <__assert_fail@plt+0x784c>
   183c0:	mov	r0, sl
   183c4:	bl	115a0 <strchr@plt>
   183c8:	cmp	r0, #0
   183cc:	beq	18f60 <__assert_fail@plt+0x784c>
   183d0:	mov	r1, r5
   183d4:	mov	r8, #0
   183d8:	mov	r6, #1
   183dc:	mov	r7, #0
   183e0:	b	183f0 <__assert_fail@plt+0x6cdc>
   183e4:	mov	r8, r0
   183e8:	cmp	sl, #0
   183ec:	beq	18f58 <__assert_fail@plt+0x7844>
   183f0:	ldrb	r4, [r1]
   183f4:	cmp	r4, #0
   183f8:	beq	18f58 <__assert_fail@plt+0x7844>
   183fc:	str	r1, [sp, #32]
   18400:	mov	r0, sl
   18404:	mov	r1, r4
   18408:	bl	115a0 <strchr@plt>
   1840c:	cmp	r0, #0
   18410:	beq	186d8 <__assert_fail@plt+0x6fc4>
   18414:	sub	r0, r4, #69	; 0x45
   18418:	mov	r1, #1
   1841c:	mov	r3, #0
   18420:	mov	r5, #1024	; 0x400
   18424:	cmp	r0, #47	; 0x2f
   18428:	str	r1, [sp, #28]
   1842c:	bhi	18530 <__assert_fail@plt+0x6e1c>
   18430:	add	r1, pc, #0
   18434:	ldr	pc, [r1, r0, lsl #2]
   18438:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1843c:	andeq	r8, r1, r0, lsr r5
   18440:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18444:	andeq	r8, r1, r0, lsr r5
   18448:	andeq	r8, r1, r0, lsr r5
   1844c:	andeq	r8, r1, r0, lsr r5
   18450:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18454:	andeq	r8, r1, r0, lsr r5
   18458:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1845c:	andeq	r8, r1, r0, lsr r5
   18460:	andeq	r8, r1, r0, lsr r5
   18464:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18468:	andeq	r8, r1, r0, lsr r5
   1846c:	andeq	r8, r1, r0, lsr r5
   18470:	andeq	r8, r1, r0, lsr r5
   18474:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18478:	andeq	r8, r1, r0, lsr r5
   1847c:	andeq	r8, r1, r0, lsr r5
   18480:	andeq	r8, r1, r0, lsr r5
   18484:	andeq	r8, r1, r0, lsr r5
   18488:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1848c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18490:	andeq	r8, r1, r0, lsr r5
   18494:	andeq	r8, r1, r0, lsr r5
   18498:	andeq	r8, r1, r0, lsr r5
   1849c:	andeq	r8, r1, r0, lsr r5
   184a0:	andeq	r8, r1, r0, lsr r5
   184a4:	andeq	r8, r1, r0, lsr r5
   184a8:	andeq	r8, r1, r0, lsr r5
   184ac:	andeq	r8, r1, r0, lsr r5
   184b0:	andeq	r8, r1, r0, lsr r5
   184b4:	andeq	r8, r1, r0, lsr r5
   184b8:	andeq	r8, r1, r0, lsr r5
   184bc:	andeq	r8, r1, r0, lsr r5
   184c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184c4:	andeq	r8, r1, r0, lsr r5
   184c8:	andeq	r8, r1, r0, lsr r5
   184cc:	andeq	r8, r1, r0, lsr r5
   184d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184d4:	andeq	r8, r1, r0, lsr r5
   184d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184dc:	andeq	r8, r1, r0, lsr r5
   184e0:	andeq	r8, r1, r0, lsr r5
   184e4:	andeq	r8, r1, r0, lsr r5
   184e8:	andeq	r8, r1, r0, lsr r5
   184ec:	andeq	r8, r1, r0, lsr r5
   184f0:	andeq	r8, r1, r0, lsr r5
   184f4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   184f8:	mov	r0, sl
   184fc:	mov	r1, #48	; 0x30
   18500:	bl	115a0 <strchr@plt>
   18504:	cmp	r0, #0
   18508:	beq	1852c <__assert_fail@plt+0x6e18>
   1850c:	ldr	r1, [sp, #32]
   18510:	ldrb	r0, [r1, #1]
   18514:	cmp	r0, #66	; 0x42
   18518:	cmpne	r0, #68	; 0x44
   1851c:	bne	186e4 <__assert_fail@plt+0x6fd0>
   18520:	mov	r5, #1000	; 0x3e8
   18524:	mov	r0, #2
   18528:	str	r0, [sp, #28]
   1852c:	mov	r3, #0
   18530:	sub	r0, r4, #66	; 0x42
   18534:	cmp	r0, #53	; 0x35
   18538:	bhi	186d8 <__assert_fail@plt+0x6fc4>
   1853c:	add	r1, pc, #0
   18540:	ldr	pc, [r1, r0, lsl #2]
   18544:	andeq	r8, r1, r0, ror #20
   18548:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1854c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18550:	andeq	r8, r1, r8, lsl #21
   18554:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18558:	andeq	r8, r1, ip, lsl r6
   1855c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18560:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18564:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18568:	andeq	r8, r1, r8, lsl #14
   1856c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18570:	andeq	r8, r1, r0, asr r7
   18574:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18578:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1857c:	andeq	r8, r1, r0, ror #23
   18580:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18584:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18588:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1858c:	ldrdeq	r8, [r1], -ip
   18590:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18594:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18598:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1859c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185a0:	andeq	r8, r1, r8, lsl #26
   185a4:	andeq	r8, r1, r4, asr #17
   185a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185c4:	andeq	r8, r1, r0, ror #29
   185c8:	andeq	r8, r1, r8, lsr pc
   185cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185d8:	andeq	r8, r1, ip, lsl r6
   185dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185e8:	andeq	r8, r1, r8, lsl #14
   185ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185f0:	andeq	r8, r1, r0, asr r7
   185f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   185fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18600:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18604:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18608:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1860c:	ldrdeq	r8, [r1], -ip
   18610:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18614:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18618:	andeq	r8, r1, r4, lsl pc
   1861c:	mvn	r0, #0
   18620:	mvn	r1, #0
   18624:	mov	r2, r5
   18628:	mov	sl, r3
   1862c:	bl	194b8 <__assert_fail@plt+0x7da4>
   18630:	subs	r3, r0, r6
   18634:	umull	r4, r2, r6, r5
   18638:	mov	lr, #0
   1863c:	str	r1, [sp, #20]
   18640:	sbcs	r3, r1, r7
   18644:	movwcc	lr, #1
   18648:	mla	ip, r6, sl, r2
   1864c:	mov	r2, r1
   18650:	mov	r2, #0
   18654:	cmp	lr, #0
   18658:	mla	r7, r7, r5, ip
   1865c:	mvnne	r4, #0
   18660:	mvnne	r7, #0
   18664:	subs	r6, r0, r4
   18668:	sbcs	r6, r1, r7
   1866c:	umull	r3, r6, r4, r5
   18670:	movwcc	r2, #1
   18674:	cmp	r2, #0
   18678:	mvnne	r3, #0
   1867c:	cmp	r2, #0
   18680:	str	r6, [sp, #16]
   18684:	umull	r6, ip, r3, r5
   18688:	mla	r1, r3, sl, ip
   1868c:	ldr	ip, [sp, #16]
   18690:	str	r1, [sp, #12]
   18694:	mla	r4, r4, sl, ip
   18698:	mla	r4, r7, r5, r4
   1869c:	mvnne	r4, #0
   186a0:	subs	r0, r0, r3
   186a4:	ldr	r0, [sp, #20]
   186a8:	ldr	r7, [sp, #12]
   186ac:	sbcs	r0, r0, r4
   186b0:	mov	r0, #0
   186b4:	mla	r7, r4, r5, r7
   186b8:	movwcc	r0, #1
   186bc:	cmp	r0, #0
   186c0:	mov	r1, r0
   186c4:	orr	r0, lr, r2
   186c8:	mvnne	r7, #0
   186cc:	mvnne	r6, #0
   186d0:	orr	r3, r0, r1
   186d4:	b	18f38 <__assert_fail@plt+0x7824>
   186d8:	ldr	r0, [sp, #36]	; 0x24
   186dc:	orr	r8, r8, #2
   186e0:	b	18f5c <__assert_fail@plt+0x7848>
   186e4:	cmp	r0, #105	; 0x69
   186e8:	mov	r3, #0
   186ec:	bne	18530 <__assert_fail@plt+0x6e1c>
   186f0:	ldrb	r0, [r1, #2]
   186f4:	mov	r1, #1
   186f8:	cmp	r0, #66	; 0x42
   186fc:	movweq	r1, #3
   18700:	str	r1, [sp, #28]
   18704:	b	18530 <__assert_fail@plt+0x6e1c>
   18708:	mvn	r0, #0
   1870c:	mvn	r1, #0
   18710:	mov	r2, r5
   18714:	mov	r4, r3
   18718:	bl	194b8 <__assert_fail@plt+0x7da4>
   1871c:	subs	r0, r0, r6
   18720:	mov	r2, #0
   18724:	sbcs	r0, r1, r7
   18728:	umull	r0, r1, r6, r5
   1872c:	movwcc	r2, #1
   18730:	cmp	r2, #0
   18734:	mla	r1, r6, r4, r1
   18738:	mov	r3, r2
   1873c:	mvnne	r0, #0
   18740:	mla	r7, r7, r5, r1
   18744:	mvnne	r7, #0
   18748:	mov	r6, r0
   1874c:	b	18f38 <__assert_fail@plt+0x7824>
   18750:	mvn	r0, #0
   18754:	mvn	r1, #0
   18758:	mov	r2, r5
   1875c:	str	r3, [sp, #24]
   18760:	bl	194b8 <__assert_fail@plt+0x7da4>
   18764:	subs	r3, r0, r6
   18768:	mov	ip, r0
   1876c:	umull	r4, r0, r6, r5
   18770:	mov	sl, #0
   18774:	sbcs	r3, r1, r7
   18778:	mov	r3, #0
   1877c:	movwcc	r3, #1
   18780:	cmp	r3, #0
   18784:	str	r0, [sp, #20]
   18788:	ldr	r0, [sp, #24]
   1878c:	mvnne	r4, #0
   18790:	cmp	r3, #0
   18794:	umull	lr, r2, r4, r5
   18798:	mla	r2, r4, r0, r2
   1879c:	str	r2, [sp, #16]
   187a0:	ldr	r2, [sp, #20]
   187a4:	mla	r6, r6, r0, r2
   187a8:	ldr	r0, [sp, #16]
   187ac:	mla	r6, r7, r5, r6
   187b0:	mvnne	r6, #0
   187b4:	mla	r7, r6, r5, r0
   187b8:	subs	r0, ip, r4
   187bc:	sbcs	r0, r1, r6
   187c0:	movwcc	sl, #1
   187c4:	cmp	sl, #0
   187c8:	orr	r3, r3, sl
   187cc:	mvnne	lr, #0
   187d0:	mvnne	r7, #0
   187d4:	mov	r6, lr
   187d8:	b	18f38 <__assert_fail@plt+0x7824>
   187dc:	mvn	r0, #0
   187e0:	mvn	r1, #0
   187e4:	mov	r2, r5
   187e8:	mov	sl, r3
   187ec:	bl	194b8 <__assert_fail@plt+0x7da4>
   187f0:	subs	r3, r0, r6
   187f4:	mov	ip, r1
   187f8:	umull	r2, lr, r6, r5
   187fc:	str	r0, [sp, #20]
   18800:	sbcs	r3, r1, r7
   18804:	mov	r1, #0
   18808:	str	ip, [sp, #16]
   1880c:	movwcc	r1, #1
   18810:	mla	r6, r6, sl, lr
   18814:	mov	lr, #0
   18818:	cmp	r1, #0
   1881c:	mla	r7, r7, r5, r6
   18820:	mvnne	r2, #0
   18824:	cmp	r1, #0
   18828:	umull	r3, r4, r2, r5
   1882c:	mvnne	r7, #0
   18830:	mla	r4, r2, sl, r4
   18834:	subs	r2, r0, r2
   18838:	sbcs	r2, ip, r7
   1883c:	mla	r4, r7, r5, r4
   18840:	mov	r2, #0
   18844:	movwcc	lr, #1
   18848:	cmp	lr, #0
   1884c:	mvnne	r3, #0
   18850:	mvnne	r4, #0
   18854:	subs	r7, r0, r3
   18858:	mov	r0, r5
   1885c:	sbcs	r7, ip, r4
   18860:	umull	r5, r7, r3, r5
   18864:	movwcc	r2, #1
   18868:	cmp	r2, #0
   1886c:	mla	r3, r3, sl, r7
   18870:	mvnne	r5, #0
   18874:	cmp	r2, #0
   18878:	mla	r3, r4, r0, r3
   1887c:	umull	r6, ip, r5, r0
   18880:	mvnne	r3, #0
   18884:	mla	ip, r5, sl, ip
   18888:	mla	r7, r3, r0, ip
   1888c:	ldr	r0, [sp, #20]
   18890:	subs	r0, r0, r5
   18894:	ldr	r0, [sp, #16]
   18898:	sbcs	r0, r0, r3
   1889c:	mov	r0, #0
   188a0:	movwcc	r0, #1
   188a4:	cmp	r0, #0
   188a8:	mov	r3, r0
   188ac:	orr	r0, r1, lr
   188b0:	orr	r0, r0, r2
   188b4:	mvnne	r7, #0
   188b8:	mvnne	r6, #0
   188bc:	orr	r3, r0, r3
   188c0:	b	18f38 <__assert_fail@plt+0x7824>
   188c4:	mvn	r0, #0
   188c8:	mvn	r1, #0
   188cc:	mov	r2, r5
   188d0:	mov	r4, r3
   188d4:	str	r3, [sp, #24]
   188d8:	bl	194b8 <__assert_fail@plt+0x7da4>
   188dc:	umull	r3, r2, r6, r5
   188e0:	mla	r2, r6, r4, r2
   188e4:	subs	r6, r0, r6
   188e8:	sbcs	r6, r1, r7
   188ec:	mov	r6, #0
   188f0:	mla	ip, r7, r5, r2
   188f4:	ldr	r2, [sp, #24]
   188f8:	movwcc	r6, #1
   188fc:	cmp	r6, #0
   18900:	str	r6, [sp, #20]
   18904:	mov	r6, #0
   18908:	mvnne	r3, #0
   1890c:	mvnne	ip, #0
   18910:	subs	r4, r0, r3
   18914:	umull	r7, lr, r3, r5
   18918:	sbcs	r4, r1, ip
   1891c:	movwcc	r6, #1
   18920:	mla	r3, r3, r2, lr
   18924:	cmp	r6, #0
   18928:	str	r6, [sp, #16]
   1892c:	mvnne	r7, #0
   18930:	cmp	r6, #0
   18934:	umull	sl, r4, r7, r5
   18938:	mla	r4, r7, r2, r4
   1893c:	mla	r2, ip, r5, r3
   18940:	mvnne	r2, #0
   18944:	subs	r3, r0, r7
   18948:	mov	ip, #0
   1894c:	mla	r6, r2, r5, r4
   18950:	sbcs	r2, r1, r2
   18954:	mov	r4, r0
   18958:	mov	r0, #0
   1895c:	movwcc	r0, #1
   18960:	mov	r3, r4
   18964:	cmp	r0, #0
   18968:	str	r0, [sp, #12]
   1896c:	mov	r0, r1
   18970:	str	r3, [sp, #4]
   18974:	mvnne	sl, #0
   18978:	mvnne	r6, #0
   1897c:	str	r0, [sp, #8]
   18980:	subs	r2, r4, sl
   18984:	ldr	r4, [sp, #24]
   18988:	sbcs	r2, r1, r6
   1898c:	umull	r7, r2, sl, r5
   18990:	movwcc	ip, #1
   18994:	cmp	ip, #0
   18998:	mvnne	r7, #0
   1899c:	mla	r2, sl, r4, r2
   189a0:	cmp	ip, #0
   189a4:	mov	sl, #0
   189a8:	umull	r1, lr, r7, r5
   189ac:	mla	r2, r6, r5, r2
   189b0:	mvnne	r2, #0
   189b4:	subs	r6, r3, r7
   189b8:	mla	lr, r7, r4, lr
   189bc:	mla	lr, r2, r5, lr
   189c0:	sbcs	r2, r0, r2
   189c4:	mov	r2, #0
   189c8:	movwcc	sl, #1
   189cc:	cmp	sl, #0
   189d0:	mvnne	r1, #0
   189d4:	mvnne	lr, #0
   189d8:	subs	r6, r3, r1
   189dc:	ldr	r3, [sp, #24]
   189e0:	sbcs	r6, r0, lr
   189e4:	umull	r0, r7, r1, r5
   189e8:	movwcc	r2, #1
   189ec:	cmp	r2, #0
   189f0:	mvnne	r0, #0
   189f4:	mla	r1, r1, r3, r7
   189f8:	cmp	r2, #0
   189fc:	umull	r6, r4, r0, r5
   18a00:	mla	r1, lr, r5, r1
   18a04:	mvnne	r1, #0
   18a08:	mla	r4, r0, r3, r4
   18a0c:	ldr	r3, [sp, #4]
   18a10:	mla	r7, r1, r5, r4
   18a14:	ldr	r5, [sp, #16]
   18a18:	subs	r0, r3, r0
   18a1c:	ldr	r0, [sp, #8]
   18a20:	sbcs	r0, r0, r1
   18a24:	mov	r0, #0
   18a28:	movwcc	r0, #1
   18a2c:	cmp	r0, #0
   18a30:	mov	r1, r0
   18a34:	ldr	r0, [sp, #20]
   18a38:	mvnne	r7, #0
   18a3c:	mvnne	r6, #0
   18a40:	orr	r0, r0, r5
   18a44:	ldr	r5, [sp, #12]
   18a48:	orr	r0, r0, r5
   18a4c:	orr	r0, r0, ip
   18a50:	orr	r0, r0, sl
   18a54:	orr	r0, r0, r2
   18a58:	orr	r0, r0, r1
   18a5c:	b	18ed8 <__assert_fail@plt+0x77c4>
   18a60:	mov	r1, #0
   18a64:	lsl	r2, r7, #10
   18a68:	lsl	r0, r6, #10
   18a6c:	lsr	r3, r7, #22
   18a70:	cmp	r1, r7, lsr #22
   18a74:	orr	r2, r2, r6, lsr #22
   18a78:	mvnne	r0, #0
   18a7c:	movwne	r3, #1
   18a80:	cmp	r1, r7, lsr #22
   18a84:	b	18f04 <__assert_fail@plt+0x77f0>
   18a88:	mvn	r0, #0
   18a8c:	mvn	r1, #0
   18a90:	mov	r2, r5
   18a94:	mov	sl, r3
   18a98:	bl	194b8 <__assert_fail@plt+0x7da4>
   18a9c:	subs	r2, r0, r6
   18aa0:	mov	ip, r0
   18aa4:	mov	r0, #0
   18aa8:	sbcs	r2, r1, r7
   18aac:	umull	r4, r2, r6, r5
   18ab0:	movwcc	r0, #1
   18ab4:	cmp	r0, #0
   18ab8:	mla	r2, r6, sl, r2
   18abc:	str	r0, [sp, #20]
   18ac0:	mvnne	r4, #0
   18ac4:	cmp	r0, #0
   18ac8:	mla	r2, r7, r5, r2
   18acc:	mov	r0, #0
   18ad0:	umull	lr, r3, r4, r5
   18ad4:	mvnne	r2, #0
   18ad8:	mla	r3, r4, sl, r3
   18adc:	mla	r6, r2, r5, r3
   18ae0:	subs	r3, ip, r4
   18ae4:	mov	r3, r1
   18ae8:	sbcs	r2, r1, r2
   18aec:	str	r3, [sp, #8]
   18af0:	movwcc	r0, #1
   18af4:	cmp	r0, #0
   18af8:	str	r0, [sp, #16]
   18afc:	mov	r0, ip
   18b00:	mvnne	lr, #0
   18b04:	mvnne	r6, #0
   18b08:	str	r0, [sp, #12]
   18b0c:	subs	r2, ip, lr
   18b10:	umull	r7, r4, lr, r5
   18b14:	sbcs	r2, r1, r6
   18b18:	mov	r2, #0
   18b1c:	movwcc	r2, #1
   18b20:	mla	r4, lr, sl, r4
   18b24:	cmp	r2, #0
   18b28:	mla	r6, r6, r5, r4
   18b2c:	mov	r4, #0
   18b30:	mvnne	r7, #0
   18b34:	cmp	r2, #0
   18b38:	umull	r1, ip, r7, r5
   18b3c:	mvnne	r6, #0
   18b40:	mla	ip, r7, sl, ip
   18b44:	subs	r7, r0, r7
   18b48:	sbcs	r7, r3, r6
   18b4c:	mla	lr, r6, r5, ip
   18b50:	mov	ip, #0
   18b54:	movwcc	ip, #1
   18b58:	cmp	ip, #0
   18b5c:	mvnne	r1, #0
   18b60:	mvnne	lr, #0
   18b64:	subs	r7, r0, r1
   18b68:	sbcs	r7, r3, lr
   18b6c:	umull	r0, r7, r1, r5
   18b70:	movwcc	r4, #1
   18b74:	cmp	r4, #0
   18b78:	mla	r1, r1, sl, r7
   18b7c:	mvnne	r0, #0
   18b80:	cmp	r4, #0
   18b84:	mla	r1, lr, r5, r1
   18b88:	umull	r6, r3, r0, r5
   18b8c:	mvnne	r1, #0
   18b90:	mla	r3, r0, sl, r3
   18b94:	mla	r7, r1, r5, r3
   18b98:	ldr	r3, [sp, #12]
   18b9c:	subs	r0, r3, r0
   18ba0:	ldr	r0, [sp, #8]
   18ba4:	ldr	r3, [sp, #16]
   18ba8:	sbcs	r0, r0, r1
   18bac:	mov	r0, #0
   18bb0:	movwcc	r0, #1
   18bb4:	cmp	r0, #0
   18bb8:	mov	r1, r0
   18bbc:	ldr	r0, [sp, #20]
   18bc0:	mvnne	r7, #0
   18bc4:	mvnne	r6, #0
   18bc8:	orr	r0, r0, r3
   18bcc:	orr	r0, r0, r2
   18bd0:	orr	r0, r0, ip
   18bd4:	orr	r0, r0, r4
   18bd8:	orr	r3, r0, r1
   18bdc:	b	18f38 <__assert_fail@plt+0x7824>
   18be0:	mvn	r0, #0
   18be4:	mvn	r1, #0
   18be8:	mov	r2, r5
   18bec:	mov	sl, r3
   18bf0:	bl	194b8 <__assert_fail@plt+0x7da4>
   18bf4:	umull	r3, r2, r6, r5
   18bf8:	mov	lr, r1
   18bfc:	mov	r1, r0
   18c00:	mla	r2, r6, sl, r2
   18c04:	subs	r6, r0, r6
   18c08:	mov	r0, #0
   18c0c:	sbcs	r6, lr, r7
   18c10:	mla	r2, r7, r5, r2
   18c14:	movwcc	r0, #1
   18c18:	cmp	r0, #0
   18c1c:	str	r0, [sp, #20]
   18c20:	mov	r0, r1
   18c24:	mvnne	r3, #0
   18c28:	mvnne	r2, #0
   18c2c:	str	r0, [sp, #16]
   18c30:	subs	r4, r1, r3
   18c34:	umull	r7, ip, r3, r5
   18c38:	sbcs	r4, lr, r2
   18c3c:	mov	r4, #0
   18c40:	movwcc	r4, #1
   18c44:	mla	r3, r3, sl, ip
   18c48:	mov	ip, #0
   18c4c:	cmp	r4, #0
   18c50:	mla	r2, r2, r5, r3
   18c54:	mvnne	r7, #0
   18c58:	cmp	r4, #0
   18c5c:	umull	r1, r6, r7, r5
   18c60:	mvnne	r2, #0
   18c64:	mla	r6, r7, sl, r6
   18c68:	mla	r3, r2, r5, r6
   18c6c:	subs	r6, r0, r7
   18c70:	sbcs	r2, lr, r2
   18c74:	mov	r2, #0
   18c78:	movwcc	ip, #1
   18c7c:	cmp	ip, #0
   18c80:	mvnne	r1, #0
   18c84:	mvnne	r3, #0
   18c88:	subs	r6, r0, r1
   18c8c:	sbcs	r6, lr, r3
   18c90:	umull	r0, r6, r1, r5
   18c94:	movwcc	r2, #1
   18c98:	cmp	r2, #0
   18c9c:	mvnne	r0, #0
   18ca0:	cmp	r2, #0
   18ca4:	str	r6, [sp, #12]
   18ca8:	umull	r6, r7, r0, r5
   18cac:	mla	r7, r0, sl, r7
   18cb0:	str	r7, [sp, #8]
   18cb4:	ldr	r7, [sp, #12]
   18cb8:	mla	r1, r1, sl, r7
   18cbc:	mla	r1, r3, r5, r1
   18cc0:	ldr	r3, [sp, #8]
   18cc4:	mvnne	r1, #0
   18cc8:	mla	r7, r1, r5, r3
   18ccc:	ldr	r3, [sp, #16]
   18cd0:	subs	r0, r3, r0
   18cd4:	sbcs	r0, lr, r1
   18cd8:	mov	r0, #0
   18cdc:	movwcc	r0, #1
   18ce0:	cmp	r0, #0
   18ce4:	mov	r1, r0
   18ce8:	ldr	r0, [sp, #20]
   18cec:	mvnne	r7, #0
   18cf0:	mvnne	r6, #0
   18cf4:	orr	r0, r0, r4
   18cf8:	orr	r0, r0, ip
   18cfc:	orr	r0, r0, r2
   18d00:	orr	r3, r0, r1
   18d04:	b	18f38 <__assert_fail@plt+0x7824>
   18d08:	mvn	r0, #0
   18d0c:	mvn	r1, #0
   18d10:	mov	r2, r5
   18d14:	mov	sl, r3
   18d18:	bl	194b8 <__assert_fail@plt+0x7da4>
   18d1c:	mov	lr, r0
   18d20:	subs	r0, r0, r6
   18d24:	mov	r2, #0
   18d28:	mov	ip, r1
   18d2c:	str	sl, [sp, #24]
   18d30:	sbcs	r0, r1, r7
   18d34:	umull	r3, r1, r6, r5
   18d38:	str	lr, [sp, #4]
   18d3c:	movwcc	r2, #1
   18d40:	cmp	r2, #0
   18d44:	mla	r6, r6, sl, r1
   18d48:	mov	r1, #0
   18d4c:	str	r2, [sp, #20]
   18d50:	mvnne	r3, #0
   18d54:	cmp	r2, #0
   18d58:	mla	r7, r7, r5, r6
   18d5c:	mov	r2, #0
   18d60:	umull	r0, r4, r3, r5
   18d64:	mvnne	r7, #0
   18d68:	mla	r4, r3, sl, r4
   18d6c:	subs	r3, lr, r3
   18d70:	sbcs	r3, ip, r7
   18d74:	mla	r4, r7, r5, r4
   18d78:	movwcc	r1, #1
   18d7c:	cmp	r1, #0
   18d80:	str	r1, [sp, #16]
   18d84:	mvnne	r0, #0
   18d88:	mvnne	r4, #0
   18d8c:	subs	r3, lr, r0
   18d90:	sbcs	r3, ip, r4
   18d94:	umull	r6, r3, r0, r5
   18d98:	movwcc	r2, #1
   18d9c:	cmp	r2, #0
   18da0:	mla	r0, r0, sl, r3
   18da4:	str	r2, [sp, #12]
   18da8:	mvnne	r6, #0
   18dac:	cmp	r2, #0
   18db0:	mla	r0, r4, r5, r0
   18db4:	ldr	r4, [sp, #24]
   18db8:	umull	r1, r7, r6, r5
   18dbc:	mvnne	r0, #0
   18dc0:	subs	r3, lr, r6
   18dc4:	mov	r3, ip
   18dc8:	str	r3, [sp]
   18dcc:	mla	r7, r6, sl, r7
   18dd0:	mla	r7, r0, r5, r7
   18dd4:	sbcs	r0, ip, r0
   18dd8:	mov	r0, #0
   18ddc:	movwcc	r0, #1
   18de0:	cmp	r0, #0
   18de4:	str	r0, [sp, #8]
   18de8:	mvnne	r1, #0
   18dec:	mvnne	r7, #0
   18df0:	subs	r0, lr, r1
   18df4:	sbcs	r0, ip, r7
   18df8:	mov	ip, #0
   18dfc:	umull	r6, r0, r1, r5
   18e00:	movwcc	ip, #1
   18e04:	cmp	ip, #0
   18e08:	mla	r1, r1, r4, r0
   18e0c:	mov	r0, lr
   18e10:	mvnne	r6, #0
   18e14:	cmp	ip, #0
   18e18:	mla	r1, r7, r5, r1
   18e1c:	umull	r2, sl, r6, r5
   18e20:	mvnne	r1, #0
   18e24:	mla	sl, r6, r4, sl
   18e28:	subs	r6, lr, r6
   18e2c:	mov	lr, #0
   18e30:	mla	r7, r1, r5, sl
   18e34:	sbcs	r1, r3, r1
   18e38:	ldr	r1, [sp, #24]
   18e3c:	movwcc	lr, #1
   18e40:	cmp	lr, #0
   18e44:	mvnne	r2, #0
   18e48:	mvnne	r7, #0
   18e4c:	subs	r6, r0, r2
   18e50:	umull	r0, sl, r2, r5
   18e54:	sbcs	r6, r3, r7
   18e58:	mov	r3, #0
   18e5c:	movwcc	r3, #1
   18e60:	mla	r2, r2, r1, sl
   18e64:	cmp	r3, #0
   18e68:	mla	r2, r7, r5, r2
   18e6c:	mvnne	r0, #0
   18e70:	cmp	r3, #0
   18e74:	umull	r6, r4, r0, r5
   18e78:	mvnne	r2, #0
   18e7c:	mla	r4, r0, r1, r4
   18e80:	ldr	r1, [sp, #4]
   18e84:	mla	r7, r2, r5, r4
   18e88:	ldr	r5, [sp, #16]
   18e8c:	subs	r0, r1, r0
   18e90:	ldr	r0, [sp]
   18e94:	sbcs	r0, r0, r2
   18e98:	mov	r0, #0
   18e9c:	movwcc	r0, #1
   18ea0:	cmp	r0, #0
   18ea4:	mov	r2, r0
   18ea8:	ldr	r0, [sp, #20]
   18eac:	mvnne	r7, #0
   18eb0:	mvnne	r6, #0
   18eb4:	orr	r0, r0, r5
   18eb8:	ldr	r5, [sp, #12]
   18ebc:	orr	r0, r0, r5
   18ec0:	ldr	r5, [sp, #8]
   18ec4:	orr	r0, r0, r5
   18ec8:	orr	r0, r0, ip
   18ecc:	orr	r0, r0, lr
   18ed0:	orr	r0, r0, r3
   18ed4:	orr	r0, r0, r2
   18ed8:	and	r3, r0, #1
   18edc:	b	18f38 <__assert_fail@plt+0x7824>
   18ee0:	mov	r1, #0
   18ee4:	lsl	r2, r7, #9
   18ee8:	lsl	r0, r6, #9
   18eec:	lsr	r3, r7, #23
   18ef0:	cmp	r1, r7, lsr #23
   18ef4:	orr	r2, r2, r6, lsr #23
   18ef8:	mvnne	r0, #0
   18efc:	movwne	r3, #1
   18f00:	cmp	r1, r7, lsr #23
   18f04:	mvnne	r2, #0
   18f08:	mov	r6, r0
   18f0c:	mov	r7, r2
   18f10:	b	18f38 <__assert_fail@plt+0x7824>
   18f14:	lsl	r1, r7, #1
   18f18:	cmp	r7, #0
   18f1c:	lsl	r0, r6, #1
   18f20:	lsr	r3, r7, #31
   18f24:	orr	r1, r1, r6, lsr #31
   18f28:	mvnmi	r0, #0
   18f2c:	mvnmi	r1, #0
   18f30:	mov	r6, r0
   18f34:	mov	r7, r1
   18f38:	ldr	r1, [sp, #32]
   18f3c:	ldr	r2, [sp, #28]
   18f40:	orr	r8, r3, r8
   18f44:	add	r0, r1, r2
   18f48:	str	r0, [r9]
   18f4c:	ldrb	r0, [r1, r2]
   18f50:	cmp	r0, #0
   18f54:	orrne	r8, r8, #2
   18f58:	ldr	r0, [sp, #36]	; 0x24
   18f5c:	strd	r6, [r0]
   18f60:	mov	r0, r8
   18f64:	sub	sp, fp, #28
   18f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f6c:	movw	r0, #44273	; 0xacf1
   18f70:	movw	r1, #44311	; 0xad17
   18f74:	movw	r3, #44327	; 0xad27
   18f78:	mov	r2, #85	; 0x55
   18f7c:	movt	r0, #1
   18f80:	movt	r1, #1
   18f84:	movt	r3, #1
   18f88:	bl	11714 <__assert_fail@plt>
   18f8c:	clz	r2, r1
   18f90:	clz	r3, r0
   18f94:	lsr	r2, r2, #5
   18f98:	lsr	r3, r3, #5
   18f9c:	orrs	r2, r3, r2
   18fa0:	movwne	r1, #1
   18fa4:	movwne	r0, #1
   18fa8:	cmp	r1, #0
   18fac:	beq	18fdc <__assert_fail@plt+0x78c8>
   18fb0:	mvn	r2, #-2147483648	; 0x80000000
   18fb4:	udiv	r2, r2, r1
   18fb8:	cmp	r2, r0
   18fbc:	bcs	18fdc <__assert_fail@plt+0x78c8>
   18fc0:	push	{fp, lr}
   18fc4:	mov	fp, sp
   18fc8:	bl	115d0 <__errno_location@plt>
   18fcc:	mov	r1, #12
   18fd0:	str	r1, [r0]
   18fd4:	mov	r0, #0
   18fd8:	pop	{fp, pc}
   18fdc:	b	11384 <calloc@plt>
   18fe0:	cmp	r0, #0
   18fe4:	movweq	r0, #1
   18fe8:	cmn	r0, #1
   18fec:	ble	18ff4 <__assert_fail@plt+0x78e0>
   18ff0:	b	1151c <malloc@plt>
   18ff4:	push	{fp, lr}
   18ff8:	mov	fp, sp
   18ffc:	bl	115d0 <__errno_location@plt>
   19000:	mov	r1, #12
   19004:	str	r1, [r0]
   19008:	mov	r0, #0
   1900c:	pop	{fp, pc}
   19010:	push	{fp, lr}
   19014:	mov	fp, sp
   19018:	cmp	r0, #0
   1901c:	beq	19038 <__assert_fail@plt+0x7924>
   19020:	cmp	r1, #0
   19024:	beq	19044 <__assert_fail@plt+0x7930>
   19028:	cmn	r1, #1
   1902c:	ble	19050 <__assert_fail@plt+0x793c>
   19030:	pop	{fp, lr}
   19034:	b	1145c <realloc@plt>
   19038:	mov	r0, r1
   1903c:	pop	{fp, lr}
   19040:	b	18fe0 <__assert_fail@plt+0x78cc>
   19044:	bl	152dc <__assert_fail@plt+0x3bc8>
   19048:	mov	r0, #0
   1904c:	pop	{fp, pc}
   19050:	bl	115d0 <__errno_location@plt>
   19054:	mov	r1, #12
   19058:	str	r1, [r0]
   1905c:	mov	r0, #0
   19060:	pop	{fp, pc}
   19064:	push	{r4, r5, r6, sl, fp, lr}
   19068:	add	fp, sp, #16
   1906c:	mov	r4, r0
   19070:	bl	114e0 <__fpending@plt>
   19074:	ldr	r6, [r4]
   19078:	mov	r5, r0
   1907c:	mov	r0, r4
   19080:	bl	15140 <__assert_fail@plt+0x3a2c>
   19084:	tst	r6, #32
   19088:	bne	190c0 <__assert_fail@plt+0x79ac>
   1908c:	cmp	r0, #0
   19090:	mov	r4, r0
   19094:	mvnne	r4, #0
   19098:	cmp	r5, #0
   1909c:	bne	190cc <__assert_fail@plt+0x79b8>
   190a0:	cmp	r0, #0
   190a4:	beq	190cc <__assert_fail@plt+0x79b8>
   190a8:	bl	115d0 <__errno_location@plt>
   190ac:	ldr	r0, [r0]
   190b0:	subs	r4, r0, #9
   190b4:	mvnne	r4, #0
   190b8:	mov	r0, r4
   190bc:	pop	{r4, r5, r6, sl, fp, pc}
   190c0:	mvn	r4, #0
   190c4:	cmp	r0, #0
   190c8:	beq	190d4 <__assert_fail@plt+0x79c0>
   190cc:	mov	r0, r4
   190d0:	pop	{r4, r5, r6, sl, fp, pc}
   190d4:	bl	115d0 <__errno_location@plt>
   190d8:	mov	r1, #0
   190dc:	str	r1, [r0]
   190e0:	mov	r0, r4
   190e4:	pop	{r4, r5, r6, sl, fp, pc}
   190e8:	push	{fp, lr}
   190ec:	mov	fp, sp
   190f0:	mov	r0, #14
   190f4:	bl	116a8 <nl_langinfo@plt>
   190f8:	movw	r1, #39853	; 0x9bad
   190fc:	cmp	r0, #0
   19100:	movt	r1, #1
   19104:	movne	r1, r0
   19108:	movw	r0, #44406	; 0xad76
   1910c:	ldrb	r2, [r1]
   19110:	movt	r0, #1
   19114:	cmp	r2, #0
   19118:	movne	r0, r1
   1911c:	pop	{fp, pc}
   19120:	push	{r4, r5, r6, r7, fp, lr}
   19124:	add	fp, sp, #16
   19128:	sub	sp, sp, #8
   1912c:	cmp	r0, #0
   19130:	add	r5, sp, #4
   19134:	mov	r7, r2
   19138:	mov	r4, r1
   1913c:	movne	r5, r0
   19140:	mov	r0, r5
   19144:	bl	114ec <mbrtowc@plt>
   19148:	mov	r6, r0
   1914c:	cmp	r7, #0
   19150:	beq	19178 <__assert_fail@plt+0x7a64>
   19154:	cmn	r6, #2
   19158:	bcc	19178 <__assert_fail@plt+0x7a64>
   1915c:	mov	r0, #0
   19160:	bl	193ac <__assert_fail@plt+0x7c98>
   19164:	cmp	r0, #0
   19168:	bne	19178 <__assert_fail@plt+0x7a64>
   1916c:	ldrb	r0, [r4]
   19170:	mov	r6, #1
   19174:	str	r0, [r5]
   19178:	mov	r0, r6
   1917c:	sub	sp, fp, #16
   19180:	pop	{r4, r5, r6, r7, fp, pc}
   19184:	cmp	r2, #0
   19188:	beq	191b8 <__assert_fail@plt+0x7aa4>
   1918c:	mvn	r3, #0
   19190:	udiv	r3, r3, r2
   19194:	cmp	r3, r1
   19198:	bcs	191b8 <__assert_fail@plt+0x7aa4>
   1919c:	push	{fp, lr}
   191a0:	mov	fp, sp
   191a4:	bl	115d0 <__errno_location@plt>
   191a8:	mov	r1, #12
   191ac:	str	r1, [r0]
   191b0:	mov	r0, #0
   191b4:	pop	{fp, pc}
   191b8:	mul	r1, r2, r1
   191bc:	b	19010 <__assert_fail@plt+0x78fc>
   191c0:	mov	r1, #0
   191c4:	mov	r2, #3
   191c8:	b	191cc <__assert_fail@plt+0x7ab8>
   191cc:	sub	sp, sp, #8
   191d0:	push	{r4, r5, r6, r7, fp, lr}
   191d4:	add	fp, sp, #16
   191d8:	sub	sp, sp, #8
   191dc:	mov	r5, r0
   191e0:	add	r0, fp, #8
   191e4:	cmp	r1, #11
   191e8:	str	r2, [fp, #8]
   191ec:	str	r3, [fp, #12]
   191f0:	str	r0, [sp, #4]
   191f4:	bhi	19230 <__assert_fail@plt+0x7b1c>
   191f8:	mov	r0, #1
   191fc:	movw	r2, #1300	; 0x514
   19200:	tst	r2, r0, lsl r1
   19204:	bne	192f0 <__assert_fail@plt+0x7bdc>
   19208:	movw	r2, #2570	; 0xa0a
   1920c:	tst	r2, r0, lsl r1
   19210:	bne	19258 <__assert_fail@plt+0x7b44>
   19214:	cmp	r1, #0
   19218:	bne	19230 <__assert_fail@plt+0x7b1c>
   1921c:	ldr	r0, [sp, #4]
   19220:	add	r1, r0, #4
   19224:	str	r1, [sp, #4]
   19228:	mov	r1, #0
   1922c:	b	192fc <__assert_fail@plt+0x7be8>
   19230:	sub	r0, r1, #1024	; 0x400
   19234:	cmp	r0, #10
   19238:	bhi	192f0 <__assert_fail@plt+0x7bdc>
   1923c:	mov	r2, #1
   19240:	movw	r3, #645	; 0x285
   19244:	tst	r3, r2, lsl r0
   19248:	bne	192f0 <__assert_fail@plt+0x7bdc>
   1924c:	movw	r3, #1282	; 0x502
   19250:	tst	r3, r2, lsl r0
   19254:	beq	19264 <__assert_fail@plt+0x7b50>
   19258:	mov	r0, r5
   1925c:	bl	11660 <fcntl64@plt>
   19260:	b	19308 <__assert_fail@plt+0x7bf4>
   19264:	cmp	r0, #6
   19268:	bne	192f0 <__assert_fail@plt+0x7bdc>
   1926c:	ldr	r0, [sp, #4]
   19270:	movw	r7, #46696	; 0xb668
   19274:	movt	r7, #2
   19278:	add	r1, r0, #4
   1927c:	str	r1, [sp, #4]
   19280:	ldr	r6, [r0]
   19284:	ldr	r0, [r7]
   19288:	cmp	r0, #0
   1928c:	bmi	1932c <__assert_fail@plt+0x7c18>
   19290:	mov	r0, r5
   19294:	movw	r1, #1030	; 0x406
   19298:	mov	r2, r6
   1929c:	bl	11660 <fcntl64@plt>
   192a0:	mov	r4, r0
   192a4:	cmn	r0, #1
   192a8:	bgt	19320 <__assert_fail@plt+0x7c0c>
   192ac:	bl	115d0 <__errno_location@plt>
   192b0:	ldr	r0, [r0]
   192b4:	cmp	r0, #22
   192b8:	bne	19320 <__assert_fail@plt+0x7c0c>
   192bc:	mov	r0, r5
   192c0:	mov	r1, #0
   192c4:	mov	r2, r6
   192c8:	bl	11660 <fcntl64@plt>
   192cc:	mov	r4, r0
   192d0:	cmp	r0, #0
   192d4:	bmi	1930c <__assert_fail@plt+0x7bf8>
   192d8:	mvn	r0, #0
   192dc:	str	r0, [r7]
   192e0:	mov	r0, #1
   192e4:	cmp	r0, #0
   192e8:	bne	19358 <__assert_fail@plt+0x7c44>
   192ec:	b	1930c <__assert_fail@plt+0x7bf8>
   192f0:	ldr	r0, [sp, #4]
   192f4:	add	r2, r0, #4
   192f8:	str	r2, [sp, #4]
   192fc:	ldr	r2, [r0]
   19300:	mov	r0, r5
   19304:	bl	11660 <fcntl64@plt>
   19308:	mov	r4, r0
   1930c:	mov	r0, r4
   19310:	sub	sp, fp, #16
   19314:	pop	{r4, r5, r6, r7, fp, lr}
   19318:	add	sp, sp, #8
   1931c:	bx	lr
   19320:	mov	r0, #1
   19324:	str	r0, [r7]
   19328:	b	1930c <__assert_fail@plt+0x7bf8>
   1932c:	mov	r0, r5
   19330:	mov	r1, #0
   19334:	mov	r2, r6
   19338:	bl	11660 <fcntl64@plt>
   1933c:	mov	r4, r0
   19340:	ldr	r0, [r7]
   19344:	add	r0, r0, #1
   19348:	clz	r0, r0
   1934c:	lsr	r0, r0, #5
   19350:	cmp	r0, #0
   19354:	beq	1930c <__assert_fail@plt+0x7bf8>
   19358:	cmp	r4, #0
   1935c:	bmi	1930c <__assert_fail@plt+0x7bf8>
   19360:	mov	r0, r4
   19364:	mov	r1, #1
   19368:	bl	11660 <fcntl64@plt>
   1936c:	cmp	r0, #0
   19370:	bmi	1938c <__assert_fail@plt+0x7c78>
   19374:	orr	r2, r0, #1
   19378:	mov	r0, r4
   1937c:	mov	r1, #2
   19380:	bl	11660 <fcntl64@plt>
   19384:	cmn	r0, #1
   19388:	bne	1930c <__assert_fail@plt+0x7bf8>
   1938c:	bl	115d0 <__errno_location@plt>
   19390:	ldr	r6, [r0]
   19394:	mov	r5, r0
   19398:	mov	r0, r4
   1939c:	bl	116fc <close@plt>
   193a0:	str	r6, [r5]
   193a4:	mvn	r4, #0
   193a8:	b	1930c <__assert_fail@plt+0x7bf8>
   193ac:	push	{r4, sl, fp, lr}
   193b0:	add	fp, sp, #8
   193b4:	sub	sp, sp, #264	; 0x108
   193b8:	add	r1, sp, #7
   193bc:	movw	r2, #257	; 0x101
   193c0:	bl	19418 <__assert_fail@plt+0x7d04>
   193c4:	mov	r4, #0
   193c8:	cmp	r0, #0
   193cc:	bne	1940c <__assert_fail@plt+0x7cf8>
   193d0:	movw	r1, #44412	; 0xad7c
   193d4:	add	r0, sp, #7
   193d8:	mov	r2, #2
   193dc:	movt	r1, #1
   193e0:	bl	1157c <bcmp@plt>
   193e4:	cmp	r0, #0
   193e8:	beq	1940c <__assert_fail@plt+0x7cf8>
   193ec:	movw	r1, #44414	; 0xad7e
   193f0:	add	r0, sp, #7
   193f4:	mov	r2, #6
   193f8:	movt	r1, #1
   193fc:	bl	1157c <bcmp@plt>
   19400:	cmp	r0, #0
   19404:	mov	r4, r0
   19408:	movwne	r4, #1
   1940c:	mov	r0, r4
   19410:	sub	sp, fp, #8
   19414:	pop	{r4, sl, fp, pc}
   19418:	push	{r4, r5, r6, r7, fp, lr}
   1941c:	add	fp, sp, #16
   19420:	mov	r4, r1
   19424:	mov	r1, #0
   19428:	mov	r6, r2
   1942c:	bl	1166c <setlocale@plt>
   19430:	cmp	r0, #0
   19434:	beq	19464 <__assert_fail@plt+0x7d50>
   19438:	mov	r7, r0
   1943c:	bl	11588 <strlen@plt>
   19440:	cmp	r0, r6
   19444:	bcs	19480 <__assert_fail@plt+0x7d6c>
   19448:	add	r2, r0, #1
   1944c:	mov	r0, r4
   19450:	mov	r1, r7
   19454:	bl	11408 <memcpy@plt>
   19458:	mov	r5, #0
   1945c:	mov	r0, r5
   19460:	pop	{r4, r5, r6, r7, fp, pc}
   19464:	mov	r5, #22
   19468:	cmp	r6, #0
   1946c:	beq	194a8 <__assert_fail@plt+0x7d94>
   19470:	mov	r0, #0
   19474:	strb	r0, [r4]
   19478:	mov	r0, r5
   1947c:	pop	{r4, r5, r6, r7, fp, pc}
   19480:	mov	r5, #34	; 0x22
   19484:	cmp	r6, #0
   19488:	beq	194a8 <__assert_fail@plt+0x7d94>
   1948c:	sub	r6, r6, #1
   19490:	mov	r0, r4
   19494:	mov	r1, r7
   19498:	mov	r2, r6
   1949c:	bl	11408 <memcpy@plt>
   194a0:	mov	r0, #0
   194a4:	strb	r0, [r4, r6]
   194a8:	mov	r0, r5
   194ac:	pop	{r4, r5, r6, r7, fp, pc}
   194b0:	mov	r1, #0
   194b4:	b	1166c <setlocale@plt>
   194b8:	cmp	r3, #0
   194bc:	cmpeq	r2, #0
   194c0:	bne	194d8 <__assert_fail@plt+0x7dc4>
   194c4:	cmp	r1, #0
   194c8:	cmpeq	r0, #0
   194cc:	mvnne	r1, #0
   194d0:	mvnne	r0, #0
   194d4:	b	194f4 <__assert_fail@plt+0x7de0>
   194d8:	sub	sp, sp, #8
   194dc:	push	{sp, lr}
   194e0:	bl	19504 <__assert_fail@plt+0x7df0>
   194e4:	ldr	lr, [sp, #4]
   194e8:	add	sp, sp, #8
   194ec:	pop	{r2, r3}
   194f0:	bx	lr
   194f4:	push	{r1, lr}
   194f8:	mov	r0, #8
   194fc:	bl	1139c <raise@plt>
   19500:	pop	{r1, pc}
   19504:	cmp	r1, r3
   19508:	cmpeq	r0, r2
   1950c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19510:	mov	r4, r0
   19514:	movcc	r0, #0
   19518:	mov	r5, r1
   1951c:	ldr	lr, [sp, #36]	; 0x24
   19520:	movcc	r1, r0
   19524:	bcc	19620 <__assert_fail@plt+0x7f0c>
   19528:	cmp	r3, #0
   1952c:	clzeq	ip, r2
   19530:	clzne	ip, r3
   19534:	addeq	ip, ip, #32
   19538:	cmp	r5, #0
   1953c:	clzeq	r1, r4
   19540:	addeq	r1, r1, #32
   19544:	clzne	r1, r5
   19548:	sub	ip, ip, r1
   1954c:	sub	sl, ip, #32
   19550:	lsl	r9, r3, ip
   19554:	rsb	fp, ip, #32
   19558:	orr	r9, r9, r2, lsl sl
   1955c:	orr	r9, r9, r2, lsr fp
   19560:	lsl	r8, r2, ip
   19564:	cmp	r5, r9
   19568:	cmpeq	r4, r8
   1956c:	movcc	r0, #0
   19570:	movcc	r1, r0
   19574:	bcc	19590 <__assert_fail@plt+0x7e7c>
   19578:	mov	r0, #1
   1957c:	subs	r4, r4, r8
   19580:	lsl	r1, r0, sl
   19584:	orr	r1, r1, r0, lsr fp
   19588:	lsl	r0, r0, ip
   1958c:	sbc	r5, r5, r9
   19590:	cmp	ip, #0
   19594:	beq	19620 <__assert_fail@plt+0x7f0c>
   19598:	lsr	r6, r8, #1
   1959c:	orr	r6, r6, r9, lsl #31
   195a0:	lsr	r7, r9, #1
   195a4:	mov	r2, ip
   195a8:	b	195cc <__assert_fail@plt+0x7eb8>
   195ac:	subs	r3, r4, r6
   195b0:	sbc	r8, r5, r7
   195b4:	adds	r3, r3, r3
   195b8:	adc	r8, r8, r8
   195bc:	adds	r4, r3, #1
   195c0:	adc	r5, r8, #0
   195c4:	subs	r2, r2, #1
   195c8:	beq	195e8 <__assert_fail@plt+0x7ed4>
   195cc:	cmp	r5, r7
   195d0:	cmpeq	r4, r6
   195d4:	bcs	195ac <__assert_fail@plt+0x7e98>
   195d8:	adds	r4, r4, r4
   195dc:	adc	r5, r5, r5
   195e0:	subs	r2, r2, #1
   195e4:	bne	195cc <__assert_fail@plt+0x7eb8>
   195e8:	lsr	r3, r4, ip
   195ec:	orr	r3, r3, r5, lsl fp
   195f0:	lsr	r2, r5, ip
   195f4:	orr	r3, r3, r5, lsr sl
   195f8:	adds	r0, r0, r4
   195fc:	mov	r4, r3
   19600:	lsl	r3, r2, ip
   19604:	orr	r3, r3, r4, lsl sl
   19608:	lsl	ip, r4, ip
   1960c:	orr	r3, r3, r4, lsr fp
   19610:	adc	r1, r1, r5
   19614:	subs	r0, r0, ip
   19618:	mov	r5, r2
   1961c:	sbc	r1, r1, r3
   19620:	cmp	lr, #0
   19624:	strdne	r4, [lr]
   19628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1962c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19630:	mov	r7, r0
   19634:	ldr	r6, [pc, #72]	; 19684 <__assert_fail@plt+0x7f70>
   19638:	ldr	r5, [pc, #72]	; 19688 <__assert_fail@plt+0x7f74>
   1963c:	add	r6, pc, r6
   19640:	add	r5, pc, r5
   19644:	sub	r6, r6, r5
   19648:	mov	r8, r1
   1964c:	mov	r9, r2
   19650:	bl	11358 <fdopen@plt-0x20>
   19654:	asrs	r6, r6, #2
   19658:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1965c:	mov	r4, #0
   19660:	add	r4, r4, #1
   19664:	ldr	r3, [r5], #4
   19668:	mov	r2, r9
   1966c:	mov	r1, r8
   19670:	mov	r0, r7
   19674:	blx	r3
   19678:	cmp	r6, r4
   1967c:	bne	19660 <__assert_fail@plt+0x7f4c>
   19680:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19684:	andeq	r1, r1, r8, asr #17
   19688:	andeq	r1, r1, r0, asr #17
   1968c:	bx	lr
   19690:	ldr	r3, [pc, #12]	; 196a4 <__assert_fail@plt+0x7f90>
   19694:	mov	r1, #0
   19698:	add	r3, pc, r3
   1969c:	ldr	r2, [r3]
   196a0:	b	115e8 <__cxa_atexit@plt>
   196a4:	andeq	r1, r1, ip, lsr #21

Disassembly of section .fini:

000196a8 <.fini>:
   196a8:	push	{r3, lr}
   196ac:	pop	{r3, pc}
