
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	113cc <__assert_fail@plt+0x48>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <calloc@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <calloc@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	r6, r1, r8, ror #30

0001109c <calloc@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <fputs_unlocked@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <raise@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <strcmp@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <fflush@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <utmpxname@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <free@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <gai_strerror@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <_exit@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <memcpy@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <mbsinit@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <time@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcmp@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <stpcpy@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <dcgettext@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <strdup@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <setutxent@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <realloc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <textdomain@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <iswprint@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <fwrite@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <lseek64@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #90112	; 0x16000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <__ctype_get_mb_cur_max@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #90112	; 0x16000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <__fpending@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #90112	; 0x16000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <mbrtowc@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #90112	; 0x16000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <error@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #90112	; 0x16000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__asprintf_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #90112	; 0x16000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <puts@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #90112	; 0x16000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <malloc@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #90112	; 0x16000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__libc_start_main@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #90112	; 0x16000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <strftime@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <__freading@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <localtime@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <__gmon_start__@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getopt_long@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <kill@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__ctype_b_loc@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <exit@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #90112	; 0x16000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <ttyname@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #90112	; 0x16000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <strlen@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #90112	; 0x16000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <strchr@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #90112	; 0x16000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__errno_location@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #90112	; 0x16000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <__sprintf_chk@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #90112	; 0x16000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <__cxa_atexit@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #90112	; 0x16000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <memset@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #90112	; 0x16000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strncpy@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #90112	; 0x16000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <__printf_chk@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #90112	; 0x16000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <fileno@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #90112	; 0x16000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__fprintf_chk@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #90112	; 0x16000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <fclose@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #90112	; 0x16000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <fseeko64@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #90112	; 0x16000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <endutxent@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #90112	; 0x16000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <setlocale@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #90112	; 0x16000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <strrchr@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #90112	; 0x16000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <nl_langinfo@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #90112	; 0x16000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <freeaddrinfo@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #90112	; 0x16000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <getaddrinfo@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #90112	; 0x16000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <bindtextdomain@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #90112	; 0x16000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <__xstat64@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #90112	; 0x16000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <strncmp@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #90112	; 0x16000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <abort@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #90112	; 0x16000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <getutxent@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #90112	; 0x16000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <__assert_fail@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #90112	; 0x16000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

Disassembly of section .text:

00011390 <.text>:
   11390:	mov	fp, #0
   11394:	mov	lr, #0
   11398:	pop	{r1}		; (ldr r1, [sp], #4)
   1139c:	mov	r2, sp
   113a0:	push	{r2}		; (str r2, [sp, #-4]!)
   113a4:	push	{r0}		; (str r0, [sp, #-4]!)
   113a8:	ldr	ip, [pc, #16]	; 113c0 <__assert_fail@plt+0x3c>
   113ac:	push	{ip}		; (str ip, [sp, #-4]!)
   113b0:	ldr	r0, [pc, #12]	; 113c4 <__assert_fail@plt+0x40>
   113b4:	ldr	r3, [pc, #12]	; 113c8 <__assert_fail@plt+0x44>
   113b8:	bl	111f8 <__libc_start_main@plt>
   113bc:	bl	1136c <abort@plt>
   113c0:	ldrdeq	r6, [r1], -r4
   113c4:	andeq	r1, r1, r0, lsl #15
   113c8:	andeq	r6, r1, r4, ror r4
   113cc:	ldr	r3, [pc, #20]	; 113e8 <__assert_fail@plt+0x64>
   113d0:	ldr	r2, [pc, #20]	; 113ec <__assert_fail@plt+0x68>
   113d4:	add	r3, pc, r3
   113d8:	ldr	r2, [r3, r2]
   113dc:	cmp	r2, #0
   113e0:	bxeq	lr
   113e4:	b	11228 <__gmon_start__@plt>
   113e8:	andeq	r6, r1, r4, lsr #24
   113ec:	andeq	r0, r0, r8, lsl #2
   113f0:	ldr	r0, [pc, #24]	; 11410 <__assert_fail@plt+0x8c>
   113f4:	ldr	r3, [pc, #24]	; 11414 <__assert_fail@plt+0x90>
   113f8:	cmp	r3, r0
   113fc:	bxeq	lr
   11400:	ldr	r3, [pc, #16]	; 11418 <__assert_fail@plt+0x94>
   11404:	cmp	r3, #0
   11408:	bxeq	lr
   1140c:	bx	r3
   11410:	andeq	r8, r2, r8, ror #2
   11414:	andeq	r8, r2, r8, ror #2
   11418:	andeq	r0, r0, r0
   1141c:	ldr	r0, [pc, #36]	; 11448 <__assert_fail@plt+0xc4>
   11420:	ldr	r1, [pc, #36]	; 1144c <__assert_fail@plt+0xc8>
   11424:	sub	r1, r1, r0
   11428:	asr	r1, r1, #2
   1142c:	add	r1, r1, r1, lsr #31
   11430:	asrs	r1, r1, #1
   11434:	bxeq	lr
   11438:	ldr	r3, [pc, #16]	; 11450 <__assert_fail@plt+0xcc>
   1143c:	cmp	r3, #0
   11440:	bxeq	lr
   11444:	bx	r3
   11448:	andeq	r8, r2, r8, ror #2
   1144c:	andeq	r8, r2, r8, ror #2
   11450:	andeq	r0, r0, r0
   11454:	push	{r4, lr}
   11458:	ldr	r4, [pc, #24]	; 11478 <__assert_fail@plt+0xf4>
   1145c:	ldrb	r3, [r4]
   11460:	cmp	r3, #0
   11464:	popne	{r4, pc}
   11468:	bl	113f0 <__assert_fail@plt+0x6c>
   1146c:	mov	r3, #1
   11470:	strb	r3, [r4]
   11474:	pop	{r4, pc}
   11478:	andeq	r8, r2, r0, lsl #3
   1147c:	b	1141c <__assert_fail@plt+0x98>
   11480:	push	{fp, lr}
   11484:	mov	fp, sp
   11488:	sub	sp, sp, #56	; 0x38
   1148c:	mov	r4, r0
   11490:	cmp	r0, #0
   11494:	bne	1173c <__assert_fail@plt+0x3b8>
   11498:	movw	r1, #25891	; 0x6523
   1149c:	mov	r0, #0
   114a0:	mov	r2, #5
   114a4:	movt	r1, #1
   114a8:	bl	11144 <dcgettext@plt>
   114ac:	mov	r1, r0
   114b0:	movw	r0, #33284	; 0x8204
   114b4:	movt	r0, #2
   114b8:	ldr	r2, [r0]
   114bc:	mov	r0, #1
   114c0:	bl	112c4 <__printf_chk@plt>
   114c4:	movw	r1, #25935	; 0x654f
   114c8:	mov	r0, #0
   114cc:	mov	r2, #5
   114d0:	movt	r1, #1
   114d4:	bl	11144 <dcgettext@plt>
   114d8:	movw	r7, #33148	; 0x817c
   114dc:	movt	r7, #2
   114e0:	ldr	r1, [r7]
   114e4:	bl	110a8 <fputs_unlocked@plt>
   114e8:	movw	r1, #25995	; 0x658b
   114ec:	mov	r0, #0
   114f0:	mov	r2, #5
   114f4:	movt	r1, #1
   114f8:	bl	11144 <dcgettext@plt>
   114fc:	ldr	r1, [r7]
   11500:	bl	110a8 <fputs_unlocked@plt>
   11504:	movw	r1, #26190	; 0x664e
   11508:	mov	r0, #0
   1150c:	mov	r2, #5
   11510:	movt	r1, #1
   11514:	bl	11144 <dcgettext@plt>
   11518:	ldr	r1, [r7]
   1151c:	bl	110a8 <fputs_unlocked@plt>
   11520:	movw	r1, #26240	; 0x6680
   11524:	mov	r0, #0
   11528:	mov	r2, #5
   1152c:	movt	r1, #1
   11530:	bl	11144 <dcgettext@plt>
   11534:	ldr	r1, [r7]
   11538:	bl	110a8 <fputs_unlocked@plt>
   1153c:	movw	r1, #26427	; 0x673b
   11540:	mov	r0, #0
   11544:	mov	r2, #5
   11548:	movt	r1, #1
   1154c:	bl	11144 <dcgettext@plt>
   11550:	ldr	r1, [r7]
   11554:	bl	110a8 <fputs_unlocked@plt>
   11558:	movw	r1, #26650	; 0x681a
   1155c:	mov	r0, #0
   11560:	mov	r2, #5
   11564:	movt	r1, #1
   11568:	bl	11144 <dcgettext@plt>
   1156c:	ldr	r1, [r7]
   11570:	bl	110a8 <fputs_unlocked@plt>
   11574:	movw	r1, #26813	; 0x68bd
   11578:	mov	r0, #0
   1157c:	mov	r2, #5
   11580:	movt	r1, #1
   11584:	bl	11144 <dcgettext@plt>
   11588:	ldr	r1, [r7]
   1158c:	bl	110a8 <fputs_unlocked@plt>
   11590:	movw	r1, #26858	; 0x68ea
   11594:	mov	r0, #0
   11598:	mov	r2, #5
   1159c:	movt	r1, #1
   115a0:	bl	11144 <dcgettext@plt>
   115a4:	ldr	r1, [r7]
   115a8:	bl	110a8 <fputs_unlocked@plt>
   115ac:	movw	r1, #26912	; 0x6920
   115b0:	mov	r0, #0
   115b4:	mov	r2, #5
   115b8:	movt	r1, #1
   115bc:	bl	11144 <dcgettext@plt>
   115c0:	movw	r2, #27037	; 0x699d
   115c4:	movw	r3, #27051	; 0x69ab
   115c8:	mov	r1, r0
   115cc:	mov	r0, #1
   115d0:	movt	r2, #1
   115d4:	movt	r3, #1
   115d8:	bl	112c4 <__printf_chk@plt>
   115dc:	movw	r0, #28248	; 0x6e58
   115e0:	mov	r2, #48	; 0x30
   115e4:	mov	r6, sp
   115e8:	movw	r5, #27065	; 0x69b9
   115ec:	movt	r0, #1
   115f0:	movt	r5, #1
   115f4:	add	r1, r0, #32
   115f8:	add	r3, r0, #16
   115fc:	vld1.64	{d18-d19}, [r0], r2
   11600:	vld1.64	{d16-d17}, [r1]
   11604:	vld1.64	{d20-d21}, [r3]
   11608:	add	r1, r6, #32
   1160c:	vldr	d22, [r0]
   11610:	add	r0, r6, #16
   11614:	vst1.64	{d16-d17}, [r1]
   11618:	movw	r1, #27213	; 0x6a4d
   1161c:	vst1.64	{d20-d21}, [r0]
   11620:	mov	r0, r6
   11624:	vst1.64	{d18-d19}, [r0], r2
   11628:	movt	r1, #1
   1162c:	vstr	d22, [r0]
   11630:	mov	r0, r5
   11634:	bl	110c0 <strcmp@plt>
   11638:	cmp	r0, #0
   1163c:	ldrne	r1, [r6, #8]!
   11640:	cmpne	r1, #0
   11644:	bne	11630 <__assert_fail@plt+0x2ac>
   11648:	ldr	r6, [r6, #4]
   1164c:	movw	r1, #27308	; 0x6aac
   11650:	mov	r0, #0
   11654:	mov	r2, #5
   11658:	movt	r1, #1
   1165c:	bl	11144 <dcgettext@plt>
   11660:	movw	r2, #27108	; 0x69e4
   11664:	movw	r3, #27331	; 0x6ac3
   11668:	mov	r1, r0
   1166c:	mov	r0, #1
   11670:	movt	r2, #1
   11674:	movt	r3, #1
   11678:	bl	112c4 <__printf_chk@plt>
   1167c:	cmp	r6, #0
   11680:	mov	r0, #5
   11684:	mov	r1, #0
   11688:	moveq	r6, r5
   1168c:	bl	1130c <setlocale@plt>
   11690:	cmp	r0, #0
   11694:	beq	116cc <__assert_fail@plt+0x348>
   11698:	movw	r1, #27371	; 0x6aeb
   1169c:	mov	r2, #3
   116a0:	movt	r1, #1
   116a4:	bl	11360 <strncmp@plt>
   116a8:	cmp	r0, #0
   116ac:	beq	116cc <__assert_fail@plt+0x348>
   116b0:	movw	r1, #27375	; 0x6aef
   116b4:	mov	r0, #0
   116b8:	mov	r2, #5
   116bc:	movt	r1, #1
   116c0:	bl	11144 <dcgettext@plt>
   116c4:	ldr	r1, [r7]
   116c8:	bl	110a8 <fputs_unlocked@plt>
   116cc:	movw	r1, #27446	; 0x6b36
   116d0:	mov	r0, #0
   116d4:	mov	r2, #5
   116d8:	movt	r1, #1
   116dc:	bl	11144 <dcgettext@plt>
   116e0:	movw	r2, #27331	; 0x6ac3
   116e4:	mov	r1, r0
   116e8:	mov	r0, #1
   116ec:	mov	r3, r5
   116f0:	movt	r2, #1
   116f4:	bl	112c4 <__printf_chk@plt>
   116f8:	movw	r1, #27473	; 0x6b51
   116fc:	mov	r0, #0
   11700:	mov	r2, #5
   11704:	movt	r1, #1
   11708:	bl	11144 <dcgettext@plt>
   1170c:	movw	r3, #27523	; 0x6b83
   11710:	mov	r1, r0
   11714:	movw	r0, #27241	; 0x6a69
   11718:	cmp	r6, r5
   1171c:	mov	r2, r6
   11720:	movt	r0, #1
   11724:	movt	r3, #1
   11728:	moveq	r3, r0
   1172c:	mov	r0, #1
   11730:	bl	112c4 <__printf_chk@plt>
   11734:	mov	r0, r4
   11738:	bl	11258 <exit@plt>
   1173c:	movw	r0, #33144	; 0x8178
   11740:	movw	r1, #25852	; 0x64fc
   11744:	mov	r2, #5
   11748:	movt	r0, #2
   1174c:	movt	r1, #1
   11750:	ldr	r5, [r0]
   11754:	mov	r0, #0
   11758:	bl	11144 <dcgettext@plt>
   1175c:	mov	r2, r0
   11760:	movw	r0, #33284	; 0x8204
   11764:	mov	r1, #1
   11768:	movt	r0, #2
   1176c:	ldr	r3, [r0]
   11770:	mov	r0, r5
   11774:	bl	112dc <__fprintf_chk@plt>
   11778:	mov	r0, r4
   1177c:	bl	11258 <exit@plt>
   11780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11784:	add	fp, sp, #28
   11788:	sub	sp, sp, #20
   1178c:	mov	r5, r0
   11790:	ldr	r0, [r1]
   11794:	mov	r4, r1
   11798:	bl	13298 <__assert_fail@plt+0x1f14>
   1179c:	movw	r1, #27523	; 0x6b83
   117a0:	mov	r0, #6
   117a4:	movt	r1, #1
   117a8:	bl	1130c <setlocale@plt>
   117ac:	movw	r6, #27112	; 0x69e8
   117b0:	movw	r1, #27069	; 0x69bd
   117b4:	movt	r6, #1
   117b8:	movt	r1, #1
   117bc:	mov	r0, r6
   117c0:	bl	11348 <bindtextdomain@plt>
   117c4:	mov	r0, r6
   117c8:	bl	11174 <textdomain@plt>
   117cc:	movw	r0, #12388	; 0x3064
   117d0:	movt	r0, #1
   117d4:	bl	164d8 <__assert_fail@plt+0x5154>
   117d8:	movw	r9, #27960	; 0x6d38
   117dc:	movw	r7, #33156	; 0x8184
   117e0:	mov	r6, #1
   117e4:	mov	sl, #1
   117e8:	movt	r9, #1
   117ec:	movt	r7, #2
   117f0:	b	117f8 <__assert_fail@plt+0x474>
   117f4:	strb	r6, [r0]
   117f8:	movw	r2, #27093	; 0x69d5
   117fc:	mov	r8, sl
   11800:	mov	sl, #0
   11804:	mov	r0, r5
   11808:	mov	r1, r4
   1180c:	mov	r3, r9
   11810:	movt	r2, #1
   11814:	str	sl, [sp]
   11818:	bl	11234 <getopt_long@plt>
   1181c:	add	r1, r0, #3
   11820:	cmp	r1, #122	; 0x7a
   11824:	bhi	11a2c <__assert_fail@plt+0x6a8>
   11828:	add	r2, pc, #4
   1182c:	mov	r0, r7
   11830:	ldr	pc, [r2, r1, lsl #2]
   11834:	andeq	r1, r1, r4, asr #24
   11838:	andeq	r1, r1, r0, lsr #25
   1183c:	andeq	r1, r1, r4, asr fp
   11840:	andeq	r1, r1, ip, lsr ip
   11844:	andeq	r1, r1, ip, lsr ip
   11848:	andeq	r1, r1, ip, lsr ip
   1184c:	andeq	r1, r1, ip, lsr ip
   11850:	andeq	r1, r1, ip, lsr ip
   11854:	andeq	r1, r1, ip, lsr ip
   11858:	andeq	r1, r1, ip, lsr ip
   1185c:	andeq	r1, r1, ip, lsr ip
   11860:	andeq	r1, r1, ip, lsr ip
   11864:	andeq	r1, r1, ip, lsr ip
   11868:	andeq	r1, r1, ip, lsr ip
   1186c:	andeq	r1, r1, ip, lsr ip
   11870:	andeq	r1, r1, ip, lsr ip
   11874:	andeq	r1, r1, ip, lsr ip
   11878:	andeq	r1, r1, ip, lsr ip
   1187c:	andeq	r1, r1, ip, lsr ip
   11880:	andeq	r1, r1, ip, lsr ip
   11884:	andeq	r1, r1, ip, lsr ip
   11888:	andeq	r1, r1, ip, lsr ip
   1188c:	andeq	r1, r1, ip, lsr ip
   11890:	andeq	r1, r1, ip, lsr ip
   11894:	andeq	r1, r1, ip, lsr ip
   11898:	andeq	r1, r1, ip, lsr ip
   1189c:	andeq	r1, r1, ip, lsr ip
   118a0:	andeq	r1, r1, ip, lsr ip
   118a4:	andeq	r1, r1, ip, lsr ip
   118a8:	andeq	r1, r1, ip, lsr ip
   118ac:	andeq	r1, r1, ip, lsr ip
   118b0:	andeq	r1, r1, ip, lsr ip
   118b4:	andeq	r1, r1, ip, lsr ip
   118b8:	andeq	r1, r1, ip, lsr ip
   118bc:	andeq	r1, r1, ip, lsr ip
   118c0:	andeq	r1, r1, ip, lsr ip
   118c4:	andeq	r1, r1, ip, lsr ip
   118c8:	andeq	r1, r1, ip, lsr ip
   118cc:	andeq	r1, r1, ip, lsr ip
   118d0:	andeq	r1, r1, ip, lsr ip
   118d4:	andeq	r1, r1, ip, lsr ip
   118d8:	andeq	r1, r1, ip, lsr ip
   118dc:	andeq	r1, r1, ip, lsr ip
   118e0:	andeq	r1, r1, ip, lsr ip
   118e4:	andeq	r1, r1, ip, lsr ip
   118e8:	andeq	r1, r1, ip, lsr ip
   118ec:	andeq	r1, r1, ip, lsr ip
   118f0:	andeq	r1, r1, ip, lsr ip
   118f4:	andeq	r1, r1, ip, lsr ip
   118f8:	andeq	r1, r1, ip, lsr ip
   118fc:	andeq	r1, r1, ip, lsr ip
   11900:	andeq	r1, r1, ip, lsr ip
   11904:	andeq	r1, r1, ip, lsr ip
   11908:	andeq	r1, r1, ip, lsr ip
   1190c:	andeq	r1, r1, ip, lsr ip
   11910:	andeq	r1, r1, ip, lsr ip
   11914:	andeq	r1, r1, ip, lsr ip
   11918:	andeq	r1, r1, ip, lsr ip
   1191c:	andeq	r1, r1, ip, lsr ip
   11920:	andeq	r1, r1, ip, lsr ip
   11924:	andeq	r1, r1, ip, lsr ip
   11928:	andeq	r1, r1, ip, lsr ip
   1192c:	andeq	r1, r1, ip, lsr ip
   11930:	andeq	r1, r1, ip, lsr ip
   11934:	andeq	r1, r1, ip, lsr ip
   11938:	andeq	r1, r1, ip, lsr ip
   1193c:	andeq	r1, r1, ip, lsr ip
   11940:	andeq	r1, r1, ip, lsr ip
   11944:	andeq	r1, r1, ip, lsr ip
   11948:	andeq	r1, r1, ip, lsr ip
   1194c:	andeq	r1, r1, ip, lsr ip
   11950:	andeq	r1, r1, ip, lsr ip
   11954:	andeq	r1, r1, ip, lsr ip
   11958:	andeq	r1, r1, ip, lsr ip
   1195c:	andeq	r1, r1, ip, lsr ip
   11960:	andeq	r1, r1, r0, lsl #21
   11964:	andeq	r1, r1, ip, lsr ip
   11968:	andeq	r1, r1, ip, lsr ip
   1196c:	andeq	r1, r1, ip, lsr ip
   11970:	andeq	r1, r1, ip, lsr ip
   11974:	andeq	r1, r1, ip, lsr ip
   11978:	andeq	r1, r1, ip, lsr ip
   1197c:	andeq	r1, r1, ip, lsr ip
   11980:	andeq	r1, r1, ip, lsr ip
   11984:	andeq	r1, r1, ip, lsr ip
   11988:	andeq	r1, r1, ip, lsr ip
   1198c:	andeq	r1, r1, ip, lsr ip
   11990:	andeq	r1, r1, r0, lsr #20
   11994:	andeq	r1, r1, ip, lsr ip
   11998:	andeq	r1, r1, ip, lsr ip
   1199c:	andeq	r1, r1, ip, lsr ip
   119a0:	andeq	r1, r1, ip, lsr ip
   119a4:	andeq	r1, r1, ip, lsr ip
   119a8:	andeq	r1, r1, ip, lsr ip
   119ac:	andeq	r1, r1, ip, lsr ip
   119b0:	andeq	r1, r1, ip, lsr ip
   119b4:	andeq	r1, r1, ip, lsr ip
   119b8:	andeq	r1, r1, ip, lsr ip
   119bc:	andeq	r1, r1, ip, lsr ip
   119c0:	andeq	r1, r1, ip, lsr ip
   119c4:	andeq	r1, r1, r8, lsr #21
   119c8:	strdeq	r1, [r1], -r4
   119cc:	andeq	r1, r1, ip, lsr ip
   119d0:	andeq	r1, r1, ip, asr sl
   119d4:	andeq	r1, r1, ip, lsr ip
   119d8:	andeq	r1, r1, ip, lsr ip
   119dc:	andeq	r1, r1, ip, lsr ip
   119e0:	andeq	r1, r1, ip, lsr ip
   119e4:	andeq	r1, r1, ip, lsr ip
   119e8:	andeq	r1, r1, ip, lsr ip
   119ec:	andeq	r1, r1, ip, lsr ip
   119f0:	andeq	r1, r1, r4, ror sl
   119f4:	andeq	r1, r1, ip, lsl fp
   119f8:	andeq	r1, r1, ip, lsr ip
   119fc:	andeq	r1, r1, ip, lsr ip
   11a00:	andeq	r1, r1, ip, lsl #21
   11a04:	andeq	r1, r1, r0, asr #20
   11a08:	muleq	r1, ip, sl
   11a0c:	andeq	r1, r1, r4, asr #22
   11a10:	andeq	r1, r1, ip, asr #20
   11a14:	andeq	r1, r1, r8, lsr #22
   11a18:	andeq	r1, r1, ip, lsr ip
   11a1c:	andeq	r1, r1, r0, lsr #20
   11a20:	movw	r0, #33163	; 0x818b
   11a24:	movt	r0, #2
   11a28:	b	11b4c <__assert_fail@plt+0x7c8>
   11a2c:	cmp	r0, #256	; 0x100
   11a30:	bne	11c3c <__assert_fail@plt+0x8b8>
   11a34:	movw	r0, #33170	; 0x8192
   11a38:	movt	r0, #2
   11a3c:	b	11b4c <__assert_fail@plt+0x7c8>
   11a40:	movw	r0, #33168	; 0x8190
   11a44:	movt	r0, #2
   11a48:	b	11b4c <__assert_fail@plt+0x7c8>
   11a4c:	movw	r0, #33161	; 0x8189
   11a50:	movt	r0, #2
   11a54:	strb	r6, [r0]
   11a58:	b	117f8 <__assert_fail@plt+0x474>
   11a5c:	movw	r0, #33164	; 0x818c
   11a60:	movt	r0, #2
   11a64:	strb	r6, [r0]
   11a68:	movw	r0, #33157	; 0x8185
   11a6c:	movt	r0, #2
   11a70:	b	11b08 <__assert_fail@plt+0x784>
   11a74:	movw	r0, #33158	; 0x8186
   11a78:	movt	r0, #2
   11a7c:	b	11b30 <__assert_fail@plt+0x7ac>
   11a80:	movw	r0, #33166	; 0x818e
   11a84:	movt	r0, #2
   11a88:	b	11b4c <__assert_fail@plt+0x7c8>
   11a8c:	movw	r0, #33159	; 0x8187
   11a90:	movt	r0, #2
   11a94:	strb	r6, [r0]
   11a98:	b	117f8 <__assert_fail@plt+0x474>
   11a9c:	movw	r0, #33160	; 0x8188
   11aa0:	movt	r0, #2
   11aa4:	b	11b30 <__assert_fail@plt+0x7ac>
   11aa8:	movw	r0, #33157	; 0x8185
   11aac:	strb	r6, [r7]
   11ab0:	movt	r0, #2
   11ab4:	strb	r6, [r0]
   11ab8:	movw	r0, #33158	; 0x8186
   11abc:	movt	r0, #2
   11ac0:	strb	r6, [r0]
   11ac4:	movw	r0, #33159	; 0x8187
   11ac8:	movt	r0, #2
   11acc:	strb	r6, [r0]
   11ad0:	movw	r0, #33160	; 0x8188
   11ad4:	movt	r0, #2
   11ad8:	strb	r6, [r0]
   11adc:	movw	r0, #33161	; 0x8189
   11ae0:	movt	r0, #2
   11ae4:	strb	r6, [r0]
   11ae8:	movw	r0, #33162	; 0x818a
   11aec:	movt	r0, #2
   11af0:	strb	r6, [r0]
   11af4:	movw	r0, #33163	; 0x818b
   11af8:	movt	r0, #2
   11afc:	strb	r6, [r0]
   11b00:	movw	r0, #33164	; 0x818c
   11b04:	movt	r0, #2
   11b08:	strb	r6, [r0]
   11b0c:	movw	r0, #33165	; 0x818d
   11b10:	movt	r0, #2
   11b14:	strb	r6, [r0]
   11b18:	b	117f8 <__assert_fail@plt+0x474>
   11b1c:	movw	r0, #33167	; 0x818f
   11b20:	movt	r0, #2
   11b24:	b	11b4c <__assert_fail@plt+0x7c8>
   11b28:	movw	r0, #33162	; 0x818a
   11b2c:	movt	r0, #2
   11b30:	strb	r6, [r0]
   11b34:	movw	r0, #33164	; 0x818c
   11b38:	movt	r0, #2
   11b3c:	strb	r6, [r0]
   11b40:	b	117f8 <__assert_fail@plt+0x474>
   11b44:	movw	r0, #33169	; 0x8191
   11b48:	movt	r0, #2
   11b4c:	mov	sl, r8
   11b50:	b	117f4 <__assert_fail@plt+0x470>
   11b54:	tst	r8, #1
   11b58:	beq	11b78 <__assert_fail@plt+0x7f4>
   11b5c:	movw	r0, #33169	; 0x8191
   11b60:	mov	r1, #1
   11b64:	movt	r0, #2
   11b68:	strb	r1, [r0]
   11b6c:	movw	r0, #33162	; 0x818a
   11b70:	movt	r0, #2
   11b74:	strb	r1, [r0]
   11b78:	movw	r0, #33165	; 0x818d
   11b7c:	movt	r0, #2
   11b80:	ldrb	r0, [r0]
   11b84:	cmp	r0, #1
   11b88:	movweq	r0, #33169	; 0x8191
   11b8c:	moveq	r1, #0
   11b90:	movteq	r0, #2
   11b94:	strbeq	r1, [r0]
   11b98:	mov	r0, #2
   11b9c:	bl	13174 <__assert_fail@plt+0x1df0>
   11ba0:	movw	r1, #27169	; 0x6a21
   11ba4:	movw	r2, #27184	; 0x6a30
   11ba8:	cmp	r0, #0
   11bac:	movw	r0, #33172	; 0x8194
   11bb0:	movw	r6, #33136	; 0x8170
   11bb4:	movt	r1, #1
   11bb8:	movt	r2, #1
   11bbc:	movt	r0, #2
   11bc0:	movt	r6, #2
   11bc4:	movne	r2, r1
   11bc8:	movw	r1, #33176	; 0x8198
   11bcc:	str	r2, [r0]
   11bd0:	mov	r0, #12
   11bd4:	movt	r1, #2
   11bd8:	movwne	r0, #16
   11bdc:	str	r0, [r1]
   11be0:	ldr	r0, [r6]
   11be4:	sub	r1, r5, r0
   11be8:	add	r2, r1, #1
   11bec:	cmp	r2, #2
   11bf0:	bcc	11c14 <__assert_fail@plt+0x890>
   11bf4:	cmp	r1, #1
   11bf8:	beq	11c24 <__assert_fail@plt+0x8a0>
   11bfc:	cmp	r1, #2
   11c00:	bne	11ca8 <__assert_fail@plt+0x924>
   11c04:	movw	r0, #33167	; 0x818f
   11c08:	mov	r1, #1
   11c0c:	movt	r0, #2
   11c10:	strb	r1, [r0]
   11c14:	movw	r0, #27037	; 0x699d
   11c18:	mov	r1, #1
   11c1c:	movt	r0, #1
   11c20:	b	11c2c <__assert_fail@plt+0x8a8>
   11c24:	ldr	r0, [r4, r0, lsl #2]
   11c28:	mov	r1, #0
   11c2c:	bl	11cec <__assert_fail@plt+0x968>
   11c30:	mov	r0, #0
   11c34:	sub	sp, fp, #28
   11c38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c3c:	mov	r0, #1
   11c40:	bl	11480 <__assert_fail@plt+0xfc>
   11c44:	movw	r0, #33056	; 0x8120
   11c48:	movw	r2, #27155	; 0x6a13
   11c4c:	movw	r7, #27139	; 0x6a03
   11c50:	movw	r6, #27122	; 0x69f2
   11c54:	mov	r1, #0
   11c58:	movt	r0, #2
   11c5c:	movt	r2, #1
   11c60:	movt	r7, #1
   11c64:	movt	r6, #1
   11c68:	ldr	r3, [r0]
   11c6c:	movw	r0, #33148	; 0x817c
   11c70:	movt	r0, #2
   11c74:	ldr	r0, [r0]
   11c78:	stm	sp, {r6, r7}
   11c7c:	str	r2, [sp, #8]
   11c80:	movw	r2, #27108	; 0x69e4
   11c84:	str	r1, [sp, #12]
   11c88:	movw	r1, #27065	; 0x69b9
   11c8c:	movt	r1, #1
   11c90:	movt	r2, #1
   11c94:	bl	156c4 <__assert_fail@plt+0x4340>
   11c98:	mov	r0, #0
   11c9c:	bl	11258 <exit@plt>
   11ca0:	mov	r0, #0
   11ca4:	bl	11480 <__assert_fail@plt+0xfc>
   11ca8:	movw	r1, #27196	; 0x6a3c
   11cac:	mov	r0, #0
   11cb0:	mov	r2, #5
   11cb4:	movt	r1, #1
   11cb8:	bl	11144 <dcgettext@plt>
   11cbc:	mov	r5, r0
   11cc0:	ldr	r0, [r6]
   11cc4:	add	r0, r4, r0, lsl #2
   11cc8:	ldr	r0, [r0, #8]
   11ccc:	bl	14ecc <__assert_fail@plt+0x3b48>
   11cd0:	mov	r3, r0
   11cd4:	mov	r0, #0
   11cd8:	mov	r1, #0
   11cdc:	mov	r2, r5
   11ce0:	bl	111c8 <error@plt>
   11ce4:	mov	r0, #1
   11ce8:	bl	11480 <__assert_fail@plt+0xfc>
   11cec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11cf0:	add	fp, sp, #28
   11cf4:	sub	sp, sp, #492	; 0x1ec
   11cf8:	mov	r3, r1
   11cfc:	add	r1, sp, #60	; 0x3c
   11d00:	add	r2, sp, #56	; 0x38
   11d04:	mov	r4, r0
   11d08:	bl	1506c <__assert_fail@plt+0x3ce8>
   11d0c:	cmp	r0, #0
   11d10:	bne	12c94 <__assert_fail@plt+0x1910>
   11d14:	movw	r0, #33168	; 0x8190
   11d18:	ldr	r4, [sp, #56]	; 0x38
   11d1c:	ldr	r9, [sp, #60]	; 0x3c
   11d20:	movt	r0, #2
   11d24:	ldrb	r0, [r0]
   11d28:	cmp	r0, #1
   11d2c:	bne	11dd4 <__assert_fail@plt+0xa50>
   11d30:	mov	r5, #0
   11d34:	cmp	r9, #0
   11d38:	beq	11dac <__assert_fail@plt+0xa28>
   11d3c:	movw	r7, #27523	; 0x6b83
   11d40:	movw	r8, #27629	; 0x6bed
   11d44:	movw	sl, #27778	; 0x6c82
   11d48:	movt	r7, #1
   11d4c:	movt	r8, #1
   11d50:	movt	sl, #1
   11d54:	ldrb	r0, [r4, #44]	; 0x2c
   11d58:	sub	r9, r9, #1
   11d5c:	cmp	r0, #0
   11d60:	beq	11da0 <__assert_fail@plt+0xa1c>
   11d64:	ldrh	r0, [r4]
   11d68:	cmp	r0, #7
   11d6c:	bne	11da0 <__assert_fail@plt+0xa1c>
   11d70:	mov	r0, r4
   11d74:	bl	15004 <__assert_fail@plt+0x3c80>
   11d78:	mov	r6, r0
   11d7c:	mov	r0, #1
   11d80:	mov	r1, r8
   11d84:	mov	r2, r7
   11d88:	mov	r3, r6
   11d8c:	bl	112c4 <__printf_chk@plt>
   11d90:	mov	r0, r6
   11d94:	bl	1314c <__assert_fail@plt+0x1dc8>
   11d98:	add	r5, r5, #1
   11d9c:	mov	r7, sl
   11da0:	add	r4, r4, #384	; 0x180
   11da4:	cmp	r9, #0
   11da8:	bne	11d54 <__assert_fail@plt+0x9d0>
   11dac:	movw	r1, #27634	; 0x6bf2
   11db0:	mov	r0, #0
   11db4:	mov	r2, #5
   11db8:	movt	r1, #1
   11dbc:	bl	11144 <dcgettext@plt>
   11dc0:	mov	r1, r0
   11dc4:	mov	r0, #1
   11dc8:	mov	r2, r5
   11dcc:	bl	112c4 <__printf_chk@plt>
   11dd0:	b	12c84 <__assert_fail@plt+0x1900>
   11dd4:	movw	r0, #33166	; 0x818e
   11dd8:	movt	r0, #2
   11ddc:	ldrb	r0, [r0]
   11de0:	cmp	r0, #1
   11de4:	bne	11eb0 <__assert_fail@plt+0xb2c>
   11de8:	movw	r1, #27654	; 0x6c06
   11dec:	mov	r0, #0
   11df0:	mov	r2, #5
   11df4:	movt	r1, #1
   11df8:	bl	11144 <dcgettext@plt>
   11dfc:	movw	r1, #27659	; 0x6c0b
   11e00:	str	r0, [sp, #52]	; 0x34
   11e04:	mov	r0, #0
   11e08:	mov	r2, #5
   11e0c:	movt	r1, #1
   11e10:	bl	11144 <dcgettext@plt>
   11e14:	movw	r1, #27664	; 0x6c10
   11e18:	mov	r8, r0
   11e1c:	mov	r0, #0
   11e20:	mov	r2, #5
   11e24:	movt	r1, #1
   11e28:	bl	11144 <dcgettext@plt>
   11e2c:	movw	r1, #27669	; 0x6c15
   11e30:	mov	sl, r0
   11e34:	mov	r0, #0
   11e38:	mov	r2, #5
   11e3c:	movt	r1, #1
   11e40:	bl	11144 <dcgettext@plt>
   11e44:	movw	r1, #27674	; 0x6c1a
   11e48:	mov	r5, r0
   11e4c:	mov	r0, #0
   11e50:	mov	r2, #5
   11e54:	movt	r1, #1
   11e58:	bl	11144 <dcgettext@plt>
   11e5c:	movw	r1, #27678	; 0x6c1e
   11e60:	mov	r6, r0
   11e64:	mov	r0, #0
   11e68:	mov	r2, #5
   11e6c:	movt	r1, #1
   11e70:	bl	11144 <dcgettext@plt>
   11e74:	movw	r1, #27686	; 0x6c26
   11e78:	mov	r7, r0
   11e7c:	mov	r0, #0
   11e80:	mov	r2, #5
   11e84:	movt	r1, #1
   11e88:	bl	11144 <dcgettext@plt>
   11e8c:	add	r1, sp, #8
   11e90:	stm	sp, {r8, sl}
   11e94:	mov	r2, #32
   11e98:	mvn	r3, #0
   11e9c:	stm	r1, {r5, r6, r7}
   11ea0:	str	r0, [sp, #20]
   11ea4:	mvn	r0, #0
   11ea8:	ldr	r1, [sp, #52]	; 0x34
   11eac:	bl	12ce4 <__assert_fail@plt+0x1960>
   11eb0:	movw	sl, #33167	; 0x818f
   11eb4:	movt	sl, #2
   11eb8:	ldrb	r0, [sl]
   11ebc:	cmp	r0, #1
   11ec0:	bne	11ef0 <__assert_fail@plt+0xb6c>
   11ec4:	mov	r0, #0
   11ec8:	bl	11264 <ttyname@plt>
   11ecc:	cmp	r0, #0
   11ed0:	beq	12c84 <__assert_fail@plt+0x1900>
   11ed4:	movw	r1, #27648	; 0x6c00
   11ed8:	mov	r2, #5
   11edc:	mov	r8, r0
   11ee0:	movt	r1, #1
   11ee4:	bl	11360 <strncmp@plt>
   11ee8:	cmp	r0, #0
   11eec:	addeq	r8, r8, #5
   11ef0:	cmp	r9, #0
   11ef4:	beq	12c84 <__assert_fail@plt+0x1900>
   11ef8:	sub	r0, fp, #184	; 0xb8
   11efc:	movw	r7, #33160	; 0x8188
   11f00:	str	r8, [sp, #48]	; 0x30
   11f04:	orr	r0, r0, #5
   11f08:	movt	r7, #2
   11f0c:	str	r0, [sp, #28]
   11f10:	mov	r0, #-2147483648	; 0x80000000
   11f14:	str	r0, [sp, #52]	; 0x34
   11f18:	ldrb	r0, [sl]
   11f1c:	cmp	r0, #1
   11f20:	bne	11f3c <__assert_fail@plt+0xbb8>
   11f24:	add	r1, r4, #8
   11f28:	mov	r0, r8
   11f2c:	mov	r2, #32
   11f30:	bl	11360 <strncmp@plt>
   11f34:	cmp	r0, #0
   11f38:	bne	12c64 <__assert_fail@plt+0x18e0>
   11f3c:	movw	r0, #33162	; 0x818a
   11f40:	movt	r0, #2
   11f44:	ldrb	r0, [r0]
   11f48:	cmp	r0, #1
   11f4c:	bne	12048 <__assert_fail@plt+0xcc4>
   11f50:	mov	r6, r4
   11f54:	ldrb	r0, [r6, #44]!	; 0x2c
   11f58:	cmp	r0, #0
   11f5c:	beq	12048 <__assert_fail@plt+0xcc4>
   11f60:	ldrh	r0, [r4]
   11f64:	cmp	r0, #7
   11f68:	bne	12048 <__assert_fail@plt+0xcc4>
   11f6c:	ldr	r0, [r4, #4]
   11f70:	movw	r3, #27748	; 0x6c64
   11f74:	mov	r1, #1
   11f78:	mov	r2, #12
   11f7c:	movt	r3, #1
   11f80:	str	r0, [sp]
   11f84:	sub	r0, fp, #196	; 0xc4
   11f88:	bl	11294 <__sprintf_chk@plt>
   11f8c:	mov	r0, r4
   11f90:	ldrb	r1, [r0, #8]!
   11f94:	str	r0, [sp, #44]	; 0x2c
   11f98:	cmp	r1, #47	; 0x2f
   11f9c:	sub	r0, fp, #184	; 0xb8
   11fa0:	beq	11fc8 <__assert_fail@plt+0xc44>
   11fa4:	ldr	r2, [sp, #28]
   11fa8:	mov	r0, #47	; 0x2f
   11fac:	cmp	r1, #0
   11fb0:	strh	r0, [fp, #-180]	; 0xffffff4c
   11fb4:	movw	r0, #25647	; 0x642f
   11fb8:	movt	r0, #30309	; 0x7665
   11fbc:	str	r0, [fp, #-184]	; 0xffffff48
   11fc0:	mov	r0, r2
   11fc4:	beq	12008 <__assert_fail@plt+0xc84>
   11fc8:	mov	r5, r7
   11fcc:	add	r2, r4, #40	; 0x28
   11fd0:	mov	r7, #0
   11fd4:	strb	r1, [r0, r7]
   11fd8:	add	r1, r4, r7
   11fdc:	mov	r3, r7
   11fe0:	add	r1, r1, #9
   11fe4:	cmp	r1, r2
   11fe8:	bcs	11ffc <__assert_fail@plt+0xc78>
   11fec:	ldrb	r1, [r1]
   11ff0:	add	r7, r3, #1
   11ff4:	cmp	r1, #0
   11ff8:	bne	11fd4 <__assert_fail@plt+0xc50>
   11ffc:	add	r0, r0, r3
   12000:	mov	r7, r5
   12004:	add	r2, r0, #1
   12008:	mov	r0, #0
   1200c:	sub	r1, fp, #184	; 0xb8
   12010:	strb	r0, [r2]
   12014:	mov	r0, #3
   12018:	sub	r2, fp, #136	; 0x88
   1201c:	bl	11354 <__xstat64@plt>
   12020:	mov	r1, #63	; 0x3f
   12024:	cmp	r0, #0
   12028:	beq	12710 <__assert_fail@plt+0x138c>
   1202c:	movw	r3, #27757	; 0x6c6d
   12030:	str	r1, [sp, #40]	; 0x28
   12034:	sub	r0, fp, #143	; 0x8f
   12038:	mov	r1, #1
   1203c:	mov	r2, #7
   12040:	movt	r3, #1
   12044:	b	12888 <__assert_fail@plt+0x1504>
   12048:	ldrb	r0, [r7]
   1204c:	cmp	r0, #1
   12050:	ldrheq	r0, [r4]
   12054:	cmpeq	r0, #1
   12058:	beq	12298 <__assert_fail@plt+0xf14>
   1205c:	movw	r0, #33156	; 0x8184
   12060:	movt	r0, #2
   12064:	ldrb	r0, [r0]
   12068:	cmp	r0, #1
   1206c:	ldrheq	r0, [r4]
   12070:	cmpeq	r0, #2
   12074:	beq	12408 <__assert_fail@plt+0x1084>
   12078:	movw	r0, #33161	; 0x8189
   1207c:	movt	r0, #2
   12080:	ldrb	r0, [r0]
   12084:	cmp	r0, #1
   12088:	ldrheq	r0, [r4]
   1208c:	cmpeq	r0, #3
   12090:	beq	12418 <__assert_fail@plt+0x1094>
   12094:	movw	r0, #33159	; 0x8187
   12098:	movt	r0, #2
   1209c:	ldrb	r0, [r0]
   120a0:	cmp	r0, #1
   120a4:	ldrheq	r0, [r4]
   120a8:	cmpeq	r0, #5
   120ac:	beq	124b4 <__assert_fail@plt+0x1130>
   120b0:	movw	r0, #33158	; 0x8186
   120b4:	movt	r0, #2
   120b8:	ldrb	r0, [r0]
   120bc:	cmp	r0, #1
   120c0:	ldrheq	r0, [r4]
   120c4:	cmpeq	r0, #6
   120c8:	beq	125b0 <__assert_fail@plt+0x122c>
   120cc:	movw	r0, #33157	; 0x8185
   120d0:	movt	r0, #2
   120d4:	ldrb	r0, [r0]
   120d8:	cmp	r0, #1
   120dc:	ldrheq	r0, [r4]
   120e0:	cmpeq	r0, #8
   120e4:	bne	12c64 <__assert_fail@plt+0x18e0>
   120e8:	movw	r6, #27928	; 0x6d18
   120ec:	mov	r0, #0
   120f0:	mov	r2, #5
   120f4:	mov	r5, #0
   120f8:	movt	r6, #1
   120fc:	mov	r1, r6
   12100:	bl	11144 <dcgettext@plt>
   12104:	bl	11270 <strlen@plt>
   12108:	add	r0, r0, #5
   1210c:	bl	158f8 <__assert_fail@plt+0x4574>
   12110:	mov	r8, r0
   12114:	mov	r0, #0
   12118:	mov	r1, r6
   1211c:	mov	r2, #5
   12120:	bl	11144 <dcgettext@plt>
   12124:	mov	r1, r0
   12128:	mov	r0, r8
   1212c:	bl	11138 <stpcpy@plt>
   12130:	add	r1, r4, #44	; 0x2c
   12134:	add	r2, r4, r5
   12138:	ldrb	r2, [r2, #40]	; 0x28
   1213c:	cmp	r2, #0
   12140:	beq	1215c <__assert_fail@plt+0xdd8>
   12144:	strb	r2, [r0, r5]
   12148:	add	r5, r5, #1
   1214c:	add	r2, r4, r5
   12150:	add	r2, r2, #40	; 0x28
   12154:	cmp	r2, r1
   12158:	bcc	12134 <__assert_fail@plt+0xdb0>
   1215c:	add	r0, r0, r5
   12160:	mov	r1, #0
   12164:	movw	r3, #27748	; 0x6c64
   12168:	mov	r2, #12
   1216c:	strb	r1, [r0]
   12170:	mov	r1, #1
   12174:	movt	r3, #1
   12178:	ldr	r0, [r4, #4]
   1217c:	str	r0, [sp]
   12180:	sub	r0, fp, #196	; 0xc4
   12184:	bl	11294 <__sprintf_chk@plt>
   12188:	movw	r0, #33236	; 0x81d4
   1218c:	movt	r0, #2
   12190:	ldr	r5, [r0]
   12194:	cmp	r5, #0
   12198:	bne	121ec <__assert_fail@plt+0xe68>
   1219c:	movw	r1, #27938	; 0x6d22
   121a0:	mov	r0, #0
   121a4:	mov	r2, #5
   121a8:	movt	r1, #1
   121ac:	bl	11144 <dcgettext@plt>
   121b0:	bl	11270 <strlen@plt>
   121b4:	movw	r1, #27944	; 0x6d28
   121b8:	mov	r5, r0
   121bc:	mov	r0, #0
   121c0:	mov	r2, #5
   121c4:	movt	r1, #1
   121c8:	bl	11144 <dcgettext@plt>
   121cc:	bl	11270 <strlen@plt>
   121d0:	add	r0, r5, r0
   121d4:	add	r0, r0, #14
   121d8:	bl	158f8 <__assert_fail@plt+0x4574>
   121dc:	mov	r5, r0
   121e0:	movw	r0, #33236	; 0x81d4
   121e4:	movt	r0, #2
   121e8:	str	r5, [r0]
   121ec:	movw	r1, #27938	; 0x6d22
   121f0:	mov	r0, #0
   121f4:	mov	r2, #5
   121f8:	movt	r1, #1
   121fc:	bl	11144 <dcgettext@plt>
   12200:	mov	r7, r0
   12204:	mov	r0, #332	; 0x14c
   12208:	movw	r1, #27944	; 0x6d28
   1220c:	mov	r2, #5
   12210:	ldrsh	r6, [r4, r0]
   12214:	mov	r0, #0
   12218:	movt	r1, #1
   1221c:	bl	11144 <dcgettext@plt>
   12220:	movw	r1, #334	; 0x14e
   12224:	movw	r3, #27950	; 0x6d2e
   12228:	mvn	r2, #0
   1222c:	ldrsh	r1, [r4, r1]
   12230:	str	r0, [sp, #8]
   12234:	mov	r0, r5
   12238:	movt	r3, #1
   1223c:	str	r7, [sp]
   12240:	str	r6, [sp, #4]
   12244:	str	r1, [sp, #12]
   12248:	mov	r1, #1
   1224c:	bl	11294 <__sprintf_chk@plt>
   12250:	ldr	r0, [r4, #340]	; 0x154
   12254:	add	r7, sp, #64	; 0x40
   12258:	add	r5, r4, #8
   1225c:	str	r0, [sp, #64]	; 0x40
   12260:	mov	r0, r7
   12264:	bl	1121c <localtime@plt>
   12268:	cmp	r0, #0
   1226c:	beq	12af8 <__assert_fail@plt+0x1774>
   12270:	mov	r3, r0
   12274:	movw	r0, #33172	; 0x8194
   12278:	movw	r6, #33194	; 0x81aa
   1227c:	mov	r1, #33	; 0x21
   12280:	movt	r0, #2
   12284:	movt	r6, #2
   12288:	ldr	r2, [r0]
   1228c:	mov	r0, r6
   12290:	bl	11204 <strftime@plt>
   12294:	b	12b10 <__assert_fail@plt+0x178c>
   12298:	ldr	r7, [r4, #4]
   1229c:	asr	r0, r7, #31
   122a0:	add	r6, r7, r0, lsr #24
   122a4:	movw	r0, #33228	; 0x81cc
   122a8:	movt	r0, #2
   122ac:	ldr	r5, [r0]
   122b0:	cmp	r5, #0
   122b4:	bne	122e8 <__assert_fail@plt+0xf64>
   122b8:	movw	r1, #27876	; 0x6ce4
   122bc:	mov	r0, #0
   122c0:	mov	r2, #5
   122c4:	movt	r1, #1
   122c8:	bl	11144 <dcgettext@plt>
   122cc:	bl	11270 <strlen@plt>
   122d0:	add	r0, r0, #3
   122d4:	bl	158f8 <__assert_fail@plt+0x4574>
   122d8:	mov	r5, r0
   122dc:	movw	r0, #33228	; 0x81cc
   122e0:	movt	r0, #2
   122e4:	str	r5, [r0]
   122e8:	movw	r1, #27876	; 0x6ce4
   122ec:	mov	r0, #0
   122f0:	mov	r2, #5
   122f4:	asr	r6, r6, #8
   122f8:	movt	r1, #1
   122fc:	bl	11144 <dcgettext@plt>
   12300:	movw	r3, #27886	; 0x6cee
   12304:	uxtb	r1, r7
   12308:	mvn	r2, #0
   1230c:	stm	sp, {r0, r1}
   12310:	mov	r0, r5
   12314:	mov	r1, #1
   12318:	movt	r3, #1
   1231c:	bl	11294 <__sprintf_chk@plt>
   12320:	movw	r0, #33232	; 0x81d0
   12324:	movt	r0, #2
   12328:	ldr	r5, [r0]
   1232c:	cmp	r5, #0
   12330:	bne	12364 <__assert_fail@plt+0xfe0>
   12334:	movw	r1, #27892	; 0x6cf4
   12338:	mov	r0, #0
   1233c:	mov	r2, #5
   12340:	movt	r1, #1
   12344:	bl	11144 <dcgettext@plt>
   12348:	bl	11270 <strlen@plt>
   1234c:	add	r0, r0, #2
   12350:	bl	158f8 <__assert_fail@plt+0x4574>
   12354:	mov	r5, r0
   12358:	movw	r0, #33232	; 0x81d0
   1235c:	movt	r0, #2
   12360:	str	r5, [r0]
   12364:	movw	r1, #27892	; 0x6cf4
   12368:	mov	r0, #0
   1236c:	mov	r2, #5
   12370:	movt	r1, #1
   12374:	bl	11144 <dcgettext@plt>
   12378:	uxtb	r6, r6
   1237c:	movw	r3, #27898	; 0x6cfa
   12380:	mvn	r2, #0
   12384:	cmp	r6, #78	; 0x4e
   12388:	mov	r1, r6
   1238c:	movt	r3, #1
   12390:	movweq	r1, #83	; 0x53
   12394:	stm	sp, {r0, r1}
   12398:	mov	r0, r5
   1239c:	mov	r1, #1
   123a0:	bl	11294 <__sprintf_chk@plt>
   123a4:	movw	r0, #33228	; 0x81cc
   123a8:	add	r7, sp, #64	; 0x40
   123ac:	movt	r0, #2
   123b0:	ldr	r5, [r0]
   123b4:	ldr	r0, [r4, #340]	; 0x154
   123b8:	str	r0, [sp, #64]	; 0x40
   123bc:	mov	r0, r7
   123c0:	bl	1121c <localtime@plt>
   123c4:	cmp	r0, #0
   123c8:	beq	126ac <__assert_fail@plt+0x1328>
   123cc:	mov	r3, r0
   123d0:	movw	r0, #33172	; 0x8194
   123d4:	mov	r7, sl
   123d8:	mov	sl, r8
   123dc:	movw	r8, #33194	; 0x81aa
   123e0:	mov	r1, #33	; 0x21
   123e4:	movt	r0, #2
   123e8:	movt	r8, #2
   123ec:	ldr	r2, [r0]
   123f0:	mov	r0, r8
   123f4:	bl	11204 <strftime@plt>
   123f8:	mov	r0, r8
   123fc:	mov	r8, sl
   12400:	mov	sl, r7
   12404:	b	126c0 <__assert_fail@plt+0x133c>
   12408:	movw	r1, #27903	; 0x6cff
   1240c:	mov	r0, #0
   12410:	movt	r1, #1
   12414:	b	12424 <__assert_fail@plt+0x10a0>
   12418:	movw	r1, #27915	; 0x6d0b
   1241c:	mov	r0, #0
   12420:	movt	r1, #1
   12424:	mov	r2, #5
   12428:	bl	11144 <dcgettext@plt>
   1242c:	mov	r5, r0
   12430:	ldr	r0, [r4, #340]	; 0x154
   12434:	str	r0, [sp, #64]	; 0x40
   12438:	add	r0, sp, #64	; 0x40
   1243c:	bl	1121c <localtime@plt>
   12440:	cmp	r0, #0
   12444:	beq	12470 <__assert_fail@plt+0x10ec>
   12448:	mov	r3, r0
   1244c:	movw	r0, #33172	; 0x8194
   12450:	movw	r6, #33194	; 0x81aa
   12454:	mov	r1, #33	; 0x21
   12458:	movt	r0, #2
   1245c:	movt	r6, #2
   12460:	ldr	r2, [r0]
   12464:	mov	r0, r6
   12468:	bl	11204 <strftime@plt>
   1246c:	b	12488 <__assert_fail@plt+0x1104>
   12470:	ldr	r0, [sp, #64]	; 0x40
   12474:	movw	r2, #33194	; 0x81aa
   12478:	movt	r2, #2
   1247c:	asr	r1, r0, #31
   12480:	bl	131d8 <__assert_fail@plt+0x1e54>
   12484:	mov	r6, r0
   12488:	movw	r1, #27523	; 0x6b83
   1248c:	mvn	r0, #0
   12490:	mov	r2, #32
   12494:	mvn	r3, #0
   12498:	stm	sp, {r5, r6}
   1249c:	movt	r1, #1
   124a0:	str	r1, [sp, #8]
   124a4:	str	r1, [sp, #12]
   124a8:	str	r1, [sp, #16]
   124ac:	str	r1, [sp, #20]
   124b0:	b	12c60 <__assert_fail@plt+0x18dc>
   124b4:	mov	r8, sl
   124b8:	movw	sl, #27928	; 0x6d18
   124bc:	mov	r0, #0
   124c0:	mov	r2, #5
   124c4:	mov	r5, #0
   124c8:	movt	sl, #1
   124cc:	mov	r1, sl
   124d0:	bl	11144 <dcgettext@plt>
   124d4:	bl	11270 <strlen@plt>
   124d8:	add	r0, r0, #5
   124dc:	bl	158f8 <__assert_fail@plt+0x4574>
   124e0:	mov	r6, r0
   124e4:	mov	r0, #0
   124e8:	mov	r1, sl
   124ec:	mov	r2, #5
   124f0:	bl	11144 <dcgettext@plt>
   124f4:	mov	r1, r0
   124f8:	mov	r0, r6
   124fc:	bl	11138 <stpcpy@plt>
   12500:	add	r1, r4, #44	; 0x2c
   12504:	add	r2, r4, r5
   12508:	ldrb	r2, [r2, #40]	; 0x28
   1250c:	cmp	r2, #0
   12510:	beq	1252c <__assert_fail@plt+0x11a8>
   12514:	strb	r2, [r0, r5]
   12518:	add	r5, r5, #1
   1251c:	add	r2, r4, r5
   12520:	add	r2, r2, #40	; 0x28
   12524:	cmp	r2, r1
   12528:	bcc	12504 <__assert_fail@plt+0x1180>
   1252c:	add	r0, r0, r5
   12530:	mov	r1, #0
   12534:	movw	r3, #27748	; 0x6c64
   12538:	mov	r2, #12
   1253c:	strb	r1, [r0]
   12540:	mov	r1, #1
   12544:	movt	r3, #1
   12548:	ldr	r0, [r4, #4]
   1254c:	str	r0, [sp]
   12550:	sub	r0, fp, #196	; 0xc4
   12554:	bl	11294 <__sprintf_chk@plt>
   12558:	ldr	r0, [r4, #340]	; 0x154
   1255c:	add	r5, r4, #8
   12560:	str	r0, [sp, #64]	; 0x40
   12564:	add	r0, sp, #64	; 0x40
   12568:	bl	1121c <localtime@plt>
   1256c:	cmp	r0, #0
   12570:	mov	sl, r8
   12574:	beq	127fc <__assert_fail@plt+0x1478>
   12578:	mov	r3, r0
   1257c:	movw	r0, #33172	; 0x8194
   12580:	movw	r8, #33194	; 0x81aa
   12584:	mov	r1, #33	; 0x21
   12588:	movt	r0, #2
   1258c:	movt	r8, #2
   12590:	ldr	r2, [r0]
   12594:	mov	r0, r8
   12598:	bl	11204 <strftime@plt>
   1259c:	mov	r0, r8
   125a0:	movw	r8, #33160	; 0x8188
   125a4:	movt	r8, #2
   125a8:	mov	r7, r8
   125ac:	b	12810 <__assert_fail@plt+0x148c>
   125b0:	movw	r7, #27928	; 0x6d18
   125b4:	mov	r0, #0
   125b8:	mov	r2, #5
   125bc:	mov	r5, #0
   125c0:	movt	r7, #1
   125c4:	mov	r1, r7
   125c8:	bl	11144 <dcgettext@plt>
   125cc:	bl	11270 <strlen@plt>
   125d0:	add	r0, r0, #5
   125d4:	bl	158f8 <__assert_fail@plt+0x4574>
   125d8:	mov	r6, r0
   125dc:	mov	r0, #0
   125e0:	mov	r1, r7
   125e4:	mov	r2, #5
   125e8:	bl	11144 <dcgettext@plt>
   125ec:	mov	r1, r0
   125f0:	mov	r0, r6
   125f4:	bl	11138 <stpcpy@plt>
   125f8:	add	r1, r4, #44	; 0x2c
   125fc:	add	r2, r4, r5
   12600:	ldrb	r2, [r2, #40]	; 0x28
   12604:	cmp	r2, #0
   12608:	beq	12624 <__assert_fail@plt+0x12a0>
   1260c:	strb	r2, [r0, r5]
   12610:	add	r5, r5, #1
   12614:	add	r2, r4, r5
   12618:	add	r2, r2, #40	; 0x28
   1261c:	cmp	r2, r1
   12620:	bcc	125fc <__assert_fail@plt+0x1278>
   12624:	add	r0, r0, r5
   12628:	mov	r1, #0
   1262c:	movw	r3, #27748	; 0x6c64
   12630:	mov	r2, #12
   12634:	strb	r1, [r0]
   12638:	mov	r1, #1
   1263c:	movt	r3, #1
   12640:	ldr	r0, [r4, #4]
   12644:	str	r0, [sp]
   12648:	sub	r0, fp, #196	; 0xc4
   1264c:	bl	11294 <__sprintf_chk@plt>
   12650:	movw	r1, #27932	; 0x6d1c
   12654:	mov	r0, #0
   12658:	mov	r2, #5
   1265c:	movt	r1, #1
   12660:	bl	11144 <dcgettext@plt>
   12664:	mov	r8, r0
   12668:	ldr	r0, [r4, #340]	; 0x154
   1266c:	add	r7, r4, #8
   12670:	str	r0, [sp, #64]	; 0x40
   12674:	add	r0, sp, #64	; 0x40
   12678:	bl	1121c <localtime@plt>
   1267c:	cmp	r0, #0
   12680:	beq	12a48 <__assert_fail@plt+0x16c4>
   12684:	mov	r3, r0
   12688:	movw	r0, #33172	; 0x8194
   1268c:	movw	r5, #33194	; 0x81aa
   12690:	mov	r1, #33	; 0x21
   12694:	movt	r0, #2
   12698:	movt	r5, #2
   1269c:	ldr	r2, [r0]
   126a0:	mov	r0, r5
   126a4:	bl	11204 <strftime@plt>
   126a8:	b	12a60 <__assert_fail@plt+0x16dc>
   126ac:	ldr	r0, [sp, #64]	; 0x40
   126b0:	movw	r2, #33194	; 0x81aa
   126b4:	movt	r2, #2
   126b8:	asr	r1, r0, #31
   126bc:	bl	131d8 <__assert_fail@plt+0x1e54>
   126c0:	movw	r1, #33232	; 0x81d0
   126c4:	sub	r2, r6, #32
   126c8:	str	r5, [sp]
   126cc:	movt	r1, #2
   126d0:	cmp	r2, #95	; 0x5f
   126d4:	mov	r2, #32
   126d8:	ldr	r3, [r1]
   126dc:	movw	r1, #27523	; 0x6b83
   126e0:	movt	r1, #1
   126e4:	stmib	sp, {r0, r1}
   126e8:	mvn	r0, #0
   126ec:	str	r1, [sp, #12]
   126f0:	str	r1, [sp, #20]
   126f4:	movcs	r3, r1
   126f8:	str	r3, [sp, #16]
   126fc:	mvn	r3, #0
   12700:	bl	12ce4 <__assert_fail@plt+0x1960>
   12704:	movw	r7, #33160	; 0x8188
   12708:	movt	r7, #2
   1270c:	b	12c64 <__assert_fail@plt+0x18e0>
   12710:	ldrb	r0, [fp, #-120]	; 0xffffff88
   12714:	ldr	r5, [fp, #-64]	; 0xffffffc0
   12718:	mov	r1, #43	; 0x2b
   1271c:	tst	r0, #16
   12720:	movweq	r1, #45	; 0x2d
   12724:	cmp	r5, #0
   12728:	beq	1202c <__assert_fail@plt+0xca8>
   1272c:	movw	r0, #33052	; 0x811c
   12730:	str	r1, [sp, #40]	; 0x28
   12734:	movt	r0, #2
   12738:	ldr	r0, [r0]
   1273c:	cmp	r0, #-2147483648	; 0x80000000
   12740:	bne	12750 <__assert_fail@plt+0x13cc>
   12744:	movw	r0, #33052	; 0x811c
   12748:	movt	r0, #2
   1274c:	bl	11120 <time@plt>
   12750:	ldr	r0, [sp, #52]	; 0x34
   12754:	cmp	r5, r0
   12758:	ble	12854 <__assert_fail@plt+0x14d0>
   1275c:	movw	r0, #33052	; 0x811c
   12760:	movt	r0, #2
   12764:	ldr	r0, [r0]
   12768:	cmp	r0, r5
   1276c:	blt	12854 <__assert_fail@plt+0x14d0>
   12770:	movw	r1, #44672	; 0xae80
   12774:	movt	r1, #65534	; 0xfffe
   12778:	add	r1, r0, r1
   1277c:	cmp	r1, r5
   12780:	bge	12854 <__assert_fail@plt+0x14d0>
   12784:	sub	r1, r0, r5
   12788:	movw	r0, #27774	; 0x6c7e
   1278c:	cmp	r1, #60	; 0x3c
   12790:	movt	r0, #1
   12794:	blt	12868 <__assert_fail@plt+0x14e4>
   12798:	movw	r0, #20864	; 0x5180
   1279c:	movt	r0, #1
   127a0:	cmp	r1, r0
   127a4:	bge	12cc4 <__assert_fail@plt+0x1940>
   127a8:	movw	r0, #46021	; 0xb3c5
   127ac:	movw	r5, #33188	; 0x81a4
   127b0:	movw	r3, #27860	; 0x6cd4
   127b4:	movt	r0, #37282	; 0x91a2
   127b8:	movt	r5, #2
   127bc:	movt	r3, #1
   127c0:	umull	r0, r2, r1, r0
   127c4:	lsr	r0, r2, #11
   127c8:	mov	r2, #3600	; 0xe10
   127cc:	mls	r1, r0, r2, r1
   127d0:	movw	r2, #34953	; 0x8889
   127d4:	movt	r2, #34952	; 0x8888
   127d8:	umull	r1, r2, r1, r2
   127dc:	lsr	r1, r2, #5
   127e0:	mov	r2, #6
   127e4:	stm	sp, {r0, r1}
   127e8:	mov	r0, r5
   127ec:	mov	r1, #1
   127f0:	bl	11294 <__sprintf_chk@plt>
   127f4:	mov	r0, r5
   127f8:	b	12868 <__assert_fail@plt+0x14e4>
   127fc:	ldr	r0, [sp, #64]	; 0x40
   12800:	movw	r2, #33194	; 0x81aa
   12804:	movt	r2, #2
   12808:	asr	r1, r0, #31
   1280c:	bl	131d8 <__assert_fail@plt+0x1e54>
   12810:	ldr	r8, [sp, #48]	; 0x30
   12814:	movw	r1, #27523	; 0x6b83
   12818:	str	r0, [sp, #4]
   1281c:	sub	r0, fp, #196	; 0xc4
   12820:	mov	r2, #32
   12824:	mov	r3, #32
   12828:	str	r5, [sp]
   1282c:	str	r6, [sp, #16]
   12830:	movt	r1, #1
   12834:	str	r0, [sp, #12]
   12838:	mvn	r0, #0
   1283c:	str	r1, [sp, #8]
   12840:	str	r1, [sp, #20]
   12844:	bl	12ce4 <__assert_fail@plt+0x1960>
   12848:	mov	r0, r6
   1284c:	bl	1314c <__assert_fail@plt+0x1dc8>
   12850:	b	12c64 <__assert_fail@plt+0x18e0>
   12854:	movw	r1, #27870	; 0x6cde
   12858:	mov	r0, #0
   1285c:	mov	r2, #5
   12860:	movt	r1, #1
   12864:	bl	11144 <dcgettext@plt>
   12868:	movw	r3, #27752	; 0x6c68
   1286c:	mov	r1, #6
   12870:	str	r0, [sp, #4]
   12874:	sub	r0, fp, #143	; 0x8f
   12878:	mov	r2, #7
   1287c:	str	r1, [sp]
   12880:	mov	r1, #1
   12884:	movt	r3, #1
   12888:	bl	11294 <__sprintf_chk@plt>
   1288c:	ldrb	r1, [r4, #76]	; 0x4c
   12890:	cmp	r1, #0
   12894:	beq	129a4 <__assert_fail@plt+0x1620>
   12898:	add	r7, r4, #332	; 0x14c
   1289c:	mov	r3, #0
   128a0:	add	r0, sp, #64	; 0x40
   128a4:	str	r6, [sp, #32]
   128a8:	strb	r1, [r0, r3]
   128ac:	add	r1, r4, r3
   128b0:	mov	r2, r3
   128b4:	add	r1, r1, #77	; 0x4d
   128b8:	cmp	r1, r7
   128bc:	bcs	128d0 <__assert_fail@plt+0x154c>
   128c0:	ldrb	r1, [r1]
   128c4:	add	r3, r2, #1
   128c8:	cmp	r1, #0
   128cc:	bne	128a8 <__assert_fail@plt+0x1524>
   128d0:	add	r1, r0, r2
   128d4:	mov	sl, #0
   128d8:	strb	sl, [r1, #1]
   128dc:	mov	r1, #58	; 0x3a
   128e0:	bl	1127c <strchr@plt>
   128e4:	cmp	r0, #0
   128e8:	mov	r7, #0
   128ec:	movw	r5, #33184	; 0x81a0
   128f0:	movne	r1, #0
   128f4:	movt	r5, #2
   128f8:	strbne	r1, [r0], #1
   128fc:	movne	r7, r0
   12900:	ldrb	r0, [sp, #64]	; 0x40
   12904:	cmp	r0, #0
   12908:	beq	1292c <__assert_fail@plt+0x15a8>
   1290c:	movw	r0, #33170	; 0x8192
   12910:	movt	r0, #2
   12914:	ldrb	r0, [r0]
   12918:	cmp	r0, #1
   1291c:	bne	1292c <__assert_fail@plt+0x15a8>
   12920:	add	r0, sp, #64	; 0x40
   12924:	bl	12f08 <__assert_fail@plt+0x1b84>
   12928:	mov	sl, r0
   1292c:	cmp	sl, #0
   12930:	add	r0, sp, #64	; 0x40
   12934:	ldr	r5, [r5]
   12938:	str	sl, [sp, #36]	; 0x24
   1293c:	moveq	sl, r0
   12940:	mov	r0, sl
   12944:	bl	11270 <strlen@plt>
   12948:	mov	r8, r0
   1294c:	cmp	r7, #0
   12950:	beq	129c8 <__assert_fail@plt+0x1644>
   12954:	mov	r0, r7
   12958:	bl	11270 <strlen@plt>
   1295c:	ldr	r6, [sp, #32]
   12960:	add	r0, r8, r0
   12964:	add	r0, r0, #4
   12968:	cmp	r5, r0
   1296c:	bcs	12a0c <__assert_fail@plt+0x1688>
   12970:	movw	r1, #33184	; 0x81a0
   12974:	movt	r1, #2
   12978:	str	r0, [r1]
   1297c:	movw	r0, #33180	; 0x819c
   12980:	mov	r5, r1
   12984:	movt	r0, #2
   12988:	mov	r8, r0
   1298c:	ldr	r0, [r0]
   12990:	bl	1314c <__assert_fail@plt+0x1dc8>
   12994:	ldr	r0, [r5]
   12998:	bl	158f8 <__assert_fail@plt+0x4574>
   1299c:	str	r0, [r8]
   129a0:	b	12a18 <__assert_fail@plt+0x1694>
   129a4:	movw	r5, #33184	; 0x81a0
   129a8:	movt	r5, #2
   129ac:	ldr	r0, [r5]
   129b0:	cmp	r0, #0
   129b4:	beq	12ab8 <__assert_fail@plt+0x1734>
   129b8:	movw	r0, #33180	; 0x819c
   129bc:	movt	r0, #2
   129c0:	ldr	r0, [r0]
   129c4:	b	12aec <__assert_fail@plt+0x1768>
   129c8:	ldr	r6, [sp, #32]
   129cc:	add	r0, r8, #3
   129d0:	cmp	r5, r0
   129d4:	bcs	12b6c <__assert_fail@plt+0x17e8>
   129d8:	movw	r1, #33184	; 0x81a0
   129dc:	movt	r1, #2
   129e0:	str	r0, [r1]
   129e4:	movw	r0, #33180	; 0x819c
   129e8:	mov	r5, r1
   129ec:	movt	r0, #2
   129f0:	mov	r7, r0
   129f4:	ldr	r0, [r0]
   129f8:	bl	1314c <__assert_fail@plt+0x1dc8>
   129fc:	ldr	r0, [r5]
   12a00:	bl	158f8 <__assert_fail@plt+0x4574>
   12a04:	str	r0, [r7]
   12a08:	b	12b78 <__assert_fail@plt+0x17f4>
   12a0c:	movw	r0, #33180	; 0x819c
   12a10:	movt	r0, #2
   12a14:	ldr	r0, [r0]
   12a18:	ldr	r5, [sp, #48]	; 0x30
   12a1c:	movw	r3, #27761	; 0x6c71
   12a20:	movw	r8, #33160	; 0x8188
   12a24:	mov	r1, #1
   12a28:	mvn	r2, #0
   12a2c:	str	sl, [sp]
   12a30:	str	r7, [sp, #4]
   12a34:	movt	r3, #1
   12a38:	movt	r8, #2
   12a3c:	bl	11294 <__sprintf_chk@plt>
   12a40:	mov	r7, r8
   12a44:	b	12ba0 <__assert_fail@plt+0x181c>
   12a48:	ldr	r0, [sp, #64]	; 0x40
   12a4c:	movw	r2, #33194	; 0x81aa
   12a50:	movt	r2, #2
   12a54:	asr	r1, r0, #31
   12a58:	bl	131d8 <__assert_fail@plt+0x1e54>
   12a5c:	mov	r5, r0
   12a60:	movw	r0, #27523	; 0x6b83
   12a64:	mov	r2, #32
   12a68:	mov	r3, #32
   12a6c:	str	r7, [sp]
   12a70:	str	r5, [sp, #4]
   12a74:	str	r6, [sp, #16]
   12a78:	movt	r0, #1
   12a7c:	mov	r1, r0
   12a80:	str	r0, [sp, #8]
   12a84:	sub	r0, fp, #196	; 0xc4
   12a88:	str	r0, [sp, #12]
   12a8c:	str	r1, [sp, #20]
   12a90:	mvn	r0, #0
   12a94:	mov	r1, r8
   12a98:	bl	12ce4 <__assert_fail@plt+0x1960>
   12a9c:	mov	r0, r6
   12aa0:	bl	1314c <__assert_fail@plt+0x1dc8>
   12aa4:	movw	r8, #33160	; 0x8188
   12aa8:	movt	r8, #2
   12aac:	mov	r7, r8
   12ab0:	ldr	r8, [sp, #48]	; 0x30
   12ab4:	b	12c64 <__assert_fail@plt+0x18e0>
   12ab8:	mov	r0, #1
   12abc:	mov	r8, r7
   12ac0:	str	r0, [r5]
   12ac4:	movw	r0, #33180	; 0x819c
   12ac8:	movt	r0, #2
   12acc:	mov	r7, r0
   12ad0:	ldr	r0, [r0]
   12ad4:	bl	1314c <__assert_fail@plt+0x1dc8>
   12ad8:	ldr	r0, [r5]
   12adc:	bl	158f8 <__assert_fail@plt+0x4574>
   12ae0:	str	r0, [r7]
   12ae4:	mov	r7, r8
   12ae8:	ldr	r8, [sp, #48]	; 0x30
   12aec:	mov	r1, #0
   12af0:	strb	r1, [r0]
   12af4:	b	12bc0 <__assert_fail@plt+0x183c>
   12af8:	ldr	r0, [sp, #64]	; 0x40
   12afc:	movw	r2, #33194	; 0x81aa
   12b00:	movt	r2, #2
   12b04:	asr	r1, r0, #31
   12b08:	bl	131d8 <__assert_fail@plt+0x1e54>
   12b0c:	mov	r6, r0
   12b10:	movw	r1, #33236	; 0x81d4
   12b14:	sub	r0, fp, #196	; 0xc4
   12b18:	mov	r3, #32
   12b1c:	movt	r1, #2
   12b20:	ldr	r2, [r1]
   12b24:	movw	r1, #27523	; 0x6b83
   12b28:	stm	sp, {r5, r6}
   12b2c:	str	r0, [sp, #12]
   12b30:	mvn	r0, #0
   12b34:	str	r8, [sp, #16]
   12b38:	movt	r1, #1
   12b3c:	str	r1, [sp, #8]
   12b40:	str	r2, [sp, #20]
   12b44:	mov	r2, #32
   12b48:	bl	12ce4 <__assert_fail@plt+0x1960>
   12b4c:	mov	r0, r8
   12b50:	bl	1314c <__assert_fail@plt+0x1dc8>
   12b54:	ldr	r0, [sp, #48]	; 0x30
   12b58:	movw	r8, #33160	; 0x8188
   12b5c:	movt	r8, #2
   12b60:	mov	r7, r8
   12b64:	mov	r8, r0
   12b68:	b	12c64 <__assert_fail@plt+0x18e0>
   12b6c:	movw	r0, #33180	; 0x819c
   12b70:	movt	r0, #2
   12b74:	ldr	r0, [r0]
   12b78:	ldr	r5, [sp, #48]	; 0x30
   12b7c:	movw	r8, #33160	; 0x8188
   12b80:	movw	r3, #27769	; 0x6c79
   12b84:	mov	r1, #1
   12b88:	mvn	r2, #0
   12b8c:	str	sl, [sp]
   12b90:	movt	r8, #2
   12b94:	movt	r3, #1
   12b98:	mov	r7, r8
   12b9c:	bl	11294 <__sprintf_chk@plt>
   12ba0:	ldr	r0, [sp, #36]	; 0x24
   12ba4:	cmp	r0, #0
   12ba8:	beq	12bb4 <__assert_fail@plt+0x1830>
   12bac:	mov	r0, sl
   12bb0:	bl	1314c <__assert_fail@plt+0x1dc8>
   12bb4:	movw	sl, #33167	; 0x818f
   12bb8:	mov	r8, r5
   12bbc:	movt	sl, #2
   12bc0:	ldr	r0, [r4, #340]	; 0x154
   12bc4:	str	r0, [sp, #64]	; 0x40
   12bc8:	add	r0, sp, #64	; 0x40
   12bcc:	bl	1121c <localtime@plt>
   12bd0:	cmp	r0, #0
   12bd4:	beq	12c00 <__assert_fail@plt+0x187c>
   12bd8:	mov	r3, r0
   12bdc:	movw	r0, #33172	; 0x8194
   12be0:	movw	r5, #33194	; 0x81aa
   12be4:	mov	r1, #33	; 0x21
   12be8:	movt	r0, #2
   12bec:	movt	r5, #2
   12bf0:	ldr	r2, [r0]
   12bf4:	mov	r0, r5
   12bf8:	bl	11204 <strftime@plt>
   12bfc:	b	12c18 <__assert_fail@plt+0x1894>
   12c00:	ldr	r0, [sp, #64]	; 0x40
   12c04:	movw	r2, #33194	; 0x81aa
   12c08:	movt	r2, #2
   12c0c:	asr	r1, r0, #31
   12c10:	bl	131d8 <__assert_fail@plt+0x1e54>
   12c14:	mov	r5, r0
   12c18:	movw	r1, #33180	; 0x819c
   12c1c:	ldr	r3, [sp, #44]	; 0x2c
   12c20:	movw	r2, #27523	; 0x6b83
   12c24:	sub	r0, fp, #143	; 0x8f
   12c28:	movt	r1, #2
   12c2c:	movt	r2, #1
   12c30:	ldr	r1, [r1]
   12c34:	stm	sp, {r3, r5}
   12c38:	str	r0, [sp, #8]
   12c3c:	sub	r0, fp, #196	; 0xc4
   12c40:	add	r3, sp, #12
   12c44:	cmp	r1, #0
   12c48:	moveq	r1, r2
   12c4c:	stm	r3, {r0, r1, r2}
   12c50:	mov	r0, #32
   12c54:	mov	r1, r6
   12c58:	mov	r3, #32
   12c5c:	ldr	r2, [sp, #40]	; 0x28
   12c60:	bl	12ce4 <__assert_fail@plt+0x1960>
   12c64:	ldrh	r0, [r4]
   12c68:	sub	r9, r9, #1
   12c6c:	cmp	r0, #2
   12c70:	ldreq	r0, [r4, #340]	; 0x154
   12c74:	add	r4, r4, #384	; 0x180
   12c78:	streq	r0, [sp, #52]	; 0x34
   12c7c:	cmp	r9, #0
   12c80:	bne	11f18 <__assert_fail@plt+0xb94>
   12c84:	ldr	r0, [sp, #56]	; 0x38
   12c88:	bl	1314c <__assert_fail@plt+0x1dc8>
   12c8c:	sub	sp, fp, #28
   12c90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c94:	bl	11288 <__errno_location@plt>
   12c98:	ldr	r5, [r0]
   12c9c:	mov	r0, #0
   12ca0:	mov	r1, #3
   12ca4:	mov	r2, r4
   12ca8:	bl	14c20 <__assert_fail@plt+0x389c>
   12cac:	movw	r2, #28335	; 0x6eaf
   12cb0:	mov	r3, r0
   12cb4:	mov	r0, #1
   12cb8:	mov	r1, r5
   12cbc:	movt	r2, #1
   12cc0:	bl	111c8 <error@plt>
   12cc4:	movw	r0, #27780	; 0x6c84
   12cc8:	movw	r1, #27810	; 0x6ca2
   12ccc:	movw	r3, #27820	; 0x6cac
   12cd0:	mov	r2, #205	; 0xcd
   12cd4:	movt	r0, #1
   12cd8:	movt	r1, #1
   12cdc:	movt	r3, #1
   12ce0:	bl	11384 <__assert_fail@plt>
   12ce4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ce8:	add	fp, sp, #28
   12cec:	sub	sp, sp, #68	; 0x44
   12cf0:	mov	r5, r0
   12cf4:	movw	r0, #33164	; 0x818c
   12cf8:	movw	r8, #33048	; 0x8118
   12cfc:	mov	r9, r3
   12d00:	mov	r6, r1
   12d04:	movt	r0, #2
   12d08:	movt	r8, #2
   12d0c:	ldrb	r0, [r0]
   12d10:	strb	r2, [r8, #1]
   12d14:	cmp	r0, #1
   12d18:	bne	12d64 <__assert_fail@plt+0x19e0>
   12d1c:	movw	r0, #33169	; 0x8191
   12d20:	movt	r0, #2
   12d24:	ldrb	r0, [r0]
   12d28:	cmp	r0, #0
   12d2c:	bne	12d64 <__assert_fail@plt+0x19e0>
   12d30:	ldr	r4, [fp, #16]
   12d34:	mov	r0, r4
   12d38:	bl	11270 <strlen@plt>
   12d3c:	cmp	r0, #6
   12d40:	bhi	12d64 <__assert_fail@plt+0x19e0>
   12d44:	movw	r3, #27691	; 0x6c2b
   12d48:	sub	r0, fp, #40	; 0x28
   12d4c:	mov	r1, #1
   12d50:	mov	r2, #8
   12d54:	str	r4, [sp]
   12d58:	movt	r3, #1
   12d5c:	bl	11294 <__sprintf_chk@plt>
   12d60:	b	12d6c <__assert_fail@plt+0x19e8>
   12d64:	mov	r0, #0
   12d68:	strb	r0, [fp, #-40]	; 0xffffffd8
   12d6c:	movw	r0, #33169	; 0x8191
   12d70:	movt	r0, #2
   12d74:	ldrb	r0, [r0]
   12d78:	cmp	r0, #0
   12d7c:	bne	12db4 <__assert_fail@plt+0x1a30>
   12d80:	ldr	r4, [fp, #20]
   12d84:	mov	r0, r4
   12d88:	bl	11270 <strlen@plt>
   12d8c:	cmp	r0, #11
   12d90:	bhi	12db4 <__assert_fail@plt+0x1a30>
   12d94:	movw	r3, #27697	; 0x6c31
   12d98:	add	r0, sp, #43	; 0x2b
   12d9c:	mov	r1, #1
   12da0:	mov	r2, #13
   12da4:	str	r4, [sp]
   12da8:	movt	r3, #1
   12dac:	bl	11294 <__sprintf_chk@plt>
   12db0:	b	12dbc <__assert_fail@plt+0x1a38>
   12db4:	mov	r0, #0
   12db8:	strb	r0, [sp, #43]	; 0x2b
   12dbc:	movw	sl, #33165	; 0x818d
   12dc0:	ldr	r4, [fp, #28]
   12dc4:	mov	r0, #1
   12dc8:	movt	sl, #2
   12dcc:	ldrb	r1, [sl]
   12dd0:	cmp	r1, #1
   12dd4:	bne	12df0 <__assert_fail@plt+0x1a6c>
   12dd8:	mov	r0, r4
   12ddc:	bl	11270 <strlen@plt>
   12de0:	mov	r1, r0
   12de4:	add	r0, r0, #2
   12de8:	cmp	r1, #12
   12dec:	movwcc	r0, #14
   12df0:	bl	158f8 <__assert_fail@plt+0x4574>
   12df4:	mov	r7, r0
   12df8:	ldrb	r0, [sl]
   12dfc:	cmp	r0, #1
   12e00:	bne	12e24 <__assert_fail@plt+0x1aa0>
   12e04:	movw	r3, #27703	; 0x6c37
   12e08:	mov	r0, r7
   12e0c:	mov	r1, #1
   12e10:	mvn	r2, #0
   12e14:	str	r4, [sp]
   12e18:	movt	r3, #1
   12e1c:	bl	11294 <__sprintf_chk@plt>
   12e20:	b	12e2c <__assert_fail@plt+0x1aa8>
   12e24:	mov	r0, #0
   12e28:	strb	r0, [r7]
   12e2c:	movw	r0, #33163	; 0x818b
   12e30:	movw	r4, #27743	; 0x6c5f
   12e34:	cmp	r6, #0
   12e38:	ldr	r2, [fp, #24]
   12e3c:	movw	r1, #33176	; 0x8198
   12e40:	str	r7, [sp, #36]	; 0x24
   12e44:	mov	r3, r5
   12e48:	sub	r5, fp, #40	; 0x28
   12e4c:	movt	r0, #2
   12e50:	movt	r4, #1
   12e54:	movt	r1, #2
   12e58:	ldrb	r0, [r0]
   12e5c:	movne	r4, r6
   12e60:	movw	r6, #27523	; 0x6b83
   12e64:	ldr	r1, [r1]
   12e68:	movt	r6, #1
   12e6c:	str	r2, [sp, #32]
   12e70:	add	r2, sp, #43	; 0x2b
   12e74:	cmp	r0, #0
   12e78:	ldr	r0, [fp, #8]
   12e7c:	movne	r6, r8
   12e80:	stm	sp, {r4, r6, r9}
   12e84:	str	r2, [sp, #28]
   12e88:	movw	r2, #27710	; 0x6c3e
   12e8c:	str	r1, [sp, #16]
   12e90:	mov	r1, #1
   12e94:	str	r5, [sp, #24]
   12e98:	movt	r2, #1
   12e9c:	str	r0, [sp, #12]
   12ea0:	ldr	r0, [fp, #12]
   12ea4:	str	r0, [sp, #20]
   12ea8:	sub	r0, fp, #32
   12eac:	bl	111d4 <__asprintf_chk@plt>
   12eb0:	cmn	r0, #1
   12eb4:	beq	12f04 <__assert_fail@plt+0x1b80>
   12eb8:	ldr	r4, [fp, #-32]	; 0xffffffe0
   12ebc:	mov	r0, r4
   12ec0:	bl	11270 <strlen@plt>
   12ec4:	add	r0, r4, r0
   12ec8:	add	r0, r0, #1
   12ecc:	ldrb	r1, [r0, #-2]
   12ed0:	sub	r0, r0, #1
   12ed4:	cmp	r1, #32
   12ed8:	beq	12ecc <__assert_fail@plt+0x1b48>
   12edc:	mov	r1, #0
   12ee0:	strb	r1, [r0]
   12ee4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ee8:	bl	111e0 <puts@plt>
   12eec:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12ef0:	bl	1314c <__assert_fail@plt+0x1dc8>
   12ef4:	mov	r0, r7
   12ef8:	bl	1314c <__assert_fail@plt+0x1dc8>
   12efc:	sub	sp, fp, #28
   12f00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f04:	bl	15e58 <__assert_fail@plt+0x4ad4>
   12f08:	push	{r4, r5, fp, lr}
   12f0c:	add	fp, sp, #8
   12f10:	sub	sp, sp, #8
   12f14:	movw	r2, #33244	; 0x81dc
   12f18:	mov	r5, r0
   12f1c:	mov	r0, #2
   12f20:	mov	r4, #0
   12f24:	add	r3, sp, #4
   12f28:	mov	r1, #0
   12f2c:	movt	r2, #2
   12f30:	str	r4, [sp, #4]
   12f34:	str	r0, [r2]
   12f38:	mov	r0, r5
   12f3c:	bl	1133c <getaddrinfo@plt>
   12f40:	cmp	r0, #0
   12f44:	beq	12f58 <__assert_fail@plt+0x1bd4>
   12f48:	movw	r1, #33240	; 0x81d8
   12f4c:	movt	r1, #2
   12f50:	str	r0, [r1]
   12f54:	b	12f94 <__assert_fail@plt+0x1c10>
   12f58:	ldr	r0, [sp, #4]
   12f5c:	ldr	r0, [r0, #24]
   12f60:	cmp	r0, #0
   12f64:	movne	r5, r0
   12f68:	mov	r0, r5
   12f6c:	bl	11150 <strdup@plt>
   12f70:	mov	r4, r0
   12f74:	cmp	r0, #0
   12f78:	bne	12f8c <__assert_fail@plt+0x1c08>
   12f7c:	movw	r0, #33240	; 0x81d8
   12f80:	mvn	r1, #9
   12f84:	movt	r0, #2
   12f88:	str	r1, [r0]
   12f8c:	ldr	r0, [sp, #4]
   12f90:	bl	11330 <freeaddrinfo@plt>
   12f94:	mov	r0, r4
   12f98:	sub	sp, fp, #8
   12f9c:	pop	{r4, r5, fp, pc}
   12fa0:	push	{r4, r5, r6, sl, fp, lr}
   12fa4:	add	fp, sp, #16
   12fa8:	sub	sp, sp, #8
   12fac:	movw	r2, #33244	; 0x81dc
   12fb0:	mov	r6, r0
   12fb4:	mov	r0, #2
   12fb8:	mov	r5, r1
   12fbc:	mov	r4, #0
   12fc0:	add	r3, sp, #4
   12fc4:	mov	r1, #0
   12fc8:	movt	r2, #2
   12fcc:	str	r4, [sp, #4]
   12fd0:	str	r0, [r2]
   12fd4:	mov	r0, r6
   12fd8:	bl	1133c <getaddrinfo@plt>
   12fdc:	cmp	r0, #0
   12fe0:	beq	12ff0 <__assert_fail@plt+0x1c6c>
   12fe4:	cmp	r5, #0
   12fe8:	strne	r0, [r5]
   12fec:	b	13028 <__assert_fail@plt+0x1ca4>
   12ff0:	ldr	r0, [sp, #4]
   12ff4:	ldr	r0, [r0, #24]
   12ff8:	cmp	r0, #0
   12ffc:	movne	r6, r0
   13000:	mov	r0, r6
   13004:	bl	11150 <strdup@plt>
   13008:	mov	r4, r0
   1300c:	cmp	r5, #0
   13010:	beq	13020 <__assert_fail@plt+0x1c9c>
   13014:	cmp	r4, #0
   13018:	mvneq	r0, #9
   1301c:	streq	r0, [r5]
   13020:	ldr	r0, [sp, #4]
   13024:	bl	11330 <freeaddrinfo@plt>
   13028:	mov	r0, r4
   1302c:	sub	sp, fp, #16
   13030:	pop	{r4, r5, r6, sl, fp, pc}
   13034:	movw	r0, #33240	; 0x81d8
   13038:	movt	r0, #2
   1303c:	ldr	r0, [r0]
   13040:	b	110f0 <gai_strerror@plt>
   13044:	movw	r1, #33276	; 0x81fc
   13048:	movt	r1, #2
   1304c:	str	r0, [r1]
   13050:	bx	lr
   13054:	movw	r1, #33280	; 0x8200
   13058:	movt	r1, #2
   1305c:	strb	r0, [r1]
   13060:	bx	lr
   13064:	push	{r4, r5, r6, sl, fp, lr}
   13068:	add	fp, sp, #16
   1306c:	sub	sp, sp, #8
   13070:	movw	r0, #33148	; 0x817c
   13074:	movt	r0, #2
   13078:	ldr	r0, [r0]
   1307c:	bl	15f74 <__assert_fail@plt+0x4bf0>
   13080:	cmp	r0, #0
   13084:	beq	130ac <__assert_fail@plt+0x1d28>
   13088:	movw	r0, #33280	; 0x8200
   1308c:	movt	r0, #2
   13090:	ldrb	r0, [r0]
   13094:	cmp	r0, #0
   13098:	beq	130cc <__assert_fail@plt+0x1d48>
   1309c:	bl	11288 <__errno_location@plt>
   130a0:	ldr	r0, [r0]
   130a4:	cmp	r0, #32
   130a8:	bne	130cc <__assert_fail@plt+0x1d48>
   130ac:	movw	r0, #33144	; 0x8178
   130b0:	movt	r0, #2
   130b4:	ldr	r0, [r0]
   130b8:	bl	15f74 <__assert_fail@plt+0x4bf0>
   130bc:	cmp	r0, #0
   130c0:	subeq	sp, fp, #16
   130c4:	popeq	{r4, r5, r6, sl, fp, pc}
   130c8:	b	1313c <__assert_fail@plt+0x1db8>
   130cc:	movw	r1, #28319	; 0x6e9f
   130d0:	mov	r0, #0
   130d4:	mov	r2, #5
   130d8:	movt	r1, #1
   130dc:	bl	11144 <dcgettext@plt>
   130e0:	mov	r4, r0
   130e4:	movw	r0, #33276	; 0x81fc
   130e8:	movt	r0, #2
   130ec:	ldr	r6, [r0]
   130f0:	bl	11288 <__errno_location@plt>
   130f4:	ldr	r5, [r0]
   130f8:	cmp	r6, #0
   130fc:	bne	13118 <__assert_fail@plt+0x1d94>
   13100:	movw	r2, #28335	; 0x6eaf
   13104:	mov	r0, #0
   13108:	mov	r1, r5
   1310c:	mov	r3, r4
   13110:	movt	r2, #1
   13114:	b	13138 <__assert_fail@plt+0x1db4>
   13118:	mov	r0, r6
   1311c:	bl	14b44 <__assert_fail@plt+0x37c0>
   13120:	movw	r2, #28331	; 0x6eab
   13124:	mov	r3, r0
   13128:	str	r4, [sp]
   1312c:	mov	r0, #0
   13130:	mov	r1, r5
   13134:	movt	r2, #1
   13138:	bl	111c8 <error@plt>
   1313c:	movw	r0, #33060	; 0x8124
   13140:	movt	r0, #2
   13144:	ldr	r0, [r0]
   13148:	bl	110fc <_exit@plt>
   1314c:	push	{r4, r5, r6, sl, fp, lr}
   13150:	add	fp, sp, #16
   13154:	mov	r4, r0
   13158:	bl	11288 <__errno_location@plt>
   1315c:	ldr	r6, [r0]
   13160:	mov	r5, r0
   13164:	mov	r0, r4
   13168:	bl	110e4 <free@plt>
   1316c:	str	r6, [r5]
   13170:	pop	{r4, r5, r6, sl, fp, pc}
   13174:	push	{r4, sl, fp, lr}
   13178:	add	fp, sp, #8
   1317c:	sub	sp, sp, #264	; 0x108
   13180:	add	r1, sp, #7
   13184:	movw	r2, #257	; 0x101
   13188:	bl	1519c <__assert_fail@plt+0x3e18>
   1318c:	mov	r4, #0
   13190:	cmp	r0, #0
   13194:	bne	131cc <__assert_fail@plt+0x1e48>
   13198:	movw	r1, #28338	; 0x6eb2
   1319c:	add	r0, sp, #7
   131a0:	movt	r1, #1
   131a4:	bl	110c0 <strcmp@plt>
   131a8:	cmp	r0, #0
   131ac:	beq	131cc <__assert_fail@plt+0x1e48>
   131b0:	movw	r1, #28340	; 0x6eb4
   131b4:	add	r0, sp, #7
   131b8:	movt	r1, #1
   131bc:	bl	110c0 <strcmp@plt>
   131c0:	mov	r4, r0
   131c4:	cmp	r0, #0
   131c8:	movwne	r4, #1
   131cc:	mov	r0, r4
   131d0:	sub	sp, fp, #8
   131d4:	pop	{r4, sl, fp, pc}
   131d8:	push	{r4, r5, r6, sl, fp, lr}
   131dc:	add	fp, sp, #16
   131e0:	mov	r5, r0
   131e4:	mov	r0, #0
   131e8:	mov	r4, r1
   131ec:	add	r6, r2, #19
   131f0:	cmp	r1, #0
   131f4:	strb	r0, [r2, #20]
   131f8:	blt	13248 <__assert_fail@plt+0x1ec4>
   131fc:	mov	r0, r5
   13200:	mov	r1, r4
   13204:	mov	r2, #10
   13208:	mov	r3, #0
   1320c:	bl	16268 <__assert_fail@plt+0x4ee4>
   13210:	add	r2, r0, r0, lsl #2
   13214:	sub	r2, r5, r2, lsl #1
   13218:	add	r2, r2, #48	; 0x30
   1321c:	strb	r2, [r6], #-1
   13220:	adds	r2, r5, #9
   13224:	mov	r5, r0
   13228:	adc	r3, r4, #0
   1322c:	rsbs	r2, r2, #18
   13230:	mov	r4, r1
   13234:	rscs	r2, r3, #0
   13238:	bcc	131fc <__assert_fail@plt+0x1e78>
   1323c:	add	r6, r6, #1
   13240:	mov	r0, r6
   13244:	pop	{r4, r5, r6, sl, fp, pc}
   13248:	mov	r0, r5
   1324c:	mov	r1, r4
   13250:	mov	r2, #10
   13254:	mov	r3, #0
   13258:	bl	16268 <__assert_fail@plt+0x4ee4>
   1325c:	add	r2, r0, r0, lsl #2
   13260:	rsb	r2, r5, r2, lsl #1
   13264:	add	r2, r2, #48	; 0x30
   13268:	strb	r2, [r6], #-1
   1326c:	adds	r2, r5, #9
   13270:	mov	r5, r0
   13274:	adc	r3, r4, #0
   13278:	rsbs	r2, r2, #18
   1327c:	mov	r4, r1
   13280:	rscs	r2, r3, #0
   13284:	bcc	13248 <__assert_fail@plt+0x1ec4>
   13288:	mov	r0, #45	; 0x2d
   1328c:	strb	r0, [r6]
   13290:	mov	r0, r6
   13294:	pop	{r4, r5, r6, sl, fp, pc}
   13298:	push	{r4, r5, fp, lr}
   1329c:	add	fp, sp, #8
   132a0:	cmp	r0, #0
   132a4:	beq	13338 <__assert_fail@plt+0x1fb4>
   132a8:	mov	r1, #47	; 0x2f
   132ac:	mov	r4, r0
   132b0:	bl	11318 <strrchr@plt>
   132b4:	cmp	r0, #0
   132b8:	mov	r5, r4
   132bc:	addne	r5, r0, #1
   132c0:	sub	r0, r5, r4
   132c4:	cmp	r0, #7
   132c8:	blt	1331c <__assert_fail@plt+0x1f98>
   132cc:	movw	r1, #28402	; 0x6ef2
   132d0:	sub	r0, r5, #7
   132d4:	mov	r2, #7
   132d8:	movt	r1, #1
   132dc:	bl	11360 <strncmp@plt>
   132e0:	cmp	r0, #0
   132e4:	bne	1331c <__assert_fail@plt+0x1f98>
   132e8:	movw	r1, #28410	; 0x6efa
   132ec:	mov	r0, r5
   132f0:	mov	r2, #3
   132f4:	movt	r1, #1
   132f8:	bl	11360 <strncmp@plt>
   132fc:	cmp	r0, #0
   13300:	beq	1330c <__assert_fail@plt+0x1f88>
   13304:	mov	r4, r5
   13308:	b	1331c <__assert_fail@plt+0x1f98>
   1330c:	movw	r0, #33128	; 0x8168
   13310:	add	r4, r5, #3
   13314:	movt	r0, #2
   13318:	str	r4, [r0]
   1331c:	movw	r0, #33132	; 0x816c
   13320:	movt	r0, #2
   13324:	str	r4, [r0]
   13328:	movw	r0, #33284	; 0x8204
   1332c:	movt	r0, #2
   13330:	str	r4, [r0]
   13334:	pop	{r4, r5, fp, pc}
   13338:	movw	r0, #33144	; 0x8178
   1333c:	mov	r1, #55	; 0x37
   13340:	mov	r2, #1
   13344:	movt	r0, #2
   13348:	ldr	r3, [r0]
   1334c:	movw	r0, #28346	; 0x6eba
   13350:	movt	r0, #1
   13354:	bl	1118c <fwrite@plt>
   13358:	bl	1136c <abort@plt>
   1335c:	push	{r4, r5, r6, sl, fp, lr}
   13360:	add	fp, sp, #16
   13364:	mov	r4, r0
   13368:	movw	r0, #33288	; 0x8208
   1336c:	movt	r0, #2
   13370:	cmp	r4, #0
   13374:	moveq	r4, r0
   13378:	bl	11288 <__errno_location@plt>
   1337c:	ldr	r6, [r0]
   13380:	mov	r5, r0
   13384:	mov	r0, r4
   13388:	mov	r1, #48	; 0x30
   1338c:	bl	15d58 <__assert_fail@plt+0x49d4>
   13390:	str	r6, [r5]
   13394:	pop	{r4, r5, r6, sl, fp, pc}
   13398:	movw	r1, #33288	; 0x8208
   1339c:	cmp	r0, #0
   133a0:	movt	r1, #2
   133a4:	movne	r1, r0
   133a8:	ldr	r0, [r1]
   133ac:	bx	lr
   133b0:	movw	r2, #33288	; 0x8208
   133b4:	cmp	r0, #0
   133b8:	movt	r2, #2
   133bc:	movne	r2, r0
   133c0:	str	r1, [r2]
   133c4:	bx	lr
   133c8:	movw	r3, #33288	; 0x8208
   133cc:	cmp	r0, #0
   133d0:	movt	r3, #2
   133d4:	movne	r3, r0
   133d8:	ubfx	r0, r1, #5, #3
   133dc:	and	r1, r1, #31
   133e0:	add	r0, r3, r0, lsl #2
   133e4:	ldr	r3, [r0, #8]
   133e8:	eor	r2, r2, r3, lsr r1
   133ec:	and	r2, r2, #1
   133f0:	eor	r2, r3, r2, lsl r1
   133f4:	str	r2, [r0, #8]
   133f8:	mov	r0, #1
   133fc:	and	r0, r0, r3, lsr r1
   13400:	bx	lr
   13404:	movw	r2, #33288	; 0x8208
   13408:	cmp	r0, #0
   1340c:	movt	r2, #2
   13410:	movne	r2, r0
   13414:	ldr	r0, [r2, #4]
   13418:	str	r1, [r2, #4]
   1341c:	bx	lr
   13420:	movw	r3, #33288	; 0x8208
   13424:	cmp	r0, #0
   13428:	movt	r3, #2
   1342c:	movne	r3, r0
   13430:	cmp	r1, #0
   13434:	mov	r0, #10
   13438:	cmpne	r2, #0
   1343c:	str	r0, [r3]
   13440:	bne	13450 <__assert_fail@plt+0x20cc>
   13444:	push	{fp, lr}
   13448:	mov	fp, sp
   1344c:	bl	1136c <abort@plt>
   13450:	str	r1, [r3, #40]	; 0x28
   13454:	str	r2, [r3, #44]	; 0x2c
   13458:	bx	lr
   1345c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13460:	add	fp, sp, #28
   13464:	sub	sp, sp, #20
   13468:	mov	r7, r0
   1346c:	ldr	r0, [fp, #8]
   13470:	movw	r5, #33288	; 0x8208
   13474:	mov	r8, r3
   13478:	mov	r9, r2
   1347c:	mov	sl, r1
   13480:	movt	r5, #2
   13484:	cmp	r0, #0
   13488:	movne	r5, r0
   1348c:	bl	11288 <__errno_location@plt>
   13490:	mov	r4, r0
   13494:	ldm	r5, {r0, r1}
   13498:	ldr	r2, [r5, #40]	; 0x28
   1349c:	ldr	r3, [r5, #44]	; 0x2c
   134a0:	add	r5, r5, #8
   134a4:	ldr	r6, [r4]
   134a8:	stm	sp, {r0, r1, r5}
   134ac:	str	r2, [sp, #12]
   134b0:	str	r3, [sp, #16]
   134b4:	mov	r0, r7
   134b8:	mov	r1, sl
   134bc:	mov	r2, r9
   134c0:	mov	r3, r8
   134c4:	bl	134d4 <__assert_fail@plt+0x2150>
   134c8:	str	r6, [r4]
   134cc:	sub	sp, fp, #28
   134d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	add	fp, sp, #28
   134dc:	sub	sp, sp, #156	; 0x9c
   134e0:	str	r0, [sp, #80]	; 0x50
   134e4:	ldr	r0, [fp, #12]
   134e8:	mov	r6, r1
   134ec:	mov	r9, r3
   134f0:	str	r2, [fp, #-84]	; 0xffffffac
   134f4:	and	r1, r0, #4
   134f8:	str	r1, [sp, #32]
   134fc:	and	r1, r0, #1
   13500:	str	r1, [sp, #36]	; 0x24
   13504:	ubfx	r4, r0, #1, #1
   13508:	bl	111a4 <__ctype_get_mb_cur_max@plt>
   1350c:	str	r0, [sp, #40]	; 0x28
   13510:	ldr	r0, [fp, #24]
   13514:	ldr	r7, [fp, #8]
   13518:	mov	r1, #0
   1351c:	mov	r5, #1
   13520:	str	r1, [fp, #-56]	; 0xffffffc8
   13524:	mov	r1, #0
   13528:	str	r1, [sp, #60]	; 0x3c
   1352c:	str	r0, [sp, #76]	; 0x4c
   13530:	ldr	r0, [fp, #20]
   13534:	str	r0, [sp, #72]	; 0x48
   13538:	mov	r0, #0
   1353c:	str	r0, [sp, #56]	; 0x38
   13540:	mov	r0, #0
   13544:	str	r0, [sp, #92]	; 0x5c
   13548:	mov	r0, #0
   1354c:	str	r0, [fp, #-76]	; 0xffffffb4
   13550:	mov	r0, #0
   13554:	cmp	r7, #10
   13558:	bhi	144d8 <__assert_fail@plt+0x3154>
   1355c:	add	r1, pc, #28
   13560:	mov	sl, r6
   13564:	ldr	r6, [sp, #80]	; 0x50
   13568:	ldr	ip, [fp, #-84]	; 0xffffffac
   1356c:	mov	r8, #0
   13570:	mov	r2, #1
   13574:	mov	r3, #0
   13578:	mov	lr, r9
   1357c:	ldr	pc, [r1, r7, lsl #2]
   13580:	andeq	r3, r1, r4, ror #12
   13584:	muleq	r1, r0, r6
   13588:	andeq	r3, r1, r4, asr r6
   1358c:	andeq	r3, r1, ip, asr #12
   13590:	andeq	r3, r1, r4, lsl #13
   13594:	ldrdeq	r3, [r1], -r8
   13598:	andeq	r3, r1, r4, ror r6
   1359c:	andeq	r3, r1, r4, lsr r7
   135a0:	andeq	r3, r1, ip, lsr #11
   135a4:	andeq	r3, r1, ip, lsr #11
   135a8:	ldrdeq	r3, [r1], -r4
   135ac:	movw	r0, #28492	; 0x6f4c
   135b0:	mov	r1, r7
   135b4:	movt	r0, #1
   135b8:	bl	14ee4 <__assert_fail@plt+0x3b60>
   135bc:	str	r0, [sp, #72]	; 0x48
   135c0:	movw	r0, #28494	; 0x6f4e
   135c4:	mov	r1, r7
   135c8:	movt	r0, #1
   135cc:	bl	14ee4 <__assert_fail@plt+0x3b60>
   135d0:	str	r0, [sp, #76]	; 0x4c
   135d4:	str	r5, [fp, #-48]	; 0xffffffd0
   135d8:	mov	r8, #0
   135dc:	mov	r5, r7
   135e0:	tst	r4, #1
   135e4:	bne	1361c <__assert_fail@plt+0x2298>
   135e8:	ldr	r0, [sp, #72]	; 0x48
   135ec:	ldrb	r0, [r0]
   135f0:	cmp	r0, #0
   135f4:	beq	1361c <__assert_fail@plt+0x2298>
   135f8:	ldr	r1, [sp, #72]	; 0x48
   135fc:	mov	r8, #0
   13600:	add	r1, r1, #1
   13604:	cmp	r8, sl
   13608:	strbcc	r0, [r6, r8]
   1360c:	ldrb	r0, [r1, r8]
   13610:	add	r8, r8, #1
   13614:	cmp	r0, #0
   13618:	bne	13604 <__assert_fail@plt+0x2280>
   1361c:	ldr	r7, [sp, #76]	; 0x4c
   13620:	mov	r0, r7
   13624:	bl	11270 <strlen@plt>
   13628:	str	r7, [sp, #92]	; 0x5c
   1362c:	mov	r7, r5
   13630:	ldr	ip, [fp, #-84]	; 0xffffffac
   13634:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13638:	str	r0, [fp, #-76]	; 0xffffffb4
   1363c:	mov	r2, #1
   13640:	mov	r3, r4
   13644:	mov	lr, r9
   13648:	b	13734 <__assert_fail@plt+0x23b0>
   1364c:	mov	r0, #1
   13650:	b	13690 <__assert_fail@plt+0x230c>
   13654:	tst	r4, #1
   13658:	bne	13690 <__assert_fail@plt+0x230c>
   1365c:	mov	r2, r0
   13660:	b	136b8 <__assert_fail@plt+0x2334>
   13664:	mov	r7, #0
   13668:	mov	r8, #0
   1366c:	mov	r2, r0
   13670:	b	13730 <__assert_fail@plt+0x23ac>
   13674:	mov	r0, #1
   13678:	mov	r8, #0
   1367c:	mov	r7, #5
   13680:	b	136ec <__assert_fail@plt+0x2368>
   13684:	mov	r2, #1
   13688:	tst	r4, #1
   1368c:	beq	136b8 <__assert_fail@plt+0x2334>
   13690:	mov	r1, #1
   13694:	mov	r8, #0
   13698:	mov	r7, #2
   1369c:	mov	r2, r0
   136a0:	mov	r3, #1
   136a4:	str	r1, [fp, #-76]	; 0xffffffb4
   136a8:	movw	r1, #28494	; 0x6f4e
   136ac:	movt	r1, #1
   136b0:	str	r1, [sp, #92]	; 0x5c
   136b4:	b	13734 <__assert_fail@plt+0x23b0>
   136b8:	cmp	sl, #0
   136bc:	mov	r8, #1
   136c0:	mov	r7, #2
   136c4:	movne	r0, #39	; 0x27
   136c8:	strbne	r0, [r6]
   136cc:	movw	r0, #28494	; 0x6f4e
   136d0:	movt	r0, #1
   136d4:	b	13724 <__assert_fail@plt+0x23a0>
   136d8:	mov	r7, #5
   136dc:	tst	r4, #1
   136e0:	beq	13708 <__assert_fail@plt+0x2384>
   136e4:	mov	r0, #1
   136e8:	mov	r8, #0
   136ec:	str	r0, [fp, #-76]	; 0xffffffb4
   136f0:	movw	r0, #28490	; 0x6f4a
   136f4:	mov	r2, #1
   136f8:	mov	r3, #1
   136fc:	movt	r0, #1
   13700:	str	r0, [sp, #92]	; 0x5c
   13704:	b	13734 <__assert_fail@plt+0x23b0>
   13708:	cmp	sl, #0
   1370c:	mov	r8, #1
   13710:	mov	r2, #1
   13714:	movne	r0, #34	; 0x22
   13718:	strbne	r0, [r6]
   1371c:	movw	r0, #28490	; 0x6f4a
   13720:	movt	r0, #1
   13724:	str	r0, [sp, #92]	; 0x5c
   13728:	mov	r0, #1
   1372c:	str	r0, [fp, #-76]	; 0xffffffb4
   13730:	mov	r3, #0
   13734:	ldr	r0, [fp, #16]
   13738:	str	r3, [fp, #-72]	; 0xffffffb8
   1373c:	str	r7, [fp, #-64]	; 0xffffffc0
   13740:	str	r2, [sp, #84]	; 0x54
   13744:	cmp	r0, #0
   13748:	movwne	r0, #1
   1374c:	and	r0, r0, r3
   13750:	str	r0, [fp, #-88]	; 0xffffffa8
   13754:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13758:	cmp	r0, #0
   1375c:	movwne	r0, #1
   13760:	subs	r4, r7, #2
   13764:	mov	r7, #0
   13768:	and	r1, r0, r3
   1376c:	str	r4, [fp, #-80]	; 0xffffffb0
   13770:	and	r1, r2, r1
   13774:	str	r1, [sp, #48]	; 0x30
   13778:	clz	r1, r4
   1377c:	lsr	r1, r1, #5
   13780:	and	r1, r1, r3
   13784:	eor	r3, r3, #1
   13788:	str	r1, [sp, #64]	; 0x40
   1378c:	mov	r1, r4
   13790:	str	r3, [sp, #88]	; 0x58
   13794:	movwne	r1, #1
   13798:	orr	r3, r1, r3
   1379c:	and	r1, r1, r2
   137a0:	and	r0, r0, r1
   137a4:	str	r3, [sp, #68]	; 0x44
   137a8:	str	r1, [fp, #-68]	; 0xffffffbc
   137ac:	str	r0, [fp, #-60]	; 0xffffffc4
   137b0:	eor	r0, r2, #1
   137b4:	str	r0, [sp, #52]	; 0x34
   137b8:	cmn	lr, #1
   137bc:	beq	137cc <__assert_fail@plt+0x2448>
   137c0:	cmp	r7, lr
   137c4:	bne	137d8 <__assert_fail@plt+0x2454>
   137c8:	b	14300 <__assert_fail@plt+0x2f7c>
   137cc:	ldrb	r0, [ip, r7]
   137d0:	cmp	r0, #0
   137d4:	beq	14308 <__assert_fail@plt+0x2f84>
   137d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   137dc:	mov	r9, #0
   137e0:	str	r5, [fp, #-48]	; 0xffffffd0
   137e4:	cmp	r0, #0
   137e8:	beq	1381c <__assert_fail@plt+0x2498>
   137ec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   137f0:	add	r4, r7, r0
   137f4:	cmp	r0, #2
   137f8:	bcc	13814 <__assert_fail@plt+0x2490>
   137fc:	cmn	lr, #1
   13800:	bne	13814 <__assert_fail@plt+0x2490>
   13804:	mov	r0, ip
   13808:	bl	11270 <strlen@plt>
   1380c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13810:	mov	lr, r0
   13814:	cmp	r4, lr
   13818:	bls	13824 <__assert_fail@plt+0x24a0>
   1381c:	mov	r0, #0
   13820:	b	13864 <__assert_fail@plt+0x24e0>
   13824:	ldr	r1, [sp, #92]	; 0x5c
   13828:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1382c:	add	r0, ip, r7
   13830:	mov	r4, lr
   13834:	bl	1112c <memcmp@plt>
   13838:	ldr	r2, [sp, #88]	; 0x58
   1383c:	cmp	r0, #0
   13840:	mov	r1, r0
   13844:	movwne	r1, #1
   13848:	orr	r1, r1, r2
   1384c:	tst	r1, #1
   13850:	beq	14398 <__assert_fail@plt+0x3014>
   13854:	ldr	ip, [fp, #-84]	; 0xffffffac
   13858:	clz	r0, r0
   1385c:	mov	lr, r4
   13860:	lsr	r0, r0, #5
   13864:	str	r0, [fp, #-52]	; 0xffffffcc
   13868:	ldrb	r5, [ip, r7]
   1386c:	cmp	r5, #126	; 0x7e
   13870:	bhi	13c28 <__assert_fail@plt+0x28a4>
   13874:	add	r3, pc, #16
   13878:	mov	r4, #1
   1387c:	mov	r2, #110	; 0x6e
   13880:	mov	r0, #97	; 0x61
   13884:	mov	r1, #0
   13888:	ldr	pc, [r3, r5, lsl #2]
   1388c:	andeq	r3, r1, r4, lsr #22
   13890:	andeq	r3, r1, r8, lsr #24
   13894:	andeq	r3, r1, r8, lsr #24
   13898:	andeq	r3, r1, r8, lsr #24
   1389c:	andeq	r3, r1, r8, lsr #24
   138a0:	andeq	r3, r1, r8, lsr #24
   138a4:	andeq	r3, r1, r8, lsr #24
   138a8:	ldrdeq	r3, [r1], -ip
   138ac:	andeq	r3, r1, r4, lsl #22
   138b0:	strdeq	r3, [r1], -ip
   138b4:	andeq	r3, r1, r0, lsl fp
   138b8:	muleq	r1, r0, fp
   138bc:	strdeq	r3, [r1], -r4
   138c0:	andeq	r3, r1, ip, lsl #22
   138c4:	andeq	r3, r1, r8, lsr #24
   138c8:	andeq	r3, r1, r8, lsr #24
   138cc:	andeq	r3, r1, r8, lsr #24
   138d0:	andeq	r3, r1, r8, lsr #24
   138d4:	andeq	r3, r1, r8, lsr #24
   138d8:	andeq	r3, r1, r8, lsr #24
   138dc:	andeq	r3, r1, r8, lsr #24
   138e0:	andeq	r3, r1, r8, lsr #24
   138e4:	andeq	r3, r1, r8, lsr #24
   138e8:	andeq	r3, r1, r8, lsr #24
   138ec:	andeq	r3, r1, r8, lsr #24
   138f0:	andeq	r3, r1, r8, lsr #24
   138f4:	andeq	r3, r1, r8, lsr #24
   138f8:	andeq	r3, r1, r8, lsr #24
   138fc:	andeq	r3, r1, r8, lsr #24
   13900:	andeq	r3, r1, r8, lsr #24
   13904:	andeq	r3, r1, r8, lsr #24
   13908:	andeq	r3, r1, r8, lsr #24
   1390c:	muleq	r1, r4, ip
   13910:	muleq	r1, r8, ip
   13914:	muleq	r1, r8, ip
   13918:	muleq	r1, ip, sl
   1391c:	muleq	r1, r8, ip
   13920:	andeq	r3, r1, r8, lsl #21
   13924:	muleq	r1, r8, ip
   13928:	muleq	r1, r8, fp
   1392c:	muleq	r1, r8, ip
   13930:	muleq	r1, r8, ip
   13934:	muleq	r1, r8, ip
   13938:	andeq	r3, r1, r8, lsl #21
   1393c:	andeq	r3, r1, r8, lsl #21
   13940:	andeq	r3, r1, r8, lsl #21
   13944:	andeq	r3, r1, r8, lsl #21
   13948:	andeq	r3, r1, r8, lsl #21
   1394c:	andeq	r3, r1, r8, lsl #21
   13950:	andeq	r3, r1, r8, lsl #21
   13954:	andeq	r3, r1, r8, lsl #21
   13958:	andeq	r3, r1, r8, lsl #21
   1395c:	andeq	r3, r1, r8, lsl #21
   13960:	andeq	r3, r1, r8, lsl #21
   13964:	andeq	r3, r1, r8, lsl #21
   13968:	andeq	r3, r1, r8, lsl #21
   1396c:	andeq	r3, r1, r8, lsl #21
   13970:	andeq	r3, r1, r8, lsl #21
   13974:	andeq	r3, r1, r8, lsl #21
   13978:	muleq	r1, r8, ip
   1397c:	muleq	r1, r8, ip
   13980:	muleq	r1, r8, ip
   13984:	muleq	r1, r8, ip
   13988:	andeq	r3, r1, r4, ror #22
   1398c:	andeq	r3, r1, r8, lsr #24
   13990:	andeq	r3, r1, r8, lsl #21
   13994:	andeq	r3, r1, r8, lsl #21
   13998:	andeq	r3, r1, r8, lsl #21
   1399c:	andeq	r3, r1, r8, lsl #21
   139a0:	andeq	r3, r1, r8, lsl #21
   139a4:	andeq	r3, r1, r8, lsl #21
   139a8:	andeq	r3, r1, r8, lsl #21
   139ac:	andeq	r3, r1, r8, lsl #21
   139b0:	andeq	r3, r1, r8, lsl #21
   139b4:	andeq	r3, r1, r8, lsl #21
   139b8:	andeq	r3, r1, r8, lsl #21
   139bc:	andeq	r3, r1, r8, lsl #21
   139c0:	andeq	r3, r1, r8, lsl #21
   139c4:	andeq	r3, r1, r8, lsl #21
   139c8:	andeq	r3, r1, r8, lsl #21
   139cc:	andeq	r3, r1, r8, lsl #21
   139d0:	andeq	r3, r1, r8, lsl #21
   139d4:	andeq	r3, r1, r8, lsl #21
   139d8:	andeq	r3, r1, r8, lsl #21
   139dc:	andeq	r3, r1, r8, lsl #21
   139e0:	andeq	r3, r1, r8, lsl #21
   139e4:	andeq	r3, r1, r8, lsl #21
   139e8:	andeq	r3, r1, r8, lsl #21
   139ec:	andeq	r3, r1, r8, lsl #21
   139f0:	andeq	r3, r1, r8, lsl #21
   139f4:	andeq	r3, r1, r8, lsl #21
   139f8:	muleq	r1, r8, ip
   139fc:	ldrdeq	r3, [r1], -r0
   13a00:	andeq	r3, r1, r8, lsl #21
   13a04:	muleq	r1, r8, ip
   13a08:	andeq	r3, r1, r8, lsl #21
   13a0c:	muleq	r1, r8, ip
   13a10:	andeq	r3, r1, r8, lsl #21
   13a14:	andeq	r3, r1, r8, lsl #21
   13a18:	andeq	r3, r1, r8, lsl #21
   13a1c:	andeq	r3, r1, r8, lsl #21
   13a20:	andeq	r3, r1, r8, lsl #21
   13a24:	andeq	r3, r1, r8, lsl #21
   13a28:	andeq	r3, r1, r8, lsl #21
   13a2c:	andeq	r3, r1, r8, lsl #21
   13a30:	andeq	r3, r1, r8, lsl #21
   13a34:	andeq	r3, r1, r8, lsl #21
   13a38:	andeq	r3, r1, r8, lsl #21
   13a3c:	andeq	r3, r1, r8, lsl #21
   13a40:	andeq	r3, r1, r8, lsl #21
   13a44:	andeq	r3, r1, r8, lsl #21
   13a48:	andeq	r3, r1, r8, lsl #21
   13a4c:	andeq	r3, r1, r8, lsl #21
   13a50:	andeq	r3, r1, r8, lsl #21
   13a54:	andeq	r3, r1, r8, lsl #21
   13a58:	andeq	r3, r1, r8, lsl #21
   13a5c:	andeq	r3, r1, r8, lsl #21
   13a60:	andeq	r3, r1, r8, lsl #21
   13a64:	andeq	r3, r1, r8, lsl #21
   13a68:	andeq	r3, r1, r8, lsl #21
   13a6c:	andeq	r3, r1, r8, lsl #21
   13a70:	andeq	r3, r1, r8, lsl #21
   13a74:	andeq	r3, r1, r8, lsl #21
   13a78:			; <UNDEFINED> instruction: 0x00013ab0
   13a7c:	muleq	r1, r8, ip
   13a80:			; <UNDEFINED> instruction: 0x00013ab0
   13a84:	muleq	r1, ip, sl
   13a88:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13a8c:	cmp	r0, #0
   13a90:	beq	13cf0 <__assert_fail@plt+0x296c>
   13a94:	ldr	r0, [fp, #16]
   13a98:	b	13cf4 <__assert_fail@plt+0x2970>
   13a9c:	mov	r4, #0
   13aa0:	cmp	r7, #0
   13aa4:	beq	13c94 <__assert_fail@plt+0x2910>
   13aa8:	mov	r9, #0
   13aac:	b	13a88 <__assert_fail@plt+0x2704>
   13ab0:	mov	r4, #0
   13ab4:	cmn	lr, #1
   13ab8:	beq	13c78 <__assert_fail@plt+0x28f4>
   13abc:	cmp	r7, #0
   13ac0:	bne	13aa8 <__assert_fail@plt+0x2724>
   13ac4:	cmp	lr, #1
   13ac8:	beq	13c94 <__assert_fail@plt+0x2910>
   13acc:	b	13aa8 <__assert_fail@plt+0x2724>
   13ad0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ad4:	cmp	r0, #2
   13ad8:	bne	13cb8 <__assert_fail@plt+0x2934>
   13adc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ae0:	tst	r0, #1
   13ae4:	bne	143b4 <__assert_fail@plt+0x3030>
   13ae8:	mov	r9, #0
   13aec:	mov	r0, #92	; 0x5c
   13af0:	b	13ccc <__assert_fail@plt+0x2948>
   13af4:	mov	r0, #102	; 0x66
   13af8:	b	13cdc <__assert_fail@plt+0x2958>
   13afc:	mov	r2, #116	; 0x74
   13b00:	b	13b10 <__assert_fail@plt+0x278c>
   13b04:	mov	r0, #98	; 0x62
   13b08:	b	13cdc <__assert_fail@plt+0x2958>
   13b0c:	mov	r2, #114	; 0x72
   13b10:	ldr	r0, [sp, #68]	; 0x44
   13b14:	tst	r0, #1
   13b18:	mov	r0, r2
   13b1c:	bne	13cdc <__assert_fail@plt+0x2958>
   13b20:	b	143b4 <__assert_fail@plt+0x3030>
   13b24:	ldr	r0, [sp, #84]	; 0x54
   13b28:	tst	r0, #1
   13b2c:	beq	13dcc <__assert_fail@plt+0x2a48>
   13b30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b34:	tst	r0, #1
   13b38:	bne	144c4 <__assert_fail@plt+0x3140>
   13b3c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b40:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13b44:	cmp	r0, #2
   13b48:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13b4c:	movwne	r0, #1
   13b50:	orr	r0, r0, r2
   13b54:	tst	r0, #1
   13b58:	beq	1419c <__assert_fail@plt+0x2e18>
   13b5c:	mov	r0, r8
   13b60:	b	141d0 <__assert_fail@plt+0x2e4c>
   13b64:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13b68:	mov	r9, #0
   13b6c:	mov	r5, #63	; 0x3f
   13b70:	cmp	r0, #5
   13b74:	beq	13f80 <__assert_fail@plt+0x2bfc>
   13b78:	cmp	r0, #2
   13b7c:	bne	14024 <__assert_fail@plt+0x2ca0>
   13b80:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13b84:	tst	r0, #1
   13b88:	beq	14028 <__assert_fail@plt+0x2ca4>
   13b8c:	b	143b4 <__assert_fail@plt+0x3030>
   13b90:	mov	r0, #118	; 0x76
   13b94:	b	13cdc <__assert_fail@plt+0x2958>
   13b98:	mov	r0, #1
   13b9c:	mov	r5, #39	; 0x27
   13ba0:	str	r0, [sp, #60]	; 0x3c
   13ba4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13ba8:	cmp	r0, #2
   13bac:	bne	13c20 <__assert_fail@plt+0x289c>
   13bb0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13bb4:	tst	r0, #1
   13bb8:	bne	143b4 <__assert_fail@plt+0x3030>
   13bbc:	ldr	r2, [sp, #56]	; 0x38
   13bc0:	clz	r1, sl
   13bc4:	mov	r9, #0
   13bc8:	lsr	r1, r1, #5
   13bcc:	cmp	r2, #0
   13bd0:	mov	r0, r2
   13bd4:	movwne	r0, #1
   13bd8:	orrs	r0, r0, r1
   13bdc:	moveq	r2, sl
   13be0:	moveq	sl, r0
   13be4:	cmp	r8, sl
   13be8:	str	r2, [sp, #56]	; 0x38
   13bec:	movcc	r0, #39	; 0x27
   13bf0:	strbcc	r0, [r6, r8]
   13bf4:	add	r0, r8, #1
   13bf8:	cmp	r0, sl
   13bfc:	movcc	r1, #92	; 0x5c
   13c00:	strbcc	r1, [r6, r0]
   13c04:	add	r0, r8, #2
   13c08:	add	r8, r8, #3
   13c0c:	cmp	r0, sl
   13c10:	movcc	r1, #39	; 0x27
   13c14:	strbcc	r1, [r6, r0]
   13c18:	mov	r0, #0
   13c1c:	str	r0, [fp, #-56]	; 0xffffffc8
   13c20:	mov	r4, #1
   13c24:	b	13a88 <__assert_fail@plt+0x2704>
   13c28:	ldr	r0, [sp, #40]	; 0x28
   13c2c:	cmp	r0, #1
   13c30:	bne	13df8 <__assert_fail@plt+0x2a74>
   13c34:	str	lr, [sp, #28]
   13c38:	bl	1124c <__ctype_b_loc@plt>
   13c3c:	ldr	r0, [r0]
   13c40:	ldr	ip, [fp, #-84]	; 0xffffffac
   13c44:	mov	r1, #1
   13c48:	add	r0, r0, r5, lsl #1
   13c4c:	ldrb	r0, [r0, #1]
   13c50:	ubfx	r4, r0, #6, #1
   13c54:	ldr	r0, [sp, #52]	; 0x34
   13c58:	mov	r2, r1
   13c5c:	cmp	r1, #1
   13c60:	orr	r0, r4, r0
   13c64:	bhi	14030 <__assert_fail@plt+0x2cac>
   13c68:	tst	r0, #1
   13c6c:	beq	14030 <__assert_fail@plt+0x2cac>
   13c70:	ldr	lr, [sp, #28]
   13c74:	b	13a88 <__assert_fail@plt+0x2704>
   13c78:	cmp	r7, #0
   13c7c:	ldrbeq	r0, [ip, #1]
   13c80:	cmpeq	r0, #0
   13c84:	beq	13c94 <__assert_fail@plt+0x2910>
   13c88:	mvn	lr, #0
   13c8c:	mov	r9, #0
   13c90:	b	13a88 <__assert_fail@plt+0x2704>
   13c94:	mov	r1, #1
   13c98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13c9c:	cmp	r0, #2
   13ca0:	bne	13cb0 <__assert_fail@plt+0x292c>
   13ca4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   13ca8:	tst	r0, #1
   13cac:	bne	143b4 <__assert_fail@plt+0x3030>
   13cb0:	mov	r4, r1
   13cb4:	b	13a88 <__assert_fail@plt+0x2704>
   13cb8:	ldr	r1, [sp, #48]	; 0x30
   13cbc:	mov	r9, #0
   13cc0:	mov	r0, #92	; 0x5c
   13cc4:	cmp	r1, #0
   13cc8:	beq	13cdc <__assert_fail@plt+0x2958>
   13ccc:	mov	r4, #0
   13cd0:	cmp	r9, #0
   13cd4:	beq	14268 <__assert_fail@plt+0x2ee4>
   13cd8:	b	142a4 <__assert_fail@plt+0x2f20>
   13cdc:	ldr	r1, [sp, #84]	; 0x54
   13ce0:	mov	r4, #0
   13ce4:	mov	r9, #0
   13ce8:	tst	r1, #1
   13cec:	bne	13d2c <__assert_fail@plt+0x29a8>
   13cf0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   13cf4:	cmp	r0, #0
   13cf8:	mov	r0, r5
   13cfc:	beq	13d20 <__assert_fail@plt+0x299c>
   13d00:	ldr	r1, [fp, #16]
   13d04:	ubfx	r0, r5, #5, #3
   13d08:	mov	r2, #1
   13d0c:	ldr	r0, [r1, r0, lsl #2]
   13d10:	and	r1, r5, #31
   13d14:	tst	r0, r2, lsl r1
   13d18:	mov	r0, r5
   13d1c:	bne	13d2c <__assert_fail@plt+0x29a8>
   13d20:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13d24:	cmp	r1, #0
   13d28:	beq	14260 <__assert_fail@plt+0x2edc>
   13d2c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13d30:	tst	r1, #1
   13d34:	bne	1438c <__assert_fail@plt+0x3008>
   13d38:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13d3c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13d40:	cmp	r1, #2
   13d44:	ldr	r1, [fp, #-80]	; 0xffffffb0
   13d48:	movwne	r1, #1
   13d4c:	orr	r1, r1, r2
   13d50:	tst	r1, #1
   13d54:	beq	13d60 <__assert_fail@plt+0x29dc>
   13d58:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13d5c:	b	13d9c <__assert_fail@plt+0x2a18>
   13d60:	cmp	r8, sl
   13d64:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13d68:	movcc	r1, #39	; 0x27
   13d6c:	strbcc	r1, [r6, r8]
   13d70:	add	r1, r8, #1
   13d74:	cmp	r1, sl
   13d78:	movcc	r2, #36	; 0x24
   13d7c:	strbcc	r2, [r6, r1]
   13d80:	add	r1, r8, #2
   13d84:	add	r8, r8, #3
   13d88:	cmp	r1, sl
   13d8c:	movcc	r2, #39	; 0x27
   13d90:	strbcc	r2, [r6, r1]
   13d94:	mov	r1, #1
   13d98:	str	r1, [fp, #-56]	; 0xffffffc8
   13d9c:	cmp	r8, sl
   13da0:	movcc	r1, #92	; 0x5c
   13da4:	strbcc	r1, [r6, r8]
   13da8:	add	r8, r8, #1
   13dac:	cmp	r8, sl
   13db0:	and	r5, r5, r4
   13db4:	add	r7, r7, #1
   13db8:	strbcc	r0, [r6, r8]
   13dbc:	add	r8, r8, #1
   13dc0:	cmn	lr, #1
   13dc4:	bne	137c0 <__assert_fail@plt+0x243c>
   13dc8:	b	137cc <__assert_fail@plt+0x2448>
   13dcc:	ldr	r0, [sp, #36]	; 0x24
   13dd0:	mov	r4, #0
   13dd4:	mov	r9, #0
   13dd8:	mov	r5, #0
   13ddc:	cmp	r0, #0
   13de0:	beq	13cf0 <__assert_fail@plt+0x296c>
   13de4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13de8:	add	r7, r7, #1
   13dec:	cmn	lr, #1
   13df0:	bne	137c0 <__assert_fail@plt+0x243c>
   13df4:	b	137cc <__assert_fail@plt+0x2448>
   13df8:	mov	r0, #0
   13dfc:	cmn	lr, #1
   13e00:	str	r0, [fp, #-36]	; 0xffffffdc
   13e04:	str	r0, [fp, #-40]	; 0xffffffd8
   13e08:	bne	13e1c <__assert_fail@plt+0x2a98>
   13e0c:	mov	r0, ip
   13e10:	bl	11270 <strlen@plt>
   13e14:	ldr	ip, [fp, #-84]	; 0xffffffac
   13e18:	mov	lr, r0
   13e1c:	add	r0, ip, r7
   13e20:	mov	r4, #1
   13e24:	mov	r6, #0
   13e28:	str	lr, [sp, #28]
   13e2c:	str	r0, [sp, #24]
   13e30:	sub	r0, fp, #40	; 0x28
   13e34:	mov	r3, r0
   13e38:	str	r6, [sp, #44]	; 0x2c
   13e3c:	add	r6, r6, r7
   13e40:	sub	r0, fp, #44	; 0x2c
   13e44:	add	r1, ip, r6
   13e48:	sub	r2, lr, r6
   13e4c:	bl	161cc <__assert_fail@plt+0x4e48>
   13e50:	cmp	r0, #0
   13e54:	beq	142ec <__assert_fail@plt+0x2f68>
   13e58:	cmn	r0, #1
   13e5c:	beq	142ac <__assert_fail@plt+0x2f28>
   13e60:	ldr	lr, [sp, #28]
   13e64:	cmn	r0, #2
   13e68:	beq	142b4 <__assert_fail@plt+0x2f30>
   13e6c:	ldr	r2, [sp, #64]	; 0x40
   13e70:	cmp	r0, #2
   13e74:	mov	r1, #0
   13e78:	movwcc	r1, #1
   13e7c:	eor	r2, r2, #1
   13e80:	orrs	r1, r2, r1
   13e84:	bne	13f44 <__assert_fail@plt+0x2bc0>
   13e88:	ldr	r1, [sp, #44]	; 0x2c
   13e8c:	ldr	r2, [sp, #24]
   13e90:	add	r1, r2, r1
   13e94:	mov	r2, #1
   13e98:	ldrb	r3, [r1, r2]
   13e9c:	sub	r3, r3, #91	; 0x5b
   13ea0:	cmp	r3, #33	; 0x21
   13ea4:	bhi	13f38 <__assert_fail@plt+0x2bb4>
   13ea8:	add	r6, pc, #0
   13eac:	ldr	pc, [r6, r3, lsl #2]
   13eb0:	andeq	r4, r1, ip, lsr #7
   13eb4:	andeq	r4, r1, ip, lsr #7
   13eb8:	andeq	r3, r1, r8, lsr pc
   13ebc:	andeq	r4, r1, ip, lsr #7
   13ec0:	andeq	r3, r1, r8, lsr pc
   13ec4:	andeq	r4, r1, ip, lsr #7
   13ec8:	andeq	r3, r1, r8, lsr pc
   13ecc:	andeq	r3, r1, r8, lsr pc
   13ed0:	andeq	r3, r1, r8, lsr pc
   13ed4:	andeq	r3, r1, r8, lsr pc
   13ed8:	andeq	r3, r1, r8, lsr pc
   13edc:	andeq	r3, r1, r8, lsr pc
   13ee0:	andeq	r3, r1, r8, lsr pc
   13ee4:	andeq	r3, r1, r8, lsr pc
   13ee8:	andeq	r3, r1, r8, lsr pc
   13eec:	andeq	r3, r1, r8, lsr pc
   13ef0:	andeq	r3, r1, r8, lsr pc
   13ef4:	andeq	r3, r1, r8, lsr pc
   13ef8:	andeq	r3, r1, r8, lsr pc
   13efc:	andeq	r3, r1, r8, lsr pc
   13f00:	andeq	r3, r1, r8, lsr pc
   13f04:	andeq	r3, r1, r8, lsr pc
   13f08:	andeq	r3, r1, r8, lsr pc
   13f0c:	andeq	r3, r1, r8, lsr pc
   13f10:	andeq	r3, r1, r8, lsr pc
   13f14:	andeq	r3, r1, r8, lsr pc
   13f18:	andeq	r3, r1, r8, lsr pc
   13f1c:	andeq	r3, r1, r8, lsr pc
   13f20:	andeq	r3, r1, r8, lsr pc
   13f24:	andeq	r3, r1, r8, lsr pc
   13f28:	andeq	r3, r1, r8, lsr pc
   13f2c:	andeq	r3, r1, r8, lsr pc
   13f30:	andeq	r3, r1, r8, lsr pc
   13f34:	andeq	r4, r1, ip, lsr #7
   13f38:	add	r2, r2, #1
   13f3c:	cmp	r2, r0
   13f40:	bcc	13e98 <__assert_fail@plt+0x2b14>
   13f44:	ldr	r6, [sp, #44]	; 0x2c
   13f48:	add	r6, r0, r6
   13f4c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13f50:	bl	11180 <iswprint@plt>
   13f54:	cmp	r0, #0
   13f58:	movwne	r0, #1
   13f5c:	and	r4, r4, r0
   13f60:	sub	r0, fp, #40	; 0x28
   13f64:	bl	11114 <mbsinit@plt>
   13f68:	ldr	lr, [sp, #28]
   13f6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   13f70:	sub	r3, fp, #40	; 0x28
   13f74:	cmp	r0, #0
   13f78:	beq	13e38 <__assert_fail@plt+0x2ab4>
   13f7c:	b	142f4 <__assert_fail@plt+0x2f70>
   13f80:	ldr	r0, [sp, #32]
   13f84:	cmp	r0, #0
   13f88:	beq	14024 <__assert_fail@plt+0x2ca0>
   13f8c:	add	r0, r7, #2
   13f90:	cmp	r0, lr
   13f94:	bcs	14024 <__assert_fail@plt+0x2ca0>
   13f98:	add	r1, ip, r7
   13f9c:	ldrb	r1, [r1, #1]
   13fa0:	cmp	r1, #63	; 0x3f
   13fa4:	bne	14024 <__assert_fail@plt+0x2ca0>
   13fa8:	ldrb	r5, [ip, r0]
   13fac:	sub	r1, r5, #33	; 0x21
   13fb0:	cmp	r1, #29
   13fb4:	bhi	14024 <__assert_fail@plt+0x2ca0>
   13fb8:	movw	r3, #20929	; 0x51c1
   13fbc:	mov	r2, #1
   13fc0:	movt	r3, #14336	; 0x3800
   13fc4:	tst	r3, r2, lsl r1
   13fc8:	beq	14024 <__assert_fail@plt+0x2ca0>
   13fcc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   13fd0:	tst	r1, #1
   13fd4:	bne	144cc <__assert_fail@plt+0x3148>
   13fd8:	cmp	r8, sl
   13fdc:	mov	r7, r0
   13fe0:	mov	r4, #0
   13fe4:	movcc	r1, #63	; 0x3f
   13fe8:	strbcc	r1, [r6, r8]
   13fec:	add	r1, r8, #1
   13ff0:	cmp	r1, sl
   13ff4:	movcc	r2, #34	; 0x22
   13ff8:	strbcc	r2, [r6, r1]
   13ffc:	add	r1, r8, #2
   14000:	cmp	r1, sl
   14004:	movcc	r2, #34	; 0x22
   14008:	strbcc	r2, [r6, r1]
   1400c:	add	r1, r8, #3
   14010:	add	r8, r8, #4
   14014:	cmp	r1, sl
   14018:	movcc	r2, #63	; 0x3f
   1401c:	strbcc	r2, [r6, r1]
   14020:	b	13a88 <__assert_fail@plt+0x2704>
   14024:	mov	r5, #63	; 0x3f
   14028:	mov	r4, #0
   1402c:	b	13a88 <__assert_fail@plt+0x2704>
   14030:	add	r1, r2, r7
   14034:	ldr	lr, [sp, #28]
   14038:	mov	r3, #0
   1403c:	str	r1, [sp, #44]	; 0x2c
   14040:	add	r1, r7, #1
   14044:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14048:	tst	r0, #1
   1404c:	bne	14120 <__assert_fail@plt+0x2d9c>
   14050:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14054:	tst	r2, #1
   14058:	bne	14414 <__assert_fail@plt+0x3090>
   1405c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14060:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14064:	cmp	r7, #2
   14068:	movwne	r3, #1
   1406c:	orr	r3, r3, r2
   14070:	tst	r3, #1
   14074:	bne	140b0 <__assert_fail@plt+0x2d2c>
   14078:	cmp	r8, sl
   1407c:	add	r3, r8, #1
   14080:	movcc	r2, #39	; 0x27
   14084:	strbcc	r2, [r6, r8]
   14088:	cmp	r3, sl
   1408c:	movcc	r2, #36	; 0x24
   14090:	strbcc	r2, [r6, r3]
   14094:	add	r3, r8, #2
   14098:	add	r8, r8, #3
   1409c:	cmp	r3, sl
   140a0:	movcc	r2, #39	; 0x27
   140a4:	strbcc	r2, [r6, r3]
   140a8:	mov	r2, #1
   140ac:	str	r2, [fp, #-56]	; 0xffffffc8
   140b0:	cmp	r8, sl
   140b4:	movcc	r3, #92	; 0x5c
   140b8:	strbcc	r3, [r6, r8]
   140bc:	add	r3, r8, #1
   140c0:	cmp	r3, sl
   140c4:	andcc	r7, r5, #192	; 0xc0
   140c8:	movcc	r2, #48	; 0x30
   140cc:	orrcc	r7, r2, r7, lsr #6
   140d0:	strbcc	r7, [r6, r3]
   140d4:	add	r3, r8, #2
   140d8:	add	r8, r8, #3
   140dc:	cmp	r3, sl
   140e0:	lsrcc	r7, r5, #3
   140e4:	movcc	r2, #6
   140e8:	bficc	r7, r2, #3, #29
   140ec:	mov	r2, #6
   140f0:	strbcc	r7, [r6, r3]
   140f4:	bfi	r5, r2, #3, #29
   140f8:	mov	r3, #1
   140fc:	b	14144 <__assert_fail@plt+0x2dc0>
   14100:	cmp	r8, sl
   14104:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14108:	strbcc	r5, [r6, r8]
   1410c:	add	r8, r8, #1
   14110:	ldrb	r5, [ip, r1]
   14114:	add	r1, r1, #1
   14118:	tst	r0, #1
   1411c:	beq	14050 <__assert_fail@plt+0x2ccc>
   14120:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14124:	tst	r2, #1
   14128:	beq	1413c <__assert_fail@plt+0x2db8>
   1412c:	cmp	r8, sl
   14130:	movcc	r7, #92	; 0x5c
   14134:	strbcc	r7, [r6, r8]
   14138:	add	r8, r8, #1
   1413c:	mov	r2, #0
   14140:	str	r2, [fp, #-52]	; 0xffffffcc
   14144:	ldr	r2, [sp, #44]	; 0x2c
   14148:	and	r9, r3, #1
   1414c:	cmp	r2, r1
   14150:	bls	14250 <__assert_fail@plt+0x2ecc>
   14154:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14158:	cmp	r9, #0
   1415c:	movwne	r9, #1
   14160:	mvn	r7, r2
   14164:	orr	r7, r7, r9
   14168:	tst	r7, #1
   1416c:	bne	14100 <__assert_fail@plt+0x2d7c>
   14170:	cmp	r8, sl
   14174:	movcc	r7, #39	; 0x27
   14178:	strbcc	r7, [r6, r8]
   1417c:	add	r7, r8, #1
   14180:	add	r8, r8, #2
   14184:	cmp	r7, sl
   14188:	movcc	r2, #39	; 0x27
   1418c:	strbcc	r2, [r6, r7]
   14190:	mov	r2, #0
   14194:	str	r2, [fp, #-56]	; 0xffffffc8
   14198:	b	14100 <__assert_fail@plt+0x2d7c>
   1419c:	cmp	r8, sl
   141a0:	mov	r2, #1
   141a4:	movcc	r0, #39	; 0x27
   141a8:	strbcc	r0, [r6, r8]
   141ac:	add	r0, r8, #1
   141b0:	cmp	r0, sl
   141b4:	movcc	r1, #36	; 0x24
   141b8:	strbcc	r1, [r6, r0]
   141bc:	add	r0, r8, #2
   141c0:	cmp	r0, sl
   141c4:	movcc	r1, #39	; 0x27
   141c8:	strbcc	r1, [r6, r0]
   141cc:	add	r0, r8, #3
   141d0:	cmp	r0, sl
   141d4:	add	r8, r0, #1
   141d8:	str	r2, [fp, #-56]	; 0xffffffc8
   141dc:	movcc	r1, #92	; 0x5c
   141e0:	strbcc	r1, [r6, r0]
   141e4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   141e8:	cmp	r1, #2
   141ec:	beq	14240 <__assert_fail@plt+0x2ebc>
   141f0:	add	r1, r7, #1
   141f4:	mov	r4, #0
   141f8:	mov	r9, #1
   141fc:	mov	r5, #48	; 0x30
   14200:	cmp	r1, lr
   14204:	bcs	13a88 <__assert_fail@plt+0x2704>
   14208:	ldrb	r1, [ip, r1]
   1420c:	sub	r1, r1, #48	; 0x30
   14210:	uxtb	r1, r1
   14214:	cmp	r1, #9
   14218:	bhi	13a88 <__assert_fail@plt+0x2704>
   1421c:	cmp	r8, sl
   14220:	movcc	r1, #48	; 0x30
   14224:	strbcc	r1, [r6, r8]
   14228:	add	r1, r0, #2
   1422c:	add	r8, r0, #3
   14230:	cmp	r1, sl
   14234:	movcc	r2, #48	; 0x30
   14238:	strbcc	r2, [r6, r1]
   1423c:	b	13a88 <__assert_fail@plt+0x2704>
   14240:	mov	r0, #48	; 0x30
   14244:	mov	r9, #1
   14248:	mov	r4, #0
   1424c:	b	13d20 <__assert_fail@plt+0x299c>
   14250:	cmp	r9, #0
   14254:	sub	r7, r1, #1
   14258:	mov	r0, r5
   1425c:	movwne	r9, #1
   14260:	cmp	r9, #0
   14264:	bne	142a4 <__assert_fail@plt+0x2f20>
   14268:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1426c:	tst	r1, #1
   14270:	beq	142a4 <__assert_fail@plt+0x2f20>
   14274:	cmp	r8, sl
   14278:	ldr	r5, [fp, #-48]	; 0xffffffd0
   1427c:	movcc	r1, #39	; 0x27
   14280:	strbcc	r1, [r6, r8]
   14284:	add	r1, r8, #1
   14288:	add	r8, r8, #2
   1428c:	cmp	r1, sl
   14290:	movcc	r2, #39	; 0x27
   14294:	strbcc	r2, [r6, r1]
   14298:	mov	r1, #0
   1429c:	str	r1, [fp, #-56]	; 0xffffffc8
   142a0:	b	13dac <__assert_fail@plt+0x2a28>
   142a4:	ldr	r5, [fp, #-48]	; 0xffffffd0
   142a8:	b	13dac <__assert_fail@plt+0x2a28>
   142ac:	mov	r4, #0
   142b0:	b	142ec <__assert_fail@plt+0x2f68>
   142b4:	mov	r4, #0
   142b8:	cmp	lr, r6
   142bc:	bls	142ec <__assert_fail@plt+0x2f68>
   142c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   142c4:	ldr	r6, [sp, #44]	; 0x2c
   142c8:	ldr	r0, [sp, #24]
   142cc:	ldrb	r0, [r0, r6]
   142d0:	cmp	r0, #0
   142d4:	beq	142f4 <__assert_fail@plt+0x2f70>
   142d8:	add	r6, r6, #1
   142dc:	add	r0, r7, r6
   142e0:	cmp	r0, lr
   142e4:	bcc	142c8 <__assert_fail@plt+0x2f44>
   142e8:	b	142f4 <__assert_fail@plt+0x2f70>
   142ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   142f0:	ldr	r6, [sp, #44]	; 0x2c
   142f4:	mov	r1, r6
   142f8:	ldr	r6, [sp, #80]	; 0x50
   142fc:	b	13c54 <__assert_fail@plt+0x28d0>
   14300:	mov	lr, r7
   14304:	b	1430c <__assert_fail@plt+0x2f88>
   14308:	mvn	lr, #0
   1430c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14310:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14314:	eor	r0, r7, #2
   14318:	orr	r0, r0, r8
   1431c:	clz	r0, r0
   14320:	lsr	r0, r0, #5
   14324:	tst	r1, r0
   14328:	bne	143b4 <__assert_fail@plt+0x3030>
   1432c:	mov	r0, r1
   14330:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14334:	cmp	r7, #2
   14338:	movwne	r1, #1
   1433c:	orr	r0, r0, r1
   14340:	tst	r0, #1
   14344:	ldreq	r0, [sp, #60]	; 0x3c
   14348:	eoreq	r0, r0, #1
   1434c:	tsteq	r0, #1
   14350:	bne	14460 <__assert_fail@plt+0x30dc>
   14354:	mov	r9, lr
   14358:	tst	r5, #1
   1435c:	bne	1441c <__assert_fail@plt+0x3098>
   14360:	ldr	r6, [sp, #56]	; 0x38
   14364:	mov	r4, #0
   14368:	cmp	r6, #0
   1436c:	beq	14458 <__assert_fail@plt+0x30d4>
   14370:	ldr	r0, [sp, #84]	; 0x54
   14374:	mov	r1, #0
   14378:	cmp	sl, #0
   1437c:	mov	r5, #0
   14380:	str	r1, [fp, #-72]	; 0xffffffb8
   14384:	beq	13554 <__assert_fail@plt+0x21d0>
   14388:	b	14460 <__assert_fail@plt+0x30dc>
   1438c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14390:	ldr	r2, [sp, #84]	; 0x54
   14394:	b	143bc <__assert_fail@plt+0x3038>
   14398:	ldr	ip, [fp, #-84]	; 0xffffffac
   1439c:	mov	r2, #1
   143a0:	mov	lr, r4
   143a4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   143a8:	b	143bc <__assert_fail@plt+0x3038>
   143ac:	ldr	r6, [sp, #80]	; 0x50
   143b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   143b4:	ldr	r2, [sp, #84]	; 0x54
   143b8:	mov	r7, #2
   143bc:	mov	r0, #0
   143c0:	ldr	r1, [fp, #12]
   143c4:	tst	r2, #1
   143c8:	mov	r2, r7
   143cc:	mov	r3, lr
   143d0:	str	r0, [sp, #8]
   143d4:	ldr	r0, [sp, #72]	; 0x48
   143d8:	movwne	r2, #4
   143dc:	cmp	r7, #2
   143e0:	movne	r2, r7
   143e4:	str	r2, [sp]
   143e8:	mov	r2, ip
   143ec:	bic	r1, r1, #2
   143f0:	str	r0, [sp, #12]
   143f4:	ldr	r0, [sp, #76]	; 0x4c
   143f8:	str	r1, [sp, #4]
   143fc:	mov	r1, sl
   14400:	str	r0, [sp, #16]
   14404:	mov	r0, r6
   14408:	bl	134d4 <__assert_fail@plt+0x2150>
   1440c:	mov	r8, r0
   14410:	b	144b8 <__assert_fail@plt+0x3134>
   14414:	ldr	r2, [sp, #84]	; 0x54
   14418:	b	143bc <__assert_fail@plt+0x3038>
   1441c:	mov	r0, #5
   14420:	ldr	r1, [sp, #56]	; 0x38
   14424:	ldr	r2, [fp, #-84]	; 0xffffffac
   14428:	mov	r3, r9
   1442c:	str	r0, [sp]
   14430:	ldr	r0, [fp, #12]
   14434:	str	r0, [sp, #4]
   14438:	ldr	r0, [fp, #16]
   1443c:	str	r0, [sp, #8]
   14440:	ldr	r0, [sp, #72]	; 0x48
   14444:	str	r0, [sp, #12]
   14448:	ldr	r0, [sp, #76]	; 0x4c
   1444c:	str	r0, [sp, #16]
   14450:	ldr	r0, [sp, #80]	; 0x50
   14454:	b	14408 <__assert_fail@plt+0x3084>
   14458:	mov	r0, #0
   1445c:	str	r0, [fp, #-72]	; 0xffffffb8
   14460:	ldr	r1, [sp, #92]	; 0x5c
   14464:	cmp	r1, #0
   14468:	beq	144a8 <__assert_fail@plt+0x3124>
   1446c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14470:	ldr	r2, [sp, #80]	; 0x50
   14474:	tst	r0, #1
   14478:	bne	144ac <__assert_fail@plt+0x3128>
   1447c:	ldrb	r0, [r1]
   14480:	cmp	r0, #0
   14484:	beq	144ac <__assert_fail@plt+0x3128>
   14488:	add	r1, r1, #1
   1448c:	cmp	r8, sl
   14490:	strbcc	r0, [r2, r8]
   14494:	add	r8, r8, #1
   14498:	ldrb	r0, [r1], #1
   1449c:	cmp	r0, #0
   144a0:	bne	1448c <__assert_fail@plt+0x3108>
   144a4:	b	144ac <__assert_fail@plt+0x3128>
   144a8:	ldr	r2, [sp, #80]	; 0x50
   144ac:	cmp	r8, sl
   144b0:	movcc	r0, #0
   144b4:	strbcc	r0, [r2, r8]
   144b8:	mov	r0, r8
   144bc:	sub	sp, fp, #28
   144c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144c4:	mov	r2, #1
   144c8:	b	143a4 <__assert_fail@plt+0x3020>
   144cc:	ldr	r2, [sp, #84]	; 0x54
   144d0:	mov	r7, #5
   144d4:	b	143bc <__assert_fail@plt+0x3038>
   144d8:	bl	1136c <abort@plt>
   144dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144e0:	add	fp, sp, #28
   144e4:	sub	sp, sp, #28
   144e8:	movw	r5, #33288	; 0x8208
   144ec:	cmp	r2, #0
   144f0:	mov	r4, r1
   144f4:	mov	r7, r0
   144f8:	str	r0, [sp, #20]
   144fc:	movt	r5, #2
   14500:	movne	r5, r2
   14504:	bl	11288 <__errno_location@plt>
   14508:	mov	sl, r0
   1450c:	ldm	r5, {r0, r1}
   14510:	ldr	r2, [r5, #40]	; 0x28
   14514:	ldr	r3, [r5, #44]	; 0x2c
   14518:	add	r9, r5, #8
   1451c:	ldr	r6, [sl]
   14520:	orr	r8, r1, #1
   14524:	mov	r1, #0
   14528:	str	r6, [sp, #24]
   1452c:	stm	sp, {r0, r8, r9}
   14530:	str	r2, [sp, #12]
   14534:	str	r3, [sp, #16]
   14538:	mov	r0, #0
   1453c:	mov	r2, r7
   14540:	mov	r3, r4
   14544:	mov	r6, r4
   14548:	bl	134d4 <__assert_fail@plt+0x2150>
   1454c:	add	r7, r0, #1
   14550:	mov	r0, r7
   14554:	bl	15928 <__assert_fail@plt+0x45a4>
   14558:	mov	r4, r0
   1455c:	ldr	r0, [r5]
   14560:	ldr	r2, [r5, #44]	; 0x2c
   14564:	ldr	r1, [r5, #40]	; 0x28
   14568:	mov	r3, r6
   1456c:	stm	sp, {r0, r8, r9}
   14570:	str	r2, [sp, #16]
   14574:	str	r1, [sp, #12]
   14578:	mov	r0, r4
   1457c:	mov	r1, r7
   14580:	ldr	r2, [sp, #20]
   14584:	bl	134d4 <__assert_fail@plt+0x2150>
   14588:	ldr	r0, [sp, #24]
   1458c:	str	r0, [sl]
   14590:	mov	r0, r4
   14594:	sub	sp, fp, #28
   14598:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1459c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a0:	add	fp, sp, #28
   145a4:	sub	sp, sp, #36	; 0x24
   145a8:	movw	r8, #33288	; 0x8208
   145ac:	cmp	r3, #0
   145b0:	mov	r4, r2
   145b4:	str	r2, [sp, #24]
   145b8:	mov	r5, r1
   145bc:	mov	r6, r0
   145c0:	str	r0, [sp, #20]
   145c4:	movt	r8, #2
   145c8:	movne	r8, r3
   145cc:	bl	11288 <__errno_location@plt>
   145d0:	str	r0, [sp, #28]
   145d4:	cmp	r4, #0
   145d8:	add	sl, r8, #8
   145dc:	ldm	r8, {r3, r9}
   145e0:	ldr	r7, [r0]
   145e4:	ldr	r1, [r8, #40]	; 0x28
   145e8:	ldr	r2, [r8, #44]	; 0x2c
   145ec:	mov	r0, #0
   145f0:	orreq	r9, r9, #1
   145f4:	str	r7, [sp, #32]
   145f8:	mov	r7, r5
   145fc:	stm	sp, {r3, r9, sl}
   14600:	str	r1, [sp, #12]
   14604:	str	r2, [sp, #16]
   14608:	mov	r1, #0
   1460c:	mov	r2, r6
   14610:	mov	r3, r5
   14614:	bl	134d4 <__assert_fail@plt+0x2150>
   14618:	add	r4, r0, #1
   1461c:	mov	r5, r0
   14620:	mov	r0, r4
   14624:	bl	15928 <__assert_fail@plt+0x45a4>
   14628:	mov	r6, r0
   1462c:	ldr	r0, [r8]
   14630:	ldr	r2, [r8, #44]	; 0x2c
   14634:	ldr	r1, [r8, #40]	; 0x28
   14638:	mov	r3, r7
   1463c:	stm	sp, {r0, r9, sl}
   14640:	str	r2, [sp, #16]
   14644:	str	r1, [sp, #12]
   14648:	mov	r0, r6
   1464c:	mov	r1, r4
   14650:	ldr	r2, [sp, #20]
   14654:	bl	134d4 <__assert_fail@plt+0x2150>
   14658:	ldr	r0, [sp, #24]
   1465c:	ldr	r1, [sp, #32]
   14660:	ldr	r2, [sp, #28]
   14664:	cmp	r0, #0
   14668:	str	r1, [r2]
   1466c:	strne	r5, [r0]
   14670:	mov	r0, r6
   14674:	sub	sp, fp, #28
   14678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1467c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14680:	add	fp, sp, #24
   14684:	movw	r5, #33068	; 0x812c
   14688:	movw	r8, #33064	; 0x8128
   1468c:	movt	r5, #2
   14690:	movt	r8, #2
   14694:	ldr	r0, [r5]
   14698:	ldr	r4, [r8]
   1469c:	cmp	r0, #2
   146a0:	blt	146cc <__assert_fail@plt+0x3348>
   146a4:	add	r7, r4, #12
   146a8:	mov	r6, #0
   146ac:	ldr	r0, [r7, r6, lsl #3]
   146b0:	bl	1314c <__assert_fail@plt+0x1dc8>
   146b4:	ldr	r1, [r5]
   146b8:	add	r2, r6, #2
   146bc:	add	r0, r6, #1
   146c0:	mov	r6, r0
   146c4:	cmp	r2, r1
   146c8:	blt	146ac <__assert_fail@plt+0x3328>
   146cc:	ldr	r0, [r4, #4]
   146d0:	movw	r7, #33336	; 0x8238
   146d4:	movt	r7, #2
   146d8:	cmp	r0, r7
   146dc:	beq	146f4 <__assert_fail@plt+0x3370>
   146e0:	bl	1314c <__assert_fail@plt+0x1dc8>
   146e4:	movw	r0, #33072	; 0x8130
   146e8:	mov	r6, #256	; 0x100
   146ec:	movt	r0, #2
   146f0:	strd	r6, [r0]
   146f4:	movw	r6, #33072	; 0x8130
   146f8:	movt	r6, #2
   146fc:	cmp	r4, r6
   14700:	beq	14710 <__assert_fail@plt+0x338c>
   14704:	mov	r0, r4
   14708:	bl	1314c <__assert_fail@plt+0x1dc8>
   1470c:	str	r6, [r8]
   14710:	mov	r0, #1
   14714:	str	r0, [r5]
   14718:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1471c:	movw	r3, #33288	; 0x8208
   14720:	mvn	r2, #0
   14724:	movt	r3, #2
   14728:	b	1472c <__assert_fail@plt+0x33a8>
   1472c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14730:	add	fp, sp, #28
   14734:	sub	sp, sp, #44	; 0x2c
   14738:	mov	r7, r3
   1473c:	str	r2, [sp, #36]	; 0x24
   14740:	str	r1, [sp, #32]
   14744:	mov	r5, r0
   14748:	bl	11288 <__errno_location@plt>
   1474c:	cmp	r5, #0
   14750:	blt	148bc <__assert_fail@plt+0x3538>
   14754:	cmn	r5, #-2147483647	; 0x80000001
   14758:	beq	148bc <__assert_fail@plt+0x3538>
   1475c:	movw	r8, #33068	; 0x812c
   14760:	movw	r4, #33064	; 0x8128
   14764:	str	r0, [sp, #28]
   14768:	ldr	r0, [r0]
   1476c:	movt	r8, #2
   14770:	movt	r4, #2
   14774:	ldr	r1, [r8]
   14778:	ldr	r6, [r4]
   1477c:	str	r0, [sp, #24]
   14780:	cmp	r1, r5
   14784:	ble	14790 <__assert_fail@plt+0x340c>
   14788:	mov	sl, r6
   1478c:	b	147f8 <__assert_fail@plt+0x3474>
   14790:	movw	r9, #33072	; 0x8130
   14794:	mov	r0, #8
   14798:	add	r2, r5, #1
   1479c:	str	r1, [fp, #-32]	; 0xffffffe0
   147a0:	mvn	r3, #-2147483648	; 0x80000000
   147a4:	movt	r9, #2
   147a8:	str	r0, [sp]
   147ac:	sub	r2, r2, r1
   147b0:	sub	r1, fp, #32
   147b4:	subs	r0, r6, r9
   147b8:	movne	r0, r6
   147bc:	bl	15b28 <__assert_fail@plt+0x47a4>
   147c0:	cmp	r6, r9
   147c4:	mov	sl, r0
   147c8:	str	r0, [r4]
   147cc:	ldrdeq	r0, [r9]
   147d0:	stmeq	sl, {r0, r1}
   147d4:	ldr	r1, [r8]
   147d8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   147dc:	add	r0, sl, r1, lsl #3
   147e0:	sub	r1, r2, r1
   147e4:	lsl	r2, r1, #3
   147e8:	mov	r1, #0
   147ec:	bl	112ac <memset@plt>
   147f0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   147f4:	str	r0, [r8]
   147f8:	mov	r9, sl
   147fc:	ldr	r6, [r9, r5, lsl #3]!
   14800:	ldr	r4, [r9, #4]!
   14804:	ldm	r7, {r0, r1}
   14808:	ldr	r2, [r7, #40]	; 0x28
   1480c:	ldr	r3, [r7, #44]	; 0x2c
   14810:	orr	r8, r1, #1
   14814:	add	r1, r7, #8
   14818:	stm	sp, {r0, r8}
   1481c:	add	r0, sp, #8
   14820:	str	r1, [sp, #20]
   14824:	stm	r0, {r1, r2, r3}
   14828:	mov	r0, r4
   1482c:	mov	r1, r6
   14830:	ldr	r2, [sp, #32]
   14834:	ldr	r3, [sp, #36]	; 0x24
   14838:	bl	134d4 <__assert_fail@plt+0x2150>
   1483c:	cmp	r6, r0
   14840:	bhi	148a4 <__assert_fail@plt+0x3520>
   14844:	add	r6, r0, #1
   14848:	movw	r0, #33336	; 0x8238
   1484c:	movt	r0, #2
   14850:	str	r6, [sl, r5, lsl #3]
   14854:	cmp	r4, r0
   14858:	beq	14864 <__assert_fail@plt+0x34e0>
   1485c:	mov	r0, r4
   14860:	bl	1314c <__assert_fail@plt+0x1dc8>
   14864:	mov	r0, r6
   14868:	bl	15928 <__assert_fail@plt+0x45a4>
   1486c:	str	r0, [r9]
   14870:	mov	r4, r0
   14874:	add	r3, sp, #8
   14878:	ldr	r0, [r7]
   1487c:	ldr	r1, [r7, #40]	; 0x28
   14880:	ldr	r2, [r7, #44]	; 0x2c
   14884:	stm	sp, {r0, r8}
   14888:	ldr	r0, [sp, #20]
   1488c:	stm	r3, {r0, r1, r2}
   14890:	mov	r0, r4
   14894:	mov	r1, r6
   14898:	ldr	r2, [sp, #32]
   1489c:	ldr	r3, [sp, #36]	; 0x24
   148a0:	bl	134d4 <__assert_fail@plt+0x2150>
   148a4:	ldr	r0, [sp, #28]
   148a8:	ldr	r1, [sp, #24]
   148ac:	str	r1, [r0]
   148b0:	mov	r0, r4
   148b4:	sub	sp, fp, #28
   148b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148bc:	bl	1136c <abort@plt>
   148c0:	movw	r3, #33288	; 0x8208
   148c4:	movt	r3, #2
   148c8:	b	1472c <__assert_fail@plt+0x33a8>
   148cc:	movw	r3, #33288	; 0x8208
   148d0:	mov	r1, r0
   148d4:	mov	r0, #0
   148d8:	mvn	r2, #0
   148dc:	movt	r3, #2
   148e0:	b	1472c <__assert_fail@plt+0x33a8>
   148e4:	movw	r3, #33288	; 0x8208
   148e8:	mov	r2, r1
   148ec:	mov	r1, r0
   148f0:	mov	r0, #0
   148f4:	movt	r3, #2
   148f8:	b	1472c <__assert_fail@plt+0x33a8>
   148fc:	push	{fp, lr}
   14900:	mov	fp, sp
   14904:	sub	sp, sp, #48	; 0x30
   14908:	vmov.i32	q8, #0	; 0x00000000
   1490c:	mov	ip, #32
   14910:	mov	r3, sp
   14914:	mov	lr, r2
   14918:	cmp	r1, #10
   1491c:	add	r2, r3, #16
   14920:	vst1.64	{d16-d17}, [r3], ip
   14924:	vst1.64	{d16-d17}, [r3]
   14928:	vst1.64	{d16-d17}, [r2]
   1492c:	beq	1494c <__assert_fail@plt+0x35c8>
   14930:	str	r1, [sp]
   14934:	mov	r3, sp
   14938:	mov	r1, lr
   1493c:	mvn	r2, #0
   14940:	bl	1472c <__assert_fail@plt+0x33a8>
   14944:	mov	sp, fp
   14948:	pop	{fp, pc}
   1494c:	bl	1136c <abort@plt>
   14950:	push	{r4, sl, fp, lr}
   14954:	add	fp, sp, #8
   14958:	sub	sp, sp, #48	; 0x30
   1495c:	mov	ip, r3
   14960:	mov	r3, sp
   14964:	vmov.i32	q8, #0	; 0x00000000
   14968:	mov	lr, #32
   1496c:	cmp	r1, #10
   14970:	add	r4, r3, #16
   14974:	vst1.64	{d16-d17}, [r3], lr
   14978:	vst1.64	{d16-d17}, [r3]
   1497c:	vst1.64	{d16-d17}, [r4]
   14980:	beq	149a0 <__assert_fail@plt+0x361c>
   14984:	str	r1, [sp]
   14988:	mov	r1, r2
   1498c:	mov	r3, sp
   14990:	mov	r2, ip
   14994:	bl	1472c <__assert_fail@plt+0x33a8>
   14998:	sub	sp, fp, #8
   1499c:	pop	{r4, sl, fp, pc}
   149a0:	bl	1136c <abort@plt>
   149a4:	push	{fp, lr}
   149a8:	mov	fp, sp
   149ac:	sub	sp, sp, #48	; 0x30
   149b0:	mov	r3, sp
   149b4:	vmov.i32	q8, #0	; 0x00000000
   149b8:	mov	ip, #32
   149bc:	cmp	r0, #10
   149c0:	add	r2, r3, #16
   149c4:	vst1.64	{d16-d17}, [r3], ip
   149c8:	vst1.64	{d16-d17}, [r3]
   149cc:	vst1.64	{d16-d17}, [r2]
   149d0:	beq	149f0 <__assert_fail@plt+0x366c>
   149d4:	str	r0, [sp]
   149d8:	mov	r3, sp
   149dc:	mov	r0, #0
   149e0:	mvn	r2, #0
   149e4:	bl	1472c <__assert_fail@plt+0x33a8>
   149e8:	mov	sp, fp
   149ec:	pop	{fp, pc}
   149f0:	bl	1136c <abort@plt>
   149f4:	push	{fp, lr}
   149f8:	mov	fp, sp
   149fc:	sub	sp, sp, #48	; 0x30
   14a00:	mov	r3, sp
   14a04:	vmov.i32	q8, #0	; 0x00000000
   14a08:	mov	ip, #32
   14a0c:	cmp	r0, #10
   14a10:	add	lr, r3, #16
   14a14:	vst1.64	{d16-d17}, [r3], ip
   14a18:	vst1.64	{d16-d17}, [r3]
   14a1c:	vst1.64	{d16-d17}, [lr]
   14a20:	beq	14a3c <__assert_fail@plt+0x36b8>
   14a24:	str	r0, [sp]
   14a28:	mov	r3, sp
   14a2c:	mov	r0, #0
   14a30:	bl	1472c <__assert_fail@plt+0x33a8>
   14a34:	mov	sp, fp
   14a38:	pop	{fp, pc}
   14a3c:	bl	1136c <abort@plt>
   14a40:	push	{r4, sl, fp, lr}
   14a44:	add	fp, sp, #8
   14a48:	sub	sp, sp, #48	; 0x30
   14a4c:	mov	lr, r0
   14a50:	movw	r0, #33288	; 0x8208
   14a54:	mov	r3, #32
   14a58:	mov	ip, r1
   14a5c:	mov	r4, #1
   14a60:	movt	r0, #2
   14a64:	add	r1, r0, #16
   14a68:	vld1.64	{d16-d17}, [r0], r3
   14a6c:	mov	r3, sp
   14a70:	vld1.64	{d18-d19}, [r1]
   14a74:	add	r1, r3, #16
   14a78:	vld1.64	{d20-d21}, [r0]
   14a7c:	add	r0, r3, #32
   14a80:	vst1.64	{d18-d19}, [r1]
   14a84:	mov	r1, r3
   14a88:	vst1.64	{d20-d21}, [r0]
   14a8c:	mov	r0, #28
   14a90:	and	r0, r0, r2, lsr #3
   14a94:	and	r2, r2, #31
   14a98:	vst1.64	{d16-d17}, [r1], r0
   14a9c:	ldr	r0, [r1, #8]
   14aa0:	bic	r4, r4, r0, lsr r2
   14aa4:	eor	r0, r0, r4, lsl r2
   14aa8:	mov	r2, ip
   14aac:	str	r0, [r1, #8]
   14ab0:	mov	r0, #0
   14ab4:	mov	r1, lr
   14ab8:	bl	1472c <__assert_fail@plt+0x33a8>
   14abc:	sub	sp, fp, #8
   14ac0:	pop	{r4, sl, fp, pc}
   14ac4:	push	{fp, lr}
   14ac8:	mov	fp, sp
   14acc:	sub	sp, sp, #48	; 0x30
   14ad0:	mov	ip, r0
   14ad4:	movw	r0, #33288	; 0x8208
   14ad8:	mov	r3, #32
   14adc:	movt	r0, #2
   14ae0:	add	r2, r0, #16
   14ae4:	vld1.64	{d16-d17}, [r0], r3
   14ae8:	mov	r3, sp
   14aec:	vld1.64	{d18-d19}, [r2]
   14af0:	add	r2, r3, #16
   14af4:	vld1.64	{d20-d21}, [r0]
   14af8:	add	r0, r3, #32
   14afc:	vst1.64	{d18-d19}, [r2]
   14b00:	mov	r2, r3
   14b04:	vst1.64	{d20-d21}, [r0]
   14b08:	mov	r0, #28
   14b0c:	and	r0, r0, r1, lsr #3
   14b10:	and	r1, r1, #31
   14b14:	vst1.64	{d16-d17}, [r2], r0
   14b18:	mov	r0, #1
   14b1c:	ldr	lr, [r2, #8]
   14b20:	bic	r0, r0, lr, lsr r1
   14b24:	eor	r0, lr, r0, lsl r1
   14b28:	mov	r1, ip
   14b2c:	str	r0, [r2, #8]
   14b30:	mov	r0, #0
   14b34:	mvn	r2, #0
   14b38:	bl	1472c <__assert_fail@plt+0x33a8>
   14b3c:	mov	sp, fp
   14b40:	pop	{fp, pc}
   14b44:	push	{fp, lr}
   14b48:	mov	fp, sp
   14b4c:	sub	sp, sp, #48	; 0x30
   14b50:	movw	r2, #33288	; 0x8208
   14b54:	mov	r3, #32
   14b58:	mov	r1, r0
   14b5c:	movt	r2, #2
   14b60:	add	r0, r2, #16
   14b64:	vld1.64	{d16-d17}, [r2], r3
   14b68:	mov	r3, sp
   14b6c:	vld1.64	{d18-d19}, [r0]
   14b70:	add	r0, r3, #16
   14b74:	vld1.64	{d20-d21}, [r2]
   14b78:	mov	r2, r3
   14b7c:	vst1.64	{d18-d19}, [r0]
   14b80:	add	r0, r3, #32
   14b84:	vst1.64	{d20-d21}, [r0]
   14b88:	mov	r0, #12
   14b8c:	vst1.64	{d16-d17}, [r2], r0
   14b90:	ldr	r0, [r2]
   14b94:	orr	r0, r0, #67108864	; 0x4000000
   14b98:	str	r0, [r2]
   14b9c:	mov	r0, #0
   14ba0:	mvn	r2, #0
   14ba4:	bl	1472c <__assert_fail@plt+0x33a8>
   14ba8:	mov	sp, fp
   14bac:	pop	{fp, pc}
   14bb0:	push	{fp, lr}
   14bb4:	mov	fp, sp
   14bb8:	sub	sp, sp, #48	; 0x30
   14bbc:	mov	ip, r1
   14bc0:	mov	r1, r0
   14bc4:	movw	r0, #33288	; 0x8208
   14bc8:	mov	r3, #32
   14bcc:	movt	r0, #2
   14bd0:	add	r2, r0, #16
   14bd4:	vld1.64	{d16-d17}, [r0], r3
   14bd8:	mov	r3, sp
   14bdc:	vld1.64	{d18-d19}, [r2]
   14be0:	add	r2, r3, #16
   14be4:	vld1.64	{d20-d21}, [r0]
   14be8:	add	r0, r3, #32
   14bec:	vst1.64	{d18-d19}, [r2]
   14bf0:	mov	r2, r3
   14bf4:	vst1.64	{d20-d21}, [r0]
   14bf8:	mov	r0, #12
   14bfc:	vst1.64	{d16-d17}, [r2], r0
   14c00:	ldr	r0, [r2]
   14c04:	orr	r0, r0, #67108864	; 0x4000000
   14c08:	str	r0, [r2]
   14c0c:	mov	r0, #0
   14c10:	mov	r2, ip
   14c14:	bl	1472c <__assert_fail@plt+0x33a8>
   14c18:	mov	sp, fp
   14c1c:	pop	{fp, pc}
   14c20:	push	{r4, sl, fp, lr}
   14c24:	add	fp, sp, #8
   14c28:	sub	sp, sp, #96	; 0x60
   14c2c:	mov	ip, r2
   14c30:	mov	r2, sp
   14c34:	vmov.i32	q8, #0	; 0x00000000
   14c38:	mov	r4, #28
   14c3c:	cmp	r1, #10
   14c40:	mov	r3, r2
   14c44:	add	lr, r2, #16
   14c48:	vst1.64	{d16-d17}, [r3], r4
   14c4c:	vst1.64	{d16-d17}, [lr]
   14c50:	vst1.32	{d16-d17}, [r3]
   14c54:	beq	14ca4 <__assert_fail@plt+0x3920>
   14c58:	vld1.64	{d16-d17}, [r2], r4
   14c5c:	vld1.64	{d18-d19}, [lr]
   14c60:	add	r3, sp, #48	; 0x30
   14c64:	add	r4, r3, #4
   14c68:	vld1.32	{d20-d21}, [r2]
   14c6c:	add	r2, r3, #20
   14c70:	vst1.32	{d16-d17}, [r4]
   14c74:	vst1.32	{d18-d19}, [r2]
   14c78:	add	r2, r3, #32
   14c7c:	vst1.32	{d20-d21}, [r2]
   14c80:	str	r1, [sp, #48]	; 0x30
   14c84:	mvn	r2, #0
   14c88:	ldr	r1, [sp, #60]	; 0x3c
   14c8c:	orr	r1, r1, #67108864	; 0x4000000
   14c90:	str	r1, [sp, #60]	; 0x3c
   14c94:	mov	r1, ip
   14c98:	bl	1472c <__assert_fail@plt+0x33a8>
   14c9c:	sub	sp, fp, #8
   14ca0:	pop	{r4, sl, fp, pc}
   14ca4:	bl	1136c <abort@plt>
   14ca8:	push	{r4, r5, fp, lr}
   14cac:	add	fp, sp, #8
   14cb0:	sub	sp, sp, #48	; 0x30
   14cb4:	mov	ip, r3
   14cb8:	movw	r3, #33288	; 0x8208
   14cbc:	mov	lr, #32
   14cc0:	cmp	r1, #0
   14cc4:	mov	r5, sp
   14cc8:	movt	r3, #2
   14ccc:	cmpne	r2, #0
   14cd0:	add	r4, r3, #16
   14cd4:	vld1.64	{d16-d17}, [r3], lr
   14cd8:	vld1.64	{d18-d19}, [r4]
   14cdc:	add	r4, r5, #16
   14ce0:	vld1.64	{d20-d21}, [r3]
   14ce4:	vst1.64	{d16-d17}, [r5], lr
   14ce8:	mov	r3, #10
   14cec:	vst1.64	{d18-d19}, [r4]
   14cf0:	vst1.64	{d20-d21}, [r5]
   14cf4:	str	r3, [sp]
   14cf8:	bne	14d00 <__assert_fail@plt+0x397c>
   14cfc:	bl	1136c <abort@plt>
   14d00:	str	r2, [sp, #44]	; 0x2c
   14d04:	str	r1, [sp, #40]	; 0x28
   14d08:	mov	r3, sp
   14d0c:	mov	r1, ip
   14d10:	mvn	r2, #0
   14d14:	bl	1472c <__assert_fail@plt+0x33a8>
   14d18:	sub	sp, fp, #8
   14d1c:	pop	{r4, r5, fp, pc}
   14d20:	push	{r4, r5, fp, lr}
   14d24:	add	fp, sp, #8
   14d28:	sub	sp, sp, #48	; 0x30
   14d2c:	mov	lr, r3
   14d30:	movw	r3, #33288	; 0x8208
   14d34:	mov	ip, #32
   14d38:	cmp	r1, #0
   14d3c:	mov	r5, sp
   14d40:	movt	r3, #2
   14d44:	cmpne	r2, #0
   14d48:	add	r4, r3, #16
   14d4c:	vld1.64	{d16-d17}, [r3], ip
   14d50:	vld1.64	{d18-d19}, [r4]
   14d54:	add	r4, r5, #16
   14d58:	vld1.64	{d20-d21}, [r3]
   14d5c:	vst1.64	{d16-d17}, [r5], ip
   14d60:	mov	r3, #10
   14d64:	vst1.64	{d18-d19}, [r4]
   14d68:	vst1.64	{d20-d21}, [r5]
   14d6c:	str	r3, [sp]
   14d70:	bne	14d78 <__assert_fail@plt+0x39f4>
   14d74:	bl	1136c <abort@plt>
   14d78:	ldr	ip, [fp, #8]
   14d7c:	str	r2, [sp, #44]	; 0x2c
   14d80:	str	r1, [sp, #40]	; 0x28
   14d84:	mov	r3, sp
   14d88:	mov	r1, lr
   14d8c:	mov	r2, ip
   14d90:	bl	1472c <__assert_fail@plt+0x33a8>
   14d94:	sub	sp, fp, #8
   14d98:	pop	{r4, r5, fp, pc}
   14d9c:	push	{r4, sl, fp, lr}
   14da0:	add	fp, sp, #8
   14da4:	sub	sp, sp, #48	; 0x30
   14da8:	mov	ip, r2
   14dac:	movw	r2, #33288	; 0x8208
   14db0:	mov	lr, #32
   14db4:	cmp	r0, #0
   14db8:	mov	r4, sp
   14dbc:	movt	r2, #2
   14dc0:	cmpne	r1, #0
   14dc4:	add	r3, r2, #16
   14dc8:	vld1.64	{d16-d17}, [r2], lr
   14dcc:	vld1.64	{d18-d19}, [r3]
   14dd0:	add	r3, r4, #16
   14dd4:	vld1.64	{d20-d21}, [r2]
   14dd8:	vst1.64	{d16-d17}, [r4], lr
   14ddc:	mov	r2, #10
   14de0:	vst1.64	{d18-d19}, [r3]
   14de4:	vst1.64	{d20-d21}, [r4]
   14de8:	str	r2, [sp]
   14dec:	bne	14df4 <__assert_fail@plt+0x3a70>
   14df0:	bl	1136c <abort@plt>
   14df4:	str	r1, [sp, #44]	; 0x2c
   14df8:	str	r0, [sp, #40]	; 0x28
   14dfc:	mov	r3, sp
   14e00:	mov	r0, #0
   14e04:	mov	r1, ip
   14e08:	mvn	r2, #0
   14e0c:	bl	1472c <__assert_fail@plt+0x33a8>
   14e10:	sub	sp, fp, #8
   14e14:	pop	{r4, sl, fp, pc}
   14e18:	push	{r4, r5, fp, lr}
   14e1c:	add	fp, sp, #8
   14e20:	sub	sp, sp, #48	; 0x30
   14e24:	mov	lr, r2
   14e28:	movw	r2, #33288	; 0x8208
   14e2c:	mov	ip, r3
   14e30:	mov	r3, #32
   14e34:	cmp	r0, #0
   14e38:	mov	r5, sp
   14e3c:	movt	r2, #2
   14e40:	cmpne	r1, #0
   14e44:	add	r4, r2, #16
   14e48:	vld1.64	{d16-d17}, [r2], r3
   14e4c:	vld1.64	{d18-d19}, [r4]
   14e50:	add	r4, r5, #16
   14e54:	vld1.64	{d20-d21}, [r2]
   14e58:	vst1.64	{d16-d17}, [r5], r3
   14e5c:	mov	r2, #10
   14e60:	vst1.64	{d18-d19}, [r4]
   14e64:	vst1.64	{d20-d21}, [r5]
   14e68:	str	r2, [sp]
   14e6c:	bne	14e74 <__assert_fail@plt+0x3af0>
   14e70:	bl	1136c <abort@plt>
   14e74:	str	r1, [sp, #44]	; 0x2c
   14e78:	str	r0, [sp, #40]	; 0x28
   14e7c:	mov	r3, sp
   14e80:	mov	r0, #0
   14e84:	mov	r1, lr
   14e88:	mov	r2, ip
   14e8c:	bl	1472c <__assert_fail@plt+0x33a8>
   14e90:	sub	sp, fp, #8
   14e94:	pop	{r4, r5, fp, pc}
   14e98:	movw	r3, #33080	; 0x8138
   14e9c:	movt	r3, #2
   14ea0:	b	1472c <__assert_fail@plt+0x33a8>
   14ea4:	movw	r3, #33080	; 0x8138
   14ea8:	mov	r2, r1
   14eac:	mov	r1, r0
   14eb0:	mov	r0, #0
   14eb4:	movt	r3, #2
   14eb8:	b	1472c <__assert_fail@plt+0x33a8>
   14ebc:	movw	r3, #33080	; 0x8138
   14ec0:	mvn	r2, #0
   14ec4:	movt	r3, #2
   14ec8:	b	1472c <__assert_fail@plt+0x33a8>
   14ecc:	movw	r3, #33080	; 0x8138
   14ed0:	mov	r1, r0
   14ed4:	mov	r0, #0
   14ed8:	mvn	r2, #0
   14edc:	movt	r3, #2
   14ee0:	b	1472c <__assert_fail@plt+0x33a8>
   14ee4:	push	{r4, r5, fp, lr}
   14ee8:	add	fp, sp, #8
   14eec:	mov	r5, r0
   14ef0:	mov	r4, r1
   14ef4:	mov	r0, #0
   14ef8:	mov	r2, #5
   14efc:	mov	r1, r5
   14f00:	bl	11144 <dcgettext@plt>
   14f04:	cmp	r0, r5
   14f08:	popne	{r4, r5, fp, pc}
   14f0c:	bl	16194 <__assert_fail@plt+0x4e10>
   14f10:	ldrb	r1, [r0]
   14f14:	and	r1, r1, #223	; 0xdf
   14f18:	cmp	r1, #71	; 0x47
   14f1c:	beq	14f84 <__assert_fail@plt+0x3c00>
   14f20:	cmp	r1, #85	; 0x55
   14f24:	bne	14fa8 <__assert_fail@plt+0x3c24>
   14f28:	ldrb	r1, [r0, #1]
   14f2c:	and	r1, r1, #223	; 0xdf
   14f30:	cmp	r1, #84	; 0x54
   14f34:	bne	14fa8 <__assert_fail@plt+0x3c24>
   14f38:	ldrb	r1, [r0, #2]
   14f3c:	and	r1, r1, #223	; 0xdf
   14f40:	cmp	r1, #70	; 0x46
   14f44:	ldrbeq	r1, [r0, #3]
   14f48:	cmpeq	r1, #45	; 0x2d
   14f4c:	bne	14fa8 <__assert_fail@plt+0x3c24>
   14f50:	ldrb	r1, [r0, #4]
   14f54:	cmp	r1, #56	; 0x38
   14f58:	ldrbeq	r0, [r0, #5]
   14f5c:	cmpeq	r0, #0
   14f60:	bne	14fa8 <__assert_fail@plt+0x3c24>
   14f64:	ldrb	r1, [r5]
   14f68:	movw	r2, #28496	; 0x6f50
   14f6c:	movw	r0, #28500	; 0x6f54
   14f70:	movt	r2, #1
   14f74:	movt	r0, #1
   14f78:	cmp	r1, #96	; 0x60
   14f7c:	moveq	r0, r2
   14f80:	pop	{r4, r5, fp, pc}
   14f84:	ldrb	r1, [r0, #1]
   14f88:	and	r1, r1, #223	; 0xdf
   14f8c:	cmp	r1, #66	; 0x42
   14f90:	bne	14fa8 <__assert_fail@plt+0x3c24>
   14f94:	ldrb	r1, [r0, #2]
   14f98:	cmp	r1, #49	; 0x31
   14f9c:	ldrbeq	r1, [r0, #3]
   14fa0:	cmpeq	r1, #56	; 0x38
   14fa4:	beq	14fc4 <__assert_fail@plt+0x3c40>
   14fa8:	movw	r1, #28490	; 0x6f4a
   14fac:	movw	r0, #28494	; 0x6f4e
   14fb0:	cmp	r4, #9
   14fb4:	movt	r1, #1
   14fb8:	movt	r0, #1
   14fbc:	moveq	r0, r1
   14fc0:	pop	{r4, r5, fp, pc}
   14fc4:	ldrb	r1, [r0, #4]
   14fc8:	cmp	r1, #48	; 0x30
   14fcc:	ldrbeq	r1, [r0, #5]
   14fd0:	cmpeq	r1, #51	; 0x33
   14fd4:	bne	14fa8 <__assert_fail@plt+0x3c24>
   14fd8:	ldrb	r1, [r0, #6]
   14fdc:	cmp	r1, #48	; 0x30
   14fe0:	ldrbeq	r0, [r0, #7]
   14fe4:	cmpeq	r0, #0
   14fe8:	bne	14fa8 <__assert_fail@plt+0x3c24>
   14fec:	ldrb	r1, [r5]
   14ff0:	movw	r2, #28504	; 0x6f58
   14ff4:	movw	r0, #28508	; 0x6f5c
   14ff8:	movt	r2, #1
   14ffc:	movt	r0, #1
   15000:	b	14f78 <__assert_fail@plt+0x3bf4>
   15004:	push	{r4, r5, fp, lr}
   15008:	add	fp, sp, #8
   1500c:	mov	r5, r0
   15010:	mov	r0, #33	; 0x21
   15014:	bl	158f8 <__assert_fail@plt+0x4574>
   15018:	add	r1, r5, #44	; 0x2c
   1501c:	mov	r2, #32
   15020:	mov	r4, r0
   15024:	bl	112b8 <strncpy@plt>
   15028:	mov	r5, #0
   1502c:	mov	r0, r4
   15030:	strb	r5, [r4, #32]
   15034:	bl	11270 <strlen@plt>
   15038:	cmp	r0, #1
   1503c:	blt	15064 <__assert_fail@plt+0x3ce0>
   15040:	add	r1, r4, r0
   15044:	mov	r0, r1
   15048:	ldrb	r2, [r0, #-1]!
   1504c:	cmp	r2, #32
   15050:	bne	15064 <__assert_fail@plt+0x3ce0>
   15054:	strb	r5, [r1, #-1]
   15058:	cmp	r4, r0
   1505c:	mov	r1, r0
   15060:	bcc	15048 <__assert_fail@plt+0x3cc4>
   15064:	mov	r0, r4
   15068:	pop	{r4, r5, fp, pc}
   1506c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15070:	add	fp, sp, #28
   15074:	sub	sp, sp, #20
   15078:	mov	r6, #0
   1507c:	mov	r5, r3
   15080:	str	r2, [sp, #12]
   15084:	str	r1, [sp, #8]
   15088:	str	r6, [sp, #16]
   1508c:	bl	110d8 <utmpxname@plt>
   15090:	bl	1115c <setutxent@plt>
   15094:	bl	11378 <getutxent@plt>
   15098:	cmp	r0, #0
   1509c:	beq	15178 <__assert_fail@plt+0x3df4>
   150a0:	mov	r4, r0
   150a4:	and	r7, r5, #1
   150a8:	and	r8, r5, #2
   150ac:	mov	r5, #0
   150b0:	mov	r9, #384	; 0x180
   150b4:	add	sl, sp, #16
   150b8:	mov	r6, #0
   150bc:	ldrb	r0, [r4, #44]	; 0x2c
   150c0:	cmp	r0, #0
   150c4:	mov	r0, #0
   150c8:	ldrhne	r0, [r4]
   150cc:	subne	r0, r0, #7
   150d0:	clzne	r0, r0
   150d4:	lsrne	r0, r0, #5
   150d8:	cmp	r8, #0
   150dc:	beq	150e8 <__assert_fail@plt+0x3d64>
   150e0:	cmp	r0, #0
   150e4:	beq	15164 <__assert_fail@plt+0x3de0>
   150e8:	cmp	r7, #0
   150ec:	beq	15124 <__assert_fail@plt+0x3da0>
   150f0:	eors	r0, r0, #1
   150f4:	bne	15124 <__assert_fail@plt+0x3da0>
   150f8:	ldr	r0, [r4, #4]
   150fc:	cmp	r0, #1
   15100:	blt	15124 <__assert_fail@plt+0x3da0>
   15104:	mov	r1, #0
   15108:	bl	11240 <kill@plt>
   1510c:	cmn	r0, #1
   15110:	bgt	15124 <__assert_fail@plt+0x3da0>
   15114:	bl	11288 <__errno_location@plt>
   15118:	ldr	r0, [r0]
   1511c:	cmp	r0, #3
   15120:	beq	15164 <__assert_fail@plt+0x3de0>
   15124:	ldr	r0, [sp, #16]
   15128:	cmp	r5, r0
   1512c:	bne	1514c <__assert_fail@plt+0x3dc8>
   15130:	mov	r0, r6
   15134:	mov	r1, sl
   15138:	mov	r2, #1
   1513c:	mvn	r3, #0
   15140:	str	r9, [sp]
   15144:	bl	15b28 <__assert_fail@plt+0x47a4>
   15148:	mov	r6, r0
   1514c:	add	r0, r5, r5, lsl #1
   15150:	mov	r1, r4
   15154:	mov	r2, #384	; 0x180
   15158:	add	r0, r6, r0, lsl #7
   1515c:	bl	11108 <memcpy@plt>
   15160:	add	r5, r5, #1
   15164:	bl	11378 <getutxent@plt>
   15168:	mov	r4, r0
   1516c:	cmp	r0, #0
   15170:	bne	150bc <__assert_fail@plt+0x3d38>
   15174:	b	1517c <__assert_fail@plt+0x3df8>
   15178:	mov	r5, #0
   1517c:	bl	11300 <endutxent@plt>
   15180:	ldr	r0, [sp, #8]
   15184:	str	r5, [r0]
   15188:	ldr	r0, [sp, #12]
   1518c:	str	r6, [r0]
   15190:	mov	r0, #0
   15194:	sub	sp, fp, #28
   15198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1519c:	push	{r4, r5, r6, r7, fp, lr}
   151a0:	add	fp, sp, #16
   151a4:	mov	r4, r1
   151a8:	mov	r1, #0
   151ac:	mov	r6, r2
   151b0:	bl	1130c <setlocale@plt>
   151b4:	cmp	r0, #0
   151b8:	beq	151e8 <__assert_fail@plt+0x3e64>
   151bc:	mov	r7, r0
   151c0:	bl	11270 <strlen@plt>
   151c4:	cmp	r0, r6
   151c8:	bcs	15208 <__assert_fail@plt+0x3e84>
   151cc:	add	r2, r0, #1
   151d0:	mov	r0, r4
   151d4:	mov	r1, r7
   151d8:	bl	11108 <memcpy@plt>
   151dc:	mov	r5, #0
   151e0:	mov	r0, r5
   151e4:	pop	{r4, r5, r6, r7, fp, pc}
   151e8:	cmp	r6, #0
   151ec:	mov	r5, #22
   151f0:	movne	r0, #0
   151f4:	strbne	r0, [r4]
   151f8:	movne	r0, r5
   151fc:	popne	{r4, r5, r6, r7, fp, pc}
   15200:	mov	r0, r5
   15204:	pop	{r4, r5, r6, r7, fp, pc}
   15208:	mov	r5, #34	; 0x22
   1520c:	cmp	r6, #0
   15210:	beq	15230 <__assert_fail@plt+0x3eac>
   15214:	sub	r6, r6, #1
   15218:	mov	r0, r4
   1521c:	mov	r1, r7
   15220:	mov	r2, r6
   15224:	bl	11108 <memcpy@plt>
   15228:	mov	r0, #0
   1522c:	strb	r0, [r4, r6]
   15230:	mov	r0, r5
   15234:	pop	{r4, r5, r6, r7, fp, pc}
   15238:	mov	r1, #0
   1523c:	b	1130c <setlocale@plt>
   15240:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15244:	add	fp, sp, #24
   15248:	sub	sp, sp, #32
   1524c:	ldr	r6, [fp, #12]
   15250:	ldr	r7, [fp, #8]
   15254:	mov	r4, r2
   15258:	mov	r8, r0
   1525c:	cmp	r1, #0
   15260:	beq	15288 <__assert_fail@plt+0x3f04>
   15264:	movw	r2, #28596	; 0x6fb4
   15268:	mov	r5, r1
   1526c:	str	r3, [sp, #4]
   15270:	str	r4, [sp]
   15274:	mov	r0, r8
   15278:	mov	r1, #1
   1527c:	movt	r2, #1
   15280:	mov	r3, r5
   15284:	b	152a0 <__assert_fail@plt+0x3f1c>
   15288:	movw	r2, #28608	; 0x6fc0
   1528c:	str	r3, [sp]
   15290:	mov	r0, r8
   15294:	mov	r1, #1
   15298:	mov	r3, r4
   1529c:	movt	r2, #1
   152a0:	bl	112dc <__fprintf_chk@plt>
   152a4:	movw	r1, #28615	; 0x6fc7
   152a8:	mov	r0, #0
   152ac:	mov	r2, #5
   152b0:	movt	r1, #1
   152b4:	bl	11144 <dcgettext@plt>
   152b8:	movw	r2, #29333	; 0x7295
   152bc:	mov	r3, r0
   152c0:	movw	r0, #2022	; 0x7e6
   152c4:	mov	r1, #1
   152c8:	str	r0, [sp]
   152cc:	movt	r2, #1
   152d0:	mov	r0, r8
   152d4:	bl	112dc <__fprintf_chk@plt>
   152d8:	movw	r4, #27522	; 0x6b82
   152dc:	mov	r1, r8
   152e0:	movt	r4, #1
   152e4:	mov	r0, r4
   152e8:	bl	110a8 <fputs_unlocked@plt>
   152ec:	movw	r1, #28619	; 0x6fcb
   152f0:	mov	r0, #0
   152f4:	mov	r2, #5
   152f8:	movt	r1, #1
   152fc:	bl	11144 <dcgettext@plt>
   15300:	movw	r3, #28790	; 0x7076
   15304:	mov	r2, r0
   15308:	mov	r0, r8
   1530c:	mov	r1, #1
   15310:	movt	r3, #1
   15314:	bl	112dc <__fprintf_chk@plt>
   15318:	mov	r0, r4
   1531c:	mov	r1, r8
   15320:	bl	110a8 <fputs_unlocked@plt>
   15324:	cmp	r6, #9
   15328:	bhi	15364 <__assert_fail@plt+0x3fe0>
   1532c:	add	r0, pc, #0
   15330:	ldr	pc, [r0, r6, lsl #2]
   15334:	andeq	r5, r1, ip, asr r3
   15338:	andeq	r5, r1, r0, ror r3
   1533c:	andeq	r5, r1, r0, lsr #7
   15340:	andeq	r5, r1, r8, asr #7
   15344:	strdeq	r5, [r1], -r0
   15348:	andeq	r5, r1, r8, lsl r4
   1534c:	andeq	r5, r1, r0, asr #8
   15350:	andeq	r5, r1, r8, ror r4
   15354:	andeq	r5, r1, r8, lsl r5
   15358:	andeq	r5, r1, r0, asr #9
   1535c:	sub	sp, fp, #24
   15360:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15364:	movw	r1, #29143	; 0x71d7
   15368:	movt	r1, #1
   1536c:	b	154c8 <__assert_fail@plt+0x4144>
   15370:	movw	r1, #28824	; 0x7098
   15374:	mov	r0, #0
   15378:	mov	r2, #5
   1537c:	movt	r1, #1
   15380:	bl	11144 <dcgettext@plt>
   15384:	ldr	r3, [r7]
   15388:	mov	r2, r0
   1538c:	mov	r0, r8
   15390:	mov	r1, #1
   15394:	sub	sp, fp, #24
   15398:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1539c:	b	112dc <__fprintf_chk@plt>
   153a0:	movw	r1, #28840	; 0x70a8
   153a4:	mov	r0, #0
   153a8:	mov	r2, #5
   153ac:	movt	r1, #1
   153b0:	bl	11144 <dcgettext@plt>
   153b4:	mov	r2, r0
   153b8:	ldr	r3, [r7]
   153bc:	ldr	r0, [r7, #4]
   153c0:	str	r0, [sp]
   153c4:	b	154b4 <__assert_fail@plt+0x4130>
   153c8:	movw	r1, #28863	; 0x70bf
   153cc:	mov	r0, #0
   153d0:	mov	r2, #5
   153d4:	movt	r1, #1
   153d8:	bl	11144 <dcgettext@plt>
   153dc:	ldr	r3, [r7]
   153e0:	mov	r2, r0
   153e4:	ldmib	r7, {r0, r1}
   153e8:	stm	sp, {r0, r1}
   153ec:	b	154b4 <__assert_fail@plt+0x4130>
   153f0:	movw	r1, #28891	; 0x70db
   153f4:	mov	r0, #0
   153f8:	mov	r2, #5
   153fc:	movt	r1, #1
   15400:	bl	11144 <dcgettext@plt>
   15404:	ldr	r3, [r7]
   15408:	mov	r2, r0
   1540c:	ldmib	r7, {r0, r1, r7}
   15410:	stm	sp, {r0, r1, r7}
   15414:	b	154b4 <__assert_fail@plt+0x4130>
   15418:	movw	r1, #28923	; 0x70fb
   1541c:	mov	r0, #0
   15420:	mov	r2, #5
   15424:	movt	r1, #1
   15428:	bl	11144 <dcgettext@plt>
   1542c:	ldr	r3, [r7]
   15430:	mov	r2, r0
   15434:	ldmib	r7, {r0, r1, r6, r7}
   15438:	stm	sp, {r0, r1, r6, r7}
   1543c:	b	154b4 <__assert_fail@plt+0x4130>
   15440:	movw	r1, #28959	; 0x711f
   15444:	mov	r0, #0
   15448:	mov	r2, #5
   1544c:	movt	r1, #1
   15450:	bl	11144 <dcgettext@plt>
   15454:	ldr	r3, [r7]
   15458:	mov	r2, r0
   1545c:	ldmib	r7, {r0, r1, r6}
   15460:	ldr	r5, [r7, #16]
   15464:	ldr	r7, [r7, #20]
   15468:	stm	sp, {r0, r1, r6}
   1546c:	str	r5, [sp, #12]
   15470:	str	r7, [sp, #16]
   15474:	b	154b4 <__assert_fail@plt+0x4130>
   15478:	movw	r1, #28999	; 0x7147
   1547c:	mov	r0, #0
   15480:	mov	r2, #5
   15484:	movt	r1, #1
   15488:	bl	11144 <dcgettext@plt>
   1548c:	ldr	r3, [r7]
   15490:	mov	r2, r0
   15494:	ldmib	r7, {r0, r1, r6}
   15498:	ldr	r5, [r7, #16]
   1549c:	ldr	r4, [r7, #20]
   154a0:	ldr	r7, [r7, #24]
   154a4:	stm	sp, {r0, r1, r6}
   154a8:	str	r5, [sp, #12]
   154ac:	str	r4, [sp, #16]
   154b0:	str	r7, [sp, #20]
   154b4:	mov	r0, r8
   154b8:	mov	r1, #1
   154bc:	b	15568 <__assert_fail@plt+0x41e4>
   154c0:	movw	r1, #29091	; 0x71a3
   154c4:	movt	r1, #1
   154c8:	mov	r0, #0
   154cc:	mov	r2, #5
   154d0:	bl	11144 <dcgettext@plt>
   154d4:	mov	ip, r0
   154d8:	ldr	r3, [r7]
   154dc:	ldr	r0, [r7, #4]
   154e0:	ldr	r1, [r7, #8]
   154e4:	ldr	r6, [r7, #12]
   154e8:	ldr	r5, [r7, #16]
   154ec:	ldr	r4, [r7, #20]
   154f0:	ldr	r2, [r7, #24]
   154f4:	ldr	lr, [r7, #28]
   154f8:	ldr	r7, [r7, #32]
   154fc:	stm	sp, {r0, r1, r6}
   15500:	str	r5, [sp, #12]
   15504:	str	r4, [sp, #16]
   15508:	str	r2, [sp, #20]
   1550c:	str	lr, [sp, #24]
   15510:	str	r7, [sp, #28]
   15514:	b	1555c <__assert_fail@plt+0x41d8>
   15518:	movw	r1, #29043	; 0x7173
   1551c:	mov	r0, #0
   15520:	mov	r2, #5
   15524:	movt	r1, #1
   15528:	bl	11144 <dcgettext@plt>
   1552c:	mov	ip, r0
   15530:	ldr	r3, [r7]
   15534:	ldmib	r7, {r0, r1, r6}
   15538:	ldr	r5, [r7, #16]
   1553c:	ldr	r4, [r7, #20]
   15540:	ldr	r2, [r7, #24]
   15544:	ldr	r7, [r7, #28]
   15548:	stm	sp, {r0, r1, r6}
   1554c:	str	r5, [sp, #12]
   15550:	str	r4, [sp, #16]
   15554:	str	r2, [sp, #20]
   15558:	str	r7, [sp, #24]
   1555c:	mov	r0, r8
   15560:	mov	r1, #1
   15564:	mov	r2, ip
   15568:	bl	112dc <__fprintf_chk@plt>
   1556c:	sub	sp, fp, #24
   15570:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15574:	push	{r4, sl, fp, lr}
   15578:	add	fp, sp, #8
   1557c:	sub	sp, sp, #8
   15580:	ldr	ip, [fp, #8]
   15584:	mov	lr, #0
   15588:	ldr	r4, [ip, lr, lsl #2]
   1558c:	add	lr, lr, #1
   15590:	cmp	r4, #0
   15594:	bne	15588 <__assert_fail@plt+0x4204>
   15598:	sub	r4, lr, #1
   1559c:	str	ip, [sp]
   155a0:	str	r4, [sp, #4]
   155a4:	bl	15240 <__assert_fail@plt+0x3ebc>
   155a8:	sub	sp, fp, #8
   155ac:	pop	{r4, sl, fp, pc}
   155b0:	push	{fp, lr}
   155b4:	mov	fp, sp
   155b8:	sub	sp, sp, #48	; 0x30
   155bc:	ldr	ip, [fp, #8]
   155c0:	ldr	lr, [ip]
   155c4:	cmp	lr, #0
   155c8:	str	lr, [sp, #8]
   155cc:	beq	15668 <__assert_fail@plt+0x42e4>
   155d0:	ldr	lr, [ip, #4]
   155d4:	cmp	lr, #0
   155d8:	str	lr, [sp, #12]
   155dc:	beq	15670 <__assert_fail@plt+0x42ec>
   155e0:	ldr	lr, [ip, #8]
   155e4:	cmp	lr, #0
   155e8:	str	lr, [sp, #16]
   155ec:	beq	15678 <__assert_fail@plt+0x42f4>
   155f0:	ldr	lr, [ip, #12]
   155f4:	cmp	lr, #0
   155f8:	str	lr, [sp, #20]
   155fc:	beq	15680 <__assert_fail@plt+0x42fc>
   15600:	ldr	lr, [ip, #16]
   15604:	cmp	lr, #0
   15608:	str	lr, [sp, #24]
   1560c:	beq	15688 <__assert_fail@plt+0x4304>
   15610:	ldr	lr, [ip, #20]
   15614:	cmp	lr, #0
   15618:	str	lr, [sp, #28]
   1561c:	beq	15690 <__assert_fail@plt+0x430c>
   15620:	ldr	lr, [ip, #24]
   15624:	cmp	lr, #0
   15628:	str	lr, [sp, #32]
   1562c:	beq	15698 <__assert_fail@plt+0x4314>
   15630:	ldr	lr, [ip, #28]
   15634:	cmp	lr, #0
   15638:	str	lr, [sp, #36]	; 0x24
   1563c:	beq	156a0 <__assert_fail@plt+0x431c>
   15640:	ldr	lr, [ip, #32]
   15644:	cmp	lr, #0
   15648:	str	lr, [sp, #40]	; 0x28
   1564c:	beq	156a8 <__assert_fail@plt+0x4324>
   15650:	ldr	lr, [ip, #36]	; 0x24
   15654:	mov	ip, #10
   15658:	cmp	lr, #0
   1565c:	str	lr, [sp, #44]	; 0x2c
   15660:	movweq	ip, #9
   15664:	b	156ac <__assert_fail@plt+0x4328>
   15668:	mov	ip, #0
   1566c:	b	156ac <__assert_fail@plt+0x4328>
   15670:	mov	ip, #1
   15674:	b	156ac <__assert_fail@plt+0x4328>
   15678:	mov	ip, #2
   1567c:	b	156ac <__assert_fail@plt+0x4328>
   15680:	mov	ip, #3
   15684:	b	156ac <__assert_fail@plt+0x4328>
   15688:	mov	ip, #4
   1568c:	b	156ac <__assert_fail@plt+0x4328>
   15690:	mov	ip, #5
   15694:	b	156ac <__assert_fail@plt+0x4328>
   15698:	mov	ip, #6
   1569c:	b	156ac <__assert_fail@plt+0x4328>
   156a0:	mov	ip, #7
   156a4:	b	156ac <__assert_fail@plt+0x4328>
   156a8:	mov	ip, #8
   156ac:	add	lr, sp, #8
   156b0:	str	ip, [sp, #4]
   156b4:	str	lr, [sp]
   156b8:	bl	15240 <__assert_fail@plt+0x3ebc>
   156bc:	mov	sp, fp
   156c0:	pop	{fp, pc}
   156c4:	push	{fp, lr}
   156c8:	mov	fp, sp
   156cc:	sub	sp, sp, #56	; 0x38
   156d0:	add	ip, fp, #8
   156d4:	str	ip, [sp, #12]
   156d8:	ldr	lr, [fp, #8]
   156dc:	cmp	lr, #0
   156e0:	str	lr, [sp, #16]
   156e4:	beq	15780 <__assert_fail@plt+0x43fc>
   156e8:	ldr	lr, [ip, #4]
   156ec:	cmp	lr, #0
   156f0:	str	lr, [sp, #20]
   156f4:	beq	15788 <__assert_fail@plt+0x4404>
   156f8:	ldr	lr, [ip, #8]
   156fc:	cmp	lr, #0
   15700:	str	lr, [sp, #24]
   15704:	beq	15790 <__assert_fail@plt+0x440c>
   15708:	ldr	lr, [ip, #12]
   1570c:	cmp	lr, #0
   15710:	str	lr, [sp, #28]
   15714:	beq	15798 <__assert_fail@plt+0x4414>
   15718:	ldr	lr, [ip, #16]
   1571c:	cmp	lr, #0
   15720:	str	lr, [sp, #32]
   15724:	beq	157a0 <__assert_fail@plt+0x441c>
   15728:	ldr	lr, [ip, #20]
   1572c:	cmp	lr, #0
   15730:	str	lr, [sp, #36]	; 0x24
   15734:	beq	157a8 <__assert_fail@plt+0x4424>
   15738:	ldr	lr, [ip, #24]
   1573c:	cmp	lr, #0
   15740:	str	lr, [sp, #40]	; 0x28
   15744:	beq	157b0 <__assert_fail@plt+0x442c>
   15748:	ldr	lr, [ip, #28]
   1574c:	cmp	lr, #0
   15750:	str	lr, [sp, #44]	; 0x2c
   15754:	beq	157b8 <__assert_fail@plt+0x4434>
   15758:	ldr	lr, [ip, #32]
   1575c:	cmp	lr, #0
   15760:	str	lr, [sp, #48]	; 0x30
   15764:	beq	157c0 <__assert_fail@plt+0x443c>
   15768:	ldr	lr, [ip, #36]	; 0x24
   1576c:	mov	ip, #10
   15770:	cmp	lr, #0
   15774:	str	lr, [sp, #52]	; 0x34
   15778:	movweq	ip, #9
   1577c:	b	157c4 <__assert_fail@plt+0x4440>
   15780:	mov	ip, #0
   15784:	b	157c4 <__assert_fail@plt+0x4440>
   15788:	mov	ip, #1
   1578c:	b	157c4 <__assert_fail@plt+0x4440>
   15790:	mov	ip, #2
   15794:	b	157c4 <__assert_fail@plt+0x4440>
   15798:	mov	ip, #3
   1579c:	b	157c4 <__assert_fail@plt+0x4440>
   157a0:	mov	ip, #4
   157a4:	b	157c4 <__assert_fail@plt+0x4440>
   157a8:	mov	ip, #5
   157ac:	b	157c4 <__assert_fail@plt+0x4440>
   157b0:	mov	ip, #6
   157b4:	b	157c4 <__assert_fail@plt+0x4440>
   157b8:	mov	ip, #7
   157bc:	b	157c4 <__assert_fail@plt+0x4440>
   157c0:	mov	ip, #8
   157c4:	add	lr, sp, #16
   157c8:	str	ip, [sp, #4]
   157cc:	str	lr, [sp]
   157d0:	bl	15240 <__assert_fail@plt+0x3ebc>
   157d4:	mov	sp, fp
   157d8:	pop	{fp, pc}
   157dc:	push	{fp, lr}
   157e0:	mov	fp, sp
   157e4:	movw	r0, #33148	; 0x817c
   157e8:	movt	r0, #2
   157ec:	ldr	r1, [r0]
   157f0:	movw	r0, #27522	; 0x6b82
   157f4:	movt	r0, #1
   157f8:	bl	110a8 <fputs_unlocked@plt>
   157fc:	movw	r1, #29203	; 0x7213
   15800:	mov	r0, #0
   15804:	mov	r2, #5
   15808:	movt	r1, #1
   1580c:	bl	11144 <dcgettext@plt>
   15810:	movw	r2, #29223	; 0x7227
   15814:	mov	r1, r0
   15818:	mov	r0, #1
   1581c:	movt	r2, #1
   15820:	bl	112c4 <__printf_chk@plt>
   15824:	movw	r1, #29245	; 0x723d
   15828:	mov	r0, #0
   1582c:	mov	r2, #5
   15830:	movt	r1, #1
   15834:	bl	11144 <dcgettext@plt>
   15838:	movw	r2, #27108	; 0x69e4
   1583c:	movw	r3, #27331	; 0x6ac3
   15840:	mov	r1, r0
   15844:	mov	r0, #1
   15848:	movt	r2, #1
   1584c:	movt	r3, #1
   15850:	bl	112c4 <__printf_chk@plt>
   15854:	movw	r1, #29265	; 0x7251
   15858:	mov	r0, #0
   1585c:	mov	r2, #5
   15860:	movt	r1, #1
   15864:	bl	11144 <dcgettext@plt>
   15868:	movw	r2, #29304	; 0x7278
   1586c:	mov	r1, r0
   15870:	mov	r0, #1
   15874:	movt	r2, #1
   15878:	pop	{fp, lr}
   1587c:	b	112c4 <__printf_chk@plt>
   15880:	push	{r4, r5, r6, sl, fp, lr}
   15884:	add	fp, sp, #16
   15888:	mov	r4, r2
   1588c:	mov	r5, r1
   15890:	mov	r6, r0
   15894:	bl	1622c <__assert_fail@plt+0x4ea8>
   15898:	cmp	r0, #0
   1589c:	popne	{r4, r5, r6, sl, fp, pc}
   158a0:	cmp	r6, #0
   158a4:	beq	158b8 <__assert_fail@plt+0x4534>
   158a8:	cmp	r5, #0
   158ac:	cmpne	r4, #0
   158b0:	bne	158b8 <__assert_fail@plt+0x4534>
   158b4:	pop	{r4, r5, r6, sl, fp, pc}
   158b8:	bl	15e58 <__assert_fail@plt+0x4ad4>
   158bc:	push	{r4, r5, r6, sl, fp, lr}
   158c0:	add	fp, sp, #16
   158c4:	mov	r4, r2
   158c8:	mov	r5, r1
   158cc:	mov	r6, r0
   158d0:	bl	1622c <__assert_fail@plt+0x4ea8>
   158d4:	cmp	r0, #0
   158d8:	popne	{r4, r5, r6, sl, fp, pc}
   158dc:	cmp	r6, #0
   158e0:	beq	158f4 <__assert_fail@plt+0x4570>
   158e4:	cmp	r5, #0
   158e8:	cmpne	r4, #0
   158ec:	bne	158f4 <__assert_fail@plt+0x4570>
   158f0:	pop	{r4, r5, r6, sl, fp, pc}
   158f4:	bl	15e58 <__assert_fail@plt+0x4ad4>
   158f8:	push	{fp, lr}
   158fc:	mov	fp, sp
   15900:	bl	15ef0 <__assert_fail@plt+0x4b6c>
   15904:	cmp	r0, #0
   15908:	popne	{fp, pc}
   1590c:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15910:	push	{fp, lr}
   15914:	mov	fp, sp
   15918:	bl	15ef0 <__assert_fail@plt+0x4b6c>
   1591c:	cmp	r0, #0
   15920:	popne	{fp, pc}
   15924:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15928:	push	{fp, lr}
   1592c:	mov	fp, sp
   15930:	bl	15ef0 <__assert_fail@plt+0x4b6c>
   15934:	cmp	r0, #0
   15938:	popne	{fp, pc}
   1593c:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15940:	push	{r4, r5, fp, lr}
   15944:	add	fp, sp, #8
   15948:	mov	r4, r1
   1594c:	mov	r5, r0
   15950:	bl	15f20 <__assert_fail@plt+0x4b9c>
   15954:	cmp	r0, #0
   15958:	popne	{r4, r5, fp, pc}
   1595c:	cmp	r5, #0
   15960:	beq	15970 <__assert_fail@plt+0x45ec>
   15964:	cmp	r4, #0
   15968:	bne	15970 <__assert_fail@plt+0x45ec>
   1596c:	pop	{r4, r5, fp, pc}
   15970:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15974:	push	{fp, lr}
   15978:	mov	fp, sp
   1597c:	cmp	r1, #0
   15980:	orreq	r1, r1, #1
   15984:	bl	15f20 <__assert_fail@plt+0x4b9c>
   15988:	cmp	r0, #0
   1598c:	popne	{fp, pc}
   15990:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15994:	push	{fp, lr}
   15998:	mov	fp, sp
   1599c:	clz	r3, r2
   159a0:	lsr	ip, r3, #5
   159a4:	clz	r3, r1
   159a8:	lsr	r3, r3, #5
   159ac:	orrs	r3, r3, ip
   159b0:	movwne	r1, #1
   159b4:	movwne	r2, #1
   159b8:	bl	1622c <__assert_fail@plt+0x4ea8>
   159bc:	cmp	r0, #0
   159c0:	popne	{fp, pc}
   159c4:	bl	15e58 <__assert_fail@plt+0x4ad4>
   159c8:	push	{fp, lr}
   159cc:	mov	fp, sp
   159d0:	mov	r2, r1
   159d4:	mov	r1, r0
   159d8:	mov	r0, #0
   159dc:	bl	1622c <__assert_fail@plt+0x4ea8>
   159e0:	cmp	r0, #0
   159e4:	popne	{fp, pc}
   159e8:	bl	15e58 <__assert_fail@plt+0x4ad4>
   159ec:	push	{fp, lr}
   159f0:	mov	fp, sp
   159f4:	mov	r2, r1
   159f8:	mov	r1, r0
   159fc:	clz	r0, r2
   15a00:	clz	r3, r1
   15a04:	lsr	r0, r0, #5
   15a08:	lsr	r3, r3, #5
   15a0c:	orrs	r0, r3, r0
   15a10:	movwne	r1, #1
   15a14:	movwne	r2, #1
   15a18:	mov	r0, #0
   15a1c:	bl	1622c <__assert_fail@plt+0x4ea8>
   15a20:	cmp	r0, #0
   15a24:	popne	{fp, pc}
   15a28:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15a2c:	push	{r4, r5, r6, sl, fp, lr}
   15a30:	add	fp, sp, #16
   15a34:	ldr	r5, [r1]
   15a38:	mov	r4, r1
   15a3c:	mov	r6, r0
   15a40:	cmp	r0, #0
   15a44:	beq	15a5c <__assert_fail@plt+0x46d8>
   15a48:	mov	r0, #1
   15a4c:	add	r0, r0, r5, lsr #1
   15a50:	adds	r5, r5, r0
   15a54:	bcc	15a64 <__assert_fail@plt+0x46e0>
   15a58:	b	15aa0 <__assert_fail@plt+0x471c>
   15a5c:	cmp	r5, #0
   15a60:	movweq	r5, #64	; 0x40
   15a64:	mov	r0, r6
   15a68:	mov	r1, r5
   15a6c:	mov	r2, #1
   15a70:	bl	1622c <__assert_fail@plt+0x4ea8>
   15a74:	cmp	r5, #0
   15a78:	mov	r1, r5
   15a7c:	movwne	r1, #1
   15a80:	cmp	r0, #0
   15a84:	bne	15a98 <__assert_fail@plt+0x4714>
   15a88:	clz	r2, r6
   15a8c:	lsr	r2, r2, #5
   15a90:	orrs	r1, r2, r1
   15a94:	bne	15aa0 <__assert_fail@plt+0x471c>
   15a98:	str	r5, [r4]
   15a9c:	pop	{r4, r5, r6, sl, fp, pc}
   15aa0:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15aa4:	push	{r4, r5, r6, r7, fp, lr}
   15aa8:	add	fp, sp, #16
   15aac:	ldr	r5, [r1]
   15ab0:	mov	r6, r2
   15ab4:	mov	r4, r1
   15ab8:	mov	r7, r0
   15abc:	cmp	r0, #0
   15ac0:	beq	15ad8 <__assert_fail@plt+0x4754>
   15ac4:	mov	r0, #1
   15ac8:	add	r0, r0, r5, lsr #1
   15acc:	adds	r5, r5, r0
   15ad0:	bcc	15af0 <__assert_fail@plt+0x476c>
   15ad4:	b	15b24 <__assert_fail@plt+0x47a0>
   15ad8:	cmp	r5, #0
   15adc:	bne	15af0 <__assert_fail@plt+0x476c>
   15ae0:	mov	r0, #64	; 0x40
   15ae4:	cmp	r6, #64	; 0x40
   15ae8:	udiv	r5, r0, r6
   15aec:	addhi	r5, r5, #1
   15af0:	mov	r0, r7
   15af4:	mov	r1, r5
   15af8:	mov	r2, r6
   15afc:	bl	1622c <__assert_fail@plt+0x4ea8>
   15b00:	cmp	r0, #0
   15b04:	bne	15b1c <__assert_fail@plt+0x4798>
   15b08:	cmp	r7, #0
   15b0c:	beq	15b24 <__assert_fail@plt+0x47a0>
   15b10:	cmp	r6, #0
   15b14:	cmpne	r5, #0
   15b18:	bne	15b24 <__assert_fail@plt+0x47a0>
   15b1c:	str	r5, [r4]
   15b20:	pop	{r4, r5, r6, r7, fp, pc}
   15b24:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15b28:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15b2c:	add	fp, sp, #24
   15b30:	mov	r8, r1
   15b34:	ldr	r1, [r1]
   15b38:	mov	r5, r0
   15b3c:	add	r0, r1, r1, asr #1
   15b40:	cmp	r0, r1
   15b44:	mvnvs	r0, #-2147483648	; 0x80000000
   15b48:	cmp	r0, r3
   15b4c:	mov	r7, r0
   15b50:	movgt	r7, r3
   15b54:	cmn	r3, #1
   15b58:	movle	r7, r0
   15b5c:	ldr	r0, [fp, #8]
   15b60:	cmn	r0, #1
   15b64:	ble	15b8c <__assert_fail@plt+0x4808>
   15b68:	cmp	r0, #0
   15b6c:	beq	15be0 <__assert_fail@plt+0x485c>
   15b70:	cmn	r7, #1
   15b74:	ble	15bb4 <__assert_fail@plt+0x4830>
   15b78:	mvn	r4, #-2147483648	; 0x80000000
   15b7c:	udiv	r6, r4, r0
   15b80:	cmp	r6, r7
   15b84:	bge	15be0 <__assert_fail@plt+0x485c>
   15b88:	b	15bf0 <__assert_fail@plt+0x486c>
   15b8c:	cmn	r7, #1
   15b90:	ble	15bd0 <__assert_fail@plt+0x484c>
   15b94:	cmn	r0, #1
   15b98:	beq	15be0 <__assert_fail@plt+0x485c>
   15b9c:	mov	r6, #-2147483648	; 0x80000000
   15ba0:	mvn	r4, #-2147483648	; 0x80000000
   15ba4:	sdiv	r6, r6, r0
   15ba8:	cmp	r6, r7
   15bac:	bge	15be0 <__assert_fail@plt+0x485c>
   15bb0:	b	15bf0 <__assert_fail@plt+0x486c>
   15bb4:	beq	15be0 <__assert_fail@plt+0x485c>
   15bb8:	mov	r6, #-2147483648	; 0x80000000
   15bbc:	mvn	r4, #-2147483648	; 0x80000000
   15bc0:	sdiv	r6, r6, r7
   15bc4:	cmp	r6, r0
   15bc8:	bge	15be0 <__assert_fail@plt+0x485c>
   15bcc:	b	15bf0 <__assert_fail@plt+0x486c>
   15bd0:	mvn	r4, #-2147483648	; 0x80000000
   15bd4:	sdiv	r6, r4, r0
   15bd8:	cmp	r7, r6
   15bdc:	blt	15bf0 <__assert_fail@plt+0x486c>
   15be0:	mul	r6, r7, r0
   15be4:	mov	r4, #64	; 0x40
   15be8:	cmp	r6, #63	; 0x3f
   15bec:	bgt	15bf8 <__assert_fail@plt+0x4874>
   15bf0:	sdiv	r7, r4, r0
   15bf4:	mul	r6, r7, r0
   15bf8:	cmp	r5, #0
   15bfc:	moveq	r4, #0
   15c00:	streq	r4, [r8]
   15c04:	sub	r4, r7, r1
   15c08:	cmp	r4, r2
   15c0c:	bge	15cb8 <__assert_fail@plt+0x4934>
   15c10:	add	r7, r1, r2
   15c14:	mov	r6, #0
   15c18:	mov	r2, #0
   15c1c:	cmp	r7, r3
   15c20:	movwgt	r6, #1
   15c24:	cmn	r3, #1
   15c28:	movwgt	r2, #1
   15c2c:	cmp	r7, r1
   15c30:	bvs	15cec <__assert_fail@plt+0x4968>
   15c34:	ands	r1, r2, r6
   15c38:	bne	15cec <__assert_fail@plt+0x4968>
   15c3c:	cmn	r0, #1
   15c40:	ble	15c68 <__assert_fail@plt+0x48e4>
   15c44:	cmp	r0, #0
   15c48:	beq	15cb4 <__assert_fail@plt+0x4930>
   15c4c:	cmn	r7, #1
   15c50:	ble	15c8c <__assert_fail@plt+0x4908>
   15c54:	mvn	r1, #-2147483648	; 0x80000000
   15c58:	udiv	r1, r1, r0
   15c5c:	cmp	r1, r7
   15c60:	bge	15cb4 <__assert_fail@plt+0x4930>
   15c64:	b	15cec <__assert_fail@plt+0x4968>
   15c68:	cmn	r7, #1
   15c6c:	ble	15ca4 <__assert_fail@plt+0x4920>
   15c70:	cmn	r0, #1
   15c74:	beq	15cb4 <__assert_fail@plt+0x4930>
   15c78:	mov	r1, #-2147483648	; 0x80000000
   15c7c:	sdiv	r1, r1, r0
   15c80:	cmp	r1, r7
   15c84:	bge	15cb4 <__assert_fail@plt+0x4930>
   15c88:	b	15cec <__assert_fail@plt+0x4968>
   15c8c:	beq	15cb4 <__assert_fail@plt+0x4930>
   15c90:	mov	r1, #-2147483648	; 0x80000000
   15c94:	sdiv	r1, r1, r7
   15c98:	cmp	r1, r0
   15c9c:	bge	15cb4 <__assert_fail@plt+0x4930>
   15ca0:	b	15cec <__assert_fail@plt+0x4968>
   15ca4:	mvn	r1, #-2147483648	; 0x80000000
   15ca8:	sdiv	r1, r1, r0
   15cac:	cmp	r7, r1
   15cb0:	blt	15cec <__assert_fail@plt+0x4968>
   15cb4:	mul	r6, r7, r0
   15cb8:	mov	r0, r5
   15cbc:	mov	r1, r6
   15cc0:	bl	15f20 <__assert_fail@plt+0x4b9c>
   15cc4:	cmp	r6, #0
   15cc8:	movwne	r6, #1
   15ccc:	cmp	r0, #0
   15cd0:	bne	15ce4 <__assert_fail@plt+0x4960>
   15cd4:	clz	r1, r5
   15cd8:	lsr	r1, r1, #5
   15cdc:	orrs	r1, r1, r6
   15ce0:	bne	15cec <__assert_fail@plt+0x4968>
   15ce4:	str	r7, [r8]
   15ce8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15cec:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15cf0:	push	{fp, lr}
   15cf4:	mov	fp, sp
   15cf8:	mov	r1, #1
   15cfc:	bl	15e9c <__assert_fail@plt+0x4b18>
   15d00:	cmp	r0, #0
   15d04:	popne	{fp, pc}
   15d08:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15d0c:	push	{fp, lr}
   15d10:	mov	fp, sp
   15d14:	bl	15e9c <__assert_fail@plt+0x4b18>
   15d18:	cmp	r0, #0
   15d1c:	popne	{fp, pc}
   15d20:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15d24:	push	{fp, lr}
   15d28:	mov	fp, sp
   15d2c:	mov	r1, #1
   15d30:	bl	15e9c <__assert_fail@plt+0x4b18>
   15d34:	cmp	r0, #0
   15d38:	popne	{fp, pc}
   15d3c:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15d40:	push	{fp, lr}
   15d44:	mov	fp, sp
   15d48:	bl	15e9c <__assert_fail@plt+0x4b18>
   15d4c:	cmp	r0, #0
   15d50:	popne	{fp, pc}
   15d54:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15d58:	push	{r4, r5, r6, sl, fp, lr}
   15d5c:	add	fp, sp, #16
   15d60:	mov	r5, r0
   15d64:	mov	r0, r1
   15d68:	mov	r4, r1
   15d6c:	bl	15ef0 <__assert_fail@plt+0x4b6c>
   15d70:	cmp	r0, #0
   15d74:	beq	15d90 <__assert_fail@plt+0x4a0c>
   15d78:	mov	r1, r5
   15d7c:	mov	r2, r4
   15d80:	mov	r6, r0
   15d84:	bl	11108 <memcpy@plt>
   15d88:	mov	r0, r6
   15d8c:	pop	{r4, r5, r6, sl, fp, pc}
   15d90:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15d94:	push	{r4, r5, r6, sl, fp, lr}
   15d98:	add	fp, sp, #16
   15d9c:	mov	r5, r0
   15da0:	mov	r0, r1
   15da4:	mov	r4, r1
   15da8:	bl	15ef0 <__assert_fail@plt+0x4b6c>
   15dac:	cmp	r0, #0
   15db0:	beq	15dcc <__assert_fail@plt+0x4a48>
   15db4:	mov	r1, r5
   15db8:	mov	r2, r4
   15dbc:	mov	r6, r0
   15dc0:	bl	11108 <memcpy@plt>
   15dc4:	mov	r0, r6
   15dc8:	pop	{r4, r5, r6, sl, fp, pc}
   15dcc:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15dd0:	push	{r4, r5, r6, sl, fp, lr}
   15dd4:	add	fp, sp, #16
   15dd8:	mov	r5, r0
   15ddc:	add	r0, r1, #1
   15de0:	mov	r4, r1
   15de4:	bl	15ef0 <__assert_fail@plt+0x4b6c>
   15de8:	cmp	r0, #0
   15dec:	beq	15e14 <__assert_fail@plt+0x4a90>
   15df0:	mov	r6, r0
   15df4:	mov	r0, #0
   15df8:	mov	r1, r5
   15dfc:	mov	r2, r4
   15e00:	strb	r0, [r6, r4]
   15e04:	mov	r0, r6
   15e08:	bl	11108 <memcpy@plt>
   15e0c:	mov	r0, r6
   15e10:	pop	{r4, r5, r6, sl, fp, pc}
   15e14:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15e18:	push	{r4, r5, r6, sl, fp, lr}
   15e1c:	add	fp, sp, #16
   15e20:	mov	r4, r0
   15e24:	bl	11270 <strlen@plt>
   15e28:	add	r5, r0, #1
   15e2c:	mov	r0, r5
   15e30:	bl	15ef0 <__assert_fail@plt+0x4b6c>
   15e34:	cmp	r0, #0
   15e38:	beq	15e54 <__assert_fail@plt+0x4ad0>
   15e3c:	mov	r1, r4
   15e40:	mov	r2, r5
   15e44:	mov	r6, r0
   15e48:	bl	11108 <memcpy@plt>
   15e4c:	mov	r0, r6
   15e50:	pop	{r4, r5, r6, sl, fp, pc}
   15e54:	bl	15e58 <__assert_fail@plt+0x4ad4>
   15e58:	push	{fp, lr}
   15e5c:	mov	fp, sp
   15e60:	movw	r0, #33060	; 0x8124
   15e64:	movw	r1, #29380	; 0x72c4
   15e68:	mov	r2, #5
   15e6c:	movt	r0, #2
   15e70:	movt	r1, #1
   15e74:	ldr	r4, [r0]
   15e78:	mov	r0, #0
   15e7c:	bl	11144 <dcgettext@plt>
   15e80:	movw	r2, #28335	; 0x6eaf
   15e84:	mov	r3, r0
   15e88:	mov	r0, r4
   15e8c:	mov	r1, #0
   15e90:	movt	r2, #1
   15e94:	bl	111c8 <error@plt>
   15e98:	bl	1136c <abort@plt>
   15e9c:	clz	r2, r1
   15ea0:	clz	r3, r0
   15ea4:	lsr	r2, r2, #5
   15ea8:	lsr	r3, r3, #5
   15eac:	orrs	r2, r3, r2
   15eb0:	movwne	r1, #1
   15eb4:	movwne	r0, #1
   15eb8:	cmp	r1, #0
   15ebc:	beq	15eec <__assert_fail@plt+0x4b68>
   15ec0:	mvn	r2, #-2147483648	; 0x80000000
   15ec4:	udiv	r2, r2, r1
   15ec8:	cmp	r2, r0
   15ecc:	bcs	15eec <__assert_fail@plt+0x4b68>
   15ed0:	push	{fp, lr}
   15ed4:	mov	fp, sp
   15ed8:	bl	11288 <__errno_location@plt>
   15edc:	mov	r1, #12
   15ee0:	str	r1, [r0]
   15ee4:	mov	r0, #0
   15ee8:	pop	{fp, pc}
   15eec:	b	1109c <calloc@plt>
   15ef0:	cmp	r0, #0
   15ef4:	movweq	r0, #1
   15ef8:	cmn	r0, #1
   15efc:	ble	15f04 <__assert_fail@plt+0x4b80>
   15f00:	b	111ec <malloc@plt>
   15f04:	push	{fp, lr}
   15f08:	mov	fp, sp
   15f0c:	bl	11288 <__errno_location@plt>
   15f10:	mov	r1, #12
   15f14:	str	r1, [r0]
   15f18:	mov	r0, #0
   15f1c:	pop	{fp, pc}
   15f20:	push	{fp, lr}
   15f24:	mov	fp, sp
   15f28:	cmp	r0, #0
   15f2c:	beq	15f48 <__assert_fail@plt+0x4bc4>
   15f30:	cmp	r1, #0
   15f34:	beq	15f54 <__assert_fail@plt+0x4bd0>
   15f38:	cmn	r1, #1
   15f3c:	ble	15f60 <__assert_fail@plt+0x4bdc>
   15f40:	pop	{fp, lr}
   15f44:	b	11168 <realloc@plt>
   15f48:	mov	r0, r1
   15f4c:	pop	{fp, lr}
   15f50:	b	15ef0 <__assert_fail@plt+0x4b6c>
   15f54:	bl	1314c <__assert_fail@plt+0x1dc8>
   15f58:	mov	r0, #0
   15f5c:	pop	{fp, pc}
   15f60:	bl	11288 <__errno_location@plt>
   15f64:	mov	r1, #12
   15f68:	str	r1, [r0]
   15f6c:	mov	r0, #0
   15f70:	pop	{fp, pc}
   15f74:	push	{r4, r5, r6, sl, fp, lr}
   15f78:	add	fp, sp, #16
   15f7c:	mov	r4, r0
   15f80:	bl	111b0 <__fpending@plt>
   15f84:	ldr	r6, [r4]
   15f88:	mov	r5, r0
   15f8c:	mov	r0, r4
   15f90:	bl	15ff8 <__assert_fail@plt+0x4c74>
   15f94:	tst	r6, #32
   15f98:	bne	15fd0 <__assert_fail@plt+0x4c4c>
   15f9c:	cmp	r0, #0
   15fa0:	mov	r4, r0
   15fa4:	mvnne	r4, #0
   15fa8:	cmp	r5, #0
   15fac:	bne	15fdc <__assert_fail@plt+0x4c58>
   15fb0:	cmp	r0, #0
   15fb4:	beq	15fdc <__assert_fail@plt+0x4c58>
   15fb8:	bl	11288 <__errno_location@plt>
   15fbc:	ldr	r0, [r0]
   15fc0:	subs	r4, r0, #9
   15fc4:	mvnne	r4, #0
   15fc8:	mov	r0, r4
   15fcc:	pop	{r4, r5, r6, sl, fp, pc}
   15fd0:	mvn	r4, #0
   15fd4:	cmp	r0, #0
   15fd8:	beq	15fe4 <__assert_fail@plt+0x4c60>
   15fdc:	mov	r0, r4
   15fe0:	pop	{r4, r5, r6, sl, fp, pc}
   15fe4:	bl	11288 <__errno_location@plt>
   15fe8:	mov	r1, #0
   15fec:	str	r1, [r0]
   15ff0:	mov	r0, r4
   15ff4:	pop	{r4, r5, r6, sl, fp, pc}
   15ff8:	push	{r4, r5, r6, sl, fp, lr}
   15ffc:	add	fp, sp, #16
   16000:	sub	sp, sp, #8
   16004:	mov	r4, r0
   16008:	bl	112d0 <fileno@plt>
   1600c:	cmn	r0, #1
   16010:	ble	16084 <__assert_fail@plt+0x4d00>
   16014:	mov	r0, r4
   16018:	bl	11210 <__freading@plt>
   1601c:	cmp	r0, #0
   16020:	beq	1604c <__assert_fail@plt+0x4cc8>
   16024:	mov	r0, r4
   16028:	bl	112d0 <fileno@plt>
   1602c:	mov	r1, #1
   16030:	mov	r2, #0
   16034:	mov	r3, #0
   16038:	str	r1, [sp]
   1603c:	bl	11198 <lseek64@plt>
   16040:	and	r0, r0, r1
   16044:	cmn	r0, #1
   16048:	beq	16084 <__assert_fail@plt+0x4d00>
   1604c:	mov	r0, r4
   16050:	bl	16094 <__assert_fail@plt+0x4d10>
   16054:	cmp	r0, #0
   16058:	beq	16084 <__assert_fail@plt+0x4d00>
   1605c:	bl	11288 <__errno_location@plt>
   16060:	ldr	r6, [r0]
   16064:	mov	r5, r0
   16068:	mov	r0, r4
   1606c:	bl	112e8 <fclose@plt>
   16070:	cmp	r6, #0
   16074:	strne	r6, [r5]
   16078:	mvnne	r0, #0
   1607c:	sub	sp, fp, #16
   16080:	pop	{r4, r5, r6, sl, fp, pc}
   16084:	mov	r0, r4
   16088:	sub	sp, fp, #16
   1608c:	pop	{r4, r5, r6, sl, fp, lr}
   16090:	b	112e8 <fclose@plt>
   16094:	push	{r4, sl, fp, lr}
   16098:	add	fp, sp, #8
   1609c:	sub	sp, sp, #8
   160a0:	mov	r4, r0
   160a4:	cmp	r0, #0
   160a8:	beq	160c4 <__assert_fail@plt+0x4d40>
   160ac:	mov	r0, r4
   160b0:	bl	11210 <__freading@plt>
   160b4:	cmp	r0, #0
   160b8:	ldrbne	r0, [r4, #1]
   160bc:	tstne	r0, #1
   160c0:	bne	160d4 <__assert_fail@plt+0x4d50>
   160c4:	mov	r0, r4
   160c8:	sub	sp, fp, #8
   160cc:	pop	{r4, sl, fp, lr}
   160d0:	b	110cc <fflush@plt>
   160d4:	mov	r0, #1
   160d8:	mov	r2, #0
   160dc:	mov	r3, #0
   160e0:	str	r0, [sp]
   160e4:	mov	r0, r4
   160e8:	bl	160f0 <__assert_fail@plt+0x4d6c>
   160ec:	b	160c4 <__assert_fail@plt+0x4d40>
   160f0:	push	{r4, r5, r6, r7, fp, lr}
   160f4:	add	fp, sp, #16
   160f8:	sub	sp, sp, #8
   160fc:	mov	r4, r0
   16100:	ldr	r0, [r0, #4]
   16104:	mov	r5, r3
   16108:	mov	r6, r2
   1610c:	ldr	r1, [r4, #8]
   16110:	cmp	r1, r0
   16114:	bne	16130 <__assert_fail@plt+0x4dac>
   16118:	ldrd	r0, [r4, #16]
   1611c:	cmp	r1, r0
   16120:	bne	16130 <__assert_fail@plt+0x4dac>
   16124:	ldr	r0, [r4, #36]	; 0x24
   16128:	cmp	r0, #0
   1612c:	beq	16148 <__assert_fail@plt+0x4dc4>
   16130:	mov	r0, r4
   16134:	mov	r2, r6
   16138:	mov	r3, r5
   1613c:	sub	sp, fp, #16
   16140:	pop	{r4, r5, r6, r7, fp, lr}
   16144:	b	112f4 <fseeko64@plt>
   16148:	ldr	r7, [fp, #8]
   1614c:	mov	r0, r4
   16150:	bl	112d0 <fileno@plt>
   16154:	mov	r2, r6
   16158:	mov	r3, r5
   1615c:	str	r7, [sp]
   16160:	bl	11198 <lseek64@plt>
   16164:	and	r2, r0, r1
   16168:	cmn	r2, #1
   1616c:	mvneq	r0, #0
   16170:	subeq	sp, fp, #16
   16174:	popeq	{r4, r5, r6, r7, fp, pc}
   16178:	strd	r0, [r4, #80]	; 0x50
   1617c:	ldr	r0, [r4]
   16180:	bic	r0, r0, #16
   16184:	str	r0, [r4]
   16188:	mov	r0, #0
   1618c:	sub	sp, fp, #16
   16190:	pop	{r4, r5, r6, r7, fp, pc}
   16194:	push	{fp, lr}
   16198:	mov	fp, sp
   1619c:	mov	r0, #14
   161a0:	bl	11324 <nl_langinfo@plt>
   161a4:	movw	r1, #27523	; 0x6b83
   161a8:	cmp	r0, #0
   161ac:	movt	r1, #1
   161b0:	movne	r1, r0
   161b4:	movw	r0, #29397	; 0x72d5
   161b8:	ldrb	r2, [r1]
   161bc:	movt	r0, #1
   161c0:	cmp	r2, #0
   161c4:	movne	r0, r1
   161c8:	pop	{fp, pc}
   161cc:	push	{r4, r5, r6, r7, fp, lr}
   161d0:	add	fp, sp, #16
   161d4:	sub	sp, sp, #8
   161d8:	add	r5, sp, #4
   161dc:	cmp	r0, #0
   161e0:	mov	r7, r2
   161e4:	mov	r4, r1
   161e8:	movne	r5, r0
   161ec:	mov	r0, r5
   161f0:	bl	111bc <mbrtowc@plt>
   161f4:	mov	r6, r0
   161f8:	cmp	r7, #0
   161fc:	beq	16220 <__assert_fail@plt+0x4e9c>
   16200:	cmn	r6, #2
   16204:	bcc	16220 <__assert_fail@plt+0x4e9c>
   16208:	mov	r0, #0
   1620c:	bl	13174 <__assert_fail@plt+0x1df0>
   16210:	cmp	r0, #0
   16214:	ldrbeq	r0, [r4]
   16218:	moveq	r6, #1
   1621c:	streq	r0, [r5]
   16220:	mov	r0, r6
   16224:	sub	sp, fp, #16
   16228:	pop	{r4, r5, r6, r7, fp, pc}
   1622c:	cmp	r2, #0
   16230:	beq	16260 <__assert_fail@plt+0x4edc>
   16234:	mvn	r3, #0
   16238:	udiv	r3, r3, r2
   1623c:	cmp	r3, r1
   16240:	bcs	16260 <__assert_fail@plt+0x4edc>
   16244:	push	{fp, lr}
   16248:	mov	fp, sp
   1624c:	bl	11288 <__errno_location@plt>
   16250:	mov	r1, #12
   16254:	str	r1, [r0]
   16258:	mov	r0, #0
   1625c:	pop	{fp, pc}
   16260:	mul	r1, r2, r1
   16264:	b	15f20 <__assert_fail@plt+0x4b9c>
   16268:	cmp	r3, #0
   1626c:	cmpeq	r2, #0
   16270:	bne	16294 <__assert_fail@plt+0x4f10>
   16274:	cmp	r1, #0
   16278:	movlt	r1, #-2147483648	; 0x80000000
   1627c:	movlt	r0, #0
   16280:	blt	16290 <__assert_fail@plt+0x4f0c>
   16284:	cmpeq	r0, #0
   16288:	mvnne	r1, #-2147483648	; 0x80000000
   1628c:	mvnne	r0, #0
   16290:	b	1633c <__assert_fail@plt+0x4fb8>
   16294:	sub	sp, sp, #8
   16298:	push	{sp, lr}
   1629c:	cmp	r1, #0
   162a0:	blt	162c0 <__assert_fail@plt+0x4f3c>
   162a4:	cmp	r3, #0
   162a8:	blt	162f4 <__assert_fail@plt+0x4f70>
   162ac:	bl	1634c <__assert_fail@plt+0x4fc8>
   162b0:	ldr	lr, [sp, #4]
   162b4:	add	sp, sp, #8
   162b8:	pop	{r2, r3}
   162bc:	bx	lr
   162c0:	rsbs	r0, r0, #0
   162c4:	sbc	r1, r1, r1, lsl #1
   162c8:	cmp	r3, #0
   162cc:	blt	16318 <__assert_fail@plt+0x4f94>
   162d0:	bl	1634c <__assert_fail@plt+0x4fc8>
   162d4:	ldr	lr, [sp, #4]
   162d8:	add	sp, sp, #8
   162dc:	pop	{r2, r3}
   162e0:	rsbs	r0, r0, #0
   162e4:	sbc	r1, r1, r1, lsl #1
   162e8:	rsbs	r2, r2, #0
   162ec:	sbc	r3, r3, r3, lsl #1
   162f0:	bx	lr
   162f4:	rsbs	r2, r2, #0
   162f8:	sbc	r3, r3, r3, lsl #1
   162fc:	bl	1634c <__assert_fail@plt+0x4fc8>
   16300:	ldr	lr, [sp, #4]
   16304:	add	sp, sp, #8
   16308:	pop	{r2, r3}
   1630c:	rsbs	r0, r0, #0
   16310:	sbc	r1, r1, r1, lsl #1
   16314:	bx	lr
   16318:	rsbs	r2, r2, #0
   1631c:	sbc	r3, r3, r3, lsl #1
   16320:	bl	1634c <__assert_fail@plt+0x4fc8>
   16324:	ldr	lr, [sp, #4]
   16328:	add	sp, sp, #8
   1632c:	pop	{r2, r3}
   16330:	rsbs	r2, r2, #0
   16334:	sbc	r3, r3, r3, lsl #1
   16338:	bx	lr
   1633c:	push	{r1, lr}
   16340:	mov	r0, #8
   16344:	bl	110b4 <raise@plt>
   16348:	pop	{r1, pc}
   1634c:	cmp	r1, r3
   16350:	cmpeq	r0, r2
   16354:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16358:	mov	r4, r0
   1635c:	movcc	r0, #0
   16360:	mov	r5, r1
   16364:	ldr	lr, [sp, #36]	; 0x24
   16368:	movcc	r1, r0
   1636c:	bcc	16468 <__assert_fail@plt+0x50e4>
   16370:	cmp	r3, #0
   16374:	clzeq	ip, r2
   16378:	clzne	ip, r3
   1637c:	addeq	ip, ip, #32
   16380:	cmp	r5, #0
   16384:	clzeq	r1, r4
   16388:	addeq	r1, r1, #32
   1638c:	clzne	r1, r5
   16390:	sub	ip, ip, r1
   16394:	sub	sl, ip, #32
   16398:	lsl	r9, r3, ip
   1639c:	rsb	fp, ip, #32
   163a0:	orr	r9, r9, r2, lsl sl
   163a4:	orr	r9, r9, r2, lsr fp
   163a8:	lsl	r8, r2, ip
   163ac:	cmp	r5, r9
   163b0:	cmpeq	r4, r8
   163b4:	movcc	r0, #0
   163b8:	movcc	r1, r0
   163bc:	bcc	163d8 <__assert_fail@plt+0x5054>
   163c0:	mov	r0, #1
   163c4:	subs	r4, r4, r8
   163c8:	lsl	r1, r0, sl
   163cc:	orr	r1, r1, r0, lsr fp
   163d0:	lsl	r0, r0, ip
   163d4:	sbc	r5, r5, r9
   163d8:	cmp	ip, #0
   163dc:	beq	16468 <__assert_fail@plt+0x50e4>
   163e0:	lsr	r6, r8, #1
   163e4:	orr	r6, r6, r9, lsl #31
   163e8:	lsr	r7, r9, #1
   163ec:	mov	r2, ip
   163f0:	b	16414 <__assert_fail@plt+0x5090>
   163f4:	subs	r3, r4, r6
   163f8:	sbc	r8, r5, r7
   163fc:	adds	r3, r3, r3
   16400:	adc	r8, r8, r8
   16404:	adds	r4, r3, #1
   16408:	adc	r5, r8, #0
   1640c:	subs	r2, r2, #1
   16410:	beq	16430 <__assert_fail@plt+0x50ac>
   16414:	cmp	r5, r7
   16418:	cmpeq	r4, r6
   1641c:	bcs	163f4 <__assert_fail@plt+0x5070>
   16420:	adds	r4, r4, r4
   16424:	adc	r5, r5, r5
   16428:	subs	r2, r2, #1
   1642c:	bne	16414 <__assert_fail@plt+0x5090>
   16430:	lsr	r3, r4, ip
   16434:	orr	r3, r3, r5, lsl fp
   16438:	lsr	r2, r5, ip
   1643c:	orr	r3, r3, r5, lsr sl
   16440:	adds	r0, r0, r4
   16444:	mov	r4, r3
   16448:	lsl	r3, r2, ip
   1644c:	orr	r3, r3, r4, lsl sl
   16450:	lsl	ip, r4, ip
   16454:	orr	r3, r3, r4, lsr fp
   16458:	adc	r1, r1, r5
   1645c:	subs	r0, r0, ip
   16460:	mov	r5, r2
   16464:	sbc	r1, r1, r3
   16468:	cmp	lr, #0
   1646c:	strdne	r4, [lr]
   16470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16474:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16478:	mov	r7, r0
   1647c:	ldr	r6, [pc, #72]	; 164cc <__assert_fail@plt+0x5148>
   16480:	ldr	r5, [pc, #72]	; 164d0 <__assert_fail@plt+0x514c>
   16484:	add	r6, pc, r6
   16488:	add	r5, pc, r5
   1648c:	sub	r6, r6, r5
   16490:	mov	r8, r1
   16494:	mov	r9, r2
   16498:	bl	1107c <calloc@plt-0x20>
   1649c:	asrs	r6, r6, #2
   164a0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   164a4:	mov	r4, #0
   164a8:	add	r4, r4, #1
   164ac:	ldr	r3, [r5], #4
   164b0:	mov	r2, r9
   164b4:	mov	r1, r8
   164b8:	mov	r0, r7
   164bc:	blx	r3
   164c0:	cmp	r6, r4
   164c4:	bne	164a8 <__assert_fail@plt+0x5124>
   164c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164cc:	andeq	r1, r1, r0, lsl #21
   164d0:	andeq	r1, r1, r8, ror sl
   164d4:	bx	lr
   164d8:	ldr	r3, [pc, #12]	; 164ec <__assert_fail@plt+0x5168>
   164dc:	mov	r1, #0
   164e0:	add	r3, pc, r3
   164e4:	ldr	r2, [r3]
   164e8:	b	112a0 <__cxa_atexit@plt>
   164ec:	andeq	r1, r1, ip, lsr #24

Disassembly of section .fini:

000164f0 <.fini>:
   164f0:	push	{r3, lr}
   164f4:	pop	{r3, pc}
