
../repos/charybdis/modules/.libs/m_map.so:     file format elf32-littlearm


Disassembly of section .init:

0000061c <_init>:
 61c:	push	{r3, lr}
 620:	bl	6a8 <call_weak_fn>
 624:	pop	{r3, pc}

Disassembly of section .plt:

00000628 <.plt>:
 628:	push	{lr}		; (str lr, [sp, #-4]!)
 62c:	ldr	lr, [pc, #4]	; 638 <.plt+0x10>
 630:	add	lr, pc, lr
 634:	ldr	pc, [lr, #8]!
 638:	.word	0x000109c8

0000063c <__cxa_finalize@plt>:
 63c:	add	ip, pc, #0, 12
 640:	add	ip, ip, #16, 20	; 0x10000
 644:	ldr	pc, [ip, #2504]!	; 0x9c8

00000648 <__gmon_start__@plt>:
 648:	add	ip, pc, #0, 12
 64c:	add	ip, ip, #16, 20	; 0x10000
 650:	ldr	pc, [ip, #2496]!	; 0x9c0

00000654 <sendto_one_numeric@plt>:
 654:	add	ip, pc, #0, 12
 658:	add	ip, ip, #16, 20	; 0x10000
 65c:	ldr	pc, [ip, #2488]!	; 0x9b8

00000660 <strlen@plt>:
 660:	add	ip, pc, #0, 12
 664:	add	ip, ip, #16, 20	; 0x10000
 668:	ldr	pc, [ip, #2480]!	; 0x9b0

0000066c <snprintf@plt>:
 66c:	add	ip, pc, #0, 12
 670:	add	ip, ip, #16, 20	; 0x10000
 674:	ldr	pc, [ip, #2472]!	; 0x9a8

00000678 <memset@plt>:
 678:	add	ip, pc, #0, 12
 67c:	add	ip, ip, #16, 20	; 0x10000
 680:	ldr	pc, [ip, #2464]!	; 0x9a0

00000684 <scache_send_missing@plt>:
 684:	add	ip, pc, #0, 12
 688:	add	ip, ip, #16, 20	; 0x10000
 68c:	ldr	pc, [ip, #2456]!	; 0x998

00000690 <rb_strlcpy@plt>:
 690:	add	ip, pc, #0, 12
 694:	add	ip, ip, #16, 20	; 0x10000
 698:	ldr	pc, [ip, #2448]!	; 0x990

0000069c <rb_strlcat@plt>:
 69c:	add	ip, pc, #0, 12
 6a0:	add	ip, ip, #16, 20	; 0x10000
 6a4:	ldr	pc, [ip, #2440]!	; 0x988

Disassembly of section .text:

000006a8 <call_weak_fn>:
 6a8:	ldr	r3, [pc, #20]	; 6c4 <call_weak_fn+0x1c>
 6ac:	ldr	r2, [pc, #20]	; 6c8 <call_weak_fn+0x20>
 6b0:	add	r3, pc, r3
 6b4:	ldr	r2, [r3, r2]
 6b8:	cmp	r2, #0
 6bc:	bxeq	lr
 6c0:	b	648 <__gmon_start__@plt>
 6c4:	.word	0x00010948
 6c8:	.word	0x00000044

000006cc <deregister_tm_clones>:
 6cc:	ldr	r0, [pc, #44]	; 700 <deregister_tm_clones+0x34>
 6d0:	ldr	r3, [pc, #44]	; 704 <deregister_tm_clones+0x38>
 6d4:	add	r0, pc, r0
 6d8:	add	r3, pc, r3
 6dc:	cmp	r3, r0
 6e0:	ldr	r3, [pc, #32]	; 708 <deregister_tm_clones+0x3c>
 6e4:	add	r3, pc, r3
 6e8:	bxeq	lr
 6ec:	ldr	r2, [pc, #24]	; 70c <deregister_tm_clones+0x40>
 6f0:	ldr	r3, [r3, r2]
 6f4:	cmp	r3, #0
 6f8:	bxeq	lr
 6fc:	bx	r3
 700:	.word	0x000109f0
 704:	.word	0x000109ec
 708:	.word	0x00010914
 70c:	.word	0x00000038

00000710 <register_tm_clones>:
 710:	ldr	r0, [pc, #56]	; 750 <register_tm_clones+0x40>
 714:	ldr	r3, [pc, #56]	; 754 <register_tm_clones+0x44>
 718:	add	r0, pc, r0
 71c:	add	r3, pc, r3
 720:	sub	r1, r3, r0
 724:	ldr	r3, [pc, #44]	; 758 <register_tm_clones+0x48>
 728:	asr	r1, r1, #2
 72c:	add	r3, pc, r3
 730:	add	r1, r1, r1, lsr #31
 734:	asrs	r1, r1, #1
 738:	bxeq	lr
 73c:	ldr	r2, [pc, #24]	; 75c <register_tm_clones+0x4c>
 740:	ldr	r3, [r3, r2]
 744:	cmp	r3, #0
 748:	bxeq	lr
 74c:	bx	r3
 750:	.word	0x000109ac
 754:	.word	0x000109a8
 758:	.word	0x000108cc
 75c:	.word	0x00000048

00000760 <__do_global_dtors_aux>:
 760:	ldr	r3, [pc, #76]	; 7b4 <__do_global_dtors_aux+0x54>
 764:	ldr	r2, [pc, #76]	; 7b8 <__do_global_dtors_aux+0x58>
 768:	add	r3, pc, r3
 76c:	add	r2, pc, r2
 770:	ldrb	r3, [r3]
 774:	cmp	r3, #0
 778:	bxne	lr
 77c:	ldr	r3, [pc, #56]	; 7bc <__do_global_dtors_aux+0x5c>
 780:	push	{r4, lr}
 784:	ldr	r3, [r2, r3]
 788:	cmp	r3, #0
 78c:	beq	79c <__do_global_dtors_aux+0x3c>
 790:	ldr	r3, [pc, #40]	; 7c0 <__do_global_dtors_aux+0x60>
 794:	ldr	r0, [pc, r3]
 798:	bl	63c <__cxa_finalize@plt>
 79c:	bl	6cc <deregister_tm_clones>
 7a0:	ldr	r3, [pc, #28]	; 7c4 <__do_global_dtors_aux+0x64>
 7a4:	mov	r2, #1
 7a8:	add	r3, pc, r3
 7ac:	strb	r2, [r3]
 7b0:	pop	{r4, pc}
 7b4:	.word	0x0001095c
 7b8:	.word	0x0001088c
 7bc:	.word	0x00000034
 7c0:	.word	0x000108b8
 7c4:	.word	0x0001091c

000007c8 <frame_dummy>:
 7c8:	b	710 <register_tm_clones>

000007cc <m_map>:
 7cc:	push	{r4, sl, fp, lr}
 7d0:	add	fp, sp, #8
 7d4:	mov	r4, r1
 7d8:	ldrb	r0, [r2, #67]	; 0x43
 7dc:	and	r0, r0, #4
 7e0:	mov	r1, #1
 7e4:	eor	r0, r1, r0, lsr #2
 7e8:	ldr	r1, [pc, #100]	; 854 <m_map+0x88>
 7ec:	ldr	r1, [pc, r1]
 7f0:	ldr	r1, [r1]
 7f4:	cmp	r1, #0
 7f8:	movwne	r1, #1
 7fc:	tst	r0, r1
 800:	bne	834 <m_map+0x68>
 804:	ldr	r0, [pc, #76]	; 858 <m_map+0x8c>
 808:	ldr	r0, [pc, r0]
 80c:	ldr	r0, [r0, #176]	; 0xb0
 810:	cmp	r0, #0
 814:	bne	834 <m_map+0x68>
 818:	ldr	r1, [pc, #60]	; 85c <m_map+0x90>
 81c:	ldr	r1, [pc, r1]
 820:	ldr	r2, [pc, #56]	; 860 <m_map+0x94>
 824:	add	r2, pc, r2
 828:	mov	r0, r4
 82c:	bl	af8 <dump_map>
 830:	b	83c <m_map+0x70>
 834:	mov	r0, r4
 838:	bl	8b8 <flattened_map>
 83c:	ldr	r2, [pc, #32]	; 864 <m_map+0x98>
 840:	add	r2, pc, r2
 844:	mov	r0, r4
 848:	mov	r1, #17
 84c:	pop	{r4, sl, fp, lr}
 850:	b	654 <sendto_one_numeric@plt>
 854:	.word	0x0001084c
 858:	.word	0x00010840
 85c:	.word	0x00010828
 860:	.word	0x000108a1
 864:	.word	0x000004a4

00000868 <mo_map>:
 868:	push	{r4, sl, fp, lr}
 86c:	add	fp, sp, #8
 870:	mov	r4, r1
 874:	ldr	r1, [pc, #48]	; 8ac <mo_map+0x44>
 878:	ldr	r1, [pc, r1]
 87c:	ldr	r2, [pc, #44]	; 8b0 <mo_map+0x48>
 880:	add	r2, pc, r2
 884:	mov	r0, r4
 888:	bl	af8 <dump_map>
 88c:	mov	r0, r4
 890:	bl	684 <scache_send_missing@plt>
 894:	ldr	r2, [pc, #24]	; 8b4 <mo_map+0x4c>
 898:	add	r2, pc, r2
 89c:	mov	r0, r4
 8a0:	mov	r1, #17
 8a4:	pop	{r4, sl, fp, lr}
 8a8:	b	654 <sendto_one_numeric@plt>
 8ac:	.word	0x000107cc
 8b0:	.word	0x00010845
 8b4:	.word	0x0000044c

000008b8 <flattened_map>:
 8b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8bc:	add	fp, sp, #28
 8c0:	sub	sp, sp, #4
 8c4:	vpush	{d8}
 8c8:	sub	sp, sp, #528	; 0x210
 8cc:	mov	r4, r0
 8d0:	ldr	r6, [pc, #496]	; ac8 <flattened_map+0x210>
 8d4:	ldr	r6, [pc, r6]
 8d8:	add	r1, r6, #88	; 0x58
 8dc:	add	r5, sp, #12
 8e0:	mov	r0, r5
 8e4:	mov	r2, #512	; 0x200
 8e8:	bl	690 <rb_strlcpy@plt>
 8ec:	mov	r0, r5
 8f0:	bl	660 <strlen@plt>
 8f4:	mov	r1, #32
 8f8:	strb	r1, [r5, r0]
 8fc:	cmp	r0, #48	; 0x30
 900:	bgt	91c <flattened_map+0x64>
 904:	add	r1, r0, r5
 908:	add	r1, r1, #1
 90c:	rsb	r2, r0, #49	; 0x31
 910:	mov	r0, r1
 914:	mov	r1, #45	; 0x2d
 918:	bl	678 <memset@plt>
 91c:	ldr	r0, [r6, #28]
 920:	ldr	r3, [r0, #56]	; 0x38
 924:	ldr	r0, [pc, #416]	; acc <flattened_map+0x214>
 928:	ldr	r0, [pc, r0]
 92c:	vldr	s0, [r0, #4]
 930:	vldr	s16, [pc, #396]	; ac4 <flattened_map+0x20c>
 934:	vmov	s2, r3
 938:	vcvt.f32.u32	s2, s2
 93c:	vcvt.f32.s32	s0, s0
 940:	vmul.f32	s2, s2, s16
 944:	vdiv.f32	s0, s2, s0
 948:	vcvt.f64.f32	d16, s0
 94c:	vstr	d16, [sp]
 950:	add	r6, r5, #50	; 0x32
 954:	ldr	r2, [pc, #372]	; ad0 <flattened_map+0x218>
 958:	add	r2, pc, r2
 95c:	mov	r0, r6
 960:	movw	r1, #462	; 0x1ce
 964:	bl	66c <snprintf@plt>
 968:	ldr	r2, [pc, #356]	; ad4 <flattened_map+0x21c>
 96c:	add	r2, pc, r2
 970:	mov	r0, r4
 974:	mov	r1, #15
 978:	mov	r3, r5
 97c:	bl	654 <sendto_one_numeric@plt>
 980:	ldr	r0, [pc, #336]	; ad8 <flattened_map+0x220>
 984:	ldr	r0, [pc, r0]
 988:	ldr	r9, [r0]
 98c:	cmp	r9, #0
 990:	beq	ab4 <flattened_map+0x1fc>
 994:	add	r0, r5, #1
 998:	str	r0, [sp, #8]
 99c:	mov	r8, #1
 9a0:	ldr	sl, [pc, #308]	; adc <flattened_map+0x224>
 9a4:	ldr	sl, [pc, sl]
 9a8:	b	a18 <flattened_map+0x160>
 9ac:	ldr	r0, [r7, #28]
 9b0:	ldr	r3, [r0, #56]	; 0x38
 9b4:	ldr	r0, [pc, #304]	; aec <flattened_map+0x234>
 9b8:	ldr	r0, [pc, r0]
 9bc:	vldr	s0, [r0, #4]
 9c0:	vmov	s2, r3
 9c4:	vcvt.f32.u32	s2, s2
 9c8:	vcvt.f32.s32	s0, s0
 9cc:	vmul.f32	s2, s2, s16
 9d0:	vdiv.f32	s0, s2, s0
 9d4:	vcvt.f64.f32	d16, s0
 9d8:	vstr	d16, [sp]
 9dc:	mov	r0, r6
 9e0:	movw	r1, #462	; 0x1ce
 9e4:	ldr	r2, [pc, #260]	; af0 <flattened_map+0x238>
 9e8:	add	r2, pc, r2
 9ec:	bl	66c <snprintf@plt>
 9f0:	mov	r0, r4
 9f4:	mov	r1, #15
 9f8:	ldr	r2, [pc, #244]	; af4 <flattened_map+0x23c>
 9fc:	add	r2, pc, r2
 a00:	mov	r3, r5
 a04:	bl	654 <sendto_one_numeric@plt>
 a08:	add	r8, r8, #1
 a0c:	ldr	r9, [r9, #8]
 a10:	cmp	r9, #0
 a14:	beq	ab4 <flattened_map+0x1fc>
 a18:	ldr	r7, [r9]
 a1c:	ldrh	r0, [r7, #80]	; 0x50
 a20:	cmp	r0, #4
 a24:	beq	a08 <flattened_map+0x150>
 a28:	ldr	r0, [sl, #12]
 a2c:	cmp	r0, #0
 a30:	bne	a40 <flattened_map+0x188>
 a34:	ldrb	r0, [r7, #65]	; 0x41
 a38:	tst	r0, #8
 a3c:	bne	a08 <flattened_map+0x150>
 a40:	ldr	r0, [pc, #152]	; ae0 <flattened_map+0x228>
 a44:	ldr	r0, [pc, r0]
 a48:	ldr	r0, [r0, #8]
 a4c:	cmp	r8, r0
 a50:	ldr	r1, [pc, #140]	; ae4 <flattened_map+0x22c>
 a54:	add	r1, pc, r1
 a58:	ldr	r0, [pc, #136]	; ae8 <flattened_map+0x230>
 a5c:	add	r0, pc, r0
 a60:	moveq	r1, r0
 a64:	mov	r0, r5
 a68:	mov	r2, #512	; 0x200
 a6c:	bl	690 <rb_strlcpy@plt>
 a70:	add	r1, r7, #88	; 0x58
 a74:	mov	r0, r5
 a78:	mov	r2, #512	; 0x200
 a7c:	bl	69c <rb_strlcat@plt>
 a80:	mov	r0, r5
 a84:	bl	660 <strlen@plt>
 a88:	mov	r1, #32
 a8c:	strb	r1, [r5, r0]
 a90:	cmp	r0, #48	; 0x30
 a94:	bgt	9ac <flattened_map+0xf4>
 a98:	ldr	r1, [sp, #8]
 a9c:	add	r1, r1, r0
 aa0:	rsb	r2, r0, #49	; 0x31
 aa4:	mov	r0, r1
 aa8:	mov	r1, #45	; 0x2d
 aac:	bl	678 <memset@plt>
 ab0:	b	9ac <flattened_map+0xf4>
 ab4:	sub	sp, fp, #40	; 0x28
 ab8:	vpop	{d8}
 abc:	add	sp, sp, #4
 ac0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 ac4:	.word	0x42c80000
 ac8:	.word	0x00010770
 acc:	.word	0x0001070c
 ad0:	.word	0x00000399
 ad4:	.word	0x0000039e
 ad8:	.word	0x000106a4
 adc:	.word	0x00010694
 ae0:	.word	0x000105e4
 ae4:	.word	0x000002bf
 ae8:	.word	0x000002b2
 aec:	.word	0x0001067c
 af0:	.word	0x00000309
 af4:	.word	0x0000030e

00000af8 <dump_map>:
 af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 afc:	add	fp, sp, #28
 b00:	sub	sp, sp, #12
 b04:	mov	r4, r2
 b08:	mov	r6, r1
 b0c:	mov	r5, r0
 b10:	mov	r0, #0
 b14:	strb	r0, [r2]
 b18:	add	r1, r1, #88	; 0x58
 b1c:	mov	r0, r2
 b20:	mov	r2, #512	; 0x200
 b24:	bl	69c <rb_strlcat@plt>
 b28:	mov	r7, r6
 b2c:	ldrb	r0, [r7, #396]!	; 0x18c
 b30:	cmp	r0, #0
 b34:	beq	b70 <dump_map+0x78>
 b38:	ldr	r1, [pc, #396]	; ccc <dump_map+0x1d4>
 b3c:	add	r1, pc, r1
 b40:	mov	r0, r4
 b44:	mov	r2, #512	; 0x200
 b48:	bl	69c <rb_strlcat@plt>
 b4c:	mov	r0, r4
 b50:	mov	r1, r7
 b54:	mov	r2, #512	; 0x200
 b58:	bl	69c <rb_strlcat@plt>
 b5c:	ldr	r1, [pc, #364]	; cd0 <dump_map+0x1d8>
 b60:	add	r1, pc, r1
 b64:	mov	r0, r4
 b68:	mov	r2, #512	; 0x200
 b6c:	bl	69c <rb_strlcat@plt>
 b70:	ldr	r8, [pc, #348]	; cd4 <dump_map+0x1dc>
 b74:	add	r8, pc, r8
 b78:	mov	r0, r8
 b7c:	bl	660 <strlen@plt>
 b80:	mov	r1, #32
 b84:	strb	r1, [r8, r0]
 b88:	cmp	r0, #48	; 0x30
 b8c:	bgt	ba8 <dump_map+0xb0>
 b90:	add	r1, r0, r8
 b94:	add	r1, r1, #1
 b98:	rsb	r2, r0, #49	; 0x31
 b9c:	mov	r0, r1
 ba0:	mov	r1, #45	; 0x2d
 ba4:	bl	678 <memset@plt>
 ba8:	ldr	r0, [r6, #28]
 bac:	ldr	r3, [r0, #56]	; 0x38
 bb0:	mov	r0, #1000	; 0x3e8
 bb4:	mul	r0, r3, r0
 bb8:	ldr	r1, [pc, #280]	; cd8 <dump_map+0x1e0>
 bbc:	ldr	r1, [pc, r1]
 bc0:	ldr	r1, [r1, #4]
 bc4:	add	r2, r1, r1, lsr #31
 bc8:	add	r0, r0, r2, asr #1
 bcc:	udiv	r0, r0, r1
 bd0:	movw	r1, #26215	; 0x6667
 bd4:	movt	r1, #26214	; 0x6666
 bd8:	smmul	r1, r0, r1
 bdc:	asr	r2, r1, #2
 be0:	add	r1, r2, r1, lsr #31
 be4:	add	r2, r1, r1, lsl #2
 be8:	sub	r0, r0, r2, lsl #1
 bec:	str	r1, [sp]
 bf0:	str	r0, [sp, #4]
 bf4:	add	r0, r8, #50	; 0x32
 bf8:	ldr	r2, [pc, #220]	; cdc <dump_map+0x1e4>
 bfc:	add	r2, pc, r2
 c00:	movw	r1, #462	; 0x1ce
 c04:	bl	66c <snprintf@plt>
 c08:	ldr	r2, [pc, #208]	; ce0 <dump_map+0x1e8>
 c0c:	add	r2, pc, r2
 c10:	mov	r0, r5
 c14:	mov	r1, #15
 c18:	mov	r3, r8
 c1c:	bl	654 <sendto_one_numeric@plt>
 c20:	ldr	r0, [r6, #28]
 c24:	ldr	r1, [r0, #36]	; 0x24
 c28:	cmp	r1, #0
 c2c:	beq	c64 <dump_map+0x16c>
 c30:	ldr	sl, [r0, #44]	; 0x2c
 c34:	add	r0, r8, #3
 c38:	mov	r8, r5
 c3c:	cmp	r4, r0
 c40:	bls	c6c <dump_map+0x174>
 c44:	cmp	sl, #0
 c48:	beq	c6c <dump_map+0x174>
 c4c:	mov	r0, #32
 c50:	strb	r0, [r4, #-2]
 c54:	ldrb	r1, [r4, #-3]
 c58:	cmp	r1, #96	; 0x60
 c5c:	strbeq	r0, [r4, #-3]
 c60:	b	c6c <dump_map+0x174>
 c64:	mov	r8, r5
 c68:	mov	sl, #0
 c6c:	ldr	r0, [r6, #28]
 c70:	ldr	r5, [r0, #36]	; 0x24
 c74:	cmp	r5, #0
 c78:	beq	cc4 <dump_map+0x1cc>
 c7c:	add	r6, r4, #4
 c80:	mov	r7, #1
 c84:	mov	r9, #32
 c88:	ldr	r1, [r5]
 c8c:	movw	r0, #8237	; 0x202d
 c90:	strh	r0, [r4, #2]
 c94:	cmp	r7, sl
 c98:	mov	r0, #96	; 0x60
 c9c:	movwlt	r0, #124	; 0x7c
 ca0:	strb	r0, [r4, #1]
 ca4:	strb	r9, [r4]
 ca8:	mov	r0, r8
 cac:	mov	r2, r6
 cb0:	bl	af8 <dump_map>
 cb4:	add	r7, r7, #1
 cb8:	ldr	r5, [r5, #8]
 cbc:	cmp	r5, #0
 cc0:	bne	c88 <dump_map+0x190>
 cc4:	sub	sp, fp, #28
 cc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 ccc:	.word	0x000001dc
 cd0:	.word	0x000001ba
 cd4:	.word	0x00010551
 cd8:	.word	0x00010478
 cdc:	.word	0x00000120
 ce0:	.word	0x000000fe

Disassembly of section .fini:

00000ce4 <_fini>:
 ce4:	push	{r3, lr}
 ce8:	pop	{r3, pc}
